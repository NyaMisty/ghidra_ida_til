
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\arm\wince.til.h"
/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_wince_til ===true

/// #define INCLUDE_GUARD_wince_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\arm\.\..\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===true

typedef uint32_t __u32;
/// #endif ===true

/// #ifndef HAVETYPE___u16 ===true

typedef uint16_t __u16;
/// #endif ===true

/// #ifndef HAVETYPE___u64 ===true

typedef uint64_t __u64;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_uid32_t ===true

typedef unsigned int __kernel_uid32_t;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_mqd_t ===true

typedef int __kernel_mqd_t;
/// #endif ===true



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED

typedef char _Mbstatet;

typedef void **va_list;





























 
#line 4: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\arm\wince.til.h"




struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___6B5846D67F7DD81E1807E9F45EE9219E;
struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___7C8E1366D020F294DF98B2AA96DD5064;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018;
struct _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912___558C11AAB270A8DE5636A48AC52A55A4;
struct _INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D___B7B026DB31B17766038D77C05C379288;
struct _INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D___9E89BBC867D9061195152B8C00CA068F;
struct _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4;
struct _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC___558C11AAB270A8DE5636A48AC52A55A4;
struct _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264;
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158;
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81;
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5;
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___0EEE90683FC184311ECCCD409B91075C;
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___381AA3CBBBF76D5CF30945FCDC4D2CAC;
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___7B3411E171B9A34DEFFA2511BBE856A2;
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___A40467932820BC39622B6C782DBB7F64;
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___15881024B0F660B7398AF4B4249A3A24;
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___3EEFC530056981631A2136A7505B6E7C;
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___5F23BCEFF143F24425E18DB271E74871;
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___7B1CB6EE79569F81CDFB60A5A427B7E5;
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___D177823888D2499403AB088A16B8A5D6;
struct _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9___558C11AAB270A8DE5636A48AC52A55A4;
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6;
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46;
struct _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF___A9FC48894F8D14019CAF4D8F08A526D6;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF;
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB;
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C;
struct tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578;
struct ProfilerControl___129768231BCEF2215A31782384C84F0E___60B1718D3020D7E9553B4563664AAB69;
struct ProfilerControl___129768231BCEF2215A31782384C84F0E___7F14D5CA1569ED1B5DE5D2F9C51A1434;
struct _DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360___A78036EB239B85FA27F661E6E98FFEA9;
struct _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___1F732941DC73F2F4B18392F9D66856DC;
struct _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___C3A437D225B8ED983937C7D8822FFF10;
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7;
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678;
struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B;
struct tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A8262751543F154F80C41ED2519FD13B;
struct tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A9226EEFE738F03A3F7D52221D0941CC;
union tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E;
struct _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997___E6DE4D969135FBE52EE29B014660F051;
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9;
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7;
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692;
struct _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324;
struct _IRP_________63BBF9CAFCFD23268916A053C4643290___D67882FDDE0993B795A398485751D997;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D;
struct tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB;
struct _DDSCAPS2___8E5B05F19B273318D79B4635679340DD___A4C750532322E8B339E2E1239D122058;
union _IRP______12B2BAD74E2AB4DE00B958803C411E58___63BBF9CAFCFD23268916A053C4643290;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5;
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B;
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56;
struct _IRP___2B8045857F44E8706EFE3A31F95ACA19___12B2BAD74E2AB4DE00B958803C411E58;
struct _IRP___587A9B960BE92E4E8E029EB753BAD923___15DEB8494280A91F57C8F397618367A3;
struct _NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F___AuthenticationEvent;
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_0;
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_1;
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_2;
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8;
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO___F4C9A18A61EDC422290C9C9CC9138C86;
union _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO___F4C9A18A61EDC422290C9C9CC9138C86;
union __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005;
union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56;
union _22AB0003247B482AF4559A70859CB27B___1764B377E4534D27D10578FBFD4626DA;
struct _25126A14EDD85516184FD5A53ADA74D5___49138D03018A299D3153760A1810DA37;
union _5803EBEE9ECFF6BB80A4332382185F4F___180061D661035B18422EFCDC7BB918FA;
union _5803EBEE9ECFF6BB80A4332382185F4F___50DB88C5F36CD3CA39B08DBB011F2688;
union _5803EBEE9ECFF6BB80A4332382185F4F___8118B546B46D1359E99FBEE781916E35;
union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344;
union _69ED22A368F3E798C4741346320560FE___5D1CD365174EA865F6BBD61804407C82;
union _8474248025A8750E00C60BF8466F1484___374EDF0D25A28277CD19F16CB81F0F1E;
union _C0D59FBB56C2A4C81C123E710A248183___1764B377E4534D27D10578FBFD4626DA;
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F;
union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF;
union _EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED;
union _FF89E438303108C0D33906FD5928F176___7395E293A6E60324CDBFB0E25A5179BF;
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29;
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764;
union _WTD_GENERIC_CHAIN_POLICY_DATA___F4C9A18A61EDC422290C9C9CC9138C86;
union _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912;
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B;
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43;
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D;
union _INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D;
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA;
union _INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C;
union _INTERNET_CACHE_ENTRY_INFOW___9E8845A706AB4DF9270F3009F082917C;
union _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533;
union _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC;
union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F;
union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F;
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5;
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC;
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86;
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38;
struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_REQFI;
struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_RESFI;
struct _structDVD_AUDIO_MU_ATTR___9CEA1F46C8B9203C81B8253549FA0A67;
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003;
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D;
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7;
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C;
union _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835;
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0;
union UserNotificationType___03336E7F16FF4F78E2675530DEED7B28;
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676;
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178;
union _CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843;
union _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F;
union _CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6;
union _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C;
union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D;
union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF;
union tagHTTPMAILRESPONSE___25469AC23E09BBA79E0FC09E85120BDE;
union _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E;
union _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9;
struct _ISA_PNP_RESOURCES___B10D0EB096FDB570503A50FD378F9FB4;
struct _ISA_PNP_RESOURCES___CBBBBB801E0B5AAFC7252BC6A195EFA3;
struct _ISA_PNP_RESOURCES___D30A615D33D92688260AD94A2A31BFD2;
union _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB;
union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD;
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001;
union tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1;
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11;
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C;
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34;
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5;
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED;
union _NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F;
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987;
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5;
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457;
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710;
union tagCATEGORIZATION___9A864AD3BD44E1250FA7471F5202A2AD;
union _CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0;
union _MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76;
union _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF;
union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA;
union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191;
struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E;
union tagDBCOMMANDTREE___E5937B8F0F9741201FD055AC240E9FBB;
union ProfilerControl___129768231BCEF2215A31782384C84F0E;
union _COMPFOLDERINIT___4B9AD8C7A3F4309023EA46FD12BBDF5A;
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50;
union _DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B;
union _DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D;
union _DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842;
union _DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED;
union _DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260;
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672;
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56;
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED;
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC;
union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0;
union tagNNTPRESPONSE___972C5209C9C79C2B3E2837DC92DFE3AF;
union tagPOP3RESPONSE___BF7D238E18609FD3182F5629010D447B;
union tagSMTPRESPONSE___F2E271575EB3F09F226A3079A92CFBD3;
union _DDPIXELFORMAT___23DF69239FC04D9BE22118E1AD8451FB;
union _DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360;
union _DDPIXELFORMAT___4C86B66084EB9B6F3AE81991D3FADB38;
union _DDPIXELFORMAT___6A86D2BA2D533C5D3D5AB1F1491969D5;
union _DDPIXELFORMAT___F1D3FB4D78950D0942225445130999CB;
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B;
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B;
union _DEVICE_OBJECT___C539DEAEE31ED5B59C09D6583F6C5542;
union _FIREWALL_RULE___973FCA0161B39F61E7428A3C8AFC48CB;
union _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0;
union _FW_IP_ADDRESS___3527238699F3EEF5D435929F9A6EFFF0;
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E;
union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F;
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB;
union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655;
union tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8;
union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4;
union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4;
union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6;
union tMIXERCONTROL___7907B101388E14016599F7564F0D3B22;
union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E;
union _CEOIDINFOEX___69C160A242F05D05EB1D41CC7FD259DB;
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83;
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87;
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4;
struct _INSTALLSPEC___280CBF6B7A133B5B4CDCF4989FA21BAE;
struct _INSTALLSPEC___BA048A39EDAE67FECCBF1A4089D0E28B;
union _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997;
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F;
union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3;
union _wireVARIANT___97E5681EB831466912C1B906D2CF69C6;
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB;
union tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A;
union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923;
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D;
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D;
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2;
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897;
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
union _CEOIDINFO___51E958489F3A3AB9E4FA9A4B244F18C9;
union _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902;
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097;
union _NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E;
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514;
struct tMIXERLINE___4C57F2B9A037CE403812BA722E360DF8;
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B;
union tagVARIANT___CFEED276C078973BD7512520F6B5AF6E;
union ARTICLEID___647512AA9B67F9C9BB99261C4EFD0D05;
union SPC_LINK____5823D59480DB17DC94F0503486FD38F0;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
union _DDSCAPS2___8E5B05F19B273318D79B4635679340DD;
struct _timecode___6889D7C8638655C86F211076F8C624CB;
union DXBNDS____MIDL___MIDL_itf_dxtrans_0155_0001;
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C;
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83;
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C;
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19;
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87;
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935;
union in6_addr___8ED4E7701E25C3FE29CB3F55C2DB6D15;
union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57;
union ldapmodW___E212A43E07F676EA561EB2F20C2750D7;
union tagINPUT___72687D791E298366090936F57062F9D6;
union DXVEC____MIDL___MIDL_itf_dxtrans_0155_0002;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA;
union _STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D;
struct _avifieldindex_chunk___avifieldindex_entry;
union in_addr___C13EC994467D6E67044F092615EC7EA9;
union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB;
union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D;
struct IDebugPropertyEnumType_LocalsPlusArgsVtbl;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
union _NMSHN___8295B2051F25299B4D869C96899A3C0F;
union _userHMETAFILEPICT____MIDL_IWinTypes_0005;
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34;
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301;
union _userHENHMETAFILE____MIDL_IWinTypes_0006;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3;
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
union _IRP___2B8045857F44E8706EFE3A31F95ACA19;
union _IRP___587A9B960BE92E4E8E029EB753BAD923;
union _IRP___CBBBB9F4F0755A16DC8A369061485BEC;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009;
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
struct ldap___DB9AF84D9AB6BBC578E4BBA80938AF25;
struct IRTCSessionOperationCompleteEvent2Vtbl;
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION;
struct _NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION;
union _userCLIPFORMAT____MIDL_IWinTypes_0001;
struct IDebugPropertyEnumType_LocalsPlusArgs;
struct IRTCSessionOperationCompleteEventVtbl;
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
union _GDI_NONREMOTE____MIDL_IWinTypes_0002;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO;
struct _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO;
union _userHMETAFILE____MIDL_IWinTypes_0004;
struct IDebugPropertyEnumType_ArgumentsVtbl;
struct IDebugPropertyEnumType_RegistersVtbl;
struct IElementNamespaceFactoryCallbackVtbl;
struct IOleControlNavigation2AdviseSinkVtbl;
struct IRTCRegistrationStateChangeEventVtbl;
struct IUPnPDescriptionDocumentCallbackVtbl;
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
struct _CO_AF_TAPI_INCOMING_CALL_PARAMETERS;
struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY;
union _GDI_OBJECT____MIDL_IAdviseSink_0002;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _NDIS_802_11_ASSOCIATION_INFORMATION;
struct __MIDL___MIDL_itf_shobjidl_0116_0002;
struct __MIDL___MIDL_itf_shobjidl_0117_0003;
struct _avisuperindex___avisuperindex_entry;
union _userHPALETTE____MIDL_IWinTypes_0008;
struct IDirectDrawMediaSampleAllocatorVtbl;
struct IRTCParticipantStateChangeEventVtbl;
struct ITableDefinitionWithConstraintsVtbl;
struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION;
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct _NDIS_802_11_AUTHENTICATION_REQUEST;
struct _SecPkgContext_RemoteCredentialInfo;
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
union _userHBITMAP____MIDL_IWinTypes_0007;
union _userHGLOBAL____MIDL_IWinTypes_0003;
struct HTMLOptionButtonElementEvents2Vtbl;
struct IActiveScriptParseProcedureOldVtbl;
struct IActiveScriptSiteInterruptPollVtbl;
struct IEnumDebugExtendedPropertyInfoVtbl;
struct IHTMLStyleSheetPagesCollectionVtbl;
struct IHTMLStyleSheetRulesCollectionVtbl;
struct IInternetProtocolSinkStackableVtbl;
struct IRTCSessionOperationCompleteEvent2;
struct _CERT_POLICY_QUALIFIER_USER_NOTICE;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
struct _CO_TAPI_TRANSLATE_NDIS_CALLPARAMS;
struct _CO_TAPI_TRANSLATE_TAPI_CALLPARAMS;
struct _DOT11_CURRENT_OPTIONAL_CAPABILITY;
struct _DOT11_DIVERSITY_SELECTION_RX_LIST;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
struct _INTERNET_CACHE_CONFIG_PATH_ENTRYA;
struct _INTERNET_CACHE_CONFIG_PATH_ENTRYW;
struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _NDIS_TAPI_LINE_CONFIG_DIALOG_EDIT;
struct _SecPkgContext_LocalCredentialInfo;
struct __MIDL___MIDL_itf_dvdata_0105_0001;
struct __MIDL___MIDL_itf_dvdcom_0000_0001;
struct __MIDL___MIDL_itf_dvdcom_0000_0002;
struct __MIDL___MIDL_itf_dvdcom_0000_0003;
struct __MIDL___MIDL_itf_dvdnav_0000_0001;
struct __MIDL___MIDL_itf_strmif_0076_0001;
struct __MIDL___MIDL_itf_strmif_0080_0001;
struct __MIDL___MIDL_itf_strmif_0080_0002;
struct __MIDL___MIDL_itf_strmif_0099_0002;
struct __MIDL___MIDL_itf_strmif_0231_0001;
struct __MIDL___MIDL_itf_urlmon_0000_0001;
struct tagDVD_MultichannelAudioAttributes;
struct _0302F8A06E19F526F6B7CE33122C2128;
struct _03D431463D1B1B07D135EFD405717ACF;
struct _068AF82868DFBF98C4A3A88443B401AE;
struct _0704266397680A28280F4A6885C4C35C;
struct _078929F8CD96C82DFB2B0B82CFD86124;
struct _098CCDCB9074DBE2AEBC1B4026CD72FD;
struct _0AD2D8D1BD5FB2EC4188290EECBF472F;
struct _0B8D1429C3827E0DB460E98487EB6908;
struct _0B98F7F74C669A73C109E26A7282B4DF;
struct _115DB0BA7714D6186FAE116E0F88D0E0;
struct _12065485545C98CF3EA596DDCCDF0ED5;
struct _13B347001B2B96C65D01839EEA37C971;
struct _17CA7839736B8F73357CD165DBE52F18;
struct _17F3FD07C99F0D37811DB8E7808607BC;
struct _18FEA12C471CE0A4515515C42723EF45;
struct _1B524A7EE9DF0D2D7407CE43B258BBC8;
struct _1C9ED8E2FE494C714F8336D090291E50;
struct _1CF5A01E195BE25BEDA13B6A0EE28B07;
struct _1FC20381981E06D3B4F68D6006129906;
struct _21B90258E17C8B6D2BC61A88DF74B5FB;
struct _22AB0003247B482AF4559A70859CB27B;
union _25126A14EDD85516184FD5A53ADA74D5;
struct _25388EDDA6F9AFF912B25CA06CA16E0D;
struct _271E49C86C8EFA0B647D87A58CF03284;
struct _27240A871129E8C5EF2505ED059D4BC8;
struct _28B4C1B75CAE6C770B09685B06A94D5B;
struct _299134A1587F81C88B1AF91D3DBFCA39;
struct _2B4FDC4BF487E67F052937EE78FAE255;
struct _2E02FE147086727B9806CD802F6B77B7;
struct _2FCB7B16F35A994219C907239F9496DC;
struct _30A778B999D395B0C4B1147E524BC6D9;
struct _30C092ACFDACA2A085242C6994837CA9;
struct _30CC7D53408649846FD423BE19D3AD21;
struct _328060AA9F47934214406E09F9D6352A;
struct _33F4F007281270209645FC22B7FA2C59;
struct _362ECF3E0DC92881BF24984B329406EC;
struct _3A744348A6C9F73853F568E19FD6B4F7;
struct _3EB284A884AA968851CCD5BE7E4B68CB;
struct _3EC5757393EE7828D79CED73ACE876F0;
struct _3F4F059ECBF871A70338C30D0BE50D1F;
struct _3FA64165D15A4602C29B2D9B0DA4A5E9;
struct _3FBC325AC5E1830BAC7DB9619C6C90C8;
struct _459629BAC169663B96C3B85C5F4E781B;
struct _463E06C868FD59B527DBF787F8EA20AA;
struct _52A9C12110BCF838A5CA2520D41849E7;
struct _5687B37E6A0F56297A2BB22AF6770AC6;
union _57C85DECF0FD0199FAFF37B7119884AE;
union _5803EBEE9ECFF6BB80A4332382185F4F;
struct _5DBE423D59383EF3676E2D6AC9F8E7EA;
struct _5EF848D89F9DCE1B24DE4CD973F24EF8;
struct _60326525EFFC6265B33A0784E3C361D7;
struct _610479CDF0DBDC41F2C77A99D793B920;
struct _629BEC52AC958F9227D2C26B709A43D0;
struct _62EC1DAD6DB92F8723AD0A50B2259449;
struct _63C5725C5B677664277ACEA161B104D1;
struct _64711BDE50DED9ED482573D36995441D;
union _66627B77A16817CACFC28DBBF83E8217;
struct _683A07C7E5B3B29A9EBE9FB3AE677E07;
struct _683A376D3D72D8A4C1C01AE0B36D8AA2;
struct _6950E4854C03824D44DF624674A695D1;
struct _69ED22A368F3E798C4741346320560FE;
struct _6D2254E53597AC8CE26BF57895A6DFF7;
struct _6DA6B4B6F4711DFAB548288AAA9B9C99;
struct _704C8BC5772B0C9E3985D9D11FD57746;
struct _70BF96555A8221A8BC520C987124981D;
struct _70EF98671D92E01A751E5EFF82E819E9;
struct _70FE3ED39A29D5613E00A3E72F8FD4C3;
struct _72295A7541EC936D47FC3642EE72298B;
struct _7307A00A22D5C0EAA9BB8E536231902F;
struct _73827E02090E4C689AB98CDF13C808CD;
struct _73DB40CAD3136568FAD030BDAAB8FF71;
struct _7545F1A067A9FBB43FDF50E78E6B08BD;
struct _75E76725892DEE09A36EC583FA7F4E2E;
struct _7644B9603AEA08EBF4DF4A983BB6B237;
struct _7684FB82DC2359E8867448D749E28870;
struct _7807FA91DA52C5F41D82DAAEFE4F1D2C;
struct _7909BF26B031C365F3B32F82E7366E93;
struct _793203A904263AF632B64217160A3CD4;
struct _7C01EC4AA5C6496238BC9707060AB8CE;
struct _7F09F6AD7173E0292471C155D2885AEF;
struct _7F42DEB2BB5D0DE64733A8884285C23D;
struct _8474248025A8750E00C60BF8466F1484;
struct _862005EC9EDD7026C51E0C19A67AAE6E;
struct _8688FBDBF9FB8D670D1638B47BFC0FAD;
struct _8B9777916333A4B8A3A60FA8F93F002E;
struct _8C3F85A0EA2F93E5FB549BFC1FBD2808;
struct _8CFCABD0DC01E1B1C2FF20A071112968;
struct _8F75023966CB92194279486244E09366;
struct _8FE251E0C9BEAEF58C2D97D4F1899077;
struct _90E769FB438B6A83B49CA07EC4EB3EFA;
struct _947C6FA139885FA2B0DE7F2A3FDD942C;
struct _97DDCABA8DED8140EC93664CC20AFA42;
struct _9ADD4811563784E97592213CBF8060F3;
struct _9BDEEC9D290208213B3D235A4099D9F6;
struct _9EEC6D4C8F692379AA2A6356D0C3C3FC;
struct _A2D3C6DF54C31D821ABE78046EA78F8E;
struct _A5A2C297D512B29747AD9A814A819610;
struct _A615A68A66448D8BF4E7E81F3C279570;
struct _A92B2F5D7D80D42A113836D63CC8DDA6;
struct _ABC12D3D27847D90880B2A365197CC67;
struct _AD47B7B6770F26FF00FF8EF46A9765CE;
struct _B1AAA2E973C90C8AA1D1293855444268;
struct _B3292A763DBD4275988A0D01CB88CB44;
struct _B39C686D84F1EA3E9B3743A81E5F4B95;
struct _B3B9922EB7092B419B9B91CCE29DC8AC;
struct _B4498E7712516769976529B01E1F74C2;
struct _B6822E6B2532C41BAC9FA8CDDAB44A4D;
struct _B80B7D01E79FADDB4AAC58DE22BC823F;
struct _B8380904D5E4DBEF1FA17159C4574D89;
struct _B878650F4DB1CE5DD79981052205B0E0;
struct _BC2FB811D417144E831EE3AEA4A279C8;
struct _BE0BDAB4463CDAC89A1FD071673BF7FC;
struct _C0A2C8317C92AEC6C65405BB0D08D817;
struct _C0D59FBB56C2A4C81C123E710A248183;
struct _C0E9FF9F6B7B062E990DE9E300C0D00E;
struct _C25693052C43ED6AA003F87DB66344AA;
struct _C3795B4C40F1F780E52EE60833F04917;
struct _C3D536761911E1B34BFF5DAB2CC3A2E9;
struct _C60E957D81AACC99A9C8D1688EAC55F2;
struct _C6832D807A2747A4D0CBF13E34E0B28B;
struct _C9FA87CB09885B34D96B23C89F19724B;
struct _CA059CF4194B4A9D56D5FA32D4D81CE0;
struct _CC81E267BD8B32E89ADB7AE662C05BFA;
struct _CCEDB0757BDFC2DD5AC112970835DC93;
struct _CE02AD95896D5CE1FBC89EB4094A5E1C;
struct _D26D25374C75FEF3AD181CCFA77BD37F;
struct _D27293EA07A9AE13A5F9D796DF4562B3;
struct _D333B2CEDD563FFBEB75B63E07F81E15;
struct _D59F8FB060D1A4257ECDF2860F49B6AF;
struct _D63E714A239F9C0D1FE2D222C2E0E7D5;
struct _D692CA7460863103343173F071E8F66B;
struct _DA4DDC42953EF335ABBBEB43C6FEBDA6;
struct _DA63D2C084DFF8EF53A1633F272A983E;
struct _DC79A6464562D2DC48FEEE8D5793116D;
struct _DD2E0983FBF83F36606C69DABA2BC276;
struct _DE8A226FBF6958721EC6E17746E96A38;
struct _E3900F4E8C66B34C84E740787FDB0DE9;
struct _E3EDD7A8EB9A8A8EC907A9BA28720893;
struct _E42E7BED0EE5193A4D0BC9D45E2008A3;
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09;
struct _E6EEE8D03854377210BB1626C10183C8;
struct _E7DEFB284EA8021B90974CE0B87C7D17;
struct _EB59546A6B00F9787175E0D2790469DD;
struct _EC3BB85EBBE9955145E6214979EA4930;
struct _EC8EE2E9AF7D4EC32726A7FD632A186D;
struct _EF67D941BFA119366B947DED69649A3B;
struct _F0080E258AF97822278D302FBC4D344F;
struct _F03B70C123AB6920C4DDA521DD856E56;
struct _F10D036DAB5DBA0B4D269BB7AEDCBE71;
struct _FB10B385A80E8C43E2FAF14F8CAB4B13;
struct _FB1D2264C317C52716420591CB70B7FC;
struct _FBE7179BAB40555F1A13AD3C5BC3BB71;
struct _FC03820C0C9B455049C143518E71A23B;
struct _FD737F0F5708B21CCBC55006761FC7AF;
struct _FE6FD525E979B51115A77BACF8C3F565;
struct _FEF45AADF86B3C581868F0239CC1F2BD;
struct _FF89E438303108C0D33906FD5928F176;
struct HTMLOptionButtonElementEventsVtbl;
struct IAnimationComposerSiteFactoryVtbl;
struct IDebugPropertyEnumType_LocalsVtbl;
struct INetCfgComponentNotifyBindingVtbl;
struct IRTCDispatchEventNotificationVtbl;
struct IRTCSessionDescriptionManagerVtbl;
struct IRTCSessionOperationCompleteEvent;
struct _CERT_REGISTRY_STORE_ROAMING_PARA;
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION;
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
struct _DOT11_CURRENT_OFFLOAD_CAPABILITY;
struct _DOT11_HOPPING_PATTERN_ENTRY_LIST;
struct _DOT11_SUPPORTED_DATA_RATES_VALUE;
struct __MIDL_IDVDStreamControlInfo_0001;
struct _structDVD_SUBPICTURE_STREAM_ATTR;
struct DispIHTMLOptionButtonElementVtbl;
struct IActiveScriptAuthorProcedureVtbl;
struct IActiveScriptParseProcedure2Vtbl;
struct IDMOVideoOutputOptimizationsVtbl;
struct IDebugPropertyEnumType_Arguments;
struct IDebugPropertyEnumType_Registers;
struct IElementBehaviorSiteCategoryVtbl;
struct IElementNamespaceFactoryCallback;
struct IInternetHostSecurityManagerVtbl;
struct INetCfgComponentNotifyGlobalVtbl;
struct IOleControlNavigation2AdviseSink;
struct IRTCRegistrationStateChangeEvent;
struct IRTCSessionStateChangeEvent2Vtbl;
struct ITIMEActiveElementCollectionVtbl;
struct IUPnPDescriptionDocumentCallback;
struct IXMLDOMProcessingInstructionVtbl;
struct _CERT_KEY_USAGE_RESTRICTION_INFO;
struct _CERT_SYSTEM_STORE_RELOCATE_PARA;
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
struct _CO_AF_TAPI_MAKE_CALL_PARAMETERS;
struct _DEV_BROADCAST_DEVICEINTERFACE_A;
struct _DEV_BROADCAST_DEVICEINTERFACE_W;
struct _DOT11_OPERATION_MODE_CAPABILITY;
struct _DOT11_REG_DOMAINS_SUPPORT_VALUE;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _NDIS_TAPI_NEGOTIATE_EXT_VERSION;
struct _USERNAME_TARGET_CREDENTIAL_INFO;
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA;
struct _avioldindex___avioldindex_entry;
struct _userSTGMEDIUM___STGMEDIUM_UNION;
struct DispHTMLAttributeCollectionVtbl;
struct DispIHTMLInputButtonElementVtbl;
struct HTMLInputFileElementEvents2Vtbl;
struct HTMLInputTextElementEvents2Vtbl;
struct IActiveScriptParseProcedureVtbl;
struct IDDrawExclModeVideoCallbackVtbl;
struct IDVDParentalManagementTableVtbl;
struct IDirectDrawMediaSampleAllocator;
struct IElementBehaviorSiteLayout2Vtbl;
struct IEnumDVD_TEXT_LANGUAGE_UNITVtbl;
struct IEnumNetCfgBindingInterfaceVtbl;
struct IHighlightRenderingServicesVtbl;
struct IOleInPlaceObjectWindowlessVtbl;
struct IRTCParticipantStateChangeEvent;
struct IRTCSessionReferStatusEventVtbl;
struct IRTCSessionStateChangeEventVtbl;
struct IShellIconOverlayIdentifierVtbl;
struct ISyncMgrSynchronizeCallbackVtbl;
struct ITableDefinitionWithConstraints;
struct IUPnPServiceCallbackPrivateVtbl;
struct OLEDBSimpleProviderListenerVtbl;
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA;
struct _CERT_X942_DH_VALIDATION_PARAMS;
struct _CREDENTIAL_TARGET_INFORMATIONA;
struct _CREDENTIAL_TARGET_INFORMATIONW;
struct _DOT11_MD_CAPABILITY_ENTRY_LIST;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _INTERNET_CACHE_CONTAINER_INFOA;
struct _INTERNET_CACHE_CONTAINER_INFOW;
struct _SecPkgContext_IssuerListInfoEx;
struct _SecPkgContext_NegotiationInfoA;
struct _SecPkgContext_NegotiationInfoW;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY;
struct __MIDL_IEnumDVD_CELL_PIECE_0001;
struct creative_fastspeech10format_tag;
struct HTMLInputFileElementEventsVtbl;
struct HTMLInputTextElementEventsVtbl;
struct HTMLOptionButtonElementEvents2;
struct IAMCopyCaptureFileProgressVtbl;
struct IActiveIMMMessagePumpOwnerVtbl;
struct IActiveScriptParseProcedureOld;
struct IActiveScriptSiteInterruptPoll;
struct IAnimationComposerSiteSinkVtbl;
struct IDebugPropertyEnumType_AllVtbl;
struct IElementBehaviorSiteLayoutVtbl;
struct IElementBehaviorSiteRenderVtbl;
struct IEnumDebugExtendedPropertyInfo;
struct IHTMLDOMChildrenCollectionVtbl;
struct IHTMLStyleSheetPagesCollection;
struct IHTMLStyleSheetRulesCollection;
struct IHTMLStyleSheetsCollectionVtbl;
struct IInternetProtocolSinkStackable;
struct INetCfgComponentPropertyUiVtbl;
struct INetCfgPnpReconfigCallbackVtbl;
struct IRTCUserSearchResultsEventVtbl;
struct ISelectionServicesListenerVtbl;
struct IShellNotificationCallbackVtbl;
struct ISubscriptionAgentShellExtVtbl;
struct IVoIPCurrentCallEnumeratorVtbl;
struct _CMSG_KEY_AGREE_RECIPIENT_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_INFO;
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA;
struct _CRYPT_TIME_STAMP_REQUEST_INFO;
struct _D3DDEVICE_CREATION_PARAMETERS;
struct _DOT11_ASSOC_INDICATION_UPCALL;
struct _EXCEPTION_REGISTRATION_RECORD;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS;
struct _NDIS_802_11_NETWORK_TYPE_LIST;
struct _NDIS_802_11_STATUS_INDICATION;
struct _NDIS_TAPI_GET_CALL_ADDRESS_ID;
struct _NDIS_TAPI_GET_LINE_DEV_STATUS;
struct _NDIS_TAPI_PROVIDER_INITIALIZE;
struct _NDIS_TAPI_SEND_USER_USER_INFO;
struct _NDIS_TAPI_SET_STATUS_MESSAGES;
struct _SecPkgCred_SupportedProtocols;
struct _WTD_GENERIC_CHAIN_POLICY_DATA;
struct creative_fastspeech8format_tag;
struct mediaspace_adpcmwaveformat_tag;
struct tagSOLE_AUTHENTICATION_SERVICE;
struct DispDOMChildrenCollectionVtbl;
struct DispHTMLDOMImplementationVtbl;
struct DispHTMLElementCollectionVtbl;
struct DispIHTMLInputFileElementVtbl;
struct DispIHTMLInputTextElementVtbl;
struct HTMLControlElementEvents2Vtbl;
struct HTMLMarqueeElementEvents2Vtbl;
struct HTMLOptionButtonElementEvents;
struct HTMLStyleSheetPagesCollection;
struct HTMLStyleSheetRulesCollection;
struct IAnimationComposerFactoryVtbl;
struct IAnimationComposerSiteFactory;
struct IBindStatusCallbackHolderVtbl;
struct IConnectionPointContainerVtbl;
struct IDebugPropertyEnumType_Locals;
struct IDirectSoundCaptureBufferVtbl;
struct IElementNamespaceFactory2Vtbl;
struct IEmptyVolumeCacheCallBackVtbl;
struct IHTMLAttributeCollection2Vtbl;
struct IHTMLOptionElementFactoryVtbl;
struct INetCfgComponentNotifyBinding;
struct INetCfgComponentUpperEdgeVtbl;
struct IOleInPlaceSiteWindowlessVtbl;
struct IRTCDispatchEventNotification;
struct IRTCEnumUserSearchResultsVtbl;
struct IRTCPresencePropertyEventVtbl;
struct IRTCSessionDescriptionManager;
struct IRTCSessionPortManagementVtbl;
struct ISubscriptionAgentControlVtbl;
struct ISyncMgrSynchronizeInvokeVtbl;
struct ITransactionOutcomeEventsVtbl;
struct ITransportCallbackServiceVtbl;
struct IUPnPDeviceFinderCallbackVtbl;
struct _CERT_BASIC_CONSTRAINTS2_INFO;
struct _CERT_POLICY_CONSTRAINTS_INFO;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO;
struct _DOT11_CURRENT_OPERATION_MODE;
struct _DOT11_DIVERSITY_SELECTION_RX;
struct _DOT11_NIC_SPECIFIC_EXTENSION;
struct _DOT11_NIC_SPECIFIC_EXTN_LIST;
struct _DOT11_SUPPORTED_ANTENNA_LIST;
struct _DOT11_SUPPORTED_POWER_LEVELS;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _IP_ADAPTER_MULTICAST_ADDRESS;
struct _MEMORY_BASIC_INFORMATION_VLM;
struct _NDIS_802_11_CONFIGURATION_FH;
struct _NDIS_PM_WAKE_UP_CAPABILITIES;
struct _NDIS_TAPI_GET_ADDRESS_STATUS;
struct _NDIS_TAPI_SELECT_EXT_VERSION;
struct _OFFLOAD_SECURITY_ASSOCIATION;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SecPkgContext_ConnectionInfo;
struct _SecPkgContext_IssuerListInfo;
struct _SecPkgContext_MappedCredAttr;
struct _SecPkgContext_PasswordExpiry;
struct _ServicesExeCallbackFunctions;
struct _USB_CONFIGURATION_DESCRIPTOR;
struct _structDVD_TEXT_LANGUAGE_UNIT;
struct creative_fastspeechformat_tag;
struct linemediacontrolcallstate_tag;
struct tMIXERCONTROLDETAILS_LISTTEXT;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct AnimationComposerSiteFactory;
struct DispIHTMLOptionButtonElement;
struct HTMLButtonElementEvents2Vtbl;
struct HTMLControlElementEventsVtbl;
struct HTMLMarqueeElementEventsVtbl;
struct HTMLObjectElementEvents2Vtbl;
struct HTMLSelectElementEvents2Vtbl;
struct HTMLTextContainerEvents2Vtbl;
struct IActiveScriptAuthorProcedure;
struct IActiveScriptParseProcedure2;
struct ICurrentWorkingDirectoryVtbl;
struct IDMOVideoOutputOptimizations;
struct IElementBehaviorCategoryVtbl;
struct IElementBehaviorSiteCategory;
struct IElementNamespaceFactoryVtbl;
struct IElementNamespacePrivateVtbl;
struct IHTMLAttributeCollectionVtbl;
struct IHTMLFontNamesCollectionVtbl;
struct IHTMLFontSizesCollectionVtbl;
struct IHTMLImageElementFactoryVtbl;
struct IHTMLMimeTypesCollectionVtbl;
struct IHTMLNamespaceCollectionVtbl;
struct IHTMLOptionButtonElementVtbl;
struct IInternetHostSecurityManager;
struct IInternetSecurityManagerVtbl;
struct IInternetSecurityMgrSiteVtbl;
struct IMediaParamsRecordNotifyVtbl;
struct INetCfgComponentBindingsVtbl;
struct INetCfgComponentNotifyGlobal;
struct INetConnectionPropertyUiVtbl;
struct INotificationProcessMgr0Vtbl;
struct IPersistMediaPropertyBagVtbl;
struct IPrivateIdentityManager2Vtbl;
struct IRTCClientPortManagementVtbl;
struct IRTCSessionReferredEventVtbl;
struct IRTCSessionStateChangeEvent2;
struct IRegisterVirusScanEngineVtbl;
struct IShellFavoritesNameSpaceVtbl;
struct ISubscriptionAgentEventsVtbl;
struct ITIMEActiveElementCollection;
struct IUPnPDescriptionDocumentVtbl;
struct IXMLDOMProcessingInstruction;
struct _CERT_AUTHORITY_KEY_ID2_INFO;
struct _CERT_BASIC_CONSTRAINTS_INFO;
struct _CERT_LDAP_STORE_OPENED_PARA;
struct _CMSG_KEY_AGREE_ENCRYPT_INFO;
struct _CMSG_KEY_TRANS_ENCRYPT_INFO;
struct _CMSG_MAIL_LIST_ENCRYPT_INFO;
struct _CROSS_CERT_DIST_POINTS_INFO;
struct _CRYPT_KEY_SIGN_MESSAGE_PARA;
struct _CRYPT_PASSWORD_CREDENTIALSA;
struct _CRYPT_PASSWORD_CREDENTIALSW;
struct _DOT11_HOPPING_PATTERN_ENTRY;
struct _DOT11_WEP_KEY_MAPPING_ENTRY;
struct _HTTP_FILTER_PREPROC_HEADERS;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _INTERNET_CACHE_CONFIG_INFOA;
struct _INTERNET_CACHE_CONFIG_INFOW;
struct _ISA_PNP_LOGICAL_DEVICE_INFO;
struct _NDIS_TAPI_PROVIDER_SHUTDOWN;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _SEC_WINNT_AUTH_IDENTITY_EXA;
struct _SEC_WINNT_AUTH_IDENTITY_EXW;
struct __MIDL_IDVDProgramChain_0001;
struct __MIDL_IDVDProgramChain_0003;
struct _structDVD_AUDIO_STREAM_ATTR;
struct audiofile_af10waveformat_tag;
struct audiofile_af36waveformat_tag;
struct creative_adpcmwaveformat_tag;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct tagExtendedDebugPropertyInfo;
struct DispHTCPropertyBehaviorVtbl;
struct DispHTMLAreasCollectionVtbl;
struct DispHTMLAttributeCollection;
struct DispHTMLBaseFontElementVtbl;
struct DispHTMLFieldSetElementVtbl;
struct DispHTMLRichtextElementVtbl;
struct DispHTMLTextAreaElementVtbl;
struct DispIHTMLInputButtonElement;
struct HTMLButtonElementEventsVtbl;
struct HTMLInputFileElementEvents2;
struct HTMLInputTextElementEvents2;
struct HTMLObjectElementEventsVtbl;
struct HTMLSelectElementEventsVtbl;
struct HTMLStyleElementEvents2Vtbl;
struct HTMLTextContainerEventsVtbl;
struct IActiveScriptHostEncodeVtbl;
struct IActiveScriptParseProcedure;
struct IActiveScriptSiteWindowVtbl;
struct IDDrawExclModeVideoCallback;
struct IDVDParentalManagementTable;
struct IDirect3DVolumeTexture8Vtbl;
struct IDirectDrawColorControlVtbl;
struct IDirectDrawGammaControlVtbl;
struct IDirectDrawStreamSampleVtbl;
struct IElementBehaviorFactoryVtbl;
struct IElementBehaviorLayout2Vtbl;
struct IElementBehaviorSiteLayout2;
struct IElementBehaviorSiteOM2Vtbl;
struct IEnumDVD_TEXT_LANGUAGE_UNIT;
struct IEnumNetCfgBindingInterface;
struct IHTMLBookmarkCollectionVtbl;
struct IHTMLElementCollection2Vtbl;
struct IHTMLElementCollection3Vtbl;
struct IHTMLInputButtonElementVtbl;
struct IHTMLInputHiddenElementVtbl;
struct IHTMLTxtRangeCollectionVtbl;
struct IHighlightRenderingServices;
struct IImnAdviseMigrateServerVtbl;
struct IMultiplePropertyAccessVtbl;
struct INetCfgBindingInterfaceVtbl;
struct INetCfgComponentControlVtbl;
struct INetConnectionConnectUiVtbl;
struct INetLanConnectionUiInfoVtbl;
struct IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceObjectWindowless;
struct IPrivateIdentityManagerVtbl;
struct IRTCClientProvisioning2Vtbl;
struct IRTCEnumPresenceDevicesVtbl;
struct IRTCPresenceStatusEventVtbl;
struct IRTCSessionReferStatusEvent;
struct IRTCSessionStateChangeEvent;
struct IShellIconOverlayIdentifier;
struct ISyncMgrSynchronizeCallback;
struct ITIMEDMusicPlayerObjectVtbl;
struct ITIMEMediaPlayerControlVtbl;
struct IUPnPServiceCallbackPrivate;
struct IXMLDOMDocumentFragmentVtbl;
struct IXMLDOMSchemaCollectionVtbl;
struct OLEDBSimpleProviderListener;
struct _BY_HANDLE_FILE_INFORMATION;
struct _CERT_AUTHORITY_INFO_ACCESS;
struct _CERT_AUTHORITY_KEY_ID_INFO;
struct _CERT_NAME_CONSTRAINTS_INFO;
struct _CERT_POLICY_QUALIFIER_INFO;
struct _CMSG_ENCRYPTED_ENCODE_INFO;
struct _CMSG_ENVELOPED_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCODE_INFO;
struct _CRYPT_ALGORITHM_IDENTIFIER;
struct _CRYPT_ATTRIBUTE_TYPE_VALUE;
struct _CRYPT_DECRYPT_MESSAGE_PARA;
struct _CRYPT_ENCRYPT_MESSAGE_PARA;
struct _CRYPT_PROVIDER_REGDEFUSAGE;
struct _DOT11_DISASSOCIATE_REQUEST;
struct _IDirectContainerEventsVtbl;
struct _INTERNET_CACHE_ENTRY_INFOA;
struct _INTERNET_CACHE_ENTRY_INFOW;
struct _INTERNET_CACHE_GROUP_INFOA;
struct _INTERNET_CACHE_GROUP_INFOW;
struct _IP_ADAPTER_ANYCAST_ADDRESS;
struct _IP_ADAPTER_UNICAST_ADDRESS;
struct _MIB_IPMCAST_BOUNDARY_TABLE;
struct _NDIS_LINE_TRANSLATE_OUTPUT;
struct _NDIS_TAPI_GET_ADDRESS_CAPS;
struct _NDIS_TAPI_GET_EXTENSION_ID;
struct _NDIS_TAPI_SET_APP_SPECIFIC;
struct _POWER_BROADCAST_POWER_INFO;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _SHChangeProductKeyAsIDList;
struct _SSL_CREDENTIAL_CERTIFICATE;
struct _SecPkgContext_NativeNamesA;
struct _SecPkgContext_NativeNamesW;
struct _SecPkgContext_PackageInfoA;
struct _SecPkgContext_PackageInfoW;
struct _SecPkgCred_CipherStrengths;
struct contres_vqlpcwaveformat_tag;
struct nms_vbxadpcmmwaveformat_tag;
struct phoneinitializeexparams_tag;
struct tMIXERCONTROLDETAILS_SIGNED;
struct tagDVD_SubpictureAttributes;
struct DShellFolderViewEventsVtbl;
struct DispHTCDefaultDispatchVtbl;
struct DispHTMLCommentElementVtbl;
struct DispHTMLGenericElementVtbl;
struct DispHTMLIsIndexElementVtbl;
struct DispHTMLMarqueeElementVtbl;
struct DispHTMLUnknownElementVtbl;
struct HTMLFormElementEvents2Vtbl;
struct HTMLInputFileElementEvents;
struct HTMLInputTextElementEvents;
struct HTMLLinkElementEvents2Vtbl;
struct HTMLStyleElementEventsVtbl;
struct IAMCopyCaptureFileProgress;
struct IActiveIMMMessagePumpOwner;
struct IActiveXSafetyProviderVtbl;
struct IAnimationComposerSiteSink;
struct IAnimationComposerSiteVtbl;
struct IBindStatusCallbackMsgVtbl;
struct IBluetoothAuthenticateVtbl;
struct ICommandWithParametersVtbl;
struct IDXTFilterBehaviorSiteVtbl;
struct IDXTRedirectFilterInitVtbl;
struct IDebugExtendedPropertyVtbl;
struct IDebugPropertyEnumType_All;
struct IDirect3DVertexBuffer8Vtbl;
struct IDirectDrawMediaSampleVtbl;
struct IDirectDrawMediaStreamVtbl;
struct IElementBehaviorLayoutVtbl;
struct IElementBehaviorRenderVtbl;
struct IElementBehaviorSiteLayout;
struct IElementBehaviorSiteOMVtbl;
struct IElementBehaviorSiteRender;
struct IElementBehaviorSubmitVtbl;
struct IElementNamespaceTableVtbl;
struct IEncodingFilterFactoryVtbl;
struct IEnumDebugPropertyInfoVtbl;
struct IEnumNetCfgBindingPathVtbl;
struct IHTMLDOMChildrenCollection;
struct IHTMLDOMImplementationVtbl;
struct IHTMLElementCollectionVtbl;
struct IHTMLFiltersCollectionVtbl;
struct IHTMLFramesCollection2Vtbl;
struct IHTMLPluginsCollectionVtbl;
struct IHTMLStyleSheetsCollection;
struct IHTMLTextRangeMetrics2Vtbl;
struct IInstallEngineCallbackVtbl;
struct IMLangLineBreakConsoleVtbl;
struct IMimeEditTagCollectionVtbl;
struct INetCfgComponentPropertyUi;
struct INetCfgPnpReconfigCallback;
struct INetConnectionCommonUiVtbl;
struct IObexServiceConnectionVtbl;
struct IOleControlNavigation2Vtbl;
struct IPropFindMultiResponseVtbl;
struct IRTCClientProvisioningVtbl;
struct IRTCSessionCallControlVtbl;
struct IRTCUserSearchResultsEvent;
struct ISelectionServicesListener;
struct IShellNotificationCallback;
struct ISoapTypeMapperFactoryVtbl;
struct ISubscriptionAgentShellExt;
struct ISubscriptionThrottlerVtbl;
struct ITIMEElementCollectionVtbl;
struct IVoIPCurrentCallEnumerator;
struct IXMLDOMEntityReferenceVtbl;
struct NDIS_BPC_CONNECTION_ENABLE;
struct NDIS_BPC_CONNECTION_STATUS;
struct NDIS_BPC_STATUS_CONNECTION;
struct UserNotificationInfoHeader;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _CERT_ISSUER_SERIAL_NUMBER;
struct _CERT_POLICY_MAPPINGS_INFO;
struct _CERT_PRIVATE_KEY_VALIDITY;
struct _CERT_STORE_PROV_FIND_INFO;
struct _CMSG_CONTENT_ENCRYPT_INFO;
struct _CREATE_PROCESS_DEBUG_INFO;
struct _CRYPTPROTECT_PROMPTSTRUCT;
struct _CRYPT_PKCS8_EXPORT_PARAMS;
struct _CRYPT_PKCS8_IMPORT_PARAMS;
struct _CRYPT_VERIFY_MESSAGE_PARA;
struct _DEV_BROADCAST_USERDEFINED;
struct _DOT11_DEFAULT_WEP_OFFLOAD;
struct _DOT11_OPTIONAL_CAPABILITY;
struct _DOT11_STA_POWER_MGMT_MODE;
struct _DOT11_SUPPORTED_PHY_TYPES;
struct _FULL_PTR_TO_REFID_ELEMENT;
struct _HTTP_FILTER_ACCESS_DENIED;
struct _IMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _INTERNET_CACHE_TIMESTAMPS;
struct _NDIS_802_11_BSSID_LIST_EX;
struct _NDIS_802_11_CONFIGURATION;
struct _NDIS_TAPI_GET_CALL_STATUS;
struct _NDIS_TAPI_SET_CALL_PARAMS;
struct _REPARSE_POINT_INFORMATION;
struct _RNDIS_PDD_CHARACTERISTICS;
struct _SCH_CRED_PUBLIC_CERTCHAIN;
struct _SECURITY_FUNCTION_TABLE_A;
struct _SECURITY_FUNCTION_TABLE_W;
struct _SEC_WINNT_AUTH_IDENTITY_A;
struct _SEC_WINNT_AUTH_IDENTITY_W;
struct _SPC_INDIRECT_DATA_CONTENT;
struct _SearchAssistantEventsVtbl;
struct _SecPkgContext_EapKeyBlock;
struct _SecPkgContext_GroupNamesW;
struct _SecPkgContext_StreamSizes;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct _tagSYNC_HANDLER_ITEM_INFO;
struct contres_cr10waveformat_tag;
struct fmtowns_snd_waveformat_tag;
struct linecalltreatmententry_tag;
struct lineinitializeexparams_tag;
struct sierra_adpcmwaveformat_tag;
struct tagCOMMANDBANDSRESTOREINFO;
struct tagDVD_TitleMainAttributes;
struct yamaha_adpmcwaveformat_tag;
struct AM_DVDCOPY_SET_COPY_STATE;
struct DShellNameSpaceEventsVtbl;
struct DispDOMChildrenCollection;
struct DispHTCAttachBehaviorVtbl;
struct DispHTCMethodBehaviorVtbl;
struct DispHTMLAnchorElementVtbl;
struct DispHTMLButtonElementVtbl;
struct DispHTMLDOMImplementation;
struct DispHTMLElementCollection;
struct DispHTMLHeaderElementVtbl;
struct DispHTMLLegendElementVtbl;
struct DispHTMLNextIdElementVtbl;
struct DispHTMLNoShowElementVtbl;
struct DispHTMLObjectElementVtbl;
struct DispHTMLOptionElementVtbl;
struct DispHTMLPhraseElementVtbl;
struct DispHTMLScriptElementVtbl;
struct DispHTMLSelectElementVtbl;
struct DispIHTMLInputFileElement;
struct DispIHTMLInputTextElement;
struct FreeThreadedDOMDocument26;
struct FreeThreadedDOMDocument30;
struct HTMLControlElementEvents2;
struct HTMLFormElementEventsVtbl;
struct HTMLInputImageEvents2Vtbl;
struct HTMLLinkElementEventsVtbl;
struct HTMLMarqueeElementEvents2;
struct HTMLStyleSheetsCollection;
struct IAMAnalogVideoDecoderVtbl;
struct IAMDevMemoryAllocatorVtbl;
struct IAMSecureMediaContentVtbl;
struct IActiveScriptPropertyVtbl;
struct IAnimationComposerFactory;
struct IBindStatusCallbackHolder;
struct ICaptureGraphBuilder2Vtbl;
struct IConnectionPointContainer;
struct ICreateJavaPackageMgrVtbl;
struct IDDVideoPortContainerVtbl;
struct IDVDNavDataStatusSinkVtbl;
struct IDVDNavigationManagerVtbl;
struct IDVDStreamControlInfoVtbl;
struct IDirect3DBaseTexture8Vtbl;
struct IDirect3DCubeTexture8Vtbl;
struct IDirect3DIndexBuffer8Vtbl;
struct IDirectSoundCaptureBuffer;
struct IElementBehaviorFocusVtbl;
struct IElementNamespaceFactory2;
struct IEmptyVolumeCacheCallBack;
struct IEnumCodeStoreDBEntryVtbl;
struct IEnumConnectionPointsVtbl;
struct IEnumOleDocumentViewsVtbl;
struct IFileSystemDescriptorVtbl;
struct IGlobalInterfaceTableVtbl;
struct IHTMLAreasCollection2Vtbl;
struct IHTMLAreasCollection3Vtbl;
struct IHTMLAttributeCollection2;
struct IHTMLFieldSetElement2Vtbl;
struct IHTMLFrameSetElement2Vtbl;
struct IHTMLIPrintCollectionVtbl;
struct IHTMLInputFileElementVtbl;
struct IHTMLInputTextElementVtbl;
struct IHTMLOMWindowServicesVtbl;
struct IHTMLOptionElementFactory;
struct IHTMLPainterEventInfoVtbl;
struct IHTMLSelectionObject2Vtbl;
struct IHTMLTextRangeMetricsVtbl;
struct IIdentityChangeNotifyVtbl;
struct IImageDecodeEventSinkVtbl;
struct IInternetProtocolInfoVtbl;
struct IInternetProtocolRootVtbl;
struct IInternetProtocolSinkVtbl;
struct IInternetThreadSwitchVtbl;
struct IMimeEnumAddressTypesVtbl;
struct IMimeEnumMessagePartsVtbl;
struct INetCfgComponentSetupVtbl;
struct INetCfgComponentUpperEdge;
struct INetConnectionManagerVtbl;
struct IOleControlNavigationVtbl;
struct IOleInPlaceSiteWindowless;
struct IOverlappedCompletionVtbl;
struct IParserTreePropertiesVtbl;
struct IPerPropertyBrowsing2Vtbl;
struct IPropertySetContainerVtbl;
struct IRTCEnumUserSearchResults;
struct IRTCEventNotificationVtbl;
struct IRTCMediaRequestEventVtbl;
struct IRTCPresenceDataEventVtbl;
struct IRTCPresencePropertyEvent;
struct IRTCSessionPortManagement;
struct IRowsetWithParametersVtbl;
struct IServerXMLHTTPRequestVtbl;
struct ISoapConnectorFactoryVtbl;
struct ISpecifyPropertyPagesVtbl;
struct ISubscriptionAgentControl;
struct ISyncMgrSynchronizeInvoke;
struct ISynchronizedCallBackVtbl;
struct ITIMEAnimationElementVtbl;
struct ITransactionDispenserVtbl;
struct ITransactionOutcomeEvents;
struct ITransportCallbackService;
struct IUPnPDeviceFinderCallback;
struct IVoIPCallerInfoDBEnumVtbl;
struct IVoIPCallerInfoRecordVtbl;
struct IXMLDOMImplementationVtbl;
struct IXMLElementCollectionVtbl;
struct KBDI_VKEY_TO_UNICODE_INFO;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _ACL_REVISION_INFORMATION;
struct _ACTRL_ACCESS_ENTRY_LISTA;
struct _ACTRL_ACCESS_ENTRY_LISTW;
struct _AUDIO_STREAM_CONFIG_CAPS;
struct _BY_HANDLE_DB_INFORMATION;
struct _CERT_CHAIN_ENGINE_CONFIG;
struct _CERT_CHAIN_POLICY_STATUS;
struct _CERT_CREATE_CONTEXT_PARA;
struct _CERT_KEYGEN_REQUEST_INFO;
struct _CERT_KEY_ATTRIBUTES_INFO;
struct _CERT_PHYSICAL_STORE_INFO;
struct _CERT_POLICY95_QUALIFIER1;
struct _CERT_REVOCATION_CRL_INFO;
struct _CERT_SIGNED_CONTENT_INFO;
struct _CO_TAPI_CALL_DIAGNOSTICS;
struct _CREATE_THREAD_DEBUG_INFO;
struct _CRL_FIND_ISSUED_FOR_PARA;
struct _CRYPT_PROVIDER_FUNCTIONS;
struct _CRYPT_RC2_CBC_PARAMETERS;
struct _CRYPT_SMIME_CAPABILITIES;
struct _DOT11_DEFAULT_WEP_UPLOAD;
struct _DOT11_DIV_SELECT_RX_LIST;
struct _DOT11_OFFLOAD_CAPABILITY;
struct _IDirectControlEventsVtbl;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _MEMORY_BASIC_INFORMATION;
struct _MIB_IPMCAST_MFE_STATS_EX;
struct _MIDL_STUBLESS_PROXY_INFO;
struct _NDISTAPI_CHARACTERISTICS;
struct _NDIS_802_11_VARIABLE_IEs;
struct _NDIS_TAPI_GET_ADDRESS_ID;
struct _NDIS_TAPI_GET_DEV_CONFIG;
struct _NDIS_TAPI_LINE_TRANSLATE;
struct _NDIS_TAPI_MONITOR_DIGITS;
struct _NDIS_TAPI_SET_DEV_CONFIG;
struct _NDIS_TAPI_SET_MEDIA_MODE;
struct _OUTPUT_DEBUG_STRING_INFO;
struct _REPARSE_GUID_DATA_BUFFER;
struct _SComparePropsRestriction;
struct _SECURITY_PACKAGE_OPTIONS;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SecPkgContext_AuthorityA;
struct _SecPkgContext_AuthorityW;
struct _SecPkgContext_ProtoInfoA;
struct _SecPkgContext_ProtoInfoW;
struct _SecPkgContext_SessionKey;
struct _SecPkgCred_SupportedAlgs;
struct _SecPkgCredentials_NamesA;
struct _SecPkgCredentials_NamesW;
struct _USB_INTERFACE_DESCRIPTOR;
struct _VIDEO_STREAM_CONFIG_CAPS;
struct _WINDOWS_IRDA_DEVICE_INFO;
struct _structDVD_TITLE_SET_INFO;
struct linemediacontroldigit_tag;
struct linemediacontrolmedia_tag;
struct tagDVD_PLAYBACK_LOCATION2;
struct tagIMAP_LISTLSUB_RESPONSE;
struct tagNATLANGUAGERESTRICTION;
struct tagNMDATETIMEFORMATQUERYA;
struct tagNMDATETIMEFORMATQUERYW;
struct AnimationComposerFactory;
struct DSearchCommandEventsVtbl;
struct DirectoryClientRegParams;
struct DispHTCEventBehaviorVtbl;
struct DispHTMLBlockElementVtbl;
struct DispHTMLCurrentStyleVtbl;
struct DispHTMLDListElementVtbl;
struct DispHTMLDOMAttributeVtbl;
struct DispHTMLFrameElementVtbl;
struct DispHTMLFrameSetSiteVtbl;
struct DispHTMLInputElementVtbl;
struct DispHTMLLabelElementVtbl;
struct DispHTMLOListElementVtbl;
struct DispHTMLParamElementVtbl;
struct DispHTMLStyleElementVtbl;
struct DispHTMLTableCaptionVtbl;
struct DispHTMLTableSectionVtbl;
struct DispHTMLTitleElementVtbl;
struct DispHTMLUListElementVtbl;
struct HTMLButtonElementEvents2;
struct HTMLControlElementEvents;
struct HTMLFrameSiteEvents2Vtbl;
struct HTMLInputImageEventsVtbl;
struct HTMLMarqueeElementEvents;
struct HTMLObjectElementEvents2;
struct HTMLOptionElementFactory;
struct HTMLSelectElementEvents2;
struct HTMLTextContainerEvents2;
struct IAMBufferNegotiationVtbl;
struct IAMExtendedErrorInfoVtbl;
struct IAMTimecodeGeneratorVtbl;
struct IAMTunerNotificationVtbl;
struct ICaptureGraphBuilderVtbl;
struct IColumnMapperCreatorVtbl;
struct ICurrentWorkingDirectory;
struct IDAVNamespaceArbiterVtbl;
struct IDVDStreamAttributesVtbl;
struct IDXTFilterCollectionVtbl;
struct IDXTFilterControllerVtbl;
struct IDirectDrawVideoPortVtbl;
struct IElementBehaviorCategory;
struct IElementBehaviorSiteVtbl;
struct IElementNamespaceFactory;
struct IElementNamespacePrivate;
struct IEnumNetCfgComponentVtbl;
struct IEnumPStoreProvidersVtbl;
struct IHTCPropertyBehaviorVtbl;
struct IHTMLAreasCollectionVtbl;
struct IHTMLAttributeCollection;
struct IHTMLBaseFontElementVtbl;
struct IHTMLCommentElement2Vtbl;
struct IHTMLEditingServicesVtbl;
struct IHTMLElementDefaultsVtbl;
struct IHTMLFieldSetElementVtbl;
struct IHTMLFilterPaintSiteVtbl;
struct IHTMLFontNamesCollection;
struct IHTMLFontSizesCollection;
struct IHTMLFrameSetElementVtbl;
struct IHTMLImageElementFactory;
struct IHTMLIsIndexElement2Vtbl;
struct IHTMLMimeTypesCollection;
struct IHTMLNamespaceCollection;
struct IHTMLOptionButtonElement;
struct IHTMLSelectionObjectVtbl;
struct IHTMLTableRowMetricsVtbl;
struct IHTMLTextAreaElementVtbl;
struct IInstallEngineTimingVtbl;
struct IInternetSecurityManager;
struct IInternetSecurityMgrSite;
struct IInternetZoneManagerVtbl;
struct IMLangConvertCharsetVtbl;
struct IMediaParamsRecordNotify;
struct IMediaPlayerListenerVtbl;
struct IMimeMessageCallbackVtbl;
struct INetCfgComponentBindings;
struct INetConnectionPropertyUi;
struct INotificationProcessMgr0;
struct INotificationRunningVtbl;
struct IObjectAccessControlVtbl;
struct IPerPropertyBrowsingVtbl;
struct IPersistMediaPropertyBag;
struct IPersistPropertyBag2Vtbl;
struct IPrivateIdentityManager2;
struct IRTCClientPortManagement;
struct IRTCEnumParticipantsVtbl;
struct IRTCSessionReferredEvent;
struct IRTCUserSearchResultVtbl;
struct IRegisterVirusScanEngine;
struct IRowsetChapterMemberVtbl;
struct ISegmentListIteratorVtbl;
struct IShellFavoritesNameSpace;
struct IShellFolderViewDualVtbl;
struct ISubDivisionProviderVtbl;
struct ISubscriptionAgentEvents;
struct ISubscriptionMgrPrivVtbl;
struct ITIMEDVDPlayerObjectVtbl;
struct ITIMEMediaPlayerSiteVtbl;
struct IUPnPDescriptionDocument;
struct IUPnPServiceCallbackVtbl;
struct IUnicodeScriptMapperVtbl;
struct IUserIdentityManagerVtbl;
struct IVBSAXContentHandlerVtbl;
struct IVBSAXEntityResolverVtbl;
struct IVBSAXLexicalHandlerVtbl;
struct IVoIPDirectoryClientVtbl;
struct IXMLDOMCharacterDataVtbl;
struct NDIS_BPC_ADDRESS_COMPARE;
struct NDIS_BPC_DEVICE_SETTINGS;
struct XMLDOMDocumentEventsVtbl;
struct _CERT_ACCESS_DESCRIPTION;
struct _CERT_FORTEZZA_DATA_PROP;
struct _CERT_X942_DH_PARAMETERS;
struct _CMC_ADD_ATTRIBUTES_INFO;
struct _CMC_ADD_EXTENSIONS_INFO;
struct _CMC_TAGGED_CERT_REQUEST;
struct _CMC_TAGGED_CONTENT_INFO;
struct _CMSG_CMS_RECIPIENT_INFO;
struct _CMSG_HASHED_ENCODE_INFO;
struct _CMSG_SIGNED_ENCODE_INFO;
struct _CMSG_SIGNER_ENCODE_INFO;
struct _CRYPT_HASH_MESSAGE_PARA;
struct _CRYPT_PROVIDER_DEFUSAGE;
struct _CRYPT_PROVIDER_PRIVDATA;
struct _CRYPT_REGISTER_ACTIONID;
struct _CRYPT_RETRIEVE_AUX_INFO;
struct _CRYPT_SIGN_MESSAGE_PARA;
struct _CTL_VERIFY_USAGE_STATUS;
struct _DOT11_DISCONNECTED_PEER;
struct _DOT11_KEY_ALGO_TKIP_MIC;
struct _DOT11_SUPPORTED_ANTENNA;
struct _EXIT_PROCESS_DEBUG_INFO;
struct _EXTENSION_CONTROL_BLOCK;
struct _FILE_NOTIFY_INFORMATION;
struct _HSE_SEND_HEADER_EX_INFO;
struct _HTTPSPolicyCallbackData;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_OPTIONAL_HEADER64;
struct _ImageArchitectureHeader;
struct _LOCALMANAGEDAPPLICATION;
struct _NDIS_TAPI_CONFIG_DIALOG;
struct _NDIS_TAPI_GATHER_DIGITS;
struct _NDIS_TAPI_GET_CALL_INFO;
struct _OFFLOAD_IPSEC_DELETE_SA;
struct _SCH_CRED_SECRET_PRIVKEY;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct _SYSTEM_POWER_STATUS_EX2;
struct _SecPkgContext_UserFlags;
struct _TRANSPORT_HEADER_OFFSET;
struct _USB_ENDPOINT_DESCRIPTOR;
struct _structDVD_AUDIO_MU_ATTR;
struct csimaadpcmwaveformat_tag;
struct digiadpcmmwaveformat_tag;
struct g721_adpcmwaveformat_tag;
struct g723_adpcmwaveformat_tag;
struct linemediacontroltone_tag;
struct mpeglayer3waveformat_tag;
struct tagAM_SAMPLE2_PROPERTIES;
struct tagCInterfaceProxyHeader;
struct tagDVD_KaraokeAttributes;
struct tagDVD_PLAYBACK_LOCATION;
struct tagHTTPMAILBCOPYMOVELIST;
struct tagMQPROPERTYRESTRICTION;
struct truespeechwaveformat_tag;
struct DShellWindowsEventsVtbl;
struct DispHTCDescBehaviorVtbl;
struct DispHTCPropertyBehavior;
struct DispHTMLAppBehaviorVtbl;
struct DispHTMLAreaElementVtbl;
struct DispHTMLAreasCollection;
struct DispHTMLBaseElementVtbl;
struct DispHTMLBaseFontElement;
struct DispHTMLDOMTextNodeVtbl;
struct DispHTMLDivPositionVtbl;
struct DispHTMLFieldSetElement;
struct DispHTMLFontElementVtbl;
struct DispHTMLFormElementVtbl;
struct DispHTMLHeadElementVtbl;
struct DispHTMLHtmlElementVtbl;
struct DispHTMLLinkElementVtbl;
struct DispHTMLListElementVtbl;
struct DispHTMLMetaElementVtbl;
struct DispHTMLParaElementVtbl;
struct DispHTMLRenderStyleVtbl;
struct DispHTMLRichtextElement;
struct DispHTMLSpanElementVtbl;
struct DispHTMLTextAreaElement;
struct DispHTMLTextElementVtbl;
struct DispHTMLWindowProxyVtbl;
struct DispIHTMLInputImageVtbl;
struct FreeThreadedDOMDocument;
struct HTMLAttributeCollection;
struct HTMLButtonElementEvents;
struct HTMLDocumentEvents2Vtbl;
struct HTMLFrameSiteEventsVtbl;
struct HTMLImageElementFactory;
struct HTMLNamespaceCollection;
struct HTMLNamespaceEventsVtbl;
struct HTMLObjectElementEvents;
struct HTMLOptionButtonElement;
struct HTMLSelectElementEvents;
struct HTMLStyleElementEvents2;
struct HTMLTextContainerEvents;
struct IAMDevMemoryControlVtbl;
struct IAMMultiMediaStreamVtbl;
struct IAMVideoCompressionVtbl;
struct IActiveIMMRegistrarVtbl;
struct IActiveScriptAuthorVtbl;
struct IActiveScriptEncodeVtbl;
struct IActiveScriptHostEncode;
struct IActiveScriptSiteWindow;
struct IBindStatusCallbackVtbl;
struct IConfigInterleavingVtbl;
struct IDBBinderPropertiesVtbl;
struct IDDrawExclModeVideoVtbl;
struct IDXARGBReadWritePtrVtbl;
struct IDXTransformFactoryVtbl;
struct IDirect3DSwapChain8Vtbl;
struct IDirect3DVolumeTexture8;
struct IDirectDrawColorControl;
struct IDirectDrawGammaControl;
struct IDirectDrawStreamSample;
struct IDirectDrawSurface2Vtbl;
struct IDirectDrawSurface3Vtbl;
struct IDirectDrawSurface4Vtbl;
struct IDirectDrawSurface5Vtbl;
struct IDirectSoundCaptureVtbl;
struct IDockingWindowFrameVtbl;
struct IElementBehaviorFactory;
struct IElementBehaviorLayout2;
struct IElementBehaviorSiteOM2;
struct IEnumDVD_CELL_PIECEVtbl;
struct IEnumItemPropertiesVtbl;
struct IEnumPrivacyRecordsVtbl;
struct IEnumSTATPROPSETSTGVtbl;
struct IEnumTravelLogEntryVtbl;
struct IEnumWSDLOperationsVtbl;
struct IExternalConnectionVtbl;
struct IFileSystemBindDataVtbl;
struct IHTCAttachBehavior2Vtbl;
struct IHTCDefaultDispatchVtbl;
struct IHTMLAnchorElement2Vtbl;
struct IHTMLBookmarkCollection;
struct IHTMLChangePlaybackVtbl;
struct IHTMLCommentElementVtbl;
struct IHTMLControlElementVtbl;
struct IHTMLElementCollection2;
struct IHTMLElementCollection3;
struct IHTMLGenericElementVtbl;
struct IHTMLIFrameElement2Vtbl;
struct IHTMLInputButtonElement;
struct IHTMLInputHiddenElement;
struct IHTMLIsIndexElementVtbl;
struct IHTMLLegendElement2Vtbl;
struct IHTMLMarqueeElementVtbl;
struct IHTMLObjectElement2Vtbl;
struct IHTMLObjectElement3Vtbl;
struct IHTMLOptionElement2Vtbl;
struct IHTMLOptionElement3Vtbl;
struct IHTMLPainterOverlayVtbl;
struct IHTMLPhraseElement2Vtbl;
struct IHTMLPrivateWindow2Vtbl;
struct IHTMLPrivateWindow3Vtbl;
struct IHTMLRectCollectionVtbl;
struct IHTMLScriptElement2Vtbl;
struct IHTMLSelectElement2Vtbl;
struct IHTMLSelectElement3Vtbl;
struct IHTMLSelectElement4Vtbl;
struct IHTMLStyleSheetPageVtbl;
struct IHTMLStyleSheetRuleVtbl;
struct IHTMLTxtRangeCollection;
struct IHTMLUnknownElementVtbl;
struct IHTMLViewFilterSiteVtbl;
struct IHlinkBrowseContextVtbl;
struct IImnAccountManager2Vtbl;
struct IImnAdviseMigrateServer;
struct IInternetBindClientVtbl;
struct IJavaPackageManagerVtbl;
struct IMediaObjectInPlaceVtbl;
struct IMessengerIMWindowsVtbl;
struct IMimeEnumHeaderRowsVtbl;
struct IMimeEnumPropertiesVtbl;
struct IMimePropertySchemaVtbl;
struct IMultiplePropertyAccess;
struct INetCfgBindingInterface;
struct INetCfgComponentControl;
struct INetConnectionConnectUi;
struct INetLanConnectionUiInfo;
struct INotificationReportVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceUIWindowVtbl;
struct IPersistPropertyBagVtbl;
struct IPrivateIdentityManager;
struct IPropertyNotifySinkVtbl;
struct IPropertySetStorageVtbl;
struct IRTCBuddyGroupEventVtbl;
struct IRTCClientPresence2Vtbl;
struct IRTCClientProvisioning2;
struct IRTCEnumPresenceDevices;
struct IRTCPresenceContactVtbl;
struct IRTCPresenceStatusEvent;
struct IRTCUserSearchQueryVtbl;
struct IRadioServerControlVtbl;
struct IReconcilableObjectVtbl;
struct IReconcileInitiatorVtbl;
struct IRowsetCurrentIndexVtbl;
struct IRunningObjectTableVtbl;
struct ISearchAssistantOC2Vtbl;
struct ISearchAssistantOC3Vtbl;
struct ISyncMgrSynchronizeVtbl;
struct ITIMEDMusicPlayerObject;
struct ITIMEMediaPlayerControl;
struct ITransactionOptionsVtbl;
struct IUPnPDeviceProviderVtbl;
struct IWebViewFolderIcon2Vtbl;
struct IWebViewFolderIcon3Vtbl;
struct IWindowForBindingUIVtbl;
struct IXMLDOMCDATASectionVtbl;
struct IXMLDOMDocumentFragment;
struct IXMLDOMDocumentTypeVtbl;
struct IXMLDOMNamedNodeMapVtbl;
struct IXMLDOMSchemaCollection;
struct OLEDBSimpleProviderVtbl;
struct UPnPDescriptionDocument;
struct UserNotificationTrigger;
struct _CERT_CHAIN_POLICY_PARA;
struct _CERT_REVOCATION_STATUS;
struct _CERT_SYSTEM_STORE_INFO;
struct _CMSG_CTRL_DECRYPT_PARA;
struct _CRL_ISSUING_DIST_POINT;
struct _CRYPT_PRIVATE_KEY_INFO;
struct _CRYPT_SMIME_CAPABILITY;
struct _D3DADAPTER_IDENTIFIER8;
struct _D3DPRESENT_PARAMETERS_;
struct _DEV_BROADCAST_VOLUME_A;
struct _DEV_BROADCAST_VOLUME_W;
struct _DMO_OUTPUT_DATA_BUFFER;
struct _DOT11_ASSOCIATION_INFO;
struct _DOT11_REG_DOMAINS_LIST;
struct _DOT11_REG_DOMAIN_VALUE;
struct _EXIT_THREAD_DEBUG_INFO;
struct _IDirectContainerEvents;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY64;
struct _ImageArchitectureEntry;
struct _MESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_ENTRY;
struct _MIB_MFE_STATS_TABLE_EX;
struct _NDISPWR_SAVEPOWERSTATE;
struct _NDIS_802_11_BSSID_LIST;
struct _NDIS_802_11_REMOVE_KEY;
struct _NDIS_802_11_STATISTICS;
struct _NDIS_PM_PACKET_PATTERN;
struct _NDIS_TAPI_DEV_SPECIFIC;
struct _NDIS_TAPI_GET_DEV_CAPS;
struct _NDIS_WAN_PROTOCOL_CAPS;
struct _PROXY_ADDRCHANGE_PROPS;
struct _PROXY_HTTP_INFORMATION;
struct _REMSECURITY_ATTRIBUTES;
struct _SCATTER_GATHER_ELEMENT;
struct _SE_IMPERSONATION_STATE;
struct _SPC_FINANCIAL_CRITERIA;
struct _SYSTEM_POWER_STATUS_EX;
struct _SecPkgContext_KeyInfoA;
struct _SecPkgContext_KeyInfoW;
struct _SecPkgContext_Lifespan;
struct _WIN_TRUST_SUBJECT_FILE;
struct _XMIT_ROUTINE_QUINTUPLE;
struct __CEL_MEMTRACK_BASELINE;
struct __CEL_PROCESS_TERMINATE;
struct _tagSYNCMGRLOGERRORINFO;
struct _tagSYNCMGRPROGRESSITEM;
struct dvi_adpcmwaveformat_tag;
struct ima_adpcmwaveformat_tag;
struct linetranslateoutput_tag;
struct tagCInterfaceStubHeader;
struct tagFETCH_CMD_RESULTS_EX;
struct tagIMAP_STATUS_RESPONSE;
struct tagINITCOMMONCONTROLSEX;
struct tagNMDATETIMEWMKEYDOWNA;
struct tagNMDATETIMEWMKEYDOWNW;
struct tagSUBSCRIPTIONITEMINFO;
struct DRIVER_VER_MAJORMINOR_;
struct DShellFolderViewEvents;
struct DWebBrowserEvents2Vtbl;
struct DispHTCDefaultDispatch;
struct DispHTMLCommentElement;
struct DispHTMLDivElementVtbl;
struct DispHTMLGenericElement;
struct DispHTMLIsIndexElement;
struct DispHTMLMapElementVtbl;
struct DispHTMLMarqueeElement;
struct DispHTMLStyleSheetVtbl;
struct DispHTMLUnknownElement;
struct HTMLDocumentEventsVtbl;
struct HTMLElementEvents2Vtbl;
struct HTMLFormElementEvents2;
struct HTMLInputButtonElement;
struct HTMLLinkElementEvents2;
struct HTMLStyleElementEvents;
struct IAMExtendedSeekingVtbl;
struct IAMFilterMiscFlagsVtbl;
struct IAMMediaTypeSampleVtbl;
struct IAMMediaTypeStreamVtbl;
struct IAMPhysicalPinInfoVtbl;
struct IAMResourceControlVtbl;
struct IAMTimecodeDisplayVtbl;
struct IAccessibleHandlerVtbl;
struct IActiveScriptErrorVtbl;
struct IActiveScriptParseVtbl;
struct IActiveScriptStatsVtbl;
struct IActiveXSafetyProvider;
struct IAnimationComposerSite;
struct IAnimationComposerVtbl;
struct IAnimationFragmentVtbl;
struct IAudioStreamSampleVtbl;
struct IBindStatusCallbackMsg;
struct IBluetoothAuthenticate;
struct ICSSFilterDispatchVtbl;
struct ICommandPropertiesVtbl;
struct ICommandWithParameters;
struct IDBDataSourceAdminVtbl;
struct IDMOQualityControlVtbl;
struct IDVDDataSearchInfoVtbl;
struct IDXARGBSurfaceInitVtbl;
struct IDXSurfaceModifierVtbl;
struct IDXTFilterBehaviorSite;
struct IDXTFilterBehaviorVtbl;
struct IDXTRedirectFilterInit;
struct IDebugExtendedProperty;
struct IDirect3DResource8Vtbl;
struct IDirect3DVertexBuffer8;
struct IDirectControlViewVtbl;
struct IDirectDrawClipperVtbl;
struct IDirectDrawMediaSample;
struct IDirectDrawMediaStream;
struct IDirectDrawPaletteVtbl;
struct IDirectDrawSurfaceVtbl;
struct IDirectSoundBufferVtbl;
struct IDirectSoundNotifyVtbl;
struct IDistributorNotifyVtbl;
struct IDocHostUIHandler2Vtbl;
struct IDockingWindowSiteVtbl;
struct IEditDebugServicesVtbl;
struct IElementBehaviorLayout;
struct IElementBehaviorRender;
struct IElementBehaviorSiteOM;
struct IElementBehaviorSubmit;
struct IElementBehaviorUIVtbl;
struct IElementNamespaceTable;
struct IEmptyVolumeCache2Vtbl;
struct IEncodingFilterFactory;
struct IEnumCifComponentsVtbl;
struct IEnumDVD_TEXT_ITEMVtbl;
struct IEnumDebugPropertyInfo;
struct IEnumInstalledAppsVtbl;
struct IEnumNetCfgBindingPath;
struct IEnumNetConnectionVtbl;
struct IEnumPublishedAppsVtbl;
struct IEnumRegisterWordAVtbl;
struct IEnumRegisterWordWVtbl;
struct IEnumScheduleGroupVtbl;
struct IEnumSyncSchedulesVtbl;
struct IExtensionServicesVtbl;
struct IFullScreenVideoExVtbl;
struct IHTCAttachBehaviorVtbl;
struct IHTCMethodBehaviorVtbl;
struct IHTMLAnchorElementVtbl;
struct IHTMLBlockElement2Vtbl;
struct IHTMLButtonElementVtbl;
struct IHTMLComputedStyleVtbl;
struct IHTMLControlRange2Vtbl;
struct IHTMLCurrentStyle2Vtbl;
struct IHTMLCurrentStyle3Vtbl;
struct IHTMLDOMAttribute2Vtbl;
struct IHTMLDOMImplementation;
struct IHTMLEditServices2Vtbl;
struct IHTMLElementCollection;
struct IHTMLElementRenderVtbl;
struct IHTMLFilterPainterVtbl;
struct IHTMLFiltersCollection;
struct IHTMLFrameElement2Vtbl;
struct IHTMLFramesCollection2;
struct IHTMLHeaderElementVtbl;
struct IHTMLIFrameElementVtbl;
struct IHTMLInputElement2Vtbl;
struct IHTMLLabelElement2Vtbl;
struct IHTMLLegendElementVtbl;
struct IHTMLNextIdElementVtbl;
struct IHTMLNoShowElementVtbl;
struct IHTMLObjectElementVtbl;
struct IHTMLOptionElementVtbl;
struct IHTMLOptionsHolderVtbl;
struct IHTMLPersistDataOMVtbl;
struct IHTMLPhraseElementVtbl;
struct IHTMLPluginsCollection;
struct IHTMLPrivateWindowVtbl;
struct IHTMLScriptElementVtbl;
struct IHTMLSelectElementVtbl;
struct IHTMLStyleFontFaceVtbl;
struct IHTMLTableSection2Vtbl;
struct IHTMLTableSection3Vtbl;
struct IHTMLTextContainerVtbl;
struct IHTMLTextRangeMetrics2;
struct IHTMLUrnCollectionVtbl;
struct IHTTPMailTransportVtbl;
struct IHtmlDlgSafeHelperVtbl;
struct IImageDecodeFilterVtbl;
struct IImnAccountManagerVtbl;
struct IInstallEngineCallback;
struct IInternetTransportVtbl;
struct IMLangLineBreakConsole;
struct IMediaParamsRecordVtbl;
struct IMediaStreamFilterVtbl;
struct IMessengerIMWindowVtbl;
struct IMimeEditTagCollection;
struct IMimeInternationalVtbl;
struct INetCfgBindingPathVtbl;
struct INetConnectionCommonUi;
struct INewMenuItemServerVtbl;
struct IObexServiceConnection;
struct IOleControlNavigation2;
struct IOleParentUndoUnitVtbl;
struct IPersistStreamInitVtbl;
struct IPropFindMultiResponse;
struct IPropertyContainerVtbl;
struct IProvideClassInfo2Vtbl;
struct IQueryAssociationsVtbl;
struct IRTCClientPresenceVtbl;
struct IRTCClientProvisioning;
struct IRTCIntensityEventVtbl;
struct IRTCMessagingEventVtbl;
struct IRTCPresenceDeviceVtbl;
struct IRTCSessionCallControl;
struct IRequestDictionaryVtbl;
struct IRowPositionChangeVtbl;
struct IRowsetNewRowAfterVtbl;
struct IRowsetQueryStatusVtbl;
struct IRowsetWatchNotifyVtbl;
struct IRowsetWatchRegionVtbl;
struct IRpcChannelBuffer2Vtbl;
struct ISAXContentHandlerVtbl;
struct ISAXEntityResolverVtbl;
struct ISAXLexicalHandlerVtbl;
struct ISOAPIsapiResponseVtbl;
struct IScheduledWorkItemVtbl;
struct ISearchAssistantOCVtbl;
struct ISelectionServicesVtbl;
struct ISessionPropertiesVtbl;
struct IShellChangeNotifyVtbl;
struct IShellExecuteHookAVtbl;
struct IShellExecuteHookWVtbl;
struct IShellLinkDataListVtbl;
struct IShellPropSheetExtVtbl;
struct ISoapTypeMapperFactory;
struct IStorageDescriptorVtbl;
struct ISubscriptionThrottler;
struct ITIMEElementCollection;
struct ITransProtocolSinkVtbl;
struct ITransactionClonerVtbl;
struct ITransactionObjectVtbl;
struct ITransportCallbackVtbl;
struct ITrusteeGroupAdminVtbl;
struct IUPnPDeviceControlVtbl;
struct IVBSAXErrorHandlerVtbl;
struct IVariantChangeTypeVtbl;
struct IVoIPCallLogDBEnumVtbl;
struct IWebViewFolderIconVtbl;
struct IXMLDOMEntityReference;
struct NDIS_BPC_FORCE_RECEIVE;
struct NDIS_BPC_PROGRAM_GUIDE;
struct NDIS_CO_DEVICE_PROFILE;
struct WINTRUST_CATALOG_INFO_;
struct _ACTRL_PROPERTY_ENTRYA;
struct _ACTRL_PROPERTY_ENTRYW;
struct _BTHNS_RESTRICTIONBLOB;
struct _CARD_EVENT_MASK_PARMS;
struct _CERT_CRL_CONTEXT_PAIR;
struct _CMInvokeCommandInfoEx;
struct _CO_TAPI_TRANSLATE_SAP;
struct _CREDENTIAL_ATTRIBUTEA;
struct _CREDENTIAL_ATTRIBUTEW;
struct _CRYPT_SEQUENCE_OF_ANY;
struct _CRYPT_TRUST_REG_ENTRY;
struct _CRYPT_X942_OTHER_INFO;
struct _CTL_FIND_SUBJECT_PARA;
struct _CTL_VERIFY_USAGE_PARA;
struct _DEV_BROADCAST_DEVNODE;
struct _DMO_PARTIAL_MEDIATYPE;
struct _DOT11_AP_JOIN_REQUEST;
struct _DOT11_BSS_DESCRIPTION;
struct _DOT11_POWER_MGMT_MODE;
struct _EXTENDED_NOTIFICATION;
struct _IMAGE_BASE_RELOCATION;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64;
struct _IP_MCAST_COUNTER_INFO;
struct _MESSAGE_RESOURCE_DATA;
struct _MIB_IPMCAST_MFE_STATS;
struct _MIB_IPMCAST_OIF_STATS;
struct _MediaPlayerEventsVtbl;
struct _NDISUIO_QUERY_BINDING;
struct _NDIS_802_11_FIXED_IEs;
struct _NDIS_BPC_ADAPTER_CAPS;
struct _NDIS_IRDA_PACKET_INFO;
struct _NDIS_PNP_CAPABILITIES;
struct _NDIS_STATISTICS_VALUE;
struct _NDIS_TAPI_SECURE_CALL;
struct _POWER_DEVICE_TIMEOUTS;
struct _RPC_SYNTAX_IDENTIFIER;
struct _SPC_SERIALIZED_OBJECT;
struct _SearchAssistantEvents;
struct _SecPkgContext_DceInfo;
struct _TAPE_CREATE_PARTITION;
struct _TIME_ZONE_INFORMATION;
struct _UNLOAD_DLL_DEBUG_INFO;
struct _USB_COMMON_DESCRIPTOR;
struct _USB_DEVICE_DESCRIPTOR;
struct _USB_STRING_DESCRIPTOR;
struct __CEL_THREAD_TERMINATE;
struct __GENERIC_BINDING_INFO;
struct _structDVD_PROVIDER_ID;
struct _tagPROTOCOLFILTERDATA;
struct _tagSYNCMGRHANDLERINFO;
struct digirealwaveformat_tag;
struct dolbyac2waveformat_tag;
struct oliadpcmwaveformat_tag;
struct tagCInterfaceProxyVtbl;
struct tagCStdPSFactoryBuffer;
struct tagDVD_AudioAttributes;
struct tagDVD_VideoAttributes;
struct tagHTTPCONTACTINFOLIST;
struct tagHTTPMEMBERERRORLIST;
struct tagPACKAGESECURITYINFO;
struct tagPROPERTYRESTRICTION;
struct tagSHCHANGENOTIFYENTRY;
struct tcp_reserve_port_range;
struct DMsgrObjectEventsVtbl;
struct DOMChildrenCollection;
struct DShellNameSpaceEvents;
struct DWebBrowserEventsVtbl;
struct DispHTCAttachBehavior;
struct DispHTCMethodBehavior;
struct DispHTMLAnchorElement;
struct DispHTMLBRElementVtbl;
struct DispHTMLButtonElement;
struct DispHTMLDDElementVtbl;
struct DispHTMLDTElementVtbl;
struct DispHTMLFrameBaseVtbl;
struct DispHTMLHRElementVtbl;
struct DispHTMLHeaderElement;
struct DispHTMLLIElementVtbl;
struct DispHTMLLegendElement;
struct DispHTMLNextIdElement;
struct DispHTMLNoShowElement;
struct DispHTMLObjectElement;
struct DispHTMLOptionElement;
struct DispHTMLPhraseElement;
struct DispHTMLRuleStyleVtbl;
struct DispHTMLScriptElement;
struct DispHTMLSelectElement;
struct DispHTMLTableCellVtbl;
struct HTMLAnchorEvents2Vtbl;
struct HTMLDOMImplementation;
struct HTMLElementCollection;
struct HTMLElementEventsVtbl;
struct HTMLFormElementEvents;
struct HTMLInputImageEvents2;
struct HTMLLinkElementEvents;
struct HTMLScriptEvents2Vtbl;
struct HTMLWindowEvents2Vtbl;
struct IAMAnalogVideoDecoder;
struct IAMDevMemoryAllocator;
struct IAMMediaContentExVtbl;
struct IAMNetShowExPropsVtbl;
struct IAMNetShowPrerollVtbl;
struct IAMSecureMediaContent;
struct IAMTimecodeReaderVtbl;
struct IActiveScriptProperty;
struct IActiveScriptSiteVtbl;
struct IAdminIndexServerVtbl;
struct IAudioMediaStreamVtbl;
struct IBindEventHandlerVtbl;
struct ICaptureGraphBuilder2;
struct ICodeStoreDBEntryVtbl;
struct IContinueCallbackVtbl;
struct ICreateJavaPackageMgr;
struct IDDVideoPortContainer;
struct IDMOWrapperFilterVtbl;
struct IDVDHighlightInfoVtbl;
struct IDVDNavDataStatusSink;
struct IDVDNavigationManager;
struct IDVDNavigatorSinkVtbl;
struct IDVDStreamControlInfo;
struct IDVDUserOperationVtbl;
struct IDXSurfaceFactoryVtbl;
struct IDataAdviseHolderVtbl;
struct IDirect3DBaseTexture8;
struct IDirect3DCubeTexture8;
struct IDirect3DIndexBuffer8;
struct IDirect3DSurface8Vtbl;
struct IDirect3DTexture8Vtbl;
struct IDirectShowStreamVtbl;
struct IDocHostUIHandlerVtbl;
struct IDownloadBehaviorVtbl;
struct IDragSourceHelperVtbl;
struct IDropTargetHelperVtbl;
struct IElementBehaviorFocus;
struct IElementNamespaceVtbl;
struct IEmptyVolumeCacheVtbl;
struct IEnumCATEGORYINFOVtbl;
struct IEnumCodeStoreDBEntry;
struct IEnumConnectionPoints;
struct IEnumInputContextVtbl;
struct IEnumNotificationVtbl;
struct IEnumOleDocumentViews;
struct IEnumOleUndoUnitsVtbl;
struct IEnumSubscriptionVtbl;
struct IEnumUserIdentityVtbl;
struct IFileSourceFilterVtbl;
struct IFileSystemDescriptor;
struct IGlobalInterfaceTable;
struct IHTCEventBehaviorVtbl;
struct IHTMLAppBehavior2Vtbl;
struct IHTMLAppBehavior3Vtbl;
struct IHTMLAreasCollection2;
struct IHTMLAreasCollection3;
struct IHTMLBlockElementVtbl;
struct IHTMLBodyElement2Vtbl;
struct IHTMLControlRangeVtbl;
struct IHTMLCurrentStyleVtbl;
struct IHTMLDListElementVtbl;
struct IHTMLDOMAttributeVtbl;
struct IHTMLDOMTextNode2Vtbl;
struct IHTMLDataTransferVtbl;
struct IHTMLEditDesignerVtbl;
struct IHTMLEditServicesVtbl;
struct IHTMLEmbedElementVtbl;
struct IHTMLFieldSetElement2;
struct IHTMLFormElement2Vtbl;
struct IHTMLFormElement3Vtbl;
struct IHTMLFrameElementVtbl;
struct IHTMLFrameSetElement2;
struct IHTMLIPrintCollection;
struct IHTMLInputElementVtbl;
struct IHTMLInputFileElement;
struct IHTMLInputTextElement;
struct IHTMLLabelElementVtbl;
struct IHTMLLinkElement2Vtbl;
struct IHTMLLinkElement3Vtbl;
struct IHTMLListElement2Vtbl;
struct IHTMLMetaElement2Vtbl;
struct IHTMLModelessInitVtbl;
struct IHTMLOListElementVtbl;
struct IHTMLOMWindowServices;
struct IHTMLPainterEventInfo;
struct IHTMLParamElementVtbl;
struct IHTMLSelectionObject2;
struct IHTMLStyleElementVtbl;
struct IHTMLTableCaptionVtbl;
struct IHTMLTableSectionVtbl;
struct IHTMLTextRangeMetrics;
struct IHTMLTitleElementVtbl;
struct IHTMLUListElementVtbl;
struct IHTTPMailCallbackVtbl;
struct IHeaderCollectionVtbl;
struct IHighlightSegmentVtbl;
struct IHostBehaviorInitVtbl;
struct IHostDialogHelperVtbl;
struct IIdentityChangeNotify;
struct IImageDecodeEventSink;
struct IImnAdviseAccountVtbl;
struct IInternetBindInfoVtbl;
struct IInternetPriorityVtbl;
struct IInternetProtocolInfo;
struct IInternetProtocolRoot;
struct IInternetProtocolSink;
struct IInternetProtocolVtbl;
struct IInternetThreadSwitch;
struct IMarkupContainer2Vtbl;
struct IMediaPropertyBagVtbl;
struct IMimeAddressTableVtbl;
struct IMimeEnumAddressTypes;
struct IMimeEnumMessageParts;
struct IMimeMessagePartsVtbl;
struct IMpegAudioDecoderVtbl;
struct IMultiMediaStreamVtbl;
struct INetCfgClassSetupVtbl;
struct INetCfgComponentSetup;
struct INetConnectionManager;
struct INewShortcutHookAVtbl;
struct INewShortcutHookWVtbl;
struct INotificationSinkVtbl;
struct IOleCommandTargetVtbl;
struct IOleControlNavigation;
struct IOleInPlaceObjectVtbl;
struct IOleInPlaceSiteExVtbl;
struct IOleItemContainerVtbl;
struct IOpsProfileSimpleVtbl;
struct IOverlappedCompletion;
struct IOverlappedStreamVtbl;
struct IParseDisplayNameVtbl;
struct IParserTreeProperties;
struct IPerPropertyBrowsing2;
struct IPropFindResponseVtbl;
struct IPropPatchRequestVtbl;
struct IPropertyPageSiteVtbl;
struct IPropertySetContainer;
struct IProvideClassInfoVtbl;
struct IRTCEventNotification;
struct IRTCMediaRequestEvent;
struct IRTCPresenceDataEvent;
struct IRTCProfileEvent2Vtbl;
struct IRTCReInviteEventVtbl;
struct IRTCWatcherEvent2Vtbl;
struct IRegisterProviderVtbl;
struct IResolveShellLinkVtbl;
struct IResourceConsumerVtbl;
struct IRowsetNextRowsetVtbl;
struct IRowsetWithParameters;
struct IRpcChannelBufferVtbl;
struct IScopedOperationsVtbl;
struct ISdpNodeContainerVtbl;
struct ISearchCommandExtVtbl;
struct ISelectionObject2Vtbl;
struct ISequentialStreamVtbl;
struct IServerXMLHTTPRequest;
struct IShellIconOverlayVtbl;
struct ISoapConnectorFactory;
struct ISpecifyPropertyPages;
struct ISubscriptionItemVtbl;
struct ISubscriptionMgr2Vtbl;
struct ISupportErrorInfoVtbl;
struct ISyncMgrEnumItemsVtbl;
struct ISynchronizedCallBack;
struct ITIMEAnimationElement;
struct ITIMEMediaElementVtbl;
struct IThumbnailCaptureVtbl;
struct ITransactionDispenser;
struct ITransactionLocalVtbl;
struct ITravelLogClient2Vtbl;
struct ITridentEventSinkVtbl;
struct ITypeChangeEventsVtbl;
struct IUPnPDeviceFinderVtbl;
struct IUrlHistoryNotifyVtbl;
struct IVBSAXDeclHandlerVtbl;
struct IVoIPCallerInfoDBEnum;
struct IVoIPCallerInfoDBVtbl;
struct IVoIPCallerInfoRecord;
struct IXMLDOMImplementation;
struct IXMLDOMParseErrorVtbl;
struct IXMLElementCollection;
struct SDP_ULARGE_INTEGER_16;
struct SoapTypeMapperFactory;
struct ThreadDialogProcParam;
struct WebViewFolderContents;
struct _ACL_SIZE_INFORMATION;
struct _BTH_SOCKOPT_SECURITY;
struct _CERT_CREDENTIAL_INFO;
struct _CERT_GENERAL_SUBTREE;
struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_REVOCATION_INFO;
struct _CERT_REVOCATION_PARA;
struct _CERT_STORE_PROV_INFO;
struct _CERT_TRUST_LIST_INFO;
struct _CMC_TAGGED_ATTRIBUTE;
struct _CMC_TAGGED_OTHER_MSG;
struct _CMSG_CMS_SIGNER_INFO;
struct _CO_TAPI_ADDRESS_CAPS;
struct _CRL_DIST_POINTS_INFO;
struct _CRYPT_KEY_PROV_PARAM;
struct _CRYPT_OID_FUNC_ENTRY;
struct _CTL_ANY_SUBJECT_INFO;
struct _D3DVERTEXBUFFER_DESC;
struct _DDVIDEOPORTBANDWIDTH;
struct _DEV_BROADCAST_HANDLE;
struct _DEV_BROADCAST_HEADER;
struct _DEV_BROADCAST_PORT_A;
struct _DEV_BROADCAST_PORT_W;
struct _DOT11_COUNTERS_ENTRY;
struct _DOT11_INTEGRITY_FAIL;
struct _DOT11_RECEIVE_UPCALL;
struct _DOT11_SEND_8021X_PKT;
struct _EXCEPTION_DEBUG_INFO;
struct _FILEGROUPDESCRIPTORA;
struct _FILEGROUPDESCRIPTORW;
union _FILE_SEGMENT_ELEMENT;
struct _FULL_PTR_XLAT_TABLES;
struct _GEN_GET_NETCARD_TIME;
struct _HTML_PAINT_DRAW_INFO;
struct _HTTP_FILTER_RAW_DATA;
struct _IDirectControlEvents;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY;
struct _IMAGE_IMPORT_BY_NAME;
struct _IMAGE_SECTION_HEADER;
struct _IMAGE_STUB_DIRECTORY;
struct _IP_ADAPTER_ADDRESSES;
struct _IP_ADAPTER_INDEX_MAP;
struct _IP_ADAPTER_ORDER_MAP;
struct _MIB_IPMCAST_BOUNDARY;
struct _MIB_IPMCAST_IF_ENTRY;
struct _MIB_IPMCAST_IF_TABLE;
struct _NDIS_TAPI_CLOSE_CALL;
struct _NETWORK_ADDRESS_LIST;
struct _NEWMAIL_NOTIFICATION;
struct _OFFLOAD_IPSEC_ADD_SA;
struct _PST_AUTHENTICODEDATA;
struct _RPC_CLIENT_INTERFACE;
struct _RPC_PROTSEQ_ENDPOINT;
struct _RPC_SERVER_INTERFACE;
struct _RTL_CRITICAL_SECTION;
struct _SCHANNEL_ALERT_TOKEN;
struct _SCH_CRED_PUBLIC_CAPI;
struct _SCH_CRED_SECRET_CAPI;
struct _SEC_NEGOTIATION_INFO;
struct _SPropertyRestriction;
struct _SecPkgContext_NamesA;
struct _SecPkgContext_NamesW;
struct _SecPkgCred_CacheInfo;
struct _ShellAppCategoryList;
struct _UNIVERSAL_NAME_INFOA;
struct _UNIVERSAL_NAME_INFOW;
struct _USB_POWER_DESCRIPTOR;
struct _WCE_IRDA_DEVICE_INFO;
struct _WSAServiceClassInfoA;
struct _WSAServiceClassInfoW;
struct __CEL_THREAD_PRIORITY;
struct _wireSAFEARR_DISPATCH;
struct digifixwaveformat_tag;
struct digistdwaveformat_tag;
struct echosc1waveformat_tag;
struct ip_option_information;
struct lineaddressstatus_tag;
struct linelocationentry_tag;
struct lineproviderentry_tag;
struct linetranslatecaps_tag;
struct olicelpwaveformat_tag;
struct tACMDRVSTREAMINSTANCE;
struct tACMFORMATTAGDETAILSW;
struct tagCInterfaceStubVtbl;
struct tagCONTENTRESTRICTION;
struct tagDBCONTENTPROXIMITY;
struct tagDBRELEVANTDOCUMENT;
struct tagDDDEVICEIDENTIFIER;
struct tagDVD_MUA_MixingInfo;
struct tagDVD_MenuAttributes;
struct tagDetectEncodingInfo;
struct tagHTTPMEMBERINFOLIST;
union tagIMAP_RESPONSE_DATA;
struct tagOleMenuGroupWidths;
struct tagPACKAGEINSTALLINFO;
union tagRESTRICTION___URes;
struct wavefilter_volume_tag;
struct CMLangConvertCharset;
struct DSearchCommandEvents;
struct DVDNavigationManager;
struct DVDStreamControlInfo;
struct DWebBridgeEventsVtbl;
struct DispHTCEventBehavior;
struct DispHTMLBlockElement;
struct DispHTMLCurrentStyle;
struct DispHTMLDListElement;
struct DispHTMLDOMAttribute;
struct DispHTMLDefaultsVtbl;
struct DispHTMLDocumentVtbl;
struct DispHTMLFrameElement;
struct DispHTMLFrameSetSite;
struct DispHTMLInputElement;
struct DispHTMLLabelElement;
struct DispHTMLOListElement;
struct DispHTMLParamElement;
struct DispHTMLSpanFlowVtbl;
struct DispHTMLStyleElement;
struct DispHTMLTableCaption;
struct DispHTMLTableColVtbl;
struct DispHTMLTableRowVtbl;
struct DispHTMLTableSection;
struct DispHTMLTitleElement;
struct DispHTMLUListElement;
struct HTMLAnchorEventsVtbl;
struct HTMLFrameSiteEvents2;
struct HTMLInputFileElement;
struct HTMLInputImageEvents;
struct HTMLInputTextElement;
struct HTMLLabelEvents2Vtbl;
struct HTMLScriptEventsVtbl;
struct HTMLTableEvents2Vtbl;
struct HTMLWindowEventsVtbl;
struct IAMBufferNegotiation;
struct IAMDroppedFramesVtbl;
struct IAMExtendedErrorInfo;
struct IAMMediaContent2Vtbl;
struct IAMNetShowConfigVtbl;
struct IAMNetworkStatusVtbl;
struct IAMStreamControlVtbl;
struct IAMTimecodeGenerator;
struct IAMTunerNotification;
struct IBluetoothDeviceVtbl;
struct ICaptureGraphBuilder;
struct ICatalogFileInfoVtbl;
struct IChapteredRowsetVtbl;
struct IColumnMapperCreator;
struct ICommDlgBrowser2Vtbl;
struct ICommandValidateVtbl;
struct ICompositeFolderVtbl;
struct IConnectionPointVtbl;
struct IContextCallbackVtbl;
struct ICreateErrorInfoVtbl;
struct ICreateTypeInfo2Vtbl;
struct IDATASRCListenerVtbl;
struct IDAVNamespaceArbiter;
struct IDBCreateCommandVtbl;
struct IDBCreateSessionVtbl;
struct IDBSchemaCommandVtbl;
struct IDVDProgramChainVtbl;
struct IDVDStreamAttributes;
struct IDXTFilterCollection;
struct IDXTFilterController;
struct IDeferredCommandVtbl;
struct IDirect3DDevice8Vtbl;
struct IDirect3DVolume8Vtbl;
struct IDirectContainerVtbl;
struct IDirectDrawVideoPort;
struct IDirectDrawVideoVtbl;
struct IDisplayServicesVtbl;
struct IDocHostShowUICEVtbl;
struct IDownloadManagerVtbl;
struct IDownloadSiteMgrVtbl;
struct IDvdGraphBuilderVtbl;
struct IElementBehaviorSite;
struct IElementBehaviorVtbl;
struct IEnumConnectionsVtbl;
struct IEnumExtraSearchVtbl;
struct IEnumJavaPackageVtbl;
struct IEnumNetCfgComponent;
struct IEnumPStoreItemsVtbl;
struct IEnumPStoreProviders;
struct IEnumPStoreTypesVtbl;
struct IEnumPropertyMapVtbl;
struct IEnumSTATPROPBAGVtbl;
struct IEnumSTATPROPSTGVtbl;
struct IEnumSoapMappersVtbl;
struct IEnumWSDLServiceVtbl;
struct IFileSinkFilter2Vtbl;
struct IFontCacheNotifyVtbl;
struct IFullScreenVideoVtbl;
struct IHTCDescBehaviorVtbl;
struct IHTCPropertyBehavior;
struct IHTMLAppBehaviorVtbl;
struct IHTMLAreaElementVtbl;
struct IHTMLAreasCollection;
struct IHTMLBaseElementVtbl;
struct IHTMLBaseFontElement;
struct IHTMLBodyElementVtbl;
struct IHTMLCommentElement2;
struct IHTMLDOMTextNodeVtbl;
struct IHTMLDXTransformVtbl;
struct IHTMLDatabindingVtbl;
struct IHTMLDivPositionVtbl;
struct IHTMLEditingServices;
struct IHTMLElementDefaults;
struct IHTMLFieldSetElement;
struct IHTMLFilterPaintSite;
struct IHTMLFontElementVtbl;
struct IHTMLFormElementVtbl;
struct IHTMLFrameSetElement;
struct IHTMLHeadElementVtbl;
struct IHTMLHtmlElementVtbl;
struct IHTMLImgElement2Vtbl;
struct IHTMLIsIndexElement2;
struct IHTMLLinkElementVtbl;
struct IHTMLListElementVtbl;
struct IHTMLMetaElementVtbl;
struct IHTMLParaElementVtbl;
struct IHTMLPersistDataVtbl;
struct IHTMLRenderStyleVtbl;
struct IHTMLSelectionObject;
struct IHTMLSpanElementVtbl;
struct IHTMLStyleSheet2Vtbl;
struct IHTMLTableRowMetrics;
struct IHTMLTextAreaElement;
struct IHTMLTextElementVtbl;
struct IHtmlLoadOptionsVtbl;
struct IImnEnumAccountsVtbl;
struct IIndexDefinitionVtbl;
struct IInputObjectSiteVtbl;
struct IInstallEngineTiming;
struct IInternetSessionVtbl;
struct IInternetZoneManager;
struct IMLangConvertCharset;
struct IMLangStringAStrVtbl;
struct IMLangStringBufAVtbl;
struct IMLangStringBufWVtbl;
struct IMLangStringWStrVtbl;
struct IMPORT_OBJECT_HEADER;
struct IMXReaderControlVtbl;
struct IMarkupContainerVtbl;
struct IMarkupServices2Vtbl;
struct IMarkupTextFragsVtbl;
struct IMediaBindStreamVtbl;
struct IMediaPlayerListener;
struct IMimeHeaderTableVtbl;
struct IMimeMessageCallback;
struct IMimeMessageTreeVtbl;
struct IMimeObjResolverVtbl;
struct IMimePropertySetVtbl;
struct IMimeWebDocumentVtbl;
struct IMixerPinConfig2Vtbl;
struct IMultipleResultsVtbl;
struct INetCfgComponentVtbl;
struct INotificationMgrVtbl;
struct INotificationRunning;
struct IObjectAccessControl;
struct IOleAdviseHolderVtbl;
struct IOleCacheControlVtbl;
struct IOleDocumentSiteVtbl;
struct IOleDocumentViewVtbl;
struct IOleInPlaceFrameVtbl;
struct IPSFactoryBufferVtbl;
struct IPerPropertyBrowsing;
struct IPersistPropertyBag2;
struct IPointerInactiveVtbl;
struct IPrivacyServicesVtbl;
struct IPropFindRequestVtbl;
struct IPropertyBagEnumVtbl;
struct IPropertyStorageVtbl;
struct IProvideTaskPageVtbl;
struct IRTCEnumParticipants;
struct IRTCEnumProfilesVtbl;
struct IRTCEnumWatchersVtbl;
struct IRTCProfileEventVtbl;
struct IRTCRoamingEventVtbl;
struct IRTCUserSearchResult;
struct IRTCWatcherEventVtbl;
struct IRecalcHostDebugVtbl;
struct IReferenceClock2Vtbl;
struct IResourceManagerVtbl;
struct IRowSchemaChangeVtbl;
struct IRowsetChapterMember;
struct ISAXErrorHandlerVtbl;
struct IScriptErrorListVtbl;
struct IScriptScriptletVtbl;
struct ISearchQueryHitsVtbl;
struct ISeekingPassThruVtbl;
struct ISegmentListIterator;
struct IServiceProviderVtbl;
struct IShellAppManagerVtbl;
struct IShellFolderViewDual;
struct IShellNetCrawlerVtbl;
struct ISimpleFrameSiteVtbl;
struct ISoapTypeMapper2Vtbl;
struct ISubDivisionProvider;
struct ISubscriptionMgrPriv;
struct ISubscriptionMgrVtbl;
struct ISyncMgrRegisterVtbl;
struct ISyncScheduleMgrVtbl;
struct ITIMEBodyElementVtbl;
struct ITIMEDVDPlayerObject;
struct ITIMEMediaPlayerSite;
struct ITIMEMediaPlayerVtbl;
struct ITableDefinitionVtbl;
struct ITargetContainerVtbl;
struct ITargetEmbeddingVtbl;
struct ITargetFramePrivVtbl;
struct ITemplatePrinterVtbl;
struct ITransactionDataVtbl;
struct ITransactionJoinVtbl;
struct ITravelLogClientVtbl;
struct IUPnPEventSourceVtbl;
struct IUPnPReregistrarVtbl;
struct IUPnPServiceCallback;
struct IUnicodeScriptMapper;
struct IUserIdentityManager;
struct IVBSAXAttributesVtbl;
struct IVBSAXContentHandler;
struct IVBSAXDTDHandlerVtbl;
struct IVBSAXEntityResolver;
struct IVBSAXLexicalHandler;
struct IVirusScanEngineVtbl;
struct IVoIPCurrentCallVtbl;
struct IVoIPDirectoryClient;
struct IWBScriptControlVtbl;
struct IWinInetHttpInfoVtbl;
struct IWrappedProtocolVtbl;
struct IXMLDOMAttributeVtbl;
struct IXMLDOMCharacterData;
struct IXMLDOMDocument2Vtbl;
struct IXMLDOMSelectionVtbl;
struct IXMLGenericParseVtbl;
struct KBDI_AUTOREPEAT_INFO;
struct LdapReferralCallback;
struct NDIS_BPC_DEVICE_CAPS;
struct NDIS_BPC_POOL_RETURN;
struct SChannelHookCallInfo;
struct SDP_LARGE_INTEGER_16;
struct SoapConnectorFactory;
struct UserNotificationType;
struct XMLDOMDocumentEvents;
struct _ACTRL_ACCESS_ENTRYA;
struct _ACTRL_ACCESS_ENTRYW;
struct _ACTRL_CONTROL_INFOA;
struct _ACTRL_CONTROL_INFOW;
struct _AM_COPY_MACROVISION;
struct _APPCATEGORYINFOLIST;
struct _AllocatorProperties;
struct _BASEBAND_CONNECTION;
struct _CARD_REGISTER_PARMS;
struct _CEL_OEMPROFILER_HIT;
struct _CERT_ALT_NAME_ENTRY;
struct _CERT_DSS_PARAMETERS;
struct _CERT_POLICY_MAPPING;
struct _CMINVOKECOMMANDINFO;
struct _CRL_DIST_POINT_NAME;
struct _CRL_REVOCATION_INFO;
struct _CRYPT_KEY_PROV_INFO;
struct _CRYPT_PROVIDER_CERT;
struct _CRYPT_PROVIDER_DATA;
struct _CRYPT_PROVIDER_SGNR;
struct _CTL_FIND_USAGE_PARA;
struct _D3DINDEXBUFFER_DESC;
struct _DMA_ADAPTER_OBJECT_;
struct _DOT11_GROUP_ADDRESS;
struct _DOT11_RESET_REQUEST;
struct _DOT11_START_REQUEST;
struct _DOT11_WEP_KEY_ENTRY;
struct _HTTP_FILTER_AUTHENT;
struct _HTTP_FILTER_CONTEXT;
struct _HTTP_FILTER_URL_MAP;
struct _HTTP_FILTER_VERSION;
struct _IMAGELISTDRAWPARAMS;
struct _IP_PER_ADAPTER_INFO;
struct _KDEVICE_QUEUE_ENTRY;
struct _LINE_ADDRESS_STATUS;
struct _LOAD_DLL_DEBUG_INFO;
struct _LUID_AND_ATTRIBUTES;
struct _MIB_IPFORWARDNUMBER;
struct _MIB_MFE_STATS_TABLE;
struct _MP_ENVELOPE_SEGMENT;
struct _NDIS_TAPI_MAKE_CALL;
struct _NETWORK_ADDRESS_IPX;
struct _OBJECT_NOTIFICATION;
struct _PROCESS_INFORMATION;
struct _PST_BINARYCHECKDATA;
struct _REPARSE_DATA_BUFFER;
struct _RPC_PROTSEQ_VECTORA;
struct _RPC_PROTSEQ_VECTORW;
struct _RPC_TRANSFER_SYNTAX;
struct _SBitMaskRestriction;
struct _SCATTER_GATHER_LIST;
struct _SCommentRestriction;
struct _SContentRestriction;
struct _SECURITY_ATTRIBUTES;
struct _SECURITY_DESCRIPTOR;
struct _SOCKET_ADDRESS_LIST;
struct _SSLVALIDATECERTHOOK;
struct _SecPkgContext_Flags;
struct _SecPkgContext_Sizes;
struct _TOKEN_PRIMARY_GROUP;
struct _USB_DRIVER_SETTINGS;
struct __CEL_PROCESS_CREATE;
struct __CEL_PROCESS_DELETE;
struct __CEL_THREAD_MIGRATE;
struct __CEL_THREAD_QUANTUM;
struct __CEL_THREAD_SUSPEND;
struct __bth_inquiry_result;
struct _avifieldindex_chunk;
struct _avitimedindex_entry;
struct _portemu_port_params;
struct _structDVD_TEXT_ITEM;
struct _tagBITMAPFILEHEADER;
struct _tagHIT_LOGGING_INFO;
struct _tagNotificationItem;
struct _tagSubscriptionInfo;
struct _wireSAFEARRAY_UNION;
struct _wireSAFEARR_BRECORD;
struct _wireSAFEARR_HAVEIID;
struct _wireSAFEARR_UNKNOWN;
struct _wireSAFEARR_VARIANT;
struct adpcmewaveformat_tag;
struct gsm610waveformat_tag;
struct linecountryentry_tag;
struct linegeneratetone_tag;
struct lineproviderlist_tag;
struct oligsmwaveformat_tag;
struct olioprwaveformat_tag;
struct olisbcwaveformat_tag;
struct phoneextensionid_tag;
struct sonarcwaveformat_tag;
struct tACMDRVFORMATSUGGEST;
struct tACMFILTERTAGDETAILS;
struct tMIXERCONTROLDETAILS;
struct tagAM_MPEGSTREAMTYPE;
struct tagAM_MPEGSYSTEMTYPE;
struct tagCATEGORIZATIONSET;
struct tagCLEANLOCALSTORAGE;
struct tagCOMPAREITEMSTRUCT;
struct tagCOMPOSITIONSTRING;
struct tagDBIMPLICITSESSION;
struct tagDBINDEXCOLUMNDESC;
struct tagDVD_HMSF_TIMECODE;
struct tagDebugPropertyInfo;
struct tagFETCH_CMD_RESULTS;
struct tagHTTPCONTACTIDLIST;
struct tagHTTPMAILBCOPYMOVE;
struct tagMEASUREITEMSTRUCT;
struct tagNETCON_CHOOSECONN;
struct tagNETCON_PROPERTIES;
struct tagNMDATETIMEFORMATA;
struct tagNMDATETIMEFORMATW;
struct tagNMDATETIMESTRINGA;
struct tagNMDATETIMESTRINGW;
struct tagNMLVODSTATECHANGE;
struct tagSTORAGEDEVICEINFO;
struct tagVECTORRESTRICTION;
struct tagVERCONNECTIONINFO;
struct AM_DVDCOPY_TITLEKEY;
struct DShellWindowsEvents;
struct DThumbCtlEventsVtbl;
struct DXTFilterCollection;
struct DispHTCDescBehavior;
struct DispHTMLAppBehavior;
struct DispHTMLAreaElement;
struct DispHTMLBGsoundVtbl;
struct DispHTMLBaseElement;
struct DispHTMLDOMTextNode;
struct DispHTMLDivPosition;
struct DispHTMLFontElement;
struct DispHTMLFormElement;
struct DispHTMLHeadElement;
struct DispHTMLHtmlElement;
struct DispHTMLLinkElement;
struct DispHTMLListElement;
struct DispHTMLMetaElement;
struct DispHTMLParaElement;
struct DispHTMLRenderStyle;
struct DispHTMLSpanElement;
struct DispHTMLTextElement;
struct DispHTMLWindow2Vtbl;
struct DispHTMLWindowProxy;
struct DispIHTMLInputImage;
struct FolderItemVerbsVtbl;
struct HTCPropertyBehavior;
struct HTMLAreaEvents2Vtbl;
struct HTMLAreasCollection;
struct HTMLBaseFontElement;
struct HTMLDocumentEvents2;
struct HTMLFieldSetElement;
struct HTMLFrameSiteEvents;
struct HTMLLabelEventsVtbl;
struct HTMLNamespaceEvents;
struct HTMLRichtextElement;
struct HTMLTableEventsVtbl;
struct HTMLTextAreaElement;
struct IAMDevMemoryControl;
struct IAMExtTransportVtbl;
struct IAMMediaContentVtbl;
struct IAMMultiMediaStream;
struct IAMPlayListItemVtbl;
struct IAMStreamConfigVtbl;
struct IAMStreamSelectVtbl;
struct IAMVideoCompression;
struct IAMVideoProcAmpVtbl;
struct IActiveIMMRegistrar;
struct IActiveScriptAuthor;
struct IActiveScriptEncode;
struct IAsyncOperationVtbl;
struct IBaseVideoMixerVtbl;
struct IBindStatusCallback;
struct ICatInformationVtbl;
struct ICifRWComponentVtbl;
struct IClassActivatorVtbl;
struct IClassFactoryExVtbl;
struct IClientSecurityVtbl;
struct IColumnProviderVtbl;
struct ICommDlgBrowserVtbl;
struct ICommandPersistVtbl;
struct ICommandPrepareVtbl;
struct IConfigInterleaving;
struct ICreateTypeInfoVtbl;
struct ICreateTypeLib2Vtbl;
struct IDBAsynchNotifyVtbl;
struct IDBAsynchStatusVtbl;
struct IDBBinderProperties;
struct IDBSchemaRowsetVtbl;
struct IDDrawExclModeVideo;
struct IDVDTextManagerVtbl;
struct IDVDVideoVolumeVtbl;
struct IDXARGBReadWritePtr;
struct IDXTScaleOutputVtbl;
struct IDXTransformFactory;
struct IDirect3DSwapChain8;
struct IDirectDrawSurface2;
struct IDirectDrawSurface3;
struct IDirectDrawSurface4;
struct IDirectDrawSurface5;
struct IDirectSoundCapture;
struct IDisplayPointerVtbl;
struct IDockingWindowFrame;
struct IDownloadNotifyVtbl;
struct IElementAdornerVtbl;
struct IElementSegmentVtbl;
struct IEnumDVD_CELL_PIECE;
struct IEnumItemProperties;
struct IEnumMediaTypesVtbl;
struct IEnumPrivacyRecords;
struct IEnumRegFiltersVtbl;
struct IEnumSTATPROPSETSTG;
struct IEnumTravelLogEntry;
struct IEnumWSDLOperations;
struct IExternalConnection;
struct IFileSearchBandVtbl;
struct IFileSinkFilterVtbl;
struct IFileSystemBindData;
struct IFileViewerSiteVtbl;
struct IHTCAttachBehavior2;
struct IHTCDefaultDispatch;
struct IHTMLAnchorElement2;
struct IHTMLChangePlayback;
struct IHTMLChangeSinkVtbl;
struct IHTMLCommentElement;
struct IHTMLControlElement;
struct IHTMLDivElementVtbl;
struct IHTMLFrameBase2Vtbl;
struct IHTMLFrameBase3Vtbl;
struct IHTMLGenericElement;
struct IHTMLIFrameElement2;
struct IHTMLImgElementVtbl;
struct IHTMLInputImageVtbl;
struct IHTMLIsIndexElement;
struct IHTMLLegendElement2;
struct IHTMLMapElementVtbl;
struct IHTMLMarqueeElement;
struct IHTMLObjectElement2;
struct IHTMLObjectElement3;
struct IHTMLOpsProfileVtbl;
struct IHTMLOptionElement2;
struct IHTMLOptionElement3;
struct IHTMLPainterOverlay;
struct IHTMLPhraseElement2;
struct IHTMLPrivateWindow2;
struct IHTMLPrivateWindow3;
struct IHTMLRectCollection;
struct IHTMLRuleStyle2Vtbl;
struct IHTMLRuleStyle3Vtbl;
struct IHTMLRuleStyle4Vtbl;
struct IHTMLScriptElement2;
struct IHTMLSelectElement2;
struct IHTMLSelectElement3;
struct IHTMLSelectElement4;
struct IHTMLStyleSheetPage;
struct IHTMLStyleSheetRule;
struct IHTMLStyleSheetVtbl;
struct IHTMLSubmitDataVtbl;
struct IHTMLTableCell2Vtbl;
struct IHTMLUniqueNameVtbl;
struct IHTMLUnknownElement;
struct IHTMLUserDataOMVtbl;
struct IHTMLViewFilterSite;
struct IHTMLViewFilterVtbl;
struct IHlinkBrowseContext;
struct IHttpNegotiate2Vtbl;
struct IIMAPTransport2Vtbl;
struct IImnAccountManager2;
struct IInstallEngine2Vtbl;
struct IInternetBindClient;
struct IJavaPackageManager;
struct IMAPIAdviseSinkVtbl;
struct IMLangCodePagesVtbl;
struct IMLangFontLink2Vtbl;
struct IMapMIMEToCLSIDVtbl;
struct IMarkupPointer2Vtbl;
struct IMarkupServicesVtbl;
struct IMediaEventSinkVtbl;
struct IMediaObjectInPlace;
struct IMediaParamInfoVtbl;
struct IMediaPlayerDvdVtbl;
struct IMessengerIMWindows;
struct IMimeEnumHeaderRows;
struct IMimeEnumProperties;
struct IMimePropertySchema;
struct IMixerPinConfigVtbl;
struct IMsgrIMSessionsVtbl;
struct IMultiLanguage2Vtbl;
struct IMultiLanguage3Vtbl;
struct INNTPTransport2Vtbl;
struct INotificationReport;
struct IObjectIdentityVtbl;
struct IObjectWithSiteVtbl;
struct IOleControlSiteVtbl;
struct IOleInPlaceSiteVtbl;
struct IOleInPlaceUIWindow;
struct IOleUndoManagerVtbl;
struct IPersistFolder2Vtbl;
struct IPersistFolder3Vtbl;
struct IPersistHistoryVtbl;
struct IPersistMonikerVtbl;
struct IPersistPropertyBag;
struct IPersistStorageVtbl;
struct IProfferServiceVtbl;
struct IProgressDialogVtbl;
struct IProgressNotifyVtbl;
struct IPropertyNotifySink;
struct IPropertySetStorage;
struct IProvideMonikerVtbl;
struct IQualityControlVtbl;
struct IRTCBuddyEvent2Vtbl;
struct IRTCBuddyGroupEvent;
struct IRTCClientEventVtbl;
struct IRTCClientPresence2;
struct IRTCEnumBuddiesVtbl;
struct IRTCParticipantVtbl;
struct IRTCPortManagerVtbl;
struct IRTCPresenceContact;
struct IRTCUserSearchQuery;
struct IRadioServerControl;
struct IRecalcPropertyVtbl;
struct IReconcilableObject;
struct IReconcileInitiator;
struct IReferenceClockVtbl;
struct IRemoteComputerVtbl;
struct IRequestStrListVtbl;
struct IRowsetCopyRowsVtbl;
struct IRowsetCurrentIndex;
struct IRowsetIdentityVtbl;
struct IRowsetWatchAllVtbl;
struct IRpcProxyBufferVtbl;
struct IRunnableObjectVtbl;
struct IRunningObjectTable;
struct ISAXDeclHandlerVtbl;
struct ISMTPTransport2Vtbl;
struct ISearchAssistantOC2;
struct ISearchAssistantOC3;
struct ISequenceNumberVtbl;
struct IServerSecurityVtbl;
struct IShellDispatch2Vtbl;
struct IShellDispatch3Vtbl;
struct IShellLinkDual2Vtbl;
struct IShellNameSpaceVtbl;
struct ISoapSerializerVtbl;
struct ISoapTypeMapperVtbl;
struct IStdMarshalInfoVtbl;
struct ISyncMgrSynchronize;
struct ITransactionOptions;
struct ITravelLogEntryVtbl;
struct IUPnPDeviceProvider;
struct IURLSearchHook2Vtbl;
struct IUrlHistoryStg2Vtbl;
struct IUrlTrackingStgVtbl;
struct IVBSAXXMLFilterVtbl;
struct IVBSAXXMLReaderVtbl;
struct IVoIPCallRecordVtbl;
struct IWebViewFolderIcon2;
struct IWebViewFolderIcon3;
struct IWindowForBindingUI;
struct IXMLDOMCDATASection;
struct IXMLDOMDocumentType;
struct IXMLDOMDocumentVtbl;
struct IXMLDOMNamedNodeMap;
struct IXMLDOMNodeListVtbl;
struct IXMLDOMNotationVtbl;
struct IXMLHTTPRequestVtbl;
struct IXMLNodeFactoryVtbl;
struct NDIS_BPC_DISCONNECT;
struct NDIS_BPC_LAST_ERROR;
struct OLEDBSimpleProvider;
struct ShellDispatchInproc;
struct TIMEMotionAnimation;
struct WINTRUST_BLOB_INFO_;
struct WINTRUST_CERT_INFO_;
struct WINTRUST_FILE_INFO_;
struct WINTRUST_SGNR_INFO_;
struct WebCheckOfflineSync;
struct _ACCESS_ALLOWED_ACE;
struct _ACTRL_ACCESS_INFOA;
struct _ACTRL_ACCESS_INFOW;
struct _AM_DVDCOPY_CHLGKEY;
struct _AM_DVDCOPY_DISCKEY;
struct _BTH_REMOTE_VERSION;
struct _CARD_SOCKET_HANDLE;
struct _CEL_MONTECARLO_HIT;
struct _CERT_ALT_NAME_INFO;
struct _CERT_CHAIN_CONTEXT;
struct _CERT_CHAIN_ELEMENT;
struct _CERT_DH_PARAMETERS;
struct _CERT_POLICIES_INFO;
union _CLIENT_CALL_RETURN;
struct _CMC_TAGGED_REQUEST;
struct _COMM_FAULT_OFFSETS;
struct _CRYPT_CONTENT_INFO;
struct _CRYPT_CSP_PROVIDER;
struct _CRYPT_PROVUI_FUNCS;
struct _DDVIDEOPORTCONNECT;
struct _DEVICE_DESCRIPTION;
struct _DISPATCHER_CONTEXT;
struct _DOT11_8021X_FILTER;
struct _DOT11_ANTENNA_LIST;
struct _DOT11_IV48_COUNTER;
struct _DOT11_JOIN_REQUEST;
struct _DOT11_SCAN_REQUEST;
struct _DOT11_WEP_KEY_DATA;
struct _ERROR_NOTIFICATION;
struct _EXCEPTION_POINTERS;
struct _FIREWALL_LOG_ENTRY;
struct _HSE_URL_MAPEX_INFO;
struct _HTMLPtrDispInfoRec;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64;
struct _MALLOC_FREE_STRUCT;
struct _MANAGEDAPPLICATION;
struct _MIB_IPFORWARDTABLE;
struct _MIB_IPMCAST_GLOBAL;
struct _MIDL_FORMAT_STRING;
struct _NDIS_CO_LINK_SPEED;
struct _NDIS_VAR_DATA_DESC;
struct _NDIS_WLAN_BSSID_EX;
struct _NETWORK_ADDRESS_IP;
struct _POWER_CAPABILITIES;
struct _POWER_RELATIONSHIP;
struct _PROXY_HTTP_REQUEST;
struct _RAS_AUTH_ATTRIBUTE;
struct _RPC_BINDING_VECTOR;
struct _SEC_OBJECT_ELEMENT;
struct _SHNOTIFICATIONDATA;
struct _SID_AND_ATTRIBUTES;
struct _SLargeIntegerArray;
struct _SPC_SP_AGENCY_INFO;
struct _SPC_STATEMENT_TYPE;
struct _SSLAUTHREQUESTHOOK;
struct _SSLKEYEXCHANGEHOOK;
struct _TABLE_NOTIFICATION;
struct _TOKEN_DEFAULT_DACL;
union _TRIGGER_TYPE_UNION;
struct _USB_DEVICE_REQUEST;
struct _USB_HUB_DESCRIPTOR;
struct _WAIT_CONTEXT_BLOCK;
struct _WINDOWS_DEVICELIST;
struct _WSANAMESPACE_INFOA;
struct _WSANAMESPACE_INFOW;
struct __CEL_CRITSEC_ENTER;
struct __CEL_CRITSEC_LEAVE;
struct __CEL_MUTEX_RELEASE;
struct __CEL_PROCESS_CLOSE;
struct __CEL_SYSTEM_INVERT;
struct __CEL_THREAD_CREATE;
struct __CEL_THREAD_DELETE;
struct __CEL_THREAD_RESUME;
struct __CEL_THREAD_SWITCH;
struct __CEL_VIRTUAL_ALLOC;
struct _avitcdlindex_entry;
struct _remoteMETAFILEPICT;
struct _structDVD_POS_CODE;
struct _userFLAG_STGMEDIUM;
struct adpcmwaveformat_tag;
struct lineaddresscaps_tag;
struct linecountrylist_tag;
struct lineextensionid_tag;
struct lineforwardlist_tag;
struct linemonitortone_tag;
struct midiproptimediv_tag;
struct midistrmbuffver_tag;
struct mpeg1waveformat_tag;
struct phonebuttoninfo_tag;
struct tACMDRVSTREAMHEADER;
struct tagBITMAPCOREHEADER;
struct tagBITMAPINFOHEADER;
struct tagBUCKETCATEGORIZE;
struct tagDBCONSTRAINTDESC;
struct tagDVD_DECODER_CAPS;
struct tagDXNATIVETYPEINFO;
struct tagDXOVERSAMPLEDESC;
struct tagDXPACKEDRECTDESC;
struct tagFILECHANGENOTIFY;
struct tagHTTPMAILLOCATION;
struct tagHTTPMAILPROPFIND;
struct tagHTTPMAILRESPONSE;
struct tagIMEMENUITEMINFOA;
struct tagIMEMENUITEMINFOW;
struct tagNMCUSTOMDRAWINFO;
struct tagNMDATETIMECHANGE;
struct tagOBJECTDESCRIPTOR;
struct tagRemHMETAFILEPICT;
struct tagVIDEOINFOHEADER2;
struct tagVS_FIXEDFILEINFO;
struct tag_s_RIFFWAVE_INST;
struct tag_s_RIFFWAVE_inst;
struct wavefilter_echo_tag;
struct AMMultiMediaStream;
struct CRYPTCATATTRIBUTE_;
struct DWebBrowserEvents2;
struct DXTransformFactory;
struct DispHTMLDivElement;
struct DispHTMLIFrameVtbl;
struct DispHTMLMapElement;
struct DispHTMLScreenVtbl;
struct DispHTMLStyleSheet;
struct EnumWSDLOperations;
struct FolderItemVerbVtbl;
struct HTCDefaultDispatch;
struct HTMLAreaEventsVtbl;
struct HTMLCommentElement;
struct HTMLDocumentEvents;
struct HTMLElementEvents2;
struct HTMLGenericElement;
struct HTMLImgEvents2Vtbl;
struct HTMLIsIndexElement;
struct HTMLMapEvents2Vtbl;
struct HTMLMarqueeElement;
struct HTMLStyleSheetPage;
struct HTMLStyleSheetRule;
struct HTMLUnknownElement;
struct IAMChannelInfoVtbl;
struct IAMClockAdjustVtbl;
struct IAMDirectSoundVtbl;
struct IAMExtendedSeeking;
struct IAMFilterMiscFlags;
struct IAMMediaStreamVtbl;
struct IAMMediaTypeSample;
struct IAMMediaTypeStream;
struct IAMPhysicalPinInfo;
struct IAMResourceControl;
struct IAMTimecodeDisplay;
struct IAccessControlVtbl;
struct IAccessibleHandler;
struct IActiveScriptError;
struct IActiveScriptParse;
struct IActiveScriptStats;
struct IAnimationComposer;
struct IAnimationFragment;
struct IAnimationRootVtbl;
struct IAsyncMHandlerVtbl;
struct IAudioStreamSample;
struct IAutoComplete2Vtbl;
struct IBufferingTimeVtbl;
struct ICSSFilterDispatch;
struct ICSSFilterSiteVtbl;
struct IClassFactory2Vtbl;
struct IColumnsRowsetVtbl;
struct ICommandProperties;
struct ICreateTypeLibVtbl;
struct IDBDataSourceAdmin;
struct IDMOQualityControl;
struct IDVDDataSearchInfo;
struct IDXARGBReadPtrVtbl;
struct IDXARGBSurfaceInit;
struct IDXLookupTableVtbl;
struct IDXSurfaceInitVtbl;
struct IDXSurfaceModifier;
struct IDXSurfacePickVtbl;
struct IDXTClipOriginVtbl;
struct IDXTFilterBehavior;
struct IDXTaskManagerVtbl;
struct IDebugPropertyVtbl;
struct IDialEventSinkVtbl;
struct IDirect3DResource8;
struct IDirectControlView;
struct IDirectControlVtbl;
struct IDirectDrawClipper;
struct IDirectDrawPalette;
struct IDirectDrawSurface;
struct IDirectSoundBuffer;
struct IDirectSoundNotify;
struct IDistributorNotify;
struct IDocHostShowUIVtbl;
struct IDocHostUIHandler2;
struct IDockingWindowSite;
struct IDockingWindowVtbl;
struct IEditDebugServices;
struct IElementBehaviorUI;
struct IEmptyVolumeCache2;
struct IEnumCifComponents;
struct IEnumCifGroupsVtbl;
struct IEnumDVD_TEXT_ITEM;
struct IEnumFORMATETCVtbl;
struct IEnumInstalledApps;
struct IEnumNetConnection;
struct IEnumPublishedApps;
struct IEnumRegisterWordA;
struct IEnumRegisterWordW;
struct IEnumScheduleGroup;
struct IEnumSyncItemsVtbl;
struct IEnumSyncSchedules;
struct IEnumWSDLPortsVtbl;
struct IEnumWorkItemsVtbl;
struct IExtensionServices;
struct IExtractImage2Vtbl;
struct IFillLockBytesVtbl;
struct IFolderAndItemVtbl;
struct IFullScreenVideoEx;
struct IGetDataSourceVtbl;
struct IHTCAttachBehavior;
struct IHTCMethodBehavior;
struct IHTMLAnchorElement;
struct IHTMLBRElementVtbl;
struct IHTMLBlockElement2;
struct IHTMLButtonElement;
struct IHTMLChangeLogVtbl;
struct IHTMLComputedStyle;
struct IHTMLControlRange2;
struct IHTMLCurrentStyle2;
struct IHTMLCurrentStyle3;
struct IHTMLDDElementVtbl;
struct IHTMLDOMAttribute2;
struct IHTMLDTElementVtbl;
struct IHTMLDocument2Vtbl;
struct IHTMLDocument3Vtbl;
struct IHTMLDocument4Vtbl;
struct IHTMLDocument5Vtbl;
struct IHTMLEditHost2Vtbl;
struct IHTMLEditServices2;
struct IHTMLElementRender;
struct IHTMLEventObj2Vtbl;
struct IHTMLEventObj3Vtbl;
struct IHTMLEventObj4Vtbl;
struct IHTMLFilterPainter;
struct IHTMLFrameBaseVtbl;
struct IHTMLFrameElement2;
struct IHTMLHRElementVtbl;
struct IHTMLHeaderElement;
struct IHTMLIFrameElement;
struct IHTMLInputElement2;
struct IHTMLLIElementVtbl;
struct IHTMLLabelElement2;
struct IHTMLLegendElement;
struct IHTMLNamespaceVtbl;
struct IHTMLNextIdElement;
struct IHTMLNoShowElement;
struct IHTMLObjectElement;
struct IHTMLOptionElement;
struct IHTMLOptionsHolder;
struct IHTMLPaintSiteVtbl;
struct IHTMLPersistDataOM;
struct IHTMLPhraseElement;
struct IHTMLPrivateWindow;
struct IHTMLRuleStyleVtbl;
struct IHTMLScriptElement;
struct IHTMLSelectElement;
struct IHTMLStyleFontFace;
struct IHTMLTableCellVtbl;
struct IHTMLTableCol2Vtbl;
struct IHTMLTableRow2Vtbl;
struct IHTMLTableRow3Vtbl;
struct IHTMLTableSection2;
struct IHTMLTableSection3;
struct IHTMLTextContainer;
struct IHTMLUrnCollection;
struct IHTTPMailTransport;
struct IHeaderHandlerVtbl;
struct IHtmlDlgSafeHelper;
struct IHttpNegotiateVtbl;
struct IIMAPTransportVtbl;
struct IImageDecodeFilter;
struct IImnAccountManager;
struct IInputMethodExVtbl;
struct IInstallEngineVtbl;
struct IInternetCacheVtbl;
struct IInternetTransport;
struct IKsPropertySetVtbl;
struct ILayoutStorageVtbl;
struct IMAPIContainerVtbl;
struct IMDRangeRowsetVtbl;
struct IMLangFontLinkVtbl;
struct IMarkupPointerVtbl;
struct IMediaParamsRecord;
struct IMediaPositionVtbl;
struct IMediaStreamFilter;
struct IMediaTypeInfoVtbl;
struct IMemAllocator2Vtbl;
struct IMessageFilterVtbl;
struct IMessengerIMWindow;
struct IMimeAllocatorVtbl;
struct IMimeInternational;
struct IMonikerHelperVtbl;
struct IMsgrIMSessionVtbl;
struct IMultiLanguageVtbl;
struct INNTPTransportVtbl;
struct INetCfgBindingPath;
struct INetConnectionVtbl;
struct INewMenuItemServer;
struct INotifyReplicaVtbl;
struct IOleClientSiteVtbl;
struct IOleParentUndoUnit;
struct IOverlayNotifyVtbl;
struct IPOP3TransportVtbl;
struct IParserSessionVtbl;
struct IPersistFolderVtbl;
struct IPersistIDListVtbl;
struct IPersistMemoryVtbl;
struct IPersistQueryAVtbl;
struct IPersistQueryWVtbl;
struct IPersistStreamInit;
struct IPersistStreamVtbl;
struct IPropertyBagExVtbl;
struct IPropertyContainer;
struct IPropertyPage2Vtbl;
struct IProvideClassInfo2;
struct IProviderAdminVtbl;
struct IQueryAssociations;
struct IQuickActivateVtbl;
struct IRTCBuddyEventVtbl;
struct IRTCBuddyGroupVtbl;
struct IRTCClientPresence;
struct IRTCCollectionVtbl;
struct IRTCEnumGroupsVtbl;
struct IRTCIntensityEvent;
struct IRTCMediaEventVtbl;
struct IRTCMessagingEvent;
struct IRTCPresenceDevice;
struct IRTCUserSearchVtbl;
struct IRegFilterInfoVtbl;
struct IRequestDictionary;
struct IRowPositionChange;
struct IRowsetExactScroll;
struct IRowsetNewRowAfter;
struct IRowsetQueryStatus;
struct IRowsetRefreshVtbl;
struct IRowsetResynchVtbl;
struct IRowsetWatchNotify;
struct IRowsetWatchRegion;
struct IRpcChannelBuffer2;
struct IRpcStubBufferVtbl;
struct ISAXAttributesVtbl;
struct ISAXContentHandler;
struct ISAXDTDHandlerVtbl;
struct ISAXEntityResolver;
struct ISAXLexicalHandler;
struct ISMTPTransportVtbl;
struct ISOAPIsapiResponse;
struct IScheduleGroupVtbl;
struct IScheduledWorkItem;
struct ISearchAssistantOC;
struct ISearchContextVtbl;
struct ISecureUrlHostVtbl;
struct ISelectionServices;
struct ISessionProperties;
struct IShellChangeNotify;
struct IShellDispatchVtbl;
struct IShellExecuteHookA;
struct IShellExecuteHookW;
struct IShellLinkDataList;
struct IShellLinkDualVtbl;
struct IShellPropSheetExt;
struct IShellUIHelperVtbl;
struct ISoapConnectorVtbl;
struct ISourcesRowsetVtbl;
struct IStorageDescriptor;
struct IStreamBuilderVtbl;
struct ITableCreationVtbl;
struct ITargetNotify2Vtbl;
struct ITaskSchedulerVtbl;
struct ITransProtocolSink;
struct ITransactionCloner;
struct ITransactionObject;
struct ITransportCallback;
struct ITrusteeGroupAdmin;
struct IUPnPDeviceControl;
struct IUPnPEventSinkVtbl;
struct IUPnPRegistrarVtbl;
struct IURLSearchHookVtbl;
struct IUrlHistoryStgVtbl;
struct IUserIdentity2Vtbl;
struct IUtilityButtonVtbl;
struct IVBSAXErrorHandler;
struct IVariantChangeType;
struct IVersionVectorVtbl;
struct IVoIPCallLogDBEnum;
struct IVoIPCallLogDBVtbl;
struct IWSDLOperationVtbl;
struct IWebBrowserAppVtbl;
struct IWebViewFolderIcon;
struct IXMLDOMCommentVtbl;
struct IXMLDOMElementVtbl;
struct IXMLNodeSourceVtbl;
struct MSGQUEUEOPTIONS_OS;
struct NLED_SETTINGS_INFO;
struct NLED_SUPPORTS_INFO;
struct OldHTMLFormElement;
struct ShellBrowserWindow;
struct TIMEColorAnimation;
struct _ACCESS_DENIED_ACE;
struct _AM_DVDCOPY_BUSKEY;
struct _AM_PROPERTY_SPHLI;
struct _AM_PROPERTY_SPPAL;
struct _BTHNS_INQUIRYBLOB;
struct _BTH_LOCAL_VERSION;
struct _CARD_WINDOW_PARMS;
struct _CERT_REQUEST_INFO;
struct _CERT_SIMPLE_CHAIN;
struct _CERT_TEMPLATE_EXT;
struct _CERT_TRUST_STATUS;
struct _CMC_RESPONSE_INFO;
struct _CMSG_RC2_AUX_INFO;
struct _CMSG_RC4_AUX_INFO;
struct _CONNECTDLGSTRUCTA;
struct _CONNECTDLGSTRUCTW;
struct _CO_TAPI_LINE_CAPS;
struct _CRYPT_CREDENTIALS;
struct _CRYPT_DECODE_PARA;
struct _CRYPT_ENCODE_PARA;
struct _CRYPT_OBJID_TABLE;
struct _CRYPT_PROVUI_DATA;
struct _D3DRECTPATCH_INFO;
struct _DDKWINDOWINFO_tag;
struct _DDVIDEOPORTSTATUS;
struct _DEV_BROADCAST_HDR;
struct _DEV_BROADCAST_NET;
struct _DEV_BROADCAST_OEM;
struct _DOT11_CIPHER_ALGO;
struct _DOT11_CIPHER_LIST;
struct _DOT11_WEP_OFFLOAD;
struct _DSBPOSITIONNOTIFY;
struct _EXPLICIT_ACCESS_A;
struct _EXPLICIT_ACCESS_W;
struct _FLAGGED_BYTE_BLOB;
struct _FLAGGED_WORD_BLOB;
struct _GEN_GET_TIME_CAPS;
struct _GRADIENT_TRIANGLE;
struct _HTML_PAINTER_INFO;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_ROM_HEADERS;
struct _INTERFACE_INFO_EX;
struct _INTERNET_BUFFERSA;
struct _INTERNET_BUFFERSW;
struct _IO_STACK_LOCATION;
struct _IP_ADAPTER_PREFIX;
struct _IP_INTERFACE_INFO;
struct _ISA_PNP_RESOURCES;
struct _LINE_ADDRESS_CAPS;
struct _LINE_EXTENSION_ID;
struct _MIB_IPMCAST_SCOPE;
struct _MIDL_SERVER_INFO_;
struct _MIDL_STUB_MESSAGE;
struct _MediaPlayerEvents;
struct _NDISUIO_QUERY_OID;
struct _OFFLOAD_ALGO_INFO;
struct _PCI_COMMON_CONFIG;
struct _PST_ACCESSRULESET;
struct _REMOTE_NAME_INFOA;
struct _REMOTE_NAME_INFOW;
struct _SExistRestriction;
struct _SINGLE_LIST_ENTRY;
struct _SPC_PE_IMAGE_DATA;
struct _SPropProblemArray;
struct _SSLCLIENTAUTHOPTS;
struct _SSLCONNECTIONINFO;
struct _SdpAttributeRange;
struct _TAPE_GET_POSITION;
struct _TAPE_SET_POSITION;
struct _USB_CONFIGURATION;
struct _WINDOWS_IAS_QUERY;
struct _WSAPROTOCOL_INFOA;
struct _WSAPROTOCOL_INFOW;
struct __CEL_EVENT_CREATE;
struct __CEL_EVENT_DELETE;
struct __CEL_HEAP_DESTROY;
struct __CEL_HEAP_REALLOC;
struct __CEL_MUTEX_CREATE;
struct __CEL_MUTEX_DELETE;
struct __CEL_THREAD_CLOSE;
struct __CEL_VIRTUAL_COPY;
struct __CEL_VIRTUAL_FREE;
struct _avistdindex_entry;
struct _tagWAPGATEWAYINFO;
struct _userHMETAFILEPICT;
struct aptxwaveformat_tag;
struct linecallparams_tag;
struct linecallstatus_tag;
struct linedialparams_tag;
struct tMIXERLINECONTROLS;
struct tagAPPEND_PROGRESS;
struct tagAnalogVideoInfo;
struct tagCOLORADJUSTMENT;
struct tagCOMPOSITIONFORM;
struct tagDATABLOCKHEADER;
struct tagDBCONTENTVECTOR;
struct tagDBPARAMBINDINFO;
struct tagDBPROBABILISTIC;
struct tagDBROWWATCHRANGE;
struct tagDELETITEMSTRUCT;
struct tagFETCH_BODY_PART;
struct tagHH_SET_INFOTYPE;
struct tagHTTPCONTACTINFO;
struct tagHTTPMAILGETPROP;
struct tagHTTPMEMBERERROR;
struct tagIMECHARPOSITION;
struct tagInvalidPassType;
struct tagNODERESTRICTION;
struct tagRANGECATEGORIZE;
struct tagRECONVERTSTRING;
struct tagRemHENHMETAFILE;
struct tagTIMECODE_SAMPLE;
struct tagTVINSERTSTRUCTA;
struct tagTVINSERTSTRUCTW;
struct tagVIDEOINFOHEADER;
struct tagVersionedStream;
struct CDownloadBehavior;
struct DMsgrOEEventsVtbl;
struct DMsgrObjectEvents;
struct DWebBrowserEvents;
struct DXRASTERPOINTINFO;
struct DXSurfaceModifier;
struct DXTFilterBehavior;
struct DispCEventObjVtbl;
struct DispHTMLBRElement;
struct DispHTMLDDElement;
struct DispHTMLDTElement;
struct DispHTMLEmbedVtbl;
struct DispHTMLFrameBase;
struct DispHTMLHRElement;
struct DispHTMLLIElement;
struct DispHTMLPopupVtbl;
struct DispHTMLRuleStyle;
struct DispHTMLStyleVtbl;
struct DispHTMLTableCell;
struct DispHTMLTableVtbl;
struct EnumInstalledApps;
struct HTCAttachBehavior;
struct HTCMethodBehavior;
struct HTMLAnchorElement;
struct HTMLAnchorEvents2;
struct HTMLButtonElement;
struct HTMLElementEvents;
struct HTMLHeaderElement;
struct HTMLImgEventsVtbl;
struct HTMLLegendElement;
struct HTMLMapEventsVtbl;
struct HTMLNextIdElement;
struct HTMLNoShowElement;
struct HTMLObjectElement;
struct HTMLOptionElement;
struct HTMLPersistEvents;
struct HTMLPhraseElement;
struct HTMLScriptElement;
struct HTMLScriptEvents2;
struct HTMLSelectElement;
struct HTMLStyleFontFace;
struct HTMLUrnCollection;
struct HTMLWindowEvents2;
struct HtmlDlgSafeHelper;
struct IAMCollectionVtbl;
struct IAMMediaContentEx;
struct IAMNetShowExProps;
struct IAMNetShowPreroll;
struct IAMTimecodeReader;
struct IActiveIMMAppVtbl;
struct IActiveIMMIMEVtbl;
struct IActiveMovie2Vtbl;
struct IActiveMovie3Vtbl;
struct IActiveScriptSite;
struct IActiveScriptVtbl;
struct IAdminIndexServer;
struct IAdviseSinkExVtbl;
struct IAppPublisherVtbl;
struct IAudioMediaStream;
struct IAuditControlVtbl;
struct IAuthenticateVtbl;
struct IAutoCompleteVtbl;
struct IBindEventHandler;
struct IBindProtocolVtbl;
struct IBindResourceVtbl;
struct IBlockFormatsVtbl;
struct ICifComponentVtbl;
struct IClassFactoryVtbl;
struct ICodeStoreDBEntry;
struct IColumnMapperVtbl;
struct IColumnsInfo2Vtbl;
struct ICommonQueryAVtbl;
struct ICommonQueryWVtbl;
struct IConfigAviMuxVtbl;
struct IContextMenu2Vtbl;
struct IContextMenu3Vtbl;
struct IContinueCallback;
struct IDBInitializeVtbl;
struct IDBPropertiesVtbl;
struct IDMOWrapperFilter;
struct IDVDHighlightInfo;
struct IDVDNavigatorSink;
struct IDVDUserOperation;
struct IDXBaseObjectVtbl;
struct IDXRasterizerVtbl;
struct IDXRawSurfaceVtbl;
struct IDXSurfaceFactory;
struct IDataAdviseHolder;
struct IDialBrandingVtbl;
struct IDifferencingVtbl;
struct IDirect3DSurface8;
struct IDirect3DTexture8;
struct IDirectShowStream;
struct IDithererImplVtbl;
struct IDocHostUIHandler;
struct IDownloadBehavior;
struct IDownloadSiteVtbl;
struct IDragSourceHelper;
struct IDropTargetHelper;
struct IElementNamespace;
struct IEmptyVolumeCache;
struct IEnumACStringVtbl;
struct IEnumCATEGORYINFO;
struct IEnumCifModesVtbl;
struct IEnumCodePageVtbl;
struct IEnumInputContext;
struct IEnumJavaFileVtbl;
struct IEnumNotification;
struct IEnumOleUndoUnits;
struct IEnumSTATDATAVtbl;
struct IEnumSubscription;
struct IEnumUserIdentity;
struct IErrorRecordsVtbl;
struct IExtractIconAVtbl;
struct IExtractIconWVtbl;
struct IExtractImageVtbl;
struct IFileSourceFilter;
struct IFilterGraph2Vtbl;
struct IFilterMapperVtbl;
struct IFilterStatusVtbl;
struct IFolderViewOCVtbl;
struct IGetSourceRowVtbl;
struct IGraphBuilderVtbl;
struct IGraphVersionVtbl;
struct IHTCEventBehavior;
struct IHTMLAppBehavior2;
struct IHTMLAppBehavior3;
struct IHTMLBlockElement;
struct IHTMLBodyElement2;
struct IHTMLControlRange;
struct IHTMLCurrentStyle;
struct IHTMLDListElement;
struct IHTMLDOMAttribute;
struct IHTMLDOMNode2Vtbl;
struct IHTMLDOMTextNode2;
struct IHTMLDataTransfer;
struct IHTMLDocumentVtbl;
struct IHTMLEditDesigner;
struct IHTMLEditHostVtbl;
struct IHTMLEditServices;
struct IHTMLElement2Vtbl;
struct IHTMLElement3Vtbl;
struct IHTMLElement4Vtbl;
struct IHTMLEmbedElement;
struct IHTMLEventObjVtbl;
struct IHTMLFormElement2;
struct IHTMLFormElement3;
struct IHTMLFrameElement;
struct IHTMLInputElement;
struct IHTMLLabelElement;
struct IHTMLLinkElement2;
struct IHTMLLinkElement3;
struct IHTMLListElement2;
struct IHTMLLocationVtbl;
struct IHTMLMetaElement2;
struct IHTMLModelessInit;
struct IHTMLOListElement;
struct IHTMLParamElement;
struct IHTMLSpanFlowVtbl;
struct IHTMLStyleElement;
struct IHTMLTableCaption;
struct IHTMLTableColVtbl;
struct IHTMLTableRowVtbl;
struct IHTMLTableSection;
struct IHTMLTitleElement;
struct IHTMLTxtRangeVtbl;
struct IHTMLUListElement;
struct IHTTPMailCallback;
struct IHeaderCollection;
struct IHeaderFooterVtbl;
struct IHighlightSegment;
struct IHostBehaviorInit;
struct IHostDialogHelper;
struct IHttpSecurityVtbl;
struct IIMAPCallbackVtbl;
struct IIMCallbackExVtbl;
struct IImnAdviseAccount;
struct IInputMethod2Vtbl;
struct IInstalledAppVtbl;
struct IIntelliFormsVtbl;
struct IInternetBindInfo;
struct IInternetPriority;
struct IInternetProtocol;
struct IMAPIProgressVtbl;
struct IMXAttributesVtbl;
struct IMarkupContainer2;
struct IMediaControlVtbl;
struct IMediaEventExVtbl;
struct IMediaPlayer2Vtbl;
struct IMediaPropertyBag;
struct IMediaSample2Vtbl;
struct IMediaSeekingVtbl;
struct IMemAllocatorVtbl;
struct IMessengerAppVtbl;
struct IMimeAddressTable;
struct IMimeMessageParts;
struct IMimeSecurityVtbl;
struct IMpegAudioDecoder;
struct IMsgrServicesVtbl;
struct IMultiMediaStream;
struct INNTPCallbackVtbl;
struct INetCfgClassSetup;
struct INewShortcutHookA;
struct INewShortcutHookW;
struct INotificationSink;
struct INotificationVtbl;
struct IObjectSafetyVtbl;
struct IOleCommandTarget;
struct IOleContainerVtbl;
struct IOleInPlaceObject;
struct IOleInPlaceSiteEx;
struct IOleItemContainer;
struct IOpsProfileSimple;
struct IOverlappedStream;
struct IPOP3CallbackVtbl;
struct IParentRowsetVtbl;
struct IParseDisplayName;
struct IParserVerifyVtbl;
struct IPropFindResponse;
struct IPropPatchRequest;
struct IPropertyBag2Vtbl;
struct IPropertyPageSite;
struct IPropertyPageVtbl;
struct IProvideClassInfo;
struct IPublishedAppVtbl;
struct IQueueCommandVtbl;
struct IRASTransportVtbl;
struct IRTCInfoEventVtbl;
struct IRTCProfileEvent2;
struct IRTCReInviteEvent;
struct IRTCWatcherEvent2;
struct IRecalcEngineVtbl;
struct IRegisterProvider;
struct IResolveShellLink;
struct IResourceConsumer;
struct IRowsetAsynchVtbl;
struct IRowsetChangeVtbl;
struct IRowsetLocateVtbl;
struct IRowsetNextRowset;
struct IRowsetNotifyVtbl;
struct IRowsetScrollVtbl;
struct IRowsetUpdateVtbl;
struct IRpcChannelBuffer;
struct IRunnableTaskVtbl;
struct ISAXXMLFilterVtbl;
struct ISAXXMLReaderVtbl;
struct ISMTPCallbackVtbl;
struct ISQLErrorInfoVtbl;
struct IScopedOperations;
struct ISdpNodeContainer;
struct ISearchCommandExt;
struct ISecurityInfoVtbl;
struct ISelectionObject2;
struct ISequentialStream;
struct IShellBrowserVtbl;
struct IShellDetailsVtbl;
struct IShellExtInitVtbl;
struct IShellFolder2Vtbl;
struct IShellIconOverlay;
struct IShellMonikerVtbl;
struct IShellWindowsVtbl;
struct IStreamSampleVtbl;
struct ISubscriptionItem;
struct ISubscriptionMgr2;
struct ISupportErrorInfo;
struct ISyncMgrEnumItems;
struct ISyncScheduleVtbl;
struct ITIMEMediaElement;
struct ITIMEPlayItemVtbl;
struct ITIMEPlayListVtbl;
struct ITargetFrame2Vtbl;
struct ITargetNotifyVtbl;
struct IThumbnailCapture;
struct ITimerServiceVtbl;
struct ITransaction2Vtbl;
struct ITransactionLocal;
struct ITravelLogClient2;
struct ITravelLogStgVtbl;
struct ITridentEventSink;
struct ITrusteeAdminVtbl;
struct ITypeChangeEvents;
struct IUPnPDeviceFinder;
struct IUPnPServicesVtbl;
struct IUrlHistoryNotify;
struct IUserIdentityVtbl;
struct IVBSAXDeclHandler;
struct IVBSAXLocatorVtbl;
struct IViewObjectExVtbl;
struct IVirusScannerVtbl;
struct IVoIPCallerInfoDB;
struct IVoIPMediaMgrVtbl;
struct IXMLAttributeVtbl;
struct IXMLDOMEntityVtbl;
struct IXMLDOMParseError;
struct IXMLDocument2Vtbl;
struct IXSLProcessorVtbl;
struct RequestDictionary;
struct STORE_INFORMATION;
union SdpQueryUuidUnion;
struct SearchAssistantOC;
struct ShellFolderViewOC;
struct VoIPCallLogRecord;
struct VoIPMgrParameters;
struct WebViewFolderIcon;
struct _ACTRL_OVERLAPPED;
struct _CARD_CONFIG_INFO;
struct _CARD_EVENT_PARMS;
struct _CARD_TUPLE_PARMS;
struct _CERT_KEY_CONTEXT;
struct _CERT_POLICY_INFO;
struct _CERT_USAGE_MATCH;
struct _CMSG_SIGNER_INFO;
struct _CMSG_STREAM_INFO;
struct _CRYPT_ATTRIBUTES;
struct _CRYPT_BLOB_ARRAY;
struct _D3DRASTER_STATUS;
struct _D3DTRIPATCH_INFO;
struct _DDOPTSURFACEDESC;
struct _DEVICEWINDOW_tag;
struct _DEVOBJ_EXTENSION;
struct _DOT11_RSSI_RANGE;
struct _DOT11_UPCALL_TLV;
struct _DOT11_WEP_UPLOAD;
struct _DRIVER_EXTENSION;
struct _EVENTSFORLOGFILE;
struct _EXCEPTION_RECORD;
struct _FAST_IO_DISPATCH;
struct _HSE_VERSION_INFO;
struct _HTML_PAINT_XFORM;
union _IMAGE_AUX_SYMBOL;
struct _IMAGE_DEBUG_MISC;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_LINENUMBER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OS2_HEADER;
struct _IMAGE_RELOCATION;
struct _IMAGE_VXD_HEADER;
struct _INBOX_EVENT_DATA;
struct _KEY_TYPE_SUBTYPE;
struct _LINE_CALL_PARAMS;
struct _LINE_CALL_STATUS;
struct _LINE_DIAL_PARAMS;
struct _MIB_IPFORWARDROW;
struct _MIB_OPAQUE_QUERY;
struct _NDIS_802_11_SSID;
struct _NDIS_802_11_TEST;
struct _NDIS_BPC_DEVICES;
struct _NDIS_TAPI_ACCEPT;
struct _NDIS_TAPI_ANSWER;
struct _NDIS_TAPI_GET_ID;
struct _OBJECT_TYPE_LIST;
struct _PCI_PHYSICAL_LOC;
struct _PROPSHEETHEADERA;
struct _PROPSHEETHEADERW;
struct _PROV_ENUMALGS_EX;
struct _PST_ACCESSCLAUSE;
struct _PST_PROVIDERINFO;
struct _QOS_SHAPING_RATE;
struct _QualityOfService;
struct _RPC_SECURITY_QOS;
struct _RUNTIME_FUNCTION;
struct _SCARD_IO_REQUEST;
struct _SHELLEXECUTEINFO;
struct _SPC_SP_OPUS_INFO;
struct _SSLSIGNATUREHOOK;
struct _SSizeRestriction;
struct _SYSTEM_ALARM_ACE;
struct _SYSTEM_AUDIT_ACE;
struct _ShellAppCategory;
struct _TAPE_WRITE_MARKS;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_STATISTICS;
struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAW;
struct _WSANETWORKEVENTS;
struct _WSAPROTOCOLCHAIN;
struct __CEL_EVENT_CLOSE;
struct __CEL_EVENT_PULSE;
struct __CEL_EVENT_RESET;
struct __CEL_HEAP_CREATE;
struct __CEL_MODULE_FREE;
struct __CEL_MODULE_LOAD;
struct __CEL_MUTEX_CLOSE;
struct __CEL_SEM_RELEASE;
struct __CEL_SYSTEM_PAGE;
struct _avitimecodeindex;
struct _tagHTTPPROXYINFO;
struct _userHENHMETAFILE;
struct _wireSAFEARR_BSTR;
struct ldap_version_info;
struct linecardentry_tag;
struct linedevstatus_tag;
struct midiproptempo_tag;
struct tACMDRIVERDETAILS;
struct tACMDRVSTREAMSIZE;
struct tACMFILTERDETAILS;
struct tACMFORMATDETAILS;
struct tagAccountContext;
struct tagBITMAPCOREINFO;
struct tagCATEGORIZATION;
struct tagCOPYDATASTRUCT;
struct tagCStdStubBuffer;
struct tagDBCOLUMNACCESS;
struct tagDBCONTENTSCOPE;
struct tagDBCONTENTTABLE;
struct tagDRAWITEMSTRUCT;
struct tagDVTARGETDEVICE;
struct tagEXBMINFOHEADER;
struct tagHTTPMEMBERINFO;
struct tagHTTPTARGETLIST;
struct tagJPEGINFOHEADER;
struct tagMPEG1VIDEOINFO;
struct tagMPEG2VIDEOINFO;
struct tagNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW;
struct tagNMLVCUSTOMDRAW;
struct tagNMTTCUSTOMDRAW;
struct tagNMTVCUSTOMDRAW;
struct tagNNTPHEADERRESP;
struct tagNOTRESTRICTION;
struct tagPROCESSENTRY32;
struct tagREBARBANDINFOA;
struct tagREBARBANDINFOW;
struct tagSAFEARRAYBOUND;
struct tagSTATPROPSETSTG;
struct tagWEBPAGEOPTIONS;
struct tagX509CERTRESULT;
struct tag_TRUECOLORINFO;
struct AdminIndexServer;
struct CIEOptionElement;
struct CIESelectElement;
struct CPersistDataPeer;
struct CPersistShortcut;
struct CPersistSnapshot;
struct CPersistUserData;
struct CRITICAL_SECTION;
struct CScriptErrorList;
struct CTemplatePrinter;
struct CoMapMIMEToCLSID;
struct DFConstraintVtbl;
struct DRIVER_VER_INFO_;
struct DWebBridgeEvents;
struct DXRASTERRECTINFO;
struct DXRASTERSCANINFO;
struct DXRAWSURFACEINFO;
struct DXTFilterFactory;
struct DispHTMLBodyVtbl;
struct DispHTMLDefaults;
struct DispHTMLDocument;
struct DispHTMLSpanFlow;
struct DispHTMLTableCol;
struct DispHTMLTableRow;
struct FolderItems2Vtbl;
struct FolderItems3Vtbl;
struct FramesCollection;
struct HTCEventBehavior;
struct HTMLAnchorEvents;
struct HTMLBlockElement;
struct HTMLCurrentStyle;
struct HTMLDListElement;
struct HTMLDOMAttribute;
struct HTMLFrameElement;
struct HTMLFrameSetSite;
struct HTMLInputElement;
struct HTMLLabelElement;
struct HTMLLabelEvents2;
struct HTMLOListElement;
struct HTMLParamElement;
struct HTMLScriptEvents;
struct HTMLStyleElement;
struct HTMLTableCaption;
struct HTMLTableEvents2;
struct HTMLTableSection;
struct HTMLTitleElement;
struct HTMLUListElement;
struct HTMLWindowEvents;
struct HeaderCollection;
struct HostDialogHelper;
struct IABContainerVtbl;
struct IAMDroppedFrames;
struct IAMExtDeviceVtbl;
struct IAMMediaContent2;
struct IAMNetShowConfig;
struct IAMNetworkStatus;
struct IAMStreamControl;
struct IAMovieSetupVtbl;
struct IActiveMovieVtbl;
struct IAdviseSink2Vtbl;
struct IAnchorClickVtbl;
struct IAsyncReaderVtbl;
struct IBasicVideo2Vtbl;
struct IBluetoothDevice;
struct ICatRegisterVtbl;
struct ICatalogFileInfo;
struct IChannelHookVtbl;
struct IChapteredRowset;
struct ICodeInstallVtbl;
struct ICodeStoreDBVtbl;
struct IColumnsInfoVtbl;
struct ICommDlgBrowser2;
struct ICommandCostVtbl;
struct ICommandTextVtbl;
struct ICommandTreeVtbl;
struct ICommandValidate;
struct ICompositeFolder;
struct IConnectionPoint;
struct IContextCallback;
struct IContextMenuVtbl;
struct IConvertTypeVtbl;
struct ICreateErrorInfo;
struct ICreateTypeInfo2;
struct IDATASRCListener;
struct IDBCreateCommand;
struct IDBCreateSession;
struct IDBSchemaCommand;
struct IDShowPluginVtbl;
struct IDVDProgramChain;
struct IDVDTitleSetVtbl;
struct IDXGradient2Vtbl;
struct IDXTBindHostVtbl;
struct IDXTransformVtbl;
struct IDeferredCommand;
struct IDirect3DDevice8;
struct IDirect3DVolume8;
struct IDirectContainer;
struct IDirectDraw2Vtbl;
struct IDirectDraw4Vtbl;
struct IDirectDrawVideo;
struct IDirectSoundVtbl;
struct IDisplayServices;
struct IDocHostShowUICE;
struct IDownloadManager;
struct IDownloadSiteMgr;
struct IDvdControl2Vtbl;
struct IDvdGraphBuilder;
struct IElementBehavior;
struct IEnumConnections;
struct IEnumExtraSearch;
struct IEnumFiltersVtbl;
struct IEnumJavaPackage;
struct IEnumMonikerVtbl;
struct IEnumOLEVERBVtbl;
struct IEnumPStoreItems;
struct IEnumPStoreTypes;
struct IEnumPropertyMap;
struct IEnumRfc1766Vtbl;
struct IEnumSTATPROPBAG;
struct IEnumSTATPROPSTG;
struct IEnumSTATSTGVtbl;
struct IEnumSTATURLVtbl;
struct IEnumSoapMappers;
struct IEnumUnknownVtbl;
struct IEnumVARIANTVtbl;
struct IEnumWSDLService;
struct IErrorLookupVtbl;
struct IFileAsyncIOVtbl;
struct IFileSinkFilter2;
struct IFileViewerAVtbl;
struct IFileViewerWVtbl;
struct IFilterGraphVtbl;
struct IFontCacheNotify;
struct IFullScreenVideo;
struct IHTCDescBehavior;
struct IHTMLAppBehavior;
struct IHTMLAreaElement;
struct IHTMLBGsoundVtbl;
struct IHTMLBaseElement;
struct IHTMLBodyElement;
struct IHTMLDOMNodeVtbl;
struct IHTMLDOMTextNode;
struct IHTMLDXTransform;
struct IHTMLDatabinding;
struct IHTMLDialog2Vtbl;
struct IHTMLDialog3Vtbl;
struct IHTMLDivPosition;
struct IHTMLElementVtbl;
struct IHTMLFontElement;
struct IHTMLFormElement;
struct IHTMLHeadElement;
struct IHTMLHtmlElement;
struct IHTMLImgElement2;
struct IHTMLLinkElement;
struct IHTMLListElement;
struct IHTMLMetaElement;
struct IHTMLPainterVtbl;
struct IHTMLParaElement;
struct IHTMLPersistData;
struct IHTMLRenderStyle;
struct IHTMLScreen2Vtbl;
struct IHTMLSpanElement;
struct IHTMLStyleSheet2;
struct IHTMLTextElement;
struct IHTMLWindow2Vtbl;
struct IHTMLWindow3Vtbl;
struct IHTMLWindow4Vtbl;
struct IHlinkTargetVtbl;
struct IHtmlLoadOptions;
struct IIMCallback2Vtbl;
struct IIMEServicesVtbl;
struct IImnEnumAccounts;
struct IIndexDefinition;
struct IInputMethodVtbl;
struct IInputObjectSite;
struct IInputObjectVtbl;
struct IInternetSession;
struct IJavaPackageVtbl;
struct IMAPIControlVtbl;
struct IMLangStringAStr;
struct IMLangStringBufA;
struct IMLangStringBufW;
struct IMLangStringVtbl;
struct IMLangStringWStr;
struct IMXReaderControl;
struct IMarkupContainer;
struct IMarkupServices2;
struct IMarkupTextFrags;
struct IMarqueeInfoVtbl;
struct IMediaBindStream;
struct IMediaBufferVtbl;
struct IMediaFilterVtbl;
struct IMediaHolderVtbl;
struct IMediaObjectVtbl;
struct IMediaParamsVtbl;
struct IMediaPlayerVtbl;
struct IMediaSampleVtbl;
struct IMediaStreamVtbl;
struct IMemInputPinVtbl;
struct IMimeEditTagVtbl;
struct IMimeHeaderTable;
struct IMimeMessageTree;
struct IMimeMessageVtbl;
struct IMimeObjResolver;
struct IMimePropertySet;
struct IMimeWebDocument;
struct IMixerPinConfig2;
struct IMonikerPropVtbl;
struct IMsgrServiceVtbl;
struct IMsgrUsersOEVtbl;
struct IMultipleResults;
struct INetCfgClassVtbl;
struct INetCfgComponent;
struct INotificationMgr;
struct IObexServiceVtbl;
struct IOleAdviseHolder;
struct IOleCacheControl;
struct IOleDocumentSite;
struct IOleDocumentView;
struct IOleDocumentVtbl;
struct IOleInPlaceFrame;
struct IOleUndoUnitVtbl;
struct IOmNavigatorVtbl;
struct IOptionArrayVtbl;
struct IPSFactoryBuffer;
struct IPeerFactoryVtbl;
struct IPersistFileVtbl;
struct IPersistMimeVtbl;
struct IPictureDispVtbl;
struct IPointerInactive;
struct IPrivacyServices;
struct IPropFindRequest;
struct IPropertyBagEnum;
struct IPropertyBagVtbl;
struct IPropertyMapVtbl;
struct IPropertyStorage;
struct IProvideTaskPage;
struct IRASCallbackVtbl;
struct IRTCEnumProfiles;
struct IRTCEnumWatchers;
struct IRTCProfile2Vtbl;
struct IRTCProfileEvent;
struct IRTCRoamingEvent;
struct IRTCSession2Vtbl;
struct IRTCWatcher2Vtbl;
struct IRTCWatcherEvent;
struct IRadioButtonVtbl;
struct IRadioPlayerVtbl;
struct IRadioServerVtbl;
struct IRecalcHostDebug;
struct IReferenceClock2;
struct IResourceManager;
struct IRootStorageVtbl;
struct IRowPositionVtbl;
struct IRowSchemaChange;
struct IRowsetIndexVtbl;
struct ISAXErrorHandler;
struct IScriptEntryVtbl;
struct IScriptErrorList;
struct IScriptScriptlet;
struct ISearchQueryHits;
struct ISeekingPassThru;
struct ISegmentListVtbl;
struct ISensNetworkVtbl;
struct IServiceProvider;
struct IShellAppManager;
struct IShellFolderVtbl;
struct IShellNetCrawler;
struct ISimpleFrameSite;
struct ISniffStreamVtbl;
struct ISoapTypeMapper2;
struct ISoftDistExtVtbl;
struct ISubscriptionMgr;
struct ISyncMgrRegister;
struct ISyncScheduleMgr;
struct ITIMEBodyElement;
struct ITIMEElementVtbl;
struct ITIMEFactoryVtbl;
struct ITIMEMediaPlayer;
struct ITableDefinition;
struct ITableRenameVtbl;
struct ITargetContainer;
struct ITargetEmbedding;
struct ITargetFramePriv;
struct ITargetFrameVtbl;
struct ITaskTriggerVtbl;
struct ITaskbarListVtbl;
struct ITemplatePrinter;
struct ITransactionData;
struct ITransactionJoin;
struct ITransactionVtbl;
struct ITravelEntryVtbl;
struct ITravelLogClient;
struct ITravelLogExVtbl;
struct ITypeFactoryVtbl;
struct ITypeMarshalVtbl;
struct IUPnPDevicesVtbl;
struct IUPnPEventSource;
struct IUPnPReregistrar;
struct IUPnPServiceVtbl;
struct IVBSAXAttributes;
struct IVBSAXDTDHandler;
struct IVersionHostVtbl;
struct IVideoWindowVtbl;
struct IViewChapterVtbl;
struct IViewObject2Vtbl;
struct IVirusScanEngine;
struct IVoIPCurrentCall;
struct IWBScriptControl;
struct IWSDLServiceVtbl;
struct IWebBrowser2Vtbl;
struct IWinInetHttpInfo;
struct IWinInetInfoVtbl;
struct IWordBreakerVtbl;
struct IWrappedProtocol;
struct IXMLDOMAttribute;
struct IXMLDOMDocument2;
struct IXMLDOMSelection;
struct IXMLDocumentVtbl;
struct IXMLElement2Vtbl;
struct IXMLGenericParse;
struct IXSLTemplateVtbl;
struct InternetExplorer;
struct LayoutRectEvents;
struct NDIS_BPC_CONNECT;
struct SdpNodeContainer;
struct TIMESetAnimation;
struct UPnPDeviceFinder;
struct VoIPCallerInfoDB;
struct VolLockBroadcast;
struct XMLSchemaCache26;
struct XMLSchemaCache30;
struct _APPCATEGORYINFO;
struct _BTH_REMOTE_NAME;
struct _CARD_DATA_PARMS;
struct _CENOTIFYREQUEST;
struct _CERT_CHAIN_PARA;
struct _CERT_EXTENSIONS;
struct _CERT_NAME_VALUE;
struct _CERT_OTHER_NAME;
struct _CMC_STATUS_INFO;
struct _CMS_DH_KEY_INFO;
struct _CO_TAPI_CM_CAPS;
struct _CREDUI_BALLOONA;
struct _CREDUI_BALLOONW;
struct _CRYPT_ATTRIBUTE;
struct _CRYPT_HASH_INFO;
struct _CRYPT_URL_ARRAY;
struct _CTL_USAGE_MATCH;
struct _D3DSURFACE_DESC;
struct _DDVIDEOPORTCAPS;
struct _DDVIDEOPORTDESC;
struct _DDVIDEOPORTINFO;
struct _DLLVERSIONINFO2;
struct _DOT11_AUTH_ALGO;
struct _DOT11_AUTH_LIST;
struct _DOT11_UPDATE_IE;
struct _DTBLRADIOBUTTON;
struct _FILEDESCRIPTORA;
struct _FILEDESCRIPTORW;
struct _GENERIC_MAPPING;
struct _HTTP_FILTER_LOG;
struct _INTERNET_COOKIE;
struct _IO_STATUS_BLOCK;
struct _IP_ADAPTER_INFO;
struct _LINE_DEV_STATUS;
struct _LMEM_ALLOC_INFO;
struct _MIBICMPSTATS_EX;
struct _MIB_IPADDRTABLE;
struct _MIB_IPDESTTABLE;
struct _MIB_IPMCAST_MFE;
struct _MIB_IPMCAST_OIF;
struct _MIB_OPAQUE_INFO;
struct _NDISUIO_SET_OID;
struct _NDIS_802_11_KEY;
struct _NDIS_802_11_WEP;
struct _NDIS_TAPI_CLOSE;
struct _NDIS_TAPI_EVENT;
struct _NDIS_WLAN_BSSID;
struct _NETWORK_ADDRESS;
struct _NOTIFYICONDATAA;
struct _NOTIFYICONDATAW;
struct _PACKEDEVENTINFO;
struct _PCI_SLOT_NUMBER;
struct _POWER_BROADCAST;
struct _RPC_ASYNC_STATE;
struct _RTL_SPLAY_LINKS;
struct _RemotableHandle;
struct _SAndRestriction;
struct _SECURITY_STRING;
struct _SHDESCRIPTIONID;
struct _SHFILEOPSTRUCTA;
struct _SHFILEOPSTRUCTW;
struct _SNotRestriction;
struct _SORTORDERSPECEX;
struct _SSubRestriction;
struct _ServiceEnumInfo;
struct _TRUSTEE_ACCESSA;
struct _TRUSTEE_ACCESSW;
struct _TT_HITTESTINFOA;
struct _TT_HITTESTINFOW;
struct _USER_MARSHAL_CB;
struct _VIDEOPARAMETERS;
struct _VTableProvStruc;
struct _WINDOWS_IAS_SET;
struct _WIN_CERTIFICATE;
struct _WSANSClassInfoA;
struct _WSANSClassInfoW;
struct _X509Certificate;
struct __CEL_HEAP_ALLOC;
struct __CEL_INTERRUPTS;
struct __CEL_LOG_MARKER;
struct __CEL_SEM_CREATE;
struct __CEL_SEM_DELETE;
struct __CEL_SYSTEM_TLB;
struct __CEL_WAIT_MULTI;
struct _avistreamheader;
struct _tagCODEBASEHOLD;
struct _tagPROTOCOLDATA;
struct _tagSOFTDISTINFO;
struct linecallinfo_tag;
struct linecalllist_tag;
struct linetermcaps_tag;
struct phonemessage_tag;
struct sockaddr_in6_old;
struct sockaddr_storage;
struct tACMFILTERCHOOSE;
struct tACMFORMATCHOOSE;
struct tACMSTREAMHEADER;
struct tagCANDIDATEFORM;
struct tagCANDIDATEINFO;
struct tagCANDIDATELIST;
struct tagCAPROPVARIANT;
struct tagCREATESTRUCTA;
struct tagCREATESTRUCTW;
struct tagDBCOMMANDTREE;
struct tagDBFAILUREINFO;
struct tagDBLITERALINFO;
struct tagDBPROPINFOSET;
struct tagDB_VARNUMERIC;
struct tagDRVCONFIGINFO;
struct tagDVD_MUA_Coeff;
struct tagENUMHEADERROW;
struct tagFONTSIGNATURE;
struct tagHARDWAREINPUT;
struct tagHEADERROWINFO;
struct tagHTTPCONTACTID;
struct tagIMAP_RESPONSE;
struct tagINTERFACEDATA;
struct tagINTERFACEINFO;
struct tagLVHITTESTINFO;
struct tagMBOX_MSGCOUNT;
struct tagMENUITEMINFOA;
struct tagMENUITEMINFOW;
struct tagMIMEPARAMINFO;
struct tagMODULEENTRY32;
struct tagMONITORINFOEX;
struct tagMQRESTRICTION;
struct tagNMHDDISPINFOA;
struct tagNMHDDISPINFOW;
struct tagNMLVCACHEHINT;
struct tagNMTTDISPIFNOA;
struct tagNMTTDISPINFOW;
struct tagNNTPLISTGROUP;
struct tagPCMWAVEFORMAT;
struct tagProxyFileInfo;
struct tagREGISTERWORDA;
struct tagREGISTERWORDW;
struct tagRPCOLEMESSAGE;
struct tagSCRIPFONTINFO;
struct tagSHINITDLGINFO;
struct tagSHMENUBARINFO;
struct tagStorageLayout;
struct tagTCHITTESTINFO;
struct tagTCITEMHEADERA;
struct tagTCITEMHEADERW;
struct tagTHREADENTRY32;
struct tagTVHITTESTINFO;
struct tagrpcLOGPALETTE;
struct CMSHTMLFontLink;
struct CPersistHistory;
struct CRYPTCATMEMBER_;
struct CompositeFolder;
struct DRVCONFIGINFOEX;
struct DThumbCtlEvents;
struct DirectContainer;
struct DispHTMLBGsound;
struct DispHTMLImgVtbl;
struct DispHTMLWindow2;
struct EnumSoapMappers;
struct EnumWSDLService;
struct FilgraphManager;
struct FolderItem2Vtbl;
struct FolderItemVerbs;
struct FolderItemsVtbl;
struct HTCDescBehavior;
struct HTMLAppBehavior;
struct HTMLAreaElement;
struct HTMLAreaEvents2;
struct HTMLBaseElement;
struct HTMLDOMTextNode;
struct HTMLDivPosition;
struct HTMLFontElement;
struct HTMLFormElement;
struct HTMLHeadElement;
struct HTMLHtmlElement;
struct HTMLLabelEvents;
struct HTMLLinkElement;
struct HTMLListElement;
struct HTMLMetaElement;
struct HTMLParaElement;
struct HTMLRenderStyle;
struct HTMLSpanElement;
struct HTMLTableEvents;
struct HTMLTextElement;
struct HTMLWindowProxy;
struct HWINEVENTHOOK__;
struct IAMCrossbarVtbl;
struct IAMExtTransport;
struct IAMMediaContent;
struct IAMPlayListItem;
struct IAMPlayListVtbl;
struct IAMStreamConfig;
struct IAMStreamSelect;
struct IAMVideoProcAmp;
struct IAccessibleVtbl;
struct IActiveIME2Vtbl;
struct IAdviseSinkVtbl;
struct IAlterIndexVtbl;
struct IAlterTableVtbl;
struct IAsyncOperation;
struct IAsyncPProtVtbl;
struct IBaseFilterVtbl;
struct IBaseVideoMixer;
struct IBasicAudioVtbl;
struct IBasicVideoVtbl;
struct ICatInformation;
struct ICifRWComponent;
struct ICifRWGroupVtbl;
struct IClassActivator;
struct IClassFactoryEx;
struct IClientCapsVtbl;
struct IClientSecurity;
struct IColumnProvider;
struct IComBindingVtbl;
struct ICommDlgBrowser;
struct ICommandPersist;
struct ICommandPrepare;
struct ICreateTypeInfo;
struct ICreateTypeLib2;
struct IDBAsynchNotify;
struct IDBAsynchStatus;
struct IDBSchemaRowset;
struct IDSOControlVtbl;
struct IDSPlayerExVtbl;
struct IDVDTextManager;
struct IDVDTimeMapVtbl;
struct IDVDVideoVolume;
struct IDXGradientVtbl;
struct IDXTScaleOutput;
struct IDataFilterVtbl;
struct IDataObjectVtbl;
struct IDccManSinkVtbl;
struct IDeviceEnumVtbl;
struct IDeviceRectVtbl;
struct IDialEngineVtbl;
struct IDirectDrawVtbl;
struct IDispatchExVtbl;
struct IDisplayPointer;
struct IDownloadNotify;
struct IDropSourceVtbl;
struct IDropTargetVtbl;
struct IDvdControlVtbl;
struct IElementAdorner;
struct IElementSegment;
struct IEnumHLITEMVtbl;
struct IEnumIDListVtbl;
struct IEnumMediaTypes;
struct IEnumRegFilters;
struct IEnumScriptVtbl;
struct IEnumStringVtbl;
struct IFileSearchBand;
struct IFileSinkFilter;
struct IFileViewerSite;
struct IFilterInfoVtbl;
struct IFtpWebViewVtbl;
struct IGetSessionVtbl;
struct IHTMLChangeSink;
struct IHTMLDialogVtbl;
struct IHTMLDivElement;
struct IHTMLEditorVtbl;
struct IHTMLFrameBase2;
struct IHTMLFrameBase3;
struct IHTMLImgElement;
struct IHTMLInputImage;
struct IHTMLMapElement;
struct IHTMLOpsProfile;
struct IHTMLRuleStyle2;
struct IHTMLRuleStyle3;
struct IHTMLRuleStyle4;
struct IHTMLScreenVtbl;
struct IHTMLStyle2Vtbl;
struct IHTMLStyle3Vtbl;
struct IHTMLStyle4Vtbl;
struct IHTMLStyleSheet;
struct IHTMLSubmitData;
struct IHTMLTable2Vtbl;
struct IHTMLTable3Vtbl;
struct IHTMLTableCell2;
struct IHTMLUniqueName;
struct IHTMLUserDataOM;
struct IHTMLViewFilter;
struct IHeaderEnumVtbl;
struct IHlinkFrameVtbl;
struct IHttpNegotiate2;
struct IIMAPTransport2;
struct IIMCallbackVtbl;
struct IImnAccountVtbl;
struct IInstallEngine2;
struct ILayoutRectVtbl;
struct IMAPIAdviseSink;
struct IMAPIFolderVtbl;
struct IMAPIStatusVtbl;
struct IMLangCodePages;
struct IMLangFontLink2;
struct IMapMIMEToCLSID;
struct IMarkupPointer2;
struct IMarkupServices;
struct IMediaEventSink;
struct IMediaEventVtbl;
struct IMediaParamInfo;
struct IMediaPlayerDvd;
struct IMemoryDataVtbl;
struct IMixerPinConfig;
struct IMsgrIMSessions;
struct IMsgrObjectVtbl;
struct IMsgrUserOEVtbl;
struct IMultiLanguage2;
struct IMultiLanguage3;
struct INNTPTransport2;
struct INetCfgLockVtbl;
struct IObexDeviceVtbl;
struct IObjectIdentity;
struct IObjectWithSite;
struct IOleControlSite;
struct IOleControlVtbl;
struct IOleInPlaceSite;
struct IOleUndoManager;
struct IOpenRowsetVtbl;
struct IPersistFolder2;
struct IPersistFolder3;
struct IPersistHistory;
struct IPersistMoniker;
struct IPersistStorage;
struct IPhraseSinkVtbl;
struct IProfferService;
struct IProgressDialog;
struct IProgressNotify;
struct IPropertyUIVtbl;
struct IProvideMoniker;
struct IQualityControl;
struct IQueryFormAVtbl;
struct IQueryFormWVtbl;
struct IRTCBuddyEvent2;
struct IRTCClient2Vtbl;
struct IRTCClientEvent;
struct IRTCEnumBuddies;
struct IRTCParticipant;
struct IRTCPortManager;
struct IRTCProfileVtbl;
struct IRTCSessionVtbl;
struct IRTCWatcherVtbl;
struct IRecalcHostVtbl;
struct IRecalcProperty;
struct IRecordInfoVtbl;
struct IReferenceClock;
struct IRemoteComputer;
struct IRequestStrList;
struct IRowsetCopyRows;
struct IRowsetFindVtbl;
struct IRowsetIdentity;
struct IRowsetInfoVtbl;
struct IRowsetKeysVtbl;
struct IRowsetViewVtbl;
struct IRowsetWatchAll;
struct IRpcOptionsVtbl;
struct IRpcProxyBuffer;
struct IRunnableObject;
struct ISAXDeclHandler;
struct ISAXLocatorVtbl;
struct ISMTPTransport2;
struct ISOAPClientVtbl;
struct ISOAPServerVtbl;
struct IScriptNodeVtbl;
struct ISequenceNumber;
struct IServerSecurity;
struct IShellDispatch2;
struct IShellDispatch3;
struct IShellLinkAVtbl;
struct IShellLinkDual2;
struct IShellLinkWVtbl;
struct IShellNameSpace;
struct IShellView2Vtbl;
struct ISoapMapperVtbl;
struct ISoapReaderVtbl;
struct ISoapSerializer;
struct ISoapTypeMapper;
struct ISpinButtonVtbl;
struct IStdMarshalInfo;
struct ITravelLogEntry;
struct IUPnPDeviceVtbl;
struct IURLSearchHook2;
struct IUrlHistoryStg2;
struct IUrlTrackingStg;
struct IVBSAXXMLFilter;
struct IVBSAXXMLReader;
struct IViewFilterVtbl;
struct IViewObjectVtbl;
struct IViewRowsetVtbl;
struct IVoIPCallRecord;
struct IWABExtInitVtbl;
struct IWABOBJECT_Vtbl;
struct IWSDLReaderVtbl;
struct IWebBrowserVtbl;
struct IXMLDOMDocument;
struct IXMLDOMNodeList;
struct IXMLDOMNodeVtbl;
struct IXMLDOMNotation;
struct IXMLDOMTextVtbl;
struct IXMLElementVtbl;
struct IXMLHTTPRequest;
struct IXMLNodeFactory;
struct IXTLRuntimeVtbl;
struct ImageProperties;
struct NDIS_BPC_COMMIT;
struct NDIS_BPC_STATUS;
struct NLED_COUNT_INFO;
struct OldHTMLDocument;
struct ProfilerControl;
struct SAXAttributes30;
struct ServerXMLHTTP30;
struct ShellAppManager;
struct ShellFolderItem;
struct ShellFolderView;
struct ShellLinkObject;
struct SubscriptionMgr;
struct WebCrawlerAgent;
struct _BTH_SNIFF_MODE;
struct _CAT_MEMBERINFO;
struct _CENOTIFICATION;
struct _CERT_EXTENSION;
struct _CERT_NAME_INFO;
struct _CERT_POLICY_ID;
struct _COAUTHIDENTITY;
struct _COMPFOLDERINIT;
struct _CO_AF_TAPI_SAP;
struct _CRL_DIST_POINT;
struct _CRYPTOAPI_BLOB;
struct _CRYPT_BIT_BLOB;
struct _CRYPT_OID_INFO;
struct _CRYPT_URL_INFO;
struct _D3DCLIPSTATUS8;
struct _D3DDISPLAYMODE;
struct _D3DLINEPATTERN;
struct _D3DLOCKED_RECT;
struct _D3DVOLUME_DESC;
struct _D3DXIMAGE_INFO;
struct _DDCOLORCONTROL;
struct _DDKISRINFO_tag;
struct _DDKPCIINFO_tag;
struct _DDSURFACEDESC2;
struct _DISCDLGSTRUCTA;
struct _DISCDLGSTRUCTW;
struct _DISPLAY_DEVICE;
struct _DLLVERSIONINFO;
struct _DMA_OPERATIONS;
struct _DOT11_BSS_LIST;
struct _DOT11_PHY_LIST;
struct _DOT11_RATE_SET;
struct _EVENTLOGRECORD;
struct _FILECHANGEINFO;
struct _FLAG_STGMEDIUM;
struct _HD_HITTESTINFO;
struct _HYPER_SIZEDARR;
struct _INTERFACE_INFO;
struct _IP_ADDR_STRING;
struct _ISA_PNP_CONFIG;
struct _LINE_CALL_INFO;
struct _LMEM_HEAP_INFO;
struct _MIB_IPNETTABLE;
struct _MIB_ROUTESTATE;
struct _MIDL_STUB_DESC;
struct _NDIS_TAPI_DIAL;
struct _NDIS_TAPI_DROP;
struct _NDIS_TAPI_OPEN;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOW;
struct _PARSED_CFTABLE;
struct _PERUSERSECTION;
struct _PPP_EAP_OUTPUT;
struct _PPP_EAP_PACKET;
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
struct _PST_ACCESSRULE;
struct _PST_PROMPTINFO;
struct _PUBLICKEYSTRUC;
struct _RB_HITTESTINFO;
struct _RTL_BITMAP_RUN;
struct _SCONTEXT_QUEUE;
struct _SCurrencyArray;
struct _SDateTimeArray;
struct _SHORT_SIZEDARR;
struct _SOCKET_ADDRESS;
struct _SOrRestriction;
struct _SV2CVW2_PARAMS;
union _ULARGE_INTEGER;
struct _UNICODE_STRING;
struct _WABIMPORTPARAM;
struct _WCE_DEVICELIST;
struct _WL_ASSOCIATION;
struct _WSPUPCALLTABLE;
struct _ZONEATTRIBUTES;
struct __BUSDATA_PARMS;
struct __CEL_DATA_LOSS;
struct __CEL_EVENT_SET;
struct __CEL_HEAP_FREE;
struct __CEL_SEM_CLOSE;
struct _tagRemBINDINFO;
struct _tagSTATPROPMAP;
struct _tagSYNCMGRITEM;
struct _tagSlowAppInfo;
struct _userCLIPFORMAT;
struct icmp_echo_reply;
struct linedevcaps_tag;
struct lineforward_tag;
struct linemessage_tag;
struct phonestatus_tag;
struct tACMDRVOPENDESC;
struct tCardEntryTuple;
struct tagACCTLISTINFO;
struct tagADDRESSPROPS;
struct tagCATEGORYINFO;
struct tagCODEPAGEINFO;
struct tagCOMBOBOXINFO;
struct tagCUSTDATAITEM;
struct tagDBCOLUMNDESC;
struct tagDBCOLUMNINFO;
struct tagDVD_TIMECODE;
struct tagENUMPROPERTY;
struct tagFILTERREGION;
struct tagFULLPROPSPEC;
struct tagHH_FTS_QUERY;
struct tagHTTPMAILPOST;
struct tagINETADDRLIST;
struct tagINETCSETINFO;
struct tagINPUTCONTEXT;
struct tagMIDIOUTCAPSA;
struct tagMIDIOUTCAPSW;
struct tagMIMECSETINFO;
struct tagMIMEPROPINFO;
struct tagMQQUEUEPROPS;
struct tagMSAAMENUINFO;
struct tagNMLVFINDITEM;
struct tagNMRBAUTOSIZE;
struct tagNNTPAUTHINFO;
struct tagNNTPRESPONSE;
struct tagNNTPXHDRRESP;
struct tagNavigateData;
struct tagPALETTEENTRY;
struct tagPOP3RESPONSE;
struct tagPROPPAGEINFO;
struct tagQUERYCONTEXT;
struct tagRFCDLGPARAMA;
struct tagRFCDLGPARAMW;
struct tagRemFORMATETC;
struct tagRemSTGMEDIUM;
struct tagSMTPMESSAGE2;
struct tagSMTPRESPONSE;
struct tagTRANSMITINFO;
struct tagUNICODERANGE;
struct CMultiLanguage;
struct CRYPTCATSTORE_;
struct CUtilityButton;
struct CoDitherToRGB8;
struct DispHTMLIFrame;
struct DispHTMLScreen;
struct FileSearchBand;
struct FolderItemVerb;
struct FolderItemVtbl;
struct HACMDRIVERID__;
struct HENHMETAFILE__;
struct HTMLAreaEvents;
struct HTMLDivElement;
struct HTMLImgEvents2;
struct HTMLInputImage;
struct HTMLMapElement;
struct HTMLMapEvents2;
struct HTMLStyleSheet;
struct IAMChannelInfo;
struct IAMClockAdjust;
struct IAMDirectSound;
struct IAMMediaStream;
struct IAMRebuildVtbl;
struct IAMTVTunerVtbl;
struct IAccessControl;
struct IActiveIMEVtbl;
struct IAnimationRoot;
struct IAsyncMHandler;
struct IAudioDataVtbl;
struct IAutoComplete2;
struct IBufferingTime;
struct ICSSFilterSite;
struct ICSSFilterVtbl;
struct ICifRWFileVtbl;
struct ICifRWModeVtbl;
struct IClassFactory2;
struct IColumnsRowset;
struct ICopyHookAVtbl;
struct ICopyHookWVtbl;
struct ICreateRowVtbl;
struct ICreateTypeLib;
struct ICustomDocVtbl;
struct IDVDDomainVtbl;
struct IDX2DDebugVtbl;
struct IDXARGBReadPtr;
struct IDXLookupTable;
struct IDXSurfaceInit;
struct IDXSurfacePick;
struct IDXSurfaceVtbl;
struct IDXTClipOrigin;
struct IDXTFilterVtbl;
struct IDXTaskManager;
struct IDebugProperty;
struct IDialEventSink;
struct IDirect3D8Vtbl;
struct IDirectControl;
struct IDispErrorVtbl;
struct IDocHostShowUI;
struct IDockingWindow;
struct IEnumCifGroups;
struct IEnumFORMATETC;
struct IEnumSyncItems;
struct IEnumWSDLPorts;
struct IEnumWorkItems;
struct IErrorInfoVtbl;
struct IExtractImage2;
struct IFillLockBytes;
struct IFolderAndItem;
struct IFontCacheVtbl;
struct IFontNamesVtbl;
struct IFsCiAdminVtbl;
struct IGetDataSource;
struct IHTMLBRElement;
struct IHTMLCaretVtbl;
struct IHTMLChangeLog;
struct IHTMLDDElement;
struct IHTMLDTElement;
struct IHTMLDocument2;
struct IHTMLDocument3;
struct IHTMLDocument4;
struct IHTMLDocument5;
struct IHTMLEditHost2;
struct IHTMLEventObj2;
struct IHTMLEventObj3;
struct IHTMLEventObj4;
struct IHTMLFrameBase;
struct IHTMLHRElement;
struct IHTMLLIElement;
struct IHTMLNamespace;
struct IHTMLPaintSite;
struct IHTMLPopupVtbl;
struct IHTMLRuleStyle;
struct IHTMLStyleVtbl;
struct IHTMLTableCell;
struct IHTMLTableCol2;
struct IHTMLTableRow2;
struct IHTMLTableRow3;
struct IHTMLTableVtbl;
struct IHashTableVtbl;
struct IHeaderHandler;
struct IHlinkSiteVtbl;
struct IHttpNegotiate;
struct IIMAPTransport;
struct IInboxSinkVtbl;
struct IInputMethodEx;
struct IInstallEngine;
struct IInternetCache;
struct IKsPropertySet;
struct ILayoutStorage;
struct ILockBytesVtbl;
struct IMAPIContainer;
struct IMAPITableVtbl;
struct IMDDatasetVtbl;
struct IMDRangeRowset;
struct IMLangFontLink;
struct IMallocSpyVtbl;
struct IMarkupPointer;
struct IMediaPosition;
struct IMediaTypeInfo;
struct IMemAllocator2;
struct IMessageFilter;
struct IMimeAllocator;
struct IMonikerHelper;
struct IMsgrIMSession;
struct IMsgrUsersVtbl;
struct IMultiLanguage;
struct INNTPTransport;
struct INetConnection;
struct INotifyReplica;
struct IOleCache2Vtbl;
struct IOleClientSite;
struct IOleObjectVtbl;
struct IOleWindowVtbl;
struct IOmHistoryVtbl;
struct IOverlayNotify;
struct IPOP3Transport;
struct IParserSession;
struct IPersistFolder;
struct IPersistIDList;
struct IPersistMemory;
struct IPersistQueryA;
struct IPersistQueryW;
struct IPersistStream;
struct IPropertyBagEx;
struct IPropertyPage2;
struct IProviderAdmin;
struct IProxyInfoVtbl;
struct IQueryInfoVtbl;
struct IQuickActivate;
struct IRTCBuddy2Vtbl;
struct IRTCBuddyEvent;
struct IRTCBuddyGroup;
struct IRTCClientVtbl;
struct IRTCCollection;
struct IRTCEnumGroups;
struct IRTCMediaEvent;
struct IRTCUserSearch;
struct IRadioBandVtbl;
struct IRadioViewVtbl;
struct IRangeListVtbl;
struct IRegFilterInfo;
struct IRowChangeVtbl;
struct IRowsetRefresh;
struct IRowsetResynch;
struct IRpcStubBuffer;
struct ISAXAttributes;
struct ISAXDTDHandler;
struct ISMTPTransport;
struct ISOAPErrorVtbl;
struct IScheduleGroup;
struct IScrollBarVtbl;
struct ISdpRecordVtbl;
struct ISdpSearchVtbl;
struct ISdpStreamVtbl;
struct ISearchContext;
struct ISecureUrlHost;
struct ISensLogonVtbl;
struct ISensOnNowVtbl;
struct IShellDispatch;
struct IShellIconVtbl;
struct IShellLinkDual;
struct IShellUIHelper;
struct IShellViewVtbl;
struct ISliderBarVtbl;
struct ISoapConnector;
struct ISourcesRowset;
struct IStreamBuilder;
struct ISurrogateVtbl;
struct ITIMEStateVtbl;
struct ITableCreation;
struct ITableDataVtbl;
struct ITargetNotify2;
struct ITaskScheduler;
struct ITimerSinkVtbl;
struct ITravelLogVtbl;
struct ITypeInfo2Vtbl;
struct IUPnPEventSink;
struct IUPnPRegistrar;
struct IURLSearchHook;
struct IUrlHistoryStg;
struct IUserIdentity2;
struct IUtilityButton;
struct IVersionVector;
struct IVoIPCallLogDB;
struct IWABObjectVtbl;
struct IWSDLOperation;
struct IWebBridgeVtbl;
struct IWebBrowserApp;
struct IXMLDOMComment;
struct IXMLDOMElement;
struct IXMLNodeSource;
struct IXMLParserVtbl;
struct RequestStrList;
struct SAXXMLReader30;
struct ShellNameSpace;
struct SoapSerializer;
struct XMLHTTPRequest;
struct XMLSchemaCache;
struct _BTHNS_SETBLOB;
struct _BTH_HOLD_MODE;
struct _BTH_PARK_MODE;
struct _BYTE_SIZEDARR;
struct _BthDeviceInfo;
struct _CAT_NAMEVALUE;
struct _CEDBASEINFOEX;
struct _CEL_BOOT_TIME;
struct _CERT_RDN_ATTR;
struct _CMC_DATA_INFO;
struct _CMC_PEND_INFO;
struct _D3DCOLORVALUE;
struct _D3DLOCKED_BOX;
struct _DDPIXELFORMAT;
struct _DDSURFACEDESC;
struct _DEVICE_OBJECT;
struct _DOCHOSTUIINFO;
struct _DOT11_ADAPTER;
struct _DOT11_WPA_TSC;
struct _DRIVER_OBJECT;
struct _DSCBUFFERDESC;
struct _DTBLMVLISTBOX;
struct _FIREWALL_RULE;
struct _FW_IP_ADDRESS;
struct _GDI_NONREMOTE;
struct _GRADIENT_RECT;
struct _KDEVICE_QUEUE;
union _LARGE_INTEGER;
struct _LINE_DEV_CAPS;
struct _LONG_SIZEDARR;
struct _MIB_IPADDRROW;
struct _MIB_IPDESTROW;
struct _MIB_MFE_TABLE;
struct _OLESTREAMVTBL;
struct _PARSED_CONFIG;
struct _PCI_RSRC_LIST;
struct _POST_INIT_BUF;
struct _PPP_EAP_INPUT;
struct _PRIVILEGE_SET;
struct _PROV_ENUMALGS;
struct _RGNDATAHEADER;
struct _SAppTimeArray;
struct _SCARD_ATRMASK;
struct _SOCKADDR_IRDA;
struct _SORTORDERSPEC;
struct _SPropTagArray;
struct _SSLCLIENTOPTS;
struct _SSLSERVEROPTS;
struct _SSortOrderSet;
struct _STGOVERLAPPED;
struct _SWStringArray;
struct _SecBufferDesc;
struct _TOKEN_CONTROL;
struct _USB_INTERFACE;
struct _WABEXTDISPLAY;
struct _WCE_IAS_QUERY;
struct _WINTRUST_DATA;
struct _WSACOMPLETION;
struct _WSPPROC_TABLE;
struct _XML_NODE_INFO;
struct __CEL_INT_DATA;
struct _avimainheader;
struct _avisuperindex;
struct _avitimedindex;
struct _tagOLECMDTEXT;
struct _tagStartParam;
struct _userHMETAFILE;
struct _userSTGMEDIUM;
struct _wireSAFEARRAY;
struct arp_send_reply;
struct ip_mreq_source;
struct tagADDRESSLIST;
struct tagBODYOFFSETS;
struct tagCHARSETINFO;
struct tagCHOOSECOLOR;
struct tagCHOOSEFONTW;
struct tagCONNECTDATA;
struct tagCONTROLINFO;
struct tagComCallData;
struct tagDBGROUPINFO;
struct tagDBPARAMETER;
struct tagDBPARAMINFO;
struct tagDBPROPIDSET;
struct tagDBTIMESTAMP;
struct tagDIBSECTION2;
struct tagENUMLOGFONT;
struct tagEXTRASEARCH;
struct tagHANDLETABLE;
struct tagHEAPENTRY32;
struct tagHH_ENUM_CAT;
struct tagHTTPMAILGET;
struct tagIMWINDOWPOS;
struct tagIXPRASLOGON;
struct tagLVDISPINFOW;
struct tagLVFINDINFOA;
struct tagLVFINDINFOW;
struct tagMIDIINCAPSA;
struct tagMIDIINCAPSW;
struct tagMONITORINFO;
struct tagMQCOLUMNSET;
struct tagMQMGMTPROPS;
struct tagNMSELCHANGE;
struct tagNMTREEVIEWA;
struct tagNMTREEVIEWW;
struct tagNNTPARTICLE;
struct tagNNTPMESSAGE;
struct tagOCPFIPARAMS;
struct tagPARAMDESCEX;
struct tagPROPVARIANT;
struct tagQACONTAINER;
struct tagRESTRICTION;
struct tagRFC1522INFO;
struct tagRFC1766INFO;
struct tagRemHPALETTE;
struct tagSMTPMESSAGE;
struct tagSOFTKBDDATA;
struct tagSTATPROPBAG;
struct tagSTATPROPSTG;
struct tagSTYLESTRUCT;
struct tagTBADDBITMAP;
struct tagTEXTMETRICA;
struct tagTEXTMETRICW;
struct tagTEXT_SOURCE;
struct tagTVDISPINFOA;
struct tagTVDISPINFOW;
struct tagWAVEOUTCAPS;
struct wavefilter_tag;
struct CATALOG_INFO_;
struct CHeaderFooter;
struct CONFIRMSAFETY;
struct CoSniffStream;
struct DMsgrOEEvents;
struct DOMDocument26;
struct DOMDocument30;
struct DXTaskManager;
struct DirectControl;
struct DispCEventObj;
struct DispHTMLEmbed;
struct DispHTMLPopup;
struct DispHTMLStyle;
struct DispHTMLTable;
struct EnumWSDLPorts;
struct HCOLORSPACE__;
struct HTMLBRElement;
struct HTMLDDElement;
struct HTMLDTElement;
struct HTMLFrameBase;
struct HTMLHRElement;
struct HTMLImgEvents;
struct HTMLLIElement;
struct HTMLMapEvents;
struct HTMLNamespace;
struct HTMLNavigator;
struct HTMLRuleStyle;
struct HTMLTableCell;
struct HttpConnector;
struct IAMCollection;
struct IAccessorVtbl;
struct IActiveIMMApp;
struct IActiveIMMIME;
struct IActiveMovie2;
struct IActiveMovie3;
struct IActiveScript;
struct IAddrBookVtbl;
struct IAdviseSinkEx;
struct IAppPublisher;
struct IAuditControl;
struct IAuthenticate;
struct IAutoComplete;
struct IBindHostVtbl;
struct IBindProtocol;
struct IBindResource;
struct IBlockFormats;
struct ICheckBoxVtbl;
struct ICifComponent;
struct ICifGroupVtbl;
struct IClassFactory;
struct IColumnMapper;
struct IColumnsInfo2;
struct IComboboxVtbl;
struct ICommonQueryA;
struct ICommonQueryW;
struct IConfigAviMux;
struct IContextMenu2;
struct IContextMenu3;
struct IContinueVtbl;
struct IDBInitialize;
struct IDBProperties;
struct IDXBaseObject;
struct IDXDCLockVtbl;
struct IDXEffectVtbl;
struct IDXRasterizer;
struct IDXRawSurface;
struct IDXTLabelVtbl;
struct IDXTScaleVtbl;
struct IDeskBandVtbl;
struct IDialBranding;
struct IDifferencing;
struct IDispatchVtbl;
struct IDistListVtbl;
struct IDithererImpl;
struct IDownloadSite;
struct IDvdInfo2Vtbl;
struct IDvdStateVtbl;
struct IEnumACString;
struct IEnumCifModes;
struct IEnumCodePage;
struct IEnumGUIDVtbl;
struct IEnumJavaFile;
struct IEnumPinsVtbl;
struct IEnumSTATDATA;
struct IErrorLogVtbl;
struct IErrorRecords;
struct IExtractIconA;
struct IExtractIconW;
struct IExtractImage;
struct IFilterGraph2;
struct IFilterMapper;
struct IFilterStatus;
struct IFolderViewOC;
struct IFontDispVtbl;
struct IGetSourceRow;
struct IGraphBuilder;
struct IGraphVersion;
struct IHTMLDOMNode2;
struct IHTMLDocument;
struct IHTMLEditHost;
struct IHTMLElement2;
struct IHTMLElement3;
struct IHTMLElement4;
struct IHTMLEventObj;
struct IHTMLLocation;
struct IHTMLRectVtbl;
struct IHTMLSpanFlow;
struct IHTMLTableCol;
struct IHTMLTableRow;
struct IHTMLTxtRange;
struct IHeaderFooter;
struct IHomePageVtbl;
struct IHtmlAreaVtbl;
struct IHttpSecurity;
struct IIMAPCallback;
struct IIMCallbackEx;
struct IInputMethod2;
struct IInstalledApp;
struct IIntelliForms;
struct IInternetVtbl;
struct IJavaFileVtbl;
struct ILineInfoVtbl;
struct IMAPIProgress;
struct IMAPIPropVtbl;
struct IMXAttributes;
struct IMXWriterVtbl;
struct IMailUserVtbl;
struct IMediaControl;
struct IMediaEventEx;
struct IMediaPlayer2;
struct IMediaSample2;
struct IMediaSeeking;
struct IMemAllocator;
struct IMessengerApp;
struct IMimeBodyVtbl;
struct IMimeEditVtbl;
struct IMimeInfoVtbl;
struct IMimeSecurity;
struct IMsgStoreVtbl;
struct IMsgrServices;
struct IMsgrUserVtbl;
struct INNTPCallback;
struct INotification;
struct IObexCapsVtbl;
struct IObexSinkVtbl;
struct IObjectSafety;
struct IOleCacheVtbl;
struct IOleContainer;
struct IPOP3Callback;
struct IParentRowset;
struct IParserVerify;
struct IProfSectVtbl;
struct IProgSinkVtbl;
struct IPropDataVtbl;
struct IPropertyBag2;
struct IPropertyPage;
struct IPublishedApp;
struct IQualPropVtbl;
struct IQueueCommand;
struct IRASTransport;
struct IRTCBuddyVtbl;
struct IRTCInfoEvent;
struct IReadDataVtbl;
struct IRecalcEngine;
struct IResponseVtbl;
struct IRowsetAsynch;
struct IRowsetChange;
struct IRowsetLocate;
struct IRowsetNotify;
struct IRowsetScroll;
struct IRowsetUpdate;
struct IRunnableTask;
struct ISAXXMLFilter;
struct ISAXXMLReader;
struct ISMTPCallback;
struct ISQLErrorInfo;
struct IScopeAdmVtbl;
struct ISearchesVtbl;
struct ISecurityInfo;
struct IShellAppVtbl;
struct IShellBrowser;
struct IShellDetails;
struct IShellExtInit;
struct IShellFolder2;
struct IShellMoniker;
struct IShellWindows;
struct IStemSinkVtbl;
struct IStreamSample;
struct ISyncSchedule;
struct ITIMEPlayItem;
struct ITIMEPlayList;
struct ITargetFrame2;
struct ITargetNotify;
struct IThumbCtlVtbl;
struct ITimerService;
struct ITransaction2;
struct ITravelLogStg;
struct ITrusteeAdmin;
struct ITypeCompVtbl;
struct ITypeInfoVtbl;
struct ITypeLib2Vtbl;
struct IUPnPServices;
struct IUserIdentity;
struct IVBSAXLocator;
struct IViewObjectEx;
struct IViewSortVtbl;
struct IVirusScanner;
struct IVoIPMediaMgr;
struct IWSDLPortVtbl;
struct IWordSinkVtbl;
struct IXMLAttribute;
struct IXMLDOMEntity;
struct IXMLDocument2;
struct IXMLErrorVtbl;
struct IXSLProcessor;
struct IrdaTransport;
struct IwfoldersVtbl;
struct MXXMLWriter30;
struct MonikerHelper;
struct NDIS_BPC_POOL;
union NodeDataUnion;
struct SAXAttributes;
struct SEQUENCE_INFO;
struct SearchCommand;
struct ServerXMLHTTP;
struct ShellUIHelper;
struct SoapConnector;
struct TIMEAnimation;
struct UPnPRegistrar;
struct VoIPCallLogDB;
struct WSDLOperation;
struct WebBrowser_V1;
struct XACTTRANSINFO;
struct XSLTemplate26;
struct XSLTemplate30;
struct _ACTRL_ALISTA;
struct _ACTRL_ALISTW;
struct _AMVPDATAINFO;
struct _BPC_FILETIME;
struct _CEL_GDI_INFO;
struct _CEL_RDP_INFO;
struct _CERECORDINFO;
struct _CERT_CONTEXT;
struct _CMS_KEY_INFO;
struct _COMMTIMEOUTS;
struct _COSERVERINFO;
struct _CREDUI_INFOA;
struct _CREDUI_INFOW;
struct _D3DGAMMARAMP;
struct _D3DMATERIAL8;
struct _D3DVIEWPORT8;
struct _DATA_WRAPPER;
union _DDALPHABLTFX;
struct _DSBUFFERDESC;
struct _DTBLCHECKBOX;
struct _DTBLCOMBOBOX;
struct _DTBLGROUPBOX;
struct _IMAGE_SYMBOL;
struct _MEMORYSTATUS;
struct _MIBICMPSTATS;
struct _MIB_IFNUMBER;
struct _MIB_IFSTATUS;
struct _MIB_IPNETROW;
struct _MIB_PROXYARP;
struct _MIB_TCPSTATS;
struct _MIB_TCPTABLE;
struct _MIB_UDPSTATS;
struct _MIB_UDPTABLE;
struct _MP_PARAMINFO;
struct _NETRESOURCEA;
struct _NETRESOURCEW;
struct _NOTIFICATION;
struct _OBEX_REQUEST;
struct _PCI_CFG_INFO;
struct _PCI_DEV_INFO;
struct _PPP_EAP_INFO;
struct _PROVDATA_SIP;
struct _PST_TYPEINFO;
struct _PctPublicKey;
struct _QUOTA_LIMITS;
struct _SBinaryArray;
struct _SCHANNEL_ALG;
struct _SDoubleArray;
struct _SHELLDETAILS;
struct _SOCKADDR_BTH;
struct _SPropProblem;
struct _SRestriction;
struct _SSLPROTOCOLS;
struct _STARTUPINFOA;
struct _STARTUPINFOW;
struct _SdpQueryUuid;
struct _TAPE_PREPARE;
struct _TASK_TRIGGER;
struct _TOKEN_GROUPS;
struct _TOKEN_SOURCE;
struct _USB_ENDPOINT;
struct _WSAQuerySetA;
struct _WSAQuerySetW;
struct _aviextheader;
struct _avimetaindex;
struct _avitcdlindex;
struct _currencyfmtA;
struct _currencyfmtW;
struct _tagGroupInfo;
struct _tagHWXRESULT;
struct _tagVIRUSINFO;
struct _tagWAB_PARAM;
struct _timecodedata;
struct _userHPALETTE;
struct adpcmcoef_tag;
struct midievent_tag;
struct phonecaps_tag;
struct tMIXERCONTROL;
struct tWAVEFORMATEX;
struct tagAspectInfo;
struct tagBIND_OPTS2;
struct tagBITMAPINFO;
struct tagCABSTRBLOB;
struct tagCACLIPDATA;
struct tagCAFILETIME;
struct tagCALPOLESTR;
struct tagCSPLATFORM;
struct tagDBPROPINFO;
struct tagDBSORTINFO;
struct tagDB_NUMERIC;
struct tagDIBSECTION;
struct tagDISPPARAMS;
struct tagExtentInfo;
struct tagFINDHEADER;
struct tagHEAPLIST32;
struct tagHHN_NOTIFY;
struct tagHH_ENUM_IT;
struct tagHH_WINTYPE;
struct tagHWXRESULTS;
struct tagIMENUMINFO;
struct tagKEYBDINPUT;
struct tagLOGPALETTE;
struct tagLVDISPINFO;
struct tagMDAXISINFO;
struct tagMETHODDATA;
struct tagMIMECPINFO;
struct tagMOUSEINPUT;
struct tagMQMSGPROPS;
struct tagNMDAYSTATE;
struct tagNMLISTVIEW;
struct tagNMTOOLBARA;
struct tagNMTOOLBARW;
struct tagNNTPHEADER;
struct tagRemHBITMAP;
struct tagRemHGLOBAL;
struct tagSCRIPTINFO;
struct tagSCROLLINFO;
struct tagSMTPSTREAM;
struct tagSTAT_CHUNK;
struct tagVERIDARRAY;
struct tagWAVEINCAPS;
struct tcp_keepalive;
struct varstring_tag;
struct BlockFormats;
struct BthTransport;
struct CMLangString;
struct CRYPTCATCDF_;
struct CRadioButton;
struct ChannelAgent;
struct DFConstraint;
struct DSOControl26;
struct DSOControl30;
struct DXBASESAMPLE;
struct DXRasterizer;
struct DXTMTASKINFO;
struct DispHTMLBody;
struct FolderItems2;
struct FolderItems3;
struct HACMDRIVER__;
struct HACMSTREAM__;
struct HHEADERROW__;
struct HTAPIPHONE__;
struct HTMLDefaults;
struct HTMLDocument;
struct HTMLLocation;
struct HTMLSpanFlow;
struct HTMLTableCol;
struct HTMLTableRow;
struct IABContainer;
struct IACList2Vtbl;
struct IAMExtDevice;
struct IAMTunerVtbl;
struct IAMovieSetup;
struct IActiveMovie;
struct IAdviseSink2;
struct IAnchorClick;
struct IAsyncReader;
struct IBasicVideo2;
struct IBindCtxVtbl;
struct IBindingVtbl;
struct ICatRegister;
struct IChannelHook;
struct ICifFileVtbl;
struct ICifModeVtbl;
struct ICodeInstall;
struct ICodeStoreDB;
struct IColumnsInfo;
struct ICommandCost;
struct ICommandText;
struct ICommandTree;
struct ICommandVtbl;
struct IContextMenu;
struct IConvertType;
struct IDShowPlugin;
struct IDVDMenuVtbl;
struct IDVDTitleSet;
struct IDXGradient2;
struct IDXTBindHost;
struct IDXTransform;
struct IDirectDraw2;
struct IDirectDraw4;
struct IDirectSound;
struct IDvdControl2;
struct IDvdInfoVtbl;
struct IEnumDMOVtbl;
struct IEnumFilters;
struct IEnumMoniker;
struct IEnumOLEVERB;
struct IEnumRfc1766;
struct IEnumSTATSTG;
struct IEnumSTATURL;
struct IEnumUnknown;
struct IEnumVARIANT;
struct IErrorLookup;
struct IFileAsyncIO;
struct IFileViewerA;
struct IFileViewerW;
struct IFilterGraph;
struct IHTMLBGsound;
struct IHTMLDOMNode;
struct IHTMLDialog2;
struct IHTMLDialog3;
struct IHTMLElement;
struct IHTMLPainter;
struct IHTMLScreen2;
struct IHTMLWindow2;
struct IHTMLWindow3;
struct IHTMLWindow4;
struct IHlinkTarget;
struct IIMCallback2;
struct IIMEServices;
struct IInputMethod;
struct IInputObject;
struct IJavaPackage;
struct IMAPIControl;
struct IMLangString;
struct IMarqueeInfo;
struct IMarshalVtbl;
struct IMediaBuffer;
struct IMediaFilter;
struct IMediaHolder;
struct IMediaObject;
struct IMediaParams;
struct IMediaPlayer;
struct IMediaSample;
struct IMediaStream;
struct IMemInputPin;
struct IMessageVtbl;
struct IMimeEditTag;
struct IMimeMessage;
struct IMonikerProp;
struct IMonikerVtbl;
struct IMsgrService;
struct IMsgrUsersOE;
struct IMultiQIVtbl;
struct INSOPlayVtbl;
struct INSPlay1Vtbl;
struct INetCfgClass;
struct IObexService;
struct IOleDocument;
struct IOleLinkVtbl;
struct IOleUndoUnit;
struct IOmNavigator;
struct IOptionArray;
struct IOverlayVtbl;
struct IPeerFactory;
struct IPersistFile;
struct IPersistMime;
struct IPersistVtbl;
struct IPictureDisp;
struct IPictureVtbl;
struct IPinInfoVtbl;
struct IPropertyBag;
struct IPropertyMap;
struct IRASCallback;
struct IROTDataVtbl;
struct IRTCProfile2;
struct IRTCSession2;
struct IRTCWatcher2;
struct IRadioButton;
struct IRadioPlayer;
struct IRadioServer;
struct IRequestVtbl;
struct IRootStorage;
struct IRowPosition;
struct IRowsetIndex;
struct IScriptEntry;
struct ISdpWalkVtbl;
struct ISegmentList;
struct ISegmentVtbl;
struct ISensNetwork;
struct IShellFolder;
struct ISniffStream;
struct ISoftDistExt;
struct IStemmerVtbl;
struct IStorageVtbl;
struct ITIMEElement;
struct ITIMEFactory;
struct ITableRename;
struct ITargetFrame;
struct ITaskTrigger;
struct ITaskbarList;
struct ITransaction;
struct ITravelEntry;
struct ITravelLogEx;
struct ITypeFactory;
struct ITypeLibVtbl;
struct ITypeMarshal;
struct IUPnPDevices;
struct IUPnPService;
struct IUnknownVtbl;
struct IVersionHost;
struct IVideoWindow;
struct IViewChapter;
struct IViewObject2;
struct IVoIPMgrVtbl;
struct IWSDLService;
struct IWebBrowser2;
struct IWebViewVtbl;
struct IWinInetInfo;
struct IWordBreaker;
struct IXMLDocument;
struct IXMLElement2;
struct IXSLTemplate;
struct IntelliForms;
struct MSGQUEUEINFO;
struct MessengerApp;
struct PropertiesUI;
struct SAXXMLReader;
struct SENS_QOCINFO;
struct SPC_SIGINFO_;
struct ShellMoniker;
struct ShellWindows;
struct THROTTLEITEM;
struct _AFPROTOCOLS;
struct _AMMediaType;
struct _AMVPDIMINFO;
struct _AppInfoData;
struct _CARD_STATUS;
struct _CEDBASEINFO;
struct _CEOIDINFOEX;
struct _CREDENTIALA;
struct _CREDENTIALW;
struct _CRL_CONTEXT;
struct _CSADDR_INFO;
struct _CTL_CONTEXT;
struct _DDGAMMARAMP;
struct _DDOVERLAYFX;
struct _DEBUG_EVENT;
struct _DMA_ADAPTER;
struct _DTBLMVDDLBX;
struct _FILE_OBJECT;
struct _HSE_TF_INFO;
struct _INFO_ISATAP;
struct _INSTALLDATA;
union _INSTALLSPEC;
struct _LMEM_RECENT;
struct _MIBICMPINFO;
struct _MIB_BEST_IF;
struct _MIB_ICMP_EX;
struct _MIB_IFTABLE;
struct _MIB_IPSTATS;
struct _MONTHLYDATE;
struct _NSP_ROUTINE;
struct _OBEX_HEADER;
struct _OS_DEP_DATA;
struct _PAINTSTRUCT;
struct _POWER_DESCR;
union _POWER_STATE;
struct _PRIVKEYVER3;
struct _QOS_SD_MODE;
struct _RPC_MESSAGE;
struct _RPC_VERSION;
struct _SHFILEINFOA;
struct _SHFILEINFOW;
struct _SLPSTRArray;
struct _SSLPROTOCOL;
struct _SShortArray;
struct _SYSTEM_INFO;
struct _SecPkgInfoA;
struct _SecPkgInfoW;
struct _TOKEN_OWNER;
struct _UUID_VECTOR;
struct _WCE_IAS_SET;
struct _WSATHREADID;
struct _XCPT_ACTION;
struct __CEL_BUFFER;
struct __CEL_HEADER;
struct _avioldindex;
struct _avistdindex;
struct _devicemodeA;
struct _devicemodeW;
struct _tagBINDINFO;
struct _tagDATAINFO;
struct _tagHLBWINFO;
struct _tagHLTBINFO;
struct _tagITEMPROP;
struct _tagPROPBAG2;
struct _tagTASKDATA;
struct _userHBITMAP;
struct _userHGLOBAL;
struct _wireBRECORD;
struct _wireVARIANT;
struct ldapcontrolA;
struct ldapcontrolW;
struct ldapsortkeyA;
struct ldapsortkeyW;
struct sockaddr_atm;
union sockaddr_gen;
struct sockaddr_in6;
struct tagARRAYDESC;
struct tagBIND_OPTS;
struct tagCOLUMNSET;
struct tagDBBINDEXT;
struct tagDBBINDING;
struct tagDBCONTENT;
struct tagDBPROPSET;
struct tagDBSETFUNC;
struct tagERRORINFO;
struct tagEXCEPINFO;
struct tagFORMATETC;
struct tagGUIDELINE;
struct tagHH_AKLINK;
struct tagIXPRESULT;
struct tagLVCOLUMNA;
struct tagLVCOLUMNW;
struct tagLVKEYDOWN;
struct tagMIXERCAPS;
struct tagMQQMPROPS;
struct tagMQSORTKEY;
struct tagMQSORTSET;
struct tagNMHEADERA;
struct tagNMHEADERW;
struct tagNMNEWMENU;
struct tagNNTPGROUP;
struct tagOBO_TOKEN;
struct tagPAGERANGE;
struct tagPARAMDATA;
struct tagPARAMDESC;
struct tagQACONTROL;
struct tagREBARINFO;
struct tagRGBTRIPLE;
struct tagSAFEARRAY;
struct tagSTGMEDIUM;
struct tagSTOREINFO;
struct tagSTYLEBUFA;
struct tagSTYLEBUFW;
struct tagTCKEYDOWN;
struct tagTOOLINFOA;
struct tagTOOLINFOW;
struct tagTPMPARAMS;
struct tagTVKEYDOWN;
struct tagVIDEOINFO;
struct tagWINDOWPOS;
struct tagWNDCLASSA;
struct tagWNDCLASSW;
struct timecaps_tag;
struct AnchorClick;
struct CDeviceRect;
struct CLayoutRect;
struct COpsProfile;
struct CSpinButton;
struct D3DXVECTOR4;
struct DOMDocument;
struct DispHTMLImg;
struct Folder2Vtbl;
struct Folder3Vtbl;
struct FolderItem2;
struct FolderItems;
struct HDRVPHONE__;
struct HINSTANCE__;
struct HMETAFILE__;
struct HMIDISTRM__;
struct HMIXEROBJ__;
struct HPHONEAPP__;
struct HPROVIDER__;
struct HTAPICALL__;
struct HTAPILINE__;
struct HTMLBGsound;
struct HTMLHistory;
struct HTMLWindow2;
struct IACListVtbl;
struct IADCCtlVtbl;
struct IAMCrossbar;
struct IAMPlayList;
struct IAccessible;
struct IActiveIME2;
struct IAdviseSink;
struct IAlterIndex;
struct IAlterTable;
struct IAsyncPProt;
struct IAttachVtbl;
struct IBaseFilter;
struct IBasicAudio;
struct IBasicVideo;
struct ICatAdmVtbl;
struct ICifRWGroup;
struct IClientCaps;
struct IComBinding;
struct IDBInfoVtbl;
struct IDSOControl;
struct IDSPlayerEx;
struct IDVDROMVtbl;
struct IDVDTimeMap;
struct IDXGradient;
struct IDataFilter;
struct IDataObject;
struct IDccManSink;
struct IDccManVtbl;
struct IDeviceEnum;
struct IDeviceRect;
struct IDialEngine;
struct IDirectDraw;
struct IDispatchEx;
struct IDropSource;
struct IDropTarget;
struct IDvdCmdVtbl;
struct IDvdControl;
struct IEnumHLITEM;
struct IEnumIDList;
struct IEnumScript;
struct IEnumString;
struct IFilterInfo;
struct IFilterVtbl;
struct IFtpWebView;
struct IGetRowVtbl;
struct IGetSession;
struct IHTMLDialog;
struct IHTMLEditor;
struct IHTMLScreen;
struct IHTMLStyle2;
struct IHTMLStyle3;
struct IHTMLStyle4;
struct IHTMLTable2;
struct IHTMLTable3;
struct IHeaderEnum;
struct IHlinkFrame;
struct IIMCallback;
struct IImgCtxVtbl;
struct IImnAccount;
struct ILayoutRect;
struct IMAPIFolder;
struct IMAPIStatus;
struct IMDFindVtbl;
struct IMallocVtbl;
struct IMediaEvent;
struct IMemoryData;
struct IMsgrOEVtbl;
struct IMsgrObject;
struct IMsgrSPVtbl;
struct IMsgrUserOE;
struct INSPlayVtbl;
struct INetCfgLock;
struct INetCfgVtbl;
struct IObexDevice;
struct IObjMgrVtbl;
struct IOleControl;
struct IOpenRowset;
struct IPStoreVtbl;
struct IParserVtbl;
struct IPhraseSink;
struct IPropertyUI;
struct IQueryFormA;
struct IQueryFormW;
struct IRTCClient2;
struct IRTCProfile;
struct IRTCSession;
struct IRTCWatcher;
struct IRecalcHost;
struct IRecordInfo;
struct IRowsetFind;
struct IRowsetInfo;
struct IRowsetKeys;
struct IRowsetView;
struct IRowsetVtbl;
struct IRpcOptions;
struct ISAXLocator;
struct ISOAPClient;
struct ISOAPServer;
struct IScriptNode;
struct ISearchVtbl;
struct IServerVtbl;
struct IShellLinkA;
struct IShellLinkW;
struct IShellView2;
struct ISoapMapper;
struct ISoapReader;
struct ISpinButton;
struct IStreamVtbl;
struct IUPnPDevice;
struct IViewFilter;
struct IViewObject;
struct IViewRowset;
struct IVoIPUIVtbl;
struct IWABExtInit;
struct IWABOBJECT_;
struct IWSDLReader;
struct IWebBrowser;
struct IXMLDOMNode;
struct IXMLDOMText;
struct IXMLElement;
struct IXTLRuntime;
struct IpTransport;
struct MXXMLWriter;
struct MediaPlayer;
struct P3PResource;
struct PeerFactory;
struct PropertyBag;
struct RowPosition;
struct TIMEFactory;
struct WSDLService;
struct XMLDocument;
struct XMLParser26;
struct XMLParser30;
struct XSLTemplate;
struct _ACE_HEADER;
struct _AM_DVD_YUV;
struct _AsyncIOReq;
struct _CEFILEINFO;
struct _CERT_CHAIN;
union _CEVALUNION;
struct _COAUTHINFO;
struct _COMMCONFIG;
struct _DDBLTBATCH;
struct _DDCAPS_DX3;
struct _DDCAPS_DX5;
struct _DDCAPS_DX6;
struct _DDCOLORKEY;
struct _DOT11_SSID;
struct _DTBLBUTTON;
struct _DVD_REGION;
struct _DWORD_BLOB;
struct _FilterInfo;
struct _GDI_OBJECT;
struct _ITEMIDLIST;
struct _LIST_ENTRY;
struct _MAPINAMEID;
struct _MIB_TCPROW;
struct _MIB_UDPROW;
struct _MODULEINFO;
struct _MONTHLYDOW;
struct _MYCANDLIST;
struct _OVERLAPPED;
struct _PUBKEYVER3;
struct _PubAppInfo;
struct _RELAY_INFO;
struct _RPC_POLICY;
struct _RTL_BITMAP;
struct _SEC_OBJECT;
struct _SGuidArray;
struct _SLongArray;
struct _SPropValue;
struct _SRealArray;
struct _SSLCIPHERS;
struct _SSortOrder;
struct _SYSTEMTIME;
struct _TAPE_ERASE;
struct _TOKEN_USER;
struct _USB_DEVICE;
struct _VAR_STRING;
struct _WINDOWDATA;
struct _WSAVersion;
struct __CEL_SLEEP;
struct _browseinfo;
struct _charformat;
struct _numberfmtA;
struct _numberfmtW;
struct _userBITMAP;
struct in6_pktinfo;
struct ip_msfilter;
struct midihdr_tag;
struct sockaddr_in;
struct tagBSTRBLOB;
struct tagCALPWSTR;
struct tagCLIPDATA;
struct tagCOLORKEY;
struct tagCUSTDATA;
struct tagDBBYGUID;
struct tagDBOBJECT;
struct tagDBPARAMS;
struct tagDBVECTOR;
struct tagDEVNAMES;
struct tagELEMDESC;
struct tagFINDBODY;
struct tagFONTDESC;
struct tagFUNCDESC;
struct tagHHNTRACK;
struct tagHH_POPUP;
struct tagHWXGUIDE;
struct tagIMAPADDR;
struct tagINETADDR;
struct tagLOGBRUSH;
struct tagLOGFONTA;
struct tagLOGFONTW;
struct tagMULTI_QI;
struct tagNMRGINFO;
struct tagNNTPLIST;
struct tagNNTPNEXT;
struct tagNNTPXHDR;
struct tagPARTINFO;
struct tagPICTDESC;
struct tagPOP3LIST;
struct tagPOP3RETR;
struct tagPOP3STAT;
struct tagPOP3UIDL;
struct tagPROPSPEC;
struct tagRemBRUSH;
struct tagSTATDATA;
struct tagTLIBATTR;
struct tagTVSORTCB;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagVERBLOCK;
struct tagVERGRAPH;
struct wavehdr_tag;
struct CActiveIMM;
struct CMimeTypes;
struct CScrollBar;
struct CSliderBar;
struct ClientCaps;
struct DSOControl;
struct DXGradient;
struct DXPMSAMPLE;
struct FolderItem;
struct FolderVtbl;
struct FtpWebView;
struct HADDRESS__;
struct HCHARSET__;
struct HDRVCALL__;
struct HDRVLINE__;
struct HLINEAPP__;
struct HMIDIOUT__;
struct HMONITOR__;
struct HPALETTE__;
struct HTMLDialog;
struct HTMLIFrame;
struct HTMLScreen;
struct HTMPERFCTL;
struct HWAVEOUT__;
struct IAMRebuild;
struct IAMTVTuner;
struct IActiveIME;
struct IAudioData;
struct ICSSFilter;
struct ICifRWFile;
struct ICifRWMode;
struct ICopyHookA;
struct ICopyHookW;
struct ICreateRow;
struct ICustomDoc;
struct IDVDDomain;
struct IDX2DDebug;
struct IDXSurface;
struct IDXTFilter;
struct IDirect3D8;
struct IDispError;
struct IErrorInfo;
struct IFontCache;
struct IFontNames;
struct IFsCiAdmin;
struct IHTMLCaret;
struct IHTMLPopup;
struct IHTMLStyle;
struct IHTMLTable;
struct IHashTable;
struct IHlinkSite;
struct IHlinkVtbl;
struct IInboxSink;
struct ILockBytes;
struct IMAPITable;
struct IMDDataset;
struct IMallocSpy;
struct IMsgrUsers;
struct INETSERVER;
struct IObex2Vtbl;
struct IOleCache2;
struct IOleObject;
struct IOleWindow;
struct IOmHistory;
struct IPrintVtbl;
struct IProxyInfo;
struct IQueryInfo;
struct IQueryVtbl;
struct IRTCBuddy2;
struct IRTCClient;
struct IRadioBand;
struct IRadioView;
struct IRangeList;
struct IRowChange;
struct ISOAPError;
struct IScrollBar;
struct ISdpRecord;
struct ISdpSearch;
struct ISdpStream;
struct ISensLogon;
struct ISensOnNow;
struct IShellIcon;
struct IShellView;
struct ISliderBar;
struct ISurrogate;
struct ITIMEState;
struct ITableData;
struct ITimerSink;
struct ITimerVtbl;
struct ITravelLog;
struct ITypeInfo2;
struct IWABObject;
struct IWebBridge;
struct IXMLParser;
struct MsgrObject;
struct SOCKHAND__;
struct SoapClient;
struct SoapMapper;
struct SoapReader;
struct SoapServer;
struct WSDLReader;
struct WebBrowser;
struct _AM_COLCON;
struct _BYTE_BLOB;
struct _CEDIRINFO;
struct _CEOIDINFO;
struct _CEPROPVAL;
struct _CERT_INFO;
struct _CERT_PAIR;
struct _CRL_ENTRY;
struct _CTL_ENTRY;
struct _CTL_USAGE;
struct _D3DLIGHT8;
struct _D3DMATRIX;
struct _D3DVECTOR;
struct _DDSCAPSEX;
struct _DROPFILES;
struct _DTBLDDLBX;
struct _DTBLLABEL;
struct _HD_LAYOUT;
struct _HMAC_Info;
struct _IMAGEINFO;
struct _IMAGELIST;
struct _INFO_6TO4;
struct _LDT_ENTRY;
struct _MAPHEADER;
struct _MAPIERROR;
struct _MIB_IFROW;
struct _NDIS_GUID;
struct _NM_UPDOWN;
struct _OFNOTIFYA;
struct _OFNOTIFYW;
struct _OLESTREAM;
struct _PSHNOTIFY;
struct _RPC_IF_ID;
struct _RSAPUBKEY;
struct _SPC_IMAGE;
struct _SecBuffer;
struct _SecHandle;
struct _TRIVERTEX;
struct _TRUSTEE_A;
struct _TRUSTEE_W;
struct _USB_FUNCS;
struct _WORD_BLOB;
struct _cpinfoexA;
struct _cpinfoexW;
struct _exception;
struct _riffchunk;
struct _tagImInfo;
struct _tagLMDATA;
struct _tagOLECMD;
struct _xml_error;
struct berelement;
struct in_pktinfo;
struct ldapsearch;
struct mmtime_tag;
struct tMIXERLINE;
union tagBINDPTR;
struct tagCACLSID;
struct tagCADWORD;
struct tagCALPSTR;
struct tagCASCODE;
struct tagDVD_ATR;
struct tagIDLDESC;
struct tagIMEINFO;
struct tagLICINFO;
struct tagLVITEMA;
struct tagLVITEMW;
struct tagNMMOUSE;
struct tagNMREBAR;
struct tagOLEVERB;
struct tagPAGESET;
struct tagPOP3TOP;
struct tagQuality;
struct tagRGBQUAD;
struct tagRMTPACK;
struct tagSIPINFO;
struct tagSORTKEY;
struct tagSORTSET;
struct tagSTATSTG;
struct tagTCITEMA;
struct tagTCITEMW;
struct tagTVITEMA;
struct tagTVITEMW;
struct tagVARDESC;
struct tagVARIANT;
struct ARTICLEID;
struct CCheckBox;
struct CCombobox;
struct CEventObj;
struct CHtmlArea;
struct DX2DXFORM;
struct DXRUNINFO;
struct DXSurface;
struct DXTFilter;
struct FontNames;
struct HACMOBJ__;
struct HBITMAP__;
struct HMIDIIN__;
struct HTMLEmbed;
struct HTMLPopup;
struct HTMLStyle;
struct HTMLTable;
struct HWAVEIN__;
struct HWINSTA__;
struct IAccessor;
struct IAddrBook;
struct IBindHost;
struct ICheckBox;
struct ICifGroup;
struct ICombobox;
struct IContinue;
struct IDX2DVtbl;
struct IDXDCLock;
struct IDXEffect;
struct IDXTLabel;
struct IDXTScale;
struct IDeskBand;
struct IDispatch;
struct IDistList;
struct IDvdInfo2;
struct IDvdState;
struct IEnumGUID;
struct IEnumPins;
struct IErrorLog;
struct IFontDisp;
struct IFontVtbl;
struct IHTMLRect;
struct IHomePage;
struct IHtmlArea;
struct IInternet;
struct IJavaFile;
struct ILineInfo;
struct IMAPIProp;
struct IMXWriter;
struct IMailUser;
struct IMimeBody;
struct IMimeEdit;
struct IMimeInfo;
struct IMsgStore;
struct IMsgrUser;
struct IObexCaps;
struct IObexSink;
struct IObexVtbl;
struct IOleCache;
struct IProfSect;
struct IProgSink;
struct IPropData;
struct IQualProp;
struct IRTCBuddy;
struct IReadData;
struct IResponse;
struct IScopeAdm;
struct ISearches;
struct IShellApp;
struct IStemSink;
struct ITaskVtbl;
struct IThumbCtl;
struct ITypeComp;
struct ITypeInfo;
struct ITypeLib2;
struct IViewSort;
struct IWSDLPort;
struct IWordSink;
struct IXMLError;
struct Iwfolders;
struct P3PSignal;
struct PostAgent;
struct RTCClient;
struct SPC_LINK_;
struct Scriptlet;
struct SdpRecord;
struct SdpSearch;
struct SdpStream;
struct SdpString;
struct VirusScan;
struct XACTSTATS;
struct XMLHTTP26;
struct XMLHTTP30;
struct XMLParser;
struct _ADRENTRY;
struct _AMVPSIZE;
struct _CERT_RDN;
struct _CI_STATE;
struct _COMMPROP;
struct _CPS_URLS;
struct _CRL_INFO;
struct _CTL_INFO;
struct _D3DCAPS8;
struct _D3DRANGE;
struct _DBGPARAM;
struct _DDOSCAPS;
struct _DDSCAPS2;
struct _DOCINFOA;
struct _DOCINFOW;
struct _DSCBCAPS;
struct _DTBLEDIT;
struct _DTBLPAGE;
struct _FILETIME;
struct _FLOAT128;
struct _FPO_DATA;
struct _HD_ITEMA;
struct _HD_ITEMW;
struct _ICONINFO;
struct _MIB_ICMP;
struct _MMCKINFO;
struct _MMIOINFO;
struct _OBJECTID;
struct _PCI_RSRC;
struct _RIP_INFO;
struct _SCH_CRED;
struct _SHITEMID;
struct _StrEntry;
struct _StrTable;
struct _TBBUTTON;
struct _cqform_A;
struct _cqform_W;
struct _cqpage_A;
struct _cqpage_W;
struct _flaglist;
struct _flowspec;
struct _rifflist;
union _timecode;
struct ipv6_mreq;
struct l_timeval;
struct sockproto;
struct tagBITMAP;
struct tagCABOOL;
struct tagCABSTR;
struct tagCADATE;
struct tagCAUUID;
struct tagDBCOST;
struct tagDBDATE;
struct tagDBLIKE;
struct tagDBPROP;
struct tagDBTEXT;
struct tagDBTIME;
struct tagHLITEM;
struct tagLOGPEN;
struct tagPOINTF;
struct tagPOINTS;
struct tagRemSNB;
struct CDLAgent;
struct CPlugins;
struct DXCBND64;
struct DXDBND64;
struct DXFPOINT;
struct DXSAMPLE;
struct DXTLabel;
struct DXTScale;
struct HACCEL__;
struct HBRUSH__;
struct HMIXER__;
struct HPHONE__;
struct HTMLBody;
struct HomePage;
struct IACList2;
struct IAMTuner;
struct IBindCtx;
struct IBinding;
struct ICifFile;
struct ICifMode;
struct ICommand;
struct IDVDMenu;
struct IDvdInfo;
struct IEnumDMO;
struct IMarshal;
struct IMessage;
struct IMoniker;
struct IMultiQI;
struct INSOPlay;
struct INSPlay1;
struct IOleLink;
struct IOverlay;
struct IPersist;
struct IPicture;
struct IPinInfo;
struct IPinVtbl;
struct IROTData;
struct IRequest;
struct IRowVtbl;
struct ISdpWalk;
struct ISegment;
struct IStemmer;
struct IStorage;
struct ITypeLib;
struct IUnknown;
struct IVoIPMgr;
struct IWebView;
struct MimeEdit;
struct NodeData;
struct Response;
struct ScopeAdm;
struct ThumbCtl;
struct WSDLPort;
struct WebCheck;
struct _ADRLIST;
struct _ADRPARM;
struct _CERT_ID;
struct _COMSTAT;
struct _CONTEXT;
struct _CabInfo;
struct _D3DRECT;
struct _DDBLTFX;
struct _DDSCAPS;
struct _DSBCAPS;
struct _DSCCAPS;
struct _DSSSEED;
struct _DTBLLBX;
struct _HMAPPER;
struct _MAPIUID;
struct _PinInfo;
struct _RGNDATA;
struct _SBinary;
struct _SRowSet;
struct _STATURL;
struct _UDACCEL;
struct _UINT128;
struct _complex;
struct addrinfo;
struct in6_addr;
struct ldapmodA;
struct ldapmodW;
struct protoent;
struct sockaddr;
struct tTPCE_FS;
struct tTPCE_IF;
struct tTPCE_IO;
struct tTPCE_IR;
struct tTPCE_MI;
struct tTPCE_MS;
struct tTPCE_PD;
struct tTPCE_TD;
struct tagACCEL;
struct tagCADBL;
struct tagCAFLT;
struct tagINPUT;
struct tagNMHDR;
struct tagNMKEY;
struct tagPOINT;
struct tagRANGE;
struct tagSHRGI;
struct tagXFORM;
struct wfolders;
struct DVDData;
struct DXBRUSH;
struct Folder2;
struct Folder3;
struct HBODY__;
struct HCALL__;
struct HDESK__;
struct HDRVR__;
struct HFONT__;
struct HGLRC__;
struct HHOOK__;
struct HICON__;
struct HLINE__;
struct HMENU__;
struct HMIDI__;
struct HMMIO__;
struct HRSRC__;
struct HTASK__;
struct HTMLImg;
struct HWAVE__;
struct IACList;
struct IADCCtl;
struct IAttach;
struct ICatAdm;
struct IDBInfo;
struct IDVDROM;
struct IDccMan;
struct IDvdCmd;
struct IFilter;
struct IGetRow;
struct IImgCtx;
struct IMDFind;
struct IMalloc;
struct IMsgrOE;
struct IMsgrSP;
struct INSPlay;
struct INetCfg;
struct IObjMgr;
struct IPStore;
struct IParser;
struct IRowset;
struct ISearch;
struct IServer;
struct IStream;
struct IVoIPUI;
struct Request;
struct SdpWalk;
struct SyncMgr;
struct VoIPMgr;
struct WSAData;
struct WSPData;
struct WebView;
struct XACTOPT;
struct XMLHTTP;
struct _CEBLOB;
struct _CEGUID;
struct _D3DBOX;
struct _DDARGB;
struct _DDRGBA;
struct _DSCAPS;
struct _INT128;
struct _NT_TIB;
struct _POINTL;
struct _PUBKEY;
struct _REGINI;
struct _STRING;
struct _STRRET;
struct _WEEKLY;
struct _WSABUF;
struct _cpinfo;
struct _ldiv_t;
struct hostent;
struct in_addr;
struct ip_mreq;
struct ldapmsg;
struct servent;
struct tagBLOB;
struct tagCACY;
struct tagCAUB;
struct tagCAUH;
struct tagCAUI;
struct tagCAUL;
struct tagCRGB;
struct tagDBID;
struct tagOFNA;
struct tagOFNW;
struct tagOIFI;
struct tagPSDA;
struct tagPSDW;
struct tagRECT;
struct tagSIZE;
struct timeval;
struct ADCCtl;
struct CatAdm;
struct DXBNDS;
struct DXCBND;
struct DXDBND;
struct Folder;
struct HKEY__;
struct HPEN__;
struct HRGN__;
struct HSTR__;
struct HWND__;
struct IHlink;
struct IObex2;
struct IPrint;
struct IQuery;
struct ITimer;
struct Server;
struct _COORD;
struct _DAILY;
struct _NMSHN;
struct _RECTL;
struct _div_t;
struct berval;
struct fd_set;
struct linger;
struct netent;
struct tDGTPL;
struct tagCAH;
struct tagCAI;
struct tagCAL;
struct tagDEC;
struct tagMSG;
struct DXPEN;
struct DXVEC;
struct HDC__;
struct HKL__;
struct HRC__;
struct IDX2D;
struct IFont;
struct IObex;
struct ITask;
struct Shell;
struct _GUID;
struct _KDPC;
struct _LUID;
struct _SRow;
struct lconv;
union tagCY;
struct tagPD;
struct BOID;
struct DX2D;
struct IPin;
struct IRow;
struct Obex;
struct SENS;
struct TIME;
struct _ABC;
struct _ACL;
struct _DCB;
struct _IDA;
struct _IRP;
struct _MDL;
struct _PSP;
struct _SID;
struct ldap;
union _PV;
struct tm;

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A {unsigned int NameOffset : 31;unsigned int NameIsString : 1;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 {unsigned int OffsetToDirectory : 31;unsigned int DataIsDirectory : 1;};
struct _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF___A9FC48894F8D14019CAF4D8F08A526D6 {unsigned int DeviceNumber : 5;unsigned int FunctionNumber : 3;unsigned int Reserved : 24;};
struct _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324 {float _11;float _12;float _13;float _14;float _21;float _22;float _23;float _24;float _31;float _32;float _33;float _34;float _41;float _42;float _43;float _44;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E {unsigned int BaseMid : 8;unsigned int Type : 5;unsigned int Dpl : 2;unsigned int Pres : 1;unsigned int LimitHi : 4;unsigned int Sys : 1;unsigned int Reserved_0 : 1;unsigned int Default_Big : 1;unsigned int Granularity : 1;unsigned int BaseHi : 8;};
union _22AB0003247B482AF4559A70859CB27B___1764B377E4534D27D10578FBFD4626DA {void *pFormParameters;IPropertyBag *ppbFormParameters;};
union _C0D59FBB56C2A4C81C123E710A248183___1764B377E4534D27D10578FBFD4626DA {void *pFormParameters;IPropertyBag *ppbFormParameters;};
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 {void **XlatTable;unsigned char *StateTable;unsigned int NumberOfEntries;};
union _CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843 {struct _PROVDATA_SIP *pPDSip;};
struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E {short left;short top;short right;short bottom;};
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB {struct WINTRUST_FILE_INFO_ *pFile;struct WINTRUST_CATALOG_INFO_ *pCatalog;struct WINTRUST_BLOB_INFO_ *pBlob;struct WINTRUST_SGNR_INFO_ *pSgnr;struct WINTRUST_CERT_INFO_ *pCert;};
typedef struct _E3900F4E8C66B34C84E740787FDB0DE9 *LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _E3900F4E8C66B34C84E740787FDB0DE9 GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3 {unsigned int Lo;int Hi;};
enum MACRO_LINETRANSLATERESULT_NOTRANSLATION {LINETRANSLATERESULT_NOTRANSLATION = 0x800,};
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009 {int hInproc;int hRemote;};
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION *PNDIS_TAPI_CONDITIONAL_MEDIA_DETECTION;
typedef struct _NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION *PNDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct IDebugPropertyEnumType_LocalsPlusArgs {struct IDebugPropertyEnumType_LocalsPlusArgsVtbl *lpVtbl;};
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION;
typedef struct _NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO *PWTD_GENERIC_CHAIN_POLICY_CREATE_INFO;
typedef struct _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO *PWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO;
enum __MIDL___MIDL_itf_voipstore_0000_0001 {VOIP_INVALID_SPEED_DIAL_ENTRY = 0xFFFFFFFF,};
enum __MIDL___MIDL_itf_xmlparser_0000_0001 {XML_ELEMENT = 0x1,XML_ATTRIBUTE = 0x2,XML_PI = 0x3,XML_XMLDECL = 0x4,XML_DOCTYPE = 0x5,XML_DTDATTRIBUTE = 0x6,XML_ENTITYDECL = 0x7,XML_ELEMENTDECL = 0x8,XML_ATTLISTDECL = 0x9,XML_NOTATION = 0xA,XML_GROUP = 0xB,XML_INCLUDESECT = 0xC,XML_PCDATA = 0xD,XML_CDATA = 0xE,XML_IGNORESECT = 0xF,XML_COMMENT = 0x10,XML_ENTITYREF = 0x11,XML_WHITESPACE = 0x12,XML_NAME = 0x13,XML_NMTOKEN = 0x14,XML_STRING = 0x15,XML_PEREF = 0x16,XML_MODEL = 0x17,XML_ATTDEF = 0x18,XML_ATTTYPE = 0x19,XML_ATTPRESENCE = 0x1A,XML_DTDSUBSET = 0x1B,XML_LASTNODETYPE = 0x1C,};
enum __MIDL___MIDL_itf_xmlparser_0000_0002 {XML_VERSION = 0x1C,XML_ENCODING = 0x1D,XML_STANDALONE = 0x1E,XML_NS = 0x1F,XML_XMLSPACE = 0x20,XML_XMLLANG = 0x21,XML_SYSTEM = 0x22,XML_PUBLIC = 0x23,XML_NDATA = 0x24,XML_AT_CDATA = 0x25,XML_AT_ID = 0x26,XML_AT_IDREF = 0x27,XML_AT_IDREFS = 0x28,XML_AT_ENTITY = 0x29,XML_AT_ENTITIES = 0x2A,XML_AT_NMTOKEN = 0x2B,XML_AT_NMTOKENS = 0x2C,XML_AT_NOTATION = 0x2D,XML_AT_REQUIRED = 0x2E,XML_AT_IMPLIED = 0x2F,XML_AT_FIXED = 0x30,XML_PENTITYDECL = 0x31,XML_EMPTY = 0x32,XML_ANY = 0x33,XML_MIXED = 0x34,XML_SEQUENCE = 0x35,XML_CHOICE = 0x36,XML_STAR = 0x37,XML_PLUS = 0x38,XML_QUESTIONMARK = 0x39,XML_LASTSUBNODETYPE = 0x3A,};
enum __MIDL___MIDL_itf_xmlparser_0000_0003 {XML_E_PARSEERRORBASE = 0xC00CE500,XML_E_ENDOFINPUT = 0xC00CE500,XML_E_MISSINGEQUALS = 0xC00CE501,XML_E_MISSINGQUOTE = 0xC00CE502,XML_E_COMMENTSYNTAX = 0xC00CE503,XML_E_BADSTARTNAMECHAR = 0xC00CE504,XML_E_BADNAMECHAR = 0xC00CE505,XML_E_BADCHARINSTRING = 0xC00CE506,XML_E_XMLDECLSYNTAX = 0xC00CE507,XML_E_BADCHARDATA = 0xC00CE508,XML_E_MISSINGWHITESPACE = 0xC00CE509,XML_E_EXPECTINGTAGEND = 0xC00CE50A,XML_E_BADCHARINDTD = 0xC00CE50B,XML_E_BADCHARINDECL = 0xC00CE50C,XML_E_MISSINGSEMICOLON = 0xC00CE50D,XML_E_BADCHARINENTREF = 0xC00CE50E,XML_E_UNBALANCEDPAREN = 0xC00CE50F,XML_E_EXPECTINGOPENBRACKET = 0xC00CE510,XML_E_BADENDCONDSECT = 0xC00CE511,XML_E_INTERNALERROR = 0xC00CE512,XML_E_UNEXPECTED_WHITESPACE = 0xC00CE513,XML_E_INCOMPLETE_ENCODING = 0xC00CE514,XML_E_BADCHARINMIXEDMODEL = 0xC00CE515,XML_E_MISSING_STAR = 0xC00CE516,XML_E_BADCHARINMODEL = 0xC00CE517,XML_E_MISSING_PAREN = 0xC00CE518,XML_E_BADCHARINENUMERATION = 0xC00CE519,XML_E_PIDECLSYNTAX = 0xC00CE51A,XML_E_EXPECTINGCLOSEQUOTE = 0xC00CE51B,XML_E_MULTIPLE_COLONS = 0xC00CE51C,XML_E_INVALID_DECIMAL = 0xC00CE51D,XML_E_INVALID_HEXIDECIMAL = 0xC00CE51E,XML_E_INVALID_UNICODE = 0xC00CE51F,XML_E_WHITESPACEORQUESTIONMARK = 0xC00CE520,XML_E_ENDOFPE = 0xC00CE521,XML_E_TOKEN_ERROR = 0xC00CE550,XML_E_SUSPENDED = 0xC00CE550,XML_E_STOPPED = 0xC00CE551,XML_E_UNEXPECTEDENDTAG = 0xC00CE552,XML_E_UNCLOSEDTAG = 0xC00CE553,XML_E_DUPLICATEATTRIBUTE = 0xC00CE554,XML_E_MULTIPLEROOTS = 0xC00CE555,XML_E_INVALIDATROOTLEVEL = 0xC00CE556,XML_E_BADXMLDECL = 0xC00CE557,XML_E_MISSINGROOT = 0xC00CE558,XML_E_UNEXPECTEDEOF = 0xC00CE559,XML_E_BADPEREFINSUBSET = 0xC00CE55A,XML_E_PE_NESTING = 0xC00CE55B,XML_E_INVALID_CDATACLOSINGTAG = 0xC00CE55C,XML_E_UNCLOSEDPI = 0xC00CE55D,XML_E_UNCLOSEDSTARTTAG = 0xC00CE55E,XML_E_UNCLOSEDENDTAG = 0xC00CE55F,XML_E_UNCLOSEDSTRING = 0xC00CE560,XML_E_UNCLOSEDCOMMENT = 0xC00CE561,XML_E_UNCLOSEDDECL = 0xC00CE562,XML_E_UNCLOSEDMARKUPDECL = 0xC00CE563,XML_E_UNCLOSEDCDATA = 0xC00CE564,XML_E_BADDECLNAME = 0xC00CE565,XML_E_BADEXTERNALID = 0xC00CE566,XML_E_BADELEMENTINDTD = 0xC00CE567,XML_E_RESERVEDNAMESPACE = 0xC00CE568,XML_E_EXPECTING_VERSION = 0xC00CE569,XML_E_EXPECTING_ENCODING = 0xC00CE56A,XML_E_EXPECTING_NAME = 0xC00CE56B,XML_E_UNEXPECTED_ATTRIBUTE = 0xC00CE56C,XML_E_ENDTAGMISMATCH = 0xC00CE56D,XML_E_INVALIDENCODING = 0xC00CE56E,XML_E_INVALIDSWITCH = 0xC00CE56F,XML_E_EXPECTING_NDATA = 0xC00CE570,XML_E_INVALID_MODEL = 0xC00CE571,XML_E_INVALID_TYPE = 0xC00CE572,XML_E_INVALIDXMLSPACE = 0xC00CE573,XML_E_MULTI_ATTR_VALUE = 0xC00CE574,XML_E_INVALID_PRESENCE = 0xC00CE575,XML_E_BADXMLCASE = 0xC00CE576,XML_E_CONDSECTINSUBSET = 0xC00CE577,XML_E_CDATAINVALID = 0xC00CE578,XML_E_INVALID_STANDALONE = 0xC00CE579,XML_E_UNEXPECTED_STANDALONE = 0xC00CE57A,XML_E_DOCTYPE_IN_DTD = 0xC00CE57B,XML_E_MISSING_ENTITY = 0xC00CE57C,XML_E_ENTITYREF_INNAME = 0xC00CE57D,XML_E_DOCTYPE_OUTSIDE_PROLOG = 0xC00CE57E,XML_E_INVALID_VERSION = 0xC00CE57F,XML_E_DTDELEMENT_OUTSIDE_DTD = 0xC00CE580,XML_E_DUPLICATEDOCTYPE = 0xC00CE581,XML_E_RESOURCE = 0xC00CE582,XML_E_MISSINGNAME = 0xC00CE583,XML_E_LASTERROR = 0xC00CE584,};
enum __MIDL___MIDL_itf_xmlparser_0000_0004 {XMLPARSER_IDLE = 0x0,XMLPARSER_WAITING = 0x1,XMLPARSER_BUSY = 0x2,XMLPARSER_ERROR = 0x3,XMLPARSER_STOPPED = 0x4,XMLPARSER_SUSPENDED = 0x5,};
enum __MIDL___MIDL_itf_xmlparser_0000_0005 {XMLFLAG_FLOATINGAMP = 0x1,XMLFLAG_SHORTENDTAGS = 0x2,XMLFLAG_CASEINSENSITIVE = 0x4,XMLFLAG_NONAMESPACES = 0x8,XMLFLAG_NOWHITESPACE = 0x10,XMLFLAG_IE4QUIRKS = 0x20,XMLFLAG_NODTDNODES = 0x40,XMLFLAG_IE4COMPATIBILITY = 0xFF,XMLFLAG_IE5COMPATIBILITY = 0x100,XMLFLAG_SAX = 0x200,XMLFLAG_NORMALIZELB = 0x400,XMLFLAG_IGNOREENCODING = 0x800,XMLFLAG_USEWINHTTP = 0x1000,XMLFLAG_RUNBUFFERONLY = 0x2000,};
enum __MIDL___MIDL_itf_xmlparser_0000_0006 {XMLNF_STARTDOCUMENT = 0x0,XMLNF_STARTDTD = 0x1,XMLNF_ENDDTD = 0x2,XMLNF_STARTDTDSUBSET = 0x3,XMLNF_ENDDTDSUBSET = 0x4,XMLNF_ENDPROLOG = 0x5,XMLNF_STARTENTITY = 0x6,XMLNF_ENDENTITY = 0x7,XMLNF_ENDDOCUMENT = 0x8,XMLNF_DATAAVAILABLE = 0x9,XMLNF_LASTEVENT = 0x9,};
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _C25693052C43ED6AA003F87DB66344AA *LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE;
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY *LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum MACRO_EVENT_EventlogAbnormalShutdown {EVENT_EventlogAbnormalShutdown = 0x80001778,EVENT_EventLogProductInfo = 0x80001779,EVENT_ServiceNoEventLog = 0xC000177A,EVENT_ComputerNameChange = 0xC000177B,EVENT_DNSDomainNameChange = 0xC000177C,EVENT_UP_DRIVER_ON_MP = 0xC00017D4,EVENT_SERVICE_START_FAILED = 0xC0001B58,EVENT_SERVICE_START_FAILED_II = 0xC0001B59,EVENT_SERVICE_START_FAILED_GROUP = 0xC0001B5A,EVENT_SERVICE_START_FAILED_NONE = 0xC0001B5B,EVENT_CALL_TO_FUNCTION_FAILED = 0xC0001B5D,EVENT_CALL_TO_FUNCTION_FAILED_II = 0xC0001B5E,EVENT_REVERTED_TO_LASTKNOWNGOOD = 0xC0001B5F,EVENT_BAD_ACCOUNT_NAME = 0xC0001B60,EVENT_CONNECTION_TIMEOUT = 0xC0001B61,EVENT_READFILE_TIMEOUT = 0xC0001B62,EVENT_TRANSACT_TIMEOUT = 0xC0001B63,EVENT_TRANSACT_INVALID = 0xC0001B64,EVENT_FIRST_LOGON_FAILED = 0xC0001B65,EVENT_SECOND_LOGON_FAILED = 0xC0001B66,EVENT_INVALID_DRIVER_DEPENDENCY = 0xC0001B67,EVENT_BAD_SERVICE_STATE = 0xC0001B68,EVENT_CIRCULAR_DEPENDENCY_DEMAND = 0xC0001B69,EVENT_CIRCULAR_DEPENDENCY_AUTO = 0xC0001B6A,EVENT_DEPEND_ON_LATER_SERVICE = 0xC0001B6B,EVENT_DEPEND_ON_LATER_GROUP = 0xC0001B6C,EVENT_SEVERE_SERVICE_FAILED = 0xC0001B6D,EVENT_SERVICE_START_HUNG = 0xC0001B6E,EVENT_SERVICE_EXIT_FAILED = 0xC0001B6F,EVENT_SERVICE_EXIT_FAILED_SPECIFIC = 0xC0001B70,EVENT_SERVICE_START_AT_BOOT_FAILED = 0xC0001B71,EVENT_BOOT_SYSTEM_DRIVERS_FAILED = 0xC0001B72,EVENT_RUNNING_LASTKNOWNGOOD = 0xC0001B73,EVENT_TAKE_OWNERSHIP = 0xC0001B74,};
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CO_AF_TAPI_INCOMING_CALL_PARAMETERS *PCO_AF_TAPI_INCOMING_CALL_PARAMETERS;
typedef struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY *PDOT11_MULTI_DOMAIN_CAPABILITY_ENTRY;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _NDIS_802_11_ASSOCIATION_INFORMATION *PNDIS_802_11_ASSOCIATION_INFORMATION;
typedef struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION *PNDIS_BPC_MEDIA_SPECIFIC_INFORMATION;
typedef struct _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO WTD_GENERIC_CHAIN_POLICY_CREATE_INFO;
typedef struct _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO;
enum __MIDL_IInternetSecurityManager_0001 {PUAF_DEFAULT = 0x0,PUAF_NOUI = 0x1,PUAF_ISFILE = 0x2,PUAF_WARN_IF_DENIED = 0x4,PUAF_FORCEUI_FOREGROUND = 0x8,PUAF_CHECK_TIFS = 0x10,PUAF_DONTCHECKBOXINDIALOG = 0x20,PUAF_TRUSTED = 0x40,PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,PUAF_ENFORCERESTRICTED = 0x100,};
enum __MIDL_IInternetSecurityManager_0002 {SZM_CREATE = 0x0,SZM_DELETE = 0x1,};
enum __MIDL___MIDL_itf_amstream_0000_0001 {AMMSF_NOGRAPHTHREAD = 0x1,};
enum __MIDL___MIDL_itf_amstream_0000_0002 {AMMSF_ADDDEFAULTRENDERER = 0x1,AMMSF_CREATEPEER = 0x2,};
enum __MIDL___MIDL_itf_amstream_0000_0003 {AMMSF_RENDERTYPEMASK = 0x3,AMMSF_RENDERTOEXISTING = 0x0,AMMSF_RENDERALLSTREAMS = 0x1,AMMSF_NORENDER = 0x2,AMMSF_NOCLOCK = 0x4,AMMSF_RUN = 0x8,};
enum __MIDL___MIDL_itf_amstream_0000_0004 {Disabled = 0x0,ReadData = 0x1,RenderData = 0x2,};
enum __MIDL___MIDL_itf_ddstream_0000_0001 {DDSFF_PROGRESSIVERENDER = 0x1,};
enum __MIDL___MIDL_itf_mmstream_0000_0001 {STREAMTYPE_READ = 0x0,STREAMTYPE_WRITE = 0x1,STREAMTYPE_TRANSFORM = 0x2,};
enum __MIDL___MIDL_itf_mmstream_0000_0002 {STREAMSTATE_STOP = 0x0,STREAMSTATE_RUN = 0x1,};
enum __MIDL___MIDL_itf_mmstream_0000_0003 {COMPSTAT_NOUPDATEOK = 0x1,COMPSTAT_WAIT = 0x2,COMPSTAT_ABORT = 0x4,};
enum __MIDL___MIDL_itf_mmstream_0000_0004 {MMSSF_HASCLOCK = 0x1,MMSSF_SUPPORTSEEK = 0x2,MMSSF_ASYNCHRONOUS = 0x4,};
enum __MIDL___MIDL_itf_mmstream_0000_0005 {SSUPDATE_ASYNC = 0x1,SSUPDATE_CONTINUOUS = 0x2,};
enum __MIDL___MIDL_itf_qnetwork_0082_0001 {AM_EXSEEK_CANSEEK = 0x1,AM_EXSEEK_CANSCAN = 0x2,AM_EXSEEK_MARKERSEEK = 0x4,AM_EXSEEK_SCANWITHOUTCLOCK = 0x8,AM_EXSEEK_NOSTANDARDREPAINT = 0x10,AM_EXSEEK_BUFFERING = 0x20,AM_EXSEEK_SENDS_VIDEOFRAMEREADY = 0x40,};
enum __MIDL___MIDL_itf_shobjidl_0116_0001 {SHCOLSTATE_TYPE_STR = 0x1,SHCOLSTATE_TYPE_INT = 0x2,SHCOLSTATE_TYPE_DATE = 0x3,SHCOLSTATE_TYPEMASK = 0xF,SHCOLSTATE_ONBYDEFAULT = 0x10,SHCOLSTATE_SLOW = 0x20,SHCOLSTATE_EXTENDED = 0x40,SHCOLSTATE_SECONDARYUI = 0x80,SHCOLSTATE_HIDDEN = 0x100,};
enum __MIDL___MIDL_itf_shobjidl_0117_0001 {FWF_AUTOARRANGE = 0x1,FWF_ABBREVIATEDNAMES = 0x2,FWF_SNAPTOGRID = 0x4,FWF_OWNERDATA = 0x8,FWF_BESTFITWINDOW = 0x10,FWF_DESKTOP = 0x20,FWF_SINGLESEL = 0x40,FWF_NOSUBFOLDERS = 0x80,FWF_TRANSPARENT = 0x100,FWF_NOCLIENTEDGE = 0x200,FWF_NOSCROLL = 0x400,FWF_ALIGNLEFT = 0x800,FWF_NOICONS = 0x1000,FWF_SHOWSELALWAYS = 0x2000,FWF_NOVISIBLE = 0x4000,FWF_SINGLECLICKACTIVATE = 0x8000,FWF_NOWEBVIEW = 0x10000,FWF_HIDEFILENAMES = 0x20000,};
enum __MIDL___MIDL_itf_shobjidl_0117_0002 {FVM_ICON = 0x1,FVM_SMALLICON = 0x2,FVM_LIST = 0x3,FVM_DETAILS = 0x4,};
enum __MIDL___MIDL_itf_shobjidl_0117_0004 {SVUIA_DEACTIVATE = 0x0,SVUIA_ACTIVATE_NOFOCUS = 0x1,SVUIA_ACTIVATE_FOCUS = 0x2,SVUIA_INPLACEACTIVATE = 0x3,};
enum __MIDL___MIDL_itf_shobjidl_0122_0001 {CFINITF_CHILDREN = 0x0,CFINITF_FLAT = 0x1,};
enum __MIDL___MIDL_itf_shobjidl_0124_0001 {PUIF_DEFAULT = 0x0,PUIF_RIGHTALIGN = 0x1,PUIF_NOLABELININFOTIP = 0x2,};
enum __MIDL___MIDL_itf_shobjidl_0124_0002 {PUIFFDF_DEFAULT = 0x0,PUIFFDF_RIGHTTOLEFT = 0x1,PUIFFDF_SHORTFORMAT = 0x2,PUIFFDF_NOTIME = 0x4,PUIFFDF_FRIENDLYDATE = 0x8,PUIFFDF_NOUNITS = 0x10,};
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CO_AF_TAPI_INCOMING_CALL_PARAMETERS CO_AF_TAPI_INCOMING_CALL_PARAMETERS;
typedef struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _7909BF26B031C365F3B32F82E7366E93 *LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;
typedef struct _INTERNET_CACHE_CONFIG_PATH_ENTRYA *LPINTERNET_CACHE_CONFIG_PATH_ENTRYA;
typedef struct _INTERNET_CACHE_CONFIG_PATH_ENTRYW *LPINTERNET_CACHE_CONFIG_PATH_ENTRYW;
typedef struct _FD737F0F5708B21CCBC55006761FC7AF *LPINTERNET_SECURITY_CONNECTION_INFO;
typedef struct _NDIS_802_11_ASSOCIATION_INFORMATION NDIS_802_11_ASSOCIATION_INFORMATION;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _NDIS_802_11_AUTHENTICATION_REQUEST *PNDIS_802_11_AUTHENTICATION_REQUEST;
typedef struct _SecPkgContext_RemoteCredentialInfo *PSecPkgContext_RemoteCredentialInfo;
enum _NDIS_802_11_NETWORK_INFRASTRUCTURE {Ndis802_11IBSS = 0x0,Ndis802_11Infrastructure = 0x1,Ndis802_11AutoUnknown = 0x2,Ndis802_11InfrastructureMax = 0x3,};
enum tagEOLE_AUTHENTICATION_CAPABILITIES {EOAC_NONE = 0x0,EOAC_MUTUAL_AUTH = 0x1,EOAC_SECURE_REFS = 0x2,EOAC_ACCESS_CONTROL = 0x4,EOAC_APPID = 0x8,EOAC_DYNAMIC = 0x10,};
enum tagSUPPORTS_BINDING_INTERFACE_FLAGS {NCF_LOWER = 0x1,NCF_UPPER = 0x2,};
typedef struct _EB59546A6B00F9787175E0D2790469DD ATM_BROADBAND_BEARER_CAPABILITY_IE;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _C25693052C43ED6AA003F87DB66344AA GOPHER_ORGANIZATION_ATTRIBUTE_TYPE;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct IRTCSessionOperationCompleteEvent2 {struct IRTCSessionOperationCompleteEvent2Vtbl *lpVtbl;};
enum MACRO_DISPID_IHTMLDOCUMENTFRAGMENT {DISPID_IHTMLDOCUMENTFRAGMENT_DOCUMENT = 70678,};
enum MACRO_raatARAPPasswordChangeReason {raatARAPPasswordChangeReason = 21,};
typedef struct _NDIS_802_11_AUTHENTICATION_REQUEST NDIS_802_11_AUTHENTICATION_REQUEST;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CO_TAPI_TRANSLATE_NDIS_CALLPARAMS *PCO_TAPI_TRANSLATE_NDIS_CALLPARAMS;
typedef struct _CO_TAPI_TRANSLATE_TAPI_CALLPARAMS *PCO_TAPI_TRANSLATE_TAPI_CALLPARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _DOT11_CURRENT_OPTIONAL_CAPABILITY *PDOT11_CURRENT_OPTIONAL_CAPABILITY;
typedef struct _DOT11_DIVERSITY_SELECTION_RX_LIST *PDOT11_DIVERSITY_SELECTION_RX_LIST;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS *PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _NDIS_TAPI_LINE_CONFIG_DIALOG_EDIT *PNDIS_TAPI_LINE_CONFIG_DIALOG_EDIT;
typedef struct _SecPkgContext_LocalCredentialInfo *PSecPkgContext_LocalCredentialInfo;
typedef struct _SecPkgContext_RemoteCredentialInfo SecPkgContext_RemoteCredentialInfo;
typedef unsigned char *( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE {D3DSIO_NOP = 0x0,D3DSIO_MOV = 0x1,D3DSIO_ADD = 0x2,D3DSIO_SUB = 0x3,D3DSIO_MAD = 0x4,D3DSIO_MUL = 0x5,D3DSIO_RCP = 0x6,D3DSIO_RSQ = 0x7,D3DSIO_DP3 = 0x8,D3DSIO_DP4 = 0x9,D3DSIO_MIN = 0xA,D3DSIO_MAX = 0xB,D3DSIO_SLT = 0xC,D3DSIO_SGE = 0xD,D3DSIO_EXP = 0xE,D3DSIO_LOG = 0xF,D3DSIO_LIT = 0x10,D3DSIO_DST = 0x11,D3DSIO_LRP = 0x12,D3DSIO_FRC = 0x13,D3DSIO_M4x4 = 0x14,D3DSIO_M4x3 = 0x15,D3DSIO_M3x4 = 0x16,D3DSIO_M3x3 = 0x17,D3DSIO_M3x2 = 0x18,D3DSIO_TEXCOORD = 0x40,D3DSIO_TEXKILL = 0x41,D3DSIO_TEX = 0x42,D3DSIO_TEXBEM = 0x43,D3DSIO_TEXBEML = 0x44,D3DSIO_TEXREG2AR = 0x45,D3DSIO_TEXREG2GB = 0x46,D3DSIO_TEXM3x2PAD = 0x47,D3DSIO_TEXM3x2TEX = 0x48,D3DSIO_TEXM3x3PAD = 0x49,D3DSIO_TEXM3x3TEX = 0x4A,D3DSIO_TEXM3x3DIFF = 0x4B,D3DSIO_TEXM3x3SPEC = 0x4C,D3DSIO_TEXM3x3VSPEC = 0x4D,D3DSIO_EXPP = 0x4E,D3DSIO_LOGP = 0x4F,D3DSIO_CND = 0x50,D3DSIO_DEF = 0x51,D3DSIO_TEXLOAD = 0x52,D3DSIO_TEXDEPTH = 0x53,D3DSIO_CMP = 0x54,D3DSIO_COMMENT = 0xFFFE,D3DSIO_END = 0xFFFF,D3DSIO_FORCE_DWORD = 0x7FFFFFFF,};
enum __MIDL___MIDL_itf_dvdnav_0000_0002 {DVD_STOPPED = 0x0,DVD_PAUSED = 0x1,DVD_STILLED = 0x2,DVD_NORMAL_PLAY = 0x3,DVD_FORWARD_SCAN = 0x4,DVD_FORWARD_SLOW = 0x5,DVD_FORWARD_SINGLE = 0x6,DVD_BACKWARD_SCAN = 0x7,DVD_BACKWARD_SLOW = 0x8,DVD_BACKWARD_SINGLE = 0x9,};
enum __MIDL___MIDL_itf_dvdnav_0115_0001 {InsufficientParentalLevel = 0x0,};
enum __MIDL___MIDL_itf_mssoap_0149_0001 {smInput = 0xFFFFFFFF,smOutput = 0x0,smInOut = 0x1,};
enum __MIDL___MIDL_itf_mssoap_0149_0002 {enXSDUndefined = 0xFFFFFFFF,enXSDDOM = 0x0,enXSDstring = 0x1,enXSDboolean = 0x2,enXSDfloat = 0x3,enXSDDouble = 0x4,enXSDdecimal = 0x5,enXSDtimeDuration = 0x6,enXSDrecurringDuration = 0x7,enXSDbinary = 0x8,enXSDuriReference = 0x9,enXSDid = 0xA,enXSDidRef = 0xB,enXSDentity = 0xC,enXSDQName = 0xD,enXSDcdata = 0xE,enXSDtoken = 0xF,enXSDlanguage = 0x10,enXSDidRefs = 0x11,enXSDentities = 0x12,enXSDnmtoken = 0x13,enXSDnmtokens = 0x14,enXSDname = 0x15,enXSDncname = 0x16,enXSDnotation = 0x17,enXSDinteger = 0x18,enXSDnonpositiveInteger = 0x19,enXSDlong = 0x1A,enXSDint = 0x1B,enXSDshort = 0x1C,enXSDbyte = 0x1D,enXSDnonNegativeInteger = 0x1E,enXSDnegativeInteger = 0x1F,enXSDunsignedLong = 0x20,enXSDunsignedInt = 0x21,enXSDunsignedShort = 0x22,enXSDunsignedByte = 0x23,enXSDpositiveInteger = 0x24,enXSDtimeInstant = 0x25,enXSDtime = 0x26,enXSDtimePeriod = 0x27,enXSDdate = 0x28,enXSDmonth = 0x29,enXSDyear = 0x2A,enXSDcentury = 0x2B,enXSDrecurringDate = 0x2C,enXSDrecurringDay = 0x2D,enXSDarray = 0x2E,enXSDanyType = 0x2F,enTKempty = 0x30,enXSDEndOfBuildin = 0x31,};
enum __MIDL___MIDL_itf_mssoap_0149_0003 {enDocumentLiteral = 0x0,enDocumentEncoded = 0x1,enRPCLiteral = 0x2,enRPCEncoded = 0x4,};
enum __MIDL___MIDL_itf_objidl_0051_0001 {COMBND_RPCTIMEOUT = 0x1,};
enum __MIDL___MIDL_itf_objidl_0056_0001 {COMBND_RPCSTRINGS = 0x1,};
enum __MIDL___MIDL_itf_strmif_0081_0001 {CK_NOCOLORKEY = 0x0,CK_INDEX = 0x1,CK_RGB = 0x2,};
enum __MIDL___MIDL_itf_strmif_0081_0002 {ADVISE_NONE = 0x0,ADVISE_CLIPPING = 0x1,ADVISE_PALETTE = 0x2,ADVISE_COLORKEY = 0x4,ADVISE_POSITION = 0x8,ADVISE_DISPLAY_CHANGE = 0x10,};
enum __MIDL___MIDL_itf_strmif_0087_0001 {AM_FILE_OVERWRITE = 0x1,};
enum __MIDL___MIDL_itf_strmif_0099_0001 {AM_STREAM_INFO_START_DEFINED = 0x1,AM_STREAM_INFO_STOP_DEFINED = 0x2,AM_STREAM_INFO_DISCARDING = 0x4,AM_STREAM_INFO_STOP_SEND_EXTRA = 0x10,};
enum __MIDL___MIDL_itf_strmif_0106_0001 {CompressionCaps_CanQuality = 0x1,CompressionCaps_CanCrunch = 0x2,CompressionCaps_CanKeyFrame = 0x4,CompressionCaps_CanBFrame = 0x8,CompressionCaps_CanWindow = 0x10,};
enum __MIDL___MIDL_itf_strmif_0109_0001 {VideoCopyProtectionMacrovisionBasic = 0x0,VideoCopyProtectionMacrovisionCBI = 0x1,};
enum __MIDL___MIDL_itf_strmif_0115_0001 {AMPROPERTY_PIN_CATEGORY = 0x0,AMPROPERTY_PIN_MEDIUM = 0x1,};
enum __MIDL___MIDL_itf_strmif_0218_0001 {UOP_FLAG_Play_Title_Or_AtTime = 0x1,UOP_FLAG_Play_Chapter = 0x2,UOP_FLAG_Play_Title = 0x4,UOP_FLAG_Stop = 0x8,UOP_FLAG_ReturnFromSubMenu = 0x10,UOP_FLAG_Play_Chapter_Or_AtTime = 0x20,UOP_FLAG_PlayPrev_Or_Replay_Chapter = 0x40,UOP_FLAG_PlayNext_Chapter = 0x80,UOP_FLAG_Play_Forwards = 0x100,UOP_FLAG_Play_Backwards = 0x200,UOP_FLAG_ShowMenu_Title = 0x400,UOP_FLAG_ShowMenu_Root = 0x800,UOP_FLAG_ShowMenu_SubPic = 0x1000,UOP_FLAG_ShowMenu_Audio = 0x2000,UOP_FLAG_ShowMenu_Angle = 0x4000,UOP_FLAG_ShowMenu_Chapter = 0x8000,UOP_FLAG_Resume = 0x10000,UOP_FLAG_Select_Or_Activate_Button = 0x20000,UOP_FLAG_Still_Off = 0x40000,UOP_FLAG_Pause_On = 0x80000,UOP_FLAG_Select_Audio_Stream = 0x100000,UOP_FLAG_Select_SubPic_Stream = 0x200000,UOP_FLAG_Select_Angle = 0x400000,UOP_FLAG_Select_Karaoke_Audio_Presentation_Mode = 0x800000,UOP_FLAG_Select_Video_Mode_Preference = 0x1000000,};
enum __MIDL___MIDL_itf_strmif_0218_0002 {DVD_CMD_FLAG_None = 0x0,DVD_CMD_FLAG_Flush = 0x1,DVD_CMD_FLAG_SendEvents = 0x2,DVD_CMD_FLAG_Block = 0x4,DVD_CMD_FLAG_StartWhenRendered = 0x8,DVD_CMD_FLAG_EndAfterRendered = 0x10,};
enum __MIDL___MIDL_itf_strmif_0218_0003 {DVD_ResetOnStop = 0x1,DVD_NotifyParentalLevelChange = 0x2,DVD_HMSF_TimeCodeEvents = 0x3,};
enum __MIDL___MIDL_itf_strmif_0218_0004 {DVD_Relative_Upper = 0x1,DVD_Relative_Lower = 0x2,DVD_Relative_Left = 0x3,DVD_Relative_Right = 0x4,};
enum _00A9EF80D0752E6AD1C123DD00564FAC {DBID_BANDINFOCHANGED = 0x0,DBID_SHOWONLY = 0x1,DBID_MAXIMIZEBAND = 0x2,DBID_PUSHCHEVRON = 0x3,DBID_DELAYINIT = 0x4,DBID_FINISHINIT = 0x5,};
enum _0275746270D304EF855C4BFBEBB3C1E0 {NameUnknown = 0x0,NameFullyQualifiedDN = 0x1,NameSamCompatible = 0x2,NameDisplay = 0x3,NameDomainSimple = 0x4,NameEnterpriseSimple = 0x5,NameUniqueId = 0x6,NameCanonical = 0x7,NameWindowsCeLocal = 0x80000001,};
enum _04ED89F01C0FDF2BC464E7F71D566769 {AM_PROPERTY_DVDCOPY_CHLG_KEY = 0x1,AM_PROPERTY_DVDCOPY_DVD_KEY1 = 0x2,AM_PROPERTY_DVDCOPY_DEC_KEY2 = 0x3,AM_PROPERTY_DVDCOPY_TITLE_KEY = 0x4,AM_PROPERTY_COPY_MACROVISION = 0x5,AM_PROPERTY_DVDCOPY_REGION = 0x6,AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 0x7,AM_PROPERTY_DVDCOPY_DISC_KEY = 0x80,};
enum _0AEECC1A63E1B2F73D11FBA74082B60B {PROXY_CALCSIZE = 0x0,PROXY_GETBUFFER = 0x1,PROXY_MARSHAL = 0x2,PROXY_SENDRECEIVE = 0x3,PROXY_UNMARSHAL = 0x4,};
struct _0B8D1429C3827E0DB460E98487EB6908 {unsigned int Inexact : 1;unsigned int Underflow : 1;unsigned int Overflow : 1;unsigned int ZeroDivide : 1;unsigned int InvalidOperation : 1;};
enum _0BB80D20224D17CF959CD73271A83581 {IpSuffixOriginOther = 0x0,IpSuffixOriginManual = 0x1,IpSuffixOriginWellKnown = 0x2,IpSuffixOriginDhcp = 0x3,IpSuffixOriginLinkLayerAddress = 0x4,IpSuffixOriginRandom = 0x5,};
enum _0E5E3CE1919E4CB6BACDF420F9AD9F51 {HTMPF_CALLBACK_ONLOAD = 0x1,HTMPF_ENABLE_PROFILE = 0x2,HTMPF_ENABLE_MEMWATCH = 0x4,HTMPF_DISABLE_PADEVENTS = 0x8,HTMPF_DISABLE_IMGCACHE = 0x10,HTMPF_DISABLE_OFFSCREEN = 0x20,HTMPF_DISABLE_ALERTS = 0x40,HTMPF_SYNC_DATABIND = 0x80,HTMPF_CALLBACK_ONLOAD2 = 0x100,};
struct _18FEA12C471CE0A4515515C42723EF45 {int iLow;int iHigh;};
enum _1D78DD8871C05E6FD7D3820402F49BC1 {IfOperStatusUp = 0x1,IfOperStatusDown = 0x2,IfOperStatusTesting = 0x3,IfOperStatusUnknown = 0x4,IfOperStatusDormant = 0x5,IfOperStatusNotPresent = 0x6,IfOperStatusLowerLayerDown = 0x7,};
enum _1F4D88D3C5C7FA82379873ED25DD5804 {P3P_Done = 0x0,P3P_Success = 0x0,P3P_NoPolicy = 0x2,P3P_InProgress = 0x3,P3P_Failed = 0x4,P3P_NotFound = 0x5,P3P_FormatErr = 0x6,P3P_Cancelled = 0x7,P3P_NotStarted = 0x8,P3P_XMLError = 0x9,P3P_Expired = 0xA,P3P_Error = 0xFF,};
enum _248C98C84AD026B4080DDE86FD8C0CD8 {FD_CLSID = 0x1,FD_SIZEPOINT = 0x2,FD_ATTRIBUTES = 0x4,FD_CREATETIME = 0x8,FD_ACCESSTIME = 0x10,FD_WRITESTIME = 0x20,FD_FILESIZE = 0x40,FD_PROGRESSUI = 0x4000,FD_LINKUI = 0x8000,};
enum _29DA7B98C2E2CB34CDBF24D85A286AD2 {AALTYPE_5 = 0x5,AALTYPE_USER = 0x10,};
enum _2A6324B8E10DEE2666A6A5498DFC667B {XLAT_SERVER = 0x1,XLAT_CLIENT = 0x2,};
enum _2CD99A42A273050CD294312F877025C7 {URL_PART_NONE = 0x0,URL_PART_SCHEME = 0x1,URL_PART_HOSTNAME = 0x2,URL_PART_USERNAME = 0x3,URL_PART_PASSWORD = 0x4,URL_PART_PORT = 0x5,URL_PART_QUERY = 0x6,};
enum _2CDA2EB3111AAC572E3B630ECADA79C3 {HH_TAB_CONTENTS = 0x0,HH_TAB_INDEX = 0x1,HH_TAB_SEARCH = 0x2,HH_TAB_BOOKMARKS = 0x3,HH_TAB_HISTORY = 0x4,};
enum _2D73D2DBF64DBC228937E220668B5E01 {DEFAULT = 0x0,AUTOMATIC = 0x1,ENABLED = 0x2,DISABLED = 0x3,};
enum _2E4D6E69AC5B406EE64EF4CFE7610CC3 {IE_AALParameters = 0x0,IE_TrafficDescriptor = 0x1,IE_BroadbandBearerCapability = 0x2,IE_BHLI = 0x3,IE_BLLI = 0x4,IE_CalledPartyNumber = 0x5,IE_CalledPartySubaddress = 0x6,IE_CallingPartyNumber = 0x7,IE_CallingPartySubaddress = 0x8,IE_Cause = 0x9,IE_QOSClass = 0xA,IE_TransitNetworkSelection = 0xB,};
enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 {ICMP4_ECHO_REPLY = 0x0,ICMP4_DST_UNREACH = 0x3,ICMP4_SOURCE_QUENCH = 0x4,ICMP4_REDIRECT = 0x5,ICMP4_ECHO_REQUEST = 0x8,ICMP4_ROUTER_ADVERT = 0x9,ICMP4_ROUTER_SOLICIT = 0xA,ICMP4_TIME_EXCEEDED = 0xB,ICMP4_PARAM_PROB = 0xC,ICMP4_TIMESTAMP_REQUEST = 0xD,ICMP4_TIMESTAMP_REPLY = 0xE,ICMP4_MASK_REQUEST = 0x11,ICMP4_MASK_REPLY = 0x12,};
enum _3A6E283929B5F392AC4E4FEBB8743BCE {IpDadStateInvalid = 0x0,IpDadStateTentative = 0x1,IpDadStateDuplicate = 0x2,IpDadStateDeprecated = 0x3,IpDadStatePreferred = 0x4,};
enum _3B2A1EAD1C50A2BC68F8CFAB6412CACA {URLIS_URL = 0x0,URLIS_OPAQUE = 0x1,URLIS_NOHISTORY = 0x2,URLIS_FILEURL = 0x3,URLIS_APPLIABLE = 0x4,URLIS_DIRECTORY = 0x5,URLIS_HASQUERY = 0x6,};
struct _3FA64165D15A4602C29B2D9B0DA4A5E9 {void *pad[2];void *userContext;};
enum _4218CD2CD980A290FF820393F4F33E3B {SHREGENUM_DEFAULT = 0x0,SHREGENUM_HKCU = 0x1,SHREGENUM_HKLM = 0x10,SHREGENUM_BOTH = 0x11,};
enum _46FA8580947879AEF19CA052F186390C {HHWIN_NAVTYPE_TOC = 0x0,HHWIN_NAVTYPE_INDEX = 0x1,HHWIN_NAVTYPE_SEARCH = 0x2,HHWIN_NAVTYPE_BOOKMARKS = 0x3,HHWIN_NAVTYPE_HISTORY = 0x4,};
enum _53EEC439051CDCA8BFC07626FF271DBE {SLGP_SHORTPATH = 0x1,SLGP_UNCPRIORITY = 0x2,SLGP_RAWPATH = 0x4,};
enum _54D1217281E665BD6612625E66C9E748 {LM_HB_Extension = 0x80,LM_HB1_PnP = 0x1,LM_HB1_PDA_Palmtop = 0x2,LM_HB1_Computer = 0x4,LM_HB1_Printer = 0x8,LM_HB1_Modem = 0x10,LM_HB1_Fax = 0x20,LM_HB1_LANAccess = 0x40,LM_HB2_Telephony = 0x1,LM_HB2_FileServer = 0x2,};
struct _5687B37E6A0F56297A2BB22AF6770AC6 {int fShowAllObjects : 1;int fShowExtensions : 1;int fNoConfirmRecycle : 1;int fShowSysFiles : 1;int fShowCompColor : 1;int fDoubleClickInWebView : 1;int fDesktopHTML : 1;int fWin95Classic : 1;int fDontPrettyPath : 1;int fShowAttribCol : 1;int fMapNetDrvBtn : 1;int fShowInfoTip : 1;int fHideIcons : 1;unsigned int fRestFlags : 3;};
union _57C85DECF0FD0199FAFF37B7119884AE {unsigned short _W[5];float _F;double _D;long double _L;};
enum _5BDA056A888DC5F03790D737B7575A6D {INTERNET_SCHEME_PARTIAL = 0xFFFFFFFE,INTERNET_SCHEME_UNKNOWN = 0xFFFFFFFF,INTERNET_SCHEME_DEFAULT = 0x0,INTERNET_SCHEME_FTP = 0x1,INTERNET_SCHEME_GOPHER = 0x2,INTERNET_SCHEME_HTTP = 0x3,INTERNET_SCHEME_HTTPS = 0x4,INTERNET_SCHEME_FILE = 0x5,INTERNET_SCHEME_NEWS = 0x6,INTERNET_SCHEME_MAILTO = 0x7,INTERNET_SCHEME_SOCKS = 0x8,INTERNET_SCHEME_JAVASCRIPT = 0x9,INTERNET_SCHEME_VBSCRIPT = 0xA,INTERNET_SCHEME_RES = 0xB,INTERNET_SCHEME_FIRST = 0x1,INTERNET_SCHEME_LAST = 0xB,};
enum _5FB78AF4F827B2D68807439224CA6C47 {OLECMDIDF_REFRESH_NORMAL = 0x0,OLECMDIDF_REFRESH_IFEXPIRED = 0x1,OLECMDIDF_REFRESH_CONTINUE = 0x2,OLECMDIDF_REFRESH_COMPLETELY = 0x3,OLECMDIDF_REFRESH_NO_CACHE = 0x4,OLECMDIDF_REFRESH_RELOAD = 0x5,OLECMDIDF_REFRESH_LEVELMASK = 0xFF,OLECMDIDF_REFRESH_CLEARUSERINPUT = 0x1000,OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 0x2000,OLECMDIDF_REFRESH_THROUGHSCRIPT = 0x4000,};
enum _62B5AE3153486754BCDD385B0C5A91E9 {IT_INCLUSIVE = 0x0,IT_EXCLUSIVE = 0x1,IT_HIDDEN = 0x2,};
struct _62EC1DAD6DB92F8723AD0A50B2259449 {unsigned char *UserName;unsigned char *ComputerName;unsigned short Privilege;unsigned int AuthFlags;};
enum _682EAAD0F97AB0EDCAD8B026B6112555 {ICMP6_DST_UNREACH = 0x1,ICMP6_PACKET_TOO_BIG = 0x2,ICMP6_TIME_EXCEEDED = 0x3,ICMP6_PARAM_PROB = 0x4,ICMP6_ECHO_REQUEST = 0x80,ICMP6_ECHO_REPLY = 0x81,ICMP6_MEMBERSHIP_QUERY = 0x82,ICMP6_MEMBERSHIP_REPORT = 0x83,ICMP6_MEMBERSHIP_REDUCTION = 0x84,ND_ROUTER_SOLICIT = 0x85,ND_ROUTER_ADVERT = 0x86,ND_NEIGHBOR_SOLICIT = 0x87,ND_NEIGHBOR_ADVERT = 0x88,ND_REDIRECT = 0x89,};
struct _683A376D3D72D8A4C1C01AE0B36D8AA2 {unsigned int W[4];};
enum _6FB945646DCDC979B45A0864DF90F90A {SHREGDEL_DEFAULT = 0x0,SHREGDEL_HKCU = 0x1,SHREGDEL_HKLM = 0x10,SHREGDEL_BOTH = 0x11,};
struct _72295A7541EC936D47FC3642EE72298B {unsigned short W[5];};
enum _72442BC1633A72B4A848039868482DB7 {triUnchecked = 0x0,triChecked = 0x1,triGray = 0x2,};
enum _7A041642E677561B10EFDE79481847F2 {AM_PROPERTY_AC3_ERROR_CONCEALMENT = 0x1,AM_PROPERTY_AC3_ALTERNATE_AUDIO = 0x2,AM_PROPERTY_AC3_DOWNMIX = 0x3,AM_PROPERTY_AC3_BIT_STREAM_MODE = 0x4,AM_PROPERTY_AC3_DIALOGUE_LEVEL = 0x5,AM_PROPERTY_AC3_LANGUAGE_CODE = 0x6,AM_PROPERTY_AC3_ROOM_TYPE = 0x7,};
enum _813E4059D2FE5A60AFFA8263D82D5409 {FORTSTAT_INSTALLED = 0x1,FORTSTAT_LOGGEDON = 0x2,};
struct _97DDCABA8DED8140EC93664CC20AFA42 {unsigned int W[2];};
enum _984B659830343E4BA783F718A3582EC0 {SLR_NO_UI = 0x1,SLR_ANY_MATCH = 0x2,SLR_UPDATE = 0x4,SLR_NOUPDATE = 0x8,SLR_NOSEARCH = 0x10,SLR_NOTRACK = 0x20,SLR_NOLINKINFO = 0x40,SLR_INVOKE_MSI = 0x80,};
enum _996FDA764447DF3B763A05A621ED2982 {VOIP_E_ENUMOUTOFDATE = 0x80CC0000,VOIP_E_NOTINITIALIZED = 0x80CC0001,VOIP_E_RECORDNOTINDB = 0x80CC0002,VOIP_E_ALREADYINITIALIZED = 0x80CC0003,VOIP_E_NODB = 0x80CC0004,VOIP_E_NOTCURRENTCALL = 0x80CC0005,VOIP_E_BUSY = 0x80CC0006,VOIP_E_NOACTIVECALL = 0x80CC0007,VOIP_E_TIMENOTSET = 0x80CC0008,VOIP_E_INVALIDCALLSTATUS = 0x80CC0009,VOIP_E_PROVISIONING_FAILED = 0x80CC000B,VOIP_E_NOMEDIAMGR = 0x80CC000C,VOIP_S_DONT_TERMINATE = 0xCC0000,};
enum _9EF127759E207CC5B87425543DA97D1F {AM_PROPERTY_DVDSUBPIC_PALETTE = 0x0,AM_PROPERTY_DVDSUBPIC_HLI = 0x1,AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 0x2,};
enum _9F5DEC71A9715652613D7AC79A3DFB57 {ASSOCENUM_NONE = 0x0,};
enum _A1B0741457D0C236B08E404ADB738CBD {WININET_SYNC_MODE_NEVER = 0x0,WININET_SYNC_MODE_ON_EXPIRY = 0x1,WININET_SYNC_MODE_ONCE_PER_SESSION = 0x2,WININET_SYNC_MODE_ALWAYS = 0x3,WININET_SYNC_MODE_AUTOMATIC = 0x4,WININET_SYNC_MODE_DEFAULT = 0x4,};
enum _A505905B9019AA97D205795F9CD1DA04 {AM_RATE_SimpleRateChange = 0x1,AM_RATE_ExactRateChange = 0x2,AM_RATE_MaxFullDataRate = 0x3,AM_RATE_Step = 0x4,};
enum _A6F0403CBCB089638ED65F4FF2DFF01F {ABSENT = 0x0,ASSIGNED = 0x1,PUBLISHED = 0x2,};
enum _A8507C63EE573B20DAD1A9891D0431FE {FORTCMD_LOGON = 0x1,FORTCMD_LOGOFF = 0x2,FORTCMD_CHG_PERSONALITY = 0x3,};
enum _AA1B996CE4852CFEBE5661E65097C982 {HHWIN_NAVTAB_TOP = 0x0,HHWIN_NAVTAB_LEFT = 0x1,HHWIN_NAVTAB_BOTTOM = 0x2,};
struct _AD47B7B6770F26FF00FF8EF46A9765CE {unsigned int Count;unsigned int Stats[1];};
enum _B2CD58BB5E151C37D855099D3E2FDD5A {STUB_UNMARSHAL = 0x0,STUB_CALL_SERVER = 0x1,STUB_MARSHAL = 0x2,STUB_CALL_SERVER_NO_HRESULT = 0x3,};
enum _B3BBE9873D99521DD98BD039DB6D363A {AM_DVDCOPYSTATE_INITIALIZE = 0x0,AM_DVDCOPYSTATE_INITIALIZE_TITLE = 0x1,AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 0x2,AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 0x3,AM_DVDCOPYSTATE_DONE = 0x4,};
enum _BA5933F1975D916FB246D1EEDB0FAC50 {ASSOCKEY_SHELLEXECCLASS = 0x1,ASSOCKEY_APP = 0x2,ASSOCKEY_CLASS = 0x3,ASSOCKEY_BASECLASS = 0x4,ASSOCKEY_MAX = 0x5,};
enum _BF99222CF03DF5552123F5B194CFC8CC {AM_MACROVISION_DISABLED = 0x0,AM_MACROVISION_LEVEL1 = 0x1,AM_MACROVISION_LEVEL2 = 0x2,AM_MACROVISION_LEVEL3 = 0x3,};
enum _C9C41CE7F7AB140BE1C872069B92FC11 {LT_DONT_CARE = 0x0,LT_LOWEST_LATENCY = 0x1,};
struct _C9FA87CB09885B34D96B23C89F19724B {int cSent;int cSuppressed; char *pszLocation;};
struct _CC81E267BD8B32E89ADB7AE662C05BFA {int Dimension;unsigned int *BufferConformanceMark;unsigned int *BufferVarianceMark;unsigned int *MaxCountArray;unsigned int *OffsetArray;unsigned int *ActualCountArray;};
enum _CDF15D895FCCE1726F8D6F94CFB8A0EF {IpPrefixOriginOther = 0x0,IpPrefixOriginManual = 0x1,IpPrefixOriginWellKnown = 0x2,IpPrefixOriginDhcp = 0x3,IpPrefixOriginRouterAdvertisement = 0x4,};
enum _D02A68EF54712B1F200C52B69E1D9509 {SHGFP_TYPE_CURRENT = 0x0,SHGFP_TYPE_DEFAULT = 0x1,};
enum _D1D25F7E59039EE4F06FC6A15C79D0DD {COOKIE_STATE_UNKNOWN = 0x0,COOKIE_STATE_ACCEPT = 0x1,COOKIE_STATE_PROMPT = 0x2,COOKIE_STATE_LEASH = 0x3,COOKIE_STATE_DOWNGRADE = 0x4,COOKIE_STATE_REJECT = 0x5,COOKIE_STATE_MAX = 0x5,};
enum _D8B5EF9138DF63A6B0F5D116ADA5F5F9 {LDAP_SUCCESS = 0x0,LDAP_OPERATIONS_ERROR = 0x1,LDAP_PROTOCOL_ERROR = 0x2,LDAP_TIMELIMIT_EXCEEDED = 0x3,LDAP_SIZELIMIT_EXCEEDED = 0x4,LDAP_COMPARE_FALSE = 0x5,LDAP_COMPARE_TRUE = 0x6,LDAP_AUTH_METHOD_NOT_SUPPORTED = 0x7,LDAP_STRONG_AUTH_REQUIRED = 0x8,LDAP_REFERRAL_V2 = 0x9,LDAP_PARTIAL_RESULTS = 0x9,LDAP_REFERRAL = 0xA,LDAP_ADMIN_LIMIT_EXCEEDED = 0xB,LDAP_UNAVAILABLE_CRIT_EXTENSION = 0xC,LDAP_CONFIDENTIALITY_REQUIRED = 0xD,LDAP_SASL_BIND_IN_PROGRESS = 0xE,LDAP_NO_SUCH_ATTRIBUTE = 0x10,LDAP_UNDEFINED_TYPE = 0x11,LDAP_INAPPROPRIATE_MATCHING = 0x12,LDAP_CONSTRAINT_VIOLATION = 0x13,LDAP_ATTRIBUTE_OR_VALUE_EXISTS = 0x14,LDAP_INVALID_SYNTAX = 0x15,LDAP_NO_SUCH_OBJECT = 0x20,LDAP_ALIAS_PROBLEM = 0x21,LDAP_INVALID_DN_SYNTAX = 0x22,LDAP_IS_LEAF = 0x23,LDAP_ALIAS_DEREF_PROBLEM = 0x24,LDAP_INAPPROPRIATE_AUTH = 0x30,LDAP_INVALID_CREDENTIALS = 0x31,LDAP_INSUFFICIENT_RIGHTS = 0x32,LDAP_BUSY = 0x33,LDAP_UNAVAILABLE = 0x34,LDAP_UNWILLING_TO_PERFORM = 0x35,LDAP_LOOP_DETECT = 0x36,LDAP_NAMING_VIOLATION = 0x40,LDAP_OBJECT_CLASS_VIOLATION = 0x41,LDAP_NOT_ALLOWED_ON_NONLEAF = 0x42,LDAP_NOT_ALLOWED_ON_RDN = 0x43,LDAP_ALREADY_EXISTS = 0x44,LDAP_NO_OBJECT_CLASS_MODS = 0x45,LDAP_RESULTS_TOO_LARGE = 0x46,LDAP_AFFECTS_MULTIPLE_DSAS = 0x47,LDAP_OTHER = 0x50,LDAP_SERVER_DOWN = 0x51,LDAP_LOCAL_ERROR = 0x52,LDAP_ENCODING_ERROR = 0x53,LDAP_DECODING_ERROR = 0x54,LDAP_TIMEOUT = 0x55,LDAP_AUTH_UNKNOWN = 0x56,LDAP_FILTER_ERROR = 0x57,LDAP_USER_CANCELLED = 0x58,LDAP_PARAM_ERROR = 0x59,LDAP_NO_MEMORY = 0x5A,LDAP_CONNECT_ERROR = 0x5B,LDAP_NOT_SUPPORTED = 0x5C,LDAP_NO_RESULTS_RETURNED = 0x5E,LDAP_CONTROL_NOT_FOUND = 0x5D,LDAP_MORE_RESULTS_TO_RETURN = 0x5F,LDAP_CLIENT_LOOP = 0x60,LDAP_REFERRAL_LIMIT_EXCEEDED = 0x61,};
struct _DA4DDC42953EF335ABBBEB43C6FEBDA6 {int cSession;int cPersistent;int cAccepted;int cLeashed;int cDowngraded;int cBlocked; char *pszLocation;};
enum _DE308DA4ABB68A11D1125697034C3BA2 {HHACT_TAB_CONTENTS = 0x0,HHACT_TAB_INDEX = 0x1,HHACT_TAB_SEARCH = 0x2,HHACT_TAB_HISTORY = 0x3,HHACT_TAB_FAVORITES = 0x4,HHACT_EXPAND = 0x5,HHACT_CONTRACT = 0x6,HHACT_BACK = 0x7,HHACT_FORWARD = 0x8,HHACT_STOP = 0x9,HHACT_REFRESH = 0xA,HHACT_HOME = 0xB,HHACT_SYNC = 0xC,HHACT_OPTIONS = 0xD,HHACT_PRINT = 0xE,HHACT_HIGHLIGHT = 0xF,HHACT_CUSTOMIZE = 0x10,HHACT_JUMP1 = 0x11,HHACT_JUMP2 = 0x12,HHACT_ZOOM = 0x13,HHACT_TOC_NEXT = 0x14,HHACT_TOC_PREV = 0x15,HHACT_NOTES = 0x16,HHACT_LAST_ENUM = 0x17,};
enum _DF2A3E261F64EFA73115E436629DF968 {SLDF_HAS_ID_LIST = 0x1,SLDF_HAS_LINK_INFO = 0x2,SLDF_HAS_NAME = 0x4,SLDF_HAS_RELPATH = 0x8,SLDF_HAS_WORKINGDIR = 0x10,SLDF_HAS_ARGS = 0x20,SLDF_HAS_ICONLOCATION = 0x40,SLDF_UNICODE = 0x80,SLDF_FORCE_NO_LINKINFO = 0x100,SLDF_HAS_EXP_SZ = 0x200,SLDF_RUN_IN_SEPARATE = 0x400,SLDF_HAS_LOGO3ID = 0x800,SLDF_HAS_DARWINID = 0x1000,SLDF_RUNAS_USER = 0x2000,SLDF_HAS_EXP_ICON_SZ = 0x4000,};
enum _E668158CB00FF6C266ACA08E9099CDD5 {ASSOCF_INIT_NOREMAPCLSID = 0x1,ASSOCF_INIT_BYEXENAME = 0x2,ASSOCF_OPEN_BYEXENAME = 0x2,ASSOCF_INIT_DEFAULTTOSTAR = 0x4,ASSOCF_INIT_DEFAULTTOFOLDER = 0x8,ASSOCF_NOUSERSETTINGS = 0x10,ASSOCF_NOTRUNCATE = 0x20,ASSOCF_VERIFY = 0x40,ASSOCF_REMAPRUNDLL = 0x80,ASSOCF_NOFIXUPS = 0x100,ASSOCF_IGNOREBASECLASS = 0x200,};
enum _E67F07BEF5FB1CC0FD9D634CC503A367 {ASSOCSTR_COMMAND = 0x1,ASSOCSTR_EXECUTABLE = 0x2,ASSOCSTR_FRIENDLYDOCNAME = 0x3,ASSOCSTR_FRIENDLYAPPNAME = 0x4,ASSOCSTR_NOOPEN = 0x5,ASSOCSTR_SHELLNEWVALUE = 0x6,ASSOCSTR_DDECOMMAND = 0x7,ASSOCSTR_DDEIFEXEC = 0x8,ASSOCSTR_DDEAPPLICATION = 0x9,ASSOCSTR_DDETOPIC = 0xA,ASSOCSTR_INFOTIP = 0xB,ASSOCSTR_QUICKTIP = 0xC,ASSOCSTR_MAX = 0xD,};
enum _EAACB91A6EC543964C9E2DF086A673AD {ScopeLevelInterface = 0x1,ScopeLevelLink = 0x2,ScopeLevelSubnet = 0x3,ScopeLevelAdmin = 0x4,ScopeLevelSite = 0x5,ScopeLevelOrganization = 0x8,ScopeLevelGlobal = 0xE,};
struct _F03B70C123AB6920C4DDA521DD856E56 {char String[16];};
enum _F1BA8CDCFBA28F212F1E4E8E8EFEC4E8 {ASSOCDATA_MSIDESCRIPTOR = 0x1,ASSOCDATA_NOACTIVATEHANDLER = 0x2,ASSOCDATA_QUERYCLASSSTORE = 0x3,ASSOCDATA_HASPERUSERASSOC = 0x4,ASSOCDATA_MAX = 0x5,};
enum _F8F6E62F94829530CB2AC753E31BC5A1 {URL_SCHEME_INVALID = 0xFFFFFFFF,URL_SCHEME_UNKNOWN = 0x0,URL_SCHEME_FTP = 0x1,URL_SCHEME_HTTP = 0x2,URL_SCHEME_GOPHER = 0x3,URL_SCHEME_MAILTO = 0x4,URL_SCHEME_NEWS = 0x5,URL_SCHEME_NNTP = 0x6,URL_SCHEME_TELNET = 0x7,URL_SCHEME_WAIS = 0x8,URL_SCHEME_FILE = 0x9,URL_SCHEME_MK = 0xA,URL_SCHEME_HTTPS = 0xB,URL_SCHEME_SHELL = 0xC,URL_SCHEME_SNEWS = 0xD,URL_SCHEME_LOCAL = 0xE,URL_SCHEME_JAVASCRIPT = 0xF,URL_SCHEME_VBSCRIPT = 0x10,URL_SCHEME_ABOUT = 0x11,URL_SCHEME_RES = 0x12,URL_SCHEME_MAXVALUE = 0x13,};
enum _FD7468A436FD7DE36BCFF090846836FD {ZALERT_NO = 0x0,ZALERT_YES = 0x1,ZALERT_YESPERSIST = 0x2,};
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE CERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CO_TAPI_TRANSLATE_NDIS_CALLPARAMS CO_TAPI_TRANSLATE_NDIS_CALLPARAMS;
typedef struct _CO_TAPI_TRANSLATE_TAPI_CALLPARAMS CO_TAPI_TRANSLATE_TAPI_CALLPARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _DOT11_CURRENT_OPTIONAL_CAPABILITY DOT11_CURRENT_OPTIONAL_CAPABILITY;
typedef struct _DOT11_DIVERSITY_SELECTION_RX_LIST DOT11_DIVERSITY_SELECTION_RX_LIST;
typedef struct _7909BF26B031C365F3B32F82E7366E93 GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _INTERNET_CACHE_CONFIG_PATH_ENTRYA INTERNET_CACHE_CONFIG_PATH_ENTRYA;
typedef struct _INTERNET_CACHE_CONFIG_PATH_ENTRYW INTERNET_CACHE_CONFIG_PATH_ENTRYW;
typedef struct _FD737F0F5708B21CCBC55006761FC7AF INTERNET_SECURITY_CONNECTION_INFO;
typedef struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS IP_UNIDIRECTIONAL_ADAPTER_ADDRESS;
struct IRTCSessionOperationCompleteEvent {struct IRTCSessionOperationCompleteEventVtbl *lpVtbl;};
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _ABC12D3D27847D90880B2A365197CC67 *LPINTERNET_DIAGNOSTIC_SOCKET_INFO;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;
enum MACRO_OID_DOT11_CURRENT_OPERATION {OID_DOT11_CURRENT_OPERATION_MODE = 218170120,OID_DOT11_CURRENT_PACKET_FILTER = 218170121,};
enum MACRO_SEF_ENCRYPTWITHNOSENDERCERT {SEF_ENCRYPTWITHNOSENDERCERT = 0x1,SEF_SENDERSCERTPROVIDED = 0x2,SEF_MASK = 0xFFFF,};
typedef struct _NDIS_TAPI_LINE_CONFIG_DIALOG_EDIT NDIS_TAPI_LINE_CONFIG_DIALOG_EDIT;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _DOT11_CURRENT_OFFLOAD_CAPABILITY *PDOT11_CURRENT_OFFLOAD_CAPABILITY;
typedef struct _DOT11_HOPPING_PATTERN_ENTRY_LIST *PDOT11_HOPPING_PATTERN_ENTRY_LIST;
typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE *PDOT11_SUPPORTED_DATA_RATES_VALUE;
typedef struct _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _SecPkgContext_LocalCredentialInfo SecPkgContext_LocalCredentialInfo;
enum __MIDL___MIDL_itf_ciodm_0000_0001 {csStopped = 0x1,csReadOnly = 0x2,csWritable = 0x4,};
enum __MIDL___MIDL_itf_mdisp_0000_0001 {MSTATEOE_UNKNOWN = 0x0,MSTATEOE_OFFLINE = 0x1,MSTATEOE_ONLINE = 0x2,MSTATEOE_INVISIBLE = 0x6,MSTATEOE_BUSY = 0xA,MSTATEOE_BE_RIGHT_BACK = 0xE,MSTATEOE_IDLE = 0x12,MSTATEOE_AWAY = 0x22,MSTATEOE_ON_THE_PHONE = 0x32,MSTATEOE_OUT_TO_LUNCH = 0x42,MSTATEOE_LOCAL_FINDING_SERVER = 0x100,MSTATEOE_LOCAL_CONNECTING_TO_SERVER = 0x200,MSTATEOE_LOCAL_SYNCHRONIZING_WITH_SERVER = 0x300,MSTATEOE_LOCAL_DISCONNECTING_FROM_SERVER = 0x400,};
enum __MIDL___MIDL_itf_mdisp_0000_0002 {MSGR_E_OE_CONNECT = 0x81000301,MSGR_E_OE_INVALID_SERVER_NAME = 0x81000302,MSGR_E_OE_INVALID_PASSWORD = 0x81000303,MSGR_E_OE_ALREADY_LOGGED_ON = 0x81000304,MSGR_E_OE_SERVER_VERSION = 0x81000305,MSGR_E_OE_LOGON_TIMEOUT = 0x81000306,MSGR_E_OE_LIST_FULL = 0x81000307,MSGR_E_OE_AI_REJECT = 0x81000308,MSGR_E_OE_AI_REJECT_NOT_INST = 0x81000309,MSGR_E_OE_USER_NOT_FOUND = 0x8100030A,MSGR_E_OE_ALREADY_IN_LIST = 0x8100030B,MSGR_E_OE_DISCONNECTED = 0x8100030C,MSGR_E_OE_UNEXPECTED = 0x8100030D,MSGR_E_OE_SERVER_TOO_BUSY = 0x8100030E,MSGR_E_OE_INVALID_AUTH_PACKAGES = 0x8100030F,MSGR_E_OE_NEWER_CLIENT_AVAILABLE = 0x81000310,MSGR_E_OE_AI_TIMEOUT = 0x81000311,MSGR_E_OE_CANCEL = 0x81000312,MSGR_E_OE_TOO_MANY_MATCHES = 0x81000313,MSGR_E_OE_SERVER_UNAVAILABLE = 0x81000314,MSGR_E_OE_LOGON_UI_ACTIVE = 0x81000315,MSGR_E_OE_OPTION_UI_ACTIVE = 0x81000316,MSGR_E_OE_CONTACT_UI_ACTIVE = 0x81000317,MSGR_E_OE_FAIL = 0x80004005,MSGR_S_OE_OK = 0x0,};
enum __MIDL___MIDL_itf_mdisp_0000_0003 {MSTATE_UNKNOWN = 0x0,MSTATE_OFFLINE = 0x1,MSTATE_ONLINE = 0x2,MSTATE_INVISIBLE = 0x6,MSTATE_BUSY = 0xA,MSTATE_BE_RIGHT_BACK = 0xE,MSTATE_IDLE = 0x12,MSTATE_AWAY = 0x22,MSTATE_ON_THE_PHONE = 0x32,MSTATE_OUT_TO_LUNCH = 0x42,MSTATE_LOCAL_FINDING_SERVER = 0x100,MSTATE_LOCAL_CONNECTING_TO_SERVER = 0x200,MSTATE_LOCAL_SYNCHRONIZING_WITH_SERVER = 0x300,MSTATE_LOCAL_DISCONNECTING_FROM_SERVER = 0x400,};
enum __MIDL___MIDL_itf_mdisp_0000_0004 {MPROMPT_YES_IF_NOT_ALLOWED_OR_BLOCKED = 0x0,MPROMPT_NO_ADD_TO_ALLOW = 0x1,};
enum __MIDL___MIDL_itf_mdisp_0000_0005 {MMSGPRIVACY_BLOCK_LIST_EXCLUDED = 0x0,MMSGPRIVACY_ALLOW_LIST_ONLY = 0x1,};
enum __MIDL___MIDL_itf_mdisp_0000_0006 {MUPDATECHOICE_OPTIONAL = 0x0,MUPDATECHOICE_MANDATORY = 0x1,};
enum __MIDL___MIDL_itf_mdisp_0000_0007 {MURLTYPE_CHANGE_PASSWORD = 0x0,MURLTYPE_CHANGE_INFO = 0x1,MURLTYPE_COMPOSE_EMAIL = 0x2,MURLTYPE_GO_TO_EMAIL_INBOX = 0x3,MURLTYPE_GO_TO_EMAIL_FOLDERS = 0x4,MURLTYPE_READ_EMAIL_MESSAGE = 0x5,MURLTYPE_FAQ = 0x6,MURLTYPE_GETTING_STARTED = 0x7,};
enum __MIDL___MIDL_itf_mdisp_0000_0008 {MLIST_CONTACT = 0x0,MLIST_ALLOW = 0x1,MLIST_BLOCK = 0x2,MLIST_REVERSE = 0x3,};
enum __MIDL___MIDL_itf_mdisp_0000_0009 {MMSGTYPE_NO_RESULT = 0x0,MMSGTYPE_ERRORS_ONLY = 0x1,MMSGTYPE_ALL_RESULTS = 0x2,};
enum __MIDL___MIDL_itf_mdisp_0000_0010 {MPFLFIELD_COUNTRY = 0x0,MPFLFIELD_POSTALCODE = 0x1,MPFLFIELD_LANG_PREFERENCE = 0x2,MPFLFIELD_GENDER = 0x3,MPFLFIELD_PREFERRED_EMAIL = 0x4,MPFLFIELD_NICKNAME = 0x5,MPFLFIELD_ACCESSIBILITY = 0x6,MPFLFIELD_WALLET = 0x7,MPFLFIELD_DIRECTORY = 0x8,MPFLFIELD_INETACCESS = 0x9,};
enum __MIDL___MIDL_itf_mdisp_0000_0011 {MSGR_E_CONNECT = 0x81000301,MSGR_E_INVALID_SERVER_NAME = 0x81000302,MSGR_E_INVALID_PASSWORD = 0x81000303,MSGR_E_ALREADY_LOGGED_ON = 0x81000304,MSGR_E_SERVER_VERSION = 0x81000305,MSGR_E_LOGON_TIMEOUT = 0x81000306,MSGR_E_LIST_FULL = 0x81000307,MSGR_E_AI_REJECT = 0x81000308,MSGR_E_AI_REJECT_NOT_INST = 0x81000309,MSGR_E_USER_NOT_FOUND = 0x8100030A,MSGR_E_ALREADY_IN_LIST = 0x8100030B,MSGR_E_DISCONNECTED = 0x8100030C,MSGR_E_UNEXPECTED = 0x8100030D,MSGR_E_SERVER_TOO_BUSY = 0x8100030E,MSGR_E_INVALID_AUTH_PACKAGES = 0x8100030F,MSGR_E_NEWER_CLIENT_AVAILABLE = 0x81000310,MSGR_E_AI_TIMEOUT = 0x81000311,MSGR_E_CANCEL = 0x81000312,MSGR_E_TOO_MANY_MATCHES = 0x81000313,MSGR_E_SERVER_UNAVAILABLE = 0x81000314,MSGR_E_LOGON_UI_ACTIVE = 0x81000315,MSGR_E_OPTION_UI_ACTIVE = 0x81000316,MSGR_E_CONTACT_UI_ACTIVE = 0x81000317,MSGR_E_PRIMARY_SERVICE_NOT_LOGGED_ON = 0x81000318,MSGR_E_LOGGED_ON = 0x81000319,MSGR_E_CONNECT_PROXY = 0x8100031A,MSGR_E_PROXY_AUTH = 0x8100031B,MSGR_E_PROXY_AUTH_TYPE = 0x8100031C,MSGR_E_INVALID_PROXY_NAME = 0x8100031D,MSGR_E_NOT_PRIMARY_SERVICE = 0x81000320,MSGR_E_TOO_MANY_SESSIONS = 0x81000321,MSGR_E_TOO_MANY_MESSAGES = 0x81000322,MSGR_E_REMOTE_LOGIN = 0x81000323,MSGR_E_INVALID_FRIENDLY_NAME = 0x81000324,MSGR_E_SESSION_FULL = 0x81000325,MSGR_E_NOT_ALLOWING_NEW_USERS = 0x81000326,MSGR_S_ALREADY_IN_THE_MODE = 0x1000301,MSGR_E_FAIL = 0x80004005,MSGR_S_OK = 0x0,};
enum __MIDL___MIDL_itf_mdisp_0000_0012 {SSTATE_DISCONNECTED = 0x0,SSTATE_CONNECTING = 0x1,SSTATE_CONNECTED = 0x2,SSTATE_DISCONNECTING = 0x3,};
enum __MIDL___MIDL_itf_mdisp_0000_0013 {MLOPT_PROXY_STATE = 0x0,MLOPT_PROXY_TYPE = 0x1,MLOPT_SOCKS4_SERVER = 0x2,MLOPT_SOCKS5_SERVER = 0x3,MLOPT_HTTPS_SERVER = 0x4,MLOPT_SOCKS4_PORT = 0x5,MLOPT_SOCKS5_PORT = 0x6,MLOPT_HTTPS_PORT = 0x7,MLOPT_SOCKS5_USERNAME = 0x8,MLOPT_SOCKS5_PASSWORD = 0x9,MLOPT_SERVER_NAME = 0xA,MLOPT_ENABLE_IDLE_DETECT = 0xB,MLOPT_IDLE_THRESHOLD = 0xC,MLOPT_IDLE_DETECTABLE = 0xD,MLOPT_SS_DETECTABLE = 0xE,};
enum __MIDL___MIDL_itf_mdisp_0000_0014 {MLOPT_MAX_SERVICE_STRING = 0xFF,MLOPT_MAX_PROXY_STRING = 0xFF,MLOPT_MAX_PORT_NUMBER = 0xFFFF,};
enum __MIDL___MIDL_itf_mdisp_0000_0015 {MPROXYTYPE_NO_PROXY = 0x0,MPROXYTYPE_SOCKS4 = 0x1,MPROXYTYPE_SOCKS5 = 0x2,MPROXYTYPE_HTTPS = 0x3,};
enum __MIDL___MIDL_itf_mdisp_0000_0016 {MOPTDLG_GENERAL_PAGE = 0x0,MOPTDLG_PRIVACY_PAGE = 0x1,MOPTDLG_EXCHANGE_PAGE = 0x2,MOPTDLG_ACCOUNTS_PAGE = 0x3,MOPTDLG_CONNECTION_PAGE = 0x4,};
enum __MIDL___MIDL_itf_mdisp_0000_0017 {MSF_PRIMARY = 0x1,MSF_APP_INVITE = 0x2,MSF_MULTI_IM = 0x4,MSF_BLOCKING = 0x8,MSF_UNAME_IN_EMAIL_FMT = 0x10,MSF_LOCAL_LISTS = 0x20,};
enum __MIDL___MIDL_itf_mdisp_0000_0018 {MSS_LOGGED_ON = 0x0,MSS_NOT_LOGGED_ON = 0x1,MSS_LOGGING_ON = 0x2,MSS_LOGGING_OFF = 0x3,};
typedef struct _0704266397680A28280F4A6885C4C35C ATM_TRANSIT_NETWORK_SELECTION_IE;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA CERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION CRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _DOT11_CURRENT_OFFLOAD_CAPABILITY DOT11_CURRENT_OFFLOAD_CAPABILITY;
typedef struct _DOT11_HOPPING_PATTERN_ENTRY_LIST DOT11_HOPPING_PATTERN_ENTRY_LIST;
typedef struct _DOT11_SUPPORTED_DATA_RATES_VALUE DOT11_SUPPORTED_DATA_RATES_VALUE;
struct IDebugPropertyEnumType_Arguments {struct IDebugPropertyEnumType_ArgumentsVtbl *lpVtbl;};
struct IDebugPropertyEnumType_Registers {struct IDebugPropertyEnumType_RegistersVtbl *lpVtbl;};
struct IElementNamespaceFactoryCallback {struct IElementNamespaceFactoryCallbackVtbl *lpVtbl;};
struct IOleControlNavigation2AdviseSink {struct IOleControlNavigation2AdviseSinkVtbl *lpVtbl;};
struct IRTCRegistrationStateChangeEvent {struct IRTCRegistrationStateChangeEventVtbl *lpVtbl;};
struct IUPnPDescriptionDocumentCallback {struct IUPnPDescriptionDocumentCallbackVtbl *lpVtbl;};
typedef struct _B8380904D5E4DBEF1FA17159C4574D89 *LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE;
typedef struct _DE8A226FBF6958721EC6E17746E96A38 *LPGOPHER_LOCATION_ATTRIBUTE_TYPE;
typedef struct _7F09F6AD7173E0292471C155D2885AEF *LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE;
typedef struct _9EEC6D4C8F692379AA2A6356D0C3C3FC *LPGOPHER_PROVIDER_ATTRIBUTE_TYPE;
typedef struct _C0A2C8317C92AEC6C65405BB0D08D817 *LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE;
typedef struct _793203A904263AF632B64217160A3CD4 *LPGOPHER_VERONICA_ATTRIBUTE_TYPE;
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
typedef struct _INTERNET_CACHE_CONTAINER_INFOA *LPINTERNET_CACHE_CONTAINER_INFOA;
typedef struct _INTERNET_CACHE_CONTAINER_INFOW *LPINTERNET_CACHE_CONTAINER_INFOW;
typedef struct _3F4F059ECBF871A70338C30D0BE50D1F *LPINTERNET_PER_CONN_OPTION_LISTA;
typedef struct _2E02FE147086727B9806CD802F6B77B7 *LPINTERNET_PER_CONN_OPTION_LISTW;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _CO_AF_TAPI_MAKE_CALL_PARAMETERS *PCO_AF_TAPI_MAKE_CALL_PARAMETERS;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A *PDEV_BROADCAST_DEVICEINTERFACE_A;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W *PDEV_BROADCAST_DEVICEINTERFACE_W;
typedef struct _DOT11_OPERATION_MODE_CAPABILITY *PDOT11_OPERATION_MODE_CAPABILITY;
typedef struct _DOT11_REG_DOMAINS_SUPPORT_VALUE *PDOT11_REG_DOMAINS_SUPPORT_VALUE;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _NDIS_TAPI_NEGOTIATE_EXT_VERSION *PNDIS_TAPI_NEGOTIATE_EXT_VERSION;
typedef struct _USERNAME_TARGET_CREDENTIAL_INFO *PUSERNAME_TARGET_CREDENTIAL_INFO;
typedef struct _HTTPSPolicyCallbackData SSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef unsigned char *( *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
enum _NDIS_802_11_AUTHENTICATION_MODE {Ndis802_11AuthModeOpen = 0x0,Ndis802_11AuthModeShared = 0x1,Ndis802_11AuthModeAutoSwitch = 0x2,Ndis802_11AuthModeWPA = 0x3,Ndis802_11AuthModeWPAPSK = 0x4,Ndis802_11AuthModeWPANone = 0x5,Ndis802_11AuthModeMax = 0x6,};
enum __MIDL_IInternetZoneManager_0001 {MAX_ZONE_PATH = 0x104,MAX_ZONE_DESCRIPTION = 0xC8,};
enum __MIDL_IInternetZoneManager_0002 {ZAFLAGS_CUSTOM_EDIT = 0x1,ZAFLAGS_ADD_SITES = 0x2,ZAFLAGS_REQUIRE_VERIFICATION = 0x4,ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,ZAFLAGS_NO_UI = 0x20,ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,ZAFLAGS_UNC_AS_INTRANET = 0x80,};
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO CERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA CERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _CO_AF_TAPI_MAKE_CALL_PARAMETERS CO_AF_TAPI_MAKE_CALL_PARAMETERS;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A DEV_BROADCAST_DEVICEINTERFACE_A;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W DEV_BROADCAST_DEVICEINTERFACE_W;
typedef struct _DOT11_OPERATION_MODE_CAPABILITY DOT11_OPERATION_MODE_CAPABILITY;
typedef struct _DOT11_REG_DOMAINS_SUPPORT_VALUE DOT11_REG_DOMAINS_SUPPORT_VALUE;
typedef struct tagDVD_MultichannelAudioAttributes DVD_MultichannelAudioAttributes;
struct IDirectDrawMediaSampleAllocator {struct IDirectDrawMediaSampleAllocatorVtbl *lpVtbl;};
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _ABC12D3D27847D90880B2A365197CC67 INTERNET_DIAGNOSTIC_SOCKET_INFO;
struct IRTCParticipantStateChangeEvent {struct IRTCParticipantStateChangeEventVtbl *lpVtbl;};
struct ITableDefinitionWithConstraints {struct ITableDefinitionWithConstraintsVtbl *lpVtbl;};
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _60326525EFFC6265B33A0784E3C361D7 *LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE;
typedef struct _098CCDCB9074DBE2AEBC1B4026CD72FD *LPGOPHER_VERSION_ATTRIBUTE_TYPE;
enum MACRO_FILE_ATTRIBUTE_COMPRESSED {FILE_ATTRIBUTE_COMPRESSED = 0x800,FILE_ATTRIBUTE_OFFLINE = 0x1000,FILE_ATTRIBUTE_ROMSTATICREF = 0x1000,FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000,FILE_ATTRIBUTE_ROMMODULE = 0x2000,FILE_NOTIFY_CHANGE_FILE_NAME = 0x1,FILE_NOTIFY_CHANGE_DIR_NAME = 0x2,FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x4,FILE_NOTIFY_CHANGE_SIZE = 0x8,FILE_NOTIFY_CHANGE_LAST_WRITE = 0x10,FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x20,FILE_NOTIFY_CHANGE_CREATION = 0x40,FILE_NOTIFY_CHANGE_SECURITY = 0x100,FILE_NOTIFY_CHANGE_CEGETINFO = 0x80000000,FILE_ACTION_ADDED = 0x1,FILE_ACTION_REMOVED = 0x2,FILE_ACTION_MODIFIED = 0x3,FILE_ACTION_RENAMED_OLD_NAME = 0x4,FILE_ACTION_RENAMED_NEW_NAME = 0x5,FILE_ACTION_CHANGE_COMPLETED = 0x10000,};
enum MACRO_LINEADDRCAPFLAGS_ACDGROUP {LINEADDRCAPFLAGS_ACDGROUP = 0x40000000,LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 0x80000000,};
typedef struct _NDIS_TAPI_NEGOTIATE_EXT_VERSION NDIS_TAPI_NEGOTIATE_EXT_VERSION;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _CREDENTIAL_TARGET_INFORMATIONA *PCREDENTIAL_TARGET_INFORMATIONA;
typedef struct _CREDENTIAL_TARGET_INFORMATIONW *PCREDENTIAL_TARGET_INFORMATIONW;
typedef struct _DOT11_MD_CAPABILITY_ENTRY_LIST *PDOT11_MD_CAPABILITY_ENTRY_LIST;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _SecPkgContext_IssuerListInfoEx *PSecPkgContext_IssuerListInfoEx;
typedef struct _SecPkgContext_NegotiationInfoA *PSecPkgContext_NegotiationInfoA;
typedef struct _SecPkgContext_NegotiationInfoW *PSecPkgContext_NegotiationInfoW;
enum SUBSCRIPTION_AGENT_RESUME_FLAGS {SUBSCRIPTION_AGENT_RESUME_INCREASED_CACHE = 0x80,};
typedef struct _USERNAME_TARGET_CREDENTIAL_INFO USERNAME_TARGET_CREDENTIAL_INFO;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA WIN_SPUB_TRUSTED_PUBLISHER_DATA;
enum __MIDL_IBindStatusCallback_0001 {BINDVERB_GET = 0x0,BINDVERB_POST = 0x1,BINDVERB_PUT = 0x2,BINDVERB_CUSTOM = 0x3,};
enum __MIDL_IBindStatusCallback_0002 {BINDINFOF_URLENCODESTGMEDDATA = 0x1,BINDINFOF_URLENCODEDEXTRAINFO = 0x2,};
enum __MIDL_IBindStatusCallback_0003 {BINDF_ASYNCHRONOUS = 0x1,BINDF_ASYNCSTORAGE = 0x2,BINDF_NOPROGRESSIVERENDERING = 0x4,BINDF_OFFLINEOPERATION = 0x8,BINDF_GETNEWESTVERSION = 0x10,BINDF_NOWRITECACHE = 0x20,BINDF_NEEDFILE = 0x40,BINDF_PULLDATA = 0x80,BINDF_IGNORESECURITYPROBLEM = 0x100,BINDF_RESYNCHRONIZE = 0x200,BINDF_HYPERLINK = 0x400,BINDF_NO_UI = 0x800,BINDF_SILENTOPERATION = 0x1000,BINDF_PRAGMA_NO_CACHE = 0x2000,BINDF_GETCLASSOBJECT = 0x4000,BINDF_RESERVED_1 = 0x8000,BINDF_FREE_THREADED = 0x10000,BINDF_DIRECT_READ = 0x20000,BINDF_FORMS_SUBMIT = 0x40000,BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,BINDF_FROMURLMON = 0x100000,BINDF_FWD_BACK = 0x200000,BINDF_PREFERDEFAULTHANDLER = 0x400000,BINDF_ENFORCERESTRICTED = 0x800000,};
enum __MIDL_IBindStatusCallback_0004 {URL_ENCODING_NONE = 0x0,URL_ENCODING_ENABLE_UTF8 = 0x10000000,URL_ENCODING_DISABLE_UTF8 = 0x20000000,};
enum __MIDL_IBindStatusCallback_0005 {BINDINFO_OPTIONS_WININETFLAG = 0x10000,BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,};
enum __MIDL_IBindStatusCallback_0006 {BSCF_FIRSTDATANOTIFICATION = 0x1,BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,BSCF_LASTDATANOTIFICATION = 0x4,BSCF_DATAFULLYAVAILABLE = 0x8,BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,};
enum __MIDL_IConfigInterleaving_0001 {INTERLEAVE_NONE = 0x0,INTERLEAVE_CAPTURE = 0x1,INTERLEAVE_FULL = 0x2,};
enum __MIDL_IHlinkBrowseContext_0001 {HLTB_DOCKEDLEFT = 0x0,HLTB_DOCKEDTOP = 0x1,HLTB_DOCKEDRIGHT = 0x2,HLTB_DOCKEDBOTTOM = 0x3,HLTB_FLOATING = 0x4,};
enum __MIDL_IHlinkBrowseContext_0002 {HLBWIF_HASFRAMEWNDINFO = 0x1,HLBWIF_HASDOCWNDINFO = 0x2,HLBWIF_FRAMEWNDMAXIMIZED = 0x4,HLBWIF_DOCWNDMAXIMIZED = 0x8,HLBWIF_HASWEBTOOLBARINFO = 0x10,HLBWIF_WEBTOOLBARHIDDEN = 0x20,};
enum __MIDL_IHlinkBrowseContext_0003 {HLID_INVALID = 0x0,HLID_PREVIOUS = 0xFFFFFFFF,HLID_NEXT = 0xFFFFFFFE,HLID_CURRENT = 0xFFFFFFFD,HLID_STACKBOTTOM = 0xFFFFFFFC,HLID_STACKTOP = 0xFFFFFFFB,};
enum __MIDL_IHlinkBrowseContext_0004 {HLQF_ISVALID = 0x1,HLQF_ISCURRENT = 0x2,};
enum AM_SEEKING_SeekingCapabilities {AM_SEEKING_CanSeekAbsolute = 0x1,AM_SEEKING_CanSeekForwards = 0x2,AM_SEEKING_CanSeekBackwards = 0x4,AM_SEEKING_CanGetCurrentPos = 0x8,AM_SEEKING_CanGetStopPos = 0x10,AM_SEEKING_CanGetDuration = 0x20,AM_SEEKING_CanPlayBackwards = 0x40,AM_SEEKING_CanDoSegments = 0x80,AM_SEEKING_Source = 0x100,};
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS CERT_X942_DH_VALIDATION_PARAMS;
typedef struct creative_fastspeech10format_tag CREATIVEFASTSPEECH10WAVEFORMAT;
typedef struct _CREDENTIAL_TARGET_INFORMATIONA CREDENTIAL_TARGET_INFORMATIONA;
typedef struct _CREDENTIAL_TARGET_INFORMATIONW CREDENTIAL_TARGET_INFORMATIONW;
typedef struct _DOT11_MD_CAPABILITY_ENTRY_LIST DOT11_MD_CAPABILITY_ENTRY_LIST;
typedef struct _B8380904D5E4DBEF1FA17159C4574D89 GOPHER_ABSTRACT_ATTRIBUTE_TYPE;
typedef struct _DE8A226FBF6958721EC6E17746E96A38 GOPHER_LOCATION_ATTRIBUTE_TYPE;
typedef struct _7F09F6AD7173E0292471C155D2885AEF GOPHER_MOD_DATE_ATTRIBUTE_TYPE;
typedef struct _9EEC6D4C8F692379AA2A6356D0C3C3FC GOPHER_PROVIDER_ATTRIBUTE_TYPE;
typedef struct _C0A2C8317C92AEC6C65405BB0D08D817 GOPHER_TIMEZONE_ATTRIBUTE_TYPE;
typedef struct _793203A904263AF632B64217160A3CD4 GOPHER_VERONICA_ATTRIBUTE_TYPE;
struct HTMLOptionButtonElementEvents2 {struct HTMLOptionButtonElementEvents2Vtbl *lpVtbl;};
struct IActiveScriptParseProcedureOld {struct IActiveScriptParseProcedureOldVtbl *lpVtbl;};
struct IActiveScriptSiteInterruptPoll {struct IActiveScriptSiteInterruptPollVtbl *lpVtbl;};
struct IEnumDebugExtendedPropertyInfo {struct IEnumDebugExtendedPropertyInfoVtbl *lpVtbl;};
struct IHTMLStyleSheetPagesCollection {struct IHTMLStyleSheetPagesCollectionVtbl *lpVtbl;};
struct IHTMLStyleSheetRulesCollection {struct IHTMLStyleSheetRulesCollectionVtbl *lpVtbl;};
struct IInternetProtocolSinkStackable {struct IInternetProtocolSinkStackableVtbl *lpVtbl;};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _INTERNET_CACHE_CONTAINER_INFOA INTERNET_CACHE_CONTAINER_INFOA;
typedef struct _INTERNET_CACHE_CONTAINER_INFOW INTERNET_CACHE_CONTAINER_INFOW;
typedef struct _3F4F059ECBF871A70338C30D0BE50D1F INTERNET_PER_CONN_OPTION_LISTA;
typedef struct _2E02FE147086727B9806CD802F6B77B7 INTERNET_PER_CONN_OPTION_LISTW;
typedef struct tMIXERCONTROLDETAILS_LISTTEXT *LPMIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
enum MACRO_INTERNET_CACHE_CONTAINER {INTERNET_CACHE_CONTAINER_NOSUBDIRS = 0x1,INTERNET_CACHE_CONTAINER_AUTODELETE = 0x2,INTERNET_CACHE_CONTAINER_RESERVED1 = 0x4,INTERNET_CACHE_CONTAINER_NODESKTOPINIT = 0x8,INTERNET_CACHE_CONTAINER_MAP_ENABLED = 0x10,};
enum MACRO_MIXERCONTROL_CONTROLTYPE {MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454,MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455,MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456,};
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _DOT11_ASSOC_INDICATION_UPCALL *PDOT11_ASSOC_INDICATION_UPCALL;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _C3795B4C40F1F780E52EE60833F04917 *PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _CCEDB0757BDFC2DD5AC112970835DC93 *PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct _IP_ADAPTER_DNS_SERVER_ADDRESS *PIP_ADAPTER_DNS_SERVER_ADDRESS;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct _NDIS_802_11_NETWORK_TYPE_LIST *PNDIS_802_11_NETWORK_TYPE_LIST;
typedef struct _NDIS_802_11_STATUS_INDICATION *PNDIS_802_11_STATUS_INDICATION;
typedef struct _NDIS_TAPI_GET_CALL_ADDRESS_ID *PNDIS_TAPI_GET_CALL_ADDRESS_ID;
typedef struct _NDIS_TAPI_GET_LINE_DEV_STATUS *PNDIS_TAPI_GET_LINE_DEV_STATUS;
typedef struct _NDIS_TAPI_PROVIDER_INITIALIZE *PNDIS_TAPI_PROVIDER_INITIALIZE;
typedef struct _NDIS_TAPI_SEND_USER_USER_INFO *PNDIS_TAPI_SEND_USER_USER_INFO;
typedef struct _NDIS_TAPI_SET_STATUS_MESSAGES *PNDIS_TAPI_SET_STATUS_MESSAGES;
typedef struct _SecPkgCred_SupportedProtocols *PSecPkgCred_SupportedProtocols;
typedef struct _WTD_GENERIC_CHAIN_POLICY_DATA *PWTD_GENERIC_CHAIN_POLICY_DATA;
typedef struct _SecPkgContext_IssuerListInfoEx SecPkgContext_IssuerListInfoEx;
typedef struct _SecPkgContext_NegotiationInfoA SecPkgContext_NegotiationInfoA;
typedef struct _SecPkgContext_NegotiationInfoW SecPkgContext_NegotiationInfoW;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY WIN_TRUST_ACTDATA_SUBJECT_ONLY;
enum _D3DSHADER_PARAM_REGISTER_TYPE {D3DSPR_TEMP = 0x0,D3DSPR_INPUT = 0x10000000,D3DSPR_CONST = 0x20000000,D3DSPR_ADDR = 0x30000000,D3DSPR_TEXTURE = 0x30000000,D3DSPR_RASTOUT = 0x40000000,D3DSPR_ATTROUT = 0x50000000,D3DSPR_TEXCRDOUT = 0x60000000,D3DSPR_FORCE_DWORD = 0x7FFFFFFF,};
enum _DMO_VIDEO_OUTPUT_STREAM_FLAGS {DMO_VOSF_NEEDS_PREVIOUS_SAMPLE = 0x1,};
struct _EXCEPTION_REGISTRATION_RECORD;
enum __MIDL_IPropertyContainer_0001 {TYPE_ERROR = 0x3E8,TYPE_DWORD = 0x3E9,TYPE_LONG = 0x3EA,TYPE_WORD = 0x3EB,TYPE_SHORT = 0x3EC,TYPE_BYTE = 0x3ED,TYPE_CHAR = 0x3EE,TYPE_FILETIME = 0x3EF,TYPE_STRING = 0x3F0,TYPE_BINARY = 0x3F1,TYPE_FLAGS = 0x3F2,TYPE_STREAM = 0x3F3,TYPE_WSTRING = 0x3F4,TYPE_BOOL = 0x3F5,TYPE_PASS = 0x3F6,TYPE_LAST = 0x3F7,};
enum tagNETCON_CHARACTERISTIC_FLAGS {NCCF_NONE = 0x0,NCCF_ALL_USERS = 0x1,NCCF_ALLOW_DUPLICATION = 0x2,NCCF_ALLOW_REMOVAL = 0x4,NCCF_ALLOW_RENAME = 0x8,NCCF_SHOW_ICON = 0x10,NCCF_INCOMING_ONLY = 0x20,NCCF_OUTGOING_ONLY = 0x40,NCCF_BRANDED = 0x80,};
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO CMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO CMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO CMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct creative_fastspeech8format_tag CREATIVEFASTSPEECH8WAVEFORMAT;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA CRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO CRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _D3DDEVICE_CREATION_PARAMETERS D3DDEVICE_CREATION_PARAMETERS;
typedef struct IDDVideoPortContainerVtbl DDVIDEOPORTCONTAINERCALLBACKS;
typedef struct _DOT11_ASSOC_INDICATION_UPCALL DOT11_ASSOC_INDICATION_UPCALL;
typedef struct _60326525EFFC6265B33A0784E3C361D7 GOPHER_UNKNOWN_ATTRIBUTE_TYPE;
typedef struct _098CCDCB9074DBE2AEBC1B4026CD72FD GOPHER_VERSION_ATTRIBUTE_TYPE;
struct HTMLOptionButtonElementEvents {struct HTMLOptionButtonElementEventsVtbl *lpVtbl;};
struct HTMLStyleSheetPagesCollection;
struct HTMLStyleSheetRulesCollection;
struct IAnimationComposerSiteFactory {struct IAnimationComposerSiteFactoryVtbl *lpVtbl;};
struct IDebugPropertyEnumType_Locals {struct IDebugPropertyEnumType_LocalsVtbl *lpVtbl;};
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _C3795B4C40F1F780E52EE60833F04917 IMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _CCEDB0757BDFC2DD5AC112970835DC93 IMAGE_LOAD_CONFIG_DIRECTORY64;
struct INetCfgComponentNotifyBinding {struct INetCfgComponentNotifyBindingVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_DNS_SERVER_ADDRESS IP_ADAPTER_DNS_SERVER_ADDRESS;
struct IRTCDispatchEventNotification {struct IRTCDispatchEventNotificationVtbl *lpVtbl;};
struct IRTCSessionDescriptionManager {struct IRTCSessionDescriptionManagerVtbl *lpVtbl;};
typedef struct _E42E7BED0EE5193A4D0BC9D45E2008A3 *LPGOPHER_ADMIN_ATTRIBUTE_TYPE;
typedef struct _3FBC325AC5E1830BAC7DB9619C6C90C8 *LPGOPHER_SCORE_ATTRIBUTE_TYPE;
typedef struct _INTERNET_CACHE_CONFIG_INFOA *LPINTERNET_CACHE_CONFIG_INFOA;
typedef struct _INTERNET_CACHE_CONFIG_INFOW *LPINTERNET_CACHE_CONFIG_INFOW;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
enum MACRO_CREDUI_CONTROL_USERNAME {CREDUI_CONTROL_USERNAME = 1,CREDUI_CONTROL_PASSWORD = 2,CREDUI_CONTROL_SAVE = 3,CREDUI_MAX_BALLOON_TITLE_LENGTH = 255,CREDUI_MAX_BALLOON_MESSAGE_LENGTH = 255,};
enum MACRO_DISPID_ONTHUMBNAILREADY {DISPID_ONTHUMBNAILREADY = 200,DISPID_PROP_WVFOLDERICON_SCALE = 1,DISPID_PROP_WVFOLDERICON_PATH = 2,DISPID_PROP_WVFOLDERICON_VIEW = 3,DISPID_PROP_WVFOLDERICON_ADVPROPERTY = 4,DISPID_WVFOLDERICON_SETSLICE = 5,DISPID_PROP_WVFOLDERICON_ITEM = 6,DISPID_PROP_WVFOLDERICON_CLICKSTYLE = 7,DISPID_PROP_WVFOLDERICON_LABELGAP = 8,};
enum MACRO_DISPID_PROTECTEDELEMENT {DISPID_PROTECTEDELEMENT = 1000,DISPID_DEFAULTS = 1000,DISPID_MARKUP = 1000,DISPID_DOMIMPLEMENTATION = 1000,DISPID_WINDOWOBJECT = -5500,DISPID_LOCATIONOBJECT = -5506,DISPID_HISTORYOBJECT = -5507,DISPID_NAVIGATOROBJECT = -5508,DISPID_SECURITYCTX = -5511,DISPID_AMBIENT_DLCONTROL = -5512,DISPID_AMBIENT_USERAGENT = -5513,DISPID_SECURITYDOMAIN = -5514,DISPID_DEBUG_ISSECUREPROXY = -5515,DISPID_DEBUG_TRUSTEDPROXY = -5516,DISPID_DEBUG_INTERNALWINDOW = -5517,DISPID_DEBUG_ENABLESECUREPROXYASSERTS = -5518,};
enum MACRO_DISPID_SELECTIONCHANGED {DISPID_SELECTIONCHANGED = 200,DISPID_FILELISTENUMDONE = 201,DISPID_VERBINVOKED = 202,DISPID_DEFAULTVERBINVOKED = 203,DISPID_BEGINDRAG = 204,DISPID_ENTERPRESSED = 200,DISPID_SEARCHCOMMAND_START = 1,DISPID_SEARCHCOMMAND_COMPLETE = 2,DISPID_SEARCHCOMMAND_ABORT = 3,DISPID_SEARCHCOMMAND_UPDATE = 4,DISPID_SEARCHCOMMAND_PROGRESSTEXT = 5,DISPID_SEARCHCOMMAND_ERROR = 6,DISPID_SEARCHCOMMAND_RESTORE = 7,DISPID_IADCCTL_DIRTY = 256,DISPID_IADCCTL_PUBCAT = 257,DISPID_IADCCTL_SORT = 258,DISPID_IADCCTL_FORCEX86 = 259,DISPID_IADCCTL_SHOWPOSTSETUP = 260,DISPID_IADCCTL_ONDOMAIN = 261,DISPID_IADCCTL_DEFAULTCAT = 262,};
enum MACRO_ERROR_INTERNET_INTERNAL {ERROR_INTERNET_INTERNAL_SOCKET_ERROR = 12901,ERROR_INTERNET_CONNECTION_AVAILABLE = 12902,ERROR_INTERNET_NO_KNOWN_SERVERS = 12903,ERROR_INTERNET_PING_FAILED = 12904,ERROR_INTERNET_NO_PING_SUPPORT = 12905,ERROR_INTERNET_CACHE_SUCCESS = 12906,ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION_EX = 12907,};
enum MACRO_IMAGE_SIZEOF_LINENUMBER {IMAGE_SIZEOF_LINENUMBER = 6,IMAGE_SIZEOF_BASE_RELOCATION = 8,IMAGE_REL_BASED_ABSOLUTE = 0,IMAGE_REL_BASED_HIGH = 1,IMAGE_REL_BASED_LOW = 2,IMAGE_REL_BASED_HIGHLOW = 3,IMAGE_REL_BASED_HIGHADJ = 4,IMAGE_REL_BASED_MIPS_JMPADDR = 5,IMAGE_REL_BASED_SECTION = 6,IMAGE_REL_BASED_REL32 = 7,IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,IMAGE_REL_BASED_IA64_IMM64 = 9,IMAGE_REL_BASED_DIR64 = 10,IMAGE_REL_BASED_HIGH3ADJ = 11,IMAGE_ARCHIVE_START_SIZE = 8,IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60,IMAGE_ORDINAL_FLAG64 = -9223372036854775808,IMAGE_ORDINAL_FLAG32 = -2147483648,IMAGE_ORDINAL_FLAG = -2147483648,IMAGE_MIX_ISA_LIMIT = 2,};
enum MACRO_KeyShiftNoCharacterFlag {KeyShiftNoCharacterFlag = 0x10000,};
enum MACRO_LINE_AGENTSESSIONSTATUS {LINE_AGENTSESSIONSTATUS = 27,LINE_QUEUESTATUS = 28,LINE_AGENTSTATUSEX = 29,LINE_GROUPSTATUS = 30,LINE_PROXYSTATUS = 31,};
enum MACRO_PHONEINITIALIZEEXOPTION {PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x1,PHONEINITIALIZEEXOPTION_USEEVENT = 0x2,PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x3,};
enum MACRO_SEC_WINNT_AUTH_IDENTITY {SEC_WINNT_AUTH_IDENTITY_MARSHALLED = 0x4,SEC_WINNT_AUTH_IDENTITY_ONLY = 0x8,};
enum MACRO_TIME_NOMINUTESORSECONDS {TIME_NOMINUTESORSECONDS = 0x1,TIME_NOSECONDS = 0x2,TIME_NOTIMEMARKER = 0x4,TIME_FORCE24HOURFORMAT = 0x8,};
typedef struct _NDIS_802_11_NETWORK_TYPE_LIST NDIS_802_11_NETWORK_TYPE_LIST;
typedef struct _NDIS_802_11_STATUS_INDICATION NDIS_802_11_STATUS_INDICATION;
typedef struct _NDIS_TAPI_GET_CALL_ADDRESS_ID NDIS_TAPI_GET_CALL_ADDRESS_ID;
typedef struct _NDIS_TAPI_GET_LINE_DEV_STATUS NDIS_TAPI_GET_LINE_DEV_STATUS;
typedef struct _NDIS_TAPI_PROVIDER_INITIALIZE NDIS_TAPI_PROVIDER_INITIALIZE;
typedef struct _NDIS_TAPI_SEND_USER_USER_INFO NDIS_TAPI_SEND_USER_USER_INFO;
typedef struct _NDIS_TAPI_SET_STATUS_MESSAGES NDIS_TAPI_SET_STATUS_MESSAGES;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO *PCERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _DOT11_CURRENT_OPERATION_MODE *PDOT11_CURRENT_OPERATION_MODE;
typedef struct _DOT11_DIVERSITY_SELECTION_RX *PDOT11_DIVERSITY_SELECTION_RX;
typedef struct _DOT11_NIC_SPECIFIC_EXTENSION *PDOT11_NIC_SPECIFIC_EXTENSION;
typedef struct _DOT11_NIC_SPECIFIC_EXTN_LIST *PDOT11_NIC_SPECIFIC_EXTN_LIST;
typedef struct _DOT11_SUPPORTED_ANTENNA_LIST *PDOT11_SUPPORTED_ANTENNA_LIST;
typedef struct _DOT11_SUPPORTED_POWER_LEVELS *PDOT11_SUPPORTED_POWER_LEVELS;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct _IP_ADAPTER_MULTICAST_ADDRESS *PIP_ADAPTER_MULTICAST_ADDRESS;
typedef struct _MEMORY_BASIC_INFORMATION_VLM *PMEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_LISTTEXT *PMIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
typedef struct _64711BDE50DED9ED482573D36995441D *PNDISUIO_REQUEST_NOTIFICATION;
typedef struct _NDIS_802_11_CONFIGURATION_FH *PNDIS_802_11_CONFIGURATION_FH;
typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES *PNDIS_PM_WAKE_UP_CAPABILITIES;
typedef struct _NDIS_TAPI_GET_ADDRESS_STATUS *PNDIS_TAPI_GET_ADDRESS_STATUS;
typedef struct _NDIS_TAPI_SELECT_EXT_VERSION *PNDIS_TAPI_SELECT_EXT_VERSION;
typedef struct _OFFLOAD_SECURITY_ASSOCIATION *POFFLOAD_SECURITY_ASSOCIATION;
typedef struct _SecPkgContext_ConnectionInfo *PSecPkgContext_ConnectionInfo;
typedef struct _SecPkgContext_IssuerListInfo *PSecPkgContext_IssuerListInfo;
typedef struct _SecPkgContext_MappedCredAttr *PSecPkgContext_MappedCredAttr;
typedef struct _SecPkgContext_PasswordExpiry *PSecPkgContext_PasswordExpiry;
typedef struct _USB_CONFIGURATION_DESCRIPTOR *PUSB_CONFIGURATION_DESCRIPTOR;
typedef struct _SecPkgCred_SupportedProtocols SecPkgCred_SupportedProtocols;
typedef struct _WTD_GENERIC_CHAIN_POLICY_DATA WTD_GENERIC_CHAIN_POLICY_DATA;
enum _DMO_OUTPUT_DATA_BUFFER_FLAGS {DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT = 0x1,DMO_OUTPUT_DATA_BUFFERF_TIME = 0x2,DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH = 0x4,DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE = 0x1000000,};
enum _DMO_OUTPUT_STREAM_INFO_FLAGS {DMO_OUTPUT_STREAMF_WHOLE_SAMPLES = 0x1,DMO_OUTPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 0x2,DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE = 0x4,DMO_OUTPUT_STREAMF_DISCARDABLE = 0x8,DMO_OUTPUT_STREAMF_OPTIONAL = 0x10,};
enum _DOT11_ASSOC_UPCALL_INFO_TYPE {dot11_assoc_upcall_info_type_default_key_value = 0x0,dot11_assoc_upcall_info_type_negotiated_ie = 0x1,dot11_assoc_upcall_info_type_offered_ie = 0x2,dot11_assoc_upcall_info_type_last_tx_tsc = 0x3,};
enum _SECURITY_IMPERSONATION_LEVEL {SecurityAnonymous = 0x0,SecurityIdentification = 0x1,SecurityImpersonation = 0x2,SecurityDelegation = 0x3,};
enum __MIDL_IImnAdviseAccount_0001 {ACCT_NEWS = 0x0,ACCT_MAIL = 0x1,ACCT_DIR_SERV = 0x2,ACCT_LAST = 0x3,};
enum __MIDL___MIDL__intf_0000_0001 {JPMPII_SYSTEMCLASS = 0x0,JPMPII_NONSYSTEMCLASS = 0x1,JPMPII_NEEDSTRUSTEDSOURCE = 0x2,ALL_JPMPII_FLAGS = 0x3,};
enum __MIDL___MIDL__intf_0000_0002 {JPMINST_NOVERSIONCHECK = 0x1,JPMINST_NOSIGNERCHECK = 0x2,JPMINST_AUTODETECTPACKAGES = 0x4,JPMINST_DELETEINPUTFILE = 0x8,ALL_JPMINST_FLAGS = 0xF,};
enum __MIDL___MIDL__intf_0000_0003 {JPMINST_CAB = 0x0,JPMINST_ZIP = 0x1,JPMINST_JAR = 0x2,};
enum __MIDL___MIDL__intf_0071_0001 {CRF_REMOVECHILDREN = 0x1,CRF_REMOVEVALUESONLY = 0x2,CRF_REMOVEEMPTYPARENTSALSO = 0x4,};
enum __MIDL___MIDL__intf_0071_0002 {CGF_FULLYQUALIFIED = 0x1,};
enum __MIDL___MIDL__intf_0073_0001 {JPMFI_NEEDS_TRUSTED_SOURCE = 0x1,JPMFI_IS_STREAM = 0x2,JPMFI_IS_PE_NATIVE = 0x8,JPMFI_FROM_PKG_DATABASE = 0x10,JPMFI_FROM_CLASSPATH = 0x20,};
enum __MIDL___MIDL__intf_0073_0002 {JPMGFN_SIMPLE = 0x1,JPMGFN_FULLYQUALIFIED = 0x2,JPMGFN_LOCALFILEPATH = 0x3,};
enum tagDVD_PREFERRED_DISPLAY_MODE {DISPLAY_CONTENT_DEFAULT = 0x0,DISPLAY_16x9 = 0x1,DISPLAY_4x3_PANSCAN_PREFERRED = 0x2,DISPLAY_4x3_LETTERBOX_PREFERRED = 0x3,};
struct AnimationComposerSiteFactory;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO CERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CERT_POLICY_CONSTRAINTS_INFO CERT_POLICY_CONSTRAINTS_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO CMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct IDirectDrawVideoPortVtbl DIRECTDRAWVIDEOPORTCALLBACKS;
typedef struct _DOT11_CURRENT_OPERATION_MODE DOT11_CURRENT_OPERATION_MODE;
typedef struct _DOT11_DIVERSITY_SELECTION_RX DOT11_DIVERSITY_SELECTION_RX;
typedef struct _DOT11_NIC_SPECIFIC_EXTENSION DOT11_NIC_SPECIFIC_EXTENSION;
typedef struct _DOT11_NIC_SPECIFIC_EXTN_LIST DOT11_NIC_SPECIFIC_EXTN_LIST;
typedef struct _DOT11_SUPPORTED_ANTENNA_LIST DOT11_SUPPORTED_ANTENNA_LIST;
typedef struct _DOT11_SUPPORTED_POWER_LEVELS DOT11_SUPPORTED_POWER_LEVELS;
struct DispIHTMLOptionButtonElement {struct DispIHTMLOptionButtonElementVtbl *lpVtbl;};
typedef struct _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
struct IActiveScriptAuthorProcedure {struct IActiveScriptAuthorProcedureVtbl *lpVtbl;};
struct IActiveScriptParseProcedure2 {struct IActiveScriptParseProcedure2Vtbl *lpVtbl;};
struct IDMOVideoOutputOptimizations {struct IDMOVideoOutputOptimizationsVtbl *lpVtbl;};
struct IElementBehaviorSiteCategory {struct IElementBehaviorSiteCategoryVtbl *lpVtbl;};
struct IInternetHostSecurityManager {struct IInternetHostSecurityManagerVtbl *lpVtbl;};
struct INetCfgComponentNotifyGlobal {struct INetCfgComponentNotifyGlobalVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_MULTICAST_ADDRESS IP_ADAPTER_MULTICAST_ADDRESS;
struct IRTCSessionStateChangeEvent2 {struct IRTCSessionStateChangeEvent2Vtbl *lpVtbl;};
struct ITIMEActiveElementCollection {struct ITIMEActiveElementCollectionVtbl *lpVtbl;};
struct IXMLDOMProcessingInstruction {struct IXMLDOMProcessingInstructionVtbl *lpVtbl;};
typedef struct _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
typedef struct _21B90258E17C8B6D2BC61A88DF74B5FB *LPGOPHER_SITE_ATTRIBUTE_TYPE;
typedef struct _6950E4854C03824D44DF624674A695D1 *LPGOPHER_VIEW_ATTRIBUTE_TYPE;
typedef struct _INTERNET_CACHE_ENTRY_INFOA *LPINTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW *LPINTERNET_CACHE_ENTRY_INFOW;
typedef struct _INTERNET_CACHE_GROUP_INFOA *LPINTERNET_CACHE_GROUP_INFOA;
typedef struct _INTERNET_CACHE_GROUP_INFOW *LPINTERNET_CACHE_GROUP_INFOW;
typedef struct tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;
typedef struct _SHChangeProductKeyAsIDList *LPSHChangeProductKeyAsIDList;
typedef ISyncMgrSynchronizeCallback *LPSYNCMGRSYNCHRONIZECALLBACK;
enum MACRO_DB_E_BADCONSTRAINTTYPE {DB_E_BADCONSTRAINTTYPE = 0x80040E77,DB_E_BADCONSTRAINTFORM = 0x80040E78,DB_E_BADDEFERRABILITY = 0x80040E79,DB_E_BADMATCHTYPE = 0x80040E80,DB_E_BADUPDATEDELETERULE = 0x80040E8A,DB_E_BADCONSTRAINTID = 0x80040E8B,DB_E_BADCOMMANDFLAGS = 0x80040E8C,DB_E_OBJECTMISMATCH = 0x80040E8D,DB_E_NOSOURCEOBJECT = 0x80040E91,DB_E_RESOURCELOCKED = 0x80040E92,DB_E_NOTCOLLECTION = 0x80040E93,DB_E_READONLY = 0x80040E94,DB_E_ASYNCNOTSUPPORTED = 0x80040E95,DB_E_CANNOTCONNECT = 0x80040E96,DB_E_TIMEOUT = 0x80040E97,DB_E_RESOURCEEXISTS = 0x80040E98,DB_E_RESOURCEOUTOFSCOPE = 0x80040E8E,DB_E_DROPRESTRICTED = 0x80040E90,DB_E_DUPLICATECONSTRAINTID = 0x80040E99,DB_E_OUTOFSPACE = 0x80040E9A,DB_SEC_E_SAFEMODE_DENIED = 0x80040E9B,DB_S_ROWLIMITEXCEEDED = 0x40EC0,DB_S_COLUMNTYPEMISMATCH = 0x40EC1,DB_S_TYPEINFOOVERRIDDEN = 0x40EC2,DB_S_BOOKMARKSKIPPED = 0x40EC3,DB_S_NONEXTROWSET = 0x40EC5,DB_S_ENDOFROWSET = 0x40EC6,DB_S_COMMANDREEXECUTED = 0x40EC7,DB_S_BUFFERFULL = 0x40EC8,DB_S_NORESULT = 0x40EC9,DB_S_CANTRELEASE = 0x40ECA,DB_S_GOALCHANGED = 0x40ECB,DB_S_UNWANTEDOPERATION = 0x40ECC,DB_S_DIALECTIGNORED = 0x40ECD,DB_S_UNWANTEDPHASE = 0x40ECE,DB_S_UNWANTEDREASON = 0x40ECF,DB_S_ASYNCHRONOUS = 0x40ED0,DB_S_COLUMNSCHANGED = 0x40ED1,DB_S_ERRORSRETURNED = 0x40ED2,DB_S_BADROWHANDLE = 0x40ED3,DB_S_DELETEDROW = 0x40ED4,DB_S_TOOMANYCHANGES = 0x40ED5,DB_S_STOPLIMITREACHED = 0x40ED6,DB_S_LOCKUPGRADED = 0x40ED8,DB_S_PROPERTIESCHANGED = 0x40ED9,DB_S_ERRORSOCCURRED = 0x40EDA,DB_S_PARAMUNAVAILABLE = 0x40EDB,DB_S_MULTIPLECHANGES = 0x40EDC,DB_S_NOTSINGLETON = 0x40ED7,DB_S_NOROWSPECIFICCOLUMNS = 0x40EDD,};
enum MACRO_ERROR_INTERNET_OFFLINE {ERROR_INTERNET_OFFLINE = 12163,};
enum MACRO_KeyShiftKeybdEventFlag {KeyShiftKeybdEventFlag = 0x4000,};
enum MACRO_KeyShiftRightShiftFlag {KeyShiftRightShiftFlag = 0x200000,};
enum MACRO_KeyShiftScrollLockFlag {KeyShiftScrollLockFlag = 0x800,};
enum MACRO_LINEINITIALIZEEXOPTION {LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x1,LINEINITIALIZEEXOPTION_USEEVENT = 0x2,LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x3,};
enum MACRO_MAX_SYNCMGRHANDLERNAME {MAX_SYNCMGRHANDLERNAME = 32,};
enum MACRO_MIXER_GETLINECONTROLSF {MIXER_GETLINECONTROLSF_ALL = 0x0,MIXER_GETLINECONTROLSF_ONEBYID = 0x1,MIXER_GETLINECONTROLSF_ONEBYTYPE = 0x2,MIXER_GETLINECONTROLSF_QUERYMASK = 0xF,MIXER_GETCONTROLDETAILSF_VALUE = 0x0,MIXER_GETCONTROLDETAILSF_LISTTEXT = 0x1,MIXER_GETCONTROLDETAILSF_QUERYMASK = 0xF,MIXER_SETCONTROLDETAILSF_VALUE = 0x0,MIXER_SETCONTROLDETAILSF_CUSTOM = 0x1,MIXER_SETCONTROLDETAILSF_QUERYMASK = 0xF,};
enum MACRO_SEC_E_PERMISSIONDENIED {SEC_E_PERMISSIONDENIED = -2147217911,SEC_E_BADTRUSTEEID = -2147217814,SEC_E_NOTRUSTEEID = -2147217813,SEC_E_NOMEMBERSHIPSUPPORT = -2147217812,SEC_E_INVALIDOBJECT = -2147217811,SEC_E_NOOWNER = -2147217810,SEC_E_INVALIDACCESSENTRYLIST = -2147217809,SEC_E_INVALIDOWNER = -2147217808,SEC_E_INVALIDACCESSENTRY = -2147217807,};
enum MACRO_TAPIMAXCALLEDPARTYSIZE {TAPIMAXCALLEDPARTYSIZE = 40,TAPIMAXCOMMENTSIZE = 80,};
enum MACRO_TAPIMAXDESTADDRESSSIZE {TAPIMAXDESTADDRESSSIZE = 80,};
enum MACRO_TAPIMAXDEVICECLASSSIZE {TAPIMAXDEVICECLASSSIZE = 40,};
enum MACRO_URLACTION_AUTHENTICATE {URLACTION_AUTHENTICATE_CLIENT = 0x1A01,};
enum MACRO_URLPOLICY_AUTHENTICATE {URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0x0,URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 0x10000,URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 0x30000,};
typedef struct _MEMORY_BASIC_INFORMATION_VLM MEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_LISTTEXT MIXERCONTROLDETAILS_LISTTEXT;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
typedef struct _64711BDE50DED9ED482573D36995441D NDISUIO_REQUEST_NOTIFICATION;
typedef struct _NDIS_802_11_CONFIGURATION_FH NDIS_802_11_CONFIGURATION_FH;
typedef struct _NDIS_PM_WAKE_UP_CAPABILITIES NDIS_PM_WAKE_UP_CAPABILITIES;
typedef struct _NDIS_TAPI_GET_ADDRESS_STATUS NDIS_TAPI_GET_ADDRESS_STATUS;
typedef struct _NDIS_TAPI_SELECT_EXT_VERSION NDIS_TAPI_SELECT_EXT_VERSION;
typedef struct _OFFLOAD_SECURITY_ASSOCIATION OFFLOAD_SECURITY_ASSOCIATION;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA *PCERT_LDAP_STORE_OPENED_PARA;
typedef struct UserNotificationInfoHeader *PCE_NOTIFICATION_INFO_HEADER;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO *PCROSS_CERT_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;
typedef struct _DOT11_HOPPING_PATTERN_ENTRY *PDOT11_HOPPING_PATTERN_ENTRY;
typedef struct _DOT11_WEP_KEY_MAPPING_ENTRY *PDOT11_WEP_KEY_MAPPING_ENTRY;
typedef struct _HTTP_FILTER_PREPROC_HEADERS *PHTTP_FILTER_PREPROC_HEADERS;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _ISA_PNP_LOGICAL_DEVICE_INFO *PISA_PNP_LOGICAL_DEVICE_INFO;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _7307A00A22D5C0EAA9BB8E536231902F *PNDISUIO_DEVICE_NOTIFICATION;
typedef struct _NDIS_TAPI_PROVIDER_SHUTDOWN *PNDIS_TAPI_PROVIDER_SHUTDOWN;
typedef struct _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SEC_WINNT_AUTH_IDENTITY_EXA *PSEC_WINNT_AUTH_IDENTITY_EXA;
typedef struct _SEC_WINNT_AUTH_IDENTITY_EXW *PSEC_WINNT_AUTH_IDENTITY_EXW;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SecPkgContext_ConnectionInfo SecPkgContext_ConnectionInfo;
typedef struct _SecPkgContext_IssuerListInfo SecPkgContext_IssuerListInfo;
typedef struct _SecPkgContext_MappedCredAttr SecPkgContext_MappedCredAttr;
typedef struct _SecPkgContext_PasswordExpiry SecPkgContext_PasswordExpiry;
typedef struct _ServicesExeCallbackFunctions ServicesExeCallbackFunctions;
enum ShellWindowFindWindowOptions {SWFO_NEEDDISPATCH = 0x1,SWFO_INCLUDEPENDING = 0x2,SWFO_COOKIEPASSED = 0x4,};
typedef struct _USB_CONFIGURATION_DESCRIPTOR USB_CONFIGURATION_DESCRIPTOR;
typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);
enum _D3DSHADER_PARAM_DSTMOD_TYPE {D3DSPDM_NONE = 0x0,D3DSPDM_SATURATE = 0x100000,D3DSPDM_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSHADER_PARAM_SRCMOD_TYPE {D3DSPSM_NONE = 0x0,D3DSPSM_NEG = 0x1000000,D3DSPSM_BIAS = 0x2000000,D3DSPSM_BIASNEG = 0x3000000,D3DSPSM_SIGN = 0x4000000,D3DSPSM_SIGNNEG = 0x5000000,D3DSPSM_COMP = 0x6000000,D3DSPSM_X2 = 0x7000000,D3DSPSM_X2NEG = 0x8000000,D3DSPSM_FORCE_DWORD = 0x7FFFFFFF,};
enum _DMO_INPUT_DATA_BUFFER_FLAGS {DMO_INPUT_DATA_BUFFERF_SYNCPOINT = 0x1,DMO_INPUT_DATA_BUFFERF_TIME = 0x2,DMO_INPUT_DATA_BUFFERF_TIMELENGTH = 0x4,};
enum _DMO_INPUT_STREAM_INFO_FLAGS {DMO_INPUT_STREAMF_WHOLE_SAMPLES = 0x1,DMO_INPUT_STREAMF_SINGLE_SAMPLE_PER_BUFFER = 0x2,DMO_INPUT_STREAMF_FIXED_SAMPLE_SIZE = 0x4,DMO_INPUT_STREAMF_HOLDS_BUFFERS = 0x8,};
enum _NDIS_802_11_RELOAD_DEFAULTS {Ndis802_11ReloadWEPKeys = 0x0,};
enum _NDIS_FDDI_LCONNECTION_STATE {NdisFddiStateOff = 0x1,NdisFddiStateBreak = 0x2,NdisFddiStateTrace = 0x3,NdisFddiStateConnect = 0x4,NdisFddiStateNext = 0x5,NdisFddiStateSignal = 0x6,NdisFddiStateJoin = 0x7,NdisFddiStateVerify = 0x8,NdisFddiStateActive = 0x9,NdisFddiStateMaintenance = 0xA,};
enum _SECUREURLHOSTVALIDATE_FLAGS {SUHV_PROMPTBEFORENO = 0x1,SUHV_SILENTYES = 0x2,SUHV_UNSECURESOURCE = 0x4,SECUREURLHOSTVALIDATE_FLAGS_Max = 0x7FFFFFFF,};
struct _SEC_WINNT_AUTH_IDENTITY_EXA {unsigned int Version;unsigned int Length;unsigned char *User;unsigned int UserLength;unsigned char *Domain;unsigned int DomainLength;unsigned char *Password;unsigned int PasswordLength;unsigned int Flags;unsigned char *PackageList;unsigned int PackageListLength;};
struct _SEC_WINNT_AUTH_IDENTITY_EXW {unsigned int Version;unsigned int Length;unsigned short *User;unsigned int UserLength;unsigned short *Domain;unsigned int DomainLength;unsigned short *Password;unsigned int PasswordLength;unsigned int Flags;unsigned short *PackageList;unsigned int PackageListLength;};
enum __MIDL_IDVDProgramChain_0002 {DVD_PRE_CMD = 0x0,DVD_POST_CMD = 0x1,DVD_CELL_CMD = 0x2,};
enum __MIDL_IDVDProgramChain_0004 {DVD_NEXT_PGC = 0x0,DVD_PREVIOUS_PGC = 0x1,DVD_UP_PGC = 0x2,};
enum __MIDL_IDVDProgramChain_0005 {DVD_PLAYMODE_SEQUENTIAL = 0x0,DVD_PLAYMODE_RANDOM = 0x1,DVD_PLAYMODE_SHUFFLE = 0x2,};
enum __MIDL_IHtmlLoadOptions_0001 {HTMLLOADOPTION_CODEPAGE = 0x0,HTMLLOADOPTION_INETSHORTCUTPATH = 0x1,HTMLLOADOPTION_HYPERLINK = 0x2,HTMLLOADOPTION_FRAMELOAD = 0x3,};
enum tagCOMPONENT_CHARACTERISTICS {NCF_VIRTUAL = 0x1,NCF_SOFTWARE_ENUMERATED = 0x2,NCF_PHYSICAL = 0x4,NCF_HIDDEN = 0x8,NCF_NO_SERVICE = 0x10,NCF_NOT_USER_REMOVABLE = 0x20,NCF_MULTIPORT_INSTANCED_ADAPTER = 0x40,NCF_HAS_UI = 0x80,NCF_FILTER = 0x400,NCF_DONTEXPOSELOWER = 0x1000,NCF_HIDE_BINDING = 0x2000,NCF_FIXED_BINDING = 0x20000,};
typedef struct _70EF98671D92E01A751E5EFF82E819E9 ATM_CALLING_PARTY_NUMBER_IE;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO CERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO CERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_ISSUER_PARA;
typedef struct _CERT_LDAP_STORE_OPENED_PARA CERT_LDAP_STORE_OPENED_PARA;
typedef struct UserNotificationInfoHeader CE_NOTIFICATION_INFO_HEADER;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO CMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO CMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO CMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CROSS_CERT_DIST_POINTS_INFO CROSS_CERT_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA CRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALSW;
enum CommandStateChangeConstants {CSC_UPDATECOMMANDS = 0xFFFFFFFF,CSC_NAVIGATEFORWARD = 0x1,CSC_NAVIGATEBACK = 0x2,};
typedef struct _DOT11_HOPPING_PATTERN_ENTRY DOT11_HOPPING_PATTERN_ENTRY;
typedef struct _DOT11_WEP_KEY_MAPPING_ENTRY DOT11_WEP_KEY_MAPPING_ENTRY;
struct DispHTMLAttributeCollection {struct DispHTMLAttributeCollectionVtbl *lpVtbl;};
struct DispIHTMLInputButtonElement {struct DispIHTMLInputButtonElementVtbl *lpVtbl;};
typedef struct _E42E7BED0EE5193A4D0BC9D45E2008A3 GOPHER_ADMIN_ATTRIBUTE_TYPE;
typedef struct _3FBC325AC5E1830BAC7DB9619C6C90C8 GOPHER_SCORE_ATTRIBUTE_TYPE;
struct HTMLInputFileElementEvents2 {struct HTMLInputFileElementEvents2Vtbl *lpVtbl;};
struct HTMLInputTextElementEvents2 {struct HTMLInputTextElementEvents2Vtbl *lpVtbl;};
typedef struct _HTTP_FILTER_PREPROC_HEADERS HTTP_FILTER_PREPROC_HEADERS;
struct IActiveScriptParseProcedure {struct IActiveScriptParseProcedureVtbl *lpVtbl;};
struct IDDrawExclModeVideoCallback {struct IDDrawExclModeVideoCallbackVtbl *lpVtbl;};
struct IDVDParentalManagementTable {struct IDVDParentalManagementTableVtbl *lpVtbl;};
struct IElementBehaviorSiteLayout2 {struct IElementBehaviorSiteLayout2Vtbl *lpVtbl;};
struct IEnumDVD_TEXT_LANGUAGE_UNIT {struct IEnumDVD_TEXT_LANGUAGE_UNITVtbl *lpVtbl;};
struct IEnumNetCfgBindingInterface {struct IEnumNetCfgBindingInterfaceVtbl *lpVtbl;};
struct IHighlightRenderingServices {struct IHighlightRenderingServicesVtbl *lpVtbl;};
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _INTERNET_CACHE_CONFIG_INFOA INTERNET_CACHE_CONFIG_INFOA;
typedef struct _INTERNET_CACHE_CONFIG_INFOW INTERNET_CACHE_CONFIG_INFOW;
struct IOleInPlaceObjectWindowless {struct IOleInPlaceObjectWindowlessVtbl *lpVtbl;};
struct IRTCSessionReferStatusEvent {struct IRTCSessionReferStatusEventVtbl *lpVtbl;};
struct IRTCSessionStateChangeEvent {struct IRTCSessionStateChangeEventVtbl *lpVtbl;};
typedef struct _ISA_PNP_LOGICAL_DEVICE_INFO ISA_PNP_LOGICAL_DEVICE_INFO;
struct IShellIconOverlayIdentifier {struct IShellIconOverlayIdentifierVtbl *lpVtbl;};
struct ISyncMgrSynchronizeCallback {struct ISyncMgrSynchronizeCallbackVtbl *lpVtbl;};
struct IUPnPServiceCallbackPrivate {struct IUPnPServiceCallbackPrivateVtbl *lpVtbl;};
typedef struct _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _30CC7D53408649846FD423BE19D3AD21 *LPGOPHER_ASK_ATTRIBUTE_TYPE;
typedef struct _FEF45AADF86B3C581868F0239CC1F2BD *LPGOPHER_TTL_ATTRIBUTE_TYPE;
typedef struct _INTERNET_CACHE_TIMESTAMPS *LPINTERNET_CACHE_TIMESTAMPS;
typedef struct _FB1D2264C317C52716420591CB70B7FC *LPINTERNET_CERTIFICATE_INFO;
typedef struct _FF89E438303108C0D33906FD5928F176 *LPINTERNET_PER_CONN_OPTIONA;
typedef struct _69ED22A368F3E798C4741346320560FE *LPINTERNET_PER_CONN_OPTIONW;
typedef struct linemediacontrolcallstate_tag *LPLINEMEDIACONTROLCALLSTATE;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;
enum MACRO_ACM_FILTERTAGDETAILSF {ACM_FILTERTAGDETAILSF_INDEX = 0x0,ACM_FILTERTAGDETAILSF_FILTERTAG = 0x1,ACM_FILTERTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FILTERTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_ACM_FORMATTAGDETAILSF {ACM_FORMATTAGDETAILSF_INDEX = 0x0,ACM_FORMATTAGDETAILSF_FORMATTAG = 0x1,ACM_FORMATTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FORMATTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_BPCCapBusMasteredData {BPCCapBusMasteredData = 0x1,BPCCapIndependentTuner = 0x2,BPCCapExternalDataBus = 0x4,BPCCapLowSpeedData = 0x10,BPCCapHighSpeedData = 0x20,};
enum MACRO_CACHE_ENTRY_ATTRIBUTE {CACHE_ENTRY_ATTRIBUTE_FC = 0x4,CACHE_ENTRY_HITRATE_FC = 0x10,CACHE_ENTRY_MODTIME_FC = 0x40,CACHE_ENTRY_EXPTIME_FC = 0x80,CACHE_ENTRY_ACCTIME_FC = 0x100,CACHE_ENTRY_SYNCTIME_FC = 0x200,CACHE_ENTRY_HEADERINFO_FC = 0x400,CACHE_ENTRY_EXEMPT_DELTA_FC = 0x800,};
enum MACRO_CDERR_REGISTRYFAILURE {CDERR_REGISTRYFAILURE = 0x100,};
enum MACRO_CERT_CHAIN_REVOCATION {CERT_CHAIN_REVOCATION_CHECK_END_CERT = 0x10000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN = 0x20000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x40000000,CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 0x80000000,CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 0x8000000,CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 0x40,CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 0x80,CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 0x100,CERT_CHAIN_TIMESTAMP_TIME = 0x200,};
enum MACRO_D3DFVF_TEXTUREFORMAT2 {D3DFVF_TEXTUREFORMAT2 = 0,D3DFVF_TEXTUREFORMAT1 = 3,D3DFVF_TEXTUREFORMAT3 = 1,D3DFVF_TEXTUREFORMAT4 = 2,};
enum MACRO_DISPID_BEFORENAVIGATE {DISPID_BEFORENAVIGATE = 100,DISPID_NAVIGATECOMPLETE = 101,DISPID_STATUSTEXTCHANGE = 102,DISPID_QUIT = 103,DISPID_DOWNLOADCOMPLETE = 104,DISPID_COMMANDSTATECHANGE = 105,DISPID_DOWNLOADBEGIN = 106,DISPID_NEWWINDOW = 107,DISPID_PROGRESSCHANGE = 108,DISPID_WINDOWMOVE = 109,DISPID_WINDOWRESIZE = 110,DISPID_WINDOWACTIVATE = 111,DISPID_PROPERTYCHANGE = 112,DISPID_TITLECHANGE = 113,DISPID_TITLEICONCHANGE = 114,DISPID_FRAMEBEFORENAVIGATE = 200,DISPID_FRAMENAVIGATECOMPLETE = 201,DISPID_FRAMENEWWINDOW = 204,DISPID_BEFORENAVIGATE2 = 250,DISPID_NEWWINDOW2 = 251,DISPID_NAVIGATECOMPLETE2 = 252,DISPID_ONQUIT = 253,DISPID_ONVISIBLE = 254,DISPID_ONTOOLBAR = 255,DISPID_ONMENUBAR = 256,DISPID_ONSTATUSBAR = 257,DISPID_ONFULLSCREEN = 258,DISPID_DOCUMENTCOMPLETE = 259,DISPID_ONTHEATERMODE = 260,DISPID_ONADDRESSBAR = 261,DISPID_WINDOWSETRESIZABLE = 262,DISPID_WINDOWCLOSING = 263,DISPID_WINDOWSETLEFT = 264,DISPID_WINDOWSETTOP = 265,DISPID_WINDOWSETWIDTH = 266,DISPID_WINDOWSETHEIGHT = 267,DISPID_CLIENTTOHOSTWINDOW = 268,DISPID_SETSECURELOCKICON = 269,DISPID_FILEDOWNLOAD = 270,DISPID_NAVIGATEERROR = 271,DISPID_PRIVACYIMPACTEDSTATECHANGE = 272,DISPID_PRINTTEMPLATEINSTANTIATION = 225,DISPID_PRINTTEMPLATETEARDOWN = 226,DISPID_UPDATEPAGESTATUS = 227,DISPID_WINDOWREGISTERED = 200,DISPID_WINDOWREVOKED = 201,DISPID_RESETFIRSTBOOTMODE = 1,DISPID_RESETSAFEMODE = 2,DISPID_REFRESHOFFLINEDESKTOP = 3,DISPID_ADDFAVORITE = 4,DISPID_ADDCHANNEL = 5,DISPID_ADDDESKTOPCOMPONENT = 6,DISPID_ISSUBSCRIBED = 7,DISPID_NAVIGATEANDFIND = 8,DISPID_IMPORTEXPORTFAVORITES = 9,DISPID_AUTOCOMPLETESAVEFORM = 10,DISPID_AUTOSCAN = 11,DISPID_AUTOCOMPLETEATTACH = 12,DISPID_SHOWBROWSERUI = 13,DISPID_SHELLUIHELPERLAST = 13,DISPID_ADVANCEERROR = 10,DISPID_RETREATERROR = 11,DISPID_CANADVANCEERROR = 12,DISPID_CANRETREATERROR = 13,DISPID_GETERRORLINE = 14,DISPID_GETERRORCHAR = 15,DISPID_GETERRORCODE = 16,DISPID_GETERRORMSG = 17,DISPID_GETERRORURL = 18,DISPID_GETDETAILSSTATE = 19,DISPID_SETDETAILSSTATE = 20,DISPID_GETPERERRSTATE = 21,DISPID_SETPERERRSTATE = 22,DISPID_GETALWAYSSHOWLOCKSTATE = 23,DISPID_FAVSELECTIONCHANGE = 1,DISPID_SELECTIONCHANGE = 2,DISPID_DOUBLECLICK = 3,DISPID_INITIALIZED = 4,DISPID_MOVESELECTIONUP = 1,DISPID_MOVESELECTIONDOWN = 2,DISPID_RESETSORT = 3,DISPID_NEWFOLDER = 4,DISPID_SYNCHRONIZE = 5,DISPID_IMPORT = 6,DISPID_EXPORT = 7,DISPID_INVOKECONTEXTMENU = 8,DISPID_MOVESELECTIONTO = 9,DISPID_SUBSCRIPTIONSENABLED = 10,DISPID_CREATESUBSCRIPTION = 11,DISPID_DELETESUBSCRIPTION = 12,DISPID_SETROOT = 13,DISPID_ENUMOPTIONS = 14,DISPID_SELECTEDITEM = 15,DISPID_ROOT = 16,DISPID_DEPTH = 17,DISPID_MODE = 18,DISPID_FLAGS = 19,DISPID_TVFLAGS = 20,DISPID_NSCOLUMNS = 21,DISPID_COUNTVIEWTYPES = 22,DISPID_SETVIEWTYPE = 23,DISPID_SELECTEDITEMS = 24,DISPID_EXPAND = 25,DISPID_UNSELECTALL = 26,};
enum MACRO_DISPID_QUERY_METADATA {DISPID_QUERY_METADATA_VROOTUSED = 2,DISPID_QUERY_METADATA_VROOTAUTOMATIC = 3,DISPID_QUERY_METADATA_VROOTMANUAL = 4,DISPID_QUERY_METADATA_PROPGUID = 5,DISPID_QUERY_METADATA_PROPDISPID = 6,DISPID_QUERY_METADATA_PROPNAME = 7,DISPID_QUERY_METADATA_STORELEVEL = 8,DISPID_QUERY_METADATA_PROPMODIFIABLE = 9,};
enum MACRO_ERROR_INTERNET_INSERT {ERROR_INTERNET_INSERT_CDROM = 12053,ERROR_INTERNET_FORTEZZA_LOGIN_NEEDED = 12054,ERROR_INTERNET_SEC_CERT_ERRORS = 12055,ERROR_INTERNET_SEC_CERT_NO_REV = 12056,ERROR_INTERNET_SEC_CERT_REV_FAILED = 12057,ERROR_INTERNET_NOT_INITIALIZED = 12172,ERROR_INTERNET_NEED_MSN_SSPI_PKG = 12173,ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = 12174,};
enum MACRO_IMC_GETCONVERSIONMODE {IMC_GETCONVERSIONMODE = 0x1,IMC_SETCONVERSIONMODE = 0x2,IMC_GETSENTENCEMODE = 0x3,IMC_SETSENTENCEMODE = 0x4,IMC_GETOPENSTATUS = 0x5,IMC_SETOPENSTATUS = 0x6,IMC_GETSOFTKBDFONT = 0x11,IMC_SETSOFTKBDFONT = 0x12,IMC_GETSOFTKBDPOS = 0x13,IMC_SETSOFTKBDPOS = 0x14,IMC_GETSOFTKBDSUBTYPE = 0x15,IMC_SETSOFTKBDSUBTYPE = 0x16,IMC_SETSOFTKBDDATA = 0x18,};
enum MACRO_KeyShiftLanguageFlag1 {KeyShiftLanguageFlag1 = 0x8000,};
enum MACRO_KeyShiftLeftShiftFlag {KeyShiftLeftShiftFlag = 0x2000000,};
enum MACRO_KeyShiftReserved40000 {KeyShiftReserved40000 = 0x40000,};
enum MACRO_KeyShiftRightCtrlFlag {KeyShiftRightCtrlFlag = 0x400000,};
enum MACRO_KeyShiftUseVKNullFlag {KeyShiftUseVKNullFlag = 0x2000,};
enum MACRO_LOCALE_NOUSEROVERRIDE {LOCALE_NOUSEROVERRIDE = 0x80000000,LOCALE_USE_CP_ACP = 0x40000000,LOCALE_RETURN_NUMBER = 0x20000000,LOCALE_ILANGUAGE = 0x1,LOCALE_SLANGUAGE = 0x2,LOCALE_SENGLANGUAGE = 0x1001,LOCALE_SABBREVLANGNAME = 0x3,LOCALE_SNATIVELANGNAME = 0x4,LOCALE_ICOUNTRY = 0x5,LOCALE_SCOUNTRY = 0x6,LOCALE_SENGCOUNTRY = 0x1002,LOCALE_SABBREVCTRYNAME = 0x7,LOCALE_SNATIVECTRYNAME = 0x8,LOCALE_IDEFAULTLANGUAGE = 0x9,LOCALE_IDEFAULTCOUNTRY = 0xA,LOCALE_IDEFAULTCODEPAGE = 0xB,LOCALE_IDEFAULTANSICODEPAGE = 0x1004,LOCALE_IDEFAULTMACCODEPAGE = 0x1011,LOCALE_SLIST = 0xC,LOCALE_IMEASURE = 0xD,LOCALE_SDECIMAL = 0xE,LOCALE_STHOUSAND = 0xF,LOCALE_SGROUPING = 0x10,LOCALE_IDIGITS = 0x11,LOCALE_ILZERO = 0x12,LOCALE_INEGNUMBER = 0x1010,LOCALE_SNATIVEDIGITS = 0x13,LOCALE_SCURRENCY = 0x14,LOCALE_SINTLSYMBOL = 0x15,LOCALE_SMONDECIMALSEP = 0x16,LOCALE_SMONTHOUSANDSEP = 0x17,LOCALE_SMONGROUPING = 0x18,LOCALE_ICURRDIGITS = 0x19,LOCALE_IINTLCURRDIGITS = 0x1A,LOCALE_ICURRENCY = 0x1B,LOCALE_INEGCURR = 0x1C,LOCALE_SDATE = 0x1D,LOCALE_STIME = 0x1E,LOCALE_SSHORTDATE = 0x1F,LOCALE_SLONGDATE = 0x20,LOCALE_STIMEFORMAT = 0x1003,LOCALE_IDATE = 0x21,LOCALE_ILDATE = 0x22,LOCALE_ITIME = 0x23,LOCALE_ITIMEMARKPOSN = 0x1005,LOCALE_ICENTURY = 0x24,LOCALE_ITLZERO = 0x25,LOCALE_IDAYLZERO = 0x26,LOCALE_IMONLZERO = 0x27,LOCALE_S1159 = 0x28,LOCALE_S2359 = 0x29,LOCALE_ICALENDARTYPE = 0x1009,LOCALE_IOPTIONALCALENDAR = 0x100B,LOCALE_IFIRSTDAYOFWEEK = 0x100C,LOCALE_IFIRSTWEEKOFYEAR = 0x100D,LOCALE_SDAYNAME1 = 0x2A,LOCALE_SDAYNAME2 = 0x2B,LOCALE_SDAYNAME3 = 0x2C,LOCALE_SDAYNAME4 = 0x2D,LOCALE_SDAYNAME5 = 0x2E,LOCALE_SDAYNAME6 = 0x2F,LOCALE_SDAYNAME7 = 0x30,LOCALE_SABBREVDAYNAME1 = 0x31,LOCALE_SABBREVDAYNAME2 = 0x32,LOCALE_SABBREVDAYNAME3 = 0x33,LOCALE_SABBREVDAYNAME4 = 0x34,LOCALE_SABBREVDAYNAME5 = 0x35,LOCALE_SABBREVDAYNAME6 = 0x36,LOCALE_SABBREVDAYNAME7 = 0x37,LOCALE_SMONTHNAME1 = 0x38,LOCALE_SMONTHNAME2 = 0x39,LOCALE_SMONTHNAME3 = 0x3A,LOCALE_SMONTHNAME4 = 0x3B,LOCALE_SMONTHNAME5 = 0x3C,LOCALE_SMONTHNAME6 = 0x3D,LOCALE_SMONTHNAME7 = 0x3E,LOCALE_SMONTHNAME8 = 0x3F,LOCALE_SMONTHNAME9 = 0x40,LOCALE_SMONTHNAME10 = 0x41,LOCALE_SMONTHNAME11 = 0x42,LOCALE_SMONTHNAME12 = 0x43,LOCALE_SMONTHNAME13 = 0x100E,LOCALE_SABBREVMONTHNAME1 = 0x44,LOCALE_SABBREVMONTHNAME2 = 0x45,LOCALE_SABBREVMONTHNAME3 = 0x46,LOCALE_SABBREVMONTHNAME4 = 0x47,LOCALE_SABBREVMONTHNAME5 = 0x48,LOCALE_SABBREVMONTHNAME6 = 0x49,LOCALE_SABBREVMONTHNAME7 = 0x4A,LOCALE_SABBREVMONTHNAME8 = 0x4B,LOCALE_SABBREVMONTHNAME9 = 0x4C,LOCALE_SABBREVMONTHNAME10 = 0x4D,LOCALE_SABBREVMONTHNAME11 = 0x4E,LOCALE_SABBREVMONTHNAME12 = 0x4F,LOCALE_SABBREVMONTHNAME13 = 0x100F,LOCALE_SPOSITIVESIGN = 0x50,LOCALE_SNEGATIVESIGN = 0x51,LOCALE_IPOSSIGNPOSN = 0x52,LOCALE_INEGSIGNPOSN = 0x53,LOCALE_IPOSSYMPRECEDES = 0x54,LOCALE_IPOSSEPBYSPACE = 0x55,LOCALE_INEGSYMPRECEDES = 0x56,LOCALE_INEGSEPBYSPACE = 0x57,LOCALE_FONTSIGNATURE = 0x58,LOCALE_SISO639LANGNAME = 0x59,LOCALE_SISO3166CTRYNAME = 0x5A,LOCALE_IDEFAULTEBCDICCODEPAGE = 0x1012,LOCALE_IPAPERSIZE = 0x100A,LOCALE_SENGCURRNAME = 0x1007,LOCALE_SNATIVECURRNAME = 0x1008,LOCALE_SYEARMONTH = 0x1006,LOCALE_SSORTNAME = 0x1013,LOCALE_IDIGITSUBSTITUTION = 0x1014,};
enum MACRO_MAXLOGICALLOGNAMESIZE {MAXLOGICALLOGNAMESIZE = 256,};
enum MACRO_MCM_SETFIRSTDAYOFWEEK {MCM_SETFIRSTDAYOFWEEK = 4111,MCM_GETFIRSTDAYOFWEEK = 4112,MCM_GETRANGE = 4113,MCM_SETRANGE = 4114,MCM_GETMONTHDELTA = 4115,MCM_SETMONTHDELTA = 4116,MCM_GETMAXTODAYWIDTH = 4117,MCM_GETMAXNONEWIDTH = 4118,};
enum MACRO_OID_DOT11_CURRENT_CCA {OID_DOT11_CURRENT_CCA_MODE = 218170167,OID_DOT11_ED_THRESHOLD = 218170168,OID_DOT11_CCA_WATCHDOG_TIMER_MAX = 218170169,OID_DOT11_CCA_WATCHDOG_COUNT_MAX = 218170170,OID_DOT11_CCA_WATCHDOG_TIMER_MIN = 218170171,OID_DOT11_CCA_WATCHDOG_COUNT_MIN = 218170172,OID_DOT11_REG_DOMAINS_SUPPORT_VALUE = 218170173,OID_DOT11_SUPPORTED_TX_ANTENNA = 218170174,OID_DOT11_SUPPORTED_RX_ANTENNA = 218170175,OID_DOT11_DIVERSITY_SELECTION_RX = 218170176,OID_DOT11_SUPPORTED_DATA_RATES_VALUE = 218170177,OID_DOT11_CURRENT_FREQUENCY = 218170178,OID_DOT11_TI_THRESHOLD = 218170179,OID_DOT11_FREQUENCY_BANDS_SUPPORTED = 218170180,};
enum MACRO_OID_DOT11_CURRENT_PHY {OID_DOT11_CURRENT_PHY_TYPE = 218170124,OID_DOT11_JOIN_REQUEST = 218170125,};
enum MACRO_OID_DOT11_OPERATIONAL {OID_DOT11_OPERATIONAL_RATE_SET = 218170138,OID_DOT11_BEACON_PERIOD = 218170139,OID_DOT11_DTIM_PERIOD = 218170140,OID_DOT11_WEP_ICV_ERROR_COUNT = 218170141,OID_DOT11_MAC_ADDRESS = 218170142,OID_DOT11_RTS_THRESHOLD = 218170143,OID_DOT11_SHORT_RETRY_LIMIT = 218170144,OID_DOT11_LONG_RETRY_LIMIT = 218170145,OID_DOT11_FRAGMENTATION_THRESHOLD = 218170146,OID_DOT11_MAX_TRANSMIT_MSDU_LIFETIME = 218170147,OID_DOT11_MAX_RECEIVE_LIFETIME = 218170148,OID_DOT11_COUNTERS_ENTRY = 218170149,OID_DOT11_SUPPORTED_PHY_TYPES = 218170150,OID_DOT11_CURRENT_REG_DOMAIN = 218170151,};
enum MACRO_REGSTR_VAL_BACKBITMAP {REGSTR_VAL_BACKBITMAP_TYPE = 1,REGSTR_VAL_SCHANNELENABLEPROTOCOL_TYPE = 4,REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 1,REGSTR_VAL_DEFAULT_CODEPAGE_TYPE = 1,REGSTR_VAL_DEFAULT_SCRIPT_TYPE = 1,REGSTR_VAL_ACCETP_LANGUAGE_TYPE = 1,REGSTR_VAL_FONT_SCRIPT_TYPE = 1,REGSTR_VAL_FONT_SCRIPT_NAME_TYPE = 1,REGSTR_VAL_DEF_ENCODING_TYPE = 1,REGSTR_VAL_DEF_INETENCODING_TYPE = 4,REGSTR_VAL_FIXED_FONT_TYPE = 1,REGSTR_VAL_SCRIPT_FIXED_FONT_TYPE = 1,REGSTR_VAL_PROP_FONT_TYPE = 1,REGSTR_VAL_SCRIPT_PROP_FONT_TYPE = 1,REGSTR_VAL_FONT_SIZE_TYPE = 3,REGSTR_VAL_FONT_SIZE_DEF = 2,REGSTR_VAL_AUTODETECT_TYPE = 1,REGSTR_VAL_CODEPAGE_TYPE = 4,REGSTR_VAL_INETENCODING_TYPE = 4,REGSTR_VAL_FAMILY_TYPE = 4,REGSTR_VAL_LEVEL_TYPE = 4,REGSTR_VAL_ALIASTO_TYPE = 1,REGSTR_VAL_ENCODENAME_TYPE = 1,REGSTR_VAL_DESCRIPTION_TYPE = 1,REGSTR_VAL_WEBCHARSET_TYPE = 1,REGSTR_VAL_BODYCHARSET_TYPE = 1,REGSTR_VAL_HEADERCHARSET_TYPE = 1,REGSTR_VAL_FIXEDWIDTHFONT_TYPE = 1,REGSTR_VAL_PROPOPRTIONALFONT_TYPE = 1,REGSTR_VAL_PRIVCONVERTER_TYPE = 1,};
enum MACRO_SPI_SETCOMPLETIONINFO {SPI_SETCOMPLETIONINFO = 223,SPI_SETSIPINFO = 224,SPI_GETSIPINFO = 225,SPI_SETCURRENTIM = 226,SPI_GETCURRENTIM = 227,SPI_SIPMOVE = 250,};
enum MACRO_URLPOLICY_CREDENTIALS {URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0x0,URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 0x10000,URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 0x20000,URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 0x30000,};
enum MACRO_ckidSTREAMHANDLERDATA {ckidSTREAMHANDLERDATA = 1685222515,};
enum MACRO_fdexNameCaseSensitive {fdexNameCaseSensitive = 0x1,fdexNameEnsure = 0x2,fdexNameImplicit = 0x4,fdexNameCaseInsensitive = 0x8,fdexNameInternal = 0x10,fdexNameNoDynamicProperties = 0x20,};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
typedef struct _7307A00A22D5C0EAA9BB8E536231902F NDISUIO_DEVICE_NOTIFICATION;
typedef struct _NDIS_TAPI_PROVIDER_SHUTDOWN NDIS_TAPI_PROVIDER_SHUTDOWN;
struct OLEDBSimpleProviderListener {struct OLEDBSimpleProviderListenerVtbl *lpVtbl;};
typedef struct _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_NAME_CONSTRAINTS_INFO *PCERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_REGDEFUSAGE *PCRYPT_PROVIDER_REGDEFUSAGE;
typedef struct _DOT11_DISASSOCIATE_REQUEST *PDOT11_DISASSOCIATE_REQUEST;
typedef struct _structDVD_SUBPICTURE_STREAM_ATTR *PDVD_SUBPICTURE_STREAM_ATTR;
typedef struct _IP_ADAPTER_ANYCAST_ADDRESS *PIP_ADAPTER_ANYCAST_ADDRESS;
typedef struct _IP_ADAPTER_UNICAST_ADDRESS *PIP_ADAPTER_UNICAST_ADDRESS;
typedef struct _MIB_IPMCAST_BOUNDARY_TABLE *PMIB_IPMCAST_BOUNDARY_TABLE;
typedef struct tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
typedef struct NDIS_BPC_CONNECTION_ENABLE *PNDIS_BPC_CONNECTION_ENABLE;
typedef struct NDIS_BPC_CONNECTION_STATUS *PNDIS_BPC_CONNECTION_STATUS;
typedef struct _NDIS_TAPI_GET_ADDRESS_CAPS *PNDIS_TAPI_GET_ADDRESS_CAPS;
typedef struct _NDIS_TAPI_GET_EXTENSION_ID *PNDIS_TAPI_GET_EXTENSION_ID;
typedef struct _NDIS_TAPI_SET_APP_SPECIFIC *PNDIS_TAPI_SET_APP_SPECIFIC;
typedef struct _POWER_BROADCAST_POWER_INFO *PPOWER_BROADCAST_POWER_INFO;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _SSL_CREDENTIAL_CERTIFICATE *PSSL_CREDENTIAL_CERTIFICATE;
typedef struct _SecPkgContext_NativeNamesA *PSecPkgContext_NativeNamesA;
typedef struct _SecPkgContext_NativeNamesW *PSecPkgContext_NativeNamesW;
typedef struct _SecPkgContext_PackageInfoA *PSecPkgContext_PackageInfoA;
typedef struct _SecPkgContext_PackageInfoW *PSecPkgContext_PackageInfoW;
typedef struct _SecPkgCred_CipherStrengths *PSecPkgCred_CipherStrengths;
enum RTC_BUDDY_SUBSCRIPTION_TYPE {RTCBT_SUBSCRIBED = 0x0,RTCBT_ALWAYS_OFFLINE = 0x1,RTCBT_ALWAYS_ONLINE = 0x2,};
typedef struct _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
typedef struct _SEC_WINNT_AUTH_IDENTITY_EXA SEC_WINNT_AUTH_IDENTITY_EXA;
typedef struct _SEC_WINNT_AUTH_IDENTITY_EXW SEC_WINNT_AUTH_IDENTITY_EXW;
typedef struct tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
enum ShellSpecialFolderConstants {ssfDESKTOP = 0x0,ssfPROGRAMS = 0x2,ssfCONTROLS = 0x3,ssfPRINTERS = 0x4,ssfPERSONAL = 0x5,ssfFAVORITES = 0x6,ssfSTARTUP = 0x7,ssfRECENT = 0x8,ssfSENDTO = 0x9,ssfBITBUCKET = 0xA,ssfSTARTMENU = 0xB,ssfDESKTOPDIRECTORY = 0x10,ssfDRIVES = 0x11,ssfNETWORK = 0x12,ssfNETHOOD = 0x13,ssfFONTS = 0x14,ssfTEMPLATES = 0x15,ssfCOMMONSTARTMENU = 0x16,ssfCOMMONPROGRAMS = 0x17,ssfCOMMONSTARTUP = 0x18,ssfCOMMONDESKTOPDIR = 0x19,ssfAPPDATA = 0x1A,ssfPRINTHOOD = 0x1B,ssfLOCALAPPDATA = 0x1C,ssfALTSTARTUP = 0x1D,ssfCOMMONALTSTARTUP = 0x1E,ssfCOMMONFAVORITES = 0x1F,ssfINTERNETCACHE = 0x20,ssfCOOKIES = 0x21,ssfHISTORY = 0x22,ssfCOMMONAPPDATA = 0x23,ssfWINDOWS = 0x24,ssfSYSTEM = 0x25,ssfPROGRAMFILES = 0x26,ssfMYPICTURES = 0x27,ssfPROFILE = 0x28,ssfSYSTEMx86 = 0x29,ssfPROGRAMFILESx86 = 0x30,};
typedef unsigned int ( *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);
enum _HTML_PAINT_DRAW_INFO_FLAGS {HTMLPAINT_DRAWINFO_VIEWPORT = 0x1,HTMLPAINT_DRAWINFO_UPDATEREGION = 0x2,HTMLPAINT_DRAWINFO_XFORM = 0x4,HTML_PAINT_DRAW_INFO_FLAGS_Max = 0x7FFFFFFF,};
enum _MULTIPLE_TRUSTEE_OPERATION {NO_MULTIPLE_TRUSTEE = 0x0,TRUSTEE_IS_IMPERSONATE = 0x1,};
enum _NDIS_802_11_PRIVACY_FILTER {Ndis802_11PrivFilterAcceptAll = 0x0,Ndis802_11PrivFilter8021xWEP = 0x1,};
enum _styleTextUnderlinePosition {styleTextUnderlinePositionBelow = 0x0,styleTextUnderlinePositionAbove = 0x1,styleTextUnderlinePositionAuto = 0x2,styleTextUnderlinePositionNotSet = 0x3,styleTextUnderlinePosition_Max = 0x7FFFFFFF,};
enum _tagAUTOCOMPLETELISTOPTIONS {ACLO_NONE = 0x0,ACLO_CURRENTDIR = 0x1,ACLO_MYCOMPUTER = 0x2,ACLO_DESKTOP = 0x4,ACLO_FAVORITES = 0x8,ACLO_FILESYSONLY = 0x10,};
enum tagAM_SAMPLE_PROPERTY_FLAGS {AM_SAMPLE_SPLICEPOINT = 0x1,AM_SAMPLE_PREROLL = 0x2,AM_SAMPLE_DATADISCONTINUITY = 0x4,AM_SAMPLE_TYPECHANGED = 0x8,AM_SAMPLE_TIMEVALID = 0x10,AM_SAMPLE_TIMEDISCONTINUITY = 0x40,AM_SAMPLE_FLUSH_ON_PAUSE = 0x80,AM_SAMPLE_STOPVALID = 0x100,AM_SAMPLE_ENDOFSTREAM = 0x200,AM_STREAM_MEDIA = 0x0,AM_STREAM_CONTROL = 0x1,};
enum tagENUM_BINDING_PATHS_FLAGS {EBP_ABOVE = 0x1,EBP_BELOW = 0x2,};
typedef struct _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS CERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO CERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_NAME_CONSTRAINTS_INFO CERT_NAME_CONSTRAINTS_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO CERT_POLICY_QUALIFIER_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO CMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO CMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER CRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE CRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA CRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA CRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_REGDEFUSAGE CRYPT_PROVIDER_REGDEFUSAGE;
enum DBCOMMANDPERSISTFLAGENUM21 {DBCOMMANDPERSISTFLAG_DEFAULT = 0x0,DBCOMMANDPERSISTFLAG_PERSISTVIEW = 0x2,DBCOMMANDPERSISTFLAG_PERSISTPROCEDURE = 0x4,};
typedef struct creative_fastspeechformat_tag DIALOGICOKIADPCMWAVEFORMAT;
typedef struct _DOT11_DISASSOCIATE_REQUEST DOT11_DISASSOCIATE_REQUEST;
typedef struct _structDVD_SUBPICTURE_STREAM_ATTR DVD_SUBPICTURE_STREAM_ATTR;
typedef struct _21B90258E17C8B6D2BC61A88DF74B5FB GOPHER_SITE_ATTRIBUTE_TYPE;
typedef struct _6950E4854C03824D44DF624674A695D1 GOPHER_VIEW_ATTRIBUTE_TYPE;
struct HTMLInputFileElementEvents {struct HTMLInputFileElementEventsVtbl *lpVtbl;};
struct HTMLInputTextElementEvents {struct HTMLInputTextElementEventsVtbl *lpVtbl;};
struct IAMCopyCaptureFileProgress {struct IAMCopyCaptureFileProgressVtbl *lpVtbl;};
struct IActiveIMMMessagePumpOwner {struct IActiveIMMMessagePumpOwnerVtbl *lpVtbl;};
struct IAnimationComposerSiteSink {struct IAnimationComposerSiteSinkVtbl *lpVtbl;};
struct IDebugPropertyEnumType_All {struct IDebugPropertyEnumType_AllVtbl *lpVtbl;};
struct IElementBehaviorSiteLayout {struct IElementBehaviorSiteLayoutVtbl *lpVtbl;};
struct IElementBehaviorSiteRender {struct IElementBehaviorSiteRenderVtbl *lpVtbl;};
struct IHTMLDOMChildrenCollection {struct IHTMLDOMChildrenCollectionVtbl *lpVtbl;};
struct IHTMLStyleSheetsCollection {struct IHTMLStyleSheetsCollectionVtbl *lpVtbl;};
typedef struct _INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW INTERNET_CACHE_ENTRY_INFOW;
typedef struct _INTERNET_CACHE_GROUP_INFOA INTERNET_CACHE_GROUP_INFOA;
typedef struct _INTERNET_CACHE_GROUP_INFOW INTERNET_CACHE_GROUP_INFOW;
struct INetCfgComponentPropertyUi {struct INetCfgComponentPropertyUiVtbl *lpVtbl;};
struct INetCfgPnpReconfigCallback {struct INetCfgPnpReconfigCallbackVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_ANYCAST_ADDRESS IP_ADAPTER_ANYCAST_ADDRESS;
typedef struct _IP_ADAPTER_UNICAST_ADDRESS IP_ADAPTER_UNICAST_ADDRESS;
struct IRTCUserSearchResultsEvent {struct IRTCUserSearchResultsEventVtbl *lpVtbl;};
struct ISelectionServicesListener {struct ISelectionServicesListenerVtbl *lpVtbl;};
struct IShellNotificationCallback {struct IShellNotificationCallbackVtbl *lpVtbl;};
struct ISubscriptionAgentShellExt {struct ISubscriptionAgentShellExtVtbl *lpVtbl;};
struct IVoIPCurrentCallEnumerator {struct IVoIPCurrentCallEnumeratorVtbl *lpVtbl;};
typedef IBindStatusCallbackHolder *LPBINDSTATUSCALLBACKHOLDER;
typedef struct _BY_HANDLE_DB_INFORMATION *LPBY_HANDLE_DB_INFORMATION;
typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;
typedef struct _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;
typedef struct IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;
typedef IEmptyVolumeCacheCallBack *LPEMPTYVOLUMECACHECALLBACK;
typedef struct _B3B9922EB7092B419B9B91CCE29DC8AC *LPINTERNET_PREFETCH_STATUS;
typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;
typedef struct _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;
typedef ISyncMgrSynchronizeInvoke *LPSYNCMGRSYNCHRONIZEINVOKE;
typedef struct _WINDOWS_IRDA_DEVICE_INFO *LPWINDOWS_IRDA_DEVICE_INFO;
enum MACRO_CALLBACK_DISCONTINUE {CALLBACK_DISCONTINUE = 0x80000000,};
enum MACRO_CEDB_MAXDBASENAMELEN {CEDB_MAXDBASENAMELEN = 32,CEDB_MAXSORTORDER = 4,CEDB_VALIDNAME = 1,CEDB_VALIDTYPE = 2,CEDB_VALIDSORTSPEC = 4,CEDB_VALIDMODTIME = 8,CEDB_VALIDDBFLAGS = 16,CEDB_VALIDCREATE = 23,CEDB_NOCOMPRESS = 65536,CEDB_SYSTEMDB = 131072,};
enum MACRO_D3DMAXUSERCLIPPLANES {D3DMAXUSERCLIPPLANES = 32,};
enum MACRO_DISPID_ONLOGONRESULT {DISPID_ONLOGONRESULT = 100,DISPID_ONLOGOFF = 101,DISPID_ONLISTADDRESULT = 102,DISPID_ONLISTREMOVERESULT = 103,DISPID_ONMESSAGEPRIVACYCHANGERESULT = 104,DISPID_ONPROMPTCHANGERESULT = 105,DISPID_ONUSERFRIENDLYNAMECHANGERESULT = 106,DISPID_ONUSERSTATECHANGED = 107,DISPID_ONTEXTRECEIVED = 108,DISPID_ONLOCALFRIENDLYNAMECHANGERESULT = 109,DISPID_ONLOCALSTATECHANGERESULT = 110,DISPID_ONAPPINVITERECEIVED = 111,DISPID_ONAPPINVITEACCEPTED = 112,DISPID_ONAPPINVITECANCELLED = 113,DISPID_ONSENDRESULT = 114,DISPID_ONNEWERCLIENTAVAILABLE = 115,DISPID_ONFINDRESULT = 116,DISPID_ONINVITEMAILRESULT = 117,DISPID_ONREQUESTURLRESULT = 118,DISPID_ONSESSIONSTATECHANGE = 119,DISPID_ONUSERJOIN = 120,DISPID_ONUSERLEAVE = 121,DISPID_ONNEWSESSIONREQUEST = 122,DISPID_ONINVITEUSER = 123,DISPID_ONSERVICELOGOFF = 124,DISPID_ONPRIMARYSERVICECHANGED = 125,DISPID_ONAPPSHUTDOWN = 126,};
enum MACRO_E_RegCreateKeyFailed {E_RegCreateKeyFailed = 0x800CCD00,E_RegQueryInfoKeyFailed = 0x800CCD01,E_UserCancel = 0x800CCD02,E_RegOpenKeyFailed = 0x800CCD03,E_RegSetValueFailed = 0x800CCD04,E_RegDeleteKeyFailed = 0x800CCD05,E_DuplicateAccountName = 0x800CCD06,};
enum MACRO_IMN_SOFTKBDDESTROYED {IMN_SOFTKBDDESTROYED = 0x11,};
enum MACRO_INTERNET_SERVICE_URL {INTERNET_SERVICE_URL = 0,INTERNET_OPTION_CONTEXT_VALUE_OLD = 10,INTERNET_OPTION_NET_SPEED = 61,INTERNET_OPTION_SECURITY_CONNECTION_INFO = 66,INTERNET_OPTION_DIAGNOSTIC_SOCKET_INFO = 67,INTERNET_OPTION_DETECT_POST_SEND = 71,INTERNET_OPTION_DISABLE_NTLM_PREAUTH = 72,INTERNET_LAST_OPTION_INTERNAL = 95,INTERNET_OPTION_OFFLINE_TIMEOUT = 49,INTERNET_OPTION_LINE_STATE = 50,};
enum MACRO_KeyShiftAnyShiftFlag {KeyShiftAnyShiftFlag = 0x20000000,};
enum MACRO_KeyShiftLeftCtrlFlag {KeyShiftLeftCtrlFlag = 0x4000000,};
enum MACRO_KeyShiftRightAltFlag {KeyShiftRightAltFlag = 0x100000,};
enum MACRO_KeyShiftRightWinFlag {KeyShiftRightWinFlag = 0x80000,};
enum MACRO_LAST_LINEREQUESTMODE {LAST_LINEREQUESTMODE = 2,};
enum MACRO_LVM_GETISEARCHSTRING {LVM_GETISEARCHSTRING = 4148,};
enum MACRO_PAGESETUPDLGORDMOTIF {PAGESETUPDLGORDMOTIF = 1550,};
enum MACRO_SBN_SIMPLEMODECHANGE {SBN_SIMPLEMODECHANGE = -880,};
enum MACRO_SCHANNEL_RENEGOTIATE {SCHANNEL_RENEGOTIATE = 0,SCHANNEL_SHUTDOWN = 1,SCHANNEL_ALERT = 2,};
enum MACRO_SECURITY_INFORMATION {OWNER_SECURITY_INFORMATION = 0x1,GROUP_SECURITY_INFORMATION = 0x2,DACL_SECURITY_INFORMATION = 0x4,SACL_SECURITY_INFORMATION = 0x8,};
enum MACRO_SYMMETRICWRAPKEYBLOB {SYMMETRICWRAPKEYBLOB = 0xB,};
enum MACRO_SYNCMGRREGISTERFLAGS {SYNCMGRREGISTERFLAGS_MASK = 0x7,};
enum MACRO_S_AlreadyInitialized {S_AlreadyInitialized = 0xCCD09,};
enum MACRO_listtypeSTREAMHEADER {listtypeSTREAMHEADER = 1819440243,};
typedef struct _MIB_IPMCAST_BOUNDARY_TABLE MIB_IPMCAST_BOUNDARY_TABLE;
typedef struct tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
typedef struct _NDIS_TAPI_GET_ADDRESS_CAPS NDIS_TAPI_GET_ADDRESS_CAPS;
typedef struct _NDIS_TAPI_GET_EXTENSION_ID NDIS_TAPI_GET_EXTENSION_ID;
typedef struct _NDIS_TAPI_SET_APP_SPECIFIC NDIS_TAPI_SET_APP_SPECIFIC;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct AM_DVDCOPY_SET_COPY_STATE *PAM_DVDCOPY_SET_COPY_STATE;
typedef struct _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_POLICY_MAPPINGS_INFO *PCERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct _DOT11_DEFAULT_WEP_OFFLOAD *PDOT11_DEFAULT_WEP_OFFLOAD;
typedef struct _DOT11_OPTIONAL_CAPABILITY *PDOT11_OPTIONAL_CAPABILITY;
typedef struct _DOT11_STA_POWER_MGMT_MODE *PDOT11_STA_POWER_MGMT_MODE;
typedef struct _DOT11_SUPPORTED_PHY_TYPES *PDOT11_SUPPORTED_PHY_TYPES;
typedef struct _CA059CF4194B4A9D56D5FA32D4D81CE0 PERSIST_FOLDER_TARGET_INFO;
typedef struct _FULL_PTR_TO_REFID_ELEMENT *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _HTTP_FILTER_ACCESS_DENIED *PHTTP_FILTER_ACCESS_DENIED;
typedef struct _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _NDIS_802_11_BSSID_LIST_EX *PNDIS_802_11_BSSID_LIST_EX;
typedef struct _NDIS_802_11_CONFIGURATION *PNDIS_802_11_CONFIGURATION;
typedef struct NDIS_BPC_STATUS_CONNECTION *PNDIS_BPC_STATUS_CONNECTED;
typedef struct _NDIS_TAPI_GET_CALL_STATUS *PNDIS_TAPI_GET_CALL_STATUS;
typedef struct _NDIS_TAPI_SET_CALL_PARAMS *PNDIS_TAPI_SET_CALL_PARAMS;
typedef struct _POWER_BROADCAST_POWER_INFO POWER_BROADCAST_POWER_INFO;
typedef struct _REPARSE_POINT_INFORMATION *PREPARSE_POINT_INFORMATION;
typedef struct _RNDIS_PDD_CHARACTERISTICS *PRNDIS_PDD_CHARACTERISTICS;
typedef struct _SCH_CRED_PUBLIC_CERTCHAIN *PSCH_CRED_PUBLIC_CERTCHAIN;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SPC_INDIRECT_DATA_CONTENT *PSPC_INDIRECT_DATA_CONTENT;
typedef struct _SecPkgContext_EapKeyBlock *PSecPkgContext_EapKeyBlock;
typedef struct _SecPkgContext_GroupNamesW *PSecPkgContext_GroupNamesW;
typedef struct _SecPkgContext_StreamSizes *PSecPkgContext_StreamSizes;
typedef struct _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;
enum RTC_USER_SEARCH_PREFERENCE {RTCUSP_MAX_MATCHES = 0x0,RTCUSP_TIME_LIMIT = 0x1,};
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
typedef struct _SHChangeProductKeyAsIDList SHChangeProductKeyAsIDList;
typedef struct _SSL_CREDENTIAL_CERTIFICATE SSL_CREDENTIAL_CERTIFICATE;
typedef struct _D27293EA07A9AE13A5F9D796DF4562B3 STATUS_OBJECT_NOTIFICATION;
enum SUBSCRIPTION_AGENT_CONTROL {SUBSCRIPTION_AGENT_DELETE = 0x1,};
enum SearchCommandExecuteErrors {SCEE_PATHNOTFOUND = 0x1,SCEE_MAXFILESFOUND = 0x2,SCEE_INDEXSEARCH = 0x3,SCEE_CONSTRAINT = 0x4,SCEE_SCOPEMISMATCH = 0x5,SCEE_CASESENINDEX = 0x6,SCEE_INDEXNOTCOMPLETE = 0x7,};
typedef struct _SecPkgContext_NativeNamesA SecPkgContext_NativeNamesA;
typedef struct _SecPkgContext_NativeNamesW SecPkgContext_NativeNamesW;
typedef struct _SecPkgContext_PackageInfoA SecPkgContext_PackageInfoA;
typedef struct _SecPkgContext_PackageInfoW SecPkgContext_PackageInfoW;
typedef struct _SecPkgCred_CipherStrengths SecPkgCred_CipherStrengths;
enum _AMSTREAMSELECTENABLEFLAGS {AMSTREAMSELECTENABLE_ENABLE = 0x1,AMSTREAMSELECTENABLE_ENABLEALL = 0x2,};
enum _DMO_INPLACE_PROCESS_FLAGS {DMO_INPLACE_NORMAL = 0x0,DMO_INPLACE_ZERO = 0x1,};
enum _DOT11_INTEGRITY_FAIL_TYPE {dot11_integrity_fail_type_unicast_key = 0x1,dot11_integrity_fail_type_default_key = 0x2,};
struct _FULL_PTR_TO_REFID_ELEMENT {struct _FULL_PTR_TO_REFID_ELEMENT *Next;void *Pointer;unsigned int RefId;unsigned char State;};
enum _NDIS_FDDI_ATTACHMENT_TYPE {NdisFddiTypeIsolated = 0x1,NdisFddiTypeLocalA = 0x2,NdisFddiTypeLocalB = 0x3,NdisFddiTypeLocalAB = 0x4,NdisFddiTypeLocalS = 0x5,NdisFddiTypeWrapA = 0x6,NdisFddiTypeWrapB = 0x7,NdisFddiTypeWrapAB = 0x8,NdisFddiTypeWrapS = 0x9,NdisFddiTypeCWrapA = 0xA,NdisFddiTypeCWrapB = 0xB,NdisFddiTypeCWrapS = 0xC,NdisFddiTypeThrough = 0xD,};
struct _SEC_WINNT_AUTH_IDENTITY_A {unsigned char *User;unsigned int UserLength;unsigned char *Domain;unsigned int DomainLength;unsigned char *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SEC_WINNT_AUTH_IDENTITY_W {unsigned short *User;unsigned int UserLength;unsigned short *Domain;unsigned int DomainLength;unsigned short *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SecPkgContext_StreamSizes {unsigned int cbHeader;unsigned int cbTrailer;unsigned int cbMaximumMessage;unsigned int cBuffers;unsigned int cbBlockSize;};
enum __MIDL_IMonikerHelper_0001 {MKHELPF_INIT_READONLY = 0x1,MKHELPF_INIT_SAVEAS = 0x2,MKHELPF_FORCEROUNDTRIP = 0x10,MKHELPF_NOPROGRESSUI = 0x20,MKHELPF_NOUI = 0x40,};
enum _styleBackgroundAttachment {styleBackgroundAttachmentFixed = 0x0,styleBackgroundAttachmentScroll = 0x1,styleBackgroundAttachmentNotSet = 0x2,styleBackgroundAttachment_Max = 0x7FFFFFFF,};
enum _styleDefaultTextSelection {styleDefaultTextSelectionFalse = 0x0,styleDefaultTextSelectionTrue = 0x1,styleDefaultTextSelection_Max = 0x7FFFFFFF,};
enum _styleTextLineThroughStyle {styleTextLineThroughStyleUndefined = 0x0,styleTextLineThroughStyleSingle = 0x1,styleTextLineThroughStyleDouble = 0x2,styleTextLineThroughStyle_Max = 0x7FFFFFFF,};
enum tagDVD_SUBPICTURE_LANG_EXT {DVD_SP_EXT_NotSpecified = 0x0,DVD_SP_EXT_Caption_Normal = 0x1,DVD_SP_EXT_Caption_Big = 0x2,DVD_SP_EXT_Caption_Children = 0x3,DVD_SP_EXT_CC_Normal = 0x5,DVD_SP_EXT_CC_Big = 0x6,DVD_SP_EXT_CC_Children = 0x7,DVD_SP_EXT_Forced = 0x9,DVD_SP_EXT_DirectorComments_Normal = 0xD,DVD_SP_EXT_DirectorComments_Big = 0xE,DVD_SP_EXT_DirectorComments_Children = 0xF,};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
typedef struct _E3EDD7A8EB9A8A8EC907A9BA28720893 ATM_TRAFFIC_DESCRIPTOR_IE;
typedef struct _CERT_ISSUER_SERIAL_NUMBER CERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_POLICY_MAPPINGS_INFO CERT_POLICY_MAPPINGS_INFO;
typedef struct _CERT_PRIVATE_KEY_VALIDITY CERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO CERT_STORE_PROV_FIND_INFO;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO CMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT CRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS CRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA CRYPT_VERIFY_MESSAGE_PARA;
typedef struct _DOT11_DEFAULT_WEP_OFFLOAD DOT11_DEFAULT_WEP_OFFLOAD;
typedef struct _DOT11_OPTIONAL_CAPABILITY DOT11_OPTIONAL_CAPABILITY;
typedef struct _DOT11_STA_POWER_MGMT_MODE DOT11_STA_POWER_MGMT_MODE;
typedef struct _DOT11_SUPPORTED_PHY_TYPES DOT11_SUPPORTED_PHY_TYPES;
struct DispDOMChildrenCollection {struct DispDOMChildrenCollectionVtbl *lpVtbl;};
struct DispHTMLDOMImplementation {struct DispHTMLDOMImplementationVtbl *lpVtbl;};
struct DispHTMLElementCollection {struct DispHTMLElementCollectionVtbl *lpVtbl;};
struct DispIHTMLInputFileElement {struct DispIHTMLInputFileElementVtbl *lpVtbl;};
struct DispIHTMLInputTextElement {struct DispIHTMLInputTextElementVtbl *lpVtbl;};
typedef struct tagExtendedDebugPropertyInfo ExtendedDebugPropertyInfo;
typedef struct _FULL_PTR_TO_REFID_ELEMENT FULL_PTR_TO_REFID_ELEMENT;
struct FreeThreadedDOMDocument26;
struct FreeThreadedDOMDocument30;
typedef struct _30CC7D53408649846FD423BE19D3AD21 GOPHER_ASK_ATTRIBUTE_TYPE;
typedef struct _FEF45AADF86B3C581868F0239CC1F2BD GOPHER_TTL_ATTRIBUTE_TYPE;
struct HTMLControlElementEvents2 {struct HTMLControlElementEvents2Vtbl *lpVtbl;};
struct HTMLMarqueeElementEvents2 {struct HTMLMarqueeElementEvents2Vtbl *lpVtbl;};
struct HTMLStyleSheetsCollection;
typedef struct _HTTP_FILTER_ACCESS_DENIED HTTP_FILTER_ACCESS_DENIED;
struct IAnimationComposerFactory {struct IAnimationComposerFactoryVtbl *lpVtbl;};
struct IBindStatusCallbackHolder {struct IBindStatusCallbackHolderVtbl *lpVtbl;};
struct IConnectionPointContainer {struct IConnectionPointContainerVtbl *lpVtbl;};
struct IDirectSoundCaptureBuffer {struct IDirectSoundCaptureBufferVtbl *lpVtbl;};
struct IElementNamespaceFactory2 {struct IElementNamespaceFactory2Vtbl *lpVtbl;};
struct IEmptyVolumeCacheCallBack {struct IEmptyVolumeCacheCallBackVtbl *lpVtbl;};
struct IHTMLAttributeCollection2 {struct IHTMLAttributeCollection2Vtbl *lpVtbl;};
struct IHTMLOptionElementFactory {struct IHTMLOptionElementFactoryVtbl *lpVtbl;};
typedef struct _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
typedef struct _B4498E7712516769976529B01E1F74C2 INTERNET_AUTH_NOTIFY_DATA;
typedef struct _INTERNET_CACHE_TIMESTAMPS INTERNET_CACHE_TIMESTAMPS;
typedef struct _FB1D2264C317C52716420591CB70B7FC INTERNET_CERTIFICATE_INFO;
typedef struct _FF89E438303108C0D33906FD5928F176 INTERNET_PER_CONN_OPTIONA;
typedef struct _69ED22A368F3E798C4741346320560FE INTERNET_PER_CONN_OPTIONW;
struct INetCfgComponentUpperEdge {struct INetCfgComponentUpperEdgeVtbl *lpVtbl;};
struct IOleInPlaceSiteWindowless {struct IOleInPlaceSiteWindowlessVtbl *lpVtbl;};
struct IRTCEnumUserSearchResults {struct IRTCEnumUserSearchResultsVtbl *lpVtbl;};
struct IRTCPresencePropertyEvent {struct IRTCPresencePropertyEventVtbl *lpVtbl;};
struct IRTCSessionPortManagement {struct IRTCSessionPortManagementVtbl *lpVtbl;};
struct ISubscriptionAgentControl {struct ISubscriptionAgentControlVtbl *lpVtbl;};
struct ISyncMgrSynchronizeInvoke {struct ISyncMgrSynchronizeInvokeVtbl *lpVtbl;};
struct ITransactionOutcomeEvents {struct ITransactionOutcomeEventsVtbl *lpVtbl;};
struct ITransportCallbackService {struct ITransportCallbackServiceVtbl *lpVtbl;};
struct IUPnPDeviceFinderCallback {struct IUPnPDeviceFinderCallbackVtbl *lpVtbl;};
typedef struct linemediacontrolcallstate_tag LINEMEDIACONTROLCALLSTATE;
typedef struct tagCOMMANDBANDSRESTOREINFO *LPCOMMANDBANDSRESTOREINFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _EXTENSION_CONTROL_BLOCK *LPEXTENSION_CONTROL_BLOCK;
typedef struct _HSE_SEND_HEADER_EX_INFO *LPHSE_SEND_HEADER_EX_INFO;
typedef struct _1B524A7EE9DF0D2D7407CE43B258BBC8 *LPINTERNET_CONNECTED_INFO;
typedef INotificationProcessMgr0 *LPNOTIFICATIONPROCESSMGR0;
typedef IPersistMediaPropertyBag *LPPERSISTMEDIAPROPERTYBAG;
typedef struct phoneinitializeexparams_tag *LPPHONEINITIALIZEEXPARAMS;
typedef struct _SYSTEM_POWER_STATUS_EX2 *LPSYSTEM_POWER_STATUS_EX2;
enum MACRO_ACMFILTERTAGDETAILS {ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48,};
enum MACRO_ACMFORMATTAGDETAILS {ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48,};
enum MACRO_ACM_DRIVERPRIORITYF {ACM_DRIVERPRIORITYF_ENABLE = 0x1,ACM_DRIVERPRIORITYF_DISABLE = 0x2,ACM_DRIVERPRIORITYF_ABLEMASK = 0x3,ACM_DRIVERPRIORITYF_BEGIN = 0x10000,ACM_DRIVERPRIORITYF_END = 0x20000,ACM_DRIVERPRIORITYF_DEFERMASK = 0x30000,};
enum MACRO_CONFIRMSAFETYACTION {CONFIRMSAFETYACTION_LOADOBJECT = 0x1,};
enum MACRO_CRYPT_VERIFYCONTEXT {CRYPT_VERIFYCONTEXT = 0xF0000000,CRYPT_NEWKEYSET = 0x8,CRYPT_DELETEKEYSET = 0x10,CRYPT_MACHINE_KEYSET = 0x20,CRYPT_SILENT = 0x40,CRYPT_EXPORTABLE = 0x1,CRYPT_USER_PROTECTED = 0x2,CRYPT_CREATE_SALT = 0x4,CRYPT_UPDATE_KEY = 0x8,CRYPT_NO_SALT = 0x10,CRYPT_PREGEN = 0x40,CRYPT_RECIPIENT = 0x10,CRYPT_INITIATOR = 0x40,CRYPT_ONLINE = 0x80,CRYPT_SF = 0x100,CRYPT_CREATE_IV = 0x200,CRYPT_KEK = 0x400,CRYPT_DATA_KEY = 0x800,CRYPT_VOLATILE = 0x1000,CRYPT_SGCKEY = 0x2000,CRYPT_ARCHIVABLE = 0x4000,};
enum MACRO_D3DCOLORWRITEENABLE {D3DCOLORWRITEENABLE_RED = 1,D3DCOLORWRITEENABLE_GREEN = 2,D3DCOLORWRITEENABLE_BLUE = 4,D3DCOLORWRITEENABLE_ALPHA = 8,};
enum MACRO_D3DPRESENT_INTERVAL {D3DPRESENT_INTERVAL_DEFAULT = 0x0,D3DPRESENT_INTERVAL_ONE = 0x1,D3DPRESENT_INTERVAL_TWO = 0x2,D3DPRESENT_INTERVAL_THREE = 0x4,D3DPRESENT_INTERVAL_FOUR = 0x8,D3DPRESENT_INTERVAL_IMMEDIATE = 0x80000000,};
enum MACRO_DB_COUNTUNAVAILABLE {DB_COUNTUNAVAILABLE = -1,};
enum MACRO_DLG_ACMFILTERCHOOSE {DLG_ACMFILTERCHOOSE_ID = 71,};
enum MACRO_IDD_ACMFILTERCHOOSE {IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = 101,IDD_ACMFILTERCHOOSE_CMB_FILTER = 102,};
enum MACRO_ID_PSRESTARTWINDOWS {ID_PSRESTARTWINDOWS = 0x2,ID_PSREBOOTSYSTEM = 0x3,};
enum MACRO_INTERNET_CACHE_FLAG {INTERNET_CACHE_FLAG_ALLOW_COLLISIONS = 0x100,INTERNET_CACHE_FLAG_INSTALLED_ENTRY = 0x200,INTERNET_CACHE_FLAG_ENTRY_OR_MAPPING = 0x400,INTERNET_CACHE_FLAG_ADD_FILENAME_ONLY = 0x800,INTERNET_CACHE_FLAG_GET_STRUCT_ONLY = 0x1000,};
enum MACRO_INTERNET_ERROR_LAST {INTERNET_ERROR_LAST = 12174,};
enum MACRO_KeyShiftAnyCtrlFlag {KeyShiftAnyCtrlFlag = 0x40000000,};
enum MACRO_KeyShiftCapitalFlag {KeyShiftCapitalFlag = 0x8000000,};
enum MACRO_KeyShiftLeftAltFlag {KeyShiftLeftAltFlag = 0x1000000,};
enum MACRO_KeyShiftLeftWinFlag {KeyShiftLeftWinFlag = 0x800000,};
enum MACRO_KeyShiftNumLockFlag {KeyShiftNumLockFlag = 0x1000,};
enum MACRO_KeyShiftReserved100 {KeyShiftReserved100 = 0x100,KeyShiftKanaFlag = 0x8000,};
enum MACRO_KeyShiftReserved200 {KeyShiftReserved200 = 0x200,};
enum MACRO_KeyShiftReserved400 {KeyShiftReserved400 = 0x400,};
enum MACRO_KeyStateToggledFlag {KeyStateToggledFlag = 0x1,KeyStateGetAsyncDownFlag = 0x2,KeyStateReserved4 = 0x4,KeyStateReserved8 = 0x8,KeyStateReserved10 = 0x10,KeyStateReserved20 = 0x20,KeyStatePrevDownFlag = 0x40,KeyStateDownFlag = 0x80,KeyStateKeyEventFlag = 0x80000000,};
enum MACRO_LINEMEDIAMODE_VIDEO {LINEMEDIAMODE_VIDEO = 0x8000,};
enum MACRO_LINETRANSLATEOPTION {LINETRANSLATEOPTION_CARDOVERRIDE = 0x1,LINETRANSLATEOPTION_CANCELCALLWAITING = 0x2,LINETRANSLATEOPTION_FORCELOCAL = 0x4,LINETRANSLATEOPTION_FORCELD = 0x8,};
enum MACRO_LINETRANSLATERESULT {LINETRANSLATERESULT_CANONICAL = 0x1,LINETRANSLATERESULT_INTERNATIONAL = 0x2,LINETRANSLATERESULT_LONGDISTANCE = 0x4,LINETRANSLATERESULT_LOCAL = 0x8,LINETRANSLATERESULT_INTOLLLIST = 0x10,LINETRANSLATERESULT_NOTINTOLLLIST = 0x20,LINETRANSLATERESULT_DIALBILLING = 0x40,LINETRANSLATERESULT_DIALQUIET = 0x80,LINETRANSLATERESULT_DIALDIALTONE = 0x100,LINETRANSLATERESULT_DIALPROMPT = 0x200,LINETRANSLATERESULT_VOICEDETECT = 0x400,};
enum MACRO_MAX_GOPHER_CATEGORY {MAX_GOPHER_CATEGORY_NAME = 128,MAX_GOPHER_ATTRIBUTE_NAME = 128,};
enum MACRO_MAX_SYNCMGRITEMNAME {MAX_SYNCMGRITEMNAME = 128,};
enum MACRO_MM_ACM_FILTERCHOOSE {MM_ACM_FILTERCHOOSE = 0x8000,};
enum MACRO_MM_ACM_FORMATCHOOSE {MM_ACM_FORMATCHOOSE = 0x8000,};
enum MACRO_OLEIVERB_PROPERTIES {OLEIVERB_PROPERTIES = -7,};
enum MACRO_PHONEBUTTONFUNCTION {PHONEBUTTONFUNCTION_UNKNOWN = 0x0,PHONEBUTTONFUNCTION_CONFERENCE = 0x1,PHONEBUTTONFUNCTION_TRANSFER = 0x2,PHONEBUTTONFUNCTION_DROP = 0x3,PHONEBUTTONFUNCTION_HOLD = 0x4,PHONEBUTTONFUNCTION_RECALL = 0x5,PHONEBUTTONFUNCTION_DISCONNECT = 0x6,PHONEBUTTONFUNCTION_CONNECT = 0x7,PHONEBUTTONFUNCTION_MSGWAITON = 0x8,PHONEBUTTONFUNCTION_MSGWAITOFF = 0x9,PHONEBUTTONFUNCTION_SELECTRING = 0xA,PHONEBUTTONFUNCTION_ABBREVDIAL = 0xB,PHONEBUTTONFUNCTION_FORWARD = 0xC,PHONEBUTTONFUNCTION_PICKUP = 0xD,PHONEBUTTONFUNCTION_RINGAGAIN = 0xE,PHONEBUTTONFUNCTION_PARK = 0xF,PHONEBUTTONFUNCTION_REJECT = 0x10,PHONEBUTTONFUNCTION_REDIRECT = 0x11,PHONEBUTTONFUNCTION_MUTE = 0x12,PHONEBUTTONFUNCTION_VOLUMEUP = 0x13,PHONEBUTTONFUNCTION_VOLUMEDOWN = 0x14,PHONEBUTTONFUNCTION_SPEAKERON = 0x15,PHONEBUTTONFUNCTION_SPEAKEROFF = 0x16,PHONEBUTTONFUNCTION_FLASH = 0x17,PHONEBUTTONFUNCTION_DATAON = 0x18,PHONEBUTTONFUNCTION_DATAOFF = 0x19,PHONEBUTTONFUNCTION_DONOTDISTURB = 0x1A,PHONEBUTTONFUNCTION_INTERCOM = 0x1B,PHONEBUTTONFUNCTION_BRIDGEDAPP = 0x1C,PHONEBUTTONFUNCTION_BUSY = 0x1D,PHONEBUTTONFUNCTION_CALLAPP = 0x1E,PHONEBUTTONFUNCTION_DATETIME = 0x1F,PHONEBUTTONFUNCTION_DIRECTORY = 0x20,PHONEBUTTONFUNCTION_COVER = 0x21,PHONEBUTTONFUNCTION_CALLID = 0x22,PHONEBUTTONFUNCTION_LASTNUM = 0x23,PHONEBUTTONFUNCTION_NIGHTSRV = 0x24,PHONEBUTTONFUNCTION_SENDCALLS = 0x25,PHONEBUTTONFUNCTION_MSGINDICATOR = 0x26,PHONEBUTTONFUNCTION_REPDIAL = 0x27,PHONEBUTTONFUNCTION_SETREPDIAL = 0x28,PHONEBUTTONFUNCTION_SYSTEMSPEED = 0x29,PHONEBUTTONFUNCTION_STATIONSPEED = 0x2A,PHONEBUTTONFUNCTION_CAMPON = 0x2B,PHONEBUTTONFUNCTION_SAVEREPEAT = 0x2C,PHONEBUTTONFUNCTION_QUEUECALL = 0x2D,PHONEBUTTONFUNCTION_NONE = 0x2E,};
enum MACRO_PHONEHOOKSWITCHMODE {PHONEHOOKSWITCHMODE_ONHOOK = 0x1,PHONEHOOKSWITCHMODE_MIC = 0x2,PHONEHOOKSWITCHMODE_SPEAKER = 0x4,PHONEHOOKSWITCHMODE_MICSPEAKER = 0x8,PHONEHOOKSWITCHMODE_UNKNOWN = 0x10,};
enum MACRO_RESOURCEDISPLAYTYPE {RESOURCEDISPLAYTYPE_GENERIC = 0x0,RESOURCEDISPLAYTYPE_DOMAIN = 0x1,RESOURCEDISPLAYTYPE_SERVER = 0x2,RESOURCEDISPLAYTYPE_SHARE = 0x3,RESOURCEDISPLAYTYPE_FILE = 0x4,RESOURCEDISPLAYTYPE_GROUP = 0x5,RESOURCEDISPLAYTYPE_NETWORK = 0x6,RESOURCEDISPLAYTYPE_ROOT = 0x7,RESOURCEDISPLAYTYPE_SHAREADMIN = 0x8,RESOURCEDISPLAYTYPE_DIRECTORY = 0x9,RESOURCEDISPLAYTYPE_TREE = 0xA,};
enum MACRO_SECURITY_DESCRIPTOR {SECURITY_DESCRIPTOR_REVISION = 1,SECURITY_DESCRIPTOR_REVISION1 = 1,};
enum MACRO_SPI_APPBUTTONCHANGE {SPI_APPBUTTONCHANGE = 228,SPI_RESERVED = 229,SPI_SYNCSETTINGSCHANGE = 230,};
enum MACRO_STATUS_SEVERITY_RTC {STATUS_SEVERITY_RTC_ERROR = 0x2,};
enum MACRO_SYNCMGRPROGRESSITEM {SYNCMGRPROGRESSITEM_STATUSTEXT = 0x1,SYNCMGRPROGRESSITEM_STATUSTYPE = 0x2,SYNCMGRPROGRESSITEM_PROGVALUE = 0x4,SYNCMGRPROGRESSITEM_MAXVALUE = 0x8,};
enum MACRO_SYNCSCHEDINFO_FLAGS {SYNCSCHEDINFO_FLAGS_CONNECTION_LAN = 0x0,SYNCSCHEDINFO_FLAGS_CONNECTION_WAN = 0x1,};
enum MACRO_TAPIMAXDEVICEIDSIZE {TAPIMAXDEVICEIDSIZE = 40,};
enum MACRO_TVM_CREATEDRAGIMAGE {TVM_CREATEDRAGIMAGE = 4370,TVM_SORTCHILDREN = 4371,TVM_ENSUREVISIBLE = 4372,TVM_SORTCHILDRENCB = 4373,TVM_ENDEDITLABELNOW = 4374,TVM_GETISEARCHSTRINGA = 4375,TVM_GETISEARCHSTRINGW = 4416,TVM_GETISEARCHSTRING = 4375,TVM_SETITEMSPACING = 4408,};
enum MACRO_VARIANT_NOVALUEPROP {VARIANT_NOVALUEPROP = 0x1,VARIANT_ALPHABOOL = 0x2,VARIANT_NOUSEROVERRIDE = 0x4,};
enum MACRO_cktypeDIBcompressed {cktypeDIBcompressed = 25444,};
enum MACRO_raatARAPNewPassword {raatARAPNewPassword = 20,};
enum MACRO_raatARAPOldPassword {raatARAPOldPassword = 19,};
typedef struct mediaspace_adpcmwaveformat_tag MEDIASPACEADPCMWAVEFORMAT;
enum MQMGMT_MACHINE_PROPERTIES {PROPID_MGMT_MSMQ_BASE = 0x0,PROPID_MGMT_MSMQ_ACTIVEQUEUES = 0x1,PROPID_MGMT_MSMQ_PRIVATEQ = 0x2,PROPID_MGMT_MSMQ_DSSERVER = 0x3,PROPID_MGMT_MSMQ_CONNECTED = 0x4,PROPID_MGMT_MSMQ_TYPE = 0x5,};
typedef struct _NDIS_802_11_BSSID_LIST_EX NDIS_802_11_BSSID_LIST_EX;
typedef struct _NDIS_802_11_CONFIGURATION NDIS_802_11_CONFIGURATION;
typedef struct NDIS_BPC_STATUS_CONNECTION NDIS_BPC_STATUS_CONNECTED;
typedef struct _NDIS_TAPI_GET_CALL_STATUS NDIS_TAPI_GET_CALL_STATUS;
typedef struct _NDIS_TAPI_SET_CALL_PARAMS NDIS_TAPI_SET_CALL_PARAMS;
typedef struct _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;
typedef struct _ACTRL_ACCESS_ENTRY_LISTA *PACTRL_ACCESS_ENTRY_LISTA;
typedef struct _ACTRL_ACCESS_ENTRY_LISTW *PACTRL_ACCESS_ENTRY_LISTW;
typedef struct _2FCB7B16F35A994219C907239F9496DC *PAM_AC3_ERROR_CONCEALMENT;
typedef struct _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_REVOCATION_CRL_INFO *PCERT_REVOCATION_CRL_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;
typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;
typedef struct _CO_TAPI_CALL_DIAGNOSTICS *PCO_TAPI_CALL_DIAGNOSTICS;
typedef struct _CRL_FIND_ISSUED_FOR_PARA *PCRL_FIND_ISSUED_FOR_PARA;
typedef struct _CRYPT_PROVIDER_FUNCTIONS *PCRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;
typedef struct _DOT11_DEFAULT_WEP_UPLOAD *PDOT11_DEFAULT_WEP_UPLOAD;
typedef struct _DOT11_DIV_SELECT_RX_LIST *PDOT11_DIV_SELECT_RX_LIST;
typedef struct _DOT11_OFFLOAD_CAPABILITY *PDOT11_OFFLOAD_CAPABILITY;
typedef struct _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;
typedef struct _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;
typedef struct _MIB_IPMCAST_MFE_STATS_EX *PMIB_IPMCAST_MFE_STATS_EX;
typedef struct _NDISTAPI_CHARACTERISTICS *PNDISTAPI_CHARACTERISTICS;
typedef struct _NDIS_802_11_VARIABLE_IEs *PNDIS_802_11_VARIABLE_IEs;
typedef struct NDIS_BPC_ADDRESS_COMPARE *PNDIS_BPC_ADDRESS_COMPARE;
typedef struct NDIS_BPC_DEVICE_SETTINGS *PNDIS_BPC_DEVICE_SETTINGS;
typedef struct _NDIS_TAPI_GET_ADDRESS_ID *PNDIS_TAPI_GET_ADDRESS_ID;
typedef struct _NDIS_TAPI_GET_DEV_CONFIG *PNDIS_TAPI_GET_DEV_CONFIG;
typedef struct _NDIS_TAPI_LINE_TRANSLATE *PNDIS_TAPI_LINE_TRANSLATE;
typedef struct _NDIS_TAPI_MONITOR_DIGITS *PNDIS_TAPI_MONITOR_DIGITS;
typedef struct _NDIS_TAPI_SET_DEV_CONFIG *PNDIS_TAPI_SET_DEV_CONFIG;
typedef struct _NDIS_TAPI_SET_MEDIA_MODE *PNDIS_TAPI_SET_MEDIA_MODE;
typedef struct _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;
typedef struct _SECURITY_PACKAGE_OPTIONS *PSECURITY_PACKAGE_OPTIONS;
typedef struct _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SecPkgContext_AuthorityA *PSecPkgContext_AuthorityA;
typedef struct _SecPkgContext_AuthorityW *PSecPkgContext_AuthorityW;
typedef struct _SecPkgContext_ProtoInfoA *PSecPkgContext_ProtoInfoA;
typedef struct _SecPkgContext_ProtoInfoW *PSecPkgContext_ProtoInfoW;
typedef struct _SecPkgContext_SessionKey *PSecPkgContext_SessionKey;
typedef struct _SecPkgCred_SupportedAlgs *PSecPkgCred_SupportedAlgs;
typedef struct _SecPkgCredentials_NamesA *PSecPkgCredentials_NamesA;
typedef struct _SecPkgCredentials_NamesW *PSecPkgCredentials_NamesW;
typedef struct _USB_INTERFACE_DESCRIPTOR *PUSB_INTERFACE_DESCRIPTOR;
typedef struct _WINDOWS_IRDA_DEVICE_INFO *PWINDOWS_IRDA_DEVICE_INFO;
typedef struct _REPARSE_POINT_INFORMATION REPARSE_POINT_INFORMATION;
typedef struct _RNDIS_PDD_CHARACTERISTICS RNDIS_PDD_CHARACTERISTICS;
enum RTC_MESSAGING_USER_STATUS {RTCMUS_IDLE = 0x0,RTCMUS_TYPING = 0x1,};
typedef struct _SCH_CRED_PUBLIC_CERTCHAIN SCH_CRED_PUBLIC_CERTCHAIN;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SPC_INDIRECT_DATA_CONTENT SPC_INDIRECT_DATA_CONTENT;
typedef struct _SecPkgContext_EapKeyBlock SecPkgContext_EapKeyBlock;
typedef struct _SecPkgContext_GroupNamesW SecPkgContext_GroupNamesW;
typedef struct _SecPkgContext_StreamSizes SecPkgContext_StreamSizes;
typedef struct _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
enum _D3DTEXTURESTAGESTATETYPE {D3DTSS_COLOROP = 0x1,D3DTSS_COLORARG1 = 0x2,D3DTSS_COLORARG2 = 0x3,D3DTSS_ALPHAOP = 0x4,D3DTSS_ALPHAARG1 = 0x5,D3DTSS_ALPHAARG2 = 0x6,D3DTSS_BUMPENVMAT00 = 0x7,D3DTSS_BUMPENVMAT01 = 0x8,D3DTSS_BUMPENVMAT10 = 0x9,D3DTSS_BUMPENVMAT11 = 0xA,D3DTSS_TEXCOORDINDEX = 0xB,D3DTSS_ADDRESSU = 0xD,D3DTSS_ADDRESSV = 0xE,D3DTSS_BORDERCOLOR = 0xF,D3DTSS_MAGFILTER = 0x10,D3DTSS_MINFILTER = 0x11,D3DTSS_MIPFILTER = 0x12,D3DTSS_MIPMAPLODBIAS = 0x13,D3DTSS_MAXMIPLEVEL = 0x14,D3DTSS_MAXANISOTROPY = 0x15,D3DTSS_BUMPENVLSCALE = 0x16,D3DTSS_BUMPENVLOFFSET = 0x17,D3DTSS_TEXTURETRANSFORMFLAGS = 0x18,D3DTSS_ADDRESSW = 0x19,D3DTSS_COLORARG0 = 0x1A,D3DTSS_ALPHAARG0 = 0x1B,D3DTSS_RESULTARG = 0x1C,D3DTSS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTURETRANSFORMFLAGS {D3DTTFF_DISABLE = 0x0,D3DTTFF_COUNT1 = 0x1,D3DTTFF_COUNT2 = 0x2,D3DTTFF_COUNT3 = 0x3,D3DTTFF_COUNT4 = 0x4,D3DTTFF_PROJECTED = 0x100,D3DTTFF_FORCE_DWORD = 0x7FFFFFFF,};
enum _DMO_PROCESS_OUTPUT_FLAGS {DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER = 0x1,};
enum _DMO_QUALITY_STATUS_FLAGS {DMO_QUALITY_STATUS_ENABLED = 0x1,};
enum _NDIS_802_11_NETWORK_TYPE {Ndis802_11FH = 0x0,Ndis802_11DS = 0x1,Ndis802_11OFDM5 = 0x2,Ndis802_11OFDM24 = 0x3,Ndis802_11NetworkTypeMax = 0x4,};
enum _NDIS_BPC_INDICATE_REASON {bpcBufferFull = 0x0,bpcBufferForced = 0x1,bpcBufferTimeOut = 0x2,bpcBufferDiscontinuity = 0x3,bpcBufferOverflow = 0x4,bpcBufferStatusEvent = 0x5,};
enum _NDIS_FDDI_RING_MGT_STATE {NdisFddiRingIsolated = 0x1,NdisFddiRingNonOperational = 0x2,NdisFddiRingOperational = 0x3,NdisFddiRingDetect = 0x4,NdisFddiRingNonOperationalDup = 0x5,NdisFddiRingOperationalDup = 0x6,NdisFddiRingDirected = 0x7,NdisFddiRingTrace = 0x8,};
enum _RAS_AUTH_ATTRIBUTE_TYPE_ {raatMinimum = 0x0,raatUserName = 0x1,raatUserPassword = 0x2,raatMD5CHAPPassword = 0x3,raatNASIPAddress = 0x4,raatNASPort = 0x5,raatServiceType = 0x6,raatFramedProtocol = 0x7,raatFramedIPAddress = 0x8,raatFramedIPNetmask = 0x9,raatFramedRouting = 0xA,raatFilterId = 0xB,raatFramedMTU = 0xC,raatFramedCompression = 0xD,raatLoginIPHost = 0xE,raatLoginService = 0xF,raatLoginTCPPort = 0x10,raatUnassigned17 = 0x11,raatReplyMessage = 0x12,raatCallbackNumber = 0x13,raatCallbackId = 0x14,raatUnassigned21 = 0x15,raatFramedRoute = 0x16,raatFramedIPXNetwork = 0x17,raatState = 0x18,raatClass = 0x19,raatVendorSpecific = 0x1A,raatSessionTimeout = 0x1B,raatIdleTimeout = 0x1C,raatTerminationAction = 0x1D,raatCalledStationId = 0x1E,raatCallingStationId = 0x1F,raatNASIdentifier = 0x20,raatProxyState = 0x21,raatLoginLATService = 0x22,raatLoginLATNode = 0x23,raatLoginLATGroup = 0x24,raatFramedAppleTalkLink = 0x25,raatFramedAppleTalkNetwork = 0x26,raatFramedAppleTalkZone = 0x27,raatAcctStatusType = 0x28,raatAcctDelayTime = 0x29,raatAcctInputOctets = 0x2A,raatAcctOutputOctets = 0x2B,raatAcctSessionId = 0x2C,raatAcctAuthentic = 0x2D,raatAcctSessionTime = 0x2E,raatAcctInputPackets = 0x2F,raatAcctOutputPackets = 0x30,raatAcctTerminateCause = 0x31,raatAcctMultiSessionId = 0x32,raatAcctLinkCount = 0x33,raatAcctEventTimeStamp = 0x37,raatMD5CHAPChallenge = 0x3C,raatNASPortType = 0x3D,raatPortLimit = 0x3E,raatLoginLATPort = 0x3F,raatTunnelType = 0x40,raatTunnelMediumType = 0x41,raatTunnelClientEndpoint = 0x42,raatTunnelServerEndpoint = 0x43,raatARAPPassword = 0x46,raatARAPFeatures = 0x47,raatARAPZoneAccess = 0x48,raatARAPSecurity = 0x49,raatARAPSecurityData = 0x4A,raatPasswordRetry = 0x4B,raatPrompt = 0x4C,raatConnectInfo = 0x4D,raatConfigurationToken = 0x4E,raatEAPMessage = 0x4F,raatSignature = 0x50,raatARAPChallengeResponse = 0x54,raatAcctInterimInterval = 0x55,raatARAPGuestLogon = 0x1FA0,raatReserved = 0xFFFFFFFF,};
struct _SECURITY_PACKAGE_OPTIONS {unsigned int Size;unsigned int Type;unsigned int Flags;unsigned int SignatureSize;void *Signature;};
struct _SecPkgContext_SessionKey {unsigned int SessionKeyLength;unsigned char *SessionKey;};
enum __MIDL_IDifferencing_0001 {DIFF_TYPE_Ordinary = 0x0,DIFF_TYPE_Urgent = 0x1,};
enum __MIDL_IFilterMapper_0001 {MERIT_PREFERRED = 0x800000,MERIT_NORMAL = 0x600000,MERIT_UNLIKELY = 0x400000,MERIT_DO_NOT_USE = 0x200000,MERIT_SW_COMPRESSOR = 0x100000,MERIT_HW_COMPRESSOR = 0x100050,};
enum __MIDL_ITargetFrame2_0001 {FINDFRAME_NONE = 0x0,FINDFRAME_JUSTTESTEXISTENCE = 0x1,FINDFRAME_INTERNAL = 0x80000000,};
enum __MIDL_ITargetFrame2_0002 {FRAMEOPTIONS_SCROLL_YES = 0x1,FRAMEOPTIONS_SCROLL_NO = 0x2,FRAMEOPTIONS_SCROLL_AUTO = 0x4,FRAMEOPTIONS_NORESIZE = 0x8,FRAMEOPTIONS_NO3DBORDER = 0x10,FRAMEOPTIONS_DESKTOP = 0x20,FRAMEOPTIONS_BROWSERBAND = 0x40,};
enum __MIDL_ITravelLogStg_0001 {TLEF_RELATIVE_INCLUDE_CURRENT = 0x1,TLEF_RELATIVE_BACK = 0x10,TLEF_RELATIVE_FORE = 0x20,TLEF_INCLUDE_UNINVOKEABLE = 0x40,TLEF_ABSOLUTE = 0x31,};
enum _styleBackgroundPositionX {styleBackgroundPositionXNotSet = 0x0,styleBackgroundPositionXLeft = 0x1,styleBackgroundPositionXCenter = 0x2,styleBackgroundPositionXRight = 0x3,styleBackgroundPositionX_Max = 0x7FFFFFFF,};
enum _styleBackgroundPositionY {styleBackgroundPositionYNotSet = 0x0,styleBackgroundPositionYTop = 0x1,styleBackgroundPositionYCenter = 0x2,styleBackgroundPositionYBottom = 0x3,styleBackgroundPositionY_Max = 0x7FFFFFFF,};
enum _tagPublishedAppInfoFlags {PAI_SOURCE = 0x1,PAI_ASSIGNEDTIME = 0x2,PAI_PUBLISHEDTIME = 0x4,PAI_SCHEDULEDTIME = 0x8,PAI_EXPIRETIME = 0x10,};
enum tagDVD_KARAOKE_ASSIGNMENT {DVD_Assignment_reserved0 = 0x0,DVD_Assignment_reserved1 = 0x1,DVD_Assignment_LR = 0x2,DVD_Assignment_LRM = 0x3,DVD_Assignment_LR1 = 0x4,DVD_Assignment_LRM1 = 0x5,DVD_Assignment_LR12 = 0x6,DVD_Assignment_LRM12 = 0x7,};
enum tagNETCONUI_CONNECT_FLAGS {NCUC_DEFAULT = 0x0,NCUC_NO_UI = 0x1,};
typedef struct _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
typedef struct _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
typedef struct _ACTRL_ACCESS_ENTRY_LISTA ACTRL_ACCESS_ENTRY_LISTA;
typedef struct _ACTRL_ACCESS_ENTRY_LISTW ACTRL_ACCESS_ENTRY_LISTW;
typedef struct _2FCB7B16F35A994219C907239F9496DC AM_AC3_ERROR_CONCEALMENT;
typedef struct audiofile_af10waveformat_tag AUDIOFILE_AF10WAVEFORMAT;
typedef struct audiofile_af36waveformat_tag AUDIOFILE_AF36WAVEFORMAT;
typedef struct _AUDIO_STREAM_CONFIG_CAPS AUDIO_STREAM_CONFIG_CAPS;
struct AnimationComposerFactory;
typedef struct _BY_HANDLE_DB_INFORMATION BY_HANDLE_DB_INFORMATION;
typedef struct _CERT_CHAIN_ENGINE_CONFIG CERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS CERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA CERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO CERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO CERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO CERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 CERT_POLICY95_QUALIFIER1;
typedef struct _CERT_REVOCATION_CRL_INFO CERT_REVOCATION_CRL_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO CERT_SIGNED_CONTENT_INFO;
typedef struct _CO_TAPI_CALL_DIAGNOSTICS CO_TAPI_CALL_DIAGNOSTICS;
typedef struct _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
typedef struct _CRL_FIND_ISSUED_FOR_PARA CRL_FIND_ISSUED_FOR_PARA;
typedef struct _CRYPT_PROVIDER_FUNCTIONS CRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS CRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES CRYPT_SMIME_CAPABILITIES;
enum DBCOMMANDPERSISTFLAGENUM {DBCOMMANDPERSISTFLAG_NOSAVE = 0x1,};
typedef struct _DOT11_DEFAULT_WEP_UPLOAD DOT11_DEFAULT_WEP_UPLOAD;
typedef struct _DOT11_DIV_SELECT_RX_LIST DOT11_DIV_SELECT_RX_LIST;
typedef struct _DOT11_OFFLOAD_CAPABILITY DOT11_OFFLOAD_CAPABILITY;
typedef struct tagDVD_SubpictureAttributes DVD_SubpictureAttributes;
struct HTMLButtonElementEvents2 {struct HTMLButtonElementEvents2Vtbl *lpVtbl;};
struct HTMLControlElementEvents {struct HTMLControlElementEventsVtbl *lpVtbl;};
struct HTMLMarqueeElementEvents {struct HTMLMarqueeElementEventsVtbl *lpVtbl;};
struct HTMLObjectElementEvents2 {struct HTMLObjectElementEvents2Vtbl *lpVtbl;};
struct HTMLOptionElementFactory;
struct HTMLSelectElementEvents2 {struct HTMLSelectElementEvents2Vtbl *lpVtbl;};
struct HTMLTextContainerEvents2 {struct HTMLTextContainerEvents2Vtbl *lpVtbl;};
struct ICurrentWorkingDirectory {struct ICurrentWorkingDirectoryVtbl *lpVtbl;};
struct IElementBehaviorCategory {struct IElementBehaviorCategoryVtbl *lpVtbl;};
struct IElementNamespaceFactory {struct IElementNamespaceFactoryVtbl *lpVtbl;};
struct IElementNamespacePrivate {struct IElementNamespacePrivateVtbl *lpVtbl;};
struct IHTMLAttributeCollection {struct IHTMLAttributeCollectionVtbl *lpVtbl;};
struct IHTMLFontNamesCollection {struct IHTMLFontNamesCollectionVtbl *lpVtbl;};
struct IHTMLFontSizesCollection {struct IHTMLFontSizesCollectionVtbl *lpVtbl;};
struct IHTMLImageElementFactory {struct IHTMLImageElementFactoryVtbl *lpVtbl;};
struct IHTMLMimeTypesCollection {struct IHTMLMimeTypesCollectionVtbl *lpVtbl;};
struct IHTMLNamespaceCollection {struct IHTMLNamespaceCollectionVtbl *lpVtbl;};
struct IHTMLOptionButtonElement {struct IHTMLOptionButtonElementVtbl *lpVtbl;};
struct IInternetSecurityManager {struct IInternetSecurityManagerVtbl *lpVtbl;};
struct IInternetSecurityMgrSite {struct IInternetSecurityMgrSiteVtbl *lpVtbl;};
typedef struct _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
struct IMediaParamsRecordNotify {struct IMediaParamsRecordNotifyVtbl *lpVtbl;};
typedef struct _B3B9922EB7092B419B9B91CCE29DC8AC INTERNET_PREFETCH_STATUS;
struct INetCfgComponentBindings {struct INetCfgComponentBindingsVtbl *lpVtbl;};
struct INetConnectionPropertyUi {struct INetConnectionPropertyUiVtbl *lpVtbl;};
struct INotificationProcessMgr0 {struct INotificationProcessMgr0Vtbl *lpVtbl;};
struct IPersistMediaPropertyBag {struct IPersistMediaPropertyBagVtbl *lpVtbl;};
struct IPrivateIdentityManager2 {struct IPrivateIdentityManager2Vtbl *lpVtbl;};
struct IRTCClientPortManagement {struct IRTCClientPortManagementVtbl *lpVtbl;};
struct IRTCSessionReferredEvent {struct IRTCSessionReferredEventVtbl *lpVtbl;};
struct IRegisterVirusScanEngine {struct IRegisterVirusScanEngineVtbl *lpVtbl;};
struct IShellFavoritesNameSpace {struct IShellFavoritesNameSpaceVtbl *lpVtbl;};
struct ISubscriptionAgentEvents {struct ISubscriptionAgentEventsVtbl *lpVtbl;};
struct IUPnPDescriptionDocument {struct IUPnPDescriptionDocumentVtbl *lpVtbl;};
typedef struct IDirect3DVolumeTexture8 *LPDIRECT3DVOLUMETEXTURE8;
typedef struct IDirectDrawColorControl *LPDIRECTDRAWCOLORCONTROL;
typedef struct IDirectDrawGammaControl *LPDIRECTDRAWGAMMACONTROL;
typedef struct _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;
typedef struct _6DA6B4B6F4711DFAB548288AAA9B9C99 *LPINTERNET_SECURITY_INFO;
typedef struct linecalltreatmententry_tag *LPLINECALLTREATMENTENTRY;
typedef struct lineinitializeexparams_tag *LPLINEINITIALIZEEXPARAMS;
typedef struct tagNMDATETIMEFORMATQUERYA *LPNMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW *LPNMDATETIMEFORMATQUERYW;
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _tagSYNC_HANDLER_ITEM_INFO *LPSYNC_HANDLER_ITEM_INFO;
typedef struct _SYSTEM_POWER_STATUS_EX *LPSYSTEM_POWER_STATUS_EX;
typedef struct _WIN_TRUST_SUBJECT_FILE *LPWIN_TRUST_SUBJECT_FILE;
enum MACRO_ACM_FILTERDETAILSF {ACM_FILTERDETAILSF_INDEX = 0x0,ACM_FILTERDETAILSF_FILTER = 0x1,ACM_FILTERDETAILSF_QUERYMASK = 0xF,ACM_FILTERENUMF_DWFILTERTAG = 0x10000,};
enum MACRO_ACM_FORMATDETAILSF {ACM_FORMATDETAILSF_INDEX = 0x0,ACM_FORMATDETAILSF_FORMAT = 0x1,ACM_FORMATDETAILSF_QUERYMASK = 0xF,ACM_FORMATENUMF_WFORMATTAG = 0x10000,ACM_FORMATENUMF_NCHANNELS = 0x20000,ACM_FORMATENUMF_NSAMPLESPERSEC = 0x40000,ACM_FORMATENUMF_WBITSPERSAMPLE = 0x80000,ACM_FORMATENUMF_CONVERT = 0x100000,ACM_FORMATENUMF_SUGGEST = 0x200000,ACM_FORMATENUMF_HARDWARE = 0x400000,ACM_FORMATENUMF_INPUT = 0x800000,ACM_FORMATENUMF_OUTPUT = 0x1000000,ACM_FORMATSUGGESTF_WFORMATTAG = 0x10000,ACM_FORMATSUGGESTF_NCHANNELS = 0x20000,ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 0x40000,ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 0x80000,ACM_FORMATSUGGESTF_TYPEMASK = 0xFF0000,};
enum MACRO_AM_CONTENTPROPERTY {AM_CONTENTPROPERTY_TITLE = 0x1,AM_CONTENTPROPERTY_AUTHOR = 0x2,AM_CONTENTPROPERTY_COPYRIGHT = 0x4,AM_CONTENTPROPERTY_DESCRIPTION = 0x8,};
enum MACRO_CB_GETCOMBOBOXINFO {CB_GETCOMBOBOXINFO = 0x162,CB_MSGMAX = 0x163,};
enum MACRO_CEDB_AUTOINCREMENT {CEDB_AUTOINCREMENT = 0x1,CEDB_SEEK_CEOID = 0x1,CEDB_SEEK_BEGINNING = 0x2,CEDB_SEEK_END = 0x4,CEDB_SEEK_CURRENT = 0x8,CEDB_SEEK_VALUESMALLER = 0x10,CEDB_SEEK_VALUEFIRSTEQUAL = 0x20,CEDB_SEEK_VALUEGREATER = 0x40,CEDB_SEEK_VALUENEXTEQUAL = 0x80,};
enum MACRO_CRYPTPROTECTMEMORY {CRYPTPROTECTMEMORY_BLOCK_SIZE = 16,CRYPTPROTECTMEMORY_SAME_PROCESS = 0,CRYPTPROTECTMEMORY_CROSS_PROCESS = 1,CRYPTPROTECTMEMORY_SAME_LOGON = 2,};
enum MACRO_DEVICE_DESCRIPTION {DEVICE_DESCRIPTION_VERSION = 0,DEVICE_DESCRIPTION_VERSION1 = 1,};
enum MACRO_DEVLOAD_CLIENTINFO {DEVLOAD_CLIENTINFO_VALTYPE = 4,DEVLOAD_HANDLE_VALTYPE = 4,DEVLOAD_DEVNAME_VALTYPE = 1,DEVLOAD_DEVKEY_VALTYPE = 1,DEVLOAD_PNPID_VALTYPE = 1,DEVLOAD_SOCKET_VALTYPE = 4,DEVLOAD_INTERFACETYPE_VALTYPE = 4,DEVLOAD_TSPDLL_VALTYPE = 1,DEVLOAD_TSPDEV_VALTYPE = 4,};
enum MACRO_DISPATCH_CONSTRUCT {DISPATCH_CONSTRUCT = 0x4000,};
enum MACRO_DTN_DATETIMECHANGE {DTN_DATETIMECHANGE = -759,DTN_USERSTRINGA = -758,DTN_USERSTRINGW = -745,DTN_USERSTRING = -758,DTN_WMKEYDOWNA = -757,DTN_WMKEYDOWNW = -744,DTN_WMKEYDOWN = -757,DTN_FORMATA = -756,DTN_FORMATW = -743,DTN_FORMAT = -756,DTN_FORMATQUERYA = -755,DTN_FORMATQUERYW = -742,DTN_FORMATQUERY = -755,DTN_DROPDOWN = -754,DTN_CLOSEUP = -753,};
enum MACRO_EC_BANDWIDTHCHANGE {EC_BANDWIDTHCHANGE = 0x48,EC_VIDEOFRAMEREADY = 0x49,EC_DRMSTATUS = 0x4A,};
enum MACRO_ENCODING_TYPE_MASK {CERT_ENCODING_TYPE_MASK = 0xFFFF,CMSG_ENCODING_TYPE_MASK = 0xFFFF0000,};
enum MACRO_FILE_AUTOGENERATED {FILE_AUTOGENERATED_DEVICE_NAME = 0x100,};
enum MACRO_I_CHILDRENCALLBACK {I_CHILDRENCALLBACK = -1,};
enum MACRO_KeyShiftAnyAltFlag {KeyShiftAnyAltFlag = 0x10000000,};
enum MACRO_LINEADDRESSSHARING {LINEADDRESSSHARING_PRIVATE = 0x1,LINEADDRESSSHARING_BRIDGEDEXCL = 0x2,LINEADDRESSSHARING_BRIDGEDNEW = 0x4,LINEADDRESSSHARING_BRIDGEDSHARED = 0x8,LINEADDRESSSHARING_MONITORED = 0x10,};
enum MACRO_LINECALLPARAMFLAGS {LINECALLPARAMFLAGS_SECURE = 0x1,LINECALLPARAMFLAGS_IDLE = 0x2,LINECALLPARAMFLAGS_BLOCKID = 0x4,LINECALLPARAMFLAGS_ORIGOFFHOOK = 0x8,LINECALLPARAMFLAGS_DESTOFFHOOK = 0x10,LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 0x20,LINECALLPARAMFLAGS_PREDICTIVEDIAL = 0x40,LINECALLPARAMFLAGS_ONESTEPTRANSFER = 0x80,};
enum MACRO_LINEDEVSTATUSFLAGS {LINEDEVSTATUSFLAGS_CONNECTED = 0x1,LINEDEVSTATUSFLAGS_MSGWAIT = 0x2,LINEDEVSTATUSFLAGS_INSERVICE = 0x4,LINEDEVSTATUSFLAGS_LOCKED = 0x8,};
enum MACRO_LINEDISCONNECTMODE {LINEDISCONNECTMODE_NORMAL = 0x1,LINEDISCONNECTMODE_UNKNOWN = 0x2,LINEDISCONNECTMODE_REJECT = 0x4,LINEDISCONNECTMODE_PICKUP = 0x8,LINEDISCONNECTMODE_FORWARDED = 0x10,LINEDISCONNECTMODE_BUSY = 0x20,LINEDISCONNECTMODE_NOANSWER = 0x40,LINEDISCONNECTMODE_BADADDRESS = 0x80,LINEDISCONNECTMODE_UNREACHABLE = 0x100,LINEDISCONNECTMODE_CONGESTION = 0x200,LINEDISCONNECTMODE_INCOMPATIBLE = 0x400,LINEDISCONNECTMODE_UNAVAIL = 0x800,LINEDISCONNECTMODE_NODIALTONE = 0x1000,LINEDISCONNECTMODE_NUMBERCHANGED = 0x2000,LINEDISCONNECTMODE_OUTOFORDER = 0x4000,LINEDISCONNECTMODE_TEMPFAILURE = 0x8000,LINEDISCONNECTMODE_QOSUNAVAIL = 0x10000,LINEDISCONNECTMODE_BLOCKED = 0x20000,LINEDISCONNECTMODE_DONOTDISTURB = 0x40000,LINEDISCONNECTMODE_CANCELLED = 0x80000,};
enum MACRO_LINELOCATIONOPTION {LINELOCATIONOPTION_PULSEDIAL = 0x1,};
enum MACRO_LINEREMOVEFROMCONF {LINEREMOVEFROMCONF_NONE = 0x1,LINEREMOVEFROMCONF_LAST = 0x2,LINEREMOVEFROMCONF_ANY = 0x3,};
enum MACRO_LINETOLLLISTOPTION {LINETOLLLISTOPTION_ADD = 0x1,LINETOLLLISTOPTION_REMOVE = 0x2,};
enum MACRO_LINE_AGENTSPECIFIC {LINE_AGENTSPECIFIC = 21,LINE_AGENTSTATUS = 22,LINE_APPNEWCALL = 23,LINE_PROXYREQUEST = 24,LINE_REMOVE = 25,};
enum MACRO_LVM_GETSTRINGWIDTH {LVM_GETSTRINGWIDTH = 4113,};
enum MACRO_MAXIMUM_PROCESSORS {MAXIMUM_PROCESSORS = 32,};
enum MACRO_MAX_DEVICE_WINDOWS {MAX_DEVICE_WINDOWS = 6,};
enum MACRO_MFT_NONOWNERSTRING {MFT_NONOWNERSTRING = 0x80000000,};
enum MACRO_MIXER_GETLINEINFOF {MIXER_GETLINEINFOF_DESTINATION = 0x0,MIXER_GETLINEINFOF_SOURCE = 0x1,MIXER_GETLINEINFOF_LINEID = 0x2,MIXER_GETLINEINFOF_COMPONENTTYPE = 0x3,MIXER_GETLINEINFOF_TARGETTYPE = 0x4,MIXER_GETLINEINFOF_QUERYMASK = 0xF,};
enum MACRO_MMIO_DEFAULTBUFFER {MMIO_DEFAULTBUFFER = 8192,};
enum MACRO_MaxPrivacySettings {MaxPrivacySettings = 0x4000,};
enum MACRO_PHONEHOOKSWITCHDEV {PHONEHOOKSWITCHDEV_HANDSET = 0x1,PHONEHOOKSWITCHDEV_SPEAKER = 0x2,PHONEHOOKSWITCHDEV_HEADSET = 0x4,};
enum MACRO_SERVICE_BESTEFFORT {SERVICE_BESTEFFORT = 0x80010000,SERVICE_CONTROLLEDLOAD = 0x80020000,SERVICE_GUARANTEED = 0x80040000,SERVICE_QUALITATIVE = 0x80200000,SERVICE_NO_TRAFFIC_CONTROL = 0x81000000,SERVICE_NO_QOS_SIGNALING = 0x40000000,};
enum MACRO_STD_BOOKMARKLENGTH {STD_BOOKMARKLENGTH = 1,};
enum MACRO_SYNCMGRHANDLERFLAG {SYNCMGRHANDLERFLAG_MASK = 0x7,};
enum MACRO_S_NonStandardValue {S_NonStandardValue = 0xCCD07,};
enum MACRO_TAPIMAXAPPNAMESIZE {TAPIMAXAPPNAMESIZE = 40,};
enum MACRO_TBN_GETBUTTONINFOA {TBN_GETBUTTONINFOA = -700,TBN_GETBUTTONINFOW = -720,TBN_BEGINDRAG = -701,TBN_ENDDRAG = -702,TBN_DROPDOWN = -710,TBN_DRAGOUT = -714,TBN_GETBUTTONINFO = -700,};
enum MACRO_TVN_ITEMEXPANDINGA {TVN_ITEMEXPANDINGA = -405,TVN_ITEMEXPANDINGW = -454,TVN_ITEMEXPANDEDA = -406,TVN_ITEMEXPANDEDW = -455,TVN_BEGINDRAGA = -407,TVN_BEGINDRAGW = -456,TVN_BEGINRDRAGA = -408,TVN_BEGINRDRAGW = -457,TVN_DELETEITEMA = -409,TVN_DELETEITEMW = -458,TVN_BEGINLABELEDITA = -410,TVN_BEGINLABELEDITW = -459,TVN_ENDLABELEDITA = -411,TVN_ENDLABELEDITW = -460,TVN_KEYDOWN = -412,TVN_SELCHANGING = -401,TVN_SELCHANGED = -402,TVN_GETDISPINFO = -403,TVN_SETDISPINFO = -404,TVN_ITEMEXPANDING = -405,TVN_ITEMEXPANDED = -406,TVN_BEGINDRAG = -407,TVN_BEGINRDRAG = -408,TVN_DELETEITEM = -409,TVN_BEGINLABELEDIT = -410,TVN_ENDLABELEDIT = -411,};
enum MACRO_WAVE_INVALIDFORMAT {WAVE_INVALIDFORMAT = 0x0,WAVE_FORMAT_1M08 = 0x1,WAVE_FORMAT_1S08 = 0x2,WAVE_FORMAT_1M16 = 0x4,WAVE_FORMAT_1S16 = 0x8,WAVE_FORMAT_2M08 = 0x10,WAVE_FORMAT_2S08 = 0x20,WAVE_FORMAT_2M16 = 0x40,WAVE_FORMAT_2S16 = 0x80,WAVE_FORMAT_4M08 = 0x100,WAVE_FORMAT_4S08 = 0x200,WAVE_FORMAT_4M16 = 0x400,WAVE_FORMAT_4S16 = 0x800,};
enum MACRO_WS_NONAVDONEBUTTON {WS_NONAVDONEBUTTON = 65536,};
enum MACRO_grfdexPropExtraAll {grfdexPropExtraAll = 192,};
typedef struct _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
typedef struct _MIB_IPMCAST_MFE_STATS_EX MIB_IPMCAST_MFE_STATS_EX;
typedef struct _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
typedef struct _NDISTAPI_CHARACTERISTICS NDISTAPI_CHARACTERISTICS;
typedef struct _NDIS_802_11_VARIABLE_IEs NDIS_802_11_VARIABLE_IEs;
typedef struct _NDIS_TAPI_GET_ADDRESS_ID NDIS_TAPI_GET_ADDRESS_ID;
typedef struct _NDIS_TAPI_GET_DEV_CONFIG NDIS_TAPI_GET_DEV_CONFIG;
typedef struct _NDIS_TAPI_LINE_TRANSLATE NDIS_TAPI_LINE_TRANSLATE;
typedef struct _NDIS_TAPI_MONITOR_DIGITS NDIS_TAPI_MONITOR_DIGITS;
typedef struct _NDIS_TAPI_SET_DEV_CONFIG NDIS_TAPI_SET_DEV_CONFIG;
typedef struct _NDIS_TAPI_SET_MEDIA_MODE NDIS_TAPI_SET_MEDIA_MODE;
typedef struct _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
typedef struct _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;
typedef struct UserNotificationTrigger *PCE_NOTIFICATION_TRIGGER;
typedef struct tagCInterfaceProxyVtbl *PCInterfaceProxyVtblList;
typedef struct _CMC_ADD_ATTRIBUTES_INFO *PCMC_ADD_ATTRIBUTES_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO *PCMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_TAGGED_CERT_REQUEST *PCMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO *PCMC_TAGGED_CONTENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_DEFUSAGE *PCRYPT_PROVIDER_DEFUSAGE;
typedef struct _CRYPT_PROVIDER_PRIVDATA *PCRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID *PCRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_RETRIEVE_AUX_INFO *PCRYPT_RETRIEVE_AUX_INFO;
typedef struct _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;
typedef struct _DOT11_DISCONNECTED_PEER *PDOT11_DISCONNECTED_PEER;
typedef struct _DOT11_KEY_ALGO_TKIP_MIC *PDOT11_KEY_ALGO_TKIP_MIC;
typedef struct _DOT11_SUPPORTED_ANTENNA *PDOT11_SUPPORTED_ANTENNA;
typedef struct _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;
typedef struct _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;
typedef struct _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;
typedef struct _LOCALMANAGEDAPPLICATION *PLOCALMANAGEDAPPLICATION;
typedef struct _NDIS_TAPI_CONFIG_DIALOG *PNDIS_TAPI_CONFIG_DIALOG;
typedef struct _NDIS_TAPI_GATHER_DIGITS *PNDIS_TAPI_GATHER_DIGITS;
typedef struct _NDIS_TAPI_GET_CALL_INFO *PNDIS_TAPI_GET_CALL_INFO;
typedef struct _OFFLOAD_IPSEC_DELETE_SA *POFFLOAD_IPSEC_DELETE_SA;
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 *PRPC_CLIENT_INFORMATION1;
typedef struct _SCH_CRED_SECRET_PRIVKEY *PSCH_CRED_SECRET_PRIVKEY;
typedef struct _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_POWER_STATUS_EX2 *PSYSTEM_POWER_STATUS_EX2;
typedef struct _SecPkgContext_UserFlags *PSecPkgContext_UserFlags;
typedef struct _TRANSPORT_HEADER_OFFSET *PTRANSPORT_HEADER_OFFSET;
typedef struct _USB_ENDPOINT_DESCRIPTOR *PUSB_ENDPOINT_DESCRIPTOR;
typedef struct _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
typedef void *RPC_AUTH_IDENTITY_HANDLE;
enum RTC_MESSAGING_EVENT_TYPE {RTCMSET_MESSAGE = 0x0,RTCMSET_STATUS = 0x1,};
enum RTC_SESSION_REFER_STATUS {RTCSRS_REFERRING = 0x0,RTCSRS_ACCEPTED = 0x1,RTCSRS_ERROR = 0x2,RTCSRS_REJECTED = 0x3,RTCSRS_DROPPED = 0x4,RTCSRS_DONE = 0x5,};
typedef struct _SComparePropsRestriction SComparePropsRestriction;
typedef struct _SECURITY_PACKAGE_OPTIONS SECURITY_PACKAGE_OPTIONS;
typedef struct _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
typedef struct _SecPkgContext_AuthorityA SecPkgContext_AuthorityA;
typedef struct _SecPkgContext_AuthorityW SecPkgContext_AuthorityW;
typedef struct _SecPkgContext_ProtoInfoA SecPkgContext_ProtoInfoA;
typedef struct _SecPkgContext_ProtoInfoW SecPkgContext_ProtoInfoW;
typedef struct _SecPkgContext_SessionKey SecPkgContext_SessionKey;
typedef struct _SecPkgCred_SupportedAlgs SecPkgCred_SupportedAlgs;
typedef struct _SecPkgCredentials_NamesA SecPkgCredentials_NamesA;
typedef struct _SecPkgCredentials_NamesW SecPkgCredentials_NamesW;
enum ShellWindowTypeConstants {SWC_EXPLORER = 0x0,SWC_BROWSER = 0x1,SWC_3RDPARTY = 0x2,SWC_CALLBACK = 0x4,};
typedef struct _USB_INTERFACE_DESCRIPTOR USB_INTERFACE_DESCRIPTOR;
typedef struct _VIDEO_STREAM_CONFIG_CAPS VIDEO_STREAM_CONFIG_CAPS;
typedef struct _WINDOWS_IRDA_DEVICE_INFO WINDOWS_IRDA_DEVICE_INFO;
enum _AMSTREAMSELECTINFOFLAGS {AMSTREAMSELECTINFO_ENABLED = 0x1,AMSTREAMSELECTINFO_EXCLUSIVE = 0x2,};
enum _AM_OVERLAY_NOTIFY_FLAGS {AM_OVERLAY_NOTIFY_VISIBLE_CHANGE = 0x1,AM_OVERLAY_NOTIFY_SOURCE_CHANGE = 0x2,AM_OVERLAY_NOTIFY_DEST_CHANGE = 0x4,};
struct _CERT_FORTEZZA_DATA_PROP {unsigned char SerialNumber[8];int CertIndex;unsigned char CertLabel[36];};
enum _DOT11_ASSOCIATION_STATE {dot11_assoc_state_zero = 0x0,dot11_assoc_state_unauth_unassoc = 0x1,dot11_assoc_state_auth_unassoc = 0x2,dot11_assoc_state_auth_assoc = 0x3,};
enum _DOT11_DIVERSITY_SUPPORT {dot11_diversity_support_unknown = 0x0,dot11_diversity_support_fixedlist = 0x1,dot11_diversity_support_notsupported = 0x2,dot11_diversity_support_dynamic = 0x3,};
enum _ELEMENTDESCRIPTOR_FLAGS {ELEMENTDESCRIPTORFLAGS_LITERAL = 0x1,ELEMENTDESCRIPTORFLAGS_NESTED_LITERAL = 0x2,ELEMENTDESCRIPTOR_FLAGS_Max = 0x7FFFFFFF,};
struct _ImageArchitectureHeader {unsigned int AmaskValue : 1;int : 7;unsigned int AmaskShift : 8;int : 16;unsigned int FirstEntryRVA;};
enum _NDIS_802_11_STATUS_TYPE {Ndis802_11StatusType_Authentication = 0x0,Ndis802_11StatusTypeMax = 0x1,};
enum _NDIS_DEVICE_POWER_STATE {NdisDeviceStateUnspecified = 0x0,NdisDeviceStateD0 = 0x1,NdisDeviceStateD1 = 0x2,NdisDeviceStateD2 = 0x3,NdisDeviceStateD3 = 0x4,NdisDeviceStateMaximum = 0x5,};
enum _NDIS_WAN_MEDIUM_SUBTYPE {NdisWanMediumHub = 0x0,NdisWanMediumX_25 = 0x1,NdisWanMediumIsdn = 0x2,NdisWanMediumSerial = 0x3,NdisWanMediumFrameRelay = 0x4,NdisWanMediumAtm = 0x5,NdisWanMediumSonet = 0x6,NdisWanMediumSW56K = 0x7,NdisWanMediumPPTP = 0x8,NdisWanMediumL2TP = 0x9,NdisWanMediumIrda = 0xA,NdisWanMediumParallel = 0xB,NdisWanMediumPppoe = 0xC,};
struct _SecPkgContext_UserFlags {unsigned int UserFlags;};
enum _TOKEN_INFORMATION_CLASS {TokenUser = 0x1,TokenGroups = 0x2,TokenPrivileges = 0x3,TokenOwner = 0x4,TokenPrimaryGroup = 0x5,TokenDefaultDacl = 0x6,TokenSource = 0x7,TokenType = 0x8,TokenImpersonationLevel = 0x9,TokenStatistics = 0xA,TokenRestrictedSids = 0xB,TokenSessionId = 0xC,};
enum __MIDL_ICodeInstall_0001 {CIP_DISK_FULL = 0x0,CIP_ACCESS_DENIED = 0x1,CIP_NEWER_VERSION_EXISTS = 0x2,CIP_OLDER_VERSION_EXISTS = 0x3,CIP_NAME_CONFLICT = 0x4,CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,CIP_UNSAFE_TO_ABORT = 0x7,CIP_NEED_REBOOT = 0x8,};
enum __MIDL_IMonikerProp_0001 {MIMETYPEPROP = 0x0,};
enum __MIDL_IOleDocument_0001 {DOCMISC_CANCREATEMULTIPLEVIEWS = 0x1,DOCMISC_SUPPORTCOMPLEXRECTANGLES = 0x2,DOCMISC_CANTOPENEDIT = 0x4,DOCMISC_NOFILESUPPORT = 0x8,};
enum __MIDL_ITargetFrame_0001 {NAVIGATEFRAME_FL_RECORD = 0x1,NAVIGATEFRAME_FL_POST = 0x2,NAVIGATEFRAME_FL_NO_DOC_CACHE = 0x4,NAVIGATEFRAME_FL_NO_IMAGE_CACHE = 0x8,NAVIGATEFRAME_FL_AUTH_FAIL_CACHE_OK = 0x10,NAVIGATEFRAME_FL_SENDING_FROM_FORM = 0x20,NAVIGATEFRAME_FL_REALLY_SENDING_FROM_FORM = 0x40,};
enum _styleTextUnderlineStyle {styleTextUnderlineStyleUndefined = 0x0,styleTextUnderlineStyleSingle = 0x1,styleTextUnderlineStyleDouble = 0x2,styleTextUnderlineStyleWords = 0x3,styleTextUnderlineStyleDotted = 0x4,styleTextUnderlineStyleThick = 0x5,styleTextUnderlineStyleDash = 0x6,styleTextUnderlineStyleDotDash = 0x7,styleTextUnderlineStyleDotDotDash = 0x8,styleTextUnderlineStyleWave = 0x9,styleTextUnderlineStyleSingleAccounting = 0xA,styleTextUnderlineStyleDoubleAccounting = 0xB,styleTextUnderlineStyleThickDash = 0xC,styleTextUnderlineStyle_Max = 0x7FFFFFFF,};
enum _tagSYNCMGRREGISTERFLAGS {SYNCMGRREGISTERFLAG_CONNECT = 0x1,SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = 0x2,SYNCMGRREGISTERFLAG_IDLE = 0x4,};
enum _tagTHROTTLE_ITEMS_FLAGS {TF_DONT_DELIVER_SCHEDULED_ITEMS = 0x1,TF_APPLY_EXCLUDE_RANGE = 0x2,TF_APPLY_UPDATEINTERVAL = 0x4,};
enum tagAMTunerSignalStrength {AMTUNER_HASNOSIGNALSTRENGTH = 0xFFFFFFFF,AMTUNER_NOSIGNAL = 0x0,AMTUNER_SIGNALPRESENT = 0x1,};
enum tagDVD_SUBPICTURE_CODING {DVD_SPCoding_RunLength = 0x0,DVD_SPCoding_Extended = 0x1,DVD_SPCoding_Other = 0x2,};
enum tagDVD_VIDEO_COMPRESSION {DVD_VideoCompression_Other = 0x0,DVD_VideoCompression_MPEG1 = 0x1,DVD_VideoCompression_MPEG2 = 0x2,};
enum tagHTTPMAILSPECIALFOLDER {HTTPMAIL_SF_NONE = 0x0,HTTPMAIL_SF_UNRECOGNIZED = 0x1,HTTPMAIL_SF_INBOX = 0x2,HTTPMAIL_SF_DELETEDITEMS = 0x3,HTTPMAIL_SF_DRAFTS = 0x4,HTTPMAIL_SF_OUTBOX = 0x5,HTTPMAIL_SF_SENTITEMS = 0x6,HTTPMAIL_SF_CONTACTS = 0x7,HTTPMAIL_SF_CALENDAR = 0x8,HTTPMAIL_SF_MSNPROMO = 0x9,HTTPMAIL_SF_LAST = 0xA,};
enum tagPhysicalConnectorType {PhysConn_Video_Tuner = 0x1,PhysConn_Video_Composite = 0x2,PhysConn_Video_SVideo = 0x3,PhysConn_Video_RGB = 0x4,PhysConn_Video_YRYBY = 0x5,PhysConn_Video_SerialDigital = 0x6,PhysConn_Video_ParallelDigital = 0x7,PhysConn_Video_SCSI = 0x8,PhysConn_Video_AUX = 0x9,PhysConn_Video_1394 = 0xA,PhysConn_Video_USB = 0xB,PhysConn_Video_VideoDecoder = 0xC,PhysConn_Video_VideoEncoder = 0xD,PhysConn_Video_SCART = 0xE,PhysConn_Video_Black = 0xF,PhysConn_Audio_Tuner = 0x1000,PhysConn_Audio_Line = 0x1001,PhysConn_Audio_Mic = 0x1002,PhysConn_Audio_AESDigital = 0x1003,PhysConn_Audio_SPDIFDigital = 0x1004,PhysConn_Audio_SCSI = 0x1005,PhysConn_Audio_AUX = 0x1006,PhysConn_Audio_1394 = 0x1007,PhysConn_Audio_USB = 0x1008,PhysConn_Audio_AudioDecoder = 0x1009,};
enum AM_SEEKING_SeekingFlags {AM_SEEKING_NoPositioning = 0x0,AM_SEEKING_AbsolutePositioning = 0x1,AM_SEEKING_RelativePositioning = 0x2,AM_SEEKING_IncrementalPositioning = 0x3,AM_SEEKING_PositioningBitsMask = 0x3,AM_SEEKING_SeekToKeyFrame = 0x4,AM_SEEKING_ReturnTime = 0x8,AM_SEEKING_Segment = 0x10,AM_SEEKING_NoFlush = 0x20,};
typedef struct _CERT_ACCESS_DESCRIPTION CERT_ACCESS_DESCRIPTION;
typedef struct _CERT_FORTEZZA_DATA_PROP CERT_FORTEZZA_DATA_PROP;
typedef struct _CERT_X942_DH_PARAMETERS CERT_X942_DH_PARAMETERS;
typedef struct UserNotificationTrigger CE_NOTIFICATION_TRIGGER;
typedef struct _CMC_ADD_ATTRIBUTES_INFO CMC_ADD_ATTRIBUTES_INFO;
typedef struct _CMC_ADD_EXTENSIONS_INFO CMC_ADD_EXTENSIONS_INFO;
typedef struct _CMC_TAGGED_CERT_REQUEST CMC_TAGGED_CERT_REQUEST;
typedef struct _CMC_TAGGED_CONTENT_INFO CMC_TAGGED_CONTENT_INFO;
typedef struct _CMSG_CMS_RECIPIENT_INFO CMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO CMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO CMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO CMSG_SIGNER_ENCODE_INFO;
typedef struct tagCOMMANDBANDSRESTOREINFO COMMANDBANDSRESTOREINFO;
enum CREATESUBSCRIPTIONFLAGS {CREATESUBS_ADDTOFAVORITES = 0x1,CREATESUBS_FROMFAVORITES = 0x2,CREATESUBS_NOUI = 0x4,CREATESUBS_NOSAVE = 0x8,CREATESUBS_SOFTWAREUPDATE = 0x10,};
typedef struct creative_adpcmwaveformat_tag CREATIVEADPCMWAVEFORMAT;
typedef struct _CRYPT_HASH_MESSAGE_PARA CRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_DEFUSAGE CRYPT_PROVIDER_DEFUSAGE;
typedef struct _CRYPT_PROVIDER_PRIVDATA CRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID CRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_RETRIEVE_AUX_INFO CRYPT_RETRIEVE_AUX_INFO;
typedef struct _CRYPT_SIGN_MESSAGE_PARA CRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS CTL_VERIFY_USAGE_STATUS;
enum DBPROPENUM25_DEPRECATED {DBPROP_ICommandCost = 0x8D,DBPROP_ICommandTree = 0x8E,DBPROP_ICommandValidate = 0x8F,DBPROP_IDBSchemaCommand = 0x90,DBPROP_IProvideMoniker = 0x7D,DBPROP_IQuery = 0x92,DBPROP_IReadData = 0x93,DBPROP_IRowsetAsynch = 0x94,DBPROP_IRowsetCopyRows = 0x95,DBPROP_IRowsetKeys = 0x97,DBPROP_IRowsetNewRowAfter = 0x98,DBPROP_IRowsetNextRowset = 0x99,DBPROP_IRowsetWatchAll = 0x9B,DBPROP_IRowsetWatchNotify = 0x9C,DBPROP_IRowsetWatchRegion = 0x9D,DBPROP_IRowsetWithParameters = 0x9E,};
typedef struct _DOT11_DISCONNECTED_PEER DOT11_DISCONNECTED_PEER;
typedef struct _DOT11_KEY_ALGO_TKIP_MIC DOT11_KEY_ALGO_TKIP_MIC;
typedef struct _DOT11_SUPPORTED_ANTENNA DOT11_SUPPORTED_ANTENNA;
struct DispHTCPropertyBehavior {struct DispHTCPropertyBehaviorVtbl *lpVtbl;};
struct DispHTMLAreasCollection {struct DispHTMLAreasCollectionVtbl *lpVtbl;};
struct DispHTMLBaseFontElement {struct DispHTMLBaseFontElementVtbl *lpVtbl;};
struct DispHTMLFieldSetElement {struct DispHTMLFieldSetElementVtbl *lpVtbl;};
struct DispHTMLRichtextElement {struct DispHTMLRichtextElementVtbl *lpVtbl;};
struct DispHTMLTextAreaElement {struct DispHTMLTextAreaElementVtbl *lpVtbl;};
typedef struct _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
typedef struct _EXTENSION_CONTROL_BLOCK EXTENSION_CONTROL_BLOCK;
typedef struct _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
struct FreeThreadedDOMDocument;
typedef void *( *GENERIC_BINDING_ROUTINE)(void *);
typedef struct _HSE_SEND_HEADER_EX_INFO HSE_SEND_HEADER_EX_INFO;
struct HTMLAttributeCollection;
struct HTMLButtonElementEvents {struct HTMLButtonElementEventsVtbl *lpVtbl;};
struct HTMLImageElementFactory;
struct HTMLNamespaceCollection;
struct HTMLObjectElementEvents {struct HTMLObjectElementEventsVtbl *lpVtbl;};
struct HTMLOptionButtonElement;
struct HTMLSelectElementEvents {struct HTMLSelectElementEventsVtbl *lpVtbl;};
struct HTMLStyleElementEvents2 {struct HTMLStyleElementEvents2Vtbl *lpVtbl;};
struct HTMLTextContainerEvents {struct HTMLTextContainerEventsVtbl *lpVtbl;};
typedef struct _HTTPSPolicyCallbackData HTTPSPolicyCallbackData;
struct IActiveScriptHostEncode {struct IActiveScriptHostEncodeVtbl *lpVtbl;};
struct IActiveScriptSiteWindow {struct IActiveScriptSiteWindowVtbl *lpVtbl;};
struct IDirect3DVolumeTexture8 {struct IDirect3DVolumeTexture8Vtbl *lpVtbl;};
struct IDirectDrawColorControl {struct IDirectDrawColorControlVtbl *lpVtbl;};
struct IDirectDrawGammaControl {struct IDirectDrawGammaControlVtbl *lpVtbl;};
struct IDirectDrawStreamSample {struct IDirectDrawStreamSampleVtbl *lpVtbl;};
struct IElementBehaviorFactory {struct IElementBehaviorFactoryVtbl *lpVtbl;};
struct IElementBehaviorLayout2 {struct IElementBehaviorLayout2Vtbl *lpVtbl;};
struct IElementBehaviorSiteOM2 {struct IElementBehaviorSiteOM2Vtbl *lpVtbl;};
struct IHTMLBookmarkCollection {struct IHTMLBookmarkCollectionVtbl *lpVtbl;};
struct IHTMLElementCollection2 {struct IHTMLElementCollection2Vtbl *lpVtbl;};
struct IHTMLElementCollection3 {struct IHTMLElementCollection3Vtbl *lpVtbl;};
struct IHTMLInputButtonElement {struct IHTMLInputButtonElementVtbl *lpVtbl;};
struct IHTMLInputHiddenElement {struct IHTMLInputHiddenElementVtbl *lpVtbl;};
struct IHTMLTxtRangeCollection {struct IHTMLTxtRangeCollectionVtbl *lpVtbl;};
struct IImnAdviseMigrateServer {struct IImnAdviseMigrateServerVtbl *lpVtbl;};
typedef struct _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
enum IMPORT_OBJECT_NAME_TYPE {IMPORT_OBJECT_ORDINAL = 0x0,IMPORT_OBJECT_NAME = 0x1,IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,IMPORT_OBJECT_NAME_UNDECORATE = 0x3,};
struct IMultiplePropertyAccess {struct IMultiplePropertyAccessVtbl *lpVtbl;};
typedef struct _1B524A7EE9DF0D2D7407CE43B258BBC8 INTERNET_CONNECTED_INFO;
struct INetCfgBindingInterface {struct INetCfgBindingInterfaceVtbl *lpVtbl;};
struct INetCfgComponentControl {struct INetCfgComponentControlVtbl *lpVtbl;};
struct INetConnectionConnectUi {struct INetConnectionConnectUiVtbl *lpVtbl;};
struct INetLanConnectionUiInfo {struct INetLanConnectionUiInfoVtbl *lpVtbl;};
struct IOleInPlaceActiveObject {struct IOleInPlaceActiveObjectVtbl *lpVtbl;};
struct IPrivateIdentityManager {struct IPrivateIdentityManagerVtbl *lpVtbl;};
struct IRTCClientProvisioning2 {struct IRTCClientProvisioning2Vtbl *lpVtbl;};
struct IRTCEnumPresenceDevices {struct IRTCEnumPresenceDevicesVtbl *lpVtbl;};
struct IRTCPresenceStatusEvent {struct IRTCPresenceStatusEventVtbl *lpVtbl;};
struct ITIMEDMusicPlayerObject {struct ITIMEDMusicPlayerObjectVtbl *lpVtbl;};
struct ITIMEMediaPlayerControl {struct ITIMEMediaPlayerControlVtbl *lpVtbl;};
struct IXMLDOMDocumentFragment {struct IXMLDOMDocumentFragmentVtbl *lpVtbl;};
struct IXMLDOMSchemaCollection {struct IXMLDOMSchemaCollectionVtbl *lpVtbl;};
typedef struct _LOCALMANAGEDAPPLICATION LOCALMANAGEDAPPLICATION;
typedef IActiveXSafetyProvider *LPACTIVEXSAFETYPROVIDER;
typedef IBindStatusCallbackMsg *LPBINDSTATUSCALLBACKMSG;
typedef struct _CMInvokeCommandInfoEx *LPCMINVOKECOMMANDINFOEX;
typedef struct IDirect3DVertexBuffer8 *LPDIRECT3DVERTEXBUFFER8;
typedef struct IDirectSound3DListener *LPDIRECTSOUND3DLISTENER;
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
typedef struct _1CF5A01E195BE25BEDA13B6A0EE28B07 *LPGOPHER_ATTRIBUTE_TYPE;
typedef struct tagHTTPMAILBCOPYMOVELIST *LPHTTPMAILBCOPYMOVELIST;
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
typedef struct _0AD2D8D1BD5FB2EC4188290EECBF472F *LPINTERNET_ASYNC_RESULT;
typedef struct _D692CA7460863103343173F071E8F66B *LPINTERNET_VERSION_INFO;
typedef struct linemediacontroldigit_tag *LPLINEMEDIACONTROLDIGIT;
typedef struct linemediacontrolmedia_tag *LPLINEMEDIACONTROLMEDIA;
typedef struct _NOTIFICATION *LPNOTIFICATION_WABSDEFS;
typedef struct SDP_ULARGE_INTEGER_16 *LPSDP_ULARGE_INTEGER_16;
typedef struct _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
typedef struct _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;
enum MACRO_CBMAX_HEADER_LINE {MAX_CBMAX_HEADER_LINE = 0xFFFFFFFF,MIN_CBMAX_HEADER_LINE = 0x4C,MAX_CBMAX_BODY_LINE = 0xFFFFFFFF,MIN_CBMAX_BODY_LINE = 0x1E,CCHMAX_HEADER_LINE = 0x3E8,};
enum MACRO_CEDB_PROPNOTFOUND {CEDB_PROPNOTFOUND = 0x100,CEDB_PROPDELETE = 0x200,CEDB_MAXDATABLOCKSIZE = 0xFFC,CEDB_MAXPROPDATASIZE = 0xFFBF,CEDB_MAXRECORDSIZE = 0x20000,CEDB_MAXNUMRECORDS = 0xFFFF,CEDB_ALLOWREALLOC = 0x1,CEDB_NOBACKGROUNDFLUSH = 0x10000,};
enum MACRO_CQUERYMETADISPIDS {CQUERYMETADISPIDS = 10,};
enum MACRO_D3DSI_COMMENTSIZE {D3DSI_COMMENTSIZE_SHIFT = 16,D3DSI_COMMENTSIZE_MASK = 2147418112,};
enum MACRO_DBPROPVAL_PERSIST {DBPROPVAL_PERSIST_ADTG = 0,DBPROPVAL_PERSIST_XML = 1,};
enum MACRO_DISPID_READYSTATE {DISPID_READYSTATE = -525,DISPID_READYSTATECHANGE = -609,DISPID_AMBIENT_TRANSFERPRIORITY = -728,DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = -5501,DISPID_AMBIENT_SILENT = -5502,DISPID_AMBIENT_CODEPAGE = -725,DISPID_AMBIENT_CHARSET = -727,DISPID_AM_IMAGESOURCEWIDTH = 4,DISPID_AM_IMAGESOURCEHEIGHT = 5,DISPID_AM_AUTHOR = 6,DISPID_AM_TITLE = 7,DISPID_AM_COPYRIGHT = 8,DISPID_AM_DESCRIPTION = 9,DISPID_AM_RATING = 10,DISPID_AM_FILENAME = 11,DISPID_AM_DURATION = 12,DISPID_AM_CURRENTPOSITION = 13,DISPID_AM_PLAYCOUNT = 14,DISPID_SELECTION_START = 15,DISPID_SELECTION_END = 16,DISPID_AM_CURRENTSTATE = 17,DISPID_AM_RATE = 18,DISPID_VOLUME = 19,DISPID_BALANCE = 20,DISPID_AM_ENABLECONTEXTMENU = 21,DISPID_SHOW_DISPLAY = 22,DISPID_SHOW_CONTROLS = 23,DISPID_SHOW_POSITION_CONTROLS = 24,DISPID_SHOW_SELECTION_CONTROLS = 25,DISPID_SHOW_TRACKER = 26,DISPID_ENABLE_POSITION_CONTROLS = 27,DISPID_ENABLE_SELECTION_CONTROLS = 28,DISPID_ENABLE_TRACKER = 29,DISPID_ALLOW_HIDE_DISPLAY = 30,DISPID_ALLOW_HIDE_CONTROLS = 31,DISPID_DISPLAY_MODE = 32,DISPID_ALLOW_CHANGE_DISPLAY_MODE = 33,DISPID_FILTERGRAPH = 34,DISPID_FILTER_GRAPH_DISPATCH = 35,DISPID_DISPLAY_FORE_COLOR = 36,DISPID_DISPLAY_BACK_COLOR = 37,DISPID_MOVIE_WINDOW_SIZE = 38,DISPID_FULL_SCREEN_MODE = 39,DISPID_AM_AUTOSTART = 40,DISPID_AM_AUTOREWIND = 41,DISPID_BORDER_STYLE = 42,DISPID_ISSOUNDCARDENABLED = 53,DISPID_INFO = 1610743885,DISPID_IMAGESOURCEWIDTH = 1001,DISPID_IMAGESOURCEHEIGHT = 1002,DISPID_DURATION = 1003,DISPID_AUTHOR = 1004,DISPID_COPYRIGHT = 1005,DISPID_DESCRIPTION = 1006,DISPID_RATING = 1007,DISPID_TITLE = 1008,DISPID_SOURCELINK = 1009,DISPID_MARKERCOUNT = 1010,DISPID_CANSCAN = 1011,DISPID_CANSEEK = 1012,DISPID_SENDKEYBOARDEVENTS = 1013,DISPID_SENDMOUSECLICKEVENTS = 1014,DISPID_SENDMOUSEMOVEEVENTS = 1015,DISPID_SENDSTATECHANGEEVENTS = 1016,DISPID_AUTOSTART = 1017,DISPID_AUTOREWIND = 1018,DISPID_ALLOWCHANGECONTROLTYPE = 1019,DISPID_INVOKEURLS = 1020,DISPID_ENABLECONTEXTMENU = 1021,DISPID_TRANSPARENTATSTART = 1022,DISPID_TRANSPARENTONSTOP = 1023,DISPID_CLICKTOPLAY = 1025,DISPID_FILENAME = 1026,DISPID_CURRENTPOSITION = 1027,DISPID_RATE = 1028,DISPID_CURRENTMARKER = 1029,DISPID_PLAYCOUNT = 1030,DISPID_CURRENTSTATE = 1031,DISPID_DISPLAYSIZE = 1032,DISPID_MAINWINDOW = 1033,DISPID_CONTROLTYPE = 1034,DISPID_ALLOWSCAN = 1035,DISPID_CREATIONDATE = 1036,DISPID_BANDWIDTH = 1037,DISPID_ERRORCORRECTION = 1038,DISPID_RECEIVEDPACKETS = 1039,DISPID_RECOVEREDPACKETS = 1040,DISPID_LOSTPACKETS = 1041,DISPID_RECEPTIONQUALITY = 1042,DISPID_BUFFERINGCOUNT = 1043,DISPID_CURSORTYPE = 1044,DISPID_ANIMATIONATSTART = 1045,DISPID_ANIMATIONONSTOP = 1046,DISPID_CANSEEKTOMARKERS = 1047,DISPID_SESSIONSTART = 1048,DISPID_SESSIONEND = 1049,DISPID_CHANNELNAME = 1050,DISPID_CHANNELDESCRIPTION = 1051,DISPID_CHANNELURL = 1052,DISPID_CONTACTADDRESS = 1053,DISPID_CONTACTPHONE = 1054,DISPID_CONTACTEMAIL = 1055,DISPID_ALLOWCHANGEDISPLAYSIZE = 1056,DISPID_CODECCOUNT = 1057,DISPID_ISBROADCAST = 1058,DISPID_ISDURATIONVALID = 1059,DISPID_SOURCEPROTOCOL = 1060,DISPID_OPENSTATE = 1061,DISPID_SENDOPENSTATECHANGEEVENTS = 1062,DISPID_SENDWARNINGEVENTS = 1063,DISPID_SENDERROREVENTS = 1064,DISPID_HASERROR = 1065,DISPID_ERRORDESCRIPTION = 1066,DISPID_ERRORCODE = 1067,DISPID_PLAYSTATE = 1068,DISPID_SENDPLAYSTATECHANGEEVENTS = 1069,DISPID_BUFFERINGTIME = 1070,DISPID_USEFIXEDUDPPORT = 1071,DISPID_FIXEDUDPPORT = 1072,DISPID_USEHTTPPROXY = 1073,DISPID_HTTPPROXYHOST = 1074,DISPID_HTTPPROXYPORT = 1075,DISPID_ENABLEMULTICAST = 1076,DISPID_ENABLEUDP = 1077,DISPID_ENABLETCP = 1078,DISPID_ENABLEHTTP = 1079,DISPID_BUFFERINGPROGRESS = 1080,DISPID_ENABLEAUTOPROXY = 1081,DISPID_BASEURL = 1082,DISPID_DEFAULTFRAME = 1083,DISPID_SHOWCAPTIONING = 1084,DISPID_CAPTIONING_ID = 1085,DISPID_SHOWSTATUSBAR = 1086,DISPID_SHOWTOOLBAR = 1087,DISPID_SHOWGOTOBAR = 1088,DISPID_MUTE = 1089,DISPID_FULLSCREENCONTROLS = 1090,DISPID_PREVIEWMODE = 1091,DISPID_DIALOGAVAILABILITY = 1092,DISPID_CANPREVIEW = 1093,DISPID_HASMULTIPLEITEMS = 1094,DISPID_LANGUAGE = 1095,DISPID_AUDIOSTREAM = 1096,DISPID_SAMISTYLE = 1097,DISPID_SAMILANG = 1098,DISPID_SAMIFILENAME = 1099,DISPID_STREAMCOUNT = 1100,DISPID_VIDEOBORDER_WIDTH = 1101,DISPID_VIDEOBORDER_COLOR = 1102,DISPID_VIDEOBORDER_3D = 1103,DISPID_CLIENTID = 1106,DISPID_SHOWAUDIOCONTROLS = 1107,DISPID_ENABLEFULLSCREENCONTROLS = 1108,DISPID_ACTIVEMOVIE = 1109,DISPID_NSPLAY = 1110,DISPID_MEDIAPLAYER = 1111,DISPID_WINDOWLESSVIDEO = 1112,DISPID_CONNECTIONSPEED = 1113,DISPID_MPDVD = 1500,DISPID_MPDVDCONTROL = 1501,DISPID_MPDVDINFO = 1502,DISPID_MPDVDCONFIG = 1503,DISPID_DVDNOTIFY = 1505,DISPID_DOEVENT = 1506,DISPID_DVD_TITLEPLAY = 1507,DISPID_DVD_CHAPTERPLAY = 1508,DISPID_DVD_TIMEPLAY = 1509,DISPID_DVD_STOPRESUME = 1510,DISPID_DVD_GOUP = 1511,DISPID_DVD_TIMESEARCH = 1512,DISPID_DVD_CHAPTERSEARCH = 1513,DISPID_DVD_PREVPGSEARCH = 1514,DISPID_DVD_TOPPGSEARCH = 1515,DISPID_DVD_NEXTPGSEARCH = 1516,DISPID_DVD_FORWARDSCAN = 1517,DISPID_DVD_BACKWARDSCAN = 1518,DISPID_DVD_MENUCALL = 1519,DISPID_DVD_RESUME = 1520,DISPID_DVD_UPPERBUTTONSELECT = 1521,DISPID_DVD_LOWERBUTTONSELECT = 1522,DISPID_DVD_LEFTBUTTONSELECT = 1523,DISPID_DVD_RIGHTBUTTONSELECT = 1524,DISPID_DVD_BUTTONACTIVATE = 1525,DISPID_DVD_BUTTONSELECTANDACTIVATE = 1526,DISPID_DVD_STILLOFF = 1527,DISPID_DVD_PAUSEON = 1528,DISPID_DVD_PAUSEOFF = 1529,DISPID_DVD_MENULANGSEL = 1530,DISPID_DVD_AUDIOSTREAMCHANGE = 1531,DISPID_DVD_SUBPICTURESTREAMCHANGE = 1532,DISPID_DVD_ANGLECHANGE = 1533,DISPID_DVD_PARENTALLEVELSELECT = 1534,DISPID_DVD_PARENTALCONTRYSELECT = 1535,DISPID_DVD_KARAOKEMODE = 1536,DISPID_DVD_VIDEOMODEPREF = 1537,DISPID_DVD_ROOT = 1538,DISPID_DVD_MOUSEACTIVATE = 1539,DISPID_DVD_MOUSESELECT = 1540,DISPID_DVD_CHAPTERPLAYAUTOSTOP = 1541,DISPID_DVD_DOMAIN = 1542,DISPID_DVD_AUDIOSTREAMSAVAIL = 1543,DISPID_DVD_CURRENTAUDIOSTREAM = 1544,DISPID_DVD_CURRENTSUBPICTURESTREAM = 1545,DISPID_DVD_SUBPICTURESTREAMSAVAIL = 1546,DISPID_DVD_SUBPICTUREON = 1547,DISPID_DVD_CURRENTANGLE = 1548,DISPID_DVD_ANGLESAVAILABLE = 1549,DISPID_DVD_NUMBEROFCHAPTERS = 1550,DISPID_DVD_GETAUDIOLANGUAGE = 1551,DISPID_DVD_GETBUTTON = 1552,DISPID_DVD_GETDOMAIN = 1553,DISPID_DVD_GETLOCATION = 1554,DISPID_DVD_GETSUBPICTURELANG = 1555,DISPID_DVD_PARENTALLEVEL = 1556,DISPID_DVD_GETUOPS = 1558,DISPID_DVD_GETALLSPRMS = 1559,DISPID_DVD_GETALLGPRMS = 1560,DISPID_DVD_GETVIDEOATTRIBUTES = 1561,DISPID_DVD_GETAUDIOATTRIBUTES = 1562,DISPID_DVD_GETSUBPICTUREATTRIBUTES = 1563,DISPID_DVD_GETTITLEATTRIBUTES = 1564,DISPID_DVD_GETVMGATTRIBUTES = 1565,DISPID_DVD_GETDVDTEXTINFO = 1566,DISPID_DVD_GETTITLENUM = 1567,DISPID_DVD_GETCHAPTERNUM = 1568,DISPID_DVD_CURRENTTIME = 1569,DISPID_DVD_CURRENTBUTTON = 1570,DISPID_DVD_BUTTONSAVAIL = 1571,DISPID_DVD_PARENTALCOUNTRY = 1572,DISPID_DVD_FRAMESPERSECOND = 1573,DISPID_DVD_CURRENTDOMAIN = 1574,DISPID_DVD_TITLESAVAILABLE = 1575,DISPID_DVD_VOLUMESAVAILABLE = 1576,DISPID_DVD_CURRENTVOLUME = 1577,DISPID_DVD_CURRENTDISCSIDE = 1578,DISPID_DVD_CURRENTUOPS = 1579,DISPID_DVD_CURRENTCCSERVICE = 1580,DISPID_DVD_CCACTIVE = 1581,DISPID_DVD_GETTOTALTITLETIME = 1582,DISPID_DVD_GETTITLEPARENTALLEVEL = 1583,DISPID_DVD_UNIQUEID = 1584,DISPID_DVD_COLORKEY = 1585,DISPID_RUN = 1610743809,DISPID_AM_PAUSE = 1610743810,DISPID_AM_STOP = 1610743811,DISPID_PLAY = 2001,DISPID_PAUSE = 2002,DISPID_STOP = 2003,DISPID_GETMARKERTIME = 2004,DISPID_GETMARKERNAME = 2005,DISPID_CANCEL = 2006,DISPID_GETCODECINSTALLED = 2007,DISPID_GETCODECDESCRIPTION = 2008,DISPID_GETCODECURL = 2009,DISPID_OPEN = 2010,DISPID_GETMOREINFOURL = 2011,DISPID_FILEPROPERTIESDIALOG = 2012,DISPID_STATISTICSDIALOG = 2013,DISPID_GOTODIALOG = 2014,DISPID_STREAMSELECT = 2015,DISPID_GETMEDIAINFOSTRING = 2016,DISPID_DOWNLOADIMAGE = 2017,DISPID_NAVIGATEBROWSERTOURL = 2018,DISPID_GETSTREAMNAME = 2019,DISPID_GETSTREAMGROUP = 2020,DISPID_GETSTREAMSELECTED = 2021,DISPID_PREVIOUS = 2022,DISPID_NEXT = 2023,DISPID_FASTFORWARD = 2024,DISPID_FASTREVERSE = 2025,DISPID_PREVIEW = 2026,DISPID_WAIT = 2027,DISPID_GETMEDIAPARAMETER = 2028,DISPID_GETMEDIAPARAMETERNAME = 2029,DISPID_ENTRYCOUNT = 2030,DISPID_GETCURRENTENTRY = 2031,DISPID_SETCURRENTENTRY = 2032,DISPID_SHOWDIALOG = 2033,DISPID_AM_STATECHANGE = 1,DISPID_POSITIONCHANGE = 2,DISPID_TIMER = 3,DISPID_OPENCOMPLETE = 50,DISPID_DISPLAYMODECHANGE = 51,DISPID_AM_SCRIPTCOMMAND = 52,DISPID_AM_ERROR = 999,DISPID_SCRIPTCOMMAND = 3001,DISPID_ENDOFSTREAM = 3002,DISPID_BUFFERING = 3003,DISPID_DISCONNECT = 3004,DISPID_STATECHANGE = 3005,DISPID_MARKERHIT = 3006,DISPID_AUTOSTARTFAILURE = 3007,DISPID_NEWSTREAM = 3008,DISPID_WARNING = 3009,DISPID_OPENSTATECHANGE = 3011,DISPID_PLAYSTATECHANGE = 3012,DISPID_AMTFLAT = 6000,DISPID_AMTDOWNLOADED = 6001,DISPID_AMTRESET = 6002,DISPID_AMTHIGHLIGHTCOLOR = 6003,DISPID_AMTSHADOWCOLOR = 6004,DISPID_AMTSHOWBORDER = 6005,DISPID_AMTSTATICCOLOR = 6006,DISPID_AMTDOWNLOADCOLOR = 6007,DISPID_AMTVIEWEDCOLOR = 6008,DISPID_AMTVIEWED = 6009,DISPID_AMTSTATUSTEXT = 6010,DISPID_AMTSHOWAUDIOCONTROLS = 6011,DISPID_AMTFULLSCREEN = 6012,DISPID_SHOWCANCEL = 6013,DISPID_AMTMINWIDTH = 6014,DISPID_AMTRESTARTPLAYLIST = 6015,DISPID_REOPENURL = 6016,DISPID_AMTALLOWPAUSE = 6017,DISPID_IMAGEURL = 6100,DISPID_IMAGEJUSTIFYWIDTH = 6101,DISPID_DESTINATIONURL = 6102,DISPID_LAUNCHBROWSER = 6103,DISPID_CLEAR = 6104,DISPID_CONTAINERTIMER = 6200,DISPID_VISIBLE = 6201,DISPID_SKIPFORWARD = 6301,DISPID_SKIPREVERSE = 6302,DISPID_AMTSTATECHANGE = 8001,DISPID_AMTCANCEL = 8002,DISPID_AMTDOWNLOADCOMPLETE = 8003,DISPID_LOADMONIKER = 8004,DISPID_LOADMONIKER2 = 8005,};
enum MACRO_EM_RESERVED0x00DD {EM_RESERVED0x00DD = 0xDD,EM_RESERVED0x00DE = 0xDE,EM_RESERVED0x00E0 = 0xE0,EM_RESERVED0x00E1 = 0xE1,};
enum MACRO_EXCEPTION_EXECUTE {EXCEPTION_EXECUTE_HANDLER = 1,EXCEPTION_CONTINUE_SEARCH = 0,EXCEPTION_CONTINUE_EXECUTION = -1,};
enum MACRO_HDN_ITEMCHANGINGA {HDN_ITEMCHANGINGA = -300,HDN_ITEMCHANGINGW = -320,HDN_ITEMCHANGEDA = -301,HDN_ITEMCHANGEDW = -321,HDN_ITEMCLICKA = -302,HDN_ITEMCLICKW = -322,HDN_ITEMDBLCLICKA = -303,HDN_ITEMDBLCLICKW = -323,HDN_DIVIDERDBLCLICKA = -305,HDN_DIVIDERDBLCLICKW = -325,HDN_BEGINTRACKA = -306,HDN_BEGINTRACKW = -326,HDN_ENDTRACKA = -307,HDN_ENDTRACKW = -327,HDN_TRACKA = -308,HDN_TRACKW = -328,HDN_GETDISPINFOA = -309,HDN_GETDISPINFOW = -329,HDN_BEGINDRAG = -310,HDN_ENDDRAG = -311,HDN_ITEMCHANGING = -300,HDN_ITEMCHANGED = -301,HDN_ITEMCLICK = -302,HDN_ITEMDBLCLICK = -303,HDN_DIVIDERDBLCLICK = -305,HDN_BEGINTRACK = -306,HDN_ENDTRACK = -307,HDN_TRACK = -308,HDN_GETDISPINFO = -309,};
enum MACRO_INTERNET_AUTODIAL {INTERNET_AUTODIAL_FORCE_ONLINE = 1,INTERNET_AUTODIAL_FORCE_UNATTENDED = 2,INTERNET_AUTODIAL_FAILIFSECURITYCHECK = 4,INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT = 8,INTERNET_AUTODIAL_FLAGS_MASK = 15,INTERNET_CONNECTION_MODEM = 1,INTERNET_CONNECTION_LAN = 2,INTERNET_CONNECTION_PROXY = 4,INTERNET_CONNECTION_MODEM_BUSY = 8,INTERNET_RAS_INSTALLED = 16,INTERNET_CONNECTION_OFFLINE = 32,INTERNET_CONNECTION_CONFIGURED = 64,INTERNET_CUSTOMDIAL_CONNECT = 0,INTERNET_CUSTOMDIAL_UNATTENDED = 1,INTERNET_CUSTOMDIAL_DISCONNECT = 2,INTERNET_CUSTOMDIAL_SHOWOFFLINE = 4,INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED = 1,INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE = 2,INTERNET_CUSTOMDIAL_CAN_HANGUP = 4,INTERNET_DIALSTATE_DISCONNECTED = 1,INTERNET_IDENTITY_FLAG_PRIVATE_CACHE = 1,INTERNET_IDENTITY_FLAG_SHARED_CACHE = 2,INTERNET_IDENTITY_FLAG_CLEAR_DATA = 4,INTERNET_IDENTITY_FLAG_CLEAR_COOKIES = 8,INTERNET_IDENTITY_FLAG_CLEAR_HISTORY = 16,INTERNET_IDENTITY_FLAG_CLEAR_CONTENT = 32,INTERNET_SUPPRESS_RESET_ALL = 0,INTERNET_SUPPRESS_COOKIE_POLICY = 1,INTERNET_SUPPRESS_COOKIE_POLICY_RESET = 2,};
enum MACRO_INTERNET_INTERNAL {INTERNET_INTERNAL_ERROR_BASE = 12900,};
enum MACRO_LB_RESERVED0x01C0 {LB_RESERVED0x01C0 = 0x1C0,LB_RESERVED0x01C1 = 0x1C1,LB_MSGMAX = 0x1C9,};
enum MACRO_LINECALLCOMPLCOND {LINECALLCOMPLCOND_BUSY = 0x1,LINECALLCOMPLCOND_NOANSWER = 0x2,};
enum MACRO_LINECALLCOMPLMODE {LINECALLCOMPLMODE_CAMPON = 0x1,LINECALLCOMPLMODE_CALLBACK = 0x2,LINECALLCOMPLMODE_INTRUDE = 0x4,LINECALLCOMPLMODE_MESSAGE = 0x8,};
enum MACRO_LINECALLINFOSTATE {LINECALLINFOSTATE_OTHER = 0x1,LINECALLINFOSTATE_DEVSPECIFIC = 0x2,LINECALLINFOSTATE_BEARERMODE = 0x4,LINECALLINFOSTATE_RATE = 0x8,LINECALLINFOSTATE_MEDIAMODE = 0x10,LINECALLINFOSTATE_APPSPECIFIC = 0x20,LINECALLINFOSTATE_CALLID = 0x40,LINECALLINFOSTATE_RELATEDCALLID = 0x80,LINECALLINFOSTATE_ORIGIN = 0x100,LINECALLINFOSTATE_REASON = 0x200,LINECALLINFOSTATE_COMPLETIONID = 0x400,LINECALLINFOSTATE_NUMOWNERINCR = 0x800,LINECALLINFOSTATE_NUMOWNERDECR = 0x1000,LINECALLINFOSTATE_NUMMONITORS = 0x2000,LINECALLINFOSTATE_TRUNK = 0x4000,LINECALLINFOSTATE_CALLERID = 0x8000,LINECALLINFOSTATE_CALLEDID = 0x10000,LINECALLINFOSTATE_CONNECTEDID = 0x20000,LINECALLINFOSTATE_REDIRECTIONID = 0x40000,LINECALLINFOSTATE_REDIRECTINGID = 0x80000,LINECALLINFOSTATE_DISPLAY = 0x100000,LINECALLINFOSTATE_USERUSERINFO = 0x200000,LINECALLINFOSTATE_HIGHLEVELCOMP = 0x400000,LINECALLINFOSTATE_LOWLEVELCOMP = 0x800000,LINECALLINFOSTATE_CHARGINGINFO = 0x1000000,LINECALLINFOSTATE_TERMINAL = 0x2000000,LINECALLINFOSTATE_DIALPARAMS = 0x4000000,LINECALLINFOSTATE_MONITORMODES = 0x8000000,LINECALLINFOSTATE_TREATMENT = 0x10000000,LINECALLINFOSTATE_QOS = 0x20000000,LINECALLINFOSTATE_CALLDATA = 0x40000000,};
enum MACRO_LINECALLPRIVILEGE {LINECALLPRIVILEGE_NONE = 0x1,LINECALLPRIVILEGE_MONITOR = 0x2,LINECALLPRIVILEGE_OWNER = 0x4,};
enum MACRO_LINECALLTREATMENT {LINECALLTREATMENT_SILENCE = 0x1,LINECALLTREATMENT_RINGBACK = 0x2,LINECALLTREATMENT_BUSY = 0x3,LINECALLTREATMENT_MUSIC = 0x4,};
enum MACRO_LINECONNECTEDMODE {LINECONNECTEDMODE_ACTIVE = 0x1,LINECONNECTEDMODE_INACTIVE = 0x2,LINECONNECTEDMODE_ACTIVEHELD = 0x4,LINECONNECTEDMODE_INACTIVEHELD = 0x8,LINECONNECTEDMODE_CONFIRMED = 0x10,};
enum MACRO_LM20_MAXCOMMENTSZ {LM20_MAXCOMMENTSZ = 48,};
enum MACRO_NI_CONTEXTUPDATED {NI_CONTEXTUPDATED = 0x3,};
enum MACRO_OID_DOT11_CURRENT {OID_DOT11_CURRENT_OFFLOAD_CAPABILITY = 218170113,OID_DOT11_WEP_OFFLOAD = 218170114,OID_DOT11_WEP_UPLOAD = 218170115,OID_DOT11_DEFAULT_WEP_OFFLOAD = 218170116,OID_DOT11_DEFAULT_WEP_UPLOAD = 218170117,OID_DOT11_MPDU_MAX_LENGTH = 218170118,OID_DOT11_OPERATION_MODE_CAPABILITY = 218170119,};
enum MACRO_OID_DOT11_PRIVATE {OID_DOT11_PRIVATE_OIDS_START = 218171136,OID_DOT11_MAXIMUM_LOOKAHEAD = 218171136,OID_DOT11_CURRENT_LOOKAHEAD = 218171137,OID_DOT11_CURRENT_ADDRESS = 218171138,OID_DOT11_PERMANENT_ADDRESS = 218171139,OID_DOT11_MULTICAST_LIST = 218171140,};
enum MACRO_PARTITIONNAMESIZE {PARTITIONNAMESIZE = 32,};
enum MACRO_PSM_SETFINISHTEXT {PSM_SETFINISHTEXT = 1139,};
enum MACRO_SECURITY_INTERNET {SECURITY_INTERNET_MASK = 61440,};
enum MACRO_SECURITY_PROTOCOL {SECURITY_PROTOCOL_NONE = 0x0,};
enum MACRO_SEND_ENCAPSULATED {SEND_ENCAPSULATED_COMMAND = 0x0,};
enum MACRO_SW_SCROLLCHILDREN {SW_SCROLLCHILDREN = 0x1,};
enum MACRO_URLACTION_ACTIVEX {URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 0x1201,URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 0x1202,URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 0x1203,URLACTION_SCRIPT_OVERRIDE_SAFETY = 0x1401,URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 0x1204,URLACTION_ACTIVEX_TREATASUNTRUSTED = 0x1205,URLACTION_ACTIVEX_CURR_MAX = 0x1205,URLACTION_ACTIVEX_MAX = 0x13FF,URLACTION_SCRIPT_MIN = 0x1400,URLACTION_SCRIPT_RUN = 0x1400,URLACTION_SCRIPT_JAVA_USE = 0x1402,URLACTION_SCRIPT_SAFE_ACTIVEX = 0x1405,URLACTION_CROSS_DOMAIN_DATA = 0x1406,URLACTION_SCRIPT_PASTE = 0x1407,URLACTION_SCRIPT_CURR_MAX = 0x1407,URLACTION_SCRIPT_MAX = 0x15FF,URLACTION_HTML_MIN = 0x1600,URLACTION_HTML_SUBMIT_FORMS = 0x1601,URLACTION_HTML_SUBMIT_FORMS_FROM = 0x1602,URLACTION_HTML_SUBMIT_FORMS_TO = 0x1603,URLACTION_HTML_FONT_DOWNLOAD = 0x1604,URLACTION_HTML_JAVA_RUN = 0x1605,URLACTION_HTML_USERDATA_SAVE = 0x1606,URLACTION_HTML_SUBFRAME_NAVIGATE = 0x1607,URLACTION_HTML_META_REFRESH = 0x1608,URLACTION_HTML_CURR_MAX = 0x1608,URLACTION_HTML_MAX = 0x17FF,URLACTION_SHELL_MIN = 0x1800,URLACTION_SHELL_INSTALL_DTITEMS = 0x1800,URLACTION_SHELL_MOVE_OR_COPY = 0x1802,URLACTION_SHELL_FILE_DOWNLOAD = 0x1803,URLACTION_SHELL_VERB = 0x1804,URLACTION_SHELL_WEBVIEW_VERB = 0x1805,URLACTION_SHELL_CURR_MAX = 0x1805,URLACTION_SHELL_MAX = 0x19FF,URLACTION_NETWORK_MIN = 0x1A00,URLACTION_CREDENTIALS_USE = 0x1A00,};
enum MACRO_URLACTION_CHANNEL {URLACTION_CHANNEL_SOFTDIST_MAX = 0x1EFF,};
enum MACRO_URLACTION_COOKIES {URLACTION_COOKIES = 0x1A02,URLACTION_COOKIES_SESSION = 0x1A03,URLACTION_CLIENT_CERT_PROMPT = 0x1A04,URLACTION_COOKIES_THIRD_PARTY = 0x1A05,URLACTION_COOKIES_SESSION_THIRD_PARTY = 0x1A06,URLACTION_NETWORK_CURR_MAX = 0x1A06,URLACTION_NETWORK_MAX = 0x1BFF,URLACTION_JAVA_MIN = 0x1C00,URLACTION_JAVA_PERMISSIONS = 0x1C00,};
enum MACRO_URLPOLICY_CHANNEL {URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 0x10000,URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 0x20000,URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 0x30000,};
enum MACRO_WM_FILECHANGEINFO {WM_FILECHANGEINFO = 0x8101,};
enum MACRO_X509_UNICODE_NAME {X509_UNICODE_NAME_VALUE = 24,X509_ANY_STRING = 6,X509_UNICODE_ANY_STRING = 24,X509_OCTET_STRING = 25,X509_BITS = 26,X509_INTEGER = 27,X509_MULTI_BYTE_INTEGER = 28,X509_ENUMERATED = 29,X509_CHOICE_OF_TIME = 30,X509_AUTHORITY_KEY_ID2 = 31,X509_AUTHORITY_INFO_ACCESS = 32,X509_CRL_REASON_CODE = 29,};
enum MACRO_cchProfileNameMax {cchProfileNameMax = 64,};
enum MACRO_cchProfilePassMax {cchProfilePassMax = 64,};
enum MACRO_ckidAVISUPERINDEX {ckidAVISUPERINDEX = 2019847785,};
enum MACRO_ckidMAINAVIHEADER {ckidMAINAVIHEADER = 1751742049,};
enum MACRO_fnevCriticalError {fnevCriticalError = 0x1,fnevNewMail = 0x2,fnevObjectCreated = 0x4,fnevObjectDeleted = 0x8,fnevObjectModified = 0x10,fnevObjectMoved = 0x20,fnevObjectCopied = 0x40,fnevSearchComplete = 0x80,fnevTableModified = 0x100,fnevStatusObjectModified = 0x200,fnevReservedForMapi = 0x40000000,fnevExtended = 0x80000000,};
enum MACRO_listtypeAVIHEADER {listtypeAVIHEADER = 1819436136,};
enum MACRO_listtypeAVIRECORD {listtypeAVIRECORD = 543384946,};
enum MACRO_raatARAPChallenge {raatARAPChallenge = 33,};
enum MQMGMT_QUEUE_PROPERTIES {PROPID_MGMT_QUEUE_BASE = 0x0,PROPID_MGMT_QUEUE_PATHNAME = 0x1,PROPID_MGMT_QUEUE_FORMATNAME = 0x2,PROPID_MGMT_QUEUE_TYPE = 0x3,PROPID_MGMT_QUEUE_LOCATION = 0x4,PROPID_MGMT_QUEUE_XACT = 0x5,PROPID_MGMT_QUEUE_FOREIGN = 0x6,PROPID_MGMT_QUEUE_MESSAGE_COUNT = 0x7,PROPID_MGMT_QUEUE_USED_QUOTA = 0x8,PROPID_MGMT_QUEUE_JOURNAL_MESSAGE_COUNT = 0x9,PROPID_MGMT_QUEUE_JOURNAL_USED_QUOTA = 0xA,PROPID_MGMT_QUEUE_STATE = 0xB,PROPID_MGMT_QUEUE_NEXTHOPS = 0xC,PROPID_MGMT_QUEUE_EOD_LAST_ACK = 0xD,PROPID_MGMT_QUEUE_EOD_LAST_ACK_TIME = 0xE,PROPID_MGMT_QUEUE_EOD_LAST_ACK_COUNT = 0xF,PROPID_MGMT_QUEUE_EOD_FIRST_NON_ACK = 0x10,PROPID_MGMT_QUEUE_EOD_LAST_NON_ACK = 0x11,PROPID_MGMT_QUEUE_EOD_NEXT_SEQ = 0x12,PROPID_MGMT_QUEUE_EOD_NO_READ_COUNT = 0x13,PROPID_MGMT_QUEUE_EOD_NO_ACK_COUNT = 0x14,PROPID_MGMT_QUEUE_EOD_RESEND_TIME = 0x15,PROPID_MGMT_QUEUE_EOD_RESEND_INTERVAL = 0x16,PROPID_MGMT_QUEUE_EOD_RESEND_COUNT = 0x17,PROPID_MGMT_QUEUE_EOD_SOURCE_INFO = 0x18,};
typedef struct _NDIS_TAPI_CONFIG_DIALOG NDIS_TAPI_CONFIG_DIALOG;
typedef struct _NDIS_TAPI_GATHER_DIGITS NDIS_TAPI_GATHER_DIGITS;
typedef struct _NDIS_TAPI_GET_CALL_INFO NDIS_TAPI_GET_CALL_INFO;
typedef struct _OFFLOAD_IPSEC_DELETE_SA OFFLOAD_IPSEC_DELETE_SA;
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 *PAM_AC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 *PAM_AC3_BIT_STREAM_MODE;
typedef struct _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;
typedef struct tagCInterfaceStubVtbl *PCInterfaceStubVtblList;
typedef struct _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CRL_ISSUING_DIST_POINT *PCRL_ISSUING_DIST_POINT;
typedef struct _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;
typedef struct _DEV_BROADCAST_VOLUME_A *PDEV_BROADCAST_VOLUME_A;
typedef struct _DEV_BROADCAST_VOLUME_W *PDEV_BROADCAST_VOLUME_W;
typedef struct IDirect3DVolumeTexture8 *PDIRECT3DVOLUMETEXTURE8;
typedef struct _DMO_OUTPUT_DATA_BUFFER *PDMO_OUTPUT_DATA_BUFFER;
typedef struct _DOT11_ASSOCIATION_INFO *PDOT11_ASSOCIATION_INFO;
typedef struct _DOT11_REG_DOMAINS_LIST *PDOT11_REG_DOMAINS_LIST;
typedef struct _DOT11_REG_DOMAIN_VALUE *PDOT11_REG_DOMAIN_VALUE;
typedef struct _structDVD_TEXT_LANGUAGE_UNIT *PDVD_TEXT_LANGUAGE_UNIT;
typedef struct phoneinitializeexparams_tag PHONEINITIALIZEEXPARAMS;
typedef struct _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;
typedef struct LdapReferralCallback *PLDAP_REFERRAL_CALLBACK;
typedef struct _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;
typedef struct _MIB_MFE_STATS_TABLE_EX *PMIB_MFE_STATS_TABLE_EX;
typedef struct _NDISPWR_SAVEPOWERSTATE *PNDISPWR_SAVEPOWERSTATE;
typedef struct _NDIS_802_11_BSSID_LIST *PNDIS_802_11_BSSID_LIST;
typedef struct _NDIS_802_11_REMOVE_KEY *PNDIS_802_11_REMOVE_KEY;
typedef struct _NDIS_802_11_STATISTICS *PNDIS_802_11_STATISTICS;
typedef struct NDIS_BPC_FORCE_RECEIVE *PNDIS_BPC_FORCE_RECEIVE;
typedef struct NDIS_BPC_PROGRAM_GUIDE *PNDIS_BPC_PROGRAM_GUIDE;
typedef struct NDIS_CO_DEVICE_PROFILE *PNDIS_CO_DEVICE_PROFILE;
typedef struct _NDIS_PM_PACKET_PATTERN *PNDIS_PM_PACKET_PATTERN;
typedef struct _NDIS_TAPI_DEV_SPECIFIC *PNDIS_TAPI_DEV_SPECIFIC;
typedef struct _NDIS_TAPI_GET_DEV_CAPS *PNDIS_TAPI_GET_DEV_CAPS;
typedef struct _NDIS_WAN_PROTOCOL_CAPS *PNDIS_WAN_PROTOCOL_CAPS;
typedef struct _PROXY_ADDRCHANGE_PROPS *PPROXY_ADDRCHANGE_PROPS;
typedef struct _PROXY_HTTP_INFORMATION *PPROXY_HTTP_INFORMATION;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _SCATTER_GATHER_ELEMENT *PSCATTER_GATHER_ELEMENT;
typedef struct _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;
typedef struct _SPC_FINANCIAL_CRITERIA *PSPC_FINANCIAL_CRITERIA;
typedef struct _SYSTEM_POWER_STATUS_EX *PSYSTEM_POWER_STATUS_EX;
typedef struct _SecPkgContext_KeyInfoA *PSecPkgContext_KeyInfoA;
typedef struct _SecPkgContext_KeyInfoW *PSecPkgContext_KeyInfoW;
typedef struct _SecPkgContext_Lifespan *PSecPkgContext_Lifespan;
typedef struct _SECURITY_FUNCTION_TABLE_A *PSecurityFunctionTableA;
typedef struct _SECURITY_FUNCTION_TABLE_W *PSecurityFunctionTableW;
typedef struct tcp_reserve_port_range *PTCP_RESERVE_PORT_RANGE;
typedef struct _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;
enum PlayerCompatibilityType {cmDefault = 0x0,cmActiveMovie = 0x1,cmNetShow = 0x2,};
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 RPC_CLIENT_INFORMATION1;
typedef struct _SCH_CRED_SECRET_PRIVKEY SCH_CRED_SECRET_PRIVKEY;
typedef struct _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_POWER_STATUS_EX2 SYSTEM_POWER_STATUS_EX2;
typedef struct _SecPkgContext_UserFlags SecPkgContext_UserFlags;
enum SecureLockIconConstants {secureLockIconUnsecure = 0x0,secureLockIconMixed = 0x1,secureLockIconSecureUnknownBits = 0x2,secureLockIconSecure40Bit = 0x3,secureLockIconSecure56Bit = 0x4,secureLockIconSecureFortezza = 0x5,secureLockIconSecure128Bit = 0x6,};
typedef struct _TRANSPORT_HEADER_OFFSET TRANSPORT_HEADER_OFFSET;
struct UPnPDescriptionDocument;
typedef struct _USB_ENDPOINT_DESCRIPTOR USB_ENDPOINT_DESCRIPTOR;
enum _D3DMATERIALCOLORSOURCE {D3DMCS_MATERIAL = 0x0,D3DMCS_COLOR1 = 0x1,D3DMCS_COLOR2 = 0x2,D3DMCS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVS_ADDRESSMODE_TYPE {D3DVS_ADDRMODE_ABSOLUTE = 0x0,D3DVS_ADDRMODE_RELATIVE = 0x2000,D3DVS_ADDRMODE_FORCE_DWORD = 0x7FFFFFFF,};
enum _DMO_INPUT_STATUS_FLAGS {DMO_INPUT_STATUSF_ACCEPT_DATA = 0x1,};
enum _DOT11_HOP_ALGO_ADOPTED {dot11_hop_algo_current = 0x0,dot11_hop_algo_hop_index = 0x1,dot11_hop_algo_hcc = 0x2,};
enum _ELEMENTNAMESPACE_FLAGS {ELEMENTNAMESPACEFLAGS_ALLOWANYTAG = 0x1,ELEMENTNAMESPACEFLAGS_QUERYFORUNKNOWNTAGS = 0x2,ELEMENTNAMESPACE_FLAGS_Max = 0x7FFFFFFF,};
typedef struct _0B8D1429C3827E0DB460E98487EB6908 _FPIEEE_EXCEPTION_FLAGS;
enum _GET_FILEEX_INFO_LEVELS {GetFileExInfoStandard = 0x0,GetFileExMaxInfoLevel = 0x1,};
enum _HLSHORTCUTF__NOREDEF10 {HLSHORTCUTF_DEFAULT = 0x0,HLSHORTCUTF_DONTACTUALLYCREATE = 0x1,HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 0x2,HLSHORTCUTF_USEUNIQUEFILENAME = 0x4,HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = 0x8,};
enum _HLTRANSLATEF_NOREDEF10 {HLTRANSLATEF_DEFAULT = 0x0,HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 0x1,};
enum _HTML_PAINT_EVENT_FLAGS {HTMLPAINT_EVENT_TARGET = 0x1,HTMLPAINT_EVENT_SETCURSOR = 0x2,HTML_PAINT_EVENT_FLAGS_Max = 0x7FFFFFFF,};
struct _IDirectContainerEvents {struct _IDirectContainerEventsVtbl *lpVtbl;};
enum _NDIS_802_11_POWER_MODE {Ndis802_11PowerModeCAM = 0x0,Ndis802_11PowerModeMAX_PSP = 0x1,Ndis802_11PowerModeFast_PSP = 0x2,Ndis802_11PowerModeMax = 0x3,};
enum _NDIS_802_11_WEP_STATUS {Ndis802_11WEPEnabled = 0x0,Ndis802_11Encryption1Enabled = 0x0,Ndis802_11WEPDisabled = 0x1,Ndis802_11EncryptionDisabled = 0x1,Ndis802_11WEPKeyAbsent = 0x2,Ndis802_11Encryption1KeyAbsent = 0x2,Ndis802_11WEPNotSupported = 0x3,Ndis802_11EncryptionNotSupported = 0x3,Ndis802_11Encryption2Enabled = 0x4,Ndis802_11Encryption2KeyAbsent = 0x5,Ndis802_11Encryption3Enabled = 0x6,Ndis802_11Encryption3KeyAbsent = 0x7,};
enum _NDIS_WAN_HEADER_FORMAT {NdisWanHeaderNative = 0x0,NdisWanHeaderEthernet = 0x1,};
enum _OFFLOAD_INTEGRITY_ALGO {OFFLOAD_IPSEC_INTEGRITY_NONE = 0x0,OFFLOAD_IPSEC_INTEGRITY_MD5 = 0x1,OFFLOAD_IPSEC_INTEGRITY_SHA = 0x2,OFFLOAD_IPSEC_INTEGRITY_MAX = 0x3,};
enum _RPC_NOTIFICATION_TYPES {RpcNotificationTypeNone = 0x0,RpcNotificationTypeEvent = 0x1,RpcNotificationTypeApc = 0x2,RpcNotificationTypeIoc = 0x3,RpcNotificationTypeHwnd = 0x4,RpcNotificationTypeCallback = 0x5,};
enum _SXH_SERVER_CERT_OPTION {SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 0x100,SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 0x200,SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 0x1000,SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 0x2000,SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 0x3300,};
enum _styleListStylePosition {styleListStylePositionNotSet = 0x0,styleListStylePositionInside = 0x1,styleListStylePositionOutSide = 0x2,styleListStylePosition_Max = 0x7FFFFFFF,};
enum _tagAUTOCOMPLETEOPTIONS {ACO_NONE = 0x0,ACO_AUTOSUGGEST = 0x1,ACO_AUTOAPPEND = 0x2,ACO_SEARCH = 0x4,ACO_FILTERPREFIXES = 0x8,ACO_USETAB = 0x10,ACO_UPDOWNKEYDROPSLIST = 0x20,ACO_RTLREADING = 0x40,};
enum _tagNOTIFICATIONMGRMODE {NM_DEFAULT_PROCESS = 0x1,NM_DEFAULT_THREAD = 0x2,};
enum _tagSYNCMGRHANDLERFLAGS {SYNCMGRHANDLER_HASPROPERTIES = 0x1,SYNCMGRHANDLER_MAYESTABLISHCONNECTION = 0x2,SYNCMGRHANDLER_ALWAYSLISTHANDLER = 0x4,};
enum tagDVD_KARAOKE_CONTENTS {DVD_Karaoke_GuideVocal1 = 0x1,DVD_Karaoke_GuideVocal2 = 0x2,DVD_Karaoke_GuideMelody1 = 0x4,DVD_Karaoke_GuideMelody2 = 0x8,DVD_Karaoke_GuideMelodyA = 0x10,DVD_Karaoke_GuideMelodyB = 0x20,DVD_Karaoke_SoundEffectA = 0x40,DVD_Karaoke_SoundEffectB = 0x80,};
enum tagNCPNP_RECONFIG_LAYER {NCRL_NDIS = 0x1,NCRL_TDI = 0x2,};
enum tagNETCONMGR_ENUM_FLAGS {NCME_DEFAULT = 0x0,};
enum tagNETWORK_INSTALL_TIME {NSF_PRIMARYINSTALL = 0x1,NSF_POSTSYSINSTALL = 0x2,};
enum tagNETWORK_UPGRADE_TYPE {NSF_WIN16_UPGRADE = 0x10,NSF_WIN95_UPGRADE = 0x20,NSF_WINNT_WKS_UPGRADE = 0x40,NSF_WINNT_SVR_UPGRADE = 0x80,NSF_WINNT_SBS_UPGRADE = 0x100,NSF_COMPONENT_UPDATE = 0x200,};
enum tagVideoProcAmpProperty {VideoProcAmp_Brightness = 0x0,VideoProcAmp_Contrast = 0x1,VideoProcAmp_Hue = 0x2,VideoProcAmp_Saturation = 0x3,VideoProcAmp_Sharpness = 0x4,VideoProcAmp_Gamma = 0x5,VideoProcAmp_ColorEnable = 0x6,VideoProcAmp_WhiteBalance = 0x7,VideoProcAmp_BacklightCompensation = 0x8,};
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 AM_AC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 AM_AC3_BIT_STREAM_MODE;
typedef struct _CERT_CHAIN_POLICY_PARA CERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS CERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO CERT_SYSTEM_STORE_INFO;
typedef struct _CMSG_CTRL_DECRYPT_PARA CMSG_CTRL_DECRYPT_PARA;
typedef struct contres_vqlpcwaveformat_tag CONTRESVQLPCWAVEFORMAT;
typedef struct _CRL_ISSUING_DIST_POINT CRL_ISSUING_DIST_POINT;
typedef struct _CRYPT_PRIVATE_KEY_INFO CRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY CRYPT_SMIME_CAPABILITY;
typedef struct _D3DADAPTER_IDENTIFIER8 D3DADAPTER_IDENTIFIER8;
typedef struct _DEV_BROADCAST_VOLUME_A DEV_BROADCAST_VOLUME_A;
typedef struct _DEV_BROADCAST_VOLUME_W DEV_BROADCAST_VOLUME_W;
typedef struct _DMO_OUTPUT_DATA_BUFFER DMO_OUTPUT_DATA_BUFFER;
typedef struct _DOT11_ASSOCIATION_INFO DOT11_ASSOCIATION_INFO;
typedef struct _DOT11_REG_DOMAINS_LIST DOT11_REG_DOMAINS_LIST;
typedef struct _DOT11_REG_DOMAIN_VALUE DOT11_REG_DOMAIN_VALUE;
struct DShellFolderViewEvents {struct DShellFolderViewEventsVtbl *lpVtbl;};
typedef struct tagDVD_PLAYBACK_LOCATION2 DVD_PLAYBACK_LOCATION2;
typedef struct _structDVD_TEXT_LANGUAGE_UNIT DVD_TEXT_LANGUAGE_UNIT;
struct DispHTCDefaultDispatch {struct DispHTCDefaultDispatchVtbl *lpVtbl;};
struct DispHTMLCommentElement {struct DispHTMLCommentElementVtbl *lpVtbl;};
struct DispHTMLGenericElement {struct DispHTMLGenericElementVtbl *lpVtbl;};
struct DispHTMLIsIndexElement {struct DispHTMLIsIndexElementVtbl *lpVtbl;};
struct DispHTMLMarqueeElement {struct DispHTMLMarqueeElementVtbl *lpVtbl;};
struct DispHTMLUnknownElement {struct DispHTMLUnknownElementVtbl *lpVtbl;};
typedef struct _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
typedef struct fmtowns_snd_waveformat_tag FMTOWNS_SND_WAVEFORMAT;
typedef void ( *GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);
struct HTMLFormElementEvents2 {struct HTMLFormElementEvents2Vtbl *lpVtbl;};
struct HTMLInputButtonElement;
struct HTMLLinkElementEvents2 {struct HTMLLinkElementEvents2Vtbl *lpVtbl;};
struct HTMLStyleElementEvents {struct HTMLStyleElementEventsVtbl *lpVtbl;};
struct IActiveXSafetyProvider {struct IActiveXSafetyProviderVtbl *lpVtbl;};
struct IAnimationComposerSite {struct IAnimationComposerSiteVtbl *lpVtbl;};
struct IBindStatusCallbackMsg {struct IBindStatusCallbackMsgVtbl *lpVtbl;};
struct IBluetoothAuthenticate {struct IBluetoothAuthenticateVtbl *lpVtbl;};
struct ICommandWithParameters {struct ICommandWithParametersVtbl *lpVtbl;};
struct IDXTFilterBehaviorSite {struct IDXTFilterBehaviorSiteVtbl *lpVtbl;};
struct IDXTRedirectFilterInit {struct IDXTRedirectFilterInitVtbl *lpVtbl;};
struct IDebugExtendedProperty {struct IDebugExtendedPropertyVtbl *lpVtbl;};
struct IDirect3DVertexBuffer8 {struct IDirect3DVertexBuffer8Vtbl *lpVtbl;};
struct IDirectDrawMediaSample {struct IDirectDrawMediaSampleVtbl *lpVtbl;};
struct IDirectDrawMediaStream {struct IDirectDrawMediaStreamVtbl *lpVtbl;};
struct IElementBehaviorLayout {struct IElementBehaviorLayoutVtbl *lpVtbl;};
struct IElementBehaviorRender {struct IElementBehaviorRenderVtbl *lpVtbl;};
struct IElementBehaviorSiteOM {struct IElementBehaviorSiteOMVtbl *lpVtbl;};
struct IElementBehaviorSubmit {struct IElementBehaviorSubmitVtbl *lpVtbl;};
struct IElementNamespaceTable {struct IElementNamespaceTableVtbl *lpVtbl;};
struct IEncodingFilterFactory {struct IEncodingFilterFactoryVtbl *lpVtbl;};
struct IEnumDebugPropertyInfo {struct IEnumDebugPropertyInfoVtbl *lpVtbl;};
struct IEnumNetCfgBindingPath {struct IEnumNetCfgBindingPathVtbl *lpVtbl;};
struct IHTMLDOMImplementation {struct IHTMLDOMImplementationVtbl *lpVtbl;};
struct IHTMLElementCollection {struct IHTMLElementCollectionVtbl *lpVtbl;};
struct IHTMLFiltersCollection {struct IHTMLFiltersCollectionVtbl *lpVtbl;};
struct IHTMLFramesCollection2 {struct IHTMLFramesCollection2Vtbl *lpVtbl;};
struct IHTMLPluginsCollection {struct IHTMLPluginsCollectionVtbl *lpVtbl;};
struct IHTMLTextRangeMetrics2 {struct IHTMLTextRangeMetrics2Vtbl *lpVtbl;};
struct IInstallEngineCallback {struct IInstallEngineCallbackVtbl *lpVtbl;};
typedef struct _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
typedef struct tagIMAP_LISTLSUB_RESPONSE IMAP_LISTLSUB_RESPONSE;
struct IMLangLineBreakConsole {struct IMLangLineBreakConsoleVtbl *lpVtbl;};
struct IMimeEditTagCollection {struct IMimeEditTagCollectionVtbl *lpVtbl;};
typedef struct _6DA6B4B6F4711DFAB548288AAA9B9C99 INTERNET_SECURITY_INFO;
struct INetConnectionCommonUi {struct INetConnectionCommonUiVtbl *lpVtbl;};
struct IObexServiceConnection {struct IObexServiceConnectionVtbl *lpVtbl;};
struct IOleControlNavigation2 {struct IOleControlNavigation2Vtbl *lpVtbl;};
struct IPropFindMultiResponse {struct IPropFindMultiResponseVtbl *lpVtbl;};
struct IRTCClientProvisioning {struct IRTCClientProvisioningVtbl *lpVtbl;};
struct IRTCSessionCallControl {struct IRTCSessionCallControlVtbl *lpVtbl;};
struct ISoapTypeMapperFactory {struct ISoapTypeMapperFactoryVtbl *lpVtbl;};
struct ISubscriptionThrottler {struct ISubscriptionThrottlerVtbl *lpVtbl;};
struct ITIMEElementCollection {struct ITIMEElementCollectionVtbl *lpVtbl;};
struct IXMLDOMEntityReference {struct IXMLDOMEntityReferenceVtbl *lpVtbl;};
typedef struct LdapReferralCallback LDAP_REFERRAL_CALLBACK;
typedef struct linecalltreatmententry_tag LINECALLTREATMENTENTRY;
typedef struct lineinitializeexparams_tag LINEINITIALIZEEXPARAMS;
typedef struct tACMDRVSTREAMINSTANCE *LPACMDRVSTREAMINSTANCE;
typedef struct _DDVIDEOPORTBANDWIDTH *LPDDVIDEOPORTBANDWIDTH;
typedef struct IDDVideoPortContainer *LPDDVIDEOPORTCONTAINER;
typedef struct IDirect3DBaseTexture8 *LPDIRECT3DBASETEXTURE8;
typedef struct IDirect3DCubeTexture8 *LPDIRECT3DCUBETEXTURE8;
typedef struct IDirect3DIndexBuffer8 *LPDIRECT3DINDEXBUFFER8;
typedef IEnumCodeStoreDBEntry *LPENUMCODESTOREDBENTRY;
typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;
typedef IEnumOleDocumentViews *LPENUMOLEDOCUMENTVIEWS;
typedef struct _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;
typedef struct _FILEGROUPDESCRIPTORA *LPFILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW *LPFILEGROUPDESCRIPTORW;
typedef int *LPGLOBALINTERFACETABLE;
typedef struct tagINITCOMMONCONTROLSEX *LPINITCOMMONCONTROLSEX;
typedef struct linemediacontroltone_tag *LPLINEMEDIACONTROLTONE;
typedef IMimeEnumAddressTypes *LPMIMEENUMADDRESSTYPES;
typedef IMimeEnumMessageParts *LPMIMEENUMMESSAGEPARTS;
typedef struct tagNMDATETIMEWMKEYDOWNA *LPNMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW *LPNMDATETIMEWMKEYDOWNW;
typedef IOleControlNavigation *LPOLECONTROLNAVIGATION;
typedef struct _PST_AUTHENTICODEDATA *LPPST_AUTHENTICODEDATA;
typedef struct SDP_LARGE_INTEGER_16 *LPSDP_LARGE_INTEGER_16;
typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;
typedef struct _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;
typedef struct _WSAServiceClassInfoA *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *LPWSASERVICECLASSINFOW;
enum MACRO_ACMDRIVERDETAILS {ACMDRIVERDETAILS_SHORTNAME_CHARS = 32,ACMDRIVERDETAILS_LONGNAME_CHARS = 128,ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80,ACMDRIVERDETAILS_LICENSING_CHARS = 128,ACMDRIVERDETAILS_FEATURES_CHARS = 512,ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC = 1667528033,ACMDRIVERDETAILS_FCCCOMP_UNDEFINED = 0,ACMDRIVERDETAILS_SUPPORTF_CODEC = 1,ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2,ACMDRIVERDETAILS_SUPPORTF_FILTER = 4,ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8,ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16,ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824,ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648,};
enum MACRO_ACMFILTERDETAILS {ACMFILTERDETAILS_FILTER_CHARS = 128,};
enum MACRO_ACMFORMATDETAILS {ACMFORMATDETAILS_FORMAT_CHARS = 128,};
enum MACRO_CACHE_ENTRY_TYPE {CACHE_ENTRY_TYPE_FC = 0x1000,CACHE_ENTRY_MODIFY_DATA_FC = 0x80000000,};
enum MACRO_CATEGORIZE_RANGE {CATEGORIZE_RANGE = 3,};
enum MACRO_CERT_CHAIN_CACHE {CERT_CHAIN_CACHE_END_CERT = 0x1,CERT_CHAIN_THREAD_STORE_SYNC = 0x2,CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 0x4,CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 0x8,CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 0x10,CERT_CHAIN_ENABLE_SHARE_STORE = 0x20,CERT_TRUST_NO_ERROR = 0x0,CERT_TRUST_IS_NOT_TIME_VALID = 0x1,CERT_TRUST_IS_NOT_TIME_NESTED = 0x2,CERT_TRUST_IS_REVOKED = 0x4,CERT_TRUST_IS_NOT_SIGNATURE_VALID = 0x8,CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 0x10,CERT_TRUST_IS_UNTRUSTED_ROOT = 0x20,CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 0x40,CERT_TRUST_IS_CYCLIC = 0x80,CERT_TRUST_INVALID_EXTENSION = 0x100,CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 0x200,CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 0x400,CERT_TRUST_INVALID_NAME_CONSTRAINTS = 0x800,CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 0x1000,CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 0x2000,CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 0x4000,CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 0x8000,CERT_TRUST_IS_OFFLINE_REVOCATION = 0x1000000,CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 0x2000000,CERT_TRUST_IS_PARTIAL_CHAIN = 0x10000,CERT_TRUST_CTL_IS_NOT_TIME_VALID = 0x20000,CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 0x40000,CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 0x80000,CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 0x1,CERT_TRUST_HAS_KEY_MATCH_ISSUER = 0x2,CERT_TRUST_HAS_NAME_MATCH_ISSUER = 0x4,CERT_TRUST_IS_SELF_SIGNED = 0x8,CERT_TRUST_HAS_PREFERRED_ISSUER = 0x100,CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 0x200,CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 0x400,CERT_TRUST_IS_COMPLEX_CHAIN = 0x10000,};
enum MACRO_COREDLL_COREMAIN {COREDLL_COREMAIN = 1,COREDLL_LMEM = 1,COREDLL_THUNKS = 1,COREDLL_FMTMSG = 1,COREDLL_ACCEL_C = 1,COREDLL_RECTAPI = 1,COREDLL_WMGR_C = 1,COREDLL_MGDI_C = 1,COREDLL_SERDEV = 1,COREDLL_FULL_CRT = 1,COREDLL_DEVLOAD = 1,COREDLL_CRYPTHASH = 1,COREDLL_RSA32 = 1,COREDLL_CORESTRW = 1,COREDLL_CORESTRA = 1,COREDLL_SHCORE = 1,COREDLL_PATH = 1,COREDLL_SHORTCUT = 1,COREDLL_SHEXEC = 1,COREDLL_SHMISC = 1,COREDLL_FILEOPEN = 1,COREDLL_FILEINFO = 1,COREDLL_SHELLAPIS = 1,COREDLL_CRT_CPP_SEH = 1,COREDLL_CORELOC = 1,COREDLL_MESSAGEDIALOGBOXTHUNK = 1,COREDLL_CRYPTAPI = 1,COREDLL_MMWAVE = 1,COREDLL_MMSND = 1,COREDLL_MMMIX = 1,COREDLL_CORESIOW = 1,COREDLL_CORESIOA = 1,COREDLL_COREIMM = 1,};
enum MACRO_D3DPTADDRESSCAPS {D3DPTADDRESSCAPS_WRAP = 0x1,D3DPTADDRESSCAPS_MIRROR = 0x2,D3DPTADDRESSCAPS_CLAMP = 0x4,D3DPTADDRESSCAPS_BORDER = 0x8,D3DPTADDRESSCAPS_INDEPENDENTUV = 0x10,D3DPTADDRESSCAPS_MIRRORONCE = 0x20,};
enum MACRO_DB_INVALIDCOLUMN {DB_INVALIDCOLUMN = -1,};
enum MACRO_DB_NULL_HCHAPTER {DB_NULL_HCHAPTER = 0x0,DB_INVALID_HCHAPTER = 0x0,};
enum MACRO_DISPID_IMIMEEDIT {DISPID_IMIMEEDIT_BASE = 100,DISPID_IMIMEEDIT_SRC = 101,DISPID_IMIMEEDIT_STYLE = 102,DISPID_IMIMEEDIT_EDITMODE = 103,DISPID_IMIMEEDIT_MSGSRC = 104,DISPID_IMIMEEDIT_TEXT = 105,DISPID_IMIMEEDIT_HTML = 106,DISPID_IMIMEEDIT_CLEAR = 107,DISPID_IMIMEEDIT_DOCUMENT = 108,};
enum MACRO_EXCEPTION_ACCESS {EXCEPTION_ACCESS_VIOLATION = -1073741819,EXCEPTION_DATATYPE_MISALIGNMENT = -2147483646,EXCEPTION_BREAKPOINT = -2147483645,EXCEPTION_SINGLE_STEP = -2147483644,EXCEPTION_ARRAY_BOUNDS_EXCEEDED = -1073741684,EXCEPTION_FLT_DENORMAL_OPERAND = -1073741683,EXCEPTION_FLT_DIVIDE_BY_ZERO = -1073741682,EXCEPTION_FLT_INEXACT_RESULT = -1073741681,EXCEPTION_FLT_INVALID_OPERATION = -1073741680,EXCEPTION_FLT_OVERFLOW = -1073741679,EXCEPTION_FLT_STACK_CHECK = -1073741678,EXCEPTION_FLT_UNDERFLOW = -1073741677,EXCEPTION_INT_DIVIDE_BY_ZERO = -1073741676,EXCEPTION_INT_OVERFLOW = -1073741675,EXCEPTION_PRIV_INSTRUCTION = -1073741674,EXCEPTION_IN_PAGE_ERROR = -1073741818,EXCEPTION_ILLEGAL_INSTRUCTION = -1073741795,EXCEPTION_NONCONTINUABLE_EXCEPTION = -1073741787,EXCEPTION_STACK_OVERFLOW = -1073741571,EXCEPTION_INVALID_DISPOSITION = -1073741786,EXCEPTION_GUARD_PAGE = -2147483647,EXCEPTION_INVALID_HANDLE = -1073741816,};
enum MACRO_FACILITY_WINDOWS {FACILITY_WINDOWS_CE = 24,FACILITY_WINDOWS = 8,FACILITY_URT = 19,FACILITY_UMI = 22,FACILITY_SXS = 23,FACILITY_STORAGE = 3,FACILITY_SSPI = 9,FACILITY_SCARD = 16,FACILITY_SETUPAPI = 15,FACILITY_SECURITY = 9,FACILITY_RPC = 1,FACILITY_WIN32 = 7,FACILITY_CONTROL = 10,FACILITY_NULL = 0,FACILITY_MSMQ = 14,FACILITY_MEDIASERVER = 13,FACILITY_INTERNET = 12,FACILITY_ITF = 4,FACILITY_HTTP = 25,FACILITY_DPLAY = 21,FACILITY_DISPATCH = 2,FACILITY_CONFIGURATION = 33,FACILITY_COMPLUS = 17,FACILITY_CERT = 11,FACILITY_BACKGROUNDCOPY = 32,FACILITY_ACS = 20,FACILITY_AAF = 18,};
enum MACRO_GENERATE_RECEIPT {GENERATE_RECEIPT_ONLY = 0x10,};
enum MACRO_GOPHER_ATTRIBUTE {GOPHER_ATTRIBUTE_ID_BASE = 0xABCCCC00,GOPHER_CATEGORY_ID_ALL = 0xABCCCC01,GOPHER_CATEGORY_ID_INFO = 0xABCCCC02,GOPHER_CATEGORY_ID_ADMIN = 0xABCCCC03,GOPHER_CATEGORY_ID_VIEWS = 0xABCCCC04,GOPHER_CATEGORY_ID_ABSTRACT = 0xABCCCC05,GOPHER_CATEGORY_ID_VERONICA = 0xABCCCC06,GOPHER_CATEGORY_ID_ASK = 0xABCCCC07,GOPHER_CATEGORY_ID_UNKNOWN = 0xABCCCC08,GOPHER_ATTRIBUTE_ID_ALL = 0xABCCCC09,GOPHER_ATTRIBUTE_ID_ADMIN = 0xABCCCC0A,GOPHER_ATTRIBUTE_ID_MOD_DATE = 0xABCCCC0B,GOPHER_ATTRIBUTE_ID_TTL = 0xABCCCC0C,GOPHER_ATTRIBUTE_ID_SCORE = 0xABCCCC0D,GOPHER_ATTRIBUTE_ID_RANGE = 0xABCCCC0E,GOPHER_ATTRIBUTE_ID_SITE = 0xABCCCC0F,GOPHER_ATTRIBUTE_ID_ORG = 0xABCCCC10,GOPHER_ATTRIBUTE_ID_LOCATION = 0xABCCCC11,GOPHER_ATTRIBUTE_ID_GEOG = 0xABCCCC12,GOPHER_ATTRIBUTE_ID_TIMEZONE = 0xABCCCC13,GOPHER_ATTRIBUTE_ID_PROVIDER = 0xABCCCC14,GOPHER_ATTRIBUTE_ID_VERSION = 0xABCCCC15,GOPHER_ATTRIBUTE_ID_ABSTRACT = 0xABCCCC16,GOPHER_ATTRIBUTE_ID_VIEW = 0xABCCCC17,GOPHER_ATTRIBUTE_ID_TREEWALK = 0xABCCCC18,GOPHER_ATTRIBUTE_ID_UNKNOWN = 0xABCCCC19,};
enum MACRO_IDC_COMMANDBANDS {IDC_COMMANDBANDS = 100,};
enum MACRO_INTERNET_INVALID {INTERNET_INVALID_PORT_NUMBER = 0,INTERNET_DEFAULT_FTP_PORT = 21,INTERNET_DEFAULT_GOPHER_PORT = 70,INTERNET_DEFAULT_HTTP_PORT = 80,INTERNET_DEFAULT_HTTPS_PORT = 443,INTERNET_DEFAULT_SOCKS_PORT = 1080,INTERNET_MAX_HOST_NAME_LENGTH = 256,INTERNET_MAX_USER_NAME_LENGTH = 128,INTERNET_MAX_PASSWORD_LENGTH = 128,INTERNET_MAX_PORT_NUMBER_LENGTH = 5,INTERNET_MAX_PORT_NUMBER_VALUE = 65535,INTERNET_MAX_PATH_LENGTH = 2048,INTERNET_MAX_SCHEME_LENGTH = 32,INTERNET_KEEP_ALIVE_UNKNOWN = 4294967295,INTERNET_KEEP_ALIVE_ENABLED = 1,INTERNET_KEEP_ALIVE_DISABLED = 0,INTERNET_REQFLAG_FROM_CACHE = 1,INTERNET_REQFLAG_ASYNC = 2,INTERNET_REQFLAG_VIA_PROXY = 4,INTERNET_REQFLAG_NO_HEADERS = 8,INTERNET_REQFLAG_PASSIVE = 16,INTERNET_REQFLAG_CACHE_WRITE_DISABLED = 64,INTERNET_REQFLAG_NET_TIMEOUT = 128,INTERNET_FLAG_RELOAD = -2147483648,INTERNET_FLAG_RAW_DATA = 1073741824,INTERNET_FLAG_EXISTING_CONNECT = 536870912,INTERNET_FLAG_ASYNC = 268435456,INTERNET_FLAG_PASSIVE = 134217728,INTERNET_FLAG_NO_CACHE_WRITE = 67108864,INTERNET_FLAG_DONT_CACHE = 67108864,INTERNET_FLAG_MAKE_PERSISTENT = 33554432,INTERNET_FLAG_FROM_CACHE = 16777216,INTERNET_FLAG_OFFLINE = 16777216,INTERNET_FLAG_SECURE = 8388608,INTERNET_FLAG_KEEP_CONNECTION = 4194304,INTERNET_FLAG_NO_AUTO_REDIRECT = 2097152,INTERNET_FLAG_READ_PREFETCH = 1048576,INTERNET_FLAG_NO_COOKIES = 524288,INTERNET_FLAG_NO_AUTH = 262144,INTERNET_FLAG_RESTRICTED_ZONE = 131072,INTERNET_FLAG_CACHE_IF_NET_FAIL = 65536,INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP = 32768,INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS = 16384,INTERNET_FLAG_IGNORE_CERT_DATE_INVALID = 8192,INTERNET_FLAG_IGNORE_CERT_CN_INVALID = 4096,INTERNET_FLAG_RESYNCHRONIZE = 2048,INTERNET_FLAG_HYPERLINK = 1024,INTERNET_FLAG_NO_UI = 512,INTERNET_FLAG_PRAGMA_NOCACHE = 256,INTERNET_FLAG_CACHE_ASYNC = 128,INTERNET_FLAG_FORMS_SUBMIT = 64,INTERNET_FLAG_FWD_BACK = 32,INTERNET_FLAG_NEED_FILE = 16,INTERNET_FLAG_MUST_CACHE_REQUEST = 16,};
enum MACRO_INTERNET_RFC1123 {INTERNET_RFC1123_FORMAT = 0,INTERNET_RFC1123_BUFSIZE = 30,};
enum MACRO_INTERNET_SERVICE {INTERNET_SERVICE_FTP = 1,INTERNET_SERVICE_GOPHER = 2,INTERNET_SERVICE_HTTP = 3,};
enum MACRO_IOCTL_NDIS_POWER {IOCTL_NDIS_POWER_RESUME = 1507362,IOCTL_NDIS_REGISTER_ADAPTER = 1507366,IOCTL_NDIS_DEREGISTER_ADAPTER = 1507370,IOCTL_NDIS_REBIND_ADAPTER = 1507374,IOCTL_NDIS_BIND_ADAPTER = 1507378,IOCTL_NDIS_UNBIND_ADAPTER = 1507382,IOCTL_NDIS_GET_ADAPTER_NAMES = 1507386,IOCTL_NDIS_GET_PROTOCOL_NAMES = 1507390,IOCTL_NDIS_GET_ADAPTER_BINDINGS = 1507394,IOCTL_NDIS_LOAD_MINIPORT = 1507398,IOCTL_NDIS_GET_VERSION = 1507402,IOCTL_NDIS_LOAD_RETAIL_LOGGER = 1507406,IOCTL_NDIS_UNLOAD_RETAIL_LOGGER = 1507410,};
enum MACRO_I_INDENTCALLBACK {I_INDENTCALLBACK = -1,};
enum MACRO_KeyShiftDeadFlag {KeyShiftDeadFlag = 0x20000,};
enum MACRO_LINEADDRCAPFLAGS {LINEADDRCAPFLAGS_FWDNUMRINGS = 0x1,LINEADDRCAPFLAGS_PICKUPGROUPID = 0x2,LINEADDRCAPFLAGS_SECURE = 0x4,LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 0x8,LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 0x10,LINEADDRCAPFLAGS_DIALED = 0x20,LINEADDRCAPFLAGS_ORIGOFFHOOK = 0x40,LINEADDRCAPFLAGS_DESTOFFHOOK = 0x80,LINEADDRCAPFLAGS_FWDCONSULT = 0x100,LINEADDRCAPFLAGS_SETUPCONFNULL = 0x200,LINEADDRCAPFLAGS_AUTORECONNECT = 0x400,LINEADDRCAPFLAGS_COMPLETIONID = 0x800,LINEADDRCAPFLAGS_TRANSFERHELD = 0x1000,LINEADDRCAPFLAGS_TRANSFERMAKE = 0x2000,LINEADDRCAPFLAGS_CONFERENCEHELD = 0x4000,LINEADDRCAPFLAGS_CONFERENCEMAKE = 0x8000,LINEADDRCAPFLAGS_PARTIALDIAL = 0x10000,LINEADDRCAPFLAGS_FWDSTATUSVALID = 0x20000,LINEADDRCAPFLAGS_FWDINTEXTADDR = 0x40000,LINEADDRCAPFLAGS_FWDBUSYNAADDR = 0x80000,LINEADDRCAPFLAGS_ACCEPTTOALERT = 0x100000,LINEADDRCAPFLAGS_CONFDROP = 0x200000,LINEADDRCAPFLAGS_PICKUPCALLWAIT = 0x400000,LINEADDRCAPFLAGS_PREDICTIVEDIALER = 0x800000,LINEADDRCAPFLAGS_QUEUE = 0x1000000,LINEADDRCAPFLAGS_ROUTEPOINT = 0x2000000,LINEADDRCAPFLAGS_HOLDMAKESNEW = 0x4000000,LINEADDRCAPFLAGS_NOINTERNALCALLS = 0x8000000,LINEADDRCAPFLAGS_NOEXTERNALCALLS = 0x10000000,LINEADDRCAPFLAGS_SETCALLINGID = 0x20000000,};
enum MACRO_LINEADDRESSSTATE {LINEADDRESSSTATE_OTHER = 0x1,LINEADDRESSSTATE_DEVSPECIFIC = 0x2,LINEADDRESSSTATE_INUSEZERO = 0x4,LINEADDRESSSTATE_INUSEONE = 0x8,LINEADDRESSSTATE_INUSEMANY = 0x10,LINEADDRESSSTATE_NUMCALLS = 0x20,LINEADDRESSSTATE_FORWARD = 0x40,LINEADDRESSSTATE_TERMINALS = 0x80,LINEADDRESSSTATE_CAPSCHANGE = 0x100,};
enum MACRO_LINEAGENTFEATURE {LINEAGENTFEATURE_SETAGENTGROUP = 0x1,LINEAGENTFEATURE_SETAGENTSTATE = 0x2,LINEAGENTFEATURE_SETAGENTACTIVITY = 0x4,LINEAGENTFEATURE_AGENTSPECIFIC = 0x8,LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 0x10,LINEAGENTFEATURE_GETAGENTGROUP = 0x20,};
enum MACRO_LINECALLFEATURE2 {LINECALLFEATURE2_NOHOLDCONFERENCE = 0x1,LINECALLFEATURE2_ONESTEPTRANSFER = 0x2,LINECALLFEATURE2_COMPLCAMPON = 0x4,LINECALLFEATURE2_COMPLCALLBACK = 0x8,LINECALLFEATURE2_COMPLINTRUDE = 0x10,LINECALLFEATURE2_COMPLMESSAGE = 0x20,LINECALLFEATURE2_TRANSFERNORM = 0x40,LINECALLFEATURE2_TRANSFERCONF = 0x80,LINECALLFEATURE2_PARKDIRECT = 0x100,LINECALLFEATURE2_PARKNONDIRECT = 0x200,};
enum MACRO_LINEDIALTONEMODE {LINEDIALTONEMODE_NORMAL = 0x1,LINEDIALTONEMODE_SPECIAL = 0x2,LINEDIALTONEMODE_INTERNAL = 0x4,LINEDIALTONEMODE_EXTERNAL = 0x8,LINEDIALTONEMODE_UNKNOWN = 0x10,LINEDIALTONEMODE_UNAVAIL = 0x20,};
enum MACRO_LINEGENERATETERM {LINEGENERATETERM_DONE = 0x1,LINEGENERATETERM_CANCEL = 0x2,};
enum MACRO_LINEMEDIACONTROL {LINEMEDIACONTROL_NONE = 0x1,LINEMEDIACONTROL_START = 0x2,LINEMEDIACONTROL_RESET = 0x4,LINEMEDIACONTROL_PAUSE = 0x8,LINEMEDIACONTROL_RESUME = 0x10,LINEMEDIACONTROL_RATEUP = 0x20,LINEMEDIACONTROL_RATEDOWN = 0x40,LINEMEDIACONTROL_RATENORMAL = 0x80,LINEMEDIACONTROL_VOLUMEUP = 0x100,LINEMEDIACONTROL_VOLUMEDOWN = 0x200,LINEMEDIACONTROL_VOLUMENORMAL = 0x400,};
enum MACRO_LINEOFFERINGMODE {LINEOFFERINGMODE_ACTIVE = 0x1,LINEOFFERINGMODE_INACTIVE = 0x2,};
enum MACRO_LINEPROXYREQUEST {LINEPROXYREQUEST_SETAGENTGROUP = 0x1,LINEPROXYREQUEST_SETAGENTSTATE = 0x2,LINEPROXYREQUEST_SETAGENTACTIVITY = 0x3,LINEPROXYREQUEST_GETAGENTCAPS = 0x4,LINEPROXYREQUEST_GETAGENTSTATUS = 0x5,LINEPROXYREQUEST_AGENTSPECIFIC = 0x6,LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 0x7,LINEPROXYREQUEST_GETAGENTGROUPLIST = 0x8,};
enum MACRO_LINETRANSFERMODE {LINETRANSFERMODE_TRANSFER = 0x1,LINETRANSFERMODE_CONFERENCE = 0x2,};
enum MACRO_LVN_ITEMCHANGING {LVN_ITEMCHANGING = -100,LVN_ITEMCHANGED = -101,LVN_INSERTITEM = -102,LVN_DELETEITEM = -103,LVN_DELETEALLITEMS = -104,LVN_BEGINLABELEDITA = -105,LVN_BEGINLABELEDITW = -175,LVN_ENDLABELEDITA = -106,LVN_ENDLABELEDITW = -176,LVN_COLUMNCLICK = -108,LVN_BEGINDRAG = -109,LVN_BEGINRDRAG = -111,LVN_ODCACHEHINT = -113,LVN_ODFINDITEMA = -152,LVN_ODFINDITEMW = -179,LVN_ITEMACTIVATE = -114,LVN_ODSTATECHANGED = -115,LVN_ODFINDITEM = -152,LVN_GETDISPINFOA = -150,LVN_GETDISPINFOW = -177,LVN_SETDISPINFOA = -151,LVN_SETDISPINFOW = -178,LVN_BEGINLABELEDIT = -105,LVN_ENDLABELEDIT = -106,LVN_GETDISPINFO = -150,LVN_SETDISPINFO = -151,};
enum MACRO_LmCharSetUNICODE {LmCharSetUNICODE = 0xFF,};
enum MACRO_MARSHALINTERFACE {MARSHALINTERFACE_MIN = 500,};
enum MACRO_MAXGETHOSTSTRUCT {MAXGETHOSTSTRUCT = 1024,};
enum MACRO_MIDIPROP_PROPVAL {MIDIPROP_PROPVAL = 0x3FFFFFFF,};
enum MACRO_MULTIFILEOPENORD {MULTIFILEOPENORD = 1537,};
enum MACRO_NEWFILEOPENV2ORD {NEWFILEOPENV2ORD = 1552,};
enum MACRO_PHONEBUTTONSTATE {PHONEBUTTONSTATE_UP = 0x1,PHONEBUTTONSTATE_DOWN = 0x2,PHONEBUTTONSTATE_UNKNOWN = 0x4,PHONEBUTTONSTATE_UNAVAIL = 0x8,};
enum MACRO_PHONESTATUSFLAGS {PHONESTATUSFLAGS_CONNECTED = 0x1,PHONESTATUSFLAGS_SUSPENDED = 0x2,};
enum MACRO_PRIVACY_TEMPLATE {PRIVACY_TEMPLATE_NO_COOKIES = 0,PRIVACY_TEMPLATE_HIGH = 1,PRIVACY_TEMPLATE_MEDIUM_HIGH = 2,PRIVACY_TEMPLATE_MEDIUM = 3,PRIVACY_TEMPLATE_MEDIUM_LOW = 4,PRIVACY_TEMPLATE_LOW = 5,PRIVACY_TEMPLATE_CUSTOM = 100,PRIVACY_TEMPLATE_ADVANCED = 101,PRIVACY_TEMPLATE_MAX = 5,PRIVACY_TYPE_FIRST_PARTY = 0,PRIVACY_TYPE_THIRD_PARTY = 1,};
enum MACRO_QPARSE_E_INVALID {QPARSE_E_INVALID_QUERY = 0x8004167A,QPARSE_E_INVALID_RANKMETHOD = 0x8004167B,};
enum MACRO_QUERY_SORTASCEND {QUERY_SORTASCEND = 0,QUERY_SORTDESCEND = 1,QUERY_SORTXASCEND = 2,QUERY_SORTXDESCEND = 3,QUERY_SORTDEFAULT = 4,};
enum MACRO_RBN_HEIGHTCHANGE {RBN_HEIGHTCHANGE = -831,RBN_LAYOUTCHANGED = -833,RBN_AUTOSIZE = -834,RBN_BEGINDRAG = -835,RBN_ENDDRAG = -836,};
enum MACRO_SECPKG_CRED_ATTR {SECPKG_CRED_ATTR_NAMES = 1,SECPKG_ATTR_SIZES = 0,SECPKG_ATTR_NAMES = 1,SECPKG_ATTR_LIFESPAN = 2,SECPKG_ATTR_DCE_INFO = 3,SECPKG_ATTR_STREAM_SIZES = 4,SECPKG_ATTR_KEY_INFO = 5,SECPKG_ATTR_AUTHORITY = 6,SECPKG_ATTR_PROTO_INFO = 7,SECPKG_ATTR_PASSWORD_EXPIRY = 8,SECPKG_ATTR_SESSION_KEY = 9,SECPKG_ATTR_PACKAGE_INFO = 10,SECPKG_ATTR_USER_FLAGS = 11,SECPKG_ATTR_NEGOTIATION_INFO = 12,SECPKG_ATTR_NATIVE_NAMES = 13,SECPKG_ATTR_FLAGS = 14,SECPKG_NEGOTIATION_COMPLETE = 0,SECPKG_NEGOTIATION_OPTIMISTIC = 1,SECPKG_NEGOTIATION_IN_PROGRESS = 2,SECPKG_NEGOTIATION_DIRECT = 3,SECPKG_ATTR_GROUP_NAMES = 30,};
enum MACRO_SECURITY_DYNAMIC {SECURITY_DYNAMIC_TRACKING = 1,SECURITY_STATIC_TRACKING = 0,};
enum MACRO_SECURITY_SUPPORT {SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION = 1,};
enum MACRO_SERVICE_MULTIPLE {SERVICE_MULTIPLE = 0x1,};
enum MACRO_SHCNE_RENAMEITEM {SHCNE_RENAMEITEM = 0x1,SHCNE_CREATE = 0x2,SHCNE_DELETE = 0x4,SHCNE_MKDIR = 0x8,SHCNE_RMDIR = 0x10,SHCNE_MEDIAINSERTED = 0x20,SHCNE_MEDIAREMOVED = 0x40,SHCNE_DRIVEREMOVED = 0x80,SHCNE_DRIVEADD = 0x100,SHCNE_NETSHARE = 0x200,SHCNE_NETUNSHARE = 0x400,SHCNE_ATTRIBUTES = 0x800,SHCNE_UPDATEDIR = 0x1000,SHCNE_UPDATEITEM = 0x2000,SHCNE_SERVERDISCONNECT = 0x4000,SHCNE_UPDATEIMAGE = 0x8000,SHCNE_DRIVEADDGUI = 0x10000,SHCNE_RENAMEFOLDER = 0x20000,SHCNE_FREESPACE = 0x40000,SHCNE_EXTENDED_EVENT = 0x4000000,SHCNE_ASSOCCHANGED = 0x8000000,SHCNE_DISKEVENTS = 0x2381F,SHCNE_GLOBALEVENTS = 0xC0581E0,SHCNE_ALLEVENTS = 0x7FFFFFFF,SHCNE_INTERRUPT = 0x80000000,};
enum MACRO_SUPPRESS_RECEIPT {SUPPRESS_RECEIPT = 0x1,};
enum MACRO_SYNCMGRITEMSTATE {SYNCMGRITEMSTATE_UNCHECKED = 0x0,SYNCMGRITEMSTATE_CHECKED = 0x1,};
enum MACRO_TB_GETBUTTONINFO {TB_GETBUTTONINFO = 1089,TB_SETBUTTONINFO = 1090,TB_INSERTBUTTON = 1045,TB_ADDBUTTONS = 1044,};
enum MACRO_TB_GETBUTTONTEXT {TB_GETBUTTONTEXT = 1069,TB_SAVERESTORE = 1050,TB_ADDSTRING = 1052,};
enum MACRO_TTN_GETDISPINFOA {TTN_GETDISPINFOA = -520,TTN_GETDISPINFOW = -530,TTN_SHOW = -521,TTN_POP = -522,TTN_GETDISPINFO = -520,TTN_NEEDTEXT = -520,TTN_NEEDTEXTA = -520,TTN_NEEDTEXTW = -530,};
enum MACRO_TVM_SETIMAGELIST {TVM_SETIMAGELIST = 4361,TVM_GETNEXTITEM = 4362,};
enum MACRO_TVN_GETDISPINFOA {TVN_GETDISPINFOA = -403,TVN_GETDISPINFOW = -452,TVN_SETDISPINFOA = -404,TVN_SETDISPINFOW = -453,};
enum MACRO_TVN_SELCHANGINGA {TVN_SELCHANGINGA = -401,TVN_SELCHANGINGW = -450,TVN_SELCHANGEDA = -402,TVN_SELCHANGEDW = -451,};
enum MACRO_VARIANT_CALENDAR {VARIANT_CALENDAR_HIJRI = 8,};
enum MACRO_WAVE_FORMAT_G726 {WAVE_FORMAT_G726_ADPCM = 0x64,WAVE_FORMAT_G722_ADPCM = 0x65,WAVE_FORMAT_DSAT = 0x66,WAVE_FORMAT_DSAT_DISPLAY = 0x67,WAVE_FORMAT_SOFTSOUND = 0x80,WAVE_FORMAT_RHETOREX_ADPCM = 0x100,WAVE_FORMAT_CREATIVE_ADPCM = 0x200,WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 0x202,WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 0x203,WAVE_FORMAT_QUARTERDECK = 0x220,WAVE_FORMAT_FM_TOWNS_SND = 0x300,WAVE_FORMAT_BTV_DIGITAL = 0x400,WAVE_FORMAT_OLIGSM = 0x1000,WAVE_FORMAT_OLIADPCM = 0x1001,WAVE_FORMAT_OLICELP = 0x1002,WAVE_FORMAT_OLISBC = 0x1003,WAVE_FORMAT_OLIOPR = 0x1004,WAVE_FORMAT_LH_CODEC = 0x1100,WAVE_FORMAT_NORRIS = 0x1400,WAVE_FORMAT_DEVELOPMENT = 0xFFFF,};
enum MACRO_X509_CERTIFICATE {X509_CERTIFICATE_TEMPLATE = 64,};
enum MACRO_ckidAVIEXTHEADER {ckidAVIEXTHEADER = 1751936356,};
enum MACRO_ckidSTREAMFORMAT {ckidSTREAMFORMAT = 1718776947,};
enum MACRO_ckidSTREAMHEADER {ckidSTREAMHEADER = 1752331379,};
enum MACRO_grfdexPropCanAll {grfdexPropCanAll = 5397,grfdexPropCannotAll = 10794,};
enum MACRO_listtypeAVIMOVIE {listtypeAVIMOVIE = 1769369453,};
typedef struct _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
typedef struct _MIB_MFE_STATS_TABLE_EX MIB_MFE_STATS_TABLE_EX;
enum MPDisplayModeConstants {mpTime = 0x0,mpFrames = 0x1,};
enum MPDisplaySizeConstants {mpDefaultSize = 0x0,mpHalfSize = 0x1,mpDoubleSize = 0x2,mpFullScreen = 0x3,mpFitToSize = 0x4,mpOneSixteenthScreen = 0x5,mpOneFourthScreen = 0x6,mpOneHalfScreen = 0x7,};
typedef struct tagNATLANGUAGERESTRICTION NATLANGUAGERESTRICTION;
typedef struct _NDISPWR_SAVEPOWERSTATE NDISPWR_SAVEPOWERSTATE;
typedef struct _NDIS_802_11_BSSID_LIST NDIS_802_11_BSSID_LIST;
typedef struct _NDIS_802_11_REMOVE_KEY NDIS_802_11_REMOVE_KEY;
typedef struct _NDIS_802_11_STATISTICS NDIS_802_11_STATISTICS;
typedef struct _NDIS_PM_PACKET_PATTERN NDIS_PM_PACKET_PATTERN;
typedef struct _NDIS_TAPI_DEV_SPECIFIC NDIS_TAPI_DEV_SPECIFIC;
typedef struct _NDIS_TAPI_GET_DEV_CAPS NDIS_TAPI_GET_DEV_CAPS;
typedef struct _NDIS_WAN_PROTOCOL_CAPS NDIS_WAN_PROTOCOL_CAPS;
typedef struct tagNMDATETIMEFORMATQUERYA NMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW NMDATETIMEFORMATQUERYW;
typedef struct nms_vbxadpcmmwaveformat_tag NMS_VBXADPCMWAVEFORMAT;
enum NSWarningTypeConstants {nsNoAudioDevice = 0x0,nsUnknownStreamFormat = 0x1,nsPlaylistItemFailure = 0x2,nsVideoNotRendered = 0x3,nsAudioNotRendered = 0x4,nsMissingCodec = 0x5,};
typedef struct _ACTRL_PROPERTY_ENTRYA *PACTRL_PROPERTY_ENTRYA;
typedef struct _ACTRL_PROPERTY_ENTRYW *PACTRL_PROPERTY_ENTRYW;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 *PAM_AC3_DIALOGUE_LEVEL;
typedef struct _BTHNS_RESTRICTIONBLOB *PBTHNS_RESTRICTIONBLOB;
typedef struct _CARD_EVENT_MASK_PARMS *PCARD_EVENT_MASK_PARMS;
typedef struct __CEL_MEMTRACK_BASELINE *PCEL_MEMTRACK_BASELINE;
typedef struct __CEL_PROCESS_TERMINATE *PCEL_PROCESS_TERMINATE;
typedef struct _CERT_CRL_CONTEXT_PAIR *PCERT_CRL_CONTEXT_PAIR;
typedef struct _CO_TAPI_TRANSLATE_SAP *PCO_TAPI_TRANSLATE_SAP;
typedef struct _CREDENTIAL_ATTRIBUTEA *PCREDENTIAL_ATTRIBUTEA;
typedef struct _CREDENTIAL_ATTRIBUTEW *PCREDENTIAL_ATTRIBUTEW;
typedef struct _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY *PCRYPT_TRUST_REG_ENTRY;
typedef struct _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;
typedef struct IDirect3DVertexBuffer8 *PDIRECT3DVERTEXBUFFER8;
typedef struct _DMO_PARTIAL_MEDIATYPE *PDMO_PARTIAL_MEDIATYPE;
typedef struct _DOT11_AP_JOIN_REQUEST *PDOT11_AP_JOIN_REQUEST;
typedef struct _DOT11_BSS_DESCRIPTION *PDOT11_BSS_DESCRIPTION;
typedef struct _DOT11_POWER_MGMT_MODE *PDOT11_POWER_MGMT_MODE;
typedef struct _structDVD_AUDIO_STREAM_ATTR *PDVD_AUDIO_STREAM_ATTR;
typedef void (*PFAST_IO_DETACH_DEVICE)(struct _DEVICE_OBJECT *SourceDevice, struct _DEVICE_OBJECT *TargetDevice);
typedef struct _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;
typedef struct _IP_MCAST_COUNTER_INFO *PIP_MCAST_COUNTER_INFO;
typedef struct ip_option_information *PIP_OPTION_INFORMATION;
typedef struct _NDIS_LINE_TRANSLATE_OUTPUT *PLINE_TRANSLATE_OUTPUT;
typedef struct _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;
typedef struct _MIB_IPMCAST_MFE_STATS *PMIB_IPMCAST_MFE_STATS;
typedef struct _MIB_IPMCAST_OIF_STATS *PMIB_IPMCAST_OIF_STATS;
typedef IMimeEditTagCollection *PMIMEEDITTAGCOLLECTION;
typedef struct _NDISUIO_QUERY_BINDING *PNDISUIO_QUERY_BINDING;
typedef struct _NDIS_802_11_FIXED_IEs *PNDIS_802_11_FIXED_IEs;
typedef struct _NDIS_BPC_ADAPTER_CAPS *PNDIS_BPC_ADAPTER_CAPS;
typedef struct _NDIS_IRDA_PACKET_INFO *PNDIS_IRDA_PACKET_INFO;
typedef struct _NDIS_PNP_CAPABILITIES *PNDIS_PNP_CAPABILITIES;
typedef struct _NDIS_STATISTICS_VALUE *PNDIS_STATISTICS_VALUE;
typedef struct _NDIS_TAPI_SECURE_CALL *PNDIS_TAPI_SECURE_CALL;
typedef struct _POWER_DEVICE_TIMEOUTS *PPOWER_DEVICE_TIMEOUTS;
typedef struct _PROXY_ADDRCHANGE_PROPS PROXY_ADDRCHANGE_PROPS;
typedef struct _PROXY_HTTP_INFORMATION PROXY_HTTP_INFORMATION;
typedef struct _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;
typedef struct SDP_ULARGE_INTEGER_16 *PSDP_ULARGE_INTEGER_16;
typedef struct _SPC_SERIALIZED_OBJECT *PSPC_SERIALIZED_OBJECT;
typedef struct _SecPkgContext_DceInfo *PSecPkgContext_DceInfo;
typedef struct _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;
typedef struct _USB_COMMON_DESCRIPTOR *PUSB_COMMON_DESCRIPTOR;
typedef struct _USB_DEVICE_DESCRIPTOR *PUSB_DEVICE_DESCRIPTOR;
typedef struct _USB_STRING_DESCRIPTOR *PUSB_STRING_DESCRIPTOR;
typedef struct WINTRUST_CATALOG_INFO_ *PWINTRUST_CATALOG_INFO;
typedef struct _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
enum RTC_MEDIA_EVENT_REASON {RTCMER_NORMAL = 0x0,RTCMER_HOLD = 0x1,RTCMER_TIMEOUT = 0x2,RTCMER_BAD_DEVICE = 0x3,RTCMER_NO_PORT = 0x4,RTCMER_PORT_MAPPING_FAILED = 0x5,RTCMER_REMOTE_REQUEST = 0x6,};
enum RTC_OFFER_WATCHER_MODE {RTCOWM_OFFER_WATCHER_EVENT = 0x0,RTCOWM_AUTOMATICALLY_ADD_WATCHER = 0x1,};
enum RTC_PROFILE_EVENT_TYPE {RTCPFET_PROFILE_GET = 0x0,RTCPFET_PROFILE_UPDATE = 0x1,};
enum RTC_REGISTRATION_STATE {RTCRS_NOT_REGISTERED = 0x0,RTCRS_REGISTERING = 0x1,RTCRS_REGISTERED = 0x2,RTCRS_REJECTED = 0x3,RTCRS_UNREGISTERING = 0x4,RTCRS_ERROR = 0x5,RTCRS_LOGGED_OFF = 0x6,RTCRS_LOCAL_PA_LOGGED_OFF = 0x7,RTCRS_REMOTE_PA_LOGGED_OFF = 0x8,};
enum RTC_ROAMING_EVENT_TYPE {RTCRET_BUDDY_ROAMING = 0x0,RTCRET_WATCHER_ROAMING = 0x1,RTCRET_PRESENCE_ROAMING = 0x2,RTCRET_PROFILE_ROAMING = 0x3,RTCRET_WPENDING_ROAMING = 0x4,};
enum RTC_USER_SEARCH_COLUMN {RTCUSC_URI = 0x0,RTCUSC_DISPLAYNAME = 0x1,RTCUSC_TITLE = 0x2,RTCUSC_OFFICE = 0x3,RTCUSC_PHONE = 0x4,RTCUSC_COMPANY = 0x5,RTCUSC_CITY = 0x6,RTCUSC_STATE = 0x7,RTCUSC_COUNTRY = 0x8,RTCUSC_EMAIL = 0x9,};
enum RTC_WATCHER_EVENT_TYPE {RTCWET_WATCHER_ADD = 0x0,RTCWET_WATCHER_REMOVE = 0x1,RTCWET_WATCHER_UPDATE = 0x2,RTCWET_WATCHER_OFFERING = 0x3,RTCWET_WATCHER_ROAMED = 0x4,};
enum RTC_WATCHER_MATCH_MODE {RTCWMM_EXACT_MATCH = 0x0,RTCWMM_BEST_ACE_MATCH = 0x1,};
typedef struct _SCATTER_GATHER_ELEMENT SCATTER_GATHER_ELEMENT;
typedef struct _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
typedef struct _SPC_FINANCIAL_CRITERIA SPC_FINANCIAL_CRITERIA;
typedef struct _tagSYNC_HANDLER_ITEM_INFO SYNC_HANDLER_ITEM_INFO;
typedef struct _SYSTEM_POWER_STATUS_EX SYSTEM_POWER_STATUS_EX;
typedef struct _SecPkgContext_KeyInfoA SecPkgContext_KeyInfoA;
typedef struct _SecPkgContext_KeyInfoW SecPkgContext_KeyInfoW;
typedef struct _SecPkgContext_Lifespan SecPkgContext_Lifespan;
typedef struct _SECURITY_FUNCTION_TABLE_A SecurityFunctionTableA;
typedef struct _SECURITY_FUNCTION_TABLE_W SecurityFunctionTableW;
enum ShellFolderViewOptions {SFVVO_SHOWALLOBJECTS = 0x1,SFVVO_SHOWEXTENSIONS = 0x2,SFVVO_SHOWCOMPCOLOR = 0x8,SFVVO_SHOWSYSFILES = 0x20,SFVVO_WIN95CLASSIC = 0x40,SFVVO_DOUBLECLICKINWEBVIEW = 0x80,SFVVO_DESKTOPHTML = 0x200,};
typedef struct tcp_reserve_port_range TCP_RESERVE_PORT_RANGE;
typedef struct _WIN_TRUST_SUBJECT_FILE WIN_TRUST_SUBJECT_FILE;
typedef struct _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
typedef struct yamaha_adpmcwaveformat_tag YAMAHA_ADPCMWAVEFORMAT;
enum _ACL_INFORMATION_CLASS {AclRevisionInformation = 0x1,AclSizeInformation = 0x2,};
enum _AMRESCTL_RESERVEFLAGS {AMRESCTL_RESERVEFLAGS_RESERVE = 0x0,AMRESCTL_RESERVEFLAGS_UNRESERVE = 0x1,};
enum _AMVP_SELECT_FORMAT_BY {AMVP_DO_NOT_CARE = 0x0,AMVP_BEST_BANDWIDTH = 0x1,AMVP_INPUT_SAME_AS_OUTPUT = 0x2,};
enum _CM_ERROR_CONTROL_TYPE {IgnoreError = 0x0,NormalError = 0x1,SevereError = 0x2,CriticalError = 0x3,};
enum _D3DDEBUGMONITORTOKENS {D3DDMT_ENABLE = 0x0,D3DDMT_DISABLE = 0x1,D3DDMT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTRANSFORMSTATETYPE {D3DTS_VIEW = 0x2,D3DTS_PROJECTION = 0x3,D3DTS_TEXTURE0 = 0x10,D3DTS_TEXTURE1 = 0x11,D3DTS_TEXTURE2 = 0x12,D3DTS_TEXTURE3 = 0x13,D3DTS_TEXTURE4 = 0x14,D3DTS_TEXTURE5 = 0x15,D3DTS_TEXTURE6 = 0x16,D3DTS_TEXTURE7 = 0x17,D3DTS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVS_RASTOUT_OFFSETS {D3DSRO_POSITION = 0x0,D3DSRO_FOG = 0x1,D3DSRO_POINT_SIZE = 0x2,D3DSRO_FORCE_DWORD = 0x7FFFFFFF,};
enum _DOT11_SMT_NOTIFY_TYPE {dot11_smt_notify_type_dissassociate = 0x1,dot11_smt_notify_type_deauthenticate = 0x2,dot11_smt_notify_type_authenticate_fail = 0x3,};
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,ExceptionExecuteHandler = 0x4,};
enum _HTML_PAINT_DRAW_FLAGS {HTMLPAINT_DRAW_UPDATEREGION = 0x1,HTMLPAINT_DRAW_USE_XFORM = 0x2,HTML_PAINT_DRAW_FLAGS_Max = 0x7FFFFFFF,};
enum _NDIS_802_5_RING_STATE {NdisRingStateOpened = 0x1,NdisRingStateClosed = 0x2,NdisRingStateOpening = 0x3,NdisRingStateClosing = 0x4,NdisRingStateOpenFailure = 0x5,NdisRingStateRingFailure = 0x6,};
struct _SearchAssistantEvents {struct _SearchAssistantEventsVtbl *lpVtbl;};
struct _SecPkgContext_DceInfo {unsigned int AuthzSvc;void *pPac;};
enum __MIDL_IDVDDomain_0001 {DVD_FP_DOM = 0x0,DVD_VMGM_DOM = 0x1,DVD_VTSM_DOM = 0x2,DVD_TT_DOM = 0x3,};
enum __MIDL_IHlinkSite_0001 {HLINKWHICHMK_CONTAINER = 0x1,HLINKWHICHMK_BASE = 0x2,};
enum __MIDL_IProxyInfo_0001 {pioHTTPPROXY = 0x0,pioWAPGATEWAY = 0x1,};
enum _styleBackgroundRepeat {styleBackgroundRepeatRepeat = 0x0,styleBackgroundRepeatRepeatX = 0x1,styleBackgroundRepeatRepeatY = 0x2,styleBackgroundRepeatNoRepeat = 0x3,styleBackgroundRepeatNotSet = 0x4,styleBackgroundRepeat_Max = 0x7FFFFFFF,};
enum _tagSYNCMGRINVOKEFLAGS {SYNCMGRINVOKE_STARTSYNC = 0x2,SYNCMGRINVOKE_MINIMIZED = 0x4,};
enum tagAM_MEDIAEVENT_FLAGS {AM_MEDIAEVENT_NONOTIFY = 0x1,};
enum tagAnalogVideoStandard {AnalogVideo_None = 0x0,AnalogVideo_NTSC_M = 0x1,AnalogVideo_NTSC_M_J = 0x2,AnalogVideo_NTSC_433 = 0x4,AnalogVideo_PAL_B = 0x10,AnalogVideo_PAL_D = 0x20,AnalogVideo_PAL_G = 0x40,AnalogVideo_PAL_H = 0x80,AnalogVideo_PAL_I = 0x100,AnalogVideo_PAL_M = 0x200,AnalogVideo_PAL_N = 0x400,AnalogVideo_PAL_60 = 0x800,AnalogVideo_SECAM_B = 0x1000,AnalogVideo_SECAM_D = 0x2000,AnalogVideo_SECAM_G = 0x4000,AnalogVideo_SECAM_H = 0x8000,AnalogVideo_SECAM_K = 0x10000,AnalogVideo_SECAM_K1 = 0x20000,AnalogVideo_SECAM_L = 0x40000,AnalogVideo_SECAM_L1 = 0x80000,};
enum tagDVD_KARAOKE_DOWNMIX {DVD_Mix_0to0 = 0x1,DVD_Mix_1to0 = 0x2,DVD_Mix_2to0 = 0x4,DVD_Mix_3to0 = 0x8,DVD_Mix_4to0 = 0x10,DVD_Mix_Lto0 = 0x20,DVD_Mix_Rto0 = 0x40,DVD_Mix_0to1 = 0x100,DVD_Mix_1to1 = 0x200,DVD_Mix_2to1 = 0x400,DVD_Mix_3to1 = 0x800,DVD_Mix_4to1 = 0x1000,DVD_Mix_Lto1 = 0x2000,DVD_Mix_Rto1 = 0x4000,};
enum tagDVD_SUBPICTURE_TYPE {DVD_SPType_NotSpecified = 0x0,DVD_SPType_Language = 0x1,DVD_SPType_Other = 0x2,};
enum tagHTTPMAILCONTACTTYPE {HTTPMAIL_CT_CONTACT = 0x0,HTTPMAIL_CT_GROUP = 0x1,HTTPMAIL_CT_LAST = 0x2,};
typedef struct _ACTRL_PROPERTY_ENTRYA ACTRL_PROPERTY_ENTRYA;
typedef struct _ACTRL_PROPERTY_ENTRYW ACTRL_PROPERTY_ENTRYW;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 AM_AC3_DIALOGUE_LEVEL;
typedef struct tagAM_SAMPLE2_PROPERTIES AM_SAMPLE2_PROPERTIES;
typedef struct _BTHNS_RESTRICTIONBLOB BTHNS_RESTRICTIONBLOB;
typedef struct _CARD_EVENT_MASK_PARMS CARD_EVENT_MASK_PARMS;
typedef struct __CEL_MEMTRACK_BASELINE CEL_MEMTRACK_BASELINE;
typedef struct __CEL_PROCESS_TERMINATE CEL_PROCESS_TERMINATE;
typedef struct _CERT_CRL_CONTEXT_PAIR CERT_CRL_CONTEXT_PAIR;
typedef struct tagCInterfaceProxyHeader CInterfaceProxyHeader;
typedef struct _CMInvokeCommandInfoEx CMINVOKECOMMANDINFOEX;
typedef struct contres_cr10waveformat_tag CONTRESCR10WAVEFORMAT;
typedef struct _CO_TAPI_TRANSLATE_SAP CO_TAPI_TRANSLATE_SAP;
typedef struct _CREDENTIAL_ATTRIBUTEA CREDENTIAL_ATTRIBUTEA;
typedef struct _CREDENTIAL_ATTRIBUTEW CREDENTIAL_ATTRIBUTEW;
typedef struct _CRYPT_SEQUENCE_OF_ANY CRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY CRYPT_TRUST_REG_ENTRY;
typedef struct _CRYPT_X942_OTHER_INFO CRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA CTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA CTL_VERIFY_USAGE_PARA;
typedef struct _D3DPRESENT_PARAMETERS_ D3DPRESENT_PARAMETERS;
enum DBCOLUMNDESCFLAGSENUM {DBCOLUMNDESCFLAGS_TYPENAME = 0x1,DBCOLUMNDESCFLAGS_ITYPEINFO = 0x2,DBCOLUMNDESCFLAGS_PROPERTIES = 0x4,DBCOLUMNDESCFLAGS_CLSID = 0x8,DBCOLUMNDESCFLAGS_COLSIZE = 0x10,DBCOLUMNDESCFLAGS_DBCID = 0x20,DBCOLUMNDESCFLAGS_WTYPE = 0x40,DBCOLUMNDESCFLAGS_PRECISION = 0x80,DBCOLUMNDESCFLAGS_SCALE = 0x100,};
enum DBINDEX_COL_ORDERENUM {DBINDEX_COL_ORDER_ASC = 0x0,DBINDEX_COL_ORDER_DESC = 0x1,};
typedef struct _DEV_BROADCAST_DEVNODE DEV_BROADCAST_DEVNODE;
typedef struct _DMO_PARTIAL_MEDIATYPE DMO_PARTIAL_MEDIATYPE;
struct DOMChildrenCollection;
typedef struct _DOT11_AP_JOIN_REQUEST DOT11_AP_JOIN_REQUEST;
typedef struct _DOT11_BSS_DESCRIPTION DOT11_BSS_DESCRIPTION;
typedef struct _DOT11_POWER_MGMT_MODE DOT11_POWER_MGMT_MODE;
typedef struct DRIVER_VER_MAJORMINOR_ DRIVER_VER_MAJORMINOR;
struct DShellNameSpaceEvents {struct DShellNameSpaceEventsVtbl *lpVtbl;};
typedef struct _structDVD_AUDIO_STREAM_ATTR DVD_AUDIO_STREAM_ATTR;
typedef struct tagDVD_KaraokeAttributes DVD_KaraokeAttributes;
typedef struct tagDVD_PLAYBACK_LOCATION DVD_PLAYBACK_LOCATION;
enum DXT_FILTER_TYPE_FLAGS {DXTFTF_INVALID = 0x0,DXTFTF_CSS = 0x1,DXTFTF_PRIVATE = 0x2,DXTFTF_ALLMODIFIERS = 0x3,DXTFTF_SURFACE = 0x10000,DXTFTF_ZEROINPUT = 0x20000,DXTFTF_FILTER = 0x40000,DXTFTF_ALLTYPES = 0x70000,};
struct DispHTCAttachBehavior {struct DispHTCAttachBehaviorVtbl *lpVtbl;};
struct DispHTCMethodBehavior {struct DispHTCMethodBehaviorVtbl *lpVtbl;};
struct DispHTMLAnchorElement {struct DispHTMLAnchorElementVtbl *lpVtbl;};
struct DispHTMLButtonElement {struct DispHTMLButtonElementVtbl *lpVtbl;};
struct DispHTMLHeaderElement {struct DispHTMLHeaderElementVtbl *lpVtbl;};
struct DispHTMLLegendElement {struct DispHTMLLegendElementVtbl *lpVtbl;};
struct DispHTMLNextIdElement {struct DispHTMLNextIdElementVtbl *lpVtbl;};
struct DispHTMLNoShowElement {struct DispHTMLNoShowElementVtbl *lpVtbl;};
struct DispHTMLObjectElement {struct DispHTMLObjectElementVtbl *lpVtbl;};
struct DispHTMLOptionElement {struct DispHTMLOptionElementVtbl *lpVtbl;};
struct DispHTMLPhraseElement {struct DispHTMLPhraseElementVtbl *lpVtbl;};
struct DispHTMLScriptElement {struct DispHTMLScriptElementVtbl *lpVtbl;};
struct DispHTMLSelectElement {struct DispHTMLSelectElementVtbl *lpVtbl;};
typedef struct _EXTENDED_NOTIFICATION EXTENDED_NOTIFICATION;
typedef struct _1CF5A01E195BE25BEDA13B6A0EE28B07 GOPHER_ATTRIBUTE_TYPE;
struct HTMLDOMImplementation;
struct HTMLElementCollection;
struct HTMLFormElementEvents {struct HTMLFormElementEventsVtbl *lpVtbl;};
struct HTMLInputImageEvents2 {struct HTMLInputImageEvents2Vtbl *lpVtbl;};
struct HTMLLinkElementEvents {struct HTMLLinkElementEventsVtbl *lpVtbl;};
typedef struct tagHTTPMAILBCOPYMOVELIST HTTPMAILBCOPYMOVELIST;
struct IAMAnalogVideoDecoder {struct IAMAnalogVideoDecoderVtbl *lpVtbl;};
struct IAMDevMemoryAllocator {struct IAMDevMemoryAllocatorVtbl *lpVtbl;};
struct IAMSecureMediaContent {struct IAMSecureMediaContentVtbl *lpVtbl;};
struct IActiveScriptProperty {struct IActiveScriptPropertyVtbl *lpVtbl;};
struct ICaptureGraphBuilder2 {struct ICaptureGraphBuilder2Vtbl *lpVtbl;};
struct ICreateJavaPackageMgr {struct ICreateJavaPackageMgrVtbl *lpVtbl;};
struct IDDVideoPortContainer {struct IDDVideoPortContainerVtbl *lpVtbl;};
struct IDVDNavDataStatusSink {struct IDVDNavDataStatusSinkVtbl *lpVtbl;};
struct IDVDNavigationManager {struct IDVDNavigationManagerVtbl *lpVtbl;};
struct IDVDStreamControlInfo {struct IDVDStreamControlInfoVtbl *lpVtbl;};
struct IDirect3DBaseTexture8 {struct IDirect3DBaseTexture8Vtbl *lpVtbl;};
struct IDirect3DCubeTexture8 {struct IDirect3DCubeTexture8Vtbl *lpVtbl;};
struct IDirect3DIndexBuffer8 {struct IDirect3DIndexBuffer8Vtbl *lpVtbl;};
struct IElementBehaviorFocus {struct IElementBehaviorFocusVtbl *lpVtbl;};
struct IEnumCodeStoreDBEntry {struct IEnumCodeStoreDBEntryVtbl *lpVtbl;};
struct IEnumConnectionPoints {struct IEnumConnectionPointsVtbl *lpVtbl;};
struct IEnumOleDocumentViews {struct IEnumOleDocumentViewsVtbl *lpVtbl;};
struct IFileSystemDescriptor {struct IFileSystemDescriptorVtbl *lpVtbl;};
struct IGlobalInterfaceTable {struct IGlobalInterfaceTableVtbl *lpVtbl;};
struct IHTMLAreasCollection2 {struct IHTMLAreasCollection2Vtbl *lpVtbl;};
struct IHTMLAreasCollection3 {struct IHTMLAreasCollection3Vtbl *lpVtbl;};
struct IHTMLFieldSetElement2 {struct IHTMLFieldSetElement2Vtbl *lpVtbl;};
struct IHTMLFrameSetElement2 {struct IHTMLFrameSetElement2Vtbl *lpVtbl;};
struct IHTMLIPrintCollection {struct IHTMLIPrintCollectionVtbl *lpVtbl;};
struct IHTMLInputFileElement {struct IHTMLInputFileElementVtbl *lpVtbl;};
struct IHTMLInputTextElement {struct IHTMLInputTextElementVtbl *lpVtbl;};
struct IHTMLOMWindowServices {struct IHTMLOMWindowServicesVtbl *lpVtbl;};
struct IHTMLPainterEventInfo {struct IHTMLPainterEventInfoVtbl *lpVtbl;};
struct IHTMLSelectionObject2 {struct IHTMLSelectionObject2Vtbl *lpVtbl;};
struct IHTMLTextRangeMetrics {struct IHTMLTextRangeMetricsVtbl *lpVtbl;};
struct IIdentityChangeNotify {struct IIdentityChangeNotifyVtbl *lpVtbl;};
struct IImageDecodeEventSink {struct IImageDecodeEventSinkVtbl *lpVtbl;};
struct IInternetProtocolInfo {struct IInternetProtocolInfoVtbl *lpVtbl;};
struct IInternetProtocolRoot {struct IInternetProtocolRootVtbl *lpVtbl;};
struct IInternetProtocolSink {struct IInternetProtocolSinkVtbl *lpVtbl;};
struct IInternetThreadSwitch {struct IInternetThreadSwitchVtbl *lpVtbl;};
typedef struct _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
typedef struct _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
typedef struct _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
struct IMimeEnumAddressTypes {struct IMimeEnumAddressTypesVtbl *lpVtbl;};
struct IMimeEnumMessageParts {struct IMimeEnumMessagePartsVtbl *lpVtbl;};
typedef struct _0AD2D8D1BD5FB2EC4188290EECBF472F INTERNET_ASYNC_RESULT;
typedef struct _D692CA7460863103343173F071E8F66B INTERNET_VERSION_INFO;
struct INetCfgComponentSetup {struct INetCfgComponentSetupVtbl *lpVtbl;};
struct INetConnectionManager {struct INetConnectionManagerVtbl *lpVtbl;};
struct IOleControlNavigation {struct IOleControlNavigationVtbl *lpVtbl;};
struct IOverlappedCompletion {struct IOverlappedCompletionVtbl *lpVtbl;};
typedef struct _IP_MCAST_COUNTER_INFO IP_MCAST_COUNTER_INFO;
typedef struct ip_option_information IP_OPTION_INFORMATION;
struct IParserTreeProperties {struct IParserTreePropertiesVtbl *lpVtbl;};
struct IPerPropertyBrowsing2 {struct IPerPropertyBrowsing2Vtbl *lpVtbl;};
struct IPropertySetContainer {struct IPropertySetContainerVtbl *lpVtbl;};
struct IRTCEventNotification {struct IRTCEventNotificationVtbl *lpVtbl;};
struct IRTCMediaRequestEvent {struct IRTCMediaRequestEventVtbl *lpVtbl;};
struct IRTCPresenceDataEvent {struct IRTCPresenceDataEventVtbl *lpVtbl;};
struct IRowsetWithParameters {struct IRowsetWithParametersVtbl *lpVtbl;};
struct IServerXMLHTTPRequest {struct IServerXMLHTTPRequestVtbl *lpVtbl;};
struct ISoapConnectorFactory {struct ISoapConnectorFactoryVtbl *lpVtbl;};
struct ISpecifyPropertyPages {struct ISpecifyPropertyPagesVtbl *lpVtbl;};
struct ISynchronizedCallBack {struct ISynchronizedCallBackVtbl *lpVtbl;};
struct ITIMEAnimationElement {struct ITIMEAnimationElementVtbl *lpVtbl;};
struct ITransactionDispenser {struct ITransactionDispenserVtbl *lpVtbl;};
struct IVoIPCallerInfoDBEnum {struct IVoIPCallerInfoDBEnumVtbl *lpVtbl;};
struct IVoIPCallerInfoRecord {struct IVoIPCallerInfoRecordVtbl *lpVtbl;};
struct IXMLDOMImplementation {struct IXMLDOMImplementationVtbl *lpVtbl;};
struct IXMLElementCollection {struct IXMLElementCollectionVtbl *lpVtbl;};
typedef struct _7807FA91DA52C5F41D82DAAEFE4F1D2C InternetCookieHistory;
typedef struct linemediacontroldigit_tag LINEMEDIACONTROLDIGIT;
typedef struct linemediacontrolmedia_tag LINEMEDIACONTROLMEDIA;
typedef struct _NDIS_LINE_TRANSLATE_OUTPUT LINE_TRANSLATE_OUTPUT;
typedef struct tACMDRVFORMATSUGGEST *LPACMDRVFORMATSUGGEST;
typedef struct tACMFILTERTAGDETAILS *LPACMFILTERTAGDETAILS;
typedef struct tACMFORMATTAGDETAILSW *LPACMFORMATTAGDETAILS;
typedef struct _CMINVOKECOMMANDINFO *LPCMINVOKECOMMANDINFO;
typedef struct IDirectDrawVideoPort *LPDIRECTDRAWVIDEOPORT;
typedef struct IDirectSound3DBuffer *LPDIRECTSOUND3DBUFFER;
typedef struct tagHTTPCONTACTINFOLIST *LPHTTPCONTACTINFOLIST;
typedef struct tagHTTPMEMBERERRORLIST *LPHTTPMEMBERERRORLIST;
typedef IInternetBindClient *LPIINTERNETBINDCLIENT;
typedef struct _IMAGELISTDRAWPARAMS *LPIMAGELISTDRAWPARAMS;
typedef struct _C3D536761911E1B34BFF5DAB2CC3A2E9 *LPINTERNET_PROXY_INFO;
typedef struct linetranslateoutput_tag *LPLINETRANSLATEOUTPUT;
typedef struct _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;
typedef IMimeMessageCallback *LPMIMEMESSAGECALLBACK;
typedef struct tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
typedef IMLangConvertCharset *LPMLANGCONVERTCHARSET;
typedef INotificationRunning *LPNOTIFICATIONRUNNING;
typedef struct _8FE251E0C9BEAEF58C2D97D4F1899077 *LPNT_FE_CONSOLE_PROPS;
typedef OLEDBSimpleProvider *LPOLEDBSimpleProvider;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;
typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;
typedef struct _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
typedef struct _PST_BINARYCHECKDATA *LPPST_BINARYCHECKDATA;
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
typedef struct _SOCKET_ADDRESS_LIST *LPSOCKET_ADDRESS_LIST;
typedef struct _SSLVALIDATECERTHOOK *LPSSLVALIDATECERTHOOK;
typedef struct _tagSYNCMGRLOGERRORINFO *LPSYNCMGRLOGERRORINFO;
typedef struct _tagSYNCMGRPROGRESSITEM *LPSYNCMGRPROGRESSITEM;
typedef struct _USB_DRIVER_SETTINGS *LPUSB_DRIVER_SETTINGS;
enum MACRO_ACCESS_ACE_FLAG {SUCCESSFUL_ACCESS_ACE_FLAG = 0x40,FAILED_ACCESS_ACE_FLAG = 0x80,};
enum MACRO_ACMFILTERCHOOSE {ACMFILTERCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 0x40,ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMFORMATCHOOSE {ACMFORMATCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 0x40,ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMSTREAMHEADER {ACMSTREAMHEADER_STATUSF_DONE = 0x10000,ACMSTREAMHEADER_STATUSF_PREPARED = 0x20000,ACMSTREAMHEADER_STATUSF_INQUEUE = 0x100000,};
enum MACRO_ACM_STREAMOPENF {ACM_STREAMOPENF_QUERY = 0x1,ACM_STREAMOPENF_ASYNC = 0x2,ACM_STREAMOPENF_NONREALTIME = 0x4,ACM_STREAMSIZEF_SOURCE = 0x0,ACM_STREAMSIZEF_DESTINATION = 0x1,ACM_STREAMSIZEF_QUERYMASK = 0xF,ACM_STREAMCONVERTF_BLOCKALIGN = 0x4,ACM_STREAMCONVERTF_START = 0x10,ACM_STREAMCONVERTF_END = 0x20,};
enum MACRO_AUTH_FLAG_RESET {AUTH_FLAG_RESET = 0x0,};
enum MACRO_CERT_CHAIN_FIND {CERT_CHAIN_FIND_BY_ISSUER = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4,CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8,CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1,CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4,CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8,CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7,CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16,CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32,CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64,CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128,CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256,CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512,CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024,CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048,CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840,CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768,CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384,CERT_CHAIN_POLICY_BASE = 1,CERT_CHAIN_POLICY_AUTHENTICODE = 2,CERT_CHAIN_POLICY_AUTHENTICODE_TS = 3,CERT_CHAIN_POLICY_SSL = 4,CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5,CERT_CHAIN_POLICY_NT_AUTH = 6,CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7,};
enum MACRO_CERT_CONFIDENCE {CERT_CONFIDENCE_SIG = 0x10000000,CERT_CONFIDENCE_TIME = 0x1000000,CERT_CONFIDENCE_TIMENEST = 0x100000,CERT_CONFIDENCE_AUTHIDEXT = 0x10000,CERT_CONFIDENCE_HYGIENE = 0x1000,CERT_CONFIDENCE_HIGHEST = 0x11111000,};
enum MACRO_CERT_STORE_CTRL {CERT_STORE_CTRL_RESYNC = 1,CERT_STORE_CTRL_NOTIFY_CHANGE = 2,CERT_STORE_CTRL_COMMIT = 3,CERT_STORE_CTRL_AUTO_RESYNC = 4,CERT_STORE_CTRL_CANCEL_NOTIFY = 5,CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1,CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1,CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2,CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1,CERT_CREATE_CONTEXT_SORTED_FLAG = 2,CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4,CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8,CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1,CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2,CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4,CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8,CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1,};
enum MACRO_COLORMGMTDLGORD {COLORMGMTDLGORD = 1551,};
enum MACRO_CRM_SETUSERNAME {CRM_SETUSERNAME = 4100,CRM_GETUSERNAME = 4102,CRM_SETPASSWORD = 4104,CRM_GETPASSWORD = 4106,CRM_SHOWBALLOON = 4109,};
enum MACRO_D3DPRESENT_BACK {D3DPRESENT_BACK_BUFFERS_MAX = 3,};
enum MACRO_D3DPTEXTURECAPS {D3DPTEXTURECAPS_PERSPECTIVE = 0x1,D3DPTEXTURECAPS_POW2 = 0x2,D3DPTEXTURECAPS_ALPHA = 0x4,D3DPTEXTURECAPS_SQUAREONLY = 0x20,D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE = 0x40,D3DPTEXTURECAPS_ALPHAPALETTE = 0x80,D3DPTEXTURECAPS_NONPOW2CONDITIONAL = 0x100,D3DPTEXTURECAPS_PROJECTED = 0x400,D3DPTEXTURECAPS_CUBEMAP = 0x800,D3DPTEXTURECAPS_VOLUMEMAP = 0x2000,D3DPTEXTURECAPS_MIPMAP = 0x4000,D3DPTEXTURECAPS_MIPVOLUMEMAP = 0x8000,D3DPTEXTURECAPS_MIPCUBEMAP = 0x10000,D3DPTEXTURECAPS_CUBEMAP_POW2 = 0x20000,D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 0x40000,};
enum MACRO_D3DPTFILTERCAPS {D3DPTFILTERCAPS_MINFPOINT = 0x100,D3DPTFILTERCAPS_MINFLINEAR = 0x200,D3DPTFILTERCAPS_MINFANISOTROPIC = 0x400,D3DPTFILTERCAPS_MIPFPOINT = 0x10000,D3DPTFILTERCAPS_MIPFLINEAR = 0x20000,D3DPTFILTERCAPS_MAGFPOINT = 0x1000000,D3DPTFILTERCAPS_MAGFLINEAR = 0x2000000,D3DPTFILTERCAPS_MAGFANISOTROPIC = 0x4000000,D3DPTFILTERCAPS_MAGFAFLATCUBIC = 0x8000000,D3DPTFILTERCAPS_MAGFGAUSSIANCUBIC = 0x10000000,};
enum MACRO_DEFAULT_MINIMUM {DEFAULT_MINIMUM_ENTITIES = 32,};
enum MACRO_DISPID_AAHEADER {DISPID_AAHEADER = -2147483648,DISPID_RECALC_INFO = -2147483647,DISPID_HTMLOBJECT = -2147417612,DISPID_ELEMENT = -2147417112,DISPID_SITE = -2147416112,DISPID_OBJECT = -2147415112,DISPID_STYLE = -2147414112,DISPID_ATTRS = -2147413112,DISPID_EVENTS = -2147412112,DISPID_XOBJ_EXPANDO = -2147411112,DISPID_XOBJ_ORDINAL = -2147410112,DISPID_ACTIVEX_EXPANDO_BASE = -2147411112,DISPID_ACTIVEX_EXPANDO_MAX = -2147410113,DISPID_OBJECT_ORDINAL_BASE = -2147410112,DISPID_OBJECT_ORDINAL_MAX = -2147409113,DISPID_COLLECTION_MIN = 1000000,DISPID_COLLECTION_MAX = 2999999,DISPID_STYLESHEETSCOLLECTION_NAMED_BASE = 1000000,DISPID_STYLESHEETSCOLLECTION_NAMED_MAX = 1999999,DISPID_STYLESHEETSCOLLECTION_ORDINAL_BASE = 2000000,DISPID_STYLESHEETSCOLLECTION_ORDINAL_MAX = 2999999,DISPID_EXPANDO_BASE = 3000000,DISPID_EXPANDO_MAX = 3999999,DISPID_EVENTHOOK_SENSITIVE_BASE = 4000000,DISPID_EVENTHOOK_SENSITIVE_MAX = 4499999,DISPID_EVENTHOOK_INSENSITIVE_BASE = 4500000,DISPID_EVENTHOOK_INSENSITIVE_MAX = 4999999,DISPID_PEER_HOLDER_BASE = 5000000,DISPID_CommonCtrl_FONTNAME = 1,DISPID_CommonCtrl_FONTSIZE = 2,DISPID_CommonCtrl_FONTBOLD = 3,DISPID_CommonCtrl_FONTITAL = 4,DISPID_CommonCtrl_FONTUNDER = 5,DISPID_CommonCtrl_FONTSTRIKE = 6,DISPID_CommonCtrl_FONTWEIGHT = 7,DISPID_CommonCtrl_FONTCHARSET = 8,DISPID_CommonCtrl_FONTSUPERSCRIPT = 9,DISPID_CommonCtrl_FONTSUBSCRIPT = 10,DISPID_MSDATASRCINTERFACE = -3900,DISPID_ADVISEDATASRCCHANGEEVENT = -3901,DISPID_HTMLDLG = 25000,DISPID_HTMLDLGMODEL = 26000,DISPID_HTMLPOPUP = 27000,DISPID_HTMLAPP = 5000,};
enum MACRO_DISPID_AUTOSIZE {DISPID_AUTOSIZE = -500,DISPID_BACKCOLOR = -501,DISPID_BACKSTYLE = -502,DISPID_BORDERCOLOR = -503,DISPID_BORDERSTYLE = -504,DISPID_BORDERWIDTH = -505,DISPID_DRAWMODE = -507,DISPID_DRAWSTYLE = -508,DISPID_DRAWWIDTH = -509,DISPID_FILLCOLOR = -510,DISPID_FILLSTYLE = -511,DISPID_FONT = -512,DISPID_FORECOLOR = -513,DISPID_ENABLED = -514,DISPID_HWND = -515,DISPID_TABSTOP = -516,DISPID_TEXT = -517,DISPID_CAPTION = -518,DISPID_BORDERVISIBLE = -519,DISPID_APPEARANCE = -520,DISPID_MOUSEPOINTER = -521,DISPID_MOUSEICON = -522,DISPID_PICTURE = -523,DISPID_VALID = -524,DISPID_REFRESH = -550,DISPID_DOCLICK = -551,DISPID_ABOUTBOX = -552,DISPID_CLICK = -600,DISPID_DBLCLICK = -601,DISPID_KEYDOWN = -602,DISPID_KEYPRESS = -603,DISPID_KEYUP = -604,DISPID_MOUSEDOWN = -605,DISPID_MOUSEMOVE = -606,DISPID_MOUSEUP = -607,DISPID_ERROREVENT = -608,DISPID_AMBIENT_BACKCOLOR = -701,DISPID_AMBIENT_DISPLAYNAME = -702,DISPID_AMBIENT_FONT = -703,DISPID_AMBIENT_FORECOLOR = -704,DISPID_AMBIENT_LOCALEID = -705,DISPID_AMBIENT_MESSAGEREFLECT = -706,DISPID_AMBIENT_SCALEUNITS = -707,DISPID_AMBIENT_TEXTALIGN = -708,DISPID_AMBIENT_USERMODE = -709,DISPID_AMBIENT_UIDEAD = -710,DISPID_AMBIENT_SHOWGRABHANDLES = -711,DISPID_AMBIENT_SHOWHATCHING = -712,DISPID_AMBIENT_DISPLAYASDEFAULT = -713,DISPID_AMBIENT_SUPPORTSMNEMONICS = -714,DISPID_AMBIENT_AUTOCLIP = -715,DISPID_AMBIENT_APPEARANCE = -716,DISPID_AMBIENT_PALETTE = -726,DISPID_Name = -800,DISPID_Delete = -801,DISPID_Object = -802,DISPID_Parent = -803,DISPID_FONT_NAME = 0,DISPID_FONT_SIZE = 2,DISPID_FONT_BOLD = 3,DISPID_FONT_ITALIC = 4,DISPID_FONT_UNDER = 5,DISPID_FONT_STRIKE = 6,DISPID_FONT_WEIGHT = 7,DISPID_FONT_CHARSET = 8,DISPID_PICT_HANDLE = 0,DISPID_PICT_HPAL = 2,DISPID_PICT_TYPE = 3,DISPID_PICT_WIDTH = 4,DISPID_PICT_HEIGHT = 5,DISPID_PICT_RENDER = 6,};
enum MACRO_DOT11_FREQUENCY {DOT11_FREQUENCY_BANDS_LOWER = 0x1,DOT11_FREQUENCY_BANDS_MIDDLE = 0x2,DOT11_FREQUENCY_BANDS_UPPER = 0x4,};
enum MACRO_DOT11_OPERATION {DOT11_OPERATION_MODE_UNKNOWN = 0x0,DOT11_OPERATION_MODE_STATION = 0x1,DOT11_OPERATION_MODE_AP = 0x2,};
enum MACRO_EM_GETINPUTMODE {EM_GETINPUTMODE = 0xDD,EM_SETINPUTMODE = 0xDE,EM_SETSYMBOLS = 0xDF,EM_SETEXTENDEDSTYLE = 0xE0,EM_GETEXTENDEDSTYLE = 0xE1,};
enum MACRO_EVENT_TRANSPORT {EVENT_TRANSPORT_RESOURCE_POOL = 0x80002329,EVENT_TRANSPORT_RESOURCE_LIMIT = 0x8000232A,EVENT_TRANSPORT_RESOURCE_SPECIFIC = 0x8000232B,EVENT_TRANSPORT_REGISTER_FAILED = 0xC000232C,EVENT_TRANSPORT_BINDING_FAILED = 0xC000232D,EVENT_TRANSPORT_ADAPTER_NOT_FOUND = 0xC000232E,EVENT_TRANSPORT_SET_OID_FAILED = 0xC000232F,EVENT_TRANSPORT_QUERY_OID_FAILED = 0xC0002330,EVENT_TRANSPORT_TRANSFER_DATA = 0x40002331,EVENT_TRANSPORT_TOO_MANY_LINKS = 0x40002332,EVENT_TRANSPORT_BAD_PROTOCOL = 0x40002333,EVENT_IPX_NEW_DEFAULT_TYPE = 0x4000251D,EVENT_IPX_SAP_ANNOUNCE = 0x8000251E,EVENT_IPX_ILLEGAL_CONFIG = 0x8000251F,EVENT_IPX_INTERNAL_NET_INVALID = 0xC0002520,EVENT_IPX_NO_FRAME_TYPES = 0xC0002521,EVENT_IPX_CREATE_DEVICE = 0xC0002522,EVENT_IPX_NO_ADAPTERS = 0xC0002523,EVENT_RPCSS_CREATEPROCESS_FAILURE = 0xC0002710,EVENT_RPCSS_RUNAS_CREATEPROCESS_FAILURE = 0xC0002711,EVENT_RPCSS_LAUNCH_ACCESS_DENIED = 0xC0002712,EVENT_RPCSS_DEFAULT_LAUNCH_ACCESS_DENIED = 0xC0002713,EVENT_RPCSS_RUNAS_CANT_LOGIN = 0xC0002714,EVENT_RPCSS_START_SERVICE_FAILURE = 0xC0002715,EVENT_RPCSS_REMOTE_SIDE_ERROR = 0xC0002716,EVENT_RPCSS_ACTIVATION_ERROR = 0xC0002717,EVENT_RPCSS_REMOTE_SIDE_ERROR_WITH_FILE = 0xC0002718,EVENT_RPCSS_REMOTE_SIDE_UNAVAILABLE = 0xC0002719,EVENT_RPCSS_SERVER_START_TIMEOUT = 0xC000271A,EVENT_RPCSS_SERVER_NOT_RESPONDING = 0xC000271B,EVENT_DCOM_ASSERTION_FAILURE = 0xC000271C,EVENT_DCOM_INVALID_ENDPOINT_DATA = 0xC000271D,EVENT_DNS_CACHE_START_FAILURE_NO_DLL = 0xC0002AF8,EVENT_DNS_CACHE_START_FAILURE_NO_ENTRY = 0xC0002AF9,EVENT_DNS_CACHE_START_FAILURE_NO_CONTROL = 0xC0002AFA,EVENT_DNS_CACHE_START_FAILURE_NO_DONE_EVENT = 0xC0002AFB,EVENT_DNS_CACHE_START_FAILURE_NO_RPC = 0xC0002AFC,EVENT_DNS_CACHE_START_FAILURE_NO_SHUTDOWN_NOTIFY = 0xC0002AFD,EVENT_DNS_CACHE_START_FAILURE_NO_UPDATE = 0xC0002AFE,EVENT_DNS_CACHE_START_FAILURE_LOW_MEMORY = 0xC0002AFF,EVENT_DNS_CACHE_NETWORK_PERF_WARNING = 0x80002B2A,EVENT_DNS_CACHE_UNABLE_TO_REACH_SERVER_WARNING = 0x80002B2B,EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT = 0x80002B8E,EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL = 0x80002B8F,EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP = 0x80002B90,EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED = 0x80002B91,EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY = 0x80002B92,EVENT_DNSAPI_REGISTRATION_FAILED_OTHER = 0x80002B93,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_TIMEOUT = 0x80002B94,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SERVERFAIL = 0x80002B95,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_NOTSUPP = 0x80002B96,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_REFUSED = 0x80002B97,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_SECURITY = 0x80002B98,EVENT_DNSAPI_PTR_REGISTRATION_FAILED_OTHER = 0x80002B99,EVENT_DNSAPI_REGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = 0x80002B9A,EVENT_DNSAPI_REGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = 0x80002B9B,EVENT_DNSAPI_REGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = 0x80002B9C,EVENT_DNSAPI_REGISTRATION_FAILED_REFUSED_PRIMARY_DN = 0x80002B9D,EVENT_DNSAPI_REGISTRATION_FAILED_SECURITY_PRIMARY_DN = 0x80002B9E,EVENT_DNSAPI_REGISTRATION_FAILED_OTHER_PRIMARY_DN = 0x80002B9F,EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT = 0x80002BAC,EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL = 0x80002BAD,EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP = 0x80002BAE,EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED = 0x80002BAF,EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY = 0x80002BB0,EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER = 0x80002BB1,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_TIMEOUT = 0x80002BB2,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SERVERFAIL = 0x80002BB3,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_NOTSUPP = 0x80002BB4,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_REFUSED = 0x80002BB5,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_SECURITY = 0x80002BB6,EVENT_DNSAPI_PTR_DEREGISTRATION_FAILED_OTHER = 0x80002BB7,EVENT_DNSAPI_DEREGISTRATION_FAILED_TIMEOUT_PRIMARY_DN = 0x80002BB8,EVENT_DNSAPI_DEREGISTRATION_FAILED_SERVERFAIL_PRIMARY_DN = 0x80002BB9,EVENT_DNSAPI_DEREGISTRATION_FAILED_NOTSUPP_PRIMARY_DN = 0x80002BBA,EVENT_DNSAPI_DEREGISTRATION_FAILED_REFUSED_PRIMARY_DN = 0x80002BBB,EVENT_DNSAPI_DEREGISTRATION_FAILED_SECURITY_PRIMARY_DN = 0x80002BBC,EVENT_DNSAPI_DEREGISTRATION_FAILED_OTHER_PRIMARY_DN = 0x80002BBD,EVENT_DNSAPI_REGISTERED_ADAPTER = 0x40002BC0,EVENT_DNSAPI_REGISTERED_PTR = 0x40002BC1,EVENT_DNSAPI_REGISTERED_ADAPTER_PRIMARY_DN = 0x40002BC2,EVENT_WMI_CANT_OPEN_DEVICE = 0xC0002EE0,EVENT_WMI_INVALID_MOF = 0x80002F44,EVENT_WMI_MOF_LOAD_FAILURE = 0x80002F45,EVENT_WMI_INVALID_REGINFO = 0x80002F46,EVENT_WMI_INVALID_REGPATH = 0x80002F47,EVENT_WMI_CANT_RESOLVE_INSTANCE = 0x80002F48,EVENT_WMI_CANT_GET_EVENT_DATA = 0x80002F49,EVENT_TRK_INTERNAL_ERROR = 0xC00030D4,EVENT_TRK_SERVICE_START_SUCCESS = 0x400030D5,EVENT_TRK_SERVICE_START_FAILURE = 0xC00030D6,EVENT_TRK_SERVICE_CORRUPT_LOG = 0xC00030D7,EVENT_TRK_SERVICE_VOL_QUOTA_EXCEEDED = 0x800030D8,EVENT_TRK_SERVICE_VOLUME_CREATE = 0x400030D9,EVENT_TRK_SERVICE_VOLUME_CLAIM = 0x400030DA,EVENT_TRK_SERVICE_DUPLICATE_VOLIDS = 0x400030DB,EVENT_TRK_SERVICE_MOVE_QUOTA_EXCEEDED = 0x800030DC,EVENT_ATMLANE_CFGREQ_FAIL_VERSNOSUPP = 0xC000332C,EVENT_ATMLANE_JOINREQ_FAIL_VERSNOSUPP = 0xC000332D,EVENT_ATMLANE_CFGREQ_FAIL_REQPARMINVAL = 0xC000332E,EVENT_ATMLANE_JOINREQ_FAIL_REQPARMINVAL = 0xC000332F,EVENT_ATMLANE_JOINREQ_FAIL_DUPLANDEST = 0xC0003330,EVENT_ATMLANE_JOINREQ_FAIL_DUPATMADDR = 0xC0003331,EVENT_ATMLANE_CFGREQ_FAIL_INSUFFRES = 0xC0003332,EVENT_ATMLANE_JOINREQ_FAIL_INSUFFRES = 0xC0003333,EVENT_ATMLANE_CFGREQ_FAIL_NOACCESS = 0xC0003334,EVENT_ATMLANE_JOINREQ_FAIL_NOACCESS = 0xC0003335,EVENT_ATMLANE_CFGREQ_FAIL_REQIDINVAL = 0xC0003336,EVENT_ATMLANE_JOINREQ_FAIL_REQIDINVAL = 0xC0003337,EVENT_ATMLANE_CFGREQ_FAIL_LANDESTINVAL = 0xC0003338,EVENT_ATMLANE_JOINREQ_FAIL_LANDESTINVAL = 0xC0003339,EVENT_ATMLANE_CFGREQ_FAIL_ATMADDRINVAL = 0xC000333A,EVENT_ATMLANE_JOINREQ_FAIL_ATMADDRINVAL = 0xC000333B,EVENT_ATMLANE_CFGREQ_FAIL_NOCONF = 0xC000333C,EVENT_ATMLANE_CFGREQ_FAIL_CONFERROR = 0xC000333D,EVENT_ATMLANE_CFGREQ_FAIL_INSUFFINFO = 0xC000333E,EVENT_ATMARPS_ADDRESS_ALREADY_EXISTS = 0xC0003390,EVENT_FRS_ERROR = 0xC00034BC,EVENT_FRS_STARTING = 0x400034BD,EVENT_FRS_STOPPING = 0x400034BE,EVENT_FRS_STOPPED = 0x400034BF,EVENT_FRS_STOPPED_FORCE = 0xC00034C0,EVENT_FRS_STOPPED_ASSERT = 0xC00034C1,EVENT_FRS_ASSERT = 0xC00034C2,EVENT_FRS_VOLUME_NOT_SUPPORTED = 0xC00034C3,EVENT_FRS_LONG_JOIN = 0x800034C4,EVENT_FRS_LONG_JOIN_DONE = 0x800034C5,EVENT_FRS_CANNOT_COMMUNICATE = 0xC00034C6,EVENT_FRS_DATABASE_SPACE = 0xC00034C7,EVENT_FRS_DISK_WRITE_CACHE_ENABLED = 0x800034C8,EVENT_FRS_JET_1414 = 0xC00034C9,EVENT_FRS_SYSVOL_NOT_READY = 0x800034CA,EVENT_FRS_SYSVOL_NOT_READY_PRIMARY = 0x800034CB,EVENT_FRS_SYSVOL_READY = 0x400034CC,EVENT_FRS_ACCESS_CHECKS_DISABLED = 0x800034CD,EVENT_FRS_ACCESS_CHECKS_FAILED_USER = 0x800034CE,EVENT_FRS_ACCESS_CHECKS_FAILED_UNKNOWN = 0xC00034CF,EVENT_FRS_MOVED_PREEXISTING = 0x800034D0,EVENT_FRS_CANNOT_START_BACKUP_RESTORE_IN_PROGRESS = 0xC00034D1,EVENT_FRS_STAGING_AREA_FULL = 0x800034D2,EVENT_FRS_HUGE_FILE = 0x800034D3,EVENT_FRS_CANNOT_CREATE_UUID = 0xC00034D4,EVENT_FRS_NO_DNS_ATTRIBUTE = 0x800034D5,EVENT_FRS_NO_SID = 0xC00034D6,};
enum MACRO_FILESYSNAMESIZE {FILESYSNAMESIZE = 32,};
enum MACRO_GENERATE_METHOD {GENERATE_METHOD_PREFIXMATCH = 1,GENERATE_METHOD_STEMMED = 2,};
enum MACRO_IDM_INCFONTSIZE {IDM_INCFONTSIZE = 2242,IDM_DECFONTSIZE = 2243,IDM_INCFONTSIZE1PT = 2244,IDM_DECFONTSIZE1PT = 2245,};
enum MACRO_INTERNET_ACCESS {PRE_CONFIG_INTERNET_ACCESS = 0,LOCAL_INTERNET_ACCESS = 1,CERN_PROXY_INTERNET_ACCESS = 3,};
enum MACRO_INTERNET_COOKIE {INTERNET_COOKIE_IS_SECURE = 0x1,INTERNET_COOKIE_IS_SESSION = 0x2,INTERNET_COOKIE_THIRD_PARTY = 0x10,INTERNET_COOKIE_PROMPT_REQUIRED = 0x20,INTERNET_COOKIE_EVALUATE_P3P = 0x40,INTERNET_COOKIE_APPLY_P3P = 0x80,INTERNET_COOKIE_P3P_ENABLED = 0x100,INTERNET_COOKIE_IS_RESTRICTED = 0x200,INTERNET_COOKIE_IE6 = 0x400,INTERNET_COOKIE_IS_LEGACY = 0x800,};
enum MACRO_INTERNET_OPTION {INTERNET_OPTION_CALLBACK = 1,INTERNET_OPTION_CONNECT_TIMEOUT = 2,INTERNET_OPTION_CONNECT_RETRIES = 3,INTERNET_OPTION_CONNECT_BACKOFF = 4,INTERNET_OPTION_SEND_TIMEOUT = 5,INTERNET_OPTION_CONTROL_SEND_TIMEOUT = 5,INTERNET_OPTION_RECEIVE_TIMEOUT = 6,INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT = 6,INTERNET_OPTION_DATA_SEND_TIMEOUT = 7,INTERNET_OPTION_DATA_RECEIVE_TIMEOUT = 8,INTERNET_OPTION_HANDLE_TYPE = 9,INTERNET_OPTION_LISTEN_TIMEOUT = 11,INTERNET_OPTION_READ_BUFFER_SIZE = 12,INTERNET_OPTION_WRITE_BUFFER_SIZE = 13,INTERNET_OPTION_ASYNC_ID = 15,INTERNET_OPTION_ASYNC_PRIORITY = 16,INTERNET_OPTION_PARENT_HANDLE = 21,INTERNET_OPTION_KEEP_CONNECTION = 22,INTERNET_OPTION_REQUEST_FLAGS = 23,INTERNET_OPTION_EXTENDED_ERROR = 24,INTERNET_OPTION_OFFLINE_MODE = 26,INTERNET_OPTION_CACHE_STREAM_HANDLE = 27,INTERNET_OPTION_USERNAME = 28,INTERNET_OPTION_PASSWORD = 29,INTERNET_OPTION_ASYNC = 30,INTERNET_OPTION_SECURITY_FLAGS = 31,INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT = 32,INTERNET_OPTION_DATAFILE_NAME = 33,INTERNET_OPTION_URL = 34,INTERNET_OPTION_SECURITY_CERTIFICATE = 35,INTERNET_OPTION_SECURITY_KEY_BITNESS = 36,INTERNET_OPTION_REFRESH = 37,INTERNET_OPTION_PROXY = 38,INTERNET_OPTION_SETTINGS_CHANGED = 39,INTERNET_OPTION_VERSION = 40,INTERNET_OPTION_USER_AGENT = 41,INTERNET_OPTION_END_BROWSER_SESSION = 42,INTERNET_OPTION_PROXY_USERNAME = 43,INTERNET_OPTION_PROXY_PASSWORD = 44,INTERNET_OPTION_CONTEXT_VALUE = 45,INTERNET_OPTION_CONNECT_LIMIT = 46,INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT = 47,INTERNET_OPTION_POLICY = 48,INTERNET_OPTION_DISCONNECTED_TIMEOUT = 49,INTERNET_OPTION_CONNECTED_STATE = 50,INTERNET_OPTION_IDLE_STATE = 51,INTERNET_OPTION_OFFLINE_SEMANTICS = 52,INTERNET_OPTION_SECONDARY_CACHE_KEY = 53,INTERNET_OPTION_CALLBACK_FILTER = 54,INTERNET_OPTION_CONNECT_TIME = 55,INTERNET_OPTION_SEND_THROUGHPUT = 56,INTERNET_OPTION_RECEIVE_THROUGHPUT = 57,INTERNET_OPTION_REQUEST_PRIORITY = 58,INTERNET_OPTION_HTTP_VERSION = 59,INTERNET_OPTION_RESET_URLCACHE_SESSION = 60,INTERNET_OPTION_ERROR_MASK = 62,INTERNET_OPTION_FROM_CACHE_TIMEOUT = 63,INTERNET_OPTION_BYPASS_EDITED_ENTRY = 64,INTERNET_OPTION_CODEPAGE = 68,INTERNET_OPTION_CACHE_TIMESTAMPS = 69,INTERNET_OPTION_DISABLE_AUTODIAL = 70,INTERNET_OPTION_MAX_CONNS_PER_SERVER = 73,INTERNET_OPTION_MAX_CONNS_PER_1_0_SERVER = 74,INTERNET_OPTION_PER_CONNECTION_OPTION = 75,INTERNET_OPTION_DIGEST_AUTH_UNLOAD = 76,INTERNET_OPTION_IGNORE_OFFLINE = 77,INTERNET_OPTION_IDENTITY = 78,INTERNET_OPTION_REMOVE_IDENTITY = 79,INTERNET_OPTION_ALTER_IDENTITY = 80,INTERNET_OPTION_SUPPRESS_BEHAVIOR = 81,INTERNET_OPTION_AUTODIAL_MODE = 82,INTERNET_OPTION_AUTODIAL_CONNECTION = 83,INTERNET_OPTION_CLIENT_CERT_CONTEXT = 84,INTERNET_OPTION_AUTH_FLAGS = 85,INTERNET_OPTION_COOKIES_3RD_PARTY = 86,INTERNET_OPTION_DISABLE_PASSPORT_AUTH = 87,INTERNET_OPTION_SEND_UTF8_SERVERNAME_TO_PROXY = 88,INTERNET_OPTION_EXEMPT_CONNECTION_LIMIT = 89,INTERNET_OPTION_ENABLE_PASSPORT_AUTH = 90,INTERNET_OPTION_HIBERNATE_INACTIVE_WORKER_THREADS = 91,INTERNET_OPTION_ACTIVATE_WORKER_THREADS = 92,INTERNET_OPTION_RESTORE_WORKER_THREAD_DEFAULTS = 93,INTERNET_OPTION_SOCKET_SEND_BUFFER_LENGTH = 94,INTERNET_OPTION_PROXY_SETTINGS_CHANGED = 95,INTERNET_FIRST_OPTION = 1,INTERNET_LAST_OPTION = 95,INTERNET_PRIORITY_FOREGROUND = 1000,INTERNET_HANDLE_TYPE_INTERNET = 1,INTERNET_HANDLE_TYPE_CONNECT_FTP = 2,INTERNET_HANDLE_TYPE_CONNECT_GOPHER = 3,INTERNET_HANDLE_TYPE_CONNECT_HTTP = 4,INTERNET_HANDLE_TYPE_FTP_FIND = 5,INTERNET_HANDLE_TYPE_FTP_FIND_HTML = 6,INTERNET_HANDLE_TYPE_FTP_FILE = 7,INTERNET_HANDLE_TYPE_FTP_FILE_HTML = 8,INTERNET_HANDLE_TYPE_GOPHER_FIND = 9,INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML = 10,INTERNET_HANDLE_TYPE_GOPHER_FILE = 11,INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML = 12,INTERNET_HANDLE_TYPE_HTTP_REQUEST = 13,INTERNET_HANDLE_TYPE_FILE_REQUEST = 14,};
enum MACRO_INTERNET_STATUS {INTERNET_STATUS_RESOLVING_NAME = 10,INTERNET_STATUS_NAME_RESOLVED = 11,INTERNET_STATUS_CONNECTING_TO_SERVER = 20,INTERNET_STATUS_CONNECTED_TO_SERVER = 21,INTERNET_STATUS_SENDING_REQUEST = 30,INTERNET_STATUS_REQUEST_SENT = 31,INTERNET_STATUS_RECEIVING_RESPONSE = 40,INTERNET_STATUS_RESPONSE_RECEIVED = 41,INTERNET_STATUS_CTL_RESPONSE_RECEIVED = 42,INTERNET_STATUS_PREFETCH = 43,INTERNET_STATUS_CLOSING_CONNECTION = 50,INTERNET_STATUS_CONNECTION_CLOSED = 51,INTERNET_STATUS_HANDLE_CREATED = 60,INTERNET_STATUS_HANDLE_CLOSING = 70,INTERNET_STATUS_DETECTING_PROXY = 80,INTERNET_STATUS_REQUEST_COMPLETE = 100,INTERNET_STATUS_REDIRECT = 110,INTERNET_STATUS_INTERMEDIATE_RESPONSE = 120,INTERNET_STATUS_USER_INPUT_REQUIRED = 140,INTERNET_STATUS_STATE_CHANGE = 200,INTERNET_STATUS_COOKIE_SENT = 320,INTERNET_STATUS_COOKIE_RECEIVED = 321,INTERNET_STATUS_COOKIE_STATE = 322,INTERNET_STATUS_COOKIE_SUPPRESSED = 323,INTERNET_STATUS_PRIVACY_IMPACTED = 324,INTERNET_STATUS_P3P_HEADER = 325,INTERNET_STATUS_P3P_POLICYREF = 326,INTERNET_STATUS_COOKIE_HISTORY = 327,INTERNET_STATE_CONNECTED = 1,INTERNET_STATE_DISCONNECTED = 2,INTERNET_STATE_DISCONNECTED_BY_USER = 16,INTERNET_STATE_IDLE = 256,INTERNET_STATE_BUSY = 512,INTERNET_INVALID_STATUS_CALLBACK = -1,};
enum MACRO_IOCTL_SMARTCARD {IOCTL_SMARTCARD_POWER = 3211268,IOCTL_SMARTCARD_GET_ATTRIBUTE = 3211272,IOCTL_SMARTCARD_SET_ATTRIBUTE = 3211276,IOCTL_SMARTCARD_CONFISCATE = 3211280,IOCTL_SMARTCARD_TRANSMIT = 3211284,IOCTL_SMARTCARD_EJECT = 3211288,IOCTL_SMARTCARD_SWALLOW = 3211292,IOCTL_SMARTCARD_IS_PRESENT = 3211304,IOCTL_SMARTCARD_IS_ABSENT = 3211308,IOCTL_SMARTCARD_SET_PROTOCOL = 3211312,IOCTL_SMARTCARD_GET_STATE = 3211320,IOCTL_SMARTCARD_GET_LAST_ERROR = 3211324,IOCTL_SMARTCARD_CANCEL_BLOCKING = 3211328,};
enum MACRO_I_IMAGECALLBACK {I_IMAGECALLBACK = -1,};
enum MACRO_KBDI_AUTOREPEAT {KBDI_AUTOREPEAT_SELECTIONS_INFO_ID = 2,KBDI_KEYBOARD_STATUS_ID = 3,KBDI_KEYBOARD_PRESENT = 1,KBDI_KEYBOARD_ENABLED = 2,KBDI_KEYBOARD_ENTER_ESC = 4,KBDI_KEYBOARD_ALPHA_NUM = 8,};
enum MACRO_LB_GETINPUTMODE {LB_GETINPUTMODE = 0x1C0,LB_SETINPUTMODE = 0x1C1,};
enum MACRO_LF_FULLFACESIZE {LF_FULLFACESIZE = 64,};
enum MACRO_LINEADDRESSMODE {LINEADDRESSMODE_ADDRESSID = 0x1,LINEADDRESSMODE_DIALABLEADDR = 0x2,};
enum MACRO_LINEADDRESSTYPE {LINEADDRESSTYPE_PHONENUMBER = 0x1,LINEADDRESSTYPE_SDP = 0x2,LINEADDRESSTYPE_EMAILNAME = 0x4,LINEADDRESSTYPE_DOMAINNAME = 0x8,LINEADDRESSTYPE_IPADDRESS = 0x10,};
enum MACRO_LINEADDRFEATURE {LINEADDRFEATURE_FORWARD = 0x1,LINEADDRFEATURE_MAKECALL = 0x2,LINEADDRFEATURE_PICKUP = 0x4,LINEADDRFEATURE_SETMEDIACONTROL = 0x8,LINEADDRFEATURE_SETTERMINAL = 0x10,LINEADDRFEATURE_SETUPCONF = 0x20,LINEADDRFEATURE_UNCOMPLETECALL = 0x40,LINEADDRFEATURE_UNPARK = 0x80,LINEADDRFEATURE_PICKUPHELD = 0x100,LINEADDRFEATURE_PICKUPGROUP = 0x200,LINEADDRFEATURE_PICKUPDIRECT = 0x400,LINEADDRFEATURE_PICKUPWAITING = 0x800,LINEADDRFEATURE_FORWARDFWD = 0x1000,LINEADDRFEATURE_FORWARDDND = 0x2000,};
enum MACRO_LINEAGENTSTATUS {LINEAGENTSTATUS_GROUP = 0x1,LINEAGENTSTATUS_STATE = 0x2,LINEAGENTSTATUS_NEXTSTATE = 0x4,LINEAGENTSTATUS_ACTIVITY = 0x8,LINEAGENTSTATUS_ACTIVITYLIST = 0x10,LINEAGENTSTATUS_GROUPLIST = 0x20,LINEAGENTSTATUS_CAPSCHANGE = 0x40,LINEAGENTSTATUS_VALIDSTATES = 0x80,LINEAGENTSTATUS_VALIDNEXTSTATES = 0x100,};
enum MACRO_LINECALLFEATURE {LINECALLFEATURE_ACCEPT = 0x1,LINECALLFEATURE_ADDTOCONF = 0x2,LINECALLFEATURE_ANSWER = 0x4,LINECALLFEATURE_BLINDTRANSFER = 0x8,LINECALLFEATURE_COMPLETECALL = 0x10,LINECALLFEATURE_COMPLETETRANSF = 0x20,LINECALLFEATURE_DIAL = 0x40,LINECALLFEATURE_DROP = 0x80,LINECALLFEATURE_GATHERDIGITS = 0x100,LINECALLFEATURE_GENERATEDIGITS = 0x200,LINECALLFEATURE_GENERATETONE = 0x400,LINECALLFEATURE_HOLD = 0x800,LINECALLFEATURE_MONITORDIGITS = 0x1000,LINECALLFEATURE_MONITORMEDIA = 0x2000,LINECALLFEATURE_MONITORTONES = 0x4000,LINECALLFEATURE_PARK = 0x8000,LINECALLFEATURE_PREPAREADDCONF = 0x10000,LINECALLFEATURE_REDIRECT = 0x20000,LINECALLFEATURE_REMOVEFROMCONF = 0x40000,LINECALLFEATURE_SECURECALL = 0x80000,LINECALLFEATURE_SENDUSERUSER = 0x100000,LINECALLFEATURE_SETCALLPARAMS = 0x200000,LINECALLFEATURE_SETMEDIACONTROL = 0x400000,LINECALLFEATURE_SETTERMINAL = 0x800000,LINECALLFEATURE_SETUPCONF = 0x1000000,LINECALLFEATURE_SETUPTRANSFER = 0x2000000,LINECALLFEATURE_SWAPHOLD = 0x4000000,LINECALLFEATURE_UNHOLD = 0x8000000,LINECALLFEATURE_RELEASEUSERUSERINFO = 0x10000000,LINECALLFEATURE_SETTREATMENT = 0x20000000,LINECALLFEATURE_SETQOS = 0x40000000,LINECALLFEATURE_SETCALLDATA = 0x80000000,};
enum MACRO_LINECALLPARTYID {LINECALLPARTYID_BLOCKED = 0x1,LINECALLPARTYID_OUTOFAREA = 0x2,LINECALLPARTYID_NAME = 0x4,LINECALLPARTYID_ADDRESS = 0x8,LINECALLPARTYID_PARTIAL = 0x10,LINECALLPARTYID_UNKNOWN = 0x20,LINECALLPARTYID_UNAVAIL = 0x40,};
enum MACRO_LINEDEVCAPFLAGS {LINEDEVCAPFLAGS_CROSSADDRCONF = 0x1,LINEDEVCAPFLAGS_HIGHLEVCOMP = 0x2,LINEDEVCAPFLAGS_LOWLEVCOMP = 0x4,LINEDEVCAPFLAGS_MEDIACONTROL = 0x8,LINEDEVCAPFLAGS_MULTIPLEADDR = 0x10,LINEDEVCAPFLAGS_CLOSEDROP = 0x20,LINEDEVCAPFLAGS_DIALBILLING = 0x40,LINEDEVCAPFLAGS_DIALQUIET = 0x80,LINEDEVCAPFLAGS_DIALDIALTONE = 0x100,LINEDEVCAPFLAGS_MSP = 0x200,LINEDEVCAPFLAGS_CALLHUB = 0x400,LINEDEVCAPFLAGS_CALLHUBTRACKING = 0x800,LINEDEVCAPFLAGS_PRIVATEOBJECTS = 0x1000,};
enum MACRO_LINEFORWARDMODE {LINEFORWARDMODE_UNCOND = 0x1,LINEFORWARDMODE_UNCONDINTERNAL = 0x2,LINEFORWARDMODE_UNCONDEXTERNAL = 0x4,LINEFORWARDMODE_UNCONDSPECIFIC = 0x8,LINEFORWARDMODE_BUSY = 0x10,LINEFORWARDMODE_BUSYINTERNAL = 0x20,LINEFORWARDMODE_BUSYEXTERNAL = 0x40,LINEFORWARDMODE_BUSYSPECIFIC = 0x80,LINEFORWARDMODE_NOANSW = 0x100,LINEFORWARDMODE_NOANSWINTERNAL = 0x200,LINEFORWARDMODE_NOANSWEXTERNAL = 0x400,LINEFORWARDMODE_NOANSWSPECIFIC = 0x800,LINEFORWARDMODE_BUSYNA = 0x1000,LINEFORWARDMODE_BUSYNAINTERNAL = 0x2000,LINEFORWARDMODE_BUSYNAEXTERNAL = 0x4000,LINEFORWARDMODE_BUSYNASPECIFIC = 0x8000,LINEFORWARDMODE_UNKNOWN = 0x10000,LINEFORWARDMODE_UNAVAIL = 0x20000,};
enum MACRO_LINEREQUESTMODE {LINEREQUESTMODE_MAKECALL = 0x1,LINEREQUESTMODE_MEDIACALL = 0x2,LINEREQUESTMODE_DROP = 0x4,};
enum MACRO_LINESPECIALINFO {LINESPECIALINFO_NOCIRCUIT = 0x1,LINESPECIALINFO_CUSTIRREG = 0x2,LINESPECIALINFO_REORDER = 0x4,LINESPECIALINFO_UNKNOWN = 0x8,LINESPECIALINFO_UNAVAIL = 0x10,};
enum MACRO_LINETERMSHARING {LINETERMSHARING_PRIVATE = 0x1,LINETERMSHARING_SHAREDEXCL = 0x2,LINETERMSHARING_SHAREDCONF = 0x4,};
enum MACRO_LVM_GETITEMTEXT {LVM_GETITEMTEXT = 4141,LVM_SETITEMTEXT = 4142,};
enum MACRO_MAPI_UNRESOLVED {MAPI_UNRESOLVED = 0x0,MAPI_AMBIGUOUS = 0x1,MAPI_RESOLVED = 0x2,MAPI_SEND_NO_RICH_INFO = 0x10000,MAPI_DIAG_NO_DIAGNOSTIC = 0xFFFFFFFF,MAPI_DIAG_OR_NAME_UNRECOGNIZED = 0x0,MAPI_DIAG_OR_NAME_AMBIGUOUS = 0x1,MAPI_DIAG_MTS_CONGESTED = 0x2,MAPI_DIAG_LOOP_DETECTED = 0x3,MAPI_DIAG_RECIPIENT_UNAVAILABLE = 0x4,MAPI_DIAG_MAXIMUM_TIME_EXPIRED = 0x5,MAPI_DIAG_EITS_UNSUPPORTED = 0x6,MAPI_DIAG_CONTENT_TOO_LONG = 0x7,MAPI_DIAG_IMPRACTICAL_TO_CONVERT = 0x8,MAPI_DIAG_PROHIBITED_TO_CONVERT = 0x9,MAPI_DIAG_CONVERSION_UNSUBSCRIBED = 0xA,MAPI_DIAG_PARAMETERS_INVALID = 0xB,MAPI_DIAG_CONTENT_SYNTAX_IN_ERROR = 0xC,MAPI_DIAG_LENGTH_CONSTRAINT_VIOLATD = 0xD,MAPI_DIAG_NUMBER_CONSTRAINT_VIOLATD = 0xE,MAPI_DIAG_CONTENT_TYPE_UNSUPPORTED = 0xF,MAPI_DIAG_TOO_MANY_RECIPIENTS = 0x10,MAPI_DIAG_NO_BILATERAL_AGREEMENT = 0x11,MAPI_DIAG_CRITICAL_FUNC_UNSUPPORTED = 0x12,MAPI_DIAG_CONVERSION_LOSS_PROHIB = 0x13,MAPI_DIAG_LINE_TOO_LONG = 0x14,MAPI_DIAG_PAGE_TOO_LONG = 0x15,MAPI_DIAG_PICTORIAL_SYMBOL_LOST = 0x16,MAPI_DIAG_PUNCTUATION_SYMBOL_LOST = 0x17,MAPI_DIAG_ALPHABETIC_CHARACTER_LOST = 0x18,MAPI_DIAG_MULTIPLE_INFO_LOSSES = 0x19,MAPI_DIAG_REASSIGNMENT_PROHIBITED = 0x1A,MAPI_DIAG_REDIRECTION_LOOP_DETECTED = 0x1B,MAPI_DIAG_EXPANSION_PROHIBITED = 0x1C,MAPI_DIAG_SUBMISSION_PROHIBITED = 0x1D,MAPI_DIAG_EXPANSION_FAILED = 0x1E,MAPI_DIAG_RENDITION_UNSUPPORTED = 0x1F,MAPI_DIAG_MAIL_ADDRESS_INCORRECT = 0x20,MAPI_DIAG_MAIL_OFFICE_INCOR_OR_INVD = 0x21,MAPI_DIAG_MAIL_ADDRESS_INCOMPLETE = 0x22,MAPI_DIAG_MAIL_RECIPIENT_UNKNOWN = 0x23,MAPI_DIAG_MAIL_RECIPIENT_DECEASED = 0x24,MAPI_DIAG_MAIL_ORGANIZATION_EXPIRED = 0x25,MAPI_DIAG_MAIL_REFUSED = 0x26,MAPI_DIAG_MAIL_UNCLAIMED = 0x27,MAPI_DIAG_MAIL_RECIPIENT_MOVED = 0x28,MAPI_DIAG_MAIL_RECIPIENT_TRAVELLING = 0x29,MAPI_DIAG_MAIL_RECIPIENT_DEPARTED = 0x2A,MAPI_DIAG_MAIL_NEW_ADDRESS_UNKNOWN = 0x2B,MAPI_DIAG_MAIL_FORWARDING_UNWANTED = 0x2C,MAPI_DIAG_MAIL_FORWARDING_PROHIB = 0x2D,MAPI_DIAG_SECURE_MESSAGING_ERROR = 0x2E,MAPI_DIAG_DOWNGRADING_IMPOSSIBLE = 0x2F,};
enum MACRO_MAXIMUM_ALLOWED {MAXIMUM_ALLOWED = 0x2000000,};
enum MACRO_MAXIMUM_REPARSE {MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384,};
enum MACRO_MAX_DESCRIPTION {MAX_DESCRIPTION = 128,MAX_URL_LENGTH = 2048,};
enum MACRO_MCAST_MFE_STATS {MCAST_MFE_STATS_EX = 35,};
enum MACRO_NAME_INFO_LEVEL {UNIVERSAL_NAME_INFO_LEVEL = 0x1,REMOTE_NAME_INFO_LEVEL = 0x2,};
enum MACRO_OID_DOT11_MULTI {OID_DOT11_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED = 218170186,OID_DOT11_MULTI_DOMAIN_CAPABILITY_ENABLED = 218170187,OID_DOT11_COUNTRY_STRING = 218170188,OID_DOT11_MULTI_DOMAIN_CAPABILITY = 218170189,OID_DOT11_EHCC_PRIME_RADIX = 218170190,OID_DOT11_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX = 218170191,OID_DOT11_EHCC_CAPABILITY_IMPLEMENTED = 218170192,OID_DOT11_EHCC_CAPABILITY_ENABLED = 218170193,OID_DOT11_HOP_ALGORITHM_ADOPTED = 218170194,OID_DOT11_RANDOM_TABLE_FLAG = 218170195,OID_DOT11_NUMBER_OF_HOPPING_SETS = 218170196,OID_DOT11_HOP_MODULUS = 218170197,OID_DOT11_HOP_OFFSET = 218170198,OID_DOT11_HOPPING_PATTERN = 218170199,OID_DOT11_RANDOM_TABLE_FIELD_NUMBER = 218170200,OID_DOT11_WPA_TSC = 218170201,OID_DOT11_RSSI_RANGE = 218170202,OID_DOT11_RF_USAGE = 218170203,OID_DOT11_NIC_SPECIFIC_EXTENSION = 218170204,OID_DOT11_AP_JOIN_REQUEST = 218170205,};
enum MACRO_OID_DOT11_SHORT {OID_DOT11_SHORT_PREAMBLE_OPTION_IMPLEMENTED = 218170181,OID_DOT11_PBCC_OPTION_IMPLEMENTED = 218170182,OID_DOT11_CHANNEL_AGILITY_PRESENT = 218170183,OID_DOT11_CHANNEL_AGILITY_ENABLED = 218170184,OID_DOT11_HR_CCA_MODE_SUPPORTED = 218170185,};
enum MACRO_OID_DOT11_START {OID_DOT11_START_REQUEST = 218170126,OID_DOT11_UPDATE_IE = 218170127,OID_DOT11_RESET_REQUEST = 218170128,OID_DOT11_NIC_POWER_STATE = 218170129,OID_DOT11_OPTIONAL_CAPABILITY = 218170130,OID_DOT11_CURRENT_OPTIONAL_CAPABILITY = 218170131,OID_DOT11_STATION_ID = 218170132,OID_DOT11_MEDIUM_OCCUPANCY_LIMIT = 218170133,OID_DOT11_CF_POLLABLE = 218170134,OID_DOT11_CFP_PERIOD = 218170135,OID_DOT11_CFP_MAX_DURATION = 218170136,OID_DOT11_POWER_MGMT_MODE = 218170137,};
enum MACRO_PACKAGE_APPNAME {PACKAGE_APPNAME_TEXT_LEN = 128,PACKAGE_SHORT_TEXT_LEN = 140,PACKAGE_LONG_TEXT_LEN = 512,};
enum MACRO_PAGESETUPDLGORD {PAGESETUPDLGORD = 1546,};
enum MACRO_PHONEBUTTONMODE {PHONEBUTTONMODE_DUMMY = 0x1,PHONEBUTTONMODE_CALL = 0x2,PHONEBUTTONMODE_FEATURE = 0x4,PHONEBUTTONMODE_KEYPAD = 0x8,PHONEBUTTONMODE_LOCAL = 0x10,PHONEBUTTONMODE_DISPLAY = 0x20,};
enum MACRO_PHYSICALOFFSETX {PHYSICALOFFSETX = 112,};
enum MACRO_PHYSICALOFFSETY {PHYSICALOFFSETY = 113,};
enum MACRO_PKCS_ATTRIBUTES {PKCS_ATTRIBUTES = 48,PKCS_SORTED_CTL = 49,};
enum MACRO_PROFILENAMESIZE {PROFILENAMESIZE = 32,};
enum MACRO_PUBLICKEYBLOBEX {PUBLICKEYBLOBEX = 0xA,};
enum MACRO_QUERYDIBSUPPORT {QUERYDIBSUPPORT = 3073,};
enum MACRO_QUERY_VALIDBITS {QUERY_VALIDBITS = 3,};
enum MACRO_REGISTERSCANNER {REGISTERSCANNER_REREGISTER = 1,};
enum MACRO_SCHANNEL_SECRET {SCHANNEL_SECRET_TYPE_CAPI = 0x1,SCHANNEL_SECRET_PRIVKEY = 0x2,};
enum MACRO_SCRIPTINTERRUPT {SCRIPTINTERRUPT_DEBUG = 0x1,SCRIPTINTERRUPT_RAISEEXCEPTION = 0x2,SCRIPTINTERRUPT_ALL_FLAGS = 0x3,};
enum MACRO_SDP_ENUMDEVICES {SDP_ENUMDEVICES = 0x10,SDP_SET = 0x11,SDP_QUERY = 0x12,};
enum MACRO_SECURITY_NATIVE {SECURITY_NATIVE_DREP = 0x10,SECURITY_NETWORK_DREP = 0x0,};
enum MACRO_SECURITY_SIGNED {SECURITY_SIGNED = 0x1,SECURITY_ENCRYPTED = 0x2,};
enum MACRO_SERVICE_SUCCESS {SERVICE_SUCCESS = 0,SERVICE_STATE_OFF = 0,SERVICE_STATE_ON = 1,SERVICE_STATE_STARTING_UP = 2,SERVICE_STATE_SHUTTING_DOWN = 3,SERVICE_STATE_UNLOADING = 4,SERVICE_STATE_UNINITIALIZED = 5,SERVICE_STATE_UNKNOWN = -1,SERVICE_INIT_STARTED = 0,SERVICE_INIT_STOPPED = 1,SERVICE_INIT_STANDALONE = 2,SERVICE_CALLER_PROCESS_SERVICES_EXE = 1,SERVICE_CALLER_PROCESS_DEVICE_EXE = 2,SERVICE_CALLER_PROCESS_OTHER_EXE = 100,};
enum MACRO_SORTORDERSPECEX {SORTORDERSPECEX_VERSION = 1,};
enum MACRO_SORT_STRINGSORT {SORT_STRINGSORT = 0x1000,};
enum MACRO_STATUS_SEVERITY {STATUS_SEVERITY_WARNING = 0x2,STATUS_SEVERITY_SUCCESS = 0x0,STATUS_SEVERITY_INFORMATIONAL = 0x1,STATUS_SEVERITY_ERROR = 0x3,};
enum MACRO_STATUS_VALIDATE {STATUS_VALIDATE_STATE = 0x1,STATUS_SETTINGS_DIALOG = 0x2,STATUS_CHANGE_PASSWORD = 0x4,STATUS_FLUSH_QUEUES = 0x8,STATUS_DEFAULT_OUTBOUND = 0x1,STATUS_DEFAULT_STORE = 0x2,STATUS_PRIMARY_IDENTITY = 0x4,STATUS_SIMPLE_STORE = 0x8,STATUS_XP_PREFER_LAST = 0x10,STATUS_NO_PRIMARY_IDENTITY = 0x20,STATUS_NO_DEFAULT_STORE = 0x40,STATUS_TEMP_SECTION = 0x80,STATUS_OWN_STORE = 0x100,STATUS_NEED_IPM_TREE = 0x800,STATUS_PRIMARY_STORE = 0x1000,STATUS_SECONDARY_STORE = 0x2000,STATUS_AVAILABLE = 0x1,STATUS_OFFLINE = 0x2,STATUS_FAILURE = 0x4,STATUS_INBOUND_ENABLED = 0x10000,STATUS_INBOUND_ACTIVE = 0x20000,STATUS_INBOUND_FLUSH = 0x40000,STATUS_OUTBOUND_ENABLED = 0x100000,STATUS_OUTBOUND_ACTIVE = 0x200000,STATUS_OUTBOUND_FLUSH = 0x400000,STATUS_REMOTE_ACCESS = 0x800000,};
enum MACRO_SYNCMGRLOGERROR {SYNCMGRLOGERROR_ERRORFLAGS = 0x1,SYNCMGRLOGERROR_ERRORID = 0x2,SYNCMGRLOGERROR_ITEMID = 0x4,};
enum MACRO_SYNCSCHEDWIZARD {SYNCSCHEDWIZARD_SHOWALLHANDLERITEMS = 0x1000,};
enum MACRO_THREAD_PRIORITY {THREAD_PRIORITY_TIME_CRITICAL = 0,THREAD_PRIORITY_HIGHEST = 1,THREAD_PRIORITY_ABOVE_NORMAL = 2,THREAD_PRIORITY_NORMAL = 3,THREAD_PRIORITY_BELOW_NORMAL = 4,THREAD_PRIORITY_LOWEST = 5,THREAD_PRIORITY_ABOVE_IDLE = 6,THREAD_PRIORITY_IDLE = 7,THREAD_PRIORITY_ERROR_RETURN = 2147483647,};
enum MACRO_TVM_GETITEMRECT {TVM_GETITEMRECT = 4356,TVM_GETCOUNT = 4357,TVM_GETINDENT = 4358,TVM_SETINDENT = 4359,TVM_GETIMAGELIST = 4360,};
enum MACRO_URLPOLICY_ALLOW {URLPOLICY_ALLOW = 0x0,URLPOLICY_QUERY = 0x1,URLPOLICY_DISALLOW = 0x3,URLPOLICY_NOTIFY_ON_ALLOW = 0x10,URLPOLICY_NOTIFY_ON_DISALLOW = 0x20,URLPOLICY_LOG_ON_ALLOW = 0x40,URLPOLICY_LOG_ON_DISALLOW = 0x80,URLPOLICY_MASK_PERMISSIONS = 0xF,URLPOLICY_DONTCHECKDLGBOX = 0x100,};
enum MACRO_VIEW_LARGEICONS {VIEW_LARGEICONS = 0,VIEW_SMALLICONS = 1,VIEW_LIST = 2,VIEW_DETAILS = 3,VIEW_SORTNAME = 4,VIEW_SORTSIZE = 5,VIEW_SORTDATE = 6,VIEW_SORTTYPE = 7,VIEW_PARENTFOLDER = 8,VIEW_NETCONNECT = 9,VIEW_NETDISCONNECT = 10,VIEW_NEWFOLDER = 11,};
enum MACRO_XP_HEADER_CACHE {REFRESH_XP_HEADER_CACHE = 0x10000,PROCESS_XP_HEADER_CACHE = 0x20000,};
enum MACRO_ckidAVINEWINDEX {ckidAVINEWINDEX = 829973609,};
enum MACRO_ckidAVIOLDINDEX {ckidAVIOLDINDEX = 829973609,};
enum MACRO_cktypePALchange {cktypePALchange = 25456,};
enum MACRO_cktypeWAVEbytes {cktypeWAVEbytes = 25207,};
enum MACRO_fdexEnumDefault {fdexEnumDefault = 0x1,fdexEnumAll = 0x2,};
enum MACRO_iitAUTHENTICATE {iitAUTHENTICATE = 1,};
enum MACRO_streamtypeAUDIO {streamtypeAUDIO = 1935963489,};
enum MACRO_streamtypeVIDEO {streamtypeVIDEO = 1935960438,};
typedef struct _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
typedef struct _MIB_IPMCAST_MFE_STATS MIB_IPMCAST_MFE_STATS;
typedef struct _MIB_IPMCAST_OIF_STATS MIB_IPMCAST_OIF_STATS;
enum MPReadyStateConstants {mpReadyStateUninitialized = 0x0,mpReadyStateLoading = 0x1,mpReadyStateInteractive = 0x3,mpReadyStateComplete = 0x4,};
enum MPShowDialogConstants {mpShowDialogHelp = 0x0,mpShowDialogStatistics = 0x1,mpShowDialogOptions = 0x2,mpShowDialogContextMenu = 0x3,};
enum MPfDialogAvailability {mpfFilePropertiesDlg = 0x1,mpfGotoDlg = 0x2,};
typedef struct tagMQPROPERTYRESTRICTION MQPROPERTYRESTRICTION;
typedef struct _NDISUIO_QUERY_BINDING NDISUIO_QUERY_BINDING;
typedef struct _NDIS_802_11_FIXED_IEs NDIS_802_11_FIXED_IEs;
typedef struct _NDIS_BPC_ADAPTER_CAPS NDIS_BPC_ADAPTER_CAPS;
typedef struct _NDIS_IRDA_PACKET_INFO NDIS_IRDA_PACKET_INFO;
typedef struct _NDIS_PNP_CAPABILITIES NDIS_PNP_CAPABILITIES;
typedef struct _NDIS_STATISTICS_VALUE NDIS_STATISTICS_VALUE;
typedef struct _NDIS_TAPI_SECURE_CALL NDIS_TAPI_SECURE_CALL;
typedef struct tACMDRVSTREAMINSTANCE *PACMDRVSTREAMINSTANCE;
typedef IAMDevMemoryAllocator *PAMDEVMEMORYALLOCATOR;
typedef struct _BTH_SOCKOPT_SECURITY *PBTH_SOCKOPT_SECURITY;
typedef struct __CEL_THREAD_TERMINATE *PCEL_THREAD_TERMINATE;
typedef struct _CERT_CREDENTIAL_INFO *PCERT_CREDENTIAL_INFO;
typedef struct _CERT_GENERAL_SUBTREE *PCERT_GENERAL_SUBTREE;
typedef struct _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;
typedef struct UserNotificationType *PCE_USER_NOTIFICATION;
typedef struct _CMC_TAGGED_ATTRIBUTE *PCMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_OTHER_MSG *PCMC_TAGGED_OTHER_MSG;
typedef struct _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;
typedef struct _CO_TAPI_ADDRESS_CAPS *PCO_TAPI_ADDRESS_CAPS;
typedef struct _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;
typedef struct _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;
typedef struct _DEV_BROADCAST_HANDLE *PDEV_BROADCAST_HANDLE;
typedef struct _DEV_BROADCAST_PORT_A *PDEV_BROADCAST_PORT_A;
typedef struct _DEV_BROADCAST_PORT_W *PDEV_BROADCAST_PORT_W;
typedef struct IDirect3DBaseTexture8 *PDIRECT3DBASETEXTURE8;
typedef struct IDirect3DCubeTexture8 *PDIRECT3DCUBETEXTURE8;
typedef struct IDirect3DIndexBuffer8 *PDIRECT3DINDEXBUFFER8;
typedef struct _DOT11_COUNTERS_ENTRY *PDOT11_COUNTERS_ENTRY;
typedef struct _DOT11_INTEGRITY_FAIL *PDOT11_INTEGRITY_FAIL;
typedef struct _DOT11_RECEIVE_UPCALL *PDOT11_RECEIVE_UPCALL;
typedef struct _DOT11_SEND_8021X_PKT *PDOT11_SEND_8021X_PKT;
typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;
typedef union _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;
typedef struct _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;
typedef struct __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;
typedef struct _GEN_GET_NETCARD_TIME *PGEN_GET_NETCARD_TIME;
typedef struct _HTTP_FILTER_RAW_DATA *PHTTP_FILTER_RAW_DATA;
typedef IAMTimecodeGenerator *PIAMTIMECODEGENERATOR;
typedef struct _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
typedef struct _IMAGE_STUB_DIRECTORY *PIMAGE_STUB_DIRECTORY;
typedef struct _IP_ADAPTER_ADDRESSES *PIP_ADAPTER_ADDRESSES;
typedef struct _IP_ADAPTER_INDEX_MAP *PIP_ADAPTER_INDEX_MAP;
typedef struct _IP_ADAPTER_ORDER_MAP *PIP_ADAPTER_ORDER_MAP;
typedef struct _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;
typedef struct _MIB_IPMCAST_BOUNDARY *PMIB_IPMCAST_BOUNDARY;
typedef struct _MIB_IPMCAST_IF_ENTRY *PMIB_IPMCAST_IF_ENTRY;
typedef struct _MIB_IPMCAST_IF_TABLE *PMIB_IPMCAST_IF_TABLE;
typedef struct NDIS_BPC_DEVICE_CAPS *PNDIS_BPC_DEVICE_CAPS;
typedef struct NDIS_BPC_POOL_RETURN *PNDIS_BPC_POOL_RETURN;
typedef struct _NDIS_TAPI_CLOSE_CALL *PNDIS_TAPI_CLOSE_CALL;
typedef struct _NETWORK_ADDRESS_LIST *PNETWORK_ADDRESS_LIST;
typedef struct _OFFLOAD_IPSEC_ADD_SA *POFFLOAD_IPSEC_ADD_SA;
typedef struct _POWER_DEVICE_TIMEOUTS POWER_DEVICE_TIMEOUTS;
typedef struct _PST_AUTHENTICODEDATA *PPST_AUTHENTICODEDATA;
typedef struct _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D *PRPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;
typedef struct _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
typedef struct _SCH_CRED_PUBLIC_CAPI *PSCH_CRED_PUBLIC_CAPI;
typedef struct _SCH_CRED_SECRET_CAPI *PSCH_CRED_SECRET_CAPI;
typedef struct SDP_LARGE_INTEGER_16 *PSDP_LARGE_INTEGER_16;
typedef struct _SEC_NEGOTIATION_INFO *PSEC_NEGOTIATION_INFO;
typedef struct _ShellAppCategoryList *PSHELLAPPCATEGORYLIST;
typedef struct _SecPkgContext_NamesA *PSecPkgContext_NamesA;
typedef struct _SecPkgContext_NamesW *PSecPkgContext_NamesW;
typedef struct _SecPkgCred_CacheInfo *PSecPkgCred_CacheInfo;
typedef struct _USB_POWER_DESCRIPTOR *PUSB_POWER_DESCRIPTOR;
typedef struct _WCE_IRDA_DEVICE_INFO *PWCE_IRDA_DEVICE_INFO;
typedef struct _WSAServiceClassInfoA *PWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *PWSASERVICECLASSINFOW;
typedef struct _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
enum RTC_CLIENT_EVENT_TYPE {RTCCET_VOLUME_CHANGE = 0x0,RTCCET_DEVICE_CHANGE = 0x1,RTCCET_NETWORK_QUALITY_CHANGE = 0x2,RTCCET_ASYNC_CLEANUP_DONE = 0x3,};
enum RTC_PARTICIPANT_STATE {RTCPS_IDLE = 0x0,RTCPS_PENDING = 0x1,RTCPS_INCOMING = 0x2,RTCPS_ANSWERING = 0x3,RTCPS_INPROGRESS = 0x4,RTCPS_ALERTING = 0x5,RTCPS_CONNECTED = 0x6,RTCPS_DISCONNECTING = 0x7,RTCPS_DISCONNECTED = 0x8,};
enum RTC_PRESENCE_PROPERTY {RTCPP_PHONENUMBER = 0x0,RTCPP_DISPLAYNAME = 0x1,RTCPP_EMAIL = 0x2,RTCPP_DEVICE_NAME = 0x3,RTCPP_MULTIPLE = 0x4,};
typedef struct sierra_adpcmwaveformat_tag SIERRAADPCMWAVEFORMAT;
typedef struct _SPC_SERIALIZED_OBJECT SPC_SERIALIZED_OBJECT;
enum SUBSCRIPTIONINFOFLAGS {SUBSINFO_SCHEDULE = 0x1,SUBSINFO_RECURSE = 0x2,SUBSINFO_WEBCRAWL = 0x4,SUBSINFO_MAILNOT = 0x8,SUBSINFO_MAXSIZEKB = 0x10,SUBSINFO_USER = 0x20,SUBSINFO_PASSWORD = 0x40,SUBSINFO_TASKFLAGS = 0x100,SUBSINFO_GLEAM = 0x200,SUBSINFO_CHANGESONLY = 0x400,SUBSINFO_CHANNELFLAGS = 0x800,SUBSINFO_FRIENDLYNAME = 0x2000,SUBSINFO_NEEDPASSWORD = 0x4000,SUBSINFO_TYPE = 0x8000,};
typedef struct _SecPkgContext_DceInfo SecPkgContext_DceInfo;
struct SoapTypeMapperFactory;
typedef struct _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
struct ThreadDialogProcParam;
typedef struct _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
typedef struct _USB_COMMON_DESCRIPTOR USB_COMMON_DESCRIPTOR;
typedef struct _USB_DEVICE_DESCRIPTOR USB_DEVICE_DESCRIPTOR;
typedef struct _USB_STRING_DESCRIPTOR USB_STRING_DESCRIPTOR;
enum WEBCRAWL_RECURSEFLAGS {WEBCRAWL_DONT_MAKE_STICKY = 0x1,WEBCRAWL_GET_IMAGES = 0x2,WEBCRAWL_GET_VIDEOS = 0x4,WEBCRAWL_GET_BGSOUNDS = 0x8,WEBCRAWL_GET_CONTROLS = 0x10,WEBCRAWL_LINKS_ELSEWHERE = 0x20,WEBCRAWL_IGNORE_ROBOTSTXT = 0x80,WEBCRAWL_ONLY_LINKS_TO_HTML = 0x100,};
typedef struct WINTRUST_CATALOG_INFO_ WINTRUST_CATALOG_INFO;
struct WebViewFolderContents;
enum _AM_ASPECT_RATIO_MODE {AM_ARMODE_STRETCHED = 0x0,AM_ARMODE_LETTER_BOX = 0x1,AM_ARMODE_CROP = 0x2,AM_ARMODE_STRETCHED_AS_PRIMARY = 0x3,};
enum _AM_FILTER_MISC_FLAGS {AM_FILTER_MISC_FLAGS_IS_RENDERER = 0x1,AM_FILTER_MISC_FLAGS_IS_SOURCE = 0x2,};
enum _BEHAVIOR_EVENT_FLAGS {BEHAVIOREVENTFLAGS_BUBBLE = 0x1,BEHAVIOREVENTFLAGS_STANDARDADDITIVE = 0x2,BEHAVIOR_EVENT_FLAGS_Max = 0x7FFFFFFF,};
enum _BEHAVIOR_LAYOUT_INFO {BEHAVIORLAYOUTINFO_FULLDELEGATION = 0x1,BEHAVIORLAYOUTINFO_MODIFYNATURAL = 0x2,BEHAVIORLAYOUTINFO_MAPSIZE = 0x4,BEHAVIOR_LAYOUT_INFO_Max = 0x7FFFFFFF,};
enum _BEHAVIOR_LAYOUT_MODE {BEHAVIORLAYOUTMODE_NATURAL = 0x1,BEHAVIORLAYOUTMODE_MINWIDTH = 0x2,BEHAVIORLAYOUTMODE_MAXWIDTH = 0x4,BEHAVIORLAYOUTMODE_MEDIA_RESOLUTION = 0x4000,BEHAVIORLAYOUTMODE_FINAL_PERCENT = 0x8000,BEHAVIOR_LAYOUT_MODE_Max = 0x7FFFFFFF,};
enum _BEHAVIOR_RENDER_INFO {BEHAVIORRENDERINFO_BEFOREBACKGROUND = 0x1,BEHAVIORRENDERINFO_AFTERBACKGROUND = 0x2,BEHAVIORRENDERINFO_BEFORECONTENT = 0x4,BEHAVIORRENDERINFO_AFTERCONTENT = 0x8,BEHAVIORRENDERINFO_AFTERFOREGROUND = 0x20,BEHAVIORRENDERINFO_ABOVECONTENT = 0x28,BEHAVIORRENDERINFO_ALLLAYERS = 0xFF,BEHAVIORRENDERINFO_DISABLEBACKGROUND = 0x100,BEHAVIORRENDERINFO_DISABLENEGATIVEZ = 0x200,BEHAVIORRENDERINFO_DISABLECONTENT = 0x400,BEHAVIORRENDERINFO_DISABLEPOSITIVEZ = 0x800,BEHAVIORRENDERINFO_DISABLEALLLAYERS = 0xF00,BEHAVIORRENDERINFO_HITTESTING = 0x1000,BEHAVIORRENDERINFO_SURFACE = 0x100000,BEHAVIORRENDERINFO_3DSURFACE = 0x200000,BEHAVIOR_RENDER_INFO_Max = 0x7FFFFFFF,};
enum _CEDEVICE_POWER_STATE {PwrDeviceUnspecified = 0xFFFFFFFF,D0 = 0x0,D1 = 0x1,D2 = 0x2,D3 = 0x3,D4 = 0x4,PwrDeviceMaximum = 0x5,};
enum _CM_SERVICE_LOAD_TYPE {BootLoad = 0x0,SystemLoad = 0x1,AutoLoad = 0x2,DemandLoad = 0x3,DisableLoad = 0x4,};
enum _CM_SERVICE_NODE_TYPE {DriverType = 0x1,FileSystemType = 0x2,Win32ServiceOwnProcess = 0x10,Win32ServiceShareProcess = 0x20,AdapterType = 0x4,RecognizerType = 0x8,};
enum _D3DTEXTUREFILTERTYPE {D3DTEXF_NONE = 0x0,D3DTEXF_POINT = 0x1,D3DTEXF_LINEAR = 0x2,D3DTEXF_ANISOTROPIC = 0x3,D3DTEXF_FLATCUBIC = 0x4,D3DTEXF_GAUSSIANCUBIC = 0x5,D3DTEXF_FORCE_DWORD = 0x7FFFFFFF,};
struct _IDirectControlEvents {struct _IDirectControlEventsVtbl *lpVtbl;};
enum _IO_ALLOCATION_ACTION {KeepObject = 0x1,DeallocateObject = 0x2,DeallocateObjectKeepRegisters = 0x3,};
enum _NDIS_HARDWARE_STATUS {NdisHardwareStatusReady = 0x0,NdisHardwareStatusInitializing = 0x1,NdisHardwareStatusReset = 0x2,NdisHardwareStatusClosing = 0x3,NdisHardwareStatusNotReady = 0x4,};
enum _NDIS_PHYSICAL_MEDIUM {NdisPhysicalMediumUnspecified = 0x0,NdisPhysicalMediumWirelessLan = 0x1,NdisPhysicalMediumCableModem = 0x2,NdisPhysicalMediumPhoneLine = 0x3,NdisPhysicalMediumPowerLine = 0x4,NdisPhysicalMediumDSL = 0x5,NdisPhysicalMediumFibreChannel = 0x6,NdisPhysicalMedium1394 = 0x7,NdisPhysicalMediumWirelessWan = 0x8,NdisPhysicalMediumNativeWiFi = 0x9,NdisPhysicalMediumMax = 0xA,};
struct _RPC_PROTSEQ_ENDPOINT {unsigned char *RpcProtocolSequence;unsigned char *Endpoint;};
enum _SERVERXMLHTTP_OPTION {SXH_OPTION_URL_CODEPAGE = 0x0,SXH_OPTION_ESCAPE_PERCENT_IN_URL = 0x1,SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 0x2,SXH_OPTION_SELECT_CLIENT_SSL_CERT = 0x3,};
enum _htmlMarqueeDirection {htmlMarqueeDirectionleft = 0x1,htmlMarqueeDirectionright = 0x3,htmlMarqueeDirectionup = 0x5,htmlMarqueeDirectiondown = 0x7,htmlMarqueeDirection_Max = 0x7FFFFFFF,};
enum _styleTextJustifyTrim {styleTextJustifyTrimNotSet = 0x0,styleTextJustifyTrimNone = 0x1,styleTextJustifyTrimPunctuation = 0x2,styleTextJustifyTrimPunctAndKana = 0x3,styleTextJustifyTrim_Max = 0x7FFFFFFF,};
enum _tagSYNCMGRERRORFLAGS {SYNCMGRERRORFLAG_ENABLEJUMPTEXT = 0x1,};
enum tagDVD_AUDIO_LANG_EXT {DVD_AUD_EXT_NotSpecified = 0x0,DVD_AUD_EXT_Captions = 0x1,DVD_AUD_EXT_VisuallyImpaired = 0x2,DVD_AUD_EXT_DirectorComments1 = 0x3,DVD_AUD_EXT_DirectorComments2 = 0x4,};
enum tagDVD_PARENTAL_LEVEL {DVD_PARENTAL_LEVEL_8 = 0x8000,DVD_PARENTAL_LEVEL_7 = 0x4000,DVD_PARENTAL_LEVEL_6 = 0x2000,DVD_PARENTAL_LEVEL_5 = 0x1000,DVD_PARENTAL_LEVEL_4 = 0x800,DVD_PARENTAL_LEVEL_3 = 0x400,DVD_PARENTAL_LEVEL_2 = 0x200,DVD_PARENTAL_LEVEL_1 = 0x100,};
enum tagDVD_TIMECODE_FLAGS {DVD_TC_FLAG_25fps = 0x1,DVD_TC_FLAG_30fps = 0x2,DVD_TC_FLAG_DropFrame = 0x4,DVD_TC_FLAG_Interpolated = 0x8,};
enum tagEX_PROP_INFO_FLAGS {EX_PROP_INFO_ID = 0x100,EX_PROP_INFO_NTYPE = 0x200,EX_PROP_INFO_NVALUE = 0x400,EX_PROP_INFO_LOCKBYTES = 0x800,EX_PROP_INFO_DEBUGEXTPROP = 0x1000,};
enum tagIMAP_RESPONSE_TYPE {irtERROR_NOTIFICATION = 0x0,irtCOMMAND_COMPLETION = 0x1,irtSERVER_ALERT = 0x2,irtPARSE_ERROR = 0x3,irtMAILBOX_UPDATE = 0x4,irtDELETED_MSG = 0x5,irtFETCH_BODY = 0x6,irtUPDATE_MSG = 0x7,irtAPPLICABLE_FLAGS = 0x8,irtPERMANENT_FLAGS = 0x9,irtUIDVALIDITY = 0xA,irtREADWRITE_STATUS = 0xB,irtTRYCREATE = 0xC,irtSEARCH = 0xD,irtMAILBOX_LISTING = 0xE,irtMAILBOX_STATUS = 0xF,irtAPPEND_PROGRESS = 0x10,irtUPDATE_MSG_EX = 0x11,};
enum tagNETCON_CHOOSEFLAGS {NCCHF_CONNECT = 0x1,NCCHF_CAPTION = 0x2,NCCHF_OKBTTNTEXT = 0x4,NCCHF_DISABLENEW = 0x8,NCCHF_AUTOSELECT = 0x10,};
enum tagOBJECT_ATTRIB_FLAG {OBJECT_ATTRIB_NO_ATTRIB = 0x0,OBJECT_ATTRIB_NO_NAME = 0x1,OBJECT_ATTRIB_NO_TYPE = 0x2,OBJECT_ATTRIB_NO_VALUE = 0x4,OBJECT_ATTRIB_VALUE_IS_INVALID = 0x8,OBJECT_ATTRIB_VALUE_IS_OBJECT = 0x10,OBJECT_ATTRIB_VALUE_IS_ENUM = 0x20,OBJECT_ATTRIB_VALUE_IS_CUSTOM = 0x40,OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE = 0x70,OBJECT_ATTRIB_VALUE_HAS_CODE = 0x80,OBJECT_ATTRIB_TYPE_IS_OBJECT = 0x100,OBJECT_ATTRIB_TYPE_HAS_CODE = 0x200,OBJECT_ATTRIB_TYPE_IS_EXPANDABLE = 0x100,OBJECT_ATTRIB_SLOT_IS_CATEGORY = 0x400,OBJECT_ATTRIB_VALUE_READONLY = 0x800,OBJECT_ATTRIB_ACCESS_PUBLIC = 0x1000,OBJECT_ATTRIB_ACCESS_PRIVATE = 0x2000,OBJECT_ATTRIB_ACCESS_PROTECTED = 0x4000,OBJECT_ATTRIB_ACCESS_FINAL = 0x8000,OBJECT_ATTRIB_STORAGE_GLOBAL = 0x10000,OBJECT_ATTRIB_STORAGE_STATIC = 0x20000,OBJECT_ATTRIB_STORAGE_FIELD = 0x40000,OBJECT_ATTRIB_STORAGE_VIRTUAL = 0x80000,OBJECT_ATTRIB_TYPE_IS_CONSTANT = 0x100000,OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED = 0x200000,OBJECT_ATTRIB_TYPE_IS_VOLATILE = 0x400000,OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS = 0x800000,OBJECT_ATTRIB_IS_CLASS = 0x1000000,OBJECT_ATTRIB_IS_FUNCTION = 0x2000000,OBJECT_ATTRIB_IS_VARIABLE = 0x4000000,OBJECT_ATTRIB_IS_PROPERTY = 0x8000000,OBJECT_ATTRIB_IS_MACRO = 0x10000000,OBJECT_ATTRIB_IS_TYPE = 0x20000000,OBJECT_ATTRIB_IS_INHERITED = 0x40000000,OBJECT_ATTRIB_IS_INTERFACE = 0x80000000,};
enum tagQualityMessageType {Famine = 0x0,Flood = 0x1,};
enum tagWORDREP_BREAK_TYPE {WORDREP_BREAK_EOW = 0x0,WORDREP_BREAK_EOS = 0x1,WORDREP_BREAK_EOP = 0x2,WORDREP_BREAK_EOC = 0x3,};
typedef struct _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
typedef struct tACMDRVSTREAMINSTANCE ACMDRVSTREAMINSTANCE;
typedef struct _AllocatorProperties ALLOCATOR_PROPERTIES;
enum AMPlayListEventFlags {AMPLAYLISTEVENT_RESUME = 0x0,AMPLAYLISTEVENT_BREAK = 0x1,AMPLAYLISTEVENT_NEXT = 0x2,AMPLAYLISTEVENT_MASK = 0xF,AMPLAYLISTEVENT_REFRESH = 0x10,};
typedef struct _BTH_SOCKOPT_SECURITY BTH_SOCKOPT_SECURITY;
enum BorderStyleConstants {amvNone = 0x0,amvFixedSingle = 0x1,};
typedef struct __CEL_THREAD_TERMINATE CEL_THREAD_TERMINATE;
typedef struct _CERT_CREDENTIAL_INFO CERT_CREDENTIAL_INFO;
typedef struct _CERT_GENERAL_SUBTREE CERT_GENERAL_SUBTREE;
typedef struct _CERT_PUBLIC_KEY_INFO CERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO CERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA CERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO CERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO CERT_TRUST_LIST_INFO;
typedef struct UserNotificationType CE_USER_NOTIFICATION;
typedef struct tagCInterfaceStubHeader CInterfaceStubHeader;
typedef struct _CMC_TAGGED_ATTRIBUTE CMC_TAGGED_ATTRIBUTE;
typedef struct _CMC_TAGGED_OTHER_MSG CMC_TAGGED_OTHER_MSG;
struct CMLangConvertCharset;
typedef struct _CMSG_CMS_SIGNER_INFO CMSG_CMS_SIGNER_INFO;
typedef struct _CO_TAPI_ADDRESS_CAPS CO_TAPI_ADDRESS_CAPS;
typedef struct _CRL_DIST_POINTS_INFO CRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM CRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY CRYPT_OID_FUNC_ENTRY;
typedef struct csimaadpcmwaveformat_tag CSIMAADPCMWAVEFORMAT;
typedef struct _CTL_ANY_SUBJECT_INFO CTL_ANY_SUBJECT_INFO;
typedef struct _D3DVERTEXBUFFER_DESC D3DVERTEXBUFFER_DESC;
enum DBCONSTRAINTTYPEENUM {DBCONSTRAINTTYPE_UNIQUE = 0x0,DBCONSTRAINTTYPE_FOREIGNKEY = 0x1,DBCONSTRAINTTYPE_PRIMARYKEY = 0x2,DBCONSTRAINTTYPE_CHECK = 0x3,};
enum DBCONVERTFLAGSENUM20 {DBCONVERTFLAGS_ISLONG = 0x2,DBCONVERTFLAGS_ISFIXEDLENGTH = 0x4,DBCONVERTFLAGS_FROMVARIANT = 0x8,};
typedef struct _DDVIDEOPORTBANDWIDTH DDVIDEOPORTBANDWIDTH;
enum DELIVERY_AGENT_FLAGS {DELIVERY_AGENT_FLAG_NO_BROADCAST = 0x4,DELIVERY_AGENT_FLAG_NO_RESTRICTIONS = 0x8,DELIVERY_AGENT_FLAG_SILENT_DIAL = 0x10,};
typedef struct _DEV_BROADCAST_HANDLE DEV_BROADCAST_HANDLE;
typedef struct _DEV_BROADCAST_PORT_A DEV_BROADCAST_PORT_A;
typedef struct _DEV_BROADCAST_PORT_W DEV_BROADCAST_PORT_W;
typedef struct _DOT11_COUNTERS_ENTRY DOT11_COUNTERS_ENTRY;
typedef struct _DOT11_INTEGRITY_FAIL DOT11_INTEGRITY_FAIL;
typedef struct _DOT11_RECEIVE_UPCALL DOT11_RECEIVE_UPCALL;
typedef struct _DOT11_SEND_8021X_PKT DOT11_SEND_8021X_PKT;
struct DSearchCommandEvents {struct DSearchCommandEventsVtbl *lpVtbl;};
struct DVDNavigationManager;
struct DVDStreamControlInfo;
enum DXT_QUICK_APPLY_TYPE {DXTQAT_TransitionIn = 0x0,DXTQAT_TransitionOut = 0x1,DXTQAT_TransitionFromElement = 0x2,DXTQAT_TransitionToElement = 0x3,};
struct DispHTCEventBehavior {struct DispHTCEventBehaviorVtbl *lpVtbl;};
struct DispHTMLBlockElement {struct DispHTMLBlockElementVtbl *lpVtbl;};
struct DispHTMLCurrentStyle {struct DispHTMLCurrentStyleVtbl *lpVtbl;};
struct DispHTMLDListElement {struct DispHTMLDListElementVtbl *lpVtbl;};
struct DispHTMLDOMAttribute {struct DispHTMLDOMAttributeVtbl *lpVtbl;};
struct DispHTMLFrameElement {struct DispHTMLFrameElementVtbl *lpVtbl;};
struct DispHTMLFrameSetSite {struct DispHTMLFrameSetSiteVtbl *lpVtbl;};
struct DispHTMLInputElement {struct DispHTMLInputElementVtbl *lpVtbl;};
struct DispHTMLLabelElement {struct DispHTMLLabelElementVtbl *lpVtbl;};
struct DispHTMLOListElement {struct DispHTMLOListElementVtbl *lpVtbl;};
struct DispHTMLParamElement {struct DispHTMLParamElementVtbl *lpVtbl;};
struct DispHTMLStyleElement {struct DispHTMLStyleElementVtbl *lpVtbl;};
struct DispHTMLTableCaption {struct DispHTMLTableCaptionVtbl *lpVtbl;};
struct DispHTMLTableSection {struct DispHTMLTableSectionVtbl *lpVtbl;};
struct DispHTMLTitleElement {struct DispHTMLTitleElementVtbl *lpVtbl;};
struct DispHTMLUListElement {struct DispHTMLUListElementVtbl *lpVtbl;};
enum DisplayModeConstants {amvTime = 0x0,amvFrames = 0x1,};
typedef struct _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
typedef struct tagFETCH_CMD_RESULTS_EX FETCH_CMD_RESULTS_EX;
typedef struct _FILEGROUPDESCRIPTORA FILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW FILEGROUPDESCRIPTORW;
typedef union _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
typedef struct _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
typedef struct g721_adpcmwaveformat_tag G721_ADPCMWAVEFORMAT;
typedef struct g723_adpcmwaveformat_tag G723_ADPCMWAVEFORMAT;
typedef struct __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
typedef struct _GEN_GET_NETCARD_TIME GEN_GET_NETCARD_TIME;
typedef void *HCRYPTDEFAULTCONTEXT;
struct HTMLFrameSiteEvents2 {struct HTMLFrameSiteEvents2Vtbl *lpVtbl;};
struct HTMLInputFileElement;
struct HTMLInputImageEvents {struct HTMLInputImageEventsVtbl *lpVtbl;};
struct HTMLInputTextElement;
typedef struct _HTML_PAINT_DRAW_INFO HTML_PAINT_DRAW_INFO;
typedef struct _HTTP_FILTER_RAW_DATA HTTP_FILTER_RAW_DATA;
struct IAMBufferNegotiation {struct IAMBufferNegotiationVtbl *lpVtbl;};
struct IAMExtendedErrorInfo {struct IAMExtendedErrorInfoVtbl *lpVtbl;};
struct IAMTimecodeGenerator {struct IAMTimecodeGeneratorVtbl *lpVtbl;};
struct IAMTunerNotification {struct IAMTunerNotificationVtbl *lpVtbl;};
struct ICaptureGraphBuilder {struct ICaptureGraphBuilderVtbl *lpVtbl;};
struct IColumnMapperCreator {struct IColumnMapperCreatorVtbl *lpVtbl;};
struct IDAVNamespaceArbiter {struct IDAVNamespaceArbiterVtbl *lpVtbl;};
struct IDVDStreamAttributes {struct IDVDStreamAttributesVtbl *lpVtbl;};
struct IDXTFilterCollection {struct IDXTFilterCollectionVtbl *lpVtbl;};
struct IDXTFilterController {struct IDXTFilterControllerVtbl *lpVtbl;};
struct IDirectDrawVideoPort {struct IDirectDrawVideoPortVtbl *lpVtbl;};
struct IElementBehaviorSite {struct IElementBehaviorSiteVtbl *lpVtbl;};
struct IEnumNetCfgComponent {struct IEnumNetCfgComponentVtbl *lpVtbl;};
struct IEnumPStoreProviders {struct IEnumPStoreProvidersVtbl *lpVtbl;};
struct IHTCPropertyBehavior {struct IHTCPropertyBehaviorVtbl *lpVtbl;};
struct IHTMLAreasCollection {struct IHTMLAreasCollectionVtbl *lpVtbl;};
struct IHTMLBaseFontElement {struct IHTMLBaseFontElementVtbl *lpVtbl;};
struct IHTMLCommentElement2 {struct IHTMLCommentElement2Vtbl *lpVtbl;};
struct IHTMLEditingServices {struct IHTMLEditingServicesVtbl *lpVtbl;};
struct IHTMLElementDefaults {struct IHTMLElementDefaultsVtbl *lpVtbl;};
struct IHTMLFieldSetElement {struct IHTMLFieldSetElementVtbl *lpVtbl;};
struct IHTMLFilterPaintSite {struct IHTMLFilterPaintSiteVtbl *lpVtbl;};
struct IHTMLFrameSetElement {struct IHTMLFrameSetElementVtbl *lpVtbl;};
struct IHTMLIsIndexElement2 {struct IHTMLIsIndexElement2Vtbl *lpVtbl;};
struct IHTMLSelectionObject {struct IHTMLSelectionObjectVtbl *lpVtbl;};
struct IHTMLTableRowMetrics {struct IHTMLTableRowMetricsVtbl *lpVtbl;};
struct IHTMLTextAreaElement {struct IHTMLTextAreaElementVtbl *lpVtbl;};
struct IInstallEngineTiming {struct IInstallEngineTimingVtbl *lpVtbl;};
struct IInternetZoneManager {struct IInternetZoneManagerVtbl *lpVtbl;};
typedef struct _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
typedef struct _IMAGE_STUB_DIRECTORY IMAGE_STUB_DIRECTORY;
typedef struct tagIMAP_STATUS_RESPONSE IMAP_STATUS_RESPONSE;
struct IMLangConvertCharset {struct IMLangConvertCharsetVtbl *lpVtbl;};
struct IMediaPlayerListener {struct IMediaPlayerListenerVtbl *lpVtbl;};
struct IMimeMessageCallback {struct IMimeMessageCallbackVtbl *lpVtbl;};
typedef struct tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;
struct INotificationRunning {struct INotificationRunningVtbl *lpVtbl;};
struct IObjectAccessControl {struct IObjectAccessControlVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_ADDRESSES IP_ADAPTER_ADDRESSES;
typedef struct _IP_ADAPTER_INDEX_MAP IP_ADAPTER_INDEX_MAP;
typedef struct _IP_ADAPTER_ORDER_MAP IP_ADAPTER_ORDER_MAP;
struct IPerPropertyBrowsing {struct IPerPropertyBrowsingVtbl *lpVtbl;};
struct IPersistPropertyBag2 {struct IPersistPropertyBag2Vtbl *lpVtbl;};
struct IRTCEnumParticipants {struct IRTCEnumParticipantsVtbl *lpVtbl;};
struct IRTCUserSearchResult {struct IRTCUserSearchResultVtbl *lpVtbl;};
struct IRowsetChapterMember {struct IRowsetChapterMemberVtbl *lpVtbl;};
struct ISegmentListIterator {struct ISegmentListIteratorVtbl *lpVtbl;};
struct IShellFolderViewDual {struct IShellFolderViewDualVtbl *lpVtbl;};
struct ISubDivisionProvider {struct ISubDivisionProviderVtbl *lpVtbl;};
struct ISubscriptionMgrPriv {struct ISubscriptionMgrPrivVtbl *lpVtbl;};
struct ITIMEDVDPlayerObject {struct ITIMEDVDPlayerObjectVtbl *lpVtbl;};
struct ITIMEMediaPlayerSite {struct ITIMEMediaPlayerSiteVtbl *lpVtbl;};
struct IUPnPServiceCallback {struct IUPnPServiceCallbackVtbl *lpVtbl;};
struct IUnicodeScriptMapper {struct IUnicodeScriptMapperVtbl *lpVtbl;};
struct IUserIdentityManager {struct IUserIdentityManagerVtbl *lpVtbl;};
struct IVBSAXContentHandler {struct IVBSAXContentHandlerVtbl *lpVtbl;};
struct IVBSAXEntityResolver {struct IVBSAXEntityResolverVtbl *lpVtbl;};
struct IVBSAXLexicalHandler {struct IVBSAXLexicalHandlerVtbl *lpVtbl;};
struct IVoIPDirectoryClient {struct IVoIPDirectoryClientVtbl *lpVtbl;};
struct IXMLDOMCharacterData {struct IXMLDOMCharacterDataVtbl *lpVtbl;};
typedef struct linemediacontroltone_tag LINEMEDIACONTROLTONE;
typedef struct tACMDRVSTREAMHEADER *LPACMDRVSTREAMHEADER;
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
typedef struct tagDDDEVICEIDENTIFIER *LPDDDEVICEIDENTIFIER;
typedef struct _DDVIDEOPORTCONNECT *LPDDVIDEOPORTCONNECT;
typedef struct IDirect3DSwapChain8 *LPDIRECT3DSWAPCHAIN8;
typedef struct IDirectDrawSurface2 *LPDIRECTDRAWSURFACE2;
typedef struct IDirectDrawSurface3 *LPDIRECTDRAWSURFACE3;
typedef struct IDirectDrawSurface4 *LPDIRECTDRAWSURFACE4;
typedef struct IDirectDrawSurface5 *LPDIRECTDRAWSURFACE5;
typedef struct IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;
typedef IEnumItemProperties *LPENUMITEMPROPERTIES;
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef struct _25388EDDA6F9AFF912B25CA06CA16E0D *LPEXP_SPECIAL_FOLDER;
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef IHlinkBrowseContext *LPHLINKBROWSECONTEXT;
typedef struct _HSE_URL_MAPEX_INFO *LPHSE_URL_MAPEX_INFO;
typedef struct tagHTTPMEMBERINFOLIST *LPHTTPMEMBERINFOLIST;
typedef IMimeEnumHeaderRows *LPMIMEENUMHEADERROWS;
typedef IMimeEnumProperties *LPMIMEENUMPROPERTIES;
typedef IMimePropertySchema *LPMIMEPROPERTYSCHEMA;
typedef INotificationReport *LPNOTIFICATIONREPORT;
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;
typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *LPSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *LPSCARD_READERSTATEW;
typedef struct _SSLAUTHREQUESTHOOK *LPSSLAUTHREQUESTHOOK;
typedef struct _SSLKEYEXCHANGEHOOK *LPSSLKEYEXCHANGEHOOK;
typedef struct _tagSYNCMGRHANDLERINFO *LPSYNCMGRHANDLERINFO;
typedef ISyncMgrSynchronize *LPSYNCMGRSYNCHRONIZE;
typedef struct _USB_DEVICE_REQUEST *LPUSB_DEVICE_REQUEST;
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
typedef struct _WINDOWS_DEVICELIST *LPWINDOWS_DEVICELIST;
typedef struct _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *LPWSANAMESPACE_INFOW;
enum MACRO_CASE_SENSITIVE {PROPSETFLAG_CASE_SENSITIVE = 8,PROPSET_BEHAVIOR_CASE_SENSITIVE = 1,};
enum MACRO_CDBSELFDISPIDS {CDBSELFDISPIDS = 8,};
enum MACRO_CF_SCREENFONTS {CF_SCREENFONTS = 0x1,CF_PRINTERFONTS = 0x2,CF_BOTH = 0x3,CF_SHOWHELP = 0x4,CF_ENABLEHOOK = 0x8,CF_ENABLETEMPLATE = 0x10,CF_ENABLETEMPLATEHANDLE = 0x20,CF_INITTOLOGFONTSTRUCT = 0x40,CF_USESTYLE = 0x80,CF_EFFECTS = 0x100,CF_APPLY = 0x200,CF_ANSIONLY = 0x400,CF_SCRIPTSONLY = 0x400,CF_NOVECTORFONTS = 0x800,CF_NOOEMFONTS = 0x800,CF_NOSIMULATIONS = 0x1000,CF_LIMITSIZE = 0x2000,CF_FIXEDPITCHONLY = 0x4000,CF_WYSIWYG = 0x8000,CF_FORCEFONTEXIST = 0x10000,CF_SCALABLEONLY = 0x20000,CF_TTONLY = 0x40000,CF_NOFACESEL = 0x80000,CF_NOSTYLESEL = 0x100000,CF_NOSIZESEL = 0x200000,CF_SELECTSCRIPT = 0x400000,CF_NOSCRIPTSEL = 0x800000,CF_NOVERTFONTS = 0x1000000,};
enum MACRO_CREDUI_CONTROL {CREDUI_CONTROL_MIN_WIDTH = 188,CREDUI_CONTROL_MIN_HEIGHT = 30,CREDUI_CONTROL_ADD_SAVE = 17,CREDUI_CONTROL_FULL_HEIGHT = 47,};
enum MACRO_CRYPT_MODE_CBC {CRYPT_MODE_CBC = 1,CRYPT_MODE_ECB = 2,CRYPT_MODE_OFB = 3,CRYPT_MODE_CFB = 4,CRYPT_MODE_CTS = 5,CRYPT_ENCRYPT = 1,CRYPT_DECRYPT = 2,CRYPT_EXPORT = 4,CRYPT_READ = 8,CRYPT_WRITE = 16,CRYPT_MAC = 32,CRYPT_EXPORT_KEY = 64,CRYPT_IMPORT_KEY = 128,CRYPT_ARCHIVE = 256,};
enum MACRO_CRYPT_RETRIEVE {CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 0x1,CRYPT_CACHE_ONLY_RETRIEVAL = 0x2,CRYPT_WIRE_ONLY_RETRIEVAL = 0x4,CRYPT_DONT_CACHE_RESULT = 0x8,CRYPT_ASYNC_RETRIEVAL = 0x10,CRYPT_STICKY_CACHE_RETRIEVAL = 0x1000,CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 0x2000,CRYPT_OFFLINE_CHECK_RETRIEVAL = 0x4000,CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 0x8000,CRYPT_LDAP_SIGN_RETRIEVAL = 0x10000,CRYPT_NO_AUTH_RETRIEVAL = 0x20000,CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 0x40000,CRYPT_AIA_RETRIEVAL = 0x80000,CRYPT_VERIFY_CONTEXT_SIGNATURE = 0x20,CRYPT_VERIFY_DATA_HASH = 0x40,CRYPT_KEEP_TIME_VALID = 0x80,CRYPT_DONT_VERIFY_SIGNATURE = 0x100,CRYPT_DONT_CHECK_TIME_VALIDITY = 0x200,CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 0x400,CRYPT_ACCUMULATIVE_TIMEOUT = 0x800,CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = 0x1,CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL = 0x2,CRYPT_GET_URL_FROM_PROPERTY = 0x1,CRYPT_GET_URL_FROM_EXTENSION = 0x2,CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 0x4,CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 0x8,};
enum MACRO_CRYPT_USERDATA {CRYPT_USERDATA = 1,};
enum MACRO_CSIDL_INTERNET {CSIDL_INTERNET = 0x1,CSIDL_CONTROLS = 0x3,CSIDL_PRINTERS = 0x4,CSIDL_SENDTO = 0x9,CSIDL_BITBUCKET = 0xA,CSIDL_MYDOCUMENTS = 0xC,CSIDL_MYMUSIC = 0xD,CSIDL_MYVIDEO = 0xE,CSIDL_DRIVES = 0x11,CSIDL_NETWORK = 0x12,CSIDL_NETHOOD = 0x13,CSIDL_TEMPLATES = 0x15,CSIDL_COMMON_STARTMENU = 0x16,CSIDL_COMMON_PROGRAMS = 0x17,CSIDL_COMMON_STARTUP = 0x18,CSIDL_COMMON_DESKTOPDIRECTORY = 0x19,CSIDL_PRINTHOOD = 0x1B,CSIDL_LOCAL_APPDATA = 0x1C,CSIDL_ALTSTARTUP = 0x1D,CSIDL_COMMON_ALTSTARTUP = 0x1E,CSIDL_COMMON_FAVORITES = 0x1F,CSIDL_INTERNET_CACHE = 0x20,CSIDL_COOKIES = 0x21,CSIDL_HISTORY = 0x22,CSIDL_COMMON_APPDATA = 0x23,CSIDL_SYSTEM = 0x25,CSIDL_MYPICTURES = 0x27,CSIDL_SYSTEMX86 = 0x29,CSIDL_PROGRAM_FILESX86 = 0x2A,CSIDL_PROGRAM_FILES_COMMON = 0x2B,CSIDL_PROGRAM_FILES_COMMONX86 = 0x2C,CSIDL_COMMON_TEMPLATES = 0x2D,CSIDL_COMMON_DOCUMENTS = 0x2E,CSIDL_COMMON_ADMINTOOLS = 0x2F,CSIDL_ADMINTOOLS = 0x30,CSIDL_CONNECTIONS = 0x31,CSIDL_FLAG_CREATE = 0x8000,CSIDL_FLAG_DONT_VERIFY = 0x4000,CSIDL_FLAG_NO_ALIAS = 0x1000,CSIDL_FLAG_MASK = 0xFF00,};
enum MACRO_CWCSTORAGENAME {CWCSTORAGENAME = 32,};
enum MACRO_D3DPRASTERCAPS {D3DPRASTERCAPS_DITHER = 0x1,D3DPRASTERCAPS_PAT = 0x8,D3DPRASTERCAPS_ZTEST = 0x10,D3DPRASTERCAPS_FOGVERTEX = 0x80,D3DPRASTERCAPS_FOGTABLE = 0x100,D3DPRASTERCAPS_ANTIALIASEDGES = 0x1000,D3DPRASTERCAPS_MIPMAPLODBIAS = 0x2000,D3DPRASTERCAPS_ZBIAS = 0x4000,D3DPRASTERCAPS_ZBUFFERLESSHSR = 0x8000,D3DPRASTERCAPS_FOGRANGE = 0x10000,D3DPRASTERCAPS_ANISOTROPY = 0x20000,D3DPRASTERCAPS_WBUFFER = 0x40000,D3DPRASTERCAPS_WFOG = 0x100000,D3DPRASTERCAPS_ZFOG = 0x200000,D3DPRASTERCAPS_COLORPERSPECTIVE = 0x400000,D3DPRASTERCAPS_STRETCHBLTMULTISAMPLE = 0x800000,};
enum MACRO_D3DPRESENTFLAG {D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 0x1,};
enum MACRO_D3DRENDERSTATE {D3DRENDERSTATE_WRAPBIAS = 128,};
enum MACRO_D3DSTENCILCAPS {D3DSTENCILCAPS_KEEP = 0x1,D3DSTENCILCAPS_ZERO = 0x2,D3DSTENCILCAPS_REPLACE = 0x4,D3DSTENCILCAPS_INCRSAT = 0x8,D3DSTENCILCAPS_DECRSAT = 0x10,D3DSTENCILCAPS_INVERT = 0x20,D3DSTENCILCAPS_INCR = 0x40,D3DSTENCILCAPS_DECR = 0x80,};
enum MACRO_DBT_VPOWERDAPI {DBT_VPOWERDAPI = 0x8100,DBT_USERDEFINED = 0xFFFF,DBT_DEVTYP_INTERFACEDEVICE = 0x5,};
enum MACRO_DDENUMOVERLAYZ {DDENUMOVERLAYZ_BACKTOFRONT = 0x0,DDENUMOVERLAYZ_FRONTTOBACK = 0x1,};
enum MACRO_DDENUMSURFACES {DDENUMSURFACES_ALL = 0x1,DDENUMSURFACES_MATCH = 0x2,DDENUMSURFACES_NOMATCH = 0x4,DDENUMSURFACES_CANBECREATED = 0x8,DDENUMSURFACES_DOESEXIST = 0x10,};
enum MACRO_DELETE_PROMOTE {DELETE_PROMOTE_CHILDREN = 0x1,DELETE_CHILDREN_ONLY = 0x2,};
enum MACRO_DEVICENAMESIZE {DEVICENAMESIZE = 8,STORENAMESIZE = 32,};
enum MACRO_DISPID_ONABORT {DISPID_ONABORT = 1000,DISPID_ONCHANGE = 1001,DISPID_ONERROR = 1002,DISPID_ONLOAD = 1003,DISPID_ONSELECT = 1006,DISPID_ONSUBMIT = 1007,DISPID_ONUNLOAD = 1008,DISPID_ONBOUNCE = 1009,DISPID_ONFINISH = 1010,DISPID_ONSTART = 1011,DISPID_ONLAYOUT = 1013,DISPID_ONSCROLL = 1014,DISPID_ONRESET = 1015,DISPID_ONRESIZE = 1016,DISPID_ONBEFOREUNLOAD = 1017,DISPID_ONCHANGEFOCUS = 1018,DISPID_ONCHANGEBLUR = 1019,DISPID_ONPERSIST = 1020,DISPID_ONPERSISTSAVE = 1021,DISPID_ONPERSISTLOAD = 1022,DISPID_ONCONTEXTMENU = 1023,DISPID_ONBEFOREPRINT = 1024,DISPID_ONAFTERPRINT = 1025,DISPID_ONSTOP = 1026,DISPID_ONBEFOREEDITFOCUS = 1027,DISPID_ONMOUSEHOVER = 1028,DISPID_ONCONTENTREADY = 1029,DISPID_ONLAYOUTCOMPLETE = 1030,DISPID_ONPAGE = 1031,DISPID_ONLINKEDOVERFLOW = 1032,DISPID_ONMOUSEWHEEL = 1033,DISPID_ONBEFOREDEACTIVATE = 1034,DISPID_ONMOVE = 1035,DISPID_ONCONTROLSELECT = 1036,DISPID_ONSELECTIONCHANGE = 1037,DISPID_ONMOVESTART = 1038,DISPID_ONMOVEEND = 1039,DISPID_ONRESIZESTART = 1040,DISPID_ONRESIZEEND = 1041,DISPID_ONMOUSEENTER = 1042,DISPID_ONMOUSELEAVE = 1043,DISPID_ONACTIVATE = 1044,DISPID_ONDEACTIVATE = 1045,DISPID_ONMULTILAYOUTCLEANUP = 1046,DISPID_ONBEFOREACTIVATE = 1047,DISPID_ONFOCUSIN = 1048,DISPID_ONFOCUSOUT = 1049,DISPID_A_FIRST = -2147413112,DISPID_A_MIN = -2147413112,DISPID_A_MAX = -2147412113,DISPID_A_BACKGROUNDIMAGE = -2147413111,DISPID_A_COLOR = -2147413110,DISPID_A_TEXTTRANSFORM = -2147413108,DISPID_A_NOWRAP = -2147413107,DISPID_A_LINEHEIGHT = -2147413106,DISPID_A_TEXTINDENT = -2147413105,DISPID_A_LETTERSPACING = -2147413104,DISPID_A_LANG = -2147413103,DISPID_A_OVERFLOW = -2147413102,DISPID_A_PADDING = -2147413101,DISPID_A_PADDINGTOP = -2147413100,DISPID_A_PADDINGRIGHT = -2147413099,DISPID_A_PADDINGBOTTOM = -2147413098,DISPID_A_PADDINGLEFT = -2147413097,DISPID_A_CLEAR = -2147413096,DISPID_A_LISTTYPE = -2147413095,DISPID_A_FONTFACE = -2147413094,DISPID_A_FONTSIZE = -2147413093,DISPID_A_TEXTDECORATIONLINETHROUGH = -2147413092,DISPID_A_TEXTDECORATIONUNDERLINE = -2147413091,DISPID_A_TEXTDECORATIONBLINK = -2147413090,DISPID_A_TEXTDECORATIONNONE = -2147413089,DISPID_A_FONTSTYLE = -2147413088,DISPID_A_FONTVARIANT = -2147413087,DISPID_A_BASEFONT = -2147413086,DISPID_A_FONTWEIGHT = -2147413085,DISPID_A_TABLEBORDERCOLOR = -2147413084,DISPID_A_TABLEBORDERCOLORLIGHT = -2147413083,DISPID_A_TABLEBORDERCOLORDARK = -2147413082,DISPID_A_TABLEVALIGN = -2147413081,DISPID_A_BACKGROUND = -2147413080,DISPID_A_BACKGROUNDPOSX = -2147413079,DISPID_A_BACKGROUNDPOSY = -2147413078,DISPID_A_TEXTDECORATION = -2147413077,DISPID_A_MARGIN = -2147413076,DISPID_A_MARGINTOP = -2147413075,DISPID_A_MARGINRIGHT = -2147413074,DISPID_A_MARGINBOTTOM = -2147413073,DISPID_A_MARGINLEFT = -2147413072,DISPID_A_FONT = -2147413071,DISPID_A_FONTSIZEKEYWORD = -2147413070,DISPID_A_FONTSIZECOMBINE = -2147413069,DISPID_A_BACKGROUNDREPEAT = -2147413068,DISPID_A_BACKGROUNDATTACHMENT = -2147413067,DISPID_A_BACKGROUNDPOSITION = -2147413066,DISPID_A_WORDSPACING = -2147413065,DISPID_A_VERTICALALIGN = -2147413064,DISPID_A_BORDER = -2147413063,DISPID_A_BORDERTOP = -2147413062,DISPID_A_BORDERRIGHT = -2147413061,DISPID_A_BORDERBOTTOM = -2147413060,DISPID_A_BORDERLEFT = -2147413059,DISPID_A_BORDERCOLOR = -2147413058,DISPID_A_BORDERTOPCOLOR = -2147413057,DISPID_A_BORDERRIGHTCOLOR = -2147413056,DISPID_A_BORDERBOTTOMCOLOR = -2147413055,DISPID_A_BORDERLEFTCOLOR = -2147413054,DISPID_A_BORDERWIDTH = -2147413053,DISPID_A_BORDERTOPWIDTH = -2147413052,DISPID_A_BORDERRIGHTWIDTH = -2147413051,DISPID_A_BORDERBOTTOMWIDTH = -2147413050,DISPID_A_BORDERLEFTWIDTH = -2147413049,DISPID_A_BORDERSTYLE = -2147413048,DISPID_A_BORDERTOPSTYLE = -2147413047,DISPID_A_BORDERRIGHTSTYLE = -2147413046,DISPID_A_BORDERBOTTOMSTYLE = -2147413045,DISPID_A_BORDERLEFTSTYLE = -2147413044,DISPID_A_TEXTDECORATIONOVERLINE = -2147413043,DISPID_A_FLOAT = -2147413042,DISPID_A_DISPLAY = -2147413041,DISPID_A_LISTSTYLETYPE = -2147413040,DISPID_A_LISTSTYLEPOSITION = -2147413039,DISPID_A_LISTSTYLEIMAGE = -2147413038,DISPID_A_LISTSTYLE = -2147413037,DISPID_A_WHITESPACE = -2147413036,DISPID_A_PAGEBREAKBEFORE = -2147413035,DISPID_A_PAGEBREAKAFTER = -2147413034,DISPID_A_SCROLL = -2147413033,DISPID_A_VISIBILITY = -2147413032,DISPID_A_HIDDEN = -2147413031,DISPID_A_FILTER = -2147413030,DISPID_DEFAULTVALUE = -2147413029,DISPID_A_BORDERCOLLAPSE = -2147413028,DISPID_A_POSITION = -2147413022,DISPID_A_ZINDEX = -2147413021,DISPID_A_CLIP = -2147413020,DISPID_A_CLIPRECTTOP = -2147413019,DISPID_A_CLIPRECTRIGHT = -2147413018,DISPID_A_CLIPRECTBOTTOM = -2147413017,DISPID_A_CLIPRECTLEFT = -2147413016,DISPID_A_FONTFACESRC = -2147413015,DISPID_A_TABLELAYOUT = -2147413014,DISPID_A_STYLETEXT = -2147413013,DISPID_A_LANGUAGE = -2147413012,DISPID_A_VALUE = -2147413011,DISPID_A_CURSOR = -2147413010,DISPID_A_EVENTSINK = -2147413009,DISPID_A_PROPNOTIFYSINK = -2147413008,DISPID_A_ROWSETNOTIFYSINK = -2147413007,DISPID_INTERNAL_INLINESTYLEAA = -2147413006,DISPID_INTERNAL_CSTYLEPTRCACHE = -2147413005,DISPID_INTERNAL_CRUNTIMESTYLEPTRCACHE = -2147413004,DISPID_INTERNAL_INVOKECONTEXT = -2147413003,DISPID_A_BGURLIMGCTXCACHEINDEX = -2147413002,DISPID_A_LIURLIMGCTXCACHEINDEX = -2147413001,DISPID_A_ROWSETASYNCHNOTIFYSINK = -2147413000,DISPID_INTERNAL_FILTERPTRCACHE = -2147412999,DISPID_A_ROWPOSITIONCHANGESINK = -2147412998,DISPID_A_BEHAVIOR = -2147412997,DISPID_A_READYSTATE = -2147412996,DISPID_A_DIR = -2147412995,DISPID_A_UNICODEBIDI = -2147412994,DISPID_A_DIRECTION = -2147412993,DISPID_A_IMEMODE = -2147412992,DISPID_A_RUBYALIGN = -2147412991,DISPID_A_RUBYPOSITION = -2147412990,DISPID_A_RUBYOVERHANG = -2147412989,DISPID_INTERNAL_ONBEHAVIOR_CONTENTREADY = -2147412988,DISPID_INTERNAL_ONBEHAVIOR_DOCUMENTREADY = -2147412987,DISPID_INTERNAL_CDOMCHILDRENPTRCACHE = -2147412986,DISPID_A_LAYOUTGRIDCHAR = -2147412985,DISPID_A_LAYOUTGRIDLINE = -2147412984,DISPID_A_LAYOUTGRIDMODE = -2147412983,DISPID_A_LAYOUTGRIDTYPE = -2147412982,DISPID_A_LAYOUTGRID = -2147412981,DISPID_A_TEXTAUTOSPACE = -2147412980,DISPID_A_LINEBREAK = -2147412979,DISPID_A_WORDBREAK = -2147412978,DISPID_A_TEXTJUSTIFY = -2147412977,DISPID_A_TEXTJUSTIFYTRIM = -2147412976,DISPID_A_TEXTKASHIDA = -2147412975,DISPID_A_OVERFLOWX = -2147412973,DISPID_A_OVERFLOWY = -2147412972,DISPID_A_HTCDISPATCHITEM_VALUE = -2147412971,DISPID_A_DOCFRAGMENT = -2147412970,DISPID_A_HTCDD_ELEMENT = -2147412969,DISPID_A_HTCDD_CREATEEVENTOBJECT = -2147412968,DISPID_A_URNATOM = -2147412967,DISPID_A_UNIQUEPEERNUMBER = -2147412966,DISPID_A_ACCELERATOR = -2147412965,DISPID_INTERNAL_ONBEHAVIOR_APPLYSTYLE = -2147412964,DISPID_INTERNAL_RUNTIMESTYLEAA = -2147412963,DISPID_A_HTCDISPATCHITEM_VALUE_SCRIPTSONLY = -2147412962,DISPID_A_EXTENDEDTAGDESC = -2147412961,DISPID_A_ROTATE = -2147412960,DISPID_A_ZOOM = -2147412959,DISPID_A_HTCDD_PROTECTEDELEMENT = -2147412958,DISPID_A_LAYOUTFLOW = -2147412957,DISPID_A_HTCDD_ISMARKUPSHARED = -2147412955,DISPID_A_WORDWRAP = -2147412954,DISPID_A_TEXTUNDERLINEPOSITION = -2147412953,DISPID_A_HASLAYOUT = -2147412952,DISPID_A_MEDIA = -2147412951,DISPID_A_EDITABLE = -2147412950,DISPID_A_HIDEFOCUS = -2147412949,DISPID_INTERNAL_LAYOUTRECTREGISTRYPTRCACHE = -2147412948,DISPID_A_HTCDD_DEFAULTS = -2147412947,DISPID_A_TEXTLINETHROUGHSTYLE = -2147412946,DISPID_A_TEXTUNDERLINESTYLE = -2147412945,DISPID_A_TEXTEFFECT = -2147412944,DISPID_A_TEXTBACKGROUNDCOLOR = -2147412943,DISPID_A_RENDERINGPRIORITY = -2147412942,DISPID_INTERNAL_DWNPOSTPTRCACHE = -2147412941,DISPID_INTERNAL_CODEPAGESETTINGSPTRCACHE = -2147412940,DISPID_INTERNAL_DWNDOCPTRCACHE = -2147412939,DISPID_INTERNAL_DATABINDTASKPTRCACHE = -2147412938,DISPID_INTERNAL_URLLOCATIONCACHE = -2147412937,DISPID_INTERNAL_ARYELEMENTRELEASENOTIFYPTRCACHE = -2147412936,DISPID_INTERNAL_PEERFACTORYURLMAPPTRCACHE = -2147412935,DISPID_INTERNAL_STMDIRTYPTRCACHE = -2147412934,DISPID_INTERNAL_COMPUTEFORMATSTATECACHE = -2147412933,DISPID_A_SCROLLBARBASECOLOR = -2147412932,DISPID_A_SCROLLBARFACECOLOR = -2147412931,DISPID_A_SCROLLBAR3DLIGHTCOLOR = -2147412930,DISPID_A_SCROLLBARSHADOWCOLOR = -2147412929,DISPID_A_SCROLLBARHIGHLIGHTCOLOR = -2147412928,DISPID_A_SCROLLBARDARKSHADOWCOLOR = -2147412927,DISPID_A_SCROLLBARARROWCOLOR = -2147412926,DISPID_INTERNAL_ONBEHAVIOR_CONTENTSAVE = -2147412925,DISPID_A_DEFAULTTEXTSELECTION = -2147412924,DISPID_A_TEXTDECORATIONCOLOR = -2147412923,DISPID_A_TEXTCOLOR = -2147412922,DISPID_A_STYLETEXTDECORATION = -2147412921,DISPID_A_WRITINGMODE = -2147412920,DISPID_INTERNAL_MEDIA_REFERENCE = -2147412919,DISPID_INTERNAL_GENERICCOMPLUSREF = -2147412918,DISPID_INTERNAL_FOCUSITEMS = -2147412917,DISPID_A_SCROLLBARTRACKCOLOR = -2147412916,DISPID_INTERNAL_DWNHEADERCACHE = -2147412915,DISPID_A_FROZEN = -2147412914,DISPID_A_VIEWINHERITSTYLE = -2147412913,DISPID_INTERNAL_FRAMESCOLLECTION = -2147412912,DISPID_A_BGURLIMGCTXCACHEINDEX_FLINE = -2147412911,DISPID_A_BGURLIMGCTXCACHEINDEX_FLETTER = -2147412910,DISPID_A_TEXTALIGNLAST = -2147412909,DISPID_A_TEXTKASHIDASPACE = -2147412908,DISPID_INTERNAL_FONTHISTORYINDEX = -2147412907,DISPID_A_ALLOWTRANSPARENCY = -2147412906,DISPID_INTERNAL_URLSEARCHCACHE = -2147412905,DISPID_A_ISBLOCK = -2147412904,DISPID_A_TEXTOVERFLOW = -2147412903,DISPID_INTERNAL_CATTRIBUTECOLLPTRCACHE = -2147412902,DISPID_A_MINHEIGHT = -2147412901,DISPID_EVPROP_ONMOUSEOVER = -2147412112,DISPID_EVMETH_ONMOUSEOVER = -2147418104,DISPID_EVPROP_ONMOUSEOUT = -2147412111,DISPID_EVMETH_ONMOUSEOUT = -2147418103,DISPID_EVPROP_ONMOUSEDOWN = -2147412110,DISPID_EVMETH_ONMOUSEDOWN = -605,DISPID_EVPROP_ONMOUSEUP = -2147412109,DISPID_EVMETH_ONMOUSEUP = -607,DISPID_EVPROP_ONMOUSEMOVE = -2147412108,DISPID_EVMETH_ONMOUSEMOVE = -606,DISPID_EVPROP_ONKEYDOWN = -2147412107,DISPID_EVMETH_ONKEYDOWN = -602,DISPID_EVPROP_ONKEYUP = -2147412106,DISPID_EVMETH_ONKEYUP = -604,DISPID_EVPROP_ONKEYPRESS = -2147412105,DISPID_EVMETH_ONKEYPRESS = -603,DISPID_EVPROP_ONCLICK = -2147412104,DISPID_EVMETH_ONCLICK = -600,DISPID_EVPROP_ONDBLCLICK = -2147412103,DISPID_EVMETH_ONDBLCLICK = -601,DISPID_EVPROP_ONSELECT = -2147412102,DISPID_EVMETH_ONSELECT = 1006,DISPID_EVPROP_ONSUBMIT = -2147412101,DISPID_EVMETH_ONSUBMIT = 1007,DISPID_EVPROP_ONRESET = -2147412100,DISPID_EVMETH_ONRESET = 1015,DISPID_EVPROP_ONHELP = -2147412099,DISPID_EVMETH_ONHELP = -2147418102,DISPID_EVPROP_ONFOCUS = -2147412098,DISPID_EVMETH_ONFOCUS = -2147418111,DISPID_EVPROP_ONBLUR = -2147412097,DISPID_EVMETH_ONBLUR = -2147418112,DISPID_EVPROP_ONROWEXIT = -2147412094,DISPID_EVMETH_ONROWEXIT = -2147418106,DISPID_EVPROP_ONROWENTER = -2147412093,DISPID_EVMETH_ONROWENTER = -2147418105,DISPID_EVPROP_ONBOUNCE = -2147412092,DISPID_EVMETH_ONBOUNCE = 1009,DISPID_EVPROP_ONBEFOREUPDATE = -2147412091,DISPID_EVMETH_ONBEFOREUPDATE = -2147418108,DISPID_EVPROP_ONAFTERUPDATE = -2147412090,DISPID_EVMETH_ONAFTERUPDATE = -2147418107,DISPID_EVPROP_ONBEFOREDRAGOVER = -2147412089,DISPID_EVPROP_ONBEFOREDROPORPASTE = -2147412088,DISPID_EVPROP_ONREADYSTATECHANGE = -2147412087,DISPID_EVMETH_ONREADYSTATECHANGE = -609,DISPID_EVPROP_ONFINISH = -2147412086,DISPID_EVMETH_ONFINISH = 1010,DISPID_EVPROP_ONSTART = -2147412085,DISPID_EVMETH_ONSTART = 1011,DISPID_EVPROP_ONABORT = -2147412084,DISPID_EVMETH_ONABORT = 1000,DISPID_EVPROP_ONERROR = -2147412083,DISPID_EVMETH_ONERROR = 1002,DISPID_EVPROP_ONCHANGE = -2147412082,DISPID_EVMETH_ONCHANGE = 1001,DISPID_EVPROP_ONSCROLL = -2147412081,DISPID_EVMETH_ONSCROLL = 1014,DISPID_EVPROP_ONLOAD = -2147412080,DISPID_EVMETH_ONLOAD = 1003,DISPID_EVPROP_ONUNLOAD = -2147412079,DISPID_EVMETH_ONUNLOAD = 1008,DISPID_EVPROP_ONLAYOUT = -2147412078,DISPID_EVMETH_ONLAYOUT = 1013,DISPID_EVPROP_ONDRAGSTART = -2147412077,DISPID_EVMETH_ONDRAGSTART = -2147418101,DISPID_EVPROP_ONRESIZE = -2147412076,DISPID_EVMETH_ONRESIZE = 1016,DISPID_EVPROP_ONSELECTSTART = -2147412075,DISPID_EVMETH_ONSELECTSTART = -2147418100,DISPID_EVPROP_ONERRORUPDATE = -2147412074,DISPID_EVMETH_ONERRORUPDATE = -2147418099,DISPID_EVPROP_ONBEFOREUNLOAD = -2147412073,DISPID_EVMETH_ONBEFOREUNLOAD = 1017,DISPID_EVPROP_ONDATASETCHANGED = -2147412072,DISPID_EVMETH_ONDATASETCHANGED = -2147418098,DISPID_EVPROP_ONDATAAVAILABLE = -2147412071,DISPID_EVMETH_ONDATAAVAILABLE = -2147418097,DISPID_EVPROP_ONDATASETCOMPLETE = -2147412070,DISPID_EVMETH_ONDATASETCOMPLETE = -2147418096,DISPID_EVPROP_ONFILTER = -2147412069,DISPID_EVMETH_ONFILTER = -2147418095,DISPID_EVPROP_ONCHANGEFOCUS = -2147412068,DISPID_EVMETH_ONCHANGEFOCUS = 1018,DISPID_EVPROP_ONCHANGEBLUR = -2147412067,DISPID_EVMETH_ONCHANGEBLUR = 1019,DISPID_EVPROP_ONLOSECAPTURE = -2147412066,DISPID_EVMETH_ONLOSECAPTURE = -2147418094,DISPID_EVPROP_ONPROPERTYCHANGE = -2147412065,DISPID_EVMETH_ONPROPERTYCHANGE = -2147418093,DISPID_EVPROP_ONPERSISTSAVE = -2147412064,DISPID_EVMETH_ONPERSISTSAVE = 1021,DISPID_EVPROP_ONDRAG = -2147412063,DISPID_EVMETH_ONDRAG = -2147418092,DISPID_EVPROP_ONDRAGEND = -2147412062,DISPID_EVMETH_ONDRAGEND = -2147418091,DISPID_EVPROP_ONDRAGENTER = -2147412061,DISPID_EVMETH_ONDRAGENTER = -2147418090,DISPID_EVPROP_ONDRAGOVER = -2147412060,DISPID_EVMETH_ONDRAGOVER = -2147418089,DISPID_EVPROP_ONDRAGLEAVE = -2147412059,DISPID_EVMETH_ONDRAGLEAVE = -2147418088,DISPID_EVPROP_ONDROP = -2147412058,DISPID_EVMETH_ONDROP = -2147418087,DISPID_EVPROP_ONCUT = -2147412057,DISPID_EVMETH_ONCUT = -2147418086,DISPID_EVPROP_ONCOPY = -2147412056,DISPID_EVMETH_ONCOPY = -2147418085,DISPID_EVPROP_ONPASTE = -2147412055,DISPID_EVMETH_ONPASTE = -2147418084,DISPID_EVPROP_ONBEFORECUT = -2147412054,DISPID_EVMETH_ONBEFORECUT = -2147418083,DISPID_EVPROP_ONBEFORECOPY = -2147412053,DISPID_EVMETH_ONBEFORECOPY = -2147418082,DISPID_EVPROP_ONBEFOREPASTE = -2147412052,DISPID_EVMETH_ONBEFOREPASTE = -2147418081,DISPID_EVPROP_ONPERSISTLOAD = -2147412051,DISPID_EVMETH_ONPERSISTLOAD = 1022,DISPID_EVPROP_ONROWSDELETE = -2147412050,DISPID_EVMETH_ONROWSDELETE = -2147418080,DISPID_EVPROP_ONROWSINSERTED = -2147412049,DISPID_EVMETH_ONROWSINSERTED = -2147418079,DISPID_EVPROP_ONCELLCHANGE = -2147412048,DISPID_EVMETH_ONCELLCHANGE = -2147418078,DISPID_EVPROP_ONCONTEXTMENU = -2147412047,DISPID_EVMETH_ONCONTEXTMENU = 1023,DISPID_EVPROP_ONBEFOREPRINT = -2147412046,DISPID_EVMETH_ONBEFOREPRINT = 1024,DISPID_EVPROP_ONAFTERPRINT = -2147412045,DISPID_EVMETH_ONAFTERPRINT = 1025,DISPID_EVPROP_ONSTOP = -2147412044,DISPID_EVMETH_ONSTOP = 1026,DISPID_EVPROP_ONBEFOREEDITFOCUS = -2147412043,DISPID_EVMETH_ONBEFOREEDITFOCUS = 1027,DISPID_EVPROP_ONATTACHEVENT = -2147412042,DISPID_EVPROP_ONMOUSEHOVER = -2147412041,DISPID_EVMETH_ONMOUSEHOVER = 1028,DISPID_EVPROP_ONCONTENTREADY = -2147412040,DISPID_EVMETH_ONCONTENTREADY = 1029,DISPID_EVPROP_ONLAYOUTCOMPLETE = -2147412039,DISPID_EVMETH_ONLAYOUTCOMPLETE = 1030,DISPID_EVPROP_ONPAGE = -2147412038,DISPID_EVMETH_ONPAGE = 1031,DISPID_EVPROP_ONLINKEDOVERFLOW = -2147412037,DISPID_EVMETH_ONLINKEDOVERFLOW = 1032,DISPID_EVPROP_ONMOUSEWHEEL = -2147412036,DISPID_EVMETH_ONMOUSEWHEEL = 1033,DISPID_EVPROP_ONBEFOREDEACTIVATE = -2147412035,DISPID_EVMETH_ONBEFOREDEACTIVATE = 1034,DISPID_EVPROP_ONMOVE = -2147412034,DISPID_EVMETH_ONMOVE = 1035,DISPID_EVPROP_ONCONTROLSELECT = -2147412033,DISPID_EVMETH_ONCONTROLSELECT = 1036,DISPID_EVPROP_ONSELECTIONCHANGE = -2147412032,DISPID_EVMETH_ONSELECTIONCHANGE = 1037,DISPID_EVPROP_ONMOVESTART = -2147412031,DISPID_EVMETH_ONMOVESTART = 1038,DISPID_EVPROP_ONMOVEEND = -2147412030,DISPID_EVMETH_ONMOVEEND = 1039,DISPID_EVPROP_ONRESIZESTART = -2147412029,DISPID_EVMETH_ONRESIZESTART = 1040,DISPID_EVPROP_ONRESIZEEND = -2147412028,DISPID_EVMETH_ONRESIZEEND = 1041,DISPID_EVPROP_ONMOUSEENTER = -2147412027,DISPID_EVMETH_ONMOUSEENTER = 1042,DISPID_EVPROP_ONMOUSELEAVE = -2147412026,DISPID_EVMETH_ONMOUSELEAVE = 1043,DISPID_EVPROP_ONACTIVATE = -2147412025,DISPID_EVMETH_ONACTIVATE = 1044,DISPID_EVPROP_ONDEACTIVATE = -2147412024,DISPID_EVMETH_ONDEACTIVATE = 1045,DISPID_EVPROP_ONMULTILAYOUTCLEANUP = -2147412023,DISPID_EVMETH_ONMULTILAYOUTCLEANUP = 1046,DISPID_EVPROP_ONBEFOREACTIVATE = -2147412022,DISPID_EVMETH_ONBEFOREACTIVATE = 1047,DISPID_EVPROP_ONFOCUSIN = -2147412021,DISPID_EVMETH_ONFOCUSIN = 1048,DISPID_EVPROP_ONFOCUSOUT = -2147412020,DISPID_EVMETH_ONFOCUSOUT = 1049,DISPID_EVPROPS_COUNT = 93,DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 1001,DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = -4,DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0,DISPID_IHTMLSTYLE_BACKGROUNDCOLOR = -501,DISPID_IHTMLSTYLE3_LAYOUTFLOW = -2147412957,DISPID_IHTMLSTYLE3_ZOOM = -2147412959,DISPID_IHTMLSTYLE3_WORDWRAP = -2147412954,DISPID_IHTMLSTYLE3_TEXTUNDERLINEPOSITION = -2147412953,DISPID_IHTMLSTYLE3_SCROLLBARBASECOLOR = -2147412932,DISPID_IHTMLSTYLE3_SCROLLBARFACECOLOR = -2147412931,DISPID_IHTMLSTYLE3_SCROLLBAR3DLIGHTCOLOR = -2147412930,DISPID_IHTMLSTYLE3_SCROLLBARSHADOWCOLOR = -2147412929,DISPID_IHTMLSTYLE3_SCROLLBARHIGHLIGHTCOLOR = -2147412928,DISPID_IHTMLSTYLE3_SCROLLBARDARKSHADOWCOLOR = -2147412927,DISPID_IHTMLSTYLE3_SCROLLBARARROWCOLOR = -2147412926,DISPID_IHTMLSTYLE3_SCROLLBARTRACKCOLOR = -2147412916,DISPID_IHTMLSTYLE3_WRITINGMODE = -2147412920,DISPID_IHTMLSTYLE3_TEXTALIGNLAST = -2147412909,DISPID_IHTMLSTYLE3_TEXTKASHIDASPACE = -2147412908,DISPID_IHTMLSTYLE4_TEXTOVERFLOW = -2147412903,DISPID_IHTMLSTYLE4_MINHEIGHT = -2147412901,DISPID_IHTMLRULESTYLE_BACKGROUNDCOLOR = -501,DISPID_IHTMLRULESTYLE3_LAYOUTFLOW = -2147412957,DISPID_IHTMLRULESTYLE3_ZOOM = -2147412959,DISPID_IHTMLRULESTYLE3_WORDWRAP = -2147412954,DISPID_IHTMLRULESTYLE3_TEXTUNDERLINEPOSITION = -2147412953,DISPID_IHTMLRULESTYLE3_SCROLLBARBASECOLOR = -2147412932,DISPID_IHTMLRULESTYLE3_SCROLLBARFACECOLOR = -2147412931,DISPID_IHTMLRULESTYLE3_SCROLLBAR3DLIGHTCOLOR = -2147412930,DISPID_IHTMLRULESTYLE3_SCROLLBARSHADOWCOLOR = -2147412929,DISPID_IHTMLRULESTYLE3_SCROLLBARHIGHLIGHTCOLOR = -2147412928,DISPID_IHTMLRULESTYLE3_SCROLLBARDARKSHADOWCOLOR = -2147412927,DISPID_IHTMLRULESTYLE3_SCROLLBARARROWCOLOR = -2147412926,DISPID_IHTMLRULESTYLE3_SCROLLBARTRACKCOLOR = -2147412916,DISPID_IHTMLRULESTYLE3_WRITINGMODE = -2147412920,DISPID_IHTMLRULESTYLE3_TEXTALIGNLAST = -2147412909,DISPID_IHTMLRULESTYLE3_TEXTKASHIDASPACE = -2147412908,DISPID_IHTMLRULESTYLE4_TEXTOVERFLOW = -2147412903,DISPID_IHTMLRULESTYLE4_MINHEIGHT = -2147412901,DISPID_IHTMLRENDERSTYLE_TEXTLINETHROUGHSTYLE = -2147412946,DISPID_IHTMLRENDERSTYLE_TEXTUNDERLINESTYLE = -2147412945,DISPID_IHTMLRENDERSTYLE_TEXTEFFECT = -2147412944,DISPID_IHTMLRENDERSTYLE_TEXTCOLOR = -2147412922,DISPID_IHTMLRENDERSTYLE_TEXTBACKGROUNDCOLOR = -2147412943,DISPID_IHTMLRENDERSTYLE_TEXTDECORATIONCOLOR = -2147412923,DISPID_IHTMLRENDERSTYLE_RENDERINGPRIORITY = -2147412942,DISPID_IHTMLRENDERSTYLE_DEFAULTTEXTSELECTION = -2147412924,DISPID_IHTMLRENDERSTYLE_TEXTDECORATION = -2147412921,DISPID_IHTMLCURRENTSTYLE_BACKGROUNDCOLOR = -501,DISPID_IHTMLCURRENTSTYLE2_LAYOUTFLOW = -2147412957,DISPID_IHTMLCURRENTSTYLE2_WORDWRAP = -2147412954,DISPID_IHTMLCURRENTSTYLE2_TEXTUNDERLINEPOSITION = -2147412953,DISPID_IHTMLCURRENTSTYLE2_HASLAYOUT = -2147412952,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARBASECOLOR = -2147412932,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARFACECOLOR = -2147412931,DISPID_IHTMLCURRENTSTYLE2_SCROLLBAR3DLIGHTCOLOR = -2147412930,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARSHADOWCOLOR = -2147412929,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARHIGHLIGHTCOLOR = -2147412928,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARDARKSHADOWCOLOR = -2147412927,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARARROWCOLOR = -2147412926,DISPID_IHTMLCURRENTSTYLE2_SCROLLBARTRACKCOLOR = -2147412916,DISPID_IHTMLCURRENTSTYLE2_WRITINGMODE = -2147412920,DISPID_IHTMLCURRENTSTYLE2_ZOOM = -2147412959,DISPID_IHTMLCURRENTSTYLE2_FILTER = -2147413030,DISPID_IHTMLCURRENTSTYLE2_TEXTALIGNLAST = -2147412909,DISPID_IHTMLCURRENTSTYLE2_TEXTKASHIDASPACE = -2147412908,DISPID_IHTMLCURRENTSTYLE2_ISBLOCK = -2147412904,DISPID_IHTMLCURRENTSTYLE3_TEXTOVERFLOW = -2147412903,DISPID_IHTMLCURRENTSTYLE3_MINHEIGHT = -2147412901,DISPID_IHTMLCURRENTSTYLE3_WORDSPACING = -2147413065,DISPID_IHTMLCURRENTSTYLE3_WHITESPACE = -2147413036,DISPID_IHTMLRECT_LEFT = 1001,DISPID_IHTMLRECT_TOP = 1002,DISPID_IHTMLRECT_RIGHT = 1003,DISPID_IHTMLRECT_BOTTOM = 1004,DISPID_IHTMLRECTCOLLECTION_LENGTH = 1500,DISPID_IHTMLRECTCOLLECTION__NEWENUM = -4,DISPID_IHTMLRECTCOLLECTION_ITEM = 0,DISPID_IHTMLDOMNODE2_OWNERDOCUMENT = -2147416999,DISPID_IHTMLDOMATTRIBUTE_NODENAME = 1000,DISPID_IHTMLDOMATTRIBUTE_SPECIFIED = 1001,DISPID_IHTMLDOMATTRIBUTE2_NAME = 1003,DISPID_IHTMLDOMATTRIBUTE2_VALUE = 1004,DISPID_IHTMLDOMATTRIBUTE2_EXPANDO = 1005,DISPID_IHTMLDOMATTRIBUTE2_NODETYPE = 1006,DISPID_IHTMLDOMATTRIBUTE2_PARENTNODE = 1007,DISPID_IHTMLDOMATTRIBUTE2_CHILDNODES = 1008,DISPID_IHTMLDOMATTRIBUTE2_FIRSTCHILD = 1009,DISPID_IHTMLDOMATTRIBUTE2_LASTCHILD = 1010,DISPID_IHTMLDOMATTRIBUTE2_PREVIOUSSIBLING = 1011,DISPID_IHTMLDOMATTRIBUTE2_NEXTSIBLING = 1012,DISPID_IHTMLDOMATTRIBUTE2_ATTRIBUTES = 1013,DISPID_IHTMLDOMATTRIBUTE2_OWNERDOCUMENT = 1014,DISPID_IHTMLDOMATTRIBUTE2_INSERTBEFORE = 1015,DISPID_IHTMLDOMATTRIBUTE2_REPLACECHILD = 1016,DISPID_IHTMLDOMATTRIBUTE2_REMOVECHILD = 1017,DISPID_IHTMLDOMATTRIBUTE2_APPENDCHILD = 1018,DISPID_IHTMLDOMATTRIBUTE2_HASCHILDNODES = 1019,DISPID_IHTMLDOMATTRIBUTE2_CLONENODE = 1020,DISPID_IHTMLDOMTEXTNODE_DATA = 1000,DISPID_IHTMLDOMTEXTNODE_TOSTRING = 1001,DISPID_IHTMLDOMTEXTNODE_LENGTH = 1002,DISPID_IHTMLDOMTEXTNODE_SPLITTEXT = 1003,DISPID_IHTMLDOMTEXTNODE2_SUBSTRINGDATA = 1004,DISPID_IHTMLDOMTEXTNODE2_APPENDDATA = 1005,DISPID_IHTMLDOMTEXTNODE2_INSERTDATA = 1006,DISPID_IHTMLDOMTEXTNODE2_DELETEDATA = 1007,DISPID_IHTMLDOMTEXTNODE2_REPLACEDATA = 1008,DISPID_IHTMLDOMIMPLEMENTATION_HASFEATURE = 1000,DISPID_IHTMLATTRIBUTECOLLECTION_LENGTH = 1500,DISPID_IHTMLATTRIBUTECOLLECTION__NEWENUM = -4,DISPID_IHTMLATTRIBUTECOLLECTION_ITEM = 0,DISPID_IHTMLATTRIBUTECOLLECTION2_GETNAMEDITEM = 1501,DISPID_IHTMLATTRIBUTECOLLECTION2_SETNAMEDITEM = 1502,DISPID_IHTMLATTRIBUTECOLLECTION2_REMOVENAMEDITEM = 1503,DISPID_IHTMLDOMCHILDRENCOLLECTION_LENGTH = 1500,DISPID_IHTMLDOMCHILDRENCOLLECTION__NEWENUM = -4,DISPID_IHTMLDOMCHILDRENCOLLECTION_ITEM = 0,DISPID_IHTMLELEMENT3_MERGEATTRIBUTES = -2147417016,DISPID_IHTMLELEMENT3_ISMULTILINE = -2147417015,DISPID_IHTMLELEMENT3_CANHAVEHTML = -2147417014,DISPID_IHTMLELEMENT3_ONLAYOUTCOMPLETE = -2147412039,DISPID_IHTMLELEMENT3_ONPAGE = -2147412038,DISPID_IHTMLELEMENT3_INFLATEBLOCK = -2147417012,DISPID_IHTMLELEMENT3_ONBEFOREDEACTIVATE = -2147412035,DISPID_IHTMLELEMENT3_SETACTIVE = -2147417011,DISPID_IHTMLELEMENT3_CONTENTEDITABLE = -2147412950,DISPID_IHTMLELEMENT3_ISCONTENTEDITABLE = -2147417010,DISPID_IHTMLELEMENT3_HIDEFOCUS = -2147412949,DISPID_IHTMLELEMENT3_DISABLED = -2147418036,DISPID_IHTMLELEMENT3_ISDISABLED = -2147417007,DISPID_IHTMLELEMENT3_ONMOVE = -2147412034,DISPID_IHTMLELEMENT3_ONCONTROLSELECT = -2147412033,DISPID_IHTMLELEMENT3_FIREEVENT = -2147417006,DISPID_IHTMLELEMENT3_ONRESIZESTART = -2147412029,DISPID_IHTMLELEMENT3_ONRESIZEEND = -2147412028,DISPID_IHTMLELEMENT3_ONMOVESTART = -2147412031,DISPID_IHTMLELEMENT3_ONMOVEEND = -2147412030,DISPID_IHTMLELEMENT3_ONMOUSEENTER = -2147412027,DISPID_IHTMLELEMENT3_ONMOUSELEAVE = -2147412026,DISPID_IHTMLELEMENT3_ONACTIVATE = -2147412025,DISPID_IHTMLELEMENT3_ONDEACTIVATE = -2147412024,DISPID_IHTMLELEMENT3_DRAGDROP = -2147417005,DISPID_IHTMLELEMENT3_GLYPHMODE = -2147417004,DISPID_IHTMLELEMENT4_ONMOUSEWHEEL = -2147412036,DISPID_IHTMLELEMENT4_NORMALIZE = -2147417000,DISPID_IHTMLELEMENT4_GETATTRIBUTENODE = -2147417003,DISPID_IHTMLELEMENT4_SETATTRIBUTENODE = -2147417002,DISPID_IHTMLELEMENT4_REMOVEATTRIBUTENODE = -2147417001,DISPID_IHTMLELEMENT4_ONBEFOREACTIVATE = -2147412022,DISPID_IHTMLELEMENT4_ONFOCUSIN = -2147412021,DISPID_IHTMLELEMENT4_ONFOCUSOUT = -2147412020,DISPID_HTMLELEMENTEVENTS2_ONCLICK = -600,DISPID_HTMLELEMENTEVENTS2_ONDBLCLICK = -601,DISPID_HTMLELEMENTEVENTS2_ONKEYPRESS = -603,DISPID_HTMLELEMENTEVENTS2_ONKEYDOWN = -602,DISPID_HTMLELEMENTEVENTS2_ONKEYUP = -604,DISPID_HTMLELEMENTEVENTS2_ONMOUSEMOVE = -606,DISPID_HTMLELEMENTEVENTS2_ONMOUSEDOWN = -605,DISPID_HTMLELEMENTEVENTS2_ONMOUSEUP = -607,DISPID_HTMLELEMENTEVENTS2_ONSCROLL = 1014,DISPID_HTMLELEMENTEVENTS2_ONRESIZE = 1016,DISPID_HTMLELEMENTEVENTS2_ONCONTEXTMENU = 1023,DISPID_HTMLELEMENTEVENTS2_ONREADYSTATECHANGE = -609,DISPID_HTMLELEMENTEVENTS2_ONLAYOUTCOMPLETE = 1030,DISPID_HTMLELEMENTEVENTS2_ONPAGE = 1031,DISPID_HTMLELEMENTEVENTS2_ONMOUSEENTER = 1042,DISPID_HTMLELEMENTEVENTS2_ONMOUSELEAVE = 1043,DISPID_HTMLELEMENTEVENTS2_ONACTIVATE = 1044,DISPID_HTMLELEMENTEVENTS2_ONDEACTIVATE = 1045,DISPID_HTMLELEMENTEVENTS2_ONBEFOREDEACTIVATE = 1034,DISPID_HTMLELEMENTEVENTS2_ONBEFOREACTIVATE = 1047,DISPID_HTMLELEMENTEVENTS2_ONFOCUSIN = 1048,DISPID_HTMLELEMENTEVENTS2_ONFOCUSOUT = 1049,DISPID_HTMLELEMENTEVENTS2_ONMOVE = 1035,DISPID_HTMLELEMENTEVENTS2_ONCONTROLSELECT = 1036,DISPID_HTMLELEMENTEVENTS2_ONMOVESTART = 1038,DISPID_HTMLELEMENTEVENTS2_ONMOVEEND = 1039,DISPID_HTMLELEMENTEVENTS2_ONRESIZESTART = 1040,DISPID_HTMLELEMENTEVENTS2_ONRESIZEEND = 1041,DISPID_HTMLELEMENTEVENTS2_ONMOUSEWHEEL = 1033,DISPID_HTMLELEMENTEVENTS_ONCLICK = -600,DISPID_HTMLELEMENTEVENTS_ONDBLCLICK = -601,DISPID_HTMLELEMENTEVENTS_ONKEYPRESS = -603,DISPID_HTMLELEMENTEVENTS_ONKEYDOWN = -602,DISPID_HTMLELEMENTEVENTS_ONKEYUP = -604,DISPID_HTMLELEMENTEVENTS_ONMOUSEMOVE = -606,DISPID_HTMLELEMENTEVENTS_ONMOUSEDOWN = -605,DISPID_HTMLELEMENTEVENTS_ONMOUSEUP = -607,DISPID_HTMLELEMENTEVENTS_ONSCROLL = 1014,DISPID_HTMLELEMENTEVENTS_ONRESIZE = 1016,DISPID_HTMLELEMENTEVENTS_ONCONTEXTMENU = 1023,DISPID_HTMLELEMENTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLELEMENTEVENTS_ONBEFOREEDITFOCUS = 1027,DISPID_HTMLELEMENTEVENTS_ONLAYOUTCOMPLETE = 1030,DISPID_HTMLELEMENTEVENTS_ONPAGE = 1031,DISPID_HTMLELEMENTEVENTS_ONBEFOREDEACTIVATE = 1034,DISPID_HTMLELEMENTEVENTS_ONBEFOREACTIVATE = 1047,DISPID_HTMLELEMENTEVENTS_ONMOVE = 1035,DISPID_HTMLELEMENTEVENTS_ONCONTROLSELECT = 1036,DISPID_HTMLELEMENTEVENTS_ONMOVESTART = 1038,DISPID_HTMLELEMENTEVENTS_ONMOVEEND = 1039,DISPID_HTMLELEMENTEVENTS_ONRESIZESTART = 1040,DISPID_HTMLELEMENTEVENTS_ONRESIZEEND = 1041,DISPID_HTMLELEMENTEVENTS_ONMOUSEENTER = 1042,DISPID_HTMLELEMENTEVENTS_ONMOUSELEAVE = 1043,DISPID_HTMLELEMENTEVENTS_ONMOUSEWHEEL = 1033,DISPID_HTMLELEMENTEVENTS_ONACTIVATE = 1044,DISPID_HTMLELEMENTEVENTS_ONDEACTIVATE = 1045,DISPID_HTMLELEMENTEVENTS_ONFOCUSIN = 1048,DISPID_HTMLELEMENTEVENTS_ONFOCUSOUT = 1049,DISPID_IHTMLELEMENTDEFAULTS_STYLE = 1001,DISPID_IHTMLELEMENTDEFAULTS_TABSTOP = 1002,DISPID_IHTMLELEMENTDEFAULTS_VIEWINHERITSTYLE = -2147412913,DISPID_IHTMLELEMENTDEFAULTS_VIEWMASTERTAB = 1006,DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTX = 1003,DISPID_IHTMLELEMENTDEFAULTS_SCROLLSEGMENTY = 1004,DISPID_IHTMLELEMENTDEFAULTS_ISMULTILINE = 1008,DISPID_IHTMLELEMENTDEFAULTS_CONTENTEDITABLE = -2147412950,DISPID_IHTMLELEMENTDEFAULTS_CANHAVEHTML = 1009,DISPID_IHTMLELEMENTDEFAULTS_VIEWLINK = 1011,DISPID_IHTMLELEMENTDEFAULTS_FROZEN = -2147412914,DISPID_IHTCDEFAULTDISPATCH_DEFAULTS = -2147412947,DISPID_IHTCDEFAULTDISPATCH_DOCUMENT = -2147412970,DISPID_IHTCATTACHBEHAVIOR_FIREEVENT = 0,DISPID_IHTCATTACHBEHAVIOR2_FIREEVENT = 0,DISPID_IHTMLURNCOLLECTION_LENGTH = 1001,DISPID_IHTMLURNCOLLECTION_ITEM = 0,DISPID_IHTMLGENERICELEMENT_RECORDSET = 1001,DISPID_IHTMLGENERICELEMENT_NAMEDRECORDSET = 1002,DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 1001,DISPID_IHTMLSTYLESHEETRULE_READONLY = 1002,DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 1001,DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0,DISPID_IHTMLSTYLESHEETPAGE_SELECTOR = 1001,DISPID_IHTMLSTYLESHEETPAGE_PSEUDOCLASS = 1002,DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_LENGTH = 1001,DISPID_IHTMLSTYLESHEETPAGESCOLLECTION_ITEM = 0,DISPID_IHTMLSTYLESHEET_TITLE = 1001,DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 1002,DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 1003,DISPID_IHTMLSTYLESHEET_READONLY = 1004,DISPID_IHTMLSTYLESHEET_IMPORTS = 1005,DISPID_IHTMLSTYLESHEET_HREF = 1006,DISPID_IHTMLSTYLESHEET_TYPE = 1007,DISPID_IHTMLSTYLESHEET_ID = 1008,DISPID_IHTMLSTYLESHEET_ADDIMPORT = 1009,DISPID_IHTMLSTYLESHEET_ADDRULE = 1010,DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 1011,DISPID_IHTMLSTYLESHEET_REMOVERULE = 1012,DISPID_IHTMLSTYLESHEET_MEDIA = 1013,DISPID_IHTMLSTYLESHEET_CSSTEXT = 1014,DISPID_IHTMLSTYLESHEET_RULES = 1015,DISPID_IHTMLSTYLESHEET2_PAGES = 1016,DISPID_IHTMLSTYLESHEET2_ADDPAGERULE = 1017,DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 1001,DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = -4,DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0,DISPID_IHTMLLINKELEMENT_HREF = 1005,DISPID_IHTMLLINKELEMENT_REL = 1006,DISPID_IHTMLLINKELEMENT_REV = 1007,DISPID_IHTMLLINKELEMENT_TYPE = 1008,DISPID_IHTMLLINKELEMENT_STYLESHEET = 1014,DISPID_IHTMLLINKELEMENT_MEDIA = 1016,DISPID_IHTMLLINKELEMENT2_TARGET = 1017,DISPID_IHTMLLINKELEMENT3_CHARSET = 1018,DISPID_IHTMLLINKELEMENT3_HREFLANG = 1019,DISPID_HTMLLINKELEMENTEVENTS2_ONLOAD = 1003,DISPID_HTMLLINKELEMENTEVENTS2_ONERROR = 1002,DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 1003,DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 1002,DISPID_IHTMLTXTRANGE_HTMLTEXT = 1003,DISPID_IHTMLTXTRANGE_TEXT = 1004,DISPID_IHTMLTXTRANGE_PARENTELEMENT = 1006,DISPID_IHTMLTXTRANGE_DUPLICATE = 1008,DISPID_IHTMLTXTRANGE_INRANGE = 1010,DISPID_IHTMLTXTRANGE_ISEQUAL = 1011,DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 1012,DISPID_IHTMLTXTRANGE_COLLAPSE = 1013,DISPID_IHTMLTXTRANGE_EXPAND = 1014,DISPID_IHTMLTXTRANGE_MOVE = 1015,DISPID_IHTMLTXTRANGE_MOVESTART = 1016,DISPID_IHTMLTXTRANGE_MOVEEND = 1017,DISPID_IHTMLTXTRANGE_SELECT = 1024,DISPID_IHTMLTXTRANGE_PASTEHTML = 1026,DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 1001,DISPID_IHTMLTXTRANGE_SETENDPOINT = 1025,DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 1018,DISPID_IHTMLTXTRANGE_FINDTEXT = 1019,DISPID_IHTMLTXTRANGE_MOVETOPOINT = 1020,DISPID_IHTMLTXTRANGE_GETBOOKMARK = 1021,DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 1009,DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 1027,DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 1028,DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 1029,DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 1030,DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 1031,DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 1032,DISPID_IHTMLTXTRANGE_EXECCOMMAND = 1033,DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 1034,DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 1035,DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 1036,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 1037,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 1038,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 1039,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 1040,DISPID_IHTMLTEXTRANGEMETRICS2_GETCLIENTRECTS = 1041,DISPID_IHTMLTEXTRANGEMETRICS2_GETBOUNDINGCLIENTRECT = 1042,DISPID_IHTMLTXTRANGECOLLECTION_LENGTH = 1500,DISPID_IHTMLTXTRANGECOLLECTION__NEWENUM = -4,DISPID_IHTMLTXTRANGECOLLECTION_ITEM = 0,DISPID_IHTMLFORMELEMENT_ACTION = 1001,DISPID_IHTMLFORMELEMENT_ENCODING = 1003,DISPID_IHTMLFORMELEMENT_METHOD = 1004,DISPID_IHTMLFORMELEMENT_ELEMENTS = 1005,DISPID_IHTMLFORMELEMENT_TARGET = 1006,DISPID_IHTMLFORMELEMENT_SUBMIT = 1009,DISPID_IHTMLFORMELEMENT_RESET = 1010,DISPID_IHTMLFORMELEMENT_LENGTH = 1500,DISPID_IHTMLFORMELEMENT__NEWENUM = -4,DISPID_IHTMLFORMELEMENT_ITEM = 0,DISPID_IHTMLFORMELEMENT_TAGS = 1502,DISPID_IHTMLFORMELEMENT2_ACCEPTCHARSET = 1011,DISPID_IHTMLFORMELEMENT2_URNS = 1505,DISPID_IHTMLFORMELEMENT3_NAMEDITEM = 1506,DISPID_IHTMLSUBMITDATA_APPENDNAMEVALUEPAIR = 1012,DISPID_IHTMLSUBMITDATA_APPENDNAMEFILEPAIR = 1013,DISPID_IHTMLSUBMITDATA_APPENDITEMSEPARATOR = 1014,DISPID_HTMLFORMELEMENTEVENTS2_ONSUBMIT = 1007,DISPID_HTMLFORMELEMENTEVENTS2_ONRESET = 1015,DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 1007,DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 1015,DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 1001,DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 1002,DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 1003,DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 1004,DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 1005,DISPID_HTMLTEXTCONTAINEREVENTS2_ONCHANGE = 1001,DISPID_HTMLTEXTCONTAINEREVENTS2_ONSELECT = 1006,DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 1001,DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 1006,DISPID_IHTMLCONTROLRANGE_SELECT = 1002,DISPID_IHTMLCONTROLRANGE_ADD = 1003,DISPID_IHTMLCONTROLRANGE_REMOVE = 1004,DISPID_IHTMLCONTROLRANGE_ITEM = 0,DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 1006,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 1007,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 1008,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 1009,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 1010,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 1011,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 1012,DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 1013,DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 1014,DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 1015,DISPID_IHTMLCONTROLRANGE_LENGTH = 1005,DISPID_IHTMLCONTROLRANGE2_ADDELEMENT = 1016,DISPID_IHTMLIMGELEMENT_ISMAP = 2002,DISPID_IHTMLIMGELEMENT_USEMAP = 2008,DISPID_IHTMLIMGELEMENT_MIMETYPE = 2010,DISPID_IHTMLIMGELEMENT_FILESIZE = 2011,DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 2012,DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 2013,DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 2014,DISPID_IHTMLIMGELEMENT_PROTOCOL = 2015,DISPID_IHTMLIMGELEMENT_HREF = 2016,DISPID_IHTMLIMGELEMENT_NAMEPROP = 2017,DISPID_IHTMLIMGELEMENT_BORDER = 1004,DISPID_IHTMLIMGELEMENT_VSPACE = 1005,DISPID_IHTMLIMGELEMENT_HSPACE = 1006,DISPID_IHTMLIMGELEMENT_ALT = 1002,DISPID_IHTMLIMGELEMENT_SRC = 1003,DISPID_IHTMLIMGELEMENT_LOWSRC = 1007,DISPID_IHTMLIMGELEMENT_VRML = 1008,DISPID_IHTMLIMGELEMENT_DYNSRC = 1009,DISPID_IHTMLIMGELEMENT_COMPLETE = 1010,DISPID_IHTMLIMGELEMENT_LOOP = 1011,DISPID_IHTMLIMGELEMENT_START = 1013,DISPID_IHTMLIMGELEMENT2_LONGDESC = 2019,DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0,DISPID_HTMLIMGEVENTS2_ONLOAD = 1003,DISPID_HTMLIMGEVENTS2_ONERROR = 1002,DISPID_HTMLIMGEVENTS2_ONABORT = 1000,DISPID_HTMLIMGEVENTS_ONLOAD = 1003,DISPID_HTMLIMGEVENTS_ONERROR = 1002,DISPID_HTMLIMGEVENTS_ONABORT = 1000,DISPID_IHTMLBODYELEMENT_BGCOLOR = -501,DISPID_IHTMLBODYELEMENT_LINK = 2010,DISPID_IHTMLBODYELEMENT_VLINK = 2012,DISPID_IHTMLBODYELEMENT_ALINK = 2011,DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 2013,DISPID_IHTMLANCHORELEMENT_HREF = 0,DISPID_IHTMLANCHORELEMENT_TARGET = 1003,DISPID_IHTMLANCHORELEMENT_REL = 1005,DISPID_IHTMLANCHORELEMENT_REV = 1006,DISPID_IHTMLANCHORELEMENT_URN = 1007,DISPID_IHTMLANCHORELEMENT_METHODS = 1008,DISPID_IHTMLANCHORELEMENT_HOST = 1012,DISPID_IHTMLANCHORELEMENT_HOSTNAME = 1013,DISPID_IHTMLANCHORELEMENT_PATHNAME = 1014,DISPID_IHTMLANCHORELEMENT_PORT = 1015,DISPID_IHTMLANCHORELEMENT_PROTOCOL = 1016,DISPID_IHTMLANCHORELEMENT_SEARCH = 1017,DISPID_IHTMLANCHORELEMENT_HASH = 1018,DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 1031,DISPID_IHTMLANCHORELEMENT_MIMETYPE = 1030,DISPID_IHTMLANCHORELEMENT_NAMEPROP = 1032,DISPID_IHTMLANCHORELEMENT2_CHARSET = 1023,DISPID_IHTMLANCHORELEMENT2_COORDS = 1024,DISPID_IHTMLANCHORELEMENT2_HREFLANG = 1025,DISPID_IHTMLANCHORELEMENT2_SHAPE = 1026,DISPID_IHTMLANCHORELEMENT2_TYPE = 1027,DISPID_IHTMLLABELELEMENT_HTMLFOR = 1000,DISPID_IHTMLLABELELEMENT2_FORM = 1002,DISPID_IHTMLLISTELEMENT2_COMPACT = 1001,DISPID_IHTMLOLISTELEMENT_START = 1003,DISPID_IHTMLLIELEMENT_VALUE = 1001,DISPID_IHTMLBLOCKELEMENT2_CITE = 1001,DISPID_IHTMLBLOCKELEMENT2_WIDTH = 1002,DISPID_IHTMLDLISTELEMENT_COMPACT = 1001,DISPID_IHTMLHRELEMENT_NOSHADE = 1001,DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 1501,DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 1500,DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = -4,DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0,DISPID_IHTMLELEMENTCOLLECTION_TAGS = 1502,DISPID_IHTMLELEMENTCOLLECTION2_URNS = 1505,DISPID_IHTMLELEMENTCOLLECTION3_NAMEDITEM = 1506,DISPID_IHTMLSELECTELEMENT_SIZE = 1002,DISPID_IHTMLSELECTELEMENT_MULTIPLE = 1003,DISPID_IHTMLSELECTELEMENT_OPTIONS = 1005,DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 1010,DISPID_IHTMLSELECTELEMENT_TYPE = 1012,DISPID_IHTMLSELECTELEMENT_VALUE = 1011,DISPID_IHTMLSELECTELEMENT_ADD = 1503,DISPID_IHTMLSELECTELEMENT_REMOVE = 1504,DISPID_IHTMLSELECTELEMENT_LENGTH = 1500,DISPID_IHTMLSELECTELEMENT__NEWENUM = -4,DISPID_IHTMLSELECTELEMENT_ITEM = 0,DISPID_IHTMLSELECTELEMENT_TAGS = 1502,DISPID_IHTMLSELECTELEMENT2_URNS = 1505,DISPID_IHTMLSELECTELEMENT4_NAMEDITEM = 1506,DISPID_HTMLSELECTELEMENTEVENTS2_ONCHANGE = 1001,DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 1001,DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 1001,DISPID_IHTMLSELECTIONOBJECT_EMPTY = 1002,DISPID_IHTMLSELECTIONOBJECT_CLEAR = 1003,DISPID_IHTMLSELECTIONOBJECT_TYPE = 1004,DISPID_IHTMLSELECTIONOBJECT2_CREATERANGECOLLECTION = 1005,DISPID_IHTMLSELECTIONOBJECT2_TYPEDETAIL = 1006,DISPID_IHTMLOPTIONELEMENT_SELECTED = 1001,DISPID_IHTMLOPTIONELEMENT_VALUE = 1002,DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 1003,DISPID_IHTMLOPTIONELEMENT_INDEX = 1005,DISPID_IHTMLOPTIONELEMENT_TEXT = 1004,DISPID_IHTMLOPTIONELEMENT_FORM = 1006,DISPID_IHTMLOPTIONELEMENT3_LABEL = 1007,DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0,DISPID_IHTMLINPUTELEMENT_TYPE = 2000,DISPID_IHTMLINPUTELEMENT_STATUS = 2001,DISPID_IHTMLINPUTELEMENT_SIZE = 2002,DISPID_IHTMLINPUTELEMENT_MAXLENGTH = 2003,DISPID_IHTMLINPUTELEMENT_SELECT = 2004,DISPID_IHTMLINPUTELEMENT_READONLY = 2005,DISPID_IHTMLINPUTELEMENT_CREATETEXTRANGE = 2006,DISPID_IHTMLINPUTELEMENT_INDETERMINATE = 2007,DISPID_IHTMLINPUTELEMENT_DEFAULTCHECKED = 2008,DISPID_IHTMLINPUTELEMENT_CHECKED = 2009,DISPID_IHTMLINPUTELEMENT_BORDER = 2012,DISPID_IHTMLINPUTELEMENT_VSPACE = 2013,DISPID_IHTMLINPUTELEMENT_HSPACE = 2014,DISPID_IHTMLINPUTELEMENT_ALT = 2010,DISPID_IHTMLINPUTELEMENT_SRC = 2011,DISPID_IHTMLINPUTELEMENT_LOWSRC = 2015,DISPID_IHTMLINPUTELEMENT_VRML = 2016,DISPID_IHTMLINPUTELEMENT_DYNSRC = 2017,DISPID_IHTMLINPUTELEMENT_COMPLETE = 2018,DISPID_IHTMLINPUTELEMENT_LOOP = 2019,DISPID_IHTMLINPUTELEMENT_START = 2020,DISPID_IHTMLINPUTELEMENT2_ACCEPT = 2022,DISPID_IHTMLINPUTELEMENT2_USEMAP = 2023,DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 2000,DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 2021,DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 2006,DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 2000,DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 2021,DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 2006,DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 2000,DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 2021,DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 2002,DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 2003,DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 2004,DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 2005,DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 2006,DISPID_IHTMLINPUTFILEELEMENT_TYPE = 2000,DISPID_IHTMLINPUTFILEELEMENT_STATUS = 2021,DISPID_IHTMLINPUTFILEELEMENT_SIZE = 2002,DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 2003,DISPID_IHTMLINPUTFILEELEMENT_SELECT = 2004,DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 2000,DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 2009,DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 2008,DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 2001,DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 2007,DISPID_IHTMLINPUTIMAGE_TYPE = 2000,DISPID_IHTMLINPUTIMAGE_BORDER = 2012,DISPID_IHTMLINPUTIMAGE_VSPACE = 2013,DISPID_IHTMLINPUTIMAGE_HSPACE = 2014,DISPID_IHTMLINPUTIMAGE_ALT = 2010,DISPID_IHTMLINPUTIMAGE_SRC = 2011,DISPID_IHTMLINPUTIMAGE_LOWSRC = 2015,DISPID_IHTMLINPUTIMAGE_VRML = 2016,DISPID_IHTMLINPUTIMAGE_DYNSRC = 2017,DISPID_IHTMLINPUTIMAGE_COMPLETE = 2018,DISPID_IHTMLINPUTIMAGE_LOOP = 2019,DISPID_IHTMLINPUTIMAGE_START = 2020,DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONCHANGE = 1001,DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONSELECT = 1006,DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONLOAD = 1003,DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONERROR = 1002,DISPID_HTMLINPUTTEXTELEMENTEVENTS2_ONABORT = 1000,DISPID_HTMLINPUTIMAGEEVENTS2_ONLOAD = 1003,DISPID_HTMLINPUTIMAGEEVENTS2_ONERROR = 1002,DISPID_HTMLINPUTIMAGEEVENTS2_ONABORT = 1000,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 1001,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 1006,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONLOAD = 1003,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONERROR = 1002,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONABORT = 1000,DISPID_HTMLINPUTIMAGEEVENTS_ONLOAD = 1003,DISPID_HTMLINPUTIMAGEEVENTS_ONERROR = 1002,DISPID_HTMLINPUTIMAGEEVENTS_ONABORT = 1000,DISPID_IHTMLTEXTAREAELEMENT_TYPE = 2000,DISPID_IHTMLTEXTAREAELEMENT_STATUS = 2001,DISPID_IHTMLTEXTAREAELEMENT_SELECT = 7005,DISPID_IHTMLTEXTAREAELEMENT_READONLY = 7004,DISPID_IHTMLTEXTAREAELEMENT_ROWS = 7001,DISPID_IHTMLTEXTAREAELEMENT_COLS = 7002,DISPID_IHTMLTEXTAREAELEMENT_WRAP = 7003,DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 7006,DISPID_IHTMLBUTTONELEMENT_TYPE = 2000,DISPID_IHTMLBUTTONELEMENT_STATUS = 8001,DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 8002,DISPID_IHTMLMARQUEEELEMENT_BGCOLOR = -501,DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 6000,DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 6001,DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 6002,DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 6003,DISPID_IHTMLMARQUEEELEMENT_LOOP = 6004,DISPID_IHTMLMARQUEEELEMENT_VSPACE = 6005,DISPID_IHTMLMARQUEEELEMENT_HSPACE = 6006,DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 6007,DISPID_IHTMLMARQUEEELEMENT_START = 6010,DISPID_IHTMLMARQUEEELEMENT_STOP = 6011,DISPID_HTMLMARQUEEELEMENTEVENTS2_ONBOUNCE = 1009,DISPID_HTMLMARQUEEELEMENTEVENTS2_ONFINISH = 1010,DISPID_HTMLMARQUEEELEMENTEVENTS2_ONSTART = 1011,DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 1009,DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 1010,DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 1011,DISPID_IHTMLHTMLELEMENT_VERSION = 1001,DISPID_IHTMLHEADELEMENT_PROFILE = 1001,DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 1001,DISPID_IHTMLMETAELEMENT_CONTENT = 1002,DISPID_IHTMLMETAELEMENT_URL = 1003,DISPID_IHTMLMETAELEMENT_CHARSET = 1013,DISPID_IHTMLMETAELEMENT2_SCHEME = 1020,DISPID_IHTMLBASEELEMENT_HREF = 1003,DISPID_IHTMLBASEELEMENT_TARGET = 1004,DISPID_IHTMLISINDEXELEMENT_PROMPT = 1010,DISPID_IHTMLISINDEXELEMENT_ACTION = 1011,DISPID_IHTMLISINDEXELEMENT2_FORM = 1012,DISPID_IHTMLNEXTIDELEMENT_N = 1012,DISPID_IOMHISTORY_LENGTH = 1,DISPID_IOMHISTORY_BACK = 2,DISPID_IOMHISTORY_FORWARD = 3,DISPID_IOMHISTORY_GO = 4,DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 1,DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 1,DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 2,DISPID_IHTMLOPSPROFILE_ADDREQUEST = 1,DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 2,DISPID_IHTMLOPSPROFILE_DOREQUEST = 3,DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 4,DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 5,DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 6,DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 7,DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 8,DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 9,DISPID_IOMNAVIGATOR_APPCODENAME = 1,DISPID_IOMNAVIGATOR_APPNAME = 2,DISPID_IOMNAVIGATOR_APPVERSION = 3,DISPID_IOMNAVIGATOR_USERAGENT = 4,DISPID_IOMNAVIGATOR_JAVAENABLED = 5,DISPID_IOMNAVIGATOR_TAINTENABLED = 6,DISPID_IOMNAVIGATOR_MIMETYPES = 7,DISPID_IOMNAVIGATOR_PLUGINS = 8,DISPID_IOMNAVIGATOR_COOKIEENABLED = 9,DISPID_IOMNAVIGATOR_OPSPROFILE = 10,DISPID_IOMNAVIGATOR_TOSTRING = 11,DISPID_IOMNAVIGATOR_CPUCLASS = 12,DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 13,DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 14,DISPID_IOMNAVIGATOR_USERLANGUAGE = 15,DISPID_IOMNAVIGATOR_PLATFORM = 16,DISPID_IOMNAVIGATOR_APPMINORVERSION = 17,DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 18,DISPID_IOMNAVIGATOR_ONLINE = 19,DISPID_IOMNAVIGATOR_USERPROFILE = 20,DISPID_IHTMLLOCATION_HREF = 0,DISPID_IHTMLLOCATION_PROTOCOL = 1,DISPID_IHTMLLOCATION_HOST = 2,DISPID_IHTMLLOCATION_HOSTNAME = 3,DISPID_IHTMLLOCATION_PORT = 4,DISPID_IHTMLLOCATION_PATHNAME = 5,DISPID_IHTMLLOCATION_SEARCH = 6,DISPID_IHTMLLOCATION_HASH = 7,DISPID_IHTMLLOCATION_RELOAD = 8,DISPID_IHTMLLOCATION_REPLACE = 9,DISPID_IHTMLLOCATION_ASSIGN = 10,DISPID_IHTMLLOCATION_TOSTRING = 11,DISPID_IHTMLBOOKMARKCOLLECTION_LENGTH = 1501,DISPID_IHTMLBOOKMARKCOLLECTION__NEWENUM = -4,DISPID_IHTMLBOOKMARKCOLLECTION_ITEM = 0,DISPID_IHTMLDATATRANSFER_SETDATA = 1001,DISPID_IHTMLDATATRANSFER_GETDATA = 1002,DISPID_IHTMLDATATRANSFER_CLEARDATA = 1003,DISPID_IHTMLDATATRANSFER_DROPEFFECT = 1004,DISPID_IHTMLDATATRANSFER_EFFECTALLOWED = 1005,DISPID_IHTMLEVENTOBJ_SRCELEMENT = 1001,DISPID_IHTMLEVENTOBJ_ALTKEY = 1002,DISPID_IHTMLEVENTOBJ_CTRLKEY = 1003,DISPID_IHTMLEVENTOBJ_SHIFTKEY = 1004,DISPID_IHTMLEVENTOBJ_RETURNVALUE = 1007,DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 1008,DISPID_IHTMLEVENTOBJ_FROMELEMENT = 1009,DISPID_IHTMLEVENTOBJ_TOELEMENT = 1010,DISPID_IHTMLEVENTOBJ_KEYCODE = 1011,DISPID_IHTMLEVENTOBJ_BUTTON = 1012,DISPID_IHTMLEVENTOBJ_TYPE = 1013,DISPID_IHTMLEVENTOBJ_QUALIFIER = 1014,DISPID_IHTMLEVENTOBJ_REASON = 1015,DISPID_IHTMLEVENTOBJ_X = 1005,DISPID_IHTMLEVENTOBJ_Y = 1006,DISPID_IHTMLEVENTOBJ_CLIENTX = 1020,DISPID_IHTMLEVENTOBJ_CLIENTY = 1021,DISPID_IHTMLEVENTOBJ_OFFSETX = 1022,DISPID_IHTMLEVENTOBJ_OFFSETY = 1023,DISPID_IHTMLEVENTOBJ_SCREENX = 1024,DISPID_IHTMLEVENTOBJ_SCREENY = 1025,DISPID_IHTMLEVENTOBJ_SRCFILTER = 1026,DISPID_IHTMLEVENTOBJ2_PROPERTYNAME = 1027,DISPID_IHTMLEVENTOBJ2_BOOKMARKS = 1031,DISPID_IHTMLEVENTOBJ2_RECORDSET = 1032,DISPID_IHTMLEVENTOBJ2_DATAFLD = 1033,DISPID_IHTMLEVENTOBJ2_BOUNDELEMENTS = 1034,DISPID_IHTMLEVENTOBJ2_REPEAT = 1035,DISPID_IHTMLEVENTOBJ2_SRCURN = 1036,DISPID_IHTMLEVENTOBJ2_SRCELEMENT = 1001,DISPID_IHTMLEVENTOBJ2_ALTKEY = 1002,DISPID_IHTMLEVENTOBJ2_CTRLKEY = 1003,DISPID_IHTMLEVENTOBJ2_SHIFTKEY = 1004,DISPID_IHTMLEVENTOBJ2_FROMELEMENT = 1009,DISPID_IHTMLEVENTOBJ2_TOELEMENT = 1010,DISPID_IHTMLEVENTOBJ2_BUTTON = 1012,DISPID_IHTMLEVENTOBJ2_TYPE = 1013,DISPID_IHTMLEVENTOBJ2_QUALIFIER = 1014,DISPID_IHTMLEVENTOBJ2_REASON = 1015,DISPID_IHTMLEVENTOBJ2_X = 1005,DISPID_IHTMLEVENTOBJ2_Y = 1006,DISPID_IHTMLEVENTOBJ2_CLIENTX = 1020,DISPID_IHTMLEVENTOBJ2_CLIENTY = 1021,DISPID_IHTMLEVENTOBJ2_OFFSETX = 1022,DISPID_IHTMLEVENTOBJ2_OFFSETY = 1023,DISPID_IHTMLEVENTOBJ2_SCREENX = 1024,DISPID_IHTMLEVENTOBJ2_SCREENY = 1025,DISPID_IHTMLEVENTOBJ2_SRCFILTER = 1026,DISPID_IHTMLEVENTOBJ2_DATATRANSFER = 1037,DISPID_IHTMLEVENTOBJ3_CONTENTOVERFLOW = 1038,DISPID_IHTMLEVENTOBJ3_SHIFTLEFT = 1039,DISPID_IHTMLEVENTOBJ3_ALTLEFT = 1040,DISPID_IHTMLEVENTOBJ3_CTRLLEFT = 1041,DISPID_IHTMLEVENTOBJ3_IMECOMPOSITIONCHANGE = 1042,DISPID_IHTMLEVENTOBJ3_IMENOTIFYCOMMAND = 1043,DISPID_IHTMLEVENTOBJ3_IMENOTIFYDATA = 1044,DISPID_IHTMLEVENTOBJ3_IMEREQUEST = 1046,DISPID_IHTMLEVENTOBJ3_IMEREQUESTDATA = 1047,DISPID_IHTMLEVENTOBJ3_KEYBOARDLAYOUT = 1045,DISPID_IHTMLEVENTOBJ3_BEHAVIORCOOKIE = 1048,DISPID_IHTMLEVENTOBJ3_BEHAVIORPART = 1049,DISPID_IHTMLEVENTOBJ3_NEXTPAGE = 1050,DISPID_IHTMLEVENTOBJ4_WHEELDELTA = 1051,DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0,DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 1001,DISPID_IHTMLSCREEN_COLORDEPTH = 1001,DISPID_IHTMLSCREEN_BUFFERDEPTH = 1002,DISPID_IHTMLSCREEN_WIDTH = 1003,DISPID_IHTMLSCREEN_HEIGHT = 1004,DISPID_IHTMLSCREEN_UPDATEINTERVAL = 1005,DISPID_IHTMLSCREEN_AVAILHEIGHT = 1006,DISPID_IHTMLSCREEN_AVAILWIDTH = 1007,DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 1008,DISPID_IHTMLSCREEN2_LOGICALXDPI = 1009,DISPID_IHTMLSCREEN2_LOGICALYDPI = 1010,DISPID_IHTMLSCREEN2_DEVICEXDPI = 1011,DISPID_IHTMLSCREEN2_DEVICEYDPI = 1012,DISPID_IHTMLWINDOW2_FRAMES = 1100,DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 1101,DISPID_IHTMLWINDOW2_STATUS = 1102,DISPID_IHTMLWINDOW2_SETTIMEOUT = 1172,DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 1104,DISPID_IHTMLWINDOW2_ALERT = 1105,DISPID_IHTMLWINDOW2_CONFIRM = 1110,DISPID_IHTMLWINDOW2_PROMPT = 1111,DISPID_IHTMLWINDOW2_IMAGE = 1125,DISPID_IHTMLWINDOW2_LOCATION = 14,DISPID_IHTMLWINDOW2_HISTORY = 2,DISPID_IHTMLWINDOW2_CLOSE = 3,DISPID_IHTMLWINDOW2_OPENER = 4,DISPID_IHTMLWINDOW2_NAVIGATOR = 5,DISPID_IHTMLWINDOW2_NAME = 11,DISPID_IHTMLWINDOW2_PARENT = 12,DISPID_IHTMLWINDOW2_OPEN = 13,DISPID_IHTMLWINDOW2_SELF = 20,DISPID_IHTMLWINDOW2_TOP = 21,DISPID_IHTMLWINDOW2_WINDOW = 22,DISPID_IHTMLWINDOW2_NAVIGATE = 25,DISPID_IHTMLWINDOW2_DOCUMENT = 1151,DISPID_IHTMLWINDOW2_EVENT = 1152,DISPID_IHTMLWINDOW2__NEWENUM = 1153,DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 1154,DISPID_IHTMLWINDOW2_SHOWHELP = 1155,DISPID_IHTMLWINDOW2_SCREEN = 1156,DISPID_IHTMLWINDOW2_OPTION = 1157,DISPID_IHTMLWINDOW2_FOCUS = 1158,DISPID_IHTMLWINDOW2_CLOSED = 23,DISPID_IHTMLWINDOW2_BLUR = 1159,DISPID_IHTMLWINDOW2_SCROLL = 1160,DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 1161,DISPID_IHTMLWINDOW2_SETINTERVAL = 1173,DISPID_IHTMLWINDOW2_CLEARINTERVAL = 1163,DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 1164,DISPID_IHTMLWINDOW2_EXECSCRIPT = 1165,DISPID_IHTMLWINDOW2_TOSTRING = 1166,DISPID_IHTMLWINDOW2_SCROLLBY = 1167,DISPID_IHTMLWINDOW2_SCROLLTO = 1168,DISPID_IHTMLWINDOW2_MOVETO = 6,DISPID_IHTMLWINDOW2_MOVEBY = 7,DISPID_IHTMLWINDOW2_RESIZETO = 9,DISPID_IHTMLWINDOW2_RESIZEBY = 8,DISPID_IHTMLWINDOW2_EXTERNAL = 1169,DISPID_IHTMLWINDOW3_SCREENLEFT = 1170,DISPID_IHTMLWINDOW3_SCREENTOP = 1171,DISPID_IHTMLWINDOW3_SETTIMEOUT = 1103,DISPID_IHTMLWINDOW3_SETINTERVAL = 1162,DISPID_IHTMLWINDOW3_PRINT = 1174,DISPID_IHTMLWINDOW3_CLIPBOARDDATA = 1175,DISPID_IHTMLWINDOW3_SHOWMODELESSDIALOG = 1176,DISPID_IHTMLWINDOW4_CREATEPOPUP = 1180,DISPID_IHTMLWINDOW4_FRAMEELEMENT = 1181,DISPID_HTMLWINDOWEVENTS2_ONLOAD = 1003,DISPID_HTMLWINDOWEVENTS2_ONUNLOAD = 1008,DISPID_HTMLWINDOWEVENTS2_ONERROR = 1002,DISPID_HTMLWINDOWEVENTS2_ONRESIZE = 1016,DISPID_HTMLWINDOWEVENTS2_ONSCROLL = 1014,DISPID_HTMLWINDOWEVENTS2_ONBEFOREUNLOAD = 1017,DISPID_HTMLWINDOWEVENTS2_ONBEFOREPRINT = 1024,DISPID_HTMLWINDOWEVENTS2_ONAFTERPRINT = 1025,DISPID_HTMLWINDOWEVENTS_ONLOAD = 1003,DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 1008,DISPID_HTMLWINDOWEVENTS_ONERROR = 1002,DISPID_HTMLWINDOWEVENTS_ONRESIZE = 1016,DISPID_HTMLWINDOWEVENTS_ONSCROLL = 1014,DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 1017,DISPID_HTMLWINDOWEVENTS_ONBEFOREPRINT = 1024,DISPID_HTMLWINDOWEVENTS_ONAFTERPRINT = 1025,DISPID_IHTMLDOCUMENT_SCRIPT = 1001,DISPID_IHTMLDOCUMENT2_ALL = 1003,DISPID_IHTMLDOCUMENT2_BODY = 1004,DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 1005,DISPID_IHTMLDOCUMENT2_IMAGES = 1011,DISPID_IHTMLDOCUMENT2_APPLETS = 1008,DISPID_IHTMLDOCUMENT2_LINKS = 1009,DISPID_IHTMLDOCUMENT2_FORMS = 1010,DISPID_IHTMLDOCUMENT2_ANCHORS = 1007,DISPID_IHTMLDOCUMENT2_TITLE = 1012,DISPID_IHTMLDOCUMENT2_SCRIPTS = 1013,DISPID_IHTMLDOCUMENT2_DESIGNMODE = 1014,DISPID_IHTMLDOCUMENT2_SELECTION = 1017,DISPID_IHTMLDOCUMENT2_READYSTATE = 1018,DISPID_IHTMLDOCUMENT2_FRAMES = 1019,DISPID_IHTMLDOCUMENT2_EMBEDS = 1015,DISPID_IHTMLDOCUMENT2_PLUGINS = 1021,DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 1022,DISPID_IHTMLDOCUMENT2_BGCOLOR = -501,DISPID_IHTMLDOCUMENT2_LINKCOLOR = 1024,DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 1023,DISPID_IHTMLDOCUMENT2_REFERRER = 1027,DISPID_IHTMLDOCUMENT2_LOCATION = 1026,DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 1028,DISPID_IHTMLDOCUMENT2_URL = 1025,DISPID_IHTMLDOCUMENT2_DOMAIN = 1029,DISPID_IHTMLDOCUMENT2_COOKIE = 1030,DISPID_IHTMLDOCUMENT2_EXPANDO = 1031,DISPID_IHTMLDOCUMENT2_CHARSET = 1032,DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 1033,DISPID_IHTMLDOCUMENT2_MIMETYPE = 1041,DISPID_IHTMLDOCUMENT2_FILESIZE = 1042,DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 1043,DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 1044,DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 1045,DISPID_IHTMLDOCUMENT2_SECURITY = 1046,DISPID_IHTMLDOCUMENT2_PROTOCOL = 1047,DISPID_IHTMLDOCUMENT2_NAMEPROP = 1048,DISPID_IHTMLDOCUMENT2_WRITE = 1054,DISPID_IHTMLDOCUMENT2_WRITELN = 1055,DISPID_IHTMLDOCUMENT2_OPEN = 1056,DISPID_IHTMLDOCUMENT2_CLOSE = 1057,DISPID_IHTMLDOCUMENT2_CLEAR = 1058,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 1059,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 1060,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 1061,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 1062,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 1063,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 1064,DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 1065,DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 1066,DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 1067,DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 1068,DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 1034,DISPID_IHTMLDOCUMENT2_STYLESHEETS = 1069,DISPID_IHTMLDOCUMENT2_TOSTRING = 1070,DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 1071,DISPID_IHTMLDOCUMENT3_RELEASECAPTURE = 1072,DISPID_IHTMLDOCUMENT3_RECALC = 1073,DISPID_IHTMLDOCUMENT3_CREATETEXTNODE = 1074,DISPID_IHTMLDOCUMENT3_DOCUMENTELEMENT = 1075,DISPID_IHTMLDOCUMENT3_UNIQUEID = 1077,DISPID_IHTMLDOCUMENT3_CREATEDOCUMENTFRAGMENT = 1076,DISPID_IHTMLDOCUMENT3_PARENTDOCUMENT = 1078,DISPID_IHTMLDOCUMENT3_ENABLEDOWNLOAD = 1079,DISPID_IHTMLDOCUMENT3_BASEURL = 1080,DISPID_IHTMLDOCUMENT3_INHERITSTYLESHEETS = 1082,DISPID_IHTMLDOCUMENT3_GETELEMENTSBYNAME = 1086,DISPID_IHTMLDOCUMENT3_GETELEMENTBYID = 1088,DISPID_IHTMLDOCUMENT3_GETELEMENTSBYTAGNAME = 1087,DISPID_IHTMLDOCUMENT4_FOCUS = 1089,DISPID_IHTMLDOCUMENT4_HASFOCUS = 1090,DISPID_IHTMLDOCUMENT4_ONSELECTIONCHANGE = -2147412032,DISPID_IHTMLDOCUMENT4_NAMESPACES = 1091,DISPID_IHTMLDOCUMENT4_CREATEDOCUMENTFROMURL = 1092,DISPID_IHTMLDOCUMENT4_MEDIA = 1093,DISPID_IHTMLDOCUMENT4_CREATEEVENTOBJECT = 1094,DISPID_IHTMLDOCUMENT4_FIREEVENT = 1095,DISPID_IHTMLDOCUMENT4_CREATERENDERSTYLE = 1096,DISPID_IHTMLDOCUMENT4_ONCONTROLSELECT = -2147412033,DISPID_IHTMLDOCUMENT4_URLUNENCODED = 1097,DISPID_IHTMLDOCUMENT5_ONMOUSEWHEEL = -2147412036,DISPID_IHTMLDOCUMENT5_DOCTYPE = 1098,DISPID_IHTMLDOCUMENT5_IMPLEMENTATION = 1099,DISPID_IHTMLDOCUMENT5_CREATEATTRIBUTE = 1100,DISPID_IHTMLDOCUMENT5_CREATECOMMENT = 1101,DISPID_IHTMLDOCUMENT5_ONFOCUSIN = -2147412021,DISPID_IHTMLDOCUMENT5_ONFOCUSOUT = -2147412020,DISPID_IHTMLDOCUMENT5_ONACTIVATE = -2147412025,DISPID_IHTMLDOCUMENT5_ONDEACTIVATE = -2147412024,DISPID_IHTMLDOCUMENT5_ONBEFOREACTIVATE = -2147412022,DISPID_IHTMLDOCUMENT5_ONBEFOREDEACTIVATE = -2147412035,DISPID_IHTMLDOCUMENT5_COMPATMODE = 1102,DISPID_HTMLDOCUMENTEVENTS2_ONCLICK = -600,DISPID_HTMLDOCUMENTEVENTS2_ONDBLCLICK = -601,DISPID_HTMLDOCUMENTEVENTS2_ONKEYDOWN = -602,DISPID_HTMLDOCUMENTEVENTS2_ONKEYUP = -604,DISPID_HTMLDOCUMENTEVENTS2_ONKEYPRESS = -603,DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEDOWN = -605,DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEMOVE = -606,DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEUP = -607,DISPID_HTMLDOCUMENTEVENTS2_ONREADYSTATECHANGE = -609,DISPID_HTMLDOCUMENTEVENTS2_ONCONTEXTMENU = 1023,DISPID_HTMLDOCUMENTEVENTS2_ONSTOP = 1026,DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREEDITFOCUS = 1027,DISPID_HTMLDOCUMENTEVENTS2_ONSELECTIONCHANGE = 1037,DISPID_HTMLDOCUMENTEVENTS2_ONCONTROLSELECT = 1036,DISPID_HTMLDOCUMENTEVENTS2_ONMOUSEWHEEL = 1033,DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSIN = 1048,DISPID_HTMLDOCUMENTEVENTS2_ONFOCUSOUT = 1049,DISPID_HTMLDOCUMENTEVENTS2_ONACTIVATE = 1044,DISPID_HTMLDOCUMENTEVENTS2_ONDEACTIVATE = 1045,DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREACTIVATE = 1047,DISPID_HTMLDOCUMENTEVENTS2_ONBEFOREDEACTIVATE = 1034,DISPID_HTMLDOCUMENTEVENTS_ONCLICK = -600,DISPID_HTMLDOCUMENTEVENTS_ONDBLCLICK = -601,DISPID_HTMLDOCUMENTEVENTS_ONKEYDOWN = -602,DISPID_HTMLDOCUMENTEVENTS_ONKEYUP = -604,DISPID_HTMLDOCUMENTEVENTS_ONKEYPRESS = -603,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEDOWN = -605,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEMOVE = -606,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEUP = -607,DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLDOCUMENTEVENTS_ONCONTEXTMENU = 1023,DISPID_HTMLDOCUMENTEVENTS_ONSTOP = 1026,DISPID_HTMLDOCUMENTEVENTS_ONBEFOREEDITFOCUS = 1027,DISPID_HTMLDOCUMENTEVENTS_ONSELECTIONCHANGE = 1037,DISPID_HTMLDOCUMENTEVENTS_ONCONTROLSELECT = 1036,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEWHEEL = 1033,DISPID_HTMLDOCUMENTEVENTS_ONFOCUSIN = 1048,DISPID_HTMLDOCUMENTEVENTS_ONFOCUSOUT = 1049,DISPID_HTMLDOCUMENTEVENTS_ONACTIVATE = 1044,DISPID_HTMLDOCUMENTEVENTS_ONDEACTIVATE = 1045,DISPID_HTMLDOCUMENTEVENTS_ONBEFOREACTIVATE = 1047,DISPID_HTMLDOCUMENTEVENTS_ONBEFOREDEACTIVATE = 1034,DISPID_IWEBBRIDGE_URL = 1,DISPID_IWEBBRIDGE_SCROLLBAR = 2,DISPID_IWEBBRIDGE_EMBED = 3,DISPID_IWEBBRIDGE_EVENT = 1152,DISPID_IWEBBRIDGE_READYSTATE = -525,DISPID_IWEBBRIDGE_ABOUTBOX = -552,DISPID_IWBSCRIPTCONTROL_RAISEEVENT = 1,DISPID_IWBSCRIPTCONTROL_BUBBLEEVENT = 2,DISPID_IWBSCRIPTCONTROL_SETCONTEXTMENU = 3,DISPID_IWBSCRIPTCONTROL_SELECTABLECONTENT = 4,DISPID_IWBSCRIPTCONTROL_FROZEN = 5,DISPID_IWBSCRIPTCONTROL_SCROLLBAR = 7,DISPID_IWBSCRIPTCONTROL_VERSION = 8,DISPID_IWBSCRIPTCONTROL_VISIBILITY = 9,DISPID_IWBSCRIPTCONTROL_ONVISIBILITYCHANGE = 10,DISPID_DWEBBRIDGEEVENTS_ONSCRIPTLETEVENT = 1,DISPID_DWEBBRIDGEEVENTS_ONREADYSTATECHANGE = -609,DISPID_DWEBBRIDGEEVENTS_ONCLICK = -600,DISPID_DWEBBRIDGEEVENTS_ONDBLCLICK = -601,DISPID_DWEBBRIDGEEVENTS_ONKEYDOWN = -602,DISPID_DWEBBRIDGEEVENTS_ONKEYUP = -604,DISPID_DWEBBRIDGEEVENTS_ONKEYPRESS = -603,DISPID_DWEBBRIDGEEVENTS_ONMOUSEDOWN = -605,DISPID_DWEBBRIDGEEVENTS_ONMOUSEMOVE = -606,DISPID_DWEBBRIDGEEVENTS_ONMOUSEUP = -607,DISPID_IHTMLAREASCOLLECTION_LENGTH = 1500,DISPID_IHTMLAREASCOLLECTION__NEWENUM = -4,DISPID_IHTMLAREASCOLLECTION_ITEM = 0,DISPID_IHTMLAREASCOLLECTION_TAGS = 1502,DISPID_IHTMLAREASCOLLECTION_ADD = 1503,DISPID_IHTMLAREASCOLLECTION_REMOVE = 1504,DISPID_IHTMLAREASCOLLECTION2_URNS = 1505,DISPID_IHTMLAREASCOLLECTION3_NAMEDITEM = 1506,DISPID_IHTMLMAPELEMENT_AREAS = 1002,DISPID_IHTMLAREAELEMENT_SHAPE = 1001,DISPID_IHTMLAREAELEMENT_COORDS = 1002,DISPID_IHTMLAREAELEMENT_HREF = 0,DISPID_IHTMLAREAELEMENT_TARGET = 1004,DISPID_IHTMLAREAELEMENT_ALT = 1005,DISPID_IHTMLAREAELEMENT_NOHREF = 1006,DISPID_IHTMLAREAELEMENT_HOST = 1007,DISPID_IHTMLAREAELEMENT_HOSTNAME = 1008,DISPID_IHTMLAREAELEMENT_PATHNAME = 1009,DISPID_IHTMLAREAELEMENT_PORT = 1010,DISPID_IHTMLAREAELEMENT_PROTOCOL = 1011,DISPID_IHTMLAREAELEMENT_SEARCH = 1012,DISPID_IHTMLAREAELEMENT_HASH = 1013,DISPID_IHTMLCOMMENTELEMENT_TEXT = 1001,DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 1002,DISPID_IHTMLCOMMENTELEMENT2_DATA = 1003,DISPID_IHTMLCOMMENTELEMENT2_LENGTH = 1004,DISPID_IHTMLCOMMENTELEMENT2_SUBSTRINGDATA = 1005,DISPID_IHTMLCOMMENTELEMENT2_APPENDDATA = 1006,DISPID_IHTMLCOMMENTELEMENT2_INSERTDATA = 1007,DISPID_IHTMLCOMMENTELEMENT2_DELETEDATA = 1008,DISPID_IHTMLCOMMENTELEMENT2_REPLACEDATA = 1009,DISPID_IHTMLPHRASEELEMENT2_CITE = 1001,DISPID_IHTMLPHRASEELEMENT2_DATETIME = 1002,DISPID_IHTMLTABLE_COLS = 1001,DISPID_IHTMLTABLE_BORDER = 1002,DISPID_IHTMLTABLE_FRAME = 1004,DISPID_IHTMLTABLE_RULES = 1003,DISPID_IHTMLTABLE_CELLSPACING = 1005,DISPID_IHTMLTABLE_CELLPADDING = 1006,DISPID_IHTMLTABLE_BGCOLOR = -501,DISPID_IHTMLTABLE_REFRESH = 1015,DISPID_IHTMLTABLE_ROWS = 1016,DISPID_IHTMLTABLE_DATAPAGESIZE = 1017,DISPID_IHTMLTABLE_NEXTPAGE = 1018,DISPID_IHTMLTABLE_PREVIOUSPAGE = 1019,DISPID_IHTMLTABLE_THEAD = 1020,DISPID_IHTMLTABLE_TFOOT = 1021,DISPID_IHTMLTABLE_TBODIES = 1024,DISPID_IHTMLTABLE_CAPTION = 1025,DISPID_IHTMLTABLE_CREATETHEAD = 1026,DISPID_IHTMLTABLE_DELETETHEAD = 1027,DISPID_IHTMLTABLE_CREATETFOOT = 1028,DISPID_IHTMLTABLE_DELETETFOOT = 1029,DISPID_IHTMLTABLE_CREATECAPTION = 1030,DISPID_IHTMLTABLE_DELETECAPTION = 1031,DISPID_IHTMLTABLE_INSERTROW = 1032,DISPID_IHTMLTABLE_DELETEROW = 1033,DISPID_IHTMLTABLE2_FIRSTPAGE = 1035,DISPID_IHTMLTABLE2_LASTPAGE = 1036,DISPID_IHTMLTABLE2_CELLS = 1037,DISPID_IHTMLTABLE2_MOVEROW = 1038,DISPID_IHTMLTABLE3_SUMMARY = 1039,DISPID_IHTMLTABLECOL_SPAN = 1001,DISPID_IHTMLTABLECOL2_CH = 1002,DISPID_IHTMLTABLECOL2_CHOFF = 1003,DISPID_IHTMLTABLESECTION_BGCOLOR = -501,DISPID_IHTMLTABLESECTION_ROWS = 1000,DISPID_IHTMLTABLESECTION_INSERTROW = 1001,DISPID_IHTMLTABLESECTION_DELETEROW = 1002,DISPID_IHTMLTABLESECTION2_MOVEROW = 1003,DISPID_IHTMLTABLESECTION3_CH = 1004,DISPID_IHTMLTABLESECTION3_CHOFF = 1005,DISPID_IHTMLTABLEROW_BGCOLOR = -501,DISPID_IHTMLTABLEROW_ROWINDEX = 1000,DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 1001,DISPID_IHTMLTABLEROW_CELLS = 1002,DISPID_IHTMLTABLEROW_INSERTCELL = 1003,DISPID_IHTMLTABLEROW_DELETECELL = 1004,DISPID_IHTMLTABLEROW3_CH = 1009,DISPID_IHTMLTABLEROW3_CHOFF = 1010,DISPID_IHTMLTABLECELL_ROWSPAN = 2001,DISPID_IHTMLTABLECELL_COLSPAN = 2002,DISPID_IHTMLTABLECELL_BGCOLOR = -501,DISPID_IHTMLTABLECELL_CELLINDEX = 2003,DISPID_IHTMLTABLECELL2_ABBR = 2004,DISPID_IHTMLTABLECELL2_AXIS = 2005,DISPID_IHTMLTABLECELL2_CH = 2006,DISPID_IHTMLTABLECELL2_CHOFF = 2007,DISPID_IHTMLTABLECELL2_HEADERS = 2008,DISPID_IHTMLTABLECELL2_SCOPE = 2009,DISPID_IHTMLSCRIPTELEMENT_SRC = 1001,DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 1004,DISPID_IHTMLSCRIPTELEMENT_EVENT = 1005,DISPID_IHTMLSCRIPTELEMENT_TEXT = 1006,DISPID_IHTMLSCRIPTELEMENT_DEFER = 1007,DISPID_IHTMLSCRIPTELEMENT_TYPE = 1009,DISPID_IHTMLSCRIPTELEMENT2_CHARSET = 1010,DISPID_HTMLSCRIPTEVENTS2_ONERROR = 1002,DISPID_HTMLSCRIPTEVENTS_ONERROR = 1002,DISPID_IHTMLOBJECTELEMENT3_ARCHIVE = -2147415097,DISPID_IHTMLOBJECTELEMENT3_ALT = -2147415096,DISPID_IHTMLOBJECTELEMENT3_DECLARE = -2147415095,DISPID_IHTMLOBJECTELEMENT3_STANDBY = -2147415094,DISPID_IHTMLOBJECTELEMENT3_BORDER = -2147415093,DISPID_IHTMLOBJECTELEMENT3_USEMAP = -2147415092,DISPID_IHTMLPARAMELEMENT_NAME = 1001,DISPID_IHTMLPARAMELEMENT_VALUE = 1002,DISPID_IHTMLPARAMELEMENT_TYPE = 1003,DISPID_IHTMLPARAMELEMENT_VALUETYPE = 1004,DISPID_IHTMLFRAMEBASE2_CONTENTWINDOW = -2147415103,DISPID_IHTMLFRAMEBASE2_ONLOAD = -2147412080,DISPID_IHTMLFRAMEBASE2_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLFRAMEBASE2_READYSTATE = -2147412996,DISPID_IHTMLFRAMEBASE2_ALLOWTRANSPARENCY = -2147412906,DISPID_IHTMLFRAMEBASE3_LONGDESC = -2147415102,DISPID_HTMLFRAMESITEEVENTS2_ONLOAD = 1003,DISPID_HTMLFRAMESITEEVENTS_ONLOAD = 1003,DISPID_IHTMLFRAMEELEMENT2_HEIGHT = -2147418106,DISPID_IHTMLFRAMEELEMENT2_WIDTH = -2147418107,DISPID_IHTMLFIELDSETELEMENT2_FORM = -2147416108,DISPID_IHTMLLEGENDELEMENT2_FORM = -2147416108,DISPID_IHTMLFRAMESETELEMENT_ROWS = 1000,DISPID_IHTMLFRAMESETELEMENT_COLS = 1001,DISPID_IHTMLFRAMESETELEMENT_BORDER = 1002,DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 1003,DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 1004,DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 1005,DISPID_IHTMLBGSOUND_SRC = 1001,DISPID_IHTMLBGSOUND_LOOP = 1002,DISPID_IHTMLBGSOUND_VOLUME = 1003,DISPID_IHTMLBGSOUND_BALANCE = 1004,DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 1501,DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = -4,DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0,DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 1502,DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = -4,DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 1503,DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0,DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 1503,DISPID_IHTMLOPTIONSHOLDER_FONTS = 1504,DISPID_IHTMLOPTIONSHOLDER_EXECARG = 1505,DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 1506,DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 1507,DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 1508,DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 1509,DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 1510,DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 1511,DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 1512,DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 1513,DISPID_IHTMLOPTIONSHOLDER_SIZES = 1514,DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 1515,DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 1516,DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 1517,DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 1518,DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 1519,DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 1520,DISPID_IHTMLOPTIONSHOLDER_SECURECONNECTIONINFO = 1521,DISPID_IHTMLSTYLEELEMENT_TYPE = 1002,DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 1004,DISPID_IHTMLSTYLEELEMENT_MEDIA = 1006,DISPID_HTMLSTYLEELEMENTEVENTS2_ONLOAD = 1003,DISPID_HTMLSTYLEELEMENTEVENTS2_ONERROR = 1002,DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 1003,DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 1002,DISPID_ILINEINFO_X = 1001,DISPID_ILINEINFO_BASELINE = 1002,DISPID_ILINEINFO_TEXTDESCENT = 1003,DISPID_ILINEINFO_TEXTHEIGHT = 1004,DISPID_ILINEINFO_LINEDIRECTION = 1005,DISPID_IHTMLCOMPUTEDSTYLE_BOLD = 1001,DISPID_IHTMLCOMPUTEDSTYLE_ITALIC = 1002,DISPID_IHTMLCOMPUTEDSTYLE_UNDERLINE = 1003,DISPID_IHTMLCOMPUTEDSTYLE_OVERLINE = 1004,DISPID_IHTMLCOMPUTEDSTYLE_STRIKEOUT = 1005,DISPID_IHTMLCOMPUTEDSTYLE_SUBSCRIPT = 1006,DISPID_IHTMLCOMPUTEDSTYLE_SUPERSCRIPT = 1007,DISPID_IHTMLCOMPUTEDSTYLE_EXPLICITFACE = 1008,DISPID_IHTMLCOMPUTEDSTYLE_FONTWEIGHT = 1009,DISPID_IHTMLCOMPUTEDSTYLE_FONTSIZE = 1010,DISPID_IHTMLCOMPUTEDSTYLE_FONTNAME = 1011,DISPID_IHTMLCOMPUTEDSTYLE_HASBGCOLOR = 1012,DISPID_IHTMLCOMPUTEDSTYLE_TEXTCOLOR = 1013,DISPID_IHTMLCOMPUTEDSTYLE_BACKGROUNDCOLOR = 1014,DISPID_IHTMLCOMPUTEDSTYLE_PREFORMATTED = 1015,DISPID_IHTMLCOMPUTEDSTYLE_DIRECTION = 1016,DISPID_IHTMLCOMPUTEDSTYLE_BLOCKDIRECTION = 1017,DISPID_IHTMLCOMPUTEDSTYLE_OL = 1018,DISPID_IHTMLDLGSAFEHELPER_CHOOSECOLORDLG = 1,DISPID_IHTMLDLGSAFEHELPER_GETCHARSET = 2,DISPID_IHTMLDLGSAFEHELPER_FONTS = 3,DISPID_IHTMLDLGSAFEHELPER_BLOCKFORMATS = 4,DISPID_IBLOCKFORMATS__NEWENUM = -4,DISPID_IBLOCKFORMATS_COUNT = 1,DISPID_IBLOCKFORMATS_ITEM = 0,DISPID_IFONTNAMES__NEWENUM = -4,DISPID_IFONTNAMES_COUNT = 1,DISPID_IFONTNAMES_ITEM = 0,DISPID_IHTMLNAMESPACE_NAME = 1000,DISPID_IHTMLNAMESPACE_URN = 1001,DISPID_IHTMLNAMESPACE_TAGNAMES = 1002,DISPID_IHTMLNAMESPACE_READYSTATE = -2147412996,DISPID_IHTMLNAMESPACE_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLNAMESPACE_DOIMPORT = 1003,DISPID_IHTMLNAMESPACE_ATTACHEVENT = -2147417605,DISPID_IHTMLNAMESPACE_DETACHEVENT = -2147417604,DISPID_IHTMLNAMESPACECOLLECTION_LENGTH = 1000,DISPID_IHTMLNAMESPACECOLLECTION_ITEM = 0,DISPID_IHTMLNAMESPACECOLLECTION_ADD = 1001,DISPID_HTMLNAMESPACEEVENTS_ONREADYSTATECHANGE = -609,DISPID_IHTMLIPRINTCOLLECTION_LENGTH = 1501,DISPID_IHTMLIPRINTCOLLECTION__NEWENUM = -4,DISPID_IHTMLIPRINTCOLLECTION_ITEM = 0,DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 25000,DISPID_IHTMLDIALOG_MENUARGUMENTS = 25013,DISPID_IHTMLDIALOG_RETURNVALUE = 25001,DISPID_IHTMLDIALOG_CLOSE = 25011,DISPID_IHTMLDIALOG_TOSTRING = 25012,DISPID_IHTMLDIALOG2_STATUS = 25014,DISPID_IHTMLDIALOG2_RESIZABLE = 25015,DISPID_IHTMLDIALOG3_UNADORNED = 25016,DISPID_IHTMLDIALOG3_DIALOGHIDE = 25007,DISPID_IHTMLMODELESSINIT_PARAMETERS = 25000,DISPID_IHTMLMODELESSINIT_OPTIONSTRING = 25001,DISPID_IHTMLMODELESSINIT_MONIKER = 25006,DISPID_IHTMLMODELESSINIT_DOCUMENT = 25007,DISPID_IHTMLPOPUP_SHOW = 27001,DISPID_IHTMLPOPUP_HIDE = 27002,DISPID_IHTMLPOPUP_DOCUMENT = 27003,DISPID_IHTMLPOPUP_ISOPEN = 27004,DISPID_IHTMLAPPBEHAVIOR_APPLICATIONNAME = 5000,DISPID_IHTMLAPPBEHAVIOR_VERSION = 5001,DISPID_IHTMLAPPBEHAVIOR_ICON = 5002,DISPID_IHTMLAPPBEHAVIOR_SINGLEINSTANCE = 5003,DISPID_IHTMLAPPBEHAVIOR_MINIMIZEBUTTON = 5005,DISPID_IHTMLAPPBEHAVIOR_MAXIMIZEBUTTON = 5006,DISPID_IHTMLAPPBEHAVIOR_BORDER = 5007,DISPID_IHTMLAPPBEHAVIOR_BORDERSTYLE = 5008,DISPID_IHTMLAPPBEHAVIOR_SYSMENU = 5009,DISPID_IHTMLAPPBEHAVIOR_CAPTION = 5010,DISPID_IHTMLAPPBEHAVIOR_WINDOWSTATE = 5011,DISPID_IHTMLAPPBEHAVIOR_SHOWINTASKBAR = 5012,DISPID_IHTMLAPPBEHAVIOR_COMMANDLINE = 5013,DISPID_IHTMLAPPBEHAVIOR2_CONTEXTMENU = 5014,DISPID_IHTMLAPPBEHAVIOR2_INNERBORDER = 5015,DISPID_IHTMLAPPBEHAVIOR2_SCROLL = 5016,DISPID_IHTMLAPPBEHAVIOR2_SCROLLFLAT = 5017,DISPID_IHTMLAPPBEHAVIOR2_SELECTION = 5018,DISPID_IHTMLAPPBEHAVIOR3_NAVIGABLE = 5019,};
enum MACRO_DLGWINDOWEXTRA {DLGWINDOWEXTRA = 32,};
enum MACRO_DM_ORIENTATION {DM_ORIENTATION = 0x1,DM_PAPERSIZE = 0x2,DM_PAPERLENGTH = 0x4,DM_PAPERWIDTH = 0x8,DM_SCALE = 0x10,DM_COPIES = 0x100,DM_DEFAULTSOURCE = 0x200,DM_PRINTQUALITY = 0x400,DM_COLOR = 0x800,DM_DUPLEX = 0x1000,DM_YRESOLUTION = 0x2000,DM_TTOPTION = 0x4000,DM_COLLATE = 0x8000,DM_FORMNAME = 0x10000,DM_LOGPIXELS = 0x20000,DM_BITSPERPEL = 0x40000,DM_PELSWIDTH = 0x80000,DM_PELSHEIGHT = 0x100000,DM_DISPLAYFLAGS = 0x200000,DM_DISPLAYFREQUENCY = 0x400000,DM_DISPLAYORIENTATION = 0x800000,DM_DISPLAYQUERYORIENTATION = 0x1000000,};
enum MACRO_DM_RESERVED0x2 {DM_RESERVED0x2 = 1026,};
enum MACRO_DM_RESETSCROLL {DM_RESETSCROLL = 1026,};
enum MACRO_DM_SYNCHRONOUS {DM_SYNCHRONOUS = 0x10,DM_ONLY_IF_NOT_PENDING = 0x1000,};
enum MACRO_ERROR_INTERNET {ERROR_INTERNET_OUT_OF_HANDLES = 12001,ERROR_INTERNET_TIMEOUT = 12002,ERROR_INTERNET_EXTENDED_ERROR = 12003,ERROR_INTERNET_INTERNAL_ERROR = 12004,ERROR_INTERNET_INVALID_URL = 12005,ERROR_INTERNET_UNRECOGNIZED_SCHEME = 12006,ERROR_INTERNET_NAME_NOT_RESOLVED = 12007,ERROR_INTERNET_PROTOCOL_NOT_FOUND = 12008,ERROR_INTERNET_INVALID_OPTION = 12009,ERROR_INTERNET_BAD_OPTION_LENGTH = 12010,ERROR_INTERNET_OPTION_NOT_SETTABLE = 12011,ERROR_INTERNET_SHUTDOWN = 12012,ERROR_INTERNET_INCORRECT_USER_NAME = 12013,ERROR_INTERNET_INCORRECT_PASSWORD = 12014,ERROR_INTERNET_LOGIN_FAILURE = 12015,ERROR_INTERNET_INVALID_OPERATION = 12016,ERROR_INTERNET_OPERATION_CANCELLED = 12017,ERROR_INTERNET_INCORRECT_HANDLE_TYPE = 12018,ERROR_INTERNET_INCORRECT_HANDLE_STATE = 12019,ERROR_INTERNET_NOT_PROXY_REQUEST = 12020,ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND = 12021,ERROR_INTERNET_BAD_REGISTRY_PARAMETER = 12022,ERROR_INTERNET_NO_DIRECT_ACCESS = 12023,ERROR_INTERNET_NO_CONTEXT = 12024,ERROR_INTERNET_NO_CALLBACK = 12025,ERROR_INTERNET_REQUEST_PENDING = 12026,ERROR_INTERNET_INCORRECT_FORMAT = 12027,ERROR_INTERNET_ITEM_NOT_FOUND = 12028,ERROR_INTERNET_CANNOT_CONNECT = 12029,ERROR_INTERNET_CONNECTION_ABORTED = 12030,ERROR_INTERNET_CONNECTION_RESET = 12031,ERROR_INTERNET_FORCE_RETRY = 12032,ERROR_INTERNET_INVALID_PROXY_REQUEST = 12033,ERROR_INTERNET_NEED_UI = 12034,ERROR_INTERNET_HANDLE_EXISTS = 12036,ERROR_INTERNET_SEC_CERT_DATE_INVALID = 12037,ERROR_INTERNET_SEC_CERT_CN_INVALID = 12038,ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR = 12039,ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR = 12040,ERROR_INTERNET_MIXED_SECURITY = 12041,ERROR_INTERNET_CHG_POST_IS_NON_SECURE = 12042,ERROR_INTERNET_POST_IS_NON_SECURE = 12043,ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED = 12044,ERROR_INTERNET_INVALID_CA = 12045,ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP = 12046,ERROR_INTERNET_ASYNC_THREAD_FAILED = 12047,ERROR_INTERNET_REDIRECT_SCHEME_CHANGE = 12048,ERROR_INTERNET_DIALOG_PENDING = 12049,ERROR_INTERNET_RETRY_DIALOG = 12050,ERROR_INTERNET_NO_NEW_CONTAINERS = 12051,ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR = 12052,ERROR_INTERNET_SECURITY_CHANNEL_ERROR = 12157,ERROR_INTERNET_UNABLE_TO_CACHE_FILE = 12158,ERROR_INTERNET_TCPIP_NOT_INSTALLED = 12159,ERROR_INTERNET_DISCONNECTED = 12163,ERROR_INTERNET_SERVER_UNREACHABLE = 12164,ERROR_INTERNET_PROXY_SERVER_UNREACHABLE = 12165,ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT = 12166,ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT = 12167,ERROR_INTERNET_SEC_INVALID_CERT = 12169,ERROR_INTERNET_SEC_CERT_REVOKED = 12170,ERROR_INTERNET_FAILED_DUETOSECURITYCHECK = 12171,ERROR_FTP_TRANSFER_IN_PROGRESS = 12110,ERROR_FTP_DROPPED = 12111,ERROR_FTP_NO_PASSIVE_MODE = 12112,ERROR_GOPHER_PROTOCOL_ERROR = 12130,ERROR_GOPHER_NOT_FILE = 12131,ERROR_GOPHER_DATA_ERROR = 12132,ERROR_GOPHER_END_OF_DATA = 12133,ERROR_GOPHER_INVALID_LOCATOR = 12134,ERROR_GOPHER_INCORRECT_LOCATOR_TYPE = 12135,ERROR_GOPHER_NOT_GOPHER_PLUS = 12136,ERROR_GOPHER_ATTRIBUTE_NOT_FOUND = 12137,ERROR_GOPHER_UNKNOWN_LOCATOR = 12138,ERROR_HTTP_HEADER_NOT_FOUND = 12150,ERROR_HTTP_DOWNLEVEL_SERVER = 12151,ERROR_HTTP_INVALID_SERVER_RESPONSE = 12152,ERROR_HTTP_INVALID_HEADER = 12153,ERROR_HTTP_INVALID_QUERY_REQUEST = 12154,ERROR_HTTP_HEADER_ALREADY_EXISTS = 12155,ERROR_HTTP_REDIRECT_FAILED = 12156,ERROR_HTTP_NOT_REDIRECTED = 12160,ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION = 12161,ERROR_HTTP_COOKIE_DECLINED = 12162,ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION = 12168,};
enum MACRO_E_InvalidValue {E_InvalidValue = 0x800CCD08,};
enum MACRO_FILE_ATTRIBUTE {FILE_ATTRIBUTE_REPARSE_POINT = 0x400,};
enum MACRO_FOLDERNAMESIZE {FOLDERNAMESIZE = 32,VOLUMENAMESIZE = 64,};
enum MACRO_FORMATDLGORD30 {FORMATDLGORD30 = 1544,};
enum MACRO_FORMATDLGORD31 {FORMATDLGORD31 = 1543,};
enum MACRO_FORMATNAMESIZE {FORMATNAMESIZE = 32,};
enum MACRO_GCL_CONVERSION {GCL_CONVERSION = 0x1,GCL_REVERSECONVERSION = 0x2,GCL_REVERSE_LENGTH = 0x3,};
enum MACRO_IDM_NEWMENUMAX {IDM_NEWMENUMAX = 3000,};
enum MACRO_IMAGE_RESOURCE {IMAGE_RESOURCE_NAME_IS_STRING = 0x80000000,IMAGE_RESOURCE_DATA_IS_DIRECTORY = 0x80000000,IMAGE_DEBUG_TYPE_UNKNOWN = 0x0,IMAGE_DEBUG_TYPE_COFF = 0x1,IMAGE_DEBUG_TYPE_CODEVIEW = 0x2,IMAGE_DEBUG_TYPE_FPO = 0x3,IMAGE_DEBUG_TYPE_MISC = 0x4,IMAGE_DEBUG_TYPE_EXCEPTION = 0x5,IMAGE_DEBUG_TYPE_FIXUP = 0x6,IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 0x7,IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 0x8,IMAGE_DEBUG_TYPE_BORLAND = 0x9,IMAGE_DEBUG_TYPE_RESERVED10 = 0xA,};
enum MACRO_IMR_ISIMEAWARE {IMR_ISIMEAWARE = 0x1000,};
enum MACRO_INSTALLOPTIONS {INSTALLOPTIONS_NOCACHE = 0x1,INSTALLOPTIONS_DOWNLOAD = 0x2,INSTALLOPTIONS_INSTALL = 0x4,INSTALLOPTIONS_DONTALLOWXPLATFORM = 0x8,INSTALLOPTIONS_FORCEDEPENDENCIES = 0x10,};
enum MACRO_INTERNET_CACHE {INTERNET_CACHE_GROUP_ADD = 0,INTERNET_CACHE_GROUP_REMOVE = 1,INTERNET_DIAL_FORCE_PROMPT = 8192,INTERNET_DIAL_SHOW_OFFLINE = 16384,INTERNET_DIAL_UNATTENDED = 32768,};
enum MACRO_INTERNET_ERROR {INTERNET_ERROR_MASK_INSERT_CDROM = 0x1,INTERNET_ERROR_MASK_COMBINED_SEC_CERT = 0x2,INTERNET_ERROR_MASK_NEED_MSN_SSPI_PKG = 0x4,INTERNET_ERROR_MASK_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = 0x8,};
enum MACRO_INTERNET_STATE {INTERNET_STATE_ONLINE = 1,INTERNET_STATE_OFFLINE = 2,INTERNET_STATE_OFFLINE_USER = 16,INTERNET_LINE_STATE_MASK = 3,INTERNET_BUSY_STATE_MASK = 768,INTERNET_STATUS_FILTER_RESOLVING = 1,INTERNET_STATUS_FILTER_RESOLVED = 2,INTERNET_STATUS_FILTER_CONNECTING = 4,INTERNET_STATUS_FILTER_CONNECTED = 8,INTERNET_STATUS_FILTER_SENDING = 16,INTERNET_STATUS_FILTER_SENT = 32,INTERNET_STATUS_FILTER_RECEIVING = 64,INTERNET_STATUS_FILTER_RECEIVED = 128,INTERNET_STATUS_FILTER_CLOSING = 256,INTERNET_STATUS_FILTER_CLOSED = 512,INTERNET_STATUS_FILTER_HANDLE_CREATED = 1024,INTERNET_STATUS_FILTER_HANDLE_CLOSING = 2048,INTERNET_STATUS_FILTER_PREFETCH = 4096,INTERNET_STATUS_FILTER_REDIRECT = 8192,INTERNET_STATUS_FILTER_STATE_CHANGE = 16384,};
enum MACRO_INVALID_SOCKET {INVALID_SOCKET = 4294967295,};
enum MACRO_LGRPID_WESTERN {LGRPID_WESTERN_EUROPE = 0x1,LGRPID_CENTRAL_EUROPE = 0x2,LGRPID_BALTIC = 0x3,LGRPID_GREEK = 0x4,LGRPID_CYRILLIC = 0x5,LGRPID_TURKISH = 0x6,LGRPID_JAPANESE = 0x7,LGRPID_KOREAN = 0x8,LGRPID_TRADITIONAL_CHINESE = 0x9,LGRPID_SIMPLIFIED_CHINESE = 0xA,LGRPID_THAI = 0xB,LGRPID_HEBREW = 0xC,LGRPID_ARABIC = 0xD,LGRPID_VIETNAMESE = 0xE,LGRPID_INDIC = 0xF,LGRPID_GEORGIAN = 0x10,LGRPID_ARMENIAN = 0x11,};
enum MACRO_LINEAGENTSTATE {LINEAGENTSTATE_LOGGEDOFF = 0x1,LINEAGENTSTATE_NOTREADY = 0x2,LINEAGENTSTATE_READY = 0x4,LINEAGENTSTATE_BUSYACD = 0x8,LINEAGENTSTATE_BUSYINCOMING = 0x10,LINEAGENTSTATE_BUSYOUTBOUND = 0x20,LINEAGENTSTATE_BUSYOTHER = 0x40,LINEAGENTSTATE_WORKINGAFTERCALL = 0x80,LINEAGENTSTATE_UNKNOWN = 0x100,LINEAGENTSTATE_UNAVAIL = 0x200,};
enum MACRO_LINEANSWERMODE {LINEANSWERMODE_NONE = 0x1,LINEANSWERMODE_DROP = 0x2,LINEANSWERMODE_HOLD = 0x4,};
enum MACRO_LINEBEARERMODE {LINEBEARERMODE_VOICE = 0x1,LINEBEARERMODE_SPEECH = 0x2,LINEBEARERMODE_MULTIUSE = 0x4,LINEBEARERMODE_DATA = 0x8,LINEBEARERMODE_ALTSPEECHDATA = 0x10,LINEBEARERMODE_NONCALLSIGNALING = 0x20,LINEBEARERMODE_PASSTHROUGH = 0x40,LINEBEARERMODE_RESTRICTEDDATA = 0x80,};
enum MACRO_LINECALLORIGIN {LINECALLORIGIN_OUTBOUND = 0x1,LINECALLORIGIN_INTERNAL = 0x2,LINECALLORIGIN_EXTERNAL = 0x4,LINECALLORIGIN_UNKNOWN = 0x10,LINECALLORIGIN_UNAVAIL = 0x20,LINECALLORIGIN_CONFERENCE = 0x40,LINECALLORIGIN_INBOUND = 0x80,};
enum MACRO_LINECALLREASON {LINECALLREASON_DIRECT = 0x1,LINECALLREASON_FWDBUSY = 0x2,LINECALLREASON_FWDNOANSWER = 0x4,LINECALLREASON_FWDUNCOND = 0x8,LINECALLREASON_PICKUP = 0x10,LINECALLREASON_UNPARK = 0x20,LINECALLREASON_REDIRECT = 0x40,LINECALLREASON_CALLCOMPLETION = 0x80,LINECALLREASON_TRANSFER = 0x100,LINECALLREASON_REMINDER = 0x200,LINECALLREASON_UNKNOWN = 0x400,LINECALLREASON_UNAVAIL = 0x800,LINECALLREASON_INTRUDE = 0x1000,LINECALLREASON_PARKED = 0x2000,LINECALLREASON_CAMPEDON = 0x4000,LINECALLREASON_ROUTEREQUEST = 0x8000,};
enum MACRO_LINECALLSELECT {LINECALLSELECT_LINE = 0x1,LINECALLSELECT_ADDRESS = 0x2,LINECALLSELECT_CALL = 0x4,LINECALLSELECT_DEVICEID = 0x8,LINECALLSELECT_CALLID = 0x10,};
enum MACRO_LINECARDOPTION {LINECARDOPTION_PREDEFINED = 0x1,LINECARDOPTION_HIDDEN = 0x2,};
enum MACRO_LINEGATHERTERM {LINEGATHERTERM_BUFFERFULL = 0x1,LINEGATHERTERM_TERMDIGIT = 0x2,LINEGATHERTERM_FIRSTTIMEOUT = 0x4,LINEGATHERTERM_INTERTIMEOUT = 0x8,LINEGATHERTERM_CANCEL = 0x10,};
enum MACRO_LINEOPENOPTION {LINEOPENOPTION_SINGLEADDRESS = 0x80000000,LINEOPENOPTION_PROXY = 0x40000000,};
enum MACRO_LMEM_DISCARDED {LMEM_DISCARDED = 0x4000,LMEM_LOCKCOUNT = 0xFF,};
enum MACRO_LmCharSetASCII {LmCharSetASCII = 0,};
enum MACRO_MAX_DDDEVICEID {MAX_DDDEVICEID_STRING = 512,};
enum MACRO_MAX_SIZE_MPEG1 {MAX_SIZE_MPEG1_SEQUENCE_INFO = 140,};
enum MACRO_MB_PRECOMPOSED {MB_PRECOMPOSED = 0x1,MB_COMPOSITE = 0x2,MB_USEGLYPHCHARS = 0x4,MB_ERR_INVALID_CHARS = 0x8,};
enum MACRO_MCAST_BOUNDARY {MCAST_BOUNDARY = 26,MCAST_SCOPE = 27,};
enum MACRO_MOM_POSITIONCB {MOM_POSITIONCB = 970,};
enum MACRO_NETWORKINSTALL {NETWORKINSTALL = 4,};
enum MACRO_NEWFILEOPENORD {NEWFILEOPENORD = 1547,};
enum MACRO_NONANTIALIASED {NONANTIALIASED_QUALITY = 3,ANTIALIASED_QUALITY = 4,CLEARTYPE_QUALITY = 5,CLEARTYPE_COMPAT_QUALITY = 6,};
enum MACRO_NOTIFY_NEWMAIL {NOTIFY_NEWMAIL = 0x1,NOTIFY_READYTOSEND = 0x2,NOTIFY_SENTDEFERRED = 0x4,NOTIFY_CRITSEC = 0x1000,NOTIFY_NONCRIT = 0x2000,NOTIFY_CONFIG_CHANGE = 0x4000,NOTIFY_CRITICAL_ERROR = 0x10000000,NOTIFY_NEWMAIL_RECEIVED = 0x20000000,};
enum MACRO_NO_INHERITANCE {NO_INHERITANCE = 0x0,};
enum MACRO_OID_DOT11_ATIM {OID_DOT11_ATIM_WINDOW = 218170122,OID_DOT11_SCAN_REQUEST = 218170123,};
enum MACRO_OID_DOT11_TEMP {OID_DOT11_TEMP_TYPE = 218170152,OID_DOT11_CURRENT_TX_ANTENNA = 218170153,OID_DOT11_DIVERSITY_SUPPORT = 218170154,OID_DOT11_CURRENT_RX_ANTENNA = 218170155,OID_DOT11_SUPPORTED_POWER_LEVELS = 218170156,OID_DOT11_CURRENT_TX_POWER_LEVEL = 218170157,OID_DOT11_HOP_TIME = 218170158,OID_DOT11_CURRENT_CHANNEL_NUMBER = 218170159,OID_DOT11_MAX_DWELL_TIME = 218170160,OID_DOT11_CURRENT_DWELL_TIME = 218170161,OID_DOT11_CURRENT_SET = 218170162,OID_DOT11_CURRENT_PATTERN = 218170163,OID_DOT11_CURRENT_INDEX = 218170164,OID_DOT11_CURRENT_CHANNEL = 218170165,OID_DOT11_CCA_MODE_SUPPORTED = 218170166,};
enum MACRO_PHONEPRIVILEGE {PHONEPRIVILEGE_MONITOR = 0x1,PHONEPRIVILEGE_OWNER = 0x2,};
enum MACRO_PHYSICALHEIGHT {PHYSICALHEIGHT = 111,};
enum MACRO_PKCS_ATTRIBUTE {PKCS_ATTRIBUTE = 22,PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 23,};
enum MACRO_PRIVATEKEYBLOB {PRIVATEKEYBLOB = 0x7,PLAINTEXTKEYBLOB = 0x8,};
enum MACRO_PRNSETUPDLGORD {PRNSETUPDLGORD = 1539,};
enum MACRO_SCRIPTTHREADID {SCRIPTTHREADID_CURRENT = 4294967295,SCRIPTTHREADID_BASE = 4294967294,SCRIPTTHREADID_ALL = 4294967293,};
enum MACRO_SDP_ATTRIB_HID {SDP_ATTRIB_HID_DEVICE_RELEASE_NUMBER = 0x200,SDP_ATTRIB_HID_PARSER_VERSION = 0x201,SDP_ATTRIB_HID_DEVICE_SUBCLASS = 0x202,SDP_ATTRIB_HID_COUNTRY_CODE = 0x203,SDP_ATTRIB_HID_VIRTUAL_CABLE = 0x204,SDP_ATTRIB_HID_RECONNECT_INITIATE = 0x205,SDP_ATTRIB_HID_DESCRIPTOR_LIST = 0x206,SDP_ATTRIB_HID_LANGID_BASE_LIST = 0x207,SDP_ATTRIB_HID_SDP_DISABLE = 0x208,SDP_ATTRIB_HID_BATTERY_POWER = 0x209,SDP_ATTRIB_HID_REMOTE_WAKE = 0x20A,SDP_ATTRIB_HID_PROFILE_VERSION = 0x20B,SDP_ATTRIB_HID_SUPERVISION_TIMEOUT = 0x20C,SDP_ATTRIB_HID_NORMALLY_CONNECTABLE = 0x20D,SDP_ATTRIB_HID_BOOT_DEVICE = 0x20E,};
enum MACRO_SEARCH_RUNNING {SEARCH_RUNNING = 0x1,SEARCH_REBUILD = 0x2,SEARCH_RECURSIVE = 0x4,SEARCH_FOREGROUND = 0x8,};
enum MACRO_SECPKG_OPTIONS {SECPKG_OPTIONS_TYPE_UNKNOWN = 0,SECPKG_OPTIONS_TYPE_LSA = 1,SECPKG_OPTIONS_TYPE_SSPI = 2,SECPKG_OPTIONS_PERMANENT = 1,};
enum MACRO_SEC_WINNT_AUTH {SEC_WINNT_AUTH_IDENTITY_VERSION = 0x200,};
enum MACRO_SO_CONDITIONAL {SO_CONDITIONAL_ACCEPT = 0x3002,};
enum MACRO_STORAGE_DEVICE {STORAGE_DEVICE_CLASS_BLOCK = 0x1,STORAGE_DEVICE_CLASS_MULTIMEDIA = 0x2,STORAGE_DEVICE_TYPE_PCIIDE = 0x1,STORAGE_DEVICE_TYPE_FLASH = 0x2,STORAGE_DEVICE_TYPE_ATA = 0x4,STORAGE_DEVICE_TYPE_ATAPI = 0x10,STORAGE_DEVICE_TYPE_PCCARD = 0x20,STORAGE_DEVICE_TYPE_CFCARD = 0x40,STORAGE_DEVICE_TYPE_SRAM = 0x80,STORAGE_DEVICE_TYPE_DVD = 0x100,STORAGE_DEVICE_TYPE_CDROM = 0x200,STORAGE_DEVICE_TYPE_USB = 0x400,STORAGE_DEVICE_TYPE_1394 = 0x800,STORAGE_DEVICE_TYPE_DOC = 0x1000,STORAGE_DEVICE_TYPE_UNKNOWN = 0x20000000,STORAGE_DEVICE_TYPE_REMOVABLE_DRIVE = 0x40000000,STORAGE_DEVICE_TYPE_REMOVABLE_MEDIA = 0x80000000,STORAGE_DEVICE_FLAG_READWRITE = 0x1,STORAGE_DEVICE_FLAG_READONLY = 0x2,STORAGE_DEVICE_FLAG_TRANSACTED = 0x4,STORAGE_DEVICE_FLAG_MEDIASENSE = 0x8,};
enum MACRO_S_ASYNCHRONOUS {S_ASYNCHRONOUS = 262632,};
enum MACRO_S_NoSaveNeeded {S_NoSaveNeeded = 0xCCDAA,S_PasswordDeleted = 0xCCDAB,S_PasswordNotFound = 0xCCDAC,};
enum MACRO_TVM_SELECTITEM {TVM_SELECTITEM = 4363,TVM_GETITEMA = 4364,TVM_GETITEMW = 4414,TVM_GETITEM = 4364,TVM_SETITEMA = 4365,TVM_SETITEMW = 4415,TVM_SETITEM = 4365,TVM_EDITLABELA = 4366,TVM_EDITLABELW = 4417,TVM_EDITLABEL = 4366,TVM_GETEDITCONTROL = 4367,TVM_GETVISIBLECOUNT = 4368,TVM_HITTEST = 4369,};
enum MACRO_URLACTION_JAVA {URLACTION_JAVA_CURR_MAX = 0x1C00,URLACTION_JAVA_MAX = 0x1CFF,URLACTION_INFODELIVERY_MIN = 0x1D00,URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 0x1D00,URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 0x1D01,URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 0x1D02,URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 0x1D03,URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 0x1D04,URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 0x1D05,URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x1D06,URLACTION_INFODELIVERY_CURR_MAX = 0x1D06,URLACTION_INFODELIVERY_MAX = 0x1DFF,URLACTION_CHANNEL_SOFTDIST_MIN = 0x1E00,URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 0x1E05,};
enum MACRO_URLPOLICY_JAVA {URLPOLICY_JAVA_PROHIBIT = 0x0,URLPOLICY_JAVA_HIGH = 0x10000,URLPOLICY_JAVA_MEDIUM = 0x20000,URLPOLICY_JAVA_LOW = 0x30000,URLPOLICY_JAVA_CUSTOM = 0x800000,};
enum MACRO_WSPDESCRIPTION {WSPDESCRIPTION_LEN = 255,};
enum MACRO_X509_CERT_PAIR {X509_CERT_PAIR = 53,X509_ISSUING_DIST_POINT = 54,X509_NAME_CONSTRAINTS = 55,X509_POLICY_MAPPINGS = 56,X509_POLICY_CONSTRAINTS = 57,X509_CROSS_CERT_DIST_POINTS = 58,};
enum MACRO__SW_UNEMULATED {_SW_UNEMULATED = 0x40,_SW_SQRTNEG = 0x80,_SW_STACKOVERFLOW = 0x200,_SW_STACKUNDERFLOW = 0x400,};
enum MACRO_ckidAVIMAINHDR {ckidAVIMAINHDR = 1751742049,};
enum MACRO_ckidAVIPADDING {ckidAVIPADDING = 1263424842,};
enum MACRO_ckidSTREAMLIST {ckidSTREAMLIST = 1819440243,};
enum MACRO_ckidSTREAMNAME {ckidSTREAMNAME = 1852994675,};
enum MACRO_fdexPropCanGet {fdexPropCanGet = 0x1,fdexPropCannotGet = 0x2,fdexPropCanPut = 0x4,fdexPropCannotPut = 0x8,fdexPropCanPutRef = 0x10,fdexPropCannotPutRef = 0x20,fdexPropNoSideEffects = 0x40,fdexPropDynamicType = 0x80,fdexPropCanCall = 0x100,fdexPropCannotCall = 0x200,fdexPropCanConstruct = 0x400,fdexPropCannotConstruct = 0x800,fdexPropCanSourceEvents = 0x1000,fdexPropCannotSourceEvents = 0x2000,};
enum MACRO_streamtypeMIDI {streamtypeMIDI = 1935960429,};
enum MACRO_streamtypeTEXT {streamtypeTEXT = 1937012852,};
typedef struct _MIB_IPMCAST_BOUNDARY MIB_IPMCAST_BOUNDARY;
typedef struct _MIB_IPMCAST_IF_ENTRY MIB_IPMCAST_IF_ENTRY;
typedef struct _MIB_IPMCAST_IF_TABLE MIB_IPMCAST_IF_TABLE;
typedef struct mpeglayer3waveformat_tag MPEGLAYER3WAVEFORMAT;
enum MPPlayStateConstants {mpStopped = 0x0,mpPaused = 0x1,mpPlaying = 0x2,mpWaiting = 0x3,mpScanForward = 0x4,mpScanReverse = 0x5,mpClosed = 0x6,};
typedef struct _NDIS_TAPI_CLOSE_CALL NDIS_TAPI_CLOSE_CALL;
typedef struct _NETWORK_ADDRESS_LIST NETWORK_ADDRESS_LIST;
typedef struct _NEWMAIL_NOTIFICATION NEWMAIL_NOTIFICATION;
typedef struct tagNMDATETIMEWMKEYDOWNA NMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW NMDATETIMEWMKEYDOWNW;
enum NSOpenStateConstants {nsClosed = 0x0,nsLoadingASX = 0x1,nsLoadingNSC = 0x2,nsLocating = 0x3,nsConnecting = 0x4,nsOpening = 0x5,nsOpen = 0x6,};
enum NSPlayStateConstants {nsStopped = 0x0,nsPaused = 0x1,nsPlaying = 0x2,nsWaiting = 0x3,};
typedef struct _OFFLOAD_IPSEC_ADD_SA OFFLOAD_IPSEC_ADD_SA;
typedef struct tACMDRVFORMATSUGGEST *PACMDRVFORMATSUGGEST;
typedef struct tACMFILTERTAGDETAILS *PACMFILTERTAGDETAILS;
typedef struct tACMFORMATTAGDETAILSW *PACMFORMATTAGDETAILS;
typedef struct _ACTRL_ACCESS_ENTRYA *PACTRL_ACCESS_ENTRYA;
typedef struct _ACTRL_ACCESS_ENTRYW *PACTRL_ACCESS_ENTRYW;
typedef struct _ACTRL_CONTROL_INFOA *PACTRL_CONTROL_INFOA;
typedef struct _ACTRL_CONTROL_INFOW *PACTRL_CONTROL_INFOW;
typedef struct _AM_COPY_MACROVISION *PAM_COPY_MACROVISION;
typedef struct AM_DVDCOPY_TITLEKEY *PAM_DVDCOPY_TITLEKEY;
typedef struct _BASEBAND_CONNECTION *PBASEBAND_CONNECTION;
typedef struct _CARD_REGISTER_PARMS *PCARD_REGISTER_PARMS;
typedef struct _CEL_OEMPROFILER_HIT *PCEL_OEMPROFILER_HIT;
typedef struct __CEL_THREAD_PRIORITY *PCEL_THREAD_PRIORITY;
typedef struct _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;
typedef struct _CERT_POLICY_MAPPING *PCERT_POLICY_MAPPING;
typedef struct _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;
typedef struct _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT *PCRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA *PCRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR *PCRYPT_PROVIDER_SGNR;
typedef struct _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;
typedef struct _EC3BB85EBBE9955145E6214979EA4930 *PDIALER_NOTIFICATION;
typedef struct _DOT11_GROUP_ADDRESS *PDOT11_GROUP_ADDRESS;
typedef struct _DOT11_RESET_REQUEST *PDOT11_RESET_REQUEST;
typedef struct _DOT11_START_REQUEST *PDOT11_START_REQUEST;
typedef struct _DOT11_WEP_KEY_ENTRY *PDOT11_WEP_KEY_ENTRY;
typedef void ( *PFN_SERVICE_SHUTDOWN)();
typedef struct _HTTP_FILTER_AUTHENT *PHTTP_FILTER_AUTHENT;
typedef struct _HTTP_FILTER_CONTEXT *PHTTP_FILTER_CONTEXT;
typedef struct _HTTP_FILTER_URL_MAP *PHTTP_FILTER_URL_MAP;
typedef struct _HTTP_FILTER_VERSION *PHTTP_FILTER_VERSION;
typedef struct _IP_PER_ADAPTER_INFO *PIP_PER_ADAPTER_INFO;
typedef struct _KDEVICE_QUEUE_ENTRY *PKDEVICE_QUEUE_ENTRY;
typedef struct _LINE_ADDRESS_STATUS *PLINE_ADDRESS_STATUS;
typedef struct _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;
typedef struct _MIB_IPFORWARDNUMBER *PMIB_IPFORWARDNUMBER;
typedef struct _B1AAA2E973C90C8AA1D1293855444268 *PMIB_MCAST_LIMIT_ROW;
typedef struct _MIB_MFE_STATS_TABLE *PMIB_MFE_STATS_TABLE;
typedef struct tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
typedef struct NDIS_BPC_DISCONNECT *PNDIS_BPC_DISCONNECT;
typedef struct NDIS_BPC_LAST_ERROR *PNDIS_BPC_LAST_ERROR;
typedef struct _NDIS_TAPI_MAKE_CALL *PNDIS_TAPI_MAKE_CALL;
typedef struct _NETWORK_ADDRESS_IPX *PNETWORK_ADDRESS_IPX;
typedef struct _PST_BINARYCHECKDATA *PPST_BINARYCHECKDATA;
typedef struct _REPARSE_DATA_BUFFER *PREPARSE_DATA_BUFFER;
typedef struct _SCATTER_GATHER_LIST *PSCATTER_GATHER_LIST;
typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
typedef struct _PST_AUTHENTICODEDATA PST_AUTHENTICODEDATA;
typedef struct _SecPkgContext_Flags *PSecPkgContext_Flags;
typedef struct _SecPkgContext_Sizes *PSecPkgContext_Sizes;
typedef struct _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;
typedef struct _USB_DRIVER_SETTINGS *PUSB_DRIVER_SETTINGS;
typedef struct _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D RPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
typedef void *RPC_SS_THREAD_HANDLE;
enum RTC_BUDDY_EVENT_TYPE {RTCBET_BUDDY_ADD = 0x0,RTCBET_BUDDY_REMOVE = 0x1,RTCBET_BUDDY_UPDATE = 0x2,RTCBET_BUDDY_STATE_CHANGE = 0x3,RTCBET_BUDDY_ROAMED = 0x4,RTCBET_BUDDY_SUBSCRIBED = 0x5,};
enum RTC_GROUP_EVENT_TYPE {RTCGET_GROUP_ADD = 0x0,RTCGET_GROUP_REMOVE = 0x1,RTCGET_GROUP_UPDATE = 0x2,RTCGET_GROUP_BUDDY_ADD = 0x3,RTCGET_GROUP_BUDDY_REMOVE = 0x4,RTCGET_GROUP_ROAMED = 0x5,};
enum RTC_MEDIA_EVENT_TYPE {RTCMET_STOPPED = 0x0,RTCMET_STARTED = 0x1,RTCMET_FAILED = 0x2,};
enum RTC_TERMINATE_REASON {RTCTR_NORMAL = 0x0,RTCTR_DND = 0x1,RTCTR_BUSY = 0x2,RTCTR_REJECT = 0x3,RTCTR_TIMEOUT = 0x4,RTCTR_SHUTDOWN = 0x5,RTCTR_INSUFFICIENT_SECURITY_LEVEL = 0x6,};
typedef struct _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
typedef struct _SCHANNEL_ALERT_TOKEN SCHANNEL_ALERT_TOKEN;
typedef struct _SCH_CRED_PUBLIC_CAPI SCH_CRED_PUBLIC_CAPI;
typedef struct _SCH_CRED_SECRET_CAPI SCH_CRED_SECRET_CAPI;
typedef struct _SEC_NEGOTIATION_INFO SEC_NEGOTIATION_INFO;
typedef struct _ShellAppCategoryList SHELLAPPCATEGORYLIST;
typedef struct _SPropertyRestriction SPropertyRestriction;
typedef struct tagSUBSCRIPTIONITEMINFO SUBSCRIPTIONITEMINFO;
enum SUBSCRIPTIONSCHEDULE {SUBSSCHED_AUTO = 0x0,SUBSSCHED_DAILY = 0x1,SUBSSCHED_WEEKLY = 0x2,SUBSSCHED_CUSTOM = 0x3,SUBSSCHED_MANUAL = 0x4,};
typedef struct _SecPkgContext_NamesA SecPkgContext_NamesA;
typedef struct _SecPkgContext_NamesW SecPkgContext_NamesW;
typedef struct _SecPkgCred_CacheInfo SecPkgCred_CacheInfo;
struct SoapConnectorFactory;
typedef struct truespeechwaveformat_tag TRUESPEECHWAVEFORMAT;
typedef struct _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
typedef struct _USB_POWER_DESCRIPTOR USB_POWER_DESCRIPTOR;
typedef struct _WCE_IRDA_DEVICE_INFO WCE_IRDA_DEVICE_INFO;
typedef struct _WSAServiceClassInfoA WSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW WSASERVICECLASSINFOW;
struct XMLDOMDocumentEvents {struct XMLDOMDocumentEventsVtbl *lpVtbl;};
enum _AM_DVD_STREAM_FLAGS {AM_DVD_STREAM_VIDEO = 0x1,AM_DVD_STREAM_AUDIO = 0x2,AM_DVD_STREAM_SUBPIC = 0x4,};
struct _AllocatorProperties {int cBuffers;int cbBuffer;int cbAlign;int cbPrefix;};
enum _D3DMULTISAMPLE_TYPE {D3DMULTISAMPLE_NONE = 0x0,D3DMULTISAMPLE_2_SAMPLES = 0x2,D3DMULTISAMPLE_3_SAMPLES = 0x3,D3DMULTISAMPLE_4_SAMPLES = 0x4,D3DMULTISAMPLE_5_SAMPLES = 0x5,D3DMULTISAMPLE_6_SAMPLES = 0x6,D3DMULTISAMPLE_7_SAMPLES = 0x7,D3DMULTISAMPLE_8_SAMPLES = 0x8,D3DMULTISAMPLE_9_SAMPLES = 0x9,D3DMULTISAMPLE_10_SAMPLES = 0xA,D3DMULTISAMPLE_11_SAMPLES = 0xB,D3DMULTISAMPLE_12_SAMPLES = 0xC,D3DMULTISAMPLE_13_SAMPLES = 0xD,D3DMULTISAMPLE_14_SAMPLES = 0xE,D3DMULTISAMPLE_15_SAMPLES = 0xF,D3DMULTISAMPLE_16_SAMPLES = 0x10,D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVERTEXBLENDFLAGS {D3DVBF_DISABLE = 0x0,D3DVBF_1WEIGHTS = 0x1,D3DVBF_2WEIGHTS = 0x2,D3DVBF_3WEIGHTS = 0x3,D3DVBF_TWEENING = 0xFF,D3DVBF_0WEIGHTS = 0x100,D3DVBF_FORCE_DWORD = 0x7FFFFFFF,};
enum _DOT11_KEY_DIRECTION {dot11_key_direction_both = 0x1,dot11_key_direction_inbound = 0x2,dot11_key_direction_outbound = 0x3,};
enum _EDITOR_NOTIFICATION {EDITOR_NOTIFY_TIMER_TICK = 0x0,EDITOR_NOTIFY_DOC_ENDED = 0x1,EDITOR_NOTIFY_DOC_CHANGED = 0x2,EDITOR_NOTIFY_CARET_IN_CONTEXT = 0x3,EDITOR_NOTIFY_EXIT_TREE = 0x4,EDITOR_NOTIFY_LOSE_FOCUS_FRAME = 0x5,EDITOR_NOTIFY_LOSE_FOCUS = 0x6,EDITOR_NOTIFY_BEFORE_FOCUS = 0x7,EDITOR_NOTIFY_YIELD_FOCUS = 0x8,EDITOR_NOTIFY_EDITABLE_CHANGE = 0x9,EDITOR_NOTIFY_BEGIN_SELECTION_UNDO = 0xA,EDITOR_NOTIFY_ATTACH_WIN = 0xB,EDITOR_NOTIFY_UPDATE_CARET = 0xC,EDITOR_NOTIFY_BEFORE_CURRENCY_CHANGE = 0xD,EDITOR_NOTIFY_SETTING_VIEW_LINK = 0xE,EDITOR_NOTIFY_CONTAINER_ENDED = 0xF,EDITOR_NOTIFICATION_Max = 0x7FFFFFFF,};
enum _MARKUP_CONTEXT_TYPE {CONTEXT_TYPE_None = 0x0,CONTEXT_TYPE_Text = 0x1,CONTEXT_TYPE_EnterScope = 0x2,CONTEXT_TYPE_ExitScope = 0x3,CONTEXT_TYPE_NoScope = 0x4,MARKUP_CONTEXT_TYPE_Max = 0x7FFFFFFF,};
enum _OFFLOAD_OPERATION_E {AUTHENTICATE = 0x1,ENCRYPT = 0x2,};
struct _RPC_PROTSEQ_VECTORA {unsigned int Count;unsigned char *Protseq[1];};
struct _RPC_PROTSEQ_VECTORW {unsigned int Count;unsigned short *Protseq[1];};
enum _SAVE_SEGMENTS_FLAGS {SAVE_SEGMENTS_NoIE4SelectionCompat = 0x1,SAVE_SEGMENTS_FLAGS_Max = 0x7FFFFFFF,};
struct _SecPkgContext_Flags {unsigned int Flags;};
struct _SecPkgContext_Sizes {unsigned int cbMaxToken;unsigned int cbMaxSignature;unsigned int cbBlockSize;unsigned int cbSecurityTrailer;};
enum _htmlMarqueeBehavior {htmlMarqueeBehaviorscroll = 0x1,htmlMarqueeBehaviorslide = 0x2,htmlMarqueeBehavioralternate = 0x3,htmlMarqueeBehavior_Max = 0x7FFFFFFF,};
enum _styleBorderCollapse {styleBorderCollapseNotSet = 0x0,styleBorderCollapseSeparate = 0x1,styleBorderCollapseCollapse = 0x2,styleBorderCollapse_Max = 0x7FFFFFFF,};
enum _styleLayoutGridChar {styleLayoutGridCharNotSet = 0x0,styleLayoutGridCharAuto = 0x1,styleLayoutGridCharNone = 0x2,styleLayoutGridChar_Max = 0x7FFFFFFF,};
enum _styleLayoutGridLine {styleLayoutGridLineNotSet = 0x0,styleLayoutGridLineAuto = 0x1,styleLayoutGridLineNone = 0x2,styleLayoutGridLine_Max = 0x7FFFFFFF,};
enum _styleLayoutGridMode {styleLayoutGridModeNotSet = 0x0,styleLayoutGridModeChar = 0x1,styleLayoutGridModeLine = 0x2,styleLayoutGridModeBoth = 0x3,styleLayoutGridModeNone = 0x4,styleLayoutGridMode_Max = 0x7FFFFFFF,};
enum _styleLayoutGridType {styleLayoutGridTypeNotSet = 0x0,styleLayoutGridTypeLoose = 0x1,styleLayoutGridTypeStrict = 0x2,styleLayoutGridTypeFixed = 0x3,styleLayoutGridType_Max = 0x7FFFFFFF,};
enum _styleTextDecoration {styleTextDecorationNone = 0x0,styleTextDecorationUnderline = 0x1,styleTextDecorationOverline = 0x2,styleTextDecorationLineThrough = 0x3,styleTextDecorationBlink = 0x4,styleTextDecoration_Max = 0x7FFFFFFF,};
enum _tagSYNCMGRITEMFLAGS {SYNCMGRITEM_HASPROPERTIES = 0x1,SYNCMGRITEM_TEMPORARY = 0x2,SYNCMGRITEM_ROAMINGUSER = 0x4,SYNCMGRITEM_LASTUPDATETIME = 0x8,SYNCMGRITEM_MAYDELETEITEM = 0x10,};
enum tagAMTunerSubChannel {AMTUNER_SUBCHAN_NO_TUNE = 0xFFFFFFFE,AMTUNER_SUBCHAN_DEFAULT = 0xFFFFFFFF,};
enum tagDVD_AUDIO_APPMODE {DVD_AudioMode_None = 0x0,DVD_AudioMode_Karaoke = 0x1,DVD_AudioMode_Surround = 0x2,DVD_AudioMode_Other = 0x3,};
enum tagDVD_TITLE_APPMODE {DVD_AppMode_Not_Specified = 0x0,DVD_AppMode_Karaoke = 0x1,DVD_AppMode_Other = 0x3,};
enum tagNETCON_CHOOSETYPE {NCCHT_DIRECT_CONNECT = 0x1,NCCHT_LAN = 0x2,NCCHT_PHONE = 0x4,NCCHT_TUNNEL = 0x8,NCCHT_ISDN = 0x10,NCCHT_ALL = 0x1F,};
enum tagPictureAttributes {PICTURE_SCALABLE = 0x1,PICTURE_TRANSPARENT = 0x2,};
enum tagSCRIPTTHREADSTATE {SCRIPTTHREADSTATE_NOTINSCRIPT = 0x0,SCRIPTTHREADSTATE_RUNNING = 0x1,};
enum tagVideoProcAmpFlags {VideoProcAmp_Flags_Auto = 0x1,VideoProcAmp_Flags_Manual = 0x2,};
typedef struct tACMDRVFORMATSUGGEST ACMDRVFORMATSUGGEST;
typedef struct tACMFILTERTAGDETAILS ACMFILTERTAGDETAILS;
typedef struct tACMFORMATTAGDETAILSW ACMFORMATTAGDETAILS;
typedef struct _ACTRL_ACCESS_ENTRYA ACTRL_ACCESS_ENTRYA;
typedef struct _ACTRL_ACCESS_ENTRYW ACTRL_ACCESS_ENTRYW;
typedef struct _ACTRL_CONTROL_INFOA ACTRL_CONTROL_INFOA;
typedef struct _ACTRL_CONTROL_INFOW ACTRL_CONTROL_INFOW;
enum AMPlayListItemFlags {AMPLAYLISTITEM_CANSKIP = 0x1,AMPLAYLISTITEM_CANBIND = 0x2,};
typedef struct _AM_COPY_MACROVISION AM_COPY_MACROVISION;
typedef struct __MIDL___MIDL_itf_strmif_0231_0001 AM_DVD_RENDERSTATUS;
typedef struct _3A744348A6C9F73853F568E19FD6B4F7 AM_SimpleRateChange;
typedef struct _APPCATEGORYINFOLIST APPCATEGORYINFOLIST;
typedef struct _avitimedindex_entry AVITIMEDINDEX_ENTRY;
enum AppearanceConstants {amvFlat = 0x0,amv3D = 0x1,};
typedef struct _BASEBAND_CONNECTION BASEBAND_CONNECTION;
enum BrowserNavConstants {navOpenInNewWindow = 0x1,navNoHistory = 0x2,navNoReadFromCache = 0x4,navNoWriteToCache = 0x8,navAllowAutosearch = 0x10,navBrowserBar = 0x20,navHyperlink = 0x40,navEnforceRestricted = 0x80,};
enum BthDeviceStringType {BthDeviceStringTypeFriendlyName = 0x0,BthDeviceStringTypeDeviceName = 0x1,BthDeviceStringTypeDisplay = 0x2,BthDeviceStringTypeClass = 0x3,BthDeviceStringTypeAddress = 0x4,};
typedef struct _CARD_REGISTER_PARMS CARD_REGISTER_PARMS;
typedef struct _CEL_OEMPROFILER_HIT CEL_OEMPROFILER_HIT;
typedef struct __CEL_THREAD_PRIORITY CEL_THREAD_PRIORITY;
typedef struct _CERT_ALT_NAME_ENTRY CERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS CERT_DSS_PARAMETERS;
typedef struct _CERT_POLICY_MAPPING CERT_POLICY_MAPPING;
typedef struct _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB;
enum CHANNEL_AGENT_FLAGS {CHANNEL_AGENT_DYNAMIC_SCHEDULE = 0x1,CHANNEL_AGENT_PRECACHE_SOME = 0x2,CHANNEL_AGENT_PRECACHE_ALL = 0x4,CHANNEL_AGENT_PRECACHE_SCRNSAVER = 0x8,};
typedef struct tagCInterfaceProxyVtbl CInterfaceProxyVtbl;
typedef struct _CMINVOKECOMMANDINFO CMINVOKECOMMANDINFO;
typedef struct _CRL_DIST_POINT_NAME CRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO CRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO CRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT CRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA CRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR CRYPT_PROVIDER_SGNR;
typedef struct tagCStdPSFactoryBuffer CStdPSFactoryBuffer;
typedef struct _CTL_FIND_USAGE_PARA CTL_FIND_USAGE_PARA;
typedef struct _D3DINDEXBUFFER_DESC D3DINDEXBUFFER_DESC;
enum DBACCESSORFLAGSENUM {DBACCESSOR_INVALID = 0x0,DBACCESSOR_PASSBYREF = 0x1,DBACCESSOR_ROWDATA = 0x2,DBACCESSOR_PARAMETERDATA = 0x4,DBACCESSOR_OPTIMIZED = 0x8,DBACCESSOR_INHERITED = 0x10,};
enum DBBINDURLSTATUSENUM {DBBINDURLSTATUS_S_OK = 0x0,DBBINDURLSTATUS_S_DENYNOTSUPPORTED = 0x1,DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED = 0x4,DBBINDURLSTATUS_S_REDIRECTED = 0x8,};
enum DBCOLUMNFLAGS15ENUM {DBCOLUMNFLAGS_ISCHAPTER = 0x2000,};
enum DBCOLUMNFLAGSENUM20 {DBCOLUMNFLAGS_SCALEISNEGATIVE = 0x4000,DBCOLUMNFLAGS_RESERVED = 0x8000,};
enum DBCOLUMNFLAGSENUM21 {DBCOLUMNFLAGS_ISROWURL = 0x10000,DBCOLUMNFLAGS_ISDEFAULTSTREAM = 0x20000,DBCOLUMNFLAGS_ISCOLLECTION = 0x40000,};
enum DBDEFERRABILITYENUM {DBDEFERRABILITY_DEFERRED = 0x1,DBDEFERRABILITY_DEFERRABLE = 0x2,};
enum DBPENDINGSTATUSENUM {DBPENDINGSTATUS_NEW = 0x1,DBPENDINGSTATUS_CHANGED = 0x2,DBPENDINGSTATUS_DELETED = 0x4,DBPENDINGSTATUS_UNCHANGED = 0x8,DBPENDINGSTATUS_INVALIDROW = 0x10,};
enum DBPOSITIONFLAGSENUM {DBPOSITION_OK = 0x0,DBPOSITION_NOROW = 0x1,DBPOSITION_BOF = 0x2,DBPOSITION_EOF = 0x3,};
enum DBROWCHANGEKINDENUM {DBROWCHANGEKIND_INSERT = 0x0,DBROWCHANGEKIND_DELETE = 0x1,DBROWCHANGEKIND_UPDATE = 0x2,DBROWCHANGEKIND_COUNT = 0x3,};
typedef struct _EC3BB85EBBE9955145E6214979EA4930 DIALER_NOTIFICATION;
typedef struct digiadpcmmwaveformat_tag DIGIADPCMWAVEFORMAT;
typedef struct _DOT11_GROUP_ADDRESS DOT11_GROUP_ADDRESS;
typedef struct _DOT11_RESET_REQUEST DOT11_RESET_REQUEST;
typedef struct _DOT11_START_REQUEST DOT11_START_REQUEST;
typedef struct _DOT11_WEP_KEY_ENTRY DOT11_WEP_KEY_ENTRY;
struct DShellWindowsEvents {struct DShellWindowsEventsVtbl *lpVtbl;};
typedef struct tagDVD_AudioAttributes DVD_AudioAttributes;
enum DVD_DomainConstants {dvdDomain_FirstPlay = 0x1,dvdDomain_VideoManagerMenu = 0x2,dvdDomain_VideoTitleSetMenu = 0x3,dvdDomain_Title = 0x4,dvdDomain_Stop = 0x5,};
typedef struct tagDVD_TitleMainAttributes DVD_TitleAttributes;
typedef struct tagDVD_VideoAttributes DVD_VideoAttributes;
struct DXTFilterCollection;
struct DispHTCDescBehavior {struct DispHTCDescBehaviorVtbl *lpVtbl;};
struct DispHTMLAppBehavior {struct DispHTMLAppBehaviorVtbl *lpVtbl;};
struct DispHTMLAreaElement {struct DispHTMLAreaElementVtbl *lpVtbl;};
struct DispHTMLBaseElement {struct DispHTMLBaseElementVtbl *lpVtbl;};
struct DispHTMLDOMTextNode {struct DispHTMLDOMTextNodeVtbl *lpVtbl;};
struct DispHTMLDivPosition {struct DispHTMLDivPositionVtbl *lpVtbl;};
struct DispHTMLFontElement {struct DispHTMLFontElementVtbl *lpVtbl;};
struct DispHTMLFormElement {struct DispHTMLFormElementVtbl *lpVtbl;};
struct DispHTMLHeadElement {struct DispHTMLHeadElementVtbl *lpVtbl;};
struct DispHTMLHtmlElement {struct DispHTMLHtmlElementVtbl *lpVtbl;};
struct DispHTMLLinkElement {struct DispHTMLLinkElementVtbl *lpVtbl;};
struct DispHTMLListElement {struct DispHTMLListElementVtbl *lpVtbl;};
struct DispHTMLMetaElement {struct DispHTMLMetaElementVtbl *lpVtbl;};
struct DispHTMLParaElement {struct DispHTMLParaElementVtbl *lpVtbl;};
struct DispHTMLRenderStyle {struct DispHTMLRenderStyleVtbl *lpVtbl;};
struct DispHTMLSpanElement {struct DispHTMLSpanElementVtbl *lpVtbl;};
struct DispHTMLTextElement {struct DispHTMLTextElementVtbl *lpVtbl;};
struct DispHTMLWindowProxy {struct DispHTMLWindowProxyVtbl *lpVtbl;};
struct DispIHTMLInputImage {struct DispIHTMLInputImageVtbl *lpVtbl;};
struct HTCPropertyBehavior;
struct HTMLAreasCollection;
struct HTMLBaseFontElement;
struct HTMLDocumentEvents2 {struct HTMLDocumentEvents2Vtbl *lpVtbl;};
struct HTMLFieldSetElement;
struct HTMLFrameSiteEvents {struct HTMLFrameSiteEventsVtbl *lpVtbl;};
struct HTMLNamespaceEvents {struct HTMLNamespaceEventsVtbl *lpVtbl;};
struct HTMLRichtextElement;
struct HTMLTextAreaElement;
typedef struct tagHTTPCONTACTINFOLIST HTTPCONTACTINFOLIST;
typedef struct tagHTTPMEMBERERRORLIST HTTPMEMBERERRORLIST;
typedef struct _HTTP_FILTER_AUTHENT HTTP_FILTER_AUTHENT;
typedef struct _HTTP_FILTER_CONTEXT HTTP_FILTER_CONTEXT;
typedef struct _HTTP_FILTER_URL_MAP HTTP_FILTER_URL_MAP;
typedef struct _HTTP_FILTER_VERSION HTTP_FILTER_VERSION;
struct IAMDevMemoryControl {struct IAMDevMemoryControlVtbl *lpVtbl;};
struct IAMMultiMediaStream {struct IAMMultiMediaStreamVtbl *lpVtbl;};
struct IAMVideoCompression {struct IAMVideoCompressionVtbl *lpVtbl;};
struct IActiveIMMRegistrar {struct IActiveIMMRegistrarVtbl *lpVtbl;};
struct IActiveScriptAuthor {struct IActiveScriptAuthorVtbl *lpVtbl;};
struct IActiveScriptEncode {struct IActiveScriptEncodeVtbl *lpVtbl;};
struct IBindStatusCallback {struct IBindStatusCallbackVtbl *lpVtbl;};
struct IConfigInterleaving {struct IConfigInterleavingVtbl *lpVtbl;};
struct IDBBinderProperties {struct IDBBinderPropertiesVtbl *lpVtbl;};
struct IDDrawExclModeVideo {struct IDDrawExclModeVideoVtbl *lpVtbl;};
struct IDXARGBReadWritePtr {struct IDXARGBReadWritePtrVtbl *lpVtbl;};
struct IDXTransformFactory {struct IDXTransformFactoryVtbl *lpVtbl;};
struct IDirect3DSwapChain8 {struct IDirect3DSwapChain8Vtbl *lpVtbl;};
struct IDirectDrawSurface2 {struct IDirectDrawSurface2Vtbl *lpVtbl;};
struct IDirectDrawSurface3 {struct IDirectDrawSurface3Vtbl *lpVtbl;};
struct IDirectDrawSurface4 {struct IDirectDrawSurface4Vtbl *lpVtbl;};
struct IDirectDrawSurface5 {struct IDirectDrawSurface5Vtbl *lpVtbl;};
struct IDirectSoundCapture {struct IDirectSoundCaptureVtbl *lpVtbl;};
struct IDockingWindowFrame {struct IDockingWindowFrameVtbl *lpVtbl;};
struct IEnumDVD_CELL_PIECE {struct IEnumDVD_CELL_PIECEVtbl *lpVtbl;};
struct IEnumItemProperties {struct IEnumItemPropertiesVtbl *lpVtbl;};
struct IEnumPrivacyRecords {struct IEnumPrivacyRecordsVtbl *lpVtbl;};
struct IEnumSTATPROPSETSTG {struct IEnumSTATPROPSETSTGVtbl *lpVtbl;};
struct IEnumTravelLogEntry {struct IEnumTravelLogEntryVtbl *lpVtbl;};
struct IEnumWSDLOperations {struct IEnumWSDLOperationsVtbl *lpVtbl;};
struct IExternalConnection {struct IExternalConnectionVtbl *lpVtbl;};
struct IFileSystemBindData {struct IFileSystemBindDataVtbl *lpVtbl;};
struct IHTCAttachBehavior2 {struct IHTCAttachBehavior2Vtbl *lpVtbl;};
struct IHTCDefaultDispatch {struct IHTCDefaultDispatchVtbl *lpVtbl;};
struct IHTMLAnchorElement2 {struct IHTMLAnchorElement2Vtbl *lpVtbl;};
struct IHTMLChangePlayback {struct IHTMLChangePlaybackVtbl *lpVtbl;};
struct IHTMLCommentElement {struct IHTMLCommentElementVtbl *lpVtbl;};
struct IHTMLControlElement {struct IHTMLControlElementVtbl *lpVtbl;};
struct IHTMLGenericElement {struct IHTMLGenericElementVtbl *lpVtbl;};
struct IHTMLIFrameElement2 {struct IHTMLIFrameElement2Vtbl *lpVtbl;};
struct IHTMLIsIndexElement {struct IHTMLIsIndexElementVtbl *lpVtbl;};
struct IHTMLLegendElement2 {struct IHTMLLegendElement2Vtbl *lpVtbl;};
struct IHTMLMarqueeElement {struct IHTMLMarqueeElementVtbl *lpVtbl;};
struct IHTMLObjectElement2 {struct IHTMLObjectElement2Vtbl *lpVtbl;};
struct IHTMLObjectElement3 {struct IHTMLObjectElement3Vtbl *lpVtbl;};
struct IHTMLOptionElement2 {struct IHTMLOptionElement2Vtbl *lpVtbl;};
struct IHTMLOptionElement3 {struct IHTMLOptionElement3Vtbl *lpVtbl;};
struct IHTMLPainterOverlay {struct IHTMLPainterOverlayVtbl *lpVtbl;};
struct IHTMLPhraseElement2 {struct IHTMLPhraseElement2Vtbl *lpVtbl;};
struct IHTMLPrivateWindow2 {struct IHTMLPrivateWindow2Vtbl *lpVtbl;};
struct IHTMLPrivateWindow3 {struct IHTMLPrivateWindow3Vtbl *lpVtbl;};
struct IHTMLRectCollection {struct IHTMLRectCollectionVtbl *lpVtbl;};
struct IHTMLScriptElement2 {struct IHTMLScriptElement2Vtbl *lpVtbl;};
struct IHTMLSelectElement2 {struct IHTMLSelectElement2Vtbl *lpVtbl;};
struct IHTMLSelectElement3 {struct IHTMLSelectElement3Vtbl *lpVtbl;};
struct IHTMLSelectElement4 {struct IHTMLSelectElement4Vtbl *lpVtbl;};
struct IHTMLStyleSheetPage {struct IHTMLStyleSheetPageVtbl *lpVtbl;};
struct IHTMLStyleSheetRule {struct IHTMLStyleSheetRuleVtbl *lpVtbl;};
struct IHTMLUnknownElement {struct IHTMLUnknownElementVtbl *lpVtbl;};
struct IHTMLViewFilterSite {struct IHTMLViewFilterSiteVtbl *lpVtbl;};
struct IHlinkBrowseContext {struct IHlinkBrowseContextVtbl *lpVtbl;};
struct IImnAccountManager2 {struct IImnAccountManager2Vtbl *lpVtbl;};
struct IInternetBindClient {struct IInternetBindClientVtbl *lpVtbl;};
struct IJavaPackageManager {struct IJavaPackageManagerVtbl *lpVtbl;};
typedef struct _IMAGELISTDRAWPARAMS IMAGELISTDRAWPARAMS;
struct IMediaObjectInPlace {struct IMediaObjectInPlaceVtbl *lpVtbl;};
struct IMessengerIMWindows {struct IMessengerIMWindowsVtbl *lpVtbl;};
struct IMimeEnumHeaderRows {struct IMimeEnumHeaderRowsVtbl *lpVtbl;};
struct IMimeEnumProperties {struct IMimeEnumPropertiesVtbl *lpVtbl;};
struct IMimePropertySchema {struct IMimePropertySchemaVtbl *lpVtbl;};
typedef struct _C3D536761911E1B34BFF5DAB2CC3A2E9 INTERNET_PROXY_INFO;
struct INotificationReport {struct INotificationReportVtbl *lpVtbl;};
struct IOleInPlaceUIWindow {struct IOleInPlaceUIWindowVtbl *lpVtbl;};
typedef struct _IP_PER_ADAPTER_INFO IP_PER_ADAPTER_INFO;
struct IPersistPropertyBag {struct IPersistPropertyBagVtbl *lpVtbl;};
struct IPropertyNotifySink {struct IPropertyNotifySinkVtbl *lpVtbl;};
struct IPropertySetStorage {struct IPropertySetStorageVtbl *lpVtbl;};
struct IRTCBuddyGroupEvent {struct IRTCBuddyGroupEventVtbl *lpVtbl;};
struct IRTCClientPresence2 {struct IRTCClientPresence2Vtbl *lpVtbl;};
struct IRTCPresenceContact {struct IRTCPresenceContactVtbl *lpVtbl;};
struct IRTCUserSearchQuery {struct IRTCUserSearchQueryVtbl *lpVtbl;};
struct IRadioServerControl {struct IRadioServerControlVtbl *lpVtbl;};
struct IReconcilableObject {struct IReconcilableObjectVtbl *lpVtbl;};
struct IReconcileInitiator {struct IReconcileInitiatorVtbl *lpVtbl;};
struct IRowsetCurrentIndex {struct IRowsetCurrentIndexVtbl *lpVtbl;};
struct IRunningObjectTable {struct IRunningObjectTableVtbl *lpVtbl;};
struct ISearchAssistantOC2 {struct ISearchAssistantOC2Vtbl *lpVtbl;};
struct ISearchAssistantOC3 {struct ISearchAssistantOC3Vtbl *lpVtbl;};
struct ISyncMgrSynchronize {struct ISyncMgrSynchronizeVtbl *lpVtbl;};
struct ITransactionOptions {struct ITransactionOptionsVtbl *lpVtbl;};
struct IUPnPDeviceProvider {struct IUPnPDeviceProviderVtbl *lpVtbl;};
struct IWebViewFolderIcon2 {struct IWebViewFolderIcon2Vtbl *lpVtbl;};
struct IWebViewFolderIcon3 {struct IWebViewFolderIcon3Vtbl *lpVtbl;};
struct IWindowForBindingUI {struct IWindowForBindingUIVtbl *lpVtbl;};
struct IXMLDOMCDATASection {struct IXMLDOMCDATASectionVtbl *lpVtbl;};
struct IXMLDOMDocumentType {struct IXMLDOMDocumentTypeVtbl *lpVtbl;};
struct IXMLDOMNamedNodeMap {struct IXMLDOMNamedNodeMapVtbl *lpVtbl;};
typedef struct _DA4DDC42953EF335ABBBEB43C6FEBDA6 IncomingCookieState;
typedef struct _KDEVICE_QUEUE_ENTRY KDEVICE_QUEUE_ENTRY;
typedef struct linetranslateoutput_tag LINETRANSLATEOUTPUT;
typedef struct _LINE_ADDRESS_STATUS LINE_ADDRESS_STATUS;
typedef struct _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
typedef IAccessibleHandler *LPACCESSIBLEHANDLER;
typedef struct tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING *LPCOMPOSITIONSTRING;
typedef struct _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;
typedef struct _DDVIDEOPORTSTATUS *LPDDVIDEOPORTSTATUS;
typedef struct IDirect3DResource8 *LPDIRECT3DRESOURCE8;
typedef struct IDirectDrawClipper *LPDIRECTDRAWCLIPPER;
typedef struct IDirectDrawPalette *LPDIRECTDRAWPALETTE;
typedef struct IDirectDrawSurface *LPDIRECTDRAWSURFACE;
typedef struct IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;
typedef struct IDirectSoundNotify *LPDIRECTSOUNDNOTIFY;
typedef struct _DSBPOSITIONNOTIFY *LPDSBPOSITIONNOTIFY;
typedef struct _73827E02090E4C689AB98CDF13C808CD *LPDSQUERYINITPARAMS;
typedef IEmptyVolumeCache2 *LPEMPTYVOLUMECACHE2;
typedef IEnumScheduleGroup *LPENUMSCHEDULEGROUP;
typedef IExtensionServices *LPEXTENSIONSERVICES;
typedef struct _7644B9603AEA08EBF4DF4A983BB6B237 *LPGOPHER_FIND_DATAA;
typedef struct _17CA7839736B8F73357CD165DBE52F18 *LPGOPHER_FIND_DATAW;
typedef struct _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;
typedef struct tagHTTPCONTACTIDLIST *LPHTTPCONTACTIDLIST;
typedef struct tagHTTPMAILBCOPYMOVE *LPHTTPMAILBCOPYMOVE;
typedef struct _D692CA7460863103343173F071E8F66B *LPHTTP_VERSION_INFO;
typedef IInternetBindInfo *LPIINTERNETBINDINFO;
typedef IInternetPriority *LPIINTERNETPRIORITY;
typedef IInternetProtocol *LPIINTERNETPROTOCOL;
typedef struct _INTERFACE_INFO_EX *LPINTERFACE_INFO_EX;
typedef struct _INTERNET_BUFFERSA *LPINTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW *LPINTERNET_BUFFERSW;
typedef struct lineaddressstatus_tag *LPLINEADDRESSSTATUS;
typedef struct linelocationentry_tag *LPLINELOCATIONENTRY;
typedef struct lineproviderentry_tag *LPLINEPROVIDERENTRY;
typedef struct linetranslatecaps_tag *LPLINETRANSLATECAPS;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef struct tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
typedef IMimeInternational *LPMIMEINTERNATIONAL;
typedef struct tMIXERLINECONTROLS *LPMIXERLINECONTROLS;
typedef struct tagNMDATETIMEFORMATA *LPNMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW *LPNMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA *LPNMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW *LPNMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE *LPNMLVODSTATECHANGE;
typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;
typedef struct _C0D59FBB56C2A4C81C123E710A248183 *LPOPENQUERYWINDOW_A;
typedef struct _22AB0003247B482AF4559A70859CB27B *LPOPENQUERYWINDOW_W;
typedef IPersistStreamInit *LPPERSISTSTREAMINIT;
typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;
typedef struct _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;
typedef IShellPropSheetExt *LPSHELLPROPSHEETEXT;
typedef struct _SPropProblemArray *LPSPropProblemArray;
typedef struct _SSLCLIENTAUTHOPTS *LPSSLCLIENTAUTHOPTS;
typedef struct STORE_INFORMATION *LPSTORE_INFORMATION;
typedef struct _USB_CONFIGURATION *LPUSB_CONFIGURATION;
typedef struct _WINDOWS_IAS_QUERY *LPWINDOWS_IAS_QUERY;
typedef struct _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;
typedef struct _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
enum MACRO_AB_SELECTONLY {AB_SELECTONLY = 0x10,AB_RESOLVE = 0x20,};
enum MACRO_ACCESS_MAX_MS {ACCESS_MAX_MS_OBJECT_ACE_TYPE = 0x8,ACCESS_MAX_MS_V4_ACE_TYPE = 0x8,ACCESS_MAX_MS_ACE_TYPE = 0x8,};
enum MACRO_ACCESS_OBJECT {ACCESS_OBJECT_GUID = 0,ACCESS_PROPERTY_SET_GUID = 1,ACCESS_PROPERTY_GUID = 2,ACCESS_MAX_LEVEL = 4,};
enum MACRO_AMCOPYPROTECT {AMCOPYPROTECT_RestrictDuplication = 0x1,};
enum MACRO_AM_LOADSTATUS {AM_LOADSTATUS_CLOSED = 0x0,AM_LOADSTATUS_LOADINGDESCR = 0x1,AM_LOADSTATUS_LOADINGMCAST = 0x2,AM_LOADSTATUS_LOCATING = 0x3,AM_LOADSTATUS_CONNECTING = 0x4,AM_LOADSTATUS_OPENING = 0x5,AM_LOADSTATUS_OPEN = 0x6,};
enum MACRO_BS_PUSHBUTTON {BS_PUSHBUTTON = 0x0,BS_DEFPUSHBUTTON = 0x1,BS_CHECKBOX = 0x2,BS_AUTOCHECKBOX = 0x3,BS_RADIOBUTTON = 0x4,BS_3STATE = 0x5,BS_AUTO3STATE = 0x6,BS_GROUPBOX = 0x7,BS_AUTORADIOBUTTON = 0x9,BS_OWNERDRAW = 0xB,BS_LEFTTEXT = 0x20,BS_TEXT = 0x0,BS_LEFT = 0x100,BS_RIGHT = 0x200,BS_CENTER = 0x300,BS_TOP = 0x400,BS_BOTTOM = 0x800,BS_VCENTER = 0xC00,BS_PUSHLIKE = 0x1000,BS_MULTILINE = 0x2000,BS_NOTIFY = 0x4000,BS_RIGHTBUTTON = 0x20,};
enum MACRO_CACHEGROUP_ID {CACHEGROUP_ID_BUILTIN_STICKY = 0x1000000000000007,};
enum MACRO_CAL_GREGORIAN {CAL_GREGORIAN = 1,CAL_GREGORIAN_US = 2,CAL_JAPAN = 3,CAL_TAIWAN = 4,CAL_KOREA = 5,CAL_HIJRI = 6,CAL_THAI = 7,CAL_HEBREW = 8,CAL_GREGORIAN_ME_FRENCH = 9,CAL_GREGORIAN_ARABIC = 10,CAL_GREGORIAN_XLIT_ENGLISH = 11,CAL_GREGORIAN_XLIT_FRENCH = 12,};
enum MACRO_CAT_NAMEVALUE {CAT_NAMEVALUE_STRUCT = 2221,CAT_MEMBERINFO_STRUCT = 2222,};
enum MACRO_CCHDEVICENAME {CCHDEVICENAME = 32,};
enum MACRO_CCHMAX_DOMAIN {CCHMAX_DOMAIN = 256,CCHMAX_PHONE_NUMBER = 128,};
enum MACRO_CDBBMKDISPIDS {CDBBMKDISPIDS = 8,};
enum MACRO_CDBCOLDISPIDS {CDBCOLDISPIDS = 28,CQUERYPROPERTY = 64,};
enum MACRO_CERT_EXCLUDED {CERT_EXCLUDED_SUBTREE_BIT = 0x80000000,};
enum MACRO_CERT_SCHANNEL {CERT_SCHANNEL_IIS_PRIVATE_KEY_PROP_ID = 32768,CERT_SCHANNEL_IIS_PASSWORD_PROP_ID = 32769,CERT_SCHANNEL_SGC_CERTIFICATE_PROP_ID = 32770,};
enum MACRO_COLOR_DESKTOP {COLOR_DESKTOP = 1073741825,COLOR_3DFACE = 1073741839,COLOR_3DSHADOW = 1073741840,COLOR_3DHIGHLIGHT = 1073741844,COLOR_3DHILIGHT = 1073741844,};
enum MACRO_COMPLEXREGION {COMPLEXREGION = 3,};
enum MACRO_CQUERYDISPIDS {CQUERYDISPIDS = 11,};
enum MACRO_CRED_PRESERVE {CRED_PRESERVE_CREDENTIAL_BLOB = 0x1,CRED_CACHE_TARGET_INFORMATION = 0x1,CRED_ALLOW_NAME_RESOLUTION = 0x1,};
enum MACRO_CRESTRICTIONS {CRESTRICTIONS_DBSCHEMA_ASSERTIONS = 3,CRESTRICTIONS_DBSCHEMA_CATALOGS = 1,CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS = 3,CRESTRICTIONS_DBSCHEMA_COLLATIONS = 3,CRESTRICTIONS_DBSCHEMA_COLUMNS = 4,CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS = 3,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE = 4,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE = 3,CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE = 7,CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS = 3,CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS = 7,CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE = 4,CRESTRICTIONS_DBSCHEMA_INDEXES = 5,CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS = 1,CRESTRICTIONS_DBSCHEMA_OBJECTS = 1,CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES = 6,CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES = 5,CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES = 6,CRESTRICTIONS_DBSCHEMA_PROCEDURES = 4,CRESTRICTIONS_DBSCHEMA_SCHEMATA = 3,CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES = 0,CRESTRICTIONS_DBSCHEMA_STATISTICS = 3,CRESTRICTIONS_DBSCHEMA_TABLES = 4,CRESTRICTIONS_DBSCHEMA_TRANSLATIONS = 3,CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES = 2,CRESTRICTIONS_DBSCHEMA_VIEWS = 3,CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE = 3,CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE = 3,CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS = 4,CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS = 6,CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS = 3,CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS = 4,CRESTRICTIONS_DBSCHEMA_TABLES_INFO = 4,CRESTRICTIONS_MDSCHEMA_CUBES = 3,CRESTRICTIONS_MDSCHEMA_DIMENSIONS = 5,CRESTRICTIONS_MDSCHEMA_HIERARCHIES = 6,CRESTRICTIONS_MDSCHEMA_LEVELS = 7,CRESTRICTIONS_MDSCHEMA_MEASURES = 5,CRESTRICTIONS_MDSCHEMA_PROPERTIES = 9,CRESTRICTIONS_MDSCHEMA_MEMBERS = 12,CRESTRICTIONS_DBSCHEMA_TRUSTEE = 4,};
enum MACRO_CRYPT_INSTALL {CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1,CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1,CRYPT_REGISTER_FIRST_INDEX = 0,CRYPT_REGISTER_LAST_INDEX = -1,CRYPT_MATCH_ANY_ENCODING_TYPE = -1,CRYPT_HASH_ALG_OID_GROUP_ID = 1,CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,CRYPT_SIGN_ALG_OID_GROUP_ID = 4,CRYPT_RDN_ATTR_OID_GROUP_ID = 5,CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,CRYPT_POLICY_OID_GROUP_ID = 8,CRYPT_TEMPLATE_OID_GROUP_ID = 9,CRYPT_LAST_OID_GROUP_ID = 9,CRYPT_FIRST_ALG_OID_GROUP_ID = 1,CRYPT_LAST_ALG_OID_GROUP_ID = 4,CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1,CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2,CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4,CRYPT_OID_INFO_OID_KEY = 1,CRYPT_OID_INFO_NAME_KEY = 2,CRYPT_OID_INFO_ALGID_KEY = 3,CRYPT_OID_INFO_SIGN_KEY = 4,CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1,CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0,};
enum MACRO_CRYPT_MESSAGE {CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 0x1,CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 0x2,CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 0x4,CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 0x40,CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 0x4,};
enum MACRO_CS_INSERTCHAR {CS_INSERTCHAR = 0x2000,CS_NOMOVECARET = 0x4000,};
enum MACRO_CW_USEDEFAULT {CW_USEDEFAULT = 0x80000000,};
enum MACRO_D3DCLIPPLANE0 {D3DCLIPPLANE0 = 1,D3DCLIPPLANE1 = 2,D3DCLIPPLANE2 = 4,D3DCLIPPLANE3 = 8,D3DCLIPPLANE4 = 16,D3DCLIPPLANE5 = 32,};
enum MACRO_D3DCURSORCAPS {D3DCURSORCAPS_COLOR = 0x1,D3DCURSORCAPS_LOWRES = 0x2,};
enum MACRO_D3DPBLENDCAPS {D3DPBLENDCAPS_ZERO = 0x1,D3DPBLENDCAPS_ONE = 0x2,D3DPBLENDCAPS_SRCCOLOR = 0x4,D3DPBLENDCAPS_INVSRCCOLOR = 0x8,D3DPBLENDCAPS_SRCALPHA = 0x10,D3DPBLENDCAPS_INVSRCALPHA = 0x20,D3DPBLENDCAPS_DESTALPHA = 0x40,D3DPBLENDCAPS_INVDESTALPHA = 0x80,D3DPBLENDCAPS_DESTCOLOR = 0x100,D3DPBLENDCAPS_INVDESTCOLOR = 0x200,D3DPBLENDCAPS_SRCALPHASAT = 0x400,D3DPBLENDCAPS_BOTHSRCALPHA = 0x800,D3DPBLENDCAPS_BOTHINVSRCALPHA = 0x1000,};
enum MACRO_D3DPSHADECAPS {D3DPSHADECAPS_COLORGOURAUDRGB = 0x8,D3DPSHADECAPS_SPECULARGOURAUDRGB = 0x200,D3DPSHADECAPS_ALPHAGOURAUDBLEND = 0x4000,D3DPSHADECAPS_FOGGOURAUD = 0x80000,};
enum MACRO_D3DSP_SWIZZLE {D3DSP_SWIZZLE_SHIFT = 16,D3DSP_SWIZZLE_MASK = 16711680,D3DSP_NOSWIZZLE = 14942208,D3DSP_REPLICATERED = 0,D3DSP_REPLICATEGREEN = 5570560,D3DSP_REPLICATEBLUE = 11141120,D3DSP_REPLICATEALPHA = 16711680,D3DSP_SRCMOD_SHIFT = 24,D3DSP_SRCMOD_MASK = 251658240,};
enum MACRO_DBCOMPUTEMODE {DBCOMPUTEMODE_COMPUTED = 0x1,DBCOMPUTEMODE_DYNAMIC = 0x2,DBCOMPUTEMODE_NOTCOMPUTED = 0x3,};
enum MACRO_DBPROPVAL_ORS {DBPROPVAL_ORS_TABLE = 0x0,DBPROPVAL_ORS_INDEX = 0x1,DBPROPVAL_ORS_INTEGRATEDINDEX = 0x2,DBPROPVAL_TC_DDL_LOCK = 0x10,DBPROPVAL_ORS_STOREDPROC = 0x4,DBPROPVAL_IN_ALLOWNULL = 0x0,DBPROPVAL_OO_SINGLETON = 0x20,DBPROPVAL_OS_AGR_AFTERSESSION = 0x8,DBPROPVAL_CM_TRANSACTIONS = 0x1,};
enum MACRO_DBWATCHREGION {DBWATCHREGION_NULL = 0,};
enum MACRO_DB_E_NOCOLUMN {DB_E_NOCOLUMN = 0x80040E65,DB_E_COMMANDNOTPERSISTED = 0x80040E67,DB_E_DUPLICATEID = 0x80040E68,DB_E_OBJECTCREATIONLIMITREACHED = 0x80040E69,DB_E_BADINDEXID = 0x80040E72,DB_E_BADINITSTRING = 0x80040E73,DB_E_NOPROVIDERSREGISTERED = 0x80040E74,DB_E_MISMATCHEDPROVIDER = 0x80040E75,DB_E_BADCOMMANDID = 0x80040E76,};
enum MACRO_DDFXALPHACAPS {DDFXALPHACAPS_BLTALPHAEDGEBLEND = 0x1,DDFXALPHACAPS_BLTALPHAPIXELS = 0x2,DDFXALPHACAPS_BLTALPHAPIXELSNEG = 0x4,DDFXALPHACAPS_BLTALPHASURFACES = 0x8,DDFXALPHACAPS_BLTALPHASURFACESNEG = 0x10,DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 0x20,DDFXALPHACAPS_OVERLAYALPHAPIXELS = 0x40,DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 0x80,DDFXALPHACAPS_OVERLAYALPHASURFACES = 0x100,DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 0x200,};
enum MACRO_DEVICE_STATUS {DEVICE_STATUS_OK = 0x80000000,DEVICE_STATUS_MALFUNCTIONED = 0x80000001,DEVICE_STATUS_REMOVED = 0x80000002,DEVICE_STATUS_DISABLED = 0x80000003,};
enum MACRO_DISPID_NORMAL {DISPID_NORMAL_FIRST = 1000,DISPID_ANCHOR = 1000,DISPID_BLOCK = 1000,DISPID_BR = 1000,DISPID_BGSOUND = 1000,DISPID_DD = 1000,DISPID_DIR = 1000,DISPID_DIV = 1000,DISPID_DL = 1000,DISPID_DT = 1000,DISPID_EFONT = 1000,DISPID_FORM = 1000,DISPID_HEADER = 1000,DISPID_HEDELEMS = 1000,DISPID_HR = 1000,DISPID_LABEL = 1000,DISPID_LI = 1000,DISPID_IMGBASE = 1000,DISPID_IMG = 2000,DISPID_INPUTIMAGE = 2000,DISPID_MENU = 1000,DISPID_OL = 1000,DISPID_PARA = 1000,DISPID_SELECTOBJ = 1000,DISPID_TABLE = 1000,DISPID_TEXTSITE = 1000,DISPID_TEXTAREA = 5000,DISPID_MARQUEE = 6000,DISPID_RICHTEXT = 7000,DISPID_BUTTON = 8000,DISPID_UL = 1000,DISPID_PHRASE = 1000,DISPID_UNKNOWNPDL = 1000,DISPID_COMMENTPDL = 1000,DISPID_TABLECELL = 2000,DISPID_RANGE = 1000,DISPID_SELECTION = 1000,DISPID_OPTION = 1000,DISPID_1D = 2000,DISPID_MAP = 1000,DISPID_AREA = 1000,DISPID_PARAM = 1000,DISPID_TABLESECTION = 1000,DISPID_TABLEROW = 1000,DISPID_TABLECOL = 1000,DISPID_SCRIPT = 1000,DISPID_STYLESHEET = 1000,DISPID_STYLERULE = 1000,DISPID_STYLEPAGE = 1000,DISPID_STYLESHEETS_COL = 1000,DISPID_STYLERULES_COL = 1000,DISPID_STYLEPAGES_COL = 1000,DISPID_MIMETYPES_COL = 1000,DISPID_PLUGINS_COL = 1000,DISPID_2D = 1000,DISPID_OMWINDOW = 1000,DISPID_EVENTOBJ = 1000,DISPID_PERSISTDATA = 1000,DISPID_OLESITE = 1000,DISPID_FRAMESET = 1000,DISPID_LINK = 1000,DISPID_STYLEELEMENT = 1000,DISPID_FILTERS = 1000,DISPID_OMRECT = 1000,DISPID_DOMATTRIBUTE = 1000,DISPID_DOMTEXTNODE = 1000,DISPID_GENERIC = 1000,DISPID_URN_COLL = 1000,DISPID_NAMESPACE_COLLECTION = 1000,DISPID_NAMESPACE = 1000,DISPID_TAGNAMES_COLLECTION = 1000,DISPID_HTMLDOCUMENT = 1000,DISPID_OMDOCUMENT = 1000,DISPID_DATATRANSFER = 1000,DISPID_XMLDECL = 1000,DISPID_DOCFRAG = 1000,DISPID_ILINEINFO = 1000,DISPID_IHTMLCOMPUTEDSTYLE = 1000,DISPID_WINDOW = 1,DISPID_SCREEN = 1000,DISPID_FRAMESCOLLECTION = 1000,DISPID_HISTORY = 1,DISPID_LOCATION = 1,DISPID_NAVIGATOR = 1,DISPID_COLLECTION = 1500,DISPID_OPTIONS_COL = 1500,DISPID_CHECKBOX = 1000,DISPID_RADIO = 2000,DISPID_FRAMESITE = -2147415112,DISPID_FRAME = -2147414112,DISPID_IFRAME = -2147414112,};
enum MACRO_DRIVERVERSION {DRIVERVERSION = 0,TECHNOLOGY = 2,HORZSIZE = 4,};
enum MACRO_EC_SYSTEMBASE {EC_SYSTEMBASE = 0x0,EC_USER = 0x8000,EC_COMPLETE = 0x1,EC_USERABORT = 0x2,EC_ERRORABORT = 0x3,EC_TIME = 0x4,EC_REPAINT = 0x5,EC_STREAM_ERROR_STOPPED = 0x6,EC_STREAM_ERROR_STILLPLAYING = 0x7,EC_ERROR_STILLPLAYING = 0x8,EC_PALETTE_CHANGED = 0x9,EC_VIDEO_SIZE_CHANGED = 0xA,EC_QUALITY_CHANGE = 0xB,EC_SHUTTING_DOWN = 0xC,EC_CLOCK_CHANGED = 0xD,EC_PAUSED = 0xE,EC_OPENING_FILE = 0x10,EC_BUFFERING_DATA = 0x11,EC_FULLSCREEN_LOST = 0x12,EC_ACTIVATE = 0x13,EC_NEED_RESTART = 0x14,EC_WINDOW_DESTROYED = 0x15,EC_DISPLAY_CHANGED = 0x16,EC_STARVATION = 0x17,EC_OLE_EVENT = 0x18,EC_NOTIFY_WINDOW = 0x19,EC_STREAM_CONTROL_STOPPED = 0x1A,EC_STREAM_CONTROL_STARTED = 0x1B,EC_END_OF_SEGMENT = 0x1C,EC_SEGMENT_STARTED = 0x1D,EC_LENGTH_CHANGED = 0x1E,EC_TIMECODE_AVAILABLE = 0x30,EC_EXTDEVICE_MODE_CHANGE = 0x31,EC_PLEASE_REOPEN = 0x40,EC_STATUS = 0x41,EC_MARKER_HIT = 0x42,EC_LOADSTATUS = 0x43,};
enum MACRO_ENGINEPROBLEM {ENGINEPROBLEM_DOWNLOADFAIL = 0x1,};
enum MACRO_EVENT_SERVICE {EVENT_SERVICE_NOT_INTERACTIVE = 0xC0001B76,EVENT_SERVICE_CRASH = 0xC0001B77,EVENT_SERVICE_RECOVERY_FAILED = 0xC0001B78,EVENT_SERVICE_SCESRV_FAILED = 0xC0001B79,EVENT_SERVICE_CRASH_NO_ACTION = 0xC0001B7A,EVENT_SERVICE_CONTROL_SUCCESS = 0x40001B7B,EVENT_SERVICE_STATUS_SUCCESS = 0x40001B7C,EVENT_SERVICE_CONFIG_BACKOUT_FAILED = 0xC0001B7D,EVENT_FIRST_LOGON_FAILED_II = 0xC0001B7E,EVENT_COMMAND_NOT_INTERACTIVE = 0xC0001EDC,EVENT_COMMAND_START_FAILED = 0xC0001EDD,EVENT_BOWSER_OTHER_MASTER_ON_NET = 0xC0001F43,EVENT_BOWSER_PROMOTED_WHILE_ALREADY_MASTER = 0x80001F44,EVENT_BOWSER_NON_MASTER_MASTER_ANNOUNCE = 0x80001F45,EVENT_BOWSER_ILLEGAL_DATAGRAM = 0x80001F46,EVENT_BROWSER_STATUS_BITS_UPDATE_FAILED = 0xC0001F47,EVENT_BROWSER_ROLE_CHANGE_FAILED = 0xC0001F48,EVENT_BROWSER_MASTER_PROMOTION_FAILED = 0xC0001F49,EVENT_BOWSER_NAME_CONVERSION_FAILED = 0xC0001F4A,EVENT_BROWSER_OTHERDOMAIN_ADD_FAILED = 0xC0001F4B,EVENT_BOWSER_ELECTION_RECEIVED = 0x1F4C,EVENT_BOWSER_ELECTION_SENT_GETBLIST_FAILED = 0x40001F4D,EVENT_BOWSER_ELECTION_SENT_FIND_MASTER_FAILED = 0x40001F4E,EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STARTED = 0x40001F4F,EVENT_BOWSER_ILLEGAL_DATAGRAM_THRESHOLD = 0xC0001F50,EVENT_BROWSER_DEPENDANT_SERVICE_FAILED = 0xC0001F51,EVENT_BROWSER_MASTER_PROMOTION_FAILED_STOPPING = 0xC0001F53,EVENT_BROWSER_MASTER_PROMOTION_FAILED_NO_MASTER = 0xC0001F54,EVENT_BROWSER_SERVER_LIST_FAILED = 0x80001F55,EVENT_BROWSER_DOMAIN_LIST_FAILED = 0x80001F56,EVENT_BROWSER_ILLEGAL_CONFIG = 0x80001F57,EVENT_BOWSER_OLD_BACKUP_FOUND = 0x40001F58,EVENT_BROWSER_SERVER_LIST_RETRIEVED = 0x1F59,EVENT_BROWSER_DOMAIN_LIST_RETRIEVED = 0x1F5A,EVENT_BOWSER_PDC_LOST_ELECTION = 0x40001F5B,EVENT_BOWSER_NON_PDC_WON_ELECTION = 0x40001F5C,EVENT_BOWSER_CANT_READ_REGISTRY = 0x40001F5D,EVENT_BOWSER_MAILSLOT_DATAGRAM_THRESHOLD_EXCEEDED = 0x40001F5E,EVENT_BOWSER_GETBROWSERLIST_THRESHOLD_EXCEEDED = 0x40001F5F,EVENT_BROWSER_BACKUP_STOPPED = 0xC0001F60,EVENT_BROWSER_ELECTION_SENT_LANMAN_NT_STOPPED = 0x40001F61,EVENT_BROWSER_GETBLIST_RECEIVED_NOT_MASTER = 0xC0001F62,EVENT_BROWSER_ELECTION_SENT_ROLE_CHANGED = 0x40001F63,EVENT_BROWSER_NOT_STARTED_IPX_CONFIG_MISMATCH = 0xC0001F64,};
enum MACRO_FACILITY_D3DX {FACILITY_D3DX = 0x877,};
enum MACRO_FILTER_STATUS {FILTER_STATUS_OPAQUE = 0x1,FILTER_STATUS_INVISIBLE = 0x2,FILTER_STATUS_SURFACE = 0x4,FILTER_STATUS_3DSURFACE = 0x8,};
enum MACRO_FOLDER_DIALOG {FOLDER_DIALOG = 0x2,};
enum MACRO_FSCTL_NDISPWR {FSCTL_NDISPWR_BASE = 18,};
enum MACRO_GMEM_DDESHARE {GMEM_DDESHARE = 0,GMEM_DISCARDABLE = 3840,GMEM_LOWER = 0,GMEM_NOCOMPACT = 16,GMEM_NODISCARD = 32,GMEM_NOT_BANKED = 0,GMEM_NOTIFY = 0,GMEM_SHARE = 0,GMEM_ZEROINIT = 64,};
enum MACRO_HTBOTTOMRIGHT {HTBOTTOMRIGHT = 17,};
enum MACRO_HTTRANSPARENT {HTTRANSPARENT = -1,};
enum MACRO_IME_CMODE_ALL {IME_CMODE_ALL = 0xFFF,IME_SMODE_ALL = 0x1F,};
enum MACRO_INTERFACESAFE {INTERFACESAFE_FOR_UNTRUSTED_CALLER = 0x1,INTERFACESAFE_FOR_UNTRUSTED_DATA = 0x2,};
enum MACRO_INTERNATIONAL {INTERNATIONAL_USAGE = 0x1,};
enum MACRO_INTERNET_FLAG {INTERNET_FLAG_BGUPDATE = 0x8,INTERNET_FLAG_UNUSED_4 = 0x4,INTERNET_PREFETCH_PROGRESS = 0x0,INTERNET_PREFETCH_COMPLETE = 0x1,INTERNET_PREFETCH_ABORTED = 0x2,};
enum MACRO_INTERNET_OPEN {INTERNET_OPEN_TYPE_PRECONFIG = 0,INTERNET_OPEN_TYPE_DIRECT = 1,INTERNET_OPEN_TYPE_PROXY = 3,INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY = 4,};
enum MACRO_IOCTL_NDISUIO {IOCTL_NDISUIO_OPEN_DEVICE = 0x120800,IOCTL_NDISUIO_QUERY_OID_VALUE = 0x120804,IOCTL_NDISUIO_SET_OID_VALUE = 0x120814,IOCTL_NDISUIO_SET_ETHER_TYPE = 0x120808,IOCTL_NDISUIO_QUERY_BINDING = 0x12080C,IOCTL_NDISUIO_BIND_WAIT = 0x120810,IOCTL_NDISUIO_OPEN_WRITE_DEVICE = 0x120818,IOCTL_NDISUIO_REQUEST_NOTIFICATION = 0x12081C,IOCTL_NDISUIO_CANCEL_NOTIFICATION = 0x120820,IOCTL_NDISUIO_NIC_STATISTICS = 0x120824,IOCTL_CANCEL_READ = 0x120828,};
enum MACRO_IOCTL_SERVICE {IOCTL_SERVICE_START = 17039364,IOCTL_SERVICE_STOP = 17039368,IOCTL_SERVICE_REFRESH = 17039372,IOCTL_SERVICE_INSTALL = 17039376,IOCTL_SERVICE_UNINSTALL = 17039380,IOCTL_SERVICE_UNLOAD = 17039384,IOCTL_SERVICE_CONTROL = 17039388,IOCTL_SERVICE_STATUS = 17039392,IOCTL_SERVICE_DEBUG = 17039396,IOCTL_SERVICE_CONSOLE = 17039400,IOCTL_SERVICE_REGISTER_SOCKADDR = 17039404,IOCTL_SERVICE_DEREGISTER_SOCKADDR = 17039408,IOCTL_SERVICE_CONNECTION = 17039412,IOCTL_SERVICE_STARTED = 17039416,IOCTL_SERVICE_QUERY_CAN_DEINIT = 17039420,IOCTL_SERVICE_NOTIFY_ADDR_CHANGE = 17039424,IOCTL_SERVICE_CALLBACK_FUNCTIONS = 17039428,IOCTL_SERVICE_SUPPORTED_OPTIONS = 17039432,};
enum MACRO_LINECALLSTATE {LINECALLSTATE_IDLE = 0x1,LINECALLSTATE_OFFERING = 0x2,LINECALLSTATE_ACCEPTED = 0x4,LINECALLSTATE_DIALTONE = 0x8,LINECALLSTATE_DIALING = 0x10,LINECALLSTATE_RINGBACK = 0x20,LINECALLSTATE_BUSY = 0x40,LINECALLSTATE_SPECIALINFO = 0x80,LINECALLSTATE_CONNECTED = 0x100,LINECALLSTATE_PROCEEDING = 0x200,LINECALLSTATE_ONHOLD = 0x400,LINECALLSTATE_CONFERENCED = 0x800,LINECALLSTATE_ONHOLDPENDCONF = 0x1000,LINECALLSTATE_ONHOLDPENDTRANSFER = 0x2000,LINECALLSTATE_DISCONNECTED = 0x4000,LINECALLSTATE_UNKNOWN = 0x8000,};
enum MACRO_LINEDIGITMODE {LINEDIGITMODE_PULSE = 0x1,LINEDIGITMODE_DTMF = 0x2,LINEDIGITMODE_DTMFEND = 0x4,};
enum MACRO_LINEMEDIAMODE {LINEMEDIAMODE_UNKNOWN = 0x2,LINEMEDIAMODE_INTERACTIVEVOICE = 0x4,LINEMEDIAMODE_AUTOMATEDVOICE = 0x8,LINEMEDIAMODE_DATAMODEM = 0x10,LINEMEDIAMODE_G3FAX = 0x20,LINEMEDIAMODE_TDD = 0x40,LINEMEDIAMODE_G4FAX = 0x80,LINEMEDIAMODE_DIGITALDATA = 0x100,LINEMEDIAMODE_TELETEX = 0x200,LINEMEDIAMODE_VIDEOTEX = 0x400,LINEMEDIAMODE_TELEX = 0x800,LINEMEDIAMODE_MIXED = 0x1000,LINEMEDIAMODE_ADSI = 0x2000,LINEMEDIAMODE_VOICEVIEW = 0x4000,};
enum MACRO_LVM_EDITLABEL {LVM_EDITLABEL = 4119,};
enum MACRO_LVM_GETCOLUMN {LVM_GETCOLUMN = 4121,LVM_SETCOLUMN = 4122,LVM_INSERTCOLUMN = 4123,};
enum MACRO_MAPPER_STATUS {DRVM_MAPPER_STATUS = 0x2000,WIDM_MAPPER_STATUS = 0x2000,};
enum MACRO_MAX_EXTENSION {MAX_EXTENSION_PAGES = 6,};
enum MACRO_MAX_INTERFACE {MAX_INTERFACE_NAME_LEN = 256,};
enum MACRO_MAX_LEADBYTES {MAX_LEADBYTES = 12,MAX_DEFAULTCHAR = 2,};
enum MACRO_MAX_PREFERRED {MAX_PREFERRED_LENGTH = 4294967295,};
enum MACRO_MCN_SELCHANGE {MCN_SELCHANGE = -749,MCN_GETDAYSTATE = -747,MCN_SELECT = -746,MCN_SELECTNONE = -745,};
enum MACRO_MIDIPATCHSIZE {MIDIPATCHSIZE = 128,};
enum MACRO_MIXER_OBJECTF {MIXER_OBJECTF_HANDLE = 0x80000000,MIXER_OBJECTF_MIXER = 0x0,MIXER_OBJECTF_HMIXER = 0x80000000,MIXER_OBJECTF_WAVEOUT = 0x10000000,MIXER_OBJECTF_HWAVEOUT = 0x90000000,MIXER_OBJECTF_WAVEIN = 0x20000000,MIXER_OBJECTF_HWAVEIN = 0xA0000000,MIXER_OBJECTF_MIDIOUT = 0x30000000,MIXER_OBJECTF_HMIDIOUT = 0xB0000000,MIXER_OBJECTF_MIDIIN = 0x40000000,MIXER_OBJECTF_HMIDIIN = 0xC0000000,MIXER_OBJECTF_AUX = 0x50000000,};
enum MACRO_NDIS_MINIPORT {NDIS_MINIPORT_BUS_MASTER = 0x1,NDIS_MINIPORT_WDM_DRIVER = 0x2,NDIS_MINIPORT_SG_LIST = 0x4,NDIS_MINIPORT_SUPPORTS_MEDIA_QUERY = 0x8,NDIS_MINIPORT_INDICATES_PACKETS = 0x10,NDIS_MINIPORT_IGNORE_PACKET_QUEUE = 0x20,NDIS_MINIPORT_IGNORE_REQUEST_QUEUE = 0x40,NDIS_MINIPORT_IGNORE_TOKEN_RING_ERRORS = 0x80,NDIS_MINIPORT_INTERMEDIATE_DRIVER = 0x100,NDIS_MINIPORT_IS_NDIS_5 = 0x200,NDIS_MINIPORT_IS_CO = 0x400,NDIS_MINIPORT_DESERIALIZE = 0x800,NDIS_MINIPORT_REQUIRES_MEDIA_POLLING = 0x1000,NDIS_MINIPORT_SUPPORTS_MEDIA_SENSE = 0x2000,NDIS_MINIPORT_NETBOOT_CARD = 0x4000,NDIS_MINIPORT_PM_SUPPORTED = 0x8000,NDIS_MINIPORT_SUPPORTS_MAC_ADDRESS_OVERWRITE = 0x10000,NDIS_MINIPORT_USES_SAFE_BUFFER_APIS = 0x20000,NDIS_MINIPORT_HIDDEN = 0x40000,NDIS_MINIPORT_SWENUM = 0x80000,NDIS_MINIPORT_SURPRISE_REMOVE_OK = 0x100000,NDIS_MINIPORT_NO_HALT_ON_SUSPEND = 0x200000,NDIS_MINIPORT_HARDWARE_DEVICE = 0x400000,NDIS_MINIPORT_SUPPORTS_CANCEL_SEND_PACKETS = 0x800000,NDIS_MINIPORT_64BITS_DMA = 0x1000000,};
enum MACRO_NDIS_PROTOCOL {NDIS_PROTOCOL_ID_DEFAULT = 0x0,NDIS_PROTOCOL_ID_TCP_IP = 0x2,NDIS_PROTOCOL_ID_IPX = 0x6,NDIS_PROTOCOL_ID_NBF = 0x7,NDIS_PROTOCOL_ID_MAX = 0xF,NDIS_PROTOCOL_ID_MASK = 0xF,};
enum MACRO_NO_ATTACHMENT {NO_ATTACHMENT = 0x0,};
enum MACRO_OPAQUEKEYBLOB {OPAQUEKEYBLOB = 0x9,};
enum MACRO_PDERR_NOPORTS {PDERR_NOPORTS = 4103,PDERR_NOPRINTERS = 4104,PDERR_CREATEDCFAILURE = 4106,};
enum MACRO_PHONELAMPMODE {PHONELAMPMODE_DUMMY = 0x1,PHONELAMPMODE_OFF = 0x2,PHONELAMPMODE_STEADY = 0x4,PHONELAMPMODE_WINK = 0x8,PHONELAMPMODE_FLASH = 0x10,PHONELAMPMODE_FLUTTER = 0x20,PHONELAMPMODE_BROKENFLUTTER = 0x40,PHONELAMPMODE_UNKNOWN = 0x80,};
enum MACRO_PHYSICALWIDTH {PHYSICALWIDTH = 110,};
enum MACRO_PKCS12_EXPORT {PKCS12_EXPORT_RESERVED_MASK = 0xFFFF0000,};
enum MACRO_PRINTDLGEXORD {PRINTDLGEXORD = 1549,};
enum MACRO_PROPID_DBSELF {PROPID_DBSELF_SELF = 2,};
enum MACRO_PROXY_VERSION {PROXY_VERSION = 1,};
enum MACRO_REPLACEDLGORD {REPLACEDLGORD = 1541,};
enum MACRO_RESOURCEUSAGE {RESOURCEUSAGE_CONNECTABLE = 0x1,RESOURCEUSAGE_CONTAINER = 0x2,RESOURCEUSAGE_NOLOCALDEVICE = 0x4,RESOURCEUSAGE_SIBLING = 0x8,RESOURCEUSAGE_ALL = 0x3,RESOURCEUSAGE_RESERVED = 0x80000000,};
enum MACRO_RIFFCPPO_objr {RIFFCPPO_objr = 1919574639,RIFFCPPO_obji = 1768579695,RIFFCPPO_clsr = 1920167011,RIFFCPPO_clsi = 1769172067,RIFFCPPO_mbr = 544367213,RIFFCPPO_char = 1918986339,RIFFCPPO_byte = 1702132066,RIFFCPPO_int = 544501353,RIFFCPPO_word = 1685221239,RIFFCPPO_long = 1735290732,RIFFCPPO_dwrd = 1685223268,RIFFCPPO_flt = 544500838,RIFFCPPO_dbl = 543973988,RIFFCPPO_str = 544371827,};
enum MACRO_RPC_INTERFACE {RPC_INTERFACE_HAS_PIPES = 0x1,};
enum MACRO_SCHANNEL_CRED {SCHANNEL_CRED_VERSION = 0x4,};
enum MACRO_SCH_CRED_X509 {SCH_CRED_X509_CERTCHAIN = 0x1,SCH_CRED_X509_CAPI = 0x2,SCH_CRED_CERT_CONTEXT = 0x3,};
enum MACRO_SCRIPTTYPELIB {SCRIPTTYPELIB_ISCONTROL = 0x10,SCRIPTTYPELIB_ISPERSISTENT = 0x40,SCRIPTTYPELIB_ALL_FLAGS = 0x50,};
enum MACRO_SECURITY_FLAG {SECURITY_FLAG_SECURE = 0x1,SECURITY_FLAG_STRENGTH_WEAK = 0x10000000,SECURITY_FLAG_STRENGTH_MEDIUM = 0x40000000,SECURITY_FLAG_STRENGTH_STRONG = 0x20000000,SECURITY_FLAG_UNKNOWNBIT = 0x80000000,SECURITY_FLAG_FORTEZZA = 0x8000000,SECURITY_FLAG_NORMALBITNESS = 0x10000000,SECURITY_FLAG_SSL = 0x2,SECURITY_FLAG_SSL3 = 0x4,SECURITY_FLAG_PCT = 0x8,SECURITY_FLAG_PCT4 = 0x10,SECURITY_FLAG_IETFSSL4 = 0x20,SECURITY_FLAG_40BIT = 0x10000000,SECURITY_FLAG_128BIT = 0x20000000,SECURITY_FLAG_56BIT = 0x40000000,SECURITY_FLAG_IGNORE_REVOCATION = 0x80,SECURITY_FLAG_IGNORE_UNKNOWN_CA = 0x100,SECURITY_FLAG_IGNORE_WRONG_USAGE = 0x200,SECURITY_FLAG_IGNORE_CERT_CN_INVALID = 0x1000,SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 0x2000,SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS = 0x4000,SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP = 0x8000,SECURITY_SET_MASK = 0x3380,};
enum MACRO_SETTINGCHANGE {SETTINGCHANGE_START = 0x3001,SETTINGCHANGE_RESET = 0x3002,SETTINGCHANGE_END = 0x3003,};
enum MACRO_SFGAO_CANCOPY {SFGAO_CANCOPY = 1,SFGAO_CANMOVE = 2,SFGAO_CANLINK = 4,SFGAO_CANRENAME = 16,SFGAO_CANDELETE = 32,SFGAO_HASPROPSHEET = 64,SFGAO_DROPTARGET = 256,SFGAO_CAPABILITYMASK = 375,SFGAO_SHARE = 131072,SFGAO_GHOSTED = 524288,SFGAO_HIDDEN = 524288,SFGAO_DISPLAYATTRMASK = 983040,SFGAO_FILESYSANCESTOR = 268435456,SFGAO_FILESYSTEM = 1073741824,SFGAO_HASSUBFOLDER = -2147483648,SFGAO_CONTENTSMASK = -2147483648,SFGAO_VALIDATE = 16777216,SFGAO_REMOVABLE = 33554432,SFGAO_COMPRESSED = 67108864,SFGAO_BROWSABLE = 134217728,SFGAO_NONENUMERATED = 1048576,SFGAO_NEWCONTENT = 2097152,SFGAO_CANMONIKER = 4194304,};
enum MACRO_STORE_ENTRYID {STORE_ENTRYID_UNIQUE = 0x1,STORE_READONLY = 0x2,STORE_SEARCH_OK = 0x4,STORE_MODIFY_OK = 0x8,STORE_CREATE_OK = 0x10,STORE_ATTACH_OK = 0x20,STORE_OLE_OK = 0x40,STORE_SUBMIT_OK = 0x80,STORE_NOTIFY_OK = 0x100,STORE_MV_PROPS_OK = 0x200,STORE_CATEGORIZE_OK = 0x400,STORE_RTF_OK = 0x800,STORE_RESTRICTION_OK = 0x1000,STORE_SORT_OK = 0x2000,STORE_HAS_SEARCHES = 0x1000000,};
enum MACRO_SUBSMGRUPDATE {SUBSMGRUPDATE_MINIMIZE = 0x1,SUBSMGRUPDATE_MASK = 0x1,};
enum MACRO_SW_INVALIDATE {SW_INVALIDATE = 0x2,SW_ERASE = 0x4,};
enum MACRO_SYNCSCHEDINFO {SYNCSCHEDINFO_FLAGS_MASK = 0xFFF,SYNCSCHEDINFO_FLAGS_READONLY = 0x1,SYNCSCHEDINFO_FLAGS_AUTOCONNECT = 0x2,SYNCSCHEDINFO_FLAGS_HIDDEN = 0x4,};
enum MACRO_TBL_NOADVANCE {TBL_NOADVANCE = 0x1,};
enum MACRO_TCP_EXPEDITED {TCP_EXPEDITED_1122 = 0x2,};
enum MACRO_TLS_FUNCALLOC {TLS_FUNCALLOC = 0,TLS_FUNCFREE = 1,};
enum MACRO_VAR_VALIDDATE {VAR_VALIDDATE = 0x4,VAR_CALENDAR_HIJRI = 0x8,};
enum MACRO_WBREAK_E_INIT {WBREAK_E_INIT_FAILED = 0x80041785,};
enum MACRO_X509_SEQUENCE {X509_SEQUENCE_OF_ANY = 34,X509_CRL_DIST_POINTS = 35,X509_ENHANCED_KEY_USAGE = 36,};
enum MACRO_cktypeDIBbits {cktypeDIBbits = 25188,};
enum MACRO_grfdexPropAll {grfdexPropAll = 16383,};
typedef struct _MIB_IPFORWARDNUMBER MIB_IPFORWARDNUMBER;
typedef struct _B1AAA2E973C90C8AA1D1293855444268 MIB_MCAST_LIMIT_ROW;
typedef struct _MIB_MFE_STATS_TABLE MIB_MFE_STATS_TABLE;
typedef struct tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
typedef struct _MP_ENVELOPE_SEGMENT MP_ENVELOPE_SEGMENT;
typedef struct _NDIS_TAPI_MAKE_CALL NDIS_TAPI_MAKE_CALL;
typedef struct _NETWORK_ADDRESS_IPX NETWORK_ADDRESS_IPX;
typedef struct tagCOMPOSITIONSTRING *NPCOMPOSITIONSTRING;
enum NSOControlConstants {nsoNone = 0x0,nsoSimple = 0x1,nsoFull = 0x2,};
enum NSODisplayConstants {nsoDefaultSize = 0x0,nsoHalfSize = 0x1,nsoDoubleSize = 0x2,};
enum NSProtocolConstants {nsMulticast = 0x1,nsMulticastPlus = 0x2,nsUDP = 0x3,nsTCP = 0x4,nsDistribution = 0x5,nsHTTP = 0x6,nsFile = 0x7,};
typedef struct _8FE251E0C9BEAEF58C2D97D4F1899077 NT_FE_CONSOLE_PROPS;
typedef struct _OBJECT_NOTIFICATION OBJECT_NOTIFICATION;
struct OLEDBSimpleProvider {struct OLEDBSimpleProviderVtbl *lpVtbl;};
typedef struct tagOIFI OLEINPLACEFRAMEINFO;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
enum OfflineFolderStatus {OFS_INACTIVE = 0xFFFFFFFF,OFS_ONLINE = 0x0,OFS_OFFLINE = 0x1,OFS_SERVERBACK = 0x2,OFS_DIRTYCACHE = 0x3,};
typedef struct _C9FA87CB09885B34D96B23C89F19724B OutgoingCookieState;
typedef struct tagPACKAGESECURITYINFO PACKAGESECURITYINFO;
typedef struct tACMDRVSTREAMHEADER *PACMDRVSTREAMHEADER;
typedef struct _ACTRL_ACCESS_INFOA *PACTRL_ACCESS_INFOA;
typedef struct _ACTRL_ACCESS_INFOW *PACTRL_ACCESS_INFOW;
typedef IAMDevMemoryControl *PAMDEVMEMORYCONTROL;
typedef struct _AM_DVDCOPY_CHLGKEY *PAM_DVDCOPY_CHLGKEY;
typedef struct _AM_DVDCOPY_DISCKEY *PAM_DVDCOPY_DISCKEY;
typedef struct _BTH_REMOTE_VERSION *PBTH_REMOTE_VERSION;
typedef struct _CARD_SOCKET_HANDLE *PCARD_SOCKET_HANDLE;
typedef struct _CEL_MONTECARLO_HIT *PCEL_MONTECARLO_HIT;
typedef struct __CEL_PROCESS_CREATE *PCEL_PROCESS_CREATE;
typedef struct __CEL_PROCESS_DELETE *PCEL_PROCESS_DELETE;
typedef ProfilerControl *PCEL_PROFILER_START;
typedef struct __CEL_THREAD_MIGRATE *PCEL_THREAD_MIGRATE;
typedef struct __CEL_THREAD_QUANTUM *PCEL_THREAD_QUANTUM;
typedef struct __CEL_THREAD_SUSPEND *PCEL_THREAD_SUSPEND;
typedef struct _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;
typedef struct _CMC_TAGGED_REQUEST *PCMC_TAGGED_REQUEST;
typedef struct _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;
typedef struct _CRYPT_PROVUI_FUNCS *PCRYPT_PROVUI_FUNCS;
typedef struct _DEVICE_DESCRIPTION *PDEVICE_DESCRIPTION;
typedef struct IDirect3DSwapChain8 *PDIRECT3DSWAPCHAIN8;
typedef struct _DISPATCHER_CONTEXT *PDISPATCHER_CONTEXT;
typedef struct _DMA_ADAPTER_OBJECT_ *PDMA_ADAPTER_OBJECT;
typedef struct _DOT11_8021X_FILTER *PDOT11_8021X_FILTER;
typedef struct _DOT11_ANTENNA_LIST *PDOT11_ANTENNA_LIST;
typedef struct _DOT11_IV48_COUNTER *PDOT11_IV48_COUNTER;
typedef struct _DOT11_JOIN_REQUEST *PDOT11_JOIN_REQUEST;
typedef struct _DOT11_SCAN_REQUEST *PDOT11_SCAN_REQUEST;
typedef struct _DOT11_WEP_KEY_DATA *PDOT11_WEP_KEY_DATA;
typedef struct _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
typedef IAMTimecodeDisplay *PIAMTIMECODEDISPLAY;
typedef IActiveScriptParse *PIActiveScriptParse;
enum PIDMSI_STATUS_VALUE {PIDMSI_STATUS_NORMAL = 0x0,PIDMSI_STATUS_NEW = 0x1,PIDMSI_STATUS_PRELIM = 0x2,PIDMSI_STATUS_DRAFT = 0x3,PIDMSI_STATUS_INPROGRESS = 0x4,PIDMSI_STATUS_EDIT = 0x5,PIDMSI_STATUS_REVIEW = 0x6,PIDMSI_STATUS_PROOF = 0x7,PIDMSI_STATUS_FINAL = 0x8,PIDMSI_STATUS_OTHER = 0x7FFF,};
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
typedef struct _MANAGEDAPPLICATION *PMANAGEDAPPLICATION;
typedef struct _MIB_IPFORWARDTABLE *PMIB_IPFORWARDTABLE;
typedef struct _MIB_IPMCAST_GLOBAL *PMIB_IPMCAST_GLOBAL;
typedef struct _NDIS_CO_LINK_SPEED *PNDIS_CO_LINK_SPEED;
typedef struct _NDIS_VAR_DATA_DESC *PNDIS_VAR_DATA_DESC;
typedef struct _NDIS_WLAN_BSSID_EX *PNDIS_WLAN_BSSID_EX;
typedef struct _NETWORK_ADDRESS_IP *PNETWORK_ADDRESS_IP;
typedef struct _POWER_CAPABILITIES *PPOWER_CAPABILITIES;
typedef struct _POWER_RELATIONSHIP *PPOWER_RELATIONSHIP;
typedef struct _PROXY_HTTP_REQUEST *PPROXY_HTTP_REQUEST;
typedef struct _RAS_AUTH_ATTRIBUTE *PRAS_AUTH_ATTRIBUTE;
typedef struct _PROCESS_INFORMATION PROCESS_INFORMATION;
typedef struct tagPROPERTYRESTRICTION PROPERTYRESTRICTION;
typedef struct _27240A871129E8C5EF2505ED059D4BC8 *PRPC_DISPATCH_TABLE;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *PSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *PSCARD_READERSTATEW;
typedef struct _SHNOTIFICATIONDATA *PSHNOTIFICATIONDATA;
typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;
typedef struct _SPC_SP_AGENCY_INFO *PSPC_SP_AGENCY_INFO;
typedef struct _SPC_STATEMENT_TYPE *PSPC_STATEMENT_TYPE;
typedef struct _PST_BINARYCHECKDATA PST_BINARYCHECKDATA;
typedef struct _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;
typedef struct _USB_DEVICE_REQUEST *PUSB_DEVICE_REQUEST;
typedef struct _USB_HUB_DESCRIPTOR *PUSB_HUB_DESCRIPTOR;
typedef struct _WAIT_CONTEXT_BLOCK *PWAIT_CONTEXT_BLOCK;
typedef struct _WINDOWS_DEVICELIST *PWINDOWS_DEVICELIST;
typedef struct WINTRUST_BLOB_INFO_ *PWINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ *PWINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ *PWINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ *PWINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA *PWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *PWSANAMESPACE_INFOW;
typedef struct _REPARSE_DATA_BUFFER REPARSE_DATA_BUFFER;
typedef struct _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
typedef struct _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
enum RTC_PRESENCE_STATUS {RTCXS_PRESENCE_OFFLINE = 0x0,RTCXS_PRESENCE_ONLINE = 0x1,RTCXS_PRESENCE_AWAY = 0x2,RTCXS_PRESENCE_IDLE = 0x3,RTCXS_PRESENCE_BUSY = 0x4,RTCXS_PRESENCE_BE_RIGHT_BACK = 0x5,RTCXS_PRESENCE_ON_THE_PHONE = 0x6,RTCXS_PRESENCE_OUT_TO_LUNCH = 0x7,};
enum ReadyStateConstants {amvUninitialized = 0x0,amvLoading = 0x1,amvInteractive = 0x3,amvComplete = 0x4,};
typedef struct _SBitMaskRestriction SBitMaskRestriction;
typedef struct _SCATTER_GATHER_LIST SCATTER_GATHER_LIST;
typedef struct _SCommentRestriction SCommentRestriction;
typedef struct _SContentRestriction SContentRestriction;
typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
typedef struct _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
typedef struct tagSHCHANGENOTIFYENTRY SHCHANGENOTIFYENTRY;
typedef struct _SOCKET_ADDRESS_LIST SOCKET_ADDRESS_LIST;
typedef struct _SSLVALIDATECERTHOOK SSLVALIDATECERTHOOK;
typedef struct _tagSYNCMGRLOGERRORINFO SYNCMGRLOGERRORINFO;
typedef struct _tagSYNCMGRPROGRESSITEM SYNCMGRPROGRESSITEM;
typedef struct _SecPkgContext_Flags SecPkgContext_Flags;
typedef struct _SecPkgContext_Sizes SecPkgContext_Sizes;
struct ShellDispatchInproc;
struct TIMEMotionAnimation;
typedef struct _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
typedef struct _USB_DRIVER_SETTINGS USB_DRIVER_SETTINGS;
struct WebCheckOfflineSync;
enum WindowSizeConstants {amvOriginalSize = 0x0,amvDoubleOriginalSize = 0x1,amvOneSixteenthScreen = 0x2,amvOneFourthScreen = 0x3,amvOneHalfScreen = 0x4,};
enum _AM_DVD_GRAPH_FLAGS {AM_DVD_HWDEC_PREFER = 0x1,AM_DVD_HWDEC_ONLY = 0x2,AM_DVD_SWDEC_PREFER = 0x4,AM_DVD_SWDEC_ONLY = 0x8,AM_DVD_NOVPE = 0x100,};
struct _BTH_REMOTE_VERSION {unsigned char lmp_version;unsigned short lmp_subversion;unsigned short manufacturer;unsigned char lmp_features[8];};
typedef ProfilerControl _CEL_PROFILER_START;
enum _CHAR_FORMAT_FAMILY {CHAR_FORMAT_None = 0x0,CHAR_FORMAT_FontStyle = 0x1,CHAR_FORMAT_FontInfo = 0x2,CHAR_FORMAT_FontName = 0x4,CHAR_FORMAT_ColorInfo = 0x8,CHAR_FORMAT_ParaFormat = 0x10,CHAR_FORMAT_FAMILY_Max = 0x7FFFFFFF,};
union _CLIENT_CALL_RETURN {void *Pointer;int Simple;};
struct _COMM_FAULT_OFFSETS {short CommOffset;short FaultOffset;};
enum _D3DBACKBUFFER_TYPE {D3DBACKBUFFER_TYPE_MONO = 0x0,D3DBACKBUFFER_TYPE_LEFT = 0x1,D3DBACKBUFFER_TYPE_RIGHT = 0x2,D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DRENDERSTATETYPE {D3DRS_ZENABLE = 0x7,D3DRS_FILLMODE = 0x8,D3DRS_SHADEMODE = 0x9,D3DRS_LINEPATTERN = 0xA,D3DRS_ZWRITEENABLE = 0xE,D3DRS_ALPHATESTENABLE = 0xF,D3DRS_LASTPIXEL = 0x10,D3DRS_SRCBLEND = 0x13,D3DRS_DESTBLEND = 0x14,D3DRS_CULLMODE = 0x16,D3DRS_ZFUNC = 0x17,D3DRS_ALPHAREF = 0x18,D3DRS_ALPHAFUNC = 0x19,D3DRS_DITHERENABLE = 0x1A,D3DRS_ALPHABLENDENABLE = 0x1B,D3DRS_FOGENABLE = 0x1C,D3DRS_SPECULARENABLE = 0x1D,D3DRS_ZVISIBLE = 0x1E,D3DRS_FOGCOLOR = 0x22,D3DRS_FOGTABLEMODE = 0x23,D3DRS_FOGSTART = 0x24,D3DRS_FOGEND = 0x25,D3DRS_FOGDENSITY = 0x26,D3DRS_EDGEANTIALIAS = 0x28,D3DRS_ZBIAS = 0x2F,D3DRS_RANGEFOGENABLE = 0x30,D3DRS_STENCILENABLE = 0x34,D3DRS_STENCILFAIL = 0x35,D3DRS_STENCILZFAIL = 0x36,D3DRS_STENCILPASS = 0x37,D3DRS_STENCILFUNC = 0x38,D3DRS_STENCILREF = 0x39,D3DRS_STENCILMASK = 0x3A,D3DRS_STENCILWRITEMASK = 0x3B,D3DRS_TEXTUREFACTOR = 0x3C,D3DRS_WRAP0 = 0x80,D3DRS_WRAP1 = 0x81,D3DRS_WRAP2 = 0x82,D3DRS_WRAP3 = 0x83,D3DRS_WRAP4 = 0x84,D3DRS_WRAP5 = 0x85,D3DRS_WRAP6 = 0x86,D3DRS_WRAP7 = 0x87,D3DRS_CLIPPING = 0x88,D3DRS_LIGHTING = 0x89,D3DRS_AMBIENT = 0x8B,D3DRS_FOGVERTEXMODE = 0x8C,D3DRS_COLORVERTEX = 0x8D,D3DRS_LOCALVIEWER = 0x8E,D3DRS_NORMALIZENORMALS = 0x8F,D3DRS_DIFFUSEMATERIALSOURCE = 0x91,D3DRS_SPECULARMATERIALSOURCE = 0x92,D3DRS_AMBIENTMATERIALSOURCE = 0x93,D3DRS_EMISSIVEMATERIALSOURCE = 0x94,D3DRS_VERTEXBLEND = 0x97,D3DRS_CLIPPLANEENABLE = 0x98,D3DRS_SOFTWAREVERTEXPROCESSING = 0x99,D3DRS_POINTSIZE = 0x9A,D3DRS_POINTSIZE_MIN = 0x9B,D3DRS_POINTSPRITEENABLE = 0x9C,D3DRS_POINTSCALEENABLE = 0x9D,D3DRS_POINTSCALE_A = 0x9E,D3DRS_POINTSCALE_B = 0x9F,D3DRS_POINTSCALE_C = 0xA0,D3DRS_MULTISAMPLEANTIALIAS = 0xA1,D3DRS_MULTISAMPLEMASK = 0xA2,D3DRS_PATCHEDGESTYLE = 0xA3,D3DRS_PATCHSEGMENTS = 0xA4,D3DRS_DEBUGMONITORTOKEN = 0xA5,D3DRS_POINTSIZE_MAX = 0xA6,D3DRS_INDEXEDVERTEXBLENDENABLE = 0xA7,D3DRS_COLORWRITEENABLE = 0xA8,D3DRS_TWEENFACTOR = 0xAA,D3DRS_BLENDOP = 0xAB,D3DRS_POSITIONORDER = 0xAC,D3DRS_NORMALORDER = 0xAD,D3D_MAXRENDERSTATES = 0xAE,D3DRS_FORCE_DWORD = 0x7FFFFFFF,};
enum _DEVICE_POWER_STATE {PowerDeviceUnspecified = 0x0,PowerDeviceD0 = 0x1,PowerDeviceD1 = 0x2,PowerDeviceD2 = 0x3,PowerDeviceD3 = 0x4,PowerDeviceMaximum = 0x5,};
enum _DMO_SET_TYPE_FLAGS {DMO_SET_TYPEF_TEST_ONLY = 0x1,DMO_SET_TYPEF_CLEAR = 0x2,};
enum _DOT11_OFFLOAD_TYPE {dot11_offload_type_wep = 0x1,dot11_offload_type_auth = 0x2,};
enum _DOT11_UPDATE_IE_OP {dot11_update_ie_op_create_replace = 0x1,dot11_update_ie_op_delete = 0x2,};
enum _FILTER_DRAW_LAYERS {FILTER_DRAW_BORDER = 0x1,FILTER_DRAW_BACKGROUND = 0x2,FILTER_DRAW_CONTENT = 0x4,FILTER_DRAW_ALLLAYERS = 0x7,FILTER_DRAW_LAYERS_Max = 0x7FFFFFFF,};
enum _FINDEX_INFO_LEVELS {FindExInfoStandard = 0x0,FindExInfoMaxInfoLevel = 0x1,};
enum _JOBOBJECTINFOCLASS {JobObjectBasicAccountingInformation = 0x1,JobObjectBasicLimitInformation = 0x2,JobObjectBasicProcessIdList = 0x3,JobObjectBasicUIRestrictions = 0x4,JobObjectSecurityLimitInformation = 0x5,JobObjectEndOfJobTimeInformation = 0x6,JobObjectAssociateCompletionPortInformation = 0x7,MaxJobObjectInfoClass = 0x8,};
struct _MIDL_FORMAT_STRING {short Pad;unsigned char Format[];};
enum _SYSTEM_POWER_STATE {PowerSystemUnspecified = 0x0,PowerSystemWorking = 0x1,PowerSystemSleeping1 = 0x2,PowerSystemSleeping2 = 0x3,PowerSystemSleeping3 = 0x4,PowerSystemHibernate = 0x5,PowerSystemShutdown = 0x6,PowerSystemMaximum = 0x7,};
enum _styleListStyleType {styleListStyleTypeNotSet = 0x0,styleListStyleTypeDisc = 0x1,styleListStyleTypeCircle = 0x2,styleListStyleTypeSquare = 0x3,styleListStyleTypeDecimal = 0x4,styleListStyleTypeLowerRoman = 0x5,styleListStyleTypeUpperRoman = 0x6,styleListStyleTypeLowerAlpha = 0x7,styleListStyleTypeUpperAlpha = 0x8,styleListStyleTypeNone = 0x9,styleListStyleType_Max = 0x7FFFFFFF,};
enum _styleTextAlignLast {styleTextAlignLastNotSet = 0x0,styleTextAlignLastLeft = 0x1,styleTextAlignLastCenter = 0x2,styleTextAlignLastRight = 0x3,styleTextAlignLastJustify = 0x4,styleTextAlignLastAuto = 0x5,styleTextAlignLast_Max = 0x7FFFFFFF,};
enum _styleTextTransform {styleTextTransformNotSet = 0x0,styleTextTransformCapitalize = 0x1,styleTextTransformLowercase = 0x2,styleTextTransformUppercase = 0x3,styleTextTransformNone = 0x4,styleTextTransform_Max = 0x7FFFFFFF,};
enum _styleVerticalAlign {styleVerticalAlignAuto = 0x0,styleVerticalAlignBaseline = 0x1,styleVerticalAlignSub = 0x2,styleVerticalAlignSuper = 0x3,styleVerticalAlignTop = 0x4,styleVerticalAlignTextTop = 0x5,styleVerticalAlignMiddle = 0x6,styleVerticalAlignBottom = 0x7,styleVerticalAlignTextBottom = 0x8,styleVerticalAlignInherit = 0x9,styleVerticalAlignNotSet = 0xA,styleVerticalAlign_Max = 0x7FFFFFFF,};
enum _tagSYNCMGRLOGLEVEL {SYNCMGRLOGLEVEL_INFORMATION = 0x1,SYNCMGRLOGLEVEL_WARNING = 0x2,SYNCMGRLOGLEVEL_ERROR = 0x3,};
typedef struct tagDetectEncodingInfo *pDetectEncodingInfo;
enum tagAMTunerEventType {AMTUNER_EVENT_CHANGED = 0x1,};
enum tagDVD_AUDIO_FORMAT {DVD_AudioFormat_AC3 = 0x0,DVD_AudioFormat_MPEG1 = 0x1,DVD_AudioFormat_MPEG1_DRC = 0x2,DVD_AudioFormat_MPEG2 = 0x3,DVD_AudioFormat_MPEG2_DRC = 0x4,DVD_AudioFormat_LPCM = 0x5,DVD_AudioFormat_DTS = 0x6,DVD_AudioFormat_SDDS = 0x7,DVD_AudioFormat_Other = 0x8,};
enum tagHEADERTABLEFLAGS {HTF_NAMEINDATA = 0x1,HTF_ENUMHANDLESONLY = 0x2,};
struct tagHTTPMAILPROPFIND {IPropFindMultiResponse *pMultiResponse;};
enum tagHTTPMAILPROPTYPE {HTTPMAIL_PROP_INVALID = 0x0,HTTPMAIL_PROP_ADBAR = 0x1,HTTPMAIL_PROP_CONTACTS = 0x2,HTTPMAIL_PROP_INBOX = 0x3,HTTPMAIL_PROP_OUTBOX = 0x4,HTTPMAIL_PROP_SENDMSG = 0x5,HTTPMAIL_PROP_SENTITEMS = 0x6,HTTPMAIL_PROP_DELETEDITEMS = 0x7,HTTPMAIL_PROP_DRAFTS = 0x8,HTTPMAIL_PROP_MSGFOLDERROOT = 0x9,HTTPMAIL_PROP_SIG = 0xA,HTTPMAIL_PROP_LAST = 0xB,};
enum tagNETCON_MEDIATYPE {NCM_NONE = 0x0,NCM_DIRECT = 0x1,NCM_ISDN = 0x2,NCM_LAN = 0x3,NCM_PHONE = 0x4,NCM_TUNNEL = 0x5,};
enum tagQACONTAINERFLAGS {QACONTAINER_SHOWHATCHING = 0x1,QACONTAINER_SHOWGRABHANDLES = 0x2,QACONTAINER_USERMODE = 0x4,QACONTAINER_DISPLAYASDEFAULT = 0x8,QACONTAINER_UIDEAD = 0x10,QACONTAINER_AUTOCLIP = 0x20,QACONTAINER_MESSAGEREFLECT = 0x40,QACONTAINER_SUPPORTSMNEMONICS = 0x80,};
struct tag_s_RIFFWAVE_INST;
typedef struct _463E06C868FD59B527DBF787F8EA20AA AALUSER_PARAMETERS;
typedef struct _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
typedef struct tACMDRVSTREAMHEADER ACMDRVSTREAMHEADER;
typedef struct _ACTRL_ACCESS_INFOA ACTRL_ACCESS_INFOA;
typedef struct _ACTRL_ACCESS_INFOW ACTRL_ACCESS_INFOW;
struct AMMultiMediaStream;
typedef struct _AM_DVDCOPY_CHLGKEY AM_DVDCOPY_CHLGKEY;
typedef struct _AM_DVDCOPY_DISCKEY AM_DVDCOPY_DISCKEY;
typedef struct _D63E714A239F9C0D1FE2D222C2E0E7D5 AM_ExactRateChange;
typedef struct _avitcdlindex_entry AVITCDLINDEX_ENTRY;
typedef struct _BTH_REMOTE_VERSION BTH_REMOTE_VERSION;
typedef struct _CARD_SOCKET_HANDLE CARD_SOCKET_HANDLE;
typedef struct _CEL_MONTECARLO_HIT CEL_MONTECARLO_HIT;
typedef struct __CEL_PROCESS_CREATE CEL_PROCESS_CREATE;
typedef struct __CEL_PROCESS_DELETE CEL_PROCESS_DELETE;
typedef ProfilerControl CEL_PROFILER_START;
typedef struct __CEL_THREAD_MIGRATE CEL_THREAD_MIGRATE;
typedef struct __CEL_THREAD_QUANTUM CEL_THREAD_QUANTUM;
typedef struct __CEL_THREAD_SUSPEND CEL_THREAD_SUSPEND;
typedef struct _CERT_ALT_NAME_INFO CERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT CERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS CERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO CERT_POLICIES_INFO;
typedef struct tagCInterfaceStubVtbl CInterfaceStubVtbl;
typedef union _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
typedef struct _CMC_TAGGED_REQUEST CMC_TAGGED_REQUEST;
typedef struct _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
typedef struct tagCONTENTRESTRICTION CONTENTRESTRICTION;
typedef struct _CRYPT_CONTENT_INFO CRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER CRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB;
typedef struct _CRYPT_PROVUI_FUNCS CRYPT_PROVUI_FUNCS;
enum DBCOMMANDREUSEENUM {DBCOMMANDREUSE_NONE = 0x0,DBCOMMANDREUSE_PROPERTIES = 0x1,DBCOMMANDREUSE_PARAMETERS = 0x2,};
enum DBCOMPAREOPSENUM20 {DBCOMPAREOPS_NOTBEGINSWITH = 0x9,DBCOMPAREOPS_NOTCONTAINS = 0xA,};
typedef struct tagDBCONTENTPROXIMITY DBCONTENTPROXIMITY;
enum DBCONVERTFLAGSENUM {DBCONVERTFLAGS_COLUMN = 0x0,DBCONVERTFLAGS_PARAMETER = 0x1,};
enum DBPARAMFLAGSENUM20 {DBPARAMFLAGS_SCALEISNEGATIVE = 0x100,};
enum DBPROPSTATUSENUM21 {DBPROPSTATUS_NOTAVAILABLE = 0x9,};
typedef struct tagDBRELEVANTDOCUMENT DBRELEVANTDOCUMENT;
enum DBRESOURCEKINDENUM {DBRESOURCE_INVALID = 0x0,DBRESOURCE_TOTAL = 0x1,DBRESOURCE_CPU = 0x2,DBRESOURCE_MEMORY = 0x3,DBRESOURCE_DISK = 0x4,DBRESOURCE_NETWORK = 0x5,DBRESOURCE_RESPONSE = 0x6,DBRESOURCE_ROWS = 0x7,DBRESOURCE_OTHER = 0x8,};
enum DBSOURCETYPEENUM20 {DBSOURCETYPE_DATASOURCE_TDP = 0x1,DBSOURCETYPE_DATASOURCE_MDP = 0x3,};
enum DBSOURCETYPEENUM25 {DBSOURCETYPE_BINDER = 0x4,};
typedef struct tagDDDEVICEIDENTIFIER DDDEVICEIDENTIFIER;
typedef struct _DDVIDEOPORTCONNECT DDVIDEOPORTCONNECT;
typedef struct _DEVICE_DESCRIPTION DEVICE_DESCRIPTION;
typedef struct digirealwaveformat_tag DIGIREALWAVEFORMAT;
typedef struct _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;
typedef struct _DMA_ADAPTER_OBJECT_ DMA_ADAPTER_OBJECT;
enum DMO_REGISTER_FLAGS {DMO_REGISTERF_IS_KEYED = 0x1,};
typedef struct dolbyac2waveformat_tag DOLBYAC2WAVEFORMAT;
typedef struct _DOT11_8021X_FILTER DOT11_8021X_FILTER;
typedef struct _DOT11_ANTENNA_LIST DOT11_ANTENNA_LIST;
typedef struct _DOT11_IV48_COUNTER DOT11_IV48_COUNTER;
typedef struct _DOT11_JOIN_REQUEST DOT11_JOIN_REQUEST;
typedef struct _DOT11_SCAN_REQUEST DOT11_SCAN_REQUEST;
typedef struct _DOT11_WEP_KEY_DATA DOT11_WEP_KEY_DATA;
enum DVDMenuIDConstants {dvdMenu_Title = 0x2,dvdMenu_Root = 0x3,dvdMenu_Subpicture = 0x4,dvdMenu_Audio = 0x5,dvdMenu_Angle = 0x6,dvdMenu_Chapter = 0x7,};
typedef struct tagDVD_MUA_MixingInfo DVD_MUA_MixingInfo;
typedef struct tagDVD_MenuAttributes DVD_MenuAttributes;
typedef struct _structDVD_TITLE_SET_INFO DVD_TITLE_SET_INFO;
enum DVD_TextStringType {DVD_Struct_Volume = 0x1,DVD_Struct_Title = 0x2,DVD_Struct_ParentalID = 0x3,DVD_Struct_PartOfTitle = 0x4,DVD_Struct_Cell = 0x5,DVD_Stream_Audio = 0x10,DVD_Stream_Subpicture = 0x11,DVD_Stream_Angle = 0x12,DVD_Channel_Audio = 0x20,DVD_General_Name = 0x30,DVD_General_Comments = 0x31,DVD_Title_Series = 0x38,DVD_Title_Movie = 0x39,DVD_Title_Video = 0x3A,DVD_Title_Album = 0x3B,DVD_Title_Song = 0x3C,DVD_Title_Other = 0x3F,DVD_Title_Sub_Series = 0x40,DVD_Title_Sub_Movie = 0x41,DVD_Title_Sub_Video = 0x42,DVD_Title_Sub_Album = 0x43,DVD_Title_Sub_Song = 0x44,DVD_Title_Sub_Other = 0x47,DVD_Title_Orig_Series = 0x48,DVD_Title_Orig_Movie = 0x49,DVD_Title_Orig_Video = 0x4A,DVD_Title_Orig_Album = 0x4B,DVD_Title_Orig_Song = 0x4C,DVD_Title_Orig_Other = 0x4F,DVD_Other_Scene = 0x50,DVD_Other_Cut = 0x51,DVD_Other_Take = 0x52,};
typedef struct dvi_adpcmwaveformat_tag DVIADPCMWAVEFORMAT;
struct DWebBrowserEvents2 {struct DWebBrowserEvents2Vtbl *lpVtbl;};
enum DXSAMPLEFORMATENUM {DXPF_FLAGSMASK = 0xFFFF0000,DXPF_NONPREMULT = 0x10000,DXPF_TRANSPARENCY = 0x20000,DXPF_TRANSLUCENCY = 0x40000,DXPF_2BITERROR = 0x200000,DXPF_3BITERROR = 0x300000,DXPF_4BITERROR = 0x400000,DXPF_5BITERROR = 0x500000,DXPF_ERRORMASK = 0x700000,DXPF_NONSTANDARD = 0x0,DXPF_PMARGB32 = 0x60001,DXPF_ARGB32 = 0x70002,DXPF_ARGB4444 = 0x470003,DXPF_A8 = 0x60004,DXPF_RGB32 = 0x5,DXPF_RGB24 = 0x6,DXPF_RGB565 = 0x300007,DXPF_RGB555 = 0x300008,DXPF_RGB8 = 0x500009,DXPF_ARGB1555 = 0x32000A,DXPF_RGB32_CK = 0x20005,DXPF_RGB24_CK = 0x20006,DXPF_RGB555_CK = 0x320008,DXPF_RGB565_CK = 0x320007,DXPF_RGB8_CK = 0x520009,};
struct DXTransformFactory;
typedef struct tagDetectEncodingInfo DetectEncodingInfo;
struct DispHTMLDivElement {struct DispHTMLDivElementVtbl *lpVtbl;};
struct DispHTMLMapElement {struct DispHTMLMapElementVtbl *lpVtbl;};
struct DispHTMLStyleSheet {struct DispHTMLStyleSheetVtbl *lpVtbl;};
typedef struct _ERROR_NOTIFICATION ERROR_NOTIFICATION;
typedef struct _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef struct _25388EDDA6F9AFF912B25CA06CA16E0D EXP_SPECIAL_FOLDER;
struct EnumWSDLOperations;
typedef struct _EXCEPTION_POINTERS *Exception_info_ptr;
typedef struct _HSE_URL_MAPEX_INFO HSE_URL_MAPEX_INFO;
struct HTCDefaultDispatch;
struct HTMLCommentElement;
struct HTMLDocumentEvents {struct HTMLDocumentEventsVtbl *lpVtbl;};
struct HTMLElementEvents2 {struct HTMLElementEvents2Vtbl *lpVtbl;};
struct HTMLGenericElement;
struct HTMLIsIndexElement;
struct HTMLMarqueeElement;
typedef struct _HTMLPtrDispInfoRec HTMLPtrDispInfoRec;
struct HTMLStyleSheetPage;
struct HTMLStyleSheetRule;
struct HTMLUnknownElement;
typedef struct tagHTTPMEMBERINFOLIST HTTPMEMBERINFOLIST;
struct IAMExtendedSeeking {struct IAMExtendedSeekingVtbl *lpVtbl;};
struct IAMFilterMiscFlags {struct IAMFilterMiscFlagsVtbl *lpVtbl;};
struct IAMMediaTypeSample {struct IAMMediaTypeSampleVtbl *lpVtbl;};
struct IAMMediaTypeStream {struct IAMMediaTypeStreamVtbl *lpVtbl;};
struct IAMPhysicalPinInfo {struct IAMPhysicalPinInfoVtbl *lpVtbl;};
struct IAMResourceControl {struct IAMResourceControlVtbl *lpVtbl;};
struct IAMTimecodeDisplay {struct IAMTimecodeDisplayVtbl *lpVtbl;};
struct IAccessibleHandler {struct IAccessibleHandlerVtbl *lpVtbl;};
struct IActiveScriptError {struct IActiveScriptErrorVtbl *lpVtbl;};
struct IActiveScriptParse {struct IActiveScriptParseVtbl *lpVtbl;};
struct IActiveScriptStats {struct IActiveScriptStatsVtbl *lpVtbl;};
struct IAnimationComposer {struct IAnimationComposerVtbl *lpVtbl;};
struct IAnimationFragment {struct IAnimationFragmentVtbl *lpVtbl;};
struct IAudioStreamSample {struct IAudioStreamSampleVtbl *lpVtbl;};
struct ICSSFilterDispatch {struct ICSSFilterDispatchVtbl *lpVtbl;};
struct ICommandProperties {struct ICommandPropertiesVtbl *lpVtbl;};
struct IDBDataSourceAdmin {struct IDBDataSourceAdminVtbl *lpVtbl;};
struct IDMOQualityControl {struct IDMOQualityControlVtbl *lpVtbl;};
struct IDVDDataSearchInfo {struct IDVDDataSearchInfoVtbl *lpVtbl;};
struct IDXARGBSurfaceInit {struct IDXARGBSurfaceInitVtbl *lpVtbl;};
struct IDXSurfaceModifier {struct IDXSurfaceModifierVtbl *lpVtbl;};
struct IDXTFilterBehavior {struct IDXTFilterBehaviorVtbl *lpVtbl;};
struct IDirect3DResource8 {struct IDirect3DResource8Vtbl *lpVtbl;};
struct IDirectControlView {struct IDirectControlViewVtbl *lpVtbl;};
struct IDirectDrawClipper {struct IDirectDrawClipperVtbl *lpVtbl;};
struct IDirectDrawPalette {struct IDirectDrawPaletteVtbl *lpVtbl;};
struct IDirectDrawSurface {struct IDirectDrawSurfaceVtbl *lpVtbl;};
struct IDirectSoundBuffer {struct IDirectSoundBufferVtbl *lpVtbl;};
struct IDirectSoundNotify {struct IDirectSoundNotifyVtbl *lpVtbl;};
struct IDistributorNotify {struct IDistributorNotifyVtbl *lpVtbl;};
struct IDocHostUIHandler2 {struct IDocHostUIHandler2Vtbl *lpVtbl;};
struct IDockingWindowSite {struct IDockingWindowSiteVtbl *lpVtbl;};
struct IEditDebugServices {struct IEditDebugServicesVtbl *lpVtbl;};
struct IElementBehaviorUI {struct IElementBehaviorUIVtbl *lpVtbl;};
struct IEmptyVolumeCache2 {struct IEmptyVolumeCache2Vtbl *lpVtbl;};
struct IEnumCifComponents {struct IEnumCifComponentsVtbl *lpVtbl;};
struct IEnumDVD_TEXT_ITEM {struct IEnumDVD_TEXT_ITEMVtbl *lpVtbl;};
struct IEnumInstalledApps {struct IEnumInstalledAppsVtbl *lpVtbl;};
struct IEnumNetConnection {struct IEnumNetConnectionVtbl *lpVtbl;};
struct IEnumPublishedApps {struct IEnumPublishedAppsVtbl *lpVtbl;};
struct IEnumRegisterWordA {struct IEnumRegisterWordAVtbl *lpVtbl;};
struct IEnumRegisterWordW {struct IEnumRegisterWordWVtbl *lpVtbl;};
struct IEnumScheduleGroup {struct IEnumScheduleGroupVtbl *lpVtbl;};
struct IEnumSyncSchedules {struct IEnumSyncSchedulesVtbl *lpVtbl;};
struct IExtensionServices {struct IExtensionServicesVtbl *lpVtbl;};
struct IFullScreenVideoEx {struct IFullScreenVideoExVtbl *lpVtbl;};
struct IHTCAttachBehavior {struct IHTCAttachBehaviorVtbl *lpVtbl;};
struct IHTCMethodBehavior {struct IHTCMethodBehaviorVtbl *lpVtbl;};
struct IHTMLAnchorElement {struct IHTMLAnchorElementVtbl *lpVtbl;};
struct IHTMLBlockElement2 {struct IHTMLBlockElement2Vtbl *lpVtbl;};
struct IHTMLButtonElement {struct IHTMLButtonElementVtbl *lpVtbl;};
struct IHTMLComputedStyle {struct IHTMLComputedStyleVtbl *lpVtbl;};
struct IHTMLControlRange2 {struct IHTMLControlRange2Vtbl *lpVtbl;};
struct IHTMLCurrentStyle2 {struct IHTMLCurrentStyle2Vtbl *lpVtbl;};
struct IHTMLCurrentStyle3 {struct IHTMLCurrentStyle3Vtbl *lpVtbl;};
struct IHTMLDOMAttribute2 {struct IHTMLDOMAttribute2Vtbl *lpVtbl;};
struct IHTMLEditServices2 {struct IHTMLEditServices2Vtbl *lpVtbl;};
struct IHTMLElementRender {struct IHTMLElementRenderVtbl *lpVtbl;};
struct IHTMLFilterPainter {struct IHTMLFilterPainterVtbl *lpVtbl;};
struct IHTMLFrameElement2 {struct IHTMLFrameElement2Vtbl *lpVtbl;};
struct IHTMLHeaderElement {struct IHTMLHeaderElementVtbl *lpVtbl;};
struct IHTMLIFrameElement {struct IHTMLIFrameElementVtbl *lpVtbl;};
struct IHTMLInputElement2 {struct IHTMLInputElement2Vtbl *lpVtbl;};
struct IHTMLLabelElement2 {struct IHTMLLabelElement2Vtbl *lpVtbl;};
struct IHTMLLegendElement {struct IHTMLLegendElementVtbl *lpVtbl;};
struct IHTMLNextIdElement {struct IHTMLNextIdElementVtbl *lpVtbl;};
struct IHTMLNoShowElement {struct IHTMLNoShowElementVtbl *lpVtbl;};
struct IHTMLObjectElement {struct IHTMLObjectElementVtbl *lpVtbl;};
struct IHTMLOptionElement {struct IHTMLOptionElementVtbl *lpVtbl;};
struct IHTMLOptionsHolder {struct IHTMLOptionsHolderVtbl *lpVtbl;};
struct IHTMLPersistDataOM {struct IHTMLPersistDataOMVtbl *lpVtbl;};
struct IHTMLPhraseElement {struct IHTMLPhraseElementVtbl *lpVtbl;};
struct IHTMLPrivateWindow {struct IHTMLPrivateWindowVtbl *lpVtbl;};
struct IHTMLScriptElement {struct IHTMLScriptElementVtbl *lpVtbl;};
struct IHTMLSelectElement {struct IHTMLSelectElementVtbl *lpVtbl;};
struct IHTMLStyleFontFace {struct IHTMLStyleFontFaceVtbl *lpVtbl;};
struct IHTMLTableSection2 {struct IHTMLTableSection2Vtbl *lpVtbl;};
struct IHTMLTableSection3 {struct IHTMLTableSection3Vtbl *lpVtbl;};
struct IHTMLTextContainer {struct IHTMLTextContainerVtbl *lpVtbl;};
struct IHTMLUrnCollection {struct IHTMLUrnCollectionVtbl *lpVtbl;};
struct IHTTPMailTransport {struct IHTTPMailTransportVtbl *lpVtbl;};
struct IHtmlDlgSafeHelper {struct IHtmlDlgSafeHelperVtbl *lpVtbl;};
struct IImageDecodeFilter {struct IImageDecodeFilterVtbl *lpVtbl;};
struct IImnAccountManager {struct IImnAccountManagerVtbl *lpVtbl;};
struct IInternetTransport {struct IInternetTransportVtbl *lpVtbl;};
typedef struct ima_adpcmwaveformat_tag IMAADPCMWAVEFORMAT;
typedef struct _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
typedef struct _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef struct _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
typedef union tagIMAP_RESPONSE_DATA IMAP_RESPONSE_DATA;
enum IMPORT_OBJECT_TYPE {IMPORT_OBJECT_CODE = 0x0,IMPORT_OBJECT_DATA = 0x1,IMPORT_OBJECT_CONST = 0x2,};
struct IMediaParamsRecord {struct IMediaParamsRecordVtbl *lpVtbl;};
struct IMediaStreamFilter {struct IMediaStreamFilterVtbl *lpVtbl;};
struct IMessengerIMWindow {struct IMessengerIMWindowVtbl *lpVtbl;};
struct IMimeInternational {struct IMimeInternationalVtbl *lpVtbl;};
struct INetCfgBindingPath {struct INetCfgBindingPathVtbl *lpVtbl;};
struct INewMenuItemServer {struct INewMenuItemServerVtbl *lpVtbl;};
struct IOleParentUndoUnit {struct IOleParentUndoUnitVtbl *lpVtbl;};
struct IPersistStreamInit {struct IPersistStreamInitVtbl *lpVtbl;};
struct IPropertyContainer {struct IPropertyContainerVtbl *lpVtbl;};
struct IProvideClassInfo2 {struct IProvideClassInfo2Vtbl *lpVtbl;};
struct IQueryAssociations {struct IQueryAssociationsVtbl *lpVtbl;};
struct IRTCClientPresence {struct IRTCClientPresenceVtbl *lpVtbl;};
struct IRTCIntensityEvent {struct IRTCIntensityEventVtbl *lpVtbl;};
struct IRTCMessagingEvent {struct IRTCMessagingEventVtbl *lpVtbl;};
struct IRTCPresenceDevice {struct IRTCPresenceDeviceVtbl *lpVtbl;};
struct IRequestDictionary {struct IRequestDictionaryVtbl *lpVtbl;};
struct IRowPositionChange {struct IRowPositionChangeVtbl *lpVtbl;};
struct IRowsetExactScroll;
struct IRowsetNewRowAfter {struct IRowsetNewRowAfterVtbl *lpVtbl;};
struct IRowsetQueryStatus {struct IRowsetQueryStatusVtbl *lpVtbl;};
struct IRowsetWatchNotify {struct IRowsetWatchNotifyVtbl *lpVtbl;};
struct IRowsetWatchRegion {struct IRowsetWatchRegionVtbl *lpVtbl;};
struct IRpcChannelBuffer2 {struct IRpcChannelBuffer2Vtbl *lpVtbl;};
struct ISAXContentHandler {struct ISAXContentHandlerVtbl *lpVtbl;};
struct ISAXEntityResolver {struct ISAXEntityResolverVtbl *lpVtbl;};
struct ISAXLexicalHandler {struct ISAXLexicalHandlerVtbl *lpVtbl;};
struct ISOAPIsapiResponse {struct ISOAPIsapiResponseVtbl *lpVtbl;};
struct IScheduledWorkItem {struct IScheduledWorkItemVtbl *lpVtbl;};
struct ISearchAssistantOC {struct ISearchAssistantOCVtbl *lpVtbl;};
struct ISelectionServices {struct ISelectionServicesVtbl *lpVtbl;};
struct ISessionProperties {struct ISessionPropertiesVtbl *lpVtbl;};
struct IShellChangeNotify {struct IShellChangeNotifyVtbl *lpVtbl;};
struct IShellExecuteHookA {struct IShellExecuteHookAVtbl *lpVtbl;};
struct IShellExecuteHookW {struct IShellExecuteHookWVtbl *lpVtbl;};
struct IShellLinkDataList {struct IShellLinkDataListVtbl *lpVtbl;};
struct IShellPropSheetExt {struct IShellPropSheetExtVtbl *lpVtbl;};
struct IStorageDescriptor {struct IStorageDescriptorVtbl *lpVtbl;};
struct ITransProtocolSink {struct ITransProtocolSinkVtbl *lpVtbl;};
struct ITransactionCloner {struct ITransactionClonerVtbl *lpVtbl;};
struct ITransactionObject {struct ITransactionObjectVtbl *lpVtbl;};
struct ITransportCallback {struct ITransportCallbackVtbl *lpVtbl;};
struct ITrusteeGroupAdmin {struct ITrusteeGroupAdminVtbl *lpVtbl;};
struct IUPnPDeviceControl {struct IUPnPDeviceControlVtbl *lpVtbl;};
struct IVBSAXErrorHandler {struct IVBSAXErrorHandlerVtbl *lpVtbl;};
struct IVariantChangeType {struct IVariantChangeTypeVtbl *lpVtbl;};
struct IVoIPCallLogDBEnum {struct IVoIPCallLogDBEnumVtbl *lpVtbl;};
struct IWebViewFolderIcon {struct IWebViewFolderIconVtbl *lpVtbl;};
typedef struct tACMDRIVERDETAILS *LPACMDRIVERDETAILS;
typedef struct tACMDRVSTREAMSIZE *LPACMDRVSTREAMSIZE;
typedef struct tACMFILTERDETAILS *LPACMFILTERDETAILS;
typedef struct tACMFORMATDETAILS *LPACMFORMATDETAILS;
typedef struct tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;
typedef struct _tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;
typedef IContinueCallback *LPCONTINUECALLBACK;
typedef struct CRITICAL_SECTION *LPCRITICAL_SECTION;
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct tagDATABLOCKHEADER *LPDATABLOCK_HEADER;
typedef struct tagDELETITEMSTRUCT *LPDELETEITEMSTRUCT;
typedef struct IDirect3DSurface8 *LPDIRECT3DSURFACE8;
typedef struct IDirect3DTexture8 *LPDIRECT3DTEXTURE8;
typedef struct _9BDEEC9D290208213B3D235A4099D9F6 *LPDSQUERYCLASSLIST;
typedef IEmptyVolumeCache *LPEMPTYVOLUMECACHE;
typedef IEnumCATEGORYINFO *LPENUMCATEGORYINFO;
typedef IEnumNotification *LPENUMNOTIFICATION;
typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;
typedef IEnumSubscription *LPENUMSUBSCRIPTION;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
typedef struct _HSE_VERSION_INFO *LPHSE_VERSION_INFO;
typedef struct tagHTTPMAILLOCATION *LPHTTPMAILLOCATION;
typedef struct tagHTTPMAILPROPFIND *LPHTTPMAILPROPFIND;
typedef struct tagHTTPMAILRESPONSE *LPHTTPMAILRESPONSE;
typedef IInternetSession *LPIINTERNETSESSION;
typedef struct tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;
typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL;
typedef struct linecountryentry_tag *LPLINECOUNTRYENTRY;
typedef struct linegeneratetone_tag *LPLINEGENERATETONE;
typedef struct lineproviderlist_tag *LPLINEPROVIDERLIST;
typedef IMediaPropertyBag *LPMEDIAPROPERTYBAG;
typedef IMimeAddressTable *LPMIMEADDRESSTABLE;
typedef IMimeMessageParts *LPMIMEMESSAGEPARTS;
typedef struct tagNMDATETIMECHANGE *LPNMDATETIMECHANGE;
typedef INotificationSink *LPNOTIFICATIONSINK;
typedef struct _A5A2C297D512B29747AD9A814A819610 *LPNT_CONSOLE_PROPS;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef IOleCommandTarget *LPOLECOMMANDTARGET;
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
typedef struct phoneextensionid_tag *LPPHONEEXTENSIONID;
typedef IPropertyPageSite *LPPROPERTYPAGESITE;
typedef struct _PROPSHEETHEADERA *LPPROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW *LPPROPSHEETHEADERW;
typedef IProvideClassInfo *LPPROVIDECLASSINFO;
typedef struct _QOS_SHAPING_RATE *LPQOS_SHAPING_RATE;
typedef struct _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 *LPSCARD_T0_COMMAND;
typedef struct _SHELLEXECUTEINFO *LPSHELLEXECUTEINFO;
typedef struct sockaddr_storage *LPSOCKADDR_STORAGE;
typedef struct _SSLSIGNATUREHOOK *LPSSLSIGNATUREHOOK;
typedef struct _tagSubscriptionInfo *LPSUBSCRIPTIONINFO;
typedef ISubscriptionItem *LPSUBSCRIPTIONITEM;
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef ISyncMgrEnumItems *LPSYNCMGRENUMITEMS;
typedef IThumbnailCapture *LPTHUMBNAILCAPTURE;
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef IUrlHistoryNotify *LPURLHISTORYNOTIFY;
typedef struct _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS *LPWSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN *LPWSAPROTOCOLCHAIN;
enum MACRO_ABORTINSTALL {ABORTINSTALL_NORMAL = 0,ABORTINSTALL_IMMEADIATE = 1,};
enum MACRO_ACMDM_DRIVER {ACMDM_DRIVER_NOTIFY = 24577,ACMDM_DRIVER_DETAILS = 24586,ACMDM_HARDWARE_WAVE_CAPS_INPUT = 24596,ACMDM_HARDWARE_WAVE_CAPS_OUTPUT = 24597,ACMDM_FORMATTAG_DETAILS = 24601,ACMDM_FORMAT_DETAILS = 24602,ACMDM_FORMAT_SUGGEST = 24603,ACMDM_FILTERTAG_DETAILS = 24626,ACMDM_FILTER_DETAILS = 24627,ACMDM_STREAM_OPEN = 24652,ACMDM_STREAM_CLOSE = 24653,ACMDM_STREAM_SIZE = 24654,ACMDM_STREAM_CONVERT = 24655,ACMDM_STREAM_RESET = 24656,ACMDM_STREAM_PREPARE = 24657,ACMDM_STREAM_UNPREPARE = 24658,ACMDM_STREAM_UPDATE = 24659,};
enum MACRO_ACTIVEOBJECT {ACTIVEOBJECT_STRONG = 0x0,ACTIVEOBJECT_WEAK = 0x1,};
enum MACRO_BI_BITFIELDS {BI_BITFIELDS = 3,BI_ALPHABITFIELDS = 6,};
enum MACRO_CCH_IDENTITY {CCH_IDENTITY_NAME_MAX_LENGTH = 63,};
enum MACRO_CDN_INITDONE {CDN_INITDONE = 0xFFFFFDA7,CDN_SELCHANGE = 0xFFFFFDA6,CDN_FOLDERCHANGE = 0xFFFFFDA5,CDN_SHAREVIOLATION = 0xFFFFFDA4,CDN_HELP = 0xFFFFFDA3,CDN_FILEOK = 0xFFFFFDA2,CDN_TYPECHANGE = 0xFFFFFDA1,};
enum MACRO_CERT_REQUEST {CERT_REQUEST_V1 = 0,CERT_KEYGEN_REQUEST_V1 = 0,};
enum MACRO_CERT_UNICODE {CERT_UNICODE_RDN_ERR_INDEX_MASK = 0x3FF,CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 0x16,CERT_UNICODE_ATTR_ERR_INDEX_MASK = 0x3F,CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 0x10,CERT_UNICODE_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_DIGITAL_SIGNATURE_KEY_USAGE = 0x80,CERT_NON_REPUDIATION_KEY_USAGE = 0x40,CERT_KEY_ENCIPHERMENT_KEY_USAGE = 0x20,CERT_DATA_ENCIPHERMENT_KEY_USAGE = 0x10,CERT_KEY_AGREEMENT_KEY_USAGE = 0x8,CERT_KEY_CERT_SIGN_KEY_USAGE = 0x4,CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 0x2,CERT_CRL_SIGN_KEY_USAGE = 0x2,CERT_ENCIPHER_ONLY_KEY_USAGE = 0x1,CERT_DECIPHER_ONLY_KEY_USAGE = 0x80,CERT_ALT_NAME_OTHER_NAME = 0x1,CERT_ALT_NAME_RFC822_NAME = 0x2,CERT_ALT_NAME_DNS_NAME = 0x3,CERT_ALT_NAME_X400_ADDRESS = 0x4,CERT_ALT_NAME_DIRECTORY_NAME = 0x5,CERT_ALT_NAME_EDI_PARTY_NAME = 0x6,CERT_ALT_NAME_URL = 0x7,CERT_ALT_NAME_IP_ADDRESS = 0x8,CERT_ALT_NAME_REGISTERED_ID = 0x9,CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 0xFF,CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 0x10,CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_CA_SUBJECT_FLAG = 0x80,CERT_END_ENTITY_SUBJECT_FLAG = 0x40,};
enum MACRO_CLASSFACTORY {CLASSFACTORY_E_FIRST = 0x80040110,CLASSFACTORY_E_LAST = 0x8004011F,CLASSFACTORY_S_FIRST = 0x40110,CLASSFACTORY_S_LAST = 0x4011F,};
enum MACRO_CMSG_TRUSTED {CMSG_TRUSTED_SIGNER_FLAG = 0x1,CMSG_SIGNER_ONLY_FLAG = 0x2,CMSG_USE_SIGNER_INDEX_FLAG = 0x4,CMSG_CMS_ENCAPSULATED_CTL_FLAG = 0x8000,CMSG_ENCODE_SORTED_CTL_FLAG = 0x1,CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x2,};
enum MACRO_CONTEXT_MENU {CONTEXT_MENU_DEFAULT = 0,CONTEXT_MENU_IMAGE = 1,CONTEXT_MENU_CONTROL = 2,CONTEXT_MENU_TABLE = 3,CONTEXT_MENU_TEXTSELECT = 4,CONTEXT_MENU_ANCHOR = 5,CONTEXT_MENU_UNKNOWN = 6,CONTEXT_MENU_IMGDYNSRC = 7,CONTEXT_MENU_IMGART = 8,CONTEXT_MENU_DEBUG = 9,CONTEXT_MENU_VSCROLL = 10,CONTEXT_MENU_HSCROLL = 11,};
enum MACRO_COOKIEACTION {COOKIEACTION_NONE = 0x0,COOKIEACTION_ACCEPT = 0x1,COOKIEACTION_REJECT = 0x2,COOKIEACTION_DOWNGRADE = 0x4,COOKIEACTION_LEASH = 0x8,COOKIEACTION_SUPPRESS = 0x10,COOKIEACTION_READ = 0x20,};
enum MACRO_CREATE_CHECK {CREATE_CHECK_DUP_STRICT = 0x1,CREATE_CHECK_DUP_LOOSE = 0x2,CREATE_REPLACE = 0x4,CREATE_MERGE = 0x8,};
enum MACRO_CRYPTPROTECT {CRYPTPROTECT_PROMPT_ON_UNPROTECT = 0x1,CRYPTPROTECT_PROMPT_ON_PROTECT = 0x2,CRYPTPROTECT_PROMPT_RESERVED = 0x4,CRYPTPROTECT_PROMPT_STRONG = 0x8,CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 0x10,CRYPTPROTECT_UI_FORBIDDEN = 0x1,CRYPTPROTECT_LOCAL_MACHINE = 0x4,CRYPTPROTECT_CRED_SYNC = 0x8,CRYPTPROTECT_AUDIT = 0x10,CRYPTPROTECT_NO_RECOVERY = 0x20,CRYPTPROTECT_VERIFY_PROTECTION = 0x40,CRYPTPROTECT_CRED_REGENERATE = 0x80,CRYPTPROTECT_SYSTEM = 0x20000000,CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 0xFFFFFFF,CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 0xFFFFFFFF,};
enum MACRO_CRYPT_FAILED {CRYPT_FAILED = 0,CRYPT_SUCCEED = 1,};
enum MACRO_CRYPT_FORMAT {CRYPT_FORMAT_STR_MULTI_LINE = 0x1,CRYPT_FORMAT_STR_NO_HEX = 0x10,CRYPT_FORMAT_SIMPLE = 0x1,CRYPT_FORMAT_X509 = 0x2,CRYPT_FORMAT_OID = 0x4,CRYPT_FORMAT_RDN_SEMICOLON = 0x100,CRYPT_FORMAT_RDN_CRLF = 0x200,CRYPT_FORMAT_RDN_UNQUOTE = 0x400,CRYPT_FORMAT_RDN_REVERSE = 0x800,CRYPT_FORMAT_COMMA = 0x1000,CRYPT_FORMAT_SEMICOLON = 0x100,CRYPT_FORMAT_CRLF = 0x200,CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_ENCODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 0x80000000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 0x20000000,CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 0x40000000,CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x10000,CRYPT_DECODE_NOCOPY_FLAG = 0x1,CRYPT_DECODE_TO_BE_SIGNED_FLAG = 0x2,CRYPT_DECODE_SHARE_OID_STRING_FLAG = 0x4,CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_DECODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 0x1000000,CRYPT_ENCODE_DECODE_NONE = 0x0,};
enum MACRO_CRYPT_SERVER {CRYPT_SERVER = 0x400,};
enum MACRO_CRYPT_STRING {CRYPT_STRING_BASE64HEADER = 0x0,CRYPT_STRING_BASE64 = 0x1,CRYPT_STRING_BINARY = 0x2,CRYPT_STRING_BASE64REQUESTHEADER = 0x3,CRYPT_STRING_HEX = 0x4,CRYPT_STRING_HEXASCII = 0x5,CRYPT_STRING_BASE64_ANY = 0x6,CRYPT_STRING_ANY = 0x7,CRYPT_STRING_HEX_ANY = 0x8,CRYPT_STRING_BASE64X509CRLHEADER = 0x9,CRYPT_STRING_HEXADDR = 0xA,CRYPT_STRING_HEXASCIIADDR = 0xB,CRYPT_STRING_NOCR = 0x80000000,CRYPT_USER_KEYSET = 0x1000,};
enum MACRO_CRYPT_VERIFY {CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3,CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1,CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2,CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3,CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4,CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1,CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2,CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1,CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2,CRYPT_ACQUIRE_CACHE_FLAG = 1,CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2,CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4,CRYPT_ACQUIRE_SILENT_FLAG = 64,CRYPT_FIND_USER_KEYSET_FLAG = 1,CRYPT_FIND_MACHINE_KEYSET_FLAG = 2,CRYPT_FIND_SILENT_KEYSET_FLAG = 64,CRYPT_DELETE_KEYSET = 1,};
enum MACRO_D3DPMISCCAPS {D3DPMISCCAPS_MASKZ = 0x2,D3DPMISCCAPS_LINEPATTERNREP = 0x4,D3DPMISCCAPS_CULLNONE = 0x10,D3DPMISCCAPS_CULLCW = 0x20,D3DPMISCCAPS_CULLCCW = 0x40,D3DPMISCCAPS_COLORWRITEENABLE = 0x80,D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 0x100,D3DPMISCCAPS_CLIPTLVERTS = 0x200,D3DPMISCCAPS_TSSARGTEMP = 0x400,D3DPMISCCAPS_BLENDOP = 0x800,};
enum MACRO_D3DTEXOPCAPS {D3DTEXOPCAPS_DISABLE = 0x1,D3DTEXOPCAPS_SELECTARG1 = 0x2,D3DTEXOPCAPS_SELECTARG2 = 0x4,D3DTEXOPCAPS_MODULATE = 0x8,D3DTEXOPCAPS_MODULATE2X = 0x10,D3DTEXOPCAPS_MODULATE4X = 0x20,D3DTEXOPCAPS_ADD = 0x40,D3DTEXOPCAPS_ADDSIGNED = 0x80,D3DTEXOPCAPS_ADDSIGNED2X = 0x100,D3DTEXOPCAPS_SUBTRACT = 0x200,D3DTEXOPCAPS_ADDSMOOTH = 0x400,D3DTEXOPCAPS_BLENDDIFFUSEALPHA = 0x800,D3DTEXOPCAPS_BLENDTEXTUREALPHA = 0x1000,D3DTEXOPCAPS_BLENDFACTORALPHA = 0x2000,D3DTEXOPCAPS_BLENDTEXTUREALPHAPM = 0x4000,D3DTEXOPCAPS_BLENDCURRENTALPHA = 0x8000,D3DTEXOPCAPS_PREMODULATE = 0x10000,D3DTEXOPCAPS_MODULATEALPHA_ADDCOLOR = 0x20000,D3DTEXOPCAPS_MODULATECOLOR_ADDALPHA = 0x40000,D3DTEXOPCAPS_MODULATEINVALPHA_ADDCOLOR = 0x80000,D3DTEXOPCAPS_MODULATEINVCOLOR_ADDALPHA = 0x100000,D3DTEXOPCAPS_BUMPENVMAP = 0x200000,D3DTEXOPCAPS_BUMPENVMAPLUMINANCE = 0x400000,D3DTEXOPCAPS_DOTPRODUCT3 = 0x800000,D3DTEXOPCAPS_MULTIPLYADD = 0x1000000,D3DTEXOPCAPS_LERP = 0x2000000,};
enum MACRO_D3DWRAPCOORD {D3DWRAPCOORD_0 = 0x1,D3DWRAPCOORD_1 = 0x2,D3DWRAPCOORD_2 = 0x4,D3DWRAPCOORD_3 = 0x8,};
enum MACRO_DAVNAMESPACE {DAVNAMESPACE_UNKNOWN = 0xFFFFFFFF,DAVNAMESPACE_DAV = 0x0,DAVNAMESPACE_HOTMAIL = 0x1,DAVNAMESPACE_HTTPMAIL = 0x2,DAVNAMESPACE_MAIL = 0x3,DAVNAMESPACE_CONTACTS = 0x4,};
enum MACRO_DBPROPVAL_AO {DBPROPVAL_AO_SEQUENTIAL = 0x0,DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS = 0x1,DBPROPVAL_AO_RANDOM = 0x2,DBPROPVAL_BD_ROWSET = 0x0,DBPROPVAL_BD_INTRANSACTION = 0x1,DBPROPVAL_BD_XTRANSACTION = 0x2,DBPROPVAL_BD_REORGANIZATION = 0x3,};
enum MACRO_DBPROPVAL_BO {DBPROPVAL_BO_NOLOG = 0x0,DBPROPVAL_BO_NOINDEXUPDATE = 0x1,DBPROPVAL_BO_REFINTEGRITY = 0x2,DBPROPVAL_STGM_DIRECT = 0x10000,DBPROPVAL_STGM_TRANSACTED = 0x20000,DBPROPVAL_STGM_CONVERT = 0x40000,DBPROPVAL_STGM_FAILIFTHERE = 0x80000,DBPROPVAL_STGM_PRIORITY = 0x100000,DBPROPVAL_STGM_DELETEONRELEASE = 0x200000,DBPROPVAL_GB_COLLATE = 0x10,DBPROPVAL_CS_UNINITIALIZED = 0x0,DBPROPVAL_CS_INITIALIZED = 0x1,DBPROPVAL_CS_COMMUNICATIONFAILURE = 0x2,DBPROPVAL_RD_RESETALL = 0xFFFFFFFF,DBPROPVAL_OS_RESOURCEPOOLING = 0x1,DBPROPVAL_OS_TXNENLISTMENT = 0x2,DBPROPVAL_OS_CLIENTCURSOR = 0x4,DBPROPVAL_OS_ENABLEALL = 0xFFFFFFFF,DBPROPVAL_BI_CROSSROWSET = 0x1,};
enum MACRO_DBPROPVAL_DF {DBPROPVAL_DF_INITIALLY_DEFERRED = 0x1,DBPROPVAL_DF_INITIALLY_IMMEDIATE = 0x2,DBPROPVAL_DF_NOT_DEFERRABLE = 0x3,};
enum MACRO_DBPROPVAL_OS {DBPROPVAL_OS_DISABLEALL = 0x0,DBPROPVAL_OO_ROWOBJECT = 0x4,DBPROPVAL_OO_SCOPED = 0x8,DBPROPVAL_OO_DIRECTBIND = 0x10,DBPROPVAL_DST_DOCSOURCE = 0x4,DBPROPVAL_GU_NOTSUPPORTED = 0x1,DBPROPVAL_GU_SUFFIX = 0x2,};
enum MACRO_DB_BINDFLAGS {DB_BINDFLAGS_DELAYFETCHCOLUMNS = 0x1,DB_BINDFLAGS_DELAYFETCHSTREAM = 0x2,DB_BINDFLAGS_RECURSIVE = 0x4,DB_BINDFLAGS_OUTPUT = 0x8,DB_BINDFLAGS_COLLECTION = 0x10,DB_BINDFLAGS_OPENIFEXISTS = 0x20,DB_BINDFLAGS_OVERWRITE = 0x40,DB_BINDFLAGS_ISSTRUCTUREDDOCUMENT = 0x80,};
enum MACRO_DEFAULT_IMAP {DEFAULT_IMAP_PORT = 143,DEFAULT_POP3_PORT = 110,DEFAULT_SMTP_PORT = 25,DEFAULT_NNTP_PORT = 119,};
enum MACRO_DEVICE_STATE {DEVICE_STATE_CONNECTED = 1,DEVICE_STATE_DISCONNECTED = 0,};
enum MACRO_DFS_REFERRAL {DFS_REFERRAL_SUCCESS = 0x40003844,DFS_MAX_DNR_ATTEMPTS = 0x40003845,DFS_SPECIAL_REFERRAL_FAILURE = 0x40003846,DFS_OPEN_FAILURE = 0x40003847,};
enum MACRO_DISPID_QUERY {DISPID_QUERY_RANKVECTOR = 2,DISPID_QUERY_RANK = 3,DISPID_QUERY_HITCOUNT = 4,DISPID_QUERY_WORKID = 5,DISPID_QUERY_ALL = 6,DISPID_QUERY_UNFILTERED = 7,DISPID_QUERY_REVNAME = 8,DISPID_QUERY_VIRTUALPATH = 9,DISPID_QUERY_LASTSEENTIME = 10,};
enum MACRO_DMSINVHEADER {DMSINVHEADER_MAGIC = 0xA54088CE,};
enum MACRO_DMS_CALLBACK {DMS_CALLBACK_MAGIC = 0x22480EE4,DMS_REFRESH_TASKS = 0x1,DMS_REFRESH_DB = 0x2,DMS_REFRESH_DB_ADD = 0x12,DMS_REFRESH_DB_REMOVE = 0x22,DMS_REFRESH_DB_DL_FAIL = 0x42,};
enum MACRO_DOT11_PACKET {DOT11_PACKET_TYPE_DIRECTED_CTRL = 0x1,DOT11_PACKET_TYPE_DIRECTED_MGMT = 0x2,DOT11_PACKET_TYPE_DIRECTED_DATA = 0x4,DOT11_PACKET_TYPE_MULTICAST_CTRL = 0x8,DOT11_PACKET_TYPE_MULTICAST_MGMT = 0x10,DOT11_PACKET_TYPE_MULTICAST_DATA = 0x20,DOT11_PACKET_TYPE_BROADCAST_CTRL = 0x40,DOT11_PACKET_TYPE_BROADCAST_MGMT = 0x80,DOT11_PACKET_TYPE_BROADCAST_DATA = 0x100,DOT11_PACKET_TYPE_PROMISCUOUS_CTRL = 0x200,DOT11_PACKET_TYPE_PROMISCUOUS_MGMT = 0x400,DOT11_PACKET_TYPE_PROMISCUOUS_DATA = 0x800,DOT11_PACKET_TYPE_ALL_MULTICAST_CTRL = 0x1000,DOT11_PACKET_TYPE_ALL_MULTICAST_MGMT = 0x2000,DOT11_PACKET_TYPE_ALL_MULTICAST_DATA = 0x4000,DOT11_PACKET_TYPE_RESERVED = 0xFFFF8000,};
enum MACRO_DOT11_UPCALL {DOT11_UPCALL_OP_MODE_STATION = 0x1,DOT11_UPCALL_OP_MODE_AP = 0x2,DOT11_UPCALL_OP_MODE_REPEATER_AP = 0x3,};
enum MACRO_DOWNLOADFAIL {DOWNLOADFAIL_RETRY = 0x1,};
enum MACRO_DSBFREQUENCY {DSBFREQUENCY_MIN = 100,DSBFREQUENCY_MAX = 100000,DSBFREQUENCY_ORIGINAL = 0,};
enum MACRO_DSCOLUMNPROP {DSCOLUMNPROP_ADSPATH = -1,DSCOLUMNPROP_OBJECTCLASS = -2,};
enum MACRO_DT_MULTILINE {DT_MULTILINE = 0x1,DT_EDITABLE = 0x2,DT_REQUIRED = 0x4,DT_SET_IMMEDIATE = 0x8,DT_PASSWORD_EDIT = 0x10,DT_ACCEPT_DBCS = 0x20,DT_SET_SELECTION = 0x40,};
enum MACRO_ENGINESTATUS {ENGINESTATUS_NOTREADY = 0,ENGINESTATUS_LOADING = 1,ENGINESTATUS_INSTALLING = 2,ENGINESTATUS_READY = 3,};
enum MACRO_ENUM_CURRENT {ENUM_CURRENT_SETTINGS = 4294967295,ENUM_REGISTRY_SETTINGS = 4294967294,};
enum MACRO_ERROR_DBPROP {ERROR_DBPROP_NOT_FOUND = 5,ERROR_REPEATED_KEY = 183,};
enum MACRO_EVENT_BRIDGE {EVENT_BRIDGE_PROTOCOL_REGISTER_FAILED = 0xC0003908,EVENT_BRIDGE_MINIPROT_DEVNAME_MISSING = 0xC0003909,EVENT_BRIDGE_MINIPORT_REGISTER_FAILED = 0xC000390A,EVENT_BRIDGE_DEVICE_CREATION_FAILED = 0xC000390B,EVENT_BRIDGE_NO_BRIDGE_MAC_ADDR = 0xC000390C,EVENT_BRIDGE_MINIPORT_INIT_FAILED = 0xC000390D,EVENT_BRIDGE_ETHERNET_NOT_OFFERED = 0xC000390E,EVENT_BRIDGE_THREAD_CREATION_FAILED = 0xC000390F,EVENT_BRIDGE_THREAD_REF_FAILED = 0xC0003910,EVENT_BRIDGE_PACKET_POOL_CREATION_FAILED = 0xC0003911,EVENT_BRIDGE_BUFFER_POOL_CREATION_FAILED = 0xC0003912,EVENT_BRIDGE_INIT_MALLOC_FAILED = 0xC0003913,EVENT_BRIDGE_ADAPTER_LINK_SPEED_QUERY_FAILED = 0xC000396C,EVENT_BRIDGE_ADAPTER_MAC_ADDR_QUERY_FAILED = 0xC000396D,EVENT_BRIDGE_ADAPTER_PROMISCUOUS_FAILED = 0xC000396E,EVENT_BRIDGE_ADAPTER_NAME_QUERY_FAILED = 0xC000396F,EVENT_BRIDGE_ADAPTER_BIND_FAILED = 0xC0003970,};
enum MACRO_EXTRA_VOLUME {EXTRA_VOLUME_DELETED = 0xC00037E6,EXTRA_VOLUME_NOT_DELETED = 0xC00037E7,};
enum MACRO_E_NoAccounts {E_NoAccounts = 0x800CCDD0,E_BadFriendlyName = 0x800CCDD1,E_NoIdentities = 0x800CCDD2,};
enum MACRO_E_NoPropData {E_NoPropData = 0x800CCDA0,E_BufferTooSmall = 0x800CCDA1,E_BadPropType = 0x800CCDA2,E_BufferSizeMismatch = 0x800CCDA3,E_InvalidBooleanValue = 0x800CCDA4,E_InvalidMinMaxValue = 0x800CCDA5,E_PropNotFound = 0x800CCDA6,E_InvalidPropTag = 0x800CCDA7,E_InvalidPropertySet = 0x800CCDA8,E_EnumFinished = 0x800CCDA9,};
enum MACRO_FACILITY_SIP {FACILITY_SIP_STATUS_CODE = 0xEF,FACILITY_RTC_INTERFACE = 0xEE,FACILITY_PINT_STATUS_CODE = 0xF0,};
enum MACRO_FILTERCHOOSE {FILTERCHOOSE_MESSAGE = 0,FILTERCHOOSE_FILTERTAG_VERIFY = 0,FILTERCHOOSE_FILTER_VERIFY = 1,FILTERCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_FORCE_SUBMIT {FORCE_SUBMIT = 0x1,};
enum MACRO_FORMATCHOOSE {FORMATCHOOSE_MESSAGE = 0,FORMATCHOOSE_FORMATTAG_VERIFY = 0,FORMATCHOOSE_FORMAT_VERIFY = 1,FORMATCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_HWND_DESKTOP {HWND_DESKTOP = 0,};
enum MACRO_IDC_MENUBAND {IDC_MENUBAND = 1000,IDC_TOOLBARBAND = 1001,};
enum MACRO_IDD_GOONLINE {IDD_GOONLINE = 110,IDD_GOOFFLINE = 4014,};
enum MACRO_IDS_SECURITY {IDS_SECURITY_CAPTION = 139,IDS_CERT_REVOKED = 140,};
enum MACRO_IMAGE_BITMAP {IMAGE_BITMAP = 0,IMAGE_ICON = 1,IMAGE_CURSOR = 2,};
enum MACRO_IMAGE_SIZEOF {IMAGE_SIZEOF_AUX_SYMBOL = 18,IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY = 2,IMAGE_COMDAT_SELECT_SAME_SIZE = 3,IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,IMAGE_COMDAT_SELECT_LARGEST = 6,IMAGE_COMDAT_SELECT_NEWEST = 7,IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2,IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3,IMAGE_SIZEOF_RELOCATION = 10,IMAGE_REL_I386_ABSOLUTE = 0,IMAGE_REL_I386_DIR16 = 1,IMAGE_REL_I386_REL16 = 2,IMAGE_REL_I386_DIR32 = 6,IMAGE_REL_I386_DIR32NB = 7,IMAGE_REL_I386_SEG12 = 9,IMAGE_REL_I386_SECTION = 10,IMAGE_REL_I386_SECREL = 11,IMAGE_REL_I386_REL32 = 20,IMAGE_REL_MIPS_ABSOLUTE = 0,IMAGE_REL_MIPS_REFHALF = 1,IMAGE_REL_MIPS_REFWORD = 2,IMAGE_REL_MIPS_JMPADDR = 3,IMAGE_REL_MIPS_REFHI = 4,IMAGE_REL_MIPS_REFLO = 5,IMAGE_REL_MIPS_GPREL = 6,IMAGE_REL_MIPS_LITERAL = 7,IMAGE_REL_MIPS_SECTION = 10,IMAGE_REL_MIPS_SECREL = 11,IMAGE_REL_MIPS_SECRELLO = 12,IMAGE_REL_MIPS_SECRELHI = 13,IMAGE_REL_MIPS_JMPADDR16 = 16,IMAGE_REL_MIPS_REFWORDNB = 34,IMAGE_REL_MIPS_PAIR = 37,IMAGE_REL_ALPHA_ABSOLUTE = 0,IMAGE_REL_ALPHA_REFLONG = 1,IMAGE_REL_ALPHA_REFQUAD = 2,IMAGE_REL_ALPHA_GPREL32 = 3,IMAGE_REL_ALPHA_LITERAL = 4,IMAGE_REL_ALPHA_LITUSE = 5,IMAGE_REL_ALPHA_GPDISP = 6,IMAGE_REL_ALPHA_BRADDR = 7,IMAGE_REL_ALPHA_HINT = 8,IMAGE_REL_ALPHA_INLINE_REFLONG = 9,IMAGE_REL_ALPHA_REFHI = 10,IMAGE_REL_ALPHA_REFLO = 11,IMAGE_REL_ALPHA_PAIR = 12,IMAGE_REL_ALPHA_MATCH = 13,IMAGE_REL_ALPHA_SECTION = 14,IMAGE_REL_ALPHA_SECREL = 15,IMAGE_REL_ALPHA_REFLONGNB = 16,IMAGE_REL_ALPHA_SECRELLO = 17,IMAGE_REL_ALPHA_SECRELHI = 18,IMAGE_REL_ALPHA_REFQ3 = 19,IMAGE_REL_ALPHA_REFQ2 = 20,IMAGE_REL_ALPHA_REFQ1 = 21,IMAGE_REL_ALPHA_GPRELLO = 22,IMAGE_REL_ALPHA_GPRELHI = 23,IMAGE_REL_PPC_ABSOLUTE = 0,IMAGE_REL_PPC_ADDR64 = 1,IMAGE_REL_PPC_ADDR32 = 2,IMAGE_REL_PPC_ADDR24 = 3,IMAGE_REL_PPC_ADDR16 = 4,IMAGE_REL_PPC_ADDR14 = 5,IMAGE_REL_PPC_REL24 = 6,IMAGE_REL_PPC_REL14 = 7,IMAGE_REL_PPC_TOCREL16 = 8,IMAGE_REL_PPC_TOCREL14 = 9,IMAGE_REL_PPC_ADDR32NB = 10,IMAGE_REL_PPC_SECREL = 11,IMAGE_REL_PPC_SECTION = 12,IMAGE_REL_PPC_IFGLUE = 13,IMAGE_REL_PPC_IMGLUE = 14,IMAGE_REL_PPC_SECREL16 = 15,IMAGE_REL_PPC_REFHI = 16,IMAGE_REL_PPC_REFLO = 17,IMAGE_REL_PPC_PAIR = 18,IMAGE_REL_PPC_SECRELLO = 19,IMAGE_REL_PPC_SECRELHI = 20,IMAGE_REL_PPC_GPREL = 21,IMAGE_REL_PPC_TYPEMASK = 255,IMAGE_REL_PPC_NEG = 256,IMAGE_REL_PPC_BRTAKEN = 512,IMAGE_REL_PPC_BRNTAKEN = 1024,IMAGE_REL_PPC_TOCDEFN = 2048,IMAGE_REL_SH3_ABSOLUTE = 0,IMAGE_REL_SH3_DIRECT16 = 1,IMAGE_REL_SH3_DIRECT32 = 2,IMAGE_REL_SH3_DIRECT8 = 3,IMAGE_REL_SH3_DIRECT8_WORD = 4,IMAGE_REL_SH3_DIRECT8_LONG = 5,IMAGE_REL_SH3_DIRECT4 = 6,IMAGE_REL_SH3_DIRECT4_WORD = 7,IMAGE_REL_SH3_DIRECT4_LONG = 8,IMAGE_REL_SH3_PCREL8_WORD = 9,IMAGE_REL_SH3_PCREL8_LONG = 10,IMAGE_REL_SH3_PCREL12_WORD = 11,IMAGE_REL_SH3_STARTOF_SECTION = 12,IMAGE_REL_SH3_SIZEOF_SECTION = 13,IMAGE_REL_SH3_SECTION = 14,IMAGE_REL_SH3_SECREL = 15,IMAGE_REL_SH3_DIRECT32_NB = 16,IMAGE_REL_ARM_ABSOLUTE = 0,IMAGE_REL_ARM_ADDR32 = 1,IMAGE_REL_ARM_ADDR32NB = 2,IMAGE_REL_ARM_BRANCH24 = 3,IMAGE_REL_ARM_BRANCH11 = 4,IMAGE_REL_ARM_SECTION = 14,IMAGE_REL_ARM_SECREL = 15,IMAGE_REL_IA64_ABSOLUTE = 0,IMAGE_REL_IA64_IMM14 = 1,IMAGE_REL_IA64_IMM22 = 2,IMAGE_REL_IA64_IMM64 = 3,IMAGE_REL_IA64_DIR32 = 4,IMAGE_REL_IA64_DIR64 = 5,IMAGE_REL_IA64_PCREL21B = 6,IMAGE_REL_IA64_PCREL21M = 7,IMAGE_REL_IA64_PCREL21F = 8,IMAGE_REL_IA64_GPREL22 = 9,IMAGE_REL_IA64_LTOFF22 = 10,IMAGE_REL_IA64_SECTION = 11,IMAGE_REL_IA64_SECREL22 = 12,IMAGE_REL_IA64_SECREL64I = 13,IMAGE_REL_IA64_SECREL32 = 14,IMAGE_REL_IA64_LTOFF64 = 15,IMAGE_REL_IA64_DIR32NB = 16,IMAGE_REL_IA64_RESERVED_11 = 17,IMAGE_REL_IA64_RESERVED_12 = 18,IMAGE_REL_IA64_RESERVED_13 = 19,IMAGE_REL_IA64_RESERVED_14 = 20,IMAGE_REL_IA64_RESERVED_15 = 21,IMAGE_REL_IA64_RESERVED_16 = 22,IMAGE_REL_IA64_ADDEND = 31,};
enum MACRO_IMPLTYPEFLAG {IMPLTYPEFLAG_FDEFAULT = 0x1,IMPLTYPEFLAG_FSOURCE = 0x2,IMPLTYPEFLAG_FRESTRICTED = 0x4,IMPLTYPEFLAG_FDEFAULTVTABLE = 0x8,};
enum MACRO_INVALID_ATOM {INVALID_ATOM = 0,};
enum MACRO_INVALID_CONN {INVALID_CONN_ID = 0xFFFFFFFF,};
enum MACRO_JPEG_PROCESS {JPEG_PROCESS_BASELINE = 0,};
enum MACRO_LDAP_UNICODE {LDAP_UNICODE = 0,LDAP_PORT = 389,LDAP_SSL_PORT = 636,LDAP_GC_PORT = 3268,LDAP_SSL_GC_PORT = 3269,LDAP_VERSION1 = 1,LDAP_VERSION2 = 2,LDAP_VERSION3 = 3,LDAP_VERSION = 2,LDAP_BIND_CMD = 96,LDAP_UNBIND_CMD = 66,LDAP_SEARCH_CMD = 99,LDAP_MODIFY_CMD = 102,LDAP_ADD_CMD = 104,LDAP_DELETE_CMD = 74,LDAP_MODRDN_CMD = 108,LDAP_COMPARE_CMD = 110,LDAP_ABANDON_CMD = 80,LDAP_SESSION_CMD = 113,LDAP_EXTENDED_CMD = 119,LDAP_RES_BIND = 97,LDAP_RES_SEARCH_ENTRY = 100,LDAP_RES_SEARCH_RESULT = 101,LDAP_RES_MODIFY = 103,LDAP_RES_ADD = 105,LDAP_RES_DELETE = 107,LDAP_RES_MODRDN = 109,LDAP_RES_COMPARE = 111,LDAP_RES_SESSION = 114,LDAP_RES_REFERRAL = 115,LDAP_RES_EXTENDED = 120,LDAP_RES_ANY = -1,LDAP_INVALID_CMD = 255,LDAP_INVALID_RES = 255,LDAP_AUTH_SIMPLE = 128,LDAP_AUTH_SASL = 131,LDAP_AUTH_OTHERKIND = 134,LDAP_AUTH_SICILY = 646,LDAP_AUTH_MSN = 2182,LDAP_AUTH_NTLM = 4230,LDAP_AUTH_DPA = 8326,LDAP_AUTH_NEGOTIATE = 1158,LDAP_AUTH_SSPI = 1158,LDAP_AUTH_DIGEST = 16518,LDAP_AUTH_EXTERNAL = 166,LDAP_FILTER_AND = 160,LDAP_FILTER_OR = 161,LDAP_FILTER_NOT = 162,LDAP_FILTER_EQUALITY = 163,LDAP_FILTER_SUBSTRINGS = 164,LDAP_FILTER_GE = 165,LDAP_FILTER_LE = 166,LDAP_FILTER_PRESENT = 135,LDAP_FILTER_APPROX = 168,LDAP_FILTER_EXTENSIBLE = 169,LDAP_SUBSTRING_INITIAL = 128,LDAP_SUBSTRING_ANY = 129,LDAP_SUBSTRING_FINAL = 130,LDAP_DEREF_NEVER = 0,LDAP_DEREF_SEARCHING = 1,LDAP_DEREF_FINDING = 2,LDAP_DEREF_ALWAYS = 3,LDAP_NO_LIMIT = 0,LDAP_OPT_DNS = 1,LDAP_OPT_CHASE_REFERRALS = 2,LDAP_OPT_RETURN_REFS = 4,LDAP_MOD_ADD = 0,LDAP_MOD_DELETE = 1,LDAP_MOD_REPLACE = 2,LDAP_MOD_BVALUES = 128,LDAP_OPT_DESC = 1,LDAP_OPT_DEREF = 2,LDAP_OPT_SIZELIMIT = 3,LDAP_OPT_TIMELIMIT = 4,LDAP_OPT_THREAD_FN_PTRS = 5,LDAP_OPT_REBIND_FN = 6,LDAP_OPT_REBIND_ARG = 7,LDAP_OPT_REFERRALS = 8,LDAP_OPT_RESTART = 9,LDAP_OPT_SSL = 10,LDAP_OPT_IO_FN_PTRS = 11,LDAP_OPT_CACHE_FN_PTRS = 13,LDAP_OPT_CACHE_STRATEGY = 14,LDAP_OPT_CACHE_ENABLE = 15,LDAP_OPT_REFERRAL_HOP_LIMIT = 16,LDAP_OPT_PROTOCOL_VERSION = 17,LDAP_OPT_VERSION = 17,LDAP_OPT_HOST_NAME = 48,LDAP_OPT_ERROR_NUMBER = 49,LDAP_OPT_ERROR_STRING = 50,LDAP_OPT_SERVER_ERROR = 51,LDAP_OPT_SERVER_EXT_ERROR = 52,LDAP_OPT_HOST_REACHABLE = 62,LDAP_OPT_PING_KEEP_ALIVE = 54,LDAP_OPT_PING_WAIT_TIME = 55,LDAP_OPT_PING_LIMIT = 56,LDAP_OPT_DNSDOMAIN_NAME = 59,LDAP_OPT_GETDSNAME_FLAGS = 61,LDAP_OPT_PROMPT_CREDENTIALS = 63,LDAP_OPT_AUTO_RECONNECT = 145,LDAP_OPT_SSPI_FLAGS = 146,LDAP_OPT_SSL_INFO = 147,LDAP_OPT_SIGN = 149,LDAP_OPT_ENCRYPT = 150,LDAP_OPT_SASL_METHOD = 151,LDAP_OPT_AREC_EXCLUSIVE = 152,LDAP_OPT_SECURITY_CONTEXT = 153,LDAP_OPT_ON = 1,LDAP_OPT_OFF = 0,LDAP_CHASE_SUBORDINATE_REFERRALS = 32,LDAP_CHASE_EXTERNAL_REFERRALS = 64,LDAP_SCOPE_BASE = 0,LDAP_SCOPE_ONELEVEL = 1,LDAP_SCOPE_SUBTREE = 2,LDAP_MSG_ONE = 0,LDAP_MSG_ALL = 1,LDAP_MSG_RECEIVED = 2,};
enum MACRO_LINEBUSYMODE {LINEBUSYMODE_STATION = 0x1,LINEBUSYMODE_TRUNK = 0x2,LINEBUSYMODE_UNKNOWN = 0x4,LINEBUSYMODE_UNAVAIL = 0x8,};
enum MACRO_LINEDEVSTATE {LINEDEVSTATE_OTHER = 0x1,LINEDEVSTATE_RINGING = 0x2,LINEDEVSTATE_CONNECTED = 0x4,LINEDEVSTATE_DISCONNECTED = 0x8,LINEDEVSTATE_MSGWAITON = 0x10,LINEDEVSTATE_MSGWAITOFF = 0x20,LINEDEVSTATE_INSERVICE = 0x40,LINEDEVSTATE_OUTOFSERVICE = 0x80,LINEDEVSTATE_MAINTENANCE = 0x100,LINEDEVSTATE_OPEN = 0x200,LINEDEVSTATE_CLOSE = 0x400,LINEDEVSTATE_NUMCALLS = 0x800,LINEDEVSTATE_NUMCOMPLETIONS = 0x1000,LINEDEVSTATE_TERMINALS = 0x2000,LINEDEVSTATE_ROAMMODE = 0x4000,LINEDEVSTATE_BATTERY = 0x8000,LINEDEVSTATE_SIGNAL = 0x10000,LINEDEVSTATE_DEVSPECIFIC = 0x20000,LINEDEVSTATE_REINIT = 0x40000,LINEDEVSTATE_LOCK = 0x80000,LINEDEVSTATE_CAPSCHANGE = 0x100000,LINEDEVSTATE_CONFIGCHANGE = 0x200000,LINEDEVSTATE_TRANSLATECHANGE = 0x400000,LINEDEVSTATE_COMPLCANCEL = 0x800000,LINEDEVSTATE_REMOVED = 0x1000000,};
enum MACRO_LINEPARKMODE {LINEPARKMODE_DIRECTED = 0x1,LINEPARKMODE_NONDIRECTED = 0x2,};
enum MACRO_LINEROAMMODE {LINEROAMMODE_UNKNOWN = 0x1,LINEROAMMODE_UNAVAIL = 0x2,LINEROAMMODE_HOME = 0x4,LINEROAMMODE_ROAMA = 0x8,LINEROAMMODE_ROAMB = 0x10,};
enum MACRO_LINETERMMODE {LINETERMMODE_BUTTONS = 0x1,LINETERMMODE_LAMPS = 0x2,LINETERMMODE_DISPLAY = 0x4,LINETERMMODE_RINGER = 0x8,LINETERMMODE_HOOKSWITCH = 0x10,LINETERMMODE_MEDIATOLINE = 0x20,LINETERMMODE_MEDIAFROMLINE = 0x40,LINETERMMODE_MEDIABIDIRECT = 0x80,};
enum MACRO_LINETONEMODE {LINETONEMODE_CUSTOM = 0x1,LINETONEMODE_RINGBACK = 0x2,LINETONEMODE_BUSY = 0x4,LINETONEMODE_BEEP = 0x8,LINETONEMODE_BILLING = 0x10,};
enum MACRO_LINE_NEWCALL {LINE_NEWCALL = 500,LINE_CALLDEVSPECIFIC = 501,LINE_CALLDEVSPECIFICFEATURE = 502,};
enum MACRO_LM20_PATHLEN {LM20_PATHLEN = 256,};
enum MACRO_LM20_STXTLEN {LM20_STXTLEN = 63,};
enum MACRO_LOCALINSTALL {LOCALINSTALL = 5,};
enum MACRO_LVIS_FOCUSED {LVIS_FOCUSED = 0x1,LVIS_SELECTED = 0x2,LVIS_CUT = 0x4,LVIS_DROPHILITED = 0x8,LVIS_OVERLAYMASK = 0xF00,LVIS_STATEIMAGEMASK = 0xF000,};
enum MACRO_LVM_FINDITEM {LVM_FINDITEM = 4109,};
enum MACRO_LmCharSetISO {LmCharSetISO_8859_1 = 1,LmCharSetISO_8859_2 = 2,LmCharSetISO_8859_3 = 3,LmCharSetISO_8859_4 = 4,LmCharSetISO_8859_5 = 5,LmCharSetISO_8859_6 = 6,LmCharSetISO_8859_7 = 7,LmCharSetISO_8859_8 = 8,LmCharSetISO_8859_9 = 9,};
enum MACRO_MAPI_ENABLED {MAPI_ENABLED = 0x0,MAPI_DISABLED = 0x1,};
enum MACRO_MAXCOMMENTSZ {MAXCOMMENTSZ = 256,};
enum MACRO_MAXIMUM_ATTR {MAXIMUM_ATTR_STRING_LENGTH = 32,MAXIMUM_SMARTCARD_READERS = 10,};
enum MACRO_MAXPROPPAGES {MAXPROPPAGES = 100,};
enum MACRO_MAX_DEVCLASS {MAX_DEVCLASS_NAMELEN = 64,};
enum MACRO_MAX_HOSTNAME {MAX_HOSTNAME_LEN = 128,MAX_DOMAIN_NAME_LEN = 128,MAX_SCOPE_ID_LEN = 256,};
enum MACRO_MAX_PROTOCOL {MAX_PROTOCOL_CHAIN = 7,};
enum MACRO_MCM_SETTODAY {MCM_SETTODAY = 4108,MCM_GETTODAY = 4109,MCM_HITTEST = 4110,};
enum MACRO_MDPROPVAL_NL {MDPROPVAL_NL_SCHEMAONLY = 0x4,};
enum MACRO_MESSAGE_MOVE {MESSAGE_MOVE = 0x1,MESSAGE_DIALOG = 0x2,};
enum MACRO_MIIM_FULLSTR {MIIM_FULLSTR = 0x10000000,};
enum MACRO_MIM_MOREDATA {MIM_MOREDATA = 972,};
enum MACRO_MIXERCONTROL {MIXERCONTROL_CONTROLF_UNIFORM = 0x1,MIXERCONTROL_CONTROLF_MULTIPLE = 0x2,MIXERCONTROL_CONTROLF_DISABLED = 0x80000000,MIXERCONTROL_CT_CLASS_MASK = 0xF0000000,MIXERCONTROL_CT_CLASS_CUSTOM = 0x0,MIXERCONTROL_CT_CLASS_METER = 0x10000000,MIXERCONTROL_CT_CLASS_SWITCH = 0x20000000,MIXERCONTROL_CT_CLASS_NUMBER = 0x30000000,MIXERCONTROL_CT_CLASS_SLIDER = 0x40000000,MIXERCONTROL_CT_CLASS_FADER = 0x50000000,MIXERCONTROL_CT_CLASS_TIME = 0x60000000,MIXERCONTROL_CT_CLASS_LIST = 0x70000000,MIXERCONTROL_CT_SUBCLASS_MASK = 0xF000000,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0x0,MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0x1000000,MIXERCONTROL_CT_SC_METER_POLLED = 0x0,MIXERCONTROL_CT_SC_TIME_MICROSECS = 0x0,MIXERCONTROL_CT_SC_TIME_MILLISECS = 0x1000000,MIXERCONTROL_CT_SC_LIST_SINGLE = 0x0,MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0x1000000,MIXERCONTROL_CT_UNITS_MASK = 0xFF0000,MIXERCONTROL_CT_UNITS_CUSTOM = 0x0,MIXERCONTROL_CT_UNITS_BOOLEAN = 0x10000,MIXERCONTROL_CT_UNITS_SIGNED = 0x20000,MIXERCONTROL_CT_UNITS_UNSIGNED = 0x30000,MIXERCONTROL_CT_UNITS_DECIBELS = 0x40000,MIXERCONTROL_CT_UNITS_PERCENT = 0x50000,MIXERCONTROL_CONTROLTYPE_CUSTOM = 0x0,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 0x10010000,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 0x10020000,MIXERCONTROL_CONTROLTYPE_PEAKMETER = 0x10020001,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 0x10030000,MIXERCONTROL_CONTROLTYPE_BOOLEAN = 0x20010000,MIXERCONTROL_CONTROLTYPE_ONOFF = 0x20010001,MIXERCONTROL_CONTROLTYPE_MUTE = 0x20010002,MIXERCONTROL_CONTROLTYPE_MONO = 0x20010003,MIXERCONTROL_CONTROLTYPE_LOUDNESS = 0x20010004,MIXERCONTROL_CONTROLTYPE_STEREOENH = 0x20010005,MIXERCONTROL_CONTROLTYPE_BUTTON = 0x21010000,MIXERCONTROL_CONTROLTYPE_DECIBELS = 0x30040000,MIXERCONTROL_CONTROLTYPE_SIGNED = 0x30020000,MIXERCONTROL_CONTROLTYPE_UNSIGNED = 0x30030000,MIXERCONTROL_CONTROLTYPE_PERCENT = 0x30050000,MIXERCONTROL_CONTROLTYPE_SLIDER = 0x40020000,MIXERCONTROL_CONTROLTYPE_PAN = 0x40020001,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 0x40020002,MIXERCONTROL_CONTROLTYPE_FADER = 0x50030000,MIXERCONTROL_CONTROLTYPE_VOLUME = 0x50030001,MIXERCONTROL_CONTROLTYPE_BASS = 0x50030002,MIXERCONTROL_CONTROLTYPE_TREBLE = 0x50030003,MIXERCONTROL_CONTROLTYPE_EQUALIZER = 0x50030004,MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 0x70010000,MIXERCONTROL_CONTROLTYPE_MUX = 0x70010001,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 0x71010000,MIXERCONTROL_CONTROLTYPE_MIXER = 0x71010001,MIXERCONTROL_CONTROLTYPE_MICROTIME = 0x60030000,MIXERCONTROL_CONTROLTYPE_MILLITIME = 0x61030000,};
enum MACRO_MM_MCINOTIFY {MM_MCINOTIFY = 0x3B9,MM_WOM_OPEN = 0x3BB,MM_WOM_CLOSE = 0x3BC,MM_WOM_DONE = 0x3BD,MM_WIM_OPEN = 0x3BE,MM_WIM_CLOSE = 0x3BF,MM_WIM_DATA = 0x3C0,MM_MIM_OPEN = 0x3C1,MM_MIM_CLOSE = 0x3C2,MM_MIM_DATA = 0x3C3,MM_MIM_LONGDATA = 0x3C4,MM_MIM_ERROR = 0x3C5,MM_MIM_LONGERROR = 0x3C6,MM_MOM_OPEN = 0x3C7,MM_MOM_CLOSE = 0x3C8,MM_MOM_DONE = 0x3C9,MM_DRVM_OPEN = 0x3D0,MM_DRVM_CLOSE = 0x3D1,MM_DRVM_DATA = 0x3D2,MM_DRVM_ERROR = 0x3D3,MM_MCISYSTEM_STRING = 0x3CA,MM_STREAM_OPEN = 0x3D4,MM_STREAM_CLOSE = 0x3D5,MM_STREAM_DONE = 0x3D6,MM_STREAM_ERROR = 0x3D7,MM_MOM_POSITIONCB = 0x3CA,MM_MCISIGNAL = 0x3CB,MM_MIM_MOREDATA = 0x3CC,MM_MIXM_LINE_CHANGE = 0x3D0,MM_MIXM_CONTROL_CHANGE = 0x3D1,};
enum MACRO_MONITORINFOF {MONITORINFOF_PRIMARY = 0x1,};
enum MACRO_NOTIFICATION {NOTIFICATION_EVENT_NONE = 0,NOTIFICATION_EVENT_TIME_CHANGE = 1,NOTIFICATION_EVENT_SYNC_END = 2,NOTIFICATION_EVENT_ON_AC_POWER = 3,NOTIFICATION_EVENT_OFF_AC_POWER = 4,NOTIFICATION_EVENT_NET_CONNECT = 5,NOTIFICATION_EVENT_NET_DISCONNECT = 6,NOTIFICATION_EVENT_DEVICE_CHANGE = 7,NOTIFICATION_EVENT_IR_DISCOVERED = 8,NOTIFICATION_EVENT_RS232_DETECTED = 9,NOTIFICATION_EVENT_RESTORE_END = 10,NOTIFICATION_EVENT_WAKEUP = 11,NOTIFICATION_EVENT_TZ_CHANGE = 12,NOTIFICATION_EVENT_MACHINE_NAME_CHANGE = 13,NOTIFICATION_EVENT_LAST = 13,};
enum MACRO_OPENPROPERTY {OPENPROPERTY_OVERWRITE = 1,};
enum MACRO_PARMNUM_BASE {PARMNUM_BASE_INFOLEVEL = 1000,};
enum MACRO_PCIBUS_CLASS {PCIBUS_CLASS_VALTYPE = 4,PCIBUS_SUBCLASS_VALTYPE = 4,PCIBUS_PROGIF_VALTYPE = 4,PCIBUS_VENDORID_VALTYPE = 4,PCIBUS_DEVICEID_VALTYPE = 4,PCIBUS_REVISIONID_VALTYPE = 4,PCIBUS_SUBVENDORID_VALTYPE = 4,PCIBUS_SUBSYSTEMID_VALTYPE = 4,PCIBUS_IFCTYPE_VALTYPE = 4,PCIBUS_BUSNUMBER_VALTYPE = 4,PCIBUS_DEVICENUMBER_VALTYPE = 4,PCIBUS_FUNCTIONNUMBER_VALTYPE = 4,PCIBUS_LOGICALLOC_VALTYPE = 3,PCIBUS_PHYSICALLOC_VALTYPE = 3,PCIBUS_MEMBASE_VALTYPE = 4,PCIBUS_MEMLEN_VALTYPE = 4,PCIBUS_IOBASE_VALTYPE = 4,PCIBUS_IOLEN_VALTYPE = 4,PCIBUS_IRQ_VALTYPE = 4,PCIBUS_SYSINTR_VALTYPE = 4,PCIBUS_INSTANCEINDEX_VALTYPE = 4,PCIBUS_NOCONFIG_VALTYPE = 4,PCIBUS_CONFIGENTRY_VALTYPE = 1,PCIBUS_CONFIGDLL_VALTYPE = 1,PCIBUS_COMMAND_VALTYPE = 4,PCIBUS_BRIDGECONTROL_VALTYPE = 4,PCIBUS_LATENCY_VALTYPE = 4,PCIBUS_SECONDARYLATENCY_VALTYPE = 4,PCIBUS_MATCH_NONE = 0,PCIBUS_MATCH_ALL = 8,};
enum MACRO_PHONEFEATURE {PHONEFEATURE_GETBUTTONINFO = 0x1,PHONEFEATURE_GETDATA = 0x2,PHONEFEATURE_GETDISPLAY = 0x4,PHONEFEATURE_GETGAINHANDSET = 0x8,PHONEFEATURE_GETGAINSPEAKER = 0x10,PHONEFEATURE_GETGAINHEADSET = 0x20,PHONEFEATURE_GETHOOKSWITCHHANDSET = 0x40,PHONEFEATURE_GETHOOKSWITCHSPEAKER = 0x80,PHONEFEATURE_GETHOOKSWITCHHEADSET = 0x100,PHONEFEATURE_GETLAMP = 0x200,PHONEFEATURE_GETRING = 0x400,PHONEFEATURE_GETVOLUMEHANDSET = 0x800,PHONEFEATURE_GETVOLUMESPEAKER = 0x1000,PHONEFEATURE_GETVOLUMEHEADSET = 0x2000,PHONEFEATURE_SETBUTTONINFO = 0x4000,PHONEFEATURE_SETDATA = 0x8000,PHONEFEATURE_SETDISPLAY = 0x10000,PHONEFEATURE_SETGAINHANDSET = 0x20000,PHONEFEATURE_SETGAINSPEAKER = 0x40000,PHONEFEATURE_SETGAINHEADSET = 0x80000,PHONEFEATURE_SETHOOKSWITCHHANDSET = 0x100000,PHONEFEATURE_SETHOOKSWITCHSPEAKER = 0x200000,PHONEFEATURE_SETHOOKSWITCHHEADSET = 0x400000,PHONEFEATURE_SETLAMP = 0x800000,PHONEFEATURE_SETRING = 0x1000000,PHONEFEATURE_SETVOLUMEHANDSET = 0x2000000,PHONEFEATURE_SETVOLUMESPEAKER = 0x4000000,PHONEFEATURE_SETVOLUMEHEADSET = 0x8000000,};
enum MACRO_PHONE_REMOVE {PHONE_REMOVE = 26,};
enum MACRO_PID_FINDDATA {PID_FINDDATA = 0,PID_NETRESOURCE = 1,PID_DESCRIPTIONID = 2,PID_DISPLACED_FROM = 2,PID_DISPLACED_DATE = 3,PID_MISC_STATUS = 2,PID_MISC_ACCESSCOUNT = 3,PID_MISC_OWNER = 4,PID_HTMLINFOTIPFILE = 5,PID_MISC_PICS = 6,PID_VOLUME_FREE = 2,PID_QUERY_RANK = 2,};
enum MACRO_PKCS_CONTENT {PKCS_CONTENT_INFO = 33,};
enum MACRO_POWER_NOTIFY {POWER_NOTIFY_ALL = 0xFFFFFFFF,};
enum MACRO_PROPID_DBBMK {PROPID_DBBMK_BOOKMARK = 2,PROPID_DBBMK_CHAPTER = 3,};
enum MACRO_PROTOCOLFLAG {PROTOCOLFLAG_NO_PICS_CHECK = 0x1,};
enum MACRO_PROTOCOL_TLS {PROTOCOL_TLS = 0xA1,};
enum MACRO_RESOURCETYPE {RESOURCETYPE_ANY = 0x0,RESOURCETYPE_DISK = 0x1,RESOURCETYPE_PRINT = 0x2,RESOURCETYPE_RESERVED = 0x8,RESOURCETYPE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_RPC_C_NOTIFY {RPC_C_NOTIFY_ON_SEND_COMPLETE = 0x1,RPC_C_INFINITE_TIMEOUT = 0xFFFFFFFF,};
enum MACRO_SE_PRIVILEGE {SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1,SE_PRIVILEGE_ENABLED = 0x2,SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000,};
enum MACRO_SHNN_LINKSEL {SHNN_LINKSEL = -1000,SHNN_DISMISS = -1001,SHNN_SHOW = -1002,};
enum MACRO_SOFTKEYBOARD {SOFTKEYBOARD_TYPE_T1 = 0x1,SOFTKEYBOARD_TYPE_C1 = 0x2,};
enum MACRO_STDINDEXSIZE {STDINDEXSIZE = 0x4000,};
enum MACRO_STRINGFORMAT {STRINGFORMAT_ASCII = 0x1,STRINGFORMAT_DBCS = 0x2,STRINGFORMAT_UNICODE = 0x3,STRINGFORMAT_BINARY = 0x4,};
enum MACRO_SYSTEM_AUDIT {SYSTEM_AUDIT_OBJECT_ACE_TYPE = 0x7,SYSTEM_ALARM_OBJECT_ACE_TYPE = 0x8,};
enum MACRO_TCM_GETITEMA {TCM_GETITEMA = 4869,TCM_GETITEMW = 4924,TCM_GETITEM = 4869,TCM_SETITEMA = 4870,TCM_SETITEMW = 4925,TCM_SETITEM = 4870,TCM_INSERTITEMA = 4871,TCM_INSERTITEMW = 4926,TCM_INSERTITEM = 4871,TCM_DELETEITEM = 4872,TCM_DELETEALLITEMS = 4873,TCM_GETITEMRECT = 4874,TCM_GETCURSEL = 4875,TCM_SETCURSEL = 4876,};
enum MACRO_TIME_ONESHOT {TIME_ONESHOT = 0x0,TIME_PERIODIC = 0x1,TIME_CALLBACK_FUNCTION = 0x0,TIME_CALLBACK_EVENT_SET = 0x10,TIME_CALLBACK_EVENT_PULSE = 0x20,TIME_CALLBACK_TYPEMASK = 0xF0,};
enum MACRO_UDN_DELTAPOS {UDN_DELTAPOS = -722,UDN_EXPANDING = -723,};
enum MACRO_URL_UNESCAPE {URL_UNESCAPE = 0x10000000,URL_ESCAPE_UNSAFE = 0x20000000,URL_PLUGGABLE_PROTOCOL = 0x40000000,URL_WININET_COMPATIBILITY = 0x80000000,URL_DONT_ESCAPE_EXTRA_INFO = 0x2000000,URL_DONT_UNESCAPE_EXTRA_INFO = 0x2000000,URL_BROWSER_MODE = 0x2000000,URL_ESCAPE_SPACES_ONLY = 0x4000000,URL_DONT_SIMPLIFY = 0x8000000,URL_NO_META = 0x8000000,URL_UNESCAPE_INPLACE = 0x100000,URL_CONVERT_IF_DOSPATH = 0x200000,URL_UNESCAPE_HIGH_ANSI_ONLY = 0x400000,URL_INTERNAL_PATH = 0x800000,URL_FILE_USE_PATHURL = 0x10000,URL_ESCAPE_PERCENT = 0x1000,URL_ESCAPE_SEGMENT_ONLY = 0x2000,URL_PARTFLAG_KEEPSCHEME = 0x1,URL_APPLY_DEFAULT = 0x1,URL_APPLY_GUESSSCHEME = 0x2,URL_APPLY_GUESSFILE = 0x4,URL_APPLY_FORCEAPPLY = 0x8,};
enum MACRO_VER_PLATFORM {VER_PLATFORM_WIN32s = 0,VER_PLATFORM_WIN32_WINDOWS = 1,VER_PLATFORM_WIN32_NT = 2,VER_PLATFORM_WIN32_HH = 3,VER_PLATFORM_WIN32_CE = 3,};
enum MACRO_WM_MOUSELAST {WM_MOUSELAST = 0x20A,};
enum MACRO_X509_UNICODE {X509_UNICODE_NAME = 20,X509_KEYGEN_REQUEST_TO_BE_SIGNED = 21,};
enum MACRO__NLSCMPERROR {_NLSCMPERROR = 2147483647,};
enum MACRO_cbNDRContext {cbNDRContext = 20,};
enum MACRO_fMapiUnicode {fMapiUnicode = 0,};
typedef struct _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
typedef struct _MANAGEDAPPLICATION MANAGEDAPPLICATION;
typedef struct _MIB_IPFORWARDTABLE MIB_IPFORWARDTABLE;
typedef struct _MIB_IPMCAST_GLOBAL MIB_IPMCAST_GLOBAL;
typedef struct _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
typedef struct _NDIS_CO_LINK_SPEED NDIS_CO_LINK_SPEED;
typedef struct _NDIS_VAR_DATA_DESC NDIS_VAR_DATA_DESC;
typedef struct _NDIS_WLAN_BSSID_EX NDIS_WLAN_BSSID_EX;
typedef struct _NETWORK_ADDRESS_IP NETWORK_ADDRESS_IP;
typedef struct tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;
enum NSControlConstants {nsNone = 0x0,nsSimple = 0x1,nsFull = 0x2,};
enum NSDisplayConstants {nsDefaultSize = 0x0,nsHalfSize = 0x1,nsDoubleSize = 0x2,};
typedef struct tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef struct oliadpcmwaveformat_tag OLIADPCMWAVEFORMAT;
struct OldHTMLFormElement;
typedef struct tagPACKAGEINSTALLINFO PACKAGEINSTALLINFO;
typedef IAMPhysicalPinInfo *PAMPHYSICALPININFO;
typedef struct _AM_DVDCOPY_BUSKEY *PAM_DVDCOPY_BUSKEY;
typedef struct _AM_PROPERTY_SPHLI *PAM_PROPERTY_SPHLI;
typedef struct _AM_PROPERTY_SPPAL *PAM_PROPERTY_SPPAL;
typedef struct _BTHNS_INQUIRYBLOB *PBTHNS_INQUIRYBLOB;
typedef struct _BTH_LOCAL_VERSION *PBTH_LOCAL_VERSION;
typedef struct _CARD_WINDOW_PARMS *PCARD_WINDOW_PARMS;
typedef struct __CEL_CRITSEC_ENTER *PCEL_CRITSEC_ENTER;
typedef struct __CEL_CRITSEC_LEAVE *PCEL_CRITSEC_LEAVE;
typedef struct __CEL_MUTEX_RELEASE *PCEL_MUTEX_RELEASE;
typedef struct __CEL_PROCESS_CLOSE *PCEL_PROCESS_CLOSE;
typedef struct __CEL_SYSTEM_INVERT *PCEL_SYSTEM_INVERT;
typedef struct __CEL_THREAD_CREATE *PCEL_THREAD_CREATE;
typedef struct __CEL_THREAD_DELETE *PCEL_THREAD_DELETE;
typedef struct __CEL_THREAD_RESUME *PCEL_THREAD_RESUME;
typedef struct __CEL_THREAD_SWITCH *PCEL_THREAD_SWITCH;
typedef struct __CEL_VIRTUAL_ALLOC *PCEL_VIRTUAL_ALLOC;
typedef struct _CTL_USAGE *PCERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;
typedef struct _CERT_TEMPLATE_EXT *PCERT_TEMPLATE_EXT;
typedef struct _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;
typedef struct _CMC_RESPONSE_INFO *PCMC_RESPONSE_INFO;
typedef struct _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING *PCOMPOSITIONSTRING;
typedef struct _CO_TAPI_LINE_CAPS *PCO_TAPI_LINE_CAPS;
typedef struct _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;
typedef struct _CRYPT_PROVUI_DATA *PCRYPT_PROVUI_DATA;
typedef struct IDirect3DResource8 *PDIRECT3DRESOURCE8;
typedef struct _DOT11_CIPHER_ALGO *PDOT11_CIPHER_ALGO;
typedef struct _DOT11_CIPHER_LIST *PDOT11_CIPHER_LIST;
typedef struct _DOT11_WEP_OFFLOAD *PDOT11_WEP_OFFLOAD;
typedef struct _structDVD_AUDIO_MU_ATTR *PDVD_AUDIO_MU_ATTR;
typedef struct _EXPLICIT_ACCESS_A *PEXPLICIT_ACCESS_A;
typedef struct _EXPLICIT_ACCESS_W *PEXPLICIT_ACCESS_W;
typedef struct _GEN_GET_TIME_CAPS *PGEN_GET_TIME_CAPS;
typedef struct _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;
typedef IAMTimecodeReader *PIAMTIMECODEREADER;
typedef IActiveScriptSite *PIActiveScriptSite;
typedef struct _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;
typedef struct _IO_STACK_LOCATION *PIO_STACK_LOCATION;
typedef struct _IP_ADAPTER_PREFIX *PIP_ADAPTER_PREFIX;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 *PIP_ADDRESS_STRING;
typedef struct _IP_INTERFACE_INFO *PIP_INTERFACE_INFO;
typedef struct _ISA_PNP_RESOURCES *PISA_PNP_RESOURCES;
typedef struct ldap_version_info *PLDAP_VERSION_INFO;
typedef struct _LINE_ADDRESS_CAPS *PLINE_ADDRESS_CAPS;
typedef struct _LINE_EXTENSION_ID *PLINE_EXTENSION_ID;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;
typedef struct _MIB_IPMCAST_SCOPE *PMIB_IPMCAST_SCOPE;
typedef struct _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;
typedef struct tMIXERLINECONTROLS *PMIXERLINECONTROLS;
typedef struct _NDISUIO_QUERY_OID *PNDISUIO_QUERY_OID;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct _OFFLOAD_ALGO_INFO *POFFLOAD_ALGO_INFO;
typedef struct _POWER_CAPABILITIES POWER_CAPABILITIES;
typedef struct _POWER_RELATIONSHIP POWER_RELATIONSHIP;
typedef struct _PCI_COMMON_CONFIG *PPCI_COMMON_CONFIG;
typedef struct _PST_ACCESSRULESET *PPST_ACCESSRULESET;
typedef struct _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
typedef struct _PROXY_HTTP_REQUEST PROXY_HTTP_REQUEST;
typedef struct _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;
typedef struct _SPC_PE_IMAGE_DATA *PSPC_PE_IMAGE_DATA;
typedef struct _SSLCONNECTIONINFO *PSSLCONNECTIONINFO;
typedef struct tagSTORAGEDEVICEINFO *PSTORAGEDEVICEINFO;
typedef struct _TAPE_GET_POSITION *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION *PTAPE_SET_POSITION;
typedef struct _USB_CONFIGURATION *PUSB_CONFIGURATION;
typedef struct _WINDOWS_IAS_QUERY *PWINDOWS_IAS_QUERY;
typedef struct _RAS_AUTH_ATTRIBUTE RAS_AUTH_ATTRIBUTE;
typedef struct _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
typedef struct _27240A871129E8C5EF2505ED059D4BC8 RPC_DISPATCH_TABLE;
enum RTC_REINVITE_STATE {RTCRIN_INCOMING = 0x0,RTCRIN_SUCCEEDED = 0x1,RTCRIN_FAIL = 0x2,};
enum RTC_SECURITY_LEVEL {RTCSECL_UNSUPPORTED = 0x1,RTCSECL_SUPPORTED = 0x2,RTCSECL_REQUIRED = 0x3,};
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D SCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F SCARD_READERSTATEW;
typedef struct _SEC_OBJECT_ELEMENT SEC_OBJECT_ELEMENT;
typedef struct _SHNOTIFICATIONDATA SHNOTIFICATIONDATA;
typedef struct _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
typedef struct _SLargeIntegerArray SLargeIntegerArray;
typedef struct _SPC_SP_AGENCY_INFO SPC_SP_AGENCY_INFO;
typedef struct _SPC_STATEMENT_TYPE SPC_STATEMENT_TYPE;
typedef struct _SSLAUTHREQUESTHOOK SSLAUTHREQUESTHOOK;
typedef struct _SSLKEYEXCHANGEHOOK SSLKEYEXCHANGEHOOK;
typedef struct _tagSYNCMGRHANDLERINFO SYNCMGRHANDLERINFO;
struct ShellBrowserWindow;
typedef struct _TABLE_NOTIFICATION TABLE_NOTIFICATION;
struct TIMEColorAnimation;
typedef struct _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
typedef union _TRIGGER_TYPE_UNION TRIGGER_TYPE_UNION;
typedef struct _USB_DEVICE_REQUEST USB_DEVICE_REQUEST;
typedef struct _USB_HUB_DESCRIPTOR USB_HUB_DESCRIPTOR;
typedef struct _WAIT_CONTEXT_BLOCK WAIT_CONTEXT_BLOCK;
typedef struct _WINDOWS_DEVICELIST WINDOWS_DEVICELIST;
typedef struct WINTRUST_BLOB_INFO_ WINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ WINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ WINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ WINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA WSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW WSANAMESPACE_INFOW;
enum _AM_RENSDEREXFLAGS {AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 0x1,};
enum _BEHAVIOR_RELATION {BEHAVIOR_FIRSTRELATION = 0x0,BEHAVIOR_SAMEELEMENT = 0x0,BEHAVIOR_PARENT = 0x1,BEHAVIOR_CHILD = 0x2,BEHAVIOR_SIBLING = 0x3,BEHAVIOR_LASTRELATION = 0x3,BEHAVIOR_RELATION_Max = 0x7FFFFFFF,};
struct _BTH_LOCAL_VERSION {unsigned char hci_version;unsigned short hci_revision;unsigned char lmp_version;unsigned short lmp_subversion;unsigned short manufacturer;unsigned char lmp_features[8];};
enum _CRED_MARSHAL_TYPE {CertCredential = 0x1,UsernameTargetCredential = 0x2,};
enum _D3DPATCHEDGESTYLE {D3DPATCHEDGE_DISCRETE = 0x0,D3DPATCHEDGE_CONTINUOUS = 0x1,D3DPATCHEDGE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSTATEBLOCKTYPE {D3DSBT_ALL = 0x1,D3DSBT_PIXELSTATE = 0x2,D3DSBT_VERTEXSTATE = 0x3,D3DSBT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREADDRESS {D3DTADDRESS_WRAP = 0x1,D3DTADDRESS_MIRROR = 0x2,D3DTADDRESS_CLAMP = 0x3,D3DTADDRESS_BORDER = 0x4,D3DTADDRESS_MIRRORONCE = 0x5,D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,};
enum _ELEMENT_ADJACENCY {ELEM_ADJ_BeforeBegin = 0x0,ELEM_ADJ_AfterBegin = 0x1,ELEM_ADJ_BeforeEnd = 0x2,ELEM_ADJ_AfterEnd = 0x3,ELEMENT_ADJACENCY_Max = 0x7FFFFFFF,};
enum _FINDEX_SEARCH_OPS {FindExSearchNameMatch = 0x0,FindExSearchLimitToDirectories = 0x1,FindExSearchLimitToDevices = 0x2,FindExSearchMaxSearchOp = 0x3,};
struct _FLAGGED_WORD_BLOB {unsigned int fFlags;unsigned int clSize;unsigned short asData[1];};
enum _HTML_PAINT_ZORDER {HTMLPAINT_ZORDER_NONE = 0x0,HTMLPAINT_ZORDER_REPLACE_ALL = 0x1,HTMLPAINT_ZORDER_REPLACE_CONTENT = 0x2,HTMLPAINT_ZORDER_REPLACE_BACKGROUND = 0x3,HTMLPAINT_ZORDER_BELOW_CONTENT = 0x4,HTMLPAINT_ZORDER_BELOW_FLOW = 0x5,HTMLPAINT_ZORDER_ABOVE_FLOW = 0x6,HTMLPAINT_ZORDER_ABOVE_CONTENT = 0x7,HTMLPAINT_ZORDER_WINDOW_TOP = 0x8,HTML_PAINT_ZORDER_Max = 0x7FFFFFFF,};
struct _MediaPlayerEvents {struct _MediaPlayerEventsVtbl *lpVtbl;};
enum _NAVIGATEEXOPTIONS {NAVIGATEEX_NONE = 0x0,NAVIGATEEX_DONTUPDATETRAVELLOG = 0x1,NAVIGATEEXOPTIONS_Max = 0x7FFFFFFF,};
enum _OFFLOAD_CONF_ALGO {OFFLOAD_IPSEC_CONF_NONE = 0x0,OFFLOAD_IPSEC_CONF_DES = 0x1,OFFLOAD_IPSEC_CONF_RESERVED = 0x2,OFFLOAD_IPSEC_CONF_3_DES = 0x3,OFFLOAD_IPSEC_CONF_MAX = 0x4,};
enum _POINTER_SCROLLPIN {POINTER_SCROLLPIN_TopLeft = 0x0,POINTER_SCROLLPIN_BottomRight = 0x1,POINTER_SCROLLPIN_Minimal = 0x2,POINTER_SCROLLPIN_Max = 0x7FFFFFFF,};
struct _SINGLE_LIST_ENTRY {struct _SINGLE_LIST_ENTRY *Next;};
enum _SecDelegationType {SecFull = 0x0,SecService = 0x1,SecTree = 0x2,SecDirectory = 0x3,SecObject = 0x4,};
enum _TASK_TRIGGER_TYPE {TASK_TIME_TRIGGER_ONCE = 0x0,TASK_TIME_TRIGGER_DAILY = 0x1,TASK_TIME_TRIGGER_WEEKLY = 0x2,TASK_TIME_TRIGGER_MONTHLYDATE = 0x3,TASK_TIME_TRIGGER_MONTHLYDOW = 0x4,TASK_EVENT_TRIGGER_ON_IDLE = 0x5,TASK_EVENT_TRIGGER_AT_SYSTEMSTART = 0x6,TASK_EVENT_TRIGGER_AT_LOGON = 0x7,};
enum _WSACOMPLETIONTYPE {NSP_NOTIFY_IMMEDIATELY = 0x0,NSP_NOTIFY_HWND = 0x1,NSP_NOTIFY_EVENT = 0x2,NSP_NOTIFY_PORT = 0x3,NSP_NOTIFY_APC = 0x4,};
enum __MIDL_IHlink_0001 {HLNF_INTERNALJUMP = 0x1,HLNF_OPENINNEWWINDOW = 0x2,HLNF_NAVIGATINGBACK = 0x4,HLNF_NAVIGATINGFORWARD = 0x8,HLNF_NAVIGATINGTOSTACKITEM = 0x10,HLNF_CREATENOHISTORY = 0x20,};
enum __MIDL_IHlink_0002 {HLINKGETREF_DEFAULT = 0x0,HLINKGETREF_ABSOLUTE = 0x1,HLINKGETREF_RELATIVE = 0x2,};
enum __MIDL_IHlink_0003 {HLFNAMEF_DEFAULT = 0x0,HLFNAMEF_TRYCACHE = 0x1,HLFNAMEF_TRYPRETTYTARGET = 0x2,HLFNAMEF_TRYFULLTARGET = 0x4,HLFNAMEF_TRYWIN95SHORTCUT = 0x8,};
enum __MIDL_IHlink_0004 {HLINKMISC_RELATIVE = 0x1,};
enum __MIDL_IHlink_0005 {HLINKSETF_TARGET = 0x1,HLINKSETF_LOCATION = 0x2,};
enum __MIDL_IPrint_0001 {PRINTFLAG_MAYBOTHERUSER = 0x1,PRINTFLAG_PROMPTUSER = 0x2,PRINTFLAG_USERMAYCHANGEPRINTER = 0x4,PRINTFLAG_RECOMPOSETODEVICE = 0x8,PRINTFLAG_DONTACTUALLYPRINT = 0x10,PRINTFLAG_FORCEPROPERTIES = 0x20,PRINTFLAG_PRINTTOFILE = 0x40,};
enum _htmlApplyLocation {htmlApplyLocationInside = 0x0,htmlApplyLocationOutside = 0x1,htmlApplyLocation_Max = 0x7FFFFFFF,};
enum _htmlCaptionVAlign {htmlCaptionVAlignNotSet = 0x0,htmlCaptionVAlignTop = 0x1,htmlCaptionVAlignBottom = 0x2,htmlCaptionVAlign_Max = 0x7FFFFFFF,};
enum _htmlEffectAllowed {htmlEffectAllowedCopy = 0x0,htmlEffectAllowedLink = 0x1,htmlEffectAllowedMove = 0x2,htmlEffectAllowedCopyLink = 0x3,htmlEffectAllowedCopyMove = 0x4,htmlEffectAllowedLinkMove = 0x5,htmlEffectAllowedAll = 0x6,htmlEffectAllowedNone = 0x7,htmlEffectAllowedUninitialized = 0x8,htmlEffectAllowed_Max = 0x7FFFFFFF,};
enum _styleRubyOverhang {styleRubyOverhangNotSet = 0x0,styleRubyOverhangAuto = 0x1,styleRubyOverhangWhitespace = 0x2,styleRubyOverhangNone = 0x3,styleRubyOverhang_Max = 0x7FFFFFFF,};
enum _styleRubyPosition {styleRubyPositionNotSet = 0x0,styleRubyPositionAbove = 0x1,styleRubyPositionInline = 0x2,styleRubyPosition_Max = 0x7FFFFFFF,};
enum _styleTextOverflow {styleTextOverflowClip = 0x0,styleTextOverflowEllipsis = 0x1,styleTextOverflowNotSet = 0x2,styleTextOverflow_Max = 0x7FFFFFFF,};
enum _tagAppActionFlags {APPACTION_INSTALL = 0x1,APPACTION_UNINSTALL = 0x2,APPACTION_MODIFY = 0x4,APPACTION_REPAIR = 0x8,APPACTION_UPGRADE = 0x10,APPACTION_CANGETSIZE = 0x20,APPACTION_MODIFYREMOVE = 0x80,APPACTION_ADDLATER = 0x100,APPACTION_UNSCHEDULE = 0x200,};
typedef struct _remoteMETAFILEPICT remoteMETAFILEPICT;
enum tagAMTunerModeType {AMTUNER_MODE_DEFAULT = 0x0,AMTUNER_MODE_TV = 0x1,AMTUNER_MODE_FM_RADIO = 0x2,AMTUNER_MODE_AM_RADIO = 0x4,AMTUNER_MODE_DSS = 0x8,};
enum tagCHUNK_BREAKTYPE {CHUNK_NO_BREAK = 0x0,CHUNK_EOW = 0x1,CHUNK_EOS = 0x2,CHUNK_EOP = 0x3,CHUNK_EOC = 0x4,};
enum tagDOCHOSTUIDBLCLK {DOCHOSTUIDBLCLK_DEFAULT = 0x0,DOCHOSTUIDBLCLK_SHOWPROPERTIES = 0x1,DOCHOSTUIDBLCLK_SHOWCODE = 0x2,};
enum tagHTTPMAILCOMMAND {HTTPMAIL_NONE = 0x0,HTTPMAIL_GETPROP = 0x1,HTTPMAIL_GET = 0x2,HTTPMAIL_PUT = 0x3,HTTPMAIL_POST = 0x4,HTTPMAIL_DELETE = 0x5,HTTPMAIL_BDELETE = 0x6,HTTPMAIL_PROPFIND = 0x7,HTTPMAIL_PROPPATCH = 0x8,HTTPMAIL_MKCOL = 0x9,HTTPMAIL_COPY = 0xA,HTTPMAIL_BCOPY = 0xB,HTTPMAIL_MOVE = 0xC,HTTPMAIL_BMOVE = 0xD,HTTPMAIL_MEMBERINFO = 0xE,HTTPMAIL_FINDFOLDERS = 0xF,HTTPMAIL_MARKREAD = 0x10,HTTPMAIL_SENDMESSAGE = 0x11,HTTPMAIL_LISTCONTACTS = 0x12,HTTPMAIL_CONTACTINFO = 0x13,HTTPMAIL_POSTCONTACT = 0x14,HTTPMAIL_PATCHCONTACT = 0x15,};
enum tagPOINTERINACTIVE {POINTERINACTIVE_ACTIVATEONENTRY = 0x1,POINTERINACTIVE_DEACTIVATEONLEAVE = 0x2,POINTERINACTIVE_ACTIVATEONDRAG = 0x4,};
enum tagPROP_INFO_FLAGS {PROP_INFO_NAME = 0x1,PROP_INFO_TYPE = 0x2,PROP_INFO_VALUE = 0x4,PROP_INFO_FULLNAME = 0x20,PROP_INFO_ATTRIBUTES = 0x8,PROP_INFO_DEBUGPROP = 0x10,PROP_INFO_AUTOEXPAND = 0x8000000,};
enum tagSCRIPTFONTCONTF {SCRIPTCONTF_FIXED_FONT = 0x1,SCRIPTCONTF_PROPORTIONAL_FONT = 0x2,SCRIPTCONTF_SCRIPT_USER = 0x10000,SCRIPTCONTF_SCRIPT_HIDE = 0x20000,SCRIPTCONTF_SCRIPT_SYSTEM = 0x40000,};
typedef struct _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
typedef struct _683A07C7E5B3B29A9EBE9FB3AE677E07 AAL_PARAMETERS_IE;
typedef struct _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
typedef struct _AM_DVDCOPY_BUSKEY AM_DVDCOPY_BUSKEY;
typedef struct tagAM_MPEGSTREAMTYPE AM_MPEGSTREAMTYPE;
typedef struct tagAM_MPEGSYSTEMTYPE AM_MPEGSYSTEMTYPE;
typedef struct _AM_PROPERTY_SPHLI AM_PROPERTY_SPHLI;
typedef struct _AM_PROPERTY_SPPAL AM_PROPERTY_SPPAL;
typedef struct _362ECF3E0DC92881BF24984B329406EC ATM_CONNECTION_ID;
typedef struct _avistdindex_entry AVISTDINDEX_ENTRY;
typedef struct _BTHNS_INQUIRYBLOB BTHNS_INQUIRYBLOB;
typedef struct _BTH_LOCAL_VERSION BTH_LOCAL_VERSION;
typedef struct _CARD_WINDOW_PARMS CARD_WINDOW_PARMS;
typedef struct tagCATEGORIZATIONSET CATEGORIZATIONSET;
struct CDownloadBehavior;
typedef struct __CEL_CRITSEC_ENTER CEL_CRITSEC_ENTER;
typedef struct __CEL_CRITSEC_LEAVE CEL_CRITSEC_LEAVE;
typedef struct __CEL_MUTEX_RELEASE CEL_MUTEX_RELEASE;
typedef struct __CEL_PROCESS_CLOSE CEL_PROCESS_CLOSE;
typedef struct __CEL_SYSTEM_INVERT CEL_SYSTEM_INVERT;
typedef struct __CEL_THREAD_CREATE CEL_THREAD_CREATE;
typedef struct __CEL_THREAD_DELETE CEL_THREAD_DELETE;
typedef struct __CEL_THREAD_RESUME CEL_THREAD_RESUME;
typedef struct __CEL_THREAD_SWITCH CEL_THREAD_SWITCH;
typedef struct __CEL_VIRTUAL_ALLOC CEL_VIRTUAL_ALLOC;
typedef struct _CTL_USAGE CERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO CERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN CERT_SIMPLE_CHAIN;
typedef struct _CERT_TEMPLATE_EXT CERT_TEMPLATE_EXT;
typedef struct _CERT_TRUST_STATUS CERT_TRUST_STATUS;
typedef struct tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
typedef struct _CMC_RESPONSE_INFO CMC_RESPONSE_INFO;
typedef struct _CMSG_RC2_AUX_INFO CMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO CMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
typedef struct tagCOMPOSITIONSTRING COMPOSITIONSTRING;
typedef struct _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
typedef struct _CO_TAPI_LINE_CAPS CO_TAPI_LINE_CAPS;
typedef struct CRYPTCATATTRIBUTE_ CRYPTCATATTRIBUTE;
typedef struct _CRYPT_CREDENTIALS CRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA CRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA CRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE CRYPT_OBJID_TABLE;
typedef struct _CRYPT_PROVUI_DATA CRYPT_PROVUI_DATA;
typedef struct _D3DRECTPATCH_INFO D3DRECTPATCH_INFO;
enum DBASYNCHPHASEENUM {DBASYNCHPHASE_INITIALIZATION = 0x0,DBASYNCHPHASE_POPULATION = 0x1,DBASYNCHPHASE_COMPLETE = 0x2,DBASYNCHPHASE_CANCELED = 0x3,};
enum DBBINDURLFLAGENUM {DBBINDURLFLAG_READ = 0x1,DBBINDURLFLAG_WRITE = 0x2,DBBINDURLFLAG_READWRITE = 0x3,DBBINDURLFLAG_SHARE_DENY_READ = 0x4,DBBINDURLFLAG_SHARE_DENY_WRITE = 0x8,DBBINDURLFLAG_SHARE_EXCLUSIVE = 0xC,DBBINDURLFLAG_SHARE_DENY_NONE = 0x10,DBBINDURLFLAG_ASYNCHRONOUS = 0x1000,DBBINDURLFLAG_COLLECTION = 0x2000,DBBINDURLFLAG_DELAYFETCHSTREAM = 0x4000,DBBINDURLFLAG_DELAYFETCHCOLUMNS = 0x8000,DBBINDURLFLAG_RECURSIVE = 0x400000,DBBINDURLFLAG_OUTPUT = 0x800000,DBBINDURLFLAG_WAITFORINIT = 0x1000000,DBBINDURLFLAG_OPENIFEXISTS = 0x2000000,DBBINDURLFLAG_OVERWRITE = 0x4000000,DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT = 0x8000000,};
enum DBCOLUMNFLAGSENUM {DBCOLUMNFLAGS_ISBOOKMARK = 0x1,DBCOLUMNFLAGS_MAYDEFER = 0x2,DBCOLUMNFLAGS_WRITE = 0x4,DBCOLUMNFLAGS_WRITEUNKNOWN = 0x8,DBCOLUMNFLAGS_ISFIXEDLENGTH = 0x10,DBCOLUMNFLAGS_ISNULLABLE = 0x20,DBCOLUMNFLAGS_MAYBENULL = 0x40,DBCOLUMNFLAGS_ISLONG = 0x80,DBCOLUMNFLAGS_ISROWID = 0x100,DBCOLUMNFLAGS_ISROWVER = 0x200,DBCOLUMNFLAGS_CACHEDEFERRED = 0x1000,};
enum DBDELETEFLAGSENUM {DBDELETE_ASYNC = 0x100,DBDELETE_ATOMIC = 0x1000,};
typedef struct tagDBIMPLICITSESSION DBIMPLICITSESSION;
typedef struct tagDBINDEXCOLUMNDESC DBINDEXCOLUMNDESC;
enum DBPROPFLAGSENUM21 {DBPROPFLAGS_TRUSTEE = 0x2000,};
enum DBPROPFLAGSENUM25 {DBPROPFLAGS_VIEW = 0x4000,};
enum DBPROPOPTIONSENUM {DBPROPOPTIONS_REQUIRED = 0x0,DBPROPOPTIONS_SETIFCHEAP = 0x1,DBPROPOPTIONS_OPTIONAL = 0x1,};
enum DBROWSTATUSENUM20 {DBROWSTATUS_S_NOCHANGE = 0x14,};
enum DBWATCHNOTIFYENUM {DBWATCHNOTIFY_ROWSCHANGED = 0x1,DBWATCHNOTIFY_QUERYDONE = 0x2,DBWATCHNOTIFY_QUERYREEXECUTED = 0x3,};
typedef struct _DDVIDEOPORTSTATUS DDVIDEOPORTSTATUS;
typedef struct _DEV_BROADCAST_HDR DEV_BROADCAST_HDR;
typedef struct _DEV_BROADCAST_NET DEV_BROADCAST_NET;
typedef struct _DEV_BROADCAST_OEM DEV_BROADCAST_OEM;
typedef struct digifixwaveformat_tag DIGIFIXWAVEFORMAT;
typedef struct digistdwaveformat_tag DIGISTDWAVEFORMAT;
struct DMsgrObjectEvents {struct DMsgrObjectEventsVtbl *lpVtbl;};
typedef struct _DOT11_CIPHER_ALGO DOT11_CIPHER_ALGO;
typedef struct _DOT11_CIPHER_LIST DOT11_CIPHER_LIST;
typedef struct _DOT11_WEP_OFFLOAD DOT11_WEP_OFFLOAD;
typedef struct _DSBPOSITIONNOTIFY DSBPOSITIONNOTIFY;
typedef struct _73827E02090E4C689AB98CDF13C808CD DSQUERYINITPARAMS;
enum DVDEventConstants {dvdEvent_DomainChange = 0x101,dvdEvent_TitleChange = 0x102,dvdEvent_ChapterStart = 0x103,dvdEvent_AudioStreamChange = 0x104,dvdEvent_SubPictureStreamChange = 0x105,dvdEvent_AngleChange = 0x106,dvdEvent_ButtonChange = 0x107,dvdEvent_ValidUOPSChange = 0x108,dvdEvent_StillOn = 0x109,dvdEvent_StillOff = 0x10A,dvdEvent_CurrentTime = 0x10B,dvdEvent_Error = 0x10C,dvdEvent_Warning = 0x10D,dvdEvent_ChapterAutoStop = 0x10E,dvdEvent_NoFirstPlayPGC = 0x10F,dvdEvent_RateChange = 0x110,dvdEvent_ParentalLevelChange = 0x111,dvdEvent_PlaybackStopped = 0x112,dvdEvent_AnglesAvailable = 0x113,};
typedef struct _structDVD_AUDIO_MU_ATTR DVD_AUDIO_MU_ATTR;
typedef struct __MIDL_IDVDProgramChain_0003 DVD_CELL_PLAYBACK;
typedef struct tagDVD_HMSF_TIMECODE DVD_HMSF_TIMECODE;
struct DWebBrowserEvents {struct DWebBrowserEventsVtbl *lpVtbl;};
struct DXSurfaceModifier;
struct DXTFilterBehavior;
typedef struct tagDebugPropertyInfo DebugPropertyInfo;
struct DispHTMLBRElement {struct DispHTMLBRElementVtbl *lpVtbl;};
struct DispHTMLDDElement {struct DispHTMLDDElementVtbl *lpVtbl;};
struct DispHTMLDTElement {struct DispHTMLDTElementVtbl *lpVtbl;};
struct DispHTMLFrameBase {struct DispHTMLFrameBaseVtbl *lpVtbl;};
struct DispHTMLHRElement {struct DispHTMLHRElementVtbl *lpVtbl;};
struct DispHTMLLIElement {struct DispHTMLLIElementVtbl *lpVtbl;};
struct DispHTMLRuleStyle {struct DispHTMLRuleStyleVtbl *lpVtbl;};
struct DispHTMLTableCell {struct DispHTMLTableCellVtbl *lpVtbl;};
typedef struct echosc1waveformat_tag ECHOSC1WAVEFORMAT;
typedef struct _EXPLICIT_ACCESS_A EXPLICIT_ACCESS_A;
typedef struct _EXPLICIT_ACCESS_W EXPLICIT_ACCESS_W;
struct EnumInstalledApps;
typedef struct tagFETCH_CMD_RESULTS FETCH_CMD_RESULTS;
typedef struct _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
typedef struct _GEN_GET_TIME_CAPS GEN_GET_TIME_CAPS;
typedef struct _7644B9603AEA08EBF4DF4A983BB6B237 GOPHER_FIND_DATAA;
typedef struct _17CA7839736B8F73357CD165DBE52F18 GOPHER_FIND_DATAW;
typedef struct _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
typedef void *HCRYPTOIDFUNCADDR;
struct HTCAttachBehavior;
struct HTCMethodBehavior;
struct HTMLAnchorElement;
struct HTMLAnchorEvents2 {struct HTMLAnchorEvents2Vtbl *lpVtbl;};
struct HTMLButtonElement;
struct HTMLElementEvents {struct HTMLElementEventsVtbl *lpVtbl;};
struct HTMLHeaderElement;
struct HTMLLegendElement;
struct HTMLNextIdElement;
struct HTMLNoShowElement;
struct HTMLObjectElement;
struct HTMLOptionElement;
struct HTMLPersistEvents;
struct HTMLPhraseElement;
struct HTMLScriptElement;
struct HTMLScriptEvents2 {struct HTMLScriptEvents2Vtbl *lpVtbl;};
struct HTMLSelectElement;
struct HTMLStyleFontFace;
struct HTMLUrnCollection;
struct HTMLWindowEvents2 {struct HTMLWindowEvents2Vtbl *lpVtbl;};
typedef struct _HTML_PAINTER_INFO HTML_PAINTER_INFO;
typedef struct tagHTTPCONTACTIDLIST HTTPCONTACTIDLIST;
typedef struct tagHTTPMAILBCOPYMOVE HTTPMAILBCOPYMOVE;
typedef struct _D692CA7460863103343173F071E8F66B HTTP_VERSION_INFO;
struct HtmlDlgSafeHelper;
struct IAMMediaContentEx {struct IAMMediaContentExVtbl *lpVtbl;};
struct IAMNetShowExProps {struct IAMNetShowExPropsVtbl *lpVtbl;};
struct IAMNetShowPreroll {struct IAMNetShowPrerollVtbl *lpVtbl;};
struct IAMTimecodeReader {struct IAMTimecodeReaderVtbl *lpVtbl;};
struct IActiveScriptSite {struct IActiveScriptSiteVtbl *lpVtbl;};
struct IAdminIndexServer {struct IAdminIndexServerVtbl *lpVtbl;};
struct IAudioMediaStream {struct IAudioMediaStreamVtbl *lpVtbl;};
struct IBindEventHandler {struct IBindEventHandlerVtbl *lpVtbl;};
struct ICodeStoreDBEntry {struct ICodeStoreDBEntryVtbl *lpVtbl;};
struct IContinueCallback {struct IContinueCallbackVtbl *lpVtbl;};
struct IDMOWrapperFilter {struct IDMOWrapperFilterVtbl *lpVtbl;};
struct IDVDHighlightInfo {struct IDVDHighlightInfoVtbl *lpVtbl;};
struct IDVDNavigatorSink {struct IDVDNavigatorSinkVtbl *lpVtbl;};
struct IDVDUserOperation {struct IDVDUserOperationVtbl *lpVtbl;};
struct IDXSurfaceFactory {struct IDXSurfaceFactoryVtbl *lpVtbl;};
struct IDataAdviseHolder {struct IDataAdviseHolderVtbl *lpVtbl;};
struct IDirect3DSurface8 {struct IDirect3DSurface8Vtbl *lpVtbl;};
struct IDirect3DTexture8 {struct IDirect3DTexture8Vtbl *lpVtbl;};
struct IDirectShowStream {struct IDirectShowStreamVtbl *lpVtbl;};
struct IDocHostUIHandler {struct IDocHostUIHandlerVtbl *lpVtbl;};
struct IDownloadBehavior {struct IDownloadBehaviorVtbl *lpVtbl;};
struct IDragSourceHelper {struct IDragSourceHelperVtbl *lpVtbl;};
struct IDropTargetHelper {struct IDropTargetHelperVtbl *lpVtbl;};
struct IElementNamespace {struct IElementNamespaceVtbl *lpVtbl;};
struct IEmptyVolumeCache {struct IEmptyVolumeCacheVtbl *lpVtbl;};
struct IEnumCATEGORYINFO {struct IEnumCATEGORYINFOVtbl *lpVtbl;};
struct IEnumInputContext {struct IEnumInputContextVtbl *lpVtbl;};
struct IEnumNotification {struct IEnumNotificationVtbl *lpVtbl;};
struct IEnumOleUndoUnits {struct IEnumOleUndoUnitsVtbl *lpVtbl;};
struct IEnumSubscription {struct IEnumSubscriptionVtbl *lpVtbl;};
struct IEnumUserIdentity {struct IEnumUserIdentityVtbl *lpVtbl;};
struct IFileSourceFilter {struct IFileSourceFilterVtbl *lpVtbl;};
struct IHTCEventBehavior {struct IHTCEventBehaviorVtbl *lpVtbl;};
struct IHTMLAppBehavior2 {struct IHTMLAppBehavior2Vtbl *lpVtbl;};
struct IHTMLAppBehavior3 {struct IHTMLAppBehavior3Vtbl *lpVtbl;};
struct IHTMLBlockElement {struct IHTMLBlockElementVtbl *lpVtbl;};
struct IHTMLBodyElement2 {struct IHTMLBodyElement2Vtbl *lpVtbl;};
struct IHTMLControlRange {struct IHTMLControlRangeVtbl *lpVtbl;};
struct IHTMLCurrentStyle {struct IHTMLCurrentStyleVtbl *lpVtbl;};
struct IHTMLDListElement {struct IHTMLDListElementVtbl *lpVtbl;};
struct IHTMLDOMAttribute {struct IHTMLDOMAttributeVtbl *lpVtbl;};
struct IHTMLDOMTextNode2 {struct IHTMLDOMTextNode2Vtbl *lpVtbl;};
struct IHTMLDataTransfer {struct IHTMLDataTransferVtbl *lpVtbl;};
struct IHTMLEditDesigner {struct IHTMLEditDesignerVtbl *lpVtbl;};
struct IHTMLEditServices {struct IHTMLEditServicesVtbl *lpVtbl;};
struct IHTMLEmbedElement {struct IHTMLEmbedElementVtbl *lpVtbl;};
struct IHTMLFormElement2 {struct IHTMLFormElement2Vtbl *lpVtbl;};
struct IHTMLFormElement3 {struct IHTMLFormElement3Vtbl *lpVtbl;};
struct IHTMLFrameElement {struct IHTMLFrameElementVtbl *lpVtbl;};
struct IHTMLInputElement {struct IHTMLInputElementVtbl *lpVtbl;};
struct IHTMLLabelElement {struct IHTMLLabelElementVtbl *lpVtbl;};
struct IHTMLLinkElement2 {struct IHTMLLinkElement2Vtbl *lpVtbl;};
struct IHTMLLinkElement3 {struct IHTMLLinkElement3Vtbl *lpVtbl;};
struct IHTMLListElement2 {struct IHTMLListElement2Vtbl *lpVtbl;};
struct IHTMLMetaElement2 {struct IHTMLMetaElement2Vtbl *lpVtbl;};
struct IHTMLModelessInit {struct IHTMLModelessInitVtbl *lpVtbl;};
struct IHTMLOListElement {struct IHTMLOListElementVtbl *lpVtbl;};
struct IHTMLParamElement {struct IHTMLParamElementVtbl *lpVtbl;};
struct IHTMLStyleElement {struct IHTMLStyleElementVtbl *lpVtbl;};
struct IHTMLTableCaption {struct IHTMLTableCaptionVtbl *lpVtbl;};
struct IHTMLTableSection {struct IHTMLTableSectionVtbl *lpVtbl;};
struct IHTMLTitleElement {struct IHTMLTitleElementVtbl *lpVtbl;};
struct IHTMLUListElement {struct IHTMLUListElementVtbl *lpVtbl;};
struct IHTTPMailCallback {struct IHTTPMailCallbackVtbl *lpVtbl;};
struct IHeaderCollection {struct IHeaderCollectionVtbl *lpVtbl;};
struct IHighlightSegment {struct IHighlightSegmentVtbl *lpVtbl;};
struct IHostBehaviorInit {struct IHostBehaviorInitVtbl *lpVtbl;};
struct IHostDialogHelper {struct IHostDialogHelperVtbl *lpVtbl;};
struct IImnAdviseAccount {struct IImnAdviseAccountVtbl *lpVtbl;};
struct IInternetBindInfo {struct IInternetBindInfoVtbl *lpVtbl;};
struct IInternetPriority {struct IInternetPriorityVtbl *lpVtbl;};
struct IInternetProtocol {struct IInternetProtocolVtbl *lpVtbl;};
typedef struct _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
struct IMarkupContainer2 {struct IMarkupContainer2Vtbl *lpVtbl;};
struct IMediaPropertyBag {struct IMediaPropertyBagVtbl *lpVtbl;};
struct IMimeAddressTable {struct IMimeAddressTableVtbl *lpVtbl;};
struct IMimeMessageParts {struct IMimeMessagePartsVtbl *lpVtbl;};
struct IMpegAudioDecoder {struct IMpegAudioDecoderVtbl *lpVtbl;};
struct IMultiMediaStream {struct IMultiMediaStreamVtbl *lpVtbl;};
typedef struct _INTERFACE_INFO_EX INTERFACE_INFO_EX;
typedef struct _INTERNET_BUFFERSA INTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW INTERNET_BUFFERSW;
struct INetCfgClassSetup {struct INetCfgClassSetupVtbl *lpVtbl;};
struct INewShortcutHookA {struct INewShortcutHookAVtbl *lpVtbl;};
struct INewShortcutHookW {struct INewShortcutHookWVtbl *lpVtbl;};
struct INotificationSink {struct INotificationSinkVtbl *lpVtbl;};
typedef struct _IO_STACK_LOCATION IO_STACK_LOCATION;
struct IOleCommandTarget {struct IOleCommandTargetVtbl *lpVtbl;};
struct IOleInPlaceObject {struct IOleInPlaceObjectVtbl *lpVtbl;};
struct IOleInPlaceSiteEx {struct IOleInPlaceSiteExVtbl *lpVtbl;};
struct IOleItemContainer {struct IOleItemContainerVtbl *lpVtbl;};
struct IOpsProfileSimple {struct IOpsProfileSimpleVtbl *lpVtbl;};
struct IOverlappedStream {struct IOverlappedStreamVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_PREFIX IP_ADAPTER_PREFIX;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 IP_ADDRESS_STRING;
typedef struct _IP_INTERFACE_INFO IP_INTERFACE_INFO;
struct IParseDisplayName {struct IParseDisplayNameVtbl *lpVtbl;};
struct IPropFindResponse {struct IPropFindResponseVtbl *lpVtbl;};
struct IPropPatchRequest {struct IPropPatchRequestVtbl *lpVtbl;};
struct IPropertyPageSite {struct IPropertyPageSiteVtbl *lpVtbl;};
struct IProvideClassInfo {struct IProvideClassInfoVtbl *lpVtbl;};
struct IRTCProfileEvent2 {struct IRTCProfileEvent2Vtbl *lpVtbl;};
struct IRTCReInviteEvent {struct IRTCReInviteEventVtbl *lpVtbl;};
struct IRTCWatcherEvent2 {struct IRTCWatcherEvent2Vtbl *lpVtbl;};
struct IRegisterProvider {struct IRegisterProviderVtbl *lpVtbl;};
struct IResolveShellLink {struct IResolveShellLinkVtbl *lpVtbl;};
struct IResourceConsumer {struct IResourceConsumerVtbl *lpVtbl;};
struct IRowsetNextRowset {struct IRowsetNextRowsetVtbl *lpVtbl;};
struct IRpcChannelBuffer {struct IRpcChannelBufferVtbl *lpVtbl;};
typedef struct _ISA_PNP_RESOURCES ISA_PNP_RESOURCES;
struct IScopedOperations {struct IScopedOperationsVtbl *lpVtbl;};
struct ISdpNodeContainer {struct ISdpNodeContainerVtbl *lpVtbl;};
struct ISearchCommandExt {struct ISearchCommandExtVtbl *lpVtbl;};
struct ISelectionObject2 {struct ISelectionObject2Vtbl *lpVtbl;};
struct ISequentialStream {struct ISequentialStreamVtbl *lpVtbl;};
struct IShellIconOverlay {struct IShellIconOverlayVtbl *lpVtbl;};
struct ISubscriptionItem {struct ISubscriptionItemVtbl *lpVtbl;};
struct ISubscriptionMgr2 {struct ISubscriptionMgr2Vtbl *lpVtbl;};
struct ISupportErrorInfo {struct ISupportErrorInfoVtbl *lpVtbl;};
struct ISyncMgrEnumItems {struct ISyncMgrEnumItemsVtbl *lpVtbl;};
struct ITIMEMediaElement {struct ITIMEMediaElementVtbl *lpVtbl;};
struct IThumbnailCapture {struct IThumbnailCaptureVtbl *lpVtbl;};
struct ITransactionLocal {struct ITransactionLocalVtbl *lpVtbl;};
struct ITravelLogClient2 {struct ITravelLogClient2Vtbl *lpVtbl;};
struct ITridentEventSink {struct ITridentEventSinkVtbl *lpVtbl;};
struct ITypeChangeEvents {struct ITypeChangeEventsVtbl *lpVtbl;};
struct IUPnPDeviceFinder {struct IUPnPDeviceFinderVtbl *lpVtbl;};
struct IUrlHistoryNotify {struct IUrlHistoryNotifyVtbl *lpVtbl;};
struct IVBSAXDeclHandler {struct IVBSAXDeclHandlerVtbl *lpVtbl;};
struct IVoIPCallerInfoDB {struct IVoIPCallerInfoDBVtbl *lpVtbl;};
struct IXMLDOMParseError {struct IXMLDOMParseErrorVtbl *lpVtbl;};
typedef struct ldap_version_info LDAP_VERSION_INFO;
typedef struct lineaddressstatus_tag LINEADDRESSSTATUS;
typedef struct linelocationentry_tag LINELOCATIONENTRY;
typedef struct lineproviderentry_tag LINEPROVIDERENTRY;
typedef struct linetranslatecaps_tag LINETRANSLATECAPS;
typedef struct _LINE_ADDRESS_CAPS LINE_ADDRESS_CAPS;
typedef struct _LINE_EXTENSION_ID LINE_EXTENSION_ID;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct tACMFILTERCHOOSE *LPACMFILTERCHOOSE;
typedef struct tACMFORMATCHOOSE *LPACMFORMATCHOOSE;
typedef struct tACMSTREAMHEADER *LPACMSTREAMHEADER;
typedef ICatalogFileInfo *LPCATALOGFILEINFO;
typedef struct tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;
typedef ICommDlgBrowser2 *LPCOMMDLGBROWSER2;
typedef struct tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;
typedef IConnectionPoint *LPCONNECTIONPOINT;
typedef ICreateErrorInfo *LPCREATEERRORINFO;
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
typedef struct _DDVIDEOPORTCAPS *LPDDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC *LPDDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO *LPDDVIDEOPORTINFO;
typedef struct IDirect3DDevice8 *LPDIRECT3DDEVICE8;
typedef struct IDirect3DVolume8 *LPDIRECT3DVOLUME8;
typedef struct DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
typedef struct _DTBLRADIOBUTTON *LPDTBLRADIOBUTTON;
typedef IEnumConnections *LPENUMCONNECTIONS;
typedef struct IEnumExtraSearch *LPENUMEXTRASEARCH;
typedef IEnumJavaPackage *LPENUMJAVAPACKAGE;
typedef IEnumPropertyMap *LPENUMPROPERTYMAP;
typedef IEnumSTATPROPBAG *LPENUMSTATPROPBAG;
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
typedef struct _C6832D807A2747A4D0CBF13E34E0B28B *LPEXP_DARWIN_LINK;
typedef struct _FILEDESCRIPTORA *LPFILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW *LPFILEDESCRIPTORW;
typedef IFontCacheNotify *LPFONTCACHENOTIFY;
typedef struct tagHTTPCONTACTINFO *LPHTTPCONTACTINFO;
typedef struct tagHTTPMAILGETPROP *LPHTTPMAILGETPROP;
typedef struct tagHTTPMEMBERERROR *LPHTTPMEMBERERROR;
typedef struct tagIMECHARPOSITION *LPIMECHARPOSITION;
typedef struct lineaddresscaps_tag *LPLINEADDRESSCAPS;
typedef struct linecountrylist_tag *LPLINECOUNTRYLIST;
typedef struct lineextensionid_tag *LPLINEEXTENSIONID;
typedef struct lineforwardlist_tag *LPLINEFORWARDLIST;
typedef struct linemonitortone_tag *LPLINEMONITORTONE;
typedef struct midiproptimediv_tag *LPMIDIPROPTIMEDIV;
typedef IMimeMessageTree *LPMIMEMESSAGETREE;
typedef IMimeObjResolver *LPMIMEOBJRESOLVER;
typedef IMimePropertySet *LPMIMEPROPERTYSET;
typedef struct MSGQUEUEOPTIONS_OS *LPMSGQUEUEOPTIONS;
typedef INotificationMgr *LPNOTIFICATIONMGR;
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef IOleCacheControl *LPOLECACHECONTROL;
typedef IOleDocumentSite *LPOLEDOCUMENTSITE;
typedef IOleDocumentView *LPOLEDOCUMENTVIEW;
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct phonebuttoninfo_tag *LPPHONEBUTTONINFO;
typedef IPointerInactive *LPPOINTERINACTIVE;
typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct tagRECONVERTSTRING *LPRECONVERTSTRING;
typedef IServiceProvider *LPSERVICEPROVIDER;
typedef struct _SHDESCRIPTIONID *LPSHDESCRIPTIONID;
typedef struct _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;
typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;
typedef ISyncMgrRegister *LPSYNCMGRREGISTER;
typedef ISyncScheduleMgr *LPSYNCSCHEDULEMGR;
typedef ITargetContainer *LPTARGETCONTAINER;
typedef ITargetEmbedding *LPTARGETEMBEDDING;
typedef ITargetFramePriv *LPTARGETFRAMEPRIV;
typedef struct _DD2E0983FBF83F36606C69DABA2BC276 *LPTBREPLACEBITMAP;
typedef ITransactionData *LPTRANSACTIONDATA;
typedef struct tagTVINSERTSTRUCTA *LPTVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW *LPTVINSERTSTRUCTW;
typedef struct _BC2FB811D417144E831EE3AEA4A279C8 *LPURL_COMPONENTSA;
typedef struct _2B4FDC4BF487E67F052937EE78FAE255 *LPURL_COMPONENTSW;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
typedef struct _VIDEOPARAMETERS *LPVIDEOPARAMETERS;
typedef struct _WINDOWS_IAS_SET *LPWINDOWS_IAS_SET;
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
typedef struct _WIN_CERTIFICATE *LPWIN_CERTIFICATE;
typedef struct _WSANSClassInfoA *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *LPWSANSCLASSINFOW;
enum MACRO_ADDRESS_ONE {ADDRESS_ONE = 0x8,};
enum MACRO_ADDR_TOFROM {ADDR_TOFROM_MASK = 0x1,ADDR_DSN_MASK = 0xF0,};
enum MACRO_AMINTERLACE {AMINTERLACE_IsInterlaced = 0x1,AMINTERLACE_1FieldPerSample = 0x2,AMINTERLACE_Field1First = 0x4,AMINTERLACE_UNUSED = 0x8,AMINTERLACE_FieldPatternMask = 0x30,AMINTERLACE_FieldPatField1Only = 0x0,AMINTERLACE_FieldPatField2Only = 0x10,AMINTERLACE_FieldPatBothRegular = 0x20,AMINTERLACE_FieldPatBothIrregular = 0x30,AMINTERLACE_DisplayModeMask = 0xC0,AMINTERLACE_DisplayModeBobOnly = 0x0,AMINTERLACE_DisplayModeWeaveOnly = 0x40,AMINTERLACE_DisplayModeBobOrWeave = 0x80,};
enum MACRO_APPLICATION {APPLICATION_ERROR_MASK = 0x20000000,};
enum MACRO_AVISTDINDEX {AVISTDINDEX_DELTAFRAME = 0x80000000,AVISTDINDEX_SIZEMASK = 0x7FFFFFFF,};
enum MACRO_AnalogVideo {AnalogVideo_NTSC_Mask = 0x7,AnalogVideo_PAL_Mask = 0xFF0,AnalogVideo_SECAM_Mask = 0xFF000,};
enum MACRO_BPC_CONNECT {BPC_CONNECT_STATE_UNCOMMITTED = 0,BPC_CONNECT_STATE_QUEUED = 1,BPC_CONNECT_STATE_ACTIVE = 2,BPC_CONNECT_STATE_DISCONNECTING = 3,BPC_GUIDE_GENERIC_MIN = 16777216,BPC_GUIDE_GENERIC_MAX = 33554431,BPC_GUIDE_PROVIDER_MIN = 33554432,BPC_GUIDE_PROVIDER_MAX = 50331647,BPC_GUIDE_ADAPTER_MIN = 50331648,BPC_GUIDE_ADAPTER_MAX = 67108863,BPC_CATEGORY_BPC = 16777216,BPC_CATEGORY_PROVIDER = 33554432,BPC_CATEGORY_ADAPTER = 50331648,BPC_STATUS_CONNECTED = 1,BPC_STATUS_QUEUED = 2,BPC_STATUS_ACTIVE = 3,BPC_STATUS_DISCONNECTED = 4,BPC_STATUS_OVERFLOW = 5,BPC_STATUS_DATA_STOP = 6,BPC_STATUS_DATA_START = 7,BPC_STATUS_DATA_ERROR = 8,};
enum MACRO_CACHE_ENTRY {NORMAL_CACHE_ENTRY = 0x1,STICKY_CACHE_ENTRY = 0x4,EDITED_CACHE_ENTRY = 0x8,TRACK_OFFLINE_CACHE_ENTRY = 0x10,TRACK_ONLINE_CACHE_ENTRY = 0x20,SPARSE_CACHE_ENTRY = 0x10000,COOKIE_CACHE_ENTRY = 0x100000,URLHISTORY_CACHE_ENTRY = 0x200000,};
enum MACRO_CCHFORMNAME {CCHFORMNAME = 32,};
enum MACRO_CCHMAX_CSET {CCHMAX_CSET_NAME = 128,CCHMAX_LANG_NAME = 128,CCHMAX_FACE_NAME = 128,};
enum MACRO_CEOIDINFOEX {CEOIDINFOEX_VERSION = 1,};
enum MACRO_CERT_CREATE {CERT_CREATE_SELFSIGN_NO_SIGN = 1,CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2,};
enum MACRO_CERT_SIMPLE {CERT_SIMPLE_NAME_STR = 1,CERT_OID_NAME_STR = 2,CERT_X500_NAME_STR = 3,CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,CERT_NAME_STR_NO_PLUS_FLAG = 536870912,CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,CERT_NAME_STR_CRLF_FLAG = 134217728,CERT_NAME_STR_COMMA_FLAG = 67108864,CERT_NAME_STR_REVERSE_FLAG = 33554432,CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,CERT_NAME_EMAIL_TYPE = 1,CERT_NAME_RDN_TYPE = 2,CERT_NAME_ATTR_TYPE = 3,CERT_NAME_SIMPLE_DISPLAY_TYPE = 4,CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5,CERT_NAME_DNS_TYPE = 6,CERT_NAME_URL_TYPE = 7,CERT_NAME_UPN_TYPE = 8,CERT_NAME_ISSUER_FLAG = 1,CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536,};
enum MACRO_CERT_VERIFY {CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 0x1,CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 0x2,CERT_VERIFY_NO_TIME_CHECK_FLAG = 0x4,CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 0x8,CERT_VERIFY_UPDATED_CTL_FLAG = 0x1,CERT_CONTEXT_REVOCATION_TYPE = 0x1,CERT_VERIFY_REV_CHAIN_FLAG = 0x1,CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 0x2,CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 0x4,CERT_UNICODE_IS_RDN_ATTRS_FLAG = 0x1,CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 0x2,};
enum MACRO_CLR_HILIGHT {CLR_HILIGHT = -16777216,};
enum MACRO_COMPRESSION {COMPRESSION_FORMAT_NONE = 0x0,COMPRESSION_FORMAT_DEFAULT = 0x1,COMPRESSION_FORMAT_LZNT1 = 0x2,COMPRESSION_ENGINE_STANDARD = 0x0,COMPRESSION_ENGINE_MAXIMUM = 0x100,};
enum MACRO_CONTEXT_OID {CONTEXT_OID_CERTIFICATE = 1,CONTEXT_OID_CRL = 2,CONTEXT_OID_CTL = 3,CONTEXT_OID_PKCS7 = 4,CONTEXT_OID_CAPI2_ANY = 5,};
enum MACRO_CRYPT_FIRST {CRYPT_FIRST = 1,CRYPT_NEXT = 2,CRYPT_SGC_ENUM = 4,CRYPT_IMPL_HARDWARE = 1,CRYPT_IMPL_SOFTWARE = 2,CRYPT_IMPL_MIXED = 3,CRYPT_IMPL_UNKNOWN = 4,CRYPT_IMPL_REMOVABLE = 8,CRYPT_SEC_DESCR = 1,CRYPT_PSTORE = 2,CRYPT_UI_PROMPT = 4,CRYPT_FLAG_PCT1 = 1,CRYPT_FLAG_SSL2 = 2,CRYPT_FLAG_SSL3 = 4,CRYPT_FLAG_TLS1 = 8,CRYPT_FLAG_IPSEC = 16,CRYPT_FLAG_SIGNING = 32,CRYPT_SGC = 1,CRYPT_FASTSGC = 2,};
enum MACRO_CRYPT_KEYID {CRYPT_KEYID_MACHINE_FLAG = 0x20,CRYPT_KEYID_ALLOC_FLAG = 0x8000,CRYPT_KEYID_DELETE_FLAG = 0x10,CRYPT_KEYID_SET_NEW_FLAG = 0x2000,};
enum MACRO_D3DLINECAPS {D3DLINECAPS_TEXTURE = 0x1,D3DLINECAPS_ZTEST = 0x2,D3DLINECAPS_BLEND = 0x4,D3DLINECAPS_ALPHACMP = 0x8,D3DLINECAPS_FOG = 0x10,};
enum MACRO_D3DPCMPCAPS {D3DPCMPCAPS_NEVER = 0x1,D3DPCMPCAPS_LESS = 0x2,D3DPCMPCAPS_EQUAL = 0x4,D3DPCMPCAPS_LESSEQUAL = 0x8,D3DPCMPCAPS_GREATER = 0x10,D3DPCMPCAPS_NOTEQUAL = 0x20,D3DPCMPCAPS_GREATEREQUAL = 0x40,D3DPCMPCAPS_ALWAYS = 0x80,};
enum MACRO_D3DVTXPCAPS {D3DVTXPCAPS_TEXGEN = 0x1,D3DVTXPCAPS_MATERIALSOURCE7 = 0x2,D3DVTXPCAPS_DIRECTIONALLIGHTS = 0x8,D3DVTXPCAPS_POSITIONALLIGHTS = 0x10,D3DVTXPCAPS_LOCALVIEWER = 0x20,D3DVTXPCAPS_TWEENING = 0x40,D3DVTXPCAPS_NO_VSDT_UBYTE4 = 0x80,};
enum MACRO_DBPARAMTYPE {DBPARAMTYPE_INPUT = 0x1,DBPARAMTYPE_INPUTOUTPUT = 0x2,DBPARAMTYPE_OUTPUT = 0x3,DBPARAMTYPE_RETURNVALUE = 0x4,};
enum MACRO_DBPROPFLAGS {DBPROPFLAGS_PERSIST = 0x2000,};
enum MACRO_DC_HASDEFID {DC_HASDEFID = 0x534B,};
enum MACRO_DDALPHACAPS {DDALPHACAPS_BLTALPHAPIXELS = 0x1,DDALPHACAPS_BLTSATURATE = 0x2,DDALPHACAPS_BLTPREMULT = 0x4,DDALPHACAPS_BLTNONPREMULT = 0x8,DDALPHACAPS_BLTARGBSCALE1F = 0x10,DDALPHACAPS_BLTARGBSCALE2F = 0x20,DDALPHACAPS_BLTARGBSCALE4F = 0x40,DDALPHACAPS_BLTALPHAFILL = 0x80,DDALPHACAPS_BLTALPHAANDARGBSCALING = 0x100,DDALPHACAPS_OVERLAYALPHAPIXELS = 0x10000,DDALPHACAPS_OVERLAYSATURATE = 0x20000,DDALPHACAPS_OVERLAYPREMULT = 0x40000,DDALPHACAPS_OVERLAYNONPREMULT = 0x80000,DDALPHACAPS_OVERLAYARGBSCALE1F = 0x100000,DDALPHACAPS_OVERLAYARGBSCALE2F = 0x200000,DDALPHACAPS_OVERLAYARGBSCALE4F = 0x400000,DDALPHACAPS_OVERLAYALPHAANDKEYDEST = 0x800000,DDALPHACAPS_OVERLAYALPHAANDARGBSCALING = 0x1000000,};
enum MACRO_DDVPCONNECT {DDVPCONNECT_DOUBLECLOCK = 0x1,DDVPCONNECT_VACT = 0x2,DDVPCONNECT_INVERTPOLARITY = 0x4,DDVPCONNECT_DISCARDSVREFDATA = 0x8,DDVPCONNECT_HALFLINE = 0x10,DDVPCONNECT_INTERLACED = 0x20,DDVPCONNECT_SHAREEVEN = 0x40,DDVPCONNECT_SHAREODD = 0x80,};
enum MACRO_DEBUG_EVENT {EXCEPTION_DEBUG_EVENT = 1,CREATE_THREAD_DEBUG_EVENT = 2,CREATE_PROCESS_DEBUG_EVENT = 3,EXIT_THREAD_DEBUG_EVENT = 4,EXIT_PROCESS_DEBUG_EVENT = 5,LOAD_DLL_DEBUG_EVENT = 6,UNLOAD_DLL_DEBUG_EVENT = 7,OUTPUT_DEBUG_STRING_EVENT = 8,RIP_EVENT = 9,};
enum MACRO_DEFAULT_MAX {DEFAULT_MAX_MESSAGES = 16,};
enum MACRO_DEL_FOLDERS {DEL_FOLDERS = 0x4,DEL_ASSOCIATED = 0x8,};
enum MACRO_DISPID_BASE {DISPID_BASE = 0x0,};
enum MACRO_DISPID_LOAD {DISPID_LOAD = 1,DISPID_UNLOAD = 2,DISPID_SUBMIT = 3,DISPID_FOCUS = 4,DISPID_CHANGE = 5,DISPID_BLUR = 6,DISPID_MOUSEOVER = 8,DISPID_PARSECOMPLETE = 9,DISPID_ABORT = 10,DISPID_MOUSEOUT = 12,};
enum MACRO_DISPID_THIS {DISPID_THIS = -613,DISPID_STARTENUM = -1,};
enum MACRO_DISPID_TIME {DISPID_TIME_MIN = 0x1,DISPID_TIME_MAX = 0x270F,DISPID_TIMEELEMENT_BASE = 0x100,DISPID_TIMEBODYELEMENT_BASE = 0x200,DISPID_TIMEMEDIAELEMENT_BASE = 0x400,DISPID_TIMEEVENTELEMENT_BASE = 0xA00,DISPID_TIMEFACTORY_BASE = 0x500,DISPID_TIMECOLLECTION_BASE = 0x600,DISPID_TIMECOLLECTION_RESERVED_BASE = 0x700,DISPID_TIMEMEDIAPLAYER_BASE = 0x800,DISPID_TIMEPLAYLIST_BASE = 0xB00,DISPID_TIMEPLAYITEM_BASE = 0xC00,DISPID_TIMEDVDPLAYEROBJECT_BASE = 0xD00,DISPID_TIMEANIMATIONELEMENT_BASE = 0x300,DISPID_SMILANIMATIONCOMPSITE_BASE = 0xE00,DISPID_SMILANIMATIONFRAGMENT_BASE = 0xF00,DISPID_TIMESTATE_BASE = 0x1000,DISPID_TIMEDMPLAYEROBJECT_BASE = 0x1100,DISPID_TIMEMEDIAPLAYERSITE_BASE = 0x1200,DISPID_TIMEMEDIAPLAYERCONTROL_BASE = 0x1300,DISPID_COLLECTION_RESERVED_MIN = 0x700,DISPID_COLLECTION_RESERVED_MAX = 0x7FF,DISPID_TIMEELEMENT_ACCELERATE = 0x101,DISPID_TIMEELEMENT_ACCELERATEFROM = 0x102,DISPID_TIMEELEMENT_AUTOREVERSE = 0x103,DISPID_TIMEELEMENT_BEGIN = 0x104,DISPID_TIMEELEMENT_DECELERATE = 0x105,DISPID_TIMEELEMENT_DECELERATETO = 0x106,DISPID_TIMEELEMENT_DUR = 0x107,DISPID_TIMEELEMENT_END = 0x108,DISPID_TIMEELEMENT_FILL = 0x10A,DISPID_TIMEELEMENT_MUTE = 0x10B,DISPID_TIMEELEMENT_REPEATCOUNT = 0x10C,DISPID_TIMEELEMENT_REPEATDUR = 0x10D,DISPID_TIMEELEMENT_RESTART = 0x10E,DISPID_TIMEELEMENT_SPEED = 0x10F,DISPID_TIMEELEMENT_SYNCBEHAVIOR = 0x110,DISPID_TIMEELEMENT_SYNCMASTER = 0x111,DISPID_TIMEELEMENT_SYNCTOLERANCE = 0x112,DISPID_TIMEELEMENT_TIMEACTION = 0x113,DISPID_TIMEELEMENT_TIMECONTAINER = 0x114,DISPID_TIMEELEMENT_UPDATEMODE = 0x115,DISPID_TIMEELEMENT_VOLUME = 0x116,DISPID_TIMEELEMENT_CURRTIMESTATE = 0x120,DISPID_TIMEELEMENT_TIMEALL = 0x121,DISPID_TIMEELEMENT_TIMECHILDREN = 0x122,DISPID_TIMEELEMENT_TIMEPARENT = 0x123,DISPID_TIMEELEMENT_ISPAUSED = 0x124,DISPID_TIMEELEMENT_BEGINELEMENT = 0x130,DISPID_TIMEELEMENT_BEGINELEMENTAT = 0x131,DISPID_TIMEELEMENT_ENDELEMENT = 0x132,DISPID_TIMEELEMENT_ENDELEMENTAT = 0x133,DISPID_TIMEELEMENT_PAUSEELEMENT = 0x134,DISPID_TIMEELEMENT_RESET = 0x135,DISPID_TIMEELEMENT_RESUMEELEMENT = 0x136,DISPID_TIMEELEMENT_SEEKACTIVETIME = 0x137,DISPID_TIMEELEMENT_SEEKSEGMENTTIME = 0x138,DISPID_TIMEELEMENT_SEEKTO = 0x139,DISPID_TIMEELEMENT_UPDATE = 0x13A,DISPID_TIMEELEMENT_DOCUMENTTIMETOPARENTTIME = 0x13B,DISPID_TIMEELEMENT_PARENTTIMETODOCUMENTTIME = 0x13C,DISPID_TIMEELEMENT_PARENTTIMETOACTIVETIME = 0x13D,DISPID_TIMEELEMENT_ACTIVETIMETOPARENTTIME = 0x13E,DISPID_TIMEELEMENT_ACTIVETIMETOSEGMENTTIME = 0x13F,DISPID_TIMEELEMENT_SEGMENTTIMETOACTIVETIME = 0x140,DISPID_TIMEELEMENT_SEGMENTTIMETOSIMPLETIME = 0x141,DISPID_TIMEELEMENT_SIMPLETIMETOSEGMENTTIME = 0x142,DISPID_TIMEELEMENT_ENDSYNC = 0x150,DISPID_TIMEELEMENT_ACTIVEELEMENTS = 0x160,DISPID_TIMEELEMENT_HASMEDIA = 0x161,DISPID_TIMEELEMENT_NEXTELEMENT = 0x170,DISPID_TIMEELEMENT_PREVELEMENT = 0x171,DISPID_TIMEMEDIAELEMENT_CLIPBEGIN = 0x401,DISPID_TIMEMEDIAELEMENT_CLIPEND = 0x402,DISPID_TIMEMEDIAELEMENT_PLAYER = 0x403,DISPID_TIMEMEDIAELEMENT_SRC = 0x404,DISPID_TIMEMEDIAELEMENT_TYPE = 0x405,DISPID_TIMEMEDIAELEMENT_ABSTRACT = 0x410,DISPID_TIMEMEDIAELEMENT_AUTHOR = 0x411,DISPID_TIMEMEDIAELEMENT_COPYRIGHT = 0x412,DISPID_TIMEMEDIAELEMENT_HASAUDIO = 0x413,DISPID_TIMEMEDIAELEMENT_HASVISUAL = 0x414,DISPID_TIMEMEDIAELEMENT_MEDIACAPS = 0x415,DISPID_TIMEMEDIAELEMENT_MEDIADUR = 0x416,DISPID_TIMEMEDIAELEMENT_MEDIAHEIGHT = 0x417,DISPID_TIMEMEDIAELEMENT_MEDIAWIDTH = 0x418,DISPID_TIMEMEDIAELEMENT_PLAYEROBJECT = 0x419,DISPID_TIMEMEDIAELEMENT_PLAYLIST = 0x41A,DISPID_TIMEMEDIAELEMENT_RATING = 0x41B,DISPID_TIMEMEDIAELEMENT_TITLE = 0x41C,DISPID_TIMEMEDIAELEMENT_HASPLAYLIST = 0x41D,DISPID_TIMEMEDIAELEMENT_CANPAUSE = 0x430,DISPID_TIMEMEDIAELEMENT_CANSEEK = 0x432,DISPID_TIMEANIMATIONELEMENT_ATTRIBUTENAME = 0x301,DISPID_TIMEANIMATIONELEMENT_BY = 0x302,DISPID_TIMEANIMATIONELEMENT_CALCMODE = 0x303,DISPID_TIMEANIMATIONELEMENT_FROM = 0x304,DISPID_TIMEANIMATIONELEMENT_KEYSPLINES = 0x305,DISPID_TIMEANIMATIONELEMENT_KEYTIMES = 0x306,DISPID_TIMEANIMATIONELEMENT_TARGETELEMENT = 0x307,DISPID_TIMEANIMATIONELEMENT_TO = 0x308,DISPID_TIMEANIMATIONELEMENT_VALUES = 0x309,DISPID_TIMEANIMATIONELEMENT_ORIGIN = 0x30A,DISPID_TIMEANIMATIONELEMENT_PATH = 0x30B,DISPID_TIMEANIMATIONELEMENT_ADDITIVE = 0x30C,DISPID_TIMEANIMATIONELEMENT_ACCUMULATE = 0x30D,DISPID_SMILANIMATIONCOMPSITE_ADDFRAGMENT = 0xE01,DISPID_SMILANIMATIONCOMPSITE_REMOVEFRAGMENT = 0xE02,DISPID_SMILANIMATIONCOMPSITE_INSERTFRAGMENT = 0xE03,DISPID_SMILANIMATIONCOMPSITE_ENUMERATEFRAGMENTS = 0xE04,DISPID_SMILANIMATIONCOMPSITE_REGISTERFACTORY = 0xE05,DISPID_SMILANIMATIONCOMPSITE_UNREGISTER_FACTORY = 0xE06,DISPID_SMILANIMATIONFRAGMENT_ELEMENT = 0xF01,DISPID_SMILANIMATIONFRAGMENT_VALUE = 0xF02,DISPID_SMILANIMATIONFRAGMENT_DETACHFROMCOMPOSER = 0xF03,DISPID_TIMEEVENTELEMENT_TYPE = 0xA01,DISPID_TIMEEVENTELEMENT_ACTIVE = 0xA02,DISPID_TIMEFACTORY_CREATETIMEELEMENT = 0x501,DISPID_TIMEFACTORY_CREATETIMEELEMENTBODY = 0x502,DISPID_TIMEFACTORY_CREATETIMEDAELEMENT = 0x503,DISPID_TIMEFACTORY_CREATETIMEMEDIAELEMENT = 0x504,DISPID_TIMEELEMENTCOLLECTION_LENGTH = 0x601,DISPID_TIMEELEMENTCOLLECTION__NEWENUM = 0xFFFFFFFC,DISPID_TIMEELEMENTCOLLECTION_ITEM = 0x0,DISPID_TIMEELEMENTCOLLECTION_TAGS = 0x602,DISPID_TIMEMEDIAPLAYERSITE_TIMEELEMENT = 0x1201,DISPID_TIMEMEDIAPLAYERSITE_TIMESTATE = 0x1202,DISPID_TIMEMEDIAPLAYERSITE_REPORTERROR = 0x1203,DISPID_TIMEMEDIAPLAYER_INIT = 0x801,DISPID_TIMEMEDIAPLAYER_DETACH = 0x802,DISPID_TIMEMEDIAPLAYER_BEGIN = 0x810,DISPID_TIMEMEDIAPLAYER_END = 0x811,DISPID_TIMEMEDIAPLAYER_RESUME = 0x812,DISPID_TIMEMEDIAPLAYER_PAUSE = 0x813,DISPID_TIMEMEDIAPLAYER_REPEAT = 0x814,DISPID_TIMEMEDIAPLAYER_RESET = 0x815,DISPID_TIMEMEDIAPLAYER_SEEK = 0x816,DISPID_TIMEMEDIAPLAYER_SRC = 0x820,DISPID_TIMEMEDIAPLAYER_CLIPBEGIN = 0x821,DISPID_TIMEMEDIAPLAYER_CLIPEND = 0x822,DISPID_TIMEMEDIAPLAYER_ABSTRACT = 0x830,DISPID_TIMEMEDIAPLAYER_AUTHOR = 0x831,DISPID_TIMEMEDIAPLAYER_CANPAUSE = 0x832,DISPID_TIMEMEDIAPLAYER_CANSEEK = 0x834,DISPID_TIMEMEDIAPLAYER_CLIPDUR = 0x835,DISPID_TIMEMEDIAPLAYER_COPYRIGHT = 0x836,DISPID_TIMEMEDIAPLAYER_CURRTIME = 0x837,DISPID_TIMEMEDIAPLAYER_CUSTOM_OBJECT = 0x838,DISPID_TIMEMEDIAPLAYER_HASAUDIO = 0x839,DISPID_TIMEMEDIAPLAYER_HASVISUAL = 0x83A,DISPID_TIMEMEDIAPLAYER_MEDIADUR = 0x83B,DISPID_TIMEMEDIAPLAYER_MEDIAHEIGHT = 0x83C,DISPID_TIMEMEDIAPLAYER_MEDIAWIDTH = 0x83D,DISPID_TIMEMEDIAPLAYER_PLAYLIST = 0x83E,DISPID_TIMEMEDIAPLAYER_RATING = 0x83F,DISPID_TIMEMEDIAPLAYER_STATE = 0x840,DISPID_TIMEMEDIAPLAYER_TITLE = 0x841,DISPID_TIMEMEDIAPLAYERCONTROL_GETCONTROL = 0x1301,DISPID_ACTIVEELMENTS_LENGTH = 0x5DC,DISPID_ACTIVEELMENTS_NEWENUM = 0xFFFFFFFC,DISPID_ACTIVEELMENTS_ITEM = 0x0,DISPID_TIMEPLAYLIST_ACTIVETRACK = 0xB01,DISPID_TIMEPLAYLIST_DUR = 0xB02,DISPID_TIMEPLAYLIST_ITEM = 0x0,DISPID_TIMEPLAYLIST_LENGTH = 0x5DC,DISPID_TIMEPLAYLIST_NEWENUM = 0xFFFFFFFC,DISPID_TIMEPLAYLIST_NEXTTRACK = 0xB03,DISPID_TIMEPLAYLIST_PREVTRACK = 0xB04,DISPID_TIMEPLAYITEM_ABSTRACT = 0xC01,DISPID_TIMEPLAYITEM_AUTHOR = 0xC02,DISPID_TIMEPLAYITEM_COPYRIGHT = 0xC03,DISPID_TIMEPLAYITEM_DUR = 0xC04,DISPID_TIMEPLAYITEM_INDEX = 0xC05,DISPID_TIMEPLAYITEM_RATING = 0xC06,DISPID_TIMEPLAYITEM_SRC = 0xC07,DISPID_TIMEPLAYITEM_TITLE = 0xC08,DISPID_TIMEPLAYITEM_SETACTIVE = 0xC0A,DISPID_ITIMEDVDPLAYEROBJECT_UPPERBUTTONSEL = 0xD01,DISPID_ITIMEDVDPLAYEROBJECT_LOWERBUTTONSEL = 0xD02,DISPID_ITIMEDVDPLAYEROBJECT_LEFTBUTTONSEL = 0xD03,DISPID_ITIMEDVDPLAYEROBJECT_RIGHTBUTTONSEL = 0xD04,DISPID_ITIMEDVDPLAYEROBJECT_BUTTONACTIVATE = 0xD05,DISPID_ITIMEDVDPLAYEROBJECT_GOTOMENU = 0xD06,DISPID_TIMESTATE_ACTIVEDUR = 0x1001,DISPID_TIMESTATE_ACTIVETIME = 0x1002,DISPID_TIMESTATE_ISACTIVE = 0x1003,DISPID_TIMESTATE_ISON = 0x1004,DISPID_TIMESTATE_ISPAUSED = 0x1005,DISPID_TIMESTATE_ISMUTED = 0x1006,DISPID_TIMESTATE_PARENTTIMEBEGIN = 0x1007,DISPID_TIMESTATE_PARENTTIMEEND = 0x1008,DISPID_TIMESTATE_PROGRESS = 0x1009,DISPID_TIMESTATE_REPEATCOUNT = 0x100A,DISPID_TIMESTATE_SEGMENTDUR = 0x100B,DISPID_TIMESTATE_SEGMENTTIME = 0x100C,DISPID_TIMESTATE_SIMPLEDUR = 0x100D,DISPID_TIMESTATE_SIMPLETIME = 0x100E,DISPID_TIMESTATE_SPEED = 0x100F,DISPID_TIMESTATE_STATE = 0x1010,DISPID_TIMESTATE_STATESTRING = 0x1011,DISPID_TIMESTATE_VOLUME = 0x1012,DISPID_ITIMEDMPLAYEROBJECT_HASDM = 0x1101,DISPID_XMLELEMENTCOLLECTION = 0x10000,DISPID_XMLELEMENTCOLLECTION_LENGTH = 0x10001,DISPID_XMLELEMENTCOLLECTION_NEWENUM = 0xFFFFFFFC,DISPID_XMLELEMENTCOLLECTION_ITEM = 0x10003,DISPID_XMLDOCUMENT = 0x10064,DISPID_XMLDOCUMENT_ROOT = 0x10065,DISPID_XMLDOCUMENT_FILESIZE = 0x10066,DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 0x10067,DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 0x10068,DISPID_XMLDOCUMENT_URL = 0x10069,DISPID_XMLDOCUMENT_MIMETYPE = 0x1006A,DISPID_XMLDOCUMENT_READYSTATE = 0x1006B,DISPID_XMLDOCUMENT_CREATEELEMENT = 0x1006C,DISPID_XMLDOCUMENT_CHARSET = 0x1006D,DISPID_XMLDOCUMENT_VERSION = 0x1006E,DISPID_XMLDOCUMENT_DOCTYPE = 0x1006F,DISPID_XMLDOCUMENT_DTDURL = 0x10070,DISPID_XMLDOCUMENT_ASYNC = 0x10071,DISPID_XMLDOCUMENT_CASEINSENSITIVE = 0x10072,DISPID_XMLDOCUMENT_BASEURL = 0x10073,DISPID_XMLDOCUMENT_XML = 0x10074,DISPID_XMLDOCUMENT_LASTERROR = 0x10075,DISPID_XMLDOCUMENT_TRIMWHITESPACE = 0x10076,DISPID_XMLDOCUMENT_COMMIT = 0x10077,DISPID_XMLELEMENT = 0x100C8,DISPID_XMLELEMENT_TAGNAME = 0x100C9,DISPID_XMLELEMENT_PARENT = 0x100CA,DISPID_XMLELEMENT_SETATTRIBUTE = 0x100CB,DISPID_XMLELEMENT_GETATTRIBUTE = 0x100CC,DISPID_XMLELEMENT_REMOVEATTRIBUTE = 0x100CD,DISPID_XMLELEMENT_CHILDREN = 0x100CE,DISPID_XMLELEMENT_TYPE = 0x100CF,DISPID_XMLELEMENT_TEXT = 0x100D0,DISPID_XMLELEMENT_ADDCHILD = 0x100D1,DISPID_XMLELEMENT_REMOVECHILD = 0x100D2,DISPID_XMLELEMENT_ATTRIBUTES = 0x100D3,DISPID_XMLNOTIFSINK = 0x1012C,DISPID_XMLNOTIFSINK_CHILDADDED = 0x1012D,DISPID_XMLATTRIBUTE = 0x10190,DISPID_XMLATTRIBUTE_NAME = 0x10191,DISPID_XMLATTRIBUTE_VALUE = 0x10192,DISPID_XMLERROR = 0x10190,DISPID_XMLERROR_REASON = 0x10191,DISPID_XMLERROR_LINE = 0x10192,DISPID_XMLERROR_POS = 0x10193,DISPID_NODE = 0x101F4,DISPID_NODE_NAME = 0x101F5,DISPID_NODE_PARENT = 0x101F6,DISPID_NODE_TYPE = 0x101F7,DISPID_NODE_VALUE = 0x101F8,DISPID_NODE_SETATTRIBUTE = 0x101F9,DISPID_NODE_GETATTRIBUTE = 0x101FA,DISPID_NODE_REMOVEATTRIBUTE = 0x101FB,DISPID_NODE_ATTRIBUTES = 0x101FC,DISPID_NODE_ADD = 0x101FD,DISPID_NODE_REMOVE = 0x101FE,DISPID_NODE_CHILDREN = 0x101FF,DISPID_NODELIST = 0x10258,DISPID_NODELIST_NEWENUM = 0x10259,DISPID_NODELIST_NEXT = 0x1025A,DISPID_NODELIST_CURRENT = 0x1025B,DISPID_NODELIST_MOVE = 0x1025C,DISPID_NODELIST_MOVETONODE = 0x1025D,DISPID_NODELIST_LENGTH = 0x1025E,DISPID_NODELIST_ITEM = 0x1025F,DISPID_DOM_BASE = 0x1,DISPID_DOM_COLLECTION_BASE = 0xF4240,DISPID_DOM_COLLECTION_MAX = 0x2DC6BF,DISPID_DOM_NODE = 0x1,DISPID_DOM_NODE_NODENAME = 0x2,DISPID_DOM_NODE_NODEVALUE = 0x3,DISPID_DOM_NODE_NODETYPE = 0x4,DISPID_DOM_NODE_NODETYPEENUM = 0x5,DISPID_DOM_NODE_PARENTNODE = 0x6,DISPID_DOM_NODE_CHILDNODES = 0x7,DISPID_DOM_NODE_FIRSTCHILD = 0x8,DISPID_DOM_NODE_LASTCHILD = 0x9,DISPID_DOM_NODE_PREVIOUSSIBLING = 0xA,DISPID_DOM_NODE_NEXTSIBLING = 0xB,DISPID_DOM_NODE_ATTRIBUTES = 0xC,DISPID_DOM_NODE_INSERTBEFORE = 0xD,DISPID_DOM_NODE_REPLACECHILD = 0xE,DISPID_DOM_NODE_REMOVECHILD = 0xF,DISPID_DOM_NODE_APPENDCHILD = 0x10,DISPID_DOM_NODE_HASCHILDNODES = 0x11,DISPID_DOM_NODE_OWNERDOC = 0x12,DISPID_DOM_NODE_CLONENODE = 0x13,DISPID_XMLDOM_NODE = 0x14,DISPID_XMLDOM_NODE_STRINGTYPE = 0x15,DISPID_XMLDOM_NODE_SPECIFIED = 0x16,DISPID_XMLDOM_NODE_DEFINITION = 0x17,DISPID_XMLDOM_NODE_TEXT = 0x18,DISPID_XMLDOM_NODE_NODETYPEDVALUE = 0x19,DISPID_XMLDOM_NODE_DATATYPE = 0x1A,DISPID_XMLDOM_NODE_XML = 0x1B,DISPID_XMLDOM_NODE_TRANSFORMNODE = 0x1C,DISPID_XMLDOM_NODE_SELECTNODES = 0x1D,DISPID_XMLDOM_NODE_SELECTSINGLENODE = 0x1E,DISPID_XMLDOM_NODE_PARSED = 0x1F,DISPID_XMLDOM_NODE_NAMESPACE = 0x20,DISPID_XMLDOM_NODE_PREFIX = 0x21,DISPID_XMLDOM_NODE_BASENAME = 0x22,DISPID_XMLDOM_NODE_TRANSFORMNODETOOBJECT = 0x23,DISPID_XMLDOM_NODE__TOP = 0x24,DISPID_DOM_DOCUMENT = 0x25,DISPID_DOM_DOCUMENT_DOCTYPE = 0x26,DISPID_DOM_DOCUMENT_IMPLEMENTATION = 0x27,DISPID_DOM_DOCUMENT_DOCUMENTELEMENT = 0x28,DISPID_DOM_DOCUMENT_CREATEELEMENT = 0x29,DISPID_DOM_DOCUMENT_CREATEDOCUMENTFRAGMENT = 0x2A,DISPID_DOM_DOCUMENT_CREATETEXTNODE = 0x2B,DISPID_DOM_DOCUMENT_CREATECOMMENT = 0x2C,DISPID_DOM_DOCUMENT_CREATECDATASECTION = 0x2D,DISPID_DOM_DOCUMENT_CREATEPROCESSINGINSTRUCTION = 0x2E,DISPID_DOM_DOCUMENT_CREATEATTRIBUTE = 0x2F,DISPID_DOM_DOCUMENT_CREATEENTITY = 0x30,DISPID_DOM_DOCUMENT_CREATEENTITYREFERENCE = 0x31,DISPID_DOM_DOCUMENT_GETELEMENTSBYTAGNAME = 0x32,DISPID_DOM_DOCUMENT_TOP = 0x33,DISPID_XMLDOM_DOCUMENT = 0x34,DISPID_XMLDOM_DOCUMENT_DOCUMENTNODE = 0x35,DISPID_XMLDOM_DOCUMENT_CREATENODE = 0x36,DISPID_XMLDOM_DOCUMENT_CREATENODEEX = 0x37,DISPID_XMLDOM_DOCUMENT_NODEFROMID = 0x38,DISPID_XMLDOM_DOCUMENT_DOCUMENTNAMESPACES = 0x39,DISPID_XMLDOM_DOCUMENT_LOAD = 0x3A,DISPID_XMLDOM_DOCUMENT_PARSEERROR = 0x3B,DISPID_XMLDOM_DOCUMENT_URL = 0x3C,DISPID_XMLDOM_DOCUMENT_ASYNC = 0x3D,DISPID_XMLDOM_DOCUMENT_ABORT = 0x3E,DISPID_XMLDOM_DOCUMENT_LOADXML = 0x3F,DISPID_XMLDOM_DOCUMENT_SAVE = 0x40,DISPID_XMLDOM_DOCUMENT_VALIDATE = 0x41,DISPID_XMLDOM_DOCUMENT_RESOLVENAMESPACE = 0x42,DISPID_XMLDOM_DOCUMENT_PRESERVEWHITESPACE = 0x43,DISPID_XMLDOM_DOCUMENT_ONREADYSTATECHANGE = 0x44,DISPID_XMLDOM_DOCUMENT_ONDATAAVAILABLE = 0x45,DISPID_XMLDOM_DOCUMENT_ONTRANSFORMNODE = 0x46,DISPID_XMLDOM_DOCUMENT__TOP = 0x47,DISPID_DOM_NODELIST = 0x48,DISPID_DOM_NODELIST_ITEM = 0x49,DISPID_DOM_NODELIST_LENGTH = 0x4A,DISPID_XMLDOM_NODELIST = 0x4B,DISPID_XMLDOM_NODELIST_NEXTNODE = 0x4C,DISPID_XMLDOM_NODELIST_RESET = 0x4D,DISPID_XMLDOM_NODELIST_NEWENUM = 0x4E,DISPID_XMLDOM_NODELIST__TOP = 0x4F,DISPID_DOM_NAMEDNODEMAP = 0x50,DISPID_DOM_NAMEDNODEMAP_GETNAMEDITEM = 0x53,DISPID_DOM_NAMEDNODEMAP_SETNAMEDITEM = 0x54,DISPID_DOM_NAMEDNODEMAP_REMOVENAMEDITEM = 0x55,DISPID_XMLDOM_NAMEDNODEMAP = 0x56,DISPID_XMLDOM_NAMEDNODEMAP_GETQUALIFIEDITEM = 0x57,DISPID_XMLDOM_NAMEDNODEMAP_REMOVEQUALIFIEDITEM = 0x58,DISPID_XMLDOM_NAMEDNODEMAP_NEXTNODE = 0x59,DISPID_XMLDOM_NAMEDNODEMAP_RESET = 0x5A,DISPID_XMLDOM_NAMEDNODEMAP_NEWENUM = 0x5B,DISPID_XMLDOM_NAMEDNODEMAP__TOP = 0x5C,DISPID_DOM_W3CWRAPPERS = 0x5D,DISPID_DOM_DOCUMENTFRAGMENT = 0x5E,DISPID_DOM_DOCUMENTFRAGMENT__TOP = 0x5F,DISPID_DOM_ELEMENT = 0x60,DISPID_DOM_ELEMENT_GETTAGNAME = 0x61,DISPID_DOM_ELEMENT_GETATTRIBUTES = 0x62,DISPID_DOM_ELEMENT_GETATTRIBUTE = 0x63,DISPID_DOM_ELEMENT_SETATTRIBUTE = 0x64,DISPID_DOM_ELEMENT_REMOVEATTRIBUTE = 0x65,DISPID_DOM_ELEMENT_GETATTRIBUTENODE = 0x66,DISPID_DOM_ELEMENT_SETATTRIBUTENODE = 0x67,DISPID_DOM_ELEMENT_REMOVEATTRIBUTENODE = 0x68,DISPID_DOM_ELEMENT_GETELEMENTSBYTAGNAME = 0x69,DISPID_DOM_ELEMENT_NORMALIZE = 0x6A,DISPID_DOM_ELEMENT__TOP = 0x6B,DISPID_DOM_DATA = 0x6C,DISPID_DOM_DATA_DATA = 0x6D,DISPID_DOM_DATA_LENGTH = 0x6E,DISPID_DOM_DATA_SUBSTRING = 0x6F,DISPID_DOM_DATA_APPEND = 0x70,DISPID_DOM_DATA_INSERT = 0x71,DISPID_DOM_DATA_DELETE = 0x72,DISPID_DOM_DATA_REPLACE = 0x73,DISPID_DOM_DATA__TOP = 0x74,DISPID_DOM_ATTRIBUTE = 0x75,DISPID_DOM_ATTRIBUTE_GETNAME = 0x76,DISPID_DOM_ATTRIBUTE_SPECIFIED = 0x77,DISPID_DOM_ATTRIBUTE_VALUE = 0x78,DISPID_DOM_ATTRIBUTE__TOP = 0x79,DISPID_DOM_TEXT = 0x7A,DISPID_DOM_TEXT_SPLITTEXT = 0x7B,DISPID_DOM_TEXT_JOINTEXT = 0x7C,DISPID_DOM_TEXT__TOP = 0x7D,DISPID_DOM_PI = 0x7E,DISPID_DOM_PI_TARGET = 0x7F,DISPID_DOM_PI_DATA = 0x80,DISPID_DOM_PI__TOP = 0x81,DISPID_DOM_DOCUMENTTYPE = 0x82,DISPID_DOM_DOCUMENTTYPE_NAME = 0x83,DISPID_DOM_DOCUMENTTYPE_ENTITIES = 0x84,DISPID_DOM_DOCUMENTTYPE_NOTATIONS = 0x85,DISPID_DOM_DOCUMENTTYPE__TOP = 0x86,DISPID_DOM_NOTATION = 0x87,DISPID_DOM_NOTATION_PUBLICID = 0x88,DISPID_DOM_NOTATION_SYSTEMID = 0x89,DISPID_DOM_NOTATION__TOP = 0x8A,DISPID_DOM_ENTITY = 0x8B,DISPID_DOM_ENTITY_PUBLICID = 0x8C,DISPID_DOM_ENTITY_SYSTEMID = 0x8D,DISPID_DOM_ENTITY_NOTATIONNAME = 0x8E,DISPID_DOM_ENTITY__TOP = 0x8F,DISPID_DOM_W3CWRAPPERS_TOP = 0x8F,DISPID_DOM_IMPLEMENTATION = 0x90,DISPID_DOM_IMPLEMENTATION_HASFEATURE = 0x91,DISPID_DOM_IMPLEMENTATION__TOP = 0x92,DISPID_DOM__TOP = 0xB0,DISPID_DOM_ERROR = 0xB1,DISPID_DOM_ERROR_ERRORCODE = 0xB2,DISPID_DOM_ERROR_URL = 0xB3,DISPID_DOM_ERROR_REASON = 0xB4,DISPID_DOM_ERROR_SRCTEXT = 0xB5,DISPID_DOM_ERROR_LINE = 0xB6,DISPID_DOM_ERROR_LINEPOS = 0xB7,DISPID_DOM_ERROR_FILEPOS = 0xB8,DISPID_DOM_ERROR__TOP = 0xB9,DISPID_XTLRUNTIME = 0xBA,DISPID_XTLRUNTIME_UNIQUEID = 0xBB,DISPID_XTLRUNTIME_DEPTH = 0xBC,DISPID_XTLRUNTIME_CHILDNUMBER = 0xBD,DISPID_XTLRUNTIME_ANCESTORCHILDNUMBER = 0xBE,DISPID_XTLRUNTIME_ABSOLUTECHILDNUMBER = 0xBF,DISPID_XTLRUNTIME_FORMATINDEX = 0xC0,DISPID_XTLRUNTIME_FORMATNUMBER = 0xC1,DISPID_XTLRUNTIME_FORMATDATE = 0xC2,DISPID_XTLRUNTIME_FORMATTIME = 0xC3,DISPID_XTLRUNTIME__TOP = 0xC4,DISPID_XMLDOMEVENT = 0xC5,DISPID_XMLDOMEVENT_ONREADYSTATECHANGE = 0xFFFFFD9F,DISPID_XMLDOMEVENT_ONDATAAVAILABLE = 0xC6,DISPID_XMLDOMEVENT__TOP = 0xC7,DISPID_XMLDOM_DOCUMENT2 = 0xC8,DISPID_XMLDOM_DOCUMENT2_NAMESPACES = 0xC9,DISPID_XMLDOM_DOCUMENT2_SCHEMAS = 0xCA,DISPID_XMLDOM_DOCUMENT2_VALIDATE = 0xCB,DISPID_XMLDOM_DOCUMENT2_SETPROPERTY = 0xCC,DISPID_XMLDOM_DOCUMENT2_GETPROPERTY = 0xCD,DISPID_XMLDOM_DOCUMENT2__TOP = 0xCE,DISPID_XMLDOM_SCHEMACOLLECTION = 0x2,DISPID_XMLDOM_SCHEMACOLLECTION_ADD = 0x3,DISPID_XMLDOM_SCHEMACOLLECTION_GET = 0x4,DISPID_XMLDOM_SCHEMACOLLECTION_REMOVE = 0x5,DISPID_XMLDOM_SCHEMACOLLECTION_LENGTH = 0x6,DISPID_XMLDOM_SCHEMACOLLECTION_NAMESPACEURI = 0x7,DISPID_XMLDOM_SCHEMACOLLECTION_ADDCOLLECTION = 0x8,DISPID_XMLDOM_SCHEMACOLLECTION__TOP = 0x9,DISPID_XMLDOM_SELECTION = 0x50,DISPID_XMLDOM_SELECTION_EXPR = 0x51,DISPID_XMLDOM_SELECTION_CONTEXT = 0x52,DISPID_XMLDOM_SELECTION_PEEKNODE = 0x53,DISPID_XMLDOM_SELECTION_MATCHES = 0x54,DISPID_XMLDOM_SELECTION_REMOVENEXT = 0x55,DISPID_XMLDOM_SELECTION_REMOVEALL = 0x56,DISPID_XMLDOM_SELECTION_CLONE = 0x57,DISPID_XMLDOM_SELECTION_GETPROPERTY = 0x58,DISPID_XMLDOM_SELECTION_SETPROPERTY = 0x59,DISPID_XMLDOM_SELECTION__TOP = 0x5A,DISPID_XMLDOM_TEMPLATE = 0x1,DISPID_XMLDOM_TEMPLATE_STYLESHEET = 0x2,DISPID_XMLDOM_TEMPLATE_CREATEPROCESSOR = 0x3,DISPID_XMLDOM_TEMPLATE__TOP = 0x4,DISPID_XMLDOM_PROCESSOR = 0x1,DISPID_XMLDOM_PROCESSOR_INPUT = 0x2,DISPID_XMLDOM_PROCESSOR_XSLTEMPLATE = 0x3,DISPID_XMLDOM_PROCESSOR_SETSTARTMODE = 0x4,DISPID_XMLDOM_PROCESSOR_STARTMODE = 0x5,DISPID_XMLDOM_PROCESSOR_STARTMODEURI = 0x6,DISPID_XMLDOM_PROCESSOR_OUTPUT = 0x7,DISPID_XMLDOM_PROCESSOR_TRANSFORM = 0x8,DISPID_XMLDOM_PROCESSOR_RESET = 0x9,DISPID_XMLDOM_PROCESSOR_READYSTATE = 0xA,DISPID_XMLDOM_PROCESSOR_ADDPARAMETER = 0xB,DISPID_XMLDOM_PROCESSOR_ADDOBJECT = 0xC,DISPID_XMLDOM_PROCESSOR_STYLESHEET = 0xD,DISPID_XMLDOM_PROCESSOR__TOP = 0xE,DISPID_XMLDSO = 0x10000,DISPID_XMLDSO_DOCUMENT = 0x10001,DISPID_XMLDSO_JAVADSOCOMPATIBLE = 0x10002,DISPID_SAX_XMLREADER__MIN = 0x501,DISPID_SAX_XMLREADER__MAX = 0x10000,DISPID_SAX_XMLREADER__BASE = 0x501,DISPID_SAX_XMLREADER = 0x501,DISPID_SAX_XMLREADER_GETFEATURE = 0x502,DISPID_SAX_XMLREADER_PUTFEATURE = 0x503,DISPID_SAX_XMLREADER_GETPROPERTY = 0x504,DISPID_SAX_XMLREADER_PUTPROPERTY = 0x505,DISPID_SAX_XMLREADER_ENTITYRESOLVER = 0x506,DISPID_SAX_XMLREADER_CONTENTHANDLER = 0x507,DISPID_SAX_XMLREADER_DTDHANDLER = 0x508,DISPID_SAX_XMLREADER_ERRORHANDLER = 0x509,DISPID_SAX_XMLREADER_BASEURL = 0x50A,DISPID_SAX_XMLREADER_SECUREBASEURL = 0x50B,DISPID_SAX_XMLREADER_PARSE = 0x50C,DISPID_SAX_XMLREADER_PARSEURL = 0x50D,DISPID_SAX_XMLREADER_PARENT = 0x50E,DISPID_SAX_XMLREADER__TOP = 0x50F,DISPID_SAX_XMLFILTER__BASE = 0x510,DISPID_SAX_XMLFILTER = 0x510,DISPID_SAX_XMLFILTER_GETFEATURE = 0x511,DISPID_SAX_XMLFILTER_PUTFEATURE = 0x512,DISPID_SAX_XMLFILTER_GETPROPERTY = 0x513,DISPID_SAX_XMLFILTER_PUTPROPERTY = 0x514,DISPID_SAX_XMLFILTER_ENTITYRESOLVER = 0x515,DISPID_SAX_XMLFILTER_CONTENTHANDLER = 0x516,DISPID_SAX_XMLFILTER_DTDHANDLER = 0x517,DISPID_SAX_XMLFILTER_ERRORHANDLER = 0x518,DISPID_SAX_XMLFILTER_BASEURL = 0x519,DISPID_SAX_XMLFILTER_SECUREBASEURL = 0x51A,DISPID_SAX_XMLFILTER_PARSE = 0x51B,DISPID_SAX_XMLFILTER_PARSEURL = 0x51C,DISPID_SAX_XMLFILTER_PARENT = 0x51D,DISPID_SAX_XMLFILTER__TOP = 0x51F,DISPID_SAX_LOCATOR__BASE = 0x520,DISPID_SAX_LOCATOR = 0x520,DISPID_SAX_LOCATOR_COLUMNNUMBER = 0x521,DISPID_SAX_LOCATOR_LINENUMBER = 0x522,DISPID_SAX_LOCATOR_PUBLICID = 0x523,DISPID_SAX_LOCATOR_SYSTEMID = 0x524,DISPID_SAX_LOCATOR__TOP = 0x525,DISPID_SAX_ENTITYRESOLVER__BASE = 0x526,DISPID_SAX_ENTITYRESOLVER = 0x526,DISPID_SAX_ENTITYRESOLVER_RESOLVEENTITY = 0x527,DISPID_SAX_ENTITYRESOLVER__TOP = 0x528,DISPID_SAX_CONTENTHANDLER__BASE = 0x529,DISPID_SAX_CONTENTHANDLER = 0x529,DISPID_SAX_CONTENTHANDLER_DOCUMENTLOCATOR = 0x52A,DISPID_SAX_CONTENTHANDLER_STARTDOCUMENT = 0x52B,DISPID_SAX_CONTENTHANDLER_ENDDOCUMENT = 0x52C,DISPID_SAX_CONTENTHANDLER_STARTPREFIXMAPPING = 0x52D,DISPID_SAX_CONTENTHANDLER_ENDPREFIXMAPPING = 0x52E,DISPID_SAX_CONTENTHANDLER_STARTELEMENT = 0x52F,DISPID_SAX_CONTENTHANDLER_ENDELEMENT = 0x530,DISPID_SAX_CONTENTHANDLER_CHARACTERS = 0x531,DISPID_SAX_CONTENTHANDLER_IGNORABLEWHITESPACE = 0x532,DISPID_SAX_CONTENTHANDLER_PROCESSINGINSTRUCTION = 0x533,DISPID_SAX_CONTENTHANDLER_SKIPPEDENTITY = 0x534,DISPID_SAX_CONTENTHANDLER__TOP = 0x535,DISPID_SAX_DTDHANDLER__BASE = 0x536,DISPID_SAX_DTDHANDLER = 0x536,DISPID_SAX_DTDHANDLER_NOTATIONDECL = 0x537,DISPID_SAX_DTDHANDLER_UNPARSEDENTITYDECL = 0x538,DISPID_SAX_DTDHANDLER__TOP = 0x539,DISPID_SAX_ERRORHANDLER__BASE = 0x53A,DISPID_SAX_ERRORHANDLER = 0x53A,DISPID_SAX_ERRORHANDLER_ERROR = 0x53B,DISPID_SAX_ERRORHANDLER_FATALERROR = 0x53C,DISPID_SAX_ERRORHANDLER_IGNORABLEWARNING = 0x53D,DISPID_SAX_ERRORHANDLER__TOP = 0x53E,DISPID_SAX_ATTRIBUTES__BASE = 0x53F,DISPID_SAX_ATTRIBUTES = 0x53F,DISPID_SAX_ATTRIBUTES_LENGTH = 0x540,DISPID_SAX_ATTRIBUTES_GETURI = 0x541,DISPID_SAX_ATTRIBUTES_GETLOCALNAME = 0x542,DISPID_SAX_ATTRIBUTES_GETQNAME = 0x543,DISPID_SAX_ATTRIBUTES_GETINDEXFROMNAME = 0x544,DISPID_SAX_ATTRIBUTES_GETINDEXFROMQNAME = 0x545,DISPID_SAX_ATTRIBUTES_GETTYPE = 0x546,DISPID_SAX_ATTRIBUTES_GETTYPEFROMNAME = 0x547,DISPID_SAX_ATTRIBUTES_GETTYPEFROMQNAME = 0x548,DISPID_SAX_ATTRIBUTES_GETVALUE = 0x549,DISPID_SAX_ATTRIBUTES_GETVALUEFROMNAME = 0x54A,DISPID_SAX_ATTRIBUTES_GETVALUEFROMQNAME = 0x54B,DISPID_SAX_ATTRIBUTES__TOP = 0x54C,DISPID_SAX_LEXICALHANDLER__BASE = 0x54D,DISPID_SAX_LEXICALHANDLER = 0x54D,DISPID_SAX_LEXICALHANDLER_STARTDTD = 0x54E,DISPID_SAX_LEXICALHANDLER_ENDDTD = 0x54F,DISPID_SAX_LEXICALHANDLER_STARTENTITY = 0x550,DISPID_SAX_LEXICALHANDLER_ENDENTITY = 0x551,DISPID_SAX_LEXICALHANDLER_STARTCDATA = 0x552,DISPID_SAX_LEXICALHANDLER_ENDCDATA = 0x553,DISPID_SAX_LEXICALHANDLER_COMMENT = 0x554,DISPID_SAX_LEXICALHANDLER__TOP = 0x555,DISPID_SAX_DECLHANDLER__BASE = 0x556,DISPID_SAX_DECLHANDLER = 0x556,DISPID_SAX_DECLHANDLER_ELEMENTDECL = 0x557,DISPID_SAX_DECLHANDLER_ATTRIBUTEDECL = 0x558,DISPID_SAX_DECLHANDLER_INTERNALENTITYDECL = 0x559,DISPID_SAX_DECLHANDLER_EXTERNALENTITYDECL = 0x55A,DISPID_SAX_DECLHANDLER__TOP = 0x55B,DISPID_MX_ATTRIBUTES__BASE = 0x55C,DISPID_MX_ATTRIBUTES = 0x55C,DISPID_MX_ATTRIBUTES_ADDATTRIBUTE = 0x55D,DISPID_MX_ATTRIBUTES_CLEAR = 0x55E,DISPID_MX_ATTRIBUTES_REMOVEATTRIBUTE = 0x55F,DISPID_MX_ATTRIBUTES_SETATTRIBUTE = 0x560,DISPID_MX_ATTRIBUTES_SETATTRIBUTES = 0x561,DISPID_MX_ATTRIBUTES_SETLOCALNAME = 0x562,DISPID_MX_ATTRIBUTES_SETQNAME = 0x563,DISPID_MX_ATTRIBUTES_SETTYPE = 0x564,DISPID_MX_ATTRIBUTES_SETURI = 0x565,DISPID_MX_ATTRIBUTES_SETVALUE = 0x566,DISPID_MX_ATTRIBUTES_ADDATTRIBUTEFROMINDEX = 0x567,DISPID_MX_ATTRIBUTES__TOP = 0x567,DISPID_MX_WRITER__BASE = 0x568,DISPID_MX_WRITER = 0x568,DISPID_MX_WRITER_OUTPUT = 0x569,DISPID_MX_WRITER_DESTINATION = 0x56A,DISPID_MX_WRITER_ENCODING = 0x56B,DISPID_MX_WRITER_BYTEORDERMARK = 0x56C,DISPID_MX_WRITER_INDENT = 0x56D,DISPID_MX_WRITER_STANDALONE = 0x56E,DISPID_MX_WRITER_OMITXMLDECLARATION = 0x56F,DISPID_MX_WRITER_VERSION = 0x570,DISPID_MX_WRITER_DISABLEOUTPUTESCAPING = 0x571,DISPID_MX_WRITER_FLUSH = 0x572,DISPID_MX_WRITER_RESET = 0x573,DISPID_MX_WRITER__TOP = 0x574,DISPID_MX_READER_CONTROL__BASE = 0x575,DISPID_MX_READER_CONTROL = 0x575,DISPID_MX_READER_CONTROL_ABORT = 0x576,DISPID_MX_READER_CONTROL_RESUME = 0x577,DISPID_MX_READER_CONTROL_SUSPEND = 0x578,DISPID_MX_READER_CONTROL__TOP = 0x579,};
enum MACRO_DOT11_POWER {DOT11_POWER_SAVE_LEVEL_MAX_PSP = 1,DOT11_POWER_SAVE_LEVEL_FAST_PSP = 2,DOT11_POWER_SAVE_LEVEL_NO_PSP = 3,};
enum MACRO_DSPROPSETID {DSPROPSETID_CeMixerProp_Latency = 0,};
enum MACRO_DT_MAILUSER {DT_MAILUSER = 0x0,DT_DISTLIST = 0x1,DT_FORUM = 0x2,DT_AGENT = 0x3,DT_ORGANIZATION = 0x4,DT_PRIVATE_DISTLIST = 0x5,DT_REMOTE_MAILUSER = 0x6,DT_MODIFIABLE = 0x10000,DT_GLOBAL = 0x20000,DT_LOCAL = 0x30000,DT_WAN = 0x40000,DT_NOT_SPECIFIC = 0x50000,DT_FOLDER = 0x1000000,DT_FOLDER_LINK = 0x2000000,};
enum MACRO_DVD_PROGRAM {DVD_PROGRAM_PREVIOUS = 0,DVD_PROGRAM_NEXT = 1,DVD_PROGRAM_TOP = 2,DVD_MENU_TITLE = 0,DVD_MENU_ROOT = 1,DVD_MENU_SUBPICTURE = 2,DVD_MENU_AUDIO = 3,DVD_MENU_ANGLE = 4,DVD_MENU_PTT = 5,DVD_SCANCAP_FORWARD_SCAN = 1,DVD_SCANCAP_FORWARD_SLOW = 2,DVD_SCANCAP_FORWARD_SINGLE = 4,DVD_SCANCAP_BACKWARD_SCAN = 8,DVD_SCANCAP_BACKWARD_SLOW = 16,DVD_SCANCAP_BACKWARD_SINGLE = 32,};
enum MACRO_EVENT_PULSE {EVENT_PULSE = 1,EVENT_RESET = 2,EVENT_SET = 3,};
enum MACRO_FACILITY_NT {FACILITY_NT_BIT = 0x10000000,};
enum MACRO_FILEOPENORD {FILEOPENORD = 1536,};
enum MACRO_FILE_DEVICE {FILE_DEVICE_POWER = 50,};
enum MACRO_FOLDER_MOVE {FOLDER_MOVE = 0x1,};
enum MACRO_FOURCC_DXT1 {FOURCC_DXT1 = 827611204,FOURCC_DXT2 = 844388420,FOURCC_DXT3 = 861165636,FOURCC_DXT4 = 877942852,FOURCC_DXT5 = 894720068,};
enum MACRO_FOURCC_RDSP {FOURCC_RDSP = 1347634258,};
enum MACRO_HDM_HITTEST {HDM_HITTEST = 4614,HDM_GETITEMRECT = 4615,HDM_SETIMAGELIST = 4616,HDM_GETIMAGELIST = 4617,HDM_ORDERTOINDEX = 4623,HDM_CREATEDRAGIMAGE = 4624,HDM_GETORDERARRAY = 4625,HDM_SETORDERARRAY = 4626,HDM_SETHOTDIVIDER = 4627,};
enum MACRO_HTMAXBUTTON {HTMAXBUTTON = 9,};
enum MACRO_HTSIZEFIRST {HTSIZEFIRST = 10,HTSIZELAST = 17,};
enum MACRO_IDC_OFFLINE {IDC_OFFLINE_HAND = 103,};
enum MACRO_IDM_CONTEXT {IDM_CONTEXT = 1,IDM_HWND = 2,IDM_NEW_TOPLEVELWINDOW = 7050,IDM_PRESERVEUNDOALWAYS = 6049,IDM_PERSISTDEFAULTVALUES = 7100,IDM_PROTECTMETATAGS = 7101,IDM_GETFRAMEZONE = 6037,IDM_FIRE_PRINTTEMPLATEUP = 15000,IDM_FIRE_PRINTTEMPLATEDOWN = 15001,IDM_SETPRINTHANDLES = 15002,IDM_CLEARAUTHENTICATIONCACHE = 15003,};
enum MACRO_IDM_UNKNOWN {IDM_UNKNOWN = 0,IDM_ALIGNBOTTOM = 1,IDM_ALIGNHORIZONTALCENTERS = 2,IDM_ALIGNLEFT = 3,IDM_ALIGNRIGHT = 4,IDM_ALIGNTOGRID = 5,IDM_ALIGNTOP = 6,IDM_ALIGNVERTICALCENTERS = 7,IDM_ARRANGEBOTTOM = 8,IDM_ARRANGERIGHT = 9,IDM_BRINGFORWARD = 10,IDM_BRINGTOFRONT = 11,IDM_CENTERHORIZONTALLY = 12,IDM_CENTERVERTICALLY = 13,IDM_CODE = 14,IDM_DELETE = 17,IDM_FONTNAME = 18,IDM_FONTSIZE = 19,IDM_GROUP = 20,IDM_HORIZSPACECONCATENATE = 21,IDM_HORIZSPACEDECREASE = 22,IDM_HORIZSPACEINCREASE = 23,IDM_HORIZSPACEMAKEEQUAL = 24,IDM_INSERTOBJECT = 25,IDM_MULTILEVELREDO = 30,IDM_SENDBACKWARD = 32,IDM_SENDTOBACK = 33,IDM_SHOWTABLE = 34,IDM_SIZETOCONTROL = 35,IDM_SIZETOCONTROLHEIGHT = 36,IDM_SIZETOCONTROLWIDTH = 37,IDM_SIZETOFIT = 38,IDM_SIZETOGRID = 39,IDM_SNAPTOGRID = 40,IDM_TABORDER = 41,IDM_TOOLBOX = 42,IDM_MULTILEVELUNDO = 44,IDM_UNGROUP = 45,IDM_VERTSPACECONCATENATE = 46,IDM_VERTSPACEDECREASE = 47,IDM_VERTSPACEINCREASE = 48,IDM_VERTSPACEMAKEEQUAL = 49,IDM_JUSTIFYFULL = 50,IDM_BACKCOLOR = 51,IDM_BOLD = 52,IDM_BORDERCOLOR = 53,IDM_FLAT = 54,IDM_FORECOLOR = 55,IDM_ITALIC = 56,IDM_JUSTIFYCENTER = 57,IDM_JUSTIFYGENERAL = 58,IDM_JUSTIFYLEFT = 59,IDM_JUSTIFYRIGHT = 60,IDM_RAISED = 61,IDM_SUNKEN = 62,IDM_UNDERLINE = 63,IDM_CHISELED = 64,IDM_ETCHED = 65,IDM_SHADOWED = 66,IDM_FIND = 67,IDM_SHOWGRID = 69,IDM_OBJECTVERBLIST0 = 72,IDM_OBJECTVERBLIST1 = 73,IDM_OBJECTVERBLIST2 = 74,IDM_OBJECTVERBLIST3 = 75,IDM_OBJECTVERBLIST4 = 76,IDM_OBJECTVERBLIST5 = 77,IDM_OBJECTVERBLIST6 = 78,IDM_OBJECTVERBLIST7 = 79,IDM_OBJECTVERBLIST8 = 80,IDM_OBJECTVERBLIST9 = 81,IDM_OBJECTVERBLISTLAST = 81,IDM_CONVERTOBJECT = 82,IDM_CUSTOMCONTROL = 83,IDM_CUSTOMIZEITEM = 84,IDM_RENAME = 85,IDM_IMPORT = 86,IDM_NEWPAGE = 87,IDM_MOVE = 88,IDM_CANCEL = 89,IDM_FONT = 90,IDM_STRIKETHROUGH = 91,IDM_DELETEWORD = 92,IDM_EXECPRINT = 93,IDM_JUSTIFYNONE = 94,IDM_TRISTATEBOLD = 95,IDM_TRISTATEITALIC = 96,IDM_TRISTATEUNDERLINE = 97,IDM_FOLLOW_ANCHOR = 2008,IDM_INSINPUTIMAGE = 2114,IDM_INSINPUTBUTTON = 2115,IDM_INSINPUTRESET = 2116,IDM_INSINPUTSUBMIT = 2117,IDM_INSINPUTUPLOAD = 2118,IDM_INSFIELDSET = 2119,IDM_PASTEINSERT = 2120,IDM_REPLACE = 2121,IDM_EDITSOURCE = 2122,IDM_BOOKMARK = 2123,IDM_HYPERLINK = 2124,IDM_UNLINK = 2125,IDM_BROWSEMODE = 2126,IDM_EDITMODE = 2127,IDM_UNBOOKMARK = 2128,IDM_TOOLBARS = 2130,IDM_STATUSBAR = 2131,IDM_FORMATMARK = 2132,IDM_TEXTONLY = 2133,IDM_OPTIONS = 2135,IDM_FOLLOWLINKC = 2136,IDM_FOLLOWLINKN = 2137,IDM_VIEWSOURCE = 2139,IDM_ZOOMPOPUP = 2140,IDM_BASELINEFONT1 = 2141,IDM_BASELINEFONT2 = 2142,IDM_BASELINEFONT3 = 2143,IDM_BASELINEFONT4 = 2144,IDM_BASELINEFONT5 = 2145,IDM_HORIZONTALLINE = 2150,IDM_LINEBREAKNORMAL = 2151,IDM_LINEBREAKLEFT = 2152,IDM_LINEBREAKRIGHT = 2153,IDM_LINEBREAKBOTH = 2154,IDM_NONBREAK = 2155,IDM_SPECIALCHAR = 2156,IDM_HTMLSOURCE = 2157,IDM_IFRAME = 2158,IDM_HTMLCONTAIN = 2159,IDM_TEXTBOX = 2161,IDM_TEXTAREA = 2162,IDM_CHECKBOX = 2163,IDM_RADIOBUTTON = 2164,IDM_DROPDOWNBOX = 2165,IDM_LISTBOX = 2166,IDM_BUTTON = 2167,IDM_IMAGE = 2168,IDM_OBJECT = 2169,IDM_1D = 2170,IDM_IMAGEMAP = 2171,IDM_FILE = 2172,IDM_COMMENT = 2173,IDM_SCRIPT = 2174,IDM_JAVAAPPLET = 2175,IDM_PLUGIN = 2176,IDM_PAGEBREAK = 2177,IDM_HTMLAREA = 2178,IDM_PARAGRAPH = 2180,IDM_FORM = 2181,IDM_MARQUEE = 2182,IDM_LIST = 2183,IDM_ORDERLIST = 2184,IDM_UNORDERLIST = 2185,IDM_INDENT = 2186,IDM_OUTDENT = 2187,IDM_PREFORMATTED = 2188,IDM_ADDRESS = 2189,IDM_BLINK = 2190,IDM_DIV = 2191,IDM_TABLEINSERT = 2200,IDM_RCINSERT = 2201,IDM_CELLINSERT = 2202,IDM_CAPTIONINSERT = 2203,IDM_CELLMERGE = 2204,IDM_CELLSPLIT = 2205,IDM_CELLSELECT = 2206,IDM_ROWSELECT = 2207,IDM_COLUMNSELECT = 2208,IDM_TABLESELECT = 2209,IDM_TABLEPROPERTIES = 2210,IDM_CELLPROPERTIES = 2211,IDM_ROWINSERT = 2212,IDM_COLUMNINSERT = 2213,IDM_HELP_CONTENT = 2220,IDM_HELP_ABOUT = 2221,IDM_HELP_README = 2222,IDM_REMOVEFORMAT = 2230,IDM_PAGEINFO = 2231,IDM_TELETYPE = 2232,IDM_GETBLOCKFMTS = 2233,IDM_BLOCKFMT = 2234,IDM_SHOWHIDE_CODE = 2235,IDM_TABLE = 2236,IDM_COPYFORMAT = 2237,IDM_PASTEFORMAT = 2238,IDM_GOTO = 2239,IDM_CHANGEFONT = 2240,IDM_CHANGEFONTSIZE = 2241,IDM_CHANGECASE = 2246,IDM_SHOWSPECIALCHAR = 2249,IDM_SUBSCRIPT = 2247,IDM_SUPERSCRIPT = 2248,IDM_CENTERALIGNPARA = 2250,IDM_LEFTALIGNPARA = 2251,IDM_RIGHTALIGNPARA = 2252,IDM_REMOVEPARAFORMAT = 2253,IDM_APPLYNORMAL = 2254,IDM_APPLYHEADING1 = 2255,IDM_APPLYHEADING2 = 2256,IDM_APPLYHEADING3 = 2257,IDM_DOCPROPERTIES = 2260,IDM_ADDFAVORITES = 2261,IDM_COPYSHORTCUT = 2262,IDM_SAVEBACKGROUND = 2263,IDM_SETWALLPAPER = 2264,IDM_COPYBACKGROUND = 2265,IDM_CREATESHORTCUT = 2266,IDM_PAGE = 2267,IDM_SAVETARGET = 2268,IDM_SHOWPICTURE = 2269,IDM_SAVEPICTURE = 2270,IDM_DYNSRCPLAY = 2271,IDM_DYNSRCSTOP = 2272,IDM_PRINTTARGET = 2273,IDM_IMGARTPLAY = 2274,IDM_IMGARTSTOP = 2275,IDM_IMGARTREWIND = 2276,IDM_PRINTQUERYJOBSPENDING = 2277,IDM_SETDESKTOPITEM = 2278,IDM_CONTEXTMENU = 2280,IDM_GOBACKWARD = 2282,IDM_GOFORWARD = 2283,IDM_PRESTOP = 2284,IDM_MP_MYPICS = 2287,IDM_MP_EMAILPICTURE = 2288,IDM_MP_PRINTPICTURE = 2289,IDM_CREATELINK = 2290,IDM_COPYCONTENT = 2291,IDM_LANGUAGE = 2292,IDM_GETPRINTTEMPLATE = 2295,IDM_SETPRINTTEMPLATE = 2296,IDM_TEMPLATE_PAGESETUP = 2298,IDM_REFRESH = 2300,IDM_STOPDOWNLOAD = 2301,IDM_ENABLE_INTERACTION = 2302,IDM_LAUNCHDEBUGGER = 2310,IDM_BREAKATNEXT = 2311,IDM_INSINPUTHIDDEN = 2312,IDM_INSINPUTPASSWORD = 2313,IDM_OVERWRITE = 2314,IDM_PARSECOMPLETE = 2315,IDM_HTMLEDITMODE = 2316,IDM_REGISTRYREFRESH = 2317,IDM_COMPOSESETTINGS = 2318,IDM_SHOWALLTAGS = 2327,IDM_SHOWALIGNEDSITETAGS = 2321,IDM_SHOWSCRIPTTAGS = 2322,IDM_SHOWSTYLETAGS = 2323,IDM_SHOWCOMMENTTAGS = 2324,IDM_SHOWAREATAGS = 2325,IDM_SHOWUNKNOWNTAGS = 2326,IDM_SHOWMISCTAGS = 2320,IDM_SHOWZEROBORDERATDESIGNTIME = 2328,IDM_AUTODETECT = 2329,IDM_SCRIPTDEBUGGER = 2330,IDM_GETBYTESDOWNLOADED = 2331,IDM_NOACTIVATENORMALOLECONTROLS = 2332,IDM_NOACTIVATEDESIGNTIMECONTROLS = 2333,IDM_NOACTIVATEJAVAAPPLETS = 2334,IDM_NOFIXUPURLSONPASTE = 2335,IDM_EMPTYGLYPHTABLE = 2336,IDM_ADDTOGLYPHTABLE = 2337,IDM_REMOVEFROMGLYPHTABLE = 2338,IDM_REPLACEGLYPHCONTENTS = 2339,IDM_SHOWWBRTAGS = 2340,IDM_PERSISTSTREAMSYNC = 2341,IDM_SETDIRTY = 2342,IDM_RUNURLSCRIPT = 2343,IDM_DIRLTR = 2350,IDM_DIRRTL = 2351,IDM_BLOCKDIRLTR = 2352,IDM_BLOCKDIRRTL = 2353,IDM_INLINEDIRLTR = 2354,IDM_INLINEDIRRTL = 2355,IDM_ISTRUSTEDDLG = 2356,IDM_INSERTSPAN = 2357,IDM_LOCALIZEEDITOR = 2358,IDM_SAVEPRETRANSFORMSOURCE = 2370,IDM_VIEWPRETRANSFORMSOURCE = 2371,IDM_SCROLL_HERE = 2380,IDM_SCROLL_TOP = 2381,IDM_SCROLL_BOTTOM = 2382,IDM_SCROLL_PAGEUP = 2383,IDM_SCROLL_PAGEDOWN = 2384,IDM_SCROLL_UP = 2385,IDM_SCROLL_DOWN = 2386,IDM_SCROLL_LEFTEDGE = 2387,IDM_SCROLL_RIGHTEDGE = 2388,IDM_SCROLL_PAGELEFT = 2389,IDM_SCROLL_PAGERIGHT = 2390,IDM_SCROLL_LEFT = 2391,IDM_SCROLL_RIGHT = 2392,IDM_MULTIPLESELECTION = 2393,IDM_2D_POSITION = 2394,IDM_2D_ELEMENT = 2395,IDM_1D_ELEMENT = 2396,IDM_ABSOLUTE_POSITION = 2397,IDM_LIVERESIZE = 2398,IDM_ATOMICSELECTION = 2399,IDM_AUTOURLDETECT_MODE = 2400,IDM_IE50_PASTE = 2401,IDM_IE50_PASTE_MODE = 2402,IDM_GETIPRINT = 2403,IDM_DISABLE_EDITFOCUS_UI = 2404,IDM_RESPECTVISIBILITY_INDESIGN = 2405,IDM_CSSEDITING_LEVEL = 2406,IDM_UI_OUTDENT = 2407,IDM_UPDATEPAGESTATUS = 2408,IDM_IME_ENABLE_RECONVERSION = 2409,IDM_KEEPSELECTION = 2410,IDM_UNLOADDOCUMENT = 2411,IDM_OVERRIDE_CURSOR = 2420,IDM_PEERHITTESTSAMEINEDIT = 2423,IDM_TRUSTAPPCACHE = 2425,IDM_BACKGROUNDIMAGECACHE = 2430,IDM_DEFAULTBLOCK = 6046,IDM_MIMECSET__FIRST__ = 3609,IDM_MIMECSET__LAST__ = 3699,IDM_MENUEXT_FIRST__ = 3700,IDM_MENUEXT_LAST__ = 3732,IDM_MENUEXT_COUNT = 3733,IDM_OPEN = 2000,IDM_NEW = 2001,IDM_SAVE = 70,IDM_SAVEAS = 71,IDM_SAVECOPYAS = 2002,IDM_PRINTPREVIEW = 2003,IDM_SHOWPRINT = 2010,IDM_SHOWPAGESETUP = 2011,IDM_PRINT = 27,IDM_PAGESETUP = 2004,IDM_SPELL = 2005,IDM_PASTESPECIAL = 2006,IDM_CLEARSELECTION = 2007,IDM_PROPERTIES = 28,IDM_REDO = 29,IDM_UNDO = 43,IDM_SELECTALL = 31,IDM_ZOOMPERCENT = 50,IDM_GETZOOM = 68,IDM_STOP = 2138,IDM_COPY = 15,IDM_CUT = 16,IDM_PASTE = 26,};
enum MACRO_IMAGE_DEBUG {IMAGE_DEBUG_MISC_EXENAME = 1,IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756,IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768,IMAGE_SEPARATE_DEBUG_MISMATCH = 32768,};
enum MACRO_IME_INVALID {IME_INVALID_HOTKEY = 0xFFFFFFFF,IME_SYSINFO_WINLOGON = 0x1,IME_SYSINFO_WOW16 = 0x2,};
enum MACRO_INTERNET_NO {INTERNET_NO_CALLBACK = 0,INTERNET_PER_CONN_FLAGS = 1,INTERNET_PER_CONN_PROXY_SERVER = 2,INTERNET_PER_CONN_PROXY_BYPASS = 3,INTERNET_PER_CONN_AUTOCONFIG_URL = 4,INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5,INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL = 6,INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = 7,INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME = 8,INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL = 9,};
enum MACRO_IOCTL_POWER {IOCTL_POWER_CAPABILITIES = 0x321000,IOCTL_POWER_GET = 0x321004,IOCTL_POWER_SET = 0x321008,IOCTL_POWER_QUERY = 0x32100C,IOCTL_REGISTER_POWER_RELATIONSHIP = 0x321018,};
enum MACRO_IOCTL_STORE {IOCTL_STORE_FINDFIRST = 589828,IOCTL_STORE_OPEN = 589832,};
enum MACRO_LANG_SYSTEM {LANG_SYSTEM_DEFAULT = 2048,LANG_USER_DEFAULT = 1024,};
enum MACRO_LINEFEATURE {LINEFEATURE_DEVSPECIFIC = 0x1,LINEFEATURE_DEVSPECIFICFEAT = 0x2,LINEFEATURE_FORWARD = 0x4,LINEFEATURE_MAKECALL = 0x8,LINEFEATURE_SETMEDIACONTROL = 0x10,LINEFEATURE_SETTERMINAL = 0x20,LINEFEATURE_SETDEVSTATUS = 0x40,LINEFEATURE_FORWARDFWD = 0x80,LINEFEATURE_FORWARDDND = 0x100,};
enum MACRO_LINETERMDEV {LINETERMDEV_PHONE = 0x1,LINETERMDEV_HEADSET = 0x2,LINETERMDEV_SPEAKER = 0x4,};
enum MACRO_LINE_CREATE {LINE_CREATE = 19,PHONE_CREATE = 20,};
enum MACRO_LM20_DEVLEN {LM20_DEVLEN = 8,};
enum MACRO_LM20_UNCLEN {LM20_UNCLEN = 17,};
enum MACRO_LVN_KEYDOWN {LVN_KEYDOWN = -155,LVN_MARQUEEBEGIN = -156,};
enum MACRO_MAPI_CREATE {MAPI_CREATE = 0x2,};
enum MACRO_MAXIMUM_USB {MAXIMUM_USB_STRING_LENGTH = 255,};
enum MACRO_MAXLONGLONG {MAXLONGLONG = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_MAXPNAMELEN {MAXPNAMELEN = 32,MAXERRORLENGTH = 128,};
enum MACRO_MAX_ADAPTER {MAX_ADAPTER_NAME = 128,};
enum MACRO_MFS_DEFAULT {MFS_DEFAULT = 0x1000,};
enum MACRO_MM_CREATIVE {MM_CREATIVE = 2,MM_MEDIAVISION = 3,MM_FUJITSU = 4,MM_ARTISOFT = 20,MM_TURTLE_BEACH = 21,MM_IBM = 22,MM_VOCALTEC = 23,MM_ROLAND = 24,MM_DSP_SOLUTIONS = 25,MM_NEC = 26,MM_ATI = 27,MM_WANGLABS = 28,MM_TANDY = 29,MM_VOYETRA = 30,MM_ANTEX = 31,MM_ICL_PS = 32,MM_INTEL = 33,MM_GRAVIS = 34,MM_VAL = 35,MM_INTERACTIVE = 36,MM_YAMAHA = 37,MM_EVEREX = 38,MM_ECHO = 39,MM_SIERRA = 40,MM_CAT = 41,MM_APPS = 42,MM_DSP_GROUP = 43,MM_MELABS = 44,MM_COMPUTER_FRIENDS = 45,MM_ESS = 46,MM_AUDIOFILE = 47,MM_MOTOROLA = 48,MM_CANOPUS = 49,MM_EPSON = 50,MM_TRUEVISION = 51,MM_AZTECH = 52,MM_VIDEOLOGIC = 53,MM_SCALACS = 54,MM_KORG = 55,MM_APT = 56,MM_ICS = 57,MM_ITERATEDSYS = 58,MM_METHEUS = 59,MM_LOGITECH = 60,MM_WINNOV = 61,MM_NCR = 62,MM_EXAN = 63,MM_AST = 64,MM_WILLOWPOND = 65,MM_SONICFOUNDRY = 66,MM_VITEC = 67,MM_MOSCOM = 68,MM_SILICONSOFT = 69,MM_SUPERMAC = 73,MM_AUDIOPT = 74,MM_SPEECHCOMP = 76,MM_AHEAD = 77,MM_DOLBY = 78,MM_OKI = 79,MM_AURAVISION = 80,MM_OLIVETTI = 81,MM_IOMAGIC = 82,MM_MATSUSHITA = 83,MM_CONTROLRES = 84,MM_XEBEC = 85,MM_NEWMEDIA = 86,MM_NMS = 87,MM_LYRRUS = 88,MM_COMPUSIC = 89,MM_OPTI = 90,MM_ADLACC = 91,MM_COMPAQ = 92,MM_DIALOGIC = 93,MM_INSOFT = 94,MM_MPTUS = 95,MM_WEITEK = 96,MM_LERNOUT_AND_HAUSPIE = 97,MM_QCIAR = 98,MM_APPLE = 99,MM_DIGITAL = 100,MM_MOTU = 101,MM_WORKBIT = 102,MM_OSITECH = 103,MM_MIRO = 104,MM_CIRRUSLOGIC = 105,MM_ISOLUTION = 106,MM_HORIZONS = 107,MM_CONCEPTS = 108,MM_VTG = 109,MM_RADIUS = 110,MM_ROCKWELL = 111,MM_XYz = 112,MM_OPCODE = 113,MM_VOXWARE = 114,MM_NORTHERN_TELECOM = 115,MM_APICOM = 116,MM_GRANDE = 117,MM_ADDX = 118,MM_WILDCAT = 119,MM_RHETOREX = 120,MM_BROOKTREE = 121,MM_ENSONIQ = 125,MM_FAST = 126,MM_NVIDIA = 127,MM_OKSORI = 128,MM_DIACOUSTICS = 129,MM_GULBRANSEN = 130,MM_KAY_ELEMETRICS = 131,MM_CRYSTAL = 132,MM_SPLASH_STUDIOS = 133,MM_QUARTERDECK = 134,MM_TDK = 135,MM_DIGITAL_AUDIO_LABS = 136,MM_SEERSYS = 137,MM_PICTURETEL = 138,MM_ATT_MICROELECTRONICS = 139,MM_OSPREY = 140,MM_MEDIATRIX = 141,MM_SOUNDESIGNS = 142,MM_ALDIGITAL = 143,MM_SPECTRUM_SIGNAL_PROCESSING = 144,MM_ECS = 145,MM_AMD = 146,MM_COREDYNAMICS = 147,MM_CANAM = 148,MM_SOFTSOUND = 149,MM_NORRIS = 150,MM_DDD = 151,MM_EUPHONICS = 152,MM_PRECEPT = 153,MM_CRYSTAL_NET = 154,MM_CHROMATIC = 155,MM_VOICEINFO = 156,MM_VIENNASYS = 157,MM_CONNECTIX = 158,MM_GADGETLABS = 159,MM_FRONTIER = 160,MM_VIONA = 161,MM_CASIO = 162,MM_DIAMONDMM = 163,MM_S3 = 164,MM_FRAUNHOFER_IIS = 172,MM_MIDI_MAPPER = 1,MM_WAVE_MAPPER = 2,MM_SNDBLST_MIDIOUT = 3,MM_SNDBLST_MIDIIN = 4,MM_SNDBLST_SYNTH = 5,MM_SNDBLST_WAVEOUT = 6,MM_SNDBLST_WAVEIN = 7,MM_ADLIB = 9,MM_MPU401_MIDIOUT = 10,MM_MPU401_MIDIIN = 11,MM_PC_JOYSTICK = 12,MM_PCSPEAKER_WAVEOUT = 13,MM_MSFT_WSS_WAVEIN = 14,MM_MSFT_WSS_WAVEOUT = 15,MM_MSFT_WSS_FMSYNTH_STEREO = 16,MM_MSFT_WSS_MIXER = 17,MM_MSFT_WSS_OEM_WAVEIN = 18,MM_MSFT_WSS_OEM_WAVEOUT = 19,MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20,MM_MSFT_WSS_AUX = 21,MM_MSFT_WSS_OEM_AUX = 22,MM_MSFT_GENERIC_WAVEIN = 23,MM_MSFT_GENERIC_WAVEOUT = 24,MM_MSFT_GENERIC_MIDIIN = 25,MM_MSFT_GENERIC_MIDIOUT = 26,MM_MSFT_GENERIC_MIDISYNTH = 27,MM_MSFT_GENERIC_AUX_LINE = 28,MM_MSFT_GENERIC_AUX_MIC = 29,MM_MSFT_GENERIC_AUX_CD = 30,MM_MSFT_WSS_OEM_MIXER = 31,MM_MSFT_MSACM = 32,MM_MSFT_ACM_MSADPCM = 33,MM_MSFT_ACM_IMAADPCM = 34,MM_MSFT_ACM_MSFILTER = 35,MM_MSFT_ACM_GSM610 = 36,MM_MSFT_ACM_G711 = 37,MM_MSFT_ACM_PCM = 38,MM_WSS_SB16_WAVEIN = 39,MM_WSS_SB16_WAVEOUT = 40,MM_WSS_SB16_MIDIIN = 41,MM_WSS_SB16_MIDIOUT = 42,MM_WSS_SB16_SYNTH = 43,MM_WSS_SB16_AUX_LINE = 44,MM_WSS_SB16_AUX_CD = 45,MM_WSS_SB16_MIXER = 46,MM_WSS_SBPRO_WAVEIN = 47,MM_WSS_SBPRO_WAVEOUT = 48,MM_WSS_SBPRO_MIDIIN = 49,MM_WSS_SBPRO_MIDIOUT = 50,MM_WSS_SBPRO_SYNTH = 51,MM_WSS_SBPRO_AUX_LINE = 52,MM_WSS_SBPRO_AUX_CD = 53,MM_WSS_SBPRO_MIXER = 54,MM_MSFT_WSS_NT_WAVEIN = 55,MM_MSFT_WSS_NT_WAVEOUT = 56,MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57,MM_MSFT_WSS_NT_MIXER = 58,MM_MSFT_WSS_NT_AUX = 59,MM_MSFT_SB16_WAVEIN = 60,MM_MSFT_SB16_WAVEOUT = 61,MM_MSFT_SB16_MIDIIN = 62,MM_MSFT_SB16_MIDIOUT = 63,MM_MSFT_SB16_SYNTH = 64,MM_MSFT_SB16_AUX_LINE = 65,MM_MSFT_SB16_AUX_CD = 66,MM_MSFT_SB16_MIXER = 67,MM_MSFT_SBPRO_WAVEIN = 68,MM_MSFT_SBPRO_WAVEOUT = 69,MM_MSFT_SBPRO_MIDIIN = 70,MM_MSFT_SBPRO_MIDIOUT = 71,MM_MSFT_SBPRO_SYNTH = 72,MM_MSFT_SBPRO_AUX_LINE = 73,MM_MSFT_SBPRO_AUX_CD = 74,MM_MSFT_SBPRO_MIXER = 75,MM_MSFT_MSOPL_SYNTH = 76,MM_MSFT_VMDMS_LINE_WAVEIN = 80,MM_MSFT_VMDMS_LINE_WAVEOUT = 81,MM_MSFT_VMDMS_HANDSET_WAVEIN = 82,MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83,MM_MSFT_VMDMW_LINE_WAVEIN = 84,MM_MSFT_VMDMW_LINE_WAVEOUT = 85,MM_MSFT_VMDMW_HANDSET_WAVEIN = 86,MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87,MM_MSFT_VMDMW_MIXER = 88,MM_MSFT_VMDM_GAME_WAVEOUT = 89,MM_MSFT_VMDM_GAME_WAVEIN = 90,MM_MSFT_ACM_MSNAUDIO = 91,MM_MSFT_ACM_MSG723 = 92,MM_MSFT_WDMAUDIO_WAVEOUT = 100,MM_MSFT_WDMAUDIO_WAVEIN = 101,MM_MSFT_WDMAUDIO_MIDIOUT = 102,MM_MSFT_WDMAUDIO_MIDIIN = 103,MM_MSFT_WDMAUDIO_MIXER = 104,MM_CREATIVE_SB15_WAVEIN = 1,MM_CREATIVE_SB20_WAVEIN = 2,MM_CREATIVE_SBPRO_WAVEIN = 3,MM_CREATIVE_SBP16_WAVEIN = 4,MM_CREATIVE_PHNBLST_WAVEIN = 5,MM_CREATIVE_SB15_WAVEOUT = 101,MM_CREATIVE_SB20_WAVEOUT = 102,MM_CREATIVE_SBPRO_WAVEOUT = 103,MM_CREATIVE_SBP16_WAVEOUT = 104,MM_CREATIVE_PHNBLST_WAVEOUT = 105,MM_CREATIVE_MIDIOUT = 201,MM_CREATIVE_MIDIIN = 202,MM_CREATIVE_FMSYNTH_MONO = 301,MM_CREATIVE_FMSYNTH_STEREO = 302,MM_CREATIVE_MIDI_AWE32 = 303,MM_CREATIVE_AUX_CD = 401,MM_CREATIVE_AUX_LINE = 402,MM_CREATIVE_AUX_MIC = 403,MM_CREATIVE_AUX_MASTER = 404,MM_CREATIVE_AUX_PCSPK = 405,MM_CREATIVE_AUX_WAVE = 406,MM_CREATIVE_AUX_MIDI = 407,MM_CREATIVE_SBPRO_MIXER = 408,MM_CREATIVE_SB16_MIXER = 409,MM_MEDIAVISION_PROAUDIO = 16,MM_PROAUD_MIDIOUT = 17,MM_PROAUD_MIDIIN = 18,MM_PROAUD_SYNTH = 19,MM_PROAUD_WAVEOUT = 20,MM_PROAUD_WAVEIN = 21,MM_PROAUD_MIXER = 22,MM_PROAUD_AUX = 23,MM_MEDIAVISION_THUNDER = 32,MM_THUNDER_SYNTH = 35,MM_THUNDER_WAVEOUT = 36,MM_THUNDER_WAVEIN = 37,MM_THUNDER_AUX = 39,MM_MEDIAVISION_TPORT = 64,MM_TPORT_WAVEOUT = 65,MM_TPORT_WAVEIN = 66,MM_TPORT_SYNTH = 67,MM_MEDIAVISION_PROAUDIO_PLUS = 80,MM_PROAUD_PLUS_MIDIOUT = 81,MM_PROAUD_PLUS_MIDIIN = 82,MM_PROAUD_PLUS_SYNTH = 83,MM_PROAUD_PLUS_WAVEOUT = 84,MM_PROAUD_PLUS_WAVEIN = 85,MM_PROAUD_PLUS_MIXER = 86,MM_PROAUD_PLUS_AUX = 87,MM_MEDIAVISION_PROAUDIO_16 = 96,MM_PROAUD_16_MIDIOUT = 97,MM_PROAUD_16_MIDIIN = 98,MM_PROAUD_16_SYNTH = 99,MM_PROAUD_16_WAVEOUT = 100,MM_PROAUD_16_WAVEIN = 101,MM_PROAUD_16_MIXER = 102,MM_PROAUD_16_AUX = 103,MM_MEDIAVISION_PROSTUDIO_16 = 96,MM_STUDIO_16_MIDIOUT = 97,MM_STUDIO_16_MIDIIN = 98,MM_STUDIO_16_SYNTH = 99,MM_STUDIO_16_WAVEOUT = 100,MM_STUDIO_16_WAVEIN = 101,MM_STUDIO_16_MIXER = 102,MM_STUDIO_16_AUX = 103,MM_MEDIAVISION_CDPC = 112,MM_CDPC_MIDIOUT = 113,MM_CDPC_MIDIIN = 114,MM_CDPC_SYNTH = 115,MM_CDPC_WAVEOUT = 116,MM_CDPC_WAVEIN = 117,MM_CDPC_MIXER = 118,MM_CDPC_AUX = 119,MM_MEDIAVISION_OPUS1208 = 128,MM_OPUS401_MIDIOUT = 129,MM_OPUS401_MIDIIN = 130,MM_OPUS1208_SYNTH = 131,MM_OPUS1208_WAVEOUT = 132,MM_OPUS1208_WAVEIN = 133,MM_OPUS1208_MIXER = 134,MM_OPUS1208_AUX = 135,MM_MEDIAVISION_OPUS1216 = 144,MM_OPUS1216_MIDIOUT = 145,MM_OPUS1216_MIDIIN = 146,MM_OPUS1216_SYNTH = 147,MM_OPUS1216_WAVEOUT = 148,MM_OPUS1216_WAVEIN = 149,MM_OPUS1216_MIXER = 150,MM_OPUS1216_AUX = 151,MM_ARTISOFT_SBWAVEIN = 1,MM_ARTISOFT_SBWAVEOUT = 2,MM_MMOTION_WAVEAUX = 1,MM_MMOTION_WAVEOUT = 2,MM_MMOTION_WAVEIN = 3,MM_IBM_PCMCIA_WAVEIN = 11,MM_IBM_PCMCIA_WAVEOUT = 12,MM_IBM_PCMCIA_SYNTH = 13,MM_IBM_PCMCIA_MIDIIN = 14,MM_IBM_PCMCIA_MIDIOUT = 15,MM_IBM_PCMCIA_AUX = 16,MM_IBM_THINKPAD200 = 17,MM_IBM_MWAVE_WAVEIN = 18,MM_IBM_MWAVE_WAVEOUT = 19,MM_IBM_MWAVE_MIXER = 20,MM_IBM_MWAVE_MIDIIN = 21,MM_IBM_MWAVE_MIDIOUT = 22,MM_IBM_MWAVE_AUX = 23,MM_IBM_WC_MIDIOUT = 30,MM_IBM_WC_WAVEOUT = 31,MM_IBM_WC_MIXEROUT = 33,MM_VOCALTEC_WAVEOUT = 1,MM_VOCALTEC_WAVEIN = 2,MM_ROLAND_RAP10_MIDIOUT = 10,MM_ROLAND_RAP10_MIDIIN = 11,MM_ROLAND_RAP10_SYNTH = 12,MM_ROLAND_RAP10_WAVEOUT = 13,MM_ROLAND_RAP10_WAVEIN = 14,MM_ROLAND_MPU401_MIDIOUT = 15,MM_ROLAND_MPU401_MIDIIN = 16,MM_ROLAND_SMPU_MIDIOUTA = 17,MM_ROLAND_SMPU_MIDIOUTB = 18,MM_ROLAND_SMPU_MIDIINA = 19,MM_ROLAND_SMPU_MIDIINB = 20,MM_ROLAND_SC7_MIDIOUT = 21,MM_ROLAND_SC7_MIDIIN = 22,MM_ROLAND_SERIAL_MIDIOUT = 23,MM_ROLAND_SERIAL_MIDIIN = 24,MM_ROLAND_SCP_MIDIOUT = 38,MM_ROLAND_SCP_MIDIIN = 39,MM_ROLAND_SCP_WAVEOUT = 40,MM_ROLAND_SCP_WAVEIN = 41,MM_ROLAND_SCP_MIXER = 42,MM_ROLAND_SCP_AUX = 48,MM_DSP_SOLUTIONS_WAVEOUT = 1,MM_DSP_SOLUTIONS_WAVEIN = 2,MM_DSP_SOLUTIONS_SYNTH = 3,MM_DSP_SOLUTIONS_AUX = 4,MM_WANGLABS_WAVEIN1 = 1,MM_WANGLABS_WAVEOUT1 = 2,MM_TANDY_VISWAVEIN = 1,MM_TANDY_VISWAVEOUT = 2,MM_TANDY_VISBIOSSYNTH = 3,MM_TANDY_SENS_MMAWAVEIN = 4,MM_TANDY_SENS_MMAWAVEOUT = 5,MM_TANDY_SENS_MMAMIDIIN = 6,MM_TANDY_SENS_MMAMIDIOUT = 7,MM_TANDY_SENS_VISWAVEOUT = 8,MM_TANDY_PSSJWAVEIN = 9,MM_TANDY_PSSJWAVEOUT = 10,MM_INTELOPD_WAVEIN = 1,MM_INTELOPD_WAVEOUT = 101,MM_INTELOPD_AUX = 401,MM_INTEL_NSPMODEMLINE = 501,MM_INTERACTIVE_WAVEIN = 69,MM_INTERACTIVE_WAVEOUT = 69,MM_YAMAHA_GSS_SYNTH = 1,MM_YAMAHA_GSS_WAVEOUT = 2,MM_YAMAHA_GSS_WAVEIN = 3,MM_YAMAHA_GSS_MIDIOUT = 4,MM_YAMAHA_GSS_MIDIIN = 5,MM_YAMAHA_GSS_AUX = 6,MM_YAMAHA_SERIAL_MIDIOUT = 7,MM_YAMAHA_SERIAL_MIDIIN = 8,MM_YAMAHA_OPL3SA_WAVEOUT = 16,MM_YAMAHA_OPL3SA_WAVEIN = 17,MM_YAMAHA_OPL3SA_FMSYNTH = 18,MM_YAMAHA_OPL3SA_YSYNTH = 19,MM_YAMAHA_OPL3SA_MIDIOUT = 20,MM_YAMAHA_OPL3SA_MIDIIN = 21,MM_YAMAHA_OPL3SA_MIXER = 23,MM_YAMAHA_OPL3SA_JOYSTICK = 24,MM_EVEREX_CARRIER = 1,MM_ECHO_SYNTH = 1,MM_ECHO_WAVEOUT = 2,MM_ECHO_WAVEIN = 3,MM_ECHO_MIDIOUT = 4,MM_ECHO_MIDIIN = 5,MM_ECHO_AUX = 6,MM_SIERRA_ARIA_MIDIOUT = 20,MM_SIERRA_ARIA_MIDIIN = 21,MM_SIERRA_ARIA_SYNTH = 22,MM_SIERRA_ARIA_WAVEOUT = 23,MM_SIERRA_ARIA_WAVEIN = 24,MM_SIERRA_ARIA_AUX = 25,MM_SIERRA_ARIA_AUX2 = 32,MM_SIERRA_QUARTET_WAVEIN = 80,MM_SIERRA_QUARTET_WAVEOUT = 81,MM_SIERRA_QUARTET_MIDIIN = 82,MM_SIERRA_QUARTET_MIDIOUT = 83,MM_SIERRA_QUARTET_SYNTH = 84,MM_SIERRA_QUARTET_AUX_CD = 85,MM_SIERRA_QUARTET_AUX_LINE = 86,MM_SIERRA_QUARTET_AUX_MODEM = 87,MM_SIERRA_QUARTET_MIXER = 88,MM_CAT_WAVEOUT = 1,MM_DSP_GROUP_TRUESPEECH = 1,MM_MELABS_MIDI2GO = 1,MM_ESS_AMWAVEOUT = 1,MM_ESS_AMWAVEIN = 2,MM_ESS_AMAUX = 3,MM_ESS_AMSYNTH = 4,MM_ESS_AMMIDIOUT = 5,MM_ESS_AMMIDIIN = 6,MM_ESS_MIXER = 7,MM_ESS_AUX_CD = 8,MM_ESS_MPU401_MIDIOUT = 9,MM_ESS_MPU401_MIDIIN = 10,MM_ESS_ES488_WAVEOUT = 16,MM_ESS_ES488_WAVEIN = 17,MM_ESS_ES488_MIXER = 18,MM_ESS_ES688_WAVEOUT = 19,MM_ESS_ES688_WAVEIN = 20,MM_ESS_ES688_MIXER = 21,MM_ESS_ES1488_WAVEOUT = 22,MM_ESS_ES1488_WAVEIN = 23,MM_ESS_ES1488_MIXER = 24,MM_ESS_ES1688_WAVEOUT = 25,MM_ESS_ES1688_WAVEIN = 26,MM_ESS_ES1688_MIXER = 27,MM_ESS_ES1788_WAVEOUT = 28,MM_ESS_ES1788_WAVEIN = 29,MM_ESS_ES1788_MIXER = 30,MM_ESS_ES1888_WAVEOUT = 31,MM_ESS_ES1888_WAVEIN = 32,MM_ESS_ES1888_MIXER = 33,MM_ESS_ES1868_WAVEOUT = 34,MM_ESS_ES1868_WAVEIN = 35,MM_ESS_ES1868_MIXER = 36,MM_ESS_ES1878_WAVEOUT = 37,MM_ESS_ES1878_WAVEIN = 38,MM_ESS_ES1878_MIXER = 39,MM_EPS_FMSND = 1,MM_TRUEVISION_WAVEIN1 = 1,MM_TRUEVISION_WAVEOUT1 = 2,MM_AZTECH_MIDIOUT = 3,MM_AZTECH_MIDIIN = 4,MM_AZTECH_WAVEIN = 17,MM_AZTECH_WAVEOUT = 18,MM_AZTECH_FMSYNTH = 20,MM_AZTECH_MIXER = 21,MM_AZTECH_PRO16_WAVEIN = 33,MM_AZTECH_PRO16_WAVEOUT = 34,MM_AZTECH_PRO16_FMSYNTH = 38,MM_AZTECH_DSP16_WAVEIN = 65,MM_AZTECH_DSP16_WAVEOUT = 66,MM_AZTECH_DSP16_FMSYNTH = 68,MM_AZTECH_DSP16_WAVESYNTH = 70,MM_AZTECH_NOVA16_WAVEIN = 71,MM_AZTECH_NOVA16_WAVEOUT = 72,MM_AZTECH_NOVA16_MIXER = 73,MM_AZTECH_WASH16_WAVEIN = 74,MM_AZTECH_WASH16_WAVEOUT = 75,MM_AZTECH_WASH16_MIXER = 76,MM_AZTECH_AUX_CD = 401,MM_AZTECH_AUX_LINE = 402,MM_AZTECH_AUX_MIC = 403,MM_AZTECH_AUX = 404,MM_VIDEOLOGIC_MSWAVEIN = 1,MM_VIDEOLOGIC_MSWAVEOUT = 2,MM_KORG_PCIF_MIDIOUT = 1,MM_KORG_PCIF_MIDIIN = 2,MM_APT_ACE100CD = 1,MM_ICS_WAVEDECK_WAVEOUT = 1,MM_ICS_WAVEDECK_WAVEIN = 2,MM_ICS_WAVEDECK_MIXER = 3,MM_ICS_WAVEDECK_AUX = 4,MM_ICS_WAVEDECK_SYNTH = 5,MM_ICS_WAVEDEC_SB_WAVEOUT = 6,MM_ICS_WAVEDEC_SB_WAVEIN = 7,MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8,MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9,MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10,MM_ICS_WAVEDEC_SB_MIXER = 11,MM_ICS_WAVEDEC_SB_AUX = 12,MM_ICS_2115_LITE_MIDIOUT = 13,MM_ICS_2120_LITE_MIDIOUT = 14,MM_ITERATEDSYS_FUFCODEC = 1,MM_METHEUS_ZIPPER = 1,MM_WINNOV_CAVIAR_WAVEIN = 1,MM_WINNOV_CAVIAR_WAVEOUT = 2,MM_WINNOV_CAVIAR_VIDC = 3,MM_WINNOV_CAVIAR_CHAMPAGNE = 4,MM_WINNOV_CAVIAR_YUV8 = 5,MM_NCR_BA_WAVEIN = 1,MM_NCR_BA_WAVEOUT = 2,MM_NCR_BA_SYNTH = 3,MM_NCR_BA_AUX = 4,MM_NCR_BA_MIXER = 5,MM_VITEC_VMAKER = 1,MM_VITEC_VMPRO = 2,MM_MOSCOM_VPC2400_IN = 1,MM_MOSCOM_VPC2400_OUT = 2,MM_SILICONSOFT_SC1_WAVEIN = 1,MM_SILICONSOFT_SC1_WAVEOUT = 2,MM_SILICONSOFT_SC2_WAVEIN = 3,MM_SILICONSOFT_SC2_WAVEOUT = 4,MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5,MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6,MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7,MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8,MM_OLIVETTI_WAVEIN = 1,MM_OLIVETTI_WAVEOUT = 2,MM_OLIVETTI_MIXER = 3,MM_OLIVETTI_AUX = 4,MM_OLIVETTI_MIDIIN = 5,MM_OLIVETTI_MIDIOUT = 6,MM_OLIVETTI_SYNTH = 7,MM_OLIVETTI_JOYSTICK = 8,MM_OLIVETTI_ACM_GSM = 9,MM_OLIVETTI_ACM_ADPCM = 10,MM_OLIVETTI_ACM_CELP = 11,MM_OLIVETTI_ACM_SBC = 12,MM_OLIVETTI_ACM_OPR = 13,MM_IOMAGIC_TEMPO_WAVEOUT = 1,MM_IOMAGIC_TEMPO_WAVEIN = 2,MM_IOMAGIC_TEMPO_SYNTH = 3,MM_IOMAGIC_TEMPO_MIDIOUT = 4,MM_IOMAGIC_TEMPO_MXDOUT = 5,MM_IOMAGIC_TEMPO_AUXOUT = 6,MM_MATSUSHITA_WAVEIN = 1,MM_MATSUSHITA_WAVEOUT = 2,MM_MATSUSHITA_FMSYNTH_STEREO = 3,MM_MATSUSHITA_MIXER = 4,MM_MATSUSHITA_AUX = 5,MM_NEWMEDIA_WAVJAMMER = 1,MM_LYRRUS_BRIDGE_GUITAR = 1,MM_OPTI_M16_FMSYNTH_STEREO = 1,MM_OPTI_M16_MIDIIN = 2,MM_OPTI_M16_MIDIOUT = 3,MM_OPTI_M16_WAVEIN = 4,MM_OPTI_M16_WAVEOUT = 5,MM_OPTI_M16_MIXER = 6,MM_OPTI_M16_AUX = 7,MM_OPTI_P16_FMSYNTH_STEREO = 16,MM_OPTI_P16_MIDIIN = 17,MM_OPTI_P16_MIDIOUT = 18,MM_OPTI_P16_WAVEIN = 19,MM_OPTI_P16_WAVEOUT = 20,MM_OPTI_P16_MIXER = 21,MM_OPTI_P16_AUX = 22,MM_OPTI_M32_WAVEIN = 32,MM_OPTI_M32_WAVEOUT = 33,MM_OPTI_M32_MIDIIN = 34,MM_OPTI_M32_MIDIOUT = 35,MM_OPTI_M32_SYNTH_STEREO = 36,MM_OPTI_M32_MIXER = 37,MM_OPTI_M32_AUX = 38,MM_ADDX_PCTV_DIGITALMIX = 1,MM_ADDX_PCTV_WAVEIN = 2,MM_ADDX_PCTV_WAVEOUT = 3,MM_ADDX_PCTV_MIXER = 4,MM_ADDX_PCTV_AUX_CD = 5,MM_ADDX_PCTV_AUX_LINE = 6,MM_AHEAD_MULTISOUND = 1,MM_AHEAD_SOUNDBLASTER = 2,MM_AHEAD_PROAUDIO = 3,MM_AHEAD_GENERIC = 4,MM_AMD_INTERWAVE_WAVEIN = 1,MM_AMD_INTERWAVE_WAVEOUT = 2,MM_AMD_INTERWAVE_SYNTH = 3,MM_AMD_INTERWAVE_MIXER1 = 4,MM_AMD_INTERWAVE_MIXER2 = 5,MM_AMD_INTERWAVE_JOYSTICK = 6,MM_AMD_INTERWAVE_EX_CD = 7,MM_AMD_INTERWAVE_MIDIIN = 8,MM_AMD_INTERWAVE_MIDIOUT = 9,MM_AMD_INTERWAVE_AUX1 = 10,MM_AMD_INTERWAVE_AUX2 = 11,MM_AMD_INTERWAVE_AUX_MIC = 12,MM_AMD_INTERWAVE_AUX_CD = 13,MM_AMD_INTERWAVE_MONO_IN = 14,MM_AMD_INTERWAVE_MONO_OUT = 15,MM_AMD_INTERWAVE_EX_TELEPHONY = 16,MM_AMD_INTERWAVE_WAVEOUT_BASE = 17,MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18,MM_AMD_INTERWAVE_STEREO_ENHANCED = 19,MM_AST_MODEMWAVE_WAVEIN = 13,MM_AST_MODEMWAVE_WAVEOUT = 14,MM_BTV_WAVEIN = 1,MM_BTV_WAVEOUT = 2,MM_BTV_MIDIIN = 3,MM_BTV_MIDIOUT = 4,MM_BTV_MIDISYNTH = 5,MM_BTV_AUX_LINE = 6,MM_BTV_AUX_MIC = 7,MM_BTV_AUX_CD = 8,MM_BTV_DIGITALIN = 9,MM_BTV_DIGITALOUT = 10,MM_BTV_MIDIWAVESTREAM = 11,MM_BTV_MIXER = 12,MM_CANAM_CBXWAVEOUT = 1,MM_CANAM_CBXWAVEIN = 2,MM_CASIO_WP150_MIDIOUT = 1,MM_CASIO_WP150_MIDIIN = 2,MM_COMPAQ_BB_WAVEIN = 1,MM_COMPAQ_BB_WAVEOUT = 2,MM_COMPAQ_BB_WAVEAUX = 3,MM_COREDYNAMICS_DYNAMIXHR = 1,MM_COREDYNAMICS_DYNASONIX_SYNTH = 2,MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3,MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4,MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5,MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6,MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7,MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8,MM_COREDYNAMICS_DYNAGRAFX_VGA = 9,MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10,MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11,MM_CRYSTAL_CS4232_WAVEIN = 1,MM_CRYSTAL_CS4232_WAVEOUT = 2,MM_CRYSTAL_CS4232_WAVEMIXER = 3,MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4,MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5,MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6,MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7,MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8,MM_CRYSTAL_CS4232_MIDIIN = 9,MM_CRYSTAL_CS4232_MIDIOUT = 10,MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13,MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14,MM_DDD_MIDILINK_MIDIIN = 1,MM_DDD_MIDILINK_MIDIOUT = 2,MM_DIACOUSTICS_DRUM_ACTION = 1,MM_DIMD_PLATFORM = 0,MM_DIMD_DIRSOUND = 1,MM_DIMD_VIRTMPU = 2,MM_DIMD_VIRTSB = 3,MM_DIMD_VIRTJOY = 4,MM_DIMD_WAVEIN = 5,MM_DIMD_WAVEOUT = 6,MM_DIMD_MIDIIN = 7,MM_DIMD_MIDIOUT = 8,MM_DIMD_AUX_LINE = 9,MM_DIMD_MIXER = 10,MM_DIGITAL_AUDIO_LABS_V8 = 16,MM_DIGITAL_AUDIO_LABS_CPRO = 17,MM_DIGITAL_AV320_WAVEIN = 1,MM_DIGITAL_AV320_WAVEOUT = 2,MM_ECS_AADF_MIDI_IN = 10,MM_ECS_AADF_MIDI_OUT = 11,MM_ECS_AADF_WAVE2MIDI_IN = 12,MM_ENSONIQ_SOUNDSCAPE = 16,MM_SOUNDSCAPE_WAVEOUT = 17,MM_SOUNDSCAPE_WAVEOUT_AUX = 18,MM_SOUNDSCAPE_WAVEIN = 19,MM_SOUNDSCAPE_MIDIOUT = 20,MM_SOUNDSCAPE_MIDIIN = 21,MM_SOUNDSCAPE_SYNTH = 22,MM_SOUNDSCAPE_MIXER = 23,MM_SOUNDSCAPE_AUX = 24,MM_FRONTIER_WAVECENTER_MIDIIN = 1,MM_FRONTIER_WAVECENTER_MIDIOUT = 2,MM_FRONTIER_WAVECENTER_WAVEIN = 3,MM_FRONTIER_WAVECENTER_WAVEOUT = 4,MM_GADGETLABS_WAVE44_WAVEIN = 1,MM_GADGETLABS_WAVE44_WAVEOUT = 2,MM_GADGETLABS_WAVE42_WAVEIN = 3,MM_GADGETLABS_WAVE42_WAVEOUT = 4,MM_GADGETLABS_WAVE4_MIDIIN = 5,MM_GADGETLABS_WAVE4_MIDIOUT = 6,MM_KAY_ELEMETRICS_CSL = 17152,MM_KAY_ELEMETRICS_CSL_DAT = 17160,MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161,MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1,MM_MPTUS_SPWAVEOUT = 1,MM_MOTU_MTP_MIDIOUT_ALL = 100,MM_MOTU_MTP_MIDIIN_1 = 101,MM_MOTU_MTP_MIDIOUT_1 = 101,MM_MOTU_MTP_MIDIIN_2 = 102,MM_MOTU_MTP_MIDIOUT_2 = 102,MM_MOTU_MTP_MIDIIN_3 = 103,MM_MOTU_MTP_MIDIOUT_3 = 103,MM_MOTU_MTP_MIDIIN_4 = 104,MM_MOTU_MTP_MIDIOUT_4 = 104,MM_MOTU_MTP_MIDIIN_5 = 105,MM_MOTU_MTP_MIDIOUT_5 = 105,MM_MOTU_MTP_MIDIIN_6 = 106,MM_MOTU_MTP_MIDIOUT_6 = 106,MM_MOTU_MTP_MIDIIN_7 = 107,MM_MOTU_MTP_MIDIOUT_7 = 107,MM_MOTU_MTP_MIDIIN_8 = 108,MM_MOTU_MTP_MIDIOUT_8 = 108,MM_MOTU_MTPII_MIDIOUT_ALL = 200,MM_MOTU_MTPII_MIDIIN_SYNC = 200,MM_MOTU_MTPII_MIDIIN_1 = 201,MM_MOTU_MTPII_MIDIOUT_1 = 201,MM_MOTU_MTPII_MIDIIN_2 = 202,MM_MOTU_MTPII_MIDIOUT_2 = 202,MM_MOTU_MTPII_MIDIIN_3 = 203,MM_MOTU_MTPII_MIDIOUT_3 = 203,MM_MOTU_MTPII_MIDIIN_4 = 204,MM_MOTU_MTPII_MIDIOUT_4 = 204,MM_MOTU_MTPII_MIDIIN_5 = 205,MM_MOTU_MTPII_MIDIOUT_5 = 205,MM_MOTU_MTPII_MIDIIN_6 = 206,MM_MOTU_MTPII_MIDIOUT_6 = 206,MM_MOTU_MTPII_MIDIIN_7 = 207,MM_MOTU_MTPII_MIDIOUT_7 = 207,MM_MOTU_MTPII_MIDIIN_8 = 208,MM_MOTU_MTPII_MIDIOUT_8 = 208,MM_MOTU_MTPII_NET_MIDIIN_1 = 209,MM_MOTU_MTPII_NET_MIDIOUT_1 = 209,MM_MOTU_MTPII_NET_MIDIIN_2 = 210,MM_MOTU_MTPII_NET_MIDIOUT_2 = 210,MM_MOTU_MTPII_NET_MIDIIN_3 = 211,MM_MOTU_MTPII_NET_MIDIOUT_3 = 211,MM_MOTU_MTPII_NET_MIDIIN_4 = 212,MM_MOTU_MTPII_NET_MIDIOUT_4 = 212,MM_MOTU_MTPII_NET_MIDIIN_5 = 213,MM_MOTU_MTPII_NET_MIDIOUT_5 = 213,MM_MOTU_MTPII_NET_MIDIIN_6 = 214,MM_MOTU_MTPII_NET_MIDIOUT_6 = 214,MM_MOTU_MTPII_NET_MIDIIN_7 = 215,MM_MOTU_MTPII_NET_MIDIOUT_7 = 215,MM_MOTU_MTPII_NET_MIDIIN_8 = 216,MM_MOTU_MTPII_NET_MIDIOUT_8 = 216,MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300,MM_MOTU_MXP_MIDIIN_SYNC = 300,MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306,MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306,MM_MOTU_MXPMPU_MIDIOUT_ALL = 400,MM_MOTU_MXPMPU_MIDIIN_SYNC = 400,MM_MOTU_MXPMPU_MIDIIN_1 = 401,MM_MOTU_MXPMPU_MIDIOUT_1 = 401,MM_MOTU_MXPMPU_MIDIIN_2 = 402,MM_MOTU_MXPMPU_MIDIOUT_2 = 402,MM_MOTU_MXPMPU_MIDIIN_3 = 403,MM_MOTU_MXPMPU_MIDIOUT_3 = 403,MM_MOTU_MXPMPU_MIDIIN_4 = 404,MM_MOTU_MXPMPU_MIDIOUT_4 = 404,MM_MOTU_MXPMPU_MIDIIN_5 = 405,MM_MOTU_MXPMPU_MIDIOUT_5 = 405,MM_MOTU_MXPMPU_MIDIIN_6 = 406,MM_MOTU_MXPMPU_MIDIOUT_6 = 406,MM_MOTU_MXN_MIDIOUT_ALL = 500,MM_MOTU_MXN_MIDIIN_SYNC = 500,MM_MOTU_MXN_MIDIIN_1 = 501,MM_MOTU_MXN_MIDIOUT_1 = 501,MM_MOTU_MXN_MIDIIN_2 = 502,MM_MOTU_MXN_MIDIOUT_2 = 502,MM_MOTU_MXN_MIDIIN_3 = 503,MM_MOTU_MXN_MIDIOUT_3 = 503,MM_MOTU_MXN_MIDIIN_4 = 504,MM_MOTU_MXN_MIDIOUT_4 = 504,MM_MOTU_FLYER_MIDI_IN_SYNC = 600,MM_MOTU_FLYER_MIDI_IN_A = 601,MM_MOTU_FLYER_MIDI_OUT_A = 601,MM_MOTU_FLYER_MIDI_IN_B = 602,MM_MOTU_FLYER_MIDI_OUT_B = 602,MM_MOTU_PKX_MIDI_IN_SYNC = 700,MM_MOTU_PKX_MIDI_IN_A = 701,MM_MOTU_PKX_MIDI_OUT_A = 701,MM_MOTU_PKX_MIDI_IN_B = 702,MM_MOTU_PKX_MIDI_OUT_B = 702,MM_MOTU_DTX_MIDI_IN_SYNC = 800,MM_MOTU_DTX_MIDI_IN_A = 801,MM_MOTU_DTX_MIDI_OUT_A = 801,MM_MOTU_DTX_MIDI_IN_B = 802,MM_MOTU_DTX_MIDI_OUT_B = 802,MM_MOTU_MTPAV_MIDIOUT_ALL = 900,MM_MOTU_MTPAV_MIDIIN_SYNC = 900,MM_MOTU_MTPAV_MIDIIN_1 = 901,MM_MOTU_MTPAV_MIDIOUT_1 = 901,MM_MOTU_MTPAV_MIDIIN_2 = 902,MM_MOTU_MTPAV_MIDIOUT_2 = 902,MM_MOTU_MTPAV_MIDIIN_3 = 903,MM_MOTU_MTPAV_MIDIOUT_3 = 903,MM_MOTU_MTPAV_MIDIIN_4 = 904,MM_MOTU_MTPAV_MIDIOUT_4 = 904,MM_MOTU_MTPAV_MIDIIN_5 = 905,MM_MOTU_MTPAV_MIDIOUT_5 = 905,MM_MOTU_MTPAV_MIDIIN_6 = 906,MM_MOTU_MTPAV_MIDIOUT_6 = 906,MM_MOTU_MTPAV_MIDIIN_7 = 907,MM_MOTU_MTPAV_MIDIOUT_7 = 907,MM_MOTU_MTPAV_MIDIIN_8 = 908,MM_MOTU_MTPAV_MIDIOUT_8 = 908,MM_MOTU_MTPAV_NET_MIDIIN_1 = 909,MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909,MM_MOTU_MTPAV_NET_MIDIIN_2 = 910,MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910,MM_MOTU_MTPAV_NET_MIDIIN_3 = 911,MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911,MM_MOTU_MTPAV_NET_MIDIIN_4 = 912,MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912,MM_MOTU_MTPAV_NET_MIDIIN_5 = 913,MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913,MM_MOTU_MTPAV_NET_MIDIIN_6 = 914,MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914,MM_MOTU_MTPAV_NET_MIDIIN_7 = 915,MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915,MM_MOTU_MTPAV_NET_MIDIIN_8 = 916,MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916,MM_MOTU_MTPAV_MIDIIN_ADAT = 917,MM_MOTU_MTPAV_MIDIOUT_ADAT = 917,MM_MIRO_MOVIEPRO = 1,MM_MIRO_VIDEOD1 = 2,MM_MIRO_VIDEODC1TV = 3,MM_MIRO_VIDEOTD = 4,MM_MIRO_DC30_WAVEOUT = 5,MM_MIRO_DC30_WAVEIN = 6,MM_MIRO_DC30_MIX = 7,MM_NEC_73_86_SYNTH = 5,MM_NEC_73_86_WAVEOUT = 6,MM_NEC_73_86_WAVEIN = 7,MM_NEC_26_SYNTH = 9,MM_NEC_MPU401_MIDIOUT = 10,MM_NEC_MPU401_MIDIIN = 11,MM_NEC_JOYSTICK = 12,MM_NORRIS_VOICELINK = 1,MM_NORTEL_MPXAC_WAVEIN = 1,MM_NORTEL_MPXAC_WAVEOUT = 2,MM_NVIDIA_WAVEOUT = 1,MM_NVIDIA_WAVEIN = 2,MM_NVIDIA_MIDIOUT = 3,MM_NVIDIA_MIDIIN = 4,MM_NVIDIA_GAMEPORT = 5,MM_NVIDIA_MIXER = 6,MM_NVIDIA_AUX = 7,MM_OKSORI_BASE = 0,MM_OKSORI_OSR8_WAVEOUT = 1,MM_OKSORI_OSR8_WAVEIN = 2,MM_OKSORI_OSR16_WAVEOUT = 3,MM_OKSORI_OSR16_WAVEIN = 4,MM_OKSORI_FM_OPL4 = 5,MM_OKSORI_MIX_MASTER = 6,MM_OKSORI_MIX_WAVE = 7,MM_OKSORI_MIX_FM = 8,MM_OKSORI_MIX_LINE = 9,MM_OKSORI_MIX_CD = 10,MM_OKSORI_MIX_MIC = 11,MM_OKSORI_MIX_ECHO = 12,MM_OKSORI_MIX_AUX1 = 13,MM_OKSORI_MIX_LINE1 = 14,MM_OKSORI_EXT_MIC1 = 15,MM_OKSORI_EXT_MIC2 = 16,MM_OKSORI_MIDIOUT = 17,MM_OKSORI_MIDIIN = 18,MM_OKSORI_MPEG_CDVISION = 19,MM_OSITECH_TRUMPCARD = 1,MM_OSPREY_1000WAVEIN = 1,MM_OSPREY_1000WAVEOUT = 2,MM_QUARTERDECK_LHWAVEIN = 0,MM_QUARTERDECK_LHWAVEOUT = 1,MM_RHETOREX_WAVEIN = 1,MM_RHETOREX_WAVEOUT = 2,MM_VOICEMIXER = 1,};
enum MACRO_MODULE_ATTR {MODULE_ATTR_NODEBUG = 0x400,};
enum MACRO_MOUSEEVENTF {MOUSEEVENTF_MOVE = 0x1,MOUSEEVENTF_LEFTDOWN = 0x2,MOUSEEVENTF_LEFTUP = 0x4,MOUSEEVENTF_RIGHTDOWN = 0x8,MOUSEEVENTF_RIGHTUP = 0x10,MOUSEEVENTF_MIDDLEDOWN = 0x20,MOUSEEVENTF_MIDDLEUP = 0x40,MOUSEEVENTF_WHEEL = 0x800,MOUSEEVENTF_VIRTUALDESK = 0x4000,MOUSEEVENTF_ABSOLUTE = 0x8000,MOUSEEVENTF_TOUCH = 0x100000,};
enum MACRO_MV_INSTANCE {MV_INSTANCE = 0x2000,};
enum MACRO_NDIS_DEVICE {NDIS_DEVICE_WAKE_UP_ENABLE = 0x1,NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = 0x2,NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = 0x4,};
enum MACRO_NDIS_PACKET {NDIS_PACKET_TYPE_DIRECTED = 0x1,NDIS_PACKET_TYPE_MULTICAST = 0x2,NDIS_PACKET_TYPE_ALL_MULTICAST = 0x4,NDIS_PACKET_TYPE_BROADCAST = 0x8,NDIS_PACKET_TYPE_SOURCE_ROUTING = 0x10,NDIS_PACKET_TYPE_PROMISCUOUS = 0x20,NDIS_PACKET_TYPE_SMT = 0x40,NDIS_PACKET_TYPE_ALL_LOCAL = 0x80,NDIS_PACKET_TYPE_GROUP = 0x1000,NDIS_PACKET_TYPE_ALL_FUNCTIONAL = 0x2000,NDIS_PACKET_TYPE_FUNCTIONAL = 0x4000,NDIS_PACKET_TYPE_MAC_FRAME = 0x8000,NDIS_RING_SIGNAL_LOSS = 0x8000,NDIS_RING_HARD_ERROR = 0x4000,NDIS_RING_SOFT_ERROR = 0x2000,NDIS_RING_TRANSMIT_BEACON = 0x1000,NDIS_RING_LOBE_WIRE_FAULT = 0x800,NDIS_RING_AUTO_REMOVAL_ERROR = 0x400,NDIS_RING_REMOVE_RECEIVED = 0x200,NDIS_RING_COUNTER_OVERFLOW = 0x100,NDIS_RING_SINGLE_STATION = 0x80,NDIS_RING_RING_RECOVERY = 0x40,NDIS_PROT_OPTION_ESTIMATED_LENGTH = 0x1,NDIS_PROT_OPTION_NO_LOOPBACK = 0x2,NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = 0x4,NDIS_PROT_OPTION_SEND_RESTRICTED = 0x8,NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = 0x1,NDIS_MAC_OPTION_RECEIVE_SERIALIZED = 0x2,NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = 0x4,NDIS_MAC_OPTION_NO_LOOPBACK = 0x8,NDIS_MAC_OPTION_FULL_DUPLEX = 0x10,NDIS_MAC_OPTION_EOTX_INDICATION = 0x20,NDIS_MAC_OPTION_8021P_PRIORITY = 0x40,NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = 0x80,NDIS_MAC_OPTION_RECEIVE_AT_DPC = 0x100,NDIS_MAC_OPTION_8021Q_VLAN = 0x200,NDIS_MAC_OPTION_RESERVED = 0x80000000,NDIS_MEDIA_CAP_TRANSMIT = 0x1,NDIS_MEDIA_CAP_RECEIVE = 0x2,NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = 0x1,};
enum MACRO_NETPROPERTY {NETPROPERTY_PERSISTENT = 1,};
enum MACRO_NONZEROLHND {NONZEROLHND = 2,};
enum MACRO_NONZEROLPTR {NONZEROLPTR = 0,};
enum MACRO_NOTSRCERASE {NOTSRCERASE = 0x1100A6,};
enum MACRO_NUMRESERVED {NUMRESERVED = 106,};
enum MACRO_OBEX_HEADER {OBEX_HEADER_UNICODE = 0,OBEX_HEADER_STREAM = 64,OBEX_HEADER_1BYTE = 128,OBEX_HEADER_4BYTE = 192,OBEX_HEADER_COUNT = 192,OBEX_HEADER_NAME = 1,OBEX_HEADER_TYPE = 66,OBEX_HEADER_LENGTH = 195,OBEX_HEADER_TIME_ISO = 68,OBEX_HEADER_TIME_COMPAT = 196,OBEX_HEADER_DESCRIPTION = 5,OBEX_HEADER_TARGET = 70,OBEX_HEADER_HTTP = 71,OBEX_HEADER_BODY = 72,OBEX_HEADER_END_OF_BODY = 73,OBEX_HEADER_WHO = 74,OBEX_HEADER_CONNECTION_ID = 203,OBEX_HEADER_APP_PARAMS = 76,OBEX_HEADER_AUTH_CHALLENGE = 77,OBEX_HEADER_AUTH_RESPONSE = 78,OBEX_HEADER_OBJECT_CLASS = 79,OBEX_OPCODE_FINALBIT = 128,OBEX_OPCODE_CONNECT = 128,OBEX_OPCODE_DISCONNECT = 129,OBEX_OPCODE_PUT = 2,OBEX_OPCODE_GET = 3,OBEX_OPCODE_SET_PATH = 133,OBEX_OPCODE_ABORT = 255,OBEX_REPLY_CONTINUE = 16,OBEX_REPLY_SUCCESS = 32,OBEX_REPLY_CREATED = 33,OBEX_REPLY_ACCEPTED = 34,OBEX_REPLY_NON_AUTHORITATIVE_INFO = 35,OBEX_REPLY_NO_CONTENT = 36,OBEX_REPLY_RESET_CONTENT = 37,OBEX_REPLY_PARTIAL_CONTENT = 38,OBEX_REPLY_MULIPLE_CHOICES = 48,OBEX_REPLY_MOVED_PERMANENTLY = 49,OBEX_REPLY_MOVED_TEMPORARILY = 50,OBEX_REPLY_SEE_OTHER = 51,OBEX_REPLY_NOT_NODIFIED = 52,OBEX_REPLY_USE_PROXY = 53,OBEX_REPLY_FAIL_BAD_REQUEST = 64,OBEX_REPLY_FAIL_UNAUTHORIZED = 65,OBEX_REPLY_FAIL_PAYMENT_REQUIRED = 66,OBEX_REPLY_FAIL_FORBIDDEN = 67,OBEX_REPLY_FAIL_NOT_FOUND = 68,OBEX_REPLY_FAIL_METHOD_NOT_ALLOWED = 69,OBEX_REPLY_FAIL_NOT_ACCEPTABLE = 70,OBEX_REPLY_FAIL_PROXY_AUTHORIZATION_REQUIRED = 71,OBEX_REPLY_FAIL_REQUEST_TIME_OUT = 72,OBEX_REPLY_FAIL_CONFLICT = 73,OBEX_REPLY_FAIL_GONE = 74,OBEX_REPLY_FAIL_LENGTH_REQUIRED = 75,OBEX_REPLY_FAIL_PRECONDITION_FAILED = 76,OBEX_REPLY_FAIL_REQUESTED_ENTITY_TOO_LARGE = 77,OBEX_REPLY_FAIL_REQUEST_URL_TOO_LARGE = 78,OBEX_REPLY_FAIL_UNSUPPORTED_MEDIA_TYPE = 79,OBEX_REPLY_FAIL_INTERNAL_SERVER_ERROR = 80,OBEX_REPLY_FAIL_NOT_IMPLEMENTED = 81,OBEX_REPLY_FAIL_BAD_GATEWAY = 82,OBEX_REPLY_FAIL_SERVICE_UNAVAILABLE = 83,OBEX_REPLY_FAIL_GATEWAY_TIMEOUT = 84,OBEX_REPLY_FAIL_HTTP_VERSION_NOT_SUPPORTED = 85,OBEX_REPLY_FAIL_DATABASE_FULL = 96,OBEX_REPLY_FAIL_DATABASE_LOCKED = 97,OBEX_DEVICE_CAP_UNKNOWN = 0,OBEX_DEVICE_CAP_PUSH = 1,OBEX_DEVICE_CAP_FILE_BROWSE = 2,OBEX_DEVICE_CAP_SYNC = 4,};
enum MACRO_PC_RESERVED {PC_RESERVED = 0x1,PC_EXPLICIT = 0x2,};
enum MACRO_PDEVICESIZE {PDEVICESIZE = 26,};
enum MACRO_PF_FLOATING {PF_FLOATING_POINT_PRECISION_ERRATA = 0,PF_FLOATING_POINT_EMULATED = 1,PF_COMPARE_EXCHANGE_DOUBLE = 2,PF_MMX_INSTRUCTIONS_AVAILABLE = 3,PF_PPC_MOVEMEM_64BIT_OK = 4,PF_ALPHA_BYTE_INSTRUCTIONS = 5,PF_XMMI_INSTRUCTIONS_AVAILABLE = 6,PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7,PF_RDTSC_INSTRUCTION_AVAILABLE = 8,};
enum MACRO_PLATFORM_ID {PLATFORM_ID_DOS = 300,PLATFORM_ID_OS2 = 400,PLATFORM_ID_NT = 500,PLATFORM_ID_OSF = 600,PLATFORM_ID_VMS = 700,};
enum MACRO_PRINTDLGORD {PRINTDLGORD = 1538,};
enum MACRO_PROPSETFLAG {PROPSETFLAG_DEFAULT = 0,PROPSETFLAG_NONSIMPLE = 1,PROPSETFLAG_ANSI = 2,PROPSETFLAG_UNBUFFERED = 4,};
enum MACRO_QOS_GENERAL {QOS_GENERAL_ID_BASE = 2000,QOS_OBJECT_END_OF_LIST = 2001,QOS_OBJECT_SD_MODE = 2002,QOS_OBJECT_SHAPING_RATE = 2003,QOS_OBJECT_DESTADDR = 2004,};
enum MACRO_RFCOMM_PORT {RFCOMM_PORT_FLAGS_REMOTE_DCB = 0x1,RFCOMM_PORT_FLAGS_KEEP_DCD = 0x2,RFCOMM_PORT_FLAGS_AUTHENTICATE = 0x4,RFCOMM_PORT_FLAGS_ENCRYPT = 0x8,};
enum MACRO_RTProximity {RTProximity = 6,};
enum MACRO_SCARD_CLASS {SCARD_CLASS_VENDOR_INFO = 1,SCARD_CLASS_COMMUNICATIONS = 2,SCARD_CLASS_PROTOCOL = 3,SCARD_CLASS_POWER_MGMT = 4,SCARD_CLASS_SECURITY = 5,SCARD_CLASS_MECHANICAL = 6,SCARD_CLASS_VENDOR_DEFINED = 7,SCARD_CLASS_IFD_PROTOCOL = 8,SCARD_CLASS_ICC_STATE = 9,SCARD_CLASS_SYSTEM = 32767,SCARD_ATTR_VENDOR_NAME = 65792,SCARD_ATTR_VENDOR_IFD_TYPE = 65793,SCARD_ATTR_VENDOR_IFD_VERSION = 65794,SCARD_ATTR_VENDOR_IFD_SERIAL_NO = 65795,SCARD_ATTR_CHANNEL_ID = 131344,SCARD_ATTR_PROTOCOL_TYPES = 196896,SCARD_ATTR_DEFAULT_CLK = 196897,SCARD_ATTR_MAX_CLK = 196898,SCARD_ATTR_DEFAULT_DATA_RATE = 196899,SCARD_ATTR_MAX_DATA_RATE = 196900,SCARD_ATTR_MAX_IFSD = 196901,SCARD_ATTR_POWER_MGMT_SUPPORT = 262449,SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = 328000,SCARD_ATTR_USER_AUTH_INPUT_DEVICE = 328002,SCARD_ATTR_CHARACTERISTICS = 393552,SCARD_ATTR_CURRENT_PROTOCOL_TYPE = 524801,SCARD_ATTR_CURRENT_CLK = 524802,SCARD_ATTR_CURRENT_F = 524803,SCARD_ATTR_CURRENT_D = 524804,SCARD_ATTR_CURRENT_N = 524805,SCARD_ATTR_CURRENT_W = 524806,SCARD_ATTR_CURRENT_IFSC = 524807,SCARD_ATTR_CURRENT_IFSD = 524808,SCARD_ATTR_CURRENT_BWT = 524809,SCARD_ATTR_CURRENT_CWT = 524810,SCARD_ATTR_CURRENT_EBC_ENCODING = 524811,SCARD_ATTR_EXTENDED_BWT = 524812,SCARD_ATTR_ICC_PRESENCE = 590592,SCARD_ATTR_ICC_INTERFACE_STATUS = 590593,SCARD_ATTR_CURRENT_IO_STATE = 590594,SCARD_ATTR_ATR_STRING = 590595,SCARD_ATTR_ICC_TYPE_PER_ATR = 590596,SCARD_ATTR_ESC_RESET = 499712,SCARD_ATTR_ESC_CANCEL = 499715,SCARD_ATTR_ESC_AUTHREQUEST = 499717,SCARD_ATTR_MAXINPUT = 499719,SCARD_ATTR_DEVICE_UNIT = 2147418113,SCARD_ATTR_DEVICE_IN_USE = 2147418114,SCARD_ATTR_DEVICE_FRIENDLY_NAME_A = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME_A = 2147418116,SCARD_ATTR_DEVICE_FRIENDLY_NAME_W = 2147418117,SCARD_ATTR_DEVICE_SYSTEM_NAME_W = 2147418118,SCARD_ATTR_SUPRESS_T1_IFS_REQUEST = 2147418119,SCARD_ATTR_DEVICE_FRIENDLY_NAME = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME = 2147418116,SCARD_T0_HEADER_LENGTH = 7,SCARD_T0_CMD_LENGTH = 5,SCARD_T1_PROLOGUE_LENGTH = 3,SCARD_T1_EPILOGUE_LENGTH = 2,SCARD_T1_MAX_IFS = 254,SCARD_UNKNOWN = 0,SCARD_ABSENT = 1,SCARD_PRESENT = 2,SCARD_SWALLOWED = 3,SCARD_POWERED = 4,SCARD_NEGOTIABLE = 5,SCARD_SPECIFIC = 6,SCARD_READER_SWALLOWS = 1,SCARD_READER_EJECTS = 2,SCARD_READER_CONFISCATES = 4,SCARD_READER_TYPE_SERIAL = 1,SCARD_READER_TYPE_PARALELL = 2,SCARD_READER_TYPE_KEYBOARD = 4,SCARD_READER_TYPE_SCSI = 8,SCARD_READER_TYPE_IDE = 16,SCARD_READER_TYPE_USB = 32,SCARD_READER_TYPE_PCMCIA = 64,SCARD_READER_TYPE_VENDOR = 240,SCARD_AUTOALLOCATE = 4294967295,SCARD_SCOPE_USER = 0,SCARD_SCOPE_TERMINAL = 1,SCARD_SCOPE_SYSTEM = 2,SCARD_PROVIDER_PRIMARY = 1,SCARD_PROVIDER_CSP = 2,SCARD_STATE_UNAWARE = 0,SCARD_STATE_IGNORE = 1,SCARD_STATE_CHANGED = 2,SCARD_STATE_UNKNOWN = 4,SCARD_STATE_UNAVAILABLE = 8,SCARD_STATE_EMPTY = 16,SCARD_STATE_PRESENT = 32,SCARD_STATE_ATRMATCH = 64,SCARD_STATE_EXCLUSIVE = 128,SCARD_STATE_INUSE = 256,SCARD_STATE_MUTE = 512,SCARD_STATE_UNPOWERED = 1024,SCARD_SHARE_EXCLUSIVE = 1,SCARD_SHARE_SHARED = 2,SCARD_SHARE_DIRECT = 3,SCARD_LEAVE_CARD = 0,SCARD_RESET_CARD = 1,SCARD_UNPOWER_CARD = 2,SCARD_EJECT_CARD = 3,};
enum MACRO_SECPKG_ATTR {SECPKG_ATTR_ISSUER_LIST = 0x50,SECPKG_ATTR_REMOTE_CRED = 0x51,SECPKG_ATTR_LOCAL_CRED = 0x52,SECPKG_ATTR_REMOTE_CERT_CONTEXT = 0x53,SECPKG_ATTR_LOCAL_CERT_CONTEXT = 0x54,SECPKG_ATTR_ROOT_STORE = 0x55,SECPKG_ATTR_SUPPORTED_ALGS = 0x56,SECPKG_ATTR_CIPHER_STRENGTHS = 0x57,SECPKG_ATTR_SUPPORTED_PROTOCOLS = 0x58,SECPKG_ATTR_ISSUER_LIST_EX = 0x59,SECPKG_ATTR_CONNECTION_INFO = 0x5A,SECPKG_ATTR_EAP_KEY_BLOCK = 0x5B,SECPKG_ATTR_MAPPED_CRED_ATTR = 0x5C,SECPKG_ATTR_CACHE_INFO_ATTR = 0x5D,};
enum MACRO_SECPKG_CRED {SECPKG_CRED_INBOUND = 0x1,SECPKG_CRED_OUTBOUND = 0x2,SECPKG_CRED_BOTH = 0x3,SECPKG_CRED_DEFAULT = 0x4,SECPKG_CRED_RESERVED = 0xF0000000,};
enum MACRO_SENSITIVITY {SENSITIVITY_NONE = 0x0,SENSITIVITY_PERSONAL = 0x1,SENSITIVITY_PRIVATE = 0x2,SENSITIVITY_COMPANY_CONFIDENTIAL = 0x3,};
enum MACRO_SERVICETYPE {SERVICETYPE_NOTRAFFIC = 0x0,SERVICETYPE_BESTEFFORT = 0x1,SERVICETYPE_CONTROLLEDLOAD = 0x2,SERVICETYPE_GUARANTEED = 0x3,SERVICETYPE_NETWORK_UNAVAILABLE = 0x4,SERVICETYPE_GENERAL_INFORMATION = 0x5,SERVICETYPE_NOCHANGE = 0x6,SERVICETYPE_NONCONFORMING = 0x9,SERVICETYPE_NETWORK_CONTROL = 0xA,SERVICETYPE_QUALITATIVE = 0xD,};
enum MACRO_SIGNER_INFO {PKCS7_SIGNER_INFO = 500,CMS_SIGNER_INFO = 501,};
enum MACRO_SIZEPALETTE {SIZEPALETTE = 104,};
enum MACRO_STATURLFLAG {STATURLFLAG_ISCACHED = 0x1,STATURLFLAG_ISTOPLEVEL = 0x2,};
enum MACRO_STATUS_CTRL {STATUS_CTRL_UNKNOWN = 0,STATUS_CTRL_INSTALLED = 1,STATUS_CTRL_SHARED = 2,STATUS_CTRL_DAMAGED = 3,STATUS_CTRL_UNPLUGGED = 4,};
enum MACRO_STOPINSTALL {STOPINSTALL_REBOOTNEEDED = 0x1,STOPINSTALL_REBOOTREFUSED = 0x2,};
enum MACRO_SUBSMGRENUM {SUBSMGRENUM_TEMP = 0x1,SUBSMGRENUM_MASK = 0x1,};
enum MACRO_SYNCHRONIZE {SYNCHRONIZE = 0x100000,};
enum MACRO_SYNCMGRITEM {SYNCMGRITEM_ITEMFLAGMASK = 0x1F,};
enum MACRO_SYSTEM_FLAG {SYSTEM_FLAG_REMOTE_BOOT_CLIENT = 0x1,SYSTEM_FLAG_DISKLESS_CLIENT = 0x2,};
enum MACRO_SYSTEM_FONT {SYSTEM_FONT = 13,};
enum MACRO_TCM_HITTEST {TCM_HITTEST = 4877,TCM_SETITEMEXTRA = 4878,TCM_ADJUSTRECT = 4904,TCM_SETITEMSIZE = 4905,TCM_REMOVEIMAGE = 4906,TCM_SETPADDING = 4907,TCM_GETROWCOUNT = 4908,TCM_GETCURFOCUS = 4911,TCM_SETCURFOCUS = 4912,TCM_SETMINTABWIDTH = 4913,TCM_DESELECTALL = 4914,TCM_HIGHLIGHTITEM = 4915,TCM_SETEXTENDEDSTYLE = 4916,TCM_GETEXTENDEDSTYLE = 4917,};
enum MACRO_TCN_KEYDOWN {TCN_KEYDOWN = -550,TCN_SELCHANGE = -551,TCN_SELCHANGING = -552,};
enum MACRO_THREAD_BASE {THREAD_BASE_PRIORITY_LOWRT = 15,THREAD_BASE_PRIORITY_MAX = 2,THREAD_BASE_PRIORITY_MIN = -2,THREAD_BASE_PRIORITY_IDLE = -15,};
enum MACRO_TRANSPARENT {TRANSPARENT = 1,OPAQUE = 2,};
enum MACRO_UI_READONLY {UI_READONLY = 0x1,};
enum MACRO_USB_SUPPORT {USB_SUPPORT_D0_COMMAND = 0x1,USB_SUPPORT_D1_COMMAND = 0x2,USB_SUPPORT_D2_COMMAND = 0x4,USB_SUPPORT_D3_COMMAND = 0x8,USB_SUPPORT_D1_WAKEUP = 0x10,USB_SUPPORT_D2_WAKEUP = 0x20,USB_MAX_LOAD_STRING = 0x105,USB_IN_TRANSFER = 0x80,USB_OUT_TRANSFER = 0x0,USB_NO_WAIT = 0x100,USB_SHORT_TRANSFER_OK = 0x200,USB_START_ISOCH_ASAP = 0x400,USB_COMPRESS_ISOCH = 0x800,USB_SEND_TO_DEVICE = 0x1000,USB_SEND_TO_INTERFACE = 0x2000,USB_SEND_TO_ENDPOINT = 0x4000,USB_DONT_BLOCK_FOR_MEM = 0x8000,USB_REQUEST_DEVICE_TO_HOST = 0x80,USB_REQUEST_HOST_TO_DEVICE = 0x0,USB_REQUEST_STANDARD = 0x0,USB_REQUEST_CLASS = 0x20,USB_REQUEST_VENDOR = 0x40,USB_REQUEST_RESERVED = 0x60,USB_REQUEST_FOR_DEVICE = 0x0,USB_REQUEST_FOR_INTERFACE = 0x1,USB_REQUEST_FOR_ENDPOINT = 0x2,USB_REQUEST_FOR_OTHER = 0x3,USB_NO_ERROR = 0x0,USB_CRC_ERROR = 0x1,USB_BIT_STUFFING_ERROR = 0x2,USB_DATA_TOGGLE_MISMATCH_ERROR = 0x3,USB_STALL_ERROR = 0x4,USB_DEVICE_NOT_RESPONDING_ERROR = 0x5,USB_PID_CHECK_FAILURE_ERROR = 0x6,USB_UNEXPECTED_PID_ERROR = 0x7,USB_DATA_OVERRUN_ERROR = 0x8,USB_DATA_UNDERRUN_ERROR = 0x9,USB_BUFFER_OVERRUN_ERROR = 0xC,USB_BUFFER_UNDERRUN_ERROR = 0xD,USB_NOT_ACCESSED_ERROR = 0xE,USB_NOT_ACCESSED_ALT = 0xF,USB_ISOCH_ERROR = 0x100,USB_CANCELED_ERROR = 0x101,USB_NOT_COMPLETE_ERROR = 0x103,USB_CLIENT_BUFFER_ERROR = 0x104,USB_CLOSE_DEVICE = 0x1,USB_NO_INFO = 0xFFFFFFFF,};
enum MACRO_WAB_RESOLVE {WAB_RESOLVE_LOCAL_ONLY = 0x80000000,WAB_RESOLVE_ALL_EMAILS = 0x40000000,WAB_RESOLVE_NO_ONE_OFFS = 0x20000000,WAB_RESOLVE_NEED_CERT = 0x10000000,WAB_RESOLVE_NO_NOT_FOUND_UI = 0x8000000,WAB_RESOLVE_USE_CURRENT_PROFILE = 0x4000000,WAB_RESOLVE_FIRST_MATCH = 0x2000000,WAB_RESOLVE_UNICODE = 0x1000000,};
enum MACRO_WAVE_FILTER {WAVE_FILTER_UNKNOWN = 0x0,WAVE_FILTER_DEVELOPMENT = 0xFFFF,WAVE_FILTER_VOLUME = 0x1,WAVE_FILTER_ECHO = 0x2,};
enum MACRO_WAVE_FORMAT {WAVE_FORMAT_UNKNOWN = 0x0,WAVE_FORMAT_ADPCM = 0x2,WAVE_FORMAT_IEEE_FLOAT = 0x3,WAVE_FORMAT_IBM_CVSD = 0x5,WAVE_FORMAT_ALAW = 0x6,WAVE_FORMAT_MULAW = 0x7,WAVE_FORMAT_OKI_ADPCM = 0x10,WAVE_FORMAT_DVI_ADPCM = 0x11,WAVE_FORMAT_IMA_ADPCM = 0x11,WAVE_FORMAT_MEDIASPACE_ADPCM = 0x12,WAVE_FORMAT_SIERRA_ADPCM = 0x13,WAVE_FORMAT_G723_ADPCM = 0x14,WAVE_FORMAT_DIGISTD = 0x15,WAVE_FORMAT_DIGIFIX = 0x16,WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 0x17,WAVE_FORMAT_MEDIAVISION_ADPCM = 0x18,WAVE_FORMAT_YAMAHA_ADPCM = 0x20,WAVE_FORMAT_SONARC = 0x21,WAVE_FORMAT_DSPGROUP_TRUESPEECH = 0x22,WAVE_FORMAT_ECHOSC1 = 0x23,WAVE_FORMAT_AUDIOFILE_AF36 = 0x24,WAVE_FORMAT_APTX = 0x25,WAVE_FORMAT_AUDIOFILE_AF10 = 0x26,WAVE_FORMAT_DOLBY_AC2 = 0x30,WAVE_FORMAT_GSM610 = 0x31,WAVE_FORMAT_MSNAUDIO = 0x32,WAVE_FORMAT_ANTEX_ADPCME = 0x33,WAVE_FORMAT_CONTROL_RES_VQLPC = 0x34,WAVE_FORMAT_DIGIREAL = 0x35,WAVE_FORMAT_DIGIADPCM = 0x36,WAVE_FORMAT_CONTROL_RES_CR10 = 0x37,WAVE_FORMAT_NMS_VBXADPCM = 0x38,WAVE_FORMAT_CS_IMAADPCM = 0x39,WAVE_FORMAT_ECHOSC3 = 0x3A,WAVE_FORMAT_ROCKWELL_ADPCM = 0x3B,WAVE_FORMAT_ROCKWELL_DIGITALK = 0x3C,WAVE_FORMAT_XEBEC = 0x3D,WAVE_FORMAT_G721_ADPCM = 0x40,WAVE_FORMAT_G728_CELP = 0x41,WAVE_FORMAT_MPEG = 0x50,WAVE_FORMAT_MPEGLAYER3 = 0x55,WAVE_FORMAT_CIRRUS = 0x60,WAVE_FORMAT_ESPCM = 0x61,WAVE_FORMAT_VOXWARE = 0x62,};
enum MACRO_WININETINFO {WININETINFO_OPTION_LOCK_HANDLE = 65534,};
enum MACRO_WININET_API {WININET_API_FLAG_ASYNC = 0x1,WININET_API_FLAG_SYNC = 0x4,WININET_API_FLAG_USE_CONTEXT = 0x8,};
enum MACRO_WSAPROTOCOL {WSAPROTOCOL_LEN = 255,};
enum MACRO__INC_AVIFMT {_INC_AVIFMT = 100,};
enum MACRO_formtypeAVI {formtypeAVI = 541677121,};
typedef struct tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef struct _MIB_IPMCAST_SCOPE MIB_IPMCAST_SCOPE;
typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef struct tMIXERLINECONTROLS MIXERLINECONTROLS;
typedef struct _NDISUIO_QUERY_OID NDISUIO_QUERY_OID;
typedef struct tagNETCON_CHOOSECONN NETCON_CHOOSECONN;
typedef struct tagNETCON_PROPERTIES NETCON_PROPERTIES;
typedef struct tagNMDATETIMEFORMATA NMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW NMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA NMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW NMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE NMLVODSTATECHANGE;
typedef struct tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;
typedef struct DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;
typedef struct tagIMECHARPOSITION *NPIMECHARPOSITION;
typedef struct tagRECONVERTSTRING *NPRECONVERTSTRING;
enum NSOStateConstants {nsoStopped = 0x0,nsoPaused = 0x1,nsoRunning = 0x2,};
enum NodeContainerType {NodeContainerTypeSequence = 0x0,NodeContainerTypeAlternative = 0x1,};
typedef struct _OFFLOAD_ALGO_INFO OFFLOAD_ALGO_INFO;
typedef struct olicelpwaveformat_tag OLICELPWAVEFORMAT;
typedef struct _C0D59FBB56C2A4C81C123E710A248183 OPENQUERYWINDOW_A;
typedef struct _22AB0003247B482AF4559A70859CB27B OPENQUERYWINDOW_W;
typedef struct tACMDRIVERDETAILS *PACMDRIVERDETAILS;
typedef struct tACMDRVSTREAMSIZE *PACMDRVSTREAMSIZE;
typedef struct tACMFILTERDETAILS *PACMFILTERDETAILS;
typedef struct tACMFORMATDETAILS *PACMFORMATDETAILS;
typedef struct _ACTRL_OVERLAPPED *PACTRL_OVERLAPPED;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 *PAM_AC3_ROOM_TYPE;
typedef struct tagBITMAPCOREHEADER *PBITMAPCOREHEADER;
typedef struct _tagBITMAPFILEHEADER *PBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *PBITMAPINFOHEADER;
typedef struct _CARD_CONFIG_INFO *PCARD_CONFIG_INFO;
typedef struct _CARD_EVENT_PARMS *PCARD_EVENT_PARMS;
typedef struct _CARD_TUPLE_PARMS *PCARD_TUPLE_PARMS;
typedef struct __CEL_EVENT_CREATE *PCEL_EVENT_CREATE;
typedef struct __CEL_EVENT_DELETE *PCEL_EVENT_DELETE;
typedef struct __CEL_HEAP_DESTROY *PCEL_HEAP_DESTROY;
typedef struct __CEL_HEAP_REALLOC *PCEL_HEAP_REALLOC;
typedef struct __CEL_MUTEX_CREATE *PCEL_MUTEX_CREATE;
typedef struct __CEL_MUTEX_DELETE *PCEL_MUTEX_DELETE;
typedef struct __CEL_THREAD_CLOSE *PCEL_THREAD_CLOSE;
typedef struct __CEL_VIRTUAL_COPY *PCEL_VIRTUAL_COPY;
typedef struct __CEL_VIRTUAL_FREE *PCEL_VIRTUAL_FREE;
typedef struct _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO *PCERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;
typedef struct _PCI_COMMON_CONFIG PCI_COMMON_CONFIG;
typedef struct _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;
typedef struct _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;
typedef struct tagDELETITEMSTRUCT *PDELETEITEMSTRUCT;
typedef struct _DEVOBJ_EXTENSION *PDEVOBJ_EXTENSION;
typedef struct IDirect3DSurface8 *PDIRECT3DSURFACE8;
typedef struct IDirect3DTexture8 *PDIRECT3DTEXTURE8;
typedef struct _DOT11_RSSI_RANGE *PDOT11_RSSI_RANGE;
typedef struct _DOT11_UPCALL_TLV *PDOT11_UPCALL_TLV;
typedef struct _DOT11_WEP_UPLOAD *PDOT11_WEP_UPLOAD;
typedef struct _DRIVER_EXTENSION *PDRIVER_EXTENSION;
typedef struct _629BEC52AC958F9227D2C26B709A43D0 *PERRORINFODLGTYPE;
typedef struct _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;
typedef struct _EXPLICIT_ACCESS_A *PEXPLICIT_ACCESSA;
typedef struct _EXPLICIT_ACCESS_W *PEXPLICIT_ACCESSW;
typedef struct _FAST_IO_DISPATCH *PFAST_IO_DISPATCH;
typedef IFileSourceFilter *PFILTERFILESOURCE;
typedef void ( *PFNIMGCTXCALLBACK)(void *, void *);
typedef struct _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;
typedef struct _INBOX_EVENT_DATA *PINBOX_EVENT_DATA;
typedef struct _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;
typedef struct _LINE_CALL_PARAMS *PLINE_CALL_PARAMS;
typedef struct _LINE_CALL_STATUS *PLINE_CALL_STATUS;
typedef struct _LINE_DIAL_PARAMS *PLINE_DIAL_PARAMS;
typedef struct _MIB_IPFORWARDROW *PMIB_IPFORWARDROW;
typedef struct _MIB_OPAQUE_QUERY *PMIB_OPAQUE_QUERY;
typedef struct _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;
typedef struct _NDIS_802_11_SSID *PNDIS_802_11_SSID;
typedef struct _NDIS_802_11_TEST *PNDIS_802_11_TEST;
typedef struct NDIS_BPC_CONNECT *PNDIS_BPC_CONNECT;
typedef struct _NDIS_BPC_DEVICES *PNDIS_BPC_DEVICES;
typedef struct _NDIS_TAPI_ACCEPT *PNDIS_TAPI_ACCEPT;
typedef struct _NDIS_TAPI_ANSWER *PNDIS_TAPI_ANSWER;
typedef struct _NDIS_TAPI_GET_ID *PNDIS_TAPI_GET_ID;
typedef struct _NDR_PIPE_MESSAGE *PNDR_PIPE_MESSAGE;
typedef struct _tagNotificationItem *PNOTIFICATIONITEM;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;
typedef struct _portemu_port_params PORTEMUPortParams;
typedef struct _PCI_PHYSICAL_LOC *PPCI_PHYSICAL_LOC;
typedef struct _PST_ACCESSCLAUSE *PPST_ACCESSCLAUSE;
typedef struct _PST_PROVIDERINFO *PPST_PROVIDERINFO;
typedef struct _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;
typedef struct _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;
typedef struct _ShellAppCategory *PSHELLAPPCATEGORY;
typedef struct sockaddr_storage *PSOCKADDR_STORAGE;
typedef struct _SPC_SP_OPUS_INFO *PSPC_SP_OPUS_INFO;
typedef struct _PST_ACCESSRULESET PST_ACCESSRULESET;
typedef struct _tagSubscriptionInfo *PSUBSCRIPTIONINFO;
typedef struct _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;
typedef struct _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS *PTOKEN_STATISTICS;
typedef struct _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;
typedef struct _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
enum RTC_SECURITY_TYPE {RTCSECT_AUDIO_VIDEO_MEDIA_ENCRYPTION = 0x0,RTCSECT_T120_MEDIA_ENCRYPTION = 0x1,};
enum RTC_SESSION_STATE {RTCSS_IDLE = 0x0,RTCSS_INCOMING = 0x1,RTCSS_ANSWERING = 0x2,RTCSS_INPROGRESS = 0x3,RTCSS_CONNECTED = 0x4,RTCSS_DISCONNECTED = 0x5,RTCSS_HOLD = 0x6,RTCSS_REFER = 0x7,};
enum RTC_WATCHER_STATE {RTCWS_UNKNOWN = 0x0,RTCWS_OFFERING = 0x1,RTCWS_ALLOWED = 0x2,RTCWS_BLOCKED = 0x3,RTCWS_DENIED = 0x4,RTCWS_PROMPT = 0x5,};
struct RequestDictionary;
typedef struct _SExistRestriction SExistRestriction;
typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
typedef struct _SPC_PE_IMAGE_DATA SPC_PE_IMAGE_DATA;
typedef struct _SPropProblemArray SPropProblemArray;
typedef struct _SSLCLIENTAUTHOPTS SSLCLIENTAUTHOPTS;
typedef struct _SSLCONNECTIONINFO SSLCONNECTIONINFO;
typedef struct tagSTORAGEDEVICEINFO STORAGEDEVICEINFO;
typedef struct _SdpAttributeRange SdpAttributeRange;
struct SearchAssistantOC;
struct ShellFolderViewOC;
typedef struct _TAPE_GET_POSITION TAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION TAPE_SET_POSITION;
enum TX_MISC_CONSTANTS {MAX_TRAN_DESC = 0x28,};
typedef struct _USB_CONFIGURATION USB_CONFIGURATION;
typedef struct tagVECTORRESTRICTION VECTORRESTRICTION;
typedef struct tagVERCONNECTIONINFO VERCONNECTIONINFO;
struct VoIPCallLogRecord;
typedef struct _WINDOWS_IAS_QUERY WINDOWS_IAS_QUERY;
typedef struct _WSAPROTOCOL_INFOA WSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW WSAPROTOCOL_INFOW;
struct WebViewFolderIcon;
enum _AUDIT_EVENT_TYPE {AuditEventObjectAccess = 0x0,AuditEventDirectoryServiceAccess = 0x1,};
enum _CARET_VISIBILITY {CARET_TYPE_Hide = 0x0,CARET_TYPE_Show = 0x1,CARET_VISIBILITY_Max = 0x7FFFFFFF,};
enum _D3DCUBEMAP_FACES {D3DCUBEMAP_FACE_POSITIVE_X = 0x0,D3DCUBEMAP_FACE_NEGATIVE_X = 0x1,D3DCUBEMAP_FACE_POSITIVE_Y = 0x2,D3DCUBEMAP_FACE_NEGATIVE_Y = 0x3,D3DCUBEMAP_FACE_POSITIVE_Z = 0x4,D3DCUBEMAP_FACE_NEGATIVE_Z = 0x5,D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPRIMITIVETYPE {D3DPT_POINTLIST = 0x1,D3DPT_LINELIST = 0x2,D3DPT_LINESTRIP = 0x3,D3DPT_TRIANGLELIST = 0x4,D3DPT_TRIANGLESTRIP = 0x5,D3DPT_TRIANGLEFAN = 0x6,D3DPT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DVSD_TOKENTYPE {D3DVSD_TOKEN_NOP = 0x0,D3DVSD_TOKEN_STREAM = 0x1,D3DVSD_TOKEN_STREAMDATA = 0x2,D3DVSD_TOKEN_TESSELLATOR = 0x3,D3DVSD_TOKEN_CONSTMEM = 0x4,D3DVSD_TOKEN_EXT = 0x5,D3DVSD_TOKEN_END = 0x7,D3DVSD_FORCE_DWORD = 0x7FFFFFFF,};
enum _DISPLAY_MOVEUNIT {DISPLAY_MOVEUNIT_PreviousLine = 0x1,DISPLAY_MOVEUNIT_NextLine = 0x2,DISPLAY_MOVEUNIT_CurrentLineStart = 0x3,DISPLAY_MOVEUNIT_CurrentLineEnd = 0x4,DISPLAY_MOVEUNIT_TopOfWindow = 0x5,DISPLAY_MOVEUNIT_BottomOfWindow = 0x6,DISPLAY_MOVEUNIT_Max = 0x7FFFFFFF,};
enum _DOT11_POWER_MODE {dot11_power_mode_unknown = 0x0,dot11_power_mode_active = 0x1,dot11_power_mode_powersave = 0x2,};
enum _DOT11_RESET_TYPE {dot11_reset_type_phy = 0x1,dot11_reset_type_mac = 0x2,dot11_reset_type_phy_and_mac = 0x3,};
enum _DOT11_ROW_STATUS {dot11_row_status_unknown = 0x0,dot11_row_status_active = 0x1,dot11_row_status_notInService = 0x2,dot11_row_status_notReady = 0x3,dot11_row_status_createAndGo = 0x4,dot11_row_status_createAndWait = 0x5,dot11_row_status_destroy = 0x6,};
enum _HTMLMaximizeFlag {HTMLMaximizeFlagNo = 0x0,HTMLMaximizeFlagYes = 0x10000,HTMLMaximizeFlag_Max = 0x7FFFFFFF,};
enum _HTMLMinimizeFlag {HTMLMinimizeFlagNo = 0x0,HTMLMinimizeFlagYes = 0x20000,HTMLMinimizeFlag_Max = 0x7FFFFFFF,};
enum _LAYOUT_MOVE_UNIT {LAYOUT_MOVE_UNIT_PreviousLine = 0x1,LAYOUT_MOVE_UNIT_NextLine = 0x2,LAYOUT_MOVE_UNIT_CurrentLineStart = 0x3,LAYOUT_MOVE_UNIT_CurrentLineEnd = 0x4,LAYOUT_MOVE_UNIT_NextLineStart = 0x5,LAYOUT_MOVE_UNIT_PreviousLineEnd = 0x6,LAYOUT_MOVE_UNIT_TopOfWindow = 0x7,LAYOUT_MOVE_UNIT_BottomOfWindow = 0x8,LAYOUT_MOVE_UNIT_OuterLineStart = 0x9,LAYOUT_MOVE_UNIT_OuterLineEnd = 0xA,LAYOUT_MOVE_UNIT_Max = 0x7FFFFFFF,};
enum _NDIS_MEDIA_STATE {NdisMediaStateConnected = 0x0,NdisMediaStateDisconnected = 0x1,};
enum _NDIS_WAN_QUALITY {NdisWanRaw = 0x0,NdisWanErrorControl = 0x1,NdisWanReliable = 0x2,};
enum _NvFocusDirection {FOCUS_NONE = 0x0,FOCUS_UP = 0x1,FOCUS_DOWN = 0x2,FOCUS_LEFT = 0x3,FOCUS_RIGHT = 0x4,};
enum _POWER_STATE_TYPE {SystemPowerState = 0x0,DevicePowerState = 0x1,};
struct _RPC_SECURITY_QOS {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;};
struct _RUNTIME_FUNCTION;
enum _WSAESETSERVICEOP {RNRSERVICE_REGISTER = 0x0,RNRSERVICE_DEREGISTER = 0x1,RNRSERVICE_DELETE = 0x2,};
struct _WSANETWORKEVENTS {int lNetworkEvents;int iErrorCode[10];};
enum _htmlCaptionAlign {htmlCaptionAlignNotSet = 0x0,htmlCaptionAlignLeft = 0x1,htmlCaptionAlignCenter = 0x2,htmlCaptionAlignRight = 0x3,htmlCaptionAlignJustify = 0x4,htmlCaptionAlignTop = 0x5,htmlCaptionAlignBottom = 0x6,htmlCaptionAlign_Max = 0x7FFFFFFF,};
enum _htmlControlAlign {htmlControlAlignNotSet = 0x0,htmlControlAlignLeft = 0x1,htmlControlAlignCenter = 0x2,htmlControlAlignRight = 0x3,htmlControlAlignTextTop = 0x4,htmlControlAlignAbsMiddle = 0x5,htmlControlAlignBaseline = 0x6,htmlControlAlignAbsBottom = 0x7,htmlControlAlignBottom = 0x8,htmlControlAlignMiddle = 0x9,htmlControlAlignTop = 0xA,htmlControlAlign_Max = 0x7FFFFFFF,};
enum _htmlPersistState {htmlPersistStateNormal = 0x0,htmlPersistStateFavorite = 0x1,htmlPersistStateHistory = 0x2,htmlPersistStateSnapshot = 0x3,htmlPersistStateUserData = 0x4,htmlPersistState_Max = 0x7FFFFFFF,};
enum _styleAccelerator {styleAcceleratorFalse = 0x0,styleAcceleratorTrue = 0x1,styleAccelerator_Max = 0x7FFFFFFF,};
enum _styleBorderStyle {styleBorderStyleNotSet = 0x0,styleBorderStyleDotted = 0x1,styleBorderStyleDashed = 0x2,styleBorderStyleSolid = 0x3,styleBorderStyleDouble = 0x4,styleBorderStyleGroove = 0x5,styleBorderStyleRidge = 0x6,styleBorderStyleInset = 0x7,styleBorderStyleOutset = 0x8,styleBorderStyleWindowInset = 0x9,styleBorderStyleNone = 0xA,styleBorderStyle_Max = 0x7FFFFFFF,};
enum _styleBorderWidth {styleBorderWidthThin = 0x0,styleBorderWidthMedium = 0x1,styleBorderWidthThick = 0x2,styleBorderWidth_Max = 0x7FFFFFFF,};
enum _styleFontVariant {styleFontVariantNotSet = 0x0,styleFontVariantSmallCaps = 0x1,styleFontVariantNormal = 0x2,styleFontVariant_Max = 0x7FFFFFFF,};
enum _styleTableLayout {styleTableLayoutNotSet = 0x0,styleTableLayoutAuto = 0x1,styleTableLayoutFixed = 0x2,styleTableLayout_Max = 0x7FFFFFFF,};
enum _styleTextJustify {styleTextJustifyNotSet = 0x0,styleTextJustifyInterWord = 0x1,styleTextJustifyNewspaper = 0x2,styleTextJustifyDistribute = 0x3,styleTextJustifyDistributeAllLines = 0x4,styleTextJustifyInterIdeograph = 0x5,styleTextJustifyInterCluster = 0x6,styleTextJustifyKashida = 0x7,styleTextJustifyAuto = 0x8,styleTextJustify_Max = 0x7FFFFFFF,};
enum _styleWritingMode {styleWritingModeLrtb = 0x0,styleWritingModeTbrl = 0x1,styleWritingModeNotSet = 0x2,styleWritingMode_Max = 0x7FFFFFFF,};
enum _tagPROPBAG2_TYPE {PROPBAG2_TYPE_UNDEFINED = 0x0,PROPBAG2_TYPE_DATA = 0x1,PROPBAG2_TYPE_URL = 0x2,PROPBAG2_TYPE_OBJECT = 0x3,PROPBAG2_TYPE_STREAM = 0x4,PROPBAG2_TYPE_STORAGE = 0x5,PROPBAG2_TYPE_MONIKER = 0x6,};
enum _tagSYNCMGRSTATUS {SYNCMGRSTATUS_STOPPED = 0x0,SYNCMGRSTATUS_SKIPPED = 0x1,SYNCMGRSTATUS_PENDING = 0x2,SYNCMGRSTATUS_UPDATING = 0x3,SYNCMGRSTATUS_SUCCEEDED = 0x4,SYNCMGRSTATUS_FAILED = 0x5,SYNCMGRSTATUS_PAUSED = 0x6,SYNCMGRSTATUS_RESUMING = 0x7,SYNCMGRSTATUS_DELETED = 0x100,};
typedef VolLockBroadcast *pVolLockBroadcast;
enum tagAspectInfoFlag {DVASPECTINFOFLAG_CANOPTIMIZE = 0x1,};
struct tagCStdStubBuffer { struct IRpcStubBufferVtbl *lpVtbl;int RefCount;struct IUnknown *pvServerObject;};
enum tagIBSCPENDINGMSG {IBSCPENDINGMSG_WAITDEFPROCESS = 0x0,IBSCPENDINGMSG_WAITNOPROCESS = 0x1,IBSCPENDINGMSG_CANCELCALL = 0x2,};
enum tagOBO_TOKEN_TYPE {OBO_USER = 0x1,OBO_COMPONENT = 0x2,OBO_SOFTWARE = 0x3,};
enum tagPROPPAGESTATUS {PROPPAGESTATUS_DIRTY = 0x1,PROPPAGESTATUS_VALIDATE = 0x2,PROPPAGESTATUS_CLEAN = 0x4,};
enum tagTunerInputType {TunerInputCable = 0x0,TunerInputAntenna = 0x1,};
typedef struct _userHMETAFILEPICT userHMETAFILEPICT;
typedef struct tACMDRIVERDETAILS ACMDRIVERDETAILS;
typedef struct tACMDRVSTREAMSIZE ACMDRVSTREAMSIZE;
typedef struct tACMFILTERDETAILS ACMFILTERDETAILS;
typedef struct tACMFORMATDETAILS ACMFORMATDETAILS;
typedef struct _ACTRL_OVERLAPPED ACTRL_OVERLAPPED;
typedef struct adpcmewaveformat_tag ADPCMEWAVEFORMAT;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 AM_AC3_ROOM_TYPE;
typedef struct _70FE3ED39A29D5613E00A3E72F8FD4C3 ATM_QOS_CLASS_IE;
typedef struct _avitimecodeindex AVITIMECODEINDEX;
struct AdminIndexServer;
typedef struct tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef struct _tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;
typedef struct tagBUCKETCATEGORIZE BUCKETCATEGORIZE;
typedef struct __bth_inquiry_result BthInquiryResult;
typedef struct _CARD_CONFIG_INFO CARD_CONFIG_INFO;
typedef struct _CARD_EVENT_PARMS CARD_EVENT_PARMS;
typedef struct _CARD_TUPLE_PARMS CARD_TUPLE_PARMS;
typedef struct __CEL_EVENT_CREATE CEL_EVENT_CREATE;
typedef struct __CEL_EVENT_DELETE CEL_EVENT_DELETE;
typedef struct __CEL_HEAP_DESTROY CEL_HEAP_DESTROY;
typedef struct __CEL_HEAP_REALLOC CEL_HEAP_REALLOC;
typedef struct __CEL_MUTEX_CREATE CEL_MUTEX_CREATE;
typedef struct __CEL_MUTEX_DELETE CEL_MUTEX_DELETE;
typedef struct __CEL_THREAD_CLOSE CEL_THREAD_CLOSE;
typedef struct __CEL_VIRTUAL_COPY CEL_VIRTUAL_COPY;
typedef struct __CEL_VIRTUAL_FREE CEL_VIRTUAL_FREE;
typedef struct _CERT_KEY_CONTEXT CERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO CERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH CERT_USAGE_MATCH;
struct CIEOptionElement;
struct CIESelectElement;
typedef struct _CMSG_SIGNER_INFO CMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO CMSG_STREAM_INFO;
struct CPersistDataPeer;
struct CPersistShortcut;
struct CPersistSnapshot;
struct CPersistUserData;
typedef struct _CRYPT_ATTRIBUTES CRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY CRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB;
struct CScriptErrorList;
struct CTemplatePrinter;
struct CoMapMIMEToCLSID;
typedef struct _D3DRASTER_STATUS D3DRASTER_STATUS;
typedef struct _D3DTRIPATCH_INFO D3DTRIPATCH_INFO;
typedef struct tagDATABLOCKHEADER DATABLOCK_HEADER;
enum DBBINDSTATUSENUM {DBBINDSTATUS_OK = 0x0,DBBINDSTATUS_BADORDINAL = 0x1,DBBINDSTATUS_UNSUPPORTEDCONVERSION = 0x2,DBBINDSTATUS_BADBINDINFO = 0x3,DBBINDSTATUS_BADSTORAGEFLAGS = 0x4,DBBINDSTATUS_NOINTERFACE = 0x5,DBBINDSTATUS_MULTIPLESTORAGE = 0x6,};
enum DBCOMPAREOPSENUM {DBCOMPAREOPS_LT = 0x0,DBCOMPAREOPS_LE = 0x1,DBCOMPAREOPS_EQ = 0x2,DBCOMPAREOPS_GE = 0x3,DBCOMPAREOPS_GT = 0x4,DBCOMPAREOPS_BEGINSWITH = 0x5,DBCOMPAREOPS_CONTAINS = 0x6,DBCOMPAREOPS_NE = 0x7,DBCOMPAREOPS_IGNORE = 0x8,DBCOMPAREOPS_CASESENSITIVE = 0x1000,DBCOMPAREOPS_CASEINSENSITIVE = 0x2000,};
typedef struct tagDBCONSTRAINTDESC DBCONSTRAINTDESC;
enum DBEVENTPHASEENUM {DBEVENTPHASE_OKTODO = 0x0,DBEVENTPHASE_ABOUTTODO = 0x1,DBEVENTPHASE_SYNCHAFTER = 0x2,DBEVENTPHASE_FAILEDTODO = 0x3,DBEVENTPHASE_DIDEVENT = 0x4,};
enum DBEXECLIMITSENUM {DBEXECLIMITS_ABORT = 0x1,DBEXECLIMITS_STOP = 0x2,DBEXECLIMITS_SUSPEND = 0x3,};
enum DBPARAMFLAGSENUM {DBPARAMFLAGS_ISINPUT = 0x1,DBPARAMFLAGS_ISOUTPUT = 0x2,DBPARAMFLAGS_ISSIGNED = 0x10,DBPARAMFLAGS_ISNULLABLE = 0x40,DBPARAMFLAGS_ISLONG = 0x80,};
enum DBPROPSTATUSENUM {DBPROPSTATUS_OK = 0x0,DBPROPSTATUS_NOTSUPPORTED = 0x1,DBPROPSTATUS_BADVALUE = 0x2,DBPROPSTATUS_BADOPTION = 0x3,DBPROPSTATUS_BADCOLUMN = 0x4,DBPROPSTATUS_NOTALLSETTABLE = 0x5,DBPROPSTATUS_NOTSETTABLE = 0x6,DBPROPSTATUS_NOTSET = 0x7,DBPROPSTATUS_CONFLICTING = 0x8,};
typedef struct tagDBROWWATCHRANGE DBROWWATCHCHANGE;
enum DBSOURCETYPEENUM {DBSOURCETYPE_DATASOURCE = 0x1,DBSOURCETYPE_ENUMERATOR = 0x2,};
typedef struct _DDOPTSURFACEDESC DDOPTSURFACEDESC;
typedef struct tagDELETITEMSTRUCT DELETEITEMSTRUCT;
typedef struct _5EF848D89F9DCE1B24DE4CD973F24EF8 DETECTION_STRUCT;
typedef struct _DEVOBJ_EXTENSION DEVOBJ_EXTENSION;
typedef struct _DOT11_RSSI_RANGE DOT11_RSSI_RANGE;
typedef struct _DOT11_UPCALL_TLV DOT11_UPCALL_TLV;
typedef struct _DOT11_WEP_UPLOAD DOT11_WEP_UPLOAD;
typedef struct _DRIVER_EXTENSION DRIVER_EXTENSION;
typedef struct _9BDEEC9D290208213B3D235A4099D9F6 DSQUERYCLASSLIST;
typedef struct tagDVD_DECODER_CAPS DVD_DECODER_CAPS;
struct DWebBridgeEvents {struct DWebBridgeEventsVtbl *lpVtbl;};
enum DXINOUTINFOFLAGS {DXINOUTF_OPTIONAL = 0x1,};
typedef struct tagDXNATIVETYPEINFO DXNATIVETYPEINFO;
typedef struct tagDXOVERSAMPLEDESC DXOVERSAMPLEDESC;
typedef struct tagDXPACKEDRECTDESC DXPACKEDRECTDESC;
enum DXTFILTER_DISPID {DISPID_DXTFilter_Percent = 0x1,DISPID_DXTFilter_Duration = 0x2,DISPID_DXTFilter_Enabled = 0x3,DISPID_DXTFilter_Status = 0x4,DISPID_DXTFilter_Apply = 0x5,DISPID_DXTFilter_Play = 0x6,DISPID_DXTFilter_Stop = 0x7,DISPID_DXTFilter_MAX = 0x8,};
enum DXTFILTER_STATUS {DXTFILTER_STATUS_Stopped = 0x0,DXTFILTER_STATUS_Applied = 0x1,DXTFILTER_STATUS_Playing = 0x2,DXTFILTER_STATUS_MAX = 0x3,};
struct DXTFilterFactory;
struct DispHTMLDefaults {struct DispHTMLDefaultsVtbl *lpVtbl;};
struct DispHTMLDocument {struct DispHTMLDocumentVtbl *lpVtbl;};
struct DispHTMLSpanFlow {struct DispHTMLSpanFlowVtbl *lpVtbl;};
struct DispHTMLTableCol {struct DispHTMLTableColVtbl *lpVtbl;};
struct DispHTMLTableRow {struct DispHTMLTableRowVtbl *lpVtbl;};
typedef struct _629BEC52AC958F9227D2C26B709A43D0 ERRORINFODLGTYPE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE;
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef struct _EXPLICIT_ACCESS_A EXPLICIT_ACCESSA;
typedef struct _EXPLICIT_ACCESS_W EXPLICIT_ACCESSW;
typedef struct _FAST_IO_DISPATCH FAST_IO_DISPATCH;
typedef struct tagFILECHANGENOTIFY FILECHANGENOTIFY;
struct FramesCollection;
typedef struct gsm610waveformat_tag GSM610WAVEFORMAT;
typedef void *HCRYPTOIDFUNCSET;
typedef struct _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
typedef struct _HSE_VERSION_INFO HSE_VERSION_INFO;
struct HTCEventBehavior;
struct HTMLAnchorEvents {struct HTMLAnchorEventsVtbl *lpVtbl;};
struct HTMLBlockElement;
struct HTMLCurrentStyle;
struct HTMLDListElement;
struct HTMLDOMAttribute;
struct HTMLFrameElement;
struct HTMLFrameSetSite;
struct HTMLInputElement;
struct HTMLLabelElement;
struct HTMLLabelEvents2 {struct HTMLLabelEvents2Vtbl *lpVtbl;};
struct HTMLOListElement;
struct HTMLParamElement;
struct HTMLScriptEvents {struct HTMLScriptEventsVtbl *lpVtbl;};
struct HTMLStyleElement;
struct HTMLTableCaption;
struct HTMLTableEvents2 {struct HTMLTableEvents2Vtbl *lpVtbl;};
struct HTMLTableSection;
struct HTMLTitleElement;
struct HTMLUListElement;
struct HTMLWindowEvents {struct HTMLWindowEventsVtbl *lpVtbl;};
typedef struct _HTML_PAINT_XFORM HTML_PAINT_XFORM;
typedef struct tagHTTPMAILLOCATION HTTPMAILLOCATION;
typedef struct tagHTTPMAILPROPFIND HTTPMAILPROPFIND;
typedef struct tagHTTPMAILRESPONSE HTTPMAILRESPONSE;
struct HeaderCollection;
struct HostDialogHelper;
struct IAMDroppedFrames {struct IAMDroppedFramesVtbl *lpVtbl;};
struct IAMMediaContent2 {struct IAMMediaContent2Vtbl *lpVtbl;};
struct IAMNetShowConfig {struct IAMNetShowConfigVtbl *lpVtbl;};
struct IAMNetworkStatus {struct IAMNetworkStatusVtbl *lpVtbl;};
struct IAMStreamControl {struct IAMStreamControlVtbl *lpVtbl;};
struct IBluetoothDevice {struct IBluetoothDeviceVtbl *lpVtbl;};
struct ICatalogFileInfo {struct ICatalogFileInfoVtbl *lpVtbl;};
struct IChapteredRowset {struct IChapteredRowsetVtbl *lpVtbl;};
struct ICommDlgBrowser2 {struct ICommDlgBrowser2Vtbl *lpVtbl;};
struct ICommandValidate {struct ICommandValidateVtbl *lpVtbl;};
struct ICompositeFolder {struct ICompositeFolderVtbl *lpVtbl;};
struct IConnectionPoint {struct IConnectionPointVtbl *lpVtbl;};
struct IContextCallback {struct IContextCallbackVtbl *lpVtbl;};
struct ICreateErrorInfo {struct ICreateErrorInfoVtbl *lpVtbl;};
struct ICreateTypeInfo2 {struct ICreateTypeInfo2Vtbl *lpVtbl;};
struct IDATASRCListener {struct IDATASRCListenerVtbl *lpVtbl;};
struct IDBCreateCommand {struct IDBCreateCommandVtbl *lpVtbl;};
struct IDBCreateSession {struct IDBCreateSessionVtbl *lpVtbl;};
struct IDBSchemaCommand {struct IDBSchemaCommandVtbl *lpVtbl;};
struct IDVDProgramChain {struct IDVDProgramChainVtbl *lpVtbl;};
struct IDeferredCommand {struct IDeferredCommandVtbl *lpVtbl;};
struct IDirect3DDevice8 {struct IDirect3DDevice8Vtbl *lpVtbl;};
struct IDirect3DVolume8 {struct IDirect3DVolume8Vtbl *lpVtbl;};
struct IDirectContainer {struct IDirectContainerVtbl *lpVtbl;};
struct IDirectDrawVideo {struct IDirectDrawVideoVtbl *lpVtbl;};
struct IDisplayServices {struct IDisplayServicesVtbl *lpVtbl;};
struct IDocHostShowUICE {struct IDocHostShowUICEVtbl *lpVtbl;};
struct IDownloadManager {struct IDownloadManagerVtbl *lpVtbl;};
struct IDownloadSiteMgr {struct IDownloadSiteMgrVtbl *lpVtbl;};
struct IDvdGraphBuilder {struct IDvdGraphBuilderVtbl *lpVtbl;};
struct IElementBehavior {struct IElementBehaviorVtbl *lpVtbl;};
struct IEnumConnections {struct IEnumConnectionsVtbl *lpVtbl;};
struct IEnumExtraSearch {struct IEnumExtraSearchVtbl *lpVtbl;};
struct IEnumJavaPackage {struct IEnumJavaPackageVtbl *lpVtbl;};
struct IEnumPStoreItems {struct IEnumPStoreItemsVtbl *lpVtbl;};
struct IEnumPStoreTypes {struct IEnumPStoreTypesVtbl *lpVtbl;};
struct IEnumPropertyMap {struct IEnumPropertyMapVtbl *lpVtbl;};
struct IEnumSTATPROPBAG {struct IEnumSTATPROPBAGVtbl *lpVtbl;};
struct IEnumSTATPROPSTG {struct IEnumSTATPROPSTGVtbl *lpVtbl;};
struct IEnumSoapMappers {struct IEnumSoapMappersVtbl *lpVtbl;};
struct IEnumWSDLService {struct IEnumWSDLServiceVtbl *lpVtbl;};
struct IFileSinkFilter2 {struct IFileSinkFilter2Vtbl *lpVtbl;};
struct IFontCacheNotify {struct IFontCacheNotifyVtbl *lpVtbl;};
struct IFullScreenVideo {struct IFullScreenVideoVtbl *lpVtbl;};
struct IHTCDescBehavior {struct IHTCDescBehaviorVtbl *lpVtbl;};
struct IHTMLAppBehavior {struct IHTMLAppBehaviorVtbl *lpVtbl;};
struct IHTMLAreaElement {struct IHTMLAreaElementVtbl *lpVtbl;};
struct IHTMLBaseElement {struct IHTMLBaseElementVtbl *lpVtbl;};
struct IHTMLBodyElement {struct IHTMLBodyElementVtbl *lpVtbl;};
struct IHTMLDOMTextNode {struct IHTMLDOMTextNodeVtbl *lpVtbl;};
struct IHTMLDXTransform {struct IHTMLDXTransformVtbl *lpVtbl;};
struct IHTMLDatabinding {struct IHTMLDatabindingVtbl *lpVtbl;};
struct IHTMLDivPosition {struct IHTMLDivPositionVtbl *lpVtbl;};
struct IHTMLFontElement {struct IHTMLFontElementVtbl *lpVtbl;};
struct IHTMLFormElement {struct IHTMLFormElementVtbl *lpVtbl;};
struct IHTMLHeadElement {struct IHTMLHeadElementVtbl *lpVtbl;};
struct IHTMLHtmlElement {struct IHTMLHtmlElementVtbl *lpVtbl;};
struct IHTMLImgElement2 {struct IHTMLImgElement2Vtbl *lpVtbl;};
struct IHTMLLinkElement {struct IHTMLLinkElementVtbl *lpVtbl;};
struct IHTMLListElement {struct IHTMLListElementVtbl *lpVtbl;};
struct IHTMLMetaElement {struct IHTMLMetaElementVtbl *lpVtbl;};
struct IHTMLParaElement {struct IHTMLParaElementVtbl *lpVtbl;};
struct IHTMLPersistData {struct IHTMLPersistDataVtbl *lpVtbl;};
struct IHTMLRenderStyle {struct IHTMLRenderStyleVtbl *lpVtbl;};
struct IHTMLSpanElement {struct IHTMLSpanElementVtbl *lpVtbl;};
struct IHTMLStyleSheet2 {struct IHTMLStyleSheet2Vtbl *lpVtbl;};
struct IHTMLTextElement {struct IHTMLTextElementVtbl *lpVtbl;};
struct IHtmlLoadOptions {struct IHtmlLoadOptionsVtbl *lpVtbl;};
struct IImnEnumAccounts {struct IImnEnumAccountsVtbl *lpVtbl;};
struct IIndexDefinition {struct IIndexDefinitionVtbl *lpVtbl;};
struct IInputObjectSite {struct IInputObjectSiteVtbl *lpVtbl;};
struct IInternetSession {struct IInternetSessionVtbl *lpVtbl;};
typedef union _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
typedef struct _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
typedef struct _IMAGE_LINENUMBER IMAGE_LINENUMBER;
typedef struct _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
typedef struct _IMAGE_RELOCATION IMAGE_RELOCATION;
typedef struct _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
struct IMLangStringAStr {struct IMLangStringAStrVtbl *lpVtbl;};
struct IMLangStringBufA {struct IMLangStringBufAVtbl *lpVtbl;};
struct IMLangStringBufW {struct IMLangStringBufWVtbl *lpVtbl;};
struct IMLangStringWStr {struct IMLangStringWStrVtbl *lpVtbl;};
struct IMXReaderControl {struct IMXReaderControlVtbl *lpVtbl;};
struct IMarkupContainer {struct IMarkupContainerVtbl *lpVtbl;};
struct IMarkupServices2 {struct IMarkupServices2Vtbl *lpVtbl;};
struct IMarkupTextFrags {struct IMarkupTextFragsVtbl *lpVtbl;};
struct IMediaBindStream {struct IMediaBindStreamVtbl *lpVtbl;};
struct IMimeHeaderTable {struct IMimeHeaderTableVtbl *lpVtbl;};
struct IMimeMessageTree {struct IMimeMessageTreeVtbl *lpVtbl;};
struct IMimeObjResolver {struct IMimeObjResolverVtbl *lpVtbl;};
struct IMimePropertySet {struct IMimePropertySetVtbl *lpVtbl;};
struct IMimeWebDocument {struct IMimeWebDocumentVtbl *lpVtbl;};
struct IMixerPinConfig2 {struct IMixerPinConfig2Vtbl *lpVtbl;};
struct IMultipleResults {struct IMultipleResultsVtbl *lpVtbl;};
typedef struct _INBOX_EVENT_DATA INBOX_EVENT_DATA;
struct INetCfgComponent {struct INetCfgComponentVtbl *lpVtbl;};
struct INotificationMgr {struct INotificationMgrVtbl *lpVtbl;};
struct IOleAdviseHolder {struct IOleAdviseHolderVtbl *lpVtbl;};
struct IOleCacheControl {struct IOleCacheControlVtbl *lpVtbl;};
struct IOleDocumentSite {struct IOleDocumentSiteVtbl *lpVtbl;};
struct IOleDocumentView {struct IOleDocumentViewVtbl *lpVtbl;};
struct IOleInPlaceFrame {struct IOleInPlaceFrameVtbl *lpVtbl;};
struct IPSFactoryBuffer {struct IPSFactoryBufferVtbl *lpVtbl;};
struct IPointerInactive {struct IPointerInactiveVtbl *lpVtbl;};
struct IPrivacyServices {struct IPrivacyServicesVtbl *lpVtbl;};
struct IPropFindRequest {struct IPropFindRequestVtbl *lpVtbl;};
struct IPropertyBagEnum {struct IPropertyBagEnumVtbl *lpVtbl;};
struct IPropertyStorage {struct IPropertyStorageVtbl *lpVtbl;};
struct IProvideTaskPage {struct IProvideTaskPageVtbl *lpVtbl;};
struct IRTCEnumProfiles {struct IRTCEnumProfilesVtbl *lpVtbl;};
struct IRTCEnumWatchers {struct IRTCEnumWatchersVtbl *lpVtbl;};
struct IRTCProfileEvent {struct IRTCProfileEventVtbl *lpVtbl;};
struct IRTCRoamingEvent {struct IRTCRoamingEventVtbl *lpVtbl;};
struct IRTCWatcherEvent {struct IRTCWatcherEventVtbl *lpVtbl;};
struct IRecalcHostDebug {struct IRecalcHostDebugVtbl *lpVtbl;};
struct IReferenceClock2 {struct IReferenceClock2Vtbl *lpVtbl;};
struct IResourceManager {struct IResourceManagerVtbl *lpVtbl;};
struct IRowSchemaChange {struct IRowSchemaChangeVtbl *lpVtbl;};
struct ISAXErrorHandler {struct ISAXErrorHandlerVtbl *lpVtbl;};
struct IScriptErrorList {struct IScriptErrorListVtbl *lpVtbl;};
struct IScriptScriptlet {struct IScriptScriptletVtbl *lpVtbl;};
struct ISearchQueryHits {struct ISearchQueryHitsVtbl *lpVtbl;};
struct ISeekingPassThru {struct ISeekingPassThruVtbl *lpVtbl;};
struct IServiceProvider {struct IServiceProviderVtbl *lpVtbl;};
struct IShellAppManager {struct IShellAppManagerVtbl *lpVtbl;};
struct IShellNetCrawler {struct IShellNetCrawlerVtbl *lpVtbl;};
struct ISimpleFrameSite {struct ISimpleFrameSiteVtbl *lpVtbl;};
struct ISoapTypeMapper2 {struct ISoapTypeMapper2Vtbl *lpVtbl;};
struct ISubscriptionMgr {struct ISubscriptionMgrVtbl *lpVtbl;};
struct ISyncMgrRegister {struct ISyncMgrRegisterVtbl *lpVtbl;};
struct ISyncScheduleMgr {struct ISyncScheduleMgrVtbl *lpVtbl;};
struct ITIMEBodyElement {struct ITIMEBodyElementVtbl *lpVtbl;};
struct ITIMEMediaPlayer {struct ITIMEMediaPlayerVtbl *lpVtbl;};
struct ITableDefinition {struct ITableDefinitionVtbl *lpVtbl;};
struct ITargetContainer {struct ITargetContainerVtbl *lpVtbl;};
struct ITargetEmbedding {struct ITargetEmbeddingVtbl *lpVtbl;};
struct ITargetFramePriv {struct ITargetFramePrivVtbl *lpVtbl;};
struct ITemplatePrinter {struct ITemplatePrinterVtbl *lpVtbl;};
struct ITransactionData {struct ITransactionDataVtbl *lpVtbl;};
struct ITransactionJoin {struct ITransactionJoinVtbl *lpVtbl;};
struct ITravelLogClient {struct ITravelLogClientVtbl *lpVtbl;};
struct IUPnPEventSource {struct IUPnPEventSourceVtbl *lpVtbl;};
struct IUPnPReregistrar {struct IUPnPReregistrarVtbl *lpVtbl;};
struct IVBSAXAttributes {struct IVBSAXAttributesVtbl *lpVtbl;};
struct IVBSAXDTDHandler {struct IVBSAXDTDHandlerVtbl *lpVtbl;};
struct IVirusScanEngine {struct IVirusScanEngineVtbl *lpVtbl;};
struct IVoIPCurrentCall {struct IVoIPCurrentCallVtbl *lpVtbl;};
struct IWBScriptControl {struct IWBScriptControlVtbl *lpVtbl;};
struct IWinInetHttpInfo {struct IWinInetHttpInfoVtbl *lpVtbl;};
struct IWrappedProtocol {struct IWrappedProtocolVtbl *lpVtbl;};
struct IXMLDOMAttribute {struct IXMLDOMAttributeVtbl *lpVtbl;};
struct IXMLDOMDocument2 {struct IXMLDOMDocument2Vtbl *lpVtbl;};
struct IXMLDOMSelection {struct IXMLDOMSelectionVtbl *lpVtbl;};
struct IXMLGenericParse {struct IXMLGenericParseVtbl *lpVtbl;};
struct InternetExplorer;
typedef struct _KEY_TYPE_SUBTYPE KEY_TYPE_SUBTYPE;
typedef struct linecountryentry_tag LINECOUNTRYENTRY;
typedef struct linegeneratetone_tag LINEGENERATETONE;
typedef struct lineproviderlist_tag LINEPROVIDERLIST;
typedef struct _LINE_CALL_PARAMS LINE_CALL_PARAMS;
typedef struct _LINE_CALL_STATUS LINE_CALL_STATUS;
typedef struct _LINE_DIAL_PARAMS LINE_DIAL_PARAMS;
typedef struct tACMDRVOPENDESC *LPACMDRVOPENDESC;
typedef IAsyncOperation *LPASYNCOPERATION;
typedef IAuthenticate *LPAUTHENTICATION;
typedef struct tagBITMAPCOREINFO *LPBITMAPCOREINFO;
typedef ICatInformation *LPCATINFORMATION;
typedef ICommDlgBrowser *LPCOMMDLGBROWSER;
typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct _DDCOLORCONTROL *LPDDCOLORCONTROL;
typedef struct _DDSURFACEDESC2 *LPDDSURFACEDESC2;
typedef struct _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;
typedef struct _DISPLAY_DEVICE *LPDISPLAY_DEVICE;
typedef IDownloadNotify *LPDOWNLOADNOTIFY;
typedef struct tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
typedef struct _FILECHANGEINFO *LPFILECHANGEINFO;
typedef IFileViewerSite *LPFILEVIEWERSITE;
typedef struct tagHTTPMEMBERINFO *LPHTTPMEMBERINFO;
typedef IHttpNegotiate2 *LPHTTPNEGOTIATE2;
typedef struct tagHTTPTARGETLIST *LPHTTPTARGETLIST;
typedef IInternetCache *LPIINTERNETCACHE;
typedef struct _INTERFACE_INFO *LPINTERFACE_INFO;
typedef struct linecallparams_tag *LPLINECALLPARAMS;
typedef struct linecallstatus_tag *LPLINECALLSTATUS;
typedef struct linedialparams_tag *LPLINEDIALPARAMS;
typedef struct IMAPIAdviseSink *LPMAPIADVISESINK;
typedef IMultiLanguage2 *LPMULTILANGUAGE2;
typedef IMultiLanguage3 *LPMULTILANGUAGE3;
typedef struct tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;
typedef struct tagNMLVCUSTOMDRAW *LPNMLVCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW *LPNMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW *LPNMTVCUSTOMDRAW;
typedef struct tagNNTPHEADERRESP *LPNNTPHEADERRESP;
typedef IObjectWithSite *LPOBJECTWITHSITE;
typedef IOleControlSite *LPOLECONTROLSITE;
typedef IOleInPlaceSite *LPOLEINPLACESITE;
typedef IOleUndoManager *LPOLEUNDOMANAGER;
typedef struct _OSVERSIONINFOA *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *LPOSVERSIONINFOW;
typedef IPersistFolder2 *LPPERSISTFOLDER2;
typedef IPersistHistory *LPPERSISTHISTORY;
typedef IPersistMoniker *LPPERSISTMONIKER;
typedef IPersistStorage *LPPERSISTSTORAGE;
typedef struct tagPROCESSENTRY32 *LPPROCESSENTRY32;
typedef struct _PROPSHEETPAGEA *LPPROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW *LPPROPSHEETPAGEW;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D *LPQOS_OBJECT_HDR;
typedef struct tagREBARBANDINFOA *LPREBARBANDINFOA;
typedef struct tagREBARBANDINFOW *LPREBARBANDINFOW;
typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 *LPSHELLFLAGSTATE;
typedef struct _SOCKET_ADDRESS *LPSOCKET_ADDRESS;
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
typedef struct _TT_HITTESTINFOA *LPTTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW *LPTTHITTESTINFOW;
typedef IUrlHistoryStg2 *LPURLHISTORYSTG2;
typedef IInternetZoneManager *LPURLZONEMANAGER;
typedef struct _WABIMPORTPARAM *LPWABIMPORTPARAM;
typedef struct tagWEBPAGEOPTIONS *LPWEBPAGEOPTIONS;
typedef struct _WSPUPCALLTABLE *LPWSPUPCALLTABLE;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
struct LayoutRectEvents;
enum MACRO_ACCESS_MAX {ACCESS_MAX_MS_V2_ACE_TYPE = 0x3,ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 0x4,ACCESS_MAX_MS_V3_ACE_TYPE = 0x4,ACCESS_MIN_MS_OBJECT_ACE_TYPE = 0x5,ACCESS_ALLOWED_OBJECT_ACE_TYPE = 0x5,ACCESS_DENIED_OBJECT_ACE_TYPE = 0x6,};
enum MACRO_ACCESS_MIN {ACCESS_MIN_MS_ACE_TYPE = 0x0,ACCESS_ALLOWED_ACE_TYPE = 0x0,ACCESS_DENIED_ACE_TYPE = 0x1,};
enum MACRO_ACE_OBJECT {ACE_OBJECT_TYPE_PRESENT = 0x1,ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2,};
enum MACRO_ACM_METRIC {ACM_METRIC_COUNT_DRIVERS = 1,ACM_METRIC_COUNT_CODECS = 2,ACM_METRIC_COUNT_CONVERTERS = 3,ACM_METRIC_COUNT_FILTERS = 4,ACM_METRIC_COUNT_DISABLED = 5,ACM_METRIC_COUNT_HARDWARE = 6,ACM_METRIC_COUNT_LOCAL_DRIVERS = 20,ACM_METRIC_COUNT_LOCAL_CODECS = 21,ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22,ACM_METRIC_COUNT_LOCAL_FILTERS = 23,ACM_METRIC_COUNT_LOCAL_DISABLED = 24,ACM_METRIC_HARDWARE_WAVE_INPUT = 30,ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31,ACM_METRIC_MAX_SIZE_FORMAT = 50,ACM_METRIC_MAX_SIZE_FILTER = 51,ACM_METRIC_DRIVER_SUPPORT = 100,ACM_METRIC_DRIVER_PRIORITY = 101,ACM_DRIVERENUMF_NOLOCAL = 1073741824,ACM_DRIVERENUMF_DISABLED = -2147483648,ACM_DRIVERADDF_NOTIFYHWND = 4,};
enum MACRO_ADDRSTRLEN {INET_ADDRSTRLEN = 22,INET6_ADDRSTRLEN = 65,};
enum MACRO_AVIIF_LIST {AVIIF_LIST = 0x1,AVIIF_KEYFRAME = 0x10,AVIIF_NOTIME = 0x100,AVIIF_COMPUSE = 0xFFF0000,};
enum MACRO_BIT_OFFSET {NAP_BIT_OFFSET = 32,SAP_BIT_OFFSET = 0,};
enum MACRO_CACHEGROUP {CACHEGROUP_ATTRIBUTE_GET_ALL = 0xFFFFFFFF,CACHEGROUP_ATTRIBUTE_BASIC = 0x1,CACHEGROUP_ATTRIBUTE_FLAG = 0x2,CACHEGROUP_ATTRIBUTE_TYPE = 0x4,CACHEGROUP_ATTRIBUTE_QUOTA = 0x8,CACHEGROUP_ATTRIBUTE_GROUPNAME = 0x10,CACHEGROUP_ATTRIBUTE_STORAGE = 0x20,CACHEGROUP_FLAG_NONPURGEABLE = 0x1,CACHEGROUP_FLAG_GIDONLY = 0x4,CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 0x2,CACHEGROUP_SEARCH_ALL = 0x0,CACHEGROUP_SEARCH_BYURL = 0x1,CACHEGROUP_TYPE_INVALID = 0x1,CACHEGROUP_READWRITE_MASK = 0x3C,};
enum MACRO_CACHE_FIND {CACHE_FIND_CONTAINER_RETURN_NOCHANGE = 0x1,CACHE_CONFIG_FORCE_CLEANUP_FC = 0x20,CACHE_CONFIG_DISK_CACHE_PATHS_FC = 0x40,CACHE_CONFIG_SYNC_MODE_FC = 0x80,CACHE_CONFIG_CONTENT_PATHS_FC = 0x100,CACHE_CONFIG_COOKIES_PATHS_FC = 0x200,CACHE_CONFIG_HISTORY_PATHS_FC = 0x400,CACHE_CONFIG_QUOTA_FC = 0x800,CACHE_CONFIG_USER_MODE_FC = 0x1000,CACHE_CONFIG_CONTENT_USAGE_FC = 0x2000,CACHE_CONFIG_STICKY_CONTENT_USAGE_FC = 0x4000,CACHE_HEADER_DATA_CURRENT_SETTINGS_VERSION = 0x0,CACHE_HEADER_DATA_CONLIST_CHANGE_COUNT = 0x1,CACHE_HEADER_DATA_COOKIE_CHANGE_COUNT = 0x2,CACHE_HEADER_DATA_NOTIFICATION_HWND = 0x3,CACHE_HEADER_DATA_NOTIFICATION_MESG = 0x4,CACHE_HEADER_DATA_ROOTGROUP_OFFSET = 0x5,CACHE_HEADER_DATA_GID_LOW = 0x6,CACHE_HEADER_DATA_GID_HIGH = 0x7,CACHE_HEADER_DATA_CACHE_NOT_EXPIRED = 0x8,CACHE_HEADER_DATA_CACHE_NOT_MODIFIED = 0x9,CACHE_HEADER_DATA_CACHE_MODIFIED = 0xA,CACHE_HEADER_DATA_CACHE_RESUMED = 0xB,CACHE_HEADER_DATA_CACHE_NOT_RESUMED = 0xC,CACHE_HEADER_DATA_CACHE_MISS = 0xD,CACHE_HEADER_DATA_DOWNLOAD_PARTIAL = 0xE,CACHE_HEADER_DATA_DOWNLOAD_ABORTED = 0xF,CACHE_HEADER_DATA_DOWNLOAD_CACHED = 0x10,CACHE_HEADER_DATA_DOWNLOAD_NOT_CACHED = 0x11,CACHE_HEADER_DATA_DOWNLOAD_NO_FILE = 0x12,CACHE_HEADER_DATA_DOWNLOAD_FILE_NEEDED = 0x13,CACHE_HEADER_DATA_DOWNLOAD_FILE_NOT_NEEDED = 0x14,CACHE_HEADER_DATA_NOTIFICATION_FILTER = 0x15,CACHE_HEADER_DATA_ROOT_LEAK_OFFSET = 0x16,CACHE_HEADER_DATA_SYNCSTATE_IMAGE = 0x17,CACHE_HEADER_DATA_SYNCSTATE_VOLATILE = 0x18,CACHE_HEADER_DATA_SYNCSTATE_IMAGE_STATIC = 0x19,CACHE_HEADER_DATA_SYNCSTATE_STATIC_VOLATILE = 0x1A,CACHE_HEADER_DATA_ROOT_GROUPLIST_OFFSET = 0x1B,CACHE_HEADER_DATA_ROOT_FIXUP_OFFSET = 0x1C,CACHE_HEADER_DATA_ROOT_FIXUP_COUNT = 0x1D,CACHE_HEADER_DATA_ROOT_FIXUP_TRIGGER = 0x1E,CACHE_HEADER_DATA_HIGH_VERSION_STRING = 0x1F,CACHE_HEADER_DATA_LAST = 0x1F,CACHE_NOTIFY_ADD_URL = 0x1,CACHE_NOTIFY_DELETE_URL = 0x2,CACHE_NOTIFY_UPDATE_URL = 0x4,CACHE_NOTIFY_DELETE_ALL = 0x8,CACHE_NOTIFY_URL_SET_STICKY = 0x10,CACHE_NOTIFY_URL_UNSET_STICKY = 0x20,CACHE_NOTIFY_SET_ONLINE = 0x100,CACHE_NOTIFY_SET_OFFLINE = 0x200,CACHE_NOTIFY_FILTER_CHANGED = 0x10000000,};
enum MACRO_CATEGORIZE {CATEGORIZE_UNIQUE = 0,CATEGORIZE_CLUSTER = 1,CATEGORIZE_BUCKETS = 2,};
enum MACRO_CCHMAX_CID {CCHMAX_CID = 255,CCHMAX_MID = 255,CCHMAX_INTERNET_DATE = 50,};
enum MACRO_CC_RGBINIT {CC_RGBINIT = 0x1,CC_FULLOPEN = 0x2,CC_PREVENTFULLOPEN = 0x4,CC_ENABLEHOOK = 0x10,CC_ENABLETEMPLATE = 0x20,CC_ENABLETEMPLATEHANDLE = 0x40,CC_SOLIDCOLOR = 0x80,CC_ANYCOLOR = 0x100,};
enum MACRO_CERT_CHAIN {CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 10,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000,CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10,};
enum MACRO_CERT_QUERY {CERT_QUERY_OBJECT_FILE = 0x1,CERT_QUERY_OBJECT_BLOB = 0x2,CERT_QUERY_CONTENT_CERT = 0x1,CERT_QUERY_CONTENT_CTL = 0x2,CERT_QUERY_CONTENT_CRL = 0x3,CERT_QUERY_CONTENT_SERIALIZED_STORE = 0x4,CERT_QUERY_CONTENT_SERIALIZED_CERT = 0x5,CERT_QUERY_CONTENT_SERIALIZED_CTL = 0x6,CERT_QUERY_CONTENT_SERIALIZED_CRL = 0x7,CERT_QUERY_CONTENT_PKCS7_SIGNED = 0x8,CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 0x9,CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 0xA,CERT_QUERY_CONTENT_PKCS10 = 0xB,CERT_QUERY_CONTENT_PFX = 0xC,CERT_QUERY_CONTENT_CERT_PAIR = 0xD,CERT_QUERY_CONTENT_FLAG_CERT = 0x2,CERT_QUERY_CONTENT_FLAG_CTL = 0x4,CERT_QUERY_CONTENT_FLAG_CRL = 0x8,CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 0x10,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 0x20,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 0x40,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 0x80,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 0x100,CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 0x200,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 0x400,CERT_QUERY_CONTENT_FLAG_PKCS10 = 0x800,CERT_QUERY_CONTENT_FLAG_PFX = 0x1000,CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 0x2000,CERT_QUERY_CONTENT_FLAG_ALL = 0x3FFE,CERT_QUERY_FORMAT_BINARY = 0x1,CERT_QUERY_FORMAT_BASE64_ENCODED = 0x2,CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 0x3,CERT_QUERY_FORMAT_FLAG_BINARY = 0x2,CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 0x4,CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 0x8,CERT_QUERY_FORMAT_FLAG_ALL = 0xE,};
enum MACRO_CERT_STORE {CERT_STORE_ADD_NEW = 1,CERT_STORE_ADD_USE_EXISTING = 2,CERT_STORE_ADD_REPLACE_EXISTING = 3,CERT_STORE_ADD_ALWAYS = 4,CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5,CERT_STORE_ADD_NEWER = 6,CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7,CERT_STORE_CERTIFICATE_CONTEXT = 1,CERT_STORE_CRL_CONTEXT = 2,CERT_STORE_CTL_CONTEXT = 3,CERT_STORE_ALL_CONTEXT_FLAG = -1,CERT_STORE_CERTIFICATE_CONTEXT_FLAG = 2,CERT_STORE_CRL_CONTEXT_FLAG = 4,CERT_STORE_CTL_CONTEXT_FLAG = 8,};
enum MACRO_CE_BATTERY {CE_BATTERY_DEAD = 0x1,CE_BATTERY_LOW = 0x2,CE_CARD_LOCK = 0x3,CE_CARD_READY = 0x4,CE_CARD_REMOVAL = 0x5,CE_CARD_UNLOCK = 0x6,CE_EJECTION_COMPLETE = 0x7,CE_EJECTION_REQUEST = 0x8,CE_INSERTION_COMPLETE = 0x9,CE_INSERTION_REQUEST = 0xA,CE_PM_RESUME = 0xB,CE_PM_SUSPEND = 0xC,CE_EXCLUSIVE_COMPLETE = 0xD,CE_EXCLUSIVE_REQUEST = 0xE,CE_RESET_PHYSICAL = 0xF,CE_RESET_REQUEST = 0x10,CE_CARD_RESET = 0x11,CE_MTD_REQUEST = 0x12,CE_CLIENT_INFO = 0x14,CE_TIMER_EXPIRED = 0x15,CE_SS_UPDATED = 0x16,CE_WRITE_PROTECT = 0x17,CE_CARD_INSERTION = 0x40,CE_RESET_COMPLETE = 0x80,CE_ERASE_COMPLETE = 0x81,CE_REGISTRATION_COMPLETE = 0x82,CE_STATUS_CHANGE_INTERRUPT = 0xFE,};
enum MACRO_CE_MODULES {CE_MODULES_STANSDK = 1,CE_MODULES_NK = 1,CE_MODULES_FILESYS = 1,CE_MODULES_DEVICE = 1,CE_MODULES_PM = 1,CE_MODULES_COREDLL = 1,CE_MODULES_COMMDLG = 1,CE_MODULES_COMMCTRL = 1,CE_MODULES_FONTS = 1,CE_MODULES_RT_TESTS = 1,CE_MODULES_GWES = 1,CE_MODULES_CXPORT = 1,CE_MODULES_WINSOCK = 1,CE_MODULES_WS2 = 1,CE_MODULES_WS2INSTL = 1,CE_MODULES_WSPM = 1,CE_MODULES_NSPM = 1,CE_MODULES_AFD = 1,CE_MODULES_NETUI = 1,CE_MODULES_NDIS = 1,CE_MODULES_TCPSTK = 1,CE_MODULES_IPHLPAPI = 1,CE_MODULES_KEYBD = 1,CE_MODULES_POINTER = 1,CE_MODULES_NLED = 1,CE_MODULES_CEDDK = 1,CE_MODULES_DISPLAY = 1,CE_MODULES_GIISR = 1,CE_MODULES_8042KEYBOARD = 1,CE_MODULES_NOPKEYBOARD = 1,CE_MODULES_MMTIMER = 1,CE_MODULES_PCI = 1,CE_MODULES_PCMCIA = 1,CE_MODULES_PCMCONV = 1,CE_MODULES_REGENUM = 1,CE_MODULES_SERIAL = 1,CE_MODULES_CSP = 1,CE_MODULES_WLDAP32 = 1,CE_MODULES_PRNPORT = 1,CE_MODULES_PRNERR = 1,CE_MODULES_SECUR32 = 1,CE_MODULES_NTLMSSP = 1,CE_MODULES_SPNEGO = 1,CE_MODULES_RSAENH = 1,CE_MODULES_CRYPT32 = 1,CE_MODULES_MSASN1 = 1,CE_MODULES_REDIR = 1,CE_MODULES_NETBIOS = 1,CE_MODULES_WAVEAPI = 1,CE_MODULES_AUDIODRV = 1,CE_MODULES_WAVESAMPLES = 1,CE_MODULES_ENROLL = 1,CE_MODULES_LPCD = 1,CE_MODULES_LPCRT = 1,};
enum MACRO_CFS_SCREEN {CFS_SCREEN = 0x4,CFS_VERTICAL = 0x8,CFS_HIDDEN = 0x10,};
enum MACRO_CLIENTSITE {CLIENTSITE_E_FIRST = 0x80040190,CLIENTSITE_E_LAST = 0x8004019F,CLIENTSITE_S_FIRST = 0x40190,CLIENTSITE_S_LAST = 0x4019F,};
enum MACRO_CMC_TAGGED {CMC_TAGGED_CERT_REQUEST_CHOICE = 1,CMC_OTHER_INFO_NO_CHOICE = 0,CMC_OTHER_INFO_FAIL_CHOICE = 1,CMC_OTHER_INFO_PEND_CHOICE = 2,CMC_STATUS_SUCCESS = 0,CMC_STATUS_FAILED = 2,CMC_STATUS_PENDING = 3,CMC_STATUS_NO_SUPPORT = 4,CMC_STATUS_CONFIRM_REQUIRED = 5,CMC_FAIL_BAD_ALG = 0,CMC_FAIL_BAD_MESSAGE_CHECK = 1,CMC_FAIL_BAD_REQUEST = 2,CMC_FAIL_BAD_TIME = 3,CMC_FAIL_BAD_CERT_ID = 4,CMC_FAIL_UNSUPORTED_EXT = 5,CMC_FAIL_MUST_ARCHIVE_KEYS = 6,CMC_FAIL_BAD_IDENTITY = 7,CMC_FAIL_POP_REQUIRED = 8,CMC_FAIL_POP_FAILED = 9,CMC_FAIL_NO_KEY_REUSE = 10,CMC_FAIL_INTERNAL_CA_ERROR = 11,CMC_FAIL_TRY_LATER = 12,};
enum MACRO_CONNECTION {CONNECTION_TYPE_LAN = 0,CONNECTION_TYPE_MANUAL = 1,CONNECTION_TYPE_RAS = 2,CONNECTION_TYPE_INETSETTINGS = 3,};
enum MACRO_CONVENIENT {CONVENIENT_DEPTH = 0x1,};
enum MACRO_CP_USASCII {CP_USASCII = 1252,CP_UNICODE = 1200,CP_JAUTODETECT = 50932,CP_KAUTODETECT = 50949,CP_ISO2022JPESC = 50221,CP_ISO2022JPSIO = 50222,};
enum MACRO_CREATE_NEW {CREATE_NEW = 1,CREATE_ALWAYS = 2,};
enum MACRO_CREDENTIAL {CREDENTIAL_OID_PASSWORD_CREDENTIALS_A = 1,CREDENTIAL_OID_PASSWORD_CREDENTIALS_W = 2,CREDENTIAL_OID_PASSWORD_CREDENTIALS = 1,};
enum MACRO_CRL_REASON {CRL_REASON_UNSPECIFIED = 0,CRL_REASON_KEY_COMPROMISE = 1,CRL_REASON_CA_COMPROMISE = 2,CRL_REASON_AFFILIATION_CHANGED = 3,CRL_REASON_SUPERSEDED = 4,CRL_REASON_CESSATION_OF_OPERATION = 5,CRL_REASON_CERTIFICATE_HOLD = 6,CRL_REASON_REMOVE_FROM_CRL = 8,CRL_DIST_POINT_NO_NAME = 0,CRL_DIST_POINT_FULL_NAME = 1,CRL_DIST_POINT_ISSUER_RDN_NAME = 2,CRL_REASON_UNUSED_FLAG = 128,CRL_REASON_KEY_COMPROMISE_FLAG = 64,CRL_REASON_CA_COMPROMISE_FLAG = 32,CRL_REASON_AFFILIATION_CHANGED_FLAG = 16,CRL_REASON_SUPERSEDED_FLAG = 8,CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4,CRL_REASON_CERTIFICATE_HOLD_FLAG = 2,CRL_DIST_POINT_ERR_INDEX_MASK = 127,CRL_DIST_POINT_ERR_INDEX_SHIFT = 24,CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648,};
enum MACRO_CRYPT_MODE {CRYPT_MODE_CBCI = 6,CRYPT_MODE_CFBP = 7,CRYPT_MODE_OFBP = 8,CRYPT_MODE_CBCOFM = 9,CRYPT_MODE_CBCOFMI = 10,};
enum MACRO_CRYPT_NEXT {CRYPT_NEXT_0x8009_ERROR_CODE_AVAILABLE = 0x202C,CRYPT_NEXT_0x800B_ERROR_CODE_AVAILABLE = 0x110,};
enum MACRO_CRYPT_X942 {CRYPT_X942_COUNTER_BYTE_LENGTH = 4,CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4,CRYPT_X942_PUB_INFO_BYTE_LENGTH = 64,CRYPT_RC2_40BIT_VERSION = 160,CRYPT_RC2_56BIT_VERSION = 52,CRYPT_RC2_64BIT_VERSION = 120,CRYPT_RC2_128BIT_VERSION = 58,};
enum MACRO_CS_DBLCLKS {CS_DBLCLKS = 0x8,CS_GLOBALCLASS = 0x4000,};
enum MACRO_CS_VREDRAW {CS_VREDRAW = 0x1,CS_HREDRAW = 0x2,CS_PARENTDC = 0x80,CS_NOCLOSE = 0x200,CS_SAVEBITS = 0x800,CS_IME = 0x10000,};
enum MACRO_D3DADAPTER {D3DADAPTER_DEFAULT = 0,};
enum MACRO_D3DCURRENT {D3DCURRENT_DISPLAY_MODE = 0xEFFFFF,};
enum MACRO_D3DDEVCAPS {D3DDEVCAPS_EXECUTESYSTEMMEMORY = 0x10,D3DDEVCAPS_EXECUTEVIDEOMEMORY = 0x20,D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 0x40,D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 0x80,D3DDEVCAPS_TEXTURESYSTEMMEMORY = 0x100,D3DDEVCAPS_TEXTUREVIDEOMEMORY = 0x200,D3DDEVCAPS_DRAWPRIMTLVERTEX = 0x400,D3DDEVCAPS_CANRENDERAFTERFLIP = 0x800,D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 0x1000,D3DDEVCAPS_DRAWPRIMITIVES2 = 0x2000,D3DDEVCAPS_SEPARATETEXTUREMEMORIES = 0x4000,D3DDEVCAPS_DRAWPRIMITIVES2EX = 0x8000,D3DDEVCAPS_HWTRANSFORMANDLIGHT = 0x10000,D3DDEVCAPS_CANBLTSYSTONONLOCAL = 0x20000,D3DDEVCAPS_HWRASTERIZATION = 0x80000,D3DDEVCAPS_PUREDEVICE = 0x100000,D3DDEVCAPS_QUINTICRTPATCHES = 0x200000,D3DDEVCAPS_RTPATCHES = 0x400000,D3DDEVCAPS_RTPATCHHANDLEZERO = 0x800000,D3DDEVCAPS_NPATCHES = 0x1000000,};
enum MACRO_D3DFVFCAPS {D3DFVFCAPS_TEXCOORDCOUNTMASK = 0xFFFF,D3DFVFCAPS_DONOTSTRIPELEMENTS = 0x80000,D3DFVFCAPS_PSIZE = 0x100000,};
enum MACRO_D3DPRESENT {D3DPRESENT_RATE_DEFAULT = 0x0,D3DPRESENT_RATE_UNLIMITED = 0x7FFFFFFF,};
enum MACRO_DDCKEYCAPS {DDCKEYCAPS_DESTBLT = 0x1,DDCKEYCAPS_DESTBLTCLRSPACE = 0x2,DDCKEYCAPS_DESTBLTCLRSPACEYUV = 0x4,DDCKEYCAPS_DESTBLTYUV = 0x8,DDCKEYCAPS_DESTOVERLAY = 0x10,DDCKEYCAPS_DESTOVERLAYCLRSPACE = 0x20,DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 0x40,DDCKEYCAPS_DESTOVERLAYONEACTIVE = 0x80,DDCKEYCAPS_DESTOVERLAYYUV = 0x100,DDCKEYCAPS_SRCBLT = 0x200,DDCKEYCAPS_SRCBLTCLRSPACE = 0x400,DDCKEYCAPS_SRCBLTCLRSPACEYUV = 0x800,DDCKEYCAPS_SRCBLTYUV = 0x1000,DDCKEYCAPS_SRCOVERLAY = 0x2000,DDCKEYCAPS_SRCOVERLAYCLRSPACE = 0x4000,DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 0x8000,DDCKEYCAPS_SRCOVERLAYONEACTIVE = 0x10000,DDCKEYCAPS_SRCOVERLAYYUV = 0x20000,DDCKEYCAPS_NOCOSTOVERLAY = 0x40000,};
enum MACRO_DDFILTCAPS {DDFILTCAPS_BLTQUALITYFILTER = 0x1,DDFILTCAPS_BLTCANDISABLEFILTER = 0x2,DDFILTCAPS_BLTTRANSPBORDER = 0x4,};
enum MACRO_DDSPRITEFX {DDSPRITEFX_AFFINETRANSFORM = 0x1,DDSPRITEFX_RGBASCALING = 0x2,DDSPRITEFX_DEGRADERGBASCALING = 0x4,DDSPRITEFX_BILINEARFILTER = 0x8,DDSPRITEFX_BLURFILTER = 0x10,DDSPRITEFX_FLATFILTER = 0x20,DDSPRITEFX_DEGRADEFILTER = 0x40,};
enum MACRO_DDVPCREATE {DDVPCREATE_VBIONLY = 0x1,DDVPCREATE_VIDEOONLY = 0x2,};
enum MACRO_DDVPFORMAT {DDVPFORMAT_VIDEO = 0x1,DDVPFORMAT_VBI = 0x2,};
enum MACRO_DDVPSTATUS {DDVPSTATUS_VBIONLY = 0x1,DDVPSTATUS_VIDEOONLY = 0x2,};
enum MACRO_DDVPTARGET {DDVPTARGET_VIDEO = 0x1,DDVPTARGET_VBI = 0x2,};
enum MACRO_DIFFERENCE {DIFFERENCE = 11,};
enum MACRO_DIRECTDRAW {DIRECTDRAW_VERSION = 0x600,};
enum MACRO_DISPID_ACC {DISPID_ACC_PARENT = -5000,DISPID_ACC_CHILDCOUNT = -5001,DISPID_ACC_CHILD = -5002,DISPID_ACC_NAME = -5003,DISPID_ACC_VALUE = -5004,DISPID_ACC_DESCRIPTION = -5005,DISPID_ACC_ROLE = -5006,DISPID_ACC_STATE = -5007,DISPID_ACC_HELP = -5008,DISPID_ACC_HELPTOPIC = -5009,DISPID_ACC_KEYBOARDSHORTCUT = -5010,DISPID_ACC_FOCUS = -5011,DISPID_ACC_SELECTION = -5012,DISPID_ACC_DEFAULTACTION = -5013,DISPID_ACC_SELECT = -5014,DISPID_ACC_LOCATION = -5015,DISPID_ACC_NAVIGATE = -5016,DISPID_ACC_HITTEST = -5017,DISPID_ACC_DODEFAULTACTION = -5018,};
enum MACRO_DOT11_AUTH {DOT11_AUTH_ALGORITHM_OPEN_SYSTEM = 0x1,DOT11_AUTH_ALGORITHM_SHARED_KEY = 0x2,DOT11_AUTH_ALGORITHM_WPA = 0x3,DOT11_AUTH_ALGORITHM_WPA_PSK = 0x4,DOT11_AUTH_ALGORITHM_WPA_NONE = 0x5,DOT11_ALGO_WEP_RC4_40 = 0x1,DOT11_ALGO_TKIP_MIC = 0x2,DOT11_ALGO_WEP_RC4_104 = 0x5,DOT11_ALGO_WEP_RC4 = 0x1,};
enum MACRO_DOT11_RATE {DOT11_RATE_SET_MAX_LENGTH = 126,DOT11_CAPABILITY_INFO_ESS = 1,DOT11_CAPABILITY_INFO_IBSS = 2,DOT11_CAPABILITY_INFO_CF_POLLABLE = 4,DOT11_CAPABILITY_INFO_CF_POLL_REQ = 8,DOT11_CAPABILITY_INFO_PRIVACY = 16,DOT11_CAPABILITY_SHORT_PREAMBLE = 32,DOT11_CAPABILITY_PBCC = 64,DOT11_CAPABILITY_CHANNEL_AGILITY = 128,};
enum MACRO_DOT11_SSID {DOT11_SSID_MAX_LENGTH = 32,};
enum MACRO_DROPEFFECT {DROPEFFECT_NONE = 0,DROPEFFECT_COPY = 1,DROPEFFECT_MOVE = 2,DROPEFFECT_LINK = 4,DROPEFFECT_SCROLL = -2147483648,};
enum MACRO_DRV_CANCEL {DRV_CANCEL = 0,DRV_OK = 1,DRV_RESTART = 2,DRV_MCI_FIRST = 2048,DRV_MCI_LAST = 6143,};
enum MACRO_DRV_MAPPER {DRV_MAPPER_PREFERRED_INPUT_GET = 16384,DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386,};
enum MACRO_DSCBSTATUS {DSCBSTATUS_CAPTURING = 0x1,DSCBSTATUS_LOOPING = 0x2,};
enum MACRO_DVD_SELECT {DVD_SELECT_UPPER = 0,DVD_SELECT_LOWER = 1,DVD_SELECT_LEFT = 2,DVD_SELECT_RIGHT = 3,DVD_SYSTEM_SPACE_BIT = 1,DVD_MENU_SPACE_BIT = 2,DVD_VMG_SPACE_BIT = 4,DVD_VTS_SPACE_BIT = 8,};
enum MACRO_EC_DVDBASE {EC_DVDBASE = 0x100,EC_DVD_DOMAIN_CHANGE = 0x101,EC_DVD_TITLE_CHANGE = 0x102,EC_DVD_CHAPTER_START = 0x103,EC_DVD_AUDIO_STREAM_CHANGE = 0x104,EC_DVD_SUBPICTURE_STREAM_CHANGE = 0x105,EC_DVD_ANGLE_CHANGE = 0x106,EC_DVD_BUTTON_CHANGE = 0x107,EC_DVD_VALID_UOPS_CHANGE = 0x108,EC_DVD_STILL_ON = 0x109,EC_DVD_STILL_OFF = 0x10A,EC_DVD_CURRENT_TIME = 0x10B,EC_DVD_ERROR = 0x10C,EC_DVD_WARNING = 0x10D,EC_DVD_CHAPTER_AUTOSTOP = 0x10E,EC_DVD_NO_FP_PGC = 0x10F,EC_DVD_PLAYBACK_RATE_CHANGE = 0x110,EC_DVD_PARENTAL_LEVEL_CHANGE = 0x111,EC_DVD_PLAYBACK_STOPPED = 0x112,EC_DVD_ANGLES_AVAILABLE = 0x113,EC_DVD_PLAYPERIOD_AUTOSTOP = 0x114,EC_DVD_BUTTON_AUTO_ACTIVATED = 0x115,EC_DVD_CMD_START = 0x116,EC_DVD_CMD_END = 0x117,EC_DVD_DISC_EJECTED = 0x118,EC_DVD_DISC_INSERTED = 0x119,EC_DVD_CURRENT_HMSF_TIME = 0x11A,EC_DVD_KARAOKE_MODE = 0x11B,};
enum MACRO_ES_COMPWND {ES_COMPWND = 0x4000,};
enum MACRO_EVENT_ATTR {EVENT_ATTR_SOCKET_ONLY = 0x1,EVENT_MASK_WRITE_PROTECT = 0x1,EVENT_MASK_CARD_LOCK = 0x2,EVENT_MASK_EJECT_REQ = 0x4,EVENT_MASK_INSERT_REQ = 0x8,EVENT_MASK_BATTERY_DEAD = 0x10,EVENT_MASK_BATTERY_LOW = 0x20,EVENT_MASK_CARD_READY = 0x40,EVENT_MASK_CARD_DETECT = 0x80,EVENT_MASK_POWER_MGMT = 0x100,EVENT_MASK_RESET = 0x200,EVENT_MASK_STATUS_CHANGE = 0x400,};
enum MACRO_EXECUTEJOB {EXECUTEJOB_SILENT = 0x1,EXECUTEJOB_DELETE_JOB = 0x2,EXECUTEJOB_VERIFYFILES = 0x8,EXECUTEJOB_IGNORETRUST = 0x10,EXECUTEJOB_IGNOREDOWNLOADERROR = 0x20,EXECUTEJOB_DONTALLOWCANCEL = 0x40,};
enum MACRO_EXIT_POINT {EXTRA_EXIT_POINT = 0xC00037DC,MISSING_EXIT_POINT = 0xC00037DD,};
enum MACRO_FILE_BEGIN {FILE_BEGIN = 0,FILE_CURRENT = 1,FILE_END = 2,};
enum MACRO_FINDDLGORD {FINDDLGORD = 1540,};
enum MACRO_FOLDER_IPM {FOLDER_IPM_SUBTREE_VALID = 0x1,FOLDER_IPM_INBOX_VALID = 0x2,FOLDER_IPM_OUTBOX_VALID = 0x4,FOLDER_IPM_WASTEBASKET_VALID = 0x8,FOLDER_IPM_SENTMAIL_VALID = 0x10,FOLDER_VIEWS_VALID = 0x20,FOLDER_COMMON_VIEWS_VALID = 0x40,FOLDER_FINDER_VALID = 0x80,};
enum MACRO_FONTDLGORD {FONTDLGORD = 1542,};
enum MACRO_HTTOPRIGHT {HTTOPRIGHT = 14,};
enum MACRO_HTTP_MAJOR {HTTP_MAJOR_VERSION = 1,HTTP_MINOR_VERSION = 0,HTTP_QUERY_MIME_VERSION = 0,HTTP_QUERY_CONTENT_TYPE = 1,HTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2,HTTP_QUERY_CONTENT_ID = 3,HTTP_QUERY_CONTENT_DESCRIPTION = 4,HTTP_QUERY_CONTENT_LENGTH = 5,HTTP_QUERY_CONTENT_LANGUAGE = 6,HTTP_QUERY_ALLOW = 7,HTTP_QUERY_PUBLIC = 8,HTTP_QUERY_DATE = 9,HTTP_QUERY_EXPIRES = 10,HTTP_QUERY_LAST_MODIFIED = 11,HTTP_QUERY_MESSAGE_ID = 12,HTTP_QUERY_URI = 13,HTTP_QUERY_DERIVED_FROM = 14,HTTP_QUERY_COST = 15,HTTP_QUERY_LINK = 16,HTTP_QUERY_PRAGMA = 17,HTTP_QUERY_VERSION = 18,HTTP_QUERY_STATUS_CODE = 19,HTTP_QUERY_STATUS_TEXT = 20,HTTP_QUERY_RAW_HEADERS = 21,HTTP_QUERY_RAW_HEADERS_CRLF = 22,HTTP_QUERY_CONNECTION = 23,HTTP_QUERY_ACCEPT = 24,HTTP_QUERY_ACCEPT_CHARSET = 25,HTTP_QUERY_ACCEPT_ENCODING = 26,HTTP_QUERY_ACCEPT_LANGUAGE = 27,HTTP_QUERY_AUTHORIZATION = 28,HTTP_QUERY_CONTENT_ENCODING = 29,HTTP_QUERY_FORWARDED = 30,HTTP_QUERY_FROM = 31,HTTP_QUERY_IF_MODIFIED_SINCE = 32,HTTP_QUERY_LOCATION = 33,HTTP_QUERY_ORIG_URI = 34,HTTP_QUERY_REFERER = 35,HTTP_QUERY_RETRY_AFTER = 36,HTTP_QUERY_SERVER = 37,HTTP_QUERY_TITLE = 38,HTTP_QUERY_USER_AGENT = 39,HTTP_QUERY_WWW_AUTHENTICATE = 40,HTTP_QUERY_PROXY_AUTHENTICATE = 41,HTTP_QUERY_ACCEPT_RANGES = 42,HTTP_QUERY_SET_COOKIE = 43,HTTP_QUERY_COOKIE = 44,HTTP_QUERY_REQUEST_METHOD = 45,HTTP_QUERY_REFRESH = 46,HTTP_QUERY_CONTENT_DISPOSITION = 47,HTTP_QUERY_AGE = 48,HTTP_QUERY_CACHE_CONTROL = 49,HTTP_QUERY_CONTENT_BASE = 50,HTTP_QUERY_CONTENT_LOCATION = 51,HTTP_QUERY_CONTENT_MD5 = 52,HTTP_QUERY_CONTENT_RANGE = 53,HTTP_QUERY_ETAG = 54,HTTP_QUERY_HOST = 55,HTTP_QUERY_IF_MATCH = 56,HTTP_QUERY_IF_NONE_MATCH = 57,HTTP_QUERY_IF_RANGE = 58,HTTP_QUERY_IF_UNMODIFIED_SINCE = 59,HTTP_QUERY_MAX_FORWARDS = 60,HTTP_QUERY_PROXY_AUTHORIZATION = 61,HTTP_QUERY_RANGE = 62,HTTP_QUERY_TRANSFER_ENCODING = 63,HTTP_QUERY_UPGRADE = 64,HTTP_QUERY_VARY = 65,HTTP_QUERY_VIA = 66,HTTP_QUERY_WARNING = 67,HTTP_QUERY_EXPECT = 68,HTTP_QUERY_PROXY_CONNECTION = 69,HTTP_QUERY_UNLESS_MODIFIED_SINCE = 70,HTTP_QUERY_ECHO_REQUEST = 71,HTTP_QUERY_ECHO_REPLY = 72,HTTP_QUERY_ECHO_HEADERS = 73,HTTP_QUERY_ECHO_HEADERS_CRLF = 74,HTTP_QUERY_PROXY_SUPPORT = 75,HTTP_QUERY_AUTHENTICATION_INFO = 76,HTTP_QUERY_PASSPORT_URLS = 77,HTTP_QUERY_PASSPORT_CONFIG = 78,HTTP_QUERY_MAX = 78,HTTP_QUERY_CUSTOM = 65535,HTTP_QUERY_FLAG_REQUEST_HEADERS = -2147483648,HTTP_QUERY_FLAG_SYSTEMTIME = 1073741824,HTTP_QUERY_FLAG_NUMBER = 536870912,HTTP_QUERY_FLAG_COALESCE = 268435456,HTTP_QUERY_MODIFIER_FLAGS_MASK = -268435456,HTTP_QUERY_HEADER_MASK = 268435455,HTTP_STATUS_CONTINUE = 100,HTTP_STATUS_SWITCH_PROTOCOLS = 101,HTTP_STATUS_OK = 200,HTTP_STATUS_CREATED = 201,HTTP_STATUS_ACCEPTED = 202,HTTP_STATUS_PARTIAL = 203,HTTP_STATUS_NO_CONTENT = 204,HTTP_STATUS_RESET_CONTENT = 205,HTTP_STATUS_PARTIAL_CONTENT = 206,HTTP_STATUS_AMBIGUOUS = 300,HTTP_STATUS_MOVED = 301,HTTP_STATUS_REDIRECT = 302,HTTP_STATUS_REDIRECT_METHOD = 303,HTTP_STATUS_NOT_MODIFIED = 304,HTTP_STATUS_USE_PROXY = 305,HTTP_STATUS_REDIRECT_KEEP_VERB = 307,HTTP_STATUS_BAD_REQUEST = 400,HTTP_STATUS_DENIED = 401,HTTP_STATUS_PAYMENT_REQ = 402,HTTP_STATUS_FORBIDDEN = 403,HTTP_STATUS_NOT_FOUND = 404,HTTP_STATUS_BAD_METHOD = 405,HTTP_STATUS_NONE_ACCEPTABLE = 406,HTTP_STATUS_PROXY_AUTH_REQ = 407,HTTP_STATUS_REQUEST_TIMEOUT = 408,HTTP_STATUS_CONFLICT = 409,HTTP_STATUS_GONE = 410,HTTP_STATUS_LENGTH_REQUIRED = 411,HTTP_STATUS_PRECOND_FAILED = 412,HTTP_STATUS_REQUEST_TOO_LARGE = 413,HTTP_STATUS_URI_TOO_LONG = 414,HTTP_STATUS_UNSUPPORTED_MEDIA = 415,HTTP_STATUS_RETRY_WITH = 449,HTTP_STATUS_SERVER_ERROR = 500,HTTP_STATUS_NOT_SUPPORTED = 501,HTTP_STATUS_BAD_GATEWAY = 502,HTTP_STATUS_SERVICE_UNAVAIL = 503,HTTP_STATUS_GATEWAY_TIMEOUT = 504,HTTP_STATUS_VERSION_NOT_SUP = 505,HTTP_STATUS_FIRST = 100,HTTP_STATUS_LAST = 505,HTTP_ADDREQ_INDEX_MASK = 65535,HTTP_ADDREQ_FLAGS_MASK = -65536,HTTP_ADDREQ_FLAG_ADD_IF_NEW = 268435456,HTTP_ADDREQ_FLAG_ADD = 536870912,HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 1073741824,HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 16777216,HTTP_ADDREQ_FLAG_COALESCE = 1073741824,HTTP_ADDREQ_FLAG_REPLACE = -2147483648,};
enum MACRO_IDENTIFIER {IDENTIFIER_SDK_MASK = 0xF0000000,IDENTIFIER_SDK_ERROR = 0x10000000,};
enum MACRO_IDH_MYDOCS {IDH_MYDOCS_TARGET = 1101,IDH_MYDOCS_BROWSE = 1102,IDH_MYDOCS_FIND_TARGET = 1103,IDH_MYDOCS_RESET = 1104,IDH_DISPLAY_BACKGROUND_MONITOR = 4000,IDH_DISPLAY_BACKGROUND_WALLPAPERLIST = 4001,IDH_DISPLAY_BACKGROUND_BROWSE_BUTTON = 4002,IDH_DISPLAY_BACKGROUND_PICTUREDISPLAY = 4003,IDH_DISPLAY_BACKGROUND_DISPLAY_TILE = 4004,IDH_DISPLAY_BACKGROUND_DISPLAY_CENTER = 4005,IDH_DISPLAY_BACKGROUND_DISPLAY_STRETCH = 4006,IDH_DISPLAY_BACKGROUND_PATTERN_BUTTON = 4007,IDH_DISPLAY_BACKGROUND_PATTERN_PATTERNLIST = 4008,IDH_DISPLAY_BACKGROUND_PATTERN_PREVIEW = 4009,IDH_DISPLAY_BACKGROUND_EDITPATTERN_BUTTON = 4010,IDH_DISPLAY_BACKGROUND_EDITPATTERN_NAME = 4011,IDH_DISPLAY_BACKGROUND_EDITPATTERN_SAMPLE = 4012,IDH_DISPLAY_BACKGROUND_EDITPATTERN_PATTERN = 4013,IDH_DISPLAY_BACKGROUND_EDITPATTERN_DONE = 4177,IDH_DISPLAY_BACKGROUND_EDITPATTERN_ADD = 4178,IDH_DISPLAY_BACKGROUND_EDITPATTERN_CHANGE = 4179,IDH_DISPLAY_BACKGROUND_EDITPATTERN_REMOVE = 4180,IDH_DISPLAY_WEB_GRAPHIC = 4500,IDH_DISPLAY_WEB_SHOWWEB_CHECKBOX = 4501,IDH_DISPLAY_WEB_ACTIVEDESKTOP_LIST = 4502,IDH_DISPLAY_WEB_NEW_BUTTON = 4503,IDH_DISPLAY_WEB_DELETE_BUTTON = 4504,IDH_DISPLAY_WEB_PROPERTIES_BUTTON = 4505,IDH_WALLPAPER_LIST = 51001,IDH_BROWSE_WALLPAPER = 51002,IDH_DESKTOP_PATTERN = 51003,IDH_DISPLAY_WALLPAPER = 51004,IDH_DISABLE_ACTIVE_DESKTOP = 51005,IDH_WALLPAPER_SAMPLE = 51006,IDH_DISPLAY_PATTERN = 51010,IDH_EDIT_PATTERN = 51011,IDH_PATTERN_NAME = 51012,IDH_PATTERN_SAMPLE = 51013,IDH_PATTERN_EDIT = 51014,IDH_ADD_PATTERN = 51015,IDH_CHANGE_PATTERN = 51016,IDH_REMOVE_PATTERN = 51017,IDH_LIST_CHANNELS = 51020,IDH_NEW_CHANNEL = 51021,IDH_DELETE_CHANNEL = 51022,IDH_CHANNEL_PROPERTIES = 51023,IDH_TRY_IT = 51024,IDH_RESET_ALL = 51025,IDH_DISPLAY_CHANNELS = 51027,IDH_VIEW_AS_WEB_PAGE = 51026,IDH_FOLDER_OPTIONS = 51029,IDH_SUBSCRIBED_URL = 51030,IDH_SUBSCRIPTION_SUMMARY = 51031,IDH_CHANNEL_LOGIN = 51032,IDH_LOGIN_USER_ID = 51033,IDH_LOGIN_PASSWORD = 51034,IDH_EMAIL_NOTIFICATION = 51035,IDH_DOWNLOAD = 51036,IDH_ADVANCED = 51028,IDH_CHANGE_ADDRESS = 51037,IDH_EMAIL_ADDRESS = 51038,IDH_EMAIL_SERVER = 51039,IDH_MAX_DOWNLOAD = 51040,IDH_HIGH_PRIORITY = 51041,IDH_DOWNLOAD_IMAGES = 51042,IDH_DOWNLOAD_SOUND = 51043,IDH_DOWNLOAD_ACTIVEX = 51044,IDH_DOWNLOAD_PAGES_DEEP = 51045,IDH_FOLLOW_LINKS = 51046,IDH_AUTO_SCHEDULE = 51050,IDH_CUSTOM_SCHEDULE = 51051,IDH_MANUAL_SCHEDULE = 51052,IDH_NEW_NAME = 51053,IDH_SCHED_DAYS = 51054,IDH_SCHED_FREQUENCY = 51055,IDH_SCHED_TIME = 51056,IDH_SCHED_REPEAT = 51057,IDH_VARY_START = 51058,IDH_MIME_TYPE = 51063,IDH_DEFAULT_EXT = 51064,IDH_CONFIRM_OPEN = 51065,IDH_SAME_WINDOW = 51066,IDH_EXTENSION = 51067,IDH_OPENS_WITH = 51068,IDH_SHOW_FILE_ATTRIB = 51071,IDH_ALLOW_UPPERCASE = 51072,IDH_SMOOTH_EDGES = 51073,IDH_SHOW_WINDOW = 51074,IDH_RESTORE_DEFAULT = 51075,IDH_VIEW_STATE = 51076,IDH_USE_CURRENT_FOLDER = 51077,IDH_RESET_TO_ORIGINAL = 51078,IDH_FOLDERS_IN_SEP_PROCESS = 51079,IDH_PROPERTIES_GENERAL_THUMBNAIL = 51080,IDH_BROWSE_FOLDER_ADDRESS = 51082,IDH_CHANNELS_LIST = 51083,IDH_SET_LENGTH = 51084,IDH_PLAY_SOUNDS = 51085,IDH_CLOSE_SCREENSAVER = 51086,IDH_UNSUBSCRIBE = 51087,IDH_SCHEDULE_NEW = 51088,IDH_SCHEDULE_REMOVE = 51089,IDH_BROWSE_SAME_WINDOW = 51092,IDH_BROWSE_SEPARATE_WINDOWS = 51093,IDH_SHOW_WEB_WHEN_POSSIBLE = 51094,IDH_SHOW_WEB_WHEN_CHOOSE = 51095,IDH_SINGLE_CLICK_MODE = 51096,IDH_TITLES_LIKE_LINKS = 51097,IDH_TITLES_WHEN_POINT = 51098,IDH_DOUBLE_CLICK_MODE = 51099,IDH_FULL_PATH = 51100,IDH_HIDE_EXTENSIONS = 51101,IDH_SHOW_TIPS = 51102,IDH_HIDE_HIDDEN_SYSTEM = 51103,IDH_HIDE_HIDDEN_ONLY = 51104,IDH_SHOW_ALL = 51105,IDH_HIDE_ICONS = 51106,IDH_FULL_PATH_ADDRESSBAR = 51107,IDH_ENABLE_WEB_CONTENT = 51108,IDH_USE_WINDOWS_CLASSIC = 51109,IDH_ACTIVEDESKTOP_GEN = 51111,IDH_WEB_VIEW_GEN = 51112,IDH_BROWSE_FOLDERS_GEN = 51113,IDH_ICON_OPEN_GEN = 51114,IDH_RESTORE_DEFAULTS_GEN = 51115,IDH_FCW_CHOOSE_OR_EDIT_TEMPLATE = 51116,IDH_FCW_CHOOSE_BACKGROUND_PICTURE = 51117,IDH_FCW_REMOVE_CUST = 51118,IDH_FCW_DESCRIBE_CHOICE = 51119,IDH_FCW_TEMPLATE_LIST = 51120,IDH_FCW_TEMPLATE_PREVIEW = 51121,IDH_FCW_DESCRIBE_TEMPLATE = 51122,IDH_FCW_ENABLE_EDITING = 51123,IDH_FCW_BACKGROUND_PREVIEW = 51124,IDH_FCW_BACKGROUND_LIST = 51125,IDH_FCW_BACKGROUND_BROWSE = 51126,IDH_FCW_ICON_TEXT_COLOR = 51127,IDH_FCW_ENABLE_ICON_BACKGROUND_COLOR = 51128,IDH_FCW_ICON_BACKGROUND_COLOR = 51129,IDH_SHOW_COMP_COLOR = 51130,IDH_HIDDEN_FILES_GROUP = 51131,IDH_STARTMENU = 51132,IDH_STARTMENU_FAVORITES = 51133,IDH_STARTMENU_LOGOFF = 51134,IDH_STARTMENU_CONTROLPANEL = 51135,IDH_STARTMENU_MYDOCUMENTS = 51136,IDH_STARTMENU_PRINTERS = 51137,IDH_STARTMENU_SCROLLPROGRAMS = 51138,IDH_STARTMENU_INTELLIMENUS = 51139,IDH_FILES_AND_FOLDERS = 51140,IDH_SHOW_MY_DOCUMENTS = 51141,IDH_TASKBAR_EXPAND_NETCONNECT = 51141,IDH_TASKBAR_DISPLAY_RUN = 51142,IDH_TASKBAR_SIZE_MOVE = 51143,IDH_TASKBAR_CONTEXTMENU = 51144,IDH_TASKBAR_STARTMENU_DRAGDROP = 51145,IDH_TASKBAR_EXPAND_MYPICTURES = 51146,IDH_DISABLE_NETCRAWLER = 51147,IDH_HIDE_CONTENT = 51148,};
enum MACRO_IE_MODULES {IE_MODULES_UUID = 1,IE_MODULES_MSXML3 = 1,IE_MODULES_SHDOCVW = 1,IE_MODULES_URLMON = 1,IE_MODULES_WININET = 1,IE_MODULES_SHLWAPI = 1,IE_MODULES_MLANG = 1,};
enum MACRO_IME_CONFIG {IME_CONFIG_GENERAL = 1,IME_CONFIG_REGISTERWORD = 2,IME_CONFIG_SELECTDICTIONARY = 3,IME_ESC_QUERY_SUPPORT = 3,IME_ESC_RESERVED_FIRST = 4,IME_ESC_RESERVED_LAST = 2047,IME_ESC_PRIVATE_FIRST = 2048,IME_ESC_PRIVATE_LAST = 4095,IME_ESC_SEQUENCE_TO_INTERNAL = 4097,IME_ESC_GET_EUDC_DICTIONARY = 4099,IME_ESC_SET_EUDC_DICTIONARY = 4100,IME_ESC_MAX_KEY = 4101,IME_ESC_IME_NAME = 4102,IME_ESC_SYNC_HOTKEY = 4103,IME_ESC_HANJA_MODE = 4104,IME_ESC_AUTOMATA = 4105,IME_ESC_PRIVATE_HOTKEY = 4106,IME_REGWORD_STYLE_EUDC = 1,IME_REGWORD_STYLE_USER_FIRST = -2147483648,IME_REGWORD_STYLE_USER_LAST = -1,};
enum MACRO_IMPORTANCE {IMPORTANCE_LOW = 0,IMPORTANCE_NORMAL = 1,IMPORTANCE_HIGH = 2,};
enum MACRO_INHERIT_NO {INHERIT_NO_PROPAGATE = 0x4,INHERIT_ONLY = 0x8,};
enum MACRO_INITIALIZE {INITIALIZE_NEGOTIATION = 0xFFFFFFFF,};
enum MACRO_IOCTL_NDIS {IOCTL_NDIS_QUERY_GLOBAL_STATS = 1507330,IOCTL_NDIS_QUERY_ALL_STATS = 1507334,IOCTL_NDIS_DO_PNP_OPERATION = 1507336,IOCTL_NDIS_QUERY_SELECTED_STATS = 1507342,IOCTL_NDIS_ENUMERATE_INTERFACES = 1507344,IOCTL_NDIS_ADD_TDI_DEVICE = 1507348,IOCTL_NDIS_GET_LOG_DATA = 1507358,};
enum MACRO_IP_ADAPTER {IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 0x1,IP_ADAPTER_ADDRESS_TRANSIENT = 0x2,IP_ADAPTER_DDNS_ENABLED = 0x1,IP_ADAPTER_REGISTER_ADAPTER_SUFFIX = 0x2,IP_ADAPTER_DHCP_ENABLED = 0x4,IP_ADAPTER_RECEIVE_ONLY = 0x8,IP_ADAPTER_NO_MULTICAST = 0x10,IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG = 0x20,};
enum MACRO_IP_PENDING {IP_PENDING = 11255,IP_FLAG_DF = 2,IP_OPT_EOL = 0,IP_OPT_NOP = 1,IP_OPT_SECURITY = 130,IP_OPT_LSRR = 131,IP_OPT_SSRR = 137,IP_OPT_RR = 7,IP_OPT_TS = 68,IP_OPT_SID = 136,IP_OPT_ROUTER_ALERT = 148,};
enum MACRO_ISO_GLOBAL {ISO_GLOBAL = 0x1,ISO_REGISTRY = 0x2,ISO_VALID_FLAGS = 0x3,};
enum MACRO_JOB_OBJECT {JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0,JOB_OBJECT_POST_AT_END_OF_JOB = 1,JOB_OBJECT_MSG_END_OF_JOB_TIME = 1,JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2,JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3,JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4,JOB_OBJECT_MSG_NEW_PROCESS = 6,JOB_OBJECT_MSG_EXIT_PROCESS = 7,JOB_OBJECT_LIMIT_WORKINGSET = 1,JOB_OBJECT_LIMIT_PROCESS_TIME = 2,JOB_OBJECT_LIMIT_JOB_TIME = 4,JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8,JOB_OBJECT_LIMIT_AFFINITY = 16,JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32,JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64,JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128,JOB_OBJECT_LIMIT_VALID_FLAGS = 255,JOB_OBJECT_UILIMIT_NONE = 0,JOB_OBJECT_UILIMIT_HANDLES = 1,JOB_OBJECT_UILIMIT_READCLIPBOARD = 2,JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4,JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8,JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16,JOB_OBJECT_UILIMIT_GLOBALATOMS = 32,JOB_OBJECT_UILIMIT_DESKTOP = 64,JOB_OBJECT_UILIMIT_EXITWINDOWS = 128,JOB_OBJECT_UILIMIT_ALL = 255,JOB_OBJECT_UI_VALID_FLAGS = 255,JOB_OBJECT_SECURITY_NO_ADMIN = 1,JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2,JOB_OBJECT_SECURITY_ONLY_TOKEN = 4,JOB_OBJECT_SECURITY_FILTER_TOKENS = 8,JOB_OBJECT_SECURITY_VALID_FLAGS = 15,};
enum MACRO_KEY_LENGTH {KEY_LENGTH_MASK = 0xFFFF0000,};
enum MACRO_KSPROPERTY {KSPROPERTY_SUPPORT_GET = 0x1,KSPROPERTY_SUPPORT_SET = 0x2,};
enum MACRO_LANGUAGE_E {LANGUAGE_E_DATABASE_NOT_FOUND = 0x80041784,};
enum MACRO_LBER_ERROR {LBER_ERROR = 0xFFFFFFFF,LBER_DEFAULT = 0xFFFFFFFF,};
enum MACRO_LDBL_RADIX {LDBL_RADIX = 2,LDBL_ROUNDS = 1,};
enum MACRO_LINEMAPPER {LINEMAPPER = 0xFFFFFFFF,};
enum MACRO_LM20_DNLEN {LM20_DNLEN = 15,};
enum MACRO_LM20_GNLEN {LM20_GNLEN = 20,};
enum MACRO_LM20_NNLEN {LM20_NNLEN = 12,};
enum MACRO_LM20_PWLEN {LM20_PWLEN = 14,};
enum MACRO_LM20_QNLEN {LM20_QNLEN = 12,};
enum MACRO_LM20_RMLEN {LM20_RMLEN = 30,};
enum MACRO_LM20_SNLEN {LM20_SNLEN = 15,};
enum MACRO_LM20_UNLEN {LM20_UNLEN = 20,};
enum MACRO_LMEM_ALLOC {LMEM_ALLOC_BIT_0 = 0x1,LMEM_ALLOC_BIT_1 = 0x2,LMEM_ALLOC_BIT_2 = 0x4,LMEM_ALLOC_BIT_3 = 0x8,LMEM_ALLOC_IGNORE_LEAK = 0x10,LMEM_ALLOC_CHKPOINT = 0x20,LMEM_ALLOC_ADDITIONAL = 0x40,LMEM_ALLOC_SIZE_EVENT = 0xFFFFFFFF,LMEM_ALLOC_SIZE_CS = 0xFFFFFFFE,LMEM_ALLOC_SIZE_FILE = 0xFFFFFFFD,LMEM_TYPE_END = 0x0,LMEM_TYPE_STACK = 0x1,LMEM_TYPE_UNICODE = 0x2,LMEM_TYPE_ASCII = 0x3,LMEM_TYPE_HEX = 0x4,LMEM_SIG = 0x6C6D656D,LMEM_ALLOC_SIG = 0x6C6D,LMEM_FNAME_LEN = 0x104,};
enum MACRO_LOCALSTATE {LOCALSTATE_ASSIGNED = 0x1,LOCALSTATE_PUBLISHED = 0x2,LOCALSTATE_UNINSTALL_UNMANAGED = 0x4,LOCALSTATE_POLICYREMOVE_ORPHAN = 0x8,LOCALSTATE_POLICYREMOVE_UNINSTALL = 0x10,LOCALSTATE_ORPHANED = 0x20,LOCALSTATE_UNINSTALLED = 0x40,};
enum MACRO_LOGPIXELSX {LOGPIXELSX = 88,};
enum MACRO_LOGPIXELSY {LOGPIXELSY = 90,};
enum MACRO_LONG_LIVED {LONG_LIVED = 0xFFFFFFFE,};
enum MACRO_MAPI_STORE {MAPI_STORE_PROVIDER = 33,MAPI_AB = 34,MAPI_AB_PROVIDER = 35,MAPI_TRANSPORT_PROVIDER = 36,MAPI_SPOOLER = 37,MAPI_PROFILE_PROVIDER = 38,MAPI_SUBSYSTEM = 39,MAPI_HOOK_PROVIDER = 40,};
enum MACRO_MARKPARITY {MARKPARITY = 3,SPACEPARITY = 4,};
enum MACRO_MAXEAPCODE {MAXEAPCODE = 4,};
enum MACRO_MAXINTATOM {MAXINTATOM = 0xC000,};
enum MACRO_MAX_COLUMN {MAX_COLUMN_NAME_LEN = 80,MAX_COLUMN_DESC_LEN = 128,};
enum MACRO_MAX_DEVICE {MAX_DEVICE_IDENTIFIER_STRING = 512,};
enum MACRO_MAX_GOPHER {MAX_GOPHER_DISPLAY_TEXT = 128,MAX_GOPHER_SELECTOR_TEXT = 256,MAX_GOPHER_HOST_NAME = 256,MAX_GOPHER_LOCATOR_LENGTH = 653,};
enum MACRO_MAX_LANMAN {MAX_LANMAN_MESSAGE_ID = 5799,};
enum MACRO_MAX_MIMECP {MAX_MIMECP_NAME = 64,MAX_MIMECSET_NAME = 50,MAX_MIMEFACE_NAME = 32,MAX_RFC1766_NAME = 6,MAX_LOCALE_NAME = 32,MAX_SCRIPT_NAME = 48,};
enum MACRO_MAX_PROPID {MAX_PROPID = 0xFFFF,};
enum MACRO_MAX_SEARCH {MAX_SEARCH_FORMAT_STRING = 255,};
enum MACRO_MDDISPINFO {MDDISPINFO_DRILLED_DOWN = 0x10000,MDDISPINFO_PARENT_SAME_AS_PREV = 0x20000,};
enum MACRO_MERGEPAINT {MERGEPAINT = 0xBB0226,};
enum MACRO_MIDIMAPPER {MIDIMAPPER = 4294967295,};
enum MACRO_MIN_GOPHER {MIN_GOPHER_ATTRIBUTE_LENGTH = 256,};
enum MACRO_MK_LBUTTON {MK_LBUTTON = 0x1,MK_RBUTTON = 0x2,MK_SHIFT = 0x4,MK_CONTROL = 0x8,MK_MBUTTON = 0x10,};
enum MACRO_MPEGLAYER3 {MPEGLAYER3_WFX_EXTRA_BYTES = 12,MPEGLAYER3_ID_UNKNOWN = 0,MPEGLAYER3_ID_MPEG = 1,MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2,MPEGLAYER3_FLAG_PADDING_ISO = 0,MPEGLAYER3_FLAG_PADDING_ON = 1,MPEGLAYER3_FLAG_PADDING_OFF = 2,};
enum MACRO_MQ_JOURNAL {MQ_JOURNAL_NONE = 0,MQ_JOURNAL = 1,MQ_TRANSACTIONAL_NONE = 0,MQ_TRANSACTIONAL = 1,MQ_AUTHENTICATE_NONE = 0,MQ_AUTHENTICATE = 1,MQ_PRIV_LEVEL_NONE = 0,MQ_PRIV_LEVEL_OPTIONAL = 1,MQ_PRIV_LEVEL_BODY = 2,};
enum MACRO_MSG_LOCKED {MSG_LOCKED = 0x1,MSG_UNLOCKED = 0x0,};
enum MACRO_NI_MAXHOST {NI_MAXHOST = 1025,NI_MAXSERV = 32,};
enum MACRO_NOTSRCCOPY {NOTSRCCOPY = 0x330008,};
enum MACRO_NULLREGION {NULLREGION = 1,SIMPLEREGION = 2,};
enum MACRO_NUMMARKERS {NUMMARKERS = 20,};
enum MACRO_ODT_HEADER {ODT_HEADER = 100,ODT_TAB = 101,ODT_LISTVIEW = 102,};
enum MACRO_ONESTOPBIT {ONESTOPBIT = 0,ONE5STOPBITS = 1,TWOSTOPBITS = 2,};
enum MACRO_PHONESTATE {PHONESTATE_OTHER = 0x1,PHONESTATE_CONNECTED = 0x2,PHONESTATE_DISCONNECTED = 0x4,PHONESTATE_OWNER = 0x8,PHONESTATE_MONITORS = 0x10,PHONESTATE_DISPLAY = 0x20,PHONESTATE_LAMP = 0x40,PHONESTATE_RINGMODE = 0x80,PHONESTATE_RINGVOLUME = 0x100,PHONESTATE_HANDSETHOOKSWITCH = 0x200,PHONESTATE_HANDSETVOLUME = 0x400,PHONESTATE_HANDSETGAIN = 0x800,PHONESTATE_SPEAKERHOOKSWITCH = 0x1000,PHONESTATE_SPEAKERVOLUME = 0x2000,PHONESTATE_SPEAKERGAIN = 0x4000,PHONESTATE_HEADSETHOOKSWITCH = 0x8000,PHONESTATE_HEADSETVOLUME = 0x10000,PHONESTATE_HEADSETGAIN = 0x20000,PHONESTATE_SUSPEND = 0x40000,PHONESTATE_RESUME = 0x80000,PHONESTATE_DEVSPECIFIC = 0x100000,PHONESTATE_REINIT = 0x200000,PHONESTATE_CAPSCHANGE = 0x400000,PHONESTATE_REMOVED = 0x800000,};
enum MACRO_POWER_NAME {POWER_NAME = 0x1,POWER_FORCE = 0x1000,};
enum MACRO_PRIHIGHEST {PRIHIGHEST = 32767,};
enum MACRO_PROPSETHDR {PROPSETHDR_OSVERSION_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_PROXY_TYPE {PROXY_TYPE_DIRECT = 0x1,PROXY_TYPE_PROXY = 0x2,PROXY_TYPE_AUTO_PROXY_URL = 0x4,PROXY_TYPE_AUTO_DETECT = 0x8,};
enum MACRO_PR_ENTRYID {PR_ENTRYID = 0xFFF0102,PR_OBJECT_TYPE = 0xFFE0003,PR_ICON = 0xFFD0102,PR_MINI_ICON = 0xFFC0102,PR_STORE_ENTRYID = 0xFFB0102,PR_STORE_RECORD_KEY = 0xFFA0102,PR_RECORD_KEY = 0xFF90102,PR_MAPPING_SIGNATURE = 0xFF80102,PR_ACCESS_LEVEL = 0xFF70003,PR_INSTANCE_KEY = 0xFF60102,PR_ROW_TYPE = 0xFF50003,PR_ACCESS = 0xFF40003,PR_ROWID = 0x30000003,PR_DISPLAY_NAME = 0x3001001E,PR_DISPLAY_NAME_W = 0x3001001F,PR_DISPLAY_NAME_A = 0x3001001E,PR_ADDRTYPE = 0x3002001E,PR_ADDRTYPE_W = 0x3002001F,PR_ADDRTYPE_A = 0x3002001E,PR_EMAIL_ADDRESS = 0x3003001E,PR_EMAIL_ADDRESS_W = 0x3003001F,PR_EMAIL_ADDRESS_A = 0x3003001E,PR_COMMENT = 0x3004001E,PR_COMMENT_W = 0x3004001F,PR_COMMENT_A = 0x3004001E,PR_DEPTH = 0x30050003,PR_PROVIDER_DISPLAY = 0x3006001E,PR_PROVIDER_DISPLAY_W = 0x3006001F,PR_PROVIDER_DISPLAY_A = 0x3006001E,PR_CREATION_TIME = 0x30070040,PR_LAST_MODIFICATION_TIME = 0x30080040,PR_RESOURCE_FLAGS = 0x30090003,PR_PROVIDER_DLL_NAME = 0x300A001E,PR_PROVIDER_DLL_NAME_W = 0x300A001F,PR_PROVIDER_DLL_NAME_A = 0x300A001E,PR_SEARCH_KEY = 0x300B0102,PR_PROVIDER_UID = 0x300C0102,PR_PROVIDER_ORDINAL = 0x300D0003,PR_CONTAINER_FLAGS = 0x36000003,PR_FOLDER_TYPE = 0x36010003,PR_CONTENT_COUNT = 0x36020003,PR_CONTENT_UNREAD = 0x36030003,PR_CREATE_TEMPLATES = 0x3604000D,PR_DETAILS_TABLE = 0x3605000D,PR_SEARCH = 0x3607000D,PR_SELECTABLE = 0x3609000B,PR_SUBFOLDERS = 0x360A000B,PR_STATUS = 0x360B0003,PR_ANR = 0x360C001E,PR_ANR_W = 0x360C001F,PR_ANR_A = 0x360C001E,PR_CONTENTS_SORT_ORDER = 0x360D1003,PR_CONTAINER_HIERARCHY = 0x360E000D,PR_CONTAINER_CONTENTS = 0x360F000D,PR_FOLDER_ASSOCIATED_CONTENTS = 0x3610000D,PR_DEF_CREATE_DL = 0x36110102,PR_DEF_CREATE_MAILUSER = 0x36120102,PR_CONTAINER_CLASS = 0x3613001E,PR_CONTAINER_CLASS_W = 0x3613001F,PR_CONTAINER_CLASS_A = 0x3613001E,PR_CONTAINER_MODIFY_VERSION = 0x36140014,PR_AB_PROVIDER_ID = 0x36150102,PR_DEFAULT_VIEW_ENTRYID = 0x36160102,PR_ASSOC_CONTENT_COUNT = 0x36170003,PR_DISPLAY_TYPE = 0x39000003,PR_TEMPLATEID = 0x39020102,PR_PRIMARY_CAPABILITY = 0x39040102,PR_7BIT_DISPLAY_NAME = 0x39FF001E,PR_ACCOUNT = 0x3A00001E,PR_ACCOUNT_W = 0x3A00001F,PR_ACCOUNT_A = 0x3A00001E,PR_ALTERNATE_RECIPIENT = 0x3A010102,PR_CALLBACK_TELEPHONE_NUMBER = 0x3A02001E,PR_CALLBACK_TELEPHONE_NUMBER_W = 0x3A02001F,PR_CALLBACK_TELEPHONE_NUMBER_A = 0x3A02001E,PR_CONVERSION_PROHIBITED = 0x3A03000B,PR_DISCLOSE_RECIPIENTS = 0x3A04000B,PR_GENERATION = 0x3A05001E,PR_GENERATION_W = 0x3A05001F,PR_GENERATION_A = 0x3A05001E,PR_GIVEN_NAME = 0x3A06001E,PR_GIVEN_NAME_W = 0x3A06001F,PR_GIVEN_NAME_A = 0x3A06001E,PR_GOVERNMENT_ID_NUMBER = 0x3A07001E,PR_GOVERNMENT_ID_NUMBER_W = 0x3A07001F,PR_GOVERNMENT_ID_NUMBER_A = 0x3A07001E,PR_BUSINESS_TELEPHONE_NUMBER = 0x3A08001E,PR_BUSINESS_TELEPHONE_NUMBER_W = 0x3A08001F,PR_BUSINESS_TELEPHONE_NUMBER_A = 0x3A08001E,PR_OFFICE_TELEPHONE_NUMBER = 0x3A08001E,PR_OFFICE_TELEPHONE_NUMBER_W = 0x3A08001F,PR_OFFICE_TELEPHONE_NUMBER_A = 0x3A08001E,PR_HOME_TELEPHONE_NUMBER = 0x3A09001E,PR_HOME_TELEPHONE_NUMBER_W = 0x3A09001F,PR_HOME_TELEPHONE_NUMBER_A = 0x3A09001E,PR_INITIALS = 0x3A0A001E,PR_INITIALS_W = 0x3A0A001F,PR_INITIALS_A = 0x3A0A001E,PR_KEYWORD = 0x3A0B001E,PR_KEYWORD_W = 0x3A0B001F,PR_KEYWORD_A = 0x3A0B001E,PR_LANGUAGE = 0x3A0C001E,PR_LANGUAGE_W = 0x3A0C001F,PR_LANGUAGE_A = 0x3A0C001E,PR_LOCATION = 0x3A0D001E,PR_LOCATION_W = 0x3A0D001F,PR_LOCATION_A = 0x3A0D001E,PR_MAIL_PERMISSION = 0x3A0E000B,PR_MHS_COMMON_NAME = 0x3A0F001E,PR_MHS_COMMON_NAME_W = 0x3A0F001F,PR_MHS_COMMON_NAME_A = 0x3A0F001E,PR_ORGANIZATIONAL_ID_NUMBER = 0x3A10001E,PR_ORGANIZATIONAL_ID_NUMBER_W = 0x3A10001F,PR_ORGANIZATIONAL_ID_NUMBER_A = 0x3A10001E,PR_SURNAME = 0x3A11001E,PR_SURNAME_W = 0x3A11001F,PR_SURNAME_A = 0x3A11001E,PR_ORIGINAL_ENTRYID = 0x3A120102,PR_ORIGINAL_DISPLAY_NAME = 0x3A13001E,PR_ORIGINAL_DISPLAY_NAME_W = 0x3A13001F,PR_ORIGINAL_DISPLAY_NAME_A = 0x3A13001E,PR_ORIGINAL_SEARCH_KEY = 0x3A140102,PR_POSTAL_ADDRESS = 0x3A15001E,PR_POSTAL_ADDRESS_W = 0x3A15001F,PR_POSTAL_ADDRESS_A = 0x3A15001E,PR_COMPANY_NAME = 0x3A16001E,PR_COMPANY_NAME_W = 0x3A16001F,PR_COMPANY_NAME_A = 0x3A16001E,PR_TITLE = 0x3A17001E,PR_TITLE_W = 0x3A17001F,PR_TITLE_A = 0x3A17001E,PR_DEPARTMENT_NAME = 0x3A18001E,PR_DEPARTMENT_NAME_W = 0x3A18001F,PR_DEPARTMENT_NAME_A = 0x3A18001E,PR_OFFICE_LOCATION = 0x3A19001E,PR_OFFICE_LOCATION_W = 0x3A19001F,PR_OFFICE_LOCATION_A = 0x3A19001E,PR_PRIMARY_TELEPHONE_NUMBER = 0x3A1A001E,PR_PRIMARY_TELEPHONE_NUMBER_W = 0x3A1A001F,PR_PRIMARY_TELEPHONE_NUMBER_A = 0x3A1A001E,PR_BUSINESS2_TELEPHONE_NUMBER = 0x3A1B001E,PR_BUSINESS2_TELEPHONE_NUMBER_W = 0x3A1B001F,PR_BUSINESS2_TELEPHONE_NUMBER_A = 0x3A1B001E,PR_OFFICE2_TELEPHONE_NUMBER = 0x3A1B001E,PR_OFFICE2_TELEPHONE_NUMBER_W = 0x3A1B001F,PR_OFFICE2_TELEPHONE_NUMBER_A = 0x3A1B001E,PR_MOBILE_TELEPHONE_NUMBER = 0x3A1C001E,PR_MOBILE_TELEPHONE_NUMBER_W = 0x3A1C001F,PR_MOBILE_TELEPHONE_NUMBER_A = 0x3A1C001E,PR_CELLULAR_TELEPHONE_NUMBER = 0x3A1C001E,PR_CELLULAR_TELEPHONE_NUMBER_W = 0x3A1C001F,PR_CELLULAR_TELEPHONE_NUMBER_A = 0x3A1C001E,PR_RADIO_TELEPHONE_NUMBER = 0x3A1D001E,PR_RADIO_TELEPHONE_NUMBER_W = 0x3A1D001F,PR_RADIO_TELEPHONE_NUMBER_A = 0x3A1D001E,PR_CAR_TELEPHONE_NUMBER = 0x3A1E001E,PR_CAR_TELEPHONE_NUMBER_W = 0x3A1E001F,PR_CAR_TELEPHONE_NUMBER_A = 0x3A1E001E,PR_OTHER_TELEPHONE_NUMBER = 0x3A1F001E,PR_OTHER_TELEPHONE_NUMBER_W = 0x3A1F001F,PR_OTHER_TELEPHONE_NUMBER_A = 0x3A1F001E,PR_TRANSMITABLE_DISPLAY_NAME = 0x3A20001E,PR_TRANSMITABLE_DISPLAY_NAME_W = 0x3A20001F,PR_TRANSMITABLE_DISPLAY_NAME_A = 0x3A20001E,PR_PAGER_TELEPHONE_NUMBER = 0x3A21001E,PR_PAGER_TELEPHONE_NUMBER_W = 0x3A21001F,PR_PAGER_TELEPHONE_NUMBER_A = 0x3A21001E,PR_BEEPER_TELEPHONE_NUMBER = 0x3A21001E,PR_BEEPER_TELEPHONE_NUMBER_W = 0x3A21001F,PR_BEEPER_TELEPHONE_NUMBER_A = 0x3A21001E,PR_USER_CERTIFICATE = 0x3A220102,PR_PRIMARY_FAX_NUMBER = 0x3A23001E,PR_PRIMARY_FAX_NUMBER_W = 0x3A23001F,PR_PRIMARY_FAX_NUMBER_A = 0x3A23001E,PR_BUSINESS_FAX_NUMBER = 0x3A24001E,PR_BUSINESS_FAX_NUMBER_W = 0x3A24001F,PR_BUSINESS_FAX_NUMBER_A = 0x3A24001E,PR_HOME_FAX_NUMBER = 0x3A25001E,PR_HOME_FAX_NUMBER_W = 0x3A25001F,PR_HOME_FAX_NUMBER_A = 0x3A25001E,PR_COUNTRY = 0x3A26001E,PR_COUNTRY_W = 0x3A26001F,PR_COUNTRY_A = 0x3A26001E,PR_LOCALITY = 0x3A27001E,PR_LOCALITY_W = 0x3A27001F,PR_LOCALITY_A = 0x3A27001E,PR_STATE_OR_PROVINCE = 0x3A28001E,PR_STATE_OR_PROVINCE_W = 0x3A28001F,PR_STATE_OR_PROVINCE_A = 0x3A28001E,PR_STREET_ADDRESS = 0x3A29001E,PR_STREET_ADDRESS_W = 0x3A29001F,PR_STREET_ADDRESS_A = 0x3A29001E,PR_POSTAL_CODE = 0x3A2A001E,PR_POSTAL_CODE_W = 0x3A2A001F,PR_POSTAL_CODE_A = 0x3A2A001E,PR_POST_OFFICE_BOX = 0x3A2B001E,PR_POST_OFFICE_BOX_W = 0x3A2B001F,PR_POST_OFFICE_BOX_A = 0x3A2B001E,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX = 0x3A2B001E,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_W = 0x3A2B001F,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_A = 0x3A2B001E,PR_TELEX_NUMBER = 0x3A2C001E,PR_TELEX_NUMBER_W = 0x3A2C001F,PR_TELEX_NUMBER_A = 0x3A2C001E,PR_ISDN_NUMBER = 0x3A2D001E,PR_ISDN_NUMBER_W = 0x3A2D001F,PR_ISDN_NUMBER_A = 0x3A2D001E,PR_ASSISTANT_TELEPHONE_NUMBER = 0x3A2E001E,PR_ASSISTANT_TELEPHONE_NUMBER_W = 0x3A2E001F,PR_ASSISTANT_TELEPHONE_NUMBER_A = 0x3A2E001E,PR_HOME2_TELEPHONE_NUMBER = 0x3A2F001E,PR_HOME2_TELEPHONE_NUMBER_W = 0x3A2F001F,PR_HOME2_TELEPHONE_NUMBER_A = 0x3A2F001E,PR_ASSISTANT = 0x3A30001E,PR_ASSISTANT_W = 0x3A30001F,PR_ASSISTANT_A = 0x3A30001E,PR_SEND_RICH_INFO = 0x3A40000B,PR_WEDDING_ANNIVERSARY = 0x3A410040,PR_BIRTHDAY = 0x3A420040,PR_HOBBIES = 0x3A43001E,PR_HOBBIES_W = 0x3A43001F,PR_HOBBIES_A = 0x3A43001E,PR_MIDDLE_NAME = 0x3A44001E,PR_MIDDLE_NAME_W = 0x3A44001F,PR_MIDDLE_NAME_A = 0x3A44001E,PR_DISPLAY_NAME_PREFIX = 0x3A45001E,PR_DISPLAY_NAME_PREFIX_W = 0x3A45001F,PR_DISPLAY_NAME_PREFIX_A = 0x3A45001E,PR_PROFESSION = 0x3A46001E,PR_PROFESSION_W = 0x3A46001F,PR_PROFESSION_A = 0x3A46001E,PR_PREFERRED_BY_NAME = 0x3A47001E,PR_PREFERRED_BY_NAME_W = 0x3A47001F,PR_PREFERRED_BY_NAME_A = 0x3A47001E,PR_SPOUSE_NAME = 0x3A48001E,PR_SPOUSE_NAME_W = 0x3A48001F,PR_SPOUSE_NAME_A = 0x3A48001E,PR_COMPUTER_NETWORK_NAME = 0x3A49001E,PR_COMPUTER_NETWORK_NAME_W = 0x3A49001F,PR_COMPUTER_NETWORK_NAME_A = 0x3A49001E,PR_CUSTOMER_ID = 0x3A4A001E,PR_CUSTOMER_ID_W = 0x3A4A001F,PR_CUSTOMER_ID_A = 0x3A4A001E,PR_TTYTDD_PHONE_NUMBER = 0x3A4B001E,PR_TTYTDD_PHONE_NUMBER_W = 0x3A4B001F,PR_TTYTDD_PHONE_NUMBER_A = 0x3A4B001E,PR_FTP_SITE = 0x3A4C001E,PR_FTP_SITE_W = 0x3A4C001F,PR_FTP_SITE_A = 0x3A4C001E,PR_GENDER = 0x3A4D0002,PR_MANAGER_NAME = 0x3A4E001E,PR_MANAGER_NAME_W = 0x3A4E001F,PR_MANAGER_NAME_A = 0x3A4E001E,PR_NICKNAME = 0x3A4F001E,PR_NICKNAME_W = 0x3A4F001F,PR_NICKNAME_A = 0x3A4F001E,PR_PERSONAL_HOME_PAGE = 0x3A50001E,PR_PERSONAL_HOME_PAGE_W = 0x3A50001F,PR_PERSONAL_HOME_PAGE_A = 0x3A50001E,PR_BUSINESS_HOME_PAGE = 0x3A51001E,PR_BUSINESS_HOME_PAGE_W = 0x3A51001F,PR_BUSINESS_HOME_PAGE_A = 0x3A51001E,PR_CONTACT_VERSION = 0x3A520048,PR_CONTACT_ENTRYIDS = 0x3A531102,PR_CONTACT_ADDRTYPES = 0x3A54101E,PR_CONTACT_ADDRTYPES_W = 0x3A54101F,PR_CONTACT_ADDRTYPES_A = 0x3A54101E,PR_CONTACT_DEFAULT_ADDRESS_INDEX = 0x3A550003,PR_CONTACT_EMAIL_ADDRESSES = 0x3A56101E,PR_CONTACT_EMAIL_ADDRESSES_W = 0x3A56101F,PR_CONTACT_EMAIL_ADDRESSES_A = 0x3A56101E,PR_COMPANY_MAIN_PHONE_NUMBER = 0x3A57001E,PR_COMPANY_MAIN_PHONE_NUMBER_W = 0x3A57001F,PR_COMPANY_MAIN_PHONE_NUMBER_A = 0x3A57001E,PR_CHILDRENS_NAMES = 0x3A58101E,PR_CHILDRENS_NAMES_W = 0x3A58101F,PR_CHILDRENS_NAMES_A = 0x3A58101E,PR_HOME_ADDRESS_CITY = 0x3A59001E,PR_HOME_ADDRESS_CITY_W = 0x3A59001F,PR_HOME_ADDRESS_CITY_A = 0x3A59001E,PR_HOME_ADDRESS_COUNTRY = 0x3A5A001E,PR_HOME_ADDRESS_COUNTRY_W = 0x3A5A001F,PR_HOME_ADDRESS_COUNTRY_A = 0x3A5A001E,PR_HOME_ADDRESS_POSTAL_CODE = 0x3A5B001E,PR_HOME_ADDRESS_POSTAL_CODE_W = 0x3A5B001F,PR_HOME_ADDRESS_POSTAL_CODE_A = 0x3A5B001E,PR_HOME_ADDRESS_STATE_OR_PROVINCE = 0x3A5C001E,PR_HOME_ADDRESS_STATE_OR_PROVINCE_W = 0x3A5C001F,PR_HOME_ADDRESS_STATE_OR_PROVINCE_A = 0x3A5C001E,PR_HOME_ADDRESS_STREET = 0x3A5D001E,PR_HOME_ADDRESS_STREET_W = 0x3A5D001F,PR_HOME_ADDRESS_STREET_A = 0x3A5D001E,PR_HOME_ADDRESS_POST_OFFICE_BOX = 0x3A5E001E,PR_HOME_ADDRESS_POST_OFFICE_BOX_W = 0x3A5E001F,PR_HOME_ADDRESS_POST_OFFICE_BOX_A = 0x3A5E001E,PR_OTHER_ADDRESS_CITY = 0x3A5F001E,PR_OTHER_ADDRESS_CITY_W = 0x3A5F001F,PR_OTHER_ADDRESS_CITY_A = 0x3A5F001E,PR_OTHER_ADDRESS_COUNTRY = 0x3A60001E,PR_OTHER_ADDRESS_COUNTRY_W = 0x3A60001F,PR_OTHER_ADDRESS_COUNTRY_A = 0x3A60001E,PR_OTHER_ADDRESS_POSTAL_CODE = 0x3A61001E,PR_OTHER_ADDRESS_POSTAL_CODE_W = 0x3A61001F,PR_OTHER_ADDRESS_POSTAL_CODE_A = 0x3A61001E,PR_OTHER_ADDRESS_STATE_OR_PROVINCE = 0x3A62001E,PR_OTHER_ADDRESS_STATE_OR_PROVINCE_W = 0x3A62001F,PR_OTHER_ADDRESS_STATE_OR_PROVINCE_A = 0x3A62001E,PR_OTHER_ADDRESS_STREET = 0x3A63001E,PR_OTHER_ADDRESS_STREET_W = 0x3A63001F,PR_OTHER_ADDRESS_STREET_A = 0x3A63001E,PR_OTHER_ADDRESS_POST_OFFICE_BOX = 0x3A64001E,PR_OTHER_ADDRESS_POST_OFFICE_BOX_W = 0x3A64001F,PR_OTHER_ADDRESS_POST_OFFICE_BOX_A = 0x3A64001E,PR_USER_X509_CERTIFICATE = 0x3A701102,PR_SEND_INTERNET_ENCODING = 0x3A710003,PR_BUSINESS_ADDRESS_CITY = 0x3A27001E,PR_BUSINESS_ADDRESS_COUNTRY = 0x3A26001E,PR_BUSINESS_ADDRESS_POSTAL_CODE = 0x3A2A001E,PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE = 0x3A28001E,PR_BUSINESS_ADDRESS_STREET = 0x3A29001E,PR_RECIPIENT_TYPE = 0xC150003,};
enum MACRO_PUserKData {PUserKData = 0xFFFFC800,};
enum MACRO_QOS_CLASS0 {QOS_CLASS0 = 0x0,QOS_CLASS1 = 0x1,QOS_CLASS2 = 0x2,QOS_CLASS3 = 0x3,QOS_CLASS4 = 0x4,};
enum MACRO_RASTERCAPS {RASTERCAPS = 38,};
enum MACRO_REGSTR_VAL {REGSTR_VAL_TRUSTWARNINGLEVEL_TYPE = 1,REGSTR_VAL_SECURITYWARNONSEND_TYPE = 3,REGSTR_VAL_SECURITYWARNONSEND_DEF = 1,REGSTR_VAL_SECURITYWARNONSENDALWAYS_TYPE = 3,REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 1,REGSTR_VAL_SECURITYWARNONVIEW_TYPE = 3,REGSTR_VAL_SECURITYWARNONVIEW_DEF = 1,REGSTR_VAL_SECURITYALLOWCOOKIES_TYPE = 3,REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 1,REGSTR_VAL_SECURITYWARNONZONECROSSING_TYPE = 3,REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 1,REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_TYPE = 3,REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 1,REGSTR_VAL_SECURITYWARNONBADCERTSENDING_TYPE = 3,REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 1,REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_TYPE = 4,REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0,REGSTR_VAL_SECURITYACTIVEX_TYPE = 3,REGSTR_VAL_SECURITYACTIVEX_DEF = 1,REGSTR_VAL_SECURITYACTICEXSCRIPTS_TYPE = 3,REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 1,REGSTR_VAL_SECURITYJAVA_TYPE = 3,REGSTR_VAL_SECURITYJAVA_DEF = 1,REGSTR_VAL_JAVAJIT_TYPE = 4,REGSTR_VAL_JAVAJIT_DEF = 0,REGSTR_VAL_JAVALOGGING_TYPE = 4,REGSTR_VAL_JAVALOGGING_DEF = 0,REGSTR_VAL_VISIBLEBANDS_TYPE = 4,REGSTR_VAL_VISIBLEBANDS_DEF = 7,};
enum MACRO_REVOCATION {REVOCATION_OID_CRL_REVOCATION = 1,};
enum MACRO_RSA1024BIT {RSA1024BIT_KEY = 0x4000000,};
enum MACRO_RTProperty {RTProperty = 5,};
enum MACRO_RT_VERSION {RT_VERSION = 16,RT_DLGINCLUDE = 17,};
enum MACRO_SB_GETTEXT {SB_GETTEXT = 1026,SB_SETTEXT = 1025,SB_GETTEXTLENGTH = 1027,};
enum MACRO_SCRIPTINFO {SCRIPTINFO_IUNKNOWN = 0x1,SCRIPTINFO_ITYPEINFO = 0x2,SCRIPTINFO_ALL_FLAGS = 0x3,};
enum MACRO_SCRIPTITEM {SCRIPTITEM_ISVISIBLE = 0x2,SCRIPTITEM_ISSOURCE = 0x4,SCRIPTITEM_GLOBALMEMBERS = 0x8,SCRIPTITEM_ISPERSISTENT = 0x40,SCRIPTITEM_CODEONLY = 0x200,SCRIPTITEM_NOCODE = 0x400,SCRIPTITEM_ALL_FLAGS = 0x64E,};
enum MACRO_SCRIPTPROC {SCRIPTPROC_ISEXPRESSION = 0x20,SCRIPTPROC_HOSTMANAGESSOURCE = 0x80,SCRIPTPROC_IMPLICIT_THIS = 0x100,SCRIPTPROC_IMPLICIT_PARENTS = 0x200,SCRIPTPROC_ALL_FLAGS = 0x3A0,};
enum MACRO_SCRIPTPROP {SCRIPTPROP_NAME = 0x0,SCRIPTPROP_MAJORVERSION = 0x1,SCRIPTPROP_MINORVERSION = 0x2,SCRIPTPROP_BUILDNUMBER = 0x3,SCRIPTPROP_DELAYEDEVENTSINKING = 0x1000,SCRIPTPROP_CATCHEXCEPTION = 0x1001,SCRIPTPROP_DEBUGGER = 0x1100,SCRIPTPROP_JITDEBUG = 0x1101,SCRIPTPROP_HACK_FIBERSUPPORT = 0x70000000,SCRIPTPROP_HACK_TRIDENTEVENTSINK = 0x70000001,};
enum MACRO_SCRIPTSTAT {SCRIPTSTAT_STATEMENT_COUNT = 1,SCRIPTSTAT_INSTRUCTION_COUNT = 2,SCRIPTSTAT_INTSTRUCTION_TIME = 3,SCRIPTSTAT_TOTAL_TIME = 4,};
enum MACRO_SCRIPTTEXT {SCRIPTTEXT_DELAYEXECUTION = 0x1,SCRIPTTEXT_ISVISIBLE = 0x2,SCRIPTTEXT_ISEXPRESSION = 0x20,SCRIPTTEXT_ISPERSISTENT = 0x40,SCRIPTTEXT_HOSTMANAGESSOURCE = 0x80,SCRIPTTEXT_ALL_FLAGS = 0xE3,};
enum MACRO_SCS_SETSTR {SCS_SETSTR = 9,SCS_CHANGEATTR = 18,SCS_CHANGECLAUSE = 36,SCS_SETRECONVERTSTRING = 65536,SCS_QUERYRECONVERTSTRING = 131072,};
enum MACRO_SDP_ATTRIB {SDP_ATTRIB_SDP_VERSION_NUMBER_LIST = 0x200,SDP_ATTRIB_SDP_DATABASE_STATE = 0x201,SDP_ATTRIB_BROWSE_GROUP_ID = 0x200,SDP_ATTRIB_CORDLESS_EXTERNAL_NETWORK = 0x301,SDP_ATTRIB_FAX_CLASS_1_SUPPORT = 0x302,SDP_ATTRIB_FAX_CLASS_2_0_SUPPORT = 0x303,SDP_ATTRIB_FAX_CLASS_2_SUPPORT = 0x304,SDP_ATTRIB_FAX_AUDIO_FEEDBACK_SUPPORT = 0x305,SDP_ATTRIB_HEADSET_REMOTE_AUDIO_VOLUME_CONTROL = 0x302,SDP_ATTRIB_LAN_LPSUBNET = 0x200,SDP_ATTRIB_OBJECT_PUSH_SUPPORTED_FORMATS_LIST = 0x303,SDP_ATTRIB_SYNCH_SUPPORTED_DATA_STORES_LIST = 0x301,SDP_ATTRIB_SERVICE_VERSION = 0x300,SDP_PROTOCOL_UUID16 = 0x1,};
enum MACRO_SDP_SEARCH {SDP_SEARCH_LOCAL = 0x1,SDP_SEARCH_CACHED = 0x2,};
enum MACRO_SERVICE_UI {SERVICE_UI_ALWAYS = 0x2,SERVICE_UI_ALLOWED = 0x10,};
enum MACRO_SHGFI_PIDL {SHGFI_PIDL = 0x8,};
enum MACRO_SIMPLEBLOB {SIMPLEBLOB = 0x1,PUBLICKEYBLOB = 0x6,};
enum MACRO_SIO_RCVALL {SIO_RCVALL = -1744830463,SIO_RCVALL_MCAST = -1744830462,SIO_RCVALL_IGMPMCAST = -1744830461,SIO_KEEPALIVE_VALS = -1744830460,SIO_ABSORB_RTRALERT = -1744830459,SIO_UCAST_IF = -1744830458,SIO_LIMIT_BROADCASTS = -1744830457,SIO_INDEX_BIND = -1744830456,SIO_INDEX_MCASTIF = -1744830455,SIO_INDEX_ADD_MCAST = -1744830454,SIO_INDEX_DEL_MCAST = -1744830453,};
enum MACRO_SIP_STATUS {SIP_STATUS_UNAVAILABLE = 0,SIP_STATUS_AVAILABLE = 1,};
enum MACRO_SOL_RFCOMM {SOL_RFCOMM = 0x3,SOL_BTHTDI = 0x100,SOL_SDP = 0x101,};
enum MACRO_SO_SSL_GET {SO_SSL_GET_CAPABILITIES = 1349713921,SO_SSL_SET_FLAGS = -1871511550,SO_SSL_GET_FLAGS = 1349713922,SO_SSL_SET_PROTOCOLS = -1871511549,SO_SSL_GET_PROTOCOLS = 1349713923,SO_SSL_SET_CIPHERS = -1871511548,SO_SSL_GET_CIPHERS = -797769724,SO_SSL_SET_CLIENT_OPTS = -1871511547,SO_SSL_GET_CLIENT_OPTS = 1349713925,SO_SSL_SET_SERVER_OPTS = -1871511546,SO_SSL_GET_SERVER_OPTS = 1349713926,SO_SSL_SET_CLIENT_AUTH_OPTS = -1871511545,SO_SSL_GET_CLIENT_AUTH_OPTS = 1349713927,SO_SSL_SET_VALIDATE_CERT_HOOK = -1871511544,SO_SSL_GET_VALIDATE_CERT_HOOK = 1349713928,SO_SSL_SET_AUTH_REQUEST_HOOK = -1871511543,SO_SSL_GET_AUTH_REQUEST_HOOK = 1349713929,SO_SSL_SET_KEY_EXCH_HOOK = -1871511542,SO_SSL_GET_KEY_EXCH_HOOK = 1349713930,SO_SSL_SET_SIGNATURE_HOOK = -1871511541,SO_SSL_GET_SIGNATURE_HOOK = 1349713931,SO_SSL_PERFORM_HANDSHAKE = 275972109,SO_SSL_GET_CONNECTION_INFO = 1349713934,};
enum MACRO_SUBMITFLAG {SUBMITFLAG_LOCKED = 0x1,SUBMITFLAG_PREPROCESS = 0x2,};
enum MACRO_SW_INVALID {SW_INVALID = 16,SW_ZERODIVIDE = 8,SW_OVERFLOW = 4,SW_UNDERFLOW = 2,SW_INEXACT = 1,SW_UNEMULATED = 64,SW_SQRTNEG = 128,SW_STACKOVERFLOW = 512,SW_STACKUNDERFLOW = 1024,};
enum MACRO_TABLE_SORT {TABLE_SORT_ASCEND = 0x0,TABLE_SORT_DESCEND = 0x1,TABLE_SORT_COMBINE = 0x2,};
enum MACRO_TC_NONCONF {TC_NONCONF_BORROW = 0,TC_NONCONF_SHAPE = 1,TC_NONCONF_DISCARD = 2,TC_NONCONF_BORROW_PLUS = 3,};
enum MACRO_TIME_SLICE {TIME_SLICE = 25,};
enum MACRO_TIME_VALID {TIME_VALID_OID_GET_CTL = 1,TIME_VALID_OID_GET_CRL = 2,TIME_VALID_OID_GET_CRL_FROM_CERT = 3,TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT = 4,TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL = 5,TIME_VALID_OID_FLUSH_CTL = 1,TIME_VALID_OID_FLUSH_CRL = 2,TIME_VALID_OID_FLUSH_CRL_FROM_CERT = 3,TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT = 4,TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL = 5,};
enum MACRO_TRUSTERROR {TRUSTERROR_STEP_WVTPARAMS = 0,TRUSTERROR_STEP_FILEIO = 2,TRUSTERROR_STEP_SIP = 3,TRUSTERROR_STEP_SIPSUBJINFO = 5,TRUSTERROR_STEP_CATALOGFILE = 6,TRUSTERROR_STEP_CERTSTORE = 7,TRUSTERROR_STEP_MESSAGE = 8,TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9,TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10,TRUSTERROR_STEP_MSG_INNERCNT = 11,TRUSTERROR_STEP_MSG_STORE = 12,TRUSTERROR_STEP_MSG_SIGNERINFO = 13,TRUSTERROR_STEP_MSG_SIGNERCERT = 14,TRUSTERROR_STEP_MSG_CERTCHAIN = 15,TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16,TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17,TRUSTERROR_STEP_VERIFY_MSGHASH = 18,TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19,TRUSTERROR_STEP_FINAL_WVTINIT = 30,TRUSTERROR_STEP_FINAL_INITPROV = 31,TRUSTERROR_STEP_FINAL_OBJPROV = 32,TRUSTERROR_STEP_FINAL_SIGPROV = 33,TRUSTERROR_STEP_FINAL_CERTPROV = 34,TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35,TRUSTERROR_STEP_FINAL_POLICYPROV = 36,TRUSTERROR_STEP_FINAL_UIPROV = 37,TRUSTERROR_MAX_STEPS = 38,};
enum MACRO_UI_CURRENT {UI_CURRENT_PROVIDER_FIRST = 0x4,};
enum MACRO_UI_SERVICE {UI_SERVICE = 0x2,};
enum MACRO_URL_ATTACH {URL_ATTACH_INTO_MIXED = 0x1,URL_ATTACH_GENERATE_CID = 0x2,URL_ATTACH_SET_CNTTYPE = 0x4,URL_RESOLVE_RENDERED = 0x1,URL_RESULVE_NO_BASE = 0x2,};
enum MACRO_WAB_IGNORE {WAB_IGNORE_PROFILES = 0x800000,};
enum MACRO_WAVEFORMAT {WAVEFORMAT_CANOPUS_ATRAC = 0x63,};
enum MACRO_WCESHELLFE {WCESHELLFE_MODULES_CONTROL = 1,WCESHELLFE_MODULES_CTLPNL = 1,WCESHELLFE_MODULES_CPLMAIN = 1,WCESHELLFE_MODULES_ADVBACKLIGHT = 1,WCESHELLFE_MODULES_INTLL = 1,};
enum MACRO_WEBINSTALL {WEBINSTALL_DIFFERENTMACHINE = 3,};
enum MACRO_WINDOWS_AF {WINDOWS_AF_BT = 32,};
enum MACRO_WM_REFRESH {WM_REFRESH_DMSDATA = 0xA001,};
enum MACRO_WT_CURRENT {WT_CURRENT_VERSION = 0x200,};
enum MACRO_X509_MULTI {X509_MULTI_BYTE_UINT = 38,X509_DSS_PUBLICKEY = 38,X509_DSS_PARAMETERS = 39,X509_DSS_SIGNATURE = 40,};
enum MACRO_X942_OTHER {X942_OTHER_INFO = 52,};
enum MACRO___CARDSERV {__CARDSERV_H__ = 1,};
enum MACRO___REQUIRED {__REQUIRED_RPCNDR_H_VERSION__ = 440,};
enum MACRO___RPCPROXY {__RPCPROXY_H_VERSION__ = 450,};
enum MACRO_iTRUECOLOR {iTRUECOLOR = 16,};
typedef struct _MIB_IPFORWARDROW MIB_IPFORWARDROW;
typedef struct _MIB_OPAQUE_QUERY MIB_OPAQUE_QUERY;
typedef struct _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
typedef struct _NDIS_802_11_SSID NDIS_802_11_SSID;
typedef struct _NDIS_802_11_TEST NDIS_802_11_TEST;
typedef struct _NDIS_BPC_DEVICES NDIS_BPC_DEVICES;
typedef struct _NDIS_TAPI_ACCEPT NDIS_TAPI_ACCEPT;
typedef struct _NDIS_TAPI_ANSWER NDIS_TAPI_ANSWER;
typedef struct _NDIS_TAPI_GET_ID NDIS_TAPI_GET_ID;
typedef struct tagNMDATETIMECHANGE NMDATETIMECHANGE;
typedef struct _tagNotificationItem NOTIFICATIONITEM;
typedef struct tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;
typedef struct _A5A2C297D512B29747AD9A814A819610 NT_CONSOLE_PROPS;
typedef struct tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
typedef int OLE_XSIZE_PIXELS;
typedef int OLE_YSIZE_PIXELS;
typedef struct oligsmwaveformat_tag OLIGSMWAVEFORMAT;
typedef struct olioprwaveformat_tag OLIOPRWAVEFORMAT;
typedef struct olisbcwaveformat_tag OLISBCWAVEFORMAT;
typedef struct tACMFILTERCHOOSE *PACMFILTERCHOOSE;
typedef struct tACMFORMATCHOOSE *PACMFORMATCHOOSE;
typedef struct tACMSTREAMHEADER *PACMSTREAMHEADER;
typedef struct _BTH_REMOTE_NAME *PBTH_REMOTE_NAME;
typedef struct _CARD_DATA_PARMS *PCARD_DATA_PARMS;
typedef struct __CEL_EVENT_CLOSE *PCEL_EVENT_CLOSE;
typedef struct __CEL_EVENT_PULSE *PCEL_EVENT_PULSE;
typedef struct __CEL_EVENT_RESET *PCEL_EVENT_RESET;
typedef struct __CEL_HEAP_CREATE *PCEL_HEAP_CREATE;
typedef struct __CEL_MODULE_FREE *PCEL_MODULE_FREE;
typedef struct __CEL_MODULE_LOAD *PCEL_MODULE_LOAD;
typedef struct __CEL_MUTEX_CLOSE *PCEL_MUTEX_CLOSE;
typedef struct __CEL_SEM_RELEASE *PCEL_SEM_RELEASE;
typedef struct __CEL_SYSTEM_PAGE *PCEL_SYSTEM_PAGE;
typedef struct _CENOTIFYREQUEST *PCENOTIFYREQUEST;
typedef struct _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS *PCERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE *PCERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME *PCERT_OTHER_NAME;
typedef struct _PCI_PHYSICAL_LOC PCI_PHYSICAL_LOC;
typedef struct _CMC_STATUS_INFO *PCMC_STATUS_INFO;
typedef struct _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT *PCOLORADJUSTMENT;
typedef struct tagCOMPOSITIONFORM *PCOMPOSITIONFORM;
typedef IConnectionPoint *PCONNECTIONPOINT;
typedef struct _CO_TAPI_CM_CAPS *PCO_TAPI_CM_CAPS;
typedef struct _CREDUI_BALLOONA *PCREDUI_BALLOONA;
typedef struct _CREDUI_BALLOONW *PCREDUI_BALLOONW;
typedef struct _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;
typedef struct IDirect3DDevice8 *PDIRECT3DDEVICE8;
typedef struct IDirect3DVolume8 *PDIRECT3DVOLUME8;
typedef struct _DOT11_AUTH_ALGO *PDOT11_AUTH_ALGO;
typedef struct _DOT11_AUTH_LIST *PDOT11_AUTH_LIST;
typedef struct _DOT11_UPDATE_IE *PDOT11_UPDATE_IE;
typedef struct DRIVER_VER_INFO_ *PDRIVER_VER_INFO;
typedef struct DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
typedef IEnumConnections *PENUMCONNECTIONS;
typedef IFileSinkFilter2 *PFILESINKFILTER2;
typedef void (*PFN_CPD_MEM_FREE)(void *pvMem2Free);
typedef struct tagHH_SET_INFOTYPE *PHH_SET_INFOTYPE;
typedef struct phoneextensionid_tag PHONEEXTENSIONID;
typedef struct _HTTP_FILTER_LOG *PHTTP_FILTER_LOG;
typedef IAMExtTransport *PIAMEXTTRANSPORT;
typedef struct icmp_echo_reply *PICMP_ECHO_REPLY;
typedef struct tagIMECHARPOSITION *PIMECHARPOSITION;
typedef struct _INTERNET_COOKIE *PINTERNET_COOKIE;
typedef struct _IO_STATUS_BLOCK *PIO_STATUS_BLOCK;
typedef struct _IP_ADAPTER_INFO *PIP_ADAPTER_INFO;
typedef struct _LINE_DEV_STATUS *PLINE_DEV_STATUS;
typedef struct _LMEM_ALLOC_INFO *PLMEM_ALLOC_INFO;
typedef struct _MIBICMPSTATS_EX *PMIBICMPSTATS_EX;
typedef struct _A2D3C6DF54C31D821ABE78046EA78F8E *PMIB_BOUNDARYROW;
typedef struct _MIB_IPADDRTABLE *PMIB_IPADDRTABLE;
typedef struct _MIB_IPDESTTABLE *PMIB_IPDESTTABLE;
typedef struct _MIB_IPMCAST_MFE *PMIB_IPMCAST_MFE;
typedef struct _MIB_IPMCAST_OIF *PMIB_IPMCAST_OIF;
typedef struct _MIB_OPAQUE_INFO *PMIB_OPAQUE_INFO;
typedef struct MSGQUEUEOPTIONS_OS *PMSGQUEUEOPTIONS;
typedef struct _NDISUIO_SET_OID *PNDISUIO_SET_OID;
typedef struct _NDIS_802_11_KEY *PNDIS_802_11_KEY;
typedef struct _NDIS_802_11_WEP *PNDIS_802_11_WEP;
typedef struct NDIS_BPC_COMMIT *PNDIS_BPC_COMMIT;
typedef struct NDIS_BPC_STATUS *PNDIS_BPC_STATUS;
typedef struct _NDIS_TAPI_CLOSE *PNDIS_TAPI_CLOSE;
typedef struct _NDIS_TAPI_EVENT *PNDIS_TAPI_EVENT;
typedef struct _NDIS_WLAN_BSSID *PNDIS_WLAN_BSSID;
typedef struct _NETWORK_ADDRESS *PNETWORK_ADDRESS;
typedef struct _NOTIFYICONDATAA *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW *PNOTIFYICONDATAW;
typedef struct _PACKEDEVENTINFO *PPACKEDEVENTINFO;
typedef struct _PCI_SLOT_NUMBER *PPCI_SLOT_NUMBER;
typedef struct _POWER_BROADCAST *PPOWER_BROADCAST;
typedef struct tagRECONVERTSTRING *PRECONVERTSTRING;
typedef IReferenceClock2 *PREFERENCECLOCK2;
typedef struct _PROPSHEETHEADERA PROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW PROPSHEETHEADERW;
typedef struct _PROV_ENUMALGS_EX PROV_ENUMALGS_EX;
typedef struct _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;
typedef struct _SECURITY_STRING *PSECURITY_STRING;
typedef struct _SORTORDERSPECEX *PSORTORDERSPECEX;
typedef struct _PST_ACCESSCLAUSE PST_ACCESSCLAUSE;
typedef struct _PST_PROVIDERINFO PST_PROVIDERINFO;
typedef struct _TRUSTEE_ACCESSA *PTRUSTEE_ACCESSA;
typedef struct _TRUSTEE_ACCESSW *PTRUSTEE_ACCESSW;
typedef struct _VIDEOPARAMETERS *PVIDEOPARAMETERS;
typedef struct _VTableProvStruc *PVTableProvStruc;
typedef struct _WINDOWS_IAS_SET *PWINDOWS_IAS_SET;
typedef struct _WSANSClassInfoA *PWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *PWSANSCLASSINFOW;
typedef struct _X509Certificate *PX509Certificate;
typedef struct _QOS_SHAPING_RATE QOS_SHAPING_RATE;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _3EC5757393EE7828D79CED73ACE876F0 RPC_IF_ID_VECTOR;
typedef struct _RPC_SECURITY_QOS RPC_SECURITY_QOS;
typedef struct _AD47B7B6770F26FF00FF8EF46A9765CE RPC_STATS_VECTOR;
enum RTC_AUDIO_DEVICE {RTCAD_SPEAKER = 0x0,RTCAD_MICROPHONE = 0x1,};
enum RTC_PRIVACY_MODE {RTCPM_BLOCK_LIST_EXCLUDED = 0x0,RTCPM_ALLOW_LIST_ONLY = 0x1,};
enum RTC_PROVIDER_URI {RTCPU_URIHOMEPAGE = 0x0,RTCPU_URIHELPDESK = 0x1,RTCPU_URIPERSONALACCOUNT = 0x2,RTCPU_URIDISPLAYDURINGCALL = 0x3,RTCPU_URIDISPLAYDURINGIDLE = 0x4,};
enum RTC_SESSION_TYPE {RTCST_PC_TO_PC = 0x0,RTCST_PC_TO_PHONE = 0x1,RTCST_PHONE_TO_PHONE = 0x2,RTCST_IM = 0x3,RTCST_MULTIPARTY_IM = 0x4,RTCST_APPLICATION = 0x5,};
enum RTC_VIDEO_DEVICE {RTCVD_RECEIVE = 0x0,RTCVD_PREVIEW = 0x1,};
enum RefreshConstants {REFRESH_NORMAL = 0x0,REFRESH_IFEXPIRED = 0x1,REFRESH_COMPLETELY = 0x3,};
typedef struct tagRemHMETAFILEPICT RemHMETAFILEPICT;
typedef struct _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
typedef struct _SCARD_IO_REQUEST SCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 SCARD_T0_COMMAND;
typedef struct _D26D25374C75FEF3AD181CCFA77BD37F SCARD_T0_REQUEST;
typedef struct _8B9777916333A4B8A3A60FA8F93F002E SCARD_T1_REQUEST;
enum SDP_SPECIFICTYPE {SDP_ST_NONE = 0x0,SDP_ST_UINT8 = 0x10,SDP_ST_UINT16 = 0x110,SDP_ST_UINT32 = 0x210,SDP_ST_UINT64 = 0x310,SDP_ST_UINT128 = 0x410,SDP_ST_INT8 = 0x20,SDP_ST_INT16 = 0x120,SDP_ST_INT32 = 0x220,SDP_ST_INT64 = 0x320,SDP_ST_INT128 = 0x420,SDP_ST_UUID16 = 0x130,SDP_ST_UUID32 = 0x230,SDP_ST_UUID128 = 0x430,};
typedef struct _ShellAppCategory SHELLAPPCATEGORY;
typedef struct _SHELLEXECUTEINFO SHELLEXECUTEINFO;
typedef struct sockaddr_storage SOCKADDR_STORAGE;
typedef struct sonarcwaveformat_tag SONARCWAVEFORMAT;
typedef struct _SPC_SP_OPUS_INFO SPC_SP_OPUS_INFO;
typedef struct _SSLSIGNATUREHOOK SSLSIGNATUREHOOK;
typedef struct _SSizeRestriction SSizeRestriction;
typedef struct _tagSubscriptionInfo SUBSCRIPTIONINFO;
enum SUBSCRIPTIONTYPE {SUBSTYPE_URL = 0x0,SUBSTYPE_CHANNEL = 0x1,SUBSTYPE_DESKTOPURL = 0x2,SUBSTYPE_EXTERNAL = 0x3,SUBSTYPE_DESKTOPCHANNEL = 0x4,};
typedef struct _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
typedef struct _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
struct SdpNodeContainer;
typedef struct _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
struct TIMESetAnimation;
typedef struct _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS TOKEN_STATISTICS;
struct UPnPDeviceFinder;
typedef struct tagVIDEOINFOHEADER2 VIDEOINFOHEADER2;
typedef struct wavefilter_volume_tag VOLUMEWAVEFILTER;
typedef struct tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
struct VoIPCallerInfoDB;
enum VoIPProgressTone {e_vptInvalid = 0x0,e_vptDial = 0x1,e_vptStutter = 0x2,e_vptOffHookWarning = 0x3,e_vptConfirmation = 0x4,e_vptMessageWaiting = 0x5,e_vptRingback = 0x6,e_vptCallWaiting = 0x7,e_vptReorder = 0x8,e_vptCongestion = 0x9,e_vptClientBusy = 0xA,e_vptNetworkBusy = 0xB,};
typedef struct _WIN32_FIND_DATAA WIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW WIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS WSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN WSAPROTOCOLCHAIN;
struct XMLSchemaCache26;
struct XMLSchemaCache30;
enum _CARET_DIRECTION {CARET_DIRECTION_INDETERMINATE = 0x0,CARET_DIRECTION_SAME = 0x1,CARET_DIRECTION_BACKWARD = 0x2,CARET_DIRECTION_FORWARD = 0x3,CARET_DIRECTION_Max = 0x7FFFFFFF,};
enum _D3DRESOURCETYPE {D3DRTYPE_SURFACE = 0x1,D3DRTYPE_VOLUME = 0x2,D3DRTYPE_TEXTURE = 0x3,D3DRTYPE_VOLUMETEXTURE = 0x4,D3DRTYPE_CUBETEXTURE = 0x5,D3DRTYPE_VERTEXBUFFER = 0x6,D3DRTYPE_INDEXBUFFER = 0x7,D3DRTYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _DISPLAY_GRAVITY {DISPLAY_GRAVITY_PreviousLine = 0x1,DISPLAY_GRAVITY_NextLine = 0x2,DISPLAY_GRAVITY_Max = 0x7FFFFFFF,};
enum _DOT11_SCAN_TYPE {dot11_scan_type_active = 0x1,dot11_scan_type_passive = 0x2,};
enum _DOT11_TEMP_TYPE {dot11_temp_type_unknown = 0x0,dot11_temp_type_1 = 0x1,dot11_temp_type_2 = 0x2,};
enum _HTMLBorderStyle {HTMLBorderStyleNormal = 0x0,HTMLBorderStyleRaised = 0x100,HTMLBorderStyleSunken = 0x200,HTMLBorderStylecombined = 0x300,HTMLBorderStyleStatic = 0x20000,HTMLBorderStyle_Max = 0x7FFFFFFF,};
enum _HTMLCaptionFlag {HTMLCaptionFlagNo = 0x0,HTMLCaptionFlagYes = 0xC00000,HTMLCaptionFlag_Max = 0x7FFFFFFF,};
enum _HTMLSysMenuFlag {HTMLSysMenuFlagNo = 0x0,HTMLSysMenuFlagYes = 0x80000,HTMLSysMenuFlag_Max = 0x7FFFFFFF,};
enum _HTMLWindowState {HTMLWindowStateNormal = 0x1,HTMLWindowStateMaximize = 0x3,HTMLWindowStateMinimize = 0x6,HTMLWindowState_Max = 0x7FFFFFFF,};
enum _INSTALLSPECTYPE {APPNAME = 0x1,FILEEXT = 0x2,PROGID = 0x3,COMCLASS = 0x4,};
enum _KDPC_IMPORTANCE {LowImportance = 0x0,MediumImportance = 0x1,HighImportance = 0x2,};
enum _MOVEUNIT_ACTION {MOVEUNIT_PREVCHAR = 0x0,MOVEUNIT_NEXTCHAR = 0x1,MOVEUNIT_PREVCLUSTERBEGIN = 0x2,MOVEUNIT_NEXTCLUSTERBEGIN = 0x3,MOVEUNIT_PREVCLUSTEREND = 0x4,MOVEUNIT_NEXTCLUSTEREND = 0x5,MOVEUNIT_PREVWORDBEGIN = 0x6,MOVEUNIT_NEXTWORDBEGIN = 0x7,MOVEUNIT_PREVWORDEND = 0x8,MOVEUNIT_NEXTWORDEND = 0x9,MOVEUNIT_PREVPROOFWORD = 0xA,MOVEUNIT_NEXTPROOFWORD = 0xB,MOVEUNIT_NEXTURLBEGIN = 0xC,MOVEUNIT_PREVURLBEGIN = 0xD,MOVEUNIT_NEXTURLEND = 0xE,MOVEUNIT_PREVURLEND = 0xF,MOVEUNIT_PREVSENTENCE = 0x10,MOVEUNIT_NEXTSENTENCE = 0x11,MOVEUNIT_PREVBLOCK = 0x12,MOVEUNIT_NEXTBLOCK = 0x13,MOVEUNIT_ACTION_Max = 0x7FFFFFFF,};
enum _POINTER_GRAVITY {POINTER_GRAVITY_Left = 0x0,POINTER_GRAVITY_Right = 0x1,POINTER_GRAVITY_Max = 0x7FFFFFFF,};
enum _RPC_ASYNC_EVENT {RpcCallComplete = 0x0,RpcSendComplete = 0x1,RpcReceiveComplete = 0x2,};
struct _RTL_SPLAY_LINKS {struct _RTL_SPLAY_LINKS *Parent;struct _RTL_SPLAY_LINKS *LeftChild;struct _RTL_SPLAY_LINKS *RightChild;};
struct _SECURITY_STRING {unsigned short Length;unsigned short MaximumLength;unsigned short *Buffer;};
enum _styleDataRepeat {styleDataRepeatNone = 0x0,styleDataRepeatInner = 0x1,styleDataRepeat_Max = 0x7FFFFFFF,};
enum _styleFontWeight {styleFontWeightNotSet = 0x0,styleFontWeight100 = 0x1,styleFontWeight200 = 0x2,styleFontWeight300 = 0x3,styleFontWeight400 = 0x4,styleFontWeight500 = 0x5,styleFontWeight600 = 0x6,styleFontWeight700 = 0x7,styleFontWeight800 = 0x8,styleFontWeight900 = 0x9,styleFontWeightNormal = 0xA,styleFontWeightBold = 0xB,styleFontWeightBolder = 0xC,styleFontWeightLighter = 0xD,styleFontWeight_Max = 0x7FFFFFFF,};
enum _styleLayoutFlow {styleLayoutFlowHorizontal = 0x0,styleLayoutFlowVerticalIdeographic = 0x1,styleLayoutFlowNotSet = 0x2,styleLayoutFlow_Max = 0x7FFFFFFF,};
enum _styleStyleFloat {styleStyleFloatNotSet = 0x0,styleStyleFloatLeft = 0x1,styleStyleFloatRight = 0x2,styleStyleFloatNone = 0x3,styleStyleFloat_Max = 0x7FFFFFFF,};
enum _styleTextEffect {styleTextEffectNone = 0x0,styleTextEffectEmboss = 0x1,styleTextEffectEngrave = 0x2,styleTextEffectOutline = 0x3,styleTextEffect_Max = 0x7FFFFFFF,};
enum _styleVisibility {styleVisibilityNotSet = 0x0,styleVisibilityInherit = 0x1,styleVisibilityVisible = 0x2,styleVisibilityHidden = 0x3,styleVisibility_Max = 0x7FFFFFFF,};
enum _styleWhiteSpace {styleWhiteSpaceNotSet = 0x0,styleWhiteSpaceNormal = 0x1,styleWhiteSpacePre = 0x2,styleWhiteSpaceNowrap = 0x3,styleWhiteSpace_Max = 0x7FFFFFFF,};
enum _tagACENUMOPTION {ACEO_NONE = 0x0,ACEO_MOSTRECENTFIRST = 0x1,ACEO_FIRSTUNUSED = 0x10000,};
enum _tagAppInfoFlags {AIM_DISPLAYNAME = 0x1,AIM_VERSION = 0x2,AIM_PUBLISHER = 0x4,AIM_PRODUCTID = 0x8,AIM_REGISTEREDOWNER = 0x10,AIM_REGISTEREDCOMPANY = 0x20,AIM_LANGUAGE = 0x40,AIM_SUPPORTURL = 0x80,AIM_SUPPORTTELEPHONE = 0x100,AIM_HELPLINK = 0x200,AIM_INSTALLLOCATION = 0x400,AIM_INSTALLSOURCE = 0x800,AIM_INSTALLDATE = 0x1000,AIM_CONTACT = 0x4000,AIM_COMMENTS = 0x8000,AIM_IMAGE = 0x20000,AIM_READMEURL = 0x40000,AIM_UPDATEINFOURL = 0x80000,};
enum _tagNOTFSINKMODE {NM_PERMANENT = 0x8,NM_ACCEPT_DIRECTED_NOTIFICATION = 0x10,};
struct sockaddr_storage {short ss_family;char __ss_pad1[6];long long __ss_align;char __ss_pad2[112];};
enum tagACTIVATEFLAGS {ACTIVATE_WINDOWLESS = 0x1,};
enum tagADDRESSFORMAT {AFT_DISPLAY_FRIENDLY = 0x0,AFT_DISPLAY_EMAIL = 0x1,AFT_DISPLAY_BOTH = 0x2,AFT_RFC822_DECODED = 0x3,AFT_RFC822_ENCODED = 0x4,AFT_RFC822_TRANSMIT = 0x5,};
enum tagARTICLEIDTYPE {AID_MSGID = 0x0,AID_ARTICLENUM = 0x1,};
enum tagCSETAPPLYTYPE {CSET_APPLY_UNTAGGED = 0x0,CSET_APPLY_ALL = 0x1,CSET_APPLY_TAG_ALL = 0x2,};
enum tagDEFAULT_PAGES {DPP_ADVANCED = 0x1,};
enum tagDOCHOSTUIFLAG {DOCHOSTUIFLAG_DIALOG = 0x1,DOCHOSTUIFLAG_DISABLE_HELP_MENU = 0x2,DOCHOSTUIFLAG_NO3DBORDER = 0x4,DOCHOSTUIFLAG_SCROLL_NO = 0x8,DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 0x10,DOCHOSTUIFLAG_OPENNEWWIN = 0x20,DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 0x40,DOCHOSTUIFLAG_FLAT_SCROLLBAR = 0x80,DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 0x100,DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 0x200,DOCHOSTUIFLAG_OVERRIDEBEHAVIORFACTORY = 0x400,DOCHOSTUIFLAG_CODEPAGELINKEDFONTS = 0x800,DOCHOSTUIFLAG_URL_ENCODING_DISABLE_UTF8 = 0x1000,DOCHOSTUIFLAG_URL_ENCODING_ENABLE_UTF8 = 0x2000,DOCHOSTUIFLAG_ENABLE_FORMS_AUTOCOMPLETE = 0x4000,DOCHOSTUIFLAG_ENABLE_INPLACE_NAVIGATION = 0x10000,DOCHOSTUIFLAG_IME_ENABLE_RECONVERSION = 0x20000,DOCHOSTUIFLAG_THEME = 0x40000,DOCHOSTUIFLAG_NOTHEME = 0x80000,DOCHOSTUIFLAG_NOPICS = 0x100000,DOCHOSTUIFLAG_NO3DOUTERBORDER = 0x200000,DOCHOSTUIFLAG_DISABLE_EDIT_NS_FIXUP = 0x400000,DOCHOSTUIFLAG_LOCAL_MACHINE_ACCESS_CHECK = 0x800000,DOCHOSTUIFLAG_DISABLE_UNTRUSTEDPROTOCOL = 0x1000000,};
enum tagDOCHOSTUITYPE {DOCHOSTUITYPE_BROWSE = 0x0,DOCHOSTUITYPE_AUTHOR = 0x1,};
enum tagDVD_DISC_SIDE {DVD_SIDE_A = 0x1,DVD_SIDE_B = 0x2,};
enum tagDVD_FRAMERATE {DVD_FPS_25 = 0x1,DVD_FPS_30NonDrop = 0x3,};
struct tagDVD_MUA_Coeff {double log2_alpha;double log2_beta;};
enum tagIFILTER_FLAGS {IFILTER_FLAGS_OLE_PROPERTIES = 0x1,};
enum tagMIMEPROPFLAGS {MPF_INETCSET = 0x1,MPF_RFC1522 = 0x2,MPF_ADDRESS = 0x4,MPF_HASPARAMS = 0x8,MPF_MIME = 0x10,MPF_READONLY = 0x20,};
typedef struct tagPROPVARIANT tagMQPROPVARIANT;
enum tagNETCON_STATUS {NCS_DISCONNECTED = 0x0,NCS_CONNECTING = 0x1,NCS_CONNECTED = 0x2,NCS_DISCONNECTING = 0x3,NCS_HARDWARE_NOT_PRESENT = 0x4,NCS_HARDWARE_DISABLED = 0x5,NCS_HARDWARE_MALFUNCTION = 0x6,NCS_MEDIA_DISCONNECTED = 0x7,};
enum tagOLEGETMONIKER {OLEGETMONIKER_ONLYIFTHERE = 0x1,OLEGETMONIKER_FORCEASSIGN = 0x2,OLEGETMONIKER_UNASSIGN = 0x3,OLEGETMONIKER_TEMPFORUSER = 0x4,};
enum tagOLEVERBATTRIB {OLEVERBATTRIB_NEVERDIRTIES = 0x1,OLEVERBATTRIB_ONCONTAINERMENU = 0x2,};
enum tagUSERCLASSTYPE {USERCLASSTYPE_FULL = 0x1,USERCLASSTYPE_SHORT = 0x2,USERCLASSTYPE_APPNAME = 0x3,};
typedef struct _userHENHMETAFILE userHENHMETAFILE;
typedef struct _C0E9FF9F6B7B062E990DE9E300C0D00E AAL5_PARAMETERS;
enum ACCESS_MASKENUM {PERM_EXCLUSIVE = 0x200,PERM_READDESIGN = 0x400,PERM_WRITEDESIGN = 0x800,PERM_WITHGRANT = 0x1000,PERM_REFERENCE = 0x2000,PERM_CREATE = 0x4000,PERM_INSERT = 0x8000,PERM_DELETE = 0x10000,PERM_READCONTROL = 0x20000,PERM_WRITEPERMISSIONS = 0x40000,PERM_WRITEOWNER = 0x80000,PERM_MAXIMUM_ALLOWED = 0x2000000,PERM_ALL = 0x10000000,PERM_EXECUTE = 0x20000000,PERM_READ = 0x80000000,PERM_UPDATE = 0x40000000,PERM_DROP = 0x100,};
typedef struct tACMFILTERCHOOSE ACMFILTERCHOOSE;
typedef struct tACMFORMATCHOOSE ACMFORMATCHOOSE;
typedef struct tACMSTREAMHEADER ACMSTREAMHEADER;
typedef struct adpcmwaveformat_tag ADPCMWAVEFORMAT;
enum AMPlayListFlags {AMPLAYLIST_STARTINSCANMODE = 0x1,AMPLAYLIST_FORCEBANNER = 0x2,};
enum AM_MPEG2Profile {AM_MPEG2Profile_Simple = 0x1,AM_MPEG2Profile_Main = 0x2,AM_MPEG2Profile_SNRScalable = 0x3,AM_MPEG2Profile_SpatiallyScalable = 0x4,AM_MPEG2Profile_High = 0x5,};
typedef struct tagAnalogVideoInfo ANALOGVIDEOINFO;
typedef struct _APPCATEGORYINFO APPCATEGORYINFO;
typedef struct tagAPPEND_PROGRESS APPEND_PROGRESS;
typedef struct _avistreamheader AVISTREAMHEADER;
typedef struct _FB10B385A80E8C43E2FAF14F8CAB4B13 AVIStreamHeader;
typedef struct _BTH_REMOTE_NAME BTH_REMOTE_NAME;
typedef struct _CARD_DATA_PARMS CARD_DATA_PARMS;
typedef struct __CEL_EVENT_CLOSE CEL_EVENT_CLOSE;
typedef struct __CEL_EVENT_PULSE CEL_EVENT_PULSE;
typedef struct __CEL_EVENT_RESET CEL_EVENT_RESET;
typedef struct __CEL_HEAP_CREATE CEL_HEAP_CREATE;
typedef struct __CEL_MODULE_FREE CEL_MODULE_FREE;
typedef struct __CEL_MODULE_LOAD CEL_MODULE_LOAD;
typedef struct __CEL_MUTEX_CLOSE CEL_MUTEX_CLOSE;
typedef struct __CEL_SEM_RELEASE CEL_SEM_RELEASE;
typedef struct __CEL_SYSTEM_PAGE CEL_SYSTEM_PAGE;
typedef struct _CENOTIFYREQUEST CENOTIFYREQUEST;
typedef struct _CERT_CHAIN_PARA CERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS CERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE CERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME CERT_OTHER_NAME;
typedef struct _CMC_STATUS_INFO CMC_STATUS_INFO;
struct CMSHTMLFontLink;
typedef struct _CMS_DH_KEY_INFO CMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT COLORADJUSTMENT;
typedef struct _7C01EC4AA5C6496238BC9707060AB8CE COMPONENT_SIZES;
typedef struct tagCOMPOSITIONFORM COMPOSITIONFORM;
typedef struct _CO_TAPI_CM_CAPS CO_TAPI_CM_CAPS;
struct CPersistHistory;
typedef struct _CREDUI_BALLOONA CREDUI_BALLOONA;
typedef struct _CREDUI_BALLOONW CREDUI_BALLOONW;
typedef struct _CRYPT_ATTRIBUTE CRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO CRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB CRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY CRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH CTL_USAGE_MATCH;
enum ComponentAction {ActionNone = 0x0,ActionInstall = 0x1,ActionUninstall = 0x2,};
struct CompositeFolder;
typedef struct _D3DSURFACE_DESC D3DSURFACE_DESC;
enum DBCOMMANDOPENUM {DBOP_scalar_constant = 0x0,DBOP_DEFAULT = 0x1,DBOP_NULL = 0x2,DBOP_bookmark_name = 0x3,DBOP_catalog_name = 0x4,DBOP_column_name = 0x5,DBOP_schema_name = 0x6,DBOP_outall_name = 0x7,DBOP_qualifier_name = 0x8,DBOP_qualified_column_name = 0x9,DBOP_table_name = 0xA,DBOP_nested_table_name = 0xB,DBOP_nested_column_name = 0xC,DBOP_row = 0xD,DBOP_table = 0xE,DBOP_sort = 0xF,DBOP_distinct = 0x10,DBOP_distinct_order_preserving = 0x11,DBOP_alias = 0x12,DBOP_cross_join = 0x13,DBOP_union_join = 0x14,DBOP_inner_join = 0x15,DBOP_left_semi_join = 0x16,DBOP_right_semi_join = 0x17,DBOP_left_anti_semi_join = 0x18,DBOP_right_anti_semi_join = 0x19,DBOP_left_outer_join = 0x1A,DBOP_right_outer_join = 0x1B,DBOP_full_outer_join = 0x1C,DBOP_natural_join = 0x1D,DBOP_natural_left_outer_join = 0x1E,DBOP_natural_right_outer_join = 0x1F,DBOP_natural_full_outer_join = 0x20,DBOP_set_intersection = 0x21,DBOP_set_union = 0x22,DBOP_set_left_difference = 0x23,DBOP_set_right_difference = 0x24,DBOP_set_anti_difference = 0x25,DBOP_bag_intersection = 0x26,DBOP_bag_union = 0x27,DBOP_bag_left_difference = 0x28,DBOP_bag_right_difference = 0x29,DBOP_bag_anti_difference = 0x2A,DBOP_division = 0x2B,DBOP_relative_sampling = 0x2C,DBOP_absolute_sampling = 0x2D,DBOP_transitive_closure = 0x2E,DBOP_recursive_union = 0x2F,DBOP_aggregate = 0x30,DBOP_remote_table = 0x31,DBOP_select = 0x32,DBOP_order_preserving_select = 0x33,DBOP_project = 0x34,DBOP_project_order_preserving = 0x35,DBOP_top = 0x36,DBOP_top_percent = 0x37,DBOP_top_plus_ties = 0x38,DBOP_top_percent_plus_ties = 0x39,DBOP_rank = 0x3A,DBOP_rank_ties_equally = 0x3B,DBOP_rank_ties_equally_and_skip = 0x3C,DBOP_navigate = 0x3D,DBOP_nesting = 0x3E,DBOP_unnesting = 0x3F,DBOP_nested_apply = 0x40,DBOP_cross_tab = 0x41,DBOP_is_NULL = 0x42,DBOP_is_NOT_NULL = 0x43,DBOP_equal = 0x44,DBOP_not_equal = 0x45,DBOP_less = 0x46,DBOP_less_equal = 0x47,DBOP_greater = 0x48,DBOP_greater_equal = 0x49,DBOP_equal_all = 0x4A,DBOP_not_equal_all = 0x4B,DBOP_less_all = 0x4C,DBOP_less_equal_all = 0x4D,DBOP_greater_all = 0x4E,DBOP_greater_equal_all = 0x4F,DBOP_equal_any = 0x50,DBOP_not_equal_any = 0x51,DBOP_less_any = 0x52,DBOP_less_equal_any = 0x53,DBOP_greater_any = 0x54,DBOP_greater_equal_any = 0x55,DBOP_anybits = 0x56,DBOP_allbits = 0x57,DBOP_anybits_any = 0x58,DBOP_allbits_any = 0x59,DBOP_anybits_all = 0x5A,DBOP_allbits_all = 0x5B,DBOP_between = 0x5C,DBOP_between_unordered = 0x5D,DBOP_match = 0x5E,DBOP_match_unique = 0x5F,DBOP_match_partial = 0x60,DBOP_match_partial_unique = 0x61,DBOP_match_full = 0x62,DBOP_match_full_unique = 0x63,DBOP_scalar_parameter = 0x64,DBOP_scalar_function = 0x65,DBOP_plus = 0x66,DBOP_minus = 0x67,DBOP_times = 0x68,DBOP_over = 0x69,DBOP_div = 0x6A,DBOP_modulo = 0x6B,DBOP_power = 0x6C,DBOP_like = 0x6D,DBOP_sounds_like = 0x6E,DBOP_like_any = 0x6F,DBOP_like_all = 0x70,DBOP_is_INVALID = 0x71,DBOP_is_TRUE = 0x72,DBOP_is_FALSE = 0x73,DBOP_and = 0x74,DBOP_or = 0x75,DBOP_xor = 0x76,DBOP_equivalent = 0x77,DBOP_not = 0x78,DBOP_implies = 0x79,DBOP_overlaps = 0x7A,DBOP_case_condition = 0x7B,DBOP_case_value = 0x7C,DBOP_nullif = 0x7D,DBOP_cast = 0x7E,DBOP_coalesce = 0x7F,DBOP_position = 0x80,DBOP_extract = 0x81,DBOP_char_length = 0x82,DBOP_octet_length = 0x83,DBOP_bit_length = 0x84,DBOP_substring = 0x85,DBOP_upper = 0x86,DBOP_lower = 0x87,DBOP_trim = 0x88,DBOP_translate = 0x89,DBOP_convert = 0x8A,DBOP_string_concat = 0x8B,DBOP_current_date = 0x8C,DBOP_current_time = 0x8D,DBOP_current_timestamp = 0x8E,DBOP_content_select = 0x8F,DBOP_content = 0x90,DBOP_content_freetext = 0x91,DBOP_content_proximity = 0x92,DBOP_content_vector_or = 0x93,DBOP_delete = 0x94,DBOP_update = 0x95,DBOP_insert = 0x96,DBOP_min = 0x97,DBOP_max = 0x98,DBOP_count = 0x99,DBOP_sum = 0x9A,DBOP_avg = 0x9B,DBOP_any_sample = 0x9C,DBOP_stddev = 0x9D,DBOP_stddev_pop = 0x9E,DBOP_var = 0x9F,DBOP_var_pop = 0xA0,DBOP_first = 0xA1,DBOP_last = 0xA2,DBOP_in = 0xA3,DBOP_exists = 0xA4,DBOP_unique = 0xA5,DBOP_subset = 0xA6,DBOP_proper_subset = 0xA7,DBOP_superset = 0xA8,DBOP_proper_superset = 0xA9,DBOP_disjoint = 0xAA,DBOP_pass_through = 0xAB,DBOP_defined_by_GUID = 0xAC,DBOP_text_command = 0xAD,DBOP_SQL_select = 0xAE,DBOP_prior_command_tree = 0xAF,DBOP_add_columns = 0xB0,DBOP_column_list_anchor = 0xB1,DBOP_column_list_element = 0xB2,DBOP_command_list_anchor = 0xB3,DBOP_command_list_element = 0xB4,DBOP_from_list_anchor = 0xB5,DBOP_from_list_element = 0xB6,DBOP_project_list_anchor = 0xB7,DBOP_project_list_element = 0xB8,DBOP_row_list_anchor = 0xB9,DBOP_row_list_element = 0xBA,DBOP_scalar_list_anchor = 0xBB,DBOP_scalar_list_element = 0xBC,DBOP_set_list_anchor = 0xBD,DBOP_set_list_element = 0xBE,DBOP_sort_list_anchor = 0xBF,DBOP_sort_list_element = 0xC0,DBOP_alter_character_set = 0xC1,DBOP_alter_collation = 0xC2,DBOP_alter_domain = 0xC3,DBOP_alter_index = 0xC4,DBOP_alter_procedure = 0xC5,DBOP_alter_schema = 0xC6,DBOP_alter_table = 0xC7,DBOP_alter_trigger = 0xC8,DBOP_alter_view = 0xC9,DBOP_coldef_list_anchor = 0xCA,DBOP_coldef_list_element = 0xCB,DBOP_create_assertion = 0xCC,DBOP_create_character_set = 0xCD,DBOP_create_collation = 0xCE,DBOP_create_domain = 0xCF,DBOP_create_index = 0xD0,DBOP_create_procedure = 0xD1,DBOP_create_schema = 0xD2,DBOP_create_synonym = 0xD3,DBOP_create_table = 0xD4,DBOP_create_temporary_table = 0xD5,DBOP_create_translation = 0xD6,DBOP_create_trigger = 0xD7,DBOP_create_view = 0xD8,DBOP_drop_assertion = 0xD9,DBOP_drop_character_set = 0xDA,DBOP_drop_collation = 0xDB,DBOP_drop_domain = 0xDC,DBOP_drop_index = 0xDD,DBOP_drop_procedure = 0xDE,DBOP_drop_schema = 0xDF,DBOP_drop_synonym = 0xE0,DBOP_drop_table = 0xE1,DBOP_drop_translation = 0xE2,DBOP_drop_trigger = 0xE3,DBOP_drop_view = 0xE4,DBOP_foreign_key = 0xE5,DBOP_grant_privileges = 0xE6,DBOP_index_list_anchor = 0xE7,DBOP_index_list_element = 0xE8,DBOP_primary_key = 0xE9,DBOP_property_list_anchor = 0xEA,DBOP_property_list_element = 0xEB,DBOP_referenced_table = 0xEC,DBOP_rename_object = 0xED,DBOP_revoke_privileges = 0xEE,DBOP_schema_authorization = 0xEF,DBOP_unique_key = 0xF0,DBOP_scope_list_anchor = 0xF1,DBOP_scope_list_element = 0xF2,DBOP_content_table = 0xF3,};
typedef struct tagDBCONTENTVECTOR DBCONTENTVECTOR;
enum DBCOPYFLAGSENUM {DBCOPY_ASYNC = 0x100,DBCOPY_REPLACE_EXISTING = 0x200,DBCOPY_ALLOW_EMULATION = 0x400,DBCOPY_NON_RECURSIVE = 0x800,DBCOPY_ATOMIC = 0x1000,};
enum DBLITERALENUM20 {DBLITERAL_CUBE_NAME = 0x15,DBLITERAL_DIMENSION_NAME = 0x16,DBLITERAL_HIERARCHY_NAME = 0x17,DBLITERAL_LEVEL_NAME = 0x18,DBLITERAL_MEMBER_NAME = 0x19,DBLITERAL_PROPERTY_NAME = 0x1A,DBLITERAL_SCHEMA_SEPARATOR = 0x1B,DBLITERAL_QUOTE_SUFFIX = 0x1C,};
enum DBLITERALENUM21 {DBLITERAL_ESCAPE_PERCENT_SUFFIX = 0x1D,DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 0x1E,};
enum DBMATCHTYPEENUM {DBMATCHTYPE_FULL = 0x0,DBMATCHTYPE_NONE = 0x1,DBMATCHTYPE_PARTIAL = 0x2,};
enum DBMOVEFLAGSENUM {DBMOVE_REPLACE_EXISTING = 0x1,DBMOVE_ASYNC = 0x100,DBMOVE_DONT_UPDATE_LINKS = 0x200,DBMOVE_ALLOW_EMULATION = 0x400,DBMOVE_ATOMIC = 0x1000,};
typedef struct tagDBPARAMBINDINFO DBPARAMBINDINFO;
typedef struct tagDBPROBABILISTIC DBPROBABILISTIC;
enum DBPROPFLAGSENUM {DBPROPFLAGS_NOTSUPPORTED = 0x0,DBPROPFLAGS_COLUMN = 0x1,DBPROPFLAGS_DATASOURCE = 0x2,DBPROPFLAGS_DATASOURCECREATE = 0x4,DBPROPFLAGS_DATASOURCEINFO = 0x8,DBPROPFLAGS_DBINIT = 0x10,DBPROPFLAGS_INDEX = 0x20,DBPROPFLAGS_ROWSET = 0x40,DBPROPFLAGS_TABLE = 0x80,DBPROPFLAGS_COLUMNOK = 0x100,DBPROPFLAGS_READ = 0x200,DBPROPFLAGS_WRITE = 0x400,DBPROPFLAGS_REQUIRED = 0x800,DBPROPFLAGS_SESSION = 0x1000,};
enum DBROWSTATUSENUM {DBROWSTATUS_S_OK = 0x0,DBROWSTATUS_S_MULTIPLECHANGES = 0x2,DBROWSTATUS_S_PENDINGCHANGES = 0x3,DBROWSTATUS_E_CANCELED = 0x4,DBROWSTATUS_E_CANTRELEASE = 0x6,DBROWSTATUS_E_CONCURRENCYVIOLATION = 0x7,DBROWSTATUS_E_DELETED = 0x8,DBROWSTATUS_E_PENDINGINSERT = 0x9,DBROWSTATUS_E_NEWLYINSERTED = 0xA,DBROWSTATUS_E_INTEGRITYVIOLATION = 0xB,DBROWSTATUS_E_INVALID = 0xC,DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 0xD,DBROWSTATUS_E_OBJECTOPEN = 0xE,DBROWSTATUS_E_OUTOFMEMORY = 0xF,DBROWSTATUS_E_PERMISSIONDENIED = 0x10,DBROWSTATUS_E_LIMITREACHED = 0x11,DBROWSTATUS_E_SCHEMAVIOLATION = 0x12,DBROWSTATUS_E_FAIL = 0x13,};
enum DBUPDELRULEENUM {DBUPDELRULE_NOACTION = 0x0,DBUPDELRULE_CASCADE = 0x1,DBUPDELRULE_SETNULL = 0x2,DBUPDELRULE_SETDEFAULT = 0x3,};
enum DBVALUEKINDENUM {DBVALUEKIND_BYGUID = 0x100,DBVALUEKIND_COLDESC = 0x101,DBVALUEKIND_ID = 0x102,DBVALUEKIND_CONTENT = 0x103,DBVALUEKIND_CONTENTVECTOR = 0x104,DBVALUEKIND_GROUPINFO = 0x105,DBVALUEKIND_PARAMETER = 0x106,DBVALUEKIND_PROPERTY = 0x107,DBVALUEKIND_SETFUNC = 0x108,DBVALUEKIND_SORTINFO = 0x109,DBVALUEKIND_TEXT = 0x10A,DBVALUEKIND_COMMAND = 0x10B,DBVALUEKIND_MONIKER = 0x10C,DBVALUEKIND_ROWSET = 0x10D,DBVALUEKIND_LIKE = 0x10E,DBVALUEKIND_CONTENTPROXIMITY = 0x10F,DBVALUEKIND_CONTENTSCOPE = 0x110,DBVALUEKIND_CONTENTTABLE = 0x111,DBVALUEKIND_IDISPATCH = 0x9,DBVALUEKIND_IUNKNOWN = 0xD,DBVALUEKIND_EMPTY = 0x0,DBVALUEKIND_NULL = 0x1,DBVALUEKIND_I2 = 0x2,DBVALUEKIND_I4 = 0x3,DBVALUEKIND_R4 = 0x4,DBVALUEKIND_R8 = 0x5,DBVALUEKIND_CY = 0x6,DBVALUEKIND_DATE = 0x7,DBVALUEKIND_BSTR = 0x8,DBVALUEKIND_ERROR = 0xA,DBVALUEKIND_BOOL = 0xB,DBVALUEKIND_VARIANT = 0xC,DBVALUEKIND_VECTOR = 0x1000,DBVALUEKIND_ARRAY = 0x2000,DBVALUEKIND_BYREF = 0x4000,DBVALUEKIND_I1 = 0x10,DBVALUEKIND_UI1 = 0x11,DBVALUEKIND_UI2 = 0x12,DBVALUEKIND_UI4 = 0x13,DBVALUEKIND_I8 = 0x14,DBVALUEKIND_UI8 = 0x15,DBVALUEKIND_GUID = 0x48,DBVALUEKIND_BYTES = 0x80,DBVALUEKIND_STR = 0x81,DBVALUEKIND_WSTR = 0x82,DBVALUEKIND_NUMERIC = 0x83,DBVALUEKIND_DBDATE = 0x85,DBVALUEKIND_DBTIME = 0x86,DBVALUEKIND_DBTIMESTAMP = 0x87,DBVALUEKIND_PROBABILISTIC = 0x88,DBVALUEKIND_RELEVANTDOCUMENT = 0x89,};
enum DBWATCHMODEENUM {DBWATCHMODE_ALL = 0x1,DBWATCHMODE_EXTEND = 0x2,DBWATCHMODE_MOVE = 0x4,DBWATCHMODE_COUNT = 0x8,};
typedef struct _DDVIDEOPORTCAPS DDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC DDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO DDVIDEOPORTINFO;
typedef struct _947C6FA139885FA2B0DE7F2A3FDD942C DLGITEMTEMPLATE;
typedef struct _DLLVERSIONINFO2 DLLVERSIONINFO2;
typedef struct _DOT11_AUTH_ALGO DOT11_AUTH_ALGO;
typedef struct _DOT11_AUTH_LIST DOT11_AUTH_LIST;
typedef struct _DOT11_UPDATE_IE DOT11_UPDATE_IE;
typedef struct DRIVER_VER_INFO_ DRIVER_VER_INFO;
typedef struct _PRIVKEYVER3 DSSPRIVKEY_VER3;
typedef struct _DTBLRADIOBUTTON DTBLRADIOBUTTON;
struct DThumbCtlEvents {struct DThumbCtlEventsVtbl *lpVtbl;};
typedef struct _structDVD_PROVIDER_ID DVD_PROVIDER_ID;
enum DVD_TextCharSet {DVD_CharSet_Unicode = 0x0,DVD_CharSet_ISO646 = 0x1,DVD_CharSet_JIS_Roman_Kanji = 0x2,DVD_CharSet_ISO8859_1 = 0x3,DVD_CharSet_ShiftJIS_Kanji_Roman_Katakana = 0x4,};
enum DXSURFMODCOMPOP {DXSURFMOD_COMP_OVER = 0x0,DXSURFMOD_COMP_ALPHA_MASK = 0x1,DXSURFMOD_COMP_MAX_VALID = 0x1,};
struct DirectContainer;
struct DispHTMLBGsound {struct DispHTMLBGsoundVtbl *lpVtbl;};
struct DispHTMLWindow2 {struct DispHTMLWindow2Vtbl *lpVtbl;};
typedef struct _C6832D807A2747A4D0CBF13E34E0B28B EXP_DARWIN_LINK;
struct EnumSoapMappers;
struct EnumWSDLService;
typedef struct tagFETCH_BODY_PART FETCH_BODY_PART;
typedef struct _FILEDESCRIPTORA FILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW FILEDESCRIPTORW;
struct FilgraphManager;
struct FolderItemVerbs {struct FolderItemVerbsVtbl *lpVtbl;};
typedef struct _GENERIC_MAPPING GENERIC_MAPPING;
typedef struct tagHH_SET_INFOTYPE HH_SET_INFOTYPE;
struct HTCDescBehavior;
struct HTMLAppBehavior;
struct HTMLAreaElement;
struct HTMLAreaEvents2 {struct HTMLAreaEvents2Vtbl *lpVtbl;};
struct HTMLBaseElement;
struct HTMLDOMTextNode;
struct HTMLDivPosition;
struct HTMLFontElement;
struct HTMLFormElement;
struct HTMLHeadElement;
struct HTMLHtmlElement;
struct HTMLLabelEvents {struct HTMLLabelEventsVtbl *lpVtbl;};
struct HTMLLinkElement;
struct HTMLListElement;
struct HTMLMetaElement;
struct HTMLParaElement;
struct HTMLRenderStyle;
struct HTMLSpanElement;
struct HTMLTableEvents {struct HTMLTableEventsVtbl *lpVtbl;};
struct HTMLTextElement;
struct HTMLWindowProxy;
typedef struct tagHTTPCONTACTINFO HTTPCONTACTINFO;
typedef struct tagHTTPMAILGETPROP HTTPMAILGETPROP;
typedef struct tagHTTPMEMBERERROR HTTPMEMBERERROR;
typedef struct _HTTP_FILTER_LOG HTTP_FILTER_LOG;
struct HWINEVENTHOOK__ {int unused;};
struct IAMExtTransport {struct IAMExtTransportVtbl *lpVtbl;};
struct IAMMediaContent {struct IAMMediaContentVtbl *lpVtbl;};
struct IAMPlayListItem {struct IAMPlayListItemVtbl *lpVtbl;};
struct IAMStreamConfig {struct IAMStreamConfigVtbl *lpVtbl;};
struct IAMStreamSelect {struct IAMStreamSelectVtbl *lpVtbl;};
struct IAMVideoProcAmp {struct IAMVideoProcAmpVtbl *lpVtbl;};
struct IAsyncOperation {struct IAsyncOperationVtbl *lpVtbl;};
struct IBaseVideoMixer {struct IBaseVideoMixerVtbl *lpVtbl;};
typedef struct icmp_echo_reply ICMP_ECHO_REPLY;
struct ICatInformation {struct ICatInformationVtbl *lpVtbl;};
struct ICifRWComponent {struct ICifRWComponentVtbl *lpVtbl;};
struct IClassActivator {struct IClassActivatorVtbl *lpVtbl;};
struct IClassFactoryEx {struct IClassFactoryExVtbl *lpVtbl;};
struct IClientSecurity {struct IClientSecurityVtbl *lpVtbl;};
struct IColumnProvider {struct IColumnProviderVtbl *lpVtbl;};
struct ICommDlgBrowser {struct ICommDlgBrowserVtbl *lpVtbl;};
struct ICommandPersist {struct ICommandPersistVtbl *lpVtbl;};
struct ICommandPrepare {struct ICommandPrepareVtbl *lpVtbl;};
struct ICreateTypeInfo {struct ICreateTypeInfoVtbl *lpVtbl;};
struct ICreateTypeLib2 {struct ICreateTypeLib2Vtbl *lpVtbl;};
struct IDBAsynchNotify {struct IDBAsynchNotifyVtbl *lpVtbl;};
struct IDBAsynchStatus {struct IDBAsynchStatusVtbl *lpVtbl;};
struct IDBSchemaRowset {struct IDBSchemaRowsetVtbl *lpVtbl;};
struct IDVDTextManager {struct IDVDTextManagerVtbl *lpVtbl;};
struct IDVDVideoVolume {struct IDVDVideoVolumeVtbl *lpVtbl;};
struct IDXTScaleOutput {struct IDXTScaleOutputVtbl *lpVtbl;};
struct IDisplayPointer {struct IDisplayPointerVtbl *lpVtbl;};
struct IDownloadNotify {struct IDownloadNotifyVtbl *lpVtbl;};
struct IElementAdorner {struct IElementAdornerVtbl *lpVtbl;};
struct IElementSegment {struct IElementSegmentVtbl *lpVtbl;};
struct IEnumMediaTypes {struct IEnumMediaTypesVtbl *lpVtbl;};
struct IEnumRegFilters {struct IEnumRegFiltersVtbl *lpVtbl;};
struct IFileSearchBand {struct IFileSearchBandVtbl *lpVtbl;};
struct IFileSinkFilter {struct IFileSinkFilterVtbl *lpVtbl;};
struct IFileViewerSite {struct IFileViewerSiteVtbl *lpVtbl;};
struct IHTMLChangeSink {struct IHTMLChangeSinkVtbl *lpVtbl;};
struct IHTMLDivElement {struct IHTMLDivElementVtbl *lpVtbl;};
struct IHTMLFrameBase2 {struct IHTMLFrameBase2Vtbl *lpVtbl;};
struct IHTMLFrameBase3 {struct IHTMLFrameBase3Vtbl *lpVtbl;};
struct IHTMLImgElement {struct IHTMLImgElementVtbl *lpVtbl;};
struct IHTMLInputImage {struct IHTMLInputImageVtbl *lpVtbl;};
struct IHTMLMapElement {struct IHTMLMapElementVtbl *lpVtbl;};
struct IHTMLOpsProfile {struct IHTMLOpsProfileVtbl *lpVtbl;};
struct IHTMLRuleStyle2 {struct IHTMLRuleStyle2Vtbl *lpVtbl;};
struct IHTMLRuleStyle3 {struct IHTMLRuleStyle3Vtbl *lpVtbl;};
struct IHTMLRuleStyle4 {struct IHTMLRuleStyle4Vtbl *lpVtbl;};
struct IHTMLStyleSheet {struct IHTMLStyleSheetVtbl *lpVtbl;};
struct IHTMLSubmitData {struct IHTMLSubmitDataVtbl *lpVtbl;};
struct IHTMLTableCell2 {struct IHTMLTableCell2Vtbl *lpVtbl;};
struct IHTMLUniqueName {struct IHTMLUniqueNameVtbl *lpVtbl;};
struct IHTMLUserDataOM {struct IHTMLUserDataOMVtbl *lpVtbl;};
struct IHTMLViewFilter {struct IHTMLViewFilterVtbl *lpVtbl;};
struct IHttpNegotiate2 {struct IHttpNegotiate2Vtbl *lpVtbl;};
struct IIMAPTransport2 {struct IIMAPTransport2Vtbl *lpVtbl;};
struct IInstallEngine2 {struct IInstallEngine2Vtbl *lpVtbl;};
struct IMAPIAdviseSink {struct IMAPIAdviseSinkVtbl *lpVtbl;};
typedef struct tagIMECHARPOSITION IMECHARPOSITION;
struct IMLangCodePages {struct IMLangCodePagesVtbl *lpVtbl;};
struct IMLangFontLink2 {struct IMLangFontLink2Vtbl *lpVtbl;};
struct IMapMIMEToCLSID {struct IMapMIMEToCLSIDVtbl *lpVtbl;};
struct IMarkupPointer2 {struct IMarkupPointer2Vtbl *lpVtbl;};
struct IMarkupServices {struct IMarkupServicesVtbl *lpVtbl;};
struct IMediaEventSink {struct IMediaEventSinkVtbl *lpVtbl;};
struct IMediaParamInfo {struct IMediaParamInfoVtbl *lpVtbl;};
struct IMediaPlayerDvd {struct IMediaPlayerDvdVtbl *lpVtbl;};
struct IMixerPinConfig {struct IMixerPinConfigVtbl *lpVtbl;};
struct IMsgrIMSessions {struct IMsgrIMSessionsVtbl *lpVtbl;};
struct IMultiLanguage2 {struct IMultiLanguage2Vtbl *lpVtbl;};
struct IMultiLanguage3 {struct IMultiLanguage3Vtbl *lpVtbl;};
struct INNTPTransport2 {struct INNTPTransport2Vtbl *lpVtbl;};
typedef struct _B878650F4DB1CE5DD79981052205B0E0 INSTALLPROGRESS;
typedef struct _INTERNET_COOKIE INTERNET_COOKIE;
typedef struct _IO_STATUS_BLOCK IO_STATUS_BLOCK;
struct IObjectIdentity {struct IObjectIdentityVtbl *lpVtbl;};
struct IObjectWithSite {struct IObjectWithSiteVtbl *lpVtbl;};
struct IOleControlSite {struct IOleControlSiteVtbl *lpVtbl;};
struct IOleInPlaceSite {struct IOleInPlaceSiteVtbl *lpVtbl;};
struct IOleUndoManager {struct IOleUndoManagerVtbl *lpVtbl;};
typedef struct _IP_ADAPTER_INFO IP_ADAPTER_INFO;
struct IPersistFolder2 {struct IPersistFolder2Vtbl *lpVtbl;};
struct IPersistFolder3 {struct IPersistFolder3Vtbl *lpVtbl;};
struct IPersistHistory {struct IPersistHistoryVtbl *lpVtbl;};
struct IPersistMoniker {struct IPersistMonikerVtbl *lpVtbl;};
struct IPersistStorage {struct IPersistStorageVtbl *lpVtbl;};
struct IProfferService {struct IProfferServiceVtbl *lpVtbl;};
struct IProgressDialog {struct IProgressDialogVtbl *lpVtbl;};
struct IProgressNotify {struct IProgressNotifyVtbl *lpVtbl;};
struct IProvideMoniker {struct IProvideMonikerVtbl *lpVtbl;};
struct IQualityControl {struct IQualityControlVtbl *lpVtbl;};
struct IRTCBuddyEvent2 {struct IRTCBuddyEvent2Vtbl *lpVtbl;};
struct IRTCClientEvent {struct IRTCClientEventVtbl *lpVtbl;};
struct IRTCEnumBuddies {struct IRTCEnumBuddiesVtbl *lpVtbl;};
struct IRTCParticipant {struct IRTCParticipantVtbl *lpVtbl;};
struct IRTCPortManager {struct IRTCPortManagerVtbl *lpVtbl;};
struct IRecalcProperty {struct IRecalcPropertyVtbl *lpVtbl;};
struct IReferenceClock {struct IReferenceClockVtbl *lpVtbl;};
struct IRemoteComputer {struct IRemoteComputerVtbl *lpVtbl;};
struct IRequestStrList {struct IRequestStrListVtbl *lpVtbl;};
struct IRowsetCopyRows {struct IRowsetCopyRowsVtbl *lpVtbl;};
struct IRowsetIdentity {struct IRowsetIdentityVtbl *lpVtbl;};
struct IRowsetWatchAll {struct IRowsetWatchAllVtbl *lpVtbl;};
struct IRpcProxyBuffer {struct IRpcProxyBufferVtbl *lpVtbl;};
struct IRunnableObject {struct IRunnableObjectVtbl *lpVtbl;};
struct ISAXDeclHandler {struct ISAXDeclHandlerVtbl *lpVtbl;};
struct ISMTPTransport2 {struct ISMTPTransport2Vtbl *lpVtbl;};
struct ISequenceNumber {struct ISequenceNumberVtbl *lpVtbl;};
struct IServerSecurity {struct IServerSecurityVtbl *lpVtbl;};
struct IShellDispatch2 {struct IShellDispatch2Vtbl *lpVtbl;};
struct IShellDispatch3 {struct IShellDispatch3Vtbl *lpVtbl;};
struct IShellLinkDual2 {struct IShellLinkDual2Vtbl *lpVtbl;};
struct IShellNameSpace {struct IShellNameSpaceVtbl *lpVtbl;};
struct ISoapSerializer {struct ISoapSerializerVtbl *lpVtbl;};
struct ISoapTypeMapper {struct ISoapTypeMapperVtbl *lpVtbl;};
struct IStdMarshalInfo {struct IStdMarshalInfoVtbl *lpVtbl;};
struct ITravelLogEntry {struct ITravelLogEntryVtbl *lpVtbl;};
struct IURLSearchHook2 {struct IURLSearchHook2Vtbl *lpVtbl;};
struct IUrlHistoryStg2 {struct IUrlHistoryStg2Vtbl *lpVtbl;};
struct IUrlTrackingStg {struct IUrlTrackingStgVtbl *lpVtbl;};
struct IVBSAXXMLFilter {struct IVBSAXXMLFilterVtbl *lpVtbl;};
struct IVBSAXXMLReader {struct IVBSAXXMLReaderVtbl *lpVtbl;};
struct IVoIPCallRecord {struct IVoIPCallRecordVtbl *lpVtbl;};
struct IXMLDOMDocument {struct IXMLDOMDocumentVtbl *lpVtbl;};
struct IXMLDOMNodeList {struct IXMLDOMNodeListVtbl *lpVtbl;};
struct IXMLDOMNotation {struct IXMLDOMNotationVtbl *lpVtbl;};
struct IXMLHTTPRequest {struct IXMLHTTPRequestVtbl *lpVtbl;};
struct IXMLNodeFactory {struct IXMLNodeFactoryVtbl *lpVtbl;};
struct ImageProperties;
typedef struct tagInvalidPassType InvalidPassType;
typedef struct lineaddresscaps_tag LINEADDRESSCAPS;
typedef struct linecountrylist_tag LINECOUNTRYLIST;
typedef struct lineextensionid_tag LINEEXTENSIONID;
typedef struct lineforwardlist_tag LINEFORWARDLIST;
typedef struct linemonitortone_tag LINEMONITORTONE;
typedef struct _LINE_DEV_STATUS LINE_DEV_STATUS;
typedef struct _LMEM_ALLOC_INFO LMEM_ALLOC_INFO;
typedef IAutoComplete2 *LPAUTOCOMPLETE2;
typedef struct tagCANDIDATEFORM *LPCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *LPCANDIDATEINFO;
typedef struct tagCANDIDATELIST *LPCANDIDATELIST;
typedef IClassFactory2 *LPCLASSFACTORY2;
typedef  IMimeSecurity *LPCMIMESECURITY;
typedef struct tagCREATESTRUCTA *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW *LPCREATESTRUCTW;
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef struct _DDSURFACEDESC *LPDDSURFACEDESC;
typedef struct tagDRVCONFIGINFO *LPDRVCONFIGINFO;
typedef struct _DSCBUFFERDESC *LPDSCBUFFERDESC;
typedef struct _E7DEFB284EA8021B90974CE0B87C7D17 *LPDSQUERYPARAMS;
typedef struct _DTBLMVLISTBOX *LPDTBLMVLISTBOX;
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagENUMHEADERROW *LPENUMHEADERROW;
typedef IExtractImage2 *LPEXTRACTIMAGE2;
typedef struct _70BF96555A8221A8BC520C987124981D *LPFLATENTRYLIST;
typedef struct _862005EC9EDD7026C51E0C19A67AAE6E *LPFLATMTSIDLIST;
typedef struct tagFONTSIGNATURE *LPFONTSIGNATURE;
typedef struct _GRADIENT_RECT *LPGRADIENT_RECT;
typedef struct tagHARDWAREINPUT *LPHARDWAREINPUT;
typedef struct _HD_HITTESTINFO *LPHDHITTESTINFO;
typedef struct tagHEADERROWINFO *LPHEADERROWINFO;
typedef struct tagHTTPCONTACTID *LPHTTPCONTACTID;
typedef IHttpNegotiate *LPHTTPNEGOTIATE;
typedef struct tagINTERFACEDATA *LPINTERFACEDATA;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct IKsPropertySet *LPKSPROPERTYSET;
typedef struct linecardentry_tag *LPLINECARDENTRY;
typedef struct linedevstatus_tag *LPLINEDEVSTATUS;
typedef struct tagLVHITTESTINFO *LPLVHITTESTINFO;
typedef struct IMAPIContainer *LPMAPICONTAINER;
typedef struct tagMENUITEMINFOA *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW *LPMENUITEMINFOW;
typedef IMessageFilter *LPMESSAGEFILTER;
typedef struct midiproptempo_tag *LPMIDIPROPTEMPO;
typedef IMimeAllocator *LPMIMEALLOCATOR;
typedef struct tagMIMEPARAMINFO *LPMIMEPARAMINFO;
typedef struct tagMODULEENTRY32 *LPMODULEENTRY32;
typedef struct tagMONITORINFOEX *LPMONITORINFOEX;
typedef IMultiLanguage *LPMULTILANGUAGE;
typedef struct tagNMHDDISPINFOA *LPNMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW *LPNMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT *LPNMLVCACHEHINT;
typedef struct tagLVDISPINFO *LPNMLVDISPINFOA;
typedef struct tagLVDISPINFOW *LPNMLVDISPINFOW;
typedef struct tagNMTTDISPIFNOA *LPNMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW *LPNMTTDISPINFOW;
typedef struct tagTVDISPINFOA *LPNMTVDISPINFOA;
typedef struct tagTVDISPINFOW *LPNMTVDISPINFOW;
typedef struct tagNNTPLISTGROUP *LPNNTPLISTGROUP;
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct _FC03820C0C9B455049C143518E71A23B *LPOPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *LPOPENCARDNAMEW;
typedef struct tagOFNA *LPOPENFILENAMEA;
typedef struct tagOFNW *LPOPENFILENAMEW;
typedef struct tagPSDA *LPPAGESETUPDLGA;
typedef struct tagPSDW *LPPAGESETUPDLGW;
typedef IPersistFolder *LPPERSISTFOLDER;
typedef IPersistMemory *LPPERSISTMEMORY;
typedef IPersistStream *LPPERSISTSTREAM;
typedef IPropertyBagEx *LPPROPERTYBAGEX;
typedef IPropertyPage2 *LPPROPERTYPAGE2;
typedef struct IProviderAdmin *LPPROVIDERADMIN;
typedef IQuickActivate *LPQUICKACTIVATE;
typedef struct _RB_HITTESTINFO *LPRBHITTESTINFO;
typedef struct tagREGISTERWORDA *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW *LPREGISTERWORDW;
typedef struct _SCARD_ATRMASK *LPSCARD_ATRMASK;
typedef IScheduleGroup *LPSCHEDULEGROUP;
typedef struct _SOCKADDR_IRDA *LPSOCKADDR_IRDA;
typedef struct _SPropTagArray *LPSPropTagArray;
typedef struct _SSLCLIENTOPTS *LPSSLCLIENTOPTS;
typedef struct _SSLSERVEROPTS *LPSSLSERVEROPTS;
typedef struct _SSortOrderSet *LPSSortOrderSet;
typedef struct _STGOVERLAPPED *LPSTGOVERLAPPED;
typedef ITargetNotify2 *LPTARGETNOTIFY2;
typedef struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 *LPTBBUTTONINFOA;
typedef struct _8688FBDBF9FB8D670D1638B47BFC0FAD *LPTBBUTTONINFOW;
typedef struct tagTCHITTESTINFO *LPTCHITTESTINFO;
typedef struct tagTCITEMHEADERA *LPTCITEMHEADERA;
typedef struct tagTCITEMHEADERW *LPTCITEMHEADERW;
typedef struct tagTHREADENTRY32 *LPTHREADENTRY32;
typedef struct tagTVHITTESTINFO *LPTVHITTESTINFO;
typedef IUrlHistoryStg *LPURLHISTORYSTG;
typedef struct _USB_INTERFACE *LPUSB_INTERFACE;
typedef struct _WABACTIONITEM *LPWABACTIONITEM;
typedef struct _WABEXTDISPLAY *LPWABEXTDISPLAY;
typedef struct _WSACOMPLETION *LPWSACOMPLETION;
typedef struct _OVERLAPPED *LPWSAOVERLAPPED;
typedef struct _WSPPROC_TABLE *LPWSPPROC_TABLE;
enum MACRO_ATTACH_BY {ATTACH_BY_VALUE = 0x1,ATTACH_BY_REFERENCE = 0x2,ATTACH_BY_REF_RESOLVE = 0x3,ATTACH_BY_REF_ONLY = 0x4,ATTACH_EMBEDDED_MSG = 0x5,ATTACH_OLE = 0x6,};
enum MACRO_AUTH_FLAG {AUTH_FLAG_DISABLE_NEGOTIATE = 0x1,AUTH_FLAG_ENABLE_NEGOTIATE = 0x2,};
enum MACRO_AVI_INDEX {AVI_INDEX_OF_INDEXES = 0x0,AVI_INDEX_OF_CHUNKS = 0x1,AVI_INDEX_OF_TIMED_CHUNKS = 0x2,AVI_INDEX_OF_SUB_2FIELD = 0x3,AVI_INDEX_IS_DATA = 0x80,AVI_INDEX_SUB_DEFAULT = 0x0,AVI_INDEX_SUB_2FIELD = 0x1,};
enum MACRO_BIGENDIAN {BIGENDIAN = 0x0,LITTLEENDIAN = 0x1,};
enum MACRO_BITSPIXEL {BITSPIXEL = 12,};
enum MACRO_BLACKNESS {BLACKNESS = 0x42,};
enum MACRO_CCHILDREN {CCHILDREN_FRAME = 7,};
enum MACRO_CDINSTALL {CDINSTALL = 1,WEBINSTALL = 2,};
enum MACRO_CEDB_SORT {CEDB_SORT_DESCENDING = 0x1,CEDB_SORT_CASEINSENSITIVE = 0x2,CEDB_SORT_UNKNOWNFIRST = 0x4,CEDB_SORT_GENERICORDER = 0x8,CEDB_SORT_IGNORENONSPACE = 0x10,CEDB_SORT_IGNORESYMBOLS = 0x20,CEDB_SORT_IGNOREKANATYPE = 0x40,CEDB_SORT_IGNOREWIDTH = 0x80,CEDB_SORT_STRINGSORT = 0x100,CEDB_SORT_UNIQUE = 0x200,CEDB_SORT_NONNULL = 0x400,CEDB_MAXSORTPROP = 0x3,};
enum MACRO_CELID_GDI {CELID_GDI = 104,};
enum MACRO_CELID_RDP {CELID_RDP = 105,CELID_PROFILER_START = 106,CELID_PROFILER_STOP = 107,CELID_MONTECARLO_HIT = 108,CELID_OEMPROFILER_HIT = 109,CELID_DATA_LOSS = 150,CELID_SYNC_END = 8190,CELID_LOG_MARKER = 8191,CELID_USER = 8192,CELID_MAX = 16383,};
enum MACRO_CFSEPCHAR {CFSEPCHAR = 43,};
enum MACRO_CF_ACCEPT {CF_ACCEPT = 0x0,CF_REJECT = 0x1,CF_DEFER = 0x2,};
enum MACRO_CONNECT_E {CONNECT_E_FIRST = 0x80040200,CONNECT_E_LAST = 0x8004020F,CONNECT_S_FIRST = 0x40200,CONNECT_S_LAST = 0x4020F,CONNECT_E_NOCONNECTION = 0x80040200,CONNECT_E_ADVISELIMIT = 0x80040201,CONNECT_E_CANNOTCONNECT = 0x80040202,CONNECT_E_OVERRIDDEN = 0x80040203,};
enum MACRO_CONTEXT_E {CONTEXT_E_FIRST = 0x8004E000,CONTEXT_E_LAST = 0x8004E02F,CONTEXT_S_FIRST = 0x4E000,CONTEXT_S_LAST = 0x4E02F,};
enum MACRO_CONVERT10 {CONVERT10_E_FIRST = 0x800401C0,CONVERT10_E_LAST = 0x800401CF,CONVERT10_S_FIRST = 0x401C0,CONVERT10_S_LAST = 0x401CF,};
enum MACRO_CRYPT_ASN {CRYPT_ASN_ENCODING = 0x1,CRYPT_NDR_ENCODING = 0x2,};
enum MACRO_CTL_ENTRY {CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 0x1,};
enum MACRO_CURVECAPS {CURVECAPS = 28,};
enum MACRO_D3DCREATE {D3DCREATE_FPU_PRESERVE = 0x2,D3DCREATE_MULTITHREADED = 0x4,D3DCREATE_PUREDEVICE = 0x10,D3DCREATE_SOFTWARE_VERTEXPROCESSING = 0x20,D3DCREATE_HARDWARE_VERTEXPROCESSING = 0x40,D3DCREATE_MIXED_VERTEXPROCESSING = 0x80,};
enum MACRO_D3DCURSOR {D3DCURSOR_IMMEDIATE_UPDATE = 0x1,};
enum MACRO_DBL_RADIX {DBL_RADIX = 2,DBL_ROUNDS = 1,};
enum MACRO_DBPROPVAL {DBPROPVAL_BMK_NUMERIC = 0x1,DBPROPVAL_BMK_KEY = 0x2,DBPROPVAL_CL_START = 0x1,DBPROPVAL_CL_END = 0x2,DBPROPVAL_CU_DML_STATEMENTS = 0x1,DBPROPVAL_CU_TABLE_DEFINITION = 0x2,DBPROPVAL_CU_INDEX_DEFINITION = 0x4,DBPROPVAL_CU_PRIVILEGE_DEFINITION = 0x8,DBPROPVAL_CD_NOTNULL = 0x1,DBPROPVAL_CB_NULL = 0x1,DBPROPVAL_CB_NON_NULL = 0x2,DBPROPVAL_FU_NOT_SUPPORTED = 0x1,DBPROPVAL_FU_COLUMN = 0x2,DBPROPVAL_FU_TABLE = 0x4,DBPROPVAL_FU_CATALOG = 0x8,DBPROPVAL_GB_NOT_SUPPORTED = 0x1,DBPROPVAL_GB_EQUALS_SELECT = 0x2,DBPROPVAL_GB_CONTAINS_SELECT = 0x4,DBPROPVAL_GB_NO_RELATION = 0x8,DBPROPVAL_HT_DIFFERENT_CATALOGS = 0x1,DBPROPVAL_HT_DIFFERENT_PROVIDERS = 0x2,DBPROPVAL_IC_UPPER = 0x1,DBPROPVAL_IC_LOWER = 0x2,DBPROPVAL_IC_SENSITIVE = 0x4,DBPROPVAL_IC_MIXED = 0x8,DBPROPVAL_NP_OKTODO = 0x1,DBPROPVAL_NP_ABOUTTODO = 0x2,DBPROPVAL_NP_SYNCHAFTER = 0x4,DBPROPVAL_NP_FAILEDTODO = 0x8,DBPROPVAL_NP_DIDEVENT = 0x10,DBPROPVAL_NC_END = 0x1,DBPROPVAL_NC_HIGH = 0x2,DBPROPVAL_NC_LOW = 0x4,DBPROPVAL_NC_START = 0x8,DBPROPVAL_OO_BLOB = 0x1,DBPROPVAL_OO_IPERSIST = 0x2,DBPROPVAL_CB_DELETE = 0x1,DBPROPVAL_CB_PRESERVE = 0x2,DBPROPVAL_SU_DML_STATEMENTS = 0x1,DBPROPVAL_SU_TABLE_DEFINITION = 0x2,DBPROPVAL_SU_INDEX_DEFINITION = 0x4,DBPROPVAL_SU_PRIVILEGE_DEFINITION = 0x8,DBPROPVAL_SQ_CORRELATEDSUBQUERIES = 0x1,DBPROPVAL_SQ_COMPARISON = 0x2,DBPROPVAL_SQ_EXISTS = 0x4,DBPROPVAL_SQ_IN = 0x8,DBPROPVAL_SQ_QUANTIFIED = 0x10,DBPROPVAL_SQ_TABLE = 0x20,DBPROPVAL_SS_ISEQUENTIALSTREAM = 0x1,DBPROPVAL_SS_ISTREAM = 0x2,DBPROPVAL_SS_ISTORAGE = 0x4,DBPROPVAL_SS_ILOCKBYTES = 0x8,DBPROPVAL_TI_CHAOS = 0x10,DBPROPVAL_TI_READUNCOMMITTED = 0x100,DBPROPVAL_TI_BROWSE = 0x100,DBPROPVAL_TI_CURSORSTABILITY = 0x1000,DBPROPVAL_TI_READCOMMITTED = 0x1000,DBPROPVAL_TI_REPEATABLEREAD = 0x10000,DBPROPVAL_TI_SERIALIZABLE = 0x100000,DBPROPVAL_TI_ISOLATED = 0x100000,DBPROPVAL_TR_COMMIT_DC = 0x1,DBPROPVAL_TR_COMMIT = 0x2,DBPROPVAL_TR_COMMIT_NO = 0x4,DBPROPVAL_TR_ABORT_DC = 0x8,DBPROPVAL_TR_ABORT = 0x10,DBPROPVAL_TR_ABORT_NO = 0x20,DBPROPVAL_TR_DONTCARE = 0x40,DBPROPVAL_TR_BOTH = 0x80,DBPROPVAL_TR_NONE = 0x100,DBPROPVAL_TR_OPTIMISTIC = 0x200,DBPROPVAL_RT_FREETHREAD = 0x1,DBPROPVAL_RT_APTMTTHREAD = 0x2,DBPROPVAL_RT_SINGLETHREAD = 0x4,DBPROPVAL_UP_CHANGE = 0x1,DBPROPVAL_UP_DELETE = 0x2,DBPROPVAL_UP_INSERT = 0x4,DBPROPVAL_SQL_NONE = 0x0,DBPROPVAL_SQL_ODBC_MINIMUM = 0x1,DBPROPVAL_SQL_ODBC_CORE = 0x2,DBPROPVAL_SQL_ODBC_EXTENDED = 0x4,DBPROPVAL_SQL_ANSI89_IEF = 0x8,DBPROPVAL_SQL_ANSI92_ENTRY = 0x10,DBPROPVAL_SQL_FIPS_TRANSITIONAL = 0x20,DBPROPVAL_SQL_ANSI92_INTERMEDIATE = 0x40,DBPROPVAL_SQL_ANSI92_FULL = 0x80,DBPROPVAL_SQL_ESCAPECLAUSES = 0x100,DBPROPVAL_IT_BTREE = 0x1,DBPROPVAL_IT_HASH = 0x2,DBPROPVAL_IT_CONTENT = 0x3,DBPROPVAL_IT_OTHER = 0x4,DBPROPVAL_IN_DISALLOWNULL = 0x1,DBPROPVAL_IN_IGNORENULL = 0x2,DBPROPVAL_IN_IGNOREANYNULL = 0x4,DBPROPVAL_TC_NONE = 0x0,DBPROPVAL_TC_DML = 0x1,DBPROPVAL_TC_DDL_COMMIT = 0x2,DBPROPVAL_TC_DDL_IGNORE = 0x4,DBPROPVAL_TC_ALL = 0x8,DBPROPVAL_OA_NOTSUPPORTED = 0x1,DBPROPVAL_OA_ATEXECUTE = 0x2,DBPROPVAL_OA_ATROWRELEASE = 0x4,DBPROPVAL_MR_NOTSUPPORTED = 0x0,DBPROPVAL_MR_SUPPORTED = 0x1,DBPROPVAL_MR_CONCURRENT = 0x2,DBPROPVAL_PT_GUID_NAME = 0x1,DBPROPVAL_PT_GUID_PROPID = 0x2,DBPROPVAL_PT_NAME = 0x4,DBPROPVAL_PT_GUID = 0x8,DBPROPVAL_PT_PROPID = 0x10,DBPROPVAL_PT_PGUID_NAME = 0x20,DBPROPVAL_PT_PGUID_PROPID = 0x40,DBPROPVAL_NT_SINGLEROW = 0x1,DBPROPVAL_NT_MULTIPLEROWS = 0x2,DBPROPVAL_ASYNCH_INITIALIZE = 0x1,DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION = 0x2,DBPROPVAL_ASYNCH_RANDOMPOPULATION = 0x4,DBPROPVAL_OP_EQUAL = 0x1,DBPROPVAL_OP_RELATIVE = 0x2,DBPROPVAL_OP_STRING = 0x4,DBPROPVAL_CO_EQUALITY = 0x1,DBPROPVAL_CO_STRING = 0x2,DBPROPVAL_CO_CASESENSITIVE = 0x4,DBPROPVAL_CO_CASEINSENSITIVE = 0x8,DBPROPVAL_CO_CONTAINS = 0x10,DBPROPVAL_CO_BEGINSWITH = 0x20,DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION = 0x8,DBPROPVAL_ASYNCH_PREPOPULATE = 0x10,DBPROPVAL_ASYNCH_POPULATEONDEMAND = 0x20,DBPROPVAL_LM_NONE = 0x1,DBPROPVAL_LM_SINGLEROW = 0x2,DBPROPVAL_SQL_SUBMINIMUM = 0x200,DBPROPVAL_DST_TDP = 0x1,DBPROPVAL_DST_MDP = 0x2,DBPROPVAL_DST_TDPANDMDP = 0x3,};
enum MACRO_DBSETFUNC {DBSETFUNC_NONE = 0x0,DBSETFUNC_ALL = 0x1,DBSETFUNC_DISTINCT = 0x2,};
enum MACRO_DDBLTFAST {DDBLTFAST_NOCOLORKEY = 0x0,DDBLTFAST_SRCCOLORKEY = 0x1,DDBLTFAST_DESTCOLORKEY = 0x2,DDBLTFAST_WAIT = 0x10,};
enum MACRO_DDENUMRET {DDENUMRET_CANCEL = 0,DDENUMRET_OK = 1,};
enum MACRO_DDOSDCAPS {DDOSDCAPS_OPTCOMPRESSED = 0x1,DDOSDCAPS_OPTREORDERED = 0x2,DDOSDCAPS_MONOLITHICMIPMAP = 0x4,DDOSDCAPS_VALIDSCAPS = 0x30004800,DDOSDCAPS_VALIDOSCAPS = 0x7,};
enum MACRO_DDVPBCAPS {DDVPBCAPS_SOURCE = 0x1,DDVPBCAPS_DESTINATION = 0x2,};
enum MACRO_DEVICE_ID {DEVICE_ID_LEN = 300,};
enum MACRO_DISPID_IH {DISPID_IH_PROVIDER_CHANGED = 1,DISPID_IH_NOTIFICATION = 2,DISPID_IH_BEGIN_UPDATE = 3,DISPID_IH_END_UPDATE = 4,};
enum MACRO_DOT11_CCA {DOT11_CCA_MODE_ED_ONLY = 0x1,DOT11_CCA_MODE_CS_ONLY = 0x2,DOT11_CCA_MODE_ED_and_CS = 0x4,};
enum MACRO_DOT11_MAX {DOT11_MAX_NUM_OF_FRAGMENTS = 16,DOT11_PRIORITY_CONTENTION = 0,DOT11_PRIORITY_CONTENTION_FREE = 1,DOT11_SERVICE_CLASS_REORDERABLE_MULTICAST = 0,DOT11_SERVICE_CLASS_STRICTLY_ORDERED = 1,DOT11_FLAGS_80211B_SHORT_PREAMBLE = 1,DOT11_FLAGS_80211B_PBCC = 2,DOT11_FLAGS_80211B_CHANNEL_AGILITY = 4,DOT11_FLAGS_PS_ON = 8,DOT11_STATUS_SUCCESS = 1,DOT11_STATUS_RETRY_LIMIT_EXCEEDED = 2,DOT11_STATUS_UNSUPPORTED_PRIORITY = 4,DOT11_STATUS_UNSUPPORTED_SERVICE_CLASS = 8,DOT11_STATUS_UNAVAILABLE_PRIORITY = 16,DOT11_STATUS_UNAVAILABLE_SERVICE_CLASS = 32,DOT11_STATUS_XMIT_MSDU_TIMER_EXPIRED = 64,DOT11_STATUS_UNAVAILABLE_BSS = 128,DOT11_STATUS_EXCESSIVE_DATA_LENGTH = 256,DOT11_STATUS_ENCRYPTION_FAILED = 512,DOT11_STATUS_WEP_KEY_UNAVAILABLE = 1024,DOT11_STATUS_ICV_VERIFIED = 2048,DOT11_STATUS_PACKET_REASSEMBLED = 4096,DOT11_STATUS_PACKET_NOT_REASSEMBLED = 8192,DOT11_STATUS_GENERATE_AUTH_FAILED = 16384,DOT11_STATUS_AUTH_NOT_VERIFIED = 32768,DOT11_STATUS_AUTH_VERIFIED = 65536,DOT11_STATUS_AUTH_FAILED = 131072,DOT11_STATUS_SCAN_CONFIRM = 1,DOT11_STATUS_JOIN_CONFIRM = 2,DOT11_STATUS_START_CONFIRM = 3,DOT11_STATUS_RESET_CONFIRM = 4,};
enum MACRO_DOT11_REG {DOT11_REG_DOMAIN_OTHER = 0x0,DOT11_REG_DOMAIN_FCC = 0x10,DOT11_REG_DOMAIN_DOC = 0x20,DOT11_REG_DOMAIN_ETSI = 0x30,DOT11_REG_DOMAIN_SPAIN = 0x31,DOT11_REG_DOMAIN_FRANCE = 0x32,DOT11_REG_DOMAIN_MKK = 0x40,};
enum MACRO_DSBSTATUS {DSBSTATUS_PLAYING = 0x1,DSBSTATUS_BUFFERLOST = 0x2,DSBSTATUS_LOOPING = 0x4,};
enum MACRO_DSBVOLUME {DSBVOLUME_MIN = -10000,DSBVOLUME_MAX = 0,};
enum MACRO_DSCBSTART {DSCBSTART_LOOPING = 0x1,};
enum MACRO_DSSPEAKER {DSSPEAKER_HEADPHONE = 0x1,DSSPEAKER_MONO = 0x2,DSSPEAKER_QUAD = 0x3,DSSPEAKER_STEREO = 0x4,DSSPEAKER_SURROUND = 0x5,DSSPEAKER_GEOMETRY_MIN = 0x5,DSSPEAKER_GEOMETRY_NARROW = 0xA,DSSPEAKER_GEOMETRY_WIDE = 0x14,DSSPEAKER_GEOMETRY_MAX = 0xB4,};
enum MACRO_DSTINVERT {DSTINVERT = 0x550009,};
enum MACRO_DUPLICATE {DUPLICATE_CLOSE_SOURCE = 0x1,DUPLICATE_SAME_ACCESS = 0x2,};
enum MACRO_DWNHCMDID {DWNHCMDID_SETDOWNLOADNOTIFY = 0,};
enum MACRO_ED_DEVCAP {ED_DEVCAP_CAN_RECORD = 4097,ED_DEVCAP_CAN_RECORD_STROBE = 4098,ED_DEVCAP_HAS_AUDIO = 4099,ED_DEVCAP_HAS_VIDEO = 4100,ED_DEVCAP_USES_FILES = 4101,ED_DEVCAP_CAN_SAVE = 4102,ED_DEVCAP_DEVICE_TYPE = 4103,ED_DEVTYPE_VCR = 4104,ED_DEVTYPE_LASERDISK = 4105,ED_DEVTYPE_ATR = 4106,ED_DEVTYPE_DDR = 4107,ED_DEVTYPE_ROUTER = 4108,ED_DEVTYPE_KEYER = 4109,ED_DEVTYPE_MIXER_VIDEO = 4110,ED_DEVTYPE_DVE = 4111,ED_DEVTYPE_WIPEGEN = 4112,ED_DEVTYPE_MIXER_AUDIO = 4113,ED_DEVTYPE_CG = 4114,ED_DEVTYPE_TBC = 4115,ED_DEVTYPE_TCG = 4116,ED_DEVTYPE_GPI = 4117,ED_DEVTYPE_JOYSTICK = 4118,ED_DEVTYPE_KEYBOARD = 4119,ED_DEVCAP_EXTERNAL_DEVICE_ID = 4120,ED_DEVCAP_TIMECODE_READ = 4121,ED_DEVCAP_TIMECODE_WRITE = 4122,ED_DEVCAP_CTLTRK_READ = 4123,ED_DEVCAP_INDEX_READ = 4124,ED_DEVCAP_PREROLL = 4125,ED_DEVCAP_POSTROLL = 4126,ED_DEVCAP_SYNC_ACCURACY = 4127,ED_SYNCACC_PRECISE = 4128,ED_SYNCACC_FRAME = 4129,ED_SYNCACC_ROUGH = 4130,ED_DEVCAP_NORMAL_RATE = 4131,ED_RATE_24 = 4132,ED_RATE_25 = 4133,ED_RATE_2997 = 4134,ED_RATE_30 = 4135,ED_DEVCAP_CAN_PREVIEW = 4136,ED_DEVCAP_CAN_MONITOR_SOURCES = 4137,ED_DEVCAP_CAN_TEST = 4138,ED_DEVCAP_VIDEO_INPUTS = 4139,ED_DEVCAP_AUDIO_INPUTS = 4140,ED_DEVCAP_NEEDS_CALIBRATING = 4141,ED_DEVCAP_SEEK_TYPE = 4142,ED_SEEK_PERFECT = 4143,ED_SEEK_FAST = 4144,ED_SEEK_SLOW = 4145,ED_POWER_ON = 4146,ED_POWER_OFF = 4147,ED_POWER_STANDBY = 4148,ED_ACTIVE = 4149,ED_INACTIVE = 4150,ED_ALL = 4151,ED_TEST = 4152,ED_TRANSCAP_CAN_EJECT = 4196,ED_TRANSCAP_CAN_BUMP_PLAY = 4197,ED_TRANSCAP_CAN_PLAY_BACKWARDS = 4198,ED_TRANSCAP_CAN_SET_EE = 4199,ED_TRANSCAP_CAN_SET_PB = 4200,ED_TRANSCAP_CAN_DELAY_VIDEO_IN = 4201,ED_TRANSCAP_CAN_DELAY_VIDEO_OUT = 4202,ED_TRANSCAP_CAN_DELAY_AUDIO_IN = 4203,ED_TRANSCAP_CAN_DELAY_AUDIO_OUT = 4204,ED_TRANSCAP_FWD_VARIABLE_MAX = 4205,ED_TRANSCAP_FWD_VARIABLE_MIN = 4896,ED_TRANSCAP_REV_VARIABLE_MAX = 4206,ED_TRANSCAP_REV_VARIABLE_MIN = 4897,ED_TRANSCAP_FWD_SHUTTLE_MAX = 4898,ED_TRANSCAP_FWD_SHUTTLE_MIN = 4899,ED_TRANSCAP_REV_SHUTTLE_MAX = 4900,ED_TRANSCAP_REV_SHUTTLE_MIN = 4901,ED_TRANSCAP_NUM_AUDIO_TRACKS = 4207,ED_TRANSCAP_LTC_TRACK = 4208,ED_TRANSCAP_NEEDS_TBC = 4209,ED_TRANSCAP_NEEDS_CUEING = 4210,ED_TRANSCAP_CAN_INSERT = 4211,ED_TRANSCAP_CAN_ASSEMBLE = 4212,ED_TRANSCAP_FIELD_STEP = 4213,ED_TRANSCAP_CLOCK_INC_RATE = 4214,ED_TRANSCAP_CAN_DETECT_LENGTH = 4215,ED_TRANSCAP_CAN_FREEZE = 4216,ED_TRANSCAP_HAS_TUNER = 4217,ED_TRANSCAP_HAS_TIMER = 4218,ED_TRANSCAP_HAS_CLOCK = 4219,ED_TRANSCAP_MULTIPLE_EDITS = 4902,ED_TRANSCAP_IS_MASTER = 4903,ED_TRANSCAP_HAS_DT = 4910,ED_MEDIA_SPIN_UP = 4226,ED_MEDIA_SPIN_DOWN = 4227,ED_MEDIA_UNLOAD = 4228,ED_MODE_PLAY = 4296,ED_MODE_STOP = 4297,ED_MODE_FREEZE = 4298,ED_MODE_THAW = 4299,ED_MODE_FF = 4300,ED_MODE_REW = 4301,ED_MODE_RECORD = 4302,ED_MODE_RECORD_STROBE = 4303,ED_MODE_RECORD_FREEZE = 4904,ED_MODE_STEP = 4304,ED_MODE_STEP_FWD = 4304,ED_MODE_STEP_REV = 4905,ED_MODE_SHUTTLE = 4305,ED_MODE_EDIT_CUE = 4306,ED_MODE_VAR_SPEED = 4307,ED_MODE_PERFORM = 4308,ED_MODE_LINK_ON = 4376,ED_MODE_LINK_OFF = 4377,ED_MODE_NOTIFY_ENABLE = 4906,ED_MODE_NOTIFY_DISABLE = 4907,ED_MODE_SHOT_SEARCH = 4908,ED_TCG_TIMECODE_TYPE = 4496,ED_TCG_SMPTE_LTC = 4497,ED_TCG_SMPTE_VITC = 4498,ED_TCG_MIDI_QF = 4499,ED_TCG_MIDI_FULL = 4500,ED_TCG_FRAMERATE = 4501,ED_FORMAT_SMPTE_30 = 4502,ED_FORMAT_SMPTE_30DROP = 4503,ED_FORMAT_SMPTE_25 = 4504,ED_FORMAT_SMPTE_24 = 4505,ED_TCG_SYNC_SOURCE = 4506,ED_TCG_VIDEO = 4507,ED_TCG_READER = 4508,ED_TCG_FREE = 4509,ED_TCG_REFERENCE_SOURCE = 4510,ED_TCR_SOURCE = 4512,ED_TCR_LTC = 4513,ED_TCR_VITC = 4514,ED_TCR_CT = 4515,ED_TCR_FTC = 4516,ED_TCR_LAST_VALUE = 4517,ED_TCD_SOURCE = 4518,ED_TCR = 4519,ED_TCG = 4520,ED_TCD_SIZE = 4521,ED_SMALL = 4522,ED_MED = 4523,ED_LARGE = 4524,ED_TCD_POSITION = 4525,ED_TOP = 1,ED_MIDDLE = 2,ED_BOTTOM = 4,ED_LEFT = 256,ED_CENTER = 512,ED_RIGHT = 1024,ED_TCD_INTENSITY = 4532,ED_HIGH = 4533,ED_LOW = 4534,ED_TCD_TRANSPARENCY = 4535,ED_TCD_INVERT = 4536,ED_MODE = 4596,ED_ERROR = 4597,ED_LOCAL = 4598,ED_RECORD_INHIBIT = 4599,ED_SERVO_LOCK = 4600,ED_MEDIA_PRESENT = 4601,ED_MEDIA_LENGTH = 4602,ED_MEDIA_SIZE = 4603,ED_MEDIA_TRACK_COUNT = 4604,ED_MEDIA_TRACK_LENGTH = 4605,ED_MEDIA_SIDE = 4606,ED_MEDIA_TYPE = 4607,ED_MEDIA_VHS = 4608,ED_MEDIA_SVHS = 4609,ED_MEDIA_HI8 = 4610,ED_MEDIA_UMATIC = 4611,ED_MEDIA_DVC = 4612,ED_MEDIA_1_INCH = 4613,ED_MEDIA_D1 = 4614,ED_MEDIA_D2 = 4615,ED_MEDIA_D3 = 4616,ED_MEDIA_D5 = 4617,ED_MEDIA_DBETA = 4618,ED_MEDIA_BETA = 4619,ED_MEDIA_8MM = 4620,ED_MEDIA_DDR = 4621,ED_MEDIA_SX = 4909,ED_MEDIA_OTHER = 4622,ED_MEDIA_CLV = 4623,ED_MEDIA_CAV = 4624,ED_MEDIA_POSITION = 4625,ED_LINK_MODE = 4626,ED_TRANSBASIC_TIME_FORMAT = 4636,ED_FORMAT_MILLISECONDS = 4637,ED_FORMAT_FRAMES = 4638,ED_FORMAT_REFERENCE_TIME = 4639,ED_FORMAT_HMSF = 4643,ED_FORMAT_TMSF = 4644,ED_TRANSBASIC_TIME_REFERENCE = 4645,ED_TIMEREF_TIMECODE = 4646,ED_TIMEREF_CONTROL_TRACK = 4647,ED_TIMEREF_INDEX = 4648,ED_TRANSBASIC_SUPERIMPOSE = 4649,ED_TRANSBASIC_END_STOP_ACTION = 4650,ED_TRANSBASIC_RECORD_FORMAT = 4651,ED_RECORD_FORMAT_SP = 4652,ED_RECORD_FORMAT_LP = 4653,ED_RECORD_FORMAT_EP = 4654,ED_TRANSBASIC_STEP_COUNT = 4655,ED_TRANSBASIC_STEP_UNIT = 4656,ED_STEP_FIELD = 4657,ED_STEP_FRAME = 4658,ED_STEP_3_2 = 4659,ED_TRANSBASIC_PREROLL = 4660,ED_TRANSBASIC_RECPREROLL = 4661,ED_TRANSBASIC_POSTROLL = 4662,ED_TRANSBASIC_EDIT_DELAY = 4663,ED_TRANSBASIC_PLAYTC_DELAY = 4664,ED_TRANSBASIC_RECTC_DELAY = 4665,ED_TRANSBASIC_EDIT_FIELD = 4666,ED_TRANSBASIC_FRAME_SERVO = 4667,ED_TRANSBASIC_CF_SERVO = 4668,ED_TRANSBASIC_SERVO_REF = 4669,ED_REF_EXTERNAL = 4670,ED_REF_INPUT = 4671,ED_REF_INTERNAL = 4672,ED_REF_AUTO = 4673,ED_TRANSBASIC_WARN_GL = 4674,ED_TRANSBASIC_SET_TRACKING = 4675,ED_TRACKING_PLUS = 4676,ED_TRACKING_MINUS = 4677,ED_TRACKING_RESET = 4678,ED_TRANSBASIC_SET_FREEZE_TIMEOUT = 4679,ED_TRANSBASIC_VOLUME_NAME = 4680,ED_TRANSBASIC_BALLISTIC_1 = 4681,ED_TRANSBASIC_BALLISTIC_2 = 4682,ED_TRANSBASIC_BALLISTIC_3 = 4683,ED_TRANSBASIC_BALLISTIC_4 = 4684,ED_TRANSBASIC_BALLISTIC_5 = 4685,ED_TRANSBASIC_BALLISTIC_6 = 4686,ED_TRANSBASIC_BALLISTIC_7 = 4687,ED_TRANSBASIC_BALLISTIC_8 = 4688,ED_TRANSBASIC_BALLISTIC_9 = 4689,ED_TRANSBASIC_BALLISTIC_10 = 4690,ED_TRANSBASIC_BALLISTIC_11 = 4691,ED_TRANSBASIC_BALLISTIC_12 = 4692,ED_TRANSBASIC_BALLISTIC_13 = 4693,ED_TRANSBASIC_BALLISTIC_14 = 4694,ED_TRANSBASIC_BALLISTIC_15 = 4695,ED_TRANSBASIC_BALLISTIC_16 = 4696,ED_TRANSBASIC_BALLISTIC_17 = 4697,ED_TRANSBASIC_BALLISTIC_18 = 4698,ED_TRANSBASIC_BALLISTIC_19 = 4699,ED_TRANSBASIC_BALLISTIC_20 = 4700,ED_TRANSBASIC_SETCLOCK = 4701,ED_TRANSBASIC_SET_COUNTER_FORMAT = 4702,ED_TRANSBASIC_SET_COUNTER_VALUE = 4703,ED_TRANSBASIC_SETTUNER_CH_UP = 4704,ED_TRANSBASIC_SETTUNER_CH_DN = 4705,ED_TRANSBASIC_SETTUNER_SK_UP = 4706,ED_TRANSBASIC_SETTUNER_SK_DN = 4707,ED_TRANSBASIC_SETTUNER_CH = 4708,ED_TRANSBASIC_SETTUNER_NUM = 4709,ED_TRANSBASIC_SETTIMER_EVENT = 4710,ED_TRANSBASIC_SETTIMER_STARTDAY = 4711,ED_TRANSBASIC_SETTIMER_STARTTIME = 4712,ED_TRANSBASIC_SETTIMER_STOPDAY = 4713,ED_TRANSBASIC_SETTIMER_STOPTIME = 4714,ED_TRANSVIDEO_SET_OUTPUT = 4726,ED_E2E = 4727,ED_PLAYBACK = 4728,ED_OFF = 4729,ED_TRANSVIDEO_SET_SOURCE = 4730,ED_TRANSAUDIO_ENABLE_OUTPUT = 4736,ED_AUDIO_ALL = 268435456,ED_AUDIO_1 = 1,ED_AUDIO_2 = 2,ED_AUDIO_3 = 4,ED_AUDIO_4 = 8,ED_AUDIO_5 = 16,ED_AUDIO_6 = 32,ED_AUDIO_7 = 64,ED_AUDIO_8 = 128,ED_AUDIO_9 = 256,ED_AUDIO_10 = 512,ED_AUDIO_11 = 1024,ED_AUDIO_12 = 2048,ED_AUDIO_13 = 4096,ED_AUDIO_14 = 8192,ED_AUDIO_15 = 16384,ED_AUDIO_16 = 32768,ED_AUDIO_17 = 65536,ED_AUDIO_18 = 131072,ED_AUDIO_19 = 262144,ED_AUDIO_20 = 524288,ED_AUDIO_21 = 1048576,ED_AUDIO_22 = 2097152,ED_AUDIO_23 = 4194304,ED_AUDIO_24 = 8388608,ED_VIDEO = 33554432,ED_TRANSAUDIO_ENABLE_RECORD = 4738,ED_TRANSAUDIO_ENABLE_SELSYNC = 4739,ED_TRANSAUDIO_SET_SOURCE = 4740,ED_TRANSAUDIO_SET_MONITOR = 4741,ED_INVALID = 4748,ED_EXECUTING = 4749,ED_REGISTER = 4750,ED_DELETE = 4751,ED_EDIT_HEVENT = 4752,ED_EDIT_TEST = 4753,ED_EDIT_IMMEDIATE = 4754,ED_EDIT_MODE = 4755,ED_EDIT_MODE_ASSEMBLE = 4756,ED_EDIT_MODE_INSERT = 4757,ED_EDIT_MODE_CRASH_RECORD = 4758,ED_EDIT_MODE_BOOKMARK_TIME = 4759,ED_EDIT_MODE_BOOKMARK_CHAPTER = 4760,ED_EDIT_MASTER = 4762,ED_EDIT_TRACK = 4763,ED_EDIT_SRC_INPOINT = 4764,ED_EDIT_SRC_OUTPOINT = 4765,ED_EDIT_REC_INPOINT = 4766,ED_EDIT_REC_OUTPOINT = 4767,ED_EDIT_REHEARSE_MODE = 4768,ED_EDIT_BVB = 4769,ED_EDIT_VBV = 4770,ED_EDIT_VVV = 4771,ED_EDIT_PERFORM = 4772,ED_EDIT_ABORT = 4773,ED_EDIT_TIMEOUT = 4774,ED_EDIT_SEEK = 4775,ED_EDIT_SEEK_MODE = 4776,ED_EDIT_SEEK_EDIT_IN = 4777,ED_EDIT_SEEK_EDIT_OUT = 4778,ED_EDIT_SEEK_PREROLL = 4779,ED_EDIT_SEEK_PREROLL_CT = 4780,ED_EDIT_SEEK_BOOKMARK = 4781,ED_EDIT_OFFSET = 4782,ED_EDIT_PREREAD = 4911,ED_ERR_DEVICE_NOT_READY = 4796,};
enum MACRO_ENCRYPTED {ENCRYPTED_PWLEN = 16,SESSION_PWLEN = 24,};
enum MACRO_EVENT_FRS {EVENT_FRS_ROOT_NOT_VALID = 0xC00034E3,EVENT_FRS_STAGE_NOT_VALID = 0xC00034E4,EVENT_FRS_OVERLAPS_LOGGING = 0xC00034E5,EVENT_FRS_OVERLAPS_WORKING = 0xC00034E6,EVENT_FRS_OVERLAPS_STAGE = 0xC00034E7,EVENT_FRS_OVERLAPS_ROOT = 0xC00034E8,EVENT_FRS_OVERLAPS_OTHER_STAGE = 0xC00034E9,EVENT_FRS_PREPARE_ROOT_FAILED = 0xC00034EA,EVENT_FRS_BAD_REG_DATA = 0x800034EB,EVENT_FRS_JOIN_FAIL_TIME_SKEW = 0xC00034EC,EVENT_FRS_RMTCO_TIME_SKEW = 0xC00034ED,EVENT_FRS_CANT_OPEN_STAGE = 0xC00034EE,EVENT_FRS_CANT_OPEN_PREINSTALL = 0xC00034EF,EVENT_FRS_REPLICA_SET_CREATE_FAIL = 0xC00034F0,EVENT_FRS_REPLICA_SET_CREATE_OK = 0x400034F1,EVENT_FRS_REPLICA_SET_CXTIONS = 0x400034F2,EVENT_FRS_IN_ERROR_STATE = 0xC00034F3,EVENT_FRS_REPLICA_NO_ROOT_CHANGE = 0xC00034F4,EVENT_FRS_DUPLICATE_IN_CXTION_SYSVOL = 0xC00034F5,EVENT_FRS_DUPLICATE_IN_CXTION = 0xC00034F6,EVENT_FRS_ROOT_HAS_MOVED = 0xC00034F7,EVENT_FRS_ERROR_REPLICA_SET_DELETED = 0x800034F8,EVENT_FRS_REPLICA_IN_JRNL_WRAP_ERROR = 0xC00034F9,EVENT_FRS_DS_POLL_ERROR_SUMMARY = 0x800034FA,EVENT_PS_GPC_REGISTER_FAILED = 0xC00036B0,EVENT_PS_NO_RESOURCES_FOR_INIT = 0xC00036B1,EVENT_PS_REGISTER_PROTOCOL_FAILED = 0xC00036B2,EVENT_PS_REGISTER_MINIPORT_FAILED = 0xC00036B3,EVENT_PS_BAD_BESTEFFORT_LIMIT = 0x80003714,EVENT_PS_QUERY_OID_GEN_MAXIMUM_FRAME_SIZE = 0xC0003715,EVENT_PS_QUERY_OID_GEN_MAXIMUM_TOTAL_SIZE = 0xC0003716,EVENT_PS_QUERY_OID_GEN_LINK_SPEED = 0xC0003717,EVENT_PS_BINDING_FAILED = 0xC0003718,EVENT_PS_MISSING_ADAPTER_REGISTRY_DATA = 0xC0003719,EVENT_PS_REGISTER_ADDRESS_FAMILY_FAILED = 0xC000371A,EVENT_PS_INIT_DEVICE_FAILED = 0xC000371B,EVENT_PS_WMI_INSTANCE_NAME_FAILED = 0xC000371C,EVENT_PS_WAN_LIMITED_BESTEFFORT = 0x8000371D,EVENT_PS_RESOURCE_POOL = 0xC000371E,EVENT_PS_ADMISSIONCONTROL_OVERFLOW = 0x8000371F,EVENT_PS_NETWORK_ADDRESS_FAIL = 0xC0003720,};
enum MACRO_EVENT_SRV {EVENT_SRV_SERVICE_FAILED = 0xC00007D0,EVENT_SRV_RESOURCE_SHORTAGE = 0xC00007D1,EVENT_SRV_CANT_CREATE_DEVICE = 0xC00007D2,EVENT_SRV_CANT_CREATE_PROCESS = 0xC00007D3,EVENT_SRV_CANT_CREATE_THREAD = 0xC00007D4,EVENT_SRV_UNEXPECTED_DISC = 0xC00007D5,EVENT_SRV_INVALID_REQUEST = 0xC00007D6,EVENT_SRV_CANT_OPEN_NPFS = 0xC00007D7,EVENT_SRV_CANT_GROW_TABLE = 0x800007D9,EVENT_SRV_CANT_START_SCAVENGER = 0xC00007DA,EVENT_SRV_IRP_STACK_SIZE = 0xC00007DB,EVENT_SRV_NETWORK_ERROR = 0x800007DC,EVENT_SRV_DISK_FULL = 0x800007DD,EVENT_SRV_NO_VIRTUAL_MEMORY = 0xC00007E0,EVENT_SRV_NONPAGED_POOL_LIMIT = 0xC00007E1,EVENT_SRV_PAGED_POOL_LIMIT = 0xC00007E2,EVENT_SRV_NO_NONPAGED_POOL = 0xC00007E3,EVENT_SRV_NO_PAGED_POOL = 0xC00007E4,EVENT_SRV_NO_WORK_ITEM = 0x800007E5,EVENT_SRV_NO_FREE_CONNECTIONS = 0x800007E6,EVENT_SRV_NO_FREE_RAW_WORK_ITEM = 0x800007E7,EVENT_SRV_NO_BLOCKING_IO = 0x800007E8,EVENT_SRV_DOS_ATTACK_DETECTED = 0x800007E9,EVENT_SRV_TOO_MANY_DOS = 0x800007EA,EVENT_SRV_OUT_OF_WORK_ITEM_DOS = 0x800007EB,EVENT_SRV_KEY_NOT_FOUND = 0xC00009C5,EVENT_SRV_KEY_NOT_CREATED = 0xC00009C6,EVENT_SRV_NO_TRANSPORTS_BOUND = 0xC00009C7,EVENT_SRV_CANT_BIND_TO_TRANSPORT = 0x800009C8,EVENT_SRV_CANT_BIND_DUP_NAME = 0xC00009C9,EVENT_SRV_INVALID_REGISTRY_VALUE = 0x800009CA,EVENT_SRV_INVALID_SD = 0x800009CB,EVENT_SRV_CANT_LOAD_DRIVER = 0x800009CC,EVENT_SRV_CANT_UNLOAD_DRIVER = 0x800009CD,EVENT_SRV_CANT_MAP_ERROR = 0x800009CE,EVENT_SRV_CANT_RECREATE_SHARE = 0x800009CF,EVENT_SRV_CANT_CHANGE_DOMAIN_NAME = 0x800009D0,EVENT_RDR_RESOURCE_SHORTAGE = 0x80000BB9,EVENT_RDR_CANT_CREATE_DEVICE = 0x80000BBA,EVENT_RDR_CANT_CREATE_THREAD = 0x80000BBB,EVENT_RDR_CANT_SET_THREAD = 0x80000BBC,EVENT_RDR_INVALID_REPLY = 0x80000BBD,EVENT_RDR_INVALID_SMB = 0x80000BBE,EVENT_RDR_INVALID_LOCK_REPLY = 0x80000BBF,EVENT_RDR_FAILED_UNLOCK = 0x80000BC1,EVENT_RDR_CLOSE_BEHIND = 0x80000BC3,EVENT_RDR_UNEXPECTED_ERROR = 0x80000BC4,EVENT_RDR_TIMEOUT = 0x80000BC5,EVENT_RDR_INVALID_OPLOCK = 0x80000BC6,EVENT_RDR_CONNECTION_REFERENCE = 0x80000BC7,EVENT_RDR_SERVER_REFERENCE = 0x80000BC8,EVENT_RDR_SMB_REFERENCE = 0x80000BC9,EVENT_RDR_ENCRYPT = 0x80000BCA,EVENT_RDR_CONNECTION = 0x80000BCB,EVENT_RDR_MAXCMDS = 0x80000BCD,EVENT_RDR_OPLOCK_SMB = 0x80000BCE,EVENT_RDR_DISPOSITION = 0x80000BCF,EVENT_RDR_CONTEXTS = 0x80000BD0,EVENT_RDR_WRITE_BEHIND_FLUSH_FAILED = 0x80000BD1,EVENT_RDR_AT_THREAD_MAX = 0x80000BD2,EVENT_RDR_CANT_READ_REGISTRY = 0x80000BD3,EVENT_RDR_TIMEZONE_BIAS_TOO_LARGE = 0x80000BD4,EVENT_RDR_PRIMARY_TRANSPORT_CONNECT_FAILED = 0x80000BD5,EVENT_RDR_DELAYED_SET_ATTRIBUTES_FAILED = 0x80000BD6,EVENT_RDR_DELETEONCLOSE_FAILED = 0x80000BD7,EVENT_RDR_CANT_BIND_TRANSPORT = 0x80000BD8,EVENT_RDR_CANT_REGISTER_ADDRESS = 0x80000BD9,EVENT_RDR_CANT_GET_SECURITY_CONTEXT = 0x80000BDA,EVENT_RDR_CANT_BUILD_SMB_HEADER = 0x80000BDB,EVENT_RDR_SECURITY_SIGNATURE_MISMATCH = 0x80000BDC,EVENT_TCPIP6_STARTED = 0x40000C1C,EVENT_STREAMS_STRLOG = 0xC0000FA0,EVENT_STREAMS_ALLOCB_FAILURE = 0x80000FA1,EVENT_STREAMS_ALLOCB_FAILURE_CNT = 0x80000FA2,EVENT_STREAMS_ESBALLOC_FAILURE = 0x80000FA3,EVENT_STREAMS_ESBALLOC_FAILURE_CNT = 0x80000FA4,EVENT_TCPIP_CREATE_DEVICE_FAILED = 0xC0001004,EVENT_TCPIP_NO_RESOURCES_FOR_INIT = 0xC0001005,EVENT_TCPIP_TOO_MANY_NETS = 0xC0001059,EVENT_TCPIP_NO_MASK = 0xC000105A,EVENT_TCPIP_INVALID_ADDRESS = 0xC000105B,EVENT_TCPIP_INVALID_MASK = 0xC000105C,EVENT_TCPIP_NO_ADAPTER_RESOURCES = 0xC000105D,EVENT_TCPIP_DHCP_INIT_FAILED = 0x8000105E,EVENT_TCPIP_ADAPTER_REG_FAILURE = 0xC000105F,EVENT_TCPIP_INVALID_DEFAULT_GATEWAY = 0x80001060,EVENT_TCPIP_NO_ADDRESS_LIST = 0xC0001061,EVENT_TCPIP_NO_MASK_LIST = 0xC0001062,EVENT_TCPIP_NO_BINDINGS = 0xC0001063,EVENT_TCPIP_IP_INIT_FAILED = 0xC0001064,EVENT_TCPIP_TOO_MANY_GATEWAYS = 0x80001065,EVENT_TCPIP_ADDRESS_CONFLICT1 = 0xC0001066,EVENT_TCPIP_ADDRESS_CONFLICT2 = 0xC0001067,EVENT_TCPIP_NTE_CONTEXT_LIST_FAILURE = 0xC0001068,EVENT_TCPIP_MEDIA_CONNECT = 0x40001069,EVENT_TCPIP_MEDIA_DISCONNECT = 0x4000106A,EVENT_TCPIP_TCP_INIT_FAILED = 0xC0001081,EVENT_TCPIP_UDP_LIMIT_REACHED = 0x800010A9,EVENT_IPSEC_NO_RESOURCES_FOR_INIT = 0xC00010B9,EVENT_IPSEC_CREATE_DEVICE_FAILED = 0xC00010BA,EVENT_IPSEC_BAD_SPI_RECEIVED = 0xC00010BB,EVENT_IPSEC_UNEXPECTED_CLEARTEXT = 0xC00010BC,EVENT_IPSEC_AUTH_FAILURE = 0xC00010BD,EVENT_IPSEC_BAD_PACKET_SYNTAX = 0xC00010BE,EVENT_IPSEC_BAD_PROTOCOL_RECEIVED = 0xC00010BF,EVENT_IPSEC_GENERIC_FAILURE = 0xC00010C0,EVENT_IPSEC_NEG_FAILURE = 0xC00010C1,EVENT_IPSEC_DROP_PACKET_INBOUND = 0x400010C2,EVENT_IPSEC_DROP_PACKET_OUTBOUND = 0x400010C3,EVENT_NBT_CREATE_DRIVER = 0xC00010CC,EVENT_NBT_OPEN_REG_PARAMS = 0xC00010CD,EVENT_NBT_NO_BACKUP_WINS = 0x800010CE,EVENT_NBT_NO_WINS = 0x800010CF,EVENT_NBT_BAD_BACKUP_WINS_ADDR = 0x800010D0,EVENT_NBT_BAD_PRIMARY_WINS_ADDR = 0x800010D1,EVENT_NBT_NAME_SERVER_ADDRS = 0xC00010D2,EVENT_NBT_CREATE_ADDRESS = 0xC00010D3,EVENT_NBT_CREATE_CONNECTION = 0xC00010D4,EVENT_NBT_NON_OS_INIT = 0xC00010D5,EVENT_NBT_TIMERS = 0xC00010D6,EVENT_NBT_CREATE_DEVICE = 0xC00010D7,EVENT_NBT_NO_DEVICES = 0x800010D8,EVENT_NBT_OPEN_REG_LINKAGE = 0xC00010D9,EVENT_NBT_READ_BIND = 0xC00010DA,EVENT_NBT_READ_EXPORT = 0xC00010DB,EVENT_NBT_OPEN_REG_NAMESERVER = 0x800010DC,EVENT_SCOPE_LABEL_TOO_LONG = 0x800010DD,EVENT_SCOPE_TOO_LONG = 0x800010DE,EVENT_NBT_DUPLICATE_NAME = 0xC00010DF,EVENT_NBT_NAME_RELEASE = 0xC00010E0,EVENT_NBT_DUPLICATE_NAME_ERROR = 0xC00010E1,EVENT_NBT_NO_RESOURCES = 0xC00010E2,EVENT_NDIS_RESOURCE_CONFLICT = 0xC0001388,EVENT_NDIS_OUT_OF_RESOURCE = 0xC0001389,EVENT_NDIS_HARDWARE_FAILURE = 0xC000138A,EVENT_NDIS_ADAPTER_NOT_FOUND = 0xC000138B,EVENT_NDIS_INTERRUPT_CONNECT = 0xC000138C,EVENT_NDIS_DRIVER_FAILURE = 0xC000138D,EVENT_NDIS_BAD_VERSION = 0xC000138E,EVENT_NDIS_TIMEOUT = 0x8000138F,EVENT_NDIS_NETWORK_ADDRESS = 0xC0001390,EVENT_NDIS_UNSUPPORTED_CONFIGURATION = 0xC0001391,EVENT_NDIS_INVALID_VALUE_FROM_ADAPTER = 0xC0001392,EVENT_NDIS_MISSING_CONFIGURATION_PARAMETER = 0xC0001393,EVENT_NDIS_BAD_IO_BASE_ADDRESS = 0xC0001394,EVENT_NDIS_RECEIVE_SPACE_SMALL = 0x40001395,EVENT_NDIS_ADAPTER_DISABLED = 0x80001396,EVENT_NDIS_IO_PORT_CONFLICT = 0x80001397,EVENT_NDIS_PORT_OR_DMA_CONFLICT = 0x80001398,EVENT_NDIS_MEMORY_CONFLICT = 0x80001399,EVENT_NDIS_INTERRUPT_CONFLICT = 0x8000139A,EVENT_NDIS_DMA_CONFLICT = 0x8000139B,EVENT_NDIS_INVALID_DOWNLOAD_FILE_ERROR = 0xC000139C,EVENT_NDIS_MAXRECEIVES_ERROR = 0x8000139D,EVENT_NDIS_MAXTRANSMITS_ERROR = 0x8000139E,EVENT_NDIS_MAXFRAMESIZE_ERROR = 0x8000139F,EVENT_NDIS_MAXINTERNALBUFS_ERROR = 0x800013A0,EVENT_NDIS_MAXMULTICAST_ERROR = 0x800013A1,EVENT_NDIS_PRODUCTID_ERROR = 0x800013A2,EVENT_NDIS_LOBE_FAILUE_ERROR = 0x800013A3,EVENT_NDIS_SIGNAL_LOSS_ERROR = 0x800013A4,EVENT_NDIS_REMOVE_RECEIVED_ERROR = 0x800013A5,EVENT_NDIS_TOKEN_RING_CORRECTION = 0x400013A6,EVENT_NDIS_ADAPTER_CHECK_ERROR = 0xC00013A7,EVENT_NDIS_RESET_FAILURE_ERROR = 0x800013A8,EVENT_NDIS_CABLE_DISCONNECTED_ERROR = 0x800013A9,EVENT_NDIS_RESET_FAILURE_CORRECTION = 0x800013AA,EVENT_LOG_FULL = 0x80001770,EVENT_LogFileNotOpened = 0x80001771,EVENT_LogFileCorrupt = 0x80001772,EVENT_DefaultLogCorrupt = 0x80001773,EVENT_BadDriverPacket = 0x80001774,EVENT_EventlogStarted = 0x80001775,EVENT_EventlogStopped = 0x80001776,};
enum MACRO_EXCEPTION {EXCEPTION_NONCONTINUABLE = 0x1,EXCEPTION_UNWINDING = 0x2,EXCEPTION_EXIT_UNWIND = 0x4,EXCEPTION_STACK_INVALID = 0x8,EXCEPTION_NESTED_CALL = 0x10,EXCEPTION_TARGET_UNWIND = 0x20,EXCEPTION_COLLIDED_UNWIND = 0x40,EXCEPTION_UNWIND = 0x66,EXCEPTION_MAXIMUM_PARAMETERS = 0xF,};
enum MACRO_E_SURFACE {E_SURFACE_NOSURFACE = 0x8000C000,E_SURFACE_UNKNOWN_FORMAT = 0x8000C001,E_SURFACE_NOTMYPOINTER = 0x8000C002,E_SURFACE_DISCARDED = 0x8000C003,E_SURFACE_NODC = 0x8000C004,E_SURFACE_NOTMYDC = 0x8000C005,};
enum MACRO_F31COMPAT {F31COMPAT_NOKEYTOIME = 0x1,F31COMPAT_MCWHIDDEN = 0x2,F31COMPAT_MCWVERTICAL = 0x4,F31COMPAT_CALLFROMWINNLS = 0x8,F31COMPAT_SAVECTRL = 0x10000,F31COMPAT_PROCESSEVENT = 0x20000,F31COMPAT_ECSETCFS = 0x40000,};
enum MACRO_FILE_CASE {FILE_CASE_SENSITIVE_SEARCH = 0x1,FILE_CASE_PRESERVED_NAMES = 0x2,FILE_UNICODE_ON_DISK = 0x4,FILE_PERSISTENT_ACLS = 0x8,FILE_FILE_COMPRESSION = 0x10,FILE_VOLUME_QUOTAS = 0x20,FILE_SUPPORTS_SPARSE_FILES = 0x40,FILE_SUPPORTS_REPARSE_POINTS = 0x80,FILE_SUPPORTS_REMOTE_STORAGE = 0x100,FILE_VOLUME_IS_COMPRESSED = 0x8000,FILE_SUPPORTS_OBJECT_IDS = 0x10000,FILE_SUPPORTS_ENCRYPTION = 0x20000,};
enum MACRO_FILE_FLAG {FILE_FLAG_WRITE_THROUGH = 0x80000000,FILE_FLAG_OVERLAPPED = 0x40000000,FILE_FLAG_NO_BUFFERING = 0x20000000,FILE_FLAG_RANDOM_ACCESS = 0x10000000,FILE_FLAG_SEQUENTIAL_SCAN = 0x8000000,FILE_FLAG_DELETE_ON_CLOSE = 0x4000000,FILE_FLAG_BACKUP_SEMANTICS = 0x2000000,FILE_FLAG_POSIX_SEMANTICS = 0x1000000,};
enum MACRO_FLDSTATUS {FLDSTATUS_HIGHLIGHTED = 0x1,FLDSTATUS_TAGGED = 0x2,FLDSTATUS_HIDDEN = 0x4,FLDSTATUS_DELMARKED = 0x8,};
enum MACRO_GCS_VERBA {GCS_VERBA = 0x0,GCS_HELPTEXTA = 0x1,GCS_VALIDATEA = 0x2,GCS_VERBW = 0x4,GCS_HELPTEXTW = 0x5,GCS_VALIDATEW = 0x6,GCS_UNICODE = 0x4,GCS_VERB = 0x0,GCS_HELPTEXT = 0x1,GCS_VALIDATE = 0x2,};
enum MACRO_GROUPNAME {GROUPNAME_MAX_LENGTH = 120,};
enum MACRO_HEAP_HIST {HEAP_HIST_BUCKETS = 32,HEAP_HIST_SIZE = 32,};
enum MACRO_HTHSCROLL {HTHSCROLL = 6,};
enum MACRO_HTNOWHERE {HTNOWHERE = 0,HTCLIENT = 1,HTCAPTION = 2,};
enum MACRO_HTSYSMENU {HTSYSMENU = 3,HTGROWBOX = 4,};
enum MACRO_HTTOPLEFT {HTTOPLEFT = 13,};
enum MACRO_HTVSCROLL {HTVSCROLL = 7,HTMINBUTTON = 8,};
enum MACRO_IF_ACCESS {IF_ACCESS_LOOPBACK = 1,IF_ACCESS_BROADCAST = 2,IF_ACCESS_POINTTOPOINT = 3,IF_ACCESS_POINTTOMULTIPOINT = 4,IF_CHECK_NONE = 0,IF_CHECK_MCAST = 1,IF_CHECK_SEND = 2,IF_CONNECTION_DEDICATED = 1,IF_CONNECTION_PASSIVE = 2,IF_CONNECTION_DEMAND = 3,IF_ADMIN_STATUS_UP = 1,IF_ADMIN_STATUS_DOWN = 2,IF_ADMIN_STATUS_TESTING = 3,IF_OPER_STATUS_NON_OPERATIONAL = 0,IF_OPER_STATUS_UNREACHABLE = 1,IF_OPER_STATUS_DISCONNECTED = 2,IF_OPER_STATUS_CONNECTING = 3,IF_OPER_STATUS_CONNECTED = 4,IF_OPER_STATUS_OPERATIONAL = 5,};
enum MACRO_IF_NUMBER {IF_NUMBER = 0,IF_TABLE = 1,IF_ROW = 2,};
enum MACRO_IF_STATUS {IF_STATUS = 25,};
enum MACRO_IMAP_MBOX {IMAP_MBOX_NOFLAGS = 0,IMAP_MBOX_MARKED = 1,IMAP_MBOX_NOINFERIORS = 2,IMAP_MBOX_NOSELECT = 4,IMAP_MBOX_UNMARKED = 8,IMAP_MBOX_ALLFLAGS = 15,IMAP_CAPABILITY_IMAP4 = 1,IMAP_CAPABILITY_IMAP4rev1 = 2,IMAP_CAPABILITY_IDLE = 4,IMAP_CAPABILITY_ALLFLAGS = 7,IMAP_MBOXXLATE_DEFAULT = 0,IMAP_MBOXXLATE_DISABLE = 1,IMAP_MBOXXLATE_DISABLEIMAP4 = 2,IMAP_MBOXXLATE_VERBATIMOK = 4,IMAP_MBOXXLATE_RETAINCP = 8,IMAP_IDLE_DISABLE = 0,IMAP_IDLE_ENABLE = 1,IMAP_FETCHEX_DISABLE = 0,IMAP_FETCHEX_ENABLE = 1,};
enum MACRO_IMECOMPAT {IMECOMPAT_UNSYNC31IMEMSG = 0x1,IMECOMPAT_DUMMYTASK = 0x2,IMECOMPAT_NODUMMYTASK = 0x2,IMECOMPAT_NEEDDUMMYTASK = 0x2,IMECOMPAT_POSTDUMMY = 0x4,IMECOMPAT_ECNOFLUSH = 0x8,IMECOMPAT_NOINPUTLANGCHGTODLG = 0x10,IMECOMPAT_ECREDRAWPARENT = 0x20,IMECOMPAT_SENDOLDSBM = 0x40,IMECOMPAT_UNSYNC31IMEMSG2 = 0x80,IMECOMPAT_NOIMEMSGINTERTASK = 0x100,IMECOMPAT_USEXWANSUNG = 0x200,IMECOMPAT_JXWFORATOK = 0x400,IMECOMPAT_NOIME = 0x800,IMECOMPAT_NOKBDHOOK = 0x1000,IMECOMPAT_APPWNDREMOVEIMEMSGS = 0x2000,IMECOMPAT_LSTRCMP31COMPATIBLE = 0x4000,IMECOMPAT_USEALTSTKFORSHLEXEC = 0x8000,IMECOMPAT_NOVKPROCESSKEY = 0x10000,IMECOMPAT_NOYIELDWMCHAR = 0x20000,IMECOMPAT_SENDSC_RESTORE = 0x40000,IMECOMPAT_NOSENDLANGCHG = 0x80000,IMECOMPAT_FORCEUNSYNC31IMEMSG = 0x100000,IMECOMPAT_CONSOLEIMEPROCESS = 0x200000,};
enum MACRO_IME_CMODE {IME_CMODE_ALPHANUMERIC = 0x0,IME_CMODE_NATIVE = 0x1,IME_CMODE_CHINESE = 0x1,IME_CMODE_HANGEUL = 0x1,IME_CMODE_HANGUL = 0x1,IME_CMODE_JAPANESE = 0x1,IME_CMODE_KATAKANA = 0x2,IME_CMODE_LANGUAGE = 0x3,IME_CMODE_FULLSHAPE = 0x8,IME_CMODE_ROMAN = 0x10,IME_CMODE_CHARCODE = 0x20,IME_CMODE_HANJACONVERT = 0x40,IME_CMODE_SOFTKBD = 0x80,IME_CMODE_NOCONVERSION = 0x100,IME_CMODE_EUDC = 0x200,IME_CMODE_SYMBOL = 0x400,IME_CMODE_PASSWORD = 0x80000000,IME_SMODE_NONE = 0x0,IME_SMODE_PLAURALCLAUSE = 0x1,IME_SMODE_SINGLECONVERT = 0x2,IME_SMODE_AUTOMATIC = 0x4,IME_SMODE_PHRASEPREDICT = 0x8,IME_CAND_UNKNOWN = 0x0,IME_CAND_READ = 0x1,IME_CAND_CODE = 0x2,IME_CAND_MEANING = 0x3,IME_CAND_RADICAL = 0x4,IME_CAND_STROKE = 0x5,};
enum MACRO_IMGDECODE {IMGDECODE_EVENT_PROGRESS = 0x1,IMGDECODE_EVENT_PALETTE = 0x2,IMGDECODE_EVENT_BEGINBITS = 0x4,IMGDECODE_EVENT_BITSCOMPLETE = 0x8,IMGDECODE_EVENT_USEDDRAW = 0x10,IMGDECODE_HINT_TOPDOWN = 0x1,IMGDECODE_HINT_BOTTOMUP = 0x2,IMGDECODE_HINT_FULLWIDTH = 0x4,};
enum MACRO_INHERITED {INHERITED_ACCESS_ENTRY = 0x10,INHERITED_PARENT = 0x10000000,INHERITED_GRANDPARENT = 0x20000000,};
enum MACRO_INTERFACE {INTERFACE_USES_DISPEX = 0x4,INTERFACE_USES_SECURITY_MANAGER = 0x8,};
enum MACRO_INVALID_P {INVALID_P_ROOT_SECURITY_ID = 4294967295,};
enum MACRO_IOCTL_HAL {IOCTL_HAL_SETBUSDATA = 0x1,IOCTL_HAL_GETBUSDATA = 0x2,};
enum MACRO_IOCTL_HID {IOCTL_HID_SET_MODIFIERS = 720900,IOCTL_HID_SET_AUTOREPEAT = 720904,};
enum MACRO_IOCTL_NPW {IOCTL_NPW_SAVE_POWER_STATE = 0x120800,IOCTL_NPW_QUERY_SAVED_POWER_STATE = 0x120804,};
enum MACRO_IP_EXPORT {IP_EXPORT_INCLUDED = 1,};
enum MACRO_IP_STATUS {IP_STATUS_BASE = 11000,IP_SUCCESS = 0,IP_BUF_TOO_SMALL = 11001,IP_DEST_NET_UNREACHABLE = 11002,IP_DEST_HOST_UNREACHABLE = 11003,IP_DEST_PROT_UNREACHABLE = 11004,IP_DEST_PORT_UNREACHABLE = 11005,IP_NO_RESOURCES = 11006,IP_BAD_OPTION = 11007,IP_HW_ERROR = 11008,IP_PACKET_TOO_BIG = 11009,IP_REQ_TIMED_OUT = 11010,IP_BAD_REQ = 11011,IP_BAD_ROUTE = 11012,IP_TTL_EXPIRED_TRANSIT = 11013,IP_TTL_EXPIRED_REASSEM = 11014,IP_PARAM_PROBLEM = 11015,IP_SOURCE_QUENCH = 11016,IP_OPTION_TOO_BIG = 11017,IP_BAD_DESTINATION = 11018,IP_DEST_NO_ROUTE = 11002,IP_DEST_ADDR_UNREACHABLE = 11003,IP_DEST_PROHIBITED = 11004,IP_HOP_LIMIT_EXCEEDED = 11013,IP_REASSEMBLY_TIME_EXCEEDED = 11014,IP_PARAMETER_PROBLEM = 11015,IP_DEST_UNREACHABLE = 11040,IP_TIME_EXCEEDED = 11041,IP_BAD_HEADER = 11042,IP_UNRECOGNIZED_NEXT_HEADER = 11043,IP_ICMP_ERROR = 11044,IP_DEST_SCOPE_MISMATCH = 11045,IP_ADDR_DELETED = 11019,IP_SPEC_MTU_CHANGE = 11020,IP_MTU_CHANGE = 11021,IP_UNLOAD = 11022,IP_ADDR_ADDED = 11023,IP_MEDIA_CONNECT = 11024,IP_MEDIA_DISCONNECT = 11025,IP_BIND_ADAPTER = 11026,IP_UNBIND_ADAPTER = 11027,IP_DEVICE_DOES_NOT_EXIST = 11028,IP_DUPLICATE_ADDRESS = 11029,IP_INTERFACE_METRIC_CHANGE = 11030,IP_RECONFIG_SECFLTR = 11031,IP_NEGOTIATING_IPSEC = 11032,IP_INTERFACE_WOL_CAPABILITY_CHANGE = 11033,IP_DUPLICATE_IPADD = 11034,IP_GENERAL_FAILURE = 11050,};
enum MACRO_ISO_FORCE {ISO_FORCE_OFFLINE = 1,};
enum MACRO_KEYEVENTF {KEYEVENTF_EXTENDEDKEY = 0x1,KEYEVENTF_KEYUP = 0x2,KEYEVENTF_SILENT = 0x4,};
enum MACRO_KNOWLEDGE {KNOWLEDGE_INCONSISTENCY_DETECTED = 0xC00037E9,};
enum MACRO_MAPI_BEST {MAPI_BEST_ACCESS = 0x10,};
enum MACRO_MAPI_MOVE {MAPI_MOVE = 0x1,MAPI_NOREPLACE = 0x2,MAPI_DECLINE_OK = 0x4,MAPI_DIALOG = 0x8,MAPI_USE_DEFAULT = 0x40,MAPI_NO_STRINGS = 0x1,MAPI_NO_IDS = 0x2,};
enum MACRO_MAPI_ORIG {MAPI_ORIG = 0,MAPI_TO = 1,MAPI_CC = 2,MAPI_BCC = 3,MAPI_P1 = 268435456,MAPI_SUBMITTED = -2147483648,MAPI_SHORTTERM = 128,MAPI_NOTRECIP = 64,MAPI_THISSESSION = 32,MAPI_NOW = 16,MAPI_NOTRESERVED = 8,MAPI_COMPOUND = 128,MAPI_STORE = 1,MAPI_ADDRBOOK = 2,MAPI_FOLDER = 3,MAPI_ABCONT = 4,MAPI_MESSAGE = 5,MAPI_MAILUSER = 6,MAPI_ATTACH = 7,MAPI_DISTLIST = 8,MAPI_PROFSECT = 9,MAPI_STATUS = 10,MAPI_SESSION = 11,MAPI_FORMINFO = 12,};
enum MACRO_MAXUIDLEN {MAXUIDLEN = 64,};
enum MACRO_MAX_CACHE {MAX_CACHE_ENTRY_INFO_SIZE = 4096,};
enum MACRO_MAX_DOT11 {MAX_DOT11_ADAPTER_ENUM_COUNT = 100,};
enum MACRO_MAX_ERROR {MAX_ERROR_TEXT_LEN = 160,};
enum MACRO_MAX_QUERY {MAX_QUERY_RANK = 1000,};
enum MACRO_MAX_SCOPE {MAX_SCOPE_NAME_LEN = 255,MAX_MIB_OFFSET = 8,MAX_ADAPTER_DESCRIPTION_LENGTH = 128,MAX_ADAPTER_NAME_LENGTH = 256,MAX_ADAPTER_ADDRESS_LENGTH = 8,};
enum MACRO_MAX_STATE {MAX_STATE_NAMEL = 260,};
enum MACRO_MAX_UUIDS {MAX_UUIDS_IN_QUERY = 12,};
enum MACRO_MCAST_MFE {MCAST_MFE = 18,MCAST_MFE_STATS = 19,};
enum MACRO_MDMEASURE {MDMEASURE_AGGR_UNKNOWN = 0x0,MDMEASURE_AGGR_SUM = 0x1,MDMEASURE_AGGR_COUNT = 0x2,MDMEASURE_AGGR_MIN = 0x3,MDMEASURE_AGGR_MAX = 0x4,MDMEASURE_AGGR_AVG = 0x5,MDMEASURE_AGGR_VAR = 0x6,MDMEASURE_AGGR_STD = 0x7,MDMEASURE_AGGR_CALCULATED = 0x7F,};
enum MACRO_MDPROPVAL {MDPROPVAL_AU_UNSUPPORTED = 0x0,MDPROPVAL_AU_UNCHANGED = 0x1,MDPROPVAL_AU_UNKNOWN = 0x2,MDPROPVAL_MF_WITH_CALCMEMBERS = 0x1,MDPROPVAL_MF_WITH_NAMEDSETS = 0x2,MDPROPVAL_MF_CREATE_CALCMEMBERS = 0x4,MDPROPVAL_MF_CREATE_NAMEDSETS = 0x8,MDPROPVAL_MF_SCOPE_SESSION = 0x10,MDPROPVAL_MF_SCOPE_GLOBAL = 0x20,MDPROPVAL_MMF_COUSIN = 0x1,MDPROPVAL_MMF_PARALLELPERIOD = 0x2,MDPROPVAL_MMF_OPENINGPERIOD = 0x4,MDPROPVAL_MMF_CLOSINGPERIOD = 0x8,MDPROPVAL_MNF_MEDIAN = 0x1,MDPROPVAL_MNF_VAR = 0x2,MDPROPVAL_MNF_STDDEV = 0x4,MDPROPVAL_MNF_RANK = 0x8,MDPROPVAL_MNF_AGGREGATE = 0x10,MDPROPVAL_MNF_COVARIANCE = 0x20,MDPROPVAL_MNF_CORRELATION = 0x40,MDPROPVAL_MNF_LINREGSLOPE = 0x80,MDPROPVAL_MNF_LINREGVARIANCE = 0x100,MDPROPVAL_MNF_LINREG2 = 0x200,MDPROPVAL_MNF_LINREGPOINT = 0x400,MDPROPVAL_MNF_DRILLDOWNLEVEL = 0x800,MDPROPVAL_MNF_DRILLDOWNMEMBERTOP = 0x1000,MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM = 0x2000,MDPROPVAL_MNF_DRILLDOWNLEVELTOP = 0x4000,MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM = 0x8000,MDPROPVAL_MNF_DRILLUPMEMBER = 0x10000,MDPROPVAL_MNF_DRILLUPLEVEL = 0x20000,MDPROPVAL_MSF_TOPPERCENT = 0x1,MDPROPVAL_MSF_BOTTOMPERCENT = 0x2,MDPROPVAL_MSF_TOPSUM = 0x4,MDPROPVAL_MSF_BOTTOMSUM = 0x8,MDPROPVAL_MSF_PERIODSTODATE = 0x10,MDPROPVAL_MSF_LASTPERIODS = 0x20,MDPROPVAL_MSF_YTD = 0x40,MDPROPVAL_MSF_QTD = 0x80,MDPROPVAL_MSF_MTD = 0x100,MDPROPVAL_MSF_WTD = 0x200,MDPROPVAL_MSF_DRILLDOWNMEMBBER = 0x400,MDPROPVAL_MSF_DRILLDOWNLEVEL = 0x800,MDPROPVAL_MSF_DRILLDOWNMEMBERTOP = 0x1000,MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM = 0x2000,MDPROPVAL_MSF_DRILLDOWNLEVELTOP = 0x4000,MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM = 0x8000,MDPROPVAL_MSF_DRILLUPMEMBER = 0x10000,MDPROPVAL_MSF_DRILLUPLEVEL = 0x20000,MDPROPVAL_MSF_TOGGLEDRILLSTATE = 0x40000,MDPROPVAL_MD_SELF = 0x1,MDPROPVAL_MD_BEFORE = 0x2,MDPROPVAL_MD_AFTER = 0x4,MDPROPVAL_MSC_LESSTHAN = 0x1,MDPROPVAL_MSC_GREATERTHAN = 0x2,MDPROPVAL_MSC_LESSTHANEQUAL = 0x4,MDPROPVAL_MSC_GREATERTHANEQUAL = 0x8,MDPROPVAL_MC_SINGLECASE = 0x1,MDPROPVAL_MC_SEARCHEDCASE = 0x2,MDPROPVAL_MOQ_OUTERREFERENCE = 0x1,MDPROPVAL_MOQ_DATASOURCE_CUBE = 0x1,MDPROPVAL_MOQ_CATALOG_CUBE = 0x2,MDPROPVAL_MOQ_SCHEMA_CUBE = 0x4,MDPROPVAL_MOQ_CUBE_DIM = 0x8,MDPROPVAL_MOQ_DIM_HIER = 0x10,MDPROPVAL_MOQ_DIMHIER_LEVEL = 0x20,MDPROPVAL_MOQ_LEVEL_MEMBER = 0x40,MDPROPVAL_MOQ_MEMBER_MEMBER = 0x80,MDPROPVAL_FS_FULL_SUPPORT = 0x1,MDPROPVAL_FS_GENERATED_COLUMN = 0x2,MDPROPVAL_FS_GENERATED_DIMENSION = 0x3,MDPROPVAL_FS_NO_SUPPORT = 0x4,MDPROPVAL_NL_NAMEDLEVELS = 0x1,MDPROPVAL_NL_NUMBEREDLEVELS = 0x2,MDPROPVAL_MJC_SINGLECUBE = 0x1,MDPROPVAL_MJC_MULTICUBES = 0x2,MDPROPVAL_MJC_IMPLICITCUBE = 0x4,MDPROPVAL_RR_NORANGEROWSET = 0x1,MDPROPVAL_RR_READONLY = 0x2,MDPROPVAL_RR_UPDATE = 0x4,MDPROPVAL_MS_MULTIPLETUPLES = 0x1,MDPROPVAL_MS_SINGLETUPLE = 0x2,};
enum MACRO_MEM_IMAGE {MEM_IMAGE = 16777216,};
enum MACRO_MERGECOPY {MERGECOPY = 0xC000CA,};
enum MACRO_MICROSOFT {MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 0x10000,};
enum MACRO_MIXERLINE {MIXERLINE_LINEF_ACTIVE = 0x1,MIXERLINE_LINEF_DISCONNECTED = 0x8000,MIXERLINE_LINEF_SOURCE = 0x80000000,MIXERLINE_COMPONENTTYPE_DST_FIRST = 0x0,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0x0,MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 0x1,MIXERLINE_COMPONENTTYPE_DST_LINE = 0x2,MIXERLINE_COMPONENTTYPE_DST_MONITOR = 0x3,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 0x4,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 0x5,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 0x6,MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 0x7,MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 0x8,MIXERLINE_COMPONENTTYPE_DST_LAST = 0x8,MIXERLINE_COMPONENTTYPE_SRC_FIRST = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 0x1001,MIXERLINE_COMPONENTTYPE_SRC_LINE = 0x1002,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 0x1003,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 0x1004,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 0x1005,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 0x1006,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 0x1007,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 0x1008,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 0x1009,MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 0x100A,MIXERLINE_COMPONENTTYPE_SRC_LAST = 0x100A,MIXERLINE_TARGETTYPE_UNDEFINED = 0x0,MIXERLINE_TARGETTYPE_WAVEOUT = 0x1,MIXERLINE_TARGETTYPE_WAVEIN = 0x2,MIXERLINE_TARGETTYPE_MIDIOUT = 0x3,MIXERLINE_TARGETTYPE_MIDIIN = 0x4,MIXERLINE_TARGETTYPE_AUX = 0x5,};
enum MACRO_MSGSTATUS {MSGSTATUS_HIGHLIGHTED = 0x1,MSGSTATUS_TAGGED = 0x2,MSGSTATUS_HIDDEN = 0x4,MSGSTATUS_DELMARKED = 0x8,MSGSTATUS_REMOTE_DOWNLOAD = 0x1000,MSGSTATUS_REMOTE_DELETE = 0x2000,};
enum MACRO_MSOCMDERR {MSOCMDERR_E_FIRST = -2147221248,MSOCMDERR_E_NOTSUPPORTED = -2147221248,MSOCMDERR_E_DISABLED = -2147221247,MSOCMDERR_E_NOHELP = -2147221246,MSOCMDERR_E_CANCELED = -2147221245,MSOCMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_NDIS_TAPI {NDIS_TAPI_CURRENT_VERSION = 0x30000,NDIS_STATUS_TAPI_ADDRESSBLOCKED = 0xC0012000,NDIS_STATUS_TAPI_BEARERMODEUNAVAIL = 0xC0012001,NDIS_STATUS_TAPI_CALLUNAVAIL = 0xC0012002,NDIS_STATUS_TAPI_DIALBILLING = 0xC0012003,NDIS_STATUS_TAPI_DIALDIALTONE = 0xC0012004,NDIS_STATUS_TAPI_DIALPROMPT = 0xC0012005,NDIS_STATUS_TAPI_DIALQUIET = 0xC0012006,NDIS_STATUS_TAPI_INCOMPATIBLEEXTVERSION = 0xC0012007,NDIS_STATUS_TAPI_INUSE = 0xC0012008,NDIS_STATUS_TAPI_INVALADDRESS = 0xC0012009,NDIS_STATUS_TAPI_INVALADDRESSID = 0xC001200A,NDIS_STATUS_TAPI_INVALADDRESSMODE = 0xC001200B,NDIS_STATUS_TAPI_INVALBEARERMODE = 0xC001200C,NDIS_STATUS_TAPI_INVALCALLHANDLE = 0xC001200D,NDIS_STATUS_TAPI_INVALCALLPARAMS = 0xC001200E,NDIS_STATUS_TAPI_INVALCALLSTATE = 0xC001200F,NDIS_STATUS_TAPI_INVALDEVICECLASS = 0xC0012010,NDIS_STATUS_TAPI_INVALLINEHANDLE = 0xC0012011,NDIS_STATUS_TAPI_INVALLINESTATE = 0xC0012012,NDIS_STATUS_TAPI_INVALMEDIAMODE = 0xC0012013,NDIS_STATUS_TAPI_INVALRATE = 0xC0012014,NDIS_STATUS_TAPI_NODRIVER = 0xC0012015,NDIS_STATUS_TAPI_OPERATIONUNAVAIL = 0xC0012016,NDIS_STATUS_TAPI_RATEUNAVAIL = 0xC0012017,NDIS_STATUS_TAPI_RESOURCEUNAVAIL = 0xC0012018,NDIS_STATUS_TAPI_STRUCTURETOOSMALL = 0xC0012019,NDIS_STATUS_TAPI_USERUSERINFOTOOBIG = 0xC001201A,NDIS_STATUS_TAPI_ALLOCATED = 0xC001201B,NDIS_STATUS_TAPI_INVALADDRESSSTATE = 0xC001201C,NDIS_STATUS_TAPI_INVALPARAM = 0xC001201D,NDIS_STATUS_TAPI_NODEVICE = 0xC001201E,NDIS_STATUS_TAPI_DISCONNECTMODE_NORMAL = 0xC0012020,NDIS_STATUS_TAPI_DISCONNECTMODE_UNKNOWN = 0xC0012021,NDIS_STATUS_TAPI_DISCONNECTMODE_REJECT = 0xC0012022,NDIS_STATUS_TAPI_DISCONNECTMODE_PICKUP = 0xC0012023,NDIS_STATUS_TAPI_DISCONNECTMODE_FORWARDED = 0xC0012024,NDIS_STATUS_TAPI_DISCONNECTMODE_BUSY = 0xC0012025,NDIS_STATUS_TAPI_DISCONNECTMODE_NOANSWER = 0xC0012026,NDIS_STATUS_TAPI_DISCONNECTMODE_BADADDRESS = 0xC0012027,NDIS_STATUS_TAPI_DISCONNECTMODE_UNREACHABLE = 0xC0012028,NDIS_STATUS_TAPI_DISCONNECTMODE_CONGESTION = 0xC0012029,NDIS_STATUS_TAPI_DISCONNECTMODE_INCOMPATIBLE = 0xC001202A,NDIS_STATUS_TAPI_DISCONNECTMODE_UNAVAIL = 0xC001202B,NDIS_STATUS_TAPI_RECV_DIGIT = 0x40010020,};
enum MACRO_NI_NOFQDN {NI_NOFQDN = 0x1,NI_NUMERICHOST = 0x2,NI_NAMEREQD = 0x4,NI_NUMERICSERV = 0x8,NI_DGRAM = 0x10,};
enum MACRO_NUMCOLORS {NUMCOLORS = 24,};
enum MACRO_OID_DOT11 {OID_DOT11_NDIS_START = 0xD010300,OID_DOT11_OFFLOAD_CAPABILITY = 0xD010300,};
enum MACRO_OLECMDERR {OLECMDERR_E_FIRST = -2147221248,OLECMDERR_E_NOTSUPPORTED = -2147221248,OLECMDERR_E_DISABLED = -2147221247,OLECMDERR_E_NOHELP = -2147221246,OLECMDERR_E_CANCELED = -2147221245,OLECMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_OLECREATE {OLECREATE_LEAVERUNNING = 0x1,};
enum MACRO_ONCOMMAND {iitENABLE_ONCOMMAND = 1,iitDISABLE_ONCOMMAND = 0,};
enum MACRO_PARAMFLAG {PARAMFLAG_NONE = 0,PARAMFLAG_FIN = 1,PARAMFLAG_FOUT = 2,PARAMFLAG_FLCID = 4,PARAMFLAG_FRETVAL = 8,PARAMFLAG_FOPT = 16,PARAMFLAG_FHASDEFAULT = 32,PARAMFLAG_FHASCUSTDATA = 64,};
enum MACRO_PARTITION {PARTITION_ATTRIBUTE_EXPENDABLE = 0x1,PARTITION_ATTRIBUTE_READONLY = 0x2,PARTITION_ATTRIBUTE_AUTOFORMAT = 0x4,PARTITION_ATTRIBUTE_ACTIVE = 0x8,PARTITION_ATTRIBUTE_BOOT = 0x8,PARTITION_ATTRIBUTE_MOUNTED = 0x10,};
enum MACRO_PATINVERT {PATINVERT = 0x5A0049,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_IPX = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_VOICEVIEW = 18,PF_FIREFOX = 19,PF_UNKNOWN1 = 20,PF_BAN = 21,PF_ATM = 26,PF_INET6 = 23,};
enum MACRO_POWER_CAP {POWER_CAP_PARENT = 0x1,};
enum MACRO_PP_CLIENT {PP_CLIENT_HWND = 1,PP_CONTEXT_INFO = 11,PP_KEYEXCHANGE_KEYSIZE = 12,PP_SIGNATURE_KEYSIZE = 13,PP_KEYEXCHANGE_ALG = 14,PP_SIGNATURE_ALG = 15,PP_DELETEKEY = 24,};
enum MACRO_PRAllBits {PRAllBits = 7,PRSomeBits = 8,PRAll = 256,PRAny = 512,};
enum MACRO_PRILOWEST {PRILOWEST = -32768,};
enum MACRO_PRIVILEGE {PRIVILEGE_SET_ALL_NECESSARY = 1,};
enum MACRO_PROCESSOR {PROCESSOR_INTEL_386 = 386,PROCESSOR_INTEL_486 = 486,PROCESSOR_INTEL_PENTIUM = 586,PROCESSOR_INTEL_PENTIUMII = 686,PROCESSOR_MIPS_R4000 = 4000,PROCESSOR_MIPS_R5000 = 5000,PROCESSOR_ALPHA_21064 = 21064,PROCESSOR_PPC_403 = 403,PROCESSOR_PPC_601 = 601,PROCESSOR_PPC_603 = 603,PROCESSOR_PPC_604 = 604,PROCESSOR_PPC_620 = 620,PROCESSOR_HITACHI_SH3 = 10003,PROCESSOR_HITACHI_SH3E = 10004,PROCESSOR_HITACHI_SH4 = 10005,PROCESSOR_MOTOROLA_821 = 821,PROCESSOR_SHx_SH3 = 103,PROCESSOR_SHx_SH3DSP = 105,PROCESSOR_SHx_SH4 = 104,PROCESSOR_STRONGARM = 2577,PROCESSOR_ARM720 = 1824,PROCESSOR_ARM820 = 2080,PROCESSOR_ARM920 = 2336,PROCESSOR_ARM_7TDMI = 70001,PROCESSOR_ARCHITECTURE_INTEL = 0,PROCESSOR_ARCHITECTURE_MIPS = 1,PROCESSOR_ARCHITECTURE_ALPHA = 2,PROCESSOR_ARCHITECTURE_PPC = 3,PROCESSOR_ARCHITECTURE_SHX = 4,PROCESSOR_ARCHITECTURE_ARM = 5,PROCESSOR_ARCHITECTURE_IA64 = 6,PROCESSOR_ARCHITECTURE_ALPHA64 = 7,PROCESSOR_ARCHITECTURE_UNKNOWN = 65535,PROCESSOR_X86_32BIT_CORE = 1,PROCESSOR_MIPS16_CORE = 1,PROCESSOR_MIPSII_CORE = 2,PROCESSOR_MIPSIV_CORE = 3,PROCESSOR_HITACHI_SH3_CORE = 1,PROCESSOR_HITACHI_SH4_CORE = 2,PROCESSOR_ARM_V4_CORE = 1,PROCESSOR_ARM_V4I_CORE = 2,PROCESSOR_ARM_V4T_CORE = 3,PROCESSOR_FEATURE_NOFP = 0,PROCESSOR_FEATURE_FP = 1,PROCESSOR_FEATURE_DSP = 1,PROCESSOR_QUERY_INSTRUCTION = 0,PROCESSOR_X86_32BIT_INSTRUCTION = 65537,PROCESSOR_MIPS_MIPS16_INSTRUCTION = 16842752,PROCESSOR_MIPS_MIPSII_INSTRUCTION = 16908288,PROCESSOR_MIPS_MIPSIIFP_INSTRUCTION = 16908289,PROCESSOR_MIPS_MIPSIV_INSTRUCTION = 16973824,PROCESSOR_MIPS_MIPSIVFP_INSTRUCTION = 16973825,PROCESSOR_HITACHI_SH3_INSTRUCTION = 67174400,PROCESSOR_HITACHI_SH3DSP_INSTRUCTION = 67174401,PROCESSOR_HITACHI_SH4_INSTRUCTION = 67239937,PROCESSOR_ARM_V4_INSTRUCTION = 83951616,PROCESSOR_ARM_V4FP_INSTRUCTION = 83951617,PROCESSOR_ARM_V4I_INSTRUCTION = 84017152,PROCESSOR_ARM_V4IFP_INSTRUCTION = 84017153,PROCESSOR_ARM_V4T_INSTRUCTION = 84082688,PROCESSOR_ARM_V4TFP_INSTRUCTION = 84082689,};
enum MACRO_PROPID_QM {PROPID_QM_BASE = 200,PROPID_QM_SITE_ID = 201,PROPID_QM_MACHINE_ID = 202,PROPID_QM_PATHNAME = 203,PROPID_QM_CONNECTION = 204,PROPID_QM_ENCRYPTION_PK = 205,};
enum MACRO_PROP_TYPE {PROP_TYPE_MASK = 0xFFFF,PROP_ID_NULL = 0x0,PROP_ID_INVALID = 0xFFFF,};
enum MACRO_PROXIMITY {PROXIMITY_UNIT_WORD = 0,PROXIMITY_UNIT_SENTENCE = 1,PROXIMITY_UNIT_PARAGRAPH = 2,PROXIMITY_UNIT_CHAPTER = 3,};
enum MACRO_PST_ERROR {MIN_PST_ERROR = 0x800C0001,MAX_PST_ERROR = 0x800C0F00,};
enum MACRO_QUERYFORM {QUERYFORM_CHANGESFORMLIST = 0x1,QUERYFORM_CHANGESOPTFORMLIST = 0x2,};
enum MACRO_RC_BITBLT {RC_BITBLT = 1,RC_BANDING = 2,RC_SCALING = 4,RC_BITMAP64 = 8,RC_GDI20_OUTPUT = 16,RC_GDI20_STATE = 32,RC_SAVEBITMAP = 64,RC_DI_BITMAP = 128,RC_PALETTE = 256,RC_DIBTODEV = 512,RC_BIGFONT = 1024,RC_STRETCHBLT = 2048,RC_STRETCHDIB = 8192,RC_OP_DX_OUTPUT = 16384,RC_DEVBITS = 32768,};
enum MACRO_RECURSIVE {RECURSIVE_SORT = 0x2,};
enum MACRO_RPC_FLAGS {RPC_FLAGS_VALID_BIT = 0x8000,};
enum MACRO_RUNDLGORD {RUNDLGORD = 1545,};
enum MACRO_SCARD_ATR {SCARD_ATR_LENGTH = 33,SCARD_PROTOCOL_UNDEFINED = 0,SCARD_PROTOCOL_T0 = 1,SCARD_PROTOCOL_T1 = 2,SCARD_PROTOCOL_RAW = 65536,SCARD_PROTOCOL_Tx = 3,SCARD_PROTOCOL_DEFAULT = -2147483648,SCARD_PROTOCOL_OPTIMAL = 0,SCARD_POWER_DOWN = 0,SCARD_COLD_RESET = 1,SCARD_WARM_RESET = 2,};
enum MACRO_SDP_ERROR {SDP_ERROR_INVALID_SDP_VERSION = 0x1,SDP_ERROR_INVALID_RECORD_HANDLE = 0x2,SDP_ERROR_INVALID_REQUEST_SYNTAX = 0x3,SDP_ERROR_INVALID_PDU_SIZE = 0x4,SDP_ERROR_INVALID_CONTINUATION_STATE = 0x5,SDP_ERROR_INSUFFICIENT_RESOURCES = 0x6,SDP_ATTRIB_RECORD_HANDLE = 0x0,SDP_ATTRIB_CLASS_ID_LIST = 0x1,SDP_ATTRIB_RECORD_STATE = 0x2,SDP_ATTRIB_SERVICE_ID = 0x3,SDP_ATTRIB_PROTOCOL_DESCRIPTOR_LIST = 0x4,SDP_ATTRIB_BROWSE_GROUP_LIST = 0x5,SDP_ATTRIB_LANG_BASE_ATTRIB_ID_LIST = 0x6,SDP_ATTRIB_INFO_TIME_TO_LIVE = 0x7,SDP_ATTRIB_AVAILABILITY = 0x8,SDP_ATTRIB_PROFILE_DESCRIPTOR_LIST = 0x9,SDP_ATTRIB_DOCUMENTATION_URL = 0xA,SDP_ATTRIB_CLIENT_EXECUTABLE_URL = 0xB,SDP_ATTRIB_ICON_URL = 0xC,SDP_ATTRIB_PROFILE_SPECIFIC = 0x200,};
enum MACRO_SECBUFFER {SECBUFFER_VERSION = 0,SECBUFFER_EMPTY = 0,SECBUFFER_DATA = 1,SECBUFFER_TOKEN = 2,SECBUFFER_PKG_PARAMS = 3,SECBUFFER_MISSING = 4,SECBUFFER_EXTRA = 5,SECBUFFER_STREAM_TRAILER = 6,SECBUFFER_STREAM_HEADER = 7,SECBUFFER_NEGOTIATION_INFO = 8,SECBUFFER_PADDING = 9,SECBUFFER_STREAM = 10,SECBUFFER_ATTRMASK = -268435456,SECBUFFER_READONLY = -2147483648,SECBUFFER_RESERVED = 1073741824,};
enum MACRO_SEC_WINNT {SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,};
enum MACRO_SEMAPHORE {SEMAPHORE_MODIFY_STATE = 0x2,SEMAPHORE_ALL_ACCESS = 0x1F0003,};
enum MACRO_SETACTION {SETACTION_NONE = 0x0,SETACTION_INSTALL = 0x1,};
enum MACRO_SIGNATURE {SIGNATURE_RESOURCE_NUMBER = 0x29A,};
enum MACRO_SOL_IRLMP {SOL_IRLMP = 0xFF,};
enum MACRO_SOMAXCONN {SOMAXCONN = 0x7FFFFFFF,};
enum MACRO_SO_SECURE {SO_SECURE = 0x2001,SO_SEC_NONE = 0x2002,SO_SEC_SSL = 0x2004,};
enum MACRO_SP_PARITY {SP_PARITY = 0x1,SP_BAUD = 0x2,SP_DATABITS = 0x4,SP_STOPBITS = 0x8,SP_HANDSHAKING = 0x10,SP_PARITY_CHECK = 0x20,SP_RLSD = 0x40,};
enum MACRO_SRCINVERT {SRCINVERT = 0x660046,};
enum MACRO_STATUSROW {STATUSROW_UPDATE = 0x10000000,};
enum MACRO_STDDISPID {STDDISPID_XOBJ_ONBLUR = -2147418112,STDDISPID_XOBJ_ONFOCUS = -2147418111,STDDISPID_XOBJ_BEFOREUPDATE = -2147418108,STDDISPID_XOBJ_AFTERUPDATE = -2147418107,STDDISPID_XOBJ_ONROWEXIT = -2147418106,STDDISPID_XOBJ_ONROWENTER = -2147418105,STDDISPID_XOBJ_ONMOUSEOVER = -2147418104,STDDISPID_XOBJ_ONMOUSEOUT = -2147418103,STDDISPID_XOBJ_ONHELP = -2147418102,STDDISPID_XOBJ_ONDRAGSTART = -2147418101,STDDISPID_XOBJ_ONSELECTSTART = -2147418100,STDDISPID_XOBJ_ERRORUPDATE = -2147418099,STDDISPID_XOBJ_ONDATASETCHANGED = -2147418098,STDDISPID_XOBJ_ONDATAAVAILABLE = -2147418097,STDDISPID_XOBJ_ONDATASETCOMPLETE = -2147418096,STDDISPID_XOBJ_ONFILTER = -2147418095,STDDISPID_XOBJ_ONLOSECAPTURE = -2147418094,STDDISPID_XOBJ_ONPROPERTYCHANGE = -2147418093,STDDISPID_XOBJ_ONDRAG = -2147418092,STDDISPID_XOBJ_ONDRAGEND = -2147418091,STDDISPID_XOBJ_ONDRAGENTER = -2147418090,STDDISPID_XOBJ_ONDRAGOVER = -2147418089,STDDISPID_XOBJ_ONDRAGLEAVE = -2147418088,STDDISPID_XOBJ_ONDROP = -2147418087,STDDISPID_XOBJ_ONCUT = -2147418086,STDDISPID_XOBJ_ONCOPY = -2147418085,STDDISPID_XOBJ_ONPASTE = -2147418084,STDDISPID_XOBJ_ONBEFORECUT = -2147418083,STDDISPID_XOBJ_ONBEFORECOPY = -2147418082,STDDISPID_XOBJ_ONBEFOREPASTE = -2147418081,STDDISPID_XOBJ_ONROWSDELETE = -2147418080,STDDISPID_XOBJ_ONROWSINSERTED = -2147418079,STDDISPID_XOBJ_ONCELLCHANGE = -2147418078,};
enum MACRO_STDPROPID {STDPROPID_XOBJ_NAME = 0x80010000,STDPROPID_XOBJ_INDEX = 0x80010001,STDPROPID_IE3XOBJ_OBJECTALIGN = 0x80010001,STDPROPID_XOBJ_BASEHREF = 0x80010002,STDPROPID_XOBJ_LEFT = 0x80010003,STDPROPID_XOBJ_TOP = 0x80010004,STDPROPID_XOBJ_WIDTH = 0x80010005,STDPROPID_XOBJ_HEIGHT = 0x80010006,STDPROPID_XOBJ_VISIBLE = 0x80010007,STDPROPID_XOBJ_PARENT = 0x80010008,STDPROPID_XOBJ_DRAGMODE = 0x80010009,STDPROPID_XOBJ_DRAGICON = 0x8001000A,STDPROPID_XOBJ_TAG = 0x8001000B,STDPROPID_XOBJ_TABSTOP = 0x8001000E,STDPROPID_XOBJ_TABINDEX = 0x8001000F,STDPROPID_XOBJ_HELPCONTEXTID = 0x80010032,STDPROPID_XOBJ_DEFAULT = 0x80010037,STDPROPID_XOBJ_CANCEL = 0x80010038,STDPROPID_XOBJ_LEFTNORUN = 0x80010039,STDPROPID_XOBJ_TOPNORUN = 0x8001003A,STDPROPID_XOBJ_ALIGNPERSIST = 0x8001003C,STDPROPID_XOBJ_LINKTIMEOUT = 0x8001003D,STDPROPID_XOBJ_LINKTOPIC = 0x8001003E,STDPROPID_XOBJ_LINKITEM = 0x8001003F,STDPROPID_XOBJ_LINKMODE = 0x80010040,STDPROPID_XOBJ_DATACHANGED = 0x80010041,STDPROPID_XOBJ_DATAFIELD = 0x80010042,STDPROPID_XOBJ_DATASOURCE = 0x80010043,STDPROPID_XOBJ_WHATSTHISHELPID = 0x80010044,STDPROPID_XOBJ_CONTROLTIPTEXT = 0x80010045,STDPROPID_XOBJ_STATUSBARTEXT = 0x80010046,STDPROPID_XOBJ_APPLICATION = 0x80010047,STDPROPID_XOBJ_BLOCKALIGN = 0x80010048,STDPROPID_XOBJ_CONTROLALIGN = 0x80010049,STDPROPID_XOBJ_STYLE = 0x8001004A,STDPROPID_XOBJ_COUNT = 0x8001004B,STDPROPID_XOBJ_DISABLED = 0x8001004C,STDPROPID_XOBJ_RIGHT = 0x8001004D,STDPROPID_XOBJ_BOTTOM = 0x8001004E,};
enum MACRO_SYSHANDLE {SYSHANDLE_OFFSET = 0x4,};
enum MACRO_SYS_COLOR {SYS_COLOR_INDEX_FLAG = 0x40000000,};
enum MACRO_S_SURFACE {S_SURFACE_DISCARDED = 0xC003,};
enum MACRO_S_SYNCMGR {S_SYNCMGR_MISSINGITEMS = 0x40201,S_SYNCMGR_RETRYSYNC = 0x40202,S_SYNCMGR_CANCELITEM = 0x40203,S_SYNCMGR_CANCELALL = 0x40204,S_SYNCMGR_ITEMDELETED = 0x40210,S_SYNCMGR_ENUMITEMS = 0x40211,};
enum MACRO_TB_LINEUP {TB_LINEUP = 0,TB_LINEDOWN = 1,TB_PAGEUP = 2,TB_PAGEDOWN = 3,TB_THUMBPOSITION = 4,TB_THUMBTRACK = 5,TB_TOP = 6,TB_BOTTOM = 7,TB_ENDTRACK = 8,};
enum MACRO_TCP_TABLE {TCP_TABLE = 13,TCP_ROW = 14,};
enum MACRO_TOOLSBAND {TOOLSBAND = 0x1,ADDRESSBAND = 0x2,LINKSBAND = 0x4,};
enum MACRO_TRANSPORT {TRANSPORT_TYPE_CN = 0x1,TRANSPORT_TYPE_DG = 0x2,TRANSPORT_TYPE_LPC = 0x4,TRANSPORT_TYPE_WMSG = 0x8,};
enum MACRO_TR_LENGTH {TR_LENGTH_OF_FUNCTIONAL = 4,TR_LENGTH_OF_ADDRESS = 6,};
enum MACRO_UDP_STATS {UDP_STATS = 15,UDP_TABLE = 16,UDP_ROW = 17,};
enum MACRO_UPDFCACHE {UPDFCACHE_NODATACACHE = 0x1,UPDFCACHE_ONSAVECACHE = 0x2,UPDFCACHE_ONSTOPCACHE = 0x4,UPDFCACHE_NORMALCACHE = 0x8,UPDFCACHE_IFBLANK = 0x10,UPDFCACHE_ONLYIFBLANK = 0x80000000,UPDFCACHE_IFBLANKORONSAVECACHE = 0x12,UPDFCACHE_ALL = 0x7FFFFFFF,UPDFCACHE_ALLBUTNODATACACHE = 0x7FFFFFFE,};
enum MACRO_URLACTION {URLACTION_MIN = 0x1000,URLACTION_DOWNLOAD_MIN = 0x1000,URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 0x1001,URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 0x1004,URLACTION_DOWNLOAD_CURR_MAX = 0x1004,URLACTION_DOWNLOAD_MAX = 0x11FF,URLACTION_ACTIVEX_MIN = 0x1200,URLACTION_ACTIVEX_RUN = 0x1200,};
enum MACRO_URLPOLICY {URLPOLICY_ACTIVEX_CHECK_LIST = 0x10000,};
enum MACRO_VK_TSOFT1 {VK_TSOFT1 = 112,VK_TSOFT2 = 113,VK_TTALK = 114,VK_TEND = 115,VK_THOME = 91,VK_TBACK = 27,VK_TACTION = 13,VK_TRECORD = 121,VK_TFLIP = 128,VK_TPOWER = 129,VK_TVOLUMEUP = 117,VK_TVOLUMEDOWN = 118,VK_TUP = 38,VK_TDOWN = 40,VK_TLEFT = 37,VK_TRIGHT = 39,VK_T0 = 48,VK_T1 = 49,VK_T2 = 50,VK_T3 = 51,VK_T4 = 52,VK_T5 = 53,VK_T6 = 54,VK_T7 = 55,VK_T8 = 56,VK_T9 = 57,VK_TSTAR = 119,VK_TPOUND = 120,VK_SYMBOL = 122,VK_REDKEY = 130,VK_ROCKER = 131,VK_DPAD = 132,VK_ACTION = 134,VK_DONE = 117,};
enum MACRO_WABOBJECT {WABOBJECT_LDAPURL_RETURN_MAILUSER = 0x1,WABOBJECT_ME_NEW = 0x1,WABOBJECT_ME_NOCREATE = 0x2,};
enum MACRO_WAB_VCARD {WAB_VCARD_FILE = 0x0,WAB_VCARD_STREAM = 0x1,WAB_USE_OE_SENDMAIL = 0x1,WAB_ENABLE_PROFILES = 0x400000,WAB_DISPLAY_LDAPURL = 0x1,WAB_CONTEXT_ADRLIST = 0x2,WAB_DISPLAY_ISNTDS = 0x4,};
enum MACRO_WHITENESS {WHITENESS = 0xFF0062,};
enum MACRO_WS_NOTIFY {WS_NOTIFY = 0x8,};
enum MACRO_X509_BITS {X509_BITS_WITHOUT_TRAILING_ZEROES = 51,};
enum MACRO_X509_CERT {X509_CERT = 1,X509_CERT_TO_BE_SIGNED = 2,X509_CERT_CRL_TO_BE_SIGNED = 3,X509_CERT_REQUEST_TO_BE_SIGNED = 4,X509_EXTENSIONS = 5,X509_NAME_VALUE = 6,X509_NAME = 7,X509_PUBLIC_KEY_INFO = 8,X509_AUTHORITY_KEY_ID = 9,X509_KEY_ATTRIBUTES = 10,X509_KEY_USAGE_RESTRICTION = 11,X509_ALTERNATE_NAME = 12,X509_BASIC_CONSTRAINTS = 13,X509_KEY_USAGE = 14,X509_BASIC_CONSTRAINTS2 = 15,X509_CERT_POLICIES = 16,};
enum MACRO_X509_PKIX {X509_PKIX_POLICY_QUALIFIER_USERNOTICE = 46,X509_DH_PUBLICKEY = 38,X509_DH_PARAMETERS = 47,};
enum MACRO__LEADBYTE {_LEADBYTE = 0x8000,};
enum MACRO__WIN32_IE {_WIN32_IE = 0x501,};
enum MACRO___service {__service_H__ = 1,};
enum MACRO_hrSuccess {hrSuccess = 0,};
typedef struct _MIBICMPSTATS_EX MIBICMPSTATS_EX;
typedef struct _A2D3C6DF54C31D821ABE78046EA78F8E MIB_BOUNDARYROW;
typedef struct _MIB_IPADDRTABLE MIB_IPADDRTABLE;
typedef struct _MIB_IPDESTTABLE MIB_IPDESTTABLE;
typedef struct _MIB_IPMCAST_MFE MIB_IPMCAST_MFE;
typedef struct _MIB_IPMCAST_OIF MIB_IPMCAST_OIF;
typedef struct _MIB_OPAQUE_INFO MIB_OPAQUE_INFO;
typedef struct midiproptimediv_tag MIDIPROPTIMEDIV;
typedef struct midistrmbuffver_tag MIDISTRMBUFFVER;
typedef struct mpeg1waveformat_tag MPEG1WAVEFORMAT;
enum MPMediaInfoType {mpShowFilename = 0x0,mpShowTitle = 0x1,mpShowAuthor = 0x2,mpShowCopyright = 0x3,mpShowRating = 0x4,mpShowDescription = 0x5,mpShowLogoIcon = 0x6,mpClipFilename = 0x7,mpClipTitle = 0x8,mpClipAuthor = 0x9,mpClipCopyright = 0xA,mpClipRating = 0xB,mpClipDescription = 0xC,mpClipLogoIcon = 0xD,mpBannerImage = 0xE,mpBannerMoreInfo = 0xF,mpWatermark = 0x10,};
typedef struct MSGQUEUEOPTIONS_OS MSGQUEUEOPTIONS;
typedef void  MSR_CONTROLPROC(int iAction);
typedef struct _NDISUIO_SET_OID NDISUIO_SET_OID;
typedef struct _NDIS_802_11_KEY NDIS_802_11_KEY;
typedef struct _NDIS_802_11_WEP NDIS_802_11_WEP;
typedef struct _NDIS_TAPI_CLOSE NDIS_TAPI_CLOSE;
typedef struct _NDIS_TAPI_EVENT NDIS_TAPI_EVENT;
typedef struct _NDIS_WLAN_BSSID NDIS_WLAN_BSSID;
typedef struct _NETWORK_ADDRESS NETWORK_ADDRESS;
typedef struct tagNODERESTRICTION NODERESTRICTION;
typedef struct _NOTIFYICONDATAA NOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW NOTIFYICONDATAW;
typedef struct tagCANDIDATEFORM *NPCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *NPCANDIDATEINFO;
typedef struct tagCANDIDATELIST *NPCANDIDATELIST;
typedef struct tagDRVCONFIGINFO *NPDRVCONFIGINFO;
typedef struct tagREGISTERWORDA *NPREGISTERWORDA;
typedef struct tagREGISTERWORDW *NPREGISTERWORDW;
typedef int OLE_XPOS_PIXELS;
typedef int OLE_YPOS_PIXELS;
struct OldHTMLDocument;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO;
typedef struct tACMDRVOPENDESC *PACMDRVOPENDESC;
typedef IAMStreamSelect *PAMSTREAMSELECT;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 *PAM_AC3_DOWNMIX;
typedef struct arp_send_reply *PARP_SEND_REPLY;
typedef struct tagBITMAPCOREINFO *PBITMAPCOREINFO;
typedef struct _BTH_SNIFF_MODE *PBTH_SNIFF_MODE;
typedef struct _CAT_MEMBERINFO *PCAT_MEMBERINFO;
typedef struct __CEL_HEAP_ALLOC *PCEL_HEAP_ALLOC;
typedef struct __CEL_INTERRUPTS *PCEL_INTERRUPTS;
typedef struct __CEL_LOG_MARKER *PCEL_LOG_MARKER;
typedef struct __CEL_SEM_CREATE *PCEL_SEM_CREATE;
typedef struct __CEL_SEM_DELETE *PCEL_SEM_DELETE;
typedef struct __CEL_SYSTEM_TLB *PCEL_SYSTEM_TLB;
typedef struct __CEL_WAIT_MULTI *PCEL_WAIT_MULTI;
typedef struct _CENOTIFICATION *PCENOTIFICATION;
typedef struct _CERT_EXTENSION *PCERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO *PCERT_NAME_INFO;
typedef struct _CERT_POLICY_ID *PCERT_POLICY_ID;
typedef struct _PCI_SLOT_NUMBER PCI_SLOT_NUMBER;
typedef  char *PCInterfaceName;
typedef struct tagCOPYDATASTRUCT *PCOPYDATASTRUCT;
typedef struct _CO_AF_TAPI_SAP *PCO_AF_TAPI_SAP;
typedef struct _CRL_DIST_POINT *PCRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO *PCRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO *PCRYPT_URL_INFO;
typedef struct _DISPLAY_DEVICE *PDISPLAY_DEVICE;
typedef struct _DMA_OPERATIONS *PDMA_OPERATIONS;
typedef struct _DOT11_BSS_LIST *PDOT11_BSS_LIST;
typedef struct _DOT11_PHY_LIST *PDOT11_PHY_LIST;
typedef struct _DOT11_RATE_SET *PDOT11_RATE_SET;
typedef struct tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;
typedef void (*PDRIVER_STARTIO)(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp);
typedef struct __MIDL_IEnumDVD_CELL_PIECE_0001 *PDVD_CELL_PIECE;
typedef IEnumMediaTypes *PENUMMEDIATYPES;
typedef IEnumRegFilters *PENUMREGFILTERS;
typedef struct _EVENTLOGRECORD *PEVENTLOGRECORD;
typedef IFileSinkFilter *PFILTERFILESINK;
typedef struct phonebuttoninfo_tag PHONEBUTTONINFO;
typedef struct _IP_ADDR_STRING *PIP_ADDR_STRING;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 *PIP_MASK_STRING;
typedef struct _ISA_PNP_CONFIG *PISA_PNP_CONFIG;
typedef struct _LINE_CALL_INFO *PLINE_CALL_INFO;
typedef struct _LMEM_HEAP_INFO *PLMEM_HEAP_INFO;
typedef IMediaEventSink *PMEDIAEVENTSINK;
typedef struct _MIB_IPNETTABLE *PMIB_IPNETTABLE;
typedef struct _MIB_ROUTESTATE *PMIB_ROUTESTATE;
typedef void *PMIDL_XMIT_TYPE;
typedef IMLangCodePages *PMLANGCODEPAGES;
typedef IMLangFontLink2 *PMLANGFONTLINK2;
typedef struct _NDIS_TAPI_DIAL *PNDIS_TAPI_DIAL;
typedef struct _NDIS_TAPI_DROP *PNDIS_TAPI_DROP;
typedef struct _NDIS_TAPI_OPEN *PNDIS_TAPI_OPEN;
typedef struct tagNEWTEXTMETRICA *PNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *PNEWTEXTMETRICW;
typedef struct _8F75023966CB92194279486244E09366 *PNIC_STATISTICS;
typedef struct _OSVERSIONINFOA *POSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *POSVERSIONINFOW;
typedef struct _POWER_BROADCAST POWER_BROADCAST;
typedef struct _PARSED_CFTABLE *PPARSED_CFTABLE;
typedef struct _PERUSERSECTION *PPERUSERSECTION;
typedef struct _PPP_EAP_OUTPUT *PPPP_EAP_OUTPUT;
typedef struct _PPP_EAP_PACKET *PPPP_EAP_PACKET;
typedef struct tagPROCESSENTRY32 *PPROCESSENTRY32;
typedef struct _PST_ACCESSRULE *PPST_ACCESSRULE;
typedef struct _PST_PROMPTINFO *PPST_PROMPTINFO;
typedef IQualityControl *PQUALITYCONTROL;
typedef IReferenceClock *PREFERENCECLOCK;
typedef struct _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;
typedef struct tagSCRIPFONTINFO *PSCRIPTFONTINFO;
typedef struct _B39C686D84F1EA3E9B3743A81E5F4B95 *PSHACTIVATEINFO;
typedef struct _SOCKET_ADDRESS *PSOCKET_ADDRESS;
typedef struct _UNICODE_STRING *PUNICODE_STRING;
typedef struct _WCE_DEVICELIST *PWCE_DEVICELIST;
typedef struct _WL_ASSOCIATION *PWL_ASSOCIATION;
typedef struct tagX509CERTRESULT *PX509CERTRESULT;
typedef struct tagRANGECATEGORIZE RANGECATEGORIZE;
typedef struct tagRECONVERTSTRING RECONVERTSTRING;
typedef struct _RPC_ASYNC_STATE RPC_ASYNC_STATE;
typedef void  RPC_CLIENT_FREE(void *Ptr);
enum RTC_ANSWER_MODE {RTCAM_OFFER_SESSION_EVENT = 0x0,RTCAM_AUTOMATICALLY_ACCEPT = 0x1,RTCAM_AUTOMATICALLY_REJECT = 0x2,RTCAM_NOT_SUPPORTED = 0x3,};
enum RTC_LISTEN_MODE {RTCLM_NONE = 0x0,RTCLM_DYNAMIC = 0x1,RTCLM_BOTH = 0x2,};
enum RTC_T120_APPLET {RTCTA_WHITEBOARD = 0x0,RTCTA_APPSHARING = 0x1,};
typedef struct _RTL_SPLAY_LINKS RTL_SPLAY_LINKS;
typedef struct tagRemHENHMETAFILE RemHENHMETAFILE;
typedef struct _RemotableHandle RemotableHandle;
typedef struct _wireSAFEARR_BRECORD SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
typedef struct _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_VARIANT SAFEARR_VARIANT;
struct SAXAttributes30;
typedef struct _SAndRestriction SAndRestriction;
typedef struct _SECURITY_STRING SECURITY_STRING;
enum SF_PROPERTY_IIS {SF_PROPERTY_SSL_CTXT = 0x0,SF_PROPERTY_INSTANCE_NUM_ID = 0x1,};
typedef struct _SHDESCRIPTIONID SHDESCRIPTIONID;
typedef struct _SHFILEOPSTRUCTA SHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW SHFILEOPSTRUCTW;
typedef struct _33F4F007281270209645FC22B7FA2C59 SITEQUERYPARAMS;
typedef struct _SNotRestriction SNotRestriction;
typedef struct _SORTORDERSPECEX SORTORDERSPECEX;
typedef struct _SSubRestriction SSubRestriction;
struct ServerXMLHTTP30;
typedef struct _ServiceEnumInfo ServiceEnumInfo;
struct ShellAppManager;
struct ShellFolderItem;
struct ShellFolderView;
struct ShellLinkObject;
struct SubscriptionMgr;
typedef struct _DD2E0983FBF83F36606C69DABA2BC276 TBREPLACEBITMAP;
typedef struct tagTIMECODE_SAMPLE TIMECODE_SAMPLE;
typedef struct _TRUSTEE_ACCESSA TRUSTEE_ACCESSA;
typedef struct _TRUSTEE_ACCESSW TRUSTEE_ACCESSW;
typedef struct tagTVINSERTSTRUCTA TVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW TVINSERTSTRUCTW;
typedef struct _BC2FB811D417144E831EE3AEA4A279C8 URL_COMPONENTSA;
typedef struct _2B4FDC4BF487E67F052937EE78FAE255 URL_COMPONENTSW;
typedef struct _USER_MARSHAL_CB USER_MARSHAL_CB;
typedef struct tagVersionedStream VERSIONEDSTREAM;
typedef struct tagVIDEOINFOHEADER VIDEOINFOHEADER;
typedef struct _VIDEOPARAMETERS VIDEOPARAMETERS;
typedef struct _VTableProvStruc VTableProvStruc;
enum VoIPSystemEvent {e_vseInvalid = 0x0,e_vseTerminated = 0x1,e_vseRegistering = 0x2,e_vseRegistrationSucceeded = 0x3,e_vseRegistrationFailed = 0x4,};
typedef struct _WINDOWS_IAS_SET WINDOWS_IAS_SET;
typedef struct _WIN_CERTIFICATE WIN_CERTIFICATE;
typedef struct _WSANSClassInfoA WSANSCLASSINFOA;
typedef struct _WSANSClassInfoW WSANSCLASSINFOW;
struct WebCrawlerAgent;
typedef struct _X509Certificate X509Certificate;
enum _BEHAVIOR_EVENT {BEHAVIOREVENT_FIRST = 0x0,BEHAVIOREVENT_CONTENTREADY = 0x0,BEHAVIOREVENT_DOCUMENTREADY = 0x1,BEHAVIOREVENT_APPLYSTYLE = 0x2,BEHAVIOREVENT_DOCUMENTCONTEXTCHANGE = 0x3,BEHAVIOREVENT_CONTENTSAVE = 0x4,BEHAVIOREVENT_LAST = 0x4,BEHAVIOR_EVENT_Max = 0x7FFFFFFF,};
struct _BTH_SNIFF_MODE {unsigned short sniff_mode_max;unsigned short sniff_mode_min;unsigned short sniff_attempt;unsigned short sniff_timeout;unsigned short interval;};
enum _D3DZBUFFERTYPE {D3DZB_FALSE = 0x0,D3DZB_TRUE = 0x1,D3DZB_USEW = 0x2,D3DZB_FORCE_DWORD = 0x7FFFFFFF,};
enum _DOT11_BSS_TYPE {dot11_BSS_type_infrastructure = 0x1,dot11_BSS_type_independent = 0x2,dot11_BSS_type_any = 0x3,};
enum _DOT11_PHY_TYPE {dot11_phy_type_unknown = 0x0,dot11_phy_type_fhss = 0x1,dot11_phy_type_dsss = 0x2,dot11_phy_type_irbaseband = 0x3,dot11_phy_type_ofdm = 0x4,dot11_phy_type_hrdsss = 0x5,};
enum _ELEMENT_CORNER {ELEMENT_CORNER_NONE = 0x0,ELEMENT_CORNER_TOP = 0x1,ELEMENT_CORNER_LEFT = 0x2,ELEMENT_CORNER_BOTTOM = 0x3,ELEMENT_CORNER_RIGHT = 0x4,ELEMENT_CORNER_TOPLEFT = 0x5,ELEMENT_CORNER_TOPRIGHT = 0x6,ELEMENT_CORNER_BOTTOMLEFT = 0x7,ELEMENT_CORNER_BOTTOMRIGHT = 0x8,ELEMENT_CORNER_Max = 0x7FFFFFFF,};
enum _ELEMENT_TAG_ID {TAGID_NULL = 0x0,TAGID_UNKNOWN = 0x1,TAGID_A = 0x2,TAGID_ACRONYM = 0x3,TAGID_ADDRESS = 0x4,TAGID_APPLET = 0x5,TAGID_AREA = 0x6,TAGID_B = 0x7,TAGID_BASE = 0x8,TAGID_BASEFONT = 0x9,TAGID_BDO = 0xA,TAGID_BGSOUND = 0xB,TAGID_BIG = 0xC,TAGID_BLINK = 0xD,TAGID_BLOCKQUOTE = 0xE,TAGID_BODY = 0xF,TAGID_BR = 0x10,TAGID_BUTTON = 0x11,TAGID_CAPTION = 0x12,TAGID_CENTER = 0x13,TAGID_CITE = 0x14,TAGID_CODE = 0x15,TAGID_COL = 0x16,TAGID_COLGROUP = 0x17,TAGID_COMMENT = 0x18,TAGID_COMMENT_RAW = 0x19,TAGID_DD = 0x1A,TAGID_DEL = 0x1B,TAGID_DFN = 0x1C,TAGID_DIR = 0x1D,TAGID_DIV = 0x1E,TAGID_DL = 0x1F,TAGID_DT = 0x20,TAGID_EM = 0x21,TAGID_EMBED = 0x22,TAGID_FIELDSET = 0x23,TAGID_FONT = 0x24,TAGID_FORM = 0x25,TAGID_FRAME = 0x26,TAGID_FRAMESET = 0x27,TAGID_GENERIC = 0x28,TAGID_H1 = 0x29,TAGID_H2 = 0x2A,TAGID_H3 = 0x2B,TAGID_H4 = 0x2C,TAGID_H5 = 0x2D,TAGID_H6 = 0x2E,TAGID_HEAD = 0x2F,TAGID_HR = 0x30,TAGID_HTML = 0x31,TAGID_I = 0x32,TAGID_IFRAME = 0x33,TAGID_IMG = 0x34,TAGID_INPUT = 0x35,TAGID_INS = 0x36,TAGID_KBD = 0x37,TAGID_LABEL = 0x38,TAGID_LEGEND = 0x39,TAGID_LI = 0x3A,TAGID_LINK = 0x3B,TAGID_LISTING = 0x3C,TAGID_MAP = 0x3D,TAGID_MARQUEE = 0x3E,TAGID_MENU = 0x3F,TAGID_META = 0x40,TAGID_NEXTID = 0x41,TAGID_NOBR = 0x42,TAGID_NOEMBED = 0x43,TAGID_NOFRAMES = 0x44,TAGID_NOSCRIPT = 0x45,TAGID_OBJECT = 0x46,TAGID_OL = 0x47,TAGID_OPTION = 0x48,TAGID_P = 0x49,TAGID_PARAM = 0x4A,TAGID_PLAINTEXT = 0x4B,TAGID_PRE = 0x4C,TAGID_Q = 0x4D,TAGID_RP = 0x4E,TAGID_RT = 0x4F,TAGID_RUBY = 0x50,TAGID_S = 0x51,TAGID_SAMP = 0x52,TAGID_SCRIPT = 0x53,TAGID_SELECT = 0x54,TAGID_SMALL = 0x55,TAGID_SPAN = 0x56,TAGID_STRIKE = 0x57,TAGID_STRONG = 0x58,TAGID_STYLE = 0x59,TAGID_SUB = 0x5A,TAGID_SUP = 0x5B,TAGID_TABLE = 0x5C,TAGID_TBODY = 0x5D,TAGID_TC = 0x5E,TAGID_TD = 0x5F,TAGID_TEXTAREA = 0x60,TAGID_TFOOT = 0x61,TAGID_TH = 0x62,TAGID_THEAD = 0x63,TAGID_TITLE = 0x64,TAGID_TR = 0x65,TAGID_TT = 0x66,TAGID_U = 0x67,TAGID_UL = 0x68,TAGID_VAR = 0x69,TAGID_WBR = 0x6A,TAGID_XMP = 0x6B,TAGID_ROOT = 0x6C,TAGID_OPTGROUP = 0x6D,TAGID_COUNT = 0x6E,TAGID_LAST_PREDEFINED = 0x2710,ELEMENT_TAG_ID_Max = 0x7FFFFFFF,};
enum _FINDTEXT_FLAGS {FINDTEXT_BACKWARDS = 0x1,FINDTEXT_WHOLEWORD = 0x2,FINDTEXT_MATCHCASE = 0x4,FINDTEXT_RAW = 0x20000,FINDTEXT_MATCHDIAC = 0x20000000,FINDTEXT_MATCHKASHIDA = 0x40000000,FINDTEXT_MATCHALEFHAMZA = 0x80000000,FINDTEXT_FLAGS_Max = 0x7FFFFFFF,};
enum _HLSR_NOREDEF10 {HLSR_HOME = 0x0,HLSR_SEARCHPAGE = 0x1,HLSR_HISTORYFOLDER = 0x2,};
struct _HYPER_SIZEDARR {unsigned int clSize;long long *pData;};
enum _INTERFACE_TYPE {InterfaceTypeUndefined = 0xFFFFFFFF,Internal = 0x0,Isa = 0x1,Eisa = 0x2,MicroChannel = 0x3,TurboChannel = 0x4,PCIBus = 0x5,VMEBus = 0x6,NuBus = 0x7,PCMCIABus = 0x8,CBus = 0x9,MPIBus = 0xA,MPSABus = 0xB,ProcessorInternal = 0xC,InternalPowerBus = 0xD,PNPISABus = 0xE,PNPBus = 0xF,MaximumInterfaceType = 0x10,};
enum _LINE_DIRECTION {LINE_DIRECTION_RightToLeft = 0x1,LINE_DIRECTION_LeftToRight = 0x2,LINE_DIRECTION_Max = 0x7FFFFFFF,};
enum _LOCK_OPERATION {IoReadAccess = 0x0,IoWriteAccess = 0x1,IoModifyAccess = 0x2,};
enum _NDIS_BPC_ERROR {bpcErrorUnknownFailure = 0xC0FF0000,bpcErrorHardwareFailure = 0xC0FF0001,bpcErrorProviderFailure = 0xC0FF0002,bpcErrorNoDataDevice = 0xC0FF0003,bpcErrorNoTuningDevice = 0xC0FF0004,bpcErrorDeviceNotCapable = 0xC0FF0005,bpcErrorConflictingDevice = 0xC0FF0006,bpcErrorConflictingCapability = 0xC0FF0007,bpcErrorNoBufferMemory = 0xC0FF0008,bpcErrorNoResources = 0xC0FF0009,bpcErrorAdapterClosing = 0xC0FF000A,bpcErrorConnectionClosing = 0xC0FF000B,bpcErrorTooComplex = 0xC0FF000C,bpcErrorProviderNotSupported = 0xC0FF000D,bpcErrorUnknownProviderStructure = 0xC0FF000E,bpcErrorAddressNotSupported = 0xC0FF000F,bpcErrorInvalidAddress = 0xC0FF0010,bpcErrorUnknownAdapterStructure = 0xC0FF0011,};
enum _PPP_EAP_ACTION {EAPACTION_NoAction = 0x0,EAPACTION_Authenticate = 0x1,EAPACTION_Done = 0x2,EAPACTION_SendAndDone = 0x3,EAPACTION_Send = 0x4,EAPACTION_SendWithTimeout = 0x5,EAPACTION_SendWithTimeoutInteractive = 0x6,};
enum _SELECTION_TYPE {SELECTION_TYPE_None = 0x0,SELECTION_TYPE_Caret = 0x1,SELECTION_TYPE_Text = 0x2,SELECTION_TYPE_Control = 0x3,SELECTION_TYPE_Max = 0x7FFFFFFF,};
enum _SE_OBJECT_TYPE {SE_UNKNOWN_OBJECT_TYPE = 0x0,SE_FILE_OBJECT = 0x1,SE_SERVICE = 0x2,SE_PRINTER = 0x3,SE_REGISTRY_KEY = 0x4,SE_LMSHARE = 0x5,SE_KERNEL_OBJECT = 0x6,SE_WINDOW_OBJECT = 0x7,SE_DS_OBJECT = 0x8,SE_DS_OBJECT_ALL = 0x9,SE_PROVIDER_DEFINED_OBJECT = 0xA,};
struct _SHORT_SIZEDARR {unsigned int clSize;unsigned short *pData;};
enum _WSAEcomparator {COMP_EQUAL = 0x0,COMP_NOTLESS = 0x1,};
enum _frameScrolling {frameScrollingyes = 0x1,frameScrollingno = 0x2,frameScrollingauto = 0x4,frameScrolling_Max = 0x7FFFFFFF,};
enum _htmlBlockAlign {htmlBlockAlignNotSet = 0x0,htmlBlockAlignLeft = 0x1,htmlBlockAlignCenter = 0x2,htmlBlockAlignRight = 0x3,htmlBlockAlignJustify = 0x4,htmlBlockAlign_Max = 0x7FFFFFFF,};
enum _htmlCellVAlign {htmlCellVAlignNotSet = 0x0,htmlCellVAlignTop = 0x1,htmlCellVAlignMiddle = 0x2,htmlCellVAlignBottom = 0x3,htmlCellVAlignBaseline = 0x4,htmlCellVAlignCenter = 0x2,htmlCellVAlign_Max = 0x7FFFFFFF,};
enum _htmlCompatMode {htmlCompatModeBackCompat = 0x0,htmlCompatModeCSS1Compat = 0x1,htmlCompatMode_Max = 0x7FFFFFFF,};
enum _htmlDesignMode {htmlDesignModeInherit = 0xFFFFFFFE,htmlDesignModeOn = 0xFFFFFFFF,htmlDesignModeOff = 0x0,htmlDesignMode_Max = 0x7FFFFFFF,};
enum _htmlDropEffect {htmlDropEffectCopy = 0x0,htmlDropEffectLink = 0x1,htmlDropEffectMove = 0x2,htmlDropEffectNone = 0x3,htmlDropEffect_Max = 0x7FFFFFFF,};
enum _htmlReadyState {htmlReadyStateuninitialized = 0x0,htmlReadyStateloading = 0x1,htmlReadyStateloaded = 0x2,htmlReadyStateinteractive = 0x3,htmlReadyStatecomplete = 0x4,htmlReadyState_Max = 0x7FFFFFFF,};
enum _htmlSelectType {htmlSelectTypeSelectOne = 0x1,htmlSelectTypeSelectMultiple = 0x2,htmlSelectType_Max = 0x7FFFFFFF,};
enum _styleFontStyle {styleFontStyleNotSet = 0x0,styleFontStyleItalic = 0x1,styleFontStyleOblique = 0x2,styleFontStyleNormal = 0x3,styleFontStyle_Max = 0x7FFFFFFF,};
enum _styleLineBreak {styleLineBreakNotSet = 0x0,styleLineBreakNormal = 0x1,styleLineBreakStrict = 0x2,styleLineBreak_Max = 0x7FFFFFFF,};
enum _stylePageBreak {stylePageBreakNotSet = 0x0,stylePageBreakAuto = 0x1,stylePageBreakAlways = 0x2,stylePageBreakLeft = 0x3,stylePageBreakRight = 0x4,stylePageBreak_Max = 0x7FFFFFFF,};
enum _styleRubyAlign {styleRubyAlignNotSet = 0x0,styleRubyAlignAuto = 0x1,styleRubyAlignLeft = 0x2,styleRubyAlignCenter = 0x3,styleRubyAlignRight = 0x4,styleRubyAlignDistributeLetter = 0x5,styleRubyAlignDistributeSpace = 0x6,styleRubyAlignLineEdge = 0x7,styleRubyAlign_Max = 0x7FFFFFFF,};
enum _styleWordBreak {styleWordBreakNotSet = 0x0,styleWordBreakNormal = 0x1,styleWordBreakBreakAll = 0x2,styleWordBreakKeepAll = 0x3,styleWordBreak_Max = 0x7FFFFFFF,};
enum _tagDELIVERMODE {DM_DELIVER_PREFERED = 0x1,DM_DELIVER_DELAYED = 0x2,DM_DELIVER_LAST_DELAYED = 0x4,DM_ONLY_IF_RUNNING = 0x20,DM_THROTTLE_MODE = 0x80,DM_NEED_COMPLETIONREPORT = 0x100,DM_NEED_PROGRESSREPORT = 0x200,DM_DELIVER_DEFAULT_THREAD = 0x400,DM_DELIVER_DEFAULT_PROCESS = 0x800,};
enum _tagDVD_WARNING {DVD_WARNING_InvalidDVD1_0Disc = 0x1,DVD_WARNING_FormatNotSupported = 0x2,DVD_WARNING_IllegalNavCommand = 0x3,DVD_WARNING_Open = 0x4,DVD_WARNING_Seek = 0x5,DVD_WARNING_Read = 0x6,};
enum _tagOIBDG_FLAGS {OIBDG_APARTMENTTHREADED = 0x100,OIBDG_DATAONLY = 0x1000,};
enum _tagPARSEACTION {PARSE_CANONICALIZE = 0x1,PARSE_FRIENDLY = 0x2,PARSE_SECURITY_URL = 0x3,PARSE_ROOTDOCUMENT = 0x4,PARSE_DOCUMENT = 0x5,PARSE_ANCHOR = 0x6,PARSE_ENCODE = 0x7,PARSE_DECODE = 0x8,PARSE_PATH_FROM_URL = 0x9,PARSE_URL_FROM_PATH = 0xA,PARSE_MIME = 0xB,PARSE_SERVER = 0xC,PARSE_SCHEMA = 0xD,PARSE_SITE = 0xE,PARSE_DOMAIN = 0xF,PARSE_LOCATION = 0x10,PARSE_SECURITY_DOMAIN = 0x11,PARSE_ESCAPE = 0x12,PARSE_UNESCAPE = 0x13,};
enum _tagQUERYOPTION {QUERY_EXPIRATION_DATE = 0x1,QUERY_TIME_OF_LAST_CHANGE = 0x2,QUERY_CONTENT_ENCODING = 0x3,QUERY_CONTENT_TYPE = 0x4,QUERY_REFRESH = 0x5,QUERY_RECOMBINE = 0x6,QUERY_CAN_NAVIGATE = 0x7,QUERY_USES_NETWORK = 0x8,QUERY_IS_CACHED = 0x9,QUERY_IS_INSTALLEDENTRY = 0xA,QUERY_IS_CACHED_OR_MAPPED = 0xB,QUERY_USES_CACHE = 0xC,QUERY_IS_SECURE = 0xD,QUERY_IS_SAFE = 0xE,};
enum _tagSYNCMGRFLAG {SYNCMGRFLAG_CONNECT = 0x1,SYNCMGRFLAG_PENDINGDISCONNECT = 0x2,SYNCMGRFLAG_MANUAL = 0x3,SYNCMGRFLAG_IDLE = 0x4,SYNCMGRFLAG_INVOKE = 0x5,SYNCMGRFLAG_SCHEDULED = 0x6,SYNCMGRFLAG_EVENTMASK = 0xFF,SYNCMGRFLAG_SETTINGS = 0x100,SYNCMGRFLAG_MAYBOTHERUSER = 0x200,};
enum _textDecoration {textDecorationNone = 0x0,textDecorationUnderline = 0x1,textDecorationOverline = 0x2,textDecorationLineThrough = 0x3,textDecorationBlink = 0x4,textDecoration_Max = 0x7FFFFFFF,};
typedef struct tag_s_RIFFWAVE_INST s_RIFFWAVE_inst;
enum tagBODYLOCATION {IBL_ROOT = 0x0,IBL_PARENT = 0x1,IBL_FIRST = 0x2,IBL_LAST = 0x3,IBL_NEXT = 0x4,IBL_PREVIOUS = 0x5,};
enum tagCERTNAMETYPE {SIMPLE = 0x0,OID = 0x1,X500 = 0x2,};
enum tagDISCARDCACHE {DISCARDCACHE_SAVEIFDIRTY = 0x0,DISCARDCACHE_NOSAVE = 0x1,};
struct tagDVD_TIMECODE {unsigned int Hours1 : 4;unsigned int Hours10 : 4;unsigned int Minutes1 : 4;unsigned int Minutes10 : 4;unsigned int Seconds1 : 4;unsigned int Seconds10 : 4;unsigned int Frames1 : 4;unsigned int Frames10 : 2;unsigned int FrameRateCode : 2;};
enum tagENCODINGTYPE {IET_BINARY = 0x0,IET_BASE64 = 0x1,IET_UUENCODE = 0x2,IET_QP = 0x3,IET_7BIT = 0x4,IET_8BIT = 0x5,IET_INETCSET = 0x6,IET_UNICODE = 0x7,IET_RFC1522 = 0x8,IET_ENCODED = 0x9,IET_CURRENT = 0xA,IET_UNKNOWN = 0xB,IET_BINHEX40 = 0xC,IET_LAST = 0xD,};
enum tagIFILTER_INIT {IFILTER_INIT_CANON_PARAGRAPHS = 0x1,IFILTER_INIT_HARD_LINE_BREAKS = 0x2,IFILTER_INIT_CANON_HYPHENS = 0x4,IFILTER_INIT_CANON_SPACES = 0x8,IFILTER_INIT_APPLY_INDEX_ATTRIBUTES = 0x10,IFILTER_INIT_APPLY_OTHER_ATTRIBUTES = 0x20,IFILTER_INIT_INDEXING_ONLY = 0x40,IFILTER_INIT_SEARCH_LINKS = 0x80,};
enum tagIMSGBODYTYPE {IBT_SECURE = 0x0,IBT_ATTACHMENT = 0x1,IBT_EMPTY = 0x2,IBT_CSETTAGGED = 0x3,IBT_AUTOATTACH = 0x4,};
enum tagIMSGPRIORITY {IMSG_PRI_LOW = 0x5,IMSG_PRI_NORMAL = 0x3,IMSG_PRI_HIGH = 0x1,};
enum tagINETADDRTYPE {ADDR_TO = 0x0,ADDR_FROM = 0x1,ADDR_DSN_NEVER = 0x10,ADDR_DSN_SUCCESS = 0x20,ADDR_DSN_FAILURE = 0x40,ADDR_DSN_DELAY = 0x80,};
enum tagINETLANGMASK {ILM_FAMILY = 0x1,ILM_NAME = 0x2,ILM_BODYCSET = 0x4,ILM_HEADERCSET = 0x8,ILM_WEBCSET = 0x10,ILM_FIXEDFONT = 0x20,ILM_VARIABLEFONT = 0x40,};
enum tagMIMESAVETYPE {SAVE_RFC822 = 0x0,SAVE_RFC1521 = 0x1,};
enum tagPOP3MARKTYPE {POP3_MARK_FOR_TOP = 0x1,POP3_MARK_FOR_RETR = 0x2,POP3_MARK_FOR_DELE = 0x4,POP3_MARK_FOR_UIDL = 0x8,POP3_MARK_FOR_LIST = 0x10,};
enum tagPROPINFOMASK {PIM_CHARSET = 0x1,PIM_ENCODINGTYPE = 0x2,PIM_ROWNUMBER = 0x4,PIM_FLAGS = 0x8,PIM_PROPID = 0x10,PIM_VALUES = 0x20,PIM_VTDEFAULT = 0x40,PIM_VTCURRENT = 0x80,};
enum tagSMTPAUTHTYPE {SMTP_AUTH_NONE = 0x0,SMTP_AUTH_SICILY = 0x1,SMTP_AUTH_USE_POP3ORIMAP_SETTINGS = 0x2,SMTP_AUTH_USE_SMTP_SETTINGS = 0x3,};
enum tagXMLEMEM_TYPE {XMLELEMTYPE_ELEMENT = 0x0,XMLELEMTYPE_TEXT = 0x1,XMLELEMTYPE_COMMENT = 0x2,XMLELEMTYPE_DOCUMENT = 0x3,XMLELEMTYPE_DTD = 0x4,XMLELEMTYPE_PI = 0x5,XMLELEMTYPE_OTHER = 0x6,};
typedef struct tACMDRVOPENDESC ACMDRVOPENDESC;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 AM_AC3_DOWNMIX;
typedef struct __MIDL___MIDL_itf_strmif_0099_0002 AM_STREAM_INFO;
typedef struct aptxwaveformat_tag APTXWAVEFORMAT;
typedef struct arp_send_reply ARP_SEND_REPLY;
typedef struct _E6EEE8D03854377210BB1626C10183C8 ATM_PVC_PARAMS;
typedef struct tagBITMAPCOREINFO BITMAPCOREINFO;
typedef struct _BTH_SNIFF_MODE BTH_SNIFF_MODE;
typedef struct tagCATEGORIZATION CATEGORIZATION;
typedef struct _CAT_MEMBERINFO CAT_MEMBERINFO;
typedef struct __CEL_HEAP_ALLOC CEL_HEAP_ALLOC;
typedef struct __CEL_INTERRUPTS CEL_INTERRUPTS;
typedef struct __CEL_LOG_MARKER CEL_LOG_MARKER;
typedef struct __CEL_SEM_CREATE CEL_SEM_CREATE;
typedef struct __CEL_SEM_DELETE CEL_SEM_DELETE;
typedef struct __CEL_SYSTEM_TLB CEL_SYSTEM_TLB;
typedef struct __CEL_WAIT_MULTI CEL_WAIT_MULTI;
typedef struct _CENOTIFICATION CENOTIFICATION;
typedef struct _CERT_EXTENSION CERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB CERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO CERT_NAME_INFO;
typedef struct _CERT_POLICY_ID CERT_POLICY_ID;
struct CMultiLanguage;
typedef struct _COAUTHIDENTITY COAUTHIDENTITY;
typedef struct _COMPFOLDERINIT COMPFOLDERINIT;
typedef struct tagCOPYDATASTRUCT COPYDATASTRUCT;
typedef struct _CO_AF_TAPI_SAP CO_AF_TAPI_SAP;
typedef struct _CRL_DIST_POINT CRL_DIST_POINT;
typedef struct CRYPTCATMEMBER_ CRYPTCATMEMBER;
typedef struct _CRYPT_BIT_BLOB CRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO CRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO CRYPT_URL_INFO;
typedef struct tagCStdStubBuffer CStdStubBuffer;
struct CUtilityButton;
struct CoDitherToRGB8;
typedef struct _0B98F7F74C669A73C109E26A7282B4DF CookieDecision;
typedef struct _D3DCLIPSTATUS8 D3DCLIPSTATUS8;
typedef struct _D3DDISPLAYMODE D3DDISPLAYMODE;
typedef struct _D3DLINEPATTERN D3DLINEPATTERN;
typedef struct _D3DLOCKED_RECT D3DLOCKED_RECT;
typedef struct _D3DVOLUME_DESC D3DVOLUME_DESC;
typedef struct _D3DXIMAGE_INFO D3DXIMAGE_INFO;
enum DBASYNCHOPENUM {DBASYNCHOP_OPEN = 0x0,};
enum DBBINDFLAGENUM {DBBINDFLAG_HTML = 0x1,};
typedef struct tagDBCOLUMNACCESS DBCOLUMNACCESS;
typedef struct tagDBCONTENTSCOPE DBCONTENTSCOPE;
typedef struct tagDBCONTENTTABLE DBCONTENTTABLE;
enum DBCOSTUNITENUM {DBUNIT_INVALID = 0x0,DBUNIT_WEIGHT = 0x1,DBUNIT_PERCENT = 0x2,DBUNIT_MAXIMUM = 0x4,DBUNIT_MINIMUM = 0x8,DBUNIT_MICRO_SECOND = 0x10,DBUNIT_MILLI_SECOND = 0x20,DBUNIT_SECOND = 0x40,DBUNIT_MINUTE = 0x80,DBUNIT_HOUR = 0x100,DBUNIT_BYTE = 0x200,DBUNIT_KILO_BYTE = 0x400,DBUNIT_MEGA_BYTE = 0x800,DBUNIT_GIGA_BYTE = 0x1000,DBUNIT_NUM_MSGS = 0x2000,DBUNIT_NUM_LOCKS = 0x4000,DBUNIT_NUM_ROWS = 0x8000,DBUNIT_OTHER = 0x10000,};
enum DBMEMOWNERENUM {DBMEMOWNER_CLIENTOWNED = 0x0,DBMEMOWNER_PROVIDEROWNED = 0x1,};
enum DBREASONENUM15 {DBREASON_ROWPOSITION_CHANGED = 0xF,DBREASON_ROWPOSITION_CHAPTERCHANGED = 0x10,DBREASON_ROWPOSITION_CLEARED = 0x11,DBREASON_ROW_ASYNCHINSERT = 0x12,};
enum DBREASONENUM25 {DBREASON_ROWSET_ROWSADDED = 0x13,DBREASON_ROWSET_POPULATIONCOMPLETE = 0x14,DBREASON_ROWSET_POPULATIONSTOPPED = 0x15,};
enum DBSTATUSENUM20 {MDSTATUS_S_CELLEMPTY = 0xE,DBSTATUS_S_IGNORE = 0xF,};
enum DBSTATUSENUM21 {DBSTATUS_E_DOESNOTEXIST = 0x10,DBSTATUS_E_INVALIDURL = 0x11,DBSTATUS_E_RESOURCELOCKED = 0x12,DBSTATUS_E_RESOURCEEXISTS = 0x13,DBSTATUS_E_CANNOTCOMPLETE = 0x14,DBSTATUS_E_VOLUMENOTFOUND = 0x15,DBSTATUS_E_OUTOFSPACE = 0x16,DBSTATUS_S_CANNOTDELETESOURCE = 0x17,DBSTATUS_E_READONLY = 0x18,DBSTATUS_E_RESOURCEOUTOFSCOPE = 0x19,DBSTATUS_S_ALREADYEXISTS = 0x1A,};
enum DBSTATUSENUM25 {DBSTATUS_E_CANCELED = 0x1B,DBSTATUS_E_NOTCOLLECTION = 0x1C,};
typedef struct _DDCOLORCONTROL DDCOLORCONTROL;
typedef struct _DDSURFACEDESC2 DDSURFACEDESC2;
typedef struct _PRIVKEYVER3 DHPRIVKEY_VER3;
typedef struct _DISCDLGSTRUCTA DISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW DISCDLGSTRUCTW;
enum DISPIDDXEFFECT {DISPID_DXECAPABILITIES = 0x2710,DISPID_DXEPROGRESS = 0x2711,DISPID_DXESTEP = 0x2712,DISPID_DXEDURATION = 0x2713,DISPID_DXE_NEXT_ID = 0x2714,};
typedef struct _DISPLAY_DEVICE DISPLAY_DEVICE;
typedef struct _DLLVERSIONINFO DLLVERSIONINFO;
typedef struct _DMA_OPERATIONS DMA_OPERATIONS;
enum DMO_ENUM_FLAGS {DMO_ENUMF_INCLUDE_KEYED = 0x1,};
typedef struct _DOT11_BSS_LIST DOT11_BSS_LIST;
typedef struct _DOT11_PHY_LIST DOT11_PHY_LIST;
typedef struct _DOT11_RATE_SET DOT11_RATE_SET;
typedef struct tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef struct _PUBKEYVER3 DSSPUBKEY_VER3;
typedef struct __MIDL___MIDL_itf_dvdnav_0000_0001 DVDUserGOPData;
typedef struct __MIDL_IEnumDVD_CELL_PIECE_0001 DVD_CELL_PIECE;
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;
typedef struct _LONG_SIZEDARR DWORD_SIZEDARR;
struct DispHTMLIFrame {struct DispHTMLIFrameVtbl *lpVtbl;};
struct DispHTMLScreen {struct DispHTMLScreenVtbl *lpVtbl;};
typedef struct wavefilter_echo_tag ECHOWAVEFILTER;
typedef struct _EVENTLOGRECORD EVENTLOGRECORD;
typedef struct tagEXBMINFOHEADER EXBMINFOHEADER;
typedef struct _FILECHANGEINFO FILECHANGEINFO;
typedef struct _FLAG_STGMEDIUM FLAG_STGMEDIUM;
typedef struct __MIDL___MIDL_itf_shobjidl_0117_0003 FOLDERSETTINGS;
struct FileSearchBand;
struct FolderItemVerb {struct FolderItemVerbVtbl *lpVtbl;};
struct HACMDRIVERID__ {int unused;};
typedef void *HCAPICERTSTORE;
typedef void *HCERTSTOREPROV;
struct HENHMETAFILE__ {int unused;};
typedef struct _PSP *HPROPSHEETPAGE;
struct HTMLAreaEvents {struct HTMLAreaEventsVtbl *lpVtbl;};
struct HTMLDivElement;
struct HTMLImgEvents2 {struct HTMLImgEvents2Vtbl *lpVtbl;};
struct HTMLInputImage;
struct HTMLMapElement;
struct HTMLMapEvents2 {struct HTMLMapEvents2Vtbl *lpVtbl;};
struct HTMLStyleSheet;
typedef struct tagHTTPMEMBERINFO HTTPMEMBERINFO;
typedef struct tagHTTPTARGETLIST HTTPTARGETLIST;
typedef struct _HYPER_SIZEDARR HYPER_SIZEDARR;
struct IAMChannelInfo {struct IAMChannelInfoVtbl *lpVtbl;};
struct IAMClockAdjust {struct IAMClockAdjustVtbl *lpVtbl;};
struct IAMDirectSound {struct IAMDirectSoundVtbl *lpVtbl;};
struct IAMMediaStream {struct IAMMediaStreamVtbl *lpVtbl;};
struct IAccessControl {struct IAccessControlVtbl *lpVtbl;};
struct IAnimationRoot {struct IAnimationRootVtbl *lpVtbl;};
struct IAsyncMHandler {struct IAsyncMHandlerVtbl *lpVtbl;};
struct IAutoComplete2 {struct IAutoComplete2Vtbl *lpVtbl;};
struct IBufferingTime {struct IBufferingTimeVtbl *lpVtbl;};
struct ICSSFilterSite {struct ICSSFilterSiteVtbl *lpVtbl;};
struct IClassFactory2 {struct IClassFactory2Vtbl *lpVtbl;};
struct IColumnsRowset {struct IColumnsRowsetVtbl *lpVtbl;};
struct ICreateTypeLib {struct ICreateTypeLibVtbl *lpVtbl;};
struct IDXARGBReadPtr {struct IDXARGBReadPtrVtbl *lpVtbl;};
struct IDXLookupTable {struct IDXLookupTableVtbl *lpVtbl;};
struct IDXSurfaceInit {struct IDXSurfaceInitVtbl *lpVtbl;};
struct IDXSurfacePick {struct IDXSurfacePickVtbl *lpVtbl;};
struct IDXTClipOrigin {struct IDXTClipOriginVtbl *lpVtbl;};
struct IDXTaskManager {struct IDXTaskManagerVtbl *lpVtbl;};
struct IDebugProperty {struct IDebugPropertyVtbl *lpVtbl;};
struct IDialEventSink {struct IDialEventSinkVtbl *lpVtbl;};
struct IDirectControl {struct IDirectControlVtbl *lpVtbl;};
struct IDocHostShowUI {struct IDocHostShowUIVtbl *lpVtbl;};
struct IDockingWindow {struct IDockingWindowVtbl *lpVtbl;};
struct IEnumCifGroups {struct IEnumCifGroupsVtbl *lpVtbl;};
struct IEnumFORMATETC {struct IEnumFORMATETCVtbl *lpVtbl;};
struct IEnumSyncItems {struct IEnumSyncItemsVtbl *lpVtbl;};
struct IEnumWSDLPorts {struct IEnumWSDLPortsVtbl *lpVtbl;};
struct IEnumWorkItems {struct IEnumWorkItemsVtbl *lpVtbl;};
struct IExtractImage2 {struct IExtractImage2Vtbl *lpVtbl;};
struct IFillLockBytes {struct IFillLockBytesVtbl *lpVtbl;};
struct IFolderAndItem {struct IFolderAndItemVtbl *lpVtbl;};
struct IGetDataSource {struct IGetDataSourceVtbl *lpVtbl;};
struct IHTMLBRElement {struct IHTMLBRElementVtbl *lpVtbl;};
struct IHTMLChangeLog {struct IHTMLChangeLogVtbl *lpVtbl;};
struct IHTMLDDElement {struct IHTMLDDElementVtbl *lpVtbl;};
struct IHTMLDTElement {struct IHTMLDTElementVtbl *lpVtbl;};
struct IHTMLDocument2 {struct IHTMLDocument2Vtbl *lpVtbl;};
struct IHTMLDocument3 {struct IHTMLDocument3Vtbl *lpVtbl;};
struct IHTMLDocument4 {struct IHTMLDocument4Vtbl *lpVtbl;};
struct IHTMLDocument5 {struct IHTMLDocument5Vtbl *lpVtbl;};
struct IHTMLEditHost2 {struct IHTMLEditHost2Vtbl *lpVtbl;};
struct IHTMLEventObj2 {struct IHTMLEventObj2Vtbl *lpVtbl;};
struct IHTMLEventObj3 {struct IHTMLEventObj3Vtbl *lpVtbl;};
struct IHTMLEventObj4 {struct IHTMLEventObj4Vtbl *lpVtbl;};
struct IHTMLFrameBase {struct IHTMLFrameBaseVtbl *lpVtbl;};
struct IHTMLHRElement {struct IHTMLHRElementVtbl *lpVtbl;};
struct IHTMLLIElement {struct IHTMLLIElementVtbl *lpVtbl;};
struct IHTMLNamespace {struct IHTMLNamespaceVtbl *lpVtbl;};
struct IHTMLPaintSite {struct IHTMLPaintSiteVtbl *lpVtbl;};
struct IHTMLRuleStyle {struct IHTMLRuleStyleVtbl *lpVtbl;};
struct IHTMLTableCell {struct IHTMLTableCellVtbl *lpVtbl;};
struct IHTMLTableCol2 {struct IHTMLTableCol2Vtbl *lpVtbl;};
struct IHTMLTableRow2 {struct IHTMLTableRow2Vtbl *lpVtbl;};
struct IHTMLTableRow3 {struct IHTMLTableRow3Vtbl *lpVtbl;};
struct IHeaderHandler {struct IHeaderHandlerVtbl *lpVtbl;};
struct IHttpNegotiate {struct IHttpNegotiateVtbl *lpVtbl;};
struct IIMAPTransport {struct IIMAPTransportVtbl *lpVtbl;};
struct IInputMethodEx {struct IInputMethodExVtbl *lpVtbl;};
struct IInstallEngine {struct IInstallEngineVtbl *lpVtbl;};
struct IInternetCache {struct IInternetCacheVtbl *lpVtbl;};
struct IKsPropertySet {struct IKsPropertySetVtbl *lpVtbl;};
struct ILayoutStorage {struct ILayoutStorageVtbl *lpVtbl;};
struct IMAPIContainer {struct IMAPIContainerVtbl *lpVtbl;};
struct IMDRangeRowset {struct IMDRangeRowsetVtbl *lpVtbl;};
struct IMLangFontLink {struct IMLangFontLinkVtbl *lpVtbl;};
struct IMarkupPointer {struct IMarkupPointerVtbl *lpVtbl;};
struct IMediaPosition {struct IMediaPositionVtbl *lpVtbl;};
struct IMediaTypeInfo {struct IMediaTypeInfoVtbl *lpVtbl;};
struct IMemAllocator2 {struct IMemAllocator2Vtbl *lpVtbl;};
struct IMessageFilter {struct IMessageFilterVtbl *lpVtbl;};
struct IMimeAllocator {struct IMimeAllocatorVtbl *lpVtbl;};
struct IMonikerHelper {struct IMonikerHelperVtbl *lpVtbl;};
struct IMsgrIMSession {struct IMsgrIMSessionVtbl *lpVtbl;};
struct IMultiLanguage {struct IMultiLanguageVtbl *lpVtbl;};
struct INNTPTransport {struct INNTPTransportVtbl *lpVtbl;};
typedef struct _INTERFACE_INFO INTERFACE_INFO;
struct INetConnection {struct INetConnectionVtbl *lpVtbl;};
struct INotifyReplica {struct INotifyReplicaVtbl *lpVtbl;};
struct IOleClientSite {struct IOleClientSiteVtbl *lpVtbl;};
struct IOverlayNotify {struct IOverlayNotifyVtbl *lpVtbl;};
struct IPOP3Transport {struct IPOP3TransportVtbl *lpVtbl;};
typedef struct _IP_ADDR_STRING IP_ADDR_STRING;
typedef struct _F03B70C123AB6920C4DDA521DD856E56 IP_MASK_STRING;
struct IParserSession {struct IParserSessionVtbl *lpVtbl;};
struct IPersistFolder {struct IPersistFolderVtbl *lpVtbl;};
struct IPersistIDList {struct IPersistIDListVtbl *lpVtbl;};
struct IPersistMemory {struct IPersistMemoryVtbl *lpVtbl;};
struct IPersistQueryA {struct IPersistQueryAVtbl *lpVtbl;};
struct IPersistQueryW {struct IPersistQueryWVtbl *lpVtbl;};
struct IPersistStream {struct IPersistStreamVtbl *lpVtbl;};
struct IPropertyBagEx {struct IPropertyBagExVtbl *lpVtbl;};
struct IPropertyPage2 {struct IPropertyPage2Vtbl *lpVtbl;};
struct IProviderAdmin {struct IProviderAdminVtbl *lpVtbl;};
struct IQuickActivate {struct IQuickActivateVtbl *lpVtbl;};
struct IRTCBuddyEvent {struct IRTCBuddyEventVtbl *lpVtbl;};
struct IRTCBuddyGroup {struct IRTCBuddyGroupVtbl *lpVtbl;};
struct IRTCCollection {struct IRTCCollectionVtbl *lpVtbl;};
struct IRTCEnumGroups {struct IRTCEnumGroupsVtbl *lpVtbl;};
struct IRTCMediaEvent {struct IRTCMediaEventVtbl *lpVtbl;};
struct IRTCUserSearch {struct IRTCUserSearchVtbl *lpVtbl;};
struct IRegFilterInfo {struct IRegFilterInfoVtbl *lpVtbl;};
struct IRowsetRefresh {struct IRowsetRefreshVtbl *lpVtbl;};
struct IRowsetResynch {struct IRowsetResynchVtbl *lpVtbl;};
struct IRpcStubBuffer {struct IRpcStubBufferVtbl *lpVtbl;};
struct ISAXAttributes {struct ISAXAttributesVtbl *lpVtbl;};
struct ISAXDTDHandler {struct ISAXDTDHandlerVtbl *lpVtbl;};
typedef struct _ISA_PNP_CONFIG ISA_PNP_CONFIG;
struct ISMTPTransport {struct ISMTPTransportVtbl *lpVtbl;};
enum ISOLATIONLEVEL {ISOLATIONLEVEL_UNSPECIFIED = 0xFFFFFFFF,ISOLATIONLEVEL_CHAOS = 0x10,ISOLATIONLEVEL_READUNCOMMITTED = 0x100,ISOLATIONLEVEL_BROWSE = 0x100,ISOLATIONLEVEL_CURSORSTABILITY = 0x1000,ISOLATIONLEVEL_READCOMMITTED = 0x1000,ISOLATIONLEVEL_REPEATABLEREAD = 0x10000,ISOLATIONLEVEL_SERIALIZABLE = 0x100000,ISOLATIONLEVEL_ISOLATED = 0x100000,};
struct IScheduleGroup {struct IScheduleGroupVtbl *lpVtbl;};
struct ISearchContext {struct ISearchContextVtbl *lpVtbl;};
struct ISecureUrlHost {struct ISecureUrlHostVtbl *lpVtbl;};
struct IShellDispatch {struct IShellDispatchVtbl *lpVtbl;};
struct IShellLinkDual {struct IShellLinkDualVtbl *lpVtbl;};
struct IShellUIHelper {struct IShellUIHelperVtbl *lpVtbl;};
struct ISoapConnector {struct ISoapConnectorVtbl *lpVtbl;};
struct ISourcesRowset {struct ISourcesRowsetVtbl *lpVtbl;};
struct IStreamBuilder {struct IStreamBuilderVtbl *lpVtbl;};
struct ITableCreation {struct ITableCreationVtbl *lpVtbl;};
struct ITargetNotify2 {struct ITargetNotify2Vtbl *lpVtbl;};
struct ITaskScheduler {struct ITaskSchedulerVtbl *lpVtbl;};
struct IUPnPEventSink {struct IUPnPEventSinkVtbl *lpVtbl;};
struct IUPnPRegistrar {struct IUPnPRegistrarVtbl *lpVtbl;};
struct IURLSearchHook {struct IURLSearchHookVtbl *lpVtbl;};
struct IUrlHistoryStg {struct IUrlHistoryStgVtbl *lpVtbl;};
struct IUserIdentity2 {struct IUserIdentity2Vtbl *lpVtbl;};
struct IUtilityButton {struct IUtilityButtonVtbl *lpVtbl;};
struct IVersionVector {struct IVersionVectorVtbl *lpVtbl;};
struct IVoIPCallLogDB {struct IVoIPCallLogDBVtbl *lpVtbl;};
struct IWSDLOperation {struct IWSDLOperationVtbl *lpVtbl;};
struct IWebBrowserApp {struct IWebBrowserAppVtbl *lpVtbl;};
struct IXMLDOMComment {struct IXMLDOMCommentVtbl *lpVtbl;};
struct IXMLDOMElement {struct IXMLDOMElementVtbl *lpVtbl;};
struct IXMLNodeSource {struct IXMLNodeSourceVtbl *lpVtbl;};
typedef struct tagJPEGINFOHEADER JPEGINFOHEADER;
typedef struct linecallparams_tag LINECALLPARAMS;
typedef struct linecallstatus_tag LINECALLSTATUS;
typedef struct linedialparams_tag LINEDIALPARAMS;
typedef struct _LINE_CALL_INFO LINE_CALL_INFO;
typedef struct _LMEM_HEAP_INFO LMEM_HEAP_INFO;
typedef struct tagADDRESSPROPS *LPADDRESSPROPS;
typedef IAdviseSinkEx *LPADVISESINKEX;
typedef struct _AMVPDATAINFO *LPAMVPDATAINFO;
typedef IAutoComplete *LPAUTOCOMPLETE;
typedef IBindProtocol *LPBINDPROTOCOL;
typedef struct tagCATEGORYINFO *LPCATEGORYINFO;
typedef IClassFactory *LPCLASSFACTORY;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
typedef struct tagCODEPAGEINFO *LPCODEPAGEINFO;
typedef struct tagCOMBOBOXINFO *LPCOMBOBOXINFO;
typedef struct _COMMTIMEOUTS *LPCOMMTIMEOUTS;
typedef IContextMenu2 *LPCONTEXTMENU2;
typedef IContextMenu3 *LPCONTEXTMENU3;
typedef struct _currencyfmtA *LPCURRENCYFMTA;
typedef struct _currencyfmtW *LPCURRENCYFMTW;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct _DSBUFFERDESC *LPDSBUFFERDESC;
typedef struct _DTBLCHECKBOX *LPDTBLCHECKBOX;
typedef struct _DTBLCOMBOBOX *LPDTBLCOMBOBOX;
typedef struct _DTBLGROUPBOX *LPDTBLGROUPBOX;
typedef IEnumACString *LPENUMACSTRING;
typedef IEnumCodePage *LPENUMCODEPAGE;
typedef IEnumJavaFile *LPENUMJAVAFILE;
typedef struct tagENUMPROPERTY *LPENUMPROPERTY;
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef IExtractIconA *LPEXTRACTICONA;
typedef IExtractIconW *LPEXTRACTICONW;
typedef IExtractImage *LPEXTRACTIMAGE;
typedef struct tagHTTPMAILPOST *LPHTTPMAILPOST;
typedef IHttpSecurity *LPHTTPSECURITY;
typedef struct tagINETADDRLIST *LPINETADDRLIST;
typedef struct tagINETCSETINFO *LPINETCSETINFO;
typedef struct tagINPUTCONTEXT *LPINPUTCONTEXT;
typedef struct linecallinfo_tag *LPLINECALLINFO;
typedef struct linecalllist_tag *LPLINECALLLIST;
typedef struct linetermcaps_tag *LPLINETERMCAPS;
typedef struct IMAPIProgress *LPMAPIPROGRESS;
typedef struct _MEMORYSTATUS *LPMEMORYSTATUS;
typedef struct tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;
typedef struct tagMIMEPROPINFO *LPMIMEPROPINFO;
typedef IMimeSecurity *LPMIMESECURITY;
typedef struct tMIXERCONTROL *LPMIXERCONTROL;
typedef struct tagMSAAMENUINFO *LPMSAAMENUINFO;
typedef struct MSGQUEUEINFO *LPMSGQUEUEINFO;
typedef struct _NETRESOURCEA *LPNETRESOURCEA;
typedef struct _NETRESOURCEW *LPNETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO *LPNMCUSTOMDRAW;
typedef struct tagNMLVFINDITEM *LPNMLVFINDITEM;
typedef struct tagNMRBAUTOSIZE *LPNMRBAUTOSIZE;
typedef struct tagNNTPAUTHINFO *LPNNTPAUTHINFO;
typedef struct tagNNTPRESPONSE *LPNNTPRESPONSE;
typedef struct tagNNTPXHDRRESP *LPNNTPXHDRRESP;
typedef INotification *LPNOTIFICATION;
typedef IObjectSafety *LPOBJECTSAFETY;
typedef IOleContainer *LPOLECONTAINER;
typedef struct tagPALETTEENTRY *LPPALETTEENTRY;
typedef struct phonemessage_tag *LPPHONEMESSAGE;
typedef struct tagPOP3RESPONSE *LPPOP3RESPONSE;
typedef IPropertyBag *LPPROPERTYBAG2;
typedef IPropertyPage *LPPROPERTYPAGE;
typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef IRunnableTask *LPRUNNABLETASK;
typedef SENS_QOCINFO *LPSENS_QOCINFO;
typedef struct _B3292A763DBD4275988A0D01CB88CB44 *LPSHCOLUMNDATA;
typedef struct _63C5725C5B677664277ACEA161B104D1 *LPSHCOLUMNINFO;
typedef struct _CE02AD95896D5CE1FBC89EB4094A5E1C *LPSHCOLUMNINIT;
typedef IShellBrowser *LPSHELLBROWSER;
typedef struct _SHELLDETAILS *LPSHELLDETAILS;
typedef IShellExtInit *LPSHELLEXTINIT;
typedef struct tagSMTPMESSAGE2 *LPSMTPMESSAGE2;
typedef struct tagSMTPRESPONSE *LPSMTPRESPONSE;
typedef struct sockaddr_atm *LPSOCKADDR_ATM;
typedef struct sockaddr_in6 *LPSOCKADDR_IN6;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
typedef struct _SPropProblem *LPSPropProblem;
typedef struct _SRestriction *LPSRestriction;
typedef struct _SSLPROTOCOLS *LPSSLPROTOCOLS;
typedef struct _STARTUPINFOA *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW *LPSTARTUPINFOW;
typedef ITargetFrame2 *LPTARGETFRAME2;
typedef ITargetNotify *LPTARGETNOTIFY;
typedef struct tagTRANSMITINFO *LPTRANSMITINFO;
typedef struct _USB_ENDPOINT *LPUSB_ENDPOINT;
typedef IViewObjectEx *LPVIEWOBJECTEX;
typedef int LPVIEWSETTINGS;
typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
typedef struct _WSAQuerySetA *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW *LPWSAQUERYSETW;
enum MACRO_ACCT_WIZ {ACCT_WIZ_MIGRATE = 0x1,ACCT_WIZ_MAILIMPORT = 0x2,ACCT_WIZ_OUTLOOK = 0x4,ACCT_WIZ_NEWSIMPORT = 0x8,ACCT_WIZ_NO_NEW_POP = 0x10,ACCT_WIZ_INTERNETCONNECTION = 0x20,ACCT_WIZ_HTTPMAIL = 0x40,ACCT_WIZ_OE = 0x80,ACCT_INIT_ATHENA = 0x1,ACCT_INIT_OUTLOOK = 0x2,};
enum MACRO_AM_VIDEO {AM_VIDEO_FLAG_FIELD_MASK = 0x3,AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0x0,AM_VIDEO_FLAG_FIELD1 = 0x1,AM_VIDEO_FLAG_FIELD2 = 0x2,AM_VIDEO_FLAG_FIELD1FIRST = 0x4,AM_VIDEO_FLAG_WEAVE = 0x8,AM_VIDEO_FLAG_IPB_MASK = 0x30,AM_VIDEO_FLAG_I_SAMPLE = 0x0,AM_VIDEO_FLAG_P_SAMPLE = 0x10,AM_VIDEO_FLAG_B_SAMPLE = 0x20,AM_VIDEO_FLAG_REPEAT_FIELD = 0x40,};
enum MACRO_ASPECTXY {ASPECTXY = 44,};
enum MACRO_ATMPROTO {ATMPROTO_AALUSER = 0x0,ATMPROTO_AAL1 = 0x1,ATMPROTO_AAL2 = 0x2,ATMPROTO_AAL34 = 0x3,ATMPROTO_AAL5 = 0x5,};
enum MACRO_AUTHTYPE {AUTHTYPE_CLIENT = 1,AUTHTYPE_SERVER = 2,};
enum MACRO_AUTODIAL {AUTODIAL_MODE_NEVER = 1,AUTODIAL_MODE_ALWAYS = 2,AUTODIAL_MODE_NO_NETWORK_PRESENT = 4,};
enum MACRO_AVIIF_NO {AVIIF_NO_TIME = 0x100,AVIIF_COMPRESSOR = 0xFFF0000,};
enum MACRO_AYGSHELL {AYGSHELL_AYGSHCORE = 1,AYGSHELL_AYGSHHPC = 1,AYGSHELL_AYGSHNO = 1,AYGSHELL_AYGNQVGA = 1,};
enum MACRO_BOOKMARK {BOOKMARK_BEGINNING = 0,BOOKMARK_CURRENT = 1,BOOKMARK_END = 2,};
enum MACRO_BTHPROTO {BTHPROTO_RFCOMM = 0x3,BTHPROTO_L2CAP = 0x100,};
enum MACRO_CALLBACK {CALLBACK_TYPEMASK = 0x70000,CALLBACK_NULL = 0x0,CALLBACK_WINDOW = 0x10000,CALLBACK_TASK = 0x20000,CALLBACK_FUNCTION = 0x30000,CALLBACK_THREAD = 0x20000,CALLBACK_EVENT = 0x50000,};
enum MACRO_CERT_DSS {CERT_DSS_R_LEN = 20,CERT_DSS_S_LEN = 20,CERT_DSS_SIGNATURE_LEN = 40,CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN = 48,};
enum MACRO_CERT_KEY {CERT_KEY_PROV_HANDLE_PROP_ID = 1,CERT_KEY_PROV_INFO_PROP_ID = 2,CERT_SHA1_HASH_PROP_ID = 3,CERT_MD5_HASH_PROP_ID = 4,CERT_HASH_PROP_ID = 3,CERT_KEY_CONTEXT_PROP_ID = 5,CERT_KEY_SPEC_PROP_ID = 6,CERT_IE30_RESERVED_PROP_ID = 7,CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,CERT_ENHKEY_USAGE_PROP_ID = 9,CERT_CTL_USAGE_PROP_ID = 9,CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,CERT_FRIENDLY_NAME_PROP_ID = 11,CERT_PVK_FILE_PROP_ID = 12,CERT_DESCRIPTION_PROP_ID = 13,CERT_ACCESS_STATE_PROP_ID = 14,CERT_SIGNATURE_HASH_PROP_ID = 15,CERT_SMART_CARD_DATA_PROP_ID = 16,CERT_EFS_PROP_ID = 17,CERT_FORTEZZA_DATA_PROP_ID = 18,CERT_ARCHIVED_PROP_ID = 19,CERT_KEY_IDENTIFIER_PROP_ID = 20,CERT_AUTO_ENROLL_PROP_ID = 21,CERT_PUBKEY_ALG_PARA_PROP_ID = 22,CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,CERT_ENROLLMENT_PROP_ID = 26,CERT_DATE_STAMP_PROP_ID = 27,CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,CERT_RENEWAL_PROP_ID = 64,CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,CERT_AIA_URL_RETRIEVED_PROP_ID = 67,CERT_FIRST_RESERVED_PROP_ID = 68,CERT_LAST_RESERVED_PROP_ID = 32767,CERT_FIRST_USER_PROP_ID = 32768,CERT_LAST_USER_PROP_ID = 65535,CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1,CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2,CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4,CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1,CERT_SET_KEY_CONTEXT_PROP_ID = 1,CERT_STORE_PROV_MSG = 1,CERT_STORE_PROV_MEMORY = 2,CERT_STORE_PROV_FILE = 3,CERT_STORE_PROV_REG = 4,CERT_STORE_PROV_PKCS7 = 5,CERT_STORE_PROV_SERIALIZED = 6,CERT_STORE_PROV_FILENAME_A = 7,CERT_STORE_PROV_FILENAME_W = 8,CERT_STORE_PROV_FILENAME = 8,CERT_STORE_PROV_SYSTEM_A = 9,CERT_STORE_PROV_SYSTEM_W = 10,CERT_STORE_PROV_SYSTEM = 10,CERT_STORE_PROV_COLLECTION = 11,CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12,CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13,CERT_STORE_PROV_SYSTEM_REGISTRY = 13,CERT_STORE_PROV_PHYSICAL_W = 14,CERT_STORE_PROV_PHYSICAL = 14,CERT_STORE_PROV_SMART_CARD_W = 15,CERT_STORE_PROV_SMART_CARD = 15,CERT_STORE_PROV_LDAP_W = 16,CERT_STORE_PROV_LDAP = 16,CERT_STORE_SIGNATURE_FLAG = 1,CERT_STORE_TIME_VALIDITY_FLAG = 2,CERT_STORE_REVOCATION_FLAG = 4,CERT_STORE_NO_CRL_FLAG = 65536,CERT_STORE_NO_ISSUER_FLAG = 131072,CERT_STORE_BASE_CRL_FLAG = 256,CERT_STORE_DELTA_CRL_FLAG = 512,CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1,CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2,CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4,CERT_STORE_DELETE_FLAG = 16,CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32,CERT_STORE_SHARE_STORE_FLAG = 64,CERT_STORE_SHARE_CONTEXT_FLAG = 128,CERT_STORE_MANIFOLD_FLAG = 256,CERT_STORE_ENUM_ARCHIVED_FLAG = 512,CERT_STORE_UPDATE_KEYID_FLAG = 1024,CERT_STORE_BACKUP_RESTORE_FLAG = 2048,CERT_STORE_READONLY_FLAG = 32768,CERT_STORE_OPEN_EXISTING_FLAG = 16384,CERT_STORE_CREATE_NEW_FLAG = 8192,CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096,CERT_SYSTEM_STORE_MASK = -65536,CERT_SYSTEM_STORE_RELOCATE_FLAG = -2147483648,CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824,CERT_SYSTEM_STORE_LOCATION_MASK = 16711680,CERT_SYSTEM_STORE_LOCATION_SHIFT = 16,CERT_SYSTEM_STORE_CURRENT_USER_ID = 1,CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2,CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4,CERT_SYSTEM_STORE_SERVICES_ID = 5,CERT_SYSTEM_STORE_USERS_ID = 6,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9,CERT_SYSTEM_STORE_CURRENT_USER = 65536,CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072,CERT_SYSTEM_STORE_CURRENT_SERVICE = 262144,CERT_SYSTEM_STORE_SERVICES = 327680,CERT_SYSTEM_STORE_USERS = 393216,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = 458752,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 524288,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = 589824,CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1,CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2,CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4,CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8,CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8,CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16,CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32,CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3,CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0,CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1,CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2,CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256,CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512,CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1,CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2,CERT_REGISTRY_STORE_REMOTE_FLAG = 65536,CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072,CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = -2147483648,CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216,CERT_REGISTRY_STORE_ROAMING_FLAG = 262144,CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288,CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536,CERT_LDAP_STORE_SIGN_FLAG = 65536,CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072,CERT_LDAP_STORE_OPENED_FLAG = 262144,CERT_LDAP_STORE_UNBIND_FLAG = 524288,CERT_STORE_PROV_EXTERNAL_FLAG = 1,CERT_STORE_PROV_DELETED_FLAG = 2,CERT_STORE_PROV_NO_PERSIST_FLAG = 4,CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8,CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16,CERT_STORE_PROV_CLOSE_FUNC = 0,CERT_STORE_PROV_READ_CERT_FUNC = 1,CERT_STORE_PROV_WRITE_CERT_FUNC = 2,CERT_STORE_PROV_DELETE_CERT_FUNC = 3,CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4,CERT_STORE_PROV_READ_CRL_FUNC = 5,CERT_STORE_PROV_WRITE_CRL_FUNC = 6,CERT_STORE_PROV_DELETE_CRL_FUNC = 7,CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8,CERT_STORE_PROV_READ_CTL_FUNC = 9,CERT_STORE_PROV_WRITE_CTL_FUNC = 10,CERT_STORE_PROV_DELETE_CTL_FUNC = 11,CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12,CERT_STORE_PROV_CONTROL_FUNC = 13,CERT_STORE_PROV_FIND_CERT_FUNC = 14,CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15,CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16,CERT_STORE_PROV_FIND_CRL_FUNC = 17,CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18,CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19,CERT_STORE_PROV_FIND_CTL_FUNC = 20,CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21,CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22,CERT_STORE_PROV_WRITE_ADD_FLAG = 1,CERT_STORE_SAVE_AS_STORE = 1,CERT_STORE_SAVE_AS_PKCS7 = 2,CERT_STORE_SAVE_TO_FILE = 1,CERT_STORE_SAVE_TO_MEMORY = 2,CERT_STORE_SAVE_TO_FILENAME_A = 3,CERT_STORE_SAVE_TO_FILENAME_W = 4,CERT_STORE_SAVE_TO_FILENAME = 4,CERT_CLOSE_STORE_FORCE_FLAG = 1,CERT_CLOSE_STORE_CHECK_FLAG = 2,CERT_COMPARE_MASK = 65535,CERT_COMPARE_SHIFT = 16,CERT_COMPARE_ANY = 0,CERT_COMPARE_SHA1_HASH = 1,CERT_COMPARE_NAME = 2,CERT_COMPARE_ATTR = 3,CERT_COMPARE_MD5_HASH = 4,CERT_COMPARE_PROPERTY = 5,CERT_COMPARE_PUBLIC_KEY = 6,CERT_COMPARE_HASH = 1,CERT_COMPARE_NAME_STR_A = 7,CERT_COMPARE_NAME_STR_W = 8,CERT_COMPARE_KEY_SPEC = 9,CERT_COMPARE_ENHKEY_USAGE = 10,CERT_COMPARE_CTL_USAGE = 10,CERT_COMPARE_SUBJECT_CERT = 11,CERT_COMPARE_ISSUER_OF = 12,CERT_COMPARE_EXISTING = 13,CERT_COMPARE_SIGNATURE_HASH = 14,CERT_COMPARE_KEY_IDENTIFIER = 15,CERT_COMPARE_CERT_ID = 16,CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17,CERT_COMPARE_PUBKEY_MD5_HASH = 18,CERT_FIND_ANY = 0,CERT_FIND_SHA1_HASH = 65536,CERT_FIND_MD5_HASH = 262144,CERT_FIND_SIGNATURE_HASH = 917504,CERT_FIND_KEY_IDENTIFIER = 983040,CERT_FIND_HASH = 65536,CERT_FIND_PROPERTY = 327680,CERT_FIND_PUBLIC_KEY = 393216,CERT_FIND_SUBJECT_NAME = 131079,CERT_FIND_SUBJECT_ATTR = 196615,CERT_FIND_ISSUER_NAME = 131076,CERT_FIND_ISSUER_ATTR = 196612,CERT_FIND_SUBJECT_STR_A = 458759,CERT_FIND_SUBJECT_STR_W = 524295,CERT_FIND_SUBJECT_STR = 524295,CERT_FIND_ISSUER_STR_A = 458756,CERT_FIND_ISSUER_STR_W = 524292,CERT_FIND_ISSUER_STR = 524292,CERT_FIND_KEY_SPEC = 589824,CERT_FIND_ENHKEY_USAGE = 655360,CERT_FIND_CTL_USAGE = 655360,CERT_FIND_SUBJECT_CERT = 720896,CERT_FIND_ISSUER_OF = 786432,CERT_FIND_EXISTING = 851968,CERT_FIND_CERT_ID = 1048576,CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112,CERT_FIND_PUBKEY_MD5_HASH = 1179648,CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4,CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8,CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16,CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32,CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4,CERT_FIND_NO_CTL_USAGE_FLAG = 8,CERT_FIND_OR_CTL_USAGE_FLAG = 16,CERT_FIND_VALID_CTL_USAGE_FLAG = 32,CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = -2147483648,CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824,};
enum MACRO_CE_MAJOR {CE_MAJOR_VER = 0x4,CE_MINOR_VER = 0x14,CE_BUILD_VER = 0x440,CE_BUILD_SYSVER = 0x440,};
enum MACRO_CF_HDROP {CF_HDROP = 15,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CLIPCAPS {CLIPCAPS = 36,};
enum MACRO_CLIP_NOT {CLIP_NOT = 0x0,CLIP_SUS = 0x20,};
enum MACRO_CLRBREAK {CLRBREAK = 9,};
enum MACRO_CLR_NONE {CLR_NONE = 0xFFFFFFFF,CLR_DEFAULT = 0xFF000000,};
enum MACRO_CMSG_KEY {CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1,CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2,CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1,CMSG_KEY_TRANS_RECIPIENT = 1,CMSG_KEY_AGREE_RECIPIENT = 2,CMSG_MAIL_LIST_RECIPIENT = 3,CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = -2147483648,CMSG_RC4_NO_SALT_FLAG = 1073741824,CMSG_INDEFINITE_LENGTH = -1,CMSG_BARE_CONTENT_FLAG = 1,CMSG_LENGTH_ONLY_FLAG = 2,CMSG_DETACHED_FLAG = 4,CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8,CMSG_CONTENTS_OCTETS_FLAG = 16,CMSG_MAX_LENGTH_FLAG = 32,CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64,CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_TYPE_PARAM = 1,CMSG_CONTENT_PARAM = 2,CMSG_BARE_CONTENT_PARAM = 3,CMSG_INNER_CONTENT_TYPE_PARAM = 4,CMSG_SIGNER_COUNT_PARAM = 5,CMSG_SIGNER_INFO_PARAM = 6,CMSG_SIGNER_CERT_INFO_PARAM = 7,CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8,CMSG_SIGNER_AUTH_ATTR_PARAM = 9,CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10,CMSG_CERT_COUNT_PARAM = 11,CMSG_CERT_PARAM = 12,CMSG_CRL_COUNT_PARAM = 13,CMSG_CRL_PARAM = 14,CMSG_ENVELOPE_ALGORITHM_PARAM = 15,CMSG_RECIPIENT_COUNT_PARAM = 17,CMSG_RECIPIENT_INDEX_PARAM = 18,CMSG_RECIPIENT_INFO_PARAM = 19,CMSG_HASH_ALGORITHM_PARAM = 20,CMSG_HASH_DATA_PARAM = 21,CMSG_COMPUTED_HASH_PARAM = 22,CMSG_ENCRYPT_PARAM = 26,CMSG_ENCRYPTED_DIGEST = 27,CMSG_ENCODED_SIGNER = 28,CMSG_ENCODED_MESSAGE = 29,CMSG_VERSION_PARAM = 30,CMSG_ATTR_CERT_COUNT_PARAM = 31,CMSG_ATTR_CERT_PARAM = 32,CMSG_CMS_RECIPIENT_COUNT_PARAM = 33,CMSG_CMS_RECIPIENT_INDEX_PARAM = 34,CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35,CMSG_CMS_RECIPIENT_INFO_PARAM = 36,CMSG_UNPROTECTED_ATTR_PARAM = 37,CMSG_SIGNER_CERT_ID_PARAM = 38,CMSG_CMS_SIGNER_INFO_PARAM = 39,CMSG_SIGNED_DATA_V1 = 1,CMSG_SIGNED_DATA_V3 = 3,CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1,CMSG_SIGNED_DATA_CMS_VERSION = 3,CMSG_SIGNER_INFO_V1 = 1,CMSG_SIGNER_INFO_V3 = 3,CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1,CMSG_SIGNER_INFO_CMS_VERSION = 3,CMSG_HASHED_DATA_V0 = 0,CMSG_HASHED_DATA_V2 = 2,CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0,CMSG_HASHED_DATA_CMS_VERSION = 2,CMSG_ENVELOPED_DATA_V0 = 0,CMSG_ENVELOPED_DATA_V2 = 2,CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0,CMSG_ENVELOPED_DATA_CMS_VERSION = 2,CMSG_KEY_AGREE_ORIGINATOR_CERT = 1,CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2,CMSG_ENVELOPED_RECIPIENT_V0 = 0,CMSG_ENVELOPED_RECIPIENT_V2 = 2,CMSG_ENVELOPED_RECIPIENT_V3 = 3,CMSG_ENVELOPED_RECIPIENT_V4 = 4,CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0,CMSG_KEY_TRANS_CMS_VERSION = 2,CMSG_KEY_AGREE_VERSION = 3,CMSG_MAIL_LIST_VERSION = 4,CMSG_CTRL_VERIFY_SIGNATURE = 1,CMSG_CTRL_DECRYPT = 2,CMSG_CTRL_VERIFY_HASH = 5,CMSG_CTRL_ADD_SIGNER = 6,CMSG_CTRL_DEL_SIGNER = 7,CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8,CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9,CMSG_CTRL_ADD_CERT = 10,CMSG_CTRL_DEL_CERT = 11,CMSG_CTRL_ADD_CRL = 12,CMSG_CTRL_DEL_CRL = 13,CMSG_CTRL_ADD_ATTR_CERT = 14,CMSG_CTRL_DEL_ATTR_CERT = 15,CMSG_CTRL_KEY_TRANS_DECRYPT = 16,CMSG_CTRL_KEY_AGREE_DECRYPT = 17,CMSG_CTRL_MAIL_LIST_DECRYPT = 18,CMSG_CTRL_VERIFY_SIGNATURE_EX = 19,CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20,CMSG_VERIFY_SIGNER_PUBKEY = 1,CMSG_VERIFY_SIGNER_CERT = 2,CMSG_VERIFY_SIGNER_CHAIN = 3,CMSG_VERIFY_SIGNER_NULL = 4,CMSG_DEFAULT_INSTALLABLE_FUNC_OID = 1,CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1,CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16,CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1,};
enum MACRO_COLORRES {COLORRES = 108,};
enum MACRO_COLOR_NO {COLOR_NO_TRANSPARENT = 0xFFFFFFFF,};
enum MACRO_COMCTL32 {COMCTL32_VERSION = 0x20C,};
enum MACRO_COMMCTRL {COMMCTRL_TOOLBAR = 1,COMMCTRL_UPDOWN = 1,COMMCTRL_STATUS = 1,COMMCTRL_PROPSHEET = 1,COMMCTRL_LISTVIEW = 1,COMMCTRL_TREEVIEW = 1,COMMCTRL_DATE = 1,COMMCTRL_TAB = 1,COMMCTRL_PROGRESS = 1,COMMCTRL_TRACKBAR = 1,COMMCTRL_CAPEDIT = 1,COMMCTRL_REBAR = 1,COMMCTRL_CMDBAR = 1,COMMCTRL_DSA = 1,COMMCTRL_TOOLTIPS = 1,COMMCTRL_FE = 1,};
enum MACRO_COMMPROP {COMMPROP_INITIALIZED = 0xE73CF52E,};
enum MACRO_CRL_FIND {CRL_FIND_ANY = 0,CRL_FIND_ISSUED_BY = 1,CRL_FIND_EXISTING = 2,CRL_FIND_ISSUED_FOR = 3,CRL_FIND_ISSUED_BY_AKI_FLAG = 1,CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2,CRL_FIND_ISSUED_BY_DELTA_FLAG = 4,CRL_FIND_ISSUED_BY_BASE_FLAG = 8,};
enum MACRO_CRYPTCAT {CRYPTCAT_MAX_MEMBERTAG = 64,CRYPTCAT_OPEN_CREATENEW = 1,CRYPTCAT_OPEN_ALWAYS = 2,CRYPTCAT_OPEN_EXISTING = 4,CRYPTCAT_OPEN_VERIFYSIGHASH = 268435456,CRYPTCAT_ATTR_AUTHENTICATED = 268435456,CRYPTCAT_ATTR_UNAUTHENTICATED = 536870912,CRYPTCAT_ATTR_NAMEASCII = 1,CRYPTCAT_ATTR_NAMEOBJID = 2,CRYPTCAT_ATTR_DATAASCII = 65536,CRYPTCAT_ATTR_DATABASE64 = 131072,CRYPTCAT_E_AREA_HEADER = 0,CRYPTCAT_E_AREA_MEMBER = 65536,CRYPTCAT_E_AREA_ATTRIBUTE = 131072,CRYPTCAT_E_CDF_UNSUPPORTED = 1,CRYPTCAT_E_CDF_DUPLICATE = 2,CRYPTCAT_E_CDF_TAGNOTFOUND = 4,CRYPTCAT_E_CDF_MEMBER_FILE_PATH = 65537,CRYPTCAT_E_CDF_MEMBER_INDIRECTDATA = 65538,CRYPTCAT_E_CDF_MEMBER_FILENOTFOUND = 65540,CRYPTCAT_E_CDF_BAD_GUID_CONV = 131073,CRYPTCAT_E_CDF_ATTR_TOOFEWVALUES = 131074,CRYPTCAT_E_CDF_ATTR_TYPECOMBO = 131076,};
enum MACRO_CTLCOLOR {CTLCOLOR_MSGBOX = 0,CTLCOLOR_EDIT = 1,CTLCOLOR_LISTBOX = 2,CTLCOLOR_BTN = 3,CTLCOLOR_SCOLLBAR = 5,CTLCOLOR_STATIC = 6,CTLCOLOR_MAX = 7,};
enum MACRO_D3DCAPS2 {D3DCAPS2_NO2DDURING3DSCENE = 0x2,D3DCAPS2_FULLSCREENGAMMA = 0x20000,D3DCAPS2_CANRENDERWINDOWED = 0x80000,D3DCAPS2_CANCALIBRATEGAMMA = 0x100000,D3DCAPS2_RESERVED = 0x2000000,};
enum MACRO_D3DCAPS3 {D3DCAPS3_RESERVED = 0x8000001F,};
enum MACRO_D3DCLEAR {D3DCLEAR_TARGET = 0x1,D3DCLEAR_ZBUFFER = 0x2,D3DCLEAR_STENCIL = 0x4,};
enum MACRO_D3DUSAGE {D3DUSAGE_RENDERTARGET = 0x1,D3DUSAGE_DEPTHSTENCIL = 0x2,D3DUSAGE_WRITEONLY = 0x8,D3DUSAGE_SOFTWAREPROCESSING = 0x10,D3DUSAGE_DONOTCLIP = 0x20,D3DUSAGE_POINTS = 0x40,D3DUSAGE_RTPATCHES = 0x80,D3DUSAGE_NPATCHES = 0x100,D3DUSAGE_DYNAMIC = 0x200,};
enum MACRO_DATABITS {DATABITS_5 = 0x1,DATABITS_6 = 0x2,DATABITS_7 = 0x4,DATABITS_8 = 0x8,DATABITS_16 = 0x10,DATABITS_16X = 0x20,};
enum MACRO_DBPROMPT {DBPROMPT_PROMPT = 0x1,DBPROMPT_COMPLETE = 0x2,DBPROMPT_COMPLETEREQUIRED = 0x3,DBPROMPT_NOPROMPT = 0x4,};
enum MACRO_DDCREATE {DDCREATE_HARDWAREONLY = 0x1,DDCREATE_EMULATIONONLY = 0x2,};
enum MACRO_DDFXCAPS {DDFXCAPS_BLTARITHSTRETCHY = 0x20,DDFXCAPS_BLTARITHSTRETCHYN = 0x10,DDFXCAPS_BLTMIRRORLEFTRIGHT = 0x40,DDFXCAPS_BLTMIRRORUPDOWN = 0x80,DDFXCAPS_BLTROTATION = 0x100,DDFXCAPS_BLTROTATION90 = 0x200,DDFXCAPS_BLTSHRINKX = 0x400,DDFXCAPS_BLTSHRINKXN = 0x800,DDFXCAPS_BLTSHRINKY = 0x1000,DDFXCAPS_BLTSHRINKYN = 0x2000,DDFXCAPS_BLTSTRETCHX = 0x4000,DDFXCAPS_BLTSTRETCHXN = 0x8000,DDFXCAPS_BLTSTRETCHY = 0x10000,DDFXCAPS_BLTSTRETCHYN = 0x20000,DDFXCAPS_OVERLAYARITHSTRETCHY = 0x40000,DDFXCAPS_OVERLAYARITHSTRETCHYN = 0x8,DDFXCAPS_OVERLAYSHRINKX = 0x80000,DDFXCAPS_OVERLAYSHRINKXN = 0x100000,DDFXCAPS_OVERLAYSHRINKY = 0x200000,DDFXCAPS_OVERLAYSHRINKYN = 0x400000,DDFXCAPS_OVERLAYSTRETCHX = 0x800000,DDFXCAPS_OVERLAYSTRETCHXN = 0x1000000,DDFXCAPS_OVERLAYSTRETCHY = 0x2000000,DDFXCAPS_OVERLAYSTRETCHYN = 0x4000000,DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 0x8000000,DDFXCAPS_OVERLAYMIRRORUPDOWN = 0x10000000,DDFXCAPS_BLTALPHA = 0x1,DDFXCAPS_BLTTRANSFORM = 0x2,DDFXCAPS_BLTFILTER = 0x20,DDFXCAPS_OVERLAYALPHA = 0x4,DDFXCAPS_OVERLAYTRANSFORM = 0x20000000,DDFXCAPS_OVERLAYFILTER = 0x40000,};
enum MACRO_DDOVERFX {DDOVERFX_ARITHSTRETCHY = 0x1,DDOVERFX_MIRRORLEFTRIGHT = 0x2,DDOVERFX_MIRRORUPDOWN = 0x4,};
enum MACRO_DDSCAPS2 {DDSCAPS2_PERSISTENTCONTENTS = 0x1,DDSCAPS2_HARDWAREDEINTERLACE = 0x2,DDSCAPS2_HINTDYNAMIC = 0x4,DDSCAPS2_HINTSTATIC = 0x8,DDSCAPS2_TEXTUREMANAGE = 0x10,DDSCAPS2_RESERVED1 = 0x20,DDSCAPS2_RESERVED2 = 0x40,DDSCAPS2_OPAQUE = 0x80,DDSCAPS2_HINTANTIALIASING = 0x100,DDSCAPS2_CUBEMAP = 0x200,DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,DDSCAPS2_MIPMAPSUBLEVEL = 0x10000,DDSCAPS2_D3DTEXTUREMANAGE = 0x20000,DDSCAPS2_DONOTPERSIST = 0x40000,DDSCAPS2_STEREOSURFACELEFT = 0x80000,DDSCAPS2_DONOTCREATED3DTEXOBJECT = 0x100000,DDSCAPS2_VOLUME = 0x200000,DDSCAPS2_NOTUSERLOCKABLE = 0x400000,DDSCAPS2_POINTS = 0x800000,DDSCAPS2_RTPATCHES = 0x1000000,DDSCAPS2_NPATCHES = 0x2000000,DDSCAPS2_INDEXBUFFER = 0x4000000,DDSCAPS2_DEINTERLACE = 0x8000000,DDSCAPS2_DISCARDBACKBUFFER = 0x10000000,DDSCAPS2_VALID = 0x1FFFFFFF,DDSCAPS2_CUBEMAP_ALLFACES = 0xFC00,};
enum MACRO_DDSCAPS3 {DDSCAPS3_MULTISAMPLE_MASK = 0x1F,DDSCAPS3_VALID = 0x1F,};
enum MACRO_DDSVCAPS {DDSVCAPS_ENIGMA = 0x1,DDSVCAPS_FLICKER = 0x2,DDSVCAPS_REDBLUE = 0x4,DDSVCAPS_SPLIT = 0x8,};
enum MACRO_DDVPCAPS {DDVPCAPS_AUTOFLIP = 0x1,DDVPCAPS_INTERLACED = 0x2,DDVPCAPS_NONINTERLACED = 0x4,DDVPCAPS_READBACKFIELD = 0x8,DDVPCAPS_READBACKLINE = 0x10,DDVPCAPS_SHAREABLE = 0x20,DDVPCAPS_SKIPEVENFIELDS = 0x40,DDVPCAPS_SKIPODDFIELDS = 0x80,DDVPCAPS_SYNCMASTER = 0x100,DDVPCAPS_VBISURFACE = 0x200,DDVPCAPS_COLORCONTROL = 0x400,DDVPCAPS_OVERSAMPLEDVBI = 0x800,DDVPCAPS_SYSTEMMEMORY = 0x1000,DDVPCAPS_VBIANDVIDEOINDEPENDENT = 0x2000,DDVPCAPS_HARDWAREDEINTERLACE = 0x4000,};
enum MACRO_DDVPFLIP {DDVPFLIP_VIDEO = 0x1,DDVPFLIP_VBI = 0x2,};
enum MACRO_DDVPWAIT {DDVPWAIT_BEGIN = 0x1,DDVPWAIT_END = 0x2,DDVPWAIT_LINE = 0x3,};
enum MACRO_DDWAITVB {DDWAITVB_BLOCKBEGIN = 0x1,DDWAITVB_BLOCKBEGINEVENT = 0x2,DDWAITVB_BLOCKEND = 0x4,};
enum MACRO_DENORMAL {_EM_DENORMAL = 0x80000,_SW_DENORMAL = 0x80000,};
enum MACRO_DEVFLAGS {DEVFLAGS_NONE = 0x0,DEVFLAGS_UNLOAD = 0x1,DEVFLAGS_LOADLIBRARY = 0x2,DEVFLAGS_NOLOAD = 0x4,DEVFLAGS_NAKEDENTRIES = 0x8,DEVFLAGS_BOOTPHASE_1 = 0x1000,};
enum MACRO_DIRECT3D {DIRECT3D_VERSION = 0x800,D3D_SDK_VERSION = 0x78,};
enum MACRO_DISPATCH {DISPATCH_METHOD = 0x1,DISPATCH_PROPERTYGET = 0x2,DISPATCH_PROPERTYPUT = 0x4,DISPATCH_PROPERTYPUTREF = 0x8,};
enum MACRO_DMORIENT {DMORIENT_PORTRAIT = 1,DMORIENT_LANDSCAPE = 2,};
enum MACRO_DOT11_HR {DOT11_HR_CCA_MODE_ED_ONLY = 0x1,DOT11_HR_CCA_MODE_CS_ONLY = 0x2,DOT11_HR_CCA_MODE_CS_AND_ED = 0x4,DOT11_HR_CCA_MODE_CS_WITH_TIMER = 0x8,DOT11_HR_CCA_MODE_HRCS_AND_ED = 0x10,};
enum MACRO_DOT11_HW {DOT11_HW_WEP_SUPPORTED_TX = 0x1,DOT11_HW_WEP_SUPPORTED_RX = 0x2,DOT11_HW_FRAGMENTATION_SUPPORTED = 0x4,DOT11_HW_DEFRAGMENTATION_SUPPORTED = 0x8,DOT11_HW_MSDU_AUTH_SUPPORTED_TX = 0x10,DOT11_HW_MSDU_AUTH_SUPPORTED_RX = 0x20,DOT11_CONF_ALGO_WEP_RC4 = 0x1,DOT11_CONF_ALGO_TKIP = 0x2,DOT11_AUTH_ALGO_MICHAEL = 0x1,};
enum MACRO_DRAGDROP {DRAGDROP_E_FIRST = 0x80040100,DRAGDROP_E_LAST = 0x8004010F,DRAGDROP_S_FIRST = 0x40100,DRAGDROP_S_LAST = 0x4010F,};
enum MACRO_DS3DMODE {DS3DMODE_NORMAL = 0x0,DS3DMODE_HEADRELATIVE = 0x1,DS3DMODE_DISABLE = 0x2,};
enum MACRO_DSCBCAPS {DSCBCAPS_WAVEMAPPED = 0x80000000,};
enum MACRO_DSCBLOCK {DSCBLOCK_ENTIREBUFFER = 0x1,};
enum MACRO_DVASPECT {DVASPECT_SHORTNAME = 2,DVASPECT_COPY = 3,DVASPECT_LINK = 4,};
enum MACRO_DWACTION {DWACTION_ALLOCANDFILL = 1,DWACTION_FREE = 2,};
enum MACRO_DX8SFLAG {DX8SFLAG_DX8 = 0x1,DX8SFLAG_ISLOST = 0x2,DX8SFLAG_ISLIGHTWEIGHT = 0x4,DX8SFLAG_IMAGESURF = 0x8,};
enum MACRO_ENCODING {ENCODING_PREFERENCE = 0x20000,ENCODING_TEXT = 0x0,ENCODING_MIME = 0x40000,};
enum MACRO_ENUM_ALL {ENUM_ALL_CALENDARS = 0xFFFFFFFF,};
enum MACRO_EVENTLOG {EVENTLOG_SEQUENTIAL_READ = 0x1,EVENTLOG_SEEK_READ = 0x2,EVENTLOG_FORWARDS_READ = 0x4,EVENTLOG_BACKWARDS_READ = 0x8,EVENTLOG_SUCCESS = 0x0,EVENTLOG_ERROR_TYPE = 0x1,EVENTLOG_WARNING_TYPE = 0x2,EVENTLOG_INFORMATION_TYPE = 0x4,EVENTLOG_AUDIT_SUCCESS = 0x8,EVENTLOG_AUDIT_FAILURE = 0x10,EVENTLOG_START_PAIRED_EVENT = 0x1,EVENTLOG_END_PAIRED_EVENT = 0x2,EVENTLOG_END_ALL_PAIRED_EVENTS = 0x4,EVENTLOG_PAIRED_EVENT_ACTIVE = 0x8,EVENTLOG_PAIRED_EVENT_INACTIVE = 0x10,};
enum MACRO_FACILITY {FACILITY_USB_ERROR_CODE = 0x10,FACILITY_TERMINAL_SERVER = 0xA,FACILITY_RPC_STUBS = 0x3,FACILITY_RPC_RUNTIME = 0x2,FACILITY_IO_ERROR_CODE = 0x4,FACILITY_HID_ERROR_CODE = 0x11,FACILITY_FIREWIRE_ERROR_CODE = 0x12,FACILITY_CLUSTER_ERROR_CODE = 0x13,FACILITY_ACPI_ERROR_CODE = 0x14,};
enum MACRO_FILE_ANY {FILE_ANY_ACCESS = 0,FILE_READ_ACCESS = 1,FILE_WRITE_ACCESS = 2,FILE_DEVICE_BEEP = 1,FILE_DEVICE_CD_ROM = 2,FILE_DEVICE_CD_ROM_FILE_SYSTEM = 3,FILE_DEVICE_CONTROLLER = 4,FILE_DEVICE_DATALINK = 5,FILE_DEVICE_DFS = 6,FILE_DEVICE_DISK = 7,FILE_DEVICE_DISK_FILE_SYSTEM = 8,FILE_DEVICE_FILE_SYSTEM = 9,FILE_DEVICE_INPORT_PORT = 10,FILE_DEVICE_KEYBOARD = 11,FILE_DEVICE_MAILSLOT = 12,FILE_DEVICE_MIDI_IN = 13,FILE_DEVICE_MIDI_OUT = 14,FILE_DEVICE_MOUSE = 15,FILE_DEVICE_MULTI_UNC_PROVIDER = 16,FILE_DEVICE_NAMED_PIPE = 17,FILE_DEVICE_NETWORK = 18,FILE_DEVICE_NETWORK_BROWSER = 19,FILE_DEVICE_NETWORK_FILE_SYSTEM = 20,FILE_DEVICE_NULL = 21,FILE_DEVICE_PARALLEL_PORT = 22,FILE_DEVICE_PHYSICAL_NETCARD = 23,FILE_DEVICE_PRINTER = 24,FILE_DEVICE_SCANNER = 25,FILE_DEVICE_SERIAL_MOUSE_PORT = 26,FILE_DEVICE_SERIAL_PORT = 27,FILE_DEVICE_SCREEN = 28,FILE_DEVICE_SOUND = 29,FILE_DEVICE_STREAMS = 30,FILE_DEVICE_TAPE = 31,FILE_DEVICE_TAPE_FILE_SYSTEM = 32,FILE_DEVICE_TRANSPORT = 33,FILE_DEVICE_UNKNOWN = 34,FILE_DEVICE_VIDEO = 35,FILE_DEVICE_VIRTUAL_DISK = 36,FILE_DEVICE_WAVE_IN = 37,FILE_DEVICE_WAVE_OUT = 38,FILE_DEVICE_8042_PORT = 39,FILE_DEVICE_NETWORK_REDIRECTOR = 40,FILE_DEVICE_BATTERY = 41,FILE_DEVICE_BUS_EXTENDER = 42,FILE_DEVICE_MODEM = 43,FILE_DEVICE_VDM = 44,FILE_DEVICE_MASS_STORAGE = 45,FILE_DEVICE_SMB = 46,FILE_DEVICE_KS = 47,FILE_DEVICE_CHANGER = 48,FILE_DEVICE_SMARTCARD = 49,FILE_DEVICE_ACPI = 50,FILE_DEVICE_DVD = 51,FILE_DEVICE_FULLSCREEN_VIDEO = 52,FILE_DEVICE_DFS_FILE_SYSTEM = 53,FILE_DEVICE_DFS_VOLUME = 54,FILE_DEVICE_HAL = 257,FILE_DEVICE_CONSOLE = 258,FILE_DEVICE_PSL = 259,FILE_DEVICE_SERVICE = 260,};
enum MACRO_FILE_MAP {FILE_MAP_WRITE = 2,FILE_MAP_READ = 4,FILE_MAP_ALL_ACCESS = 983071,};
enum MACRO_FILTER_E {FILTER_E_END_OF_CHUNKS = 0x80041700,FILTER_E_NO_MORE_TEXT = 0x80041701,FILTER_E_NO_MORE_VALUES = 0x80041702,FILTER_E_ACCESS = 0x80041703,FILTER_W_MONIKER_CLIPPED = 0x41704,FILTER_E_NO_TEXT = 0x80041705,FILTER_E_NO_VALUES = 0x80041706,FILTER_E_EMBEDDING_UNAVAILABLE = 0x80041707,FILTER_E_LINK_UNAVAILABLE = 0x80041708,FILTER_S_LAST_TEXT = 0x41709,FILTER_S_LAST_VALUES = 0x4170A,FILTER_E_PASSWORD = 0x8004170B,FILTER_E_UNKNOWNFORMAT = 0x8004170C,};
enum MACRO_FONTTYPE {SIMULATED_FONTTYPE = 0x8000,PRINTER_FONTTYPE = 0x4000,SCREEN_FONTTYPE = 0x2000,BOLD_FONTTYPE = 0x100,ITALIC_FONTTYPE = 0x200,REGULAR_FONTTYPE = 0x400,};
enum MACRO_FORCE_XP {FORCE_XP_CONNECT = 0x40000,FORCE_XP_DISCONNECT = 0x80000,};
enum MACRO_FVIRTKEY {FVIRTKEY = 1,FNOINVERT = 2,FSHIFT = 4,FCONTROL = 8,FALT = 16,};
enum MACRO_GCS_COMP {GCS_COMP = 56,GCS_COMPREAD = 7,GCS_RESULT = 6144,GCS_RESULTREAD = 1536,};
enum MACRO_GENERATE {GENERATE_METHOD_EXACT = 0,GENERATE_METHOD_PREFIX = 1,GENERATE_METHOD_INFLECT = 2,};
enum MACRO_GRADIENT {GRADIENT_FILL_RECT_H = 0x0,GRADIENT_FILL_RECT_V = 0x1,GRADIENT_FILL_TRIANGLE = 0x2,GRADIENT_FILL_OP_FLAG = 0xFF,};
enum MACRO_HTBORDER {HTBORDER = 18,};
enum MACRO_HTBOTTOM {HTBOTTOM = 15,HTBOTTOMLEFT = 16,};
enum MACRO_HTOBJECT {HTOBJECT = 19,};
enum MACRO_HTREDUCE {HTREDUCE = 8,};
enum MACRO_HWND_TOP {HWND_TOP = 0,HWND_TOPMOST = -1,HWND_NOTOPMOST = -2,HWND_BOTTOM = 1,};
enum MACRO_IDIGNORE {IDIGNORE = 5,};
enum MACRO_IMAP_MSG {IMAP_MSG_NOFLAGS = 0,IMAP_MSG_ANSWERED = 1,IMAP_MSG_FLAGGED = 2,IMAP_MSG_DELETED = 4,IMAP_MSG_SEEN = 8,IMAP_MSG_DRAFT = 16,IMAP_MSG_ALLFLAGS = 31,};
enum MACRO_IMC_EDIT {IMC_EDIT_CONVERT = 0x1,IMC_EDIT_DETERMINE = 0x2,IMC_EDIT_CANCELCONVERT = 0x3,IMC_EDIT_GETSTATUS = 0x4,IMC_EDIT_UNDO = 0x5,IMC_EDIT_CANUNDO = 0x6,IMC_EDIT_EMPTYUNDOBUFFER = 0x7,IMC_EDIT_REPLACESEL = 0x8,IMC_EDIT_CLEARALL = 0x9,IMC_EDIT_SETIMC = 0xA,IMC_EDIT_GETCANDIDATEPOS = 0xB,IMC_EDIT_UPDATEPROP = 0xC,IMC_EDIT_HALFWIDTH = 0xD,IMC_EDIT_UPDATECLIST = 0xE,};
enum MACRO_IME_PROP {IME_PROP_END_UNLOAD = 0x1,IME_PROP_KBD_CHAR_FIRST = 0x2,IME_PROP_IGNORE_UPKEYS = 0x4,IME_PROP_NEED_ALTKEY = 0x8,IME_PROP_NO_KEYS_ON_CLOSE = 0x10,IME_PROP_AT_CARET = 0x10000,IME_PROP_SPECIAL_UI = 0x20000,IME_PROP_CANDLIST_START_FROM_1 = 0x40000,IME_PROP_UNICODE = 0x80000,IME_PROP_COMPLETE_ON_UNSELECT = 0x100000,IME_PROP_ALL = 0x1F001F,};
enum MACRO_IMGTRANS {IMGTRANS_OPAQUE = 0x20000000,IMGTRANS_MASK = 0x20000000,};
enum MACRO_IM_SPELL {IM_SPELL = 0,IM_AMBIG = 1,IM_NUMBERS = 2,IM_LAST = 2,IM_MASK = 65535,};
enum MACRO_INFINITE {INFINITE = 0xFFFFFFFF,};
enum MACRO_INTERENT {INTERENT_GOONLINE_REFRESH = 0x1,INTERENT_GOONLINE_MASK = 0x1,};
enum MACRO_INTERNET {INTERNET_ERROR_BASE = 12000,};
enum MACRO_IOC_UNIX {IOC_UNIX = 0x0,IOC_WS2 = 0x8000000,IOC_PROTOCOL = 0x10000000,IOC_VENDOR = 0x18000000,};
enum MACRO_IPRTRMGR {IPRTRMGR_PID = 10000,};
enum MACRO_IP_STATS {IP_STATS = 3,IP_ADDRTABLE = 4,IP_ADDRROW = 5,IP_FORWARDNUMBER = 6,IP_FORWARDTABLE = 7,IP_FORWARDROW = 8,IP_NETTABLE = 9,IP_NETROW = 10,};
enum MACRO_LANGUAGE {LANGUAGE_S_LARGE_WORD = 0x41781,};
enum MACRO_LDAP_OPT {LDAP_OPT_REFERRAL_CALLBACK = 0x70,LDAP_OPT_CLIENT_CERTIFICATE = 0x80,LDAP_OPT_SERVER_CERTIFICATE = 0x81,LDAP_OPT_REF_DEREF_CONN_PER_MSG = 0x94,};
enum MACRO_LINECAPS {LINECAPS = 30,POLYGONALCAPS = 32,};
enum MACRO_LMEM_SET {LMEM_SET_ALLOC_FLAG_ASSIGN = 0,LMEM_SET_ALLOC_FLAG_SET = 1,LMEM_SET_ALLOC_FLAG_CLEAR = 2,};
enum MACRO_MAILSLOT {MAILSLOT_NO_MESSAGE = 4294967295,MAILSLOT_WAIT_FOREVER = 4294967295,};
enum MACRO_MAPI_NON {MAPI_NON_READ = 0x1,};
enum MACRO_MAPI_ONE {MAPI_ONE_OFF_NO_RICH_INFO = 0x1,MAPI_DEFERRED_ERRORS = 0x8,MAPI_ASSOCIATED = 0x40,};
enum MACRO_MAPI_TOP {MAPI_TOP_LEVEL = 0x1,MAPI_ERROR_VERSION = 0x0,};
enum MACRO_MAXDWORD {MAXDWORD = 0xFFFFFFFF,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,MINLONG = 0x80000000,};
enum MACRO_MAXULONG {MAXULONG = 0xFFFFFFFF,};
enum MACRO_MAX_FQDN {MAX_FQDN_HOSTNAME = 1025,MAX_RELAY_INFO = 5,};
enum MACRO_MAX_LOAD {MAX_LOAD_ORDER = 255,};
enum MACRO_MAX_SIZE {MAX_SIZE_SECURITY_ID = 512,};
enum MACRO_MCAST_IF {MCAST_IF_ENTRY = 23,MCAST_GLOBAL = 24,};
enum MACRO_MDMEMBER {MDMEMBER_TYPE_UNKNOWN = 0x0,MDMEMBER_TYPE_REGULAR = 0x1,MDMEMBER_TYPE_ALL = 0x2,MDMEMBER_TYPE_MEASURE = 0x3,MDMEMBER_TYPE_FORMULA = 0x4,MDMEMBER_TYPE_RESERVE1 = 0x5,MDMEMBER_TYPE_RESERVE2 = 0x6,MDMEMBER_TYPE_RESERVE3 = 0x7,MDMEMBER_TYPE_RESERVE4 = 0x8,};
enum MACRO_MDTREEOP {MDTREEOP_CHILDREN = 0x1,MDTREEOP_SIBLINGS = 0x2,MDTREEOP_PARENT = 0x4,MDTREEOP_SELF = 0x8,MDTREEOP_DESCENDANTS = 0x10,MDTREEOP_ANCESTORS = 0x20,};
enum MACRO_MEMBERID {MEMBERID_NIL = -1,};
enum MACRO_MENULOOP {MENULOOP_WINDOW = 0,MENULOOP_POPUP = 1,};
enum MACRO_MIDICAPS {MIDICAPS_VOLUME = 0x1,MIDICAPS_LRVOLUME = 0x2,MIDICAPS_CACHE = 0x4,MIDICAPS_STREAM = 0x8,};
enum MACRO_MIDIPROP {MIDIPROP_SET = 0x80000000,MIDIPROP_GET = 0x40000000,MIDIPROP_TIMEDIV = 0x1,MIDIPROP_TEMPO = 0x2,MIDIPROP_SMF = 0x3,MIDIPROP_BUFFERED = 0x4,MIDIPROP_LOOPING = 0x5,MIDIPROP_GENERALMIDI = 0x6,};
enum MACRO_MIDISTRM {MIDISTRM_ERROR = -2,};
enum MACRO_MMSYSERR {MMSYSERR_NOERROR = 0,MMSYSERR_ERROR = 1,MMSYSERR_BADDEVICEID = 2,MMSYSERR_NOTENABLED = 3,MMSYSERR_ALLOCATED = 4,MMSYSERR_INVALHANDLE = 5,MMSYSERR_NODRIVER = 6,MMSYSERR_NOMEM = 7,MMSYSERR_NOTSUPPORTED = 8,MMSYSERR_BADERRNUM = 9,MMSYSERR_INVALFLAG = 10,MMSYSERR_INVALPARAM = 11,MMSYSERR_HANDLEBUSY = 12,MMSYSERR_INVALIDALIAS = 13,MMSYSERR_BADDB = 14,MMSYSERR_KEYNOTFOUND = 15,MMSYSERR_READERROR = 16,MMSYSERR_WRITEERROR = 17,MMSYSERR_DELETEERROR = 18,MMSYSERR_VALNOTFOUND = 19,MMSYSERR_NODRIVERCB = 20,MMSYSERR_LASTERROR = 20,};
enum MACRO_MODRECIP {MODRECIP_ADD = 0x2,MODRECIP_MODIFY = 0x4,MODRECIP_REMOVE = 0x8,};
enum MACRO_MOD_DONE {MOD_DONE = 4104,};
enum MACRO_MOD_HOLD {MOD_HOLD = 0x8000,};
enum MACRO_MOD_LEFT {MOD_LEFT = 0x8000,MOD_RIGHT = 0x4000,MOD_ON_KEYUP = 0x800,MOD_IGNORE_ALL_MODIFIER = 0x400,};
enum MACRO_MQ_ADMIN {MQ_ADMIN_ACCESS = 0x80,};
enum MACRO_MSGQUEUE {MSGQUEUE_NOPRECOMMIT = 0x1,MSGQUEUE_ALLOW_BROKEN = 0x2,MSGQUEUE_MSGALERT = 0x1,};
enum MACRO_MSHTMDBG {MSHTMDBG_API_VERSION = 6,};
enum MACRO_NDIS_802 {NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS = 0xF,NDIS_802_11_AUTH_REQUEST_REAUTH = 0x1,NDIS_802_11_AUTH_REQUEST_KEYUPDATE = 0x2,NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR = 0x6,NDIS_802_11_AUTH_REQUEST_GROUP_ERROR = 0xE,NDIS_802_11_AI_REQFI_CAPABILITIES = 0x1,NDIS_802_11_AI_REQFI_LISTENINTERVAL = 0x2,NDIS_802_11_AI_REQFI_CURRENTAPADDRESS = 0x4,NDIS_802_11_AI_RESFI_CAPABILITIES = 0x1,NDIS_802_11_AI_RESFI_STATUSCODE = 0x2,NDIS_802_11_AI_RESFI_ASSOCIATIONID = 0x4,};
enum MACRO_NDIS_PNP {NDIS_PNP_WAKE_UP_MAGIC_PACKET = 0x1,NDIS_PNP_WAKE_UP_PATTERN_MATCH = 0x2,NDIS_PNP_WAKE_UP_LINK_CHANGE = 0x4,};
enum MACRO_NETSCAPE {NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 0x80,NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 0x40,NETSCAPE_SMIME_CERT_TYPE = 0x20,NETSCAPE_SIGN_CERT_TYPE = 0x10,NETSCAPE_SSL_CA_CERT_TYPE = 0x4,NETSCAPE_SMIME_CA_CERT_TYPE = 0x2,NETSCAPE_SIGN_CA_CERT_TYPE = 0x1,};
enum MACRO_NODETYPE {BROADCAST_NODETYPE = 1,PEER_TO_PEER_NODETYPE = 2,MIXED_NODETYPE = 4,HYBRID_NODETYPE = 8,};
enum MACRO_NOPARITY {NOPARITY = 0,ODDPARITY = 1,EVENPARITY = 2,};
enum MACRO_NTFRSPRF {NTFRSPRF_OPEN_RPC_BINDING_ERROR_SET = 0xC00034D7,NTFRSPRF_OPEN_RPC_BINDING_ERROR_CONN = 0xC00034D8,NTFRSPRF_OPEN_RPC_CALL_ERROR_SET = 0xC00034D9,NTFRSPRF_OPEN_RPC_CALL_ERROR_CONN = 0xC00034DA,NTFRSPRF_COLLECT_RPC_BINDING_ERROR_SET = 0xC00034DB,NTFRSPRF_COLLECT_RPC_BINDING_ERROR_CONN = 0xC00034DC,NTFRSPRF_COLLECT_RPC_CALL_ERROR_SET = 0xC00034DD,NTFRSPRF_COLLECT_RPC_CALL_ERROR_CONN = 0xC00034DE,NTFRSPRF_VIRTUALALLOC_ERROR_SET = 0xC00034DF,NTFRSPRF_VIRTUALALLOC_ERROR_CONN = 0xC00034E0,NTFRSPRF_REGISTRY_ERROR_SET = 0xC00034E1,NTFRSPRF_REGISTRY_ERROR_CONN = 0xC00034E2,};
enum MACRO_NUMFONTS {NUMFONTS = 22,};
enum MACRO_OBJ_TYPE {MIN_OBJ_TYPE = 1,MAX_OBJ_TYPE = 13,};
enum MACRO_OID_IRDA {OID_IRDA_RECEIVING = 0xA010100,OID_IRDA_TURNAROUND_TIME = 0xA010101,OID_IRDA_SUPPORTED_SPEEDS = 0xA010102,OID_IRDA_LINK_SPEED = 0xA010103,OID_IRDA_MEDIA_BUSY = 0xA010104,OID_IRDA_EXTRA_RCV_BOFS = 0xA010200,OID_IRDA_RATE_SNIFF = 0xA010201,OID_IRDA_UNICAST_LIST = 0xA010202,OID_IRDA_MAX_UNICAST_LIST_SIZE = 0xA010203,OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = 0xA010204,OID_IRDA_MAX_SEND_WINDOW_SIZE = 0xA010205,OID_IRDA_RELEASE_HW_RESOURCES = 0xA01020A,OID_IRDA_REACQUIRE_HW_RESOURCES = 0xA01020B,OID_IRDA_RESERVED1 = 0xA01020A,OID_IRDA_RESERVED2 = 0xA01020F,OID_BPC_ADAPTER_CAPS = 0xB010100,OID_BPC_DEVICES = 0xB010101,OID_BPC_DEVICE_CAPS = 0xB010102,OID_BPC_DEVICE_SETTINGS = 0xB010103,OID_BPC_CONNECTION_STATUS = 0xB010104,OID_BPC_ADDRESS_COMPARE = 0xB010105,OID_BPC_PROGRAM_GUIDE = 0xB010106,OID_BPC_LAST_ERROR = 0xB020107,OID_BPC_POOL = 0xB010108,OID_BPC_PROVIDER_SPECIFIC = 0xB020109,OID_BPC_ADAPTER_SPECIFIC = 0xB02010A,OID_BPC_CONNECT = 0xB01010B,OID_BPC_COMMIT = 0xB01010C,OID_BPC_DISCONNECT = 0xB01010D,OID_BPC_CONNECTION_ENABLE = 0xB01010E,OID_BPC_POOL_RESERVE = 0xB01010F,OID_BPC_POOL_RETURN = 0xB010110,OID_BPC_FORCE_RECEIVE = 0xB010111,OID_BPC_LAST = 0xB020112,OID_1394_LOCAL_NODE_INFO = 0xC010101,OID_1394_VC_INFO = 0xC010102,OID_CO_ADD_PVC = 0xFE000001,OID_CO_DELETE_PVC = 0xFE000002,OID_CO_GET_CALL_INFORMATION = 0xFE000003,OID_CO_ADD_ADDRESS = 0xFE000004,OID_CO_DELETE_ADDRESS = 0xFE000005,OID_CO_GET_ADDRESSES = 0xFE000006,OID_CO_ADDRESS_CHANGE = 0xFE000007,OID_CO_SIGNALING_ENABLED = 0xFE000008,OID_CO_SIGNALING_DISABLED = 0xFE000009,OID_CO_AF_CLOSE = 0xFE00000A,OID_CO_TAPI_CM_CAPS = 0xFE001001,OID_CO_TAPI_LINE_CAPS = 0xFE001002,OID_CO_TAPI_ADDRESS_CAPS = 0xFE001003,OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = 0xFE001004,OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = 0xFE001005,OID_CO_TAPI_TRANSLATE_TAPI_SAP = 0xFE001006,OID_CO_TAPI_GET_CALL_DIAGNOSTICS = 0xFE001007,OID_CO_TAPI_REPORT_DIGITS = 0xFE001008,OID_CO_TAPI_DONT_REPORT_DIGITS = 0xFE001009,OID_PNP_CAPABILITIES = 0xFD010100,OID_PNP_SET_POWER = 0xFD010101,OID_PNP_QUERY_POWER = 0xFD010102,OID_PNP_ADD_WAKE_UP_PATTERN = 0xFD010103,OID_PNP_REMOVE_WAKE_UP_PATTERN = 0xFD010104,OID_PNP_WAKE_UP_PATTERN_LIST = 0xFD010105,OID_PNP_ENABLE_WAKE_UP = 0xFD010106,OID_PNP_WAKE_UP_OK = 0xFD020200,OID_PNP_WAKE_UP_ERROR = 0xFD020201,};
enum MACRO_OLEAUT32 {OLEAUT32_OAALL = 1,};
enum MACRO_OLEDBVER {OLEDBVER = 0x250,};
enum MACRO_OLEIVERB {OLEIVERB_PRIMARY = 0,OLEIVERB_SHOW = -1,OLEIVERB_OPEN = -2,OLEIVERB_HIDE = -3,OLEIVERB_UIACTIVATE = -4,OLEIVERB_INPLACEACTIVATE = -5,OLEIVERB_DISCARDUNDOSTATE = -6,};
enum MACRO_OPCTPATH {OPCTPATH_DEFAULTS = 0,OPCTPATH_ASYNCHRONOUS = 1,OPCTPATH_RUNTIME = 2,OPCTPATH_RESERVED1 = 4,};
enum MACRO_OPEN_FOR {OPEN_FOR_LOADER = 6,};
enum MACRO_PATPAINT {PATPAINT = 0xFB0A09,};
enum MACRO_PHONEERR {PHONEERR_ALLOCATED = 0x90000001,PHONEERR_BADDEVICEID = 0x90000002,PHONEERR_INCOMPATIBLEAPIVERSION = 0x90000003,PHONEERR_INCOMPATIBLEEXTVERSION = 0x90000004,PHONEERR_INIFILECORRUPT = 0x90000005,PHONEERR_INUSE = 0x90000006,PHONEERR_INVALAPPHANDLE = 0x90000007,PHONEERR_INVALAPPNAME = 0x90000008,PHONEERR_INVALBUTTONLAMPID = 0x90000009,PHONEERR_INVALBUTTONMODE = 0x9000000A,PHONEERR_INVALBUTTONSTATE = 0x9000000B,PHONEERR_INVALDATAID = 0x9000000C,PHONEERR_INVALDEVICECLASS = 0x9000000D,PHONEERR_INVALEXTVERSION = 0x9000000E,PHONEERR_INVALHOOKSWITCHDEV = 0x9000000F,PHONEERR_INVALHOOKSWITCHMODE = 0x90000010,PHONEERR_INVALLAMPMODE = 0x90000011,PHONEERR_INVALPARAM = 0x90000012,PHONEERR_INVALPHONEHANDLE = 0x90000013,PHONEERR_INVALPHONESTATE = 0x90000014,PHONEERR_INVALPOINTER = 0x90000015,PHONEERR_INVALPRIVILEGE = 0x90000016,PHONEERR_INVALRINGMODE = 0x90000017,PHONEERR_NODEVICE = 0x90000018,PHONEERR_NODRIVER = 0x90000019,PHONEERR_NOMEM = 0x9000001A,PHONEERR_NOTOWNER = 0x9000001B,PHONEERR_OPERATIONFAILED = 0x9000001C,PHONEERR_OPERATIONUNAVAIL = 0x9000001D,PHONEERR_RESOURCEUNAVAIL = 0x9000001F,PHONEERR_REQUESTOVERRUN = 0x90000020,PHONEERR_STRUCTURETOOSMALL = 0x90000021,PHONEERR_UNINITIALIZED = 0x90000022,PHONEERR_REINIT = 0x90000023,};
enum MACRO_PID_BASE {PID_BASE = 2,};
enum MACRO_PKCS_CTL {PKCS_CTL = 37,};
enum MACRO_PKCS_RC2 {PKCS_RC2_CBC_PARAMETERS = 41,PKCS_SMIME_CAPABILITIES = 42,PKCS_RSA_PRIVATE_KEY = 43,PKCS_PRIVATE_KEY_INFO = 44,PKCS_ENCRYPTED_PRIVATE_KEY_INFO = 45,};
enum MACRO_PKCS_UTC {PKCS_UTC_TIME = 17,PKCS_TIME_REQUEST = 18,};
enum MACRO_PLATFORM {PLATFORM_WIN95 = 0x1,PLATFORM_WIN98 = 0x2,PLATFORM_NT4 = 0x4,PLATFORM_NT5 = 0x8,PLATFORM_NT4ALPHA = 0x10,PLATFORM_NT5ALPHA = 0x20,PLATFORM_MILLEN = 0x40,PLATFORM_ALL = 0x7F,};
enum MACRO_POSITIVE {POSITIVE_INFINITY_RATE = 0xFFFFFFFE,};
enum MACRO_PROGSINK {PROGSINK_CLASS_FORWARDED = 0x80000000,PROGSINK_CLASS_NOSPIN = 0x40000000,PROGSINK_CLASS_HTML = 0x0,PROGSINK_CLASS_MULTIMEDIA = 0x1,PROGSINK_CLASS_CONTROL = 0x2,PROGSINK_CLASS_DATABIND = 0x3,PROGSINK_CLASS_OTHER = 0x4,PROGSINK_CLASS_NOREMAIN = 0x5,PROGSINK_CLASS_FRAME = 0x6,PROGSINK_STATE_IDLE = 0x0,PROGSINK_STATE_FINISHING = 0x1,PROGSINK_STATE_CONNECTING = 0x2,PROGSINK_STATE_LOADING = 0x3,PROGSINK_SET_STATE = 0x1,PROGSINK_SET_TEXT = 0x2,PROGSINK_SET_IDS = 0x4,PROGSINK_SET_POS = 0x8,PROGSINK_SET_MAX = 0x10,};
enum MACRO_PROPID_M {PROPID_M_BASE = 0,PROPID_M_CLASS = 1,PROPID_M_MSGID = 2,PROPID_M_CORRELATIONID = 3,PROPID_M_PRIORITY = 4,PROPID_M_DELIVERY = 5,PROPID_M_ACKNOWLEDGE = 6,PROPID_M_JOURNAL = 7,PROPID_M_APPSPECIFIC = 8,PROPID_M_BODY = 9,PROPID_M_BODY_SIZE = 10,PROPID_M_LABEL = 11,PROPID_M_LABEL_LEN = 12,PROPID_M_TIME_TO_REACH_QUEUE = 13,PROPID_M_TIME_TO_BE_RECEIVED = 14,PROPID_M_RESP_QUEUE = 15,PROPID_M_RESP_QUEUE_LEN = 16,PROPID_M_ADMIN_QUEUE = 17,PROPID_M_ADMIN_QUEUE_LEN = 18,PROPID_M_VERSION = 19,PROPID_M_SENDERID = 20,PROPID_M_SENDERID_LEN = 21,PROPID_M_SENDERID_TYPE = 22,PROPID_M_PRIV_LEVEL = 23,PROPID_M_AUTH_LEVEL = 24,PROPID_M_AUTHENTICATED = 25,PROPID_M_HASH_ALG = 26,PROPID_M_ENCRYPTION_ALG = 27,PROPID_M_SENDER_CERT = 28,PROPID_M_SENDER_CERT_LEN = 29,PROPID_M_SRC_MACHINE_ID = 30,PROPID_M_SENTTIME = 31,PROPID_M_ARRIVEDTIME = 32,PROPID_M_DEST_QUEUE = 33,PROPID_M_DEST_QUEUE_LEN = 34,PROPID_M_EXTENSION = 35,PROPID_M_EXTENSION_LEN = 36,PROPID_M_SECURITY_CONTEXT = 37,PROPID_M_CONNECTOR_TYPE = 38,PROPID_M_XACT_STATUS_QUEUE = 39,PROPID_M_XACT_STATUS_QUEUE_LEN = 40,PROPID_M_TRACE = 41,PROPID_M_BODY_TYPE = 42,PROPID_M_DEST_SYMM_KEY = 43,PROPID_M_DEST_SYMM_KEY_LEN = 44,PROPID_M_SIGNATURE = 45,PROPID_M_SIGNATURE_LEN = 46,PROPID_M_PROV_TYPE = 47,PROPID_M_PROV_NAME = 48,PROPID_M_PROV_NAME_LEN = 49,PROPID_M_FIRST_IN_XACT = 50,PROPID_M_LAST_IN_XACT = 51,PROPID_M_XACTID = 52,PROPID_M_AUTHENTICATED_EX = 53,PROPID_M_RESP_FORMAT_NAME = 54,PROPID_M_RESP_FORMAT_NAME_LEN = 55,PROPID_M_DEST_FORMAT_NAME = 58,PROPID_M_DEST_FORMAT_NAME_LEN = 59,PROPID_M_LOOKUPID = 60,PROPID_M_SOAP_ENVELOPE = 61,PROPID_M_SOAP_ENVELOPE_LEN = 62,PROPID_M_COMPOUND_MESSAGE = 63,PROPID_M_COMPOUND_MESSAGE_SIZE = 64,PROPID_M_SOAP_HEADER = 65,PROPID_M_SOAP_BODY = 66,PROPID_M_BASE_WINCE = 1000,PROPID_M_SOAP_FWD_VIA = 1001,PROPID_M_SOAP_FWD_VIA_SIZE = 1002,PROPID_M_SOAP_REV_VIA = 1003,PROPID_M_SOAP_REV_VIA_SIZE = 1004,PROPID_M_SOAP_FROM = 1005,PROPID_M_SOAP_FROM_LEN = 1006,PROPID_M_SOAP_RELATES_TO = 1007,PROPID_M_SOAP_RELATES_TO_LEN = 1008,PROPID_M_MSGID_SIZE = 20,PROPID_M_CORRELATIONID_SIZE = 20,};
enum MACRO_PROPID_Q {PROPID_Q_BASE = 100,PROPID_Q_INSTANCE = 101,PROPID_Q_TYPE = 102,PROPID_Q_PATHNAME = 103,PROPID_Q_JOURNAL = 104,PROPID_Q_QUOTA = 105,PROPID_Q_BASEPRIORITY = 106,PROPID_Q_JOURNAL_QUOTA = 107,PROPID_Q_LABEL = 108,PROPID_Q_CREATE_TIME = 109,PROPID_Q_MODIFY_TIME = 110,PROPID_Q_AUTHENTICATE = 111,PROPID_Q_PRIV_LEVEL = 112,PROPID_Q_TRANSACTION = 113,};
enum MACRO_PROTOCOL {BASE_PROTOCOL = 1,LAYERED_PROTOCOL = 0,};
enum MACRO_QPARSE_E {QPARSE_E_INVALID_GROUPING = 0x80041677,};
enum MACRO_QPLIST_S {QPLIST_S_DUPLICATE = 0x41679,};
enum MACRO_READABLE {READABLE_LOCAL_CLOCK = 0x1,};
enum MACRO_RESOURCE {RESOURCE_CONNECTED = 0x1,RESOURCE_GLOBALNET = 0x2,RESOURCE_REMEMBERED = 0x3,RESOURCE_RECENT = 0x4,RESOURCE_CONTEXT = 0x5,};
enum MACRO_RESPONSE {RESPONSE_AVAILABLE = 0x1,};
enum MACRO_RIFFCPPO {RIFFCPPO = 1330663491,};
enum MACRO_RIFFINFO {RIFFINFO_IARL = 1280459081,RIFFINFO_IART = 1414676809,RIFFINFO_ICMS = 1397572425,RIFFINFO_ICMT = 1414349641,RIFFINFO_ICOP = 1347371849,RIFFINFO_ICRD = 1146241865,RIFFINFO_ICRP = 1347568457,RIFFINFO_IDIM = 1296647241,RIFFINFO_IDPI = 1229997129,RIFFINFO_IENG = 1196311881,RIFFINFO_IGNR = 1380861769,RIFFINFO_IKEY = 1497713481,RIFFINFO_ILGT = 1413958729,RIFFINFO_IMED = 1145392457,RIFFINFO_INAM = 1296125513,RIFFINFO_IPLT = 1414287433,RIFFINFO_IPRD = 1146245193,RIFFINFO_ISBJ = 1245860681,RIFFINFO_ISFT = 1413894985,RIFFINFO_ISHP = 1346917193,RIFFINFO_ISRC = 1129468745,RIFFINFO_ISRF = 1179800393,RIFFINFO_ITCH = 1212372041,RIFFINFO_ISMP = 1347244873,RIFFINFO_IDIT = 1414087753,};
enum MACRO_RIFFWAVE {RIFFWAVE_inst = 1953721961,};
enum MACRO_ROCKWELL {ROCKWELL_WA1_WAVEIN = 100,ROCKWELL_WA1_WAVEOUT = 101,ROCKWELL_WA1_SYNTH = 102,ROCKWELL_WA1_MIXER = 103,ROCKWELL_WA1_MPU401_IN = 104,ROCKWELL_WA1_MPU401_OUT = 105,ROCKWELL_WA2_WAVEIN = 200,ROCKWELL_WA2_WAVEOUT = 201,ROCKWELL_WA2_SYNTH = 202,ROCKWELL_WA2_MIXER = 203,ROCKWELL_WA2_MPU401_IN = 204,ROCKWELL_WA2_MPU401_OUT = 205,};
enum MACRO_ROTFLAGS {ROTFLAGS_REGISTRATIONKEEPSALIVE = 0x1,ROTFLAGS_ALLOWANYCLIENT = 0x2,};
enum MACRO_RPC_C_EP {RPC_C_EP_ALL_ELTS = 0,RPC_C_EP_MATCH_BY_IF = 1,RPC_C_EP_MATCH_BY_OBJ = 2,RPC_C_EP_MATCH_BY_BOTH = 3,RPC_C_VERS_ALL = 1,RPC_C_VERS_COMPATIBLE = 2,RPC_C_VERS_EXACT = 3,RPC_C_VERS_MAJOR_ONLY = 4,RPC_C_VERS_UPTO = 5,RPC_C_MGMT_INQ_IF_IDS = 0,RPC_C_MGMT_INQ_PRINC_NAME = 1,RPC_C_MGMT_INQ_STATS = 2,RPC_C_MGMT_IS_SERVER_LISTEN = 3,RPC_C_MGMT_STOP_SERVER_LISTEN = 4,RPC_C_PARM_MAX_PACKET_LENGTH = 1,RPC_C_PARM_BUFFER_LENGTH = 2,RPC_IF_AUTOLISTEN = 1,RPC_IF_OLE = 2,RPC_NCA_FLAGS_DEFAULT = 0,RPC_NCA_FLAGS_IDEMPOTENT = 1,RPC_NCA_FLAGS_BROADCAST = 2,RPC_NCA_FLAGS_MAYBE = 4,RPC_BUFFER_COMPLETE = 4096,RPC_BUFFER_PARTIAL = 8192,RPC_BUFFER_EXTRA = 16384,RPC_BUFFER_ASYNC = 32768,RPC_BUFFER_NONOTIFY = 65536,};
enum MACRO_RPC_C_NS {RPC_C_NS_SYNTAX_DEFAULT = 0,RPC_C_NS_SYNTAX_DCE = 3,RPC_C_PROFILE_DEFAULT_ELT = 0,RPC_C_PROFILE_ALL_ELT = 1,RPC_C_PROFILE_ALL_ELTS = 1,RPC_C_PROFILE_MATCH_BY_IF = 2,RPC_C_PROFILE_MATCH_BY_MBR = 3,RPC_C_PROFILE_MATCH_BY_BOTH = 4,RPC_C_NS_DEFAULT_EXP_AGE = -1,RPC_S_OK = 0,RPC_S_INVALID_ARG = 87,RPC_S_OUT_OF_MEMORY = 14,RPC_S_OUT_OF_THREADS = 164,RPC_S_INVALID_LEVEL = 87,RPC_S_BUFFER_TOO_SMALL = 122,RPC_S_INVALID_SECURITY_DESC = 1338,RPC_S_ACCESS_DENIED = 5,RPC_S_SERVER_OUT_OF_MEMORY = 1130,RPC_S_ASYNC_CALL_PENDING = 997,RPC_X_NO_MEMORY = 14,RPC_X_INVALID_BOUND = 1734,RPC_X_INVALID_TAG = 1733,RPC_X_ENUM_VALUE_TOO_LARGE = 1781,RPC_X_SS_CONTEXT_MISMATCH = 6,RPC_X_INVALID_BUFFER = 1784,RPC_X_PIPE_APP_MEMORY = 14,RPC_X_INVALID_PIPE_OPERATION = 1831,};
enum MACRO_RTVector {RTVector = 7,RTNatLanguage = 8,};
enum MACRO_SAVEBODY {SAVEBODY_KEEPBOUNDARY = 0x1,};
enum MACRO_SCHANNEL {SCHANNEL_MAC_KEY = 0x0,SCHANNEL_ENC_KEY = 0x1,};
enum MACRO_SCH_CRED {SCH_CRED_NO_SYSTEM_MAPPER = 0x2,SCH_CRED_NO_SERVERNAME_CHECK = 0x4,SCH_CRED_MANUAL_CRED_VALIDATION = 0x8,SCH_CRED_NO_DEFAULT_CREDS = 0x10,SCH_CRED_AUTO_CRED_VALIDATION = 0x20,SCH_CRED_USE_DEFAULT_CREDS = 0x40,SCH_CRED_REVOCATION_CHECK_END_CERT = 0x100,SCH_CRED_REVOCATION_CHECK_CHAIN = 0x200,SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x400,SCH_CRED_IGNORE_NO_REVOCATION_CHECK = 0x800,SCH_CRED_IGNORE_REVOCATION_OFFLINE = 0x1000,};
enum MACRO_SECURITY {SECURITY_NULL_RID = 0x0,SECURITY_WORLD_RID = 0x0,SECURITY_LOCAL_RID = 0x0,SECURITY_CREATOR_OWNER_RID = 0x0,SECURITY_CREATOR_GROUP_RID = 0x1,SECURITY_CREATOR_OWNER_SERVER_RID = 0x2,SECURITY_CREATOR_GROUP_SERVER_RID = 0x3,SECURITY_DIALUP_RID = 0x1,SECURITY_NETWORK_RID = 0x2,SECURITY_BATCH_RID = 0x3,SECURITY_INTERACTIVE_RID = 0x4,SECURITY_SERVICE_RID = 0x6,SECURITY_ANONYMOUS_LOGON_RID = 0x7,SECURITY_PROXY_RID = 0x8,SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9,SECURITY_SERVER_LOGON_RID = 0x9,SECURITY_PRINCIPAL_SELF_RID = 0xA,SECURITY_AUTHENTICATED_USER_RID = 0xB,SECURITY_RESTRICTED_CODE_RID = 0xC,SECURITY_LOGON_IDS_RID = 0x5,SECURITY_LOGON_IDS_RID_COUNT = 0x3,SECURITY_LOCAL_SYSTEM_RID = 0x12,SECURITY_NT_NON_UNIQUE = 0x15,SECURITY_BUILTIN_DOMAIN_RID = 0x20,};
enum MACRO_SEVERITY {SEVERITY_SUCCESS = 0,SEVERITY_ERROR = 1,};
enum MACRO_SE_OWNER {SE_OWNER_DEFAULTED = 0x1,SE_GROUP_DEFAULTED = 0x2,SE_DACL_PRESENT = 0x4,SE_DACL_DEFAULTED = 0x8,SE_SACL_PRESENT = 0x10,SE_SACL_DEFAULTED = 0x20,SE_DACL_AUTO_INHERIT_REQ = 0x100,SE_SACL_AUTO_INHERIT_REQ = 0x200,SE_DACL_AUTO_INHERITED = 0x400,SE_SACL_AUTO_INHERITED = 0x800,SE_DACL_PROTECTED = 0x1000,SE_SACL_PROTECTED = 0x2000,SE_SELF_RELATIVE = 0x8000,};
enum MACRO_SHELLSDK {SHELLSDK_MODULES_AYGSHELL = 1,};
enum MACRO_SHORTCUT {SHORTCUT_OVERWRITE = 0x1,};
enum MACRO_SHREGSET {SHREGSET_HKCU = 0x1,SHREGSET_FORCE_HKCU = 0x2,SHREGSET_HKLM = 0x4,SHREGSET_FORCE_HKLM = 0x8,SHREGSET_DEFAULT = 0x6,};
enum MACRO_SOFTDIST {SOFTDIST_FLAG_USAGE_EMAIL = 0x1,SOFTDIST_FLAG_USAGE_PRECACHE = 0x2,SOFTDIST_FLAG_USAGE_AUTOINSTALL = 0x4,SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 0x8,SOFTDIST_ADSTATE_NONE = 0x0,SOFTDIST_ADSTATE_AVAILABLE = 0x1,SOFTDIST_ADSTATE_DOWNLOADED = 0x2,SOFTDIST_ADSTATE_INSTALLED = 0x3,};
enum MACRO_SPC_UUID {SPC_UUID_LENGTH = 16,SPC_URL_LINK_CHOICE = 1,SPC_MONIKER_LINK_CHOICE = 2,SPC_FILE_LINK_CHOICE = 3,};
enum MACRO_SPECIFIC {SPECIFIC_RIGHTS_ALL = 0xFFFF,};
enum MACRO_SP_ERROR {SP_ERROR = -1,};
enum MACRO_SRCERASE {SRCERASE = 0x440328,};
enum MACRO_SRCPAINT {SRCPAINT = 0xEE0086,};
enum MACRO_STANDARD {STANDARD_RIGHTS_REQUIRED = 0xF0000,STANDARD_RIGHTS_READ = 0x20000,STANDARD_RIGHTS_WRITE = 0x20000,STANDARD_RIGHTS_EXECUTE = 0x20000,STANDARD_RIGHTS_ALL = 0x1F0000,};
enum MACRO_STOPBITS {STOPBITS_10 = 0x1,STOPBITS_15 = 0x2,STOPBITS_20 = 0x4,};
enum MACRO_SUBSINFO {SUBSINFO_ALLFLAGS = 0xEF7F,};
enum MACRO_SUBSNOTF {SUBSNOTF_CREATE = 0x1,SUBSNOTF_DELETE = 0x2,SUBSNOTF_SYNC_START = 0x4,SUBSNOTF_SYNC_STOP = 0x8,};
enum MACRO_SUPPRESS {SUPPRESS_UI = 0x1,};
enum MACRO_S_OBJECT {S_OBJECT_NO_LONGER_VALID = 0x2,};
enum MACRO_TEXTCAPS {TEXTCAPS = 34,};
enum MACRO_TIMECODE {TIMECODE_RATE_30DROP = 0,TIMECODE_SMPTE_BINARY_GROUP = 7,TIMECODE_SMPTE_COLOR_FRAME = 8,};
enum MACRO_TITLE_SC {TITLE_SC_MESSAGE_BOX = 0xC0001B75,};
enum MACRO_TRUETYPE {TRUETYPE_FONTTYPE = 0x4,};
enum MACRO_TRUNCATE {TRUNCATE_EXISTING = 5,};
enum MACRO_URLCACHE {URLCACHE_FIND_DEFAULT_FILTER = 3145781,};
enum MACRO_URLOSTRM {URLOSTRM_USECACHEDCOPY_ONLY = 0x1,URLOSTRM_USECACHEDCOPY = 0x2,URLOSTRM_GETNEWESTVERSION = 0x3,};
enum MACRO_VERTSIZE {VERTSIZE = 6,HORZRES = 8,};
enum MACRO_WAVECAPS {WAVECAPS_PITCH = 0x1,WAVECAPS_PLAYBACKRATE = 0x2,WAVECAPS_VOLUME = 0x4,WAVECAPS_LRVOLUME = 0x8,WAVECAPS_SYNC = 0x10,WAVECAPS_SAMPLEACCURATE = 0x20,WAVECAPS_DIRECTSOUND = 0x40,};
enum MACRO_WBREAK_E {WBREAK_E_QUERY_ONLY = 0x80041782,WBREAK_E_BUFFER_TOO_SMALL = 0x80041783,};
enum MACRO_WIN_CERT {WIN_CERT_REVISION_1_0 = 0x100,WIN_CERT_REVISION_2_0 = 0x200,WIN_CERT_TYPE_X509 = 0x1,WIN_CERT_TYPE_PKCS_SIGNED_DATA = 0x2,WIN_CERT_TYPE_RESERVED_1 = 0x3,WIN_CERT_TYPE_TS_STACK_SIGNED = 0x4,};
enum MACRO_WSA_FLAG {WSA_FLAG_OVERLAPPED = 0x1,WSA_FLAG_MULTIPOINT_C_ROOT = 0x2,WSA_FLAG_MULTIPOINT_C_LEAF = 0x4,WSA_FLAG_MULTIPOINT_D_ROOT = 0x8,WSA_FLAG_MULTIPOINT_D_LEAF = 0x10,};
enum MACRO_WS_CHILD {WS_CHILD = 0x40000000,WS_VISIBLE = 0x10000000,WS_DISABLED = 0x8000000,WS_GROUP = 0x20000,WS_TABSTOP = 0x10000,WS_EX_NOACTIVATE = 0x8000000,};
enum MACRO__FPCLASS {_FPCLASS_SNAN = 0x1,_FPCLASS_QNAN = 0x2,_FPCLASS_NINF = 0x4,_FPCLASS_NN = 0x8,_FPCLASS_ND = 0x10,_FPCLASS_NZ = 0x20,_FPCLASS_PZ = 0x40,_FPCLASS_PD = 0x80,_FPCLASS_PN = 0x100,_FPCLASS_PINF = 0x200,};
enum MACRO__INFCODE {_INFCODE = 1,_NANCODE = 2,};
enum MACRO__MAX_EXP {_MAX_EXP_DIG = 8,_MAX_INT_DIG = 32,_MAX_SIG_DIG = 36,};
enum MACRO___RPCNDR {__RPCNDR_H_VERSION__ = 450,};
enum MACRO___bt_sdp {__bt_sdp_H__ = 1,};
enum MACRO_ckidODML {ckidODML = 1819108463,};
enum MACRO_ctlFirst {ctlFirst = 0x400,};
enum MACRO_iMAXBITS {iMAXBITS = 8,};
typedef struct _MIB_IPNETTABLE MIB_IPNETTABLE;
typedef struct _MIB_ROUTESTATE MIB_ROUTESTATE;
typedef struct _MIDL_STUB_DESC MIDL_STUB_DESC;
typedef struct tagMPEG1VIDEOINFO MPEG1VIDEOINFO;
typedef struct tagMPEG2VIDEOINFO MPEG2VIDEOINFO;
enum MPMoreInfoType {mpShowURL = 0x0,mpClipURL = 0x1,mpBannerURL = 0x2,};
typedef struct _NDIS_TAPI_DIAL NDIS_TAPI_DIAL;
typedef struct _NDIS_TAPI_DROP NDIS_TAPI_DROP;
typedef struct _NDIS_TAPI_OPEN NDIS_TAPI_OPEN;
typedef struct tagNEWTEXTMETRICA NEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW NEWTEXTMETRICW;
typedef struct _8F75023966CB92194279486244E09366 NIC_STATISTICS;
typedef struct tagNMLVCUSTOMDRAW NMLVCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW NMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW NMTVCUSTOMDRAW;
typedef struct tagNNTPHEADERRESP NNTPHEADERRESP;
typedef struct tagNOTRESTRICTION NOTRESTRICTION;
typedef struct tagINPUTCONTEXT *NPINPUTCONTEXT;
typedef struct tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;
typedef struct tWAVEFORMATEX *NPWAVEFORMATEX;
typedef struct _OSVERSIONINFOA OSVERSIONINFOA;
typedef struct _OSVERSIONINFOW OSVERSIONINFOW;
typedef struct _ACTRL_ALISTA *PACTRL_ACCESSA;
typedef struct _ACTRL_ALISTW *PACTRL_ACCESSW;
typedef struct _PARSED_CFTABLE PARSED_CFTABLE;
typedef struct _avifieldindex_chunk *PAVIFIELDINDEX;
typedef struct _BTHNS_SETBLOB *PBTHNS_SETBLOB;
typedef struct _BTH_HOLD_MODE *PBTH_HOLD_MODE;
typedef struct _BTH_PARK_MODE *PBTH_PARK_MODE;
typedef struct __BUSDATA_PARMS *PBUSDATA_PARMS;
typedef struct tagCANDIDATEFORM *PCANDIDATEFORM;
typedef struct tagCANDIDATEINFO *PCANDIDATEINFO;
typedef struct tagCANDIDATELIST *PCANDIDATELIST;
typedef struct _CAT_NAMEVALUE *PCAT_NAMEVALUE;
typedef struct _CEDBASEINFOEX *PCEDBASEINFOEX;
typedef struct _CEL_BOOT_TIME *PCEL_BOOT_TIME;
typedef struct __CEL_DATA_LOSS *PCEL_DATA_LOSS;
typedef struct __CEL_EVENT_SET *PCEL_EVENT_SET;
typedef struct __CEL_HEAP_FREE *PCEL_HEAP_FREE;
typedef struct __CEL_SEM_CLOSE *PCEL_SEM_CLOSE;
typedef struct _CERT_RDN_ATTR *PCERT_RDN_ATTR;
typedef struct _CMC_DATA_INFO *PCMC_DATA_INFO;
typedef struct _CMC_PEND_INFO *PCMC_PEND_INFO;
typedef struct tagCREATESTRUCTA *PCREATESTRUCTA;
typedef struct tagCREATESTRUCTW *PCREATESTRUCTW;
typedef struct _DDKWINDOWINFO_tag *PDDKWINDOWINFO;
typedef struct _DEVICE_OBJECT *PDEVICE_OBJECT;
typedef struct _DOT11_ADAPTER *PDOT11_ADAPTER;
typedef struct _DOT11_WPA_TSC *PDOT11_WPA_TSC;
typedef void (*PDRIVER_CANCEL)(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp);
typedef struct _DRIVER_OBJECT *PDRIVER_OBJECT;
typedef void (*PDRIVER_UNLOAD)(struct _DRIVER_OBJECT *DriverObject);
typedef struct tagDRVCONFIGINFO *PDRVCONFIGINFO;
typedef struct _structDVD_TEXT_ITEM *PDVD_TEXT_ITEM;
typedef struct _PERUSERSECTION PERUSERSECTION;
typedef struct tagFONTSIGNATURE *PFONTSIGNATURE;
typedef  unsigned char *PFORMAT_STRING;
typedef struct _FW_IP_ADDRESS *PFW_IP_ADDRESS;
typedef struct _GRADIENT_RECT *PGRADIENT_RECT;
typedef struct tagHARDWAREINPUT *PHARDWAREINPUT;
typedef IActiveScript *PIActiveScript;
typedef struct _KDEVICE_QUEUE *PKDEVICE_QUEUE;
typedef struct _LINE_DEV_CAPS *PLINE_DEV_CAPS;
typedef struct _30C092ACFDACA2A085242C6994837CA9 *PMCHITTESTINFO;
typedef IMemAllocator2 *PMEMALLOCATOR2;
typedef struct _MIB_IPADDRROW *PMIB_IPADDRROW;
typedef struct _MIB_IPDESTROW *PMIB_IPDESTROW;
typedef struct _MIB_MFE_TABLE *PMIB_MFE_TABLE;
typedef IMLangFontLink *PMLANGFONTLINK;
typedef struct tagMODULEENTRY32 *PMODULEENTRY32;
typedef struct NDIS_BPC_POOL *PNDIS_BPC_POOL;
typedef struct _NDR_PIPE_DESC *PNDR_PIPE_DESC;
typedef unsigned int POINTER_64_INT;
typedef struct _FC03820C0C9B455049C143518E71A23B *POPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *POPENCARDNAMEW;
typedef IOverlayNotify *POVERLAYNOTIFY;
typedef struct _PARSED_CONFIG *PPARSED_CONFIG;
typedef struct _PCI_RSRC_LIST *PPCI_RSRC_LIST;
typedef struct _POST_INIT_BUF *PPOST_INIT_BUF;
typedef struct _PPP_EAP_INPUT *PPPP_EAP_INPUT;
typedef struct _PPP_EAP_OUTPUT PPP_EAP_OUTPUT;
typedef struct _PPP_EAP_PACKET PPP_EAP_PACKET;
typedef struct _PRIVILEGE_SET *PPRIVILEGE_SET;
typedef struct tagREGISTERWORDA *PREGISTERWORDA;
typedef struct tagREGISTERWORDW *PREGISTERWORDW;
typedef struct _RGNDATAHEADER *PRGNDATAHEADER;
typedef struct tagPROCESSENTRY32 PROCESSENTRY32;
typedef struct _PROPSHEETPAGEA PROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW PROPSHEETPAGEW;
typedef struct _SCARD_ATRMASK *PSCARD_ATRMASK;
typedef struct _SCHANNEL_CRED *PSCHANNEL_CRED;
typedef struct tagSHINITDLGINFO *PSHINITDLGINFO;
typedef struct tagSHMENUBARINFO *PSHMENUBARINFO;
typedef struct _SOCKADDR_IRDA *PSOCKADDR_IRDA;
typedef struct _SORTORDERSPEC *PSORTORDERSPEC;
typedef struct _PST_ACCESSRULE PST_ACCESSRULE;
typedef struct _PST_PROMPTINFO PST_PROMPTINFO;
typedef struct _SecBufferDesc *PSecBufferDesc;
typedef struct tagTHREADENTRY32 *PTHREADENTRY32;
typedef struct _TOKEN_CONTROL *PTOKEN_CONTROL;
typedef struct _PUBLICKEYSTRUC PUBLICKEYSTRUC;
typedef struct _USB_INTERFACE *PUSB_INTERFACE;
typedef struct _WCE_IAS_QUERY *PWCE_IAS_QUERY;
typedef struct _WINTRUST_DATA *PWINTRUST_DATA;
typedef struct _WSACOMPLETION *PWSACOMPLETION;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D QOS_OBJECT_HDR;
typedef struct tagREBARBANDINFOA REBARBANDINFOA;
typedef struct tagREBARBANDINFOW REBARBANDINFOW;
typedef struct _RTL_BITMAP_RUN RTL_BITMAP_RUN;
struct RequestStrList;
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef struct _wireSAFEARRAY_UNION SAFEARRAYUNION;
struct SAXXMLReader30;
typedef struct _SCONTEXT_QUEUE SCONTEXT_QUEUE;
typedef struct tagSCRIPFONTINFO SCRIPTFONTINFO;
typedef struct _SCurrencyArray SCurrencyArray;
typedef struct _SDateTimeArray SDateTimeArray;
typedef int ( *SERVER_ROUTINE)();
enum SF_STATUS_TYPE {SF_STATUS_REQ_FINISHED = 0x8000000,SF_STATUS_REQ_FINISHED_KEEP_CONN = 0x8000001,SF_STATUS_REQ_NEXT_NOTIFICATION = 0x8000002,SF_STATUS_REQ_HANDLED_NOTIFICATION = 0x8000003,SF_STATUS_REQ_ERROR = 0x8000004,SF_STATUS_REQ_READ_NEXT = 0x8000005,};
typedef struct _B39C686D84F1EA3E9B3743A81E5F4B95 SHACTIVATEINFO;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 SHELLFLAGSTATE;
typedef struct _SOCKET_ADDRESS SOCKET_ADDRESS;
typedef struct _SOrRestriction SOrRestriction;
typedef struct tagSTATPROPSETSTG STATPROPSETSTG;
typedef struct _SV2CVW2_PARAMS SV2CVW2_PARAMS;
struct ShellNameSpace;
struct SoapSerializer;
enum StateConstants {amvNotLoaded = 0xFFFFFFFF,amvStopped = 0x0,amvPaused = 0x1,amvRunning = 0x2,};
typedef struct _TT_HITTESTINFOA TTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW TTHITTESTINFOW;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef struct _UNICODE_STRING UNICODE_STRING;
enum VoIPCallStatus {e_vcsInvalid = 0x0,e_vcsIdle = 0x0,e_vcsIncoming = 0x1,e_vcsAnswering = 0x2,e_vcsInProgress = 0x3,e_vcsConnected = 0x4,e_vcsDisconnected = 0x5,e_vcsHolding = 0x6,e_vcsReferring = 0x7,};
typedef struct _WABIMPORTPARAM WABIMPORTPARAM;
typedef struct _tagWAPGATEWAYINFO WAPGATEWAYINFO;
typedef struct _WCE_DEVICELIST WCE_DEVICELIST;
typedef struct tagWEBPAGEOPTIONS WEBPAGEOPTIONS;
typedef struct _WL_ASSOCIATION WL_ASSOCIATION;
typedef struct _WSPUPCALLTABLE WSPUPCALLTABLE;
typedef struct tagX509CERTRESULT X509CERTRESULT;
struct XMLHTTPRequest;
struct XMLSchemaCache;
typedef struct _ZONEATTRIBUTES ZONEATTRIBUTES;
struct _BTH_HOLD_MODE {unsigned short hold_mode_max;unsigned short hold_mode_min;unsigned short interval;};
struct _BTH_PARK_MODE {unsigned short beacon_max;unsigned short beacon_min;unsigned short interval;};
enum _BUS_DATA_TYPE {ConfigurationSpaceUndefined = 0xFFFFFFFF,Cmos = 0x0,EisaConfiguration = 0x1,Pos = 0x2,CbusConfiguration = 0x3,PCIConfiguration = 0x4,VMEConfiguration = 0x5,NuBusConfiguration = 0x6,PCMCIAConfiguration = 0x7,MPIConfiguration = 0x8,MPSAConfiguration = 0x9,PNPISAConfiguration = 0xA,MaximumBusDataType = 0xB,};
enum _CARET_GRAVITY {CARET_GRAVITY_NoChange = 0x0,CARET_GRAVITY_BeginningOfLine = 0x1,CARET_GRAVITY_EndOfLine = 0x2,CARET_GRAVITY_Max = 0x7FFFFFFF,};
struct _D3DCOLORVALUE {float r;float g;float b;float a;};
enum _D3DSWAPEFFECT {D3DSWAPEFFECT_DISCARD = 0x1,D3DSWAPEFFECT_FLIP = 0x2,D3DSWAPEFFECT_COPY = 0x3,D3DSWAPEFFECT_COPY_VSYNC = 0x4,D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,};
enum _DISPLAY_BREAK {DISPLAY_BREAK_None = 0x0,DISPLAY_BREAK_Block = 0x1,DISPLAY_BREAK_Break = 0x2,DISPLAY_BREAK_Max = 0x7FFFFFFF,};
typedef struct _271E49C86C8EFA0B647D87A58CF03284 _FPIEEE_RECORD;
enum _FW_DIRECTIONS {FWD_INBOUND = 0x8,FWD_OUTBOUND = 0x10,};
enum _FW_RULE_FLAGS {FWF_BLOCK = 0x1,FWF_ALLOW = 0x2,FWF_LOG = 0x4,FWF_INBOUND = 0x8,FWF_OUTBOUND = 0x10,FWF_DISABLED = 0x20,};
enum _FW_RULE_MASKS {FWM_PRIVATE_HOST = 0x1,FWM_PUBLIC_HOST = 0x2,FWM_PORT = 0x4,FWM_TYPE = 0x8,FWM_CODE = 0x10,FWM_PROTOCOL = 0x20,FWM_ACTION = 0x40,FWM_TIME_OF_DAY = 0x80,FWM_DAY_OF_WEEK = 0x100,FWM_DAY = 0x200,FWM_MONTH = 0x400,FWM_PUBLIC_HOST_MASK = 0x800,FWM_PUBLIC_HOST_PREFIX = 0x1000,};
enum _HTMLDlgBorder {HTMLDlgBorderThin = 0x0,HTMLDlgBorderThick = 0x40000,HTMLDlgBorder_Max = 0x7FFFFFFF,};
enum _HTMLDlgCenter {HTMLDlgCenterNo = 0x0,HTMLDlgCenterOff = 0x0,HTMLDlgCenter0 = 0x0,HTMLDlgCenterYes = 0x1,HTMLDlgCenterOn = 0x1,HTMLDlgCenter1 = 0x1,HTMLDlgCenterParent = 0x1,HTMLDlgCenterDesktop = 0x2,HTMLDlgCenter_Max = 0x7FFFFFFF,};
struct _LONG_SIZEDARR {unsigned int clSize;unsigned int *pData;};
enum _MP_CURVE_TYPE {MP_CURVE_JUMP = 0x1,MP_CURVE_LINEAR = 0x2,MP_CURVE_SQUARE = 0x4,MP_CURVE_INVSQUARE = 0x8,MP_CURVE_SINE = 0x10,};
enum _htmlAdjacency {htmlAdjacencyBeforeBegin = 0x1,htmlAdjacencyAfterBegin = 0x2,htmlAdjacencyBeforeEnd = 0x3,htmlAdjacencyAfterEnd = 0x4,htmlAdjacency_Max = 0x7FFFFFFF,};
enum _htmlCellAlign {htmlCellAlignNotSet = 0x0,htmlCellAlignLeft = 0x1,htmlCellAlignCenter = 0x2,htmlCellAlignRight = 0x3,htmlCellAlignMiddle = 0x2,htmlCellAlign_Max = 0x7FFFFFFF,};
enum _htmlComponent {htmlComponentClient = 0x0,htmlComponentSbLeft = 0x1,htmlComponentSbPageLeft = 0x2,htmlComponentSbHThumb = 0x3,htmlComponentSbPageRight = 0x4,htmlComponentSbRight = 0x5,htmlComponentSbUp = 0x6,htmlComponentSbPageUp = 0x7,htmlComponentSbVThumb = 0x8,htmlComponentSbPageDown = 0x9,htmlComponentSbDown = 0xA,htmlComponentSbLeft2 = 0xB,htmlComponentSbPageLeft2 = 0xC,htmlComponentSbRight2 = 0xD,htmlComponentSbPageRight2 = 0xE,htmlComponentSbUp2 = 0xF,htmlComponentSbPageUp2 = 0x10,htmlComponentSbDown2 = 0x11,htmlComponentSbPageDown2 = 0x12,htmlComponentSbTop = 0x13,htmlComponentSbBottom = 0x14,htmlComponentOutside = 0x15,htmlComponentGHTopLeft = 0x16,htmlComponentGHLeft = 0x17,htmlComponentGHTop = 0x18,htmlComponentGHBottomLeft = 0x19,htmlComponentGHTopRight = 0x1A,htmlComponentGHBottom = 0x1B,htmlComponentGHRight = 0x1C,htmlComponentGHBottomRight = 0x1D,htmlComponent_Max = 0x7FFFFFFF,};
enum _htmlDirection {htmlDirectionForward = 0x1869F,htmlDirectionBackward = 0xFFFE7961,htmlDirection_Max = 0x7FFFFFFF,};
enum _htmlEndPoints {htmlEndPointsStartToStart = 0x1,htmlEndPointsStartToEnd = 0x2,htmlEndPointsEndToStart = 0x3,htmlEndPointsEndToEnd = 0x4,htmlEndPoints_Max = 0x7FFFFFFF,};
enum _htmlGlyphMode {htmlGlyphModeNone = 0x0,htmlGlyphModeBegin = 0x1,htmlGlyphModeEnd = 0x2,htmlGlyphModeBoth = 0x3,htmlGlyphMode_Max = 0x7FFFFFFF,};
enum _htmlSelection {htmlSelectionNone = 0x0,htmlSelectionText = 0x1,htmlSelectionControl = 0x2,htmlSelectionTable = 0x3,htmlSelection_Max = 0x7FFFFFFF,};
enum _styleFontSize {styleFontSizeXXSmall = 0x0,styleFontSizeXSmall = 0x1,styleFontSizeSmall = 0x2,styleFontSizeMedium = 0x3,styleFontSizeLarge = 0x4,styleFontSizeXLarge = 0x5,styleFontSizeXXLarge = 0x6,styleFontSizeSmaller = 0x7,styleFontSizeLarger = 0x8,styleFontSize_Max = 0x7FFFFFFF,};
enum _styleOverflow {styleOverflowNotSet = 0x0,styleOverflowAuto = 0x1,styleOverflowHidden = 0x2,styleOverflowVisible = 0x3,styleOverflowScroll = 0x4,styleOverflow_Max = 0x7FFFFFFF,};
enum _stylePosition {stylePositionNotSet = 0x0,stylePositionstatic = 0x1,stylePositionrelative = 0x2,stylePositionabsolute = 0x3,stylePositionfixed = 0x4,stylePosition_Max = 0x7FFFFFFF,};
enum _styleWordWrap {styleWordWrapNotSet = 0x0,styleWordWrapOff = 0x1,styleWordWrapOn = 0x2,styleWordWrap_Max = 0x7FFFFFFF,};
enum _tagENUM_FLAGS {EF_NOT_NOTIFICATION = 0x1,EF_NOT_SCHEDULEGROUPITEM = 0x2,EF_NOTIFICATION_INPROGRESS = 0x4,EF_NOTIFICATION_THROTTLED = 0x8,EF_NOTIFICATION_SUSPENDED = 0x10,};
struct _userSTGMEDIUM {IUnknown *pUnkForRelease;};
typedef unsigned int error_status_t;
enum tagBIND_FLAGS1 {NCN_ADD = 0x1,NCN_REMOVE = 0x2,NCN_UPDATE = 0x4,NCN_ENABLE = 0x10,NCN_DISABLE = 0x20,NCN_BINDING_PATH = 0x100,NCN_PROPERTYCHANGE = 0x200,NCN_NET = 0x10000,NCN_NETTRANS = 0x20000,NCN_NETCLIENT = 0x40000,NCN_NETSERVICE = 0x80000,};
enum tagCHARSETTYPE {CHARSET_BODY = 0x0,CHARSET_HEADER = 0x1,CHARSET_WEB = 0x2,};
enum tagDOMNodeType {NODE_INVALID = 0x0,NODE_ELEMENT = 0x1,NODE_ATTRIBUTE = 0x2,NODE_TEXT = 0x3,NODE_CDATA_SECTION = 0x4,NODE_ENTITY_REFERENCE = 0x5,NODE_ENTITY = 0x6,NODE_PROCESSING_INSTRUCTION = 0x7,NODE_COMMENT = 0x8,NODE_DOCUMENT = 0x9,NODE_DOCUMENT_TYPE = 0xA,NODE_DOCUMENT_FRAGMENT = 0xB,NODE_NOTATION = 0xC,};
enum tagDVD_MENU_ID {DVD_MENU_Title = 0x2,DVD_MENU_Root = 0x3,DVD_MENU_Subpicture = 0x4,DVD_MENU_Audio = 0x5,DVD_MENU_Angle = 0x6,DVD_MENU_Chapter = 0x7,};
struct tagIMWINDOWPOS {int x;int y;int cx;int cy;};
enum tagMLCONVCHARF {MLCONVCHARF_AUTODETECT = 0x1,MLCONVCHARF_ENTITIZE = 0x2,MLCONVCHARF_NCR_ENTITIZE = 0x2,MLCONVCHARF_NAME_ENTITIZE = 0x4,MLCONVCHARF_USEDEFCHAR = 0x8,MLCONVCHARF_NOBESTFITCHARS = 0x10,};
enum tagMLSTR_FLAGS {MLSTR_READ = 0x1,MLSTR_WRITE = 0x2,};
enum tagMSGCALLTYPE {IBSCLEVEL_TOPLEVEL = 0x1,IBSCLEVEL_NESTED = 0x2,};
enum tagNETCON_TYPE {NCT_DIRECT_CONNECT = 0x0,NCT_INBOUND = 0x1,NCT_INTERNET = 0x2,NCT_LAN = 0x3,NCT_PHONE = 0x4,NCT_TUNNEL = 0x5,};
enum tagOLELINKBIND {OLELINKBIND_EVENIFCLASSDIFF = 0x1,};
enum tagPENDINGTYPE {PENDINGTYPE_TOPLEVEL = 0x1,PENDINGTYPE_NESTED = 0x2,};
enum tagPOP3CMDTYPE {POP3CMD_GET_POPID = 0x0,POP3CMD_GET_MARKED = 0x1,POP3CMD_GET_ALL = 0x2,};
enum tagPOP3COMMAND {POP3_NONE = 0x0,POP3_BANNER = 0x1,POP3_CONNECTED = 0x2,POP3_USER = 0x3,POP3_PASS = 0x4,POP3_AUTH = 0x5,POP3_UIDL = 0x6,POP3_STAT = 0x7,POP3_LIST = 0x8,POP3_DELE = 0x9,POP3_RETR = 0xA,POP3_TOP = 0xB,POP3_NOOP = 0xC,POP3_QUIT = 0xD,POP3_RSET = 0xE,POP3_CUSTOM = 0xF,};
enum tagRASCONNTYPE {RAS_CONNECT_LAN = 0x0,RAS_CONNECT_MANUAL = 0x1,RAS_CONNECT_RAS = 0x2,};
enum tagSCRIPTCONTF {sidDefault = 0x0,sidMerge = 0x1,sidAsciiSym = 0x2,sidAsciiLatin = 0x3,sidLatin = 0x4,sidGreek = 0x5,sidCyrillic = 0x6,sidArmenian = 0x7,sidHebrew = 0x8,sidArabic = 0x9,sidDevanagari = 0xA,sidBengali = 0xB,sidGurmukhi = 0xC,sidGujarati = 0xD,sidOriya = 0xE,sidTamil = 0xF,sidTelugu = 0x10,sidKannada = 0x11,sidMalayalam = 0x12,sidThai = 0x13,sidLao = 0x14,sidTibetan = 0x15,sidGeorgian = 0x16,sidHangul = 0x17,sidKana = 0x18,sidBopomofo = 0x19,sidHan = 0x1A,sidEthiopic = 0x1B,sidCanSyllabic = 0x1C,sidCherokee = 0x1D,sidYi = 0x1E,sidBraille = 0x1F,sidRunic = 0x20,sidOgham = 0x21,sidSinhala = 0x22,sidSyriac = 0x23,sidBurmese = 0x24,sidKhmer = 0x25,sidThaana = 0x26,sidMongolian = 0x27,sidUserDefined = 0x28,sidLim = 0x29,sidFEFirst = 0x17,sidFELast = 0x1A,};
enum tagSCRIPTSTATE {SCRIPTSTATE_UNINITIALIZED = 0x0,SCRIPTSTATE_INITIALIZED = 0x5,SCRIPTSTATE_STARTED = 0x1,SCRIPTSTATE_CONNECTED = 0x2,SCRIPTSTATE_DISCONNECTED = 0x3,SCRIPTSTATE_CLOSED = 0x4,};
enum tagSMTPCOMMAND {SMTP_NONE = 0x0,SMTP_BANNER = 0x1,SMTP_CONNECTED = 0x2,SMTP_SEND_MESSAGE = 0x3,SMTP_AUTH = 0x4,SMTP_EHLO = 0x5,SMTP_HELO = 0x6,SMTP_MAIL = 0x7,SMTP_RCPT = 0x8,SMTP_RSET = 0x9,SMTP_QUIT = 0xA,SMTP_DATA = 0xB,SMTP_DOT = 0xC,SMTP_SEND_STREAM = 0xD,SMTP_CUSTOM = 0xE,};
enum tagSTREAM_SEEK {STREAM_SEEK_SET = 0x0,STREAM_SEEK_CUR = 0x1,STREAM_SEEK_END = 0x2,};
enum tagSTRRET_TYPE {STRRET_WSTR = 0x0,STRRET_OFFSET = 0x1,STRRET_CSTR = 0x2,};
enum tagURLTEMPLATE {URLTEMPLATE_CUSTOM = 0x0,URLTEMPLATE_PREDEFINED_MIN = 0x10000,URLTEMPLATE_LOW = 0x10000,URLTEMPLATE_MEDLOW = 0x10500,URLTEMPLATE_MEDIUM = 0x11000,URLTEMPLATE_HIGH = 0x12000,URLTEMPLATE_PREDEFINED_MAX = 0x20000,};
enum tagXFORMCOORDS {XFORMCOORDS_POSITION = 0x1,XFORMCOORDS_SIZE = 0x2,XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,};
typedef struct _userCLIPFORMAT userCLIPFORMAT;
typedef struct _ACTRL_ALISTA ACTRL_ACCESSA;
typedef struct _ACTRL_ALISTW ACTRL_ACCESSW;
typedef struct _AMMediaType AM_MEDIA_TYPE;
enum AM_MPEG2Level {AM_MPEG2Level_Low = 0x1,AM_MPEG2Level_Main = 0x2,AM_MPEG2Level_High1440 = 0x3,AM_MPEG2Level_High = 0x4,};
typedef struct _avifieldindex_chunk AVIFIELDINDEX;
typedef struct _90E769FB438B6A83B49CA07EC4EB3EFA AVIINDEXENTRY;
typedef struct _avimainheader AVIMAINHEADER;
typedef struct _avisuperindex AVISUPERINDEX;
typedef struct _avitimedindex AVITIMEDINDEX;
typedef struct _BTHNS_SETBLOB BTHNS_SETBLOB;
typedef struct _BTH_HOLD_MODE BTH_HOLD_MODE;
typedef struct _BTH_PARK_MODE BTH_PARK_MODE;
typedef struct __BUSDATA_PARMS BUSDATA_PARMS;
typedef struct _BYTE_SIZEDARR BYTE_SIZEDARR;
typedef struct _BthDeviceInfo BthDeviceInfo;
typedef struct tagCANDIDATEFORM CANDIDATEFORM;
typedef struct tagCANDIDATEINFO CANDIDATEINFO;
typedef struct tagCANDIDATELIST CANDIDATELIST;
typedef struct tagCAPROPVARIANT CAPROPVARIANT;
typedef struct _CAT_NAMEVALUE CAT_NAMEVALUE;
typedef struct _CEDBASEINFOEX CEDBASEINFOEX;
typedef struct _CEL_BOOT_TIME CEL_BOOT_TIME;
typedef struct __CEL_DATA_LOSS CEL_DATA_LOSS;
typedef struct __CEL_EVENT_SET CEL_EVENT_SET;
typedef struct __CEL_HEAP_FREE CEL_HEAP_FREE;
typedef struct __CEL_SEM_CLOSE CEL_SEM_CLOSE;
typedef struct _CERT_RDN_ATTR CERT_RDN_ATTR;
struct CHeaderFooter;
typedef struct _CMC_DATA_INFO CMC_DATA_INFO;
typedef struct _CMC_PEND_INFO CMC_PEND_INFO;
typedef struct tagCREATESTRUCTA CREATESTRUCTA;
typedef struct tagCREATESTRUCTW CREATESTRUCTW;
typedef struct CRYPTCATSTORE_ CRYPTCATSTORE;
typedef struct __MIDL___MIDL_itf_dvdcom_0000_0002 CSS_CHALLENGE;
struct CoSniffStream;
typedef struct _D3DCOLORVALUE D3DCOLORVALUE;
typedef struct _D3DLOCKED_BOX D3DLOCKED_BOX;
typedef struct tagDBCOMMANDTREE DBCOMMANDTREE;
enum DBCOMPAREENUM {DBCOMPARE_LT = 0x0,DBCOMPARE_EQ = 0x1,DBCOMPARE_GT = 0x2,DBCOMPARE_NE = 0x3,DBCOMPARE_NOTCOMPARABLE = 0x4,};
typedef struct tagDBFAILUREINFO DBFAILUREINFO;
enum DBLITERALENUM {DBLITERAL_INVALID = 0x0,DBLITERAL_BINARY_LITERAL = 0x1,DBLITERAL_CATALOG_NAME = 0x2,DBLITERAL_CATALOG_SEPARATOR = 0x3,DBLITERAL_CHAR_LITERAL = 0x4,DBLITERAL_COLUMN_ALIAS = 0x5,DBLITERAL_COLUMN_NAME = 0x6,DBLITERAL_CORRELATION_NAME = 0x7,DBLITERAL_CURSOR_NAME = 0x8,DBLITERAL_ESCAPE_PERCENT = 0x9,DBLITERAL_ESCAPE_UNDERSCORE = 0xA,DBLITERAL_INDEX_NAME = 0xB,DBLITERAL_LIKE_PERCENT = 0xC,DBLITERAL_LIKE_UNDERSCORE = 0xD,DBLITERAL_PROCEDURE_NAME = 0xE,DBLITERAL_QUOTE = 0xF,DBLITERAL_SCHEMA_NAME = 0x10,DBLITERAL_TABLE_NAME = 0x11,DBLITERAL_TEXT_COMMAND = 0x12,DBLITERAL_USER_NAME = 0x13,DBLITERAL_VIEW_NAME = 0x14,};
typedef struct tagDBLITERALINFO DBLITERALINFO;
enum DBPARAMIOENUM {DBPARAMIO_NOTPARAM = 0x0,DBPARAMIO_INPUT = 0x1,DBPARAMIO_OUTPUT = 0x2,};
typedef struct tagDBPROPINFOSET DBPROPINFOSET;
enum DBRANGEENUM20 {DBRANGE_MATCH_N_SHIFT = 0x18,DBRANGE_MATCH_N_MASK = 0xFF,};
typedef struct tagDB_VARNUMERIC DB_VARNUMERIC;
typedef struct _DDKWINDOWINFO_tag DDKWINDOWINFO;
typedef struct _DDPIXELFORMAT DDPIXELFORMAT;
typedef struct _DDSURFACEDESC DDSURFACEDESC;
typedef struct _DEVICE_OBJECT DEVICE_OBJECT;
typedef struct _PUBKEYVER3 DHPUBKEY_VER3;
struct DMsgrOEEvents {struct DMsgrOEEventsVtbl *lpVtbl;};
typedef struct _DOCHOSTUIINFO DOCHOSTUIINFO;
struct DOMDocument26;
struct DOMDocument30;
typedef struct _DOT11_ADAPTER DOT11_ADAPTER;
typedef struct _DOT11_WPA_TSC DOT11_WPA_TSC;
typedef struct _DRIVER_OBJECT DRIVER_OBJECT;
typedef struct tagDRVCONFIGINFO DRVCONFIGINFO;
typedef struct _DSCBUFFERDESC DSCBUFFERDESC;
typedef struct _E7DEFB284EA8021B90974CE0B87C7D17 DSQUERYPARAMS;
typedef struct _DTBLMVLISTBOX DTBLMVLISTBOX;
typedef struct tagDVD_MUA_Coeff DVD_MUA_Coeff;
typedef struct _structDVD_TEXT_ITEM DVD_TEXT_ITEM;
enum DXLOGFONTENUM {DXLF_HEIGHT = 0x1,DXLF_WIDTH = 0x2,DXLF_ESC = 0x4,DXLF_ORIENTATION = 0x8,DXLF_WEIGHT = 0x10,DXLF_ITALIC = 0x20,DXLF_UNDERLINE = 0x40,DXLF_STRIKEOUT = 0x80,DXLF_CHARSET = 0x100,DXLF_OUTPREC = 0x200,DXLF_CLIPPREC = 0x400,DXLF_QUALITY = 0x800,DXLF_PITCHANDFAM = 0x1000,DXLF_FACENAME = 0x2000,DXLF_ALL = 0x3FFF,};
enum DXTFILTERCAPS {DXTFILTERCAPS_IDXSURFACE = 0x1,DXTFILTERCAPS_IDXEFFECT = 0x2,DXTFILTERCAPS_INPUT1REQ = 0x4,DXTFILTERCAPS_INPUT2REQ = 0x8,DXTFILTERCAPS_INPUT1OPT = 0x10,DXTFILTERCAPS_INPUT2OPT = 0x20,DXTFILTERCAPS_PRIV_MATRIX = 0x40,DXTFILTERCAPS_MAX = 0x80,};
struct DXTaskManager;
struct DirectControl;
struct DispCEventObj {struct DispCEventObjVtbl *lpVtbl;};
struct DispHTMLEmbed {struct DispHTMLEmbedVtbl *lpVtbl;};
struct DispHTMLPopup {struct DispHTMLPopupVtbl *lpVtbl;};
struct DispHTMLStyle {struct DispHTMLStyleVtbl *lpVtbl;};
struct DispHTMLTable {struct DispHTMLTableVtbl *lpVtbl;};
typedef struct tagENUMHEADERROW ENUMHEADERROW;
struct EnumWSDLPorts;
typedef struct _70BF96555A8221A8BC520C987124981D FLATENTRYLIST;
typedef struct _862005EC9EDD7026C51E0C19A67AAE6E FLATMTSIDLIST;
typedef struct tagFONTSIGNATURE FONTSIGNATURE;
typedef struct _FW_IP_ADDRESS FW_IP_ADDRESS;
typedef struct _GDI_NONREMOTE GDI_NONREMOTE;
typedef struct _GRADIENT_RECT GRADIENT_RECT;
typedef struct tagHARDWAREINPUT HARDWAREINPUT;
struct HCOLORSPACE__ {int unused;};
typedef struct _HD_HITTESTINFO HDHITTESTINFO;
typedef struct tagHEADERROWINFO HEADERROWINFO;
typedef void *HMETAFILEPICT;
struct HTMLBRElement;
struct HTMLDDElement;
struct HTMLDTElement;
struct HTMLFrameBase;
struct HTMLHRElement;
struct HTMLImgEvents {struct HTMLImgEventsVtbl *lpVtbl;};
struct HTMLLIElement;
struct HTMLMapEvents {struct HTMLMapEventsVtbl *lpVtbl;};
struct HTMLNamespace;
struct HTMLNavigator;
struct HTMLRuleStyle;
struct HTMLTableCell;
typedef struct tagHTTPCONTACTID HTTPCONTACTID;
typedef struct _tagHTTPPROXYINFO HTTPPROXYINFO;
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct HttpConnector;
struct IAMCollection {struct IAMCollectionVtbl *lpVtbl;};
struct IActiveIMMApp {struct IActiveIMMAppVtbl *lpVtbl;};
struct IActiveIMMIME {struct IActiveIMMIMEVtbl *lpVtbl;};
struct IActiveMovie2 {struct IActiveMovie2Vtbl *lpVtbl;};
struct IActiveMovie3 {struct IActiveMovie3Vtbl *lpVtbl;};
struct IActiveScript {struct IActiveScriptVtbl *lpVtbl;};
struct IAdviseSinkEx {struct IAdviseSinkExVtbl *lpVtbl;};
struct IAppPublisher {struct IAppPublisherVtbl *lpVtbl;};
struct IAuditControl {struct IAuditControlVtbl *lpVtbl;};
struct IAuthenticate {struct IAuthenticateVtbl *lpVtbl;};
struct IAutoComplete {struct IAutoCompleteVtbl *lpVtbl;};
struct IBindProtocol {struct IBindProtocolVtbl *lpVtbl;};
struct IBindResource {struct IBindResourceVtbl *lpVtbl;};
struct IBlockFormats {struct IBlockFormatsVtbl *lpVtbl;};
struct ICifComponent {struct ICifComponentVtbl *lpVtbl;};
struct IClassFactory {struct IClassFactoryVtbl *lpVtbl;};
struct IColumnMapper {struct IColumnMapperVtbl *lpVtbl;};
struct IColumnsInfo2 {struct IColumnsInfo2Vtbl *lpVtbl;};
struct ICommonQueryA {struct ICommonQueryAVtbl *lpVtbl;};
struct ICommonQueryW {struct ICommonQueryWVtbl *lpVtbl;};
struct IConfigAviMux {struct IConfigAviMuxVtbl *lpVtbl;};
struct IContextMenu2 {struct IContextMenu2Vtbl *lpVtbl;};
struct IContextMenu3 {struct IContextMenu3Vtbl *lpVtbl;};
struct IDBInitialize {struct IDBInitializeVtbl *lpVtbl;};
struct IDBProperties {struct IDBPropertiesVtbl *lpVtbl;};
struct IDXBaseObject {struct IDXBaseObjectVtbl *lpVtbl;};
struct IDXRasterizer {struct IDXRasterizerVtbl *lpVtbl;};
struct IDXRawSurface {struct IDXRawSurfaceVtbl *lpVtbl;};
struct IDialBranding {struct IDialBrandingVtbl *lpVtbl;};
struct IDifferencing {struct IDifferencingVtbl *lpVtbl;};
struct IDithererImpl {struct IDithererImplVtbl *lpVtbl;};
struct IDownloadSite {struct IDownloadSiteVtbl *lpVtbl;};
struct IEnumACString {struct IEnumACStringVtbl *lpVtbl;};
struct IEnumCifModes {struct IEnumCifModesVtbl *lpVtbl;};
struct IEnumCodePage {struct IEnumCodePageVtbl *lpVtbl;};
struct IEnumJavaFile {struct IEnumJavaFileVtbl *lpVtbl;};
struct IEnumSTATDATA {struct IEnumSTATDATAVtbl *lpVtbl;};
struct IErrorRecords {struct IErrorRecordsVtbl *lpVtbl;};
struct IExtractIconA {struct IExtractIconAVtbl *lpVtbl;};
struct IExtractIconW {struct IExtractIconWVtbl *lpVtbl;};
struct IExtractImage {struct IExtractImageVtbl *lpVtbl;};
struct IFilterGraph2 {struct IFilterGraph2Vtbl *lpVtbl;};
struct IFilterMapper {struct IFilterMapperVtbl *lpVtbl;};
struct IFilterStatus {struct IFilterStatusVtbl *lpVtbl;};
struct IFolderViewOC {struct IFolderViewOCVtbl *lpVtbl;};
struct IGetSourceRow {struct IGetSourceRowVtbl *lpVtbl;};
struct IGraphBuilder {struct IGraphBuilderVtbl *lpVtbl;};
struct IGraphVersion {struct IGraphVersionVtbl *lpVtbl;};
struct IHTMLDOMNode2 {struct IHTMLDOMNode2Vtbl *lpVtbl;};
struct IHTMLDocument {struct IHTMLDocumentVtbl *lpVtbl;};
struct IHTMLEditHost {struct IHTMLEditHostVtbl *lpVtbl;};
struct IHTMLElement2 {struct IHTMLElement2Vtbl *lpVtbl;};
struct IHTMLElement3 {struct IHTMLElement3Vtbl *lpVtbl;};
struct IHTMLElement4 {struct IHTMLElement4Vtbl *lpVtbl;};
struct IHTMLEventObj {struct IHTMLEventObjVtbl *lpVtbl;};
struct IHTMLLocation {struct IHTMLLocationVtbl *lpVtbl;};
struct IHTMLSpanFlow {struct IHTMLSpanFlowVtbl *lpVtbl;};
struct IHTMLTableCol {struct IHTMLTableColVtbl *lpVtbl;};
struct IHTMLTableRow {struct IHTMLTableRowVtbl *lpVtbl;};
struct IHTMLTxtRange {struct IHTMLTxtRangeVtbl *lpVtbl;};
struct IHeaderFooter {struct IHeaderFooterVtbl *lpVtbl;};
struct IHttpSecurity {struct IHttpSecurityVtbl *lpVtbl;};
struct IIMAPCallback {struct IIMAPCallbackVtbl *lpVtbl;};
struct IIMCallbackEx {struct IIMCallbackExVtbl *lpVtbl;};
struct IInputMethod2 {struct IInputMethod2Vtbl *lpVtbl;};
struct IInstalledApp {struct IInstalledAppVtbl *lpVtbl;};
struct IIntelliForms {struct IIntelliFormsVtbl *lpVtbl;};
struct IMAPIProgress {struct IMAPIProgressVtbl *lpVtbl;};
typedef struct tagIMAP_RESPONSE IMAP_RESPONSE;
struct IMXAttributes {struct IMXAttributesVtbl *lpVtbl;};
struct IMediaControl {struct IMediaControlVtbl *lpVtbl;};
struct IMediaEventEx {struct IMediaEventExVtbl *lpVtbl;};
struct IMediaPlayer2 {struct IMediaPlayer2Vtbl *lpVtbl;};
struct IMediaSample2 {struct IMediaSample2Vtbl *lpVtbl;};
struct IMediaSeeking {struct IMediaSeekingVtbl *lpVtbl;};
struct IMemAllocator {struct IMemAllocatorVtbl *lpVtbl;};
struct IMessengerApp {struct IMessengerAppVtbl *lpVtbl;};
struct IMimeSecurity {struct IMimeSecurityVtbl *lpVtbl;};
struct IMsgrServices {struct IMsgrServicesVtbl *lpVtbl;};
struct INNTPCallback {struct INNTPCallbackVtbl *lpVtbl;};
typedef struct tagINTERFACEDATA INTERFACEDATA;
typedef struct tagINTERFACEINFO INTERFACEINFO;
struct INotification {struct INotificationVtbl *lpVtbl;};
struct IObjectSafety {struct IObjectSafetyVtbl *lpVtbl;};
struct IOleContainer {struct IOleContainerVtbl *lpVtbl;};
struct IPOP3Callback {struct IPOP3CallbackVtbl *lpVtbl;};
struct IParentRowset {struct IParentRowsetVtbl *lpVtbl;};
struct IParserVerify {struct IParserVerifyVtbl *lpVtbl;};
struct IPropertyBag2 {struct IPropertyBag2Vtbl *lpVtbl;};
struct IPropertyPage {struct IPropertyPageVtbl *lpVtbl;};
struct IPublishedApp {struct IPublishedAppVtbl *lpVtbl;};
struct IQueueCommand {struct IQueueCommandVtbl *lpVtbl;};
struct IRASTransport {struct IRASTransportVtbl *lpVtbl;};
struct IRTCInfoEvent {struct IRTCInfoEventVtbl *lpVtbl;};
struct IRecalcEngine {struct IRecalcEngineVtbl *lpVtbl;};
struct IRowsetAsynch {struct IRowsetAsynchVtbl *lpVtbl;};
struct IRowsetChange {struct IRowsetChangeVtbl *lpVtbl;};
struct IRowsetLocate {struct IRowsetLocateVtbl *lpVtbl;};
struct IRowsetNotify {struct IRowsetNotifyVtbl *lpVtbl;};
struct IRowsetScroll {struct IRowsetScrollVtbl *lpVtbl;};
struct IRowsetUpdate {struct IRowsetUpdateVtbl *lpVtbl;};
struct IRunnableTask {struct IRunnableTaskVtbl *lpVtbl;};
struct ISAXXMLFilter {struct ISAXXMLFilterVtbl *lpVtbl;};
struct ISAXXMLReader {struct ISAXXMLReaderVtbl *lpVtbl;};
struct ISMTPCallback {struct ISMTPCallbackVtbl *lpVtbl;};
struct ISQLErrorInfo {struct ISQLErrorInfoVtbl *lpVtbl;};
struct ISecurityInfo {struct ISecurityInfoVtbl *lpVtbl;};
struct IShellBrowser {struct IShellBrowserVtbl *lpVtbl;};
struct IShellDetails {struct IShellDetailsVtbl *lpVtbl;};
struct IShellExtInit {struct IShellExtInitVtbl *lpVtbl;};
struct IShellFolder2 {struct IShellFolder2Vtbl *lpVtbl;};
struct IShellMoniker {struct IShellMonikerVtbl *lpVtbl;};
struct IShellWindows {struct IShellWindowsVtbl *lpVtbl;};
struct IStreamSample {struct IStreamSampleVtbl *lpVtbl;};
struct ISyncSchedule {struct ISyncScheduleVtbl *lpVtbl;};
struct ITIMEPlayItem {struct ITIMEPlayItemVtbl *lpVtbl;};
struct ITIMEPlayList {struct ITIMEPlayListVtbl *lpVtbl;};
struct ITargetFrame2 {struct ITargetFrame2Vtbl *lpVtbl;};
struct ITargetNotify {struct ITargetNotifyVtbl *lpVtbl;};
struct ITimerService {struct ITimerServiceVtbl *lpVtbl;};
struct ITransaction2 {struct ITransaction2Vtbl *lpVtbl;};
struct ITravelLogStg {struct ITravelLogStgVtbl *lpVtbl;};
struct ITrusteeAdmin {struct ITrusteeAdminVtbl *lpVtbl;};
struct IUPnPServices {struct IUPnPServicesVtbl *lpVtbl;};
struct IUserIdentity {struct IUserIdentityVtbl *lpVtbl;};
struct IVBSAXLocator {struct IVBSAXLocatorVtbl *lpVtbl;};
struct IViewObjectEx {struct IViewObjectExVtbl *lpVtbl;};
struct IVirusScanner {struct IVirusScannerVtbl *lpVtbl;};
struct IVoIPMediaMgr {struct IVoIPMediaMgrVtbl *lpVtbl;};
struct IXMLAttribute {struct IXMLAttributeVtbl *lpVtbl;};
struct IXMLDOMEntity {struct IXMLDOMEntityVtbl *lpVtbl;};
struct IXMLDocument2 {struct IXMLDocument2Vtbl *lpVtbl;};
struct IXSLProcessor {struct IXSLProcessorVtbl *lpVtbl;};
enum InstallStatus {INSTALLSTATUS_INITIALIZING = 0x0,INSTALLSTATUS_DEPENDENCY = 0x1,INSTALLSTATUS_DOWNLOADING = 0x2,INSTALLSTATUS_COPYING = 0x3,INSTALLSTATUS_RETRYING = 0x4,INSTALLSTATUS_CHECKINGTRUST = 0x5,INSTALLSTATUS_EXTRACTING = 0x6,INSTALLSTATUS_RUNNING = 0x7,INSTALLSTATUS_FINISHED = 0x8,INSTALLSTATUS_DOWNLOADFINISHED = 0x9,};
struct IrdaTransport;
typedef struct _KDEVICE_QUEUE KDEVICE_QUEUE;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef struct linecardentry_tag LINECARDENTRY;
typedef struct linedevstatus_tag LINEDEVSTATUS;
typedef struct _LINE_DEV_CAPS LINE_DEV_CAPS;
typedef struct tagADDRESSLIST *LPADDRESSLIST;
typedef IAdviseSink2 *LPADVISESINK2;
typedef struct _AFPROTOCOLS *LPAFPROTOCOLS;
typedef struct _AMVPDIMINFO *LPAMVPDIMINFO;
typedef struct tagBODYOFFSETS *LPBODYOFFSETS;
typedef ICatRegister *LPCATREGISTER;
typedef struct tagCHARSETINFO *LPCHARSETINFO;
typedef struct tagCHOOSECOLOR *LPCHOOSECOLOR;
typedef struct tagCHOOSEFONTW *LPCHOOSEFONTW;
typedef ICodeInstall *LPCODEINSTALL;
typedef struct tagCONNECTDATA *LPCONNECTDATA;
typedef IContextMenu *LPCONTEXTMENU;
typedef struct tagCONTROLINFO *LPCONTROLINFO;
typedef struct _CSADDR_INFO *LPCSADDR_INFO;
typedef struct _D3DVECTOR *LPD3DXVECTOR3;
typedef struct D3DXVECTOR4 *LPD3DXVECTOR4;
typedef struct _DEBUG_EVENT *LPDEBUG_EVENT;
typedef struct tagDIBSECTION2 *LPDIBSECTION2;
typedef struct IDirectDraw2 *LPDIRECTDRAW2;
typedef struct IDirectDraw4 *LPDIRECTDRAW4;
typedef struct IDirectSound *LPDIRECTSOUND;
typedef struct _DTBLMVDDLBX *LPDTBLMVDDLBX;
typedef struct tagENUMLOGFONT *LPENUMLOGFONT;
typedef IEnumMoniker *LPENUMMONIKER;
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef IEnumRfc1766 *LPENUMRFC1766;
typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef IEnumSTATURL *LPENUMSTATURL;
typedef IEnumUnknown *LPENUMUNKNOWN;
typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct _078929F8CD96C82DFB2B0B82CFD86124 *LPEXP_SZ_LINK;
typedef struct tagEXTRASEARCH *LPEXTRASEARCH;
typedef IFileViewerA *LPFILEVIEWERA;
typedef IFileViewerW *LPFILEVIEWERW;
typedef struct tagHANDLETABLE *LPHANDLETABLE;
typedef struct tagHEAPENTRY32 *LPHEAPENTRY32;
typedef IHlinkTarget *LPHLINKTARGET;
typedef struct _HSE_TF_INFO *LPHSE_TF_INFO;
typedef struct tagHTTPMAILGET *LPHTTPMAILGET;
typedef struct tagIXPRASLOGON *LPIXPRASLOGON;
typedef struct linedevcaps_tag *LPLINEDEVCAPS;
typedef struct lineforward_tag *LPLINEFORWARD;
typedef struct linemessage_tag *LPLINEMESSAGE;
typedef struct IMAPIControl *LPMAPICONTROL;
typedef IMediaHolder *LPMEDIAHOLDER;
typedef struct tagMIDIINCAPSA *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *LPMIDIINCAPSW;
typedef IMimeMessage *LPMIMEMESSAGE;
typedef IMonikerProp *LPMONIKERPROP;
typedef struct tagMONITORINFO *LPMONITORINFO;
typedef struct tagLVKEYDOWN *LPNMLVKEYDOWN;
typedef struct tagNMSELCHANGE *LPNMSELCHANGE;
typedef struct tagNMTREEVIEWA *LPNMTREEVIEWA;
typedef struct tagNMTREEVIEWW *LPNMTREEVIEWW;
typedef struct tagTVKEYDOWN *LPNMTVKEYDOWN;
typedef struct tagNNTPARTICLE *LPNNTPARTICLE;
typedef struct tagNNTPMESSAGE *LPNNTPMESSAGE;
typedef struct _NSP_ROUTINE *LPNSP_ROUTINE;
typedef struct tagOCPFIPARAMS *LPOCPFIPARAMS;
typedef IOleDocument *LPOLEDOCUMENT;
typedef IOleUndoUnit *LPOLEUNDOUNIT;
typedef IOptionArray *LPOPTIONARRAY;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef IPersistFile *LPPERSISTFILE;
typedef IPersistMime *LPPERSISTMIME;
typedef struct phonestatus_tag *LPPHONESTATUS;
typedef IPictureDisp *LPPICTUREDISP;
typedef IPropertyBag *LPPROPERTYBAG;
typedef IPropertyMap *LPPROPERTYMAP;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct _QOS_SD_MODE *LPQOS_SD_MODE;
typedef struct tagRFC1522INFO *LPRFC1522INFO;
typedef IRootStorage *LPROOTSTORAGE;
typedef struct _BE0BDAB4463CDAC89A1FD071673BF7FC *LPSHDRAGIMAGE;
typedef IShellFolder *LPSHELLFOLDER;
typedef struct tagSMTPMESSAGE *LPSMTPMESSAGE;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct tagSOFTKBDDATA *LPSOFTKBDDATA;
typedef struct _SSLPROTOCOL *LPSSLPROTOCOL;
typedef struct _tagSTATPROPMAP *LPSTATPROPMAP;
typedef struct tagSTYLESTRUCT *LPSTYLESTRUCT;
typedef struct _tagSYNCMGRITEM *LPSYNCMGRITEM;
typedef struct _SYSTEM_INFO *LPSYSTEM_INFO;
typedef ITargetFrame *LPTARGETFRAME;
typedef struct tagTBADDBITMAP *LPTBADDBITMAP;
typedef struct tagTEXTMETRICA *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW *LPTEXTMETRICW;
typedef struct tagTOOLINFOA *LPTTTOOLINFOA;
typedef struct tagTOOLINFOW *LPTTTOOLINFOW;
typedef IVersionHost *LPVERSIONHOST;
typedef IViewObject2 *LPVIEWOBJECT2;
typedef struct tagWAVEOUTCAPS *LPWAVEOUTCAPS;
typedef IWinInetInfo *LPWININETINFO;
typedef struct _WSATHREADID *LPWSATHREADID;
typedef struct tagLVHITTESTINFO LVHITTESTINFO;
enum MACRO_ACCTDLG {ACCTDLG_NO_IMAP = 0x1,ACCTDLG_NO_REMOVEDELETE = 0x2,ACCTDLG_NO_BREAKMESSAGES = 0x4,ACCTDLG_NO_REMOVEAFTER = 0x8,ACCTDLG_NO_SENDRECEIVE = 0x10,ACCTDLG_NO_NEWSPOLL = 0x20,ACCTDLG_NO_SECURITY = 0x40,ACCTDLG_BACKUP_CONNECT = 0x80,ACCTDLG_NO_IMAPPOLL = 0x100,ACCTDLG_NO_NEW_POP = 0x200,ACCTDLG_SHOWIMAPSPECIAL = 0x400,ACCTDLG_INTERNETCONNECTION = 0x800,ACCTDLG_HTTPMAIL = 0x1000,ACCTDLG_REVOCATION = 0x2000,ACCTDLG_OE = 0x4000,ACCTDLG_ALL = 0x7FFF,};
enum MACRO_ADDRESS {WSANO_ADDRESS = 11004,NO_ADDRESS = 11004,};
enum MACRO_ADRPARM {ADRPARM_HELP_CTX = 0x0,};
enum MACRO_AF_TAPI {AF_TAPI_SAP_TYPE = 0x8000,};
enum MACRO_ALERTSZ {ALERTSZ = 128,};
enum MACRO_ALG_SID {ALG_SID_RC2 = 2,ALG_SID_RC4 = 1,ALG_SID_SEAL = 2,ALG_SID_DH_SANDF = 1,ALG_SID_DH_EPHEM = 2,ALG_SID_AGREED_KEY_ANY = 3,ALG_SID_KEA = 4,ALG_SID_MD2 = 1,ALG_SID_MD4 = 2,ALG_SID_MD5 = 3,ALG_SID_SHA = 4,ALG_SID_SHA1 = 4,ALG_SID_MAC = 5,ALG_SID_RIPEMD = 6,ALG_SID_RIPEMD160 = 7,ALG_SID_SSL3SHAMD5 = 8,ALG_SID_HMAC = 9,ALG_SID_TLS1PRF = 10,ALG_SID_HASH_REPLACE_OWF = 11,ALG_SID_SHA_256 = 12,ALG_SID_SHA_384 = 13,ALG_SID_SHA_512 = 14,ALG_SID_SSL3_MASTER = 1,ALG_SID_SCHANNEL_MASTER_HASH = 2,ALG_SID_SCHANNEL_MAC_KEY = 3,ALG_SID_PCT1_MASTER = 4,ALG_SID_SSL2_MASTER = 5,ALG_SID_TLS1_MASTER = 6,ALG_SID_SCHANNEL_ENC_KEY = 7,ALG_SID_EXAMPLE = 80,};
enum MACRO_AMMPEG2 {AMMPEG2_DoPanScan = 0x1,AMMPEG2_DVDLine21Field1 = 0x2,AMMPEG2_DVDLine21Field2 = 0x4,AMMPEG2_SourceIsLetterboxed = 0x8,AMMPEG2_FilmCameraMode = 0x10,AMMPEG2_LetterboxAnalogOut = 0x20,};
enum MACRO_AM_MPEG {AM_MPEG_AUDIO_DUAL_MERGE = 0,AM_MPEG_AUDIO_DUAL_LEFT = 1,AM_MPEG_AUDIO_DUAL_RIGHT = 2,};
enum MACRO_ANYSIZE {ANYSIZE_ARRAY = 1,};
enum MACRO_ASPECTX {ASPECTX = 40,};
enum MACRO_ASPECTY {ASPECTY = 42,};
enum MACRO_BATTERY {BATTERY_FLAG_HIGH = 0x1,BATTERY_FLAG_LOW = 0x2,BATTERY_FLAG_CRITICAL = 0x4,BATTERY_FLAG_CHARGING = 0x8,BATTERY_FLAG_NO_BATTERY = 0x80,BATTERY_FLAG_UNKNOWN = 0xFF,BATTERY_PERCENTAGE_UNKNOWN = 0xFF,BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF,BATTERY_CHEMISTRY_ALKALINE = 0x1,BATTERY_CHEMISTRY_NICD = 0x2,BATTERY_CHEMISTRY_NIMH = 0x3,BATTERY_CHEMISTRY_LION = 0x4,BATTERY_CHEMISTRY_LIPOLY = 0x5,BATTERY_CHEMISTRY_ZINCAIR = 0x6,BATTERY_CHEMISTRY_UNKNOWN = 0xFF,};
enum MACRO_BI_RLE8 {BI_RLE8 = 1,};
enum MACRO_BLLI_L2 {BLLI_L2_MODE_NORMAL = 0x40,BLLI_L2_MODE_EXT = 0x80,BLLI_L3_MODE_NORMAL = 0x40,BLLI_L3_MODE_EXT = 0x80,BLLI_L3_PACKET_16 = 0x4,BLLI_L3_PACKET_32 = 0x5,BLLI_L3_PACKET_64 = 0x6,BLLI_L3_PACKET_128 = 0x7,BLLI_L3_PACKET_256 = 0x8,BLLI_L3_PACKET_512 = 0x9,BLLI_L3_PACKET_1024 = 0xA,BLLI_L3_PACKET_2048 = 0xB,BLLI_L3_PACKET_4096 = 0xC,};
enum MACRO_BTH_COD {BTH_COD_MAJOR_SERVICE_CLASS_INFORMATION = 0x800000,BTH_COD_MAJOR_SERVICE_CLASS_TELEPHONY = 0x400000,BTH_COD_MAJOR_SERVICE_CLASS_AUDIO = 0x200000,BTH_COD_MAJOR_SERVICE_CLASS_OBEX = 0x100000,BTH_COD_MAJOR_SERVICE_CLASS_CAPTURE = 0x80000,BTH_COD_MAJOR_SERVICE_CLASS_RENDERING = 0x40000,BTH_COD_MAJOR_SERVICE_CLASS_NETWORK = 0x20000,BTH_COD_MAJOR_SERVICE_CLASS_LIMITED_DISC = 0x2000,BTH_COD_MAJOR_DEVICE_CLASS_MISC = 0x0,BTH_COD_MAJOR_DEVICE_CLASS_COMPUTER = 0x100,BTH_COD_MAJOR_DEVICE_CLASS_PHONE = 0x200,BTH_COD_MAJOR_DEVICE_CLASS_LAP = 0x300,BTH_COD_MAJOR_DEVICE_CLASS_AUDIO = 0x400,BTH_COD_MAJOR_DEVICE_CLASS_PERIPHERAL = 0x500,BTH_COD_MAJOR_DEVICE_CLASS_UNCLASSIFIED = 0x1F00,BTH_COD_MINOR_COMPUTER_UNCLASSIFIED = 0x0,BTH_COD_MINOR_COMPUTER_DESKTOP = 0x4,BTH_COD_MINOR_COMPUTER_SERVER = 0x8,BTH_COD_MINOR_COMPUTER_LAPTOP = 0xC,BTH_COD_MINOR_COMPUTER_HANDHELD = 0x10,BTH_COD_MINOR_COMPUTER_PDA = 0x14,BTH_COD_MINOR_PHONE_UNCLASSIFIED = 0x0,BTH_COD_MINOR_PHONE_CELL = 0x4,BTH_COD_MINOR_PHONE_CORDLESS = 0x8,BTH_COD_MINOR_PHONE_SMART = 0xC,BTH_COD_MINOR_PHONE_WIRED = 0x10,BTH_COD_MINOR_LAP_AVAILABLE = 0x0,BTH_COD_MINOR_LAP_1_17 = 0x4,BTH_COD_MINOR_LAP_17_33 = 0x8,BTH_COD_MINOR_LAP_33_50 = 0xC,BTH_COD_MINOR_LAP_50_67 = 0x10,BTH_COD_MINOR_LAP_67_83 = 0x14,BTH_COD_MINOR_LAP_83_99 = 0x18,BTH_COD_MINOR_LAP_NO_SERVICE = 0x1C,BTH_COD_MINOR_AUDIO_UNCLASSIFIED = 0x0,BTH_COD_MINOR_AUDIO_HEADSET = 0x4,};
enum MACRO_BTH_MAX {BTH_MAX_NAME_SIZE = 248,};
enum MACRO_CAPABLE {RECEIVE_TIME_INDICATION_CAPABLE = 0x8,TIMED_SEND_CAPABLE = 0x10,TIME_STAMP_CAPABLE = 0x20,};
enum MACRO_CAP_ALL {SCS_CAP_ALL = 0x7,SELECT_CAP_ALL = 0x3,};
enum MACRO_CDB2GVF {CDB2GVF_SHOWALLFILES = 0x1,};
enum MACRO_CELZONE {CELZONE_INTERRUPT = 0x1,CELZONE_RESCHEDULE = 0x2,CELZONE_MIGRATE = 0x4,CELZONE_TLB = 0x8,CELZONE_DEMANDPAGE = 0x10,CELZONE_THREAD = 0x20,CELZONE_PROCESS = 0x40,CELZONE_PRIORITYINV = 0x80,CELZONE_CRITSECT = 0x100,CELZONE_SYNCH = 0x200,CELZONE_PROFILER = 0x400,CELZONE_HEAP = 0x800,CELZONE_VIRTMEM = 0x1000,CELZONE_LOADER = 0x4000,CELZONE_MEMTRACKING = 0x8000,CELZONE_BOOT_TIME = 0x10000,CELZONE_GDI = 0x20000,CELZONE_KCALL = 0x400000,CELZONE_ALWAYSON = 0x40000000,CELZONE_MISC = 0x80000000,};
enum MACRO_CEL_GDI {CEL_GDI_AddFontResource = 0,CEL_GDI_PatBlt = 1,CEL_GDI_BitBlt = 2,CEL_GDI_CombineRgn = 3,CEL_GDI_CreateBitmap = 4,CEL_GDI_CreateCompatibleBitmap = 5,CEL_GDI_CreateCompatibleDC = 6,CEL_GDI_CreateDIBPatternBrushPt = 7,CEL_GDI_CreateFontIndirectW = 8,CEL_GDI_CreateRectRgnIndirect = 9,CEL_GDI_CreatePenIndirect = 10,CEL_GDI_CreateSolidBrush = 11,CEL_GDI_DeleteDC = 12,CEL_GDI_DeleteObject = 13,CEL_GDI_DrawEdge = 14,CEL_GDI_DrawFocusRect = 15,CEL_GDI_DrawTextW = 16,CEL_GDI_Ellipse = 17,CEL_GDI_EnumFontFamiliesW = 18,CEL_GDI_EnumFontsW = 19,CEL_GDI_ExcludeClipRect = 20,CEL_GDI_ExtTextOutW = 21,CEL_GDI_SetTextAlign = 22,CEL_GDI_GetTextAlign = 23,CEL_GDI_FillRect = 24,CEL_GDI_GetBkColor = 25,CEL_GDI_GetBkMode = 26,CEL_GDI_GetClipRgn = 27,CEL_GDI_GetClipBox = 28,CEL_GDI_GetCurrentObject = 29,CEL_GDI_GetDeviceCaps = 30,CEL_GDI_GetNearestColor = 31,CEL_GDI_GetObjectW = 32,CEL_GDI_GetObjectType = 33,CEL_GDI_GetPixel = 34,CEL_GDI_GetRegionData = 35,CEL_GDI_GetSysColorBrush = 36,CEL_GDI_GetRgnBox = 37,CEL_GDI_GetStockObject = 38,CEL_GDI_GetTextColor = 39,CEL_GDI_GetTextExtentExPointW = 40,CEL_GDI_GetTextFaceW = 41,CEL_GDI_GetTextMetricsW = 42,CEL_GDI_GetCharWidth32 = 43,CEL_GDI_IntersectClipRect = 44,CEL_GDI_MaskBlt = 45,CEL_GDI_OffsetRgn = 46,CEL_GDI_MoveToEx = 47,CEL_GDI_LineTo = 48,CEL_GDI_GetCurrentPositionEx = 49,CEL_GDI_Polygon = 50,CEL_GDI_Polyline = 51,CEL_GDI_PtInRegion = 52,CEL_GDI_Rectangle = 53,CEL_GDI_RectInRegion = 54,CEL_GDI_RemoveFontResourceW = 55,CEL_GDI_RestoreDC = 56,CEL_GDI_RoundRect = 57,CEL_GDI_SaveDC = 58,CEL_GDI_SelectClipRgn = 59,CEL_GDI_SelectObject = 60,CEL_GDI_SetBkColor = 61,CEL_GDI_SetBkMode = 62,CEL_GDI_SetBrushOrgEx = 63,CEL_GDI_SetPixel = 64,CEL_GDI_SetTextColor = 65,CEL_GDI_StretchBlt = 66,CEL_GDI_StretchDIBits = 67,CEL_GDI_CloseEnhMetaFile = 68,CEL_GDI_CreateEnhMetaFileW = 69,CEL_GDI_DeleteEnhMetaFile = 70,CEL_GDI_PlayEnhMetaFile = 71,CEL_GDI_CreatePalette = 72,CEL_GDI_SelectPalette = 73,CEL_GDI_RealizePalette = 74,CEL_GDI_GetPaletteEntries = 75,CEL_GDI_SetPaletteEntries = 76,CEL_GDI_GetSystemPaletteEntries = 77,CEL_GDI_GetNearestPaletteIndex = 78,CEL_GDI_GetDIBColorTable = 79,CEL_GDI_SetDIBColorTable = 80,CEL_GDI_CreatePen = 81,CEL_GDI_StartDocW = 82,CEL_GDI_EndDoc = 83,CEL_GDI_StartPage = 84,CEL_GDI_EndPage = 85,CEL_GDI_AbortDoc = 86,CEL_GDI_SetAbortProc = 87,CEL_GDI_CreateDCW = 88,CEL_GDI_CreateRectRgn = 89,CEL_GDI_ExtCreateRegion = 90,CEL_GDI_FillRgn = 91,CEL_GDI_SetROP2 = 92,CEL_GDI_RectVisible = 93,CEL_GDI_SetRectRgn = 94,CEL_GDI_CreatePatternBrush = 95,CEL_GDI_CreateBitmapFromPointer = 96,CEL_GDI_SetViewportOrgEx = 97,CEL_GDI_TransparentImage = 98,CEL_GDI_TranslateCharsetInfo = 99,CEL_GDI_ExtEscape = 100,CEL_GDI_SetDIBitsToDevice = 101,CEL_GDI_GradientFill = 102,CEL_GDI_InvertRect = 103,CEL_GDI_GetCharABCWidths = 104,};
enum MACRO_CERT_ID {CERT_ID_ISSUER_SERIAL_NUMBER = 1,CERT_ID_KEY_IDENTIFIER = 2,CERT_ID_SHA1_HASH = 3,};
enum MACRO_CF_NULL {CF_NULL = 0,CFSTR_MIME_NULL = 0,};
enum MACRO_CHARSET {ANSI_CHARSET = 0,DEFAULT_CHARSET = 1,SYMBOL_CHARSET = 2,SHIFTJIS_CHARSET = 128,HANGEUL_CHARSET = 129,GB2312_CHARSET = 134,CHINESEBIG5_CHARSET = 136,OEM_CHARSET = 255,JOHAB_CHARSET = 130,HEBREW_CHARSET = 177,ARABIC_CHARSET = 178,GREEK_CHARSET = 161,TURKISH_CHARSET = 162,VIETNAMESE_CHARSET = 163,THAI_CHARSET = 222,EASTEUROPE_CHARSET = 238,RUSSIAN_CHARSET = 204,MAC_CHARSET = 77,BALTIC_CHARSET = 186,};
enum MACRO_CLIPBRD {CLIPBRD_E_FIRST = 0x800401D0,CLIPBRD_E_LAST = 0x800401DF,CLIPBRD_S_FIRST = 0x401D0,CLIPBRD_S_LAST = 0x401DF,};
enum MACRO_CONNDLG {CONNDLG_RO_PATH = 0x1,CONNDLG_CONN_POINT = 0x2,CONNDLG_USE_MRU = 0x4,CONNDLG_HIDE_BOX = 0x8,CONNDLG_PERSIST = 0x10,CONNDLG_NOT_PERSIST = 0x20,};
enum MACRO_CONNECT {CONNECT_UPDATE_PROFILE = 0x1,CONNECT_UPDATE_RECENT = 0x2,CONNECT_TEMPORARY = 0x4,CONNECT_INTERACTIVE = 0x8,CONNECT_PROMPT = 0x10,CONNECT_NEED_DRIVE = 0x20,CONNECT_REFCOUNT = 0x40,CONNECT_REDIRECT = 0x80,CONNECT_LOCALDRIVE = 0x100,CONNECT_CURRENT_MEDIA = 0x200,};
enum MACRO_CONTEXT {CONTEXT_ARM = 0x40,CONTEXT_CONTROL = 0x41,CONTEXT_INTEGER = 0x42,CONTEXT_FLOATING_POINT = 0x44,CONTEXT_FULL = 0x47,};
enum MACRO_COREDLL {COREDLL_CRT = 1,};
enum MACRO_CO_TAPI {CO_TAPI_VERSION = 196608,CO_TAPI_FLAG_PER_LINE_CAPS = 1,CO_TAPI_FLAG_PER_ADDRESS_CAPS = 1,CO_TAPI_LINE_ID_UNSPECIFIED = -1,CO_TAPI_ADDRESS_ID_UNSPECIFIED = -1,CO_TAPI_FLAG_OUTGOING_CALL = 1,CO_TAPI_FLAG_INCOMING_CALL = 2,CO_TAPI_FLAG_USE_DEFAULT_CALLPARAMS = 4,};
enum MACRO_CPLMAIN {CPLMAIN_COLORSCHEME = 1,CPLMAIN_NETWORK = 1,CPLMAIN_DATETIME = 1,CPLMAIN_KEYBOARD = 1,CPLMAIN_PASSWORD = 1,CPLMAIN_OWNER = 1,CPLMAIN_SYSTEM = 1,CPLMAIN_DISPLAY = 1,CPLMAIN_POINTERCMN = 1,CPLMAIN_MOUSE = 1,CPLMAIN_BACKLIGHT = 1,CPLMAIN_CERTS = 1,CPLMAIN_SOUNDS = 1,};
enum MACRO_CP_NONE {CP_NONE = 0,CP_RECTANGLE = 1,CP_REGION = 2,};
enum MACRO_CRYPT_Y {CRYPT_Y_ONLY = 0x1,CRYPT_SSL2_FALLBACK = 0x2,CRYPT_DESTROYKEY = 0x4,CRYPT_OAEP = 0x40,CRYPT_BLOB_VER3 = 0x80,CRYPT_IPSEC_HMAC_KEY = 0x100,CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 0x20,CRYPT_SECRETDIGEST = 0x1,CRYPT_OWF_REPL_LM_HASH = 0x1,CRYPT_LITTLE_ENDIAN = 0x1,CRYPT_NOHASHOID = 0x1,CRYPT_TYPE2_FORMAT = 0x2,CRYPT_X931_FORMAT = 0x4,CRYPT_MACHINE_DEFAULT = 0x1,CRYPT_USER_DEFAULT = 0x2,CRYPT_DELETE_DEFAULT = 0x4,};
enum MACRO_CTL_ANY {CTL_ANY_SUBJECT_TYPE = 1,CTL_CERT_SUBJECT_TYPE = 2,CTL_FIND_ANY = 0,CTL_FIND_SHA1_HASH = 1,CTL_FIND_MD5_HASH = 2,CTL_FIND_USAGE = 3,CTL_FIND_SUBJECT = 4,CTL_FIND_EXISTING = 5,CTL_FIND_NO_LIST_ID_CBDATA = -1,CTL_FIND_NO_SIGNER_PTR = -1,CTL_FIND_SAME_USAGE_FLAG = 1,};
enum MACRO_CURRENT {CURRENT_LOGGING_VERSION = 4,};
enum MACRO_D3DCAPS {D3DCAPS_READ_SCANLINE = 0x20000,};
enum MACRO_D3DENUM {D3DENUM_NO_WHQL_LEVEL = 0x2,};
enum MACRO_D3DLOCK {D3DLOCK_READONLY = 0x10,D3DLOCK_DISCARD = 0x2000,D3DLOCK_NOOVERWRITE = 0x1000,D3DLOCK_NOSYSLOCK = 0x800,D3DLOCK_NO_DIRTY_UPDATE = 0x8000,};
enum MACRO_D3DVSDE {D3DVSDE_POSITION = 0,D3DVSDE_BLENDWEIGHT = 1,D3DVSDE_BLENDINDICES = 2,D3DVSDE_NORMAL = 3,D3DVSDE_PSIZE = 4,D3DVSDE_DIFFUSE = 5,D3DVSDE_SPECULAR = 6,D3DVSDE_TEXCOORD0 = 7,D3DVSDE_TEXCOORD1 = 8,D3DVSDE_TEXCOORD2 = 9,D3DVSDE_TEXCOORD3 = 10,D3DVSDE_TEXCOORD4 = 11,D3DVSDE_TEXCOORD5 = 12,D3DVSDE_TEXCOORD6 = 13,D3DVSDE_TEXCOORD7 = 14,D3DVSDE_POSITION2 = 15,D3DVSDE_NORMAL2 = 16,};
enum MACRO_D3DVSDT {D3DVSDT_FLOAT1 = 0x0,D3DVSDT_FLOAT2 = 0x1,D3DVSDT_FLOAT3 = 0x2,D3DVSDT_FLOAT4 = 0x3,D3DVSDT_D3DCOLOR = 0x4,D3DVSDT_UBYTE4 = 0x5,D3DVSDT_SHORT2 = 0x6,D3DVSDT_SHORT4 = 0x7,};
enum MACRO_D3DWRAP {D3DWRAP_U = 0x1,D3DWRAP_V = 0x2,D3DWRAP_W = 0x4,};
enum MACRO_D3DXERR {D3DXERR_NOMEMORY = 0xC8770BB8,D3DXERR_NULLPOINTER = 0xC8770BB9,D3DXERR_INVALIDD3DXDEVICEINDEX = 0xC8770BBA,D3DXERR_NODIRECTDRAWAVAILABLE = 0xC8770BBB,D3DXERR_NODIRECT3DAVAILABLE = 0xC8770BBC,D3DXERR_NODIRECT3DDEVICEAVAILABLE = 0xC8770BBD,D3DXERR_NOPRIMARYAVAILABLE = 0xC8770BBE,D3DXERR_NOZBUFFERAVAILABLE = 0xC8770BBF,D3DXERR_NOBACKBUFFERAVAILABLE = 0xC8770BC0,D3DXERR_COULDNTUPDATECAPS = 0xC8770BC1,D3DXERR_NOZBUFFER = 0xC8770BC2,D3DXERR_INVALIDMODE = 0xC8770BC3,D3DXERR_INVALIDPARAMETER = 0xC8770BC4,D3DXERR_INITFAILED = 0xC8770BC5,D3DXERR_STARTUPFAILED = 0xC8770BC6,D3DXERR_D3DXNOTSTARTEDYET = 0xC8770BC7,D3DXERR_NOTINITIALIZED = 0xC8770BC8,D3DXERR_FAILEDDRAWTEXT = 0xC8770BC9,D3DXERR_BADD3DXCONTEXT = 0xC8770BCA,D3DXERR_CAPSNOTSUPPORTED = 0xC8770BCB,D3DXERR_UNSUPPORTEDFILEFORMAT = 0xC8770BCC,D3DXERR_IFLERROR = 0xC8770BCD,D3DXERR_FAILEDGETCAPS = 0xC8770BCE,D3DXERR_CANNOTRESIZEFULLSCREEN = 0xC8770BCF,D3DXERR_CANNOTRESIZENONWINDOWED = 0xC8770BD0,D3DXERR_FRONTBUFFERALREADYEXISTS = 0xC8770BD1,D3DXERR_FULLSCREENPRIMARYEXISTS = 0xC8770BD2,D3DXERR_GETDCFAILED = 0xC8770BD3,D3DXERR_BITBLTFAILED = 0xC8770BD4,D3DXERR_NOTEXTURE = 0xC8770BD5,D3DXERR_MIPLEVELABSENT = 0xC8770BD6,D3DXERR_SURFACENOTPALETTED = 0xC8770BD7,D3DXERR_ENUMFORMATSFAILED = 0xC8770BD8,D3DXERR_COLORDEPTHTOOLOW = 0xC8770BD9,D3DXERR_INVALIDFILEFORMAT = 0xC8770BDA,D3DXERR_NOMATCHFOUND = 0xC8770BDB,};
enum MACRO_DB_NULL {DB_NULL_HACCESSOR = 0x0,DB_INVALID_HACCESSOR = 0x0,DB_NULL_HROW = 0x0,};
enum MACRO_DB_PROT {DB_PROT_LEVEL_NONE = 0x0,DB_PROT_LEVEL_CONNECT = 0x1,DB_PROT_LEVEL_CALL = 0x2,DB_PROT_LEVEL_PKT = 0x3,DB_PROT_LEVEL_PKT_INTEGRITY = 0x4,DB_PROT_LEVEL_PKT_PRIVACY = 0x5,DB_MODE_READ = 0x1,DB_MODE_WRITE = 0x2,DB_MODE_READWRITE = 0x3,DB_MODE_SHARE_DENY_READ = 0x4,DB_MODE_SHARE_DENY_WRITE = 0x8,DB_MODE_SHARE_EXCLUSIVE = 0xC,DB_MODE_SHARE_DENY_NONE = 0x10,};
enum MACRO_DDBLTFX {DDBLTFX_ARITHSTRETCHY = 0x1,DDBLTFX_MIRRORLEFTRIGHT = 0x2,DDBLTFX_MIRRORUPDOWN = 0x4,DDBLTFX_NOTEARING = 0x8,DDBLTFX_ROTATE180 = 0x10,DDBLTFX_ROTATE270 = 0x20,DDBLTFX_ROTATE90 = 0x40,DDBLTFX_ZBUFFERRANGE = 0x80,DDBLTFX_ZBUFFERBASEDEST = 0x100,};
enum MACRO_DDCAPS2 {DDCAPS2_CERTIFIED = 0x1,DDCAPS2_NO2DDURING3DSCENE = 0x2,DDCAPS2_VIDEOPORT = 0x4,DDCAPS2_AUTOFLIPOVERLAY = 0x8,DDCAPS2_CANBOBINTERLEAVED = 0x10,DDCAPS2_CANBOBNONINTERLEAVED = 0x20,DDCAPS2_COLORCONTROLOVERLAY = 0x40,DDCAPS2_COLORCONTROLPRIMARY = 0x80,DDCAPS2_CANDROPZ16BIT = 0x100,DDCAPS2_NONLOCALVIDMEM = 0x200,DDCAPS2_NONLOCALVIDMEMCAPS = 0x400,DDCAPS2_NOPAGELOCKREQUIRED = 0x800,DDCAPS2_WIDESURFACES = 0x1000,DDCAPS2_CANFLIPODDEVEN = 0x2000,DDCAPS2_CANBOBHARDWARE = 0x4000,DDCAPS2_COPYFOURCC = 0x8000,DDCAPS2_PRIMARYGAMMA = 0x20000,DDCAPS2_CANMANAGETEXTURE = 0x40000,DDCAPS2_CANRENDERWINDOWED = 0x80000,DDCAPS2_CANCALIBRATEGAMMA = 0x100000,DDCAPS2_FLIPINTERVAL = 0x200000,DDCAPS2_FLIPNOVSYNC = 0x400000,DDCAPS2_STEREO = 0x2000000,DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL = 0x4000000,};
enum MACRO_DDCOLOR {DDCOLOR_BRIGHTNESS = 0x1,DDCOLOR_CONTRAST = 0x2,DDCOLOR_HUE = 0x4,DDCOLOR_SATURATION = 0x8,DDCOLOR_SHARPNESS = 0x10,DDCOLOR_GAMMA = 0x20,DDCOLOR_COLORENABLE = 0x40,};
enum MACRO_DDOVERZ {DDOVERZ_SENDTOFRONT = 0x0,DDOVERZ_SENDTOBACK = 0x1,DDOVERZ_MOVEFORWARD = 0x2,DDOVERZ_MOVEBACKWARD = 0x3,DDOVERZ_INSERTINFRONTOF = 0x4,DDOVERZ_INSERTINBACKOF = 0x5,};
enum MACRO_DDPCAPS {DDPCAPS_4BIT = 0x1,DDPCAPS_8BITENTRIES = 0x2,DDPCAPS_8BIT = 0x4,DDPCAPS_INITIALIZE = 0x8,DDPCAPS_PRIMARYSURFACE = 0x10,DDPCAPS_PRIMARYSURFACELEFT = 0x20,DDPCAPS_ALLOW256 = 0x40,DDPCAPS_VSYNC = 0x80,DDPCAPS_1BIT = 0x100,DDPCAPS_2BIT = 0x200,DDPCAPS_ALPHA = 0x400,};
enum MACRO_DDSCAPS {DDSCAPS_RESERVED1 = 0x1,DDSCAPS_ALPHA = 0x2,DDSCAPS_BACKBUFFER = 0x4,DDSCAPS_COMPLEX = 0x8,DDSCAPS_FLIP = 0x10,DDSCAPS_FRONTBUFFER = 0x20,DDSCAPS_OFFSCREENPLAIN = 0x40,DDSCAPS_OVERLAY = 0x80,DDSCAPS_PALETTE = 0x100,DDSCAPS_PRIMARYSURFACE = 0x200,DDSCAPS_PRIMARYSURFACELEFT = 0x400,DDSCAPS_SYSTEMMEMORY = 0x800,DDSCAPS_TEXTURE = 0x1000,DDSCAPS_3DDEVICE = 0x2000,DDSCAPS_VIDEOMEMORY = 0x4000,DDSCAPS_VISIBLE = 0x8000,DDSCAPS_WRITEONLY = 0x10000,DDSCAPS_ZBUFFER = 0x20000,DDSCAPS_OWNDC = 0x40000,DDSCAPS_LIVEVIDEO = 0x80000,DDSCAPS_HWCODEC = 0x100000,DDSCAPS_MODEX = 0x200000,DDSCAPS_MIPMAP = 0x400000,DDSCAPS_RESERVED2 = 0x800000,DDSCAPS_ALLOCONLOAD = 0x4000000,DDSCAPS_VIDEOPORT = 0x8000000,DDSCAPS_LOCALVIDMEM = 0x10000000,DDSCAPS_NONLOCALVIDMEM = 0x20000000,DDSCAPS_STANDARDVGAMODE = 0x40000000,DDSCAPS_OPTIMIZED = 0x80000000,DDSCAPS_VALID = 0xFCFFFFFF,};
enum MACRO_DECIMAL {DECIMAL_NEG = 0x80,};
enum MACRO_DEFAULT {DEFAULT_PALETTE = 15,};
enum MACRO_DEVLOAD {DEVLOAD_DLLNAME_VALTYPE = 1,DEVLOAD_ICLASS_VALTYPE = 7,DEVLOAD_LOADORDER_VALTYPE = 4,DEVLOAD_ENTRYPOINT_VALTYPE = 1,DEVLOAD_PREFIX_VALTYPE = 1,DEVLOAD_INDEX_VALTYPE = 4,DEVLOAD_CONTEXT_VALTYPE = 4,DEVLOAD_INITCODE_VALTYPE = 4,DEVLOAD_FLAGS_VALTYPE = 4,DEVLOAD_INTRPEND_VALTYPE = 4,DEVLOAD_REPARMS_VALTYPE = 7,DEVLOAD_KEEPLIB_VALTYPE = 4,};
enum MACRO_DEVMGMT {DEVMGMT_SVC_STOP = 0,DEVMGMT_SVC_START = 1,DEVMGMT_SVC_GETSTATUS = 2,DEVMGMT_SVC_REGWND = 3,DEVMGMT_SVC_UNREGWND = 4,};
enum MACRO_DIALENG {DIALENG_OperationComplete = 0x10000,DIALENG_RedialAttempt = 0x10001,DIALENG_RedialWait = 0x10002,};
enum MACRO_DISPLAY {DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x1,DISPLAY_DEVICE_MULTI_DRIVER = 0x2,DISPLAY_DEVICE_PRIMARY_DEVICE = 0x4,DISPLAY_DEVICE_MIRRORING_DRIVER = 0x8,DISPLAY_DEVICE_VGA_COMPATIBLE = 0x10,DISPLAY_DEVICE_REMOVABLE = 0x20,DISPLAY_DEVICE_MODESPRUNED = 0x8000000,DISPLAY_DEVICE_REMOTE = 0x4000000,DISPLAY_DEVICE_DISCONNECT = 0x2000000,DISPLAY_DEVICE_ACTIVE = 0x1,DISPLAY_DEVICE_ATTACHED = 0x2,};
enum MACRO_DMCOLOR {DMCOLOR_MONOCHROME = 1,DMCOLOR_COLOR = 2,};
enum MACRO_DMPAPER {DMPAPER_LETTER = 1,DMPAPER_LEGAL = 5,DMPAPER_A4 = 9,DMPAPER_B4 = 12,DMPAPER_B5 = 13,};
enum MACRO_DMSTASK {DMSTASK_POLL = 0x1,DMSTASK_DOWNLOAD = 0x2,DMSTASK_REPORT = 0x4,DMSTASK_TYPE_MASK = 0x7,DMSTASK_SRC_FILE = 0x10000,DMSTASK_SRC_BUFFER = 0x20000,DMSTASK_SRC_MASK = 0x30000,DMSTASK_IMMEDIATE = 0x10000000,};
enum MACRO_DSBCAPS {DSBCAPS_PRIMARYBUFFER = 0x1,DSBCAPS_STATIC = 0x2,DSBCAPS_LOCHARDWARE = 0x4,DSBCAPS_LOCSOFTWARE = 0x8,DSBCAPS_CTRL3D = 0x10,DSBCAPS_CTRLFREQUENCY = 0x20,DSBCAPS_CTRLPAN = 0x40,DSBCAPS_CTRLVOLUME = 0x80,DSBCAPS_CTRLPOSITIONNOTIFY = 0x100,DSBCAPS_CTRLDEFAULT = 0xE0,DSBCAPS_CTRLALL = 0x1F0,DSBCAPS_STICKYFOCUS = 0x4000,DSBCAPS_GLOBALFOCUS = 0x8000,DSBCAPS_GETCURRENTPOSITION2 = 0x10000,DSBCAPS_MUTE3DATMAXDISTANCE = 0x20000,};
enum MACRO_DSBLOCK {DSBLOCK_FROMWRITECURSOR = 0x1,DSBLOCK_ENTIREBUFFER = 0x2,};
enum MACRO_DSBPLAY {DSBPLAY_LOOPING = 0x1,};
enum MACRO_DSBSIZE {DSBSIZE_MIN = 4,DSBSIZE_MAX = 268435455,};
enum MACRO_DSCCAPS {DSCCAPS_EMULDRIVER = 0x20,};
enum MACRO_DVDLBSZ {DVDLBSZ = 2048,};
enum MACRO_DWNTYPE {DWNTYPE_HTM = 0,DWNTYPE_IMG = 1,DWNTYPE_BITS = 2,DWNTYPE_FILE = 3,};
enum MACRO_DXTRANS {DXTRANS_TLB_MAJOR_VER = 1,DXTRANS_TLB_MINOR_VER = 1,};
enum MACRO_EAPCODE {EAPCODE_Request = 1,EAPCODE_Response = 2,EAPCODE_Success = 3,EAPCODE_Failure = 4,};
enum MACRO_EC_FILE {EC_FILE_CLOSED = 0x44,EC_ERRORABORTEX = 0x45,EC_EOS_SOON = 0x46,EC_CONTENTPROPERTY_CHANGED = 0x47,};
enum MACRO_EMBDHLP {EMBDHLP_INPROC_HANDLER = 0x0,EMBDHLP_INPROC_SERVER = 0x1,EMBDHLP_CREATENOW = 0x0,EMBDHLP_DELAYCREATE = 0x10000,};
enum MACRO_ERROR_0 {ERROR = 0,};
enum MACRO_ES_LEFT {ES_LEFT = 0x0,ES_CENTER = 0x1,ES_RIGHT = 0x2,ES_MULTILINE = 0x4,ES_UPPERCASE = 0x8,ES_LOWERCASE = 0x10,ES_PASSWORD = 0x20,ES_AUTOVSCROLL = 0x40,ES_AUTOHSCROLL = 0x80,ES_NOHIDESEL = 0x100,ES_COMBOBOX = 0x200,ES_OEMCONVERT = 0x400,ES_READONLY = 0x800,ES_WANTRETURN = 0x1000,ES_NUMBER = 0x2000,};
enum MACRO_EVENT_E {EVENT_E_FIRST = 0x80040200,EVENT_E_LAST = 0x8004021F,EVENT_S_FIRST = 0x40200,EVENT_S_LAST = 0x4021F,};
enum MACRO_FAILURE {LM_REDIR_FAILURE = 0x40003841,DFS_CONNECTION_FAILURE = 0x40003842,DFS_REFERRAL_FAILURE = 0x40003843,};
enum MACRO_FDAEMON {FDAEMON_W_WORDLISTFULL = 0x41680,FDAEMON_E_LOWRESOURCE = 0x80041681,FDAEMON_E_FATALERROR = 0x80041682,FDAEMON_E_PARTITIONDELETED = 0x80041683,FDAEMON_E_CHANGEUPDATEFAILED = 0x80041684,FDAEMON_W_EMPTYWORDLIST = 0x41685,FDAEMON_E_WORDLISTCOMMITFAILED = 0x80041686,FDAEMON_E_NOWORDLIST = 0x80041687,FDAEMON_E_TOOMANYFILTEREDBLOCKS = 0x80041688,};
enum MACRO_FD_READ {FD_READ_BIT = 0,FD_READ = 1,FD_WRITE_BIT = 1,FD_WRITE = 2,FD_OOB_BIT = 2,FD_OOB = 4,FD_ACCEPT_BIT = 3,FD_ACCEPT = 8,FD_CONNECT_BIT = 4,FD_CONNECT = 16,FD_CLOSE_BIT = 5,FD_CLOSE = 32,FD_QOS_BIT = 6,FD_QOS = 64,FD_GROUP_QOS_BIT = 7,FD_GROUP_QOS = 128,FD_ROUTING_INTERFACE_CHANGE_BIT = 8,FD_ROUTING_INTERFACE_CHANGE = 256,FD_ADDRESS_LIST_CHANGE_BIT = 9,FD_ADDRESS_LIST_CHANGE = 512,FD_MAX_EVENTS = 10,FD_ALL_EVENTS = 1023,};
enum MACRO_FILESYS {FILESYS_FSHEAP = 1,FILESYS_FSMAIN = 1,FILESYS_FSPASS = 1,FILESYS_FSDBASE = 1,FILESYS_MSGQUEUE = 1,FILESYS_FSREG = 1,FILESYS_FSYSRAM = 1,};
enum MACRO_FO_FILE {FO_FILE_OPEN = 0x1,FO_SYNCHRONOUS_IO = 0x2,FO_CLEANUP_COMPLETE = 0x4000,FO_HANDLE_CREATED = 0x40000,FO_FILE_FAST_IO_READ = 0x80000,};
enum MACRO_FTGNULL {FTGNULL = 0,};
enum MACRO_GENERIC {GENERIC_READ = 0x80000000,GENERIC_WRITE = 0x40000000,GENERIC_EXECUTE = 0x20000000,GENERIC_ALL = 0x10000000,};
enum MACRO_HRESULT {E_UNEXPECTED = 0x8000FFFF,E_NOTIMPL = 0x80004001,E_OUTOFMEMORY = 0x8007000E,E_INVALIDARG = 0x80070057,E_NOINTERFACE = 0x80004002,E_POINTER = 0x80004003,E_HANDLE = 0x80070006,E_ABORT = 0x80004004,E_FAIL = 0x80004005,E_ACCESSDENIED = 0x80070005,E_PENDING = 0x8000000A,CO_E_INIT_TLS = 0x80004006,CO_E_INIT_SHARED_ALLOCATOR = 0x80004007,CO_E_INIT_MEMORY_ALLOCATOR = 0x80004008,CO_E_INIT_CLASS_CACHE = 0x80004009,CO_E_INIT_RPC_CHANNEL = 0x8000400A,CO_E_INIT_TLS_SET_CHANNEL_CONTROL = 0x8000400B,CO_E_INIT_TLS_CHANNEL_CONTROL = 0x8000400C,CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = 0x8000400D,CO_E_INIT_SCM_MUTEX_EXISTS = 0x8000400E,CO_E_INIT_SCM_FILE_MAPPING_EXISTS = 0x8000400F,CO_E_INIT_SCM_MAP_VIEW_OF_FILE = 0x80004010,CO_E_INIT_SCM_EXEC_FAILURE = 0x80004011,CO_E_INIT_ONLY_SINGLE_THREADED = 0x80004012,CO_E_CANT_REMOTE = 0x80004013,CO_E_BAD_SERVER_NAME = 0x80004014,CO_E_WRONG_SERVER_IDENTITY = 0x80004015,CO_E_OLE1DDE_DISABLED = 0x80004016,CO_E_RUNAS_SYNTAX = 0x80004017,CO_E_CREATEPROCESS_FAILURE = 0x80004018,CO_E_RUNAS_CREATEPROCESS_FAILURE = 0x80004019,CO_E_RUNAS_LOGON_FAILURE = 0x8000401A,CO_E_LAUNCH_PERMSSION_DENIED = 0x8000401B,CO_E_START_SERVICE_FAILURE = 0x8000401C,CO_E_REMOTE_COMMUNICATION_FAILURE = 0x8000401D,CO_E_SERVER_START_TIMEOUT = 0x8000401E,CO_E_CLSREG_INCONSISTENT = 0x8000401F,CO_E_IIDREG_INCONSISTENT = 0x80004020,CO_E_NOT_SUPPORTED = 0x80004021,CO_E_RELOAD_DLL = 0x80004022,CO_E_MSI_ERROR = 0x80004023,CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = 0x80004024,CO_E_SERVER_PAUSED = 0x80004025,CO_E_SERVER_NOT_PAUSED = 0x80004026,CO_E_CLASS_DISABLED = 0x80004027,CO_E_CLRNOTAVAILABLE = 0x80004028,CO_E_ASYNC_WORK_REJECTED = 0x80004029,CO_E_SERVER_INIT_TIMEOUT = 0x8000402A,CO_E_NO_SECCTX_IN_ACTIVATE = 0x8000402B,CO_E_TRACKER_CONFIG = 0x80004030,CO_E_THREADPOOL_CONFIG = 0x80004031,CO_E_SXS_CONFIG = 0x80004032,CO_E_MALFORMED_SPN = 0x80004033,OLE_E_OLEVERB = 0x80040000,OLE_E_ADVF = 0x80040001,OLE_E_ENUM_NOMORE = 0x80040002,OLE_E_ADVISENOTSUPPORTED = 0x80040003,OLE_E_NOCONNECTION = 0x80040004,OLE_E_NOTRUNNING = 0x80040005,OLE_E_NOCACHE = 0x80040006,OLE_E_BLANK = 0x80040007,OLE_E_CLASSDIFF = 0x80040008,OLE_E_CANT_GETMONIKER = 0x80040009,OLE_E_CANT_BINDTOSOURCE = 0x8004000A,OLE_E_STATIC = 0x8004000B,OLE_E_PROMPTSAVECANCELLED = 0x8004000C,OLE_E_INVALIDRECT = 0x8004000D,OLE_E_WRONGCOMPOBJ = 0x8004000E,OLE_E_INVALIDHWND = 0x8004000F,OLE_E_NOT_INPLACEACTIVE = 0x80040010,OLE_E_CANTCONVERT = 0x80040011,OLE_E_NOSTORAGE = 0x80040012,DV_E_FORMATETC = 0x80040064,DV_E_DVTARGETDEVICE = 0x80040065,DV_E_STGMEDIUM = 0x80040066,DV_E_STATDATA = 0x80040067,DV_E_LINDEX = 0x80040068,DV_E_TYMED = 0x80040069,DV_E_CLIPFORMAT = 0x8004006A,DV_E_DVASPECT = 0x8004006B,DV_E_DVTARGETDEVICE_SIZE = 0x8004006C,DV_E_NOIVIEWOBJECT = 0x8004006D,DRAGDROP_E_NOTREGISTERED = 0x80040100,DRAGDROP_E_ALREADYREGISTERED = 0x80040101,DRAGDROP_E_INVALIDHWND = 0x80040102,CLASS_E_NOAGGREGATION = 0x80040110,CLASS_E_CLASSNOTAVAILABLE = 0x80040111,CLASS_E_NOTLICENSED = 0x80040112,VIEW_E_DRAW = 0x80040140,REGDB_E_READREGDB = 0x80040150,REGDB_E_WRITEREGDB = 0x80040151,REGDB_E_KEYMISSING = 0x80040152,REGDB_E_INVALIDVALUE = 0x80040153,REGDB_E_CLASSNOTREG = 0x80040154,REGDB_E_IIDNOTREG = 0x80040155,REGDB_E_BADTHREADINGMODEL = 0x80040156,CAT_E_CATIDNOEXIST = 0x80040160,CAT_E_NODESCRIPTION = 0x80040161,CS_E_PACKAGE_NOTFOUND = 0x80040164,CS_E_NOT_DELETABLE = 0x80040165,CS_E_CLASS_NOTFOUND = 0x80040166,CS_E_INVALID_VERSION = 0x80040167,CS_E_NO_CLASSSTORE = 0x80040168,CS_E_OBJECT_NOTFOUND = 0x80040169,CS_E_OBJECT_ALREADY_EXISTS = 0x8004016A,CS_E_INVALID_PATH = 0x8004016B,CS_E_NETWORK_ERROR = 0x8004016C,CS_E_ADMIN_LIMIT_EXCEEDED = 0x8004016D,CS_E_SCHEMA_MISMATCH = 0x8004016E,CS_E_INTERNAL_ERROR = 0x8004016F,CACHE_E_NOCACHE_UPDATED = 0x80040170,OLEOBJ_E_NOVERBS = 0x80040180,OLEOBJ_E_INVALIDVERB = 0x80040181,INPLACE_E_NOTUNDOABLE = 0x800401A0,INPLACE_E_NOTOOLSPACE = 0x800401A1,CONVERT10_E_OLESTREAM_GET = 0x800401C0,CONVERT10_E_OLESTREAM_PUT = 0x800401C1,CONVERT10_E_OLESTREAM_FMT = 0x800401C2,CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = 0x800401C3,CONVERT10_E_STG_FMT = 0x800401C4,CONVERT10_E_STG_NO_STD_STREAM = 0x800401C5,CONVERT10_E_STG_DIB_TO_BITMAP = 0x800401C6,CLIPBRD_E_CANT_OPEN = 0x800401D0,CLIPBRD_E_CANT_EMPTY = 0x800401D1,CLIPBRD_E_CANT_SET = 0x800401D2,CLIPBRD_E_BAD_DATA = 0x800401D3,CLIPBRD_E_CANT_CLOSE = 0x800401D4,MK_E_CONNECTMANUALLY = 0x800401E0,MK_E_EXCEEDEDDEADLINE = 0x800401E1,MK_E_NEEDGENERIC = 0x800401E2,MK_E_UNAVAILABLE = 0x800401E3,MK_E_SYNTAX = 0x800401E4,MK_E_NOOBJECT = 0x800401E5,MK_E_INVALIDEXTENSION = 0x800401E6,MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 0x800401E7,MK_E_NOTBINDABLE = 0x800401E8,MK_E_NOTBOUND = 0x800401E9,MK_E_CANTOPENFILE = 0x800401EA,MK_E_MUSTBOTHERUSER = 0x800401EB,MK_E_NOINVERSE = 0x800401EC,MK_E_NOSTORAGE = 0x800401ED,MK_E_NOPREFIX = 0x800401EE,MK_E_ENUMERATION_FAILED = 0x800401EF,CO_E_NOTINITIALIZED = 0x800401F0,CO_E_ALREADYINITIALIZED = 0x800401F1,CO_E_CANTDETERMINECLASS = 0x800401F2,CO_E_CLASSSTRING = 0x800401F3,CO_E_IIDSTRING = 0x800401F4,CO_E_APPNOTFOUND = 0x800401F5,CO_E_APPSINGLEUSE = 0x800401F6,CO_E_ERRORINAPP = 0x800401F7,CO_E_DLLNOTFOUND = 0x800401F8,CO_E_ERRORINDLL = 0x800401F9,CO_E_WRONGOSFORAPP = 0x800401FA,CO_E_OBJNOTREG = 0x800401FB,CO_E_OBJISREG = 0x800401FC,CO_E_OBJNOTCONNECTED = 0x800401FD,CO_E_APPDIDNTREG = 0x800401FE,CO_E_RELEASED = 0x800401FF,EVENT_S_SOME_SUBSCRIBERS_FAILED = 0x40200,EVENT_E_ALL_SUBSCRIBERS_FAILED = 0x80040201,EVENT_S_NOSUBSCRIBERS = 0x40202,EVENT_E_QUERYSYNTAX = 0x80040203,EVENT_E_QUERYFIELD = 0x80040204,EVENT_E_INTERNALEXCEPTION = 0x80040205,EVENT_E_INTERNALERROR = 0x80040206,EVENT_E_INVALID_PER_USER_SID = 0x80040207,EVENT_E_USER_EXCEPTION = 0x80040208,EVENT_E_TOO_MANY_METHODS = 0x80040209,EVENT_E_MISSING_EVENTCLASS = 0x8004020A,EVENT_E_NOT_ALL_REMOVED = 0x8004020B,EVENT_E_COMPLUS_NOT_INSTALLED = 0x8004020C,EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = 0x8004020D,EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = 0x8004020E,EVENT_E_INVALID_EVENT_CLASS_PARTITION = 0x8004020F,EVENT_E_PER_USER_SID_NOT_LOGGED_ON = 0x80040210,XACT_E_ALREADYOTHERSINGLEPHASE = 0x8004D000,XACT_E_CANTRETAIN = 0x8004D001,XACT_E_COMMITFAILED = 0x8004D002,XACT_E_COMMITPREVENTED = 0x8004D003,XACT_E_HEURISTICABORT = 0x8004D004,XACT_E_HEURISTICCOMMIT = 0x8004D005,XACT_E_HEURISTICDAMAGE = 0x8004D006,XACT_E_HEURISTICDANGER = 0x8004D007,XACT_E_ISOLATIONLEVEL = 0x8004D008,XACT_E_NOASYNC = 0x8004D009,XACT_E_NOENLIST = 0x8004D00A,XACT_E_NOISORETAIN = 0x8004D00B,XACT_E_NORESOURCE = 0x8004D00C,XACT_E_NOTCURRENT = 0x8004D00D,XACT_E_NOTRANSACTION = 0x8004D00E,XACT_E_NOTSUPPORTED = 0x8004D00F,XACT_E_UNKNOWNRMGRID = 0x8004D010,XACT_E_WRONGSTATE = 0x8004D011,XACT_E_WRONGUOW = 0x8004D012,XACT_E_XTIONEXISTS = 0x8004D013,XACT_E_NOIMPORTOBJECT = 0x8004D014,XACT_E_INVALIDCOOKIE = 0x8004D015,XACT_E_INDOUBT = 0x8004D016,XACT_E_NOTIMEOUT = 0x8004D017,XACT_E_ALREADYINPROGRESS = 0x8004D018,XACT_E_ABORTED = 0x8004D019,XACT_E_LOGFULL = 0x8004D01A,XACT_E_TMNOTAVAILABLE = 0x8004D01B,XACT_E_CONNECTION_DOWN = 0x8004D01C,XACT_E_CONNECTION_DENIED = 0x8004D01D,XACT_E_REENLISTTIMEOUT = 0x8004D01E,XACT_E_TIP_CONNECT_FAILED = 0x8004D01F,XACT_E_TIP_PROTOCOL_ERROR = 0x8004D020,XACT_E_TIP_PULL_FAILED = 0x8004D021,XACT_E_DEST_TMNOTAVAILABLE = 0x8004D022,XACT_E_TIP_DISABLED = 0x8004D023,XACT_E_NETWORK_TX_DISABLED = 0x8004D024,XACT_E_PARTNER_NETWORK_TX_DISABLED = 0x8004D025,XACT_E_XA_TX_DISABLED = 0x8004D026,XACT_E_UNABLE_TO_READ_DTC_CONFIG = 0x8004D027,XACT_E_UNABLE_TO_LOAD_DTC_PROXY = 0x8004D028,XACT_E_ABORTING = 0x8004D029,XACT_E_CLERKNOTFOUND = 0x8004D080,XACT_E_CLERKEXISTS = 0x8004D081,XACT_E_RECOVERYINPROGRESS = 0x8004D082,XACT_E_TRANSACTIONCLOSED = 0x8004D083,XACT_E_INVALIDLSN = 0x8004D084,XACT_E_REPLAYREQUEST = 0x8004D085,XACT_S_ASYNC = 0x4D000,XACT_S_DEFECT = 0x4D001,XACT_S_READONLY = 0x4D002,XACT_S_SOMENORETAIN = 0x4D003,XACT_S_OKINFORM = 0x4D004,XACT_S_MADECHANGESCONTENT = 0x4D005,XACT_S_MADECHANGESINFORM = 0x4D006,XACT_S_ALLNORETAIN = 0x4D007,XACT_S_ABORTING = 0x4D008,XACT_S_SINGLEPHASE = 0x4D009,XACT_S_LOCALLY_OK = 0x4D00A,XACT_S_LASTRESOURCEMANAGER = 0x4D010,CONTEXT_E_ABORTED = 0x8004E002,CONTEXT_E_ABORTING = 0x8004E003,CONTEXT_E_NOCONTEXT = 0x8004E004,CONTEXT_E_SYNCH_TIMEOUT = 0x8004E006,CONTEXT_E_OLDREF = 0x8004E007,CONTEXT_E_ROLENOTFOUND = 0x8004E00C,CONTEXT_E_TMNOTAVAILABLE = 0x8004E00F,CO_E_ACTIVATIONFAILED = 0x8004E021,CO_E_ACTIVATIONFAILED_EVENTLOGGED = 0x8004E022,CO_E_ACTIVATIONFAILED_CATALOGERROR = 0x8004E023,CO_E_ACTIVATIONFAILED_TIMEOUT = 0x8004E024,CO_E_INITIALIZATIONFAILED = 0x8004E025,CONTEXT_E_NOJIT = 0x8004E026,CONTEXT_E_NOTRANSACTION = 0x8004E027,CO_E_THREADINGMODEL_CHANGED = 0x8004E028,CO_E_NOIISINTRINSICS = 0x8004E029,CO_E_NOCOOKIES = 0x8004E02A,CO_E_DBERROR = 0x8004E02B,CO_E_NOTPOOLED = 0x8004E02C,CO_E_NOTCONSTRUCTED = 0x8004E02D,CO_E_NOSYNCHRONIZATION = 0x8004E02E,CO_E_ISOLEVELMISMATCH = 0x8004E02F,OLE_S_USEREG = 0x40000,OLE_S_STATIC = 0x40001,OLE_S_MAC_CLIPFORMAT = 0x40002,DRAGDROP_S_DROP = 0x40100,DRAGDROP_S_CANCEL = 0x40101,DRAGDROP_S_USEDEFAULTCURSORS = 0x40102,DATA_S_SAMEFORMATETC = 0x40130,VIEW_S_ALREADY_FROZEN = 0x40140,CACHE_S_FORMATETC_NOTSUPPORTED = 0x40170,CACHE_S_SAMECACHE = 0x40171,CACHE_S_SOMECACHES_NOTUPDATED = 0x40172,OLEOBJ_S_INVALIDVERB = 0x40180,OLEOBJ_S_CANNOT_DOVERB_NOW = 0x40181,OLEOBJ_S_INVALIDHWND = 0x40182,INPLACE_S_TRUNCATED = 0x401A0,CONVERT10_S_NO_PRESENTATION = 0x401C0,MK_S_REDUCED_TO_SELF = 0x401E2,MK_S_ME = 0x401E4,MK_S_HIM = 0x401E5,MK_S_US = 0x401E6,MK_S_MONIKERALREADYREGISTERED = 0x401E7,SCHED_S_TASK_READY = 0x41300,SCHED_S_TASK_RUNNING = 0x41301,SCHED_S_TASK_DISABLED = 0x41302,SCHED_S_TASK_HAS_NOT_RUN = 0x41303,SCHED_S_TASK_NO_MORE_RUNS = 0x41304,SCHED_S_TASK_NOT_SCHEDULED = 0x41305,SCHED_S_TASK_TERMINATED = 0x41306,SCHED_S_TASK_NO_VALID_TRIGGERS = 0x41307,SCHED_S_EVENT_TRIGGER = 0x41308,SCHED_E_TRIGGER_NOT_FOUND = 0x80041309,SCHED_E_TASK_NOT_READY = 0x8004130A,SCHED_E_TASK_NOT_RUNNING = 0x8004130B,SCHED_E_SERVICE_NOT_INSTALLED = 0x8004130C,SCHED_E_CANNOT_OPEN_TASK = 0x8004130D,SCHED_E_INVALID_TASK = 0x8004130E,SCHED_E_ACCOUNT_INFORMATION_NOT_SET = 0x8004130F,SCHED_E_ACCOUNT_NAME_NOT_FOUND = 0x80041310,SCHED_E_ACCOUNT_DBASE_CORRUPT = 0x80041311,SCHED_E_NO_SECURITY_SERVICES = 0x80041312,SCHED_E_UNKNOWN_OBJECT_VERSION = 0x80041313,SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = 0x80041314,SCHED_E_SERVICE_NOT_RUNNING = 0x80041315,CO_E_CLASS_CREATE_FAILED = 0x80080001,CO_E_SCM_ERROR = 0x80080002,CO_E_SCM_RPC_FAILURE = 0x80080003,CO_E_BAD_PATH = 0x80080004,CO_E_SERVER_EXEC_FAILURE = 0x80080005,CO_E_OBJSRV_RPC_FAILURE = 0x80080006,MK_E_NO_NORMALIZED = 0x80080007,CO_E_SERVER_STOPPING = 0x80080008,MEM_E_INVALID_ROOT = 0x80080009,MEM_E_INVALID_LINK = 0x80080010,MEM_E_INVALID_SIZE = 0x80080011,CO_S_NOTALLINTERFACES = 0x80012,CO_S_MACHINENAMENOTFOUND = 0x80013,DISP_E_UNKNOWNINTERFACE = 0x80020001,DISP_E_MEMBERNOTFOUND = 0x80020003,DISP_E_PARAMNOTFOUND = 0x80020004,DISP_E_TYPEMISMATCH = 0x80020005,DISP_E_UNKNOWNNAME = 0x80020006,DISP_E_NONAMEDARGS = 0x80020007,DISP_E_BADVARTYPE = 0x80020008,DISP_E_EXCEPTION = 0x80020009,DISP_E_OVERFLOW = 0x8002000A,DISP_E_BADINDEX = 0x8002000B,DISP_E_UNKNOWNLCID = 0x8002000C,DISP_E_ARRAYISLOCKED = 0x8002000D,DISP_E_BADPARAMCOUNT = 0x8002000E,DISP_E_PARAMNOTOPTIONAL = 0x8002000F,DISP_E_BADCALLEE = 0x80020010,DISP_E_NOTACOLLECTION = 0x80020011,DISP_E_DIVBYZERO = 0x80020012,DISP_E_BUFFERTOOSMALL = 0x80020013,TYPE_E_BUFFERTOOSMALL = 0x80028016,TYPE_E_FIELDNOTFOUND = 0x80028017,TYPE_E_INVDATAREAD = 0x80028018,TYPE_E_UNSUPFORMAT = 0x80028019,TYPE_E_REGISTRYACCESS = 0x8002801C,TYPE_E_LIBNOTREGISTERED = 0x8002801D,TYPE_E_UNDEFINEDTYPE = 0x80028027,TYPE_E_QUALIFIEDNAMEDISALLOWED = 0x80028028,TYPE_E_INVALIDSTATE = 0x80028029,TYPE_E_WRONGTYPEKIND = 0x8002802A,TYPE_E_ELEMENTNOTFOUND = 0x8002802B,TYPE_E_AMBIGUOUSNAME = 0x8002802C,TYPE_E_NAMECONFLICT = 0x8002802D,TYPE_E_UNKNOWNLCID = 0x8002802E,TYPE_E_DLLFUNCTIONNOTFOUND = 0x8002802F,TYPE_E_BADMODULEKIND = 0x800288BD,TYPE_E_SIZETOOBIG = 0x800288C5,TYPE_E_DUPLICATEID = 0x800288C6,TYPE_E_INVALIDID = 0x800288CF,TYPE_E_TYPEMISMATCH = 0x80028CA0,TYPE_E_OUTOFBOUNDS = 0x80028CA1,TYPE_E_IOERROR = 0x80028CA2,TYPE_E_CANTCREATETMPFILE = 0x80028CA3,TYPE_E_CANTLOADLIBRARY = 0x80029C4A,TYPE_E_INCONSISTENTPROPFUNCS = 0x80029C83,TYPE_E_CIRCULARTYPE = 0x80029C84,STG_E_INVALIDFUNCTION = 0x80030001,STG_E_FILENOTFOUND = 0x80030002,STG_E_PATHNOTFOUND = 0x80030003,STG_E_TOOMANYOPENFILES = 0x80030004,STG_E_ACCESSDENIED = 0x80030005,STG_E_INVALIDHANDLE = 0x80030006,STG_E_INSUFFICIENTMEMORY = 0x80030008,STG_E_INVALIDPOINTER = 0x80030009,STG_E_NOMOREFILES = 0x80030012,STG_E_DISKISWRITEPROTECTED = 0x80030013,STG_E_SEEKERROR = 0x80030019,STG_E_WRITEFAULT = 0x8003001D,STG_E_READFAULT = 0x8003001E,STG_E_SHAREVIOLATION = 0x80030020,STG_E_LOCKVIOLATION = 0x80030021,STG_E_FILEALREADYEXISTS = 0x80030050,STG_E_INVALIDPARAMETER = 0x80030057,STG_E_MEDIUMFULL = 0x80030070,STG_E_PROPSETMISMATCHED = 0x800300F0,STG_E_ABNORMALAPIEXIT = 0x800300FA,STG_E_INVALIDHEADER = 0x800300FB,STG_E_INVALIDNAME = 0x800300FC,STG_E_UNKNOWN = 0x800300FD,STG_E_UNIMPLEMENTEDFUNCTION = 0x800300FE,STG_E_INVALIDFLAG = 0x800300FF,STG_E_INUSE = 0x80030100,STG_E_NOTCURRENT = 0x80030101,STG_E_REVERTED = 0x80030102,STG_E_CANTSAVE = 0x80030103,STG_E_OLDFORMAT = 0x80030104,STG_E_OLDDLL = 0x80030105,STG_E_SHAREREQUIRED = 0x80030106,STG_E_NOTFILEBASEDSTORAGE = 0x80030107,STG_E_EXTANTMARSHALLINGS = 0x80030108,STG_E_DOCFILECORRUPT = 0x80030109,STG_E_BADBASEADDRESS = 0x80030110,STG_E_DOCFILETOOLARGE = 0x80030111,STG_E_NOTSIMPLEFORMAT = 0x80030112,STG_E_INCOMPLETE = 0x80030201,STG_E_TERMINATED = 0x80030202,STG_S_CONVERTED = 0x30200,STG_S_BLOCK = 0x30201,STG_S_RETRYNOW = 0x30202,STG_S_MONITORING = 0x30203,STG_S_MULTIPLEOPENS = 0x30204,STG_S_CONSOLIDATIONFAILED = 0x30205,STG_S_CANNOTCONSOLIDATE = 0x30206,STG_E_STATUS_COPY_PROTECTION_FAILURE = 0x80030305,STG_E_CSS_AUTHENTICATION_FAILURE = 0x80030306,STG_E_CSS_KEY_NOT_PRESENT = 0x80030307,STG_E_CSS_KEY_NOT_ESTABLISHED = 0x80030308,STG_E_CSS_SCRAMBLED_SECTOR = 0x80030309,STG_E_CSS_REGION_MISMATCH = 0x8003030A,STG_E_RESETS_EXHAUSTED = 0x8003030B,RPC_E_CALL_REJECTED = 0x80010001,RPC_E_CALL_CANCELED = 0x80010002,RPC_E_CANTPOST_INSENDCALL = 0x80010003,RPC_E_CANTCALLOUT_INASYNCCALL = 0x80010004,RPC_E_CANTCALLOUT_INEXTERNALCALL = 0x80010005,RPC_E_CONNECTION_TERMINATED = 0x80010006,RPC_E_SERVER_DIED = 0x80010007,RPC_E_CLIENT_DIED = 0x80010008,RPC_E_INVALID_DATAPACKET = 0x80010009,RPC_E_CANTTRANSMIT_CALL = 0x8001000A,RPC_E_CLIENT_CANTMARSHAL_DATA = 0x8001000B,RPC_E_CLIENT_CANTUNMARSHAL_DATA = 0x8001000C,RPC_E_SERVER_CANTMARSHAL_DATA = 0x8001000D,RPC_E_SERVER_CANTUNMARSHAL_DATA = 0x8001000E,RPC_E_INVALID_DATA = 0x8001000F,RPC_E_INVALID_PARAMETER = 0x80010010,RPC_E_CANTCALLOUT_AGAIN = 0x80010011,RPC_E_SERVER_DIED_DNE = 0x80010012,RPC_E_SYS_CALL_FAILED = 0x80010100,RPC_E_OUT_OF_RESOURCES = 0x80010101,RPC_E_ATTEMPTED_MULTITHREAD = 0x80010102,RPC_E_NOT_REGISTERED = 0x80010103,RPC_E_FAULT = 0x80010104,RPC_E_SERVERFAULT = 0x80010105,RPC_E_CHANGED_MODE = 0x80010106,RPC_E_INVALIDMETHOD = 0x80010107,RPC_E_DISCONNECTED = 0x80010108,RPC_E_RETRY = 0x80010109,RPC_E_SERVERCALL_RETRYLATER = 0x8001010A,RPC_E_SERVERCALL_REJECTED = 0x8001010B,RPC_E_INVALID_CALLDATA = 0x8001010C,RPC_E_CANTCALLOUT_ININPUTSYNCCALL = 0x8001010D,RPC_E_WRONG_THREAD = 0x8001010E,RPC_E_THREAD_NOT_INIT = 0x8001010F,RPC_E_VERSION_MISMATCH = 0x80010110,RPC_E_INVALID_HEADER = 0x80010111,RPC_E_INVALID_EXTENSION = 0x80010112,RPC_E_INVALID_IPID = 0x80010113,RPC_E_INVALID_OBJECT = 0x80010114,RPC_S_CALLPENDING = 0x80010115,RPC_S_WAITONTIMER = 0x80010116,RPC_E_CALL_COMPLETE = 0x80010117,RPC_E_UNSECURE_CALL = 0x80010118,RPC_E_TOO_LATE = 0x80010119,RPC_E_NO_GOOD_SECURITY_PACKAGES = 0x8001011A,RPC_E_ACCESS_DENIED = 0x8001011B,RPC_E_REMOTE_DISABLED = 0x8001011C,RPC_E_INVALID_OBJREF = 0x8001011D,RPC_E_NO_CONTEXT = 0x8001011E,RPC_E_TIMEOUT = 0x8001011F,RPC_E_NO_SYNC = 0x80010120,RPC_E_FULLSIC_REQUIRED = 0x80010121,RPC_E_INVALID_STD_NAME = 0x80010122,CO_E_FAILEDTOIMPERSONATE = 0x80010123,CO_E_FAILEDTOGETSECCTX = 0x80010124,CO_E_FAILEDTOOPENTHREADTOKEN = 0x80010125,CO_E_FAILEDTOGETTOKENINFO = 0x80010126,CO_E_TRUSTEEDOESNTMATCHCLIENT = 0x80010127,CO_E_FAILEDTOQUERYCLIENTBLANKET = 0x80010128,CO_E_FAILEDTOSETDACL = 0x80010129,CO_E_ACCESSCHECKFAILED = 0x8001012A,CO_E_NETACCESSAPIFAILED = 0x8001012B,CO_E_WRONGTRUSTEENAMESYNTAX = 0x8001012C,CO_E_INVALIDSID = 0x8001012D,CO_E_CONVERSIONFAILED = 0x8001012E,CO_E_NOMATCHINGSIDFOUND = 0x8001012F,CO_E_LOOKUPACCSIDFAILED = 0x80010130,CO_E_NOMATCHINGNAMEFOUND = 0x80010131,CO_E_LOOKUPACCNAMEFAILED = 0x80010132,CO_E_SETSERLHNDLFAILED = 0x80010133,CO_E_FAILEDTOGETWINDIR = 0x80010134,CO_E_PATHTOOLONG = 0x80010135,CO_E_FAILEDTOGENUUID = 0x80010136,CO_E_FAILEDTOCREATEFILE = 0x80010137,CO_E_FAILEDTOCLOSEHANDLE = 0x80010138,CO_E_EXCEEDSYSACLLIMIT = 0x80010139,CO_E_ACESINWRONGORDER = 0x8001013A,CO_E_INCOMPATIBLESTREAMVERSION = 0x8001013B,CO_E_FAILEDTOOPENPROCESSTOKEN = 0x8001013C,CO_E_DECODEFAILED = 0x8001013D,CO_E_ACNOTINITIALIZED = 0x8001013F,CO_E_CANCEL_DISABLED = 0x80010140,RPC_E_UNEXPECTED = 0x8001FFFF,ERROR_AUDITING_DISABLED = 0xC0090001,ERROR_ALL_SIDS_FILTERED = 0xC0090002,NTE_BAD_UID = 0x80090001,NTE_BAD_HASH = 0x80090002,NTE_BAD_KEY = 0x80090003,NTE_BAD_LEN = 0x80090004,NTE_BAD_DATA = 0x80090005,NTE_BAD_SIGNATURE = 0x80090006,NTE_BAD_VER = 0x80090007,NTE_BAD_ALGID = 0x80090008,NTE_BAD_FLAGS = 0x80090009,NTE_BAD_TYPE = 0x8009000A,NTE_BAD_KEY_STATE = 0x8009000B,NTE_BAD_HASH_STATE = 0x8009000C,NTE_NO_KEY = 0x8009000D,NTE_NO_MEMORY = 0x8009000E,NTE_EXISTS = 0x8009000F,NTE_PERM = 0x80090010,NTE_NOT_FOUND = 0x80090011,NTE_DOUBLE_ENCRYPT = 0x80090012,NTE_BAD_PROVIDER = 0x80090013,NTE_BAD_PROV_TYPE = 0x80090014,NTE_BAD_PUBLIC_KEY = 0x80090015,NTE_BAD_KEYSET = 0x80090016,NTE_PROV_TYPE_NOT_DEF = 0x80090017,NTE_PROV_TYPE_ENTRY_BAD = 0x80090018,NTE_KEYSET_NOT_DEF = 0x80090019,NTE_KEYSET_ENTRY_BAD = 0x8009001A,NTE_PROV_TYPE_NO_MATCH = 0x8009001B,NTE_SIGNATURE_FILE_BAD = 0x8009001C,NTE_PROVIDER_DLL_FAIL = 0x8009001D,NTE_PROV_DLL_NOT_FOUND = 0x8009001E,NTE_BAD_KEYSET_PARAM = 0x8009001F,NTE_FAIL = 0x80090020,NTE_SYS_ERR = 0x80090021,NTE_SILENT_CONTEXT = 0x80090022,NTE_TOKEN_KEYSET_STORAGE_FULL = 0x80090023,NTE_TEMPORARY_PROFILE = 0x80090024,NTE_FIXEDPARAMETER = 0x80090025,SEC_E_INSUFFICIENT_MEMORY = 0x80090300,SEC_E_INVALID_HANDLE = 0x80090301,SEC_E_UNSUPPORTED_FUNCTION = 0x80090302,SEC_E_TARGET_UNKNOWN = 0x80090303,SEC_E_INTERNAL_ERROR = 0x80090304,SEC_E_SECPKG_NOT_FOUND = 0x80090305,SEC_E_NOT_OWNER = 0x80090306,SEC_E_CANNOT_INSTALL = 0x80090307,SEC_E_INVALID_TOKEN = 0x80090308,SEC_E_CANNOT_PACK = 0x80090309,SEC_E_QOP_NOT_SUPPORTED = 0x8009030A,SEC_E_NO_IMPERSONATION = 0x8009030B,SEC_E_LOGON_DENIED = 0x8009030C,SEC_E_UNKNOWN_CREDENTIALS = 0x8009030D,SEC_E_NO_CREDENTIALS = 0x8009030E,SEC_E_MESSAGE_ALTERED = 0x8009030F,SEC_E_OUT_OF_SEQUENCE = 0x80090310,SEC_E_NO_AUTHENTICATING_AUTHORITY = 0x80090311,SEC_I_CONTINUE_NEEDED = 0x90312,SEC_I_COMPLETE_NEEDED = 0x90313,SEC_I_COMPLETE_AND_CONTINUE = 0x90314,SEC_I_LOCAL_LOGON = 0x90315,SEC_E_BAD_PKGID = 0x80090316,SEC_E_CONTEXT_EXPIRED = 0x80090317,SEC_I_CONTEXT_EXPIRED = 0x90317,SEC_E_INCOMPLETE_MESSAGE = 0x80090318,SEC_E_INCOMPLETE_CREDENTIALS = 0x80090320,SEC_E_BUFFER_TOO_SMALL = 0x80090321,SEC_I_INCOMPLETE_CREDENTIALS = 0x90320,SEC_I_RENEGOTIATE = 0x90321,SEC_E_WRONG_PRINCIPAL = 0x80090322,SEC_I_NO_LSA_CONTEXT = 0x90323,SEC_E_TIME_SKEW = 0x80090324,SEC_E_UNTRUSTED_ROOT = 0x80090325,SEC_E_ILLEGAL_MESSAGE = 0x80090326,SEC_E_CERT_UNKNOWN = 0x80090327,SEC_E_CERT_EXPIRED = 0x80090328,SEC_E_ENCRYPT_FAILURE = 0x80090329,SEC_E_DECRYPT_FAILURE = 0x80090330,SEC_E_ALGORITHM_MISMATCH = 0x80090331,SEC_E_SECURITY_QOS_FAILED = 0x80090332,SEC_E_UNFINISHED_CONTEXT_DELETED = 0x80090333,SEC_E_NO_TGT_REPLY = 0x80090334,SEC_E_NO_IP_ADDRESSES = 0x80090335,SEC_E_WRONG_CREDENTIAL_HANDLE = 0x80090336,SEC_E_CRYPTO_SYSTEM_INVALID = 0x80090337,SEC_E_MAX_REFERRALS_EXCEEDED = 0x80090338,SEC_E_MUST_BE_KDC = 0x80090339,SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = 0x8009033A,SEC_E_TOO_MANY_PRINCIPALS = 0x8009033B,SEC_E_NO_PA_DATA = 0x8009033C,SEC_E_PKINIT_NAME_MISMATCH = 0x8009033D,SEC_E_SMARTCARD_LOGON_REQUIRED = 0x8009033E,SEC_E_SHUTDOWN_IN_PROGRESS = 0x8009033F,SEC_E_KDC_INVALID_REQUEST = 0x80090340,SEC_E_KDC_UNABLE_TO_REFER = 0x80090341,SEC_E_KDC_UNKNOWN_ETYPE = 0x80090342,SEC_E_UNSUPPORTED_PREAUTH = 0x80090343,SEC_E_DELEGATION_REQUIRED = 0x80090345,SEC_E_BAD_BINDINGS = 0x80090346,SEC_E_MULTIPLE_ACCOUNTS = 0x80090347,SEC_E_NO_KERB_KEY = 0x80090348,CRYPT_E_MSG_ERROR = 0x80091001,CRYPT_E_UNKNOWN_ALGO = 0x80091002,CRYPT_E_OID_FORMAT = 0x80091003,CRYPT_E_INVALID_MSG_TYPE = 0x80091004,CRYPT_E_UNEXPECTED_ENCODING = 0x80091005,CRYPT_E_AUTH_ATTR_MISSING = 0x80091006,CRYPT_E_HASH_VALUE = 0x80091007,CRYPT_E_INVALID_INDEX = 0x80091008,CRYPT_E_ALREADY_DECRYPTED = 0x80091009,CRYPT_E_NOT_DECRYPTED = 0x8009100A,CRYPT_E_RECIPIENT_NOT_FOUND = 0x8009100B,CRYPT_E_CONTROL_TYPE = 0x8009100C,CRYPT_E_ISSUER_SERIALNUMBER = 0x8009100D,CRYPT_E_SIGNER_NOT_FOUND = 0x8009100E,CRYPT_E_ATTRIBUTES_MISSING = 0x8009100F,CRYPT_E_STREAM_MSG_NOT_READY = 0x80091010,CRYPT_E_STREAM_INSUFFICIENT_DATA = 0x80091011,CRYPT_I_NEW_PROTECTION_REQUIRED = 0x91012,CRYPT_E_BAD_LEN = 0x80092001,CRYPT_E_BAD_ENCODE = 0x80092002,CRYPT_E_FILE_ERROR = 0x80092003,CRYPT_E_NOT_FOUND = 0x80092004,CRYPT_E_EXISTS = 0x80092005,CRYPT_E_NO_PROVIDER = 0x80092006,CRYPT_E_SELF_SIGNED = 0x80092007,CRYPT_E_DELETED_PREV = 0x80092008,CRYPT_E_NO_MATCH = 0x80092009,CRYPT_E_UNEXPECTED_MSG_TYPE = 0x8009200A,CRYPT_E_NO_KEY_PROPERTY = 0x8009200B,CRYPT_E_NO_DECRYPT_CERT = 0x8009200C,CRYPT_E_BAD_MSG = 0x8009200D,CRYPT_E_NO_SIGNER = 0x8009200E,CRYPT_E_PENDING_CLOSE = 0x8009200F,CRYPT_E_REVOKED = 0x80092010,CRYPT_E_NO_REVOCATION_DLL = 0x80092011,CRYPT_E_NO_REVOCATION_CHECK = 0x80092012,CRYPT_E_REVOCATION_OFFLINE = 0x80092013,CRYPT_E_NOT_IN_REVOCATION_DATABASE = 0x80092014,CRYPT_E_INVALID_NUMERIC_STRING = 0x80092020,CRYPT_E_INVALID_PRINTABLE_STRING = 0x80092021,CRYPT_E_INVALID_IA5_STRING = 0x80092022,CRYPT_E_INVALID_X500_STRING = 0x80092023,CRYPT_E_NOT_CHAR_STRING = 0x80092024,CRYPT_E_FILERESIZED = 0x80092025,CRYPT_E_SECURITY_SETTINGS = 0x80092026,CRYPT_E_NO_VERIFY_USAGE_DLL = 0x80092027,CRYPT_E_NO_VERIFY_USAGE_CHECK = 0x80092028,CRYPT_E_VERIFY_USAGE_OFFLINE = 0x80092029,CRYPT_E_NOT_IN_CTL = 0x8009202A,CRYPT_E_NO_TRUSTED_SIGNER = 0x8009202B,CRYPT_E_MISSING_PUBKEY_PARA = 0x8009202C,CRYPT_E_OSS_ERROR = 0x80093000,OSS_MORE_BUF = 0x80093001,OSS_NEGATIVE_UINTEGER = 0x80093002,OSS_PDU_RANGE = 0x80093003,OSS_MORE_INPUT = 0x80093004,OSS_DATA_ERROR = 0x80093005,OSS_BAD_ARG = 0x80093006,OSS_BAD_VERSION = 0x80093007,OSS_OUT_MEMORY = 0x80093008,OSS_PDU_MISMATCH = 0x80093009,OSS_LIMITED = 0x8009300A,OSS_BAD_PTR = 0x8009300B,OSS_BAD_TIME = 0x8009300C,OSS_INDEFINITE_NOT_SUPPORTED = 0x8009300D,OSS_MEM_ERROR = 0x8009300E,OSS_BAD_TABLE = 0x8009300F,OSS_TOO_LONG = 0x80093010,OSS_CONSTRAINT_VIOLATED = 0x80093011,OSS_FATAL_ERROR = 0x80093012,OSS_ACCESS_SERIALIZATION_ERROR = 0x80093013,OSS_NULL_TBL = 0x80093014,OSS_NULL_FCN = 0x80093015,OSS_BAD_ENCRULES = 0x80093016,OSS_UNAVAIL_ENCRULES = 0x80093017,OSS_CANT_OPEN_TRACE_WINDOW = 0x80093018,OSS_UNIMPLEMENTED = 0x80093019,OSS_OID_DLL_NOT_LINKED = 0x8009301A,OSS_CANT_OPEN_TRACE_FILE = 0x8009301B,OSS_TRACE_FILE_ALREADY_OPEN = 0x8009301C,OSS_TABLE_MISMATCH = 0x8009301D,OSS_TYPE_NOT_SUPPORTED = 0x8009301E,OSS_REAL_DLL_NOT_LINKED = 0x8009301F,OSS_REAL_CODE_NOT_LINKED = 0x80093020,OSS_OUT_OF_RANGE = 0x80093021,OSS_COPIER_DLL_NOT_LINKED = 0x80093022,OSS_CONSTRAINT_DLL_NOT_LINKED = 0x80093023,OSS_COMPARATOR_DLL_NOT_LINKED = 0x80093024,OSS_COMPARATOR_CODE_NOT_LINKED = 0x80093025,OSS_MEM_MGR_DLL_NOT_LINKED = 0x80093026,OSS_PDV_DLL_NOT_LINKED = 0x80093027,OSS_PDV_CODE_NOT_LINKED = 0x80093028,OSS_API_DLL_NOT_LINKED = 0x80093029,OSS_BERDER_DLL_NOT_LINKED = 0x8009302A,OSS_PER_DLL_NOT_LINKED = 0x8009302B,OSS_OPEN_TYPE_ERROR = 0x8009302C,OSS_MUTEX_NOT_CREATED = 0x8009302D,OSS_CANT_CLOSE_TRACE_FILE = 0x8009302E,CRYPT_E_ASN1_ERROR = 0x80093100,CRYPT_E_ASN1_INTERNAL = 0x80093101,CRYPT_E_ASN1_EOD = 0x80093102,CRYPT_E_ASN1_CORRUPT = 0x80093103,CRYPT_E_ASN1_LARGE = 0x80093104,CRYPT_E_ASN1_CONSTRAINT = 0x80093105,CRYPT_E_ASN1_MEMORY = 0x80093106,CRYPT_E_ASN1_OVERFLOW = 0x80093107,CRYPT_E_ASN1_BADPDU = 0x80093108,CRYPT_E_ASN1_BADARGS = 0x80093109,CRYPT_E_ASN1_BADREAL = 0x8009310A,CRYPT_E_ASN1_BADTAG = 0x8009310B,CRYPT_E_ASN1_CHOICE = 0x8009310C,CRYPT_E_ASN1_RULE = 0x8009310D,CRYPT_E_ASN1_UTF8 = 0x8009310E,CRYPT_E_ASN1_PDU_TYPE = 0x80093133,CRYPT_E_ASN1_NYI = 0x80093134,CRYPT_E_ASN1_EXTENDED = 0x80093201,CRYPT_E_ASN1_NOEOD = 0x80093202,CERTSRV_E_BAD_REQUESTSUBJECT = 0x80094001,CERTSRV_E_NO_REQUEST = 0x80094002,CERTSRV_E_BAD_REQUESTSTATUS = 0x80094003,CERTSRV_E_PROPERTY_EMPTY = 0x80094004,CERTSRV_E_INVALID_CA_CERTIFICATE = 0x80094005,CERTSRV_E_SERVER_SUSPENDED = 0x80094006,CERTSRV_E_ENCODING_LENGTH = 0x80094007,CERTSRV_E_ROLECONFLICT = 0x80094008,CERTSRV_E_RESTRICTEDOFFICER = 0x80094009,CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = 0x8009400A,CERTSRV_E_NO_VALID_KRA = 0x8009400B,CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = 0x8009400C,CERTSRV_E_NO_CAADMIN_DEFINED = 0x8009400D,CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = 0x8009400E,CERTSRV_E_NO_DB_SESSIONS = 0x8009400F,CERTSRV_E_ALIGNMENT_FAULT = 0x80094010,CERTSRV_E_ENROLL_DENIED = 0x80094011,CERTSRV_E_TEMPLATE_DENIED = 0x80094012,CERTSRV_E_UNSUPPORTED_CERT_TYPE = 0x80094800,CERTSRV_E_NO_CERT_TYPE = 0x80094801,CERTSRV_E_TEMPLATE_CONFLICT = 0x80094802,CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = 0x80094803,CERTSRV_E_ARCHIVED_KEY_REQUIRED = 0x80094804,CERTSRV_E_SMIME_REQUIRED = 0x80094805,CERTSRV_E_BAD_RENEWAL_SUBJECT = 0x80094806,CERTSRV_E_BAD_TEMPLATE_VERSION = 0x80094807,CERTSRV_E_TEMPLATE_POLICY_REQUIRED = 0x80094808,CERTSRV_E_SIGNATURE_POLICY_REQUIRED = 0x80094809,CERTSRV_E_SIGNATURE_COUNT = 0x8009480A,CERTSRV_E_SIGNATURE_REJECTED = 0x8009480B,CERTSRV_E_ISSUANCE_POLICY_REQUIRED = 0x8009480C,CERTSRV_E_SUBJECT_UPN_REQUIRED = 0x8009480D,CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = 0x8009480E,CERTSRV_E_SUBJECT_DNS_REQUIRED = 0x8009480F,CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = 0x80094810,CERTSRV_E_KEY_LENGTH = 0x80094811,XENROLL_E_KEY_NOT_EXPORTABLE = 0x80095000,XENROLL_E_CANNOT_ADD_ROOT_CERT = 0x80095001,XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = 0x80095002,XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = 0x80095003,XENROLL_E_RESPONSE_KA_HASH_MISMATCH = 0x80095004,XENROLL_E_KEYSPEC_SMIME_MISMATCH = 0x80095005,TRUST_E_SYSTEM_ERROR = 0x80096001,TRUST_E_NO_SIGNER_CERT = 0x80096002,TRUST_E_COUNTER_SIGNER = 0x80096003,TRUST_E_CERT_SIGNATURE = 0x80096004,TRUST_E_TIME_STAMP = 0x80096005,TRUST_E_BAD_DIGEST = 0x80096010,TRUST_E_BASIC_CONSTRAINTS = 0x80096019,TRUST_E_FINANCIAL_CRITERIA = 0x8009601E,MSSIPOTF_E_OUTOFMEMRANGE = 0x80097001,MSSIPOTF_E_CANTGETOBJECT = 0x80097002,MSSIPOTF_E_NOHEADTABLE = 0x80097003,MSSIPOTF_E_BAD_MAGICNUMBER = 0x80097004,MSSIPOTF_E_BAD_OFFSET_TABLE = 0x80097005,MSSIPOTF_E_TABLE_TAGORDER = 0x80097006,MSSIPOTF_E_TABLE_LONGWORD = 0x80097007,MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = 0x80097008,MSSIPOTF_E_TABLES_OVERLAP = 0x80097009,MSSIPOTF_E_TABLE_PADBYTES = 0x8009700A,MSSIPOTF_E_FILETOOSMALL = 0x8009700B,MSSIPOTF_E_TABLE_CHECKSUM = 0x8009700C,MSSIPOTF_E_FILE_CHECKSUM = 0x8009700D,MSSIPOTF_E_FAILED_POLICY = 0x80097010,MSSIPOTF_E_FAILED_HINTS_CHECK = 0x80097011,MSSIPOTF_E_NOT_OPENTYPE = 0x80097012,MSSIPOTF_E_FILE = 0x80097013,MSSIPOTF_E_CRYPT = 0x80097014,MSSIPOTF_E_BADVERSION = 0x80097015,MSSIPOTF_E_DSIG_STRUCTURE = 0x80097016,MSSIPOTF_E_PCONST_CHECK = 0x80097017,MSSIPOTF_E_STRUCTURE = 0x80097018,TRUST_E_PROVIDER_UNKNOWN = 0x800B0001,TRUST_E_ACTION_UNKNOWN = 0x800B0002,TRUST_E_SUBJECT_FORM_UNKNOWN = 0x800B0003,TRUST_E_SUBJECT_NOT_TRUSTED = 0x800B0004,DIGSIG_E_ENCODE = 0x800B0005,DIGSIG_E_DECODE = 0x800B0006,DIGSIG_E_EXTENSIBILITY = 0x800B0007,DIGSIG_E_CRYPTO = 0x800B0008,PERSIST_E_SIZEDEFINITE = 0x800B0009,PERSIST_E_SIZEINDEFINITE = 0x800B000A,PERSIST_E_NOTSELFSIZING = 0x800B000B,TRUST_E_NOSIGNATURE = 0x800B0100,CERT_E_EXPIRED = 0x800B0101,CERT_E_VALIDITYPERIODNESTING = 0x800B0102,CERT_E_ROLE = 0x800B0103,CERT_E_PATHLENCONST = 0x800B0104,CERT_E_CRITICAL = 0x800B0105,CERT_E_PURPOSE = 0x800B0106,CERT_E_ISSUERCHAINING = 0x800B0107,CERT_E_MALFORMED = 0x800B0108,CERT_E_UNTRUSTEDROOT = 0x800B0109,CERT_E_CHAINING = 0x800B010A,TRUST_E_FAIL = 0x800B010B,CERT_E_REVOKED = 0x800B010C,CERT_E_UNTRUSTEDTESTROOT = 0x800B010D,CERT_E_REVOCATION_FAILURE = 0x800B010E,CERT_E_CN_NO_MATCH = 0x800B010F,CERT_E_WRONG_USAGE = 0x800B0110,TRUST_E_EXPLICIT_DISTRUST = 0x800B0111,CERT_E_UNTRUSTEDCA = 0x800B0112,CERT_E_INVALID_POLICY = 0x800B0113,CERT_E_INVALID_NAME = 0x800B0114,SPAPI_E_EXPECTED_SECTION_NAME = 0x800F0000,SPAPI_E_BAD_SECTION_NAME_LINE = 0x800F0001,SPAPI_E_SECTION_NAME_TOO_LONG = 0x800F0002,SPAPI_E_GENERAL_SYNTAX = 0x800F0003,SPAPI_E_WRONG_INF_STYLE = 0x800F0100,SPAPI_E_SECTION_NOT_FOUND = 0x800F0101,SPAPI_E_LINE_NOT_FOUND = 0x800F0102,SPAPI_E_NO_BACKUP = 0x800F0103,SPAPI_E_NO_ASSOCIATED_CLASS = 0x800F0200,SPAPI_E_CLASS_MISMATCH = 0x800F0201,SPAPI_E_DUPLICATE_FOUND = 0x800F0202,SPAPI_E_NO_DRIVER_SELECTED = 0x800F0203,SPAPI_E_KEY_DOES_NOT_EXIST = 0x800F0204,SPAPI_E_INVALID_DEVINST_NAME = 0x800F0205,SPAPI_E_INVALID_CLASS = 0x800F0206,SPAPI_E_DEVINST_ALREADY_EXISTS = 0x800F0207,SPAPI_E_DEVINFO_NOT_REGISTERED = 0x800F0208,SPAPI_E_INVALID_REG_PROPERTY = 0x800F0209,SPAPI_E_NO_INF = 0x800F020A,SPAPI_E_NO_SUCH_DEVINST = 0x800F020B,SPAPI_E_CANT_LOAD_CLASS_ICON = 0x800F020C,SPAPI_E_INVALID_CLASS_INSTALLER = 0x800F020D,SPAPI_E_DI_DO_DEFAULT = 0x800F020E,SPAPI_E_DI_NOFILECOPY = 0x800F020F,SPAPI_E_INVALID_HWPROFILE = 0x800F0210,SPAPI_E_NO_DEVICE_SELECTED = 0x800F0211,SPAPI_E_DEVINFO_LIST_LOCKED = 0x800F0212,SPAPI_E_DEVINFO_DATA_LOCKED = 0x800F0213,SPAPI_E_DI_BAD_PATH = 0x800F0214,SPAPI_E_NO_CLASSINSTALL_PARAMS = 0x800F0215,SPAPI_E_FILEQUEUE_LOCKED = 0x800F0216,SPAPI_E_BAD_SERVICE_INSTALLSECT = 0x800F0217,SPAPI_E_NO_CLASS_DRIVER_LIST = 0x800F0218,SPAPI_E_NO_ASSOCIATED_SERVICE = 0x800F0219,SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = 0x800F021A,SPAPI_E_DEVICE_INTERFACE_ACTIVE = 0x800F021B,SPAPI_E_DEVICE_INTERFACE_REMOVED = 0x800F021C,SPAPI_E_BAD_INTERFACE_INSTALLSECT = 0x800F021D,SPAPI_E_NO_SUCH_INTERFACE_CLASS = 0x800F021E,SPAPI_E_INVALID_REFERENCE_STRING = 0x800F021F,SPAPI_E_INVALID_MACHINENAME = 0x800F0220,SPAPI_E_REMOTE_COMM_FAILURE = 0x800F0221,SPAPI_E_MACHINE_UNAVAILABLE = 0x800F0222,SPAPI_E_NO_CONFIGMGR_SERVICES = 0x800F0223,SPAPI_E_INVALID_PROPPAGE_PROVIDER = 0x800F0224,SPAPI_E_NO_SUCH_DEVICE_INTERFACE = 0x800F0225,SPAPI_E_DI_POSTPROCESSING_REQUIRED = 0x800F0226,SPAPI_E_INVALID_COINSTALLER = 0x800F0227,SPAPI_E_NO_COMPAT_DRIVERS = 0x800F0228,SPAPI_E_NO_DEVICE_ICON = 0x800F0229,SPAPI_E_INVALID_INF_LOGCONFIG = 0x800F022A,SPAPI_E_DI_DONT_INSTALL = 0x800F022B,SPAPI_E_INVALID_FILTER_DRIVER = 0x800F022C,SPAPI_E_NON_WINDOWS_NT_DRIVER = 0x800F022D,SPAPI_E_NON_WINDOWS_DRIVER = 0x800F022E,SPAPI_E_NO_CATALOG_FOR_OEM_INF = 0x800F022F,SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = 0x800F0230,SPAPI_E_NOT_DISABLEABLE = 0x800F0231,SPAPI_E_CANT_REMOVE_DEVINST = 0x800F0232,SPAPI_E_INVALID_TARGET = 0x800F0233,SPAPI_E_DRIVER_NONNATIVE = 0x800F0234,SPAPI_E_IN_WOW64 = 0x800F0235,SPAPI_E_SET_SYSTEM_RESTORE_POINT = 0x800F0236,SPAPI_E_INCORRECTLY_COPIED_INF = 0x800F0237,SPAPI_E_SCE_DISABLED = 0x800F0238,SPAPI_E_ERROR_NOT_INSTALLED = 0x800F1000,SCARD_F_INTERNAL_ERROR = 0x80100001,SCARD_E_CANCELLED = 0x80100002,SCARD_E_INVALID_HANDLE = 0x80100003,SCARD_E_INVALID_PARAMETER = 0x80100004,SCARD_E_INVALID_TARGET = 0x80100005,SCARD_E_NO_MEMORY = 0x80100006,SCARD_F_WAITED_TOO_LONG = 0x80100007,SCARD_E_INSUFFICIENT_BUFFER = 0x80100008,SCARD_E_UNKNOWN_READER = 0x80100009,SCARD_E_TIMEOUT = 0x8010000A,SCARD_E_SHARING_VIOLATION = 0x8010000B,SCARD_E_NO_SMARTCARD = 0x8010000C,SCARD_E_UNKNOWN_CARD = 0x8010000D,SCARD_E_CANT_DISPOSE = 0x8010000E,SCARD_E_PROTO_MISMATCH = 0x8010000F,SCARD_E_NOT_READY = 0x80100010,SCARD_E_INVALID_VALUE = 0x80100011,SCARD_E_SYSTEM_CANCELLED = 0x80100012,SCARD_F_COMM_ERROR = 0x80100013,SCARD_F_UNKNOWN_ERROR = 0x80100014,SCARD_E_INVALID_ATR = 0x80100015,SCARD_E_NOT_TRANSACTED = 0x80100016,SCARD_E_READER_UNAVAILABLE = 0x80100017,SCARD_P_SHUTDOWN = 0x80100018,SCARD_E_PCI_TOO_SMALL = 0x80100019,SCARD_E_READER_UNSUPPORTED = 0x8010001A,SCARD_E_DUPLICATE_READER = 0x8010001B,SCARD_E_CARD_UNSUPPORTED = 0x8010001C,SCARD_E_NO_SERVICE = 0x8010001D,SCARD_E_SERVICE_STOPPED = 0x8010001E,SCARD_E_UNEXPECTED = 0x8010001F,SCARD_E_ICC_INSTALLATION = 0x80100020,SCARD_E_ICC_CREATEORDER = 0x80100021,SCARD_E_UNSUPPORTED_FEATURE = 0x80100022,SCARD_E_DIR_NOT_FOUND = 0x80100023,SCARD_E_FILE_NOT_FOUND = 0x80100024,SCARD_E_NO_DIR = 0x80100025,SCARD_E_NO_FILE = 0x80100026,SCARD_E_NO_ACCESS = 0x80100027,SCARD_E_WRITE_TOO_MANY = 0x80100028,SCARD_E_BAD_SEEK = 0x80100029,SCARD_E_INVALID_CHV = 0x8010002A,SCARD_E_UNKNOWN_RES_MNG = 0x8010002B,SCARD_E_NO_SUCH_CERTIFICATE = 0x8010002C,SCARD_E_CERTIFICATE_UNAVAILABLE = 0x8010002D,SCARD_E_NO_READERS_AVAILABLE = 0x8010002E,SCARD_E_COMM_DATA_LOST = 0x8010002F,SCARD_E_NO_KEY_CONTAINER = 0x80100030,SCARD_W_UNSUPPORTED_CARD = 0x80100065,SCARD_W_UNRESPONSIVE_CARD = 0x80100066,SCARD_W_UNPOWERED_CARD = 0x80100067,SCARD_W_RESET_CARD = 0x80100068,SCARD_W_REMOVED_CARD = 0x80100069,SCARD_W_SECURITY_VIOLATION = 0x8010006A,SCARD_W_WRONG_CHV = 0x8010006B,SCARD_W_CHV_BLOCKED = 0x8010006C,SCARD_W_EOF = 0x8010006D,SCARD_W_CANCELLED_BY_USER = 0x8010006E,SCARD_W_CARD_NOT_AUTHENTICATED = 0x8010006F,COMADMIN_E_OBJECTERRORS = 0x80110401,COMADMIN_E_OBJECTINVALID = 0x80110402,COMADMIN_E_KEYMISSING = 0x80110403,COMADMIN_E_ALREADYINSTALLED = 0x80110404,COMADMIN_E_APP_FILE_WRITEFAIL = 0x80110407,COMADMIN_E_APP_FILE_READFAIL = 0x80110408,COMADMIN_E_APP_FILE_VERSION = 0x80110409,COMADMIN_E_BADPATH = 0x8011040A,COMADMIN_E_APPLICATIONEXISTS = 0x8011040B,COMADMIN_E_ROLEEXISTS = 0x8011040C,COMADMIN_E_CANTCOPYFILE = 0x8011040D,COMADMIN_E_NOUSER = 0x8011040F,COMADMIN_E_INVALIDUSERIDS = 0x80110410,COMADMIN_E_NOREGISTRYCLSID = 0x80110411,COMADMIN_E_BADREGISTRYPROGID = 0x80110412,COMADMIN_E_AUTHENTICATIONLEVEL = 0x80110413,COMADMIN_E_USERPASSWDNOTVALID = 0x80110414,COMADMIN_E_CLSIDORIIDMISMATCH = 0x80110418,COMADMIN_E_REMOTEINTERFACE = 0x80110419,COMADMIN_E_DLLREGISTERSERVER = 0x8011041A,COMADMIN_E_NOSERVERSHARE = 0x8011041B,COMADMIN_E_DLLLOADFAILED = 0x8011041D,COMADMIN_E_BADREGISTRYLIBID = 0x8011041E,COMADMIN_E_APPDIRNOTFOUND = 0x8011041F,COMADMIN_E_REGISTRARFAILED = 0x80110423,COMADMIN_E_COMPFILE_DOESNOTEXIST = 0x80110424,COMADMIN_E_COMPFILE_LOADDLLFAIL = 0x80110425,COMADMIN_E_COMPFILE_GETCLASSOBJ = 0x80110426,COMADMIN_E_COMPFILE_CLASSNOTAVAIL = 0x80110427,COMADMIN_E_COMPFILE_BADTLB = 0x80110428,COMADMIN_E_COMPFILE_NOTINSTALLABLE = 0x80110429,COMADMIN_E_NOTCHANGEABLE = 0x8011042A,COMADMIN_E_NOTDELETEABLE = 0x8011042B,COMADMIN_E_SESSION = 0x8011042C,COMADMIN_E_COMP_MOVE_LOCKED = 0x8011042D,COMADMIN_E_COMP_MOVE_BAD_DEST = 0x8011042E,COMADMIN_E_REGISTERTLB = 0x80110430,COMADMIN_E_SYSTEMAPP = 0x80110433,COMADMIN_E_COMPFILE_NOREGISTRAR = 0x80110434,COMADMIN_E_COREQCOMPINSTALLED = 0x80110435,COMADMIN_E_SERVICENOTINSTALLED = 0x80110436,COMADMIN_E_PROPERTYSAVEFAILED = 0x80110437,COMADMIN_E_OBJECTEXISTS = 0x80110438,COMADMIN_E_COMPONENTEXISTS = 0x80110439,COMADMIN_E_REGFILE_CORRUPT = 0x8011043B,COMADMIN_E_PROPERTY_OVERFLOW = 0x8011043C,COMADMIN_E_NOTINREGISTRY = 0x8011043E,COMADMIN_E_OBJECTNOTPOOLABLE = 0x8011043F,COMADMIN_E_APPLID_MATCHES_CLSID = 0x80110446,COMADMIN_E_ROLE_DOES_NOT_EXIST = 0x80110447,COMADMIN_E_START_APP_NEEDS_COMPONENTS = 0x80110448,COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = 0x80110449,COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = 0x8011044A,COMADMIN_E_CAN_NOT_START_APP = 0x8011044B,COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = 0x8011044C,COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = 0x8011044D,COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = 0x8011044E,COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = 0x8011044F,COMADMIN_E_BASE_PARTITION_ONLY = 0x80110450,COMADMIN_E_START_APP_DISABLED = 0x80110451,COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = 0x80110457,COMADMIN_E_CAT_INVALID_PARTITION_NAME = 0x80110458,COMADMIN_E_CAT_PARTITION_IN_USE = 0x80110459,COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = 0x8011045A,COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = 0x8011045B,COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = 0x8011045C,COMADMIN_E_AMBIGUOUS_PARTITION_NAME = 0x8011045D,COMADMIN_E_REGDB_NOTINITIALIZED = 0x80110472,COMADMIN_E_REGDB_NOTOPEN = 0x80110473,COMADMIN_E_REGDB_SYSTEMERR = 0x80110474,COMADMIN_E_REGDB_ALREADYRUNNING = 0x80110475,COMADMIN_E_MIG_VERSIONNOTSUPPORTED = 0x80110480,COMADMIN_E_MIG_SCHEMANOTFOUND = 0x80110481,COMADMIN_E_CAT_BITNESSMISMATCH = 0x80110482,COMADMIN_E_CAT_UNACCEPTABLEBITNESS = 0x80110483,COMADMIN_E_CAT_WRONGAPPBITNESS = 0x80110484,COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = 0x80110485,COMADMIN_E_CAT_SERVERFAULT = 0x80110486,COMQC_E_APPLICATION_NOT_QUEUED = 0x80110600,COMQC_E_NO_QUEUEABLE_INTERFACES = 0x80110601,COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = 0x80110602,COMQC_E_NO_IPERSISTSTREAM = 0x80110603,COMQC_E_BAD_MESSAGE = 0x80110604,COMQC_E_UNAUTHENTICATED = 0x80110605,COMQC_E_UNTRUSTED_ENQUEUER = 0x80110606,MSDTC_E_DUPLICATE_RESOURCE = 0x80110701,COMADMIN_E_OBJECT_PARENT_MISSING = 0x80110808,COMADMIN_E_OBJECT_DOES_NOT_EXIST = 0x80110809,COMADMIN_E_APP_NOT_RUNNING = 0x8011080A,COMADMIN_E_INVALID_PARTITION = 0x8011080B,COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = 0x8011080D,COMADMIN_E_USER_IN_SET = 0x8011080E,COMADMIN_E_CANTRECYCLELIBRARYAPPS = 0x8011080F,COMADMIN_E_CANTRECYCLESERVICEAPPS = 0x80110811,COMADMIN_E_PROCESSALREADYRECYCLED = 0x80110812,COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = 0x80110813,COMADMIN_E_CANTMAKEINPROCSERVICE = 0x80110814,COMADMIN_E_PROGIDINUSEBYCLSID = 0x80110815,COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = 0x80110816,COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = 0x80110817,COMADMIN_E_PARTITION_ACCESSDENIED = 0x80110818,COMADMIN_E_PARTITION_MSI_ONLY = 0x80110819,COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = 0x8011081A,COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS = 0x8011081B,COMADMIN_E_COMP_MOVE_SOURCE = 0x8011081C,COMADMIN_E_COMP_MOVE_DEST = 0x8011081D,COMADMIN_E_COMP_MOVE_PRIVATE = 0x8011081E,COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = 0x8011081F,COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = 0x80110820,COMADMIN_E_PRIVATE_ACCESSDENIED = 0x80110821,COMADMIN_E_SAFERINVALID = 0x80110822,COMADMIN_E_CAT_DUPLICATE_PARTITION_SET_NAME = 0x80110900,COMADMIN_E_CAT_INVALID_PARTITION_SET_NAME = 0x80110901,MK_S_ASYNCHRONOUS = 0x401E8,INET_E_INVALID_URL = 0x800C0002,INET_E_NO_SESSION = 0x800C0003,INET_E_CANNOT_CONNECT = 0x800C0004,INET_E_RESOURCE_NOT_FOUND = 0x800C0005,INET_E_OBJECT_NOT_FOUND = 0x800C0006,INET_E_DATA_NOT_AVAILABLE = 0x800C0007,INET_E_DOWNLOAD_FAILURE = 0x800C0008,INET_E_AUTHENTICATION_REQUIRED = 0x800C0009,INET_E_NO_VALID_MEDIA = 0x800C000A,INET_E_CONNECTION_TIMEOUT = 0x800C000B,INET_E_INVALID_REQUEST = 0x800C000C,INET_E_UNKNOWN_PROTOCOL = 0x800C000D,INET_E_SECURITY_PROBLEM = 0x800C000E,INET_E_CANNOT_LOAD_DATA = 0x800C000F,INET_E_CANNOT_INSTANTIATE_OBJECT = 0x800C0010,INET_E_REDIRECT_FAILED = 0x800C0014,INET_E_REDIRECT_TO_DIR = 0x800C0015,INET_E_CANNOT_LOCK_REQUEST = 0x800C0016,INET_E_USE_EXTEND_BINDING = 0x800C0017,INET_E_TERMINATED_BIND = 0x800C0018,INET_E_ERROR_FIRST = 0x800C0002,INET_E_CODE_DOWNLOAD_DECLINED = 0x800C0100,INET_E_RESULT_DISPATCHED = 0x800C0200,INET_E_CANNOT_REPLACE_SFP_FILE = 0x800C0300,INET_E_USE_DEFAULT_PROTOCOLHANDLER = 0x800C0011,INET_E_USE_DEFAULT_SETTING = 0x800C0012,INET_E_QUERYOPTION_UNKNOWN = 0x800C0013,INET_E_REDIRECTING = 0x800C0014,E_FILESMISSING = 0x80100003,E_IDENTITIES_DISABLED = 0x80007110,S_IDENTITIES_DISABLED = 0x7110,E_NO_CURRENT_IDENTITY = 0x80007111,E_USER_CANCELLED = 0x80007112,E_PROCESS_CANCELLED_SWITCH = 0x80007113,E_IDENTITY_NOT_FOUND = 0x80007114,E_IDENTITY_EXISTS = 0x80007115,E_IDENTITY_CHANGING = 0x80007116,NOTF_E_NOTIFICATION_NOT_DELIVERED = 0x800C0F00,PST_E_OK = 0x0,PST_E_FAIL = 0x800C0001,PST_E_PROV_DLL_NOT_FOUND = 0x800C0002,PST_E_INVALID_HANDLE = 0x800C0003,PST_E_TYPE_EXISTS = 0x800C0004,PST_E_TYPE_NO_EXISTS = 0x800C0005,PST_E_INVALID_RULESET = 0x800C0006,PST_E_NO_PERMISSIONS = 0x800C0007,PST_E_STORAGE_ERROR = 0x800C0008,PST_E_CALLER_NOT_VERIFIED = 0x800C0009,PST_E_WRONG_PASSWORD = 0x800C000A,PST_E_DISK_IMAGE_MISMATCH = 0x800C000B,PST_E_UNKNOWN_EXCEPTION = 0x800C000D,PST_E_BAD_FLAGS = 0x800C000E,PST_E_ITEM_EXISTS = 0x800C000F,PST_E_ITEM_NO_EXISTS = 0x800C0010,PST_E_SERVICE_UNAVAILABLE = 0x800C0011,PST_E_NOTEMPTY = 0x800C0012,PST_E_INVALID_STRING = 0x800C0013,PST_E_STATE_INVALID = 0x800C0014,PST_E_NOT_OPEN = 0x800C0015,PST_E_ALREADY_OPEN = 0x800C0016,PST_E_NYI = 0x800C0F00,INET_E_AGENT_MAX_SIZE_EXCEEDED = 0x800C0F80,INET_S_AGENT_PART_FAIL = 0xC0F81,INET_E_AGENT_CACHE_SIZE_EXCEEDED = 0x800C0F82,INET_E_AGENT_CONNECTION_FAILED = 0x800C0F83,INET_E_SCHEDULED_UPDATES_DISABLED = 0x800C0F84,INET_E_SCHEDULED_UPDATES_RESTRICTED = 0x800C0F85,INET_E_SCHEDULED_UPDATE_INTERVAL = 0x800C0F86,INET_E_SCHEDULED_EXCLUDE_RANGE = 0x800C0F87,INET_E_AGENT_EXCEEDING_CACHE_SIZE = 0x800C0F90,INET_S_AGENT_INCREASED_CACHE_SIZE = 0xC0F90,VSCAN_E_NOPROVIDERS = 0x800D1001,VSCAN_E_CHECKPARTIAL = 0x800D1002,VSCAN_E_CHECKFAIL = 0x800D1003,VSCAN_E_DELETEFAIL = 0x800D1004,VSE_E_UNSUPPORTEDINPUTTYPE = 0x800D2001,VSE_E_CHECKFAIL = 0x800D2002,};
enum MACRO_HTCLOSE {HTCLOSE = 20,};
enum MACRO_HTERROR {HTERROR = -2,};
enum MACRO_HTMLDLG {HTMLDLG_NOUI = 0x10,HTMLDLG_MODAL = 0x20,HTMLDLG_MODELESS = 0x40,HTMLDLG_PRINT_TEMPLATE = 0x80,HTMLDLG_VERIFY = 0x100,};
enum MACRO_HTRIGHT {HTRIGHT = 11,};
enum MACRO_IDABORT {IDABORT = 3,IDRETRY = 4,};
enum MACRO_IDLFLAG {IDLFLAG_NONE = 0,IDLFLAG_FIN = 1,IDLFLAG_FOUT = 2,IDLFLAG_FLCID = 4,IDLFLAG_FRETVAL = 8,};
enum MACRO_IECMDID {IECMDID_CLEAR_AUTOCOMPLETE_FOR_FORMS = 0,IECMDID_SETID_AUTOCOMPLETE_FOR_FORMS = 1,IECMDID_BEFORENAVIGATE_GETSHELLBROWSE = 2,IECMDID_BEFORENAVIGATE_DOEXTERNALBROWSE = 3,IECMDID_BEFORENAVIGATE_GETIDLIST = 4,IECMDID_ARG_CLEAR_FORMS_ALL = 0,IECMDID_ARG_CLEAR_FORMS_ALL_BUT_PASSWORDS = 1,IECMDID_ARG_CLEAR_FORMS_PASSWORDS_ONLY = 2,};
enum MACRO_IEIFLAG {IEIFLAG_ASYNC = 0x1,IEIFLAG_CACHE = 0x2,IEIFLAG_ASPECT = 0x4,IEIFLAG_OFFLINE = 0x8,IEIFLAG_GLEAM = 0x10,IEIFLAG_SCREEN = 0x20,IEIFLAG_ORIGSIZE = 0x40,};
enum MACRO_IME_ESC {IME_ESC_SETCURSOR = 0x100A,};
enum MACRO_IMGANIM {IMGANIM_ANIMATED = 0x10000000,IMGANIM_MASK = 0x10000000,};
enum MACRO_IMGBITS {IMGBITS_NONE = 0x2000000,IMGBITS_PARTIAL = 0x4000000,IMGBITS_TOTAL = 0x8000000,IMGBITS_MASK = 0xE000000,};
enum MACRO_IMGLOAD {IMGLOAD_NOTLOADED = 0x100000,IMGLOAD_LOADING = 0x200000,IMGLOAD_STOPPED = 0x400000,IMGLOAD_ERROR = 0x800000,IMGLOAD_COMPLETE = 0x1000000,IMGLOAD_MASK = 0x1F00000,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_INHERIT {INHERIT_CALLER_PRIORITY = 0x20000,};
enum MACRO_INPLACE {INPLACE_E_FIRST = 0x800401A0,INPLACE_E_LAST = 0x800401AF,INPLACE_S_FIRST = 0x401A0,INPLACE_S_LAST = 0x401AF,};
enum MACRO_INVALID {INVALID_HANDLE_VALUE = -1,INVALID_FILE_SIZE = 4294967295,INVALID_SET_FILE_POINTER = 4294967295,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x7F,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_TCP = 6,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_IPV6 = 41,IPPROTO_ND = 77,IPPROTO_ICLFXBM = 78,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_IRCNULL {IRCNULL = 0x0,FIRCPFN = 0x1,FIRCPV = 0x2,FIRCPRI = 0x4,FIRCCSEC = 0x8,FIRCIRO = 0x10,};
enum MACRO_IRONULL {IRONULL = 0x0,FIROWAIT = 0x1,FIROINTERVAL = 0x2,FIROPERBLOCK = 0x4,FIRODISABLED = 0x20,FIROONCEONLY = 0x40,};
enum MACRO_ISC_REQ {ISC_REQ_DELEGATE = 0x1,ISC_REQ_MUTUAL_AUTH = 0x2,ISC_REQ_REPLAY_DETECT = 0x4,ISC_REQ_SEQUENCE_DETECT = 0x8,ISC_REQ_CONFIDENTIALITY = 0x10,ISC_REQ_USE_SESSION_KEY = 0x20,ISC_REQ_PROMPT_FOR_CREDS = 0x40,ISC_REQ_USE_SUPPLIED_CREDS = 0x80,ISC_REQ_ALLOCATE_MEMORY = 0x100,ISC_REQ_USE_DCE_STYLE = 0x200,ISC_REQ_DATAGRAM = 0x400,ISC_REQ_CONNECTION = 0x800,ISC_REQ_CALL_LEVEL = 0x1000,ISC_REQ_FRAGMENT_SUPPLIED = 0x2000,ISC_REQ_EXTENDED_ERROR = 0x4000,ISC_REQ_STREAM = 0x8000,ISC_REQ_INTEGRITY = 0x10000,ISC_REQ_IDENTIFY = 0x20000,ISC_REQ_NULL_SESSION = 0x40000,ISC_REQ_MANUAL_CRED_VALIDATION = 0x80000,ISC_REQ_RESERVED1 = 0x100000,ISC_REQ_FRAGMENT_TO_FIT = 0x200000,ISC_RET_DELEGATE = 0x1,ISC_RET_MUTUAL_AUTH = 0x2,ISC_RET_REPLAY_DETECT = 0x4,ISC_RET_SEQUENCE_DETECT = 0x8,ISC_RET_CONFIDENTIALITY = 0x10,ISC_RET_USE_SESSION_KEY = 0x20,ISC_RET_USED_COLLECTED_CREDS = 0x40,ISC_RET_USED_SUPPLIED_CREDS = 0x80,ISC_RET_ALLOCATED_MEMORY = 0x100,ISC_RET_USED_DCE_STYLE = 0x200,ISC_RET_DATAGRAM = 0x400,ISC_RET_CONNECTION = 0x800,ISC_RET_INTERMEDIATE_RETURN = 0x1000,ISC_RET_CALL_LEVEL = 0x2000,ISC_RET_EXTENDED_ERROR = 0x4000,ISC_RET_STREAM = 0x8000,ISC_RET_INTEGRITY = 0x10000,ISC_RET_IDENTIFY = 0x20000,ISC_RET_NULL_SESSION = 0x40000,ISC_RET_MANUAL_CRED_VALIDATION = 0x80000,ISC_RET_RESERVED1 = 0x100000,ISC_RET_FRAGMENT_ONLY = 0x200000,};
enum MACRO_LINEERR {LINEERR_ALLOCATED = 0x80000001,LINEERR_BADDEVICEID = 0x80000002,LINEERR_BEARERMODEUNAVAIL = 0x80000003,LINEERR_CALLUNAVAIL = 0x80000005,LINEERR_COMPLETIONOVERRUN = 0x80000006,LINEERR_CONFERENCEFULL = 0x80000007,LINEERR_DIALBILLING = 0x80000008,LINEERR_DIALDIALTONE = 0x80000009,LINEERR_DIALPROMPT = 0x8000000A,LINEERR_DIALQUIET = 0x8000000B,LINEERR_INCOMPATIBLEAPIVERSION = 0x8000000C,LINEERR_INCOMPATIBLEEXTVERSION = 0x8000000D,LINEERR_INIFILECORRUPT = 0x8000000E,LINEERR_INUSE = 0x8000000F,LINEERR_INVALADDRESS = 0x80000010,LINEERR_INVALADDRESSID = 0x80000011,LINEERR_INVALADDRESSMODE = 0x80000012,LINEERR_INVALADDRESSSTATE = 0x80000013,LINEERR_INVALAPPHANDLE = 0x80000014,LINEERR_INVALAPPNAME = 0x80000015,LINEERR_INVALBEARERMODE = 0x80000016,LINEERR_INVALCALLCOMPLMODE = 0x80000017,LINEERR_INVALCALLHANDLE = 0x80000018,LINEERR_INVALCALLPARAMS = 0x80000019,LINEERR_INVALCALLPRIVILEGE = 0x8000001A,LINEERR_INVALCALLSELECT = 0x8000001B,LINEERR_INVALCALLSTATE = 0x8000001C,LINEERR_INVALCALLSTATELIST = 0x8000001D,LINEERR_INVALCARD = 0x8000001E,LINEERR_INVALCOMPLETIONID = 0x8000001F,LINEERR_INVALCONFCALLHANDLE = 0x80000020,LINEERR_INVALCONSULTCALLHANDLE = 0x80000021,LINEERR_INVALCOUNTRYCODE = 0x80000022,LINEERR_INVALDEVICECLASS = 0x80000023,LINEERR_INVALDEVICEHANDLE = 0x80000024,LINEERR_INVALDIALPARAMS = 0x80000025,LINEERR_INVALDIGITLIST = 0x80000026,LINEERR_INVALDIGITMODE = 0x80000027,LINEERR_INVALDIGITS = 0x80000028,LINEERR_INVALEXTVERSION = 0x80000029,LINEERR_INVALGROUPID = 0x8000002A,LINEERR_INVALLINEHANDLE = 0x8000002B,LINEERR_INVALLINESTATE = 0x8000002C,LINEERR_INVALLOCATION = 0x8000002D,LINEERR_INVALMEDIALIST = 0x8000002E,LINEERR_INVALMEDIAMODE = 0x8000002F,LINEERR_INVALMESSAGEID = 0x80000030,LINEERR_INVALPARAM = 0x80000032,LINEERR_INVALPARKID = 0x80000033,LINEERR_INVALPARKMODE = 0x80000034,LINEERR_INVALPOINTER = 0x80000035,LINEERR_INVALPRIVSELECT = 0x80000036,LINEERR_INVALRATE = 0x80000037,LINEERR_INVALREQUESTMODE = 0x80000038,LINEERR_INVALTERMINALID = 0x80000039,LINEERR_INVALTERMINALMODE = 0x8000003A,LINEERR_INVALTIMEOUT = 0x8000003B,LINEERR_INVALTONE = 0x8000003C,LINEERR_INVALTONELIST = 0x8000003D,LINEERR_INVALTONEMODE = 0x8000003E,LINEERR_INVALTRANSFERMODE = 0x8000003F,LINEERR_LINEMAPPERFAILED = 0x80000040,LINEERR_NOCONFERENCE = 0x80000041,LINEERR_NODEVICE = 0x80000042,LINEERR_NODRIVER = 0x80000043,LINEERR_NOMEM = 0x80000044,LINEERR_NOREQUEST = 0x80000045,LINEERR_NOTOWNER = 0x80000046,LINEERR_NOTREGISTERED = 0x80000047,LINEERR_OPERATIONFAILED = 0x80000048,LINEERR_OPERATIONUNAVAIL = 0x80000049,LINEERR_RATEUNAVAIL = 0x8000004A,LINEERR_RESOURCEUNAVAIL = 0x8000004B,LINEERR_REQUESTOVERRUN = 0x8000004C,LINEERR_STRUCTURETOOSMALL = 0x8000004D,LINEERR_TARGETNOTFOUND = 0x8000004E,LINEERR_TARGETSELF = 0x8000004F,LINEERR_UNINITIALIZED = 0x80000050,LINEERR_USERUSERINFOTOOBIG = 0x80000051,LINEERR_REINIT = 0x80000052,LINEERR_ADDRESSBLOCKED = 0x80000053,LINEERR_BILLINGREJECTED = 0x80000054,LINEERR_INVALFEATURE = 0x80000055,LINEERR_NOMULTIPLEINSTANCE = 0x80000056,LINEERR_INVALAGENTID = 0x80000057,LINEERR_INVALAGENTGROUP = 0x80000058,LINEERR_INVALPASSWORD = 0x80000059,LINEERR_INVALAGENTSTATE = 0x8000005A,LINEERR_INVALAGENTACTIVITY = 0x8000005B,LINEERR_DIALVOICEDETECT = 0x8000005C,};
enum MACRO_LMEMDBG {LMEMDBG_SHOW_LEAKS = 0x1,LMEMDBG_SHOW_OOM = 0x2,LMEMDBG_BREAK_ON_OOM = 0x10,LMEMDBG_BREAK_ON_FREE_NULL = 0x20,LMEMDBG_BREAK_ON_LEAK = 0x40,LMEMDBG_SHOW_CS_CONTENTIONS = 0x80,};
enum MACRO_LOADFSD {LOADFSD_ASYNCH = 0x0,LOADFSD_SYNCH = 0x1,};
enum MACRO_LVIF_DI {LVIF_DI_SETITEM = 0x1000,};
enum MACRO_MACHINE {MACHINE_UNJOINED = 0xC00037ED,};
enum MACRO_MANAGED {MANAGED_APPS_USERAPPLICATIONS = 0x1,MANAGED_APPS_FROMCATEGORY = 0x2,MANAGED_APPS_INFOLEVEL_DEFAULT = 0x10000,MANAGED_APPTYPE_WINDOWSINSTALLER = 0x1,MANAGED_APPTYPE_SETUPEXE = 0x2,MANAGED_APPTYPE_UNSUPPORTED = 0x3,};
enum MACRO_MAPI_NO {MAPI_NO_HBAR = 0x1,MAPI_NO_VBAR = 0x2,};
enum MACRO_MAPMIME {MAPMIME_DEFAULT = 0,MAPMIME_CLSID = 1,MAPMIME_DISABLE = 2,MAPMIME_DEFAULT_ALWAYS = 3,};
enum MACRO_MARSHAL {MARSHAL_E_FIRST = 0x80040120,MARSHAL_E_LAST = 0x8004012F,MARSHAL_S_FIRST = 0x40120,MARSHAL_S_LAST = 0x4012F,};
enum MACRO_MAXBYTE {MAXBYTE = 0xFF,};
enum MACRO_MAXCHAR {MAXCHAR = 0x7F,MINSHORT = 0x8000,};
enum MACRO_MAXIMUM {MAXIMUM_WAIT_OBJECTS = 64,MAXIMUM_SUSPEND_COUNT = 127,};
enum MACRO_MAXLONG {MAXLONG = 0x7FFFFFFF,};
enum MACRO_MAXWORD {MAXWORD = 0xFFFF,};
enum MACRO_MAX_ACL {MAX_ACL_REVISION = 4,};
enum MACRO_MAX_NUM {MAX_NUM_OF_GROUP_ADDRESSES = 20,MAX_NUM_OF_AUTH_ALGOS = 10,};
enum MACRO_MAX_OPT {MAX_OPT_SIZE = 40,};
enum MACRO_MAX_PIN {MAX_PIN_NAME = 128,MAX_FILTER_NAME = 128,};
enum MACRO_MAX_WEP {MAX_WEP_KEY_INDEX = 4,MAX_WEP_KEY_LENGTH = 1024,MAX_NUM_SUPPORTED_RATES = 8,MAX_DOT11_ASSOC_INFO_ENUM_COUNT = 20,};
enum MACRO_MDLEVEL {MDLEVEL_TYPE_UNKNOWN = 0x0,MDLEVEL_TYPE_REGULAR = 0x0,MDLEVEL_TYPE_ALL = 0x1,MDLEVEL_TYPE_CALCULATED = 0x2,MDLEVEL_TYPE_TIME = 0x4,MDLEVEL_TYPE_RESERVED1 = 0x8,MDLEVEL_TYPE_TIME_YEARS = 0x14,MDLEVEL_TYPE_TIME_HALF_YEAR = 0x24,MDLEVEL_TYPE_TIME_QUARTERS = 0x44,MDLEVEL_TYPE_TIME_MONTHS = 0x84,MDLEVEL_TYPE_TIME_WEEKS = 0x104,MDLEVEL_TYPE_TIME_DAYS = 0x204,MDLEVEL_TYPE_TIME_HOURS = 0x304,MDLEVEL_TYPE_TIME_MINUTES = 0x404,MDLEVEL_TYPE_TIME_SECONDS = 0x804,MDLEVEL_TYPE_TIME_UNDEFINED = 0x1004,};
enum MACRO_MENUEXT {MENUEXT_SHOWDIALOG = 0x1,};
enum MACRO_MESSAGE {MESSAGE_RESOURCE_UNICODE = 0x1,};
enum MACRO_MIB_TCP {MIB_TCP_RTO_OTHER = 1,MIB_TCP_RTO_CONSTANT = 2,MIB_TCP_RTO_RSRE = 3,MIB_TCP_RTO_VANJ = 4,MIB_TCP_MAXCONN_DYNAMIC = 4294967295,MIB_TCP_STATE_CLOSED = 1,MIB_TCP_STATE_LISTEN = 2,MIB_TCP_STATE_SYN_SENT = 3,MIB_TCP_STATE_SYN_RCVD = 4,MIB_TCP_STATE_ESTAB = 5,MIB_TCP_STATE_FIN_WAIT1 = 6,MIB_TCP_STATE_FIN_WAIT2 = 7,MIB_TCP_STATE_CLOSE_WAIT = 8,MIB_TCP_STATE_CLOSING = 9,MIB_TCP_STATE_LAST_ACK = 10,MIB_TCP_STATE_TIME_WAIT = 11,MIB_TCP_STATE_DELETE_TCB = 12,MIB_USE_CURRENT_TTL = 4294967295,MIB_USE_CURRENT_FORWARDING = 4294967295,MIB_IP_FORWARDING = 1,MIB_IP_NOT_FORWARDING = 2,MIB_IPADDR_PRIMARY = 1,MIB_IPADDR_DYNAMIC = 4,MIB_IPADDR_DISCONNECTED = 8,MIB_IPADDR_DELETED = 64,MIB_IPADDR_TRANSIENT = 128,MIB_IPROUTE_TYPE_OTHER = 1,MIB_IPROUTE_TYPE_INVALID = 2,MIB_IPROUTE_TYPE_DIRECT = 3,MIB_IPROUTE_TYPE_INDIRECT = 4,MIB_IPROUTE_METRIC_UNUSED = 4294967295,MIB_IPPROTO_OTHER = 1,MIB_IPPROTO_LOCAL = 2,MIB_IPPROTO_NETMGMT = 3,MIB_IPPROTO_ICMP = 4,MIB_IPPROTO_EGP = 5,MIB_IPPROTO_GGP = 6,MIB_IPPROTO_HELLO = 7,MIB_IPPROTO_RIP = 8,MIB_IPPROTO_IS_IS = 9,MIB_IPPROTO_ES_IS = 10,MIB_IPPROTO_CISCO = 11,MIB_IPPROTO_BBN = 12,MIB_IPPROTO_OSPF = 13,MIB_IPPROTO_BGP = 14,MIB_IPPROTO_NT_AUTOSTATIC = 10002,MIB_IPPROTO_NT_STATIC = 10006,MIB_IPPROTO_NT_STATIC_NON_DOD = 10007,MIB_IPNET_TYPE_OTHER = 1,MIB_IPNET_TYPE_INVALID = 2,MIB_IPNET_TYPE_DYNAMIC = 3,MIB_IPNET_TYPE_STATIC = 4,};
enum MACRO_MIDIERR {MIDIERR_UNPREPARED = 64,MIDIERR_STILLPLAYING = 65,MIDIERR_NOMAP = 66,MIDIERR_NOTREADY = 67,MIDIERR_NODEVICE = 68,MIDIERR_INVALIDSETUP = 69,MIDIERR_BADOPENMODE = 70,MIDIERR_DONT_CONTINUE = 71,MIDIERR_LASTERROR = 71,};
enum MACRO_MIMEOLE {MIMEOLE_COMPAT_OE5 = 0x1,MIMEOLE_COMPAT_MLANG2 = 0x2,};
enum MACRO_MINCHAR {MINCHAR = 0x80,};
enum MACRO_MIN_WEP {MIN_WEP_KEY_MAPPING_LENGTH = 10,};
enum MACRO_MISSING {MISSING_EXIT_POINT_CREATED = 0xC00037E2,MISSING_EXIT_POINT_NOT_CREATED = 0xC00037E3,MISSING_VOLUME_CREATED = 0xC00037E4,MISSING_VOLUME_NOT_CREATED = 0xC00037E5,};
enum MACRO_MMIOERR {MMIOERR_BASE = 256,MMIOERR_FILENOTFOUND = 257,MMIOERR_OUTOFMEMORY = 258,MMIOERR_CANNOTOPEN = 259,MMIOERR_CANNOTCLOSE = 260,MMIOERR_CANNOTREAD = 261,MMIOERR_CANNOTWRITE = 262,MMIOERR_CANNOTSEEK = 263,MMIOERR_CANNOTEXPAND = 264,MMIOERR_CHUNKNOTFOUND = 265,MMIOERR_UNBUFFERED = 266,MMIOERR_PATHNOTFOUND = 267,MMIOERR_ACCESSDENIED = 268,MMIOERR_SHARINGVIOLATION = 269,MMIOERR_NETWORKERROR = 270,MMIOERR_TOOMANYOPENFILES = 271,MMIOERR_INVALIDFILE = 272,};
enum MACRO_MOD_ALT {MOD_ALT = 0x1,MOD_CONTROL = 0x2,MOD_SHIFT = 0x4,MOD_WIN = 0x8,MOD_KEYUP = 0x1000,};
enum MACRO_MONITOR {MONITOR_DEFAULTTONULL = 0x0,MONITOR_DEFAULTTOPRIMARY = 0x1,MONITOR_DEFAULTTONEAREST = 0x2,};
enum MACRO_MSGFLAG {MSGFLAG_READ = 0x1,MSGFLAG_UNMODIFIED = 0x2,MSGFLAG_SUBMIT = 0x4,MSGFLAG_UNSENT = 0x8,MSGFLAG_HASATTACH = 0x10,MSGFLAG_FROMME = 0x20,MSGFLAG_ASSOCIATED = 0x40,MSGFLAG_RESEND = 0x80,MSGFLAG_RN_PENDING = 0x100,MSGFLAG_NRN_PENDING = 0x200,};
enum MACRO_NDISUIO {NDISUIO_NOTIFICATION_RESET_START = 0x1,NDISUIO_NOTIFICATION_RESET_END = 0x2,NDISUIO_NOTIFICATION_MEDIA_CONNECT = 0x4,NDISUIO_NOTIFICATION_MEDIA_DISCONNECT = 0x8,NDISUIO_NOTIFICATION_BIND = 0x10,NDISUIO_NOTIFICATION_UNBIND = 0x20,NDISUIO_NOTIFICATION_MEDIA_SPECIFIC_NOTIFICATION = 0x40,};
enum MACRO_NETBIOS {NETBIOS_NAME_LEN = 16,};
enum MACRO_NETWORK {NETWORK_DREP = 0x0,};
enum MACRO_NOERROR {NOERROR = 0,};
enum MACRO_NOFLAGS {NOFLAGS = 0,};
enum MACRO_NULLBER {NULLBER = 0,};
enum MACRO_NULLIMC {NULLIMC = 0,};
enum MACRO_NUMPENS {NUMPENS = 18,};
enum MACRO_NUM_SYS {NUM_SYS_HANDLES = 32,};
enum MACRO_OAFALSE {OAFALSE = 0,};
enum MACRO_OBJTYPE {OBJTYPE_INVALID = 0,OBJTYPE_FILE = 1,OBJTYPE_DIRECTORY = 2,OBJTYPE_DATABASE = 3,OBJTYPE_RECORD = 4,};
enum MACRO_OFFLOAD {OFFLOAD_MAX_SAS = 3,OFFLOAD_INBOUND_SA = 1,OFFLOAD_OUTBOUND_SA = 2,};
enum MACRO_OID_802 {OID_802_3_RCV_ERROR_ALIGNMENT = 0x1020101,OID_802_3_XMIT_ONE_COLLISION = 0x1020102,OID_802_3_XMIT_MORE_COLLISIONS = 0x1020103,OID_802_3_XMIT_DEFERRED = 0x1020201,OID_802_3_XMIT_MAX_COLLISIONS = 0x1020202,OID_802_3_RCV_OVERRUN = 0x1020203,OID_802_3_XMIT_UNDERRUN = 0x1020204,OID_802_3_XMIT_HEARTBEAT_FAILURE = 0x1020205,OID_802_3_XMIT_TIMES_CRS_LOST = 0x1020206,OID_802_3_XMIT_LATE_COLLISIONS = 0x1020207,OID_802_5_PERMANENT_ADDRESS = 0x2010101,OID_802_5_CURRENT_ADDRESS = 0x2010102,OID_802_5_CURRENT_FUNCTIONAL = 0x2010103,OID_802_5_CURRENT_GROUP = 0x2010104,OID_802_5_LAST_OPEN_STATUS = 0x2010105,OID_802_5_CURRENT_RING_STATUS = 0x2010106,OID_802_5_CURRENT_RING_STATE = 0x2010107,OID_802_5_LINE_ERRORS = 0x2020101,OID_802_5_LOST_FRAMES = 0x2020102,OID_802_5_BURST_ERRORS = 0x2020201,OID_802_5_AC_ERRORS = 0x2020202,OID_802_5_ABORT_DELIMETERS = 0x2020203,OID_802_5_FRAME_COPIED_ERRORS = 0x2020204,OID_802_5_FREQUENCY_ERRORS = 0x2020205,OID_802_5_TOKEN_ERRORS = 0x2020206,OID_802_5_INTERNAL_ERRORS = 0x2020207,OID_FDDI_LONG_PERMANENT_ADDR = 0x3010101,OID_FDDI_LONG_CURRENT_ADDR = 0x3010102,OID_FDDI_LONG_MULTICAST_LIST = 0x3010103,OID_FDDI_LONG_MAX_LIST_SIZE = 0x3010104,OID_FDDI_SHORT_PERMANENT_ADDR = 0x3010105,OID_FDDI_SHORT_CURRENT_ADDR = 0x3010106,OID_FDDI_SHORT_MULTICAST_LIST = 0x3010107,OID_FDDI_SHORT_MAX_LIST_SIZE = 0x3010108,OID_FDDI_ATTACHMENT_TYPE = 0x3020101,OID_FDDI_UPSTREAM_NODE_LONG = 0x3020102,OID_FDDI_DOWNSTREAM_NODE_LONG = 0x3020103,OID_FDDI_FRAME_ERRORS = 0x3020104,OID_FDDI_FRAMES_LOST = 0x3020105,OID_FDDI_RING_MGT_STATE = 0x3020106,OID_FDDI_LCT_FAILURES = 0x3020107,OID_FDDI_LEM_REJECTS = 0x3020108,OID_FDDI_LCONNECTION_STATE = 0x3020109,OID_FDDI_SMT_STATION_ID = 0x3030201,OID_FDDI_SMT_OP_VERSION_ID = 0x3030202,OID_FDDI_SMT_HI_VERSION_ID = 0x3030203,OID_FDDI_SMT_LO_VERSION_ID = 0x3030204,OID_FDDI_SMT_MANUFACTURER_DATA = 0x3030205,OID_FDDI_SMT_USER_DATA = 0x3030206,OID_FDDI_SMT_MIB_VERSION_ID = 0x3030207,OID_FDDI_SMT_MAC_CT = 0x3030208,OID_FDDI_SMT_NON_MASTER_CT = 0x3030209,OID_FDDI_SMT_MASTER_CT = 0x303020A,OID_FDDI_SMT_AVAILABLE_PATHS = 0x303020B,OID_FDDI_SMT_CONFIG_CAPABILITIES = 0x303020C,OID_FDDI_SMT_CONFIG_POLICY = 0x303020D,OID_FDDI_SMT_CONNECTION_POLICY = 0x303020E,OID_FDDI_SMT_T_NOTIFY = 0x303020F,OID_FDDI_SMT_STAT_RPT_POLICY = 0x3030210,OID_FDDI_SMT_TRACE_MAX_EXPIRATION = 0x3030211,OID_FDDI_SMT_PORT_INDEXES = 0x3030212,OID_FDDI_SMT_MAC_INDEXES = 0x3030213,OID_FDDI_SMT_BYPASS_PRESENT = 0x3030214,OID_FDDI_SMT_ECM_STATE = 0x3030215,OID_FDDI_SMT_CF_STATE = 0x3030216,OID_FDDI_SMT_HOLD_STATE = 0x3030217,OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = 0x3030218,OID_FDDI_SMT_STATION_STATUS = 0x3030219,OID_FDDI_SMT_PEER_WRAP_FLAG = 0x303021A,OID_FDDI_SMT_MSG_TIME_STAMP = 0x303021B,OID_FDDI_SMT_TRANSITION_TIME_STAMP = 0x303021C,OID_FDDI_SMT_SET_COUNT = 0x303021D,OID_FDDI_SMT_LAST_SET_STATION_ID = 0x303021E,OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = 0x303021F,OID_FDDI_MAC_BRIDGE_FUNCTIONS = 0x3030220,OID_FDDI_MAC_T_MAX_CAPABILITY = 0x3030221,OID_FDDI_MAC_TVX_CAPABILITY = 0x3030222,OID_FDDI_MAC_AVAILABLE_PATHS = 0x3030223,OID_FDDI_MAC_CURRENT_PATH = 0x3030224,OID_FDDI_MAC_UPSTREAM_NBR = 0x3030225,OID_FDDI_MAC_DOWNSTREAM_NBR = 0x3030226,OID_FDDI_MAC_OLD_UPSTREAM_NBR = 0x3030227,OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = 0x3030228,OID_FDDI_MAC_DUP_ADDRESS_TEST = 0x3030229,OID_FDDI_MAC_REQUESTED_PATHS = 0x303022A,OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = 0x303022B,OID_FDDI_MAC_INDEX = 0x303022C,OID_FDDI_MAC_SMT_ADDRESS = 0x303022D,OID_FDDI_MAC_LONG_GRP_ADDRESS = 0x303022E,OID_FDDI_MAC_SHORT_GRP_ADDRESS = 0x303022F,OID_FDDI_MAC_T_REQ = 0x3030230,OID_FDDI_MAC_T_NEG = 0x3030231,OID_FDDI_MAC_T_MAX = 0x3030232,OID_FDDI_MAC_TVX_VALUE = 0x3030233,OID_FDDI_MAC_T_PRI0 = 0x3030234,OID_FDDI_MAC_T_PRI1 = 0x3030235,OID_FDDI_MAC_T_PRI2 = 0x3030236,OID_FDDI_MAC_T_PRI3 = 0x3030237,OID_FDDI_MAC_T_PRI4 = 0x3030238,OID_FDDI_MAC_T_PRI5 = 0x3030239,OID_FDDI_MAC_T_PRI6 = 0x303023A,OID_FDDI_MAC_FRAME_CT = 0x303023B,OID_FDDI_MAC_COPIED_CT = 0x303023C,OID_FDDI_MAC_TRANSMIT_CT = 0x303023D,OID_FDDI_MAC_TOKEN_CT = 0x303023E,OID_FDDI_MAC_ERROR_CT = 0x303023F,OID_FDDI_MAC_LOST_CT = 0x3030240,OID_FDDI_MAC_TVX_EXPIRED_CT = 0x3030241,OID_FDDI_MAC_NOT_COPIED_CT = 0x3030242,OID_FDDI_MAC_LATE_CT = 0x3030243,OID_FDDI_MAC_RING_OP_CT = 0x3030244,OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = 0x3030245,OID_FDDI_MAC_FRAME_ERROR_RATIO = 0x3030246,OID_FDDI_MAC_NOT_COPIED_THRESHOLD = 0x3030247,OID_FDDI_MAC_NOT_COPIED_RATIO = 0x3030248,OID_FDDI_MAC_RMT_STATE = 0x3030249,OID_FDDI_MAC_DA_FLAG = 0x303024A,OID_FDDI_MAC_UNDA_FLAG = 0x303024B,OID_FDDI_MAC_FRAME_ERROR_FLAG = 0x303024C,OID_FDDI_MAC_NOT_COPIED_FLAG = 0x303024D,OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = 0x303024E,OID_FDDI_MAC_HARDWARE_PRESENT = 0x303024F,OID_FDDI_MAC_MA_UNITDATA_ENABLE = 0x3030250,OID_FDDI_PATH_INDEX = 0x3030251,OID_FDDI_PATH_RING_LATENCY = 0x3030252,OID_FDDI_PATH_TRACE_STATUS = 0x3030253,OID_FDDI_PATH_SBA_PAYLOAD = 0x3030254,OID_FDDI_PATH_SBA_OVERHEAD = 0x3030255,OID_FDDI_PATH_CONFIGURATION = 0x3030256,OID_FDDI_PATH_T_R_MODE = 0x3030257,OID_FDDI_PATH_SBA_AVAILABLE = 0x3030258,OID_FDDI_PATH_TVX_LOWER_BOUND = 0x3030259,OID_FDDI_PATH_T_MAX_LOWER_BOUND = 0x303025A,OID_FDDI_PATH_MAX_T_REQ = 0x303025B,OID_FDDI_PORT_MY_TYPE = 0x303025C,OID_FDDI_PORT_NEIGHBOR_TYPE = 0x303025D,OID_FDDI_PORT_CONNECTION_POLICIES = 0x303025E,OID_FDDI_PORT_MAC_INDICATED = 0x303025F,OID_FDDI_PORT_CURRENT_PATH = 0x3030260,OID_FDDI_PORT_REQUESTED_PATHS = 0x3030261,OID_FDDI_PORT_MAC_PLACEMENT = 0x3030262,OID_FDDI_PORT_AVAILABLE_PATHS = 0x3030263,OID_FDDI_PORT_MAC_LOOP_TIME = 0x3030264,OID_FDDI_PORT_PMD_CLASS = 0x3030265,OID_FDDI_PORT_CONNECTION_CAPABILITIES = 0x3030266,OID_FDDI_PORT_INDEX = 0x3030267,OID_FDDI_PORT_MAINT_LS = 0x3030268,OID_FDDI_PORT_BS_FLAG = 0x3030269,OID_FDDI_PORT_PC_LS = 0x303026A,OID_FDDI_PORT_EB_ERROR_CT = 0x303026B,OID_FDDI_PORT_LCT_FAIL_CT = 0x303026C,OID_FDDI_PORT_LER_ESTIMATE = 0x303026D,OID_FDDI_PORT_LEM_REJECT_CT = 0x303026E,OID_FDDI_PORT_LEM_CT = 0x303026F,OID_FDDI_PORT_LER_CUTOFF = 0x3030270,OID_FDDI_PORT_LER_ALARM = 0x3030271,OID_FDDI_PORT_CONNNECT_STATE = 0x3030272,OID_FDDI_PORT_PCM_STATE = 0x3030273,OID_FDDI_PORT_PC_WITHHOLD = 0x3030274,OID_FDDI_PORT_LER_FLAG = 0x3030275,OID_FDDI_PORT_HARDWARE_PRESENT = 0x3030276,OID_FDDI_SMT_STATION_ACTION = 0x3030277,OID_FDDI_PORT_ACTION = 0x3030278,OID_FDDI_IF_DESCR = 0x3030279,OID_FDDI_IF_TYPE = 0x303027A,OID_FDDI_IF_MTU = 0x303027B,OID_FDDI_IF_SPEED = 0x303027C,OID_FDDI_IF_PHYS_ADDRESS = 0x303027D,OID_FDDI_IF_ADMIN_STATUS = 0x303027E,OID_FDDI_IF_OPER_STATUS = 0x303027F,OID_FDDI_IF_LAST_CHANGE = 0x3030280,OID_FDDI_IF_IN_OCTETS = 0x3030281,OID_FDDI_IF_IN_UCAST_PKTS = 0x3030282,OID_FDDI_IF_IN_NUCAST_PKTS = 0x3030283,OID_FDDI_IF_IN_DISCARDS = 0x3030284,OID_FDDI_IF_IN_ERRORS = 0x3030285,OID_FDDI_IF_IN_UNKNOWN_PROTOS = 0x3030286,OID_FDDI_IF_OUT_OCTETS = 0x3030287,OID_FDDI_IF_OUT_UCAST_PKTS = 0x3030288,OID_FDDI_IF_OUT_NUCAST_PKTS = 0x3030289,OID_FDDI_IF_OUT_DISCARDS = 0x303028A,OID_FDDI_IF_OUT_ERRORS = 0x303028B,OID_FDDI_IF_OUT_QLEN = 0x303028C,OID_FDDI_IF_SPECIFIC = 0x303028D,OID_WAN_PERMANENT_ADDRESS = 0x4010101,OID_WAN_CURRENT_ADDRESS = 0x4010102,OID_WAN_QUALITY_OF_SERVICE = 0x4010103,OID_WAN_PROTOCOL_TYPE = 0x4010104,OID_WAN_MEDIUM_SUBTYPE = 0x4010105,OID_WAN_HEADER_FORMAT = 0x4010106,OID_WAN_GET_INFO = 0x4010107,OID_WAN_SET_LINK_INFO = 0x4010108,OID_WAN_GET_LINK_INFO = 0x4010109,OID_WAN_LINE_COUNT = 0x401010A,OID_WAN_PROTOCOL_CAPS = 0x401010B,OID_WAN_GET_BRIDGE_INFO = 0x401020A,OID_WAN_SET_BRIDGE_INFO = 0x401020B,OID_WAN_GET_COMP_INFO = 0x401020C,OID_WAN_SET_COMP_INFO = 0x401020D,OID_WAN_GET_STATS_INFO = 0x401020E,OID_WAN_CO_GET_INFO = 0x4010180,OID_WAN_CO_SET_LINK_INFO = 0x4010181,OID_WAN_CO_GET_LINK_INFO = 0x4010182,OID_WAN_CO_GET_COMP_INFO = 0x4010280,OID_WAN_CO_SET_COMP_INFO = 0x4010281,OID_WAN_CO_GET_STATS_INFO = 0x4010282,OID_LTALK_CURRENT_NODE_ID = 0x5010102,OID_LTALK_IN_BROADCASTS = 0x5020101,OID_LTALK_IN_LENGTH_ERRORS = 0x5020102,OID_LTALK_OUT_NO_HANDLERS = 0x5020201,OID_LTALK_COLLISIONS = 0x5020202,OID_LTALK_DEFERS = 0x5020203,OID_LTALK_NO_DATA_ERRORS = 0x5020204,OID_LTALK_RANDOM_CTS_ERRORS = 0x5020205,OID_LTALK_FCS_ERRORS = 0x5020206,OID_ARCNET_PERMANENT_ADDRESS = 0x6010101,OID_ARCNET_CURRENT_ADDRESS = 0x6010102,OID_ARCNET_RECONFIGURATIONS = 0x6020201,OID_TAPI_ACCEPT = 0x7030101,OID_TAPI_ANSWER = 0x7030102,OID_TAPI_CLOSE = 0x7030103,OID_TAPI_CLOSE_CALL = 0x7030104,OID_TAPI_CONDITIONAL_MEDIA_DETECTION = 0x7030105,OID_TAPI_CONFIG_DIALOG = 0x7030106,OID_TAPI_DEV_SPECIFIC = 0x7030107,OID_TAPI_DIAL = 0x7030108,OID_TAPI_DROP = 0x7030109,OID_TAPI_GET_ADDRESS_CAPS = 0x703010A,OID_TAPI_GET_ADDRESS_ID = 0x703010B,OID_TAPI_GET_ADDRESS_STATUS = 0x703010C,OID_TAPI_GET_CALL_ADDRESS_ID = 0x703010D,OID_TAPI_GET_CALL_INFO = 0x703010E,OID_TAPI_GET_CALL_STATUS = 0x703010F,OID_TAPI_GET_DEV_CAPS = 0x7030110,OID_TAPI_GET_DEV_CONFIG = 0x7030111,OID_TAPI_GET_EXTENSION_ID = 0x7030112,OID_TAPI_GET_ID = 0x7030113,OID_TAPI_GET_LINE_DEV_STATUS = 0x7030114,OID_TAPI_MAKE_CALL = 0x7030115,OID_TAPI_NEGOTIATE_EXT_VERSION = 0x7030116,OID_TAPI_OPEN = 0x7030117,OID_TAPI_PROVIDER_INITIALIZE = 0x7030118,OID_TAPI_PROVIDER_SHUTDOWN = 0x7030119,OID_TAPI_SECURE_CALL = 0x703011A,OID_TAPI_SELECT_EXT_VERSION = 0x703011B,OID_TAPI_SEND_USER_USER_INFO = 0x703011C,OID_TAPI_SET_APP_SPECIFIC = 0x703011D,OID_TAPI_SET_CALL_PARAMS = 0x703011E,OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = 0x703011F,OID_TAPI_SET_DEV_CONFIG = 0x7030120,OID_TAPI_SET_MEDIA_MODE = 0x7030121,OID_TAPI_SET_STATUS_MESSAGES = 0x7030122,OID_TAPI_GATHER_DIGITS = 0x7030123,OID_TAPI_MONITOR_DIGITS = 0x7030124,OID_TAPI_TRANSLATE_ADDRESS = 0x7030200,OID_TAPI_CONFIG_DIALOG_EDIT = 0x7030201,OID_ATM_SUPPORTED_VC_RATES = 0x8010101,OID_ATM_SUPPORTED_SERVICE_CATEGORY = 0x8010102,OID_ATM_SUPPORTED_AAL_TYPES = 0x8010103,OID_ATM_HW_CURRENT_ADDRESS = 0x8010104,OID_ATM_MAX_ACTIVE_VCS = 0x8010105,OID_ATM_MAX_ACTIVE_VCI_BITS = 0x8010106,OID_ATM_MAX_ACTIVE_VPI_BITS = 0x8010107,OID_ATM_MAX_AAL0_PACKET_SIZE = 0x8010108,OID_ATM_MAX_AAL1_PACKET_SIZE = 0x8010109,OID_ATM_MAX_AAL34_PACKET_SIZE = 0x801010A,OID_ATM_MAX_AAL5_PACKET_SIZE = 0x801010B,OID_ATM_SIGNALING_VPIVCI = 0x8010201,OID_ATM_ASSIGNED_VPI = 0x8010202,OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = 0x8010203,OID_ATM_RELEASE_ACCESS_NET_RESOURCES = 0x8010204,OID_ATM_ILMI_VPIVCI = 0x8010205,OID_ATM_DIGITAL_BROADCAST_VPIVCI = 0x8010206,OID_ATM_GET_NEAREST_FLOW = 0x8010207,OID_ATM_ALIGNMENT_REQUIRED = 0x8010208,OID_ATM_LECS_ADDRESS = 0x8010209,OID_ATM_SERVICE_ADDRESS = 0x801020A,OID_ATM_CALL_PROCEEDING = 0x801020B,OID_ATM_CALL_ALERTING = 0x801020C,OID_ATM_PARTY_ALERTING = 0x801020D,OID_ATM_CALL_NOTIFY = 0x801020E,OID_ATM_MY_IP_NM_ADDRESS = 0x801020F,OID_ATM_RCV_CELLS_OK = 0x8020101,OID_ATM_XMIT_CELLS_OK = 0x8020102,OID_ATM_RCV_CELLS_DROPPED = 0x8020103,OID_ATM_RCV_INVALID_VPI_VCI = 0x8020201,OID_ATM_CELLS_HEC_ERROR = 0x8020202,OID_ATM_RCV_REASSEMBLY_ERROR = 0x8020203,OID_WW_GEN_NETWORK_TYPES_SUPPORTED = 0x9010101,OID_WW_GEN_NETWORK_TYPE_IN_USE = 0x9010102,OID_WW_GEN_HEADER_FORMATS_SUPPORTED = 0x9010103,OID_WW_GEN_HEADER_FORMAT_IN_USE = 0x9010104,OID_WW_GEN_INDICATION_REQUEST = 0x9010105,OID_WW_GEN_DEVICE_INFO = 0x9010106,OID_WW_GEN_OPERATION_MODE = 0x9010107,OID_WW_GEN_LOCK_STATUS = 0x9010108,OID_WW_GEN_DISABLE_TRANSMITTER = 0x9010109,OID_WW_GEN_NETWORK_ID = 0x901010A,OID_WW_GEN_PERMANENT_ADDRESS = 0x901010B,OID_WW_GEN_CURRENT_ADDRESS = 0x901010C,OID_WW_GEN_SUSPEND_DRIVER = 0x901010D,OID_WW_GEN_BASESTATION_ID = 0x901010E,OID_WW_GEN_CHANNEL_ID = 0x901010F,OID_WW_GEN_ENCRYPTION_SUPPORTED = 0x9010110,OID_WW_GEN_ENCRYPTION_IN_USE = 0x9010111,OID_WW_GEN_ENCRYPTION_STATE = 0x9010112,OID_WW_GEN_CHANNEL_QUALITY = 0x9010113,OID_WW_GEN_REGISTRATION_STATUS = 0x9010114,OID_WW_GEN_RADIO_LINK_SPEED = 0x9010115,OID_WW_GEN_LATENCY = 0x9010116,OID_WW_GEN_BATTERY_LEVEL = 0x9010117,OID_WW_GEN_EXTERNAL_POWER = 0x9010118,OID_WW_GEN_PING_ADDRESS = 0x9010201,OID_WW_GEN_RSSI = 0x9010202,OID_WW_GEN_SIM_STATUS = 0x9010203,OID_WW_GEN_ENABLE_SIM_PIN = 0x9010204,OID_WW_GEN_CHANGE_SIM_PIN = 0x9010205,OID_WW_GEN_SIM_PUK = 0x9010206,OID_WW_GEN_SIM_EXCEPTION = 0x9010207,OID_WW_MBX_SUBADDR = 0x9050101,OID_WW_MBX_FLEXLIST = 0x9050103,OID_WW_MBX_GROUPLIST = 0x9050104,OID_WW_MBX_TRAFFIC_AREA = 0x9050105,OID_WW_MBX_LIVE_DIE = 0x9050106,OID_WW_MBX_TEMP_DEFAULTLIST = 0x9050107,OID_WW_PIN_LOC_AUTHORIZE = 0x9090101,OID_WW_PIN_LAST_LOCATION = 0x9090102,OID_WW_PIN_LOC_FIX = 0x9090103,OID_WW_CDPD_SPNI = 0x90D0101,OID_WW_CDPD_WASI = 0x90D0102,OID_WW_CDPD_AREA_COLOR = 0x90D0103,OID_WW_CDPD_TX_POWER_LEVEL = 0x90D0104,OID_WW_CDPD_EID = 0x90D0105,OID_WW_CDPD_HEADER_COMPRESSION = 0x90D0106,OID_WW_CDPD_DATA_COMPRESSION = 0x90D0107,OID_WW_CDPD_CHANNEL_SELECT = 0x90D0108,OID_WW_CDPD_CHANNEL_STATE = 0x90D0109,OID_WW_CDPD_NEI = 0x90D010A,OID_WW_CDPD_NEI_STATE = 0x90D010B,OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER = 0x90D010C,OID_WW_CDPD_SLEEP_MODE = 0x90D010D,OID_WW_CDPD_CIRCUIT_SWITCHED = 0x90D010E,OID_WW_CDPD_TEI = 0x90D010F,OID_WW_CDPD_RSSI = 0x90D0110,OID_WW_CDPD_CS_SERVICE_PREFERENCE = 0x90D0111,OID_WW_CDPD_CS_SERVICE_STATUS = 0x90D0112,OID_WW_CDPD_CS_INFO = 0x90D0113,OID_WW_CDPD_CS_SUSPEND = 0x90D0114,OID_WW_CDPD_CS_DEFAULT_DIAL_CODE = 0x90D0115,OID_WW_CDPD_CS_CALLBACK = 0x90D0116,OID_WW_CDPD_CS_SID_LIST = 0x90D0117,OID_WW_CDPD_CS_CONFIGURATION = 0x90D0118,OID_WW_ARD_SNDCP = 0x9110101,OID_WW_ARD_TMLY_MSG = 0x9110102,OID_WW_ARD_DATAGRAM = 0x9110103,OID_WW_TAC_COMPRESSION = 0x9150101,OID_WW_TAC_SET_CONFIG = 0x9150102,OID_WW_TAC_GET_STATUS = 0x9150103,OID_WW_TAC_USER_HEADER = 0x9150104,OID_WW_TAC_UNIQUE_SDU_TAG = 0x9150105,OID_WW_TAC_SEND_COMMAND = 0x9150106,OID_WW_TAC_GET_RESPONSE = 0x9150107,OID_WW_TAC_DISABLE_RECEIVER = 0x9150108,OID_WW_TAC_ANTENNA_MODE = 0x9150109,OID_WW_TAC_FLUSH_DATA = 0x915010A,OID_WW_TAC_SHUTDOWN_DEVICE = 0x915010B,OID_WW_TAC_DEVICE_EXCEPTION = 0x915010C,OID_WW_TAC_RECEIVE_EXCEPTION = 0x915010D,OID_WW_TAC_BUFFER_EXCEPTION = 0x915010E,OID_WW_TAC_BATTERY_EXCEPTION = 0x915010F,OID_WW_TAC_TRANSMITTER_KEYED = 0x9150110,OID_WW_TAC_SYSTEM_TABLE = 0x9150111,OID_WW_TAC_CHANNEL_TABLE = 0x9150112,OID_WW_TAC_DCHANNEL_TABLE = 0x9150113,OID_WW_TAC_RECEIVE_QUEUE_COUNT = 0x9150114,OID_WW_TAC_STATISTICS = 0x9160101,OID_WW_MET_FUNCTION = 0x9190101,OID_802_11_BSSID = 0xD010101,OID_802_11_SSID = 0xD010102,OID_802_11_NETWORK_TYPES_SUPPORTED = 0xD010203,OID_802_11_NETWORK_TYPE_IN_USE = 0xD010204,OID_802_11_TX_POWER_LEVEL = 0xD010205,OID_802_11_RSSI = 0xD010206,OID_802_11_RSSI_TRIGGER = 0xD010207,OID_802_11_INFRASTRUCTURE_MODE = 0xD010108,OID_802_11_FRAGMENTATION_THRESHOLD = 0xD010209,OID_802_11_RTS_THRESHOLD = 0xD01020A,OID_802_11_NUMBER_OF_ANTENNAS = 0xD01020B,OID_802_11_RX_ANTENNA_SELECTED = 0xD01020C,OID_802_11_TX_ANTENNA_SELECTED = 0xD01020D,OID_802_11_SUPPORTED_RATES = 0xD01020E,OID_802_11_DESIRED_RATES = 0xD010210,OID_802_11_CONFIGURATION = 0xD010211,OID_802_11_STATISTICS = 0xD020212,OID_802_11_ADD_WEP = 0xD010113,OID_802_11_REMOVE_WEP = 0xD010114,OID_802_11_DISASSOCIATE = 0xD010115,OID_802_11_POWER_MODE = 0xD010216,OID_802_11_BSSID_LIST = 0xD010217,OID_802_11_AUTHENTICATION_MODE = 0xD010118,OID_802_11_PRIVACY_FILTER = 0xD010119,OID_802_11_BSSID_LIST_SCAN = 0xD01011A,OID_802_11_WEP_STATUS = 0xD01011B,OID_802_11_ENCRYPTION_STATUS = 0xD01011B,OID_802_11_RELOAD_DEFAULTS = 0xD01011C,OID_NDIS_BLOCK_MEDIA_CONNECT = 0xFFFF0001,OID_NDIS_UNBLOCK_MEDIA_CONNECT = 0xFFFF0002,OID_NDIS_EMULATE_MEDIA_CONNECT = 0xFFFF0003,OID_NDIS_EMULATE_MEDIA_DISCONNECT = 0xFFFF0004,OID_802_11_ADD_KEY = 0xD01011D,OID_802_11_REMOVE_KEY = 0xD01011E,OID_802_11_ASSOCIATION_INFORMATION = 0xD01011F,OID_802_11_TEST = 0xD010120,};
enum MACRO_OID_TCP {OID_TCP_TASK_OFFLOAD = 0xFC010201,OID_TCP_TASK_IPSEC_ADD_SA = 0xFC010202,OID_TCP_TASK_IPSEC_DELETE_SA = 0xFC010203,OID_TCP_SAN_SUPPORT = 0xFC010204,OID_FFP_SUPPORT = 0xFC010210,OID_FFP_FLUSH = 0xFC010211,OID_FFP_CONTROL = 0xFC010212,OID_FFP_PARAMS = 0xFC010213,OID_FFP_DATA = 0xFC010214,OID_FFP_DRIVER_STATS = 0xFC020210,OID_FFP_ADAPTER_STATS = 0xFC020211,OID_QOS_TC_SUPPORTED = 0xFB010100,OID_QOS_REMAINING_BANDWIDTH = 0xFB010101,OID_QOS_ISSLOW_FLOW = 0xFB010102,OID_QOS_BESTEFFORT_BANDWIDTH = 0xFB010103,OID_QOS_LATENCY = 0xFB010104,OID_QOS_FLOW_IP_CONFORMING = 0xFB010105,OID_QOS_FLOW_COUNT = 0xFB010106,OID_QOS_NON_BESTEFFORT_LIMIT = 0xFB010107,OID_QOS_SCHEDULING_PROFILES_SUPPORTED = 0xFB010108,OID_QOS_CURRENT_SCHEDULING_PROFILE = 0xFB010109,OID_QOS_TIMER_RESOLUTION = 0xFB01010A,OID_QOS_STATISTICS_BUFFER = 0xFB01010B,OID_QOS_HIERARCHY_CLASS = 0xFB01010C,OID_QOS_FLOW_MODE = 0xFB01010D,OID_QOS_ISSLOW_FRAGMENT_SIZE = 0xFB01010E,OID_QOS_FLOW_IP_NONCONFORMING = 0xFB01010F,OID_QOS_FLOW_8021P_CONFORMING = 0xFB010110,OID_QOS_FLOW_8021P_NONCONFORMING = 0xFB010111,OID_QOS_ENABLE_AVG_STATS = 0xFB010112,OID_QOS_ENABLE_WINDOW_ADJUSTMENT = 0xFB010113,};
enum MACRO_OPEN_IF {OPEN_IF_EXISTS = 0x1,};
enum MACRO_PACKAGE {PACKAGE_OPTIONAL = 0x10000,PACKAGE_MANDATORY = 0x20000,PACKAGE_DL_PENDING = 0x10,PACKAGE_DL_FAIL = 0x20,PACKAGE_DL_SUCCESS = 0x40,PACKAGE_DL_STATES = 0x70,PACKAGE_ALL = 0x30070,PACKAGE_NULL = 0x0,PACKAGE_TO_REQUEST = 0x10000000,PACKAGE_SRCH_BY_ID = 0x10000000,PACKAGE_GET_ID_ONLY = 0x20000000,PACKAGE_WRITE = 0x1,PACKAGE_DELETE = 0x2,PACKAGE_WRITE_STORTEXT = 0x1000,PACKAGE_WRITE_LONGTEXT = 0x2000,PACKAGE_WRITE_APPNAME = 0x4000,PACKAGE_WRITE_SIZE = 0x8000,PACKAGE_WRITE_DLINFO = 0x100,PACKAGE_WR_STATE_OVR = 0x200,PACKAGE_WR_STATE_ADD = 0x400,PACKAGE_WR_STATE_DEL = 0x800,PACKAGE_WRITE_ALL = 0xF301,};
enum MACRO_PADDING {PKCS5_PADDING = 1,RANDOM_PADDING = 2,ZERO_PADDING = 3,};
enum MACRO_PAGESET {PAGESET_TOLASTPAGE = 65535,};
enum MACRO_PARMNUM {PARMNUM_ALL = 0,};
enum MACRO_PATCOPY {PATCOPY = 0xF00021,};
enum MACRO_PATHLEN {PATHLEN = 256,};
enum MACRO_PCI_MAX {PCI_MAX_REG_NAME = 256,PCI_MAX_REG_DATA = 512,PCI_MAX_REG_LIST = 16,};
enum MACRO_PC_NONE {PC_NONE = 0,PC_POLYGON = 1,PC_RECTANGLE = 2,PC_WINDPOLYGON = 4,PC_TRAPEZOID = 4,PC_SCANLINE = 8,PC_WIDE = 16,PC_STYLED = 32,PC_WIDESTYLED = 64,PC_INTERIORS = 128,};
enum MACRO_PDTIMER {PDTIMER_RESET = 0x1,};
enum MACRO_PERPROP {PERPROP_E_FIRST = 0x80040200,PERPROP_E_LAST = 0x8004020F,PERPROP_S_FIRST = 0x40200,PERPROP_S_LAST = 0x4020F,PERPROP_E_NOPAGEAVAILABLE = 0x80040200,};
enum MACRO_PF_IRDA {PF_IRDA = 22,};
enum MACRO_PICTYPE {PICTYPE_UNINITIALIZED = -1,PICTYPE_NONE = 0,PICTYPE_BITMAP = 1,PICTYPE_METAFILE = 2,PICTYPE_ICON = 3,PICTYPE_ENHMETAFILE = 4,};
enum MACRO_PID_MIN {PID_MIN_READONLY = 0x80000000,PID_MAX_READONLY = 0xBFFFFFFF,};
enum MACRO_POWERED {BUS_POWERED = 0x80,SELF_POWERED = 0x40,};
enum MACRO_PRIUSER {PRIUSER = 0,};
enum MACRO_PRIVACY {PRIVACY_URLISTOPLEVEL = 0x10000,PRIVACY_URLHASCOMPACTPOLICY = 0x20000,PRIVACY_URLHASPOSTDATA = 0x80000,PRIVACY_URLHASPOLICYREFLINK = 0x100000,PRIVACY_URLHASPOLICYREFHEADER = 0x200000,PRIVACY_URLHASP3PHEADER = 0x400000,};
enum MACRO_PROCESS {PROCESS_TERMINATE = 0x1,PROCESS_CREATE_THREAD = 0x2,PROCESS_SET_SESSIONID = 0x4,PROCESS_VM_OPERATION = 0x8,PROCESS_VM_READ = 0x10,PROCESS_VM_WRITE = 0x20,PROCESS_DUP_HANDLE = 0x40,PROCESS_CREATE_PROCESS = 0x80,PROCESS_SET_QUOTA = 0x100,PROCESS_SET_INFORMATION = 0x200,PROCESS_QUERY_INFORMATION = 0x400,PROCESS_ALL_ACCESS = 0x1F0FFF,};
enum MACRO_PROGDLG {PROGDLG_NORMAL = 0x0,PROGDLG_MODAL = 0x1,PROGDLG_AUTOTIME = 0x2,PROGDLG_NOTIME = 0x4,PROGDLG_NOMINIMIZE = 0x8,PROGDLG_NOPROGRESSBAR = 0x10,};
enum MACRO_PROPTAG {PROPTAG_MASK = 0xFFFF,};
enum MACRO_PROP_ID {PROP_ID_SECURE_MIN = 0x67F0,PROP_ID_SECURE_MAX = 0x67FF,};
enum MACRO_PSM_SDP {PSM_SDP = 0x1,PSM_RFCOMM = 0x3,PSM_TCS_BIN = 0x5,PSM_TCS_BIN_CORDLESS = 0x7,};
enum MACRO_QUALITY {DEFAULT_QUALITY = 0,DRAFT_QUALITY = 1,};
enum MACRO_QUTIL_E {QUTIL_E_INVALID_CODEPAGE = 0xC0041678,};
enum MACRO_RES_AND {RES_AND = 0x0,RES_OR = 0x1,RES_NOT = 0x2,RES_CONTENT = 0x3,RES_PROPERTY = 0x4,RES_COMPAREPROPS = 0x5,RES_BITMASK = 0x6,RES_SIZE = 0x7,RES_EXIST = 0x8,RES_SUBRESTRICTION = 0x9,RES_COMMENT = 0xA,};
enum MACRO_RUNCMDS {RUNCMDS_QUIET = 0x1,RUNCMDS_NOWAIT = 0x2,RUNCMDS_DELAYPOSTCMD = 0x4,};
enum MACRO_SECTION {SECTION_QUERY = 0x1,SECTION_MAP_WRITE = 0x2,SECTION_MAP_READ = 0x4,SECTION_MAP_EXECUTE = 0x8,SECTION_EXTEND_SIZE = 0x10,SECTION_ALL_ACCESS = 0xF001F,};
enum MACRO_SELFLAG {SELFLAG_NONE = 0,SELFLAG_TAKEFOCUS = 1,SELFLAG_TAKESELECTION = 2,SELFLAG_EXTENDSELECTION = 4,SELFLAG_ADDSELECTION = 8,SELFLAG_REMOVESELECTION = 16,SELFLAG_VALID = 31,};
enum MACRO_SELFREG {SELFREG_E_FIRST = 0x80040200,SELFREG_E_LAST = 0x8004020F,SELFREG_S_FIRST = 0x40200,SELFREG_S_LAST = 0x4020F,SELFREG_E_TYPELIB = 0x80040200,SELFREG_E_CLASS = 0x80040201,};
enum MACRO_SERVERS {SERVERS_MODULES_MSMQD = 1,SERVERS_MODULES_MQOA = 1,SERVERS_MODULES_MSMQRT = 1,SERVERS_MODULES_MSMQADM = 1,SERVERS_MODULES_VISADM = 1,SERVERS_MODULES_OBEXAPI = 1,SERVERS_MODULES_MSSOAP1 = 1,SERVERS_MODULES_WISC10 = 1,SERVERS_MODULES_MSSOAPR = 1,SERVERS_MODULES_SERVICES = 1,};
enum MACRO_SERVICE {SERVICE_KERNEL_DRIVER = 0x1,SERVICE_FILE_SYSTEM_DRIVER = 0x2,SERVICE_ADAPTER = 0x4,SERVICE_RECOGNIZER_DRIVER = 0x8,SERVICE_DRIVER = 0xB,SERVICE_WIN32_OWN_PROCESS = 0x10,SERVICE_WIN32_SHARE_PROCESS = 0x20,SERVICE_WIN32 = 0x30,SERVICE_INTERACTIVE_PROCESS = 0x100,SERVICE_TYPE_ALL = 0x13F,SERVICE_BOOT_START = 0x0,SERVICE_SYSTEM_START = 0x1,SERVICE_AUTO_START = 0x2,SERVICE_DEMAND_START = 0x3,SERVICE_DISABLED = 0x4,SERVICE_ERROR_IGNORE = 0x0,SERVICE_ERROR_NORMAL = 0x1,SERVICE_ERROR_SEVERE = 0x2,SERVICE_ERROR_CRITICAL = 0x3,};
enum MACRO_SESSION {SESSION_CRYPT_KLEN = 21,};
enum MACRO_SETPATH {SETPATH_FLAG_BACKUP = 0x1,SETPATH_FLAG_DONT_CREATE = 0x2,};
enum MACRO_SETXOFF {SETXOFF = 1,SETXON = 2,};
enum MACRO_SHGDFIL {SHGDFIL_FINDDATA = 1,SHGDFIL_NETRESOURCE = 2,SHGDFIL_DESCRIPTIONID = 3,};
enum MACRO_SHLWAPI {SHLWAPI_SHLWIE = 1,};
enum MACRO_SHPWLEN {SHPWLEN = 8,};
enum MACRO_SIO_GET {SIO_GET_NUMBER_OF_ATM_DEVICES = 0x50160001,SIO_GET_ATM_ADDRESS = 0xD0160002,SIO_ASSOCIATE_PVC = 0x90160003,SIO_GET_ATM_CONNECTION_ID = 0x50160004,};
enum MACRO_SI_USER {SI_USER_NOT_SCREENED = 0x0,SI_USER_PASSED = 0x1,SI_USER_FAILED = 0x2,SI_NETWORK = 0x3,};
enum MACRO_SPDMANT {SPDMANT_1_0 = 0x1,SPDMANT_1_2 = 0x2,SPDMANT_1_3 = 0x3,SPDMANT_1_5 = 0x4,SPDMANT_2_0 = 0x5,SPDMANT_2_5 = 0x6,SPDMANT_3_0 = 0x7,SPDMANT_3_5 = 0x8,SPDMANT_4_0 = 0x9,SPDMANT_4_5 = 0xA,SPDMANT_5_0 = 0xB,SPDMANT_5_5 = 0xC,SPDMANT_6_0 = 0xD,SPDMANT_7_0 = 0xE,SPDMANT_8_0 = 0xF,};
enum MACRO_SP_PROT {SP_PROT_PCT1_SERVER = 0x1,SP_PROT_PCT1_CLIENT = 0x2,SP_PROT_PCT1 = 0x3,SP_PROT_SSL2_SERVER = 0x4,SP_PROT_SSL2_CLIENT = 0x8,SP_PROT_SSL2 = 0xC,SP_PROT_SSL3_SERVER = 0x10,SP_PROT_SSL3_CLIENT = 0x20,SP_PROT_SSL3 = 0x30,SP_PROT_TLS1_SERVER = 0x40,SP_PROT_TLS1_CLIENT = 0x80,SP_PROT_TLS1 = 0xC0,SP_PROT_SSL3TLS1_CLIENTS = 0xA0,SP_PROT_SSL3TLS1_SERVERS = 0x50,SP_PROT_SSL3TLS1 = 0xF0,SP_PROT_UNI_SERVER = 0x40000000,SP_PROT_UNI_CLIENT = 0x80000000,SP_PROT_UNI = 0xC0000000,SP_PROT_ALL = 0xFFFFFFFF,SP_PROT_NONE = 0x0,SP_PROT_CLIENTS = 0x800000AA,SP_PROT_SERVERS = 0x40000055,};
enum MACRO_SRCCOPY {SRCCOPY = 0xCC0020,};
enum MACRO_STATURL {STATURL_QUERYFLAG_ISCACHED = 0x10000,STATURL_QUERYFLAG_NOURL = 0x20000,STATURL_QUERYFLAG_NOTITLE = 0x40000,STATURL_QUERYFLAG_TOPLEVEL = 0x80000,};
enum MACRO_STDOLE2 {STDOLE2_MAJORVERNUM = 0x2,STDOLE2_MINORVERNUM = 0x0,STDOLE2_LCID = 0x0,};
enum MACRO_STGSTRM {STGSTRM_RESET = 0x0,STGSTRM_CURRENT = 0x10000000,STGSTRM_MODIFY = 0x2,STGSTRM_CREATE = 0x1000,};
enum MACRO_STORAGE {STORAGE_NONPERSISTENT = 0x535447,};
enum MACRO_STRSAFE {STRSAFE_MAX_CCH = 2147483647,STRSAFE_E_INSUFFICIENT_BUFFER = -2147024774,STRSAFE_E_INVALID_PARAMETER = -2147024809,STRSAFE_E_END_OF_FILE = -2147024858,STRSAFE_IGNORE_NULLS = 256,STRSAFE_FILL_BEHIND_NULL = 512,STRSAFE_FILL_ON_FAILURE = 1024,STRSAFE_NULL_ON_FAILURE = 2048,STRSAFE_NO_TRUNCATION = 4096,STRSAFE_VALID_FLAGS = 8191,};
enum MACRO_STXTLEN {STXTLEN = 256,};
enum MACRO_SUBLANG {SUBLANG_NEUTRAL = 0x0,SUBLANG_DEFAULT = 0x1,SUBLANG_SYS_DEFAULT = 0x2,SUBLANG_ARABIC_SAUDI_ARABIA = 0x1,SUBLANG_ARABIC_IRAQ = 0x2,SUBLANG_ARABIC_EGYPT = 0x3,SUBLANG_ARABIC_LIBYA = 0x4,SUBLANG_ARABIC_ALGERIA = 0x5,SUBLANG_ARABIC_MOROCCO = 0x6,SUBLANG_ARABIC_TUNISIA = 0x7,SUBLANG_ARABIC_OMAN = 0x8,SUBLANG_ARABIC_YEMEN = 0x9,SUBLANG_ARABIC_SYRIA = 0xA,SUBLANG_ARABIC_JORDAN = 0xB,SUBLANG_ARABIC_LEBANON = 0xC,SUBLANG_ARABIC_KUWAIT = 0xD,SUBLANG_ARABIC_UAE = 0xE,SUBLANG_ARABIC_BAHRAIN = 0xF,SUBLANG_ARABIC_QATAR = 0x10,SUBLANG_AZERI_LATIN = 0x1,SUBLANG_AZERI_CYRILLIC = 0x2,SUBLANG_CHINESE_TRADITIONAL = 0x1,SUBLANG_CHINESE_SIMPLIFIED = 0x2,SUBLANG_CHINESE_HONGKONG = 0x3,SUBLANG_CHINESE_SINGAPORE = 0x4,SUBLANG_CHINESE_MACAU = 0x5,SUBLANG_DUTCH = 0x1,SUBLANG_DUTCH_BELGIAN = 0x2,SUBLANG_ENGLISH_US = 0x1,SUBLANG_ENGLISH_UK = 0x2,SUBLANG_ENGLISH_AUS = 0x3,SUBLANG_ENGLISH_CAN = 0x4,SUBLANG_ENGLISH_NZ = 0x5,SUBLANG_ENGLISH_EIRE = 0x6,SUBLANG_ENGLISH_SOUTH_AFRICA = 0x7,SUBLANG_ENGLISH_JAMAICA = 0x8,SUBLANG_ENGLISH_CARIBBEAN = 0x9,SUBLANG_ENGLISH_BELIZE = 0xA,SUBLANG_ENGLISH_TRINIDAD = 0xB,SUBLANG_ENGLISH_ZIMBABWE = 0xC,SUBLANG_ENGLISH_PHILIPPINES = 0xD,SUBLANG_FRENCH = 0x1,SUBLANG_FRENCH_BELGIAN = 0x2,SUBLANG_FRENCH_CANADIAN = 0x3,SUBLANG_FRENCH_SWISS = 0x4,SUBLANG_FRENCH_LUXEMBOURG = 0x5,SUBLANG_FRENCH_MONACO = 0x6,SUBLANG_GERMAN = 0x1,SUBLANG_GERMAN_SWISS = 0x2,SUBLANG_GERMAN_AUSTRIAN = 0x3,SUBLANG_GERMAN_LUXEMBOURG = 0x4,SUBLANG_GERMAN_LIECHTENSTEIN = 0x5,SUBLANG_ITALIAN = 0x1,SUBLANG_ITALIAN_SWISS = 0x2,SUBLANG_KASHMIRI_INDIA = 0x2,SUBLANG_KOREAN = 0x1,SUBLANG_LITHUANIAN = 0x1,SUBLANG_LITHUANIAN_CLASSIC = 0x2,SUBLANG_MALAY_MALAYSIA = 0x1,SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x2,SUBLANG_NEPALI_INDIA = 0x2,SUBLANG_NORWEGIAN_BOKMAL = 0x1,SUBLANG_NORWEGIAN_NYNORSK = 0x2,SUBLANG_PORTUGUESE = 0x2,SUBLANG_PORTUGUESE_BRAZILIAN = 0x1,SUBLANG_SERBIAN_LATIN = 0x2,SUBLANG_SERBIAN_CYRILLIC = 0x3,SUBLANG_SPANISH = 0x1,SUBLANG_SPANISH_MEXICAN = 0x2,SUBLANG_SPANISH_MODERN = 0x3,SUBLANG_SPANISH_GUATEMALA = 0x4,SUBLANG_SPANISH_COSTA_RICA = 0x5,SUBLANG_SPANISH_PANAMA = 0x6,SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x7,SUBLANG_SPANISH_VENEZUELA = 0x8,SUBLANG_SPANISH_COLOMBIA = 0x9,SUBLANG_SPANISH_PERU = 0xA,SUBLANG_SPANISH_ARGENTINA = 0xB,SUBLANG_SPANISH_ECUADOR = 0xC,SUBLANG_SPANISH_CHILE = 0xD,SUBLANG_SPANISH_URUGUAY = 0xE,SUBLANG_SPANISH_PARAGUAY = 0xF,SUBLANG_SPANISH_BOLIVIA = 0x10,SUBLANG_SPANISH_EL_SALVADOR = 0x11,SUBLANG_SPANISH_HONDURAS = 0x12,SUBLANG_SPANISH_NICARAGUA = 0x13,SUBLANG_SPANISH_PUERTO_RICO = 0x14,SUBLANG_SWEDISH = 0x1,SUBLANG_SWEDISH_FINLAND = 0x2,SUBLANG_URDU_PAKISTAN = 0x1,SUBLANG_URDU_INDIA = 0x2,SUBLANG_UZBEK_LATIN = 0x1,SUBLANG_UZBEK_CYRILLIC = 0x2,};
enum MACRO_SUCCESS {SUCCESS_SUCCESS = 0,};
enum MACRO_SURFACE {SURFACE_LOCK_EXCLUSIVE = 0x1,SURFACE_LOCK_ALLOW_DISCARD = 0x2,SURFACE_LOCK_WAIT = 0x4,};
enum MACRO_SW_HIDE {SW_HIDE = 0,SW_SHOWNORMAL = 1,SW_SHOWNOACTIVATE = 4,SW_SHOW = 5,SW_MINIMIZE = 6,SW_SHOWNA = 8,SW_SHOWMAXIMIZED = 11,SW_MAXIMIZE = 12,SW_RESTORE = 13,};
enum MACRO_SYNCMGR {SYNCMGR_E_NAME_IN_USE = 0x80040201,SYNCMGR_E_ITEM_UNREGISTERED = 0x80040202,};
enum MACRO_TAPIERR {TAPIERR_CONNECTED = 0,TAPIERR_DROPPED = -1,TAPIERR_NOREQUESTRECIPIENT = -2,TAPIERR_REQUESTQUEUEFULL = -3,TAPIERR_INVALDESTADDRESS = -4,TAPIERR_INVALWINDOWHANDLE = -5,TAPIERR_INVALDEVICECLASS = -6,TAPIERR_INVALDEVICEID = -7,TAPIERR_DEVICECLASSUNAVAIL = -8,TAPIERR_DEVICEIDUNAVAIL = -9,TAPIERR_DEVICEINUSE = -10,TAPIERR_DESTBUSY = -11,TAPIERR_DESTNOANSWER = -12,TAPIERR_DESTUNAVAIL = -13,TAPIERR_UNKNOWNWINHANDLE = -14,TAPIERR_UNKNOWNREQUESTID = -15,TAPIERR_REQUESTFAILED = -16,TAPIERR_REQUESTCANCELLED = -17,TAPIERR_INVALPOINTER = -18,};
enum MACRO_TAPI_CE {TAPI_CE_4X_VERSION = 0x20010,};
enum MACRO_TBLSTAT {TBLSTAT_COMPLETE = 0,TBLSTAT_QCHANGED = 7,TBLSTAT_SORTING = 9,TBLSTAT_SORT_ERROR = 10,TBLSTAT_SETTING_COLS = 11,TBLSTAT_SETCOL_ERROR = 13,TBLSTAT_RESTRICTING = 14,TBLSTAT_RESTRICT_ERROR = 15,};
enum MACRO_TBLTYPE {TBLTYPE_SNAPSHOT = 0,TBLTYPE_KEYSET = 1,TBLTYPE_DYNAMIC = 2,};
enum MACRO_TBSTATE {TBSTATE_CHECKED = 0x1,TBSTATE_PRESSED = 0x2,TBSTATE_ENABLED = 0x4,TBSTATE_HIDDEN = 0x8,TBSTATE_INDETERMINATE = 0x10,TBSTATE_WRAP = 0x20,TBSTATE_ELLIPSES = 0x40,TBSTATE_HIGHLIGHTED = 0x80,};
enum MACRO_TBSTYLE {TBSTYLE_BUTTON = 0x0,TBSTYLE_SEP = 0x1,TBSTYLE_CHECK = 0x2,TBSTYLE_GROUP = 0x4,TBSTYLE_CHECKGROUP = 0x6,TBSTYLE_DROPDOWN = 0x8,TBSTYLE_AUTOSIZE = 0x10,TBSTYLE_TOOLTIPS = 0x100,TBSTYLE_WRAPABLE = 0x200,TBSTYLE_ALTDRAG = 0x400,TBSTYLE_FLAT = 0x800,TBSTYLE_LIST = 0x1000,TBSTYLE_CUSTOMERASE = 0x2000,TBSTYLE_TRANSPARENT = 0x8000,};
enum MACRO_TIME_MS {TIME_MS = 0x1,TIME_SAMPLES = 0x2,TIME_BYTES = 0x4,TIME_SMPTE = 0x8,TIME_MIDI = 0x10,TIME_TICKS = 0x20,};
enum MACRO_TLMENUF {TLMENUF_INCLUDECURRENT = 0x1,TLMENUF_CHECKCURRENT = 0x3,TLMENUF_BACK = 0x10,TLMENUF_FORE = 0x20,TLMENUF_BACKANDFORTH = 0x31,};
enum MACRO_TPCE_TD {TPCE_TD_WAIT = 0x3,TPCE_TD_RDYBSY = 0x1C,TPCE_IO_ADDRLINES = 0x1F,TPCE_IO_BUS8 = 0x20,TPCE_IO_BUS16 = 0x40,TPCE_IO_RANGE = 0x80,TPCE_IO_NUMRANGES = 0xF,TPCE_IO_ADDRSIZE = 0x30,TPCE_IO_LENGTHSIZE = 0xC0,TPCE_IR_IRQN = 0xF,TPCE_IR_NMI = 0x1,TPCE_IR_LOCK = 0x2,TPCE_IR_BERR = 0x4,TPCE_IR_VEND = 0x8,TPCE_IR_MASK = 0x10,TPCE_IR_LEVEL = 0x20,TPCE_IR_PULSE = 0x40,TPCE_IR_SHARE = 0x80,};
enum MACRO_TRUSTEE {TRUSTEE_ACCESS_ALLOWED = 0x1,TRUSTEE_ACCESS_READ = 0x2,TRUSTEE_ACCESS_WRITE = 0x4,TRUSTEE_ACCESS_EXPLICIT = 0x1,TRUSTEE_ACCESS_READ_WRITE = 0x6,TRUSTEE_ACCESS_ALL = 0xFFFFFFFF,};
enum MACRO_TVIF_DI {TVIF_DI_SETITEM = 0x1000,};
enum MACRO_TYPEDID {TYPEDID_MASK = 0xFFFF,};
enum MACRO_URL_OID {URL_OID_CERTIFICATE_ISSUER = 1,URL_OID_CERTIFICATE_CRL_DIST_POINT = 2,URL_OID_CTL_ISSUER = 3,URL_OID_CTL_NEXT_UPDATE = 4,URL_OID_CRL_ISSUER = 5,URL_OID_CERTIFICATE_FRESHEST_CRL = 6,URL_OID_CRL_FRESHEST_CRL = 7,URL_OID_CROSS_CERT_DIST_POINT = 8,};
enum MACRO_VARIANT {VARIANT_TRUE = 0xFFFFFFFF,VARIANT_FALSE = 0x0,};
enum MACRO_VERSION {CEDBASEINFOEX_VERSION = 1,BY_HANDLE_DB_INFORMATION_VERSION = 1,};
enum MACRO_VERTRES {VERTRES = 10,};
enum MACRO_VK_APP1 {VK_APP1 = 0xC1,VK_APP2 = 0xC2,VK_APP3 = 0xC3,VK_APP4 = 0xC4,VK_APP5 = 0xC5,VK_APP6 = 0xC6,};
enum MACRO_WAVEAPI {WAVEAPI_WAPIWAVE = 1,WAVEAPI_WAPIMAP = 1,};
enum MACRO_WAVEOUT {WAVEOUT_MAPPER_STATUS_DEVICE = 0,WAVEOUT_MAPPER_STATUS_MAPPED = 1,WAVEOUT_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WINDOWS {WINDOWS_AF_IRDA = 26,WINDOWS_PF_IRDA = 26,};
enum MACRO_WININET {WININET_PPSTUBS = 1,};
enum MACRO_WINSOCK {WINSOCK_VERSION = 514,};
enum MACRO__FACD3D {_FACD3D = 0x876,};
enum MACRO__FINITE {_FINITE = -1,};
enum MACRO__MCW_DN {_MCW_DN = 0x1000000,};
enum MACRO__MCW_IC {_MCW_IC = 0x40000,};
enum MACRO__MCW_PC {_MCW_PC = 0x30000,};
enum MACRO__MCW_RC {_MCW_RC = 0x300,};
enum MACRO_ctlLast {ctlLast = 0x4FF,};
enum MACRO_dwFORCE {dwFORCE_KEY_PROTECTION_DISABLED = 0x0,dwFORCE_KEY_PROTECTION_USER_SELECT = 0x1,dwFORCE_KEY_PROTECTION_HIGH = 0x2,};
enum MACRO_iitDONT {iitDONT_AUTHENTICATE = 0,};
enum MACRO_pshHelp {pshHelp = 1038,};
typedef struct tagMBOX_MSGCOUNT MBOX_MSGCOUNT;
typedef struct _30C092ACFDACA2A085242C6994837CA9 MCHITTESTINFO;
typedef struct tagMENUITEMINFOA MENUITEMINFOA;
typedef struct tagMENUITEMINFOW MENUITEMINFOW;
typedef struct _MIB_IPADDRROW MIB_IPADDRROW;
typedef struct _MIB_IPDESTROW MIB_IPDESTROW;
typedef struct _MIB_MFE_TABLE MIB_MFE_TABLE;
typedef struct midiproptempo_tag MIDIPROPTEMPO;
typedef struct tagMIMEPARAMINFO MIMEPARAMINFO;
typedef struct tagMODULEENTRY32 MODULEENTRY32;
typedef struct tagMONITORINFOEX MONITORINFOEX;
typedef struct tagMQRESTRICTION MQRESTRICTION;
struct MXXMLWriter30;
typedef struct _5DBE423D59383EF3676E2D6AC9F8E7EA MainAVIHeader;
struct MonikerHelper;
typedef struct tagNMHDDISPINFOA NMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW NMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT NMLVCACHEHINT;
typedef struct tagLVDISPINFO NMLVDISPINFOA;
typedef struct tagLVDISPINFOW NMLVDISPINFOW;
typedef struct tagNMTTDISPIFNOA NMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW NMTTDISPINFOW;
typedef struct tagTVDISPINFOA NMTVDISPINFOA;
typedef struct tagTVDISPINFOW NMTVDISPINFOW;
typedef struct tagNNTPLISTGROUP NNTPLISTGROUP;
typedef struct tagCHARSETINFO *NPCHARSETINFO;
typedef struct tagMIDIINCAPSA *NPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *NPMIDIINCAPSW;
typedef struct tagSOFTKBDDATA *NPSOFTKBDDATA;
typedef struct tagTEXTMETRICA *NPTEXTMETRICA;
typedef struct tagTEXTMETRICW *NPTEXTMETRICW;
typedef struct tagWAVEOUTCAPS *NPWAVEOUTCAPS;
typedef int OAFilterState;
enum OLECMDEXECOPT {OLECMDEXECOPT_DODEFAULT = 0x0,OLECMDEXECOPT_PROMPTUSER = 0x1,OLECMDEXECOPT_DONTPROMPTUSER = 0x2,OLECMDEXECOPT_SHOWHELP = 0x3,};
typedef struct _OLESTREAMVTBL OLESTREAMVTBL;
typedef struct _FC03820C0C9B455049C143518E71A23B OPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 OPENCARDNAMEW;
typedef struct tagOFNA OPENFILENAMEA;
typedef struct tagOFNW OPENFILENAMEW;
typedef struct _ACTRL_ALISTA *PACTRL_AUDITA;
typedef struct _ACTRL_ALISTW *PACTRL_AUDITW;
typedef struct tagPSDA PAGESETUPDLGA;
typedef struct tagPSDW PAGESETUPDLGW;
typedef struct _PARSED_CONFIG PARSED_CONFIG;
typedef struct _BPC_FILETIME *PBPC_FILETIME;
typedef struct _CEL_GDI_INFO *PCEL_GDI_INFO;
typedef struct __CEL_INT_DATA *PCEL_INT_DATA;
typedef struct _CEL_RDP_INFO *PCEL_RDP_INFO;
typedef struct _CERECORDINFO *PCERECORDINFO;
typedef struct _CERT_CONTEXT *PCERT_CONTEXT;
typedef struct _PCI_RSRC_LIST PCI_RSRC_LIST;
typedef struct _CMS_KEY_INFO *PCMS_KEY_INFO;
typedef struct tagPCMWAVEFORMAT PCMWAVEFORMAT;
typedef struct tagCOMBOBOXINFO *PCOMBOBOXINFO;
typedef struct _CREDUI_INFOA *PCREDUI_INFOA;
typedef struct _CREDUI_INFOW *PCREDUI_INFOW;
typedef struct _DATA_WRAPPER *PDATA_WRAPPER;
typedef struct _DEVICEWINDOW_tag *PDEVICEWINDOW;
typedef struct _FE6FD525E979B51115A77BACF8C3F565 *PDMSINVHEADER;
typedef struct _704C8BC5772B0C9E3985D9D11FD57746 *PDMSINVRECORD;
typedef IEnumACString *PENUMACSTRING;
typedef void ( *PFN_CMSG_FREE)(void *pv);
typedef struct _FIREWALL_LOG_ENTRY *PFW_LOG_ENTRY;
typedef struct tagINPUTCONTEXT *PINPUTCONTEXT;
typedef struct ldapcontrolA *PLDAPControlA;
typedef struct ldapcontrolW *PLDAPControlW;
typedef struct ldapsortkeyA *PLDAPSortKeyA;
typedef struct ldapsortkeyW *PLDAPSortKeyW;
typedef struct l_timeval *PLDAP_TIMEVAL;
typedef IMediaSample2 *PMEDIASAMPLE2;
typedef IMediaSeeking *PMEDIASEEKING;
typedef IMemAllocator *PMEMALLOCATOR;
typedef struct _MIBICMPSTATS *PMIBICMPSTATS;
typedef struct _MIB_IFNUMBER *PMIB_IFNUMBER;
typedef struct _MIB_IFSTATUS *PMIB_IFSTATUS;
typedef struct _MIB_IPNETROW *PMIB_IPNETROW;
typedef struct _MIB_PROXYARP *PMIB_PROXYARP;
typedef struct _MIB_TCPSTATS *PMIB_TCPSTATS;
typedef struct _MIB_TCPTABLE *PMIB_TCPTABLE;
typedef struct _MIB_UDPSTATS *PMIB_UDPSTATS;
typedef struct _MIB_UDPTABLE *PMIB_UDPTABLE;
typedef struct tagMIDIOUTCAPSA *PMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *PMIDIOUTCAPSW;
typedef struct tagMIMECSETINFO *PMIMECSETINFO;
typedef struct tMIXERCONTROL *PMIXERCONTROL;
typedef struct MSGQUEUEINFO *PMSGQUEUEINFO;
typedef struct _OBEX_REQUEST *POBEX_REQUEST;
typedef struct _POST_INIT_BUF POST_INIT_BUF;
typedef struct tagPALETTEENTRY *PPALETTEENTRY;
typedef struct _PCI_CFG_INFO *PPCI_CFG_INFO;
typedef struct _PCI_DEV_INFO *PPCI_DEV_INFO;
typedef struct _PPP_EAP_INFO *PPPP_EAP_INFO;
typedef struct _PPP_EAP_INPUT PPP_EAP_INPUT;
typedef struct _PROVDATA_SIP *PPROVDATA_SIP;
typedef struct _PST_TYPEINFO *PPST_TYPEINFO;
typedef struct _PRIVILEGE_SET PRIVILEGE_SET;
typedef struct _PROV_ENUMALGS PROV_ENUMALGS;
typedef struct _SCHANNEL_ALG *PSCHANNEL_ALG;
typedef struct sockaddr_atm *PSOCKADDR_ATM;
typedef struct _SOCKADDR_BTH *PSOCKADDR_BTH;
typedef struct sockaddr_in6 *PSOCKADDR_IN6;
typedef struct _TAPE_PREPARE *PTAPE_PREPARE;
typedef struct _TASK_TRIGGER *PTASK_TRIGGER;
typedef struct THROTTLEITEM *PTHROTTLEITEM;
typedef struct _TOKEN_GROUPS *PTOKEN_GROUPS;
typedef struct _TOKEN_SOURCE *PTOKEN_SOURCE;
typedef struct _USB_ENDPOINT *PUSB_ENDPOINT;
typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
typedef struct _WSAQuerySetA *PWSAQUERYSETA;
typedef struct _WSAQuerySetW *PWSAQUERYSETW;
typedef struct tagProxyFileInfo ProxyFileInfo;
typedef struct _RB_HITTESTINFO RBHITTESTINFO;
typedef struct __MIDL___MIDL_itf_strmif_0080_0002 REGFILTERPINS;
typedef struct tagREGISTERWORDA REGISTERWORDA;
typedef struct tagREGISTERWORDW REGISTERWORDW;
typedef struct _RGNDATAHEADER RGNDATAHEADER;
typedef unsigned int RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE RPCOLEMESSAGE;
typedef void *RPC_IF_HANDLE;
typedef void *RPC_NS_HANDLE;
enum RTC_ACE_SCOPE {RTCAS_SCOPE_USER = 0x0,RTCAS_SCOPE_DOMAIN = 0x1,RTCAS_SCOPE_ALL = 0x2,};
enum RTC_PORT_TYPE {RTCPT_AUDIO_RTP = 0x0,RTCPT_AUDIO_RTCP = 0x1,RTCPT_VIDEO_RTP = 0x2,RTCPT_VIDEO_RTCP = 0x3,RTCPT_SIP = 0x4,};
enum RTC_RING_TYPE {RTCRT_PHONE = 0x0,RTCRT_MESSAGE = 0x1,RTCRT_RINGBACK = 0x2,};
struct SAXAttributes;
typedef struct _SAppTimeArray SAppTimeArray;
typedef struct _SCARD_ATRMASK SCARD_ATRMASK;
typedef struct _SCHANNEL_CRED SCHANNEL_CRED;
typedef struct tagSHINITDLGINFO SHINITDLGINFO;
typedef struct tagSHMENUBARINFO SHMENUBARINFO;
typedef struct _SOCKADDR_IRDA SOCKADDR_IRDA;
typedef struct _SORTORDERSPEC SORTORDERSPEC;
typedef struct _SPropTagArray SPropTagArray;
typedef struct _SSLCLIENTOPTS SSLCLIENTOPTS;
typedef struct _SSLSERVEROPTS SSLSERVEROPTS;
typedef struct _SSortOrderSet SSortOrderSet;
typedef struct _STGOVERLAPPED STGOVERLAPPED;
typedef struct _SWStringArray SWStringArray;
struct SearchCommand;
typedef struct _SecBufferDesc SecBufferDesc;
struct ServerXMLHTTP;
struct ShellUIHelper;
struct SoapConnector;
typedef struct tagStorageLayout StorageLayout;
typedef struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 TBBUTTONINFOA;
typedef struct _8688FBDBF9FB8D670D1638B47BFC0FAD TBBUTTONINFOW;
typedef struct tagTCHITTESTINFO TCHITTESTINFO;
typedef struct tagTCITEMHEADERA TCITEMHEADERA;
typedef struct tagTCITEMHEADERW TCITEMHEADERW;
typedef struct tagTHREADENTRY32 THREADENTRY32;
struct TIMEAnimation;
typedef struct _TOKEN_CONTROL TOKEN_CONTROL;
typedef struct tag_TRUECOLORINFO TRUECOLORINFO;
typedef struct tagTVHITTESTINFO TVHITTESTINFO;
struct UPnPRegistrar;
typedef struct _USB_INTERFACE USB_INTERFACE;
enum VoIPCallEvent {e_vceInvalid = 0x0,e_vceStatusChanged = 0x1,e_vceMissed = 0x2,e_vceAutoBlocked = 0x3,e_vceAutoForwarded = 0x4,e_vceDropped = 0x5,e_vceRedirectSucceeded = 0x6,e_vceRedirectFailed = 0x7,};
struct VoIPCallLogDB;
typedef struct _WABEXTDISPLAY WABEXTDISPLAY;
typedef struct _WCE_IAS_QUERY WCE_IAS_QUERY;
typedef struct _WINTRUST_DATA WINTRUST_DATA;
typedef struct _SHORT_SIZEDARR WORD_SIZEDARR;
typedef struct _WSACOMPLETION WSACOMPLETION;
struct WSDLOperation;
typedef struct _WSPPROC_TABLE WSPPROC_TABLE;
struct WebBrowser_V1;
enum XACTHEURISTIC {XACTHEURISTIC_ABORT = 0x1,XACTHEURISTIC_COMMIT = 0x2,XACTHEURISTIC_DAMAGE = 0x3,XACTHEURISTIC_DANGER = 0x4,};
typedef struct _XML_NODE_INFO XML_NODE_INFO;
struct XSLTemplate26;
struct XSLTemplate30;
enum _COORD_SYSTEM {COORD_SYSTEM_GLOBAL = 0x0,COORD_SYSTEM_PARENT = 0x1,COORD_SYSTEM_CONTAINER = 0x2,COORD_SYSTEM_CONTENT = 0x3,COORD_SYSTEM_FRAME = 0x4,COORD_SYSTEM_Max = 0x7FFFFFFF,};
enum _D3DBASISTYPE {D3DBASIS_BEZIER = 0x0,D3DBASIS_BSPLINE = 0x1,D3DBASIS_INTERPOLATE = 0x2,D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DLIGHTTYPE {D3DLIGHT_POINT = 0x1,D3DLIGHT_SPOT = 0x2,D3DLIGHT_DIRECTIONAL = 0x3,D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DORDERTYPE {D3DORDER_LINEAR = 0x1,D3DORDER_QUADRATIC = 0x2,D3DORDER_CUBIC = 0x3,D3DORDER_QUINTIC = 0x5,D3DORDER_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSHADEMODE {D3DSHADE_FLAT = 0x1,D3DSHADE_GOURAUD = 0x2,D3DSHADE_PHONG = 0x3,D3DSHADE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DSTENCILOP {D3DSTENCILOP_KEEP = 0x1,D3DSTENCILOP_ZERO = 0x2,D3DSTENCILOP_REPLACE = 0x3,D3DSTENCILOP_INCRSAT = 0x4,D3DSTENCILOP_DECRSAT = 0x5,D3DSTENCILOP_INVERT = 0x6,D3DSTENCILOP_INCR = 0x7,D3DSTENCILOP_DECR = 0x8,D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DTEXTUREOP {D3DTOP_DISABLE = 0x1,D3DTOP_SELECTARG1 = 0x2,D3DTOP_SELECTARG2 = 0x3,D3DTOP_MODULATE = 0x4,D3DTOP_MODULATE2X = 0x5,D3DTOP_MODULATE4X = 0x6,D3DTOP_ADD = 0x7,D3DTOP_ADDSIGNED = 0x8,D3DTOP_ADDSIGNED2X = 0x9,D3DTOP_SUBTRACT = 0xA,D3DTOP_ADDSMOOTH = 0xB,D3DTOP_BLENDDIFFUSEALPHA = 0xC,D3DTOP_BLENDTEXTUREALPHA = 0xD,D3DTOP_BLENDFACTORALPHA = 0xE,D3DTOP_BLENDTEXTUREALPHAPM = 0xF,D3DTOP_BLENDCURRENTALPHA = 0x10,D3DTOP_PREMODULATE = 0x11,D3DTOP_MODULATEALPHA_ADDCOLOR = 0x12,D3DTOP_MODULATECOLOR_ADDALPHA = 0x13,D3DTOP_MODULATEINVALPHA_ADDCOLOR = 0x14,D3DTOP_MODULATEINVCOLOR_ADDALPHA = 0x15,D3DTOP_BUMPENVMAP = 0x16,D3DTOP_BUMPENVMAPLUMINANCE = 0x17,D3DTOP_DOTPRODUCT3 = 0x18,D3DTOP_MULTIPLYADD = 0x19,D3DTOP_LERP = 0x1A,D3DTOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _FILTER_FLAGS {FILTER_FLAGS_PAGETRANSITION = 0x1,FILTER_FLAGS_Max = 0x7FFFFFFF,};
typedef struct _8474248025A8750E00C60BF8466F1484 _FPIEEE_VALUE;
enum _HTML_PAINTER {HTMLPAINTER_OPAQUE = 0x1,HTMLPAINTER_TRANSPARENT = 0x2,HTMLPAINTER_ALPHA = 0x4,HTMLPAINTER_COMPLEX = 0x8,HTMLPAINTER_OVERLAY = 0x10,HTMLPAINTER_HITTEST = 0x20,HTMLPAINTER_SURFACE = 0x100,HTMLPAINTER_3DSURFACE = 0x200,HTMLPAINTER_NOBAND = 0x400,HTMLPAINTER_NODC = 0x1000,HTMLPAINTER_NOPHYSICALCLIP = 0x2000,HTMLPAINTER_NOSAVEDC = 0x4000,HTMLPAINTER_SUPPORTS_XFORM = 0x8000,HTMLPAINTER_EXPAND = 0x10000,HTMLPAINTER_NOSCROLLBITS = 0x20000,HTML_PAINTER_Max = 0x7FFFFFFF,};
enum _PinDirection {PINDIR_INPUT = 0x0,PINDIR_OUTPUT = 0x1,};
enum _SID_NAME_USE {SidTypeUser = 0x1,SidTypeGroup = 0x2,SidTypeDomain = 0x3,SidTypeAlias = 0x4,SidTypeWellKnownGroup = 0x5,SidTypeDeletedAccount = 0x6,SidTypeInvalid = 0x7,SidTypeUnknown = 0x8,SidTypeComputer = 0x9,};
enum _TRUSTEE_FORM {TRUSTEE_IS_SID = 0x0,TRUSTEE_IS_NAME = 0x1,TRUSTEE_BAD_FORM = 0x2,};
enum _TRUSTEE_TYPE {TRUSTEE_IS_UNKNOWN = 0x0,TRUSTEE_IS_USER = 0x1,TRUSTEE_IS_GROUP = 0x2,TRUSTEE_IS_DOMAIN = 0x3,TRUSTEE_IS_ALIAS = 0x4,TRUSTEE_IS_WELL_KNOWN_GROUP = 0x5,TRUSTEE_IS_DELETED = 0x6,TRUSTEE_IS_INVALID = 0x7,};
enum _htmlEditable {htmlEditableInherit = 0x0,htmlEditableTrue = 0x1,htmlEditableFalse = 0x2,htmlEditable_Max = 0x7FFFFFFF,};
enum _htmlEncoding {htmlEncodingURL = 0x0,htmlEncodingMultipart = 0x1,htmlEncodingText = 0x2,htmlEncoding_Max = 0x7FFFFFFF,};
enum _htmlListType {htmlListTypeNotSet = 0x0,htmlListTypeLargeAlpha = 0x1,htmlListTypeSmallAlpha = 0x2,htmlListTypeLargeRoman = 0x3,htmlListTypeSmallRoman = 0x4,htmlListTypeNumbers = 0x5,htmlListTypeDisc = 0x6,htmlListTypeCircle = 0x7,htmlListTypeSquare = 0x8,htmlListType_Max = 0x7FFFFFFF,};
enum _htmlTabIndex {htmlTabIndexNotSet = 0xFFFF8000,htmlTabIndex_Max = 0x7FFFFFFF,};
enum _styleDisplay {styleDisplayNotSet = 0x0,styleDisplayBlock = 0x1,styleDisplayInline = 0x2,styleDisplayListItem = 0x3,styleDisplayNone = 0x4,styleDisplayTableHeaderGroup = 0x5,styleDisplayTableFooterGroup = 0x6,styleDisplayInlineBlock = 0x7,styleDisplay_Max = 0x7FFFFFFF,};
enum _styleImeMode {styleImeModeAuto = 0x0,styleImeModeActive = 0x1,styleImeModeInactive = 0x2,styleImeModeDisabled = 0x3,styleImeModeNotSet = 0x4,styleImeMode_Max = 0x7FFFFFFF,};
enum _tagDVD_ERROR {DVD_ERROR_Unexpected = 0x1,DVD_ERROR_CopyProtectFail = 0x2,DVD_ERROR_InvalidDVD1_0Disc = 0x3,DVD_ERROR_InvalidDiscRegion = 0x4,DVD_ERROR_LowParentalLevel = 0x5,DVD_ERROR_MacrovisionFail = 0x6,DVD_ERROR_IncompatibleSystemAndDecoderRegions = 0x7,DVD_ERROR_IncompatibleDiscAndDecoderRegions = 0x8,};
enum _tagGROUPMODE {GM_GROUP_SEQUENTIAL = 0x1,};
enum _tagPSUACTION {PSU_DEFAULT = 0x1,PSU_SECURITY_URL_ONLY = 0x2,};
struct adpcmcoef_tag {short iCoef1;short iCoef2;};
typedef struct tagrpcLOGPALETTE rpcLOGPALETTE;
enum tagBINDSTATUS {BINDSTATUS_FINDINGRESOURCE = 0x1,BINDSTATUS_CONNECTING = 0x2,BINDSTATUS_REDIRECTING = 0x3,BINDSTATUS_BEGINDOWNLOADDATA = 0x4,BINDSTATUS_DOWNLOADINGDATA = 0x5,BINDSTATUS_ENDDOWNLOADDATA = 0x6,BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,BINDSTATUS_USINGCACHEDCOPY = 0xA,BINDSTATUS_SENDINGREQUEST = 0xB,BINDSTATUS_CLASSIDAVAILABLE = 0xC,BINDSTATUS_MIMETYPEAVAILABLE = 0xD,BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,BINDSTATUS_BEGINSYNCOPERATION = 0xF,BINDSTATUS_ENDSYNCOPERATION = 0x10,BINDSTATUS_BEGINUPLOADDATA = 0x11,BINDSTATUS_UPLOADINGDATA = 0x12,BINDSTATUS_ENDUPLOADDATA = 0x13,BINDSTATUS_PROTOCOLCLASSID = 0x14,BINDSTATUS_ENCODING = 0x15,BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,BINDSTATUS_CLASSINSTALLLOCATION = 0x17,BINDSTATUS_DECODING = 0x18,BINDSTATUS_LOADINGMIMEHANDLER = 0x19,BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,BINDSTATUS_FILTERREPORTMIMETYPE = 0x1B,BINDSTATUS_CLSIDCANINSTANTIATE = 0x1C,BINDSTATUS_IUNKNOWNAVAILABLE = 0x1D,BINDSTATUS_DIRECTBIND = 0x1E,BINDSTATUS_RAWMIMETYPE = 0x1F,BINDSTATUS_PROXYDETECTING = 0x20,BINDSTATUS_ACCEPTRANGES = 0x21,BINDSTATUS_COOKIE_SENT = 0x22,BINDSTATUS_COOKIE_RECEIVED = 0x23,BINDSTATUS_COOKIE_SUPPRESSED = 0x24,BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,BINDSTATUS_COOKIE_STATE_REJECT = 0x27,BINDSTATUS_COOKIE_STATE_NO_POLICY = 0x28,BINDSTATUS_COOKIE_STATE_POLICY_ERROR = 0x29,BINDSTATUS_COOKIE_STATE_EVAL_ERROR = 0x2A,BINDSTATUS_PRIVACY_IMPACTED = 0x2B,};
enum tagBINDSTRING {BINDSTRING_HEADERS = 0x1,BINDSTRING_ACCEPT_MIMES = 0x2,BINDSTRING_EXTRA_URL = 0x3,BINDSTRING_LANGUAGE = 0x4,BINDSTRING_USERNAME = 0x5,BINDSTRING_PASSWORD = 0x6,BINDSTRING_UA_PIXELS = 0x7,BINDSTRING_UA_COLOR = 0x8,BINDSTRING_OS = 0x9,BINDSTRING_USER_AGENT = 0xA,BINDSTRING_ACCEPT_ENCODINGS = 0xB,BINDSTRING_POST_COOKIE = 0xC,BINDSTRING_POST_DATA_MIME = 0xD,BINDSTRING_URL = 0xE,BINDSTRING_IID = 0xF,BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,BINDSTRING_PTR_BIND_CONTEXT = 0x11,};
enum tagBIND_FLAGS {BIND_MAYBOTHERUSER = 0x1,BIND_JUSTTESTEXISTENCE = 0x2,};
enum tagCERTDATAID {CDID_EMAIL = 0x0,CDID_MAX = 0x1,};
enum tagCHANGEKIND {CHANGEKIND_ADDMEMBER = 0x0,CHANGEKIND_DELETEMEMBER = 0x1,CHANGEKIND_SETNAMES = 0x2,CHANGEKIND_SETDOCUMENTATION = 0x3,CHANGEKIND_GENERAL = 0x4,CHANGEKIND_INVALIDATE = 0x5,CHANGEKIND_CHANGEFAILED = 0x6,CHANGEKIND_MAX = 0x7,};
enum tagCHUNKSTATE {CHUNK_TEXT = 0x1,CHUNK_VALUE = 0x2,};
enum tagDBBOOKMARK {DBBMK_INVALID = 0x0,DBBMK_FIRST = 0x1,DBBMK_LAST = 0x2,};
enum tagDVD_DOMAIN {DVD_DOMAIN_FirstPlay = 0x1,DVD_DOMAIN_VideoManagerMenu = 0x2,DVD_DOMAIN_VideoTitleSetMenu = 0x3,DVD_DOMAIN_Title = 0x4,DVD_DOMAIN_Stop = 0x5,};
enum tagExtentMode {DVEXTENT_CONTENT = 0x0,DVEXTENT_INTEGRAL = 0x1,};
enum tagFNTSYSTYPE {FNT_SYS_ICON = 0x0,FNT_SYS_ICON_BOLD = 0x1,FNT_SYS_MENU = 0x2,FNT_SYS_ICON_STRIKEOUT = 0x3,FNT_SYS_LAST = 0x4,};
enum tagINVOKEKIND {INVOKE_FUNC = 0x1,INVOKE_PROPERTYGET = 0x2,INVOKE_PROPERTYPUT = 0x4,INVOKE_PROPERTYPUTREF = 0x8,};
enum tagIXPISSTATE {IXP_IS_CONNECTED = 0x0,IXP_IS_BUSY = 0x1,IXP_IS_READY = 0x2,IXP_IS_AUTHENTICATED = 0x3,};
enum tagMIMEPROPID {PID_HDR_NEWSGROUP = 0x2,PID_HDR_NEWSGROUPS = 0x3,PID_HDR_REFS = 0x4,PID_HDR_SUBJECT = 0x5,PID_HDR_FROM = 0x6,PID_HDR_MESSAGEID = 0x7,PID_HDR_RETURNPATH = 0x8,PID_HDR_RR = 0x9,PID_HDR_RETRCPTTO = 0xA,PID_HDR_APPARTO = 0xB,PID_HDR_DATE = 0xC,PID_HDR_RECEIVED = 0xD,PID_HDR_REPLYTO = 0xE,PID_HDR_XMAILER = 0xF,PID_HDR_BCC = 0x10,PID_HDR_MIMEVER = 0x11,PID_HDR_CNTTYPE = 0x12,PID_HDR_CNTXFER = 0x13,PID_HDR_CNTID = 0x14,PID_HDR_CNTDESC = 0x15,PID_HDR_CNTDISP = 0x16,PID_HDR_CNTBASE = 0x17,PID_HDR_CNTLOC = 0x18,PID_HDR_TO = 0x19,PID_HDR_PATH = 0x1A,PID_HDR_FOLLOWUPTO = 0x1B,PID_HDR_EXPIRES = 0x1C,PID_HDR_CC = 0x1D,PID_HDR_CONTROL = 0x1E,PID_HDR_DISTRIB = 0x1F,PID_HDR_KEYWORDS = 0x20,PID_HDR_SUMMARY = 0x21,PID_HDR_APPROVED = 0x22,PID_HDR_LINES = 0x23,PID_HDR_XREF = 0x24,PID_HDR_ORG = 0x25,PID_HDR_XNEWSRDR = 0x26,PID_HDR_XPRI = 0x27,PID_HDR_XMSPRI = 0x28,PID_PAR_FILENAME = 0x29,PID_PAR_BOUNDARY = 0x2A,PID_PAR_CHARSET = 0x2B,PID_PAR_NAME = 0x2C,PID_ATT_FILENAME = 0x2D,PID_ATT_GENFNAME = 0x2E,PID_ATT_PRITYPE = 0x2F,PID_ATT_SUBTYPE = 0x30,PID_ATT_NORMSUBJ = 0x31,PID_ATT_ILLEGAL = 0x32,PID_ATT_RENDERED = 0x33,PID_ATT_SENTTIME = 0x34,PID_ATT_RECVTIME = 0x35,PID_ATT_PRIORITY = 0x36,PID_HDR_COMMENT = 0x37,PID_HDR_ENCODING = 0x38,PID_HDR_ENCRYPTED = 0x39,PID_HDR_OFFSETS = 0x3A,PID_HDR_XUNSENT = 0x3B,PID_HDR_ARTICLEID = 0x3C,PID_HDR_SENDER = 0x3D,PID_ATT_SERVER = 0x3E,PID_ATT_ACCOUNT = 0x3F,PID_ATT_UIDL = 0x40,PID_ATT_STOREMSGID = 0x41,PID_ATT_USERNAME = 0x42,PID_ATT_FORWARDTO = 0x43,PID_ATT_STOREFOLDERID = 0x44,PID_ATT_GHOSTED = 0x45,PID_ATT_UNCACHEDSIZE = 0x46,PID_ATT_COMBINED = 0x47,PID_ATT_AUTOINLINED = 0x48,PID_LAST = 0x49,};
enum tagMLDETECTCP {MLDETECTCP_NONE = 0x0,MLDETECTCP_7BIT = 0x1,MLDETECTCP_8BIT = 0x2,MLDETECTCP_DBCS = 0x4,MLDETECTCP_HTML = 0x8,MLDETECTCP_NUMBER = 0x10,};
enum tagNCRP_FLAGS {NCRP_QUERY_PROPERTY_UI = 0x1,NCRP_SHOW_PROPERTY_UI = 0x2,};
enum tagOLEDCFLAGS {OLEDC_NODRAW = 0x1,OLEDC_PAINTBKGND = 0x2,OLEDC_OFFSCREEN = 0x4,};
enum tagOLEWHICHMK {OLEWHICHMK_CONTAINER = 0x1,OLEWHICHMK_OBJREL = 0x2,OLEWHICHMK_OBJFULL = 0x3,};
enum tagPENDINGMSG {PENDINGMSG_CANCELCALL = 0x0,PENDINGMSG_WAITNOPROCESS = 0x1,PENDINGMSG_WAITDEFPROCESS = 0x2,};
enum tagREADYSTATE {READYSTATE_UNINITIALIZED = 0x0,READYSTATE_LOADING = 0x1,READYSTATE_LOADED = 0x2,READYSTATE_INTERACTIVE = 0x3,READYSTATE_COMPLETE = 0x4,};
enum tagRELOADTYPE {RELOAD_HEADER_NONE = 0x0,RELOAD_HEADER_RESET = 0x1,RELOAD_HEADER_APPEND = 0x2,RELOAD_HEADER_REPLACE = 0x3,};
enum tagSERVERCALL {SERVERCALL_ISHANDLED = 0x0,SERVERCALL_REJECTED = 0x1,SERVERCALL_RETRYLATER = 0x2,};
enum tagVIEWSTATUS {VIEWSTATUS_OPAQUE = 0x1,VIEWSTATUS_SOLIDBKGND = 0x2,VIEWSTATUS_DVASPECTOPAQUE = 0x4,VIEWSTATUS_DVASPECTTRANSPARENT = 0x8,};
typedef struct _userHMETAFILE userHMETAFILE;
typedef struct _userSTGMEDIUM userSTGMEDIUM;
typedef struct _wireSAFEARRAY *wireSAFEARRAY;
typedef struct tagACCTLISTINFO ACCTLISTINFO;
typedef struct _ACTRL_ALISTA ACTRL_AUDITA;
typedef struct _ACTRL_ALISTW ACTRL_AUDITW;
typedef struct tagADDRESSPROPS ADDRESSPROPS;
typedef struct adpcmcoef_tag ADPCMCOEFSET;
typedef struct _AMVPDATAINFO AMVPDATAINFO;
typedef struct _A615A68A66448D8BF4E7E81F3C279570 ATM_CAUSE_IE;
typedef struct _aviextheader AVIEXTHEADER;
typedef struct _avimetaindex AVIMETAINDEX;
typedef struct _0302F8A06E19F526F6B7CE33122C2128 AVIPALCHANGE;
typedef struct _avitcdlindex AVITCDLINDEX;
typedef struct _BPC_FILETIME BPC_FILETIME;
struct BlockFormats;
struct BthTransport;
typedef struct CATALOG_INFO_ CATALOG_INFO;
typedef struct tagCATEGORYINFO CATEGORYINFO;
typedef struct _CEL_GDI_INFO CEL_GDI_INFO;
typedef struct __CEL_INT_DATA CEL_INT_DATA;
typedef struct _CEL_RDP_INFO CEL_RDP_INFO;
typedef struct _CERECORDINFO CERECORDINFO;
typedef struct _CERT_CONTEXT CERT_CONTEXT;
struct CMLangString;
typedef struct _CMS_KEY_INFO CMS_KEY_INFO;
typedef struct _tagCODEBASEHOLD CODEBASEHOLD;
typedef struct tagCODEPAGEINFO CODEPAGEINFO;
typedef struct tagCOMBOBOXINFO COMBOBOXINFO;
typedef struct _COMMTIMEOUTS COMMTIMEOUTS;
typedef struct _COSERVERINFO COSERVERINFO;
typedef struct _CREDUI_INFOA CREDUI_INFOA;
typedef struct _CREDUI_INFOW CREDUI_INFOW;
struct CRadioButton;
typedef struct _currencyfmtA CURRENCYFMTA;
typedef struct _currencyfmtW CURRENCYFMTW;
typedef struct tagCUSTDATAITEM CUSTDATAITEM;
struct ChannelAgent;
typedef struct _D3DGAMMARAMP D3DGAMMARAMP;
typedef struct _D3DMATERIAL8 D3DMATERIAL8;
typedef struct _D3DVIEWPORT8 D3DVIEWPORT8;
typedef struct _DATA_WRAPPER DATA_WRAPPER;
typedef struct tagDBCOLUMNDESC DBCOLUMNDESC;
typedef struct tagDBCOLUMNINFO DBCOLUMNINFO;
enum DBPROPENUM15 {DBPROP_FILTERCOMPAREOPS = 0xD1,DBPROP_FINDCOMPAREOPS = 0xD2,DBPROP_IChapteredRowset = 0xCA,DBPROP_IDBAsynchStatus = 0xCB,DBPROP_IRowsetFind = 0xCC,DBPROP_IRowsetView = 0xD4,DBPROP_IViewChapter = 0xD5,DBPROP_IViewFilter = 0xD6,DBPROP_IViewRowset = 0xD7,DBPROP_IViewSort = 0xD8,DBPROP_INIT_ASYNCH = 0xC8,DBPROP_MAXOPENCHAPTERS = 0xC7,DBPROP_MAXORSINFILTER = 0xCD,DBPROP_MAXSORTCOLUMNS = 0xCE,DBPROP_ROWSET_ASYNCH = 0xC9,DBPROP_SORTONINDEX = 0xCF,};
enum DBPROPENUM20 {DBPROP_IMultipleResults = 0xD9,DBPROP_DATASOURCE_TYPE = 0xFB,MDPROP_AXES = 0xFC,MDPROP_FLATTENING_SUPPORT = 0xFD,MDPROP_MDX_JOINCUBES = 0xFE,MDPROP_NAMED_LEVELS = 0xFF,MDPROP_RANGEROWSET = 0x100,MDPROP_MDX_SLICER = 0xDA,MDPROP_MDX_CUBEQUALIFICATION = 0xDB,MDPROP_MDX_OUTERREFERENCE = 0xDC,MDPROP_MDX_QUERYBYPROPERTY = 0xDD,MDPROP_MDX_CASESUPPORT = 0xDE,MDPROP_MDX_STRING_COMPOP = 0xE0,MDPROP_MDX_DESCFLAGS = 0xE1,MDPROP_MDX_SET_FUNCTIONS = 0xE2,MDPROP_MDX_MEMBER_FUNCTIONS = 0xE3,MDPROP_MDX_NUMERIC_FUNCTIONS = 0xE4,MDPROP_MDX_FORMULAS = 0xE5,MDPROP_AGGREGATECELL_UPDATE = 0xE6,MDPROP_MDX_AGGREGATECELL_UPDATE = 0xE6,MDPROP_MDX_OBJQUALIFICATION = 0x105,MDPROP_MDX_NONMEASURE_EXPRESSONS = 0x106,DBPROP_ACCESSORDER = 0xE7,DBPROP_BOOKMARKINFO = 0xE8,DBPROP_INIT_CATALOG = 0xE9,DBPROP_ROW_BULKOPS = 0xEA,DBPROP_PROVIDERFRIENDLYNAME = 0xEB,DBPROP_LOCKMODE = 0xEC,DBPROP_MULTIPLECONNECTIONS = 0xED,DBPROP_UNIQUEROWS = 0xEE,DBPROP_SERVERDATAONINSERT = 0xEF,DBPROP_STORAGEFLAGS = 0xF0,DBPROP_CONNECTIONSTATUS = 0xF4,DBPROP_ALTERCOLUMN = 0xF5,DBPROP_COLUMNLCID = 0xF6,DBPROP_RESETDATASOURCE = 0xF7,DBPROP_INIT_OLEDBSERVICES = 0xF8,DBPROP_IRowsetRefresh = 0xF9,DBPROP_SERVERNAME = 0xFA,DBPROP_IParentRowset = 0x101,DBPROP_HIDDENCOLUMNS = 0x102,DBPROP_PROVIDERMEMORY = 0x103,DBPROP_CLIENTCURSOR = 0x104,};
enum DBPROPENUM21 {DBPROP_TRUSTEE_USERNAME = 0xF1,DBPROP_TRUSTEE_AUTHENTICATION = 0xF2,DBPROP_TRUSTEE_NEWAUTHENTICATION = 0xF3,DBPROP_IRow = 0x107,DBPROP_IRowChange = 0x108,DBPROP_IRowSchemaChange = 0x109,DBPROP_IGetRow = 0x10A,DBPROP_IScopedOperations = 0x10B,DBPROP_IBindResource = 0x10C,DBPROP_ICreateRow = 0x10D,DBPROP_INIT_BINDFLAGS = 0x10E,DBPROP_INIT_LOCKOWNER = 0x10F,DBPROP_GENERATEURL = 0x111,DBPROP_IDBBinderProperties = 0x112,DBPROP_IColumnsInfo2 = 0x113,DBPROP_IRegisterProvider = 0x114,DBPROP_IGetSession = 0x115,DBPROP_IGetSourceRow = 0x116,DBPROP_IRowsetCurrentIndex = 0x117,DBPROP_OPENROWSETSUPPORT = 0x118,DBPROP_COL_ISLONG = 0x119,};
enum DBPROPENUM25 {DBPROP_COL_SEED = 0x11A,DBPROP_COL_INCREMENT = 0x11B,DBPROP_INIT_GENERALTIMEOUT = 0x11C,DBPROP_COMSERVICES = 0x11D,};
enum DBREASONENUM {DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0x0,DBREASON_ROWSET_RELEASE = 0x1,DBREASON_COLUMN_SET = 0x2,DBREASON_COLUMN_RECALCULATED = 0x3,DBREASON_ROW_ACTIVATE = 0x4,DBREASON_ROW_RELEASE = 0x5,DBREASON_ROW_DELETE = 0x6,DBREASON_ROW_FIRSTCHANGE = 0x7,DBREASON_ROW_INSERT = 0x8,DBREASON_ROW_RESYNCH = 0x9,DBREASON_ROW_UNDOCHANGE = 0xA,DBREASON_ROW_UNDOINSERT = 0xB,DBREASON_ROW_UNDODELETE = 0xC,DBREASON_ROW_UPDATE = 0xD,DBREASON_ROWSET_CHANGED = 0xE,};
enum DBSTATUSENUM {DBSTATUS_S_OK = 0x0,DBSTATUS_E_BADACCESSOR = 0x1,DBSTATUS_E_CANTCONVERTVALUE = 0x2,DBSTATUS_S_ISNULL = 0x3,DBSTATUS_S_TRUNCATED = 0x4,DBSTATUS_E_SIGNMISMATCH = 0x5,DBSTATUS_E_DATAOVERFLOW = 0x6,DBSTATUS_E_CANTCREATE = 0x7,DBSTATUS_E_UNAVAILABLE = 0x8,DBSTATUS_E_PERMISSIONDENIED = 0x9,DBSTATUS_E_INTEGRITYVIOLATION = 0xA,DBSTATUS_E_SCHEMAVIOLATION = 0xB,DBSTATUS_E_BADSTATUS = 0xC,DBSTATUS_S_DEFAULT = 0xD,};
enum DBTYPEENUM15 {DBTYPE_HCHAPTER = 0x88,};
enum DBTYPEENUM20 {DBTYPE_FILETIME = 0x40,DBTYPE_PROPVARIANT = 0x8A,DBTYPE_VARNUMERIC = 0x8B,};
typedef union _DDALPHABLTFX DDALPHABLTFX;
typedef struct _03D431463D1B1B07D135EFD405717ACF DESKBANDINFO;
typedef struct _DEVICEWINDOW_tag DEVICEWINDOW;
struct DFConstraint {struct DFConstraintVtbl *lpVtbl;};
typedef struct _FE6FD525E979B51115A77BACF8C3F565 DMSINVHEADER;
typedef struct _704C8BC5772B0C9E3985D9D11FD57746 DMSINVRECORD;
typedef struct _17F3FD07C99F0D37811DB8E7808607BC DOWNLOADSITE;
typedef struct _DSBUFFERDESC DSBUFFERDESC;
struct DSOControl26;
struct DSOControl30;
typedef struct _DTBLCHECKBOX DTBLCHECKBOX;
typedef struct _DTBLCOMBOBOX DTBLCOMBOBOX;
typedef struct _DTBLGROUPBOX DTBLGROUPBOX;
typedef struct tagAspectInfo DVASPECTINFO;
typedef struct _structDVD_POS_CODE DVD_POS_CODE;
typedef struct tagDVD_TIMECODE DVD_TIMECODE;
typedef struct tagExtentInfo DVEXTENTINFO;
enum DX2DGRADIENT {DX2DGRAD_DEFAULT = 0x0,DX2DGRAD_CLIPGRADIENT = 0x1,DX2DGRAD_UNUSED = 0xFFFFFFFE,};
enum DX2DPOLYDRAW {DX2D_WINDING_FILL = 0x1,DX2D_NO_FLATTEN = 0x2,DX2D_DO_GRID_FIT = 0x4,DX2D_IS_RECT = 0x8,DX2D_STROKE = 0x10,DX2D_FILL = 0x20,DX2D_UNUSED = 0xFFFFFFC0,};
enum DX2DXFORMOPS {DX2DXO_IDENTITY = 0x0,DX2DXO_TRANSLATE = 0x1,DX2DXO_SCALE = 0x2,DX2DXO_SCALE_AND_TRANS = 0x3,DX2DXO_GENERAL = 0x4,DX2DXO_GENERAL_AND_TRANS = 0x5,};
enum DXBLTOPTIONS {DXBOF_DO_OVER = 0x1,DXBOF_DITHER = 0x2,};
enum DXEFFECTTYPE {DXTET_PERIODIC = 0x1,DXTET_MORPH = 0x2,};
enum DXRASTERFILL {DXRASTER_PEN = 0x0,DXRASTER_BRUSH = 0x1,DXRASTER_BACKGROUND = 0x2,};
struct DXRasterizer;
enum DXSURFSTATUS {DXSURF_TRANSIENT = 0x1,DXSURF_READONLY = 0x2,DXSURF_VALIDFLAGS = 0x3,};
enum DXTMISCFLAGS {DXTMF_BLEND_WITH_OUTPUT = 0x1,DXTMF_DITHER_OUTPUT = 0x2,DXTMF_OPTION_MASK = 0xFFFF,DXTMF_VALID_OPTIONS = 0x3,DXTMF_BLEND_SUPPORTED = 0x10000,DXTMF_DITHER_SUPPORTED = 0x20000,DXTMF_INPLACE_OPERATION = 0x1000000,DXTMF_BOUNDS_SUPPORTED = 0x2000000,DXTMF_PLACEMENT_SUPPORTED = 0x4000000,DXTMF_QUALITY_SUPPORTED = 0x8000000,DXTMF_OPAQUE_RESULT = 0x10000000,};
struct DispHTMLBody {struct DispHTMLBodyVtbl *lpVtbl;};
typedef struct tagENUMPROPERTY ENUMPROPERTY;
typedef struct tagFILTERREGION FILTERREGION;
typedef struct tagFULLPROPSPEC FULLPROPSPEC;
typedef struct _FIREWALL_LOG_ENTRY FW_LOG_ENTRY;
struct FolderItems2 {struct FolderItems2Vtbl *lpVtbl;};
struct FolderItems3 {struct FolderItems3Vtbl *lpVtbl;};
typedef struct HACMDRIVERID__ *HACMDRIVERID;
struct HACMDRIVER__ {int unused;};
struct HACMSTREAM__ {int unused;};
typedef struct HENHMETAFILE__ *HENHMETAFILE;
typedef struct tagHH_FTS_QUERY HH_FTS_QUERY;
struct HTAPIPHONE__ {int unused;};
struct HTMLDefaults;
struct HTMLDocument;
struct HTMLLocation;
struct HTMLSpanFlow;
struct HTMLTableCol;
struct HTMLTableRow;
typedef struct tagHTTPMAILPOST HTTPMAILPOST;
struct IABContainer {struct IABContainerVtbl *lpVtbl;};
struct IAMExtDevice {struct IAMExtDeviceVtbl *lpVtbl;};
struct IAMovieSetup {struct IAMovieSetupVtbl *lpVtbl;};
struct IActiveMovie {struct IActiveMovieVtbl *lpVtbl;};
struct IAdviseSink2 {struct IAdviseSink2Vtbl *lpVtbl;};
struct IAnchorClick {struct IAnchorClickVtbl *lpVtbl;};
struct IAsyncReader {struct IAsyncReaderVtbl *lpVtbl;};
struct IBasicVideo2 {struct IBasicVideo2Vtbl *lpVtbl;};
struct ICatRegister {struct ICatRegisterVtbl *lpVtbl;};
struct IChannelHook {struct IChannelHookVtbl *lpVtbl;};
struct ICodeInstall {struct ICodeInstallVtbl *lpVtbl;};
struct ICodeStoreDB {struct ICodeStoreDBVtbl *lpVtbl;};
struct IColumnsInfo {struct IColumnsInfoVtbl *lpVtbl;};
struct ICommandCost {struct ICommandCostVtbl *lpVtbl;};
struct ICommandText {struct ICommandTextVtbl *lpVtbl;};
struct ICommandTree {struct ICommandTreeVtbl *lpVtbl;};
struct IContextMenu {struct IContextMenuVtbl *lpVtbl;};
struct IConvertType {struct IConvertTypeVtbl *lpVtbl;};
struct IDShowPlugin {struct IDShowPluginVtbl *lpVtbl;};
struct IDVDTitleSet {struct IDVDTitleSetVtbl *lpVtbl;};
struct IDXGradient2 {struct IDXGradient2Vtbl *lpVtbl;};
struct IDXTBindHost {struct IDXTBindHostVtbl *lpVtbl;};
struct IDXTransform {struct IDXTransformVtbl *lpVtbl;};
struct IDirectDraw2 {struct IDirectDraw2Vtbl *lpVtbl;};
struct IDirectDraw4 {struct IDirectDraw4Vtbl *lpVtbl;};
struct IDirectSound {struct IDirectSoundVtbl *lpVtbl;};
struct IDvdControl2 {struct IDvdControl2Vtbl *lpVtbl;};
struct IEnumFilters {struct IEnumFiltersVtbl *lpVtbl;};
struct IEnumMoniker {struct IEnumMonikerVtbl *lpVtbl;};
struct IEnumOLEVERB {struct IEnumOLEVERBVtbl *lpVtbl;};
struct IEnumRfc1766 {struct IEnumRfc1766Vtbl *lpVtbl;};
struct IEnumSTATSTG {struct IEnumSTATSTGVtbl *lpVtbl;};
struct IEnumSTATURL {struct IEnumSTATURLVtbl *lpVtbl;};
struct IEnumUnknown {struct IEnumUnknownVtbl *lpVtbl;};
struct IEnumVARIANT {struct IEnumVARIANTVtbl *lpVtbl;};
struct IErrorLookup {struct IErrorLookupVtbl *lpVtbl;};
struct IFileAsyncIO {struct IFileAsyncIOVtbl *lpVtbl;};
struct IFileViewerA {struct IFileViewerAVtbl *lpVtbl;};
struct IFileViewerW {struct IFileViewerWVtbl *lpVtbl;};
struct IFilterGraph {struct IFilterGraphVtbl *lpVtbl;};
struct IHTMLBGsound {struct IHTMLBGsoundVtbl *lpVtbl;};
struct IHTMLDOMNode {struct IHTMLDOMNodeVtbl *lpVtbl;};
struct IHTMLDialog2 {struct IHTMLDialog2Vtbl *lpVtbl;};
struct IHTMLDialog3 {struct IHTMLDialog3Vtbl *lpVtbl;};
struct IHTMLElement {struct IHTMLElementVtbl *lpVtbl;};
struct IHTMLPainter {struct IHTMLPainterVtbl *lpVtbl;};
struct IHTMLScreen2 {struct IHTMLScreen2Vtbl *lpVtbl;};
struct IHTMLWindow2 {struct IHTMLWindow2Vtbl *lpVtbl;};
struct IHTMLWindow3 {struct IHTMLWindow3Vtbl *lpVtbl;};
struct IHTMLWindow4 {struct IHTMLWindow4Vtbl *lpVtbl;};
struct IHlinkTarget {struct IHlinkTargetVtbl *lpVtbl;};
struct IIMCallback2 {struct IIMCallback2Vtbl *lpVtbl;};
struct IIMEServices {struct IIMEServicesVtbl *lpVtbl;};
struct IInputMethod {struct IInputMethodVtbl *lpVtbl;};
struct IInputObject {struct IInputObjectVtbl *lpVtbl;};
struct IJavaPackage {struct IJavaPackageVtbl *lpVtbl;};
typedef struct _IMAGE_SYMBOL IMAGE_SYMBOL;
struct IMAPIControl {struct IMAPIControlVtbl *lpVtbl;};
struct IMLangString {struct IMLangStringVtbl *lpVtbl;};
struct IMarqueeInfo {struct IMarqueeInfoVtbl *lpVtbl;};
struct IMediaBuffer {struct IMediaBufferVtbl *lpVtbl;};
struct IMediaFilter {struct IMediaFilterVtbl *lpVtbl;};
struct IMediaHolder {struct IMediaHolderVtbl *lpVtbl;};
struct IMediaObject {struct IMediaObjectVtbl *lpVtbl;};
struct IMediaParams {struct IMediaParamsVtbl *lpVtbl;};
struct IMediaPlayer {struct IMediaPlayerVtbl *lpVtbl;};
struct IMediaSample {struct IMediaSampleVtbl *lpVtbl;};
struct IMediaStream {struct IMediaStreamVtbl *lpVtbl;};
struct IMemInputPin {struct IMemInputPinVtbl *lpVtbl;};
struct IMimeEditTag {struct IMimeEditTagVtbl *lpVtbl;};
struct IMimeMessage {struct IMimeMessageVtbl *lpVtbl;};
struct IMonikerProp {struct IMonikerPropVtbl *lpVtbl;};
struct IMsgrService {struct IMsgrServiceVtbl *lpVtbl;};
struct IMsgrUsersOE {struct IMsgrUsersOEVtbl *lpVtbl;};
typedef struct tagINETADDRLIST INETADDRLIST;
typedef struct tagINETCSETINFO INETCSETINFO;
typedef struct tagINPUTCONTEXT INPUTCONTEXT;
struct INetCfgClass {struct INetCfgClassVtbl *lpVtbl;};
struct IObexService {struct IObexServiceVtbl *lpVtbl;};
struct IOleDocument {struct IOleDocumentVtbl *lpVtbl;};
struct IOleUndoUnit {struct IOleUndoUnitVtbl *lpVtbl;};
struct IOmNavigator {struct IOmNavigatorVtbl *lpVtbl;};
struct IOptionArray {struct IOptionArrayVtbl *lpVtbl;};
struct IPeerFactory {struct IPeerFactoryVtbl *lpVtbl;};
struct IPersistFile {struct IPersistFileVtbl *lpVtbl;};
struct IPersistMime {struct IPersistMimeVtbl *lpVtbl;};
struct IPictureDisp {struct IPictureDispVtbl *lpVtbl;};
struct IPropertyBag {struct IPropertyBagVtbl *lpVtbl;};
struct IPropertyMap {struct IPropertyMapVtbl *lpVtbl;};
struct IRASCallback {struct IRASCallbackVtbl *lpVtbl;};
struct IRTCProfile2 {struct IRTCProfile2Vtbl *lpVtbl;};
struct IRTCSession2 {struct IRTCSession2Vtbl *lpVtbl;};
struct IRTCWatcher2 {struct IRTCWatcher2Vtbl *lpVtbl;};
struct IRadioButton {struct IRadioButtonVtbl *lpVtbl;};
struct IRadioPlayer {struct IRadioPlayerVtbl *lpVtbl;};
struct IRadioServer {struct IRadioServerVtbl *lpVtbl;};
struct IRootStorage {struct IRootStorageVtbl *lpVtbl;};
struct IRowPosition {struct IRowPositionVtbl *lpVtbl;};
struct IRowsetIndex {struct IRowsetIndexVtbl *lpVtbl;};
struct IScriptEntry {struct IScriptEntryVtbl *lpVtbl;};
struct ISegmentList {struct ISegmentListVtbl *lpVtbl;};
struct ISensNetwork {struct ISensNetworkVtbl *lpVtbl;};
struct IShellFolder {struct IShellFolderVtbl *lpVtbl;};
struct ISniffStream {struct ISniffStreamVtbl *lpVtbl;};
struct ISoftDistExt {struct ISoftDistExtVtbl *lpVtbl;};
struct ITIMEElement {struct ITIMEElementVtbl *lpVtbl;};
struct ITIMEFactory {struct ITIMEFactoryVtbl *lpVtbl;};
struct ITableRename {struct ITableRenameVtbl *lpVtbl;};
struct ITargetFrame {struct ITargetFrameVtbl *lpVtbl;};
struct ITaskTrigger {struct ITaskTriggerVtbl *lpVtbl;};
struct ITaskbarList {struct ITaskbarListVtbl *lpVtbl;};
struct ITransaction {struct ITransactionVtbl *lpVtbl;};
struct ITravelEntry {struct ITravelEntryVtbl *lpVtbl;};
struct ITravelLogEx {struct ITravelLogExVtbl *lpVtbl;};
struct ITypeFactory {struct ITypeFactoryVtbl *lpVtbl;};
struct ITypeMarshal {struct ITypeMarshalVtbl *lpVtbl;};
struct IUPnPDevices {struct IUPnPDevicesVtbl *lpVtbl;};
struct IUPnPService {struct IUPnPServiceVtbl *lpVtbl;};
struct IVersionHost {struct IVersionHostVtbl *lpVtbl;};
struct IVideoWindow {struct IVideoWindowVtbl *lpVtbl;};
struct IViewChapter {struct IViewChapterVtbl *lpVtbl;};
struct IViewObject2 {struct IViewObject2Vtbl *lpVtbl;};
struct IWSDLService {struct IWSDLServiceVtbl *lpVtbl;};
struct IWebBrowser2 {struct IWebBrowser2Vtbl *lpVtbl;};
struct IWinInetInfo {struct IWinInetInfoVtbl *lpVtbl;};
struct IWordBreaker {struct IWordBreakerVtbl *lpVtbl;};
struct IXMLDocument {struct IXMLDocumentVtbl *lpVtbl;};
struct IXMLElement2 {struct IXMLElement2Vtbl *lpVtbl;};
struct IXSLTemplate {struct IXSLTemplateVtbl *lpVtbl;};
typedef void *I_RPC_HANDLE;
struct IntelliForms;
typedef struct ldapcontrolA LDAPControlA;
typedef struct ldapcontrolW LDAPControlW;
typedef struct ldapsortkeyA LDAPSortKeyA;
typedef struct ldapsortkeyW LDAPSortKeyW;
typedef struct l_timeval LDAP_TIMEVAL;
typedef struct linecallinfo_tag LINECALLINFO;
typedef struct linecalllist_tag LINECALLLIST;
typedef struct linetermcaps_tag LINETERMCAPS;
typedef IAccessible *LPACCESSIBLE;
typedef IAdviseSink *LPADVISESINK;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBITMAPINFO *LPBITMAPINFO;
typedef struct _browseinfo *LPBROWSEINFO;
typedef struct tagCALPOLESTR *LPCALPOLESTR;
typedef struct _COMMCONFIG *LPCOMMCONFIG;
typedef  struct _USB_FUNCS *LPCUSB_FUNCS;
typedef struct _D3DMATRIX *LPD3DXMATRIX;
typedef IDataFilter *LPDATAFILTER;
typedef IDataObject *LPDATAOBJECT;
typedef IDccManSink *LPDCCMANSINK;
typedef struct tagDIBSECTION *LPDIBSECTION;
typedef struct IDirectDraw *LPDIRECTDRAW;
typedef IDropSource *LPDROPSOURCE;
typedef IDropTarget *LPDROPTARGET;
typedef struct _DTBLBUTTON *LPDTBLBUTTON;
typedef IEnumHLITEM *LPENUMHLITEM;
typedef IEnumIDList *LPENUMIDLIST;
typedef IEnumString *LPENUMSTRING;
typedef IEnumScript *LPENUMScript;
typedef struct tagFINDHEADER *LPFINDHEADER;
typedef FolderItem *LPFOLDERITEM;
typedef struct _068AF82868DFBF98C4A3A88443B401AE *LPFVSHOWINFO;
typedef struct tagHEAPLIST32 *LPHEAPLIST32;
typedef IHlinkFrame *LPHLINKFRAME;
typedef struct INETSERVER *LPINETSERVER;
typedef struct tagKEYBDINPUT *LPKEYBDINPUT;
typedef struct tagLOGPALETTE *LPLOGPALETTE;
typedef struct IMAPIFolder *LPMAPIFOLDER;
typedef struct _MAPINAMEID *LPMAPINAMEID;
typedef struct IMAPIStatus *LPMAPISTATUS;
typedef struct tagMETHODDATA *LPMETHODDATA;
typedef struct _MODULEINFO *LPMODULEINFO;
typedef struct tagMOUSEINPUT *LPMOUSEINPUT;
typedef struct tagNMDAYSTATE *LPNMDAYSTATE;
typedef struct tagNMLISTVIEW *LPNMLISTVIEW;
typedef struct tagNMTOOLBARA *LPNMTOOLBARA;
typedef struct tagNMTOOLBARW *LPNMTOOLBARW;
typedef struct tagNNTPHEADER *LPNNTPHEADER;
typedef struct _numberfmtA *LPNUMBERFMTA;
typedef struct _numberfmtW *LPNUMBERFMTW;
typedef IOleControl *LPOLECONTROL;
typedef struct _OVERLAPPED *LPOVERLAPPED;
typedef IRecordInfo *LPRECORDINFO;
typedef struct tagSCROLLINFO *LPSCROLLINFO;
typedef struct __MIDL___MIDL_itf_shobjidl_0116_0002 *LPSHCOLUMNID;
typedef struct tagSMTPSTREAM *LPSMTPSTREAM;
typedef struct _SPropValue *LPSPropValue;
typedef struct _SSLCIPHERS *LPSSLCIPHERS;
typedef struct _SSortOrder *LPSSortOrder;
typedef struct _SYSTEMTIME *LPSYSTEMTIME;
typedef struct _USB_DEVICE *LPUSB_DEVICE;
typedef IViewObject *LPVIEWOBJECT;
typedef struct IWABExtInit *LPWABEXTINIT;
typedef struct tagWAVEINCAPS *LPWAVEINCAPS;
typedef struct _WSAVersion *LPWSAVERSION;
enum MACRO_ACCESS {ACCESS_SYSTEM_SECURITY = 0x1000000,};
enum MACRO_ACMERR {ACMERR_BASE = 512,ACMERR_NOTPOSSIBLE = 512,ACMERR_BUSY = 513,ACMERR_UNPREPARED = 514,ACMERR_CANCELED = 515,};
enum MACRO_AF_BTH {AF_BTH = 32,AF_BT = 32,};
enum MACRO_AF_MAX {AF_MAX = 33,};
enum MACRO_AM_AC3 {AM_AC3_ALTERNATE_AUDIO_1 = 1,AM_AC3_ALTERNATE_AUDIO_2 = 2,AM_AC3_ALTERNATE_AUDIO_BOTH = 3,AM_AC3_SERVICE_MAIN_AUDIO = 0,AM_AC3_SERVICE_NO_DIALOG = 1,AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2,AM_AC3_SERVICE_HEARING_IMPAIRED = 3,AM_AC3_SERVICE_DIALOG_ONLY = 4,AM_AC3_SERVICE_COMMENTARY = 5,AM_AC3_SERVICE_EMERGENCY_FLASH = 6,AM_AC3_SERVICE_VOICE_OVER = 7,AM_UseNewCSSKey = 1,AM_DVD_CGMS_RESERVED_MASK = 120,AM_DVD_CGMS_COPY_PROTECT_MASK = 24,AM_DVD_CGMS_COPY_PERMITTED = 0,AM_DVD_CGMS_COPY_ONCE = 16,AM_DVD_CGMS_NO_COPY = 24,AM_DVD_COPYRIGHT_MASK = 64,AM_DVD_NOT_COPYRIGHTED = 0,AM_DVD_COPYRIGHTED = 64,AM_DVD_SECTOR_PROTECT_MASK = 32,AM_DVD_SECTOR_NOT_PROTECTED = 0,AM_DVD_SECTOR_PROTECTED = 32,};
enum MACRO_ATTACH {ATTACH_DIALOG = 0x1,};
enum MACRO_BICOMP {BICOMP_IBMULTIMOTION = 1230261333,BICOMP_IBMPHOTOMOTION = 1330464848,BICOMP_CREATIVEYUV = 1987410275,};
enum MACRO_BUCKET {BUCKET_LINEAR = 0,BUCKET_EXPONENTIAL = 1,};
enum MACRO_CCHMAX {CCHMAX_ORG_NAME = 256,CCHMAX_DISPLAY_NAME = 256,CCHMAX_ACCOUNT_NAME = 256,CCHMAX_SERVER_NAME = 256,CCHMAX_PASSWORD = 256,CCHMAX_USERNAME = 256,CCHMAX_EMAIL_ADDRESS = 256,CCHMAX_CONNECTOID = 256,CCHMAX_SEARCH_BASE = 256,CCHMAX_ROOT_FOLDER = 256,CCHMAX_SIGNATURE = 16,CCHMAX_SERVICE = 256,};
enum MACRO_CDBOSC {CDBOSC_SETFOCUS = 0x0,CDBOSC_KILLFOCUS = 0x1,CDBOSC_SELCHANGE = 0x2,CDBOSC_RENAME = 0x3,};
enum MACRO_CISTPL {CISTPL_NULL = 0x0,CISTPL_DEVICE = 0x1,CISTPL_LONGLINK_CB = 0x2,CISTPL_CONFIG_CB = 0x4,CISTPL_CFTABLE_ENTRY_CB = 0x5,CISTPL_LONGLINK_MFC = 0x6,CISTPL_LONG_LINK_MFC = 0x6,CISTPL_CHECKSUM = 0x10,CISTPL_LONGLINK_A = 0x11,CISTPL_LONGLINK_C = 0x12,CISTPL_LINKTARGET = 0x13,CISTPL_NO_LINK = 0x14,CISTPL_VERS_1 = 0x15,CISTPL_ALTSTR = 0x16,CISTPL_DEVICE_A = 0x17,CISTPL_JEDEC_C = 0x18,CISTPL_JEDEC_A = 0x19,CISTPL_CONFIG = 0x1A,CISTPL_CFTABLE_ENTRY = 0x1B,CISTPL_DEVICE_OC = 0x1C,CISTPL_DEVICE_OA = 0x1D,CISTPL_GEODEVICE = 0x1E,CISTPL_GEODEVICE_A = 0x1F,CISTPL_MANFID = 0x20,CISTPL_FUNCID = 0x21,CISTPL_FUNCE = 0x22,CISTPL_VERS_2 = 0x40,CISTPL_FORMAT = 0x41,CISTPL_GEOMETRY = 0x42,CISTPL_BYTEORDER = 0x43,CISTPL_DATE = 0x44,CISTPL_BATTERY = 0x45,CISTPL_ORG = 0x46,CISTPL_END = 0xFF,};
enum MACRO_CLIENT {CLIENT_ATTR_MEM_DRIVER = 0x1,CLIENT_ATTR_MTD_DRIVER = 0x2,CLIENT_ATTR_IO_DRIVER = 0x4,CLIENT_ATTR_NOTIFY_SHARED = 0x8,CLIENT_ATTR_NOTIFY_EXCLUSIVE = 0x10,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000,};
enum MACRO_CLRDTR {CLRDTR = 6,SETBREAK = 8,};
enum MACRO_CLTYPE {CLTYPE_LEN = 12,};
enum MACRO_CMDBAR {CMDBAR_HELP = 0xB,CMDBAR_OK = 0xF000,};
enum MACRO_COLORS {iPALETTE_COLORS = 256,iEGA_COLORS = 16,iMASK_COLORS = 3,};
enum MACRO_COMMIT {COMMIT_ONLYIFDIRTY = 0x1,COMMIT_REUSESTORAGE = 0x2,COMMIT_SMIMETRANSFERENCODE = 0x4,};
enum MACRO_CONFIG {CONFIG_CHANGED = 0x100000,};
enum MACRO_CP_ACP {CP_ACP = 0,CP_OEMCP = 1,CP_MACCP = 2,CP_THREAD_ACP = 3,CP_SYMBOL = 42,CP_UTF7 = 65000,CP_UTF8 = 65001,};
enum MACRO_CREATE {CREATE_SUSPENDED = 0x4,CREATE_NEW_CONSOLE = 0x10,};
enum MACRO_CREDUI {CREDUI_FLAGS_INCORRECT_PASSWORD = 0x1,CREDUI_FLAGS_DO_NOT_PERSIST = 0x2,CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 0x4,CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 0x8,CREDUI_FLAGS_REQUIRE_CERTIFICATE = 0x10,CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 0x40,CREDUI_FLAGS_ALWAYS_SHOW_UI = 0x80,CREDUI_FLAGS_REQUIRE_SMARTCARD = 0x100,CREDUI_FLAGS_PASSWORD_ONLY_OK = 0x200,CREDUI_FLAGS_VALIDATE_USERNAME = 0x400,CREDUI_FLAGS_COMPLETE_USERNAME = 0x800,CREDUI_FLAGS_PERSIST = 0x1000,CREDUI_FLAGS_SERVER_CREDENTIAL = 0x4000,CREDUI_FLAGS_EXPECT_CONFIRMATION = 0x20000,CREDUI_FLAGS_GENERIC_CREDENTIALS = 0x40000,CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 0x80000,CREDUI_FLAGS_KEEP_USERNAME = 0x100000,CREDUI_FLAGS_PROMPT_VALID = 0x1E5FDF,};
enum MACRO_CTL_V1 {CTL_V1 = 0,};
enum MACRO_D3DERR {D3DERR_WRONGTEXTUREFORMAT = -2005530600,D3DERR_UNSUPPORTEDCOLOROPERATION = -2005530599,D3DERR_UNSUPPORTEDCOLORARG = -2005530598,D3DERR_UNSUPPORTEDALPHAOPERATION = -2005530597,D3DERR_UNSUPPORTEDALPHAARG = -2005530596,D3DERR_TOOMANYOPERATIONS = -2005530595,D3DERR_CONFLICTINGTEXTUREFILTER = -2005530594,D3DERR_UNSUPPORTEDFACTORVALUE = -2005530593,D3DERR_CONFLICTINGRENDERSTATE = -2005530591,D3DERR_UNSUPPORTEDTEXTUREFILTER = -2005530590,D3DERR_CONFLICTINGTEXTUREPALETTE = -2005530586,D3DERR_DRIVERINTERNALERROR = -2005530585,D3DERR_NOTFOUND = -2005530522,D3DERR_MOREDATA = -2005530521,D3DERR_DEVICELOST = -2005530520,D3DERR_DEVICENOTRESET = -2005530519,D3DERR_NOTAVAILABLE = -2005530518,D3DERR_OUTOFVIDEOMEMORY = -2005532292,D3DERR_INVALIDDEVICE = -2005530517,D3DERR_INVALIDCALL = -2005530516,D3DERR_DRIVERINVALIDCALL = -2005530515,};
enum MACRO_D3DFVF {D3DFVF_RESERVED0 = 0x1,D3DFVF_POSITION_MASK = 0xE,D3DFVF_XYZ = 0x2,D3DFVF_XYZRHW = 0x4,D3DFVF_XYZB1 = 0x6,D3DFVF_XYZB2 = 0x8,D3DFVF_XYZB3 = 0xA,D3DFVF_XYZB4 = 0xC,D3DFVF_XYZB5 = 0xE,D3DFVF_NORMAL = 0x10,D3DFVF_PSIZE = 0x20,D3DFVF_DIFFUSE = 0x40,D3DFVF_SPECULAR = 0x80,D3DFVF_TEXCOUNT_MASK = 0xF00,D3DFVF_TEXCOUNT_SHIFT = 0x8,D3DFVF_TEX0 = 0x0,D3DFVF_TEX1 = 0x100,D3DFVF_TEX2 = 0x200,D3DFVF_TEX3 = 0x300,D3DFVF_TEX4 = 0x400,D3DFVF_TEX5 = 0x500,D3DFVF_TEX6 = 0x600,D3DFVF_TEX7 = 0x700,D3DFVF_TEX8 = 0x800,D3DFVF_LASTBETA_UBYTE4 = 0x1000,D3DFVF_RESERVED2 = 0xE000,};
enum MACRO_D3DSGR {D3DSGR_NO_CALIBRATION = 0x0,D3DSGR_CALIBRATE = 0x1,};
enum MACRO_D3DSPD {D3DSPD_IUNKNOWN = 0x1,};
enum MACRO_D3DTSS {D3DTSS_TCI_PASSTHRU = 0x0,D3DTSS_TCI_CAMERASPACENORMAL = 0x10000,D3DTSS_TCI_CAMERASPACEPOSITION = 0x20000,D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR = 0x30000,};
enum MACRO_D3DVSD {D3DVSD_TOKENTYPESHIFT = 29,D3DVSD_TOKENTYPEMASK = 3758096384,D3DVSD_STREAMNUMBERSHIFT = 0,D3DVSD_STREAMNUMBERMASK = 15,D3DVSD_DATALOADTYPESHIFT = 28,D3DVSD_DATALOADTYPEMASK = 268435456,D3DVSD_DATATYPESHIFT = 16,D3DVSD_DATATYPEMASK = 983040,D3DVSD_SKIPCOUNTSHIFT = 16,D3DVSD_SKIPCOUNTMASK = 983040,D3DVSD_VERTEXREGSHIFT = 0,D3DVSD_VERTEXREGMASK = 31,D3DVSD_VERTEXREGINSHIFT = 20,D3DVSD_VERTEXREGINMASK = 15728640,D3DVSD_CONSTCOUNTSHIFT = 25,D3DVSD_CONSTCOUNTMASK = 503316480,D3DVSD_CONSTADDRESSSHIFT = 0,D3DVSD_CONSTADDRESSMASK = 127,D3DVSD_CONSTRSSHIFT = 16,D3DVSD_CONSTRSMASK = 536805376,D3DVSD_EXTCOUNTSHIFT = 24,D3DVSD_EXTCOUNTMASK = 520093696,D3DVSD_EXTINFOSHIFT = 0,D3DVSD_EXTINFOMASK = 16777215,D3DVSD_STREAMTESSSHIFT = 28,D3DVSD_STREAMTESSMASK = 268435456,};
enum MACRO_DATA_E {DATA_E_FORMATETC = -2147221404,};
enum MACRO_DBPROP {DBPROP_PersistFormat = 2,DBPROP_PersistSchema = 3,DBPROP_HCHAPTER = 4,DBPROP_MAINTAINPROPS = 5,DBPROP_Unicode = 6,DBPROP_INTERLEAVEDROWS = 8,};
enum MACRO_DBT_NO {DBT_NO_DISK_SPACE = 0x47,DBT_LOW_DISK_SPACE = 0x48,DBT_CONFIGMGPRIVATE = 0x7FFF,DBT_DEVICEARRIVAL = 0x8000,DBT_DEVICEQUERYREMOVE = 0x8001,DBT_DEVICEQUERYREMOVEFAILED = 0x8002,DBT_DEVICEREMOVEPENDING = 0x8003,DBT_DEVICEREMOVECOMPLETE = 0x8004,DBT_DEVICETYPESPECIFIC = 0x8005,DBT_CUSTOMEVENT = 0x8006,DBT_DEVTYP_OEM = 0x0,DBT_DEVTYP_DEVNODE = 0x1,DBT_DEVTYP_VOLUME = 0x2,DBT_DEVTYP_PORT = 0x3,DBT_DEVTYP_NET = 0x4,DBT_DEVTYP_DEVICEINTERFACE = 0x5,DBT_DEVTYP_HANDLE = 0x6,};
enum MACRO_DB_IMP {DB_IMP_LEVEL_ANONYMOUS = 0x0,DB_IMP_LEVEL_IDENTIFY = 0x1,DB_IMP_LEVEL_IMPERSONATE = 0x2,DB_IMP_LEVEL_DELEGATE = 0x3,};
enum MACRO_DDABLT {DDABLT_KEYSRC = 0x40000000,DDABLT_MIRRORLEFTRIGHT = 0x20000000,DDABLT_MIRRORUPDOWN = 0x10000000,DDABLT_WAIT = 0x8000000,DDABLT_HARDWAREONLY = 0x4000000,DDABLT_NOBLEND = 0x2000000,DDABLT_FILTERENABLE = 0x1000000,DDABLT_FILTERDISABLE = 0x800000,DDABLT_DEGRADEARGBSCALING = 0x400000,DDABLT_DONOTWAIT = 0x200000,DDABLT_USEFILLVALUE = 0x100000,DDABLT_SOFTWAREONLY = 0x80000,DDABLT_FILTERTRANSPBORDER = 0x40000,DDABLT_ALPHADESTNEG = 0x4,DDABLT_ALPHASRCNEG = 0x80,};
enum MACRO_DDCAPS {DDCAPS_3D = 0x1,DDCAPS_ALIGNBOUNDARYDEST = 0x2,DDCAPS_ALIGNSIZEDEST = 0x4,DDCAPS_ALIGNBOUNDARYSRC = 0x8,DDCAPS_ALIGNSIZESRC = 0x10,DDCAPS_ALIGNSTRIDE = 0x20,DDCAPS_BLT = 0x40,DDCAPS_BLTQUEUE = 0x80,DDCAPS_BLTFOURCC = 0x100,DDCAPS_BLTSTRETCH = 0x200,DDCAPS_GDI = 0x400,DDCAPS_OVERLAY = 0x800,DDCAPS_OVERLAYCANTCLIP = 0x1000,DDCAPS_OVERLAYFOURCC = 0x2000,DDCAPS_OVERLAYSTRETCH = 0x4000,DDCAPS_PALETTE = 0x8000,DDCAPS_PALETTEVSYNC = 0x10000,DDCAPS_READSCANLINE = 0x20000,DDCAPS_STEREOVIEW = 0x40000,DDCAPS_VBI = 0x80000,DDCAPS_ZBLTS = 0x100000,DDCAPS_ZOVERLAYS = 0x200000,DDCAPS_COLORKEY = 0x400000,DDCAPS_ALPHA = 0x800000,DDCAPS_COLORKEYHWASSIST = 0x1000000,DDCAPS_NOHARDWARE = 0x2000000,DDCAPS_BLTCOLORFILL = 0x4000000,DDCAPS_BANKSWITCHED = 0x8000000,DDCAPS_BLTDEPTHFILL = 0x10000000,DDCAPS_CANCLIP = 0x20000000,DDCAPS_CANCLIPSTRETCHED = 0x40000000,DDCAPS_CANBLTSYSMEM = 0x80000000,};
enum MACRO_DDCKEY {DDCKEY_COLORSPACE = 0x1,DDCKEY_DESTBLT = 0x2,DDCKEY_DESTOVERLAY = 0x4,DDCKEY_SRCBLT = 0x8,DDCKEY_SRCOVERLAY = 0x10,};
enum MACRO_DDENUM {DDENUM_ATTACHEDSECONDARYDEVICES = 0x1,DDENUM_DETACHEDSECONDARYDEVICES = 0x2,DDENUM_NONDISPLAYDEVICES = 0x4,};
enum MACRO_DDFLIP {DDFLIP_WAIT = 0x1,DDFLIP_EVEN = 0x2,DDFLIP_ODD = 0x4,DDFLIP_NOVSYNC = 0x8,DDFLIP_INTERVAL1 = 0x1000000,DDFLIP_INTERVAL2 = 0x2000000,DDFLIP_INTERVAL4 = 0x4000000,DDFLIP_VALID = 0x700000F,DDFLIP_INTERVAL3 = 0x3000000,DDFLIP_INTERVALMASK = 0x7000000,};
enum MACRO_DDLOCK {DDLOCK_SURFACEMEMORYPTR = 0x0,DDLOCK_WAIT = 0x1,DDLOCK_EVENT = 0x2,DDLOCK_READONLY = 0x10,DDLOCK_WRITEONLY = 0x20,DDLOCK_TAKE_WIN16 = 0x40,DDLOCK_TAKE_WIN16_VRAM = 0x80,DDLOCK_FAILLOSTSURFACES = 0x100,DDLOCK_FAILONVISRGNCHANGED = 0x200,DDLOCK_FAILEMULATEDNTPRIMARY = 0x400,DDLOCK_NOSYSLOCK = 0x800,DDLOCK_VALID = 0xFF3,};
enum MACRO_DDOVER {DDOVER_ALPHADEST = 0x1,DDOVER_ALPHADESTCONSTOVERRIDE = 0x2,DDOVER_ALPHADESTNEG = 0x4,DDOVER_ALPHADESTSURFACEOVERRIDE = 0x8,DDOVER_ALPHAEDGEBLEND = 0x10,DDOVER_ALPHASRC = 0x20,DDOVER_ALPHASRCCONSTOVERRIDE = 0x40,DDOVER_ALPHASRCNEG = 0x80,DDOVER_ALPHASRCSURFACEOVERRIDE = 0x100,DDOVER_HIDE = 0x200,DDOVER_KEYDEST = 0x400,DDOVER_KEYDESTOVERRIDE = 0x800,DDOVER_KEYSRC = 0x1000,DDOVER_KEYSRCOVERRIDE = 0x2000,DDOVER_SHOW = 0x4000,DDOVER_ADDDIRTYRECT = 0x8000,DDOVER_REFRESHDIRTYRECTS = 0x10000,DDOVER_REFRESHALL = 0x20000,DDOVER_DDFX = 0x80000,DDOVER_AUTOFLIP = 0x100000,DDOVER_BOB = 0x200000,DDOVER_OVERRIDEBOBWEAVE = 0x400000,DDOVER_INTERLEAVED = 0x800000,DDOVER_BOBHARDWARE = 0x1000000,};
enum MACRO_DDVPFX {DDVPFX_CROPTOPDATA = 0x1,DDVPFX_CROPX = 0x2,DDVPFX_CROPY = 0x4,DDVPFX_INTERLEAVE = 0x8,DDVPFX_MIRRORLEFTRIGHT = 0x10,DDVPFX_MIRRORUPDOWN = 0x20,DDVPFX_PRESHRINKX = 0x40,DDVPFX_PRESHRINKY = 0x80,DDVPFX_PRESHRINKXB = 0x100,DDVPFX_PRESHRINKYB = 0x200,DDVPFX_PRESHRINKXS = 0x400,DDVPFX_PRESHRINKYS = 0x800,DDVPFX_PRESTRETCHX = 0x1000,DDVPFX_PRESTRETCHY = 0x2000,DDVPFX_PRESTRETCHXN = 0x4000,DDVPFX_PRESTRETCHYN = 0x8000,DDVPFX_VBICONVERT = 0x10000,DDVPFX_VBINOSCALE = 0x20000,DDVPFX_IGNOREVBIXCROP = 0x40000,DDVPFX_VBINOINTERLEAVE = 0x80000,};
enum MACRO_DDVPSQ {DDVPSQ_NOSIGNAL = 0x1,DDVPSQ_SIGNALOK = 0x2,};
enum MACRO_DD_ROP {DD_ROP_SPACE = 8,};
enum MACRO_DELETE {DELETE = 0x10000,};
enum MACRO_DEVICE {DEVICE_DEVMAIN = 1,DEVICE_PMIF = 1,};
enum MACRO_DEVKEY {DEVKEY_LEN = 256,DEVNAME_LEN = 16,DEVDLL_LEN = 64,DEVENTRY_LEN = 64,DEVPREFIX_LEN = 8,};
enum MACRO_DEVLEN {DEVLEN = 80,};
enum MACRO_DIALER {DIALER_START = 0x1,DIALER_TERMINATE = 0x2,DIALER_CANCELLED = 0x3,};
enum MACRO_DIALOG {DIALOG_MODAL = 0x1,DIALOG_SDI = 0x2,DIALOG_OPTIONS = 0x4,};
enum MACRO_DISPID {DISPID_UNKNOWN = -1,DISPID_VALUE = 0,DISPID_PROPERTYPUT = -3,DISPID_NEWENUM = -4,DISPID_EVALUATE = -5,DISPID_CONSTRUCTOR = -6,DISPID_DESTRUCTOR = -7,DISPID_COLLECT = -8,};
enum MACRO_DLLVER {DLLVER_PLATFORM_WINDOWS = 0x1,DLLVER_PLATFORM_NT = 0x2,DLLVER_MAJOR_MASK = 0xFFFF000000000000,DLLVER_MINOR_MASK = 0xFFFF00000000,DLLVER_BUILD_MASK = 0xFFFFFFFFFFFF0000,DLLVER_QFE_MASK = 0xFFFF,};
enum MACRO_DOMAIN {DOMAIN_USER_RID_ADMIN = 0x1F4,DOMAIN_USER_RID_GUEST = 0x1F5,DOMAIN_USER_RID_KRBTGT = 0x1F6,DOMAIN_GROUP_RID_ADMINS = 0x200,DOMAIN_GROUP_RID_USERS = 0x201,DOMAIN_GROUP_RID_GUESTS = 0x202,DOMAIN_GROUP_RID_COMPUTERS = 0x203,DOMAIN_GROUP_RID_CONTROLLERS = 0x204,DOMAIN_GROUP_RID_CERT_ADMINS = 0x205,DOMAIN_GROUP_RID_SCHEMA_ADMINS = 0x206,DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 0x207,DOMAIN_ALIAS_RID_ADMINS = 0x220,DOMAIN_ALIAS_RID_USERS = 0x221,DOMAIN_ALIAS_RID_GUESTS = 0x222,DOMAIN_ALIAS_RID_POWER_USERS = 0x223,DOMAIN_ALIAS_RID_ACCOUNT_OPS = 0x224,DOMAIN_ALIAS_RID_SYSTEM_OPS = 0x225,DOMAIN_ALIAS_RID_PRINT_OPS = 0x226,DOMAIN_ALIAS_RID_BACKUP_OPS = 0x227,DOMAIN_ALIAS_RID_REPLICATOR = 0x228,};
enum MACRO_DRVCNF {DRVCNF_CANCEL = 0x0,DRVCNF_OK = 0x1,DRVCNF_RESTART = 0x2,};
enum MACRO_DSBPAN {DSBPAN_LEFT = -10000,DSBPAN_CENTER = 0,DSBPAN_RIGHT = 10000,};
enum MACRO_DSCAPS {DSCAPS_PRIMARYMONO = 0x1,DSCAPS_PRIMARYSTEREO = 0x2,DSCAPS_PRIMARY8BIT = 0x4,DSCAPS_PRIMARY16BIT = 0x8,DSCAPS_CONTINUOUSRATE = 0x10,DSCAPS_EMULDRIVER = 0x20,DSCAPS_CERTIFIED = 0x40,DSCAPS_SECONDARYMONO = 0x100,DSCAPS_SECONDARYSTEREO = 0x200,DSCAPS_SECONDARY8BIT = 0x400,DSCAPS_SECONDARY16BIT = 0x800,};
enum MACRO_DSPEED {DSPEED_NULL = 0x0,DSPEED_250NS = 0x1,DSPEED_200NS = 0x2,DSPEED_150NS = 0x3,DSPEED_100NS = 0x4,DSPEED_EXT = 0x7,};
enum MACRO_DT_TOP {DT_TOP = 0x0,DT_LEFT = 0x0,DT_CENTER = 0x1,DT_RIGHT = 0x2,DT_VCENTER = 0x4,DT_BOTTOM = 0x8,DT_WORDBREAK = 0x10,DT_SINGLELINE = 0x20,DT_EXPANDTABS = 0x40,DT_TABSTOP = 0x80,DT_NOCLIP = 0x100,DT_EXTERNALLEADING = 0x200,DT_CALCRECT = 0x400,DT_NOPREFIX = 0x800,DT_INTERNAL = 0x1000,};
enum MACRO_EC_VCD {EC_VCD_SELECT = 0x50,EC_VCD_PLAY = 0x51,EC_VCD_END = 0x52,};
enum MACRO_EMARCH {EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3,EMARCH_ENC_I17_IMM7B_SIZE_X = 7,EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4,EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0,EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3,EMARCH_ENC_I17_IMM9D_SIZE_X = 9,EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18,EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7,EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3,EMARCH_ENC_I17_IMM5C_SIZE_X = 5,EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13,EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16,EMARCH_ENC_I17_IC_INST_WORD_X = 3,EMARCH_ENC_I17_IC_SIZE_X = 1,EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12,EMARCH_ENC_I17_IC_VAL_POS_X = 21,EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1,EMARCH_ENC_I17_IMM41a_SIZE_X = 10,EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14,EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22,EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1,EMARCH_ENC_I17_IMM41b_SIZE_X = 8,EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24,EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32,EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2,EMARCH_ENC_I17_IMM41c_SIZE_X = 23,EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0,EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40,EMARCH_ENC_I17_SIGN_INST_WORD_X = 3,EMARCH_ENC_I17_SIGN_SIZE_X = 1,EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27,EMARCH_ENC_I17_SIGN_VAL_POS_X = 63,};
enum MACRO_ESPEED {ESPEED_EXP = 0x7,ESPEED_MANT = 0x71,ESPEED_EXT = 0x80,};
enum MACRO_EVCCBF {EVCCBF_LASTNOTIFICATION = 0x1,};
enum MACRO_EXPORT {EXPORT_PRIVATE_KEYS = 0x4,};
enum MACRO_E_PROP {E_PROP_SET_UNSUPPORTED = 0x80070492,E_PROP_ID_UNSUPPORTED = 0x80070490,};
enum MACRO_FILTER {FILTER_E_TOO_BIG = 0x80041730,FILTER_S_PARTIAL_CONTENTSCAN_IMMEDIATE = 0x41731,FILTER_S_FULL_CONTENTSCAN_IMMEDIATE = 0x41732,FILTER_S_CONTENTSCAN_DELAYED = 0x41733,FILTER_E_CONTENTINDEXCORRUPT = 0xC0041734,FILTER_S_DISK_FULL = 0x41735,FILTER_E_ALREADY_OPEN = 0x80041736,FILTER_E_UNREACHABLE = 0x80041737,FILTER_E_IN_USE = 0x80041738,FILTER_E_NOT_OPEN = 0x80041739,FILTER_S_NO_PROPSETS = 0x4173A,FILTER_E_NO_SUCH_PROPERTY = 0x8004173B,FILTER_S_NO_SECURITY_DESCRIPTOR = 0x4173C,FILTER_E_OFFLINE = 0x8004173D,FILTER_E_PARTIALLY_FILTERED = 0x8004173E,};
enum MACRO_FOLDER {FOLDER_ROOT = 0x0,FOLDER_GENERIC = 0x1,FOLDER_SEARCH = 0x2,};
enum MACRO_FORMAT {FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100,FORMAT_MESSAGE_IGNORE_INSERTS = 0x200,FORMAT_MESSAGE_FROM_STRING = 0x400,FORMAT_MESSAGE_FROM_HMODULE = 0x800,FORMAT_MESSAGE_FROM_SYSTEM = 0x1000,FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x2000,FORMAT_MESSAGE_MAX_WIDTH_MASK = 0xFF,};
enum MACRO_FOURCC {FOURCC_RIFF = 1179011410,FOURCC_LIST = 1414744396,FOURCC_DOS = 542330692,FOURCC_MEM = 541934925,};
enum MACRO_GOPHER {GOPHER_TYPE_TEXT_FILE = 0x1,GOPHER_TYPE_DIRECTORY = 0x2,GOPHER_TYPE_CSO = 0x4,GOPHER_TYPE_ERROR = 0x8,GOPHER_TYPE_MAC_BINHEX = 0x10,GOPHER_TYPE_DOS_ARCHIVE = 0x20,GOPHER_TYPE_UNIX_UUENCODED = 0x40,GOPHER_TYPE_INDEX_SERVER = 0x80,GOPHER_TYPE_TELNET = 0x100,GOPHER_TYPE_BINARY = 0x200,GOPHER_TYPE_REDUNDANT = 0x400,GOPHER_TYPE_TN3270 = 0x800,GOPHER_TYPE_GIF = 0x1000,GOPHER_TYPE_IMAGE = 0x2000,GOPHER_TYPE_BITMAP = 0x4000,GOPHER_TYPE_MOVIE = 0x8000,GOPHER_TYPE_SOUND = 0x10000,GOPHER_TYPE_HTML = 0x20000,GOPHER_TYPE_PDF = 0x40000,GOPHER_TYPE_CALENDAR = 0x80000,GOPHER_TYPE_INLINE = 0x100000,GOPHER_TYPE_UNKNOWN = 0x20000000,GOPHER_TYPE_ASK = 0x40000000,GOPHER_TYPE_GOPHER_PLUS = 0x80000000,GOPHER_TYPE_FILE_MASK = 0x1FF271,};
enum MACRO_HH_MAX {HH_MAX_TABS = 19,HH_FTS_DEFAULT_PROXIMITY = -1,};
enum MACRO_HSHELL {HSHELL_WINDOWCREATED = 1,HSHELL_WINDOWDESTROYED = 2,HSHELL_WINDOWACTIVATED = 4,HSHELL_REDRAW = 6,HSHELL_TASKMAN = 7,HSHELL_CAPSLOCK = 8,};
enum MACRO_HTHELP {HTHELP = 21,};
enum MACRO_HTLEFT {HTLEFT = 10,};
enum MACRO_HTMENU {HTMENU = 5,};
enum MACRO_HTSIZE {HTSIZE = 4,};
enum MACRO_HTZOOM {HTZOOM = 9,};
enum MACRO_ICTYPE {ICTYPE_VIDEO = 1667524982,ICTYPE_AUDIO = 1667528033,};
enum MACRO_IDHELP {IDHELP = 9,};
enum MACRO_IGIMIF {IGIMIF_RIGHTMENU = 0x1,};
enum MACRO_IGIMII {IGIMII_CMODE = 0x1,IGIMII_SMODE = 0x2,IGIMII_CONFIGURE = 0x4,IGIMII_TOOLS = 0x8,IGIMII_HELP = 0x10,IGIMII_OTHER = 0x20,IGIMII_INPUTTOOLS = 0x40,};
enum MACRO_IGNORE {IGNORE = 0,};
enum MACRO_IMEVER {IMEVER_0310 = 0x3000A,IMEVER_0400 = 0x40000,};
enum MACRO_IMGCHG {IMGCHG_SIZE = 0x1,IMGCHG_VIEW = 0x2,IMGCHG_COMPLETE = 0x4,IMGCHG_ANIMATE = 0x8,IMGCHG_MASK = 0xF,};
enum MACRO_IMMGWL {IMMGWL_IMC = 0,};
enum MACRO_IMPORT {IMPORT_OBJECT_HDR_SIG2 = 0xFFFF,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_INET_E {INET_E_DEFAULT_ACTION = -2146697199,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,};
enum MACRO_JPEG_Y {JPEG_Y = 1,JPEG_YCbCr = 2,JPEG_RGB = 3,};
enum MACRO_LC_ALL {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MIN = 0,LC_MAX = 5,};
enum MACRO_LENGTH {CERT_HASH_LENGTH = 20,CREDUI_MAX_MESSAGE_LENGTH = 32767,CREDUI_MAX_CAPTION_LENGTH = 128,CREDUI_MAX_GENERIC_TARGET_LENGTH = 32767,CREDUI_MAX_DOMAIN_TARGET_LENGTH = 336,CREDUI_MAX_USERNAME_LENGTH = 513,CREDUI_MAX_PASSWORD_LENGTH = 256,};
enum MACRO_LGRPID {LGRPID_INSTALLED = 0x1,LGRPID_SUPPORTED = 0x2,};
enum MACRO_LOCALE {LOCALE_SYSTEM_DEFAULT = 2048,LOCALE_USER_DEFAULT = 1024,LOCALE_NEUTRAL = 0,LOCALE_INVARIANT = 127,};
enum MACRO_LOGOFF {LOGOFF_NO_WAIT = 0x1,LOGOFF_ORDERLY = 0x2,LOGOFF_PURGE = 0x4,LOGOFF_ABORT = 0x8,LOGOFF_QUIET = 0x10,LOGOFF_COMPLETE = 0x10000,LOGOFF_INBOUND = 0x20000,LOGOFF_OUTBOUND = 0x40000,LOGOFF_OUTBOUND_QUEUE = 0x80000,};
enum MACRO_LVCFMT {LVCFMT_LEFT = 0x0,LVCFMT_RIGHT = 0x1,LVCFMT_CENTER = 0x2,LVCFMT_JUSTIFYMASK = 0x3,LVCFMT_IMAGE = 0x800,LVCFMT_BITMAP_ON_RIGHT = 0x1000,LVCFMT_COL_HAS_IMAGES = 0x8000,};
enum MACRO_LVSICF {LVSICF_NOINVALIDATEALL = 0x1,LVSICF_NOSCROLL = 0x2,};
enum MACRO_LVS_EX {LVS_EX_GRIDLINES = 0x1,LVS_EX_SUBITEMIMAGES = 0x2,LVS_EX_CHECKBOXES = 0x4,LVS_EX_TRACKSELECT = 0x8,LVS_EX_HEADERDRAGDROP = 0x10,LVS_EX_FULLROWSELECT = 0x20,LVS_EX_ONECLICKACTIVATE = 0x40,LVS_EX_NOFOCUSRECT = 0x1000000,LVS_EX_NOHSCROLL = 0x10000000,LVS_EX_GRADIENT = 0x20000000,};
enum MACRO_MAPI_E {MAPI_E_CALL_FAILED = -2147467259,MAPI_E_NOT_ENOUGH_MEMORY = -2147024882,MAPI_E_INVALID_PARAMETER = -2147024809,MAPI_E_INTERFACE_NOT_SUPPORTED = -2147467262,MAPI_E_NO_ACCESS = -2147024891,MAPI_E_NO_SUPPORT = -2147221246,MAPI_E_BAD_CHARWIDTH = -2147221245,MAPI_E_STRING_TOO_LONG = -2147221243,MAPI_E_UNKNOWN_FLAGS = -2147221242,MAPI_E_INVALID_ENTRYID = -2147221241,MAPI_E_INVALID_OBJECT = -2147221240,MAPI_E_OBJECT_CHANGED = -2147221239,MAPI_E_OBJECT_DELETED = -2147221238,MAPI_E_BUSY = -2147221237,MAPI_E_NOT_ENOUGH_DISK = -2147221235,MAPI_E_NOT_ENOUGH_RESOURCES = -2147221234,MAPI_E_NOT_FOUND = -2147221233,MAPI_E_VERSION = -2147221232,MAPI_E_LOGON_FAILED = -2147221231,MAPI_E_SESSION_LIMIT = -2147221230,MAPI_E_USER_CANCEL = -2147221229,MAPI_E_UNABLE_TO_ABORT = -2147221228,MAPI_E_NETWORK_ERROR = -2147221227,MAPI_E_DISK_ERROR = -2147221226,MAPI_E_TOO_COMPLEX = -2147221225,MAPI_E_BAD_COLUMN = -2147221224,MAPI_E_EXTENDED_ERROR = -2147221223,MAPI_E_COMPUTED = -2147221222,MAPI_E_CORRUPT_DATA = -2147221221,MAPI_E_UNCONFIGURED = -2147221220,MAPI_E_FAILONEPROVIDER = -2147221219,MAPI_E_END_OF_SESSION = -2147220992,MAPI_E_UNKNOWN_ENTRYID = -2147220991,MAPI_E_MISSING_REQUIRED_COLUMN = -2147220990,MAPI_W_NO_SERVICE = 262659,MAPI_E_BAD_VALUE = -2147220735,MAPI_E_INVALID_TYPE = -2147220734,MAPI_E_TYPE_NO_SUPPORT = -2147220733,MAPI_E_UNEXPECTED_TYPE = -2147220732,MAPI_E_TOO_BIG = -2147220731,MAPI_E_DECLINE_COPY = -2147220730,MAPI_E_UNEXPECTED_ID = -2147220729,MAPI_W_ERRORS_RETURNED = 263040,MAPI_E_UNABLE_TO_COMPLETE = -2147220480,MAPI_E_TIMEOUT = -2147220479,MAPI_E_TABLE_EMPTY = -2147220478,MAPI_E_TABLE_TOO_BIG = -2147220477,MAPI_E_INVALID_BOOKMARK = -2147220475,MAPI_W_POSITION_CHANGED = 263297,MAPI_W_APPROX_COUNT = 263298,MAPI_W_PARTIAL_COMPLETION = 263808,MAPI_E_AMBIGUOUS_RECIP = -2147219712,MAPI_E_COLLISION = -2147219964,MAPI_E_NOT_INITIALIZED = -2147219963,MAPI_E_FOLDER_CYCLE = -2147219957,};
enum MACRO_MAXLEN {MAXLEN_IFDESCR = 256,MAXLEN_PHYSADDR = 8,};
enum MACRO_MAX_ID {MAX_ID_LENGTH = 48,MAX_DISPLAYNAME_LENGTH = 128,};
enum MACRO_MAX_IF {MAX_IF_TYPE = 145,};
enum MACRO_MAX_IO {MAX_IO_RANGES = 4,};
enum MACRO_MAX_IP {MAX_IP_STATUS = 11050,};
enum MACRO_MCW_IC {MCW_IC = 262144,};
enum MACRO_MCW_PC {MCW_PC = 196608,};
enum MACRO_MCW_RC {MCW_RC = 768,};
enum MACRO_MDAXIS {MDAXIS_COLUMNS = 0x0,MDAXIS_ROWS = 0x1,MDAXIS_PAGES = 0x2,MDAXIS_SECTIONS = 0x3,MDAXIS_CHAPTERS = 0x4,MDAXIS_SLICERS = 0xFFFFFFFF,};
enum MACRO_MDPROP {MDPROP_MEMBER = 0x1,MDPROP_CELL = 0x2,};
enum MACRO_MEMORY {MEMORY_ALLOCATION_ALIGNMENT = 8,};
enum MACRO_METHOD {METHOD_BUFFERED = 0,METHOD_IN_DIRECT = 1,METHOD_OUT_DIRECT = 2,METHOD_NEITHER = 3,};
enum MACRO_MIXERR {MIXERR_INVALLINE = 1024,MIXERR_INVALCONTROL = 1025,MIXERR_INVALVALUE = 1026,MIXERR_LASTERROR = 1026,};
enum MACRO_MK_ALT {MK_ALT = 0x20,};
enum MACRO_MM_ACM {MM_ACM_OPEN = 980,MM_ACM_CLOSE = 981,MM_ACM_DONE = 982,};
enum MACRO_MODULE {MODULE_ATTR_NOT_TRUSTED = 0x200,};
enum MACRO_MPBOOL {MPBOOL_TRUE = 1,MPBOOL_FALSE = 0,};
enum MACRO_MSGSRC {MSGSRC_UNKNOWN = 0,MSGSRC_SOFTWARE_POST = 1,MSGSRC_HARDWARE_KEYBOARD = 2,};
enum MACRO_MSXML3 {MSXML3_XMLDOM = 1,MSXML3_XMLNETFULL = 1,MSXML3_XMLXQL = 1,};
enum MACRO_MUTANT {MUTANT_QUERY_STATE = 0x1,MUTANT_ALL_ACCESS = 0x1F0001,};
enum MACRO_NAVDIR {NAVDIR_MIN = 0,NAVDIR_UP = 1,NAVDIR_DOWN = 2,NAVDIR_LEFT = 3,NAVDIR_RIGHT = 4,NAVDIR_NEXT = 5,NAVDIR_PREVIOUS = 6,NAVDIR_FIRSTCHILD = 7,NAVDIR_LASTCHILD = 8,NAVDIR_MAX = 9,};
enum MACRO_NETCFG {NETCFG_E_ALREADY_INITIALIZED = 0x8004A020,NETCFG_E_NOT_INITIALIZED = 0x8004A021,NETCFG_E_IN_USE = 0x8004A022,NETCFG_E_NO_WRITE_LOCK = 0x8004A024,NETCFG_E_NEED_REBOOT = 0x8004A025,NETCFG_E_ACTIVE_RAS_CONNECTIONS = 0x8004A026,NETCFG_E_ADAPTER_NOT_FOUND = 0x8004A027,NETCFG_E_COMPONENT_REMOVED_PENDING_REBOOT = 0x8004A028,NETCFG_S_REBOOT = 0x4A020,NETCFG_S_DISABLE_QUERY = 0x4A022,NETCFG_S_STILL_REFERENCED = 0x4A023,NETCFG_S_CAUSED_SETUP_CHANGE = 0x4A024,};
enum MACRO_NETCON {NETCON_MAX_NAME_LEN = 246,};
enum MACRO_NOMENU {NOMENU = 0xFFFF,};
enum MACRO_NOTIFY {NOTIFY_SYNC = 0x40000000,NOTIFY_CANCELED = 0x80000000,};
enum MACRO_NS_BTH {NS_BTH = 16,};
enum MACRO_NUMBER {NUMBER_OF_EXPORTED_VARIABLES = 39,};
enum MACRO_NUMPRS {NUMPRS_LEADING_WHITE = 0x1,NUMPRS_TRAILING_WHITE = 0x2,NUMPRS_LEADING_PLUS = 0x4,NUMPRS_TRAILING_PLUS = 0x8,NUMPRS_LEADING_MINUS = 0x10,NUMPRS_TRAILING_MINUS = 0x20,NUMPRS_HEX_OCT = 0x40,NUMPRS_PARENS = 0x80,NUMPRS_DECIMAL = 0x100,NUMPRS_THOUSANDS = 0x200,NUMPRS_CURRENCY = 0x400,NUMPRS_EXPONENT = 0x800,NUMPRS_USE_ALL = 0x1000,NUMPRS_STD = 0x1FFF,NUMPRS_NEG = 0x10000,NUMPRS_INEXACT = 0x20000,};
enum MACRO_OATRUE {OATRUE = -1,};
enum MACRO_OFFSET {TIMEELEMENT_OFFSET = 0x100,TIMEBODYELEMENT_OFFSET = 0x200,TIMEANIMATIONELEMENT_OFFSET = 0x300,TIMEMEDIAELEMENT_OFFSET = 0x400,TIMEFACTORY_OFFSET = 0x500,TIMECOLLECTION_OFFSET = 0x600,TIMECOLLECTION_RESERVED_OFFSET = 0x700,TIMEMEDIAPLAYER_OFFSET = 0x800,TIMEEVENTELEMENT_OFFSET = 0xA00,TIMEPLAYLIST_OFFSET = 0xB00,TIMEPLAYITEM_OFFSET = 0xC00,TIMEDVDPLAYEROBJECT_OFFSET = 0xD00,SMILANIMATIONCOMPSITE_OFFSET = 0xE00,SMILANIMATIONFRAGMENT_OFFSET = 0xF00,TIMESTATE_OFFSET = 0x1000,TIMEDMPLAYEROBJECT_OFFSET = 0x1100,TIMEMEDIAPLAYERSITE_OFFSET = 0x1200,TIMEMEDIAPLAYERCONTROL_OFFSET = 0x1300,};
enum MACRO_OLEOBJ {OLEOBJ_E_FIRST = 0x80040180,OLEOBJ_E_LAST = 0x8004018F,OLEOBJ_S_FIRST = 0x40180,OLEOBJ_S_LAST = 0x4018F,};
enum MACRO_PARITY {PARITY_NONE = 0x100,PARITY_ODD = 0x200,PARITY_EVEN = 0x400,PARITY_MARK = 0x800,PARITY_SPACE = 0x1000,};
enum MACRO_PCCARD {PCCARD_TYPE_VENDOR_SPECIFIC = 0,PCCARD_TYPE_MEMORY = 1,PCCARD_TYPE_SERIAL = 2,PCCARD_TYPE_PARALLEL = 3,PCCARD_TYPE_FIXED_DISK = 4,PCCARD_TYPE_VIDEO = 5,PCCARD_TYPE_NETWORK = 6,PCCARD_TYPE_AIMS = 7,PCCARD_TYPE_UNKNOWN = 255,};
enum MACRO_PCIBUS {PCIBUS_CONFIG_RSRC = 0,PCIBUS_CONFIG_SET = 1,PCIBUS_CONFIG_SIZE = 2,PCIBUS_CONFIG_INIT = 3,};
enum MACRO_PCIIDM {PCIIDM_CLASS = 1,PCIIDM_SUBCLASS = 2,PCIIDM_PROGIF = 4,PCIIDM_VENDORID = 8,PCIIDM_DEVICEID = 16,PCIIDM_REVISIONID = 32,PCIIDM_SUBSYSTEMVENDORID = 64,PCIIDM_SUBSYSTEMID = 128,};
enum MACRO_PDMANT {PDMANT_1_0 = 0x0,PDMANT_1_2 = 0x1,PDMANT_1_3 = 0x2,PDMANT_1_5 = 0x3,PDMANT_2_0 = 0x4,PDMANT_2_5 = 0x5,PDMANT_3_0 = 0x6,PDMANT_3_5 = 0x7,PDMANT_4_0 = 0x8,PDMANT_4_5 = 0x9,PDMANT_5_0 = 0xA,PDMANT_5_5 = 0xB,PDMANT_6_0 = 0xC,PDMANT_7_0 = 0xD,PDMANT_8_0 = 0xE,PDMANT_9_0 = 0xF,};
enum MACRO_PF_BTH {PF_BTH = 32,PF_MAX = 32,};
enum MACRO_PIDDSI {PIDDSI_CATEGORY = 0x2,PIDDSI_PRESFORMAT = 0x3,PIDDSI_BYTECOUNT = 0x4,PIDDSI_LINECOUNT = 0x5,PIDDSI_PARCOUNT = 0x6,PIDDSI_SLIDECOUNT = 0x7,PIDDSI_NOTECOUNT = 0x8,PIDDSI_HIDDENCOUNT = 0x9,PIDDSI_MMCLIPCOUNT = 0xA,PIDDSI_SCALE = 0xB,PIDDSI_HEADINGPAIR = 0xC,PIDDSI_DOCPARTS = 0xD,PIDDSI_MANAGER = 0xE,PIDDSI_COMPANY = 0xF,PIDDSI_LINKSDIRTY = 0x10,};
enum MACRO_PIDISF {PIDISF_RECENTLYCHANGED = 0x1,PIDISF_CACHEDSTICKY = 0x2,PIDISF_CACHEIMAGES = 0x10,PIDISF_FOLLOWALLLINKS = 0x20,};
enum MACRO_PIDISM {PIDISM_GLOBAL = 0,PIDISM_WATCH = 1,PIDISM_DONTWATCH = 2,};
enum MACRO_PIDMSI {PIDMSI_EDITOR = 0x2,PIDMSI_SUPPLIER = 0x3,PIDMSI_SOURCE = 0x4,PIDMSI_SEQUENCE_NO = 0x5,PIDMSI_PROJECT = 0x6,PIDMSI_STATUS = 0x7,PIDMSI_OWNER = 0x8,PIDMSI_RATING = 0x9,PIDMSI_PRODUCTION = 0xA,PIDMSI_COPYRIGHT = 0xB,};
enum MACRO_PID_IS {PID_IS_URL = 2,PID_IS_NAME = 4,PID_IS_WORKINGDIR = 5,PID_IS_HOTKEY = 6,PID_IS_SHOWCMD = 7,PID_IS_ICONINDEX = 8,PID_IS_ICONFILE = 9,PID_IS_WHATSNEW = 10,PID_IS_AUTHOR = 11,PID_IS_DESCRIPTION = 12,PID_IS_COMMENT = 13,PID_INTSITE_WHATSNEW = 2,PID_INTSITE_AUTHOR = 3,PID_INTSITE_LASTVISIT = 4,PID_INTSITE_LASTMOD = 5,PID_INTSITE_VISITCOUNT = 6,PID_INTSITE_DESCRIPTION = 7,PID_INTSITE_COMMENT = 8,PID_INTSITE_FLAGS = 9,PID_INTSITE_CONTENTLEN = 10,PID_INTSITE_CONTENTCODE = 11,PID_INTSITE_RECURSE = 12,PID_INTSITE_WATCH = 13,PID_INTSITE_SUBSCRIPTION = 14,PID_INTSITE_URL = 15,PID_INTSITE_TITLE = 16,PID_INTSITE_CODEPAGE = 18,PID_INTSITE_TRACKING = 19,PID_INTSITE_ICONINDEX = 20,PID_INTSITE_ICONFILE = 21,};
enum MACRO_PKCS12 {PKCS12_IMPORT_RESERVED_MASK = 0xFFFF0000,};
enum MACRO_PLANES {PLANES = 14,NUMBRUSHES = 16,};
enum MACRO_PREFIX {PREFIX_MISMATCH = 0xC00037EA,PREFIX_MISMATCH_FIXED = 0xC00037EB,PREFIX_MISMATCH_NOT_FIXED = 0xC00037EC,};
enum MACRO_PROPID {PROPID_QUERY_RANKVECTOR = 0x2,PROPID_QUERY_RANK = 0x3,PROPID_QUERY_HITCOUNT = 0x4,PROPID_QUERY_ALL = 0x6,PROPID_STG_CONTENTS = 0x13,};
enum MACRO_PRSPEC {PRSPEC_INVALID = 0xFFFFFFFF,PRSPEC_LPWSTR = 0x0,PRSPEC_PROPID = 0x1,};
enum MACRO_PSNRET {PSNRET_NOERROR = 0,PSNRET_INVALID = 1,PSNRET_INVALID_NOCHANGEPAGE = 2,};
enum MACRO_PST_PC {PST_PC_PFX = 0x1,PST_PC_HARDWARE = 0x2,PST_PC_SMARTCARD = 0x4,PST_PC_PCMCIA = 0x8,PST_PC_MULTIPLE_REPOSITORIES = 0x10,PST_PC_ROAMABLE = 0x20,PST_RC_REMOVABLE = 0x80000000,PST_KEY_CURRENT_USER = 0x0,PST_KEY_LOCAL_MACHINE = 0x1,PST_CF_DEFAULT = 0x0,PST_CF_NONE = 0x1,PST_PF_ALWAYS_SHOW = 0x1,PST_PF_NEVER_SHOW = 0x2,PST_NO_OVERWRITE = 0x2,PST_UNRESTRICTED_ITEMDATA = 0x4,PST_PROMPT_QUERY = 0x8,PST_NO_UI_MIGRATION = 0x10,PST_READ = 0x1,PST_WRITE = 0x2,PST_AUTHENTICODE = 0x1,PST_BINARY_CHECK = 0x2,PST_SECURITY_DESCRIPTOR = 0x4,PST_SELF_RELATIVE_CLAUSE = 0x80000000,PST_AC_SINGLE_CALLER = 0x0,PST_AC_TOP_LEVEL_CALLER = 0x1,PST_AC_IMMEDIATE_CALLER = 0x2,PST_PP_FLUSH_PW_CACHE = 0x1,};
enum MACRO_PSWIZB {PSWIZB_BACK = 0x1,PSWIZB_NEXT = 0x2,PSWIZB_FINISH = 0x4,PSWIZB_DISABLEDFINISH = 0x8,};
enum MACRO_QITIPF {QITIPF_DEFAULT = 0x0,QITIPF_USENAME = 0x1,QITIPF_LINKNOTARGET = 0x2,QITIPF_LINKUSETARGET = 0x4,QITIPF_USESLOWTIP = 0x8,};
enum MACRO_QPARSE {QPARSE_E_UNEXPECTED_NOT = 0x80041660,QPARSE_E_EXPECTING_INTEGER = 0x80041661,QPARSE_E_EXPECTING_REAL = 0x80041662,QPARSE_E_EXPECTING_DATE = 0x80041663,QPARSE_E_EXPECTING_CURRENCY = 0x80041664,QPARSE_E_EXPECTING_GUID = 0x80041665,QPARSE_E_EXPECTING_BRACE = 0x80041666,QPARSE_E_EXPECTING_PAREN = 0x80041667,QPARSE_E_EXPECTING_PROPERTY = 0x80041668,QPARSE_E_NOT_YET_IMPLEMENTED = 0x80041669,QPARSE_E_EXPECTING_PHRASE = 0x8004166A,QPARSE_E_UNSUPPORTED_PROPERTY_TYPE = 0x8004166B,QPARSE_E_EXPECTING_REGEX = 0x8004166C,QPARSE_E_EXPECTING_REGEX_PROPERTY = 0x8004166D,QPARSE_E_INVALID_LITERAL = 0x8004166E,QPARSE_E_NO_SUCH_PROPERTY = 0x8004166F,QPARSE_E_EXPECTING_EOS = 0x80041670,QPARSE_E_EXPECTING_COMMA = 0x80041671,QPARSE_E_UNEXPECTED_EOS = 0x80041672,QPARSE_E_WEIGHT_OUT_OF_RANGE = 0x80041673,QPARSE_E_NO_SUCH_SORT_PROPERTY = 0x80041674,QPARSE_E_INVALID_SORT_ORDER = 0x80041675,};
enum MACRO_QPLIST {QPLIST_E_CANT_OPEN_FILE = 0x80041651,QPLIST_E_READ_ERROR = 0x80041652,QPLIST_E_EXPECTING_NAME = 0x80041653,QPLIST_E_EXPECTING_TYPE = 0x80041654,QPLIST_E_UNRECOGNIZED_TYPE = 0x80041655,QPLIST_E_EXPECTING_INTEGER = 0x80041656,QPLIST_E_EXPECTING_CLOSE_PAREN = 0x80041657,QPLIST_E_EXPECTING_GUID = 0x80041658,QPLIST_E_BAD_GUID = 0x80041659,QPLIST_E_EXPECTING_PROP_SPEC = 0x8004165A,QPLIST_E_CANT_SET_PROPERTY = 0x8004165B,QPLIST_E_DUPLICATE = 0x8004165C,QPLIST_E_VECTORBYREF_USED_ALONE = 0x8004165D,QPLIST_E_BYREF_USED_WITHOUT_PTRTYPE = 0x8004165E,};
enum MACRO_RASTER {RASTER_FONTTYPE = 0x1,};
enum MACRO_RCVALL {RCVALL_OFF = 0,RCVALL_ON = 1,RCVALL_SOCKETLEVELONLY = 2,};
enum MACRO_REGSTR {REGSTR_VAL_SMOOTHSCROLL_DEF = 1,REGSTR_VAL_USESTYLESHEETS_TYPE = 1,REGSTR_VAL_USEICM_DEF = 0,REGSTR_VAL_SHOWFOCUS_TYPE = 1,REGSTR_VAL_PAGETRANSITIONS_DEF = 1,REGSTR_VAL_IE_CUSTOMCOLORS_TYPE = 3,REGSTR_VAL_CODEDOWNLOAD_TYPE = 1,REGSTR_VAL_DIRECTORY_TYPE = 2,REGSTR_VAL_NEWDIRECTORY_TYPE = 2,REGSTR_VAL_CACHEPREFIX_TYPE = 1,};
enum MACRO_REMOTE {REMOTE_WAKEUP = 0x20,};
enum MACRO_REPORT {REPORT_NO_PRIVATE_KEY = 0x1,REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 0x2,};
enum MACRO_RESMGR {RESMGR_BASE_OEM = 0x80000,RESMGR_MAX_OEM = 0xFFFFF,RESMGR_IRQ = 0x1,RESMGR_IOSPACE = 0x2,};
enum MACRO_RESULT {RESULT_IS_ALIAS = 0x1,};
enum MACRO_RFCOMM {RFCOMM_FLOW_CONTROL = 0x13,};
enum MACRO_RPCFLG {RPCFLG_MESSAGE = 0x1000000,RPCFLG_AUTO_COMPLETE = 0x8000000,RPCFLG_LOCAL_CALL = 0x10000000,RPCFLG_INPUT_SYNCHRONOUS = 0x20000000,RPCFLG_ASYNCHRONOUS = 0x40000000,RPCFLG_NON_NDR = 0x80000000,};
enum MACRO_RTCRMF {RTCRMF_BUDDY_ROAMING = 0x1,RTCRMF_WATCHER_ROAMING = 0x2,RTCRMF_PRESENCE_ROAMING = 0x4,RTCRMF_PROFILE_ROAMING = 0x8,RTCRMF_ALL_ROAMING = 0xF,};
enum MACRO_RTNone {RTNone = 0,RTAnd = 1,RTOr = 2,};
enum MACRO_SCRIPT {SCRIPT_ENCODE_SECTION = 0x1,SCRIPT_ENCODE_DEFAULT_LANGUAGE = 0x1,};
enum MACRO_SC_DLG {SC_DLG_MINIMAL_UI = 0x1,SC_DLG_NO_UI = 0x2,SC_DLG_FORCE_UI = 0x4,};
enum MACRO_SEARCH {SEARCH_S_NOMOREHITS = 0x416A0,SEARCH_E_NOMONIKER = 0x800416A1,SEARCH_E_NOREGION = 0x800416A2,};
enum MACRO_SECPKG {SECPKG_FLAG_INTEGRITY = 0x1,SECPKG_FLAG_PRIVACY = 0x2,SECPKG_FLAG_TOKEN_ONLY = 0x4,SECPKG_FLAG_DATAGRAM = 0x8,SECPKG_FLAG_CONNECTION = 0x10,SECPKG_FLAG_MULTI_REQUIRED = 0x20,SECPKG_FLAG_CLIENT_ONLY = 0x40,SECPKG_FLAG_EXTENDED_ERROR = 0x80,SECPKG_FLAG_IMPERSONATION = 0x100,SECPKG_FLAG_ACCEPT_WIN32_NAME = 0x200,SECPKG_FLAG_STREAM = 0x400,SECPKG_FLAG_NEGOTIABLE = 0x800,SECPKG_FLAG_GSS_COMPATIBLE = 0x1000,SECPKG_FLAG_LOGON = 0x2000,SECPKG_FLAG_ASCII_BUFFERS = 0x4000,SECPKG_FLAG_FRAGMENT = 0x8000,SECPKG_FLAG_MUTUAL_AUTH = 0x10000,SECPKG_FLAG_DELEGATION = 0x20000,SECPKG_ID_NONE = 0xFFFF,};
enum MACRO_SELECT {SELECT_CAP_CONVERSION = 0x1,SELECT_CAP_SENTENCE = 0x2,};
enum MACRO_SETDTR {SETDTR = 5,};
enum MACRO_SETRTS {SETRTS = 3,CLRRTS = 4,};
enum MACRO_SE_ERR {SE_ERR_FNF = 2,SE_ERR_PNF = 3,SE_ERR_ACCESSDENIED = 5,SE_ERR_OOM = 8,SE_ERR_DLLNOTFOUND = 32,SE_ERR_SHARE = 26,SE_ERR_ASSOCINCOMPLETE = 27,SE_ERR_DDETIMEOUT = 28,SE_ERR_DDEFAIL = 29,SE_ERR_DDEBUSY = 30,SE_ERR_NOASSOC = 31,};
enum MACRO_SHCIDS {SHCIDS_ALLFIELDS = 0x80000000,SHCIDS_COLUMNMASK = 0xFFFF,};
enum MACRO_SHCMBF {SHCMBF_EMPTYBAR = 0x1,SHCMBF_HIDDEN = 0x2,SHCMBF_HIDESIPBUTTON = 0x4,SHCMBF_COLORBK = 0x8,SHCMBF_HMENU = 0x10,};
enum MACRO_SHCMBM {SHCMBM_SETSUBMENU = 1424,SHCMBM_GETSUBMENU = 1425,SHCMBM_GETMENU = 1426,};
enum MACRO_SHCNEE {SHCNEE_ORDERCHANGED = 2,SHCNEE_MSI_CHANGE = 4,SHCNEE_MSI_UNINSTALL = 5,};
enum MACRO_SHCORE {SHCORE_SHCORE = 1,SHCORE_PATH = 1,};
enum MACRO_SHIDIF {SHIDIF_DONEBUTTON = 0x1,SHIDIF_SIZEDLG = 0x2,SHIDIF_SIZEDLGFULLSCREEN = 0x4,SHIDIF_SIPDOWN = 0x8,SHIDIF_FULLSCREENNOMENUBAR = 0x10,SHIDIF_EMPTYMENU = 0x20,};
enum MACRO_SHIDIM {SHIDIM_FLAGS = 0x1,};
enum MACRO_SHPPFW {SHPPFW_NONE = 0x0,SHPPFW_DIRCREATE = 0x1,SHPPFW_ASKDIRCREATE = 0x2,SHPPFW_IGNOREFILENAME = 0x4,SHPPFW_NOWRITECHECK = 0x8,};
enum MACRO_SIZEOF {SIZEOF_RFPO_DATA = 16,};
enum MACRO_SOCKET {SOCKET_ERROR = -1,};
enum MACRO_SORTED {SORTED_CTL_EXT_FLAGS_OFFSET = 0,SORTED_CTL_EXT_COUNT_OFFSET = 4,SORTED_CTL_EXT_MAX_COLLISION_OFFSET = 8,SORTED_CTL_EXT_HASH_BUCKET_OFFSET = 12,SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1,};
enum MACRO_SO_BTH {SO_BTH_AUTHENTICATE = 0x1,SO_BTH_ENCRYPT = 0x2,SO_BTH_SET_PIN = 0x3,SO_BTH_SET_LINK = 0x4,SO_BTH_GET_LINK = 0x5,SO_BTH_SET_MTU = 0x6,SO_BTH_GET_MTU = 0x7,SO_BTH_SET_MTU_MAX = 0x8,SO_BTH_GET_MTU_MAX = 0x9,SO_BTH_SET_MTU_MIN = 0xA,SO_BTH_GET_MTU_MIN = 0xB,SO_BTH_SET_XON_LIM = 0xC,SO_BTH_GET_XON_LIM = 0xD,SO_BTH_SET_XOFF_LIM = 0xE,SO_BTH_GET_XOFF_LIM = 0xF,SO_BTH_SET_SEND_BUFFER = 0x10,SO_BTH_GET_SEND_BUFFER = 0x11,SO_BTH_SET_RECV_BUFFER = 0x12,SO_BTH_GET_RECV_BUFFER = 0x13,SO_BTH_GET_V24_BR = 0x14,SO_BTH_GET_RLS = 0x15,SO_BTH_SEND_MSC = 0x16,SO_BTH_SEND_RLS = 0x17,SO_BTH_GET_FLOW_TYPE = 0x18,SO_BTH_SET_PAGE_TO = 0x19,SO_BTH_GET_PAGE_TO = 0x1A,SO_BTH_SET_SCAN = 0x1B,SO_BTH_GET_SCAN = 0x1C,SO_BTH_SET_COD = 0x1D,SO_BTH_GET_COD = 0x1E,SO_BTH_GET_LOCAL_VER = 0x1F,SO_BTH_GET_REMOTE_VER = 0x20,SO_BTH_GET_AUTHN_ENABLE = 0x21,SO_BTH_SET_AUTHN_ENABLE = 0x22,SO_BTH_SET_READ_REMOTE_NAME = 0x23,SO_BTH_GET_LINK_POLICY = 0x24,SO_BTH_SET_LINK_POLICY = 0x25,SO_BTH_ENTER_HOLD_MODE = 0x26,SO_BTH_ENTER_SNIFF_MODE = 0x27,SO_BTH_EXIT_SNIFF_MODE = 0x28,SO_BTH_ENTER_PARK_MODE = 0x29,SO_BTH_EXIT_PARK_MODE = 0x2A,SO_BTH_GET_MODE = 0x2B,};
enum MACRO_SO_SSL {SO_SSL_FAMILY = 0x730000,SO_SSL_FAMILY_MASK = 0x7FF0000,};
enum MACRO_SPDEXP {SPDEXP_1NS = 0x0,SPDEXP_10NS = 0x1,SPDEXP_100NS = 0x2,SPDEXP_1US = 0x3,SPDEXP_10US = 0x4,SPDEXP_100US = 0x5,SPDEXP_1MS = 0x6,SPDEXP_10MS = 0x7,};
enum MACRO_SRCAND {SRCAND = 0x8800C6,};
enum MACRO_STATUS {STATUS_SUCCESS = 0x0,STATUS_WAIT_0 = 0x0,STATUS_WAIT_1 = 0x1,STATUS_WAIT_2 = 0x2,STATUS_WAIT_3 = 0x3,STATUS_WAIT_63 = 0x3F,STATUS_ABANDONED = 0x80,STATUS_ABANDONED_WAIT_0 = 0x80,STATUS_ABANDONED_WAIT_63 = 0xBF,STATUS_USER_APC = 0xC0,STATUS_KERNEL_APC = 0x100,STATUS_ALERTED = 0x101,STATUS_TIMEOUT = 0x102,STATUS_PENDING = 0x103,STATUS_REPARSE = 0x104,STATUS_MORE_ENTRIES = 0x105,STATUS_NOT_ALL_ASSIGNED = 0x106,STATUS_SOME_NOT_MAPPED = 0x107,STATUS_OPLOCK_BREAK_IN_PROGRESS = 0x108,STATUS_VOLUME_MOUNTED = 0x109,STATUS_RXACT_COMMITTED = 0x10A,STATUS_NOTIFY_CLEANUP = 0x10B,STATUS_NOTIFY_ENUM_DIR = 0x10C,STATUS_NO_QUOTAS_FOR_ACCOUNT = 0x10D,STATUS_PRIMARY_TRANSPORT_CONNECT_FAILED = 0x10E,STATUS_PAGE_FAULT_TRANSITION = 0x110,STATUS_PAGE_FAULT_DEMAND_ZERO = 0x111,STATUS_PAGE_FAULT_COPY_ON_WRITE = 0x112,STATUS_PAGE_FAULT_GUARD_PAGE = 0x113,STATUS_PAGE_FAULT_PAGING_FILE = 0x114,STATUS_CACHE_PAGE_LOCKED = 0x115,STATUS_CRASH_DUMP = 0x116,STATUS_BUFFER_ALL_ZEROS = 0x117,STATUS_REPARSE_OBJECT = 0x118,STATUS_RESOURCE_REQUIREMENTS_CHANGED = 0x119,STATUS_TRANSLATION_COMPLETE = 0x120,STATUS_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x121,STATUS_OBJECT_NAME_EXISTS = 0x40000000,STATUS_THREAD_WAS_SUSPENDED = 0x40000001,STATUS_WORKING_SET_LIMIT_RANGE = 0x40000002,STATUS_IMAGE_NOT_AT_BASE = 0x40000003,STATUS_RXACT_STATE_CREATED = 0x40000004,STATUS_SEGMENT_NOTIFICATION = 0x40000005,STATUS_LOCAL_USER_SESSION_KEY = 0x40000006,STATUS_BAD_CURRENT_DIRECTORY = 0x40000007,STATUS_SERIAL_MORE_WRITES = 0x40000008,STATUS_REGISTRY_RECOVERED = 0x40000009,STATUS_FT_READ_RECOVERY_FROM_BACKUP = 0x4000000A,STATUS_FT_WRITE_RECOVERY = 0x4000000B,STATUS_SERIAL_COUNTER_TIMEOUT = 0x4000000C,STATUS_NULL_LM_PASSWORD = 0x4000000D,STATUS_IMAGE_MACHINE_TYPE_MISMATCH = 0x4000000E,STATUS_RECEIVE_PARTIAL = 0x4000000F,STATUS_RECEIVE_EXPEDITED = 0x40000010,STATUS_RECEIVE_PARTIAL_EXPEDITED = 0x40000011,STATUS_EVENT_DONE = 0x40000012,STATUS_EVENT_PENDING = 0x40000013,STATUS_CHECKING_FILE_SYSTEM = 0x40000014,STATUS_FATAL_APP_EXIT = 0x40000015,STATUS_PREDEFINED_HANDLE = 0x40000016,STATUS_WAS_UNLOCKED = 0x40000017,STATUS_SERVICE_NOTIFICATION = 0x40000018,STATUS_WAS_LOCKED = 0x40000019,STATUS_LOG_HARD_ERROR = 0x4000001A,STATUS_ALREADY_WIN32 = 0x4000001B,STATUS_WX86_UNSIMULATE = 0x4000001C,STATUS_WX86_CONTINUE = 0x4000001D,STATUS_WX86_SINGLE_STEP = 0x4000001E,STATUS_WX86_BREAKPOINT = 0x4000001F,STATUS_WX86_EXCEPTION_CONTINUE = 0x40000020,STATUS_WX86_EXCEPTION_LASTCHANCE = 0x40000021,STATUS_WX86_EXCEPTION_CHAIN = 0x40000022,STATUS_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 0x40000023,STATUS_NO_YIELD_PERFORMED = 0x40000024,STATUS_TIMER_RESUME_IGNORED = 0x40000025,STATUS_ARBITRATION_UNHANDLED = 0x40000026,STATUS_CARDBUS_NOT_SUPPORTED = 0x40000027,STATUS_WX86_CREATEWX86TIB = 0x40000028,STATUS_GUARD_PAGE_VIOLATION = 0x80000001,STATUS_DATATYPE_MISALIGNMENT = 0x80000002,STATUS_BREAKPOINT = 0x80000003,STATUS_SINGLE_STEP = 0x80000004,STATUS_BUFFER_OVERFLOW = 0x80000005,STATUS_NO_MORE_FILES = 0x80000006,STATUS_WAKE_SYSTEM_DEBUGGER = 0x80000007,STATUS_HANDLES_CLOSED = 0x8000000A,STATUS_NO_INHERITANCE = 0x8000000B,STATUS_GUID_SUBSTITUTION_MADE = 0x8000000C,STATUS_PARTIAL_COPY = 0x8000000D,STATUS_DEVICE_PAPER_EMPTY = 0x8000000E,STATUS_DEVICE_POWERED_OFF = 0x8000000F,STATUS_DEVICE_OFF_LINE = 0x80000010,STATUS_DEVICE_BUSY = 0x80000011,STATUS_NO_MORE_EAS = 0x80000012,STATUS_INVALID_EA_NAME = 0x80000013,STATUS_EA_LIST_INCONSISTENT = 0x80000014,STATUS_INVALID_EA_FLAG = 0x80000015,STATUS_VERIFY_REQUIRED = 0x80000016,STATUS_EXTRANEOUS_INFORMATION = 0x80000017,STATUS_RXACT_COMMIT_NECESSARY = 0x80000018,STATUS_NO_MORE_ENTRIES = 0x8000001A,STATUS_FILEMARK_DETECTED = 0x8000001B,STATUS_MEDIA_CHANGED = 0x8000001C,STATUS_BUS_RESET = 0x8000001D,STATUS_END_OF_MEDIA = 0x8000001E,STATUS_BEGINNING_OF_MEDIA = 0x8000001F,STATUS_MEDIA_CHECK = 0x80000020,STATUS_SETMARK_DETECTED = 0x80000021,STATUS_NO_DATA_DETECTED = 0x80000022,STATUS_REDIRECTOR_HAS_OPEN_HANDLES = 0x80000023,STATUS_SERVER_HAS_OPEN_HANDLES = 0x80000024,STATUS_ALREADY_DISCONNECTED = 0x80000025,STATUS_LONGJUMP = 0x80000026,STATUS_USER_BREAK = 0x80000113,STATUS_UNSUCCESSFUL = 0xC0000001,STATUS_NOT_IMPLEMENTED = 0xC0000002,STATUS_INVALID_INFO_CLASS = 0xC0000003,STATUS_INFO_LENGTH_MISMATCH = 0xC0000004,STATUS_ACCESS_VIOLATION = 0xC0000005,STATUS_IN_PAGE_ERROR = 0xC0000006,STATUS_PAGEFILE_QUOTA = 0xC0000007,STATUS_INVALID_HANDLE = 0xC0000008,STATUS_BAD_INITIAL_STACK = 0xC0000009,STATUS_BAD_INITIAL_PC = 0xC000000A,STATUS_INVALID_CID = 0xC000000B,STATUS_TIMER_NOT_CANCELED = 0xC000000C,STATUS_INVALID_PARAMETER = 0xC000000D,STATUS_NO_SUCH_DEVICE = 0xC000000E,STATUS_NO_SUCH_FILE = 0xC000000F,STATUS_INVALID_DEVICE_REQUEST = 0xC0000010,STATUS_END_OF_FILE = 0xC0000011,STATUS_WRONG_VOLUME = 0xC0000012,STATUS_NO_MEDIA_IN_DEVICE = 0xC0000013,STATUS_UNRECOGNIZED_MEDIA = 0xC0000014,STATUS_NONEXISTENT_SECTOR = 0xC0000015,STATUS_MORE_PROCESSING_REQUIRED = 0xC0000016,STATUS_NO_MEMORY = 0xC0000017,STATUS_CONFLICTING_ADDRESSES = 0xC0000018,STATUS_NOT_MAPPED_VIEW = 0xC0000019,STATUS_UNABLE_TO_FREE_VM = 0xC000001A,STATUS_UNABLE_TO_DELETE_SECTION = 0xC000001B,STATUS_INVALID_SYSTEM_SERVICE = 0xC000001C,STATUS_ILLEGAL_INSTRUCTION = 0xC000001D,STATUS_INVALID_LOCK_SEQUENCE = 0xC000001E,STATUS_INVALID_VIEW_SIZE = 0xC000001F,STATUS_INVALID_FILE_FOR_SECTION = 0xC0000020,STATUS_ALREADY_COMMITTED = 0xC0000021,STATUS_ACCESS_DENIED = 0xC0000022,STATUS_BUFFER_TOO_SMALL = 0xC0000023,STATUS_OBJECT_TYPE_MISMATCH = 0xC0000024,STATUS_NONCONTINUABLE_EXCEPTION = 0xC0000025,STATUS_INVALID_DISPOSITION = 0xC0000026,STATUS_UNWIND = 0xC0000027,STATUS_BAD_STACK = 0xC0000028,STATUS_INVALID_UNWIND_TARGET = 0xC0000029,STATUS_NOT_LOCKED = 0xC000002A,STATUS_PARITY_ERROR = 0xC000002B,STATUS_UNABLE_TO_DECOMMIT_VM = 0xC000002C,STATUS_NOT_COMMITTED = 0xC000002D,STATUS_INVALID_PORT_ATTRIBUTES = 0xC000002E,STATUS_PORT_MESSAGE_TOO_LONG = 0xC000002F,STATUS_INVALID_PARAMETER_MIX = 0xC0000030,STATUS_INVALID_QUOTA_LOWER = 0xC0000031,STATUS_DISK_CORRUPT_ERROR = 0xC0000032,STATUS_OBJECT_NAME_INVALID = 0xC0000033,STATUS_OBJECT_NAME_NOT_FOUND = 0xC0000034,STATUS_OBJECT_NAME_COLLISION = 0xC0000035,STATUS_PORT_DISCONNECTED = 0xC0000037,STATUS_DEVICE_ALREADY_ATTACHED = 0xC0000038,STATUS_OBJECT_PATH_INVALID = 0xC0000039,STATUS_OBJECT_PATH_NOT_FOUND = 0xC000003A,STATUS_OBJECT_PATH_SYNTAX_BAD = 0xC000003B,STATUS_DATA_OVERRUN = 0xC000003C,STATUS_DATA_LATE_ERROR = 0xC000003D,STATUS_DATA_ERROR = 0xC000003E,STATUS_CRC_ERROR = 0xC000003F,STATUS_SECTION_TOO_BIG = 0xC0000040,STATUS_PORT_CONNECTION_REFUSED = 0xC0000041,STATUS_INVALID_PORT_HANDLE = 0xC0000042,STATUS_SHARING_VIOLATION = 0xC0000043,STATUS_QUOTA_EXCEEDED = 0xC0000044,STATUS_INVALID_PAGE_PROTECTION = 0xC0000045,STATUS_MUTANT_NOT_OWNED = 0xC0000046,STATUS_SEMAPHORE_LIMIT_EXCEEDED = 0xC0000047,STATUS_PORT_ALREADY_SET = 0xC0000048,STATUS_SECTION_NOT_IMAGE = 0xC0000049,STATUS_SUSPEND_COUNT_EXCEEDED = 0xC000004A,STATUS_THREAD_IS_TERMINATING = 0xC000004B,STATUS_BAD_WORKING_SET_LIMIT = 0xC000004C,STATUS_INCOMPATIBLE_FILE_MAP = 0xC000004D,STATUS_SECTION_PROTECTION = 0xC000004E,STATUS_EAS_NOT_SUPPORTED = 0xC000004F,STATUS_EA_TOO_LARGE = 0xC0000050,STATUS_NONEXISTENT_EA_ENTRY = 0xC0000051,STATUS_NO_EAS_ON_FILE = 0xC0000052,STATUS_EA_CORRUPT_ERROR = 0xC0000053,STATUS_FILE_LOCK_CONFLICT = 0xC0000054,STATUS_LOCK_NOT_GRANTED = 0xC0000055,STATUS_DELETE_PENDING = 0xC0000056,STATUS_CTL_FILE_NOT_SUPPORTED = 0xC0000057,STATUS_UNKNOWN_REVISION = 0xC0000058,STATUS_REVISION_MISMATCH = 0xC0000059,STATUS_INVALID_OWNER = 0xC000005A,STATUS_INVALID_PRIMARY_GROUP = 0xC000005B,STATUS_NO_IMPERSONATION_TOKEN = 0xC000005C,STATUS_CANT_DISABLE_MANDATORY = 0xC000005D,STATUS_NO_LOGON_SERVERS = 0xC000005E,STATUS_NO_SUCH_LOGON_SESSION = 0xC000005F,STATUS_NO_SUCH_PRIVILEGE = 0xC0000060,STATUS_PRIVILEGE_NOT_HELD = 0xC0000061,STATUS_INVALID_ACCOUNT_NAME = 0xC0000062,STATUS_USER_EXISTS = 0xC0000063,STATUS_NO_SUCH_USER = 0xC0000064,STATUS_GROUP_EXISTS = 0xC0000065,STATUS_NO_SUCH_GROUP = 0xC0000066,STATUS_MEMBER_IN_GROUP = 0xC0000067,STATUS_MEMBER_NOT_IN_GROUP = 0xC0000068,STATUS_LAST_ADMIN = 0xC0000069,STATUS_WRONG_PASSWORD = 0xC000006A,STATUS_ILL_FORMED_PASSWORD = 0xC000006B,STATUS_PASSWORD_RESTRICTION = 0xC000006C,STATUS_LOGON_FAILURE = 0xC000006D,STATUS_ACCOUNT_RESTRICTION = 0xC000006E,STATUS_INVALID_LOGON_HOURS = 0xC000006F,STATUS_INVALID_WORKSTATION = 0xC0000070,STATUS_PASSWORD_EXPIRED = 0xC0000071,STATUS_ACCOUNT_DISABLED = 0xC0000072,STATUS_NONE_MAPPED = 0xC0000073,STATUS_TOO_MANY_LUIDS_REQUESTED = 0xC0000074,STATUS_LUIDS_EXHAUSTED = 0xC0000075,STATUS_INVALID_SUB_AUTHORITY = 0xC0000076,STATUS_INVALID_ACL = 0xC0000077,STATUS_INVALID_SID = 0xC0000078,STATUS_INVALID_SECURITY_DESCR = 0xC0000079,STATUS_PROCEDURE_NOT_FOUND = 0xC000007A,STATUS_INVALID_IMAGE_FORMAT = 0xC000007B,STATUS_NO_TOKEN = 0xC000007C,STATUS_BAD_INHERITANCE_ACL = 0xC000007D,STATUS_RANGE_NOT_LOCKED = 0xC000007E,STATUS_DISK_FULL = 0xC000007F,STATUS_SERVER_DISABLED = 0xC0000080,STATUS_SERVER_NOT_DISABLED = 0xC0000081,STATUS_TOO_MANY_GUIDS_REQUESTED = 0xC0000082,STATUS_GUIDS_EXHAUSTED = 0xC0000083,STATUS_INVALID_ID_AUTHORITY = 0xC0000084,STATUS_AGENTS_EXHAUSTED = 0xC0000085,STATUS_INVALID_VOLUME_LABEL = 0xC0000086,STATUS_SECTION_NOT_EXTENDED = 0xC0000087,STATUS_NOT_MAPPED_DATA = 0xC0000088,STATUS_RESOURCE_DATA_NOT_FOUND = 0xC0000089,STATUS_RESOURCE_TYPE_NOT_FOUND = 0xC000008A,STATUS_RESOURCE_NAME_NOT_FOUND = 0xC000008B,STATUS_ARRAY_BOUNDS_EXCEEDED = 0xC000008C,STATUS_FLOAT_DENORMAL_OPERAND = 0xC000008D,STATUS_FLOAT_DIVIDE_BY_ZERO = 0xC000008E,STATUS_FLOAT_INEXACT_RESULT = 0xC000008F,STATUS_FLOAT_INVALID_OPERATION = 0xC0000090,STATUS_FLOAT_OVERFLOW = 0xC0000091,STATUS_FLOAT_STACK_CHECK = 0xC0000092,STATUS_FLOAT_UNDERFLOW = 0xC0000093,STATUS_INTEGER_DIVIDE_BY_ZERO = 0xC0000094,STATUS_INTEGER_OVERFLOW = 0xC0000095,STATUS_PRIVILEGED_INSTRUCTION = 0xC0000096,STATUS_TOO_MANY_PAGING_FILES = 0xC0000097,STATUS_FILE_INVALID = 0xC0000098,STATUS_ALLOTTED_SPACE_EXCEEDED = 0xC0000099,STATUS_INSUFFICIENT_RESOURCES = 0xC000009A,STATUS_DFS_EXIT_PATH_FOUND = 0xC000009B,STATUS_DEVICE_DATA_ERROR = 0xC000009C,STATUS_DEVICE_NOT_CONNECTED = 0xC000009D,STATUS_DEVICE_POWER_FAILURE = 0xC000009E,STATUS_FREE_VM_NOT_AT_BASE = 0xC000009F,STATUS_MEMORY_NOT_ALLOCATED = 0xC00000A0,STATUS_WORKING_SET_QUOTA = 0xC00000A1,STATUS_MEDIA_WRITE_PROTECTED = 0xC00000A2,STATUS_DEVICE_NOT_READY = 0xC00000A3,STATUS_INVALID_GROUP_ATTRIBUTES = 0xC00000A4,STATUS_BAD_IMPERSONATION_LEVEL = 0xC00000A5,STATUS_CANT_OPEN_ANONYMOUS = 0xC00000A6,STATUS_BAD_VALIDATION_CLASS = 0xC00000A7,STATUS_BAD_TOKEN_TYPE = 0xC00000A8,STATUS_BAD_MASTER_BOOT_RECORD = 0xC00000A9,STATUS_INSTRUCTION_MISALIGNMENT = 0xC00000AA,STATUS_INSTANCE_NOT_AVAILABLE = 0xC00000AB,STATUS_PIPE_NOT_AVAILABLE = 0xC00000AC,STATUS_INVALID_PIPE_STATE = 0xC00000AD,STATUS_PIPE_BUSY = 0xC00000AE,STATUS_ILLEGAL_FUNCTION = 0xC00000AF,STATUS_PIPE_DISCONNECTED = 0xC00000B0,STATUS_PIPE_CLOSING = 0xC00000B1,STATUS_PIPE_CONNECTED = 0xC00000B2,STATUS_PIPE_LISTENING = 0xC00000B3,STATUS_INVALID_READ_MODE = 0xC00000B4,STATUS_IO_TIMEOUT = 0xC00000B5,STATUS_FILE_FORCED_CLOSED = 0xC00000B6,STATUS_PROFILING_NOT_STARTED = 0xC00000B7,STATUS_PROFILING_NOT_STOPPED = 0xC00000B8,STATUS_COULD_NOT_INTERPRET = 0xC00000B9,STATUS_FILE_IS_A_DIRECTORY = 0xC00000BA,STATUS_NOT_SUPPORTED = 0xC00000BB,STATUS_REMOTE_NOT_LISTENING = 0xC00000BC,STATUS_DUPLICATE_NAME = 0xC00000BD,STATUS_BAD_NETWORK_PATH = 0xC00000BE,STATUS_NETWORK_BUSY = 0xC00000BF,STATUS_DEVICE_DOES_NOT_EXIST = 0xC00000C0,STATUS_TOO_MANY_COMMANDS = 0xC00000C1,STATUS_ADAPTER_HARDWARE_ERROR = 0xC00000C2,STATUS_INVALID_NETWORK_RESPONSE = 0xC00000C3,STATUS_UNEXPECTED_NETWORK_ERROR = 0xC00000C4,STATUS_BAD_REMOTE_ADAPTER = 0xC00000C5,STATUS_PRINT_QUEUE_FULL = 0xC00000C6,STATUS_NO_SPOOL_SPACE = 0xC00000C7,STATUS_PRINT_CANCELLED = 0xC00000C8,STATUS_NETWORK_NAME_DELETED = 0xC00000C9,STATUS_NETWORK_ACCESS_DENIED = 0xC00000CA,STATUS_BAD_DEVICE_TYPE = 0xC00000CB,STATUS_BAD_NETWORK_NAME = 0xC00000CC,STATUS_TOO_MANY_NAMES = 0xC00000CD,STATUS_TOO_MANY_SESSIONS = 0xC00000CE,STATUS_SHARING_PAUSED = 0xC00000CF,STATUS_REQUEST_NOT_ACCEPTED = 0xC00000D0,STATUS_REDIRECTOR_PAUSED = 0xC00000D1,STATUS_NET_WRITE_FAULT = 0xC00000D2,STATUS_PROFILING_AT_LIMIT = 0xC00000D3,STATUS_NOT_SAME_DEVICE = 0xC00000D4,STATUS_FILE_RENAMED = 0xC00000D5,STATUS_VIRTUAL_CIRCUIT_CLOSED = 0xC00000D6,STATUS_NO_SECURITY_ON_OBJECT = 0xC00000D7,STATUS_CANT_WAIT = 0xC00000D8,STATUS_PIPE_EMPTY = 0xC00000D9,STATUS_CANT_ACCESS_DOMAIN_INFO = 0xC00000DA,STATUS_CANT_TERMINATE_SELF = 0xC00000DB,STATUS_INVALID_SERVER_STATE = 0xC00000DC,STATUS_INVALID_DOMAIN_STATE = 0xC00000DD,STATUS_INVALID_DOMAIN_ROLE = 0xC00000DE,STATUS_NO_SUCH_DOMAIN = 0xC00000DF,STATUS_DOMAIN_EXISTS = 0xC00000E0,STATUS_DOMAIN_LIMIT_EXCEEDED = 0xC00000E1,STATUS_OPLOCK_NOT_GRANTED = 0xC00000E2,STATUS_INVALID_OPLOCK_PROTOCOL = 0xC00000E3,STATUS_INTERNAL_DB_CORRUPTION = 0xC00000E4,STATUS_INTERNAL_ERROR = 0xC00000E5,STATUS_GENERIC_NOT_MAPPED = 0xC00000E6,STATUS_BAD_DESCRIPTOR_FORMAT = 0xC00000E7,STATUS_INVALID_USER_BUFFER = 0xC00000E8,STATUS_UNEXPECTED_IO_ERROR = 0xC00000E9,STATUS_UNEXPECTED_MM_CREATE_ERR = 0xC00000EA,STATUS_UNEXPECTED_MM_MAP_ERROR = 0xC00000EB,STATUS_UNEXPECTED_MM_EXTEND_ERR = 0xC00000EC,STATUS_NOT_LOGON_PROCESS = 0xC00000ED,STATUS_LOGON_SESSION_EXISTS = 0xC00000EE,STATUS_INVALID_PARAMETER_1 = 0xC00000EF,STATUS_INVALID_PARAMETER_2 = 0xC00000F0,STATUS_INVALID_PARAMETER_3 = 0xC00000F1,STATUS_INVALID_PARAMETER_4 = 0xC00000F2,STATUS_INVALID_PARAMETER_5 = 0xC00000F3,STATUS_INVALID_PARAMETER_6 = 0xC00000F4,STATUS_INVALID_PARAMETER_7 = 0xC00000F5,STATUS_INVALID_PARAMETER_8 = 0xC00000F6,STATUS_INVALID_PARAMETER_9 = 0xC00000F7,STATUS_INVALID_PARAMETER_10 = 0xC00000F8,STATUS_INVALID_PARAMETER_11 = 0xC00000F9,STATUS_INVALID_PARAMETER_12 = 0xC00000FA,STATUS_REDIRECTOR_NOT_STARTED = 0xC00000FB,STATUS_REDIRECTOR_STARTED = 0xC00000FC,STATUS_STACK_OVERFLOW = 0xC00000FD,STATUS_NO_SUCH_PACKAGE = 0xC00000FE,STATUS_BAD_FUNCTION_TABLE = 0xC00000FF,STATUS_VARIABLE_NOT_FOUND = 0xC0000100,STATUS_DIRECTORY_NOT_EMPTY = 0xC0000101,STATUS_FILE_CORRUPT_ERROR = 0xC0000102,STATUS_NOT_A_DIRECTORY = 0xC0000103,STATUS_BAD_LOGON_SESSION_STATE = 0xC0000104,STATUS_LOGON_SESSION_COLLISION = 0xC0000105,STATUS_NAME_TOO_LONG = 0xC0000106,STATUS_FILES_OPEN = 0xC0000107,STATUS_CONNECTION_IN_USE = 0xC0000108,STATUS_MESSAGE_NOT_FOUND = 0xC0000109,STATUS_PROCESS_IS_TERMINATING = 0xC000010A,STATUS_INVALID_LOGON_TYPE = 0xC000010B,STATUS_NO_GUID_TRANSLATION = 0xC000010C,STATUS_CANNOT_IMPERSONATE = 0xC000010D,STATUS_IMAGE_ALREADY_LOADED = 0xC000010E,STATUS_ABIOS_NOT_PRESENT = 0xC000010F,STATUS_ABIOS_LID_NOT_EXIST = 0xC0000110,STATUS_ABIOS_LID_ALREADY_OWNED = 0xC0000111,STATUS_ABIOS_NOT_LID_OWNER = 0xC0000112,STATUS_ABIOS_INVALID_COMMAND = 0xC0000113,STATUS_ABIOS_INVALID_LID = 0xC0000114,STATUS_ABIOS_SELECTOR_NOT_AVAILABLE = 0xC0000115,STATUS_ABIOS_INVALID_SELECTOR = 0xC0000116,STATUS_NO_LDT = 0xC0000117,STATUS_INVALID_LDT_SIZE = 0xC0000118,STATUS_INVALID_LDT_OFFSET = 0xC0000119,STATUS_INVALID_LDT_DESCRIPTOR = 0xC000011A,STATUS_INVALID_IMAGE_NE_FORMAT = 0xC000011B,STATUS_RXACT_INVALID_STATE = 0xC000011C,STATUS_RXACT_COMMIT_FAILURE = 0xC000011D,STATUS_MAPPED_FILE_SIZE_ZERO = 0xC000011E,STATUS_TOO_MANY_OPENED_FILES = 0xC000011F,STATUS_CANCELLED = 0xC0000120,STATUS_CANNOT_DELETE = 0xC0000121,STATUS_INVALID_COMPUTER_NAME = 0xC0000122,STATUS_FILE_DELETED = 0xC0000123,STATUS_SPECIAL_ACCOUNT = 0xC0000124,STATUS_SPECIAL_GROUP = 0xC0000125,STATUS_SPECIAL_USER = 0xC0000126,STATUS_MEMBERS_PRIMARY_GROUP = 0xC0000127,STATUS_FILE_CLOSED = 0xC0000128,STATUS_TOO_MANY_THREADS = 0xC0000129,STATUS_THREAD_NOT_IN_PROCESS = 0xC000012A,STATUS_TOKEN_ALREADY_IN_USE = 0xC000012B,STATUS_PAGEFILE_QUOTA_EXCEEDED = 0xC000012C,STATUS_COMMITMENT_LIMIT = 0xC000012D,STATUS_INVALID_IMAGE_LE_FORMAT = 0xC000012E,STATUS_INVALID_IMAGE_NOT_MZ = 0xC000012F,STATUS_INVALID_IMAGE_PROTECT = 0xC0000130,STATUS_INVALID_IMAGE_WIN_16 = 0xC0000131,STATUS_LOGON_SERVER_CONFLICT = 0xC0000132,STATUS_TIME_DIFFERENCE_AT_DC = 0xC0000133,STATUS_SYNCHRONIZATION_REQUIRED = 0xC0000134,STATUS_DLL_NOT_FOUND = 0xC0000135,STATUS_OPEN_FAILED = 0xC0000136,STATUS_IO_PRIVILEGE_FAILED = 0xC0000137,STATUS_ORDINAL_NOT_FOUND = 0xC0000138,STATUS_ENTRYPOINT_NOT_FOUND = 0xC0000139,STATUS_CONTROL_C_EXIT = 0xC000013A,STATUS_LOCAL_DISCONNECT = 0xC000013B,STATUS_REMOTE_DISCONNECT = 0xC000013C,STATUS_REMOTE_RESOURCES = 0xC000013D,STATUS_LINK_FAILED = 0xC000013E,STATUS_LINK_TIMEOUT = 0xC000013F,STATUS_INVALID_CONNECTION = 0xC0000140,STATUS_INVALID_ADDRESS = 0xC0000141,STATUS_DLL_INIT_FAILED = 0xC0000142,STATUS_MISSING_SYSTEMFILE = 0xC0000143,STATUS_UNHANDLED_EXCEPTION = 0xC0000144,STATUS_APP_INIT_FAILURE = 0xC0000145,STATUS_PAGEFILE_CREATE_FAILED = 0xC0000146,STATUS_NO_PAGEFILE = 0xC0000147,STATUS_INVALID_LEVEL = 0xC0000148,STATUS_WRONG_PASSWORD_CORE = 0xC0000149,STATUS_ILLEGAL_FLOAT_CONTEXT = 0xC000014A,STATUS_PIPE_BROKEN = 0xC000014B,STATUS_REGISTRY_CORRUPT = 0xC000014C,STATUS_REGISTRY_IO_FAILED = 0xC000014D,STATUS_NO_EVENT_PAIR = 0xC000014E,STATUS_UNRECOGNIZED_VOLUME = 0xC000014F,STATUS_SERIAL_NO_DEVICE_INITED = 0xC0000150,STATUS_NO_SUCH_ALIAS = 0xC0000151,STATUS_MEMBER_NOT_IN_ALIAS = 0xC0000152,STATUS_MEMBER_IN_ALIAS = 0xC0000153,STATUS_ALIAS_EXISTS = 0xC0000154,STATUS_LOGON_NOT_GRANTED = 0xC0000155,STATUS_TOO_MANY_SECRETS = 0xC0000156,STATUS_SECRET_TOO_LONG = 0xC0000157,STATUS_INTERNAL_DB_ERROR = 0xC0000158,STATUS_FULLSCREEN_MODE = 0xC0000159,STATUS_TOO_MANY_CONTEXT_IDS = 0xC000015A,STATUS_LOGON_TYPE_NOT_GRANTED = 0xC000015B,STATUS_NOT_REGISTRY_FILE = 0xC000015C,STATUS_NT_CROSS_ENCRYPTION_REQUIRED = 0xC000015D,STATUS_DOMAIN_CTRLR_CONFIG_ERROR = 0xC000015E,STATUS_FT_MISSING_MEMBER = 0xC000015F,STATUS_ILL_FORMED_SERVICE_ENTRY = 0xC0000160,STATUS_ILLEGAL_CHARACTER = 0xC0000161,STATUS_UNMAPPABLE_CHARACTER = 0xC0000162,STATUS_UNDEFINED_CHARACTER = 0xC0000163,STATUS_FLOPPY_VOLUME = 0xC0000164,STATUS_FLOPPY_ID_MARK_NOT_FOUND = 0xC0000165,STATUS_FLOPPY_WRONG_CYLINDER = 0xC0000166,STATUS_FLOPPY_UNKNOWN_ERROR = 0xC0000167,STATUS_FLOPPY_BAD_REGISTERS = 0xC0000168,STATUS_DISK_RECALIBRATE_FAILED = 0xC0000169,STATUS_DISK_OPERATION_FAILED = 0xC000016A,STATUS_DISK_RESET_FAILED = 0xC000016B,STATUS_SHARED_IRQ_BUSY = 0xC000016C,STATUS_FT_ORPHANING = 0xC000016D,STATUS_BIOS_FAILED_TO_CONNECT_INTERRUPT = 0xC000016E,STATUS_PARTITION_FAILURE = 0xC0000172,STATUS_INVALID_BLOCK_LENGTH = 0xC0000173,STATUS_DEVICE_NOT_PARTITIONED = 0xC0000174,STATUS_UNABLE_TO_LOCK_MEDIA = 0xC0000175,STATUS_UNABLE_TO_UNLOAD_MEDIA = 0xC0000176,STATUS_EOM_OVERFLOW = 0xC0000177,STATUS_NO_MEDIA = 0xC0000178,STATUS_NO_SUCH_MEMBER = 0xC000017A,STATUS_INVALID_MEMBER = 0xC000017B,STATUS_KEY_DELETED = 0xC000017C,STATUS_NO_LOG_SPACE = 0xC000017D,STATUS_TOO_MANY_SIDS = 0xC000017E,STATUS_LM_CROSS_ENCRYPTION_REQUIRED = 0xC000017F,STATUS_KEY_HAS_CHILDREN = 0xC0000180,STATUS_CHILD_MUST_BE_VOLATILE = 0xC0000181,STATUS_DEVICE_CONFIGURATION_ERROR = 0xC0000182,STATUS_DRIVER_INTERNAL_ERROR = 0xC0000183,STATUS_INVALID_DEVICE_STATE = 0xC0000184,STATUS_IO_DEVICE_ERROR = 0xC0000185,STATUS_DEVICE_PROTOCOL_ERROR = 0xC0000186,STATUS_BACKUP_CONTROLLER = 0xC0000187,STATUS_LOG_FILE_FULL = 0xC0000188,STATUS_TOO_LATE = 0xC0000189,STATUS_NO_TRUST_LSA_SECRET = 0xC000018A,STATUS_NO_TRUST_SAM_ACCOUNT = 0xC000018B,STATUS_TRUSTED_DOMAIN_FAILURE = 0xC000018C,STATUS_TRUSTED_RELATIONSHIP_FAILURE = 0xC000018D,STATUS_EVENTLOG_FILE_CORRUPT = 0xC000018E,STATUS_EVENTLOG_CANT_START = 0xC000018F,STATUS_TRUST_FAILURE = 0xC0000190,STATUS_MUTANT_LIMIT_EXCEEDED = 0xC0000191,STATUS_NETLOGON_NOT_STARTED = 0xC0000192,STATUS_ACCOUNT_EXPIRED = 0xC0000193,STATUS_POSSIBLE_DEADLOCK = 0xC0000194,STATUS_NETWORK_CREDENTIAL_CONFLICT = 0xC0000195,STATUS_REMOTE_SESSION_LIMIT = 0xC0000196,STATUS_EVENTLOG_FILE_CHANGED = 0xC0000197,STATUS_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0xC0000198,STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0xC0000199,STATUS_NOLOGON_SERVER_TRUST_ACCOUNT = 0xC000019A,STATUS_DOMAIN_TRUST_INCONSISTENT = 0xC000019B,STATUS_FS_DRIVER_REQUIRED = 0xC000019C,STATUS_NO_USER_SESSION_KEY = 0xC0000202,STATUS_USER_SESSION_DELETED = 0xC0000203,STATUS_RESOURCE_LANG_NOT_FOUND = 0xC0000204,STATUS_INSUFF_SERVER_RESOURCES = 0xC0000205,STATUS_INVALID_BUFFER_SIZE = 0xC0000206,STATUS_INVALID_ADDRESS_COMPONENT = 0xC0000207,STATUS_INVALID_ADDRESS_WILDCARD = 0xC0000208,STATUS_TOO_MANY_ADDRESSES = 0xC0000209,STATUS_ADDRESS_ALREADY_EXISTS = 0xC000020A,STATUS_ADDRESS_CLOSED = 0xC000020B,STATUS_CONNECTION_DISCONNECTED = 0xC000020C,STATUS_CONNECTION_RESET = 0xC000020D,STATUS_TOO_MANY_NODES = 0xC000020E,STATUS_TRANSACTION_ABORTED = 0xC000020F,STATUS_TRANSACTION_TIMED_OUT = 0xC0000210,STATUS_TRANSACTION_NO_RELEASE = 0xC0000211,STATUS_TRANSACTION_NO_MATCH = 0xC0000212,STATUS_TRANSACTION_RESPONDED = 0xC0000213,STATUS_TRANSACTION_INVALID_ID = 0xC0000214,STATUS_TRANSACTION_INVALID_TYPE = 0xC0000215,STATUS_NOT_SERVER_SESSION = 0xC0000216,STATUS_NOT_CLIENT_SESSION = 0xC0000217,STATUS_CANNOT_LOAD_REGISTRY_FILE = 0xC0000218,STATUS_DEBUG_ATTACH_FAILED = 0xC0000219,STATUS_SYSTEM_PROCESS_TERMINATED = 0xC000021A,STATUS_DATA_NOT_ACCEPTED = 0xC000021B,STATUS_NO_BROWSER_SERVERS_FOUND = 0xC000021C,STATUS_VDM_HARD_ERROR = 0xC000021D,STATUS_DRIVER_CANCEL_TIMEOUT = 0xC000021E,STATUS_REPLY_MESSAGE_MISMATCH = 0xC000021F,STATUS_MAPPED_ALIGNMENT = 0xC0000220,STATUS_IMAGE_CHECKSUM_MISMATCH = 0xC0000221,STATUS_LOST_WRITEBEHIND_DATA = 0xC0000222,STATUS_CLIENT_SERVER_PARAMETERS_INVALID = 0xC0000223,STATUS_PASSWORD_MUST_CHANGE = 0xC0000224,STATUS_NOT_FOUND = 0xC0000225,STATUS_NOT_TINY_STREAM = 0xC0000226,STATUS_RECOVERY_FAILURE = 0xC0000227,STATUS_STACK_OVERFLOW_READ = 0xC0000228,STATUS_FAIL_CHECK = 0xC0000229,STATUS_DUPLICATE_OBJECTID = 0xC000022A,STATUS_OBJECTID_EXISTS = 0xC000022B,STATUS_CONVERT_TO_LARGE = 0xC000022C,STATUS_RETRY = 0xC000022D,STATUS_FOUND_OUT_OF_SCOPE = 0xC000022E,STATUS_ALLOCATE_BUCKET = 0xC000022F,STATUS_PROPSET_NOT_FOUND = 0xC0000230,STATUS_MARSHALL_OVERFLOW = 0xC0000231,STATUS_INVALID_VARIANT = 0xC0000232,STATUS_DOMAIN_CONTROLLER_NOT_FOUND = 0xC0000233,STATUS_ACCOUNT_LOCKED_OUT = 0xC0000234,STATUS_HANDLE_NOT_CLOSABLE = 0xC0000235,STATUS_CONNECTION_REFUSED = 0xC0000236,STATUS_GRACEFUL_DISCONNECT = 0xC0000237,STATUS_ADDRESS_ALREADY_ASSOCIATED = 0xC0000238,STATUS_ADDRESS_NOT_ASSOCIATED = 0xC0000239,STATUS_CONNECTION_INVALID = 0xC000023A,STATUS_CONNECTION_ACTIVE = 0xC000023B,STATUS_NETWORK_UNREACHABLE = 0xC000023C,STATUS_HOST_UNREACHABLE = 0xC000023D,STATUS_PROTOCOL_UNREACHABLE = 0xC000023E,STATUS_PORT_UNREACHABLE = 0xC000023F,STATUS_REQUEST_ABORTED = 0xC0000240,STATUS_CONNECTION_ABORTED = 0xC0000241,STATUS_BAD_COMPRESSION_BUFFER = 0xC0000242,STATUS_USER_MAPPED_FILE = 0xC0000243,STATUS_AUDIT_FAILED = 0xC0000244,STATUS_TIMER_RESOLUTION_NOT_SET = 0xC0000245,STATUS_CONNECTION_COUNT_LIMIT = 0xC0000246,STATUS_LOGIN_TIME_RESTRICTION = 0xC0000247,STATUS_LOGIN_WKSTA_RESTRICTION = 0xC0000248,STATUS_IMAGE_MP_UP_MISMATCH = 0xC0000249,STATUS_INSUFFICIENT_LOGON_INFO = 0xC0000250,STATUS_BAD_DLL_ENTRYPOINT = 0xC0000251,STATUS_BAD_SERVICE_ENTRYPOINT = 0xC0000252,STATUS_LPC_REPLY_LOST = 0xC0000253,STATUS_IP_ADDRESS_CONFLICT1 = 0xC0000254,STATUS_IP_ADDRESS_CONFLICT2 = 0xC0000255,STATUS_REGISTRY_QUOTA_LIMIT = 0xC0000256,STATUS_PATH_NOT_COVERED = 0xC0000257,STATUS_NO_CALLBACK_ACTIVE = 0xC0000258,STATUS_LICENSE_QUOTA_EXCEEDED = 0xC0000259,STATUS_PWD_TOO_SHORT = 0xC000025A,STATUS_PWD_TOO_RECENT = 0xC000025B,STATUS_PWD_HISTORY_CONFLICT = 0xC000025C,STATUS_PLUGPLAY_NO_DEVICE = 0xC000025E,STATUS_UNSUPPORTED_COMPRESSION = 0xC000025F,STATUS_INVALID_HW_PROFILE = 0xC0000260,STATUS_INVALID_PLUGPLAY_DEVICE_PATH = 0xC0000261,STATUS_DRIVER_ORDINAL_NOT_FOUND = 0xC0000262,STATUS_DRIVER_ENTRYPOINT_NOT_FOUND = 0xC0000263,STATUS_RESOURCE_NOT_OWNED = 0xC0000264,STATUS_TOO_MANY_LINKS = 0xC0000265,STATUS_QUOTA_LIST_INCONSISTENT = 0xC0000266,STATUS_FILE_IS_OFFLINE = 0xC0000267,STATUS_EVALUATION_EXPIRATION = 0xC0000268,STATUS_ILLEGAL_DLL_RELOCATION = 0xC0000269,STATUS_LICENSE_VIOLATION = 0xC000026A,STATUS_DLL_INIT_FAILED_LOGOFF = 0xC000026B,STATUS_DRIVER_UNABLE_TO_LOAD = 0xC000026C,STATUS_DFS_UNAVAILABLE = 0xC000026D,STATUS_VOLUME_DISMOUNTED = 0xC000026E,STATUS_WX86_INTERNAL_ERROR = 0xC000026F,STATUS_WX86_FLOAT_STACK_CHECK = 0xC0000270,STATUS_VALIDATE_CONTINUE = 0xC0000271,STATUS_NO_MATCH = 0xC0000272,STATUS_NO_MORE_MATCHES = 0xC0000273,STATUS_INVALID_VLM_OPERATION = 0xC0000274,STATUS_NOT_A_REPARSE_POINT = 0xC0000275,STATUS_IO_REPARSE_TAG_INVALID = 0xC0000276,STATUS_IO_REPARSE_TAG_MISMATCH = 0xC0000277,STATUS_IO_REPARSE_DATA_INVALID = 0xC0000278,STATUS_IO_REPARSE_TAG_NOT_HANDLED = 0xC0000279,STATUS_REPARSE_POINT_NOT_RESOLVED = 0xC0000280,STATUS_DIRECTORY_IS_A_REPARSE_POINT = 0xC0000281,STATUS_RANGE_LIST_CONFLICT = 0xC0000282,STATUS_SOURCE_ELEMENT_EMPTY = 0xC0000283,STATUS_DESTINATION_ELEMENT_FULL = 0xC0000284,STATUS_ILLEGAL_ELEMENT_ADDRESS = 0xC0000285,STATUS_MAGAZINE_NOT_PRESENT = 0xC0000286,STATUS_REINITIALIZATION_NEEDED = 0xC0000287,STATUS_DEVICE_REQUIRES_CLEANING = 0x80000288,STATUS_DEVICE_DOOR_OPEN = 0x80000289,STATUS_ENCRYPTION_FAILED = 0xC000028A,STATUS_DECRYPTION_FAILED = 0xC000028B,STATUS_RANGE_NOT_FOUND = 0xC000028C,STATUS_NO_RECOVERY_POLICY = 0xC000028D,STATUS_NO_EFS = 0xC000028E,STATUS_WRONG_EFS = 0xC000028F,STATUS_NO_USER_KEYS = 0xC0000290,STATUS_FILE_NOT_ENCRYPTED = 0xC0000291,STATUS_NOT_EXPORT_FORMAT = 0xC0000292,STATUS_FILE_ENCRYPTED = 0xC0000293,STATUS_WAKE_SYSTEM = 0x40000294,STATUS_WMI_GUID_NOT_FOUND = 0xC0000295,STATUS_WMI_INSTANCE_NOT_FOUND = 0xC0000296,STATUS_WMI_ITEMID_NOT_FOUND = 0xC0000297,STATUS_WMI_TRY_AGAIN = 0xC0000298,STATUS_SHARED_POLICY = 0xC0000299,STATUS_POLICY_OBJECT_NOT_FOUND = 0xC000029A,STATUS_POLICY_ONLY_IN_DS = 0xC000029B,STATUS_VOLUME_NOT_UPGRADED = 0xC000029C,STATUS_REMOTE_STORAGE_NOT_ACTIVE = 0xC000029D,STATUS_REMOTE_STORAGE_MEDIA_ERROR = 0xC000029E,STATUS_NO_TRACKING_SERVICE = 0xC000029F,STATUS_SERVER_SID_MISMATCH = 0xC00002A0,STATUS_DS_NO_ATTRIBUTE_OR_VALUE = 0xC00002A1,STATUS_DS_INVALID_ATTRIBUTE_SYNTAX = 0xC00002A2,STATUS_DS_ATTRIBUTE_TYPE_UNDEFINED = 0xC00002A3,STATUS_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0xC00002A4,STATUS_DS_BUSY = 0xC00002A5,STATUS_DS_UNAVAILABLE = 0xC00002A6,STATUS_DS_NO_RIDS_ALLOCATED = 0xC00002A7,STATUS_DS_NO_MORE_RIDS = 0xC00002A8,STATUS_DS_INCORRECT_ROLE_OWNER = 0xC00002A9,STATUS_DS_RIDMGR_INIT_ERROR = 0xC00002AA,STATUS_DS_OBJ_CLASS_VIOLATION = 0xC00002AB,STATUS_DS_CANT_ON_NON_LEAF = 0xC00002AC,STATUS_DS_CANT_ON_RDN = 0xC00002AD,STATUS_DS_CANT_MOD_OBJ_CLASS = 0xC00002AE,STATUS_DS_CROSS_DOM_MOVE_FAILED = 0xC00002AF,STATUS_DS_GC_NOT_AVAILABLE = 0xC00002B0,STATUS_DIRECTORY_SERVICE_REQUIRED = 0xC00002B1,STATUS_REPARSE_ATTRIBUTE_CONFLICT = 0xC00002B2,STATUS_CANT_ENABLE_DENY_ONLY = 0xC00002B3,STATUS_FLOAT_MULTIPLE_FAULTS = 0xC00002B4,STATUS_FLOAT_MULTIPLE_TRAPS = 0xC00002B5,STATUS_DEVICE_REMOVED = 0xC00002B6,STATUS_JOURNAL_DELETE_IN_PROGRESS = 0xC00002B7,STATUS_JOURNAL_NOT_ACTIVE = 0xC00002B8,STATUS_NOINTERFACE = 0xC00002B9,STATUS_ILLEGAL_VLM_REFERENCE = 0xC00002C0,STATUS_DS_ADMIN_LIMIT_EXCEEDED = 0xC00002C1,STATUS_DRIVER_FAILED_SLEEP = 0xC00002C2,STATUS_MUTUAL_AUTHENTICATION_FAILED = 0xC00002C3,STATUS_CORRUPT_SYSTEM_FILE = 0xC00002C4,STATUS_DATATYPE_MISALIGNMENT_ERROR = 0xC00002C5,STATUS_WMI_READ_ONLY = 0xC00002C6,STATUS_WMI_SET_FAILURE = 0xC00002C7,STATUS_COMMITMENT_MINIMUM = 0xC00002C8,STATUS_REG_NAT_CONSUMPTION = 0xC00002C9,STATUS_TRANSPORT_FULL = 0xC00002CA,STATUS_SAM_INIT_FAILURE = 0xC00002CB,STATUS_WOW_ASSERTION = 0xC0009898,RPC_NT_INVALID_STRING_BINDING = 0xC0020001,RPC_NT_WRONG_KIND_OF_BINDING = 0xC0020002,RPC_NT_INVALID_BINDING = 0xC0020003,RPC_NT_PROTSEQ_NOT_SUPPORTED = 0xC0020004,RPC_NT_INVALID_RPC_PROTSEQ = 0xC0020005,RPC_NT_INVALID_STRING_UUID = 0xC0020006,RPC_NT_INVALID_ENDPOINT_FORMAT = 0xC0020007,RPC_NT_INVALID_NET_ADDR = 0xC0020008,RPC_NT_NO_ENDPOINT_FOUND = 0xC0020009,RPC_NT_INVALID_TIMEOUT = 0xC002000A,RPC_NT_OBJECT_NOT_FOUND = 0xC002000B,RPC_NT_ALREADY_REGISTERED = 0xC002000C,RPC_NT_TYPE_ALREADY_REGISTERED = 0xC002000D,RPC_NT_ALREADY_LISTENING = 0xC002000E,RPC_NT_NO_PROTSEQS_REGISTERED = 0xC002000F,RPC_NT_NOT_LISTENING = 0xC0020010,RPC_NT_UNKNOWN_MGR_TYPE = 0xC0020011,RPC_NT_UNKNOWN_IF = 0xC0020012,RPC_NT_NO_BINDINGS = 0xC0020013,RPC_NT_NO_PROTSEQS = 0xC0020014,RPC_NT_CANT_CREATE_ENDPOINT = 0xC0020015,RPC_NT_OUT_OF_RESOURCES = 0xC0020016,RPC_NT_SERVER_UNAVAILABLE = 0xC0020017,RPC_NT_SERVER_TOO_BUSY = 0xC0020018,RPC_NT_INVALID_NETWORK_OPTIONS = 0xC0020019,RPC_NT_NO_CALL_ACTIVE = 0xC002001A,RPC_NT_CALL_FAILED = 0xC002001B,RPC_NT_CALL_FAILED_DNE = 0xC002001C,RPC_NT_PROTOCOL_ERROR = 0xC002001D,RPC_NT_UNSUPPORTED_TRANS_SYN = 0xC002001F,RPC_NT_UNSUPPORTED_TYPE = 0xC0020021,RPC_NT_INVALID_TAG = 0xC0020022,RPC_NT_INVALID_BOUND = 0xC0020023,RPC_NT_NO_ENTRY_NAME = 0xC0020024,RPC_NT_INVALID_NAME_SYNTAX = 0xC0020025,RPC_NT_UNSUPPORTED_NAME_SYNTAX = 0xC0020026,RPC_NT_UUID_NO_ADDRESS = 0xC0020028,RPC_NT_DUPLICATE_ENDPOINT = 0xC0020029,RPC_NT_UNKNOWN_AUTHN_TYPE = 0xC002002A,RPC_NT_MAX_CALLS_TOO_SMALL = 0xC002002B,RPC_NT_STRING_TOO_LONG = 0xC002002C,RPC_NT_PROTSEQ_NOT_FOUND = 0xC002002D,RPC_NT_PROCNUM_OUT_OF_RANGE = 0xC002002E,RPC_NT_BINDING_HAS_NO_AUTH = 0xC002002F,RPC_NT_UNKNOWN_AUTHN_SERVICE = 0xC0020030,RPC_NT_UNKNOWN_AUTHN_LEVEL = 0xC0020031,RPC_NT_INVALID_AUTH_IDENTITY = 0xC0020032,RPC_NT_UNKNOWN_AUTHZ_SERVICE = 0xC0020033,EPT_NT_INVALID_ENTRY = 0xC0020034,EPT_NT_CANT_PERFORM_OP = 0xC0020035,EPT_NT_NOT_REGISTERED = 0xC0020036,RPC_NT_NOTHING_TO_EXPORT = 0xC0020037,RPC_NT_INCOMPLETE_NAME = 0xC0020038,RPC_NT_INVALID_VERS_OPTION = 0xC0020039,RPC_NT_NO_MORE_MEMBERS = 0xC002003A,RPC_NT_NOT_ALL_OBJS_UNEXPORTED = 0xC002003B,RPC_NT_INTERFACE_NOT_FOUND = 0xC002003C,RPC_NT_ENTRY_ALREADY_EXISTS = 0xC002003D,RPC_NT_ENTRY_NOT_FOUND = 0xC002003E,RPC_NT_NAME_SERVICE_UNAVAILABLE = 0xC002003F,RPC_NT_INVALID_NAF_ID = 0xC0020040,RPC_NT_CANNOT_SUPPORT = 0xC0020041,RPC_NT_NO_CONTEXT_AVAILABLE = 0xC0020042,RPC_NT_INTERNAL_ERROR = 0xC0020043,RPC_NT_ZERO_DIVIDE = 0xC0020044,RPC_NT_ADDRESS_ERROR = 0xC0020045,RPC_NT_FP_DIV_ZERO = 0xC0020046,RPC_NT_FP_UNDERFLOW = 0xC0020047,RPC_NT_FP_OVERFLOW = 0xC0020048,RPC_NT_NO_MORE_ENTRIES = 0xC0030001,RPC_NT_SS_CHAR_TRANS_OPEN_FAIL = 0xC0030002,RPC_NT_SS_CHAR_TRANS_SHORT_FILE = 0xC0030003,RPC_NT_SS_IN_NULL_CONTEXT = 0xC0030004,RPC_NT_SS_CONTEXT_MISMATCH = 0xC0030005,RPC_NT_SS_CONTEXT_DAMAGED = 0xC0030006,RPC_NT_SS_HANDLES_MISMATCH = 0xC0030007,RPC_NT_SS_CANNOT_GET_CALL_HANDLE = 0xC0030008,RPC_NT_NULL_REF_POINTER = 0xC0030009,RPC_NT_ENUM_VALUE_OUT_OF_RANGE = 0xC003000A,RPC_NT_BYTE_COUNT_TOO_SMALL = 0xC003000B,RPC_NT_BAD_STUB_DATA = 0xC003000C,RPC_NT_CALL_IN_PROGRESS = 0xC0020049,RPC_NT_NO_MORE_BINDINGS = 0xC002004A,RPC_NT_GROUP_MEMBER_NOT_FOUND = 0xC002004B,EPT_NT_CANT_CREATE = 0xC002004C,RPC_NT_INVALID_OBJECT = 0xC002004D,RPC_NT_NO_INTERFACES = 0xC002004F,RPC_NT_CALL_CANCELLED = 0xC0020050,RPC_NT_BINDING_INCOMPLETE = 0xC0020051,RPC_NT_COMM_FAILURE = 0xC0020052,RPC_NT_UNSUPPORTED_AUTHN_LEVEL = 0xC0020053,RPC_NT_NO_PRINC_NAME = 0xC0020054,RPC_NT_NOT_RPC_ERROR = 0xC0020055,RPC_NT_UUID_LOCAL_ONLY = 0x40020056,RPC_NT_SEC_PKG_ERROR = 0xC0020057,RPC_NT_NOT_CANCELLED = 0xC0020058,RPC_NT_INVALID_ES_ACTION = 0xC0030059,RPC_NT_WRONG_ES_VERSION = 0xC003005A,RPC_NT_WRONG_STUB_VERSION = 0xC003005B,RPC_NT_INVALID_PIPE_OBJECT = 0xC003005C,RPC_NT_INVALID_PIPE_OPERATION = 0xC003005D,RPC_NT_WRONG_PIPE_VERSION = 0xC003005E,RPC_NT_PIPE_CLOSED = 0xC003005F,RPC_NT_PIPE_DISCIPLINE_ERROR = 0xC0030060,RPC_NT_PIPE_EMPTY = 0xC0030061,RPC_NT_INVALID_ASYNC_HANDLE = 0xC0020062,RPC_NT_INVALID_ASYNC_CALL = 0xC0020063,RPC_NT_SEND_INCOMPLETE = 0x400200AF,STATUS_ACPI_INVALID_OPCODE = 0xC0140001,STATUS_ACPI_STACK_OVERFLOW = 0xC0140002,STATUS_ACPI_ASSERT_FAILED = 0xC0140003,STATUS_ACPI_INVALID_INDEX = 0xC0140004,STATUS_ACPI_INVALID_ARGUMENT = 0xC0140005,STATUS_ACPI_FATAL = 0xC0140006,STATUS_ACPI_INVALID_SUPERNAME = 0xC0140007,STATUS_ACPI_INVALID_ARGTYPE = 0xC0140008,STATUS_ACPI_INVALID_OBJTYPE = 0xC0140009,STATUS_ACPI_INVALID_TARGETTYPE = 0xC014000A,STATUS_ACPI_INCORRECT_ARGUMENT_COUNT = 0xC014000B,STATUS_ACPI_ADDRESS_NOT_MAPPED = 0xC014000C,STATUS_ACPI_INVALID_EVENTTYPE = 0xC014000D,STATUS_ACPI_HANDLER_COLLISION = 0xC014000E,STATUS_ACPI_INVALID_DATA = 0xC014000F,STATUS_ACPI_INVALID_REGION = 0xC0140010,STATUS_ACPI_INVALID_ACCESS_SIZE = 0xC0140011,STATUS_ACPI_ACQUIRE_GLOBAL_LOCK = 0xC0140012,STATUS_ACPI_ALREADY_INITIALIZED = 0xC0140013,STATUS_ACPI_NOT_INITIALIZED = 0xC0140014,STATUS_ACPI_INVALID_MUTEX_LEVEL = 0xC0140015,STATUS_ACPI_MUTEX_NOT_OWNED = 0xC0140016,STATUS_ACPI_MUTEX_NOT_OWNER = 0xC0140017,STATUS_ACPI_RS_ACCESS = 0xC0140018,STATUS_ACPI_INVALID_TABLE = 0xC0140019,STATUS_ACPI_REG_HANDLER_FAILED = 0xC0140020,STATUS_ACPI_POWER_REQUEST_FAILED = 0xC0140021,STATUS_CTX_WINSTATION_NAME_INVALID = 0xC00A0001,STATUS_CTX_INVALID_PD = 0xC00A0002,STATUS_CTX_PD_NOT_FOUND = 0xC00A0003,STATUS_CTX_CDM_CONNECT = 0x400A0004,STATUS_CTX_CDM_DISCONNECT = 0x400A0005,STATUS_CTX_CLOSE_PENDING = 0xC00A0006,STATUS_CTX_NO_OUTBUF = 0xC00A0007,STATUS_CTX_MODEM_INF_NOT_FOUND = 0xC00A0008,STATUS_CTX_INVALID_MODEMNAME = 0xC00A0009,STATUS_CTX_RESPONSE_ERROR = 0xC00A000A,STATUS_CTX_MODEM_RESPONSE_TIMEOUT = 0xC00A000B,STATUS_CTX_MODEM_RESPONSE_NO_CARRIER = 0xC00A000C,STATUS_CTX_MODEM_RESPONSE_NO_DIALTONE = 0xC00A000D,STATUS_CTX_MODEM_RESPONSE_BUSY = 0xC00A000E,STATUS_CTX_MODEM_RESPONSE_VOICE = 0xC00A000F,STATUS_CTX_TD_ERROR = 0xC00A0010,STATUS_CTX_LICENSE_CLIENT_INVALID = 0xC00A0012,STATUS_CTX_WINSTATION_NOT_FOUND = 0xC00A0015,STATUS_CTX_WINSTATION_NAME_COLLISION = 0xC00A0016,STATUS_CTX_WINSTATION_BUSY = 0xC00A0017,STATUS_CTX_BAD_VIDEO_MODE = 0xC00A0018,STATUS_CTX_GRAPHICS_INVALID = 0xC00A0022,STATUS_CTX_NOT_CONSOLE = 0xC00A0024,STATUS_CTX_CLIENT_QUERY_TIMEOUT = 0xC00A0026,STATUS_CTX_CONSOLE_DISCONNECT = 0xC00A0027,STATUS_CTX_CONSOLE_CONNECT = 0xC00A0028,STATUS_CTX_SHADOW_DENIED = 0xC00A002A,STATUS_CTX_WINSTATION_ACCESS_DENIED = 0xC00A002B,STATUS_CTX_INVALID_WD = 0xC00A002E,STATUS_CTX_WD_NOT_FOUND = 0xC00A002F,STATUS_CTX_SHADOW_INVALID = 0xC00A0030,STATUS_CTX_SHADOW_DISABLED = 0xC00A0031,STATUS_RDP_PROTOCOL_ERROR = 0xC00A0032,STATUS_DOWNGRADE_DETECTED = 0xC0000388,};
enum MACRO_STDOLE {STDOLE_MAJORVERNUM = 0x1,STDOLE_MINORVERNUM = 0x0,STDOLE_LCID = 0x0,};
enum MACRO_STREAM {STREAM_APPEND = 0x4,};
enum MACRO_STRICT {STRICT = 1,WINVER = 1280,};
enum MACRO_STRING {STRING_NAME_OFFSET = 0x0,STRING_DESCRIPTION_OFFSET = 0x1,STRING_PROVIDER_NAME_OFFSET = 0x2,};
enum MACRO_SYSTEM {SYSTEM_AUDIT_ACE_TYPE = 0x2,SYSTEM_ALARM_ACE_TYPE = 0x3,};
enum MACRO_TARGET {TARGET_IS_NT50_OR_LATER = 0,TARGET_IS_NT40_OR_LATER = 1,TARGET_IS_NT351_OR_WIN95_OR_LATER = 1,};
enum MACRO_TH32CS {TH32CS_SNAPHEAPLIST = 0x1,TH32CS_SNAPPROCESS = 0x2,TH32CS_SNAPTHREAD = 0x4,TH32CS_SNAPMODULE = 0x8,TH32CS_SNAPALL = 0xF,TH32CS_GETALLMODS = 0x80000000,};
enum MACRO_THREAD {THREAD_TERMINATE = 0x1,THREAD_SUSPEND_RESUME = 0x2,THREAD_GET_CONTEXT = 0x8,THREAD_SET_CONTEXT = 0x10,THREAD_SET_INFORMATION = 0x20,THREAD_QUERY_INFORMATION = 0x40,THREAD_SET_THREAD_TOKEN = 0x80,THREAD_IMPERSONATE = 0x100,THREAD_DIRECT_IMPERSONATION = 0x200,THREAD_ALL_ACCESS = 0x1F03FF,};
enum MACRO_TIMERR {TIMERR_NOERROR = 0,TIMERR_NOCANDO = 97,TIMERR_STRUCT = 129,};
enum MACRO_TPLL1V {TPLL1V_END = 0xFF,};
enum MACRO_UI_CAP {UI_CAP_SOFTKBD = 0x10000,UI_CAP_ALL = 0x10007,};
enum MACRO_UNCLEN {UNCLEN = 17,};
enum MACRO_UPNP_E {UPNP_E_ACTION_SPECIFIC_BASE = 0x80040300,UPNP_E_ACTION_SPECIFIC_MAX = 0x8004042B,UPNP_E_REQUIRED_ELEMENT_ERROR = 0x8004A020,UPNP_E_DUPLICATE_NOT_ALLOWED = 0x8004A021,UPNP_E_DUPLICATE_SERVICE_ID = 0x8004A022,UPNP_E_INVALID_DESCRIPTION = 0x8004A023,UPNP_E_INVALID_SERVICE = 0x8004A024,UPNP_E_INVALID_ICON = 0x8004A025,UPNP_E_INVALID_XML = 0x8004A026,UPNP_E_INVALID_ROOT_NAMESPACE = 0x8004A027,UPNP_E_SUFFIX_TOO_LONG = 0x8004A028,UPNP_E_URLBASE_PRESENT = 0x8004A029,UPNP_E_VALUE_TOO_LONG = 0x8004A030,};
enum MACRO_URLMON {URLMON_OPTION_USERAGENT = 0x10000001,URLMON_OPTION_USERAGENT_REFRESH = 0x10000002,URLMON_OPTION_URL_ENCODING = 0x10000004,};
enum MACRO_UUID16 {UDP_PROTOCOL_UUID16 = 0x2,RFCOMM_PROTOCOL_UUID16 = 0x3,TCP_PROTOCOL_UUID16 = 0x4,TCSBIN_PROTOCOL_UUID16 = 0x5,TCSAT_PROTOCOL_UUID16 = 0x6,OBEX_PROTOCOL_UUID16 = 0x8,IP_PROTOCOL_UUID16 = 0x9,FTP_PROTOCOL_UUID16 = 0xA,HTTP_PROTOCOL_UUID16 = 0xC,WSP_PROTOCOL_UUID16 = 0xE,L2CAP_PROTOCOL_UUID16 = 0x100,ServiceDiscoveryServerServiceClassID_UUID16 = 0x1000,BrowseGroupDescriptorServiceClassID_UUID16 = 0x1001,PublicBrowseGroupServiceClassID_UUID16 = 0x1002,SerialPortServiceClassID_UUID16 = 0x1101,LANAccessUsingPPPServiceClassID_UUID16 = 0x1102,DialupNetworkingServiceClassID_UUID16 = 0x1103,IrMCSyncServiceClassID_UUID16 = 0x1104,OBEXObjectPushServiceClassID_UUID16 = 0x1105,OBEXFileTransferServiceClassID_UUID16 = 0x1106,IrMcSyncCommandServiceClassID_UUID16 = 0x1107,HeadsetServiceClassID_UUID16 = 0x1108,CordlessServiceClassID_UUID16 = 0x1109,IntercomServiceClassID_UUID16 = 0x1110,FaxServiceClassID_UUID16 = 0x1111,HeadsetAudioGatewayServiceClassID_UUID16 = 0x1112,PnPInformationServiceClassID_UUID16 = 0x1200,GenericNetworkingServiceClassID_UUID16 = 0x1201,GenericFileTransferServiceClassID_UUID16 = 0x1202,GenericAudioServiceClassID_UUID16 = 0x1203,GenericTelephonyServiceClassID_UUID16 = 0x1204,};
enum MACRO_VECTOR {VECTOR_RANK_MIN = 0,VECTOR_RANK_MAX = 1,VECTOR_RANK_INNER = 2,VECTOR_RANK_DICE = 3,VECTOR_RANK_JACCARD = 4,};
enum MACRO_VERIFY {VERIFY_READ_FLAG = 0,VERIFY_EXECUTE_FLAG = 0,VERIFY_WRITE_FLAG = 1,VERIFY_KERNEL_OK = 2,};
enum MACRO_VOLUME {MISSING_VOLUME = 0xC00037DE,EXTRA_VOLUME = 0xC00037DF,};
enum MACRO_WAVEIN {WAVEIN_MAPPER_STATUS_DEVICE = 0,WAVEIN_MAPPER_STATUS_MAPPED = 1,WAVEIN_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WAVERR {WAVERR_BADFORMAT = 32,WAVERR_STILLPLAYING = 33,WAVERR_UNPREPARED = 34,WAVERR_SYNC = 35,WAVERR_LASTERROR = 35,};
enum MACRO_WBREAK {WBREAK_E_END_OF_TEXT = 0x80041780,};
enum MACRO_WM_IME {WM_IME_CONTROL_EDIT = 0x1000,};
enum MACRO__FACDD {_FACDD = 0x876,};
enum MACRO__FACDS {_FACDS = 0x878,};
enum MACRO__JBLEN {_JBLEN = 11,};
enum MACRO__UPPER {_UPPER = 0x1,_LOWER = 0x2,_DIGIT = 0x4,_SPACE = 0x8,_PUNCT = 0x10,_CONTROL = 0x20,_BLANK = 0x40,_HEX = 0x80,_ALPHA = 0x103,};
enum MACRO__WIN32 {_WIN32_DCOM = 1,};
typedef struct _MEMORYSTATUS MEMORYSTATUS;
typedef struct _MIBICMPSTATS MIBICMPSTATS;
typedef struct _MIB_IFNUMBER MIB_IFNUMBER;
typedef struct _MIB_IFSTATUS MIB_IFSTATUS;
typedef struct _MIB_IPNETROW MIB_IPNETROW;
typedef struct _MIB_PROXYARP MIB_PROXYARP;
typedef struct _MIB_TCPSTATS MIB_TCPSTATS;
typedef struct _MIB_TCPTABLE MIB_TCPTABLE;
typedef struct _MIB_UDPSTATS MIB_UDPSTATS;
typedef struct _MIB_UDPTABLE MIB_UDPTABLE;
typedef struct tagMIDIOUTCAPSA MIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW MIDIOUTCAPSW;
typedef struct tagMIMECSETINFO MIMECSETINFO;
typedef struct tagMIMEPROPINFO MIMEPROPINFO;
typedef struct tMIXERCONTROL MIXERCONTROL;
typedef struct _MP_PARAMINFO MP_PARAMINFO;
typedef struct tagMQQUEUEPROPS MQQUEUEPROPS;
typedef struct tagMSAAMENUINFO MSAAMENUINFO;
struct MessengerApp;
typedef struct tagNavigateData NAVIGATEDATA;
typedef void *NDR_CCONTEXT;
typedef struct _3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;
typedef struct _NETRESOURCEA NETRESOURCEA;
typedef struct _NETRESOURCEW NETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO NMCUSTOMDRAW;
typedef struct tagNMLVFINDITEM NMLVFINDITEM;
typedef struct tagNMRBAUTOSIZE NMRBAUTOSIZE;
typedef struct tagNNTPAUTHINFO NNTPAUTHINFO;
typedef struct tagNNTPRESPONSE NNTPRESPONSE;
typedef struct tagNNTPXHDRRESP NNTPXHDRRESP;
typedef struct _NOTIFICATION NOTIFICATION;
typedef struct tagLOGPALETTE *NPLOGPALETTE;
typedef struct tagWAVEINCAPS *NPWAVEINCAPS;
typedef struct _OBEX_REQUEST OBEX_REQUEST;
typedef struct _AFPROTOCOLS *PAFPROTOCOLS;
typedef struct tagPALETTEENTRY PALETTEENTRY;
typedef IAMovieSetup *PAMOVIESETUP;
typedef struct _AppInfoData *PAPPINFODATA;
typedef struct _CARD_STATUS *PCARD_STATUS;
typedef struct _CEDBASEINFO *PCEDBASEINFO;
typedef struct _CEOIDINFOEX PCEOIDINFOEX;
typedef struct tagCHARSETINFO *PCHARSETINFO;
typedef struct _PCI_CFG_INFO PCI_CFG_INFO;
typedef struct _PCI_DEV_INFO PCI_DEV_INFO;
typedef struct tagCONNECTDATA *PCONNECTDATA;
typedef struct _CREDENTIALA *PCREDENTIALA;
typedef struct _CREDENTIALW *PCREDENTIALW;
typedef struct _CRL_CONTEXT *PCRL_CONTEXT;
typedef struct _CSADDR_INFO *PCSADDR_INFO;
typedef struct _CTL_CONTEXT *PCTL_CONTEXT;
typedef struct tagDIBSECTION2 *PDIBSECTION2;
typedef struct _DMA_ADAPTER *PDMA_ADAPTER;
typedef struct _75E76725892DEE09A36EC583FA7F4E2E *PDMSINVPKGID;
typedef IEnumFilters *PENUMFILTERS;
typedef IFileAsyncIO *PFILEASYNCIO;
typedef struct _FILE_OBJECT *PFILE_OBJECT;
typedef IFilterGraph *PFILTERGRAPH;
typedef struct tagHANDLETABLE *PHANDLETABLE;
typedef struct tagHEAPENTRY32 *PHEAPENTRY32;
typedef struct tagHH_ENUM_CAT *PHH_ENUM_CAT;
typedef struct phonemessage_tag PHONEMESSAGE;
typedef struct _INFO_ISATAP *PINFO_ISATAP;
typedef struct _INSTALLDATA *PINSTALLDATA;
typedef struct ldapmsg *PLDAPMessage;
typedef struct berval *PLDAP_BERVAL;
typedef struct _LMEM_RECENT *PLMEM_RECENT;
typedef IMediaFilter *PMEDIAFILTER;
typedef IMediaSample *PMEDIASAMPLE;
typedef IMemInputPin *PMEMINPUTPIN;
typedef struct _MIB_BEST_IF *PMIB_BEST_IF;
typedef struct _MIB_ICMP_EX *PMIB_ICMP_EX;
typedef struct _MIB_IFTABLE *PMIB_IFTABLE;
typedef struct _MIB_IPSTATS *PMIB_IPSTATS;
typedef struct tagMIDIINCAPSA *PMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *PMIDIINCAPSW;
typedef IMimeEditTag *PMIMEEDITTAG;
typedef int *PNDIS_STATUS;
typedef struct tagPOP3RESPONSE POP3RESPONSE;
typedef struct _OS_DEP_DATA *POS_DEP_DATA;
typedef struct _POWER_DESCR *PPOWER_DESCR;
typedef union _POWER_STATE *PPOWER_STATE;
typedef struct _PPP_EAP_INFO PPP_EAP_INFO;
typedef struct tagRFC1766INFO *PRFC1766INFO;
typedef struct _LIST_ENTRY *PRLIST_ENTRY;
typedef struct tagPROPPAGEINFO PROPPAGEINFO;
typedef struct _tagPROTOCOLDATA PROTOCOLDATA;
typedef struct _PROVDATA_SIP PROVDATA_SIP;
typedef struct _RPC_MESSAGE *PRPC_MESSAGE;
typedef void ( *PRPC_RUNDOWN)(void *AssociationContext);
typedef struct _tagSlowAppInfo *PSLOWAPPINFO;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct tagSOFTKBDDATA *PSOFTKBDDATA;
typedef struct SPC_SIGINFO_ *PSPC_SIGINFO;
typedef struct _PST_TYPEINFO PST_TYPEINFO;
typedef struct _SecPkgInfoA *PSecPkgInfoA;
typedef struct _SecPkgInfoW *PSecPkgInfoW;
typedef struct tagTEXTMETRICA *PTEXTMETRICA;
typedef struct tagTEXTMETRICW *PTEXTMETRICW;
typedef struct _TOKEN_OWNER *PTOKEN_OWNER;
typedef struct tagWAVEOUTCAPS *PWAVEOUTCAPS;
typedef struct _WCE_IAS_SET *PWCE_IAS_SET;
typedef struct _PctPublicKey PctPublicKey;
struct PropertiesUI;
typedef struct tagQUERYCONTEXT QUERYCONTEXT;
typedef struct _QUOTA_LIMITS QUOTA_LIMITS;
typedef struct tagRFCDLGPARAMA RFCDLGPARAMA;
typedef struct tagRFCDLGPARAMW RFCDLGPARAMW;
typedef struct tagRemFORMATETC RemFORMATETC;
typedef struct tagRemSTGMEDIUM RemSTGMEDIUM;
typedef struct _wireSAFEARR_BSTR SAFEARR_BSTR;
struct SAXXMLReader;
typedef struct _SBinaryArray SBinaryArray;
typedef struct _SCHANNEL_ALG SCHANNEL_ALG;
typedef struct _SDoubleArray SDoubleArray;
typedef struct _B3292A763DBD4275988A0D01CB88CB44 SHCOLUMNDATA;
typedef struct _63C5725C5B677664277ACEA161B104D1 SHCOLUMNINFO;
typedef struct _CE02AD95896D5CE1FBC89EB4094A5E1C SHCOLUMNINIT;
typedef struct _SHELLDETAILS SHELLDETAILS;
typedef struct tagSMTPMESSAGE2 SMTPMESSAGE2;
typedef struct tagSMTPRESPONSE SMTPRESPONSE;
typedef struct sockaddr_atm SOCKADDR_ATM;
typedef struct _SOCKADDR_BTH SOCKADDR_BTH;
typedef struct sockaddr_in6 SOCKADDR_IN6;
typedef struct _tagSOFTDISTINFO SOFTDISTINFO;
typedef struct _SPropProblem SPropProblem;
typedef struct _SRestriction SRestriction;
typedef struct _SSLPROTOCOLS SSLPROTOCOLS;
typedef struct _STARTUPINFOA STARTUPINFOA;
typedef struct _STARTUPINFOW STARTUPINFOW;
typedef struct _SdpQueryUuid SdpQueryUuid;
struct ShellMoniker;
struct ShellWindows;
typedef struct _TAPE_PREPARE TAPE_PREPARE;
typedef struct _TASK_TRIGGER TASK_TRIGGER;
typedef struct _timecodedata TIMECODEDATA;
typedef struct _TOKEN_GROUPS TOKEN_GROUPS;
typedef struct _TOKEN_SOURCE TOKEN_SOURCE;
typedef struct tagTRANSMITINFO TRANSMITINFO;
typedef struct tagUNICODERANGE UNICODERANGE;
typedef struct _USB_ENDPOINT USB_ENDPOINT;
typedef short VARIANT_BOOL;
enum VoIPCallType {e_vctInvalid = 0x0,e_vctIncoming = 0x1,e_vctOutgoing = 0x2,e_vctMissed = 0x3,};
typedef struct tWAVEFORMATEX WAVEFORMATEX;
typedef struct _WSAQuerySetA WSAQUERYSETA;
typedef struct _WSAQuerySetW WSAQUERYSETW;
enum _ACCESS_MODE {NOT_USED_ACCESS = 0x0,GRANT_ACCESS = 0x1,SET_ACCESS = 0x2,DENY_ACCESS = 0x3,REVOKE_ACCESS = 0x4,SET_AUDIT_SUCCESS = 0x5,SET_AUDIT_FAILURE = 0x6,};
enum _ADDURL_FLAG {ADDURL_FIRST = 0x0,ADDURL_ADDTOHISTORYANDCACHE = 0x0,ADDURL_ADDTOCACHE = 0x1,ADDURL_Max = 0x7FFFFFFF,};
enum _ADORNER_HTI {ADORNER_HTI_NONE = 0x0,ADORNER_HTI_TOPBORDER = 0x1,ADORNER_HTI_LEFTBORDER = 0x2,ADORNER_HTI_BOTTOMBORDER = 0x3,ADORNER_HTI_RIGHTBORDER = 0x4,ADORNER_HTI_TOPLEFTHANDLE = 0x5,ADORNER_HTI_LEFTHANDLE = 0x6,ADORNER_HTI_TOPHANDLE = 0x7,ADORNER_HTI_BOTTOMLEFTHANDLE = 0x8,ADORNER_HTI_TOPRIGHTHANDLE = 0x9,ADORNER_HTI_BOTTOMHANDLE = 0xA,ADORNER_HTI_RIGHTHANDLE = 0xB,ADORNER_HTI_BOTTOMRIGHTHANDLE = 0xC,ADORNER_HTI_Max = 0x7FFFFFFF,};
enum _D3DFILLMODE {D3DFILL_POINT = 0x1,D3DFILL_WIREFRAME = 0x2,D3DFILL_SOLID = 0x3,D3DFILL_FORCE_DWORD = 0x7FFFFFFF,};
enum _DOCNAVFLAGS {DOCNAVFLAG_DOCNAVIGATE = 0x1,DOCNAVFLAG_DONTUPDATETLOG = 0x2,DOCNAVFLAG_HTTPERRORPAGE = 0x4,DOCNAVFLAG_OPENINNEWWINDOW = 0x8,DOCNAVFLAG_REFRESH = 0x10,DOCNAVFLAGS_Max = 0x7FFFFFFF,};
enum _FilterState {State_Stopped = 0x0,State_Paused = 0x1,State_Running = 0x2,};
enum _HTMLAppFlag {HTMLAppFlagNo = 0x0,HTMLAppFlagOff = 0x0,HTMLAppFlag0 = 0x0,HTMLAppFlagYes = 0x1,HTMLAppFlagOn = 0x1,HTMLAppFlag1 = 0x1,HTMLAppFlag_Max = 0x7FFFFFFF,};
enum _HTMLDlgEdge {HTMLDlgEdgeSunken = 0x0,HTMLDlgEdgeRaised = 0x10,HTMLDlgEdge_Max = 0x7FFFFFFF,};
enum _HTMLDlgFlag {HTMLDlgFlagNo = 0x0,HTMLDlgFlagOff = 0x0,HTMLDlgFlag0 = 0x0,HTMLDlgFlagYes = 0x1,HTMLDlgFlagOn = 0x1,HTMLDlgFlag1 = 0x1,HTMLDlgFlagNotSet = 0xFFFFFFFF,HTMLDlgFlag_Max = 0x7FFFFFFF,};
enum _INBOX_EVENT {IE_MIME = 0x0,IE_SYNC = 0x1,};
enum _NDIS_MEDIUM {NdisMedium802_3 = 0x0,NdisMedium802_5 = 0x1,NdisMediumFddi = 0x2,NdisMediumWan = 0x3,NdisMediumLocalTalk = 0x4,NdisMediumDix = 0x5,NdisMediumArcnetRaw = 0x6,NdisMediumArcnet878_2 = 0x7,NdisMediumAtm = 0x8,NdisMediumWirelessWan = 0x9,NdisMediumIrda = 0xA,NdisMediumBpc = 0xB,NdisMediumCoWan = 0xC,NdisMedium1394 = 0xD,NdisMediumInfiniBand = 0xE,NdisMediumTunnel = 0xF,NdisMedium802_11 = 0x10,NdisMediumMax = 0x11,};
enum _PARSE_FLAGS {PARSE_ABSOLUTIFYIE40URLS = 0x1,PARSE_FLAGS_Max = 0x7FFFFFFF,};
struct _RPC_VERSION {unsigned short MajorVersion;unsigned short MinorVersion;};
struct __CEL_HEADER {unsigned int Length : 16;unsigned int ID : 14;unsigned int Reserved : 1;unsigned int fTimeStamp : 1;};
typedef char __C_ASSERT__[1];
enum _styleCursor {styleCursorAuto = 0x0,styleCursorCrosshair = 0x1,styleCursorDefault = 0x2,styleCursorHand = 0x3,styleCursorMove = 0x4,styleCursorE_resize = 0x5,styleCursorNe_resize = 0x6,styleCursorNw_resize = 0x7,styleCursorN_resize = 0x8,styleCursorSe_resize = 0x9,styleCursorSw_resize = 0xA,styleCursorS_resize = 0xB,styleCursorW_resize = 0xC,styleCursorText = 0xD,styleCursorWait = 0xE,styleCursorHelp = 0xF,styleCursorPointer = 0x10,styleCursorProgress = 0x11,styleCursorNot_allowed = 0x12,styleCursorNo_drop = 0x13,styleCursorVertical_text = 0x14,styleCursorall_scroll = 0x15,styleCursorcol_resize = 0x16,styleCursorrow_resize = 0x17,styleCursorcustom = 0x18,styleCursorNotSet = 0x19,styleCursor_Max = 0x7FFFFFFF,};
enum _styleNormal {styleNormalNormal = 0x0,styleNormal_Max = 0x7FFFFFFF,};
enum _tagPI_FLAGS {PI_PARSE_URL = 0x1,PI_FILTER_MODE = 0x2,PI_FORCE_ASYNC = 0x4,PI_USE_WORKERTHREAD = 0x8,PI_MIMEVERIFICATION = 0x10,PI_CLSIDLOOKUP = 0x20,PI_DATAPROGRESS = 0x40,PI_SYNCHRONOUS = 0x80,PI_APARTMENTTHREADED = 0x100,PI_CLASSINSTALL = 0x200,PI_PREFERDEFAULTHANDLER = 0x1000,PI_PASSONBINDCTX = 0x2000,PI_NOMIMEHANDLER = 0x8000,PI_LOADAPPDIRECT = 0x4000,PD_FORCE_SWITCH = 0x10000,};
enum tagBINDSPEED {BINDSPEED_INDEFINITE = 0x1,BINDSPEED_MODERATE = 0x2,BINDSPEED_IMMEDIATE = 0x3,};
enum tagCERTSTATE {CERTIFICATE_OK = 0x0,CERTIFICATE_NOT_PRESENT = 0x1,CERTIFICATE_EXPIRED = 0x2,CERTIFICATE_CHAIN_TOO_LONG = 0x3,CERTIFICATE_MISSING_ISSUER = 0x4,CERTIFICATE_CRL_LISTED = 0x5,CERTIFICATE_NOT_TRUSTED = 0x6,CERTIFICATE_INVALID = 0x7,CERTIFICATE_ERROR = 0x8,CERTIFICATE_NOPRINT = 0x9,CERTIFICATE_UNKNOWN = 0xA,};
enum tagDVASPECT2 {DVASPECT_OPAQUE = 0x10,DVASPECT_TRANSPARENT = 0x20,};
enum tagFUNCFLAGS {FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,FUNCFLAG_FUSESGETLASTERROR = 0x80,FUNCFLAG_FDEFAULTCOLLELEM = 0x100,FUNCFLAG_FUIDEFAULT = 0x200,FUNCFLAG_FNONBROWSABLE = 0x400,FUNCFLAG_FREPLACEABLE = 0x800,FUNCFLAG_FIMMEDIATEBIND = 0x1000,};
enum tagHITRESULT {HITRESULT_OUTSIDE = 0x0,HITRESULT_TRANSPARENT = 0x1,HITRESULT_CLOSE = 0x2,HITRESULT_HIT = 0x3,};
enum tagIMSGFLAGS {IMF_ATTACHMENTS = 0x1,IMF_MULTIPART = 0x2,IMF_SUBMULTIPART = 0x4,IMF_MIME = 0x8,IMF_HTML = 0x10,IMF_PLAIN = 0x20,IMF_PARTIAL = 0x40,IMF_SIGNED = 0x80,IMF_ENCRYPTED = 0x100,IMF_TNEF = 0x200,IMF_MHTML = 0x400,IMF_SECURE = 0x800,IMF_TEXT = 0x1000,IMF_CSETTAGGED = 0x2000,IMF_NEWS = 0x4000,IMF_VOICEMAIL = 0x8000,IMF_HASVCARD = 0x10000,IMF_RFC1154 = 0x20000,};
enum tagIXPSTATUS {IXP_FINDINGHOST = 0x0,IXP_CONNECTING = 0x1,IXP_SECURING = 0x2,IXP_CONNECTED = 0x3,IXP_AUTHORIZING = 0x4,IXP_AUTHRETRY = 0x5,IXP_AUTHORIZED = 0x6,IXP_DISCONNECTING = 0x7,IXP_DISCONNECTED = 0x8,IXP_LAST = 0x9,};
enum tagMIMECONTF {MIMECONTF_MAILNEWS = 0x1,MIMECONTF_BROWSER = 0x2,MIMECONTF_MINIMAL = 0x4,MIMECONTF_IMPORT = 0x8,MIMECONTF_SAVABLE_MAILNEWS = 0x100,MIMECONTF_SAVABLE_BROWSER = 0x200,MIMECONTF_EXPORT = 0x400,MIMECONTF_PRIVCONVERTER = 0x10000,MIMECONTF_VALID = 0x20000,MIMECONTF_VALID_NLS = 0x40000,MIMECONTF_MIME_IE4 = 0x10000000,MIMECONTF_MIME_LATEST = 0x20000000,MIMECONTF_MIME_REGISTRY = 0x40000000,};
enum tagMSHLFLAGS {MSHLFLAGS_NORMAL = 0x0,MSHLFLAGS_TABLESTRONG = 0x1,MSHLFLAGS_TABLEWEAK = 0x2,MSHLFLAGS_NOPING = 0x4,};
enum tagNNTPSTATE {NS_DISCONNECTED = 0x0,NS_CONNECT = 0x1,NS_AUTHINFO = 0x2,NS_POST = 0x3,NS_IDLE = 0x4,NS_LIST = 0x5,NS_LISTGROUP = 0x6,NS_NEWGROUPS = 0x7,NS_GROUP = 0x8,NS_LAST = 0x9,NS_NEXT = 0xA,NS_STAT = 0xB,NS_ARTICLE = 0xC,NS_HEAD = 0xD,NS_BODY = 0xE,NS_DATE = 0xF,NS_MODE = 0x10,NS_QUIT = 0x11,NS_HEADERS = 0x12,NS_XHDR = 0x13,};
enum tagOLERENDER {OLERENDER_NONE = 0x0,OLERENDER_DRAW = 0x1,OLERENDER_FORMAT = 0x2,OLERENDER_ASIS = 0x3,};
enum tagOLEUPDATE {OLEUPDATE_ALWAYS = 0x1,OLEUPDATE_ONCALL = 0x3,};
enum tagRANGETYPE {RT_SINGLE = 0x0,RT_RANGE = 0x1,};
enum tagTYPEFLAGS {TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,TYPEFLAG_FOLEAUTOMATION = 0x100,TYPEFLAG_FRESTRICTED = 0x200,TYPEFLAG_FAGGREGATABLE = 0x400,TYPEFLAG_FREPLACEABLE = 0x800,TYPEFLAG_FDISPATCHABLE = 0x1000,TYPEFLAG_FREVERSEBIND = 0x2000,};
typedef struct _userHPALETTE userHPALETTE;
typedef struct tagADDRESSLIST ADDRESSLIST;
typedef struct _AFPROTOCOLS AFPROTOCOLS;
typedef struct _AMVPDIMINFO AMVPDIMINFO;
typedef struct _AppInfoData APPINFODATA;
typedef struct _B6822E6B2532C41BAC9FA8CDDAB44A4D ATM_ADDRESS;
typedef struct _3EB284A884AA968851CCD5BE7E4B68CB ATM_BLLI_IE;
typedef struct _avioldindex AVIOLDINDEX;
typedef struct _avistdindex AVISTDINDEX;
struct AnchorClick;
typedef struct tagBODYOFFSETS BODYOFFSETS;
typedef struct _CARD_STATUS CARD_STATUS;
struct CDeviceRect;
typedef struct _CEDBASEINFO CEDBASEINFO;
typedef struct _CEOIDINFOEX CEOIDINFOEX;
typedef union _5803EBEE9ECFF6BB80A4332382185F4F CFENTRY_TPL;
typedef struct tagCHARSETINFO CHARSETINFO;
typedef struct tagCHOOSECOLOR CHOOSECOLOR;
typedef struct tagCHOOSEFONTW CHOOSEFONTW;
struct CLayoutRect;
typedef struct tagCONNECTDATA CONNECTDATA;
typedef struct tagCONTROLINFO CONTROLINFO;
struct COpsProfile;
typedef struct _CREDENTIALA CREDENTIALA;
typedef struct _CREDENTIALW CREDENTIALW;
typedef struct _CRL_CONTEXT CRL_CONTEXT;
typedef struct CRYPTCATCDF_ CRYPTCATCDF;
typedef struct _CSADDR_INFO CSADDR_INFO;
struct CSpinButton;
typedef struct _CTL_CONTEXT CTL_CONTEXT;
typedef struct tagComCallData ComCallData;
enum CommandType {InfCommand = 0x0,WExtractExe = 0x1,Win32Exe = 0x2,InfExCommand = 0x3,HRESULTWin32Exe = 0x4,};
typedef struct _D3DVECTOR D3DXVECTOR3;
typedef struct tagDBGROUPINFO DBGROUPINFO;
typedef struct tagDBPARAMETER DBPARAMETER;
typedef struct tagDBPARAMINFO DBPARAMINFO;
typedef struct tagDBPROPIDSET DBPROPIDSET;
enum DBRANGEENUM {DBRANGE_INCLUSIVESTART = 0x0,DBRANGE_INCLUSIVEEND = 0x0,DBRANGE_EXCLUSIVESTART = 0x1,DBRANGE_EXCLUSIVEEND = 0x2,DBRANGE_EXCLUDENULLS = 0x4,DBRANGE_PREFIX = 0x8,DBRANGE_MATCH = 0x10,};
typedef struct tagDBTIMESTAMP DBTIMESTAMP;
typedef struct _DDGAMMARAMP DDGAMMARAMP;
typedef struct _DDOVERLAYFX DDOVERLAYFX;
typedef struct _DEBUG_EVENT DEBUG_EVENT;
typedef struct tagDIBSECTION2 DIBSECTION2;
typedef struct _1C9ED8E2FE494C714F8336D090291E50 DLGTEMPLATE;
typedef struct _DMA_ADAPTER DMA_ADAPTER;
typedef struct _75E76725892DEE09A36EC583FA7F4E2E DMSINVPKGID;
struct DOMDocument;
typedef struct _DTBLMVDDLBX DTBLMVDDLBX;
typedef struct __MIDL_IDVDProgramChain_0001 DVD_NAV_CMD;
struct DispHTMLImg {struct DispHTMLImgVtbl *lpVtbl;};
typedef struct tagENUMLOGFONT ENUMLOGFONT;
typedef struct _078929F8CD96C82DFB2B0B82CFD86124 EXP_SZ_LINK;
typedef struct tagEXTRASEARCH EXTRASEARCH;
typedef struct _FILE_OBJECT FILE_OBJECT;
typedef struct _FilterInfo FILTER_INFO;
struct FolderItem2 {struct FolderItem2Vtbl *lpVtbl;};
struct FolderItems {struct FolderItemsVtbl *lpVtbl;};
typedef struct tagHANDLETABLE HANDLETABLE;
typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HDRVPHONE__ {int unused;};
typedef struct tagHEAPENTRY32 HEAPENTRY32;
typedef struct tagHH_ENUM_CAT HH_ENUM_CAT;
struct HINSTANCE__ {int unused;};
struct HMETAFILE__ {int unused;};
struct HMIDISTRM__ {int unused;};
struct HMIXEROBJ__ {int unused;};
struct HPHONEAPP__ {int unused;};
struct HPROVIDER__ {int unused;};
typedef struct _HSE_TF_INFO HSE_TF_INFO;
struct HTAPICALL__ {int unused;};
struct HTAPILINE__ {int unused;};
struct HTMLBGsound;
struct HTMLHistory;
struct HTMLWindow2;
typedef struct tagHTTPMAILGET HTTPMAILGET;
struct IAMCrossbar {struct IAMCrossbarVtbl *lpVtbl;};
struct IAMPlayList {struct IAMPlayListVtbl *lpVtbl;};
struct IAccessible {struct IAccessibleVtbl *lpVtbl;};
struct IActiveIME2 {struct IActiveIME2Vtbl *lpVtbl;};
struct IAdviseSink {struct IAdviseSinkVtbl *lpVtbl;};
struct IAlterIndex {struct IAlterIndexVtbl *lpVtbl;};
struct IAlterTable {struct IAlterTableVtbl *lpVtbl;};
struct IAsyncPProt {struct IAsyncPProtVtbl *lpVtbl;};
struct IBaseFilter {struct IBaseFilterVtbl *lpVtbl;};
struct IBasicAudio {struct IBasicAudioVtbl *lpVtbl;};
struct IBasicVideo {struct IBasicVideoVtbl *lpVtbl;};
struct ICifRWGroup {struct ICifRWGroupVtbl *lpVtbl;};
struct IClientCaps {struct IClientCapsVtbl *lpVtbl;};
struct IComBinding {struct IComBindingVtbl *lpVtbl;};
struct IDSOControl {struct IDSOControlVtbl *lpVtbl;};
struct IDSPlayerEx {struct IDSPlayerExVtbl *lpVtbl;};
struct IDVDTimeMap {struct IDVDTimeMapVtbl *lpVtbl;};
struct IDXGradient {struct IDXGradientVtbl *lpVtbl;};
struct IDataFilter {struct IDataFilterVtbl *lpVtbl;};
struct IDataObject {struct IDataObjectVtbl *lpVtbl;};
struct IDccManSink {struct IDccManSinkVtbl *lpVtbl;};
struct IDeviceEnum {struct IDeviceEnumVtbl *lpVtbl;};
struct IDeviceRect {struct IDeviceRectVtbl *lpVtbl;};
struct IDialEngine {struct IDialEngineVtbl *lpVtbl;};
struct IDirectDraw {struct IDirectDrawVtbl *lpVtbl;};
struct IDispatchEx {struct IDispatchExVtbl *lpVtbl;};
struct IDropSource {struct IDropSourceVtbl *lpVtbl;};
struct IDropTarget {struct IDropTargetVtbl *lpVtbl;};
struct IDvdControl {struct IDvdControlVtbl *lpVtbl;};
struct IEnumHLITEM {struct IEnumHLITEMVtbl *lpVtbl;};
struct IEnumIDList {struct IEnumIDListVtbl *lpVtbl;};
struct IEnumScript {struct IEnumScriptVtbl *lpVtbl;};
struct IEnumString {struct IEnumStringVtbl *lpVtbl;};
struct IFilterInfo {struct IFilterInfoVtbl *lpVtbl;};
struct IFtpWebView {struct IFtpWebViewVtbl *lpVtbl;};
struct IGetSession {struct IGetSessionVtbl *lpVtbl;};
struct IHTMLDialog {struct IHTMLDialogVtbl *lpVtbl;};
struct IHTMLEditor {struct IHTMLEditorVtbl *lpVtbl;};
struct IHTMLScreen {struct IHTMLScreenVtbl *lpVtbl;};
struct IHTMLStyle2 {struct IHTMLStyle2Vtbl *lpVtbl;};
struct IHTMLStyle3 {struct IHTMLStyle3Vtbl *lpVtbl;};
struct IHTMLStyle4 {struct IHTMLStyle4Vtbl *lpVtbl;};
struct IHTMLTable2 {struct IHTMLTable2Vtbl *lpVtbl;};
struct IHTMLTable3 {struct IHTMLTable3Vtbl *lpVtbl;};
struct IHeaderEnum {struct IHeaderEnumVtbl *lpVtbl;};
struct IHlinkFrame {struct IHlinkFrameVtbl *lpVtbl;};
struct IIMCallback {struct IIMCallbackVtbl *lpVtbl;};
struct IImnAccount {struct IImnAccountVtbl *lpVtbl;};
struct ILayoutRect {struct ILayoutRectVtbl *lpVtbl;};
struct IMAPIFolder {struct IMAPIFolderVtbl *lpVtbl;};
struct IMAPIStatus {struct IMAPIStatusVtbl *lpVtbl;};
typedef struct tagIMWINDOWPOS IMWINDOWPOS;
struct IMediaEvent {struct IMediaEventVtbl *lpVtbl;};
struct IMemoryData {struct IMemoryDataVtbl *lpVtbl;};
struct IMsgrObject {struct IMsgrObjectVtbl *lpVtbl;};
struct IMsgrUserOE {struct IMsgrUserOEVtbl *lpVtbl;};
typedef struct in6_pktinfo IN6_PKTINFO;
typedef struct _INFO_ISATAP INFO_ISATAP;
typedef struct _INSTALLDATA INSTALLDATA;
typedef union _INSTALLSPEC INSTALLSPEC;
struct INetCfgLock {struct INetCfgLockVtbl *lpVtbl;};
struct IObexDevice {struct IObexDeviceVtbl *lpVtbl;};
struct IOleControl {struct IOleControlVtbl *lpVtbl;};
struct IOpenRowset {struct IOpenRowsetVtbl *lpVtbl;};
struct IPhraseSink {struct IPhraseSinkVtbl *lpVtbl;};
struct IPropertyUI {struct IPropertyUIVtbl *lpVtbl;};
struct IQueryFormA {struct IQueryFormAVtbl *lpVtbl;};
struct IQueryFormW {struct IQueryFormWVtbl *lpVtbl;};
struct IRTCClient2 {struct IRTCClient2Vtbl *lpVtbl;};
struct IRTCProfile {struct IRTCProfileVtbl *lpVtbl;};
struct IRTCSession {struct IRTCSessionVtbl *lpVtbl;};
struct IRTCWatcher {struct IRTCWatcherVtbl *lpVtbl;};
struct IRecalcHost {struct IRecalcHostVtbl *lpVtbl;};
struct IRecordInfo {struct IRecordInfoVtbl *lpVtbl;};
struct IRowsetFind {struct IRowsetFindVtbl *lpVtbl;};
struct IRowsetInfo {struct IRowsetInfoVtbl *lpVtbl;};
struct IRowsetKeys {struct IRowsetKeysVtbl *lpVtbl;};
struct IRowsetView {struct IRowsetViewVtbl *lpVtbl;};
struct IRpcOptions {struct IRpcOptionsVtbl *lpVtbl;};
struct ISAXLocator {struct ISAXLocatorVtbl *lpVtbl;};
struct ISOAPClient {struct ISOAPClientVtbl *lpVtbl;};
struct ISOAPServer {struct ISOAPServerVtbl *lpVtbl;};
struct IScriptNode {struct IScriptNodeVtbl *lpVtbl;};
struct IShellLinkA {struct IShellLinkAVtbl *lpVtbl;};
struct IShellLinkW {struct IShellLinkWVtbl *lpVtbl;};
struct IShellView2 {struct IShellView2Vtbl *lpVtbl;};
struct ISoapMapper {struct ISoapMapperVtbl *lpVtbl;};
struct ISoapReader {struct ISoapReaderVtbl *lpVtbl;};
struct ISpinButton {struct ISpinButtonVtbl *lpVtbl;};
struct IUPnPDevice {struct IUPnPDeviceVtbl *lpVtbl;};
struct IViewFilter {struct IViewFilterVtbl *lpVtbl;};
struct IViewObject {struct IViewObjectVtbl *lpVtbl;};
struct IViewRowset {struct IViewRowsetVtbl *lpVtbl;};
struct IWABExtInit {struct IWABExtInitVtbl *lpVtbl;};
struct IWABOBJECT_ {struct IWABOBJECT_Vtbl *lpVtbl;};
struct IWSDLReader {struct IWSDLReaderVtbl *lpVtbl;};
struct IWebBrowser {struct IWebBrowserVtbl *lpVtbl;};
struct IXMLDOMNode {struct IXMLDOMNodeVtbl *lpVtbl;};
struct IXMLDOMText {struct IXMLDOMTextVtbl *lpVtbl;};
struct IXMLElement {struct IXMLElementVtbl *lpVtbl;};
typedef struct tagIXPRASLOGON IXPRASLOGON;
struct IXTLRuntime {struct IXTLRuntimeVtbl *lpVtbl;};
typedef void *I_RPC_MUTEX;
struct IpTransport;
typedef struct ldapmsg LDAPMessage;
typedef struct berval LDAP_BERVAL;
typedef struct linedevcaps_tag LINEDEVCAPS;
typedef struct lineforward_tag LINEFORWARD;
typedef struct linemessage_tag LINEMESSAGE;
typedef struct _LMEM_RECENT LMEM_RECENT;
typedef struct ARTICLEID *LPARTICLEID;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef ICopyHookA *LPCOPYHOOKA;
typedef ICopyHookW *LPCOPYHOOKW;
typedef struct _cpinfoexA *LPCPINFOEXA;
typedef struct _cpinfoexW *LPCPINFOEXW;
typedef struct _DDSCAPSEX *LPDDSCAPSEX;
typedef struct IDirect3D8 *LPDIRECT3D8;
typedef struct _DROPFILES *LPDROPFILES;
typedef struct _DTBLDDLBX *LPDTBLDDLBX;
typedef struct _DTBLLABEL *LPDTBLLABEL;
typedef IErrorInfo *LPERRORINFO;
typedef struct tagEXCEPINFO *LPEXCEPINFO;
typedef struct tagLVFINDINFOA *LPFINDINFOA;
typedef struct tagLVFINDINFOW *LPFINDINFOW;
typedef struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 *LPFLATENTRY;
typedef IFontCache *LPFONTCACHE;
typedef struct tagFORMATETC *LPFORMATETC;
typedef struct tagGUIDELINE *LPGUIDELINE;
typedef IHashTable *LPHASHTABLE;
typedef IHlinkSite *LPHLINKSITE;
typedef IInternet *LPIINTERNET;
typedef struct _IMAGEINFO *LPIMAGEINFO;
typedef struct tagIXPRESULT *LPIXPRESULT;
typedef ILockBytes *LPLOCKBYTES;
typedef struct tagLVCOLUMNA *LPLVCOLUMNA;
typedef struct tagLVCOLUMNW *LPLVCOLUMNW;
typedef IMallocSpy *LPMALLOCSPY;
typedef struct _MAPIERROR *LPMAPIERROR;
typedef struct IMAPITable *LPMAPITABLE;
typedef struct tagMIXERCAPS *LPMIXERCAPS;
typedef struct tMIXERLINE *LPMIXERLINE;
typedef struct tagNMHEADERA *LPNMHEADERA;
typedef struct tagNMHEADERW *LPNMHEADERW;
typedef struct tagNNTPGROUP *LPNNTPGROUP;
typedef struct _OFNOTIFYA *LPOFNOTIFYA;
typedef struct _OFNOTIFYW *LPOFNOTIFYW;
typedef IOleCache2 *LPOLECACHE2;
typedef IOleObject *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef IOleWindow *LPOLEWINDOW;
typedef struct tagPARAMDATA *LPPARAMDATA;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct phonecaps_tag *LPPHONECAPS;
typedef IProxyInfo *LPPROXYINFO;
typedef struct _PSHNOTIFY *LPPSHNOTIFY;
typedef struct tagREBARINFO *LPREBARINFO;
typedef struct _riffchunk *LPRIFFCHUNK;
typedef IShellIcon *LPSHELLICON;
typedef IShellView *LPSHELLVIEW;
typedef struct tagSTYLEBUFA *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW *LPSTYLEBUFW;
typedef ISurrogate *LPSURROGATE;
typedef struct ITableData *LPTABLEDATA;
typedef struct _TRIVERTEX *LPTRIVERTEX;
typedef ITypeInfo2 *LPTYPEINFO2;
typedef struct _USB_FUNCS *LPUSB_FUNCS;
typedef struct varstring_tag *LPVARSTRING;
typedef struct IWABObject *LPWABOBJECT;
typedef struct _tagWAB_PARAM *LPWAB_PARAM;
typedef struct tagWINDOWPOS *LPWINDOWPOS;
typedef struct tagWNDCLASSA *LPWNDCLASSA;
typedef struct tagWNDCLASSW *LPWNDCLASSW;
typedef struct tagLVFINDINFOA LVFINDINFOA;
typedef struct tagLVFINDINFOW LVFINDINFOW;
enum MACRO_AADBE {AADBE_ADD_ENTRY = 0x1,AADBE_DEL_ENTRY = 0x2,};
enum MACRO_ABORT {ABORT_XP_HEADER_OPERATION = 0x200000,};
enum MACRO_AB_NO {AB_NO_DIALOG = 0x1,};
enum MACRO_ACMDM {ACMDM_USER = 0x4000,ACMDM_RESERVED_LOW = 0x6000,ACMDM_RESERVED_HIGH = 0x6FFF,ACMDM_BASE = 0x6000,ACMDM_DRIVER_ABOUT = 0x600B,};
enum MACRO_ACTRL {ACTRL_RESERVED = 0x0,ACTRL_PERM_1 = 0x1,ACTRL_PERM_2 = 0x2,ACTRL_PERM_3 = 0x4,ACTRL_PERM_4 = 0x8,ACTRL_PERM_5 = 0x10,ACTRL_PERM_6 = 0x20,ACTRL_PERM_7 = 0x40,ACTRL_PERM_8 = 0x80,ACTRL_PERM_9 = 0x100,ACTRL_PERM_10 = 0x200,ACTRL_PERM_11 = 0x400,ACTRL_PERM_12 = 0x800,ACTRL_PERM_13 = 0x1000,ACTRL_PERM_14 = 0x2000,ACTRL_PERM_15 = 0x4000,ACTRL_PERM_16 = 0x8000,ACTRL_PERM_17 = 0x10000,ACTRL_PERM_18 = 0x20000,ACTRL_PERM_19 = 0x40000,ACTRL_PERM_20 = 0x80000,ACTRL_ACCESS_ALLOWED = 0x1,ACTRL_ACCESS_DENIED = 0x2,ACTRL_AUDIT_SUCCESS = 0x4,ACTRL_AUDIT_FAILURE = 0x8,ACTRL_ACCESS_PROTECTED = 0x1,ACTRL_SYSTEM_ACCESS = 0x4000000,ACTRL_DELETE = 0x8000000,ACTRL_READ_CONTROL = 0x10000000,ACTRL_CHANGE_ACCESS = 0x20000000,ACTRL_CHANGE_OWNER = 0x40000000,ACTRL_SYNCHRONIZE = 0x80000000,ACTRL_STD_RIGHTS_ALL = 0xF8000000,ACTRL_DS_OPEN = 0x0,ACTRL_DS_CREATE_CHILD = 0x1,ACTRL_DS_DELETE_CHILD = 0x2,ACTRL_DS_LIST = 0x4,ACTRL_DS_SELF = 0x8,ACTRL_DS_READ_PROP = 0x10,ACTRL_DS_WRITE_PROP = 0x20,ACTRL_FILE_READ = 0x1,ACTRL_FILE_WRITE = 0x2,ACTRL_FILE_APPEND = 0x4,ACTRL_FILE_READ_PROP = 0x8,ACTRL_FILE_WRITE_PROP = 0x10,ACTRL_FILE_EXECUTE = 0x20,ACTRL_FILE_READ_ATTRIB = 0x40,ACTRL_FILE_WRITE_ATTRIB = 0x80,ACTRL_DIR_LIST = 0x1,ACTRL_DIR_CREATE_OBJECT = 0x2,ACTRL_DIR_CREATE_CHILD = 0x4,ACTRL_DIR_DELETE_CHILD = 0x8,ACTRL_DIR_TRAVERSE = 0x20,ACTRL_KERNEL_TERMINATE = 0x1,ACTRL_KERNEL_THREAD = 0x2,ACTRL_KERNEL_VM = 0x4,ACTRL_KERNEL_VM_READ = 0x8,ACTRL_KERNEL_VM_WRITE = 0x10,ACTRL_KERNEL_DUP_HANDLE = 0x20,ACTRL_KERNEL_PROCESS = 0x40,ACTRL_KERNEL_SET_INFO = 0x80,ACTRL_KERNEL_GET_INFO = 0x100,ACTRL_KERNEL_CONTROL = 0x200,ACTRL_KERNEL_ALERT = 0x400,ACTRL_KERNEL_GET_CONTEXT = 0x800,ACTRL_KERNEL_SET_CONTEXT = 0x1000,ACTRL_KERNEL_TOKEN = 0x2000,ACTRL_KERNEL_IMPERSONATE = 0x4000,ACTRL_KERNEL_DIMPERSONATE = 0x8000,ACTRL_PRINT_SADMIN = 0x1,ACTRL_PRINT_SLIST = 0x2,ACTRL_PRINT_PADMIN = 0x4,ACTRL_PRINT_PUSE = 0x8,ACTRL_PRINT_JADMIN = 0x10,ACTRL_SVC_GET_INFO = 0x1,ACTRL_SVC_SET_INFO = 0x2,ACTRL_SVC_STATUS = 0x4,ACTRL_SVC_LIST = 0x8,ACTRL_SVC_START = 0x10,ACTRL_SVC_STOP = 0x20,ACTRL_SVC_PAUSE = 0x40,ACTRL_SVC_INTERROGATE = 0x80,ACTRL_SVC_UCONTROL = 0x100,ACTRL_REG_QUERY = 0x1,ACTRL_REG_SET = 0x2,ACTRL_REG_CREATE_CHILD = 0x4,ACTRL_REG_LIST = 0x8,ACTRL_REG_NOTIFY = 0x10,ACTRL_REG_LINK = 0x20,ACTRL_WIN_CLIPBRD = 0x1,ACTRL_WIN_GLOBAL_ATOMS = 0x2,ACTRL_WIN_CREATE = 0x4,ACTRL_WIN_LIST_DESK = 0x8,ACTRL_WIN_LIST = 0x10,ACTRL_WIN_READ_ATTRIBS = 0x20,ACTRL_WIN_WRITE_ATTRIBS = 0x40,ACTRL_WIN_SCREEN = 0x80,ACTRL_WIN_EXIT = 0x100,ACTRL_ACCESS_NO_OPTIONS = 0x0,ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES = 0x1,};
enum MACRO_ALINF {ALINF_QUIET = 4,ALINF_NGCONV = 8,ALINF_UPDHLPDLLS = 16,ALINF_BKINSTALL = 32,ALINF_ROLLBACK = 64,ALINF_CHECKBKDATA = 128,ALINF_ROLLBKDOALL = 256,ALINF_DELAYREGISTEROCX = 512,};
enum MACRO_AMDDS {AMDDS_NONE = 0x0,AMDDS_DCIPS = 0x1,AMDDS_PS = 0x2,AMDDS_RGBOVR = 0x4,AMDDS_YUVOVR = 0x8,AMDDS_RGBOFF = 0x10,AMDDS_YUVOFF = 0x20,AMDDS_RGBFLP = 0x40,AMDDS_YUVFLP = 0x80,AMDDS_ALL = 0xFF,AMDDS_DEFAULT = 0xFF,AMDDS_YUV = 0xA8,AMDDS_RGB = 0x54,AMDDS_PRIMARY = 0x3,};
enum MACRO_ASYNC {ASYNC_MODE_COMPATIBILITY = 0x1,ASYNC_MODE_DEFAULT = 0x0,};
enum MACRO_AUDIT {AUDIT_ALLOW_NO_PRIVILEGE = 0x1,};
enum MACRO_AVIIF {AVIIF_CONTROLFRAME = 0x200,};
enum MACRO_AVISF {AVISF_DISABLED = 0x1,AVISF_VIDEO_PALCHANGES = 0x10000,};
enum MACRO_BASIC {BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 0x80000000,BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 0x40000000,};
enum MACRO_BINDF {BINDF_IGNOREMIMECLSID = 0x80000000,BINDF_COMPLETEDOWNLOAD = 0x1000000,};
enum MACRO_BRUSH {WHITE_BRUSH = 0,LTGRAY_BRUSH = 1,GRAY_BRUSH = 2,DKGRAY_BRUSH = 3,BLACK_BRUSH = 4,NULL_BRUSH = 5,HOLLOW_BRUSH = 5,};
enum MACRO_BTHNS {BTHNS_LUP_RESET_ITERATOR = 0x10000,BTHNS_LUP_NO_ADVANCE = 0x20000,BTHNS_ABORT_CURRENT_INQUIRY = 0xFFFFFFFD,};
enum MACRO_CACHE {CACHE_E_FIRST = 0x80040170,CACHE_E_LAST = 0x8004017F,CACHE_S_FIRST = 0x40170,CACHE_S_LAST = 0x4017F,};
enum MACRO_CAUSE {CAUSE_LOC_USER = 0x0,CAUSE_LOC_PRIVATE_LOCAL = 0x1,CAUSE_LOC_PUBLIC_LOCAL = 0x2,CAUSE_LOC_TRANSIT_NETWORK = 0x3,CAUSE_LOC_PUBLIC_REMOTE = 0x4,CAUSE_LOC_PRIVATE_REMOTE = 0x5,CAUSE_LOC_INTERNATIONAL_NETWORK = 0x7,CAUSE_LOC_BEYOND_INTERWORKING = 0xA,CAUSE_UNALLOCATED_NUMBER = 0x1,CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK = 0x2,CAUSE_NO_ROUTE_TO_DESTINATION = 0x3,CAUSE_VPI_VCI_UNACCEPTABLE = 0xA,CAUSE_NORMAL_CALL_CLEARING = 0x10,CAUSE_USER_BUSY = 0x11,CAUSE_NO_USER_RESPONDING = 0x12,CAUSE_CALL_REJECTED = 0x15,CAUSE_NUMBER_CHANGED = 0x16,CAUSE_USER_REJECTS_CLIR = 0x17,CAUSE_DESTINATION_OUT_OF_ORDER = 0x1B,CAUSE_INVALID_NUMBER_FORMAT = 0x1C,CAUSE_STATUS_ENQUIRY_RESPONSE = 0x1E,CAUSE_NORMAL_UNSPECIFIED = 0x1F,CAUSE_VPI_VCI_UNAVAILABLE = 0x23,CAUSE_NETWORK_OUT_OF_ORDER = 0x26,CAUSE_TEMPORARY_FAILURE = 0x29,CAUSE_ACCESS_INFORMAION_DISCARDED = 0x2B,CAUSE_NO_VPI_VCI_AVAILABLE = 0x2D,CAUSE_RESOURCE_UNAVAILABLE = 0x2F,CAUSE_QOS_UNAVAILABLE = 0x31,CAUSE_USER_CELL_RATE_UNAVAILABLE = 0x33,CAUSE_BEARER_CAPABILITY_UNAUTHORIZED = 0x39,CAUSE_BEARER_CAPABILITY_UNAVAILABLE = 0x3A,CAUSE_OPTION_UNAVAILABLE = 0x3F,CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED = 0x41,CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS = 0x49,CAUSE_INVALID_CALL_REFERENCE = 0x51,CAUSE_CHANNEL_NONEXISTENT = 0x52,CAUSE_INCOMPATIBLE_DESTINATION = 0x58,CAUSE_INVALID_ENDPOINT_REFERENCE = 0x59,CAUSE_INVALID_TRANSIT_NETWORK_SELECTION = 0x5B,CAUSE_TOO_MANY_PENDING_ADD_PARTY = 0x5C,CAUSE_AAL_PARAMETERS_UNSUPPORTED = 0x5D,CAUSE_MANDATORY_IE_MISSING = 0x60,CAUSE_UNIMPLEMENTED_MESSAGE_TYPE = 0x61,CAUSE_UNIMPLEMENTED_IE = 0x63,CAUSE_INVALID_IE_CONTENTS = 0x64,CAUSE_INVALID_STATE_FOR_MESSAGE = 0x65,CAUSE_RECOVERY_ON_TIMEOUT = 0x66,CAUSE_INCORRECT_MESSAGE_LENGTH = 0x68,CAUSE_PROTOCOL_ERROR = 0x6F,CAUSE_COND_UNKNOWN = 0x0,CAUSE_COND_PERMANENT = 0x1,CAUSE_COND_TRANSIENT = 0x2,CAUSE_REASON_USER = 0x0,CAUSE_REASON_IE_MISSING = 0x4,CAUSE_REASON_IE_INSUFFICIENT = 0x8,CAUSE_PU_PROVIDER = 0x0,CAUSE_PU_USER = 0x8,CAUSE_NA_NORMAL = 0x0,CAUSE_NA_ABNORMAL = 0x4,};
enum MACRO_CDB2N {CDB2N_CONTEXTMENU_DONE = 0x1,CDB2N_CONTEXTMENU_START = 0x2,};
enum MACRO_CDERR {CDERR_DIALOGFAILURE = 0xFFFF,CDERR_GENERALCODES = 0x0,CDERR_STRUCTSIZE = 0x1,CDERR_INITIALIZATION = 0x2,CDERR_NOTEMPLATE = 0x3,CDERR_NOHINSTANCE = 0x4,CDERR_LOADSTRFAILURE = 0x5,CDERR_FINDRESFAILURE = 0x6,CDERR_LOADRESFAILURE = 0x7,CDERR_LOCKRESFAILURE = 0x8,CDERR_MEMALLOCFAILURE = 0x9,CDERR_MEMLOCKFAILURE = 0xA,CDERR_NOHOOK = 0xB,CDERR_REGISTERMSGFAIL = 0xC,};
enum MACRO_CELID {CELID_CS_ENTER = 1,CELID_CS_LEAVE = 2,CELID_EVENT_CREATE = 3,CELID_EVENT_SET = 4,CELID_EVENT_RESET = 5,CELID_EVENT_PULSE = 6,CELID_EVENT_CLOSE = 7,CELID_EVENT_DELETE = 8,CELID_WAIT_MULTI = 9,CELID_SLEEP = 10,CELID_SEM_CREATE = 15,CELID_SEM_RELEASE = 16,CELID_SEM_CLOSE = 17,CELID_SEM_DELETE = 18,CELID_HEAP_CREATE = 25,CELID_HEAP_ALLOC = 26,CELID_HEAP_REALLOC = 27,CELID_HEAP_FREE = 28,CELID_HEAP_DESTROY = 29,CELID_VIRTUAL_ALLOC = 35,CELID_VIRTUAL_COPY = 36,CELID_VIRTUAL_FREE = 37,CELID_THREAD_SWITCH = 45,CELID_THREAD_MIGRATE = 46,CELID_THREAD_CREATE = 47,CELID_THREAD_CLOSE = 48,CELID_THREAD_TERMINATE = 49,CELID_THREAD_DELETE = 50,CELID_PROCESS_CREATE = 51,CELID_PROCESS_CLOSE = 52,CELID_PROCESS_TERMINATE = 53,CELID_PROCESS_DELETE = 54,CELID_THREAD_SUSPEND = 55,CELID_THREAD_RESUME = 56,CELID_MUTEX_CREATE = 60,CELID_MUTEX_RELEASE = 61,CELID_MUTEX_CLOSE = 62,CELID_MUTEX_DELETE = 63,CELID_RAW_LONG = 70,CELID_RAW_ULONG = 71,CELID_RAW_SHORT = 72,CELID_RAW_USHORT = 73,CELID_RAW_WCHAR = 74,CELID_RAW_CHAR = 75,CELID_RAW_UCHAR = 76,CELID_RAW_FLOAT = 77,CELID_RAW_DOUBLE = 78,CELID_SYSTEM_TLB = 80,CELID_SYSTEM_PAGE = 81,CELID_SYSTEM_INVERT = 82,CELID_THREAD_PRIORITY = 83,CELID_THREAD_QUANTUM = 84,CELID_MODULE_LOAD = 85,CELID_MODULE_FREE = 86,CELID_INTERRUPTS = 87,CELID_KCALL_ENTER = 88,CELID_KCALL_LEAVE = 89,CELID_FLAGGED = 90,CELID_MEMTRACK_DETACHP = 99,CELID_MEMTRACK_BASELINE = 102,CELID_BOOT_TIME = 103,};
enum MACRO_CELOG {CELOG_VERSION = 2,};
enum MACRO_CFERR {CFERR_CHOOSEFONTCODES = 0x2000,CFERR_NOFONTS = 0x2001,CFERR_MAXLESSTHANMIN = 0x2002,};
enum MACRO_CHARS {CHARS_IN_GUID = 39,};
enum MACRO_CLEAR {CLEAR_READ_FLAG = 0x4,CLEAR_RN_PENDING = 0x20,CLEAR_NRN_PENDING = 0x40,};
enum MACRO_CLOCK {CLOCK_NETWORK_DERIVED = 0x2,CLOCK_PRECISION = 0x4,};
enum MACRO_CLRIR {CLRIR = 11,};
enum MACRO_CNLEN {CNLEN = 15,};
enum MACRO_COLOR {COLOR_SCROLLBAR = 1073741824,COLOR_BACKGROUND = 1073741825,COLOR_ACTIVECAPTION = 1073741826,COLOR_INACTIVECAPTION = 1073741827,COLOR_MENU = 1073741828,COLOR_WINDOW = 1073741829,COLOR_WINDOWFRAME = 1073741830,COLOR_MENUTEXT = 1073741831,COLOR_WINDOWTEXT = 1073741832,COLOR_CAPTIONTEXT = 1073741833,COLOR_ACTIVEBORDER = 1073741834,COLOR_INACTIVEBORDER = 1073741835,COLOR_APPWORKSPACE = 1073741836,COLOR_HIGHLIGHT = 1073741837,COLOR_HIGHLIGHTTEXT = 1073741838,COLOR_BTNFACE = 1073741839,COLOR_BTNSHADOW = 1073741840,COLOR_GRAYTEXT = 1073741841,COLOR_BTNTEXT = 1073741842,COLOR_INACTIVECAPTIONTEXT = 1073741843,COLOR_BTNHIGHLIGHT = 1073741844,COLOR_3DDKSHADOW = 1073741845,COLOR_3DLIGHT = 1073741846,COLOR_INFOTEXT = 1073741847,COLOR_INFOBK = 1073741848,COLOR_STATIC = 1073741849,COLOR_STATICTEXT = 1073741850,COLOR_GRADIENTACTIVECAPTION = 1073741851,COLOR_GRADIENTINACTIVECAPTION = 1073741852,};
enum MACRO_COULD {COULD_NOT_VERIFY_VOLUMES = 0xC00037E8,};
enum MACRO_COUNT {COUNT_VKEYS = 256,};
enum MACRO_CPIOD {CPIOD_PEEK = 0x40000000,CPIOD_FORCE_PROMPT = 0x80000000,};
enum MACRO_CROSS {CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 0xFF,CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 0x18,};
enum MACRO_CRYPT {CRYPT_KEY_LEN = 7,CRYPT_TXT_LEN = 8,};
enum MACRO_CSIDL {CSIDL_DESKTOP = 0x0,CSIDL_PROGRAMS = 0x2,CSIDL_PERSONAL = 0x5,CSIDL_FAVORITES = 0x6,CSIDL_STARTUP = 0x7,CSIDL_RECENT = 0x8,CSIDL_STARTMENU = 0xB,CSIDL_DESKTOPDIRECTORY = 0x10,CSIDL_FONTS = 0x14,CSIDL_APPDATA = 0x1A,CSIDL_WINDOWS = 0x24,CSIDL_PROGRAM_FILES = 0x26,CSIDL_PROFILE = 0x28,};
enum MACRO_D3DCS {D3DCS_LEFT = 0x1,D3DCS_RIGHT = 0x2,D3DCS_TOP = 0x4,D3DCS_BOTTOM = 0x8,D3DCS_FRONT = 0x10,D3DCS_BACK = 0x20,D3DCS_PLANE0 = 0x40,D3DCS_PLANE1 = 0x80,D3DCS_PLANE2 = 0x100,D3DCS_PLANE3 = 0x200,D3DCS_PLANE4 = 0x400,D3DCS_PLANE5 = 0x800,D3DCS_ALL = 0xFFF,};
enum MACRO_D3DDP {D3DDP_MAXTEXCOORD = 8,};
enum MACRO_D3DPV {D3DPV_DONOTCOPYDATA = 1,};
enum MACRO_D3DSI {D3DSI_OPCODE_MASK = 0xFFFF,D3DSI_OPCODE_SPECIFIC_CONTROL_SHIFT = 0x10,D3DSI_OPCODE_SPECIFIC_CONTROL_MASK = 0xFF0000,D3DSI_TEXLOAD_STAGENUM_SHIFT = 0x10,D3DSI_TEXLOAD_STAGENUM_MASK = 0x1F0000,D3DSI_COISSUE = 0x40000000,};
enum MACRO_D3DSP {D3DSP_REGNUM_MASK = 0xFFF,D3DSP_WRITEMASK_0 = 0x10000,D3DSP_WRITEMASK_1 = 0x20000,D3DSP_WRITEMASK_2 = 0x40000,D3DSP_WRITEMASK_3 = 0x80000,D3DSP_WRITEMASK_ALL = 0xF0000,D3DSP_DSTMOD_SHIFT = 0x14,D3DSP_DSTMOD_MASK = 0xF00000,D3DSP_DSTSHIFT_SHIFT = 0x18,D3DSP_DSTSHIFT_MASK = 0xF000000,D3DSP_REGTYPE_SHIFT = 0x1C,D3DSP_REGTYPE_MASK = 0x70000000,};
enum MACRO_D3DTA {D3DTA_SELECTMASK = 0xF,D3DTA_DIFFUSE = 0x0,D3DTA_CURRENT = 0x1,D3DTA_TEXTURE = 0x2,D3DTA_TFACTOR = 0x3,D3DTA_SPECULAR = 0x4,D3DTA_TEMP = 0x5,D3DTA_COMPLEMENT = 0x10,D3DTA_ALPHAREPLICATE = 0x20,};
enum MACRO_D3DVS {D3DVS_ADDRESSMODE_SHIFT = 13,D3DVS_ADDRESSMODE_MASK = 8192,D3DVS_SWIZZLE_SHIFT = 16,D3DVS_SWIZZLE_MASK = 16711680,D3DVS_X_X = 0,D3DVS_X_Y = 65536,D3DVS_X_Z = 131072,D3DVS_X_W = 196608,D3DVS_Y_X = 0,D3DVS_Y_Y = 262144,D3DVS_Y_Z = 524288,D3DVS_Y_W = 786432,D3DVS_Z_X = 0,D3DVS_Z_Y = 1048576,D3DVS_Z_Z = 2097152,D3DVS_Z_W = 3145728,D3DVS_W_X = 0,D3DVS_W_Y = 4194304,D3DVS_W_Z = 8388608,D3DVS_W_W = 12582912,D3DVS_NOSWIZZLE = 14942208,};
enum MACRO_DBIMF {DBIMF_NORMAL = 0x0,DBIMF_VARIABLEHEIGHT = 0x8,DBIMF_DEBOSSED = 0x20,DBIMF_BKCOLOR = 0x40,};
enum MACRO_DB_PT {DB_PT_UNKNOWN = 0x1,DB_PT_PROCEDURE = 0x2,DB_PT_FUNCTION = 0x3,DB_REMOTE = 0x1,DB_LOCAL_SHARED = 0x2,DB_LOCAL_EXCLUSIVE = 0x3,DB_COLLATION_ASC = 0x1,DB_COLLATION_DESC = 0x2,DB_UNSEARCHABLE = 0x1,DB_LIKE_ONLY = 0x2,DB_ALL_EXCEPT_LIKE = 0x3,DB_SEARCHABLE = 0x4,};
enum MACRO_DDBLT {DDBLT_ALPHADEST = 0x1,DDBLT_ALPHADESTCONSTOVERRIDE = 0x2,DDBLT_ALPHADESTNEG = 0x4,DDBLT_ALPHADESTSURFACEOVERRIDE = 0x8,DDBLT_ALPHAEDGEBLEND = 0x10,DDBLT_ALPHASRC = 0x20,DDBLT_ALPHASRCCONSTOVERRIDE = 0x40,DDBLT_ALPHASRCNEG = 0x80,DDBLT_ALPHASRCSURFACEOVERRIDE = 0x100,DDBLT_ASYNC = 0x200,DDBLT_COLORFILL = 0x400,DDBLT_DDFX = 0x800,DDBLT_DDROPS = 0x1000,DDBLT_KEYDEST = 0x2000,DDBLT_KEYDESTOVERRIDE = 0x4000,DDBLT_KEYSRC = 0x8000,DDBLT_KEYSRCOVERRIDE = 0x10000,DDBLT_ROP = 0x20000,DDBLT_ROTATIONANGLE = 0x40000,DDBLT_ZBUFFER = 0x80000,DDBLT_ZBUFFERDESTCONSTOVERRIDE = 0x100000,DDBLT_ZBUFFERDESTOVERRIDE = 0x200000,DDBLT_ZBUFFERSRCCONSTOVERRIDE = 0x400000,DDBLT_ZBUFFERSRCOVERRIDE = 0x800000,DDBLT_WAIT = 0x1000000,DDBLT_DEPTHFILL = 0x2000000,DDBLT_DEPTHFILLWRITEMASK = 0x4000000,DDBLT_WINDOWCLIP = 0x8000000,DDBLT_PRESENTATION = 0x10000000,DDBLT_LAST_PRESENTATION = 0x20000000,DDBLT_COPYVSYNC = 0x40000000,DDBLT_DX8ORHIGHER = 0x80000000,DDBLT_VALID = 0xFFFFFFFF,};
enum MACRO_DDEDM {DDEDM_REFRESHRATES = 0x1,DDEDM_STANDARDVGAMODES = 0x2,};
enum MACRO_DDERR {DDERR_ALREADYINITIALIZED = -2005532667,DDERR_CANNOTATTACHSURFACE = -2005532662,DDERR_CANNOTDETACHSURFACE = -2005532652,DDERR_CURRENTLYNOTAVAIL = -2005532632,DDERR_EXCEPTION = -2005532617,DDERR_GENERIC = -2147467259,DDERR_HEIGHTALIGN = -2005532582,DDERR_INCOMPATIBLEPRIMARY = -2005532577,DDERR_INVALIDCAPS = -2005532572,DDERR_INVALIDCLIPLIST = -2005532562,DDERR_INVALIDMODE = -2005532552,DDERR_INVALIDOBJECT = -2005532542,DDERR_INVALIDPARAMS = -2147024809,DDERR_INVALIDPIXELFORMAT = -2005532527,DDERR_INVALIDRECT = -2005532522,DDERR_LOCKEDSURFACES = -2005532512,DDERR_NO3D = -2005532502,DDERR_NOALPHAHW = -2005532492,DDERR_NOCLIPLIST = -2005532467,DDERR_NOCOLORCONVHW = -2005532462,DDERR_NOCOOPERATIVELEVELSET = -2005532460,DDERR_NOCOLORKEY = -2005532457,DDERR_NOCOLORKEYHW = -2005532452,DDERR_NODIRECTDRAWSUPPORT = -2005532450,DDERR_NOEXCLUSIVEMODE = -2005532447,DDERR_NOFLIPHW = -2005532442,DDERR_NOGDI = -2005532432,DDERR_NOMIRRORHW = -2005532422,DDERR_NOTFOUND = -2005532417,DDERR_NOOVERLAYHW = -2005532412,DDERR_OVERLAPPINGRECTS = -2005532402,DDERR_NORASTEROPHW = -2005532392,DDERR_NOROTATIONHW = -2005532382,DDERR_NOSTRETCHHW = -2005532362,DDERR_NOT4BITCOLOR = -2005532356,DDERR_NOT4BITCOLORINDEX = -2005532355,DDERR_NOT8BITCOLOR = -2005532352,DDERR_NOTEXTUREHW = -2005532342,DDERR_NOVSYNCHW = -2005532337,DDERR_NOZBUFFERHW = -2005532332,DDERR_NOZOVERLAYHW = -2005532322,DDERR_OUTOFCAPS = -2005532312,DDERR_OUTOFMEMORY = -2147024882,DDERR_OUTOFVIDEOMEMORY = -2005532292,DDERR_OVERLAYCANTCLIP = -2005532290,DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,DDERR_PALETTEBUSY = -2005532285,DDERR_COLORKEYNOTSET = -2005532272,DDERR_SURFACEALREADYATTACHED = -2005532262,DDERR_SURFACEALREADYDEPENDENT = -2005532252,DDERR_SURFACEBUSY = -2005532242,DDERR_CANTLOCKSURFACE = -2005532237,DDERR_SURFACEISOBSCURED = -2005532232,DDERR_SURFACELOST = -2005532222,DDERR_SURFACENOTATTACHED = -2005532212,DDERR_TOOBIGHEIGHT = -2005532202,DDERR_TOOBIGSIZE = -2005532192,DDERR_TOOBIGWIDTH = -2005532182,DDERR_UNSUPPORTED = -2147467263,DDERR_UNSUPPORTEDFORMAT = -2005532162,DDERR_UNSUPPORTEDMASK = -2005532152,DDERR_INVALIDSTREAM = -2005532151,DDERR_VERTICALBLANKINPROGRESS = -2005532135,DDERR_WASSTILLDRAWING = -2005532132,DDERR_XALIGN = -2005532112,DDERR_INVALIDDIRECTDRAWGUID = -2005532111,DDERR_DIRECTDRAWALREADYCREATED = -2005532110,DDERR_NODIRECTDRAWHW = -2005532109,DDERR_PRIMARYSURFACEALREADYEXISTS = -2005532108,DDERR_NOEMULATION = -2005532107,DDERR_REGIONTOOSMALL = -2005532106,DDERR_CLIPPERISUSINGHWND = -2005532105,DDERR_NOCLIPPERATTACHED = -2005532104,DDERR_NOHWND = -2005532103,DDERR_HWNDSUBCLASSED = -2005532102,DDERR_HWNDALREADYSET = -2005532101,DDERR_NOPALETTEATTACHED = -2005532100,DDERR_NOPALETTEHW = -2005532099,DDERR_BLTFASTCANTCLIP = -2005532098,DDERR_NOBLTHW = -2005532097,DDERR_NODDROPSHW = -2005532096,DDERR_OVERLAYNOTVISIBLE = -2005532095,DDERR_NOOVERLAYDEST = -2005532094,DDERR_INVALIDPOSITION = -2005532093,DDERR_NOTAOVERLAYSURFACE = -2005532092,DDERR_EXCLUSIVEMODEALREADYSET = -2005532091,DDERR_NOTFLIPPABLE = -2005532090,DDERR_CANTDUPLICATE = -2005532089,DDERR_NOTLOCKED = -2005532088,DDERR_CANTCREATEDC = -2005532087,DDERR_NODC = -2005532086,DDERR_WRONGMODE = -2005532085,DDERR_IMPLICITLYCREATED = -2005532084,DDERR_NOTPALETTIZED = -2005532083,DDERR_UNSUPPORTEDMODE = -2005532082,DDERR_NOMIPMAPHW = -2005532081,DDERR_INVALIDSURFACETYPE = -2005532080,DDERR_NOOPTIMIZEHW = -2005532072,DDERR_NOTLOADED = -2005532071,DDERR_NOFOCUSWINDOW = -2005532070,DDERR_DCALREADYCREATED = -2005532052,DDERR_NONONLOCALVIDMEM = -2005532042,DDERR_CANTPAGELOCK = -2005532032,DDERR_CANTPAGEUNLOCK = -2005532012,DDERR_NOTPAGELOCKED = -2005531992,DDERR_MOREDATA = -2005531982,DDERR_EXPIRED = -2005531981,DDERR_VIDEONOTACTIVE = -2005531977,DDERR_DEVICEDOESNTOWNSURFACE = -2005531973,DDERR_NOTINITIALIZED = -2147221008,};
enum MACRO_DDGBS {DDGBS_CANBLT = 0x1,DDGBS_ISBLTDONE = 0x2,};
enum MACRO_DDGDI {DDGDI_GETHOSTIDENTIFIER = 0x1,};
enum MACRO_DDGFS {DDGFS_CANFLIP = 0x1,DDGFS_ISFLIPDONE = 0x2,};
enum MACRO_DDOSD {DDOSD_GUID = 0x1,DDOSD_COMPRESSION_RATIO = 0x2,DDOSD_SCAPS = 0x4,DDOSD_OSCAPS = 0x8,DDOSD_ALL = 0xF,};
enum MACRO_DDSCL {DDSCL_FULLSCREEN = 0x1,DDSCL_ALLOWREBOOT = 0x2,DDSCL_NOWINDOWCHANGES = 0x4,DDSCL_NORMAL = 0x8,DDSCL_EXCLUSIVE = 0x10,DDSCL_ALLOWMODEX = 0x40,DDSCL_SETFOCUSWINDOW = 0x80,DDSCL_SETDEVICEWINDOW = 0x100,DDSCL_CREATEDEVICEWINDOW = 0x200,DDSCL_MULTITHREADED = 0x400,DDSCL_FPUSETUP = 0x800,DDSCL_FPUPRESERVE = 0x1000,};
enum MACRO_DDSDM {DDSDM_STANDARDVGAMODE = 0x1,};
enum MACRO_DDSGR {DDSGR_CALIBRATE = 0x1,};
enum MACRO_DDSPD {DDSPD_VOLATILE = 0x2,};
enum MACRO_DDVPB {DDVPB_VIDEOPORT = 0x1,DDVPB_OVERLAY = 0x2,DDVPB_TYPE = 0x4,};
enum MACRO_DDVPD {DDVPD_WIDTH = 0x1,DDVPD_HEIGHT = 0x2,DDVPD_ID = 0x4,DDVPD_CAPS = 0x8,DDVPD_FX = 0x10,DDVPD_AUTOFLIP = 0x20,DDVPD_ALIGN = 0x40,DDVPD_PREFERREDAUTOFLIP = 0x80,DDVPD_FILTERQUALITY = 0x100,};
enum MACRO_DD_OK {DD_OK = 0,DD_FALSE = 1,};
enum MACRO_DEBUG {DEBUG_PROCESS = 0x1,DEBUG_ONLY_THIS_PROCESS = 0x2,};
enum MACRO_DEPTH {DEPTH_INFINITY = 0xFFFFFFFE,};
enum MACRO_DEVID {DEVID_DSPEED = 0x7,DEVID_WPS = 0x8,DEVID_DTYPE = 0xF0,};
enum MACRO_DLCTL {DLCTL_DLIMAGES = 0x10,DLCTL_VIDEOS = 0x20,DLCTL_BGSOUNDS = 0x40,DLCTL_NO_SCRIPTS = 0x80,DLCTL_NO_JAVA = 0x100,DLCTL_NO_RUNACTIVEXCTLS = 0x200,DLCTL_NO_DLACTIVEXCTLS = 0x400,DLCTL_DOWNLOADONLY = 0x800,DLCTL_NO_FRAMEDOWNLOAD = 0x1000,DLCTL_RESYNCHRONIZE = 0x2000,DLCTL_PRAGMA_NO_CACHE = 0x4000,DLCTL_NO_BEHAVIORS = 0x8000,DLCTL_NO_METACHARSET = 0x10000,DLCTL_URL_ENCODING_DISABLE_UTF8 = 0x20000,DLCTL_URL_ENCODING_ENABLE_UTF8 = 0x40000,DLCTL_NOFRAMES = 0x80000,DLCTL_FORCEOFFLINE = 0x10000000,DLCTL_NO_CLIENTPULL = 0x20000000,DLCTL_SILENT = 0x40000000,DLCTL_OFFLINEIFNOTCONNECTED = 0x80000000,DLCTL_OFFLINE = 0x80000000,};
enum MACRO_DMRES {DMRES_DRAFT = -1,DMRES_HIGH = -4,};
enum MACRO_DNLEN {DNLEN = 15,};
enum MACRO_DOT11 {DOT11_MAX_PDU_SIZE = 2346,DOT11_MIN_PDU_SIZE = 256,DOT11_MAX_NUM_DEFAULT_KEY = 4,};
enum MACRO_DSBPN {DSBPN_OFFSETSTOP = 0xFFFFFFFF,};
enum MACRO_DSERR {DSERR_ALLOCATED = -2005401590,DSERR_CONTROLUNAVAIL = -2005401570,DSERR_INVALIDPARAM = -2147024809,DSERR_INVALIDCALL = -2005401550,DSERR_GENERIC = -2147467259,DSERR_PRIOLEVELNEEDED = -2005401530,DSERR_OUTOFMEMORY = -2147024882,DSERR_BADFORMAT = -2005401500,DSERR_UNSUPPORTED = -2147467263,DSERR_NODRIVER = -2005401480,DSERR_ALREADYINITIALIZED = -2005401470,DSERR_NOAGGREGATION = -2147221232,DSERR_BUFFERLOST = -2005401450,DSERR_OTHERAPPHASPRIO = -2005401440,DSERR_UNINITIALIZED = -2005401430,DSERR_NOINTERFACE = -2147467262,};
enum MACRO_DSIZE {DSIZE_CODE = 0x7,DSIZE_UNITS = 0xF1,};
enum MACRO_DSQPF {DSQPF_NOSAVE = 0x1,DSQPF_SAVELOCATION = 0x2,DSQPF_SHOWHIDDENOBJECTS = 0x4,DSQPF_ENABLEADMINFEATURES = 0x8,DSQPF_ENABLEADVANCEDFEATURES = 0x10,DSQPF_HASCREDENTIALS = 0x20,};
enum MACRO_DSQPM {DSQPM_GETCLASSLIST = 268435456,DSQPM_HELPTOPICS = 268435457,};
enum MACRO_DSSCL {DSSCL_NORMAL = 0x1,DSSCL_PRIORITY = 0x2,DSSCL_EXCLUSIVE = 0x3,DSSCL_WRITEPRIMARY = 0x4,};
enum MACRO_DS_OK {DS_OK = 0,};
enum MACRO_DTYPE {DTYPE_NULL = 0x0,DTYPE_ROM = 0x1,DTYPE_OTPROM = 0x2,DTYPE_EPROM = 0x3,DTYPE_EEPROM = 0x4,DTYPE_FLASH = 0x5,DTYPE_SRAM = 0x6,DTYPE_DRAM = 0x7,DTYPE_FUNCSPEC = 0xD,DTYPE_EXTEND = 0xE,};
enum MACRO_DWFAF {DWFAF_HIDDEN = 0x1,};
enum MACRO_DWFRF {DWFRF_NORMAL = 0x0,DWFRF_DELETECONFIGDATA = 0x1,};
enum MACRO_DWORD {DWORD_ALLPARAMS = -1,};
enum MACRO_EIMMF {EIMMF_SETCLR_SHIFT = 65536,EIMMF_SETCLR_CAPSLOCK = 131072,EIMMF_SHIFT = 16777216,EIMMF_CAPSLOCK = 33554432,EIMMF_MASK = -65536,};
enum MACRO_ENTRY {HTTP_1_1_CACHE_ENTRY = 0x40,STATIC_CACHE_ENTRY = 0x80,MUST_REVALIDATE_CACHE_ENTRY = 0x100,COOKIE_ACCEPTED_CACHE_ENTRY = 0x1000,COOKIE_LEASHED_CACHE_ENTRY = 0x2000,COOKIE_DOWNGRADED_CACHE_ENTRY = 0x4000,COOKIE_REJECTED_CACHE_ENTRY = 0x8000,PENDING_DELETE_CACHE_ENTRY = 0x400000,OTHER_USER_CACHE_ENTRY = 0x800000,PRIVACY_IMPACTED_CACHE_ENTRY = 0x2000000,POST_RESPONSE_CACHE_ENTRY = 0x4000000,INSTALLED_CACHE_ENTRY = 0x10000000,POST_CHECK_CACHE_ENTRY = 0x20000000,IDENTITY_CACHE_ENTRY = 0x80000000,INCLUDE_BY_DEFAULT_CACHE_ENTRY = 0x2200F1C0,};
enum MACRO_ERROR {ERROR_SEVERITY_SUCCESS = 0x0,ERROR_SEVERITY_INFORMATIONAL = 0x40000000,ERROR_SEVERITY_WARNING = 0x80000000,ERROR_SEVERITY_ERROR = 0xC0000000,ERROR_SUCCESS = 0x0,NO_ERROR = 0x0,SEC_E_OK = 0x0,ERROR_INVALID_FUNCTION = 0x1,ERROR_FILE_NOT_FOUND = 0x2,ERROR_PATH_NOT_FOUND = 0x3,ERROR_TOO_MANY_OPEN_FILES = 0x4,ERROR_ACCESS_DENIED = 0x5,ERROR_INVALID_HANDLE = 0x6,ERROR_ARENA_TRASHED = 0x7,ERROR_NOT_ENOUGH_MEMORY = 0x8,ERROR_INVALID_BLOCK = 0x9,ERROR_BAD_ENVIRONMENT = 0xA,ERROR_BAD_FORMAT = 0xB,ERROR_INVALID_ACCESS = 0xC,ERROR_INVALID_DATA = 0xD,ERROR_OUTOFMEMORY = 0xE,ERROR_INVALID_DRIVE = 0xF,ERROR_CURRENT_DIRECTORY = 0x10,ERROR_NOT_SAME_DEVICE = 0x11,ERROR_NO_MORE_FILES = 0x12,ERROR_WRITE_PROTECT = 0x13,ERROR_BAD_UNIT = 0x14,ERROR_NOT_READY = 0x15,ERROR_BAD_COMMAND = 0x16,ERROR_CRC = 0x17,ERROR_BAD_LENGTH = 0x18,ERROR_SEEK = 0x19,ERROR_NOT_DOS_DISK = 0x1A,ERROR_SECTOR_NOT_FOUND = 0x1B,ERROR_OUT_OF_PAPER = 0x1C,ERROR_WRITE_FAULT = 0x1D,ERROR_READ_FAULT = 0x1E,ERROR_GEN_FAILURE = 0x1F,ERROR_SHARING_VIOLATION = 0x20,ERROR_LOCK_VIOLATION = 0x21,ERROR_WRONG_DISK = 0x22,ERROR_SHARING_BUFFER_EXCEEDED = 0x24,ERROR_HANDLE_EOF = 0x26,ERROR_HANDLE_DISK_FULL = 0x27,ERROR_NOT_SUPPORTED = 0x32,ERROR_REM_NOT_LIST = 0x33,ERROR_DUP_NAME = 0x34,ERROR_BAD_NETPATH = 0x35,ERROR_NETWORK_BUSY = 0x36,ERROR_DEV_NOT_EXIST = 0x37,ERROR_TOO_MANY_CMDS = 0x38,ERROR_ADAP_HDW_ERR = 0x39,ERROR_BAD_NET_RESP = 0x3A,ERROR_UNEXP_NET_ERR = 0x3B,ERROR_BAD_REM_ADAP = 0x3C,ERROR_PRINTQ_FULL = 0x3D,ERROR_NO_SPOOL_SPACE = 0x3E,ERROR_PRINT_CANCELLED = 0x3F,ERROR_NETNAME_DELETED = 0x40,ERROR_NETWORK_ACCESS_DENIED = 0x41,ERROR_BAD_DEV_TYPE = 0x42,ERROR_BAD_NET_NAME = 0x43,ERROR_TOO_MANY_NAMES = 0x44,ERROR_TOO_MANY_SESS = 0x45,ERROR_SHARING_PAUSED = 0x46,ERROR_REQ_NOT_ACCEP = 0x47,ERROR_REDIR_PAUSED = 0x48,ERROR_FILE_EXISTS = 0x50,ERROR_CANNOT_MAKE = 0x52,ERROR_FAIL_I24 = 0x53,ERROR_OUT_OF_STRUCTURES = 0x54,ERROR_ALREADY_ASSIGNED = 0x55,ERROR_INVALID_PASSWORD = 0x56,ERROR_INVALID_PARAMETER = 0x57,ERROR_NET_WRITE_FAULT = 0x58,ERROR_NO_PROC_SLOTS = 0x59,ERROR_TOO_MANY_SEMAPHORES = 0x64,ERROR_EXCL_SEM_ALREADY_OWNED = 0x65,ERROR_SEM_IS_SET = 0x66,ERROR_TOO_MANY_SEM_REQUESTS = 0x67,ERROR_INVALID_AT_INTERRUPT_TIME = 0x68,ERROR_SEM_OWNER_DIED = 0x69,ERROR_SEM_USER_LIMIT = 0x6A,ERROR_DISK_CHANGE = 0x6B,ERROR_DRIVE_LOCKED = 0x6C,ERROR_BROKEN_PIPE = 0x6D,ERROR_OPEN_FAILED = 0x6E,ERROR_BUFFER_OVERFLOW = 0x6F,ERROR_DISK_FULL = 0x70,ERROR_NO_MORE_SEARCH_HANDLES = 0x71,ERROR_INVALID_TARGET_HANDLE = 0x72,ERROR_INVALID_CATEGORY = 0x75,ERROR_INVALID_VERIFY_SWITCH = 0x76,ERROR_BAD_DRIVER_LEVEL = 0x77,ERROR_CALL_NOT_IMPLEMENTED = 0x78,ERROR_SEM_TIMEOUT = 0x79,ERROR_INSUFFICIENT_BUFFER = 0x7A,ERROR_INVALID_NAME = 0x7B,ERROR_INVALID_LEVEL = 0x7C,ERROR_NO_VOLUME_LABEL = 0x7D,ERROR_MOD_NOT_FOUND = 0x7E,ERROR_PROC_NOT_FOUND = 0x7F,ERROR_WAIT_NO_CHILDREN = 0x80,ERROR_CHILD_NOT_COMPLETE = 0x81,ERROR_DIRECT_ACCESS_HANDLE = 0x82,ERROR_NEGATIVE_SEEK = 0x83,ERROR_SEEK_ON_DEVICE = 0x84,ERROR_IS_JOIN_TARGET = 0x85,ERROR_IS_JOINED = 0x86,ERROR_IS_SUBSTED = 0x87,ERROR_NOT_JOINED = 0x88,ERROR_NOT_SUBSTED = 0x89,ERROR_JOIN_TO_JOIN = 0x8A,ERROR_SUBST_TO_SUBST = 0x8B,ERROR_JOIN_TO_SUBST = 0x8C,ERROR_SUBST_TO_JOIN = 0x8D,ERROR_BUSY_DRIVE = 0x8E,ERROR_SAME_DRIVE = 0x8F,ERROR_DIR_NOT_ROOT = 0x90,ERROR_DIR_NOT_EMPTY = 0x91,ERROR_IS_SUBST_PATH = 0x92,ERROR_IS_JOIN_PATH = 0x93,ERROR_PATH_BUSY = 0x94,ERROR_IS_SUBST_TARGET = 0x95,ERROR_SYSTEM_TRACE = 0x96,ERROR_INVALID_EVENT_COUNT = 0x97,ERROR_TOO_MANY_MUXWAITERS = 0x98,ERROR_INVALID_LIST_FORMAT = 0x99,ERROR_LABEL_TOO_LONG = 0x9A,ERROR_TOO_MANY_TCBS = 0x9B,ERROR_SIGNAL_REFUSED = 0x9C,ERROR_DISCARDED = 0x9D,ERROR_NOT_LOCKED = 0x9E,ERROR_BAD_THREADID_ADDR = 0x9F,ERROR_BAD_ARGUMENTS = 0xA0,ERROR_BAD_PATHNAME = 0xA1,ERROR_SIGNAL_PENDING = 0xA2,ERROR_MAX_THRDS_REACHED = 0xA4,ERROR_LOCK_FAILED = 0xA7,ERROR_BUSY = 0xAA,ERROR_CANCEL_VIOLATION = 0xAD,ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 0xAE,ERROR_INVALID_SEGMENT_NUMBER = 0xB4,ERROR_INVALID_ORDINAL = 0xB6,ERROR_ALREADY_EXISTS = 0xB7,ERROR_INVALID_FLAG_NUMBER = 0xBA,ERROR_SEM_NOT_FOUND = 0xBB,ERROR_INVALID_STARTING_CODESEG = 0xBC,ERROR_INVALID_STACKSEG = 0xBD,ERROR_INVALID_MODULETYPE = 0xBE,ERROR_INVALID_EXE_SIGNATURE = 0xBF,ERROR_EXE_MARKED_INVALID = 0xC0,ERROR_BAD_EXE_FORMAT = 0xC1,ERROR_ITERATED_DATA_EXCEEDS_64k = 0xC2,ERROR_INVALID_MINALLOCSIZE = 0xC3,ERROR_DYNLINK_FROM_INVALID_RING = 0xC4,ERROR_IOPL_NOT_ENABLED = 0xC5,ERROR_INVALID_SEGDPL = 0xC6,ERROR_AUTODATASEG_EXCEEDS_64k = 0xC7,ERROR_RING2SEG_MUST_BE_MOVABLE = 0xC8,ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 0xC9,ERROR_INFLOOP_IN_RELOC_CHAIN = 0xCA,ERROR_ENVVAR_NOT_FOUND = 0xCB,ERROR_NO_SIGNAL_SENT = 0xCD,ERROR_FILENAME_EXCED_RANGE = 0xCE,ERROR_RING2_STACK_IN_USE = 0xCF,ERROR_META_EXPANSION_TOO_LONG = 0xD0,ERROR_INVALID_SIGNAL_NUMBER = 0xD1,ERROR_THREAD_1_INACTIVE = 0xD2,ERROR_LOCKED = 0xD4,ERROR_TOO_MANY_MODULES = 0xD6,ERROR_NESTING_NOT_ALLOWED = 0xD7,ERROR_EXE_MACHINE_TYPE_MISMATCH = 0xD8,ERROR_BAD_PIPE = 0xE6,ERROR_PIPE_BUSY = 0xE7,ERROR_NO_DATA = 0xE8,ERROR_PIPE_NOT_CONNECTED = 0xE9,ERROR_MORE_DATA = 0xEA,ERROR_VC_DISCONNECTED = 0xF0,ERROR_INVALID_EA_NAME = 0xFE,ERROR_EA_LIST_INCONSISTENT = 0xFF,WAIT_TIMEOUT = 0x102,ERROR_NO_MORE_ITEMS = 0x103,ERROR_CANNOT_COPY = 0x10A,ERROR_DIRECTORY = 0x10B,ERROR_EAS_DIDNT_FIT = 0x113,ERROR_EA_FILE_CORRUPT = 0x114,ERROR_EA_TABLE_FULL = 0x115,ERROR_INVALID_EA_HANDLE = 0x116,ERROR_EAS_NOT_SUPPORTED = 0x11A,ERROR_NOT_OWNER = 0x120,ERROR_TOO_MANY_POSTS = 0x12A,ERROR_PARTIAL_COPY = 0x12B,ERROR_OPLOCK_NOT_GRANTED = 0x12C,ERROR_INVALID_OPLOCK_PROTOCOL = 0x12D,ERROR_DISK_TOO_FRAGMENTED = 0x12E,ERROR_DELETE_PENDING = 0x12F,ERROR_MR_MID_NOT_FOUND = 0x13D,ERROR_INVALID_ADDRESS = 0x1E7,ERROR_ARITHMETIC_OVERFLOW = 0x216,ERROR_PIPE_CONNECTED = 0x217,ERROR_PIPE_LISTENING = 0x218,ERROR_EA_ACCESS_DENIED = 0x3E2,ERROR_OPERATION_ABORTED = 0x3E3,ERROR_IO_INCOMPLETE = 0x3E4,ERROR_IO_PENDING = 0x3E5,ERROR_NOACCESS = 0x3E6,ERROR_SWAPERROR = 0x3E7,ERROR_STACK_OVERFLOW = 0x3E9,ERROR_INVALID_MESSAGE = 0x3EA,ERROR_CAN_NOT_COMPLETE = 0x3EB,ERROR_INVALID_FLAGS = 0x3EC,ERROR_UNRECOGNIZED_VOLUME = 0x3ED,ERROR_FILE_INVALID = 0x3EE,ERROR_FULLSCREEN_MODE = 0x3EF,ERROR_NO_TOKEN = 0x3F0,ERROR_BADDB = 0x3F1,ERROR_BADKEY = 0x3F2,ERROR_CANTOPEN = 0x3F3,ERROR_CANTREAD = 0x3F4,ERROR_CANTWRITE = 0x3F5,ERROR_REGISTRY_RECOVERED = 0x3F6,ERROR_REGISTRY_CORRUPT = 0x3F7,ERROR_REGISTRY_IO_FAILED = 0x3F8,ERROR_NOT_REGISTRY_FILE = 0x3F9,ERROR_KEY_DELETED = 0x3FA,ERROR_NO_LOG_SPACE = 0x3FB,ERROR_KEY_HAS_CHILDREN = 0x3FC,ERROR_CHILD_MUST_BE_VOLATILE = 0x3FD,ERROR_NOTIFY_ENUM_DIR = 0x3FE,ERROR_DEPENDENT_SERVICES_RUNNING = 0x41B,ERROR_INVALID_SERVICE_CONTROL = 0x41C,ERROR_SERVICE_REQUEST_TIMEOUT = 0x41D,ERROR_SERVICE_NO_THREAD = 0x41E,ERROR_SERVICE_DATABASE_LOCKED = 0x41F,ERROR_SERVICE_ALREADY_RUNNING = 0x420,ERROR_INVALID_SERVICE_ACCOUNT = 0x421,ERROR_SERVICE_DISABLED = 0x422,ERROR_CIRCULAR_DEPENDENCY = 0x423,ERROR_SERVICE_DOES_NOT_EXIST = 0x424,ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 0x425,ERROR_SERVICE_NOT_ACTIVE = 0x426,ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 0x427,ERROR_EXCEPTION_IN_SERVICE = 0x428,ERROR_DATABASE_DOES_NOT_EXIST = 0x429,ERROR_SERVICE_SPECIFIC_ERROR = 0x42A,ERROR_PROCESS_ABORTED = 0x42B,ERROR_SERVICE_DEPENDENCY_FAIL = 0x42C,ERROR_SERVICE_LOGON_FAILED = 0x42D,ERROR_SERVICE_START_HANG = 0x42E,ERROR_INVALID_SERVICE_LOCK = 0x42F,ERROR_SERVICE_MARKED_FOR_DELETE = 0x430,ERROR_SERVICE_EXISTS = 0x431,ERROR_ALREADY_RUNNING_LKG = 0x432,ERROR_SERVICE_DEPENDENCY_DELETED = 0x433,ERROR_BOOT_ALREADY_ACCEPTED = 0x434,ERROR_SERVICE_NEVER_STARTED = 0x435,ERROR_DUPLICATE_SERVICE_NAME = 0x436,ERROR_DIFFERENT_SERVICE_ACCOUNT = 0x437,ERROR_CANNOT_DETECT_DRIVER_FAILURE = 0x438,ERROR_CANNOT_DETECT_PROCESS_ABORT = 0x439,ERROR_NO_RECOVERY_PROGRAM = 0x43A,ERROR_SERVICE_NOT_IN_EXE = 0x43B,ERROR_NOT_SAFEBOOT_SERVICE = 0x43C,ERROR_END_OF_MEDIA = 0x44C,ERROR_FILEMARK_DETECTED = 0x44D,ERROR_BEGINNING_OF_MEDIA = 0x44E,ERROR_SETMARK_DETECTED = 0x44F,ERROR_NO_DATA_DETECTED = 0x450,ERROR_PARTITION_FAILURE = 0x451,ERROR_INVALID_BLOCK_LENGTH = 0x452,ERROR_DEVICE_NOT_PARTITIONED = 0x453,ERROR_UNABLE_TO_LOCK_MEDIA = 0x454,ERROR_UNABLE_TO_UNLOAD_MEDIA = 0x455,ERROR_MEDIA_CHANGED = 0x456,ERROR_BUS_RESET = 0x457,ERROR_NO_MEDIA_IN_DRIVE = 0x458,ERROR_NO_UNICODE_TRANSLATION = 0x459,ERROR_DLL_INIT_FAILED = 0x45A,ERROR_SHUTDOWN_IN_PROGRESS = 0x45B,ERROR_NO_SHUTDOWN_IN_PROGRESS = 0x45C,ERROR_IO_DEVICE = 0x45D,ERROR_SERIAL_NO_DEVICE = 0x45E,ERROR_IRQ_BUSY = 0x45F,ERROR_MORE_WRITES = 0x460,ERROR_COUNTER_TIMEOUT = 0x461,ERROR_FLOPPY_ID_MARK_NOT_FOUND = 0x462,ERROR_FLOPPY_WRONG_CYLINDER = 0x463,ERROR_FLOPPY_UNKNOWN_ERROR = 0x464,ERROR_FLOPPY_BAD_REGISTERS = 0x465,ERROR_DISK_RECALIBRATE_FAILED = 0x466,ERROR_DISK_OPERATION_FAILED = 0x467,ERROR_DISK_RESET_FAILED = 0x468,ERROR_EOM_OVERFLOW = 0x469,ERROR_NOT_ENOUGH_SERVER_MEMORY = 0x46A,ERROR_POSSIBLE_DEADLOCK = 0x46B,ERROR_MAPPED_ALIGNMENT = 0x46C,ERROR_SET_POWER_STATE_VETOED = 0x474,ERROR_SET_POWER_STATE_FAILED = 0x475,ERROR_TOO_MANY_LINKS = 0x476,ERROR_OLD_WIN_VERSION = 0x47E,ERROR_APP_WRONG_OS = 0x47F,ERROR_SINGLE_INSTANCE_APP = 0x480,ERROR_RMODE_APP = 0x481,ERROR_INVALID_DLL = 0x482,ERROR_NO_ASSOCIATION = 0x483,ERROR_DDE_FAIL = 0x484,ERROR_DLL_NOT_FOUND = 0x485,ERROR_NO_MORE_USER_HANDLES = 0x486,ERROR_MESSAGE_SYNC_ONLY = 0x487,ERROR_SOURCE_ELEMENT_EMPTY = 0x488,ERROR_DESTINATION_ELEMENT_FULL = 0x489,ERROR_ILLEGAL_ELEMENT_ADDRESS = 0x48A,ERROR_MAGAZINE_NOT_PRESENT = 0x48B,ERROR_DEVICE_REINITIALIZATION_NEEDED = 0x48C,ERROR_DEVICE_REQUIRES_CLEANING = 0x48D,ERROR_DEVICE_DOOR_OPEN = 0x48E,ERROR_DEVICE_NOT_CONNECTED = 0x48F,ERROR_NOT_FOUND = 0x490,ERROR_NO_MATCH = 0x491,ERROR_SET_NOT_FOUND = 0x492,ERROR_POINT_NOT_FOUND = 0x493,ERROR_NO_TRACKING_SERVICE = 0x494,ERROR_NO_VOLUME_ID = 0x495,ERROR_UNABLE_TO_REMOVE_REPLACED = 0x497,ERROR_UNABLE_TO_MOVE_REPLACEMENT = 0x498,ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 0x499,ERROR_JOURNAL_DELETE_IN_PROGRESS = 0x49A,ERROR_JOURNAL_NOT_ACTIVE = 0x49B,ERROR_POTENTIAL_FILE_FOUND = 0x49C,ERROR_JOURNAL_ENTRY_DELETED = 0x49D,ERROR_BAD_DEVICE = 0x4B0,ERROR_CONNECTION_UNAVAIL = 0x4B1,ERROR_DEVICE_ALREADY_REMEMBERED = 0x4B2,ERROR_NO_NET_OR_BAD_PATH = 0x4B3,ERROR_BAD_PROVIDER = 0x4B4,ERROR_CANNOT_OPEN_PROFILE = 0x4B5,ERROR_BAD_PROFILE = 0x4B6,ERROR_NOT_CONTAINER = 0x4B7,ERROR_EXTENDED_ERROR = 0x4B8,ERROR_INVALID_GROUPNAME = 0x4B9,ERROR_INVALID_COMPUTERNAME = 0x4BA,ERROR_INVALID_EVENTNAME = 0x4BB,ERROR_INVALID_DOMAINNAME = 0x4BC,ERROR_INVALID_SERVICENAME = 0x4BD,ERROR_INVALID_NETNAME = 0x4BE,ERROR_INVALID_SHARENAME = 0x4BF,ERROR_INVALID_PASSWORDNAME = 0x4C0,ERROR_INVALID_MESSAGENAME = 0x4C1,ERROR_INVALID_MESSAGEDEST = 0x4C2,ERROR_SESSION_CREDENTIAL_CONFLICT = 0x4C3,ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 0x4C4,ERROR_DUP_DOMAINNAME = 0x4C5,ERROR_NO_NETWORK = 0x4C6,ERROR_CANCELLED = 0x4C7,ERROR_USER_MAPPED_FILE = 0x4C8,ERROR_CONNECTION_REFUSED = 0x4C9,ERROR_GRACEFUL_DISCONNECT = 0x4CA,ERROR_ADDRESS_ALREADY_ASSOCIATED = 0x4CB,ERROR_ADDRESS_NOT_ASSOCIATED = 0x4CC,ERROR_CONNECTION_INVALID = 0x4CD,ERROR_CONNECTION_ACTIVE = 0x4CE,ERROR_NETWORK_UNREACHABLE = 0x4CF,ERROR_HOST_UNREACHABLE = 0x4D0,ERROR_PROTOCOL_UNREACHABLE = 0x4D1,ERROR_PORT_UNREACHABLE = 0x4D2,ERROR_REQUEST_ABORTED = 0x4D3,ERROR_CONNECTION_ABORTED = 0x4D4,ERROR_RETRY = 0x4D5,ERROR_CONNECTION_COUNT_LIMIT = 0x4D6,ERROR_LOGIN_TIME_RESTRICTION = 0x4D7,ERROR_LOGIN_WKSTA_RESTRICTION = 0x4D8,ERROR_INCORRECT_ADDRESS = 0x4D9,ERROR_ALREADY_REGISTERED = 0x4DA,ERROR_SERVICE_NOT_FOUND = 0x4DB,ERROR_NOT_AUTHENTICATED = 0x4DC,ERROR_NOT_LOGGED_ON = 0x4DD,ERROR_CONTINUE = 0x4DE,ERROR_ALREADY_INITIALIZED = 0x4DF,ERROR_NO_MORE_DEVICES = 0x4E0,ERROR_NO_SUCH_SITE = 0x4E1,ERROR_DOMAIN_CONTROLLER_EXISTS = 0x4E2,ERROR_ONLY_IF_CONNECTED = 0x4E3,ERROR_OVERRIDE_NOCHANGES = 0x4E4,ERROR_BAD_USER_PROFILE = 0x4E5,ERROR_NOT_SUPPORTED_ON_SBS = 0x4E6,ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 0x4E7,ERROR_HOST_DOWN = 0x4E8,ERROR_NON_ACCOUNT_SID = 0x4E9,ERROR_NON_DOMAIN_SID = 0x4EA,ERROR_APPHELP_BLOCK = 0x4EB,ERROR_ACCESS_DISABLED_BY_POLICY = 0x4EC,ERROR_REG_NAT_CONSUMPTION = 0x4ED,ERROR_CSCSHARE_OFFLINE = 0x4EE,ERROR_PKINIT_FAILURE = 0x4EF,ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 0x4F0,ERROR_DOWNGRADE_DETECTED = 0x4F1,SEC_E_SMARTCARD_CERT_REVOKED = 0x4F2,SEC_E_ISSUING_CA_UNTRUSTED = 0x4F3,SEC_E_REVOCATION_OFFLINE_C = 0x4F4,SEC_E_PKINIT_CLIENT_FAILURE = 0x4F5,SEC_E_SMARTCARD_CERT_EXPIRED = 0x4F6,ERROR_MACHINE_LOCKED = 0x4F7,ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 0x4F9,ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 0x4FA,ERROR_DRIVER_BLOCKED = 0x4FB,ERROR_INVALID_IMPORT_OF_NON_DLL = 0x4FC,ERROR_NOT_ALL_ASSIGNED = 0x514,ERROR_SOME_NOT_MAPPED = 0x515,ERROR_NO_QUOTAS_FOR_ACCOUNT = 0x516,ERROR_LOCAL_USER_SESSION_KEY = 0x517,ERROR_NULL_LM_PASSWORD = 0x518,ERROR_UNKNOWN_REVISION = 0x519,ERROR_REVISION_MISMATCH = 0x51A,ERROR_INVALID_OWNER = 0x51B,ERROR_INVALID_PRIMARY_GROUP = 0x51C,ERROR_NO_IMPERSONATION_TOKEN = 0x51D,ERROR_CANT_DISABLE_MANDATORY = 0x51E,ERROR_NO_LOGON_SERVERS = 0x51F,ERROR_NO_SUCH_LOGON_SESSION = 0x520,ERROR_NO_SUCH_PRIVILEGE = 0x521,ERROR_PRIVILEGE_NOT_HELD = 0x522,ERROR_INVALID_ACCOUNT_NAME = 0x523,ERROR_USER_EXISTS = 0x524,ERROR_NO_SUCH_USER = 0x525,ERROR_GROUP_EXISTS = 0x526,ERROR_NO_SUCH_GROUP = 0x527,ERROR_MEMBER_IN_GROUP = 0x528,ERROR_MEMBER_NOT_IN_GROUP = 0x529,ERROR_LAST_ADMIN = 0x52A,ERROR_WRONG_PASSWORD = 0x52B,ERROR_ILL_FORMED_PASSWORD = 0x52C,ERROR_PASSWORD_RESTRICTION = 0x52D,ERROR_LOGON_FAILURE = 0x52E,ERROR_ACCOUNT_RESTRICTION = 0x52F,ERROR_INVALID_LOGON_HOURS = 0x530,ERROR_INVALID_WORKSTATION = 0x531,ERROR_PASSWORD_EXPIRED = 0x532,ERROR_ACCOUNT_DISABLED = 0x533,ERROR_NONE_MAPPED = 0x534,ERROR_TOO_MANY_LUIDS_REQUESTED = 0x535,ERROR_LUIDS_EXHAUSTED = 0x536,ERROR_INVALID_SUB_AUTHORITY = 0x537,ERROR_INVALID_ACL = 0x538,ERROR_INVALID_SID = 0x539,ERROR_INVALID_SECURITY_DESCR = 0x53A,ERROR_BAD_INHERITANCE_ACL = 0x53C,ERROR_SERVER_DISABLED = 0x53D,ERROR_SERVER_NOT_DISABLED = 0x53E,ERROR_INVALID_ID_AUTHORITY = 0x53F,ERROR_ALLOTTED_SPACE_EXCEEDED = 0x540,ERROR_INVALID_GROUP_ATTRIBUTES = 0x541,ERROR_BAD_IMPERSONATION_LEVEL = 0x542,ERROR_CANT_OPEN_ANONYMOUS = 0x543,ERROR_BAD_VALIDATION_CLASS = 0x544,ERROR_BAD_TOKEN_TYPE = 0x545,ERROR_NO_SECURITY_ON_OBJECT = 0x546,ERROR_CANT_ACCESS_DOMAIN_INFO = 0x547,ERROR_INVALID_SERVER_STATE = 0x548,ERROR_INVALID_DOMAIN_STATE = 0x549,ERROR_INVALID_DOMAIN_ROLE = 0x54A,ERROR_NO_SUCH_DOMAIN = 0x54B,ERROR_DOMAIN_EXISTS = 0x54C,ERROR_DOMAIN_LIMIT_EXCEEDED = 0x54D,ERROR_INTERNAL_DB_CORRUPTION = 0x54E,ERROR_INTERNAL_ERROR = 0x54F,ERROR_GENERIC_NOT_MAPPED = 0x550,ERROR_BAD_DESCRIPTOR_FORMAT = 0x551,ERROR_NOT_LOGON_PROCESS = 0x552,ERROR_LOGON_SESSION_EXISTS = 0x553,ERROR_NO_SUCH_PACKAGE = 0x554,ERROR_BAD_LOGON_SESSION_STATE = 0x555,ERROR_LOGON_SESSION_COLLISION = 0x556,ERROR_INVALID_LOGON_TYPE = 0x557,ERROR_CANNOT_IMPERSONATE = 0x558,ERROR_RXACT_INVALID_STATE = 0x559,ERROR_RXACT_COMMIT_FAILURE = 0x55A,ERROR_SPECIAL_ACCOUNT = 0x55B,ERROR_SPECIAL_GROUP = 0x55C,ERROR_SPECIAL_USER = 0x55D,ERROR_MEMBERS_PRIMARY_GROUP = 0x55E,ERROR_TOKEN_ALREADY_IN_USE = 0x55F,ERROR_NO_SUCH_ALIAS = 0x560,ERROR_MEMBER_NOT_IN_ALIAS = 0x561,ERROR_MEMBER_IN_ALIAS = 0x562,ERROR_ALIAS_EXISTS = 0x563,ERROR_LOGON_NOT_GRANTED = 0x564,ERROR_TOO_MANY_SECRETS = 0x565,ERROR_SECRET_TOO_LONG = 0x566,ERROR_INTERNAL_DB_ERROR = 0x567,ERROR_TOO_MANY_CONTEXT_IDS = 0x568,ERROR_LOGON_TYPE_NOT_GRANTED = 0x569,ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 0x56A,ERROR_NO_SUCH_MEMBER = 0x56B,ERROR_INVALID_MEMBER = 0x56C,ERROR_TOO_MANY_SIDS = 0x56D,ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 0x56E,ERROR_NO_INHERITANCE = 0x56F,ERROR_FILE_CORRUPT = 0x570,ERROR_DISK_CORRUPT = 0x571,ERROR_NO_USER_SESSION_KEY = 0x572,ERROR_LICENSE_QUOTA_EXCEEDED = 0x573,ERROR_WRONG_TARGET_NAME = 0x574,ERROR_MUTUAL_AUTH_FAILED = 0x575,ERROR_TIME_SKEW = 0x576,ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 0x577,ERROR_INVALID_WINDOW_HANDLE = 0x578,ERROR_INVALID_MENU_HANDLE = 0x579,ERROR_INVALID_CURSOR_HANDLE = 0x57A,ERROR_INVALID_ACCEL_HANDLE = 0x57B,ERROR_INVALID_HOOK_HANDLE = 0x57C,ERROR_INVALID_DWP_HANDLE = 0x57D,ERROR_TLW_WITH_WSCHILD = 0x57E,ERROR_CANNOT_FIND_WND_CLASS = 0x57F,ERROR_WINDOW_OF_OTHER_THREAD = 0x580,ERROR_HOTKEY_ALREADY_REGISTERED = 0x581,ERROR_CLASS_ALREADY_EXISTS = 0x582,ERROR_CLASS_DOES_NOT_EXIST = 0x583,ERROR_CLASS_HAS_WINDOWS = 0x584,ERROR_INVALID_INDEX = 0x585,ERROR_INVALID_ICON_HANDLE = 0x586,ERROR_PRIVATE_DIALOG_INDEX = 0x587,ERROR_LISTBOX_ID_NOT_FOUND = 0x588,ERROR_NO_WILDCARD_CHARACTERS = 0x589,ERROR_CLIPBOARD_NOT_OPEN = 0x58A,ERROR_HOTKEY_NOT_REGISTERED = 0x58B,ERROR_WINDOW_NOT_DIALOG = 0x58C,ERROR_CONTROL_ID_NOT_FOUND = 0x58D,ERROR_INVALID_COMBOBOX_MESSAGE = 0x58E,ERROR_WINDOW_NOT_COMBOBOX = 0x58F,ERROR_INVALID_EDIT_HEIGHT = 0x590,ERROR_DC_NOT_FOUND = 0x591,ERROR_INVALID_HOOK_FILTER = 0x592,ERROR_INVALID_FILTER_PROC = 0x593,ERROR_HOOK_NEEDS_HMOD = 0x594,ERROR_GLOBAL_ONLY_HOOK = 0x595,ERROR_JOURNAL_HOOK_SET = 0x596,ERROR_HOOK_NOT_INSTALLED = 0x597,ERROR_INVALID_LB_MESSAGE = 0x598,ERROR_SETCOUNT_ON_BAD_LB = 0x599,ERROR_LB_WITHOUT_TABSTOPS = 0x59A,ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 0x59B,ERROR_CHILD_WINDOW_MENU = 0x59C,ERROR_NO_SYSTEM_MENU = 0x59D,ERROR_INVALID_MSGBOX_STYLE = 0x59E,ERROR_INVALID_SPI_VALUE = 0x59F,ERROR_SCREEN_ALREADY_LOCKED = 0x5A0,ERROR_HWNDS_HAVE_DIFF_PARENT = 0x5A1,ERROR_NOT_CHILD_WINDOW = 0x5A2,ERROR_INVALID_GW_COMMAND = 0x5A3,ERROR_INVALID_THREAD_ID = 0x5A4,ERROR_NON_MDICHILD_WINDOW = 0x5A5,ERROR_POPUP_ALREADY_ACTIVE = 0x5A6,ERROR_NO_SCROLLBARS = 0x5A7,ERROR_INVALID_SCROLLBAR_RANGE = 0x5A8,ERROR_INVALID_SHOWWIN_COMMAND = 0x5A9,ERROR_NO_SYSTEM_RESOURCES = 0x5AA,ERROR_NONPAGED_SYSTEM_RESOURCES = 0x5AB,ERROR_PAGED_SYSTEM_RESOURCES = 0x5AC,ERROR_WORKING_SET_QUOTA = 0x5AD,ERROR_PAGEFILE_QUOTA = 0x5AE,ERROR_COMMITMENT_LIMIT = 0x5AF,ERROR_MENU_ITEM_NOT_FOUND = 0x5B0,ERROR_INVALID_KEYBOARD_HANDLE = 0x5B1,ERROR_HOOK_TYPE_NOT_ALLOWED = 0x5B2,ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 0x5B3,ERROR_TIMEOUT = 0x5B4,ERROR_INVALID_MONITOR_HANDLE = 0x5B5,ERROR_EVENTLOG_FILE_CORRUPT = 0x5DC,ERROR_EVENTLOG_CANT_START = 0x5DD,ERROR_LOG_FILE_FULL = 0x5DE,ERROR_EVENTLOG_FILE_CHANGED = 0x5DF,ERROR_INSTALL_SERVICE_FAILURE = 0x641,ERROR_INSTALL_USEREXIT = 0x642,ERROR_INSTALL_FAILURE = 0x643,ERROR_INSTALL_SUSPEND = 0x644,ERROR_UNKNOWN_PRODUCT = 0x645,ERROR_UNKNOWN_FEATURE = 0x646,ERROR_UNKNOWN_COMPONENT = 0x647,ERROR_UNKNOWN_PROPERTY = 0x648,ERROR_INVALID_HANDLE_STATE = 0x649,ERROR_BAD_CONFIGURATION = 0x64A,ERROR_INDEX_ABSENT = 0x64B,ERROR_INSTALL_SOURCE_ABSENT = 0x64C,ERROR_INSTALL_PACKAGE_VERSION = 0x64D,ERROR_PRODUCT_UNINSTALLED = 0x64E,ERROR_BAD_QUERY_SYNTAX = 0x64F,ERROR_INVALID_FIELD = 0x650,ERROR_DEVICE_REMOVED = 0x651,ERROR_INSTALL_ALREADY_RUNNING = 0x652,ERROR_INSTALL_PACKAGE_OPEN_FAILED = 0x653,ERROR_INSTALL_PACKAGE_INVALID = 0x654,ERROR_INSTALL_UI_FAILURE = 0x655,ERROR_INSTALL_LOG_FAILURE = 0x656,ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 0x657,ERROR_INSTALL_TRANSFORM_FAILURE = 0x658,ERROR_INSTALL_PACKAGE_REJECTED = 0x659,ERROR_FUNCTION_NOT_CALLED = 0x65A,ERROR_FUNCTION_FAILED = 0x65B,ERROR_INVALID_TABLE = 0x65C,ERROR_DATATYPE_MISMATCH = 0x65D,ERROR_UNSUPPORTED_TYPE = 0x65E,ERROR_CREATE_FAILED = 0x65F,ERROR_INSTALL_TEMP_UNWRITABLE = 0x660,ERROR_INSTALL_PLATFORM_UNSUPPORTED = 0x661,ERROR_INSTALL_NOTUSED = 0x662,ERROR_PATCH_PACKAGE_OPEN_FAILED = 0x663,ERROR_PATCH_PACKAGE_INVALID = 0x664,ERROR_PATCH_PACKAGE_UNSUPPORTED = 0x665,ERROR_PRODUCT_VERSION = 0x666,ERROR_INVALID_COMMAND_LINE = 0x667,ERROR_INSTALL_REMOTE_DISALLOWED = 0x668,ERROR_SUCCESS_REBOOT_INITIATED = 0x669,ERROR_PATCH_TARGET_NOT_FOUND = 0x66A,ERROR_PATCH_PACKAGE_REJECTED = 0x66B,ERROR_INSTALL_TRANSFORM_REJECTED = 0x66C,RPC_S_INVALID_STRING_BINDING = 0x6A4,RPC_S_WRONG_KIND_OF_BINDING = 0x6A5,RPC_S_INVALID_BINDING = 0x6A6,RPC_S_PROTSEQ_NOT_SUPPORTED = 0x6A7,RPC_S_INVALID_RPC_PROTSEQ = 0x6A8,RPC_S_INVALID_STRING_UUID = 0x6A9,RPC_S_INVALID_ENDPOINT_FORMAT = 0x6AA,RPC_S_INVALID_NET_ADDR = 0x6AB,RPC_S_NO_ENDPOINT_FOUND = 0x6AC,RPC_S_INVALID_TIMEOUT = 0x6AD,RPC_S_OBJECT_NOT_FOUND = 0x6AE,RPC_S_ALREADY_REGISTERED = 0x6AF,RPC_S_TYPE_ALREADY_REGISTERED = 0x6B0,RPC_S_ALREADY_LISTENING = 0x6B1,RPC_S_NO_PROTSEQS_REGISTERED = 0x6B2,RPC_S_NOT_LISTENING = 0x6B3,RPC_S_UNKNOWN_MGR_TYPE = 0x6B4,RPC_S_UNKNOWN_IF = 0x6B5,RPC_S_NO_BINDINGS = 0x6B6,RPC_S_NO_PROTSEQS = 0x6B7,RPC_S_CANT_CREATE_ENDPOINT = 0x6B8,RPC_S_OUT_OF_RESOURCES = 0x6B9,RPC_S_SERVER_UNAVAILABLE = 0x6BA,RPC_S_SERVER_TOO_BUSY = 0x6BB,RPC_S_INVALID_NETWORK_OPTIONS = 0x6BC,RPC_S_NO_CALL_ACTIVE = 0x6BD,RPC_S_CALL_FAILED = 0x6BE,RPC_S_CALL_FAILED_DNE = 0x6BF,RPC_S_PROTOCOL_ERROR = 0x6C0,RPC_S_UNSUPPORTED_TRANS_SYN = 0x6C2,RPC_S_UNSUPPORTED_TYPE = 0x6C4,RPC_S_INVALID_TAG = 0x6C5,RPC_S_INVALID_BOUND = 0x6C6,RPC_S_NO_ENTRY_NAME = 0x6C7,RPC_S_INVALID_NAME_SYNTAX = 0x6C8,RPC_S_UNSUPPORTED_NAME_SYNTAX = 0x6C9,RPC_S_UUID_NO_ADDRESS = 0x6CB,RPC_S_DUPLICATE_ENDPOINT = 0x6CC,RPC_S_UNKNOWN_AUTHN_TYPE = 0x6CD,RPC_S_MAX_CALLS_TOO_SMALL = 0x6CE,RPC_S_STRING_TOO_LONG = 0x6CF,RPC_S_PROTSEQ_NOT_FOUND = 0x6D0,RPC_S_PROCNUM_OUT_OF_RANGE = 0x6D1,RPC_S_BINDING_HAS_NO_AUTH = 0x6D2,RPC_S_UNKNOWN_AUTHN_SERVICE = 0x6D3,RPC_S_UNKNOWN_AUTHN_LEVEL = 0x6D4,RPC_S_INVALID_AUTH_IDENTITY = 0x6D5,RPC_S_UNKNOWN_AUTHZ_SERVICE = 0x6D6,EPT_S_INVALID_ENTRY = 0x6D7,EPT_S_CANT_PERFORM_OP = 0x6D8,EPT_S_NOT_REGISTERED = 0x6D9,RPC_S_NOTHING_TO_EXPORT = 0x6DA,RPC_S_INCOMPLETE_NAME = 0x6DB,RPC_S_INVALID_VERS_OPTION = 0x6DC,RPC_S_NO_MORE_MEMBERS = 0x6DD,RPC_S_NOT_ALL_OBJS_UNEXPORTED = 0x6DE,RPC_S_INTERFACE_NOT_FOUND = 0x6DF,RPC_S_ENTRY_ALREADY_EXISTS = 0x6E0,RPC_S_ENTRY_NOT_FOUND = 0x6E1,RPC_S_NAME_SERVICE_UNAVAILABLE = 0x6E2,RPC_S_INVALID_NAF_ID = 0x6E3,RPC_S_CANNOT_SUPPORT = 0x6E4,RPC_S_NO_CONTEXT_AVAILABLE = 0x6E5,RPC_S_INTERNAL_ERROR = 0x6E6,RPC_S_ZERO_DIVIDE = 0x6E7,RPC_S_ADDRESS_ERROR = 0x6E8,RPC_S_FP_DIV_ZERO = 0x6E9,RPC_S_FP_UNDERFLOW = 0x6EA,RPC_S_FP_OVERFLOW = 0x6EB,RPC_X_NO_MORE_ENTRIES = 0x6EC,RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 0x6ED,RPC_X_SS_CHAR_TRANS_SHORT_FILE = 0x6EE,RPC_X_SS_IN_NULL_CONTEXT = 0x6EF,RPC_X_SS_CONTEXT_DAMAGED = 0x6F1,RPC_X_SS_HANDLES_MISMATCH = 0x6F2,RPC_X_SS_CANNOT_GET_CALL_HANDLE = 0x6F3,RPC_X_NULL_REF_POINTER = 0x6F4,RPC_X_ENUM_VALUE_OUT_OF_RANGE = 0x6F5,RPC_X_BYTE_COUNT_TOO_SMALL = 0x6F6,RPC_X_BAD_STUB_DATA = 0x6F7,ERROR_INVALID_USER_BUFFER = 0x6F8,ERROR_UNRECOGNIZED_MEDIA = 0x6F9,ERROR_NO_TRUST_LSA_SECRET = 0x6FA,ERROR_NO_TRUST_SAM_ACCOUNT = 0x6FB,ERROR_TRUSTED_DOMAIN_FAILURE = 0x6FC,ERROR_TRUSTED_RELATIONSHIP_FAILURE = 0x6FD,ERROR_TRUST_FAILURE = 0x6FE,RPC_S_CALL_IN_PROGRESS = 0x6FF,ERROR_NETLOGON_NOT_STARTED = 0x700,ERROR_ACCOUNT_EXPIRED = 0x701,ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 0x702,ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 0x703,ERROR_UNKNOWN_PORT = 0x704,ERROR_UNKNOWN_PRINTER_DRIVER = 0x705,ERROR_UNKNOWN_PRINTPROCESSOR = 0x706,ERROR_INVALID_SEPARATOR_FILE = 0x707,ERROR_INVALID_PRIORITY = 0x708,ERROR_INVALID_PRINTER_NAME = 0x709,ERROR_PRINTER_ALREADY_EXISTS = 0x70A,ERROR_INVALID_PRINTER_COMMAND = 0x70B,ERROR_INVALID_DATATYPE = 0x70C,ERROR_INVALID_ENVIRONMENT = 0x70D,RPC_S_NO_MORE_BINDINGS = 0x70E,ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0x70F,ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0x710,ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 0x711,ERROR_DOMAIN_TRUST_INCONSISTENT = 0x712,ERROR_SERVER_HAS_OPEN_HANDLES = 0x713,ERROR_RESOURCE_DATA_NOT_FOUND = 0x714,ERROR_RESOURCE_TYPE_NOT_FOUND = 0x715,ERROR_RESOURCE_NAME_NOT_FOUND = 0x716,ERROR_RESOURCE_LANG_NOT_FOUND = 0x717,ERROR_NOT_ENOUGH_QUOTA = 0x718,RPC_S_NO_INTERFACES = 0x719,RPC_S_CALL_CANCELLED = 0x71A,RPC_S_BINDING_INCOMPLETE = 0x71B,RPC_S_COMM_FAILURE = 0x71C,RPC_S_UNSUPPORTED_AUTHN_LEVEL = 0x71D,RPC_S_NO_PRINC_NAME = 0x71E,RPC_S_NOT_RPC_ERROR = 0x71F,RPC_S_UUID_LOCAL_ONLY = 0x720,RPC_S_SEC_PKG_ERROR = 0x721,RPC_S_NOT_CANCELLED = 0x722,RPC_X_INVALID_ES_ACTION = 0x723,RPC_X_WRONG_ES_VERSION = 0x724,RPC_X_WRONG_STUB_VERSION = 0x725,RPC_X_INVALID_PIPE_OBJECT = 0x726,RPC_X_WRONG_PIPE_ORDER = 0x727,RPC_X_WRONG_PIPE_VERSION = 0x728,RPC_S_GROUP_MEMBER_NOT_FOUND = 0x76A,EPT_S_CANT_CREATE = 0x76B,RPC_S_INVALID_OBJECT = 0x76C,ERROR_INVALID_TIME = 0x76D,ERROR_INVALID_FORM_NAME = 0x76E,ERROR_INVALID_FORM_SIZE = 0x76F,ERROR_ALREADY_WAITING = 0x770,ERROR_PRINTER_DELETED = 0x771,ERROR_INVALID_PRINTER_STATE = 0x772,ERROR_PASSWORD_MUST_CHANGE = 0x773,ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 0x774,ERROR_ACCOUNT_LOCKED_OUT = 0x775,OR_INVALID_OXID = 0x776,OR_INVALID_OID = 0x777,OR_INVALID_SET = 0x778,RPC_S_SEND_INCOMPLETE = 0x779,RPC_S_INVALID_ASYNC_HANDLE = 0x77A,RPC_S_INVALID_ASYNC_CALL = 0x77B,RPC_X_PIPE_CLOSED = 0x77C,RPC_X_PIPE_DISCIPLINE_ERROR = 0x77D,RPC_X_PIPE_EMPTY = 0x77E,ERROR_NO_SITENAME = 0x77F,ERROR_CANT_ACCESS_FILE = 0x780,ERROR_CANT_RESOLVE_FILENAME = 0x781,RPC_S_ENTRY_TYPE_MISMATCH = 0x782,RPC_S_NOT_ALL_OBJS_EXPORTED = 0x783,RPC_S_INTERFACE_NOT_EXPORTED = 0x784,RPC_S_PROFILE_NOT_ADDED = 0x785,RPC_S_PRF_ELT_NOT_ADDED = 0x786,RPC_S_PRF_ELT_NOT_REMOVED = 0x787,RPC_S_GRP_ELT_NOT_ADDED = 0x788,RPC_S_GRP_ELT_NOT_REMOVED = 0x789,ERROR_KM_DRIVER_BLOCKED = 0x78A,ERROR_CONTEXT_EXPIRED = 0x78B,ERROR_INVALID_PIXEL_FORMAT = 0x7D0,ERROR_BAD_DRIVER = 0x7D1,ERROR_INVALID_WINDOW_STYLE = 0x7D2,ERROR_METAFILE_NOT_SUPPORTED = 0x7D3,ERROR_TRANSFORM_NOT_SUPPORTED = 0x7D4,ERROR_CLIPPING_NOT_SUPPORTED = 0x7D5,ERROR_INVALID_CMM = 0x7DA,ERROR_INVALID_PROFILE = 0x7DB,ERROR_TAG_NOT_FOUND = 0x7DC,ERROR_TAG_NOT_PRESENT = 0x7DD,ERROR_DUPLICATE_TAG = 0x7DE,ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 0x7DF,ERROR_PROFILE_NOT_FOUND = 0x7E0,ERROR_INVALID_COLORSPACE = 0x7E1,ERROR_ICM_NOT_ENABLED = 0x7E2,ERROR_DELETING_ICM_XFORM = 0x7E3,ERROR_INVALID_TRANSFORM = 0x7E4,ERROR_COLORSPACE_MISMATCH = 0x7E5,ERROR_INVALID_COLORINDEX = 0x7E6,ERROR_CONNECTED_OTHER_PASSWORD = 0x83C,ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 0x83D,ERROR_BAD_USERNAME = 0x89A,ERROR_NOT_CONNECTED = 0x8CA,ERROR_OPEN_FILES = 0x961,ERROR_ACTIVE_CONNECTIONS = 0x962,ERROR_DEVICE_IN_USE = 0x964,ERROR_UNKNOWN_PRINT_MONITOR = 0xBB8,ERROR_PRINTER_DRIVER_IN_USE = 0xBB9,ERROR_SPOOL_FILE_NOT_FOUND = 0xBBA,ERROR_SPL_NO_STARTDOC = 0xBBB,ERROR_SPL_NO_ADDJOB = 0xBBC,ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 0xBBD,ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 0xBBE,ERROR_INVALID_PRINT_MONITOR = 0xBBF,ERROR_PRINT_MONITOR_IN_USE = 0xBC0,ERROR_PRINTER_HAS_JOBS_QUEUED = 0xBC1,ERROR_SUCCESS_REBOOT_REQUIRED = 0xBC2,ERROR_SUCCESS_RESTART_REQUIRED = 0xBC3,ERROR_PRINTER_NOT_FOUND = 0xBC4,ERROR_PRINTER_DRIVER_WARNED = 0xBC5,ERROR_PRINTER_DRIVER_BLOCKED = 0xBC6,ERROR_WINS_INTERNAL = 0xFA0,ERROR_CAN_NOT_DEL_LOCAL_WINS = 0xFA1,ERROR_STATIC_INIT = 0xFA2,ERROR_INC_BACKUP = 0xFA3,ERROR_FULL_BACKUP = 0xFA4,ERROR_REC_NON_EXISTENT = 0xFA5,ERROR_RPL_NOT_ALLOWED = 0xFA6,ERROR_DHCP_ADDRESS_CONFLICT = 0x1004,ERROR_WMI_GUID_NOT_FOUND = 0x1068,ERROR_WMI_INSTANCE_NOT_FOUND = 0x1069,ERROR_WMI_ITEMID_NOT_FOUND = 0x106A,ERROR_WMI_TRY_AGAIN = 0x106B,ERROR_WMI_DP_NOT_FOUND = 0x106C,ERROR_WMI_UNRESOLVED_INSTANCE_REF = 0x106D,ERROR_WMI_ALREADY_ENABLED = 0x106E,ERROR_WMI_GUID_DISCONNECTED = 0x106F,ERROR_WMI_SERVER_UNAVAILABLE = 0x1070,ERROR_WMI_DP_FAILED = 0x1071,ERROR_WMI_INVALID_MOF = 0x1072,ERROR_WMI_INVALID_REGINFO = 0x1073,ERROR_WMI_ALREADY_DISABLED = 0x1074,ERROR_WMI_READ_ONLY = 0x1075,ERROR_WMI_SET_FAILURE = 0x1076,ERROR_INVALID_MEDIA = 0x10CC,ERROR_INVALID_LIBRARY = 0x10CD,ERROR_INVALID_MEDIA_POOL = 0x10CE,ERROR_DRIVE_MEDIA_MISMATCH = 0x10CF,ERROR_MEDIA_OFFLINE = 0x10D0,ERROR_LIBRARY_OFFLINE = 0x10D1,ERROR_EMPTY = 0x10D2,ERROR_NOT_EMPTY = 0x10D3,ERROR_MEDIA_UNAVAILABLE = 0x10D4,ERROR_RESOURCE_DISABLED = 0x10D5,ERROR_INVALID_CLEANER = 0x10D6,ERROR_UNABLE_TO_CLEAN = 0x10D7,ERROR_OBJECT_NOT_FOUND = 0x10D8,ERROR_DATABASE_FAILURE = 0x10D9,ERROR_DATABASE_FULL = 0x10DA,ERROR_MEDIA_INCOMPATIBLE = 0x10DB,ERROR_RESOURCE_NOT_PRESENT = 0x10DC,ERROR_INVALID_OPERATION = 0x10DD,ERROR_MEDIA_NOT_AVAILABLE = 0x10DE,ERROR_DEVICE_NOT_AVAILABLE = 0x10DF,ERROR_REQUEST_REFUSED = 0x10E0,ERROR_INVALID_DRIVE_OBJECT = 0x10E1,ERROR_LIBRARY_FULL = 0x10E2,ERROR_MEDIUM_NOT_ACCESSIBLE = 0x10E3,ERROR_UNABLE_TO_LOAD_MEDIUM = 0x10E4,ERROR_UNABLE_TO_INVENTORY_DRIVE = 0x10E5,ERROR_UNABLE_TO_INVENTORY_SLOT = 0x10E6,ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 0x10E7,ERROR_TRANSPORT_FULL = 0x10E8,ERROR_CONTROLLING_IEPORT = 0x10E9,ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 0x10EA,ERROR_CLEANER_SLOT_SET = 0x10EB,ERROR_CLEANER_SLOT_NOT_SET = 0x10EC,ERROR_CLEANER_CARTRIDGE_SPENT = 0x10ED,ERROR_UNEXPECTED_OMID = 0x10EE,ERROR_CANT_DELETE_LAST_ITEM = 0x10EF,ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 0x10F0,ERROR_VOLUME_CONTAINS_SYS_FILES = 0x10F1,ERROR_INDIGENOUS_TYPE = 0x10F2,ERROR_NO_SUPPORTING_DRIVES = 0x10F3,ERROR_CLEANER_CARTRIDGE_INSTALLED = 0x10F4,ERROR_FILE_OFFLINE = 0x10FE,ERROR_REMOTE_STORAGE_NOT_ACTIVE = 0x10FF,ERROR_REMOTE_STORAGE_MEDIA_ERROR = 0x1100,ERROR_NOT_A_REPARSE_POINT = 0x1126,ERROR_REPARSE_ATTRIBUTE_CONFLICT = 0x1127,ERROR_INVALID_REPARSE_DATA = 0x1128,ERROR_REPARSE_TAG_INVALID = 0x1129,ERROR_REPARSE_TAG_MISMATCH = 0x112A,ERROR_VOLUME_NOT_SIS_ENABLED = 0x1194,ERROR_DEPENDENT_RESOURCE_EXISTS = 0x1389,ERROR_DEPENDENCY_NOT_FOUND = 0x138A,ERROR_DEPENDENCY_ALREADY_EXISTS = 0x138B,ERROR_RESOURCE_NOT_ONLINE = 0x138C,ERROR_HOST_NODE_NOT_AVAILABLE = 0x138D,ERROR_RESOURCE_NOT_AVAILABLE = 0x138E,ERROR_RESOURCE_NOT_FOUND = 0x138F,ERROR_SHUTDOWN_CLUSTER = 0x1390,ERROR_CANT_EVICT_ACTIVE_NODE = 0x1391,ERROR_OBJECT_ALREADY_EXISTS = 0x1392,ERROR_OBJECT_IN_LIST = 0x1393,ERROR_GROUP_NOT_AVAILABLE = 0x1394,ERROR_GROUP_NOT_FOUND = 0x1395,ERROR_GROUP_NOT_ONLINE = 0x1396,ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 0x1397,ERROR_HOST_NODE_NOT_GROUP_OWNER = 0x1398,ERROR_RESMON_CREATE_FAILED = 0x1399,ERROR_RESMON_ONLINE_FAILED = 0x139A,ERROR_RESOURCE_ONLINE = 0x139B,ERROR_QUORUM_RESOURCE = 0x139C,ERROR_NOT_QUORUM_CAPABLE = 0x139D,ERROR_CLUSTER_SHUTTING_DOWN = 0x139E,ERROR_INVALID_STATE = 0x139F,ERROR_RESOURCE_PROPERTIES_STORED = 0x13A0,ERROR_NOT_QUORUM_CLASS = 0x13A1,ERROR_CORE_RESOURCE = 0x13A2,ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 0x13A3,ERROR_QUORUMLOG_OPEN_FAILED = 0x13A4,ERROR_CLUSTERLOG_CORRUPT = 0x13A5,ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 0x13A6,ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 0x13A7,ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 0x13A8,ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 0x13A9,ERROR_QUORUM_OWNER_ALIVE = 0x13AA,ERROR_NETWORK_NOT_AVAILABLE = 0x13AB,ERROR_NODE_NOT_AVAILABLE = 0x13AC,ERROR_ALL_NODES_NOT_AVAILABLE = 0x13AD,ERROR_RESOURCE_FAILED = 0x13AE,ERROR_CLUSTER_INVALID_NODE = 0x13AF,ERROR_CLUSTER_NODE_EXISTS = 0x13B0,ERROR_CLUSTER_JOIN_IN_PROGRESS = 0x13B1,ERROR_CLUSTER_NODE_NOT_FOUND = 0x13B2,ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 0x13B3,ERROR_CLUSTER_NETWORK_EXISTS = 0x13B4,ERROR_CLUSTER_NETWORK_NOT_FOUND = 0x13B5,ERROR_CLUSTER_NETINTERFACE_EXISTS = 0x13B6,ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 0x13B7,ERROR_CLUSTER_INVALID_REQUEST = 0x13B8,ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 0x13B9,ERROR_CLUSTER_NODE_DOWN = 0x13BA,ERROR_CLUSTER_NODE_UNREACHABLE = 0x13BB,ERROR_CLUSTER_NODE_NOT_MEMBER = 0x13BC,ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 0x13BD,ERROR_CLUSTER_INVALID_NETWORK = 0x13BE,ERROR_CLUSTER_NODE_UP = 0x13C0,ERROR_CLUSTER_IPADDR_IN_USE = 0x13C1,ERROR_CLUSTER_NODE_NOT_PAUSED = 0x13C2,ERROR_CLUSTER_NO_SECURITY_CONTEXT = 0x13C3,ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 0x13C4,ERROR_CLUSTER_NODE_ALREADY_UP = 0x13C5,ERROR_CLUSTER_NODE_ALREADY_DOWN = 0x13C6,ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 0x13C7,ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 0x13C8,ERROR_CLUSTER_NODE_ALREADY_MEMBER = 0x13C9,ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 0x13CA,ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 0x13CB,ERROR_INVALID_OPERATION_ON_QUORUM = 0x13CC,ERROR_DEPENDENCY_NOT_ALLOWED = 0x13CD,ERROR_CLUSTER_NODE_PAUSED = 0x13CE,ERROR_NODE_CANT_HOST_RESOURCE = 0x13CF,ERROR_CLUSTER_NODE_NOT_READY = 0x13D0,ERROR_CLUSTER_NODE_SHUTTING_DOWN = 0x13D1,ERROR_CLUSTER_JOIN_ABORTED = 0x13D2,ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 0x13D3,ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 0x13D4,ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 0x13D5,ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 0x13D6,ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 0x13D7,ERROR_CLUSTER_RESNAME_NOT_FOUND = 0x13D8,ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 0x13D9,ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 0x13DA,ERROR_CLUSTER_DATABASE_SEQMISMATCH = 0x13DB,ERROR_RESMON_INVALID_STATE = 0x13DC,ERROR_CLUSTER_GUM_NOT_LOCKER = 0x13DD,ERROR_QUORUM_DISK_NOT_FOUND = 0x13DE,ERROR_DATABASE_BACKUP_CORRUPT = 0x13DF,ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 0x13E0,ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 0x13E1,ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 0x1702,ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 0x1703,ERROR_CLUSTER_MEMBERSHIP_HALT = 0x1704,ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 0x1705,ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 0x1706,ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 0x1707,ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 0x1708,ERROR_CLUSTER_PARAMETER_MISMATCH = 0x1709,ERROR_NODE_CANNOT_BE_CLUSTERED = 0x170A,ERROR_CLUSTER_WRONG_OS_VERSION = 0x170B,ERROR_ENCRYPTION_FAILED = 0x1770,ERROR_DECRYPTION_FAILED = 0x1771,ERROR_FILE_ENCRYPTED = 0x1772,ERROR_NO_RECOVERY_POLICY = 0x1773,ERROR_NO_EFS = 0x1774,ERROR_WRONG_EFS = 0x1775,ERROR_NO_USER_KEYS = 0x1776,ERROR_FILE_NOT_ENCRYPTED = 0x1777,ERROR_NOT_EXPORT_FORMAT = 0x1778,ERROR_FILE_READ_ONLY = 0x1779,ERROR_DIR_EFS_DISALLOWED = 0x177A,ERROR_EFS_SERVER_NOT_TRUSTED = 0x177B,ERROR_BAD_RECOVERY_POLICY = 0x177C,ERROR_EFS_ALG_BLOB_TOO_BIG = 0x177D,ERROR_VOLUME_NOT_SUPPORT_EFS = 0x177E,ERROR_EFS_DISABLED = 0x177F,ERROR_EFS_VERSION_NOT_SUPPORT = 0x1780,ERROR_NO_BROWSER_SERVERS_FOUND = 0x17E6,SCHED_E_SERVICE_NOT_LOCALSYSTEM = 0x1838,ERROR_CTX_WINSTATION_NAME_INVALID = 0x1B59,ERROR_CTX_INVALID_PD = 0x1B5A,ERROR_CTX_PD_NOT_FOUND = 0x1B5B,ERROR_CTX_WD_NOT_FOUND = 0x1B5C,ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 0x1B5D,ERROR_CTX_SERVICE_NAME_COLLISION = 0x1B5E,ERROR_CTX_CLOSE_PENDING = 0x1B5F,ERROR_CTX_NO_OUTBUF = 0x1B60,ERROR_CTX_MODEM_INF_NOT_FOUND = 0x1B61,ERROR_CTX_INVALID_MODEMNAME = 0x1B62,ERROR_CTX_MODEM_RESPONSE_ERROR = 0x1B63,ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 0x1B64,ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 0x1B65,ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 0x1B66,ERROR_CTX_MODEM_RESPONSE_BUSY = 0x1B67,ERROR_CTX_MODEM_RESPONSE_VOICE = 0x1B68,ERROR_CTX_TD_ERROR = 0x1B69,ERROR_CTX_WINSTATION_NOT_FOUND = 0x1B6E,ERROR_CTX_WINSTATION_ALREADY_EXISTS = 0x1B6F,ERROR_CTX_WINSTATION_BUSY = 0x1B70,ERROR_CTX_BAD_VIDEO_MODE = 0x1B71,ERROR_CTX_GRAPHICS_INVALID = 0x1B7B,ERROR_CTX_LOGON_DISABLED = 0x1B7D,ERROR_CTX_NOT_CONSOLE = 0x1B7E,ERROR_CTX_CLIENT_QUERY_TIMEOUT = 0x1B80,ERROR_CTX_CONSOLE_DISCONNECT = 0x1B81,ERROR_CTX_CONSOLE_CONNECT = 0x1B82,ERROR_CTX_SHADOW_DENIED = 0x1B84,ERROR_CTX_WINSTATION_ACCESS_DENIED = 0x1B85,ERROR_CTX_INVALID_WD = 0x1B89,ERROR_CTX_SHADOW_INVALID = 0x1B8A,ERROR_CTX_SHADOW_DISABLED = 0x1B8B,ERROR_CTX_CLIENT_LICENSE_IN_USE = 0x1B8C,ERROR_CTX_CLIENT_LICENSE_NOT_SET = 0x1B8D,ERROR_CTX_LICENSE_NOT_AVAILABLE = 0x1B8E,ERROR_CTX_LICENSE_CLIENT_INVALID = 0x1B8F,ERROR_CTX_LICENSE_EXPIRED = 0x1B90,ERROR_CTX_SHADOW_NOT_RUNNING = 0x1B91,ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 0x1B92,FRS_ERR_INVALID_API_SEQUENCE = 0x1F41,FRS_ERR_STARTING_SERVICE = 0x1F42,FRS_ERR_STOPPING_SERVICE = 0x1F43,FRS_ERR_INTERNAL_API = 0x1F44,FRS_ERR_INTERNAL = 0x1F45,FRS_ERR_SERVICE_COMM = 0x1F46,FRS_ERR_INSUFFICIENT_PRIV = 0x1F47,FRS_ERR_AUTHENTICATION = 0x1F48,FRS_ERR_PARENT_INSUFFICIENT_PRIV = 0x1F49,FRS_ERR_PARENT_AUTHENTICATION = 0x1F4A,FRS_ERR_CHILD_TO_PARENT_COMM = 0x1F4B,FRS_ERR_PARENT_TO_CHILD_COMM = 0x1F4C,FRS_ERR_SYSVOL_POPULATE = 0x1F4D,FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 0x1F4E,FRS_ERR_SYSVOL_IS_BUSY = 0x1F4F,FRS_ERR_SYSVOL_DEMOTE = 0x1F50,FRS_ERR_INVALID_SERVICE_PARAMETER = 0x1F51,DS_S_SUCCESS = 0x0,ERROR_DS_NOT_INSTALLED = 0x2008,ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x2009,ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 0x200A,ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 0x200B,ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 0x200C,ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0x200D,ERROR_DS_BUSY = 0x200E,ERROR_DS_UNAVAILABLE = 0x200F,ERROR_DS_NO_RIDS_ALLOCATED = 0x2010,ERROR_DS_NO_MORE_RIDS = 0x2011,ERROR_DS_INCORRECT_ROLE_OWNER = 0x2012,ERROR_DS_RIDMGR_INIT_ERROR = 0x2013,ERROR_DS_OBJ_CLASS_VIOLATION = 0x2014,ERROR_DS_CANT_ON_NON_LEAF = 0x2015,ERROR_DS_CANT_ON_RDN = 0x2016,ERROR_DS_CANT_MOD_OBJ_CLASS = 0x2017,ERROR_DS_CROSS_DOM_MOVE_ERROR = 0x2018,ERROR_DS_GC_NOT_AVAILABLE = 0x2019,ERROR_SHARED_POLICY = 0x201A,ERROR_POLICY_OBJECT_NOT_FOUND = 0x201B,ERROR_POLICY_ONLY_IN_DS = 0x201C,ERROR_PROMOTION_ACTIVE = 0x201D,ERROR_NO_PROMOTION_ACTIVE = 0x201E,ERROR_DS_OPERATIONS_ERROR = 0x2020,ERROR_DS_PROTOCOL_ERROR = 0x2021,ERROR_DS_TIMELIMIT_EXCEEDED = 0x2022,ERROR_DS_SIZELIMIT_EXCEEDED = 0x2023,ERROR_DS_ADMIN_LIMIT_EXCEEDED = 0x2024,ERROR_DS_COMPARE_FALSE = 0x2025,ERROR_DS_COMPARE_TRUE = 0x2026,ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 0x2027,ERROR_DS_STRONG_AUTH_REQUIRED = 0x2028,ERROR_DS_INAPPROPRIATE_AUTH = 0x2029,ERROR_DS_AUTH_UNKNOWN = 0x202A,ERROR_DS_REFERRAL = 0x202B,ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 0x202C,ERROR_DS_CONFIDENTIALITY_REQUIRED = 0x202D,ERROR_DS_INAPPROPRIATE_MATCHING = 0x202E,ERROR_DS_CONSTRAINT_VIOLATION = 0x202F,ERROR_DS_NO_SUCH_OBJECT = 0x2030,ERROR_DS_ALIAS_PROBLEM = 0x2031,ERROR_DS_INVALID_DN_SYNTAX = 0x2032,ERROR_DS_IS_LEAF = 0x2033,ERROR_DS_ALIAS_DEREF_PROBLEM = 0x2034,ERROR_DS_UNWILLING_TO_PERFORM = 0x2035,ERROR_DS_LOOP_DETECT = 0x2036,ERROR_DS_NAMING_VIOLATION = 0x2037,ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 0x2038,ERROR_DS_AFFECTS_MULTIPLE_DSAS = 0x2039,ERROR_DS_SERVER_DOWN = 0x203A,ERROR_DS_LOCAL_ERROR = 0x203B,ERROR_DS_ENCODING_ERROR = 0x203C,ERROR_DS_DECODING_ERROR = 0x203D,ERROR_DS_FILTER_UNKNOWN = 0x203E,ERROR_DS_PARAM_ERROR = 0x203F,ERROR_DS_NOT_SUPPORTED = 0x2040,ERROR_DS_NO_RESULTS_RETURNED = 0x2041,ERROR_DS_CONTROL_NOT_FOUND = 0x2042,ERROR_DS_CLIENT_LOOP = 0x2043,ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 0x2044,ERROR_DS_SORT_CONTROL_MISSING = 0x2045,ERROR_DS_OFFSET_RANGE_ERROR = 0x2046,ERROR_DS_ROOT_MUST_BE_NC = 0x206D,ERROR_DS_ADD_REPLICA_INHIBITED = 0x206E,ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 0x206F,ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 0x2070,ERROR_DS_OBJ_STRING_NAME_EXISTS = 0x2071,ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 0x2072,ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 0x2073,ERROR_DS_NO_REQUESTED_ATTS_FOUND = 0x2074,ERROR_DS_USER_BUFFER_TO_SMALL = 0x2075,ERROR_DS_ATT_IS_NOT_ON_OBJ = 0x2076,ERROR_DS_ILLEGAL_MOD_OPERATION = 0x2077,ERROR_DS_OBJ_TOO_LARGE = 0x2078,ERROR_DS_BAD_INSTANCE_TYPE = 0x2079,ERROR_DS_MASTERDSA_REQUIRED = 0x207A,ERROR_DS_OBJECT_CLASS_REQUIRED = 0x207B,ERROR_DS_MISSING_REQUIRED_ATT = 0x207C,ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 0x207D,ERROR_DS_ATT_ALREADY_EXISTS = 0x207E,ERROR_DS_CANT_ADD_ATT_VALUES = 0x2080,ERROR_DS_SINGLE_VALUE_CONSTRAINT = 0x2081,ERROR_DS_RANGE_CONSTRAINT = 0x2082,ERROR_DS_ATT_VAL_ALREADY_EXISTS = 0x2083,ERROR_DS_CANT_REM_MISSING_ATT = 0x2084,ERROR_DS_CANT_REM_MISSING_ATT_VAL = 0x2085,ERROR_DS_ROOT_CANT_BE_SUBREF = 0x2086,ERROR_DS_NO_CHAINING = 0x2087,ERROR_DS_NO_CHAINED_EVAL = 0x2088,ERROR_DS_NO_PARENT_OBJECT = 0x2089,ERROR_DS_PARENT_IS_AN_ALIAS = 0x208A,ERROR_DS_CANT_MIX_MASTER_AND_REPS = 0x208B,ERROR_DS_CHILDREN_EXIST = 0x208C,ERROR_DS_OBJ_NOT_FOUND = 0x208D,ERROR_DS_ALIASED_OBJ_MISSING = 0x208E,ERROR_DS_BAD_NAME_SYNTAX = 0x208F,ERROR_DS_ALIAS_POINTS_TO_ALIAS = 0x2090,ERROR_DS_CANT_DEREF_ALIAS = 0x2091,ERROR_DS_OUT_OF_SCOPE = 0x2092,ERROR_DS_OBJECT_BEING_REMOVED = 0x2093,ERROR_DS_CANT_DELETE_DSA_OBJ = 0x2094,ERROR_DS_GENERIC_ERROR = 0x2095,ERROR_DS_DSA_MUST_BE_INT_MASTER = 0x2096,ERROR_DS_CLASS_NOT_DSA = 0x2097,ERROR_DS_INSUFF_ACCESS_RIGHTS = 0x2098,ERROR_DS_ILLEGAL_SUPERIOR = 0x2099,ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 0x209A,ERROR_DS_NAME_TOO_MANY_PARTS = 0x209B,ERROR_DS_NAME_TOO_LONG = 0x209C,ERROR_DS_NAME_VALUE_TOO_LONG = 0x209D,ERROR_DS_NAME_UNPARSEABLE = 0x209E,ERROR_DS_NAME_TYPE_UNKNOWN = 0x209F,ERROR_DS_NOT_AN_OBJECT = 0x20A0,ERROR_DS_SEC_DESC_TOO_SHORT = 0x20A1,ERROR_DS_SEC_DESC_INVALID = 0x20A2,ERROR_DS_NO_DELETED_NAME = 0x20A3,ERROR_DS_SUBREF_MUST_HAVE_PARENT = 0x20A4,ERROR_DS_NCNAME_MUST_BE_NC = 0x20A5,ERROR_DS_CANT_ADD_SYSTEM_ONLY = 0x20A6,ERROR_DS_CLASS_MUST_BE_CONCRETE = 0x20A7,ERROR_DS_INVALID_DMD = 0x20A8,ERROR_DS_OBJ_GUID_EXISTS = 0x20A9,ERROR_DS_NOT_ON_BACKLINK = 0x20AA,ERROR_DS_NO_CROSSREF_FOR_NC = 0x20AB,ERROR_DS_SHUTTING_DOWN = 0x20AC,ERROR_DS_UNKNOWN_OPERATION = 0x20AD,ERROR_DS_INVALID_ROLE_OWNER = 0x20AE,ERROR_DS_COULDNT_CONTACT_FSMO = 0x20AF,ERROR_DS_CROSS_NC_DN_RENAME = 0x20B0,ERROR_DS_CANT_MOD_SYSTEM_ONLY = 0x20B1,ERROR_DS_REPLICATOR_ONLY = 0x20B2,ERROR_DS_OBJ_CLASS_NOT_DEFINED = 0x20B3,ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 0x20B4,ERROR_DS_NAME_REFERENCE_INVALID = 0x20B5,ERROR_DS_CROSS_REF_EXISTS = 0x20B6,ERROR_DS_CANT_DEL_MASTER_CROSSREF = 0x20B7,ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 0x20B8,ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 0x20B9,ERROR_DS_DUP_RDN = 0x20BA,ERROR_DS_DUP_OID = 0x20BB,ERROR_DS_DUP_MAPI_ID = 0x20BC,ERROR_DS_DUP_SCHEMA_ID_GUID = 0x20BD,ERROR_DS_DUP_LDAP_DISPLAY_NAME = 0x20BE,ERROR_DS_SEMANTIC_ATT_TEST = 0x20BF,ERROR_DS_SYNTAX_MISMATCH = 0x20C0,ERROR_DS_EXISTS_IN_MUST_HAVE = 0x20C1,ERROR_DS_EXISTS_IN_MAY_HAVE = 0x20C2,ERROR_DS_NONEXISTENT_MAY_HAVE = 0x20C3,ERROR_DS_NONEXISTENT_MUST_HAVE = 0x20C4,ERROR_DS_AUX_CLS_TEST_FAIL = 0x20C5,ERROR_DS_NONEXISTENT_POSS_SUP = 0x20C6,ERROR_DS_SUB_CLS_TEST_FAIL = 0x20C7,ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 0x20C8,ERROR_DS_EXISTS_IN_AUX_CLS = 0x20C9,ERROR_DS_EXISTS_IN_SUB_CLS = 0x20CA,ERROR_DS_EXISTS_IN_POSS_SUP = 0x20CB,ERROR_DS_RECALCSCHEMA_FAILED = 0x20CC,ERROR_DS_TREE_DELETE_NOT_FINISHED = 0x20CD,ERROR_DS_CANT_DELETE = 0x20CE,ERROR_DS_ATT_SCHEMA_REQ_ID = 0x20CF,ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 0x20D0,ERROR_DS_CANT_CACHE_ATT = 0x20D1,ERROR_DS_CANT_CACHE_CLASS = 0x20D2,ERROR_DS_CANT_REMOVE_ATT_CACHE = 0x20D3,ERROR_DS_CANT_REMOVE_CLASS_CACHE = 0x20D4,ERROR_DS_CANT_RETRIEVE_DN = 0x20D5,ERROR_DS_MISSING_SUPREF = 0x20D6,ERROR_DS_CANT_RETRIEVE_INSTANCE = 0x20D7,ERROR_DS_CODE_INCONSISTENCY = 0x20D8,ERROR_DS_DATABASE_ERROR = 0x20D9,ERROR_DS_GOVERNSID_MISSING = 0x20DA,ERROR_DS_MISSING_EXPECTED_ATT = 0x20DB,ERROR_DS_NCNAME_MISSING_CR_REF = 0x20DC,ERROR_DS_SECURITY_CHECKING_ERROR = 0x20DD,ERROR_DS_SCHEMA_NOT_LOADED = 0x20DE,ERROR_DS_SCHEMA_ALLOC_FAILED = 0x20DF,ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 0x20E0,ERROR_DS_GCVERIFY_ERROR = 0x20E1,ERROR_DS_DRA_SCHEMA_MISMATCH = 0x20E2,ERROR_DS_CANT_FIND_DSA_OBJ = 0x20E3,ERROR_DS_CANT_FIND_EXPECTED_NC = 0x20E4,ERROR_DS_CANT_FIND_NC_IN_CACHE = 0x20E5,ERROR_DS_CANT_RETRIEVE_CHILD = 0x20E6,ERROR_DS_SECURITY_ILLEGAL_MODIFY = 0x20E7,ERROR_DS_CANT_REPLACE_HIDDEN_REC = 0x20E8,ERROR_DS_BAD_HIERARCHY_FILE = 0x20E9,ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 0x20EA,ERROR_DS_CONFIG_PARAM_MISSING = 0x20EB,ERROR_DS_COUNTING_AB_INDICES_FAILED = 0x20EC,ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 0x20ED,ERROR_DS_INTERNAL_FAILURE = 0x20EE,ERROR_DS_UNKNOWN_ERROR = 0x20EF,ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 0x20F0,ERROR_DS_REFUSING_FSMO_ROLES = 0x20F1,ERROR_DS_MISSING_FSMO_SETTINGS = 0x20F2,ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 0x20F3,ERROR_DS_DRA_GENERIC = 0x20F4,ERROR_DS_DRA_INVALID_PARAMETER = 0x20F5,ERROR_DS_DRA_BUSY = 0x20F6,ERROR_DS_DRA_BAD_DN = 0x20F7,ERROR_DS_DRA_BAD_NC = 0x20F8,ERROR_DS_DRA_DN_EXISTS = 0x20F9,ERROR_DS_DRA_INTERNAL_ERROR = 0x20FA,ERROR_DS_DRA_INCONSISTENT_DIT = 0x20FB,ERROR_DS_DRA_CONNECTION_FAILED = 0x20FC,ERROR_DS_DRA_BAD_INSTANCE_TYPE = 0x20FD,ERROR_DS_DRA_OUT_OF_MEM = 0x20FE,ERROR_DS_DRA_MAIL_PROBLEM = 0x20FF,ERROR_DS_DRA_REF_ALREADY_EXISTS = 0x2100,ERROR_DS_DRA_REF_NOT_FOUND = 0x2101,ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 0x2102,ERROR_DS_DRA_DB_ERROR = 0x2103,ERROR_DS_DRA_NO_REPLICA = 0x2104,ERROR_DS_DRA_ACCESS_DENIED = 0x2105,ERROR_DS_DRA_NOT_SUPPORTED = 0x2106,ERROR_DS_DRA_RPC_CANCELLED = 0x2107,ERROR_DS_DRA_SOURCE_DISABLED = 0x2108,ERROR_DS_DRA_SINK_DISABLED = 0x2109,ERROR_DS_DRA_NAME_COLLISION = 0x210A,ERROR_DS_DRA_SOURCE_REINSTALLED = 0x210B,ERROR_DS_DRA_MISSING_PARENT = 0x210C,ERROR_DS_DRA_PREEMPTED = 0x210D,ERROR_DS_DRA_ABANDON_SYNC = 0x210E,ERROR_DS_DRA_SHUTDOWN = 0x210F,ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 0x2110,ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 0x2111,ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 0x2112,ERROR_DS_INSTALL_SCHEMA_MISMATCH = 0x2113,ERROR_DS_DUP_LINK_ID = 0x2114,ERROR_DS_NAME_ERROR_RESOLVING = 0x2115,ERROR_DS_NAME_ERROR_NOT_FOUND = 0x2116,ERROR_DS_NAME_ERROR_NOT_UNIQUE = 0x2117,ERROR_DS_NAME_ERROR_NO_MAPPING = 0x2118,ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 0x2119,ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 0x211A,ERROR_DS_CONSTRUCTED_ATT_MOD = 0x211B,ERROR_DS_WRONG_OM_OBJ_CLASS = 0x211C,ERROR_DS_DRA_REPL_PENDING = 0x211D,ERROR_DS_DS_REQUIRED = 0x211E,ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 0x211F,ERROR_DS_NON_BASE_SEARCH = 0x2120,ERROR_DS_CANT_RETRIEVE_ATTS = 0x2121,ERROR_DS_BACKLINK_WITHOUT_LINK = 0x2122,ERROR_DS_EPOCH_MISMATCH = 0x2123,ERROR_DS_SRC_NAME_MISMATCH = 0x2124,ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 0x2125,ERROR_DS_DST_NC_MISMATCH = 0x2126,ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 0x2127,ERROR_DS_SRC_GUID_MISMATCH = 0x2128,ERROR_DS_CANT_MOVE_DELETED_OBJECT = 0x2129,ERROR_DS_PDC_OPERATION_IN_PROGRESS = 0x212A,ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 0x212B,ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 0x212C,ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 0x212D,ERROR_DS_NC_MUST_HAVE_NC_PARENT = 0x212E,ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 0x212F,ERROR_DS_DST_DOMAIN_NOT_NATIVE = 0x2130,ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 0x2131,ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 0x2132,ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 0x2133,ERROR_DS_INVALID_SEARCH_FLAG = 0x2134,ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 0x2135,ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 0x2136,ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 0x2137,ERROR_DS_SAM_INIT_FAILURE = 0x2138,ERROR_DS_SENSITIVE_GROUP_VIOLATION = 0x2139,ERROR_DS_CANT_MOD_PRIMARYGROUPID = 0x213A,ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 0x213B,ERROR_DS_NONSAFE_SCHEMA_CHANGE = 0x213C,ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 0x213D,ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 0x213E,ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 0x213F,ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 0x2140,ERROR_DS_INVALID_GROUP_TYPE = 0x2141,ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 0x2142,ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 0x2143,ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 0x2144,ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 0x2145,ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 0x2146,ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 0x2147,ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 0x2148,ERROR_DS_HAVE_PRIMARY_MEMBERS = 0x2149,ERROR_DS_STRING_SD_CONVERSION_FAILED = 0x214A,ERROR_DS_NAMING_MASTER_GC = 0x214B,ERROR_DS_DNS_LOOKUP_FAILURE = 0x214C,ERROR_DS_COULDNT_UPDATE_SPNS = 0x214D,ERROR_DS_CANT_RETRIEVE_SD = 0x214E,ERROR_DS_KEY_NOT_UNIQUE = 0x214F,ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 0x2150,ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 0x2151,ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 0x2152,ERROR_DS_CANT_START = 0x2153,ERROR_DS_INIT_FAILURE = 0x2154,ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 0x2155,ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 0x2156,ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 0x2157,ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 0x2158,ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 0x2159,ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 0x215A,ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 0x215B,ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 0x215C,ERROR_SAM_INIT_FAILURE = 0x215D,ERROR_DS_DRA_SCHEMA_INFO_SHIP = 0x215E,ERROR_DS_DRA_SCHEMA_CONFLICT = 0x215F,ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 0x2160,ERROR_DS_DRA_OBJ_NC_MISMATCH = 0x2161,ERROR_DS_NC_STILL_HAS_DSAS = 0x2162,ERROR_DS_GC_REQUIRED = 0x2163,ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 0x2164,ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 0x2165,ERROR_DS_CANT_ADD_TO_GC = 0x2166,ERROR_DS_NO_CHECKPOINT_WITH_PDC = 0x2167,ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 0x2168,ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 0x2169,ERROR_DS_INVALID_NAME_FOR_SPN = 0x216A,ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 0x216B,ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 0x216C,ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 0x216D,ERROR_DS_MUST_BE_RUN_ON_DST_DC = 0x216E,ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 0x216F,ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 0x2170,ERROR_DS_INIT_FAILURE_CONSOLE = 0x2171,ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 0x2172,ERROR_DS_FOREST_VERSION_TOO_HIGH = 0x2173,ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 0x2174,ERROR_DS_FOREST_VERSION_TOO_LOW = 0x2175,ERROR_DS_DOMAIN_VERSION_TOO_LOW = 0x2176,ERROR_DS_INCOMPATIBLE_VERSION = 0x2177,ERROR_DS_LOW_DSA_VERSION = 0x2178,ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 0x2179,ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 0x217A,ERROR_DS_NAME_NOT_UNIQUE = 0x217B,ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 0x217C,ERROR_DS_OUT_OF_VERSION_STORE = 0x217D,ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 0x217E,ERROR_DS_NO_REF_DOMAIN = 0x217F,ERROR_DS_RESERVED_LINK_ID = 0x2180,ERROR_DS_LINK_ID_NOT_AVAILABLE = 0x2181,ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 0x2182,ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 0x2183,ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 0x2184,ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 0x2185,ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 0x2186,ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 0x2187,ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 0x2188,ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 0x2189,ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 0x218A,ERROR_DS_THREAD_LIMIT_EXCEEDED = 0x218B,ERROR_DS_NOT_CLOSEST = 0x218C,ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 0x218D,ERROR_DS_SINGLE_USER_MODE_FAILED = 0x218E,ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 0x218F,ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 0x2190,ERROR_DS_DIFFERENT_REPL_EPOCHS = 0x2191,ERROR_DS_DRS_EXTENSIONS_CHANGED = 0x2192,ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 0x2193,ERROR_DS_NO_MSDS_INTID = 0x2194,ERROR_DS_DUP_MSDS_INTID = 0x2195,ERROR_DS_EXISTS_IN_RDNATTID = 0x2196,ERROR_DS_AUTHORIZATION_FAILED = 0x2197,ERROR_DS_INVALID_SCRIPT = 0x2198,ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 0x2199,DNS_ERROR_RESPONSE_CODES_BASE = 0x2328,DNS_ERROR_RCODE_NO_ERROR = 0x0,DNS_ERROR_MASK = 0x2328,DNS_ERROR_RCODE_FORMAT_ERROR = 0x2329,DNS_ERROR_RCODE_SERVER_FAILURE = 0x232A,DNS_ERROR_RCODE_NAME_ERROR = 0x232B,DNS_ERROR_RCODE_NOT_IMPLEMENTED = 0x232C,DNS_ERROR_RCODE_REFUSED = 0x232D,DNS_ERROR_RCODE_YXDOMAIN = 0x232E,DNS_ERROR_RCODE_YXRRSET = 0x232F,DNS_ERROR_RCODE_NXRRSET = 0x2330,DNS_ERROR_RCODE_NOTAUTH = 0x2331,DNS_ERROR_RCODE_NOTZONE = 0x2332,DNS_ERROR_RCODE_BADSIG = 0x2338,DNS_ERROR_RCODE_BADKEY = 0x2339,DNS_ERROR_RCODE_BADTIME = 0x233A,DNS_ERROR_RCODE_LAST = 0x233A,DNS_ERROR_PACKET_FMT_BASE = 0x251C,DNS_INFO_NO_RECORDS = 0x251D,DNS_ERROR_BAD_PACKET = 0x251E,DNS_ERROR_NO_PACKET = 0x251F,DNS_ERROR_RCODE = 0x2520,DNS_ERROR_UNSECURE_PACKET = 0x2521,DNS_STATUS_PACKET_UNSECURE = 0x2521,DNS_ERROR_NO_MEMORY = 0xE,DNS_ERROR_INVALID_NAME = 0x7B,DNS_ERROR_INVALID_DATA = 0xD,DNS_ERROR_GENERAL_API_BASE = 0x254E,DNS_ERROR_INVALID_TYPE = 0x254F,DNS_ERROR_INVALID_IP_ADDRESS = 0x2550,DNS_ERROR_INVALID_PROPERTY = 0x2551,DNS_ERROR_TRY_AGAIN_LATER = 0x2552,DNS_ERROR_NOT_UNIQUE = 0x2553,DNS_ERROR_NON_RFC_NAME = 0x2554,DNS_STATUS_FQDN = 0x2555,DNS_STATUS_DOTTED_NAME = 0x2556,DNS_STATUS_SINGLE_PART_NAME = 0x2557,DNS_ERROR_INVALID_NAME_CHAR = 0x2558,DNS_ERROR_NUMERIC_NAME = 0x2559,DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 0x255A,DNS_ERROR_ZONE_BASE = 0x2580,DNS_ERROR_ZONE_DOES_NOT_EXIST = 0x2581,DNS_ERROR_NO_ZONE_INFO = 0x2582,DNS_ERROR_INVALID_ZONE_OPERATION = 0x2583,DNS_ERROR_ZONE_CONFIGURATION_ERROR = 0x2584,DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 0x2585,DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 0x2586,DNS_ERROR_ZONE_LOCKED = 0x2587,DNS_ERROR_ZONE_CREATION_FAILED = 0x2588,DNS_ERROR_ZONE_ALREADY_EXISTS = 0x2589,DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 0x258A,DNS_ERROR_INVALID_ZONE_TYPE = 0x258B,DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 0x258C,DNS_ERROR_ZONE_NOT_SECONDARY = 0x258D,DNS_ERROR_NEED_SECONDARY_ADDRESSES = 0x258E,DNS_ERROR_WINS_INIT_FAILED = 0x258F,DNS_ERROR_NEED_WINS_SERVERS = 0x2590,DNS_ERROR_NBSTAT_INIT_FAILED = 0x2591,DNS_ERROR_SOA_DELETE_INVALID = 0x2592,DNS_ERROR_FORWARDER_ALREADY_EXISTS = 0x2593,DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 0x2594,DNS_ERROR_ZONE_IS_SHUTDOWN = 0x2595,DNS_ERROR_DATAFILE_BASE = 0x25B2,DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 0x25B3,DNS_ERROR_INVALID_DATAFILE_NAME = 0x25B4,DNS_ERROR_DATAFILE_OPEN_FAILURE = 0x25B5,DNS_ERROR_FILE_WRITEBACK_FAILED = 0x25B6,DNS_ERROR_DATAFILE_PARSING = 0x25B7,DNS_ERROR_DATABASE_BASE = 0x25E4,DNS_ERROR_RECORD_DOES_NOT_EXIST = 0x25E5,DNS_ERROR_RECORD_FORMAT = 0x25E6,DNS_ERROR_NODE_CREATION_FAILED = 0x25E7,DNS_ERROR_UNKNOWN_RECORD_TYPE = 0x25E8,DNS_ERROR_RECORD_TIMED_OUT = 0x25E9,DNS_ERROR_NAME_NOT_IN_ZONE = 0x25EA,DNS_ERROR_CNAME_LOOP = 0x25EB,DNS_ERROR_NODE_IS_CNAME = 0x25EC,DNS_ERROR_CNAME_COLLISION = 0x25ED,DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 0x25EE,DNS_ERROR_RECORD_ALREADY_EXISTS = 0x25EF,DNS_ERROR_SECONDARY_DATA = 0x25F0,DNS_ERROR_NO_CREATE_CACHE_DATA = 0x25F1,DNS_ERROR_NAME_DOES_NOT_EXIST = 0x25F2,DNS_WARNING_PTR_CREATE_FAILED = 0x25F3,DNS_WARNING_DOMAIN_UNDELETED = 0x25F4,DNS_ERROR_DS_UNAVAILABLE = 0x25F5,DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 0x25F6,DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 0x25F7,DNS_ERROR_OPERATION_BASE = 0x2616,DNS_INFO_AXFR_COMPLETE = 0x2617,DNS_ERROR_AXFR = 0x2618,DNS_INFO_ADDED_LOCAL_WINS = 0x2619,DNS_ERROR_SECURE_BASE = 0x2648,DNS_STATUS_CONTINUE_NEEDED = 0x2649,DNS_ERROR_SETUP_BASE = 0x267A,DNS_ERROR_NO_TCPIP = 0x267B,DNS_ERROR_NO_DNS_SERVERS = 0x267C,DNS_ERROR_DP_BASE = 0x26AC,DNS_ERROR_DP_DOES_NOT_EXIST = 0x26AD,DNS_ERROR_DP_ALREADY_EXISTS = 0x26AE,DNS_ERROR_DP_NOT_ENLISTED = 0x26AF,DNS_ERROR_DP_ALREADY_ENLISTED = 0x26B0,WSABASEERR = 0x2710,WSAEINTR = 0x2714,WSAEBADF = 0x2719,WSAEACCES = 0x271D,WSAEFAULT = 0x271E,WSAEINVAL = 0x2726,WSAEMFILE = 0x2728,WSAEWOULDBLOCK = 0x2733,WSAEINPROGRESS = 0x2734,WSAEALREADY = 0x2735,WSAENOTSOCK = 0x2736,WSAEDESTADDRREQ = 0x2737,WSAEMSGSIZE = 0x2738,WSAEPROTOTYPE = 0x2739,WSAENOPROTOOPT = 0x273A,WSAEPROTONOSUPPORT = 0x273B,WSAESOCKTNOSUPPORT = 0x273C,WSAEOPNOTSUPP = 0x273D,WSAEPFNOSUPPORT = 0x273E,WSAEAFNOSUPPORT = 0x273F,WSAEADDRINUSE = 0x2740,WSAEADDRNOTAVAIL = 0x2741,WSAENETDOWN = 0x2742,WSAENETUNREACH = 0x2743,WSAENETRESET = 0x2744,WSAECONNABORTED = 0x2745,WSAECONNRESET = 0x2746,WSAENOBUFS = 0x2747,WSAEISCONN = 0x2748,WSAENOTCONN = 0x2749,WSAESHUTDOWN = 0x274A,WSAETOOMANYREFS = 0x274B,WSAETIMEDOUT = 0x274C,WSAECONNREFUSED = 0x274D,WSAELOOP = 0x274E,WSAENAMETOOLONG = 0x274F,WSAEHOSTDOWN = 0x2750,WSAEHOSTUNREACH = 0x2751,WSAENOTEMPTY = 0x2752,WSAEPROCLIM = 0x2753,WSAEUSERS = 0x2754,WSAEDQUOT = 0x2755,WSAESTALE = 0x2756,WSAEREMOTE = 0x2757,WSASYSNOTREADY = 0x276B,WSAVERNOTSUPPORTED = 0x276C,WSANOTINITIALISED = 0x276D,WSAEDISCON = 0x2775,WSAENOMORE = 0x2776,WSAECANCELLED = 0x2777,WSAEINVALIDPROCTABLE = 0x2778,WSAEINVALIDPROVIDER = 0x2779,WSAEPROVIDERFAILEDINIT = 0x277A,WSASYSCALLFAILURE = 0x277B,WSASERVICE_NOT_FOUND = 0x277C,WSATYPE_NOT_FOUND = 0x277D,WSA_E_NO_MORE = 0x277E,WSA_E_CANCELLED = 0x277F,WSAEREFUSED = 0x2780,WSAEDUPLICATE_NAME = 0x2A94,WSAHOST_NOT_FOUND = 0x2AF9,WSATRY_AGAIN = 0x2AFA,WSANO_RECOVERY = 0x2AFB,WSANO_DATA = 0x2AFC,WSA_QOS_RECEIVERS = 0x2AFD,WSA_QOS_SENDERS = 0x2AFE,WSA_QOS_NO_SENDERS = 0x2AFF,WSA_QOS_NO_RECEIVERS = 0x2B00,WSA_QOS_REQUEST_CONFIRMED = 0x2B01,WSA_QOS_ADMISSION_FAILURE = 0x2B02,WSA_QOS_POLICY_FAILURE = 0x2B03,WSA_QOS_BAD_STYLE = 0x2B04,WSA_QOS_BAD_OBJECT = 0x2B05,WSA_QOS_TRAFFIC_CTRL_ERROR = 0x2B06,WSA_QOS_GENERIC_ERROR = 0x2B07,WSA_QOS_ESERVICETYPE = 0x2B08,WSA_QOS_EFLOWSPEC = 0x2B09,WSA_QOS_EPROVSPECBUF = 0x2B0A,WSA_QOS_EFILTERSTYLE = 0x2B0B,WSA_QOS_EFILTERTYPE = 0x2B0C,WSA_QOS_EFILTERCOUNT = 0x2B0D,WSA_QOS_EOBJLENGTH = 0x2B0E,WSA_QOS_EFLOWCOUNT = 0x2B0F,WSA_QOS_EUNKOWNPSOBJ = 0x2B10,WSA_QOS_EPOLICYOBJ = 0x2B11,WSA_QOS_EFLOWDESC = 0x2B12,WSA_QOS_EPSFLOWSPEC = 0x2B13,WSA_QOS_EPSFILTERSPEC = 0x2B14,WSA_QOS_ESDMODEOBJ = 0x2B15,WSA_QOS_ESHAPERATEOBJ = 0x2B16,WSA_QOS_RESERVED_PETYPE = 0x2B17,ERROR_SXS_SECTION_NOT_FOUND = 0x2EE0,ERROR_SXS_CANT_GEN_ACTCTX = 0x2EE1,ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 0x2EE2,ERROR_SXS_ASSEMBLY_NOT_FOUND = 0x2EE3,ERROR_SXS_MANIFEST_FORMAT_ERROR = 0x2EE4,ERROR_SXS_MANIFEST_PARSE_ERROR = 0x2EE5,ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 0x2EE6,ERROR_SXS_KEY_NOT_FOUND = 0x2EE7,ERROR_SXS_VERSION_CONFLICT = 0x2EE8,ERROR_SXS_WRONG_SECTION_TYPE = 0x2EE9,ERROR_SXS_THREAD_QUERIES_DISABLED = 0x2EEA,ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 0x2EEB,ERROR_SXS_UNKNOWN_ENCODING_GROUP = 0x2EEC,ERROR_SXS_UNKNOWN_ENCODING = 0x2EED,ERROR_SXS_INVALID_XML_NAMESPACE_URI = 0x2EEE,ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 0x2EEF,ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 0x2EF0,ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 0x2EF1,ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 0x2EF2,ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 0x2EF3,ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 0x2EF4,ERROR_SXS_DUPLICATE_DLL_NAME = 0x2EF5,ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 0x2EF6,ERROR_SXS_DUPLICATE_CLSID = 0x2EF7,ERROR_SXS_DUPLICATE_IID = 0x2EF8,ERROR_SXS_DUPLICATE_TLBID = 0x2EF9,ERROR_SXS_DUPLICATE_PROGID = 0x2EFA,ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 0x2EFB,ERROR_SXS_FILE_HASH_MISMATCH = 0x2EFC,ERROR_SXS_POLICY_PARSE_ERROR = 0x2EFD,ERROR_SXS_XML_E_MISSINGQUOTE = 0x2EFE,ERROR_SXS_XML_E_COMMENTSYNTAX = 0x2EFF,ERROR_SXS_XML_E_BADSTARTNAMECHAR = 0x2F00,ERROR_SXS_XML_E_BADNAMECHAR = 0x2F01,ERROR_SXS_XML_E_BADCHARINSTRING = 0x2F02,ERROR_SXS_XML_E_XMLDECLSYNTAX = 0x2F03,ERROR_SXS_XML_E_BADCHARDATA = 0x2F04,ERROR_SXS_XML_E_MISSINGWHITESPACE = 0x2F05,ERROR_SXS_XML_E_EXPECTINGTAGEND = 0x2F06,ERROR_SXS_XML_E_MISSINGSEMICOLON = 0x2F07,ERROR_SXS_XML_E_UNBALANCEDPAREN = 0x2F08,ERROR_SXS_XML_E_INTERNALERROR = 0x2F09,ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 0x2F0A,ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 0x2F0B,ERROR_SXS_XML_E_MISSING_PAREN = 0x2F0C,ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 0x2F0D,ERROR_SXS_XML_E_MULTIPLE_COLONS = 0x2F0E,ERROR_SXS_XML_E_INVALID_DECIMAL = 0x2F0F,ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 0x2F10,ERROR_SXS_XML_E_INVALID_UNICODE = 0x2F11,ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 0x2F12,ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 0x2F13,ERROR_SXS_XML_E_UNCLOSEDTAG = 0x2F14,ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 0x2F15,ERROR_SXS_XML_E_MULTIPLEROOTS = 0x2F16,ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 0x2F17,ERROR_SXS_XML_E_BADXMLDECL = 0x2F18,ERROR_SXS_XML_E_MISSINGROOT = 0x2F19,ERROR_SXS_XML_E_UNEXPECTEDEOF = 0x2F1A,ERROR_SXS_XML_E_BADPEREFINSUBSET = 0x2F1B,ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 0x2F1C,ERROR_SXS_XML_E_UNCLOSEDENDTAG = 0x2F1D,ERROR_SXS_XML_E_UNCLOSEDSTRING = 0x2F1E,ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 0x2F1F,ERROR_SXS_XML_E_UNCLOSEDDECL = 0x2F20,ERROR_SXS_XML_E_UNCLOSEDCDATA = 0x2F21,ERROR_SXS_XML_E_RESERVEDNAMESPACE = 0x2F22,ERROR_SXS_XML_E_INVALIDENCODING = 0x2F23,ERROR_SXS_XML_E_INVALIDSWITCH = 0x2F24,ERROR_SXS_XML_E_BADXMLCASE = 0x2F25,ERROR_SXS_XML_E_INVALID_STANDALONE = 0x2F26,ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 0x2F27,ERROR_SXS_XML_E_INVALID_VERSION = 0x2F28,ERROR_SXS_XML_E_MISSINGEQUALS = 0x2F29,ERROR_SXS_PROTECTION_RECOVERY_FAILED = 0x2F2A,ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 0x2F2B,ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 0x2F2C,ERROR_SXS_UNTRANSLATABLE_HRESULT = 0x2F2D,ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 0x2F2E,ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 0x2F2F,ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 0x2F30,ERROR_IPSEC_QM_POLICY_EXISTS = 0x32C8,ERROR_IPSEC_QM_POLICY_NOT_FOUND = 0x32C9,ERROR_IPSEC_QM_POLICY_IN_USE = 0x32CA,ERROR_IPSEC_MM_POLICY_EXISTS = 0x32CB,ERROR_IPSEC_MM_POLICY_NOT_FOUND = 0x32CC,ERROR_IPSEC_MM_POLICY_IN_USE = 0x32CD,ERROR_IPSEC_MM_FILTER_EXISTS = 0x32CE,ERROR_IPSEC_MM_FILTER_NOT_FOUND = 0x32CF,ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 0x32D0,ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 0x32D1,ERROR_IPSEC_MM_AUTH_EXISTS = 0x32D2,ERROR_IPSEC_MM_AUTH_NOT_FOUND = 0x32D3,ERROR_IPSEC_MM_AUTH_IN_USE = 0x32D4,ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 0x32D5,ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 0x32D6,ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 0x32D7,ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 0x32D8,ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 0x32D9,ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 0x32DA,ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 0x32DB,ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 0x32DC,ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 0x32DD,ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 0x32DE,ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 0x32DF,ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 0x35E8,ERROR_IPSEC_IKE_AUTH_FAIL = 0x35E9,ERROR_IPSEC_IKE_ATTRIB_FAIL = 0x35EA,ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 0x35EB,ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 0x35EC,ERROR_IPSEC_IKE_TIMED_OUT = 0x35ED,ERROR_IPSEC_IKE_NO_CERT = 0x35EE,ERROR_IPSEC_IKE_SA_DELETED = 0x35EF,ERROR_IPSEC_IKE_SA_REAPED = 0x35F0,ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 0x35F1,ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 0x35F2,ERROR_IPSEC_IKE_QUEUE_DROP_MM = 0x35F3,ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 0x35F4,ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 0x35F5,ERROR_IPSEC_IKE_MM_DELAY_DROP = 0x35F6,ERROR_IPSEC_IKE_QM_DELAY_DROP = 0x35F7,ERROR_IPSEC_IKE_ERROR = 0x35F8,ERROR_IPSEC_IKE_CRL_FAILED = 0x35F9,ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 0x35FA,ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 0x35FB,ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 0x35FC,ERROR_IPSEC_IKE_DH_FAIL = 0x35FE,ERROR_IPSEC_IKE_INVALID_HEADER = 0x3600,ERROR_IPSEC_IKE_NO_POLICY = 0x3601,ERROR_IPSEC_IKE_INVALID_SIGNATURE = 0x3602,ERROR_IPSEC_IKE_KERBEROS_ERROR = 0x3603,ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 0x3604,ERROR_IPSEC_IKE_PROCESS_ERR = 0x3605,ERROR_IPSEC_IKE_PROCESS_ERR_SA = 0x3606,ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 0x3607,ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 0x3608,ERROR_IPSEC_IKE_PROCESS_ERR_KE = 0x3609,ERROR_IPSEC_IKE_PROCESS_ERR_ID = 0x360A,ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 0x360B,ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 0x360C,ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 0x360D,ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 0x360E,ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 0x360F,ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 0x3610,ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 0x3611,ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 0x3612,ERROR_IPSEC_IKE_INVALID_PAYLOAD = 0x3613,ERROR_IPSEC_IKE_LOAD_SOFT_SA = 0x3614,ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 0x3615,ERROR_IPSEC_IKE_INVALID_COOKIE = 0x3616,ERROR_IPSEC_IKE_NO_PEER_CERT = 0x3617,ERROR_IPSEC_IKE_PEER_CRL_FAILED = 0x3618,ERROR_IPSEC_IKE_POLICY_CHANGE = 0x3619,ERROR_IPSEC_IKE_NO_MM_POLICY = 0x361A,ERROR_IPSEC_IKE_NOTCBPRIV = 0x361B,ERROR_IPSEC_IKE_SECLOADFAIL = 0x361C,ERROR_IPSEC_IKE_FAILSSPINIT = 0x361D,ERROR_IPSEC_IKE_FAILQUERYSSP = 0x361E,ERROR_IPSEC_IKE_SRVACQFAIL = 0x361F,ERROR_IPSEC_IKE_SRVQUERYCRED = 0x3620,ERROR_IPSEC_IKE_GETSPIFAIL = 0x3621,ERROR_IPSEC_IKE_INVALID_FILTER = 0x3622,ERROR_IPSEC_IKE_OUT_OF_MEMORY = 0x3623,ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 0x3624,ERROR_IPSEC_IKE_INVALID_POLICY = 0x3625,ERROR_IPSEC_IKE_UNKNOWN_DOI = 0x3626,ERROR_IPSEC_IKE_INVALID_SITUATION = 0x3627,ERROR_IPSEC_IKE_DH_FAILURE = 0x3628,ERROR_IPSEC_IKE_INVALID_GROUP = 0x3629,ERROR_IPSEC_IKE_ENCRYPT = 0x362A,ERROR_IPSEC_IKE_DECRYPT = 0x362B,ERROR_IPSEC_IKE_POLICY_MATCH = 0x362C,ERROR_IPSEC_IKE_UNSUPPORTED_ID = 0x362D,ERROR_IPSEC_IKE_INVALID_HASH = 0x362E,ERROR_IPSEC_IKE_INVALID_HASH_ALG = 0x362F,ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 0x3630,ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 0x3631,ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 0x3632,ERROR_IPSEC_IKE_INVALID_SIG = 0x3633,ERROR_IPSEC_IKE_LOAD_FAILED = 0x3634,ERROR_IPSEC_IKE_RPC_DELETE = 0x3635,ERROR_IPSEC_IKE_BENIGN_REINIT = 0x3636,ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 0x3637,ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 0x3639,ERROR_IPSEC_IKE_MM_LIMIT = 0x363A,ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 0x363B,ERROR_IPSEC_IKE_NEG_STATUS_END = 0x363C,};
enum MACRO_ES_EX {ES_EX_CLEARONBACKPRESSHOLD = 0x1,};
enum MACRO_EVENT {EVENT_MODIFY_STATE = 0x2,EVENT_ALL_ACCESS = 0x1F0003,};
enum MACRO_EVLEN {EVLEN = 16,UNLEN = 256,};
enum MACRO_EXTRA {EXTRA_EXIT_POINT_DELETED = 0xC00037E0,EXTRA_EXIT_POINT_NOT_DELETED = 0xC00037E1,};
enum MACRO_E_XML {E_XML_NOTWF = 0xC00CE223,E_XML_NODTD = 0xC00CE224,E_XML_INVALID = 0xC00CE225,};
enum MACRO_FAULT {FAULT_INVALID_ACTION = 401,FAULT_INVALID_ARG = 402,FAULT_INVALID_SEQUENCE_NUMBER = 403,FAULT_INVALID_VARIABLE = 404,FAULT_DEVICE_INTERNAL_ERROR = 501,FAULT_ACTION_SPECIFIC_BASE = 600,FAULT_ACTION_SPECIFIC_MAX = 899,};
enum MACRO_FCIDM {FCIDM_SHVIEWFIRST = 0x0,FCIDM_SHVIEWLAST = 0x7FFF,FCIDM_BROWSERFIRST = 0xA000,FCIDM_BROWSERLAST = 0xBF00,FCIDM_GLOBALFIRST = 0x8000,FCIDM_GLOBALLAST = 0x9FFF,FCIDM_MENU_FILE = 0x8000,FCIDM_MENU_EDIT = 0x8040,FCIDM_MENU_VIEW = 0x8080,FCIDM_MENU_VIEW_SEP_OPTIONS = 0x8081,FCIDM_MENU_TOOLS = 0x80C0,FCIDM_MENU_TOOLS_SEP_GOTO = 0x80C1,FCIDM_MENU_HELP = 0x8100,FCIDM_MENU_FIND = 0x8140,FCIDM_MENU_EXPLORE = 0x8150,FCIDM_MENU_FAVORITES = 0x8170,FCIDM_MENU_DESKTOPSHORTCUT = 0x8000,FCIDM_MENU_DELETE = 0x8002,FCIDM_MENU_RENAME = 0x8004,FCIDM_MENU_PROPERTIES = 0x8008,FCIDM_TOOLBAR = 0xA000,FCIDM_STATUS = 0xA001,};
enum MACRO_FIRST {TV_FIRST = 0x1100,HDM_FIRST = 0x1200,NM_FIRST = 0x0,};
enum MACRO_FLAGS {FLAGS_ERROR_UI_FILTER_FOR_ERRORS = 0x1,FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS = 0x2,FLAGS_ERROR_UI_FLAGS_GENERATE_DATA = 0x4,FLAGS_ERROR_UI_FLAGS_NO_UI = 0x8,FLAGS_ERROR_UI_SERIALIZE_DIALOGS = 0x10,};
enum MACRO_FLUSH {FLUSH_UPLOAD = 0x2,FLUSH_DOWNLOAD = 0x4,FLUSH_FORCE = 0x8,FLUSH_NO_UI = 0x10,FLUSH_ASYNC_OK = 0x20,};
enum MACRO_FONTS {FONTS_TAHOMA_1_07 = 1,};
enum MACRO_FORCE {FORCE_SAVE = 0x4,};
enum MACRO_FRAME {FRAME_FPO = 0,FRAME_TRAP = 1,FRAME_TSS = 2,FRAME_NONFPO = 3,};
enum MACRO_FSCTL {FSCTL_NDISUIO_BASE = 18,};
enum MACRO_FVSIF {FVSIF_RECT = 0x1,FVSIF_PINNED = 0x2,FVSIF_NEWFAILED = 0x8000000,FVSIF_NEWFILE = 0x80000000,FVSIF_CANVIEWIT = 0x40000000,};
enum MACRO_GNLEN {GNLEN = 256,};
enum MACRO_GROUP {GROUP_OWNER_STORAGE_SIZE = 4,};
enum MACRO_HBODY {HBODY_ROOT = 0xFFFFFFFF,};
enum MACRO_HFILE {HFILE_ERROR = -1,};
enum MACRO_HHWIN {HHWIN_PROP_ONTOP = 2,HHWIN_PROP_NOTITLEBAR = 4,HHWIN_PROP_NODEF_STYLES = 8,HHWIN_PROP_NODEF_EXSTYLES = 16,HHWIN_PROP_TRI_PANE = 32,HHWIN_PROP_NOTB_TEXT = 64,HHWIN_PROP_POST_QUIT = 128,HHWIN_PROP_AUTO_SYNC = 256,HHWIN_PROP_TRACKING = 512,HHWIN_PROP_TAB_SEARCH = 1024,HHWIN_PROP_TAB_HISTORY = 2048,HHWIN_PROP_TAB_BOOKMARKS = 4096,HHWIN_PROP_CHANGE_TITLE = 8192,HHWIN_PROP_NAV_ONLY_WIN = 16384,HHWIN_PROP_NO_TOOLBAR = 32768,HHWIN_PROP_MENU = 65536,HHWIN_PROP_TAB_ADVSEARCH = 131072,HHWIN_PROP_USER_POS = 131072,HHWIN_PARAM_PROPERTIES = 2,HHWIN_PARAM_STYLES = 4,HHWIN_PARAM_EXSTYLES = 8,HHWIN_PARAM_RECT = 16,HHWIN_PARAM_NAV_WIDTH = 32,HHWIN_PARAM_SHOWSTATE = 64,HHWIN_PARAM_INFOTYPES = 128,HHWIN_PARAM_TB_FLAGS = 256,HHWIN_PARAM_EXPANSION = 512,HHWIN_PARAM_TABPOS = 1024,HHWIN_PARAM_TABORDER = 2048,HHWIN_PARAM_HISTORY_COUNT = 4096,HHWIN_PARAM_CUR_TAB = 8192,HHWIN_BUTTON_EXPAND = 2,HHWIN_BUTTON_BACK = 4,HHWIN_BUTTON_FORWARD = 8,HHWIN_BUTTON_STOP = 16,HHWIN_BUTTON_REFRESH = 32,HHWIN_BUTTON_HOME = 64,HHWIN_BUTTON_BROWSE_FWD = 128,HHWIN_BUTTON_BROWSE_BCK = 256,HHWIN_BUTTON_NOTES = 512,HHWIN_BUTTON_CONTENTS = 1024,HHWIN_BUTTON_SYNC = 2048,HHWIN_BUTTON_OPTIONS = 4096,HHWIN_BUTTON_PRINT = 8192,HHWIN_BUTTON_INDEX = 16384,HHWIN_BUTTON_SEARCH = 32768,HHWIN_BUTTON_HISTORY = 65536,HHWIN_BUTTON_BOOKMARKS = 131072,HHWIN_BUTTON_JUMP1 = 262144,HHWIN_BUTTON_JUMP2 = 524288,HHWIN_BUTTON_ZOOM = 1048576,HHWIN_BUTTON_TOC_NEXT = 2097152,HHWIN_BUTTON_TOC_PREV = 4194304,HHWIN_DEF_BUTTONS = 12294,};
enum MACRO_HINST {HINST_COMMCTRL = -1,};
enum MACRO_HLINK {HLINK_E_FIRST = -2147221248,HLINK_S_FIRST = 262400,HLINK_S_DONTHIDE = 262400,};
enum MACRO_HTTOP {HTTOP = 12,};
enum MACRO_HTTPD {HTTPD_OPTION_ISAPI_EXTENSIONS = 0x1,HTTPD_OPTION_ISAPI_FILTERS = 0x2,HTTPD_OPTION_AUTHENTICATION = 0x4,HTTPD_OPTION_SSL = 0x8,HTTPD_OPTION_WEBDAV = 0x10,};
enum MACRO_IDHOT {IDHOT_SNAPWINDOW = -1,IDHOT_SNAPDESKTOP = -2,};
enum MACRO_IDYES {IDYES = 6,};
enum MACRO_IMAGE {IMAGE_DOS_SIGNATURE = 0x5A4D,IMAGE_OS2_SIGNATURE = 0x454E,IMAGE_OS2_SIGNATURE_LE = 0x454C,IMAGE_VXD_SIGNATURE = 0x454C,IMAGE_NT_SIGNATURE = 0x4550,IMAGE_SIZEOF_FILE_HEADER = 0x14,IMAGE_FILE_RELOCS_STRIPPED = 0x1,IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,IMAGE_FILE_BYTES_REVERSED_LO = 0x80,IMAGE_FILE_32BIT_MACHINE = 0x100,IMAGE_FILE_DEBUG_STRIPPED = 0x200,IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,IMAGE_FILE_SYSTEM = 0x1000,IMAGE_FILE_DLL = 0x2000,IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,IMAGE_FILE_MACHINE_UNKNOWN = 0x0,IMAGE_FILE_MACHINE_I386 = 0x14C,IMAGE_FILE_MACHINE_R3000 = 0x162,IMAGE_FILE_MACHINE_R4000 = 0x166,IMAGE_FILE_MACHINE_R10000 = 0x168,IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169,IMAGE_FILE_MACHINE_ALPHA = 0x184,IMAGE_FILE_MACHINE_POWERPC = 0x1F0,IMAGE_FILE_MACHINE_SH3 = 0x1A2,IMAGE_FILE_MACHINE_SH3E = 0x1A4,IMAGE_FILE_MACHINE_SH3DSP = 0x1A3,IMAGE_FILE_MACHINE_SH4 = 0x1A6,IMAGE_FILE_MACHINE_ARM = 0x1C0,IMAGE_FILE_MACHINE_THUMB = 0x1C2,IMAGE_FILE_MACHINE_IA64 = 0x200,IMAGE_FILE_MACHINE_MIPS16 = 0x266,IMAGE_FILE_MACHINE_MIPSFPU = 0x366,IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,IMAGE_FILE_MACHINE_ALPHA64 = 0x284,IMAGE_FILE_MACHINE_AXP64 = 0x284,IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 0x10,IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 0x38,IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 0x1C,IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 0xE0,IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 0xF0,IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10B,IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20B,IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 0xE0,IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10B,IMAGE_SUBSYSTEM_UNKNOWN = 0x0,IMAGE_SUBSYSTEM_NATIVE = 0x1,IMAGE_SUBSYSTEM_WINDOWS_GUI = 0x2,IMAGE_SUBSYSTEM_WINDOWS_CUI = 0x3,IMAGE_SUBSYSTEM_OS2_CUI = 0x5,IMAGE_SUBSYSTEM_POSIX_CUI = 0x7,IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 0x8,IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 0x9,IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,IMAGE_DIRECTORY_ENTRY_EXPORT = 0x0,IMAGE_DIRECTORY_ENTRY_IMPORT = 0x1,IMAGE_DIRECTORY_ENTRY_RESOURCE = 0x2,IMAGE_DIRECTORY_ENTRY_EXCEPTION = 0x3,IMAGE_DIRECTORY_ENTRY_SECURITY = 0x4,IMAGE_DIRECTORY_ENTRY_BASERELOC = 0x5,IMAGE_DIRECTORY_ENTRY_DEBUG = 0x6,IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 0x7,IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 0x8,IMAGE_DIRECTORY_ENTRY_TLS = 0x9,IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 0xA,IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 0xB,IMAGE_DIRECTORY_ENTRY_IAT = 0xC,IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 0xD,IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 0xE,IMAGE_SIZEOF_SHORT_NAME = 0x8,IMAGE_SIZEOF_SECTION_HEADER = 0x28,IMAGE_SCN_TYPE_NO_PAD = 0x8,IMAGE_SCN_CNT_CODE = 0x20,IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,IMAGE_SCN_LNK_OTHER = 0x100,IMAGE_SCN_LNK_INFO = 0x200,IMAGE_SCN_LNK_REMOVE = 0x800,IMAGE_SCN_LNK_COMDAT = 0x1000,IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x4000,IMAGE_SCN_GPREL = 0x8000,IMAGE_SCN_MEM_FARDATA = 0x8000,IMAGE_SCN_MEM_PURGEABLE = 0x20000,IMAGE_SCN_MEM_16BIT = 0x20000,IMAGE_SCN_MEM_LOCKED = 0x40000,IMAGE_SCN_MEM_PRELOAD = 0x80000,IMAGE_SCN_ALIGN_1BYTES = 0x100000,IMAGE_SCN_ALIGN_2BYTES = 0x200000,IMAGE_SCN_ALIGN_4BYTES = 0x300000,IMAGE_SCN_ALIGN_8BYTES = 0x400000,IMAGE_SCN_ALIGN_16BYTES = 0x500000,IMAGE_SCN_ALIGN_32BYTES = 0x600000,IMAGE_SCN_ALIGN_64BYTES = 0x700000,IMAGE_SCN_ALIGN_128BYTES = 0x800000,IMAGE_SCN_ALIGN_256BYTES = 0x900000,IMAGE_SCN_ALIGN_512BYTES = 0xA00000,IMAGE_SCN_ALIGN_1024BYTES = 0xB00000,IMAGE_SCN_ALIGN_2048BYTES = 0xC00000,IMAGE_SCN_ALIGN_4096BYTES = 0xD00000,IMAGE_SCN_ALIGN_8192BYTES = 0xE00000,IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,IMAGE_SCN_MEM_SHARED = 0x10000000,IMAGE_SCN_MEM_EXECUTE = 0x20000000,IMAGE_SCN_MEM_READ = 0x40000000,IMAGE_SCN_MEM_WRITE = 0x80000000,IMAGE_SCN_SCALE_INDEX = 0x1,IMAGE_SIZEOF_SYMBOL = 0x12,IMAGE_SYM_UNDEFINED = 0x0,IMAGE_SYM_ABSOLUTE = 0xFFFFFFFF,IMAGE_SYM_DEBUG = 0xFFFFFFFE,IMAGE_SYM_TYPE_NULL = 0x0,IMAGE_SYM_TYPE_VOID = 0x1,IMAGE_SYM_TYPE_CHAR = 0x2,IMAGE_SYM_TYPE_SHORT = 0x3,IMAGE_SYM_TYPE_INT = 0x4,IMAGE_SYM_TYPE_LONG = 0x5,IMAGE_SYM_TYPE_FLOAT = 0x6,IMAGE_SYM_TYPE_DOUBLE = 0x7,IMAGE_SYM_TYPE_STRUCT = 0x8,IMAGE_SYM_TYPE_UNION = 0x9,IMAGE_SYM_TYPE_ENUM = 0xA,IMAGE_SYM_TYPE_MOE = 0xB,IMAGE_SYM_TYPE_BYTE = 0xC,IMAGE_SYM_TYPE_WORD = 0xD,IMAGE_SYM_TYPE_UINT = 0xE,IMAGE_SYM_TYPE_DWORD = 0xF,IMAGE_SYM_TYPE_PCODE = 0x8000,IMAGE_SYM_DTYPE_NULL = 0x0,IMAGE_SYM_DTYPE_POINTER = 0x1,IMAGE_SYM_DTYPE_FUNCTION = 0x2,IMAGE_SYM_DTYPE_ARRAY = 0x3,IMAGE_SYM_CLASS_END_OF_FUNCTION = 0xFF,IMAGE_SYM_CLASS_NULL = 0x0,IMAGE_SYM_CLASS_AUTOMATIC = 0x1,IMAGE_SYM_CLASS_EXTERNAL = 0x2,IMAGE_SYM_CLASS_STATIC = 0x3,IMAGE_SYM_CLASS_REGISTER = 0x4,IMAGE_SYM_CLASS_EXTERNAL_DEF = 0x5,IMAGE_SYM_CLASS_LABEL = 0x6,IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x7,IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x8,IMAGE_SYM_CLASS_ARGUMENT = 0x9,IMAGE_SYM_CLASS_STRUCT_TAG = 0xA,IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0xB,IMAGE_SYM_CLASS_UNION_TAG = 0xC,IMAGE_SYM_CLASS_TYPE_DEFINITION = 0xD,IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0xE,IMAGE_SYM_CLASS_ENUM_TAG = 0xF,IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x10,IMAGE_SYM_CLASS_REGISTER_PARAM = 0x11,IMAGE_SYM_CLASS_BIT_FIELD = 0x12,IMAGE_SYM_CLASS_FAR_EXTERNAL = 0x44,IMAGE_SYM_CLASS_BLOCK = 0x64,IMAGE_SYM_CLASS_FUNCTION = 0x65,IMAGE_SYM_CLASS_END_OF_STRUCT = 0x66,IMAGE_SYM_CLASS_FILE = 0x67,IMAGE_SYM_CLASS_SECTION = 0x68,IMAGE_SYM_CLASS_WEAK_EXTERNAL = 0x69,};
enum MACRO_IMEAF {IMEAF_AWARE = 0x1,IMEAF_SMART_CAPS = 0x2,};
enum MACRO_IMGTF {IMGTF_CANT_SWITCH_LAYOUT = 0x1,IMGTF_CANT_UNLOAD_IME = 0x2,};
enum MACRO_INPUT {INPUT_MOUSE = 0,INPUT_KEYBOARD = 1,INPUT_HARDWARE = 2,};
enum MACRO_IOCTL {IOCTL_BLUETOOTH_GET_RFCOMM_CHANNEL = 1769568,IOCTL_BLUETOOTH_GET_PEER_DEVICE = 1769572,};
enum MACRO_IO_NO {IO_NO_INCREMENT = 0,};
enum MACRO_IPROP {IPROP_READONLY = 0x1,IPROP_READWRITE = 0x2,IPROP_CLEAN = 0x10000,IPROP_DIRTY = 0x20000,};
enum MACRO_IRLMP {IRLMP_ENUMDEVICES = 0x10,IRLMP_IAS_SET = 0x11,IRLMP_IAS_QUERY = 0x12,IRLMP_SEND_PDU_LEN = 0x13,IRLMP_EXCLUSIVE_MODE = 0x14,IRLMP_IRLPT_MODE = 0x15,IRLMP_9WIRE_MODE = 0x16,IRLMP_TINYTP_MODE = 0x17,IRLMP_PARAMETERS = 0x18,IRLMP_DISCOVERY_MODE = 0x19,IRLMP_SHARP_MODE = 0x20,IRLMP_LAZY_DISCOVERY = 0x30,};
enum MACRO_IRTIR {IRTIR_TASK_NOT_RUNNING = 0,IRTIR_TASK_RUNNING = 1,IRTIR_TASK_SUSPENDED = 2,IRTIR_TASK_PENDING = 3,IRTIR_TASK_FINISHED = 4,};
enum MACRO_ISIOI {ISIOI_ICONFILE = 0x1,ISIOI_ICONINDEX = 0x2,};
enum MACRO_JIFMK {JIFMK_SOF0 = 0xFFC0,JIFMK_SOF1 = 0xFFC1,JIFMK_SOF2 = 0xFFC2,JIFMK_SOF3 = 0xFFC3,JIFMK_SOF5 = 0xFFC5,JIFMK_SOF6 = 0xFFC6,JIFMK_SOF7 = 0xFFC7,JIFMK_JPG = 0xFFC8,JIFMK_SOF9 = 0xFFC9,JIFMK_SOF10 = 0xFFCA,JIFMK_SOF11 = 0xFFCB,JIFMK_SOF13 = 0xFFCD,JIFMK_SOF14 = 0xFFCE,JIFMK_SOF15 = 0xFFCF,JIFMK_DHT = 0xFFC4,JIFMK_DAC = 0xFFCC,JIFMK_RST0 = 0xFFD0,JIFMK_RST1 = 0xFFD1,JIFMK_RST2 = 0xFFD2,JIFMK_RST3 = 0xFFD3,JIFMK_RST4 = 0xFFD4,JIFMK_RST5 = 0xFFD5,JIFMK_RST6 = 0xFFD6,JIFMK_RST7 = 0xFFD7,JIFMK_SOI = 0xFFD8,JIFMK_EOI = 0xFFD9,JIFMK_SOS = 0xFFDA,JIFMK_DQT = 0xFFDB,JIFMK_DNL = 0xFFDC,JIFMK_DRI = 0xFFDD,JIFMK_DHP = 0xFFDE,JIFMK_EXP = 0xFFDF,JIFMK_APP0 = 0xFFE0,JIFMK_APP1 = 0xFFE1,JIFMK_APP2 = 0xFFE2,JIFMK_APP3 = 0xFFE3,JIFMK_APP4 = 0xFFE4,JIFMK_APP5 = 0xFFE5,JIFMK_APP6 = 0xFFE6,JIFMK_APP7 = 0xFFE7,JIFMK_JPG0 = 0xFFF0,JIFMK_JPG1 = 0xFFF1,JIFMK_JPG2 = 0xFFF2,JIFMK_JPG3 = 0xFFF3,JIFMK_JPG4 = 0xFFF4,JIFMK_JPG5 = 0xFFF5,JIFMK_JPG6 = 0xFFF6,JIFMK_JPG7 = 0xFFF7,JIFMK_JPG8 = 0xFFF8,JIFMK_JPG9 = 0xFFF9,JIFMK_JPG10 = 0xFFFA,JIFMK_JPG11 = 0xFFFB,JIFMK_JPG12 = 0xFFFC,JIFMK_JPG13 = 0xFFFD,JIFMK_COM = 0xFFFE,JIFMK_TEM = 0xFF01,JIFMK_RES = 0xFF02,JIFMK_00 = 0xFF00,JIFMK_FF = 0xFFFF,};
enum MACRO_L2CAP {L2CAP_MAX_MTU = 65535,};
enum MACRO_LCMAP {LCMAP_LOWERCASE = 0x100,LCMAP_UPPERCASE = 0x200,LCMAP_SORTKEY = 0x400,LCMAP_BYTEREV = 0x800,LCMAP_HIRAGANA = 0x100000,LCMAP_KATAKANA = 0x200000,LCMAP_HALFWIDTH = 0x400000,LCMAP_FULLWIDTH = 0x800000,LCMAP_LINGUISTIC_CASING = 0x1000000,LCMAP_SIMPLIFIED_CHINESE = 0x2000000,LCMAP_TRADITIONAL_CHINESE = 0x4000000,};
enum MACRO_LCRED {LCRED_STATUS_NOCRED = 0x0,LCRED_CRED_EXISTS = 0x1,LCRED_STATUS_UNKNOWN_ISSUER = 0x2,};
enum MACRO_LOCKF {LOCKF_LOGICAL_LOCK = 0x0,LOCKF_PHYSICAL_LOCK = 0x1,};
enum MACRO_LOCKP {LOCKP_ALLOW_WRITES = 0x1,LOCKP_FAIL_WRITES = 0x0,LOCKP_FAIL_MEM_MAPPING = 0x2,LOCKP_ALLOW_MEM_MAPPING = 0x0,LOCKP_USER_MASK = 0x3,LOCKP_LOCK_FOR_FORMAT = 0x4,};
enum MACRO_LPSTR {LPSTR_TEXTCALLBACKW = -1,LPSTR_TEXTCALLBACKA = -1,LPSTR_TEXTCALLBACK = -1,};
enum MACRO_LVSCW {LVSCW_AUTOSIZE = -1,LVSCW_AUTOSIZE_USEHEADER = -2,};
enum MACRO_LVSIL {LVSIL_NORMAL = 0,LVSIL_SMALL = 1,LVSIL_STATE = 2,LVSIL_HEADER = 3,};
enum MACRO_MB_OK {MB_OK = 0x0,MB_OKCANCEL = 0x1,MB_ABORTRETRYIGNORE = 0x2,MB_YESNOCANCEL = 0x3,MB_YESNO = 0x4,MB_RETRYCANCEL = 0x5,MB_ICONHAND = 0x10,MB_ICONQUESTION = 0x20,MB_ICONEXCLAMATION = 0x30,MB_ICONASTERISK = 0x40,MB_ICONWARNING = 0x30,MB_ICONERROR = 0x10,MB_ICONINFORMATION = 0x40,MB_ICONSTOP = 0x10,MB_DEFBUTTON1 = 0x0,MB_DEFBUTTON2 = 0x100,MB_DEFBUTTON3 = 0x200,MB_DEFBUTTON4 = 0x300,MB_APPLMODAL = 0x0,MB_SETFOREGROUND = 0x10000,MB_TOPMOST = 0x40000,};
enum MACRO_MCAST {MCAST_INCLUDE = 0,MCAST_EXCLUDE = 1,};
enum MACRO_MEDIA {MEDIA_STATE_CONNECTED = 0,MEDIA_STATE_DISCONNECTED = 1,MEDIA_STATE_UNKNOWN = -1,};
enum MACRO_MIXER {MIXER_SHORT_NAME_CHARS = 16,MIXER_LONG_NAME_CHARS = 64,};
enum MACRO_MKSYS {MKSYS_URLMONIKER = 6,};
enum MACRO_MMIOM {MMIOM_READ = 0,MMIOM_WRITE = 1,MMIOM_SEEK = 2,MMIOM_OPEN = 3,MMIOM_CLOSE = 4,MMIOM_WRITEFLUSH = 5,MMIOM_RENAME = 6,MMIOM_USER = 32768,};
enum MACRO_MM_S3 {MM_S3_WAVEOUT = 0x1,MM_S3_WAVEIN = 0x2,MM_S3_MIDIOUT = 0x3,MM_S3_MIDIIN = 0x4,MM_S3_FMSYNTH = 0x5,MM_S3_MIXER = 0x6,MM_S3_AUX = 0x7,MM_SEERSYS_SEERSYNTH = 0x1,MM_SEERSYS_SEERWAVE = 0x2,MM_SEERSYS_SEERMIX = 0x3,MM_SOFTSOUND_CODEC = 0x1,MM_SOUNDESIGNS_WAVEIN = 0x1,MM_SOUNDESIGNS_WAVEOUT = 0x2,MM_SSP_SNDFESWAVEIN = 0x1,MM_SSP_SNDFESWAVEOUT = 0x2,MM_SSP_SNDFESMIDIIN = 0x3,MM_SSP_SNDFESMIDIOUT = 0x4,MM_SSP_SNDFESSYNTH = 0x5,MM_SSP_SNDFESMIX = 0x6,MM_SSP_SNDFESAUX = 0x7,MM_TDK_MW_MIDI_SYNTH = 0x1,MM_TDK_MW_MIDI_IN = 0x2,MM_TDK_MW_MIDI_OUT = 0x3,MM_TDK_MW_WAVE_IN = 0x4,MM_TDK_MW_WAVE_OUT = 0x5,MM_TDK_MW_AUX = 0x6,MM_TDK_MW_MIXER = 0xA,MM_TDK_MW_AUX_MASTER = 0x64,MM_TDK_MW_AUX_BASS = 0x65,MM_TDK_MW_AUX_TREBLE = 0x66,MM_TDK_MW_AUX_MIDI_VOL = 0x67,MM_TDK_MW_AUX_WAVE_VOL = 0x68,MM_TDK_MW_AUX_WAVE_RVB = 0x69,MM_TDK_MW_AUX_WAVE_CHR = 0x6A,MM_TDK_MW_AUX_VOL = 0x6B,MM_TDK_MW_AUX_RVB = 0x6C,MM_TDK_MW_AUX_CHR = 0x6D,MM_TBS_TROPEZ_WAVEIN = 0x25,MM_TBS_TROPEZ_WAVEOUT = 0x26,MM_TBS_TROPEZ_AUX1 = 0x27,MM_TBS_TROPEZ_AUX2 = 0x28,MM_TBS_TROPEZ_LINE = 0x29,MM_VIENNASYS_TSP_WAVE_DRIVER = 0x1,MM_VIONA_QVINPCI_MIXER = 0x1,MM_VIONA_QVINPCI_WAVEIN = 0x2,MM_VIONAQVINPCI_WAVEOUT = 0x3,MM_VIONA_BUSTER_MIXER = 0x4,MM_VIONA_CINEMASTER_MIXER = 0x5,MM_VIONA_CONCERTO_MIXER = 0x6,MM_WILDCAT_AUTOSCOREMIDIIN = 0x1,MM_WILLOWPOND_FMSYNTH_STEREO = 0x14,MM_WILLOWPOND_SNDPORT_WAVEIN = 0x64,MM_WILLOWPOND_SNDPORT_WAVEOUT = 0x65,MM_WILLOWPOND_SNDPORT_MIXER = 0x66,MM_WILLOWPOND_SNDPORT_AUX = 0x67,MM_WILLOWPOND_PH_WAVEIN = 0x68,MM_WILLOWPOND_PH_WAVEOUT = 0x69,MM_WILLOWPOND_PH_MIXER = 0x6A,MM_WILLOWPOND_PH_AUX = 0x6B,MM_WORKBIT_MIXER = 0x1,MM_WORKBIT_WAVEOUT = 0x2,MM_WORKBIT_WAVEIN = 0x3,MM_WORKBIT_MIDIIN = 0x4,MM_WORKBIT_MIDIOUT = 0x5,MM_WORKBIT_FMSYNTH = 0x6,MM_WORKBIT_AUX = 0x7,MM_WORKBIT_JOYSTICK = 0x8,MM_FHGIIS_MPEGLAYER3 = 0xA,};
enum MACRO_MQMSG {MQMSG_CLASS_NORMAL = 0,MQMSG_CLASS_REPORT = 1,MQMSG_CLASS_ACK_REACH_QUEUE = 2,MQMSG_CLASS_ACK_RECEIVE = 16384,MQMSG_CLASS_NACK_BAD_DST_Q = 32768,MQMSG_CLASS_NACK_PURGED = 32769,MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT = 32770,MQMSG_CLASS_NACK_Q_EXCEED_QUOTA = 32771,MQMSG_CLASS_NACK_ACCESS_DENIED = 32772,MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED = 32773,MQMSG_CLASS_NACK_BAD_SIGNATURE = 32774,MQMSG_CLASS_NACK_BAD_ENCRYPTION = 32775,MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT = 32776,MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q = 32777,MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG = 32778,MQMSG_CLASS_NACK_Q_DELETED = 49152,MQMSG_CLASS_NACK_Q_PURGED = 49153,MQMSG_CLASS_NACK_RECEIVE_TIMEOUT = 49154,MQMSG_ACKNOWLEDGMENT_NONE = 0,MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL = 1,MQMSG_ACKNOWLEDGMENT_POS_RECEIVE = 2,MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL = 4,MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE = 8,MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE = 4,MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE = 5,MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE = 12,MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE = 14,MQMSG_DELIVERY_EXPRESS = 0,MQMSG_DELIVERY_RECOVERABLE = 1,MQMSG_JOURNAL_NONE = 0,MQMSG_DEADLETTER = 1,MQMSG_JOURNAL = 2,MQMSG_TRACE_NONE = 0,MQMSG_SEND_ROUTE_TO_REPORT_QUEUE = 1,MQMSG_SENDERID_TYPE_NONE = 0,MQMSG_SENDERID_TYPE_SID = 1,MQMSG_PRIV_LEVEL_NONE = 0,MQMSG_PRIV_LEVEL_BODY = 1,MQMSG_AUTH_LEVEL_NONE = 0,MQMSG_AUTH_LEVEL_ALWAYS = 1,};
enum MACRO_MQSEC {MQSEC_DELETE_MESSAGE = 0x1,MQSEC_PEEK_MESSAGE = 0x2,MQSEC_WRITE_MESSAGE = 0x4,MQSEC_DELETE_JOURNAL_MESSAGE = 0x8,MQSEC_SET_QUEUE_PROPERTIES = 0x10,MQSEC_GET_QUEUE_PROPERTIES = 0x20,MQSEC_DELETE_QUEUE = 0x10000,MQSEC_GET_QUEUE_PERMISSIONS = 0x20000,MQSEC_CHANGE_QUEUE_PERMISSIONS = 0x40000,MQSEC_TAKE_QUEUE_OWNERSHIP = 0x80000,MQSEC_RECEIVE_MESSAGE = 0x3,MQSEC_RECEIVE_JOURNAL_MESSAGE = 0xA,MQSEC_QUEUE_GENERIC_READ = 0x2002B,MQSEC_QUEUE_GENERIC_WRITE = 0x20024,MQSEC_QUEUE_GENERIC_EXECUTE = 0x0,MQSEC_QUEUE_GENERIC_ALL = 0xF003F,};
enum MACRO_MQ_OK {MQ_OK = 0,MQ_ERROR = -1072824319,MQ_ERROR_PROPERTY = -1072824318,MQ_ERROR_QUEUE_NOT_FOUND = -1072824317,MQ_ERROR_QUEUE_EXISTS = -1072824315,MQ_ERROR_INVALID_PARAMETER = -1072824314,MQ_ERROR_INVALID_HANDLE = -1072824313,MQ_ERROR_OPERATION_CANCELLED = -1072824312,MQ_ERROR_SHARING_VIOLATION = -1072824311,MQ_ERROR_SERVICE_NOT_AVAILABLE = -1072824309,MQ_ERROR_MACHINE_NOT_FOUND = -1072824307,MQ_ERROR_ILLEGAL_SORT = -1072824304,MQ_ERROR_ILLEGAL_USER = -1072824303,MQ_ERROR_NO_DS = -1072824301,MQ_ERROR_ILLEGAL_QUEUE_PATHNAME = -1072824300,MQ_ERROR_ILLEGAL_PROPERTY_VALUE = -1072824296,MQ_ERROR_ILLEGAL_PROPERTY_VT = -1072824295,MQ_ERROR_BUFFER_OVERFLOW = -1072824294,MQ_ERROR_IO_TIMEOUT = -1072824293,MQ_ERROR_ILLEGAL_CURSOR_ACTION = -1072824292,MQ_ERROR_MESSAGE_ALREADY_RECEIVED = -1072824291,MQ_ERROR_ILLEGAL_FORMATNAME = -1072824290,MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL = -1072824289,MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION = -1072824288,MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR = -1072824287,MQ_ERROR_SENDERID_BUFFER_TOO_SMALL = -1072824286,MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = -1072824285,MQ_ERROR_CANNOT_IMPERSONATE_CLIENT = -1072824284,MQ_ERROR_ACCESS_DENIED = -1072824283,MQ_ERROR_PRIVILEGE_NOT_HELD = -1072824282,MQ_ERROR_INSUFFICIENT_RESOURCES = -1072824281,MQ_ERROR_USER_BUFFER_TOO_SMALL = -1072824280,MQ_ERROR_MESSAGE_STORAGE_FAILED = -1072824278,MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL = -1072824277,MQ_ERROR_INVALID_CERTIFICATE = -1072824276,MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE = -1072824275,MQ_ERROR_NO_INTERNAL_USER_CERT = -1072824273,MQ_ERROR_CORRUPTED_SECURITY_DATA = -1072824272,MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE = -1072824271,MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = -1072824269,MQ_ERROR_BAD_SECURITY_CONTEXT = -1072824267,MQ_ERROR_COULD_NOT_GET_USER_SID = -1072824266,MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO = -1072824265,MQ_ERROR_ILLEGAL_MQCOLUMNS = -1072824264,MQ_ERROR_ILLEGAL_PROPID = -1072824263,MQ_ERROR_ILLEGAL_RELATION = -1072824262,MQ_ERROR_ILLEGAL_PROPERTY_SIZE = -1072824261,MQ_ERROR_ILLEGAL_RESTRICTION_PROPID = -1072824260,MQ_ERROR_ILLEGAL_MQQUEUEPROPS = -1072824259,MQ_ERROR_PROPERTY_NOTALLOWED = -1072824258,MQ_ERROR_INSUFFICIENT_PROPERTIES = -1072824257,MQ_ERROR_MACHINE_EXISTS = -1072824256,MQ_ERROR_ILLEGAL_MQQMPROPS = -1072824255,MQ_ERROR_DS_IS_FULL = -1072824254,MQ_ERROR_DS_ERROR = -1072824253,MQ_ERROR_INVALID_OWNER = -1072824252,MQ_ERROR_UNSUPPORTED_ACCESS_MODE = -1072824251,MQ_ERROR_RESULT_BUFFER_TOO_SMALL = -1072824250,MQ_ERROR_DELETE_CN_IN_USE = -1072824248,MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = -1072824247,MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE = -1072824246,MQ_ERROR_QUEUE_NOT_AVAILABLE = -1072824245,MQ_ERROR_DTC_CONNECT = -1072824244,MQ_ERROR_TRANSACTION_IMPORT = -1072824242,MQ_ERROR_TRANSACTION_USAGE = -1072824240,MQ_ERROR_TRANSACTION_SEQUENCE = -1072824239,MQ_ERROR_MISSING_CONNECTOR_TYPE = -1072824235,MQ_ERROR_STALE_HANDLE = -1072824234,MQ_ERROR_TRANSACTION_ENLIST = -1072824232,MQ_ERROR_QUEUE_DELETED = -1072824230,MQ_ERROR_ILLEGAL_CONTEXT = -1072824229,MQ_ERROR_ILLEGAL_SORT_PROPID = -1072824228,MQ_ERROR_LABEL_TOO_LONG = -1072824227,MQ_ERROR_LABEL_BUFFER_TOO_SMALL = -1072824226,MQ_ERROR_MQIS_SERVER_EMPTY = -1072824225,MQ_ERROR_MQIS_READONLY_MODE = -1072824224,MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL = -1072824223,MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL = -1072824222,MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL = -1072824221,MQ_ERROR_ILLEGAL_OPERATION = -1072824220,MQ_ERROR_WRITE_NOT_ALLOWED = -1072824219,MQ_ERROR_WKS_CANT_SERVE_CLIENT = -1072824218,MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW = -1072824217,MQ_CORRUPTED_QUEUE_WAS_DELETED = -1072824216,MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE = -1072824215,MQ_INFORMATION_PROPERTY = 1074659329,MQ_INFORMATION_ILLEGAL_PROPERTY = 1074659330,MQ_INFORMATION_PROPERTY_IGNORED = 1074659331,MQ_INFORMATION_UNSUPPORTED_PROPERTY = 1074659332,MQ_INFORMATION_DUPLICATE_PROPERTY = 1074659333,MQ_INFORMATION_OPERATION_PENDING = 1074659334,MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL = 1074659337,};
enum MACRO_NNLEN {NNLEN = 80,};
enum MACRO_NT351 {NT351_INTERFACE_SIZE = 0x40,};
enum MACRO_NWSAP {NWSAP_EVENT_KEY_NOT_FOUND = 0xC0002134,NWSAP_EVENT_WSASTARTUP_FAILED = 0xC0002135,NWSAP_EVENT_SOCKET_FAILED = 0xC0002136,NWSAP_EVENT_SETOPTBCAST_FAILED = 0xC0002137,NWSAP_EVENT_BIND_FAILED = 0xC0002138,NWSAP_EVENT_GETSOCKNAME_FAILED = 0xC0002139,NWSAP_EVENT_OPTEXTENDEDADDR_FAILED = 0xC000213A,NWSAP_EVENT_OPTBCASTINADDR_FAILED = 0xC000213B,NWSAP_EVENT_CARDMALLOC_FAILED = 0xC000213C,NWSAP_EVENT_NOCARDS = 0xC000213D,NWSAP_EVENT_THREADEVENT_FAIL = 0xC000213E,NWSAP_EVENT_RECVSEM_FAIL = 0xC000213F,NWSAP_EVENT_SENDEVENT_FAIL = 0xC0002140,NWSAP_EVENT_STARTRECEIVE_ERROR = 0xC0002141,NWSAP_EVENT_STARTWORKER_ERROR = 0xC0002142,NWSAP_EVENT_TABLE_MALLOC_FAILED = 0xC0002143,NWSAP_EVENT_HASHTABLE_MALLOC_FAILED = 0xC0002144,NWSAP_EVENT_STARTLPCWORKER_ERROR = 0xC0002145,NWSAP_EVENT_CREATELPCPORT_ERROR = 0xC0002146,NWSAP_EVENT_CREATELPCEVENT_ERROR = 0xC0002147,NWSAP_EVENT_LPCLISTENMEMORY_ERROR = 0xC0002148,NWSAP_EVENT_LPCHANDLEMEMORY_ERROR = 0xC0002149,NWSAP_EVENT_BADWANFILTER_VALUE = 0xC000214A,NWSAP_EVENT_CARDLISTEVENT_FAIL = 0xC000214B,NWSAP_EVENT_SDMDEVENT_FAIL = 0xC000214C,NWSAP_EVENT_INVALID_FILTERNAME = 0x8000214D,NWSAP_EVENT_WANSEM_FAIL = 0xC000214E,NWSAP_EVENT_WANSOCKET_FAILED = 0xC000214F,NWSAP_EVENT_WANBIND_FAILED = 0xC0002150,NWSAP_EVENT_STARTWANWORKER_ERROR = 0xC0002151,NWSAP_EVENT_STARTWANCHECK_ERROR = 0xC0002152,NWSAP_EVENT_OPTMAXADAPTERNUM_ERROR = 0xC0002153,NWSAP_EVENT_WANHANDLEMEMORY_ERROR = 0xC0002154,NWSAP_EVENT_WANEVENT_ERROR = 0xC0002155,};
enum MACRO_OLE32 {OLE32_MCOMBASE = 1,OLE32_MCOMMEM = 1,OLE32_MCOMSTR = 1,OLE32_MCOMMON = 1,OLE32_MCOMLIB = 1,OLE32_OLE232 = 1,OLE32_DOCFILE = 1,OLE32_MSF = 1,OLE32_EXP = 1,OLE32_MCOMGUID = 1,OLE32_MCOMSTM = 1,};
enum MACRO_PCIID {PCIID_CLASS = 0,PCIID_SUBCLASS = 1,PCIID_PROGIF = 2,PCIID_VENDORID = 3,PCIID_DEVICEID = 4,PCIID_REVISIONID = 5,PCIID_SUBSYSTEMVENDORID = 6,PCIID_SUBSYSTEMID = 7,PCIID_MAXNUMIDS = 8,};
enum MACRO_PDERR {PDERR_PRINTERCODES = 0x1000,PDERR_SETUPFAILURE = 0x1001,PDERR_PARSEFAILURE = 0x1002,PDERR_RETDEFFAILURE = 0x1003,PDERR_LOADDRVFAILURE = 0x1004,PDERR_GETDEVMODEFAIL = 0x1005,PDERR_INITFAILURE = 0x1006,PDERR_NODEVICES = 0x1007,PDERR_NODEFAULTPRN = 0x1008,PDERR_DNDMMISMATCH = 0x1009,PDERR_CREATEICFAILURE = 0x100A,PDERR_PRINTERNOTFOUND = 0x100B,PDERR_DEFAULTDIFFERENT = 0x100C,};
enum MACRO_PDEXP {PDEXP_10UV = 0x0,PDEXP_100UV = 0x1,PDEXP_1MV = 0x2,PDEXP_10MV = 0x3,PDEXP_100MV = 0x4,PDEXP_1V = 0x5,PDEXP_10V = 0x6,PDEXP_100V = 0x7,PDEXP_100NA = 0x0,PDEXP_1UA = 0x1,PDEXP_10UA = 0x2,PDEXP_100UA = 0x3,PDEXP_1MA = 0x4,PDEXP_10MA = 0x5,PDEXP_100MA = 0x6,PDEXP_1A = 0x7,};
enum MACRO_PHONE {PHONE_BUTTON = 14,PHONE_CLOSE = 15,PHONE_DEVSPECIFIC = 16,PHONE_REPLY = 17,PHONE_STATE = 18,};
enum MACRO_PIDDI {PIDDI_THUMBNAIL = 0x2,};
enum MACRO_PIDSI {PIDSI_TITLE = 0x2,PIDSI_SUBJECT = 0x3,PIDSI_AUTHOR = 0x4,PIDSI_KEYWORDS = 0x5,PIDSI_COMMENTS = 0x6,PIDSI_TEMPLATE = 0x7,PIDSI_LASTAUTHOR = 0x8,PIDSI_REVNUMBER = 0x9,PIDSI_EDITTIME = 0xA,PIDSI_LASTPRINTED = 0xB,PIDSI_CREATE_DTM = 0xC,PIDSI_LASTSAVE_DTM = 0xD,PIDSI_PAGECOUNT = 0xE,PIDSI_WORDCOUNT = 0xF,PIDSI_CHARCOUNT = 0x10,PIDSI_THUMBNAIL = 0x11,PIDSI_APPNAME = 0x12,PIDSI_DOC_SECURITY = 0x13,};
enum MACRO_PITCH {DEFAULT_PITCH = 0,FIXED_PITCH = 1,VARIABLE_PITCH = 2,};
enum MACRO_PM_PM {PM_PM_MDD = 1,PM_PM_BATTERY = 1,PM_PM_DEFAULT_PDD = 1,};
enum MACRO_POWER {POWER_STATE_ON = 0x10000,POWER_STATE_OFF = 0x20000,POWER_STATE_CRITICAL = 0x40000,POWER_STATE_BOOT = 0x80000,POWER_STATE_IDLE = 0x100000,POWER_STATE_SUSPEND = 0x200000,POWER_STATE_RESET = 0x800000,};
enum MACRO_PRINT {PRINT_DONTBOTHERUSER = 0x1,PRINT_WAITFORCOMPLETION = 0x2,};
enum MACRO_PROTO {PROTO_IP_OTHER = 1,PROTO_IP_LOCAL = 2,PROTO_IP_NETMGMT = 3,PROTO_IP_ICMP = 4,};
enum MACRO_PROXY {PROXY_ARP = 22,};
enum MACRO_PSBTN {PSBTN_BACK = 0,PSBTN_NEXT = 1,PSBTN_FINISH = 2,PSBTN_OK = 3,PSBTN_APPLYNOW = 4,PSBTN_CANCEL = 5,PSBTN_HELP = 6,PSBTN_MAX = 6,};
enum MACRO_PSINK {PSINK_E_QUERY_ONLY = 0x80041790,PSINK_E_INDEX_ONLY = 0x80041791,PSINK_E_LARGE_ATTACHMENT = 0x80041792,PSINK_S_LARGE_WORD = 0x41793,};
enum MACRO_PSPCB {PSPCB_RELEASE = 1,PSPCB_CREATE = 2,};
enum MACRO_PT_MV {PT_MV_I2 = 4098,PT_MV_LONG = 4099,PT_MV_R4 = 4100,PT_MV_DOUBLE = 4101,PT_MV_CURRENCY = 4102,PT_MV_APPTIME = 4103,PT_MV_SYSTIME = 4160,PT_MV_STRING8 = 4126,PT_MV_BINARY = 4354,PT_MV_UNICODE = 4127,PT_MV_CLSID = 4168,PT_MV_I8 = 4116,PT_MV_SHORT = 4098,PT_MV_I4 = 4099,PT_MV_FLOAT = 4100,PT_MV_R8 = 4101,PT_MV_LONGLONG = 4116,};
enum MACRO_PURGE {PURGE_TXABORT = 0x1,PURGE_RXABORT = 0x2,PURGE_TXCLEAR = 0x4,PURGE_RXCLEAR = 0x8,};
enum MACRO_PWLEN {PWLEN = 256,};
enum MACRO_QNLEN {QNLEN = 80,};
enum MACRO_QUERY {QUERY_E_FAILED = 0x80041600,QUERY_E_INVALIDQUERY = 0x80041601,QUERY_E_INVALIDRESTRICTION = 0x80041602,QUERY_E_INVALIDSORT = 0x80041603,QUERY_E_INVALIDCATEGORIZE = 0x80041604,QUERY_E_ALLNOISE = 0x80041605,QUERY_E_TOOCOMPLEX = 0x80041606,QUERY_E_TIMEDOUT = 0x80041607,QUERY_E_DUPLICATE_OUTPUT_COLUMN = 0x80041608,QUERY_E_INVALID_OUTPUT_COLUMN = 0x80041609,QUERY_E_INVALID_DIRECTORY = 0x8004160A,QUERY_E_DIR_ON_REMOVABLE_DRIVE = 0x8004160B,QUERY_S_NO_QUERY = 0x8004160C,};
enum MACRO_QUTIL {QUTIL_E_CANT_CONVERT_VROOT = 0x80041676,};
enum MACRO_RBBIM {RBBIM_STYLE = 0x1,RBBIM_COLORS = 0x2,RBBIM_TEXT = 0x4,RBBIM_IMAGE = 0x8,RBBIM_CHILD = 0x10,RBBIM_CHILDSIZE = 0x20,RBBIM_SIZE = 0x40,RBBIM_BACKGROUND = 0x80,RBBIM_ID = 0x100,RBBIM_IDEALSIZE = 0x200,RBBIM_LPARAM = 0x400,};
enum MACRO_RCRED {RCRED_STATUS_NOCRED = 0x0,RCRED_CRED_EXISTS = 0x1,RCRED_STATUS_UNKNOWN_ISSUER = 0x2,};
enum MACRO_REGDB {REGDB_E_FIRST = 0x80040150,REGDB_E_LAST = 0x8004015F,REGDB_S_FIRST = 0x40150,REGDB_S_LAST = 0x4015F,};
enum MACRO_RELOP {RELOP_LT = 0,RELOP_LE = 1,RELOP_GT = 2,RELOP_GE = 3,RELOP_EQ = 4,RELOP_NE = 5,RELOP_RE = 6,};
enum MACRO_RFCCM {RFCCM_VIEWLOCAL = 0x1,RFCCM_VIEWNETWORK = 0x2,RFCCM_NEEDELEMENT = 0x3,};
enum MACRO_RMLEN {RMLEN = 98,};
enum MACRO_ROUTE {ROUTE_MATCHING = 31,ROUTE_LONGER = 32,ROUTE_SHORTER = 33,ROUTE_STATE = 34,};
enum MACRO_RPC_C {RPC_C_AUTHZ_NONE = 0,RPC_C_AUTHZ_NAME = 1,RPC_C_AUTHZ_DCE = 2,};
enum MACRO_RTCAU {RTCAU_BASIC = 0x1,RTCAU_DIGEST = 0x2,RTCAU_NTLM = 0x4,RTCAU_KERBEROS = 0x8,RTCAU_USE_LOGON_CRED = 0x10000,};
enum MACRO_RTCCS {RTCCS_FORCE_PROFILE = 0x1,RTCCS_FAIL_ON_REDIRECT = 0x2,};
enum MACRO_RTCEF {RTCEF_CLIENT = 0x1,RTCEF_REGISTRATION_STATE_CHANGE = 0x2,RTCEF_SESSION_STATE_CHANGE = 0x4,RTCEF_SESSION_OPERATION_COMPLETE = 0x8,RTCEF_PARTICIPANT_STATE_CHANGE = 0x10,RTCEF_MEDIA = 0x20,RTCEF_INTENSITY = 0x40,RTCEF_MESSAGING = 0x80,RTCEF_BUDDY = 0x100,RTCEF_WATCHER = 0x200,RTCEF_PROFILE = 0x400,RTCEF_USERSEARCH = 0x800,RTCEF_INFO = 0x1000,RTCEF_GROUP = 0x2000,RTCEF_MEDIA_REQUEST = 0x4000,RTCEF_ROAMING = 0x10000,RTCEF_PRESENCE_PROPERTY = 0x20000,RTCEF_BUDDY2 = 0x40000,RTCEF_WATCHER2 = 0x80000,RTCEF_SESSION_REFER_STATUS = 0x100000,RTCEF_SESSION_REFERRED = 0x200000,RTCEF_REINVITE = 0x400000,RTCEF_PRESENCE_DATA = 0x800000,RTCEF_PRESENCE_STATUS = 0x1000000,RTCEF_ALL = 0x1FFFFFF,};
enum MACRO_RTCIF {RTCIF_DISABLE_MEDIA = 0x1,RTCIF_DISABLE_UPNP = 0x2,};
enum MACRO_RTCMT {RTCMT_AUDIO_SEND = 0x1,RTCMT_AUDIO_RECEIVE = 0x2,RTCMT_VIDEO_SEND = 0x4,RTCMT_VIDEO_RECEIVE = 0x8,RTCMT_T120_SENDRECV = 0x10,RTCMT_ALL_RTP = 0xF,RTCMT_ALL = 0x1F,};
enum MACRO_RTCRF {RTCRF_REGISTER_INVITE_SESSIONS = 0x1,RTCRF_REGISTER_MESSAGE_SESSIONS = 0x2,RTCRF_REGISTER_PRESENCE = 0x4,RTCRF_REGISTER_NOTIFY = 0x8,RTCRF_REGISTER_ALL = 0xF,};
enum MACRO_RTCSI {RTCSI_PC_TO_PC = 0x1,RTCSI_PC_TO_PHONE = 0x2,RTCSI_PHONE_TO_PHONE = 0x4,RTCSI_IM = 0x8,RTCSI_MULTIPARTY_IM = 0x10,};
enum MACRO_RTCTR {RTCTR_UDP = 0x1,RTCTR_TCP = 0x2,RTCTR_TLS = 0x4,};
enum MACRO_RTNot {RTNot = 3,RTContent = 4,};
enum MACRO_SCARD {SCARD_S_SUCCESS = 0,};
enum MACRO_SCERR {SCERR_NOCARDNAME = 0x4000,SCERR_NOGUIDS = 0x8000,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SCODE {SCODE_512 = 0x0,SCODE_2K = 0x1,SCODE_8K = 0x2,SCODE_32K = 0x3,SCODE_128K = 0x4,SCODE_512K = 0x5,SCODE_2M = 0x6,};
enum MACRO_SCOPE {SCOPE_FLAG_MASK = 0xFF,SCOPE_FLAG_INCLUDE = 0x1,SCOPE_FLAG_DEEP = 0x2,SCOPE_TYPE_MASK = 0xFFFFFF00,SCOPE_TYPE_WINPATH = 0x100,SCOPE_TYPE_VPATH = 0x200,};
enum MACRO_SEC_E {SEC_E_NO_SPM = -2146893052,SEC_E_NOT_SUPPORTED = -2146893054,};
enum MACRO_SETIR {SETIR = 10,};
enum MACRO_SFGAO {SFGAO_LINK = 0x10000,SFGAO_READONLY = 0x40000,SFGAO_FOLDER = 0x20000000,};
enum MACRO_SHACF {SHACF_DEFAULT = 0x0,SHACF_FILESYSTEM = 0x1,SHACF_URLHISTORY = 0x2,SHACF_URLMRU = 0x4,SHACF_USETAB = 0x8,SHACF_FILESYS_ONLY = 0x10,SHACF_AUTOSUGGEST_FORCE_ON = 0x10000000,SHACF_AUTOSUGGEST_FORCE_OFF = 0x20000000,SHACF_AUTOAPPEND_FORCE_ON = 0x40000000,SHACF_AUTOAPPEND_FORCE_OFF = 0x80000000,};
enum MACRO_SHARD {SHARD_PIDL = 0x1,SHARD_PATH = 0x2,};
enum MACRO_SHCDF {SHCDF_UPDATEITEM = 0x1,};
enum MACRO_SHCNE {SHCNE_RENAME = 0x1,};
enum MACRO_SHCNF {SHCNF_IDLIST = 0x0,SHCNF_PATHA = 0x1,SHCNF_PRINTERA = 0x2,SHCNF_DWORD = 0x3,SHCNF_PATHW = 0x5,SHCNF_PRINTERW = 0x6,SHCNF_TYPE = 0xFF,SHCNF_FLUSH = 0x1000,SHCNF_FLUSHNOWAIT = 0x2000,SHCNF_PATH = 0x1,SHCNF_PRINTER = 0x2,};
enum MACRO_SHDID {SHDID_ROOT_REGITEM = 1,SHDID_FS_FILE = 2,SHDID_FS_DIRECTORY = 3,SHDID_FS_OTHER = 4,SHDID_COMPUTER_DRIVE35 = 5,SHDID_COMPUTER_DRIVE525 = 6,SHDID_COMPUTER_REMOVABLE = 7,SHDID_COMPUTER_FIXED = 8,SHDID_COMPUTER_NETDRIVE = 9,SHDID_COMPUTER_CDROM = 10,SHDID_COMPUTER_RAMDISK = 11,SHDID_COMPUTER_OTHER = 12,SHDID_NET_DOMAIN = 13,SHDID_NET_SERVER = 14,SHDID_NET_SHARE = 15,SHDID_NET_RESTOFNET = 16,SHDID_NET_OTHER = 17,};
enum MACRO_SHELL {SHELL_MODULES_EXPLORER = 1,SHELL_MODULES_VGAL = 1,SHELL_MODULES_SHCORE = 1,SHELL_MODULES_CESHELL = 1,};
enum MACRO_SHGFI {SHGFI_ICON = 0x100,SHGFI_DISPLAYNAME = 0x200,SHGFI_TYPENAME = 0x400,SHGFI_ATTRIBUTES = 0x800,SHGFI_SYSICONINDEX = 0x4000,SHGFI_LARGEICON = 0x0,SHGFI_SMALLICON = 0x1,SHGFI_USEFILEATTRIBUTES = 0x10,};
enum MACRO_SHNUM {SHNUM_PRIORITY = 0x1,SHNUM_DURATION = 0x2,SHNUM_ICON = 0x4,SHNUM_HTML = 0x8,SHNUM_TITLE = 0x10,};
enum MACRO_SNLEN {SNLEN = 80,};
enum MACRO_STACK {STACK_SIZE_PARAM_IS_A_RESERVATION = 0x10000,};
enum MACRO_STATE {STATE_SYSTEM_NORMAL = 0,STATE_SYSTEM_UNAVAILABLE = 1,STATE_SYSTEM_SELECTED = 2,STATE_SYSTEM_FOCUSED = 4,STATE_SYSTEM_PRESSED = 8,STATE_SYSTEM_CHECKED = 16,STATE_SYSTEM_MIXED = 32,STATE_SYSTEM_INDETERMINATE = 32,STATE_SYSTEM_READONLY = 64,STATE_SYSTEM_HOTTRACKED = 128,STATE_SYSTEM_DEFAULT = 256,STATE_SYSTEM_EXPANDED = 512,STATE_SYSTEM_COLLAPSED = 1024,STATE_SYSTEM_BUSY = 2048,STATE_SYSTEM_FLOATING = 4096,STATE_SYSTEM_MARQUEED = 8192,STATE_SYSTEM_ANIMATED = 16384,STATE_SYSTEM_INVISIBLE = 32768,STATE_SYSTEM_OFFSCREEN = 65536,STATE_SYSTEM_SIZEABLE = 131072,STATE_SYSTEM_MOVEABLE = 262144,STATE_SYSTEM_SELFVOICING = 524288,STATE_SYSTEM_FOCUSABLE = 1048576,STATE_SYSTEM_SELECTABLE = 2097152,STATE_SYSTEM_LINKED = 4194304,STATE_SYSTEM_TRAVERSED = 8388608,STATE_SYSTEM_MULTISELECTABLE = 16777216,STATE_SYSTEM_EXTSELECTABLE = 33554432,STATE_SYSTEM_ALERT_LOW = 67108864,STATE_SYSTEM_ALERT_MEDIUM = 134217728,STATE_SYSTEM_ALERT_HIGH = 268435456,STATE_SYSTEM_PROTECTED = 536870912,STATE_SYSTEM_VALID = 1073741823,};
enum MACRO_STATS {ICMP_STATS = 11,TCP_STATS = 12,};
enum MACRO_STGTY {STGTY_REPEAT = 0x100,};
enum MACRO_STILL {STILL_ACTIVE = 0x103,};
enum MACRO_STORE {STORE_ATTRIBUTE_READONLY = 0x1,STORE_ATTRIBUTE_REMOVABLE = 0x2,STORE_ATTRIBUTE_UNFORMATTED = 0x4,STORE_ATTRIBUTE_AUTOFORMAT = 0x8,STORE_ATTRIBUTE_AUTOPART = 0x10,STORE_ATTRIBUTE_AUTOMOUNT = 0x20,};
enum MACRO_STYLE {STYLE_DESCRIPTION_SIZE = 32,IMEMENUITEM_STRING_SIZE = 80,};
enum MACRO_SV2GV {SV2GV_CURRENTVIEW = 4294967295,SV2GV_DEFAULTVIEW = 4294967294,SV2GV_ISEXTENDEDVIEW = 4294967293,};
enum MACRO_SVGIO {SVGIO_BACKGROUND = 0x0,SVGIO_SELECTION = 0x1,SVGIO_ALLVIEW = 0x2,};
enum MACRO_TABLE {TABLE_CHANGED = 1,TABLE_ERROR = 2,TABLE_ROW_ADDED = 3,TABLE_ROW_DELETED = 4,TABLE_ROW_MODIFIED = 5,TABLE_SORT_DONE = 6,TABLE_RESTRICT_DONE = 7,TABLE_SETCOL_DONE = 8,TABLE_RELOAD = 9,};
enum MACRO_TIMER {TIMER_QUERY_STATE = 0x1,TIMER_MODIFY_STATE = 0x2,TIMER_ALL_ACCESS = 0x1F0003,};
enum MACRO_TITLE {TITLE_EventlogMessageBox = 0x80001777,};
enum MACRO_TOKEN {TOKEN_ASSIGN_PRIMARY = 0x1,TOKEN_DUPLICATE = 0x2,TOKEN_IMPERSONATE = 0x4,TOKEN_QUERY = 0x8,TOKEN_QUERY_SOURCE = 0x10,TOKEN_ADJUST_PRIVILEGES = 0x20,TOKEN_ADJUST_GROUPS = 0x40,TOKEN_ADJUST_DEFAULT = 0x80,TOKEN_ADJUST_SESSIONID = 0x100,TOKEN_ALL_ACCESS = 0xF01FF,TOKEN_READ = 0x20008,TOKEN_WRITE = 0x200E0,TOKEN_EXECUTE = 0x20000,TOKEN_SOURCE_LENGTH = 0x8,};
enum MACRO_TUPLE {TUPLE_RETURN_LINKS = 0x1,};
enum MACRO_TVSIL {TVSIL_NORMAL = 0,TVSIL_STATE = 2,};
enum MACRO_UCHAR {UCHAR_MAX = 0xFF,};
enum MACRO_ULONG {ULONG_MAX = 0xFFFFFFFF,};
enum MACRO_UNISP {UNISP_RPC_ID = 14,};
enum MACRO_USAGE {USAGE_MATCH_TYPE_AND = 0x0,USAGE_MATCH_TYPE_OR = 0x1,};
enum MACRO_USHRT {USHRT_MAX = 0xFFFF,};
enum MACRO_VALID {VALID_INHERIT_FLAGS = 0x1F,};
enum MACRO_VFW_E {VFW_E_INVALIDMEDIATYPE = 0x80040200,VFW_E_INVALIDSUBTYPE = 0x80040201,VFW_E_NEED_OWNER = 0x80040202,VFW_E_ENUM_OUT_OF_SYNC = 0x80040203,VFW_E_ALREADY_CONNECTED = 0x80040204,VFW_E_FILTER_ACTIVE = 0x80040205,VFW_E_NO_TYPES = 0x80040206,VFW_E_NO_ACCEPTABLE_TYPES = 0x80040207,VFW_E_INVALID_DIRECTION = 0x80040208,VFW_E_NOT_CONNECTED = 0x80040209,VFW_E_NO_ALLOCATOR = 0x8004020A,VFW_E_RUNTIME_ERROR = 0x8004020B,VFW_E_BUFFER_NOTSET = 0x8004020C,VFW_E_BUFFER_OVERFLOW = 0x8004020D,VFW_E_BADALIGN = 0x8004020E,VFW_E_ALREADY_COMMITTED = 0x8004020F,VFW_E_BUFFERS_OUTSTANDING = 0x80040210,VFW_E_NOT_COMMITTED = 0x80040211,VFW_E_SIZENOTSET = 0x80040212,VFW_E_NO_CLOCK = 0x80040213,VFW_E_NO_SINK = 0x80040214,VFW_E_NO_INTERFACE = 0x80040215,VFW_E_NOT_FOUND = 0x80040216,VFW_E_CANNOT_CONNECT = 0x80040217,VFW_E_CANNOT_RENDER = 0x80040218,VFW_E_CHANGING_FORMAT = 0x80040219,VFW_E_NO_COLOR_KEY_SET = 0x8004021A,VFW_E_NOT_OVERLAY_CONNECTION = 0x8004021B,VFW_E_NOT_SAMPLE_CONNECTION = 0x8004021C,VFW_E_PALETTE_SET = 0x8004021D,VFW_E_COLOR_KEY_SET = 0x8004021E,VFW_E_NO_COLOR_KEY_FOUND = 0x8004021F,VFW_E_NO_PALETTE_AVAILABLE = 0x80040220,VFW_E_NO_DISPLAY_PALETTE = 0x80040221,VFW_E_TOO_MANY_COLORS = 0x80040222,VFW_E_STATE_CHANGED = 0x80040223,VFW_E_NOT_STOPPED = 0x80040224,VFW_E_NOT_PAUSED = 0x80040225,VFW_E_NOT_RUNNING = 0x80040226,VFW_E_WRONG_STATE = 0x80040227,VFW_E_START_TIME_AFTER_END = 0x80040228,VFW_E_INVALID_RECT = 0x80040229,VFW_E_TYPE_NOT_ACCEPTED = 0x8004022A,VFW_E_SAMPLE_REJECTED = 0x8004022B,VFW_E_SAMPLE_REJECTED_EOS = 0x8004022C,VFW_E_DUPLICATE_NAME = 0x8004022D,VFW_S_DUPLICATE_NAME = 0x4022D,VFW_E_TIMEOUT = 0x8004022E,VFW_E_INVALID_FILE_FORMAT = 0x8004022F,VFW_E_ENUM_OUT_OF_RANGE = 0x80040230,VFW_E_CIRCULAR_GRAPH = 0x80040231,VFW_E_NOT_ALLOWED_TO_SAVE = 0x80040232,VFW_E_TIME_ALREADY_PASSED = 0x80040233,VFW_E_ALREADY_CANCELLED = 0x80040234,VFW_E_CORRUPT_GRAPH_FILE = 0x80040235,VFW_E_ADVISE_ALREADY_SET = 0x80040236,VFW_S_STATE_INTERMEDIATE = 0x40237,VFW_E_NO_MODEX_AVAILABLE = 0x80040238,VFW_E_NO_ADVISE_SET = 0x80040239,VFW_E_NO_FULLSCREEN = 0x8004023A,VFW_E_IN_FULLSCREEN_MODE = 0x8004023B,VFW_E_UNKNOWN_FILE_TYPE = 0x80040240,VFW_E_CANNOT_LOAD_SOURCE_FILTER = 0x80040241,VFW_S_PARTIAL_RENDER = 0x40242,VFW_E_FILE_TOO_SHORT = 0x80040243,VFW_E_INVALID_FILE_VERSION = 0x80040244,VFW_S_SOME_DATA_IGNORED = 0x40245,VFW_S_CONNECTIONS_DEFERRED = 0x40246,VFW_E_INVALID_CLSID = 0x80040247,VFW_E_INVALID_MEDIA_TYPE = 0x80040248,VFW_E_BAD_KEY = 0x800403F2,VFW_S_NO_MORE_ITEMS = 0x40103,VFW_E_SAMPLE_TIME_NOT_SET = 0x80040249,VFW_S_RESOURCE_NOT_NEEDED = 0x40250,VFW_E_MEDIA_TIME_NOT_SET = 0x80040251,VFW_E_NO_TIME_FORMAT_SET = 0x80040252,VFW_E_MONO_AUDIO_HW = 0x80040253,VFW_S_MEDIA_TYPE_IGNORED = 0x40254,VFW_E_NO_DECOMPRESSOR = 0x80040255,VFW_E_NO_AUDIO_HARDWARE = 0x80040256,VFW_S_VIDEO_NOT_RENDERED = 0x40257,VFW_S_AUDIO_NOT_RENDERED = 0x40258,VFW_E_RPZA = 0x80040259,VFW_S_RPZA = 0x4025A,VFW_E_PROCESSOR_NOT_SUITABLE = 0x8004025B,VFW_E_UNSUPPORTED_AUDIO = 0x8004025C,VFW_E_UNSUPPORTED_VIDEO = 0x8004025D,VFW_E_MPEG_NOT_CONSTRAINED = 0x8004025E,VFW_E_NOT_IN_GRAPH = 0x8004025F,VFW_S_ESTIMATED = 0x40260,VFW_E_NO_TIME_FORMAT = 0x80040261,VFW_E_READ_ONLY = 0x80040262,VFW_S_RESERVED = 0x40263,VFW_E_BUFFER_UNDERFLOW = 0x80040264,VFW_E_UNSUPPORTED_STREAM = 0x80040265,VFW_E_NO_TRANSPORT = 0x80040266,VFW_S_STREAM_OFF = 0x40267,VFW_S_CANT_CUE = 0x40268,VFW_E_BAD_VIDEOCD = 0x80040269,VFW_S_NO_STOP_TIME = 0x40270,VFW_E_OUT_OF_VIDEO_MEMORY = 0x80040271,VFW_E_VP_NEGOTIATION_FAILED = 0x80040272,VFW_E_DDRAW_CAPS_NOT_SUITABLE = 0x80040273,VFW_E_NO_VP_HARDWARE = 0x80040274,VFW_E_NO_CAPTURE_HARDWARE = 0x80040275,VFW_E_DVD_OPERATION_INHIBITED = 0x80040276,VFW_E_DVD_INVALIDDOMAIN = 0x80040277,VFW_E_DVD_NO_BUTTON = 0x80040278,VFW_E_DVD_GRAPHNOTREADY = 0x80040279,VFW_E_DVD_RENDERFAIL = 0x8004027A,VFW_E_DVD_DECNOTENOUGH = 0x8004027B,VFW_E_DDRAW_VERSION_NOT_SUITABLE = 0x8004027C,VFW_E_COPYPROT_FAILED = 0x8004027D,VFW_S_NOPREVIEWPIN = 0x4027E,};
enum MACRO_WCHAR {WCHAR_MIN = 0,WCHAR_MAX = 65535,};
enum MACRO_WEBOC {WEBOC_DISPIDBASE = -2147413112,WEBOC_DISPIDMAX = -2147413012,};
enum MACRO_WHEEL {WHEEL_DELTA = 120,WHEEL_PAGESCROLL = -1,};
enum MACRO_WIN31 {WIN31_CLASS = 0,};
enum MACRO_WIN32 {WIN32 = 100,};
enum MACRO_WINCE {WINCE_IOCTL_START = 8,};
enum MACRO_WRITE {WRITE_DAC = 0x40000,WRITE_OWNER = 0x80000,};
enum MACRO_WS_EX {WS_EX_DLGMODALFRAME = 0x1,WS_EX_TOPMOST = 0x8,WS_EX_TOOLWINDOW = 0x80,WS_EX_WINDOWEDGE = 0x100,WS_EX_CLIENTEDGE = 0x200,WS_EX_CONTEXTHELP = 0x400,WS_EX_STATICEDGE = 0x20000,WS_EX_OVERLAPPEDWINDOW = 0x300,WS_EX_CAPTIONOKBTN = 0x80000000,WS_EX_NODRAG = 0x40000000,WS_EX_ABOVESTARTUP = 0x20000000,WS_EX_INK = 0x10000000,WS_EX_NOANIMATION = 0x4000000,};
enum MACRO__TEOF {_TEOF = -1,};
enum MACRO_chx10 {chx10 = 0x419,};
enum MACRO_chx11 {chx11 = 0x41A,};
enum MACRO_chx12 {chx12 = 0x41B,};
enum MACRO_chx13 {chx13 = 0x41C,};
enum MACRO_chx14 {chx14 = 0x41D,};
enum MACRO_chx15 {chx15 = 0x41E,};
enum MACRO_chx16 {chx16 = 0x41F,};
enum MACRO_cmb10 {cmb10 = 0x479,};
enum MACRO_cmb11 {cmb11 = 0x47A,};
enum MACRO_cmb12 {cmb12 = 0x47B,};
enum MACRO_cmb13 {cmb13 = 0x47C,};
enum MACRO_cmb14 {cmb14 = 0x47D,};
enum MACRO_cmb15 {cmb15 = 0x47E,};
enum MACRO_cmb16 {cmb16 = 0x47F,};
enum MACRO_edt10 {edt10 = 0x489,};
enum MACRO_edt11 {edt11 = 0x48A,};
enum MACRO_edt12 {edt12 = 0x48B,};
enum MACRO_edt13 {edt13 = 0x48C,};
enum MACRO_edt14 {edt14 = 0x48D,};
enum MACRO_edt15 {edt15 = 0x48E,};
enum MACRO_edt16 {edt16 = 0x48F,};
enum MACRO_fNDIS {fNDIS_GUID_TO_OID = 0x1,fNDIS_GUID_TO_STATUS = 0x2,fNDIS_GUID_ANSI_STRING = 0x4,fNDIS_GUID_UNICODE_STRING = 0x8,fNDIS_GUID_ARRAY = 0x10,};
enum MACRO_lst10 {lst10 = 0x469,};
enum MACRO_lst11 {lst11 = 0x46A,};
enum MACRO_lst12 {lst12 = 0x46B,};
enum MACRO_lst13 {lst13 = 0x46C,};
enum MACRO_lst14 {lst14 = 0x46D,};
enum MACRO_lst15 {lst15 = 0x46E,};
enum MACRO_lst16 {lst16 = 0x46F,};
enum MACRO_psh10 {psh10 = 0x409,};
enum MACRO_psh11 {psh11 = 0x40A,};
enum MACRO_psh12 {psh12 = 0x40B,};
enum MACRO_psh13 {psh13 = 0x40C,};
enum MACRO_psh14 {psh14 = 0x40D,};
enum MACRO_psh15 {psh15 = 0x40E,};
enum MACRO_psh16 {psh16 = 0x40F,};
enum MACRO_rad10 {rad10 = 0x429,};
enum MACRO_rad11 {rad11 = 0x42A,};
enum MACRO_rad12 {rad12 = 0x42B,};
enum MACRO_rad13 {rad13 = 0x42C,};
enum MACRO_rad14 {rad14 = 0x42D,};
enum MACRO_rad15 {rad15 = 0x42E,};
enum MACRO_rad16 {rad16 = 0x42F,};
enum MACRO_stc10 {stc10 = 0x449,};
enum MACRO_stc11 {stc11 = 0x44A,};
enum MACRO_stc12 {stc12 = 0x44B,};
enum MACRO_stc13 {stc13 = 0x44C,};
enum MACRO_stc14 {stc14 = 0x44D,};
enum MACRO_stc15 {stc15 = 0x44E,};
enum MACRO_stc16 {stc16 = 0x44F,};
enum MACRO_stc17 {stc17 = 0x450,};
enum MACRO_stc18 {stc18 = 0x451,};
enum MACRO_stc19 {stc19 = 0x452,};
enum MACRO_stc20 {stc20 = 0x453,};
enum MACRO_stc21 {stc21 = 0x454,};
enum MACRO_stc22 {stc22 = 0x455,};
enum MACRO_stc23 {stc23 = 0x456,};
enum MACRO_stc24 {stc24 = 0x457,};
enum MACRO_stc25 {stc25 = 0x458,};
enum MACRO_stc26 {stc26 = 0x459,};
enum MACRO_stc27 {stc27 = 0x45A,};
enum MACRO_stc28 {stc28 = 0x45B,};
enum MACRO_stc29 {stc29 = 0x45C,};
enum MACRO_stc30 {stc30 = 0x45D,};
enum MACRO_stc31 {stc31 = 0x45E,};
enum MACRO_stc32 {stc32 = 0x45F,};
typedef struct _MIBICMPINFO MIBICMPINFO;
typedef struct _MIB_BEST_IF MIB_BEST_IF;
typedef struct _MIB_ICMP_EX MIB_ICMP_EX;
typedef struct _MIB_IFTABLE MIB_IFTABLE;
typedef struct _MIB_IPSTATS MIB_IPSTATS;
typedef struct tagMIDIINCAPSA MIDIINCAPSA;
typedef struct tagMIDIINCAPSW MIDIINCAPSW;
typedef struct tagMONITORINFO MONITORINFO;
typedef struct _MONTHLYDATE MONTHLYDATE;
typedef struct tagMQCOLUMNSET MQCOLUMNSET;
typedef struct tagMQMGMTPROPS MQMGMTPROPS;
struct MXXMLWriter;
struct MediaPlayer;
typedef int NDIS_STATUS;
typedef void ( *NDR_RUNDOWN)(void *context);
typedef struct tagLVKEYDOWN NMLVKEYDOWN;
typedef struct tagNMSELCHANGE NMSELCHANGE;
typedef struct tagTCKEYDOWN NMTCKEYDOWN;
typedef struct tagNMTREEVIEWA NMTREEVIEWA;
typedef struct tagNMTREEVIEWW NMTREEVIEWW;
typedef struct tagTVKEYDOWN NMTVKEYDOWN;
typedef struct tagNNTPARTICLE NNTPARTICLE;
typedef struct tagNNTPMESSAGE NNTPMESSAGE;
typedef struct tagGUIDELINE *NPGUIDELINE;
typedef struct tagSTYLEBUFA *NPSTYLEBUFA;
typedef struct tagSTYLEBUFW *NPSTYLEBUFW;
typedef struct _NSP_ROUTINE NSP_ROUTINE;
typedef struct _OBEX_HEADER OBEX_HEADER;
typedef struct tagOCPFIPARAMS OCPFIPARAMS;
enum OLECMDTEXTF {OLECMDTEXTF_NONE = 0x0,OLECMDTEXTF_NAME = 0x1,OLECMDTEXTF_STATUS = 0x2,};
typedef struct _OS_DEP_DATA OS_DEP_DATA;
typedef struct _PAINTSTRUCT PAINTSTRUCT;
typedef struct _AM_DVD_YUV *PAM_DVD_YUV;
typedef struct tagPARAMDESCEX PARAMDESCEX;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA *PARRAY_INFO;
typedef struct tagBITMAPINFO *PBITMAPINFO;
typedef struct _browseinfo *PBROWSEINFO;
typedef struct _CEFILEINFO *PCEFILEINFO;
typedef struct __CEL_BUFFER *PCEL_BUFFER;
typedef struct __CEL_HEADER *PCEL_HEADER;
typedef struct _CERT_CHAIN *PCERT_CHAIN;
typedef union _CEVALUNION *PCEVALUNION;
typedef  struct _USB_FUNCS *PCUSB_FUNCS;
typedef struct _DDKISRINFO_tag *PDDKISRINFO;
typedef struct _DDKPCIINFO_tag *PDDKPCIINFO;
typedef struct tagDIBSECTION *PDIBSECTION;
typedef struct _8CFCABD0DC01E1B1C2FF20A071112968 *PDMTASKINFO;
typedef struct _DOT11_SSID *PDOT11_SSID;
typedef struct _DVD_REGION *PDVD_REGION;
typedef struct _73DB40CAD3136568FAD030BDAAB8FF71 *PFIXED_INFO;
typedef struct tagHEAPLIST32 *PHEAPLIST32;
typedef struct tagHH_ENUM_IT *PHH_ENUM_IT;
typedef struct tagHH_WINTYPE *PHH_WINTYPE;
typedef struct phonestatus_tag PHONESTATUS;
typedef struct tagHWXRESULTS *PHWXRESULTS;
typedef struct tagIMENUMINFO *PIMENUMINFO;
typedef struct tagKEYBDINPUT *PKEYBDINPUT;
typedef CRITICAL_SECTION *PKSPIN_LOCK;
typedef struct ldapsearch *PLDAPSearch;
typedef struct _LIST_ENTRY *PLIST_ENTRY;
typedef struct _D59F8FB060D1A4257ECDF2860F49B6AF *PLM_IRPARMS;
typedef struct tagLOGPALETTE *PLOGPALETTE;
typedef struct _MIB_TCPROW *PMIB_TCPROW;
typedef struct _MIB_UDPROW *PMIB_UDPROW;
typedef struct tagMIMECPINFO *PMIMECPINFO;
typedef struct tagMOUSEINPUT *PMOUSEINPUT;
typedef struct _POWER_DESCR POWER_DESCR;
typedef union _POWER_STATE POWER_STATE;
typedef struct _PubAppInfo *PPUBAPPINFO;
typedef struct _RELAY_INFO *PRELAY_INFO;
typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct _RPC_POLICY *PRPC_POLICY;
typedef struct tagSCRIPTINFO *PSCRIPTINFO;
typedef struct _TAPE_ERASE *PTAPE_ERASE;
typedef struct _TOKEN_USER *PTOKEN_USER;
typedef struct _USB_DEVICE *PUSB_DEVICE;
typedef struct _VAR_STRING *PVAR_STRING;
typedef struct tagWAVEINCAPS *PWAVEINCAPS;
typedef struct _WSAVersion *PWSAVERSION;
struct PeerFactory;
struct PropertyBag;
typedef struct tagQACONTAINER QACONTAINER;
typedef struct _QOS_SD_MODE QOS_SD_MODE;
typedef struct __MIDL___MIDL_itf_strmif_0080_0001 REGPINTYPES;
typedef struct tagRESTRICTION RESTRICTION;
typedef struct tagRFC1522INFO RFC1522INFO;
typedef struct tagRFC1766INFO RFC1766INFO;
typedef struct _RPC_MESSAGE RPC_MESSAGE;
typedef struct _RPC_VERSION RPC_VERSION;
typedef struct _tagRemBINDINFO RemBINDINFO;
typedef struct tagRemHPALETTE RemHPALETTE;
struct RowPosition;
enum SF_REQ_TYPE {SF_REQ_SEND_RESPONSE_HEADER = 0x0,SF_REQ_ADD_HEADERS_ON_DENIAL = 0x1,SF_REQ_SET_NEXT_READ_SIZE = 0x2,SF_REQ_SET_PROXY_INFO = 0x3,SF_REQ_GET_CONNID = 0x4,SF_REQ_SET_CERTIFICATE_INFO = 0x5,SF_REQ_GET_PROPERTY = 0x6,SF_REQ_NORMALIZE_URL = 0x7,SF_REQ_DISABLE_NOTIFICATIONS = 0x8,};
typedef struct _BE0BDAB4463CDAC89A1FD071673BF7FC SHDRAGIMAGE;
typedef struct _SHFILEINFOA SHFILEINFOA;
typedef struct _SHFILEINFOW SHFILEINFOW;
typedef struct _tagSlowAppInfo SLOWAPPINFO;
typedef struct _SLPSTRArray SLPSTRArray;
typedef struct tagSMTPMESSAGE SMTPMESSAGE;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct tagSOFTKBDDATA SOFTKBDDATA;
typedef struct SPC_SIGINFO_ SPC_SIGINFO;
typedef struct _SSLPROTOCOL SSLPROTOCOL;
typedef struct _SShortArray SShortArray;
typedef struct tagSTATPROPBAG STATPROPBAG;
typedef struct _tagSTATPROPMAP STATPROPMAP;
typedef struct tagSTATPROPSTG STATPROPSTG;
typedef struct tagSTYLESTRUCT STYLESTRUCT;
typedef struct _tagSYNCMGRITEM SYNCMGRITEM;
typedef struct _SYSTEM_INFO SYSTEM_INFO;
typedef struct _SecPkgInfoA SecPkgInfoA;
typedef struct _SecPkgInfoW SecPkgInfoW;
typedef struct tagTBADDBITMAP TBADDBITMAP;
typedef struct tagTEXTMETRICA TEXTMETRICA;
typedef struct tagTEXTMETRICW TEXTMETRICW;
typedef struct tagTEXT_SOURCE TEXT_SOURCE;
struct TIMEFactory;
typedef struct _TOKEN_OWNER TOKEN_OWNER;
typedef struct tagTOOLINFOA TTTOOLINFOA;
typedef struct tagTOOLINFOW TTTOOLINFOW;
typedef struct _UUID_VECTOR UUID_VECTOR;
typedef struct tagWAVEOUTCAPS WAVEOUTCAPS;
typedef struct _WCE_IAS_SET WCE_IAS_SET;
typedef struct _WSATHREADID WSATHREADID;
struct WSDLService;
struct XMLDocument;
struct XMLParser26;
struct XMLParser30;
struct XSLTemplate;
enum _D3DBLENDOP {D3DBLENDOP_ADD = 0x1,D3DBLENDOP_SUBTRACT = 0x2,D3DBLENDOP_REVSUBTRACT = 0x3,D3DBLENDOP_MIN = 0x4,D3DBLENDOP_MAX = 0x5,D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DCMPFUNC {D3DCMP_NEVER = 0x1,D3DCMP_LESS = 0x2,D3DCMP_EQUAL = 0x3,D3DCMP_LESSEQUAL = 0x4,D3DCMP_GREATER = 0x5,D3DCMP_NOTEQUAL = 0x6,D3DCMP_GREATEREQUAL = 0x7,D3DCMP_ALWAYS = 0x8,D3DCMP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DDEVTYPE {D3DDEVTYPE_HAL = 0x1,D3DDEVTYPE_REF = 0x2,D3DDEVTYPE_SW = 0x3,D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DFOGMODE {D3DFOG_NONE = 0x0,D3DFOG_EXP = 0x1,D3DFOG_EXP2 = 0x2,D3DFOG_LINEAR = 0x3,D3DFOG_FORCE_DWORD = 0x7FFFFFFF,};
struct _DWORD_BLOB {unsigned int clSize;unsigned int alData[1];};
enum _FW_ACTIONS {FWA_BLOCK = 0x1,FWA_ALLOW = 0x2,FWA_ALLOW_RESPONSE = 0x3,};
enum _HTMLBorder {HTMLBorderNone = 0x0,HTMLBorderThick = 0x40000,HTMLBorderDialog = 0x400000,HTMLBorderThin = 0x800000,HTMLBorder_Max = 0x7FFFFFFF,};
enum _HT_OPTIONS {HT_OPT_AllowAfterEOL = 0x1,HT_OPTIONS_Max = 0x7FFFFFFF,};
enum _HT_RESULTS {HT_RESULTS_Glyph = 0x1,HT_RESULTS_Max = 0x7FFFFFFF,};
struct _LIST_ENTRY {struct _LIST_ENTRY *Flink;struct _LIST_ENTRY *Blink;};
enum _OBEX_EVENT {OE_QUERY_PASSWORD = 0x0,OE_NEW_CONNECTION = 0x1,OE_NEW_COMMAND = 0x2,OE_ABORT = 0x3,OE_DISCONNECT = 0x4,OE_DEVICE_ARRIVAL = 0x5,OE_DEVICE_DEPARTURE = 0x6,OE_DEVICE_UPDATE = 0x7,};
struct _RPC_POLICY {unsigned int Length;unsigned int EndpointFlags;unsigned int NICFlags;};
enum _TOKEN_TYPE {TokenPrimary = 0x1,TokenImpersonation = 0x2,};
enum _URLZONEREG {URLZONEREG_DEFAULT = 0x0,URLZONEREG_HKLM = 0x1,URLZONEREG_HKCU = 0x2,};
enum _bodyScroll {bodyScrollyes = 0x1,bodyScrollno = 0x2,bodyScrollauto = 0x4,bodyScrolldefault = 0x3,bodyScroll_Max = 0x7FFFFFFF,};
struct _charformat;
enum _htmlMethod {htmlMethodNotSet = 0x0,htmlMethodGet = 0x1,htmlMethodPost = 0x2,htmlMethod_Max = 0x7FFFFFFF,};
enum _htmlZOrder {htmlZOrderFront = 0x0,htmlZOrderBack = 0x1,htmlZOrder_Max = 0x7FFFFFFF,};
enum _reconcilef {RECONCILEF_MAYBOTHERUSER = 0x1,RECONCILEF_FEEDBACKWINDOWVALID = 0x2,RECONCILEF_NORESIDUESOK = 0x4,RECONCILEF_OMITSELFRESIDUE = 0x8,RECONCILEF_RESUMERECONCILIATION = 0x10,RECONCILEF_YOUMAYDOTHEUPDATES = 0x20,RECONCILEF_ONLYYOUWERECHANGED = 0x40,ALL_RECONCILE_FLAGS = 0x7F,};
enum tagAUTHTYPE {AUTHTYPE_USERPASS = 0x0,AUTHTYPE_SIMPLE = 0x1,AUTHTYPE_SASL = 0x2,};
enum tagAuthType {REALM_AUTH = 0x0,NTLM_AUTH = 0x1,PASSPORT_AUTH = 0x2,};
enum tagCALLCONV {CC_FASTCALL = 0x0,CC_CDECL = 0x1,CC_MSCPASCAL = 0x2,CC_PASCAL = 0x2,CC_MACPASCAL = 0x3,CC_STDCALL = 0x4,CC_FPFASTCALL = 0x5,CC_SYSCALL = 0x6,CC_MPWCDECL = 0x7,CC_MPWPASCAL = 0x8,CC_MAX = 0x9,};
enum tagCALLTYPE {CALLTYPE_TOPLEVEL = 0x1,CALLTYPE_NESTED = 0x2,CALLTYPE_ASYNC = 0x3,CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,CALLTYPE_ASYNC_CALLPENDING = 0x5,};
enum tagCTRLINFO {CTRLINFO_EATS_RETURN = 0x1,CTRLINFO_EATS_ESCAPE = 0x2,};
enum tagDESCKIND {DESCKIND_NONE = 0x0,DESCKIND_FUNCDESC = 0x1,DESCKIND_VARDESC = 0x2,DESCKIND_TYPECOMP = 0x3,DESCKIND_IMPLICITAPPOBJ = 0x4,DESCKIND_MAX = 0x5,};
enum tagDVASPECT {DVASPECT_CONTENT = 0x1,DVASPECT_THUMBNAIL = 0x2,DVASPECT_ICON = 0x4,DVASPECT_DOCPRINT = 0x8,};
enum tagFUNCKIND {FUNC_VIRTUAL = 0x0,FUNC_PUREVIRTUAL = 0x1,FUNC_NONVIRTUAL = 0x2,FUNC_STATIC = 0x3,FUNC_DISPATCH = 0x4,};
enum tagGUIDKIND {GUIDKIND_DEFAULT_SOURCE_DISP_IID = 0x1,};
enum tagLIBFLAGS {LIBFLAG_FRESTRICTED = 0x1,LIBFLAG_FCONTROL = 0x2,LIBFLAG_FHIDDEN = 0x4,LIBFLAG_FHASDISKIMAGE = 0x8,};
enum tagLOCKTYPE {LOCK_WRITE = 0x1,LOCK_EXCLUSIVE = 0x2,LOCK_ONLYONCE = 0x4,};
enum tagMKREDUCE {MKRREDUCE_ONE = 0x30000,MKRREDUCE_TOUSER = 0x20000,MKRREDUCE_THROUGHUSER = 0x10000,MKRREDUCE_ALL = 0x0,};
enum tagOLECLOSE {OLECLOSE_SAVEIFDIRTY = 0x0,OLECLOSE_NOSAVE = 0x1,OLECLOSE_PROMPTSAVE = 0x2,};
enum tagOLECONTF {OLECONTF_EMBEDDINGS = 0x1,OLECONTF_LINKS = 0x2,OLECONTF_OTHERS = 0x4,OLECONTF_ONLYUSER = 0x8,OLECONTF_ONLYIFRUNNING = 0x10,};
enum tagSIPSTATE {SIP_UP = 0x0,SIP_DOWN = 0x1,SIP_FORCEDOWN = 0x2,SIP_UNCHANGED = 0x3,SIP_INPUTDIALOG = 0x4,};
enum tagSTATFLAG {STATFLAG_DEFAULT = 0x0,STATFLAG_NONAME = 0x1,STATFLAG_NOOPEN = 0x2,};
enum tagTYPEKIND {TKIND_ENUM = 0x0,TKIND_RECORD = 0x1,TKIND_MODULE = 0x2,TKIND_INTERFACE = 0x3,TKIND_DISPATCH = 0x4,TKIND_COCLASS = 0x5,TKIND_ALIAS = 0x6,TKIND_UNION = 0x7,TKIND_MAX = 0x8,};
enum tagUASFLAGS {UAS_NORMAL = 0x0,UAS_BLOCKED = 0x1,UAS_NOPARENTENABLE = 0x2,UAS_MASK = 0x3,};
enum tagVARFLAGS {VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,VARFLAG_FRESTRICTED = 0x80,VARFLAG_FDEFAULTCOLLELEM = 0x100,VARFLAG_FUIDEFAULT = 0x200,VARFLAG_FNONBROWSABLE = 0x400,VARFLAG_FREPLACEABLE = 0x800,VARFLAG_FIMMEDIATEBIND = 0x1000,};
typedef struct _userHBITMAP userHBITMAP;
typedef struct _userHGLOBAL userHGLOBAL;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _ACE_HEADER ACE_HEADER;
typedef struct _AM_DVD_YUV AM_DVD_YUV;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA ARRAY_INFO;
typedef struct _AsyncIOReq AsyncIOReq;
typedef struct tagBIND_OPTS2 BIND_OPTS2;
typedef struct tagBITMAPINFO BITMAPINFO;
typedef struct _PUBLICKEYSTRUC BLOBHEADER;
typedef struct _browseinfo BROWSEINFO;
typedef struct berelement BerElement;
typedef struct tagCABSTRBLOB CABSTRBLOB;
typedef struct tagCACLIPDATA CACLIPDATA;
typedef struct tagCAFILETIME CAFILETIME;
typedef struct tagCALPOLESTR CALPOLESTR;
struct CActiveIMM;
typedef struct _CEFILEINFO CEFILEINFO;
typedef struct __CEL_BUFFER CEL_BUFFER;
typedef struct __CEL_HEADER CEL_HEADER;
typedef struct _CERT_CHAIN CERT_CHAIN;
typedef union _CEVALUNION CEVALUNION;
typedef struct _charformat CHARFORMAT;
struct CMimeTypes;
typedef struct _COAUTHINFO COAUTHINFO;
typedef struct _COMMCONFIG COMMCONFIG;
typedef union _25126A14EDD85516184FD5A53ADA74D5 CONFIG_TPL;
typedef struct tagCSPLATFORM CSPLATFORM;
struct CScrollBar;
struct CSliderBar;
struct ClientCaps;
typedef struct _D3DMATRIX D3DXMATRIX;
enum DBKINDENUM {DBKIND_GUID_NAME = 0x0,DBKIND_GUID_PROPID = 0x1,DBKIND_NAME = 0x2,DBKIND_PGUID_NAME = 0x3,DBKIND_PGUID_PROPID = 0x4,DBKIND_PROPID = 0x5,DBKIND_GUID = 0x6,};
enum DBPARTENUM {DBPART_INVALID = 0x0,DBPART_VALUE = 0x1,DBPART_LENGTH = 0x2,DBPART_STATUS = 0x4,};
enum DBPROPENUM {DBPROP_ABORTPRESERVE = 0x2,DBPROP_ACTIVESESSIONS = 0x3,DBPROP_APPENDONLY = 0xBB,DBPROP_ASYNCTXNABORT = 0xA8,DBPROP_ASYNCTXNCOMMIT = 0x4,DBPROP_AUTH_CACHE_AUTHINFO = 0x5,DBPROP_AUTH_ENCRYPT_PASSWORD = 0x6,DBPROP_AUTH_INTEGRATED = 0x7,DBPROP_AUTH_MASK_PASSWORD = 0x8,DBPROP_AUTH_PASSWORD = 0x9,DBPROP_AUTH_PERSIST_ENCRYPTED = 0xA,DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 0xB,DBPROP_AUTH_USERID = 0xC,DBPROP_BLOCKINGSTORAGEOBJECTS = 0xD,DBPROP_BOOKMARKS = 0xE,DBPROP_BOOKMARKSKIPPED = 0xF,DBPROP_BOOKMARKTYPE = 0x10,DBPROP_BYREFACCESSORS = 0x78,DBPROP_CACHEDEFERRED = 0x11,DBPROP_CANFETCHBACKWARDS = 0x12,DBPROP_CANHOLDROWS = 0x13,DBPROP_CANSCROLLBACKWARDS = 0x15,DBPROP_CATALOGLOCATION = 0x16,DBPROP_CATALOGTERM = 0x17,DBPROP_CATALOGUSAGE = 0x18,DBPROP_CHANGEINSERTEDROWS = 0xBC,DBPROP_COL_AUTOINCREMENT = 0x1A,DBPROP_COL_DEFAULT = 0x1B,DBPROP_COL_DESCRIPTION = 0x1C,DBPROP_COL_FIXEDLENGTH = 0xA7,DBPROP_COL_NULLABLE = 0x1D,DBPROP_COL_PRIMARYKEY = 0x1E,DBPROP_COL_UNIQUE = 0x1F,DBPROP_COLUMNDEFINITION = 0x20,DBPROP_COLUMNRESTRICT = 0x21,DBPROP_COMMANDTIMEOUT = 0x22,DBPROP_COMMITPRESERVE = 0x23,DBPROP_CONCATNULLBEHAVIOR = 0x24,DBPROP_CURRENTCATALOG = 0x25,DBPROP_DATASOURCENAME = 0x26,DBPROP_DATASOURCEREADONLY = 0x27,DBPROP_DBMSNAME = 0x28,DBPROP_DBMSVER = 0x29,DBPROP_DEFERRED = 0x2A,DBPROP_DELAYSTORAGEOBJECTS = 0x2B,DBPROP_DSOTHREADMODEL = 0xA9,DBPROP_GROUPBY = 0x2C,DBPROP_HETEROGENEOUSTABLES = 0x2D,DBPROP_IAccessor = 0x79,DBPROP_IColumnsInfo = 0x7A,DBPROP_IColumnsRowset = 0x7B,DBPROP_IConnectionPointContainer = 0x7C,DBPROP_IConvertType = 0xC2,DBPROP_IRowset = 0x7E,DBPROP_IRowsetChange = 0x7F,DBPROP_IRowsetIdentity = 0x80,DBPROP_IRowsetIndex = 0x9F,DBPROP_IRowsetInfo = 0x81,DBPROP_IRowsetLocate = 0x82,DBPROP_IRowsetResynch = 0x84,DBPROP_IRowsetScroll = 0x85,DBPROP_IRowsetUpdate = 0x86,DBPROP_ISupportErrorInfo = 0x87,DBPROP_ILockBytes = 0x88,DBPROP_ISequentialStream = 0x89,DBPROP_IStorage = 0x8A,DBPROP_IStream = 0x8B,DBPROP_IDENTIFIERCASE = 0x2E,DBPROP_IMMOBILEROWS = 0x2F,DBPROP_INDEX_AUTOUPDATE = 0x30,DBPROP_INDEX_CLUSTERED = 0x31,DBPROP_INDEX_FILLFACTOR = 0x32,DBPROP_INDEX_INITIALSIZE = 0x33,DBPROP_INDEX_NULLCOLLATION = 0x34,DBPROP_INDEX_NULLS = 0x35,DBPROP_INDEX_PRIMARYKEY = 0x36,DBPROP_INDEX_SORTBOOKMARKS = 0x37,DBPROP_INDEX_TEMPINDEX = 0xA3,DBPROP_INDEX_TYPE = 0x38,DBPROP_INDEX_UNIQUE = 0x39,DBPROP_INIT_DATASOURCE = 0x3B,DBPROP_INIT_HWND = 0x3C,DBPROP_INIT_IMPERSONATION_LEVEL = 0x3D,DBPROP_INIT_LCID = 0xBA,DBPROP_INIT_LOCATION = 0x3E,DBPROP_INIT_MODE = 0x3F,DBPROP_INIT_PROMPT = 0x40,DBPROP_INIT_PROTECTION_LEVEL = 0x41,DBPROP_INIT_PROVIDERSTRING = 0xA0,DBPROP_INIT_TIMEOUT = 0x42,DBPROP_LITERALBOOKMARKS = 0x43,DBPROP_LITERALIDENTITY = 0x44,DBPROP_MARSHALLABLE = 0xC5,DBPROP_MAXINDEXSIZE = 0x46,DBPROP_MAXOPENROWS = 0x47,DBPROP_MAXPENDINGROWS = 0x48,DBPROP_MAXROWS = 0x49,DBPROP_MAXROWSIZE = 0x4A,DBPROP_MAXROWSIZEINCLUDESBLOB = 0x4B,DBPROP_MAXTABLESINSELECT = 0x4C,DBPROP_MAYWRITECOLUMN = 0x4D,DBPROP_MEMORYUSAGE = 0x4E,DBPROP_MULTIPLEPARAMSETS = 0xBF,DBPROP_MULTIPLERESULTS = 0xC4,DBPROP_MULTIPLESTORAGEOBJECTS = 0x50,DBPROP_MULTITABLEUPDATE = 0x51,DBPROP_NOTIFICATIONGRANULARITY = 0xC6,DBPROP_NOTIFICATIONPHASES = 0x52,DBPROP_NOTIFYCOLUMNSET = 0xAB,DBPROP_NOTIFYROWDELETE = 0xAD,DBPROP_NOTIFYROWFIRSTCHANGE = 0xAE,DBPROP_NOTIFYROWINSERT = 0xAF,DBPROP_NOTIFYROWRESYNCH = 0xB1,DBPROP_NOTIFYROWSETCHANGED = 0xD3,DBPROP_NOTIFYROWSETRELEASE = 0xB2,DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 0xB3,DBPROP_NOTIFYROWUNDOCHANGE = 0xB4,DBPROP_NOTIFYROWUNDODELETE = 0xB5,DBPROP_NOTIFYROWUNDOINSERT = 0xB6,DBPROP_NOTIFYROWUPDATE = 0xB7,DBPROP_NULLCOLLATION = 0x53,DBPROP_OLEOBJECTS = 0x54,DBPROP_ORDERBYCOLUMNSINSELECT = 0x55,DBPROP_ORDEREDBOOKMARKS = 0x56,DBPROP_OTHERINSERT = 0x57,DBPROP_OTHERUPDATEDELETE = 0x58,DBPROP_OUTPUTPARAMETERAVAILABILITY = 0xB8,DBPROP_OWNINSERT = 0x59,DBPROP_OWNUPDATEDELETE = 0x5A,DBPROP_PERSISTENTIDTYPE = 0xB9,DBPROP_PREPAREABORTBEHAVIOR = 0x5B,DBPROP_PREPARECOMMITBEHAVIOR = 0x5C,DBPROP_PROCEDURETERM = 0x5D,DBPROP_PROVIDERNAME = 0x60,DBPROP_PROVIDEROLEDBVER = 0x61,DBPROP_PROVIDERVER = 0x62,DBPROP_QUICKRESTART = 0x63,DBPROP_QUOTEDIDENTIFIERCASE = 0x64,DBPROP_REENTRANTEVENTS = 0x65,DBPROP_REMOVEDELETED = 0x66,DBPROP_REPORTMULTIPLECHANGES = 0x67,DBPROP_RETURNPENDINGINSERTS = 0xBD,DBPROP_ROWRESTRICT = 0x68,DBPROP_ROWSETCONVERSIONSONCOMMAND = 0xC0,DBPROP_ROWTHREADMODEL = 0x69,DBPROP_SCHEMATERM = 0x6A,DBPROP_SCHEMAUSAGE = 0x6B,DBPROP_SERVERCURSOR = 0x6C,DBPROP_SESS_AUTOCOMMITISOLEVELS = 0xBE,DBPROP_SQLSUPPORT = 0x6D,DBPROP_STRONGIDENTITY = 0x77,DBPROP_STRUCTUREDSTORAGE = 0x6F,DBPROP_SUBQUERIES = 0x70,DBPROP_SUPPORTEDTXNDDL = 0xA1,DBPROP_SUPPORTEDTXNISOLEVELS = 0x71,DBPROP_SUPPORTEDTXNISORETAIN = 0x72,DBPROP_TABLETERM = 0x73,DBPROP_TBL_TEMPTABLE = 0x8C,DBPROP_TRANSACTEDOBJECT = 0x74,DBPROP_UPDATABILITY = 0x75,DBPROP_USERNAME = 0x76,};
typedef struct tagDBPROPINFO DBPROPINFO;
enum DBSEEKENUM {DBSEEK_INVALID = 0x0,DBSEEK_FIRSTEQ = 0x1,DBSEEK_LASTEQ = 0x2,DBSEEK_AFTEREQ = 0x4,DBSEEK_AFTER = 0x8,DBSEEK_BEFOREEQ = 0x10,DBSEEK_BEFORE = 0x20,};
enum DBSORTENUM {DBSORT_ASCENDING = 0x0,DBSORT_DESCENDING = 0x1,};
typedef struct tagDBSORTINFO DBSORTINFO;
enum DBTYPEENUM {DBTYPE_EMPTY = 0x0,DBTYPE_NULL = 0x1,DBTYPE_I2 = 0x2,DBTYPE_I4 = 0x3,DBTYPE_R4 = 0x4,DBTYPE_R8 = 0x5,DBTYPE_CY = 0x6,DBTYPE_DATE = 0x7,DBTYPE_BSTR = 0x8,DBTYPE_IDISPATCH = 0x9,DBTYPE_ERROR = 0xA,DBTYPE_BOOL = 0xB,DBTYPE_VARIANT = 0xC,DBTYPE_IUNKNOWN = 0xD,DBTYPE_DECIMAL = 0xE,DBTYPE_UI1 = 0x11,DBTYPE_ARRAY = 0x2000,DBTYPE_BYREF = 0x4000,DBTYPE_I1 = 0x10,DBTYPE_UI2 = 0x12,DBTYPE_UI4 = 0x13,DBTYPE_I8 = 0x14,DBTYPE_UI8 = 0x15,DBTYPE_GUID = 0x48,DBTYPE_VECTOR = 0x1000,DBTYPE_RESERVED = 0x8000,DBTYPE_BYTES = 0x80,DBTYPE_STR = 0x81,DBTYPE_WSTR = 0x82,DBTYPE_NUMERIC = 0x83,DBTYPE_UDT = 0x84,DBTYPE_DBDATE = 0x85,DBTYPE_DBTIME = 0x86,DBTYPE_DBTIMESTAMP = 0x87,};
typedef struct tagDB_NUMERIC DB_NUMERIC;
typedef struct _DDBLTBATCH DDBLTBATCH;
typedef struct _DDCAPS_DX3 DDCAPS_DX3;
typedef struct _DDCAPS_DX5 DDCAPS_DX5;
typedef struct _DDCAPS_DX6 DDCAPS_DX6;
typedef struct _DDCOLORKEY DDCOLORKEY;
typedef struct _DDKISRINFO_tag DDKISRINFO;
typedef struct _DDKPCIINFO_tag DDKPCIINFO;
typedef union _66627B77A16817CACFC28DBBF83E8217 DEVICE_TPL;
typedef struct tagDIBSECTION DIBSECTION;
typedef struct tagDISPPARAMS DISPPARAMS;
typedef struct _8CFCABD0DC01E1B1C2FF20A071112968 DMTASKINFO;
typedef struct _DOT11_SSID DOT11_SSID;
struct DSOControl;
typedef struct _DTBLBUTTON DTBLBUTTON;
typedef struct _DVD_REGION DVD_REGION;
typedef struct _DWORD_BLOB DWORD_BLOB;
struct DXGradient;
enum DXLOCKSURF {DXLOCKF_READ = 0x0,DXLOCKF_READWRITE = 0x1,DXLOCKF_EXISTINGINFOONLY = 0x2,DXLOCKF_WANTRUNINFO = 0x4,DXLOCKF_NONPREMULT = 0x10000,DXLOCKF_VALIDFLAGS = 0x10007,};
enum DXSFCREATE {DXSF_FORMAT_IS_CLSID = 0x1,DXSF_NO_LAZY_DDRAW_LOCK = 0x2,};
typedef struct tagFINDHEADER FINDHEADER;
typedef struct _73DB40CAD3136568FAD030BDAAB8FF71 FIXED_INFO;
typedef struct _068AF82868DFBF98C4A3A88443B401AE FVSHOWINFO;
struct FolderItem {struct FolderItemVtbl *lpVtbl;};
struct FtpWebView;
typedef struct _GDI_OBJECT GDI_OBJECT;
typedef struct HACMDRIVER__ *HACMDRIVER;
typedef struct HACMSTREAM__ *HACMSTREAM;
typedef unsigned int HANDLE_PTR;
typedef void *HCERTSTORE;
struct HDRVCALL__ {int unused;};
struct HDRVLINE__ {int unused;};
typedef struct tagHEAPLIST32 HEAPLIST32;
typedef struct HHEADERROW__ *HHEADERROW;
typedef struct tagHHN_NOTIFY HHN_NOTIFY;
typedef struct tagHH_ENUM_IT HH_ENUM_IT;
typedef struct tagHH_WINTYPE HH_WINTYPE;
typedef struct _IMAGELIST *HIMAGELIST;
struct HLINEAPP__ {int unused;};
struct HMIDIOUT__ {int unused;};
struct HMONITOR__ {int unused;};
struct HPALETTE__ {int unused;};
typedef  struct HTAPIPHONE__ *HTAPIPHONE;
struct HTMLDialog;
struct HTMLIFrame;
struct HTMLScreen;
struct HWAVEOUT__ {int unused;};
typedef struct tagHWXRESULTS HWXRESULTS;
struct IAMRebuild {struct IAMRebuildVtbl *lpVtbl;};
struct IAMTVTuner {struct IAMTVTunerVtbl *lpVtbl;};
struct IActiveIME {struct IActiveIMEVtbl *lpVtbl;};
struct IAudioData {struct IAudioDataVtbl *lpVtbl;};
struct ICSSFilter {struct ICSSFilterVtbl *lpVtbl;};
struct ICifRWFile {struct ICifRWFileVtbl *lpVtbl;};
struct ICifRWMode {struct ICifRWModeVtbl *lpVtbl;};
struct ICopyHookA {struct ICopyHookAVtbl *lpVtbl;};
struct ICopyHookW {struct ICopyHookWVtbl *lpVtbl;};
struct ICreateRow {struct ICreateRowVtbl *lpVtbl;};
struct ICustomDoc {struct ICustomDocVtbl *lpVtbl;};
struct IDVDDomain {struct IDVDDomainVtbl *lpVtbl;};
struct IDX2DDebug {struct IDX2DDebugVtbl *lpVtbl;};
struct IDXSurface {struct IDXSurfaceVtbl *lpVtbl;};
struct IDXTFilter {struct IDXTFilterVtbl *lpVtbl;};
struct IDirect3D8 {struct IDirect3D8Vtbl *lpVtbl;};
struct IDispError {struct IDispErrorVtbl *lpVtbl;};
struct IErrorInfo {struct IErrorInfoVtbl *lpVtbl;};
struct IFontCache {struct IFontCacheVtbl *lpVtbl;};
struct IFontNames {struct IFontNamesVtbl *lpVtbl;};
struct IFsCiAdmin {struct IFsCiAdminVtbl *lpVtbl;};
struct IHTMLCaret {struct IHTMLCaretVtbl *lpVtbl;};
struct IHTMLPopup {struct IHTMLPopupVtbl *lpVtbl;};
struct IHTMLStyle {struct IHTMLStyleVtbl *lpVtbl;};
struct IHTMLTable {struct IHTMLTableVtbl *lpVtbl;};
struct IHashTable {struct IHashTableVtbl *lpVtbl;};
struct IHlinkSite {struct IHlinkSiteVtbl *lpVtbl;};
struct IInboxSink {struct IInboxSinkVtbl *lpVtbl;};
struct ILockBytes {struct ILockBytesVtbl *lpVtbl;};
struct IMAPITable {struct IMAPITableVtbl *lpVtbl;};
struct IMDDataset {struct IMDDatasetVtbl *lpVtbl;};
typedef struct tagIMENUMINFO IMENUMINFO;
struct IMallocSpy {struct IMallocSpyVtbl *lpVtbl;};
struct IMsgrUsers {struct IMsgrUsersVtbl *lpVtbl;};
typedef struct in_pktinfo IN_PKTINFO;
struct IOleCache2 {struct IOleCache2Vtbl *lpVtbl;};
struct IOleObject {struct IOleObjectVtbl *lpVtbl;};
struct IOleWindow {struct IOleWindowVtbl *lpVtbl;};
struct IOmHistory {struct IOmHistoryVtbl *lpVtbl;};
struct IProxyInfo {struct IProxyInfoVtbl *lpVtbl;};
struct IQueryInfo {struct IQueryInfoVtbl *lpVtbl;};
struct IRTCBuddy2 {struct IRTCBuddy2Vtbl *lpVtbl;};
struct IRTCClient {struct IRTCClientVtbl *lpVtbl;};
struct IRadioBand {struct IRadioBandVtbl *lpVtbl;};
struct IRadioView {struct IRadioViewVtbl *lpVtbl;};
struct IRangeList {struct IRangeListVtbl *lpVtbl;};
struct IRowChange {struct IRowChangeVtbl *lpVtbl;};
struct ISOAPError {struct ISOAPErrorVtbl *lpVtbl;};
struct IScrollBar {struct IScrollBarVtbl *lpVtbl;};
struct ISdpRecord {struct ISdpRecordVtbl *lpVtbl;};
struct ISdpSearch {struct ISdpSearchVtbl *lpVtbl;};
struct ISdpStream {struct ISdpStreamVtbl *lpVtbl;};
struct ISensLogon {struct ISensLogonVtbl *lpVtbl;};
struct ISensOnNow {struct ISensOnNowVtbl *lpVtbl;};
struct IShellIcon {struct IShellIconVtbl *lpVtbl;};
struct IShellView {struct IShellViewVtbl *lpVtbl;};
struct ISliderBar {struct ISliderBarVtbl *lpVtbl;};
struct ISurrogate {struct ISurrogateVtbl *lpVtbl;};
typedef struct _ITEMIDLIST ITEMIDLIST;
struct ITIMEState {struct ITIMEStateVtbl *lpVtbl;};
struct ITableData {struct ITableDataVtbl *lpVtbl;};
struct ITimerSink {struct ITimerSinkVtbl *lpVtbl;};
struct ITravelLog {struct ITravelLogVtbl *lpVtbl;};
struct ITypeInfo2 {struct ITypeInfo2Vtbl *lpVtbl;};
struct IWABObject {struct IWABObjectVtbl *lpVtbl;};
struct IWebBridge {struct IWebBridgeVtbl *lpVtbl;};
struct IXMLParser {struct IXMLParserVtbl *lpVtbl;};
typedef struct tagKEYBDINPUT KEYBDINPUT;
typedef CRITICAL_SECTION KSPIN_LOCK;
typedef struct _30A778B999D395B0C4B1147E524BC6D9 L1VERS_TPL;
typedef struct ldapsearch LDAPSearch;
typedef struct _LIST_ENTRY LIST_ENTRY;
typedef struct _D59F8FB060D1A4257ECDF2860F49B6AF LM_IRPARMS;
typedef struct tagLOGPALETTE LOGPALETTE;
typedef struct addrinfo *LPADDRINFO;
typedef struct _ADRENTRY *LPADRENTRY;
typedef struct _AMVPSIZE *LPAMVPSIZE;
typedef IBindHost *LPBINDHOST;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct _COMMPROP *LPCOMMPROP;
typedef struct _cqform_A *LPCQFORM_A;
typedef struct _cqform_W *LPCQFORM_W;
typedef struct _cqpage_A *LPCQPAGE_A;
typedef struct _cqpage_W *LPCQPAGE_W;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef struct _DBGPARAM *LPDBGPARAM;
typedef struct _DDOSCAPS *LPDDOSCAPS;
typedef struct _DDSCAPS2 *LPDDSCAPS2;
typedef struct _devicemodeA *LPDEVMODEA;
typedef struct _devicemodeW *LPDEVMODEW;
typedef IDispatch *LPDISPATCH;
typedef struct IDistList *LPDISTLIST;
typedef struct _DOCINFOA *LPDOCINFOA;
typedef struct _DOCINFOW *LPDOCINFOW;
typedef struct _DSCBCAPS *LPDSCBCAPS;
typedef struct _115DB0BA7714D6186FAE116E0F88D0E0 *LPDSCOLUMN;
typedef struct _DTBLEDIT *LPDTBLEDIT;
typedef struct _DTBLPAGE *LPDTBLPAGE;
typedef struct tagELEMDESC *LPELEMDESC;
typedef IEnumGUID *LPENUMGUID;
typedef IErrorLog *LPERRORLOG;
typedef struct _FILETIME *LPFILETIME;
typedef struct tagFINDBODY *LPFINDBODY;
typedef struct _flowspec *LPFLOWSPEC;
typedef struct tagFONTDESC *LPFONTDESC;
typedef IFontDisp *LPFONTDISP;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef struct _flaglist *LPFlagList;
typedef struct _HD_LAYOUT *LPHDLAYOUT;
typedef struct in6_addr *LPIN6_ADDR;
typedef struct tagINETADDR *LPINETADDR;
typedef struct _tagITEMPROP *LPITEMPROP;
typedef struct tagLOGBRUSH *LPLOGBRUSH;
typedef struct tagLOGFONTA *LPLOGFONTA;
typedef struct tagLOGFONTW *LPLOGFONTW;
typedef struct IMailUser *LPMAILUSER;
typedef struct IMAPIProp *LPMAPIPROP;
typedef IMimeBody *LPMIMEBODY;
typedef IMimeInfo *LPMIMEINFO;
typedef struct _MMCKINFO *LPMMCKINFO;
typedef struct _MMIOINFO *LPMMIOINFO;
typedef struct _NM_UPDOWN *LPNMUPDOWN;
typedef struct tagNNTPLIST *LPNNTPLIST;
typedef struct tagNNTPNEXT *LPNNTPNEXT;
typedef struct tagNNTPXHDR *LPNNTPXHDR;
typedef struct _328060AA9F47934214406E09F9D6352A *LPNOTIFKEY;
typedef IOleCache *LPOLECACHE;
typedef struct tagPICTDESC *LPPICTDESC;
typedef struct tagPOP3LIST *LPPOP3LIST;
typedef struct tagPOP3RETR *LPPOP3RETR;
typedef struct tagPOP3STAT *LPPOP3STAT;
typedef struct tagPOP3UIDL *LPPOP3UIDL;
typedef struct tagPD *LPPRINTDLG;
typedef struct IProfSect *LPPROFSECT;
typedef struct IPropData *LPPROPDATA;
typedef struct protoent *LPPROTOENT;
typedef struct _rifflist *LPRIFFLIST;
typedef struct _RIP_INFO *LPRIP_INFO;
typedef struct sockaddr *LPSOCKADDR;
typedef struct _StrEntry *LPSTRENTRY;
typedef struct _StrTable *LPSTRTABLE;
typedef struct _TBBUTTON *LPTBBUTTON;
typedef struct timecaps_tag *LPTIMECAPS;
typedef struct tagTLIBATTR *LPTLIBATTR;
typedef struct tagTVSORTCB *LPTVSORTCB;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef ITypeComp *LPTYPECOMP;
typedef ITypeInfo *LPTYPEINFO;
typedef ITypeLib2 *LPTYPELIB2;
enum MACRO_AAL5 {AAL5_MODE_MESSAGE = 0x1,AAL5_MODE_STREAMING = 0x2,AAL5_SSCS_NULL = 0x0,AAL5_SSCS_SSCOP_ASSURED = 0x1,AAL5_SSCS_SSCOP_NON_ASSURED = 0x2,AAL5_SSCS_FRAME_RELAY = 0x4,};
enum MACRO_ACCT {ACCT_FLAG_NEWS = 1,ACCT_FLAG_MAIL = 2,ACCT_FLAG_DIR_SERV = 4,ACCT_FLAG_ALL = 7,};
enum MACRO_ADDR {ADDR_ANY = 0,};
enum MACRO_AFSR {AFSR_RESTORE = 1,AFSR_BACKNEW = 2,AFSR_NODELETENEW = 4,AFSR_NOMESSAGES = 8,AFSR_NOPROGRESS = 16,AFSR_UPDREFCNT = 512,AFSR_USEREFCNT = 1024,AFSR_EXTRAINCREFCNT = 2048,};
enum MACRO_ANSI {ANSI_NULL = 0,UNICODE_NULL = 0,};
enum MACRO_ARSR {ARSR_RESTORE = 1,ARSR_NOMESSAGES = 8,ARSR_REGSECTION = 128,ARSR_REMOVREGBKDATA = 4096,};
enum MACRO_ATOM {ATOM_HTMLHELP_API_ANSI = 14,ATOM_HTMLHELP_API_UNICODE = 15,};
enum MACRO_ATTR {ATTR_INPUT = 0x0,ATTR_TARGET_CONVERTED = 0x1,ATTR_CONVERTED = 0x2,ATTR_TARGET_NOTCONVERTED = 0x3,ATTR_INPUT_ERROR = 0x4,};
enum MACRO_AUTH {AUTH_HELP_FLAGS_NO_NTLM = 0x1,AUTH_HELP_FLAGS_PRESCAN = 0x2,AUTH_HELP_FLAGS_IGNORE_GROUP = 0x4,AUTH_HELP_FLAGS_CHECK_NOT_DENIED = 0x8,AUTH_HELP_C_ALLOW_ALL = 0x2A,AUTH_HELP_WC_ALLOW_ALL = 0x2A,AUTH_HELP_C_DENY = 0x2D,AUTH_HELP_WC_DENY = 0x2D,AUTH_HELP_C_DELIMITER = 0x3B,AUTH_HELP_WC_DELIMITER = 0x3B,AUTH_HELP_C_GROUP = 0x40,AUTH_HELP_WC_GROUP = 0x40,};
enum MACRO_AUTO {AUTO_PROXY_FLAG_USER_SET = 0x1,AUTO_PROXY_FLAG_ALWAYS_DETECT = 0x2,AUTO_PROXY_FLAG_DETECTION_RUN = 0x4,AUTO_PROXY_FLAG_MIGRATED = 0x8,AUTO_PROXY_FLAG_DONT_CACHE_PROXY_RESULT = 0x10,AUTO_PROXY_FLAG_CACHE_INIT_RUN = 0x20,AUTO_PROXY_FLAG_DETECTION_SUSPECT = 0x40,};
enum MACRO_AVIF {AVIF_HASINDEX = 0x10,AVIF_MUSTUSEINDEX = 0x20,AVIF_ISINTERLEAVED = 0x100,AVIF_TRUSTCKTYPE = 0x800,AVIF_WASCAPTUREFILE = 0x10000,AVIF_COPYRIGHTED = 0x20000,};
enum MACRO_BASE {MMSYSERR_BASE = 0,WAVERR_BASE = 32,MIDIERR_BASE = 64,TIMERR_BASE = 96,MCIERR_BASE = 256,MIXERR_BASE = 1024,};
enum MACRO_BAUD {BAUD_075 = 0x1,BAUD_110 = 0x2,BAUD_134_5 = 0x4,BAUD_150 = 0x8,BAUD_300 = 0x10,BAUD_600 = 0x20,BAUD_1200 = 0x40,BAUD_1800 = 0x80,BAUD_2400 = 0x100,BAUD_4800 = 0x200,BAUD_7200 = 0x400,BAUD_9600 = 0x800,BAUD_14400 = 0x1000,BAUD_19200 = 0x2000,BAUD_38400 = 0x4000,BAUD_56K = 0x8000,BAUD_128K = 0x10000,BAUD_115200 = 0x20000,BAUD_57600 = 0x40000,BAUD_USER = 0x10000000,};
enum MACRO_BCOB {BCOB_A = 0x1,BCOB_C = 0x3,BCOB_X = 0x10,};
enum MACRO_BEST {BEST_IF = 20,BEST_ROUTE = 21,};
enum MACRO_BFFM {BFFM_INITIALIZED = 1,BFFM_SELCHANGED = 2,BFFM_VALIDATEFAILED = 3,BFFM_SETSTATUSTEXT = 1124,BFFM_SETSELECTION = 1126,};
enum MACRO_BHLI {BHLI_ISO = 0x0,BHLI_UserSpecific = 0x1,BHLI_HighLayerProfile = 0x2,BHLI_VendorSpecificAppId = 0x3,};
enum MACRO_BLLI {BLLI_L2_ISO_1745 = 0x1,BLLI_L2_Q921 = 0x2,BLLI_L2_X25L = 0x6,BLLI_L2_X25M = 0x7,BLLI_L2_ELAPB = 0x8,BLLI_L2_HDLC_ARM = 0x9,BLLI_L2_HDLC_NRM = 0xA,BLLI_L2_HDLC_ABM = 0xB,BLLI_L2_LLC = 0xC,BLLI_L2_X75 = 0xD,BLLI_L2_Q922 = 0xE,BLLI_L2_USER_SPECIFIED = 0x10,BLLI_L2_ISO_7776 = 0x11,BLLI_L3_X25 = 0x6,BLLI_L3_ISO_8208 = 0x7,BLLI_L3_X223 = 0x8,BLLI_L3_SIO_8473 = 0x9,BLLI_L3_T70 = 0xA,BLLI_L3_ISO_TR9577 = 0xB,BLLI_L3_USER_SPECIFIED = 0x10,BLLI_L3_IPI_SNAP = 0x80,BLLI_L3_IPI_IP = 0xCC,};
enum MACRO_BODY {BODY_ENCODING_MASK = 0x180000,BODY_ENCODING_TEXT = 0x0,BODY_ENCODING_HTML = 0x80000,BODY_ENCODING_TEXT_AND_HTML = 0x100000,};
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_BOOT {BOOT_TIME_LAUNCHING_FS = 0x1,BOOT_TIME_FS_INITED = 0xA,BOOT_TIME_FS_OBJ_STORE_INITIALIZED = 0xB,BOOT_TIME_FS_FILES_INITIALIZED = 0xC,BOOT_TIME_FS_REG_INITIALIZED = 0xD,BOOT_TIME_FS_DB_INITIALIZED = 0xE,BOOT_TIME_FS_LAUNCH = 0xF,BOOT_TIME_DEV_ACTIVATE = 0x14,BOOT_TIME_DEV_FINISHED = 0x15,BOOT_TIME_GWES_FINISHED = 0x1E,BOOT_TIME_SYSTEM_STARTED = 0x28,};
enum MACRO_CALG {CALG_MD2 = 32769,CALG_MD4 = 32770,CALG_MD5 = 32771,CALG_SHA = 32772,CALG_SHA1 = 32772,CALG_MAC = 32773,CALG_RSA_SIGN = 9216,CALG_DSS_SIGN = 8704,CALG_NO_SIGN = 8192,CALG_RSA_KEYX = 41984,CALG_DES = 26113,CALG_3DES_112 = 26121,CALG_3DES = 26115,CALG_DESX = 26116,CALG_RC2 = 26114,CALG_RC4 = 26625,CALG_SEAL = 26626,CALG_DH_SF = 43521,CALG_DH_EPHEM = 43522,CALG_AGREEDKEY_ANY = 43523,CALG_KEA_KEYX = 43524,CALG_HUGHES_MD5 = 40963,CALG_SKIPJACK = 26122,CALG_TEK = 26123,CALG_CYLINK_MEK = 26124,CALG_SSL3_SHAMD5 = 32776,CALG_SSL3_MASTER = 19457,CALG_SCHANNEL_MASTER_HASH = 19458,CALG_SCHANNEL_MAC_KEY = 19459,CALG_SCHANNEL_ENC_KEY = 19463,CALG_PCT1_MASTER = 19460,CALG_SSL2_MASTER = 19461,CALG_TLS1_MASTER = 19462,CALG_RC5 = 26125,CALG_HMAC = 32777,CALG_TLS1PRF = 32778,CALG_HASH_REPLACE_OWF = 32779,CALG_AES_128 = 26126,CALG_AES_192 = 26127,CALG_AES_256 = 26128,CALG_AES = 26129,CALG_SHA_256 = 32780,CALG_SHA_384 = 32781,CALG_SHA_512 = 32782,};
enum MACRO_CARD {CARD_FCR_READ = 0,CARD_FCR_WRITE = 1,};
enum MACRO_CDDS {CDDS_PREPAINT = 0x1,CDDS_POSTPAINT = 0x2,CDDS_PREERASE = 0x3,CDDS_POSTERASE = 0x4,CDDS_ITEM = 0x10000,CDDS_ITEMPREPAINT = 0x10001,CDDS_ITEMPOSTPAINT = 0x10002,CDDS_ITEMPREERASE = 0x10003,CDDS_ITEMPOSTERASE = 0x10004,CDDS_SUBITEM = 0x20000,};
enum MACRO_CDIS {CDIS_SELECTED = 0x1,CDIS_GRAYED = 0x2,CDIS_DISABLED = 0x4,CDIS_CHECKED = 0x8,CDIS_FOCUS = 0x10,CDIS_DEFAULT = 0x20,CDIS_HOT = 0x40,CDIS_NOCONTROLFOCUS = 0x8000,};
enum MACRO_CDRF {CDRF_DODEFAULT = 0x0,CDRF_NEWFONT = 0x2,CDRF_SKIPDEFAULT = 0x4,CDRF_NOVERTBAR = 0x8,CDRF_NOTIFYPOSTPAINT = 0x10,CDRF_NOTIFYITEMDRAW = 0x20,CDRF_NOTIFYSUBITEMDRAW = 0x20,CDRF_NOTIFYPOSTERASE = 0x40,};
enum MACRO_CEDB {CEDB_EXNOTIFICATION = 0x1,};
enum MACRO_CERR {CERR_SUCCESS = 0x0,CERR_BAD_ADAPTER = 0x1,CERR_BAD_ATTRIBUTE = 0x2,CERR_BAD_BASE = 0x3,CERR_BAD_EDC = 0x4,CERR_BAD_IRQ = 0x6,CERR_BAD_OFFSET = 0x7,CERR_BAD_PAGE = 0x8,CERR_READ_FAILURE = 0x9,CERR_BAD_SIZE = 0xA,CERR_BAD_SOCKET = 0xB,CERR_BAD_TYPE = 0xD,CERR_BAD_VCC = 0xE,CERR_BAD_VPP = 0xF,CERR_BAD_WINDOW = 0x11,CERR_WRITE_FAILURE = 0x12,CERR_NO_CARD = 0x14,CERR_UNSUPPORTED_SERVICE = 0x15,CERR_UNSUPPORTED_MODE = 0x16,CERR_BAD_SPEED = 0x17,CERR_BUSY = 0x18,CERR_GENERAL_FAILURE = 0x19,CERR_WRITE_PROTECTED = 0x1A,CERR_BAD_ARG_LENGTH = 0x1B,CERR_BAD_ARGS = 0x1C,CERR_CONFIGURATION_LOCKED = 0x1D,CERR_IN_USE = 0x1E,CERR_NO_MORE_ITEMS = 0x1F,CERR_OUT_OF_RESOURCE = 0x20,CERR_BAD_HANDLE = 0x21,CERR_BAD_VERSION = 0x22,};
enum MACRO_CERT {CERT_RDN_ANY_TYPE = 0,CERT_RDN_ENCODED_BLOB = 1,CERT_RDN_OCTET_STRING = 2,CERT_RDN_NUMERIC_STRING = 3,CERT_RDN_PRINTABLE_STRING = 4,CERT_RDN_TELETEX_STRING = 5,CERT_RDN_T61_STRING = 5,CERT_RDN_VIDEOTEX_STRING = 6,CERT_RDN_IA5_STRING = 7,CERT_RDN_GRAPHIC_STRING = 8,CERT_RDN_VISIBLE_STRING = 9,CERT_RDN_ISO646_STRING = 9,CERT_RDN_GENERAL_STRING = 10,CERT_RDN_UNIVERSAL_STRING = 11,CERT_RDN_INT4_STRING = 11,CERT_RDN_BMP_STRING = 12,CERT_RDN_UNICODE_STRING = 12,CERT_RDN_UTF8_STRING = 13,CERT_RDN_TYPE_MASK = 255,CERT_RDN_FLAGS_MASK = -16777216,CERT_RDN_ENABLE_T61_UNICODE_FLAG = -2147483648,CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912,CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824,CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216,CERT_V1 = 0,CERT_V2 = 1,CERT_V3 = 2,CERT_INFO_VERSION_FLAG = 1,CERT_INFO_SERIAL_NUMBER_FLAG = 2,CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3,CERT_INFO_ISSUER_FLAG = 4,CERT_INFO_NOT_BEFORE_FLAG = 5,CERT_INFO_NOT_AFTER_FLAG = 6,CERT_INFO_SUBJECT_FLAG = 7,CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8,CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9,CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10,CERT_INFO_EXTENSION_FLAG = 11,};
enum MACRO_CEVT {CEVT_I2 = 2,CEVT_UI2 = 18,CEVT_I4 = 3,CEVT_UI4 = 19,CEVT_FILETIME = 64,CEVT_LPWSTR = 31,CEVT_BLOB = 65,CEVT_BOOL = 11,CEVT_R8 = 5,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CLIP {CLIP_DEFAULT_PRECIS = 0,CLIP_CHARACTER_PRECIS = 1,CLIP_STROKE_PRECIS = 2,};
enum MACRO_CMIC {CMIC_MASK_FLAG_NO_UI = 1024,CMIC_MASK_SHIFT_DOWN = 268435456,CMIC_MASK_CONTROL_DOWN = 536870912,CMIC_MASK_PTINVOKE = 536870912,};
enum MACRO_CMSG {CMSG_DATA = 1,CMSG_SIGNED = 2,CMSG_ENVELOPED = 3,CMSG_SIGNED_AND_ENVELOPED = 4,CMSG_HASHED = 5,CMSG_ENCRYPTED = 6,CMSG_ALL_FLAGS = -1,CMSG_DATA_FLAG = 2,CMSG_SIGNED_FLAG = 4,CMSG_ENVELOPED_FLAG = 8,CMSG_SIGNED_AND_ENVELOPED_FLAG = 16,CMSG_HASHED_FLAG = 32,CMSG_ENCRYPTED_FLAG = 64,};
enum MACRO_COPY {COPY_SUBFOLDERS = 0x10,};
enum MACRO_CQFF {CQFF_NOGLOBALPAGES = 0x1,CQFF_ISOPTIONAL = 0x2,};
enum MACRO_CQPM {CQPM_INITIALIZE = 0x1,CQPM_RELEASE = 0x2,CQPM_ENABLE = 0x3,CQPM_GETPARAMETERS = 0x5,CQPM_CLEARFORM = 0x6,CQPM_PERSIST = 0x7,CQPM_HELP = 0x8,CQPM_SETDEFAULTPARAMETERS = 0x9,CQPM_HANDLERSPECIFIC = 0x10000000,};
enum MACRO_CRED {CRED_MAX_STRING_LENGTH = 256,CRED_MAX_USERNAME_LENGTH = 513,CRED_MAX_GENERIC_TARGET_NAME_LENGTH = 32767,CRED_MAX_DOMAIN_TARGET_NAME_LENGTH = 337,CRED_MAX_VALUE_SIZE = 256,CRED_MAX_ATTRIBUTES = 64,CRED_FLAGS_PROMPT_NOW = 2,CRED_FLAGS_USERNAME_TARGET = 4,CRED_FLAGS_PERSIST_CRED_BLOB = 8,CRED_FLAGS_VALID_FLAGS = 14,CRED_TYPE_GENERIC = 1,CRED_TYPE_DOMAIN_PASSWORD = 2,CRED_TYPE_DOMAIN_CERTIFICATE = 3,CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4,CRED_TYPE_MAXIMUM = 5,CRED_MAX_CREDENTIAL_BLOB_SIZE = 512,CRED_PERSIST_NONE = 0,CRED_PERSIST_SESSION = 1,CRED_PERSIST_LOCAL_MACHINE = 2,CRED_PERSIST_ENTERPRISE = 3,CRED_TI_SERVER_FORMAT_UNKNOWN = 1,CRED_TI_DOMAIN_FORMAT_UNKNOWN = 2,CRED_TI_ONLY_PASSWORD_REQUIRED = 4,CRED_TI_USERNAME_TARGET = 8,CRED_TI_CREATE_EXPLICIT_CRED = 16,CRED_TI_WORKGROUP_MEMBER = 32,CRED_TI_VALID_FLAGS = 63,};
enum MACRO_CSTR {CSTR_LESS_THAN = 1,CSTR_EQUAL = 2,CSTR_GREATER_THAN = 3,};
enum MACRO_CTRY {CTRY_DEFAULT = 0,CTRY_ALBANIA = 355,CTRY_ALGERIA = 213,CTRY_ARGENTINA = 54,CTRY_ARMENIA = 374,CTRY_AUSTRALIA = 61,CTRY_AUSTRIA = 43,CTRY_AZERBAIJAN = 994,CTRY_BAHRAIN = 973,CTRY_BELARUS = 375,CTRY_BELGIUM = 32,CTRY_BELIZE = 501,CTRY_BOLIVIA = 591,CTRY_BRAZIL = 55,CTRY_BRUNEI_DARUSSALAM = 673,CTRY_BULGARIA = 359,CTRY_CANADA = 2,CTRY_CARIBBEAN = 1,CTRY_CHILE = 56,CTRY_COLOMBIA = 57,CTRY_COSTA_RICA = 506,CTRY_CROATIA = 385,CTRY_CZECH = 420,CTRY_DENMARK = 45,CTRY_DOMINICAN_REPUBLIC = 1,CTRY_ECUADOR = 593,CTRY_EGYPT = 20,CTRY_EL_SALVADOR = 503,CTRY_ESTONIA = 372,CTRY_FAEROE_ISLANDS = 298,CTRY_FINLAND = 358,CTRY_FRANCE = 33,CTRY_GEORGIA = 995,CTRY_GERMANY = 49,CTRY_GREECE = 30,CTRY_GUATEMALA = 502,CTRY_HONDURAS = 504,CTRY_HONG_KONG = 852,CTRY_HUNGARY = 36,CTRY_ICELAND = 354,CTRY_INDIA = 91,CTRY_INDONESIA = 62,CTRY_IRAN = 981,CTRY_IRAQ = 964,CTRY_IRELAND = 353,CTRY_ISRAEL = 972,CTRY_ITALY = 39,CTRY_JAMAICA = 1,CTRY_JAPAN = 81,CTRY_JORDAN = 962,CTRY_KAZAKSTAN = 7,CTRY_KENYA = 254,CTRY_KUWAIT = 965,CTRY_KYRGYZSTAN = 996,CTRY_LATVIA = 371,CTRY_LEBANON = 961,CTRY_LIBYA = 218,CTRY_LIECHTENSTEIN = 41,CTRY_LITHUANIA = 370,CTRY_LUXEMBOURG = 352,CTRY_MACAU = 853,CTRY_MACEDONIA = 389,CTRY_MALAYSIA = 60,CTRY_MALDIVES = 960,CTRY_MEXICO = 52,CTRY_MONACO = 33,CTRY_MONGOLIA = 976,CTRY_MOROCCO = 212,CTRY_NETHERLANDS = 31,CTRY_NEW_ZEALAND = 64,CTRY_NICARAGUA = 505,CTRY_NORWAY = 47,CTRY_OMAN = 968,CTRY_PAKISTAN = 92,CTRY_PANAMA = 507,CTRY_PARAGUAY = 595,CTRY_PERU = 51,CTRY_PHILIPPINES = 63,CTRY_POLAND = 48,CTRY_PORTUGAL = 351,CTRY_PRCHINA = 86,CTRY_PUERTO_RICO = 1,CTRY_QATAR = 974,CTRY_ROMANIA = 40,CTRY_RUSSIA = 7,CTRY_SAUDI_ARABIA = 966,CTRY_SERBIA = 381,CTRY_SINGAPORE = 65,CTRY_SLOVAK = 421,CTRY_SLOVENIA = 386,CTRY_SOUTH_AFRICA = 27,CTRY_SOUTH_KOREA = 82,CTRY_SPAIN = 34,CTRY_SWEDEN = 46,CTRY_SWITZERLAND = 41,CTRY_SYRIA = 963,CTRY_TAIWAN = 886,CTRY_TATARSTAN = 7,CTRY_THAILAND = 66,CTRY_TRINIDAD_Y_TOBAGO = 1,CTRY_TUNISIA = 216,CTRY_TURKEY = 90,CTRY_UAE = 971,CTRY_UKRAINE = 380,CTRY_UNITED_KINGDOM = 44,CTRY_UNITED_STATES = 1,CTRY_URUGUAY = 598,CTRY_UZBEKISTAN = 7,CTRY_VENEZUELA = 58,CTRY_VIET_NAM = 84,CTRY_YEMEN = 967,CTRY_ZIMBABWE = 263,};
enum MACRO_D3DX {D3DX_DEFAULT = -1,D3DX_FILTER_NONE = 1,D3DX_FILTER_POINT = 2,D3DX_FILTER_LINEAR = 3,D3DX_FILTER_TRIANGLE = 4,D3DX_FILTER_BOX = 5,D3DX_FILTER_MIRROR_U = 65536,D3DX_FILTER_MIRROR_V = 131072,D3DX_FILTER_MIRROR_W = 262144,D3DX_FILTER_MIRROR = 458752,D3DX_FILTER_DITHER = 524288,};
enum MACRO_DATA {DATA_E_FIRST = 0x80040130,DATA_E_LAST = 0x8004013F,DATA_S_FIRST = 0x40130,DATA_S_LAST = 0x4013F,};
enum MACRO_DATE {DATE_SHORTDATE = 0x1,DATE_LONGDATE = 0x2,DATE_USE_ALT_CALENDAR = 0x4,DATE_YEARMONTH = 0x8,DATE_LTRREADING = 0x10,DATE_RTLREADING = 0x20,};
enum MACRO_DBIF {DBIF_VIEWMODE_NORMAL = 0x0,DBIF_VIEWMODE_VERTICAL = 0x1,DBIF_VIEWMODE_FLOATING = 0x2,DBIF_VIEWMODE_TRANSPARENT = 0x4,};
enum MACRO_DBIM {DBIM_MINSIZE = 0x1,DBIM_MAXSIZE = 0x2,DBIM_INTEGRAL = 0x4,DBIM_ACTUAL = 0x8,DBIM_TITLE = 0x10,DBIM_MODEFLAGS = 0x20,DBIM_BKCOLOR = 0x40,};
enum MACRO_DBTF {DBTF_MEDIA = 0x1,DBTF_NET = 0x2,DBTF_RESOURCE = 0x1,DBTF_XPORT = 0x2,DBTF_SLOWNET = 0x4,};
enum MACRO_DB_E {DB_E_BADACCESSORHANDLE = 0x80040E00,DB_E_ROWLIMITEXCEEDED = 0x80040E01,DB_E_READONLYACCESSOR = 0x80040E02,DB_E_SCHEMAVIOLATION = 0x80040E03,DB_E_BADROWHANDLE = 0x80040E04,DB_E_OBJECTOPEN = 0x80040E05,DB_E_BADCHAPTER = 0x80040E06,DB_E_CANTCONVERTVALUE = 0x80040E07,DB_E_BADBINDINFO = 0x80040E08,DB_SEC_E_PERMISSIONDENIED = 0x80040E09,DB_E_NOTAREFERENCECOLUMN = 0x80040E0A,DB_E_LIMITREJECTED = 0x80040E0B,DB_E_NOCOMMAND = 0x80040E0C,DB_E_COSTLIMIT = 0x80040E0D,DB_E_BADBOOKMARK = 0x80040E0E,DB_E_BADLOCKMODE = 0x80040E0F,DB_E_PARAMNOTOPTIONAL = 0x80040E10,DB_E_BADCOLUMNID = 0x80040E11,DB_E_BADRATIO = 0x80040E12,DB_E_BADVALUES = 0x80040E13,DB_E_ERRORSINCOMMAND = 0x80040E14,DB_E_CANTCANCEL = 0x80040E15,DB_E_DIALECTNOTSUPPORTED = 0x80040E16,DB_E_DUPLICATEDATASOURCE = 0x80040E17,DB_E_CANNOTRESTART = 0x80040E18,DB_E_NOTFOUND = 0x80040E19,DB_E_NEWLYINSERTED = 0x80040E1B,DB_E_CANNOTFREE = 0x80040E1A,DB_E_GOALREJECTED = 0x80040E1C,DB_E_UNSUPPORTEDCONVERSION = 0x80040E1D,DB_E_BADSTARTPOSITION = 0x80040E1E,DB_E_NOQUERY = 0x80040E1F,DB_E_NOTREENTRANT = 0x80040E20,DB_E_ERRORSOCCURRED = 0x80040E21,DB_E_NOAGGREGATION = 0x80040E22,DB_E_DELETEDROW = 0x80040E23,DB_E_CANTFETCHBACKWARDS = 0x80040E24,DB_E_ROWSNOTRELEASED = 0x80040E25,DB_E_BADSTORAGEFLAG = 0x80040E26,DB_E_BADCOMPAREOP = 0x80040E27,DB_E_BADSTATUSVALUE = 0x80040E28,DB_E_CANTSCROLLBACKWARDS = 0x80040E29,DB_E_BADREGIONHANDLE = 0x80040E2A,DB_E_NONCONTIGUOUSRANGE = 0x80040E2B,DB_E_INVALIDTRANSITION = 0x80040E2C,DB_E_NOTASUBREGION = 0x80040E2D,DB_E_MULTIPLESTATEMENTS = 0x80040E2E,DB_E_INTEGRITYVIOLATION = 0x80040E2F,DB_E_BADTYPENAME = 0x80040E30,DB_E_ABORTLIMITREACHED = 0x80040E31,DB_E_ROWSETINCOMMAND = 0x80040E32,DB_E_CANTTRANSLATE = 0x80040E33,DB_E_DUPLICATEINDEXID = 0x80040E34,DB_E_NOINDEX = 0x80040E35,DB_E_INDEXINUSE = 0x80040E36,DB_E_NOTABLE = 0x80040E37,DB_E_CONCURRENCYVIOLATION = 0x80040E38,DB_E_BADCOPY = 0x80040E39,DB_E_BADPRECISION = 0x80040E3A,DB_E_BADSCALE = 0x80040E3B,DB_E_BADTABLEID = 0x80040E3C,DB_E_BADID = 0x80040E3C,DB_E_BADTYPE = 0x80040E3D,DB_E_DUPLICATECOLUMNID = 0x80040E3E,DB_E_DUPLICATETABLEID = 0x80040E3F,DB_E_TABLEINUSE = 0x80040E40,DB_E_NOLOCALE = 0x80040E41,DB_E_BADRECORDNUM = 0x80040E42,DB_E_BOOKMARKSKIPPED = 0x80040E43,DB_E_BADPROPERTYVALUE = 0x80040E44,DB_E_INVALID = 0x80040E45,DB_E_BADACCESSORFLAGS = 0x80040E46,DB_E_BADSTORAGEFLAGS = 0x80040E47,DB_E_BYREFACCESSORNOTSUPPORTED = 0x80040E48,DB_E_NULLACCESSORNOTSUPPORTED = 0x80040E49,DB_E_NOTPREPARED = 0x80040E4A,DB_E_BADACCESSORTYPE = 0x80040E4B,DB_E_WRITEONLYACCESSOR = 0x80040E4C,DB_SEC_E_AUTH_FAILED = 0x80040E4D,DB_E_CANCELED = 0x80040E4E,DB_E_CHAPTERNOTRELEASED = 0x80040E4F,DB_E_BADSOURCEHANDLE = 0x80040E50,DB_E_PARAMUNAVAILABLE = 0x80040E51,DB_E_ALREADYINITIALIZED = 0x80040E52,DB_E_NOTSUPPORTED = 0x80040E53,DB_E_MAXPENDCHANGESEXCEEDED = 0x80040E54,DB_E_BADORDINAL = 0x80040E55,DB_E_PENDINGCHANGES = 0x80040E56,DB_E_DATAOVERFLOW = 0x80040E57,DB_E_BADHRESULT = 0x80040E58,DB_E_BADLOOKUPID = 0x80040E59,DB_E_BADDYNAMICERRORID = 0x80040E5A,DB_E_PENDINGINSERT = 0x80040E5B,DB_E_BADCONVERTFLAG = 0x80040E5C,DB_E_BADPARAMETERNAME = 0x80040E5D,DB_E_MULTIPLESTORAGE = 0x80040E5E,DB_E_CANTFILTER = 0x80040E5F,DB_E_CANTORDER = 0x80040E60,};
enum MACRO_DCOM {DCOM_MODULES_UUID = 1,DCOM_MODULES_OLE32 = 1,DCOM_MODULES_OLEAUT32 = 1,DCOM_MODULES_ATL = 1,};
enum MACRO_DCRP {DCRP_VALID_USERNAME = 0x1,DCRP_VALID_PASSWORD = 0x2,DCRP_VALID_XML = 0x4,DCRP_VALID_DOMAIN = 0x8,DCRP_VALID_ALL = 0xF,};
enum MACRO_DDBD {DDBD_1 = 0x4000,DDBD_2 = 0x2000,DDBD_4 = 0x1000,DDBD_8 = 0x800,DDBD_16 = 0x400,DDBD_24 = 0x200,DDBD_32 = 0x100,};
enum MACRO_DDPF {DDPF_ALPHAPIXELS = 0x1,DDPF_ALPHA = 0x2,DDPF_FOURCC = 0x4,DDPF_PALETTEINDEXED4 = 0x8,DDPF_PALETTEINDEXEDTO8 = 0x10,DDPF_PALETTEINDEXED8 = 0x20,DDPF_RGB = 0x40,DDPF_COMPRESSED = 0x80,DDPF_RGBTOYUV = 0x100,DDPF_YUV = 0x200,DDPF_ZBUFFER = 0x400,DDPF_PALETTEINDEXED1 = 0x800,DDPF_PALETTEINDEXED2 = 0x1000,DDPF_ZPIXELS = 0x2000,DDPF_STENCILBUFFER = 0x4000,DDPF_ALPHAPREMULT = 0x8000,DDPF_LUMINANCE = 0x20000,DDPF_BUMPLUMINANCE = 0x40000,DDPF_BUMPDUDV = 0x80000,};
enum MACRO_DDSD {DDSD_CAPS = 0x1,DDSD_HEIGHT = 0x2,DDSD_WIDTH = 0x4,DDSD_PITCH = 0x8,DDSD_BACKBUFFERCOUNT = 0x20,DDSD_ZBUFFERBITDEPTH = 0x40,DDSD_ALPHABITDEPTH = 0x80,DDSD_LPSURFACE = 0x800,DDSD_PIXELFORMAT = 0x1000,DDSD_CKDESTOVERLAY = 0x2000,DDSD_CKDESTBLT = 0x4000,DDSD_CKSRCOVERLAY = 0x8000,DDSD_CKSRCBLT = 0x10000,DDSD_MIPMAPCOUNT = 0x20000,DDSD_REFRESHRATE = 0x40000,DDSD_LINEARSIZE = 0x80000,DDSD_TEXTURESTAGE = 0x100000,DDSD_FVF = 0x200000,DDSD_DEPTH = 0x800000,DDSD_ALL = 0xBFF8EF,};
enum MACRO_DDVP {DDVP_AUTOFLIP = 0x1,DDVP_CONVERT = 0x2,DDVP_CROP = 0x4,DDVP_INTERLEAVE = 0x8,DDVP_MIRRORLEFTRIGHT = 0x10,DDVP_MIRRORUPDOWN = 0x20,DDVP_PRESCALE = 0x40,DDVP_SKIPEVENFIELDS = 0x80,DDVP_SKIPODDFIELDS = 0x100,DDVP_SYNCMASTER = 0x200,DDVP_VBICONVERT = 0x400,DDVP_VBINOSCALE = 0x800,DDVP_OVERRIDEBOBWEAVE = 0x1000,DDVP_IGNOREVBIXCROP = 0x2000,DDVP_VBINOINTERLEAVE = 0x4000,DDVP_HARDWAREDEINTERLACE = 0x8000,};
enum MACRO_DEST {DEST_MATCHING = 28,DEST_LONGER = 29,DEST_SHORTER = 30,};
enum MACRO_DFCS {DFCS_CAPTIONCLOSE = 0x0,DFCS_CAPTIONHELP = 0x4,DFCS_CAPTIONOKBTN = 0x80,DFCS_CAPTIONMIN = 0x20,DFCS_CAPTIONMAX = 0x40,DFCS_CAPTIONRESTORE = 0x800,DFCS_SCROLLUP = 0x0,DFCS_SCROLLDOWN = 0x1,DFCS_SCROLLLEFT = 0x2,DFCS_SCROLLRIGHT = 0x3,DFCS_SCROLLCOMBOBOX = 0x5,DFCS_BUTTONCHECK = 0x0,DFCS_BUTTONRADIO = 0x4,DFCS_BUTTON3STATE = 0x8,DFCS_BUTTONPUSH = 0x10,DFCS_INACTIVE = 0x100,DFCS_PUSHED = 0x200,DFCS_CHECKED = 0x400,};
enum MACRO_DISC {DISC_UPDATE_PROFILE = 0x1,DISC_NO_FORCE = 0x40,};
enum MACRO_DISP {DISP_CHANGE_SUCCESSFUL = 0,DISP_CHANGE_RESTART = 1,DISP_CHANGE_FAILED = -1,DISP_CHANGE_BADMODE = -2,DISP_CHANGE_NOTUPDATED = -3,DISP_CHANGE_BADFLAGS = -4,DISP_CHANGE_BADPARAM = -5,};
enum MACRO_DLGC {DLGC_WANTARROWS = 0x1,DLGC_WANTTAB = 0x2,DLGC_WANTALLKEYS = 0x4,DLGC_WANTMESSAGE = 0x4,DLGC_HASSETSEL = 0x8,DLGC_DEFPUSHBUTTON = 0x10,DLGC_UNDEFPUSHBUTTON = 0x20,DLGC_RADIOBUTTON = 0x40,DLGC_WANTCHARS = 0x80,DLGC_STATIC = 0x100,DLGC_BUTTON = 0x2000,};
enum MACRO_DMDO {DMDO_0 = 0,DMDO_90 = 1,DMDO_180 = 2,DMDO_270 = 4,DMDO_DEFAULT = 0,};
enum MACRO_DONT {DONT_RESOLVE_DLL_REFERENCES = 0x1,};
enum MACRO_DRVO {DRVO_UNLOAD_INVOKED = 0x1,DRVO_LEGACY_DRIVER = 0x2,};
enum MACRO_DS3D {DS3D_IMMEDIATE = 0x0,DS3D_DEFERRED = 0x1,DS3D_MINCONEANGLE = 0x0,DS3D_MAXCONEANGLE = 0x168,DS3D_DEFAULTCONEANGLE = 0x168,DS3D_DEFAULTCONEOUTSIDEVOLUME = 0x0,};
enum MACRO_DTCT {DTCT_LABEL = 0x0,DTCT_EDIT = 0x1,DTCT_LBX = 0x2,DTCT_COMBOBOX = 0x3,DTCT_DDLBX = 0x4,DTCT_CHECKBOX = 0x5,DTCT_GROUPBOX = 0x6,DTCT_BUTTON = 0x7,DTCT_PAGE = 0x8,DTCT_RADIOBUTTON = 0x9,DTCT_MVLISTBOX = 0xB,DTCT_MVDDLBX = 0xC,};
enum MACRO_EDGE {EDGE_RAISED = 5,EDGE_SUNKEN = 10,EDGE_ETCHED = 6,EDGE_BUMP = 9,};
enum MACRO_ENUM {ENUM_E_FIRST = 0x800401B0,ENUM_E_LAST = 0x800401BF,ENUM_S_FIRST = 0x401B0,ENUM_S_LAST = 0x401BF,};
enum MACRO_EVCF {EVCF_HASSETTINGS = 0x1,EVCF_ENABLEBYDEFAULT = 0x2,EVCF_REMOVEFROMLIST = 0x4,EVCF_ENABLEBYDEFAULT_AUTO = 0x8,EVCF_DONTSHOWIFZERO = 0x10,EVCF_SETTINGSMODE = 0x20,EVCF_OUTOFDISKSPACE = 0x40,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FADF {FADF_AUTO = 0x1,FADF_STATIC = 0x2,FADF_EMBEDDED = 0x4,FADF_FIXEDSIZE = 0x10,FADF_RECORD = 0x20,FADF_HAVEIID = 0x40,FADF_HAVEVARTYPE = 0x80,FADF_BSTR = 0x100,FADF_UNKNOWN = 0x200,FADF_DISPATCH = 0x400,FADF_VARIANT = 0x800,FADF_RESERVED = 0xF008,};
enum MACRO_FIEF {FIEF_FLAG_FORCE_JITUI = 0x1,FIEF_FLAG_PEEK = 0x2,FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 0x4,};
enum MACRO_FILE {FILE_READ_DATA = 0x1,FILE_LIST_DIRECTORY = 0x1,FILE_WRITE_DATA = 0x2,FILE_ADD_FILE = 0x2,FILE_APPEND_DATA = 0x4,FILE_ADD_SUBDIRECTORY = 0x4,FILE_CREATE_PIPE_INSTANCE = 0x4,FILE_READ_EA = 0x8,FILE_WRITE_EA = 0x10,FILE_EXECUTE = 0x20,FILE_TRAVERSE = 0x20,FILE_DELETE_CHILD = 0x40,FILE_READ_ATTRIBUTES = 0x80,FILE_WRITE_ATTRIBUTES = 0x100,FILE_ALL_ACCESS = 0x1F01FF,FILE_GENERIC_READ = 0x120089,FILE_GENERIC_WRITE = 0x120116,FILE_GENERIC_EXECUTE = 0x1200A0,FILE_SHARE_READ = 0x1,FILE_SHARE_WRITE = 0x2,FILE_SHARE_DELETE = 0x4,FILE_ATTRIBUTE_READONLY = 0x1,FILE_ATTRIBUTE_HIDDEN = 0x2,FILE_ATTRIBUTE_SYSTEM = 0x4,FILE_ATTRIBUTE_DIRECTORY = 0x10,FILE_ATTRIBUTE_ARCHIVE = 0x20,FILE_ATTRIBUTE_INROM = 0x40,FILE_ATTRIBUTE_ENCRYPTED = 0x40,FILE_ATTRIBUTE_NORMAL = 0x80,FILE_ATTRIBUTE_TEMPORARY = 0x100,FILE_ATTRIBUTE_SPARSE_FILE = 0x200,};
enum MACRO_FIND {FIND_FIRST_EX_CASE_SENSITIVE = 0x1,};
enum MACRO_FLAG {FLAG_ICC_FORCE_CONNECTION = 0x1,};
enum MACRO_FMFD {FMFD_DEFAULT = 0x0,FMFD_URLASFILENAME = 0x1,};
enum MACRO_FROM {FROM_PROTOCOL_INFO = -1,};
enum MACRO_GDTR {GDTR_MIN = 0x1,GDTR_MAX = 0x2,};
enum MACRO_GHND {GHND = 66,};
enum MACRO_GMEM {GMEM_FIXED = 0,GMEM_MOVEABLE = 2,};
enum MACRO_GPTR {GPTR = 64,};
enum MACRO_GWES {GWES_GWE1 = 1,GWES_WMBASE = 1,GWES_GWESHARE = 1,GWES_GWESMAIN = 1,GWES_IMMTHUNK = 1,GWES_MSGQUE = 1,GWES_GSETWINLONG = 1,GWES_CEPTR = 1,GWES_FOREGND = 1,GWES_UIBASE = 1,GWES_KBDUI = 1,GWES_JOURNAL = 1,GWES_HOTKEY = 1,GWES_IDLE = 1,GWES_NLED = 1,GWES_MSGBEEP = 1,GWES_NOTIFY = 1,GWES_NOTIFPUB = 1,GWES_AUDIO = 1,GWES_GWE2 = 1,GWES_MGBASE = 1,GWES_MGBITMAP = 1,GWES_MGBLT = 1,GWES_MGBLT2 = 1,GWES_MGDC = 1,GWES_MGDIBSEC = 1,GWES_MGDRAW = 1,GWES_MGRGN = 1,GWES_MGWINMGR = 1,GWES_MGPALNAT = 1,GWES_MGGRADFILL = 1,GWES_MGTT = 1,GWES_MGDRWTXT = 1,GWES_MGPAL = 1,GWES_MGTCI = 1,GWES_MGALIAS = 1,GWES_TCHUI = 1,GWES_CALIBRUI = 1,GWES_MGDX = 1,GWES_MGPRINT = 1,GWES_GWE3 = 1,GWES_ATOM = 1,GWES_WINMGR = 1,GWES_SBCMN = 1,GWES_NCLIENT = 1,GWES_CARET = 1,GWES_CLIPBD = 1,GWES_TIMER = 1,GWES_ACCEL = 1,GWES_DEFWNDPROC = 1,GWES_GCACHE = 1,GWES_LOADBMP = 1,GWES_LOADIMG = 1,GWES_SYSCOLOR = 1,GWES_MENU = 1,GWES_CASCADE = 1,GWES_COLUMN = 1,GWES_MENUSCRL = 1,GWES_DRAWMBAR = 1,GWES_MNOOVER = 1,GWES_ICONCMN = 1,GWES_ICON = 1,GWES_MOUSECURSORONLY = 1,GWES_ICONCURS = 1,GWES_MCURSOR = 1,GWES_MCURSOR8 = 1,GWES_MNOTAPUI = 1,GWES_GWE4 = 1,GWES_DLGMGR = 1,GWES_DLGMNEM = 1,GWES_GWECTRL = 1,GWES_BTNCTL = 1,GWES_STCCTL = 1,GWES_EDCTL = 1,GWES_MSGBOX = 1,GWES_MSGBOX_HPC = 1,GWES_DLGMGR_HPC = 1,GWES_MENU_HPC = 1,GWES_EDITCONTROLOS = 1,GWES_STARTUP = 1,GWES_OOMUI = 1,GWES_OOM = 1,GWES_STARTUI = 1,GWES_CMBCTL = 1,GWES_CDLCTL = 1,GWES_IMGCTL = 1,GWES_LBCTL = 1,GWES_SCBCTL = 1,GWES_SBCMNVIEW = 1,GWES_NCLIENTVIEW = 1,GWES_GCACHEVIEW = 1,GWES_BTNCTLVIEW = 1,GWES_STCCTLVIEW = 1,GWES_CMBCTLVIEW = 1,GWES_LBCTLVIEW = 1,};
enum MACRO_HCCE {HCCE_CURRENT_USER = 0,HCCE_LOCAL_MACHINE = 1,};
enum MACRO_HEAP {HEAP_NO_SERIALIZE = 0x1,HEAP_GROWABLE = 0x2,HEAP_GENERATE_EXCEPTIONS = 0x4,HEAP_ZERO_MEMORY = 0x8,HEAP_REALLOC_IN_PLACE_ONLY = 0x10,HEAP_TAIL_CHECKING_ENABLED = 0x20,HEAP_FREE_CHECKING_ENABLED = 0x40,HEAP_DISABLE_COALESCE_ON_FREE = 0x80,HEAP_CREATE_ALIGN_16 = 0x10000,HEAP_CREATE_ENABLE_TRACING = 0x20000,HEAP_MAXIMUM_TAG = 0xFFF,HEAP_PSEUDO_TAG_FLAG = 0x8000,HEAP_TAG_SHIFT = 0x12,};
enum MACRO_HF32 {HF32_DEFAULT = 1,};
enum MACRO_HKEY {HKEY_CLASSES_ROOT = 0x80000000,HKEY_CURRENT_USER = 0x80000001,HKEY_LOCAL_MACHINE = 0x80000002,HKEY_USERS = 0x80000003,};
enum MACRO_HOST {HOST_NOT_FOUND = 11001,};
enum MACRO_HTTP {HTTP_MEMBERINFO_COMMONPROPS = 0,HTTP_MEMBERINFO_FOLDERPROPS = 1,HTTP_MEMBERINFO_MESSAGEPROPS = 2,HTTP_MEMBERINFO_ALLPROPS = 3,};
enum MACRO_HWND {HWND_BROADCAST = 0xFFFF,};
enum MACRO_IA64 {IA64_STUB_NOT_AVAILABLE = -1,IA64_JMPE_MASK = 16777215,IA64_JMPE_MARKER = 3473423,};
enum MACRO_IACE {IACE_CHILDREN = 0x1,IACE_DEFAULT = 0x10,IACE_IGNORENOCONTEXT = 0x20,};
enum MACRO_ICON {ICON_SMALL = 0,ICON_BIG = 1,};
enum MACRO_IDNO {IDNO = 7,IDCLOSE = 8,};
enum MACRO_IDOK {IDOK = 1,IDCANCEL = 2,};
enum MACRO_IDSI {IDSI_FLAG_KEEP_ALIVE = 0x1,IDSI_FLAG_SECURE = 0x2,IDSI_FLAG_PROXY = 0x4,IDSI_FLAG_TUNNEL = 0x8,};
enum MACRO_IDTB {IDTB_EXPAND = 200,IDTB_CONTRACT = 201,IDTB_STOP = 202,IDTB_REFRESH = 203,IDTB_BACK = 204,IDTB_HOME = 205,IDTB_SYNC = 206,IDTB_PRINT = 207,IDTB_OPTIONS = 208,IDTB_FORWARD = 209,IDTB_NOTES = 210,IDTB_BROWSE_FWD = 211,IDTB_BROWSE_BACK = 212,IDTB_CONTENTS = 213,IDTB_INDEX = 214,IDTB_SEARCH = 215,IDTB_HISTORY = 216,IDTB_BOOKMARKS = 217,IDTB_JUMP1 = 218,IDTB_JUMP2 = 219,IDTB_CUSTOMIZE = 221,IDTB_ZOOM = 222,IDTB_TOC_NEXT = 223,IDTB_TOC_PREV = 224,};
enum MACRO_ILCF {ILCF_MOVE = 0x0,ILCF_SWAP = 0x1,};
enum MACRO_IMAP {IMAP_FLDRLIST_DIRTY = 0x1,IMAP_OE4MIGRATE_DIRTY = 0x2,IMAP_SENTITEMS_DIRTY = 0x4,IMAP_DRAFTS_DIRTY = 0x8,};
enum MACRO_IMCR {IMCR_INPUT = 0x1,IMCR_CONVERT = 0x2,IMCR_UNCONVERT = 0x3,IMCR_COMPOSITION = 0x4,};
enum MACRO_IMFS {IMFS_GRAYED = 1,IMFS_CHECKED = 8,IMFS_HILITE = 128,IMFS_ENABLED = 0,IMFS_UNCHECKED = 0,IMFS_UNHILITE = 0,};
enum MACRO_IMFT {IMFT_RADIOCHECK = 0x1,IMFT_SEPARATOR = 0x2,IMFT_SUBMENU = 0x4,};
enum MACRO_IMMF {IMMF_SETCLR_SHIFT = 0x10000,IMMF_SETCLR_CAPSLOCK = 0x20000,IMMF_SHIFT = 0x1000000,IMMF_CAPSLOCK = 0x2000000,IMMF_MASK = 0xFFFF0000,};
enum MACRO_INCL {INCL_WINSOCK_API_PROTOTYPES = 1,INCL_WINSOCK_API_TYPEDEFS = 0,};
enum MACRO_INET {INET_E_ERROR_LAST = -2146697193,};
enum MACRO_INIT {INIT_STATUSWNDPOS = 0x1,INIT_CONVERSION = 0x2,INIT_SENTENCE = 0x4,INIT_LOGFONT = 0x8,INIT_COMPFORM = 0x10,INIT_SOFTKBDPOS = 0x20,};
enum MACRO_IPHK {IPHK_HOTKEY = 0x1,IPHK_PROCESSBYIME = 0x2,IPHK_CHECKCTRL = 0x4,IPHK_SKIPTHISKEY = 0x10,};
enum MACRO_IPV6 {IPV6_HDRINCL = 2,IPV6_UNICAST_HOPS = 4,IPV6_MULTICAST_IF = 9,IPV6_MULTICAST_HOPS = 10,IPV6_MULTICAST_LOOP = 11,IPV6_ADD_MEMBERSHIP = 12,IPV6_DROP_MEMBERSHIP = 13,IPV6_JOIN_GROUP = 12,IPV6_LEAVE_GROUP = 13,IPV6_PKTINFO = 19,IPV6_HOPLIMIT = 21,};
enum MACRO_JPEG {JPEG_DIB = 1195724874,MJPG_DIB = 1196444237,};
enum MACRO_KBDI {KBDI_VKEY_TO_UNICODE_INFO_ID = 0,KBDI_AUTOREPEAT_INFO_ID = 1,};
enum MACRO_KEEP {KEEP_OPEN_READONLY = 0x1,KEEP_OPEN_READWRITE = 0x2,};
enum MACRO_LANG {LANG_NEUTRAL = 0x0,LANG_INVARIANT = 0x7F,LANG_AFRIKAANS = 0x36,LANG_ALBANIAN = 0x1C,LANG_ARABIC = 0x1,LANG_ARMENIAN = 0x2B,LANG_ASSAMESE = 0x4D,LANG_AZERI = 0x2C,LANG_BASQUE = 0x2D,LANG_BELARUSIAN = 0x23,LANG_BENGALI = 0x45,LANG_BULGARIAN = 0x2,LANG_CATALAN = 0x3,LANG_CHINESE = 0x4,LANG_CROATIAN = 0x1A,LANG_CZECH = 0x5,LANG_DANISH = 0x6,LANG_DUTCH = 0x13,LANG_ENGLISH = 0x9,LANG_ESTONIAN = 0x25,LANG_FAEROESE = 0x38,LANG_FARSI = 0x29,LANG_FINNISH = 0xB,LANG_FRENCH = 0xC,LANG_GEORGIAN = 0x37,LANG_GERMAN = 0x7,LANG_GREEK = 0x8,LANG_GUJARATI = 0x47,LANG_HEBREW = 0xD,LANG_HINDI = 0x39,LANG_HUNGARIAN = 0xE,LANG_ICELANDIC = 0xF,LANG_INDONESIAN = 0x21,LANG_ITALIAN = 0x10,LANG_JAPANESE = 0x11,LANG_KANNADA = 0x4B,LANG_KASHMIRI = 0x60,LANG_KAZAK = 0x3F,LANG_KONKANI = 0x57,LANG_KOREAN = 0x12,LANG_LATVIAN = 0x26,LANG_LITHUANIAN = 0x27,LANG_MACEDONIAN = 0x2F,LANG_MALAY = 0x3E,LANG_MALAYALAM = 0x4C,LANG_MANIPURI = 0x58,LANG_MARATHI = 0x4E,LANG_NEPALI = 0x61,LANG_NORWEGIAN = 0x14,LANG_ORIYA = 0x48,LANG_POLISH = 0x15,LANG_PORTUGUESE = 0x16,LANG_PUNJABI = 0x46,LANG_ROMANIAN = 0x18,LANG_RUSSIAN = 0x19,LANG_SANSKRIT = 0x4F,LANG_SERBIAN = 0x1A,LANG_SINDHI = 0x59,LANG_SLOVAK = 0x1B,LANG_SLOVENIAN = 0x24,LANG_SPANISH = 0xA,LANG_SWAHILI = 0x41,LANG_SWEDISH = 0x1D,LANG_TAMIL = 0x49,LANG_TATAR = 0x44,LANG_TELUGU = 0x4A,LANG_THAI = 0x1E,LANG_TURKISH = 0x1F,LANG_UKRAINIAN = 0x22,LANG_URDU = 0x20,LANG_UZBEK = 0x43,LANG_VIETNAMESE = 0x2A,};
enum MACRO_LAPI {LAPI_MAJOR_VER1 = 1,LAPI_MINOR_VER1 = 1,};
enum MACRO_LAST {LAST_LINEMEDIAMODE = 0x8000,};
enum MACRO_LBER {LBER_USE_DER = 0x1,LBER_USE_INDEFINITE_LEN = 0x2,LBER_TRANSLATE_STRINGS = 0x4,};
enum MACRO_LCID {LCID_INSTALLED = 0x1,LCID_SUPPORTED = 0x2,LCID_ALTERNATE_SORTS = 0x4,};
enum MACRO_LDAP {LDAP_AUTH_ANONYMOUS = 0,LDAP_AUTH_PASSWORD = 1,LDAP_AUTH_MEMBER_SYSTEM = 2,LDAP_AUTH_MAX = 2,LDAP_PRESULT_UNKNOWN = 0,LDAP_PRESULT_SUPPORTED = 1,LDAP_PRESULT_NOTSUPPORTED = 2,LDAP_PRESULT_MAX = 2,LDAP_NTDS_UNKNOWN = 0,LDAP_NTDS_IS = 1,LDAP_NTDS_ISNOT = 2,LDAP_NTDS_MAX = 2,};
enum MACRO_LDBL {LDBL_DIG = 15,LDBL_MANT_DIG = 53,LDBL_MAX_10_EXP = 308,LDBL_MAX_EXP = 1024,LDBL_MIN_10_EXP = -307,LDBL_MIN_EXP = -1021,};
enum MACRO_LF32 {LF32_FIXED = 0x1,LF32_FREE = 0x2,LF32_MOVEABLE = 0x4,LF32_DECOMMIT = 0x8,LF32_BIGBLOCK = 0x10,};
enum MACRO_LHND {LHND = 66,};
enum MACRO_LINE {LINE_ADDRESSSTATE = 0,LINE_CALLINFO = 1,LINE_CALLSTATE = 2,LINE_CLOSE = 3,LINE_DEVSPECIFIC = 4,LINE_DEVSPECIFICFEATURE = 5,LINE_GATHERDIGITS = 6,LINE_GENERATE = 7,LINE_LINEDEVSTATE = 8,LINE_MONITORDIGITS = 9,LINE_MONITORMEDIA = 10,LINE_MONITORTONE = 11,LINE_REPLY = 12,LINE_REQUEST = 13,};
enum MACRO_LM20 {LM20_CNLEN = 15,};
enum MACRO_LMEM {LMEM_FIXED = 0x0,LMEM_MOVEABLE = 0x2,LMEM_NOCOMPACT = 0x10,LMEM_NODISCARD = 0x20,LMEM_ZEROINIT = 0x40,LMEM_MODIFY = 0x80,LMEM_DISCARDABLE = 0xF00,LMEM_VALID_FLAGS = 0xF72,LMEM_INVALID_HANDLE = 0x8000,LMEM_DDESHARE = 0x0,LMEM_LOWER = 0x0,LMEM_NOT_BANKED = 0x0,LMEM_NOTIFY = 0x0,LMEM_SHARE = 0x0,};
enum MACRO_LOAD {LOAD_LIBRARY_AS_DATAFILE = 0x2,LOAD_WITH_ALTERED_SEARCH_PATH = 0x8,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_LPTR {LPTR = 64,};
enum MACRO_LPTx {LPTx = 0x80,};
enum MACRO_LVBD {LVBD_DRAGSELECT = 200,};
enum MACRO_LVCF {LVCF_FMT = 0x1,LVCF_WIDTH = 0x2,LVCF_TEXT = 0x4,LVCF_SUBITEM = 0x8,LVCF_IMAGE = 0x10,LVCF_ORDER = 0x20,};
enum MACRO_LVFI {LVFI_PARAM = 0x1,LVFI_STRING = 0x2,LVFI_PARTIAL = 0x8,LVFI_WRAP = 0x20,LVFI_NEARESTXY = 0x40,};
enum MACRO_LVHT {LVHT_NOWHERE = 0x1,LVHT_ONITEMICON = 0x2,LVHT_ONITEMLABEL = 0x4,LVHT_ONITEMSTATEICON = 0x8,LVHT_ONITEM = 0xE,LVHT_ABOVE = 0x8,LVHT_BELOW = 0x10,LVHT_TORIGHT = 0x20,LVHT_TOLEFT = 0x40,};
enum MACRO_LVIF {LVIF_TEXT = 0x1,LVIF_IMAGE = 0x2,LVIF_PARAM = 0x4,LVIF_STATE = 0x8,LVIF_INDENT = 0x10,LVIF_NORECOMPUTE = 0x800,};
enum MACRO_LVIR {LVIR_BOUNDS = 0,LVIR_ICON = 1,LVIR_LABEL = 2,LVIR_SELECTBOUNDS = 3,};
enum MACRO_LVIS {LVIS_ALL = 0xFFFF,};
enum MACRO_LVNI {LVNI_ALL = 0x0,LVNI_FOCUSED = 0x1,LVNI_SELECTED = 0x2,LVNI_CUT = 0x4,LVNI_DROPHILITED = 0x8,LVNI_ABOVE = 0x100,LVNI_BELOW = 0x200,LVNI_TOLEFT = 0x400,LVNI_TORIGHT = 0x800,};
enum MACRO_MAPI {MAPI_DIM = 1,MAPI_MODIFY = 1,MAPI_ACCESS_MODIFY = 1,MAPI_ACCESS_READ = 2,MAPI_ACCESS_DELETE = 4,MAPI_ACCESS_CREATE_HIERARCHY = 8,MAPI_ACCESS_CREATE_CONTENTS = 16,MAPI_ACCESS_CREATE_ASSOCIATED = 32,MAPI_UNICODE = 2147483648,};
enum MACRO_MASK {NAP_MASK = 0xFFFF00000000,SAP_MASK = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_MCHT {MCHT_TITLE = 0x10000,MCHT_CALENDAR = 0x20000,MCHT_TODAYLINK = 0x30000,MCHT_NONELINK = 0x40000,MCHT_NEXT = 0x1000000,MCHT_PREV = 0x2000000,MCHT_NOWHERE = 0x0,MCHT_TITLEBK = 0x10000,MCHT_TITLEMONTH = 0x10001,MCHT_TITLEYEAR = 0x10002,MCHT_TITLEBTNNEXT = 0x1010003,MCHT_TITLEBTNPREV = 0x2010003,MCHT_CALENDARBK = 0x20000,MCHT_CALENDARDATE = 0x20001,MCHT_CALENDARDATENEXT = 0x1020001,MCHT_CALENDARDATEPREV = 0x2020001,MCHT_CALENDARDAY = 0x20002,MCHT_CALENDARWEEKNUM = 0x20003,};
enum MACRO_MCSC {MCSC_BACKGROUND = 0,MCSC_TEXT = 1,MCSC_TITLEBK = 2,MCSC_TITLETEXT = 3,MCSC_MONTHBK = 4,MCSC_TRAILINGTEXT = 5,};
enum MACRO_MDFF {MDFF_BOLD = 0x1,MDFF_ITALIC = 0x2,MDFF_UNDERLINE = 0x4,MDFF_STRIKEOUT = 0x8,};
enum MACRO_MD_E {MD_E_BADTUPLE = 0x80040E61,MD_E_BADCOORDINATE = 0x80040E62,MD_E_INVALIDAXIS = 0x80040E63,MD_E_INVALIDCELLRANGE = 0x80040E64,};
enum MACRO_MECD {MECD_HTML = 0x1,MECD_PLAINTEXT = 0x2,MECD_ENCODEIMAGES = 0x4,MECD_ENCODEFILEURLSONLY = 0x8,MECD_ENCODESOUNDS = 0x10,MECD_ENCODEVIDEO = 0x20,MECD_ENCODEPLUGINS = 0x40,};
enum MACRO_MEVT {MEVT_F_SHORT = 0x0,MEVT_F_LONG = 0x80000000,MEVT_F_CALLBACK = 0x40000000,MEVT_SHORTMSG = 0x0,MEVT_TEMPO = 0x1,MEVT_NOP = 0x2,MEVT_LONGMSG = 0x80,MEVT_COMMENT = 0x82,MEVT_VERSION = 0x84,};
enum MACRO_MHDR {MHDR_DONE = 0x1,MHDR_PREPARED = 0x2,MHDR_INQUEUE = 0x4,MHDR_ISSTRM = 0x8,MHDR_SENDING = 0x20,MHDR_MAPPED = 0x1000,MHDR_SHADOWHDR = 0x2000,MHDR_VALID = 0xE000302F,MHDR_SAVE = 0xE0003000,MHDR_WRITEABLE = 0xE0000000,MHDR_GENERALMIDI = 0x80000000,MHDR_GMDRUM = 0x40000000,MHDR_MAPPINGTABLE = 0x20000000,};
enum MACRO_MIDI {MIDI_MAPPER = 4294967295,MIDI_IO_STATUS = 32,MIDI_IO_CONTROL = 8,MIDI_IO_INPUT = 16,MIDI_IO_OWNED = 16384,MIDI_IO_SHARED = 32768,MIDI_I_VALID = 49191,MIDI_O_VALID = 49166,MIDI_CACHE_ALL = 1,MIDI_CACHE_BESTFIT = 2,MIDI_CACHE_QUERY = 3,MIDI_UNCACHE = 4,MIDI_CACHE_VALID = 7,};
enum MACRO_MIIM {MIIM_STATE = 0x1,MIIM_ID = 0x2,MIIM_SUBMENU = 0x4,MIIM_CHECKMARKS = 0x8,MIIM_TYPE = 0x10,MIIM_DATA = 0x20,};
enum MACRO_MIME {MIME_E_REG_CREATE_KEY = 0x800CCE01,MIME_E_REG_QUERY_INFO = 0x800CCE02,MIME_E_INVALID_ENCTYPE = 0x800CCE03,MIME_E_BOUNDARY_MISMATCH = 0x800CCE04,MIME_E_NOT_FOUND = 0x800CCE05,MIME_E_NO_DATA = 0x800CCE05,MIME_E_BUFFER_TOO_SMALL = 0x800CCE06,MIME_E_INVALID_ITEM_FLAGS = 0x800CCE07,MIME_E_ONE_LINE_ITEM = 0x800CCE08,MIME_E_INVALID_HANDLE = 0x800CCE09,MIME_E_CHARSET_TRANSLATE = 0x800CCE0A,MIME_E_NOT_INITIALIZED = 0x800CCE0B,MIME_E_NO_MORE_ROWS = 0x800CCE0C,MIME_E_ALREADY_BOUND = 0x800CCE0D,MIME_E_CANT_RESET_ROOT = 0x800CCE0E,MIME_E_INSERT_NOT_ALLOWED = 0x800CCE0F,MIME_E_BAD_BODY_LOCATION = 0x800CCE10,MIME_E_NOT_MULTIPART = 0x800CCE11,MIME_E_NO_MULTIPART_BOUNDARY = 0x800CCE12,MIME_E_CONVERT_NOT_NEEDED = 0x800CCE13,MIME_E_CANT_MOVE_BODY = 0x800CCE14,MIME_E_UNKNOWN_BODYTREE_VERSION = 0x800CCE15,MIME_E_NOTHING_TO_SAVE = 0x800CCE16,MIME_E_NEED_SAVE_MESSAGE = 0x800CCE17,MIME_E_NOTHING_TO_REVERT = 0x800CCE18,MIME_E_MSG_SIZE_DIFF = 0x800CCE19,MIME_E_CANT_RESET_PARENT = 0x800CCE1A,MIME_E_CORRUPT_CACHE_TREE = 0x800CCE1B,MIME_E_BODYTREE_OUT_OF_SYNC = 0x800CCE1C,MIME_E_INVALID_ENCODINGTYPE = 0x800CCE1D,MIME_E_MULTIPART_NO_DATA = 0x800CCE1E,MIME_E_INVALID_OPTION_VALUE = 0x800CCE1F,MIME_E_INVALID_OPTION_ID = 0x800CCE20,MIME_E_INVALID_HEADER_NAME = 0x800CCE21,MIME_E_NOT_BOUND = 0x800CCE22,MIME_E_MAX_SIZE_TOO_SMALL = 0x800CCE23,MIME_E_MULTIPART_HAS_CHILDREN = 0x800CCE25,MIME_E_INVALID_PROP_FLAGS = 0x800CCE26,MIME_E_INVALID_ADDRESS_TYPE = 0x800CCE27,MIME_E_INVALID_OBJECT_IID = 0x800CCE28,MIME_E_MLANG_DLL_NOT_FOUND = 0x800CCE29,MIME_E_ROOT_NOT_EMPTY = 0x800CCE2A,MIME_E_MLANG_BAD_DLL = 0x800CCE2B,MIME_E_REG_OPEN_KEY = 0x800CCE2C,MIME_E_INVALID_INET_DATE = 0x800CCE2D,MIME_E_INVALID_BODYTYPE = 0x800CCE2E,MIME_E_INVALID_DELETE_TYPE = 0x800CCE2F,MIME_E_OPTION_HAS_NO_VALUE = 0x800CCE30,MIME_E_INVALID_CHARSET_TYPE = 0x800CCE31,MIME_E_VARTYPE_NO_CONVERT = 0x800CCE32,MIME_E_INVALID_VARTYPE = 0x800CCE33,MIME_E_NO_MORE_ADDRESS_TYPES = 0x800CCE34,MIME_E_INVALID_ENCODING_TYPE = 0x800CCE35,MIME_S_ILLEGAL_LINES_FOUND = 0xCCE36,MIME_S_MIME_VERSION = 0xCCE37,MIME_E_INVALID_TEXT_TYPE = 0x800CCE38,MIME_E_READ_ONLY = 0x800CCE39,MIME_S_INVALID_MESSAGE = 0xCCE3A,MIME_S_CHARSET_CONFLICT = 0xCCE3B,MIME_E_UNSUPPORTED_VARTYPE = 0x800CCE3C,MIME_S_NO_CHARSET_CONVERT = 0xCCE3D,MIME_E_URL_NOTFOUND = 0x800CCE3E,MIME_E_BAD_TEXT_DATA = 0x800CCE3F,MIME_E_NO_SIGNER = 0xCCE40,MIME_E_SECURITY_NOTINIT = 0x800CCEA0,MIME_E_SECURITY_LOADCRYPT32 = 0x800CCEA1,MIME_E_SECURITY_BADPROCADDR = 0x800CCEA2,MIME_E_SECURITY_NODEFAULT = 0x800CCEB0,MIME_E_SECURITY_NOOP = 0x800CCEB1,MIME_S_SECURITY_NOOP = 0xCCEB1,MIME_S_SECURITY_NONE = 0xCCEB2,MIME_S_SECURITY_ERROROCCURED = 0xCCEB3,MIME_E_SECURITY_USERCHOICE = 0x800CCEB4,MIME_E_SECURITY_UNKMSGTYPE = 0x800CCEB5,MIME_E_SECURITY_BADMESSAGE = 0x800CCEB6,MIME_E_SECURITY_BADCONTENT = 0x800CCEB7,MIME_E_SECURITY_BADSECURETYPE = 0x800CCEB8,MIME_E_SECURITY_CLASSNOTSUPPORTED = 0x800CCEB9,MIME_S_SECURITY_RECURSEONLY = 0xCCEBA,MIME_E_SECURITY_BADSTORE = 0x800CCED0,MIME_S_SECURITY_NOCERT = 0xCCED1,MIME_E_SECURITY_NOCERT = 0x800CCED1,MIME_E_SECURITY_CERTERROR = 0x800CCED2,MIME_S_SECURITY_CERTERROR = 0xCCED2,MIME_S_SECURITY_NODEFCERT = 0xCCED3,MIME_E_SECURITY_BADSIGNATURE = 0x800CCEE0,MIME_E_SECURITY_MULTSIGNERS = 0x800CCEE1,MIME_E_SECURITY_NOSIGNINGCERT = 0x800CCEE2,MIME_E_SECURITY_CANTDECRYPT = 0x800CCEF0,MIME_E_SECURITY_ENCRYPTNOSENDERCERT = 0x800CCEF1,MIME_S_SECURITY_NOSENDERCERT = 0xCCEF2,};
enum MACRO_MMIO {MMIO_RWMODE = 0x3,MMIO_SHAREMODE = 0x70,MMIO_CREATE = 0x1000,MMIO_PARSE = 0x100,MMIO_DELETE = 0x200,MMIO_EXIST = 0x4000,MMIO_ALLOCBUF = 0x10000,MMIO_GETTEMP = 0x20000,MMIO_DIRTY = 0x10000000,MMIO_OPEN_VALID = 0x3FFFF,MMIO_READ = 0x0,MMIO_WRITE = 0x1,MMIO_READWRITE = 0x2,MMIO_COMPAT = 0x0,MMIO_EXCLUSIVE = 0x10,MMIO_DENYWRITE = 0x20,MMIO_DENYREAD = 0x30,MMIO_DENYNONE = 0x40,MMIO_FHOPEN = 0x10,MMIO_EMPTYBUF = 0x10,MMIO_TOUPPER = 0x10,MMIO_INSTALLPROC = 0x10000,MMIO_GLOBALPROC = 0x10000000,MMIO_REMOVEPROC = 0x20000,MMIO_UNICODEPROC = 0x1000000,MMIO_FINDPROC = 0x40000,MMIO_FINDCHUNK = 0x10,MMIO_FINDRIFF = 0x20,MMIO_FINDLIST = 0x40,MMIO_CREATERIFF = 0x20,MMIO_CREATELIST = 0x40,MMIO_VALIDPROC = 0x10070000,};
enum MACRO_MNID {MNID_ID = 0,MNID_STRING = 1,};
enum MACRO_MOJI {VK_MOJI = 118,MOD_MOJI = 4104,};
enum MACRO_MSAA {MSAA_MENU_SIG = 0xAA0DF00D,};
enum MACRO_MSGF {MSGF_COMMCTRL_BEGINDRAG = 0x4200,MSGF_COMMCTRL_SIZEHEADER = 0x4201,MSGF_COMMCTRL_DRAGSELECT = 0x4202,};
enum MACRO_MS_S {MS_S_PENDING = 262145,MS_S_NOUPDATE = 262146,MS_S_ENDOFSTREAM = 262147,MS_E_SAMPLEALLOC = -2147220479,MS_E_PURPOSEID = -2147220478,MS_E_NOSTREAM = -2147220477,MS_E_NOSEEKING = -2147220476,MS_E_INCOMPATIBLE = -2147220475,MS_E_BUSY = -2147220474,MS_E_NOTINIT = -2147220473,MS_E_SOURCEALREADYDEFINED = -2147220472,MS_E_INVALIDSTREAMTYPE = -2147220471,MS_E_NOTRUNNING = -2147220470,};
enum MACRO_MUTZ {MUTZ_NOSAVEDFILECHECK = 0x1,MUTZ_ENFORCERESTRICTED = 0x100,};
enum MACRO_MWMO {MWMO_INPUTAVAILABLE = 0x4,};
enum MACRO_NDIS {NDIS_802_3_MAC_OPTION_PRIORITY = 0x1,};
enum MACRO_NERR {NERR_BASE = 2100,NERR_PasswordExpired = 2242,};
enum MACRO_NLED {NLED_COUNT_INFO_ID = 0,NLED_SUPPORTS_INFO_ID = 1,NLED_SETTINGS_INFO_ID = 2,};
enum MACRO_NORM {NORM_IGNORECASE = 0x1,NORM_IGNORENONSPACE = 0x2,NORM_IGNORESYMBOLS = 0x4,NORM_IGNOREKANATYPE = 0x10000,NORM_IGNOREWIDTH = 0x20000,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_OBEX {OBEX_E_DISCONNECTED = -2147220224,OBEX_E_ABORTED = -2147220223,OBEX_E_NOT_INITIALIZED = -2147220222,OBEX_E_TRANSPORT_NOT_AVAILABLE = -2147220221,OBEX_E_TRANSPORT_INIT = -2147220220,OBEX_E_ALREADY_CONNECTED = -2147220219,OBEX_E_NOT_CONNECTED = -2147220218,OBEX_E_CANT_CONNECT = -2147220217,OBEX_E_TIMEOUT = -2147220216,OBEX_E_NETWORK_ERROR = -2147220215,OBEX_E_DEVICE_NOT_FOUND = -2147220214,OBEX_E_SERIVCE_ALREADY_REGISTERED = -2147220213,OBEX_E_UNEXPECTED = -2147220212,OBEX_E_CONNECTION_NOT_ACCEPTED = -2147220211,OBEX_E_STREAM_CLOSED = -2147220210,OBEX_VERSION_10 = 16,OBEX_VERSION = 16,};
enum MACRO_OPEN {OPEN_EXISTING = 3,OPEN_ALWAYS = 4,};
enum MACRO_OQWF {OQWF_OKCANCEL = 0x1,OQWF_DEFAULTFORM = 0x2,OQWF_SINGLESELECT = 0x4,OQWF_LOADQUERY = 0x8,OQWF_REMOVESCOPES = 0x10,OQWF_REMOVEFORMS = 0x20,OQWF_ISSUEONOPEN = 0x40,OQWF_SHOWOPTIONAL = 0x80,OQWF_SAVEQUERYONOK = 0x200,OQWF_HIDEMENUS = 0x400,OQWF_HIDESEARCHUI = 0x800,OQWF_PARAMISPROPERTYBAG = 0x80000000,};
enum MACRO_PAGE {PAGE_NOACCESS = 0x1,PAGE_READONLY = 0x2,PAGE_READWRITE = 0x4,PAGE_WRITECOPY = 0x8,PAGE_EXECUTE = 0x10,PAGE_EXECUTE_READ = 0x20,PAGE_EXECUTE_READWRITE = 0x40,PAGE_EXECUTE_WRITECOPY = 0x80,PAGE_GUARD = 0x100,PAGE_NOCACHE = 0x200,PAGE_PHYSICAL = 0x400,PAGE_WRITECOMBINE = 0x400,};
enum MACRO_PARM {PARM_ERROR_UNKNOWN = 4294967295,PARM_ERROR_NONE = 0,};
enum MACRO_PKCS {PKCS_7_ASN_ENCODING = 0x10000,PKCS_7_NDR_ENCODING = 0x20000,};
enum MACRO_POST {POST_USE_DEFAULT = 0,POST_USE_PLAIN_TEXT = 1,POST_USE_HTML = 2,};
enum MACRO_PRGE {PRGE = 3,PREQ = 4,};
enum MACRO_PRIO {PRIO_URGENT = 1,PRIO_NORMAL = 0,PRIO_NONURGENT = -1,};
enum MACRO_PRLT {PRLT = 0,PRLE = 1,PRGT = 2,};
enum MACRO_PRNE {PRNE = 5,};
enum MACRO_PROP {PROP_SM_CXDLG = 212,PROP_SM_CYDLG = 188,PROP_MED_CXDLG = 227,PROP_MED_CYDLG = 215,PROP_LG_CXDLG = 252,PROP_LG_CYDLG = 218,};
enum MACRO_PROV {PROV_RSA_FULL = 1,PROV_RSA_SIG = 2,PROV_DSS = 3,PROV_FORTEZZA = 4,PROV_MS_EXCHANGE = 5,PROV_SSL = 6,PROV_RSA_SCHANNEL = 12,PROV_DSS_DH = 13,PROV_EC_ECDSA_SIG = 14,PROV_EC_ECNRA_SIG = 15,PROV_EC_ECDSA_FULL = 16,PROV_EC_ECNRA_FULL = 17,PROV_DH_SCHANNEL = 18,PROV_SPYRUS_LYNKS = 20,PROV_RNG = 21,PROV_INTEL_SEC = 22,PROV_REPLACE_OWF = 23,PROV_RSA_AES = 24,};
enum MACRO_PRRE {PRRE = 6,};
enum MACRO_PSCB {PSCB_INITIALIZED = 1,PSCB_PRECREATE = 2,PSCB_GETVERSION = 3,PSCB_GETTITLE = 4,PSCB_GETLINKTEXT = 5,};
enum MACRO_RAND {RAND_MAX = 0x7FFF,};
enum MACRO_RBBS {RBBS_BREAK = 0x1,RBBS_FIXEDSIZE = 0x2,RBBS_CHILDEDGE = 0x4,RBBS_HIDDEN = 0x8,RBBS_NOVERT = 0x10,RBBS_FIXEDBMP = 0x20,RBBS_VARIABLEHEIGHT = 0x40,RBBS_GRIPPERALWAYS = 0x80,RBBS_NOGRIPPER = 0x100,};
enum MACRO_RBHT {RBHT_NOWHERE = 0x1,RBHT_CAPTION = 0x2,RBHT_CLIENT = 0x3,RBHT_GRABBER = 0x4,};
enum MACRO_RBIM {RBIM_IMAGELIST = 0x1,};
enum MACRO_READ {READ_CONTROL = 0x20000,};
enum MACRO_REPL {REPL_CHANGE_WILLCLEAR = 0x1,};
enum MACRO_RFCD {RFCD_NAME = 0x1,RFCD_KEEPBOTHICON = 0x2,RFCD_KEEPLOCALICON = 0x4,RFCD_KEEPSERVERICON = 0x8,RFCD_NETWORKMODIFIEDBY = 0x10,RFCD_NETWORKMODIFIEDON = 0x20,RFCD_LOCALMODIFIEDBY = 0x40,RFCD_LOCALMODIFIEDON = 0x80,RFCD_NEWNAME = 0x100,RFCD_LOCATION = 0x200,RFCD_ALL = 0x3FF,};
enum MACRO_RFCF {RFCF_APPLY_ALL = 0x1,};
enum MACRO_ROLE {ROLE_SYSTEM_TITLEBAR = 0x1,ROLE_SYSTEM_MENUBAR = 0x2,ROLE_SYSTEM_SCROLLBAR = 0x3,ROLE_SYSTEM_GRIP = 0x4,ROLE_SYSTEM_SOUND = 0x5,ROLE_SYSTEM_CURSOR = 0x6,ROLE_SYSTEM_CARET = 0x7,ROLE_SYSTEM_ALERT = 0x8,ROLE_SYSTEM_WINDOW = 0x9,ROLE_SYSTEM_CLIENT = 0xA,ROLE_SYSTEM_MENUPOPUP = 0xB,ROLE_SYSTEM_MENUITEM = 0xC,ROLE_SYSTEM_TOOLTIP = 0xD,ROLE_SYSTEM_APPLICATION = 0xE,ROLE_SYSTEM_DOCUMENT = 0xF,ROLE_SYSTEM_PANE = 0x10,ROLE_SYSTEM_CHART = 0x11,ROLE_SYSTEM_DIALOG = 0x12,ROLE_SYSTEM_BORDER = 0x13,ROLE_SYSTEM_GROUPING = 0x14,ROLE_SYSTEM_SEPARATOR = 0x15,ROLE_SYSTEM_TOOLBAR = 0x16,ROLE_SYSTEM_STATUSBAR = 0x17,ROLE_SYSTEM_TABLE = 0x18,ROLE_SYSTEM_COLUMNHEADER = 0x19,ROLE_SYSTEM_ROWHEADER = 0x1A,ROLE_SYSTEM_COLUMN = 0x1B,ROLE_SYSTEM_ROW = 0x1C,ROLE_SYSTEM_CELL = 0x1D,ROLE_SYSTEM_LINK = 0x1E,ROLE_SYSTEM_HELPBALLOON = 0x1F,ROLE_SYSTEM_CHARACTER = 0x20,ROLE_SYSTEM_LIST = 0x21,ROLE_SYSTEM_LISTITEM = 0x22,ROLE_SYSTEM_OUTLINE = 0x23,ROLE_SYSTEM_OUTLINEITEM = 0x24,ROLE_SYSTEM_PAGETAB = 0x25,ROLE_SYSTEM_PROPERTYPAGE = 0x26,ROLE_SYSTEM_INDICATOR = 0x27,ROLE_SYSTEM_GRAPHIC = 0x28,ROLE_SYSTEM_STATICTEXT = 0x29,ROLE_SYSTEM_TEXT = 0x2A,ROLE_SYSTEM_PUSHBUTTON = 0x2B,ROLE_SYSTEM_CHECKBUTTON = 0x2C,ROLE_SYSTEM_RADIOBUTTON = 0x2D,ROLE_SYSTEM_COMBOBOX = 0x2E,ROLE_SYSTEM_DROPLIST = 0x2F,ROLE_SYSTEM_PROGRESSBAR = 0x30,ROLE_SYSTEM_DIAL = 0x31,ROLE_SYSTEM_HOTKEYFIELD = 0x32,ROLE_SYSTEM_SLIDER = 0x33,ROLE_SYSTEM_SPINBUTTON = 0x34,ROLE_SYSTEM_DIAGRAM = 0x35,ROLE_SYSTEM_ANIMATION = 0x36,ROLE_SYSTEM_EQUATION = 0x37,ROLE_SYSTEM_BUTTONDROPDOWN = 0x38,ROLE_SYSTEM_BUTTONMENU = 0x39,ROLE_SYSTEM_BUTTONDROPDOWNGRID = 0x3A,ROLE_SYSTEM_WHITESPACE = 0x3B,ROLE_SYSTEM_PAGETABLIST = 0x3C,ROLE_SYSTEM_CLOCK = 0x3D,};
enum MACRO_SBSP {SBSP_DEFBROWSER = 0x0,SBSP_SAMEBROWSER = 0x1,SBSP_NEWBROWSER = 0x2,SBSP_DEFMODE = 0x0,SBSP_OPENMODE = 0x10,SBSP_EXPLOREMODE = 0x20,SBSP_HELPMODE = 0x40,SBSP_NOTRANSFERHIST = 0x80,SBSP_ABSOLUTE = 0x0,SBSP_RELATIVE = 0x1000,SBSP_PARENT = 0x2000,SBSP_NAVIGATEBACK = 0x4000,SBSP_NAVIGATEFORWARD = 0x8000,SBSP_ALLOW_AUTONAVIGATE = 0x10000,SBSP_NOAUTOSELECT = 0x4000000,SBSP_WRITENOHISTORY = 0x8000000,SBSP_REDIRECT = 0x40000000,SBSP_INITIATEDBYHLINKFRAME = 0x80000000,};
enum MACRO_SEEK {SEEK_CUR = 1,SEEK_END = 2,SEEK_SET = 0,};
enum MACRO_SEND {SEND_DEVICE_UPDATES = 0x1,};
enum MACRO_SGNR {SGNR_TYPE_TIMESTAMP = 0x10,};
enum MACRO_SHDB {SHDB_SHOW = 0x1,SHDB_HIDE = 0x2,};
enum MACRO_SHFS {SHFS_SHOWTASKBAR = 0x1,SHFS_HIDETASKBAR = 0x2,SHFS_SHOWSIPBUTTON = 0x4,SHFS_HIDESIPBUTTON = 0x8,SHFS_SHOWSTARTICON = 0x10,SHFS_HIDESTARTICON = 0x20,};
enum MACRO_SHNF {SHNF_STRAIGHTTOTRAY = 0x1,SHNF_CRITICAL = 0x2,SHNF_FORCEMESSAGE = 0x8,SHNF_DISPLAYON = 0x10,};
enum MACRO_SHNN {SHNN_FIRST = -1000,SHNN_LAST = -1020,};
enum MACRO_SHOW {SHOW_XP_SESSION_UI = 0x400000,};
enum MACRO_SHRG {SHRG_RETURNCMD = 0x1,SHRG_NOTIFYPARENT = 0x2,SHRG_LONGDELAY = 0x8,SHRG_NOANIMATION = 0x10,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SIPF {SIPF_OFF = 0x0,SIPF_ON = 0x1,SIPF_DOCKED = 0x2,SIPF_LOCKED = 0x4,};
enum MACRO_SIZE {SIZE_RESTORED = 0,SIZE_MINIMIZED = 1,SIZE_MAXIMIZED = 2,SIZE_MAXSHOW = 3,SIZE_MAXHIDE = 4,};
enum MACRO_SMTO {SMTO_NORMAL = 0x0,};
enum MACRO_SNCF {SNCF_IGNORERAS = 0x1,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SORT {SORT_DEFAULT = 0x0,SORT_JAPANESE_XJIS = 0x0,SORT_JAPANESE_UNICODE = 0x1,SORT_CHINESE_BIG5 = 0x0,SORT_CHINESE_PRCP = 0x0,SORT_CHINESE_UNICODE = 0x1,SORT_CHINESE_PRC = 0x2,SORT_CHINESE_BOPOMOFO = 0x3,SORT_KOREAN_KSC = 0x0,SORT_KOREAN_UNICODE = 0x1,SORT_GERMAN_PHONE_BOOK = 0x1,SORT_HUNGARIAN_DEFAULT = 0x0,SORT_HUNGARIAN_TECHNICAL = 0x1,SORT_GEORGIAN_TRADITIONAL = 0x0,SORT_GEORGIAN_MODERN = 0x1,};
enum MACRO_SPIF {SPIF_UPDATEINIFILE = 0x1,SPIF_SENDCHANGE = 0x2,};
enum MACRO_STGM {STGM_DIRECT = 0x0,STGM_TRANSACTED = 0x10000,STGM_SIMPLE = 0x8000000,STGM_READ = 0x0,STGM_WRITE = 0x1,STGM_READWRITE = 0x2,STGM_SHARE_DENY_NONE = 0x40,STGM_SHARE_DENY_READ = 0x30,STGM_SHARE_DENY_WRITE = 0x20,STGM_SHARE_EXCLUSIVE = 0x10,STGM_PRIORITY = 0x40000,STGM_DELETEONRELEASE = 0x4000000,STGM_NOSCRATCH = 0x100000,STGM_CREATE = 0x1000,STGM_CONVERT = 0x20000,STGM_FAILIFTHERE = 0x0,STGM_NOSNAPSHOT = 0x200000,};
enum MACRO_STIF {STIF_DEFAULT = 0x0,STIF_SUPPORT_HEX = 0x1,};
enum MACRO_STOP {STOP_SEARCH = 0x1,RESTART_SEARCH = 0x2,RECURSIVE_SEARCH = 0x4,SHALLOW_SEARCH = 0x8,FOREGROUND_SEARCH = 0x10,BACKGROUND_SEARCH = 0x20,};
enum MACRO_SVSI {SVSI_DESELECT = 0x0,SVSI_SELECT = 0x1,SVSI_EDIT = 0x3,SVSI_DESELECTOTHERS = 0x4,SVSI_ENSUREVISIBLE = 0x8,SVSI_FOCUSED = 0x10,SVSI_TRANSLATEPT = 0x20,};
enum MACRO_TAPE {TAPE_ERASE_SHORT = 0,TAPE_ERASE_LONG = 1,TAPE_LOAD = 0,TAPE_UNLOAD = 1,TAPE_TENSION = 2,TAPE_LOCK = 3,TAPE_UNLOCK = 4,TAPE_FORMAT = 5,TAPE_SETMARKS = 0,TAPE_FILEMARKS = 1,TAPE_SHORT_FILEMARKS = 2,TAPE_LONG_FILEMARKS = 3,TAPE_ABSOLUTE_POSITION = 0,TAPE_LOGICAL_POSITION = 1,TAPE_PSEUDO_LOGICAL_POSITION = 2,TAPE_REWIND = 0,TAPE_ABSOLUTE_BLOCK = 1,TAPE_LOGICAL_BLOCK = 2,TAPE_PSEUDO_LOGICAL_BLOCK = 3,TAPE_SPACE_END_OF_DATA = 4,TAPE_SPACE_RELATIVE_BLOCKS = 5,TAPE_SPACE_FILEMARKS = 6,TAPE_SPACE_SEQUENTIAL_FMKS = 7,TAPE_SPACE_SETMARKS = 8,TAPE_SPACE_SEQUENTIAL_SMKS = 9,TAPE_DRIVE_FIXED = 1,TAPE_DRIVE_SELECT = 2,TAPE_DRIVE_INITIATOR = 4,TAPE_DRIVE_ERASE_SHORT = 16,TAPE_DRIVE_ERASE_LONG = 32,TAPE_DRIVE_ERASE_BOP_ONLY = 64,TAPE_DRIVE_ERASE_IMMEDIATE = 128,TAPE_DRIVE_TAPE_CAPACITY = 256,TAPE_DRIVE_TAPE_REMAINING = 512,TAPE_DRIVE_FIXED_BLOCK = 1024,TAPE_DRIVE_VARIABLE_BLOCK = 2048,TAPE_DRIVE_WRITE_PROTECT = 4096,TAPE_DRIVE_EOT_WZ_SIZE = 8192,TAPE_DRIVE_ECC = 65536,TAPE_DRIVE_COMPRESSION = 131072,TAPE_DRIVE_PADDING = 262144,TAPE_DRIVE_REPORT_SMKS = 524288,TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576,TAPE_DRIVE_GET_LOGICAL_BLK = 2097152,TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304,TAPE_DRIVE_EJECT_MEDIA = 16777216,TAPE_DRIVE_CLEAN_REQUESTS = 33554432,TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864,TAPE_DRIVE_RESERVED_BIT = -2147483648,TAPE_DRIVE_LOAD_UNLOAD = -2147483647,TAPE_DRIVE_TENSION = -2147483646,TAPE_DRIVE_LOCK_UNLOCK = -2147483644,TAPE_DRIVE_REWIND_IMMEDIATE = -2147483640,TAPE_DRIVE_SET_BLOCK_SIZE = -2147483632,TAPE_DRIVE_LOAD_UNLD_IMMED = -2147483616,TAPE_DRIVE_TENSION_IMMED = -2147483584,TAPE_DRIVE_LOCK_UNLK_IMMED = -2147483520,TAPE_DRIVE_SET_ECC = -2147483392,TAPE_DRIVE_SET_COMPRESSION = -2147483136,TAPE_DRIVE_SET_PADDING = -2147482624,TAPE_DRIVE_SET_REPORT_SMKS = -2147481600,TAPE_DRIVE_ABSOLUTE_BLK = -2147479552,TAPE_DRIVE_ABS_BLK_IMMED = -2147475456,TAPE_DRIVE_LOGICAL_BLK = -2147467264,TAPE_DRIVE_LOG_BLK_IMMED = -2147450880,TAPE_DRIVE_END_OF_DATA = -2147418112,TAPE_DRIVE_RELATIVE_BLKS = -2147352576,TAPE_DRIVE_FILEMARKS = -2147221504,TAPE_DRIVE_SEQUENTIAL_FMKS = -2146959360,TAPE_DRIVE_SETMARKS = -2146435072,TAPE_DRIVE_SEQUENTIAL_SMKS = -2145386496,TAPE_DRIVE_REVERSE_POSITION = -2143289344,TAPE_DRIVE_SPACE_IMMEDIATE = -2139095040,TAPE_DRIVE_WRITE_SETMARKS = -2130706432,TAPE_DRIVE_WRITE_FILEMARKS = -2113929216,TAPE_DRIVE_WRITE_SHORT_FMKS = -2080374784,TAPE_DRIVE_WRITE_LONG_FMKS = -2013265920,TAPE_DRIVE_WRITE_MARK_IMMED = -1879048192,TAPE_DRIVE_FORMAT = -1610612736,TAPE_DRIVE_FORMAT_IMMEDIATE = -1073741824,TAPE_DRIVE_HIGH_FEATURES = -2147483648,TAPE_FIXED_PARTITIONS = 0,TAPE_SELECT_PARTITIONS = 1,TAPE_INITIATOR_PARTITIONS = 2,};
enum MACRO_TAPI {TAPI_CURRENT_VERSION = 0x20000,};
enum MACRO_TASK {TASK_SUNDAY = 0x1,TASK_MONDAY = 0x2,TASK_TUESDAY = 0x4,TASK_WEDNESDAY = 0x8,TASK_THURSDAY = 0x10,TASK_FRIDAY = 0x20,TASK_SATURDAY = 0x40,TASK_FIRST_WEEK = 0x1,TASK_SECOND_WEEK = 0x2,TASK_THIRD_WEEK = 0x3,TASK_FOURTH_WEEK = 0x4,TASK_LAST_WEEK = 0x5,TASK_JANUARY = 0x1,TASK_FEBRUARY = 0x2,TASK_MARCH = 0x4,TASK_APRIL = 0x8,TASK_MAY = 0x10,TASK_JUNE = 0x20,TASK_JULY = 0x40,TASK_AUGUST = 0x80,TASK_SEPTEMBER = 0x100,TASK_OCTOBER = 0x200,TASK_NOVEMBER = 0x400,TASK_DECEMBER = 0x800,TASK_FLAG_INTERACTIVE = 0x1,TASK_FLAG_DELETE_WHEN_DONE = 0x2,TASK_FLAG_DISABLED = 0x4,TASK_FLAG_START_ONLY_IF_IDLE = 0x10,TASK_FLAG_KILL_ON_IDLE_END = 0x20,TASK_FLAG_DONT_START_IF_ON_BATTERIES = 0x40,TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = 0x80,TASK_FLAG_RUN_ONLY_IF_DOCKED = 0x100,TASK_FLAG_HIDDEN = 0x200,TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = 0x400,TASK_FLAG_RESTART_ON_IDLE_RESUME = 0x800,TASK_FLAG_SYSTEM_REQUIRED = 0x1000,TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = 0x2000,TASK_TRIGGER_FLAG_HAS_END_DATE = 0x1,TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = 0x2,TASK_TRIGGER_FLAG_DISABLED = 0x4,TASK_MAX_RUN_TIMES = 0x5A0,};
enum MACRO_TBBF {TBBF_LARGE = 0x1,};
enum MACRO_TBCD {TBCD_TICS = 0x1,TBCD_THUMB = 0x2,TBCD_CHANNEL = 0x3,};
enum MACRO_TBIF {TBIF_IMAGE = 0x1,TBIF_TEXT = 0x2,TBIF_STATE = 0x4,TBIF_STYLE = 0x8,TBIF_LPARAM = 0x10,TBIF_COMMAND = 0x20,TBIF_SIZE = 0x40,};
enum MACRO_TCHT {TCHT_NOWHERE = 0x1,TCHT_ONITEMICON = 0x2,TCHT_ONITEMLABEL = 0x4,TCHT_ONITEM = 0x6,};
enum MACRO_TCIF {TCIF_TEXT = 0x1,TCIF_IMAGE = 0x2,TCIF_RTLREADING = 0x4,TCIF_PARAM = 0x8,TCIF_STATE = 0x10,};
enum MACRO_TCIS {TCIS_BUTTONPRESSED = 0x1,TCIS_HIGHLIGHTED = 0x2,};
enum MACRO_TIME {TIME_ZONE_ID_INVALID = 0xFFFFFFFF,TIME_ZONE_ID_UNKNOWN = 0x0,TIME_ZONE_ID_STANDARD = 0x1,TIME_ZONE_ID_DAYLIGHT = 0x2,};
enum MACRO_TLOG {TLOG_BACK = -1,TLOG_FORE = 1,};
enum MACRO_TLS1 {TLS1_ALERT_WARNING = 1,TLS1_ALERT_FATAL = 2,TLS1_ALERT_CLOSE_NOTIFY = 0,TLS1_ALERT_UNEXPECTED_MESSAGE = 10,TLS1_ALERT_BAD_RECORD_MAC = 20,TLS1_ALERT_DECRYPTION_FAILED = 21,TLS1_ALERT_RECORD_OVERFLOW = 22,TLS1_ALERT_DECOMPRESSION_FAIL = 30,TLS1_ALERT_HANDSHAKE_FAILURE = 40,TLS1_ALERT_BAD_CERTIFICATE = 42,TLS1_ALERT_UNSUPPORTED_CERT = 43,TLS1_ALERT_CERTIFICATE_REVOKED = 44,TLS1_ALERT_CERTIFICATE_EXPIRED = 45,TLS1_ALERT_CERTIFICATE_UNKNOWN = 46,TLS1_ALERT_ILLEGAL_PARAMETER = 47,TLS1_ALERT_UNKNOWN_CA = 48,TLS1_ALERT_ACCESS_DENIED = 49,TLS1_ALERT_DECODE_ERROR = 50,TLS1_ALERT_DECRYPT_ERROR = 51,TLS1_ALERT_EXPORT_RESTRICTION = 60,TLS1_ALERT_PROTOCOL_VERSION = 70,TLS1_ALERT_INSUFFIENT_SECURITY = 71,TLS1_ALERT_INTERNAL_ERROR = 80,TLS1_ALERT_USER_CANCELED = 90,TLS1_ALERT_NO_RENEGOTIATATION = 100,};
enum MACRO_TMPF {TMPF_FIXED_PITCH = 0x1,TMPF_VECTOR = 0x2,TMPF_DEVICE = 0x8,TMPF_TRUETYPE = 0x4,};
enum MACRO_TPCC {TPCC_RASZ = 0x3,TPCC_RMSZ = 0x3C,TPCC_RFSZ_MASK = 0xC0,TPCC_RMSZ_MASK = 0x3C,TPCC_RASZ_MASK = 0x3,TPCC_LASTINDX = 0x3F,};
enum MACRO_TPCE {TPCE_ENTRYNUM = 0x3F,TPCE_DEFAULT = 0x40,TPCE_INTFACE = 0x80,TPCE_IFTYPE = 0xF,TPCE_BVDSACTIVE = 0x10,TPCE_WPACTIVE = 0x20,TPCE_RDYBSYACTIVE = 0x40,TPCE_MWAITREQD = 0x80,TPCE_POWER = 0x3,TPCE_TIMING = 0x4,TPCE_IOSPACE = 0x8,TPCE_IRQ = 0x10,TPCE_MEMSPACE = 0x60,TPCE_MISC = 0x80,TPCE_PD_NOMV = 0x1,TPCE_PD_MINV = 0x2,TPCE_PD_MAXV = 0x4,TPCE_PD_STATICI = 0x8,TPCE_PD_AVGI = 0x10,TPCE_PD_PEAKI = 0x20,TPCE_PD_PDWNI = 0x40,TPCE_PD_EXP = 0x7,TPCE_PD_MANT = 0x71,TPCE_PD_EXT = 0x80,TPCE_PD_EXTEN = 0x7F,};
enum MACRO_TSPI {TSPI_MESSAGE_BASE = 500,};
enum MACRO_TTDT {TTDT_AUTOMATIC = 0,TTDT_RESHOW = 1,TTDT_AUTOPOP = 2,TTDT_INITIAL = 3,};
enum MACRO_TVGN {TVGN_ROOT = 0x0,TVGN_NEXT = 0x1,TVGN_PREVIOUS = 0x2,TVGN_PARENT = 0x3,TVGN_CHILD = 0x4,TVGN_FIRSTVISIBLE = 0x5,TVGN_NEXTVISIBLE = 0x6,TVGN_PREVIOUSVISIBLE = 0x7,TVGN_DROPHILITE = 0x8,TVGN_CARET = 0x9,};
enum MACRO_TVHT {TVHT_NOWHERE = 0x1,TVHT_ONITEMICON = 0x2,TVHT_ONITEMLABEL = 0x4,TVHT_ONITEMINDENT = 0x8,TVHT_ONITEMBUTTON = 0x10,TVHT_ONITEMRIGHT = 0x20,TVHT_ONITEMSTATEICON = 0x40,TVHT_ABOVE = 0x100,TVHT_BELOW = 0x200,TVHT_TORIGHT = 0x400,TVHT_TOLEFT = 0x800,};
enum MACRO_TVIF {TVIF_TEXT = 0x1,TVIF_IMAGE = 0x2,TVIF_PARAM = 0x4,TVIF_STATE = 0x8,TVIF_HANDLE = 0x10,TVIF_SELECTEDIMAGE = 0x20,TVIF_CHILDREN = 0x40,};
enum MACRO_TVIS {TVIS_SELECTED = 0x2,TVIS_CUT = 0x4,TVIS_DROPHILITED = 0x8,TVIS_BOLD = 0x10,TVIS_EXPANDED = 0x20,TVIS_EXPANDEDONCE = 0x40,TVIS_EXPANDPARTIAL = 0x80,TVIS_OVERLAYMASK = 0xF00,TVIS_STATEIMAGEMASK = 0xF000,TVIS_USERMASK = 0xF000,};
enum MACRO_UIMI {UIMI_CREATE_NEW_IDENTITY = 0x1,};
enum MACRO_UINT {UINT_MAX = 0xFFFFFFFF,};
enum MACRO_UPNP {UPNP_E_ROOT_ELEMENT_EXPECTED = 0x80040200,UPNP_E_DEVICE_ELEMENT_EXPECTED = 0x80040201,UPNP_E_SERVICE_ELEMENT_EXPECTED = 0x80040202,UPNP_E_SERVICE_NODE_INCOMPLETE = 0x80040203,UPNP_E_DEVICE_NODE_INCOMPLETE = 0x80040204,UPNP_E_ICON_ELEMENT_EXPECTED = 0x80040205,UPNP_E_ICON_NODE_INCOMPLETE = 0x80040206,UPNP_E_INVALID_ACTION = 0x80040207,UPNP_E_INVALID_ARGUMENTS = 0x80040208,UPNP_E_OUT_OF_SYNC = 0x80040209,UPNP_E_ACTION_REQUEST_FAILED = 0x80040210,UPNP_E_TRANSPORT_ERROR = 0x80040211,UPNP_E_VARIABLE_VALUE_UNKNOWN = 0x80040212,UPNP_E_INVALID_VARIABLE = 0x80040213,UPNP_E_DEVICE_ERROR = 0x80040214,UPNP_E_PROTOCOL_ERROR = 0x80040215,UPNP_E_ERROR_PROCESSING_RESPONSE = 0x80040216,UPNP_E_DEVICE_TIMEOUT = 0x80040217,UPNP_E_INVALID_DOCUMENT = 0x80040500,UPNP_E_EVENT_SUBSCRIPTION_FAILED = 0x80040501,};
enum MACRO_URLF {URLF_DEFAULT = 0x0,URLF_EXTRACT = 0x1,URLF_RELATIVEURL = 0x2,URLF_DELETE_AFTER_EXTRACT = 0x4,};
enum MACRO_USER {USER_CALL_IS_ASYNC = 0x100,USER_MARSHAL_FC_BYTE = 0x1,USER_MARSHAL_FC_CHAR = 0x2,USER_MARSHAL_FC_SMALL = 0x3,USER_MARSHAL_FC_USMALL = 0x4,USER_MARSHAL_FC_WCHAR = 0x5,USER_MARSHAL_FC_SHORT = 0x6,USER_MARSHAL_FC_USHORT = 0x7,USER_MARSHAL_FC_LONG = 0x8,USER_MARSHAL_FC_ULONG = 0x9,USER_MARSHAL_FC_FLOAT = 0xA,USER_MARSHAL_FC_HYPER = 0xB,USER_MARSHAL_FC_DOUBLE = 0xC,};
enum MACRO_VFFF {VFFF_ISSHAREDFILE = 0x1,};
enum MACRO_VFT2 {VFT2_UNKNOWN = 0x0,VFT2_DRV_PRINTER = 0x1,VFT2_DRV_KEYBOARD = 0x2,VFT2_DRV_LANGUAGE = 0x3,VFT2_DRV_DISPLAY = 0x4,VFT2_DRV_MOUSE = 0x5,VFT2_DRV_NETWORK = 0x6,VFT2_DRV_SYSTEM = 0x7,VFT2_DRV_INSTALLABLE = 0x8,VFT2_DRV_SOUND = 0x9,VFT2_DRV_COMM = 0xA,VFT2_DRV_INPUTMETHOD = 0xB,VFT2_FONT_RASTER = 0x1,VFT2_FONT_VECTOR = 0x2,VFT2_FONT_TRUETYPE = 0x3,};
enum MACRO_VIEW {VIEW_E_FIRST = 0x80040140,VIEW_E_LAST = 0x8004014F,VIEW_S_FIRST = 0x40140,VIEW_S_LAST = 0x4014F,};
enum MACRO_VIFF {VIFF_FORCEINSTALL = 0x1,VIFF_DONTDELETEOLD = 0x2,};
enum MACRO_WAIT {WAIT_OBJECT_0 = 0x0,WAIT_ABANDONED = 0x80,WAIT_ABANDONED_0 = 0x80,WAIT_FAILED = 0xFFFFFFFF,};
enum MACRO_WAVE {WAVE_MAPPER = 4294967295,WAVE_FORMAT_QUERY = 1,WAVE_ALLOWSYNC = 2,WAVE_MAPPED = 4,WAVE_FORMAT_DIRECT = 8,WAVE_FORMAT_DIRECT_QUERY = 9,WAVE_NOMIXER = 128,WAVE_FORMAT_PCM = 1,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WHDR {WHDR_DONE = 0x1,WHDR_PREPARED = 0x2,WHDR_BEGINLOOP = 0x4,WHDR_ENDLOOP = 0x8,WHDR_INQUEUE = 0x10,};
enum MACRO_WNNC {WNNC_NET_MSNET = 0x10000,WNNC_NET_LANMAN = 0x20000,WNNC_NET_NETWARE = 0x30000,WNNC_NET_VINES = 0x40000,WNNC_NET_10NET = 0x50000,WNNC_NET_LOCUS = 0x60000,WNNC_NET_SUN_PC_NFS = 0x70000,WNNC_NET_LANSTEP = 0x80000,WNNC_NET_9TILES = 0x90000,WNNC_NET_LANTASTIC = 0xA0000,WNNC_NET_AS400 = 0xB0000,WNNC_NET_FTP_NFS = 0xC0000,WNNC_NET_PATHWORKS = 0xD0000,WNNC_NET_LIFENET = 0xE0000,WNNC_NET_POWERLAN = 0xF0000,WNNC_NET_BWNFS = 0x100000,WNNC_NET_COGENT = 0x110000,WNNC_NET_FARALLON = 0x120000,WNNC_NET_APPLETALK = 0x130000,WNNC_NET_INTERGRAPH = 0x140000,};
enum MACRO_WODM {WODM_MAPPER_STATUS = 8192,};
enum MACRO_WTCI {WTCI_DONT_OPEN_STORES = 0x1,WTCI_OPEN_ONLY_ROOT = 0x2,};
enum MACRO_WTPF {WTPF_TRUSTTEST = 0x20,WTPF_TESTCANBEVALID = 0x80,WTPF_IGNOREEXPIRATION = 0x100,WTPF_IGNOREREVOKATION = 0x200,WTPF_OFFLINEOK_IND = 0x400,WTPF_OFFLINEOK_COM = 0x800,WTPF_OFFLINEOKNBU_IND = 0x1000,WTPF_OFFLINEOKNBU_COM = 0x2000,WTPF_VERIFY_V1_OFF = 0x10000,WTPF_IGNOREREVOCATIONONTS = 0x20000,WTPF_ALLOWONLYPERTRUST = 0x40000,};
enum MACRO_X509 {X509_ASN_ENCODING = 0x1,X509_NDR_ENCODING = 0x2,};
enum MACRO_X942 {X942_DH_PARAMETERS = 50,};
enum MACRO_XACT {XACT_E_FIRST = 0x8004D000,XACT_E_LAST = 0x8004D029,XACT_S_FIRST = 0x4D000,XACT_S_LAST = 0x4D010,};
enum MACRO__DBL {_DBL_RADIX = 2,_DBL_ROUNDS = 1,};
enum MACRO__FPE {_FPE_INVALID = 0x81,_FPE_DENORMAL = 0x82,_FPE_ZERODIVIDE = 0x83,_FPE_OVERFLOW = 0x84,_FPE_UNDERFLOW = 0x85,_FPE_INEXACT = 0x86,_FPE_UNEMULATED = 0x87,_FPE_SQRTNEG = 0x88,_FPE_STACKOVERFLOW = 0x8A,_FPE_STACKUNDERFLOW = 0x8B,_FPE_EXPLICITGEN = 0x8C,};
enum MACRO__INC {_INC_MMREG = 146,};
enum MACRO__MAX {_MAX_PATH = 260,};
enum MACRO__MCW {_MCW_EM = 0x8001F,};
enum MACRO___bt {__bt_api_H__ = 1,};
enum MACRO_chx1 {chx1 = 0x410,};
enum MACRO_chx2 {chx2 = 0x411,};
enum MACRO_chx3 {chx3 = 0x412,};
enum MACRO_chx4 {chx4 = 0x413,};
enum MACRO_chx5 {chx5 = 0x414,};
enum MACRO_chx6 {chx6 = 0x415,};
enum MACRO_chx7 {chx7 = 0x416,};
enum MACRO_chx8 {chx8 = 0x417,};
enum MACRO_chx9 {chx9 = 0x418,};
enum MACRO_cmb1 {cmb1 = 0x470,};
enum MACRO_cmb2 {cmb2 = 0x471,};
enum MACRO_cmb3 {cmb3 = 0x472,};
enum MACRO_cmb4 {cmb4 = 0x473,};
enum MACRO_cmb5 {cmb5 = 0x474,};
enum MACRO_cmb6 {cmb6 = 0x475,};
enum MACRO_cmb7 {cmb7 = 0x476,};
enum MACRO_cmb8 {cmb8 = 0x477,};
enum MACRO_cmb9 {cmb9 = 0x478,};
enum MACRO_ctl1 {ctl1 = 0x4A0,};
enum MACRO_edt1 {edt1 = 0x480,};
enum MACRO_edt2 {edt2 = 0x481,};
enum MACRO_edt3 {edt3 = 0x482,};
enum MACRO_edt4 {edt4 = 0x483,};
enum MACRO_edt5 {edt5 = 0x484,};
enum MACRO_edt6 {edt6 = 0x485,};
enum MACRO_edt7 {edt7 = 0x486,};
enum MACRO_edt8 {edt8 = 0x487,};
enum MACRO_edt9 {edt9 = 0x488,};
enum MACRO_frm1 {frm1 = 0x434,};
enum MACRO_frm2 {frm2 = 0x435,};
enum MACRO_frm3 {frm3 = 0x436,};
enum MACRO_frm4 {frm4 = 0x437,};
enum MACRO_grp1 {grp1 = 0x430,};
enum MACRO_grp2 {grp2 = 0x431,};
enum MACRO_grp3 {grp3 = 0x432,};
enum MACRO_grp4 {grp4 = 0x433,};
enum MACRO_iRED {iRED = 0,iGREEN = 1,iBLUE = 2,iPALETTE = 8,};
enum MACRO_ico1 {ico1 = 0x43C,};
enum MACRO_ico2 {ico2 = 0x43D,};
enum MACRO_ico3 {ico3 = 0x43E,};
enum MACRO_ico4 {ico4 = 0x43F,};
enum MACRO_lst1 {lst1 = 0x460,};
enum MACRO_lst2 {lst2 = 0x461,};
enum MACRO_lst3 {lst3 = 0x462,};
enum MACRO_lst4 {lst4 = 0x463,};
enum MACRO_lst5 {lst5 = 0x464,};
enum MACRO_lst6 {lst6 = 0x465,};
enum MACRO_lst7 {lst7 = 0x466,};
enum MACRO_lst8 {lst8 = 0x467,};
enum MACRO_lst9 {lst9 = 0x468,};
enum MACRO_psh1 {psh1 = 0x400,};
enum MACRO_psh2 {psh2 = 0x401,};
enum MACRO_psh3 {psh3 = 0x402,};
enum MACRO_psh4 {psh4 = 0x403,};
enum MACRO_psh5 {psh5 = 0x404,};
enum MACRO_psh6 {psh6 = 0x405,};
enum MACRO_psh7 {psh7 = 0x406,};
enum MACRO_psh8 {psh8 = 0x407,};
enum MACRO_psh9 {psh9 = 0x408,};
enum MACRO_rad1 {rad1 = 0x420,};
enum MACRO_rad2 {rad2 = 0x421,};
enum MACRO_rad3 {rad3 = 0x422,};
enum MACRO_rad4 {rad4 = 0x423,};
enum MACRO_rad5 {rad5 = 0x424,};
enum MACRO_rad6 {rad6 = 0x425,};
enum MACRO_rad7 {rad7 = 0x426,};
enum MACRO_rad8 {rad8 = 0x427,};
enum MACRO_rad9 {rad9 = 0x428,};
enum MACRO_rct1 {rct1 = 0x438,};
enum MACRO_rct2 {rct2 = 0x439,};
enum MACRO_rct3 {rct3 = 0x43A,};
enum MACRO_rct4 {rct4 = 0x43B,};
enum MACRO_scr1 {scr1 = 0x490,};
enum MACRO_scr2 {scr2 = 0x491,};
enum MACRO_scr3 {scr3 = 0x492,};
enum MACRO_scr4 {scr4 = 0x493,};
enum MACRO_scr5 {scr5 = 0x494,};
enum MACRO_scr6 {scr6 = 0x495,};
enum MACRO_scr7 {scr7 = 0x496,};
enum MACRO_scr8 {scr8 = 0x497,};
enum MACRO_stc1 {stc1 = 0x440,};
enum MACRO_stc2 {stc2 = 0x441,};
enum MACRO_stc3 {stc3 = 0x442,};
enum MACRO_stc4 {stc4 = 0x443,};
enum MACRO_stc5 {stc5 = 0x444,};
enum MACRO_stc6 {stc6 = 0x445,};
enum MACRO_stc7 {stc7 = 0x446,};
enum MACRO_stc8 {stc8 = 0x447,};
enum MACRO_stc9 {stc9 = 0x448,};
typedef struct _MAPINAMEID MAPINAMEID;
typedef struct tagMDAXISINFO MDAXISINFO;
typedef struct tagMETHODDATA METHODDATA;
typedef struct _MIB_TCPROW MIB_TCPROW;
typedef struct _MIB_UDPROW MIB_UDPROW;
typedef struct tagMIMECPINFO MIMECPINFO;
typedef struct _MODULEINFO MODULEINFO;
typedef struct _MONTHLYDOW MONTHLYDOW;
typedef struct tagMOUSEINPUT MOUSEINPUT;
typedef struct tagMQMSGPROPS MQMSGPROPS;
typedef struct _MYCANDLIST MYCANDLIST;
struct MsgrObject;
typedef struct tagNMDAYSTATE NMDAYSTATE;
typedef struct tagNMLISTVIEW NMLISTVIEW;
typedef struct tagNMTOOLBARA NMTOOLBARA;
typedef struct tagNMTOOLBARW NMTOOLBARW;
typedef struct tagNNTPHEADER NNTPHEADER;
typedef struct _devicemodeA *NPDEVMODEA;
typedef struct _devicemodeW *NPDEVMODEW;
typedef struct tagLOGBRUSH *NPLOGBRUSH;
typedef struct tagLOGFONTA *NPLOGFONTA;
typedef struct tagLOGFONTW *NPLOGFONTW;
typedef struct _MMCKINFO *NPMMCKINFO;
typedef struct _MMIOINFO *NPMMIOINFO;
typedef struct timecaps_tag *NPTIMECAPS;
typedef struct _numberfmtA NUMBERFMTA;
typedef struct _numberfmtW NUMBERFMTW;
typedef unsigned int OCCURRENCE;
typedef struct _tagOLECMDTEXT OLECMDTEXT;
typedef struct _OVERLAPPED OVERLAPPED;
typedef struct _AM_COLCON *PAM_COLCON;
typedef struct _CEDIRINFO *PCEDIRINFO;
typedef struct __CEL_SLEEP *PCEL_SLEEP;
typedef struct _CEOIDINFO PCEOIDINFO;
typedef struct _CEPROPVAL *PCEPROPVAL;
typedef struct _CRYPTOAPI_BLOB *PCERT_BLOB;
typedef struct _CERT_INFO *PCERT_INFO;
typedef struct _CERT_PAIR *PCERT_PAIR;
typedef struct _CRL_ENTRY *PCRL_ENTRY;
typedef struct _CTL_ENTRY *PCTL_ENTRY;
typedef struct _CTL_USAGE *PCTL_USAGE;
typedef  void *PCX509CERT;
typedef struct _CRYPTOAPI_BLOB *PDATA_BLOB;
typedef struct _52A9C12110BCF838A5CA2520D41849E7 *PDEVDETAIL;
typedef struct IDirect3D8 *PDIRECT3D8;
typedef struct _A92B2F5D7D80D42A113836D63CC8DDA6 *PDMSDLINFO;
typedef struct DX2DXFORM *PDX2DXFORM;
typedef IAMExtDevice *PEXTDEVICE;
typedef struct _tagGroupInfo *PGROUPINFO;
typedef struct tagGUIDELINE *PGUIDELINE;
typedef struct _HMAC_Info *PHMAC_INFO;
typedef struct _tagHWXRESULT *PHWXRESULT;
typedef struct _INFO_6TO4 *PINFO_6TO4;
typedef struct _LDT_ENTRY *PLDT_ENTRY;
typedef struct _610479CDF0DBDC41F2C77A99D793B920 *PLOG_ENTRY;
typedef struct _MAPHEADER *PMAPHEADER;
typedef struct _MIB_IFROW *PMIB_IFROW;
typedef struct tagMIXERCAPS *PMIXERCAPS;
typedef struct tMIXERLINE *PMIXERLINE;
typedef struct _NDIS_GUID *PNDIS_GUID;
typedef struct tagNMNEWMENU *PNMNEWMENU;
typedef struct _SPC_IMAGE *PSPC_IMAGE;
typedef struct tagSTOREINFO *PSTOREINFO;
typedef struct tagSTYLEBUFA *PSTYLEBUFA;
typedef struct tagSTYLEBUFW *PSTYLEBUFW;
typedef struct _SecBuffer *PSecBuffer;
typedef struct _SecHandle *PSecHandle;
typedef struct _tagTASKDATA *PTASK_DATA;
typedef struct tagTOOLINFOA *PTOOLINFOA;
typedef struct tagTOOLINFOW *PTOOLINFOW;
typedef struct _TRIVERTEX *PTRIVERTEX;
typedef struct _TRUSTEE_A *PTRUSTEE_A;
typedef struct _TRUSTEE_W *PTRUSTEE_W;
typedef struct _PubAppInfo PUBAPPINFO;
typedef unsigned short *PUHALF_PTR;
typedef unsigned int *PULONG_PTR;
typedef struct _USB_FUNCS *PUSB_FUNCS;
typedef struct tagWINDOWPOS *PWINDOWPOS;
typedef struct tagWNDCLASSA *PWNDCLASSA;
typedef struct tagWNDCLASSW *PWNDCLASSW;
typedef struct _RELAY_INFO RELAY_INFO;
typedef unsigned char *RPC_BUFPTR;
typedef unsigned int RPC_LENGTH;
typedef struct _RPC_POLICY RPC_POLICY;
typedef int RPC_STATUS;
typedef struct _RTL_BITMAP RTL_BITMAP;
typedef struct tagRemHBITMAP RemHBITMAP;
typedef struct tagRemHGLOBAL RemHGLOBAL;
typedef struct tagSCRIPTINFO SCRIPTINFO;
typedef long long SCRIPT_IDS;
typedef struct tagSCROLLINFO SCROLLINFO;
typedef struct _SEC_OBJECT SEC_OBJECT;
typedef struct _SGuidArray SGuidArray;
typedef struct __MIDL___MIDL_itf_shobjidl_0116_0002 SHCOLUMNID;
typedef struct _SLongArray SLongArray;
typedef struct tagSMTPSTREAM SMTPSTREAM;
struct SOCKHAND__ {int unused;};
typedef struct _SPropValue SPropValue;
typedef struct _SRealArray SRealArray;
typedef struct _SSLCIPHERS SSLCIPHERS;
typedef struct _SSortOrder SSortOrder;
typedef struct tagSTAT_CHUNK STAT_CHUNK;
typedef struct _SYSTEMTIME SYSTEMTIME;
struct SoapClient;
struct SoapMapper;
struct SoapReader;
struct SoapServer;
typedef struct _tagStartParam StartParam;
typedef struct _TAPE_ERASE TAPE_ERASE;
typedef struct _TOKEN_USER TOKEN_USER;
typedef struct _USB_DEVICE USB_DEVICE;
typedef struct _VAR_STRING VAR_STRING;
typedef struct tagVERIDARRAY VERIDARRAY;
typedef struct wavefilter_tag WAVEFILTER;
typedef struct _28B4C1B75CAE6C770B09685B06A94D5B WAVEFORMAT;
typedef struct tagWAVEINCAPS WAVEINCAPS;
typedef struct _WINDOWDATA WINDOWDATA;
typedef struct _WSAVersion WSAVERSION;
struct WSDLReader;
struct WebBrowser;
enum _AMVP_MODE {AMVP_MODE_WEAVE = 0x0,AMVP_MODE_BOBINTERLEAVED = 0x1,AMVP_MODE_BOBNONINTERLEAVED = 0x2,AMVP_MODE_SKIPEVEN = 0x3,AMVP_MODE_SKIPODD = 0x4,};
struct _AM_COLCON {unsigned char emph1col : 4;unsigned char emph2col : 4;unsigned char backcol : 4;unsigned char patcol : 4;unsigned char emph1con : 4;unsigned char emph2con : 4;unsigned char backcon : 4;unsigned char patcon : 4;};
enum _BoolValue {True = 0x1,False = 0x0,BoolValue_Max = 0x7FFFFFFF,};
enum _D3DFORMAT {D3DFMT_UNKNOWN = 0x0,D3DFMT_R8G8B8 = 0x14,D3DFMT_A8R8G8B8 = 0x15,D3DFMT_X8R8G8B8 = 0x16,D3DFMT_R5G6B5 = 0x17,D3DFMT_X1R5G5B5 = 0x18,D3DFMT_A1R5G5B5 = 0x19,D3DFMT_A4R4G4B4 = 0x1A,D3DFMT_R3G3B2 = 0x1B,D3DFMT_A8 = 0x1C,D3DFMT_A8R3G3B2 = 0x1D,D3DFMT_X4R4G4B4 = 0x1E,D3DFMT_A2B10G10R10 = 0x1F,D3DFMT_G16R16 = 0x22,D3DFMT_A8P8 = 0x28,D3DFMT_P8 = 0x29,D3DFMT_L8 = 0x32,D3DFMT_A8L8 = 0x33,D3DFMT_A4L4 = 0x34,D3DFMT_V8U8 = 0x3C,D3DFMT_L6V5U5 = 0x3D,D3DFMT_X8L8V8U8 = 0x3E,D3DFMT_Q8W8V8U8 = 0x3F,D3DFMT_V16U16 = 0x40,D3DFMT_W11V11U10 = 0x41,D3DFMT_A2W10V10U10 = 0x43,D3DFMT_UYVY = 0x59565955,D3DFMT_YUY2 = 0x32595559,D3DFMT_DXT1 = 0x31545844,D3DFMT_DXT2 = 0x32545844,D3DFMT_DXT3 = 0x33545844,D3DFMT_DXT4 = 0x34545844,D3DFMT_DXT5 = 0x35545844,D3DFMT_D16_LOCKABLE = 0x46,D3DFMT_D32 = 0x47,D3DFMT_D15S1 = 0x49,D3DFMT_D24S8 = 0x4B,D3DFMT_D16 = 0x50,D3DFMT_D24X8 = 0x4D,D3DFMT_D24X4S4 = 0x4F,D3DFMT_VERTEXDATA = 0x64,D3DFMT_INDEX16 = 0x65,D3DFMT_INDEX32 = 0x66,D3DFMT_FORCE_DWORD = 0x7FFFFFFF,};
struct _D3DVECTOR {float x;float y;float z;};
enum _DMA_SPEED {Compatible = 0x0,TypeA = 0x1,TypeB = 0x2,TypeC = 0x3,TypeF = 0x4,MaximumDmaSpeed = 0x5,};
enum _DMA_WIDTH {Width8Bits = 0x0,Width16Bits = 0x1,Width32Bits = 0x2,MaximumDmaWidth = 0x3,};
struct _IMAGELIST;
struct _SecBuffer {unsigned int cbBuffer;unsigned int BufferType;void *pvBuffer;};
enum _TimeState {TS_Inactive = 0x0,TS_Active = 0x1,TS_Cueing = 0x2,TS_Seeking = 0x3,TS_Holding = 0x4,};
struct _WORD_BLOB {unsigned int clSize;unsigned short asData[1];};
struct _exception {int type;char *name;double arg1;double arg2;double retval;};
enum _htmlClear {htmlClearNotSet = 0x0,htmlClearAll = 0x1,htmlClearLeft = 0x2,htmlClearRight = 0x3,htmlClearBoth = 0x4,htmlClearNone = 0x5,htmlClear_Max = 0x7FFFFFFF,};
enum _htmlFrame {htmlFrameNotSet = 0x0,htmlFramevoid = 0x1,htmlFrameabove = 0x2,htmlFramebelow = 0x3,htmlFramehsides = 0x4,htmlFramelhs = 0x5,htmlFramerhs = 0x6,htmlFramevsides = 0x7,htmlFramebox = 0x8,htmlFrameborder = 0x9,htmlFrame_Max = 0x7FFFFFFF,};
enum _htmlInput {htmlInputNotSet = 0x0,htmlInputButton = 0x1,htmlInputCheckbox = 0x2,htmlInputFile = 0x3,htmlInputHidden = 0x4,htmlInputImage = 0x5,htmlInputPassword = 0x6,htmlInputRadio = 0x7,htmlInputReset = 0x8,htmlInputSelectOne = 0x9,htmlInputSelectMultiple = 0xA,htmlInputSubmit = 0xB,htmlInputText = 0xC,htmlInputTextarea = 0xD,htmlInputRichtext = 0xE,htmlInput_Max = 0x7FFFFFFF,};
enum _htmlRules {htmlRulesNotSet = 0x0,htmlRulesnone = 0x1,htmlRulesgroups = 0x2,htmlRulesrows = 0x3,htmlRulescols = 0x4,htmlRulesall = 0x5,htmlRules_Max = 0x7FFFFFFF,};
enum _htmlStart {htmlStartfileopen = 0x0,htmlStartmouseover = 0x1,htmlStart_Max = 0x7FFFFFFF,};
enum _mediaType {mediaTypeNotSet = 0x0,mediaTypeAll = 0x1FF,mediaTypeAural = 0x1,mediaTypeBraille = 0x2,mediaTypeEmbossed = 0x4,mediaTypeHandheld = 0x8,mediaTypePrint = 0x10,mediaTypeProjection = 0x20,mediaTypeScreen = 0x40,mediaTypeTty = 0x80,mediaTypeTv = 0x100,mediaType_Max = 0x7FFFFFFF,};
enum _styleAuto {styleAutoAuto = 0x0,styleAuto_Max = 0x7FFFFFFF,};
enum _styleBidi {styleBidiNotSet = 0x0,styleBidiNormal = 0x1,styleBidiEmbed = 0x2,styleBidiOverride = 0x3,styleBidiInherit = 0x4,styleBidi_Max = 0x7FFFFFFF,};
enum _styleBool {styleBoolFalse = 0x0,styleBoolTrue = 0x1,styleBool_Max = 0x7FFFFFFF,};
typedef int ber_slen_t;
typedef unsigned int ber_uint_t;
struct ldapsearch;
enum tagCMDTYPE {CMD_SEND = 0x0,CMD_RESP = 0x1,};
enum tagDATADIR {DATADIR_GET = 0x1,DATADIR_SET = 0x2,};
enum tagEXTCONN {EXTCONN_STRONG = 0x1,EXTCONN_WEAK = 0x2,EXTCONN_CALLABLE = 0x4,};
enum tagIXPTYPE {IXP_NNTP = 0x0,IXP_SMTP = 0x1,IXP_POP3 = 0x2,IXP_IMAP = 0x3,IXP_RAS = 0x4,IXP_HTTPMail = 0x5,};
enum tagOLEMISC {OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,OLEMISC_INVISIBLEATRUNTIME = 0x400,OLEMISC_ALWAYSRUN = 0x800,OLEMISC_ACTSLIKEBUTTON = 0x1000,OLEMISC_ACTSLIKELABEL = 0x2000,OLEMISC_NOUIACTIVATE = 0x4000,OLEMISC_ALIGNABLE = 0x8000,OLEMISC_SIMPLEFRAME = 0x10000,OLEMISC_SETCLIENTSITEFIRST = 0x20000,OLEMISC_IMEMODE = 0x40000,OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,OLEMISC_WANTSTOMENUMERGE = 0x100000,OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,};
enum tagREGKIND {REGKIND_DEFAULT = 0x0,REGKIND_REGISTER = 0x1,REGKIND_NONE = 0x2,};
enum tagSF_TYPE {SF_ERROR = 0xA,SF_I1 = 0x10,SF_I2 = 0x2,SF_I4 = 0x3,SF_I8 = 0x14,SF_BSTR = 0x8,SF_UNKNOWN = 0xD,SF_DISPATCH = 0x9,SF_VARIANT = 0xC,SF_RECORD = 0x24,SF_HAVEIID = 0x800D,};
enum tagSHCONTF {SHCONTF_FOLDERS = 0x20,SHCONTF_NONFOLDERS = 0x40,SHCONTF_INCLUDEHIDDEN = 0x80,SHCONTF_INIT_ON_FIRST_NEXT = 0x100,SHCONTF_NETPRINTERSRCH = 0x200,SHCONTF_SHAREABLE = 0x400,};
enum tagSTGMOVE {STGMOVE_MOVE = 0x0,STGMOVE_COPY = 0x1,STGMOVE_SHALLOWCOPY = 0x2,};
enum tagSYSKIND {SYS_WIN16 = 0x0,SYS_WIN32 = 0x1,SYS_MAC = 0x2,};
enum tagURLZONE {URLZONE_PREDEFINED_MIN = 0x0,URLZONE_LOCAL_MACHINE = 0x0,URLZONE_INTRANET = 0x1,URLZONE_TRUSTED = 0x2,URLZONE_INTERNET = 0x3,URLZONE_UNTRUSTED = 0x4,URLZONE_PREDEFINED_MAX = 0x3E7,URLZONE_USER_MIN = 0x3E8,URLZONE_USER_MAX = 0x2710,};
enum tagVARKIND {VAR_PERINSTANCE = 0x0,VAR_STATIC = 0x1,VAR_CONST = 0x2,VAR_DISPATCH = 0x3,};
typedef struct tagSTGMEDIUM uSTGMEDIUM;
typedef struct _userBITMAP userBITMAP;
typedef struct _AM_COLCON AM_COLCON;
typedef struct tagARRAYDESC ARRAYDESC;
typedef struct tagBIND_OPTS BIND_OPTS;
typedef struct _BYTE_BLOB BYTE_BLOB;
struct CCheckBox;
struct CCombobox;
typedef struct _CEDIRINFO CEDIRINFO;
typedef struct __CEL_SLEEP CEL_SLEEP;
typedef struct _CEOIDINFO CEOIDINFO;
typedef struct _CEPROPVAL CEPROPVAL;
typedef struct _CRYPTOAPI_BLOB CERT_BLOB;
typedef struct _CERT_INFO CERT_INFO;
typedef struct _CERT_PAIR CERT_PAIR;
struct CEventObj;
struct CHtmlArea;
typedef struct tagCOLUMNSET COLUMNSET;
typedef struct _cpinfoexA CPINFOEXA;
typedef struct _cpinfoexW CPINFOEXW;
typedef struct _CRL_ENTRY CRL_ENTRY;
typedef struct _CTL_ENTRY CTL_ENTRY;
typedef struct _CTL_USAGE CTL_USAGE;
typedef struct _D3DLIGHT8 D3DLIGHT8;
typedef struct _D3DMATRIX D3DMATRIX;
typedef struct _D3DVECTOR D3DVECTOR;
typedef struct _CRYPTOAPI_BLOB DATA_BLOB;
typedef struct tagDBBINDEXT DBBINDEXT;
typedef struct tagDBBINDING DBBINDING;
typedef struct tagDBCONTENT DBCONTENT;
typedef struct tagDBPROPSET DBPROPSET;
typedef struct tagDBSETFUNC DBSETFUNC;
typedef struct _DDSCAPSEX DDSCAPSEX;
typedef struct _52A9C12110BCF838A5CA2520D41849E7 DEVDETAIL;
typedef struct _A92B2F5D7D80D42A113836D63CC8DDA6 DMSDLINFO;
typedef struct _DROPFILES DROPFILES;
typedef struct _PUBKEY DSSPUBKEY;
typedef struct _DTBLDDLBX DTBLDDLBX;
typedef struct _DTBLLABEL DTBLLABEL;
enum DXBNDTYPE {DXBT_DISCRETE = 0x0,DXBT_DISCRETE64 = 0x1,DXBT_CONTINUOUS = 0x2,DXBT_CONTINUOUS64 = 0x3,};
typedef DXCBND64 DXCBNDS64[4];
typedef DXDBND64 DXDBNDS64[4];
struct DXRUNINFO {unsigned int Type : 2;unsigned int Count : 30;};
enum DXRUNTYPE {DXRUNTYPE_CLEAR = 0x0,DXRUNTYPE_OPAQUE = 0x1,DXRUNTYPE_TRANS = 0x2,DXRUNTYPE_UNKNOWN = 0x3,};
struct DXSurface;
struct DXTFilter;
typedef struct tagERRORINFO ERRORINFO;
typedef struct tagEXCEPINFO EXCEPINFO;
typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 FLATENTRY;
typedef struct tagFORMATETC FORMATETC;
struct FontNames;
typedef struct _tagGroupInfo GROUPINFO;
typedef struct tagGUIDELINE GUIDELINE;
struct HACMOBJ__ {int unused;};
struct HBITMAP__ {int unused;};
typedef void *HCRYPTMSG;
typedef  struct HDRVPHONE__ *HDRVPHONE;
typedef struct tagHH_AKLINK HH_AKLINK;
typedef struct HINSTANCE__ *HINSTANCE;
typedef struct _HMAC_Info HMAC_INFO;
typedef struct HMETAFILE__ *HMETAFILE;
struct HMIDIIN__ {int unused;};
typedef struct HMIDISTRM__ *HMIDISTRM;
typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef  struct HPHONEAPP__ *HPHONEAPP;
typedef  struct HPROVIDER__ *HPROVIDER;
typedef  struct HTAPICALL__ *HTAPICALL;
typedef  struct HTAPILINE__ *HTAPILINE;
struct HTMLEmbed;
struct HTMLPopup;
struct HTMLStyle;
struct HTMLTable;
typedef struct _TREEITEM *HTREEITEM;
struct HWAVEIN__ {int unused;};
struct HWINSTA__ {int unused;};
typedef struct _tagHWXRESULT HWXRESULT;
struct IAccessor {struct IAccessorVtbl *lpVtbl;};
struct IAddrBook {struct IAddrBookVtbl *lpVtbl;};
struct IBindHost {struct IBindHostVtbl *lpVtbl;};
struct ICheckBox {struct ICheckBoxVtbl *lpVtbl;};
struct ICifGroup {struct ICifGroupVtbl *lpVtbl;};
struct ICombobox {struct IComboboxVtbl *lpVtbl;};
struct IContinue {struct IContinueVtbl *lpVtbl;};
struct IDXDCLock {struct IDXDCLockVtbl *lpVtbl;};
struct IDXEffect {struct IDXEffectVtbl *lpVtbl;};
struct IDXTLabel {struct IDXTLabelVtbl *lpVtbl;};
struct IDXTScale {struct IDXTScaleVtbl *lpVtbl;};
struct IDeskBand {struct IDeskBandVtbl *lpVtbl;};
struct IDispatch {struct IDispatchVtbl *lpVtbl;};
struct IDistList {struct IDistListVtbl *lpVtbl;};
struct IDvdInfo2 {struct IDvdInfo2Vtbl *lpVtbl;};
struct IDvdState {struct IDvdStateVtbl *lpVtbl;};
struct IEnumGUID {struct IEnumGUIDVtbl *lpVtbl;};
struct IEnumPins {struct IEnumPinsVtbl *lpVtbl;};
struct IErrorLog {struct IErrorLogVtbl *lpVtbl;};
struct IFontDisp {struct IFontDispVtbl *lpVtbl;};
struct IHTMLRect {struct IHTMLRectVtbl *lpVtbl;};
struct IHomePage {struct IHomePageVtbl *lpVtbl;};
struct IHtmlArea {struct IHtmlAreaVtbl *lpVtbl;};
struct IInternet {struct IInternetVtbl *lpVtbl;};
struct IJavaFile {struct IJavaFileVtbl *lpVtbl;};
struct ILineInfo {struct ILineInfoVtbl *lpVtbl;};
typedef struct _IMAGEINFO IMAGEINFO;
struct IMAPIProp {struct IMAPIPropVtbl *lpVtbl;};
struct IMXWriter {struct IMXWriterVtbl *lpVtbl;};
struct IMailUser {struct IMailUserVtbl *lpVtbl;};
struct IMimeBody {struct IMimeBodyVtbl *lpVtbl;};
struct IMimeEdit {struct IMimeEditVtbl *lpVtbl;};
struct IMimeInfo {struct IMimeInfoVtbl *lpVtbl;};
struct IMsgStore {struct IMsgStoreVtbl *lpVtbl;};
struct IMsgrUser {struct IMsgrUserVtbl *lpVtbl;};
typedef struct _INFO_6TO4 INFO_6TO4;
struct IObexCaps {struct IObexCapsVtbl *lpVtbl;};
struct IObexSink {struct IObexSinkVtbl *lpVtbl;};
struct IOleCache {struct IOleCacheVtbl *lpVtbl;};
typedef struct ipv6_mreq IPV6_MREQ;
struct IProfSect {struct IProfSectVtbl *lpVtbl;};
struct IProgSink {struct IProgSinkVtbl *lpVtbl;};
struct IPropData {struct IPropDataVtbl *lpVtbl;};
struct IQualProp {struct IQualPropVtbl *lpVtbl;};
struct IRTCBuddy {struct IRTCBuddyVtbl *lpVtbl;};
struct IReadData {struct IReadDataVtbl *lpVtbl;};
struct IResponse {struct IResponseVtbl *lpVtbl;};
struct IScopeAdm {struct IScopeAdmVtbl *lpVtbl;};
struct ISearches {struct ISearchesVtbl *lpVtbl;};
struct IShellApp {struct IShellAppVtbl *lpVtbl;};
struct IStemSink {struct IStemSinkVtbl *lpVtbl;};
struct IThumbCtl {struct IThumbCtlVtbl *lpVtbl;};
struct ITypeComp {struct ITypeCompVtbl *lpVtbl;};
struct ITypeInfo {struct ITypeInfoVtbl *lpVtbl;};
struct ITypeLib2 {struct ITypeLib2Vtbl *lpVtbl;};
struct IViewSort {struct IViewSortVtbl *lpVtbl;};
struct IWSDLPort {struct IWSDLPortVtbl *lpVtbl;};
struct IWordSink {struct IWordSinkVtbl *lpVtbl;};
struct IXMLError {struct IXMLErrorVtbl *lpVtbl;};
typedef struct tagIXPRESULT IXPRESULT;
struct Iwfolders {struct IwfoldersVtbl *lpVtbl;};
typedef struct _PUBKEY KEAPUBKEY;
typedef struct _LDT_ENTRY LDT_ENTRY;
typedef struct _610479CDF0DBDC41F2C77A99D793B920 LOG_ENTRY;
typedef struct IAddrBook *LPADRBOOK;
typedef struct _ADRLIST *LPADRLIST;
typedef struct _ADRPARM *LPADRPARM;
typedef IBindCtx *LPBINDCTX;
typedef IBinding *LPBINDING;
typedef union tagBINDPTR *LPBINDPTR;
typedef struct tagCADWORD *LPCADWORD;
typedef struct _COMSTAT *LPCOMSTAT;
typedef  struct _REGINI *LPCREGINI;
typedef struct _DDFXROP *LPDDFXROP;
typedef struct _DDSCAPS *LPDDSCAPS;
typedef struct _DSBCAPS *LPDSBCAPS;
typedef struct _DSCCAPS *LPDSCCAPS;
typedef struct _DTBLLBX *LPDTBLLBX;
typedef struct _7684FB82DC2359E8867448D749E28870 *LPENTRYID;
typedef struct _HD_ITEMA *LPHDITEMA;
typedef struct _HD_ITEMW *LPHDITEMW;
typedef struct hostent *LPHOSTENT;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct tagIMEINFO *LPIMEINFO;
typedef struct in_addr *LPIN_ADDR;
typedef unsigned int *LPLHANDLE;
typedef struct tagLICINFO *LPLICINFO;
typedef struct tagLVITEMA *LPLVITEMA;
typedef struct tagLVITEMW *LPLVITEMW;
typedef struct _MAPIUID *LPMAPIUID;
typedef IMarshal *LPMARSHAL;
typedef struct IMessage *LPMESSAGE;
typedef struct midihdr_tag *LPMIDIHDR;
typedef IMoniker *LPMONIKER;
typedef IMultiQI *LPMULTIQI;
typedef struct tagNMMOUSE *LPNMMOUSE;
typedef struct tagNMREBAR *LPNMREBAR;
typedef IOleLink *LPOLELINK;
typedef struct tagOLEVERB *LPOLEVERB;
typedef IPersist *LPPERSIST;
typedef IPicture *LPPICTURE;
typedef struct tagPOP3TOP *LPPOP3TOP;
typedef struct tagRGBQUAD *LPRGBQUAD;
typedef struct _RGNDATA *LPRGNDATA;
typedef struct _SBinary *LPSBinary;
typedef struct servent *LPSERVENT;
typedef struct _SRowSet *LPSRowSet;
typedef struct _STATURL *LPSTATURL;
typedef IStorage *LPSTORAGE;
typedef struct tagTCITEMA *LPTCITEMA;
typedef struct tagTCITEMW *LPTCITEMW;
typedef struct timeval *LPTIMEVAL;
typedef struct tagTVITEMA *LPTVITEMA;
typedef struct tagTVITEMW *LPTVITEMW;
typedef ITypeLib *LPTYPELIB;
typedef struct _UDACCEL *LPUDACCEL;
typedef IUnknown *LPUNKNOWN;
typedef struct tagVARDESC *LPVARDESC;
typedef IVersionVector *LPVERSION;
typedef struct wavehdr_tag *LPWAVEHDR;
typedef struct WSAData *LPWSADATA;
typedef struct WSPData *LPWSPDATA;
typedef struct tagLVCOLUMNA LVCOLUMNA;
typedef struct tagLVCOLUMNW LVCOLUMNW;
enum MACRO_ACE {OBJECT_INHERIT_ACE = 0x1,CONTAINER_INHERIT_ACE = 0x2,NO_PROPAGATE_INHERIT_ACE = 0x4,INHERIT_ONLY_ACE = 0x8,INHERITED_ACE = 0x10,};
enum MACRO_ACL {ACL_REVISION = 2,ACL_REVISION_DS = 4,ACL_REVISION1 = 1,ACL_REVISION2 = 2,ACL_REVISION3 = 3,ACL_REVISION4 = 4,};
enum MACRO_ACM {ACM_MPEG_LAYER1 = 0x1,ACM_MPEG_LAYER2 = 0x2,ACM_MPEG_LAYER3 = 0x4,ACM_MPEG_STEREO = 0x1,ACM_MPEG_JOINTSTEREO = 0x2,ACM_MPEG_DUALCHANNEL = 0x4,ACM_MPEG_SINGLECHANNEL = 0x8,ACM_MPEG_PRIVATEBIT = 0x1,ACM_MPEG_COPYRIGHT = 0x2,ACM_MPEG_ORIGINALHOME = 0x4,ACM_MPEG_PROTECTIONBIT = 0x8,ACM_MPEG_ID_MPEG1 = 0x10,};
enum MACRO_ADL {ADL_FAST_NETWORK_SPEED = 1000000,ADL_SLOW_NETWORK = 1,ADL_FAST_NETWORK = 2,ADL_NONPASSTHROUGH_ALLOWED = 3,ADL_PASSTHROUGH = 4,ADL_PASSTHROUGH_ONLY = 8,ADL_RECURRENT = -2147483648,ADL_RECUR_EXEC_ONLY = 536870912,ADL_REPORT_SOFTWARE = 65536,ADL_REPORT_FILECOLLECT = 131072,ADL_REPORT_HARDWARE = 262144,ADL_REPORT_INVENTORY = 458752,};
enum MACRO_ADN {ADN_DEL_IF_EMPTY = 0x1,ADN_DONT_DEL_SUBDIRS = 0x2,ADN_DONT_DEL_DIR = 0x4,ADN_DEL_UNC_PATHS = 0x8,};
enum MACRO_AIF {AIF_WARNIFSKIP = 0x1,AIF_NOSKIP = 0x2,AIF_NOVERSIONCHECK = 0x4,AIF_FORCE_FILE_IN_USE = 0x8,AIF_NOOVERWRITE = 0x10,AIF_NO_VERSION_DIALOG = 0x20,AIF_REPLACEONLY = 0x400,AIF_NOLANGUAGECHECK = 0x10000000,AIF_QUIET = 0x20000000,};
enum MACRO_ALC {ALC_WHITE = 0x1,ALC_LCALPHA = 0x2,ALC_UCALPHA = 0x4,ALC_NUMERIC = 0x8,ALC_PUNC = 0x10,ALC_NUMERIC_PUNC = 0x20,ALC_MATH = 0x40,ALC_MONETARY = 0x80,ALC_COMMON_SYMBOLS = 0x100,ALC_OTHER = 0x200,ALC_ASCII = 0x400,ALC_HIRAGANA = 0x800,ALC_KATAKANA = 0x1000,ALC_KANJI_COMMON = 0x2000,ALC_KANJI_RARE = 0x4000,ALC_HANGUL_COMMON = 0x8000,ALC_HANGUL_RARE = 0x10000,ALC_UNUSED = 0xFE0000,ALC_OEM = 0xFF000000,ALC_ALPHA = 0x6,ALC_ALPHANUMERIC = 0xE,ALC_KANA = 0x1800,ALC_KANJI_ALL = 0x6000,ALC_HANGUL_ALL = 0x18000,ALC_EXTENDED_SYM = 0x2C0,ALC_SYS_MINIMUM = 0x1F,ALC_SYS_DEFAULT = 0x11F,ALC_USA_COMMON = 0x11F,ALC_USA_EXTENDED = 0x3DF,ALC_JPN_COMMON = 0x391F,ALC_JPN_EXTENDED = 0x7BDF,ALC_CHS_COMMON = 0x211F,ALC_CHS_EXTENDED = 0x63DF,ALC_CHT_COMMON = 0x211F,ALC_CHT_EXTENDED = 0x63DF,ALC_KOR_COMMON = 0xA11F,ALC_KOR_EXTENDED = 0x1E3DF,};
enum MACRO_ALG {ALG_CLASS_ANY = 0,ALG_CLASS_SIGNATURE = 8192,ALG_CLASS_MSG_ENCRYPT = 16384,ALG_CLASS_DATA_ENCRYPT = 24576,ALG_CLASS_HASH = 32768,ALG_CLASS_KEY_EXCHANGE = 40960,ALG_CLASS_ALL = 57344,ALG_TYPE_ANY = 0,ALG_TYPE_DSS = 512,ALG_TYPE_RSA = 1024,ALG_TYPE_BLOCK = 1536,ALG_TYPE_STREAM = 2048,ALG_TYPE_DH = 2560,ALG_TYPE_SECURECHANNEL = 3072,ALG_SID_ANY = 0,ALG_SID_RSA_ANY = 0,ALG_SID_RSA_PKCS = 1,ALG_SID_RSA_MSATWORK = 2,ALG_SID_RSA_ENTRUST = 3,ALG_SID_RSA_PGP = 4,ALG_SID_DSS_ANY = 0,ALG_SID_DSS_PKCS = 1,ALG_SID_DSS_DMS = 2,ALG_SID_DES = 1,ALG_SID_3DES = 3,ALG_SID_DESX = 4,ALG_SID_IDEA = 5,ALG_SID_CAST = 6,ALG_SID_SAFERSK64 = 7,ALG_SID_SAFERSK128 = 8,ALG_SID_3DES_112 = 9,ALG_SID_CYLINK_MEK = 12,ALG_SID_RC5 = 13,ALG_SID_AES_128 = 14,ALG_SID_AES_192 = 15,ALG_SID_AES_256 = 16,ALG_SID_AES = 17,ALG_SID_SKIPJACK = 10,ALG_SID_TEK = 11,};
enum MACRO_ANY {ANY_SIZE = 1,};
enum MACRO_ASC {ASC_REQ_DELEGATE = 0x1,ASC_REQ_MUTUAL_AUTH = 0x2,ASC_REQ_REPLAY_DETECT = 0x4,ASC_REQ_SEQUENCE_DETECT = 0x8,ASC_REQ_CONFIDENTIALITY = 0x10,ASC_REQ_USE_SESSION_KEY = 0x20,ASC_REQ_ALLOCATE_MEMORY = 0x100,ASC_REQ_USE_DCE_STYLE = 0x200,ASC_REQ_DATAGRAM = 0x400,ASC_REQ_CONNECTION = 0x800,ASC_REQ_CALL_LEVEL = 0x1000,ASC_REQ_EXTENDED_ERROR = 0x8000,ASC_REQ_STREAM = 0x10000,ASC_REQ_INTEGRITY = 0x20000,ASC_REQ_LICENSING = 0x40000,ASC_REQ_IDENTIFY = 0x80000,ASC_REQ_ALLOW_NULL_SESSION = 0x100000,ASC_REQ_ALLOW_NON_USER_LOGONS = 0x200000,ASC_REQ_ALLOW_CONTEXT_REPLAY = 0x400000,ASC_REQ_FRAGMENT_TO_FIT = 0x800000,ASC_REQ_FRAGMENT_SUPPLIED = 0x2000,ASC_RET_DELEGATE = 0x1,ASC_RET_MUTUAL_AUTH = 0x2,ASC_RET_REPLAY_DETECT = 0x4,ASC_RET_SEQUENCE_DETECT = 0x8,ASC_RET_CONFIDENTIALITY = 0x10,ASC_RET_USE_SESSION_KEY = 0x20,ASC_RET_ALLOCATED_MEMORY = 0x100,ASC_RET_USED_DCE_STYLE = 0x200,ASC_RET_DATAGRAM = 0x400,ASC_RET_CONNECTION = 0x800,ASC_RET_CALL_LEVEL = 0x2000,ASC_RET_THIRD_LEG_FAILED = 0x4000,ASC_RET_EXTENDED_ERROR = 0x8000,ASC_RET_STREAM = 0x10000,ASC_RET_INTEGRITY = 0x20000,ASC_RET_LICENSING = 0x40000,ASC_RET_IDENTIFY = 0x80000,ASC_RET_NULL_SESSION = 0x100000,ASC_RET_ALLOW_NON_USER_LOGONS = 0x200000,ASC_RET_ALLOW_CONTEXT_REPLAY = 0x400000,ASC_RET_FRAGMENT_ONLY = 0x800000,};
enum MACRO_ATM {ATM_E164 = 0x1,ATM_NSAP = 0x2,ATM_AESA = 0x2,ATM_ADDR_SIZE = 0x14,};
enum MACRO_AVI {AVI_HEADERSIZE = 2048,};
enum MACRO_BDR {BDR_RAISEDOUTER = 0x1,BDR_SUNKENOUTER = 0x2,BDR_RAISEDINNER = 0x4,BDR_SUNKENINNER = 0x8,BDR_OUTER = 0x3,BDR_INNER = 0xC,BDR_RAISED = 0x5,BDR_SUNKEN = 0xA,};
enum MACRO_BIF {BIF_RETURNONLYFSDIRS = 0x1,BIF_DONTGOBELOWDOMAIN = 0x2,BIF_STATUSTEXT = 0x4,BIF_RETURNFSANCESTORS = 0x8,BIF_EDITBOX = 0x10,BIF_VALIDATE = 0x20,BIF_NEWDIALOGSTYLE = 0x40,BIF_USENEWUI = 0x50,BIF_BROWSEINCLUDEURLS = 0x80,BIF_BROWSEFORCOMPUTER = 0x1000,BIF_BROWSEFORPRINTER = 0x2000,BIF_BROWSEINCLUDEFILES = 0x4000,BIF_SHAREABLE = 0x8000,};
enum MACRO_BMK {BMK_DURABILITY_ROWSET = 0,BMK_DURABILITY_INTRANSACTION = 1,BMK_DURABILITY_XTRANSACTION = 2,BMK_DURABILITY_REORGANIZATION = 3,};
enum MACRO_BMR {BMR_EQZ = 0,BMR_NEZ = 1,};
enum MACRO_BPC {BPC_MIN_DIMENSION = 1,BPC_MAX_BUFFER_SIZE = 64,BPC_MIN_BUFFER_SIZE = 4,BPC_DEVICE_ANY = -1,BPC_STREAM_TYPE_GENERIC_MIN = 16777216,BPC_STREAM_TYPE_RAW = 16777216,BPC_STREAM_TYPE_MPT_128 = 16777217,BPC_STREAM_TYPE_MPT_128_CRC = 16777218,BPC_STREAM_TYPE_IP = 16777219,BPC_STREAM_TYPE_PROVIDER_MIN = 33554432,BPC_STREAM_TYPE_PROVIDER_MAX = 50331647,BPC_STREAM_TYPE_ADAPTER_MIN = 50331648,BPC_STREAM_TYPE_ADAPTER_MAX = 67108863,};
enum MACRO_BSF {BSF_QUERY = 0x1,BSF_IGNORECURRENTTASK = 0x2,BSF_FLUSHDISK = 0x4,BSF_NOHANG = 0x8,BSF_POSTMESSAGE = 0x10,BSF_FORCEIFHUNG = 0x20,BSF_NOTIMEOUTIFNOTHUNG = 0x40,BSF_MSGSRV32ISOK = 0x80000000,BSF_MSGSRV32ISOK_BIT = 0x1F,};
enum MACRO_BSM {BSM_ALLCOMPONENTS = 0x0,BSM_VXDS = 0x1,BSM_NETDRIVER = 0x2,BSM_INSTALLABLEDRIVERS = 0x4,BSM_APPLICATIONS = 0x8,};
enum MACRO_BST {BST_UNCHECKED = 0x0,BST_CHECKED = 0x1,BST_INDETERMINATE = 0x2,BST_PUSHED = 0x4,BST_FOCUS = 0x8,};
enum MACRO_BTH {BTH_SDP_VERSION = 1,};
enum MACRO_CAL {CAL_NOUSEROVERRIDE = -2147483648,CAL_USE_CP_ACP = 1073741824,CAL_RETURN_NUMBER = 536870912,CAL_ICALINTVALUE = 1,CAL_SCALNAME = 2,CAL_IYEAROFFSETRANGE = 3,CAL_SERASTRING = 4,CAL_SSHORTDATE = 5,CAL_SLONGDATE = 6,CAL_SDAYNAME1 = 7,CAL_SDAYNAME2 = 8,CAL_SDAYNAME3 = 9,CAL_SDAYNAME4 = 10,CAL_SDAYNAME5 = 11,CAL_SDAYNAME6 = 12,CAL_SDAYNAME7 = 13,CAL_SABBREVDAYNAME1 = 14,CAL_SABBREVDAYNAME2 = 15,CAL_SABBREVDAYNAME3 = 16,CAL_SABBREVDAYNAME4 = 17,CAL_SABBREVDAYNAME5 = 18,CAL_SABBREVDAYNAME6 = 19,CAL_SABBREVDAYNAME7 = 20,CAL_SMONTHNAME1 = 21,CAL_SMONTHNAME2 = 22,CAL_SMONTHNAME3 = 23,CAL_SMONTHNAME4 = 24,CAL_SMONTHNAME5 = 25,CAL_SMONTHNAME6 = 26,CAL_SMONTHNAME7 = 27,CAL_SMONTHNAME8 = 28,CAL_SMONTHNAME9 = 29,CAL_SMONTHNAME10 = 30,CAL_SMONTHNAME11 = 31,CAL_SMONTHNAME12 = 32,CAL_SMONTHNAME13 = 33,CAL_SABBREVMONTHNAME1 = 34,CAL_SABBREVMONTHNAME2 = 35,CAL_SABBREVMONTHNAME3 = 36,CAL_SABBREVMONTHNAME4 = 37,CAL_SABBREVMONTHNAME5 = 38,CAL_SABBREVMONTHNAME6 = 39,CAL_SABBREVMONTHNAME7 = 40,CAL_SABBREVMONTHNAME8 = 41,CAL_SABBREVMONTHNAME9 = 42,CAL_SABBREVMONTHNAME10 = 43,CAL_SABBREVMONTHNAME11 = 44,CAL_SABBREVMONTHNAME12 = 45,CAL_SABBREVMONTHNAME13 = 46,CAL_SYEARMONTH = 47,CAL_ITWODIGITYEARMAX = 48,};
enum MACRO_CAT {CAT_E_FIRST = 0x80040160,CAT_E_LAST = 0x80040161,};
enum MACRO_CBN {CBN_ERRSPACE = -1,CBN_SELCHANGE = 1,CBN_DBLCLK = 2,CBN_SETFOCUS = 3,CBN_KILLFOCUS = 4,CBN_EDITCHANGE = 5,CBN_EDITUPDATE = 6,CBN_DROPDOWN = 7,CBN_CLOSEUP = 8,CBN_SELENDOK = 9,CBN_SELENDCANCEL = 10,};
enum MACRO_CBR {CBR_110 = 110,CBR_300 = 300,CBR_600 = 600,CBR_1200 = 1200,CBR_2400 = 2400,CBR_4800 = 4800,CBR_9600 = 9600,CBR_14400 = 14400,CBR_19200 = 19200,CBR_38400 = 38400,CBR_56000 = 56000,CBR_57600 = 57600,CBR_115200 = 115200,CBR_128000 = 128000,CBR_256000 = 256000,};
enum MACRO_CBS {CBS_DROPDOWN = 0x2,CBS_DROPDOWNLIST = 0x3,CBS_AUTOHSCROLL = 0x40,CBS_OEMCONVERT = 0x80,CBS_SORT = 0x100,CBS_HASSTRINGS = 0x200,CBS_NOINTEGRALHEIGHT = 0x400,CBS_DISABLENOSCROLL = 0x800,CBS_UPPERCASE = 0x2000,CBS_LOWERCASE = 0x4000,CBS_EX_CONSTSTRINGDATA = 0x2,};
enum MACRO_CCH {CCH_MAX_PROPSTG_NAME = 31,};
enum MACRO_CCM {CCM_FIRST = 0x2000,CCM_LAST = 0x2200,CCM_SETVERSION = 0x2007,CCM_GETVERSION = 0x2008,};
enum MACRO_CCS {CCS_TOP = 0x1,CCS_NOMOVEY = 0x2,CCS_BOTTOM = 0x3,CCS_NORESIZE = 0x4,CCS_NOPARENTALIGN = 0x8,CCS_ADJUSTABLE = 0x20,CCS_NODIVIDER = 0x40,CCS_VERT = 0x80,CCS_LEFT = 0x81,CCS_RIGHT = 0x83,CCS_NOMOVEX = 0x82,};
enum MACRO_CDN {CDN_FIRST = -601,CDN_LAST = -699,};
enum MACRO_CDS {CDS_TEST = 0x2,CDS_VIDEOPARAMETERS = 0x20,CDS_RESET = 0x40000000,};
enum MACRO_CEL {CEL_HEADER_TIMESTAMP = 0x80000000,CEL_HEADER_LENGTH_MASK = 0xFFFF,CEL_HEADER_ID_MASK = 0x3FFF0000,};
enum MACRO_CEM {CEM_UPCASEALLWORDS = 1025,};
enum MACRO_CFG {CFG_ATTR_EXCLUSIVE = 0x1,CFG_ATTR_IRQ_STEERING = 0x2,CFG_ATTR_IRQ_WAKEUP = 0x4,CFG_ATTR_KEEP_POWERED = 0x8,CFG_ATTR_NO_SUSPEND_UNLOAD = 0x10,CFG_ATTR_ENABLE_DMA = 0x40,CFG_ATTR_VALID_CLIENT = 0x100,CFG_ATTR_VS_OVERRIDE = 0x200,CFG_ATTR_NO_IO_IS_8 = 0x400,CFG_IFACE_MEMORY = 0x1,CFG_IFACE_MEMORY_IO = 0x2,CFG_REGISTER_CONFIG = 0x1,CFG_REGISTER_STATUS = 0x2,CFG_REGISTER_PIN = 0x4,CFG_REGISTER_COPY = 0x8,CFG_REGISTER_EXSTATUS = 0x10,CFG_REGISTER_EXREG = 0x20,CFG_EXREGISTER_IOBASE0 = 0x1,CFG_EXREGISTER_IOBASE1 = 0x2,CFG_EXREGISTER_IOBASE2 = 0x4,CFG_EXREGISTER_IOBASE3 = 0x8,CFG_EXREGISTER_IOLIMIT = 0x10,};
enum MACRO_CFS {CFS_DEFAULT = 0x0,CFS_RECT = 0x1,CFS_POINT = 0x2,CFS_FORCE_POSITION = 0x20,CFS_CANDIDATEPOS = 0x40,CFS_EXCLUDE = 0x80,};
enum MACRO_CLK {CLK_TCK = 1000,};
enum MACRO_CLM {CLM_START = 0x1000,CLM_SETCANDLIST = 0x1000,CLM_SETWNDPOS = 0x1001,CLM_GETCURSEL = 0x1002,CLM_GETPAGESTART = 0x1003,};
enum MACRO_CLN {CLN_NOTIFYCODE = 0x100,CLN_DETERMINE = 0x100,CLN_SELECTION = 0x101,CLN_PAGESTART = 0x102,};
enum MACRO_CLR {CLR_INVALID = 0xFFFFFFFF,};
enum MACRO_CLS {CLS_BUTTONS = 0x1,CLS_FRACTION = 0x2,CLS_ACTIVATE = 0x4,};
enum MACRO_CMC {CMC_DATA = 59,CMC_RESPONSE = 60,CMC_STATUS = 61,CMC_ADD_EXTENSIONS = 62,CMC_ADD_ATTRIBUTES = 63,};
enum MACRO_CMD {CMD_ZOOM_PAGEWIDTH = -1,CMD_ZOOM_ONEPAGE = -2,CMD_ZOOM_TWOPAGES = -3,CMD_ZOOM_SELECTION = -4,CMD_ZOOM_FIT = -5,};
enum MACRO_CMF {CMF_NORMAL = 0x0,CMF_DEFAULTONLY = 0x1,CMF_VERBSONLY = 0x2,CMF_EXPLORE = 0x4,CMF_NOVERBS = 0x8,CMF_CANRENAME = 0x10,CMF_NODEFAULT = 0x20,CMF_INCLUDESTATIC = 0x40,CMF_FINDHACK = 0x80,CMF_EXTENDEDVERBS = 0x100,CMF_RESERVED = 0xFFFF0000,};
enum MACRO_CNS {CNS_SIGNALLED = 1,};
enum MACRO_CNT {CNT_EVENT = 1,CNT_TIME = 2,CNT_PERIOD = 3,CNT_CLASSICTIME = 4,};
enum MACRO_COM {COM_RIGHTS_EXECUTE = 1,};
enum MACRO_CPD {CPD_CHOICE_SIP = 1,CPD_USE_NT5_CHAIN_FLAG = -2147483648,CPD_REVOCATION_CHECK_NONE = 65536,CPD_REVOCATION_CHECK_END_CERT = 131072,CPD_REVOCATION_CHECK_CHAIN = 262144,CPD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 524288,};
enum MACRO_CPS {CPS_COMPLETE = 0x1,CPS_CONVERT = 0x2,CPS_REVERT = 0x3,CPS_CANCEL = 0x4,};
enum MACRO_CRL {CRL_V1 = 0,CRL_V2 = 1,};
enum MACRO_CRM {CRM_FIRST = 0x1000,CRM_INITSTYLE = 0x1001,CRM_SETUSERNAMEMAX = 0x1002,CRM_SETPASSWORDMAX = 0x1003,CRM_SETUSERNAMEA = 0x1004,CRM_SETUSERNAMEW = 0x1005,CRM_GETUSERNAMEA = 0x1006,CRM_GETUSERNAMEW = 0x1007,CRM_SETPASSWORDA = 0x1008,CRM_SETPASSWORDW = 0x1009,CRM_GETPASSWORDA = 0x100A,CRM_GETPASSWORDW = 0x100B,CRM_SETFOCUS = 0x100C,CRM_SHOWBALLOONA = 0x100D,CRM_SHOWBALLOONW = 0x100E,CRM_GETMINSIZE = 0x100F,CRM_SETCHECK = 0x1010,CRM_GETCHECK = 0x1011,CRM_GETUSERNAMELENGTH = 0x1012,CRM_GETPASSWORDLENGTH = 0x1013,CRM_GETUSERNAMEMAX = 0x1014,CRM_GETPASSWORDMAX = 0x1015,CRM_DOCMDLINE = 0x1016,CRM_ENABLEUSERNAME = 0x1017,CRM_DISABLEUSERNAME = 0x1018,};
enum MACRO_CRN {CRN_USERNAMECHANGE = 1,CRN_PASSWORDCHANGE = 2,};
enum MACRO_CRS {CRS_USERNAMES = 0x1,CRS_CERTIFICATES = 0x2,CRS_SMARTCARDS = 0x4,CRS_ADMINISTRATORS = 0x8,CRS_AUTOCOMPLETE = 0x10,CRS_BALLOONS = 0x20,CRS_SAVECHECK = 0x40,CRS_COMPLETEUSERNAME = 0x80,CRS_PREFILLADMIN = 0x100,CRS_SINGLESIGNON = 0x200,CRS_KEEPUSERNAME = 0x400,CRS_NORMAL = 0x30,};
enum MACRO_CTF {CTF_INSIST = 0x1,CTF_THREAD_REF = 0x2,CTF_PROCESS_REF = 0x4,CTF_COINIT = 0x8,CTF_FREELIBANDEXIT = 0x10,};
enum MACRO_CTL {CTL_E_ILLEGALFUNCTIONCALL = -2146828283,CTL_E_OVERFLOW = -2146828282,CTL_E_OUTOFMEMORY = -2146828281,CTL_E_DIVISIONBYZERO = -2146828277,CTL_E_OUTOFSTRINGSPACE = -2146828274,CTL_E_OUTOFSTACKSPACE = -2146828260,CTL_E_BADFILENAMEORNUMBER = -2146828236,CTL_E_FILENOTFOUND = -2146828235,CTL_E_BADFILEMODE = -2146828234,CTL_E_FILEALREADYOPEN = -2146828233,CTL_E_DEVICEIOERROR = -2146828231,CTL_E_FILEALREADYEXISTS = -2146828230,CTL_E_BADRECORDLENGTH = -2146828229,CTL_E_DISKFULL = -2146828227,CTL_E_BADRECORDNUMBER = -2146828225,CTL_E_BADFILENAME = -2146828224,CTL_E_TOOMANYFILES = -2146828221,CTL_E_DEVICEUNAVAILABLE = -2146828220,CTL_E_PERMISSIONDENIED = -2146828218,CTL_E_DISKNOTREADY = -2146828217,CTL_E_PATHFILEACCESSERROR = -2146828213,CTL_E_PATHNOTFOUND = -2146828212,CTL_E_INVALIDPATTERNSTRING = -2146828195,CTL_E_INVALIDUSEOFNULL = -2146828194,CTL_E_INVALIDFILEFORMAT = -2146827967,CTL_E_INVALIDPROPERTYVALUE = -2146827908,CTL_E_INVALIDPROPERTYARRAYINDEX = -2146827907,CTL_E_SETNOTSUPPORTEDATRUNTIME = -2146827906,CTL_E_SETNOTSUPPORTED = -2146827905,CTL_E_NEEDPROPERTYARRAYINDEX = -2146827903,CTL_E_SETNOTPERMITTED = -2146827901,CTL_E_GETNOTSUPPORTEDATRUNTIME = -2146827895,CTL_E_GETNOTSUPPORTED = -2146827894,CTL_E_PROPERTYNOTFOUND = -2146827866,CTL_E_INVALIDCLIPBOARDFORMAT = -2146827828,CTL_E_INVALIDPICTURE = -2146827807,CTL_E_PRINTERERROR = -2146827806,CTL_E_CANTSAVEFILETOTEMP = -2146827553,CTL_E_SEARCHTEXTNOTFOUND = -2146827544,CTL_E_REPLACEMENTSTOOLONG = -2146827542,CTL_E_CUSTOM_FIRST = -2146827688,};
enum MACRO_CUR {CUR_BLOB_VERSION = 2,};
enum MACRO_D3D {D3D_OK = 0,};
enum MACRO_DAV {DAV_LEVEL1_STATUS = 0x1,DAV_COLLECTION_STATUS = 0x4000,DAV_DETECTION_REQUIRED = 0x8000,};
enum MACRO_DBG {DBG_CONTINUE = 0x10002,DBG_TERMINATE_THREAD = 0x40010003,DBG_TERMINATE_PROCESS = 0x40010004,DBG_CONTROL_C = 0x40010005,DBG_CONTROL_BREAK = 0x40010008,DBG_EXCEPTION_NOT_HANDLED = 0x80010001,};
enum MACRO_DBL {DBL_DIG = 15,DBL_MANT_DIG = 53,DBL_MAX_10_EXP = 308,DBL_MAX_EXP = 1024,DBL_MIN_10_EXP = -307,DBL_MIN_EXP = -1021,};
enum MACRO_DBT {DBT_APPYBEGIN = 0x0,DBT_APPYEND = 0x1,DBT_DEVNODES_CHANGED = 0x7,DBT_QUERYCHANGECONFIG = 0x17,DBT_CONFIGCHANGED = 0x18,DBT_CONFIGCHANGECANCELED = 0x19,DBT_MONITORCHANGE = 0x1B,DBT_SHELLLOGGEDON = 0x20,DBT_CONFIGMGAPI32 = 0x22,DBT_VXDINITCOMPLETE = 0x23,DBT_VOLLOCKQUERYLOCK = 0x8041,DBT_VOLLOCKLOCKTAKEN = 0x8042,DBT_VOLLOCKLOCKFAILED = 0x8043,DBT_VOLLOCKQUERYUNLOCK = 0x8044,DBT_VOLLOCKLOCKRELEASED = 0x8045,DBT_VOLLOCKUNLOCKFAILED = 0x8046,};
enum MACRO_DCE {DCE_C_ERROR_STRING_LEN = 256,};
enum MACRO_DCX {DCX_WINDOW = 0x1,DCX_CACHE = 0x2,DCX_CLIPCHILDREN = 0x8,DCX_CLIPSIBLINGS = 0x10,DCX_EXCLUDERGN = 0x40,DCX_INTERSECTRGN = 0x80,DCX_EXCLUDEUPDATE = 0x100,DCX_INTERSECTUPDATE = 0x200,};
enum MACRO_DEF {DEF_ALLOW_8BIT_HEADER = 0,DEF_CBMAX_HEADER_LINE = 1000,DEF_WRAP_BODY_TEXT = 1,DEF_CBMAX_BODY_LINE = 74,DEF_GENERATE_MESSAGE_ID = 0,DEF_HASH_ALG_ID = 32772,DEF_ENCRYPTION_ALG_ID = 26114,DEF_INCLUDE_SENDER_CERT = 0,DEF_HIDE_TNEF_ATTACHMENTS = 1,DEF_CLEANUP_TREE_ON_SAVE = 1,DEF_BODY_REMOVE_NBSP = 1,DEF_SECURITY_IGNOREMASK = 0,DEF_DBCS_ESCAPE_IS_8BIT = 0,DEF_NO_DEFAULT_CNTTYPE = 0,DEF_CAN_INLINE_TEXT_BODIES = 0,DEF_SHOW_MACBINARY = 0,DEF_SAVEBODY_KEEPBOUNDARY = 0,};
enum MACRO_DEL {DEL_MESSAGES = 0x1,};
enum MACRO_DEP {DEP_NEVER_INSTALL = 78,DEP_INSTALL = 73,};
enum MACRO_DET {DET_NOTINSTALLED = 0,DET_INSTALLED = 1,DET_NEWVERSIONINSTALLED = 2,DET_OLDVERSIONINSTALLED = 3,};
enum MACRO_DEV {DEV_PORT_SIM = 1,DEV_PORT_COM1 = 2,DEV_PORT_COM2 = 3,DEV_PORT_COM3 = 4,DEV_PORT_COM4 = 5,DEV_PORT_DIAQ = 6,DEV_PORT_ARTI = 7,DEV_PORT_1394 = 8,DEV_PORT_USB = 9,DEV_PORT_MIN = 1,DEV_PORT_MAX = 9,};
enum MACRO_DFC {DFC_CAPTION = 1,DFC_SCROLL = 3,DFC_BUTTON = 4,};
enum MACRO_DFS {DFS_REFERRAL_REQUEST = 0x400037EE,};
enum MACRO_DIB {DIB_RGB_COLORS = 0,DIB_PAL_COLORS = 1,};
enum MACRO_DIR {DIR_BACKWARD = 0x1,};
enum MACRO_DLG {DLG_ACMFORMATCHOOSE_ID = 70,};
enum MACRO_DLL {DLL_PROCESS_ATTACH = 1,DLL_THREAD_ATTACH = 2,DLL_THREAD_DETACH = 3,DLL_PROCESS_DETACH = 0,DLL_PROCESS_EXITING = 4,DLL_SYSTEM_STARTED = 5,DLL_MEMORY_LOW = 6,};
enum MACRO_DMO {DMO_E_INVALIDSTREAMINDEX = 0x80040201,DMO_E_INVALIDTYPE = 0x80040202,DMO_E_TYPE_NOT_SET = 0x80040203,DMO_E_NOTACCEPTING = 0x80040204,DMO_E_TYPE_NOT_ACCEPTED = 0x80040205,DMO_E_NO_MORE_ITEMS = 0x80040206,};
enum MACRO_DMS {DMS_CTL_SETTASK = 1380259,DMS_CTL_REGWND = 1380263,DMS_CTL_UNREGWND = 1380267,};
enum MACRO_DOE {DOE_UNLOAD_PENDING = 0x1,DOE_DELETE_PENDING = 0x2,DOE_REMOVE_PENDING = 0x4,DOE_REMOVE_PROCESSED = 0x8,DOE_START_PENDING = 0x10,};
enum MACRO_DRV {DRV_LOAD = 0x1,DRV_ENABLE = 0x2,DRV_OPEN = 0x3,DRV_CLOSE = 0x4,DRV_DISABLE = 0x5,DRV_FREE = 0x6,DRV_CONFIGURE = 0x7,DRV_QUERYCONFIGURE = 0x8,DRV_INSTALL = 0x9,DRV_REMOVE = 0xA,DRV_EXITSESSION = 0xB,DRV_POWER = 0xF,DRV_RESERVED = 0x800,DRV_USER = 0x4000,};
enum MACRO_DTM {DTM_FIRST = 0x1000,DTM_GETSYSTEMTIME = 0x1001,DTM_SETSYSTEMTIME = 0x1002,DTM_GETRANGE = 0x1003,DTM_SETRANGE = 0x1004,DTM_SETFORMATA = 0x1005,DTM_SETFORMATW = 0x1032,DTM_SETFORMAT = 0x1005,DTM_SETMCCOLOR = 0x1006,DTM_GETMCCOLOR = 0x1007,DTM_GETMONTHCAL = 0x1008,DTM_SETMCFONT = 0x1009,DTM_GETMCFONT = 0x100A,};
enum MACRO_DTN {DTN_FIRST = -760,DTN_LAST = -799,};
enum MACRO_DTR {DTR_CONTROL_DISABLE = 0x0,DTR_CONTROL_ENABLE = 0x1,DTR_CONTROL_HANDSHAKE = 0x2,};
enum MACRO_DTS {DTS_UPDOWN = 0x1,DTS_SHOWNONE = 0x2,DTS_SHORTDATEFORMAT = 0x0,DTS_LONGDATEFORMAT = 0x4,DTS_SHORTDATECENTURYFORMAT = 0xC,DTS_TIMEFORMAT = 0x9,DTS_APPCANPARSE = 0x10,DTS_RIGHTALIGN = 0x20,DTS_NONEBUTTON = 0x80,};
enum MACRO_DVD {DVD_TITLE_MENU = 0x0,DVD_STREAM_DATA_CURRENT = 0x800,DVD_STREAM_DATA_VMGM = 0x400,DVD_STREAM_DATA_VTSM = 0x401,DVD_DEFAULT_AUDIO_STREAM = 0xF,DVD_AUDIO_CAPS_AC3 = 0x1,DVD_AUDIO_CAPS_MPEG2 = 0x2,DVD_AUDIO_CAPS_LPCM = 0x4,DVD_AUDIO_CAPS_DTS = 0x8,DVD_AUDIO_CAPS_SDDS = 0x10,};
enum MACRO_DWL {DWL_MSGRESULT = 0,DWL_DLGPROC = 4,DWL_USER = 8,};
enum MACRO_DWN {DWN_COLORMODE = 0x3F,DWN_DOWNLOADONLY = 0x40,DWN_FORCEDITHER = 0x80,DWN_RAWIMAGE = 0x100,DWN_MIRRORIMAGE = 0x200,};
enum MACRO_EAI {EAI_AGAIN = 11002,EAI_BADFLAGS = 10022,EAI_FAIL = 11003,EAI_FAMILY = 10047,EAI_MEMORY = 8,EAI_NODATA = 11004,EAI_NONAME = 11001,EAI_SERVICE = 10109,EAI_SOCKTYPE = 10044,};
enum MACRO_EBF {EBF_RECURSE = 0x10000,EBF_COMMITIFDIRTY = 0x20000,EBF_MASK = 0xFFFF0000,};
enum MACRO_EIM {EIM_SPELL = 0,EIM_AMBIG = 1,EIM_NUMBERS = 2,EIM_TEXT = 3,EIM_MASK = 65535,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EPF {EPF_NONAME = 0x1,};
enum MACRO_ETH {ETH_LENGTH_OF_ADDRESS = 6,FDDI_LENGTH_OF_LONG_ADDRESS = 6,FDDI_LENGTH_OF_SHORT_ADDRESS = 2,};
enum MACRO_ETO {ETO_OPAQUE = 0x2,ETO_CLIPPED = 0x4,};
enum MACRO_EWX {EWX_LOGOFF = 0,EWX_SHUTDOWN = 1,EWX_REBOOT = 2,EWX_FORCE = 4,EWX_POWEROFF = 8,};
enum MACRO_EXP {EXP_DARWIN_ID_SIG = 0xA0000006,EXP_LOGO3_ID_SIG = 0xA0000007,EXP_SPECIAL_FOLDER_SIG = 0xA0000005,EXP_SZ_LINK_SIG = 0xA0000001,EXP_SZ_ICON_SIG = 0xA0000007,};
enum MACRO_FCR {FCR_OFFSET_COR = 0,FCR_OFFSET_FCSR = 1,FCR_OFFSET_PRR = 2,FCR_OFFSET_SCR = 3,FCR_OFFSET_ESR = 4,FCR_OFFSET_IOB0 = 5,FCR_OFFSET_IOB1 = 6,FCR_OFFSET_IOB2 = 7,FCR_OFFSET_IOB3 = 8,FCR_OFFSET_IOSZ = 9,FCR_COR_LEVEL_IREQ = 64,FCR_COR_SRESET = 128,FCR_FCSR_INTR_ACK = 1,FCR_FCSR_INTR = 2,FCR_FCSR_PWR_DOWN = 4,FCR_FCSR_AUDIO = 8,FCR_FCSR_IO_IS_8 = 32,FCR_FCSR_STSCHG = 64,FCR_FCSR_CHANGED = 128,FCR_FCSR_REQUIRED_BITS = 33,FCR_PRR_RWP = 1,FCR_PRR_RREADY = 2,FCR_PRR_RBVD2 = 4,FCR_PRR_RBVD1 = 8,FCR_PRR_CWP = 16,FCR_PRR_CRDY = 32,FCR_PRR_CBVD2 = 64,FCR_PRR_CBVD1 = 128,};
enum MACRO_FCT {FCT_MERGE = 0x1,FCT_CONFIGABLE = 0x2,FCT_ADDTOEND = 0x4,};
enum MACRO_FCW {FCW_STATUS = 0x1,FCW_TOOLBAR = 0x2,FCW_TREE = 0x3,FCW_VIEW = 0x4,FCW_BROWSER = 0x5,FCW_INTERNETBAR = 0x6,FCW_MENUBAR = 0x7,FCW_PROGRESS = 0x8,FCW_ADDRESSBAR = 0x9,FCW_TOOLBAND = 0xA,FCW_LINKSBAR = 0xB,};
enum MACRO_FLT {FLT_DIG = 6,FLT_GUARD = 0,FLT_MANT_DIG = 24,FLT_MAX_10_EXP = 38,FLT_MAX_EXP = 128,FLT_MIN_10_EXP = -37,FLT_MIN_EXP = -125,FLT_NORMALIZE = 0,FLT_RADIX = 2,FLT_ROUNDS = 1,};
enum MACRO_FOF {FOF_MULTIDESTFILES = 0x1,FOF_CONFIRMMOUSE = 0x2,FOF_SILENT = 0x4,FOF_RENAMEONCOLLISION = 0x8,FOF_NOCONFIRMATION = 0x10,FOF_WANTMAPPINGHANDLE = 0x20,FOF_ALLOWUNDO = 0x40,FOF_FILESONLY = 0x80,FOF_SIMPLEPROGRESS = 0x100,FOF_NOCONFIRMMKDIR = 0x200,FOF_NOERRORUI = 0x400,FOF_NOCOPYSECURITYATTRIBS = 0x800,FOF_NORECURSION = 0x1000,};
enum MACRO_FPE {FPE_INVALID = 129,FPE_DENORMAL = 130,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_UNEMULATED = 135,FPE_SQRTNEG = 136,FPE_STACKOVERFLOW = 138,FPE_STACKUNDERFLOW = 139,FPE_EXPLICITGEN = 140,};
enum MACRO_FTP {FTP_TRANSFER_TYPE_UNKNOWN = 0x0,FTP_TRANSFER_TYPE_ASCII = 0x1,FTP_TRANSFER_TYPE_BINARY = 0x2,FTP_TRANSFER_TYPE_MASK = 0x3,};
enum MACRO_GAA {GAA_FLAG_SKIP_UNICAST = 0x1,GAA_FLAG_SKIP_ANYCAST = 0x2,GAA_FLAG_SKIP_MULTICAST = 0x4,GAA_FLAG_SKIP_DNS_SERVER = 0x8,GAA_FLAG_INCLUDE_PREFIX = 0x10,GAA_FLAG_SKIP_FRIENDLY_NAME = 0x20,};
enum MACRO_GAI {GAI_STRERROR_BUFFER_SIZE = 1024,};
enum MACRO_GCI {GCI_NAME = 1,GCI_FILE = 2,GCI_CLSID = 3,GCI_TYPELIBID = 4,GCI_TOTALSIZE = 5,GCI_SIZESAVED = 6,GCI_TOTALFILES = 7,GCI_CODEBASE = 8,GCI_ISDISTUNIT = 9,GCI_DIST_UNIT_VERSION = 10,GCI_STATUS = 11,GCI_HAS_ACTIVEX = 12,GCI_HAS_JAVA = 13,};
enum MACRO_GCL {GCL_HCURSOR = -12,GCL_HICON = -14,GCL_STYLE = -26,};
enum MACRO_GCS {GCS_COMPREADSTR = 0x1,GCS_COMPREADATTR = 0x2,GCS_COMPREADCLAUSE = 0x4,GCS_COMPSTR = 0x8,GCS_COMPATTR = 0x10,GCS_COMPCLAUSE = 0x20,GCS_CURSORPOS = 0x80,GCS_DELTASTART = 0x100,GCS_RESULTREADSTR = 0x200,GCS_RESULTREADCLAUSE = 0x400,GCS_RESULTSTR = 0x800,GCS_RESULTCLAUSE = 0x1000,};
enum MACRO_GCT {GCT_INVALID = 0x0,GCT_LFNCHAR = 0x1,GCT_SHORTCHAR = 0x2,GCT_WILD = 0x4,GCT_SEPARATOR = 0x8,};
enum MACRO_GDI {GDI_ERROR = 0xFFFFFFFF,};
enum MACRO_GDT {GDT_ERROR = -1,GDT_VALID = 0,GDT_NONE = 1,};
enum MACRO_GET {GET_ENCAPSULATED_RESPONSE = 0x1,};
enum MACRO_GGL {GGL_LEVEL = 0x1,GGL_INDEX = 0x2,GGL_STRING = 0x3,GGL_PRIVATE = 0x4,};
enum MACRO_GIF {GIF_ROAMING_FOLDER = 0x1,GIF_NON_ROAMING_FOLDER = 0x2,};
enum MACRO_GIL {GIL_OPENICON = 0x1,GIL_FORSHELL = 0x2,GIL_ASYNC = 0x20,GIL_SIMULATEDOC = 0x1,GIL_PERINSTANCE = 0x2,GIL_PERCLASS = 0x4,GIL_NOTFILENAME = 0x8,GIL_DONTCACHE = 0x10,};
enum MACRO_GMR {GMR_VISIBLE = 0,GMR_DAYSTATE = 1,};
enum MACRO_GWL {GWL_WNDPROC = -4,GWL_STYLE = -16,GWL_EXSTYLE = -20,GWL_USERDATA = -21,GWL_ID = -12,};
enum MACRO_HCI {HCI_HARDWARE_UNKNOWN = 0,HCI_HARDWARE_NOT_PRESENT = 1,HCI_HARDWARE_INITIALIZING = 2,HCI_HARDWARE_RUNNING = 3,HCI_HARDWARE_SHUTDOWN = 4,HCI_HARDWARE_ERROR = 5,};
enum MACRO_HDF {HDF_LEFT = 0,HDF_RIGHT = 1,HDF_CENTER = 2,HDF_JUSTIFYMASK = 3,HDF_RTLREADING = 4,HDF_OWNERDRAW = 32768,HDF_STRING = 16384,HDF_BITMAP = 8192,HDF_BITMAP_ON_RIGHT = 4096,HDF_IMAGE = 2048,};
enum MACRO_HDI {HDI_WIDTH = 0x1,HDI_HEIGHT = 0x1,HDI_TEXT = 0x2,HDI_FORMAT = 0x4,HDI_LPARAM = 0x8,HDI_BITMAP = 0x10,HDI_IMAGE = 0x20,HDI_DI_SETITEM = 0x40,HDI_ORDER = 0x80,};
enum MACRO_HDM {HDM_GETITEMCOUNT = 4608,HDM_INSERTITEMA = 4609,HDM_INSERTITEMW = 4618,HDM_INSERTITEM = 4609,HDM_DELETEITEM = 4610,HDM_GETITEMA = 4611,HDM_GETITEMW = 4619,HDM_GETITEM = 4611,HDM_SETITEMA = 4612,HDM_SETITEMW = 4620,HDM_SETITEM = 4612,HDM_LAYOUT = 4613,};
enum MACRO_HDN {HDN_FIRST = -300,HDN_LAST = -399,};
enum MACRO_HDS {HDS_HORZ = 0x0,HDS_BUTTONS = 0x2,HDS_HIDDEN = 0x8,HDS_DRAGDROP = 0x40,HDS_FULLDRAG = 0x80,};
enum MACRO_HHN {HHN_FIRST = -860,HHN_LAST = -879,HHN_NAVCOMPLETE = -860,HHN_TRACK = -861,HHN_WINDOW_CREATE = -862,};
enum MACRO_HHT {HHT_NOWHERE = 0x1,HHT_ONHEADER = 0x2,HHT_ONDIVIDER = 0x4,HHT_ONDIVOPEN = 0x8,HHT_ABOVE = 0x100,HHT_BELOW = 0x200,HHT_TORIGHT = 0x400,HHT_TOLEFT = 0x800,};
enum MACRO_HSE {HSE_VERSION_MAJOR = 4,HSE_VERSION_MINOR = 0,HSE_LOG_BUFFER_LEN = 80,HSE_MAX_EXT_DLL_NAME_LEN = 256,HSE_VERSION = 262144,HSE_STATUS_SUCCESS = 1,HSE_STATUS_SUCCESS_AND_KEEP_CONN = 2,HSE_STATUS_PENDING = 3,HSE_STATUS_ERROR = 4,HSE_REQ_BASE = 0,HSE_REQ_SEND_URL_REDIRECT_RESP = 1,HSE_REQ_SEND_URL = 2,HSE_REQ_SEND_RESPONSE_HEADER = 3,HSE_REQ_DONE_WITH_SESSION = 4,HSE_REQ_END_RESERVED = 1000,HSE_REQ_MAP_URL_TO_PATH = 1001,HSE_REQ_GET_SSPI_INFO = 1002,HSE_APPEND_LOG_PARAMETER = 1003,HSE_REQ_IO_COMPLETION = 1005,HSE_REQ_TRANSMIT_FILE = 1006,HSE_REQ_REFRESH_ISAPI_ACL = 1007,HSE_REQ_IS_KEEP_CONN = 1008,HSE_REQ_ASYNC_READ_CLIENT = 1010,HSE_REQ_GET_IMPERSONATION_TOKEN = 1011,HSE_REQ_MAP_URL_TO_PATH_EX = 1012,HSE_REQ_ABORTIVE_CLOSE = 1014,HSE_REQ_GET_CERT_INFO_EX = 1015,HSE_REQ_SEND_RESPONSE_HEADER_EX = 1016,HSE_TERM_ADVISORY_UNLOAD = 1,HSE_TERM_MUST_UNLOAD = 2,HSE_IO_SYNC = 1,HSE_IO_ASYNC = 2,HSE_IO_DISCONNECT_AFTER_SEND = 4,HSE_IO_SEND_HEADERS = 8,HSE_URL_FLAGS_READ = 1,HSE_URL_FLAGS_WRITE = 2,HSE_URL_FLAGS_EXECUTE = 4,HSE_URL_FLAGS_SSL = 8,HSE_URL_FLAGS_DONT_CACHE = 16,HSE_URL_FLAGS_NEGO_CERT = 32,HSE_URL_FLAGS_REQUIRE_CERT = 64,HSE_URL_FLAGS_MAP_CERT = 128,HSE_URL_FLAGS_SSL128 = 256,HSE_URL_FLAGS_SCRIPT = 512,HSE_URL_FLAGS_SCRIPT_SOURCE = 1024,HSE_URL_FLAGS_MASK = 2047,};
enum MACRO_HSR {HSR_ASYNC = 1,HSR_SYNC = 4,HSR_USE_CONTEXT = 8,HSR_INITIATE = 8,HSR_DOWNLOAD = 16,HSR_CHUNKED = 32,};
enum MACRO_HWX {HWX_HORIZONTAL = 0,HWX_BIDIRECTIONAL = 1,HWX_VERTICAL = 2,HWX_PARTIAL_ALL = 0,HWX_PARTIAL_ORDER = 1,HWX_PARTIAL_FREE = 2,};
enum MACRO_IAP {IAP_CHARSET = 0x1,IAP_HANDLE = 0x2,IAP_ADRTYPE = 0x4,IAP_FRIENDLY = 0x8,IAP_EMAIL = 0x20,IAP_CERTSTATE = 0x100,IAP_SIGNING_PRINT = 0x200,IAP_ENCRYPTION_PRINT = 0x400,IAP_ENCODING = 0x800,IAP_COOKIE = 0x1000,IAP_ALL = 0xFFFFFFFF,};
enum MACRO_IAS {IAS_ATTRIB_NO_CLASS = 0x10,IAS_ATTRIB_NO_ATTRIB = 0x0,IAS_ATTRIB_INT = 0x1,IAS_ATTRIB_OCTETSEQ = 0x2,IAS_ATTRIB_STR = 0x3,IAS_MAX_USER_STRING = 0x100,IAS_MAX_OCTET_STRING = 0x400,IAS_MAX_CLASSNAME = 0x40,IAS_MAX_ATTRIBNAME = 0x100,};
enum MACRO_IAT {IAT_UNKNOWN = 0x0,IAT_FROM = 0x1,IAT_SENDER = 0x2,IAT_TO = 0x4,IAT_CC = 0x8,IAT_BCC = 0x10,IAT_REPLYTO = 0x20,IAT_RETURNPATH = 0x40,IAT_RETRCPTTO = 0x80,IAT_RR = 0x100,IAT_APPARTO = 0x200,IAT_ALL = 0xFFFFFFFF,IAT_KNOWN = 0x3F,IAT_RECIPS = 0x1C,};
enum MACRO_ICC {ICC_LISTVIEW_CLASSES = 0x1,ICC_TREEVIEW_CLASSES = 0x2,ICC_BAR_CLASSES = 0x4,ICC_TAB_CLASSES = 0x8,ICC_UPDOWN_CLASS = 0x10,ICC_PROGRESS_CLASS = 0x20,ICC_WIN95_CLASSES = 0xFF,ICC_DATE_CLASSES = 0x100,ICC_COOL_CLASSES = 0x400,ICC_TOOLTIP_CLASSES = 0x1000,ICC_CAPEDIT_CLASS = 0x2000,ICC_FE_CLASSES = 0x40000000,};
enum MACRO_ICI {ICI_NOTINSTALLED = 0,ICI_INSTALLED = 1,ICI_NEWVERSIONAVAILABLE = 2,ICI_UNKNOWN = 3,ICI_OLDVERSIONAVAILABLE = 4,ICI_NOTINITIALIZED = -1,};
enum MACRO_ICU {ICU_ESCAPE = 0x80000000,ICU_USERNAME = 0x40000000,ICU_NO_ENCODE = 0x20000000,ICU_DECODE = 0x10000000,ICU_NO_META = 0x8000000,ICU_ENCODE_SPACES_ONLY = 0x4000000,ICU_BROWSER_MODE = 0x2000000,ICU_ENCODE_PERCENT = 0x1000,};
enum MACRO_IDB {IDB_STD_SMALL_COLOR = 0,IDB_STD_LARGE_COLOR = 1,IDB_VIEW_SMALL_COLOR = 4,IDB_VIEW_LARGE_COLOR = 5,};
enum MACRO_IDC {IDC_ARROW = 32512,IDC_IBEAM = 32513,IDC_WAIT = 32514,IDC_CROSS = 32515,IDC_UPARROW = 32516,IDC_SIZE = 32646,IDC_ICON = 32512,IDC_SIZENWSE = 32642,IDC_SIZENESW = 32643,IDC_SIZEWE = 32644,IDC_SIZENS = 32645,IDC_SIZEALL = 32646,IDC_NO = 32648,IDC_APPSTARTING = 32650,IDC_HELP = 32651,IDC_HAND = 32649,};
enum MACRO_IDD {IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = 101,IDD_ACMFORMATCHOOSE_CMB_FORMAT = 102,};
enum MACRO_IDH {IDH_IE_RUN_COMMAND = 50000,IDH_BROWSELIST = 50001,IDH_NEWFOLDER = 50002,IDH_CREATEIN = 50003,IDH_NAMEEDIT = 50004,IDH_RUNBROWSE = 50005,IDH_ORG_FAVORITES_MOVE = 50006,IDH_ORG_FAVORITES_RENAME = 50007,IDH_ORG_FAVORITES_DELETE = 50008,IDH_ORG_FAVORITES_OPEN = 50009,IDH_ORG_FAVORITES_CLOSE = 50010,IDH_AUTOCONFIG_BUTTON = 50011,IDH_AUTOCONFIG_TEXT = 50012,IDH_OPTS_CONNX_AUTOCNCT_REFRESH = 50013,IDH_PRINT_SCREEN = 50014,IDH_PRINT_SEL_FRAME = 50015,IDH_PRINT_ALL_FRAME = 50016,IDH_PRINT_LINKS = 50017,IDH_PRINT_SHORTCUTS = 50020,IDH_FIND_WHOLEA = 50022,IDH_FIND_CASEA = 50023,IDH_FIND_UPA = 50024,IDH_FIND_DOWNA = 50025,IDH_FIND_NEXTA = 50026,IDH_FIND_WHATA = 50027,IDH_OPTS_GEN_LANG_BUT = 50028,IDH_LANG_PREFS_LIST = 50029,IDH_LANG_PREFS_UP = 50030,IDH_LANG_PREFS_DOWN = 50031,IDH_LANG_PREFS_REMOVE = 50032,IDH_LANG_PREFS_ADD = 50033,IDH_EDIT_PROFILE_BTN = 50198,IDH_ADD_LANGUAGE_LANGUAGE_LIST = 50037,IDH_ADD_LANGUAGE_USER_DEFINED = 50038,IDH_CLIENT_AUTHENTICATION_LIST = 50039,IDH_CLIENT_AUTHENTICATION_CERT_PROPS = 50040,IDH_GROUPBOX = 51000,IDH_MM_PIC = 50042,IDH_MM_ANIM = 50176,IDH_MM_SOUND = 50043,IDH_MM_VIDEO = 50044,IDH_APPEAR_COLOR = 50045,IDH_SMART_DITH = 50177,IDH_DOWNLOAD_COMP = 50492,IDH_AUTOCOMP = 50180,IDH_ADD_URL = 50111,IDH_ADD_SMOOTH = 50107,IDH_ADD_LINK = 50112,IDH_NEW_PROCESS = 50178,IDH_CHANNELLOG = 50179,IDH_ENABLE_SUB_UPDATES = 50181,IDH_UPDATE_SUB_NEW_PROC = 50182,IDH_PCT_ALLOW = 50130,IDH_SSL2_ALLOW = 50128,IDH_SSL3_ALLOW = 50129,IDH_CRYPT_NOSAVE_SSL = 50127,IDH_PRIV_VIEW = 50089,IDH_CHK_CERT_REVOC = 50184,IDH_PRIV_INVALID = 50119,IDH_TAKE_COOKIES_ALWAYS = 50189,IDH_PRIV_COOKIE = 50090,IDH_DISABLE_COOKIES = 50190,IDH_ADD_JAVA_COMP = 50110,IDH_ADD_JAVA_LOG = 50109,IDH_PRINT_BKGRND = 50191,IDH_AUTOSCAN = 50192,IDH_SEARCH_URL_FAILS = 50193,IDH_TOOL_STD = 50048,IDH_RESTORE_DEFS = 50196,IDH_APPEAR_OPTION = 50046,IDH_APPEAR_LINK = 50047,IDH_FONT_INT = 50055,IDH_FONT_MIME = 50056,IDH_OPTS_GEN_FONTS_FONTSIZE = 50057,IDH_CHAR_SET = 50058,IDH_INTL_DEFAULT = 50059,IDH_INTL_FONT_PROP = 50060,IDH_INTL_FONT_FIXED = 50061,IDH_DIAL_CON = 50062,IDH_DIAL_USE = 50063,IDH_DIAL_PROP = 50064,IDH_DIAL_DIS = 50065,IDH_DIAL_ADD = 50066,IDH_DIAL_SYS = 50067,IDH_PROX_SERV = 50068,IDH_PROX_SETTINGS = 50069,IDH_SERV_INFO = 50070,IDH_SERV_SAME = 50071,IDH_EXCEPT_PROX = 50072,IDH_EXCEPT_LOCAL = 50073,IDH_CUST_ADDRESS = 50076,IDH_CUST_DEF = 50077,IDH_CUST_CURR = 50078,IDH_HIST_NUM = 50079,IDH_HIST_CLEAR = 50080,IDH_MAIL = 50082,IDH_NEWS = 50083,IDH_IE_DEF = 50085,IDH_CERT_PERS = 50091,IDH_CERT_SITE = 50092,IDH_CERT_PUB = 50093,IDH_ACT_CONTENT = 50097,IDH_SAFE_EXPERT = 50099,IDH_SAFE_NORM = 50100,IDH_SAFE_NONE = 50101,IDH_RATE_TOGGLE = 50102,IDH_RATE_PROP = 50103,IDH_TIF_VIEW = 50104,IDH_TIF_SETTINGS = 50105,IDH_TEMP_EVERY = 50113,IDH_TEMP_START = 50114,IDH_TEMP_NEVER = 50115,IDH_TEMP_AMOUNT = 50116,IDH_TEMP_EMPTY = 50117,IDH_TEMP_MOVE = 50118,IDH_TEMP_AUTO = 50491,IDH_VIEW_CERT = 50124,IDH_DEL_CERT = 50125,IDH_LIST_CERT = 50126,IDH_PAGESETUP_HEADER_LEFT = 50136,IDH_CPL_GEN_USEBLANK = 50137,IDH_CPL_SEC_ZONE_DROPLIST = 50138,IDH_CPL_SEC_ADDSITES = 50139,IDH_CPL_SEC_CUSTOM_LEVEL = 50140,IDH_CPL_SEC_SETTINGS = 50141,IDH_CPL_WEB_SITES_LIST = 50142,IDH_CPL_WEB_SITES_REMOVE = 50143,IDH_CPL_REQ_VERIFICATION_CHKBOX = 50144,IDH_CPL_WEB_SITES_ADD_THIS_TXT = 50145,IDH_CPL_WEB_SITES_ADD_BUTTON = 50146,IDH_CPL_SEC_SETTINGS_CURRENT = 50147,IDH_CPL_SEC_SETTINGS_RESET = 50148,IDH_CPL_CNX_WIZARD = 50149,IDH_CPL_CNX_SETTINGS = 50150,IDH_CPL_CNX_ACCESSBYLAN = 50151,IDH_CPL_CNX_PROXY_ADDR_PORT = 50152,IDH_CPL_DUN_ATTEMPT_X_TIMES = 50153,IDH_CPL_DUN_WAIT_X_SECS = 50154,IDH_CPL_DUN_SEND_MY_LOGIN = 50155,IDH_CPL_DUN_USERNAME = 50156,IDH_CPL_DUN_PASSWORD = 50157,IDH_CPL_DUN_DOMAIN = 50158,IDH_CPL_PROGRAMS_CAL = 50159,IDH_CPL_PROGRAMS_CONTACTS = 50160,IDH_CPL_PROGRAMS_INTERNET_CALL = 50161,IDH_CPL_ADV_COLORS = 50162,IDH_CPL_ADV_ACCESSIBILITY = 50163,IDH_CPL_ACCESS_USE_MY_COLORS = 50164,IDH_CPL_ACCESS_USE_MY_F_STYLE = 50165,IDH_CPL_ACCESS_USE_MY_F_SIZE = 50166,IDH_CPL_ACCESS_USE_MY_STYLESHEETS = 50167,IDH_SEC_ENTER_SSL = 50168,IDH_SEC_ENTER_SSL_W_INVALIDCERT = 50169,IDH_SEC_SEND_N_REC_COOKIES = 50171,IDH_SEC_SIGNED_N_INVALID = 50173,IDH_SEC_MIXED_DOWNLOAD_FROM_SSL = 50175,IDH_SEC_ENTER_NON_SECURE_SITE = 50226,IDH_CERTVWPROP_GEN_FINEPRINT = 50228,IDH_CERTVWPROP_DET_ISSUER_CERT = 50229,IDH_CERTVWPROP_DET_FRIENDLY = 50230,IDH_CERTVWPROP_DET_STATUS = 50231,IDH_CERTVWPROP_TRUST_PURPOSE = 50232,IDH_CERTVWPROP_TRUST_HIERAR = 50233,IDH_CERTVWPROP_TRUST_VIEWCERT = 50234,IDH_CERTVWPROP_TRUST_INHERIT = 50235,IDH_CERTVWPROP_TRUST_EXPLICIT_TRUST = 50236,IDH_CERTVWPROP_TRUST_EXPLICIT_DISTRUST = 50237,IDH_CERTVWPROP_ADV_FIELD = 50238,IDH_CERTVWPROP_ADV_DETAILS = 50239,IDH_HOVERCOLOR = 50240,IDH_JAVA_PERMISSIONS = 50241,IDH_ENABLE_TRANSITIONS = 50242,IDH_UNDERLINE_LINKS = 50243,IDH_SECURITY_RESET_ZONE_DEFAULTS = 50244,IDH_SECURITY_RESET_LEVEL_DEFAULTS = 50245,IDH_PA_OPS_REQUEST = 50246,IDH_PA_OPS_LIST = 50247,IDH_PA_USAGE_STRING = 50248,IDH_PA_VIEW_CERT = 50249,IDH_PA_CONNECTION_SECURITY = 50250,IDH_PA_ALWAYS_SHARE = 50251,IDH_DISABLE_SCRIPT_DEBUG = 50252,IDH_TEMP_INTERNET_VIEW_OBJECTS_BTN = 50254,IDH_DLOAD_TYPE = 50255,IDH_DLOAD_CREATED = 50256,IDH_DLOAD_LASTACC = 50257,IDH_DLOAD_TOTALSIZE = 50258,IDH_DLOAD_ID = 50259,IDH_DLOAD_STATUS = 50260,IDH_DLOAD_CODEBASE = 50261,IDH_DLOAD_FILE_DEP = 50262,IDH_DLOAD_JAVAPKG_DEP = 50263,IDH_DLOAD_VERSION = 50264,IDH_DLOAD_DESC = 50265,IDH_DLOAD_COMPANY = 50266,IDH_DLOAD_LANG = 50267,IDH_DLOAD_COPYRIGHT = 50268,IDH_ADD_SITES_ADVANCED_BTN = 50269,IDH_LOCAL_INTRA_INCLUDE_ALL_NOT_LISTED = 50270,IDH_LOCAL_INTRA_INCLUDE_ALL_THAT_BYPASS_PROXY = 50271,IDH_LOCAL_INTRA_INCLUDE_ALL_UNCS = 50272,IDH_SITE_CERTS_ISSUER_TYPE = 50273,IDH_JAVA_CUST_SETTINGS_BTN = 50274,IDH_SUBSCR_TO = 50021,IDH_SUBSCR_TO_CHANNEL = 50275,IDH_SUBSCR_ADDTO_FAVS = 50276,IDH_SUBSCR_PARTIAL = 50278,IDH_CHANNEL_ADDTO_CHANNELS = 50279,IDH_CHANNEL_PARTIAL = 50280,IDH_CHANNEL_SUBSCR_CUST_BUTTON = 50281,IDH_SOFTWARE_CHANNEL_PERMISSIONS = 50282,IDH_USER_AUTHENTICATION = 50283,IDH_DLOAD_OBJNAME = 50284,IDH_RESET_SHARING_OPS = 50285,IDH_ADV_PROFILE_ASSISTANT = 50286,IDH_ALWAYS_LAUNCH_FULL_SCREEN = 50287,IDH_WARN_IF_FORMS_REDIRECTED = 50288,IDH_SHOW_FONT_BUTTON = 50289,IDH_SHOW_IE_ON_DESKTOP = 50290,IDH_SHOW_WELCOME_EACH_LOGON = 50291,IDH_LAUNCH_CHANNELSIN_FULL = 50292,IDH_DELETE_HISTORY_WHEN_CLOSING = 50293,IDH_CLIENTAUTH_IMPORT = 50294,IDH_CLIENTAUTH_EXPORT = 50295,IDH_USEHTTP11_THRU_PROXY = 50296,IDH_USEHTTP11 = 50297,IDH_ALWAYS_EXPAND_ALT_TEXT = 50298,IDH_MOVE_SYSTEM_CARET = 50299,IDH_CHANNEL_ON_WITHOUT_ACT_DTP = 50300,IDH_ENABLE_JAVA_CONSOLE = 50301,IDH_MATCH_DIACRITIC = 50401,IDH_MATCH_KASHIDA = 50402,IDH_MATCH_ALEF_HAMZA = 50403,IDH_SUBPROPS_SCHEDTAB_CUSTOM_SCHEDULE = 50412,IDH_SUBPROPS_SCHEDTAB_MANUAL_SCHEDULE = 50414,IDH_SUBPROPS_SCHEDTAB_SCHEDDESC = 50415,IDH_SUBPROPS_SCHED_DONTUPDATE = 50417,IDH_SUBPROPS_RECTAB_ADVANCED = 50420,IDH_SUBPROPS_RECTAB_EMAIL_NOTIFICATION = 50421,IDH_SUBPROPS_RECTAB_MAILOPTS_EMAIL_ADDRESS = 50423,IDH_SUBPROPS_RECTAB_MAILOPTS_EMAIL_SERVER = 50424,IDH_SUBPROPS_RECTAB_CHANNEL_LOGIN = 50425,IDH_SUBPROPS_RECTAB_LOGINOPTS_USER_ID = 50426,IDH_SUBPROPS_RECTAB_LOGINOPTS_PASSWORD = 50427,IDH_SUBPROPS_RECTAB_ADVOPTS_DOWNLOAD_PAGES_DEEP = 50428,IDH_SUBPROPS_RECTAB_ADVOPTS_FOLLOW_LINKS = 50429,IDH_SUBPROPS_RECTAB_ADVOPTS_DOWNLOAD_IMAGES = 50430,IDH_SUBPROPS_RECTAB_ADVOPTS_DOWNLOAD_SOUND = 50431,IDH_SUBPROPS_RECTAB_ADVOPTS_DOWNLOAD_ACTIVEX = 50432,IDH_SUBPROPS_RECTAB_ADVOPTS_MAX_DOWNLOAD = 50433,IDH_CONNECTION_TAB_CONNECTOID_LIST = 50434,IDH_CONNECTION_TAB_REMOVE_CONNECTOID = 50435,IDH_BYPASS_AUTOCFG = 50436,IDH_DISCONNECT_ON_IEEXIT = 50437,IDH_USE_THIS_CNX_FOR_INTRANETS = 50438,IDH_USETHIS_CNX_4_INTERNET = 50439,IDH_FORTEZZA_ALLOW = 50440,IDH_EDIT_OFFLINE_SCHED = 50441,IDH_MAKE_AVAIL_OFFLINE = 50442,IDH_NEWSCHED_EVERY_AT_TIME = 50443,IDH_NEWSCHED_NAME = 50444,IDH_NEW_OFFLINE_SCHED = 50445,IDH_REMOVE_OFFLINE_SCHED = 50446,IDH_CHANNEL_DOWNLOAD_ALL = 50447,IDH_CHANNEL_DOWNLOAD_COVER_N_TOC = 50448,IDH_SUBPROPS_SUBTAB_SUBSCRIBED_NAME = 50449,IDH_SUBPROPS_SUBTAB_SUBSCRIBED_URL = 50450,IDH_WEBDOC_HOTKEY = 50451,IDH_WEBDOC_VISITS = 50452,IDH_SUBPROPS_SUBTAB_LAST = 50453,IDH_SUBPROPS_DLSIZE = 50454,IDH_SUBPROPS_SUBTAB_RESULT = 50455,IDH_JIT_SIZE = 50457,IDH_JIT_DOWNLOAD_TIME = 50458,IDH_JIT_NEVER_DOWNLOAD_THESE_COMPONENTS = 50459,IDH_JIT_DOWNLOAD_BUTTON = 50461,IDH_JIT_CANCEL_BUTTON = 50462,IDH_JIT_VRML = 50463,IDH_JIT_JAVAVMJIT = 50464,IDH_JIT_IELPKJA = 50465,IDH_JIT_IELPKKO = 50466,IDH_JIT_IELPKPE = 50467,IDH_JIT_IELPKZHT = 50468,IDH_JIT_IELPKZHC = 50469,IDH_JIT_IELPKTH = 50470,IDH_JIT_IELPKIW = 50471,IDH_JIT_IELPKVI = 50472,IDH_JIT_IELPKAR = 50473,IDH_JIT_IELPKAD = 50474,IDH_JIT_MEDIAPLAYER = 50475,IDH_JIT_MEDIAFILTER = 50476,IDH_JIT_ACTIVEPAYMENT = 50477,IDH_JIT_AOLSUPP = 50478,IDH_JIT_MOBILEPK = 50479,IDH_JIT_ICW = 50480,IDH_JIT_USP10 = 50481,IDH_ORGFAVS_UP = 50482,IDH_ORGFAVS_DOWN = 50483,IDH_ORGFAVS_NEW_FOLDER = 50484,IDH_ORGFAVS_SORT = 50485,IDH_ORGFAVS_SYNCHRO = 50486,IDH_ORGFAVS_IMPORT = 50487,IDH_ORGFAVS_EXPORT = 50488,IDH_ORGFAVS_PROPERTIES = 50489,IDH_ORGFAVS_LIST = 50490,IDH_SAVEAS_TYPE = 50493,IDH_CHAR_SET_SAVE_AS = 50494,IDH_AUTH_SAVE_PASSWORD = 50495,IDH_AUTH_REALM = 50496,IDH_AUTH_DOMAIN = 50497,IDH_AUTH_SERVER_FIREWALL = 50498,IDH_CPL_SEC_SETTINGS_CURRENT_ADMINAPPROVED = 50499,IDH_SUBPROPS_RECTAB_ADVOPTS_ONLY_HTML_LINKS = 50500,IDH_ADV_NOTIFY_DWNLD_COMPLETE = 50501,IDH_ADV_DISABLE_JIT = 50502,IDH_ADV_DISABLE_CZECH_4NEWER_IE = 50503,IDH_JIT_DIRECTANIMATION = 50504,IDH_JIT_DIRECTOR = 50505,IDH_JIT_HELPCONT = 50506,IDH_JIT_MSN_AUTH = 50507,IDH_JIT_TRIDATA = 50508,IDH_JIT_EXTRAPACK = 50509,IDH_JIT_OK_BUTTON = 50510,IDH_TLS_PROTOCOL = 50511,IDH_COMBO_UILANG = 50512,IDH_LANG_ADDSPK = 50513,IDH_LANG_UI_PREF = 50514,IDH_SEC_LVL_SLIDER = 50515,IDH_SEC_ZONE_LIST = 50516,IDH_OPTS_PROG_AUTOSUGGEST_BUT = 50517,IDH_INTELLIFORM = 50524,IDH_CLEAR_INTELLIFORM = 50525,IDH_OPTS_PROG_WALLET_BUT = 50518,IDH_PROX_SERV_AUTO = 50519,IDH_PROX_SERV_NONE = 50520,IDH_PROX_SETTINGS_ADV = 50521,IDH_DIAL_PROP_ADV = 50522,IDH_DIAL_DEFAULT = 50523,IDH_ADV_ENABLE_SCRIPTERROR_NOTIFICATION = 50526,IDH_ADV_ENABLE_SYNC_OF_OFFLINEITEMS_PER_SCHED = 50527,IDH_ADV_CLOSE_UNUSED_FOLDERS = 50528,IDH_AUTODISC_DET_ONCE = 50529,IDH_AUTODISC_DET_DISABLE = 50530,IDH_AUTODISC_DET_AFTER_NET_CHG = 50531,IDH_AUTODISC_DET_FOR_ANY_SETTINGS_CHGS = 50532,IDH_WEB_FOLDERS_CKBOX = 50533,IDH_HTML_EDITOR = 50534,IDH_SENDURLS_AS_UTF8 = 50535,IDH_SHOW_GO_IN_ADDRESSBAR = 50536,IDH_SHOW_FRIENDLY_HTTP_ERROR_MESSAGES = 50537,IDH_INLINE_AUTOCOMP_WEB_ADDRESSES = 50538,IDH_INLINE_AUTOCOMP_PATHS_N_SHARES = 50539,IDH_INTELLIFORM_PW = 50540,IDH_CLEAR_INTELLIFORM_PW = 50541,IDH_CONNECT_TAB_PERFORM_SECUR_CHECKB4_DIALING = 50542,IDH_ADD_COMP_RADIO = 50543,IDH_REPAIR_CURRENT_INSTALLATION = 50544,IDH_RESTORE_PREVIOUS_IE = 50545,IDH_MAINT_ADV_BUT = 50546,IDH_RESTORE_COMPONENT_LIST = 50547,IDH_DELETE_BACKUP = 50548,IDH_REMOVE_IE5_SETUP_FILES = 50549,IDH_CHK_SITE_CERT_REVOC = 50550,IDH_BROWSEUI_TB_TEXTOPTNS = 50551,IDH_BROWSEUI_TB_ICONOPTNS = 50552,IDH_JIT_FLASH = 50553,IDH_JIT_WEBFLDRS = 50554,IDH_JIT_MESSNGR = 50555,IDH_JIT_VBSCRIPT = 50556,IDH_JIT_VML = 50557,IDH_JIT_WAB = 50558,IDH_SHOW_PLACEHOLDERS = 50559,IDH_WEBFTP_ON = 50560,IDH_CNX_CURRENT_DEFAULT_LBL_N_DISP = 50561,IDH_INTELLIFORM_PW_PROMPT = 50562,IDH_INTL_DEFAULT_OE = 50563,IDH_CHAR_SET_OE = 50564,IDH_INTL_FONT_PROP_OE = 50565,IDH_INTL_FONT_FIXED_OE = 50566,IDH_FONT_MIME_OE = 50567,IDH_NEVERDIAL = 50568,IDH_DIALIF_NETCNX_GONE = 50569,IDH_ADDBAR_SRCH_GOTOBEST = 50570,IDH_ADDBAR_SRCH_RESULTS_ONLY = 50571,IDH_ADDBAR_DONT_SRCH = 50572,IDH_ADDBAR_DISP_RESULTS_WHERE = 50573,IDH_RESET_WEBSTGS_BUTTON = 50574,IDH_MORESRCH_AVAIL_PROVIDERS = 50575,IDH_MORESRCH_PREFERREDPROVIDERS = 50576,IDH_MORESRCH_ADD_PROVID = 50577,IDH_MORESRCH_REMOVE_PROVID = 50578,IDH_MORESRCH_PREFRD_MOVEUP = 50579,IDH_MORESRCH_PREFRD_MOVEDN = 50580,IDH_MORESRCH_RESET = 50581,IDH_REUSE_WINDOWS_FOR_SHORTCUTS = 50582,IDH_ENABLE_PERSONALIZED_FAVORITES_MENU = 50583,IDH_SUBPROPS_RECTAB_LOGINOPTS_PASSWORD_CONFIRM = 50584,IDH_SUBPROPS_NEW_SCHEDULE_AUTOCONNECT = 50585,IDH_CONNECTION_SHARING = 50586,IDH_RADIO_TOOLBAR_OPTION = 50587,IDH_PASSIVE_FTP = 50588,IDH_PRIV_COOKIE_THIRD_PARTY = 50590,IDH_DEL_COOKIE_THIRD_PARTY = 50591,IDH_COOKIE_THIRD_PARTY = 50593,IDH_COOKIE_FIRST_PARTY = 50594,};
enum MACRO_IDM {IDM_SHAREDNEW = 10,IDM_SHAREDNEWDEFAULT = 11,};
enum MACRO_IDO {IDO_SHGIOI_SHARE = 0xFFFFFFF,IDO_SHGIOI_LINK = 0xFFFFFFE,IDO_SHGIOI_SLOWFILE = 0xFFFFFFFD,};
enum MACRO_IDS {IDS_SHNEW = 1,IDS_SHEDIT = 2,IDS_SHTOOLS = 3,IDS_SHVIEW = 4,IDS_SHFILE = 5,IDS_SHGO = 6,IDS_SHFAVORITES = 7,IDS_SHOPEN = 8,};
enum MACRO_IE4 {IE4_RESTORE = 0x1,IE4_BACKNEW = 0x2,IE4_NODELETENEW = 0x4,IE4_NOMESSAGES = 0x8,IE4_NOPROGRESS = 0x10,IE4_NOENUMKEY = 0x20,IE4_NO_CRC_MAPPING = 0x40,IE4_REGSECTION = 0x80,IE4_FRDOALL = 0x100,IE4_UPDREFCNT = 0x200,IE4_USEREFCNT = 0x400,IE4_EXTRAINCREFCNT = 0x800,IE4_REMOVREGBKDATA = 0x1000,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_LOOPBACK = 0x4,IFF_POINTTOPOINT = 0x8,IFF_MULTICAST = 0x10,};
enum MACRO_IGP {IGP_GETIMEVERSION = 4294967292,IGP_PROPERTY = 4,IGP_CONVERSION = 8,IGP_SENTENCE = 12,IGP_UI = 16,IGP_SETCOMPSTR = 20,IGP_SELECT = 24,IGP_PRIVATEDATASIZE = 28,IGP_LAST = 28,};
enum MACRO_IIC {IIC_CURRENT_IDENTITY_CHANGED = 0x1,IIC_IDENTITY_CHANGED = 0x2,IIC_IDENTITY_DELETED = 0x4,IIC_IDENTITY_ADDED = 0x8,};
enum MACRO_ILC {ILC_MASK = 0x1,ILC_COLOR = 0x0,ILC_COLORDDB = 0xFE,ILC_PALETTE = 0x800,};
enum MACRO_ILD {ILD_NORMAL = 0x0,ILD_TRANSPARENT = 0x1,ILD_MASK = 0x10,ILD_IMAGE = 0x20,ILD_ROP = 0x40,ILD_BLEND25 = 0x2,ILD_BLEND50 = 0x4,ILD_OVERLAYMASK = 0xF00,ILD_SELECTED = 0x4,ILD_FOCUS = 0x2,ILD_BLEND = 0x4,};
enum MACRO_IMC {IMC_GETCANDIDATEPOS = 0x7,IMC_SETCANDIDATEPOS = 0x8,IMC_GETCOMPOSITIONFONT = 0x9,IMC_SETCOMPOSITIONFONT = 0xA,IMC_GETCOMPOSITIONWINDOW = 0xB,IMC_SETCOMPOSITIONWINDOW = 0xC,IMC_GETSTATUSWINDOWPOS = 0xF,IMC_SETSTATUSWINDOWPOS = 0x10,IMC_CLOSESTATUSWINDOW = 0x21,IMC_OPENSTATUSWINDOW = 0x22,};
enum MACRO_IME {IME_CHOTKEY_FIRST = 0x10,IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10,IME_CHOTKEY_SHAPE_TOGGLE = 0x11,IME_CHOTKEY_SYMBOL_TOGGLE = 0x12,IME_CHOTKEY_LAST = 0x2F,IME_JHOTKEY_FIRST = 0x30,IME_JHOTKEY_CLOSE_OPEN = 0x30,IME_JHOTKEY_LAST = 0x4F,IME_KHOTKEY_FIRST = 0x50,IME_KHOTKEY_SHAPE_TOGGLE = 0x50,IME_KHOTKEY_HANJACONVERT = 0x51,IME_KHOTKEY_ENGLISH = 0x52,IME_KHOTKEY_LAST = 0x6F,IME_THOTKEY_FIRST = 0x70,IME_THOTKEY_IME_NONIME_TOGGLE = 0x70,IME_THOTKEY_SHAPE_TOGGLE = 0x71,IME_THOTKEY_SYMBOL_TOGGLE = 0x72,IME_THOTKEY_LAST = 0x8F,IME_HOTKEY_DSWITCH_FIRST = 0x100,IME_HOTKEY_DSWITCH_LAST = 0x11F,IME_HOTKEY_PRIVATE_FIRST = 0x200,IME_ITHOTKEY_RESEND_RESULTSTR = 0x200,IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201,IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202,IME_HOTKEY_PRIVATE_LAST = 0x21F,};
enum MACRO_IMM {IMM_ERROR_NODATA = -1,IMM_ERROR_GENERAL = -2,};
enum MACRO_IMN {IMN_CLOSESTATUSWINDOW = 0x1,IMN_OPENSTATUSWINDOW = 0x2,IMN_CHANGECANDIDATE = 0x3,IMN_CLOSECANDIDATE = 0x4,IMN_OPENCANDIDATE = 0x5,IMN_SETCONVERSIONMODE = 0x6,IMN_SETSENTENCEMODE = 0x7,IMN_SETOPENSTATUS = 0x8,IMN_SETCANDIDATEPOS = 0x9,IMN_SETCOMPOSITIONFONT = 0xA,IMN_SETCOMPOSITIONWINDOW = 0xB,IMN_SETSTATUSWINDOWPOS = 0xC,IMN_GUIDELINE = 0xD,IMN_PRIVATE = 0xE,};
enum MACRO_IMR {IMR_COMPOSITIONWINDOW = 0x1,IMR_CANDIDATEWINDOW = 0x2,IMR_COMPOSITIONFONT = 0x3,IMR_RECONVERTSTRING = 0x4,IMR_CONFIRMRECONVERTSTRING = 0x5,IMR_QUERYCHARPOSITION = 0x6,IMR_DOCUMENTFEED = 0x7,IMR_RESERVED0x1000 = 0x1000,};
enum MACRO_IMS {IMS_DESTROYWINDOW = 0x1,IMS_IME31COMPATIBLE = 0x2,IMS_SETOPENSTATUS = 0x3,IMS_SETACTIVECONTEXT = 0x4,IMS_CHANGE_SHOWSTAT = 0x5,IMS_WINDOWPOS = 0x6,IMS_SENDIMEMSG = 0x7,IMS_SENDIMEMSGEX = 0x8,IMS_SETCANDIDATEPOS = 0x9,IMS_SETCOMPOSITIONFONT = 0xA,IMS_SETCOMPOSITIONWINDOW = 0xB,IMS_CHECKENABLE = 0xC,IMS_CONFIGUREIME = 0xD,IMS_CONTROLIMEMSG = 0xE,IMS_SETOPENCLOSE = 0xF,IMS_ISACTIVATED = 0x10,IMS_UNLOADTHREADLAYOUT = 0x11,IMS_LCHGREQUEST = 0x12,IMS_SETSOFTKBDONOFF = 0x13,IMS_GETCONVERSIONMODE = 0x14,IMS_IMEHELP = 0x15,IMS_IMENT35SENDAPPMSG = 0x16,IMS_ACTIVATECONTEXT = 0x17,IMS_DEACTIVATECONTEXT = 0x18,IMS_ACTIVATETHREADLAYOUT = 0x19,IMS_CLOSEPROPERTYWINDOW = 0x1A,IMS_OPENPROPERTYWINDOW = 0x1B,IMS_GETIMEMENU = 0x1C,IMS_ENDIMEMENU = 0x1D,IMS_SETCONVERSIONSTATUS = 0x1E,};
enum MACRO_INI {INI_INTL = 1,};
enum MACRO_INT {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_IOC {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,};
enum MACRO_IP6 {IP6_STATS = 36,UDP6_STATS = 37,TCP6_STATS = 38,};
enum MACRO_IRF {IRF_ASYNC = 1,IRF_SYNC = 4,IRF_USE_CONTEXT = 8,IRF_NO_WAIT = 8,};
enum MACRO_IRP {IRP_MJ_CREATE = 0x0,IRP_MJ_CLOSE = 0x1,IRP_MJ_READ = 0x2,IRP_MJ_WRITE = 0x3,IRP_MJ_FLUSH_BUFFERS = 0x4,IRP_MJ_DEVICE_CONTROL = 0x5,IRP_MJ_INTERNAL_DEVICE_CONTROL = 0x6,IRP_MJ_SHUTDOWN = 0x7,IRP_MJ_CLEANUP = 0x8,IRP_MJ_POWER = 0x9,IRP_MJ_DEVICE_CHANGE = 0xA,IRP_MJ_PNP = 0xB,IRP_MJ_PNP_POWER = 0xB,IRP_MJ_MAXIMUM_FUNCTION = 0xC,IRP_MN_START_DEVICE = 0x0,IRP_MN_QUERY_REMOVE_DEVICE = 0x1,IRP_MN_REMOVE_DEVICE = 0x2,IRP_MN_CANCEL_REMOVE_DEVICE = 0x3,IRP_MN_STOP_DEVICE = 0x4,IRP_MN_QUERY_STOP_DEVICE = 0x5,IRP_MN_CANCEL_STOP_DEVICE = 0x6,IRP_MN_QUERY_DEVICE_RELATIONS = 0x7,IRP_MN_QUERY_INTERFACE = 0x8,IRP_MN_QUERY_CAPABILITIES = 0x9,IRP_MN_QUERY_RESOURCES = 0xA,IRP_MN_QUERY_RESOURCE_REQUIREMENTS = 0xB,IRP_MN_SET_RESOURCE_REQUIREMENTS = 0xC,IRP_MN_ADJUST_RESOURCES = 0xD,IRP_MN_SET_DEVICE_RESOURCES = 0xE,IRP_MN_READ_CONFIG = 0xF,IRP_MN_WRITE_CONFIG = 0x10,IRP_MN_EJECT = 0x11,IRP_MN_SET_LOCK = 0x12,IRP_MN_QUERY_ID = 0x13,IRP_MN_PNP_DEVICE_STATE = 0x14,IRP_MN_WAIT_WAKE = 0x15,IRP_MN_POWER_SEQUENCE = 0x16,IRP_MN_SET_POWER = 0x17,IRP_MN_QUERY_POWER = 0x18,IRP_NOCACHE = 0x1,IRP_PAGING_IO = 0x2,IRP_MOUNT_COMPLETION = 0x2,IRP_SYNCHRONOUS_API = 0x4,IRP_ASSOCIATED_IRP = 0x8,IRP_BUFFERED_IO = 0x10,IRP_DEALLOCATE_BUFFER = 0x20,IRP_INPUT_OPERATION = 0x40,IRP_SYNCHRONOUS_PAGING_IO = 0x40,IRP_CREATE_OPERATION = 0x80,IRP_READ_OPERATION = 0x100,IRP_WRITE_OPERATION = 0x200,IRP_CLOSE_OPERATION = 0x400,IRP_DEFER_IO_COMPLETION = 0x800,IRP_OB_QUERY_NAME = 0x1000,IRP_HOLD_DEVICE_QUEUE = 0x2000,IRP_QUOTA_CHARGED = 0x1,IRP_ALLOCATED_MUST_SUCCEED = 0x2,IRP_ALLOCATED_FIXED_SIZE = 0x4,};
enum MACRO_IRQ {IRQ_UNSPECIFIED = 0xFFFFFFFF,};
enum MACRO_ISA {ISA_PNP_RESOURCE_FLAG_ACTIVE = 0x1,};
enum MACRO_ISC {ISC_SHOWUICANDIDATEWINDOW = 0x1,ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000,ISC_SHOWUIGUIDELINE = 0x40000000,ISC_SHOWUIALLCANDIDATEWINDOW = 0xF,ISC_SHOWUIALL = 0xC000000F,};
enum MACRO_ISF {ISF_SMTP_USEIPFORHELO = 0x1,ISF_ALWAYSPROMPTFORPASSWORD = 0x2,ISF_SSLONSAMEPORT = 0x4,ISF_QUERYDSNSUPPORT = 0x8,ISF_QUERYAUTHSUPPORT = 0x10,};
enum MACRO_ISO {ISO_FORCE_DISCONNECTED = 0x1,};
enum MACRO_ITT {ITT_SIGNING = 0x1,ITT_ENCRYPTION = 0x2,};
enum MACRO_IXP {IXP_E_LOAD_SICILY_FAILED = 0x800CCC00,IXP_E_INVALID_CERT_CN = 0x800CCC01,IXP_E_INVALID_CERT_DATE = 0x800CCC02,IXP_E_ALREADY_CONNECTED = 0x800CCC03,IXP_E_CONN = 0x800CCC04,IXP_E_NOT_CONNECTED = 0x800CCC05,IXP_E_CONN_SEND = 0x800CCC06,IXP_E_WOULD_BLOCK = 0x800CCC07,IXP_E_INVALID_STATE = 0x800CCC08,IXP_E_CONN_RECV = 0x800CCC09,IXP_E_INCOMPLETE = 0x800CCC0A,IXP_E_BUSY = 0x800CCC0B,IXP_E_NOT_INIT = 0x800CCC0C,IXP_E_CANT_FIND_HOST = 0x800CCC0D,IXP_E_FAILED_TO_CONNECT = 0x800CCC0E,IXP_E_CONNECTION_DROPPED = 0x800CCC0F,IXP_E_INVALID_ADDRESS = 0x800CCC10,IXP_E_INVALID_ADDRESS_LIST = 0x800CCC11,IXP_E_SOCKET_READ_ERROR = 0x800CCC12,IXP_E_SOCKET_WRITE_ERROR = 0x800CCC13,IXP_E_SOCKET_INIT_ERROR = 0x800CCC14,IXP_E_SOCKET_CONNECT_ERROR = 0x800CCC15,IXP_E_INVALID_ACCOUNT = 0x800CCC16,IXP_E_USER_CANCEL = 0x800CCC17,IXP_E_SICILY_LOGON_FAILED = 0x800CCC18,IXP_E_TIMEOUT = 0x800CCC19,IXP_E_SECURE_CONNECT_FAILED = 0x800CCC1A,IXP_E_WINSOCK_WSASYSNOTREADY = 0x800CCC40,IXP_E_WINSOCK_WSAVERNOTSUPPORTED = 0x800CCC41,IXP_E_WINSOCK_WSAEPROCLIM = 0x800CCC42,IXP_E_WINSOCK_WSAEFAULT = 0x800CCC43,IXP_E_WINSOCK_FAILED_WSASTARTUP = 0x800CCC44,IXP_E_WINSOCK_WSAEINPROGRESS = 0x800CCC45,IXP_E_SMTP_RESPONSE_ERROR = 0x800CCC60,IXP_E_SMTP_UNKNOWN_RESPONSE_CODE = 0x800CCC61,IXP_E_SMTP_500_SYNTAX_ERROR = 0x800CCC62,IXP_E_SMTP_501_PARAM_SYNTAX = 0x800CCC63,IXP_E_SMTP_502_COMMAND_NOTIMPL = 0x800CCC64,IXP_E_SMTP_503_COMMAND_SEQ = 0x800CCC65,IXP_E_SMTP_504_COMMAND_PARAM_NOTIMPL = 0x800CCC66,IXP_E_SMTP_421_NOT_AVAILABLE = 0x800CCC67,IXP_E_SMTP_450_MAILBOX_BUSY = 0x800CCC68,IXP_E_SMTP_550_MAILBOX_NOT_FOUND = 0x800CCC69,IXP_E_SMTP_451_ERROR_PROCESSING = 0x800CCC6A,IXP_E_SMTP_551_USER_NOT_LOCAL = 0x800CCC6B,IXP_E_SMTP_452_NO_SYSTEM_STORAGE = 0x800CCC6C,IXP_E_SMTP_552_STORAGE_OVERFLOW = 0x800CCC6D,IXP_E_SMTP_553_MAILBOX_NAME_SYNTAX = 0x800CCC6E,IXP_E_SMTP_554_TRANSACT_FAILED = 0x800CCC6F,IXP_S_SMTP_211_SYSTEM_STATUS = 0xCCC70,IXP_S_SMTP_214_HELP_MESSAGE = 0xCCC71,IXP_S_SMTP_220_READY = 0xCCC72,IXP_S_SMTP_221_CLOSING = 0xCCC73,IXP_S_SMTP_250_MAIL_ACTION_OKAY = 0xCCC74,IXP_S_SMTP_251_FORWARDING_MAIL = 0xCCC75,IXP_S_SMTP_354_START_MAIL_INPUT = 0xCCC76,IXP_S_SMTP_CONTINUE = 0xCCC77,IXP_S_SMTP_334_AUTH_READY_RESPONSE = 0xCCC78,IXP_S_SMTP_245_AUTH_SUCCESS = 0xCCC79,IXP_E_SMTP_REJECTED_SENDER = 0x800CCC78,IXP_E_SMTP_REJECTED_RECIPIENTS = 0x800CCC79,IXP_E_SMTP_NO_SENDER = 0x800CCC7A,IXP_E_SMTP_NO_RECIPIENTS = 0x800CCC7B,IXP_E_SMTP_530_STARTTLS_REQUIRED = 0x800CCC7C,IXP_E_SMTP_NO_STARTTLS_SUPPORT = 0x800CCC7D,IXP_S_SMTP_NO_DSN_SUPPORT = 0x800CCC7E,IXP_E_SMTP_454_STARTTLS_FAILED = 0x800CCC7F,IXP_E_POP3_RESPONSE_ERROR = 0x800CCC90,IXP_E_POP3_INVALID_USER_NAME = 0x800CCC91,IXP_E_POP3_INVALID_PASSWORD = 0x800CCC92,IXP_E_POP3_PARSE_FAILURE = 0x800CCC93,IXP_E_POP3_NEED_STAT = 0x800CCC94,IXP_E_POP3_NO_MESSAGES = 0x800CCC95,IXP_E_POP3_NO_MARKED_MESSAGES = 0x800CCC96,IXP_E_POP3_POPID_OUT_OF_RANGE = 0x800CCC97,IXP_E_NNTP_RESPONSE_ERROR = 0x800CCCA0,IXP_E_NNTP_NEWGROUPS_FAILED = 0x800CCCA1,IXP_E_NNTP_LIST_FAILED = 0x800CCCA2,IXP_E_NNTP_LISTGROUP_FAILED = 0x800CCCA3,IXP_E_NNTP_GROUP_FAILED = 0x800CCCA4,IXP_E_NNTP_GROUP_NOTFOUND = 0x800CCCA5,IXP_E_NNTP_ARTICLE_FAILED = 0x800CCCA6,IXP_E_NNTP_HEAD_FAILED = 0x800CCCA7,IXP_E_NNTP_BODY_FAILED = 0x800CCCA8,IXP_E_NNTP_POST_FAILED = 0x800CCCA9,IXP_E_NNTP_NEXT_FAILED = 0x800CCCAA,IXP_E_NNTP_DATE_FAILED = 0x800CCCAB,IXP_E_NNTP_HEADERS_FAILED = 0x800CCCAC,IXP_E_NNTP_XHDR_FAILED = 0x800CCCAD,IXP_E_NNTP_INVALID_USERPASS = 0x800CCCAE,IXP_NNTP_DATE_RESPONSE = 0x6F,IXP_NNTP_POST_ALLOWED = 0xC8,IXP_NNTP_POST_NOTALLOWED = 0xC9,IXP_NNTP_GROUP_SELECTED = 0xD3,IXP_NNTP_LIST_DATA_FOLLOWS = 0xD7,IXP_NNTP_ARTICLE_FOLLOWS = 0xDC,IXP_NNTP_HEAD_FOLLOWS = 0xDD,IXP_NNTP_BODY_FOLLOWS = 0xDE,IXP_NNTP_ARTICLE_RETRIEVED = 0xDF,IXP_NNTP_OVERVIEW_FOLLOWS = 0xE0,IXP_NNTP_NEWNEWSGROUPS_FOLLOWS = 0xE7,IXP_NNTP_ARTICLE_POSTED_OK = 0xF0,IXP_NNTP_AUTHORIZATION_ACCEPTED = 0xFA,IXP_NNTP_AUTH_OK = 0x119,IXP_NNTP_SEND_ARTICLE_TO_POST = 0x154,IXP_NNTP_CONTINUE_AUTHORIZATION = 0x15E,IXP_NNTP_PASSWORD_REQUIRED = 0x17D,IXP_NNTP_NO_SUCH_NEWSGROUP = 0x19B,IXP_NNTP_NO_NEXT_ARTICLE = 0x1A5,IXP_NNTP_NO_PREV_ARTICLE = 0x1A6,IXP_NNTP_NO_SUCH_ARTICLE_NUM = 0x1A7,IXP_NNTP_NO_SUCH_ARTICLE_FOUND = 0x1AE,IXP_NNTP_POSTING_NOT_ALLOWED = 0x1B9,IXP_NNTP_PROTOCOLS_SUPPORTED = 0x1E5,IXP_S_RAS_NOT_NEEDED = 0xCCCC0,IXP_S_RAS_USING_CURRENT = 0xCCCC1,IXP_E_RAS_NOT_INSTALLED = 0x800CCCC2,IXP_E_RAS_PROCS_NOT_FOUND = 0x800CCCC3,IXP_E_RAS_ERROR = 0x800CCCC4,IXP_E_RAS_INVALID_CONNECTOID = 0x800CCCC5,IXP_E_RAS_GET_DIAL_PARAMS = 0x800CCCC6,IXP_S_IMAP_UNRECOGNIZED_RESP = 0xCCCD0,IXP_S_IMAP_VERBATIM_MBOX = 0xCCCE1,IXP_E_IMAP_LOGINFAILURE = 0x800CCCD1,IXP_E_IMAP_TAGGED_NO_RESPONSE = 0x800CCCD2,IXP_E_IMAP_BAD_RESPONSE = 0x800CCCD3,IXP_E_IMAP_SVR_SYNTAXERR = 0x800CCCD4,IXP_E_IMAP_NOTIMAPSERVER = 0x800CCCD5,IXP_E_IMAP_BUFFER_OVERFLOW = 0x800CCCD6,IXP_E_IMAP_RECVR_ERROR = 0x800CCCD7,IXP_E_IMAP_INCOMPLETE_LINE = 0x800CCCD8,IXP_E_IMAP_CONNECTION_REFUSED = 0x800CCCD9,IXP_E_IMAP_UNRECOGNIZED_RESP = 0x800CCCDA,IXP_E_IMAP_CHANGEDUID = 0x800CCCDB,IXP_E_IMAP_UIDORDER = 0x800CCCDC,IXP_E_IMAP_UNSOLICITED_BYE = 0x800CCCDD,IXP_E_IMAP_IMPROPER_SVRSTATE = 0x800CCCDE,IXP_E_IMAP_AUTH_NOT_POSSIBLE = 0x800CCCDF,IXP_E_IMAP_OUT_OF_AUTH_METHODS = 0x800CCCE0,IXP_E_HTTP_USE_PROXY = 0x800CCC30,IXP_E_HTTP_BAD_REQUEST = 0x800CCC31,IXP_E_HTTP_UNAUTHORIZED = 0x800CCC32,IXP_E_HTTP_FORBIDDEN = 0x800CCC33,IXP_E_HTTP_NOT_FOUND = 0x800CCC34,IXP_E_HTTP_METHOD_NOT_ALLOW = 0x800CCC35,IXP_E_HTTP_NOT_ACCEPTABLE = 0x800CCC36,IXP_E_HTTP_PROXY_AUTH_REQ = 0x800CCC37,IXP_E_HTTP_REQUEST_TIMEOUT = 0x800CCC38,IXP_E_HTTP_CONFLICT = 0x800CCC39,IXP_E_HTTP_GONE = 0x800CCC3A,IXP_E_HTTP_LENGTH_REQUIRED = 0x800CCC3B,IXP_E_HTTP_PRECOND_FAILED = 0x800CCC3C,IXP_E_HTTP_INTERNAL_ERROR = 0x800CCC3D,IXP_E_HTTP_NOT_IMPLEMENTED = 0x800CCC3E,IXP_E_HTTP_BAD_GATEWAY = 0x800CCC3F,IXP_E_HTTP_SERVICE_UNAVAIL = 0x800CCCF0,IXP_E_HTTP_GATEWAY_TIMEOUT = 0x800CCCF1,IXP_E_HTTP_VERS_NOT_SUP = 0x800CCCF2,IXP_E_HTTP_INSUFFICIENT_STORAGE = 0x800CCCF3,IXP_E_HTTP_ROOT_PROP_NOT_FOUND = 0x800CCCF4,};
enum MACRO_JOB {JOB_OBJECT_ASSIGN_PROCESS = 0x1,JOB_OBJECT_SET_ATTRIBUTES = 0x2,JOB_OBJECT_QUERY = 0x4,JOB_OBJECT_TERMINATE = 0x8,JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 0x10,JOB_OBJECT_ALL_ACCESS = 0x1F001F,};
enum MACRO_KBD {KBD_AUTO_REPEAT_INITIAL_DELAY_DEFAULT = 500,KBD_AUTO_REPEAT_INITIAL_DELAY_MIN = 250,KBD_AUTO_REPEAT_INITIAL_DELAY_MAX = 1000,KBD_AUTO_REPEAT_KEYS_PER_SEC_DEFAULT = 20,KBD_AUTO_REPEAT_KEYS_PER_SEC_MIN = 2,KBD_AUTO_REPEAT_KEYS_PER_SEC_MAX = 30,};
enum MACRO_KEY {KEY_QUERY_VALUE = 0x1,KEY_SET_VALUE = 0x2,KEY_CREATE_SUB_KEY = 0x4,KEY_ENUMERATE_SUB_KEYS = 0x8,KEY_NOTIFY = 0x10,KEY_CREATE_LINK = 0x20,KEY_READ = 0x20019,KEY_WRITE = 0x20006,KEY_EXECUTE = 0x20019,KEY_ALL_ACCESS = 0xF003F,};
enum MACRO_LBN {LBN_ERRSPACE = -2,LBN_SELCHANGE = 1,LBN_DBLCLK = 2,LBN_SELCANCEL = 3,LBN_SETFOCUS = 4,LBN_KILLFOCUS = 5,};
enum MACRO_LBS {LBS_NOTIFY = 0x1,LBS_SORT = 0x2,LBS_NOREDRAW = 0x4,LBS_MULTIPLESEL = 0x8,LBS_HASSTRINGS = 0x40,LBS_USETABSTOPS = 0x80,LBS_NOINTEGRALHEIGHT = 0x100,LBS_MULTICOLUMN = 0x200,LBS_WANTKEYBOARDINPUT = 0x400,LBS_EXTENDEDSEL = 0x800,LBS_DISABLENOSCROLL = 0x1000,LBS_NODATA = 0x2000,LBS_NOSEL = 0x4000,LBS_STANDARD = 0xA00003,LBS_EX_CONSTSTRINGDATA = 0x2,};
enum MACRO_LEN {WSADESCRIPTION_LEN = 256,WSASYS_STATUS_LEN = 128,};
enum MACRO_LIM {LIM_SPELL = 0,LIM_NUMBERS = 2,};
enum MACRO_LIS {LIS_QUIET = 0x1,LIS_NOGRPCONV = 0x2,};
enum MACRO_LUP {LUP_DEEP = 0x1,LUP_CONTAINERS = 0x2,LUP_NOCONTAINERS = 0x4,LUP_NEAREST = 0x8,LUP_RETURN_NAME = 0x10,LUP_RETURN_TYPE = 0x20,LUP_RETURN_VERSION = 0x40,LUP_RETURN_COMMENT = 0x80,LUP_RETURN_ADDR = 0x100,LUP_RETURN_BLOB = 0x200,LUP_RETURN_ALIASES = 0x400,LUP_RETURN_QUERY_STRING = 0x800,LUP_RETURN_ALL = 0xFF0,LUP_RES_SERVICE = 0x8000,LUP_FLUSHCACHE = 0x1000,LUP_FLUSHPREVIOUS = 0x2000,};
enum MACRO_LVA {LVA_DEFAULT = 0x0,LVA_ALIGNLEFT = 0x1,LVA_ALIGNTOP = 0x2,LVA_SNAPTOGRID = 0x5,};
enum MACRO_LVM {LVM_GETITEM = 4101,LVM_SETITEM = 4102,LVM_INSERTITEM = 4103,};
enum MACRO_LVN {LVN_FIRST = -100,LVN_LAST = -199,};
enum MACRO_LVS {LVS_ICON = 0x0,LVS_REPORT = 0x1,LVS_SMALLICON = 0x2,LVS_LIST = 0x3,LVS_TYPEMASK = 0x3,LVS_SINGLESEL = 0x4,LVS_SHOWSELALWAYS = 0x8,LVS_SORTASCENDING = 0x10,LVS_SORTDESCENDING = 0x20,LVS_SHAREIMAGELISTS = 0x40,LVS_NOLABELWRAP = 0x80,LVS_AUTOARRANGE = 0x100,LVS_EDITLABELS = 0x200,LVS_OWNERDATA = 0x1000,LVS_NOSCROLL = 0x2000,LVS_TYPESTYLEMASK = 0xFC00,LVS_ALIGNTOP = 0x0,LVS_ALIGNLEFT = 0x800,LVS_ALIGNMASK = 0xC00,LVS_OWNERDRAWFIXED = 0x400,LVS_NOCOLUMNHEADER = 0x4000,LVS_NOSORTHEADER = 0x8000,};
enum MACRO_MAC {MAC_ATTACH_ENCODING_MASK = 0x600000,MAC_ATTACH_ENCODING_BINHEX = 0x0,MAC_ATTACH_ENCODING_UUENCODE = 0x200000,MAC_ATTACH_ENCODING_APPLESINGLE = 0x400000,MAC_ATTACH_ENCODING_APPLEDOUBLE = 0x600000,};
enum MACRO_MAP {MAP_FOLDCZONE = 0x10,MAP_PRECOMPOSED = 0x20,MAP_COMPOSITE = 0x40,MAP_FOLDDIGITS = 0x80,MAP_EXPAND_LIGATURES = 0x2000,};
enum MACRO_MAX {MAX_PATH = 260,};
enum MACRO_MCI {MCI_STRING_OFFSET = 512,MCI_VD_OFFSET = 1024,MCI_CD_OFFSET = 1088,MCI_WAVE_OFFSET = 1152,MCI_SEQ_OFFSET = 1216,};
enum MACRO_MCM {MCM_FIRST = 0x1000,MCM_GETCURSEL = 0x1001,MCM_SETCURSEL = 0x1002,MCM_GETMAXSELCOUNT = 0x1003,MCM_SETMAXSELCOUNT = 0x1004,MCM_GETSELRANGE = 0x1005,MCM_SETSELRANGE = 0x1006,MCM_GETMONTHRANGE = 0x1007,MCM_SETDAYSTATE = 0x1008,MCM_GETMINREQRECT = 0x1009,MCM_SETCOLOR = 0x100A,MCM_GETCOLOR = 0x100B,};
enum MACRO_MCN {MCN_FIRST = -750,MCN_LAST = -759,};
enum MACRO_MCS {MCS_DAYSTATE = 0x1,MCS_MULTISELECT = 0x2,MCS_WEEKNUMBERS = 0x4,MCS_SHOWNONE = 0x80,MCS_NOTODAYCIRCLE = 0x8,MCS_NOTODAY = 0x10,};
enum MACRO_MCW {MCW_EM = 524319,};
enum MACRO_MDB {MDB_NO_DIALOG = 0x1,MDB_WRITE = 0x4,MDB_TEMPORARY = 0x20,MDB_NO_MAIL = 0x80,};
enum MACRO_MDL {MDL_MAPPED_TO_SYSTEM_VA = 0x1,MDL_PAGES_LOCKED = 0x2,MDL_SOURCE_IS_NONPAGED_POOL = 0x4,MDL_ALLOCATED_FIXED_SIZE = 0x8,MDL_PARTIAL = 0x10,MDL_PARTIAL_HAS_BEEN_MAPPED = 0x20,MDL_IO_PAGE_READ = 0x40,MDL_WRITE_OPERATION = 0x80,MDL_PARENT_MAPPED_SYSTEM_VA = 0x100,MDL_LOCK_HELD = 0x200,MDL_SCATTER_GATHER_VA = 0x400,MDL_IO_SPACE = 0x800,MDL_NETWORK_HEADER = 0x1000,MDL_MAPPING_CAN_FAIL = 0x2000,MDL_ALLOCATED_MUST_SUCCEED = 0x4000,MDL_64_BIT_VA = 0x8000,};
enum MACRO_MEM {MEM_COMMIT = 0x1000,MEM_RESERVE = 0x2000,MEM_DECOMMIT = 0x4000,MEM_RELEASE = 0x8000,MEM_FREE = 0x10000,MEM_PRIVATE = 0x20000,MEM_MAPPED = 0x40000,MEM_RESET = 0x80000,MEM_TOP_DOWN = 0x100000,MEM_AUTO_COMMIT = 0x200000,MEM_4MB_PAGES = 0x80000000,};
enum MACRO_MFS {MFS_CHECKED = 8,MFS_HILITE = 128,MFS_ENABLED = 0,MFS_UNCHECKED = 0,MFS_UNHILITE = 0,};
enum MACRO_MFT {MFT_STRING = 0,MFT_MENUBARBREAK = 32,MFT_MENUBREAK = 64,MFT_OWNERDRAW = 256,MFT_RADIOCHECK = 512,MFT_SEPARATOR = 2048,};
enum MACRO_MIB {MIB_IF_TYPE_OTHER = 1,MIB_IF_TYPE_ETHERNET = 6,MIB_IF_TYPE_TOKENRING = 9,MIB_IF_TYPE_FDDI = 15,MIB_IF_TYPE_PPP = 23,MIB_IF_TYPE_LOOPBACK = 24,MIB_IF_TYPE_SLIP = 28,MIB_IF_ADMIN_STATUS_UP = 1,MIB_IF_ADMIN_STATUS_DOWN = 2,MIB_IF_ADMIN_STATUS_TESTING = 3,MIB_IF_OPER_STATUS_NON_OPERATIONAL = 0,MIB_IF_OPER_STATUS_UNREACHABLE = 1,MIB_IF_OPER_STATUS_DISCONNECTED = 2,MIB_IF_OPER_STATUS_CONNECTING = 3,MIB_IF_OPER_STATUS_CONNECTED = 4,MIB_IF_OPER_STATUS_OPERATIONAL = 5,};
enum MACRO_MIM {MIM_OPEN = 961,MIM_CLOSE = 962,MIM_DATA = 963,MIM_LONGDATA = 964,MIM_ERROR = 965,MIM_LONGERROR = 966,};
enum MACRO_MIN {MIN_IF_TYPE = 1,};
enum MACRO_MNC {MNC_IGNORE = 0,MNC_CLOSE = 1,MNC_EXECUTE = 2,MNC_SELECT = 3,};
enum MACRO_MOD {MOD_MIDIPORT = 1,MOD_SYNTH = 2,MOD_SQSYNTH = 3,MOD_FMSYNTH = 4,MOD_MAPPER = 5,};
enum MACRO_MOM {MOM_OPEN = 967,MOM_CLOSE = 968,MOM_DONE = 969,};
enum MACRO_MPF {MPF_ENVLP_STANDARD = 0,MPF_ENVLP_BEGIN_CURRENTVAL = 1,MPF_ENVLP_BEGIN_NEUTRALVAL = 2,MPF_PUNCHIN_REFTIME = 0,MPF_PUNCHIN_NOW = 1,MPF_PUNCHIN_STOPPED = 2,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_PARTIAL = 0x8000,MSG_INTERRUPT = 0x10,MSG_MAXIOVLEN = 0x10,};
enum MACRO_MSR {MSR_RESET_ALL = 0,MSR_PAUSE = 1,MSR_RUN = 2,MSR_CLEAR_ALL = 3,};
enum MACRO_MST {MST_NONE = 0x0,MST_THIS_SIGN = 0x1,MST_THIS_ENCRYPT = 0x2,MST_THIS_BLOBSIGN = 0x5,MST_CHILD_SIGN = 0x100,MST_CHILD_ENCRYPT = 0x200,MST_SUBMSG_SIGN = 0x1000,MST_SUBMSG_ENCRYPT = 0x2000,MST_THIS_MASK = 0xFF,MST_CHILD_MASK = 0xF00,MST_SUBMSG_MASK = 0xF000,MST_DESCENDENT_MASK = 0xFF00,MST_SIGN_MASK = 0x1101,MST_ENCRYPT_MASK = 0x2202,MST_BLOB_FLAG = 0x4,MST_TYPE_MASK = 0xFFFF,MST_RECEIPT_REQUEST = 0x10000,MST_CLASS_SMIME_V1 = 0x0,MST_CLASS_PGP = 0x1000000,MST_CLASS_MASK = 0xFF000000,};
enum MACRO_MSV {MSV_OK = 0x0,MSV_BADSIGNATURE = 0x1,MSV_UNVERIFIABLE = 0x2,MSV_UNKHASH = 0x4,MSV_MALFORMEDSIG = 0x80,MSV_SIGNATURE_MASK = 0xFF,MSV_EXPIRED_SIGNINGCERT = 0x100,MSV_SIGNING_MASK = 0xF00,MSV_CANTDECRYPT = 0x1000,MSV_ENC_FOR_EXPIREDCERT = 0x2000,MSV_ENCRYPT_MASK = 0xFF000,MSV_INVALID = 0x1000000,MSV_MSG_MASK = 0xF000000,};
enum MACRO_MUI {RT_MUI = 222,ID_MUI = 1,};
enum MACRO_MVI {MVI_FLAG = 12288,};
enum MACRO_NAV {NAV_CONTROLDRAWSFOCUSRECT = 0x1,NAV_CONTROLHANDLESNAVIGATION = 0x2,NAV_CONTROLREQUESTSWAITFORNAVIGATIONSTATUS = 0x4,NAV_STATUS_CANNAVIGATENOW = 0x1,};
enum MACRO_NDR {NDR_CHAR_REP_MASK = 0xF,NDR_INT_REP_MASK = 0xF0,NDR_FLOAT_REP_MASK = 0xFF00,NDR_LITTLE_ENDIAN = 0x10,NDR_BIG_ENDIAN = 0x0,NDR_IEEE_FLOAT = 0x0,NDR_VAX_FLOAT = 0x100,NDR_IBM_FLOAT = 0x300,NDR_ASCII_CHAR = 0x0,NDR_EBCDIC_CHAR = 0x1,NDR_LOCAL_DATA_REPRESENTATION = 0x10,NDR_LOCAL_ENDIAN = 0x10,};
enum MACRO_NET {NET_DFS_ENUM = 0x400038A4,NET_DFS_ENUMEX = 0x400038A5,};
enum MACRO_NIF {NIF_MESSAGE = 0x1,NIF_ICON = 0x2,NIF_TIP = 0x4,};
enum MACRO_NIM {NIM_ADD = 0x0,NIM_MODIFY = 0x1,NIM_DELETE = 0x2,};
enum MACRO_NLS {NLS_VALID_LOCALE_MASK = 0xFFFFF,};
enum MACRO_NMN {NMN_GETAPPREGKEY = 1101,NMN_NEWMENUDESTROY = 1102,NMN_INVOKECOMMAND = 1103,NMN_NEWBUTTONUPDATED = 1104,NMN_GETPROPERTYBAG = 1105,};
enum MACRO_NOT {NOT_A_DFS_PATH = 0x40003840,};
enum MACRO_NTE {NTE_OP_OK = 0,};
enum MACRO_NTM {NTM_REGULAR = 0x40,NTM_BOLD = 0x20,NTM_ITALIC = 0x1,};
enum MACRO_NUM {NUM_VFP_REGS = 32,NUM_EXTRA_CONTROL_REGS = 8,};
enum MACRO_OBJ {OBJ_PEN = 1,OBJ_BRUSH = 2,OBJ_DC = 3,OBJ_PAL = 5,OBJ_FONT = 6,OBJ_BITMAP = 7,OBJ_REGION = 8,OBJ_MEMDC = 10,OBJ_ENHMETADC = 12,OBJ_ENHMETAFILE = 13,};
enum MACRO_OCC {OCC_INVALID = 0xFFFFFFFF,};
enum MACRO_ODA {ODA_DRAWENTIRE = 0x1,ODA_SELECT = 0x2,ODA_FOCUS = 0x4,};
enum MACRO_ODS {ODS_SELECTED = 0x1,ODS_GRAYED = 0x2,ODS_DISABLED = 0x4,ODS_CHECKED = 0x8,ODS_FOCUS = 0x10,};
enum MACRO_ODT {ODT_MENU = 1,ODT_LISTBOX = 2,ODT_COMBOBOX = 3,ODT_BUTTON = 4,};
enum MACRO_OEM {OEM_CERTIFY_TRUST = 2,OEM_CERTIFY_RUN = 1,OEM_CERTIFY_FALSE = 0,};
enum MACRO_OFN {OFN_READONLY = 0x1,OFN_OVERWRITEPROMPT = 0x2,OFN_HIDEREADONLY = 0x4,OFN_NOCHANGEDIR = 0x8,OFN_SHOWHELP = 0x10,OFN_ENABLEHOOK = 0x20,OFN_ENABLETEMPLATE = 0x40,OFN_ENABLETEMPLATEHANDLE = 0x80,OFN_NOVALIDATE = 0x100,OFN_ALLOWMULTISELECT = 0x200,OFN_EXTENSIONDIFFERENT = 0x400,OFN_PATHMUSTEXIST = 0x800,OFN_FILEMUSTEXIST = 0x1000,OFN_CREATEPROMPT = 0x2000,OFN_SHAREAWARE = 0x4000,OFN_NOREADONLYRETURN = 0x8000,OFN_NOTESTFILECREATE = 0x10000,OFN_NONETWORKBUTTON = 0x20000,OFN_NOLONGNAMES = 0x40000,OFN_EXPLORER = 0x80000,OFN_NODEREFERENCELINKS = 0x100000,OFN_LONGNAMES = 0x200000,OFN_SHAREFALLTHROUGH = 0x2,OFN_SHARENOWARN = 0x1,OFN_SHAREWARN = 0x0,};
enum MACRO_OID {OID_GEN_SUPPORTED_LIST = 0x10101,OID_GEN_HARDWARE_STATUS = 0x10102,OID_GEN_MEDIA_SUPPORTED = 0x10103,OID_GEN_MEDIA_IN_USE = 0x10104,OID_GEN_MAXIMUM_LOOKAHEAD = 0x10105,OID_GEN_MAXIMUM_FRAME_SIZE = 0x10106,OID_GEN_LINK_SPEED = 0x10107,OID_GEN_TRANSMIT_BUFFER_SPACE = 0x10108,OID_GEN_RECEIVE_BUFFER_SPACE = 0x10109,OID_GEN_TRANSMIT_BLOCK_SIZE = 0x1010A,OID_GEN_RECEIVE_BLOCK_SIZE = 0x1010B,OID_GEN_VENDOR_ID = 0x1010C,OID_GEN_VENDOR_DESCRIPTION = 0x1010D,OID_GEN_CURRENT_PACKET_FILTER = 0x1010E,OID_GEN_CURRENT_LOOKAHEAD = 0x1010F,OID_GEN_DRIVER_VERSION = 0x10110,OID_GEN_MAXIMUM_TOTAL_SIZE = 0x10111,OID_GEN_PROTOCOL_OPTIONS = 0x10112,OID_GEN_MAC_OPTIONS = 0x10113,OID_GEN_MEDIA_CONNECT_STATUS = 0x10114,OID_GEN_MAXIMUM_SEND_PACKETS = 0x10115,OID_GEN_VENDOR_DRIVER_VERSION = 0x10116,OID_GEN_SUPPORTED_GUIDS = 0x10117,OID_GEN_NETWORK_LAYER_ADDRESSES = 0x10118,OID_GEN_TRANSPORT_HEADER_OFFSET = 0x10119,OID_GEN_MACHINE_NAME = 0x1021A,OID_GEN_RNDIS_CONFIG_PARAMETER = 0x1021B,OID_GEN_VLAN_ID = 0x1021C,OID_GEN_MEDIA_CAPABILITIES = 0x10201,OID_GEN_PHYSICAL_MEDIUM = 0x10202,OID_GEN_XMIT_OK = 0x20101,OID_GEN_RCV_OK = 0x20102,OID_GEN_XMIT_ERROR = 0x20103,OID_GEN_RCV_ERROR = 0x20104,OID_GEN_RCV_NO_BUFFER = 0x20105,OID_GEN_DIRECTED_BYTES_XMIT = 0x20201,OID_GEN_DIRECTED_FRAMES_XMIT = 0x20202,OID_GEN_MULTICAST_BYTES_XMIT = 0x20203,OID_GEN_MULTICAST_FRAMES_XMIT = 0x20204,OID_GEN_BROADCAST_BYTES_XMIT = 0x20205,OID_GEN_BROADCAST_FRAMES_XMIT = 0x20206,OID_GEN_DIRECTED_BYTES_RCV = 0x20207,OID_GEN_DIRECTED_FRAMES_RCV = 0x20208,OID_GEN_MULTICAST_BYTES_RCV = 0x20209,OID_GEN_MULTICAST_FRAMES_RCV = 0x2020A,OID_GEN_BROADCAST_BYTES_RCV = 0x2020B,OID_GEN_BROADCAST_FRAMES_RCV = 0x2020C,OID_GEN_RCV_CRC_ERROR = 0x2020D,OID_GEN_TRANSMIT_QUEUE_LENGTH = 0x2020E,OID_GEN_GET_TIME_CAPS = 0x2020F,OID_GEN_GET_NETCARD_TIME = 0x20210,OID_GEN_NETCARD_LOAD = 0x20211,OID_GEN_DEVICE_PROFILE = 0x20212,OID_GEN_INIT_TIME_MS = 0x20213,OID_GEN_RESET_COUNTS = 0x20214,OID_GEN_MEDIA_SENSE_COUNTS = 0x20215,OID_GEN_FRIENDLY_NAME = 0x20216,OID_GEN_MINIPORT_INFO = 0x20217,OID_GEN_RESET_VERIFY_PARAMETERS = 0x20218,OID_GEN_CO_SUPPORTED_LIST = 0x10101,OID_GEN_CO_HARDWARE_STATUS = 0x10102,OID_GEN_CO_MEDIA_SUPPORTED = 0x10103,OID_GEN_CO_MEDIA_IN_USE = 0x10104,OID_GEN_CO_LINK_SPEED = 0x10107,OID_GEN_CO_VENDOR_ID = 0x1010C,OID_GEN_CO_VENDOR_DESCRIPTION = 0x1010D,OID_GEN_CO_DRIVER_VERSION = 0x10110,OID_GEN_CO_PROTOCOL_OPTIONS = 0x10112,OID_GEN_CO_MAC_OPTIONS = 0x10113,OID_GEN_CO_MEDIA_CONNECT_STATUS = 0x10114,OID_GEN_CO_VENDOR_DRIVER_VERSION = 0x10116,OID_GEN_CO_SUPPORTED_GUIDS = 0x10117,OID_GEN_CO_GET_TIME_CAPS = 0x2020F,OID_GEN_CO_GET_NETCARD_TIME = 0x20210,OID_GEN_CO_MINIMUM_LINK_SPEED = 0x20120,OID_GEN_CO_XMIT_PDUS_OK = 0x20101,OID_GEN_CO_RCV_PDUS_OK = 0x20102,OID_GEN_CO_XMIT_PDUS_ERROR = 0x20103,OID_GEN_CO_RCV_PDUS_ERROR = 0x20104,OID_GEN_CO_RCV_PDUS_NO_BUFFER = 0x20105,OID_GEN_CO_RCV_CRC_ERROR = 0x2020D,OID_GEN_CO_TRANSMIT_QUEUE_LENGTH = 0x2020E,OID_GEN_CO_BYTES_XMIT = 0x20201,OID_GEN_CO_BYTES_RCV = 0x20207,OID_GEN_CO_NETCARD_LOAD = 0x20211,OID_GEN_CO_DEVICE_PROFILE = 0x20212,OID_GEN_CO_BYTES_XMIT_OUTSTANDING = 0x20221,OID_802_3_PERMANENT_ADDRESS = 0x1010101,OID_802_3_CURRENT_ADDRESS = 0x1010102,OID_802_3_MULTICAST_LIST = 0x1010103,OID_802_3_MAXIMUM_LIST_SIZE = 0x1010104,OID_802_3_MAC_OPTIONS = 0x1010105,};
enum MACRO_OLE {OLE_E_FIRST = 0x80040000,OLE_E_LAST = 0x800400FF,OLE_S_FIRST = 0x40000,OLE_S_LAST = 0x400FF,};
enum MACRO_OSP {OSP_IndexLabel = 0,OSP_IndexAll = -1,OSP_IndexUnknown = -1,};
enum MACRO_OUT {OUT_DEFAULT_PRECIS = 0,OUT_STRING_PRECIS = 1,OUT_RASTER_PRECIS = 6,};
enum MACRO_PBS {PBS_SMOOTH = 0x1,PBS_VERTICAL = 0x4,};
enum MACRO_PBT {PBT_TRANSITION = 0x1,PBT_RESUME = 0x2,PBT_POWERSTATUSCHANGE = 0x4,PBT_POWERINFOCHANGE = 0x8,PBT_OEMBASE = 0x10000,};
enum MACRO_PCF {PCF_DTRDSR = 0x1,PCF_RTSCTS = 0x2,PCF_RLSD = 0x4,PCF_PARITY_CHECK = 0x8,PCF_XONXOFF = 0x10,PCF_SETXCHAR = 0x20,PCF_TOTALTIMEOUTS = 0x40,PCF_INTTIMEOUTS = 0x80,PCF_SPECIALCHARS = 0x100,PCF_16BITMODE = 0x200,};
enum MACRO_PCI {PCI_TYPE0_ADDRESSES = 6,PCI_TYPE1_ADDRESSES = 2,PCI_TYPE2_ADDRESSES = 1,PCI_MAX_BUS = 255,PCI_MAX_DEVICES = 32,PCI_MAX_FUNCTION = 8,PCI_INVALID_VENDORID = 65535,PCI_INVALID_DEVICEID = 65535,PCI_MULTIFUNCTION = 128,PCI_DEVICE_TYPE = 0,PCI_BRIDGE_TYPE = 1,PCI_CARDBUS_TYPE = 2,PCI_ENABLE_IO_SPACE = 1,PCI_ENABLE_MEMORY_SPACE = 2,PCI_ENABLE_BUS_MASTER = 4,PCI_ENABLE_SPECIAL_CYCLES = 8,PCI_ENABLE_WRITE_AND_INVALIDATE = 16,PCI_ENABLE_VGA_COMPATIBLE_PALETTE = 32,PCI_ENABLE_PARITY = 64,PCI_ENABLE_WAIT_CYCLE = 128,PCI_ENABLE_SERR = 256,PCI_ENABLE_FAST_BACK_TO_BACK = 512,PCI_STATUS_FAST_BACK_TO_BACK = 128,PCI_STATUS_DATA_PARITY_DETECTED = 256,PCI_STATUS_DEVSEL = 1536,PCI_STATUS_SIGNALED_TARGET_ABORT = 2048,PCI_STATUS_RECEIVED_TARGET_ABORT = 4096,PCI_STATUS_RECEIVED_MASTER_ABORT = 8192,PCI_STATUS_SIGNALED_SYSTEM_ERROR = 16384,PCI_STATUS_DETECTED_PARITY_ERROR = 32768,PCI_CLASS_PRE_20 = 0,PCI_CLASS_MASS_STORAGE_CTLR = 1,PCI_CLASS_NETWORK_CTLR = 2,PCI_CLASS_DISPLAY_CTLR = 3,PCI_CLASS_MULTIMEDIA_DEV = 4,PCI_CLASS_MEMORY_CTLR = 5,PCI_CLASS_BRIDGE_DEV = 6,PCI_CLASS_SIMPLE_COMMS_CTLR = 7,PCI_CLASS_BASE_SYSTEM_DEV = 8,PCI_CLASS_INPUT_DEV = 9,PCI_CLASS_DOCKING_STATION = 10,PCI_CLASS_PROCESSOR = 11,PCI_CLASS_SERIAL_BUS_CTLR = 12,PCI_CLASS_NOT_DEFINED = 255,PCI_SUBCLASS_PRE_20_NON_VGA = 0,PCI_SUBCLASS_PRE_20_VGA = 1,PCI_SUBCLASS_MSC_SCSI_BUS_CTLR = 0,PCI_SUBCLASS_MSC_IDE_CTLR = 1,PCI_SUBCLASS_MSC_FLOPPY_CTLR = 2,PCI_SUBCLASS_MSC_IPI_CTLR = 3,PCI_SUBCLASS_MSC_RAID_CTLR = 4,PCI_SUBCLASS_MSC_OTHER = 128,PCI_SUBCLASS_NET_ETHERNET_CTLR = 0,PCI_SUBCLASS_NET_TOKEN_RING_CTLR = 1,PCI_SUBCLASS_NET_FDDI_CTLR = 2,PCI_SUBCLASS_NET_ATM_CTLR = 3,PCI_SUBCLASS_NET_OTHER = 128,PCI_SUBCLASS_VID_VGA_CTLR = 0,PCI_SUBCLASS_VID_XGA_CTLR = 1,PCI_SUBCLASS_VID_OTHER = 128,PCI_SUBCLASS_MM_VIDEO_DEV = 0,PCI_SUBCLASS_MM_AUDIO_DEV = 1,PCI_SUBCLASS_MM_OTHER = 128,PCI_SUBCLASS_MEM_RAM = 0,PCI_SUBCLASS_MEM_FLASH = 1,PCI_SUBCLASS_MEM_OTHER = 128,PCI_SUBCLASS_BR_HOST = 0,PCI_SUBCLASS_BR_ISA = 1,PCI_SUBCLASS_BR_EISA = 2,PCI_SUBCLASS_BR_MCA = 3,PCI_SUBCLASS_BR_PCI_TO_PCI = 4,PCI_SUBCLASS_BR_PCMCIA = 5,PCI_SUBCLASS_BR_NUBUS = 6,PCI_SUBCLASS_BR_CARDBUS = 7,PCI_SUBCLASS_BR_OTHER = 128,PCI_SUBCLASS_COM_SERIAL = 0,PCI_SUBCLASS_COM_PARALLEL = 1,PCI_SUBCLASS_COM_OTHER = 128,PCI_SUBCLASS_SYS_INTERRUPT_CTLR = 0,PCI_SUBCLASS_SYS_DMA_CTLR = 1,PCI_SUBCLASS_SYS_SYSTEM_TIMER = 2,PCI_SUBCLASS_SYS_REAL_TIME_CLOCK = 3,PCI_SUBCLASS_SYS_OTHER = 128,PCI_SUBCLASS_INP_KEYBOARD = 0,PCI_SUBCLASS_INP_DIGITIZER = 1,PCI_SUBCLASS_INP_MOUSE = 2,PCI_SUBCLASS_INP_OTHER = 128,PCI_SUBCLASS_DOC_GENERIC = 0,PCI_SUBCLASS_DOC_OTHER = 128,PCI_SUBCLASS_PROC_386 = 0,PCI_SUBCLASS_PROC_486 = 1,PCI_SUBCLASS_PROC_PENTIUM = 2,PCI_SUBCLASS_PROC_ALPHA = 16,PCI_SUBCLASS_PROC_POWERPC = 32,PCI_SUBCLASS_PROC_COPROCESSOR = 64,PCI_SUBCLASS_SB_IEEE1394 = 0,PCI_SUBCLASS_SB_ACCESS = 1,PCI_SUBCLASS_SB_SSA = 2,PCI_SUBCLASS_SB_USB = 3,PCI_SUBCLASS_SB_FIBRE_CHANNEL = 4,PCI_ADDRESS_IO_SPACE = 1,PCI_ADDRESS_MEMORY_SPACE = 0,PCI_ADDRESS_MEMORY_TYPE_MASK = 6,PCI_ADDRESS_MEMORY_PREFETCHABLE = 8,PCI_ADDRESS_IO_ADDRESS_MASK = -4,PCI_ADDRESS_MEMORY_ADDRESS_MASK = -16,PCI_ADDRESS_ROM_ADDRESS_MASK = -2048,PCI_TYPE_32BIT = 0,PCI_TYPE_20BIT = 2,PCI_TYPE_64BIT = 4,PCI_ROMADDRESS_ENABLED = 1,};
enum MACRO_PDF {PDF_ENCODED = 0x1,PDF_NAMEINDATA = 0x2,PDF_HEADERFORMAT = 0x5,PDF_NOCOMMENTS = 0x8,PDF_SAVENOENCODE = 0x10,PDF_VECTOR = 0x20,};
enum MACRO_PEN {WHITE_PEN = 6,BLACK_PEN = 7,NULL_PEN = 8,};
enum MACRO_PFL {PFL_MULTIPLE_PROTO_ENTRIES = 0x1,PFL_RECOMMENDED_PROTO_ENTRY = 0x2,PFL_HIDDEN = 0x4,PFL_MATCHES_PROTOCOL_ZERO = 0x8,};
enum MACRO_PID {PID_DICTIONARY = 0,PID_CODEPAGE = 1,PID_FIRST_USABLE = 2,PID_FIRST_NAME_DEFAULT = 4095,PID_LOCALE = -2147483648,PID_MODIFY_TIME = -2147483647,PID_SECURITY = -2147483646,PID_ILLEGAL = -1,};
enum MACRO_PMS {PMS_HTML = 0x1,PMS_TEXT = 0x2,};
enum MACRO_PPN {PPN_REEVALUATESTATE = 0x1,PPN_POWERCHANGE = 0x2,PPN_UNATTENDEDMODE = 0x3,PPN_OEMBASE = 0x10000,};
enum MACRO_PSD {PSD_DEFAULTMINMARGINS = 0x0,PSD_INWININIINTLMEASURE = 0x0,PSD_MINMARGINS = 0x1,PSD_MARGINS = 0x2,PSD_INTHOUSANDTHSOFINCHES = 0x4,PSD_INHUNDREDTHSOFMILLIMETERS = 0x8,PSD_DISABLEMARGINS = 0x10,PSD_DISABLEPRINTER = 0x20,PSD_DISABLEORIENTATION = 0x100,PSD_DISABLEPAPER = 0x200,PSD_RETURNDEFAULT = 0x400,PSD_ENABLEPAGESETUPHOOK = 0x2000,PSD_ENABLEPAGESETUPTEMPLATE = 0x8000,PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x20000,PSD_DISABLEPRINTRANGE = 0x10000000,PSD_RANGESELECTION = 0x20000000,};
enum MACRO_PSH {PSH_DEFAULT = 0x0,PSH_PROPTITLE = 0x1,PSH_USEHICON = 0x2,PSH_USEICONID = 0x4,PSH_PROPSHEETPAGE = 0x8,PSH_WIZARDHASFINISH = 0x10,PSH_WIZARD = 0x20,PSH_USEPSTARTPAGE = 0x40,PSH_NOAPPLYNOW = 0x80,PSH_USECALLBACK = 0x100,PSH_HASHELP = 0x200,PSH_MODELESS = 0x400,PSH_RTLREADING = 0x800,PSH_WIZARDCONTEXTHELP = 0x1000,PSH_MAXIMIZE = 0x2000,PSH_NOCANCELBUTTON = 0x80000000,};
enum MACRO_PSM {PSM_SETTITLE = 1135,};
enum MACRO_PSN {PSN_FIRST = -200,PSN_LAST = -299,PSN_SETACTIVE = -200,PSN_KILLACTIVE = -201,PSN_APPLY = -202,PSN_RESET = -203,PSN_HELP = -205,PSN_WIZBACK = -206,PSN_WIZNEXT = -207,PSN_WIZFINISH = -208,PSN_QUERYCANCEL = -209,};
enum MACRO_PSP {PSP_DEFAULT = 0x0,PSP_DLGINDIRECT = 0x1,PSP_USEHICON = 0x2,PSP_USEICONID = 0x4,PSP_USETITLE = 0x8,PSP_RTLREADING = 0x10,PSP_HASHELP = 0x20,PSP_USEREFPARENT = 0x40,PSP_USECALLBACK = 0x80,PSP_PREMATURE = 0x400,};
enum MACRO_PST {PST_UNSPECIFIED = 0x0,PST_RS232 = 0x1,PST_PARALLELPORT = 0x2,PST_RS422 = 0x3,PST_RS423 = 0x4,PST_RS449 = 0x5,PST_MODEM = 0x6,PST_FAX = 0x21,PST_SCANNER = 0x22,PST_NETWORK_BRIDGE = 0x100,PST_LAT = 0x101,PST_TCPIP_TELNET = 0x102,PST_X25 = 0x103,};
enum MACRO_PTR {MAXUINT_PTR = 4294967295,MAXINT_PTR = 2147483647,MININT_PTR = -2147483648,MAXULONG_PTR = 4294967295,MAXLONG_PTR = 2147483647,MINLONG_PTR = -2147483648,MAXUHALF_PTR = 65535,};
enum MACRO_PUN {PUN_LED = 1,PUN_VIBRATE = 2,PUN_DIALOG = 4,PUN_SOUND = 8,PUN_REPEAT = 16,PUN_PRIVATE = 32,};
enum MACRO_PVD {PVD_CONFIG = 0x3001,};
enum MACRO_PWR {PWR_DESCR_NOMINALV = 0x1,PWR_DESCR_MINV = 0x2,PWR_DESCR_MAXV = 0x4,PWR_DESCR_STATICI = 0x8,PWR_DESCR_AVGI = 0x10,PWR_DESCR_PEAKI = 0x20,PWR_DESCR_POWERDWNI = 0x40,PWR_AVAIL_NOMINALV = 0x100,PWR_AVAIL_MINV = 0x200,PWR_AVAIL_MAXV = 0x400,};
enum MACRO_QDI {QDI_SETDIBITS = 0x1,QDI_GETDIBITS = 0x2,QDI_DIBTOSCREEN = 0x4,QDI_STRETCHDIB = 0x8,};
enum MACRO_QIF {QIF_CACHED = 0x1,QIF_DONTEXPANDFOLDER = 0x2,};
enum MACRO_QOS {QOS_NOT_SPECIFIED = 0xFFFFFFFF,};
enum MACRO_RAS {RAS_EAP_FLAG_ROUTER = 0x1,RAS_EAP_FLAG_NON_INTERACTIVE = 0x2,RAS_EAP_FLAG_LOGON = 0x4,RAS_EAP_FLAG_PREVIEW = 0x8,RAS_EAP_FLAG_FIRST_LINK = 0x10,RAS_EAP_FLAG_MACHINE_AUTH = 0x20,RAS_EAP_FLAG_GUEST_ACCESS = 0x40,RAS_EAP_FLAG_8021X_AUTH = 0x80,};
enum MACRO_RBN {RBN_FIRST = -831,RBN_LAST = -859,};
enum MACRO_RBS {RBS_VARHEIGHT = 0x200,RBS_BANDBORDERS = 0x400,RBS_FIXEDORDER = 0x800,RBS_SMARTLABELS = 0x1000,RBS_AUTOSIZE = 0x2000,RBS_VERTICALGRIPPER = 0x4000,};
enum MACRO_RDH {RDH_RECTANGLES = 1,};
enum MACRO_RDW {RDW_INVALIDATE = 0x1,RDW_INTERNALPAINT = 0x2,RDW_ERASE = 0x4,RDW_VALIDATE = 0x8,RDW_NOERASE = 0x20,RDW_NOCHILDREN = 0x40,RDW_ALLCHILDREN = 0x80,RDW_UPDATENOW = 0x100,RDW_ERASENOW = 0x200,};
enum MACRO_REC {REC_SILENT = 1,};
enum MACRO_REG {REG_OPTION_RESERVED = 0x0,REG_OPTION_NON_VOLATILE = 0x0,REG_OPTION_VOLATILE = 0x1,REG_OPTION_CREATE_LINK = 0x2,REG_OPTION_BACKUP_RESTORE = 0x4,REG_OPTION_OPEN_LINK = 0x8,REG_LEGAL_OPTION = 0xF,REG_CREATED_NEW_KEY = 0x1,REG_OPENED_EXISTING_KEY = 0x2,REG_WHOLE_HIVE_VOLATILE = 0x1,REG_REFRESH_HIVE = 0x2,REG_NO_LAZY_FLUSH = 0x4,REG_NOTIFY_CHANGE_NAME = 0x1,REG_NOTIFY_CHANGE_ATTRIBUTES = 0x2,REG_NOTIFY_CHANGE_LAST_SET = 0x4,REG_NOTIFY_CHANGE_SECURITY = 0x8,REG_LEGAL_CHANGE_FILTER = 0xF,REG_NONE = 0x0,REG_SZ = 0x1,REG_EXPAND_SZ = 0x2,REG_BINARY = 0x3,REG_DWORD = 0x4,REG_DWORD_LITTLE_ENDIAN = 0x4,REG_DWORD_BIG_ENDIAN = 0x5,REG_LINK = 0x6,REG_MULTI_SZ = 0x7,REG_RESOURCE_LIST = 0x8,REG_FULL_RESOURCE_DESCRIPTOR = 0x9,REG_RESOURCE_REQUIREMENTS_LIST = 0xA,REG_QWORD = 0xB,REG_QWORD_LITTLE_ENDIAN = 0xB,REG_MUI_SZ = 0x15,};
enum MACRO_REQ {REQ_ID_HARD_RESET = 0x1,REQ_ID_SOFT_RESET = 0x2,REQ_ID_ENABLE_INT = 0x3,REQ_ID_DISABLE_INT = 0x4,REQ_ID_VENDOR_ID = 0x80000001,REQ_ID_VENDOR_DESCRIPTION = 0x80000002,REQ_ID_DEVICE_MAX_RX = 0x80000003,REQ_ID_DEVICE_MACADDR = 0x80000004,};
enum MACRO_RES {RES_UNUSED_1 = 0x1,RES_FLUSH_CACHE = 0x2,RES_SERVICE = 0x4,};
enum MACRO_RFC {RFC_CANCEL = 0x0,RFC_KEEPBOTH = 0x1,RFC_KEEPLOCAL = 0x2,RFC_KEEPNETWORK = 0x3,RFC_APPLY_TO_ALL = 0x10,};
enum MACRO_RGN {RGN_ERROR = 0,RGN_AND = 1,RGN_OR = 2,RGN_XOR = 3,RGN_DIFF = 4,RGN_COPY = 5,RGN_MIN = 1,RGN_MAX = 5,};
enum MACRO_ROT {ROT_COMPARE_MAX = 2048,};
enum MACRO_RPC {RPC_C_BINDING_INFINITE_TIMEOUT = 10,RPC_C_BINDING_MIN_TIMEOUT = 0,RPC_C_BINDING_DEFAULT_TIMEOUT = 5,RPC_C_BINDING_MAX_TIMEOUT = 9,RPC_C_CANCEL_INFINITE_TIMEOUT = -1,RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234,RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10,RPC_C_BIND_TO_ALL_NICS = 1,RPC_C_USE_INTERNET_PORT = 1,RPC_C_USE_INTRANET_PORT = 2,RPC_C_MQ_TEMPORARY = 0,RPC_C_MQ_PERMANENT = 1,RPC_C_MQ_CLEAR_ON_OPEN = 2,RPC_C_MQ_USE_EXISTING_SECURITY = 4,RPC_C_MQ_AUTHN_LEVEL_NONE = 0,RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = 8,RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = 16,RPC_C_OPT_MQ_DELIVERY = 1,RPC_C_OPT_MQ_PRIORITY = 2,RPC_C_OPT_MQ_JOURNAL = 3,RPC_C_OPT_MQ_ACKNOWLEDGE = 4,RPC_C_OPT_MQ_AUTHN_SERVICE = 5,RPC_C_OPT_MQ_AUTHN_LEVEL = 6,RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7,RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8,RPC_C_OPT_BINDING_NONCAUSAL = 9,RPC_C_OPT_MAX_OPTIONS = 10,RPC_C_MQ_EXPRESS = 0,RPC_C_MQ_RECOVERABLE = 1,RPC_C_MQ_JOURNAL_NONE = 0,RPC_C_MQ_JOURNAL_DEADLETTER = 1,RPC_C_MQ_JOURNAL_ALWAYS = 2,RPC_C_STATS_CALLS_IN = 0,RPC_C_STATS_CALLS_OUT = 1,RPC_C_STATS_PKTS_IN = 2,RPC_C_STATS_PKTS_OUT = 3,RPC_C_AUTHN_LEVEL_DEFAULT = 0,RPC_C_AUTHN_LEVEL_NONE = 1,RPC_C_AUTHN_LEVEL_CONNECT = 2,RPC_C_AUTHN_LEVEL_CALL = 3,RPC_C_AUTHN_LEVEL_PKT = 4,RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5,RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6,RPC_C_IMP_LEVEL_ANONYMOUS = 1,RPC_C_IMP_LEVEL_IDENTIFY = 2,RPC_C_IMP_LEVEL_IMPERSONATE = 3,RPC_C_IMP_LEVEL_DELEGATE = 4,RPC_C_QOS_IDENTITY_STATIC = 0,RPC_C_QOS_IDENTITY_DYNAMIC = 1,RPC_C_QOS_CAPABILITIES_DEFAULT = 0,RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1,RPC_C_PROTECT_LEVEL_DEFAULT = 0,RPC_C_PROTECT_LEVEL_NONE = 1,RPC_C_PROTECT_LEVEL_CONNECT = 2,RPC_C_PROTECT_LEVEL_CALL = 3,RPC_C_PROTECT_LEVEL_PKT = 4,RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = 5,RPC_C_PROTECT_LEVEL_PKT_PRIVACY = 6,RPC_C_AUTHN_NONE = 0,RPC_C_AUTHN_DCE_PRIVATE = 1,RPC_C_AUTHN_DCE_PUBLIC = 2,RPC_C_AUTHN_DEC_PUBLIC = 4,RPC_C_AUTHN_WINNT = 10,RPC_C_AUTHN_DPA = 16,RPC_C_AUTHN_MSN = 17,RPC_C_AUTHN_GSS_KERBEROS = 18,RPC_C_AUTHN_MQ = 100,RPC_C_AUTHN_DEFAULT = -1,RPC_C_SECURITY_QOS_VERSION = 1,};
enum MACRO_RSA {RSA_CSP_PUBLICKEYBLOB = 19,};
enum MACRO_RSC {RSC_FLAG_INF = 1,RSC_FLAG_SKIPDISKSPACECHECK = 2,RSC_FLAG_QUIET = 4,RSC_FLAG_NGCONV = 8,RSC_FLAG_UPDHLPDLLS = 16,RSC_FLAG_DELAYREGISTEROCX = 512,RSC_FLAG_SETUPAPI = 1024,};
enum MACRO_RTC {RTC_E_SIP_CODECS_DO_NOT_MATCH = 0x80EE0000,RTC_E_SIP_STREAM_PRESENT = 0x80EE0001,RTC_E_SIP_STREAM_NOT_PRESENT = 0x80EE0002,RTC_E_SIP_NO_STREAM = 0x80EE0003,RTC_E_SIP_PARSE_FAILED = 0x80EE0004,RTC_E_SIP_HEADER_NOT_PRESENT = 0x80EE0005,RTC_E_SDP_NOT_PRESENT = 0x80EE0006,RTC_E_SDP_PARSE_FAILED = 0x80EE0007,RTC_E_SDP_UPDATE_FAILED = 0x80EE0008,RTC_E_SDP_MULTICAST = 0x80EE0009,RTC_E_SDP_CONNECTION_ADDR = 0x80EE000A,RTC_E_SDP_NO_MEDIA = 0x80EE000B,RTC_E_SIP_TIMEOUT = 0x80EE000C,RTC_E_SDP_FAILED_TO_BUILD = 0x80EE000D,RTC_E_SIP_INVITE_TRANSACTION_PENDING = 0x80EE000E,RTC_E_SIP_AUTH_HEADER_SENT = 0x80EE000F,RTC_E_SIP_AUTH_TYPE_NOT_SUPPORTED = 0x80EE0010,RTC_E_SIP_AUTH_FAILED = 0x80EE0011,RTC_E_INVALID_SIP_URL = 0x80EE0012,RTC_E_DESTINATION_ADDRESS_LOCAL = 0x80EE0013,RTC_E_INVALID_ADDRESS_LOCAL = 0x80EE0014,RTC_E_DESTINATION_ADDRESS_MULTICAST = 0x80EE0015,RTC_E_INVALID_PROXY_ADDRESS = 0x80EE0016,RTC_E_SIP_TRANSPORT_NOT_SUPPORTED = 0x80EE0017,RTC_E_SIP_NEED_MORE_DATA = 0x80EE0018,RTC_E_SIP_CALL_DISCONNECTED = 0x80EE0019,RTC_E_SIP_REQUEST_DESTINATION_ADDR_NOT_PRESENT = 0x80EE001A,RTC_E_SIP_UDP_SIZE_EXCEEDED = 0x80EE001B,RTC_E_SIP_SSL_TUNNEL_FAILED = 0x80EE001C,RTC_E_SIP_SSL_NEGOTIATION_TIMEOUT = 0x80EE001D,RTC_E_SIP_STACK_SHUTDOWN = 0x80EE001E,RTC_E_MEDIA_CONTROLLER_STATE = 0x80EE001F,RTC_E_MEDIA_NEED_TERMINAL = 0x80EE0020,RTC_E_MEDIA_AUDIO_DEVICE_NOT_AVAILABLE = 0x80EE0021,RTC_E_MEDIA_VIDEO_DEVICE_NOT_AVAILABLE = 0x80EE0022,RTC_E_START_STREAM = 0x80EE0023,RTC_E_MEDIA_AEC = 0x80EE0024,RTC_E_CLIENT_NOT_INITIALIZED = 0x80EE0025,RTC_E_CLIENT_ALREADY_INITIALIZED = 0x80EE0026,RTC_E_CLIENT_ALREADY_SHUT_DOWN = 0x80EE0027,RTC_E_PRESENCE_NOT_ENABLED = 0x80EE0028,RTC_E_INVALID_SESSION_TYPE = 0x80EE0029,RTC_E_INVALID_SESSION_STATE = 0x80EE002A,RTC_E_NO_PROFILE = 0x80EE002B,RTC_E_LOCAL_PHONE_NEEDED = 0x80EE002C,RTC_E_NO_DEVICE = 0x80EE002D,RTC_E_INVALID_PROFILE = 0x80EE002E,RTC_E_PROFILE_NO_PROVISION = 0x80EE002F,RTC_E_PROFILE_NO_KEY = 0x80EE0030,RTC_E_PROFILE_NO_NAME = 0x80EE0031,RTC_E_PROFILE_NO_USER = 0x80EE0032,RTC_E_PROFILE_NO_USER_URI = 0x80EE0033,RTC_E_PROFILE_NO_SERVER = 0x80EE0034,RTC_E_PROFILE_NO_SERVER_ADDRESS = 0x80EE0035,RTC_E_PROFILE_NO_SERVER_PROTOCOL = 0x80EE0036,RTC_E_PROFILE_INVALID_SERVER_PROTOCOL = 0x80EE0037,RTC_E_PROFILE_INVALID_SERVER_AUTHMETHOD = 0x80EE0038,RTC_E_PROFILE_INVALID_SERVER_ROLE = 0x80EE0039,RTC_E_PROFILE_MULTIPLE_REGISTRARS = 0x80EE003A,RTC_E_PROFILE_INVALID_SESSION = 0x80EE003B,RTC_E_PROFILE_INVALID_SESSION_PARTY = 0x80EE003C,RTC_E_PROFILE_INVALID_SESSION_TYPE = 0x80EE003D,RTC_E_OPERATION_WITH_TOO_MANY_PARTICIPANTS = 0x80EE003E,RTC_E_BASIC_AUTH_SET_TLS = 0x80EE003F,RTC_E_SIP_HIGH_SECURITY_SET_TLS = 0x80EE0040,RTC_S_ROAMING_NOT_SUPPORTED = 0xEE0041,RTC_E_PROFILE_SERVER_UNAUTHORIZED = 0x80EE0042,RTC_E_DUPLICATE_REALM = 0x80EE0043,RTC_E_POLICY_NOT_ALLOW = 0x80EE0044,RTC_E_PORT_MAPPING_UNAVAILABLE = 0x80EE0045,RTC_E_PORT_MAPPING_FAILED = 0x80EE0046,RTC_E_SECURITY_LEVEL_NOT_COMPATIBLE = 0x80EE0047,RTC_E_SECURITY_LEVEL_NOT_DEFINED = 0x80EE0048,RTC_E_SECURITY_LEVEL_NOT_SUPPORTED_BY_PARTICIPANT = 0x80EE0049,RTC_E_DUPLICATE_BUDDY = 0x80EE004A,RTC_E_DUPLICATE_WATCHER = 0x80EE004B,RTC_E_MALFORMED_XML = 0x80EE004C,RTC_E_ROAMING_OPERATION_INTERRUPTED = 0x80EE004D,RTC_E_ROAMING_FAILED = 0x80EE004E,RTC_E_INVALID_BUDDY_LIST = 0x80EE004F,RTC_E_INVALID_ACL_LIST = 0x80EE0050,RTC_E_NO_GROUP = 0x80EE0051,RTC_E_DUPLICATE_GROUP = 0x80EE0052,RTC_E_TOO_MANY_GROUPS = 0x80EE0053,RTC_E_NO_BUDDY = 0x80EE0054,RTC_E_NO_WATCHER = 0x80EE0055,RTC_E_NO_REALM = 0x80EE0056,RTC_E_NO_TRANSPORT = 0x80EE0057,RTC_E_NOT_EXIST = 0x80EE0058,RTC_E_INVALID_PREFERENCE_LIST = 0x80EE0059,RTC_E_MAX_PENDING_OPERATIONS = 0x80EE005A,RTC_E_TOO_MANY_RETRIES = 0x80EE005B,RTC_E_INVALID_PORTRANGE = 0x80EE005C,RTC_E_SIP_CALL_CONNECTION_NOT_ESTABLISHED = 0x80EE005D,RTC_E_SIP_ADDITIONAL_PARTY_IN_TWO_PARTY_SESSION = 0x80EE005E,RTC_E_SIP_PARTY_ALREADY_IN_SESSION = 0x80EE005F,RTC_E_SIP_OTHER_PARTY_JOIN_IN_PROGRESS = 0x80EE0060,RTC_E_INVALID_OBJECT_STATE = 0x80EE0061,RTC_E_PRESENCE_ENABLED = 0x80EE0062,RTC_E_ROAMING_ENABLED = 0x80EE0063,RTC_E_SIP_TLS_INCOMPATIBLE_ENCRYPTION = 0x80EE0064,RTC_E_SIP_INVALID_CERTIFICATE = 0x80EE0065,RTC_E_SIP_DNS_FAIL = 0x80EE0066,RTC_E_SIP_TCP_FAIL = 0x80EE0067,RTC_E_TOO_SMALL_EXPIRES_VALUE = 0x80EE0068,RTC_E_SIP_TLS_FAIL = 0x80EE0069,RTC_E_NOT_PRESENCE_PROFILE = 0x80EE006A,RTC_E_SIP_INVITEE_PARTY_TIMEOUT = 0x80EE006B,RTC_E_SIP_AUTH_TIME_SKEW = 0x80EE006C,RTC_E_INVALID_REGISTRATION_STATE = 0x80EE006D,RTC_E_MEDIA_DISABLED = 0x80EE006E,RTC_E_MEDIA_ENABLED = 0x80EE006F,RTC_E_REFER_NOT_ACCEPTED = 0x80EE0070,RTC_E_REFER_NOT_ALLOWED = 0x80EE0071,RTC_E_REFER_NOT_EXIST = 0x80EE0072,RTC_E_SIP_HOLD_OPERATION_PENDING = 0x80EE0073,RTC_E_SIP_UNHOLD_OPERATION_PENDING = 0x80EE0074,RTC_E_MEDIA_SESSION_NOT_EXIST = 0x80EE0075,RTC_E_MEDIA_SESSION_IN_HOLD = 0x80EE0076,RTC_E_ANOTHER_MEDIA_SESSION_ACTIVE = 0x80EE0077,RTC_E_MAX_REDIRECTS = 0x80EE0078,RTC_E_REDIRECT_PROCESSING_FAILED = 0x80EE0079,RTC_E_LISTENING_SOCKET_NOT_EXIST = 0x80EE007A,RTC_E_INVALID_LISTEN_SOCKET = 0x80EE007B,RTC_E_PORT_MANAGER_ALREADY_SET = 0x80EE007C,RTC_E_SECURITY_LEVEL_ALREADY_SET = 0x80EE007D,RTC_E_UDP_NOT_SUPPORTED = 0x80EE007E,RTC_E_SIP_REFER_OPERATION_PENDING = 0x80EE007F,RTC_E_PLATFORM_NOT_SUPPORTED = 0x80EE0080,RTC_E_SIP_PEER_PARTICIPANT_IN_MULTIPARTY_SESSION = 0x80EE0081,RTC_E_NOT_ALLOWED = 0x80EE0082,RTC_E_STATUS_INFO_TRYING = 0xEF0064,RTC_E_STATUS_INFO_RINGING = 0xEF00B4,RTC_E_STATUS_INFO_CALL_FORWARDING = 0xEF00B5,RTC_E_STATUS_INFO_QUEUED = 0xEF00B6,RTC_E_STATUS_SESSION_PROGRESS = 0xEF00B7,RTC_E_STATUS_SUCCESS = 0xEF00C8,RTC_E_STATUS_REDIRECT_MULTIPLE_CHOICES = 0x80EF012C,RTC_E_STATUS_REDIRECT_MOVED_PERMANENTLY = 0x80EF012D,RTC_E_STATUS_REDIRECT_MOVED_TEMPORARILY = 0x80EF012E,RTC_E_STATUS_REDIRECT_SEE_OTHER = 0x80EF012F,RTC_E_STATUS_REDIRECT_USE_PROXY = 0x80EF0131,RTC_E_STATUS_REDIRECT_ALTERNATIVE_SERVICE = 0x80EF017C,RTC_E_STATUS_CLIENT_BAD_REQUEST = 0x80EF0190,RTC_E_STATUS_CLIENT_UNAUTHORIZED = 0x80EF0191,RTC_E_STATUS_CLIENT_PAYMENT_REQUIRED = 0x80EF0192,RTC_E_STATUS_CLIENT_FORBIDDEN = 0x80EF0193,RTC_E_STATUS_CLIENT_NOT_FOUND = 0x80EF0194,RTC_E_STATUS_CLIENT_METHOD_NOT_ALLOWED = 0x80EF0195,RTC_E_STATUS_CLIENT_NOT_ACCEPTABLE = 0x80EF0196,RTC_E_STATUS_CLIENT_PROXY_AUTHENTICATION_REQUIRED = 0x80EF0197,RTC_E_STATUS_CLIENT_REQUEST_TIMEOUT = 0x80EF0198,RTC_E_STATUS_CLIENT_CONFLICT = 0x80EF0199,RTC_E_STATUS_CLIENT_GONE = 0x80EF019A,RTC_E_STATUS_CLIENT_LENGTH_REQUIRED = 0x80EF019B,RTC_E_STATUS_CLIENT_REQUEST_ENTITY_TOO_LARGE = 0x80EF019D,RTC_E_STATUS_CLIENT_REQUEST_URI_TOO_LARGE = 0x80EF019E,RTC_E_STATUS_CLIENT_UNSUPPORTED_MEDIA_TYPE = 0x80EF019F,RTC_E_STATUS_CLIENT_BAD_EXTENSION = 0x80EF01A4,RTC_E_STATUS_CLIENT_TEMPORARILY_NOT_AVAILABLE = 0x80EF01E0,RTC_E_STATUS_CLIENT_TRANSACTION_DOES_NOT_EXIST = 0x80EF01E1,RTC_E_STATUS_CLIENT_LOOP_DETECTED = 0x80EF01E2,RTC_E_STATUS_CLIENT_TOO_MANY_HOPS = 0x80EF01E3,RTC_E_STATUS_CLIENT_ADDRESS_INCOMPLETE = 0x80EF01E4,RTC_E_STATUS_CLIENT_AMBIGUOUS = 0x80EF01E5,RTC_E_STATUS_CLIENT_BUSY_HERE = 0x80EF01E6,RTC_E_STATUS_REQUEST_TERMINATED = 0x80EF01E7,RTC_E_STATUS_NOT_ACCEPTABLE_HERE = 0x80EF01E8,RTC_E_STATUS_SERVER_INTERNAL_ERROR = 0x80EF01F4,RTC_E_STATUS_SERVER_NOT_IMPLEMENTED = 0x80EF01F5,RTC_E_STATUS_SERVER_BAD_GATEWAY = 0x80EF01F6,RTC_E_STATUS_SERVER_SERVICE_UNAVAILABLE = 0x80EF01F7,RTC_E_STATUS_SERVER_SERVER_TIMEOUT = 0x80EF01F8,RTC_E_STATUS_SERVER_VERSION_NOT_SUPPORTED = 0x80EF01F9,RTC_E_STATUS_GLOBAL_BUSY_EVERYWHERE = 0x80EF0258,RTC_E_STATUS_GLOBAL_DECLINE = 0x80EF025B,RTC_E_STATUS_GLOBAL_DOES_NOT_EXIST_ANYWHERE = 0x80EF025C,RTC_E_STATUS_GLOBAL_NOT_ACCEPTABLE = 0x80EF025E,RTC_E_PINT_STATUS_REJECTED_BUSY = 0x80F00005,RTC_E_PINT_STATUS_REJECTED_NO_ANSWER = 0x80F00006,RTC_E_PINT_STATUS_REJECTED_ALL_BUSY = 0x80F00007,RTC_E_PINT_STATUS_REJECTED_PL_FAILED = 0x80F00008,RTC_E_PINT_STATUS_REJECTED_SW_FAILED = 0x80F00009,RTC_E_PINT_STATUS_REJECTED_CANCELLED = 0x80F0000A,RTC_E_PINT_STATUS_REJECTED_BADNUMBER = 0x80F0000B,};
enum MACRO_RTF {RTF_SYNC_RTF_CHANGED = 0x1,RTF_SYNC_BODY_CHANGED = 0x2,};
enum MACRO_RTL {RTL_CRITSECT_TYPE = 0,RTL_RESOURCE_TYPE = 1,};
enum MACRO_RTS {RTS_CONTROL_DISABLE = 0x0,RTS_CONTROL_ENABLE = 0x1,RTS_CONTROL_HANDSHAKE = 0x2,RTS_CONTROL_TOGGLE = 0x3,};
enum MACRO_SAP {SAP_FIELD_ABSENT = 0xFFFFFFFE,SAP_FIELD_ANY = 0xFFFFFFFF,SAP_FIELD_ANY_AESA_SEL = 0xFFFFFFFA,SAP_FIELD_ANY_AESA_REST = 0xFFFFFFFB,};
enum MACRO_SBN {SBN_FIRST = -880,SBN_LAST = -900,};
enum MACRO_SBS {SBS_HORZ = 0x0,SBS_VERT = 0x1,};
enum MACRO_SBT {SBT_OWNERDRAW = 0x1000,SBT_NOBORDERS = 0x100,SBT_POPOUT = 0x200,SBT_RTLREADING = 0x400,};
enum MACRO_SCH {SCH_CRED_V1 = 0x1,SCH_CRED_V2 = 0x2,SCH_CRED_VERSION = 0x2,SCH_CRED_V3 = 0x3,};
enum MACRO_SCS {SCS_CAP_COMPSTR = 0x1,SCS_CAP_MAKEREAD = 0x2,SCS_CAP_SETRECONVERTSTRING = 0x4,};
enum MACRO_SDP {SDP_SERVICE_SEARCH_REQUEST = 1,SDP_SERVICE_ATTRIBUTE_REQUEST = 2,SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST = 3,};
enum MACRO_SEC {SEC_FILE = 0x800000,SEC_IMAGE = 0x1000000,SEC_VLM = 0x2000000,SEC_RESERVE = 0x4000000,SEC_COMMIT = 0x8000000,SEC_NOCACHE = 0x10000000,};
enum MACRO_SEE {SEE_MASK_NOCLOSEPROCESS = 0x40,SEE_MASK_FLAG_NO_UI = 0x400,};
enum MACRO_SEF {SEF_DACL_AUTO_INHERIT = 0x1,SEF_SACL_AUTO_INHERIT = 0x2,SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x4,SEF_AVOID_PRIVILEGE_CHECK = 0x8,};
enum MACRO_SFV {SFV_DONTDOUI = 0x2,SFV_DELETE = 0x4,SFV_WANTVENDORICON = 0x8,SFV_ENGINE_DOUI = 0x10000,};
enum MACRO_SHA {SHA_INPUTDIALOG = 0x1,};
enum MACRO_SHN {SHN_FIRST = -1400,SHN_LAST = -1500,};
enum MACRO_SID {SID_REVISION = 1,SID_MAX_SUB_AUTHORITIES = 15,SID_RECOMMENDED_SUB_AUTHORITIES = 1,};
enum MACRO_SIF {SIF_RANGE = 0x1,SIF_PAGE = 0x2,SIF_POS = 0x4,SIF_DISABLENOSCROLL = 0x8,SIF_TRACKPOS = 0x10,SIF_ALL = 0x17,};
enum MACRO_SIO {SIO_ASSOCIATE_HANDLE = -2013265919,SIO_ENABLE_CIRCULAR_QUEUEING = 671088642,SIO_FIND_ROUTE = 1207959555,SIO_FLUSH = 671088644,SIO_GET_BROADCAST_ADDRESS = 1207959557,SIO_GET_EXTENSION_FUNCTION_POINTER = -939524090,SIO_GET_QOS = -939524089,SIO_GET_GROUP_QOS = -939524088,SIO_MULTIPOINT_LOOPBACK = -2013265911,SIO_MULTICAST_SCOPE = -2013265910,SIO_SET_QOS = -2013265909,SIO_SET_GROUP_QOS = -2013265908,SIO_TRANSLATE_HANDLE = -939524083,SIO_ROUTING_INTERFACE_QUERY = -939524076,SIO_ROUTING_INTERFACE_CHANGE = -2013265899,SIO_ADDRESS_LIST_QUERY = 1207959574,SIO_ADDRESS_LIST_CHANGE = 671088663,SIO_QUERY_TARGET_PNP_HANDLE = 1207959576,SIO_ADDRESS_LIST_SORT = -939524071,SIO_NSP_NOTIFY_CHANGE = -2013265895,};
enum MACRO_SIP {SIP_QUERY_STATE = 0x2000,SIP_SET_STATE = 0x2001,SIP_STATE_HDKB = 0x1,SIP_STATE_NOHDKB = 0x2,SIP_QUERY_RCMASK = 0x3000,SIP_SET_RCMASK = 0x3001,SIP_SET_OPENCANDWND = 0x5000,SIP_SET_CLOSECANDWND = 0x5001,SIP_QUERY_HALFWIDTH = 0x6000,SIP_SET_HALFWIDTH = 0x6001,SIP_WIDTHSETTING_HALF = 0x1,SIP_QUERY_MODE = 0x8000,SIP_SET_MODE = 0x8001,SIP_MODE_MINIMAL = 0x0,SIP_MODE_REDUCED = 0x1,SIP_MODE_FULL = 0x2,SIP_MODE_FULL_HIDDEN = 0x3,SIP_NOTIFY_FOCUS_CHANGE = 0xFFFB,SIP_RELEASE_STICKY_KEYS = 0xFFFC,SIP_CONFIG_CHANGED = 0xFFFD,SIP_SHOW_WARNING = 0xFFFE,SIP_KILL_MENU = 0xFFFF,SIP_QUERY_LOCATION = 0x1000,SIP_SET_LOCATION = 0x1001,SIP_INPUT_ATTRIBUTES = 0x7000,SIP_INPUT_NUMERIC = 0x4,SIP_INPUT_ALPHANUMERIC = 0x8,SIP_INPUT_HIRAGANA = 0x10,SIP_INPUT_KATAKANA = 0x100,SIP_INPUT_EVERYTHING = 0x0,SIP_INPUT_PASSWORD = 0x20,SIP_INPUT_HALFWIDTH = 0x1,SIP_INPUT_FULLWIDTH = 0x2,};
enum MACRO_SMF {SMF_TIMEDIV_QUARTERNOTE = 0,SMF_TIMEDIV_SECONDS = 1,};
enum MACRO_SND {SND_ALIAS = 0x10000,SND_FILENAME = 0x20000,SND_RESOURCE = 0x40004,SND_SYNC = 0x0,SND_ASYNC = 0x1,SND_NODEFAULT = 0x2,SND_MEMORY = 0x4,SND_LOOP = 0x8,SND_NOSTOP = 0x10,SND_NOWAIT = 0x2000,SND_VALIDFLAGS = 0x17201F,SND_RESERVED = 0xFF000000,SND_TYPE_MASK = 0x170007,SND_ALIAS_ID = 0x110000,SND_ALIAS_START = 0x0,};
enum MACRO_SOF {SOF_UNIQUEFILENAME = 0x80000000,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SPC {SPC_SP_AGENCY_INFO_STRUCT = 2000,SPC_MINIMAL_CRITERIA_STRUCT = 2001,SPC_FINANCIAL_CRITERIA_STRUCT = 2002,SPC_INDIRECT_DATA_CONTENT_STRUCT = 2003,SPC_PE_IMAGE_DATA_STRUCT = 2004,SPC_LINK_STRUCT = 2005,SPC_STATEMENT_TYPE_STRUCT = 2006,SPC_SP_OPUS_INFO_STRUCT = 2007,SPC_CAB_DATA_STRUCT = 2008,SPC_JAVA_CLASS_DATA_STRUCT = 2009,SPC_SIGINFO_STRUCT = 2130,};
enum MACRO_SPI {SPI_GETMOUSE = 3,SPI_SETMOUSE = 4,SPI_SETDESKWALLPAPER = 20,SPI_SETDESKPATTERN = 21,SPI_SETWORKAREA = 47,SPI_GETWORKAREA = 48,SPI_GETSHOWSOUNDS = 56,SPI_SETSHOWSOUNDS = 57,SPI_GETWHEELSCROLLLINES = 104,SPI_SETWHEELSCROLLLINES = 105,SPI_GETFONTSMOOTHINGCONTRAST = 8204,SPI_SETFONTSMOOTHINGCONTRAST = 8205,SPI_GETSCREENSAVETIMEOUT = 14,SPI_SETSCREENSAVETIMEOUT = 15,SPI_SETBATTERYIDLETIMEOUT = 251,SPI_GETBATTERYIDLETIMEOUT = 252,SPI_SETEXTERNALIDLETIMEOUT = 253,SPI_GETEXTERNALIDLETIMEOUT = 254,SPI_SETWAKEUPIDLETIMEOUT = 255,SPI_GETWAKEUPIDLETIMEOUT = 256,SPI_GETPLATFORMTYPE = 257,SPI_GETOEMINFO = 258,};
enum MACRO_SRV {SRV_NNTP = 1,SRV_IMAP = 2,SRV_POP3 = 4,SRV_SMTP = 8,SRV_LDAP = 16,SRV_HTTPMAIL = 32,SRV_MAIL = 46,SRV_ALL = 63,};
enum MACRO_SSF {SSF_SHOWALLOBJECTS = 0x1,SSF_SHOWEXTENSIONS = 0x2,SSF_SHOWCOMPCOLOR = 0x8,SSF_SHOWSYSFILES = 0x20,SSF_DOUBLECLICKINWEBVIEW = 0x80,SSF_SHOWATTRIBCOL = 0x100,SSF_DESKTOPHTML = 0x200,SSF_WIN95CLASSIC = 0x400,SSF_DONTPRETTYPATH = 0x800,SSF_SHOWINFOTIP = 0x2000,SSF_MAPNETDRVBUTTON = 0x1000,SSF_NOCONFIRMRECYCLE = 0x8000,SSF_HIDEICONS = 0x4000,};
enum MACRO_SSL {SSL_ERR_OKAY = 0,SSL_ERR_FAILED = 2,SSL_ERR_BAD_LEN = 3,SSL_ERR_BAD_TYPE = 4,SSL_ERR_BAD_DATA = 5,SSL_ERR_NO_CERT = 6,SSL_ERR_BAD_SIG = 7,SSL_ERR_CERT_EXPIRED = 8,SSL_ERR_CERT_REVOKED = 9,SSL_ERR_CERT_UNKNOWN = 10,SSL_ERR_SIGNATURE = 11,SSL_CAP_CLIENT = 1,SSL_CAP_SERVER = 2,SSL_CAP_CLIENT_AUTH = 4,SSL_CAP_CRYPTOAPI = 8,SSL_FLAG_SERVER = 2,SSL_FLAG_AUTH_CLIENT = 4,SSL_FLAG_DEFER_HANDSHAKE = 8,SSL_PROTOCOL_PCT1 = 1,SSL_PROTOCOL_SSL2 = 2,SSL_PROTOCOL_SSL3 = 3,SSL_PROTOCOL_TLS1 = 4,SSL_CERT_X509 = 1,SSL_CERT_FLAG_ISSUER_UNKNOWN = 1,SSL_EXCH_RSAENCRYPT = 1,SSL_EXCH_RSADECRYPT = 2,SSL_SIGN_RSA_MD2 = 1,SSL_SIGN_RSA_MD5 = 2,SSL_SIGN_RSA_SHA = 3,SSL_SIGN_RSA_SHAMD5 = 4,SSL_SIGN_VERIFY_SIGNATURE = 1,SSL_SIGN_PERFORM_HASH = 2,SSL_PROT_PCT1_SERVER = 1,SSL_PROT_PCT1_CLIENT = 2,SSL_PROT_SSL2_SERVER = 4,SSL_PROT_SSL2_CLIENT = 8,SSL_PROT_SSL3_SERVER = 16,SSL_PROT_SSL3_CLIENT = 32,SSL_PROT_TLS1_SERVER = 64,SSL_PROT_TLS1_CLIENT = 128,};
enum MACRO_STD {STD_CUT = 0,STD_COPY = 1,STD_PASTE = 2,STD_UNDO = 3,STD_REDOW = 4,STD_DELETE = 5,STD_FILENEW = 6,STD_FILEOPEN = 7,STD_FILESAVE = 8,STD_PRINTPRE = 9,STD_PROPERTIES = 10,STD_HELP = 11,STD_FIND = 12,STD_REPLACE = 13,STD_PRINT = 14,};
enum MACRO_STG {STG_TOEND = 0xFFFFFFFF,STG_LAYOUT_SEQUENTIAL = 0x0,STG_LAYOUT_INTERLEAVED = 0x1,};
enum MACRO_STN {STN_CLICKED = 0,STN_ENABLE = 2,STN_DISABLE = 3,};
enum MACRO_SUB {SUB_OBJECTS_ONLY_INHERIT = 0x1,SUB_CONTAINERS_ONLY_INHERIT = 0x2,SUB_CONTAINERS_AND_OBJECTS_INHERIT = 0x3,};
enum MACRO_SWP {SWP_NOSIZE = 0x1,SWP_NOMOVE = 0x2,SWP_NOZORDER = 0x4,SWP_NOACTIVATE = 0x10,SWP_FRAMECHANGED = 0x20,SWP_SHOWWINDOW = 0x40,SWP_HIDEWINDOW = 0x80,SWP_NOOWNERZORDER = 0x200,SWP_DRAWFRAME = 0x20,SWP_NOREPOSITION = 0x200,};
enum MACRO_SYS {SYS_HANDLE_BASE = 64,};
enum MACRO_TAD {TAD_ALL_ROWS = 1,};
enum MACRO_TBL {TBL_ALL_COLUMNS = 0x1,TBL_LEAF_ROW = 0x1,TBL_EMPTY_CATEGORY = 0x2,TBL_EXPANDED_CATEGORY = 0x3,TBL_COLLAPSED_CATEGORY = 0x4,TBL_NOWAIT = 0x1,TBL_ASYNC = 0x1,TBL_BATCH = 0x2,};
enum MACRO_TBN {TBN_FIRST = -700,TBN_LAST = -720,};
enum MACRO_TBS {TBS_AUTOTICKS = 0x1,TBS_VERT = 0x2,TBS_HORZ = 0x0,TBS_TOP = 0x4,TBS_BOTTOM = 0x0,TBS_LEFT = 0x4,TBS_RIGHT = 0x0,TBS_BOTH = 0x8,TBS_NOTICKS = 0x10,TBS_ENABLESELRANGE = 0x20,TBS_FIXEDLENGTH = 0x40,TBS_NOTHUMB = 0x80,};
enum MACRO_TCI {TCI_SRCCHARSET = 1,TCI_SRCCODEPAGE = 2,TCI_SRCFONTSIG = 3,};
enum MACRO_TCM {TCM_FIRST = 0x1300,TCM_GETIMAGELIST = 0x1302,TCM_SETIMAGELIST = 0x1303,TCM_GETITEMCOUNT = 0x1304,};
enum MACRO_TCN {TCN_FIRST = -550,TCN_LAST = -580,};
enum MACRO_TCP {TCP_NODELAY = 0x1,};
enum MACRO_TCS {TCS_SCROLLOPPOSITE = 0x1,TCS_BOTTOM = 0x2,TCS_RIGHT = 0x2,TCS_MULTISELECT = 0x4,TCS_FLATBUTTONS = 0x8,TCS_FORCEICONLEFT = 0x10,TCS_FORCELABELLEFT = 0x20,TCS_HOTTRACK = 0x40,TCS_VERTICAL = 0x80,TCS_TABS = 0x0,TCS_BUTTONS = 0x100,TCS_SINGLELINE = 0x0,TCS_MULTILINE = 0x200,TCS_RIGHTJUSTIFY = 0x0,TCS_FIXEDWIDTH = 0x400,TCS_RAGGEDRIGHT = 0x800,TCS_FOCUSONBUTTONDOWN = 0x1000,TCS_OWNERDRAWFIXED = 0x2000,TCS_FOCUSNEVER = 0x8000,TCS_EX_FLATSEPARATORS = 0x1,};
enum MACRO_TLS {TLS_MINIMUM_AVAILABLE = 64,};
enum MACRO_TNS {TNS_TYPE_NATIONAL = 0x40,TNS_PLAN_CARRIER_ID_CODE = 0x1,};
enum MACRO_TPM {TPM_LEFTALIGN = 0x0,TPM_CENTERALIGN = 0x4,TPM_RIGHTALIGN = 0x8,TPM_TOPALIGN = 0x0,TPM_VCENTERALIGN = 0x10,TPM_BOTTOMALIGN = 0x20,TPM_HORIZONTAL = 0x0,TPM_VERTICAL = 0x40,TPM_NONOTIFY = 0x80,TPM_RETURNCMD = 0x100,};
enum MACRO_TRY {TRY_AGAIN = 11002,};
enum MACRO_TTF {TTF_IDISHWND = 0x1,TTF_CENTERTIP = 0x2,TTF_RTLREADING = 0x4,TTF_SUBCLASS = 0x10,TTF_TRACK = 0x20,TTF_ABSOLUTE = 0x80,TTF_TRANSPARENT = 0x100,TTF_USEHITTEST = 0x400,TTF_DI_SETITEM = 0x8000,};
enum MACRO_TTM {TTM_ADDTOOL = 1028,TTM_DELTOOL = 1029,TTM_NEWTOOLRECT = 1030,TTM_GETTOOLINFO = 1032,TTM_SETTOOLINFO = 1033,TTM_HITTEST = 1034,TTM_GETTEXT = 1035,TTM_UPDATETIPTEXT = 1036,TTM_ENUMTOOLS = 1038,TTM_GETCURRENTTOOL = 1039,};
enum MACRO_TTN {TTN_FIRST = -520,TTN_LAST = -549,};
enum MACRO_TTS {TTS_ALWAYSTIP = 0x1,TTS_NOPREFIX = 0x2,};
enum MACRO_TVC {TVC_UNKNOWN = 0x0,TVC_BYMOUSE = 0x1,TVC_BYKEYBOARD = 0x2,};
enum MACRO_TVE {TVE_COLLAPSE = 0x1,TVE_EXPAND = 0x2,TVE_TOGGLE = 0x3,TVE_EXPANDPARTIAL = 0x4000,TVE_COLLAPSERESET = 0x8000,};
enum MACRO_TVI {TVI_ROOT = 0xFFFF0000,TVI_FIRST = 0xFFFF0001,TVI_LAST = 0xFFFF0002,TVI_SORT = 0xFFFF0003,};
enum MACRO_TVM {TVM_INSERTITEMA = 4352,TVM_INSERTITEMW = 4402,TVM_INSERTITEM = 4352,TVM_DELETEITEM = 4353,TVM_EXPAND = 4354,};
enum MACRO_TVN {TVN_FIRST = -400,TVN_LAST = -499,};
enum MACRO_TVS {TVS_HASBUTTONS = 0x1,TVS_HASLINES = 0x2,TVS_LINESATROOT = 0x4,TVS_EDITLABELS = 0x8,TVS_DISABLEDRAGDROP = 0x10,TVS_SHOWSELALWAYS = 0x20,TVS_RTLREADING = 0x40,TVS_NOTOOLTIPS = 0x80,TVS_CHECKBOXES = 0x100,TVS_TRACKSELECT = 0x200,TVS_SINGLEEXPAND = 0x400,};
enum MACRO_TXT {TXT_PLAIN = 0x1,TXT_HTML = 0x2,};
enum MACRO_UDN {UDN_FIRST = -721,UDN_LAST = -740,};
enum MACRO_UDP {UDP_NOCHECKSUM = 1,UDP_CHECKSUM_COVERAGE = 20,};
enum MACRO_UDS {UDS_WRAP = 0x1,UDS_SETBUDDYINT = 0x2,UDS_ALIGNRIGHT = 0x4,UDS_ALIGNLEFT = 0x8,UDS_AUTOBUDDY = 0x10,UDS_ARROWKEYS = 0x20,UDS_HORZ = 0x40,UDS_NOTHOUSANDS = 0x80,UDS_HOTTRACK = 0x100,UDS_EXPANDABLE = 0x200,UDS_NOSCROLL = 0x400,};
enum MACRO_UIL {UIL_FORCE_UI = 0x80000001,};
enum MACRO_URL {URL_MK_LEGACY = 0,URL_MK_UNIFORM = 1,URL_MK_NO_CANONICALIZE = 2,};
enum MACRO_USB {USB_GETSTATUS_SELF_POWERED = 0x1,USB_GETSTATUS_REMOTE_WAKEUP_ENABLED = 0x2,USB_DEVICE_DESCRIPTOR_TYPE = 0x1,USB_CONFIGURATION_DESCRIPTOR_TYPE = 0x2,USB_STRING_DESCRIPTOR_TYPE = 0x3,USB_INTERFACE_DESCRIPTOR_TYPE = 0x4,USB_ENDPOINT_DESCRIPTOR_TYPE = 0x5,USB_POWER_DESCRIPTOR_TYPE = 0x6,USB_ENDPOINT_TYPE_MASK = 0x3,USB_ENDPOINT_TYPE_CONTROL = 0x0,USB_ENDPOINT_TYPE_ISOCHRONOUS = 0x1,USB_ENDPOINT_TYPE_BULK = 0x2,USB_ENDPOINT_TYPE_INTERRUPT = 0x3,USB_CONFIG_POWERED_MASK = 0xC0,USB_CONFIG_BUS_POWERED = 0x80,USB_CONFIG_SELF_POWERED = 0x40,USB_CONFIG_REMOTE_WAKEUP = 0x20,USB_ENDPOINT_DIRECTION_MASK = 0x80,USB_REQUEST_GET_STATUS = 0x0,USB_REQUEST_CLEAR_FEATURE = 0x1,USB_REQUEST_SET_FEATURE = 0x3,USB_REQUEST_SET_ADDRESS = 0x5,USB_REQUEST_GET_DESCRIPTOR = 0x6,USB_REQUEST_SET_DESCRIPTOR = 0x7,USB_REQUEST_GET_CONFIGURATION = 0x8,USB_REQUEST_SET_CONFIGURATION = 0x9,USB_REQUEST_GET_INTERFACE = 0xA,USB_REQUEST_SET_INTERFACE = 0xB,USB_REQUEST_SYNC_FRAME = 0xC,USB_DEVICE_CLASS_RESERVED = 0x0,USB_DEVICE_CLASS_AUDIO = 0x1,USB_DEVICE_CLASS_COMMUNICATIONS = 0x2,USB_DEVICE_CLASS_HUMAN_INTERFACE = 0x3,USB_DEVICE_CLASS_MONITOR = 0x4,USB_DEVICE_CLASS_PHYSICAL_INTERFACE = 0x5,USB_DEVICE_CLASS_POWER = 0x6,USB_DEVICE_CLASS_PRINTER = 0x7,USB_DEVICE_CLASS_STORAGE = 0x8,USB_DEVICE_CLASS_HUB = 0x9,USB_DEVICE_CLASS_VENDOR_SPECIFIC = 0xFF,USB_FEATURE_ENDPOINT_STALL = 0x0,USB_FEATURE_REMOTE_WAKEUP = 0x1,USB_FEATURE_POWER_D0 = 0x2,USB_FEATURE_POWER_D1 = 0x3,USB_FEATURE_POWER_D2 = 0x4,USB_FEATURE_POWER_D3 = 0x5,};
enum MACRO_USM {USM_AVAILABLESIDONLY = 0x1,};
enum MACRO_VAR {VAR_TIMEVALUEONLY = 0x1,VAR_DATEVALUEONLY = 0x2,};
enum MACRO_VER {VER_SERVER_NT = 0x80000000,VER_WORKSTATION_NT = 0x40000000,VER_SUITE_SMALLBUSINESS = 0x1,VER_SUITE_ENTERPRISE = 0x2,VER_SUITE_BACKOFFICE = 0x4,VER_SUITE_COMMUNICATIONS = 0x8,VER_SUITE_TERMINAL = 0x10,VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x20,};
enum MACRO_VFF {VFF_CURNEDEST = 0x1,VFF_FILEINUSE = 0x2,VFF_BUFFTOOSMALL = 0x4,};
enum MACRO_VFT {VFT_UNKNOWN = 0x0,VFT_APP = 0x1,VFT_DLL = 0x2,VFT_DRV = 0x3,VFT_FONT = 0x4,VFT_VXD = 0x5,VFT_STATIC_LIB = 0x7,};
enum MACRO_VFW {VFW_FIRST_CODE = 0x200,};
enum MACRO_VIF {VIF_TEMPFILE = 0x1,VIF_MISMATCH = 0x2,VIF_SRCOLD = 0x4,VIF_DIFFLANG = 0x8,VIF_DIFFCODEPG = 0x10,VIF_DIFFTYPE = 0x20,VIF_WRITEPROT = 0x40,VIF_FILEINUSE = 0x80,VIF_OUTOFSPACE = 0x100,VIF_ACCESSVIOLATION = 0x200,VIF_SHARINGVIOLATION = 0x400,VIF_CANNOTCREATE = 0x800,VIF_CANNOTDELETE = 0x1000,VIF_CANNOTRENAME = 0x2000,VIF_CANNOTDELETECUR = 0x4000,VIF_OUTOFMEMORY = 0x8000,VIF_CANNOTREADSRC = 0x10000,VIF_CANNOTREADDST = 0x20000,VIF_BUFFTOOSMALL = 0x40000,};
enum MACRO_VMS {VMS_NOT_READY = 0,VMS_INITIALIZED = 1,VMS_REGISTERED = 2,VMS_SHUTTING_DOWN = 4,VMS_CALL_LOG_DB_READY = 8,VMS_CALLER_INFO_DB_READY = 16,VMS_AUTOFORWARDING = 32,VMS_DBS_READY = 24,VMS_REREGISTERING = 64,};
enum MACRO_VOS {VOS_UNKNOWN = 0x0,VOS_DOS = 0x10000,VOS_OS216 = 0x20000,VOS_OS232 = 0x30000,VOS_NT = 0x40000,VOS_WINDOWSCE = 0x50000,VOS__BASE = 0x0,VOS__WINDOWS16 = 0x1,VOS__PM16 = 0x2,VOS__PM32 = 0x3,VOS__WINDOWS32 = 0x4,VOS_DOS_WINDOWS16 = 0x10001,VOS_DOS_WINDOWS32 = 0x10004,VOS_OS216_PM16 = 0x20002,VOS_OS232_PM32 = 0x30003,VOS_NT_WINDOWS32 = 0x40004,VOS_CE_WINDOWS32 = 0x50004,};
enum MACRO_VSC {VSC_LIKESISTREAM = 0x1,VSC_LIKESFILE = 0x2,VSC_LIKESHGLOBAL = 0x4,VSC_HASMOREINFO = 0x8,};
enum MACRO_WAB {WAB_LOCAL_CONTAINERS = 0x100000,WAB_PROFILE_CONTENTS = 0x200000,};
enum MACRO_WAN {WAN_PROTOCOL_KEEPS_STATS = 0x1,};
enum MACRO_WCE {WCE_AF_IRDA = 22,WCE_PF_IRDA = 22,};
enum MACRO_WDT {WDT_INPROC_CALL = 0x48746457,WDT_REMOTE_CALL = 0x52746457,};
enum MACRO_WIM {WIM_OPEN = 958,WIM_CLOSE = 959,WIM_DATA = 960,};
enum MACRO_WIN {WIN_ATTR_IO_SPACE = 0x1,WIN_ATTR_ATTRIBUTE = 0x2,WIN_ATTR_ENABLED = 0x4,WIN_ATTR_16BIT = 0x8,WIN_ATTR_PAGED = 0x10,WIN_ATTR_SHARED = 0x20,WIN_ATTR_FIRST_SHARED = 0x40,WIN_ATTR_OFFSETS_SIZED = 0x100,WIN_ATTR_ACCESS_SPEED_VALID = 0x200,WIN_SPEED_EXP_MASK = 0x7,WIN_SPEED_EXP_1NS = 0x0,WIN_SPEED_EXP_10NS = 0x1,WIN_SPEED_EXP_100NS = 0x2,WIN_SPEED_EXP_1US = 0x3,WIN_SPEED_EXP_10US = 0x4,WIN_SPEED_EXP_100US = 0x5,WIN_SPEED_EXP_1MS = 0x6,WIN_SPEED_EXP_10MS = 0x7,WIN_SPEED_MANT_MASK = 0x78,WIN_SPEED_MANT_10 = 0x8,WIN_SPEED_MANT_12 = 0x10,WIN_SPEED_MANT_13 = 0x18,WIN_SPEED_MANT_15 = 0x20,WIN_SPEED_MANT_20 = 0x28,WIN_SPEED_MANT_25 = 0x30,WIN_SPEED_MANT_30 = 0x38,WIN_SPEED_MANT_35 = 0x40,WIN_SPEED_MANT_40 = 0x48,WIN_SPEED_MANT_45 = 0x50,WIN_SPEED_MANT_50 = 0x58,WIN_SPEED_MANT_55 = 0x60,WIN_SPEED_MANT_60 = 0x68,WIN_SPEED_MANT_70 = 0x70,WIN_SPEED_MANT_80 = 0x78,WIN_SPEED_USE_WAIT = 0x80,};
enum MACRO_WIZ {WIZ_CXDLG = 276,WIZ_CYDLG = 140,WIZ_CXBMP = 80,WIZ_BODYX = 92,WIZ_BODYCX = 184,};
enum MACRO_WMT {WMT_DRMSTATUS_GENERIC = 0x0,WMT_DRMSTATUS_BEGINLICENSE = 0x1,WMT_DRMSTATUS_ENDLICENSE = 0x2,WMT_DRMSTATUS_BEGININDIV = 0x3,WMT_DRMSTATUS_ENDINDIV = 0x4,};
enum MACRO_WOM {WOM_OPEN = 955,WOM_CLOSE = 956,WOM_DONE = 957,};
enum MACRO_WPF {WPF_HTML = 0x1,WPF_AUTOINLINE = 0x2,WPF_SLIDESHOW = 0x4,WPF_ATTACHLINKS = 0x8,WPF_IMAGESONLY = 0x10,WPF_NOMETACHARSET = 0x20,};
enum MACRO_WSA {WSA_IO_PENDING = 997,WSA_IO_INCOMPLETE = 996,WSA_INVALID_HANDLE = 6,WSA_INVALID_PARAMETER = 87,WSA_NOT_ENOUGH_MEMORY = 8,WSA_OPERATION_ABORTED = 995,WSA_INVALID_EVENT = 0,WSA_MAXIMUM_WAIT_EVENTS = 64,WSA_WAIT_FAILED = -1,WSA_WAIT_EVENT_0 = 0,WSA_WAIT_TIMEOUT = 258,WSA_INFINITE = -1,};
enum MACRO_WSS {WSS_OPERATION_IN_PROGRESS = 0x103,};
enum MACRO_WTD {WTD_UI_ALL = 1,WTD_UI_NONE = 2,WTD_UI_NOBAD = 3,WTD_UI_NOGOOD = 4,WTD_REVOKE_NONE = 0,WTD_REVOKE_WHOLECHAIN = 1,WTD_CHOICE_FILE = 1,WTD_CHOICE_CATALOG = 2,WTD_CHOICE_BLOB = 3,WTD_CHOICE_SIGNER = 4,WTD_CHOICE_CERT = 5,WTD_STATEACTION_IGNORE = 0,WTD_STATEACTION_VERIFY = 1,WTD_STATEACTION_CLOSE = 2,WTD_STATEACTION_AUTO_CACHE = 3,WTD_STATEACTION_AUTO_CACHE_FLUSH = 4,WTD_PROV_FLAGS_MASK = 65535,WTD_USE_IE4_TRUST_FLAG = 1,WTD_NO_IE4_CHAIN_FLAG = 2,WTD_NO_POLICY_USAGE_FLAG = 4,WTD_REVOCATION_CHECK_NONE = 16,WTD_REVOCATION_CHECK_END_CERT = 32,WTD_REVOCATION_CHECK_CHAIN = 64,WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 128,};
enum MACRO_WZC {WZC_STARTED = 0xFFFFFFFF,WZC_ASSOCIATING = 0x1,WZC_FAILED_ASSOCIATION = 0x2,WZC_SUCCESSFUL_ASSOCIATION = 0x3,WZC_CLOSE_EAPOL_SESSION = 0x4,WZC_AUTHENTICATING = 0x5,WZC_AUTHENTICATED = 0x6,WZC_CANCEL_AUTH = 0x7,WZC_FAILED_AUTH_NO_RETRY = 0x8,WZC_FAILED_AUTH_WILL_RETRY = 0x9,WZC_PREFERED_LIST_EXHAUSTED = 0xA,WZC_REAUTHENTICATING = 0xB,WZC_VISIBLE_NETWORK = 0xC,WZC_ASSOCIATED_NO_8021X = 0x3,WZC_ASSOCIATED_REQUIRES_8021X = 0xD,};
enum MACRO_XP1 {XP1_CONNECTIONLESS = 0x1,XP1_GUARANTEED_DELIVERY = 0x2,XP1_GUARANTEED_ORDER = 0x4,XP1_MESSAGE_ORIENTED = 0x8,XP1_PSEUDO_STREAM = 0x10,XP1_GRACEFUL_CLOSE = 0x20,XP1_EXPEDITED_DATA = 0x40,XP1_CONNECT_DATA = 0x80,XP1_DISCONNECT_DATA = 0x100,XP1_SUPPORT_BROADCAST = 0x200,XP1_SUPPORT_MULTIPOINT = 0x400,XP1_MULTIPOINT_CONTROL_PLANE = 0x800,XP1_MULTIPOINT_DATA_PLANE = 0x1000,XP1_QOS_SUPPORTED = 0x2000,XP1_INTERRUPT = 0x4000,XP1_UNI_SEND = 0x8000,XP1_UNI_RECV = 0x10000,XP1_IFS_HANDLES = 0x20000,XP1_PARTIAL_MESSAGE = 0x40000,};
enum MACRO__CW {_CW_DEFAULT = 65567,};
enum MACRO__DN {_DN_FLUSH = 0x1000000,_DN_SAVE = 0x0,};
enum MACRO__EM {_EM_INEXACT = 0x1,_EM_UNDERFLOW = 0x2,_EM_OVERFLOW = 0x4,_EM_ZERODIVIDE = 0x8,_EM_INVALID = 0x10,};
enum MACRO__IC {_IC_AFFINE = 0x40000,_IC_PROJECTIVE = 0x0,};
enum MACRO__PC {_PC_64 = 0x0,_PC_53 = 0x10000,_PC_24 = 0x20000,};
enum MACRO__RC {_RC_NEAR = 0x0,_RC_DOWN = 0x100,_RC_UP = 0x200,_RC_CHOP = 0x300,};
enum MACRO__SO {_SO_SSL = 275972096,_SO_SSL_CAPABILITIES = 1,_SO_SSL_FLAGS = 2,_SO_SSL_PROTOCOLS = 3,_SO_SSL_CIPHERS = 4,_SO_SSL_CLIENT_OPTS = 5,_SO_SSL_SERVER_OPTS = 6,_SO_SSL_CLIENT_AUTH_OPTS = 7,_SO_SSL_VALIDATE_CERT_HOOK = 8,_SO_SSL_AUTH_REQUEST_HOOK = 9,_SO_SSL_KEY_EXCH_HOOK = 10,_SO_SSL_SIGNATURE_HOOK = 11,_SO_SSL_PERFORM_HANDSHAKE = 13,_SO_SSL_CONNECTION_INFO = 14,};
enum MACRO__SS {_SS_MAXSIZE = 128,};
enum MACRO__SW {_SW_INEXACT = 0x1,_SW_UNDERFLOW = 0x2,_SW_OVERFLOW = 0x4,_SW_ZERODIVIDE = 0x8,_SW_INVALID = 0x10,};
typedef struct _MAPHEADER MAPHEADER;
typedef struct _MAPIERROR MAPIERROR;
typedef struct _MIB_IFROW MIB_IFROW;
typedef struct midievent_tag MIDIEVENT;
typedef struct tagMIXERCAPS MIXERCAPS;
typedef struct tMIXERLINE MIXERLINE;
typedef struct tagMQQMPROPS MQQMPROPS;
typedef struct tagMQSORTKEY MQSORTKEY;
typedef struct tagMQSORTSET MQSORTSET;
typedef struct _NDIS_GUID NDIS_GUID;
typedef struct tagNMHEADERA NMHEADERA;
typedef struct tagNMHEADERW NMHEADERW;
typedef struct tagNMNEWMENU NMNEWMENU;
typedef struct tagNNTPGROUP NNTPGROUP;
typedef struct tagIMEINFO *NPIMEINFO;
typedef struct midihdr_tag *NPMIDIHDR;
typedef struct _RGNDATA *NPRGNDATA;
typedef struct wavehdr_tag *NPWAVEHDR;
typedef struct tagOBO_TOKEN OBO_TOKEN;
typedef struct _OFNOTIFYA OFNOTIFYA;
typedef struct _OFNOTIFYW OFNOTIFYW;
typedef struct _OLESTREAM OLESTREAM;
enum OSPFORMAT {OSPFORMAT_RAW = 0x0,OSPFORMAT_DEFAULT = 0x0,OSPFORMAT_FORMATTED = 0x1,OSPFORMAT_HTML = 0x2,};
typedef void *P3PHANDLE;
typedef struct tagPAGERANGE PAGERANGE;
typedef struct tagPARAMDATA PARAMDATA;
typedef struct tagPARAMDESC PARAMDESC;
typedef struct _CERT_RDN *PCERT_RDN;
typedef struct _CPS_URLS *PCPS_URLS;
typedef struct _CRYPTOAPI_BLOB *PCRL_BLOB;
typedef struct _CRL_INFO *PCRL_INFO;
typedef struct _CTL_INFO *PCTL_INFO;
typedef struct _devicemodeA *PDEVMODEA;
typedef struct _devicemodeW *PDEVMODEW;
typedef IEnumPins *PENUMPINS;
typedef struct _FILETIME *PFILETIME;
typedef struct _flowspec *PFLOWSPEC;
typedef struct _FPO_DATA *PFPO_DATA;
typedef short *PHALF_PTR;
typedef struct phonecaps_tag PHONECAPS;
typedef struct tagHWXGUIDE *PHWXGUIDE;
typedef struct in6_addr *PIN6_ADDR;
typedef struct _IO_TIMER *PIO_TIMER;
typedef struct ldapmodA *PLDAPModA;
typedef struct ldapmodW *PLDAPModW;
typedef struct tagLOGBRUSH *PLOGBRUSH;
typedef struct tagLOGFONTA *PLOGFONTA;
typedef struct tagLOGFONTW *PLOGFONTW;
typedef int *PLONG_PTR;
typedef struct _MIB_ICMP *PMIB_ICMP;
typedef struct _MMCKINFO *PMMCKINFO;
typedef struct _MMIOINFO *PMMIOINFO;
typedef struct tagNMRGINFO *PNMRGINFO;
typedef int *PNTSTATUS;
typedef struct tagPARTINFO *PPARTINFO;
typedef struct _PCI_RSRC *PPCI_RSRC;
typedef struct protoent *PPROTOENT;
typedef struct _SCH_CRED *PSCH_CRED;
typedef struct _PSHNOTIFY PSHNOTIFY;
typedef struct tagSHRGI *PSHRGINFO;
typedef struct sockaddr *PSOCKADDR;
typedef struct SPC_LINK_ *PSPC_LINK;
typedef struct _TBBUTTON *PTBBUTTON;
typedef struct timecaps_tag *PTIMECAPS;
typedef struct _TRUSTEE_A *PTRUSTEEA;
typedef struct _TRUSTEE_W *PTRUSTEEW;
typedef unsigned int *PUINT_PTR;
struct PostAgent;
typedef struct tagQACONTROL QACONTROL;
typedef struct tagREBARINFO REBARINFO;
typedef struct __MIDL___MIDL_itf_strmif_0076_0001 REGFILTER;
typedef struct tagRGBTRIPLE RGBTRIPLE;
typedef struct _riffchunk RIFFCHUNK;
typedef struct _RPC_IF_ID RPC_IF_ID;
typedef struct _RSAPUBKEY RSAPUBKEY;
struct RTCClient;
enum RTC_EVENT {RTCE_CLIENT = 0x0,RTCE_REGISTRATION_STATE_CHANGE = 0x1,RTCE_SESSION_STATE_CHANGE = 0x2,RTCE_SESSION_OPERATION_COMPLETE = 0x3,RTCE_PARTICIPANT_STATE_CHANGE = 0x4,RTCE_MEDIA = 0x5,RTCE_INTENSITY = 0x6,RTCE_MESSAGING = 0x7,RTCE_BUDDY = 0x8,RTCE_WATCHER = 0x9,RTCE_PROFILE = 0xA,RTCE_USERSEARCH = 0xB,RTCE_INFO = 0xC,RTCE_GROUP = 0xD,RTCE_MEDIA_REQUEST = 0xE,RTCE_ROAMING = 0xF,RTCE_PRESENCE_PROPERTY = 0x10,RTCE_PRESENCE_DATA = 0x11,RTCE_PRESENCE_STATUS = 0x12,RTCE_SESSION_REFER_STATUS = 0x13,RTCE_SESSION_REFERRED = 0x14,RTCE_REINVITE = 0x15,};
typedef struct tagRemBRUSH RemHBRUSH;
typedef struct tagSAFEARRAY SAFEARRAY;
typedef struct _SPC_IMAGE SPC_IMAGE;
typedef struct tagSTOREINFO STOREINFO;
typedef struct tagSTYLEBUFA STYLEBUFA;
typedef struct tagSTYLEBUFW STYLEBUFW;
struct Scriptlet;
struct SdpRecord;
struct SdpSearch;
struct SdpStream;
typedef struct _SecBuffer SecBuffer;
typedef struct _SecHandle SecHandle;
typedef struct _tagTASKDATA TASK_DATA;
typedef struct _PUBKEY TEKPUBKEY;
typedef struct tagTPMPARAMS TPMPARAMS;
typedef struct _TRIVERTEX TRIVERTEX;
typedef struct _TRUSTEE_A TRUSTEE_A;
typedef struct _TRUSTEE_W TRUSTEE_W;
typedef unsigned short UHALF_PTR;
typedef unsigned long long ULONGLONG;
typedef unsigned int ULONG_PTR;
typedef struct _USB_FUNCS USB_FUNCS;
typedef struct varstring_tag VARSTRING;
typedef struct tagVIDEOINFO VIDEOINFO;
typedef struct _tagVIRUSINFO VIRUSINFO;
struct VirusScan;
typedef struct _tagWAB_PARAM WAB_PARAM;
typedef struct tagWINDOWPOS WINDOWPOS;
typedef struct tagWNDCLASSA WNDCLASSA;
typedef struct tagWNDCLASSW WNDCLASSW;
typedef struct _WORD_BLOB WORD_BLOB;
enum XACTCONST {XACTCONST_TIMEOUTINFINITE = 0x0,};
struct XMLHTTP26;
struct XMLHTTP30;
struct XMLParser;
typedef struct _xml_error XML_ERROR;
enum _D3DBLEND {D3DBLEND_ZERO = 0x1,D3DBLEND_ONE = 0x2,D3DBLEND_SRCCOLOR = 0x3,D3DBLEND_INVSRCCOLOR = 0x4,D3DBLEND_SRCALPHA = 0x5,D3DBLEND_INVSRCALPHA = 0x6,D3DBLEND_DESTALPHA = 0x7,D3DBLEND_INVDESTALPHA = 0x8,D3DBLEND_DESTCOLOR = 0x9,D3DBLEND_INVDESTCOLOR = 0xA,D3DBLEND_SRCALPHASAT = 0xB,D3DBLEND_BOTHSRCALPHA = 0xC,D3DBLEND_BOTHINVSRCALPHA = 0xD,D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,};
struct _FLOAT128 {long long LowPart;long long HighPart;};
enum _TASKPAGE {TASKPAGE_TASK = 0x0,TASKPAGE_SCHEDULE = 0x1,TASKPAGE_SETTINGS = 0x2,};
typedef struct _683A376D3D72D8A4C1C01AE0B36D8AA2 _U32ARRAY;
enum _htmlLoop {htmlLoopLoopInfinite = 0xFFFFFFFF,htmlLoop_Max = 0x7FFFFFFF,};
enum _htmlUnit {htmlUnitCharacter = 0x1,htmlUnitWord = 0x2,htmlUnitSentence = 0x3,htmlUnitTextEdit = 0x6,htmlUnit_Max = 0x7FFFFFFF,};
enum _htmlWrap {htmlWrapOff = 0x1,htmlWrapSoft = 0x2,htmlWrapHard = 0x3,htmlWrap_Max = 0x7FFFFFFF,};
typedef int (*_onexit_t)();
enum _styleDir {styleDirNotSet = 0x0,styleDirLeftToRight = 0x1,styleDirRightToLeft = 0x2,styleDirInherit = 0x3,styleDir_Max = 0x7FFFFFFF,};
typedef int ber_int_t;
typedef unsigned int ber_tag_t;
typedef int mbstate_t;
typedef int ptrdiff_t;
typedef int socklen_t;
enum tagBRMODE {BM_NORMAL = 0x0,BM_SCREENSAVER = 0x1,BM_DESKTOP = 0x2,BM_THEATER = 0x3,BM_UNKNOWN = 0x4,};
enum tagCLSCTX {CLSCTX_INPROC_SERVER = 0x1,CLSCTX_INPROC_HANDLER = 0x2,CLSCTX_LOCAL_SERVER = 0x4,CLSCTX_INPROC_SERVER16 = 0x8,CLSCTX_REMOTE_SERVER = 0x10,CLSCTX_INPROC_HANDLER16 = 0x20,CLSCTX_INPROC_SERVERX86 = 0x40,CLSCTX_INPROC_HANDLERX86 = 0x80,};
enum tagCOINIT {COINIT_APARTMENTTHREADED = 0x2,COINIT_MULTITHREADED = 0x0,COINIT_DISABLE_OLE1DDE = 0x4,COINIT_SPEED_OVER_MEMORY = 0x8,};
enum tagDSNRET {DSNRET_DEFAULT = 0x0,DSNRET_HDRS = 0x1,DSNRET_FULL = 0x2,};
enum tagMEMCTX {MEMCTX_TASK = 0x1,MEMCTX_SHARED = 0x2,MEMCTX_MACSYSTEM = 0x3,MEMCTX_UNKNOWN = 0xFFFFFFFF,MEMCTX_SAME = 0xFFFFFFFE,};
enum tagMSHCTX {MSHCTX_LOCAL = 0x0,MSHCTX_NOSHAREDMEM = 0x1,MSHCTX_DIFFERENTMACHINE = 0x2,MSHCTX_INPROC = 0x3,};
enum tagREGCLS {REGCLS_SINGLEUSE = 0x0,REGCLS_MULTIPLEUSE = 0x1,REGCLS_MULTI_SEPARATE = 0x2,REGCLS_SUSPENDED = 0x4,REGCLS_SURROGATE = 0x8,};
enum tagTYSPEC {TYSPEC_CLSID = 0x0,TYSPEC_FILEEXT = 0x1,TYSPEC_MIMETYPE = 0x2,TYSPEC_FILENAME = 0x3,TYSPEC_PROGID = 0x4,TYSPEC_PACKAGENAME = 0x5,TYSPEC_OBJECTID = 0x6,};
typedef struct addrinfo ADDRINFO;
typedef struct _ADRENTRY ADRENTRY;
typedef struct _AMVPSIZE AMVPSIZE;
typedef struct _F0080E258AF97822278D302FBC4D344F ATM_BHLI;
typedef struct _459629BAC169663B96C3B85C5F4E781B ATM_BLLI;
typedef struct _tagBINDINFO BINDINFO;
typedef struct tagBSTRBLOB BSTRBLOB;
typedef struct tagCALPWSTR CALPWSTR;
struct CDLAgent;
typedef struct _CERT_RDN CERT_RDN;
typedef struct _CI_STATE CI_STATE;
typedef struct tagCLIPDATA CLIPDATA;
typedef struct tagCOLORKEY COLORKEY;
typedef struct _COMMPROP COMMPROP;
typedef struct _CPS_URLS CPS_URLS;
struct CPlugins;
typedef struct _cqform_A CQFORM_A;
typedef struct _cqform_W CQFORM_W;
typedef struct _cqpage_A CQPAGE_A;
typedef struct _cqpage_W CQPAGE_W;
typedef struct _CRYPTOAPI_BLOB CRL_BLOB;
typedef struct _CRL_INFO CRL_INFO;
typedef struct __MIDL___MIDL_itf_dvdcom_0000_0003 CSS_SDKS;
typedef struct _CTL_INFO CTL_INFO;
typedef struct tagCUSTDATA CUSTDATA;
typedef struct _D3DCAPS8 D3DCAPS8;
typedef struct _D3DRANGE D3DRANGE;
typedef struct _tagDATAINFO DATAINFO;
typedef struct tagDBBYGUID DBBYGUID;
typedef struct _DBGPARAM DBGPARAM;
typedef struct tagDBOBJECT DBOBJECT;
typedef struct tagDBPARAMS DBPARAMS;
typedef struct tagDBVECTOR DBVECTOR;
typedef struct _DDOSCAPS DDOSCAPS;
typedef struct _DDSCAPS2 DDSCAPS2;
typedef struct _devicemodeA DEVMODEA;
typedef struct _devicemodeW DEVMODEW;
typedef struct tagDEVNAMES DEVNAMES;
typedef struct _PUBKEY DHPUBKEY;
typedef struct _DOCINFOA DOCINFOA;
typedef struct _DOCINFOW DOCINFOW;
typedef struct _DSCBCAPS DSCBCAPS;
typedef struct _115DB0BA7714D6186FAE116E0F88D0E0 DSCOLUMN;
typedef struct _DTBLEDIT DTBLEDIT;
typedef struct _DTBLPAGE DTBLPAGE;
typedef struct __MIDL_IDVDStreamControlInfo_0001 DVD_ISRC;
typedef struct __MIDL___MIDL_itf_dvdata_0105_0001 DVD_RECT;
struct DXCBND64 {double Min;double Max;};
typedef double DXCVEC64[4];
struct DXTLabel;
struct DXTScale;
typedef struct tagELEMDESC ELEMDESC;
typedef struct _FILETIME FILETIME;
typedef struct tagFINDBODY FINDBODY;
typedef struct _FLOAT128 FLOAT128;
typedef struct _flowspec FLOWSPEC;
typedef struct tagFONTDESC FONTDESC;
typedef struct _FPO_DATA FPO_DATA;
typedef struct tagFUNCDESC FUNCDESC;
typedef struct _flaglist FlagList;
struct HACCEL__ {int unused;};
typedef struct HADDRESS__ *HADDRESS;
typedef short HALF_PTR;
struct HBRUSH__ {int unused;};
typedef struct HCHARSET__ *HCHARSET;
typedef void *HCONTEXT;
typedef struct _HD_LAYOUT HDLAYOUT;
typedef  struct HDRVCALL__ *HDRVCALL;
typedef  struct HDRVLINE__ *HDRVLINE;
typedef struct tagHHNTRACK HHNTRACK;
typedef struct tagHH_POPUP HH_POPUP;
typedef struct _tagHLBWINFO HLBWINFO;
typedef  struct HLINEAPP__ *HLINEAPP;
typedef struct _tagHLTBINFO HLTBINFO;
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIXER__ {int unused;};
typedef struct HMONITOR__ *HMONITOR;
typedef struct HPALETTE__ *HPALETTE;
struct HPHONE__ {int unused;};
struct HTMLBody;
typedef struct HWAVEOUT__ *HWAVEOUT;
typedef struct tagHWXGUIDE HWXGUIDE;
struct HomePage;
struct IACList2 {struct IACList2Vtbl *lpVtbl;};
struct IAMTuner {struct IAMTunerVtbl *lpVtbl;};
struct IBindCtx {struct IBindCtxVtbl *lpVtbl;};
struct IBinding {struct IBindingVtbl *lpVtbl;};
typedef struct _ICONINFO ICONINFO;
struct ICifFile {struct ICifFileVtbl *lpVtbl;};
struct ICifMode {struct ICifModeVtbl *lpVtbl;};
struct ICommand {struct ICommandVtbl *lpVtbl;};
struct IDVDMenu {struct IDVDMenuVtbl *lpVtbl;};
struct IDvdInfo {struct IDvdInfoVtbl *lpVtbl;};
struct IEnumDMO {struct IEnumDMOVtbl *lpVtbl;};
typedef struct tagIMAPADDR IMAPADDR;
struct IMarshal {struct IMarshalVtbl *lpVtbl;};
struct IMessage {struct IMessageVtbl *lpVtbl;};
struct IMoniker {struct IMonikerVtbl *lpVtbl;};
struct IMultiQI {struct IMultiQIVtbl *lpVtbl;};
typedef struct in6_addr IN6_ADDR;
typedef struct tagINETADDR INETADDR;
struct INSOPlay {struct INSOPlayVtbl *lpVtbl;};
struct INSPlay1 {struct INSPlay1Vtbl *lpVtbl;};
struct IOleLink {struct IOleLinkVtbl *lpVtbl;};
struct IOverlay {struct IOverlayVtbl *lpVtbl;};
struct IPersist {struct IPersistVtbl *lpVtbl;};
struct IPicture {struct IPictureVtbl *lpVtbl;};
struct IPinInfo {struct IPinInfoVtbl *lpVtbl;};
typedef struct in6_addr IPv6Addr;
struct IROTData {struct IROTDataVtbl *lpVtbl;};
struct IRequest {struct IRequestVtbl *lpVtbl;};
struct ISdpWalk {struct ISdpWalkVtbl *lpVtbl;};
struct ISegment {struct ISegmentVtbl *lpVtbl;};
struct IStemmer {struct IStemmerVtbl *lpVtbl;};
struct IStorage {struct IStorageVtbl *lpVtbl;};
typedef struct _tagITEMPROP ITEMPROP;
struct ITypeLib {struct ITypeLibVtbl *lpVtbl;};
struct IUnknown {struct IUnknownVtbl *lpVtbl;};
struct IVoIPMgr {struct IVoIPMgrVtbl *lpVtbl;};
struct IWebView {struct IWebViewVtbl *lpVtbl;};
typedef struct ldapmodA LDAPModA;
typedef struct ldapmodW LDAPModW;
typedef struct tagLOGBRUSH LOGBRUSH;
typedef struct tagLOGFONTA LOGFONTA;
typedef struct tagLOGFONTW LOGFONTW;
typedef long long LONGLONG;
typedef int LONG_PTR;
typedef struct IABContainer *LPABCONT;
typedef struct IAttach *LPATTACH;
typedef struct tagBITMAP *LPBITMAP;
typedef struct tagCAUUID *LPCAUUID;
typedef struct _cpinfo *LPCPINFO;
typedef struct tagDATABLOCKHEADER *LPDBLIST;
typedef IDccMan *LPDCCMAN;
typedef struct _DSCAPS *LPDSCAPS;
typedef struct _EF67D941BFA119366B947DED69649A3B *LPDTPAGE;
typedef struct fd_set *LPFD_SET;
typedef struct linger *LPLINGER;
typedef struct tagLOGPEN *LPLOGPEN;
typedef IMalloc *LPMALLOC;
typedef struct mmtime_tag *LPMMTIME;
typedef struct tagPOINTF *LPPOINTF;
typedef struct tagPOINTS *LPPOINTS;
typedef IStream *LPSTREAM;
typedef struct _WSABUF *LPWSABUF;
enum MACRO_AB {AB_RECIPIENTS = 0x1,AB_SUBCONTAINERS = 0x2,AB_MODIFIABLE = 0x4,AB_UNMODIFIABLE = 0x8,AB_FIND_ON_OPEN = 0x10,AB_NOT_DEFAULT = 0x20,};
enum MACRO_AC {AC_LINE_OFFLINE = 0x0,AC_LINE_ONLINE = 0x1,AC_LINE_BACKUP_POWER = 0x2,AC_LINE_UNKNOWN = 0xFF,};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_IPX = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NETBIOS = 17,AF_VOICEVIEW = 18,AF_FIREFOX = 19,AF_UNKNOWN1 = 20,AF_BAN = 21,AF_IRDA = 22,AF_INET6 = 23,AF_CLUSTER = 24,AF_12844 = 25,AF_ATM = 26,AF_NETDES = 28,AF_TCNPROCESS = 29,AF_TCNMESSAGE = 30,AF_ICLFXBM = 31,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,};
enum MACRO_AM {AM_GBF_PREVFRAMESKIPPED = 1,AM_GBF_NOTASYNCPOINT = 2,AM_GBF_NOWAIT = 4,};
enum MACRO_AN {AN_ACCOUNT_DELETED = 1025,AN_ACCOUNT_ADDED = 1026,AN_ACCOUNT_CHANGED = 1027,AN_DEFAULT_CHANGED = 1028,AN_SERVERTYPES_CHANGED = 1029,AN_ACCOUNT_PREDELETE = 1030,};
enum MACRO_AP {AP_FIRST = 0x1234,};
enum MACRO_AT {AT_KEYEXCHANGE = 1,AT_SIGNATURE = 2,};
enum MACRO_BF {BF_LEFT = 0x1,BF_TOP = 0x2,BF_RIGHT = 0x4,BF_BOTTOM = 0x8,BF_DIAGONAL = 0x10,BF_DIAGONAL_ENDTOPRIGHT = 0x16,BF_DIAGONAL_ENDTOPLEFT = 0x13,BF_DIAGONAL_ENDBOTTOMLEFT = 0x19,BF_DIAGONAL_ENDBOTTOMRIGHT = 0x1C,BF_TOPLEFT = 0x3,BF_TOPRIGHT = 0x6,BF_BOTTOMLEFT = 0x9,BF_BOTTOMRIGHT = 0xC,BF_RECT = 0xF,BF_MIDDLE = 0x800,BF_SOFT = 0x1000,BF_ADJUST = 0x2000,BF_FLAT = 0x4000,BF_MONO = 0x8000,};
enum MACRO_BI {BI_RGB = 0,};
enum MACRO_BN {BN_CLICKED = 0,BN_PAINT = 1,BN_DBLCLK = 5,BN_SETFOCUS = 6,BN_KILLFOCUS = 7,};
enum MACRO_BS {BS_PATTERN = 3,BS_INDEXED = 4,BS_DIBPATTERN = 5,BS_PATTERN8X8 = 7,BS_DIBPATTERN8X8 = 8,BS_MONOPATTERN = 9,BS_SOLID = 0,BS_NULL = 1,BS_HOLLOW = 1,BS_DIBPATTERNPT = 6,};
enum MACRO_BT {BT_ADDR_NULL = 0x0,BT_ADDR_IAC_FIRST = 0x9E8B00,BT_ADDR_IAC_LAST = 0x9E8B3F,BT_ADDR_LIAC = 0x9E8B00,BT_ADDR_GIAC = 0x9E8B33,BT_PORT_NULL = 0x0,BT_PORT_WILDCARD = 0x0,BT_PORT_ANY = 0xFFFFFFFF,BT_PORT_MIN = 0x1,BT_PORT_MAX = 0xFFFF,BT_PORT_DYN_FIRST = 0x1001,BT_PORT_EXCL_BIT = 0x100,};
enum MACRO_C1 {C1_UPPER = 0x1,C1_LOWER = 0x2,C1_DIGIT = 0x4,C1_SPACE = 0x8,C1_PUNCT = 0x10,C1_CNTRL = 0x20,C1_BLANK = 0x40,C1_XDIGIT = 0x80,C1_ALPHA = 0x100,};
enum MACRO_C2 {C2_LEFTTORIGHT = 0x1,C2_RIGHTTOLEFT = 0x2,C2_EUROPENUMBER = 0x3,C2_EUROPESEPARATOR = 0x4,C2_EUROPETERMINATOR = 0x5,C2_ARABICNUMBER = 0x6,C2_COMMONSEPARATOR = 0x7,C2_BLOCKSEPARATOR = 0x8,C2_SEGMENTSEPARATOR = 0x9,C2_WHITESPACE = 0xA,C2_OTHERNEUTRAL = 0xB,C2_NOTAPPLICABLE = 0x0,};
enum MACRO_C3 {C3_NONSPACING = 0x1,C3_DIACRITIC = 0x2,C3_VOWELMARK = 0x4,C3_SYMBOL = 0x8,C3_KATAKANA = 0x10,C3_HIRAGANA = 0x20,C3_HALFWIDTH = 0x40,C3_FULLWIDTH = 0x80,C3_IDEOGRAPH = 0x100,C3_KASHIDA = 0x200,C3_LEXICAL = 0x400,C3_ALPHA = 0x8000,C3_NOTAPPLICABLE = 0x0,};
enum MACRO_CB {CB_OKAY = 0,CB_ERR = -1,CB_ERRSPACE = -2,};
enum MACRO_CC {CC_NONE = 0,CC_CIRCLES = 1,CC_PIE = 2,CC_CHORD = 4,CC_ELLIPSES = 8,CC_WIDE = 16,CC_STYLED = 32,CC_WIDESTYLED = 64,CC_INTERIORS = 128,CC_ROUNDRECT = 256,};
enum MACRO_CE {CE_RXOVER = 0x1,CE_OVERRUN = 0x2,CE_RXPARITY = 0x4,CE_FRAME = 0x8,CE_BREAK = 0x10,CE_TXFULL = 0x100,CE_PTO = 0x200,CE_IOE = 0x400,CE_DNS = 0x800,CE_OOP = 0x1000,CE_MODE = 0x8000,};
enum MACRO_CF {CF_TEXT = 1,CF_BITMAP = 2,CF_SYLK = 4,CF_DIF = 5,CF_TIFF = 6,CF_OEMTEXT = 7,CF_DIB = 8,CF_PALETTE = 9,CF_PENDATA = 10,CF_RIFF = 11,CF_WAVE = 12,CF_UNICODETEXT = 13,};
enum MACRO_CI {CI_CORRUPT_DATABASE = 0xC0041800,CI_CORRUPT_CATALOG = 0xC0041801,CI_INVALID_PARTITION = 0xC0041802,CI_INVALID_PRIORITY = 0xC0041803,CI_NO_STARTING_KEY = 0xC0041804,CI_OUT_OF_INDEX_IDS = 0xC0041805,CI_NO_CATALOG = 0xC0041806,CI_CORRUPT_FILTER_BUFFER = 0xC0041807,CI_INVALID_INDEX = 0xC0041808,CI_PROPSTORE_INCONSISTENCY = 0xC0041809,CI_E_ALREADY_INITIALIZED = 0x8004180A,CI_E_NOT_INITIALIZED = 0x8004180B,CI_E_BUFFERTOOSMALL = 0x8004180C,CI_E_PROPERTY_NOT_CACHED = 0x8004180D,CI_S_WORKID_DELETED = 0x4180E,CI_E_INVALID_STATE = 0x8004180F,CI_E_FILTERING_DISABLED = 0x80041810,CI_E_DISK_FULL = 0x80041811,CI_E_SHUTDOWN = 0x80041812,CI_E_WORKID_NOTVALID = 0x80041813,CI_S_END_OF_ENUMERATION = 0x41814,CI_E_NOT_FOUND = 0x80041815,CI_E_USE_DEFAULT_PID = 0x80041816,CI_E_DUPLICATE_NOTIFICATION = 0x80041817,CI_E_UPDATES_DISABLED = 0x80041818,CI_E_INVALID_FLAGS_COMBINATION = 0x80041819,CI_E_OUTOFSEQ_INCREMENT_DATA = 0x8004181A,CI_E_SHARING_VIOLATION = 0x8004181B,CI_E_LOGON_FAILURE = 0x8004181C,CI_E_NO_CATALOG = 0x8004181D,CI_E_STRANGE_PAGEORSECTOR_SIZE = 0x8004181E,CI_E_TIMEOUT = 0x8004181F,CI_E_NOT_RUNNING = 0x80041820,CI_INCORRECT_VERSION = 0xC0041821,CI_E_ENUMERATION_STARTED = 0xC0041822,CI_E_PROPERTY_TOOLARGE = 0xC0041823,CI_E_CLIENT_FILTER_ABORT = 0xC0041824,CI_S_NO_DOCSTORE = 0x41825,CI_S_CAT_STOPPED = 0x41826,CI_E_CARDINALITY_MISMATCH = 0x80041827,CI_E_CONFIG_DISK_FULL = 0x80041828,};
enum MACRO_CO {CO_E_FIRST = 0x800401F0,CO_E_LAST = 0x800401FF,CO_S_FIRST = 0x401F0,CO_S_LAST = 0x401FF,};
enum MACRO_CP {CP_INSTALLED = 0x1,CP_SUPPORTED = 0x2,};
enum MACRO_CS {CS_E_FIRST = 0x80040164,CS_E_LAST = 0x8004016F,};
enum MACRO_CT {CT_CTYPE1 = 0x1,CT_CTYPE2 = 0x2,CT_CTYPE3 = 0x4,};
enum MACRO_CW {CW_DEFAULT = 65567,};
enum MACRO_DB {DB_CEOID_CREATED = 0x401,DB_CEOID_DATABASE_DELETED = 0x402,DB_CEOID_RECORD_DELETED = 0x403,DB_CEOID_FILE_DELETED = 0x404,DB_CEOID_DIRECTORY_DELETED = 0x405,DB_CEOID_CHANGED = 0x406,};
enum MACRO_DC {DC_FIELDS = 1,DC_PAPERS = 2,DC_PAPERSIZE = 3,DC_MINEXTENT = 4,DC_MAXEXTENT = 5,DC_BINS = 6,DC_DUPLEX = 7,DC_SIZE = 8,DC_EXTRA = 9,DC_VERSION = 10,DC_DRIVER = 11,DC_BINNAMES = 12,DC_ENUMRESOLUTIONS = 13,DC_FILEDEPENDENCIES = 14,DC_TRUETYPE = 15,DC_PAPERNAMES = 16,DC_ORIENTATION = 17,DC_COPIES = 18,};
enum MACRO_DD {DD_DEFSCROLLINSET = 11,DD_DEFSCROLLDELAY = 50,DD_DEFSCROLLINTERVAL = 50,DD_DEFDRAGDELAY = 200,DD_DEFDRAGMINDIST = 2,};
enum MACRO_DI {DI_MASK = 0x1,DI_IMAGE = 0x2,DI_NORMAL = 0x3,};
enum MACRO_DM {DM_UPDATE = 1,DM_COPY = 2,DM_PROMPT = 4,DM_MODIFY = 8,DM_IN_BUFFER = 8,DM_IN_PROMPT = 4,DM_OUT_BUFFER = 2,DM_OUT_DEFAULT = 1,};
enum MACRO_DN {DN_DEFAULTPRN = 0x1,};
enum MACRO_DO {DO_VERIFY_VOLUME = 0x2,DO_BUFFERED_IO = 0x4,DO_EXCLUSIVE = 0x8,DO_DIRECT_IO = 0x10,DO_MAP_IO_BUFFER = 0x20,DO_DEVICE_HAS_NAME = 0x40,DO_DEVICE_INITIALIZING = 0x80,DO_SYSTEM_BOOT_PARTITION = 0x100,DO_LONG_TERM_REQUESTS = 0x200,DO_NEVER_LAST_DEVICE = 0x400,DO_SHUTDOWN_REGISTERED = 0x800,DO_BUS_ENUMERATED_DEVICE = 0x1000,};
enum MACRO_DS {DS_LOCALEDIT = 0x20,DS_SETFONT = 0x40,DS_MODALFRAME = 0x80,DS_SETFOREGROUND = 0x200,DS_3DLOOK = 0x4,DS_CONTROL = 0x400,DS_CENTER = 0x800,DS_NOCLOSEBTN = 0x4000,};
enum MACRO_DT {DT_PLOTTER = 0,DT_RASDISPLAY = 1,DT_RASPRINTER = 2,DT_RASCAMERA = 3,DT_CHARSTREAM = 4,DT_DISPFILE = 6,};
enum MACRO_DX {DX_MAX_RUN_INFO_COUNT = 128,};
enum MACRO_EC {EC_LEFTMARGIN = 0x1,EC_RIGHTMARGIN = 0x2,EC_USEFONTINFO = 0xFFFF,};
enum MACRO_ED {ED_BASE = 0x1000,};
enum MACRO_EM {EM_INVALID = 16,EM_ZERODIVIDE = 8,EM_OVERFLOW = 4,EM_UNDERFLOW = 2,EM_INEXACT = 1,EM_DENORMAL = 524288,};
enum MACRO_EN {EN_SETFOCUS = 0x100,EN_KILLFOCUS = 0x200,EN_CHANGE = 0x300,EN_UPDATE = 0x400,EN_ERRSPACE = 0x500,EN_MAXTEXT = 0x501,EN_HSCROLL = 0x601,EN_VSCROLL = 0x602,};
enum MACRO_ES {ES_SYSTEM_REQUIRED = 0x1,ES_DISPLAY_REQUIRED = 0x2,ES_USER_PRESENT = 0x4,ES_CONTINUOUS = 0x80000000,};
enum MACRO_EV {EV_RXCHAR = 0x1,EV_RXFLAG = 0x2,EV_TXEMPTY = 0x4,EV_CTS = 0x8,EV_DSR = 0x10,EV_RLSD = 0x20,EV_BREAK = 0x40,EV_ERR = 0x80,EV_RING = 0x100,EV_PERR = 0x200,EV_RX80FULL = 0x400,EV_EVENT1 = 0x800,EV_EVENT2 = 0x1000,EV_POWER = 0x2000,};
enum MACRO_EW {EW_RESTARTWINDOWS = 0x42,EW_REBOOTSYSTEM = 0x43,EW_EXITANDEXECAPP = 0x44,};
enum MACRO_FD {FD_SETSIZE = 64,};
enum MACRO_FF {FF_DONTCARE = 0,FF_ROMAN = 16,FF_SWISS = 32,FF_MODERN = 48,FF_SCRIPT = 64,FF_DECORATIVE = 80,};
enum MACRO_FL {FL_FULLSTRING = 0x0,FL_SUBSTRING = 0x1,FL_PREFIX = 0x2,FL_IGNORECASE = 0x10000,FL_IGNORENONSPACE = 0x20000,FL_LOOSE = 0x40000,};
enum MACRO_FO {FO_MOVE = 0x1,FO_COPY = 0x2,FO_DELETE = 0x3,FO_RENAME = 0x4,};
enum MACRO_FS {FS_LATIN1 = 0x1,FS_LATIN2 = 0x2,FS_CYRILLIC = 0x4,FS_GREEK = 0x8,FS_TURKISH = 0x10,FS_HEBREW = 0x20,FS_ARABIC = 0x40,FS_BALTIC = 0x80,FS_VIETNAMESE = 0x100,FS_THAI = 0x10000,FS_JISJAPAN = 0x20000,FS_CHINESESIMP = 0x40000,FS_WANSUNG = 0x80000,FS_CHINESETRAD = 0x100000,FS_JOHAB = 0x200000,FS_SYMBOL = 0x80000000,};
enum MACRO_FW {FW_DONTCARE = 0,FW_THIN = 100,FW_EXTRALIGHT = 200,FW_LIGHT = 300,FW_NORMAL = 400,FW_MEDIUM = 500,FW_SEMIBOLD = 600,FW_BOLD = 700,FW_EXTRABOLD = 800,FW_HEAVY = 900,};
enum MACRO_GL {GL_LEVEL_NOGUIDELINE = 0x0,GL_LEVEL_FATAL = 0x1,GL_LEVEL_ERROR = 0x2,GL_LEVEL_WARNING = 0x3,GL_LEVEL_INFORMATION = 0x4,GL_ID_UNKNOWN = 0x0,GL_ID_NOMODULE = 0x1,GL_ID_NODICTIONARY = 0x10,GL_ID_CANNOTSAVE = 0x11,GL_ID_NOCONVERT = 0x20,GL_ID_TYPINGERROR = 0x21,GL_ID_TOOMANYSTROKE = 0x22,GL_ID_READINGCONFLICT = 0x23,GL_ID_INPUTREADING = 0x24,GL_ID_INPUTRADICAL = 0x25,GL_ID_INPUTCODE = 0x26,GL_ID_INPUTSYMBOL = 0x27,GL_ID_CHOOSECANDIDATE = 0x28,GL_ID_REVERSECONVERSION = 0x29,GL_ID_PRIVATE_FIRST = 0x8000,GL_ID_PRIVATE_LAST = 0xFFFF,};
enum MACRO_GN {GN_CONTEXTMENU = 1000,};
enum MACRO_GW {GW_HWNDFIRST = 0,GW_HWNDLAST = 1,GW_HWNDNEXT = 2,GW_HWNDPREV = 3,GW_OWNER = 4,GW_CHILD = 5,GW_MAX = 5,};
enum MACRO_HF {HF_NO_DUPLICATES = 0x1,};
enum MACRO_HH {HH_DISPLAY_TOPIC = 0x0,HH_HELP_FINDER = 0x0,HH_DISPLAY_TOC = 0x1,HH_DISPLAY_INDEX = 0x2,HH_DISPLAY_SEARCH = 0x3,HH_SET_WIN_TYPE = 0x4,HH_GET_WIN_TYPE = 0x5,HH_GET_WIN_HANDLE = 0x6,HH_ENUM_INFO_TYPE = 0x7,HH_SET_INFO_TYPE = 0x8,HH_SYNC = 0x9,HH_ADD_NAV_UI = 0xA,HH_ADD_BUTTON = 0xB,HH_GETBROWSER_APP = 0xC,HH_KEYWORD_LOOKUP = 0xD,HH_DISPLAY_TEXT_POPUP = 0xE,HH_HELP_CONTEXT = 0xF,HH_TP_HELP_CONTEXTMENU = 0x10,HH_TP_HELP_WM_HELP = 0x11,HH_CLOSE_ALL = 0x12,HH_ALINK_LOOKUP = 0x13,HH_GET_LAST_ERROR = 0x14,HH_ENUM_CATEGORY = 0x15,HH_ENUM_CATEGORY_IT = 0x16,HH_RESET_IT_FILTER = 0x17,HH_SET_INCLUSIVE_FILTER = 0x18,HH_SET_EXCLUSIVE_FILTER = 0x19,HH_SET_GUID = 0x1A,HH_INTERNAL = 0xFF,};
enum MACRO_HP {HP_ALGID = 0x1,HP_HASHVAL = 0x2,HP_HASHSIZE = 0x4,HP_HMAC_INFO = 0x5,HP_TLS1PRF_LABEL = 0x6,HP_TLS1PRF_SEED = 0x7,};
enum MACRO_IC {IC_AFFINE = 262144,IC_PROJECTIVE = 0,};
enum MACRO_ID {ID_DEFAULTINST = -2,};
enum MACRO_IE {IE_BADID = -1,IE_OPEN = -2,IE_NOPEN = -3,IE_MEMORY = -4,IE_DEFAULT = -5,IE_HARDWARE = -10,IE_BYTESIZE = -11,IE_BAUDRATE = -12,};
enum MACRO_IF {IF_TYPE_OTHER = 1,IF_TYPE_REGULAR_1822 = 2,IF_TYPE_HDH_1822 = 3,IF_TYPE_DDN_X25 = 4,IF_TYPE_RFC877_X25 = 5,IF_TYPE_ETHERNET_CSMACD = 6,IF_TYPE_IS088023_CSMACD = 7,IF_TYPE_ISO88024_TOKENBUS = 8,IF_TYPE_ISO88025_TOKENRING = 9,IF_TYPE_ISO88026_MAN = 10,IF_TYPE_STARLAN = 11,IF_TYPE_PROTEON_10MBIT = 12,IF_TYPE_PROTEON_80MBIT = 13,IF_TYPE_HYPERCHANNEL = 14,IF_TYPE_FDDI = 15,IF_TYPE_LAP_B = 16,IF_TYPE_SDLC = 17,IF_TYPE_DS1 = 18,IF_TYPE_E1 = 19,IF_TYPE_BASIC_ISDN = 20,IF_TYPE_PRIMARY_ISDN = 21,IF_TYPE_PROP_POINT2POINT_SERIAL = 22,IF_TYPE_PPP = 23,IF_TYPE_SOFTWARE_LOOPBACK = 24,IF_TYPE_EON = 25,IF_TYPE_ETHERNET_3MBIT = 26,IF_TYPE_NSIP = 27,IF_TYPE_SLIP = 28,IF_TYPE_ULTRA = 29,IF_TYPE_DS3 = 30,IF_TYPE_SIP = 31,IF_TYPE_FRAMERELAY = 32,IF_TYPE_RS232 = 33,IF_TYPE_PARA = 34,IF_TYPE_ARCNET = 35,IF_TYPE_ARCNET_PLUS = 36,IF_TYPE_ATM = 37,IF_TYPE_MIO_X25 = 38,IF_TYPE_SONET = 39,IF_TYPE_X25_PLE = 40,IF_TYPE_ISO88022_LLC = 41,IF_TYPE_LOCALTALK = 42,IF_TYPE_SMDS_DXI = 43,IF_TYPE_FRAMERELAY_SERVICE = 44,IF_TYPE_V35 = 45,IF_TYPE_HSSI = 46,IF_TYPE_HIPPI = 47,IF_TYPE_MODEM = 48,IF_TYPE_AAL5 = 49,IF_TYPE_SONET_PATH = 50,IF_TYPE_SONET_VT = 51,IF_TYPE_SMDS_ICIP = 52,IF_TYPE_PROP_VIRTUAL = 53,IF_TYPE_PROP_MULTIPLEXOR = 54,IF_TYPE_IEEE80212 = 55,IF_TYPE_FIBRECHANNEL = 56,IF_TYPE_HIPPIINTERFACE = 57,IF_TYPE_FRAMERELAY_INTERCONNECT = 58,IF_TYPE_AFLANE_8023 = 59,IF_TYPE_AFLANE_8025 = 60,IF_TYPE_CCTEMUL = 61,IF_TYPE_FASTETHER = 62,IF_TYPE_ISDN = 63,IF_TYPE_V11 = 64,IF_TYPE_V36 = 65,IF_TYPE_G703_64K = 66,IF_TYPE_G703_2MB = 67,IF_TYPE_QLLC = 68,IF_TYPE_FASTETHER_FX = 69,IF_TYPE_CHANNEL = 70,IF_TYPE_IEEE80211 = 71,IF_TYPE_IBM370PARCHAN = 72,IF_TYPE_ESCON = 73,IF_TYPE_DLSW = 74,IF_TYPE_ISDN_S = 75,IF_TYPE_ISDN_U = 76,IF_TYPE_LAP_D = 77,IF_TYPE_IPSWITCH = 78,IF_TYPE_RSRB = 79,IF_TYPE_ATM_LOGICAL = 80,IF_TYPE_DS0 = 81,IF_TYPE_DS0_BUNDLE = 82,IF_TYPE_BSC = 83,IF_TYPE_ASYNC = 84,IF_TYPE_CNR = 85,IF_TYPE_ISO88025R_DTR = 86,IF_TYPE_EPLRS = 87,IF_TYPE_ARAP = 88,IF_TYPE_PROP_CNLS = 89,IF_TYPE_HOSTPAD = 90,IF_TYPE_TERMPAD = 91,IF_TYPE_FRAMERELAY_MPI = 92,IF_TYPE_X213 = 93,IF_TYPE_ADSL = 94,IF_TYPE_RADSL = 95,IF_TYPE_SDSL = 96,IF_TYPE_VDSL = 97,IF_TYPE_ISO88025_CRFPRINT = 98,IF_TYPE_MYRINET = 99,IF_TYPE_VOICE_EM = 100,IF_TYPE_VOICE_FXO = 101,IF_TYPE_VOICE_FXS = 102,IF_TYPE_VOICE_ENCAP = 103,IF_TYPE_VOICE_OVERIP = 104,IF_TYPE_ATM_DXI = 105,IF_TYPE_ATM_FUNI = 106,IF_TYPE_ATM_IMA = 107,IF_TYPE_PPPMULTILINKBUNDLE = 108,IF_TYPE_IPOVER_CDLC = 109,IF_TYPE_IPOVER_CLAW = 110,IF_TYPE_STACKTOSTACK = 111,IF_TYPE_VIRTUALIPADDRESS = 112,IF_TYPE_MPC = 113,IF_TYPE_IPOVER_ATM = 114,IF_TYPE_ISO88025_FIBER = 115,IF_TYPE_TDLC = 116,IF_TYPE_GIGABITETHERNET = 117,IF_TYPE_HDLC = 118,IF_TYPE_LAP_F = 119,IF_TYPE_V37 = 120,IF_TYPE_X25_MLP = 121,IF_TYPE_X25_HUNTGROUP = 122,IF_TYPE_TRANSPHDLC = 123,IF_TYPE_INTERLEAVE = 124,IF_TYPE_FAST = 125,IF_TYPE_IP = 126,IF_TYPE_DOCSCABLE_MACLAYER = 127,IF_TYPE_DOCSCABLE_DOWNSTREAM = 128,IF_TYPE_DOCSCABLE_UPSTREAM = 129,IF_TYPE_A12MPPSWITCH = 130,IF_TYPE_TUNNEL = 131,IF_TYPE_COFFEE = 132,IF_TYPE_CES = 133,IF_TYPE_ATM_SUBINTERFACE = 134,IF_TYPE_L2_VLAN = 135,IF_TYPE_L3_IPVLAN = 136,IF_TYPE_L3_IPXVLAN = 137,IF_TYPE_DIGITALPOWERLINE = 138,IF_TYPE_MEDIAMAILOVERIP = 139,IF_TYPE_DTM = 140,IF_TYPE_DCN = 141,IF_TYPE_IPFORWARD = 142,IF_TYPE_MSDSL = 143,IF_TYPE_IEEE1394 = 144,IF_TYPE_RECEIVE_ONLY = 145,};
enum MACRO_IM {IM_POSITION = 0,IM_WIDEIMAGE = 1,IM_NARROWIMAGE = 2,IM_HWND_CONTEXT = 3,IM_CONVERSION_MODE = 4,IM_SENTENCE_MODE = 5,IM_KEYBOARD_LAYOUT = 6,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IO {IO_REPARSE_TAG_RESERVED_ZERO = 0,IO_REPARSE_TAG_RESERVED_ONE = 1,IO_REPARSE_TAG_RESERVED_RANGE = 1,IO_REPARSE_TAG_VALID_VALUES = -536805377,IO_REPARSE_TAG_SYMBOLIC_LINK = 0,IO_REPARSE_TAG_MOUNT_POINT = -1610612733,IO_REPARSE_TAG_HSM = -1073741820,IO_REPARSE_TAG_NSS = -2147483643,IO_REPARSE_TAG_NSSRECOVER = -2147483642,IO_REPARSE_TAG_SIS = -2147483641,IO_REPARSE_TAG_DFS = -2147483640,IO_COMPLETION_MODIFY_STATE = 2,IO_COMPLETION_ALL_ACCESS = 2031619,};
enum MACRO_IP {IP_OPTIONS = 1,IP_TOS = 8,IP_TTL = 7,IP_MULTICAST_IF = 2,IP_MULTICAST_TTL = 3,IP_MULTICAST_LOOP = 4,IP_ADD_MEMBERSHIP = 5,IP_DROP_MEMBERSHIP = 6,IP_DONTFRAGMENT = 14,IP_ADD_SOURCE_MEMBERSHIP = 15,IP_DROP_SOURCE_MEMBERSHIP = 16,IP_BLOCK_SOURCE = 17,IP_UNBLOCK_SOURCE = 18,IP_PKTINFO = 19,};
enum MACRO_IR {IR_OBEX_ERROR_BASE = 0x600,E_OBEX_BASE = 0x80040600,WIN_OBEX_ERROR_BASE = 0x500,};
enum MACRO_IS {IS_TEXT_UNICODE_ASCII16 = 0x1,IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x10,IS_TEXT_UNICODE_STATISTICS = 0x2,IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x20,IS_TEXT_UNICODE_CONTROLS = 0x4,IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x40,IS_TEXT_UNICODE_SIGNATURE = 0x8,IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x80,IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x100,IS_TEXT_UNICODE_ODD_LENGTH = 0x200,IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x400,IS_TEXT_UNICODE_NULL_BYTES = 0x1000,IS_TEXT_UNICODE_UNICODE_MASK = 0xF,IS_TEXT_UNICODE_REVERSE_MASK = 0xF0,IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0xF00,IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000,};
enum MACRO_JL {JL_SENDER_ONLY = 0x1,JL_RECEIVER_ONLY = 0x2,JL_BOTH = 0x4,};
enum MACRO_KF {KF_EXTENDED = 0x100,KF_ALTDOWN = 0x2000,KF_REPEAT = 0x4000,KF_UP = 0x8000,};
enum MACRO_KL {KL_NAMELENGTH = 9,};
enum MACRO_KP {KP_IV = 1,KP_SALT = 2,KP_PADDING = 3,KP_MODE = 4,KP_MODE_BITS = 5,KP_PERMISSIONS = 6,KP_ALGID = 7,KP_BLOCKLEN = 8,KP_KEYLEN = 9,KP_SALT_EX = 10,KP_P = 11,KP_G = 12,KP_Q = 13,KP_X = 14,KP_Y = 15,KP_RA = 16,KP_RB = 17,KP_INFO = 18,KP_EFFECTIVE_KEYLEN = 19,KP_SCHANNEL_ALG = 20,KP_CLIENT_RANDOM = 21,KP_SERVER_RANDOM = 22,KP_RP = 23,KP_PRECOMP_MD5 = 24,KP_PRECOMP_SHA = 25,KP_CERTIFICATE = 26,KP_CLEAR_KEY = 27,KP_PUB_EX_LEN = 28,KP_PUB_EX_VAL = 29,KP_KEYVAL = 30,KP_ADMIN_PIN = 31,KP_KEYEXCHANGE_PIN = 32,KP_SIGNATURE_PIN = 33,KP_PREHASH = 34,KP_ROUNDS = 35,KP_OAEP_PARAMS = 36,KP_CMS_KEY_INFO = 37,KP_CMS_DH_KEY_INFO = 38,KP_PUB_PARAMS = 39,KP_VERIFY_PARAMS = 40,KP_HIGHEST_VERSION = 41,KP_GET_USE_COUNT = 42,};
enum MACRO_LB {LB_OKAY = 0,LB_ERR = -1,LB_ERRSPACE = -2,};
enum MACRO_LC {LC_NONE = 0,LC_POLYLINE = 2,LC_MARKER = 4,LC_POLYMARKER = 8,LC_WIDE = 16,LC_STYLED = 32,LC_WIDESTYLED = 64,LC_INTERIORS = 128,};
enum MACRO_LF {LF_FACESIZE = 32,};
enum MACRO_LM {LM_BAUD_1200 = 1200,LM_BAUD_2400 = 2400,LM_BAUD_9600 = 9600,LM_BAUD_19200 = 19200,LM_BAUD_38400 = 38400,LM_BAUD_57600 = 57600,LM_BAUD_115200 = 115200,LM_BAUD_576K = 576000,LM_BAUD_1152K = 1152000,LM_BAUD_4M = 4000000,};
enum MACRO_LR {LR_DEFAULTCOLOR = 0x0,};
enum MACRO_MB {MB_LEN_MAX = 2,};
enum MACRO_MD {MD_DIMTYPE_UNKNOWN = 0x0,MD_DIMTYPE_TIME = 0x1,MD_DIMTYPE_MEASURE = 0x2,MD_DIMTYPE_OTHER = 0x3,};
enum MACRO_MF {MF_BYCOMMAND = 0x0,MF_BYPOSITION = 0x400,MF_SEPARATOR = 0x800,MF_ENABLED = 0x0,MF_GRAYED = 0x1,MF_UNCHECKED = 0x0,MF_CHECKED = 0x8,MF_STRING = 0x0,MF_OWNERDRAW = 0x100,MF_POPUP = 0x10,MF_MENUBARBREAK = 0x20,MF_MENUBREAK = 0x40,MF_UNHILITE = 0x0,MF_HILITE = 0x80,MF_END = 0x80,};
enum MACRO_MK {MK_E_FIRST = 0x800401E0,MK_E_LAST = 0x800401EF,MK_S_FIRST = 0x401E0,MK_S_LAST = 0x401EF,};
enum MACRO_MM {MM_MICROSOFT = 1,};
enum MACRO_MQ {MQ_MAX_Q_NAME_LEN = 124,MQ_MAX_Q_LABEL_LEN = 124,MQ_MAX_MSG_LABEL_LEN = 250,MQ_RECEIVE_ACCESS = 1,MQ_SEND_ACCESS = 2,MQ_PEEK_ACCESS = 32,MQ_DENY_NONE = 0,MQ_DENY_RECEIVE_SHARE = 1,MQ_ACTION_RECEIVE = 0,MQ_ACTION_PEEK_CURRENT = -2147483648,MQ_ACTION_PEEK_NEXT = -2147483647,MQ_NO_TRANSACTION = 0,MQ_MTS_TRANSACTION = 1,MQ_XA_TRANSACTION = 2,MQ_SINGLE_MESSAGE = 3,MQ_MIN_PRIORITY = 0,MQ_MAX_PRIORITY = 7,};
enum MACRO_MS {MS_CTS_ON = 0x10,MS_DSR_ON = 0x20,MS_RING_ON = 0x40,MS_RLSD_ON = 0x80,};
enum MACRO_MV {MV_FLAG = 0x1000,};
enum MACRO_NI {NI_OPENCANDIDATE = 0x10,NI_CLOSECANDIDATE = 0x11,NI_SELECTCANDIDATESTR = 0x12,NI_CHANGECANDIDATELIST = 0x13,NI_FINALIZECONVERSIONRESULT = 0x14,NI_COMPOSITIONSTR = 0x15,NI_SETCANDIDATE_PAGESTART = 0x16,NI_SETCANDIDATE_PAGESIZE = 0x17,};
enum MACRO_NK {NK_NKCOMPR = 1,NK_NKMAPFILE = 1,};
enum MACRO_NM {NM_LAST = -99,};
enum MACRO_NO {NO_RECOVERY = 11003,NO_DATA = 11004,};
enum MACRO_NS {NS_ALL = 0,NS_SAP = 1,NS_NDS = 2,NS_PEER_BROWSE = 3,NS_SLP = 5,NS_DHCP = 6,NS_TCPIP_LOCAL = 10,NS_TCPIP_HOSTS = 11,NS_DNS = 12,NS_NETBT = 13,NS_WINS = 14,NS_NLA = 15,NS_NBP = 20,NS_MS = 30,NS_STDA = 31,NS_NTDS = 32,NS_X500 = 40,NS_NIS = 41,NS_NISPLUS = 42,NS_WRQ = 50,NS_NETDES = 60,};
enum MACRO_NT {NT_CONSOLE_PROPS_SIG = 0xA0000002,NT_FE_CONSOLE_PROPS_SIG = 0xA0000004,};
enum MACRO_OI {OI_ASYNC = 0xFFFFEEEE,};
enum MACRO_PC {PC_24 = 131072,PC_53 = 65536,PC_64 = 0,};
enum MACRO_PD {PD_SELECTALLPAGES = 0x1,PD_SELECTSELECTION = 0x2,PD_SELECTDRAFTMODE = 0x8,PD_SELECTA4 = 0x10,PD_SELECTLETTER = 0x20,PD_SELECTINFRARED = 0x40,PD_SELECTSERIAL = 0x80,PD_DISABLEPAPERSIZE = 0x100,PD_DISABLEPRINTRANGE = 0x200,PD_DISABLEMARGINS = 0x400,PD_DISABLEORIENTATION = 0x800,PD_RETURNDEFAULTDC = 0x2000,PD_ENABLEPRINTHOOK = 0x4000,PD_ENABLEPRINTTEMPLATE = 0x8000,PD_ENABLEPRINTTEMPLATEHANDLE = 0x10000,PD_TITLE = 0x20000,PD_SELECTPORTRAIT = 0x40000,PD_SELECTLANDSCAPE = 0x80000,PD_MARGINS = 0x100000,PD_INTHOUSANDTHSOFINCHES = 0x200000,PD_INHUNDREDTHSOFMILLIMETERS = 0x400000,PD_MINMARGINS = 0x800000,PD_SELECTPARALLEL = 0x1000000,PD_SELECTNETWORK = 0x2000000,PD_SELECTLEGAL = 0x4000000,PD_SELECTB5 = 0x8000000,PD_SELECTPRINTINCOLOR = 0x10000000,};
enum MACRO_PF {PF_ARM_V4 = 0x80000001,PF_ARM_V5 = 0x80000002,PF_ARM_V6 = 0x80000003,PF_ARM_V7 = 0x80000004,PF_ARM_THUMB = 0x80000005,PF_ARM_JAZELLE = 0x80000006,PF_ARM_DSP = 0x80000007,PF_ARM_MOVE_CP = 0x80000008,PF_ARM_VFP10 = 0x80000009,PF_ARM_MPU = 0x8000000A,PF_ARM_WRITE_BUFFER = 0x8000000B,PF_ARM_MBX = 0x8000000C,PF_ARM_L2CACHE = 0x8000000D,PF_ARM_PHYSICALLY_TAGGED_CACHE = 0x8000000E,PF_ARM_VFP_SINGLE_PRECISION = 0x8000000F,PF_ARM_VFP_DOUBLE_PRECISION = 0x80000010,PF_ARM_ITCM = 0x80000011,PF_ARM_DTCM = 0x80000012,PF_ARM_UNIFIED_CACHE = 0x80000013,PF_ARM_WRITE_BACK_CACHE = 0x80000014,PF_ARM_CACHE_CAN_BE_LOCKED_DOWN = 0x80000015,PF_ARM_L2CACHE_MEMORY_MAPPED = 0x80000016,PF_ARM_L2CACHE_COPROC = 0x80000017,PF_ARM_INTEL_XSCALE = 0x80010001,PF_ARM_INTEL_PMU = 0x80010002,PF_ARM_INTEL_WMMX = 0x80010003,};
enum MACRO_PI {PI_ALLOWED = 0x0,PI_RESTRICTED = 0x40,PI_NUMBER_NOT_AVAILABLE = 0x80,};
enum MACRO_PM {PM_NOREMOVE = 0x0,PM_REMOVE = 0x1,PM_NOYIELD = 0x2,};
enum MACRO_PO {PO_DELETE = 0x13,PO_RENAME = 0x14,PO_PORTCHANGE = 0x20,PO_REN_PORT = 0x34,};
enum MACRO_PP {PP_ENUMALGS = 1,PP_ENUMCONTAINERS = 2,PP_IMPTYPE = 3,PP_NAME = 4,PP_VERSION = 5,PP_CONTAINER = 6,PP_CHANGE_PASSWORD = 7,PP_KEYSET_SEC_DESCR = 8,PP_CERTCHAIN = 9,PP_KEY_TYPE_SUBTYPE = 10,PP_PROVTYPE = 16,PP_KEYSTORAGE = 17,PP_APPLI_CERT = 18,PP_SYM_KEYSIZE = 19,PP_SESSION_KEYSIZE = 20,PP_UI_PROMPT = 21,PP_ENUMALGS_EX = 22,PP_ENUMMANDROOTS = 25,PP_ENUMELECTROOTS = 26,PP_KEYSET_TYPE = 27,PP_ADMIN_PIN = 31,PP_KEYEXCHANGE_PIN = 32,PP_SIGNATURE_PIN = 33,PP_SIG_KEYSIZE_INC = 34,PP_KEYX_KEYSIZE_INC = 35,PP_UNIQUE_CONTAINER = 36,PP_SGC_INFO = 37,PP_USE_HARDWARE_RNG = 38,PP_KEYSPEC = 39,PP_ENUMEX_SIGNING_PROT = 40,PP_CRYPT_COUNT_KEY_USE = 41,};
enum MACRO_PR {PR_NULL = 1,};
enum MACRO_PS {PS_SOLID = 0,PS_DASH = 1,PS_NULL = 5,};
enum MACRO_PT {PT_UNSPECIFIED = 0,PT_NULL = 1,PT_I2 = 2,PT_LONG = 3,PT_R4 = 4,PT_DOUBLE = 5,PT_CURRENCY = 6,PT_APPTIME = 7,PT_ERROR = 10,PT_BOOLEAN = 11,PT_OBJECT = 13,PT_I8 = 20,PT_STRING8 = 30,PT_UNICODE = 31,PT_SYSTIME = 64,PT_CLSID = 72,PT_BINARY = 258,PT_SHORT = 2,PT_I4 = 3,PT_FLOAT = 4,PT_R8 = 5,PT_LONGLONG = 20,PT_TSTRING = 30,PT_MV_TSTRING = 4126,};
enum MACRO_QS {QS_KEY = 0x1,QS_MOUSEMOVE = 0x2,QS_MOUSEBUTTON = 0x4,QS_POSTMESSAGE = 0x8,QS_TIMER = 0x10,QS_PAINT = 0x20,QS_SENDMESSAGE = 0x40,QS_MOUSE = 0x6,QS_INPUT = 0x7,QS_ALLEVENTS = 0x3F,QS_ALLINPUT = 0x7F,};
enum MACRO_R2 {R2_BLACK = 1,R2_NOTMERGEPEN = 2,R2_MASKNOTPEN = 3,R2_NOTCOPYPEN = 4,R2_MASKPENNOT = 5,R2_NOT = 6,R2_XORPEN = 7,R2_NOTMASKPEN = 8,R2_MASKPEN = 9,R2_NOTXORPEN = 10,R2_NOP = 11,R2_MERGENOTPEN = 12,R2_COPYPEN = 13,R2_MERGEPENNOT = 14,R2_MERGEPEN = 15,R2_WHITE = 16,R2_LAST = 16,};
enum MACRO_RB {RB_INSERTBAND = 1025,RB_SETBANDINFO = 1030,RB_GETBANDINFO = 1053,};
enum MACRO_RC {RC_CHOP = 768,RC_UP = 512,RC_DOWN = 256,RC_NEAR = 0,};
enum MACRO_RL {RL_RANGE_ERROR = 4294967295,RL_LAST_MESSAGE = 4294967295,};
enum MACRO_RS {RS_READY = 0x1,RS_SUSPENDED = 0x2,RS_UPDATING = 0x4,RS_SUSPENDONIDLE = 0x10000,RS_MAYBOTHERUSER = 0x20000,RS_COMPLETED = 0x80000000,};
enum MACRO_RT {RT_CURSOR = 1,RT_BITMAP = 2,RT_ICON = 3,RT_MENU = 4,RT_DIALOG = 5,RT_STRING = 6,RT_FONTDIR = 7,RT_FONT = 8,RT_ACCELERATOR = 9,RT_RCDATA = 10,RT_MESSAGETABLE = 11,};
enum MACRO_SB {SB_HORZ = 0,SB_VERT = 1,SB_CTL = 2,SB_BOTH = 3,SB_LINEUP = 0,SB_LINELEFT = 0,SB_LINEDOWN = 1,SB_LINERIGHT = 1,SB_PAGEUP = 2,SB_PAGELEFT = 2,SB_PAGEDOWN = 3,SB_PAGERIGHT = 3,SB_THUMBPOSITION = 4,SB_THUMBTRACK = 5,SB_TOP = 6,SB_LEFT = 6,SB_BOTTOM = 7,SB_RIGHT = 7,SB_ENDSCROLL = 8,};
enum MACRO_SC {SC_CLOSE = 0xF060,SC_KEYMENU = 0xF100,};
enum MACRO_SD {SD_RECEIVE = 0x0,SD_SEND = 0x1,SD_BOTH = 0x2,};
enum MACRO_SE {SE_GROUP_MANDATORY = 0x1,SE_GROUP_ENABLED_BY_DEFAULT = 0x2,SE_GROUP_ENABLED = 0x4,SE_GROUP_OWNER = 0x8,SE_GROUP_USE_FOR_DENY_ONLY = 0x10,SE_GROUP_LOGON_ID = 0xC0000000,};
enum MACRO_SF {SF_MAX_USERNAME = 257,SF_MAX_PASSWORD = 257,SF_MAX_AUTH_TYPE = 33,SF_MAX_FILTER_DESC_LEN = 257,SF_DENIED_LOGON = 1,SF_DENIED_RESOURCE = 2,SF_DENIED_FILTER = 4,SF_DENIED_APPLICATION = 8,SF_DENIED_BY_CONFIG = 65536,SF_NOTIFY_SECURE_PORT = 1,SF_NOTIFY_NONSECURE_PORT = 2,SF_NOTIFY_READ_RAW_DATA = 32768,SF_NOTIFY_PREPROC_HEADERS = 16384,SF_NOTIFY_AUTHENTICATION = 8192,SF_NOTIFY_URL_MAP = 4096,SF_NOTIFY_ACCESS_DENIED = 2048,SF_NOTIFY_SEND_RESPONSE = 64,SF_NOTIFY_SEND_RAW_DATA = 1024,SF_NOTIFY_LOG = 512,SF_NOTIFY_END_OF_REQUEST = 128,SF_NOTIFY_END_OF_NET_SESSION = 256,SF_NOTIFY_ORDER_HIGH = 524288,SF_NOTIFY_ORDER_MEDIUM = 262144,SF_NOTIFY_ORDER_LOW = 131072,SF_NOTIFY_ORDER_DEFAULT = 131072,SF_NOTIFY_ORDER_MASK = 917504,};
enum MACRO_SG {SG_UNCONSTRAINED_GROUP = 0x1,SG_CONSTRAINED_GROUP = 0x2,};
enum MACRO_SH {SH_WIN32 = 0,SH_CURTHREAD = 1,SH_CURPROC = 2,SH_LAST_NOTIFY = 16,SH_GDI = 16,SH_WMGR = 17,SH_WNET = 18,SH_COMM = 19,SH_FILESYS_APIS = 20,SH_SHELL = 21,SH_DEVMGR_APIS = 22,SH_TAPI = 23,SH_PATCHER = 24,SH_SERVICES = 26,SH_LASTRESERVED = 26,};
enum MACRO_SI {SI_TEMPORARY = 0x80000000,};
enum MACRO_SL {SL_PENDING_RETURNED = 0x1,SL_INVOKE_ON_CANCEL = 0x20,SL_INVOKE_ON_SUCCESS = 0x40,SL_INVOKE_ON_ERROR = 0x80,};
enum MACRO_SM {SM_CXSCREEN = 0,SM_CYSCREEN = 1,SM_CXVSCROLL = 2,SM_CYHSCROLL = 3,SM_CYCAPTION = 4,SM_CXBORDER = 5,SM_CYBORDER = 6,SM_CXDLGFRAME = 7,SM_CYDLGFRAME = 8,SM_CXICON = 11,SM_CYICON = 12,SM_CXCURSOR = 13,SM_CYCURSOR = 14,SM_CYMENU = 15,SM_CXFULLSCREEN = 16,SM_CYFULLSCREEN = 17,SM_MOUSEPRESENT = 19,SM_CYVSCROLL = 20,SM_CXHSCROLL = 21,SM_DEBUG = 22,SM_CXDOUBLECLK = 36,SM_CYDOUBLECLK = 37,SM_CXICONSPACING = 38,SM_CYICONSPACING = 39,SM_CXEDGE = 45,SM_CYEDGE = 46,SM_CXSMICON = 49,SM_CYSMICON = 50,SM_XVIRTUALSCREEN = 76,SM_YVIRTUALSCREEN = 77,SM_CXVIRTUALSCREEN = 78,SM_CYVIRTUALSCREEN = 79,SM_CMONITORS = 80,SM_SAMEDISPLAYFORMAT = 81,SM_CXFIXEDFRAME = 7,SM_CYFIXEDFRAME = 8,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DONTLINGER = 0xFFFFFF7F,SO_EXCLUSIVEADDRUSE = 0xFFFFFFFB,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_GROUP_ID = 0x2001,SO_GROUP_PRIORITY = 0x2002,SO_MAX_MSG_SIZE = 0x2003,SO_PROTOCOL_INFOA = 0x2004,SO_PROTOCOL_INFOW = 0x2005,SO_PROTOCOL_INFO = 0x2004,};
enum MACRO_SP {SP_SERIALCOMM = 0x1,};
enum MACRO_SS {SS_LEFT = 0x0,SS_CENTER = 0x1,SS_RIGHT = 0x2,SS_ICON = 0x3,SS_LEFTNOWORDWRAP = 0xC,SS_BITMAP = 0xE,SS_NOPREFIX = 0x80,SS_CENTERIMAGE = 0x200,SS_NOTIFY = 0x100,};
enum MACRO_SW {SW_DENORMAL = 524288,};
enum MACRO_TA {TA_NOUPDATECP = 0,TA_UPDATECP = 1,TA_LEFT = 0,TA_RIGHT = 2,TA_CENTER = 6,TA_TOP = 0,TA_BOTTOM = 8,TA_BASELINE = 24,TA_MASK = 31,TA_ALIGNMASK = 30,};
enum MACRO_TB {TB_HIGHLIGHTBUTTON = 1030,};
enum MACRO_TC {TC_OP_CHARACTER = 0x1,TC_OP_STROKE = 0x2,TC_CP_STROKE = 0x4,TC_CR_90 = 0x8,TC_CR_ANY = 0x10,TC_SF_X_YINDEP = 0x20,TC_SA_DOUBLE = 0x40,TC_SA_INTEGER = 0x80,TC_SA_CONTIN = 0x100,TC_EA_DOUBLE = 0x200,TC_IA_ABLE = 0x400,TC_UA_ABLE = 0x800,TC_SO_ABLE = 0x1000,TC_RA_ABLE = 0x2000,TC_VA_ABLE = 0x4000,TC_RESERVED = 0x8000,TC_SCROLLBLT = 0x10000,};
enum MACRO_TF {TF_NAVIGATE = 0x7FAEABAC,};
enum MACRO_TH {TH_NETDEV = 0x1,TH_TAPI = 0x2,};
enum MACRO_TR {TR_NOIND = 0x0,TR_END_TO_END = 0x1,TR_NO_END_TO_END = 0x2,};
enum MACRO_TT {TT_NOIND = 0x0,TT_CBR = 0x4,TT_VBR = 0x8,};
enum MACRO_UD {UD_MAXVAL = 0x7FFF,UD_MINVAL = 0xFFFF8001,};
enum MACRO_UI {UI_CAP_2700 = 0x1,UI_CAP_ROT90 = 0x2,UI_CAP_ROTANY = 0x4,};
enum MACRO_UP {UP_P2P = 0x0,UP_P2MP = 0x1,};
enum MACRO_VK {VK_LBUTTON = 0x1,VK_RBUTTON = 0x2,VK_CANCEL = 0x3,VK_MBUTTON = 0x4,VK_BACK = 0x8,VK_TAB = 0x9,VK_CLEAR = 0xC,VK_RETURN = 0xD,VK_SHIFT = 0x10,VK_CONTROL = 0x11,VK_MENU = 0x12,VK_PAUSE = 0x13,VK_CAPITAL = 0x14,VK_KANA = 0x15,VK_HANGEUL = 0x15,VK_HANGUL = 0x15,VK_JUNJA = 0x17,VK_FINAL = 0x18,VK_HANJA = 0x19,VK_KANJI = 0x19,VK_ESCAPE = 0x1B,VK_CONVERT = 0x1C,VK_NOCONVERT = 0x1D,VK_SPACE = 0x20,VK_PRIOR = 0x21,VK_NEXT = 0x22,VK_END = 0x23,VK_HOME = 0x24,VK_LEFT = 0x25,VK_UP = 0x26,VK_RIGHT = 0x27,VK_DOWN = 0x28,VK_SELECT = 0x29,VK_PRINT = 0x2A,VK_EXECUTE = 0x2B,VK_SNAPSHOT = 0x2C,VK_INSERT = 0x2D,VK_DELETE = 0x2E,VK_HELP = 0x2F,VK_LWIN = 0x5B,VK_RWIN = 0x5C,VK_APPS = 0x5D,VK_SLEEP = 0x5F,VK_NUMPAD0 = 0x60,VK_NUMPAD1 = 0x61,VK_NUMPAD2 = 0x62,VK_NUMPAD3 = 0x63,VK_NUMPAD4 = 0x64,VK_NUMPAD5 = 0x65,VK_NUMPAD6 = 0x66,VK_NUMPAD7 = 0x67,VK_NUMPAD8 = 0x68,VK_NUMPAD9 = 0x69,VK_MULTIPLY = 0x6A,VK_ADD = 0x6B,VK_SEPARATOR = 0x6C,VK_SUBTRACT = 0x6D,VK_DECIMAL = 0x6E,VK_DIVIDE = 0x6F,VK_F1 = 0x70,VK_F2 = 0x71,VK_F3 = 0x72,VK_F4 = 0x73,VK_F5 = 0x74,VK_F6 = 0x75,VK_F7 = 0x76,VK_F8 = 0x77,VK_F9 = 0x78,VK_F10 = 0x79,VK_F11 = 0x7A,VK_F12 = 0x7B,VK_F13 = 0x7C,VK_F14 = 0x7D,VK_F15 = 0x7E,VK_F16 = 0x7F,VK_F17 = 0x80,VK_F18 = 0x81,VK_F19 = 0x82,VK_F20 = 0x83,VK_F21 = 0x84,VK_F22 = 0x85,VK_F23 = 0x86,VK_F24 = 0x87,VK_NUMLOCK = 0x90,VK_SCROLL = 0x91,VK_LSHIFT = 0xA0,VK_RSHIFT = 0xA1,VK_LCONTROL = 0xA2,VK_RCONTROL = 0xA3,VK_LMENU = 0xA4,VK_RMENU = 0xA5,VK_EXTEND_BSLASH = 0xE2,VK_OEM_102 = 0xE2,VK_PROCESSKEY = 0xE5,VK_ATTN = 0xF6,VK_CRSEL = 0xF7,VK_EXSEL = 0xF8,VK_EREOF = 0xF9,VK_PLAY = 0xFA,VK_ZOOM = 0xFB,VK_NONAME = 0xFC,VK_PA1 = 0xFD,VK_OEM_CLEAR = 0xFE,VK_SEMICOLON = 0xBA,VK_EQUAL = 0xBB,VK_COMMA = 0xBC,VK_HYPHEN = 0xBD,VK_PERIOD = 0xBE,VK_SLASH = 0xBF,VK_BACKQUOTE = 0xC0,VK_BROWSER_BACK = 0xA6,VK_BROWSER_FORWARD = 0xA7,VK_BROWSER_REFRESH = 0xA8,VK_BROWSER_STOP = 0xA9,VK_BROWSER_SEARCH = 0xAA,VK_BROWSER_FAVORITES = 0xAB,VK_BROWSER_HOME = 0xAC,VK_VOLUME_MUTE = 0xAD,VK_VOLUME_DOWN = 0xAE,VK_VOLUME_UP = 0xAF,VK_MEDIA_NEXT_TRACK = 0xB0,VK_MEDIA_PREV_TRACK = 0xB1,VK_MEDIA_STOP = 0xB2,VK_MEDIA_PLAY_PAUSE = 0xB3,VK_LAUNCH_MAIL = 0xB4,VK_LAUNCH_MEDIA_SELECT = 0xB5,VK_LAUNCH_APP1 = 0xB6,VK_LAUNCH_APP2 = 0xB7,VK_LBRACKET = 0xDB,VK_BACKSLASH = 0xDC,VK_RBRACKET = 0xDD,VK_APOSTROPHE = 0xDE,VK_OFF = 0xDF,VK_DBE_ALPHANUMERIC = 0xF0,VK_DBE_KATAKANA = 0xF1,VK_DBE_HIRAGANA = 0xF2,VK_DBE_SBCSCHAR = 0xF3,VK_DBE_DBCSCHAR = 0xF4,VK_DBE_ROMAN = 0xF5,VK_DBE_NOROMAN = 0xF6,VK_DBE_ENTERWORDREGISTERMODE = 0xF7,VK_DBE_ENTERIMECONFIGMODE = 0xF8,VK_DBE_FLUSHSTRING = 0xF9,VK_DBE_CODEINPUT = 0xFA,VK_DBE_NOCODEINPUT = 0xFB,VK_DBE_DETERMINESTRING = 0xFC,VK_DBE_ENTERDLGCONVERSIONMODE = 0xFD,};
enum MACRO_VP {VP_COMMAND_GET = 0x1,VP_COMMAND_SET = 0x2,VP_FLAGS_TV_MODE = 0x1,VP_FLAGS_TV_STANDARD = 0x2,VP_FLAGS_FLICKER = 0x4,VP_FLAGS_OVERSCAN = 0x8,VP_FLAGS_MAX_UNSCALED = 0x10,VP_FLAGS_POSITION = 0x20,VP_FLAGS_BRIGHTNESS = 0x40,VP_FLAGS_CONTRAST = 0x80,VP_FLAGS_COPYPROTECT = 0x100,VP_MODE_WIN_GRAPHICS = 0x1,VP_MODE_TV_PLAYBACK = 0x2,VP_TV_STANDARD_NTSC_M = 0x1,VP_TV_STANDARD_NTSC_M_J = 0x2,VP_TV_STANDARD_PAL_B = 0x4,VP_TV_STANDARD_PAL_D = 0x8,VP_TV_STANDARD_PAL_H = 0x10,VP_TV_STANDARD_PAL_I = 0x20,VP_TV_STANDARD_PAL_M = 0x40,VP_TV_STANDARD_PAL_N = 0x80,VP_TV_STANDARD_SECAM_B = 0x100,VP_TV_STANDARD_SECAM_D = 0x200,VP_TV_STANDARD_SECAM_G = 0x400,VP_TV_STANDARD_SECAM_H = 0x800,VP_TV_STANDARD_SECAM_K = 0x1000,VP_TV_STANDARD_SECAM_K1 = 0x2000,VP_TV_STANDARD_SECAM_L = 0x4000,VP_TV_STANDARD_WIN_VGA = 0x8000,VP_TV_STANDARD_NTSC_433 = 0x10000,VP_TV_STANDARD_PAL_G = 0x20000,VP_TV_STANDARD_PAL_60 = 0x40000,VP_TV_STANDARD_SECAM_L1 = 0x80000,VP_CP_TYPE_APS_TRIGGER = 0x1,VP_CP_TYPE_MACROVISION = 0x2,VP_CP_CMD_ACTIVATE = 0x1,VP_CP_CMD_DEACTIVATE = 0x2,VP_CP_CMD_CHANGE = 0x4,};
enum MACRO_VS {VS_VERSION_INFO = 1,VS_USER_DEFINED = 100,VS_FFI_SIGNATURE = -17890115,VS_FFI_STRUCVERSION = 65536,VS_FFI_FILEFLAGSMASK = 63,VS_FF_DEBUG = 1,VS_FF_PRERELEASE = 2,VS_FF_PATCHED = 4,VS_FF_PRIVATEBUILD = 8,VS_FF_INFOINFERRED = 16,VS_FF_SPECIALBUILD = 32,};
enum MACRO_VT {VT_STREAMED_PROPSET = 73,VT_STORED_PROPSET = 74,VT_BLOB_PROPSET = 75,VT_VERBOSE_ENUM = 76,};
enum MACRO_WA {WA_INACTIVE = 0,WA_ACTIVE = 1,WA_CLICKACTIVE = 2,};
enum MACRO_WC {WC_COMPOSITECHECK = 0x200,WC_DISCARDNS = 0x10,WC_SEPCHARS = 0x20,WC_DEFAULTCHAR = 0x40,WC_NO_BEST_FIT_CHARS = 0x400,};
enum MACRO_WM {WM_NULL = 0x0,WM_CREATE = 0x1,WM_DESTROY = 0x2,WM_MOVE = 0x3,WM_SIZEWAIT = 0x4,WM_SIZE = 0x5,WM_ACTIVATE = 0x6,WM_SETFOCUS = 0x7,WM_KILLFOCUS = 0x8,WM_SETVISIBLE = 0x9,WM_ENABLE = 0xA,WM_SETREDRAW = 0xB,WM_SETTEXT = 0xC,WM_GETTEXT = 0xD,WM_GETTEXTLENGTH = 0xE,WM_PAINT = 0xF,WM_CLOSE = 0x10,WM_QUERYENDSESSION = 0x11,WM_QUIT = 0x12,WM_QUERYOPEN = 0x13,WM_ERASEBKGND = 0x14,WM_SYSCOLORCHANGE = 0x15,WM_ENDSESSION = 0x16,WM_SYSTEMERROR = 0x17,WM_SHOWWINDOW = 0x18,WM_CTLCOLOR = 0x19,WM_SETTINGCHANGE = 0x1A,WM_WININICHANGE = 0x1A,WM_DEVMODECHANGE = 0x1B,WM_ACTIVATEAPP = 0x1C,WM_FONTCHANGE = 0x1D,WM_TIMECHANGE = 0x1E,WM_CANCELMODE = 0x1F,WM_SETCURSOR = 0x20,WM_MOUSEACTIVATE = 0x21,WM_CHILDACTIVATE = 0x22,WM_QUEUESYNC = 0x23,WM_GETMINMAXINFO = 0x24,WM_LOGOFF = 0x25,WM_PAINTICON = 0x26,WM_ICONERASEBKGND = 0x27,WM_NEXTDLGCTL = 0x28,WM_ALTTABACTIVE = 0x29,WM_SPOOLERSTATUS = 0x2A,WM_DRAWITEM = 0x2B,WM_MEASUREITEM = 0x2C,WM_DELETEITEM = 0x2D,WM_VKEYTOITEM = 0x2E,WM_CHARTOITEM = 0x2F,WM_SETFONT = 0x30,WM_GETFONT = 0x31,WM_SETHOTKEY = 0x32,WM_GETHOTKEY = 0x33,WM_FILESYSCHANGE = 0x34,WM_ISACTIVEICON = 0x35,WM_QUERYPARKICON = 0x36,WM_QUERYDRAGICON = 0x37,WM_WINHELP = 0x38,WM_COMPAREITEM = 0x39,WM_FULLSCREEN = 0x3A,WM_CLIENTSHUTDOWN = 0x3B,WM_DDEMLEVENT = 0x3C,WM_GETOBJECT = 0x3D,MM_CALCSCROLL = 0x3F,WM_TESTING = 0x40,WM_COMPACTING = 0x41,WM_OTHERWINDOWCREATED = 0x42,WM_OTHERWINDOWDESTROYED = 0x43,WM_COMMNOTIFY = 0x44,WM_MEDIASTATUSCHANGE = 0x45,WM_WINDOWPOSCHANGING = 0x46,WM_WINDOWPOSCHANGED = 0x47,WM_POWER = 0x48,WM_COPYGLOBALDATA = 0x49,WM_COPYDATA = 0x4A,WM_CANCELJOURNAL = 0x4B,WM_LOGONNOTIFY = 0x4C,WM_KEYF1 = 0x4D,WM_NOTIFY = 0x4E,WM_ACCESS_WINDOW = 0x4F,WM_INPUTLANGCHANGEREQUEST = 0x50,WM_INPUTLANGCHANGE = 0x51,WM_TCARD = 0x52,WM_HELP = 0x53,WM_USERCHANGED = 0x54,WM_NOTIFYFORMAT = 0x55,WM_QM_ACTIVATE = 0x60,WM_HOOK_DO_CALLBACK = 0x61,WM_SYSCOPYDATA = 0x62,WM_FINALDESTROY = 0x70,WM_MEASUREITEM_CLIENTDATA = 0x71,WM_CONTEXTMENU = 0x7B,WM_STYLECHANGING = 0x7C,WM_STYLECHANGED = 0x7D,WM_DISPLAYCHANGE = 0x7E,WM_GETICON = 0x7F,WM_SETICON = 0x80,WM_NCCREATE = 0x81,WM_NCDESTROY = 0x82,WM_NCCALCSIZE = 0x83,WM_NCHITTEST = 0x84,WM_NCPAINT = 0x85,WM_NCACTIVATE = 0x86,WM_GETDLGCODE = 0x87,WM_SYNCPAINT = 0x88,WM_SYNCTASK = 0x89,WM_NCMOUSEMOVE = 0xA0,WM_NCLBUTTONDOWN = 0xA1,WM_NCLBUTTONUP = 0xA2,WM_NCLBUTTONDBLCLK = 0xA3,WM_NCRBUTTONDOWN = 0xA4,WM_NCRBUTTONUP = 0xA5,WM_NCRBUTTONDBLCLK = 0xA6,WM_NCMBUTTONDOWN = 0xA7,WM_NCMBUTTONUP = 0xA8,WM_NCMBUTTONDBLCLK = 0xA9,WM_NCXBUTTONDOWN = 0xAB,WM_NCXBUTTONUP = 0xAC,WM_NCXBUTTONDBLCLK = 0xAD,EM_GETSEL = 0xB0,EM_SETSEL = 0xB1,EM_GETRECT = 0xB2,EM_SETRECT = 0xB3,EM_SETRECTNP = 0xB4,EM_SCROLL = 0xB5,EM_LINESCROLL = 0xB6,EM_SCROLLCARET = 0xB7,EM_GETMODIFY = 0xB8,EM_SETMODIFY = 0xB9,EM_GETLINECOUNT = 0xBA,EM_LINEINDEX = 0xBB,EM_SETHANDLE = 0xBC,EM_GETHANDLE = 0xBD,EM_GETTHUMB = 0xBE,EM_LINELENGTH = 0xC1,EM_REPLACESEL = 0xC2,EM_SETFONT = 0xC3,EM_GETLINE = 0xC4,EM_LIMITTEXT = 0xC5,EM_SETLIMITTEXT = 0xC5,EM_CANUNDO = 0xC6,EM_UNDO = 0xC7,EM_FMTLINES = 0xC8,EM_LINEFROMCHAR = 0xC9,EM_SETWORDBREAK = 0xCA,EM_SETTABSTOPS = 0xCB,EM_SETPASSWORDCHAR = 0xCC,EM_EMPTYUNDOBUFFER = 0xCD,EM_GETFIRSTVISIBLELINE = 0xCE,EM_SETREADONLY = 0xCF,EM_SETWORDBREAKPROC = 0xD0,EM_GETWORDBREAKPROC = 0xD1,EM_GETPASSWORDCHAR = 0xD2,EM_SETMARGINS = 0xD3,EM_GETMARGINS = 0xD4,EM_GETLIMITTEXT = 0xD5,EM_POSFROMCHAR = 0xD6,EM_CHARFROMPOS = 0xD7,EM_SETIMESTATUS = 0xD8,EM_GETIMESTATUS = 0xD9,SBM_SETPOS = 0xE0,SBM_GETPOS = 0xE1,SBM_SETRANGE = 0xE2,SBM_GETRANGE = 0xE3,SBM_ENABLE_ARROWS = 0xE4,SBM_SETRANGEREDRAW = 0xE6,SBM_SETSCROLLINFO = 0xE9,SBM_GETSCROLLINFO = 0xEA,SBM_GETSCROLLBARINFO = 0xEB,BM_GETCHECK = 0xF0,BM_SETCHECK = 0xF1,BM_GETSTATE = 0xF2,BM_SETSTATE = 0xF3,BM_SETSTYLE = 0xF4,BM_CLICK = 0xF5,BM_GETIMAGE = 0xF6,BM_SETIMAGE = 0xF7,BM_SETDONTCLICK = 0xF8,WM_INPUT = 0xFF,WM_KEYDOWN = 0x100,WM_KEYFIRST = 0x100,WM_KEYUP = 0x101,WM_CHAR = 0x102,WM_DEADCHAR = 0x103,WM_SYSKEYDOWN = 0x104,WM_SYSKEYUP = 0x105,WM_SYSCHAR = 0x106,WM_SYSDEADCHAR = 0x107,WM_KEYLAST = 0x108,WM_YOMICHAR = 0x108,WM_UNICHAR = 0x109,WM_WNT_CONVERTREQUESTEX = 0x109,WM_CONVERTREQUEST = 0x10A,WM_CONVERTRESULT = 0x10B,WM_INTERIM = 0x10C,WM_IM_INFO = 0x10C,WM_IME_STARTCOMPOSITION = 0x10D,WM_IME_ENDCOMPOSITION = 0x10E,WM_IME_COMPOSITION = 0x10F,WM_IME_KEYLAST = 0x10F,WM_INITDIALOG = 0x110,WM_COMMAND = 0x111,WM_SYSCOMMAND = 0x112,WM_TIMER = 0x113,WM_HSCROLL = 0x114,WM_VSCROLL = 0x115,WM_INITMENU = 0x116,WM_INITMENUPOPUP = 0x117,WM_SYSTIMER = 0x118,WM_MENUSELECT = 0x11F,WM_MENUCHAR = 0x120,WM_ENTERIDLE = 0x121,WM_MENURBUTTONUP = 0x122,WM_MENUDRAG = 0x123,WM_MENUGETOBJECT = 0x124,WM_UNINITMENUPOPUP = 0x125,WM_MENUCOMMAND = 0x126,WM_CHANGEUISTATE = 0x127,WM_UPDATEUISTATE = 0x128,WM_QUERYUISTATE = 0x129,WM_LBTRACKPOINT = 0x131,WM_CTLCOLORMSGBOX = 0x132,WM_CTLCOLOREDIT = 0x133,WM_CTLCOLORLISTBOX = 0x134,WM_CTLCOLORBTN = 0x135,WM_CTLCOLORDLG = 0x136,WM_CTLCOLORSCROLLBAR = 0x137,WM_CTLCOLORSTATIC = 0x138,CB_GETEDITSEL = 0x140,CB_LIMITTEXT = 0x141,CB_SETEDITSEL = 0x142,CB_ADDSTRING = 0x143,CB_DELETESTRING = 0x144,CB_DIR = 0x145,CB_GETCOUNT = 0x146,CB_GETCURSEL = 0x147,CB_GETLBTEXT = 0x148,CB_GETLBTEXTLEN = 0x149,CB_INSERTSTRING = 0x14A,CB_RESETCONTENT = 0x14B,CB_FINDSTRING = 0x14C,CB_SELECTSTRING = 0x14D,CB_SETCURSEL = 0x14E,CB_SHOWDROPDOWN = 0x14F,CB_GETITEMDATA = 0x150,CB_SETITEMDATA = 0x151,CB_GETDROPPEDCONTROLRECT = 0x152,CB_SETITEMHEIGHT = 0x153,CB_GETITEMHEIGHT = 0x154,CB_SETEXTENDEDUI = 0x155,CB_GETEXTENDEDUI = 0x156,CB_GETDROPPEDSTATE = 0x157,CB_FINDSTRINGEXACT = 0x158,CB_SETLOCALE = 0x159,CB_GETLOCALE = 0x15A,CB_GETTOPINDEX = 0x15B,CB_SETTOPINDEX = 0x15C,CB_GETHORIZONTALEXTENT = 0x15D,CB_SETHORIZONTALEXTENT = 0x15E,CB_GETDROPPEDWIDTH = 0x15F,CB_SETDROPPEDWIDTH = 0x160,CB_INITSTORAGE = 0x161,CB_MULTIPLEADDSTRING = 0x163,CB_SETMINVISIBLE = 0x1701,CB_GETMINVISIBLE = 0x1702,CB_SETCUEBANNER = 0x1703,CB_GETCUEBANNER = 0x1704,STM_SETICON = 0x170,STM_GETICON = 0x171,STM_SETIMAGE = 0x172,STM_GETIMAGE = 0x173,LB_ADDSTRING = 0x180,LB_INSERTSTRING = 0x181,LB_DELETESTRING = 0x182,LB_SELITEMRANGEEX = 0x183,LB_RESETCONTENT = 0x184,LB_SETSEL = 0x185,LB_SETCURSEL = 0x186,LB_GETSEL = 0x187,LB_GETCURSEL = 0x188,LB_GETTEXT = 0x189,LB_GETTEXTLEN = 0x18A,LB_GETCOUNT = 0x18B,LB_SELECTSTRING = 0x18C,LB_DIR = 0x18D,LB_GETTOPINDEX = 0x18E,LB_FINDSTRING = 0x18F,LB_GETSELCOUNT = 0x190,LB_GETSELITEMS = 0x191,LB_SETTABSTOPS = 0x192,LB_GETHORIZONTALEXTENT = 0x193,LB_SETHORIZONTALEXTENT = 0x194,LB_SETCOLUMNWIDTH = 0x195,LB_ADDFILE = 0x196,LB_SETTOPINDEX = 0x197,LB_GETITEMRECT = 0x198,LB_GETITEMDATA = 0x199,LB_SETITEMDATA = 0x19A,LB_SELITEMRANGE = 0x19B,LB_SETANCHORINDEX = 0x19C,LB_GETANCHORINDEX = 0x19D,LB_SETCARETINDEX = 0x19E,LB_GETCARETINDEX = 0x19F,LB_SETITEMHEIGHT = 0x1A0,LB_GETITEMHEIGHT = 0x1A1,LB_FINDSTRINGEXACT = 0x1A2,LBCB_CARETON = 0x1A3,LBCB_CARETOFF = 0x1A4,LB_SETLOCALE = 0x1A5,LB_GETLOCALE = 0x1A6,LB_SETCOUNT = 0x1A7,LB_INITSTORAGE = 0x1A8,LB_ITEMFROMPOINT = 0x1A9,LB_INSERTSTRINGUPPER = 0x1AA,LB_INSERTSTRINGLOWER = 0x1AB,LB_ADDSTRINGUPPER = 0x1AC,LB_ADDSTRINGLOWER = 0x1AD,LB_MULTIPLEADDSTRING = 0x1B1,LB_GETLISTBOXINFO = 0x1B2,MN_SETHMENU = 0x1E0,MN_GETHMENU = 0x1E1,MN_SIZEWINDOW = 0x1E2,MN_OPENHIERARCHY = 0x1E3,MN_CLOSEHIERARCHY = 0x1E4,MN_SELECTITEM = 0x1E5,MN_CANCELMENUS = 0x1E6,MN_SELECTFIRSTVALIDITEM = 0x1E7,MN_GETPPOPUPMENU = 0x1EA,MN_FINDMENUWINDOWFROMPOINT = 0x1EB,MN_SHOWPOPUPWINDOW = 0x1EC,MN_BUTTONDOWN = 0x1ED,MN_MOUSEMOVE = 0x1EE,MN_BUTTONUP = 0x1EF,MN_SETTIMERTOOPENHIERARCHY = 0x1F0,MN_DBLCLK = 0x1F1,WM_MOUSEFIRST = 0x200,WM_MOUSEMOVE = 0x200,WM_LBUTTONDOWN = 0x201,WM_LBUTTONUP = 0x202,WM_LBUTTONDBLCLK = 0x203,WM_RBUTTONDOWN = 0x204,WM_RBUTTONUP = 0x205,WM_RBUTTONDBLCLK = 0x206,WM_MBUTTONDOWN = 0x207,WM_MBUTTONUP = 0x208,WM_MBUTTONDBLCLK = 0x209,WM_MOUSEWHEEL = 0x20A,WM_XBUTTONDOWN = 0x20B,WM_XBUTTONUP = 0x20C,WM_XBUTTONDBLCLK = 0x20D,WM_PARENTNOTIFY = 0x210,WM_ENTERMENULOOP = 0x211,WM_EXITMENULOOP = 0x212,WM_NEXTMENU = 0x213,WM_SIZING = 0x214,WM_CAPTURECHANGED = 0x215,WM_MOVING = 0x216,WM_POWERBROADCAST = 0x218,WM_DEVICECHANGE = 0x219,WM_MDICREATE = 0x220,WM_MDIDESTROY = 0x221,WM_MDIACTIVATE = 0x222,WM_MDIRESTORE = 0x223,WM_MDINEXT = 0x224,WM_MDIMAXIMIZE = 0x225,WM_MDITILE = 0x226,WM_MDICASCADE = 0x227,WM_MDIICONARRANGE = 0x228,WM_MDIGETACTIVE = 0x229,WM_DROPOBJECT = 0x22A,WM_QUERYDROPOBJECT = 0x22B,WM_BEGINDRAG = 0x22C,WM_DRAGLOOP = 0x22D,WM_DRAGSELECT = 0x22E,WM_DRAGMOVE = 0x22F,WM_MDISETMENU = 0x230,WM_ENTERSIZEMOVE = 0x231,WM_EXITSIZEMOVE = 0x232,WM_DROPFILES = 0x233,WM_MDIREFRESHMENU = 0x234,WM_IME_REPORT = 0x280,WM_HANGEULFIRST = 0x280,WM_KANJIFIRST = 0x280,WM_IME_SETCONTEXT = 0x281,WM_IME_NOTIFY = 0x282,WM_IME_CONTROL = 0x283,WM_IME_COMPOSITIONFULL = 0x284,WM_IME_SELECT = 0x285,WM_IME_CHAR = 0x286,WM_IME_SYSTEM = 0x287,WM_IME_REQUEST = 0x288,WM_IMEKEYDOWN = 0x290,WM_IME_KEYDOWN = 0x290,WM_IMEKEYUP = 0x291,WM_IME_KEYUP = 0x291,WM_HANGEULLAST = 0x29F,WM_KANJILAST = 0x29F,WM_NCMOUSEHOVER = 0x2A0,WM_MOUSEHOVER = 0x2A1,WM_NCMOUSELEAVE = 0x2A2,WM_MOUSELEAVE = 0x2A3,WM_TRACKMOUSEEVENT_LAST = 0x2AF,WM_WTSSESSION_CHANGE = 0x2B1,WM_TABLET_FIRST = 0x2C0,WM_TABLET_LAST = 0x2DF,WM_CUT = 0x300,WM_COPY = 0x301,WM_PASTE = 0x302,WM_CLEAR = 0x303,WM_UNDO = 0x304,WM_RENDERFORMAT = 0x305,WM_RENDERALLFORMATS = 0x306,WM_DESTROYCLIPBOARD = 0x307,WM_DRAWCLIPBOARD = 0x308,WM_PAINTCLIPBOARD = 0x309,WM_VSCROLLCLIPBOARD = 0x30A,WM_SIZECLIPBOARD = 0x30B,WM_ASKCBFORMATNAME = 0x30C,WM_CHANGECBCHAIN = 0x30D,WM_HSCROLLCLIPBOARD = 0x30E,WM_QUERYNEWPALETTE = 0x30F,WM_PALETTEISCHANGING = 0x310,WM_PALETTECHANGED = 0x311,WM_HOTKEY = 0x312,WM_SYSMENU = 0x313,WM_HOOKMSG = 0x314,WM_EXITPROCESS = 0x315,WM_WAKETHREAD = 0x316,WM_PRINT = 0x317,WM_PRINTCLIENT = 0x318,WM_APPCOMMAND = 0x319,WM_THEMECHANGED = 0x31A,WM_HANDHELDFIRST = 0x358,WM_HANDHELDLAST = 0x35F,WM_AFXFIRST = 0x360,WM_AFXLAST = 0x37F,WM_PENWINFIRST = 0x380,WM_RCRESULT = 0x381,WM_HOOKRCRESULT = 0x382,WM_GLOBALRCCHANGE = 0x383,WM_PENMISCINFO = 0x383,WM_SKB = 0x384,WM_HEDITCTL = 0x385,WM_PENCTL = 0x385,WM_PENMISC = 0x386,WM_CTLINIT = 0x387,WM_PENEVENT = 0x388,WM_PENWINLAST = 0x38F,WM_INTERNAL_COALESCE_FIRST = 0x390,WM_COALESCE_FIRST = 0x390,WM_COALESCE_LAST = 0x39F,WM_MM_RESERVED_FIRST = 0x3A0,WM_INTERNAL_COALESCE_LAST = 0x3B0,WM_MM_RESERVED_LAST = 0x3DF,WM_DDE_INITIATE = 0x3E0,WM_DDE_TERMINATE = 0x3E1,WM_DDE_ADVISE = 0x3E2,WM_DDE_UNADVISE = 0x3E3,WM_DDE_ACK = 0x3E4,WM_DDE_DATA = 0x3E5,WM_DDE_REQUEST = 0x3E6,WM_DDE_POKE = 0x3E7,WM_DDE_EXECUTE = 0x3E8,WM_DBNOTIFICATION = 0x3FD,WM_NETCONNECT = 0x3FE,WM_HIBERNATE = 0x3FF,WM_USER = 0x400,DDM_SETFMT = 0x400,DDM_DRAW = 0x401,DDM_CLOSE = 0x402,DDM_BEGIN = 0x403,DDM_END = 0x404,DM_GETDEFID = 0x400,DM_SETDEFID = 0x401,DM_REPOSITION = 0x402,NIN_SELECT = 0x400,NIN_KEYSELECT = 0x401,NIN_BALLOONSHOW = 0x402,NIN_BALLOONHIDE = 0x403,NIN_BALLOONTIMEOUT = 0x404,NIN_BALLOONUSERCLICK = 0x405,NIN_POPUPOPEN = 0x406,NIN_POPUPCLOSE = 0x407,TBM_GETPOS = 0x400,TBM_GETRANGEMIN = 0x401,TBM_GETRANGEMAX = 0x402,TBM_GETTIC = 0x403,TBM_SETTIC = 0x404,TBM_SETPOS = 0x405,TBM_SETRANGE = 0x406,TBM_SETRANGEMIN = 0x407,TBM_SETRANGEMAX = 0x408,TBM_CLEARTICS = 0x409,TBM_SETSEL = 0x40A,TBM_SETSELSTART = 0x40B,TBM_SETSELEND = 0x40C,TBM_GETPTICS = 0x40E,TBM_GETTICPOS = 0x40F,TBM_GETNUMTICS = 0x410,TBM_GETSELSTART = 0x411,TBM_GETSELEND = 0x412,TBM_CLEARSEL = 0x413,TBM_SETTICFREQ = 0x414,TBM_SETPAGESIZE = 0x415,TBM_GETPAGESIZE = 0x416,TBM_SETLINESIZE = 0x417,TBM_GETLINESIZE = 0x418,TBM_GETTHUMBRECT = 0x419,TBM_GETCHANNELRECT = 0x41A,TBM_SETTHUMBLENGTH = 0x41B,TBM_GETTHUMBLENGTH = 0x41C,TBM_SETTOOLTIPS = 0x41D,TBM_GETTOOLTIPS = 0x41E,TBM_SETTIPSIDE = 0x41F,TBM_SETBUDDY = 0x420,TBM_GETBUDDY = 0x421,TBM_SETPOSNOTIFY = 0x422,WM_PSD_PAGESETUPDLG = 0x400,WM_PSD_FULLPAGERECT = 0x401,WM_PSD_MINMARGINRECT = 0x402,WM_PSD_MARGINRECT = 0x403,WM_PSD_GREEKTEXTRECT = 0x404,WM_PSD_ENVSTAMPRECT = 0x405,WM_PSD_YAFULLPAGERECT = 0x406,WM_CHOOSEFONT_GETLOGFONT = 0x401,WM_CHOOSEFONT_SETLOGFONT = 0x465,WM_CHOOSEFONT_SETFLAGS = 0x466,HKM_SETHOTKEY = 0x401,HKM_GETHOTKEY = 0x402,HKM_SETRULES = 0x403,PBM_SETRANGE = 0x401,PBM_SETPOS = 0x402,PBM_DELTAPOS = 0x403,PBM_SETSTEP = 0x404,PBM_STEPIT = 0x405,PBM_SETRANGE32 = 0x406,PBM_GETRANGE = 0x407,PBM_GETPOS = 0x408,PBM_SETBARCOLOR = 0x409,PBM_SETMARQUEE = 0x40A,PBM_GETSTEP = 0x40D,PBM_GETBKCOLOR = 0x40E,PBM_GETBARCOLOR = 0x40F,PBM_SETSTATE = 0x410,PBM_GETSTATE = 0x411,RB_INSERTBANDA = 0x401,RB_DELETEBAND = 0x402,RB_GETBARINFO = 0x403,RB_SETBARINFO = 0x404,RB_SETBANDINFOA = 0x406,RB_SETPARENT = 0x407,RB_HITTEST = 0x408,RB_GETRECT = 0x409,RB_INSERTBANDW = 0x40A,RB_SETBANDINFOW = 0x40B,RB_GETBANDCOUNT = 0x40C,RB_GETROWCOUNT = 0x40D,RB_GETROWHEIGHT = 0x40E,RB_IDTOINDEX = 0x410,RB_GETTOOLTIPS = 0x411,RB_SETTOOLTIPS = 0x412,RB_SETBKCOLOR = 0x413,RB_GETBKCOLOR = 0x414,RB_SETTEXTCOLOR = 0x415,RB_GETTEXTCOLOR = 0x416,RB_SIZETORECT = 0x417,RB_BEGINDRAG = 0x418,RB_ENDDRAG = 0x419,RB_DRAGMOVE = 0x41A,RB_GETBARHEIGHT = 0x41B,RB_GETBANDINFOW = 0x41C,RB_GETBANDINFOA = 0x41D,RB_MINIMIZEBAND = 0x41E,RB_MAXIMIZEBAND = 0x41F,RB_GETBANDBORDERS = 0x422,RB_SHOWBAND = 0x423,RB_SETPALETTE = 0x425,RB_GETPALETTE = 0x426,RB_MOVEBAND = 0x427,RB_PUSHCHEVRON = 0x42B,RB_GETBANDMARGINS = 0x428,RB_SETEXTENDEDSTYLE = 0x429,RB_GETEXTENDEDSTYLE = 0x42A,RB_SETBANDWIDTH = 0x42C,RB_SETWINDOWTHEME = 0x200B,CBEM_INSERTITEMA = 0x401,CBEM_SETIMAGELIST = 0x402,CBEM_GETIMAGELIST = 0x403,CBEM_GETITEMA = 0x404,CBEM_SETITEMA = 0x405,CBEM_GETCOMBOCONTROL = 0x406,CBEM_GETEDITCONTROL = 0x407,CBEM_SETEXSTYLE = 0x408,CBEM_GETEXSTYLE = 0x409,CBEM_GETEXTENDEDSTYLE = 0x409,CBEM_HASEDITCHANGED = 0x40A,CBEM_INSERTITEMW = 0x40B,CBEM_SETITEMW = 0x40C,CBEM_GETITEMW = 0x40D,CBEM_SETEXTENDEDSTYLE = 0x40E,SB_SETTEXTA = 0x401,SB_GETTEXTA = 0x402,SB_GETTEXTLENGTHA = 0x403,SB_SETPARTS = 0x404,SB_GETPARTS = 0x406,SB_GETBORDERS = 0x407,SB_SETMINHEIGHT = 0x408,SB_SIMPLE = 0x409,SB_GETRECT = 0x40A,SB_SETTEXTW = 0x40B,SB_GETTEXTLENGTHW = 0x40C,SB_GETTEXTW = 0x40D,SB_ISSIMPLE = 0x40E,SB_SETICON = 0x40F,SB_SETTIPTEXTA = 0x410,SB_SETTIPTEXTW = 0x411,SB_GETTIPTEXTA = 0x412,SB_GETTIPTEXTW = 0x413,SB_GETICON = 0x414,TTM_ACTIVATE = 0x401,TTM_SETDELAYTIME = 0x403,TTM_ADDTOOLA = 0x404,TTM_DELTOOLA = 0x405,TTM_NEWTOOLRECTA = 0x406,TTM_RELAYEVENT = 0x407,TTM_GETTOOLINFOA = 0x408,TTM_SETTOOLINFOA = 0x409,TTM_HITTESTA = 0x40A,TTM_GETTEXTA = 0x40B,TTM_UPDATETIPTEXTA = 0x40C,TTM_GETTOOLCOUNT = 0x40D,TTM_ENUMTOOLSA = 0x40E,TTM_GETCURRENTTOOLA = 0x40F,TTM_WINDOWFROMPOINT = 0x410,TTM_TRACKACTIVATE = 0x411,TTM_TRACKPOSITION = 0x412,TTM_SETTIPBKCOLOR = 0x413,TTM_SETTIPTEXTCOLOR = 0x414,TTM_GETDELAYTIME = 0x415,TTM_GETTIPBKCOLOR = 0x416,TTM_GETTIPTEXTCOLOR = 0x417,TTM_SETMAXTIPWIDTH = 0x418,TTM_GETMAXTIPWIDTH = 0x419,TTM_SETMARGIN = 0x41A,TTM_GETMARGIN = 0x41B,TTM_POP = 0x41C,TTM_UPDATE = 0x41D,TTM_GETBUBBLESIZE = 0x41E,TTM_ADJUSTRECT = 0x41F,TTM_SETTITLEA = 0x420,TTM_SETTITLEW = 0x421,TTM_ADDTOOLW = 0x432,TTM_DELTOOLW = 0x433,TTM_NEWTOOLRECTW = 0x434,TTM_GETTOOLINFOW = 0x435,TTM_SETTOOLINFOW = 0x436,TTM_HITTESTW = 0x437,TTM_GETTEXTW = 0x438,TTM_UPDATETIPTEXTW = 0x439,TTM_ENUMTOOLSW = 0x43A,TTM_GETCURRENTTOOLW = 0x43B,WIZ_QUERYNUMPAGES = 0x40A,WIZ_NEXT = 0x40B,WIZ_PREV = 0x40C,MSG_FTS_JUMP_VA = 0x421,MSG_FTS_JUMP_QWORD = 0x423,MSG_REINDEX_REQUEST = 0x424,MSG_FTS_WHERE_IS_IT = 0x425,MSG_GET_DEFFONT = 0x42D,TB_ENABLEBUTTON = 0x401,TB_CHECKBUTTON = 0x402,TB_PRESSBUTTON = 0x403,TB_HIDEBUTTON = 0x404,TB_INDETERMINATE = 0x405,TB_MARKBUTTON = 0x406,TB_ISBUTTONENABLED = 0x409,TB_ISBUTTONCHECKED = 0x40A,TB_ISBUTTONPRESSED = 0x40B,TB_ISBUTTONHIDDEN = 0x40C,TB_ISBUTTONINDETERMINATE = 0x40D,TB_ISBUTTONHIGHLIGHTED = 0x40E,TB_SETSTATE = 0x411,TB_GETSTATE = 0x412,TB_ADDBITMAP = 0x413,TB_ADDBUTTONSA = 0x414,TB_INSERTBUTTONA = 0x415,TB_DELETEBUTTON = 0x416,TB_GETBUTTON = 0x417,TB_BUTTONCOUNT = 0x418,TB_COMMANDTOINDEX = 0x419,TB_SAVERESTOREA = 0x41A,TB_CUSTOMIZE = 0x41B,TB_ADDSTRINGA = 0x41C,TB_GETITEMRECT = 0x41D,TB_BUTTONSTRUCTSIZE = 0x41E,TB_SETBUTTONSIZE = 0x41F,TB_SETBITMAPSIZE = 0x420,TB_AUTOSIZE = 0x421,TB_GETTOOLTIPS = 0x423,TB_SETTOOLTIPS = 0x451,TB_SETPARENT = 0x425,TB_SETROWS = 0x427,TB_GETROWS = 0x428,TB_GETBITMAPFLAGS = 0x429,TB_SETCMDID = 0x42A,TB_CHANGEBITMAP = 0x42B,TB_GETBITMAP = 0x42C,TB_GETBUTTONTEXTA = 0x42D,TB_REPLACEBITMAP = 0x42E,TB_SETINDENT = 0x42F,TB_SETIMAGELIST = 0x430,TB_GETIMAGELIST = 0x431,TB_LOADIMAGES = 0x432,TB_GETRECT = 0x433,TB_SETHOTIMAGELIST = 0x434,TB_GETHOTIMAGELIST = 0x435,TB_SETDISABLEDIMAGELIST = 0x436,TB_GETDISABLEDIMAGELIST = 0x437,TB_SETSTYLE = 0x438,TB_GETSTYLE = 0x439,TB_GETBUTTONSIZE = 0x43A,TB_SETBUTTONWIDTH = 0x43B,TB_SETMAXTEXTROWS = 0x43C,TB_GETTEXTROWS = 0x43D,TB_GETOBJECT = 0x43E,TB_GETBUTTONINFOW = 0x43F,TB_SETBUTTONINFOW = 0x440,TB_GETBUTTONINFOA = 0x441,TB_SETBUTTONINFOA = 0x442,TB_INSERTBUTTONW = 0x443,TB_ADDBUTTONSW = 0x444,TB_HITTEST = 0x445,TB_SETDRAWTEXTFLAGS = 0x446,TB_GETHOTITEM = 0x447,TB_SETHOTITEM = 0x448,TB_SETANCHORHIGHLIGHT = 0x449,TB_GETANCHORHIGHLIGHT = 0x44A,TB_GETBUTTONTEXTW = 0x44B,TB_SAVERESTOREW = 0x44C,TB_ADDSTRINGW = 0x44D,TB_MAPACCELERATORA = 0x44E,TB_GETINSERTMARK = 0x44F,TB_SETINSERTMARK = 0x450,TB_INSERTMARKHITTEST = 0x451,TB_MOVEBUTTON = 0x452,TB_GETMAXSIZE = 0x453,TB_SETEXTENDEDSTYLE = 0x454,TB_GETEXTENDEDSTYLE = 0x455,TB_GETPADDING = 0x456,TB_SETPADDING = 0x457,TB_SETINSERTMARKCOLOR = 0x458,TB_GETINSERTMARKCOLOR = 0x459,TB_MAPACCELERATORW = 0x45A,TB_GETSTRINGW = 0x45B,TB_GETSTRINGA = 0x45C,TB_SETBOUNDINGSIZE = 0x45D,TB_SETHOTITEM2 = 0x45E,TB_HASACCELERATOR = 0x45F,TB_SETLISTGAP = 0x460,TB_GETIMAGELISTCOUNT = 0x462,TB_GETIDEALSIZE = 0x463,TB_GETMETRICS = 0x465,TB_SETMETRICS = 0x466,TB_GETITEMDROPDOWNRECT = 0x467,TB_SETPRESSEDIMAGELIST = 0x468,TB_GETPRESSEDIMAGELIST = 0x469,TB_SETWINDOWTHEME = 0x200B,EM_CANPASTE = 0x432,EM_DISPLAYBAND = 0x433,EM_EXGETSEL = 0x434,EM_EXLIMITTEXT = 0x435,EM_EXLINEFROMCHAR = 0x436,EM_EXSETSEL = 0x437,EM_FINDTEXT = 0x438,EM_FORMATRANGE = 0x439,EM_GETCHARFORMAT = 0x43A,EM_GETEVENTMASK = 0x43B,EM_GETOLEINTERFACE = 0x43C,EM_GETPARAFORMAT = 0x43D,EM_GETSELTEXT = 0x43E,EM_HIDESELECTION = 0x43F,EM_PASTESPECIAL = 0x440,EM_REQUESTRESIZE = 0x441,EM_SELECTIONTYPE = 0x442,EM_SETBKGNDCOLOR = 0x443,EM_SETCHARFORMAT = 0x444,EM_SETEVENTMASK = 0x445,EM_SETOLECALLBACK = 0x446,EM_SETPARAFORMAT = 0x447,EM_SETTARGETDEVICE = 0x448,EM_STREAMIN = 0x449,EM_STREAMOUT = 0x44A,EM_GETTEXTRANGE = 0x44B,EM_FINDWORDBREAK = 0x44C,EM_SETOPTIONS = 0x44D,EM_GETOPTIONS = 0x44E,EM_FINDTEXTEX = 0x44F,EM_GETWORDBREAKPROCEX = 0x450,EM_SETWORDBREAKPROCEX = 0x451,EM_SETUNDOLIMIT = 0x452,EM_REDO = 0x454,EM_CANREDO = 0x455,EM_GETUNDONAME = 0x456,EM_GETREDONAME = 0x457,EM_STOPGROUPTYPING = 0x458,EM_SETTEXTMODE = 0x459,EM_GETTEXTMODE = 0x45A,EM_AUTOURLDETECT = 0x45B,EM_GETAUTOURLDETECT = 0x45C,EM_SETPALETTE = 0x45D,EM_GETTEXTEX = 0x45E,EM_GETTEXTLENGTHEX = 0x45F,EM_SHOWSCROLLBAR = 0x460,EM_SETTEXTEX = 0x461,EM_SETPUNCTUATION = 0x464,EM_GETPUNCTUATION = 0x465,EM_SETWORDWRAPMODE = 0x466,EM_GETWORDWRAPMODE = 0x467,EM_SETIMECOLOR = 0x468,EM_GETIMECOLOR = 0x469,EM_SETIMEOPTIONS = 0x46A,EM_GETIMEOPTIONS = 0x46B,EM_CONVPOSITION = 0x46C,EM_SETLANGOPTIONS = 0x478,EM_GETLANGOPTIONS = 0x479,EM_GETIMECOMPMODE = 0x47A,EM_FINDTEXTW = 0x47B,EM_FINDTEXTEXW = 0x47C,EM_RECONVERSION = 0x47D,EM_SETIMEMODEBIAS = 0x47E,EM_GETIMEMODEBIAS = 0x47F,EM_SETBIDIOPTIONS = 0x4C8,EM_GETBIDIOPTIONS = 0x4C9,EM_SETTYPOGRAPHYOPTIONS = 0x4CA,EM_GETTYPOGRAPHYOPTIONS = 0x4CB,EM_SETEDITSTYLE = 0x4CC,EM_GETEDITSTYLE = 0x4CD,EM_OUTLINE = 0x4DC,EM_GETSCROLLPOS = 0x4DD,EM_SETSCROLLPOS = 0x4DE,EM_SETFONTSIZE = 0x4DF,EM_GETZOOM = 0x4E0,EM_SETZOOM = 0x4E1,EM_GETVIEWKIND = 0x4E2,EM_SETVIEWKIND = 0x4E3,EM_GETPAGE = 0x4E4,EM_SETPAGE = 0x4E5,EM_GETHYPHENATEINFO = 0x4E6,EM_SETHYPHENATEINFO = 0x4E7,EM_INSERTTABLE = 0x4E8,EM_GETAUTOCORRECTPROC = 0x4E9,EM_SETAUTOCORRECTPROC = 0x4EA,EM_GETPAGEROTATE = 0x4EB,EM_SETPAGEROTATE = 0x4EC,EM_GETCTFMODEBIAS = 0x4ED,EM_SETCTFMODEBIAS = 0x4EE,EM_GETCTFOPENSTATUS = 0x4F0,EM_SETCTFOPENSTATUS = 0x4F1,EM_GETIMECOMPTEXT = 0x4F2,EM_ISIME = 0x4F3,EM_GETIMEPROPERTY = 0x4F4,EM_CALLAUTOCORRECTPROC = 0x4FF,EM_GETTABLEPARMS = 0x509,EM_GETQUERYRTFOBJ = 0x50D,EM_SETQUERYRTFOBJ = 0x50E,EM_SETEDITSTYLEEX = 0x513,EM_GETEDITSTYLEEX = 0x514,EM_GETSTORYTYPE = 0x522,EM_SETSTORYTYPE = 0x523,EM_GETELLIPSISMODE = 0x531,EM_SETELLIPSISMODE = 0x532,EM_SETTABLEPARMS = 0x533,EM_GETTOUCHOPTIONS = 0x536,EM_SETTOUCHOPTIONS = 0x537,EM_INSERTIMAGE = 0x53A,EM_SETUIANAME = 0x540,EM_GETELLIPSISSTATE = 0x542,TAPI_REPLY = 0x463,IPM_CLEARADDRESS = 0x464,IPM_SETADDRESS = 0x465,IPM_GETADDRESS = 0x466,IPM_SETRANGE = 0x467,IPM_SETFOCUS = 0x468,IPM_ISBLANK = 0x469,CDM_FIRST = 0x464,CDM_GETSPEC = 0x464,CDM_GETFILEPATH = 0x465,CDM_GETFOLDERPATH = 0x466,CDM_GETFOLDERIDLIST = 0x467,CDM_SETCONTROLTEXT = 0x468,CDM_HIDECONTROL = 0x469,CDM_SETDEFEXT = 0x46A,CDM_LAST = 0x4C8,BFFM_SETSTATUSTEXTA = 0x464,BFFM_ENABLEOK = 0x465,BFFM_SETSELECTIONA = 0x466,BFFM_SETSELECTIONW = 0x467,BFFM_SETSTATUSTEXTW = 0x468,BFFM_SETOKTEXT = 0x469,BFFM_SETEXPANDED = 0x46A,ACM_OPENA = 0x464,ACM_PLAY = 0x465,ACM_STOP = 0x466,ACM_OPENW = 0x467,ACM_ISPLAYING = 0x468,WM_CAP_UNICODE_START = 0x464,WM_CAP_SET_CALLBACK_ERRORW = 0x466,WM_CAP_SET_CALLBACK_STATUSW = 0x467,WM_CAP_DRIVER_GET_NAMEW = 0x470,WM_CAP_DRIVER_GET_VERSIONW = 0x471,WM_CAP_FILE_SET_CAPTURE_FILEW = 0x478,WM_CAP_FILE_GET_CAPTURE_FILEW = 0x479,WM_CAP_FILE_SAVEASW = 0x47B,WM_CAP_FILE_SAVEDIBW = 0x47D,WM_CAP_SET_MCI_DEVICEW = 0x4A6,WM_CAP_GET_MCI_DEVICEW = 0x4A7,WM_CAP_PAL_OPENW = 0x4B4,WM_CAP_PAL_SAVEW = 0x4B5,PSM_SETCURSEL = 0x465,PSM_REMOVEPAGE = 0x466,PSM_ADDPAGE = 0x467,PSM_CHANGED = 0x468,PSM_RESTARTWINDOWS = 0x469,PSM_REBOOTSYSTEM = 0x46A,PSM_CANCELTOCLOSE = 0x46B,PSM_QUERYSIBLINGS = 0x46C,PSM_UNCHANGED = 0x46D,PSM_APPLY = 0x46E,PSM_SETTITLEA = 0x46F,PSM_SETWIZBUTTONS = 0x470,PSM_PRESSBUTTON = 0x471,PSM_SETCURSELID = 0x472,PSM_SETFINISHTEXTA = 0x473,PSM_GETTABCONTROL = 0x474,PSM_ISDIALOGMESSAGE = 0x475,PSM_GETCURRENTPAGEHWND = 0x476,PSM_INSERTPAGE = 0x477,PSM_SETTITLEW = 0x478,PSM_SETFINISHTEXTW = 0x479,PSM_SETHEADERTITLEA = 0x47D,PSM_SETHEADERTITLEW = 0x47E,PSM_SETHEADERSUBTITLEA = 0x47F,PSM_SETHEADERSUBTITLEW = 0x480,PSM_HWNDTOINDEX = 0x481,PSM_INDEXTOHWND = 0x482,PSM_PAGETOINDEX = 0x483,PSM_INDEXTOPAGE = 0x484,PSM_IDTOINDEX = 0x485,PSM_INDEXTOID = 0x486,PSM_GETRESULT = 0x487,PSM_RECALCPAGESIZES = 0x488,PSM_SETNEXTTEXTW = 0x489,PSM_SHOWWIZBUTTONS = 0x48A,PSM_ENABLEWIZBUTTONS = 0x48B,PSM_SETBUTTONTEXTW = 0x48C,UDM_SETRANGE = 0x465,UDM_GETRANGE = 0x466,UDM_SETPOS = 0x467,UDM_GETPOS = 0x468,UDM_SETBUDDY = 0x469,UDM_GETBUDDY = 0x46A,UDM_SETACCEL = 0x46B,UDM_GETACCEL = 0x46C,UDM_SETBASE = 0x46D,UDM_GETBASE = 0x46E,UDM_SETRANGE32 = 0x46F,UDM_GETRANGE32 = 0x470,UDM_SETPOS32 = 0x471,UDM_GETPOS32 = 0x472,MCIWNDM_GETZOOM = 0x46D,MCIWNDM_REALIZE = 0x476,MCIWNDM_SETTIMEFORMATA = 0x477,MCIWNDM_GETTIMEFORMATA = 0x478,MCIWNDM_VALIDATEMEDIA = 0x479,MCIWNDM_PLAYTO = 0x47B,MCIWNDM_GETFILENAMEA = 0x47C,MCIWNDM_GETDEVICEA = 0x47D,MCIWNDM_GETPALETTE = 0x47E,MCIWNDM_SETPALETTE = 0x47F,MCIWNDM_GETERRORA = 0x480,MCIWNDM_SETINACTIVETIMER = 0x483,MCIWNDM_GETINACTIVETIMER = 0x485,MCIWNDM_GET_SOURCE = 0x48C,MCIWNDM_PUT_SOURCE = 0x48D,MCIWNDM_GET_DEST = 0x48E,MCIWNDM_PUT_DEST = 0x48F,MCIWNDM_CAN_PLAY = 0x490,MCIWNDM_CAN_WINDOW = 0x491,MCIWNDM_CAN_RECORD = 0x492,MCIWNDM_CAN_SAVE = 0x493,MCIWNDM_CAN_EJECT = 0x494,MCIWNDM_CAN_CONFIG = 0x495,MCIWNDM_PALETTEKICK = 0x496,MCIWNDM_NOTIFYMODE = 0x4C8,MCIWNDM_NOTIFYMEDIA = 0x4CB,MCIWNDM_NOTIFYERROR = 0x4CD,MCIWNDM_SETTIMEFORMATW = 0x4DB,MCIWNDM_GETTIMEFORMATW = 0x4DC,MCIWNDM_GETFILENAMEW = 0x4E0,MCIWNDM_GETDEVICEW = 0x4E1,MCIWNDM_GETERRORW = 0x4E4,DL_BEGINDRAG = 0x485,DL_DRAGGING = 0x486,DL_DROPPED = 0x487,DL_CANCELDRAG = 0x488,IE_GETINK = 0x496,IE_MSGFIRST = 0x496,IE_SETINK = 0x497,IE_GETPENTIP = 0x498,IE_SETPENTIP = 0x499,IE_GETERASERTIP = 0x49A,IE_SETERASERTIP = 0x49B,IE_GETBKGND = 0x49C,IE_SETBKGND = 0x49D,IE_GETGRIDORIGIN = 0x49E,IE_SETGRIDORIGIN = 0x49F,IE_GETGRIDPEN = 0x4A0,IE_SETGRIDPEN = 0x4A1,IE_GETGRIDSIZE = 0x4A2,IE_SETGRIDSIZE = 0x4A3,IE_GETMODE = 0x4A4,IE_SETMODE = 0x4A5,IE_GETINKRECT = 0x4A6,IE_GETAPPDATA = 0x4B8,IE_SETAPPDATA = 0x4B9,IE_GETDRAWOPTS = 0x4BA,IE_SETDRAWOPTS = 0x4BB,IE_GETFORMAT = 0x4BC,IE_SETFORMAT = 0x4BD,IE_GETINKINPUT = 0x4BE,IE_SETINKINPUT = 0x4BF,IE_GETNOTIFY = 0x4C0,IE_SETNOTIFY = 0x4C1,IE_GETRECOG = 0x4C2,IE_SETRECOG = 0x4C3,IE_GETSECURITY = 0x4C4,IE_SETSECURITY = 0x4C5,IE_GETSEL = 0x4C6,IE_SETSEL = 0x4C7,IE_DOCOMMAND = 0x4C8,IE_GETCOMMAND = 0x4C9,IE_GETCOUNT = 0x4CA,IE_GETGESTURE = 0x4CB,IE_GETMENU = 0x4CC,IE_GETPAINTDC = 0x4CD,IE_GETPDEVENT = 0x4CE,IE_GETSELCOUNT = 0x4CF,IE_GETSELITEMS = 0x4D0,IE_GETSTYLE = 0x4D1,FM_GETFOCUS = 0x600,FM_GETDRIVEINFOA = 0x601,FM_GETSELCOUNT = 0x602,FM_GETSELCOUNTLFN = 0x603,FM_GETFILESELA = 0x604,FM_GETFILESELLFNA = 0x605,FM_REFRESH_WINDOWS = 0x606,FM_RELOAD_EXTENSIONS = 0x607,FM_GETDRIVEINFOW = 0x611,FM_GETFILESELW = 0x614,FM_GETFILESELLFNW = 0x615,WLX_WM_SAS = 0x659,SM_GETSELCOUNT = 0x7E8,SM_GETSERVERSELA = 0x7E9,SM_GETSERVERSELW = 0x7EA,SM_GETCURFOCUSA = 0x7EB,SM_GETCURFOCUSW = 0x7EC,SM_GETOPTIONS = 0x7ED,WM_CPL_LAUNCH = 0x7E8,WM_CPL_LAUNCHED = 0x7E9,UM_GETSELCOUNT = 0x7E8,UM_GETUSERSELA = 0x7E9,UM_GETUSERSELW = 0x7EA,UM_GETGROUPSELA = 0x7EB,UM_GETGROUPSELW = 0x7EC,UM_GETCURFOCUSA = 0x7ED,UM_GETCURFOCUSW = 0x7EE,UM_GETOPTIONS = 0x7EF,UM_GETOPTIONS2 = 0x7F0,LVM_FIRST = 0x1000,LVM_GETBKCOLOR = 0x1000,LVM_SETBKCOLOR = 0x1001,LVM_GETIMAGELIST = 0x1002,LVM_SETIMAGELIST = 0x1003,LVM_GETITEMCOUNT = 0x1004,LVM_GETITEMA = 0x1005,LVM_SETITEMA = 0x1006,LVM_INSERTITEMA = 0x1007,LVM_DELETEITEM = 0x1008,LVM_DELETEALLITEMS = 0x1009,LVM_GETCALLBACKMASK = 0x100A,LVM_SETCALLBACKMASK = 0x100B,LVM_GETNEXTITEM = 0x100C,LVM_FINDITEMA = 0x100D,LVM_GETITEMRECT = 0x100E,LVM_SETITEMPOSITION = 0x100F,LVM_GETITEMPOSITION = 0x1010,LVM_GETSTRINGWIDTHA = 0x1011,LVM_HITTEST = 0x1012,LVM_ENSUREVISIBLE = 0x1013,LVM_SCROLL = 0x1014,LVM_REDRAWITEMS = 0x1015,LVM_ARRANGE = 0x1016,LVM_EDITLABELA = 0x1017,LVM_GETEDITCONTROL = 0x1018,LVM_GETCOLUMNA = 0x1019,LVM_SETCOLUMNA = 0x101A,LVM_INSERTCOLUMNA = 0x101B,LVM_DELETECOLUMN = 0x101C,LVM_GETCOLUMNWIDTH = 0x101D,LVM_SETCOLUMNWIDTH = 0x101E,LVM_GETHEADER = 0x101F,LVM_CREATEDRAGIMAGE = 0x1021,LVM_GETVIEWRECT = 0x1022,LVM_GETTEXTCOLOR = 0x1023,LVM_SETTEXTCOLOR = 0x1024,LVM_GETTEXTBKCOLOR = 0x1025,LVM_SETTEXTBKCOLOR = 0x1026,LVM_GETTOPINDEX = 0x1027,LVM_GETCOUNTPERPAGE = 0x1028,LVM_GETORIGIN = 0x1029,LVM_UPDATE = 0x102A,LVM_SETITEMSTATE = 0x102B,LVM_GETITEMSTATE = 0x102C,LVM_GETITEMTEXTA = 0x102D,LVM_SETITEMTEXTA = 0x102E,LVM_SETITEMCOUNT = 0x102F,LVM_SORTITEMS = 0x1030,LVM_SETITEMPOSITION32 = 0x1031,LVM_GETSELECTEDCOUNT = 0x1032,LVM_GETITEMSPACING = 0x1033,LVM_GETISEARCHSTRINGA = 0x1034,LVM_SETICONSPACING = 0x1035,LVM_SETEXTENDEDLISTVIEWSTYLE = 0x1036,LVM_GETEXTENDEDLISTVIEWSTYLE = 0x1037,LVM_GETSUBITEMRECT = 0x1038,LVM_SUBITEMHITTEST = 0x1039,LVM_SETCOLUMNORDERARRAY = 0x103A,LVM_GETCOLUMNORDERARRAY = 0x103B,LVM_SETHOTITEM = 0x103C,LVM_GETHOTITEM = 0x103D,LVM_SETHOTCURSOR = 0x103E,LVM_GETHOTCURSOR = 0x103F,LVM_APPROXIMATEVIEWRECT = 0x1040,LVM_SETWORKAREAS = 0x1041,LVM_GETSELECTIONMARK = 0x1042,LVM_SETSELECTIONMARK = 0x1043,LVM_SETBKIMAGEA = 0x1044,LVM_GETBKIMAGEA = 0x1045,LVM_GETWORKAREAS = 0x1046,LVM_SETHOVERTIME = 0x1047,LVM_GETHOVERTIME = 0x1048,LVM_GETNUMBEROFWORKAREAS = 0x1049,LVM_SETTOOLTIPS = 0x104A,LVM_GETITEMW = 0x104B,LVM_SETITEMW = 0x104C,LVM_INSERTITEMW = 0x104D,LVM_GETTOOLTIPS = 0x104E,LVM_SORTITEMSEX = 0x1051,LVM_FINDITEMW = 0x1053,LVM_GETSTRINGWIDTHW = 0x1057,LVM_GETGROUPSTATE = 0x105C,LVM_GETFOCUSEDGROUP = 0x105D,LVM_GETCOLUMNW = 0x105F,LVM_SETCOLUMNW = 0x1060,LVM_INSERTCOLUMNW = 0x1061,LVM_GETGROUPRECT = 0x1062,LVM_GETITEMTEXTW = 0x1073,LVM_SETITEMTEXTW = 0x1074,LVM_GETISEARCHSTRINGW = 0x1075,LVM_EDITLABELW = 0x1076,LVM_GETBKIMAGEW = 0x108B,LVM_SETSELECTEDCOLUMN = 0x108C,LVM_SETTILEWIDTH = 0x108D,LVM_SETVIEW = 0x108E,LVM_GETVIEW = 0x108F,LVM_INSERTGROUP = 0x1091,LVM_SETGROUPINFO = 0x1093,LVM_GETGROUPINFO = 0x1095,LVM_REMOVEGROUP = 0x1096,LVM_MOVEGROUP = 0x1097,LVM_GETGROUPCOUNT = 0x1098,LVM_GETGROUPINFOBYINDEX = 0x1099,LVM_MOVEITEMTOGROUP = 0x109A,LVM_SETGROUPMETRICS = 0x109B,LVM_GETGROUPMETRICS = 0x109C,LVM_ENABLEGROUPVIEW = 0x109D,LVM_SORTGROUPS = 0x109E,LVM_INSERTGROUPSORTED = 0x109F,LVM_REMOVEALLGROUPS = 0x10A0,LVM_HASGROUP = 0x10A1,LVM_SETTILEVIEWINFO = 0x10A2,LVM_GETTILEVIEWINFO = 0x10A3,LVM_SETTILEINFO = 0x10A4,LVM_GETTILEINFO = 0x10A5,LVM_SETINSERTMARK = 0x10A6,LVM_GETINSERTMARK = 0x10A7,LVM_INSERTMARKHITTEST = 0x10A8,LVM_GETINSERTMARKRECT = 0x10A9,LVM_SETINSERTMARKCOLOR = 0x10AA,LVM_GETINSERTMARKCOLOR = 0x10AB,LVM_SETINFOTIP = 0x10AD,LVM_GETSELECTEDCOLUMN = 0x10AE,LVM_ISGROUPVIEWENABLED = 0x10AF,LVM_GETOUTLINECOLOR = 0x10B0,LVM_SETOUTLINECOLOR = 0x10B1,LVM_CANCELEDITLABEL = 0x10B3,LVM_MAPINDEXTOID = 0x10B4,LVM_MAPIDTOINDEX = 0x10B5,LVM_ISITEMVISIBLE = 0x10B6,LVM_GETEMPTYTEXT = 0x10CC,LVM_GETFOOTERRECT = 0x10CD,LVM_GETFOOTERINFO = 0x10CE,LVM_GETFOOTERITEMRECT = 0x10CF,LVM_GETFOOTERITEM = 0x10D0,LVM_GETITEMINDEXRECT = 0x10D1,LVM_SETITEMINDEXSTATE = 0x10D2,LVM_GETNEXTITEMINDEX = 0x10D3,LVM_SETUNICODEFORMAT = 0x2005,LVM_GETUNICODEFORMAT = 0x2006,OCM__BASE = 0x2000,OCM_CTLCOLOR = 0x2019,OCM_DRAWITEM = 0x202B,OCM_MEASUREITEM = 0x202C,OCM_DELETEITEM = 0x202D,OCM_VKEYTOITEM = 0x202E,OCM_CHARTOITEM = 0x202F,OCM_COMPAREITEM = 0x2039,OCM_NOTIFY = 0x204E,OCM_COMMAND = 0x2111,OCM_HSCROLL = 0x2114,OCM_VSCROLL = 0x2115,OCM_CTLCOLORMSGBOX = 0x2132,OCM_CTLCOLOREDIT = 0x2133,OCM_CTLCOLORLISTBOX = 0x2134,OCM_CTLCOLORBTN = 0x2135,OCM_CTLCOLORDLG = 0x2136,OCM_CTLCOLORSCROLLBAR = 0x2137,OCM_CTLCOLORSTATIC = 0x2138,OCM_PARENTNOTIFY = 0x2210,WM_APP = 0x8000,WM_RASDIALEVENT = 0xCCCD,CBEM_DELETEITEM = 0x144,CBEM_SETUNICODEFORMAT = 0x2005,CBEM_GETUNICODEFORMAT = 0x2006,IE_GETMODIFY = 0xB8,IE_SETMODIFY = 0xB9,IE_CANUNDO = 0xC6,IE_UNDO = 0xC7,IE_EMPTYUNDOBUFFER = 0xCD,LVM_SETBKIMAGEW = 0x108A,MCIWNDM_GETDEVICEID = 0x464,MCIWNDM_GETSTART = 0x467,MCIWNDM_GETLENGTH = 0x468,MCIWNDM_GETEND = 0x469,MCIWNDM_EJECT = 0x46B,MCIWNDM_SETZOOM = 0x46C,MCIWNDM_SETVOLUME = 0x46E,MCIWNDM_GETVOLUME = 0x46F,MCIWNDM_SETSPEED = 0x470,MCIWNDM_GETSPEED = 0x471,MCIWNDM_SETREPEAT = 0x472,MCIWNDM_GETREPEAT = 0x473,MCIWNDM_PLAYFROM = 0x47A,MCIWNDM_SETTIMERS = 0x481,MCIWNDM_SETACTIVETIMER = 0x482,MCIWNDM_GETACTIVETIMER = 0x484,MCIWNDM_CHANGESTYLES = 0x487,MCIWNDM_GETSTYLES = 0x488,MCIWNDM_GETALIAS = 0x489,MCIWNDM_PLAYREVERSE = 0x48B,MCIWNDM_OPENINTERFACE = 0x497,MCIWNDM_SETOWNER = 0x498,MCIWNDM_SENDSTRINGA = 0x465,MCIWNDM_GETPOSITIONA = 0x466,MCIWNDM_GETMODEA = 0x46A,MCIWNDM_NEWA = 0x486,MCIWNDM_RETURNSTRINGA = 0x48A,MCIWNDM_OPENA = 0x499,MCIWNDM_SENDSTRINGW = 0x4C9,MCIWNDM_GETPOSITIONW = 0x4CA,MCIWNDM_GETMODEW = 0x4CE,MCIWNDM_NEWW = 0x4EA,MCIWNDM_RETURNSTRINGW = 0x4EE,MCIWNDM_OPENW = 0x4FC,MCIWNDM_NOTIFYPOS = 0x4C9,MCIWNDM_NOTIFYSIZE = 0x4CA,MSG_FTS_JUMP_HASH = 0x420,MSG_FTS_GET_TITLE = 0x422,PBM_SETBKCOLOR = 0x2001,RB_SETCOLORSCHEME = 0x2002,RB_GETCOLORSCHEME = 0x2003,RB_GETDROPTARGET = 0x2004,RB_SETUNICODEFORMAT = 0x2005,RB_GETUNICODEFORMAT = 0x2006,SB_SETUNICODEFORMAT = 0x2005,SB_GETUNICODEFORMAT = 0x2006,SB_SETBKCOLOR = 0x2001,STM_MSGMAX = 0x174,TBM_SETUNICODEFORMAT = 0x2005,TBM_GETUNICODEFORMAT = 0x2006,TB_SETCOLORSCHEME = 0x2002,TB_GETCOLORSCHEME = 0x2003,TB_SETUNICODEFORMAT = 0x2005,TB_GETUNICODEFORMAT = 0x2006,UDM_SETUNICODEFORMAT = 0x2005,UDM_GETUNICODEFORMAT = 0x2006,WM_CAP_START = 0x400,WM_CAP_GET_CAPSTREAMPTR = 0x401,WM_CAP_SET_CALLBACK_ERRORA = 0x402,WM_CAP_SET_CALLBACK_STATUSA = 0x403,WM_CAP_SET_CALLBACK_YIELD = 0x404,WM_CAP_SET_CALLBACK_FRAME = 0x405,WM_CAP_SET_CALLBACK_VIDEOSTREAM = 0x406,WM_CAP_SET_CALLBACK_WAVESTREAM = 0x407,WM_CAP_GET_USER_DATA = 0x408,WM_CAP_SET_USER_DATA = 0x409,WM_CAP_DRIVER_CONNECT = 0x40A,WM_CAP_DRIVER_DISCONNECT = 0x40B,WM_CAP_DRIVER_GET_NAMEA = 0x40C,WM_CAP_DRIVER_GET_VERSIONA = 0x40D,WM_CAP_DRIVER_GET_CAPS = 0x40E,WM_CAP_FILE_SET_CAPTURE_FILEA = 0x414,WM_CAP_FILE_GET_CAPTURE_FILEA = 0x415,WM_CAP_FILE_SAVEASA = 0x417,WM_CAP_FILE_SAVEDIBA = 0x419,WM_CAP_FILE_ALLOCATE = 0x416,WM_CAP_FILE_SET_INFOCHUNK = 0x418,WM_CAP_EDIT_COPY = 0x41E,WM_CAP_SET_AUDIOFORMAT = 0x423,WM_CAP_GET_AUDIOFORMAT = 0x424,WM_CAP_DLG_VIDEOFORMAT = 0x429,WM_CAP_DLG_VIDEOSOURCE = 0x42A,WM_CAP_DLG_VIDEODISPLAY = 0x42B,WM_CAP_GET_VIDEOFORMAT = 0x42C,WM_CAP_SET_VIDEOFORMAT = 0x42D,WM_CAP_DLG_VIDEOCOMPRESSION = 0x42E,WM_CAP_SET_PREVIEW = 0x432,WM_CAP_SET_OVERLAY = 0x433,WM_CAP_SET_PREVIEWRATE = 0x434,WM_CAP_SET_SCALE = 0x435,WM_CAP_GET_STATUS = 0x436,WM_CAP_SET_SCROLL = 0x437,WM_CAP_GRAB_FRAME = 0x43C,WM_CAP_GRAB_FRAME_NOSTOP = 0x43D,WM_CAP_SEQUENCE = 0x43E,WM_CAP_SEQUENCE_NOFILE = 0x43F,WM_CAP_SET_SEQUENCE_SETUP = 0x440,WM_CAP_GET_SEQUENCE_SETUP = 0x441,WM_CAP_SET_MCI_DEVICEA = 0x442,WM_CAP_GET_MCI_DEVICEA = 0x443,WM_CAP_STOP = 0x444,WM_CAP_ABORT = 0x445,WM_CAP_SINGLE_FRAME_OPEN = 0x446,WM_CAP_SINGLE_FRAME_CLOSE = 0x447,WM_CAP_SINGLE_FRAME = 0x448,WM_CAP_PAL_OPENA = 0x450,WM_CAP_PAL_SAVEA = 0x451,WM_CAP_PAL_PASTE = 0x452,WM_CAP_PAL_AUTOCREATE = 0x453,WM_CAP_PAL_MANUALCREATE = 0x454,WM_CAP_SET_CALLBACK_CAPCONTROL = 0x455,WM_CAP_UNICODE_END = 0x4B5,WM_CAP_END = 0x4B5,WM_DDE_FIRST = 0x3E0,WM_DDE_LAST = 0x3E8,WM_DLGBORDER = 0x11EF,WM_DLGSUBCLASS = 0x11F0,WM_ADSPROP_NOTIFY_PAGEINIT = 0x84D,WM_ADSPROP_NOTIFY_PAGEHWND = 0x84E,WM_ADSPROP_NOTIFY_CHANGE = 0x84F,WM_ADSPROP_NOTIFY_APPLY = 0x850,WM_ADSPROP_NOTIFY_SETFOCUS = 0x851,WM_ADSPROP_NOTIFY_FOREGROUND = 0x852,WM_ADSPROP_NOTIFY_EXIT = 0x853,WM_ADSPROP_NOTIFY_ERROR = 0x856,WM_TOUCH = 0x240,WM_TOUCHHITTESTING = 0x24D,WM_DPICHANGED = 0x2E0,WM_DPICHANGED_BEFOREPARENT = 0x2E2,WM_DPICHANGED_AFTERPARENT = 0x2E3,WM_CLIPBOARDUPDATE = 0x31D,WM_DWMCOMPOSITIONCHANGED = 0x31E,WM_DWMNCRENDERINGCHANGED = 0x31F,WM_DWMCOLORIZATIONCOLORCHANGED = 0x320,WM_DWMWINDOWMAXIMIZEDCHANGE = 0x321,WM_DWMSENDICONICTHUMBNAIL = 0x323,WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x326,WM_INPUT_DEVICE_CHANGE = 0xFE,WM_GESTURE = 0x119,WM_GESTURENOTIFY = 0x11A,WM_MOUSEHWHEEL = 0x20E,WM_POINTERDEVICECHANGE = 0x238,WM_POINTERDEVICEINRANGE = 0x239,WM_POINTERDEVICEOUTOFRANGE = 0x23A,WM_NCPOINTERUPDATE = 0x241,WM_NCPOINTERDOWN = 0x242,WM_NCPOINTERUP = 0x243,WM_POINTERUPDATE = 0x245,WM_POINTERDOWN = 0x246,WM_POINTERUP = 0x247,WM_POINTERENTER = 0x249,WM_POINTERLEAVE = 0x24A,WM_POINTERACTIVATE = 0x24B,WM_POINTERCAPTURECHANGED = 0x24C,WM_POINTERWHEEL = 0x24E,WM_POINTERHWHEEL = 0x24F,WM_POINTERROUTEDTO = 0x251,WM_POINTERROUTEDAWAY = 0x252,WM_POINTERROUTEDRELEASED = 0x253,WM_TABLET_ADDED = 0x2C8,WM_TABLET_DELETED = 0x2C9,WM_TABLET_FLICK = 0x2CB,WM_TABLET_QUERYSYSTEMGESTURESTATUS = 0x2CC,WM_GETDPISCALEDSIZE = 0x2E4,WM_GETTITLEBARINFOEX = 0x33F,};
enum MACRO_WN {WN_SUCCESS = 0,WN_NO_ERROR = 0,WN_NOT_SUPPORTED = 50,WN_CANCEL = 1223,WN_RETRY = 1237,WN_NET_ERROR = 59,WN_MORE_DATA = 234,WN_BAD_POINTER = 487,WN_BAD_VALUE = 87,WN_BAD_USER = 2202,WN_BAD_PASSWORD = 86,WN_ACCESS_DENIED = 5,WN_FUNCTION_BUSY = 170,WN_WINDOWS_ERROR = 59,WN_OUT_OF_MEMORY = 8,WN_NO_NETWORK = 1222,WN_EXTENDED_ERROR = 1208,WN_BAD_LEVEL = 124,WN_BAD_HANDLE = 6,WN_NOT_INITIALIZING = 1247,WN_NO_MORE_DEVICES = 1248,WN_NOT_CONNECTED = 2250,WN_OPEN_FILES = 2401,WN_DEVICE_IN_USE = 2404,WN_BAD_NETNAME = 67,WN_BAD_LOCALNAME = 1200,WN_ALREADY_CONNECTED = 85,WN_DEVICE_ERROR = 31,WN_CONNECTION_CLOSED = 1201,WN_NO_NET_OR_BAD_PATH = 1203,WN_BAD_PROVIDER = 1204,WN_CANNOT_OPEN_PROFILE = 1205,WN_BAD_PROFILE = 1206,WN_BAD_DEV_TYPE = 66,WN_DEVICE_ALREADY_REMEMBERED = 1202,WN_NO_MORE_ENTRIES = 259,WN_NOT_CONTAINER = 1207,WN_NOT_AUTHENTICATED = 1244,WN_NOT_LOGGED_ON = 1245,WN_NOT_VALIDATED = 1311,};
enum MACRO_WS {WS_CLIPSIBLINGS = 0x4000000,WS_CLIPCHILDREN = 0x2000000,WS_CAPTION = 0xC00000,WS_BORDER = 0x800000,WS_DLGFRAME = 0x400000,WS_VSCROLL = 0x200000,WS_HSCROLL = 0x100000,WS_SYSMENU = 0x80000,WS_THICKFRAME = 0x40000,WS_MAXIMIZEBOX = 0x20000,WS_MINIMIZEBOX = 0x10000,WS_SIZEBOX = 0x40000,WS_POPUP = 0x80000000,};
enum MACRO_WT {WT_EXECUTEDEFAULT = 0x0,WT_EXECUTEINIOTHREAD = 0x1,WT_EXECUTEINUITHREAD = 0x2,WT_EXECUTEINWAITTHREAD = 0x4,WT_EXECUTEDELETEWAIT = 0x8,WT_EXECUTEINLONGTHREAD = 0x10,};
enum MACRO__O {_O_TEXT = 0x4000,_O_BINARY = 0x8000,};
typedef struct _MIB_ICMP MIB_ICMP;
typedef struct _MMCKINFO MMCKINFO;
typedef struct _MMIOINFO MMIOINFO;
typedef struct tagMULTI_QI MULTI_QI;
struct MimeEdit;
typedef int ( *NEARPROC)();
typedef struct tagNMRGINFO NMRGINFO;
typedef struct _NM_UPDOWN NMUPDOWN;
typedef struct tagNNTPLIST NNTPLIST;
typedef struct tagNNTPNEXT NNTPNEXT;
typedef struct tagNNTPXHDR NNTPXHDR;
typedef struct _328060AA9F47934214406E09F9D6352A NOTIFKEY;
typedef struct tagLOGPEN *NPLOGPEN;
typedef struct mmtime_tag *NPMMTIME;
typedef int NTSTATUS;
typedef struct _13B347001B2B96C65D01839EEA37C971 NUMPARSE;
typedef struct _OBJECTID OBJECTID;
enum OLECMDID {OLECMDID_OPEN = 0x1,OLECMDID_NEW = 0x2,OLECMDID_SAVE = 0x3,OLECMDID_SAVEAS = 0x4,OLECMDID_SAVECOPYAS = 0x5,OLECMDID_PRINT = 0x6,OLECMDID_PRINTPREVIEW = 0x7,OLECMDID_PAGESETUP = 0x8,OLECMDID_SPELL = 0x9,OLECMDID_PROPERTIES = 0xA,OLECMDID_CUT = 0xB,OLECMDID_COPY = 0xC,OLECMDID_PASTE = 0xD,OLECMDID_PASTESPECIAL = 0xE,OLECMDID_UNDO = 0xF,OLECMDID_REDO = 0x10,OLECMDID_SELECTALL = 0x11,OLECMDID_CLEARSELECTION = 0x12,OLECMDID_ZOOM = 0x13,OLECMDID_GETZOOMRANGE = 0x14,OLECMDID_UPDATECOMMANDS = 0x15,OLECMDID_REFRESH = 0x16,OLECMDID_STOP = 0x17,OLECMDID_HIDETOOLBARS = 0x18,OLECMDID_SETPROGRESSMAX = 0x19,OLECMDID_SETPROGRESSPOS = 0x1A,OLECMDID_SETPROGRESSTEXT = 0x1B,OLECMDID_SETTITLE = 0x1C,OLECMDID_SETDOWNLOADSTATE = 0x1D,OLECMDID_STOPDOWNLOAD = 0x1E,OLECMDID_ONTOOLBARACTIVATED = 0x1F,OLECMDID_FIND = 0x20,OLECMDID_DELETE = 0x21,OLECMDID_HTTPEQUIV = 0x22,OLECMDID_HTTPEQUIV_DONE = 0x23,OLECMDID_ENABLE_INTERACTION = 0x24,OLECMDID_ONUNLOAD = 0x25,OLECMDID_PROPERTYBAG2 = 0x26,OLECMDID_PREREFRESH = 0x27,OLECMDID_SHOWSCRIPTERROR = 0x28,OLECMDID_SHOWMESSAGE = 0x29,OLECMDID_SHOWFIND = 0x2A,OLECMDID_SHOWPAGESETUP = 0x2B,OLECMDID_SHOWPRINT = 0x2C,OLECMDID_CLOSE = 0x2D,OLECMDID_ALLOWUILESSSAVEAS = 0x2E,OLECMDID_DONTDOWNLOADCSS = 0x2F,OLECMDID_UPDATEPAGESTATUS = 0x30,OLECMDID_PRINT2 = 0x31,OLECMDID_PRINTPREVIEW2 = 0x32,OLECMDID_SETPRINTTEMPLATE = 0x33,OLECMDID_GETPRINTTEMPLATE = 0x34,OLECMDID_UPDATEVSCROLL = 0x35,OLECMDID_UPDATEHSCROLL = 0x36,OLECMDID_FITTOSCREEN = 0x37,};
typedef struct tagPARTINFO PARTINFO;
typedef struct _CabInfo *PCABINFO;
typedef struct _CERT_ID *PCERT_ID;
typedef struct _PCI_RSRC PCI_RSRC;
typedef unsigned int *PDWORD32;
typedef unsigned long long *PDWORD64;
typedef struct _FIREWALL_RULE *PFW_RULE;
typedef struct hostent *PHOSTENT;
typedef struct tagPICTDESC PICTDESC;
typedef struct tagIMEINFO *PIMEINFO;
typedef int *PINT_PTR;
typedef struct in_addr *PIN_ADDR;
typedef struct _PinInfo PIN_INFO;
typedef struct midihdr_tag *PMIDIHDR;
typedef struct tagPOP3LIST POP3LIST;
typedef struct tagPOP3RETR POP3RETR;
typedef struct tagPOP3STAT POP3STAT;
typedef struct tagPOP3UIDL POP3UIDL;
typedef IOverlay *POVERLAY;
typedef struct _18FEA12C471CE0A4515515C42723EF45 *PPBRANGE;
typedef struct _RGNDATA *PRGNDATA;
typedef struct tagPD PRINTDLG;
typedef struct _tagPROPBAG2 PROPBAG2;
typedef struct tagPROPSPEC PROPSPEC;
typedef struct protoent PROTOENT;
typedef struct servent *PSERVENT;
typedef struct timeval *PTIMEVAL;
typedef unsigned int *PULONG32;
typedef unsigned long long *PULONG64;
typedef struct wavehdr_tag *PWAVEHDR;
typedef struct _D333B2CEDD563FFBEB75B63E07F81E15 Q2931_IE;
typedef struct _rifflist RIFFLIST;
typedef struct _RIP_INFO RIP_INFO;
enum RTC_DTMF {RTC_DTMF_0 = 0x0,RTC_DTMF_1 = 0x1,RTC_DTMF_2 = 0x2,RTC_DTMF_3 = 0x3,RTC_DTMF_4 = 0x4,RTC_DTMF_5 = 0x5,RTC_DTMF_6 = 0x6,RTC_DTMF_7 = 0x7,RTC_DTMF_8 = 0x8,RTC_DTMF_9 = 0x9,RTC_DTMF_STAR = 0xA,RTC_DTMF_POUND = 0xB,RTC_DTMF_A = 0xC,RTC_DTMF_B = 0xD,RTC_DTMF_C = 0xE,RTC_DTMF_D = 0xF,RTC_DTMF_FLASH = 0x10,};
struct Response;
typedef struct _SCH_CRED SCH_CRED;
enum SDP_TYPE {SDP_TYPE_NIL = 0x0,SDP_TYPE_UINT = 0x1,SDP_TYPE_INT = 0x2,SDP_TYPE_UUID = 0x3,SDP_TYPE_STRING = 0x4,SDP_TYPE_BOOLEAN = 0x5,SDP_TYPE_SEQUENCE = 0x6,SDP_TYPE_ALTERNATIVE = 0x7,SDP_TYPE_URL = 0x8,SDP_TYPE_CONTAINER = 0x20,};
typedef struct _SHITEMID SHITEMID;
typedef struct tagSHRGI SHRGINFO;
typedef struct sockaddr SOCKADDR;
typedef struct SOCKHAND__ *SOCKHAND;
typedef struct SPC_LINK_ SPC_LINK;
typedef struct tagSTATDATA STATDATA;
typedef struct _StrEntry STRENTRY;
typedef struct _StrTable STRTABLE;
struct ScopeAdm;
typedef struct _TBBUTTON TBBUTTON;
typedef struct timecaps_tag TIMECAPS;
typedef union _timecode TIMECODE;
typedef struct tagTLIBATTR TLIBATTR;
typedef struct _TRUSTEE_A TRUSTEEA;
typedef struct _TRUSTEE_W TRUSTEEW;
typedef struct tagTVSORTCB TVSORTCB;
typedef struct tagTYPEATTR TYPEATTR;
typedef struct tagTYPEDESC TYPEDESC;
struct ThumbCtl;
typedef unsigned int UINT_PTR;
typedef struct tagVERBLOCK VERBLOCK;
typedef struct tagVERGRAPH VERGRAPH;
struct WSDLPort;
struct WebCheck;
enum XACTSTAT {XACTSTAT_NONE = 0x0,XACTSTAT_OPENNORMAL = 0x1,XACTSTAT_OPENREFUSED = 0x2,XACTSTAT_PREPARING = 0x4,XACTSTAT_PREPARED = 0x8,XACTSTAT_PREPARERETAINING = 0x10,XACTSTAT_PREPARERETAINED = 0x20,XACTSTAT_COMMITTING = 0x40,XACTSTAT_COMMITRETAINING = 0x80,XACTSTAT_ABORTING = 0x100,XACTSTAT_ABORTED = 0x200,XACTSTAT_COMMITTED = 0x400,XACTSTAT_HEURISTIC_ABORT = 0x800,XACTSTAT_HEURISTIC_COMMIT = 0x1000,XACTSTAT_HEURISTIC_DAMAGE = 0x2000,XACTSTAT_HEURISTIC_DANGER = 0x4000,XACTSTAT_FORCED_ABORT = 0x8000,XACTSTAT_FORCED_COMMIT = 0x10000,XACTSTAT_INDOUBT = 0x20000,XACTSTAT_CLOSED = 0x40000,XACTSTAT_OPEN = 0x3,XACTSTAT_NOTPREPARED = 0x7FFC3,XACTSTAT_ALL = 0x7FFFF,};
enum _CFITYPE {CFITYPE_CSIDL = 0x0,CFITYPE_PIDL = 0x1,CFITYPE_PATH = 0x2,};
enum _D3DCULL {D3DCULL_NONE = 0x1,D3DCULL_CW = 0x2,D3DCULL_CCW = 0x3,D3DCULL_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPOOL {D3DPOOL_DEFAULT = 0x0,D3DPOOL_MANAGED = 0x1,D3DPOOL_SYSTEMMEM = 0x2,D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,};
enum _FW_DAYS {FWD_SUNDAY = 0x1,FWD_MONDAY = 0x2,FWD_TUESDAY = 0x4,FWD_WEDNESDAY = 0x8,FWD_THURSDAY = 0x10,FWD_FRIDAY = 0x20,FWD_SATURDAY = 0x40,FWD_WEEKDAY = 0x3E,FWD_WEEKEND = 0x41,};
struct _HMAPPER;
enum _MP_Type {MPT_INT = 0x0,MPT_FLOAT = 0x1,MPT_BOOL = 0x2,MPT_ENUM = 0x3,MPT_MAX = 0x4,};
struct _complex {double x;double y;};
enum _htmlDir {htmlDirNotSet = 0x0,htmlDirLeftToRight = 0x1,htmlDirRightToLeft = 0x2,htmlDir_Max = 0x7FFFFFFF,};
struct protoent {char *p_name;char **p_aliases;short p_proto;};
enum tagMKSYS {MKSYS_NONE = 0x0,MKSYS_GENERICCOMPOSITE = 0x1,MKSYS_FILEMONIKER = 0x2,MKSYS_ANTIMONIKER = 0x3,MKSYS_ITEMMONIKER = 0x4,MKSYS_POINTERMONIKER = 0x5,MKSYS_CLASSMONIKER = 0x7,MKSYS_OBJREFMONIKER = 0x8,};
enum tagMLCPF {MLDETECTF_MAILNEWS = 0x1,MLDETECTF_BROWSER = 0x2,MLDETECTF_VALID = 0x4,MLDETECTF_VALID_NLS = 0x8,MLDETECTF_PRESERVE_ORDER = 0x10,MLDETECTF_PREFERRED_ONLY = 0x20,MLDETECTF_FILTER_SPECIALCHAR = 0x40,};
enum tagSHGDN {SHGDN_NORMAL = 0x0,SHGDN_INFOLDER = 0x1,SHGDN_NOFRAGMENT = 0x2,SHGDN_FOREDITING = 0x1000,SHGDN_FORADDRESSBAR = 0x4000,SHGDN_FORPARSING = 0x8000,};
enum tagSTGTY {STGTY_STORAGE = 0x1,STGTY_STREAM = 0x2,STGTY_LOCKBYTES = 0x3,STGTY_PROPERTY = 0x4,};
enum tagTYMED {TYMED_HGLOBAL = 0x1,TYMED_FILE = 0x2,TYMED_ISTREAM = 0x4,TYMED_ISTORAGE = 0x8,TYMED_GDI = 0x10,TYMED_MFPICT = 0x20,TYMED_ENHMF = 0x40,TYMED_NULL = 0x0,};
typedef struct __MIDL___MIDL_itf_urlmon_0000_0001 uCLSSPEC;
struct wfolders;
typedef struct _ADRLIST ADRLIST;
typedef struct _ADRPARM ADRPARM;
typedef union tagBINDPTR BINDPTR;
typedef struct _CabInfo CABINFO;
typedef struct tagCACLSID CACLSID;
typedef struct tagCADWORD CADWORD;
typedef struct tagCALPSTR CALPSTR;
typedef struct tagCASCODE CASCODE;
typedef struct _CERT_ID CERT_ID;
typedef struct _COMSTAT COMSTAT;
typedef struct _CONTEXT CONTEXT;
typedef struct __MIDL___MIDL_itf_dvdcom_0000_0001 CSS_KEY;
typedef struct _D3DRECT D3DRECT;
typedef struct _DDBLTFX DDBLTFX;
typedef struct _DDSCAPS DDSCAPS;
typedef struct tagDEC DECIMAL;
typedef struct _DSBCAPS DSBCAPS;
typedef struct _DSCCAPS DSCCAPS;
typedef struct _DSSSEED DSSSEED;
typedef struct _DTBLLBX DTBLLBX;
struct DVDData;
typedef struct tagDVD_ATR DVD_ATR;
typedef unsigned int DWORD32;
typedef unsigned long long DWORD64;
enum DX2DPEN {DX2D_PEN_DEFAULT = 0x0,DX2D_PEN_WIDTH_IN_DISPLAY_COORDS = 0x1,DX2D_PEN_UNUSED = 0xFFFFFFFE,};
enum DXBNDID {DXB_X = 0x0,DXB_Y = 0x1,DXB_Z = 0x2,DXB_T = 0x3,};
typedef DXCBND DXCBNDS[4];
typedef DXDBND DXDBNDS[4];
typedef struct _7684FB82DC2359E8867448D749E28870 ENTRYID;
typedef int ( *FARPROC)();
typedef struct _FIREWALL_RULE FW_RULE;
struct Folder2 {struct Folder2Vtbl *lpVtbl;};
struct Folder3 {struct Folder3Vtbl *lpVtbl;};
typedef struct HACMOBJ__ *HACMOBJ;
typedef struct HBITMAP__ *HBITMAP;
struct HCALL__ {int unused;};
struct HDESK__ {int unused;};
typedef struct _HD_ITEMA HDITEMA;
typedef struct _HD_ITEMW HDITEMW;
struct HDRVR__ {int unused;};
typedef void *HFILTER;
struct HFONT__ {int unused;};
typedef void *HGDIOBJ;
struct HGLRC__ {int unused;};
struct HHOOK__ {int unused;};
struct HICON__ {int unused;};
struct HLINE__ {int unused;};
struct HMENU__ {int unused;};
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDI__ {int unused;};
struct HMMIO__ {int unused;};
typedef struct hostent HOSTENT;
struct HRSRC__ {int unused;};
struct HTASK__ {int unused;};
struct HTMLImg;
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVE__ {int unused;};
typedef struct HWINSTA__ *HWINSTA;
struct IACList {struct IACListVtbl *lpVtbl;};
struct IADCCtl {struct IADCCtlVtbl *lpVtbl;};
struct IAttach {struct IAttachVtbl *lpVtbl;};
struct ICatAdm {struct ICatAdmVtbl *lpVtbl;};
struct IDBInfo {struct IDBInfoVtbl *lpVtbl;};
typedef struct tagIDLDESC IDLDESC;
struct IDVDROM {struct IDVDROMVtbl *lpVtbl;};
struct IDccMan {struct IDccManVtbl *lpVtbl;};
struct IDvdCmd {struct IDvdCmdVtbl *lpVtbl;};
struct IFilter {struct IFilterVtbl *lpVtbl;};
struct IGetRow {struct IGetRowVtbl *lpVtbl;};
struct IImgCtx {struct IImgCtxVtbl *lpVtbl;};
struct IMDFind {struct IMDFindVtbl *lpVtbl;};
typedef struct tagIMEINFO IMEINFO;
struct IMalloc {struct IMallocVtbl *lpVtbl;};
struct IMsgrOE {struct IMsgrOEVtbl *lpVtbl;};
struct IMsgrSP {struct IMsgrSPVtbl *lpVtbl;};
struct INSPlay {struct INSPlayVtbl *lpVtbl;};
typedef int INT_PTR;
typedef struct in_addr IN_ADDR;
struct INetCfg {struct INetCfgVtbl *lpVtbl;};
struct IObjMgr {struct IObjMgrVtbl *lpVtbl;};
struct IPStore {struct IPStoreVtbl *lpVtbl;};
struct IParser {struct IParserVtbl *lpVtbl;};
struct IRowset {struct IRowsetVtbl *lpVtbl;};
enum ISOFLAG {ISOFLAG_RETAIN_COMMIT_DC = 0x1,ISOFLAG_RETAIN_COMMIT = 0x2,ISOFLAG_RETAIN_COMMIT_NO = 0x3,ISOFLAG_RETAIN_ABORT_DC = 0x4,ISOFLAG_RETAIN_ABORT = 0x8,ISOFLAG_RETAIN_ABORT_NO = 0xC,ISOFLAG_RETAIN_DONTCARE = 0x5,ISOFLAG_RETAIN_BOTH = 0xA,ISOFLAG_RETAIN_NONE = 0xF,ISOFLAG_OPTIMISTIC = 0x10,ISOFLAG_READONLY = 0x20,};
struct ISearch {struct ISearchVtbl *lpVtbl;};
struct IServer {struct IServerVtbl *lpVtbl;};
struct IStream {struct IStreamVtbl *lpVtbl;};
struct IVoIPUI {struct IVoIPUIVtbl *lpVtbl;};
typedef unsigned int LHANDLE;
typedef struct tagLICINFO LICINFO;
typedef struct tagACCEL *LPACCEL;
typedef  void *LPCVOID;
typedef struct _DA63D2C084DFF8EF53A1633F272A983E *LPDTCTL;
typedef IHlink *LPHLINK;
typedef struct tagINPUT *LPINPUT;
typedef struct _328060AA9F47934214406E09F9D6352A *LPMTSID;
typedef struct tagNMKEY *LPNMKEY;
typedef struct tagPOINT *LPPOINT;
typedef IPrint *LPPRINT;
typedef struct tagRANGE *LPRANGE;
typedef struct _RECTL *LPRECTL;
typedef short *LPSHORT;
typedef struct tagXFORM *LPXFORM;
typedef struct tagLVITEMA LVITEMA;
typedef struct tagLVITEMW LVITEMW;
enum MACRO_C {C_SYS_COLOR_TYPES = 29,};
enum MACRO_E {E_DRAW = -2147221184,};
enum MACRO_I {I_IMAGENONE = -2,};
enum MACRO_N {N_BTMASK = 0xF,N_TMASK = 0x30,N_TMASK1 = 0xC0,N_TMASK2 = 0xF0,N_BTSHFT = 0x4,N_TSHIFT = 0x2,};
enum MACRO_S {S_OK = 0x0,S_FALSE = 0x1,};
typedef struct _MAPIUID MAPIUID;
typedef struct midihdr_tag MIDIHDR;
typedef float MP_DATA;
typedef struct tagNMMOUSE NMMOUSE;
typedef struct tagNMREBAR NMREBAR;
typedef struct tagPOINT *NPPOINT;
typedef int OAEVENT;
enum OLECMDF {OLECMDF_SUPPORTED = 0x1,OLECMDF_ENABLED = 0x2,OLECMDF_LATCHED = 0x4,OLECMDF_NINCHED = 0x8,OLECMDF_INVISIBLE = 0x10,OLECMDF_DEFHIDEONCTXTMENU = 0x20,};
typedef struct tagOLEVERB OLEVERB;
enum OSPCOMP {OSPCOMP_EQ = 0x1,OSPCOMP_DEFAULT = 0x1,OSPCOMP_LT = 0x2,OSPCOMP_LE = 0x3,OSPCOMP_GE = 0x4,OSPCOMP_GT = 0x5,OSPCOMP_NE = 0x6,};
enum OSPFIND {OSPFIND_DEFAULT = 0x0,OSPFIND_UP = 0x1,OSPFIND_CASESENSITIVE = 0x2,OSPFIND_UPCASESENSITIVE = 0x3,};
enum OSPXFER {OSPXFER_COMPLETE = 0x0,OSPXFER_ABORT = 0x1,OSPXFER_ERROR = 0x2,};
typedef char P3PCHAR;
typedef  char *P3PCURL;
typedef char *P3PVERB;
typedef struct tagPAGESET PAGESET;
typedef struct berval *PBERVAL;
typedef struct tagBITMAP *PBITMAP;
typedef struct _18FEA12C471CE0A4515515C42723EF45 PBRANGE;
typedef struct _CEBLOB *PCEBLOB;
typedef struct _CEGUID *PCEGUID;
typedef short *PCSHORT;
typedef struct fd_set *PFD_SET;
typedef IBaseFilter *PFILTER;
typedef void (*PFNVOID)();
typedef struct linger *PLINGER;
typedef struct tagLOGPEN *PLOGPEN;
typedef int *PLONG32;
typedef long long *PLONG64;
typedef struct mmtime_tag *PMMTIME;
typedef struct tagPOP3TOP POP3TOP;
typedef struct _POINTL *PPOINTL;
typedef struct tagPOINTS *PPOINTS;
typedef struct _STRING *PSTRING;
enum PTPROPS {PTPROPS_SCOPE = 0x1,PTPROPS_DEPTH = 0x2,PTPROPS_CATALOG = 0x3,PTPROPS_MACHINE = 0x4,PTPROPS_CIRESTRICTION = 0x5,PTPROPS_ERR_IDS = 0x6,PTPROPS_ERR_HR = 0x7,PTPROPS_ERR_DISPPARAM = 0x8,};
typedef unsigned int *PUINT32;
typedef unsigned long long *PUINT64;
typedef void *PVOID64;
typedef struct tagQuality Quality;
typedef double REFTIME;
typedef struct tagRGBQUAD RGBQUAD;
typedef struct _RGNDATA RGNDATA;
typedef struct tagRMTPACK RMTPACK;
struct Request;
typedef struct _SBinary SBinary;
typedef struct servent SERVENT;
typedef struct tagSIPINFO SIPINFO;
typedef struct tagSORTKEY SORTKEY;
typedef struct tagSORTSET SORTSET;
typedef struct _SRowSet SRowSet;
typedef struct tagSTATSTG STATSTG;
typedef struct _STATURL STATURL;
struct SdpWalk;
struct SyncMgr;
typedef struct tagTCITEMA TCITEMA;
typedef struct tagTCITEMW TCITEMW;
typedef struct timeval TIMEVAL;
typedef struct tagTVITEMA TVITEMA;
typedef struct tagTVITEMW TVITEMW;
typedef struct _UDACCEL UDACCEL;
typedef struct _UINT128 UINT128;
typedef unsigned int ULONG32;
typedef unsigned long long ULONG64;
typedef struct tagVARDESC VARDESC;
enum VARENUM {VT_EMPTY = 0x0,VT_NULL = 0x1,VT_I2 = 0x2,VT_I4 = 0x3,VT_R4 = 0x4,VT_R8 = 0x5,VT_CY = 0x6,VT_DATE = 0x7,VT_BSTR = 0x8,VT_DISPATCH = 0x9,VT_ERROR = 0xA,VT_BOOL = 0xB,VT_VARIANT = 0xC,VT_UNKNOWN = 0xD,VT_DECIMAL = 0xE,VT_I1 = 0x10,VT_UI1 = 0x11,VT_UI2 = 0x12,VT_UI4 = 0x13,VT_I8 = 0x14,VT_UI8 = 0x15,VT_INT = 0x16,VT_UINT = 0x17,VT_VOID = 0x18,VT_HRESULT = 0x19,VT_PTR = 0x1A,VT_SAFEARRAY = 0x1B,VT_CARRAY = 0x1C,VT_USERDEFINED = 0x1D,VT_LPSTR = 0x1E,VT_LPWSTR = 0x1F,VT_RECORD = 0x24,VT_FILETIME = 0x40,VT_BLOB = 0x41,VT_STREAM = 0x42,VT_STORAGE = 0x43,VT_STREAMED_OBJECT = 0x44,VT_STORED_OBJECT = 0x45,VT_BLOB_OBJECT = 0x46,VT_CF = 0x47,VT_CLSID = 0x48,VT_VERSIONED_STREAM = 0x49,VT_BSTR_BLOB = 0xFFF,VT_VECTOR = 0x1000,VT_ARRAY = 0x2000,VT_BYREF = 0x4000,VT_RESERVED = 0x8000,VT_ILLEGAL = 0xFFFF,VT_ILLEGALMASKED = 0xFFF,VT_TYPEMASK = 0xFFF,};
typedef struct tagVARIANT VARIANT;
typedef unsigned short VARTYPE;
struct VoIPMgr;
typedef struct wavehdr_tag WAVEHDR;
typedef struct WSAData WSADATA;
typedef struct WSPData WSPDATA;
struct WebView;
typedef BOID XACTUOW;
struct XMLHTTP;
typedef union _57C85DECF0FD0199FAFF37B7119884AE _Dconst;
typedef void (*_PHNDLR)(int);
struct _ldiv_t {int quot;int rem;};
typedef unsigned char boolean;
typedef int clock_t;
struct hostent {char *h_name;char **h_aliases;short h_addrtype;short h_length;char **h_addr_list;};
typedef int jmp_buf[11];
struct servent {char *s_name;char **s_aliases;short s_port;char *s_proto;};
enum tagADVF {ADVF_NODATA = 0x1,ADVF_PRIMEFIRST = 0x2,ADVF_ONLYONCE = 0x4,ADVF_DATAONSTOP = 0x40,ADVFCACHE_NOHANDLER = 0x8,ADVFCACHE_FORCEBUILTIN = 0x10,ADVFCACHE_ONSAVE = 0x20,};
enum tagSTGC {STGC_DEFAULT = 0x0,STGC_OVERWRITE = 0x1,STGC_ONLYIFCURRENT = 0x2,STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,};
struct timeval {int tv_sec;int tv_usec;};
typedef unsigned long long u_int64;
typedef unsigned short u_short;
/// #define wchar_t  unsigned __int16 ===DEFINED
struct ADCCtl;
typedef unsigned int ALG_ID;
typedef struct _C60E957D81AACC99A9C8D1688EAC55F2 ATM_TD;
typedef struct berval BERVAL;
typedef struct tagBITMAP BITMAP;
typedef struct tagCABOOL CABOOL;
typedef struct tagCABSTR CABSTR;
typedef struct tagCADATE CADATE;
typedef struct tagCAUUID CAUUID;
typedef struct _CEBLOB CEBLOB;
typedef struct _CEGUID CEGUID;
typedef struct _cpinfo CPINFO;
typedef short CSHORT;
struct CatAdm;
typedef struct _D3DBOX D3DBOX;
typedef struct tagDBCOST DBCOST;
typedef struct tagDBDATE DBDATE;
typedef struct tagDBLIKE DBLIKE;
typedef struct tagDBPROP DBPROP;
typedef struct tagDBTEXT DBTEXT;
typedef struct tagDBTIME DBTIME;
typedef struct _DDARGB DDARGB;
typedef struct _DDRGBA DDRGBA;
typedef double DOUBLE;
typedef struct _DSCAPS DSCAPS;
typedef struct _EF67D941BFA119366B947DED69649A3B DTPAGE;
struct DXCBND {float Min;float Max;};
typedef float DXCVEC[4];
struct DXDBND {int Min;int Max;};
typedef int DXDVEC[4];
typedef struct fd_set FD_SET;
struct Folder {struct FolderVtbl *lpVtbl;};
enum Gender {genderUnspecified = 0x0,genderFemale = 0x1,genderMale = 0x2,};
typedef struct HACCEL__ *HACCEL;
typedef void *HANDLE;
typedef struct HBRUSH__ *HBRUSH;
struct HKEY__ {int unused;};
typedef struct tagHLITEM HLITEM;
typedef struct HMIXER__ *HMIXER;
struct HPEN__ {int unused;};
typedef  struct HPHONE__ *HPHONE;
struct HRGN__ {int unused;};
struct HSTR__ {int unused;};
struct HWND__ {int unused;};
struct IHlink {struct IHlinkVtbl *lpVtbl;};
typedef struct _tagImInfo IMINFO;
typedef struct _INT128 INT128;
struct IObex2 {struct IObex2Vtbl *lpVtbl;};
struct IPrint {struct IPrintVtbl *lpVtbl;};
struct IQuery {struct IQueryVtbl *lpVtbl;};
struct ITimer {struct ITimerVtbl *lpVtbl;};
typedef struct linger LINGER;
typedef struct _tagLMDATA LMDATA;
typedef struct tagLOGPEN LOGPEN;
typedef int LONG32;
typedef long long LONG64;
typedef struct tagBLOB *LPBLOB;
typedef IFont *LPFONT;
typedef int *LPLONG;
typedef struct tagRECT *LPRECT;
typedef struct tagSIZE *LPSIZE;
typedef struct _SRow *LPSRow;
typedef void *LPVOID;
typedef struct mmtime_tag MMTIME;
typedef struct tagRECT *NPRECT;
typedef struct _NT_TIB NT_TIB;
typedef int OAHWND;
typedef struct _tagOLECMD OLECMD;
typedef char *P3PURL;
typedef char *PCCHAR;
typedef struct _COORD *PCOORD;
typedef  void *PCVOID;
typedef struct tagINPUT *PINPUT;
typedef int *PINT32;
typedef long long *PINT64;
typedef struct tagPOINTF POINTF;
typedef struct _POINTL POINTL;
typedef struct tagPOINTS POINTS;
typedef struct tagPOINT *PPOINT;
typedef void **PPVOID;
typedef struct _RECTL *PRECTL;
typedef unsigned char *PTBYTE;
typedef char *PTCHAR;
typedef struct tagXFORM *PXFORM;
typedef struct _REGINI REGINI;
typedef struct tagRemSNB RemSNB;
typedef struct _STRING STRING;
typedef struct _STRRET STRRET;
struct Server;
typedef unsigned short UINT16;
typedef unsigned int UINT24;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned short USHORT;
typedef struct _WEEKLY WEEKLY;
typedef struct _WSABUF WSABUF;
enum XACTRM {XACTRM_OPTIMISTICLASTWINS = 0x1,XACTRM_NOREADONLYPREPARES = 0x2,};
enum XACTTC {XACTTC_SYNC_PHASEONE = 0x1,XACTTC_SYNC_PHASETWO = 0x2,XACTTC_SYNC = 0x2,XACTTC_ASYNC_PHASEONE = 0x4,XACTTC_ASYNC = 0x4,};
typedef struct _72295A7541EC936D47FC3642EE72298B _BCD80;
typedef struct _683A376D3D72D8A4C1C01AE0B36D8AA2 _FP128;
struct _div_t {int quot;int rem;};
typedef int fpos_t;
typedef struct _ldiv_t ldiv_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned char u_char;
typedef unsigned int u_long;
typedef unsigned short ushort;
typedef struct tagACCEL ACCEL;
typedef struct tagCADBL CADBL;
typedef struct tagCAFLT CAFLT;
typedef char CCHAR;
typedef struct _COORD COORD;
typedef struct _DAILY DAILY;
typedef struct _DA63D2C084DFF8EF53A1633F272A983E DTCTL;
typedef unsigned int DWORD;
typedef float FLOAT;
typedef unsigned int GROUP;
typedef struct HBODY__ *HBODY;
typedef  struct HCALL__ *HCALL;
struct HDC__ {int unused;};
typedef struct HDESK__ *HDESK;
typedef struct HDRVR__ *HDRVR;
typedef int HFILE;
typedef struct HFONT__ *HFONT;
typedef struct HGLRC__ *HGLRC;
typedef struct HHOOK__ *HHOOK;
typedef struct HICON__ *HICON;
struct HKL__ {int unused;};
typedef  struct HLINE__ *HLINE;
typedef struct HMENU__ *HMENU;
typedef struct HMIDI__ *HMIDI;
typedef struct HMMIO__ *HMMIO;
typedef char *HPSTR;
struct HRC__ {int unused;};
typedef struct HRSRC__ *HRSRC;
typedef struct HTASK__ *HTASK;
typedef struct HWAVE__ *HWAVE;
struct IDX2D {struct IDX2DVtbl *lpVtbl;};
struct IFont {struct IFontVtbl *lpVtbl;};
typedef struct tagINPUT INPUT;
typedef signed short INT16;
typedef int INT32;
typedef long long INT64;
struct IObex {struct IObexVtbl *lpVtbl;};
struct ITask {struct ITaskVtbl *lpVtbl;};
typedef struct _ABC *LPABC;
typedef struct _DCB *LPDCB;
typedef struct _IDA *LPIDA;
typedef int *LPINT;
typedef struct IMsgStore *LPMDB;
typedef struct tagMSG *LPMSG;
typedef struct _QualityOfService *LPQOS;
typedef struct _328060AA9F47934214406E09F9D6352A MTSID;
typedef struct tagNMHDR NMHDR;
typedef struct tagNMKEY NMKEY;
typedef struct _NMSHN NMSHN;
typedef struct _ABC *NPABC;
typedef struct tagMSG *NPMSG;
enum OSPRW {OSPRW_DEFAULT = 0x1,OSPRW_READONLY = 0x0,OSPRW_READWRITE = 0x1,OSPRW_MIXED = 0x2,};
typedef struct _SID *PISID;
typedef struct _KDPC *PKDPC;
typedef struct ldap *PLDAP;
typedef struct _LUID *PLUID;
typedef struct tagPOINT POINT;
typedef struct tagRECT *PRECT;
typedef struct tagSIZE *PSIZE;
typedef unsigned int *PUINT;
typedef void *PVOID;
typedef struct tagRANGE RANGE;
typedef struct _RECTL RECTL;
typedef signed char SBYTE;
typedef short SHORT;
struct Shell;
typedef unsigned char TBYTE;
typedef char TCHAR;
typedef unsigned char UCHAR;
typedef struct _7545F1A067A9FBB43FDF50E78E6B08BD UDATE;
typedef unsigned char UINT8;
typedef unsigned int ULONG;
typedef struct tagXFORM XFORM;
typedef float _FP32;
typedef double _FP64;
typedef struct _72295A7541EC936D47FC3642EE72298B _FP80;
enum _MODE {KernelMode = 0x0,UserMode = 0x1,MaximumMode = 0x2,};
enum _SHNP {SHNP_INFORM = 0x1B1,SHNP_ICONIC = 0x1B2,};
typedef union _PV __UPV;
typedef struct _div_t div_t;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef unsigned int u_int;
typedef unsigned char uchar;
typedef unsigned int ulong;
typedef struct tagAccountContext ACTX;
typedef struct tagBLOB BLOB;
typedef int BOOL;
typedef unsigned char BYTE;
typedef struct tagCACY CACY;
typedef struct tagCAUB CAUB;
typedef struct tagCAUH CAUH;
typedef struct tagCAUI CAUI;
typedef struct tagCAUL CAUL;
typedef char CHAR;
typedef struct _IDA CIDA;
typedef struct tagCRGB CRGB;
typedef double DATE;
typedef struct tagDBID DBID;
struct DX2D;
typedef void FILE;
typedef struct _GUID GUID;
typedef void *HDWP;
typedef struct HKEY__ *HKEY;
typedef struct HPEN__ *HPEN;
typedef struct HRGN__ *HRGN;
typedef struct HSTR__ *HSTR;
typedef struct HWND__ *HWND;
typedef signed char INT8;
struct IPin {struct IPinVtbl *lpVtbl;};
struct IRow {struct IRowVtbl *lpVtbl;};
typedef struct _KDPC KDPC;
typedef struct ldap LDAP;
typedef int LONG;
typedef IBindCtx *LPBC;
typedef struct _LUID LUID;
struct Obex;
typedef struct _ABC *PABC;
typedef  char *PCSZ;
typedef int *PINT;
typedef struct _IRP *PIRP;
typedef struct _MDL *PMDL;
typedef struct tagMSG *PMSG;
typedef IPin *PPIN;
typedef int ( *PROC)();
typedef struct tagRECT RECT;
struct SENS;
typedef struct tagSIZE SIZE;
typedef struct _SRow SRow;
struct TIME;
typedef unsigned int UINT;
typedef unsigned short WORD;
typedef short _I16;
typedef int _I32;
typedef struct _97DDCABA8DED8140EC93664CC20AFA42 _I64;
struct _PSP;
typedef unsigned short _U16;
typedef unsigned int _U32;
typedef struct _97DDCABA8DED8140EC93664CC20AFA42 _U64;
typedef unsigned char byte;
typedef unsigned int uint;
typedef struct _ABC ABC;
typedef struct _ACL ACL;
typedef struct tagCAH CAH;
typedef struct tagCAI CAI;
typedef struct tagCAL CAL;
typedef struct _DCB DCB;
typedef void *FTG;
typedef struct HDC__ *HDC;
typedef struct HKL__ *HKL;
typedef struct HRC__ *HRC;
typedef int INT;
typedef struct _IRP IRP;
typedef struct _MDL MDL;
typedef struct tagMSG MSG;
typedef char *PSZ;
typedef struct _QualityOfService QOS;
typedef struct _SID SID;
typedef union tagCY CY;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___7C8E1366D020F294DF98B2AA96DD5064 {GUID ObjectId;GUID PolicyId;};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 {WORD Dimension[4];};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 {DWORD PointerToLinenumber;DWORD PointerToNextFunction;};
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 {WORD Linenumber;WORD Size;};
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___381AA3CBBBF76D5CF30945FCDC4D2CAC {ushort tcp_src;ushort tcp_dest;int tcp_seq;int tcp_ack;ushort tcp_flags;ushort tcp_window;ushort tcp_xsum;ushort tcp_urgent;};
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___7B3411E171B9A34DEFFA2511BBE856A2 {ushort Source;ushort Dest;ushort Length;ushort Checksum;};
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___15881024B0F660B7398AF4B4249A3A24 {PVOID Argument1;PVOID Argument2;PVOID Argument3;PVOID Argument4;};
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C {u_char Len;u_char CharSet;u_char UsrStr[256];};
struct tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578 {PVOID pvRecord;IRecordInfo *pRecInfo;};
struct ProfilerControl___129768231BCEF2215A31782384C84F0E___60B1718D3020D7E9553B4563664AAB69 {DWORD dwUSecInterval;};
struct _DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360___A78036EB239B85FA27F661E6E98FFEA9 {WORD wFlipMSTypes;WORD wBltMSTypes;};
struct _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___1F732941DC73F2F4B18392F9D66856DC {USHORT PortMin;USHORT PortMax;};
struct _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___C3A437D225B8ED983937C7D8822FFF10 {UCHAR Type;UCHAR Code;};
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7 {int Len;u_char OctetSeq[1];u_char Reserved[3];};
struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F {int Len;u_char CharSet;u_char UsrStr[1];u_char Reserved[2];};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC {LPWSAOVERLAPPED lpOverlapped;};
struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B {DWORD Short;DWORD Long;};
struct tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 {WORD wProcessorArchitecture;WORD wReserved;};
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7 {int Len;u_char OctetSeq[1];u_char Reserved[3];};
struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F {int Len;u_char CharSet;u_char UsrStr[1];u_char Reserved[2];};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 {HMETAFILE hmeta;int xExt;int yExt;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 {HICON hicon;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 {HENHMETAFILE hemf;};
struct _IRP_________63BBF9CAFCFD23268916A053C4643290___D67882FDDE0993B795A398485751D997 {PVOID DriverContext[4];};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE {BYTE BaseMid;BYTE Flags1;BYTE Flags2;BYTE BaseHi;};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB {BYTE hour;BYTE min;BYTE sec;BYTE frame;BYTE fps;BYTE dummy;BYTE pad[2];};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D {DWORD songptrpos;};
struct _DDSCAPS2___8E5B05F19B273318D79B4635679340DD___A4C750532322E8B339E2E1239D122058 {DWORD dwCaps2;DWORD dwCaps3;DWORD dwCaps4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 {u_char s_b1;u_char s_b2;u_char s_b3;u_char s_b4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 {u_short s_w1;u_short s_w2;};
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B {BYTE scale;BYTE sign;};
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 {ULONG Lo32;ULONG Mid32;};
union _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
union _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
struct _25126A14EDD85516184FD5A53ADA74D5___49138D03018A299D3153760A1810DA37 {BYTE cc_Sz;BYTE cc_Last;};
union _5803EBEE9ECFF6BB80A4332382185F4F___180061D661035B18422EFCDC7BB918FA {BYTE ce_IO_Parm;BYTE ce_IO_RangeDesc;BYTE ce_IO_Address;BYTE ce_IO_Length;};
union _5803EBEE9ECFF6BB80A4332382185F4F___50DB88C5F36CD3CA39B08DBB011F2688 {BYTE ce_PD_Selection;BYTE ce_PD_NomV;BYTE ce_PD_MinV;BYTE ce_PD_MaxV;BYTE ce_PD_StaticI;BYTE ce_PD_AvgI;BYTE ce_PD_PeakI;BYTE ce_PD_PDwnI;};
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 {HKEY hKeyBase;void *pvBase;};
union _WTD_GENERIC_CHAIN_POLICY_DATA___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
union _INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C {DWORD dwReserved;DWORD dwExemptDelta;};
union _INTERNET_CACHE_ENTRY_INFOW___9E8845A706AB4DF9270F3009F082917C {DWORD dwReserved;DWORD dwExemptDelta;};
union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F {HANDLE hEvent;HANDLE hCompletionPort;};
union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F {HANDLE hEvent;HANDLE hCompletionPort;};
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 {DWORD Characteristics;DWORD OriginalFirstThunk;};
struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_RESFI {USHORT Capabilities;USHORT StatusCode;USHORT AssociationId;};
struct _structDVD_AUDIO_MU_ATTR___9CEA1F46C8B9203C81B8253549FA0A67 {UINT8 alpha;UINT8 beta;};
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D {PFULL_PTR_TO_REFID_ELEMENT *XlatTable;unsigned int NumberOfBuckets;unsigned int HashMask;};
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C {DWORD PhysicalAddress;DWORD VirtualSize;};
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 {WORD Ordinal;WORD Hint;};
union UserNotificationType___03336E7F16FF4F78E2675530DEED7B28 {DWORD dwReserved;void *pExpansion;};
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 {CERT_ALT_NAME_INFO FullName;};
union _CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6 {PCMC_TAGGED_CERT_REQUEST pTaggedCertRequest;};
struct _ISA_PNP_RESOURCES___D30A615D33D92688260AD94A2A31BFD2 {UCHAR IRQLevel;UCHAR IRQType;};
union tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 {BYTE Name[18];};
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 {DWORD SymbolTableIndex;DWORD VirtualAddress;};
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED {DWORD VirtualAddress;DWORD RelocCount;};
union _DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED {DWORD dwBackBufferCount;DWORD dwDepth;};
union _DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260 {DWORD dwMipMapCount;DWORD dwRefreshRate;DWORD dwSrcVBHandle;};
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC {DWORD LowPart;DWORD HighPart;};
union tagSMTPRESPONSE___F2E271575EB3F09F226A3079A92CFBD3 {SMTPSTREAM rStreamInfo;};
union _DDPIXELFORMAT___23DF69239FC04D9BE22118E1AD8451FB {DWORD dwRGBAlphaBitMask;DWORD dwYUVAlphaBitMask;DWORD dwLuminanceAlphaBitMask;DWORD dwRGBZBitMask;DWORD dwYUVZBitMask;};
union _DDPIXELFORMAT___4C86B66084EB9B6F3AE81991D3FADB38 {DWORD dwBBitMask;DWORD dwVBitMask;DWORD dwStencilBitMask;DWORD dwBumpLuminanceBitMask;};
union _DDPIXELFORMAT___6A86D2BA2D533C5D3D5AB1F1491969D5 {DWORD dwRBitMask;DWORD dwYBitMask;DWORD dwStencilBitDepth;DWORD dwLuminanceBitMask;DWORD dwBumpDuBitMask;DWORD dwOperations;};
union _DDPIXELFORMAT___F1D3FB4D78950D0942225445130999CB {DWORD dwRGBBitCount;DWORD dwYUVBitCount;DWORD dwZBufferBitDepth;DWORD dwAlphaBitDepth;DWORD dwLuminanceBitCount;DWORD dwBumpBitCount;DWORD dwPrivateFormatBitCount;};
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B {DWORD dwMipMapCount;DWORD dwZBufferBitDepth;DWORD dwRefreshRate;};
union _DEVICE_OBJECT___C539DEAEE31ED5B59C09D6583F6C5542 {WAIT_CONTEXT_BLOCK Wcb;};
union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union _D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902 {_D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902___40942CBCB8F0A1CDBC81269929B28324 __anonymous0;float m[4][4];};
union DXVEC____MIDL___MIDL_itf_dxtrans_0155_0002 {int D[4];LONGLONG LD[4];float C[4];double LC[4];};
struct _avifieldindex_chunk___avifieldindex_entry {DWORD dwOffset;DWORD dwSize;DWORD dwOffsetField2;};
union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D {GUID guid;GUID *pguid;};
union _userHMETAFILEPICT____MIDL_IWinTypes_0005 {int hInproc;remoteMETAFILEPICT *hRemote;int hGlobal;};
union _userHENHMETAFILE____MIDL_IWinTypes_0006 {int hInproc;BYTE_BLOB *hRemote;int hGlobal;};
typedef void (*PFN_PDD_INDICATE_RNDIS_PACKET_COMPLETE)(PDATA_WRAPPER pDataWrapper);
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;DWORD dwUnauthAttrIndex;};
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {DWORD EndOfJobTimeAction;};
union _GDI_NONREMOTE____MIDL_IWinTypes_0002 {int hInproc;DWORD_BLOB *hRemote;};
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {ULONGLONG BeginAddress;ULONGLONG EndAddress;ULONGLONG ExceptionHandler;ULONGLONG HandlerData;ULONGLONG PrologEndAddress;};
union _userHMETAFILE____MIDL_IWinTypes_0004 {int hInproc;BYTE_BLOB *hRemote;int hGlobal;};
struct __MIDL___MIDL_itf_shobjidl_0117_0003 {UINT ViewMode;UINT fFlags;};
union _userHPALETTE____MIDL_IWinTypes_0008 {int hInproc;rpcLOGPALETTE *hRemote;int hGlobal;};
typedef ULONG NDIS_802_11_FRAGMENTATION_THRESHOLD;
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE *PNDIS_802_11_NETWORK_INFRASTRUCTURE;
typedef SecPkgContext_RemoteCredentialInfo *PSecPkgContext_RemoteCredenitalInfo;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD ExceptionHandler;DWORD HandlerData;DWORD PrologEndAddress;};
union _userHBITMAP____MIDL_IWinTypes_0007 {int hInproc;userBITMAP *hRemote;int hGlobal;};
union _userHGLOBAL____MIDL_IWinTypes_0003 {int hInproc;FLAGGED_BYTE_BLOB *hRemote;int hGlobal;};
typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef LPINTERNET_CACHE_CONFIG_PATH_ENTRYA LPINTERNET_CACHE_CONFIG_PATH_ENTRY;
typedef enum _NDIS_802_11_NETWORK_INFRASTRUCTURE NDIS_802_11_NETWORK_INFRASTRUCTURE;
typedef SecPkgContext_LocalCredentialInfo *PSecPkgContext_LocalCredenitalInfo;
typedef SecPkgContext_RemoteCredentialInfo SecPkgContext_RemoteCredenitalInfo;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD UnwindInfoAddress;};
struct __MIDL___MIDL_itf_dvdata_0105_0001 {UINT16 xStart;UINT16 xEnd;UINT16 yStart;UINT16 yEnd;};
struct __MIDL___MIDL_itf_dvdcom_0000_0001 {UINT8 key[5];};
struct __MIDL___MIDL_itf_dvdcom_0000_0002 {UINT8 challenge[10];};
struct __MIDL___MIDL_itf_dvdcom_0000_0003 {UINT32 sdks[512];};
struct __MIDL___MIDL_itf_dvdnav_0000_0001 {UINT8 userData[201];};
struct _0704266397680A28280F4A6885C4C35C {UCHAR TypeOfNetworkId;UCHAR NetworkIdPlan;UCHAR NetworkIdLength;UCHAR NetworkId[1];};
struct _12065485545C98CF3EA596DDCCDF0ED5 {BOOL fLargeRoom;};
struct _1B524A7EE9DF0D2D7407CE43B258BBC8 {DWORD dwConnectedState;DWORD dwFlags;};
struct _25388EDDA6F9AFF912B25CA06CA16E0D {DWORD cbSize;DWORD dwSignature;DWORD idSpecialFolder;DWORD cbOffset;};
struct _299134A1587F81C88B1AF91D3DBFCA39 {ULONG DialogueLevel;};
struct _2FCB7B16F35A994219C907239F9496DC {BOOL fRepeatPreviousBlock;BOOL fErrorInCurrentBlock;};
struct _30A778B999D395B0C4B1147E524BC6D9 {BYTE v1_Major;BYTE v1_Minor;BYTE v1_Info;};
struct _362ECF3E0DC92881BF24984B329406EC {DWORD DeviceNumber;DWORD VPI;DWORD VCI;};
struct _3EC5757393EE7828D79CED73ACE876F0 {unsigned int Count;RPC_IF_ID *IfId[1];};
struct _3FBC325AC5E1830BAC7DB9619C6C90C8 {INT Score;};
struct _463E06C868FD59B527DBF787F8EA20AA {ULONG UserDefined;};
struct _5DBE423D59383EF3676E2D6AC9F8E7EA {DWORD dwMicroSecPerFrame;DWORD dwMaxBytesPerSec;DWORD dwPaddingGranularity;DWORD dwFlags;DWORD dwTotalFrames;DWORD dwInitialFrames;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwReserved[4];};
union _66627B77A16817CACFC28DBBF83E8217 {BYTE dt_DevID;BYTE dt_ExtDevSpeed;BYTE dt_DevSize;};
struct _6D2254E53597AC8CE26BF57895A6DFF7 {BYTE bCla;BYTE bIns;BYTE bP1;BYTE bP2;BYTE bP3;};
struct _70FE3ED39A29D5613E00A3E72F8FD4C3 {UCHAR QOSClassForward;UCHAR QOSClassBackward;};
struct _7684FB82DC2359E8867448D749E28870 {BYTE abFlags[4];BYTE ab[1];};
struct _7807FA91DA52C5F41D82DAAEFE4F1D2C {BOOL fAccepted;BOOL fLeashed;BOOL fDowngraded;BOOL fRejected;};
struct _7909BF26B031C365F3B32F82E7366E93 {INT LowerBound;INT UpperBound;};
struct _793203A904263AF632B64217160A3CD4 {BOOL TreeWalk;};
struct _7F09F6AD7173E0292471C155D2885AEF {FILETIME DateAndTime;};
struct _8B9777916333A4B8A3A60FA8F93F002E {SCARD_IO_REQUEST ioRequest;};
struct _90E769FB438B6A83B49CA07EC4EB3EFA {DWORD ckid;DWORD dwFlags;DWORD dwChunkOffset;DWORD dwChunkLength;};
struct _9ADD4811563784E97592213CBF8060F3 {LONG BitStreamMode;};
struct _A2D3C6DF54C31D821ABE78046EA78F8E {DWORD dwGroupAddress;DWORD dwGroupMask;};
struct _A615A68A66448D8BF4E7E81F3C279570 {UCHAR Location;UCHAR Cause;UCHAR DiagnosticsLength;UCHAR Diagnostics[4];};
struct _B1AAA2E973C90C8AA1D1293855444268 {DWORD dwTtl;DWORD dwRateLimit;};
struct _B3B9922EB7092B419B9B91CCE29DC8AC {DWORD dwStatus;DWORD dwSize;};
struct _B878650F4DB1CE5DD79981052205B0E0 {DWORD cbSize;DWORD dwDownloadKBRemaining;DWORD dwInstallKBRemaining;DWORD dwDownloadSecsRemaining;DWORD dwInstallSecsRemaining;};
struct _C0A2C8317C92AEC6C65405BB0D08D817 {INT Zone;};
struct _D692CA7460863103343173F071E8F66B {DWORD dwMajorVersion;DWORD dwMinorVersion;};
struct _E3900F4E8C66B34C84E740787FDB0DE9 {INT DegreesNorth;INT MinutesNorth;INT SecondsNorth;INT DegreesEast;INT MinutesEast;INT SecondsEast;};
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 {BOOL fDownMix;BOOL fDolbySurround;};
struct _EB59546A6B00F9787175E0D2790469DD {UCHAR BearerClass;UCHAR TrafficType;UCHAR TimingRequirements;UCHAR ClippingSusceptability;UCHAR UserPlaneConnectionConfig;};
struct _EC3BB85EBBE9955145E6214979EA4930 {DWORD dwNotificationId;DWORD dwNotificationParam;};
struct _EC8EE2E9AF7D4EC32726A7FD632A186D {ULONG ObjectType;ULONG ObjectLength;};
struct _FE6FD525E979B51115A77BACF8C3F565 {DWORD dwMagic;DWORD dwRecSize;DWORD dwRecNumber;DWORD dwReserved;};
struct _FEF45AADF86B3C581868F0239CC1F2BD {DWORD Ttl;};
typedef enum _D3DSHADER_INSTRUCTION_OPCODE_TYPE D3DSHADER_INSTRUCTION_OPCODE_TYPE;
typedef PACTRL_ACCESSW PACTRL_ACCESSW_ALLOCATE_ALL_NODES;
typedef SecPkgContext_LocalCredentialInfo SecPkgContext_LocalCredenitalInfo;
struct _DOT11_CURRENT_OFFLOAD_CAPABILITY {ULONG uReserved;ULONG uFlags;};
struct _DOT11_SUPPORTED_DATA_RATES_VALUE {UCHAR ucSupportedTxDataRatesValue[8];UCHAR ucSupportedRxDataRatesValue[8];};
struct __MIDL_IDVDStreamControlInfo_0001 {UINT8 valid;UINT8 countryCode[2];UINT8 copyrightHolder[3];UINT8 bcdYear;UINT8 bcdNumber[3];};
struct _structDVD_SUBPICTURE_STREAM_ATTR {UINT16 modetype;UINT16 specificCode;UINT16 extension;};
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
typedef INTERNET_CACHE_CONFIG_PATH_ENTRYA INTERNET_CACHE_CONFIG_PATH_ENTRY;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *LPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *NPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef PACTRL_AUDITW PACTRL_AUDITW_ALLOCATE_ALL_NODES;
typedef PDEV_BROADCAST_DEVICEINTERFACE_A PDEV_BROADCAST_INTERFACEDEVICE_A;
typedef PDEV_BROADCAST_DEVICEINTERFACE_W PDEV_BROADCAST_INTERFACEDEVICE_W;
typedef enum _NDIS_802_11_AUTHENTICATION_MODE *PNDIS_802_11_AUTHENTICATION_MODE;
typedef enum tagSUPPORTS_BINDING_INTERFACE_FLAGS SUPPORTS_BINDING_INTERFACE_FLAGS;
struct _DOT11_OPERATION_MODE_CAPABILITY {ULONG uReserved;ULONG uMajorVersion;ULONG uMinorVersion;ULONG uNumOfTXBuffers;ULONG uNumOfRXBuffers;ULONG uOpModeCapability;};
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {DWORD FuncStart;unsigned int PrologLen : 8;unsigned int FuncLen : 22;unsigned int ThirtyTwoBit : 1;unsigned int ExceptionFlag : 1;};
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {DWORD UIRestrictionsClass;};
struct _NDIS_TAPI_NEGOTIATE_EXT_VERSION {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulLowVersion;ULONG ulHighVersion;ULONG ulExtVersion;};
struct _avioldindex___avioldindex_entry {DWORD dwChunkId;DWORD dwFlags;DWORD dwOffset;DWORD dwSize;};
typedef enum AM_SEEKING_SeekingCapabilities AM_SEEKING_SEEKING_CAPABILITIES;
typedef ATM_ADDRESS ATM_CALLING_PARTY_SUBADDRESS_IE;
typedef DEV_BROADCAST_DEVICEINTERFACE_A DEV_BROADCAST_INTERFACEDEVICE_A;
typedef DEV_BROADCAST_DEVICEINTERFACE_W DEV_BROADCAST_INTERFACEDEVICE_W;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *LPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef  USB_CONFIGURATION_DESCRIPTOR *LPCUSB_CONFIGURATION_DESCRIPTOR;
typedef LPINTERNET_CACHE_CONTAINER_INFOA LPINTERNET_CACHE_CONTAINER_INFO;
typedef LPINTERNET_PER_CONN_OPTION_LISTA LPINTERNET_PER_CONN_OPTION_LIST;
typedef enum _NDIS_802_11_AUTHENTICATION_MODE NDIS_802_11_AUTHENTICATION_MODE;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *NPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *PCREATIVEFASTSPEECH10WAVEFORMAT;
struct _SecPkgContext_NegotiationInfoA {PSecPkgInfoA PackageInfo;unsigned int NegotiationState;};
struct _SecPkgContext_NegotiationInfoW {PSecPkgInfoW PackageInfo;unsigned int NegotiationState;};
typedef ATM_ADDRESS ATM_CALLED_PARTY_SUBADDRESS_IE;
typedef USB_CONFIGURATION_DESCRIPTOR *LPUSB_CONFIGURATION_DESCRIPTOR;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *PCREATIVEFASTSPEECH8WAVEFORMAT;
typedef PCREDENTIAL_TARGET_INFORMATIONA PCREDENTIAL_TARGET_INFORMATION;
typedef  USB_CONFIGURATION_DESCRIPTOR *PCUSB_CONFIGURATION_DESCRIPTOR;
typedef PDEV_BROADCAST_DEVICEINTERFACE_A PDEV_BROADCAST_DEVICEINTERFACE;
typedef PDEV_BROADCAST_INTERFACEDEVICE_A PDEV_BROADCAST_INTERFACEDEVICE;
typedef enum _NDIS_802_11_WEP_STATUS *PNDIS_802_11_ENCRYPTION_STATUS;
struct _SecPkgCred_SupportedProtocols {DWORD grbitProtocol;};
typedef enum __MIDL___MIDL_itf_qnetwork_0082_0001 AMExtendedSeekingCapabilities;
typedef CREDENTIAL_TARGET_INFORMATIONA CREDENTIAL_TARGET_INFORMATION;
typedef enum _D3DSHADER_PARAM_REGISTER_TYPE D3DSHADER_PARAM_REGISTER_TYPE;
typedef DEV_BROADCAST_DEVICEINTERFACE_A DEV_BROADCAST_DEVICEINTERFACE;
typedef DEV_BROADCAST_INTERFACEDEVICE_A DEV_BROADCAST_INTERFACEDEVICE;
typedef INTERNET_CACHE_CONTAINER_INFOA INTERNET_CACHE_CONTAINER_INFO;
typedef INTERNET_PER_CONN_OPTION_LISTA INTERNET_PER_CONN_OPTION_LIST;
typedef enum _NDIS_802_11_WEP_STATUS NDIS_802_11_ENCRYPTION_STATUS;
typedef enum _DOT11_ASSOC_UPCALL_INFO_TYPE *PDOT11_ASSOC_UPCALL_INFO_TYPE;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef enum _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO {DWORD cbSize;DWORD dwFlags;};
struct _DOT11_CURRENT_OPERATION_MODE {ULONG uReserved;ULONG uCurrentOpMode;};
struct _DOT11_SUPPORTED_POWER_LEVELS {ULONG uNumOfSupportedPowerLevels;ULONG uTxPowerLevelValues[8];};
struct _NDIS_802_11_CONFIGURATION_FH {ULONG Length;ULONG HopPattern;ULONG HopSet;ULONG DwellTime;};
struct _ServicesExeCallbackFunctions {PFN_SERVICE_SHUTDOWN pfnServiceShutdown;};
struct creative_fastspeechformat_tag {WAVEFORMATEX ewf;};
struct linemediacontrolcallstate_tag {DWORD dwCallStates;DWORD dwMediaControl;};
struct tMIXERCONTROLDETAILS_UNSIGNED {DWORD dwValue;};
typedef enum _DOT11_ASSOC_UPCALL_INFO_TYPE DOT11_ASSOC_UPCALL_INFO_TYPE;
typedef IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef DIALOGICOKIADPCMWAVEFORMAT *LPDIALOGICOKIADPCMWAVEFORMAT;
typedef LPINTERNET_CACHE_CONFIG_INFOA LPINTERNET_CACHE_CONFIG_INFO;
typedef LPDIRECTSOUNDCAPTUREBUFFER *LPLPDIRECTSOUNDCAPTUREBUFFER;
typedef DIALOGICOKIADPCMWAVEFORMAT *NPDIALOGICOKIADPCMWAVEFORMAT;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef enum _NDIS_802_11_RELOAD_DEFAULTS *PNDIS_802_11_RELOAD_DEFAULTS;
typedef enum _NDIS_FDDI_LCONNECTION_STATE *PNDIS_FDDI_LCONNECTION_STATE;
typedef WORD *PSECURITY_DESCRIPTOR_CONTROL;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
struct _DOT11_HOPPING_PATTERN_ENTRY {ULONG uHoppingPatternIndex;ULONG uRandomTableFieldNumber;};
struct _IMAGE_ARCHIVE_MEMBER_HEADER {BYTE Name[16];BYTE Date[12];BYTE UserID[6];BYTE GroupID[6];BYTE Mode[8];BYTE Size[10];BYTE EndHeader[2];};
struct _ISA_PNP_LOGICAL_DEVICE_INFO {DWORD LogicalDeviceID;DWORD CompatibleIDs[8];};
struct _NDIS_TAPI_PROVIDER_SHUTDOWN {ULONG ulRequestID;};
struct __MIDL_IDVDProgramChain_0001 {UINT8 cmd[8];};
struct __MIDL_IDVDProgramChain_0003 {UINT32 cellCategory;UINT32 cellPlaybackTime;UINT32 startFirstVobu;UINT32 endFirstIlvu;UINT32 startLastVobu;UINT32 endLastVobu;};
struct _structDVD_AUDIO_STREAM_ATTR {UINT16 attr;UINT16 reserved[3];};
struct audiofile_af10waveformat_tag {WAVEFORMATEX wfx;};
struct audiofile_af36waveformat_tag {WAVEFORMATEX wfx;};
struct tMIXERCONTROLDETAILS_BOOLEAN {LONG fValue;};
typedef enum _D3DSHADER_PARAM_DSTMOD_TYPE D3DSHADER_PARAM_DSTMOD_TYPE;
typedef enum _D3DSHADER_PARAM_SRCMOD_TYPE D3DSHADER_PARAM_SRCMOD_TYPE;
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef  USB_INTERFACE_DESCRIPTOR *LPCUSB_INTERFACE_DESCRIPTOR;
typedef LPINTERNET_CACHE_ENTRY_INFOA LPINTERNET_CACHE_ENTRY_INFO;
typedef LPINTERNET_CACHE_GROUP_INFOA LPINTERNET_CACHE_GROUP_INFO;
typedef MEDIASPACEADPCMWAVEFORMAT *LPMEDIASPACEADPCMWAVEFORMAT;
typedef enum _NDIS_802_11_RELOAD_DEFAULTS NDIS_802_11_RELOAD_DEFAULTS;
typedef enum _NDIS_FDDI_LCONNECTION_STATE NDIS_FDDI_LCONNECTION_STATE;
typedef enum tagNETCON_CHARACTERISTIC_FLAGS NETCON_CHARACTERISTIC_FLAGS;
typedef MEDIASPACEADPCMWAVEFORMAT *NPMEDIASPACEADPCMWAVEFORMAT;
typedef  CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef DIALOGICOKIADPCMWAVEFORMAT *PDIALOGICOKIADPCMWAVEFORMAT;
typedef enum _NDIS_802_11_PRIVACY_FILTER *PNDIS_802_11_PRIVACY_FILTER;
typedef enum _SECUREURLHOSTVALIDATE_FLAGS SECUREURLHOSTVALIDATE_FLAGS;
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
typedef DWORD VALID_UOP_SOMTHING_OR_OTHER;
struct _NDIS_LINE_TRANSLATE_OUTPUT {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulDialableStringSize;ULONG ulDialableStringOffset;ULONG ulDisplayableStringSize;ULONG ulDisplayableStringOffset;ULONG ulCurrentCountry;ULONG ulDestCountry;ULONG ulTranslateResults;};
struct _SecPkgContext_PackageInfoA {PSecPkgInfoA PackageInfo;};
struct _SecPkgContext_PackageInfoW {PSecPkgInfoW PackageInfo;};
struct _SecPkgCred_CipherStrengths {DWORD dwMinimumCipherStrength;DWORD dwMaximumCipherStrength;};
struct tMIXERCONTROLDETAILS_SIGNED {LONG lValue;};
typedef enum _A505905B9019AA97D205795F9CD1DA04 AM_PROPERTY_TS_RATE_CHANGE;
typedef ATM_ADDRESS ATM_CALLED_PARTY_NUMBER_IE;
typedef  CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO;
typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef enum tagDVD_PREFERRED_DISPLAY_MODE DVD_PREFERRED_DISPLAY_MODE;
typedef enum _HTML_PAINT_DRAW_INFO_FLAGS HTML_PAINT_DRAW_INFO_FLAGS;
typedef INTERNET_CACHE_CONFIG_INFOA INTERNET_CACHE_CONFIG_INFO;
typedef AUDIOFILE_AF10WAVEFORMAT *LPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *LPAUDIOFILE_AF36WAVEFORMAT;
typedef  COMMANDBANDSRESTOREINFO *LPCCOMMANDBANDSRESTOREINFO;
typedef  USB_ENDPOINT_DESCRIPTOR *LPCUSB_ENDPOINT_DESCRIPTOR;
typedef LPINTERNET_PER_CONN_OPTIONA LPINTERNET_PER_CONN_OPTION;
typedef USB_INTERFACE_DESCRIPTOR *LPUSB_INTERFACE_DESCRIPTOR;
typedef enum _MULTIPLE_TRUSTEE_OPERATION MULTIPLE_TRUSTEE_OPERATION;
typedef enum _NDIS_802_11_PRIVACY_FILTER NDIS_802_11_PRIVACY_FILTER;
typedef ULONG NDIS_802_11_TX_POWER_LEVEL;
typedef AUDIOFILE_AF10WAVEFORMAT *NPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *NPAUDIOFILE_AF36WAVEFORMAT;
typedef enum _BF99222CF03DF5552123F5B194CFC8CC *PAM_COPY_MACROVISION_LEVEL;
typedef  USB_INTERFACE_DESCRIPTOR *PCUSB_INTERFACE_DESCRIPTOR;
typedef enum _DOT11_INTEGRITY_FAIL_TYPE *PDOT11_INTEGRITY_FAIL_TYPE;
typedef void (*PFN_PDD_SEND_RNDIS_MESSAGE)(PDATA_WRAPPER pDataWrapper);
typedef HTTP_FILTER_PREPROC_HEADERS *PHTTP_FILTER_SEND_RESPONSE;
typedef MEDIASPACEADPCMWAVEFORMAT *PMEDIASPACEADPCMWAVEFORMAT;
typedef enum _NDIS_FDDI_ATTACHMENT_TYPE *PNDIS_FDDI_ATTACHMENT_TYPE;
typedef DWORD PST_REPOSITORYCAPABILITIES;
struct _CERT_PRIVATE_KEY_VALIDITY {FILETIME NotBefore;FILETIME NotAfter;};
struct _CERT_STORE_PROV_FIND_INFO {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD dwFindFlags;DWORD dwFindType; void *pvFindPara;};
struct _IMAGE_COFF_SYMBOLS_HEADER {DWORD NumberOfSymbols;DWORD LvaToFirstSymbol;DWORD NumberOfLinenumbers;DWORD LvaToFirstLinenumber;DWORD RvaToFirstByteOfCode;DWORD RvaToLastByteOfCode;DWORD RvaToFirstByteOfData;DWORD RvaToLastByteOfData;};
struct _IMAGE_RESOURCE_DATA_ENTRY {DWORD OffsetToData;DWORD Size;DWORD CodePage;DWORD Reserved;};
struct _INTERNET_CACHE_TIMESTAMPS {FILETIME ftExpires;FILETIME ftLastModified;};
struct _REPARSE_POINT_INFORMATION {WORD ReparseDataLength;WORD UnparsedNameLength;};
struct _SecPkgContext_EapKeyBlock {BYTE rgbKeys[128];BYTE rgbIVs[64];};
struct _TAPE_SET_MEDIA_PARAMETERS {DWORD BlockSize;};
struct linecalltreatmententry_tag {DWORD dwCallTreatmentID;DWORD dwCallTreatmentNameSize;DWORD dwCallTreatmentNameOffset;};
typedef enum _styleTextUnderlinePosition styleTextUnderlinePosition;
struct yamaha_adpmcwaveformat_tag {WAVEFORMATEX wfx;};
typedef enum _BF99222CF03DF5552123F5B194CFC8CC AM_COPY_MACROVISION_LEVEL;
struct AM_DVDCOPY_SET_COPY_STATE {ULONG DVDCopyState;};
typedef enum tagCOMPONENT_CHARACTERISTICS COMPONENT_CHARACTERISTICS;
typedef enum _DOT11_INTEGRITY_FAIL_TYPE DOT11_INTEGRITY_FAIL_TYPE;
typedef HTTP_FILTER_PREPROC_HEADERS HTTP_FILTER_SEND_RESPONSE;
typedef PSecurityFunctionTableA ( *INIT_SECURITY_INTERFACE_A)();
typedef PSecurityFunctionTableW ( *INIT_SECURITY_INTERFACE_W)();
typedef INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFO;
typedef INTERNET_CACHE_GROUP_INFOA INTERNET_CACHE_GROUP_INFO;
typedef ULONG  IWABOBJECT_Release_METHOD(struct _IWABOBJECT *This);
struct KBDI_VKEY_TO_UNICODE_INFO {UINT32 cbToUnicodeState;UINT32 cMaxToUnicodeCharacters;};
typedef CREATIVEADPCMWAVEFORMAT *LPCREATIVEADPCMWAVEFORMAT;
typedef LPDIRECTSOUND3DLISTENER *LPLPDIRECTSOUND3DLISTENER;
typedef USB_ENDPOINT_DESCRIPTOR *LPUSB_ENDPOINT_DESCRIPTOR;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef ULONG NDIS_802_11_RTS_THRESHOLD;
typedef enum _NDIS_FDDI_ATTACHMENT_TYPE NDIS_FDDI_ATTACHMENT_TYPE;
typedef CREATIVEADPCMWAVEFORMAT *NPCREATIVEADPCMWAVEFORMAT;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
typedef AUDIOFILE_AF10WAVEFORMAT *PAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *PAUDIOFILE_AF36WAVEFORMAT;
typedef  USB_ENDPOINT_DESCRIPTOR *PCUSB_ENDPOINT_DESCRIPTOR;
typedef void (*PFN_PDD_SEND_RNDIS_PACKET)(PDATA_WRAPPER pDataWrapper);
typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef enum _NDIS_802_11_NETWORK_TYPE *PNDIS_802_11_NETWORK_TYPE;
typedef enum _NDIS_BPC_INDICATE_REASON *PNDIS_BPC_INDICATE_REASON;
typedef enum _NDIS_FDDI_RING_MGT_STATE *PNDIS_FDDI_RING_MGT_STATE;
typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg, unsigned short *ServerPrincName, unsigned int KeyVer, void **Key, RPC_STATUS *Status);
struct _ACL_REVISION_INFORMATION {DWORD AclRevision;};
struct _DOT11_OFFLOAD_CAPABILITY {ULONG uReserved;ULONG uFlags;ULONG uSupportedWEPAlgorithms;ULONG uNumOfReplayWindows;ULONG uMaxWEPKeyMappingLength;ULONG uSupportedAuthAlgorithms;ULONG uMaxAuthKeyMappingLength;};
struct _NDIS_802_11_VARIABLE_IEs {UCHAR ElementID;UCHAR Length;UCHAR data[1];};
struct _SComparePropsRestriction {ULONG relop;ULONG ulPropTag1;ULONG ulPropTag2;};
struct _SID_IDENTIFIER_AUTHORITY {BYTE Value[6];};
struct _USB_INTERFACE_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;UCHAR bInterfaceNumber;UCHAR bAlternateSetting;UCHAR bNumEndpoints;UCHAR bInterfaceClass;UCHAR bInterfaceSubClass;UCHAR bInterfaceProtocol;UCHAR iInterface;};
struct _WINDOWS_IRDA_DEVICE_INFO {u_char irdaDeviceID[4];char irdaDeviceName[22];u_char irdaDeviceHints1;u_char irdaDeviceHints2;u_char irdaCharSet;};
struct linemediacontroldigit_tag {DWORD dwDigit;DWORD dwDigitModes;DWORD dwMediaControl;};
struct linemediacontrolmedia_tag {DWORD dwMediaModes;DWORD dwDuration;DWORD dwMediaControl;};
typedef enum _styleBackgroundAttachment styleBackgroundAttachment;
typedef enum _styleDefaultTextSelection styleDefaultTextSelection;
typedef enum _styleTextLineThroughStyle styleTextLineThroughStyle;
typedef enum AM_SEEKING_SeekingFlags AM_SEEKING_SEEKING_FLAGS;
typedef enum _D3DTEXTURESTAGESTATETYPE D3DTEXTURESTAGESTATETYPE;
typedef enum _D3DTEXTURETRANSFORMFLAGS D3DTEXTURETRANSFORMFLAGS;
typedef enum tagENUM_BINDING_PATHS_FLAGS ENUM_BINDING_PATHS_FLAGS;
typedef INTERNET_PER_CONN_OPTIONA INTERNET_PER_CONN_OPTION;
typedef ULONG  IWABOBJECT_AddRef_METHOD(struct _IWABOBJECT *This);
typedef CONTRESVQLPCWAVEFORMAT *LPCONTRESVQLPCWAVEFORMAT;
typedef  USB_DEVICE_DESCRIPTOR *LPCUSB_DEVICE_DESCRIPTOR;
typedef  USB_STRING_DESCRIPTOR *LPCUSB_STRING_DESCRIPTOR;
typedef FMTOWNS_SND_WAVEFORMAT *LPFMTOWNS_SND_WAVEFORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *LPNMS_VBXADPCMWAVEFORMAT;
typedef YAMAHA_ADPCMWAVEFORMAT *LPYAMAHA_ADPCMWAVEFORMAT;
typedef enum _NDIS_802_11_NETWORK_TYPE NDIS_802_11_NETWORK_TYPE;
typedef enum _NDIS_BPC_INDICATE_REASON NDIS_BPC_INDICATE_REASON;
typedef enum _NDIS_FDDI_RING_MGT_STATE NDIS_FDDI_RING_MGT_STATE;
typedef CONTRESVQLPCWAVEFORMAT *NPCONTRESVQLPCWAVEFORMAT;
typedef FMTOWNS_SND_WAVEFORMAT *NPFMTOWNS_SND_WAVEFORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *NPNMS_VBXADPCMWAVEFORMAT;
typedef YAMAHA_ADPCMWAVEFORMAT *NPYAMAHA_ADPCMWAVEFORMAT;
typedef PACTRL_ACCESS_ENTRY_LISTA PACTRL_ACCESS_ENTRY_LIST;
typedef BOOL *PAM_PROPERTY_COMPOSIT_ON;
typedef CREATIVEADPCMWAVEFORMAT *PCREATIVEADPCMWAVEFORMAT;
typedef enum _DOT11_ASSOCIATION_STATE *PDOT11_ASSOCIATION_STATE;
typedef enum _DOT11_DIVERSITY_SUPPORT *PDOT11_DIVERSITY_SUPPORT;
typedef BOOL (*PFN_ALLOCANDFILLDEFUSAGE)( char *pszUsageOID, struct _CRYPT_PROVIDER_DEFUSAGE *psDefUsage);
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
typedef enum _NDIS_802_11_STATUS_TYPE *PNDIS_802_11_STATUS_TYPE;
typedef enum _NDIS_DEVICE_POWER_STATE *PNDIS_DEVICE_POWER_STATE;
typedef enum _NDIS_WAN_MEDIUM_SUBTYPE *PNDIS_WAN_MEDIUM_SUBTYPE;
typedef DWORD PST_PROVIDERCAPABILITIES;
typedef enum _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
struct _EXIT_PROCESS_DEBUG_INFO {DWORD dwExitCode;};
struct _OFFLOAD_IPSEC_DELETE_SA {HANDLE OffloadHandle;};
struct _TRANSPORT_HEADER_OFFSET {USHORT ProtocolType;USHORT HeaderOffset;};
struct csimaadpcmwaveformat_tag {WAVEFORMATEX wfx;};
struct linemediacontroltone_tag {DWORD dwAppSpecific;DWORD dwDuration;DWORD dwFrequency1;DWORD dwFrequency2;DWORD dwFrequency3;DWORD dwMediaControl;};
typedef enum _styleBackgroundPositionX styleBackgroundPositionX;
typedef enum _styleBackgroundPositionY styleBackgroundPositionY;
struct tagDVD_PLAYBACK_LOCATION {ULONG TitleNum;ULONG ChapterNum;ULONG TimeCode;};
typedef ACTRL_ACCESS_ENTRY_LISTA ACTRL_ACCESS_ENTRY_LIST;
typedef BOOL AM_PROPERTY_COMPOSIT_ON;
typedef enum _04ED89F01C0FDF2BC464E7F71D566769 AM_PROPERTY_DVDCOPYPROT;
typedef enum _tagAUTOCOMPLETELISTOPTIONS AUTOCOMPLETELISTOPTIONS;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0003 COMPLETION_STATUS_FLAGS;
typedef enum _DOT11_ASSOCIATION_STATE DOT11_ASSOCIATION_STATE;
typedef enum _DOT11_DIVERSITY_SUPPORT DOT11_DIVERSITY_SUPPORT;
typedef enum tagDVD_SUBPICTURE_LANG_EXT DVD_SUBPICTURE_LANG_EXT;
typedef enum _ELEMENTDESCRIPTOR_FLAGS ELEMENTDESCRIPTOR_FLAGS;
typedef CONTRESCR10WAVEFORMAT *LPCONTRESCR10WAVEFORMAT;
typedef LPDIRECTSOUND3DBUFFER *LPLPDIRECTSOUND3DBUFFER;
typedef SIERRAADPCMWAVEFORMAT *LPSIERRAADPCMWAVEFORMAT;
typedef USB_DEVICE_DESCRIPTOR *LPUSB_DEVICE_DESCRIPTOR;
typedef USB_STRING_DESCRIPTOR *LPUSB_STRING_DESCRIPTOR;
typedef int ( *LPWSPCANCELBLOCKINGCALL)(LPINT lpErrno);
typedef UCHAR NDIS_802_11_MAC_ADDRESS[6];
typedef enum _NDIS_802_11_STATUS_TYPE NDIS_802_11_STATUS_TYPE;
typedef enum _NDIS_DEVICE_POWER_STATE NDIS_DEVICE_POWER_STATE;
typedef enum _NDIS_WAN_MEDIUM_SUBTYPE NDIS_WAN_MEDIUM_SUBTYPE;
typedef CONTRESCR10WAVEFORMAT *NPCONTRESCR10WAVEFORMAT;
typedef SIERRAADPCMWAVEFORMAT *NPSIERRAADPCMWAVEFORMAT;
typedef  CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;
typedef CONTRESVQLPCWAVEFORMAT *PCONTRESVQLPCWAVEFORMAT;
typedef  USB_DEVICE_DESCRIPTOR *PCUSB_DEVICE_DESCRIPTOR;
typedef  USB_STRING_DESCRIPTOR *PCUSB_STRING_DESCRIPTOR;
typedef enum _DOT11_HOP_ALGO_ADOPTED *PDOT11_HOP_ALGO_ADOPTED;
typedef FMTOWNS_SND_WAVEFORMAT *PFMTOWNS_SND_WAVEFORMAT;
typedef BOOL (*PFNPROCESSDOWNLOADBEGIN)(void);
typedef enum _NDIS_802_11_POWER_MODE *PNDIS_802_11_POWER_MODE;
typedef enum _NDIS_802_11_WEP_STATUS *PNDIS_802_11_WEP_STATUS;
typedef enum _NDIS_WAN_HEADER_FORMAT *PNDIS_WAN_HEADER_FORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *PNMS_VBXADPCMWAVEFORMAT;
typedef enum __MIDL___MIDL_itf_shobjidl_0124_0002 PROPERTYUI_FORMAT_FLAGS;
typedef YAMAHA_ADPCMWAVEFORMAT *PYAMAHA_ADPCMWAVEFORMAT;
typedef enum _RAS_AUTH_ATTRIBUTE_TYPE_ RAS_AUTH_ATTRIBUTE_TYPE;
typedef void ( *SSL_FREE_CERTIFICATE_FN)(PX509Certificate pCertificate);
typedef enum _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
typedef enum __MIDL___MIDL_itf_strmif_0109_0001 VideoCopyProtectionType;
struct _CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwFlags;void *pvExtraPolicyPara;};
struct _CERT_SYSTEM_STORE_INFO {DWORD cbSize;};
struct _DOT11_REG_DOMAIN_VALUE {ULONG uRegDomainsSupportIndex;ULONG uRegDomainsSupportValue;};
struct _EXIT_THREAD_DEBUG_INFO {DWORD dwExitCode;};
struct _IMAGE_FUNCTION_ENTRY64 {ULONGLONG StartingAddress;ULONGLONG EndingAddress;ULONGLONG EndOfPrologue;};
struct _ImageArchitectureEntry {DWORD FixupInstRVA;DWORD NewInst;};
struct _MESSAGE_RESOURCE_BLOCK {DWORD LowId;DWORD HighId;DWORD OffsetToEntries;};
struct _NDIS_PM_PACKET_PATTERN {ULONG Priority;ULONG Reserved;ULONG MaskSize;ULONG PatternOffset;ULONG PatternSize;ULONG PatternFlags;};
struct _NDIS_WAN_PROTOCOL_CAPS {ULONG Flags;ULONG Reserved;};
struct _PROXY_HTTP_INFORMATION {DWORD dwSize;DWORD dwProxyVersion;};
struct _SPC_FINANCIAL_CRITERIA {BOOL fFinancialInfoAvailable;BOOL fMeetsCriteria;};
struct __CEL_MEMTRACK_BASELINE {DWORD dwReserved;};
struct __CEL_PROCESS_TERMINATE {HANDLE hProcess;};
struct linetranslateoutput_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwDialableStringSize;DWORD dwDialableStringOffset;DWORD dwDisplayableStringSize;DWORD dwDisplayableStringOffset;DWORD dwCurrentCountry;DWORD dwDestCountry;DWORD dwTranslateResults;};
typedef enum _styleTextUnderlineStyle styleTextUnderlineStyle;
struct tagINITCOMMONCONTROLSEX {DWORD dwSize;DWORD dwICC;};
typedef enum _D3DMATERIALCOLORSOURCE D3DMATERIALCOLORSOURCE;
typedef enum _D3DVS_ADDRESSMODE_TYPE D3DVS_ADDRESSMODE_TYPE;
typedef enum _DOT11_HOP_ALGO_ADOPTED DOT11_HOP_ALGO_ADOPTED;
struct DRIVER_VER_MAJORMINOR_ {DWORD dwMajor;DWORD dwMinor;};
typedef enum tagDVD_KARAOKE_ASSIGNMENT DVD_KARAOKE_ASSIGNMENT;
typedef enum _ELEMENTNAMESPACE_FLAGS ELEMENTNAMESPACE_FLAGS;
typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef enum _HTML_PAINT_EVENT_FLAGS HTML_PAINT_EVENT_FLAGS;
typedef  PACKAGESECURITYINFO *LPCPACKAGESECURITYINFO;
typedef CSIMAADPCMWAVEFORMAT *LPCSIMAADPCMWAVEFORMAT;
typedef  USB_DRIVER_SETTINGS *LPCUSB_DRIVER_SETTINGS;
typedef G721_ADPCMWAVEFORMAT *LPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *LPG723_ADPCMWAVEFORMAT;
typedef LPDIRECTSOUNDCAPTURE *LPLPDIRECTSOUNDCAPTURE;
typedef MPEGLAYER3WAVEFORMAT *LPMPEGLAYER3WAVEFORMAT;
typedef TRUESPEECHWAVEFORMAT *LPTRUESPEECHWAVEFORMAT;
typedef enum _NDIS_802_11_POWER_MODE NDIS_802_11_POWER_MODE;
typedef enum _NDIS_802_11_WEP_STATUS NDIS_802_11_WEP_STATUS;
typedef enum _NDIS_WAN_HEADER_FORMAT NDIS_WAN_HEADER_FORMAT;
typedef enum tagNETCONUI_CONNECT_FLAGS NETCONUI_CONNECT_FLAGS;
typedef CSIMAADPCMWAVEFORMAT *NPCSIMAADPCMWAVEFORMAT;
typedef G721_ADPCMWAVEFORMAT *NPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *NPG723_ADPCMWAVEFORMAT;
typedef MPEGLAYER3WAVEFORMAT *NPMPEGLAYER3WAVEFORMAT;
typedef TRUESPEECHWAVEFORMAT *NPTRUESPEECHWAVEFORMAT;
typedef enum _OFFLOAD_INTEGRITY_ALGO OFFLOAD_INTEGRITY_ALGO;
typedef CONTRESCR10WAVEFORMAT *PCONTRESCR10WAVEFORMAT;
typedef DEV_BROADCAST_DEVNODE *PDEV_BROADCAST_DEVNODE;
typedef enum _DOT11_SMT_NOTIFY_TYPE *PDOT11_SMT_NOTIFY_TYPE;
typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
typedef enum _NDIS_802_5_RING_STATE *PNDIS_802_5_RING_STATE;
typedef SIERRAADPCMWAVEFORMAT *PSIERRAADPCMWAVEFORMAT;
typedef enum _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
typedef enum _SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;
struct _DEV_BROADCAST_DEVNODE {DWORD dbcd_size;DWORD dbcd_devicetype;DWORD dbcd_reserved;DWORD dbcd_devnode;};
struct _DMO_PARTIAL_MEDIATYPE {GUID type;GUID subtype;};
struct _IMAGE_BASE_RELOCATION {DWORD VirtualAddress;DWORD SizeOfBlock;};
struct _IP_MCAST_COUNTER_INFO {ULONG64 InMcastOctets;ULONG64 OutMcastOctets;ULONG64 InMcastPkts;ULONG64 OutMcastPkts;};
struct _NDISUIO_QUERY_BINDING {ULONG BindingIndex;ULONG DeviceNameOffset;ULONG DeviceNameLength;ULONG DeviceDescrOffset;ULONG DeviceDescrLength;};
struct _NDIS_IRDA_PACKET_INFO {ULONG ExtraBOFs;ULONG MinTurnAroundTime;};
struct _POWER_DEVICE_TIMEOUTS {DWORD ConservationIdleTime;DWORD PerformanceIdleTime;};
struct _TAPE_CREATE_PARTITION {DWORD Method;DWORD Count;DWORD Size;};
struct _UNLOAD_DLL_DEBUG_INFO {LPVOID lpBaseOfDll;};
struct _USB_COMMON_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;};
struct __CEL_THREAD_TERMINATE {HANDLE hThread;};
struct _structDVD_PROVIDER_ID {UINT8 providerID[32];};
struct _tagPROTOCOLFILTERDATA {DWORD cbSize;IInternetProtocolSink *pProtocolSink;IInternetProtocol *pProtocol;IUnknown *pUnk;DWORD dwFilterFlags;};
struct oliadpcmwaveformat_tag {WAVEFORMATEX wfx;};
typedef enum _styleListStylePosition styleListStylePosition;
struct tagCInterfaceProxyVtbl {CInterfaceProxyHeader header;void *Vtbl[];};
struct tagCStdPSFactoryBuffer { IPSFactoryBufferVtbl *lpVtbl;int RefCount; ProxyFileInfo **pProxyFileList;int Filler1;};
struct tcp_reserve_port_range {USHORT UpperRange;USHORT LowerRange;};
typedef enum _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
typedef enum tagAMTunerSignalStrength AMTunerSignalStrength;
typedef enum _AMVP_SELECT_FORMAT_BY AMVP_SELECT_FORMAT_BY;
typedef enum _9EF127759E207CC5B87425543DA97D1F AM_PROPERTY_DVDSUBPIC;
typedef enum _D3DDEBUGMONITORTOKENS D3DDEBUGMONITORTOKENS;
typedef enum _D3DTRANSFORMSTATETYPE D3DTRANSFORMSTATETYPE;
typedef enum _D3DVS_RASTOUT_OFFSETS D3DVS_RASTOUT_OFFSETS;
typedef enum DISPIDDXEFFECT DISPIDDXBOUNDEDEFFECT;
typedef enum _DOT11_SMT_NOTIFY_TYPE DOT11_SMT_NOTIFY_TYPE;
typedef enum tagDVD_SUBPICTURE_CODING DVD_SUBPICTURE_CODING;
typedef enum tagDVD_VIDEO_COMPRESSION DVD_VIDEO_COMPRESSION;
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef ProxyFileInfo ExtendedProxyFileInfo;
typedef enum _HTML_PAINT_DRAW_FLAGS HTML_PAINT_DRAW_FLAGS;
typedef enum tagHTTPMAILSPECIALFOLDER HTTPMAILSPECIALFOLDER;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef  PACKAGEINSTALLINFO *LPCPACKAGEINSTALLINFO;
typedef  USB_DEVICE_REQUEST *LPCUSB_DEVICE_REQUEST;
typedef DIGIADPCMWAVEFORMAT *LPDIGIADPCMWAVEFORMAT;
typedef LPDIRECTSOUNDBUFFER *LPLPDIRECTSOUNDBUFFER;
typedef LPDIRECTSOUNDNOTIFY *LPLPDIRECTSOUNDNOTIFY;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef ULONG NDIS_802_11_KEY_INDEX;
typedef enum _NDIS_802_5_RING_STATE NDIS_802_5_RING_STATE;
typedef DIGIADPCMWAVEFORMAT *NPDIGIADPCMWAVEFORMAT;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
typedef PACTRL_PROPERTY_ENTRYA PACTRL_PROPERTY_ENTRY;
typedef enum _CEDEVICE_POWER_STATE *PCEDEVICE_POWER_STATE;
typedef CEL_PROCESS_TERMINATE *PCEL_MEMTRACK_DETACHP;
typedef PCREDENTIAL_ATTRIBUTEA PCREDENTIAL_ATTRIBUTE;
typedef CSIMAADPCMWAVEFORMAT *PCSIMAADPCMWAVEFORMAT;
typedef  USB_DRIVER_SETTINGS *PCUSB_DRIVER_SETTINGS;
typedef PDEV_BROADCAST_VOLUME_A PDEV_BROADCAST_VOLUME;
typedef enum _0275746270D304EF855C4BFBEBB3C1E0 *PEXTENDED_NAME_FORMAT;
typedef BOOL (*PFNPROCESSDOWNLOADEND)(void);
typedef void (*PFREE_ADAPTER_CHANNEL)(PDMA_ADAPTER DmaAdapter);
typedef G721_ADPCMWAVEFORMAT *PG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *PG723_ADPCMWAVEFORMAT;
typedef enum _IO_ALLOCATION_ACTION *PIO_ALLOCATION_ACTION;
typedef MPEGLAYER3WAVEFORMAT *PMPEGLAYER3WAVEFORMAT;
typedef enum _NDIS_HARDWARE_STATUS *PNDIS_HARDWARE_STATUS;
typedef enum _NDIS_PHYSICAL_MEDIUM *PNDIS_PHYSICAL_MEDIUM;
typedef DWORD *PSECURITY_INFORMATION;
typedef TRUESPEECHWAVEFORMAT *PTRUESPEECHWAVEFORMAT;
typedef enum tagPhysicalConnectorType PhysicalConnectorType;
typedef void ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
struct SDP_ULARGE_INTEGER_16 {ULONGLONG LowPart;ULONGLONG HighPart;};
typedef enum _DF2A3E261F64EFA73115E436629DF968 SHELL_LINK_DATA_FLAGS;
typedef ULONG TR_FUNCTIONAL_ADDRESS;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0006 XML_NODEFACTORY_EVENT;
struct _ACL_SIZE_INFORMATION {DWORD AceCount;DWORD AclBytesInUse;DWORD AclBytesFree;};
struct _DEV_BROADCAST_HEADER {DWORD dbcd_size;DWORD dbcd_devicetype;DWORD dbcd_reserved;};
struct _DEV_BROADCAST_PORT_A {DWORD dbcp_size;DWORD dbcp_devicetype;DWORD dbcp_reserved;char dbcp_name[1];};
struct _DOT11_COUNTERS_ENTRY {ULONG uTransmittedFragmentCount;ULONG uMulticastTransmittedFrameCount;ULONG uFailedCount;ULONG uRetryCount;ULONG uMultipleRetryCount;ULONG uFrameDuplicateCount;ULONG uRTSSuccessCount;ULONG uRTSFailureCount;ULONG uACKFailureCount;ULONG uReceivedFragmentCount;ULONG uMulticastReceivedFrameCount;ULONG uFCSErrorCount;ULONG uTransmittedFrameCount;};
struct _GEN_GET_NETCARD_TIME {ULONGLONG ReadTime;};
struct _IMAGE_DATA_DIRECTORY {DWORD VirtualAddress;DWORD Size;};
struct _IMAGE_FUNCTION_ENTRY {DWORD StartingAddress;DWORD EndingAddress;DWORD EndOfPrologue;};
struct _IP_ADAPTER_ORDER_MAP {ULONG NumAdapters;ULONG AdapterOrder[1];};
struct _MIB_IPMCAST_BOUNDARY {DWORD dwIfIndex;DWORD dwGroupAddress;DWORD dwGroupMask;DWORD dwStatus;};
struct _SCHANNEL_ALERT_TOKEN {DWORD dwTokenType;DWORD dwAlertType;DWORD dwAlertNumber;};
struct _SecPkgCred_CacheInfo {DWORD cbBytesCommitted;DWORD cMaxCacheEntries;DWORD cEntries;DWORD cUsed;DWORD cOrphans;DWORD cExpiredOrphans;DWORD cExpiredAbortedOrphans;DWORD cHandshaking;};
typedef enum _tagTHROTTLE_ITEMS_FLAGS _THROTTLE_ITEMS_FLAGS;
struct _WCE_IRDA_DEVICE_INFO {u_char irdaDeviceID[4];char irdaDeviceName[22];u_char Reserved[2];};
struct __CEL_THREAD_PRIORITY {HANDLE hThread;int nPriority;};
struct _wireSAFEARR_DISPATCH {ULONG Size;IDispatch **apDispatch;};
struct digifixwaveformat_tag {WAVEFORMATEX wfx;};
struct digistdwaveformat_tag {WAVEFORMATEX wfx;};
struct echosc1waveformat_tag {WAVEFORMATEX wfx;};
struct lineaddressstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumInUse;DWORD dwNumActiveCalls;DWORD dwNumOnHoldCalls;DWORD dwNumOnHoldPendCalls;DWORD dwAddressFeatures;DWORD dwNumRingsNoAnswer;DWORD dwForwardNumEntries;DWORD dwForwardSize;DWORD dwForwardOffset;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;};
struct linelocationentry_tag {DWORD dwPermanentLocationID;DWORD dwLocationNameSize;DWORD dwLocationNameOffset;DWORD dwCountryCode;DWORD dwCityCodeSize;DWORD dwCityCodeOffset;DWORD dwPreferredCardID;DWORD dwLocalAccessCodeSize;DWORD dwLocalAccessCodeOffset;DWORD dwLongDistanceAccessCodeSize;DWORD dwLongDistanceAccessCodeOffset;DWORD dwTollPrefixListSize;DWORD dwTollPrefixListOffset;DWORD dwCountryID;DWORD dwOptions;DWORD dwCancelCallWaitingSize;DWORD dwCancelCallWaitingOffset;};
struct lineproviderentry_tag {DWORD dwPermanentProviderID;DWORD dwProviderFilenameSize;DWORD dwProviderFilenameOffset;};
struct linetranslatecaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumLocations;DWORD dwLocationListSize;DWORD dwLocationListOffset;DWORD dwCurrentLocationID;DWORD dwNumCards;DWORD dwCardListSize;DWORD dwCardListOffset;DWORD dwCurrentPreferredCardID;};
struct olicelpwaveformat_tag {WAVEFORMATEX wfx;};
typedef enum _styleBackgroundRepeat styleBackgroundRepeat;
struct tagOleMenuGroupWidths {LONG width[6];};
typedef ACTRL_PROPERTY_ENTRYA ACTRL_PROPERTY_ENTRY;
typedef enum _AM_ASPECT_RATIO_MODE AM_ASPECT_RATIO_MODE;
typedef enum __MIDL___MIDL_itf_strmif_0099_0001 AM_STREAM_INFO_FLAGS;
typedef enum _BEHAVIOR_EVENT_FLAGS BEHAVIOR_EVENT_FLAGS;
typedef enum _BEHAVIOR_LAYOUT_INFO BEHAVIOR_LAYOUT_INFO;
typedef enum _BEHAVIOR_LAYOUT_MODE BEHAVIOR_LAYOUT_MODE;
typedef enum _BEHAVIOR_RENDER_INFO BEHAVIOR_RENDER_INFO;
typedef enum _CEDEVICE_POWER_STATE CEDEVICE_POWER_STATE;
typedef CEL_PROCESS_TERMINATE CEL_MEMTRACK_DETACHP;
typedef CREDENTIAL_ATTRIBUTEA CREDENTIAL_ATTRIBUTE;
typedef enum _D3DTEXTUREFILTERTYPE D3DTEXTUREFILTERTYPE;
typedef DWORD DBCOMMANDPERSISTFLAG;
typedef DEV_BROADCAST_VOLUME_A DEV_BROADCAST_VOLUME;
typedef UCHAR DOT11_COUNTRY_STRING[3];
typedef enum tagDVD_KARAOKE_CONTENTS DVD_KARAOKE_CONTENTS;
typedef enum _0275746270D304EF855C4BFBEBB3C1E0 EXTENDED_NAME_FORMAT;
typedef enum _IO_ALLOCATION_ACTION IO_ALLOCATION_ACTION;
typedef enum __MIDL___MIDL__intf_0073_0002 JPM_GETFILENAME_TYPE;
struct KBDI_AUTOREPEAT_INFO {INT32 CurrentInitialDelay;INT32 CurrentRepeatRate;INT32 cInitialDelaysSelectable;INT32 cRepeatRatesSelectable;};
typedef  DSBPOSITIONNOTIFY *LPCDSBPOSITIONNOTIFY;
typedef  USB_CONFIGURATION *LPCUSB_CONFIGURATION;
typedef DIGIREALWAVEFORMAT *LPDIGIREALWAVEFORMAT;
typedef DVIADPCMWAVEFORMAT *LPDVIADPCMWAVEFORMAT;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef IMAADPCMWAVEFORMAT *LPIMAADPCMWAVEFORMAT;
typedef OLIADPCMWAVEFORMAT *LPOLIADPCMWAVEFORMAT;
typedef PACKAGEINSTALLINFO *LPPACKAGEINSTALLINFO;
typedef enum tagNCPNP_RECONFIG_LAYER NCPNP_RECONFIG_LAYER;
typedef UCHAR NDIS_802_11_RATES_EX[16];
typedef enum _NDIS_HARDWARE_STATUS NDIS_HARDWARE_STATUS;
typedef enum _NDIS_PHYSICAL_MEDIUM NDIS_PHYSICAL_MEDIUM;
typedef enum tagNETCONMGR_ENUM_FLAGS NETCONMGR_ENUM_FLAGS;
typedef enum tagNETWORK_INSTALL_TIME NETWORK_INSTALL_TIME;
typedef enum tagNETWORK_UPGRADE_TYPE NETWORK_UPGRADE_TYPE;
typedef DIGIREALWAVEFORMAT *NPDIGIREALWAVEFORMAT;
typedef DVIADPCMWAVEFORMAT *NPDVIADPCMWAVEFORMAT;
typedef IMAADPCMWAVEFORMAT *NPIMAADPCMWAVEFORMAT;
typedef OLIADPCMWAVEFORMAT *NPOLIADPCMWAVEFORMAT;
typedef enum _5FB78AF4F827B2D68807439224CA6C47 OLECMDID_REFRESHFLAG;
typedef  CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
typedef  USB_DEVICE_REQUEST *PCUSB_DEVICE_REQUEST;
typedef DIGIADPCMWAVEFORMAT *PDIGIADPCMWAVEFORMAT;
typedef enum _DOT11_KEY_DIRECTION *PDOT11_KEY_DIRECTION;
typedef BOOL (*PFN_CPD_ADD_PRIVDATA)(struct _CRYPT_PROVIDER_DATA *pProvData, struct _CRYPT_PROVIDER_PRIVDATA *pPrivData2Add);
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef DWORD PST_ACCESSCLAUSETYPE;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef void ( *RELEASECONTROLHANDLE)(HANDLE hControlHandle);
typedef DWORD SECURITY_INFORMATION;
typedef enum _SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;
typedef DWORD ( *SSL_GET_PROTOCOLS_FN)();
typedef enum _tagSYNCMGRREGISTERFLAGS SYNCMGRREGISTERFLAGS;
typedef DWORD THROTTLE_ITEMS_FLAGS;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef enum tagVideoProcAmpProperty VideoProcAmpProperty;
struct _AM_COPY_MACROVISION {ULONG MACROVISIONLevel;};
struct _CERT_DSS_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB g;};
struct _LINE_ADDRESS_STATUS {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulNumInUse;ULONG ulNumActiveCalls;ULONG ulNumOnHoldCalls;ULONG ulNumOnHoldPendCalls;ULONG ulAddressFeatures;ULONG ulNumRingsNoAnswer;ULONG ulForwardNumEntries;ULONG ulForwardSize;ULONG ulForwardOffset;ULONG ulTerminalModesSize;ULONG ulTerminalModesOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;};
struct _MIB_IPFORWARDNUMBER {DWORD dwValue;};
typedef enum _tagNOTIFICATIONMGRMODE _NOTIFICATIONMGRMODE;
struct _SBitMaskRestriction {ULONG relBMR;ULONG ulPropTag;ULONG ulMask;};
struct _USB_DRIVER_SETTINGS {DWORD dwCount;DWORD dwVendorId;DWORD dwProductId;DWORD dwReleaseNumber;DWORD dwDeviceClass;DWORD dwDeviceSubClass;DWORD dwDeviceProtocol;DWORD dwInterfaceClass;DWORD dwInterfaceSubClass;DWORD dwInterfaceProtocol;};
struct __CEL_PROCESS_DELETE {HANDLE hProcess;};
struct __CEL_THREAD_SUSPEND {HANDLE hThread;};
struct _avitimedindex_entry {DWORD dwOffset;DWORD dwSize;DWORD dwDuration;};
struct _structDVD_TEXT_ITEM {UINT8 *pTextData;UINT8 itemCode;};
struct _wireSAFEARR_UNKNOWN {ULONG Size;IUnknown **apUnknown;};
typedef enum _htmlMarqueeDirection htmlMarqueeDirection;
struct linecountryentry_tag {DWORD dwCountryID;DWORD dwCountryCode;DWORD dwNextCountryID;DWORD dwCountryNameSize;DWORD dwCountryNameOffset;DWORD dwSameAreaRuleSize;DWORD dwSameAreaRuleOffset;DWORD dwLongDistanceRuleSize;DWORD dwLongDistanceRuleOffset;DWORD dwInternationalRuleSize;DWORD dwInternationalRuleOffset;};
struct linegeneratetone_tag {DWORD dwFrequency;DWORD dwCadenceOn;DWORD dwCadenceOff;DWORD dwVolume;};
struct lineproviderlist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumProviders;DWORD dwProviderListSize;DWORD dwProviderListOffset;};
struct oligsmwaveformat_tag {WAVEFORMATEX wfx;};
struct olioprwaveformat_tag {WAVEFORMATEX wfx;};
struct olisbcwaveformat_tag {WAVEFORMATEX wfx;};
struct phoneextensionid_tag {DWORD dwExtensionID0;DWORD dwExtensionID1;DWORD dwExtensionID2;DWORD dwExtensionID3;};
typedef enum _styleTextJustifyTrim styleTextJustifyTrim;
struct tagCOMPOSITIONSTRING {DWORD dwSize;DWORD dwCompReadAttrLen;DWORD dwCompReadAttrOffset;DWORD dwCompReadClauseLen;DWORD dwCompReadClauseOffset;DWORD dwCompReadStrLen;DWORD dwCompReadStrOffset;DWORD dwCompAttrLen;DWORD dwCompAttrOffset;DWORD dwCompClauseLen;DWORD dwCompClauseOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwCursorPos;DWORD dwDeltaStart;DWORD dwResultReadClauseLen;DWORD dwResultReadClauseOffset;DWORD dwResultReadStrLen;DWORD dwResultReadStrOffset;DWORD dwResultClauseLen;DWORD dwResultClauseOffset;DWORD dwResultStrLen;DWORD dwResultStrOffset;DWORD dwPrivateSize;DWORD dwPrivateOffset;};
struct tagDVD_HMSF_TIMECODE {BYTE bHours;BYTE bMinutes;BYTE bSeconds;BYTE bFrames;};
struct tagMEASUREITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemWidth;UINT itemHeight;UINT itemData;};
typedef enum _AM_DVD_STREAM_FLAGS AM_DVD_STREAM_FLAGS;
typedef enum _tagAUTOCOMPLETEOPTIONS AUTOCOMPLETEOPTIONS;
typedef enum tagAnalogVideoStandard AnalogVideoStandard;
typedef enum _D3DMULTISAMPLE_TYPE D3DMULTISAMPLE_TYPE;
typedef enum _D3DVERTEXBLENDFLAGS D3DVERTEXBLENDFLAGS;
typedef enum _DOT11_KEY_DIRECTION DOT11_KEY_DIRECTION;
typedef enum tagDVD_KARAOKE_DOWNMIX DVD_KARAOKE_DOWNMIX;
typedef enum __MIDL___MIDL_itf_strmif_0218_0004 DVD_RELATIVE_BUTTON;
typedef enum tagDVD_SUBPICTURE_TYPE DVD_SUBPICTURE_TYPE;
typedef enum _EDITOR_NOTIFICATION EDITOR_NOTIFICATION;
typedef enum tagHTTPMAILCONTACTTYPE HTTPMAILCONTACTTYPE;
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef enum _D1D25F7E59039EE4F06FC6A15C79D0DD InternetCookieState;
typedef  PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
typedef  PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
typedef  SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
typedef DIGIFIXWAVEFORMAT *LPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *LPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *LPECHOSC1WAVEFORMAT;
typedef OLICELPWAVEFORMAT *LPOLICELPWAVEFORMAT;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
typedef enum _WSACOMPLETIONTYPE *LPWSACOMPLETIONTYPE;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef enum _MARKUP_CONTEXT_TYPE MARKUP_CONTEXT_TYPE;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0014 MLOCALOPTION_LIMITS;
typedef enum __MIDL_ITargetFrame_0001 NAVIGATEFRAME_FLAGS;
typedef ULONG NDIS_802_11_ANTENNA;
typedef ULONGLONG NDIS_802_11_KEY_RSC;
struct NDIS_BPC_LAST_ERROR {ULONG ulErrorContext;ULONG ulBPCError;ULONG ulAdapterError;ULONG ulAdapterContext;};
typedef DWORD NOTIFICATIONMGRMODE;
typedef DIGIFIXWAVEFORMAT *NPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *NPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *NPECHOSC1WAVEFORMAT;
typedef OLICELPWAVEFORMAT *NPOLICELPWAVEFORMAT;
typedef enum tagOBJECT_ATTRIB_FLAG OBJECT_ATTRIB_FLAGS;
typedef enum _OFFLOAD_OPERATION_E OFFLOAD_OPERATION_E;
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef PACTRL_ACCESS_ENTRYA PACTRL_ACCESS_ENTRY;
typedef PACTRL_CONTROL_INFOA PACTRL_CONTROL_INFO;
typedef  USB_CONFIGURATION *PCUSB_CONFIGURATION;
typedef enum _DEVICE_POWER_STATE *PDEVICE_POWER_STATE;
typedef PDEV_BROADCAST_PORT_A PDEV_BROADCAST_PORT;
typedef DIGIREALWAVEFORMAT *PDIGIREALWAVEFORMAT;
typedef enum _DOT11_OFFLOAD_TYPE *PDOT11_OFFLOAD_TYPE;
typedef enum _DOT11_UPDATE_IE_OP *PDOT11_UPDATE_IE_OP;
typedef DVIADPCMWAVEFORMAT *PDVIADPCMWAVEFORMAT;
typedef IMAADPCMWAVEFORMAT *PIMAADPCMWAVEFORMAT;
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
typedef GUID *PNOTIFICATIONCOOKIE;
typedef OLIADPCMWAVEFORMAT *POLIADPCMWAVEFORMAT;
typedef ULARGE_INTEGER PST_PROVIDER_HANDLE;
typedef enum _SYSTEM_POWER_STATE *PSYSTEM_POWER_STATE;
typedef  GUID * REFNOTIFICATIONTYPE;
typedef enum _SAVE_SEGMENTS_FLAGS SAVE_SEGMENTS_FLAGS;
typedef enum _tagSYNCMGRHANDLERFLAGS SYNCMGRHANDLERFLAGS;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
struct _AM_DVDCOPY_CHLGKEY {BYTE ChlgKey[10];BYTE Reserved[2];};
struct _AM_DVDCOPY_DISCKEY {BYTE DiscKey[2048];};
struct _CARD_SOCKET_HANDLE {UINT8 uSocket;UINT8 uFunction;};
struct _CEL_MONTECARLO_HIT {DWORD dwReturnAddr;};
struct _CERT_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;};
struct _MALLOC_FREE_STRUCT {void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);};
struct _MIB_IPMCAST_GLOBAL {DWORD dwEnable;};
struct _NDIS_CO_LINK_SPEED {ULONG Outbound;ULONG Inbound;};
struct __CEL_CRITSEC_ENTER {HANDLE hCS;HANDLE hOwnerThread;};
struct __CEL_CRITSEC_LEAVE {HANDLE hCS;HANDLE hOwnerThread;};
struct __CEL_MUTEX_RELEASE {HANDLE hMutex;};
struct __CEL_PROCESS_CLOSE {HANDLE hProcess;};
struct __CEL_SYSTEM_INVERT {HANDLE hThread;int nPriority;};
struct __CEL_THREAD_DELETE {HANDLE hThread;};
struct __CEL_THREAD_RESUME {HANDLE hThread;};
struct __CEL_THREAD_SWITCH {HANDLE hThread;};
struct _remoteMETAFILEPICT {int mm;int xExt;int yExt;userHMETAFILE *hMF;};
struct _structDVD_POS_CODE {UINT8 posCode[8];};
struct _userFLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;userSTGMEDIUM Stgmed;};
typedef enum _htmlMarqueeBehavior htmlMarqueeBehavior;
struct lineaddresscaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwLineDeviceID;DWORD dwAddressSize;DWORD dwAddressOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwAddressSharing;DWORD dwAddressStates;DWORD dwCallInfoStates;DWORD dwCallerIDFlags;DWORD dwCalledIDFlags;DWORD dwConnectedIDFlags;DWORD dwRedirectionIDFlags;DWORD dwRedirectingIDFlags;DWORD dwCallStates;DWORD dwDialToneModes;DWORD dwBusyModes;DWORD dwSpecialInfo;DWORD dwDisconnectModes;DWORD dwMaxNumActiveCalls;DWORD dwMaxNumOnHoldCalls;DWORD dwMaxNumOnHoldPendingCalls;DWORD dwMaxNumConference;DWORD dwMaxNumTransConf;DWORD dwAddrCapFlags;DWORD dwCallFeatures;DWORD dwRemoveFromConfCaps;DWORD dwRemoveFromConfState;DWORD dwTransferModes;DWORD dwParkModes;DWORD dwForwardModes;DWORD dwMaxForwardEntries;DWORD dwMaxSpecificEntries;DWORD dwMinFwdNumRings;DWORD dwMaxFwdNumRings;DWORD dwMaxCallCompletions;DWORD dwCallCompletionConds;DWORD dwCallCompletionModes;DWORD dwNumCompletionMessages;DWORD dwCompletionMsgTextEntrySize;DWORD dwCompletionMsgTextSize;DWORD dwCompletionMsgTextOffset;DWORD dwAddressFeatures;DWORD dwPredictiveAutoTransferStates;DWORD dwNumCallTreatments;DWORD dwCallTreatmentListSize;DWORD dwCallTreatmentListOffset;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;DWORD dwMaxCallDataSize;DWORD dwCallFeatures2;DWORD dwMaxNoAnswerTimeout;DWORD dwConnectedModes;DWORD dwOfferingModes;DWORD dwAvailableMediaModes;};
struct linecountrylist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumCountries;DWORD dwCountryListSize;DWORD dwCountryListOffset;};
struct lineextensionid_tag {DWORD dwExtensionID0;DWORD dwExtensionID1;DWORD dwExtensionID2;DWORD dwExtensionID3;};
struct linemonitortone_tag {DWORD dwAppSpecific;DWORD dwDuration;DWORD dwFrequency1;DWORD dwFrequency2;DWORD dwFrequency3;};
struct midiproptimediv_tag {DWORD cbStruct;DWORD dwTimeDiv;};
struct midistrmbuffver_tag {DWORD dwVersion;DWORD dwMid;DWORD dwOEMVersion;};
struct phonebuttoninfo_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwButtonMode;DWORD dwButtonFunction;DWORD dwButtonTextSize;DWORD dwButtonTextOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwButtonState;};
typedef enum _styleBorderCollapse styleBorderCollapse;
typedef enum _styleLayoutGridChar styleLayoutGridChar;
typedef enum _styleLayoutGridLine styleLayoutGridLine;
typedef enum _styleLayoutGridMode styleLayoutGridMode;
typedef enum _styleLayoutGridType styleLayoutGridType;
typedef enum _styleTextDecoration styleTextDecoration;
struct tagBUCKETCATEGORIZE {ULONG cBuckets;ULONG Distribution;};
struct tagDVD_DECODER_CAPS {DWORD dwSize;DWORD dwAudioCaps;double dFwdMaxRateVideo;double dFwdMaxRateAudio;double dFwdMaxRateSP;double dBwdMaxRateVideo;double dBwdMaxRateAudio;double dBwdMaxRateSP;DWORD dwRes1;DWORD dwRes2;DWORD dwRes3;DWORD dwRes4;};
struct tagRemHMETAFILEPICT {int mm;int xExt;int yExt;unsigned int cbData;byte data[1];};
struct tagVS_FIXEDFILEINFO {DWORD dwSignature;DWORD dwStrucVersion;DWORD dwFileVersionMS;DWORD dwFileVersionLS;DWORD dwProductVersionMS;DWORD dwProductVersionLS;DWORD dwFileFlagsMask;DWORD dwFileFlags;DWORD dwFileOS;DWORD dwFileType;DWORD dwFileSubtype;DWORD dwFileDateMS;DWORD dwFileDateLS;};
struct tag_s_RIFFWAVE_inst {BYTE bUnshiftedNote;char chFineTune;char chGain;BYTE bLowNote;BYTE bHighNote;BYTE bLowVelocity;BYTE bHighVelocity;};
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef ACTRL_ACCESS_ENTRYA ACTRL_ACCESS_ENTRY;
typedef ACTRL_CONTROL_INFOA ACTRL_CONTROL_INFO;
typedef enum _AM_DVD_GRAPH_FLAGS AM_DVD_GRAPH_FLAGS;
typedef LONG AM_MaxFullDataRate;
typedef PVOID CARD_CLIENT_HANDLE;
typedef PVOID CARD_WINDOW_HANDLE;
typedef enum _CHAR_FORMAT_FAMILY CHAR_FORMAT_FAMILY;
typedef enum __MIDL___MIDL__intf_0071_0002 CSDB_GETNAME_FLAGS;
typedef enum _D3DBACKBUFFER_TYPE D3DBACKBUFFER_TYPE;
typedef enum _D3DRENDERSTATETYPE D3DRENDERSTATETYPE;
typedef enum _DEVICE_POWER_STATE DEVICE_POWER_STATE;
typedef DEV_BROADCAST_PORT_A DEV_BROADCAST_PORT;
typedef enum _DOT11_OFFLOAD_TYPE DOT11_OFFLOAD_TYPE;
typedef enum _DOT11_UPDATE_IE_OP DOT11_UPDATE_IE_OP;
typedef enum tagDVD_AUDIO_LANG_EXT DVD_AUDIO_LANG_EXT;
typedef enum tagDVD_PARENTAL_LEVEL DVD_PARENTAL_LEVEL;
typedef enum tagDVD_TIMECODE_FLAGS DVD_TIMECODE_FLAGS;
typedef enum __MIDL___MIDL_itf_dvdnav_0000_0002 EDDVDPlaybackState;
typedef enum tagEX_PROP_INFO_FLAGS EX_PROP_INFO_FLAGS;
typedef enum _FILTER_DRAW_LAYERS FILTER_DRAW_LAYERS;
typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef enum __MIDL_ITargetFrame2_0002 FRAMEOPTIONS_FLAGS;
typedef enum tagIMAP_RESPONSE_TYPE IMAP_RESPONSE_TYPE;
typedef enum _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
typedef enum __MIDL___MIDL__intf_0073_0001 JPM_FILEINFO_FLAGS;
typedef ADPCMEWAVEFORMAT *LPADPCMEWAVEFORMAT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef LPGOPHER_FIND_DATAA LPGOPHER_FIND_DATA;
typedef GSM610WAVEFORMAT *LPGSM610WAVEFORMAT;
typedef LPINTERNET_BUFFERSA LPINTERNET_BUFFERS;
typedef OLIGSMWAVEFORMAT *LPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *LPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *LPOLISBCWAVEFORMAT;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;
typedef SONARCWAVEFORMAT *LPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *LPVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *LPWSAESETSERVICEOP;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef enum tagNETCON_CHOOSEFLAGS NETCON_CHOOSEFLAGS;
typedef GUID NOTIFICATIONCOOKIE;
typedef ADPCMEWAVEFORMAT *NPADPCMEWAVEFORMAT;
typedef GSM610WAVEFORMAT *NPGSM610WAVEFORMAT;
typedef OLIGSMWAVEFORMAT *NPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *NPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *NPOLISBCWAVEFORMAT;
typedef SONARCWAVEFORMAT *NPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *NPVOLUMEWAVEFILTER;
typedef LONG OLE_XSIZE_HIMETRIC;
typedef LONG OLE_YSIZE_HIMETRIC;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef PACTRL_ACCESS_INFOA PACTRL_ACCESS_INFO;
typedef enum _CRED_MARSHAL_TYPE *PCRED_MARSHAL_TYPE;
typedef DEV_BROADCAST_HDR *PDEV_BROADCAST_HDR;
typedef DEV_BROADCAST_NET *PDEV_BROADCAST_NET;
typedef DEV_BROADCAST_OEM *PDEV_BROADCAST_OEM;
typedef DIGIFIXWAVEFORMAT *PDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *PDIGISTDWAVEFORMAT;
typedef NTSTATUS (*PDRIVER_ADD_DEVICE)(struct _DRIVER_OBJECT *DriverObject, struct _DEVICE_OBJECT *PhysicalDeviceObject);
typedef ECHOSC1WAVEFORMAT *PECHOSC1WAVEFORMAT;
typedef void (*PKDEFERRED_ROUTINE)(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2);
typedef OLICELPWAVEFORMAT *POLICELPWAVEFORMAT;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef enum _SecDelegationType *PSecDelegationType;
typedef enum _TASK_TRIGGER_TYPE *PTASK_TRIGGER_TYPE;
typedef enum _WSACOMPLETIONTYPE *PWSACOMPLETIONTYPE;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef enum tagQualityMessageType QualityMessageType;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef enum _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
typedef GUID SUBSCRIPTIONCOOKIE;
typedef enum _tagSYNCMGRINVOKEFLAGS SYNCMGRINVOKEFLAGS;
typedef GUID SYNCSCHEDULECOOKIE;
typedef enum _SYSTEM_POWER_STATE SYSTEM_POWER_STATE;
typedef enum tagWORDREP_BREAK_TYPE WORDREP_BREAK_TYPE;
typedef void ( *WORKERCALLBACKFUNC)(PVOID);
struct _AM_DVDCOPY_BUSKEY {BYTE BusKey[5];BYTE Reserved[1];};
struct _AM_PROPERTY_SPPAL {AM_DVD_YUV sppal[16];};
struct _BTHNS_INQUIRYBLOB {ULONG LAP;unsigned char length;unsigned char num_responses;};
struct _CERT_TRUST_STATUS {DWORD dwErrorStatus;DWORD dwInfoStatus;};
struct _CMSG_RC2_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _CMSG_RC4_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _DEV_BROADCAST_HDR {DWORD dbch_size;DWORD dbch_devicetype;DWORD dbch_reserved;};
struct _DEV_BROADCAST_NET {DWORD dbcn_size;DWORD dbcn_devicetype;DWORD dbcn_reserved;DWORD dbcn_resource;DWORD dbcn_flags;};
struct _DEV_BROADCAST_OEM {DWORD dbco_size;DWORD dbco_devicetype;DWORD dbco_reserved;DWORD dbco_identifier;DWORD dbco_suppfunc;};
struct _FLAGGED_BYTE_BLOB {unsigned int fFlags;unsigned int clSize;byte abData[1];};
struct _GEN_GET_TIME_CAPS {ULONG Flags;ULONG ClockPrecision;};
struct _GRADIENT_TRIANGLE {ULONG Vertex1;ULONG Vertex2;ULONG Vertex3;};
struct _LINE_ADDRESS_CAPS {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulLineDeviceID;ULONG ulAddressSize;ULONG ulAddressOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;ULONG ulAddressSharing;ULONG ulAddressStates;ULONG ulCallInfoStates;ULONG ulCallerIDFlags;ULONG ulCalledIDFlags;ULONG ulConnectedIDFlags;ULONG ulRedirectionIDFlags;ULONG ulRedirectingIDFlags;ULONG ulCallStates;ULONG ulDialToneModes;ULONG ulBusyModes;ULONG ulSpecialInfo;ULONG ulDisconnectModes;ULONG ulMaxNumActiveCalls;ULONG ulMaxNumOnHoldCalls;ULONG ulMaxNumOnHoldPendingCalls;ULONG ulMaxNumConference;ULONG ulMaxNumTransConf;ULONG ulAddrCapFlags;ULONG ulCallFeatures;ULONG ulRemoveFromConfCaps;ULONG ulRemoveFromConfState;ULONG ulTransferModes;ULONG ulParkModes;ULONG ulForwardModes;ULONG ulMaxForwardEntries;ULONG ulMaxSpecificEntries;ULONG ulMinFwdNumRings;ULONG ulMaxFwdNumRings;ULONG ulMaxCallCompletions;ULONG ulCallCompletionConds;ULONG ulCallCompletionModes;ULONG ulNumCompletionMessages;ULONG ulCompletionMsgTextEntrySize;ULONG ulCompletionMsgTextSize;ULONG ulCompletionMsgTextOffset;ULONG ulAddressFeatures;ULONG ulPredictiveAutoTransferStates;ULONG ulNumCallTreatments;ULONG ulCallTreatmentListSize;ULONG ulCallTreatmentListOffset;ULONG ulDeviceClassesSize;ULONG ulDeviceClassesOffset;ULONG ulMaxCallDataSize;ULONG ulCallFeatures2;ULONG ulMaxNoAnswerTimeout;ULONG ulConnectedModes;ULONG ulOfferingModes;ULONG ulAvailableMediaModes;};
struct _LINE_EXTENSION_ID {ULONG ulExtensionID0;ULONG ulExtensionID1;ULONG ulExtensionID2;ULONG ulExtensionID3;};
struct _OFFLOAD_ALGO_INFO {ULONG algoIdentifier;ULONG algoKeylen;ULONG algoRounds;};
struct _SExistRestriction {ULONG ulReserved1;ULONG ulPropTag;ULONG ulReserved2;};
struct _SdpAttributeRange {USHORT minAttribute;USHORT maxAttribute;};
struct __CEL_EVENT_DELETE {HANDLE hEvent;};
struct __CEL_MUTEX_DELETE {HANDLE hMutex;};
struct __CEL_THREAD_CLOSE {HANDLE hThread;};
struct __CEL_VIRTUAL_COPY {DWORD dwDest;DWORD dwSource;DWORD dwSize;DWORD dwProtect;};
struct _avistdindex_entry {DWORD dwOffset;DWORD dwSize;};
struct _userHMETAFILEPICT {int fContext;union _userHMETAFILEPICT____MIDL_IWinTypes_0005 u;};
struct aptxwaveformat_tag {WAVEFORMATEX wfx;};
struct linedialparams_tag {DWORD dwDialPause;DWORD dwDialSpeed;DWORD dwDigitDuration;DWORD dwWaitForDialtone;};
typedef enum _styleListStyleType styleListStyleType;
typedef enum _styleTextAlignLast styleTextAlignLast;
typedef enum _styleTextTransform styleTextTransform;
typedef enum _styleVerticalAlign styleVerticalAlign;
struct tagAPPEND_PROGRESS {DWORD dwUploaded;DWORD dwTotal;};
struct tagDATABLOCKHEADER {DWORD cbSize;DWORD dwSignature;};
struct tagDBPROBABILISTIC {LONG lWeight;float flK1;float flK2;float flK3;float flB;};
struct tagRECONVERTSTRING {DWORD dwSize;DWORD dwVersion;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwTargetStrLen;DWORD dwTargetStrOffset;};
struct tagRemHENHMETAFILE {unsigned int cbData;byte data[1];};
struct tagVersionedStream {GUID guidVersion;IStream *pStream;};
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef ACTRL_ACCESS_INFOA ACTRL_ACCESS_INFO;
typedef enum tagAMTunerSubChannel AMTunerSubChannel;
typedef enum __MIDL___MIDL_itf_strmif_0087_0001 AM_FILESINK_FLAGS;
typedef enum _BEHAVIOR_RELATION BEHAVIOR_RELATION;
typedef enum _CRED_MARSHAL_TYPE CRED_MARSHAL_TYPE;
typedef enum __MIDL___MIDL__intf_0071_0001 CSDB_REMOVE_FLAGS;
typedef enum _D3DPATCHEDGESTYLE D3DPATCHEDGESTYLE;
typedef enum _D3DSTATEBLOCKTYPE D3DSTATEBLOCKTYPE;
typedef enum _D3DTEXTUREADDRESS D3DTEXTUREADDRESS;
typedef DWORD DBCOLUMNDESCFLAGS;
typedef DWORD DBINDEX_COL_ORDER;
typedef UCHAR DOT11_MAC_ADDRESS[6];
typedef enum tagDVD_AUDIO_APPMODE DVD_AUDIO_APPMODE;
typedef BYTE DVD_SubpictureATR[6];
typedef enum tagDVD_TITLE_APPMODE DVD_TITLE_APPMODE;
typedef enum _ELEMENT_ADJACENCY ELEMENT_ADJACENCY;
typedef EXCEPTION_DISPOSITION EXCEPTION_ROUTINE(struct _EXCEPTION_RECORD *ExceptionRecord, void *EstablisherFrame, struct _CONTEXT *ContextRecord, struct _DISPATCHER_CONTEXT *DispatcherContext);
typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef enum _HTML_PAINT_ZORDER HTML_PAINT_ZORDER;
typedef enum __MIDL___MIDL__intf_0000_0003 JPMINST_FILETYPES;
typedef ADPCMWAVEFORMAT *LPADPCMWAVEFORMAT;
typedef  FILECHANGEINFO *LPCFILECHANGEINFO;
typedef  FOLDERSETTINGS *LPCFOLDERSETTINGS;
typedef  PROPSHEETPAGEA *LPCPROPSHEETPAGEA;
typedef  PROPSHEETPAGEW *LPCPROPSHEETPAGEW;
typedef  REBARBANDINFOA *LPCREBARBANDINFOA;
typedef  REBARBANDINFOW *LPCREBARBANDINFOW;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef enum _5BDA056A888DC5F03790D737B7575A6D *LPINTERNET_SCHEME;
typedef MPEG1WAVEFORMAT *LPMPEG1WAVEFORMAT;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0002 MSGR_OE_Constants;
typedef enum _NAVIGATEEXOPTIONS NAVIGATEEXOPTIONS;
typedef UCHAR NDIS_802_11_RATES[8];
typedef enum tagNETCON_CHOOSETYPE NETCON_CHOOSETYPE;
typedef DWORD NOTIFICATIONFLAGS;
typedef ADPCMWAVEFORMAT *NPADPCMWAVEFORMAT;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef MPEG1WAVEFORMAT *NPMPEG1WAVEFORMAT;
typedef enum _NvFocusDirection NVFOCUS_DIRECTION;
typedef enum _OFFLOAD_CONF_ALGO OFFLOAD_CONF_ALGO;
typedef LONG OLE_XPOS_HIMETRIC;
typedef LONG OLE_YPOS_HIMETRIC;
typedef ADPCMEWAVEFORMAT *PADPCMEWAVEFORMAT;
typedef enum _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef enum _DOT11_POWER_MODE *PDOT11_POWER_MODE;
typedef enum _DOT11_RESET_TYPE *PDOT11_RESET_TYPE;
typedef enum _DOT11_ROW_STATUS *PDOT11_ROW_STATUS;
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
typedef PEXPLICIT_ACCESS_A PEXPLICIT_ACCESS_;
typedef void *(*PFN_CPD_MEM_ALLOC)(DWORD cbSize);
typedef GSM610WAVEFORMAT *PGSM610WAVEFORMAT;
typedef enum tagPictureAttributes PICTUREATTRIBUTES;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
typedef enum _NDIS_MEDIA_STATE *PNDIS_MEDIA_STATE;
typedef enum _NDIS_WAN_QUALITY *PNDIS_WAN_QUALITY;
typedef GUID *PNOTIFICATIONTYPE;
typedef enum _POINTER_SCROLLPIN POINTER_SCROLLPIN;
typedef OLIGSMWAVEFORMAT *POLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *POLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *POLISBCWAVEFORMAT;
typedef LARGE_INTEGER *PPHYSICAL_ADDRESS;
typedef enum _POWER_STATE_TYPE *PPOWER_STATE_TYPE;
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;
typedef LARGE_INTEGER *PSECURITY_INTEGER;
typedef SONARCWAVEFORMAT *PSONARCWAVEFORMAT;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef VOLUMEWAVEFILTER *PVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *PWSAESETSERVICEOP;
typedef  GUID * REFSYNCMGRERRORID;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef enum tagSCRIPTTHREADSTATE SCRIPTTHREADSTATE;
typedef enum _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
typedef enum _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
struct STORE_INFORMATION {DWORD dwStoreSize;DWORD dwFreeSize;};
typedef enum _tagSYNCMGRERRORFLAGS SYNCMGRERRORFLAGS;
typedef enum _SecDelegationType SecDelegationType;
typedef enum _TASK_TRIGGER_TYPE TASK_TRIGGER_TYPE;
typedef enum tagVideoProcAmpFlags VideoProcAmpFlags;
typedef enum _A1B0741457D0C236B08E404ADB738CBD WININET_SYNC_MODE;
typedef LPVOID WIN_TRUST_SUBJECT;
typedef enum _WSACOMPLETIONTYPE WSACOMPLETIONTYPE;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
struct _CARD_EVENT_PARMS {UINT32 uClientData;UINT32 Parm1;UINT32 Parm2;};
struct _DEVICEWINDOW_tag {DWORD dwBase;DWORD dwLen;};
struct _HTML_PAINT_XFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;};
struct _LINE_CALL_STATUS {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulCallState;ULONG ulCallStateMode;ULONG ulCallPrivilege;ULONG ulCallFeatures;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;};
struct _LINE_DIAL_PARAMS {ULONG ulDialPause;ULONG ulDialSpeed;ULONG ulDigitDuration;ULONG ulWaitForDialtone;};
struct _MIB_IPFORWARDROW {DWORD dwForwardDest;DWORD dwForwardMask;DWORD dwForwardPolicy;DWORD dwForwardNextHop;DWORD dwForwardIfIndex;DWORD dwForwardType;DWORD dwForwardProto;DWORD dwForwardAge;DWORD dwForwardNextHopAS;DWORD dwForwardMetric1;DWORD dwForwardMetric2;DWORD dwForwardMetric3;DWORD dwForwardMetric4;DWORD dwForwardMetric5;};
struct _MIB_OPAQUE_QUERY {DWORD dwVarId;DWORD rgdwVarIndex[1];};
struct _SCARD_IO_REQUEST {DWORD dwProtocol;DWORD cbPciLength;};
typedef LARGE_INTEGER _SECURITY_INTEGER;
struct _SSizeRestriction {ULONG relop;ULONG ulPropTag;ULONG cb;};
struct _WSAPROTOCOLCHAIN {int ChainLen;DWORD ChainEntries[7];};
struct __CEL_EVENT_CLOSE {HANDLE hEvent;};
struct __CEL_EVENT_PULSE {HANDLE hEvent;};
struct __CEL_EVENT_RESET {HANDLE hEvent;};
struct __CEL_MODULE_FREE {HANDLE hProcess;HANDLE hModule;};
struct __CEL_MUTEX_CLOSE {HANDLE hMutex;};
struct __CEL_SYSTEM_PAGE {DWORD dwAddress;unsigned int fReadWrite : 1;unsigned int dwReserved : 31;};
struct _userHENHMETAFILE {int fContext;union _userHENHMETAFILE____MIDL_IWinTypes_0006 u;};
typedef enum _htmlApplyLocation htmlApplyLocation;
typedef enum _htmlCaptionVAlign htmlCaptionVAlign;
typedef enum _htmlEffectAllowed htmlEffectAllowed;
struct ldap_version_info {ULONG lv_size;ULONG lv_major;ULONG lv_minor;};
struct linecardentry_tag {DWORD dwPermanentCardID;DWORD dwCardNameSize;DWORD dwCardNameOffset;DWORD dwCardNumberDigits;DWORD dwSameAreaRuleSize;DWORD dwSameAreaRuleOffset;DWORD dwLongDistanceRuleSize;DWORD dwLongDistanceRuleOffset;DWORD dwInternationalRuleSize;DWORD dwInternationalRuleOffset;DWORD dwOptions;};
struct linedevstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumOpens;DWORD dwOpenMediaModes;DWORD dwNumActiveCalls;DWORD dwNumOnHoldCalls;DWORD dwNumOnHoldPendCalls;DWORD dwLineFeatures;DWORD dwNumCallCompletions;DWORD dwRingMode;DWORD dwSignalLevel;DWORD dwBatteryLevel;DWORD dwRoamMode;DWORD dwDevStatusFlags;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwAvailableMediaModes;DWORD dwAppInfoSize;DWORD dwAppInfoOffset;};
struct midiproptempo_tag {DWORD cbStruct;DWORD dwTempo;};
typedef enum _styleRubyOverhang styleRubyOverhang;
typedef enum _styleRubyPosition styleRubyPosition;
typedef enum _styleTextOverflow styleTextOverflow;
struct tACMDRVSTREAMSIZE {DWORD cbStruct;DWORD fdwSize;DWORD cbSrcLength;DWORD cbDstLength;};
struct tagJPEGINFOHEADER {DWORD JPEGSize;DWORD JPEGProcess;DWORD JPEGColorSpaceID;DWORD JPEGBitsPerSample;DWORD JPEGHSubSampling;DWORD JPEGVSubSampling;};
struct tagNOTRESTRICTION {RESTRICTION *pRes;};
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef enum tagAMTunerEventType AMTunerEventType;
typedef enum _tagAppInfoFlags APPINFODATAFLAGS;
typedef enum _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
typedef enum __MIDL_IBindStatusCallback_0005 BINDINFO_OPTIONS;
typedef enum _CARET_VISIBILITY CARET_VISIBILITY;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef enum __MIDL___MIDL_itf_ciodm_0000_0001 CatalogStateType;
typedef enum _D3DCUBEMAP_FACES D3DCUBEMAP_FACES;
typedef enum _D3DPRIMITIVETYPE D3DPRIMITIVETYPE;
typedef enum _D3DVSD_TOKENTYPE D3DVSD_TOKENTYPE;
typedef DWORD DBCONSTRAINTTYPE;
typedef enum _DISPLAY_MOVEUNIT DISPLAY_MOVEUNIT;
typedef enum _DOT11_POWER_MODE DOT11_POWER_MODE;
typedef enum _DOT11_RESET_TYPE DOT11_RESET_TYPE;
typedef enum _DOT11_ROW_STATUS DOT11_ROW_STATUS;
typedef enum tagAspectInfoFlag DVASPECTINFOFLAG;
typedef enum tagDVD_AUDIO_FORMAT DVD_AUDIO_FORMAT;
typedef enum __MIDL___MIDL_itf_dvdnav_0115_0001 EDVDNavException;
typedef enum __MIDL_IDVDProgramChain_0005 EPGCPlaybackMode;
typedef EXPLICIT_ACCESS_A EXPLICIT_ACCESS_;
typedef void ( *FINDCONTROLCLOSE)(HANDLE hFindHandle);
typedef GOPHER_FIND_DATAA GOPHER_FIND_DATA;
typedef HANDLE HCERTCHAINENGINE;
typedef enum tagHEADERTABLEFLAGS HEADERTABLEFLAGS;
typedef enum _HTMLMaximizeFlag HTMLMaximizeFlag;
typedef enum _HTMLMinimizeFlag HTMLMinimizeFlag;
typedef enum tagHTTPMAILPROPTYPE HTTPMAILPROPTYPE;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef INTERNET_BUFFERSA INTERNET_BUFFERS;
typedef enum _CDF15D895FCCE1726F8D6F94CFB8A0EF IP_PREFIX_ORIGIN;
typedef enum _0BB80D20224D17CF959CD73271A83581 IP_SUFFIX_ORIGIN;
typedef enum __MIDL_IConfigInterleaving_0001 InterleavingMode;
typedef enum _LAYOUT_MOVE_UNIT LAYOUT_MOVE_UNIT;
typedef APTXWAVEFORMAT *LPAPTXWAVEFORMAT;
typedef  DSCBUFFERDESC *LPCDSCBUFFERDESC;
typedef  MENUITEMINFOA *LPCMENUITEMINFOA;
typedef  MENUITEMINFOW *LPCMENUITEMINFOW;
typedef  USB_INTERFACE *LPCUSB_INTERFACE;
typedef ECHOWAVEFILTER *LPECHOWAVEFILTER;
typedef FOLDERSETTINGS *LPFOLDERSETTINGS;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
typedef SV2CVW2_PARAMS *LPSV2CVW2_PARAMS;
typedef LPURL_COMPONENTSA LPURL_COMPONENTS;
typedef enum _WSAEcomparator *LPWSAECOMPARATOR;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
typedef LONG NDIS_802_11_RSSI;
typedef enum _NDIS_MEDIA_STATE NDIS_MEDIA_STATE;
typedef enum _NDIS_WAN_QUALITY NDIS_WAN_QUALITY;
typedef enum tagNETCON_MEDIATYPE NETCON_MEDIATYPE;
typedef GUID NOTIFICATIONTYPE;
typedef APTXWAVEFORMAT *NPAPTXWAVEFORMAT;
typedef ECHOWAVEFILTER *NPECHOWAVEFILTER;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef ADPCMWAVEFORMAT *PADPCMWAVEFORMAT;
typedef  CRYPT_OID_INFO *PCCRYPT_OID_INFO;
typedef  X509CERTRESULT *PCX509CERTRESULT;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef enum _DOT11_SCAN_TYPE *PDOT11_SCAN_TYPE;
typedef enum _DOT11_TEMP_TYPE *PDOT11_TEMP_TYPE;
typedef NTSTATUS (*PDRIVER_DISPATCH)(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp);
typedef PEXPLICIT_ACCESSA PEXPLICIT_ACCESS;
typedef BOOL (*PFN_AUTORAS_DIAL)(void);
typedef BOOL (*PFN_FREEDEFUSAGE)( char *pszUsageOID, struct _CRYPT_PROVIDER_DEFUSAGE *psDefUsage);
typedef void ( *PFN_FreeHeapInfo)(LPVOID pHeapInfo);
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
typedef LARGE_INTEGER PHYSICAL_ADDRESS;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef MPEG1WAVEFORMAT *PMPEG1WAVEFORMAT;
typedef enum _POWER_STATE_TYPE POWER_STATE_TYPE;
typedef void (*PPUT_DMA_ADAPTER)(PDMA_ADAPTER DmaAdapter);
typedef enum __MIDL___MIDL_itf_shobjidl_0124_0001 PROPERTYUI_FLAGS;
typedef RTL_SPLAY_LINKS *PRTL_SPLAY_LINKS;
typedef TIMECODE_SAMPLE *PTIMECODE_SAMPLE;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef enum tagQACONTAINERFLAGS QACONTAINERFLAGS;
typedef  GUID * REFSYNCMGRITEMID;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef void * RPC_CLIENT_ALLOC(size_t Size);
typedef LARGE_INTEGER SECURITY_INTEGER;
typedef WORD SOURCE_TEXT_ATTR;
typedef enum _tagSYNCMGRITEMFLAGS SYNCMGRITEMFLAGS;
typedef ULONG TR_GROUP_ADDRESS;
typedef ULONG VoIPManagerState;
typedef DWORD WIN32_ERROR_CODE;
typedef enum _WSAESETSERVICEOP WSAESETSERVICEOP;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0002 XML_NODE_SUBTYPE;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0005 XML_PARSER_FLAGS;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0004 XML_PARSER_STATE;
struct _CO_TAPI_CM_CAPS {ULONG ulCoTapiVersion;ULONG ulNumLines;ULONG ulFlags;};
struct _DTBLRADIOBUTTON {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulcButtons;ULONG ulPropTag;int lReturnValue;};
struct _LINE_DEV_STATUS {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulNumOpens;ULONG ulOpenMediaModes;ULONG ulNumActiveCalls;ULONG ulNumOnHoldCalls;ULONG ulNumOnHoldPendCalls;ULONG ulLineFeatures;ULONG ulNumCallCompletions;ULONG ulRingMode;ULONG ulSignalLevel;ULONG ulBatteryLevel;ULONG ulRoamMode;ULONG ulDevStatusFlags;ULONG ulTerminalModesSize;ULONG ulTerminalModesOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;};
struct _MIBICMPSTATS_EX {DWORD dwMsgs;DWORD dwErrors;DWORD rgdwTypeCount[256];};
struct _MIB_IPMCAST_OIF {DWORD dwOutIfIndex;DWORD dwNextHopAddr;DWORD dwReserved;DWORD dwReserved1;};
struct _PACKEDEVENTINFO {DWORD ulSize;DWORD ulNumEventsForLogFile;DWORD ulOffsets[];};
struct _RemotableHandle {int fContext;union _RemotableHandle____MIDL_IWinTypes_0009 u;};
struct __CEL_LOG_MARKER {DWORD dwFrequency;DWORD dwDefaultQuantum;DWORD dwVersion;};
struct __CEL_SEM_DELETE {HANDLE hSem;};
struct __CEL_SYSTEM_TLB {DWORD dwCount;};
typedef enum _htmlCaptionAlign htmlCaptionAlign;
typedef enum _htmlControlAlign htmlControlAlign;
typedef enum _htmlPersistState htmlPersistState;
struct linecalllist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwCallsNumEntries;DWORD dwCallsSize;DWORD dwCallsOffset;};
struct linetermcaps_tag {DWORD dwTermDev;DWORD dwTermModes;DWORD dwTermSharing;};
struct phonemessage_tag {DWORD hDevice;DWORD dwMessageID;DWORD dwCallbackInstance;DWORD dwParam1;DWORD dwParam2;DWORD dwParam3;};
typedef enum _styleAccelerator styleAccelerator;
typedef enum _styleBorderStyle styleBorderStyle;
typedef enum _styleBorderWidth styleBorderWidth;
typedef enum _styleFontVariant styleFontVariant;
typedef enum _styleTableLayout styleTableLayout;
typedef enum _styleTextJustify styleTextJustify;
typedef enum _styleWritingMode styleWritingMode;
struct tagCANDIDATEINFO {DWORD dwSize;DWORD dwCount;DWORD dwOffset[32];DWORD dwPrivateSize;DWORD dwPrivateOffset;};
struct tagCANDIDATELIST {DWORD dwSize;DWORD dwStyle;DWORD dwCount;DWORD dwSelection;DWORD dwPageStart;DWORD dwPageSize;DWORD dwOffset[1];};
struct tagFONTSIGNATURE {DWORD fsUsb[4];DWORD fsCsb[2];};
struct tagNMLVCACHEHINT {NMHDR hdr;int iFrom;int iTo;};
struct tagNNTPLISTGROUP {DWORD cArticles;DWORD *rgArticles;};
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef enum tagAMTunerModeType AMTunerModeType;
typedef enum _B3BBE9873D99521DD98BD039DB6D363A AM_DVDCOPYSTATE;
typedef enum _7A041642E677561B10EFDE79481847F2 AM_PROPERTY_AC3;
typedef enum _CARET_DIRECTION CARET_DIRECTION;
typedef  CRYPT_OID_INFO CCRYPT_OID_INFO;
typedef enum tagCHUNK_BREAKTYPE CHUNK_BREAKTYPE;
typedef enum __MIDL___MIDL_itf_strmif_0106_0001 CompressionCaps;
typedef enum _D3DRESOURCETYPE D3DRESOURCETYPE;
typedef DWORD DBACCESSORFLAGS;
typedef DWORD DBBINDURLSTATUS;
typedef DWORD DBDEFERRABILITY;
typedef DWORD DBPENDINGSTATUS;
typedef DWORD DBPOSITIONFLAGS;
typedef DWORD DBROWCHANGEKIND;
typedef enum _DISPLAY_GRAVITY DISPLAY_GRAVITY;
typedef enum tagDOCHOSTUIDBLCLK DOCHOSTUIDBLCLK;
typedef enum _DOT11_SCAN_TYPE DOT11_SCAN_TYPE;
typedef enum _DOT11_TEMP_TYPE DOT11_TEMP_TYPE;
typedef enum __MIDL___MIDL_itf_strmif_0218_0003 DVD_OPTION_FLAG;
typedef DWORD EXECUTION_STATE;
typedef EXPLICIT_ACCESSA EXPLICIT_ACCESS;
typedef enum __MIDL_ITargetFrame2_0001 FINDFRAME_FLAGS;
typedef enum _HTMLBorderStyle HTMLBorderStyle;
typedef enum _HTMLCaptionFlag HTMLCaptionFlag;
typedef enum _HTMLSysMenuFlag HTMLSysMenuFlag;
typedef enum _HTMLWindowState HTMLWindowState;
typedef enum tagHTTPMAILCOMMAND HTTPMAILCOMMAND;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef enum _INSTALLSPECTYPE INSTALLSPECTYPE;
typedef enum _5BDA056A888DC5F03790D737B7575A6D INTERNET_SCHEME;
typedef DWORD ITHUMBPRINTTYPE;
typedef enum _KDPC_IMPORTANCE KDPC_IMPORTANCE;
typedef UINT32 KEY_STATE_FLAGS;
typedef CCHAR KPROCESSOR_MODE;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef  DSBUFFERDESC *LPCDSBUFFERDESC;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef  MIMEPROPINFO *LPCMIMEPROPINFO;
typedef  SHCOLUMNDATA *LPCSHCOLUMNDATA;
typedef  SHCOLUMNINFO *LPCSHCOLUMNINFO;
typedef  SHCOLUMNINIT *LPCSHCOLUMNINIT;
typedef  USB_ENDPOINT *LPCUSB_ENDPOINT;
typedef  WAVEFORMATEX *LPCWAVEFORMATEX;
typedef DDPIXELFORMAT *LPDDPIXELFORMAT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
typedef LPDIRECTSOUND *LPLPDIRECTSOUND;
typedef DWORD *LPMONTHDAYSTATE;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef PCMWAVEFORMAT *LPPCMWAVEFORMAT;
typedef DWORD MEMBERINFOFLAGS;
typedef enum __MIDL_IMonikerProp_0001 MONIKERPROPERTY;
typedef enum _MOVEUNIT_ACTION MOVEUNIT_ACTION;
struct NDIS_BPC_STATUS {ULONG ulStatusCategory;ULONG ulStatusType;ULONG ulcbStatus;ULONG rgulStatus;};
struct NLED_COUNT_INFO {UINT cLeds;};
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef PCMWAVEFORMAT *NPPCMWAVEFORMAT;
typedef APTXWAVEFORMAT *PAPTXWAVEFORMAT;
typedef PCREDUI_BALLOONA PCREDUI_BALLOON;
typedef  USB_INTERFACE *PCUSB_INTERFACE;
typedef enum _DOT11_BSS_TYPE *PDOT11_BSS_TYPE;
typedef enum _DOT11_PHY_TYPE *PDOT11_PHY_TYPE;
typedef ECHOWAVEFILTER *PECHOWAVEFILTER;
typedef FOLDERSETTINGS *PFOLDERSETTINGS;
typedef enum _INTERFACE_TYPE *PINTERFACE_TYPE;
typedef  MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef enum _NDIS_BPC_ERROR *PNDIS_BPC_ERROR;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
typedef enum tagPOINTERINACTIVE POINTERINACTIVE;
typedef enum _POINTER_GRAVITY POINTER_GRAVITY;
typedef WORD PRINTEROP_FLAGS;
typedef enum tagPROP_INFO_FLAGS PROP_INFO_FLAGS;
typedef enum __MIDL_IProxyInfo_0001 PROXYINFOOPTION;
typedef RTL_BITMAP_RUN *PRTL_BITMAP_RUN;
typedef PTRUSTEE_ACCESSA PTRUSTEE_ACCESS;
typedef enum _tagPublishedAppInfoFlags PUBAPPINFOFLAGS;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef enum _WSAEcomparator *PWSAECOMPARATOR;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef enum _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
typedef enum tagSCRIPTFONTCONTF SCRIPTFONTCONTF;
typedef LONG SECURITY_STATUS;
typedef enum _4218CD2CD980A290FF820393F4F33E3B SHREGENUM_FLAGS;
typedef enum _tagSYNCMGRLOGLEVEL SYNCMGRLOGLEVEL;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
struct _CO_AF_TAPI_SAP {ULONG ulLineID;ULONG ulAddressID;ULONG ulMediaModes;};
struct _CRYPT_URL_INFO {DWORD cbSize;DWORD dwSyncDeltaTime;DWORD cGroup;DWORD *rgcGroupEntry;};
struct _D3DCLIPSTATUS8 {DWORD ClipUnion;DWORD ClipIntersection;};
struct _D3DLINEPATTERN {WORD wRepeatFactor;WORD wLinePattern;};
struct _D3DLOCKED_RECT {INT Pitch;void *pBits;};
struct _DDKPCIINFO_tag {DWORD cbSize;DWORD dwDeviceNumber;DWORD dwFunctionNumber;DWORD dwInstanceIndex;DWORD dwWhichIds;DWORD idVals[8];};
struct _DLLVERSIONINFO {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformID;};
struct _MIB_ROUTESTATE {BOOL bRoutesSetToStack;};
struct _PPP_EAP_PACKET {BYTE Code;BYTE Id;BYTE Length[2];BYTE Data[1];};
struct _RTL_BITMAP_RUN {ULONG StartingIndex;ULONG NumberOfBits;};
struct _SCONTEXT_QUEUE {unsigned int NumberOfObjects;NDR_SCONTEXT *ArrayOfObjects;};
struct _WL_ASSOCIATION {DWORD dwReserved;};
struct __CEL_DATA_LOSS {DWORD dwBytes;};
struct __CEL_EVENT_SET {HANDLE hEvent;};
struct __CEL_SEM_CLOSE {HANDLE hSem;};
typedef enum __MIDL___MIDL_itf_mssoap_0149_0003 enEncodingStyle;
struct lineforward_tag {DWORD dwForwardMode;DWORD dwCallerAddressSize;DWORD dwCallerAddressOffset;DWORD dwDestCountryCode;DWORD dwDestAddressSize;DWORD dwDestAddressOffset;};
struct linemessage_tag {DWORD hDevice;DWORD dwMessageID;DWORD dwCallbackInstance;DWORD dwParam1;DWORD dwParam2;DWORD dwParam3;};
struct phonestatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwStatusFlags;DWORD dwNumOwners;DWORD dwNumMonitors;DWORD dwRingMode;DWORD dwRingVolume;DWORD dwHandsetHookSwitchMode;DWORD dwHandsetVolume;DWORD dwHandsetGain;DWORD dwSpeakerHookSwitchMode;DWORD dwSpeakerVolume;DWORD dwSpeakerGain;DWORD dwHeadsetHookSwitchMode;DWORD dwHeadsetVolume;DWORD dwHeadsetGain;DWORD dwDisplaySize;DWORD dwDisplayOffset;DWORD dwLampModesSize;DWORD dwLampModesOffset;DWORD dwOwnerNameSize;DWORD dwOwnerNameOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwPhoneFeatures;};
typedef enum _styleDataRepeat styleDataRepeat;
typedef enum _styleFontWeight styleFontWeight;
typedef enum _styleLayoutFlow styleLayoutFlow;
typedef enum _styleStyleFloat styleStyleFloat;
typedef enum _styleTextEffect styleTextEffect;
typedef enum _styleVisibility styleVisibility;
typedef enum _styleWhiteSpace styleWhiteSpace;
struct tagFILTERREGION {ULONG idChunk;ULONG cwcStart;ULONG cwcExtent;};
struct tagPALETTEENTRY {BYTE peRed;BYTE peGreen;BYTE peBlue;BYTE peFlags;};
typedef enum __MIDL___MIDL_itf_strmif_0115_0001 AMPROPERTY_PIN;
typedef enum _tagAppActionFlags APPACTIONFLAGS;
typedef enum _BEHAVIOR_EVENT BEHAVIOR_EVENT;
typedef CREDUI_BALLOONA CREDUI_BALLOON;
typedef enum _D3DZBUFFERTYPE D3DZBUFFERTYPE;
typedef DWORD DBCOMMANDREUSE;
typedef DWORD DBCONVERTFLAGS;
typedef DWORD DBRESOURCEKIND;
typedef AM_MEDIA_TYPE DMO_MEDIA_TYPE;
typedef enum _DOT11_BSS_TYPE DOT11_BSS_TYPE;
typedef enum _DOT11_PHY_TYPE DOT11_PHY_TYPE;
typedef enum __MIDL_IDifferencing_0001 DifferenceType;
typedef enum __MIDL_IDVDDomain_0001 EDVDDomainType;
typedef enum _ELEMENT_CORNER ELEMENT_CORNER;
typedef enum _ELEMENT_TAG_ID ELEMENT_TAG_ID;
typedef enum _FINDTEXT_FLAGS FINDTEXT_FLAGS;
typedef enum __MIDL___MIDL_itf_shobjidl_0117_0002 FOLDERVIEWMODE;
typedef enum __MIDL_IHtmlLoadOptions_0001 HTMLLOADOPTION;
typedef enum tagIBSCPENDINGMSG IBSCPENDINGMSG;
typedef enum _1D78DD8871C05E6FD7D3820402F49BC1 IF_OPER_STATUS;
typedef DWORD IMAP_MBOXFLAGS;
typedef enum _INTERFACE_TYPE INTERFACE_TYPE;
typedef enum _LINE_DIRECTION LINE_DIRECTION;
typedef enum _LOCK_OPERATION LOCK_OPERATION;
typedef ADPCMCOEFSET *LPADPCMCOEFSET;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef  PAINTSTRUCT *LPCPAINTSTRUCT;
typedef  PROPVARIANT *LPCPROPVARIANT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef DDALPHABLTFX *LPDDALPHABLTFX;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef HACMDRIVERID *LPHACMDRIVERID;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
typedef LPREGISTERWORDA LPREGISTERWORD;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0017 MSERVICE_FLAGS;
typedef enum _NDIS_BPC_ERROR NDIS_BPC_ERROR;
typedef DWORD ( *NEEDREBOOTINIT)();
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef ADPCMCOEFSET *NPADPCMCOEFSET;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef enum tagOBO_TOKEN_TYPE OBO_TOKEN_TYPE;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef ULONG *PACCESS_RIGHTS;
typedef enum _BUS_DATA_TYPE *PBUS_DATA_TYPE;
typedef  CERT_CONTEXT *PCCERT_CONTEXT;
typedef  USB_ENDPOINT *PCUSB_ENDPOINT;
typedef void *( *PFN_CMSG_ALLOC)(size_t cb);
typedef void ( *PFN_CRYPT_FREE)(LPVOID pv);
typedef ULONG *PINHERIT_FLAGS;
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef PCMWAVEFORMAT *PPCMWAVEFORMAT;
typedef enum _PPP_EAP_ACTION PPP_EAP_ACTION;
typedef enum tagPROPPAGESTATUS PROPPAGESTATUS;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
typedef DWORD PST_ACCESSMODE;
typedef GUID PST_PROVIDERID;
typedef ULONG Priority_802_3;
typedef LONGLONG REFERENCE_TIME;
typedef DWORD SCRIPTTHREADID;
typedef void ( *SEC_GET_KEY_FN)(void *Arg, void *Principal, unsigned int KeyVer, void **Key, SECURITY_STATUS *Status);
typedef enum _SELECTION_TYPE SELECTION_TYPE;
typedef enum _SE_OBJECT_TYPE SE_OBJECT_TYPE;
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef enum _6FB945646DCDC979B45A0864DF90F90A SHREGDEL_FLAGS;
typedef GUID SYNCMGRERRORID;
typedef TRUSTEE_ACCESSA TRUSTEE_ACCESS;
typedef enum tagTunerInputType TunerInputType;
typedef URL_COMPONENTSA URL_COMPONENTS;
typedef enum __MIDL___MIDL_itf_strmif_0218_0001 VALID_UOP_FLAG;
typedef enum _WSAEcomparator WSAECOMPARATOR;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0003 XML_ERROR_CODE;
struct _BYTE_SIZEDARR {unsigned int clSize;byte *pData;};
struct _D3DLOCKED_BOX {INT RowPitch;INT SlicePitch;void *pBits;};
struct _DTBLMVLISTBOX {ULONG ulFlags;ULONG ulMVPropTag;};
struct _GDI_NONREMOTE {int fContext;union _GDI_NONREMOTE____MIDL_IWinTypes_0002 u;};
struct _GRADIENT_RECT {ULONG UpperLeft;ULONG LowerRight;};
struct _MIB_IPADDRROW {DWORD dwAddr;DWORD dwIndex;DWORD dwMask;DWORD dwBCastAddr;DWORD dwReasmSize;unsigned short unused1;unsigned short wType;};
struct _PCI_RSRC_LIST {DWORD Num;DWORD Reg[6];};
struct _SAppTimeArray {ULONG cValues;double *lpat;};
struct _SPropTagArray {ULONG cValues;ULONG aulPropTag[1];};
struct _SecBufferDesc {unsigned int ulVersion;unsigned int cBuffers;PSecBuffer pBuffers;};
struct _userHMETAFILE {int fContext;union _userHMETAFILE____MIDL_IWinTypes_0004 u;};
typedef enum _frameScrolling frameScrolling;
typedef enum _htmlBlockAlign htmlBlockAlign;
typedef enum _htmlCellVAlign htmlCellVAlign;
typedef enum _htmlCompatMode htmlCompatMode;
typedef enum _htmlDesignMode htmlDesignMode;
typedef enum _htmlDropEffect htmlDropEffect;
typedef enum _htmlReadyState htmlReadyState;
typedef enum _htmlSelectType htmlSelectType;
typedef enum _styleFontStyle styleFontStyle;
typedef enum _styleLineBreak styleLineBreak;
typedef enum _stylePageBreak stylePageBreak;
typedef enum _styleRubyAlign styleRubyAlign;
typedef enum _styleWordBreak styleWordBreak;
struct tagBODYOFFSETS {DWORD cbBoundaryStart;DWORD cbHeaderStart;DWORD cbBodyStart;DWORD cbBodyEnd;};
struct tagCONNECTDATA {IUnknown *pUnk;DWORD dwCookie;};
struct tagComCallData {DWORD dwDispid;DWORD dwReserved;void *pUserDefined;};
struct tagHANDLETABLE {HGDIOBJ objectHandle[1];};
struct tagRemHPALETTE {unsigned int cbData;byte data[1];};
struct tagSTYLESTRUCT {DWORD styleOld;DWORD styleNew;};
typedef enum _textDecoration textDecoration;
struct wavefilter_tag {DWORD cbStruct;DWORD dwFilterTag;DWORD fdwFilter;DWORD dwReserved[5];};
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef ULONG ACCESS_RIGHTS;
typedef enum tagACTIVATEFLAGS ACTIVATEFLAGS;
typedef enum tagADDRESSFORMAT ADDRESSFORMAT;
typedef enum tagARTICLEIDTYPE ARTICLEIDTYPE;
typedef enum _BUS_DATA_TYPE BUS_DATA_TYPE;
typedef enum _CARET_GRAVITY CARET_GRAVITY;
typedef enum tagCSETAPPLYTYPE CSETAPPLYTYPE;
typedef enum _D3DSWAPEFFECT D3DSWAPEFFECT;
typedef DWORD DBASYNCHPHASE;
typedef DWORD DBBINDURLFLAG;
typedef DWORD DBCOLUMNFLAGS;
typedef DWORD DBDELETEFLAGS;
typedef DWORD DBPROPOPTIONS;
typedef DWORD DBWATCHNOTIFY;
typedef enum tagDEFAULT_PAGES DEFAULT_PAGES;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef enum _DISPLAY_BREAK DISPLAY_BREAK;
typedef enum tagDOCHOSTUIFLAG DOCHOSTUIFLAG;
typedef enum tagDOCHOSTUITYPE DOCHOSTUITYPE;
typedef DWORD DRV_REQUESTID;
typedef enum __MIDL___MIDL_itf_strmif_0218_0002 DVD_CMD_FLAGS;
typedef enum tagDVD_DISC_SIDE DVD_DISC_SIDE;
typedef enum tagDVD_FRAMERATE DVD_FRAMERATE;
typedef enum _FW_DIRECTIONS FW_DIRECTIONS;
typedef enum _FW_RULE_FLAGS FW_RULE_FLAGS;
typedef enum _FW_RULE_MASKS FW_RULE_MASKS;
typedef enum _HTMLDlgBorder HTMLDlgBorder;
typedef enum _HTMLDlgCenter HTMLDlgCenter;
typedef enum tagIFILTER_FLAGS IFILTER_FLAGS;
typedef DWORD IMAP_MSGFLAGS;
typedef ULONG INHERIT_FLAGS;
typedef WORD INTERNET_PORT;
typedef enum __MIDL___MIDL__intf_0000_0002 JPMINST_FLAGS;
typedef  ITEMIDLIST *LPCITEMIDLIST;
typedef  SCROLLINFO *LPCSCROLLINFO;
typedef  SHCOLUMNID *LPCSHCOLUMNID;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef  USB_DEVICE *LPCUSB_DEVICE;
typedef  WAVEFORMAT *LPCWAVEFORMAT;
typedef  WINDOWDATA *LPCWINDOWDATA;
typedef DDGAMMARAMP *LPDDGAMMARAMP;
typedef DDOVERLAYFX *LPDDOVERLAYFX;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef enum _INBOX_EVENT *LPINBOX_EVENT;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
typedef LPNETRESOURCEA LPNETRESOURCE;
typedef PAINTSTRUCT *LPPAINTSTRUCT;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef enum tagMIMEPROPFLAGS MIMEPROPFLAGS;
typedef DWORD MONTHDAYSTATE;
typedef enum _MP_CURVE_TYPE MP_CURVE_TYPE;
typedef tagMQPROPVARIANT MQPROPVARIANT;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0011 MSGRConstants;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0006 MUPDATECHOICE;
typedef enum tagNETCON_STATUS NETCON_STATUS;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef enum tagOLEGETMONIKER OLEGETMONIKER;
typedef enum tagOLEVERBATTRIB OLEVERBATTRIB;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef PVOID PACCESS_TOKEN;
typedef PACTRL_ACCESSA PACTRL_ACCESS;
typedef ADPCMCOEFSET *PADPCMCOEFSET;
typedef  CRL_CONTEXT *PCCRL_CONTEXT;
typedef  CTL_CONTEXT *PCCTL_CONTEXT;
typedef  PAINTSTRUCT *PCPAINTSTRUCT;
typedef HACMDRIVERID *PHACMDRIVERID;
typedef void ( *PHONECALLBACK)(DWORD hDevice, DWORD dwMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
typedef enum _PinDirection PIN_DIRECTION;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef void (*PPNP_CALLBACK)(PVOID Context);
typedef QUOTA_LIMITS *PQUOTA_LIMITS;
typedef PREGISTERWORDA PREGISTERWORD;
typedef enum _tagPROPBAG2_TYPE PROPBAG2_TYPE;
typedef enum _SID_NAME_USE *PSID_NAME_USE;
typedef enum _2E4D6E69AC5B406EE64EF4CFE7610CC3 Q2931_IE_TYPE;
typedef GUID SYNCMGRITEMID;
typedef enum _tagSYNCMGRSTATUS SYNCMGRSTATUS;
typedef TEXTMETRICW TEXTMETRICOLE;
typedef DWORD_BLOB *UP_DWORD_BLOB;
typedef enum tagUSERCLASSTYPE USERCLASSTYPE;
typedef enum __MIDL___MIDL_itf_xmlparser_0000_0001 XML_NODE_TYPE;
struct _BPC_FILETIME {ULONG dwLowDateTime;ULONG dwHighDateTime;};
struct _CEL_GDI_INFO {DWORD dwGDIOp;DWORD dwTimeSpent;DWORD dwContext;DWORD dwContext2;DWORD dwContext3;DWORD dwContext4;};
struct _COMMTIMEOUTS {DWORD ReadIntervalTimeout;DWORD ReadTotalTimeoutMultiplier;DWORD ReadTotalTimeoutConstant;DWORD WriteTotalTimeoutMultiplier;DWORD WriteTotalTimeoutConstant;};
struct _D3DGAMMARAMP {WORD red[256];WORD green[256];WORD blue[256];};
struct _D3DMATERIAL8 {D3DCOLORVALUE Diffuse;D3DCOLORVALUE Ambient;D3DCOLORVALUE Specular;D3DCOLORVALUE Emissive;float Power;};
struct _D3DVIEWPORT8 {DWORD X;DWORD Y;DWORD Width;DWORD Height;float MinZ;float MaxZ;};
struct _DTBLCHECKBOX {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulPRPropertyName;};
struct _DTBLCOMBOBOX {ULONG ulbLpszCharsAllowed;ULONG ulFlags;ULONG ulNumCharsAllowed;ULONG ulPRPropertyName;ULONG ulPRTableName;};
struct _DTBLGROUPBOX {ULONG ulbLpszLabel;ULONG ulFlags;};
struct _MEMORYSTATUS {DWORD dwLength;DWORD dwMemoryLoad;DWORD dwTotalPhys;DWORD dwAvailPhys;DWORD dwTotalPageFile;DWORD dwAvailPageFile;DWORD dwTotalVirtual;DWORD dwAvailVirtual;};
struct _MIBICMPSTATS {DWORD dwMsgs;DWORD dwErrors;DWORD dwDestUnreachs;DWORD dwTimeExcds;DWORD dwParmProbs;DWORD dwSrcQuenchs;DWORD dwRedirects;DWORD dwEchos;DWORD dwEchoReps;DWORD dwTimestamps;DWORD dwTimestampReps;DWORD dwAddrMasks;DWORD dwAddrMaskReps;};
struct _MIB_IFNUMBER {DWORD dwValue;};
struct _MIB_PROXYARP {DWORD dwAddress;DWORD dwMask;DWORD dwIfIndex;};
struct _MIB_TCPSTATS {DWORD dwRtoAlgorithm;DWORD dwRtoMin;DWORD dwRtoMax;DWORD dwMaxConn;DWORD dwActiveOpens;DWORD dwPassiveOpens;DWORD dwAttemptFails;DWORD dwEstabResets;DWORD dwCurrEstab;DWORD dwInSegs;DWORD dwOutSegs;DWORD dwRetransSegs;DWORD dwInErrs;DWORD dwOutRsts;DWORD dwNumConns;};
struct _MIB_UDPSTATS {DWORD dwInDatagrams;DWORD dwNoPorts;DWORD dwInErrors;DWORD dwOutDatagrams;DWORD dwNumAddrs;};
typedef enum _tagNOTFSINKMODE _NOTFSINKMODE;
struct _SDoubleArray {ULONG cValues;double *lpdbl;};
struct _SHELLDETAILS {int fmt;int cxChar;STRRET str;};
struct _userHPALETTE {int fContext;union _userHPALETTE____MIDL_IWinTypes_0008 u;};
typedef enum _htmlAdjacency htmlAdjacency;
typedef enum _htmlCellAlign htmlCellAlign;
typedef enum _htmlComponent htmlComponent;
typedef enum _htmlDirection htmlDirection;
typedef enum _htmlEndPoints htmlEndPoints;
typedef enum _htmlGlyphMode htmlGlyphMode;
typedef enum _htmlSelection htmlSelection;
struct midievent_tag {DWORD dwDeltaTime;DWORD dwStreamID;DWORD dwEvent;DWORD dwParms[1];};
typedef enum __MIDL___MIDL_itf_mssoap_0149_0001 smIsInputEnum;
typedef enum _styleFontSize styleFontSize;
typedef enum _styleOverflow styleOverflow;
typedef enum _stylePosition stylePosition;
typedef enum _styleWordWrap styleWordWrap;
struct tagCSPLATFORM {DWORD dwPlatformId;DWORD dwVersionHi;DWORD dwVersionLo;DWORD dwProcessorArch;};
struct tagDB_NUMERIC {BYTE precision;BYTE scale;BYTE sign;BYTE val[16];};
struct tagHEAPLIST32 {DWORD dwSize;DWORD th32ProcessID;DWORD th32HeapID;DWORD dwFlags;};
struct tagRemHBITMAP {unsigned int cbData;byte data[1];};
struct tagRemHGLOBAL {int fNullHGlobal;unsigned int cbData;byte data[1];};
struct tagSCROLLINFO {UINT cbSize;UINT fMask;int nMin;int nMax;UINT nPage;int nPos;int nTrackPos;};
struct tagSMTPSTREAM {DWORD cbIncrement;DWORD cbCurrent;DWORD cbTotal;};
struct tcp_keepalive {u_long onoff;u_long keepalivetime;u_long keepaliveinterval;};
struct varstring_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwStringFormat;DWORD dwStringSize;DWORD dwStringOffset;};
typedef userHMETAFILE *wireHMETAFILE;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef enum _tagACENUMOPTION ACENUMOPTION;
typedef ACTRL_ACCESSA ACTRL_ACCESS;
typedef enum tagBODYLOCATION BODYLOCATION;
typedef RECT BORDERWIDTHS;
typedef enum tagCERTNAMETYPE CERTNAMETYPE;
typedef enum _COORD_SYSTEM COORD_SYSTEM;
typedef CREATESTRUCTA CREATESTRUCT;
typedef enum _D3DBASISTYPE D3DBASISTYPE;
typedef enum _D3DLIGHTTYPE D3DLIGHTTYPE;
typedef enum _D3DORDERTYPE D3DORDERTYPE;
typedef enum _D3DSHADEMODE D3DSHADEMODE;
typedef enum _D3DSTENCILOP D3DSTENCILOP;
typedef enum _D3DTEXTUREOP D3DTEXTUREOP;
typedef DWORD DBBINDSTATUS;
typedef ULONG DBBYTEOFFSET;
typedef DWORD DBEVENTPHASE;
typedef DWORD DBEXECLIMITS;
typedef DWORD DBPARAMFLAGS;
typedef DWORD DBPROPSTATUS;
typedef DWORD DBROWOPTIONS;
typedef DWORD DBSOURCETYPE;
typedef DWORD DB_DWRESERVE;
typedef enum tagDISCARDCACHE DISCARDCACHE;
typedef BYTE DVD_AudioATR[8];
typedef WORD DVD_REGISTER;
typedef BYTE DVD_VideoATR[2];
typedef enum tagExtentMode DVEXTENTMODE;
struct DXBASESAMPLE {BYTE Blue;BYTE Green;BYTE Red;BYTE Alpha;};
typedef enum tagENCODINGTYPE ENCODINGTYPE;
typedef enum __MIDL_IDVDProgramChain_0004 EPGCLinkType;
typedef WORD FILEOP_FLAGS;
typedef enum _FILTER_FLAGS FILTER_FLAGS;
typedef enum _FilterState FILTER_STATE;
typedef HANDLE GLOBALHANDLE;
struct HHEADERROW__ {DWORD unused;};
typedef enum __MIDL_IHlinkSite_0001 HLINKWHICHMK;
typedef enum _HLTRANSLATEF_NOREDEF10 HLTRANSLATEF;
typedef enum _HTML_PAINTER HTML_PAINTER;
typedef ULONG_PTR HWATCHREGION;
typedef DWORD IADDRESSTYPE;
typedef enum tagIFILTER_INIT IFILTER_INIT;
typedef enum tagIMSGBODYTYPE IMSGBODYTYPE;
typedef enum tagIMSGPRIORITY IMSGPRIORITY;
typedef enum tagINETADDRTYPE INETADDRTYPE;
typedef enum tagINETLANGMASK INETLANGMASK;
typedef enum _3A6E283929B5F392AC4E4FEBB8743BCE IP_DAD_STATE;
typedef enum __MIDL___MIDL__intf_0000_0001 JPMPII_FLAGS;
typedef enum _C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;
typedef enum _D8B5EF9138DF63A6B0F5D116ADA5F5F9 LDAP_RETCODE;
typedef void ( *LINECALLBACK)(DWORD hDevice, DWORD dwMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef u_long LM_BAUD_RATE;
typedef LPCHOOSEFONTW LPCHOOSEFONT;
typedef DDBLTBATCH *LPDDBLTBATCH;
typedef DDCAPS_DX3 *LPDDCAPS_DX3;
typedef DDCAPS_DX5 *LPDDCAPS_DX5;
typedef DDCAPS_DX6 *LPDDCAPS_DX6;
typedef DDCOLORKEY *LPDDCOLORKEY;
typedef HACMDRIVER *LPHACMDRIVER;
typedef HACMSTREAM *LPHACMSTREAM;
typedef HHEADERROW *LPHHEADERROW;
typedef HTAPIPHONE *LPHTAPIPHONE;
typedef ITEMIDLIST *LPITEMIDLIST;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
typedef enum _OBEX_EVENT *LPOBEX_EVENT;
typedef WORD *LPPATCHARRAY;
typedef LPTBBUTTON LPTBBUTTONSB;
typedef LPTEXTMETRICA LPTEXTMETRIC;
typedef VARIANT *LPVARIANTARG;
typedef WAVEFILTER *LPWAVEFILTER;
typedef WAVEFORMAT *LPWAVEFORMAT;
typedef WINDOWDATA *LPWINDOWDATA;
typedef int ( *LPWSPCLEANUP)(LPINT lpErrno);
typedef MENUITEMINFOA MENUITEMINFO;
typedef enum tagMIMESAVETYPE MIMESAVETYPE;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0013 MLOCALOPTION;
typedef void  MSR_DUMPPROC(HANDLE hFile);
typedef ULONG NDIS_VLAN_ID;
typedef DWORD NOTFSINKMODE;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef WAVEFILTER *NPWAVEFILTER;
typedef WAVEFORMAT *NPWAVEFORMAT;
typedef enum _72442BC1633A72B4A848039868482DB7 OLE_TRISTATE;
typedef OPENCARDNAMEA OPENCARDNAME;
typedef OPENFILENAMEA OPENFILENAME;
typedef enum __MIDL___MIDL_itf_amstream_0000_0004 OUTPUT_STATE;
typedef PACTRL_AUDITA PACTRL_AUDIT;
typedef PAGESETUPDLGA PAGESETUPDLG;
typedef STRING *PANSI_STRING;
typedef PCREDUI_INFOA PCREDUI_INFO;
typedef  USB_DEVICE *PCUSB_DEVICE;
typedef INT_PTR PERFMETERTAG;
typedef HANDLE *PHCRYPTASYNC;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef enum _NDIS_MEDIUM *PNDIS_MEDIUM;
typedef enum tagPOP3MARKTYPE POP3MARKTYPE;
typedef PAINTSTRUCT *PPAINTSTRUCT;
typedef enum tagPROPINFOMASK PROPINFOMASK;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef DWORD RASCONNSTATE;
typedef REGISTERWORDA REGISTERWORD;
typedef ULONG SCARDCONTEXT;
struct SENS_QOCINFO {DWORD dwSize;DWORD dwFlags;DWORD dwOutSpeed;DWORD dwInSpeed;};
typedef enum _SID_NAME_USE SID_NAME_USE;
typedef enum tagSMTPAUTHTYPE SMTPAUTHTYPE;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0002 STREAM_STATE;
typedef enum __MIDL___MIDL_itf_shobjidl_0117_0004 SVUIA_STATUS;
typedef enum _TRUSTEE_FORM TRUSTEE_FORM;
typedef enum _TRUSTEE_TYPE TRUSTEE_TYPE;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef WORD_BLOB *UP_WORD_BLOB;
typedef enum __MIDL_IBindStatusCallback_0004 URL_ENCODING;
typedef LPVOID USB_TRANSFER;
typedef DWORD VB_OLE_COLOR;
typedef enum tagXMLEMEM_TYPE XMLELEM_TYPE;
struct _AFPROTOCOLS {INT iAddressFamily;INT iProtocol;};
struct _DDGAMMARAMP {WORD red[256];WORD green[256];WORD blue[256];};
typedef enum _tagDELIVERMODE _DELIVERMODE;
struct _DTBLMVDDLBX {ULONG ulFlags;ULONG ulMVPropTag;};
struct _MIBICMPINFO {MIBICMPSTATS icmpInStats;MIBICMPSTATS icmpOutStats;};
struct _MIB_BEST_IF {DWORD dwDestAddr;DWORD dwIfIndex;};
struct _MIB_ICMP_EX {MIBICMPSTATS_EX icmpInStats;MIBICMPSTATS_EX icmpOutStats;};
struct _MIB_IPSTATS {DWORD dwForwarding;DWORD dwDefaultTTL;DWORD dwInReceives;DWORD dwInHdrErrors;DWORD dwInAddrErrors;DWORD dwForwDatagrams;DWORD dwInUnknownProtos;DWORD dwInDiscards;DWORD dwInDelivers;DWORD dwOutRequests;DWORD dwRoutingDiscards;DWORD dwOutDiscards;DWORD dwOutNoRoutes;DWORD dwReasmTimeout;DWORD dwReasmReqds;DWORD dwReasmOks;DWORD dwReasmFails;DWORD dwFragOks;DWORD dwFragFails;DWORD dwFragCreates;DWORD dwNumIf;DWORD dwNumAddr;DWORD dwNumRoutes;};
struct _POWER_DESCR {UINT16 ValidMask;UINT16 NominalV;UINT16 MinV;UINT16 MaxV;UINT16 StaticI;UINT16 AvgI;UINT16 PeakI;UINT16 PowerDownI;};
struct _SSLPROTOCOL {DWORD dwProtocol;DWORD dwVersion;DWORD dwFlags;};
struct _SShortArray {ULONG cValues;short *lpi;};
struct _XCPT_ACTION {unsigned int XcptNum;int SigNum;_PHNDLR XcptAction;};
struct _tagDATAINFO {ULONG ulTotalSize;ULONG ulavrPacketSize;ULONG ulConnectSpeed;ULONG ulProcessorSpeed;};
struct _userHBITMAP {int fContext;union _userHBITMAP____MIDL_IWinTypes_0007 u;};
struct _userHGLOBAL {int fContext;union _userHGLOBAL____MIDL_IWinTypes_0003 u;};
typedef enum _htmlEditable htmlEditable;
typedef enum _htmlEncoding htmlEncoding;
typedef enum _htmlListType htmlListType;
typedef enum _htmlTabIndex htmlTabIndex;
typedef enum _styleDisplay styleDisplay;
typedef enum _styleImeMode styleImeMode;
struct tagBIND_OPTS {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;};
struct tagDBSETFUNC {DWORD dwSetQuantifier;};
struct tagGUIDELINE {DWORD dwSize;DWORD dwLevel;DWORD dwIndex;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwPrivateSize;DWORD dwPrivateOffset;};
struct tagPAGERANGE {LONG nFromPage;LONG nToPage;};
struct tagRGBTRIPLE {BYTE rgbtBlue;BYTE rgbtGreen;BYTE rgbtRed;};
struct timecaps_tag {UINT wPeriodMin;UINT wPeriodMax;};
typedef userHPALETTE *wireHPALETTE;
typedef DWORD ACCESS_MASK;
typedef enum _ACCESS_MODE ACCESS_MODE;
typedef ACTRL_AUDITA ACTRL_AUDIT;
typedef enum _ADDURL_FLAG ADDURL_FLAG;
typedef enum _ADORNER_HTI ADORNER_HTI;
typedef STRING ANSI_STRING;
typedef ATM_BHLI ATM_BHLI_IE;
typedef enum tagBIND_FLAGS1 BIND_FLAGS1;
typedef enum tagCHARSETTYPE CHARSETTYPE;
typedef CREDUI_INFOA CREDUI_INFO;
typedef CURRENCYFMTA CURRENCYFMT;
typedef enum _D3DFILLMODE D3DFILLMODE;
struct D3DXVECTOR4 {FLOAT x;FLOAT y;FLOAT z;FLOAT w;};
typedef WORD DBCOMMANDOP;
typedef DWORD DBCOMPAREOP;
typedef DWORD DBCOPYFLAGS;
typedef ULONG DBCOUNTITEM;
typedef DWORD DBHASHVALUE;
typedef DWORD DBMATCHTYPE;
typedef DWORD DBMOVEFLAGS;
typedef DWORD DBPROPFLAGS;
typedef LONG DBROWOFFSET;
typedef DWORD DBROWSTATUS;
typedef DWORD DBUPDELRULE;
typedef DWORD DBVALUEKIND;
typedef DWORD DBWATCHMODE;
typedef LONG DB_LORDINAL;
typedef LONG DB_LRESERVE;
typedef ULONG DB_URESERVE;
typedef DWORD DELIVERMODE;
typedef enum _DOCNAVFLAGS DOCNAVFLAGS;
typedef enum tagDOMNodeType DOMNodeType;
typedef enum tagDVD_MENU_ID DVD_MENU_ID;
typedef enum _tagDVD_WARNING DVD_WARNING;
typedef enum __MIDL_IDVDProgramChain_0002 ENavCmdArea;
typedef enum __MIDL___MIDL_itf_shobjidl_0117_0001 FOLDERFLAGS;
typedef HANDLE HCRYPTASYNC;
typedef DWORD HH_INFOTYPE;
typedef enum __MIDL_IHlink_0002 HLINKGETREF;
typedef enum _HLSHORTCUTF__NOREDEF10 HLSHORTCUTF;
typedef enum _HTMLAppFlag HTMLAppFlag;
typedef enum _HTMLDlgEdge HTMLDlgEdge;
typedef enum _HTMLDlgFlag HTMLDlgFlag;
typedef enum _INBOX_EVENT INBOX_EVENT;
typedef HANDLE LOCALHANDLE;
typedef  DSCBCAPS *LPCDSCBCAPS;
typedef  MMCKINFO *LPCMMCKINFO;
typedef  MMIOINFO *LPCMMIOINFO;
typedef  SHITEMID *LPCSHITEMID;
typedef  TBBUTTON *LPCTBBUTTON;
typedef SBinaryArray *LPENTRYLIST;
typedef HDRVPHONE *LPHDRVPHONE;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef HPHONEAPP *LPHPHONEAPP;
typedef HPROVIDER *LPHPROVIDER;
typedef HTAPICALL *LPHTAPICALL;
typedef HTAPILINE *LPHTAPILINE;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef SAFEARRAY *LPSAFEARRAY;
typedef TPMPARAMS *LPTPMPARAMS;
typedef VIRUSINFO *LPVIRUSINFO;
typedef int ( *LPWSPSELECT)(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,  struct timeval *timeout, LPINT lpErrno);
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef enum tagMLSTR_FLAGS MLSTR_FLAGS;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0005 MMSGPRIVACY;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0016 MOPTDLGPAGE;
typedef DWORD MP_TIMEDATA;
typedef enum _NDIS_MEDIUM NDIS_MEDIUM;
typedef enum tagNETCON_TYPE NETCON_TYPE;
typedef NETRESOURCEA NETRESOURCE;
typedef enum _tagOIBDG_FLAGS OIBDG_FLAGS;
typedef enum tagOLELINKBIND OLELINKBIND;
typedef ACE_HEADER *PACE_HEADER;
typedef enum _tagPARSEACTION PARSEACTION;
typedef enum _PARSE_FLAGS PARSE_FLAGS;
typedef ULONG PARTITIONID;
typedef PCREDENTIALA PCREDENTIAL;
typedef PSecHandle PCredHandle;
typedef PSecHandle PCtxtHandle;
typedef DBPROPINFO *PDBPROPINFO;
typedef enum tagPENDINGTYPE PENDINGTYPE;
typedef HACMDRIVER *PHACMDRIVER;
typedef HACMSTREAM *PHACMSTREAM;
typedef enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 *PICMP4_TYPE;
typedef enum _682EAAD0F97AB0EDCAD8B026B6112555 *PICMP6_TYPE;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef enum tagPOP3CMDTYPE POP3CMDTYPE;
typedef enum tagPOP3COMMAND POP3COMMAND;
typedef enum _0AEECC1A63E1B2F73D11FBA74082B60B PROXY_PHASE;
typedef RTL_BITMAP *PRTL_BITMAP;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef WAVEFILTER *PWAVEFILTER;
typedef WAVEFORMAT *PWAVEFORMAT;
typedef enum _tagQUERYOPTION QUERYOPTION;
typedef HANDLE QUEUEHANDLE;
typedef enum tagRASCONNTYPE RASCONNTYPE;
typedef ULONG SCARDHANDLE;
typedef enum _EAACB91A6EC543964C9E2DF086A673AD SCOPE_LEVEL;
typedef enum tagSCRIPTCONTF SCRIPTCONTF;
typedef enum tagSCRIPTSTATE SCRIPTSTATE;
typedef ULONG SERVICETYPE;
typedef DWORD SHCOLSTATEF;
typedef GUID SHELLVIEWID;
typedef enum tagSMTPCOMMAND SMTPCOMMAND;
typedef STARTUPINFOA STARTUPINFO;
typedef enum tagSTREAM_SEEK STREAM_SEEK;
typedef LONGLONG STREAM_TIME;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0001 STREAM_TYPE;
typedef enum tagSTRRET_TYPE STRRET_TYPE;
typedef enum _tagSYNCMGRFLAG SYNCMGRFLAG;
typedef DWORD (*SYSTEMPOWER)(DWORD);
typedef enum tagURLTEMPLATE URLTEMPLATE;
typedef WSAQUERYSETA WSAQUERYSET;
typedef enum tagXFORMCOORDS XFORMCOORDS;
struct _AM_DVD_YUV {UCHAR Reserved;UCHAR Y;UCHAR U;UCHAR V;};
struct _DDCOLORKEY {DWORD dwColorSpaceLowValue;DWORD dwColorSpaceHighValue;};
struct _DTBLBUTTON {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulPRControl;};
struct _DVD_REGION {UCHAR CopySystem;UCHAR RegionData;UCHAR SystemRegion;UCHAR Reserved;};
typedef enum _tagENUM_FLAGS _ENUM_FLAGS;
struct _ITEMIDLIST {SHITEMID mkid;};
struct _MIB_TCPROW {DWORD dwState;DWORD dwLocalAddr;DWORD dwLocalPort;DWORD dwRemoteAddr;DWORD dwRemotePort;};
struct _MIB_UDPROW {DWORD dwLocalAddr;DWORD dwLocalPort;};
struct _MONTHLYDOW {WORD wWhichWeek;WORD rgfDaysOfTheWeek;WORD rgfMonths;};
struct _SRealArray {ULONG cValues;float *lpflt;};
struct _SSLCIPHERS {DWORD dwProtocol;DWORD dwCount;DWORD CipherList[1];};
struct _SSortOrder {ULONG ulPropTag;ULONG ulOrder;};
struct _SYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;};
struct _TOKEN_USER {SID_AND_ATTRIBUTES User;};
struct _VAR_STRING {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulStringFormat;ULONG ulStringSize;ULONG ulStringOffset;};
struct __CEL_SLEEP {DWORD dwTimeout;};
typedef enum _styleCursor styleCursor;
typedef enum _styleNormal styleNormal;
struct tagDEVNAMES {WORD wDriverOffset;WORD wDeviceOffset;WORD wOutputOffset;WORD wDefault;};
struct tagPOP3LIST {DWORD dwPopId;DWORD cbSize;};
struct tagPOP3STAT {DWORD cMessages;DWORD cbMessages;};
struct tagRemBRUSH {unsigned int cbData;byte data[1];};
struct tagVERBLOCK {ULONG iveridFirst;ULONG iveridMax;ULONG cblockPrev;ULONG *rgiblockPrev;};
typedef userHBITMAP *wireHBITMAP;
typedef userHGLOBAL *wireHGLOBAL;
typedef enum tagBINDSTATUS BINDSTATUS;
typedef enum tagBINDSTRING BINDSTRING;
typedef enum tagBIND_FLAGS BIND_FLAGS;
typedef PVOID BPC_HANDLE;
typedef UINT32 CARD_EVENT;
typedef enum tagCERTDATAID CERTDATAID;
typedef enum tagCHANGEKIND CHANGEKIND;
typedef CHOOSEFONTW CHOOSEFONT;
typedef enum tagCHUNKSTATE CHUNKSTATE;
typedef enum __MIDL_ICodeInstall_0001 CIP_STATUS;
typedef WORD CLIPFORMAT;
typedef DWORD CODEPAGEID;
typedef CREDENTIALA CREDENTIAL;
typedef SecHandle CredHandle;
typedef SecHandle CtxtHandle;
typedef enum _D3DBLENDOP D3DBLENDOP;
typedef enum _D3DCMPFUNC D3DCMPFUNC;
typedef enum _D3DDEVTYPE D3DDEVTYPE;
typedef enum _D3DFOGMODE D3DFOGMODE;
typedef DWORD DBASYNCHOP;
typedef DWORD DBBINDFLAG;
typedef enum tagDBBOOKMARK DBBOOKMARK;
typedef DWORD DBCOSTUNIT;
typedef DWORD DBMEMOWNER;
typedef ULONG DBREFCOUNT;
typedef LONG DBROWCOUNT;
typedef LONG DB_LPARAMS;
typedef ULONG DB_UPARAMS;
typedef enum tagDVD_DOMAIN DVD_DOMAIN;
struct DXPMSAMPLE {BYTE Blue;BYTE Green;BYTE Red;BYTE Alpha;};
typedef void  DXTASKPROC(void *pTaskData, BOOL *pbContinueProcessing);
typedef DWORD ENUM_FLAGS;
typedef enum tagFNTSYSTYPE FNTSYSTYPE;
typedef enum _FW_ACTIONS FW_ACTIONS;
struct HADDRESS__ {DWORD unused;};
struct HCHARSET__ {DWORD unused;};
typedef ULONG_PTR HCRYPTHASH;
typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HTAPI_CALL;
typedef ULONG_PTR HTAPI_LINE;
typedef enum _HTMLBorder HTMLBorder;
typedef enum _HT_OPTIONS HT_OPTIONS;
typedef enum _HT_RESULTS HT_RESULTS;
typedef enum _31EF7763C4AEC8DD07C218DFAFDEDAB8 ICMP4_TYPE;
typedef enum _682EAAD0F97AB0EDCAD8B026B6112555 ICMP6_TYPE;
typedef int (*IMENUMPROC)(IMENUMINFO *);
typedef enum tagINVOKEKIND INVOKEKIND;
typedef enum tagIXPISSTATE IXPISSTATE;
typedef  DSBCAPS *LPCDSBCAPS;
typedef  DSCCAPS *LPCDSCCAPS;
typedef DWORD *LPCOLORREF;
typedef LPCPINFOEXA LPCPINFOEX;
typedef DEVNAMES *LPDEVNAMES;
typedef HADDRESS *LPHADDRESS;
typedef HCHARSET *LPHCHARSET;
typedef HDRVCALL *LPHDRVCALL;
typedef HDRVLINE *LPHDRVLINE;
typedef HLBWINFO *LPHLBWINFO;
typedef HLINEAPP *LPHLINEAPP;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HWAVEOUT *LPHWAVEOUT;
typedef WORD *LPKEYARRAY;
typedef NMSELCHANGE *LPNMSELECT;
typedef LPOFNOTIFYA LPOFNOTIFY;
typedef SHITEMID *LPSHITEMID;
typedef STATDATA *LPSTATDATA;
typedef LPSTYLEBUFA LPSTYLEBUF;
typedef LPWNDCLASSA LPWNDCLASS;
typedef MIDIINCAPSA MIDIINCAPS;
typedef enum tagMIMEPROPID MIMEPROPID;
typedef enum tagMLCONVCHARF MLCONVCHAR;
typedef enum tagMLDETECTCP MLDETECTCP;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0015 MPROXYTYPE;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0018 MSVCSTATUS;
typedef enum tagNCRP_FLAGS NCRP_FLAGS;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef enum _OBEX_EVENT OBEX_EVENT;
typedef enum tagOLEDCFLAGS OLEDCFLAGS;
typedef enum tagOLEWHICHMK OLEWHICHMK;
typedef UINT OLE_HANDLE;
typedef WORD PATCHARRAY[128];
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef enum _DMA_SPEED *PDMA_SPEED;
typedef enum _DMA_WIDTH *PDMA_WIDTH;
typedef ULONG_PTR *PDWORD_PTR;
typedef enum tagPENDINGMSG PENDINGMSG;
typedef USHORT *PSDP_ERROR;
typedef PSECURITY_INTEGER PTimeStamp;
typedef ULONGLONG *PULONGLONG;
typedef enum tagREADYSTATE READYSTATE;
typedef enum _reconcilef RECONCILEF;
typedef enum tagRELOADTYPE RELOADTYPE;
typedef enum tagSERVERCALL SERVERCALL;
typedef enum __MIDL___MIDL_itf_shobjidl_0116_0001 SHCOLSTATE;
typedef SHFILEINFOA SHFILEINFO;
typedef enum _D02A68EF54712B1F200C52B69E1D9509 SHGFP_TYPE;
typedef enum _53EEC439051CDCA8BFC07626FF271DBE SLGP_FLAGS;
typedef enum _B2CD58BB5E151C37D855099D3E2FDD5A STUB_PHASE;
typedef void ( *STUB_THUNK)(PMIDL_STUB_MESSAGE);
typedef TEXTMETRICA TEXTMETRIC;
typedef enum _TOKEN_TYPE TOKEN_TYPE;
typedef enum _URLZONEREG URLZONEREG;
typedef enum _F8F6E62F94829530CB2AC753E31BC5A1 URL_SCHEME;
typedef LPVOID USB_HANDLE;
typedef VARIANT VARIANTARG;
typedef enum tagVIEWSTATUS VIEWSTATUS;
struct _BYTE_BLOB {unsigned int clSize;byte abData[1];};
struct _CERT_PAIR {CERT_BLOB Forward;CERT_BLOB Reverse;};
struct _D3DMATRIX {_D3DMATRIX___2ECFB1CFDB70179D7AAC67AC21B01902 __anonymous0;};
struct _DDSCAPSEX {DWORD dwCaps2;DWORD dwCaps3;DWORD dwCaps4;};
struct _DTBLDDLBX {ULONG ulFlags;ULONG ulPRDisplayProperty;ULONG ulPRSetProperty;ULONG ulPRTableName;};
struct _DTBLLABEL {ULONG ulbLpszLabelName;ULONG ulFlags;};
typedef enum _tagGROUPMODE _GROUPMODE;
struct _NM_UPDOWN {NMHDR hdr;int iPos;int iDelta;};
struct _OLESTREAM {LPOLESTREAMVTBL lpstbl;};
struct _RSAPUBKEY {DWORD magic;DWORD bitlen;DWORD pubexp;};
struct _SPC_IMAGE {struct SPC_LINK_ *pImageLink;CRYPT_DATA_BLOB Bitmap;CRYPT_DATA_BLOB Metafile;CRYPT_DATA_BLOB EnhancedMetafile;CRYPT_DATA_BLOB GifFile;};
struct _SecHandle {ULONG_PTR dwLower;ULONG_PTR dwUpper;};
typedef enum _bodyScroll bodyScroll;
typedef enum _htmlMethod htmlMethod;
typedef enum _htmlZOrder htmlZOrder;
struct tagIMEINFO {DWORD dwPrivateDataSize;DWORD fdwProperty;DWORD fdwConversionCaps;DWORD fdwSentenceCaps;DWORD fdwUICaps;DWORD fdwSCSCaps;DWORD fdwSelectCaps;};
struct tagRGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef enum _AMVP_MODE AMVP_MODE;
typedef enum _F1BA8CDCFBA28F212F1E4E8E8EFEC4E8 ASSOCDATA;
typedef enum _9F5DEC71A9715652613D7AC79A3DFB57 ASSOCENUM;
typedef enum __MIDL_IBindStatusCallback_0002 BINDINFOF;
typedef enum tagBINDSPEED BINDSPEED;
typedef enum _BoolValue BoolValue;
typedef enum tagCERTSTATE CERTSTATE;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef  STRENTRY CSTRENTRY;
typedef  STRTABLE CSTRTABLE;
typedef enum _D3DFORMAT D3DFORMAT;
typedef DWORD DBCOMPARE;
typedef DWORD DBLITERAL;
typedef ULONG DBORDINAL;
typedef DWORD DBPARAMIO;
typedef enum _DMA_SPEED DMA_SPEED;
typedef enum _DMA_WIDTH DMA_WIDTH;
typedef enum tagDVASPECT2 DVASPECT2;
typedef enum _tagDVD_ERROR DVD_ERROR;
typedef ULONGLONG DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef void  DXAPCPROC(DWORD dwData);
typedef SBinaryArray ENTRYLIST;
typedef enum tagFUNCFLAGS FUNCFLAGS;
typedef DVD_REGISTER GPRMARRAY[16];
typedef DWORD GROUPMODE;
typedef ULONG_PTR HACCESSOR;
typedef HANDLE HANDLE_16;
typedef HANDLE HCATADMIN;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HDRV_CALL;
typedef ULONG_PTR HDRV_LINE;
typedef LPVOID HINTERNET;
typedef enum tagHITRESULT HITRESULT;
typedef enum __MIDL_IHlink_0004 HLINKMISC;
typedef enum __MIDL_IHlink_0005 HLINKSETF;
typedef void ( *HTMPFCBFN)(DWORD dwArg1, void *pvArg2);
typedef enum tagMSGCALLTYPE IBSCLEVEL;
typedef enum tagIMSGFLAGS IMSGFLAGS;
typedef ULONG IP_STATUS;
typedef enum tagIXPSTATUS IXPSTATUS;
typedef UINT8 KEY_STATE[256];
typedef  DSCAPS *LPCDSCAPS;
typedef DDBLTFX *LPDDBLTFX;
typedef DECIMAL *LPDECIMAL;
typedef LPDEVMODEA LPDEVMODE;
typedef LPDOCINFOA LPDOCINFO;
typedef HACMOBJ *LPHACMOBJ;
typedef HMIDIIN *LPHMIDIIN;
typedef HWAVEIN *LPHWAVEIN;
typedef LPNMMOUSE LPNMCLICK;
typedef VARIANT *LPVARIANT;
typedef enum tagMIMECONTF MIMECONTF;
typedef enum tagMKREDUCE MKRREDUCE;
typedef UINT MMVERSION;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0010 MPFLFIELD;
typedef enum tagMSHLFLAGS MSHLFLAGS;
typedef enum tagNNTPSTATE NNTPSTATE;
typedef NPDEVMODEA NPDEVMODE;
typedef NUMBERFMTA NUMBERFMT;
typedef enum tagOLERENDER OLERENDER;
typedef enum tagOLEUPDATE OLEUPDATE;
typedef DWORD OLE_COLOR;
typedef enum _1F4D88D3C5C7FA82379873ED25DD5804 P3PStatus;
typedef FLOAT128 *PFLOAT128;
typedef ICONINFO *PICONINFO;
typedef LONGLONG *PLONGLONG;
typedef ULONG *PNDIS_OID;
typedef enum __MIDL_IPrint_0001 PRINTFLAG;
typedef SOCKHAND *PSOCKHAND;
typedef PSTYLEBUFA PSTYLEBUF;
typedef enum _tagPSUACTION PSUACTION;
typedef TIMECODE *PTIMECODE;
typedef PTRUSTEE_A PTRUSTEE_;
typedef PWNDCLASSA PWNDCLASS;
typedef enum tagRANGETYPE RANGETYPE;
typedef BYTE SCRIPT_ID;
typedef USHORT SDP_ERROR;
typedef ULONGLONG SECTORNUM;
typedef enum _984B659830343E4BA783F718A3582EC0 SLR_FLAGS;
typedef DVD_REGISTER SPRMARRAY[24];
typedef uSTGMEDIUM STGMEDIUM;
typedef enum __MIDL_IInternetSecurityManager_0002 SZM_FLAGS;
typedef BLOB THUMBBLOB;
typedef enum tagTYPEFLAGS TYPEFLAGS;
typedef SECURITY_INTEGER TimeStamp;
typedef enum _TimeState TimeState;
typedef enum _2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;
struct _AMVPSIZE {DWORD dwWidth;DWORD dwHeight;};
struct _CI_STATE {DWORD cbStruct;DWORD cWordList;DWORD cPersistentIndex;DWORD cQueries;DWORD cDocuments;DWORD cFreshTest;DWORD dwMergeProgress;DWORD eState;DWORD cFilteredDocuments;DWORD cTotalDocuments;DWORD cPendingScans;DWORD dwIndexSize;DWORD cUniqueKeys;DWORD cSecQDocuments;DWORD dwPropCacheSize;};
struct _D3DRANGE {UINT Offset;UINT Size;};
struct _DDOSCAPS {DWORD dwCaps;};
struct _DSCBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;};
struct _DTBLEDIT {ULONG ulbLpszCharsAllowed;ULONG ulFlags;ULONG ulNumCharsAllowed;ULONG ulPropTag;};
struct _DTBLPAGE {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulbLpszComponent;ULONG ulContext;};
struct _FILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
struct _MIB_ICMP {MIBICMPINFO stats;};
struct _RIP_INFO {DWORD dwError;DWORD dwType;};
struct _flaglist {ULONG cFlags;ULONG ulFlag[1];};
typedef enum __MIDL___MIDL_itf_mssoap_0149_0002 enXSDType;
typedef enum _htmlClear htmlClear;
typedef enum _htmlFrame htmlFrame;
typedef enum _htmlInput htmlInput;
typedef enum _htmlRules htmlRules;
typedef enum _htmlStart htmlStart;
struct l_timeval {LONG tv_sec;LONG tv_usec;};
typedef enum _mediaType mediaType;
struct sockproto {u_short sp_family;u_short sp_protocol;};
typedef enum _styleAuto styleAuto;
typedef enum _styleBidi styleBidi;
typedef enum _styleBool styleBool;
struct tagDBTIME {USHORT hour;USHORT minute;USHORT second;};
struct tagPOINTF {FLOAT x;FLOAT y;};
struct tagPOINTS {SHORT x;SHORT y;};
typedef unsigned short wctrans_t;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef enum _29DA7B98C2E2CB34CDBF24D85A286AD2 AAL_TYPE;
typedef enum __MIDL_IImnAdviseAccount_0001 ACCTTYPE;
typedef enum _A6F0403CBCB089638ED65F4FF2DFF01F APPSTATE;
typedef enum _BA5933F1975D916FB246D1EEDB0FAC50 ASSOCKEY;
typedef enum _E67F07BEF5FB1CC0FD9D634CC503A367 ASSOCSTR;
typedef enum tagAUTHTYPE AUTHTYPE;
typedef enum tagAuthType AuthType;
typedef enum __MIDL_IBindStatusCallback_0001 BINDVERB;
typedef ULONG BOOKMARK;
typedef enum tagCALLCONV CALLCONV;
typedef enum tagCALLTYPE CALLTYPE;
typedef void (*CARD_ISR)(UINT32);
typedef DWORD CEPROPID;
typedef DWORD COLORREF;
typedef CPINFOEXA CPINFOEX;
typedef enum tagCTRLINFO CTRLINFO;
typedef CY CURRENCY;
typedef enum _D3DBLEND D3DBLEND;
typedef DWORD D3DCOLOR;
typedef ULONG DBBKMARK;
typedef ULONG DBLENGTH;
typedef DWORD DBPROPID;
typedef DWORD DBREASON;
typedef DWORD DBSTATUS;
typedef enum tagDESCKIND DESCKIND;
typedef enum tagDVASPECT DVASPECT;
struct DXDBND64 {LONGLONG Min;LONGLONG Max;};
typedef LONGLONG DXDVEC64[4];
struct DXFPOINT {FLOAT x;FLOAT y;};
struct DXSAMPLE {BYTE Blue;BYTE Green;BYTE Red;BYTE Alpha;};
typedef enum _248C98C84AD026B4080DDE86FD8C0CD8 FD_FLAGS;
typedef enum _813E4059D2FE5A60AFFA8263D82D5409 FORTSTAT;
typedef enum tagFUNCKIND FUNCKIND;
typedef enum tagGUIDKIND GUIDKIND;
typedef HANDLE HCATINFO;
typedef ULONG_PTR HCHAPTER;
typedef enum __MIDL_IHlink_0003 HLFNAMEF;
typedef HANDLE HPROCESS;
typedef DWORD HREFTYPE;
typedef LONG ISOLEVEL;
typedef WORD KEYARRAY[128];
typedef enum tagLIBFLAGS LIBFLAGS;
typedef enum tagLOCKTYPE LOCKTYPE;
typedef  DWORD *LPCDWORD;
typedef  RECTL *LPCRECTL;
typedef DDARGB *LPDDARGB;
typedef DDRGBA *LPDDRGBA;
typedef HANDLE *LPHANDLE;
typedef HLITEM *LPHLITEM;
typedef HMIXER *LPHMIXER;
typedef HPHONE *LPHPHONE;
typedef LPVOID *LPLPVOID;
typedef STRRET *LPSTRRET;
typedef USHORT *LPUSHORT;
typedef UINT MMRESULT;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0009 MMSGTYPE;
typedef DWORD MP_FLAGS;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0001 MSTATEOE;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0007 MURLTYPE;
typedef ULONG NDIS_OID;
typedef NMSELCHANGE NMSELECT;
typedef OFNOTIFYA OFNOTIFY;
typedef enum tagOLECLOSE OLECLOSE;
typedef enum tagOLECONTF OLECONTF;
typedef void ( *PAPCFUNC)(DWORD dwParam);
typedef ULONGLONG *PBT_ADDR;
typedef CONTEXT *PCONTEXT;
typedef PDEVMODEA PDEVMODE;
typedef HACMOBJ *PHACMOBJ;
typedef enum _tagPI_FLAGS PI_FLAGS;
typedef enum __MIDL_IPropertyContainer_0001 PROPTYPE;
typedef LONG_PTR *PSSIZE_T;
typedef PTRUSTEEA PTRUSTEE;
typedef UINT128 *PUINT128;
typedef  GUID * REFCATID;
typedef  GUID * REFMSPID;
typedef CHAR SEC_CHAR;
typedef enum tagSIPSTATE SIPSTATE;
typedef BYTE SPC_UUID[16];
typedef HANDLE *SPHANDLE;
typedef ULONG SPI_TYPE;
typedef enum tagSTATFLAG STATFLAG;
typedef STYLEBUFA STYLEBUF;
typedef enum _TASKPAGE TASKPAGE;
typedef DWORD TEXTTYPE;
typedef INT TRACETAG;
typedef TRUSTEE_A TRUSTEE_;
typedef enum tagTYPEKIND TYPEKIND;
typedef enum tagUASFLAGS UASFLAGS;
typedef enum _2CD99A42A273050CD294312F877025C7 URL_PART;
typedef LPVOID USB_PIPE;
typedef enum tagVARFLAGS VARFLAGS;
typedef WNDCLASSA WNDCLASS;
struct _COMSTAT {unsigned int fCtsHold : 1;unsigned int fDsrHold : 1;unsigned int fRlsdHold : 1;unsigned int fXoffHold : 1;unsigned int fXoffSent : 1;unsigned int fEof : 1;unsigned int fTxim : 1;unsigned int fReserved : 25;DWORD cbInQue;DWORD cbOutQue;};
struct _CONTEXT {ULONG ContextFlags;ULONG R0;ULONG R1;ULONG R2;ULONG R3;ULONG R4;ULONG R5;ULONG R6;ULONG R7;ULONG R8;ULONG R9;ULONG R10;ULONG R11;ULONG R12;ULONG Sp;ULONG Lr;ULONG Pc;ULONG Psr;ULONG Fpscr;ULONG FpExc;ULONG S[33];ULONG FpExtra[8];};
struct _D3DRECT {LONG x1;LONG y1;LONG x2;LONG y2;};
struct _DDSCAPS {DWORD dwCaps;};
struct _DSBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwUnlockTransferRate;DWORD dwPlayCpuOverhead;};
struct _DSCCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwFormats;DWORD dwChannels;};
struct _DTBLLBX {ULONG ulFlags;ULONG ulPRSetProperty;ULONG ulPRTableName;};
struct _MAPIUID {BYTE ab[16];};
struct _RGNDATA {RGNDATAHEADER rdh;char Buffer[1];};
struct _UDACCEL {UINT nSec;UINT nInc;};
struct _UINT128 {UINT32 u0;UINT32 u1;UINT32 u2;UINT32 u3;};
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;size_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
typedef RPC_BINDING_HANDLE handle_t;
typedef enum _htmlLoop htmlLoop;
typedef enum _htmlUnit htmlUnit;
typedef enum _htmlWrap htmlWrap;
typedef ULONGLONG *pbt_addr;
struct sockaddr {u_short sa_family;char sa_data[14];};
typedef enum _styleDir styleDir;
struct tTPCE_FS {BYTE Power;BYTE Timing;BYTE IOSpace;BYTE IRQ;BYTE MemSpace;BYTE Misc;};
struct tTPCE_IF {BYTE InterfaceType;BYTE BVDsActive;BYTE WPActive;BYTE RdyBsyActive;BYTE MWaitActive;};
struct tTPCE_IO {BYTE IOAddrLines;BYTE Bus8;BYTE Bus16;BYTE Range;BYTE NumberIOAddrRanges;BYTE AddressSize;BYTE LengthSize;};
struct tTPCE_IR {BYTE Irqn;BYTE Vend;BYTE Berr;BYTE Iock;BYTE Nmi;BYTE Mask0;BYTE Level;BYTE Pulse;BYTE Share;BYTE Irq0;BYTE Irq1;BYTE Irq2;BYTE Irq3;BYTE Irq4;BYTE Irq5;BYTE Irq6;BYTE Irq7;BYTE Irq8;BYTE Irq9;BYTE Irq10;BYTE Irq11;BYTE Irq12;BYTE Irq13;BYTE Irq14;BYTE Irq15;};
struct tTPCE_MI {BYTE MaxTwinCards;BYTE Audio;BYTE ReadOnly;BYTE PwrDown;BYTE Reserved;BYTE Ext;};
struct tTPCE_MS {BYTE NumWindows;BYTE LengthSize;BYTE CardAddrSze;BYTE HostAddr;};
struct tTPCE_PD {BYTE NomVPresent;BYTE MinVPresent;BYTE MaxVPresent;BYTE StaticIPresent;BYTE AvgIPresent;BYTE PeakIPresent;BYTE PDwnIPresent;BYTE RFUPresent;double NomV;double MinV;double MaxV;double StaticI;double AvgI;double PeakI;double PDwnI;double RFU;};
struct tTPCE_TD {BYTE WaitScalePresent;BYTE ReadyBusyScalePresent;BYTE ReservedScale7Present;double WaitScale;double ReadyBusyScale;double ReservedScale7;};
struct tagCADBL {ULONG cElems;double *pElems;};
struct tagCAFLT {ULONG cElems;float *pElems;};
struct tagPOINT {LONG x;LONG y;};
struct tagXFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;};
typedef unsigned short wctype_t;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef RemotableHandle *wireHWND;
typedef BYTE_BLOB *wirePIDL;
typedef DWORD AM_Step;
typedef BYTE BOOLEAN;
typedef ULONGLONG BT_ADDR;
typedef DWORD CALTYPE;
typedef UINT CFINITF;
typedef enum _CFITYPE CFITYPE;
typedef enum tagCMDTYPE CMDTYPE;
typedef USHORT COLOR16;
typedef enum _D3DCULL D3DCULL;
typedef enum _D3DPOOL D3DPOOL;
typedef enum tagDATADIR DATADIR;
typedef DWORD DBRANGE;
typedef DEVMODEA DEVMODE;
typedef DOCINFOA DOCINFO;
typedef enum __MIDL_IOleDocument_0001 DOCMISC;
typedef enum tagEXTCONN EXTCONN;
typedef enum _A8507C63EE573B20DAD1A9891D0431FE FORTCMD;
typedef enum _FW_DAYS FW_DAYS;
typedef LONGLONG GROUPID;
struct HBODY__ {DWORD unused;};
typedef HICON HCURSOR;
typedef HANDLE HGLOBAL;
typedef HINSTANCE HMODULE;
typedef LONG HRESULT;
typedef WORD HSOURCE;
typedef HANDLE HTHREAD;
typedef enum tagIXPTYPE IXPTYPE;
typedef  BLOB *LPCBLOB;
typedef  BYTE *LPCBYTE;
typedef  GUID *LPCGUID;
typedef  RECT *LPCRECT;
typedef DWORD *LPDWORD;
typedef HBODY *LPHBODY;
typedef HCALL *LPHCALL;
typedef HICON *LPHICON;
typedef HLINE *LPHLINE;
typedef HMIDI *LPHMIDI;
typedef NMHDR *LPNMHDR;
typedef SIZE *LPSIZEL;
typedef ULONG *LPULONG;
typedef LONG_PTR LRESULT;
typedef DWORD MKHELPF;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0004 MPROMPT;
typedef DWORD MP_CAPS;
typedef enum _MP_Type MP_TYPE;
typedef NMMOUSE NMCLICK;
typedef enum tagOLEMISC OLEMISC;
typedef INT_PTR PERFTAG;
typedef HANDLE *PHANDLE;
typedef INT128 *PINT128;
typedef NT_TIB *PNT_TIB;
typedef ULONG_PTR *PSIZE_T;
typedef DWORD PST_KEY;
typedef UINT16 *PUINT16;
typedef USHORT *PUSHORT;
typedef enum tagREGKIND REGKIND;
typedef enum tagSF_TYPE SF_TYPE;
typedef DWORD SHCONTF;
typedef LONG_PTR SSIZE_T;
typedef enum tagSTGMOVE STGMOVE;
typedef enum tagSYSKIND SYSKIND;
typedef DWORD TLENUMF;
typedef TRUSTEEA TRUSTEE;
typedef DWORD TYPEDID;
typedef enum tagURLZONE URLZONE;
typedef enum tagVARKIND VARKIND;
struct WSAData {WORD wVersion;WORD wHighVersion;char szDescription[257];char szSystemStatus[129];unsigned short iMaxSockets;unsigned short iMaxUdpDg;char *lpVendorInfo;};
struct XACTOPT {ULONG ulTimeout;char szDescription[40];};
typedef enum __MIDL_IInternetZoneManager_0002 ZAFLAGS;
struct _CEGUID {DWORD Data1;DWORD Data2;DWORD Data3;DWORD Data4;};
struct _D3DBOX {UINT Left;UINT Top;UINT Right;UINT Bottom;UINT Front;UINT Back;};
struct _DDARGB {BYTE blue;BYTE green;BYTE red;BYTE alpha;};
struct _DDRGBA {BYTE red;BYTE green;BYTE blue;BYTE alpha;};
struct _DSCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMinSecondarySampleRate;DWORD dwMaxSecondarySampleRate;DWORD dwPrimaryBuffers;DWORD dwMaxHwMixingAllBuffers;DWORD dwMaxHwMixingStaticBuffers;DWORD dwMaxHwMixingStreamingBuffers;DWORD dwFreeHwMixingAllBuffers;DWORD dwFreeHwMixingStaticBuffers;DWORD dwFreeHwMixingStreamingBuffers;DWORD dwMaxHw3DAllBuffers;DWORD dwMaxHw3DStaticBuffers;DWORD dwMaxHw3DStreamingBuffers;DWORD dwFreeHw3DAllBuffers;DWORD dwFreeHw3DStaticBuffers;DWORD dwFreeHw3DStreamingBuffers;DWORD dwTotalHwMemBytes;DWORD dwFreeHwMemBytes;DWORD dwMaxContigFreeHwMemBytes;DWORD dwUnlockTransferRateHwBuffers;DWORD dwPlayCpuOverheadSwBuffers;DWORD dwReserved1;DWORD dwReserved2;};
struct _POINTL {LONG x;LONG y;};
struct _PUBKEY {DWORD magic;DWORD bitlen;};
struct _WEEKLY {WORD WeeksInterval;WORD rgfDaysOfTheWeek;};
struct _WSABUF {u_long len;char *buf;};
typedef unsigned short _Wint_t;
typedef ULONGLONG bt_addr;
typedef enum _htmlDir htmlDir;
struct tagCAUB {ULONG cElems;unsigned char *pElems;};
struct tagCAUL {ULONG cElems;ULONG *pElems;};
struct tagCRGB {BYTE bRed;BYTE bGreen;BYTE bBlue;BYTE bExtra;};
struct tagRECT {LONG left;LONG top;LONG right;LONG bottom;};
struct tagSIZE {LONG cx;LONG cy;};
typedef RemotableHandle *wireHDC;
typedef RemSNB *wireSNB;
typedef DWORD ASSOCF;
typedef enum tagBRMODE BRMODE;
typedef ULONG BT_COD;
typedef ULONG BT_LAP;
typedef enum tagCLSCTX CLSCTX;
typedef enum tagCOINIT COINIT;
typedef DWORD DBKIND;
typedef DWORD DBPART;
typedef DWORD DBSEEK;
typedef DWORD DBSORT;
typedef WORD DBTYPE;
typedef DDCAPS_DX6 DDCAPS;
typedef LONG DISPID;
typedef enum tagDSNRET DSNRET;
typedef DWORD FOURCC;
typedef WORD FSHORT;
typedef DWORD_PTR HEVENT;
typedef HANDLE HLOCAL;
typedef HANDLE HUSKEY;
typedef ULONG IPAddr;
typedef ULONG IPMask;
typedef WORD LANGID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef LONG_PTR LPARAM;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef  CHAR *LPCSTR;
typedef GUID *LPGUID;
typedef UINT *LPUINT;
typedef WORD *LPWORD;
typedef enum tagMEMCTX MEMCTX;
typedef enum tagMSHCTX MSHCTX;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0003 MSTATE;
typedef ULONG *PCLONG;
typedef LPCRECT PCRECT;
typedef LPCSTR PCTSTR;
typedef DWORD *PDWORD;
typedef FLOAT *PFLOAT;
typedef INT16 *PINT16;
typedef ULONG PROPID;
typedef SHORT *PSHORT;
typedef SIZE *PSIZEL;
typedef UCHAR *PUCHAR;
typedef UINT8 *PUINT8;
typedef ULONG *PULONG;
typedef enum tagREGCLS REGCLS;
typedef ACCESS_MASK REGSAM;
typedef ULONG SFGAOF;
typedef DWORD SHGDNF;
typedef ULONG_PTR SIZE_T;
typedef UINT_PTR SOCKET;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0012 SSTATE;
typedef UINT32 STATUS;
typedef enum tagTYSPEC TYSPEC;
typedef UINT_PTR WPARAM;
struct _COORD {SHORT X;SHORT Y;};
struct _DAILY {WORD DaysInterval;};
struct _RECTL {LONG left;LONG top;LONG right;LONG bottom;};
typedef ULONG bt_cod;
typedef ULONG bt_lap;
struct linger {u_short l_onoff;u_short l_linger;};
struct netent {char *n_name;char **n_aliases;short n_addrtype;u_long n_net;};
struct tDGTPL {BYTE DGTPL_BUS;BYTE DGTPL_EBS;BYTE DGTPL_RBS;BYTE DGTPL_WBS;BYTE DGTPL_PART;BYTE DGTPL_HWIL;};
struct tagCAI {ULONG cElems;short *pElems;};
struct tagCAL {ULONG cElems;int *pElems;};
typedef unsigned short wint_t;
typedef enum __MIDL_IBindStatusCallback_0003 BINDF;
typedef DWORD CALID;
typedef GUID CATID;
typedef DWORD CEOID;
typedef ULONG CLONG;
typedef GUID CLSID;
typedef BYTE FCHAR;
typedef DWORD FLONG;
typedef GUID FMTID;
typedef LPVOID HCONN;
typedef DWORD HIMCC;
typedef DWORD_PTR HRULE;
typedef UCHAR KIRQL;
typedef  CHAR *LPCCH;
typedef HKL *LPHKL;
typedef CHAR *LPSTR;
typedef LPSTR LPTCH;
typedef enum tagMKSYS MKSYS;
typedef enum __MIDL___MIDL_itf_mdisp_0000_0008 MLIST;
typedef GUID MSPID;
typedef CHAR *NPSTR;
typedef BOOL *PBOOL;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef  CHAR *PCSTR;
typedef HKEY *PHKEY;
typedef INT8 *PINT8;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LPSTR PTSTR;
typedef WORD *PWORD;
typedef LONG SCODE;
typedef enum tagSHGDN SHGNO;
typedef SIZE SIZEL;
typedef enum _2D73D2DBF64DBC228937E220668B5E01 STATE;
typedef enum tagSTGTY STGTY;
typedef WORD TWOCC;
typedef enum tagTYMED TYMED;
typedef enum _3B2A1EAD1C50A2BC68F8CFAB6412CACA URLIS;
typedef WORD UWORD;
typedef GUID VERID;
typedef unsigned short WCHAR;
typedef enum tagADVF ADVF;
typedef WORD ATOM;
typedef GUID BFID;
struct BOID {byte rgb[16];};
typedef enum __MIDL_IBindStatusCallback_0006 BSCF;
typedef DWORD HIMC;
typedef PVOID HINF;
typedef enum __MIDL_IHlink_0001 HLNF;
typedef enum _HLSR_NOREDEF10 HLSR;
typedef ULONG_PTR HROW;
typedef DWORD LCID;
typedef CHAR *LPCH;
typedef CY *LPCY;
typedef enum tagMLCPF MLCP;
typedef enum _MODE MODE;
typedef ACL *PACL;
typedef  CHAR *PCCH;
typedef FTG *PFTG;
typedef HRC *PHRC;
typedef PVOID PSID;
typedef CHAR *PSTR;
typedef LPSTR PTCH;
typedef enum __MIDL_IInternetSecurityManager_0001 PUAF;
typedef WCHAR *PWCH;
typedef enum _SHNP SHNP;
typedef enum tagSTGC STGC;
typedef GUID UUID;
struct _ABC {int abcA;UINT abcB;int abcC;};
struct _IDA {UINT cidl;UINT aoffset[1];};
typedef LONG ALC;
typedef GUID IID;
typedef CHAR *PCH;
typedef LONGLONG USN;
struct _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018 {ULONG Length;DWORD Reserved;};
struct _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D___B7B026DB31B17766038D77C05C379288 {CHAR CachePath[260];DWORD dwCacheSize;};
struct _INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D___9E89BBC867D9061195152B8C00CA068F {WCHAR CachePath[260];DWORD dwCacheSize;};
struct _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416 {ULONG Length;DWORD IfIndex;};
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 {WORD SubstituteNameOffset;WORD SubstituteNameLength;WORD PrintNameOffset;WORD PrintNameLength;WCHAR PathBuffer[1];};
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___A40467932820BC39622B6C782DBB7F64 {uchar Type;uchar Code;ushort Checksum;};
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___3EEFC530056981631A2136A7505B6E7C {ULONG OutputBufferLength;ULONG InputBufferLength;ULONG IoControlCode;PVOID Type3InputBuffer;};
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___7B1CB6EE79569F81CDFB60A5A427B7E5 {ULONG Options;USHORT FileAttributes;USHORT ShareAccess;};
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___D177823888D2499403AB088A16B8A5D6 {ULONG Length;ULONG Key;LARGE_INTEGER ByteOffset;};
struct _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9___558C11AAB270A8DE5636A48AC52A55A4 {ULONG Length;DWORD Flags;};
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6 {u_long Len;u_long CharSet;u_char UsrStr[256];};
struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147 {u_long Len;u_char OctetSeq[1024];};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 {struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 Function;struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 Array;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 {struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 LnSz;DWORD TotalSize;};
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456 {HWND hWnd;UINT Msg;};
struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB {u_short Len;u_char OctetSeq[1024];};
struct ProfilerControl___129768231BCEF2215A31782384C84F0E___7F14D5CA1569ED1B5DE5D2F9C51A1434 {DWORD dwProcessorType;DWORD dwControlSize;BYTE bHardwareSpecificSettings[];};
struct _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997___E6DE4D969135FBE52EE29B014660F051 {DWORD dwSize;byte *pbaData;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 {HBITMAP hbitmap;HPALETTE hpal;};
union _IRP______12B2BAD74E2AB4DE00B958803C411E58___63BBF9CAFCFD23268916A053C4643290 {KDEVICE_QUEUE_ENTRY DeviceQueueEntry;_IRP_________63BBF9CAFCFD23268916A053C4643290___D67882FDDE0993B795A398485751D997 __anonymous0;};
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 {PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;PCERT_ID pSenderId;};
union _5803EBEE9ECFF6BB80A4332382185F4F___8118B546B46D1359E99FBEE781916E35 {BYTE ce_IR_Parm;WORD ce_IR_MASK;};
union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344 {AAL5_PARAMETERS AAL5Parameters;AALUSER_PARAMETERS AALUserParameters;};
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F {SCARD_T0_COMMAND CmdBytes;BYTE rgbHeader[5];};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29 {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous0;};
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764 {ULONGLONG Alignment;_IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764___F985BF779D0F5FE11994F28A81731018 __anonymous0;};
union _IP_ADAPTER_MULTICAST_ADDRESS___D7E2EC359D19A8395CD557C9CF474912 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B {PVOID64 AllocationBase;ULONGLONG AllocationBaseAsUlongLong;};
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 {PVOID64 BaseAddress;ULONGLONG BaseAddressAsUlongLong;};
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D {_INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D___B7B026DB31B17766038D77C05C379288 __anonymous0;INTERNET_CACHE_CONFIG_PATH_ENTRYA CachePaths[1];};
union _INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D {_INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D___9E89BBC867D9061195152B8C00CA068F __anonymous0;INTERNET_CACHE_CONFIG_PATH_ENTRYW CachePaths[1];};
union _IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
union _IP_ADAPTER_UNICAST_ADDRESS___4280CF5291E606DC7360A5B0C90671EC {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_REQFI {USHORT Capabilities;USHORT ListenInterval;NDIS_802_11_MAC_ADDRESS CurrentAPAddress;};
union _IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835 {ULONGLONG Alignment;_IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835___A65BB09441F58C3866A236B20CDA4416 __anonymous0;};
union _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45 {struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 SymbolicLinkReparseBuffer;struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 MountPointReparseBuffer;struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F {HWND hwndOwner;DWORD cMultipleItems;};
union _IP_ADAPTER_PREFIX___23F2028746C462BFE5D94E935572A0E9 {ULONGLONG Alignment;_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533___558C11AAB270A8DE5636A48AC52A55A4 __anonymous0;};
struct _ISA_PNP_RESOURCES___B10D0EB096FDB570503A50FD378F9FB4 {USHORT MemoryBase;USHORT MemoryUpperLimit;UCHAR MemoryControl;};
struct _ISA_PNP_RESOURCES___CBBBBB801E0B5AAFC7252BC6A195EFA3 {DWORD MemoryBase;DWORD MemoryUpperLimit;UCHAR MemoryControl;};
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 {UINT nStartPage;LPCSTR pStartPage;};
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 {LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE *phpage;};
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 {LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE *phpage;};
union _CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0 {DWORD dwFailInfo;PCMC_PEND_INFO pPendInfo;};
union _MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76 {ULONGLONG ullAlign;BYTE rgbyData[1];};
union _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF {struct _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF___A9FC48894F8D14019CAF4D8F08A526D6 bits;ULONG AsULONG;};
union ProfilerControl___129768231BCEF2215A31782384C84F0E {struct ProfilerControl___129768231BCEF2215A31782384C84F0E___60B1718D3020D7E9553B4563664AAB69 Kernel;struct ProfilerControl___129768231BCEF2215A31782384C84F0E___7F14D5CA1569ED1B5DE5D2F9C51A1434 OEM;};
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 {DWORD dwValue;ALG_ID Algid;DWORD dwLength;};
union _DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
union _DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D {DDCOLORKEY ddckCKDestOverlay;DWORD dwEmptyFaceColor;};
union _DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842 {DDPIXELFORMAT ddpfPixelFormat;DWORD dwFVF;};
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 {handle_t *pAutoHandle;handle_t *pPrimitiveHandle;PGENERIC_BINDING_INFO pGenericBindingInfo;};
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 {LPCSTR pszTemplate;LPCDLGTEMPLATE pResource;};
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0 {LOGFONTA A;LOGFONTW W;};
union _DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360 {DWORD dwGBitMask;DWORD dwUBitMask;DWORD dwZBitMask;DWORD dwBumpDvBitMask;struct _DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360___A78036EB239B85FA27F661E6E98FFEA9 MultiSampleCaps;};
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
union _FIREWALL_RULE___973FCA0161B39F61E7428A3C8AFC48CB {UINT PublicHostPrefixLength;IN_ADDR PublicHostMask;};
union _FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0 {_FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___1F732941DC73F2F4B18392F9D66856DC __anonymous0;_FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___C3A437D225B8ED983937C7D8822FFF10 __anonymous1;};
union _FW_IP_ADDRESS___3527238699F3EEF5D435929F9A6EFFF0 {IN6_ADDR AddressIPv6;IN_ADDR AddressIPv4;};
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E {DWORD LowPart;LONG HighPart;};
union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F {int irdaAttribInt;struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___3558499B00780F336C093631BA5DA9A7 irdaAttribOctetSeq;struct _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F___6F55BDC2B20B661E3B87B545C6DF801F irdaAttribUsrStr;};
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
struct _INSTALLSPEC___280CBF6B7A133B5B4CDCF4989FA21BAE {WCHAR *Name;GUID GPOId;};
struct _INSTALLSPEC___BA048A39EDAE67FECCBF1A4089D0E28B {GUID Clsid;DWORD ClsCtx;};
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F {DWORD dwOemId;_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 __anonymous0;};
union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3 {int irdaAttribInt;struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___3558499B00780F336C093631BA5DA9A7 irdaAttribOctetSeq;struct _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3___6F55BDC2B20B661E3B87B545C6DF801F irdaAttribUsrStr;};
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D {IDLDESC idldesc;PARAMDESC paramdesc;};
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;BOOL fCommercial;};
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 {struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE Bytes;struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E Bits;};
union _NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E {NDIS_OID Oid;NDIS_STATUS Status;};
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B {ULONG oInst;VARIANT *lpvarValue;};
union ARTICLEID___647512AA9B67F9C9BB99261C4EFD0D05 {LPSTR pszMessageId;DWORD dwArticleNum;};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {DWORD cbSize;BOOL fCommercial;};
union _DDSCAPS2___8E5B05F19B273318D79B4635679340DD {_DDSCAPS2___8E5B05F19B273318D79B4635679340DD___A4C750532322E8B339E2E1239D122058 __anonymous0;DDSCAPSEX ddsCapsEx;};
struct _timecode___6889D7C8638655C86F211076F8C624CB {WORD wFrameRate;WORD wFrameFract;DWORD dwFrames;};
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C {CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;CRYPT_HASH_BLOB KeyId;CRYPT_HASH_BLOB HashId;};
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C {DWORD dwFillColor;DWORD dwFillDepth;DWORD dwFillPixel;LPDIRECTDRAWSURFACE lpDDSPattern;};
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19 {DWORD dwZSrcConst;LPDIRECTDRAWSURFACE lpDDSZBufferSrc;};
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 {DWORD dwZDestConst;LPDIRECTDRAWSURFACE lpDDSZBufferDest;};
union in6_addr___8ED4E7701E25C3FE29CB3F55C2DB6D15 {u_char Byte[16];u_short Word[8];};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;PCMSG_SIGNER_INFO pSignerInfo;};
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA {PVOID FiberData;DWORD Version;};
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34 {tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B __anonymous0;USHORT signscale;};
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301 {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous0;ULONGLONG Lo64;};
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {LPSTR pszOrganization;DWORD cNoticeNumbers;int *rgNoticeNumbers;};
union _IRP___CBBBB9F4F0755A16DC8A369061485BEC {struct _IRP *MasterIrp;LONG IrpCount;PVOID SystemBuffer;};
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {LARGE_INTEGER TotalUserTime;LARGE_INTEGER TotalKernelTime;LARGE_INTEGER ThisPeriodTotalUserTime;LARGE_INTEGER ThisPeriodTotalKernelTime;DWORD TotalPageFaultCount;DWORD TotalProcesses;DWORD ActiveProcesses;DWORD TotalTerminatedProcesses;};
typedef BOOL ( *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT pCert, void *pvFindArg);
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;CRYPT_DATA_BLOB blob;};
struct _NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulMediaModes;};
union _userCLIPFORMAT____MIDL_IWinTypes_0001 {DWORD dwValue;unsigned short *pwszName;};
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {DWORD cOID;LPSTR *rgpszOID;};
struct _CO_AF_TAPI_INCOMING_CALL_PARAMETERS {ULONG ulLineID;ULONG ulAddressID;ULONG ulFlags;NDIS_VAR_DATA_DESC LineCallInfo;};
struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY {ULONG uMultiDomainCapabilityIndex;ULONG uFirstChannelNumber;ULONG uNumberOfChannels;LONG lMaximumTransmitPowerLevel;};
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {PVOID CompletionKey;HANDLE CompletionPort;};
struct __MIDL___MIDL_itf_shobjidl_0116_0002 {GUID fmtid;DWORD pid;};
struct _avisuperindex___avisuperindex_entry {DWORDLONG qwOffset;DWORD dwSize;DWORD dwDuration;};
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwSignerIndex;DWORD dwSignerType;void *pvSigner;};
struct _NDIS_802_11_AUTHENTICATION_REQUEST {ULONG Length;NDIS_802_11_MAC_ADDRESS Bssid;ULONG Flags;};
struct _SecPkgContext_RemoteCredentialInfo {DWORD cbCertificateChain;PBYTE pbCertificateChain;DWORD cCertificates;DWORD fFlags;DWORD dwBits;};
typedef void ( *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags);
struct _CO_TAPI_TRANSLATE_NDIS_CALLPARAMS {ULONG ulFlags;NDIS_VAR_DATA_DESC NdisCallParams;NDIS_VAR_DATA_DESC LineCallInfo;};
struct _CO_TAPI_TRANSLATE_TAPI_CALLPARAMS {ULONG ulLineID;ULONG ulAddressID;ULONG ulFlags;NDIS_VAR_DATA_DESC DestAddress;NDIS_VAR_DATA_DESC LineCallParams;NDIS_VAR_DATA_DESC NdisCallParams;};
struct _DOT11_CURRENT_OPTIONAL_CAPABILITY {ULONG uReserved;BOOL bDot11CFPollable;BOOL bDot11PCF;BOOL bDot11PCFMPDUTransferToPC;BOOL bStrictlyOrderedServiceClass;};
struct _DOT11_DIVERSITY_SELECTION_RX_LIST {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_DIVERSITY_SELECTION_RX dot11DiversitySelectionRx[1];};
struct _INTERNET_CACHE_CONFIG_PATH_ENTRYA {CHAR CachePath[260];DWORD dwCacheSize;};
struct _INTERNET_CACHE_CONFIG_PATH_ENTRYW {WCHAR CachePath[260];DWORD dwCacheSize;};
struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS {ULONG NumAdapters;IPAddr Address[1];};
struct _SecPkgContext_LocalCredentialInfo {DWORD cbCertificateChain;PBYTE pbCertificateChain;DWORD cCertificates;DWORD fFlags;DWORD dwBits;};
struct __MIDL___MIDL_itf_strmif_0099_0002 {REFERENCE_TIME tStart;REFERENCE_TIME tStop;DWORD dwStartCookie;DWORD dwStopCookie;DWORD dwFlags;};
struct tagDVD_MultichannelAudioAttributes {DVD_MUA_MixingInfo Info[8];DVD_MUA_Coeff Coeff[8];};
struct _0AD2D8D1BD5FB2EC4188290EECBF472F {DWORD_PTR dwResult;DWORD dwError;};
struct _0B98F7F74C669A73C109E26A7282B4DF {DWORD dwCookieState;BOOL fAllowSession;};
struct _13B347001B2B96C65D01839EEA37C971 {INT cDig;ULONG dwInFlags;ULONG dwOutFlags;INT cchUsed;INT nBaseShift;INT nPwr10;};
struct _17F3FD07C99F0D37811DB8E7808607BC {UINT cbSize;LPSTR pszUrl;LPSTR pszFriendlyName;LPSTR pszLang;LPSTR pszRegion;};
struct _1C9ED8E2FE494C714F8336D090291E50 {DWORD style;DWORD dwExtendedStyle;WORD cdit;short x;short y;short cx;short cy;};
union _25126A14EDD85516184FD5A53ADA74D5 {_25126A14EDD85516184FD5A53ADA74D5___49138D03018A299D3153760A1810DA37 __anonymous0;BYTE cc_RAdr;BYTE cc_RMsk;};
struct _271E49C86C8EFA0B647D87A58CF03284 {unsigned int RoundingMode : 2;unsigned int Precision : 3;unsigned int Operation : 12;_FPIEEE_EXCEPTION_FLAGS Cause;_FPIEEE_EXCEPTION_FLAGS Enable;_FPIEEE_EXCEPTION_FLAGS Status;_FPIEEE_VALUE Operand1;_FPIEEE_VALUE Operand2;_FPIEEE_VALUE Result;};
struct _28B4C1B75CAE6C770B09685B06A94D5B {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;};
struct _328060AA9F47934214406E09F9D6352A {ULONG cb;BYTE ab[1];};
struct _33F4F007281270209645FC22B7FA2C59 {UINT cbSize;LPSTR pszLang;LPSTR pszRegion;};
struct _3A744348A6C9F73853F568E19FD6B4F7 {REFERENCE_TIME StartTime;LONG Rate;};
struct _3EB284A884AA968851CCD5BE7E4B68CB {DWORD Layer2Protocol;UCHAR Layer2Mode;UCHAR Layer2WindowSize;DWORD Layer2UserSpecifiedProtocol;DWORD Layer3Protocol;UCHAR Layer3Mode;UCHAR Layer3DefaultPacketSize;UCHAR Layer3PacketWindowSize;DWORD Layer3UserSpecifiedProtocol;DWORD Layer3IPI;UCHAR SnapID[5];};
struct _459629BAC169663B96C3B85C5F4E781B {DWORD Layer2Protocol;DWORD Layer2UserSpecifiedProtocol;DWORD Layer3Protocol;DWORD Layer3UserSpecifiedProtocol;DWORD Layer3IPI;UCHAR SnapID[5];};
struct _64711BDE50DED9ED482573D36995441D {HANDLE hMsgQueue;DWORD dwNotificationTypes;};
struct _683A07C7E5B3B29A9EBE9FB3AE677E07 {AAL_TYPE AALType;union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344 AALSpecificParameters;};
struct _70BF96555A8221A8BC520C987124981D {ULONG cEntries;ULONG cbEntries;BYTE abEntries[1];};
struct _70EF98671D92E01A751E5EFF82E819E9 {ATM_ADDRESS ATM_Number;UCHAR Presentation_Indication;UCHAR Screening_Indicator;};
struct _7545F1A067A9FBB43FDF50E78E6B08BD {SYSTEMTIME st;USHORT wDayOfYear;};
struct _75E76725892DEE09A36EC583FA7F4E2E {TCHAR wzPackageID[300];DWORD dwState;};
struct _7C01EC4AA5C6496238BC9707060AB8CE {DWORD cbSize;DWORD dwInstallSize;DWORD dwWinDriveSize;DWORD dwDownloadSize;DWORD dwDependancySize;DWORD dwInstallDriveReq;DWORD dwWinDriveReq;DWORD dwDownloadDriveReq;CHAR chWinDrive;CHAR chInstallDrive;CHAR chDownloadDrive;DWORD dwTotalDownloadSize;};
struct _862005EC9EDD7026C51E0C19A67AAE6E {ULONG cMTSIDs;ULONG cbMTSIDs;BYTE abMTSIDs[1];};
struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 {ULONG cb;BYTE abEntry[1];};
struct _947C6FA139885FA2B0DE7F2A3FDD942C {DWORD style;DWORD dwExtendedStyle;short x;short y;short cx;short cy;WORD id;};
struct _9BDEEC9D290208213B3D235A4099D9F6 {DWORD cbStruct;LONG cClasses;DWORD offsetClass[1];};
struct _ABC12D3D27847D90880B2A365197CC67 {DWORD_PTR Socket;DWORD SourcePort;DWORD DestPort;DWORD Flags;};
struct _B39C686D84F1EA3E9B3743A81E5F4B95 {DWORD cbSize;HWND hwndLastFocus;unsigned int fSipUp : 1;unsigned int fSipOnDeactivation : 1;unsigned int fActive : 1;unsigned int fReserved : 29;};
struct _B6822E6B2532C41BAC9FA8CDDAB44A4D {DWORD AddressType;DWORD NumofDigits;UCHAR Addr[20];};
struct _C0E9FF9F6B7B062E990DE9E300C0D00E {ULONG ForwardMaxCPCSSDUSize;ULONG BackwardMaxCPCSSDUSize;UCHAR Mode;UCHAR SSCSType;};
struct _C3795B4C40F1F780E52EE60833F04917 {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;DWORD LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;DWORD EditList;DWORD Reserved[1];};
struct _C60E957D81AACC99A9C8D1688EAC55F2 {ULONG PeakCellRate_CLP0;ULONG PeakCellRate_CLP01;ULONG SustainableCellRate_CLP0;ULONG SustainableCellRate_CLP01;ULONG MaxBurstSize_CLP0;ULONG MaxBurstSize_CLP01;BOOL Tagging;};
struct _CE02AD95896D5CE1FBC89EB4094A5E1C {ULONG dwFlags;ULONG dwReserved;WCHAR wszFolder[260];};
struct _D63E714A239F9C0D1FE2D222C2E0E7D5 {REFERENCE_TIME OutputZeroTime;LONG Rate;};
struct _DD2E0983FBF83F36606C69DABA2BC276 {HINSTANCE hInstOld;UINT nIDOld;HINSTANCE hInstNew;UINT nIDNew;int nButtons;};
struct _E3EDD7A8EB9A8A8EC907A9BA28720893 {ATM_TD Forward;ATM_TD Backward;BOOL BestEffort;};
struct _E6EEE8D03854377210BB1626C10183C8 {ATM_CONNECTION_ID PvcConnectionId;QOS PvcQos;};
struct _F0080E258AF97822278D302FBC4D344F {DWORD HighLayerInfoType;DWORD HighLayerInfoLength;UCHAR HighLayerInfo[8];};
struct _FBE7179BAB40555F1A13AD3C5BC3BB71 {BOOL fStereo;ULONG DualMode;};
typedef SECURITY_STATUS ( *QUERY_CREDENTIALS_ATTRIBUTES_FN_A)(PCredHandle, unsigned int, void *);
typedef SECURITY_STATUS ( *QUERY_CREDENTIALS_ATTRIBUTES_FN_W)(PCredHandle, unsigned int, void *);
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedPrivateKey;};
struct _DOT11_HOPPING_PATTERN_ENTRY_LIST {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_HOPPING_PATTERN_ENTRY dot11HoppingPatternEntry[1];};
typedef SECURITY_STATUS ( *ENUMERATE_SECURITY_PACKAGES_FN_A)(unsigned int *, PSecPkgInfoA *);
typedef SECURITY_STATUS ( *ENUMERATE_SECURITY_PACKAGES_FN_W)(unsigned int *, PSecPkgInfoW *);
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {DWORD cbSize;CRYPT_DATA_BLOB EncryptedKey;};
struct _CO_AF_TAPI_MAKE_CALL_PARAMETERS {ULONG ulLineID;ULONG ulAddressID;ULONG ulFlags;NDIS_VAR_DATA_DESC DestAddress;NDIS_VAR_DATA_DESC LineCallParams;};
struct _DEV_BROADCAST_DEVICEINTERFACE_A {DWORD dbcc_size;DWORD dbcc_devicetype;DWORD dbcc_reserved;GUID dbcc_classguid;char dbcc_name[1];};
struct _DOT11_REG_DOMAINS_SUPPORT_VALUE {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_REG_DOMAIN_VALUE dot11RegDomainValue[1];};
struct _IMAGE_RESOURCE_DIRECTORY_STRING {WORD Length;CHAR NameString[1];};
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {DWORD NumberOfAssignedProcesses;DWORD NumberOfProcessIdsInList;ULONG_PTR ProcessIdList[1];};
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {HANDLE hClientToken;LPWIN_CERTIFICATE lpCertificate;};
typedef SECURITY_STATUS ( *IMPERSONATE_SECURITY_CONTEXT_FN)(PCtxtHandle);
typedef BOOL ( *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve);
typedef void ( *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid, LPVOID pvParam);
typedef BOOL (*PFN_PROVIDER_CERTCHKPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSignerChain, DWORD idxCounterSigner);
typedef SECURITY_STATUS ( *QUERY_SECURITY_CONTEXT_TOKEN_FN)(PCtxtHandle, void **);
struct _CERT_X942_DH_VALIDATION_PARAMS {CRYPT_BIT_BLOB seed;DWORD pgenCounter;};
struct _DOT11_MD_CAPABILITY_ENTRY_LIST {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY dot11MDCapabilityEntry[1];};
struct _INTERNET_CACHE_CONTAINER_INFOA {DWORD dwCacheVersion;LPSTR lpszName;LPSTR lpszCachePrefix;LPSTR lpszVolumeLabel;LPSTR lpszVolumeTitle;};
struct _SecPkgContext_IssuerListInfoEx {PCERT_NAME_BLOB aIssuers;DWORD cIssuers;};
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
struct creative_fastspeech10format_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef BOOL (*LPRELEASE_FRAME_LENGTH_CONTROL)(USB_HANDLE);
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;};
struct _DOT11_ASSOC_INDICATION_UPCALL {DOT11_MAC_ADDRESS PeerMacAddress;USHORT usAID;USHORT usDefaultKeyID;};
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {DWORD TimeDateStamp;WORD OffsetModuleName;WORD NumberOfModuleForwarderRefs;};
struct _IP_ADAPTER_DNS_SERVER_ADDRESS {_IP_ADAPTER_DNS_SERVER_ADDRESS___A6570BAA5932C6346D901B9BF1500764 __anonymous0;struct _IP_ADAPTER_DNS_SERVER_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _NDIS_802_11_NETWORK_TYPE_LIST {ULONG NumberOfItems;NDIS_802_11_NETWORK_TYPE NetworkType[1];};
struct _NDIS_TAPI_GET_CALL_ADDRESS_ID {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulAddressID;};
struct _NDIS_TAPI_PROVIDER_INITIALIZE {ULONG ulRequestID;ULONG ulDeviceIDBase;ULONG ulNumLineDevs;ULONG_PTR ulProviderID;};
struct _NDIS_TAPI_SET_STATUS_MESSAGES {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulLineStates;ULONG ulAddressStates;};
struct creative_fastspeech8format_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct mediaspace_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef SECURITY_STATUS ( *QUERY_CONTEXT_ATTRIBUTES_FN_A)(PCtxtHandle, unsigned int, void *);
typedef SECURITY_STATUS ( *QUERY_CONTEXT_ATTRIBUTES_FN_W)(PCtxtHandle, unsigned int, void *);
struct _CERT_BASIC_CONSTRAINTS2_INFO {BOOL fCA;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;};
struct _CERT_POLICY_CONSTRAINTS_INFO {BOOL fRequireExplicitPolicy;DWORD dwRequireExplicitPolicySkipCerts;BOOL fInhibitPolicyMapping;DWORD dwInhibitPolicyMappingSkipCerts;};
struct _DOT11_DIVERSITY_SELECTION_RX {ULONG uAntennaListIndex;BOOL bDiversitySelectionRX;};
struct _DOT11_NIC_SPECIFIC_EXTENSION {ULONG uBufferLength;ULONG uTotalBufferLength;UCHAR ucBuffer[1];};
struct _DOT11_NIC_SPECIFIC_EXTN_LIST {ULONG uNumOfBytes;PUCHAR pucBuffer;};
struct _DOT11_SUPPORTED_ANTENNA_LIST {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_SUPPORTED_ANTENNA dot11SupportedAntenna[1];};
struct _GENERIC_BINDING_ROUTINE_PAIR {GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct _IP_ADAPTER_MULTICAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_MULTICAST_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _NDIS_TAPI_SELECT_EXT_VERSION {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulExtVersion;};
struct _SecPkgContext_ConnectionInfo {DWORD dwProtocol;ALG_ID aiCipher;DWORD dwCipherStrength;ALG_ID aiHash;DWORD dwHashStrength;ALG_ID aiExch;DWORD dwExchStrength;};
struct _SecPkgContext_IssuerListInfo {DWORD cbIssuerList;PBYTE pIssuerList;};
struct _SecPkgContext_MappedCredAttr {DWORD dwAttribute;PVOID pvBuffer;};
struct _USB_CONFIGURATION_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;USHORT wTotalLength;UCHAR bNumInterfaces;UCHAR bConfigurationValue;UCHAR iConfiguration;UCHAR bmAttributes;UCHAR MaxPower;};
struct _structDVD_TEXT_LANGUAGE_UNIT {UINT16 tdlc;UINT8 charset;};
struct tMIXERCONTROLDETAILS_LISTTEXT {DWORD dwParam1;DWORD dwParam2;TCHAR szName[64];};
typedef HRESULT  IWABOBJECT_FreeBuffer_METHOD(struct _IWABOBJECT *This, LPVOID lpBuffer);
typedef void ( *PFN_CDF_PARSE_ERROR_CALLBACK)(DWORD dwErrorArea, DWORD dwLocalError, WCHAR *pwszLine);
struct _CROSS_CERT_DIST_POINTS_INFO {DWORD dwSyncDeltaTime;DWORD cDistPoint;PCERT_ALT_NAME_INFO rgDistPoint;};
struct _CRYPT_PASSWORD_CREDENTIALSA {DWORD cbSize;LPSTR pszUsername;LPSTR pszPassword;};
struct _IMAGE_RESOURCE_DIR_STRING_U {WORD Length;WCHAR NameString[1];};
struct _IMAGE_SEPARATE_DEBUG_HEADER {WORD Signature;WORD Flags;WORD Machine;WORD Characteristics;DWORD TimeDateStamp;DWORD CheckSum;DWORD ImageBase;DWORD SizeOfImage;DWORD NumberOfSections;DWORD ExportedNamesSize;DWORD DebugDirectorySize;DWORD SectionAlignment;DWORD Reserved[2];};
struct creative_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef BOOL (*LPTAKE_FRAME_LENGTH_CONTROL)(USB_HANDLE);
struct _BY_HANDLE_FILE_INFORMATION {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD dwVolumeSerialNumber;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD nNumberOfLinks;DWORD nFileIndexHigh;DWORD nFileIndexLow;DWORD dwOID;};
struct _CERT_AUTHORITY_INFO_ACCESS {DWORD cAccDescr;PCERT_ACCESS_DESCRIPTION rgAccDescr;};
struct _CERT_NAME_CONSTRAINTS_INFO {DWORD cPermittedSubtree;PCERT_GENERAL_SUBTREE rgPermittedSubtree;DWORD cExcludedSubtree;PCERT_GENERAL_SUBTREE rgExcludedSubtree;};
struct _CERT_POLICY_QUALIFIER_INFO {LPSTR pszPolicyQualifierId;CRYPT_OBJID_BLOB Qualifier;};
struct _CMSG_ENCRYPTED_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;};
struct _CRYPT_ALGORITHM_IDENTIFIER {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _CRYPT_ATTRIBUTE_TYPE_VALUE {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CRYPT_DECRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD cCertStore;HCERTSTORE *rghCertStore;};
struct _DOT11_DISASSOCIATE_REQUEST {USHORT AID;DOT11_MAC_ADDRESS PeerMacAddress;USHORT usReason;};
struct _INTERNET_CACHE_GROUP_INFOA {DWORD dwGroupSize;DWORD dwGroupFlags;DWORD dwGroupType;DWORD dwDiskUsage;DWORD dwDiskQuota;DWORD dwOwnerStorage[4];CHAR szGroupName[120];};
struct _INTERNET_CACHE_GROUP_INFOW {DWORD dwGroupSize;DWORD dwGroupFlags;DWORD dwGroupType;DWORD dwDiskUsage;DWORD dwDiskQuota;DWORD dwOwnerStorage[4];WCHAR szGroupName[120];};
struct _IP_ADAPTER_ANYCAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_ANYCAST_ADDRESS *Next;SOCKET_ADDRESS Address;};
struct _MIB_IPMCAST_BOUNDARY_TABLE {DWORD dwNumEntries;MIB_IPMCAST_BOUNDARY table[1];};
struct _NDIS_TAPI_GET_ADDRESS_CAPS {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulAddressID;ULONG ulExtVersion;LINE_ADDRESS_CAPS LineAddressCaps;};
struct _NDIS_TAPI_GET_EXTENSION_ID {ULONG ulRequestID;ULONG ulDeviceID;LINE_EXTENSION_ID LineExtensionID;};
struct _NDIS_TAPI_SET_APP_SPECIFIC {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulAppSpecific;};
struct _POWER_BROADCAST_POWER_INFO {DWORD dwNumLevels;DWORD dwBatteryLifeTime;DWORD dwBatteryFullLifeTime;DWORD dwBackupBatteryLifeTime;DWORD dwBackupBatteryFullLifeTime;BYTE bACLineStatus;BYTE bBatteryFlag;BYTE bBatteryLifePercent;BYTE bBackupBatteryFlag;BYTE bBackupBatteryLifePercent;};
struct _SHChangeProductKeyAsIDList {USHORT cb;WCHAR wszProductKey[39];USHORT cbZero;};
struct contres_vqlpcwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct nms_vbxadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct phoneinitializeexparams_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwOptions;union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F Handles;DWORD dwCompletionKey;};
typedef SECURITY_STATUS ( *DELETE_SECURITY_CONTEXT_FN)(PCtxtHandle);
typedef SECURITY_STATUS ( *FREE_CREDENTIALS_HANDLE_FN)(PCredHandle);
struct NDIS_BPC_CONNECTION_ENABLE {BPC_HANDLE nhConnection;BOOLEAN fEnabled;};
typedef BOOLEAN (*PFAST_IO_MDL_READ_COMPLETE)(struct _FILE_OBJECT *FileObject, PMDL MdlChain, struct _DEVICE_OBJECT *DeviceObject);
typedef BOOL ( *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags, void *pvArg);
typedef SECURITY_STATUS ( *REVERT_SECURITY_CONTEXT_FN)(PCtxtHandle);
struct _CERT_ISSUER_SERIAL_NUMBER {CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;};
struct _CERT_POLICY_MAPPINGS_INFO {DWORD cPolicyMapping;PCERT_POLICY_MAPPING rgPolicyMapping;};
struct _DOT11_OPTIONAL_CAPABILITY {ULONG uReserved;BOOL bDot11PCF;BOOL bDot11PCFMPDUTransferToPC;BOOL bStrictlyOrderedServiceClass;};
struct _DOT11_SUPPORTED_PHY_TYPES {ULONG uNumOfEntries;ULONG uTotalNumOfEntries;DOT11_PHY_TYPE dot11PHYType[1];};
struct _HTTP_FILTER_ACCESS_DENIED { CHAR *pszURL; CHAR *pszPhysicalPath;DWORD dwReason;};
struct _IMAGE_BOUND_FORWARDER_REF {DWORD TimeDateStamp;WORD OffsetModuleName;WORD Reserved;};
struct _NDIS_802_11_BSSID_LIST_EX {ULONG NumberOfItems;NDIS_WLAN_BSSID_EX Bssid[1];};
struct _NDIS_802_11_CONFIGURATION {ULONG Length;ULONG BeaconPeriod;ULONG ATIMWindow;ULONG DSConfig;NDIS_802_11_CONFIGURATION_FH FHConfig;};
struct _SCH_CRED_PUBLIC_CERTCHAIN {DWORD dwType;DWORD cbCertChain;PBYTE pCertChain;};
struct _TAPE_GET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD DefaultBlockSize;DWORD MaximumBlockSize;DWORD MinimumBlockSize;DWORD MaximumPartitionCount;DWORD FeaturesLow;DWORD FeaturesHigh;DWORD EOTWarningZoneSize;};
struct _TAPE_SET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD EOTWarningZoneSize;};
struct _WIN32_FILE_ATTRIBUTE_DATA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;};
struct contres_cr10waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct fmtowns_snd_waveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct lineinitializeexparams_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwOptions;union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F Handles;DWORD dwCompletionKey;};
struct sierra_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct tagCOMMANDBANDSRESTOREINFO {UINT cbSize;UINT wID;UINT fStyle;UINT cxRestored;BOOL fMaximized;};
typedef DWORD ( *LPTRANSFER_NOTIFY_ROUTINE)(LPVOID lpvNotifyParameter);
typedef void ( *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv, DWORD dwFlags);
typedef void ( *PFN_LMEMRemoveTrackedItem)(HANDLE hHeap, LPVOID pAllocMem);
typedef int ( *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding, unsigned int RequestedMgmtOperation, RPC_STATUS *Status);
struct _ACTRL_ACCESS_ENTRY_LISTA {ULONG cEntries;ACTRL_ACCESS_ENTRYA *pAccessList;};
struct _ACTRL_ACCESS_ENTRY_LISTW {ULONG cEntries;ACTRL_ACCESS_ENTRYW *pAccessList;};
struct _AUDIO_STREAM_CONFIG_CAPS {GUID guid;ULONG MinimumChannels;ULONG MaximumChannels;ULONG ChannelsGranularity;ULONG MinimumBitsPerSample;ULONG MaximumBitsPerSample;ULONG BitsPerSampleGranularity;ULONG MinimumSampleFrequency;ULONG MaximumSampleFrequency;ULONG SampleFrequencyGranularity;};
struct _CERT_CHAIN_ENGINE_CONFIG {DWORD cbSize;HCERTSTORE hRestrictedRoot;HCERTSTORE hRestrictedTrust;HCERTSTORE hRestrictedOther;DWORD cAdditionalStore;HCERTSTORE *rghAdditionalStore;DWORD dwFlags;DWORD dwUrlRetrievalTimeout;DWORD MaximumCachedCertificates;DWORD CycleDetectionModulus;};
struct _CERT_CHAIN_POLICY_STATUS {DWORD cbSize;DWORD dwError;LONG lChainIndex;LONG lElementIndex;void *pvExtraPolicyStatus;};
struct _CERT_CREATE_CONTEXT_PARA {DWORD cbSize;PFN_CRYPT_FREE pfnFree;void *pvFree;};
struct _CO_TAPI_CALL_DIAGNOSTICS {ULONG ulOrigin;ULONG ulReason;NDIS_VAR_DATA_DESC DiagInfo;};
struct _CRYPT_SMIME_CAPABILITIES {DWORD cCapability;PCRYPT_SMIME_CAPABILITY rgCapability;};
struct _DOT11_DIV_SELECT_RX_LIST {ULONG uNumOfEntries;PDOT11_DIVERSITY_SELECTION_RX pDot11DivSelectRx;};
struct _IMAGE_RESOURCE_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;WORD NumberOfNamedEntries;WORD NumberOfIdEntries;};
struct _MIDL_STUBLESS_PROXY_INFO {PMIDL_STUB_DESC pStubDesc;PFORMAT_STRING ProcFormatString; unsigned short *FormatStringOffset;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString; unsigned short *LocalFmtStringOffset;};
struct _NDIS_TAPI_GET_DEV_CONFIG {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulDeviceClassSize;ULONG ulDeviceClassOffset;VAR_STRING DeviceConfig;};
struct _NDIS_TAPI_LINE_TRANSLATE {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulAddressInLen;ULONG ulCard;ULONG ulTranslateOptions;ULONG ulLineTranslateOutputOffset;UCHAR DataBuf[1];};
struct _NDIS_TAPI_MONITOR_DIGITS {HDRV_CALL hdCall;ULONG ulDigitModes;};
struct _NDIS_TAPI_SET_DEV_CONFIG {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulDeviceClassSize;ULONG ulDeviceClassOffset;ULONG ulDeviceConfigSize;UCHAR DeviceConfig[1];};
struct _NDIS_TAPI_SET_MEDIA_MODE {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulMediaMode;};
struct _OUTPUT_DEBUG_STRING_INFO {LPSTR lpDebugStringData;WORD fUnicode;WORD nDebugStringLength;};
struct _SecPkgCred_SupportedAlgs {DWORD cSupportedAlgs;ALG_ID *palgSupportedAlgs;};
struct _structDVD_TITLE_SET_INFO {UINT16 nParts;UINT16 parentalID;UINT8 titlePlaybackType;UINT8 nAngles;UINT8 vtsn;UINT8 vts_ttn;};
struct tagDVD_PLAYBACK_LOCATION2 {ULONG TitleNum;ULONG ChapterNum;DVD_HMSF_TIMECODE TimeCode;ULONG TimeCodeFlags;};
struct tagIMAP_LISTLSUB_RESPONSE {LPSTR pszMailboxName;IMAP_MBOXFLAGS imfMboxFlags;char cHierarchyChar;};
typedef HRESULT  IWABOBJECT_Backup_METHOD(struct _IWABOBJECT *This, LPSTR lpFileName);
typedef HRESULT  IWABOBJECT_Import_METHOD(struct _IWABOBJECT *This, LPSTR lpImportParam);
struct NDIS_BPC_ADDRESS_COMPARE {BOOLEAN fEqual;ULONG ulcbFirstOffset;ULONG ulcbFirstLength;ULONG ulcbSecondOffset;ULONG ulcbSecondLength;};
typedef HANDLE (*PFNCESTARTDEVMGMTSERVICE)(int nAction, HWND hWnd);
struct _CERT_ACCESS_DESCRIPTION {LPSTR pszAccessMethod;CERT_ALT_NAME_ENTRY AccessLocation;};
struct _CERT_X942_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB j;PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;};
struct _CMC_ADD_ATTRIBUTES_INFO {DWORD dwCmcDataReference;DWORD cCertReference;DWORD *rgdwCertReference;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _CMC_ADD_EXTENSIONS_INFO {DWORD dwCmcDataReference;DWORD cCertReference;DWORD *rgdwCertReference;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CMC_TAGGED_CERT_REQUEST {DWORD dwBodyPartID;CRYPT_DER_BLOB SignedCertRequest;};
struct _CMC_TAGGED_CONTENT_INFO {DWORD dwBodyPartID;CRYPT_DER_BLOB EncodedContentInfo;};
struct _CRYPT_PROVIDER_PRIVDATA {DWORD cbStruct;GUID gProviderID;DWORD cbProvData;void *pvProvData;};
struct _CRYPT_REGISTER_ACTIONID {DWORD cbStruct;CRYPT_TRUST_REG_ENTRY sInitProvider;CRYPT_TRUST_REG_ENTRY sObjectProvider;CRYPT_TRUST_REG_ENTRY sSignatureProvider;CRYPT_TRUST_REG_ENTRY sCertificateProvider;CRYPT_TRUST_REG_ENTRY sCertificatePolicyProvider;CRYPT_TRUST_REG_ENTRY sFinalPolicyProvider;CRYPT_TRUST_REG_ENTRY sTestPolicyProvider;CRYPT_TRUST_REG_ENTRY sCleanupProvider;};
struct _CRYPT_RETRIEVE_AUX_INFO {DWORD cbSize;FILETIME *pLastSyncTime;DWORD dwMaxUrlRetrievalByteCount;};
struct _DOT11_DISCONNECTED_PEER {ULONG uReason;DOT11_MAC_ADDRESS dot11Station;};
struct _DOT11_SUPPORTED_ANTENNA {ULONG uAntennaListIndex;BOOL bSupportedAntenna;};
struct _FILE_NOTIFY_INFORMATION {DWORD NextEntryOffset;DWORD Action;DWORD FileNameLength;WCHAR FileName[1];};
struct _IMAGE_IMPORT_DESCRIPTOR {_IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 __anonymous0;DWORD TimeDateStamp;DWORD ForwarderChain;DWORD Name;DWORD FirstThunk;};
struct _NDIS_TAPI_CONFIG_DIALOG {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulDeviceClassSize;ULONG ulDeviceClassOffset;ULONG ulLibraryNameTotalSize;ULONG ulLibraryNameNeededSize;CHAR szLibraryName[1];};
struct _SYSTEM_POWER_STATUS_EX2 {BYTE ACLineStatus;BYTE BatteryFlag;BYTE BatteryLifePercent;BYTE Reserved1;DWORD BatteryLifeTime;DWORD BatteryFullLifeTime;BYTE Reserved2;BYTE BackupBatteryFlag;BYTE BackupBatteryLifePercent;BYTE Reserved3;DWORD BackupBatteryLifeTime;DWORD BackupBatteryFullLifeTime;DWORD BatteryVoltage;DWORD BatteryCurrent;DWORD BatteryAverageCurrent;DWORD BatteryAverageInterval;DWORD BatterymAHourConsumed;DWORD BatteryTemperature;DWORD BackupBatteryVoltage;BYTE BatteryChemistry;};
struct _USB_ENDPOINT_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;UCHAR bEndpointAddress;UCHAR bmAttributes;USHORT wMaxPacketSize;UCHAR bInterval;};
struct _structDVD_AUDIO_MU_ATTR {UINT8 atr1[8];struct _structDVD_AUDIO_MU_ATTR___9CEA1F46C8B9203C81B8253549FA0A67 atr2[8];};
struct digiadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct g721_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD nAuxBlockSize;};
struct g723_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD cbExtraSize;WORD nAuxBlockSize;};
struct tagHTTPMAILBCOPYMOVELIST {ULONG cBCopyMove;LPHTTPMAILBCOPYMOVE prgBCopyMove;};
typedef INT ( *LPNSPREMOVESERVICECLASS)(LPGUID lpProviderId, LPGUID lpServiceClassId);
typedef INT ( *LPWSCUNINSTALLNAMESPACE)(LPGUID lpProviderId);
typedef BOOL ( *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo, void *pvArg);
typedef BOOL ( *PFN_GETEXTENSIONVERSION)(HSE_VERSION_INFO *pVer);
typedef void ( *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
struct _CERT_REVOCATION_STATUS {DWORD cbSize;DWORD dwIndex;DWORD dwError;DWORD dwReason;BOOL fHasFreshnessTime;DWORD dwFreshnessTime;};
struct _CMSG_CTRL_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwRecipientIndex;};
struct _CRYPT_SMIME_CAPABILITY {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _DEV_BROADCAST_VOLUME_A {DWORD dbcv_size;DWORD dbcv_devicetype;DWORD dbcv_reserved;DWORD dbcv_unitmask;WORD dbcv_flags;char dbcv_name[1];};
struct _DMO_OUTPUT_DATA_BUFFER {IMediaBuffer *pBuffer;DWORD dwStatus;REFERENCE_TIME rtTimestamp;REFERENCE_TIME rtTimelength;};
struct _DOT11_REG_DOMAINS_LIST {ULONG uNumOfEntries;PDOT11_REG_DOMAIN_VALUE pDot11RegDomainValue;};
struct _IMAGE_EXPORT_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Name;DWORD Base;DWORD NumberOfFunctions;DWORD NumberOfNames;DWORD AddressOfFunctions;DWORD AddressOfNames;DWORD AddressOfNameOrdinals;};
struct _MESSAGE_RESOURCE_ENTRY {WORD Length;WORD Flags;BYTE Text[1];};
struct _MIB_MFE_STATS_TABLE_EX {DWORD dwNumEntries;MIB_IPMCAST_MFE_STATS_EX table[1];};
struct _NDIS_802_11_BSSID_LIST {ULONG NumberOfItems;NDIS_WLAN_BSSID Bssid[1];};
struct _NDIS_802_11_REMOVE_KEY {ULONG Length;ULONG KeyIndex;NDIS_802_11_MAC_ADDRESS BSSID;};
struct _NDIS_802_11_STATISTICS {ULONG Length;LARGE_INTEGER TransmittedFragmentCount;LARGE_INTEGER MulticastTransmittedFrameCount;LARGE_INTEGER FailedCount;LARGE_INTEGER RetryCount;LARGE_INTEGER MultipleRetryCount;LARGE_INTEGER RTSSuccessCount;LARGE_INTEGER RTSFailureCount;LARGE_INTEGER ACKFailureCount;LARGE_INTEGER FrameDuplicateCount;LARGE_INTEGER ReceivedFragmentCount;LARGE_INTEGER MulticastReceivedFrameCount;LARGE_INTEGER FCSErrorCount;};
struct _NDIS_TAPI_GET_DEV_CAPS {ULONG ulRequestID;ULONG ulDeviceID;ULONG ulExtVersion;LINE_DEV_CAPS LineDevCaps;};
struct _PROXY_ADDRCHANGE_PROPS {DWORD dwSize;SOCKADDR_STORAGE saPrivateIp;int cbsaPrivateIp;SOCKADDR_STORAGE saPublicIp;int cbsaPublicIp;};
struct _REMSECURITY_ATTRIBUTES {DWORD nLength;DWORD lpSecurityDescriptor;BOOL bInheritHandle;};
struct _SCATTER_GATHER_ELEMENT {PHYSICAL_ADDRESS Address;ULONG Length;ULONG Reserved;};
struct _SYSTEM_POWER_STATUS_EX {BYTE ACLineStatus;BYTE BatteryFlag;BYTE BatteryLifePercent;BYTE Reserved1;DWORD BatteryLifeTime;DWORD BatteryFullLifeTime;BYTE Reserved2;BYTE BackupBatteryFlag;BYTE BackupBatteryLifePercent;BYTE Reserved3;DWORD BackupBatteryLifeTime;DWORD BackupBatteryFullLifeTime;};
struct dvi_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct ima_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
typedef BOOL (*LPIS_TRANSFER_COMPLETE)(USB_TRANSFER);
typedef DWORD ( *LPTHREAD_START_ROUTINE)(LPVOID pvarg);
typedef int ( *LPWPUCLOSESOCKETHANDLE)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWPUOPENCURRENTTHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSCDEINSTALLPROVIDER)(LPGUID lpProviderId, LPINT lpErrno);
typedef int ( *LPWSCREMOVEQOSTEMPLATE)( LPGUID Guid, LPWSABUF QosName);
struct NDIS_BPC_FORCE_RECEIVE {BPC_HANDLE nhConnection;ULONG ulReasonCode;};
struct NDIS_BPC_PROGRAM_GUIDE {ULONG ulGuideType;BPC_FILETIME ftLastUpdate;ULONG ulChangeNumber;ULONG ulcbGuideSize;ULONG rgulGuideData[1];};
struct NDIS_CO_DEVICE_PROFILE {NDIS_VAR_DATA_DESC DeviceDescription;NDIS_VAR_DATA_DESC DevSpecificInfo;ULONG ulTAPISupplementaryPassThru;ULONG ulAddressModes;ULONG ulNumAddresses;ULONG ulBearerModes;ULONG ulMaxTxRate;ULONG ulMinTxRate;ULONG ulMaxRxRate;ULONG ulMinRxRate;ULONG ulMediaModes;ULONG ulGenerateToneModes;ULONG ulGenerateToneMaxNumFreq;ULONG ulGenerateDigitModes;ULONG ulMonitorToneMaxNumFreq;ULONG ulMonitorToneMaxNumEntries;ULONG ulMonitorDigitModes;ULONG ulGatherDigitsMinTimeout;ULONG ulGatherDigitsMaxTimeout;ULONG ulDevCapFlags;ULONG ulMaxNumActiveCalls;ULONG ulAnswerMode;ULONG ulUUIAcceptSize;ULONG ulUUIAnswerSize;ULONG ulUUIMakeCallSize;ULONG ulUUIDropSize;ULONG ulUUISendUserUserInfoSize;ULONG ulUUICallInfoSize;};
typedef PLMEM_HEAP_INFO ( *PFN_GetProcessHeapInfo)(HANDLE hProc);
typedef BOOL ( *PFN_TERMINATEEXTENSION)(DWORD dwFlags);
struct _CARD_EVENT_MASK_PARMS {CARD_SOCKET_HANDLE hSocket;UINT16 fAttributes;UINT16 fEventMask;};
struct _CERT_CRL_CONTEXT_PAIR {PCCERT_CONTEXT pCertContext;PCCRL_CONTEXT pCrlContext;};
struct _CO_TAPI_TRANSLATE_SAP {ULONG ulLineID;ULONG ulAddressID;ULONG ulMediaModes;ULONG Reserved;ULONG NumberOfSaps;NDIS_VAR_DATA_DESC NdisSapParams[1];};
struct _CRYPT_SEQUENCE_OF_ANY {DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct _CRYPT_TRUST_REG_ENTRY {DWORD cbStruct;WCHAR *pwszDLLName;WCHAR *pwszFunctionName;};
struct _CTL_FIND_SUBJECT_PARA {DWORD cbSize;PCTL_FIND_USAGE_PARA pUsagePara;DWORD dwSubjectType;void *pvSubject;};
struct _EXTENDED_NOTIFICATION {ULONG ulEvent;ULONG cb;LPBYTE pbEventParameters;};
struct _IMAGE_DEBUG_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Type;DWORD SizeOfData;DWORD AddressOfRawData;DWORD PointerToRawData;};
struct _MESSAGE_RESOURCE_DATA {DWORD NumberOfBlocks;MESSAGE_RESOURCE_BLOCK Blocks[1];};
struct _MIB_IPMCAST_OIF_STATS {DWORD dwOutIfIndex;DWORD dwNextHopAddr;DWORD dwDialContext;ULONG ulTtlTooLow;ULONG ulFragNeeded;ULONG ulOutPackets;ULONG ulOutDiscards;};
struct _NDIS_802_11_FIXED_IEs {UCHAR Timestamp[8];USHORT BeaconInterval;USHORT Capabilities;};
struct _NDIS_BPC_ADAPTER_CAPS {ULONG ulBPCMajorRev;ULONG ulBPCMinorRev;ULONG ulcHSDataDevices;ULONG ulbpsHSDeviceMax;ULONG ulcLSDataDevices;ULONG ulbpsLSDeviceMax;ULONG ulcTuningDevices;ULONG ulcbLargestStatus;ULONG ulVendorId;ULONG ulAdapterId;GUID guidProvider;};
struct _NDIS_PNP_CAPABILITIES {ULONG Flags;NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;};
struct _NDIS_TAPI_SECURE_CALL {ULONG ulRequestID;HDRV_CALL hdCall;};
struct _RPC_SYNTAX_IDENTIFIER {GUID SyntaxGUID;RPC_VERSION SyntaxVersion;};
struct _SPC_SERIALIZED_OBJECT {SPC_UUID ClassId;CRYPT_DATA_BLOB SerializedData;};
struct _USB_DEVICE_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;USHORT bcdUSB;UCHAR bDeviceClass;UCHAR bDeviceSubClass;UCHAR bDeviceProtocol;UCHAR bMaxPacketSize0;USHORT idVendor;USHORT idProduct;USHORT bcdDevice;UCHAR iManufacturer;UCHAR iProduct;UCHAR iSerialNumber;UCHAR bNumConfigurations;};
struct _USB_STRING_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;WCHAR bString[1];};
struct __GENERIC_BINDING_INFO {void *pObj;unsigned int Size;GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct digirealwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct dolbyac2waveformat_tag {WAVEFORMATEX wfx;WORD nAuxBitsCode;};
struct tagHTTPCONTACTINFOLIST {ULONG cContactInfo;LPHTTPCONTACTINFO prgContactInfo;};
struct tagHTTPMEMBERERRORLIST {ULONG cMemberError;LPHTTPMEMBERERROR prgMemberError;};
typedef ULONG DEREFERENCECONNECTION(PLDAP PrimaryConnection, PLDAP ConnectionToDereference);
typedef HRESULT  DISPATCHNOTIFICATIONS(ULONG ulFlags);
struct IMpegAudioDecoderVtbl {HRESULT ( *get_FrequencyDivider)(IWABExtInit *This, unsigned int *pDivider);HRESULT ( *put_FrequencyDivider)(IWABExtInit *This, unsigned int Divider);HRESULT ( *get_DecoderAccuracy)(IWABExtInit *This, unsigned int *pAccuracy);HRESULT ( *put_DecoderAccuracy)(IWABExtInit *This, unsigned int Accuracy);HRESULT ( *get_Stereo)(IWABExtInit *This, unsigned int *pStereo);HRESULT ( *put_Stereo)(IWABExtInit *This, unsigned int Stereo);HRESULT ( *get_DecoderWordSize)(IWABExtInit *This, unsigned int *pWordSize);HRESULT ( *put_DecoderWordSize)(IWABExtInit *This, unsigned int WordSize);HRESULT ( *get_IntegerDecode)(IWABExtInit *This, unsigned int *pIntDecode);HRESULT ( *put_IntegerDecode)(IWABExtInit *This, unsigned int IntDecode);HRESULT ( *get_DualMode)(IWABExtInit *This, unsigned int *pIntDecode);HRESULT ( *put_DualMode)(IWABExtInit *This, unsigned int IntDecode);HRESULT ( *get_AudioFormat)(IWABExtInit *This, MPEG1WAVEFORMAT *lpFmt);};
typedef INT ( *LPNSPLOOKUPSERVICEEND)(HANDLE hLookup);
typedef DWORD ( *PFN_HTTPEXTENSIONPROC)(EXTENSION_CONTROL_BLOCK *pECB);
typedef HRESULT ( *REMOVEEXPIREDCONTROLS)(DWORD dwFlags, DWORD dwReserved);
struct _CERT_CREDENTIAL_INFO {ULONG cbSize;UCHAR rgbHashOfCert[20];};
struct _CERT_PUBLIC_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_BIT_BLOB PublicKey;};
struct _CMC_TAGGED_ATTRIBUTE {DWORD dwBodyPartID;CRYPT_ATTRIBUTE Attribute;};
struct _CO_TAPI_ADDRESS_CAPS {ULONG ulLineID;ULONG ulAddressID;ULONG ulFlags;LINE_ADDRESS_CAPS LineAddressCaps;};
struct _CRL_DIST_POINTS_INFO {DWORD cDistPoint;PCRL_DIST_POINT rgDistPoint;};
struct _CRYPT_KEY_PROV_PARAM {DWORD dwParam;BYTE *pbData;DWORD cbData;DWORD dwFlags;};
struct _CTL_ANY_SUBJECT_INFO {CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;CRYPT_DATA_BLOB SubjectIdentifier;};
struct _DDVIDEOPORTBANDWIDTH {DWORD dwSize;DWORD dwCaps;DWORD dwOverlay;DWORD dwColorkey;DWORD dwYInterpolate;DWORD dwYInterpAndColorkey;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;};
struct _DEV_BROADCAST_PORT_W {DWORD dbcp_size;DWORD dbcp_devicetype;DWORD dbcp_reserved;unsigned short dbcp_name[1];};
struct _DOT11_INTEGRITY_FAIL {DOT11_INTEGRITY_FAIL_TYPE dot11IntegrityFailType;DOT11_MAC_ADDRESS dot11PeerMacAddress;};
struct _EXCEPTION_DEBUG_INFO {EXCEPTION_RECORD ExceptionRecord;DWORD dwFirstChance;};
struct _FILEGROUPDESCRIPTORA {UINT cItems;FILEDESCRIPTORA fgd[1];};
struct _FILEGROUPDESCRIPTORW {UINT cItems;FILEDESCRIPTORW fgd[1];};
union _FILE_SEGMENT_ELEMENT {PVOID64 Buffer;ULONGLONG Alignment;};
struct _HTTP_FILTER_RAW_DATA {PVOID pvInData;DWORD cbInData;DWORD cbInBuffer;DWORD dwReserved;};
struct _IMAGE_IMPORT_BY_NAME {WORD Hint;BYTE Name[1];};
struct _IMAGE_STUB_DIRECTORY {DWORD SecondaryImportAddressTable;WORD ExpectedISA[2];DWORD StubAddressTable[2];};
struct _IP_ADAPTER_INDEX_MAP {ULONG Index;WCHAR Name[128];};
struct _MIB_IPMCAST_IF_ENTRY {DWORD dwIfIndex;DWORD dwTtl;DWORD dwProtocol;DWORD dwRateLimit;ULONG ulInMcastOctets;ULONG ulOutMcastOctets;};
struct _MIB_IPMCAST_IF_TABLE {DWORD dwNumEntries;MIB_IPMCAST_IF_ENTRY table[1];};
struct _NDIS_TAPI_CLOSE_CALL {ULONG ulRequestID;HDRV_CALL hdCall;};
struct _SCH_CRED_PUBLIC_CAPI {DWORD dwType;HCRYPTPROV hProv;};
struct _SCH_CRED_SECRET_CAPI {DWORD dwType;HCRYPTPROV hProv;};
struct _SPropertyRestriction {ULONG relop;ULONG ulPropTag;LPSPropValue lpProp;};
struct _ShellAppCategoryList {UINT cCategories;SHELLAPPCATEGORY *pCategory;};
struct _USB_POWER_DESCRIPTOR {UCHAR bLength;UCHAR bDescriptorType;UCHAR bCapabilitiesFlags;USHORT EventNotification;USHORT D1LatencyTime;USHORT D2LatencyTime;USHORT D3LatencyTime;UCHAR PowerUnit;USHORT D0PowerConsumption;USHORT D1PowerConsumption;USHORT D2PowerConsumption;};
struct ip_option_information {UCHAR Ttl;UCHAR Tos;UCHAR Flags;UCHAR OptionsSize;PUCHAR OptionsData;};
struct tACMFORMATTAGDETAILSW {DWORD cbStruct;DWORD dwFormatTagIndex;DWORD dwFormatTag;DWORD cbFormatSize;DWORD fdwSupport;DWORD cStandardFormats;WCHAR szFormatTag[48];};
struct tagDBRELEVANTDOCUMENT {LONG lWeight;VARIANT vDocument;};
struct tagDVD_MUA_MixingInfo {BOOL fMixTo0;BOOL fMixTo1;BOOL fMix0InPhase;BOOL fMix1InPhase;DWORD dwSpeakerPosition;};
struct tagDetectEncodingInfo {UINT nLangID;UINT nCodePage;INT nDocPercent;INT nConfidence;};
struct tagHTTPMEMBERINFOLIST {ULONG cMemberInfo;LPHTTPMEMBERINFO prgMemberInfo;};
struct wavefilter_volume_tag {WAVEFILTER wfltr;DWORD dwVolume;};
typedef HRESULT ( *FILESAVEMARKNOTEXIST)(LPSTR lpFileList, LPSTR lpDir, LPSTR lpBaseName);
struct IMixerPinConfig2Vtbl {HRESULT ( *SetOverlaySurfaceColorControls)(IWABExtInit *This, LPDDCOLORCONTROL pColorControl);HRESULT ( *GetOverlaySurfaceColorControls)(IWABExtInit *This, LPDDCOLORCONTROL pColorControl);};
typedef BOOL (*LPRESET_DEFAULT_PIPE)(USB_HANDLE);
struct NDIS_BPC_DEVICE_CAPS {BPC_HANDLE nhDevice;ULONG ulBPCCaps;ULONG ulbpsMax;ULONG ulcStreamTypes;ULONG rgulStreamTypes[1];};
typedef void (*PDRIVER_LIST_CONTROL)(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp, PSCATTER_GATHER_LIST ScatterGather, PVOID Context);
typedef PLMEM_ALLOC_INFO ( *PFN_GetCurrentAllocs)(HANDLE hProc, HANDLE hHeap);
struct SDP_LARGE_INTEGER_16 {ULONGLONG LowPart;LONGLONG HighPart;};
typedef BOOL ( *SSL_SET_PROTOCOLS_FN)(DWORD rgbitsProtocols);
typedef BOOL ( *UILANGUAGE_ENUMPROCA)(LPSTR);
struct _APPCATEGORYINFOLIST {DWORD cCategory;APPCATEGORYINFO *pCategoryInfo;};
struct _BASEBAND_CONNECTION {USHORT hConnection;BT_ADDR baAddress;int cDataPacketsPending;unsigned int fLinkType : 1;unsigned int fEncrypted : 1;unsigned int fAuthenticated : 1;unsigned int fMode : 3;};
struct _CARD_REGISTER_PARMS {UINT16 fAttributes;UINT16 fEventMask;UINT32 uClientData;};
struct _CEL_OEMPROFILER_HIT {DWORD dwReturnAddr;DWORD dwBufSize;BYTE bData[];};
struct _CRL_DIST_POINT_NAME {DWORD dwDistPointNameChoice;_CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 __anonymous0;};
struct _HTTP_FILTER_AUTHENT {CHAR *pszUser;DWORD cbUserBuff;CHAR *pszPassword;DWORD cbPasswordBuff;};
struct _HTTP_FILTER_URL_MAP { CHAR *pszURL;CHAR *pszPhysicalPath;DWORD cbPathBuff;};
struct _HTTP_FILTER_VERSION {DWORD dwServerFilterVersion;DWORD dwFilterVersion;CHAR lpszFilterDesc[257];DWORD dwFlags;};
struct _LUID_AND_ATTRIBUTES {LUID Luid;DWORD Attributes;};
struct _MIB_MFE_STATS_TABLE {DWORD dwNumEntries;MIB_IPMCAST_MFE_STATS table[1];};
struct _PROCESS_INFORMATION {HANDLE hProcess;HANDLE hThread;DWORD dwProcessId;DWORD dwThreadId;};
struct _SCATTER_GATHER_LIST {ULONG NumberOfElements;ULONG Reserved;SCATTER_GATHER_ELEMENT Elements[1];};
struct _SContentRestriction {ULONG ulFuzzyLevel;ULONG ulPropTag;LPSPropValue lpProp;};
struct _SOCKET_ADDRESS_LIST {INT iAddressCount;SOCKET_ADDRESS Address[1];};
struct __CEL_THREAD_MIGRATE {HANDLE hProcess;DWORD dwReserved;};
struct __CEL_THREAD_QUANTUM {HANDLE hThread;DWORD dwQuantum;};
struct _portemu_port_params {int channel;int flocal;BT_ADDR device;int imtu;int iminmtu;int imaxmtu;int isendquota;int irecvquota;GUID uuidService;unsigned int uiportflags;};
struct _tagBITMAPFILEHEADER {WORD bfType;DWORD bfSize;WORD bfReserved1;WORD bfReserved2;DWORD bfOffBits;};
struct _wireSAFEARR_BRECORD {ULONG Size;wireBRECORD *aRecord;};
struct _wireSAFEARR_HAVEIID {ULONG Size;IUnknown **apUnknown;IID iid;};
struct _wireSAFEARR_VARIANT {ULONG Size;wireVARIANT *aVariant;};
struct adpcmewaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct gsm610waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct sonarcwaveformat_tag {WAVEFORMATEX wfx;WORD wCompType;};
struct tACMDRVFORMATSUGGEST {DWORD cbStruct;DWORD fdwSuggest;LPWAVEFORMATEX pwfxSrc;DWORD cbwfxSrc;LPWAVEFORMATEX pwfxDst;DWORD cbwfxDst;};
struct tACMFILTERTAGDETAILS {DWORD cbStruct;DWORD dwFilterTagIndex;DWORD dwFilterTag;DWORD cbFilterSize;DWORD fdwSupport;DWORD cStandardFilters;WCHAR szFilterTag[48];};
struct tagAM_MPEGSYSTEMTYPE {DWORD dwBitRate;DWORD cStreams;AM_MPEGSTREAMTYPE Streams[1];};
struct tagCATEGORIZATIONSET {ULONG cCat;CATEGORIZATION *aCat;};
struct tagCLEANLOCALSTORAGE {IUnknown *pInterface;PVOID pStorage;DWORD flags;};
struct tagDBINDEXCOLUMNDESC {DBID *pColumnID;DBINDEX_COL_ORDER eIndexColOrder;};
struct tagHTTPCONTACTIDLIST {ULONG cContactId;LPHTTPCONTACTID prgContactId;};
struct tagHTTPMAILBCOPYMOVE {LPSTR pszHref;LPSTR pszLocation;HRESULT hrResult;};
struct tagNMLVODSTATECHANGE {NMHDR hdr;int iFrom;int iTo;UINT uNewState;UINT uOldState;};
struct tagSTORAGEDEVICEINFO {DWORD cbSize;TCHAR szProfile[32];DWORD dwDeviceClass;DWORD dwDeviceType;DWORD dwDeviceFlags;};
struct tagVECTORRESTRICTION {NODERESTRICTION Node;ULONG RankMethod;};
struct tagVERCONNECTIONINFO {DWORD cBlock;VERBLOCK *rgblock;};
struct AM_DVDCOPY_TITLEKEY {ULONG KeyFlags;ULONG Reserved1[2];UCHAR TitleKey[6];UCHAR Reserved2[2];};
struct IInstallEngine2Vtbl {HRESULT ( *SetLocalCif)(IInstallEngine2 *This, LPCSTR pszCif);HRESULT ( *GetICifFile)(IInstallEngine2 *This, ICifFile **picif);};
typedef HRESULT (*PFNCESETDEVMGMTTASK)(PDMTASKINFO pti);
typedef void ( *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved);
typedef HRESULT ( *SETPERUSERSECVALUES)(PPERUSERSECTION pPerUser);
struct _ACTRL_ACCESS_INFOA {ULONG fAccessPermission;LPSTR lpAccessPermissionName;};
struct _CERT_ALT_NAME_INFO {DWORD cAltEntry;PCERT_ALT_NAME_ENTRY rgAltEntry;};
struct _CERT_POLICIES_INFO {DWORD cPolicyInfo;CERT_POLICY_INFO *rgPolicyInfo;};
struct _CMC_TAGGED_REQUEST {DWORD dwTaggedRequestChoice;_CMC_TAGGED_REQUEST___F9232B04B0227B82B480A0AF719B17A6 __anonymous0;};
struct _CRYPT_CONTENT_INFO {LPSTR pszObjId;CRYPT_DER_BLOB Content;};
struct _DOT11_8021X_FILTER {DOT11_MAC_ADDRESS PeerMacAddress;BOOL bIsPortControlled;BOOL bIsPortAuthorized;};
struct _DOT11_ANTENNA_LIST {ULONG uNumOfEntries;PDOT11_SUPPORTED_ANTENNA pDot11SupportedAntenna;};
struct _DOT11_IV48_COUNTER {ULONG uIV32Counter;USHORT usIV16Counter;};
struct _DOT11_WEP_KEY_DATA {ULONG uKeyLength;PUCHAR pucKey;};
struct _EXCEPTION_POINTERS {PEXCEPTION_RECORD ExceptionRecord;PCONTEXT ContextRecord;};
struct _HSE_URL_MAPEX_INFO {CHAR lpszPath[260];DWORD dwFlags;DWORD cchMatchingPath;DWORD cchMatchingURL;DWORD dwReserved1;DWORD dwReserved2;};
struct _MIB_IPFORWARDTABLE {DWORD dwNumEntries;MIB_IPFORWARDROW table[1];};
struct _NDIS_VAR_DATA_DESC {USHORT Length;USHORT MaximumLength;ULONG_PTR Offset;};
struct _POWER_CAPABILITIES {UCHAR DeviceDx;UCHAR WakeFromDx;UCHAR InrushDx;DWORD Power[5];DWORD Latency[5];DWORD Flags;};
struct _PROXY_HTTP_REQUEST {DWORD dwSize; SOCKADDR_STORAGE *psaClient;int cbsaClient; char *szUser;int cchUser; char *szURL;int cchURL;char *szURLOut;int cbURLOut; SOCKADDR_STORAGE *psaProxy;int cbsaProxy;};
struct _SEC_OBJECT_ELEMENT {GUID guidObjectType;DBID ObjectID;};
struct _SID_AND_ATTRIBUTES {PSID Sid;DWORD Attributes;};
struct _SLargeIntegerArray {ULONG cValues;LARGE_INTEGER *lpli;};
struct _SPC_STATEMENT_TYPE {DWORD cKeyPurposeId;LPSTR *rgpszKeyPurposeId;};
struct _USB_DEVICE_REQUEST {UCHAR bmRequestType;UCHAR bRequest;USHORT wValue;USHORT wIndex;USHORT wLength;};
struct _USB_HUB_DESCRIPTOR {UCHAR bDescriptorLength;UCHAR bDescriptorType;UCHAR bNumberOfPorts;USHORT wHubCharacteristics;UCHAR bPowerOnToPowerGood;UCHAR bHubControlCurrent;UCHAR bRemoveAndPowerMask[64];};
struct _WINDOWS_DEVICELIST {ULONG numDevice;WINDOWS_IRDA_DEVICE_INFO Device[1];};
struct __CEL_VIRTUAL_ALLOC {DWORD dwResult;DWORD dwAddress;DWORD dwSize;DWORD dwType;DWORD dwProtect;BYTE bReserved[];};
struct lineforwardlist_tag {DWORD dwTotalSize;DWORD dwNumEntries;LINEFORWARD ForwardList[1];};
struct tagBITMAPCOREHEADER {DWORD bcSize;WORD bcWidth;WORD bcHeight;WORD bcPlanes;WORD bcBitCount;};
struct tagDXNATIVETYPEINFO {BYTE *pCurrentData;BYTE *pFirstByte;int lPitch;DWORD dwColorKey;};
struct tagDXOVERSAMPLEDESC {POINT p;DXPMSAMPLE Color;};
struct tagDXPACKEDRECTDESC {DXBASESAMPLE *pSamples;BOOL bPremult;RECT rect;int lRowPadding;};
struct tagFILECHANGENOTIFY {DWORD dwRefCount;FILECHANGEINFO fci;};
struct wavefilter_echo_tag {WAVEFILTER wfltr;DWORD dwVolume;DWORD dwDelay;};
typedef BOOL ( *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL ( *LPBLOCKINGCALLBACK)(DWORD_PTR dwContext);
struct MSGQUEUEOPTIONS_OS {DWORD dwSize;DWORD dwFlags;DWORD dwMaxMessages;DWORD cbMaxMessage;BOOL bReadAccess;};
typedef NTSTATUS (*PDRIVER_INITIALIZE)(struct _DRIVER_OBJECT *DriverObject, PUNICODE_STRING RegistryPath);
typedef ULONG (*PGET_DMA_ALIGNMENT)(PDMA_ADAPTER DmaAdapter);
typedef void ( *PRPC_STUB_FUNCTION)(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
typedef RPC_STATUS RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid, void *Context);
struct _CO_TAPI_LINE_CAPS {ULONG ulLineID;ULONG ulFlags;LINE_DEV_CAPS LineDevCaps;};
struct _CRYPT_OBJID_TABLE {DWORD dwAlgId;LPCSTR pszObjId;};
struct _CRYPT_PROVUI_DATA {DWORD cbStruct;DWORD dwFinalError;WCHAR *pYesButtonText;WCHAR *pNoButtonText;WCHAR *pMoreInfoButtonText;WCHAR *pAdvancedLinkText;WCHAR *pCopyActionText;WCHAR *pCopyActionTextNoTS;WCHAR *pCopyActionTextNotSigned;};
struct _DDKWINDOWINFO_tag {DWORD cbSize;DWORD dwBusNumber;DWORD dwInterfaceType;DWORD dwNumIoWindows;DEVICEWINDOW ioWindows[6];DWORD dwNumMemWindows;DEVICEWINDOW memWindows[6];};
struct _DOT11_CIPHER_ALGO {ULONG uCipherAlgoIndex;ULONG uCipherAlgo;BOOL bCipherAlgoEnabled;};
struct _DOT11_CIPHER_LIST {ULONG uNumOfEntries;PDOT11_CIPHER_ALGO pDot11CipherAlgo;};
struct _DSBPOSITIONNOTIFY {DWORD dwOffset;HANDLE hEventNotify;};
struct _IMAGE_FILE_HEADER {WORD Machine;WORD NumberOfSections;DWORD TimeDateStamp;DWORD PointerToSymbolTable;DWORD NumberOfSymbols;WORD SizeOfOptionalHeader;WORD Characteristics;};
struct _IMAGE_ROM_HEADERS {IMAGE_FILE_HEADER FileHeader;IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;};
struct _INTERFACE_INFO_EX {u_long iiFlags;SOCKET_ADDRESS iiAddress;SOCKET_ADDRESS iiBroadcastAddress;SOCKET_ADDRESS iiNetmask;};
struct _IP_INTERFACE_INFO {LONG NumAdapters;IP_ADAPTER_INDEX_MAP Adapter[1];};
struct _PST_ACCESSRULESET {DWORD cbSize;DWORD cRules;PST_ACCESSRULE *rgRules;};
struct _SPC_PE_IMAGE_DATA {CRYPT_BIT_BLOB Flags;PSPC_LINK pFile;};
struct _SPropProblemArray {ULONG cProblem;SPropProblem aProblem[1];};
struct _SSLCLIENTAUTHOPTS {DWORD dwRequestClientAuth;DWORD dwRedoHandshake;DWORD dwType;DWORD dwIssuerCount;LPBLOB pIssuerList;DWORD dwFlags;};
struct _SSLCONNECTIONINFO {DWORD dwProtocol;ALG_ID aiCipher;DWORD dwCipherStrength;ALG_ID aiHash;DWORD dwHashStrength;ALG_ID aiExch;DWORD dwExchStrength;};
struct _TAPE_GET_POSITION {DWORD Type;DWORD Partition;LARGE_INTEGER Offset;};
struct __CEL_EVENT_CREATE {HANDLE hEvent;unsigned int fManual : 1;unsigned int fInitialState : 1;unsigned int fCreate : 1;unsigned int dwReserved : 29;WCHAR szName[];};
struct __CEL_HEAP_DESTROY {HANDLE hHeap;DWORD dwTID;DWORD dwPID;};
struct __CEL_HEAP_REALLOC {HANDLE hHeap;DWORD dwFlags;DWORD dwBytes;DWORD lpMemOld;DWORD lpMem;DWORD dwTID;DWORD dwPID;DWORD dwCallerPID;DWORD adwStackTrace[];};
struct __CEL_MUTEX_CREATE {HANDLE hMutex;WCHAR szName[];};
struct __CEL_VIRTUAL_FREE {DWORD dwAddress;DWORD dwSize;DWORD dwType;BYTE bReserved[];};
struct linecallparams_tag {DWORD dwTotalSize;DWORD dwBearerMode;DWORD dwMinRate;DWORD dwMaxRate;DWORD dwMediaMode;DWORD dwCallParamFlags;DWORD dwAddressMode;DWORD dwAddressID;LINEDIALPARAMS DialParams;DWORD dwOrigAddressSize;DWORD dwOrigAddressOffset;DWORD dwDisplayableAddressSize;DWORD dwDisplayableAddressOffset;DWORD dwCalledPartySize;DWORD dwCalledPartyOffset;DWORD dwCommentSize;DWORD dwCommentOffset;DWORD dwUserUserInfoSize;DWORD dwUserUserInfoOffset;DWORD dwHighLevelCompSize;DWORD dwHighLevelCompOffset;DWORD dwLowLevelCompSize;DWORD dwLowLevelCompOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwPredictiveAutoTransferStates;DWORD dwTargetAddressSize;DWORD dwTargetAddressOffset;DWORD dwSendingFlowspecSize;DWORD dwSendingFlowspecOffset;DWORD dwReceivingFlowspecSize;DWORD dwReceivingFlowspecOffset;DWORD dwDeviceClassSize;DWORD dwDeviceClassOffset;DWORD dwDeviceConfigSize;DWORD dwDeviceConfigOffset;DWORD dwCallDataSize;DWORD dwCallDataOffset;DWORD dwNoAnswerTimeout;DWORD dwCallingPartyIDSize;DWORD dwCallingPartyIDOffset;DWORD dwAddressType;};
struct linecallstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwCallState;DWORD dwCallStateMode;DWORD dwCallPrivilege;DWORD dwCallFeatures;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwCallFeatures2;SYSTEMTIME tStateEntryTime;};
struct tagCOLORADJUSTMENT {WORD caSize;WORD caFlags;WORD caIlluminantIndex;WORD caRedGamma;WORD caGreenGamma;WORD caBlueGamma;WORD caReferenceBlack;WORD caReferenceWhite;SHORT caContrast;SHORT caBrightness;SHORT caColorfulness;SHORT caRedGreenTint;};
struct tagDBCONTENTVECTOR {LONG lWeight;DWORD dwRankingMethod;};
struct tagDELETITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;HWND hwndItem;UINT itemData;};
struct tagHTTPCONTACTINFO {LPSTR pszHref;LPSTR pszId;HTTPMAILCONTACTTYPE tyContact;LPSTR pszModified;LPSTR pszDisplayName;LPSTR pszGivenName;LPSTR pszSurname;LPSTR pszNickname;LPSTR pszEmail;LPSTR pszHomeStreet;LPSTR pszHomeCity;LPSTR pszHomeState;LPSTR pszHomePostalCode;LPSTR pszHomeCountry;LPSTR pszCompany;LPSTR pszWorkStreet;LPSTR pszWorkCity;LPSTR pszWorkState;LPSTR pszWorkPostalCode;LPSTR pszWorkCountry;LPSTR pszHomePhone;LPSTR pszHomeFax;LPSTR pszWorkPhone;LPSTR pszWorkFax;LPSTR pszMobilePhone;LPSTR pszOtherPhone;LPSTR pszBday;LPSTR pszPager;};
struct tagHTTPMAILGETPROP {HTTPMAILPROPTYPE type;LPSTR pszProp;};
struct tagHTTPMEMBERERROR {LPSTR pszHref;HRESULT hrResult;};
struct tagNODERESTRICTION {ULONG cRes;RESTRICTION **paRes;ULONG reserved;};
struct tagRANGECATEGORIZE {ULONG cRange;PROPVARIANT *aRangeBegin;};
struct tagTVINSERTSTRUCTA {HTREEITEM hParent;HTREEITEM hInsertAfter;TVITEMA item;};
struct tagTVINSERTSTRUCTW {HTREEITEM hParent;HTREEITEM hInsertAfter;TVITEMW item;};
typedef BOOL ( *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL ( *DATEFMT_ENUMPROCA)(LPSTR);
typedef HRESULT ( *DLLGETVERSIONPROC)(DLLVERSIONINFO *);
typedef LPCUSB_DEVICE (*LPGET_DEVICE_INFO)(USB_HANDLE);
typedef HRESULT ( *PFNDOAFTERREMOVAL)(HRESULT, UINT);
typedef BOOL (*PFN_CPD_ADD_STORE)(struct _CRYPT_PROVIDER_DATA *pProvData, HCERTSTORE hStore2Add);
typedef ULONG (*PREAD_DMA_COUNTER)(PDMA_ADAPTER DmaAdapter);
typedef void  RPC_OBJECT_INQ_FN(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status);
typedef BOOL ( *TIMEFMT_ENUMPROCA)(LPSTR);
struct _ACTRL_OVERLAPPED {ULONG Reserved1;ULONG Reserved2;HANDLE hEvent;};
struct _CERT_KEY_CONTEXT {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;};
struct _CERT_USAGE_MATCH {DWORD dwType;CERT_ENHKEY_USAGE Usage;};
struct _CRYPT_ATTRIBUTES {DWORD cAttr;PCRYPT_ATTRIBUTE rgAttr;};
struct _CRYPT_BLOB_ARRAY {DWORD cBlob;PCRYPT_DATA_BLOB rgBlob;};
struct _D3DRASTER_STATUS {BOOL InVBlank;UINT ScanLine;};
struct _DOT11_RSSI_RANGE {DOT11_PHY_TYPE dot11PhyType;ULONG uRSSIMin;ULONG uRSSIMax;};
struct _DOT11_UPCALL_TLV {ULONG uType;ULONG uLength;UCHAR ucValue[1];};
struct _HSE_VERSION_INFO {DWORD dwExtensionVersion;CHAR lpszExtensionDesc[256];};
struct _IMAGE_DOS_HEADER {WORD e_magic;WORD e_cblp;WORD e_cp;WORD e_crlc;WORD e_cparhdr;WORD e_minalloc;WORD e_maxalloc;WORD e_ss;WORD e_sp;WORD e_csum;WORD e_ip;WORD e_cs;WORD e_lfarlc;WORD e_ovno;WORD e_res[4];WORD e_oemid;WORD e_oeminfo;WORD e_res2[10];LONG e_lfanew;};
struct _IMAGE_LINENUMBER {union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 Type;WORD Linenumber;};
struct _KEY_TYPE_SUBTYPE {DWORD dwKeySpec;GUID Type;GUID Subtype;};
struct _LINE_CALL_PARAMS {ULONG ulTotalSize;ULONG ulBearerMode;ULONG ulMinRate;ULONG ulMaxRate;ULONG ulMediaMode;ULONG ulCallParamFlags;ULONG ulAddressMode;ULONG ulAddressID;LINE_DIAL_PARAMS DialParams;ULONG ulOrigAddressSize;ULONG ulOrigAddressOffset;ULONG ulDisplayableAddressSize;ULONG ulDisplayableAddressOffset;ULONG ulCalledPartySize;ULONG ulCalledPartyOffset;ULONG ulCommentSize;ULONG ulCommentOffset;ULONG ulUserUserInfoSize;ULONG ulUserUserInfoOffset;ULONG ulHighLevelCompSize;ULONG ulHighLevelCompOffset;ULONG ulLowLevelCompSize;ULONG ulLowLevelCompOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;ULONG ulPredictiveAutoTransferStates;ULONG ulTargetAddressSize;ULONG ulTargetAddressOffset;ULONG ulSendingFlowspecSize;ULONG ulSendingFlowspecOffset;ULONG ulReceivingFlowspecSize;ULONG ulReceivingFlowspecOffset;ULONG ulDeviceClassSize;ULONG ulDeviceClassOffset;ULONG ulDeviceConfigSize;ULONG ulDeviceConfigOffset;ULONG ulCallDataSize;ULONG ulCallDataOffset;ULONG ulNoAnswerTimeout;ULONG ulCallingPartyIDSize;ULONG ulCallingPartyIDOffset;ULONG ulAddressType;};
struct _NDIS_802_11_SSID {ULONG SsidLength;UCHAR Ssid[32];};
struct _NDIS_BPC_DEVICES {ULONG ulcDevices;BPC_HANDLE rgnhDevices[1];};
struct _OBJECT_TYPE_LIST {WORD Level;WORD Sbz;GUID *ObjectType;};
struct _PCI_PHYSICAL_LOC {DWORD Depth;BYTE Tree[256];};
struct _PST_ACCESSCLAUSE {DWORD cbSize;PST_ACCESSCLAUSETYPE ClauseType;DWORD cbClauseData;void *pbClauseData;};
struct _QOS_SHAPING_RATE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapingRate;};
struct _QualityOfService {FLOWSPEC SendingFlowspec;FLOWSPEC ReceivingFlowspec;WSABUF ProviderSpecific;};
struct _TAPE_WRITE_MARKS {DWORD Type;DWORD Count;BOOLEAN Immediate;};
struct _TOKEN_PRIVILEGES {DWORD PrivilegeCount;LUID_AND_ATTRIBUTES Privileges[1];};
struct __CEL_HEAP_CREATE {DWORD dwOptions;DWORD dwInitSize;DWORD dwMaxSize;HANDLE hHeap;DWORD dwTID;DWORD dwPID;};
struct __CEL_SEM_RELEASE {HANDLE hSem;DWORD dwReleaseCount;DWORD dwPreviousCount;};
struct _wireSAFEARR_BSTR {ULONG Size;wireBSTR *aBstr;};
struct tagBITMAPCOREINFO {BITMAPCOREHEADER bmciHeader;RGBTRIPLE bmciColors[1];};
struct tagCOPYDATASTRUCT {DWORD dwData;DWORD cbData;PVOID lpData;};
struct tagEXBMINFOHEADER {BITMAPINFOHEADER bmi;DWORD biExtDataOffset;};
struct tagHTTPTARGETLIST {ULONG cTarget;LPCSTR *prgTarget;};
struct tagMPEG2VIDEOINFO {VIDEOINFOHEADER2 hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;DWORD dwProfile;DWORD dwLevel;DWORD dwFlags;DWORD dwSequenceHeader[1];};
struct tagNMLVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;int iSubItem;};
struct tagNMTTCUSTOMDRAW {NMCUSTOMDRAW nmcd;UINT uDrawFlags;};
struct tagNMTVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;};
struct tagSAFEARRAYBOUND {ULONG cElements;LONG lLbound;};
struct tagWEBPAGEOPTIONS {DWORD cbSize;DWORD dwFlags;DWORD dwDelay;WCHAR wchQuote;};
struct tag_TRUECOLORINFO {DWORD dwBitMasks[3];RGBQUAD bmiColors[256];};
typedef void ( *ASYNC_COMPLETION)(DRV_REQUESTID dwRequestID, LONG lResult);
struct CRITICAL_SECTION {unsigned int LockCount;HANDLE OwnerThread;HANDLE hCrit;DWORD needtrap;DWORD dwContentions;};
typedef STATUS (*DEREGISTERCLIENT)(CARD_CLIENT_HANDLE);
struct DXRASTERSCANINFO {ULONG ulIndex;ULONG Row; BYTE *pWeights; DXRUNINFO *pRunInfo;ULONG cRunInfo;};
typedef BOOL ( *LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (*LPCLOSE_TRANSFER)(USB_TRANSFER);
typedef UINT ( *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT ( *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
typedef int ( *LPWPUCLOSETHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef HANDLE ( *LPWPUCREATEEVENT)(LPINT lpErrno);
typedef int ( *LPWSPCLOSESOCKET)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWSPGETPEERNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
typedef int ( *LPWSPGETSOCKNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
typedef BOOL (*PFN_CPD_ADD_SGNR)(struct _CRYPT_PROVIDER_DATA *pProvData, BOOL fCounterSigner, DWORD idxSigner, struct _CRYPT_PROVIDER_SGNR *pSgnr2Add);
typedef struct _DMA_ADAPTER *(*PGET_DMA_ADAPTER)(PVOID Context, struct _DEVICE_DESCRIPTION *DeviceDescriptor, PULONG NumberOfMapRegisters);
struct _BTH_REMOTE_NAME {BT_ADDR bt;WCHAR szNameBuffer[248];};
struct _CERT_CHAIN_PARA {DWORD cbSize;CERT_USAGE_MATCH RequestedUsage;};
struct _CERT_EXTENSIONS {DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CERT_NAME_VALUE {DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _CERT_OTHER_NAME {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CRYPT_HASH_INFO {CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_HASH_BLOB Hash;};
struct _CTL_USAGE_MATCH {DWORD dwType;CTL_USAGE Usage;};
struct _DDVIDEOPORTCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMaxWidth;DWORD dwMaxVBIWidth;DWORD dwMaxHeight;DWORD dwVideoPortID;DWORD dwCaps;DWORD dwFX;DWORD dwNumAutoFlipSurfaces;DWORD dwAlignVideoPortBoundary;DWORD dwAlignVideoPortPrescaleWidth;DWORD dwAlignVideoPortCropBoundary;DWORD dwAlignVideoPortCropWidth;DWORD dwPreshrinkXStep;DWORD dwPreshrinkYStep;DWORD dwNumVBIAutoFlipSurfaces;DWORD dwNumPreferredAutoflip;WORD wNumFilterTapsX;WORD wNumFilterTapsY;};
struct _DOT11_AUTH_ALGO {ULONG uAuthAlgoIndex;ULONG uAuthAlgo;BOOL bAuthAlgoEnabled;};
struct _DOT11_AUTH_LIST {ULONG uNumOfEntries;PDOT11_AUTH_ALGO pDot11AuthAlgo;};
struct _HTTP_FILTER_LOG { CHAR *pszClientHostName; CHAR *pszClientUserName; CHAR *pszServerName; CHAR *pszOperation; CHAR *pszTarget; CHAR *pszParameters;DWORD dwHttpStatus;DWORD dwWin32Status;DWORD dwBytesSent;DWORD dwBytesRecvd;DWORD msTimeForProcessing;};
struct _IO_STATUS_BLOCK {NTSTATUS Status;ULONG Information;};
struct _MIB_IPADDRTABLE {DWORD dwNumEntries;MIB_IPADDRROW table[1];};
struct _MIB_IPDESTTABLE {DWORD dwNumEntries;MIB_IPDESTROW table[1];};
struct _MIB_OPAQUE_INFO {DWORD dwId;_MIB_OPAQUE_INFO___17F86C708787DF658C468325A0B0DE76 __anonymous0;};
struct _NDIS_802_11_WEP {ULONG Length;ULONG KeyIndex;ULONG KeyLength;UCHAR KeyMaterial[1];};
struct _NDIS_TAPI_CLOSE {ULONG ulRequestID;HDRV_LINE hdLine;};
struct _NETWORK_ADDRESS {USHORT AddressLength;USHORT AddressType;UCHAR Address[1];};
struct _POWER_BROADCAST {DWORD Message;DWORD Flags;DWORD Length;WCHAR SystemPowerState[1];};
struct _SAndRestriction {ULONG cRes;LPSRestriction lpRes;};
struct _SHDESCRIPTIONID {DWORD dwDescriptionId;CLSID clsid;};
struct _SNotRestriction {ULONG ulReserved;LPSRestriction lpRes;};
struct _SSubRestriction {ULONG ulSubObject;LPSRestriction lpRes;};
struct _USER_MARSHAL_CB {unsigned int Flags;PMIDL_STUB_MESSAGE pStubMsg;PFORMAT_STRING pReserve;};
struct __CEL_HEAP_ALLOC {HANDLE hHeap;DWORD dwFlags;DWORD dwBytes;DWORD lpMem;DWORD dwTID;DWORD dwPID;DWORD dwCallerPID;DWORD adwStackTrace[];};
struct __CEL_INTERRUPTS {DWORD dwDiscarded;CEL_INT_DATA IntData[];};
struct __CEL_WAIT_MULTI {DWORD dwTimeout;unsigned int fWaitAll : 1;unsigned int dwReserved : 31;HANDLE hHandles[];};
struct tACMSTREAMHEADER {DWORD cbStruct;DWORD fdwStatus;DWORD dwUser;LPBYTE pbSrc;DWORD cbSrcLength;DWORD cbSrcLengthUsed;DWORD dwSrcUser;LPBYTE pbDst;DWORD cbDstLength;DWORD cbDstLengthUsed;DWORD dwDstUser;DWORD dwReservedDriver[10];};
struct tagCAPROPVARIANT {ULONG cElems;PROPVARIANT *pElems;};
struct tagDB_VARNUMERIC {BYTE precision;SBYTE scale;BYTE sign;BYTE val[1];};
struct tagHARDWAREINPUT {DWORD uMsg;WORD wParamL;WORD wParamH;DWORD dwExtraInfo;};
struct tagHEADERROWINFO {DWORD dwRowNumber;ULONG cboffStart;ULONG cboffColon;ULONG cboffEnd;};
struct tagHTTPCONTACTID {LPSTR pszHref;LPSTR pszId;HTTPMAILCONTACTTYPE tyContact;LPSTR pszModified;};
struct tagINTERFACEDATA {METHODDATA *pmethdata;UINT cMembers;};
struct tagINTERFACEINFO {IUnknown *pUnk;IID iid;WORD wMethod;};
struct tagLVHITTESTINFO {POINT pt;UINT flags;int iItem;int iSubItem;};
struct tagMBOX_MSGCOUNT {BOOL bGotExistsResponse;DWORD dwExists;BOOL bGotRecentResponse;DWORD dwRecent;BOOL bGotUnseenResponse;DWORD dwUnseen;};
struct tagMQRESTRICTION {ULONG cRes;MQPROPERTYRESTRICTION *paPropRes;};
struct tagPCMWAVEFORMAT {WAVEFORMAT wf;WORD wBitsPerSample;};
struct tagRPCOLEMESSAGE {void *reserved1;RPCOLEDATAREP dataRepresentation;void *Buffer;ULONG cbBuffer;ULONG iMethod;void *reserved2[5];ULONG rpcFlags;};
struct tagSCRIPFONTINFO {SCRIPT_IDS scripts;WCHAR wszFont[32];};
struct tagSHINITDLGINFO {DWORD dwMask;HWND hDlg;DWORD dwFlags;};
struct tagTCHITTESTINFO {POINT pt;UINT flags;};
struct tagTCITEMHEADERA {UINT mask;UINT lpReserved1;UINT lpReserved2;LPSTR pszText;int cchTextMax;int iImage;};
struct tagTHREADENTRY32 {DWORD dwSize;DWORD cntUsage;DWORD th32ThreadID;DWORD th32OwnerProcessID;LONG tpBasePri;LONG tpDeltaPri;DWORD dwFlags;DWORD th32AccessKey;DWORD th32CurrentProcessID;};
struct tagrpcLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
typedef void  DISMISSMODELESS(ULONG ulUIParam, LPVOID lpvContext);
typedef LONG ( *FINDNEXTCONTROL)(HANDLE *hFindHandle, HANDLE *hControlHandle);
struct IDccManSinkVtbl {HRESULT ( *OnLogIpAddr)(IDccManSink *This, DWORD dwIpAddr);HRESULT ( *OnLogTerminated)(IDccManSink *This);HRESULT ( *OnLogActive)(IDccManSink *This);HRESULT ( *OnLogInactive)(IDccManSink *This);HRESULT ( *OnLogAnswered)(IDccManSink *This);HRESULT ( *OnLogListen)(IDccManSink *This);HRESULT ( *OnLogDisconnection)(IDccManSink *This);HRESULT ( *OnLogError)(IDccManSink *This);};
typedef int ( *LPWSPGETSOCKOPT)(SOCKET s, int level, int optname, char *optval, LPINT optlen, LPINT lpErrno);
typedef int ( *LPWSPSETSOCKOPT)(SOCKET s, int level, int optname,  char *optval, int optlen, LPINT lpErrno);
struct NDIS_BPC_COMMIT {ULONG ulcConnections;BPC_HANDLE rgnhConnections[1];};
typedef IO_ALLOCATION_ACTION (*PDRIVER_CONTROL)(struct _DEVICE_OBJECT *DeviceObject, struct _IRP *Irp, PVOID MapRegisterBase, PVOID Context);
typedef LPVOID ( *PFN_CRYPT_ALLOC)(size_t cbSize);
typedef BOOL ( *PFN_CloseHandle)(HANDLE hObject);
typedef BOOL ( *PFN_HeapDestroy)(HANDLE hHeap);
typedef BOOL (*PFN_PROVUI_CALL)(HWND hWndSecurityDialog, struct _CRYPT_PROVIDER_DATA *pProvData);
struct ProfilerControl {DWORD dwVersion;DWORD dwOptions;DWORD dwReserved;ProfilerControl___129768231BCEF2215A31782384C84F0E __anonymous0;};
typedef RPC_STATUS (*RPC_BLOCKING_FN)(void *wnd, void *Context, HANDLE hSyncEvent);
struct _CERT_NAME_INFO {DWORD cRDN;PCERT_RDN rgRDN;};
struct _CERT_POLICY_ID {DWORD cCertPolicyElementId;LPSTR *rgpszCertPolicyElementId;};
struct _COAUTHIDENTITY {USHORT *User;ULONG UserLength;USHORT *Domain;ULONG DomainLength;USHORT *Password;ULONG PasswordLength;ULONG Flags;};
struct _CRYPTOAPI_BLOB {DWORD cbData;BYTE *pbData;};
struct _CRYPT_BIT_BLOB {DWORD cbData;BYTE *pbData;DWORD cUnusedBits;};
struct _D3DDISPLAYMODE {UINT Width;UINT Height;UINT RefreshRate;D3DFORMAT Format;};
struct _D3DXIMAGE_INFO {UINT Width;UINT Height;UINT Depth;UINT MipLevels;D3DFORMAT Format;};
struct _DDCOLORCONTROL {DWORD dwSize;DWORD dwFlags;LONG lBrightness;LONG lContrast;LONG lHue;LONG lSaturation;LONG lSharpness;LONG lGamma;LONG lColorEnable;DWORD dwReserved1;};
struct _DDKISRINFO_tag {DWORD cbSize;DWORD dwIrq;DWORD dwSysintr;WCHAR szIsrDll[64];WCHAR szIsrHandler[64];};
struct _DISPLAY_DEVICE {DWORD cb;TCHAR DeviceName[32];TCHAR DeviceString[128];DWORD StateFlags;TCHAR DeviceID[128];TCHAR DeviceKey[128];};
struct _DOT11_BSS_LIST {ULONG uNumOfBytes;PUCHAR pucBuffer;};
struct _DOT11_PHY_LIST {ULONG uNumOfEntries;PDOT11_PHY_TYPE pDot11PHYType;};
struct _DOT11_RATE_SET {ULONG uRateSetLength;UCHAR ucRateSet[126];};
struct _EVENTLOGRECORD {DWORD Length;DWORD Reserved;DWORD RecordNumber;DWORD TimeGenerated;DWORD TimeWritten;DWORD EventID;WORD EventType;WORD NumStrings;WORD EventCategory;WORD ReservedFlags;DWORD ClosingRecordNumber;DWORD StringOffset;DWORD UserSidLength;DWORD UserSidOffset;DWORD DataLength;DWORD DataOffset;};
struct _HD_HITTESTINFO {POINT pt;UINT flags;int iItem;};
struct _ISA_PNP_CONFIG {DWORD VendorID;DWORD SerialNumber;DWORD NumberLogicalDevices;ISA_PNP_LOGICAL_DEVICE_INFO LogicalDeviceInfo[8];};
struct _LINE_CALL_INFO {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG hLine;ULONG ulLineDeviceID;ULONG ulAddressID;ULONG ulBearerMode;ULONG ulRate;ULONG ulMediaMode;ULONG ulAppSpecific;ULONG ulCallID;ULONG ulRelatedCallID;ULONG ulCallParamFlags;ULONG ulCallStates;ULONG ulMonitorDigitModes;ULONG ulMonitorMediaModes;LINE_DIAL_PARAMS DialParams;ULONG ulOrigin;ULONG ulReason;ULONG ulCompletionID;ULONG ulNumOwners;ULONG ulNumMonitors;ULONG ulCountryCode;ULONG ulTrunk;ULONG ulCallerIDFlags;ULONG ulCallerIDSize;ULONG ulCallerIDOffset;ULONG ulCallerIDNameSize;ULONG ulCallerIDNameOffset;ULONG ulCalledIDFlags;ULONG ulCalledIDSize;ULONG ulCalledIDOffset;ULONG ulCalledIDNameSize;ULONG ulCalledIDNameOffset;ULONG ulConnectedIDFlags;ULONG ulConnectedIDSize;ULONG ulConnectedIDOffset;ULONG ulConnectedIDNameSize;ULONG ulConnectedIDNameOffset;ULONG ulRedirectionIDFlags;ULONG ulRedirectionIDSize;ULONG ulRedirectionIDOffset;ULONG ulRedirectionIDNameSize;ULONG ulRedirectionIDNameOffset;ULONG ulRedirectingIDFlags;ULONG ulRedirectingIDSize;ULONG ulRedirectingIDOffset;ULONG ulRedirectingIDNameSize;ULONG ulRedirectingIDNameOffset;ULONG ulAppNameSize;ULONG ulAppNameOffset;ULONG ulDisplayableAddressSize;ULONG ulDisplayableAddressOffset;ULONG ulCalledPartySize;ULONG ulCalledPartyOffset;ULONG ulCommentSize;ULONG ulCommentOffset;ULONG ulDisplaySize;ULONG ulDisplayOffset;ULONG ulUserUserInfoSize;ULONG ulUserUserInfoOffset;ULONG ulHighLevelCompSize;ULONG ulHighLevelCompOffset;ULONG ulLowLevelCompSize;ULONG ulLowLevelCompOffset;ULONG ulChargingInfoSize;ULONG ulChargingInfoOffset;ULONG ulTerminalModesSize;ULONG ulTerminalModesOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;ULONG ulCallTreatment;ULONG ulCallDataSize;ULONG ulCallDataOffset;ULONG ulSendingFlowspecSize;ULONG ulSendingFlowspecOffset;ULONG ulReceivingFlowspecSize;ULONG ulReceivingFlowspecOffset;ULONG ulCallerIDAddressType;ULONG ulCalledIDAddressType;ULONG ulConnectedIDAddressType;ULONG ulRedirectionIDAddressType;ULONG ulRedirectingIDAddressType;};
struct _LMEM_HEAP_INFO {DWORD dwSIG1;HANDLE hHeap;struct _LMEM_HEAP_INFO *pNext;struct _LMEM_HEAP_INFO *pPrev;DWORD dwTotalAlloc;DWORD dwCurrentAlloc;DWORD dwCountAlloc;DWORD dwCurrentCount;struct _LMEM_ALLOC_INFO *pAlloc;DWORD dwHist[32];DWORD dwMaxAlloc;DWORD dwMaxCount;DWORD dwSIG2;};
struct _MIB_IPNETTABLE {DWORD dwNumEntries;MIB_IPNETROW table[1];};
struct _OSVERSIONINFOA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];};
struct _OSVERSIONINFOW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];};
struct _PERUSERSECTION {char szGUID[59];char szDispName[128];char szLocale[10];char szStub[1040];char szVersion[32];char szCompID[128];DWORD dwIsInstalled;BOOL bRollback;};
struct _RB_HITTESTINFO {POINT pt;UINT flags;int iBand;};
struct _SCurrencyArray {ULONG cValues;CURRENCY *lpcur;};
struct _SDateTimeArray {ULONG cValues;FILETIME *lpft;};
struct _SOCKET_ADDRESS {LPSOCKADDR lpSockaddr;INT iSockaddrLength;};
struct _SOrRestriction {ULONG cRes;LPSRestriction lpRes;};
union _ULARGE_INTEGER {_ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC __anonymous0;struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC u;ULONGLONG QuadPart;};
struct _WCE_DEVICELIST {ULONG numDevice;WCE_IRDA_DEVICE_INFO Device[1];};
struct __CEL_HEAP_FREE {HANDLE hHeap;DWORD dwFlags;DWORD lpMem;DWORD dwTID;DWORD dwPID;DWORD dwCallerPID;DWORD adwStackTrace[];};
struct tagACCTLISTINFO {DWORD cbSize;ACCTTYPE AcctTypeInit;DWORD dwAcctFlags;DWORD dwFlags;};
struct tagCUSTDATAITEM {GUID guid;VARIANTARG varValue;};
struct tagFULLPROPSPEC {GUID guidPropSet;PROPSPEC psProperty;};
struct tagINETADDRLIST {ULONG cAddress;LPINETADDR prgAddress;};
struct tagMIMECSETINFO {UINT uiCodePage;UINT uiInternetEncoding;WCHAR wszCharset[50];};
struct tagNMLVFINDITEM {NMHDR hdr;int iStart;LVFINDINFOA lvfi;};
struct tagNNTPAUTHINFO {AUTHTYPE authtype;LPSTR pszUser;LPSTR pszPass;};
struct tagNNTPXHDRRESP {DWORD cHeaders;LPNNTPXHDR rgHeaders;DWORD dwReserved;};
struct tagNavigateData {ULONG ulTarget;ULONG ulURL;ULONG ulRefURL;ULONG ulPostData;DWORD dwFlags;};
struct tagRemFORMATETC {DWORD cfFormat;DWORD ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagRemSTGMEDIUM {DWORD tymed;DWORD dwHandleType;unsigned int pData;unsigned int pUnkForRelease;unsigned int cbData;byte data[1];};
struct tagTRANSMITINFO {ENCODINGTYPE ietCurrent;ENCODINGTYPE ietXmitMime;ENCODINGTYPE ietXmit822;ULONG cbLongestLine;ULONG cExtended;ULONG ulPercentExt;ULONG cbSize;ULONG cLines;};
struct ICifRWFileVtbl {HRESULT ( *SetDescription)(ICifComponent *This, LPCSTR pszDesc);HRESULT ( *CreateComponent)(ICifComponent *This, LPCSTR pszID, ICifRWComponent **p);HRESULT ( *CreateGroup)(ICifComponent *This, LPCSTR pszID, ICifRWGroup **p);HRESULT ( *CreateMode)(ICifComponent *This, LPCSTR pszID, ICifRWMode **p);HRESULT ( *DeleteComponent)(ICifComponent *This, LPCSTR pszID);HRESULT ( *DeleteGroup)(ICifComponent *This, LPCSTR pszID);HRESULT ( *DeleteMode)(ICifComponent *This, LPCSTR pszID);HRESULT ( *Flush)(ICifComponent *This);};
struct ICifRWModeVtbl {HRESULT ( *SetDescription)(ICifComponent *This, LPCSTR pszDesc);HRESULT ( *SetDetails)(ICifComponent *This, LPCSTR pszDetails);};
typedef ULONG  MAPIFREEBUFFER(LPVOID lpBuffer);
typedef HRESULT ( *PFNCONTEXTCALL)(ComCallData *pParam);
typedef HANDLE ( *PFN_HeapCreate)(DWORD flOptions, DWORD dwInitialSize, DWORD dwMaximumSize);
struct _BTHNS_SETBLOB {ULONG *pSdpVersion;ULONG *pRecordHandle;ULONG Reserved[4];ULONG fSecurity;ULONG fOptions;ULONG ulRecordLength;UCHAR pRecord[1];};
struct _CEL_BOOT_TIME {DWORD dwAction;WCHAR szName[];};
struct _CMC_PEND_INFO {CRYPT_DATA_BLOB PendToken;FILETIME PendTime;};
struct _DSCBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _FW_IP_ADDRESS {USHORT Family;_FW_IP_ADDRESS___3527238699F3EEF5D435929F9A6EFFF0 __anonymous0;};
union _LARGE_INTEGER {_LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E __anonymous0;struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E u;LONGLONG QuadPart;};
struct _MIB_IPDESTROW {_MIB_IPFORWARDROW __anonymous0;DWORD dwForwardPreference;DWORD dwForwardViewSet;};
struct _MIB_MFE_TABLE {DWORD dwNumEntries;MIB_IPMCAST_MFE table[1];};
struct _OLESTREAMVTBL {DWORD ( *Get)(LPOLESTREAM, void *, DWORD);DWORD ( *Put)(LPOLESTREAM,  void *, DWORD);};
struct _PARSED_CONFIG {UINT32 ConfigBase;UINT8 RegMask;UINT8 LastConfigIndex;};
struct _POST_INIT_BUF {HANDLE p_hDevice;HKEY p_hDeviceKey;};
struct _PRIVILEGE_SET {DWORD PrivilegeCount;DWORD Control;LUID_AND_ATTRIBUTES Privilege[1];};
struct _RGNDATAHEADER {DWORD dwSize;DWORD iType;DWORD nCount;DWORD nRgnSize;RECT rcBound;};
struct _SCARD_ATRMASK {DWORD cbAtr;BYTE rgbAtr[36];BYTE rgbMask[36];};
struct _SOCKADDR_IRDA {u_short irdaAddressFamily;u_char irdaDeviceID[4];char irdaServiceName[25];};
struct _SORTORDERSPEC {CEPROPID propid;DWORD dwFlags;};
struct _SSLCLIENTOPTS {time_t CacheTimeout;DWORD dwCacheEntries;DWORD dwFlags;};
struct _SSLSERVEROPTS {time_t CacheTimeout;DWORD dwCacheEntries;DWORD dwFlags;};
struct _SSortOrderSet {ULONG cSorts;ULONG cCategories;ULONG cExpanded;SSortOrder aSort[1];};
struct _STGOVERLAPPED {DWORD Internal;DWORD InternalHigh;DWORD Offset;DWORD OffsetHigh;HEVENT hEvent;IOverlappedCompletion *lpCompletion;DWORD reserved;};
struct _TOKEN_CONTROL {LUID TokenId;LUID AuthenticationId;LUID ModifiedId;TOKEN_SOURCE TokenSource;};
struct __CEL_INT_DATA {DWORD dwTimeStamp;WORD wSysIntr;WORD wNestingLevel;};
struct _avimainheader {FOURCC fcc;DWORD cb;DWORD dwMicroSecPerFrame;DWORD dwMaxBytesPerSec;DWORD dwPaddingGranularity;DWORD dwFlags;DWORD dwTotalFrames;DWORD dwInitialFrames;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwReserved[4];};
struct tagADDRESSLIST {ULONG cAdrs;LPADDRESSPROPS prgAdr;};
struct tagCHARSETINFO {UINT ciCharset;UINT ciACP;FONTSIGNATURE fs;};
struct tagENUMLOGFONT {LOGFONTA elfLogFont;TCHAR elfFullName[64];TCHAR elfStyle[32];};
struct tagEXTRASEARCH {GUID guidSearch;WCHAR wszFriendlyName[80];WCHAR wszUrl[2084];};
struct tagHEAPENTRY32 {DWORD dwSize;HANDLE hHandle;DWORD dwAddress;DWORD dwBlockSize;DWORD dwFlags;DWORD dwLockCount;DWORD dwResvd;DWORD th32ProcessID;DWORD th32HeapID;};
struct tagIXPRASLOGON {CHAR szConnectoid[256];CHAR szUserName[256];CHAR szPassword[256];CHAR szDomain[256];CHAR szPhoneNumber[128];BOOL fSavePassword;};
struct tagLVDISPINFOW {NMHDR hdr;LVITEMW item;};
struct tagMONITORINFO {DWORD cbSize;RECT rcMonitor;RECT rcWork;DWORD dwFlags;};
struct tagMQCOLUMNSET {ULONG cCol;PROPID *aCol;};
struct tagNMSELCHANGE {NMHDR nmhdr;SYSTEMTIME stSelStart;SYSTEMTIME stSelEnd;};
struct tagNNTPMESSAGE {ULONG cbSize;LPSTREAM pstmMsg;};
struct tagPARAMDESCEX {ULONG cBytes;VARIANTARG varDefaultValue;};
struct tagRFC1522INFO {BOOL fRfc1522Allowed;BOOL fRfc1522Used;BOOL fAllow8bit;HCHARSET hRfc1522Cset;};
struct tagRFC1766INFO {LCID lcid;WCHAR wszRfc1766[6];WCHAR wszLocaleName[32];};
struct tagSOFTKBDDATA {UINT uCount;WORD wCode[1][256];};
struct tagTBADDBITMAP {HINSTANCE hInst;UINT nID;};
struct tagTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;char tmFirstChar;char tmLastChar;char tmDefaultChar;char tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct tagTVDISPINFOA {NMHDR hdr;TVITEMA item;};
struct tagTVDISPINFOW {NMHDR hdr;TVITEMW item;};
struct CATALOG_INFO_ {DWORD cbStruct;WCHAR wszCatalogFile[260];};
struct CONFIRMSAFETY {CLSID clsid;IUnknown *pUnk;DWORD dwFlags;};
typedef DWORD ( *DETECTVERSION)(DETECTION_STRUCT *pDetectionStruct);
typedef STATUS (*GETFIRSTTUPLE)(PCARD_TUPLE_PARMS);
typedef int ( *LPWSPSHUTDOWN)(SOCKET s, int how, LPINT lpErrno);
struct NDIS_BPC_POOL {BPC_HANDLE nhConnection;ULONG ulcbPoolSize;ULONG ulcbMaxBufferSize;ULONG ulcbBufferReserved;};
typedef STATUS (*RELEASEWINDOW)(CARD_WINDOW_HANDLE);
struct SEQUENCE_INFO {LONGLONG SeqID;ULONG SeqNo;ULONG PrevNo;};
struct _ACTRL_ALISTA {ULONG cEntries;PACTRL_PROPERTY_ENTRYA pPropertyAccessList;};
struct _ACTRL_ALISTW {ULONG cEntries;PACTRL_PROPERTY_ENTRYW pPropertyAccessList;};
struct _CEL_RDP_INFO {BYTE bOrderType;BYTE bOrder;DWORD dwTimeSpent;};
union _DDALPHABLTFX {DDARGB ddargbScaleFactors;DWORD dwFillValue;};
struct _DSBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _MIB_IFSTATUS {DWORD dwIfIndex;DWORD dwAdminStatus;DWORD dwOperationalStatus;BOOL bMHbeatActive;BOOL bMHbeatAlive;};
struct _MIB_IPNETROW {DWORD dwIndex;DWORD dwPhysAddrLen;BYTE bPhysAddr[8];DWORD dwAddr;DWORD dwType;};
struct _MIB_TCPTABLE {DWORD dwNumEntries;MIB_TCPROW table[1];};
struct _MIB_UDPTABLE {DWORD dwNumEntries;MIB_UDPROW table[1];};
struct _NETRESOURCEA {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;LPSTR lpProvider;};
struct _OBEX_REQUEST {DWORD dwRequest;DWORD dwFlags;IHeaderCollection *pHeaderCol;BOOL fStream;IStream *pStream;};
struct _PCI_CFG_INFO {HMODULE hDll;PVOID ConfigEntryFn;struct _PCI_CFG_INFO *Next;};
struct _PROVDATA_SIP {DWORD cbStruct;GUID gSubject;struct SIP_DISPATCH_INFO_ *pSip;struct SIP_DISPATCH_INFO_ *pCATSip;struct SIP_SUBJECTINFO_ *psSipSubjectInfo;struct SIP_SUBJECTINFO_ *psSipCATSubjectInfo;struct SIP_INDIRECT_DATA_ *psIndirectData;};
struct _PctPublicKey {DWORD Type;DWORD cbKey;UCHAR pKey[1];};
struct _QUOTA_LIMITS {SIZE_T PagedPoolLimit;SIZE_T NonPagedPoolLimit;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;SIZE_T PagefileLimit;LARGE_INTEGER TimeLimit;};
struct _SBinaryArray {ULONG cValues;SBinary *lpbin;};
struct _SCHANNEL_ALG {DWORD dwUse;ALG_ID Algid;DWORD cBits;DWORD dwFlags;DWORD dwReserved;};
struct _SPropProblem {ULONG ulIndex;ULONG ulPropTag;SCODE scode;};
struct _SSLPROTOCOLS {DWORD dwCount;SSLPROTOCOL ProtocolList[1];};
struct _TAPE_PREPARE {DWORD Operation;BOOLEAN Immediate;};
struct _TOKEN_GROUPS {DWORD GroupCount;SID_AND_ATTRIBUTES Groups[1];};
struct _TOKEN_SOURCE {CHAR SourceName[8];LUID SourceIdentifier;};
struct _aviextheader {FOURCC fcc;DWORD cb;DWORD dwGrandFrames;DWORD dwFuture[61];};
struct _currencyfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPSTR lpCurrencySymbol;};
struct _tagHWXRESULT {WORD cbCount;WORD iSelection;WORD iPosition;TCHAR chCandidate[1];};
struct _timecodedata {TIMECODE time;DWORD dwSMPTEflags;DWORD dwUser;};
struct phonecaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwProviderInfoSize;DWORD dwProviderInfoOffset;DWORD dwPhoneInfoSize;DWORD dwPhoneInfoOffset;DWORD dwPermanentPhoneID;DWORD dwPhoneNameSize;DWORD dwPhoneNameOffset;DWORD dwStringFormat;DWORD dwPhoneStates;DWORD dwHookSwitchDevs;DWORD dwHandsetHookSwitchModes;DWORD dwSpeakerHookSwitchModes;DWORD dwHeadsetHookSwitchModes;DWORD dwVolumeFlags;DWORD dwGainFlags;DWORD dwDisplayNumRows;DWORD dwDisplayNumColumns;DWORD dwNumRingModes;DWORD dwNumButtonLamps;DWORD dwButtonModesSize;DWORD dwButtonModesOffset;DWORD dwButtonFunctionsSize;DWORD dwButtonFunctionsOffset;DWORD dwLampModesSize;DWORD dwLampModesOffset;DWORD dwNumSetData;DWORD dwSetDataSize;DWORD dwSetDataOffset;DWORD dwNumGetData;DWORD dwGetDataSize;DWORD dwGetDataOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;DWORD dwPhoneFeatures;DWORD dwSettableHandsetHookSwitchModes;DWORD dwSettableSpeakerHookSwitchModes;DWORD dwSettableHeadsetHookSwitchModes;DWORD dwMonitoredHandsetHookSwitchModes;DWORD dwMonitoredSpeakerHookSwitchModes;DWORD dwMonitoredHeadsetHookSwitchModes;GUID PermanentPhoneGuid;};
struct tWAVEFORMATEX {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wBitsPerSample;WORD cbSize;};
struct tagAspectInfo {ULONG cb;DWORD dwFlags;};
struct tagBITMAPINFO {BITMAPINFOHEADER bmiHeader;RGBQUAD bmiColors[1];};
struct tagCABSTRBLOB {ULONG cElems;BSTRBLOB *pElems;};
struct tagCACLIPDATA {ULONG cElems;CLIPDATA *pElems;};
struct tagCAFILETIME {ULONG cElems;FILETIME *pElems;};
struct tagDBSORTINFO {BOOL fDesc;LCID lcid;};
struct tagFINDHEADER {LPCSTR pszHeader;DWORD dwReserved;};
struct tagHHN_NOTIFY {NMHDR hdr;PCSTR pszUrl;};
struct tagHWXRESULTS {USHORT indxBox;WCHAR rgChar[1];};
struct tagIMENUMINFO {TCHAR szName[260];CLSID clsid;};
struct tagKEYBDINPUT {WORD wVk;WORD wScan;DWORD dwFlags;DWORD time;DWORD dwExtraInfo;};
struct tagLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
struct tagLVDISPINFO {NMHDR hdr;LVITEMA item;};
struct tagMOUSEINPUT {LONG dx;LONG dy;DWORD mouseData;DWORD dwFlags;DWORD time;DWORD dwExtraInfo;};
struct tagNNTPHEADER {DWORD dwArticleNum;LPSTR pszSubject;LPSTR pszFrom;LPSTR pszDate;LPSTR pszMessageId;LPSTR pszReferences;DWORD dwBytes;DWORD dwLines;LPSTR pszXref;};
struct tagVERIDARRAY {DWORD cVerid;GUID verid[1];};
typedef STATUS (*GETNEXTTUPLE)(PCARD_TUPLE_PARMS);
typedef STATUS (*GETTUPLEDATA)(PCARD_DATA_PARMS);
struct IACList2Vtbl {HRESULT ( *SetOptions)(IACList2 *This, DWORD dwFlag);HRESULT ( *GetOptions)(IACList2 *This, DWORD *pdwFlag);};
typedef BOOL (*LPCLOSE_PIPE)(USB_PIPE);
typedef INT ( *LPNSPCLEANUP)(LPGUID lpProviderId);
typedef BOOL (*LPRESET_PIPE)(USB_PIPE);
struct MSGQUEUEINFO {DWORD dwSize;DWORD dwFlags;DWORD dwMaxMessages;DWORD cbMaxMessage;DWORD dwCurrentMessages;DWORD dwMaxQueueMessages;WORD wNumReaders;WORD wNumWriters;};
struct SPC_SIGINFO_ {DWORD dwSipVersion;GUID gSIPGuid;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwReserved4;DWORD dwReserved5;};
typedef void  TIMECALLBACK(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct _AMVPDIMINFO {DWORD dwFieldWidth;DWORD dwFieldHeight;DWORD dwVBIWidth;DWORD dwVBIHeight;RECT rcValidRegion;};
struct _CARD_STATUS {CARD_SOCKET_HANDLE hSocket;UINT16 fCardState;UINT16 fSocketState;};
struct _CSADDR_INFO {SOCKET_ADDRESS LocalAddr;SOCKET_ADDRESS RemoteAddr;INT iSocketType;INT iProtocol;};
struct _DMA_ADAPTER {USHORT Size;PDMA_OPERATIONS DmaOperations;};
struct _INSTALLDATA {INSTALLSPECTYPE Type;INSTALLSPEC Spec;};
struct _MIB_IFTABLE {DWORD dwNumEntries;MIB_IFROW table[1];};
struct _MONTHLYDATE {DWORD rgfDays;WORD rgfMonths;};
struct _OS_DEP_DATA {struct _SMARTCARD_EXTENSION *pSmartCardExtension;CRITICAL_SECTION CritSect;HANDLE hChangeEvent;HANDLE hCancelEvent;};
union _POWER_STATE {SYSTEM_POWER_STATE SystemState;DEVICE_POWER_STATE DeviceState;};
struct _PRIVKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DWORD bitlenX;DSSSEED DSSSeed;};
struct _QOS_SD_MODE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapeDiscardMode;};
struct _RPC_MESSAGE {RPC_BINDING_HANDLE Handle;unsigned int DataRepresentation;void *Buffer;unsigned int BufferLength;unsigned int ProcNum;PRPC_SYNTAX_IDENTIFIER TransferSyntax;void *RpcInterfaceInformation;void *ReservedForRuntime;void *ManagerEpv;void *ImportContext;unsigned int RpcFlags;};
struct _SLPSTRArray {ULONG cValues;LPSTR *lppszA;};
struct _WCE_IAS_SET {char irdaClassName[61];char irdaAttribName[61];u_short irdaAttribType;union _WCE_IAS_SET___49BF8BB762C01FBE78F915881A844DC3 irdaAttribute;};
struct _WSATHREADID {HANDLE ThreadHandle;DWORD_PTR Reserved;};
struct __CEL_BUFFER {DWORD dwMaskProcess;DWORD dwMaskUser;DWORD dwMaskCE;PDWORD pWrite;DWORD dwBytesLeft;DWORD dwSize;PDWORD pBuffer;};
struct _tagHLTBINFO {ULONG uDockType;RECT rcTbPos;};
struct _tagTASKDATA {ULONG cbSize;DWORD dwReserved;DWORD dwTaskFlags;DWORD dwPriority;DWORD dwDuration;DWORD nParallelTasks;};
struct _wireBRECORD {ULONG fFlags;ULONG clSize;IRecordInfo *pRecInfo;byte *pRecord;};
struct ldapsortkeyA {PCHAR sk_attrtype;PCHAR sk_matchruleoid;BOOLEAN sk_reverseorder;};
typedef LONG (*pRegCloseKey)(HKEY);
struct tagCOLUMNSET {ULONG cCol;FULLPROPSPEC *aCol;};
struct tagDBBINDEXT {BYTE *pExtension;DBCOUNTITEM ulExtension;};
struct tagLVCOLUMNA {UINT mask;int fmt;int cx;LPSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagMQSORTKEY {PROPID propColumn;ULONG dwOrder;};
struct tagMQSORTSET {ULONG cCol;MQSORTKEY *aCol;};
struct tagNMHEADERA {NMHDR hdr;int iItem;int iButton;HDITEMA *pitem;};
struct tagNMHEADERW {NMHDR hdr;int iItem;int iButton;HDITEMW *pitem;};
struct tagNNTPGROUP {DWORD dwCount;DWORD dwFirst;DWORD dwLast;LPSTR pszGroup;};
struct tagPARAMDESC {LPPARAMDESCEX pparamdescex;USHORT wParamFlags;};
struct tagQACONTROL {ULONG cbSize;DWORD dwMiscStatus;DWORD dwViewStatus;DWORD dwEventCookie;DWORD dwPropNotifyCookie;DWORD dwPointerActivationPolicy;};
struct tagREBARINFO {UINT cbSize;UINT fMask;HIMAGELIST himl;};
struct tagSTYLEBUFA {DWORD dwStyle;CHAR szDescription[32];};
struct tagSTYLEBUFW {DWORD dwStyle;WCHAR szDescription[32];};
struct tagTPMPARAMS {UINT cbSize;RECT rcExclude;};
struct tagWINDOWPOS {HWND hwnd;HWND hwndInsertAfter;int x;int y;int cx;int cy;UINT flags;};
struct IDccManVtbl {HRESULT ( *Advise)(IDccMan *This, IDccManSink *pDccSink, DWORD *pdwContext);HRESULT ( *Unadvise)(IDccMan *This, DWORD dwContext);HRESULT ( *ShowCommSettings)(IDccMan *This);HRESULT ( *AutoconnectEnable)(IDccMan *This);HRESULT ( *AutoconnectDisable)(IDccMan *This);HRESULT ( *ConnectNow)(IDccMan *This);HRESULT ( *DisconnectNow)(IDccMan *This);HRESULT ( *SetIconDataTransferring)(IDccMan *This);HRESULT ( *SetIconNoDataTransferring)(IDccMan *This);HRESULT ( *SetIconError)(IDccMan *This);};
typedef int ( *LPWSPLISTEN)(SOCKET s, int backlog, LPINT lpErrno);
struct P3PResource {P3PCURL pszLocation;P3PVERB pszVerb;P3PCURL pszP3PHeaderRef;P3PCURL pszLinkTagRef;struct P3PResource *pContainer;};
typedef BOOL (*PFN_PDD_ISR)(PDWORD pdwWaitTime);
struct _ACE_HEADER {BYTE AceType;BYTE AceFlags;WORD AceSize;};
struct _DDCAPS_DX3 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwReserved4;DWORD dwReserved5;DWORD dwReserved6;};
struct _DDCAPS_DX5 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];};
struct _DOT11_SSID {ULONG uSSIDLength;UCHAR ucSSID[32];};
struct _MODULEINFO {LPVOID lpBaseOfDll;DWORD SizeOfImage;LPVOID EntryPoint;};
struct _MYCANDLIST {HWND ParentWnd;LPCANDIDATELIST CandList;};
struct _OVERLAPPED {DWORD Internal;DWORD InternalHigh;DWORD Offset;DWORD OffsetHigh;HANDLE hEvent;};
struct _PUBKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DSSSEED DSSSeed;};
struct _RTL_BITMAP {ULONG SizeOfBitMap;PULONG Buffer;};
struct _SEC_OBJECT {DWORD cObjects;SEC_OBJECT_ELEMENT *prgObjects;};
struct _SGuidArray {ULONG cValues;GUID *lpguid;};
struct _SLongArray {ULONG cValues;LONG *lpl;};
struct _TAPE_ERASE {DWORD Type;BOOLEAN Immediate;};
struct _WSAVersion {DWORD dwVersion;WSAECOMPARATOR ecHow;};
struct _numberfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;};
struct in6_pktinfo {IN6_ADDR ipi6_addr;UINT ipi6_ifindex;};
struct midihdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;struct midihdr_tag *lpNext;DWORD reserved;DWORD dwOffset;DWORD dwReserved[8];};
struct tagBSTRBLOB {ULONG cbSize;BYTE *pData;};
struct tagCLIPDATA {ULONG cbSize;int ulClipFmt;BYTE *pClipData;};
struct tagCOLORKEY {DWORD KeyType;DWORD PaletteIndex;COLORREF LowColorValue;COLORREF HighColorValue;};
struct tagCUSTDATA {DWORD cCustData;LPCUSTDATAITEM prgCustData;};
struct tagDBOBJECT {DWORD dwFlags;IID iid;};
struct tagDBPARAMS {void *pData;DB_UPARAMS cParamSets;HACCESSOR hAccessor;};
struct tagELEMDESC {TYPEDESC tdesc;tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D __anonymous0;};
struct tagFINDBODY {LPSTR pszPriType;LPSTR pszSubType;DWORD dwReserved;};
struct tagHWXGUIDE {UINT cHorzBox;UINT cVertBox;INT xOrigin;INT yOrigin;UINT cxBox;UINT cyBox;UINT cxOffset;UINT cyOffset;UINT cxWriting;UINT cyWriting;UINT cyMid;UINT cyBase;UINT nDir;};
struct tagINETADDR {INETADDRTYPE addrtype;CHAR szEmail[256];};
struct tagMULTI_QI { IID *pIID;IUnknown *pItf;HRESULT hr;};
struct tagNNTPLIST {DWORD cLines;LPSTR *rgszLines;};
struct tagNNTPNEXT {DWORD dwArticleNum;LPSTR pszMessageId;};
struct tagNNTPXHDR {DWORD dwArticleNum;LPSTR pszHeader;};
struct tagPOP3UIDL {DWORD dwPopId;LPSTR pszUidl;};
struct tagSTATDATA {FORMATETC formatetc;DWORD advf;IAdviseSink *pAdvSink;DWORD dwConnection;};
struct tagVERGRAPH {VERCONNECTIONINFO blocks;VERIDARRAY nodes;};
struct wavehdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;DWORD dwLoops;struct wavehdr_tag *lpNext;DWORD reserved;};
typedef ULONG  FREEBUFFER(LPVOID lpBuffer);
struct HTMPERFCTL {DWORD dwSize;DWORD dwFlags;HTMPFCBFN pfnCall;void *pvHost;};
typedef BOOL ( *NEEDREBOOT)(DWORD dwRebootCheck);
typedef void ( *PHONEEVENT)(HTAPIPHONE htPhone, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
struct _CTL_USAGE {DWORD cUsageIdentifier;LPSTR *rgpszUsageIdentifier;};
struct _HD_LAYOUT {RECT *prc;WINDOWPOS *pwpos;};
struct _IMAGEINFO {HBITMAP hbmImage;HBITMAP hbmMask;int Unused1;int Unused2;RECT rcImage;};
struct _LDT_ENTRY {WORD LimitLow;WORD BaseLow;union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 HighWord;};
struct _PSHNOTIFY {NMHDR hdr;LPARAM lParam;};
struct _TRIVERTEX {LONG x;LONG y;COLOR16 Red;COLOR16 Green;COLOR16 Blue;COLOR16 Alpha;};
struct _riffchunk {FOURCC fcc;DWORD cb;};
struct _tagLMDATA {DWORD dwVersion;DWORD flags;DWORD cnt;DWORD dwOffsetSymbols;DWORD dwOffsetSkip;DWORD dwOffsetScore;BYTE ab[1];};
struct _tagOLECMD {ULONG cmdID;DWORD cmdf;};
struct in_pktinfo {IN_ADDR ipi_addr;UINT ipi_ifindex;};
union tagBINDPTR {FUNCDESC *lpfuncdesc;VARDESC *lpvardesc;ITypeComp *lptcomp;};
struct tagCACLSID {ULONG cElems;CLSID *pElems;};
struct tagCADWORD {ULONG cElems;DWORD *pElems;};
struct tagCALPSTR {ULONG cElems;LPSTR *pElems;};
struct tagCASCODE {ULONG cElems;SCODE *pElems;};
struct tagDVD_ATR {ULONG ulCAT;BYTE pbATRI[768];};
struct tagIDLDESC {ULONG dwReserved;USHORT wIDLFlags;};
struct tagLICINFO {LONG cbLicInfo;BOOL fRuntimeKeyAvail;BOOL fLicVerified;};
struct tagNMREBAR {NMHDR hdr;UINT uBand;UINT wID;UINT cyChild;UINT cyBand;};
struct tagQuality {QualityMessageType Type;int Proportion;REFERENCE_TIME Late;REFERENCE_TIME TimeStamp;};
struct tagSIPINFO {DWORD cbSize;DWORD fdwFlags;RECT rcVisibleDesktop;RECT rcSipRect;DWORD dwImDataSize;void *pvImData;};
struct tagSORTSET {ULONG cCol;SORTKEY *aCol;};
typedef BOOL ( *ABORTPROC)(HDC, int);
struct ARTICLEID {ARTICLEIDTYPE idType;ARTICLEID___647512AA9B67F9C9BB99261C4EFD0D05 __anonymous0;};
struct DX2DXFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;DX2DXFORMOPS eOp;};
typedef STATUS (*GETSTATUS)(PCARD_STATUS);
typedef BOOL ( *ISNTADMIN)(DWORD, DWORD *);
typedef int ( *LPWSPBIND)(SOCKET s,  struct sockaddr *name, int namelen, LPINT lpErrno);
struct SdpString {CHAR *val;ULONG length;};
struct XACTSTATS {ULONG cOpen;ULONG cCommitting;ULONG cCommitted;ULONG cAborting;ULONG cAborted;ULONG cInDoubt;ULONG cHeuristicDecision;FILETIME timeTransactionsUp;};
struct _ADRENTRY {ULONG ulReserved1;ULONG cValues;LPSPropValue rgPropVals;};
struct _CERT_RDN {DWORD cRDNAttr;PCERT_RDN_ATTR rgRDNAttr;};
struct _DBGPARAM {WCHAR lpszName[32];WCHAR rglpszZones[16][32];ULONG ulZoneMask;};
struct _DDSCAPS2 {DWORD dwCaps;_DDSCAPS2___8E5B05F19B273318D79B4635679340DD __anonymous0;};
struct _DOCINFOA {int cbSize;LPCSTR lpszDocName;LPCSTR lpszOutput;LPCSTR lpszDatatype;DWORD fwType;};
struct _FPO_DATA {DWORD ulOffStart;DWORD cbProcSize;DWORD cdwLocals;WORD cdwParams;unsigned short cbProlog : 8;unsigned short cbRegs : 3;unsigned short fHasSEH : 1;unsigned short fUseBP : 1;unsigned short reserved : 1;unsigned short cbFrame : 2;};
struct _MMCKINFO {FOURCC ckid;DWORD cksize;FOURCC fccType;DWORD dwDataOffset;DWORD dwFlags;};
struct _OBJECTID {GUID Lineage;DWORD Uniquifier;};
struct _SCH_CRED {DWORD dwVersion;DWORD cCreds;PVOID *paSecret;PVOID *paPublic;DWORD cMappers;struct _HMAPPER **aphMappers;};
struct _SHITEMID {USHORT cb;BYTE abID[1];};
struct _StrTable {DWORD cEntries;LPSTRENTRY pse;};
struct _TBBUTTON {int iBitmap;int idCommand;BYTE fsState;BYTE fsStyle;BYTE bReserved[2];DWORD dwData;int iString;};
struct _flowspec {ULONG TokenRate;ULONG TokenBucketSize;ULONG PeakBandwidth;ULONG Latency;ULONG DelayVariation;SERVICETYPE ServiceType;ULONG MaxSduSize;ULONG MinimumPolicedSize;};
struct _rifflist {FOURCC fcc;DWORD cb;FOURCC fccListType;};
union _timecode {_timecode___6889D7C8638655C86F211076F8C624CB __anonymous0;DWORDLONG qw;};
struct tagCABOOL {ULONG cElems;VARIANT_BOOL *pElems;};
struct tagCADATE {ULONG cElems;DATE *pElems;};
struct tagCAUUID {ULONG cElems;GUID *pElems;};
struct tagDBDATE {SHORT year;USHORT month;USHORT day;};
struct tagDBLIKE {LONG lWeight;GUID guidDialect;};
typedef ULONG (*DBGPRINT)(PCH Format, ...);
struct _ADRLIST {ULONG cEntries;ADRENTRY aEntries[1];};
struct _CERT_ID {DWORD dwIdChoice;_CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C __anonymous0;};
struct _CabInfo {PSTR pszCab;PSTR pszInf;PSTR pszSection;char szSrcPath[260];DWORD dwFlags;};
struct _DSSSEED {DWORD counter;BYTE seed[20];};
struct _PinInfo {IBaseFilter *pFilter;PIN_DIRECTION dir;WCHAR achName[128];};
struct _SBinary {ULONG cb;LPBYTE lpb;};
struct _SRowSet {ULONG cRows;SRow aRow[1];};
struct tagACCEL {BYTE fVirt;WORD key;WORD cmd;WORD pad;};
struct tagNMHDR {HWND hwndFrom;UINT idFrom;UINT code;};
struct tagRANGE {RANGETYPE idType;DWORD dwFirst;DWORD dwLast;};
struct DXBRUSH {DXSAMPLE Color;IDXSurface *pTexture;DXFPOINT TexturePos;};
struct WSPData {WORD wVersion;WORD wHighVersion;WCHAR szDescription[256];};
struct _CEBLOB {DWORD dwCount;LPBYTE lpb;};
struct _INT128 {UINT32 u0;UINT32 u1;UINT32 u2;INT32 u3;};
struct _NT_TIB {struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;PVOID StackBase;PVOID StackLimit;PVOID SubSystemTib;_NT_TIB___0349ADB4452EC09BEC08E2292695FBBA __anonymous0;PVOID ArbitraryUserPointer;struct _NT_TIB *Self;};
struct _STRING {USHORT Length;USHORT MaximumLength;PCHAR Buffer;};
struct _cpinfo {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];};
struct tagBLOB {ULONG cbSize;BYTE *pBlobData;};
struct tagCACY {ULONG cElems;CY *pElems;};
struct tagCAUH {ULONG cElems;ULARGE_INTEGER *pElems;};
struct tagCAUI {ULONG cElems;USHORT *pElems;};
typedef BOOL  FNIDLE(LPVOID);
struct berval {ULONG bv_len;PCHAR bv_val;};
struct fd_set {u_int fd_count;SOCKET fd_array[64];};
struct tagCAH {ULONG cElems;LARGE_INTEGER *pElems;};
struct DXVEC {DXBNDTYPE eType;union DXVEC____MIDL___MIDL_itf_dxtrans_0155_0002 u;};
struct _LUID {DWORD LowPart;LONG HighPart;};
struct _SRow {ULONG ulAdrEntryPad;ULONG cValues;LPSPropValue lpProps;};
union tagCY {tagCY___983F061E0B702DD8AE0B4B955735A6A3 __anonymous0;LONGLONG int64;};
struct _ACL {BYTE AclRevision;BYTE Sbz1;WORD AclSize;WORD AceCount;WORD Sbz2;};
struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___0EEE90683FC184311ECCCD409B91075C {uchar ich_type;uchar ich_code;ushort ich_xsum;ulong ich_param;};
struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___5F23BCEFF143F24425E18DB271E74871 {ULONG SystemContext;POWER_STATE_TYPE Type;POWER_STATE State;};
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359 {HANDLE hIOPort;DWORD dwNumberOfBytesTransferred;DWORD dwCompletionKey;LPOVERLAPPED lpOverlapped;};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780 {HWND hWnd;UINT uMsg;WPARAM context;};
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315 {LPWSAOVERLAPPED lpOverlapped;HANDLE hPort;ULONG_PTR Key;};
struct _NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F___AuthenticationEvent {NDIS_802_11_STATUS_INDICATION Status;NDIS_802_11_AUTHENTICATION_REQUEST Request[1];};
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_0 {ULONG BaseAddresses[6];ULONG CIS;USHORT SubVendorID;USHORT SubSystemID;ULONG ROMBaseAddress;ULONG Reserved2[2];UCHAR InterruptLine;UCHAR InterruptPin;UCHAR MinimumGrant;UCHAR MaximumLatency;};
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_1 {ULONG BaseAddresses[2];UCHAR PrimaryBusNumber;UCHAR SecondaryBusNumber;UCHAR SubordinateBusNumber;UCHAR SecondaryLatencyTimer;UCHAR IOBase;UCHAR IOLimit;USHORT SecondaryStatus;USHORT MemoryBase;USHORT MemoryLimit;USHORT PrefetchableMemoryBase;USHORT PrefetchableMemoryLimit;ULONG PrefetchableMemoryBaseUpper32;ULONG PrefetchableMemoryLimitUpper32;USHORT IOBaseUpper;USHORT IOLimitUpper;ULONG Reserved2;ULONG ExpansionROMBase;UCHAR InterruptLine;UCHAR InterruptPin;USHORT BridgeControl;};
struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_2 {ULONG BaseAddress;UCHAR CapabilitiesPtr;UCHAR Reserved2;USHORT SecondaryStatus;UCHAR PrimaryBusNumber;UCHAR CardbusBusNumber;UCHAR SubordinateBusNumber;UCHAR CardbusLatencyTimer;ULONG MemoryBase0;ULONG MemoryLimit0;ULONG MemoryBase1;ULONG MemoryLimit1;USHORT IOBase0_LO;USHORT IOBase0_HI;USHORT IOLimit0_LO;USHORT IOLimit0_HI;USHORT IOBase1_LO;USHORT IOBase1_HI;USHORT IOLimit1_LO;USHORT IOLimit1_HI;UCHAR InterruptLine;UCHAR InterruptPin;USHORT BridgeControl;USHORT SubVendorID;USHORT SubSystemID;ULONG LegacyBaseAddress;UCHAR Reserved3[56];ULONG SystemControl;UCHAR MultiMediaControl;UCHAR GeneralStatus;UCHAR Reserved4[2];UCHAR GPIO0Control;UCHAR GPIO1Control;UCHAR GPIO2Control;UCHAR GPIO3Control;ULONG IRQMuxRouting;UCHAR RetryStatus;UCHAR CardControl;UCHAR DeviceControl;UCHAR Diagnostic;};
union _FF89E438303108C0D33906FD5928F176___7395E293A6E60324CDBFB0E25A5179BF {DWORD dwValue;LPSTR pszValue;FILETIME ftValue;};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A __anonymous0;DWORD Name;WORD Id;};
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA {PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;};
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC {PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;};
union _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB {struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_0 type0;struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_1 type1;struct _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB___PCI_HEADER_TYPE_2 type2;};
union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD {LONG irdaAttribInt;struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___B5DCF807C499FCDEE2A60940AC752147 irdaAttribOctetSeq;struct _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD___04135898E560345A2F242A01D2B4E8C6 irdaAttribUsrStr;};
union tagCATEGORIZATION___9A864AD3BD44E1250FA7471F5202A2AD {ULONG cClusters;BUCKETCATEGORIZE bucket;RANGECATEGORIZE range;};
union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191 {LONG irdaAttribInt;struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___1D4E303DADE57E5BB276842A2C49A9FB irdaAttribOctetSeq;struct _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191___C57AEBFB9C28022BDEE1928105F7EF0C irdaAttribUsrStr;};
union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4 {BYTE ShortName[8];struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B Name;PBYTE LongName[2];};
union tMIXERCONTROL___7907B101388E14016599F7564F0D3B22 {tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tMIXERCONTROL___7907B101388E14016599F7564F0D3B22___A8262751543F154F80C41ED2519FD13B __anonymous1;DWORD dwReserved[6];};
union tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A {RGBQUAD bmiColors[256];DWORD dwBitMasks[3];TRUECOLORINFO TrueColorInfo;};
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 {DWORD ms;DWORD sample;DWORD cb;DWORD ticks;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB smpte;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D midi;};
union tagINPUT___72687D791E298366090936F57062F9D6 {MOUSEINPUT mi;KEYBDINPUT ki;HARDWAREINPUT hi;};
union in_addr___C13EC994467D6E67044F092615EC7EA9 {struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 S_un_b;struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 S_un_w;u_long S_addr;};
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {HANDLE hClientToken;GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
struct ldap___DB9AF84D9AB6BBC578E4BBA80938AF25 {UINT_PTR sb_sd;UCHAR Reserved1[41];ULONG_PTR sb_naddr;UCHAR Reserved2[24];};
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {DWORD cbSize;CMSG_SIGNED_ENCODE_INFO SignedInfo;CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;};
struct _NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulMediaModes;LINE_CALL_PARAMS LineCallParams;};
struct IUPnPDescriptionDocumentCallbackVtbl {HRESULT ( *QueryInterface)(IUPnPDescriptionDocumentCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDescriptionDocumentCallback *This);ULONG ( *Release)(IUPnPDescriptionDocumentCallback *This);HRESULT ( *LoadComplete)(IUPnPDescriptionDocumentCallback *This, HRESULT hrLoadResult);};
union _GDI_OBJECT____MIDL_IAdviseSink_0002 {wireHBITMAP hBitmap;wireHPALETTE hPalette;wireHGLOBAL hGeneric;};
struct IDirectDrawMediaSampleAllocatorVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaSampleAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaSampleAllocator *This);ULONG ( *Release)(IDirectDrawMediaSampleAllocator *This);HRESULT ( *GetDirectDraw)(IDirectDrawMediaSampleAllocator *This, IDirectDraw **ppDirectDraw);};
struct NDIS_BPC_MEDIA_SPECIFIC_INFORMATION {BPC_HANDLE nhConnection;ULONG ulBPCStreamType;ULONG ulReasonCode;PVOID pvMiniportReserved1;ULONG ulMiniportReserved2;};
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {LPSTR pszObjId;DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct IActiveScriptSiteInterruptPollVtbl {HRESULT ( *QueryInterface)(IActiveScriptSiteInterruptPoll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSiteInterruptPoll *This);ULONG ( *Release)(IActiveScriptSiteInterruptPoll *This);HRESULT ( *QueryContinue)(IActiveScriptSiteInterruptPoll *This);};
struct IInternetProtocolSinkStackableVtbl {HRESULT ( *QueryInterface)(IInternetProtocolSinkStackable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolSinkStackable *This);ULONG ( *Release)(IInternetProtocolSinkStackable *This);HRESULT ( *SwitchSink)(IInternetProtocolSinkStackable *This, IInternetProtocolSink *pOIProtSink);HRESULT ( *CommitSwitch)(IInternetProtocolSinkStackable *This);HRESULT ( *RollbackSwitch)(IInternetProtocolSinkStackable *This);};
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {LARGE_INTEGER PerProcessUserTimeLimit;LARGE_INTEGER PerJobUserTimeLimit;DWORD LimitFlags;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;DWORD ActiveProcessLimit;DWORD Affinity;DWORD PriorityClass;DWORD SchedulingClass;};
struct _NDIS_TAPI_LINE_CONFIG_DIALOG_EDIT {ULONG ulRequestID;ULONG ulDeviceID;HWND hwndOwner;ULONG ulDeviceClassLen;ULONG ulConfigInOffset;ULONG ulConfigInSize;ULONG ulConfigOutOffset;UCHAR DataBuf[1];};
struct __MIDL___MIDL_itf_strmif_0231_0001 {HRESULT hrVPEStatus;BOOL bDvdVolInvalid;BOOL bDvdVolUnknown;BOOL bNoLine21In;BOOL bNoLine21Out;int iNumStreams;int iNumStreamsFailed;DWORD dwFailedStreamsFlag;};
struct _0302F8A06E19F526F6B7CE33122C2128 {BYTE bFirstEntry;BYTE bNumEntries;WORD wFlags;PALETTEENTRY peNew[];};
struct _078929F8CD96C82DFB2B0B82CFD86124 {DWORD cbSize;DWORD dwSignature;CHAR szTarget[260];WCHAR swzTarget[260];};
struct _115DB0BA7714D6186FAE116E0F88D0E0 {DWORD dwFlags;INT fmt;INT cx;INT idsName;LONG offsetProperty;DWORD dwReserved;};
struct _17CA7839736B8F73357CD165DBE52F18 {WCHAR DisplayString[129];DWORD GopherType;DWORD SizeLow;DWORD SizeHigh;FILETIME LastModificationTime;WCHAR Locator[654];};
struct _30C092ACFDACA2A085242C6994837CA9 {UINT cbSize;POINT pt;UINT uHit;SYSTEMTIME st;};
struct _3F4F059ECBF871A70338C30D0BE50D1F {DWORD dwSize;LPSTR pszConnection;DWORD dwOptionCount;DWORD dwOptionError;LPINTERNET_PER_CONN_OPTIONA pOptions;};
struct _5EF848D89F9DCE1B24DE4CD973F24EF8 {DWORD dwSize;LPDWORD pdwInstalledVer;LPDWORD pdwInstalledBuild;LPSTR pszGUID;LPSTR pszLocale;DWORD dwAskVer;DWORD dwAskBuild;ICifFile *pCifFile;ICifComponent *pCifComp;};
struct _629BEC52AC958F9227D2C26B709A43D0 {DWORD dwDlgFlags;DWORD dwDlgId;HINTERNET hInternetMapped;LPVOID lpVoid;};
struct _6DA6B4B6F4711DFAB548288AAA9B9C99 {DWORD dwSize;PCCERT_CONTEXT pCertificate;DWORD dwProtocol;ALG_ID aiCipher;DWORD dwCipherStrength;ALG_ID aiHash;DWORD dwHashStrength;ALG_ID aiExch;DWORD dwExchStrength;};
struct _704C8BC5772B0C9E3985D9D11FD57746 {TCHAR wzPackageID[300];TCHAR wzShortText[140];TCHAR wzLongText[512];TCHAR wzAppName[128];DWORD dwPackageSize;DWORD dwState;DMSDLINFO dlInfo;DWORD dwAux;};
struct _73DB40CAD3136568FAD030BDAAB8FF71 {char HostName[132];char DomainName[132];PIP_ADDR_STRING CurrentDnsServer;IP_ADDR_STRING DnsServerList;UINT NodeType;char ScopeId[260];UINT EnableRouting;UINT EnableProxy;UINT EnableDns;};
struct _7644B9603AEA08EBF4DF4A983BB6B237 {CHAR DisplayString[129];DWORD GopherType;DWORD SizeLow;DWORD SizeHigh;FILETIME LastModificationTime;CHAR Locator[654];};
struct _7F42DEB2BB5D0DE64733A8884285C23D {RPC_NS_HANDLE LookupContext;RPC_BINDING_HANDLE ProposedHandle;RPC_BINDING_VECTOR *Bindings;};
struct _8F75023966CB92194279486244E09366 {ULONG Size;PTCHAR ptcDeviceName;ULONG DeviceState;ULONG MediaType;ULONG MediaState;ULONG PhysicalMediaType;ULONG LinkSpeed;ULONGLONG PacketsSent;ULONGLONG PacketsReceived;ULONG InitTime;ULONG ConnectTime;ULONGLONG BytesSent;ULONGLONG BytesReceived;ULONGLONG DirectedBytesReceived;ULONGLONG DirectedPacketsReceived;ULONG PacketsReceiveErrors;ULONG PacketsSendErrors;ULONG ResetCount;ULONG MediaSenseConnectCount;ULONG MediaSenseDisconnectCount;};
struct _A92B2F5D7D80D42A113836D63CC8DDA6 {SYSTEMTIME stStartTime;SYSTEMTIME stDeltaTime;DWORD dwFlags;TCHAR wzDest[260];TCHAR wzCmdLine[260];};
struct _B3292A763DBD4275988A0D01CB88CB44 {ULONG dwFlags;DWORD dwFileAttributes;ULONG dwReserved;WCHAR *pwszExt;WCHAR wszFile[260];};
struct _C6832D807A2747A4D0CBF13E34E0B28B {tagDATABLOCKHEADER __anonymous0;CHAR szDarwinID[260];WCHAR szwDarwinID[260];};
struct _CA059CF4194B4A9D56D5FA32D4D81CE0 {LPITEMIDLIST pidlTargetFolder;WCHAR szTargetParsingName[260];WCHAR szNetworkProvider[260];DWORD dwAttributes;int csidl;};
struct _CCEDB0757BDFC2DD5AC112970835DC93 {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;ULONGLONG LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;ULONGLONG EditList;DWORD Reserved[1];};
struct _D26D25374C75FEF3AD181CCFA77BD37F {SCARD_IO_REQUEST ioRequest;BYTE bSw1;BYTE bSw2;_D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F __anonymous0;};
struct _D27293EA07A9AE13A5F9D796DF4562B3 {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG cValues;LPSPropValue lpPropVals;};
struct _D333B2CEDD563FFBEB75B63E07F81E15 {Q2931_IE_TYPE IEType;ULONG IELength;UCHAR IE[1];};
struct _FD737F0F5708B21CCBC55006761FC7AF {DWORD dwSize;BOOL fSecure;DWORD dwProtocol;ALG_ID aiCipher;DWORD dwCipherStrength;ALG_ID aiHash;DWORD dwHashStrength;ALG_ID aiExch;DWORD dwExchStrength;};
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;DWORD dwRecipientIndex;};
typedef HRESULT  IWABOBJECT_AllocateBuffer_METHOD(struct _IWABOBJECT *This, ULONG cbSize, LPVOID *lppBuffer);
typedef HRESULT  IWABOBJECT_QueryInterface_METHOD(struct _IWABOBJECT *This,  IID * riid, LPVOID *ppvObj);
typedef BOOL ( *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef SECURITY_STATUS ( *QUERY_SECURITY_PACKAGE_INFO_FN_A)(SEC_CHAR *, PSecPkgInfoA *);
struct _CERT_KEY_USAGE_RESTRICTION_INFO {DWORD cCertPolicyId;PCERT_POLICY_ID rgCertPolicyId;CRYPT_BIT_BLOB RestrictedKeyUsage;};
struct _DEV_BROADCAST_DEVICEINTERFACE_W {DWORD dbcc_size;DWORD dbcc_devicetype;DWORD dbcc_reserved;GUID dbcc_classguid;unsigned short dbcc_name[1];};
struct IEnumNetCfgBindingInterfaceVtbl {HRESULT ( *QueryInterface)(IEnumNetCfgBindingInterface *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNetCfgBindingInterface *This);ULONG ( *Release)(IEnumNetCfgBindingInterface *This);HRESULT ( *Next)(IEnumNetCfgBindingInterface *This, ULONG celt, INetCfgBindingInterface **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumNetCfgBindingInterface *This, ULONG celt);HRESULT ( *Reset)(IEnumNetCfgBindingInterface *This);HRESULT ( *Clone)(IEnumNetCfgBindingInterface *This, IEnumNetCfgBindingInterface **ppenum);};
struct IHighlightRenderingServicesVtbl {HRESULT ( *QueryInterface)(IHighlightRenderingServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHighlightRenderingServices *This);ULONG ( *Release)(IHighlightRenderingServices *This);HRESULT ( *AddSegment)(IHighlightRenderingServices *This, IDisplayPointer *pDispPointerStart, IDisplayPointer *pDispPointerEnd, IHTMLRenderStyle *pIRenderStyle, IHighlightSegment **ppISegment);HRESULT ( *MoveSegmentToPointers)(IHighlightRenderingServices *This, IHighlightSegment *pISegment, IDisplayPointer *pDispPointerStart, IDisplayPointer *pDispPointerEnd);HRESULT ( *RemoveSegment)(IHighlightRenderingServices *This, IHighlightSegment *pISegment);};
typedef BOOL (*LPLOAD_GENERIC_INTERFACE_DRIVER)(USB_HANDLE, LPCUSB_INTERFACE);
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 __anonymous0;union {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous1;};};
struct __MIDL_IEnumDVD_CELL_PIECE_0001 {UINT16 vob_id;UINT8 c_idn;UINT32 start;UINT32 end;};
struct IAMCopyCaptureFileProgressVtbl {HRESULT ( *QueryInterface)(IAMCopyCaptureFileProgress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCopyCaptureFileProgress *This);ULONG ( *Release)(IAMCopyCaptureFileProgress *This);HRESULT ( *Progress)(IAMCopyCaptureFileProgress *This, int iProgress);};
struct IAnimationComposerSiteSinkVtbl {HRESULT ( *QueryInterface)(IAnimationComposerSiteSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationComposerSiteSink *This);ULONG ( *Release)(IAnimationComposerSiteSink *This);void ( *UpdateAnimations)(IAnimationComposerSiteSink *This);void ( *ComposerSiteDetach)(IAnimationComposerSiteSink *This);};
struct IVoIPCurrentCallEnumeratorVtbl {HRESULT ( *QueryInterface)(IVoIPCurrentCallEnumerator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCurrentCallEnumerator *This);ULONG ( *Release)(IVoIPCurrentCallEnumerator *This);HRESULT ( *Reset)(IVoIPCurrentCallEnumerator *This);HRESULT ( *Skip)(IVoIPCurrentCallEnumerator *This, unsigned int celt);HRESULT ( *Next)(IVoIPCurrentCallEnumerator *This, unsigned int celt, IVoIPCurrentCall **rgCCP, unsigned int *pceltFetched);};
typedef HRESULT  IWABOBJECT_AllocateMore_METHOD(struct _IWABOBJECT *This, ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
typedef HRESULT  IWABOBJECT_GetLastError_METHOD(struct _IWABOBJECT *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);
struct _NDIS_TAPI_GET_LINE_DEV_STATUS {ULONG ulRequestID;HDRV_LINE hdLine;LINE_DEV_STATUS LineDevStatus;};
struct _NDIS_TAPI_SEND_USER_USER_INFO {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulUserUserInfoSize;UCHAR UserUserInfo[1];};
struct IConnectionPointContainerVtbl {HRESULT ( *QueryInterface)(IConnectionPointContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPointContainer *This);ULONG ( *Release)(IConnectionPointContainer *This);HRESULT ( *EnumConnectionPoints)(IConnectionPointContainer *This, IEnumConnectionPoints **ppEnum);HRESULT ( *FindConnectionPoint)(IConnectionPointContainer *This,  IID * riid, IConnectionPoint **ppCP);};
struct IRTCEnumUserSearchResultsVtbl {HRESULT ( *QueryInterface)(IRTCEnumUserSearchResults *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumUserSearchResults *This);ULONG ( *Release)(IRTCEnumUserSearchResults *This);HRESULT ( *Next)(IRTCEnumUserSearchResults *This, ULONG celt, IRTCUserSearchResult **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumUserSearchResults *This);HRESULT ( *Skip)(IRTCEnumUserSearchResults *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumUserSearchResults *This, IRTCEnumUserSearchResults **ppEnum);};
struct IRTCSessionPortManagementVtbl {HRESULT ( *QueryInterface)(IRTCSessionPortManagement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionPortManagement *This);ULONG ( *Release)(IRTCSessionPortManagement *This);HRESULT ( *SetPortManager)(IRTCSessionPortManagement *This, IRTCPortManager *pPortManager);};
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMPOINT)(POINT ptScreen, IAccessible **ppacc, VARIANT *pvarChild);
typedef UINT ( *LPPRINTERSPECIFICSETTINGSHOOK)(LPPAGESETUPDLG, HWND);
typedef int ( *LPWPUQUERYSOCKETHANDLECONTEXT)(SOCKET s, PDWORD_PTR lpContext, LPINT lpErrno);
struct _NDIS_TAPI_GET_ADDRESS_STATUS {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulAddressID;LINE_ADDRESS_STATUS LineAddressStatus;};
struct _OFFLOAD_SECURITY_ASSOCIATION {OFFLOAD_OPERATION_E Operation;SPI_TYPE SPI;OFFLOAD_ALGO_INFO IntegrityAlgo;OFFLOAD_ALGO_INFO ConfAlgo;OFFLOAD_ALGO_INFO Reserved;};
struct _SECURITY_DESCRIPTOR_RELATIVE {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;DWORD Owner;DWORD Group;DWORD Sacl;DWORD Dacl;};
struct IElementNamespaceFactoryVtbl {HRESULT ( *QueryInterface)(IElementNamespaceFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespaceFactory *This);ULONG ( *Release)(IElementNamespaceFactory *This);HRESULT ( *Create)(IElementNamespaceFactory *This, IElementNamespace *pNamespace);};
typedef void ( *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext);
struct _CERT_AUTHORITY_KEY_ID2_INFO {CRYPT_DATA_BLOB KeyId;CERT_ALT_NAME_INFO AuthorityCertIssuer;CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;};
struct _CMSG_KEY_TRANS_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CMSG_MAIL_LIST_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CRYPT_KEY_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;};
struct _INTERNET_CACHE_CONFIG_INFOA {DWORD dwStructSize;DWORD dwContainer;DWORD dwQuota;DWORD dwReserved4;BOOL fPerUser;DWORD dwSyncMode;DWORD dwNumCachePaths;_INTERNET_CACHE_CONFIG_INFOA___78FFCDE5D66210154A246857C0A8AF2D __anonymous0;DWORD dwNormalUsage;DWORD dwExemptUsage;};
struct _INTERNET_CACHE_CONFIG_INFOW {DWORD dwStructSize;DWORD dwContainer;DWORD dwQuota;DWORD dwReserved4;BOOL fPerUser;DWORD dwSyncMode;DWORD dwNumCachePaths;_INTERNET_CACHE_CONFIG_INFOW___3F6DDC8243BD3AE092E54B21191F156D __anonymous0;DWORD dwNormalUsage;DWORD dwExemptUsage;};
typedef BOOL ( *GOPHER_ATTRIBUTE_ENUMERATOR)(LPGOPHER_ATTRIBUTE_TYPE lpAttributeInfo, DWORD dwError);
struct IRTCEnumPresenceDevicesVtbl {HRESULT ( *QueryInterface)(IRTCEnumPresenceDevices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumPresenceDevices *This);ULONG ( *Release)(IRTCEnumPresenceDevices *This);HRESULT ( *Next)(IRTCEnumPresenceDevices *This, ULONG celt, IRTCPresenceDevice **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumPresenceDevices *This);HRESULT ( *Skip)(IRTCEnumPresenceDevices *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumPresenceDevices *This, IRTCEnumPresenceDevices **ppEnum);};
struct ITIMEMediaPlayerControlVtbl {HRESULT ( *QueryInterface)(ITIMEMediaPlayerControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEMediaPlayerControl *This);ULONG ( *Release)(ITIMEMediaPlayerControl *This);HRESULT ( *getControl)(ITIMEMediaPlayerControl *This, IUnknown **control);};
typedef BOOLEAN (*PFAST_IO_MDL_WRITE_COMPLETE)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, PMDL MdlChain, struct _DEVICE_OBJECT *DeviceObject);
typedef BOOL ( *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType,  void *pvCtrlPara);
struct _CERT_AUTHORITY_KEY_ID_INFO {CRYPT_DATA_BLOB KeyId;CERT_NAME_BLOB CertIssuer;CRYPT_INTEGER_BLOB CertSerialNumber;};
struct _CRYPT_ENCRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD dwFlags;DWORD dwInnerContentType;};
struct _CRYPT_PROVIDER_REGDEFUSAGE {DWORD cbStruct;GUID *pgActionID;WCHAR *pwszDllName;char *pwszLoadCallbackDataFunctionName;char *pwszFreeCallbackDataFunctionName;};
struct _RTL_CRITICAL_SECTION_DEBUG {WORD Type;WORD CreatorBackTraceIndex;struct _RTL_CRITICAL_SECTION *CriticalSection;LIST_ENTRY ProcessLocksList;DWORD EntryCount;DWORD ContentionCount;DWORD Spare[2];};
struct _SSL_CREDENTIAL_CERTIFICATE {DWORD cbPrivateKey;PBYTE pPrivateKey;DWORD cbCertificate;PBYTE pCertificate;PSTR pszPassword;};
struct IBluetoothAuthenticateVtbl {HRESULT ( *QueryInterface)(IBluetoothAuthenticate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBluetoothAuthenticate *This);ULONG ( *Release)(IBluetoothAuthenticate *This);};
struct IDXTRedirectFilterInitVtbl {HRESULT ( *QueryInterface)(IDXTRedirectFilterInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTRedirectFilterInit *This);ULONG ( *Release)(IDXTRedirectFilterInit *This);HRESULT ( *SetHTMLPaintSite)(IDXTRedirectFilterInit *This, void *pvHTMLPaintSite);};
struct IElementBehaviorSubmitVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSubmit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSubmit *This);ULONG ( *Release)(IElementBehaviorSubmit *This);HRESULT ( *GetSubmitInfo)(IElementBehaviorSubmit *This, IHTMLSubmitData *pSubmitData);HRESULT ( *Reset)(IElementBehaviorSubmit *This);};
struct IEnumNetCfgBindingPathVtbl {HRESULT ( *QueryInterface)(IEnumNetCfgBindingPath *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNetCfgBindingPath *This);ULONG ( *Release)(IEnumNetCfgBindingPath *This);HRESULT ( *Next)(IEnumNetCfgBindingPath *This, ULONG celt, INetCfgBindingPath **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumNetCfgBindingPath *This, ULONG celt);HRESULT ( *Reset)(IEnumNetCfgBindingPath *This);HRESULT ( *Clone)(IEnumNetCfgBindingPath *This, IEnumNetCfgBindingPath **ppenum);};
struct IMimeEditTagCollectionVtbl {HRESULT ( *QueryInterface)(IMimeEditTagCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEditTagCollection *This);ULONG ( *Release)(IMimeEditTagCollection *This);HRESULT ( *Init)(IMimeEditTagCollection *This, IUnknown *pHtmlDoc);HRESULT ( *Next)(IMimeEditTagCollection *This, ULONG cFetch, IMimeEditTag **ppTag, ULONG *pcFetched);HRESULT ( *Reset)(IMimeEditTagCollection *This);HRESULT ( *Count)(IMimeEditTagCollection *This, ULONG *pcItems);};
struct NDIS_BPC_CONNECTION_STATUS {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;ULONG ulConnectPriority;ULONG ulDisconnectPriority;ULONG ulbpsAverage;ULONG ulbpsBurst;ULONG ulState;BOOLEAN fEnabled;};
typedef HRESULT (*PFNCESETDEVMGMTPACKAGELIST)(PDMSINVRECORD, DWORD);
typedef BOOL ( *PFN_CERT_ENUM_SYSTEM_STORE)( void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _DOT11_STA_POWER_MGMT_MODE {DOT11_POWER_MODE dot11PowerMode;ULONG uPowerSaveLevel;BOOL bReceiveDTIMs;};
struct _IMAGE_ROM_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD BaseOfBss;DWORD GprMask;DWORD CprMask[4];DWORD GpValue;};
struct _NDIS_TAPI_GET_CALL_STATUS {ULONG ulRequestID;HDRV_CALL hdCall;LINE_CALL_STATUS LineCallStatus;};
struct _SPC_INDIRECT_DATA_CONTENT {CRYPT_ATTRIBUTE_TYPE_VALUE Data;CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;CRYPT_HASH_BLOB Digest;};
struct _TAPE_GET_MEDIA_PARAMETERS {LARGE_INTEGER Capacity;LARGE_INTEGER Remaining;DWORD BlockSize;DWORD PartitionCount;BOOLEAN WriteProtected;};
struct IAMAnalogVideoDecoderVtbl {HRESULT ( *QueryInterface)(IAMAnalogVideoDecoder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMAnalogVideoDecoder *This);ULONG ( *Release)(IAMAnalogVideoDecoder *This);HRESULT ( *get_AvailableTVFormats)(IAMAnalogVideoDecoder *This, int *lAnalogVideoStandard);HRESULT ( *put_TVFormat)(IAMAnalogVideoDecoder *This, int lAnalogVideoStandard);HRESULT ( *get_TVFormat)(IAMAnalogVideoDecoder *This, int *plAnalogVideoStandard);HRESULT ( *get_HorizontalLocked)(IAMAnalogVideoDecoder *This, int *plLocked);HRESULT ( *put_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This, int lVCRHorizontalLocking);HRESULT ( *get_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This, int *plVCRHorizontalLocking);HRESULT ( *get_NumberOfLines)(IAMAnalogVideoDecoder *This, int *plNumberOfLines);HRESULT ( *put_OutputEnable)(IAMAnalogVideoDecoder *This, int lOutputEnable);HRESULT ( *get_OutputEnable)(IAMAnalogVideoDecoder *This, int *plOutputEnable);};
struct ICreateJavaPackageMgrVtbl {HRESULT ( *QueryInterface)(ICreateJavaPackageMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateJavaPackageMgr *This);ULONG ( *Release)(ICreateJavaPackageMgr *This);HRESULT ( *GetPackageManager)(ICreateJavaPackageMgr *This, IJavaPackageManager **ppPackageMgr);};
struct IDVDNavDataStatusSinkVtbl {HRESULT ( *QueryInterface)(IDVDNavDataStatusSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDNavDataStatusSink *This);ULONG ( *Release)(IDVDNavDataStatusSink *This);HRESULT ( *NotifyNewPCI)(IDVDNavDataStatusSink *This);};
struct IEnumCodeStoreDBEntryVtbl {HRESULT ( *QueryInterface)(IEnumCodeStoreDBEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCodeStoreDBEntry *This);ULONG ( *Release)(IEnumCodeStoreDBEntry *This);HRESULT ( *Next)(IEnumCodeStoreDBEntry *This, ULONG celt, ICodeStoreDBEntry **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumCodeStoreDBEntry *This, ULONG celt);HRESULT ( *Reset)(IEnumCodeStoreDBEntry *This);HRESULT ( *Clone)(IEnumCodeStoreDBEntry *This, IEnumCodeStoreDBEntry **ppenum);};
struct IEnumOleDocumentViewsVtbl {HRESULT ( *QueryInterface)(IEnumOleDocumentViews *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleDocumentViews *This);ULONG ( *Release)(IEnumOleDocumentViews *This);HRESULT ( *Next)(IEnumOleDocumentViews *This, ULONG cViews, IOleDocumentView **rgpView, ULONG *pcFetched);HRESULT ( *Skip)(IEnumOleDocumentViews *This, ULONG cViews);HRESULT ( *Reset)(IEnumOleDocumentViews *This);HRESULT ( *Clone)(IEnumOleDocumentViews *This, IEnumOleDocumentViews **ppEnum);};
struct IInternetThreadSwitchVtbl {HRESULT ( *QueryInterface)(IInternetThreadSwitch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetThreadSwitch *This);ULONG ( *Release)(IInternetThreadSwitch *This);HRESULT ( *Prepare)(IInternetThreadSwitch *This);HRESULT ( *Continue)(IInternetThreadSwitch *This);};
struct IMimeEnumMessagePartsVtbl {HRESULT ( *QueryInterface)(IMimeEnumMessageParts *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEnumMessageParts *This);ULONG ( *Release)(IMimeEnumMessageParts *This);HRESULT ( *Next)(IMimeEnumMessageParts *This, ULONG cFetch, IMimeMessage **prgpMessage, ULONG *pcFetched);HRESULT ( *Skip)(IMimeEnumMessageParts *This, ULONG cItems);HRESULT ( *Reset)(IMimeEnumMessageParts *This);HRESULT ( *Clone)(IMimeEnumMessageParts *This, IMimeEnumMessageParts **ppEnum);HRESULT ( *Count)(IMimeEnumMessageParts *This, ULONG *pcItems);};
struct IVoIPCallerInfoDBEnumVtbl {HRESULT ( *QueryInterface)(IVoIPCallerInfoDBEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallerInfoDBEnum *This);ULONG ( *Release)(IVoIPCallerInfoDBEnum *This);HRESULT ( *Reset)(IVoIPCallerInfoDBEnum *This);HRESULT ( *Skip)(IVoIPCallerInfoDBEnum *This, unsigned int celt);HRESULT ( *Next)(IVoIPCallerInfoDBEnum *This, unsigned int celt, IVoIPCallerInfoRecord **rgVoIPCallerInfoRecord, unsigned int *pceltFetched);};
typedef BOOL ( *PFN_CRYPT_ENUM_KEYID_PROP)( CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData);
struct _CERT_KEY_ATTRIBUTES_INFO {CRYPT_DATA_BLOB KeyId;CRYPT_BIT_BLOB IntendedKeyUsage;PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;};
struct _CERT_PHYSICAL_STORE_INFO {DWORD cbSize;LPSTR pszOpenStoreProvider;DWORD dwOpenEncodingType;DWORD dwOpenFlags;CRYPT_DATA_BLOB OpenParameters;DWORD dwFlags;DWORD dwPriority;};
struct _CERT_SIGNED_CONTENT_INFO {CRYPT_DER_BLOB ToBeSigned;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CRYPT_BIT_BLOB Signature;};
struct _CREATE_THREAD_DEBUG_INFO {HANDLE hThread;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;};
struct _CRYPT_RC2_CBC_PARAMETERS {DWORD dwVersion;BOOL fIV;BYTE rgbIV[8];};
struct _MEMORY_BASIC_INFORMATION {PVOID BaseAddress;PVOID AllocationBase;DWORD AllocationProtect;SIZE_T RegionSize;DWORD State;DWORD Protect;DWORD Type;};
struct _MIB_IPMCAST_MFE_STATS_EX {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulNumOutIf;ULONG ulInPkts;ULONG ulInOctets;ULONG ulPktsDifferentIf;ULONG ulQueueOverflow;ULONG ulUninitMfe;ULONG ulNegativeMfe;ULONG ulInDiscards;ULONG ulInHdrErrors;ULONG ulTotalOutPackets;MIB_IPMCAST_OIF_STATS rgmiosOutStats[1];};
struct _NDISTAPI_CHARACTERISTICS {PVOID RequestProc;GUID Guid;NDIS_WAN_MEDIUM_SUBTYPE MediaType;};
struct _NDIS_TAPI_GET_ADDRESS_ID {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulAddressID;ULONG ulAddressMode;ULONG ulAddressSize;CHAR szAddress[1];};
struct tagNATLANGUAGERESTRICTION {FULLPROPSPEC prop;WCHAR *pwcsPhrase;LCID lcid;};
struct tagNMDATETIMEFORMATQUERYA {NMHDR nmhdr;LPCSTR pszFormat;SIZE szMax;};
struct IEnumNetCfgComponentVtbl {HRESULT ( *QueryInterface)(IEnumNetCfgComponent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNetCfgComponent *This);ULONG ( *Release)(IEnumNetCfgComponent *This);HRESULT ( *Next)(IEnumNetCfgComponent *This, ULONG celt, INetCfgComponent **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumNetCfgComponent *This, ULONG celt);HRESULT ( *Reset)(IEnumNetCfgComponent *This);HRESULT ( *Clone)(IEnumNetCfgComponent *This, IEnumNetCfgComponent **ppenum);};
struct INotificationRunningVtbl {HRESULT ( *QueryInterface)(INotificationRunning *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotificationRunning *This);ULONG ( *Release)(INotificationRunning *This);};
struct IRTCEnumParticipantsVtbl {HRESULT ( *QueryInterface)(IRTCEnumParticipants *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumParticipants *This);ULONG ( *Release)(IRTCEnumParticipants *This);HRESULT ( *Next)(IRTCEnumParticipants *This, ULONG celt, IRTCParticipant **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumParticipants *This);HRESULT ( *Skip)(IRTCEnumParticipants *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumParticipants *This, IRTCEnumParticipants **ppEnum);};
struct ISegmentListIteratorVtbl {HRESULT ( *QueryInterface)(ISegmentListIterator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISegmentListIterator *This);ULONG ( *Release)(ISegmentListIterator *This);HRESULT ( *Current)(ISegmentListIterator *This, ISegment **ppISegment);HRESULT ( *First)(ISegmentListIterator *This);HRESULT ( *IsDone)(ISegmentListIterator *This);HRESULT ( *Advance)(ISegmentListIterator *This);};
typedef BOOL (*LPIS_DEFAULT_PIPE_HALTED)(USB_HANDLE, LPBOOL);
typedef INT ( *LPNSPINSTALLSERVICECLASS)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo);
struct NDIS_BPC_DEVICE_SETTINGS {BPC_HANDLE nhDevice;ULONG ulBPCCaps;ULONG ulcConnections;BOOLEAN fEnabled;ULONG ulStreamType;ULONG ulcbAddressConnection;ULONG rgulAddressConnection[1];};
typedef void (*PPUT_SCATTER_GATHER_LIST)(PDMA_ADAPTER DmaAdapter, PSCATTER_GATHER_LIST ScatterGather, BOOLEAN WriteToDevice);
typedef HRESULT  SHOWMODELESSHTMLDIALOGFN(HWND hwndParent, IMoniker *pmk, VARIANT *pvarArgIn, VARIANT *pvarOptions, IHTMLWindow2 **ppWindow);
struct _CMSG_HASHED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_HASH_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_PROVIDER_DEFUSAGE {DWORD cbStruct;GUID gActionID;LPVOID pDefPolicyCallbackData;LPVOID pDefSIPClientData;};
struct _CTL_VERIFY_USAGE_STATUS {DWORD cbSize;DWORD dwError;DWORD dwFlags;PCCTL_CONTEXT *ppCtl;DWORD dwCtlEntryIndex;PCCERT_CONTEXT *ppSigner;DWORD dwSignerIndex;};
struct _DOT11_KEY_ALGO_TKIP_MIC {DOT11_IV48_COUNTER dot11IV48Counter;ULONG ulTKIPKeyLength;ULONG ulMICKeyLength;UCHAR ucTKIPMICKeys[1];};
struct _HSE_SEND_HEADER_EX_INFO {LPCSTR pszStatus;LPCSTR pszHeader;DWORD cchStatus;DWORD cchHeader;BOOL fKeepConn;};
struct _HTTPSPolicyCallbackData {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;DWORD dwAuthType;DWORD fdwChecks;WCHAR *pwszServerName;};
struct _NDIS_TAPI_GET_CALL_INFO {ULONG ulRequestID;HDRV_CALL hdCall;LINE_CALL_INFO LineCallInfo;};
struct _SCH_CRED_SECRET_PRIVKEY {DWORD dwType;PBYTE pPrivateKey;DWORD cbPrivateKey;PSTR pszPassword;};
struct mpeglayer3waveformat_tag {WAVEFORMATEX wfx;WORD wID;DWORD fdwFlags;WORD nBlockSize;WORD nFramesPerBlock;WORD nCodecDelay;};
struct tagMQPROPERTYRESTRICTION {ULONG rel;PROPID prop;MQPROPVARIANT prval;};
struct truespeechwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;WORD nSamplesPerBlock;BYTE abReserved[28];};
typedef SCODE  CREATECONVERSATIONINDEX(ULONG cbParent, LPBYTE lpbParent, ULONG *lpcbConvIndex, LPBYTE *lppbConvIndex);
struct IEnumTravelLogEntryVtbl {HRESULT ( *QueryInterface)(IEnumTravelLogEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumTravelLogEntry *This);ULONG ( *Release)(IEnumTravelLogEntry *This);HRESULT ( *Next)(IEnumTravelLogEntry *This, ULONG cElt, ITravelLogEntry **rgElt, ULONG *pcEltFetched);HRESULT ( *Skip)(IEnumTravelLogEntry *This, ULONG cElt);HRESULT ( *Reset)(IEnumTravelLogEntry *This);HRESULT ( *Clone)(IEnumTravelLogEntry *This, IEnumTravelLogEntry **ppEnum);};
struct ITransactionOptionsVtbl {HRESULT ( *QueryInterface)(ITransactionOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionOptions *This);ULONG ( *Release)(ITransactionOptions *This);HRESULT ( *SetOptions)(ITransactionOptions *This, XACTOPT *pOptions);HRESULT ( *GetOptions)(ITransactionOptions *This, XACTOPT *pOptions);};
typedef int ( *LPWSCINSTALLQOSTEMPLATE)( LPGUID Guid, LPWSABUF QosName, LPQOS Qos);
struct UserNotificationTrigger {DWORD dwSize;DWORD dwType;DWORD dwEvent;TCHAR *lpszApplication;TCHAR *lpszArguments;SYSTEMTIME stStartTime;SYSTEMTIME stEndTime;};
struct _CRL_ISSUING_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;BOOL fOnlyContainsUserCerts;BOOL fOnlyContainsCACerts;CRYPT_BIT_BLOB OnlySomeReasonFlags;BOOL fIndirectCRL;};
struct _DEV_BROADCAST_VOLUME_W {DWORD dbcv_size;DWORD dbcv_devicetype;DWORD dbcv_reserved;DWORD dbcv_unitmask;WORD dbcv_flags;unsigned short dbcv_name[1];};
struct _SE_IMPERSONATION_STATE {PACCESS_TOKEN Token;BOOLEAN CopyOnOpen;BOOLEAN EffectiveOnly;SECURITY_IMPERSONATION_LEVEL Level;};
struct _tagSYNCMGRLOGERRORINFO {DWORD cbSize;DWORD mask;DWORD dwSyncMgrErrorFlags;SYNCMGRERRORID ErrorID;SYNCMGRITEMID ItemID;};
struct tagCInterfaceStubHeader { IID *piid; MIDL_SERVER_INFO *pServerInfo;unsigned int DispatchTableCount; PRPC_STUB_FUNCTION *pDispatchTable;};
struct tagIMAP_STATUS_RESPONSE {LPSTR pszMailboxName;BOOL fMessages;DWORD dwMessages;BOOL fRecent;DWORD dwRecent;BOOL fUIDNext;DWORD dwUIDNext;BOOL fUIDValidity;DWORD dwUIDValidity;BOOL fUnseen;DWORD dwUnseen;};
struct tagNMDATETIMEWMKEYDOWNA {NMHDR nmhdr;int nVirtKey;LPCSTR pszFormat;SYSTEMTIME st;};
typedef SECURITY_STATUS ( *APPLY_CONTROL_TOKEN_FN)(PCtxtHandle, PSecBufferDesc);
typedef SECURITY_STATUS ( *COMPLETE_AUTH_TOKEN_FN)(PCtxtHandle, PSecBufferDesc);
struct IAMFilterMiscFlagsVtbl {HRESULT ( *QueryInterface)(IAMFilterMiscFlags *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMFilterMiscFlags *This);ULONG ( *Release)(IAMFilterMiscFlags *This);ULONG ( *GetMiscFlags)(IAMFilterMiscFlags *This);};
struct IAMTimecodeDisplayVtbl {HRESULT ( *QueryInterface)(IAMTimecodeDisplay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeDisplay *This);ULONG ( *Release)(IAMTimecodeDisplay *This);HRESULT ( *GetTCDisplayEnable)(IAMTimecodeDisplay *This, int *pState);HRESULT ( *SetTCDisplayEnable)(IAMTimecodeDisplay *This, int State);HRESULT ( *GetTCDisplay)(IAMTimecodeDisplay *This, int Param, int *pValue);HRESULT ( *SetTCDisplay)(IAMTimecodeDisplay *This, int Param, int Value);};
struct IEnumInstalledAppsVtbl {HRESULT ( *QueryInterface)(IEnumInstalledApps *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumInstalledApps *This);ULONG ( *Release)(IEnumInstalledApps *This);HRESULT ( *Next)(IEnumInstalledApps *This, IInstalledApp **pia);HRESULT ( *Reset)(IEnumInstalledApps *This);};
struct IEnumNetConnectionVtbl {HRESULT ( *QueryInterface)(IEnumNetConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNetConnection *This);ULONG ( *Release)(IEnumNetConnection *This);HRESULT ( *Next)(IEnumNetConnection *This, ULONG celt, INetConnection **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumNetConnection *This, ULONG celt);HRESULT ( *Reset)(IEnumNetConnection *This);HRESULT ( *Clone)(IEnumNetConnection *This, IEnumNetConnection **ppenum);};
struct IEnumPublishedAppsVtbl {HRESULT ( *QueryInterface)(IEnumPublishedApps *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPublishedApps *This);ULONG ( *Release)(IEnumPublishedApps *This);HRESULT ( *Next)(IEnumPublishedApps *This, IPublishedApp **pia);HRESULT ( *Reset)(IEnumPublishedApps *This);};
struct IImageDecodeFilterVtbl {HRESULT ( *QueryInterface)(IImageDecodeFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImageDecodeFilter *This);ULONG ( *Release)(IImageDecodeFilter *This);HRESULT ( *Initialize)(IImageDecodeFilter *This, IImageDecodeEventSink *pEventSink);HRESULT ( *Process)(IImageDecodeFilter *This, IStream *pStream);HRESULT ( *Terminate)(IImageDecodeFilter *This, HRESULT hrStatus);};
struct IMediaParamsRecordVtbl {HRESULT ( *QueryInterface)(IMediaParamsRecord *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaParamsRecord *This);ULONG ( *Release)(IMediaParamsRecord *This);HRESULT ( *InitRecording)(IMediaParamsRecord *This, IMediaParamsRecordNotify *pINotify);HRESULT ( *PunchIn)(IMediaParamsRecord *This);HRESULT ( *PunchOut)(IMediaParamsRecord *This);HRESULT ( *EndRecording)(IMediaParamsRecord *This);};
struct ITransactionObjectVtbl {HRESULT ( *QueryInterface)(ITransactionObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionObject *This);ULONG ( *Release)(ITransactionObject *This);HRESULT ( *GetTransactionObject)(ITransactionObject *This, ULONG ulTransactionLevel, ITransaction **ppTransactionObject);};
struct IVoIPCallLogDBEnumVtbl {HRESULT ( *QueryInterface)(IVoIPCallLogDBEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallLogDBEnum *This);ULONG ( *Release)(IVoIPCallLogDBEnum *This);HRESULT ( *Reset)(IVoIPCallLogDBEnum *This);HRESULT ( *Skip)(IVoIPCallLogDBEnum *This, unsigned int celt);HRESULT ( *Next)(IVoIPCallLogDBEnum *This, unsigned int celt, IVoIPCallRecord **rgVoIPCallRecord, unsigned int *pceltFetched);};
typedef HRESULT  IWABOBJECT_Find_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd);
typedef BOOL (*LPABORT_PIPE_TRANSFERS)(USB_PIPE, DWORD);
typedef HRESULT ( *LPDDENUMMODESCALLBACK2)(LPDDSURFACEDESC2, LPVOID);
typedef HRESULT ( *LPFNACCESSIBLECHILDREN)(IAccessible *paccContainer, LONG iChildStart, LONG cChildren, VARIANT *rgvarChildren, LONG *pcObtained);
typedef BOOL ( *PFN_CMSG_STREAM_OUTPUT)( void *pvArg, BYTE *pbData, DWORD cbData, BOOL fFinal);
struct _ACTRL_PROPERTY_ENTRYA {LPSTR lpProperty;PACTRL_ACCESS_ENTRY_LISTA pAccessEntryList;ULONG fListFlags;};
struct _BTHNS_RESTRICTIONBLOB {ULONG type;ULONG serviceHandle;SdpQueryUuid uuids[12];ULONG numRange;SdpAttributeRange pRange[1];};
struct _CREDENTIAL_ATTRIBUTEA {LPSTR Keyword;DWORD Flags;DWORD ValueSize;LPBYTE Value;};
struct _CRYPT_X942_OTHER_INFO {LPSTR pszContentEncryptionObjId;BYTE rgbCounter[4];BYTE rgbKeyLength[4];CRYPT_DATA_BLOB PubInfo;};
struct _CTL_VERIFY_USAGE_PARA {DWORD cbSize;CRYPT_DATA_BLOB ListIdentifier;DWORD cCtlStore;HCERTSTORE *rghCtlStore;DWORD cSignerStore;HCERTSTORE *rghSignerStore;};
struct _DOT11_AP_JOIN_REQUEST {ULONG uJoinFailureTimeout;DOT11_RATE_SET OperationalRateSet;ULONG uChCenterFrequency;DOT11_BSS_DESCRIPTION dot11BSSDescription;};
struct _IMAGE_TLS_DIRECTORY32 {DWORD StartAddressOfRawData;DWORD EndAddressOfRawData;PDWORD AddressOfIndex;PIMAGE_TLS_CALLBACK *AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _MIB_IPMCAST_MFE_STATS {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulNumOutIf;ULONG ulInPkts;ULONG ulInOctets;ULONG ulPktsDifferentIf;ULONG ulQueueOverflow;MIB_IPMCAST_OIF_STATS rgmiosOutStats[1];};
struct _NDIS_STATISTICS_VALUE {NDIS_OID Oid;ULONG DataLength;UCHAR Data[1];};
struct _TIME_ZONE_INFORMATION {LONG Bias;WCHAR StandardName[32];SYSTEMTIME StandardDate;LONG StandardBias;WCHAR DaylightName[32];SYSTEMTIME DaylightDate;LONG DaylightBias;};
struct _tagSYNCMGRHANDLERINFO {DWORD cbSize;HICON hIcon;DWORD SyncMgrHandlerFlags;WCHAR wszHandlerName[32];};
struct tagDVD_VideoAttributes {BOOL fPanscanPermitted;BOOL fLetterboxPermitted;ULONG ulAspectX;ULONG ulAspectY;ULONG ulFrameRate;ULONG ulFrameHeight;DVD_VIDEO_COMPRESSION Compression;BOOL fLine21Field1InGOP;BOOL fLine21Field2InGOP;ULONG ulSourceResolutionX;ULONG ulSourceResolutionY;BOOL fIsSourceLetterboxed;BOOL fIsFilmMode;};
struct tagPACKAGESECURITYINFO {DWORD cbStruct;LPCBYTE pCapabilities;DWORD cbCapabilities;LPCBYTE pSigner;DWORD cbSigner;BOOL fAllPermissions;};
struct tagPROPERTYRESTRICTION {ULONG rel;FULLPROPSPEC prop;PROPVARIANT prval;};
struct IEnumOleUndoUnitsVtbl {HRESULT ( *QueryInterface)(IEnumOleUndoUnits *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleUndoUnits *This);ULONG ( *Release)(IEnumOleUndoUnits *This);HRESULT ( *Next)(IEnumOleUndoUnits *This, ULONG cElt, IOleUndoUnit **rgElt, ULONG *pcEltFetched);HRESULT ( *Skip)(IEnumOleUndoUnits *This, ULONG cElt);HRESULT ( *Reset)(IEnumOleUndoUnits *This);HRESULT ( *Clone)(IEnumOleUndoUnits *This, IEnumOleUndoUnits **ppEnum);};
struct IEnumUserIdentityVtbl {HRESULT ( *QueryInterface)(IEnumUserIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumUserIdentity *This);ULONG ( *Release)(IEnumUserIdentity *This);HRESULT ( *Next)(IEnumUserIdentity *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumUserIdentity *This, ULONG celt);HRESULT ( *Reset)(IEnumUserIdentity *This);HRESULT ( *Clone)(IEnumUserIdentity *This, IEnumUserIdentity **ppenum);HRESULT ( *GetCount)(IEnumUserIdentity *This, ULONG *pnCount);};
struct IHighlightSegmentVtbl {HRESULT ( *QueryInterface)(IHighlightSegment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHighlightSegment *This);ULONG ( *Release)(IHighlightSegment *This);HRESULT ( *GetPointers)(IHighlightSegment *This, IMarkupPointer *pIStart, IMarkupPointer *pIEnd);};
struct IHostBehaviorInitVtbl {HRESULT ( *QueryInterface)(IHostBehaviorInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHostBehaviorInit *This);ULONG ( *Release)(IHostBehaviorInit *This);HRESULT ( *PopulateNamespaceTable)(IHostBehaviorInit *This);};
struct IMimeMessagePartsVtbl {HRESULT ( *QueryInterface)(IMimeMessageParts *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeMessageParts *This);ULONG ( *Release)(IMimeMessageParts *This);HRESULT ( *CombineParts)(IMimeMessageParts *This, IMimeMessage **ppMessage);HRESULT ( *AddPart)(IMimeMessageParts *This, IMimeMessage *pMessage);HRESULT ( *SetMaxParts)(IMimeMessageParts *This, ULONG cParts);HRESULT ( *CountParts)(IMimeMessageParts *This, ULONG *pcParts);HRESULT ( *EnumParts)(IMimeMessageParts *This, IMimeEnumMessageParts **ppEnum);};
struct IProvideClassInfoVtbl {HRESULT ( *QueryInterface)(IProvideClassInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo *This);ULONG ( *Release)(IProvideClassInfo *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo *This, ITypeInfo **ppTI);};
struct IRowsetNextRowsetVtbl {HRESULT ( *QueryInterface)(IRowsetNextRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNextRowset *This);ULONG ( *Release)(IRowsetNextRowset *This);HRESULT ( *GetNextRowset)(IRowsetNextRowset *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppNextRowset);};
struct ISequentialStreamVtbl {HRESULT ( *QueryInterface)(ISequentialStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISequentialStream *This);ULONG ( *Release)(ISequentialStream *This);HRESULT ( *Read)(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(ISequentialStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);};
struct ISupportErrorInfoVtbl {HRESULT ( *QueryInterface)(ISupportErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISupportErrorInfo *This);ULONG ( *Release)(ISupportErrorInfo *This);HRESULT ( *InterfaceSupportsErrorInfo)(ISupportErrorInfo *This,  IID * riid);};
struct IThumbnailCaptureVtbl {HRESULT ( *CaptureThumbnail)(IThumbnailCapture *This,  SIZE *pMaxSize, IUnknown *pHTMLDoc2, HBITMAP *phbmThumbnail);};
typedef HRESULT ( *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);
typedef HRESULT ( *LPDDENUMVIDEOCALLBACK)(LPDDVIDEOPORTCAPS, LPVOID);
typedef BOOL (*LPGET_TRANSFER_STATUS)(USB_TRANSFER, LPDWORD, LPDWORD);
typedef INT ( *LPWSCENABLENSPROVIDER)(LPGUID lpProviderId, BOOL fEnable);
typedef BOOL ( *PFN_GetLMEMDbgOptions)(HANDLE hProc, LPDWORD pdwFlags, LPDWORD pdwBreakOnCount, LPDWORD pdwBreakOnSize);
typedef void ( *PFN_HSE_IO_COMPLETION)(EXTENSION_CONTROL_BLOCK *pECB, PVOID pContext, DWORD cbIO, DWORD dwError);
typedef BOOL ( *PFN_SetLMEMDbgOptions)(HANDLE hProc, DWORD dwOp, DWORD dwFlags, DWORD dwBreakOnCount, DWORD dwBreakOnSize);
typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef HRESULT ( *REMOVECONTROLBYHANDLE)(HANDLE hControlHandle, BOOL bForceRemove);
struct _CERT_GENERAL_SUBTREE {CERT_ALT_NAME_ENTRY Base;DWORD dwMinimum;BOOL fMaximum;DWORD dwMaximum;};
struct _CERT_STORE_PROV_INFO {DWORD cbSize;DWORD cStoreProvFunc;void **rgpvStoreProvFunc;HCERTSTOREPROV hStoreProv;DWORD dwStoreProvFlags;HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;};
struct _CERT_TRUST_LIST_INFO {DWORD cbSize;PCTL_ENTRY pCtlEntry;PCCTL_CONTEXT pCtlContext;};
struct _CMC_TAGGED_OTHER_MSG {DWORD dwBodyPartID;LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _DOT11_RECEIVE_UPCALL {GUID gAdapterId;ULONG uUpcallType;ULONG uCurOpMode;ULONG uActualBufferLength;UCHAR ucBuffer[1506];};
struct _FULL_PTR_XLAT_TABLES {struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 RefIdToPointer;struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D PointerToRefId;unsigned int NextRefId;XLAT_SIDE XlatSide;};
struct _HTML_PAINT_DRAW_INFO {RECT rcViewport;HRGN hrgnUpdate;HTML_PAINT_XFORM xform;};
struct _NETWORK_ADDRESS_LIST {LONG AddressCount;USHORT AddressType;NETWORK_ADDRESS Address[1];};
struct _RPC_CLIENT_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;unsigned int Reserved; void *InterpreterInfo;unsigned int Flags;};
struct _RPC_SERVER_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;void *DefaultManagerEpv; void *InterpreterInfo;unsigned int Flags;};
struct tagDBCONTENTPROXIMITY {DWORD dwProximityUnit;ULONG ulProximityDistance;LONG lWeight;};
struct IAMDroppedFramesVtbl {HRESULT ( *QueryInterface)(IAMDroppedFrames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDroppedFrames *This);ULONG ( *Release)(IAMDroppedFrames *This);HRESULT ( *GetNumDropped)(IAMDroppedFrames *This, int *plDropped);HRESULT ( *GetNumNotDropped)(IAMDroppedFrames *This, int *plNotDropped);HRESULT ( *GetDroppedInfo)(IAMDroppedFrames *This, int lSize, int *plArray, int *plNumCopied);HRESULT ( *GetAverageFrameSize)(IAMDroppedFrames *This, int *plAverageSize);};
struct ICommandValidateVtbl {HRESULT ( *QueryInterface)(ICommandValidate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandValidate *This);ULONG ( *Release)(ICommandValidate *This);HRESULT ( *ValidateCompletely)(ICommandValidate *This);HRESULT ( *ValidateSyntax)(ICommandValidate *This);};
struct IDBCreateCommandVtbl {HRESULT ( *QueryInterface)(IDBCreateCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBCreateCommand *This);ULONG ( *Release)(IDBCreateCommand *This);HRESULT ( *CreateCommand)(IDBCreateCommand *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppCommand);};
struct IDBCreateSessionVtbl {HRESULT ( *QueryInterface)(IDBCreateSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBCreateSession *This);ULONG ( *Release)(IDBCreateSession *This);HRESULT ( *CreateSession)(IDBCreateSession *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppDBSession);};
struct IEnumJavaPackageVtbl {HRESULT ( *QueryInterface)(IEnumJavaPackage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumJavaPackage *This);ULONG ( *Release)(IEnumJavaPackage *This);HRESULT ( *Next)(IEnumJavaPackage *This, ULONG celt, IJavaPackage **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumJavaPackage *This, ULONG celt);HRESULT ( *Reset)(IEnumJavaPackage *This);HRESULT ( *Clone)(IEnumJavaPackage *This, IEnumJavaPackage **ppenum);};
struct IEnumSoapMappersVtbl {HRESULT ( *QueryInterface)(IEnumSoapMappers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSoapMappers *This);ULONG ( *Release)(IEnumSoapMappers *This);HRESULT ( *Next)(IEnumSoapMappers *This, int celt, ISoapMapper **ppSoapMapper, int *pulFetched);HRESULT ( *Skip)(IEnumSoapMappers *This, int celt);HRESULT ( *Reset)(IEnumSoapMappers *This);HRESULT ( *Clone)(IEnumSoapMappers *This, IEnumSoapMappers **ppenum);};
struct IFontCacheNotifyVtbl {HRESULT ( *QueryInterface)(IFontCacheNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontCacheNotify *This);ULONG ( *Release)(IFontCacheNotify *This);HRESULT ( *OnPreFontChange)(IFontCacheNotify *This);HRESULT ( *OnPostFontChange)(IFontCacheNotify *This);};
struct IImnEnumAccountsVtbl {HRESULT ( *QueryInterface)(IImnEnumAccounts *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnEnumAccounts *This);ULONG ( *Release)(IImnEnumAccounts *This);HRESULT ( *GetCount)(IImnEnumAccounts *This, ULONG *pcItems);HRESULT ( *SortByAccountName)(IImnEnumAccounts *This);HRESULT ( *GetNext)(IImnEnumAccounts *This, IImnAccount **ppAccount);HRESULT ( *Reset)(IImnEnumAccounts *This);};
struct IMPORT_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;DWORD SizeOfData;IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 __anonymous0;unsigned short Type : 2;unsigned short NameType : 3;unsigned short Reserved : 11;};
struct IMarkupContainerVtbl {HRESULT ( *QueryInterface)(IMarkupContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupContainer *This);ULONG ( *Release)(IMarkupContainer *This);HRESULT ( *OwningDoc)(IMarkupContainer *This, IHTMLDocument2 **ppDoc);};
struct IOleDocumentSiteVtbl {HRESULT ( *QueryInterface)(IOleDocumentSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentSite *This);ULONG ( *Release)(IOleDocumentSite *This);HRESULT ( *ActivateMe)(IOleDocumentSite *This, IOleDocumentView *pViewToActivate);};
struct IPSFactoryBufferVtbl {HRESULT ( *QueryInterface)(IPSFactoryBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPSFactoryBuffer *This);ULONG ( *Release)(IPSFactoryBuffer *This);HRESULT ( *CreateProxy)(IPSFactoryBuffer *This, IUnknown *pUnkOuter,  IID * riid, IRpcProxyBuffer **ppProxy, void **ppv);HRESULT ( *CreateStub)(IPSFactoryBuffer *This,  IID * riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);};
struct IRTCEnumProfilesVtbl {HRESULT ( *QueryInterface)(IRTCEnumProfiles *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumProfiles *This);ULONG ( *Release)(IRTCEnumProfiles *This);HRESULT ( *Next)(IRTCEnumProfiles *This, ULONG celt, IRTCProfile **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumProfiles *This);HRESULT ( *Skip)(IRTCEnumProfiles *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumProfiles *This, IRTCEnumProfiles **ppEnum);};
struct IRTCEnumWatchersVtbl {HRESULT ( *QueryInterface)(IRTCEnumWatchers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumWatchers *This);ULONG ( *Release)(IRTCEnumWatchers *This);HRESULT ( *Next)(IRTCEnumWatchers *This, ULONG celt, IRTCWatcher **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumWatchers *This);HRESULT ( *Skip)(IRTCEnumWatchers *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumWatchers *This, IRTCEnumWatchers **ppEnum);};
struct ITargetEmbeddingVtbl {HRESULT ( *QueryInterface)(ITargetEmbedding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetEmbedding *This);ULONG ( *Release)(ITargetEmbedding *This);HRESULT ( *GetTargetFrame)(ITargetEmbedding *This, ITargetFrame **ppTargetFrame);};
struct IUPnPEventSourceVtbl {HRESULT ( *QueryInterface)(IUPnPEventSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPEventSource *This);ULONG ( *Release)(IUPnPEventSource *This);HRESULT ( *Advise)(IUPnPEventSource *This, IUPnPEventSink *pesSubscriber);HRESULT ( *Unadvise)(IUPnPEventSource *This, IUPnPEventSink *pesSubscriber);};
typedef BOOL ( *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef int ( *LPWPUGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef SOCKET ( *LPWPUMODIFYIFSHANDLE)(DWORD dwCatalogEntryId, SOCKET ProposedHandle, LPINT lpErrno);
typedef int ( *LPWSCGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef int ( *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef DWORD ( *PFN_SetAllAllocFlags)(HANDLE hProc, HANDLE hHeap, DWORD dwOp, WORD wFlag);
typedef RPC_STATUS RPC_FORWARD_FUNCTION(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned char *Rpcpro, void **ppDestEndpoint);
struct SChannelHookCallInfo {IID iid;DWORD cbSize;GUID uCausality;DWORD dwServerPid;DWORD iMethod;void *pObject;};
struct UserNotificationType {DWORD ActionFlags;TCHAR *pwszDialogTitle;TCHAR *pwszDialogText;TCHAR *pwszSound;DWORD nMaxSound;UserNotificationType___03336E7F16FF4F78E2675530DEED7B28 __anonymous0;};
struct _CRL_REVOCATION_INFO {PCRL_ENTRY pCrlEntry;PCCRL_CONTEXT pCrlContext;PCCERT_CHAIN_CONTEXT pCrlIssuerChain;};
struct _DMA_ADAPTER_OBJECT_ {USHORT ObjectSize;INTERFACE_TYPE InterfaceType;ULONG BusNumber;};
struct _DOT11_GROUP_ADDRESS {ULONG uAddressesIndex;DOT11_MAC_ADDRESS dot11MacAddress;DOT11_ROW_STATUS GroupAddressesStatus;};
struct _DOT11_RESET_REQUEST {DOT11_RESET_TYPE dot11ResetType;DOT11_MAC_ADDRESS dot11MacAddress;BOOL bSetDefaultMIB;};
struct _DOT11_START_REQUEST {ULONG uStartFailureTimeout;DOT11_RATE_SET OperationalRateSet;ULONG uChCenterFrequency;DOT11_BSS_DESCRIPTION dot11BSSDescription;};
struct _IP_PER_ADAPTER_INFO {UINT AutoconfigEnabled;UINT AutoconfigActive;PIP_ADDR_STRING CurrentDnsServer;IP_ADDR_STRING DnsServerList;};
struct _KDEVICE_QUEUE_ENTRY {LIST_ENTRY DeviceListEntry;ULONG SortKey;BOOLEAN Inserted;};
struct _NETWORK_ADDRESS_IPX {ULONG NetworkAddress;UCHAR NodeAddress[6];USHORT Socket;};
struct _OBJECT_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG ulObjType;ULONG cbParentID;LPENTRYID lpParentID;ULONG cbOldID;LPENTRYID lpOldID;ULONG cbOldParentID;LPENTRYID lpOldParentID;LPSPropTagArray lpPropTagArray;};
struct _REPARSE_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;_REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45 __anonymous0;};
struct _SCommentRestriction {ULONG cValues;LPSRestriction lpRes;LPSPropValue lpProp;};
struct _SECURITY_ATTRIBUTES {DWORD nLength;LPVOID lpSecurityDescriptor;BOOL bInheritHandle;};
struct __CEL_PROCESS_CREATE {HANDLE hProcess;DWORD dwVMBase;WCHAR szName[];};
struct _tagHIT_LOGGING_INFO {DWORD dwStructSize;LPSTR lpszLoggedUrlName;SYSTEMTIME StartTime;SYSTEMTIME EndTime;LPSTR lpszExtendedInfo;};
struct tMIXERCONTROLDETAILS {DWORD cbStruct;DWORD dwControlID;DWORD cChannels;tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F __anonymous0;DWORD cbDetails;LPVOID paDetails;};
struct tagAM_MPEGSTREAMTYPE {DWORD dwStreamId;DWORD dwReserved;AM_MEDIA_TYPE mt;BYTE bFormat[1];};
struct tagCOMPAREITEMSTRUCT {UINT CtlType;UINT CtlID;HWND hwndItem;UINT itemID1;DWORD itemData1;UINT itemID2;DWORD itemData2;DWORD dwLocaleId;};
typedef BOOL ( *AMGETERRORTEXTPROCA)(HRESULT, char *, DWORD);
typedef BOOL ( *CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL ( *DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
struct IAMVideoProcAmpVtbl {HRESULT ( *QueryInterface)(IAMVideoProcAmp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVideoProcAmp *This);ULONG ( *Release)(IAMVideoProcAmp *This);HRESULT ( *GetRange)(IAMVideoProcAmp *This, int Property, int *pMin, int *pMax, int *pSteppingDelta, int *pDefault, int *pCapsFlags);HRESULT ( *Set)(IAMVideoProcAmp *This, int Property, int lValue, int Flags);HRESULT ( *Get)(IAMVideoProcAmp *This, int Property, int *lValue, int *Flags);};
struct ICommandPrepareVtbl {HRESULT ( *QueryInterface)(ICommandPrepare *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandPrepare *This);ULONG ( *Release)(ICommandPrepare *This);HRESULT ( *Prepare)(ICommandPrepare *This, ULONG cExpectedRuns);HRESULT ( *Unprepare)(ICommandPrepare *This);};
struct IHTMLChangeSinkVtbl {HRESULT ( *QueryInterface)(IHTMLChangeSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLChangeSink *This);ULONG ( *Release)(IHTMLChangeSink *This);HRESULT ( *Notify)(IHTMLChangeSink *This);};
struct IObjectIdentityVtbl {HRESULT ( *QueryInterface)(IObjectIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectIdentity *This);ULONG ( *Release)(IObjectIdentity *This);HRESULT ( *IsEqualObject)(IObjectIdentity *This, IUnknown *punk);};
struct IObjectWithSiteVtbl {HRESULT ( *QueryInterface)(IObjectWithSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectWithSite *This);ULONG ( *Release)(IObjectWithSite *This);HRESULT ( *SetSite)(IObjectWithSite *This, IUnknown *pUnkSite);HRESULT ( *GetSite)(IObjectWithSite *This,  IID * riid, void **ppvSite);};
struct IProvideMonikerVtbl {HRESULT ( *QueryInterface)(IProvideMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideMoniker *This);ULONG ( *Release)(IProvideMoniker *This);HRESULT ( *GetMoniker)(IProvideMoniker *This, IMoniker **ppIMoniker);};
struct IRTCEnumBuddiesVtbl {HRESULT ( *QueryInterface)(IRTCEnumBuddies *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumBuddies *This);ULONG ( *Release)(IRTCEnumBuddies *This);HRESULT ( *Next)(IRTCEnumBuddies *This, ULONG celt, IRTCBuddy **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumBuddies *This);HRESULT ( *Skip)(IRTCEnumBuddies *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumBuddies *This, IRTCEnumBuddies **ppEnum);};
struct IRowsetWatchAllVtbl {HRESULT ( *QueryInterface)(IRowsetWatchAll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchAll *This);ULONG ( *Release)(IRowsetWatchAll *This);HRESULT ( *Acknowledge)(IRowsetWatchAll *This);HRESULT ( *Start)(IRowsetWatchAll *This);HRESULT ( *StopWatching)(IRowsetWatchAll *This);};
struct IRpcProxyBufferVtbl {HRESULT ( *QueryInterface)(IRpcProxyBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcProxyBuffer *This);ULONG ( *Release)(IRpcProxyBuffer *This);HRESULT ( *Connect)(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer);void ( *Disconnect)(IRpcProxyBuffer *This);};
struct ISequenceNumberVtbl {HRESULT ( *QueryInterface)(ISequenceNumber *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISequenceNumber *This);ULONG ( *Release)(ISequenceNumber *This);HRESULT ( *GetSequenceNumber)(ISequenceNumber *This, int nCurrent, int *pnNew);};
typedef int ( *LPWSPRECVDISCONNECT)(SOCKET s, LPWSABUF lpInboundDisconnectData, LPINT lpErrno);
typedef int ( *LPWSPSENDDISCONNECT)(SOCKET s, LPWSABUF lpOutboundDisconnectData, LPINT lpErrno);
typedef PLMEM_RECENT ( *PFN_GetRecentAllocs)(HANDLE hProc, LPDWORD pdwNumAllocs);
typedef void (*PFREE_MAP_REGISTERS)(PDMA_ADAPTER DmaAdapter, PVOID MapRegisterBase, ULONG NumberOfMapRegisters);
typedef int ( *SSLVALIDATECERTFUNC)(DWORD dwType, LPVOID pvArg, DWORD dwChainLen, LPBLOB pCertChain, DWORD dwFlags);
typedef SECURITY_STATUS ( *VERIFY_SIGNATURE_FN)(PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int *);
struct _ACCESS_ALLOWED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _DDVIDEOPORTCONNECT {DWORD dwSize;DWORD dwPortWidth;GUID guidTypeID;DWORD dwFlags;ULONG_PTR dwReserved1;};
struct _DOT11_JOIN_REQUEST {ULONG uJoinFailureTimeout;DOT11_RATE_SET OperationalRateSet;ULONG uChCenterFrequency;DOT11_BSS_DESCRIPTION dot11BSSDescription;};
struct _HTMLPtrDispInfoRec {DWORD dwSize;LONG lBaseline;LONG lXPosition;LONG lLineHeight;LONG lTextHeight;LONG lDescent;LONG lTextDescent;BOOL fRTLLine;BOOL fRTLFlow;BOOL fAligned;BOOL fHasNestedRunOwner;};
struct _IMAGE_NT_HEADERS64 {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER64 OptionalHeader;};
struct _NETWORK_ADDRESS_IP {USHORT sin_port;ULONG in_addr;UCHAR sin_zero[8];};
struct _RAS_AUTH_ATTRIBUTE {RAS_AUTH_ATTRIBUTE_TYPE raaType;DWORD dwLength;PVOID Value;};
struct __CEL_THREAD_CREATE {HANDLE hThread;HANDLE hProcess;HANDLE hModule;DWORD dwStartAddr;int nPriority;WCHAR szName[];};
struct _avitcdlindex_entry {DWORD dwTick;TIMECODE time;DWORD dwSMPTEflags;DWORD dwUser;TCHAR szReelId[12];};
struct adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;WORD wNumCoef;ADPCMCOEFSET aCoef[];};
struct mpeg1waveformat_tag {WAVEFORMATEX wfx;WORD fwHeadLayer;DWORD dwHeadBitrate;WORD fwHeadMode;WORD fwHeadModeExt;WORD wHeadEmphasis;WORD fwHeadFlags;DWORD dwPTSLow;DWORD dwPTSHigh;};
struct tACMDRVSTREAMHEADER {DWORD cbStruct;DWORD fdwStatus;DWORD dwUser;LPBYTE pbSrc;DWORD cbSrcLength;DWORD cbSrcLengthUsed;DWORD dwSrcUser;LPBYTE pbDst;DWORD cbDstLength;DWORD cbDstLengthUsed;DWORD dwDstUser;DWORD fdwConvert;LPACMDRVSTREAMHEADER padshNext;DWORD fdwDriver;DWORD dwDriver;DWORD fdwPrepared;DWORD dwPrepared;LPBYTE pbPreparedSrc;DWORD cbPreparedSrcLength;LPBYTE pbPreparedDst;DWORD cbPreparedDstLength;};
struct tagBITMAPINFOHEADER {DWORD biSize;LONG biWidth;LONG biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;LONG biXPelsPerMeter;LONG biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagNMDATETIMECHANGE {NMHDR nmhdr;DWORD dwFlags;SYSTEMTIME st;};
typedef SECURITY_STATUS ( *DECRYPT_MESSAGE_FN)(PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int *);
typedef SECURITY_STATUS ( *ENCRYPT_MESSAGE_FN)(PCtxtHandle, unsigned int, PSecBufferDesc, unsigned int);
struct IAnimationRootVtbl {HRESULT ( *QueryInterface)(IAnimationRoot *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationRoot *This);ULONG ( *Release)(IAnimationRoot *This);HRESULT ( *RegisterComposerSite)(IAnimationRoot *This, IUnknown *composerSite);HRESULT ( *UnregisterComposerSite)(IAnimationRoot *This, IUnknown *composerSite);};
struct ICSSFilterSiteVtbl {HRESULT ( *QueryInterface)(ICSSFilterSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICSSFilterSite *This);ULONG ( *Release)(ICSSFilterSite *This);HRESULT ( *GetElement)(ICSSFilterSite *This, IHTMLElement **Element);HRESULT ( *FireOnFilterChangeEvent)(ICSSFilterSite *This);};
struct IDXSurfacePickVtbl {HRESULT ( *QueryInterface)(IDXSurfacePick *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXSurfacePick *This);ULONG ( *Release)(IDXSurfacePick *This);HRESULT ( *PointPick)(IDXSurfacePick *This,  DXVEC *pPoint, ULONG *pulInputSurfaceIndex, DXVEC *pInputPoint);};
struct IDXTClipOriginVtbl {HRESULT ( *QueryInterface)(IDXTClipOrigin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTClipOrigin *This);ULONG ( *Release)(IDXTClipOrigin *This);HRESULT ( *GetClipOrigin)(IDXTClipOrigin *This, DXVEC *pvecClipOrigin);};
struct IGetDataSourceVtbl {HRESULT ( *QueryInterface)(IGetDataSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetDataSource *This);ULONG ( *Release)(IGetDataSource *This);HRESULT ( *GetDataSource)(IGetDataSource *This,  IID * riid, IUnknown **ppDataSource);};
struct IInternetCacheVtbl {HRESULT ( *QueryInterface)(IInternetCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetCache *This);ULONG ( *Release)(IInternetCache *This);};
struct INotifyReplicaVtbl {HRESULT ( *QueryInterface)(INotifyReplica *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotifyReplica *This);ULONG ( *Release)(INotifyReplica *This);HRESULT ( *YouAreAReplica)(INotifyReplica *This, ULONG cOtherReplicas, IMoniker **rgpOtherReplicas);};
struct IRTCEnumGroupsVtbl {HRESULT ( *QueryInterface)(IRTCEnumGroups *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEnumGroups *This);ULONG ( *Release)(IRTCEnumGroups *This);HRESULT ( *Next)(IRTCEnumGroups *This, ULONG celt, IRTCBuddyGroup **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IRTCEnumGroups *This);HRESULT ( *Skip)(IRTCEnumGroups *This, ULONG celt);HRESULT ( *Clone)(IRTCEnumGroups *This, IRTCEnumGroups **ppEnum);};
struct IStreamBuilderVtbl {HRESULT ( *QueryInterface)(IStreamBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStreamBuilder *This);ULONG ( *Release)(IStreamBuilder *This);HRESULT ( *Render)(IStreamBuilder *This, IPin *ppinOut, IGraphBuilder *pGraph);HRESULT ( *Backout)(IStreamBuilder *This, IPin *ppinOut, IGraphBuilder *pGraph);};
typedef HRESULT ( *LPCQADDFORMSPROC_A)(LPARAM lParam, LPCQFORM_A pForm);
typedef HRESULT ( *LPCQADDFORMSPROC_W)(LPARAM lParam, LPCQFORM_W pForm);
typedef BOOL (*LPGET_FRAME_LENGTH)(USB_HANDLE, LPUSHORT);
typedef BOOL (*LPGET_FRAME_NUMBER)(USB_HANDLE, LPDWORD);
typedef int ( *LPWSCENUMPROTOCOLS)(LPINT lpiProtocols, LPWSAPROTOCOL_INFOW lpProtocolBuffer, LPDWORD lpdwBufferLength, LPINT lpErrno);
typedef SCODE  MAPIALLOCATEBUFFER(ULONG cbSize, LPVOID *lppBuffer);
struct NLED_SETTINGS_INFO {UINT LedNum;INT OffOnBlink;LONG TotalCycleTime;LONG OnTime;LONG OffTime;INT MetaCycleOn;INT MetaCycleOff;};
struct NLED_SUPPORTS_INFO {UINT LedNum;LONG lCycleAdjust;BOOL fAdjustTotalCycleTime;BOOL fAdjustOnTime;BOOL fAdjustOffTime;BOOL fMetaCycleOn;BOOL fMetaCycleOff;};
typedef HRESULT ( *PFNDOBEFOREREMOVAL)(HANDLE, UINT);
struct _ACCESS_DENIED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _AM_PROPERTY_SPHLI {USHORT HLISS;USHORT Reserved;ULONG StartPTM;ULONG EndPTM;USHORT StartX;USHORT StartY;USHORT StopX;USHORT StopY;AM_COLCON ColCon;};
struct _CERT_TEMPLATE_EXT {LPSTR pszObjId;DWORD dwMajorVersion;BOOL fMinorVersion;DWORD dwMinorVersion;};
struct _CONNECTDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEA lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CONNECTDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEW lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CRYPT_CREDENTIALS {DWORD cbSize;LPCSTR pszCredentialsOid;LPVOID pvCredentials;};
struct _CRYPT_DECODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _CRYPT_ENCODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _D3DRECTPATCH_INFO {UINT StartVertexOffsetWidth;UINT StartVertexOffsetHeight;UINT Width;UINT Height;UINT Stride;D3DBASISTYPE Basis;D3DORDERTYPE Order;};
struct _EXPLICIT_ACCESS_A {DWORD grfAccessPermissions;ACCESS_MODE grfAccessMode;DWORD grfInheritance;TRUSTEE_A Trustee;};
struct _EXPLICIT_ACCESS_W {DWORD grfAccessPermissions;ACCESS_MODE grfAccessMode;DWORD grfInheritance;TRUSTEE_W Trustee;};
struct _HTML_PAINTER_INFO {LONG lFlags;LONG lZOrder;IID iidDrawObject;RECT rcExpand;};
struct _INTERNET_BUFFERSA {DWORD dwStructSize;struct _INTERNET_BUFFERSA *Next;LPCSTR lpcszHeader;DWORD dwHeadersLength;DWORD dwHeadersTotal;LPVOID lpvBuffer;DWORD dwBufferLength;DWORD dwBufferTotal;DWORD dwOffsetLow;DWORD dwOffsetHigh;};
struct _IP_ADAPTER_PREFIX {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_PREFIX *Next;SOCKET_ADDRESS Address;ULONG PrefixLength;};
struct _NDISUIO_QUERY_OID {NDIS_OID Oid;PTCHAR ptcDeviceName;UCHAR Data[4];};
struct _PCI_COMMON_CONFIG {USHORT VendorID;USHORT DeviceID;USHORT Command;USHORT Status;UCHAR RevisionID;UCHAR ProgIf;UCHAR SubClass;UCHAR BaseClass;UCHAR CacheLineSize;UCHAR LatencyTimer;UCHAR HeaderType;UCHAR BIST;union _PCI_COMMON_CONFIG___AB1EE3683848C21DDCEC05DD91DFABEB u;UCHAR DeviceSpecific[108];};
struct _TAPE_SET_POSITION {DWORD Method;DWORD Partition;LARGE_INTEGER Offset;BOOLEAN Immediate;};
struct _WINDOWS_IAS_QUERY {u_char irdaDeviceID[4];char irdaClassName[64];char irdaAttribName[256];u_long irdaAttribType;union _WINDOWS_IAS_QUERY___1EC74AE3873FD8991C3FD7D55FD1D1AD irdaAttribute;};
struct tMIXERLINECONTROLS {DWORD cbStruct;DWORD dwLineID;tMIXERLINECONTROLS___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROL pamxctrl;};
struct tagAnalogVideoInfo {RECT rcSource;RECT rcTarget;DWORD dwActiveWidth;DWORD dwActiveHeight;REFERENCE_TIME AvgTimePerFrame;};
struct tagCOMPOSITIONFORM {DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagTIMECODE_SAMPLE {LONGLONG qwTick;TIMECODE timecode;DWORD dwUser;DWORD dwFlags;};
typedef HRESULT ( *ADDDELBACKUPENTRY)(LPCSTR lpcszFileList, LPCSTR lpcszBackupDir, LPCSTR lpcszBaseName, DWORD dwFlags);
struct DXRASTERPOINTINFO {DXOVERSAMPLEDESC Pixel;ULONG ulIndex;BYTE Weight;};
struct IDBInitializeVtbl {HRESULT ( *QueryInterface)(IDBInitialize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBInitialize *This);ULONG ( *Release)(IDBInitialize *This);HRESULT ( *Initialize)(IDBInitialize *This);HRESULT ( *Uninitialize)(IDBInitialize *This);};
struct IDXRawSurfaceVtbl {HRESULT ( *QueryInterface)(IDXRawSurface *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXRawSurface *This);ULONG ( *Release)(IDXRawSurface *This);HRESULT ( *GetSurfaceInfo)(IDXRawSurface *This, DXRAWSURFACEINFO *pSurfaceInfo);};
struct IEnumJavaFileVtbl {HRESULT ( *QueryInterface)(IEnumJavaFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumJavaFile *This);ULONG ( *Release)(IEnumJavaFile *This);HRESULT ( *Next)(IEnumJavaFile *This, ULONG celt, IJavaFile **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumJavaFile *This, ULONG celt);HRESULT ( *Reset)(IEnumJavaFile *This);HRESULT ( *Clone)(IEnumJavaFile *This, IEnumJavaFile **ppenum);};
struct IGetSourceRowVtbl {HRESULT ( *QueryInterface)(IGetSourceRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetSourceRow *This);ULONG ( *Release)(IGetSourceRow *This);HRESULT ( *GetSourceRow)(IGetSourceRow *This,  IID * riid, IUnknown **ppRow);};
struct ITargetNotifyVtbl {HRESULT ( *QueryInterface)(ITargetNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetNotify *This);ULONG ( *Release)(ITargetNotify *This);HRESULT ( *OnCreate)(ITargetNotify *This, IUnknown *pUnkDestination, ULONG cbCookie);HRESULT ( *OnReuse)(ITargetNotify *This, IUnknown *pUnkDestination);};
typedef SECURITY_STATUS ( *MAKE_SIGNATURE_FN)(PCtxtHandle, unsigned int, PSecBufferDesc, unsigned int);
typedef STATUS (*RELEASESOCKETMASK)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
union SdpQueryUuidUnion {GUID uuid128;ULONG uuid32;USHORT uuid16;};
typedef SECURITY_STATUS ( *UNSEAL_MESSAGE_FN)(PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int *);
struct _CARD_CONFIG_INFO {CARD_SOCKET_HANDLE hSocket;UINT16 fAttributes;UINT8 fInterfaceType;UINT8 uVcc;UINT8 uVpp1;UINT8 uVpp2;UINT8 fRegisters;UINT8 uConfigReg;UINT8 uStatusReg;UINT8 uPinReg;UINT8 uCopyReg;UINT8 uExtendedStatus;UINT16 fExtRegisters;UINT8 IOBase[4];UINT8 IOLimit;};
struct _CERT_POLICY_INFO {LPSTR pszPolicyIdentifier;DWORD cPolicyQualifier;CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;};
struct _D3DTRIPATCH_INFO {UINT StartVertexOffset;UINT NumVertices;D3DBASISTYPE Basis;D3DORDERTYPE Order;};
struct _DEVOBJ_EXTENSION {PDEVICE_OBJECT DeviceObject;ULONG IdleCount;ULONG CurrentDevicePowerState;BOOLEAN StartIoQueueHolding;BOOLEAN UseAsyncPowerUp;BOOLEAN PowerControlNeeded;BOOLEAN PowerControlPagable;ULONG ExtensionFlags;PDEVICE_OBJECT AttachedTo;};
struct _DRIVER_EXTENSION {struct _DRIVER_OBJECT *DriverObject;PDRIVER_ADD_DEVICE AddDevice;ULONG Count;UNICODE_STRING ServiceKeyName;};
struct _EVENTSFORLOGFILE {DWORD ulSize;WCHAR szLogicalLogFile[256];DWORD ulNumRecords;EVENTLOGRECORD pEventLogRecords[];};
struct _EXCEPTION_RECORD {DWORD ExceptionCode;DWORD ExceptionFlags;struct _EXCEPTION_RECORD *ExceptionRecord;PVOID ExceptionAddress;DWORD NumberParameters;ULONG_PTR ExceptionInformation[15];};
struct _IMAGE_DEBUG_MISC {DWORD DataType;DWORD Length;BOOLEAN Unicode;BYTE Reserved[3];BYTE Data[1];};
struct _IMAGE_NT_HEADERS {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER32 OptionalHeader;};
struct _IMAGE_RELOCATION {_IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED __anonymous0;DWORD SymbolTableIndex;WORD Type;};
struct _IMAGE_VXD_HEADER {WORD e32_magic;BYTE e32_border;BYTE e32_worder;DWORD e32_level;WORD e32_cpu;WORD e32_os;DWORD e32_ver;DWORD e32_mflags;DWORD e32_mpages;DWORD e32_startobj;DWORD e32_eip;DWORD e32_stackobj;DWORD e32_esp;DWORD e32_pagesize;DWORD e32_lastpagesize;DWORD e32_fixupsize;DWORD e32_fixupsum;DWORD e32_ldrsize;DWORD e32_ldrsum;DWORD e32_objtab;DWORD e32_objcnt;DWORD e32_objmap;DWORD e32_itermap;DWORD e32_rsrctab;DWORD e32_rsrccnt;DWORD e32_restab;DWORD e32_enttab;DWORD e32_dirtab;DWORD e32_dircnt;DWORD e32_fpagetab;DWORD e32_frectab;DWORD e32_impmod;DWORD e32_impmodcnt;DWORD e32_impproc;DWORD e32_pagesum;DWORD e32_datapage;DWORD e32_preload;DWORD e32_nrestab;DWORD e32_cbnrestab;DWORD e32_nressum;DWORD e32_autodata;DWORD e32_debuginfo;DWORD e32_debuglen;DWORD e32_instpreload;DWORD e32_instdemand;DWORD e32_heapsize;BYTE e32_res3[12];DWORD e32_winresoff;DWORD e32_winreslen;WORD e32_devid;WORD e32_ddkver;};
struct _NDIS_TAPI_ACCEPT {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulUserUserInfoSize;UCHAR UserUserInfo[1];};
struct _NDIS_TAPI_ANSWER {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulUserUserInfoSize;UCHAR UserUserInfo[1];};
struct _PROV_ENUMALGS_EX {ALG_ID aiAlgid;DWORD dwDefaultLen;DWORD dwMinLen;DWORD dwMaxLen;DWORD dwProtocols;DWORD dwNameLen;WCHAR szName[20];DWORD dwLongNameLen;WCHAR szLongName[40];};
struct _SYSTEM_ALARM_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _SYSTEM_AUDIT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _WIN32_FIND_DATAA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;CHAR cFileName[260];CHAR cAlternateFileName[14];};
struct _WIN32_FIND_DATAW {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwOID;WCHAR cFileName[260];};
struct __CEL_MODULE_LOAD {HANDLE hProcess;HANDLE hModule;DWORD dwBase;WCHAR szName[];};
struct tACMFILTERDETAILS {DWORD cbStruct;DWORD dwFilterIndex;DWORD dwFilterTag;DWORD fdwSupport;LPWAVEFILTER pwfltr;DWORD cbwfltr;WCHAR szFilter[128];};
struct tACMFORMATDETAILS {DWORD cbStruct;DWORD dwFormatIndex;DWORD dwFormatTag;DWORD fdwSupport;LPWAVEFORMATEX pwfx;DWORD cbwfx;WCHAR szFormat[128];};
struct tagAccountContext {ACCTTYPE AcctType;LPSTR pszAccountID;LPSTR pszOldName;DWORD dwServerType;};
struct tagCATEGORIZATION {ULONG ulCatType;tagCATEGORIZATION___9A864AD3BD44E1250FA7471F5202A2AD __anonymous0;COLUMNSET csColumns;};
struct tagDVTARGETDEVICE {DWORD tdSize;WORD tdDriverNameOffset;WORD tdDeviceNameOffset;WORD tdPortNameOffset;WORD tdExtDevmodeOffset;BYTE tdData[1];};
struct tagMPEG1VIDEOINFO {VIDEOINFOHEADER hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;BYTE bSequenceHeader[1];};
struct tagNNTPHEADERRESP {DWORD cHeaders;LPNNTPHEADER rgHeaders;BOOL fSupportsXRef;DWORD dwReserved;};
struct tagPROCESSENTRY32 {DWORD dwSize;DWORD cntUsage;DWORD th32ProcessID;DWORD th32DefaultHeapID;DWORD th32ModuleID;DWORD cntThreads;DWORD th32ParentProcessID;LONG pcPriClassBase;DWORD dwFlags;TCHAR szExeFile[260];DWORD th32MemoryBase;DWORD th32AccessKey;};
struct tagX509CERTRESULT {DWORD cEntries;CERTSTATE *rgcs;PCX509CERT *rgpCert;};
struct DXRASTERRECTINFO {ULONG ulIndex;RECT Rect;BYTE Weight;};
struct IAMovieSetupVtbl {HRESULT ( *QueryInterface)(IAMovieSetup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMovieSetup *This);ULONG ( *Release)(IAMovieSetup *This);HRESULT ( *Register)(IAMovieSetup *This);HRESULT ( *Unregister)(IAMovieSetup *This);};
struct IDXTBindHostVtbl {HRESULT ( *QueryInterface)(IDXTBindHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTBindHost *This);ULONG ( *Release)(IDXTBindHost *This);HRESULT ( *SetBindHost)(IDXTBindHost *This, IBindHost *pBindHost);};
struct IEnumFiltersVtbl {HRESULT ( *QueryInterface)(IEnumFilters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumFilters *This);ULONG ( *Release)(IEnumFilters *This);HRESULT ( *Next)(IEnumFilters *This, ULONG cFilters, IBaseFilter **ppFilter, ULONG *pcFetched);HRESULT ( *Skip)(IEnumFilters *This, ULONG cFilters);HRESULT ( *Reset)(IEnumFilters *This);HRESULT ( *Clone)(IEnumFilters *This, IEnumFilters **ppEnum);};
struct IEnumMonikerVtbl {HRESULT ( *QueryInterface)(IEnumMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMoniker *This);ULONG ( *Release)(IEnumMoniker *This);HRESULT ( *Next)(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumMoniker *This, ULONG celt);HRESULT ( *Reset)(IEnumMoniker *This);HRESULT ( *Clone)(IEnumMoniker *This, IEnumMoniker **ppenum);};
struct IEnumUnknownVtbl {HRESULT ( *QueryInterface)(IEnumUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumUnknown *This);ULONG ( *Release)(IEnumUnknown *This);HRESULT ( *Next)(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumUnknown *This, ULONG celt);HRESULT ( *Reset)(IEnumUnknown *This);HRESULT ( *Clone)(IEnumUnknown *This, IEnumUnknown **ppenum);};
struct IIMEServicesVtbl {HRESULT ( *QueryInterface)(IIMEServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMEServices *This);ULONG ( *Release)(IIMEServices *This);HRESULT ( *GetActiveIMM)(IIMEServices *This, IActiveIMMApp **ppActiveIMM);};
struct IMsgrUsersOEVtbl {HRESULT ( *QueryInterface)(IMsgrUsersOE *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrUsersOE *This);ULONG ( *Release)(IMsgrUsersOE *This);HRESULT ( *get_Count)(IMsgrUsersOE *This, int *pcUsers);HRESULT ( *Item)(IMsgrUsersOE *This, int Index, IMsgrUserOE **ppUserOE);HRESULT ( *Add)(IMsgrUsersOE *This, IMsgrUserOE *pUserOE);HRESULT ( *Remove)(IMsgrUsersOE *This, IMsgrUserOE *pUserOE);HRESULT ( *get__NewEnum)(IMsgrUsersOE *This, IUnknown **ppUnknown);};
struct IPeerFactoryVtbl {HRESULT ( *QueryInterface)(IPeerFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPeerFactory *This);ULONG ( *Release)(IPeerFactory *This);};
struct ISniffStreamVtbl {HRESULT ( *QueryInterface)(ISniffStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISniffStream *This);ULONG ( *Release)(ISniffStream *This);HRESULT ( *Init)(ISniffStream *This, IStream *pStream);HRESULT ( *Peek)(ISniffStream *This, void *pBuffer, ULONG nBytes, ULONG *pnBytesRead);};
struct ITIMEFactoryVtbl {HRESULT ( *QueryInterface)(ITIMEFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEFactory *This);ULONG ( *Release)(ITIMEFactory *This);};
struct ITypeFactoryVtbl {HRESULT ( *QueryInterface)(ITypeFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeFactory *This);ULONG ( *Release)(ITypeFactory *This);HRESULT ( *CreateFromTypeInfo)(ITypeFactory *This, ITypeInfo *pTypeInfo,  IID * riid, IUnknown **ppv);};
typedef BOOL (*LPABORT_TRANSFER)(USB_TRANSFER, DWORD);
typedef LPCUSB_INTERFACE (*LPFIND_INTERFACE)(LPCUSB_DEVICE, UCHAR, UCHAR);
typedef BOOL (*LPIS_PIPE_HALTED)(USB_PIPE, LPBOOL);
typedef int ( *LPWSPASYNCSELECT)(SOCKET s, HWND hWnd, unsigned int wMsg, int lEvent, LPINT lpErrno);
typedef int ( *LPWSPEVENTSELECT)(SOCKET s, HANDLE hEventObject, int lNetworkEvents, LPINT lpErrno);
typedef SCODE  MAPIALLOCATEMORE(ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
typedef BOOL (*PFN_CPD_ADD_CERT)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSigner, DWORD idxCounterSigner, PCCERT_CONTEXT pCert2Add);
typedef STATUS (*RELEASEEXCLUSIVE)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
typedef STATUS (*REQUESTEXCLUSIVE)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
typedef BOOLEAN VERIFYSERVERCERT(PLDAP Connection, PCCERT_CONTEXT pServerCert);
struct VolLockBroadcast {struct _DEV_BROADCAST_HDR vlb_dbh;DWORD vlb_owner;BYTE vlb_perms;BYTE vlb_lockType;BYTE vlb_drive;BYTE vlb_flags;};
struct _CENOTIFYREQUEST {DWORD dwSize;HWND hwnd;DWORD dwFlags;HANDLE hHeap;DWORD dwParam;};
struct _CREDUI_BALLOONA {DWORD dwVersion;INT iControl;INT iIcon;PSTR pszTitleText;PSTR pszMessageText;};
struct _CRYPT_ATTRIBUTE {LPSTR pszObjId;DWORD cValue;PCRYPT_ATTR_BLOB rgValue;};
struct _DDVIDEOPORTDESC {DWORD dwSize;DWORD dwFieldWidth;DWORD dwVBIWidth;DWORD dwFieldHeight;DWORD dwMicrosecondsPerField;DWORD dwMaxPixelsPerSecond;DWORD dwVideoPortID;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;};
struct _DLLVERSIONINFO2 {DLLVERSIONINFO info1;DWORD dwFlags;ULONGLONG ullVersion;};
struct _DOT11_UPDATE_IE {DOT11_UPDATE_IE_OP dot11UpdateIEOp;ULONG uBufferLength;UCHAR ucBuffer[1];};
struct _INTERNET_COOKIE {DWORD cbSize;LPSTR pszName;LPSTR pszData;LPSTR pszDomain;LPSTR pszPath;FILETIME *pftExpires;DWORD dwFlags;LPSTR pszUrl;LPSTR pszP3PPolicy;};
struct _MIB_IPMCAST_MFE {DWORD dwGroup;DWORD dwSource;DWORD dwSrcMask;DWORD dwUpStrmNgbr;DWORD dwInIfIndex;DWORD dwInIfProtocol;DWORD dwRouteProtocol;DWORD dwRouteNetwork;DWORD dwRouteMask;ULONG ulUpTime;ULONG ulExpiryTime;ULONG ulTimeOut;ULONG ulNumOutIf;DWORD fFlags;DWORD dwReserved;MIB_IPMCAST_OIF rgmioOutInfo[1];};
struct _NDISUIO_SET_OID {NDIS_OID Oid;PTCHAR ptcDeviceName;UCHAR Data[4];};
struct _SORTORDERSPECEX {WORD wVersion;WORD wNumProps;WORD wKeyFlags;WORD wReserved;CEPROPID rgPropID[3];DWORD rgdwFlags[3];};
struct _ServiceEnumInfo {WCHAR szPrefix[6];WCHAR *szDllName;HANDLE hServiceHandle;DWORD dwServiceState;};
struct _TRUSTEE_ACCESSA {LPSTR lpProperty;ACCESS_RIGHTS Access;ULONG fAccessFlags;ULONG fReturnedAccess;};
struct _TT_HITTESTINFOA {HWND hwnd;POINT pt;TTTOOLINFOA ti;};
struct _TT_HITTESTINFOW {HWND hwnd;POINT pt;TTTOOLINFOW ti;};
struct _VIDEOPARAMETERS {GUID Guid;ULONG dwOffset;ULONG dwCommand;ULONG dwFlags;ULONG dwMode;ULONG dwTVStandard;ULONG dwAvailableModes;ULONG dwAvailableTVStandard;ULONG dwFlickerFilter;ULONG dwOverScanX;ULONG dwOverScanY;ULONG dwMaxUnscaledX;ULONG dwMaxUnscaledY;ULONG dwPositionX;ULONG dwPositionY;ULONG dwBrightness;ULONG dwContrast;ULONG dwCPType;ULONG dwCPCommand;ULONG dwCPStandard;ULONG dwCPKey;ULONG bCP_APSTriggerBits;UCHAR bOEMCopyProtection[256];};
struct _WIN_CERTIFICATE {DWORD dwLength;WORD wRevision;WORD wCertificateType;BYTE bCertificate[1];};
struct _WSANSClassInfoA {LPSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct __CEL_SEM_CREATE {HANDLE hSem;DWORD dwInitCount;DWORD dwMaxCount;WCHAR szName[];};
struct _tagPROTOCOLDATA {DWORD grfFlags;DWORD dwState;LPVOID pData;ULONG cbData;};
struct linecallinfo_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;HLINE hLine;DWORD dwLineDeviceID;DWORD dwAddressID;DWORD dwBearerMode;DWORD dwRate;DWORD dwMediaMode;DWORD dwAppSpecific;DWORD dwCallID;DWORD dwRelatedCallID;DWORD dwCallParamFlags;DWORD dwCallStates;DWORD dwMonitorDigitModes;DWORD dwMonitorMediaModes;LINEDIALPARAMS DialParams;DWORD dwOrigin;DWORD dwReason;DWORD dwCompletionID;DWORD dwNumOwners;DWORD dwNumMonitors;DWORD dwCountryCode;DWORD dwTrunk;DWORD dwCallerIDFlags;DWORD dwCallerIDSize;DWORD dwCallerIDOffset;DWORD dwCallerIDNameSize;DWORD dwCallerIDNameOffset;DWORD dwCalledIDFlags;DWORD dwCalledIDSize;DWORD dwCalledIDOffset;DWORD dwCalledIDNameSize;DWORD dwCalledIDNameOffset;DWORD dwConnectedIDFlags;DWORD dwConnectedIDSize;DWORD dwConnectedIDOffset;DWORD dwConnectedIDNameSize;DWORD dwConnectedIDNameOffset;DWORD dwRedirectionIDFlags;DWORD dwRedirectionIDSize;DWORD dwRedirectionIDOffset;DWORD dwRedirectionIDNameSize;DWORD dwRedirectionIDNameOffset;DWORD dwRedirectingIDFlags;DWORD dwRedirectingIDSize;DWORD dwRedirectingIDOffset;DWORD dwRedirectingIDNameSize;DWORD dwRedirectingIDNameOffset;DWORD dwAppNameSize;DWORD dwAppNameOffset;DWORD dwDisplayableAddressSize;DWORD dwDisplayableAddressOffset;DWORD dwCalledPartySize;DWORD dwCalledPartyOffset;DWORD dwCommentSize;DWORD dwCommentOffset;DWORD dwDisplaySize;DWORD dwDisplayOffset;DWORD dwUserUserInfoSize;DWORD dwUserUserInfoOffset;DWORD dwHighLevelCompSize;DWORD dwHighLevelCompOffset;DWORD dwLowLevelCompSize;DWORD dwLowLevelCompOffset;DWORD dwChargingInfoSize;DWORD dwChargingInfoOffset;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwCallTreatment;DWORD dwCallDataSize;DWORD dwCallDataOffset;DWORD dwSendingFlowspecSize;DWORD dwSendingFlowspecOffset;DWORD dwReceivingFlowspecSize;DWORD dwReceivingFlowspecOffset;DWORD dwAddressType;};
struct tagCANDIDATEFORM {DWORD dwIndex;DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagDBFAILUREINFO {HROW hRow;DBORDINAL iColumn;HRESULT failure;};
struct tagDBPROPINFOSET {PDBPROPINFO rgPropertyInfos;ULONG cPropertyInfos;GUID guidPropertySet;};
struct tagTVHITTESTINFO {POINT pt;UINT flags;HTREEITEM hItem;};
typedef BOOL  ACCELERATEABSDI(ULONG ulUIParam, LPVOID lpvmsg);
typedef BOOL ( *ACMDRIVERENUMCB)(HACMDRIVERID hadid, DWORD dwInstance, DWORD fdwSupport);
struct ICifRWGroupVtbl {HRESULT ( *SetDescription)(ICifComponent *This, LPCSTR pszDesc);HRESULT ( *SetPriority)(ICifComponent *This, DWORD);HRESULT ( *SetDetails)(ICifComponent *This, LPCSTR pszDetails);};
struct IDeviceEnumVtbl {HRESULT ( *QueryInterface)(IDeviceEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDeviceEnum *This);ULONG ( *Release)(IDeviceEnum *This);HRESULT ( *Next)(IDeviceEnum *This, ULONG celt, IObexDevice **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IDeviceEnum *This, ULONG celt);HRESULT ( *Reset)(IDeviceEnum *This);HRESULT ( *Clone)(IDeviceEnum *This, IDeviceEnum **ppenum);};
struct IGetSessionVtbl {HRESULT ( *QueryInterface)(IGetSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetSession *This);ULONG ( *Release)(IGetSession *This);HRESULT ( *GetSession)(IGetSession *This,  IID * riid, IUnknown **ppSession);};
struct IViewRowsetVtbl {HRESULT ( *QueryInterface)(IViewRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewRowset *This);ULONG ( *Release)(IViewRowset *This);HRESULT ( *GetSpecification)(IViewRowset *This,  IID * riid, IUnknown **ppObject);HRESULT ( *OpenViewRowset)(IViewRowset *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppRowset);};
typedef BOOL ( *LPWPUCLOSEEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef BOOL ( *LPWPURESETEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef DWORD ( *PFN_AUTH_NOTIFY)(DWORD_PTR, DWORD, LPVOID);
typedef DWORD (*PFN_CONFIGENTRY)(DWORD, struct _PCI_DEV_INFO *, PPCI_RSRC, PPCI_RSRC, PDWORD, PDWORD);
typedef LPVOID ( *PFN_HeapReAlloc)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, DWORD dwBytes);
typedef void (*PIO_APC_ROUTINE)(PVOID ApcContext, PIO_STATUS_BLOCK IoStatusBlock, ULONG Reserved);
typedef SECURITY_STATUS ( *SEAL_MESSAGE_FN)(PCtxtHandle, unsigned int, PSecBufferDesc, unsigned int);
struct _CERT_EXTENSION {LPSTR pszObjId;BOOL fCritical;CRYPT_OBJID_BLOB Value;};
struct _CRL_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;CRYPT_BIT_BLOB ReasonFlags;CERT_ALT_NAME_INFO CRLIssuer;};
struct _DISCDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPSTR lpLocalName;LPSTR lpRemoteName;DWORD dwFlags;};
struct _IP_ADDR_STRING {struct _IP_ADDR_STRING *Next;IP_ADDRESS_STRING IpAddress;IP_MASK_STRING IpMask;DWORD Context;};
struct _NDIS_TAPI_DIAL {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulDestAddressSize;CHAR szDestAddress[1];};
struct _NDIS_TAPI_DROP {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulUserUserInfoSize;UCHAR UserUserInfo[1];};
struct _NDIS_TAPI_OPEN {ULONG ulRequestID;ULONG ulDeviceID;HTAPI_LINE htLine;HDRV_LINE hdLine;};
struct _PARSED_CFTABLE {POWER_DESCR VccDescr;POWER_DESCR Vpp1Descr;POWER_DESCR Vpp2Descr;UINT32 IOLength[4];UINT32 IOBase[4];UINT8 NumIOEntries;UINT8 ConfigIndex;UINT8 ContainsDefaults;UINT8 IFacePresent;UINT8 IFaceType;UINT8 BVDActive;UINT8 WPActive;UINT8 ReadyActive;UINT8 WaitRequired;UINT8 IOAccess;UINT8 NumIOAddrLines;UINT8 Pad0;};
struct _PST_ACCESSRULE {DWORD cbSize;PST_ACCESSMODE AccessModeFlags;DWORD cClauses;PST_ACCESSCLAUSE *rgClauses;};
struct _PUBLICKEYSTRUC {BYTE bType;BYTE bVersion;WORD reserved;ALG_ID aiKeyAlg;};
struct _ZONEATTRIBUTES {ULONG cbSize;WCHAR szDisplayName[260];WCHAR szDescription[200];WCHAR szIconPath[260];DWORD dwTemplateMinLevel;DWORD dwTemplateRecommended;DWORD dwTemplateCurrentLevel;DWORD dwFlags;};
struct linedevcaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwProviderInfoSize;DWORD dwProviderInfoOffset;DWORD dwSwitchInfoSize;DWORD dwSwitchInfoOffset;DWORD dwPermanentLineID;DWORD dwLineNameSize;DWORD dwLineNameOffset;DWORD dwStringFormat;DWORD dwAddressModes;DWORD dwNumAddresses;DWORD dwBearerModes;DWORD dwMaxRate;DWORD dwMediaModes;DWORD dwGenerateToneModes;DWORD dwGenerateToneMaxNumFreq;DWORD dwGenerateDigitModes;DWORD dwMonitorToneMaxNumFreq;DWORD dwMonitorToneMaxNumEntries;DWORD dwMonitorDigitModes;DWORD dwGatherDigitsMinTimeout;DWORD dwGatherDigitsMaxTimeout;DWORD dwMedCtlDigitMaxListSize;DWORD dwMedCtlMediaMaxListSize;DWORD dwMedCtlToneMaxListSize;DWORD dwMedCtlCallStateMaxListSize;DWORD dwDevCapFlags;DWORD dwMaxNumActiveCalls;DWORD dwAnswerMode;DWORD dwRingModes;DWORD dwLineStates;DWORD dwUUIAcceptSize;DWORD dwUUIAnswerSize;DWORD dwUUIMakeCallSize;DWORD dwUUIDropSize;DWORD dwUUISendUserUserInfoSize;DWORD dwUUICallInfoSize;LINEDIALPARAMS MinDialParams;LINEDIALPARAMS MaxDialParams;LINEDIALPARAMS DefaultDialParams;DWORD dwNumTerminals;DWORD dwTerminalCapsSize;DWORD dwTerminalCapsOffset;DWORD dwTerminalTextEntrySize;DWORD dwTerminalTextSize;DWORD dwTerminalTextOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwLineFeatures;DWORD dwSettableDevStatus;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;GUID PermanentLineGuid;DWORD dwAddressTypes;GUID ProtocolGuid;DWORD dwAvailableTracking;};
struct tagCOMBOBOXINFO {DWORD cbSize;RECT rcItem;RECT rcButton;DWORD stateButton;HWND hwndCombo;HWND hwndItem;HWND hwndList;};
struct tagENUMPROPERTY {LPSTR pszName;HHEADERROW hRow;DWORD dwPropId;};
struct tagHTTPMAILPOST {LPSTR pszLocation;BOOL fResend;DWORD cbIncrement;DWORD cbCurrent;DWORD cbTotal;};
struct tagNMRBAUTOSIZE {NMHDR hdr;BOOL fChanged;RECT rcTarget;RECT rcActual;};
struct tagQUERYCONTEXT {DWORD dwContext;CSPLATFORM Platform;LCID Locale;DWORD dwVersionHi;DWORD dwVersionLo;};
typedef SCODE  ALLOCATEBUFFER(ULONG cbSize, LPVOID *lppBuffer);
struct IAMRebuildVtbl {HRESULT ( *QueryInterface)(IAMRebuild *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMRebuild *This);ULONG ( *Release)(IAMRebuild *This);HRESULT ( *RebuildNow)(IAMRebuild *This);};
struct ICustomDocVtbl {HRESULT ( *QueryInterface)(ICustomDoc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICustomDoc *This);ULONG ( *Release)(ICustomDoc *This);HRESULT ( *SetUIHandler)(ICustomDoc *This, IDocHostUIHandler *pUIHandler);};
struct _BthDeviceInfo {ULONGLONG btAddress;ULONG cod;ULONGLONG lmpSupportedFeatures;CHAR name[248];};
struct _CERT_RDN_ATTR {LPSTR pszObjId;DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _KDEVICE_QUEUE {LIST_ENTRY DeviceListHead;CRITICAL_SECTION Lock;BOOLEAN Busy;};
struct _LINE_DEV_CAPS {ULONG ulTotalSize;ULONG ulNeededSize;ULONG ulUsedSize;ULONG ulProviderInfoSize;ULONG ulProviderInfoOffset;ULONG ulSwitchInfoSize;ULONG ulSwitchInfoOffset;ULONG ulPermanentLineID;ULONG ulLineNameSize;ULONG ulLineNameOffset;ULONG ulStringFormat;ULONG ulAddressModes;ULONG ulNumAddresses;ULONG ulBearerModes;ULONG ulMaxRate;ULONG ulMediaModes;ULONG ulGenerateToneModes;ULONG ulGenerateToneMaxNumFreq;ULONG ulGenerateDigitModes;ULONG ulMonitorToneMaxNumFreq;ULONG ulMonitorToneMaxNumEntries;ULONG ulMonitorDigitModes;ULONG ulGatherDigitsMinTimeout;ULONG ulGatherDigitsMaxTimeout;ULONG ulMedCtlDigitMaxListSize;ULONG ulMedCtlMediaMaxListSize;ULONG ulMedCtlToneMaxListSize;ULONG ulMedCtlCallStateMaxListSize;ULONG ulDevCapFlags;ULONG ulMaxNumActiveCalls;ULONG ulAnswerMode;ULONG ulRingModes;ULONG ulLineStates;ULONG ulUUIAcceptSize;ULONG ulUUIAnswerSize;ULONG ulUUIMakeCallSize;ULONG ulUUIDropSize;ULONG ulUUISendUserUserInfoSize;ULONG ulUUICallInfoSize;LINE_DIAL_PARAMS MinDialParams;LINE_DIAL_PARAMS MaxDialParams;LINE_DIAL_PARAMS DefaultDialParams;ULONG ulNumTerminals;ULONG ulTerminalCapsSize;ULONG ulTerminalCapsOffset;ULONG ulTerminalTextEntrySize;ULONG ulTerminalTextSize;ULONG ulTerminalTextOffset;ULONG ulDevSpecificSize;ULONG ulDevSpecificOffset;ULONG ulLineFeatures;ULONG ulSettableDevStatus;ULONG ulDeviceClassesSize;ULONG ulDeviceClassesOffset;GUID PermanentLineGuid;ULONG ulAddressTypes;GUID ProtocolGuid;ULONG ulAvailableTracking;};
struct _PROV_ENUMALGS {ALG_ID aiAlgid;DWORD dwBitLen;DWORD dwNameLen;WCHAR szName[20];};
struct _WCE_IAS_QUERY {u_char irdaDeviceID[4];char irdaClassName[61];char irdaAttribName[61];u_short irdaAttribType;union _WCE_IAS_QUERY___BC3205F11902EE2DB09536827ADE263F irdaAttribute;};
struct _tagOLECMDTEXT {DWORD cmdtextf;ULONG cwActual;ULONG cwBuf;unsigned short rgwz[1];};
struct tagDBPROPIDSET {DBPROPID *rgPropertyIDs;ULONG cPropertyIDs;GUID guidPropertySet;};
struct tagDBTIMESTAMP {SHORT year;USHORT month;USHORT day;USHORT hour;USHORT minute;USHORT second;ULONG fraction;};
struct tagNNTPARTICLE {DWORD dwArticleNum;LPSTR pszMessageId;LPSTR pszLines;ULONG cbLines;ULONG cLines;DWORD dwReserved;};
struct tagSMTPMESSAGE {ULONG cbSize;LPSTREAM pstmMsg;INETADDRLIST rAddressList;};
struct tagTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
typedef void  CALLERRELEASE(ULONG ulCallerData, LPTABLEDATA lpTblData, LPMAPITABLE lpVue);
struct IContinueVtbl {HRESULT ( *QueryInterface)(IContinue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinue *This);ULONG ( *Release)(IContinue *This);HRESULT ( *FContinue)(IContinue *This);};
struct IEnumPinsVtbl {HRESULT ( *QueryInterface)(IEnumPins *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPins *This);ULONG ( *Release)(IEnumPins *This);HRESULT ( *Next)(IEnumPins *This, ULONG cPins, IPin **ppPins, ULONG *pcFetched);HRESULT ( *Skip)(IEnumPins *This, ULONG cPins);HRESULT ( *Reset)(IEnumPins *This);HRESULT ( *Clone)(IEnumPins *This, IEnumPins **ppEnum);};
struct IInternetVtbl {HRESULT ( *QueryInterface)(IInternet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternet *This);ULONG ( *Release)(IInternet *This);};
typedef BOOL ( *LPWPUSETEVENT)(HANDLE hEvent, LPINT lpErrno);
typedef int  NOTIFCALLBACK(LPVOID lpvContext, ULONG cNotification, LPNOTIFICATION_WABSDEFS lpNotifications);
typedef LPVOID ( *PFN_HeapAlloc)(HANDLE hHeap, DWORD dwFlags, DWORD dwBytes);
typedef STATUS (*RELEASECONFIG)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
typedef STATUS (*REQUESTCONFIG)(CARD_CLIENT_HANDLE, PCARD_CONFIG_INFO);
typedef CARD_WINDOW_HANDLE (*REQUESTWINDOW)(CARD_CLIENT_HANDLE, PCARD_WINDOW_PARMS);
typedef STATUS (*RESETFUNCTION)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
typedef ULONG  WABFREEBUFFER(LPWABOBJECT lpWABObject, LPVOID lpBuffer);
struct _CMS_KEY_INFO {DWORD dwVersion;ALG_ID Algid;BYTE *pbOID;DWORD cbOID;};
struct _DATA_WRAPPER {LIST_ENTRY Link;UCHAR *pucData;DWORD dwDataSize;};
struct _USB_ENDPOINT { DWORD dwCount; USB_ENDPOINT_DESCRIPTOR Descriptor; LPCVOID lpvExtended;};
struct _tagVIRUSINFO {DWORD cbSize;WCHAR wszVendorDescription[128];HICON hVendorIcon;WCHAR wszVendorContactInfo[2048];WCHAR wszVirusName[128];WCHAR wszVirusDescription[128];};
struct tagBIND_OPTS2 {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;DWORD dwTrackFlags;DWORD dwClassContext;LCID locale;COSERVERINFO *pServerInfo;};
struct tagDISPPARAMS {VARIANTARG *rgvarg;DISPID *rgdispidNamedArgs;UINT cArgs;UINT cNamedArgs;};
struct tagExtentInfo {ULONG cb;DWORD dwExtentMode;SIZEL sizelProposed;};
struct tagNMDAYSTATE {NMHDR nmhdr;SYSTEMTIME stStart;int cDayState;LPMONTHDAYSTATE prgDayState;};
struct tagNMTOOLBARA {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPSTR pszText;};
struct tagSCRIPTINFO {SCRIPT_ID ScriptId;UINT uiCodePage;WCHAR wszDescription[48];WCHAR wszFixedWidthFont[32];WCHAR wszProportionalFont[32];};
typedef SCODE  ALLOCATEMORE(ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
struct DXTMTASKINFO {PVOID pfnTaskProc;PVOID pTaskData;PVOID pfnCompletionAPC;DWORD dwCompletionData; GUID *pRequestID;};
typedef STATUS (*GETEVENTMASK)(CARD_CLIENT_HANDLE, PCARD_EVENT_MASK_PARMS);
struct ISegmentVtbl {HRESULT ( *QueryInterface)(ISegment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISegment *This);ULONG ( *Release)(ISegment *This);HRESULT ( *GetPointers)(ISegment *This, IMarkupPointer *pIStart, IMarkupPointer *pIEnd);};
struct IUnknownVtbl {HRESULT ( *QueryInterface)(IUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUnknown *This);ULONG ( *Release)(IUnknown *This);};
typedef INT ( *LPNSPSTARTUP)(LPGUID lpProviderId, LPNSP_ROUTINE lpnspRoutines);
typedef void ( *LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef DWORD ( *PFN_HeapSize)(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
typedef STATUS (*SETEVENTMASK)(CARD_CLIENT_HANDLE, PCARD_EVENT_MASK_PARMS);
union _INSTALLSPEC {struct _INSTALLSPEC___280CBF6B7A133B5B4CDCF4989FA21BAE AppName;WCHAR *FileExt;WCHAR *ProgId;struct _INSTALLSPEC___BA048A39EDAE67FECCBF1A4089D0E28B COMClass;};
struct _SHFILEINFOA {HICON hIcon;int iIcon;DWORD dwAttributes;CHAR szDisplayName[260];CHAR szTypeName[80];};
struct _SHFILEINFOW {HICON hIcon;int iIcon;DWORD dwAttributes;WCHAR szDisplayName[260];WCHAR szTypeName[80];};
struct _avioldindex {FOURCC fcc;DWORD cb;struct _avioldindex___avioldindex_entry aIndex[];};
struct _devicemodeA {BYTE dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;BYTE dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;DWORD dmDisplayFlags;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmICCManufacturer;DWORD dmICCModel;DWORD dmPanningWidth;DWORD dmPanningHeight;DWORD dmDisplayOrientation;};
struct _devicemodeW {WCHAR dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;WCHAR dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;DWORD dmDisplayFlags;DWORD dmDisplayFrequency;DWORD dmDisplayOrientation;};
struct ldapcontrolA {PCHAR ldctl_oid;struct berval ldctl_value;BOOLEAN ldctl_iscritical;};
struct tagARRAYDESC {TYPEDESC tdescElem;USHORT cDims;SAFEARRAYBOUND rgbounds[1];};
struct tagDBPROPSET {DBPROP *rgProperties;ULONG cProperties;GUID guidPropertySet;};
struct tagLVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagTCKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagTVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
typedef int ( *BFFCALLBACK)(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);
typedef void  DRVCALLBACK(HANDLE hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct IDvdCmdVtbl {HRESULT ( *QueryInterface)(IDvdCmd *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdCmd *This);ULONG ( *Release)(IDvdCmd *This);HRESULT ( *WaitForStart)(IDvdCmd *This);HRESULT ( *WaitForEnd)(IDvdCmd *This);};
struct IMallocVtbl {HRESULT ( *QueryInterface)(IMalloc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMalloc *This);ULONG ( *Release)(IMalloc *This);void *( *Alloc)(IMalloc *This, ULONG cb);void *( *Realloc)(IMalloc *This, void *pv, ULONG cb);void ( *Free)(IMalloc *This, void *pv);ULONG ( *GetSize)(IMalloc *This, void *pv);int ( *DidAlloc)(IMalloc *This, void *pv);void ( *HeapMinimize)(IMalloc *This);};
struct IObjMgrVtbl {HRESULT ( *QueryInterface)(IObjMgr *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IObjMgr *This);ULONG ( *Release)(IObjMgr *This);HRESULT ( *Append)(IObjMgr *This, IUnknown *punk);HRESULT ( *Remove)(IObjMgr *This, IUnknown *punk);};
typedef USB_PIPE (*LPOPEN_PIPE)(USB_HANDLE, LPCUSB_ENDPOINT_DESCRIPTOR);
typedef BOOL ( *WNDENUMPROC)(HWND, LPARAM);
struct _CERT_CHAIN {DWORD cCerts;PCERT_BLOB certs;CRYPT_KEY_PROV_INFO keyLocatorInfo;};
struct _DDCAPS_DX6 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsOldCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];DDSCAPS2 ddsCaps;DWORD dwAlphaCaps;DWORD dwSVBAlphaCaps;DWORD dwVSBAlphaCaps;DWORD dwSSBAlphaCaps;DWORD dwFilterCaps;DWORD dwSVBFilterCaps;DWORD dwVSBFilterCaps;DWORD dwSSBFilterCaps;DWORD dwTransformCaps;DWORD dwSVBTransformCaps;DWORD dwVSBTransformCaps;DWORD dwSSBTransformCaps;DWORD dwBltAffineMinifyLimit;DWORD dwOverlayAffineMinifyLimit;};
struct _RELAY_INFO {SOCKADDR_IN sinAddress;SOCKADDR_IN6 sin6Address;ULONG ulMetric;};
struct _USB_DEVICE { DWORD dwCount; USB_DEVICE_DESCRIPTOR Descriptor; LPCUSB_CONFIGURATION lpConfigs; LPCUSB_CONFIGURATION lpActiveConfig;};
struct tagDBBYGUID {BYTE *pbInfo;DBLENGTH cbInfo;GUID guid;};
struct tagHHNTRACK {NMHDR hdr;PCSTR pszCurUrl;int idAction;HH_WINTYPE *phhWinType;};
struct tagLOGBRUSH {UINT lbStyle;COLORREF lbColor;LONG lbHatch;};
struct tagLOGFONTA {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;CHAR lfFaceName[32];};
struct tagLOGFONTW {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;WCHAR lfFaceName[32];};
struct tagNMRGINFO {NMHDR hdr;POINT ptAction;DWORD dwItemSpec;};
typedef STATUS (*RELEASEIRQ)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
struct _CEDIRINFO {DWORD dwAttributes;CEOID oidParent;WCHAR szDirName[260];};
struct _CEPROPVAL {CEPROPID propid;WORD wLenData;WORD wFlags;CEVALUNION val;};
struct _CTL_ENTRY {CRYPT_DATA_BLOB SubjectIdentifier;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _D3DLIGHT8 {D3DLIGHTTYPE Type;D3DCOLORVALUE Diffuse;D3DCOLORVALUE Specular;D3DCOLORVALUE Ambient;D3DVECTOR Position;D3DVECTOR Direction;float Range;float Falloff;float Attenuation0;float Attenuation1;float Attenuation2;float Theta;float Phi;};
struct _DROPFILES {DWORD pFiles;POINT pt;BOOL fNC;BOOL fWide;};
struct _HMAC_Info {ALG_ID HashAlgid;BYTE *pbInnerString;DWORD cbInnerString;BYTE *pbOuterString;DWORD cbOuterString;};
struct _MIB_IFROW {WCHAR wszName[256];DWORD dwIndex;DWORD dwType;DWORD dwMtu;DWORD dwSpeed;DWORD dwPhysAddrLen;BYTE bPhysAddr[8];DWORD dwAdminStatus;DWORD dwOperStatus;DWORD dwLastChange;DWORD dwInOctets;DWORD dwInUcastPkts;DWORD dwInNUcastPkts;DWORD dwInDiscards;DWORD dwInErrors;DWORD dwInUnknownProtos;DWORD dwOutOctets;DWORD dwOutUcastPkts;DWORD dwOutNUcastPkts;DWORD dwOutDiscards;DWORD dwOutErrors;DWORD dwOutQLen;DWORD dwDescrLen;BYTE bDescr[256];};
struct _NDIS_GUID {GUID Guid;_NDIS_GUID___AB53B9CEEC61ECDF1333D6EBB2604C4E __anonymous0;ULONG Size;ULONG Flags;};
struct _OFNOTIFYA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPSTR pszFile;};
struct _cpinfoexW {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;WCHAR CodePageName[260];};
struct _tagImInfo {DWORD cbSize;HANDLE hImageNarrow;HANDLE hImageWide;int iNarrow;int iWide;DWORD fdwFlags;RECT rcSipRect;};
struct tagLVITEMA {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;};
struct tagNMMOUSE {NMHDR hdr;DWORD dwItemSpec;DWORD dwItemData;POINT pt;};
struct tagPAGESET {ULONG cbStruct;BOOL fOddPages;BOOL fEvenPages;ULONG cPageRange;PAGERANGE rgPages[1];};
struct tagSORTKEY {FULLPROPSPEC propColumn;ULONG dwOrder;LCID locale;};
typedef void ( *LINEEVENT)(HTAPILINE htLine, HTAPICALL htCall, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
struct P3PSignal {HWND hwnd;unsigned int message;HANDLE hEvent;void *pContext;P3PHANDLE hRequest;};
typedef void ( *TIMERPROC)(HWND, UINT, UINT, DWORD);
struct _COMMPROP {WORD wPacketLength;WORD wPacketVersion;DWORD dwServiceMask;DWORD dwReserved1;DWORD dwMaxTxQueue;DWORD dwMaxRxQueue;DWORD dwMaxBaud;DWORD dwProvSubType;DWORD dwProvCapabilities;DWORD dwSettableParams;DWORD dwSettableBaud;WORD wSettableData;WORD wSettableStopParity;DWORD dwCurrentTxQueue;DWORD dwCurrentRxQueue;DWORD dwProvSpec1;DWORD dwProvSpec2;WCHAR wcProvChar[1];};
struct _D3DCAPS8 {D3DDEVTYPE DeviceType;UINT AdapterOrdinal;DWORD Caps;DWORD Caps2;DWORD Caps3;DWORD PresentationIntervals;DWORD CursorCaps;DWORD DevCaps;DWORD PrimitiveMiscCaps;DWORD RasterCaps;DWORD ZCmpCaps;DWORD SrcBlendCaps;DWORD DestBlendCaps;DWORD AlphaCmpCaps;DWORD ShadeCaps;DWORD TextureCaps;DWORD TextureFilterCaps;DWORD CubeTextureFilterCaps;DWORD VolumeTextureFilterCaps;DWORD TextureAddressCaps;DWORD VolumeTextureAddressCaps;DWORD LineCaps;DWORD MaxTextureWidth;DWORD MaxTextureHeight;DWORD MaxVolumeExtent;DWORD MaxTextureRepeat;DWORD MaxTextureAspectRatio;DWORD MaxAnisotropy;float MaxVertexW;float GuardBandLeft;float GuardBandTop;float GuardBandRight;float GuardBandBottom;float ExtentsAdjust;DWORD StencilCaps;DWORD FVFCaps;DWORD TextureOpCaps;DWORD MaxTextureBlendStages;DWORD MaxSimultaneousTextures;DWORD VertexProcessingCaps;DWORD MaxActiveLights;DWORD MaxUserClipPlanes;DWORD MaxVertexBlendMatrices;DWORD MaxVertexBlendMatrixIndex;float MaxPointSize;DWORD MaxPrimitiveCount;DWORD MaxVertexIndex;DWORD MaxStreams;DWORD MaxStreamStride;DWORD VertexShaderVersion;DWORD MaxVertexShaderConst;DWORD PixelShaderVersion;float MaxPixelShaderValue;};
struct _ICONINFO {BOOL fIcon;DWORD xHotspot;DWORD yHotspot;HBITMAP hbmMask;HBITMAP hbmColor;};
struct _PCI_RSRC {DWORD Bus;DWORD Device;DWORD Function;DWORD Offset;DWORD Base;DWORD Size;BOOL Bridge;DWORD SecBus;BOOL Placed;PPCI_CFG_INFO ConfigInfo;struct _PCI_RSRC *Next;struct _PCI_RSRC *Prev;};
struct tagBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;LPVOID bmBits;};
struct tagDBCOST {DBRESOURCEKIND eKind;DBCOSTUNIT dwUnits;LONG lValue;};
struct tagLOGPEN {UINT lopnStyle;POINT lopnWidth;COLORREF lopnColor;};
typedef STATUS (*POWEROFF)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
struct tagNMKEY {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagSHRGI {DWORD cbSize;HWND hwndClient;POINT ptDown;DWORD dwFlags;};
typedef HRESULT ( *DELNODE)(LPCSTR pszFileOrDirName, DWORD dwFlags);
typedef STATUS (*POWERON)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE);
struct DXPEN {DXSAMPLE Color;float Width;DWORD Style;IDXSurface *pTexture;DXFPOINT TexturePos;DWORD dwFlags;};
struct _GUID {DWORD Data1;WORD Data2;WORD Data3;BYTE Data4[8];};
struct _DCB {DWORD DCBlength;DWORD BaudRate;unsigned int fBinary : 1;unsigned int fParity : 1;unsigned int fOutxCtsFlow : 1;unsigned int fOutxDsrFlow : 1;unsigned int fDtrControl : 2;unsigned int fDsrSensitivity : 1;unsigned int fTXContinueOnXoff : 1;unsigned int fOutX : 1;unsigned int fInX : 1;unsigned int fErrorChar : 1;unsigned int fNull : 1;unsigned int fRtsControl : 2;unsigned int fAbortOnError : 1;unsigned int fDummy2 : 17;WORD wReserved;WORD XonLim;WORD XoffLim;BYTE ByteSize;BYTE Parity;BYTE StopBits;char XonChar;char XoffChar;char ErrorChar;char EofChar;char EvtChar;WORD wReserved1;};
struct _MDL {struct _MDL *Next;PVOID StartVa;ULONG ByteCount;SHORT MdlFlags;PVOID MappedSystemVa;ULONG ByteOffset;};
struct _SID {BYTE Revision;BYTE SubAuthorityCount;SID_IDENTIFIER_AUTHORITY IdentifierAuthority;DWORD SubAuthority[1];};
union _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C {struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___381AA3CBBBF76D5CF30945FCDC4D2CAC TCPHeader;struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___7B3411E171B9A34DEFFA2511BBE856A2 UDPHeader;struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___0EEE90683FC184311ECCCD409B91075C ICMPHeader;struct _FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C___A40467932820BC39622B6C782DBB7F64 ICMPv6Header;};
union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D {PBYTE ForwarderString;PDWORD Function;DWORD Ordinal;PIMAGE_IMPORT_BY_NAME AddressOfData;};
union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF {PBYTE ForwarderString;PDWORD Function;ULONGLONG Ordinal;PIMAGE_IMPORT_BY_NAME AddressOfData;};
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 {DWORD Length;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD CheckSum;SHORT Number;BYTE Selection;};
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C {DWORD TagIndex;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 Misc;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 FcnAry;WORD TvIndex;};
union _CEOIDINFOEX___69C160A242F05D05EB1D41CC7FD259DB {CEFILEINFO infFile;CEDIRINFO infDirectory;CEDBASEINFOEX infDatabase;CERECORDINFO infRecord;};
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D {struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 bmp;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 wmf;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 icon;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 emf;};
union _CEOIDINFO___51E958489F3A3AB9E4FA9A4B244F18C9 {CEFILEINFO infFile;CEDIRINFO infDirectory;CEDBASEINFO infDatabase;CERECORDINFO infRecord;};
struct tMIXERLINE___4C57F2B9A037CE403812BA722E360DF8 {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;TCHAR szPname[32];};
union DXBNDS____MIDL___MIDL_itf_dxtrans_0155_0001 {DXDBND D[4];DXDBND64 LD[4];DXCBND C[4];DXCBND64 LC[4];};
typedef void ( *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject);
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef HRESULT ( *PFN_WTD_GENERIC_CHAIN_POLICY_CALLBACK)(PCRYPT_PROVIDER_DATA pProvData, DWORD dwStepError, DWORD dwRegPolicySettings, DWORD cSigner, PWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO *rgpSigner, void *pvPolicyArg);
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {DWORD SecurityLimitFlags;HANDLE JobToken;PTOKEN_GROUPS SidsToDisable;PTOKEN_PRIVILEGES PrivilegesToDelete;PTOKEN_GROUPS RestrictedSids;};
struct _WTD_GENERIC_CHAIN_POLICY_CREATE_INFO {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;HCERTCHAINENGINE hChainEngine;PCERT_CHAIN_PARA pChainPara;DWORD dwFlags;void *pvReserved;};
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
struct _NDIS_802_11_ASSOCIATION_INFORMATION {ULONG Length;USHORT AvailableRequestFixedIEs;struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_REQFI RequestFixedIEs;ULONG RequestIELength;ULONG OffsetRequestIEs;USHORT AvailableResponseFixedIEs;struct _NDIS_802_11_ASSOCIATION_INFORMATION___NDIS_802_11_AI_RESFI ResponseFixedIEs;ULONG ResponseIELength;ULONG OffsetResponseIEs;};
struct IEnumDebugExtendedPropertyInfoVtbl {HRESULT ( *QueryInterface)(IEnumDebugExtendedPropertyInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDebugExtendedPropertyInfo *This);ULONG ( *Release)(IEnumDebugExtendedPropertyInfo *This);HRESULT ( *Next)(IEnumDebugExtendedPropertyInfo *This, ULONG celt, ExtendedDebugPropertyInfo *rgExtendedPropertyInfo, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumDebugExtendedPropertyInfo *This, ULONG celt);HRESULT ( *Reset)(IEnumDebugExtendedPropertyInfo *This);HRESULT ( *Clone)(IEnumDebugExtendedPropertyInfo *This, IEnumDebugExtendedPropertyInfo **pedpe);HRESULT ( *GetCount)(IEnumDebugExtendedPropertyInfo *This, ULONG *pcelt);};
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags);
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {CERT_ID RecipientId;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _03D431463D1B1B07D135EFD405717ACF {DWORD dwMask;POINTL ptMinSize;POINTL ptMaxSize;POINTL ptIntegral;POINTL ptActual;WCHAR wszTitle[256];DWORD dwModeFlags;COLORREF crBkgnd;};
struct _22AB0003247B482AF4559A70859CB27B {DWORD cbStruct;DWORD dwFlags;CLSID clsidHandler;LPVOID pHandlerParameters;CLSID clsidDefaultForm;IPersistQueryW *pPersistQuery;_22AB0003247B482AF4559A70859CB27B___1764B377E4534D27D10578FBFD4626DA __anonymous0;};
struct _52A9C12110BCF838A5CA2520D41849E7 {GUID guidDevClass;DWORD dwReserved;BOOL fAttached;int cbName;TCHAR szName[1];};
union _5803EBEE9ECFF6BB80A4332382185F4F {BYTE ce_Indx;BYTE ce_IF;BYTE ce_FS;_5803EBEE9ECFF6BB80A4332382185F4F___50DB88C5F36CD3CA39B08DBB011F2688 __anonymous0;BYTE ce_TD;_5803EBEE9ECFF6BB80A4332382185F4F___180061D661035B18422EFCDC7BB918FA __anonymous1;_5803EBEE9ECFF6BB80A4332382185F4F___8118B546B46D1359E99FBEE781916E35 __anonymous2;BYTE ce_MS;BYTE ce_MI;};
struct _610479CDF0DBDC41F2C77A99D793B920 {DWORD dwLogId;DWORD dwCurrentLogVersion;UCHAR pucSSID[33];UCHAR pucBSSID[6];DWORD dwArg;DWORD dwInfrastructureMode;FILETIME ftTimeStamp;TCHAR ptcAdapterName[260];};
struct _7307A00A22D5C0EAA9BB8E536231902F {DWORD dwNotificationType;TCHAR ptcDeviceName[260];PVOID pvStatusBuffer;UINT uiStatusBufferSize;};
struct _BC2FB811D417144E831EE3AEA4A279C8 {DWORD dwStructSize;LPSTR lpszScheme;DWORD dwSchemeLength;INTERNET_SCHEME nScheme;LPSTR lpszHostName;DWORD dwHostNameLength;INTERNET_PORT nPort;LPSTR lpszUserName;DWORD dwUserNameLength;LPSTR lpszPassword;DWORD dwPasswordLength;LPSTR lpszUrlPath;DWORD dwUrlPathLength;LPSTR lpszExtraInfo;DWORD dwExtraInfoLength;};
struct _BE0BDAB4463CDAC89A1FD071673BF7FC {SIZE sizeDragImage;POINT ptOffset;HBITMAP hbmpDragImage;COLORREF crColorKey;};
struct _C0D59FBB56C2A4C81C123E710A248183 {DWORD cbStruct;DWORD dwFlags;CLSID clsidHandler;LPVOID pHandlerParameters;CLSID clsidDefaultForm;IPersistQueryA *pPersistQuery;_22AB0003247B482AF4559A70859CB27B___1764B377E4534D27D10578FBFD4626DA __anonymous0;};
struct _D59F8FB060D1A4257ECDF2860F49B6AF {u_long nTXDataBytes;u_long nRXDataBytes;LM_BAUD_RATE nBaudRate;u_long thresholdTime;u_long discTime;u_short nMSLinkTurn;u_char nTXPackets;u_char nRXPackets;};
struct _DC79A6464562D2DC48FEEE8D5793116D {LPCSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
struct _E7DEFB284EA8021B90974CE0B87C7D17 {DWORD cbStruct;DWORD dwFlags;HINSTANCE hInstance;LONG offsetQuery;LONG iColumns;DWORD dwReserved;DSCOLUMN aColumns[1];};
struct _FB10B385A80E8C43E2FAF14F8CAB4B13 {FOURCC fccType;FOURCC fccHandler;DWORD dwFlags;WORD wPriority;WORD wLanguage;DWORD dwInitialFrames;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;};
struct INetCfgComponentNotifyBindingVtbl {HRESULT ( *QueryInterface)(INetCfgComponentNotifyBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentNotifyBinding *This);ULONG ( *Release)(INetCfgComponentNotifyBinding *This);HRESULT ( *QueryBindingPath)(INetCfgComponentNotifyBinding *This, DWORD dwChangeFlag, INetCfgBindingPath *pIPath);HRESULT ( *NotifyBindingPath)(INetCfgComponentNotifyBinding *This, DWORD dwChangeFlag, INetCfgBindingPath *pIPath);};
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;DWORD dwRecipientIndex;DWORD dwRecipientEncryptedKeyIndex;CRYPT_BIT_BLOB OriginatorPublicKey;};
struct IDMOVideoOutputOptimizationsVtbl {HRESULT ( *QueryInterface)(IDMOVideoOutputOptimizations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDMOVideoOutputOptimizations *This);ULONG ( *Release)(IDMOVideoOutputOptimizations *This);HRESULT ( *QueryOperationModePreferences)(IDMOVideoOutputOptimizations *This, ULONG ulOutputStreamIndex, DWORD *pdwRequestedCapabilities);HRESULT ( *SetOperationMode)(IDMOVideoOutputOptimizations *This, ULONG ulOutputStreamIndex, DWORD dwEnabledFeatures);HRESULT ( *GetCurrentOperationMode)(IDMOVideoOutputOptimizations *This, ULONG ulOutputStreamIndex, DWORD *pdwEnabledFeatures);HRESULT ( *GetCurrentSampleRequirements)(IDMOVideoOutputOptimizations *This, ULONG ulOutputStreamIndex, DWORD *pdwRequestedFeatures);};
struct INetCfgComponentNotifyGlobalVtbl {HRESULT ( *QueryInterface)(INetCfgComponentNotifyGlobal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentNotifyGlobal *This);ULONG ( *Release)(INetCfgComponentNotifyGlobal *This);HRESULT ( *GetSupportedNotifications)(INetCfgComponentNotifyGlobal *This, DWORD *dwNotifications);HRESULT ( *SysQueryBindingPath)(INetCfgComponentNotifyGlobal *This, DWORD dwChangeFlag, INetCfgBindingPath *pIPath);HRESULT ( *SysNotifyBindingPath)(INetCfgComponentNotifyGlobal *This, DWORD dwChangeFlag, INetCfgBindingPath *pIPath);HRESULT ( *SysNotifyComponent)(INetCfgComponentNotifyGlobal *This, DWORD dwChangeFlag, INetCfgComponent *pIComp);};
typedef PCCERT_CONTEXT ( *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);
struct IElementBehaviorSiteLayout2Vtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteLayout2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteLayout2 *This);ULONG ( *Release)(IElementBehaviorSiteLayout2 *This);HRESULT ( *GetFontInfo)(IElementBehaviorSiteLayout2 *This, LOGFONTW *plf);};
struct IEnumDVD_TEXT_LANGUAGE_UNITVtbl {HRESULT ( *QueryInterface)(IEnumDVD_TEXT_LANGUAGE_UNIT *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDVD_TEXT_LANGUAGE_UNIT *This);ULONG ( *Release)(IEnumDVD_TEXT_LANGUAGE_UNIT *This);HRESULT ( *Next)(IEnumDVD_TEXT_LANGUAGE_UNIT *This, ULONG celt, DVD_TEXT_LANGUAGE_UNIT *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumDVD_TEXT_LANGUAGE_UNIT *This, ULONG eltCount);HRESULT ( *Reset)(IEnumDVD_TEXT_LANGUAGE_UNIT *This);HRESULT ( *Clone)(IEnumDVD_TEXT_LANGUAGE_UNIT *This, IEnumDVD_TEXT_LANGUAGE_UNIT **ppClone);};
struct IUPnPServiceCallbackPrivateVtbl {HRESULT ( *QueryInterface)(IUPnPServiceCallbackPrivate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPServiceCallbackPrivate *This);ULONG ( *Release)(IUPnPServiceCallbackPrivate *This);HRESULT ( *AddTransientCallback)(IUPnPServiceCallbackPrivate *This, IUnknown *pUnkCallback, DWORD *pdwCookie);HRESULT ( *RemoveTransientCallback)(IUPnPServiceCallbackPrivate *This, DWORD dwCookie);};
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {DWORD cbSize;LPCSTR pszUsageIdentifier;DWORD dwKeySpec;DWORD dwAcquirePrivateKeyFlags;DWORD cIssuer;CERT_NAME_BLOB *rgIssuer;PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;void *pvFindArg;};
struct _CREDENTIAL_TARGET_INFORMATIONA {LPSTR TargetName;LPSTR NetbiosServerName;LPSTR DnsServerName;LPSTR NetbiosDomainName;LPSTR DnsDomainName;LPSTR DnsTreeName;LPSTR PackageName;ULONG Flags;DWORD CredTypeCount;LPDWORD CredTypes;};
struct _USER_MARSHAL_ROUTINE_QUADRUPLE {USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;USER_MARSHAL_FREEING_ROUTINE pfnFree;};
struct IElementBehaviorSiteLayoutVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteLayout *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteLayout *This);ULONG ( *Release)(IElementBehaviorSiteLayout *This);HRESULT ( *InvalidateLayoutInfo)(IElementBehaviorSiteLayout *This);HRESULT ( *InvalidateSize)(IElementBehaviorSiteLayout *This);HRESULT ( *GetMediaResolution)(IElementBehaviorSiteLayout *This, SIZE *psizeResolution);};
struct IElementBehaviorSiteRenderVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteRender *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteRender *This);ULONG ( *Release)(IElementBehaviorSiteRender *This);HRESULT ( *Invalidate)(IElementBehaviorSiteRender *This, RECT *pRect);HRESULT ( *InvalidateRenderInfo)(IElementBehaviorSiteRender *This);HRESULT ( *InvalidateStyle)(IElementBehaviorSiteRender *This);};
typedef HRESULT  IWABOBJECT_VCardDisplay_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd, LPSTR lpszFileName);
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMWINDOW)(HWND hwnd, DWORD dwId,  IID * riid, void **ppvObject);
typedef int ( *LPWPUCOMPLETEOVERLAPPEDREQUEST)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, DWORD dwError, DWORD cbTransferred, LPINT lpErrno);
typedef BOOL ( *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CMSG_KEY_TRANS_RECIPIENT_INFO {DWORD dwVersion;CERT_ID RecipientId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;};
struct _CRYPT_TIME_STAMP_REQUEST_INFO {LPSTR pszTimeStampAlgorithm;LPSTR pszContentType;CRYPT_OBJID_BLOB Content;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _D3DDEVICE_CREATION_PARAMETERS {UINT AdapterOrdinal;D3DDEVTYPE DeviceType;HWND hFocusWindow;DWORD BehaviorFlags;};
struct ISubscriptionAgentControlVtbl {HRESULT ( *QueryInterface)(ISubscriptionAgentControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionAgentControl *This);ULONG ( *Release)(ISubscriptionAgentControl *This);HRESULT ( *StartUpdate)(ISubscriptionAgentControl *This, IUnknown *pItem, IUnknown *punkAdvise);HRESULT ( *PauseUpdate)(ISubscriptionAgentControl *This, DWORD dwFlags);HRESULT ( *ResumeUpdate)(ISubscriptionAgentControl *This, DWORD dwFlags);HRESULT ( *AbortUpdate)(ISubscriptionAgentControl *This, DWORD dwFlags);HRESULT ( *SubscriptionControl)(ISubscriptionAgentControl *This, IUnknown *pItem, DWORD dwControl);};
typedef HRESULT ( *LPFNCREATESTDACCESSIBLEOBJECT)(HWND hwnd, LONG idObject,  IID * riid, void **ppvObject);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
struct _MEMORY_BASIC_INFORMATION_VLM {_MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 __anonymous0;_MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B __anonymous1;ULONGLONG RegionSize;DWORD AllocationProtect;DWORD State;DWORD Protect;DWORD Type;};
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext);
struct _CERT_BASIC_CONSTRAINTS_INFO {CRYPT_BIT_BLOB SubjectType;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;DWORD cSubtreesConstraint;CERT_NAME_BLOB *rgSubtreesConstraint;};
struct IElementBehaviorLayout2Vtbl {HRESULT ( *QueryInterface)(IElementBehaviorLayout2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorLayout2 *This);ULONG ( *Release)(IElementBehaviorLayout2 *This);HRESULT ( *GetTextDescent)(IElementBehaviorLayout2 *This, LONG *plDescent);};
struct IImnAdviseMigrateServerVtbl {HRESULT ( *QueryInterface)(IImnAdviseMigrateServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnAdviseMigrateServer *This);ULONG ( *Release)(IImnAdviseMigrateServer *This);HRESULT ( *MigrateServer)(IImnAdviseMigrateServer *This, DWORD dwSrvType, IImnAccount *pAccount);};
struct INetCfgComponentControlVtbl {HRESULT ( *QueryInterface)(INetCfgComponentControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentControl *This);ULONG ( *Release)(INetCfgComponentControl *This);HRESULT ( *Initialize)(INetCfgComponentControl *This, INetCfgComponent *pIComp, INetCfg *pINetCfg, BOOL fInstalling);HRESULT ( *ApplyRegistryChanges)(INetCfgComponentControl *This);HRESULT ( *ApplyPnpChanges)(INetCfgComponentControl *This, INetCfgPnpReconfigCallback *pICallback);HRESULT ( *CancelChanges)(INetCfgComponentControl *This);};
struct INetLanConnectionUiInfoVtbl {HRESULT ( *QueryInterface)(INetLanConnectionUiInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetLanConnectionUiInfo *This);ULONG ( *Release)(INetLanConnectionUiInfo *This);HRESULT ( *GetDeviceGuid)(INetLanConnectionUiInfo *This, GUID *pguid);};
struct _CMSG_ENVELOPED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCERT_INFO *rgpRecipients;};
struct _INTERNET_CACHE_ENTRY_INFOA {DWORD dwStructSize;LPSTR lpszSourceUrlName;LPSTR lpszLocalFileName;DWORD CacheEntryType;DWORD dwUseCount;DWORD dwHitRate;DWORD dwSizeLow;DWORD dwSizeHigh;FILETIME LastModifiedTime;FILETIME ExpireTime;FILETIME LastAccessTime;FILETIME LastSyncTime;LPSTR lpHeaderInfo;DWORD dwHeaderInfoSize;LPSTR lpszFileExtension;_INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C __anonymous0;};
struct tagDVD_SubpictureAttributes {DVD_SUBPICTURE_TYPE Type;DVD_SUBPICTURE_CODING CodingMode;LCID Language;DVD_SUBPICTURE_LANG_EXT LanguageExtension;};
struct IDirectDrawMediaSampleVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaSample *This);ULONG ( *Release)(IDirectDrawMediaSample *This);HRESULT ( *GetSurfaceAndReleaseLock)(IDirectDrawMediaSample *This, IDirectDrawSurface **ppDirectDrawSurface, RECT *pRect);HRESULT ( *LockMediaSamplePointer)(IDirectDrawMediaSample *This);};
struct IEnumDebugPropertyInfoVtbl {HRESULT ( *QueryInterface)(IEnumDebugPropertyInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDebugPropertyInfo *This);ULONG ( *Release)(IEnumDebugPropertyInfo *This);HRESULT ( *Next)(IEnumDebugPropertyInfo *This, ULONG celt, DebugPropertyInfo *pi, ULONG *pcEltsfetched);HRESULT ( *Skip)(IEnumDebugPropertyInfo *This, ULONG celt);HRESULT ( *Reset)(IEnumDebugPropertyInfo *This);HRESULT ( *Clone)(IEnumDebugPropertyInfo *This, IEnumDebugPropertyInfo **ppepi);HRESULT ( *GetCount)(IEnumDebugPropertyInfo *This, ULONG *pcelt);};
struct IPropFindMultiResponseVtbl {HRESULT ( *QueryInterface)(IPropFindMultiResponse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropFindMultiResponse *This);ULONG ( *Release)(IPropFindMultiResponse *This);BOOL ( *IsComplete)(IPropFindMultiResponse *This);HRESULT ( *GetLength)(IPropFindMultiResponse *This, ULONG *pulLength);HRESULT ( *GetResponse)(IPropFindMultiResponse *This, ULONG ulIndex, IPropFindResponse **ppResponse);};
typedef int ( *LPWPUQUERYBLOCKINGCALLBACK)(DWORD dwCatalogEntryId, LPBLOCKINGCALLBACK *lplpfnCallback, PDWORD_PTR lpdwContext, LPINT lpErrno);
typedef BOOLEAN (*PFAST_IO_CHECK_IF_POSSIBLE)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, BOOLEAN CheckForReadOperation, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
typedef HRESULT (*PFNCEGETDEVMGMTPACKAGELIST)(PDMSINVRECORD, LPDWORD, DWORD);
typedef BOOL ( *PFN_SetAllocAdditionalData)(HANDLE hHeap, LPVOID lpMem, WORD wType, WORD wLen, LPVOID pData);
struct UserNotificationInfoHeader {HANDLE hNotification;DWORD dwStatus;CE_NOTIFICATION_TRIGGER *pcent;CE_USER_NOTIFICATION *pceun;};
struct _ACCESS_ALLOWED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _NDIS_TAPI_SET_CALL_PARAMS {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulBearerMode;ULONG ulMinRate;ULONG ulMaxRate;BOOLEAN bSetLineDialParams;LINE_DIAL_PARAMS LineDialParams;};
struct IElementBehaviorFocusVtbl {HRESULT ( *QueryInterface)(IElementBehaviorFocus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorFocus *This);ULONG ( *Release)(IElementBehaviorFocus *This);HRESULT ( *GetFocusRect)(IElementBehaviorFocus *This, RECT *pRect);};
struct IEnumConnectionPointsVtbl {HRESULT ( *QueryInterface)(IEnumConnectionPoints *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnectionPoints *This);ULONG ( *Release)(IEnumConnectionPoints *This);HRESULT ( *Next)(IEnumConnectionPoints *This, ULONG cConnections, LPCONNECTIONPOINT *ppCP, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnectionPoints *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnectionPoints *This);HRESULT ( *Clone)(IEnumConnectionPoints *This, IEnumConnectionPoints **ppEnum);};
struct IGlobalInterfaceTableVtbl {HRESULT ( *QueryInterface)(IGlobalInterfaceTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGlobalInterfaceTable *This);ULONG ( *Release)(IGlobalInterfaceTable *This);HRESULT ( *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *This, IUnknown *pUnk,  IID * riid, DWORD *pdwCookie);HRESULT ( *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie);HRESULT ( *GetInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie,  IID * riid, void **ppv);};
struct IHTMLOMWindowServicesVtbl {HRESULT ( *QueryInterface)(IHTMLOMWindowServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOMWindowServices *This);ULONG ( *Release)(IHTMLOMWindowServices *This);HRESULT ( *moveTo)(IHTMLOMWindowServices *This, LONG x, LONG y);HRESULT ( *moveBy)(IHTMLOMWindowServices *This, LONG x, LONG y);HRESULT ( *resizeTo)(IHTMLOMWindowServices *This, LONG x, LONG y);HRESULT ( *resizeBy)(IHTMLOMWindowServices *This, LONG x, LONG y);};
struct IIdentityChangeNotifyVtbl {HRESULT ( *QueryInterface)(IIdentityChangeNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIdentityChangeNotify *This);ULONG ( *Release)(IIdentityChangeNotify *This);HRESULT ( *QuerySwitchIdentities)(IIdentityChangeNotify *This);HRESULT ( *SwitchIdentities)(IIdentityChangeNotify *This);HRESULT ( *IdentityInformationChanged)(IIdentityChangeNotify *This, DWORD dwType);};
struct IMimeEnumAddressTypesVtbl {HRESULT ( *QueryInterface)(IMimeEnumAddressTypes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEnumAddressTypes *This);ULONG ( *Release)(IMimeEnumAddressTypes *This);HRESULT ( *Next)(IMimeEnumAddressTypes *This, ULONG cFetch, LPADDRESSPROPS prgAdr, ULONG *pcFetched);HRESULT ( *Skip)(IMimeEnumAddressTypes *This, ULONG cItems);HRESULT ( *Reset)(IMimeEnumAddressTypes *This);HRESULT ( *Clone)(IMimeEnumAddressTypes *This, IMimeEnumAddressTypes **ppEnum);HRESULT ( *Count)(IMimeEnumAddressTypes *This, ULONG *pcItems);};
struct INetConnectionManagerVtbl {HRESULT ( *QueryInterface)(INetConnectionManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetConnectionManager *This);ULONG ( *Release)(INetConnectionManager *This);HRESULT ( *EnumConnections)(INetConnectionManager *This, NETCONMGR_ENUM_FLAGS Flags, IEnumNetConnection **ppEnum);};
struct IParserTreePropertiesVtbl {HRESULT ( *QueryInterface)(IParserTreeProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParserTreeProperties *This);ULONG ( *Release)(IParserTreeProperties *This);HRESULT ( *GetProperties)(IParserTreeProperties *This, ULONG eParseProp, VARIANT *vParseProp);};
struct IPropertySetContainerVtbl {HRESULT ( *QueryInterface)(IPropertySetContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertySetContainer *This);ULONG ( *Release)(IPropertySetContainer *This);HRESULT ( *GetPropset)(IPropertySetContainer *This,  GUID * rguidName,  IID * riid, IUnknown **ppvObj);HRESULT ( *AddPropset)(IPropertySetContainer *This, IPersist *pPropset);HRESULT ( *DeletePropset)(IPropertySetContainer *This,  GUID * rguidName);};
struct IRTCEventNotificationVtbl {HRESULT ( *QueryInterface)(IRTCEventNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCEventNotification *This);ULONG ( *Release)(IRTCEventNotification *This);HRESULT ( *Event)(IRTCEventNotification *This, RTC_EVENT RTCEvent, IDispatch *pEvent);};
struct ISpecifyPropertyPagesVtbl {HRESULT ( *QueryInterface)(ISpecifyPropertyPages *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISpecifyPropertyPages *This);ULONG ( *Release)(ISpecifyPropertyPages *This);HRESULT ( *GetPages)(ISpecifyPropertyPages *This, CAUUID *pPages);};
struct ISynchronizedCallBackVtbl {HRESULT ( *QueryInterface)(ISynchronizedCallBack *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizedCallBack *This);ULONG ( *Release)(ISynchronizedCallBack *This);HRESULT ( *CallBack)(ISynchronizedCallBack *This, BYTE *pParams, ULONG uSize);};
struct ITransactionDispenserVtbl {HRESULT ( *QueryInterface)(ITransactionDispenser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionDispenser *This);ULONG ( *Release)(ITransactionDispenser *This);HRESULT ( *GetOptionsObject)(ITransactionDispenser *This, ITransactionOptions **ppOptions);HRESULT ( *BeginTransaction)(ITransactionDispenser *This, IUnknown *punkOuter, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOptions, ITransaction **ppTransaction);};
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR);
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK2)(LPDIRECTDRAWSURFACE4, LPDDSURFACEDESC2, LPVOID);
struct _ACCESS_DENIED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _BY_HANDLE_DB_INFORMATION {WORD wVersion;WORD wReserved;CEGUID guidVol;CEOID oidDbase;CEDBASEINFOEX infDatabase;};
struct _CERT_REVOCATION_CRL_INFO {DWORD cbSize;PCCRL_CONTEXT pBaseCrlContext;PCCRL_CONTEXT pDeltaCrlContext;PCRL_ENTRY pCrlEntry;BOOL fDeltaCrlEntry;};
struct _REPARSE_GUID_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;GUID ReparseGuid;struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
struct IAMBufferNegotiationVtbl {HRESULT ( *QueryInterface)(IAMBufferNegotiation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMBufferNegotiation *This);ULONG ( *Release)(IAMBufferNegotiation *This);HRESULT ( *SuggestAllocatorProperties)(IAMBufferNegotiation *This,  ALLOCATOR_PROPERTIES *pprop);HRESULT ( *GetAllocatorProperties)(IAMBufferNegotiation *This, ALLOCATOR_PROPERTIES *pprop);};
struct IAMTimecodeGeneratorVtbl {HRESULT ( *QueryInterface)(IAMTimecodeGenerator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeGenerator *This);ULONG ( *Release)(IAMTimecodeGenerator *This);HRESULT ( *GetTCGMode)(IAMTimecodeGenerator *This, int Param, int *pValue);HRESULT ( *SetTCGMode)(IAMTimecodeGenerator *This, int Param, int Value);HRESULT ( *put_VITCLine)(IAMTimecodeGenerator *This, int Line);HRESULT ( *get_VITCLine)(IAMTimecodeGenerator *This, int *pLine);HRESULT ( *SetTimecode)(IAMTimecodeGenerator *This, PTIMECODE_SAMPLE pTimecodeSample);HRESULT ( *GetTimecode)(IAMTimecodeGenerator *This, PTIMECODE_SAMPLE pTimecodeSample);};
struct IAMTunerNotificationVtbl {HRESULT ( *QueryInterface)(IAMTunerNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTunerNotification *This);ULONG ( *Release)(IAMTunerNotification *This);HRESULT ( *OnEvent)(IAMTunerNotification *This, AMTunerEventType Event);};
struct IColumnMapperCreatorVtbl {HRESULT ( *QueryInterface)(IColumnMapperCreator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnMapperCreator *This);ULONG ( *Release)(IColumnMapperCreator *This);HRESULT ( *GetColumnMapper)(IColumnMapperCreator *This,  WCHAR *wcsMachineName,  WCHAR *wcsCatalogName, IColumnMapper **ppColumnMapper);};
struct IElementBehaviorSiteVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSite *This);ULONG ( *Release)(IElementBehaviorSite *This);HRESULT ( *GetElement)(IElementBehaviorSite *This, IHTMLElement **ppElement);HRESULT ( *RegisterNotification)(IElementBehaviorSite *This, LONG lEvent);};
struct IMimeMessageCallbackVtbl {HRESULT ( *QueryInterface)(IMimeMessageCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeMessageCallback *This);ULONG ( *Release)(IMimeMessageCallback *This);HRESULT ( *OnWebPageSplitter)(IMimeMessageCallback *This, DWORD cInlined, IStream *ppStream);};
typedef void ( *INTERNET_STATUS_CALLBACK)(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength);
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);
typedef INT ( *LPNSPGETSERVICECLASSINFO)(LPGUID lpProviderId, LPDWORD lpdwBufSize, LPWSASERVICECLASSINFOW lpServiceClassInfo);
typedef BOOL ( *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD dwFlags, void *pvAuxInfo);
typedef BOOL ( *SSL_CRACK_CERTIFICATE_FN)(PUCHAR pbCertificate, DWORD cbCertificate, BOOL VerifySignature, PX509Certificate *ppCertificate);
struct _CMSG_SIGNED_ENCODE_INFO {DWORD cbSize;DWORD cSigners;PCMSG_SIGNER_ENCODE_INFO rgSigners;DWORD cCertEncoded;PCERT_BLOB rgCertEncoded;DWORD cCrlEncoded;PCRL_BLOB rgCrlEncoded;};
struct _SYSTEM_ALARM_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _SYSTEM_AUDIT_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct tagDVD_KaraokeAttributes {BYTE bVersion;BOOL fMasterOfCeremoniesInGuideVocal1;BOOL fDuet;DVD_KARAOKE_ASSIGNMENT ChannelAssignment;WORD wChannelContents[8];};
typedef UINT ( *ACMFILTERCHOOSEHOOKPROC)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFORMATCHOOSEHOOKPROC)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
struct IAMDevMemoryControlVtbl {HRESULT ( *QueryInterface)(IAMDevMemoryControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDevMemoryControl *This);ULONG ( *Release)(IAMDevMemoryControl *This);HRESULT ( *QueryWriteSync)(IAMDevMemoryControl *This);HRESULT ( *WriteSync)(IAMDevMemoryControl *This);HRESULT ( *GetDevId)(IAMDevMemoryControl *This, DWORD *pdwDevId);};
struct IEnumDVD_CELL_PIECEVtbl {HRESULT ( *QueryInterface)(IEnumDVD_CELL_PIECE *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDVD_CELL_PIECE *This);ULONG ( *Release)(IEnumDVD_CELL_PIECE *This);HRESULT ( *Next)(IEnumDVD_CELL_PIECE *This, ULONG celt, DVD_CELL_PIECE *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumDVD_CELL_PIECE *This, ULONG eltCount);HRESULT ( *Reset)(IEnumDVD_CELL_PIECE *This);HRESULT ( *Clone)(IEnumDVD_CELL_PIECE *This, IEnumDVD_CELL_PIECE **ppClone);};
struct IEnumItemPropertiesVtbl {HRESULT ( *QueryInterface)(IEnumItemProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumItemProperties *This);ULONG ( *Release)(IEnumItemProperties *This);HRESULT ( *Next)(IEnumItemProperties *This, ULONG celt, ITEMPROP *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumItemProperties *This, ULONG celt);HRESULT ( *Reset)(IEnumItemProperties *This);HRESULT ( *Clone)(IEnumItemProperties *This, IEnumItemProperties **ppenum);HRESULT ( *GetCount)(IEnumItemProperties *This, ULONG *pnCount);};
struct IEnumSTATPROPSETSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSETSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSETSTG *This);ULONG ( *Release)(IEnumSTATPROPSETSTG *This);HRESULT ( *Next)(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSETSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSETSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum);};
struct IFileSystemBindDataVtbl {HRESULT ( *QueryInterface)(IFileSystemBindData *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileSystemBindData *This);ULONG ( *Release)(IFileSystemBindData *This);HRESULT ( *SetFindData)(IFileSystemBindData *This,  WIN32_FIND_DATAW *pfd);HRESULT ( *GetFindData)(IFileSystemBindData *This, WIN32_FIND_DATAW *pfd);};
struct IHTMLPainterOverlayVtbl {HRESULT ( *QueryInterface)(IHTMLPainterOverlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPainterOverlay *This);ULONG ( *Release)(IHTMLPainterOverlay *This);HRESULT ( *OnMove)(IHTMLPainterOverlay *This, RECT rcDevice);};
struct IMimeEnumHeaderRowsVtbl {HRESULT ( *QueryInterface)(IMimeEnumHeaderRows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEnumHeaderRows *This);ULONG ( *Release)(IMimeEnumHeaderRows *This);HRESULT ( *Next)(IMimeEnumHeaderRows *This, ULONG cFetch, LPENUMHEADERROW prgRow, ULONG *pcFetched);HRESULT ( *Skip)(IMimeEnumHeaderRows *This, ULONG cItems);HRESULT ( *Reset)(IMimeEnumHeaderRows *This);HRESULT ( *Clone)(IMimeEnumHeaderRows *This, IMimeEnumHeaderRows **ppEnum);HRESULT ( *Count)(IMimeEnumHeaderRows *This, ULONG *pcItems);};
struct IMimeEnumPropertiesVtbl {HRESULT ( *QueryInterface)(IMimeEnumProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEnumProperties *This);ULONG ( *Release)(IMimeEnumProperties *This);HRESULT ( *Next)(IMimeEnumProperties *This, ULONG cFetch, LPENUMPROPERTY prgProp, ULONG *pcFetched);HRESULT ( *Skip)(IMimeEnumProperties *This, ULONG cItems);HRESULT ( *Reset)(IMimeEnumProperties *This);HRESULT ( *Clone)(IMimeEnumProperties *This, IMimeEnumProperties **ppEnum);HRESULT ( *Count)(IMimeEnumProperties *This, ULONG *pcItems);};
struct IPropertyNotifySinkVtbl {HRESULT ( *QueryInterface)(IPropertyNotifySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyNotifySink *This);ULONG ( *Release)(IPropertyNotifySink *This);HRESULT ( *OnChanged)(IPropertyNotifySink *This, DISPID dispID);HRESULT ( *OnRequestEdit)(IPropertyNotifySink *This, DISPID dispID);};
typedef HRESULT  IWABOBJECT_SetMe_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, SBinary sbEID, ULONG ulParam);
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD);
typedef BOOL ( *LPDEVICE_NOTIFY_ROUTINE)(LPVOID lpvNotifyParameter, DWORD dwCode, LPDWORD *dwInfo1, LPDWORD *dwInfo2, LPDWORD *dwInfo3, LPDWORD *dwInfo4);
typedef SOCKET ( *LPWPUCREATESOCKETHANDLE)(DWORD dwCatalogEntryId, DWORD_PTR dwContext, LPINT lpErrno);
typedef BOOLEAN (*PFAST_IO_DEVICE_CONTROL)(struct _FILE_OBJECT *FileObject, BOOLEAN Wait, PVOID InputBuffer, ULONG InputBufferLength, PVOID OutputBuffer, ULONG OutputBufferLength, ULONG IoControlCode, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
struct _CRYPT_PRIVATE_KEY_INFO {DWORD Version;CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_DER_BLOB PrivateKey;PCRYPT_ATTRIBUTES pAttributes;};
struct _D3DADAPTER_IDENTIFIER8 {TCHAR Driver[512];TCHAR Description[512];LARGE_INTEGER DriverVersion;DWORD VendorId;DWORD DeviceId;DWORD SubSysId;DWORD Revision;GUID DeviceIdentifier;DWORD WHQLLevel;};
struct _NDIS_TAPI_DEV_SPECIFIC {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulAddressID;HDRV_CALL hdCall;ULONG ulParamsSize;UCHAR Params[1];};
struct tagSUBSCRIPTIONITEMINFO {ULONG cbSize;DWORD dwFlags;DWORD dwPriority;SUBSCRIPTIONCOOKIE ScheduleGroup;CLSID clsidAgent;};
struct IAccessibleHandlerVtbl {HRESULT ( *QueryInterface)(IAccessibleHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessibleHandler *This);ULONG ( *Release)(IAccessibleHandler *This);HRESULT ( *AccessibleObjectFromID)(IAccessibleHandler *This, int hwnd, int lObjectID, LPACCESSIBLE *pIAccessible);};
struct IDistributorNotifyVtbl {HRESULT ( *QueryInterface)(IDistributorNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDistributorNotify *This);ULONG ( *Release)(IDistributorNotify *This);HRESULT ( *Stop)(IDistributorNotify *This);HRESULT ( *Pause)(IDistributorNotify *This);HRESULT ( *Run)(IDistributorNotify *This, REFERENCE_TIME tStart);HRESULT ( *SetSyncSource)(IDistributorNotify *This, IReferenceClock *pClock);HRESULT ( *NotifyGraphChange)(IDistributorNotify *This);};
struct IEnumCifComponentsVtbl {HRESULT ( *QueryInterface)(ICifComponent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICifComponent *This);ULONG ( *Release)(ICifComponent *This);HRESULT ( *Next)(ICifComponent *This, ICifComponent **);HRESULT ( *Reset)(ICifComponent *This);};
struct IEnumDVD_TEXT_ITEMVtbl {HRESULT ( *QueryInterface)(IEnumDVD_TEXT_ITEM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDVD_TEXT_ITEM *This);ULONG ( *Release)(IEnumDVD_TEXT_ITEM *This);HRESULT ( *Next)(IEnumDVD_TEXT_ITEM *This, ULONG celt, DVD_TEXT_ITEM *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumDVD_TEXT_ITEM *This, ULONG eltCount);HRESULT ( *Reset)(IEnumDVD_TEXT_ITEM *This);HRESULT ( *Clone)(IEnumDVD_TEXT_ITEM *This, IEnumDVD_TEXT_ITEM **ppClone);};
struct IEnumRegisterWordAVtbl {HRESULT ( *QueryInterface)(IEnumRegisterWordA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRegisterWordA *This);ULONG ( *Release)(IEnumRegisterWordA *This);HRESULT ( *Clone)(IEnumRegisterWordA *This, IEnumRegisterWordA **ppEnum);HRESULT ( *Next)(IEnumRegisterWordA *This, ULONG ulCount, REGISTERWORDA *rgRegisterWord, ULONG *pcFetched);HRESULT ( *Reset)(IEnumRegisterWordA *This);HRESULT ( *Skip)(IEnumRegisterWordA *This, ULONG ulCount);};
struct IEnumRegisterWordWVtbl {HRESULT ( *QueryInterface)(IEnumRegisterWordW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRegisterWordW *This);ULONG ( *Release)(IEnumRegisterWordW *This);HRESULT ( *Clone)(IEnumRegisterWordW *This, IEnumRegisterWordW **ppEnum);HRESULT ( *Next)(IEnumRegisterWordW *This, ULONG ulCount, REGISTERWORDW *rgRegisterWord, ULONG *pcFetched);HRESULT ( *Reset)(IEnumRegisterWordW *This);HRESULT ( *Skip)(IEnumRegisterWordW *This, ULONG ulCount);};
struct IEnumScheduleGroupVtbl {HRESULT ( *QueryInterface)(IEnumScheduleGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumScheduleGroup *This);ULONG ( *Release)(IEnumScheduleGroup *This);HRESULT ( *Next)(IEnumScheduleGroup *This, ULONG celt, LPSCHEDULEGROUP *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumScheduleGroup *This, ULONG celt);HRESULT ( *Reset)(IEnumScheduleGroup *This);HRESULT ( *Clone)(IEnumScheduleGroup *This, IEnumScheduleGroup **ppenum);};
struct IEnumSyncSchedulesVtbl {HRESULT ( *QueryInterface)(IEnumSyncSchedules *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSyncSchedules *This);ULONG ( *Release)(IEnumSyncSchedules *This);HRESULT ( *Next)(IEnumSyncSchedules *This, ULONG celt, SYNCSCHEDULECOOKIE *pSyncSchedCookie, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSyncSchedules *This, ULONG celt);HRESULT ( *Reset)(IEnumSyncSchedules *This);HRESULT ( *Clone)(IEnumSyncSchedules *This, IEnumSyncSchedules **ppEnumSyncSchedules);};
struct IRowsetWatchNotifyVtbl {HRESULT ( *QueryInterface)(IRowsetWatchNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchNotify *This);ULONG ( *Release)(IRowsetWatchNotify *This);HRESULT ( *OnChange)(IRowsetWatchNotify *This, IRowset *pRowset, DBWATCHNOTIFY eChangeReason);};
struct ISAXContentHandlerVtbl {HRESULT ( *QueryInterface)(ISAXContentHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXContentHandler *This);ULONG ( *Release)(ISAXContentHandler *This);HRESULT ( *putDocumentLocator)(ISAXContentHandler *This, ISAXLocator *pLocator);HRESULT ( *startDocument)(ISAXContentHandler *This);HRESULT ( *endDocument)(ISAXContentHandler *This);HRESULT ( *startPrefixMapping)(ISAXContentHandler *This,  unsigned short *pwchPrefix, int cchPrefix,  unsigned short *pwchUri, int cchUri);HRESULT ( *endPrefixMapping)(ISAXContentHandler *This,  unsigned short *pwchPrefix, int cchPrefix);HRESULT ( *startElement)(ISAXContentHandler *This,  unsigned short *pwchNamespaceUri, int cchNamespaceUri,  unsigned short *pwchLocalName, int cchLocalName,  unsigned short *pwchQName, int cchQName, ISAXAttributes *pAttributes);HRESULT ( *endElement)(ISAXContentHandler *This,  unsigned short *pwchNamespaceUri, int cchNamespaceUri,  unsigned short *pwchLocalName, int cchLocalName,  unsigned short *pwchQName, int cchQName);HRESULT ( *characters)(ISAXContentHandler *This,  unsigned short *pwchChars, int cchChars);HRESULT ( *ignorableWhitespace)(ISAXContentHandler *This,  unsigned short *pwchChars, int cchChars);HRESULT ( *processingInstruction)(ISAXContentHandler *This,  unsigned short *pwchTarget, int cchTarget,  unsigned short *pwchData, int cchData);HRESULT ( *skippedEntity)(ISAXContentHandler *This,  unsigned short *pwchName, int cchName);};
struct ISAXLexicalHandlerVtbl {HRESULT ( *QueryInterface)(ISAXLexicalHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXLexicalHandler *This);ULONG ( *Release)(ISAXLexicalHandler *This);HRESULT ( *startDTD)(ISAXLexicalHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchPublicId, int cchPublicId,  unsigned short *pwchSystemId, int cchSystemId);HRESULT ( *endDTD)(ISAXLexicalHandler *This);HRESULT ( *startEntity)(ISAXLexicalHandler *This,  unsigned short *pwchName, int cchName);HRESULT ( *endEntity)(ISAXLexicalHandler *This,  unsigned short *pwchName, int cchName);HRESULT ( *startCDATA)(ISAXLexicalHandler *This);HRESULT ( *endCDATA)(ISAXLexicalHandler *This);HRESULT ( *comment)(ISAXLexicalHandler *This,  unsigned short *pwchChars, int cchChars);};
struct ISelectionServicesVtbl {HRESULT ( *QueryInterface)(ISelectionServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISelectionServices *This);ULONG ( *Release)(ISelectionServices *This);HRESULT ( *SetSelectionType)(ISelectionServices *This, SELECTION_TYPE eType, ISelectionServicesListener *pIListener);HRESULT ( *GetMarkupContainer)(ISelectionServices *This, IMarkupContainer **ppIContainer);HRESULT ( *AddSegment)(ISelectionServices *This, IMarkupPointer *pIStart, IMarkupPointer *pIEnd, ISegment **ppISegmentAdded);HRESULT ( *AddElementSegment)(ISelectionServices *This, IHTMLElement *pIElement, IElementSegment **ppISegmentAdded);HRESULT ( *RemoveSegment)(ISelectionServices *This, ISegment *pISegment);HRESULT ( *GetSelectionServicesListener)(ISelectionServices *This, ISelectionServicesListener **ppISelectionServicesListener);};
struct IShellExecuteHookAVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellExecuteHookA *This);ULONG ( *Release)(IShellExecuteHookA *This);HRESULT ( *Execute)(IShellExecuteHookA *This, LPSHELLEXECUTEINFO pei);};
struct IShellExecuteHookWVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellExecuteHookW *This);ULONG ( *Release)(IShellExecuteHookW *This);HRESULT ( *Execute)(IShellExecuteHookW *This, LPSHELLEXECUTEINFO pei);};
struct IShellLinkDataListVtbl {HRESULT ( *QueryInterface)(IShellLinkDataList *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellLinkDataList *This);ULONG ( *Release)(IShellLinkDataList *This);HRESULT ( *AddDataBlock)(IShellLinkDataList *This, void *pDataBlock);HRESULT ( *CopyDataBlock)(IShellLinkDataList *This, DWORD dwSig, void **ppDataBlock);HRESULT ( *RemoveDataBlock)(IShellLinkDataList *This, DWORD dwSig);HRESULT ( *GetFlags)(IShellLinkDataList *This, DWORD *pdwFlags);HRESULT ( *SetFlags)(IShellLinkDataList *This, DWORD dwFlags);};
struct ITransProtocolSinkVtbl {HRESULT ( *QueryInterface)(ITransProtocolSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransProtocolSink *This);ULONG ( *Release)(ITransProtocolSink *This);HRESULT ( *QueryBindFlags)(ITransProtocolSink *This, DWORD *pdwResult);};
typedef int ( *LPWSPENUMNETWORKEVENTS)(SOCKET s, HANDLE hEventObject, LPWSANETWORKEVENTS lpNetworkEvents, LPINT lpErrno);
typedef NTSTATUS (*PIO_COMPLETION_ROUTINE)(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID Context);
struct _DOT11_POWER_MGMT_MODE {DOT11_POWER_MODE dot11PowerMode;ULONG uPowerSaveLevel;USHORT usListenInterval;USHORT usAID;BOOL bReceiveDTIMs;};
struct _IMAGE_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;DWORD SizeOfStackReserve;DWORD SizeOfStackCommit;DWORD SizeOfHeapReserve;DWORD SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct _IMAGE_TLS_DIRECTORY64 {ULONGLONG StartAddressOfRawData;ULONGLONG EndAddressOfRawData;PDWORD AddressOfIndex;PIMAGE_TLS_CALLBACK *AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct IAMTimecodeReaderVtbl {HRESULT ( *QueryInterface)(IAMTimecodeReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeReader *This);ULONG ( *Release)(IAMTimecodeReader *This);HRESULT ( *GetTCRMode)(IAMTimecodeReader *This, int Param, int *pValue);HRESULT ( *SetTCRMode)(IAMTimecodeReader *This, int Param, int Value);HRESULT ( *put_VITCLine)(IAMTimecodeReader *This, int Line);HRESULT ( *get_VITCLine)(IAMTimecodeReader *This, int *pLine);HRESULT ( *GetTimecode)(IAMTimecodeReader *This, PTIMECODE_SAMPLE pTimecodeSample);};
struct IDMOWrapperFilterVtbl {HRESULT ( *QueryInterface)(IDMOWrapperFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDMOWrapperFilter *This);ULONG ( *Release)(IDMOWrapperFilter *This);HRESULT ( *Init)(IDMOWrapperFilter *This,  CLSID * clsidDMO,  CLSID * catDMO);};
struct IEnumCATEGORYINFOVtbl {HRESULT ( *QueryInterface)(IEnumCATEGORYINFO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCATEGORYINFO *This);ULONG ( *Release)(IEnumCATEGORYINFO *This);HRESULT ( *Next)(IEnumCATEGORYINFO *This, ULONG celt, CATEGORYINFO *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumCATEGORYINFO *This, ULONG celt);HRESULT ( *Reset)(IEnumCATEGORYINFO *This);HRESULT ( *Clone)(IEnumCATEGORYINFO *This, IEnumCATEGORYINFO **ppenum);};
struct IEnumInputContextVtbl {HRESULT ( *QueryInterface)(IEnumInputContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumInputContext *This);ULONG ( *Release)(IEnumInputContext *This);HRESULT ( *Clone)(IEnumInputContext *This, IEnumInputContext **ppEnum);HRESULT ( *Next)(IEnumInputContext *This, ULONG ulCount, HIMC *rgInputContext, ULONG *pcFetched);HRESULT ( *Reset)(IEnumInputContext *This);HRESULT ( *Skip)(IEnumInputContext *This, ULONG ulCount);};
struct IEnumNotificationVtbl {HRESULT ( *QueryInterface)(IEnumNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNotification *This);ULONG ( *Release)(IEnumNotification *This);HRESULT ( *Next)(IEnumNotification *This, ULONG celt, NOTIFICATIONITEM *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumNotification *This, ULONG celt);HRESULT ( *Reset)(IEnumNotification *This);HRESULT ( *Clone)(IEnumNotification *This, IEnumNotification **ppenum);};
struct IEnumSubscriptionVtbl {HRESULT ( *QueryInterface)(IEnumSubscription *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSubscription *This);ULONG ( *Release)(IEnumSubscription *This);HRESULT ( *Next)(IEnumSubscription *This, ULONG celt, SUBSCRIPTIONCOOKIE *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSubscription *This, ULONG celt);HRESULT ( *Reset)(IEnumSubscription *This);HRESULT ( *Clone)(IEnumSubscription *This, IEnumSubscription **ppenum);HRESULT ( *GetCount)(IEnumSubscription *This, ULONG *pnCount);};
struct IHTMLEditDesignerVtbl {HRESULT ( *QueryInterface)(IHTMLEditDesigner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditDesigner *This);ULONG ( *Release)(IHTMLEditDesigner *This);HRESULT ( *PreHandleEvent)(IHTMLEditDesigner *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *PostHandleEvent)(IHTMLEditDesigner *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *TranslateAcceleratorA)(IHTMLEditDesigner *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *PostEditorEventNotify)(IHTMLEditDesigner *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);};
struct IHTMLEditServicesVtbl {HRESULT ( *QueryInterface)(IHTMLEditServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditServices *This);ULONG ( *Release)(IHTMLEditServices *This);HRESULT ( *AddDesigner)(IHTMLEditServices *This, IHTMLEditDesigner *pIDesigner);HRESULT ( *RemoveDesigner)(IHTMLEditServices *This, IHTMLEditDesigner *pIDesigner);HRESULT ( *GetSelectionServices)(IHTMLEditServices *This, IMarkupContainer *pIContainer, ISelectionServices **ppSelSvc);HRESULT ( *MoveToSelectionAnchor)(IHTMLEditServices *This, IMarkupPointer *pIStartAnchor);HRESULT ( *MoveToSelectionEnd)(IHTMLEditServices *This, IMarkupPointer *pIEndAnchor);HRESULT ( *SelectRange)(IHTMLEditServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd, SELECTION_TYPE eType);};
struct IInternetPriorityVtbl {HRESULT ( *QueryInterface)(IInternetPriority *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetPriority *This);ULONG ( *Release)(IInternetPriority *This);HRESULT ( *SetPriority)(IInternetPriority *This, LONG nPriority);HRESULT ( *GetPriority)(IInternetPriority *This, LONG *pnPriority);};
struct IResourceConsumerVtbl {HRESULT ( *QueryInterface)(IResourceConsumer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceConsumer *This);ULONG ( *Release)(IResourceConsumer *This);HRESULT ( *AcquireResource)(IResourceConsumer *This, LONG idResource);HRESULT ( *ReleaseResource)(IResourceConsumer *This, LONG idResource);};
struct IShellIconOverlayVtbl {HRESULT ( *QueryInterface)(IShellIconOverlay *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIconOverlay *This);ULONG ( *Release)(IShellIconOverlay *This);HRESULT ( *GetOverlayIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIndex);HRESULT ( *GetOverlayIconIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIconIndex);};
struct ISyncMgrEnumItemsVtbl {HRESULT ( *QueryInterface)(ISyncMgrEnumItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncMgrEnumItems *This);ULONG ( *Release)(ISyncMgrEnumItems *This);HRESULT ( *Next)(ISyncMgrEnumItems *This, ULONG celt, LPSYNCMGRITEM rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(ISyncMgrEnumItems *This, ULONG celt);HRESULT ( *Reset)(ISyncMgrEnumItems *This);HRESULT ( *Clone)(ISyncMgrEnumItems *This, ISyncMgrEnumItems **ppenum);};
typedef BOOL ( *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
typedef LRESULT ( *LPFNLRESULTFROMOBJECT)( IID * riid, WPARAM wParam, LPUNKNOWN punk);
typedef HRESULT ( *LPFNOBJECTFROMLRESULT)(LRESULT lResult,  IID * riid, WPARAM wParam, void **ppvObject);
struct _CERT_REVOCATION_PARA {DWORD cbSize;PCCERT_CONTEXT pIssuerCert;DWORD cCertStore;HCERTSTORE *rgCertStore;HCERTSTORE hCrlStore;LPFILETIME pftTimeToUse;};
struct _DEV_BROADCAST_HANDLE {DWORD dbch_size;DWORD dbch_devicetype;DWORD dbch_reserved;DWORD dbch_handle;DWORD dbch_hdevnotify;GUID dbch_eventguid;LONG dbch_nameoffset;BYTE dbch_data[1];};
struct _DOT11_SEND_8021X_PKT {GUID gAdapterId;DOT11_MAC_ADDRESS PeerMacAddress;ULONG uContext;ULONG uBufferLength;UCHAR ucBuffer[1];};
struct _IMAGE_SECTION_HEADER {BYTE Name[8];union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C Misc;DWORD VirtualAddress;DWORD SizeOfRawData;DWORD PointerToRawData;DWORD PointerToRelocations;DWORD PointerToLinenumbers;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD Characteristics;};
struct _RTL_CRITICAL_SECTION {PRTL_CRITICAL_SECTION_DEBUG DebugInfo;LONG LockCount;LONG RecursionCount;HANDLE OwningThread;HANDLE LockSemaphore;DWORD SpinCount;};
struct _WSAServiceClassInfoA {LPGUID lpServiceClassId;LPSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOA lpClassInfos;};
struct tACMDRVSTREAMINSTANCE {DWORD cbStruct;LPWAVEFORMATEX pwfxSrc;LPWAVEFORMATEX pwfxDst;LPWAVEFILTER pwfltr;DWORD dwCallback;DWORD dwInstance;DWORD fdwOpen;DWORD fdwDriver;DWORD dwDriver;HACMSTREAM has;};
struct tagCONTENTRESTRICTION {FULLPROPSPEC prop;WCHAR *pwcsPhrase;LCID lcid;ULONG ulGenerateMethod;};
struct tagDDDEVICEIDENTIFIER {unsigned short szDriver[512];unsigned short szDescription[512];LARGE_INTEGER liDriverVersion;DWORD dwVendorId;DWORD dwDeviceId;DWORD dwSubSysId;DWORD dwRevision;GUID guidDeviceIdentifier;};
struct tagDVD_MenuAttributes {BOOL fCompatibleRegion[8];DVD_VideoAttributes VideoAttributes;BOOL fAudioPresent;DVD_AudioAttributes AudioAttributes;BOOL fSubpicturePresent;DVD_SubpictureAttributes SubpictureAttributes;};
typedef HRESULT ( *FILESAVERESTOREONINF)(HWND hDlg, PCSTR pszTitle, PCSTR pszINF, PCSTR pszSection, PCSTR pszBackupDir, PCSTR pszBaseBackFile, DWORD dwFlags);
struct ICatalogFileInfoVtbl {HRESULT ( *QueryInterface)(ICatalogFileInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatalogFileInfo *This);ULONG ( *Release)(ICatalogFileInfo *This);HRESULT ( *GetCatalogFile)(ICatalogFileInfo *This, LPSTR *ppszCatalogFile);HRESULT ( *GetJavaTrust)(ICatalogFileInfo *This, void **ppJavaTrust);};
struct IConnectionPointVtbl {HRESULT ( *QueryInterface)(IConnectionPoint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPoint *This);ULONG ( *Release)(IConnectionPoint *This);HRESULT ( *GetConnectionInterface)(IConnectionPoint *This, IID *pIID);HRESULT ( *GetConnectionPointContainer)(IConnectionPoint *This, IConnectionPointContainer **ppCPC);HRESULT ( *Advise)(IConnectionPoint *This, IUnknown *pUnkSink, DWORD *pdwCookie);HRESULT ( *Unadvise)(IConnectionPoint *This, DWORD dwCookie);HRESULT ( *EnumConnections)(IConnectionPoint *This, IEnumConnections **ppEnum);};
struct IDBSchemaCommandVtbl {HRESULT ( *QueryInterface)(IDBSchemaCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBSchemaCommand *This);ULONG ( *Release)(IDBSchemaCommand *This);HRESULT ( *GetCommand)(IDBSchemaCommand *This, IUnknown *pUnkOuter,  GUID * rguidSchema, ICommand **ppCommand);HRESULT ( *GetSchemas)(IDBSchemaCommand *This, ULONG *pcSchemas, GUID **prgSchemas);};
struct IEnumConnectionsVtbl {HRESULT ( *QueryInterface)(IEnumConnections *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnections *This);ULONG ( *Release)(IEnumConnections *This);HRESULT ( *Next)(IEnumConnections *This, ULONG cConnections, LPCONNECTDATA rgcd, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnections *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnections *This);HRESULT ( *Clone)(IEnumConnections *This, IEnumConnections **ppEnum);};
struct IEnumExtraSearchVtbl {HRESULT ( *QueryInterface)(IEnumExtraSearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumExtraSearch *This);ULONG ( *Release)(IEnumExtraSearch *This);HRESULT ( *Next)(IEnumExtraSearch *This, ULONG celt, EXTRASEARCH *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumExtraSearch *This, ULONG celt);HRESULT ( *Reset)(IEnumExtraSearch *This);HRESULT ( *Clone)(IEnumExtraSearch *This, IEnumExtraSearch **ppenum);};
struct IEnumPropertyMapVtbl {HRESULT ( *QueryInterface)(IEnumPropertyMap *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPropertyMap *This);ULONG ( *Release)(IEnumPropertyMap *This);HRESULT ( *Next)(IEnumPropertyMap *This, ULONG celt, STATPROPMAP *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumPropertyMap *This, ULONG celt);HRESULT ( *Reset)(IEnumPropertyMap *This);HRESULT ( *Clone)(IEnumPropertyMap *This, IEnumPropertyMap **ppenum);};
struct IEnumSTATPROPBAGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPBAG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPBAG *This);ULONG ( *Release)(IEnumSTATPROPBAG *This);HRESULT ( *Next)(IEnumSTATPROPBAG *This, ULONG celt, STATPROPBAG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPBAG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPBAG *This);HRESULT ( *Clone)(IEnumSTATPROPBAG *This, IEnumSTATPROPBAG **ppenum);};
struct IEnumSTATPROPSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSTG *This);ULONG ( *Release)(IEnumSTATPROPSTG *This);HRESULT ( *Next)(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum);};
struct IHTMLPersistDataVtbl {HRESULT ( *QueryInterface)(IHTMLPersistData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPersistData *This);ULONG ( *Release)(IHTMLPersistData *This);HRESULT ( *save)(IHTMLPersistData *This, IUnknown *pUnk, int lType, VARIANT_BOOL *fContinueBroacast);HRESULT ( *load)(IHTMLPersistData *This, IUnknown *pUnk, int lType, VARIANT_BOOL *fDoDefault);HRESULT ( *queryType)(IHTMLPersistData *This, int lType, VARIANT_BOOL *pfSupportsType);};
struct IInputObjectSiteVtbl {HRESULT ( *QueryInterface)(IInputObjectSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IInputObjectSite *This);ULONG ( *Release)(IInputObjectSite *This);HRESULT ( *OnFocusChangeIS)(IInputObjectSite *This, IUnknown *punkObj, BOOL fSetFocus);};
struct IMLangStringBufAVtbl {HRESULT ( *QueryInterface)(IMLangStringBufA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringBufA *This);ULONG ( *Release)(IMLangStringBufA *This);HRESULT ( *GetStatus)(IMLangStringBufA *This, int *plFlags, int *pcchBuf);HRESULT ( *LockBuf)(IMLangStringBufA *This, int cchOffset, int cchMaxLock, CHAR **ppszBuf, int *pcchBuf);HRESULT ( *UnlockBuf)(IMLangStringBufA *This,  CHAR *pszBuf, int cchOffset, int cchWrite);HRESULT ( *Insert)(IMLangStringBufA *This, int cchOffset, int cchMaxInsert, int *pcchActual);HRESULT ( *Delete)(IMLangStringBufA *This, int cchOffset, int cchDelete);};
struct IMLangStringBufWVtbl {HRESULT ( *QueryInterface)(IMLangStringBufW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringBufW *This);ULONG ( *Release)(IMLangStringBufW *This);HRESULT ( *GetStatus)(IMLangStringBufW *This, int *plFlags, int *pcchBuf);HRESULT ( *LockBuf)(IMLangStringBufW *This, int cchOffset, int cchMaxLock, WCHAR **ppszBuf, int *pcchBuf);HRESULT ( *UnlockBuf)(IMLangStringBufW *This,  WCHAR *pszBuf, int cchOffset, int cchWrite);HRESULT ( *Insert)(IMLangStringBufW *This, int cchOffset, int cchMaxInsert, int *pcchActual);HRESULT ( *Delete)(IMLangStringBufW *This, int cchOffset, int cchDelete);};
struct IOleAdviseHolderVtbl {HRESULT ( *QueryInterface)(IOleAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleAdviseHolder *This);ULONG ( *Release)(IOleAdviseHolder *This);HRESULT ( *Advise)(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnRename)(IOleAdviseHolder *This, IMoniker *pmk);HRESULT ( *SendOnSave)(IOleAdviseHolder *This);HRESULT ( *SendOnClose)(IOleAdviseHolder *This);};
struct IOleCacheControlVtbl {HRESULT ( *QueryInterface)(IOleCacheControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCacheControl *This);ULONG ( *Release)(IOleCacheControl *This);HRESULT ( *OnRun)(IOleCacheControl *This, LPDATAOBJECT pDataObject);HRESULT ( *OnStop)(IOleCacheControl *This);};
struct IPropertyBagEnumVtbl {HRESULT ( *QueryInterface)(IPropertyBagEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBagEnum *This);ULONG ( *Release)(IPropertyBagEnum *This);HRESULT ( *Next)(IPropertyBagEnum *This, ULONG celt, LPPROPERTYBAG2 *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IPropertyBagEnum *This, ULONG celt);HRESULT ( *Reset)(IPropertyBagEnum *This);HRESULT ( *Clone)(IPropertyBagEnum *This, IPropertyBagEnum **ppenum);};
struct ISAXErrorHandlerVtbl {HRESULT ( *QueryInterface)(ISAXErrorHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXErrorHandler *This);ULONG ( *Release)(ISAXErrorHandler *This);HRESULT ( *error)(ISAXErrorHandler *This, ISAXLocator *pLocator,  unsigned short *pwchErrorMessage, HRESULT hrErrorCode);HRESULT ( *fatalError)(ISAXErrorHandler *This, ISAXLocator *pLocator,  unsigned short *pwchErrorMessage, HRESULT hrErrorCode);HRESULT ( *ignorableWarning)(ISAXErrorHandler *This, ISAXLocator *pLocator,  unsigned short *pwchErrorMessage, HRESULT hrErrorCode);};
struct ISeekingPassThruVtbl {HRESULT ( *QueryInterface)(ISeekingPassThru *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISeekingPassThru *This);ULONG ( *Release)(ISeekingPassThru *This);HRESULT ( *Init)(ISeekingPassThru *This, BOOL bSupportRendering, IPin *pPin);};
struct IServiceProviderVtbl {HRESULT ( *QueryInterface)(IServiceProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServiceProvider *This);ULONG ( *Release)(IServiceProvider *This);HRESULT ( *QueryService)(IServiceProvider *This,  GUID * guidService,  IID * riid, void **ppvObject);};
struct IShellNetCrawlerVtbl {HRESULT ( *QueryInterface)(IShellNetCrawler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellNetCrawler *This);ULONG ( *Release)(IShellNetCrawler *This);HRESULT ( *Update)(IShellNetCrawler *This, DWORD dwFlags);};
struct ITransactionJoinVtbl {HRESULT ( *QueryInterface)(ITransactionJoin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionJoin *This);ULONG ( *Release)(ITransactionJoin *This);HRESULT ( *GetOptionsObject)(ITransactionJoin *This, ITransactionOptions **ppOptions);HRESULT ( *JoinTransaction)(ITransactionJoin *This, IUnknown *punkTransactionCoord, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOtherOptions);};
struct IXMLGenericParseVtbl {HRESULT ( *QueryInterface)(IXMLGenericParse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLGenericParse *This);ULONG ( *Release)(IXMLGenericParse *This);HRESULT ( *SetGenericParse)(IXMLGenericParse *This, VARIANT_BOOL fDoGeneric);};
typedef int ( *LPWSPDUPLICATESOCKET)(SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPINT lpErrno);
typedef HRESULT ( *REBOOTCHECKONINSTALL)(HWND, PCSTR, PCSTR, DWORD);
struct _CMINVOKECOMMANDINFO {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;};
struct _CRYPT_PROVIDER_SGNR {DWORD cbStruct;FILETIME sftVerifyAsOf;DWORD csCertChain;struct _CRYPT_PROVIDER_CERT *pasCertChain;DWORD dwSignerType;CMSG_SIGNER_INFO *psSigner;DWORD dwError;DWORD csCounterSigners;struct _CRYPT_PROVIDER_SGNR *pasCounterSigners;PCCERT_CHAIN_CONTEXT pChainContext;};
struct _CTL_FIND_USAGE_PARA {DWORD cbSize;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;PCERT_INFO pSigner;};
struct _LOAD_DLL_DEBUG_INFO {HANDLE hFile;LPVOID lpBaseOfDll;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpImageName;WORD fUnicode;};
struct _MP_ENVELOPE_SEGMENT {REFERENCE_TIME rtStart;REFERENCE_TIME rtEnd;MP_DATA valStart;MP_DATA valEnd;MP_CURVE_TYPE iCurve;MP_FLAGS flags;};
struct _SECURITY_DESCRIPTOR {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;PSID Owner;PSID Group;PACL Sacl;PACL Dacl;};
struct tagNMDATETIMEFORMATA {NMHDR nmhdr;LPCSTR pszFormat;SYSTEMTIME st;LPCSTR pszDisplay;CHAR szDisplay[64];};
struct tagNMDATETIMESTRINGA {NMHDR nmhdr;LPCSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
struct IClassFactoryExVtbl {HRESULT ( *QueryInterface)(IClassFactoryEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactoryEx *This);ULONG ( *Release)(IClassFactoryEx *This);HRESULT ( *CreateInstance)(IClassFactoryEx *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactoryEx *This, BOOL fLock);HRESULT ( *CreateInstanceWithContext)(IClassFactoryEx *This, IUnknown *punkContext, IUnknown *punkOuter,  IID * riid, void **ppv);};
struct ICommDlgBrowserVtbl {HRESULT ( *QueryInterface)(ICommDlgBrowser *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICommDlgBrowser *This);ULONG ( *Release)(ICommDlgBrowser *This);HRESULT ( *OnDefaultCommand)(ICommDlgBrowser *This, struct IShellView *ppshv);HRESULT ( *OnStateChange)(ICommDlgBrowser *This, struct IShellView *ppshv, ULONG uChange);HRESULT ( *IncludeObject)(ICommDlgBrowser *This, struct IShellView *ppshv, LPCITEMIDLIST pidl);};
struct IElementSegmentVtbl {HRESULT ( *QueryInterface)(IElementSegment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementSegment *This);ULONG ( *Release)(IElementSegment *This);HRESULT ( *GetPointers)(IElementSegment *This, IMarkupPointer *pIStart, IMarkupPointer *pIEnd);HRESULT ( *GetElement)(IElementSegment *This, IHTMLElement **ppIElement);HRESULT ( *SetPrimary)(IElementSegment *This, BOOL fPrimary);HRESULT ( *IsPrimary)(IElementSegment *This, BOOL *pfPrimary);};
struct IEnumMediaTypesVtbl {HRESULT ( *QueryInterface)(IEnumMediaTypes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMediaTypes *This);ULONG ( *Release)(IEnumMediaTypes *This);HRESULT ( *Next)(IEnumMediaTypes *This, ULONG cMediaTypes, AM_MEDIA_TYPE **ppMediaTypes, ULONG *pcFetched);HRESULT ( *Skip)(IEnumMediaTypes *This, ULONG cMediaTypes);HRESULT ( *Reset)(IEnumMediaTypes *This);HRESULT ( *Clone)(IEnumMediaTypes *This, IEnumMediaTypes **ppEnum);};
struct IEnumRegFiltersVtbl {HRESULT ( *QueryInterface)(IEnumRegFilters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRegFilters *This);ULONG ( *Release)(IEnumRegFilters *This);HRESULT ( *Next)(IEnumRegFilters *This, ULONG cFilters, REGFILTER **apRegFilter, ULONG *pcFetched);HRESULT ( *Skip)(IEnumRegFilters *This, ULONG cFilters);HRESULT ( *Reset)(IEnumRegFilters *This);HRESULT ( *Clone)(IEnumRegFilters *This, IEnumRegFilters **ppEnum);};
struct IFileViewerSiteVtbl {HRESULT ( *QueryInterface)(IFileViewerSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerSite *This);ULONG ( *Release)(IFileViewerSite *This);HRESULT ( *SetPinnedWindow)(IFileViewerSite *This, HWND hwnd);HRESULT ( *GetPinnedWindow)(IFileViewerSite *This, HWND *phwnd);};
struct IMediaEventSinkVtbl {HRESULT ( *QueryInterface)(IMediaEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaEventSink *This);ULONG ( *Release)(IMediaEventSink *This);HRESULT ( *Notify)(IMediaEventSink *This, int EventCode, LONG_PTR EventParam1, LONG_PTR EventParam2);};
struct IQualityControlVtbl {HRESULT ( *QueryInterface)(IQualityControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQualityControl *This);ULONG ( *Release)(IQualityControl *This);HRESULT ( *Notify)(IQualityControl *This, IBaseFilter *pSelf, Quality q);HRESULT ( *SetSink)(IQualityControl *This, IQualityControl *piqc);};
struct IRecalcPropertyVtbl {HRESULT ( *QueryInterface)(IRecalcProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecalcProperty *This);ULONG ( *Release)(IRecalcProperty *This);HRESULT ( *GetCanonicalProperty)(IRecalcProperty *This, DISPID dispid, IUnknown **ppUnk, DISPID *pdispid);};
struct IRowsetIdentityVtbl {HRESULT ( *QueryInterface)(IRowsetIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetIdentity *This);ULONG ( *Release)(IRowsetIdentity *This);HRESULT ( *IsSameRow)(IRowsetIdentity *This, HROW hThisRow, HROW hThatRow);};
struct ISAXDeclHandlerVtbl {HRESULT ( *QueryInterface)(ISAXDeclHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXDeclHandler *This);ULONG ( *Release)(ISAXDeclHandler *This);HRESULT ( *elementDecl)(ISAXDeclHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchModel, int cchModel);HRESULT ( *attributeDecl)(ISAXDeclHandler *This,  unsigned short *pwchElementName, int cchElementName,  unsigned short *pwchAttributeName, int cchAttributeName,  unsigned short *pwchType, int cchType,  unsigned short *pwchValueDefault, int cchValueDefault,  unsigned short *pwchValue, int cchValue);HRESULT ( *internalEntityDecl)(ISAXDeclHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchValue, int cchValue);HRESULT ( *externalEntityDecl)(ISAXDeclHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchPublicId, int cchPublicId,  unsigned short *pwchSystemId, int cchSystemId);};
typedef BOOL (*LPGET_ISOCH_RESULTS)(USB_TRANSFER, DWORD, LPDWORD, LPDWORD);
struct _ERROR_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;SCODE scode;ULONG ulFlags;LPMAPIERROR lpMAPIError;};
struct _TABLE_NOTIFICATION {ULONG ulTableEvent;HRESULT hResult;SPropValue propIndex;SPropValue propPrior;SRow row;ULONG ulPad;};
union _TRIGGER_TYPE_UNION {DAILY Daily;WEEKLY Weekly;MONTHLYDATE MonthlyDate;MONTHLYDOW MonthlyDOW;};
struct _WSANAMESPACE_INFOA {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPSTR lpszIdentifier;};
struct tagIMEMENUITEMINFOA {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;CHAR szString[80];HBITMAP hbmpItem;};
struct tagIMEMENUITEMINFOW {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;WCHAR szString[80];HBITMAP hbmpItem;};
struct tagVIDEOINFOHEADER2 {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;DWORD dwInterlaceFlags;DWORD dwCopyProtectFlags;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;DWORD dwReserved1;DWORD dwReserved2;BITMAPINFOHEADER bmiHeader;};
typedef BOOL ( *ACMFILTERTAGENUMCB)(HACMDRIVERID hadid, LPACMFILTERTAGDETAILS paftd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATTAGENUMCB)(HACMDRIVERID hadid, LPACMFORMATTAGDETAILS paftd, DWORD dwInstance, DWORD fdwSupport);
typedef HRESULT ( *GETVERSIONFROMFILE)(LPSTR lpszFilename, LPDWORD pdwMSVer, LPDWORD pdwLSVer, BOOL bVersion);
struct IAMClockAdjustVtbl {HRESULT ( *QueryInterface)(IAMClockAdjust *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMClockAdjust *This);ULONG ( *Release)(IAMClockAdjust *This);HRESULT ( *SetClockDelta)(IAMClockAdjust *This, REFERENCE_TIME rtDelta);};
struct IBufferingTimeVtbl {HRESULT ( *QueryInterface)(IBufferingTime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBufferingTime *This);ULONG ( *Release)(IBufferingTime *This);HRESULT ( *GetBufferingTime)(IBufferingTime *This, DWORD *pdwMilliseconds);HRESULT ( *SetBufferingTime)(IBufferingTime *This, DWORD dwMilliseconds);};
struct IDialEventSinkVtbl {HRESULT ( *QueryInterface)(IDialEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDialEventSink *This);ULONG ( *Release)(IDialEventSink *This);HRESULT ( *OnEvent)(IDialEventSink *This, DWORD dwEvent, DWORD dwStatus);};
struct IEnumCifGroupsVtbl {HRESULT ( *QueryInterface)(ICifComponent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICifComponent *This);ULONG ( *Release)(ICifComponent *This);HRESULT ( *Next)(ICifComponent *This, ICifGroup **);HRESULT ( *Reset)(ICifComponent *This);};
struct IEnumFORMATETCVtbl {HRESULT ( *QueryInterface)(IEnumFORMATETC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumFORMATETC *This);ULONG ( *Release)(IEnumFORMATETC *This);HRESULT ( *Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumFORMATETC *This, ULONG celt);HRESULT ( *Reset)(IEnumFORMATETC *This);HRESULT ( *Clone)(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);};
struct IEnumSyncItemsVtbl {HRESULT ( *QueryInterface)(IEnumSyncItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSyncItems *This);ULONG ( *Release)(IEnumSyncItems *This);HRESULT ( *Next)(IEnumSyncItems *This, ULONG celt, LPSYNC_HANDLER_ITEM_INFO rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSyncItems *This, ULONG celt);HRESULT ( *Reset)(IEnumSyncItems *This);HRESULT ( *Clone)(IEnumSyncItems *This, IEnumSyncItems **ppEnumSyncItems);};
struct IHTMLChangeLogVtbl {HRESULT ( *QueryInterface)(IHTMLChangeLog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLChangeLog *This);ULONG ( *Release)(IHTMLChangeLog *This);HRESULT ( *GetNextChange)(IHTMLChangeLog *This, BYTE *pbBuffer, int nBufferSize, int *pnRecordLength);};
struct IRTCUserSearchVtbl {HRESULT ( *QueryInterface)(IRTCUserSearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCUserSearch *This);ULONG ( *Release)(IRTCUserSearch *This);HRESULT ( *CreateQuery)(IRTCUserSearch *This, IRTCUserSearchQuery **ppQuery);HRESULT ( *ExecuteSearch)(IRTCUserSearch *This, IRTCUserSearchQuery *pQuery, IRTCProfile *pProfile, LONG_PTR lCookie);};
struct IRpcStubBufferVtbl {HRESULT ( *QueryInterface)(IRpcStubBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcStubBuffer *This);ULONG ( *Release)(IRpcStubBuffer *This);HRESULT ( *Connect)(IRpcStubBuffer *This, IUnknown *pUnkServer);void ( *Disconnect)(IRpcStubBuffer *This);HRESULT ( *Invoke)(IRpcStubBuffer *This, RPCOLEMESSAGE *prpcmsg, IRpcChannelBuffer *pRpcChannelBuffer);IRpcStubBuffer *( *IsIIDSupported)(IRpcStubBuffer *This,  IID * riid);ULONG ( *CountRefs)(IRpcStubBuffer *This);HRESULT ( *DebugServerQueryInterface)(IRpcStubBuffer *This, void **ppv);void ( *DebugServerRelease)(IRpcStubBuffer *This, void *pv);};
struct ISAXAttributesVtbl {HRESULT ( *QueryInterface)(ISAXAttributes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXAttributes *This);ULONG ( *Release)(ISAXAttributes *This);HRESULT ( *getLength)(ISAXAttributes *This, int *pnLength);HRESULT ( *getURI)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchUri, int *pcchUri);HRESULT ( *getLocalName)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchLocalName, int *pcchLocalName);HRESULT ( *getQName)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchQName, int *pcchQName);HRESULT ( *getName)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchUri, int *pcchUri,  unsigned short **ppwchLocalName, int *pcchLocalName,  unsigned short **ppwchQName, int *pcchQName);HRESULT ( *getIndexFromName)(ISAXAttributes *This,  unsigned short *pwchUri, int cchUri,  unsigned short *pwchLocalName, int cchLocalName, int *pnIndex);HRESULT ( *getIndexFromQName)(ISAXAttributes *This,  unsigned short *pwchQName, int cchQName, int *pnIndex);HRESULT ( *getType)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchType, int *pcchType);HRESULT ( *getTypeFromName)(ISAXAttributes *This,  unsigned short *pwchUri, int cchUri,  unsigned short *pwchLocalName, int cchLocalName,  unsigned short **ppwchType, int *pcchType);HRESULT ( *getTypeFromQName)(ISAXAttributes *This,  unsigned short *pwchQName, int cchQName,  unsigned short **ppwchType, int *pcchType);HRESULT ( *getValue)(ISAXAttributes *This, int nIndex,  unsigned short **ppwchValue, int *pcchValue);HRESULT ( *getValueFromName)(ISAXAttributes *This,  unsigned short *pwchUri, int cchUri,  unsigned short *pwchLocalName, int cchLocalName,  unsigned short **ppwchValue, int *pcchValue);HRESULT ( *getValueFromQName)(ISAXAttributes *This,  unsigned short *pwchQName, int cchQName,  unsigned short **ppwchValue, int *pcchValue);};
struct ISAXDTDHandlerVtbl {HRESULT ( *QueryInterface)(ISAXDTDHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXDTDHandler *This);ULONG ( *Release)(ISAXDTDHandler *This);HRESULT ( *notationDecl)(ISAXDTDHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchPublicId, int cchPublicId,  unsigned short *pwchSystemId, int cchSystemId);HRESULT ( *unparsedEntityDecl)(ISAXDTDHandler *This,  unsigned short *pwchName, int cchName,  unsigned short *pwchPublicId, int cchPublicId,  unsigned short *pwchSystemId, int cchSystemId,  unsigned short *pwchNotationName, int cchNotationName);};
struct ISourcesRowsetVtbl {HRESULT ( *QueryInterface)(ISourcesRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISourcesRowset *This);ULONG ( *Release)(ISourcesRowset *This);HRESULT ( *GetSourcesRowset)(ISourcesRowset *This, IUnknown *pUnkOuter,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgProperties, IUnknown **ppSourcesRowset);};
typedef HRESULT ( *LPCQADDPAGESPROC_A)(LPARAM lParam,  CLSID * clsidForm, LPCQPAGE_A pPage);
typedef HRESULT ( *LPCQADDPAGESPROC_W)(LPARAM lParam,  CLSID * clsidForm, LPCQPAGE_W pPage);
typedef HRESULT ( *LPFNGETCLASSOBJECT)( CLSID *,  IID *, LPVOID *);
typedef BOOL (*LPSET_FRAME_LENGTH)(USB_HANDLE, HANDLE, USHORT);
typedef LPVOID ( *PFN_HeapAllocTrace)(HANDLE hHeap, DWORD dwFlags, DWORD dwBytes, DWORD dwLineNum, PCHAR szFileName);
typedef int ( *SSLAUTHREQUESTFUNC)(DWORD dwType, LPVOID pvArg, DWORD dwIssuerCount, LPBLOB pIssuerList, DWORD dwFlags, LPDWORD pdwChainLen, LPBLOB *ppCertChain);
typedef int ( *SSLKEYEXCHANGEFUNC)(DWORD dwType, LPVOID pvArg, LPBYTE pSource, DWORD dwSourceLen, DWORD dwFlags, LPBYTE pDest, LPDWORD pdwDestLen);
struct _CARD_WINDOW_PARMS {CARD_SOCKET_HANDLE hSocket;UINT16 fAttributes;UINT32 uWindowSize;UINT8 fAccessSpeed;};
struct _CERT_REQUEST_INFO {DWORD dwVersion;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _CMC_RESPONSE_INFO {DWORD cTaggedAttribute;PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;DWORD cTaggedContentInfo;PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;DWORD cTaggedOtherMsg;PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;};
struct _DDVIDEOPORTSTATUS {DWORD dwSize;BOOL bInUse;DWORD dwFlags;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;ULONG_PTR dwReserved2;ULONG_PTR dwReserved3;};
struct _MIDL_SERVER_INFO_ {PMIDL_STUB_DESC pStubDesc; SERVER_ROUTINE *DispatchTable;PFORMAT_STRING ProcString; unsigned short *FmtStringOffset; STUB_THUNK *ThunkTable;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString; unsigned short *LocalFmtStringOffset;};
struct _USB_CONFIGURATION { DWORD dwCount; USB_CONFIGURATION_DESCRIPTOR Descriptor; LPCVOID lpvExtended; DWORD dwNumInterfaces; LPCUSB_INTERFACE lpInterfaces;};
struct _WSAPROTOCOL_INFOA {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;CHAR szProtocol[256];};
struct _WSAPROTOCOL_INFOW {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;WCHAR szProtocol[256];};
struct tagDBROWWATCHRANGE {HWATCHREGION hRegion;DBROWCHANGEKIND eChangeKind;HROW hRow;DBCOUNTITEM iRow;};
struct tagFETCH_BODY_PART {DWORD dwMsgSeqNum;LPSTR pszBodyTag;DWORD dwTotalBytes;DWORD dwSizeOfData;DWORD dwOffset;BOOL fDone;LPSTR pszData;LPARAM lpFetchCookie1;LPARAM lpFetchCookie2;};
struct tagIMECHARPOSITION {DWORD dwSize;DWORD dwCharPos;POINT pt;UINT cLineHeight;RECT rcDocument;};
struct tagInvalidPassType {LPSTR lpszRealm;LPSTR lpszUsername;LPSTR lpszPassword;LPSTR lpszHost;ULONG ulMaxField;BOOL fIsProxy;AuthType eAuthType;};
struct tagVIDEOINFOHEADER {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;BITMAPINFOHEADER bmiHeader;};
struct IClassFactoryVtbl {HRESULT ( *QueryInterface)(IClassFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory *This);ULONG ( *Release)(IClassFactory *This);HRESULT ( *CreateInstance)(IClassFactory *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory *This, BOOL fLock);};
struct IDXBaseObjectVtbl {HRESULT ( *QueryInterface)(IDXBaseObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXBaseObject *This);ULONG ( *Release)(IDXBaseObject *This);HRESULT ( *GetGenerationId)(IDXBaseObject *This, ULONG *pID);HRESULT ( *IncrementGenerationId)(IDXBaseObject *This, BOOL bRefresh);HRESULT ( *GetObjectSize)(IDXBaseObject *This, ULONG *pcbSize);};
struct IDithererImplVtbl {HRESULT ( *QueryInterface)(IDithererImpl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDithererImpl *This);ULONG ( *Release)(IDithererImpl *This);HRESULT ( *SetDestColorTable)(IDithererImpl *This, ULONG nColors,  RGBQUAD *prgbColors);HRESULT ( *SetEventSink)(IDithererImpl *This, IImageDecodeEventSink *pEventSink);};
struct IEnumCifModesVtbl {HRESULT ( *QueryInterface)(ICifComponent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICifComponent *This);ULONG ( *Release)(ICifComponent *This);HRESULT ( *Next)(ICifComponent *This, ICifMode **);HRESULT ( *Reset)(ICifComponent *This);};
struct IEnumCodePageVtbl {HRESULT ( *QueryInterface)(IEnumCodePage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCodePage *This);ULONG ( *Release)(IEnumCodePage *This);HRESULT ( *Clone)(IEnumCodePage *This, IEnumCodePage **ppEnum);HRESULT ( *Next)(IEnumCodePage *This, ULONG celt, PMIMECPINFO rgelt, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumCodePage *This);HRESULT ( *Skip)(IEnumCodePage *This, ULONG celt);};
struct IEnumSTATDATAVtbl {HRESULT ( *QueryInterface)(IEnumSTATDATA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATDATA *This);ULONG ( *Release)(IEnumSTATDATA *This);HRESULT ( *Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATDATA *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATDATA *This);HRESULT ( *Clone)(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);};
struct IGraphVersionVtbl {HRESULT ( *QueryInterface)(IGraphVersion *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGraphVersion *This);ULONG ( *Release)(IGraphVersion *This);HRESULT ( *QueryVersion)(IGraphVersion *This, LONG *pVersion);};
struct IObjectSafetyVtbl {HRESULT ( *QueryInterface)(IObjectSafety *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectSafety *This);ULONG ( *Release)(IObjectSafety *This);HRESULT ( *GetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions);HRESULT ( *SetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions);};
struct IParentRowsetVtbl {HRESULT ( *QueryInterface)(IParentRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParentRowset *This);ULONG ( *Release)(IParentRowset *This);HRESULT ( *GetChildRowset)(IParentRowset *This, IUnknown *pUnkOuter, DBORDINAL iOrdinal,  IID * riid, IUnknown **ppRowset);};
struct IRunnableTaskVtbl {HRESULT ( *QueryInterface)(IRunnableTask *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IRunnableTask *This);ULONG ( *Release)(IRunnableTask *This);HRESULT ( *Run)(IRunnableTask *This);HRESULT ( *Kill)(IRunnableTask *This, BOOL fWait);HRESULT ( *Suspend)(IRunnableTask *This);HRESULT ( *Resume)(IRunnableTask *This);ULONG ( *IsRunning)(IRunnableTask *This);};
struct ITimerServiceVtbl {HRESULT ( *QueryInterface)(ITimerService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITimerService *This);ULONG ( *Release)(ITimerService *This);HRESULT ( *CreateTimer)(ITimerService *This, ITimer *pReferenceTimer, ITimer **ppNewTimer);HRESULT ( *GetNamedTimer)(ITimerService *This,  GUID * rguidName, ITimer **ppTimer);HRESULT ( *SetNamedTimerReference)(ITimerService *This,  GUID * rguidName, ITimer *pReferenceTimer);};
typedef DWORD ( *LPCLIPPERCALLBACK)(LPDIRECTDRAWCLIPPER lpDDClipper, HWND hWnd, DWORD code, LPVOID lpContext);
typedef BOOL ( *LPDDENUMCALLBACKA)(GUID *, LPSTR, LPSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKA)(LPGUID, LPCSTR, LPCSTR, LPVOID);
typedef STATUS (*REQUESTSOCKETMASK)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE, UINT16);
typedef SCODE  WABALLOCATEBUFFER(LPWABOBJECT lpWABObject, ULONG cbSize, LPVOID *lppBuffer);
struct _CARD_TUPLE_PARMS {CARD_SOCKET_HANDLE hSocket;UINT16 fAttributes;UINT8 uDesiredTuple;UINT8 uReserved;UINT16 fFlags;UINT32 uLinkOffset;UINT32 uCISOffset;UINT8 uTupleCode;UINT8 uTupleLink;};
struct _DDOPTSURFACEDESC {DWORD dwSize;DWORD dwFlags;DDSCAPS2 ddSCaps;DDOSCAPS ddOSCaps;GUID guid;DWORD dwCompressionRatio;};
struct _IMAGE_OS2_HEADER {WORD ne_magic;CHAR ne_ver;CHAR ne_rev;WORD ne_enttab;WORD ne_cbenttab;LONG ne_crc;WORD ne_flags;WORD ne_autodata;WORD ne_heap;WORD ne_stack;LONG ne_csip;LONG ne_sssp;WORD ne_cseg;WORD ne_cmod;WORD ne_cbnrestab;WORD ne_segtab;WORD ne_rsrctab;WORD ne_restab;WORD ne_modtab;WORD ne_imptab;LONG ne_nrestab;WORD ne_cmovent;WORD ne_align;WORD ne_cres;BYTE ne_exetyp;BYTE ne_flagsothers;WORD ne_pretthunks;WORD ne_psegrefbytes;WORD ne_swaparea;WORD ne_expver;};
struct _NDIS_TAPI_GET_ID {ULONG ulRequestID;HDRV_LINE hdLine;ULONG ulAddressID;HDRV_CALL hdCall;ULONG ulSelect;ULONG ulDeviceClassSize;ULONG ulDeviceClassOffset;VAR_STRING DeviceID;};
struct tagHTTPMEMBERINFO {LPSTR pszHref;BOOL fIsFolder;LPSTR pszDisplayName;BOOL fHasSubs;BOOL fNoSubs;DWORD dwUnreadCount;DWORD dwVisibleCount;HTTPMAILSPECIALFOLDER tySpecial;BOOL fRead;BOOL fHasAttachment;LPSTR pszTo;LPSTR pszFrom;LPSTR pszSubject;LPSTR pszDate;DWORD dwContentLength;};
struct tagNEWTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagSTATPROPSETSTG {FMTID fmtid;CLSID clsid;DWORD grfFlags;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD dwOSVersion;};
struct DRIVER_VER_INFO_ {DWORD cbStruct;DWORD dwReserved1;DWORD dwReserved2;DWORD dwPlatform;DWORD dwVersion;WCHAR wszVersion[260];WCHAR wszSignedBy[260];PCCERT_CONTEXT pcSignerCertContext;DRIVER_VER_MAJORMINOR sOSVersionLow;DRIVER_VER_MAJORMINOR sOSVersionHigh;};
struct IEnumOLEVERBVtbl {HRESULT ( *QueryInterface)(IEnumOLEVERB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOLEVERB *This);ULONG ( *Release)(IEnumOLEVERB *This);HRESULT ( *Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumOLEVERB *This, ULONG celt);HRESULT ( *Reset)(IEnumOLEVERB *This);HRESULT ( *Clone)(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);};
struct IEnumRfc1766Vtbl {HRESULT ( *QueryInterface)(IEnumRfc1766 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRfc1766 *This);ULONG ( *Release)(IEnumRfc1766 *This);HRESULT ( *Clone)(IEnumRfc1766 *This, IEnumRfc1766 **ppEnum);HRESULT ( *Next)(IEnumRfc1766 *This, ULONG celt, PRFC1766INFO rgelt, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumRfc1766 *This);HRESULT ( *Skip)(IEnumRfc1766 *This, ULONG celt);};
struct IEnumSTATSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATSTG *This);ULONG ( *Release)(IEnumSTATSTG *This);HRESULT ( *Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATSTG *This);HRESULT ( *Clone)(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);};
struct IEnumVARIANTVtbl {HRESULT ( *QueryInterface)(IEnumVARIANT *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumVARIANT *This);ULONG ( *Release)(IEnumVARIANT *This);HRESULT ( *Next)(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);HRESULT ( *Skip)(IEnumVARIANT *This, ULONG celt);HRESULT ( *Reset)(IEnumVARIANT *This);HRESULT ( *Clone)(IEnumVARIANT *This, IEnumVARIANT **ppEnum);};
struct IOleDocumentVtbl {HRESULT ( *QueryInterface)(IOleDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocument *This);ULONG ( *Release)(IOleDocument *This);HRESULT ( *CreateView)(IOleDocument *This, IOleInPlaceSite *pIPSite, IStream *pstm, DWORD dwReserved, IOleDocumentView **ppView);HRESULT ( *GetDocMiscStatus)(IOleDocument *This, DWORD *pdwStatus);HRESULT ( *EnumViews)(IOleDocument *This, IEnumOleDocumentViews **ppEnum, IOleDocumentView **ppView);};
struct ITableRenameVtbl {HRESULT ( *QueryInterface)(ITableRename *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableRename *This);ULONG ( *Release)(ITableRename *This);HRESULT ( *RenameColumn)(ITableRename *This, DBID *pTableId, DBID *pOldColumnId, DBID *pNewColumnId);HRESULT ( *RenameTable)(ITableRename *This, DBID *pOldTableId, DBID *pOldIndexId, DBID *pNewTableId, DBID *pNewIndexId);};
struct ITaskbarListVtbl {HRESULT ( *QueryInterface)(ITaskbarList *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ITaskbarList *This);ULONG ( *Release)(ITaskbarList *This);HRESULT ( *HrInit)(ITaskbarList *This);HRESULT ( *AddTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *DeleteTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *ActivateTab)(ITaskbarList *This, HWND hwnd);HRESULT ( *SetActiveAlt)(ITaskbarList *This, HWND hwnd);};
struct IVersionHostVtbl {HRESULT ( *QueryInterface)(IVersionHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVersionHost *This);ULONG ( *Release)(IVersionHost *This);HRESULT ( *QueryUseLocalVersionVector)(IVersionHost *This, BOOL *fUseLocal);HRESULT ( *QueryVersionVector)(IVersionHost *This, IVersionVector *pVersion);};
struct IViewChapterVtbl {HRESULT ( *QueryInterface)(IViewChapter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewChapter *This);ULONG ( *Release)(IViewChapter *This);HRESULT ( *GetSpecification)(IViewChapter *This,  IID * riid, IUnknown **ppRowset);HRESULT ( *OpenViewChapter)(IViewChapter *This, HCHAPTER hSource, HCHAPTER *phViewChapter);};
struct NDIS_BPC_CONNECT {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;ULONG ulConnectPriority;ULONG ulDisconnectPriority;BOOLEAN fImmediate;ULONG ulcbAddress;GUID guidProvider;ULONG rgulAddress[1];};
typedef DWORD ( *PFN_DIAL_HANDLER)(HWND, LPCSTR, DWORD, LPDWORD);
typedef HRESULT  SHOWHTMLDIALOGFN(HWND hwndParent, IMoniker *pmk, VARIANT *pvarArgIn, WCHAR *pchOptions, VARIANT *pvArgOut);
typedef int ( *SSLSIGNATUREFUNC)(DWORD dwType, LPVOID pvArg, LPBYTE pSource, DWORD dwSourceLen, DWORD dwFlags, LPBYTE pDest, LPDWORD pdwDestLen);
struct _CARD_DATA_PARMS {CARD_SOCKET_HANDLE hSocket;UINT16 fAttributes;UINT8 uDesiredTuple;UINT8 uTupleOffset;UINT16 fFlags;UINT32 uLinkOffset;UINT32 uCISOffset;UINT16 uBufLen;UINT16 uDataLen;};
struct _CMS_DH_KEY_INFO {DWORD dwVersion;ALG_ID Algid;LPSTR pszContentEncObjId;CRYPT_DATA_BLOB PubInfo;void *pReserved;};
struct _DDVIDEOPORTINFO {DWORD dwSize;DWORD dwOriginX;DWORD dwOriginY;DWORD dwVPFlags;RECT rCrop;DWORD dwPrescaleWidth;DWORD dwPrescaleHeight;LPDDPIXELFORMAT lpddpfInputFormat;LPDDPIXELFORMAT lpddpfVBIInputFormat;LPDDPIXELFORMAT lpddpfVBIOutputFormat;DWORD dwVBIHeight;ULONG_PTR dwReserved1;ULONG_PTR dwReserved2;};
struct _NDIS_802_11_KEY {ULONG Length;ULONG KeyIndex;ULONG KeyLength;NDIS_802_11_MAC_ADDRESS BSSID;NDIS_802_11_KEY_RSC KeyRSC;UCHAR KeyMaterial[1];};
struct _NDIS_TAPI_EVENT {HTAPI_LINE htLine;HTAPI_CALL htCall;ULONG ulMsg;ULONG_PTR ulParam1;ULONG_PTR ulParam2;ULONG_PTR ulParam3;};
struct _avistreamheader {FOURCC fcc;DWORD cb;FOURCC fccType;FOURCC fccHandler;DWORD dwFlags;WORD wPriority;WORD wLanguage;DWORD dwInitialFrames;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E rcFrame;};
struct tagENUMHEADERROW {HHEADERROW hRow;LPSTR pszHeader;LPSTR pszData;ULONG cchData;DWORD dwReserved;};
struct tagMODULEENTRY32 {DWORD dwSize;DWORD th32ModuleID;DWORD th32ProcessID;DWORD GlblcntUsage;DWORD ProccntUsage;BYTE *modBaseAddr;DWORD modBaseSize;HMODULE hModule;TCHAR szModule[260];TCHAR szExePath[260];DWORD dwFlags;};
struct tagNMHDDISPINFOA {NMHDR hdr;int iItem;UINT mask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
typedef STATUS (*ACCESSCONFIGREG)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE, UINT8, UINT8, UINT8 *);
typedef BOOL ( *ACMFILTERENUMCB)(HACMDRIVERID hadid, LPACMFILTERDETAILS pafd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATENUMCB)(HACMDRIVERID hadid, LPACMFORMATDETAILS pafd, DWORD dwInstance, DWORD fdwSupport);
typedef STATUS (*CLIENT_CALLBACK)(CARD_EVENT, CARD_SOCKET_HANDLE, PCARD_EVENT_PARMS);
typedef HRESULT ( *FILESAVERESTORE)(HWND hDlg, LPSTR lpFileList, LPSTR lpDir, LPSTR lpBaseName, DWORD dwFlags);
struct IAMCrossbarVtbl {HRESULT ( *QueryInterface)(IAMCrossbar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCrossbar *This);ULONG ( *Release)(IAMCrossbar *This);HRESULT ( *get_PinCounts)(IAMCrossbar *This, int *OutputPinCount, int *InputPinCount);HRESULT ( *CanRoute)(IAMCrossbar *This, int OutputPinIndex, int InputPinIndex);HRESULT ( *Route)(IAMCrossbar *This, int OutputPinIndex, int InputPinIndex);HRESULT ( *get_IsRoutedTo)(IAMCrossbar *This, int OutputPinIndex, int *InputPinIndex);HRESULT ( *get_CrossbarPinInfo)(IAMCrossbar *This, BOOL IsInputPin, int PinIndex, int *PinIndexRelated, int *PhysicalType);};
struct IEnumHLITEMVtbl {HRESULT ( *QueryInterface)(IEnumHLITEM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumHLITEM *This);ULONG ( *Release)(IEnumHLITEM *This);HRESULT ( *Next)(IEnumHLITEM *This, ULONG celt, HLITEM *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumHLITEM *This, ULONG celt);HRESULT ( *Reset)(IEnumHLITEM *This);HRESULT ( *Clone)(IEnumHLITEM *This, IEnumHLITEM **ppienumhlitem);};
struct IEnumIDListVtbl {HRESULT ( *QueryInterface)(IEnumIDList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumIDList *This);ULONG ( *Release)(IEnumIDList *This);HRESULT ( *Next)(IEnumIDList *This, ULONG celt, LPITEMIDLIST *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumIDList *This, ULONG celt);HRESULT ( *Reset)(IEnumIDList *This);HRESULT ( *Clone)(IEnumIDList *This, IEnumIDList **ppenum);};
struct IEnumScriptVtbl {HRESULT ( *QueryInterface)(IEnumScript *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumScript *This);ULONG ( *Release)(IEnumScript *This);HRESULT ( *Clone)(IEnumScript *This, IEnumScript **ppEnum);HRESULT ( *Next)(IEnumScript *This, ULONG celt, PSCRIPTINFO rgelt, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumScript *This);HRESULT ( *Skip)(IEnumScript *This, ULONG celt);};
struct IHeaderEnumVtbl {HRESULT ( *QueryInterface)(IHeaderEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHeaderEnum *This);ULONG ( *Release)(IHeaderEnum *This);HRESULT ( *Next)(IHeaderEnum *This, ULONG celt, OBEX_HEADER **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IHeaderEnum *This, ULONG celt);HRESULT ( *Reset)(IHeaderEnum *This);HRESULT ( *Clone)(IHeaderEnum *This, IHeaderEnum **ppenum);};
struct IRowsetKeysVtbl {HRESULT ( *QueryInterface)(IRowsetKeys *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetKeys *This);ULONG ( *Release)(IRowsetKeys *This);HRESULT ( *ListKeys)(IRowsetKeys *This, DBORDINAL *pcColumns, DBORDINAL **prgColumns);};
struct IRowsetViewVtbl {HRESULT ( *QueryInterface)(IRowsetView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetView *This);ULONG ( *Release)(IRowsetView *This);HRESULT ( *CreateView)(IRowsetView *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppView);HRESULT ( *GetView)(IRowsetView *This, HCHAPTER hChapter,  IID * riid, HCHAPTER *phChapterSource, IUnknown **ppView);};
struct IRpcOptionsVtbl {HRESULT ( *QueryInterface)(IRpcOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcOptions *This);ULONG ( *Release)(IRpcOptions *This);HRESULT ( *Set)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG dwValue);HRESULT ( *Query)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG *pdwValue);};
struct ISAXLocatorVtbl {HRESULT ( *QueryInterface)(ISAXLocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXLocator *This);ULONG ( *Release)(ISAXLocator *This);HRESULT ( *getColumnNumber)(ISAXLocator *This, int *pnColumn);HRESULT ( *getLineNumber)(ISAXLocator *This, int *pnLine);HRESULT ( *getPublicId)(ISAXLocator *This,  unsigned short **ppwchPublicId);HRESULT ( *getSystemId)(ISAXLocator *This,  unsigned short **ppwchSystemId);};
typedef int ( *LPCONDITIONPROC)(LPWSABUF lpCallerId, LPWSABUF lpCallerData, LPQOS lpSQOS, LPQOS lpGQOS, LPWSABUF lpCalleeId, LPWSABUF lpCalleeData, GROUP *g, DWORD_PTR dwCallbackData);
typedef UINT ( *LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef BOOLEAN QUERYCLIENTCERT(PLDAP Connection, HCERTSTORE hCertStore, DWORD *pcCreds);
typedef SCODE  WABALLOCATEMORE(LPWABOBJECT lpWABObject, ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
struct _CENOTIFICATION {DWORD dwSize;DWORD dwParam;UINT uType;CEGUID guid;CEOID oid;CEOID oidParent;};
struct _FILECHANGEINFO {DWORD cbSize;LONG wEventId;ULONG uFlags;DWORD dwItem1;DWORD dwItem2;DWORD dwAttributes;FILETIME ftModified;ULONG nFileSize;};
struct _WABIMPORTPARAM {ULONG cbSize;LPADRBOOK lpAdrBook;HWND hWnd;ULONG ulFlags;LPSTR lpszFileName;};
struct __BUSDATA_PARMS {DWORD Function;ULONG ReturnCode;BUS_DATA_TYPE BusDataType;ULONG BusNumber;ULONG SlotNumber;PVOID Buffer;ULONG Offset;ULONG Length;};
struct tagINETCSETINFO {CHAR szName[128];HCHARSET hCharset;CODEPAGEID cpiWindows;CODEPAGEID cpiInternet;DWORD dwReserved1;};
struct tagMIDIOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMIDIOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMIMEPROPINFO {DWORD dwMask;HCHARSET hCharset;ENCODINGTYPE ietEncoding;DWORD dwRowNumber;DWORD dwFlags;DWORD dwPropId;DWORD cValues;VARTYPE vtDefault;VARTYPE vtCurrent;};
struct tagSMTPMESSAGE2 {SMTPMESSAGE smtpMsg;LPSTR pszDSNENVID;DSNRET dsnRet;DWORD dwReserved;DWORD dwReserved2;};
struct tagSMTPRESPONSE {SMTPCOMMAND command;BOOL fDone;IXPRESULT rIxpResult;ISMTPTransport *pTransport;tagSMTPRESPONSE___F2E271575EB3F09F226A3079A92CFBD3 __anonymous0;};
typedef HRESULT ( *ADVINSTALLFILE)(HWND hwnd, LPCSTR lpszSourceDir, LPCSTR lpszSourceFile, LPCSTR lpszDestDir, LPCSTR lpszDestFile, DWORD dwFlags, DWORD dwReserved);
typedef BOOL (*CACHE_OPERATOR)(INTERNET_CACHE_ENTRY_INFO *pcei, PDWORD pcbcei, PVOID pOpData);
struct ICSSFilterVtbl {HRESULT ( *QueryInterface)(ICSSFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICSSFilter *This);ULONG ( *Release)(ICSSFilter *This);HRESULT ( *SetSite)(ICSSFilter *This, ICSSFilterSite *pSink);HRESULT ( *OnAmbientPropertyChange)(ICSSFilter *This, LONG dispid);};
struct IDX2DDebugVtbl {HRESULT ( *QueryInterface)(IDX2DDebug *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDX2DDebug *This);ULONG ( *Release)(IDX2DDebug *This);HRESULT ( *SetDC)(IDX2DDebug *This, HDC hDC);HRESULT ( *GetDC)(IDX2DDebug *This, HDC *phDC);};
struct IInboxSinkVtbl {HRESULT ( *QueryInterface)(IInboxSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInboxSink *This);ULONG ( *Release)(IInboxSink *This);HRESULT ( *Notify)(IInboxSink *This, INBOX_EVENT_DATA *pInboxData);};
struct IMallocSpyVtbl {HRESULT ( *QueryInterface)(IMallocSpy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMallocSpy *This);ULONG ( *Release)(IMallocSpy *This);ULONG ( *PreAlloc)(IMallocSpy *This, ULONG cbRequest);void *( *PostAlloc)(IMallocSpy *This, void *pActual);void *( *PreFree)(IMallocSpy *This, void *pRequest, BOOL fSpyed);void ( *PostFree)(IMallocSpy *This, BOOL fSpyed);ULONG ( *PreRealloc)(IMallocSpy *This, void *pRequest, ULONG cbRequest, void **ppNewRequest, BOOL fSpyed);void *( *PostRealloc)(IMallocSpy *This, void *pActual, BOOL fSpyed);void *( *PreGetSize)(IMallocSpy *This, void *pRequest, BOOL fSpyed);ULONG ( *PostGetSize)(IMallocSpy *This, ULONG cbActual, BOOL fSpyed);void *( *PreDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed);int ( *PostDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed, int fActual);void ( *PreHeapMinimize)(IMallocSpy *This);void ( *PostHeapMinimize)(IMallocSpy *This);};
struct ISurrogateVtbl {HRESULT ( *QueryInterface)(ISurrogate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISurrogate *This);ULONG ( *Release)(ISurrogate *This);HRESULT ( *LoadDllServer)(ISurrogate *This,  CLSID * Clsid);HRESULT ( *FreeSurrogate)(ISurrogate *This);};
struct ITimerSinkVtbl {HRESULT ( *QueryInterface)(ITimerSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITimerSink *This);ULONG ( *Release)(ITimerSink *This);HRESULT ( *OnTimer)(ITimerSink *This, VARIANT vtimeAdvise);};
typedef SCARDHANDLE ( *LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID);
struct _DOT11_WPA_TSC {ULONG uReserved;DOT11_OFFLOAD_TYPE dot11OffloadType;HANDLE hOffload;DOT11_IV48_COUNTER dot11IV48Counter;};
struct _USB_INTERFACE { DWORD dwCount; USB_INTERFACE_DESCRIPTOR Descriptor; LPCVOID lpvExtended; LPCUSB_ENDPOINT lpEndpoints;};
struct _wireSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;SAFEARRAYUNION uArrayStructs;SAFEARRAYBOUND rgsabound[1];};
struct tagCONTROLINFO {ULONG cb;HACCEL hAccel;USHORT cAccel;DWORD dwFlags;};
struct tagDIBSECTION2 {BITMAP dsBm;BITMAPINFOHEADER dsBmih;DWORD dsBitfields[3];HANDLE dshSection;DWORD dsOffset;DWORD dsAlphaBitfield;};
struct tagHTTPMAILGET {BOOL fTotalKnown;DWORD cbIncrement;DWORD cbCurrent;DWORD cbTotal;LPVOID pvBody;LPSTR pszContentType;};
struct tagLVFINDINFOA {UINT flags;LPCSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
struct tagMIDIINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwSupport;};
struct tagMIDIINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwSupport;};
struct tagNMTREEVIEWA {NMHDR hdr;UINT action;TVITEMA itemOld;TVITEMA itemNew;POINT ptDrag;};
struct tagNMTREEVIEWW {NMHDR hdr;UINT action;TVITEMW itemOld;TVITEMW itemNew;POINT ptDrag;};
struct tagWAVEOUTCAPS {WORD wMid;WORD wPid;MMVERSION vDriverVersion;TCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct ICifGroupVtbl {HRESULT ( *GetID)(ICifComponent *This, LPSTR pszID, DWORD dwSize);HRESULT ( *GetDescription)(ICifComponent *This, LPSTR pszDesc, DWORD dwSize);DWORD ( *GetPriority)(ICifComponent *This);HRESULT ( *EnumComponents)(ICifComponent *This, IEnumCifComponents **, DWORD dwFilter, LPVOID pv);DWORD ( *GetCurrentPriority)(ICifComponent *This);};
struct IDXDCLockVtbl {HRESULT ( *QueryInterface)(IDXDCLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXDCLock *This);ULONG ( *Release)(IDXDCLock *This);HDC ( *GetDC)(IDXDCLock *This);};
struct IDvdStateVtbl {HRESULT ( *QueryInterface)(IDvdState *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdState *This);ULONG ( *Release)(IDvdState *This);HRESULT ( *GetDiscID)(IDvdState *This, ULONGLONG *pullUniqueID);HRESULT ( *GetParentalLevel)(IDvdState *This, ULONG *pulParentalLevel);};
struct IEnumGUIDVtbl {HRESULT ( *QueryInterface)(IEnumGUID *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumGUID *This);ULONG ( *Release)(IEnumGUID *This);HRESULT ( *Next)(IEnumGUID *This, ULONG celt, GUID *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumGUID *This, ULONG celt);HRESULT ( *Reset)(IEnumGUID *This);HRESULT ( *Clone)(IEnumGUID *This, IEnumGUID **ppenum);};
struct ILineInfoVtbl {HRESULT ( *QueryInterface)(ILineInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILineInfo *This);ULONG ( *Release)(ILineInfo *This);HRESULT ( *get_x)(ILineInfo *This, int *p);HRESULT ( *get_baseLine)(ILineInfo *This, int *p);HRESULT ( *get_textDescent)(ILineInfo *This, int *p);HRESULT ( *get_textHeight)(ILineInfo *This, int *p);HRESULT ( *get_lineDirection)(ILineInfo *This, LONG *p);};
struct IObexCapsVtbl {HRESULT ( *QueryInterface)(IObexCaps *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObexCaps *This);ULONG ( *Release)(IObexCaps *This);HRESULT ( *SetCaps)(IObexCaps *This, DWORD dwCaps);};
struct IObexSinkVtbl {HRESULT ( *QueryInterface)(IObexSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObexSink *This);ULONG ( *Release)(IObexSink *This);HRESULT ( *Notify)(IObexSink *This, OBEX_EVENT Event, IUnknown *pUnk1, IUnknown *pUnk2);};
struct IQualPropVtbl {HRESULT ( *QueryInterface)(IQualProp *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQualProp *This);ULONG ( *Release)(IQualProp *This);HRESULT ( *get_FramesDroppedInRenderer)(IQualProp *This, int *pcFrames);HRESULT ( *get_FramesDrawn)(IQualProp *This, int *pcFramesDrawn);HRESULT ( *get_AvgFrameRate)(IQualProp *This, int *piAvgFrameRate);HRESULT ( *get_Jitter)(IQualProp *This, int *iJitter);HRESULT ( *get_AvgSyncOffset)(IQualProp *This, int *piAvg);HRESULT ( *get_DevSyncOffset)(IQualProp *This, int *piDev);};
struct IXMLErrorVtbl {HRESULT ( *QueryInterface)(IXMLError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLError *This);ULONG ( *Release)(IXMLError *This);HRESULT ( *GetErrorInfo)(IXMLError *This, XML_ERROR *pErrorReturn);};
typedef UINT ( *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef HRESULT ( *REGRESTOREALL)(HWND hWnd, PSTR pszTitleString, HKEY hkBckupKey);
struct XACTTRANSINFO {XACTUOW uow;ISOLEVEL isoLevel;ULONG isoFlags;DWORD grfTCSupported;DWORD grfRMSupported;DWORD grfTCSupportedRetaining;DWORD grfRMSupportedRetaining;};
struct _AMVPDATAINFO {DWORD dwSize;DWORD dwMicrosecondsPerField;AMVPDIMINFO amvpDimInfo;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;BOOL bEnableDoubleClock;BOOL bEnableVACT;BOOL bDataIsInterlaced;LONG lHalfLinesOdd;BOOL bFieldPolarityInverted;DWORD dwNumLinesInVREF;LONG lHalfLinesEven;DWORD dwReserved1;};
struct _CERT_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCertEncoded;DWORD cbCertEncoded;PCERT_INFO pCertInfo;HCERTSTORE hCertStore;};
struct _CREDUI_INFOA {DWORD cbSize;HWND hwndParent;PCSTR pszMessageText;PCSTR pszCaptionText;HBITMAP hbmBanner;};
struct _MP_PARAMINFO {MP_TYPE mpType;MP_CAPS mopCaps;MP_DATA mpdMinValue;MP_DATA mpdMaxValue;MP_DATA mpdNeutralValue;WCHAR szUnitText[32];WCHAR szLabel[32];};
struct _SOCKADDR_BTH {USHORT addressFamily;bt_addr btAddr;GUID serviceClassId;ULONG port;};
struct _TASK_TRIGGER {WORD cbTriggerSize;WORD Reserved1;WORD wBeginYear;WORD wBeginMonth;WORD wBeginDay;WORD wEndYear;WORD wEndMonth;WORD wEndDay;WORD wStartHour;WORD wStartMinute;DWORD MinutesDuration;DWORD MinutesInterval;DWORD rgFlags;TASK_TRIGGER_TYPE TriggerType;TRIGGER_TYPE_UNION Type;WORD Reserved2;WORD wRandomMinutesInterval;};
struct _tagWAB_PARAM {ULONG cbSize;HWND hwnd;LPSTR szFileName;ULONG ulFlags;GUID guidPSExt;};
struct tMIXERCONTROL {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;TCHAR szShortName[16];TCHAR szName[64];union tMIXERCONTROL___7907B101388E14016599F7564F0D3B22 Bounds;union tMIXERCONTROL___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagDIBSECTION {BITMAP dsBm;BITMAPINFOHEADER dsBmih;DWORD dsBitfields[3];HANDLE dshSection;DWORD dsOffset;};
struct tagMIMECPINFO {DWORD dwFlags;UINT uiCodePage;UINT uiFamilyCodePage;WCHAR wszDescription[64];WCHAR wszWebCharset[50];WCHAR wszHeaderCharset[50];WCHAR wszBodyCharset[50];WCHAR wszFixedWidthFont[32];WCHAR wszProportionalFont[32];BYTE bGDICharset;};
struct tagNMLISTVIEW {NMHDR hdr;int iItem;int iSubItem;UINT uNewState;UINT uOldState;UINT uChanged;POINT ptAction;LPARAM lParam;};
struct tagWAVEINCAPS {WORD wMid;WORD wPid;MMVERSION vDriverVersion;TCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
typedef int ( *FONTENUMPROC)( LOGFONTA *,  TEXTMETRIC *, DWORD, LPARAM);
struct ICifModeVtbl {HRESULT ( *GetID)(ICifComponent *This, LPSTR pszID, DWORD dwSize);HRESULT ( *GetDescription)(ICifComponent *This, LPSTR pszDesc, DWORD dwSize);HRESULT ( *GetDetails)(ICifComponent *This, LPSTR pszDetails, DWORD dwSize);HRESULT ( *EnumComponents)(ICifComponent *This, IEnumCifComponents **, DWORD dwFilter, LPVOID pv);};
struct IMultiQIVtbl {HRESULT ( *QueryInterface)(IMultiQI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiQI *This);ULONG ( *Release)(IMultiQI *This);HRESULT ( *QueryMultipleInterfaces)(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);};
struct IPersistVtbl {HRESULT ( *QueryInterface)(IPersist *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersist *This);ULONG ( *Release)(IPersist *This);HRESULT ( *GetClassID)(IPersist *This, CLSID *pClassID);};
struct IROTDataVtbl {HRESULT ( *QueryInterface)(IROTData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IROTData *This);ULONG ( *Release)(IROTData *This);HRESULT ( *GetComparisonData)(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData);};
struct ISdpWalkVtbl {HRESULT ( *QueryInterface)(ISdpWalk *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISdpWalk *This);ULONG ( *Release)(ISdpWalk *This);HRESULT ( *WalkNode)(ISdpWalk *This, NodeData *pData, ULONG state);HRESULT ( *WalkStream)(ISdpWalk *This, UCHAR elementType, ULONG elementSize, UCHAR *pStream);};
typedef UINT ( *LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef BOOL ( *LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef int ( *LPWSPCONNECT)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, LPINT lpErrno);
typedef STATUS (*MODIFYCONFIG)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE, PUINT16);
typedef STATUS (*MODIFYWINDOW)(CARD_WINDOW_HANDLE, UINT16, UINT8);
typedef BOOL ( *PFN_HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
struct THROTTLEITEM {NOTIFICATIONTYPE NotificationType;LONG nParallel;DWORD dwFlags;SYSTEMTIME stBegin;SYSTEMTIME stEnd;DWORD dwMinItemUpdateInterval;};
struct _AMMediaType {GUID majortype;GUID subtype;BOOL bFixedSizeSamples;BOOL bTemporalCompression;ULONG lSampleSize;GUID formattype;IUnknown *pUnk;ULONG cbFormat;BYTE *pbFormat;};
struct _CRL_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCrlEncoded;DWORD cbCrlEncoded;PCRL_INFO pCrlInfo;HCERTSTORE hCertStore;};
struct _DDOVERLAYFX {DWORD dwSize;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous0;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous2;DDCOLORKEY dckDestColorkey;DDCOLORKEY dckSrcColorkey;DWORD dwDDFX;DWORD dwFlags;};
struct _INFO_ISATAP {WCHAR RouterName[1025];BOOL bEnable;ULONG ulResolutionInterval;IN_ADDR iaIsatapRouter;};
struct _LMEM_RECENT {HANDLE hHeap;DWORD dwTickCount;LPVOID pData;DWORD dwSize;DWORD dwLineNum;CHAR szFilename[260];};
struct _PAINTSTRUCT {HDC hdc;BOOL fErase;RECT rcPaint;BOOL fRestore;BOOL fIncUpdate;BYTE rgbReserved[32];};
struct _SYSTEM_INFO {_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F __anonymous0;DWORD dwPageSize;LPVOID lpMinimumApplicationAddress;LPVOID lpMaximumApplicationAddress;DWORD dwActiveProcessorMask;DWORD dwNumberOfProcessors;DWORD dwProcessorType;DWORD dwAllocationGranularity;WORD wProcessorLevel;WORD wProcessorRevision;};
struct _tagHLBWINFO {ULONG cbSize;DWORD grfHLBWIF;RECT rcFramePos;RECT rcDocPos;HLTBINFO hltbinfo;};
struct sockaddr_atm {u_short satm_family;ATM_ADDRESS satm_number;ATM_BLLI satm_blli;ATM_BHLI satm_bhli;};
struct tagFORMATETC {CLIPFORMAT cfFormat;DVTARGETDEVICE *ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagIXPRESULT {HRESULT hrResult;LPSTR pszResponse;UINT uiServerError;HRESULT hrServerError;DWORD dwSocketError;LPSTR pszProblem;};
struct tagMIXERCAPS {WORD wMid;WORD wPid;MMVERSION vDriverVersion;TCHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagNMNEWMENU {NMHDR hdr;TCHAR szReg[80];HMENU hMenu;CLSID clsid;IPropertyBag **pppropbag;};
struct tagSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;PVOID pvData;SAFEARRAYBOUND rgsabound[1];};
typedef SOCKET ( *LPWSPACCEPT)(SOCKET s, struct sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData, LPINT lpErrno);
typedef HRESULT (*PDRAWCREATE)(IID *, LPDIRECTDRAW *, LPUNKNOWN);
typedef BOOL (*PFN_PDD_GET)(UINT uiRequestId, PVOID pvData, ULONG ulDataLength, ULONG *pulRequiredLength);
typedef BOOL (*PFN_PDD_SET)(UINT uiRequestId, PVOID pvData, ULONG ulDataLength);
struct _AsyncIOReq {DWORD engine[4];BYTE *lpv;DWORD cb;DWORD dwError;DWORD cbDone;LARGE_INTEGER liPos;DWORD hEvent;DWORD_PTR dwUser;};
struct _CEFILEINFO {DWORD dwAttributes;CEOID oidParent;WCHAR szFileName[260];FILETIME ftLastChanged;DWORD dwLength;};
struct _COMMCONFIG {DWORD dwSize;WORD wVersion;WORD wReserved;DCB dcb;DWORD dwProviderSubType;DWORD dwProviderOffset;DWORD dwProviderSize;WCHAR wcProviderData[1];};
struct _DDBLTBATCH {LPRECT lprDest;LPDIRECTDRAWSURFACE lpDDSSrc;LPRECT lprSrc;DWORD dwFlags;LPDDBLTFX lpDDBltFx;};
struct _userBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;ULONG cbSize;byte pBuffer[1];};
struct tagPOP3RETR {BOOL fHeader;BOOL fBody;DWORD dwPopId;DWORD cbSoFar;LPSTR pszLines;ULONG cbLines;};
struct tagTLIBATTR {GUID guid;LCID lcid;SYSKIND syskind;WORD wMajorVerNum;WORD wMinorVerNum;WORD wLibFlags;};
typedef HRESULT ( *EXECUTECAB)(HWND hwnd, PCABINFO pCab, LPVOID pReserved);
struct INETSERVER {CHAR szAccount[256];CHAR szUserName[256];CHAR szPassword[256];CHAR szServerName[256];CHAR szConnectoid[256];RASCONNTYPE rasconntype;DWORD dwPort;BOOL fSSL;BOOL fTrySicily;DWORD dwTimeout;DWORD dwFlags;};
typedef SCODE ( *LPFNBUTTON)(ULONG ulUIParam, LPVOID lpvContext, ULONG cbEntryID, LPENTRYID lpSelection, ULONG ulFlags);
struct _CRL_ENTRY {CRYPT_INTEGER_BLOB SerialNumber;FILETIME RevocationDate;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _INFO_6TO4 {WCHAR RelayName[1025];BOOL bEnable;ULONG ulResolutionInterval;ULONG ulNumberOfRelays;RELAY_INFO RelayInfo[5];};
struct _MAPHEADER {DWORD dwBufSize;LPBYTE pWrite;LPBYTE pRead;BOOL fSetEvent;BYTE bReserved;DWORD dwLostBytes;};
struct _TRUSTEE_A {struct _TRUSTEE_A *pMultipleTrustee;MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;TRUSTEE_FORM TrusteeForm;TRUSTEE_TYPE TrusteeType;LPSTR ptstrName;};
struct _cpinfoexA {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;CHAR CodePageName[260];};
struct tagPOP3TOP {BOOL fHeader;BOOL fBody;DWORD dwPopId;DWORD cPreviewLines;DWORD cbSoFar;LPSTR pszLines;ULONG cbLines;};
struct tagTCITEMA {UINT mask;DWORD dwState;DWORD dwStateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMA {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
struct IObexVtbl {HRESULT ( *QueryInterface)(IObex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObex *This);ULONG ( *Release)(IObex *This);HRESULT ( *Initialize)(IObex *This);HRESULT ( *Shutdown)(IObex *This);HRESULT ( *EnumDevices)(IObex *This, IDeviceEnum **ppDeviceEnum,  CLSID * uuidTransport);HRESULT ( *EnumTransports)(IObex *This, IPropertyBagEnum **ppTransportEnum);HRESULT ( *RegisterService)(IObex *This, IPropertyBag *pPropertyBag, IObexService **ppService);HRESULT ( *BindToDevice)(IObex *This, IPropertyBag *pPropertyBag, IObexDevice **ppDevice);HRESULT ( *StartDeviceEnum)(IObex *This);HRESULT ( *StopDeviceEnum)(IObex *This);};
typedef PVOID (*MAPWINDOW)(CARD_WINDOW_HANDLE, UINT32, UINT32, PUINT32);
struct _HD_ITEMA {UINT mask;int cxy;LPSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;};
struct _cqform_A {DWORD cbStruct;DWORD dwFlags;CLSID clsid;HICON hIcon;LPCSTR pszTitle;};
typedef LRESULT  MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
struct tagOIFI {UINT cb;BOOL fMDIApp;HWND hwndFrame;HACCEL haccel;UINT cAccelEntries;};
struct ldap {struct ldap___DB9AF84D9AB6BBC578E4BBA80938AF25 ld_sb;PCHAR ld_host;ULONG ld_version;UCHAR ld_lberoptions;ULONG ld_deref;ULONG ld_timelimit;ULONG ld_sizelimit;ULONG ld_errno;PCHAR ld_matched;PCHAR ld_error;ULONG ld_msgid;UCHAR Reserved3[25];ULONG ld_cldaptries;ULONG ld_cldaptimeout;ULONG ld_refhoplimit;ULONG ld_options;};
struct _IRP___2B8045857F44E8706EFE3A31F95ACA19___12B2BAD74E2AB4DE00B958803C411E58 {_IRP______12B2BAD74E2AB4DE00B958803C411E58___63BBF9CAFCFD23268916A053C4643290 __anonymous0;HANDLE CallerProcess;PCHAR AuxiliaryBuffer;LIST_ENTRY ListEntry;struct _IO_STACK_LOCATION *CurrentStackLocation;PFILE_OBJECT OriginalFileObject;};
union _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E {struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___7B1CB6EE79569F81CDFB60A5A427B7E5 Create;struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___D177823888D2499403AB088A16B8A5D6 Read;struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___D177823888D2499403AB088A16B8A5D6 Write;struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___3EEFC530056981631A2136A7505B6E7C DeviceIoControl;struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___5F23BCEFF143F24425E18DB271E74871 Power;struct _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E___15881024B0F660B7398AF4B4249A3A24 Others;};
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {DWORD cbSize;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;};
struct _WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;PCCERT_CHAIN_CONTEXT pChainContext;DWORD dwSignerType;PCMSG_SIGNER_INFO pMsgSignerInfo;DWORD dwError;DWORD cCounterSigner;PWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO *rgpCounterSigner;};
struct _63C5725C5B677664277ACEA161B104D1 {SHCOLUMNID scid;VARTYPE vt;DWORD fmt;UINT cChars;DWORD csFlags;WCHAR wszTitle[80];WCHAR wszDescription[128];};
struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD lParam;LPSTR pszText;int cchText;};
typedef SECURITY_STATUS ( *ACQUIRE_CREDENTIALS_HANDLE_FN_A)(SEC_CHAR *, SEC_CHAR *, unsigned int, void *, void *, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
struct IDVDParentalManagementTableVtbl {HRESULT ( *QueryInterface)(IDVDParentalManagementTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDParentalManagementTable *This);ULONG ( *Release)(IDVDParentalManagementTable *This);HRESULT ( *ConvertParentalLevelToID)(IDVDParentalManagementTable *This, UINT8 level, UINT16 countryCode, UINT16 vtsn, UINT16 *parentalID);};
typedef HRESULT  IWABOBJECT_VCardRetrieve_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER *lppMailUser);
struct IActiveIMMMessagePumpOwnerVtbl {HRESULT ( *QueryInterface)(IActiveIMMMessagePumpOwner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIMMMessagePumpOwner *This);ULONG ( *Release)(IActiveIMMMessagePumpOwner *This);HRESULT ( *Start)(IActiveIMMMessagePumpOwner *This);HRESULT ( *End)(IActiveIMMMessagePumpOwner *This);HRESULT ( *OnTranslateMessage)(IActiveIMMMessagePumpOwner *This,  MSG *pMsg);HRESULT ( *Pause)(IActiveIMMMessagePumpOwner *This, DWORD *pdwCookie);HRESULT ( *Resume)(IActiveIMMMessagePumpOwner *This, DWORD dwCookie);};
struct _CMSG_KEY_AGREE_RECIPIENT_INFO {DWORD dwVersion;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;};
struct _CMSG_MAIL_LIST_RECIPIENT_INFO {DWORD dwVersion;CRYPT_DATA_BLOB KeyId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct INetCfgComponentUpperEdgeVtbl {HRESULT ( *QueryInterface)(INetCfgComponentUpperEdge *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentUpperEdge *This);ULONG ( *Release)(INetCfgComponentUpperEdge *This);HRESULT ( *GetInterfaceIdsForAdapter)(INetCfgComponentUpperEdge *This, INetCfgComponent *pAdapter, DWORD *pdwNumInterfaces, GUID **ppguidInterfaceIds);HRESULT ( *AddInterfacesToAdapter)(INetCfgComponentUpperEdge *This, INetCfgComponent *pAdapter, DWORD dwNumInterfaces);HRESULT ( *RemoveInterfacesFromAdapter)(INetCfgComponentUpperEdge *This, INetCfgComponent *pAdapter, DWORD dwNumInterfaces,  GUID *pguidInterfaceIds);};
typedef HRESULT  IWABOBJECT_VCardCreate_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER lpMailUser);
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext);
typedef HRESULT ( *SWEEPCONTROLSBYLASTACCESSDATE)(SYSTEMTIME *pLastAccessTime, PFNDOBEFOREREMOVAL pfnDoBefore, PFNDOAFTERREMOVAL pfnDoAfter, DWORD dwSizeLimit);
struct IInternetSecurityMgrSiteVtbl {HRESULT ( *QueryInterface)(IInternetSecurityMgrSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityMgrSite *This);ULONG ( *Release)(IInternetSecurityMgrSite *This);HRESULT ( *GetWindow)(IInternetSecurityMgrSite *This, HWND *phwnd);HRESULT ( *EnableModeless)(IInternetSecurityMgrSite *This, BOOL fEnable);};
struct IMediaParamsRecordNotifyVtbl {HRESULT ( *QueryInterface)(IMediaParamsRecordNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaParamsRecordNotify *This);ULONG ( *Release)(IMediaParamsRecordNotify *This);HRESULT ( *InitRecording)(IMediaParamsRecordNotify *This);HRESULT ( *PunchedIn)(IMediaParamsRecordNotify *This);HRESULT ( *PunchedOut)(IMediaParamsRecordNotify *This);HRESULT ( *EndRecording)(IMediaParamsRecordNotify *This);HRESULT ( *ParamChanged)(IMediaParamsRecordNotify *This, DWORD dwIndex, DWORD cNumSegments, MP_ENVELOPE_SEGMENT *pEnvelopeSegments);};
struct IPersistMediaPropertyBagVtbl {HRESULT ( *QueryInterface)(IPersistMediaPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMediaPropertyBag *This);ULONG ( *Release)(IPersistMediaPropertyBag *This);HRESULT ( *GetClassID)(IPersistMediaPropertyBag *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistMediaPropertyBag *This);HRESULT ( *Load)(IPersistMediaPropertyBag *This, IMediaPropertyBag *pPropBag, IErrorLog *pErrorLog);HRESULT ( *Save)(IPersistMediaPropertyBag *This, IMediaPropertyBag *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);};
struct IPrivateIdentityManager2Vtbl {HRESULT ( *QueryInterface)(IPrivateIdentityManager2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrivateIdentityManager2 *This);ULONG ( *Release)(IPrivateIdentityManager2 *This);HRESULT ( *CreateIdentity2)(IPrivateIdentityManager2 *This, WCHAR *pszName, WCHAR *pszPassword, IUserIdentity **ppIdentity);HRESULT ( *DestroyIdentity)(IPrivateIdentityManager2 *This, GUID *uidCookie);HRESULT ( *LogonAs)(IPrivateIdentityManager2 *This, WCHAR *pszName, WCHAR *pszPassword, IUserIdentity **ppIdentity);HRESULT ( *SetDefaultIdentity)(IPrivateIdentityManager2 *This, GUID *puidCookie);HRESULT ( *GetDefaultIdentity)(IPrivateIdentityManager2 *This, GUID *puidCookie);};
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext);
struct _CMSG_KEY_AGREE_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;DWORD cKeyAgreeKeyEncryptInfo;PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;DWORD dwFlags;};
struct _HTTP_FILTER_PREPROC_HEADERS {BOOL ( *GetHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *SetHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPSTR lpszValue);BOOL ( *AddHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPSTR lpszValue);DWORD HttpStatus;DWORD dwReserved;};
struct IActiveScriptSiteWindowVtbl {HRESULT ( *QueryInterface)(IActiveScriptSiteWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSiteWindow *This);ULONG ( *Release)(IActiveScriptSiteWindow *This);HRESULT ( *GetWindow)(IActiveScriptSiteWindow *This, HWND *phwnd);HRESULT ( *EnableModeless)(IActiveScriptSiteWindow *This, BOOL fEnable);};
struct IDirectDrawColorControlVtbl {HRESULT ( *QueryInterface)(IDirectDrawColorControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawColorControl *This);ULONG ( *Release)(IDirectDrawColorControl *This);HRESULT ( *GetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);HRESULT ( *SetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);};
struct INetConnectionConnectUiVtbl {HRESULT ( *QueryInterface)(INetConnectionConnectUi *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetConnectionConnectUi *This);ULONG ( *Release)(INetConnectionConnectUi *This);HRESULT ( *SetConnection)(INetConnectionConnectUi *This, INetConnection *pCon);HRESULT ( *Connect)(INetConnectionConnectUi *This, HWND hwndParent, DWORD dwFlags);HRESULT ( *Disconnect)(INetConnectionConnectUi *This, HWND hwndParent, DWORD dwFlags);};
struct IPrivateIdentityManagerVtbl {HRESULT ( *QueryInterface)(IPrivateIdentityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrivateIdentityManager *This);ULONG ( *Release)(IPrivateIdentityManager *This);HRESULT ( *CreateIdentity)(IPrivateIdentityManager *This, WCHAR *pszName, IUserIdentity **ppIdentity);HRESULT ( *ConfirmPassword)(IPrivateIdentityManager *This, GUID *uidCookie, WCHAR *pszPassword);};
typedef SECURITY_STATUS ( *ACCEPT_SECURITY_CONTEXT_FN)(PCredHandle, PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct IDXTFilterBehaviorSiteVtbl {HRESULT ( *QueryInterface)(IDXTFilterBehaviorSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTFilterBehaviorSite *This);ULONG ( *Release)(IDXTFilterBehaviorSite *This);HRESULT ( *InvalidateElement)(IDXTFilterBehaviorSite *This, BOOL fInvalidateSize);HRESULT ( *InvalidateFilterChain)(IDXTFilterBehaviorSite *This);HRESULT ( *ExecuteFilterChain)(IDXTFilterBehaviorSite *This);HRESULT ( *FireOnFilterChangeEvent)(IDXTFilterBehaviorSite *This);HRESULT ( *OnFilterChangeStatus)(IDXTFilterBehaviorSite *This, DXTFILTER_STATUS eStatusOld, DXTFILTER_STATUS eStatusNew);void ( *OnFatalError)(IDXTFilterBehaviorSite *This, HRESULT hrFatalError);HRESULT ( *GetTimer)(IDXTFilterBehaviorSite *This, void **ppvTimer);HRESULT ( *EnsureView)(IDXTFilterBehaviorSite *This);};
struct INetConnectionCommonUiVtbl {HRESULT ( *QueryInterface)(INetConnectionCommonUi *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetConnectionCommonUi *This);ULONG ( *Release)(INetConnectionCommonUi *This);HRESULT ( *ChooseConnection)(INetConnectionCommonUi *This, NETCON_CHOOSECONN *pChooseConn, INetConnection **ppCon);HRESULT ( *ShowConnectionProperties)(INetConnectionCommonUi *This, HWND hwndParent, INetConnection *pCon);HRESULT ( *StartNewConnectionWizard)(INetConnectionCommonUi *This, HWND hwndParent, INetConnection **ppCon);};
struct ISubscriptionThrottlerVtbl {HRESULT ( *QueryInterface)(ISubscriptionThrottler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionThrottler *This);ULONG ( *Release)(ISubscriptionThrottler *This);HRESULT ( *GetSubscriptionRunState)(ISubscriptionThrottler *This, DWORD dwNumCookies,  SUBSCRIPTIONCOOKIE *pCookies, DWORD *pdwRunState);HRESULT ( *AbortItems)(ISubscriptionThrottler *This, DWORD dwNumCookies,  SUBSCRIPTIONCOOKIE *pCookies);HRESULT ( *AbortAll)(ISubscriptionThrottler *This);};
typedef BOOLEAN (*PFAST_IO_PREPARE_MDL_WRITE)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
struct _CREATE_PROCESS_DEBUG_INFO {HANDLE hFile;HANDLE hProcess;HANDLE hThread;LPVOID lpBaseOfImage;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;LPVOID lpImageName;WORD fUnicode;};
struct _tagSYNC_HANDLER_ITEM_INFO {GUID handlerID;SYNCMGRITEMID itemID;HICON hIcon;WCHAR wszItemName[128];DWORD dwCheckState;};
struct IAMDevMemoryAllocatorVtbl {HRESULT ( *QueryInterface)(IAMDevMemoryAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDevMemoryAllocator *This);ULONG ( *Release)(IAMDevMemoryAllocator *This);HRESULT ( *GetInfo)(IAMDevMemoryAllocator *This, DWORD *pdwcbTotalFree, DWORD *pdwcbLargestFree, DWORD *pdwcbTotalMemory, DWORD *pdwcbMinimumChunk);HRESULT ( *CheckMemory)(IAMDevMemoryAllocator *This,  BYTE *pBuffer);HRESULT ( *Alloc)(IAMDevMemoryAllocator *This, BYTE **ppBuffer, DWORD *pdwcbBuffer);HRESULT ( *Free)(IAMDevMemoryAllocator *This, BYTE *pBuffer);HRESULT ( *GetDevMemoryObject)(IAMDevMemoryAllocator *This, IUnknown **ppUnkInnner, IUnknown *pUnkOuter);};
struct IActiveScriptPropertyVtbl {HRESULT ( *QueryInterface)(IActiveScriptProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptProperty *This);ULONG ( *Release)(IActiveScriptProperty *This);HRESULT ( *GetProperty)(IActiveScriptProperty *This, DWORD dwProperty, VARIANT *pvarIndex, VARIANT *pvarValue);HRESULT ( *SetProperty)(IActiveScriptProperty *This, DWORD dwProperty, VARIANT *pvarIndex, VARIANT *pvarValue);};
struct IOleControlNavigationVtbl {HRESULT ( *QueryInterface)(IOleControlNavigation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlNavigation *This);ULONG ( *Release)(IOleControlNavigation *This);HRESULT ( *GetCurrentRect)(IOleControlNavigation *This, RECT *prcCurrent);HRESULT ( *GetNavigationRectCount)(IOleControlNavigation *This, DWORD *pdwRectCount);HRESULT ( *GetNavigationRects)(IOleControlNavigation *This, DWORD dwRectCount,RECT  *    lpRects);HRESULT ( *Scroll)(IOleControlNavigation *This, DWORD dwDirection);HRESULT ( *ActivateRect)(IOleControlNavigation *This, DWORD dwRectToActivate);};
struct IOverlappedCompletionVtbl {HRESULT ( *QueryInterface)(IOverlappedCompletion *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlappedCompletion *This);ULONG ( *Release)(IOverlappedCompletion *This);HRESULT ( *OnComplete)(IOverlappedCompletion *This, HRESULT hr, DWORD pcbTransferred, STGOVERLAPPED *lpOverlapped);};
typedef BOOL ( *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL ( *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL ( *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL ( *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
struct _DOT11_DEFAULT_WEP_UPLOAD {ULONG uReserved;DOT11_OFFLOAD_TYPE dot11OffloadType;HANDLE hOffload;ULONG uNumOfRWsUsed;DOT11_IV48_COUNTER dot11IV48Counters[16];USHORT usDot11RWBitMaps[16];};
struct _VIDEO_STREAM_CONFIG_CAPS {GUID guid;ULONG VideoStandard;SIZE InputSize;SIZE MinCroppingSize;SIZE MaxCroppingSize;int CropGranularityX;int CropGranularityY;int CropAlignX;int CropAlignY;SIZE MinOutputSize;SIZE MaxOutputSize;int OutputGranularityX;int OutputGranularityY;int StretchTapsX;int StretchTapsY;int ShrinkTapsX;int ShrinkTapsY;LONGLONG MinFrameInterval;LONGLONG MaxFrameInterval;LONG MinBitsPerSecond;LONG MaxBitsPerSecond;};
struct IDXTFilterControllerVtbl {HRESULT ( *QueryInterface)(IDXTFilterController *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTFilterController *This);ULONG ( *Release)(IDXTFilterController *This);HRESULT ( *SetProgress)(IDXTFilterController *This, float flProgress);HRESULT ( *SetEnabled)(IDXTFilterController *This, BOOL fEnabled);HRESULT ( *SetFilterControlsVisibility)(IDXTFilterController *This, BOOL fFilterControlsVisibility);HRESULT ( *QuickApply)(IDXTFilterController *This, DXT_QUICK_APPLY_TYPE dxtqat, IUnknown *punkInput);};
struct IEnumPStoreProvidersVtbl {HRESULT ( *QueryInterface)(IEnumPStoreProviders *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPStoreProviders *This);ULONG ( *Release)(IEnumPStoreProviders *This);HRESULT ( *Next)(IEnumPStoreProviders *This, DWORD celt, PST_PROVIDERINFO **rgelt, DWORD *pceltFetched);HRESULT ( *Skip)(IEnumPStoreProviders *This, DWORD celt);HRESULT ( *Reset)(IEnumPStoreProviders *This);HRESULT ( *Clone)(IEnumPStoreProviders *This, IEnumPStoreProviders **ppenum);};
struct IPersistPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag2 *This);ULONG ( *Release)(IPersistPropertyBag2 *This);HRESULT ( *GetClassID)(IPersistPropertyBag2 *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag2 *This);HRESULT ( *Load)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, IErrorLog *pErrLog);HRESULT ( *Save)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);HRESULT ( *IsDirty)(IPersistPropertyBag2 *This);};
struct IRowsetChapterMemberVtbl {HRESULT ( *QueryInterface)(IRowsetChapterMember *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetChapterMember *This);ULONG ( *Release)(IRowsetChapterMember *This);HRESULT ( *IsRowInChapter)(IRowsetChapterMember *This, HCHAPTER hChapter, HROW hRow);};
struct ISubDivisionProviderVtbl {HRESULT ( *QueryInterface)(ISubDivisionProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubDivisionProvider *This);ULONG ( *Release)(ISubDivisionProvider *This);HRESULT ( *GetSubDivisionCount)(ISubDivisionProvider *This, LONG *pcSubDivision);HRESULT ( *GetSubDivisionTabs)(ISubDivisionProvider *This, LONG cTabs, LONG *pSubDivisionTabs);HRESULT ( *SubDivisionFromPt)(ISubDivisionProvider *This, POINT pt, LONG *piSubDivision);};
struct IUnicodeScriptMapperVtbl {HRESULT ( *QueryInterface)(IUnicodeScriptMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUnicodeScriptMapper *This);ULONG ( *Release)(IUnicodeScriptMapper *This);HRESULT ( *GetScriptId)(IUnicodeScriptMapper *This, unsigned short ch, byte *pScriptId);HRESULT ( *GetScriptIdMulti)(IUnicodeScriptMapper *This,  unsigned short *pch, int cch, int *pcchSplit, byte *pScriptId);HRESULT ( *UnunifyHanScript)(IUnicodeScriptMapper *This, unsigned short ch, byte sidPrefered, long long sidsAvailable, byte flags, byte *pScriptId);HRESULT ( *UnunifyHanScriptMulti)(IUnicodeScriptMapper *This,  unsigned short *pch, int cch, byte sidPrefered, long long sidsAvailable, byte flags, int *pcchSplit, byte *pScriptId);HRESULT ( *DisambiguateScript)(IUnicodeScriptMapper *This, unsigned short ch, byte sidPrefered, long long sidsAvailable, byte flags, byte *pScriptId);HRESULT ( *DisambiguateScriptMulti)(IUnicodeScriptMapper *This,  unsigned short *pch, int cch, byte sidPrefered, long long sidsAvailable, byte flags, int *pcchSplit, byte *pScriptId);};
typedef BOOL ( *LPWSPGETOVERLAPPEDRESULT)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags, LPINT lpErrno);
typedef BOOL ( *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD *pcbPrivateKeyBlob);
struct _CMSG_SIGNER_ENCODE_INFO {DWORD cbSize;PCERT_INFO pCertInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;};
struct _CRYPT_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;PCCERT_CONTEXT pSigningCert;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cMsgCert;PCCERT_CONTEXT *rgpMsgCert;DWORD cMsgCrl;PCCRL_CONTEXT *rgpMsgCrl;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;DWORD dwFlags;DWORD dwInnerContentType;};
struct _IMAGE_OPTIONAL_HEADER64 {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;ULONGLONG ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;ULONGLONG SizeOfStackReserve;ULONGLONG SizeOfStackCommit;ULONGLONG SizeOfHeapReserve;ULONGLONG SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct tagAM_SAMPLE2_PROPERTIES {DWORD cbData;DWORD dwTypeSpecificFlags;DWORD dwSampleFlags;LONG lActual;REFERENCE_TIME tStart;REFERENCE_TIME tStop;DWORD dwStreamId;AM_MEDIA_TYPE *pMediaType;BYTE *pbBuffer;LONG cbBuffer;};
struct IConfigInterleavingVtbl {HRESULT ( *QueryInterface)(IConfigInterleaving *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConfigInterleaving *This);ULONG ( *Release)(IConfigInterleaving *This);HRESULT ( *put_Mode)(IConfigInterleaving *This, InterleavingMode mode);HRESULT ( *get_Mode)(IConfigInterleaving *This, InterleavingMode *pMode);HRESULT ( *put_Interleaving)(IConfigInterleaving *This,  REFERENCE_TIME *prtInterleave,  REFERENCE_TIME *prtPreroll);HRESULT ( *get_Interleaving)(IConfigInterleaving *This, REFERENCE_TIME *prtInterleave, REFERENCE_TIME *prtPreroll);};
struct IExternalConnectionVtbl {HRESULT ( *QueryInterface)(IExternalConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExternalConnection *This);ULONG ( *Release)(IExternalConnection *This);DWORD ( *AddConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved);DWORD ( *ReleaseConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);};
struct IHTMLChangePlaybackVtbl {HRESULT ( *QueryInterface)(IHTMLChangePlayback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLChangePlayback *This);ULONG ( *Release)(IHTMLChangePlayback *This);HRESULT ( *ExecChange)(IHTMLChangePlayback *This, BYTE *pbRecord, BOOL fForward);};
struct IPersistPropertyBagVtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag *This);ULONG ( *Release)(IPersistPropertyBag *This);HRESULT ( *GetClassID)(IPersistPropertyBag *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag *This);HRESULT ( *Load)(IPersistPropertyBag *This, IPropertyBag *pPropBag, IErrorLog *pErrorLog);HRESULT ( *Save)(IPersistPropertyBag *This, IPropertyBag *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);};
struct IReconcileInitiatorVtbl {HRESULT ( *QueryInterface)(IReconcileInitiator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReconcileInitiator *This);ULONG ( *Release)(IReconcileInitiator *This);HRESULT ( *SetAbortCallback)(IReconcileInitiator *This, IUnknown *pUnkForAbort);HRESULT ( *SetProgressFeedback)(IReconcileInitiator *This, ULONG ulProgress, ULONG ulProgressMax);HRESULT ( *FindVersion)(IReconcileInitiator *This, VERID *pverid, IMoniker **ppmk);HRESULT ( *FindVersionFromGraph)(IReconcileInitiator *This, VERGRAPH *pvergraph, VERID *pverid, IMoniker **ppmk);};
struct IRunningObjectTableVtbl {HRESULT ( *QueryInterface)(IRunningObjectTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunningObjectTable *This);ULONG ( *Release)(IRunningObjectTable *This);HRESULT ( *Register)(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);HRESULT ( *Revoke)(IRunningObjectTable *This, DWORD dwRegister);HRESULT ( *IsRunning)(IRunningObjectTable *This, IMoniker *pmkObjectName);HRESULT ( *GetObjectA)(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);HRESULT ( *NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);HRESULT ( *GetTimeOfLastChange)(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);HRESULT ( *EnumRunning)(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);};
typedef HRESULT  IWABOBJECT_GetMe_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, DWORD *lpdwAction, SBinary *lpsbEID, ULONG ulParam);
struct IWindowForBindingUIVtbl {HRESULT ( *QueryInterface)(IWindowForBindingUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWindowForBindingUI *This);ULONG ( *Release)(IWindowForBindingUI *This);HRESULT ( *GetWindow)(IWindowForBindingUI *This,  GUID * rguidReason, HWND *phwnd);};
typedef PVOID (*PALLOCATE_COMMON_BUFFER)(PDMA_ADAPTER DmaAdapter, ULONG Length, PPHYSICAL_ADDRESS LogicalAddress, BOOLEAN CacheEnabled);
struct IAMResourceControlVtbl {HRESULT ( *QueryInterface)(IAMResourceControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMResourceControl *This);ULONG ( *Release)(IAMResourceControl *This);HRESULT ( *Reserve)(IAMResourceControl *This, DWORD dwFlags, PVOID pvReserved);};
struct IActiveScriptStatsVtbl {HRESULT ( *QueryInterface)(IActiveScriptStats *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptStats *This);ULONG ( *Release)(IActiveScriptStats *This);HRESULT ( *GetStat)(IActiveScriptStats *This, DWORD stid, ULONG *pluHi, ULONG *pluLo);HRESULT ( *GetStatEx)(IActiveScriptStats *This,  GUID * guid, ULONG *pluHi, ULONG *pluLo);HRESULT ( *ResetStats)(IActiveScriptStats *This);};
struct ICommandPropertiesVtbl {HRESULT ( *QueryInterface)(ICommandProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandProperties *This);ULONG ( *Release)(ICommandProperties *This);HRESULT ( *GetProperties)(ICommandProperties *This,  ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *SetProperties)(ICommandProperties *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);};
struct IDMOQualityControlVtbl {HRESULT ( *QueryInterface)(IDMOQualityControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDMOQualityControl *This);ULONG ( *Release)(IDMOQualityControl *This);HRESULT ( *SetNow)(IDMOQualityControl *This, REFERENCE_TIME rtNow);HRESULT ( *SetStatus)(IDMOQualityControl *This, DWORD dwFlags);HRESULT ( *GetStatus)(IDMOQualityControl *This, DWORD *pdwFlags);};
struct IElementBehaviorUIVtbl {HRESULT ( *QueryInterface)(IElementBehaviorUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorUI *This);ULONG ( *Release)(IElementBehaviorUI *This);HRESULT ( *OnReceiveFocus)(IElementBehaviorUI *This, BOOL fFocus, LONG lSubDivision);HRESULT ( *GetSubDivisionProvider)(IElementBehaviorUI *This, ISubDivisionProvider **ppProvider);HRESULT ( *CanTakeFocus)(IElementBehaviorUI *This);};
struct IHTMLEditServices2Vtbl {HRESULT ( *QueryInterface)(IHTMLEditServices2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditServices2 *This);ULONG ( *Release)(IHTMLEditServices2 *This);HRESULT ( *AddDesigner)(IHTMLEditServices2 *This, IHTMLEditDesigner *pIDesigner);HRESULT ( *RemoveDesigner)(IHTMLEditServices2 *This, IHTMLEditDesigner *pIDesigner);HRESULT ( *GetSelectionServices)(IHTMLEditServices2 *This, IMarkupContainer *pIContainer, ISelectionServices **ppSelSvc);HRESULT ( *MoveToSelectionAnchor)(IHTMLEditServices2 *This, IMarkupPointer *pIStartAnchor);HRESULT ( *MoveToSelectionEnd)(IHTMLEditServices2 *This, IMarkupPointer *pIEndAnchor);HRESULT ( *SelectRange)(IHTMLEditServices2 *This, IMarkupPointer *pStart, IMarkupPointer *pEnd, SELECTION_TYPE eType);HRESULT ( *MoveToSelectionAnchorEx)(IHTMLEditServices2 *This, IDisplayPointer *pIStartAnchor);HRESULT ( *MoveToSelectionEndEx)(IHTMLEditServices2 *This, IDisplayPointer *pIEndAnchor);HRESULT ( *FreezeVirtualCaretPos)(IHTMLEditServices2 *This, BOOL fReCompute);HRESULT ( *UnFreezeVirtualCaretPos)(IHTMLEditServices2 *This, BOOL fReset);};
struct INewMenuItemServerVtbl {HRESULT ( *QueryInterface)(INewMenuItemServer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(INewMenuItemServer *This);ULONG ( *Release)(INewMenuItemServer *This);HRESULT ( *CreateNewItem)(INewMenuItemServer *This, HWND hwndParent);};
struct IProvideClassInfo2Vtbl {HRESULT ( *QueryInterface)(IProvideClassInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo2 *This);ULONG ( *Release)(IProvideClassInfo2 *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo2 *This, ITypeInfo **ppTI);HRESULT ( *GetGUID)(IProvideClassInfo2 *This, DWORD dwGuidKind, GUID *pGUID);};
struct IRpcChannelBuffer2Vtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer2 *This);ULONG ( *Release)(IRpcChannelBuffer2 *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer2 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer2 *This);HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer2 *This, DWORD *pdwVersion);};
struct ISAXEntityResolverVtbl {HRESULT ( *QueryInterface)(ISAXEntityResolver *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXEntityResolver *This);ULONG ( *Release)(ISAXEntityResolver *This);HRESULT ( *resolveEntity)(ISAXEntityResolver *This,  unsigned short *pwchPublicId,  unsigned short *pwchSystemId, VARIANT *pvarInput);};
struct ISessionPropertiesVtbl {HRESULT ( *QueryInterface)(ISessionProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISessionProperties *This);ULONG ( *Release)(ISessionProperties *This);HRESULT ( *GetProperties)(ISessionProperties *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *SetProperties)(ISessionProperties *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);};
struct IShellChangeNotifyVtbl {HRESULT ( *QueryInterface)(IShellChangeNotify *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellChangeNotify *This);ULONG ( *Release)(IShellChangeNotify *This);HRESULT ( *OnChange)(IShellChangeNotify *This, LONG lEvent, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);};
struct ITransactionClonerVtbl {HRESULT ( *QueryInterface)(ITransactionCloner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionCloner *This);ULONG ( *Release)(ITransactionCloner *This);HRESULT ( *Commit)(ITransactionCloner *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransactionCloner *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransactionCloner *This, XACTTRANSINFO *pinfo);HRESULT ( *CloneWithCommitDisabled)(ITransactionCloner *This, ITransaction **ppITransaction);};
struct ITrusteeGroupAdminVtbl {HRESULT ( *QueryInterface)(ITrusteeGroupAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrusteeGroupAdmin *This);ULONG ( *Release)(ITrusteeGroupAdmin *This);HRESULT ( *AddMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee);HRESULT ( *DeleteMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee);HRESULT ( *IsMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee, BOOL *pfStatus);HRESULT ( *GetMembers)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, ULONG *pcMembers, TRUSTEE_W **prgMembers);HRESULT ( *GetMemberships)(ITrusteeGroupAdmin *This, TRUSTEE_W *pTrustee, ULONG *pcMemberships, TRUSTEE_W **prgMemberships);};
typedef INT ( *LPNSPLOOKUPSERVICENEXT)(HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSETW lpqsResults);
typedef BOOLEAN (*PFLUSH_ADAPTER_BUFFERS)(PDMA_ADAPTER DmaAdapter, PMDL Mdl, PVOID MapRegisterBase, PVOID CurrentVa, ULONG Length, BOOLEAN WriteToDevice);
typedef BOOL ( *PFN_LMEMAddTrackedItem)(HANDLE hHeap, LPVOID pAllocMem, DWORD dwBytes, DWORD dwLineNum, PCHAR szFilename);
struct IContinueCallbackVtbl {HRESULT ( *QueryInterface)(IContinueCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinueCallback *This);ULONG ( *Release)(IContinueCallback *This);HRESULT ( *FContinue)(IContinueCallback *This);HRESULT ( *FContinuePrinting)(IContinueCallback *This, LONG nCntPrinted, LONG nCurPage, unsigned short *pwszPrintStatus);};
struct IDataAdviseHolderVtbl {HRESULT ( *QueryInterface)(IDataAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataAdviseHolder *This);ULONG ( *Release)(IDataAdviseHolder *This);HRESULT ( *Advise)(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IDataAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnDataChange)(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);};
struct IImnAdviseAccountVtbl {HRESULT ( *QueryInterface)(IImnAdviseAccount *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnAdviseAccount *This);ULONG ( *Release)(IImnAdviseAccount *This);HRESULT ( *AdviseAccount)(IImnAdviseAccount *This, DWORD dwAdviseType, ACTX *pAcctCtx);};
struct IMarkupContainer2Vtbl {HRESULT ( *QueryInterface)(IMarkupContainer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupContainer2 *This);ULONG ( *Release)(IMarkupContainer2 *This);HRESULT ( *OwningDoc)(IMarkupContainer2 *This, IHTMLDocument2 **ppDoc);HRESULT ( *CreateChangeLog)(IMarkupContainer2 *This, IHTMLChangeSink *pChangeSink, IHTMLChangeLog **ppChangeLog, BOOL fForward, BOOL fBackward);HRESULT ( *RegisterForDirtyRange)(IMarkupContainer2 *This, IHTMLChangeSink *pChangeSink, DWORD *pdwCookie);HRESULT ( *UnRegisterForDirtyRange)(IMarkupContainer2 *This, DWORD dwCookie);HRESULT ( *GetAndClearDirtyRange)(IMarkupContainer2 *This, DWORD dwCookie, IMarkupPointer *pIPointerBegin, IMarkupPointer *pIPointerEnd);int ( *GetVersionNumber)(IMarkupContainer2 *This);HRESULT ( *GetMasterElement)(IMarkupContainer2 *This, IHTMLElement **ppElementMaster);};
struct IResolveShellLinkVtbl {HRESULT ( *QueryInterface)(IResolveShellLink *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IResolveShellLink *This);ULONG ( *Release)(IResolveShellLink *This);HRESULT ( *ResolveShellLink)(IResolveShellLink *This, IUnknown *punk, HWND hwnd, DWORD fFlags);};
struct IRpcChannelBufferVtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer *This);ULONG ( *Release)(IRpcChannelBuffer *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer *This);};
struct ISdpNodeContainerVtbl {HRESULT ( *QueryInterface)(ISdpNodeContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISdpNodeContainer *This);ULONG ( *Release)(ISdpNodeContainer *This);HRESULT ( *CreateStream)(ISdpNodeContainer *This, UCHAR **ppStream, ULONG *pSize);HRESULT ( *WriteStream)(ISdpNodeContainer *This, UCHAR *pStream, ULONG *pNumBytesWritten);HRESULT ( *AppendNode)(ISdpNodeContainer *This, NodeData *pData);HRESULT ( *GetType)(ISdpNodeContainer *This, NodeContainerType *pType);HRESULT ( *SetType)(ISdpNodeContainer *This, NodeContainerType type);HRESULT ( *Walk)(ISdpNodeContainer *This, ISdpWalk *pWalk);HRESULT ( *SetNode)(ISdpNodeContainer *This, ULONG nodeIndex, NodeData *pData);HRESULT ( *GetNode)(ISdpNodeContainer *This, ULONG nodeIndex, NodeData *pData);HRESULT ( *LockContainer)(ISdpNodeContainer *This, UCHAR lock);HRESULT ( *GetNodeCount)(ISdpNodeContainer *This, ULONG *pNodeCount);HRESULT ( *CreateFromStream)(ISdpNodeContainer *This, UCHAR *pStream, ULONG size);HRESULT ( *GetNodeStringData)(ISdpNodeContainer *This, ULONG nodeIndex, NodeData *pData);HRESULT ( *GetStreamSize)(ISdpNodeContainer *This, ULONG *pSize);};
struct ISelectionObject2Vtbl {HRESULT ( *QueryInterface)(ISelectionObject2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISelectionObject2 *This);ULONG ( *Release)(ISelectionObject2 *This);HRESULT ( *Select)(ISelectionObject2 *This, ISegmentList *pISegmentList);HRESULT ( *IsPointerInSelection)(ISelectionObject2 *This, IDisplayPointer *pIDispPointer, BOOL *pfPointerInSelection, POINT *pptGlobal, IHTMLElement *pIElementOver);HRESULT ( *EmptySelection)(ISelectionObject2 *This);HRESULT ( *DestroySelection)(ISelectionObject2 *This);HRESULT ( *DestroyAllSelection)(ISelectionObject2 *This);};
typedef HRESULT ( *USERUNINSTSTUBWRAPPER)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
struct _CERT_REVOCATION_INFO {DWORD cbSize;DWORD dwRevocationResult;LPCSTR pszRevocationOid;LPVOID pvOidSpecificInfo;BOOL fHasFreshnessTime;DWORD dwFreshnessTime;PCERT_REVOCATION_CRL_INFO pCrlInfo;};
struct _CMSG_CMS_SIGNER_INFO {DWORD dwVersion;CERT_ID SignerId;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct _D3DVERTEXBUFFER_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;DWORD FVF;};
struct IChapteredRowsetVtbl {HRESULT ( *QueryInterface)(IChapteredRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChapteredRowset *This);ULONG ( *Release)(IChapteredRowset *This);HRESULT ( *AddRefChapter)(IChapteredRowset *This, HCHAPTER hChapter, DBREFCOUNT *pcRefCount);HRESULT ( *ReleaseChapter)(IChapteredRowset *This, HCHAPTER hChapter, DBREFCOUNT *pcRefCount);};
struct IContextCallbackVtbl {HRESULT ( *QueryInterface)(IContextCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContextCallback *This);ULONG ( *Release)(IContextCallback *This);HRESULT ( *ContextCallback)(IContextCallback *This, PFNCONTEXTCALL pfnCallback, ComCallData *pParam,  IID * riid, int iMethod, IUnknown *pUnk);};
struct IDeferredCommandVtbl {HRESULT ( *QueryInterface)(IDeferredCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDeferredCommand *This);ULONG ( *Release)(IDeferredCommand *This);HRESULT ( *Cancel)(IDeferredCommand *This);HRESULT ( *Confidence)(IDeferredCommand *This, LONG *pConfidence);HRESULT ( *Postpone)(IDeferredCommand *This, REFTIME newtime);HRESULT ( *GetHResult)(IDeferredCommand *This, HRESULT *phrResult);};
struct IElementBehaviorVtbl {HRESULT ( *QueryInterface)(IElementBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehavior *This);ULONG ( *Release)(IElementBehavior *This);HRESULT ( *Init)(IElementBehavior *This, IElementBehaviorSite *pBehaviorSite);HRESULT ( *Notify)(IElementBehavior *This, LONG lEvent, VARIANT *pVar);HRESULT ( *Detach)(IElementBehavior *This);};
struct IEnumPStoreTypesVtbl {HRESULT ( *QueryInterface)(IEnumPStoreTypes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPStoreTypes *This);ULONG ( *Release)(IEnumPStoreTypes *This);HRESULT ( *Next)(IEnumPStoreTypes *This, DWORD celt, GUID *rgelt, DWORD *pceltFetched);HRESULT ( *Skip)(IEnumPStoreTypes *This, DWORD celt);HRESULT ( *Reset)(IEnumPStoreTypes *This);HRESULT ( *Clone)(IEnumPStoreTypes *This, IEnumPStoreTypes **ppenum);};
struct IHtmlLoadOptionsVtbl {HRESULT ( *QueryInterface)(IHtmlLoadOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHtmlLoadOptions *This);ULONG ( *Release)(IHtmlLoadOptions *This);HRESULT ( *QueryOption)(IHtmlLoadOptions *This, DWORD dwOption, LPVOID pBuffer, ULONG *pcbBuf);HRESULT ( *SetOption)(IHtmlLoadOptions *This, DWORD dwOption, LPVOID pBuffer, ULONG cbBuf);};
struct IMimeObjResolverVtbl {HRESULT ( *QueryInterface)(IMimeObjResolver *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeObjResolver *This);ULONG ( *Release)(IMimeObjResolver *This);HRESULT ( *MimeOleObjectFromMoniker)(IMimeObjResolver *This, BINDF bindf, IMoniker *pmkOriginal, IBindCtx *pBindCtx,  IID * riid, LPVOID *ppvObject, IMoniker **ppmkNew);};
struct IMimeWebDocumentVtbl {HRESULT ( *QueryInterface)(IMimeWebDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeWebDocument *This);ULONG ( *Release)(IMimeWebDocument *This);HRESULT ( *GetURL)(IMimeWebDocument *This, LPSTR *ppszURL);HRESULT ( *BindToStorage)(IMimeWebDocument *This,  IID * riid, LPVOID *ppvObject);};
struct IMultipleResultsVtbl {HRESULT ( *QueryInterface)(IMultipleResults *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultipleResults *This);ULONG ( *Release)(IMultipleResults *This);HRESULT ( *GetResult)(IMultipleResults *This, IUnknown *pUnkOuter, DB_LRESERVE reserved,  IID * riid, DBROWCOUNT *pcRowsAffected, IUnknown **ppRowset);};
struct ISearchQueryHitsVtbl {HRESULT ( *QueryInterface)(ISearchQueryHits *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchQueryHits *This);ULONG ( *Release)(ISearchQueryHits *This);SCODE ( *Init)(ISearchQueryHits *This, IFilter *pflt, ULONG ulFlags);SCODE ( *NextHitMoniker)(ISearchQueryHits *This, ULONG *pcMnk, IMoniker ***papMnk);SCODE ( *NextHitOffset)(ISearchQueryHits *This, ULONG *pcRegion, FILTERREGION **paRegion);};
struct IWinInetHttpInfoVtbl {HRESULT ( *QueryInterface)(IWinInetHttpInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetHttpInfo *This);ULONG ( *Release)(IWinInetHttpInfo *This);HRESULT ( *QueryOption)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);HRESULT ( *QueryInfo)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);};
struct IWrappedProtocolVtbl {HRESULT ( *QueryInterface)(IWrappedProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWrappedProtocol *This);ULONG ( *Release)(IWrappedProtocol *This);HRESULT ( *GetWrapperCode)(IWrappedProtocol *This, LONG *pnCode, DWORD_PTR dwReserved);};
typedef int ( *LPWSCINSTALLPROVIDER)(LPGUID lpProviderId,  WCHAR *lpszProviderDllPath,  LPWSAPROTOCOL_INFOW lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno);
struct _ACTRL_ACCESS_ENTRYA {TRUSTEE_A Trustee;ULONG fAccessFlags;ACCESS_RIGHTS Access;ACCESS_RIGHTS ProvSpecificAccess;INHERIT_FLAGS Inheritance;LPSTR lpInheritProperty;};
struct _CRYPT_PROVIDER_CERT {DWORD cbStruct;PCCERT_CONTEXT pCert;BOOL fCommercial;BOOL fTrustedRoot;BOOL fSelfSigned;BOOL fTestCert;DWORD dwRevokedReason;DWORD dwConfidence;DWORD dwError;CTL_CONTEXT *pTrustListContext;BOOL fTrustListSignerCert;PCCTL_CONTEXT pCtlContext;DWORD dwCtlError;BOOL fIsCyclic;};
struct _D3DINDEXBUFFER_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;};
struct _DOT11_WEP_KEY_ENTRY {BOOL bPersist;ULONG uWEPKeyIndex;DWORD dwAlgorithm;DOT11_ROW_STATUS WEPKeyStatus;PDOT11_WEP_KEY_DATA pDot11WEPKeyData;};
struct _IMAGELISTDRAWPARAMS {DWORD cbSize;HIMAGELIST himl;int i;HDC hdcDst;int x;int y;int cx;int cy;int xBitmap;int yBitmap;COLORREF rgbBk;COLORREF rgbFg;UINT fStyle;DWORD dwRop;};
struct tagFETCH_CMD_RESULTS {DWORD dwMsgSeqNum;BOOL bMsgFlags;IMAP_MSGFLAGS mfMsgFlags;BOOL bRFC822Size;DWORD dwRFC822Size;BOOL bUID;DWORD dwUID;BOOL bInternalDate;FILETIME ftInternalDate;LPARAM lpFetchCookie1;LPARAM lpFetchCookie2;};
struct IAMStreamConfigVtbl {HRESULT ( *QueryInterface)(IAMStreamConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamConfig *This);ULONG ( *Release)(IAMStreamConfig *This);HRESULT ( *SetFormat)(IAMStreamConfig *This, AM_MEDIA_TYPE *pmt);HRESULT ( *GetFormat)(IAMStreamConfig *This, AM_MEDIA_TYPE **ppmt);HRESULT ( *GetNumberOfCapabilities)(IAMStreamConfig *This, int *piCount, int *piSize);HRESULT ( *GetStreamCaps)(IAMStreamConfig *This, int iIndex, AM_MEDIA_TYPE **ppmt, BYTE *pSCC);};
struct IAsyncOperationVtbl {HRESULT ( *QueryInterface)(IAsyncOperation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncOperation *This);ULONG ( *Release)(IAsyncOperation *This);HRESULT ( *SetAsyncMode)(IAsyncOperation *This, BOOL fDoOpAsync);HRESULT ( *GetAsyncMode)(IAsyncOperation *This, BOOL *pfIsOpAsync);HRESULT ( *StartOperation)(IAsyncOperation *This, IBindCtx *pbcReserved);HRESULT ( *InOperation)(IAsyncOperation *This, BOOL *pfInAsyncOp);HRESULT ( *EndOperation)(IAsyncOperation *This, HRESULT hResult, IBindCtx *pbcReserved, DWORD dwEffects);};
struct ICifRWComponentVtbl {HRESULT ( *SetGUID)(ICifComponent *This, LPCSTR pszGUID);HRESULT ( *SetDescription)(ICifComponent *This, LPCSTR pszDesc);HRESULT ( *SetUrl)(ICifComponent *This, UINT uUrlNum, LPCSTR pszUrl, DWORD dwUrlFlags);HRESULT ( *SetCommand)(ICifComponent *This, UINT uCmdNum, LPCSTR pszCmd, LPCSTR pszSwitches, DWORD dwType);HRESULT ( *SetVersion)(ICifComponent *This, LPCSTR pszVersion);HRESULT ( *SetUninstallKey)(ICifComponent *This, LPCSTR pszKey);HRESULT ( *SetInstalledSize)(ICifComponent *This, DWORD dwWin, DWORD dwApp);HRESULT ( *SetDownloadSize)(ICifComponent *This, DWORD);HRESULT ( *SetExtractSize)(ICifComponent *This, DWORD);HRESULT ( *DeleteDependency)(ICifComponent *This, LPCSTR pszID, char chType);HRESULT ( *AddDependency)(ICifComponent *This, LPCSTR pszID, char chType);HRESULT ( *SetUIVisible)(ICifComponent *This, BOOL);HRESULT ( *SetGroup)(ICifComponent *This, LPCSTR pszID);HRESULT ( *SetPlatform)(ICifComponent *This, DWORD);HRESULT ( *SetPriority)(ICifComponent *This, DWORD);HRESULT ( *SetReboot)(ICifComponent *This, BOOL);HRESULT ( *DeleteFromModes)(ICifComponent *This, LPCSTR pszMode);HRESULT ( *AddToMode)(ICifComponent *This, LPCSTR pszMode);HRESULT ( *SetModes)(ICifComponent *This, LPCSTR pszMode);HRESULT ( *CopyComponent)(ICifComponent *This, LPCSTR pszCifFile);HRESULT ( *AddToTreatAsOne)(ICifComponent *This, LPCSTR pszCompID);HRESULT ( *SetDetails)(ICifComponent *This, LPCSTR pszDesc);};
struct ICommandPersistVtbl {HRESULT ( *QueryInterface)(ICommandPersist *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandPersist *This);ULONG ( *Release)(ICommandPersist *This);HRESULT ( *DeleteCommand)(ICommandPersist *This, DBID *pCommandID);HRESULT ( *GetCurrentCommand)(ICommandPersist *This, DBID **ppCommandID);HRESULT ( *LoadCommand)(ICommandPersist *This, DBID *pCommandID, DWORD dwFlags);HRESULT ( *SaveCommand)(ICommandPersist *This, DBID *pCommandID, DWORD dwFlags);};
struct IDXTScaleOutputVtbl {HRESULT ( *QueryInterface)(IDXTScaleOutput *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTScaleOutput *This);ULONG ( *Release)(IDXTScaleOutput *This);HRESULT ( *SetOutputSize)(IDXTScaleOutput *This,  SIZE OutSize, BOOL bMaintainAspect);};
struct IMAPIAdviseSinkVtbl {HRESULT ( *QueryInterface)(IMAPIAdviseSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIAdviseSink *This);ULONG ( *Release)(IMAPIAdviseSink *This);ULONG ( *OnNotify)(IMAPIAdviseSink *This, ULONG cNotif, LPNOTIFICATION_WABSDEFS lpNotifications);};
struct IMixerPinConfigVtbl {HRESULT ( *SetRelativePosition)(IWABExtInit *This, DWORD dwLeft, DWORD dwTop, DWORD dwRight, DWORD dwBottom);HRESULT ( *GetRelativePosition)(IWABExtInit *This, DWORD *pdwLeft, DWORD *pdwTop, DWORD *pdwRight, DWORD *pdwBottom);HRESULT ( *SetZOrder)(IWABExtInit *This, DWORD dwZOrder);HRESULT ( *GetZOrder)(IWABExtInit *This, DWORD *pdwZOrder);HRESULT ( *SetColorKey)(IWABExtInit *This, COLORKEY *pColorKey);HRESULT ( *GetColorKey)(IWABExtInit *This, COLORKEY *pColorKey, DWORD *pColor);HRESULT ( *SetBlendingParameter)(IWABExtInit *This, DWORD dwBlendingParameter);HRESULT ( *GetBlendingParameter)(IWABExtInit *This, DWORD *pdwBlendingParameter);HRESULT ( *SetAspectRatioMode)(IWABExtInit *This, AM_ASPECT_RATIO_MODE amAspectRatioMode);HRESULT ( *GetAspectRatioMode)(IWABExtInit *This, AM_ASPECT_RATIO_MODE *pamAspectRatioMode);HRESULT ( *SetStreamTransparent)(IWABExtInit *This, BOOL bStreamTransparent);HRESULT ( *GetStreamTransparent)(IWABExtInit *This, BOOL *pbStreamTransparent);};
struct IPersistHistoryVtbl {HRESULT ( *QueryInterface)(IPersistHistory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistHistory *This);ULONG ( *Release)(IPersistHistory *This);HRESULT ( *GetClassID)(IPersistHistory *This, CLSID *pClassID);HRESULT ( *LoadHistory)(IPersistHistory *This, IStream *pStream, IBindCtx *pbc);HRESULT ( *SaveHistory)(IPersistHistory *This, IStream *pStream);HRESULT ( *SetPositionCookie)(IPersistHistory *This, DWORD dwPositioncookie);HRESULT ( *GetPositionCookie)(IPersistHistory *This, DWORD *pdwPositioncookie);};
struct IPersistStorageVtbl {HRESULT ( *QueryInterface)(IPersistStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStorage *This);ULONG ( *Release)(IPersistStorage *This);HRESULT ( *GetClassID)(IPersistStorage *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStorage *This);HRESULT ( *InitNew)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Load)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Save)(IPersistStorage *This, IStorage *pStgSave, BOOL fSameAsLoad);HRESULT ( *SaveCompleted)(IPersistStorage *This, IStorage *pStgNew);HRESULT ( *HandsOffStorage)(IPersistStorage *This);};
struct IProfferServiceVtbl {HRESULT ( *QueryInterface)(IProfferService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProfferService *This);ULONG ( *Release)(IProfferService *This);HRESULT ( *ProfferService)(IProfferService *This,  GUID * rguidService, IServiceProvider *psp, DWORD *pdwCookie);HRESULT ( *RevokeService)(IProfferService *This, DWORD dwCookie);};
struct IProgressNotifyVtbl {HRESULT ( *QueryInterface)(IProgressNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProgressNotify *This);ULONG ( *Release)(IProgressNotify *This);HRESULT ( *OnProgress)(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, BOOL fAccurate, BOOL fOwner);};
struct IRemoteComputerVtbl {HRESULT ( *QueryInterface)(IRemoteComputer *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IRemoteComputer *This);ULONG ( *Release)(IRemoteComputer *This);HRESULT ( *Initialize)(IRemoteComputer *This,  WCHAR *pszMachine, BOOL bEnumerating);};
struct IStdMarshalInfoVtbl {HRESULT ( *QueryInterface)(IStdMarshalInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStdMarshalInfo *This);ULONG ( *Release)(IStdMarshalInfo *This);HRESULT ( *GetClassForHandler)(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);};
typedef BOOL ( *LPDDENUMCALLBACKEXA)(GUID *, LPSTR, LPSTR, LPVOID, HMONITOR);
typedef int ( *LPWSCUPDATEPROVIDER)(LPGUID lpProviderId,  WCHAR *lpszProviderDllPath,  LPWSAPROTOCOL_INFOW lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno);
typedef void (*PFREE_COMMON_BUFFER)(PDMA_ADAPTER DmaAdapter, ULONG Length, PHYSICAL_ADDRESS LogicalAddress, PVOID VirtualAddress, BOOLEAN CacheEnabled);
typedef HRESULT ( *REGSAVERESTOREONINF)(HWND hWnd, PCSTR pszTitle, PCSTR pszINF, PCSTR pszSection, HKEY hHKLMBackKey, HKEY hHKCUBackKey, DWORD dwFlags);
typedef HRESULT ( *USERINSTSTUBWRAPPER)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
struct _CERT_CHAIN_CONTEXT {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cChain;PCERT_SIMPLE_CHAIN *rgpChain;DWORD cLowerQualityChainContext;PCCERT_CHAIN_CONTEXT *rgpLowerQualityChainContext;BOOL fHasRevocationFreshnessTime;DWORD dwRevocationFreshnessTime;};
struct _DEVICE_DESCRIPTION {ULONG Version;BOOLEAN Master;BOOLEAN ScatterGather;BOOLEAN DemandMode;BOOLEAN AutoInitialize;BOOLEAN Dma32BitAddresses;BOOLEAN IgnoreCount;BOOLEAN Reserved1;BOOLEAN Dma64BitAddresses;ULONG DoNotUse2;ULONG DmaChannel;INTERFACE_TYPE InterfaceType;DMA_WIDTH DmaWidth;DMA_SPEED DmaSpeed;ULONG MaximumLength;ULONG DmaPort;};
struct _FIREWALL_LOG_ENTRY {FW_IP_ADDRESS PrivateHost;FW_IP_ADDRESS PublicHost;INT Protocol;FW_ACTIONS Action;FW_DIRECTIONS Direction;_FIREWALL_LOG_ENTRY___5B647FC0AA82C156F9A36920F4FB3D5C __anonymous0;};
struct _WAIT_CONTEXT_BLOCK {KDEVICE_QUEUE_ENTRY WaitQueueEntry;PDRIVER_CONTROL DeviceRoutine;PVOID DeviceContext;ULONG NumberOfMapRegisters;PVOID DeviceObject;PVOID CurrentIrp;PKDPC BufferChainingDpc;};
struct tagOBJECTDESCRIPTOR {ULONG cbSize;CLSID clsid;DWORD dwDrawAspect;SIZEL sizel;POINTL pointl;DWORD dwStatus;DWORD dwFullUserTypeName;DWORD dwSrcOfCopy;};
struct IDXLookupTableVtbl {HRESULT ( *QueryInterface)(IDXLookupTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXLookupTable *This);ULONG ( *Release)(IDXLookupTable *This);HRESULT ( *GetGenerationId)(IDXLookupTable *This, ULONG *pID);HRESULT ( *IncrementGenerationId)(IDXLookupTable *This, BOOL bRefresh);HRESULT ( *GetObjectSize)(IDXLookupTable *This, ULONG *pcbSize);HRESULT ( *GetTables)(IDXLookupTable *This,BYTE  *    RedLUT, BYTE GreenLUT[256],BYTE  *    BlueLUT, BYTE AlphaLUT[256]);HRESULT ( *IsChannelIdentity)(IDXLookupTable *This, DXBASESAMPLE *pSampleBools);HRESULT ( *GetIndexValues)(IDXLookupTable *This, ULONG Index, DXBASESAMPLE *pSample);HRESULT ( *ApplyTables)(IDXLookupTable *This, DXSAMPLE *pSamples, ULONG cSamples);};
struct IFillLockBytesVtbl {HRESULT ( *QueryInterface)(IFillLockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFillLockBytes *This);ULONG ( *Release)(IFillLockBytes *This);HRESULT ( *FillAppend)(IFillLockBytes *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *FillAt)(IFillLockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *SetFillSize)(IFillLockBytes *This, ULARGE_INTEGER ulSize);HRESULT ( *Terminate)(IFillLockBytes *This, BOOL bCanceled);};
struct IFolderAndItemVtbl {HRESULT ( *QueryInterface)(IFolderAndItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderAndItem *This);ULONG ( *Release)(IFolderAndItem *This);HRESULT ( *SetFolderAndItem)(IFolderAndItem *This, IShellFolder *psf, LPCITEMIDLIST pidl);HRESULT ( *GetFolderAndItem)(IFolderAndItem *This, IShellFolder **ppsf, LPITEMIDLIST *ppidl);};
struct IHTMLEditHost2Vtbl {HRESULT ( *QueryInterface)(IHTMLEditHost2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditHost2 *This);ULONG ( *Release)(IHTMLEditHost2 *This);HRESULT ( *SnapRect)(IHTMLEditHost2 *This, IHTMLElement *pIElement, RECT *prcNew, ELEMENT_CORNER eHandle);HRESULT ( *PreDrag)(IHTMLEditHost2 *This);};
struct IMDRangeRowsetVtbl {HRESULT ( *QueryInterface)(IMDRangeRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDRangeRowset *This);ULONG ( *Release)(IMDRangeRowset *This);HRESULT ( *GetRangeRowset)(IMDRangeRowset *This, IUnknown *pUnkOuter, DBORDINAL ulStartCell, DBORDINAL ulEndCell,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);};
struct IOleClientSiteVtbl {HRESULT ( *QueryInterface)(IOleClientSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleClientSite *This);ULONG ( *Release)(IOleClientSite *This);HRESULT ( *SaveObject)(IOleClientSite *This);HRESULT ( *GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *GetContainer)(IOleClientSite *This, IOleContainer **ppContainer);HRESULT ( *ShowObject)(IOleClientSite *This);HRESULT ( *OnShowWindow)(IOleClientSite *This, BOOL fShow);HRESULT ( *RequestNewObjectLayout)(IOleClientSite *This);};
struct IPersistFolderVtbl {HRESULT ( *QueryInterface)(IPersistFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFolder *This);ULONG ( *Release)(IPersistFolder *This);HRESULT ( *GetClassID)(IPersistFolder *This, CLSID *pClassID);HRESULT ( *Initialize)(IPersistFolder *This, LPCITEMIDLIST pidl);};
typedef HRESULT ( *LAUNCHINFSECTIONEX)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
typedef HRESULT  SHOWHTMLDIALOGEXFN(HWND hwndParent, IMoniker *pmk, DWORD dwDialogFlags, VARIANT *pvarArgIn, WCHAR *pchOptions, VARIANT *pvArgOut);
struct _CERT_SIMPLE_CHAIN {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cElement;PCERT_CHAIN_ELEMENT *rgpElement;PCERT_TRUST_LIST_INFO pTrustListInfo;BOOL fHasRevocationFreshnessTime;DWORD dwRevocationFreshnessTime;};
struct _ISA_PNP_RESOURCES {USHORT Flags;struct _ISA_PNP_RESOURCES___B10D0EB096FDB570503A50FD378F9FB4 Memory24Descriptors[4];struct _ISA_PNP_RESOURCES___CBBBBB801E0B5AAFC7252BC6A195EFA3 Memory32Descriptors[4];USHORT IoPortDescriptors[8];struct _ISA_PNP_RESOURCES___D30A615D33D92688260AD94A2A31BFD2 IRQDescriptors[2];UCHAR DMADescriptors[2];};
struct ICifComponentVtbl {HRESULT ( *GetID)(ICifComponent *This, LPSTR pszID, DWORD dwSize);HRESULT ( *GetGUID)(ICifComponent *This, LPSTR pszGUID, DWORD dwSize);HRESULT ( *GetDescription)(ICifComponent *This, LPSTR pszDesc, DWORD dwSize);HRESULT ( *GetDetails)(ICifComponent *This, LPSTR pszDetails, DWORD dwSize);HRESULT ( *GetUrl)(ICifComponent *This, UINT uUrlNum, LPSTR pszUrl, DWORD dwSize, LPDWORD pdwUrlFlags);HRESULT ( *GetFileExtractList)(ICifComponent *This, UINT uUrlNum, LPSTR pszExtract, DWORD dwSize);HRESULT ( *GetUrlCheckRange)(ICifComponent *This, UINT uUrlNum, LPDWORD pdwMin, LPDWORD pdwMax);HRESULT ( *GetCommand)(ICifComponent *This, UINT uCmdNum, LPSTR pszCmd, DWORD dwCmdSize, LPSTR pszSwitches, DWORD dwSwitchSize, LPDWORD pdwType);HRESULT ( *GetVersion)(ICifComponent *This, LPDWORD pdwVersion, LPDWORD pdwBuild);HRESULT ( *GetLocale)(ICifComponent *This, LPSTR pszLocale, DWORD dwSize);HRESULT ( *GetUninstallKey)(ICifComponent *This, LPSTR pszKey, DWORD dwSize);HRESULT ( *GetInstalledSize)(ICifComponent *This, LPDWORD pdwWin, LPDWORD pdwApp);DWORD ( *GetDownloadSize)(ICifComponent *This);DWORD ( *GetExtractSize)(ICifComponent *This);HRESULT ( *GetSuccessKey)(ICifComponent *This, LPSTR pszKey, DWORD dwSize);HRESULT ( *GetProgressKeys)(ICifComponent *This, LPSTR pszProgress, DWORD dwProgSize, LPSTR pszCancel, DWORD dwCancelSize);HRESULT ( *IsActiveSetupAware)(ICifComponent *This);HRESULT ( *IsRebootRequired)(ICifComponent *This);HRESULT ( *RequiresAdminRights)(ICifComponent *This);DWORD ( *GetPriority)(ICifComponent *This);HRESULT ( *GetDependency)(ICifComponent *This, UINT uDepNum, LPSTR pszID, DWORD dwBuf, char *pchType, LPDWORD pdwVer, LPDWORD pdwBuild);DWORD ( *GetPlatform)(ICifComponent *This);HRESULT ( *GetMode)(ICifComponent *This, UINT uModeNum, LPSTR pszMode, DWORD dwSize);HRESULT ( *GetGroup)(ICifComponent *This, LPSTR pszID, DWORD dwSize);HRESULT ( *IsUIVisible)(ICifComponent *This);HRESULT ( *GetPatchID)(ICifComponent *This, LPSTR pszID, DWORD dwSize);HRESULT ( *GetDetVersion)(ICifComponent *This, LPSTR pszDLL, DWORD dwdllSize, LPSTR pszEntry, DWORD dwentSize);HRESULT ( *GetTreatAsOneComponents)(ICifComponent *This, UINT uNum, LPSTR pszID, DWORD dwBuf);HRESULT ( *GetCustomData)(LPSTR pszKey, LPSTR pszData, DWORD dwSize);DWORD ( *IsComponentInstalled)(ICifComponent *This);HRESULT ( *IsComponentDownloaded)(ICifComponent *This);DWORD ( *IsThisVersionInstalled)(ICifComponent *This, DWORD dwAskVer, DWORD dwAskBld, LPDWORD pdwVersion, LPDWORD pdwBuild);DWORD ( *GetInstallQueueState)(ICifComponent *This);HRESULT ( *SetInstallQueueState)(ICifComponent *This, DWORD dwState);DWORD ( *GetActualDownloadSize)(ICifComponent *This);DWORD ( *GetCurrentPriority)(ICifComponent *This);HRESULT ( *SetCurrentPriority)(ICifComponent *This, DWORD dwPriority);};
struct IConfigAviMuxVtbl {HRESULT ( *QueryInterface)(IConfigAviMux *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConfigAviMux *This);ULONG ( *Release)(IConfigAviMux *This);HRESULT ( *SetMasterStream)(IConfigAviMux *This, LONG iStream);HRESULT ( *GetMasterStream)(IConfigAviMux *This, LONG *pStream);HRESULT ( *SetOutputCompatibilityIndex)(IConfigAviMux *This, BOOL fOldIndex);HRESULT ( *GetOutputCompatibilityIndex)(IConfigAviMux *This, BOOL *pfOldIndex);};
struct IDXRasterizerVtbl {HRESULT ( *QueryInterface)(IDXRasterizer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXRasterizer *This);ULONG ( *Release)(IDXRasterizer *This);HRESULT ( *SetSurface)(IDXRasterizer *This, IDXSurface *pDXSurface);HRESULT ( *GetSurface)(IDXRasterizer *This, IDXSurface **ppDXSurface);HRESULT ( *SetFill)(IDXRasterizer *This, ULONG ulIndex, IDXSurface *pSurface,  POINT *ppt, DXSAMPLE FillColor);HRESULT ( *GetFill)(IDXRasterizer *This, ULONG ulIndex, IDXSurface **ppSurface, POINT *ppt, DXSAMPLE *pFillColor);HRESULT ( *BeginRendering)(IDXRasterizer *This, ULONG ulTimeOut);HRESULT ( *EndRendering)(IDXRasterizer *This);HRESULT ( *RenderScan)(IDXRasterizer *This,  DXRASTERSCANINFO *pScanInfo);HRESULT ( *SetPixel)(IDXRasterizer *This, DXRASTERPOINTINFO *pPointInfo);HRESULT ( *FillRect)(IDXRasterizer *This,  DXRASTERRECTINFO *pRectInfo);HRESULT ( *GetBounds)(IDXRasterizer *This, DXBNDS *pBounds);};
struct IDownloadSiteVtbl {HRESULT ( *QueryInterface)(IDownloadSite *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDownloadSite *This);ULONG ( *Release)(IDownloadSite *This);HRESULT ( *GetData)(IDownloadSite *This, DOWNLOADSITE **pds);};
struct IFilterStatusVtbl {HRESULT ( *QueryInterface)(IFilterStatus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterStatus *This);ULONG ( *Release)(IFilterStatus *This);SCODE ( *Initialize)(IFilterStatus *This,  WCHAR *pwszCatalogName,  WCHAR *pwszCatalogPath);SCODE ( *PreFilter)(IFilterStatus *This,  WCHAR *pwszPath);SCODE ( *FilterLoad)(IFilterStatus *This,  WCHAR *pwszPath, SCODE scFilterStatus);SCODE ( *PostFilter)(IFilterStatus *This,  WCHAR *pwszPath, SCODE scFilterStatus);};
struct IHTMLEditHostVtbl {HRESULT ( *QueryInterface)(IHTMLEditHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditHost *This);ULONG ( *Release)(IHTMLEditHost *This);HRESULT ( *SnapRect)(IHTMLEditHost *This, IHTMLElement *pIElement, RECT *prcNew, ELEMENT_CORNER eHandle);};
struct IMAPIProgressVtbl {HRESULT ( *QueryInterface)(IMAPIProgress *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIProgress *This);ULONG ( *Release)(IMAPIProgress *This);HRESULT ( *Progress)(IMAPIProgress *This, ULONG ulValue, ULONG ulCount, ULONG ulTotal);HRESULT ( *GetFlags)(IMAPIProgress *This, ULONG *lpulFlags);HRESULT ( *GetMax)(IMAPIProgress *This, ULONG *lpulMax);HRESULT ( *GetMin)(IMAPIProgress *This, ULONG *lpulMin);HRESULT ( *SetLimits)(IMAPIProgress *This, LPULONG lpulMin, LPULONG lpulMax, LPULONG lpulFlags);};
struct IRowsetAsynchVtbl {HRESULT ( *QueryInterface)(IRowsetAsynch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetAsynch *This);ULONG ( *Release)(IRowsetAsynch *This);HRESULT ( *RatioFinished)(IRowsetAsynch *This, DBCOUNTITEM *pulDenominator, DBCOUNTITEM *pulNumerator, DBCOUNTITEM *pcRows, BOOL *pfNewRows);HRESULT ( *Stop)(IRowsetAsynch *This);};
struct IShellExtInitVtbl {HRESULT ( *QueryInterface)(IShellExtInit *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellExtInit *This);ULONG ( *Release)(IShellExtInit *This);HRESULT ( *Initialize)(IShellExtInit *This, LPCITEMIDLIST pidlFolder, IDataObject *lpdobj, HKEY hkeyProgID);};
struct ITransaction2Vtbl {HRESULT ( *QueryInterface)(ITransaction2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransaction2 *This);ULONG ( *Release)(ITransaction2 *This);HRESULT ( *Commit)(ITransaction2 *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransaction2 *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransaction2 *This, XACTTRANSINFO *pinfo);HRESULT ( *CloneWithCommitDisabled)(ITransaction2 *This, ITransaction **ppITransaction);HRESULT ( *GetTransactionInfo2)(ITransaction2 *This, XACTTRANSINFO *pinfo);};
typedef BOOL ( *LPWSPGETQOSBYNAME)(SOCKET s, LPWSABUF lpQOSName, LPQOS lpQOS, LPINT lpErrno);
typedef BOOLEAN (*PFAST_IO_MDL_READ)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, ULONG Length, ULONG LockKey, PMDL *MdlChain, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
typedef BOOL ( *PFN_SetAllocFlags)(HANDLE hProc, HANDLE hHeap, LPVOID lpMem, DWORD dwOp, WORD wFlag);
struct _DOT11_WEP_UPLOAD {ULONG uReserved;DOT11_OFFLOAD_TYPE dot11OffloadType;HANDLE hOffload;ULONG uNumOfRWsUsed;DOT11_IV48_COUNTER dot11IV48Counters[16];USHORT usDot11RWBitMaps[16];};
struct _TOKEN_STATISTICS {LUID TokenId;LUID AuthenticationId;LARGE_INTEGER ExpirationTime;TOKEN_TYPE TokenType;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;DWORD DynamicCharged;DWORD DynamicAvailable;DWORD GroupCount;DWORD PrivilegeCount;LUID ModifiedId;};
struct tACMDRIVERDETAILS {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;WORD wMid;WORD wPid;DWORD vdwACM;DWORD vdwDriver;DWORD fdwSupport;DWORD cFormatTags;DWORD cFilterTags;HICON hicon;WCHAR szShortName[32];WCHAR szLongName[128];WCHAR szCopyright[80];WCHAR szLicensing[128];WCHAR szFeatures[512];};
struct tagDRAWITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemAction;UINT itemState;HWND hwndItem;HDC hDC;RECT rcItem;DWORD itemData;};
struct tagNEWTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct DXRAWSURFACEINFO {BYTE *pFirstByte;int lPitch;ULONG Width;ULONG Height; GUID *pPixelFormat;HDC hdc;DWORD dwColorKey;DXBASESAMPLE *pPalette;};
struct IChannelHookVtbl {HRESULT ( *QueryInterface)(IChannelHook *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChannelHook *This);ULONG ( *Release)(IChannelHook *This);void ( *ClientGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize);void ( *ClientFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer);void ( *ClientNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);void ( *ServerNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);void ( *ServerGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, HRESULT hrFault, ULONG *pDataSize);void ( *ServerFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);};
struct IConvertTypeVtbl {HRESULT ( *QueryInterface)(IConvertType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConvertType *This);ULONG ( *Release)(IConvertType *This);HRESULT ( *CanConvert)(IConvertType *This, DBTYPE wFromType, DBTYPE wToType, DBCONVERTFLAGS dwConvertFlags);};
struct IInputObjectVtbl {HRESULT ( *QueryInterface)(IInputObject *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IInputObject *This);ULONG ( *Release)(IInputObject *This);HRESULT ( *UIActivateIO)(IInputObject *This, BOOL fActivate, LPMSG lpMsg);HRESULT ( *HasFocusIO)(IInputObject *This);HRESULT ( *TranslateAcceleratorIO)(IInputObject *This, LPMSG lpMsg);};
struct IMAPIControlVtbl {HRESULT ( *QueryInterface)(IMAPIControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIControl *This);ULONG ( *Release)(IMAPIControl *This);HRESULT ( *GetLastError)(IMAPIControl *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Activate)(IMAPIControl *This, ULONG ulFlags, ULONG ulUIParam);HRESULT ( *GetState)(IMAPIControl *This, ULONG ulFlags, ULONG *lpulState);};
struct IMLangStringVtbl {HRESULT ( *QueryInterface)(IMLangString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangString *This);ULONG ( *Release)(IMLangString *This);HRESULT ( *Sync)(IMLangString *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangString *This, int *plLen);HRESULT ( *SetMLStr)(IMLangString *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangString *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);};
struct IMarqueeInfoVtbl {HRESULT ( *QueryInterface)(IMarqueeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarqueeInfo *This);ULONG ( *Release)(IMarqueeInfo *This);HRESULT ( *GetDocCoords)(IMarqueeInfo *This, LPRECT prcView, BOOL bGetOnlyIfFullyLoaded, BOOL *pfFullyLoaded, int WidthToFormatPageTo);};
struct IMediaBufferVtbl {HRESULT ( *QueryInterface)(IMediaBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaBuffer *This);ULONG ( *Release)(IMediaBuffer *This);HRESULT ( *SetLength)(IMediaBuffer *This, DWORD cbLength);HRESULT ( *GetMaxLength)(IMediaBuffer *This, DWORD *pcbMaxLength);HRESULT ( *GetBufferAndLength)(IMediaBuffer *This, BYTE **ppBuffer, DWORD *pcbLength);};
struct IMemInputPinVtbl {HRESULT ( *QueryInterface)(IMemInputPin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemInputPin *This);ULONG ( *Release)(IMemInputPin *This);HRESULT ( *GetAllocator)(IMemInputPin *This, IMemAllocator **ppAllocator);HRESULT ( *NotifyAllocator)(IMemInputPin *This, IMemAllocator *pAllocator, BOOL bReadOnly);HRESULT ( *GetAllocatorRequirements)(IMemInputPin *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *Receive)(IMemInputPin *This, IMediaSample *pSample);HRESULT ( *ReceiveMultiple)(IMemInputPin *This, IMediaSample **pSamples, int nSamples, int *nSamplesProcessed);HRESULT ( *ReceiveCanBlock)(IMemInputPin *This);};
struct IOptionArrayVtbl {HRESULT ( *QueryInterface)(IOptionArray *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOptionArray *This);ULONG ( *Release)(IOptionArray *This);HRESULT ( *QueryOption)(IOptionArray *This, DWORD dwOption, LPVOID pBuffer, ULONG *pcbBuf);HRESULT ( *SetOption)(IOptionArray *This, DWORD dwOption, LPVOID pBuffer, ULONG cbBuf);};
struct IPersistMimeVtbl {HRESULT ( *QueryInterface)(IPersistMime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMime *This);ULONG ( *Release)(IPersistMime *This);HRESULT ( *GetClassID)(IPersistMime *This, CLSID *pClassID);HRESULT ( *Load)(IPersistMime *This, IMimeMessage *pMsg);HRESULT ( *Save)(IPersistMime *This, IMimeMessage *pMsg, DWORD dwFlags);};
struct ISegmentListVtbl {HRESULT ( *QueryInterface)(ISegmentList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISegmentList *This);ULONG ( *Release)(ISegmentList *This);HRESULT ( *CreateIterator)(ISegmentList *This, ISegmentListIterator **ppIIter);HRESULT ( *GetType)(ISegmentList *This, SELECTION_TYPE *peType);HRESULT ( *IsEmpty)(ISegmentList *This, BOOL *pfEmpty);};
struct ITransactionVtbl {HRESULT ( *QueryInterface)(ITransaction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransaction *This);ULONG ( *Release)(ITransaction *This);HRESULT ( *Commit)(ITransaction *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransaction *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransaction *This, XACTTRANSINFO *pinfo);};
struct ITravelEntryVtbl {HRESULT ( *QueryInterface)(ITravelEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelEntry *This);ULONG ( *Release)(ITravelEntry *This);HRESULT ( *Invoke)(ITravelEntry *This, IUnknown *punk);HRESULT ( *Update)(ITravelEntry *This, IUnknown *punk, BOOL fIsLocalAnchor);HRESULT ( *GetPidl)(ITravelEntry *This, LPITEMIDLIST *ppidl);};
struct IWinInetInfoVtbl {HRESULT ( *QueryInterface)(IWinInetInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetInfo *This);ULONG ( *Release)(IWinInetInfo *This);HRESULT ( *QueryOption)(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);};
typedef BOOL ( *LPWPUPOSTMESSAGE)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
struct _LMEM_ALLOC_INFO {WORD wStructSize;WORD wFlags;PLMEM_HEAP_INFO pHeap;DWORD dwSize;struct _LMEM_ALLOC_INFO *pNext;LPVOID lpMem;DWORD dwLineNum;PCHAR szFilename;DWORD dwAllocCount;DWORD hThread;};
struct _NOTIFYICONDATAA {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;CHAR szTip[64];};
struct _NOTIFYICONDATAW {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;WCHAR szTip[64];};
struct _X509Certificate {DWORD Version;DWORD SerialNumber[4];ALG_ID SignatureAlgorithm;FILETIME ValidFrom;FILETIME ValidUntil;PSTR pszIssuer;PSTR pszSubject;PctPublicKey *pPublicKey;};
typedef LONG (*pRegQueryValueEx)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData);
struct tagMENUITEMINFOA {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;LPSTR dwTypeData;UINT cch;};
struct tagNMTTDISPIFNOA {NMHDR hdr;LPSTR lpszText;char szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
struct tagSHMENUBARINFO {DWORD cbSize;HWND hwndParent;DWORD dwFlags;UINT nToolBarId;HINSTANCE hInstRes;int nBmpId;int cBmpImages;HWND hwndMB;COLORREF clrBk;};
typedef HRESULT ( *DELNODERUNDLL32)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
struct IAMPlayListVtbl {HRESULT ( *QueryInterface)(IAMPlayList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPlayList *This);ULONG ( *Release)(IAMPlayList *This);HRESULT ( *GetFlags)(IAMPlayList *This, DWORD *pdwFlags);HRESULT ( *GetItemCount)(IAMPlayList *This, DWORD *pdwItems);HRESULT ( *GetItem)(IAMPlayList *This, DWORD dwItemIndex, IAMPlayListItem **ppItem);HRESULT ( *GetNamedEvent)(IAMPlayList *This, WCHAR *pwszEventName, DWORD dwItemIndex, IAMPlayListItem **ppItem, DWORD *pdwFlags);HRESULT ( *GetRepeatInfo)(IAMPlayList *This, DWORD *pdwRepeatCount, DWORD *pdwRepeatStart, DWORD *pdwRepeatEnd);};
struct IAlterIndexVtbl {HRESULT ( *QueryInterface)(IAlterIndex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAlterIndex *This);ULONG ( *Release)(IAlterIndex *This);HRESULT ( *AlterIndex)(IAlterIndex *This, DBID *pTableId, DBID *pIndexId, DBID *pNewIndexId, ULONG cPropertySets,DBPROPSET  *    rgPropertySet);};
struct IDropSourceVtbl {HRESULT ( *QueryInterface)(IDropSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropSource *This);ULONG ( *Release)(IDropSource *This);HRESULT ( *QueryContinueDrag)(IDropSource *This, BOOL fEscapePressed, DWORD grfKeyState);HRESULT ( *GiveFeedback)(IDropSource *This, DWORD dwEffect);};
struct IDropTargetVtbl {HRESULT ( *QueryInterface)(IDropTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropTarget *This);ULONG ( *Release)(IDropTarget *This);HRESULT ( *DragEnter)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragOver)(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragLeave)(IDropTarget *This);HRESULT ( *Drop)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);};
struct IMemoryDataVtbl {HRESULT ( *QueryInterface)(IMemoryData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemoryData *This);ULONG ( *Release)(IMemoryData *This);HRESULT ( *SetBuffer)(IMemoryData *This, DWORD cbSize, BYTE *pbData, DWORD dwFlags);HRESULT ( *GetInfo)(IMemoryData *This, DWORD *pdwLength, BYTE **ppbData, DWORD *pcbActualData);HRESULT ( *SetActual)(IMemoryData *This, DWORD cbDataValid);};
struct IOpenRowsetVtbl {HRESULT ( *QueryInterface)(IOpenRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOpenRowset *This);ULONG ( *Release)(IOpenRowset *This);HRESULT ( *OpenRowset)(IOpenRowset *This, IUnknown *pUnkOuter, DBID *pTableID, DBID *pIndexID,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);};
struct IPhraseSinkVtbl {HRESULT ( *QueryInterface)(IPhraseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPhraseSink *This);ULONG ( *Release)(IPhraseSink *This);SCODE ( *PutSmallPhrase)(IPhraseSink *This,  WCHAR *pwcNoun, ULONG cwcNoun,  WCHAR *pwcModifier, ULONG cwcModifier, ULONG ulAttachmentType);SCODE ( *PutPhrase)(IPhraseSink *This,  WCHAR *pwcPhrase, ULONG cwcPhrase);};
struct IWABExtInitVtbl {HRESULT ( *QueryInterface)(IWABExtInit *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IWABExtInit *This);ULONG ( *Release)(IWABExtInit *This);HRESULT ( *Initialize)(IWABExtInit *This, LPWABEXTDISPLAY lpWABExtDisplay);};
typedef BOOL ( *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);
typedef BOOL ( *PFNRFCDCALLBACK)(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
struct _D3DVOLUME_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;UINT Width;UINT Height;UINT Depth;};
struct _SV2CVW2_PARAMS {DWORD cbSize;IShellView *psvPrev;LPCFOLDERSETTINGS pfs;IShellBrowser *psbOwner;RECT *prcView; SHELLVIEWID *pvid;HWND hwndView;};
struct _tagSYNCMGRITEM {DWORD cbSize;DWORD dwFlags;SYNCMGRITEMID ItemID;DWORD dwItemState;HICON hIcon;WCHAR wszItemName[128];FILETIME ftLastUpdate;};
struct icmp_echo_reply {IPAddr Address;ULONG Status;ULONG RoundTripTime;USHORT DataSize;USHORT Reserved;PVOID Data;struct ip_option_information Options;};
struct tagRFCDLGPARAMA {DWORD dwFlags;LPCSTR pszFilename;LPCSTR pszLocation;LPCSTR pszNewName;LPCSTR pszNetworkModifiedBy;LPCSTR pszLocalModifiedBy;LPCSTR pszNetworkModifiedOn;LPCSTR pszLocalModifiedOn;HICON hIKeepBoth;HICON hIKeepLocal;HICON hIKeepNetwork;PFNRFCDCALLBACK pfnCallBack;LPARAM lCallerData;};
typedef STATUS (*GETPARSEDTUPLE)(CARD_SOCKET_HANDLE, UINT8, PVOID, PUINT32);
struct IDXTFilterVtbl {HRESULT ( *QueryInterface)(IDXTFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTFilter *This);ULONG ( *Release)(IDXTFilter *This);HRESULT ( *Initialize)(IDXTFilter *This, IDXTransform *pDXTransform, IDXSurfaceFactory *pDXSurfaceFactory, IDXTFilterBehaviorSite *pDXTFilterBehaviorSite, DWORD dwFilterCaps, BOOL fUsesOldStyleFilterName);HRESULT ( *SetInputSurface)(IDXTFilter *This, IDXSurface *pDXSurface);HRESULT ( *SetOutputSurface)(IDXTFilter *This, IDXSurface *pDXSurface);HRESULT ( *GetOutputSurface)(IDXTFilter *This, IDXSurface **ppDXSurface);HRESULT ( *MapBoundsIn2Out)(IDXTFilter *This, DXBNDS *pbndsIn, DXBNDS *pbndsOut, BOOL fResetOutputSize);HRESULT ( *MapBoundsOut2In)(IDXTFilter *This, DXBNDS *pbndsOut, DXBNDS *pbndsIn);HRESULT ( *Execute)(IDXTFilter *This, DXBNDS *pbndsPortion, DXVEC *pvecPlacement, BOOL fFireFilterChange);HRESULT ( *SetMiscFlags)(IDXTFilter *This, DWORD dwMiscFlags);HRESULT ( *HitTest)(IDXTFilter *This,  DXVEC *pvecOut, BOOL *pfInactiveInputHit, DXVEC *pvecIn);HRESULT ( *Detach)(IDXTFilter *This);BOOL ( *IsEnabled)(IDXTFilter *This);void ( *HardDisable)(IDXTFilter *This, HRESULT hrHardDisable);};
struct IOleWindowVtbl {HRESULT ( *QueryInterface)(IOleWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleWindow *This);ULONG ( *Release)(IOleWindow *This);HRESULT ( *GetWindow)(IOleWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleWindow *This, BOOL fEnterMode);};
struct IProxyInfoVtbl {HRESULT ( *QueryInterface)(IProxyInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProxyInfo *This);ULONG ( *Release)(IProxyInfo *This);HRESULT ( *QueryInfo)(IProxyInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);};
struct IQueryInfoVtbl {HRESULT ( *QueryInterface)(IQueryInfo *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IQueryInfo *This);ULONG ( *Release)(IQueryInfo *This);HRESULT ( *GetInfoTip)(IQueryInfo *This, DWORD dwFlags, WCHAR **ppwszTip);HRESULT ( *GetInfoFlags)(IQueryInfo *This, DWORD *pdwFlags);};
struct IRowChangeVtbl {HRESULT ( *QueryInterface)(IRowChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowChange *This);ULONG ( *Release)(IRowChange *This);HRESULT ( *SetColumns)(IRowChange *This, DBORDINAL cColumns,DBCOLUMNACCESS  *    rgColumns);};
typedef BOOLEAN (*PFAST_IO_WRITE)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
typedef HRESULT ( *REGSAVERESTORE)(HWND hWnd, PCSTR pszTitleString, HKEY hkBckupKey, PCSTR pcszRootKey, PCSTR pcszSubKey, PCSTR pcszValueName, DWORD dwFlags);
struct _CEDBASEINFOEX {WORD wVersion;WORD wNumSortOrder;DWORD dwFlags;WCHAR szDbaseName[32];DWORD dwDbaseType;DWORD dwNumRecords;DWORD dwSize;FILETIME ftLastModified;SORTORDERSPECEX rgSortSpecs[4];};
struct _CMC_DATA_INFO {DWORD cTaggedAttribute;PCMC_TAGGED_ATTRIBUTE rgTaggedAttribute;DWORD cTaggedRequest;PCMC_TAGGED_REQUEST rgTaggedRequest;DWORD cTaggedContentInfo;PCMC_TAGGED_CONTENT_INFO rgTaggedContentInfo;DWORD cTaggedOtherMsg;PCMC_TAGGED_OTHER_MSG rgTaggedOtherMsg;};
struct _WINTRUST_DATA {DWORD cbStruct;LPVOID pPolicyCallbackData;LPVOID pSIPClientData;DWORD dwUIChoice;DWORD fdwRevocationChecks;DWORD dwUnionChoice;_WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB __anonymous0;DWORD dwStateAction;HANDLE hWVTStateData;WCHAR *pwszURLReference;DWORD dwProvFlags;};
struct _XML_NODE_INFO {DWORD dwSize;DWORD dwType;DWORD dwSubType;BOOL fTerminal; WCHAR *pwcText;ULONG ulLen;ULONG ulNsPrefixLen;PVOID pNode;PVOID pReserved;};
typedef LONG (*pRegSetValueEx)(HKEY hKey, LPCSTR lpValueName, DWORD Reserved, DWORD dwType,  BYTE *lpData, DWORD cbData);
struct tagQACONTAINER {ULONG cbSize;IOleClientSite *pClientSite;IAdviseSinkEx *pAdviseSink;IPropertyNotifySink *pPropertyNotifySink;IUnknown *pUnkEventSink;DWORD dwAmbientFlags;OLE_COLOR colorFore;OLE_COLOR colorBack;IFont *pFont;IOleUndoManager *pUndoMgr;DWORD dwAppearance;LONG lcid;HPALETTE hpal;struct IBindHost *pBindHost;};
typedef LRESULT ( *ACMDRIVERPROC)(DWORD, HACMDRIVERID, UINT, LPARAM, LPARAM);
struct IDXTScaleVtbl {HRESULT ( *QueryInterface)(IDXTScale *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTScale *This);ULONG ( *Release)(IDXTScale *This);HRESULT ( *SetScales)(IDXTScale *This,float  *    Scales);HRESULT ( *GetScales)(IDXTScale *This,float  *    Scales);HRESULT ( *ScaleFitToSize)(IDXTScale *This, DXBNDS *pClipBounds, SIZE FitToSize, BOOL bMaintainAspect);};
struct IStemSinkVtbl {HRESULT ( *QueryInterface)(IStemSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStemSink *This);ULONG ( *Release)(IStemSink *This);SCODE ( *PutAltWord)(IStemSink *This,  WCHAR *pwcInBuf, ULONG cwc);SCODE ( *PutWord)(IStemSink *This,  WCHAR *pwcInBuf, ULONG cwc);};
struct IViewSortVtbl {HRESULT ( *QueryInterface)(IViewSort *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewSort *This);ULONG ( *Release)(IViewSort *This);HRESULT ( *GetSortOrder)(IViewSort *This, DBORDINAL *pcValues,DBORDINAL * *    prgColumns, DBSORT *prgOrders[]);HRESULT ( *SetSortOrder)(IViewSort *This, DBORDINAL cValues, DBORDINAL  *    rgColumns,  DBSORT rgOrders[]);};
typedef SOCKET ( *LPWSPJOINLEAF)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, DWORD dwFlags, LPINT lpErrno);
typedef BOOLEAN (*PFAST_IO_READ)(struct _FILE_OBJECT *FileObject, PLARGE_INTEGER FileOffset, ULONG Length, BOOLEAN Wait, ULONG LockKey, PVOID Buffer, PIO_STATUS_BLOCK IoStatus, struct _DEVICE_OBJECT *DeviceObject);
struct _IMAGE_SYMBOL {union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4 N;DWORD Value;SHORT SectionNumber;WORD Type;BYTE StorageClass;BYTE NumberOfAuxSymbols;};
struct _PPP_EAP_INFO {DWORD dwSizeInBytes;DWORD dwEapTypeId;DWORD ( *RasEapInitialize)(BOOL fInitialize);DWORD ( *RasEapBegin)(void **ppWorkBuffer, PPP_EAP_INPUT *pPppEapInput);DWORD ( *RasEapEnd)(void *pWorkBuffer);DWORD ( *RasEapMakeMessage)(void *pWorkBuf, PPP_EAP_PACKET *pReceivePacket, PPP_EAP_PACKET *pSendPacket, DWORD cbSendPacket, PPP_EAP_OUTPUT *pEapOutput, PPP_EAP_INPUT *pEapInput);};
struct _STARTUPINFOA {DWORD cb;LPSTR lpReserved;LPSTR lpDesktop;LPSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct _avimetaindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];DWORD adwIndex[];};
struct tagSTAT_CHUNK {ULONG idChunk;CHUNK_BREAKTYPE breakType;CHUNKSTATE flags;LCID locale;FULLPROPSPEC attribute;ULONG idChunkSource;ULONG cwcStartSource;ULONG cwcLenSource;};
struct IAMTunerVtbl {HRESULT ( *QueryInterface)(IAMTuner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTuner *This);ULONG ( *Release)(IAMTuner *This);HRESULT ( *put_Channel)(IAMTuner *This, int lChannel, int lVideoSubChannel, int lAudioSubChannel);HRESULT ( *get_Channel)(IAMTuner *This, int *plChannel, int *plVideoSubChannel, int *plAudioSubChannel);HRESULT ( *ChannelMinMax)(IAMTuner *This, int *lChannelMin, int *lChannelMax);HRESULT ( *put_CountryCode)(IAMTuner *This, int lCountryCode);HRESULT ( *get_CountryCode)(IAMTuner *This, int *plCountryCode);HRESULT ( *put_TuningSpace)(IAMTuner *This, int lTuningSpace);HRESULT ( *get_TuningSpace)(IAMTuner *This, int *plTuningSpace);HRESULT ( *Logon)(IAMTuner *This, HANDLE hCurrentUser);HRESULT ( *Logout)(IAMTuner *This);HRESULT ( *SignalPresent)(IAMTuner *This, int *plSignalStrength);HRESULT ( *put_Mode)(IAMTuner *This, AMTunerModeType lMode);HRESULT ( *get_Mode)(IAMTuner *This, AMTunerModeType *plMode);HRESULT ( *GetAvailableModes)(IAMTuner *This, int *plModes);HRESULT ( *RegisterNotificationCallBack)(IAMTuner *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IAMTuner *This, IAMTunerNotification *pNotify);};
struct ICommandVtbl {HRESULT ( *QueryInterface)(ICommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommand *This);ULONG ( *Release)(ICommand *This);HRESULT ( *Cancel)(ICommand *This);HRESULT ( *Execute)(ICommand *This, IUnknown *pUnkOuter,  IID * riid, DBPARAMS *pParams, DBROWCOUNT *pcRowsAffected, IUnknown **ppRowset);HRESULT ( *GetDBSession)(ICommand *This,  IID * riid, IUnknown **ppSession);};
struct IDVDMenuVtbl {HRESULT ( *QueryInterface)(IDVDMenu *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDMenu *This);ULONG ( *Release)(IDVDMenu *This);HRESULT ( *GetDomain)(IDVDMenu *This, UINT16 languageCode, IDVDDomain **ppDomain, UINT8 *pExistFlag);HRESULT ( *GetMenuLanguageInfo)(IDVDMenu *This, UINT16 *pLangCount, UINT16 *pLCBuffer, UINT8 *pFlagsBuffer);};
struct IMarshalVtbl {HRESULT ( *QueryInterface)(IMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarshal *This);ULONG ( *Release)(IMarshal *This);HRESULT ( *GetUnmarshalClass)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT ( *GetMarshalSizeMax)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT ( *MarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT ( *UnmarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void **ppv);HRESULT ( *ReleaseMarshalData)(IMarshal *This, IStream *pStm);HRESULT ( *DisconnectObject)(IMarshal *This, DWORD dwReserved);};
typedef int ( *LPWSPSTARTUP)(WORD wVersionRequested, LPWSPDATA lpWSPData, LPWSAPROTOCOL_INFOW lpProtocolInfo, WSPUPCALLTABLE UpcallTable, LPWSPPROC_TABLE lpProcTable);
struct _CEDBASEINFO {DWORD dwFlags;WCHAR szDbaseName[32];DWORD dwDbaseType;WORD wNumRecords;WORD wNumSortOrder;DWORD dwSize;FILETIME ftLastModified;SORTORDERSPEC rgSortSpecs[4];};
struct _CREDENTIALA {DWORD Flags;DWORD Type;LPSTR TargetName;LPSTR Comment;FILETIME LastWritten;DWORD CredentialBlobSize;LPBYTE CredentialBlob;DWORD Persist;DWORD AttributeCount;PCREDENTIAL_ATTRIBUTEA Attributes;LPSTR TargetAlias;LPSTR UserName;};
struct _CTL_CONTEXT {DWORD dwMsgAndCertEncodingType;BYTE *pbCtlEncoded;DWORD cbCtlEncoded;PCTL_INFO pCtlInfo;HCERTSTORE hCertStore;HCRYPTMSG hCryptMsg;BYTE *pbCtlContent;DWORD cbCtlContent;};
struct _HSE_TF_INFO {PFN_HSE_IO_COMPLETION pfnHseIO;PVOID pContext;HANDLE hFile;LPCSTR pszStatusCode;DWORD BytesToWrite;DWORD Offset;PVOID pHead;DWORD HeadLength;PVOID pTail;DWORD TailLength;DWORD dwFlags;};
struct tagERRORINFO {HRESULT hrError;DWORD dwMinor;CLSID clsid;IID iid;DISPID dispid;};
struct tagSTOREINFO {DWORD cbSize;TCHAR szDeviceName[8];TCHAR szStoreName[32];DWORD dwDeviceClass;DWORD dwDeviceType;STORAGEDEVICEINFO sdi;DWORD dwDeviceFlags;SECTORNUM snNumSectors;DWORD dwBytesPerSector;SECTORNUM snFreeSectors;SECTORNUM snBiggestPartCreatable;FILETIME ftCreated;FILETIME ftLastModified;DWORD dwAttributes;DWORD dwPartitionCount;DWORD dwMountCount;};
struct tagVIDEOINFO {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;BITMAPINFOHEADER bmiHeader;tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A __anonymous0;};
typedef SOCKET ( *LPWSPSOCKET)(int af, int type, int protocol, LPWSAPROTOCOL_INFOW lpProtocolInfo, GROUP g, DWORD dwFlags, LPINT lpErrno);
struct tagPARTINFO {DWORD cbSize;TCHAR szPartitionName[32];TCHAR szFileSys[32];TCHAR szVolumeName[64];SECTORNUM snNumSectors;FILETIME ftCreated;FILETIME ftLastModified;DWORD dwAttributes;BYTE bPartType;};
typedef LRESULT ( *DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);
struct IObex2Vtbl {HRESULT ( *QueryInterface)(IObex2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObex2 *This);ULONG ( *Release)(IObex2 *This);HRESULT ( *Initialize)(IObex2 *This);HRESULT ( *Shutdown)(IObex2 *This);HRESULT ( *EnumDevices)(IObex2 *This, IDeviceEnum **ppDeviceEnum,  CLSID * uuidTransport);HRESULT ( *EnumTransports)(IObex2 *This, IPropertyBagEnum **ppTransportEnum);HRESULT ( *RegisterService)(IObex2 *This, IPropertyBag *pPropertyBag, IObexService **ppService);HRESULT ( *BindToDevice)(IObex2 *This, IPropertyBag *pPropertyBag, IObexDevice **ppDevice);HRESULT ( *StartDeviceEnum)(IObex2 *This);HRESULT ( *StopDeviceEnum)(IObex2 *This);HRESULT ( *PauseDeviceEnum)(IObex2 *This, BOOL fPauseOn);};
typedef STATUS (*REQUESTIRQ)(CARD_CLIENT_HANDLE, CARD_SOCKET_HANDLE, CARD_ISR, UINT32);
struct tagDBPROP {DBPROPID dwPropertyID;DBPROPOPTIONS dwOptions;DBPROPSTATUS dwStatus;DBID colid;VARIANT vValue;};
typedef BOOL ( *DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef HRESULT  WABOPEN(LPADRBOOK *lppAdrBook, LPWABOBJECT *lppWABObject, LPWAB_PARAM lpWP, DWORD Reserved2);
typedef LRESULT ( *WNDPROC)(HWND, UINT, WPARAM, LPARAM);
struct ldapmsg {ULONG lm_msgid;ULONG lm_msgtype;PVOID lm_ber;struct ldapmsg *lm_chain;struct ldapmsg *lm_next;ULONG lm_time;PLDAP Connection;PVOID Request;ULONG lm_returncode;USHORT lm_referral;BOOLEAN lm_chased;BOOLEAN lm_eom;BOOLEAN ConnectionReferenced;};
struct tagDEC {USHORT wReserved;tagDEC___64EC678C49E7BE49873AFBFB7A849D34 __anonymous0;ULONG Hi32;union {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous1;ULONGLONG Lo64;};};
union tagPOP3RESPONSE___BF7D238E18609FD3182F5629010D447B {POP3UIDL rUidlInfo;POP3STAT rStatInfo;POP3LIST rListInfo;DWORD dwPopId;POP3RETR rRetrInfo;POP3TOP rTopInfo;};
union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4 {ERROR_NOTIFICATION err;NEWMAIL_NOTIFICATION newmail;OBJECT_NOTIFICATION obj;TABLE_NOTIFICATION tab;EXTENDED_NOTIFICATION ext;STATUS_OBJECT_NOTIFICATION statobj;};
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;void *pvKeyWrapAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwKeyChoice;_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;};
typedef BOOL ( *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags,  void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);
typedef SECURITY_STATUS ( *INITIALIZE_SECURITY_CONTEXT_FN_A)(PCredHandle, PCtxtHandle, SEC_CHAR *, unsigned int, unsigned int, unsigned int, PSecBufferDesc, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct OLEDBSimpleProviderListenerVtbl {HRESULT ( *QueryInterface)(OLEDBSimpleProviderListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(OLEDBSimpleProviderListener *This);ULONG ( *Release)(OLEDBSimpleProviderListener *This);HRESULT ( *aboutToChangeCell)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DB_LORDINAL iColumn);HRESULT ( *cellChanged)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DB_LORDINAL iColumn);HRESULT ( *aboutToDeleteRows)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DBROWCOUNT cRows);HRESULT ( *deletedRows)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DBROWCOUNT cRows);HRESULT ( *aboutToInsertRows)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DBROWCOUNT cRows);HRESULT ( *insertedRows)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DBROWCOUNT cRows);HRESULT ( *rowsAvailable)(OLEDBSimpleProviderListener *This, DBROWCOUNT iRow, DBROWCOUNT cRows);HRESULT ( *transferComplete)(OLEDBSimpleProviderListener *This, OSPXFER xfer);};
typedef BOOL ( *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc);
typedef BOOL ( *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc);
struct ISyncMgrSynchronizeInvokeVtbl {HRESULT ( *QueryInterface)(ISyncMgrSynchronizeInvoke *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncMgrSynchronizeInvoke *This);ULONG ( *Release)(ISyncMgrSynchronizeInvoke *This);HRESULT ( *UpdateItems)(ISyncMgrSynchronizeInvoke *This, DWORD dwInvokeFlags,  CLSID * rclsid, DWORD cbCookie,  BYTE *lpCookie);HRESULT ( *UpdateAll)(ISyncMgrSynchronizeInvoke *This);};
struct ITransactionOutcomeEventsVtbl {HRESULT ( *QueryInterface)(ITransactionOutcomeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionOutcomeEvents *This);ULONG ( *Release)(ITransactionOutcomeEvents *This);HRESULT ( *Committed)(ITransactionOutcomeEvents *This, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *Aborted)(ITransactionOutcomeEvents *This, BOID *pboidReason, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *HeuristicDecision)(ITransactionOutcomeEvents *This, DWORD dwDecision, BOID *pboidReason, HRESULT hr);HRESULT ( *Indoubt)(ITransactionOutcomeEvents *This);};
struct ITransportCallbackServiceVtbl {HRESULT ( *QueryInterface)(ITransportCallbackService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransportCallbackService *This);ULONG ( *Release)(ITransportCallbackService *This);HRESULT ( *GetParentWindow)(ITransportCallbackService *This, DWORD dwReserved, HWND *phwndParent);HRESULT ( *GetAccount)(ITransportCallbackService *This, LPDWORD pdwServerType, IImnAccount **ppAccount);};
struct INetConnectionPropertyUiVtbl {HRESULT ( *QueryInterface)(INetConnectionPropertyUi *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetConnectionPropertyUi *This);ULONG ( *Release)(INetConnectionPropertyUi *This);HRESULT ( *SetConnection)(INetConnectionPropertyUi *This, INetConnection *pCon);HRESULT ( *AddPages)(INetConnectionPropertyUi *This, HWND hwndParent, LPFNADDPROPSHEETPAGE pfnAddPage, LPARAM lParam);};
struct _DOT11_WEP_KEY_MAPPING_ENTRY {ULONG uWEPKeyMappingIndex;DOT11_MAC_ADDRESS WEPKeyMappingAddress;DWORD dwAlgorithm;BOOL bWEPRowIsOutbound;BOOL bStaticWEPKey;DOT11_ROW_STATUS WEPKeyMappingStatus;PDOT11_WEP_KEY_DATA pDot11WEPKeyMappingData;};
struct IDirectDrawGammaControlVtbl {HRESULT ( *QueryInterface)(IDirectDrawGammaControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawGammaControl *This);ULONG ( *Release)(IDirectDrawGammaControl *This);HRESULT ( *GetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);HRESULT ( *SetGammaRamp)(IDirectDrawGammaControl *This, DWORD, LPDDGAMMARAMP);};
typedef BOOL ( *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
typedef BOOL ( *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey);
struct _IP_ADAPTER_UNICAST_ADDRESS {_IP_ADAPTER_ANYCAST_ADDRESS___B1B65653B32BE648793C229328400533 __anonymous0;struct _IP_ADAPTER_UNICAST_ADDRESS *Next;SOCKET_ADDRESS Address;IP_PREFIX_ORIGIN PrefixOrigin;IP_SUFFIX_ORIGIN SuffixOrigin;IP_DAD_STATE DadState;ULONG ValidLifetime;ULONG PreferredLifetime;ULONG LeaseLifetime;};
struct IObexServiceConnectionVtbl {HRESULT ( *QueryInterface)(IObexServiceConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObexServiceConnection *This);ULONG ( *Release)(IObexServiceConnection *This);HRESULT ( *Accept)(IObexServiceConnection *This, IHeaderCollection *pHeaders);HRESULT ( *Close)(IObexServiceConnection *This, IHeaderCollection *pExtraHeaders);HRESULT ( *GetCommand)(IObexServiceConnection *This, OBEX_REQUEST *pRequest, boolean fWait);HRESULT ( *SendResponse)(IObexServiceConnection *This, DWORD dwResponse, IHeaderCollection *pHeaders);HRESULT ( *EnumProperties)(IObexServiceConnection *This,  IID * riid, void **ppv);HRESULT ( *EnumHeaders)(IObexServiceConnection *This, IHeaderEnum **ppEnum);};
struct IOleControlNavigation2Vtbl {HRESULT ( *QueryInterface)(IOleControlNavigation2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlNavigation2 *This);ULONG ( *Release)(IOleControlNavigation2 *This);HRESULT ( *GetControlNavigationCapabilities)(IOleControlNavigation2 *This, DWORD *navigationFlags);HRESULT ( *GetCurrentRectIndex)(IOleControlNavigation2 *This, DWORD *current);HRESULT ( *GetNavigationRectCount)(IOleControlNavigation2 *This, DWORD *rectCount);HRESULT ( *GetNavigationRects)(IOleControlNavigation2 *This, DWORD rectCount,RECT  *    rects);HRESULT ( *GetHighlightRect)(IOleControlNavigation2 *This, RECT *highlightRect);HRESULT ( *ActivateRect)(IOleControlNavigation2 *This, DWORD rectToActivate);HRESULT ( *DeactivateRect)(IOleControlNavigation2 *This);HRESULT ( *NavigateInControl)(IOleControlNavigation2 *This, RECT lastRect, NVFOCUS_DIRECTION direction);};
typedef USB_TRANSFER (*LPISSUE_INTERRUPT_TRANSFER)(USB_PIPE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, DWORD, LPVOID, ULONG);
struct tagDVD_TitleMainAttributes {DVD_TITLE_APPMODE AppMode;DVD_VideoAttributes VideoAttributes;ULONG ulNumberOfAudioStreams;DVD_AudioAttributes AudioAttributes[8];DVD_MultichannelAudioAttributes MultichannelAudioAttributes[8];ULONG ulNumberOfSubpictureStreams;DVD_SubpictureAttributes SubpictureAttributes[32];};
struct IDirect3DBaseTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DBaseTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DBaseTexture8 *This);ULONG ( *Release)(IDirect3DBaseTexture8 *This);HRESULT ( *GetDevice)(IDirect3DBaseTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DBaseTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DBaseTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DBaseTexture8 *This);void ( *PreLoad)(IDirect3DBaseTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DBaseTexture8 *This);DWORD ( *SetLOD)(IDirect3DBaseTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DBaseTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DBaseTexture8 *This);};
typedef HRESULT  IWABOBJECT_LDAPUrl_METHOD(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd, ULONG ulFlags, LPSTR lpszURL, LPMAILUSER *lppMailUser);
typedef NTSTATUS (*PALLOCATE_ADAPTER_CHANNEL)(PDMA_ADAPTER DmaAdapter, PDEVICE_OBJECT DeviceObject, ULONG NumberOfMapRegisters, PDRIVER_CONTROL ExecutionRoutine, PVOID Context);
struct IDAVNamespaceArbiterVtbl {HRESULT ( *QueryInterface)(IDAVNamespaceArbiter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDAVNamespaceArbiter *This);ULONG ( *Release)(IDAVNamespaceArbiter *This);HRESULT ( *AddNamespace)(IDAVNamespaceArbiter *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespaceID)(IDAVNamespaceArbiter *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespacePrefix)(IDAVNamespaceArbiter *This, DWORD dwNamespaceID, LPSTR *ppszNamespacePrefix);};
struct IInstallEngineTimingVtbl {HRESULT ( *QueryInterface)(IInstallEngineTiming *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallEngineTiming *This);ULONG ( *Release)(IInstallEngineTiming *This);HRESULT ( *GetRates)(IInstallEngineTiming *This, DWORD *pdwDownload, DWORD *pdwInstall);HRESULT ( *GetInstallProgress)(IInstallEngineTiming *This, INSTALLPROGRESS *pinsprog);};
struct IUserIdentityManagerVtbl {HRESULT ( *QueryInterface)(IUserIdentityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserIdentityManager *This);ULONG ( *Release)(IUserIdentityManager *This);HRESULT ( *EnumIdentities)(IUserIdentityManager *This, IEnumUserIdentity **ppEnumUser);HRESULT ( *ManageIdentities)(IUserIdentityManager *This, HWND hwndParent, DWORD dwFlags);HRESULT ( *Logon)(IUserIdentityManager *This, HWND hwndParent, DWORD dwFlags, IUserIdentity **ppIdentity);HRESULT ( *Logoff)(IUserIdentityManager *This, HWND hwndParent);HRESULT ( *GetIdentityByCookie)(IUserIdentityManager *This, GUID *uidCookie, IUserIdentity **ppIdentity);};
struct IDDrawExclModeVideoVtbl {HRESULT ( *QueryInterface)(IDDrawExclModeVideo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDDrawExclModeVideo *This);ULONG ( *Release)(IDDrawExclModeVideo *This);HRESULT ( *SetDDrawObject)(IDDrawExclModeVideo *This, IDirectDraw *pDDrawObject);HRESULT ( *GetDDrawObject)(IDDrawExclModeVideo *This, IDirectDraw **ppDDrawObject, BOOL *pbUsingExternal);HRESULT ( *SetDDrawSurface)(IDDrawExclModeVideo *This, IDirectDrawSurface *pDDrawSurface);HRESULT ( *GetDDrawSurface)(IDDrawExclModeVideo *This, IDirectDrawSurface **ppDDrawSurface, BOOL *pbUsingExternal);HRESULT ( *SetDrawParameters)(IDDrawExclModeVideo *This,  RECT *prcSource,  RECT *prcTarget);HRESULT ( *GetNativeVideoProps)(IDDrawExclModeVideo *This, DWORD *pdwVideoWidth, DWORD *pdwVideoHeight, DWORD *pdwPictAspectRatioX, DWORD *pdwPictAspectRatioY);HRESULT ( *SetCallbackInterface)(IDDrawExclModeVideo *This, IDDrawExclModeVideoCallback *pCallback, DWORD dwFlags);};
struct IDXTransformFactoryVtbl {HRESULT ( *QueryInterface)(IDXTransformFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTransformFactory *This);ULONG ( *Release)(IDXTransformFactory *This);HRESULT ( *QueryService)(IDXTransformFactory *This,  GUID * guidService,  IID * riid, void **ppvObject);HRESULT ( *SetService)(IDXTransformFactory *This,  GUID * guidService, IUnknown *pUnkService, BOOL bWeakReference);HRESULT ( *CreateTransform)(IDXTransformFactory *This, IUnknown **punkInputs, ULONG ulNumInputs, IUnknown **punkOutputs, ULONG ulNumOutputs, IPropertyBag *pInitProps, IErrorLog *pErrLog,  CLSID * TransCLSID,  IID * TransIID, void **ppTransform);HRESULT ( *InitializeTransform)(IDXTransformFactory *This, IDXTransform *pTransform, IUnknown **punkInputs, ULONG ulNumInputs, IUnknown **punkOutputs, ULONG ulNumOutputs, IPropertyBag *pInitProps, IErrorLog *pErrLog);};
struct IMediaObjectInPlaceVtbl {HRESULT ( *QueryInterface)(IMediaObjectInPlace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaObjectInPlace *This);ULONG ( *Release)(IMediaObjectInPlace *This);HRESULT ( *Process)(IMediaObjectInPlace *This, ULONG ulSize, BYTE *pData, REFERENCE_TIME refTimeStart, DWORD dwFlags);HRESULT ( *Clone)(IMediaObjectInPlace *This, IMediaObjectInPlace **ppMediaObject);HRESULT ( *GetLatency)(IMediaObjectInPlace *This, REFERENCE_TIME *pLatencyTime);};
struct INotificationReportVtbl {HRESULT ( *QueryInterface)(INotificationReport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotificationReport *This);ULONG ( *Release)(INotificationReport *This);HRESULT ( *DeliverUpdate)(INotificationReport *This, LPNOTIFICATION pNotification, DELIVERMODE deliverMode, DWORD dwReserved);HRESULT ( *GetOriginalNotification)(INotificationReport *This, LPNOTIFICATION *ppNotification);HRESULT ( *GetNotificationStatus)(INotificationReport *This, DWORD dwStatusIn, DWORD *pdwStatusOut, DWORD dwReserved);};
struct IPropertySetStorageVtbl {HRESULT ( *QueryInterface)(IPropertySetStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertySetStorage *This);ULONG ( *Release)(IPropertySetStorage *This);HRESULT ( *Create)(IPropertySetStorage *This,  FMTID * rfmtid,  CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Open)(IPropertySetStorage *This,  FMTID * rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Delete)(IPropertySetStorage *This,  FMTID * rfmtid);HRESULT ( *Enum)(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum);};
typedef INT ( *LPNSPLOOKUPSERVICEBEGIN)(LPGUID lpProviderId, LPWSAQUERYSETW lpqsRestrictions, LPWSASERVICECLASSINFOW lpServiceClassInfo, DWORD dwControlFlags, LPHANDLE lphLookup);
struct _DOT11_ASSOCIATION_INFO {DOT11_MAC_ADDRESS PeerMacAddress;USHORT usCapabilityInformation;USHORT usListenInterval;UCHAR ucPeerSupportedRates[8];USHORT usAssociationID;DOT11_ASSOCIATION_STATE dot11AssociationState;LARGE_INTEGER liAssociationUpTime;ULONGLONG ulNumOfTxPacketSuccesses;ULONGLONG ulNumOfTxPacketFailures;ULONGLONG ulNumOfRxPacketSuccesses;ULONGLONG ulNumOfRxPacketFailures;};
struct IDXARGBSurfaceInitVtbl {HRESULT ( *QueryInterface)(IDXARGBSurfaceInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXARGBSurfaceInit *This);ULONG ( *Release)(IDXARGBSurfaceInit *This);HRESULT ( *InitSurface)(IDXARGBSurfaceInit *This, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pFormatID,  DXBNDS *pBounds, DWORD dwFlags);HRESULT ( *InitFromDDSurface)(IDXARGBSurfaceInit *This, IUnknown *pDDrawSurface,  GUID *pFormatID, DWORD dwFlags);HRESULT ( *InitFromRawSurface)(IDXARGBSurfaceInit *This, IDXRawSurface *pRawSurface);};
struct IDirect3DResource8Vtbl {HRESULT ( *QueryInterface)(IDirect3DResource8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DResource8 *This);ULONG ( *Release)(IDirect3DResource8 *This);HRESULT ( *GetDevice)(IDirect3DResource8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DResource8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DResource8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DResource8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DResource8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DResource8 *This);void ( *PreLoad)(IDirect3DResource8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DResource8 *This);};
struct IDirectSoundNotifyVtbl {HRESULT ( *QueryInterface)(IDirectSoundNotify *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundNotify *This);ULONG ( *Release)(IDirectSoundNotify *This);HRESULT ( *SetNotificationPositions)(IDirectSoundNotify *This, DWORD, LPCDSBPOSITIONNOTIFY);};
struct IHTMLComputedStyleVtbl {HRESULT ( *QueryInterface)(IHTMLComputedStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLComputedStyle *This);ULONG ( *Release)(IHTMLComputedStyle *This);HRESULT ( *get_bold)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_italic)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_underline)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_overline)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_strikeOut)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_subScript)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_superScript)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_explicitFace)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_fontWeight)(IHTMLComputedStyle *This, int *p);HRESULT ( *get_fontSize)(IHTMLComputedStyle *This, int *p);HRESULT ( *get_fontName)(IHTMLComputedStyle *This, TCHAR *p);HRESULT ( *get_hasBgColor)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_textColor)(IHTMLComputedStyle *This, DWORD *p);HRESULT ( *get_backgroundColor)(IHTMLComputedStyle *This, DWORD *p);HRESULT ( *get_preFormatted)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_direction)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_blockDirection)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *get_OL)(IHTMLComputedStyle *This, VARIANT_BOOL *p);HRESULT ( *IsEqual)(IHTMLComputedStyle *This, IHTMLComputedStyle *pComputedStyle, VARIANT_BOOL *pfEqual);};
struct IHTMLFilterPainterVtbl {HRESULT ( *QueryInterface)(IHTMLFilterPainter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFilterPainter *This);ULONG ( *Release)(IHTMLFilterPainter *This);HRESULT ( *InvalidateRectUnfiltered)(IHTMLFilterPainter *This, RECT *prcInvalid);HRESULT ( *InvalidateRgnUnfiltered)(IHTMLFilterPainter *This, HRGN hrgnInvalid);HRESULT ( *ChangeElementVisibility)(IHTMLFilterPainter *This, BOOL fVisible);};
struct IPropertyContainerVtbl {HRESULT ( *QueryInterface)(IPropertyContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyContainer *This);ULONG ( *Release)(IPropertyContainer *This);HRESULT ( *GetProp)(IPropertyContainer *This, DWORD dwPropTag, BYTE *pb, ULONG *pcb);HRESULT ( *GetPropDw)(IPropertyContainer *This, DWORD dwPropTag, DWORD *pdw);HRESULT ( *GetPropSz)(IPropertyContainer *This, DWORD dwPropTag, LPSTR psz, ULONG cchMax);HRESULT ( *SetProp)(IPropertyContainer *This, DWORD dwPropTag, BYTE *pb, ULONG cb);HRESULT ( *SetPropDw)(IPropertyContainer *This, DWORD dwPropTag, DWORD dw);HRESULT ( *SetPropSz)(IPropertyContainer *This, DWORD dwPropTag, LPSTR psz);};
struct IRowPositionChangeVtbl {HRESULT ( *QueryInterface)(IRowPositionChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowPositionChange *This);ULONG ( *Release)(IRowPositionChange *This);HRESULT ( *OnRowPositionChange)(IRowPositionChange *This, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);};
struct IRowsetQueryStatusVtbl {HRESULT ( *QueryInterface)(IRowsetQueryStatus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetQueryStatus *This);ULONG ( *Release)(IRowsetQueryStatus *This);HRESULT ( *GetStatus)(IRowsetQueryStatus *This, DWORD *pdwStatus);HRESULT ( *GetStatusEx)(IRowsetQueryStatus *This, DWORD *pdwStatus, DWORD *pcFilteredDocuments, DWORD *pcDocumentsToFilter, ULONG_PTR *pdwRatioFinishedDenominator, ULONG_PTR *pdwRatioFinishedNumerator, ULONG_PTR cbBmk,  BYTE *pBmk, ULONG_PTR *piRowBmk, ULONG_PTR *pcRowsTotal);};
struct IShellPropSheetExtVtbl {HRESULT ( *QueryInterface)(IShellPropSheetExt *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellPropSheetExt *This);ULONG ( *Release)(IShellPropSheetExt *This);HRESULT ( *AddPages)(IShellPropSheetExt *This, LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam);HRESULT ( *ReplacePage)(IShellPropSheetExt *This, UINT uPageID, LPFNADDPROPSHEETPAGE lpfnReplaceWith, LPARAM lParam);};
struct IVariantChangeTypeVtbl {HRESULT ( *QueryInterface)(IVariantChangeType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVariantChangeType *This);ULONG ( *Release)(IVariantChangeType *This);HRESULT ( *ChangeType)(IVariantChangeType *This, VARIANT *pvarDst, VARIANT *pvarSrc, LCID lcid, VARTYPE vtNew);};
struct _DOT11_BSS_DESCRIPTION {ULONG uReserved;DOT11_MAC_ADDRESS dot11BSSID;DOT11_BSS_TYPE dot11BSSType;USHORT usBeaconPeriod;ULONGLONG ullTimestamp;USHORT usCapabilityInformation;ULONG uBufferLength;UCHAR ucBuffer[1];};
struct IDragSourceHelperVtbl {HRESULT ( *QueryInterface)(IDragSourceHelper *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDragSourceHelper *This);ULONG ( *Release)(IDragSourceHelper *This);HRESULT ( *InitializeFromBitmap)(IDragSourceHelper *This, LPSHDRAGIMAGE pshdi, IDataObject *pDataObject);HRESULT ( *InitializeFromWindow)(IDragSourceHelper *This, HWND hwnd, POINT *ppt, IDataObject *pDataObject);};
struct IHostDialogHelperVtbl {HRESULT ( *QueryInterface)(IHostDialogHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHostDialogHelper *This);ULONG ( *Release)(IHostDialogHelper *This);HRESULT ( *ShowHTMLDialog)(IHostDialogHelper *This, HWND hwndParent, IMoniker *pMk, VARIANT *pvarArgIn, WCHAR *pchOptions, VARIANT *pvarArgOut, IUnknown *punkHost);};
struct INewShortcutHookAVtbl {HRESULT ( *QueryInterface)(INewShortcutHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(INewShortcutHookA *This);ULONG ( *Release)(INewShortcutHookA *This);HRESULT ( *SetReferent)(INewShortcutHookA *This, LPCSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookA *This, LPSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookA *This, LPCSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookA *This, LPSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookA *This, LPSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookA *This, LPSTR pszExtension, int cchExtension);};
struct INotificationSinkVtbl {HRESULT ( *QueryInterface)(INotificationSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotificationSink *This);ULONG ( *Release)(INotificationSink *This);HRESULT ( *OnNotification)(INotificationSink *This, LPNOTIFICATION pNotification, LPNOTIFICATIONREPORT pNotfctnReport, DWORD dwReserved);};
struct IOleInPlaceObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObject *This);ULONG ( *Release)(IOleInPlaceObject *This);HRESULT ( *GetWindow)(IOleInPlaceObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObject *This);HRESULT ( *UIDeactivate)(IOleInPlaceObject *This);HRESULT ( *SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObject *This);};
struct IPropPatchRequestVtbl {HRESULT ( *QueryInterface)(IPropPatchRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropPatchRequest *This);ULONG ( *Release)(IPropPatchRequest *This);HRESULT ( *AddNamespace)(IPropPatchRequest *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespaceID)(IPropPatchRequest *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespacePrefix)(IPropPatchRequest *This, DWORD dwNamespaceID, LPSTR *ppszNamespacePrefix);HRESULT ( *SetProperty)(IPropPatchRequest *This, DWORD dwNamespaceID, LPCSTR pszPropertyName, LPCSTR pszNewValue);HRESULT ( *RemoveProperty)(IPropPatchRequest *This, DWORD dwNamespaceID, LPCSTR pszPropertyName);HRESULT ( *GenerateXML)(IPropPatchRequest *This, LPSTR *pszXML);};
struct IPropertyPageSiteVtbl {HRESULT ( *QueryInterface)(IPropertyPageSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPageSite *This);ULONG ( *Release)(IPropertyPageSite *This);HRESULT ( *OnStatusChange)(IPropertyPageSite *This, DWORD dwFlags);HRESULT ( *GetLocaleID)(IPropertyPageSite *This, LCID *pLocaleID);HRESULT ( *GetPageContainer)(IPropertyPageSite *This, IUnknown **ppUnk);HRESULT ( *TranslateAcceleratorA)(IPropertyPageSite *This, MSG *pMsg);};
struct ITransactionLocalVtbl {HRESULT ( *QueryInterface)(ITransactionLocal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionLocal *This);ULONG ( *Release)(ITransactionLocal *This);HRESULT ( *Commit)(ITransactionLocal *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransactionLocal *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransactionLocal *This, XACTTRANSINFO *pinfo);HRESULT ( *GetOptionsObject)(ITransactionLocal *This, ITransactionOptions **ppOptions);HRESULT ( *StartTransaction)(ITransactionLocal *This, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOtherOptions, ULONG *pulTransactionLevel);};
typedef USB_TRANSFER (*LPISSUE_BULK_TRANSFER)(USB_PIPE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, DWORD, LPVOID, ULONG);
union tagRESTRICTION___URes {NODERESTRICTION ar;NODERESTRICTION or;NODERESTRICTION pxr;VECTORRESTRICTION vr;NOTRESTRICTION nr;CONTENTRESTRICTION cr;NATLANGUAGERESTRICTION nlr;PROPERTYRESTRICTION pr;};
struct IPropFindRequestVtbl {HRESULT ( *QueryInterface)(IPropFindRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropFindRequest *This);ULONG ( *Release)(IPropFindRequest *This);HRESULT ( *AddNamespace)(IPropFindRequest *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespaceID)(IPropFindRequest *This, LPCSTR pszNamespace, DWORD *pdwNamespaceID);HRESULT ( *GetNamespacePrefix)(IPropFindRequest *This, DWORD dwNamespaceID, LPSTR *ppszNamespacePrefix);HRESULT ( *AddProperty)(IPropFindRequest *This, DWORD dwNamespaceID, LPCSTR pszPropertyName);HRESULT ( *GenerateXML)(IPropFindRequest *This, LPSTR *pszXML);};
struct IProvideTaskPageVtbl {HRESULT ( *QueryInterface)(IProvideTaskPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideTaskPage *This);ULONG ( *Release)(IProvideTaskPage *This);HRESULT ( *GetPage)(IProvideTaskPage *This, TASKPAGE tpType, BOOL fPersistChanges, HPROPSHEETPAGE *phPage);};
struct _NDIS_TAPI_MAKE_CALL {ULONG ulRequestID;HDRV_LINE hdLine;HTAPI_CALL htCall;HDRV_CALL hdCall;ULONG ulDestAddressSize;ULONG ulDestAddressOffset;BOOLEAN bUseDefaultLineCallParams;LINE_CALL_PARAMS LineCallParams;};
struct _avifieldindex_chunk {FOURCC fcc;DWORD cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved3;struct _avifieldindex_chunk___avifieldindex_entry aIndex[];};
struct IClassActivatorVtbl {HRESULT ( *QueryInterface)(IClassActivator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassActivator *This);ULONG ( *Release)(IClassActivator *This);HRESULT ( *GetClassObject)(IClassActivator *This,  CLSID * rclsid, DWORD dwClassContext, LCID locale,  IID * riid, void **ppv);};
struct IDBSchemaRowsetVtbl {HRESULT ( *QueryInterface)(IDBSchemaRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBSchemaRowset *This);ULONG ( *Release)(IDBSchemaRowset *This);HRESULT ( *GetRowset)(IDBSchemaRowset *This, IUnknown *pUnkOuter,  GUID * rguidSchema, ULONG cRestrictions, VARIANT  *    rgRestrictions,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);HRESULT ( *GetSchemas)(IDBSchemaRowset *This, ULONG *pcSchemas, GUID **prgSchemas, ULONG **prgRestrictionSupport);};
struct IDVDTextManagerVtbl {HRESULT ( *QueryInterface)(IDVDTextManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDTextManager *This);ULONG ( *Release)(IDVDTextManager *This);HRESULT ( *EnumerateTextLanguageUnits)(IDVDTextManager *This, IEnumDVD_TEXT_LANGUAGE_UNIT **ppEnum);HRESULT ( *GetTextItemsCount)(IDVDTextManager *This, DVD_TEXT_LANGUAGE_UNIT *pTLU, UINT8 title, UINT16 *pCount);HRESULT ( *EnumerateTitleTextItems)(IDVDTextManager *This, DVD_TEXT_LANGUAGE_UNIT *pTLU, UINT8 title, IEnumDVD_TEXT_ITEM **ppEnum);};
struct IHTMLViewFilterVtbl {HRESULT ( *QueryInterface)(IHTMLViewFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLViewFilter *This);ULONG ( *Release)(IHTMLViewFilter *This);HRESULT ( *SetSource)(IHTMLViewFilter *This, IHTMLViewFilter *pFilter);HRESULT ( *GetSource)(IHTMLViewFilter *This, IHTMLViewFilter **ppFilter);HRESULT ( *SetSite)(IHTMLViewFilter *This, IHTMLViewFilterSite *pSink);HRESULT ( *GetSite)(IHTMLViewFilter *This, IHTMLViewFilterSite **ppSink);HRESULT ( *SetPosition)(IHTMLViewFilter *This, LPCRECT prc);HRESULT ( *Draw)(IHTMLViewFilter *This, HDC hdc, LPCRECT prcBounds);HRESULT ( *GetStatusBits)(IHTMLViewFilter *This, DWORD *pdwFlags);};
struct IMLangCodePagesVtbl {HRESULT ( *QueryInterface)(IMLangCodePages *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangCodePages *This);ULONG ( *Release)(IMLangCodePages *This);HRESULT ( *GetCharCodePages)(IMLangCodePages *This, WCHAR chSrc, DWORD *pdwCodePages);HRESULT ( *GetStrCodePages)(IMLangCodePages *This,  WCHAR *pszSrc, int cchSrc, DWORD dwPriorityCodePages, DWORD *pdwCodePages, int *pcchCodePages);HRESULT ( *CodePageToCodePages)(IMLangCodePages *This, UINT uCodePage, DWORD *pdwCodePages);HRESULT ( *CodePagesToCodePage)(IMLangCodePages *This, DWORD dwCodePages, UINT uDefaultCodePage, UINT *puCodePage);};
struct IPersistFolder2Vtbl {HRESULT ( *QueryInterface)(IPersistFolder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFolder2 *This);ULONG ( *Release)(IPersistFolder2 *This);HRESULT ( *GetClassID)(IPersistFolder2 *This, CLSID *pClassID);HRESULT ( *Initialize)(IPersistFolder2 *This, LPCITEMIDLIST pidl);HRESULT ( *GetCurFolder)(IPersistFolder2 *This, LPITEMIDLIST *ppidl);};
struct tagNMCUSTOMDRAWINFO {NMHDR hdr;DWORD dwDrawStage;HDC hdc;RECT rc;DWORD dwItemSpec;UINT uItemState;LPARAM lItemlParam;};
struct IColumnsRowsetVtbl {HRESULT ( *QueryInterface)(IColumnsRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnsRowset *This);ULONG ( *Release)(IColumnsRowset *This);HRESULT ( *GetAvailableColumns)(IColumnsRowset *This, DBORDINAL *pcOptColumns, DBID **prgOptColumns);HRESULT ( *GetColumnsRowset)(IColumnsRowset *This, IUnknown *pUnkOuter, DBORDINAL cOptColumns, DBID  *    rgOptColumns,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppColRowset);};
struct IDXSurfaceInitVtbl {HRESULT ( *QueryInterface)(IDXSurfaceInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXSurfaceInit *This);ULONG ( *Release)(IDXSurfaceInit *This);HRESULT ( *InitSurface)(IDXSurfaceInit *This, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pFormatID,  DXBNDS *pBounds, DWORD dwFlags);};
struct IDXTaskManagerVtbl {HRESULT ( *QueryInterface)(IDXTaskManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTaskManager *This);ULONG ( *Release)(IDXTaskManager *This);HRESULT ( *QueryNumProcessors)(IDXTaskManager *This, ULONG *pulNumProc);HRESULT ( *SetThreadPoolSize)(IDXTaskManager *This, ULONG ulNumThreads);HRESULT ( *GetThreadPoolSize)(IDXTaskManager *This, ULONG *pulNumThreads);HRESULT ( *SetConcurrencyLimit)(IDXTaskManager *This, ULONG ulNumThreads);HRESULT ( *GetConcurrencyLimit)(IDXTaskManager *This, ULONG *pulNumThreads);HRESULT ( *ScheduleTasks)(IDXTaskManager *This,DXTMTASKINFO  *    TaskInfo, HANDLE Events[],DWORD  *    TaskIDs, ULONG ulNumTasks, ULONG ulWaitPeriod);HRESULT ( *TerminateTasks)(IDXTaskManager *This,DWORD  *    TaskIDs, ULONG ulCount, ULONG ulTimeOut);HRESULT ( *TerminateRequest)(IDXTaskManager *This,  IID * RequestID, ULONG ulTimeOut);};
struct IKsPropertySetVtbl {HRESULT ( *QueryInterface)(IKsPropertySet *This,  IID *, LPVOID *);ULONG ( *AddRef)(IKsPropertySet *This);ULONG ( *Release)(IKsPropertySet *This);HRESULT ( *Get)(IKsPropertySet *This,  GUID *, ULONG, LPVOID, ULONG, LPVOID, ULONG, PULONG);HRESULT ( *Set)(IKsPropertySet *This,  GUID *, ULONG, LPVOID, ULONG, LPVOID, ULONG);HRESULT ( *QuerySupport)(IKsPropertySet *This,  GUID *, ULONG, PULONG);};
struct IMemAllocator2Vtbl {HRESULT ( *QueryInterface)(IMemAllocator2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemAllocator2 *This);ULONG ( *Release)(IMemAllocator2 *This);HRESULT ( *SetProperties)(IMemAllocator2 *This, ALLOCATOR_PROPERTIES *pRequest, ALLOCATOR_PROPERTIES *pActual);HRESULT ( *GetProperties)(IMemAllocator2 *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *Commit)(IMemAllocator2 *This);HRESULT ( *Decommit)(IMemAllocator2 *This);HRESULT ( *GetBuffer)(IMemAllocator2 *This, IMediaSample **ppBuffer, REFERENCE_TIME *pStartTime, REFERENCE_TIME *pEndTime, DWORD dwFlags);HRESULT ( *ReleaseBuffer)(IMemAllocator2 *This, IMediaSample *pBuffer);HRESULT ( *GetBusyCount)(IMemAllocator2 *This, DWORD *pdwBusyCount);HRESULT ( *GetFreeCount)(IMemAllocator2 *This, DWORD *pdwFreeCount);};
struct IMessageFilterVtbl {HRESULT ( *QueryInterface)(IMessageFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessageFilter *This);ULONG ( *Release)(IMessageFilter *This);DWORD ( *HandleInComingCall)(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);DWORD ( *RetryRejectedCall)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);DWORD ( *MessagePending)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);};
struct IPersistIDListVtbl {HRESULT ( *QueryInterface)(IPersistIDList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistIDList *This);ULONG ( *Release)(IPersistIDList *This);HRESULT ( *GetClassID)(IPersistIDList *This, CLSID *pClassID);HRESULT ( *LoadIDList)(IPersistIDList *This, LPCITEMIDLIST pidl);HRESULT ( *SaveIDList)(IPersistIDList *This, LPITEMIDLIST *ppidl);};
struct IPersistMemoryVtbl {HRESULT ( *QueryInterface)(IPersistMemory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMemory *This);ULONG ( *Release)(IPersistMemory *This);HRESULT ( *GetClassID)(IPersistMemory *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMemory *This);HRESULT ( *Load)(IPersistMemory *This, LPVOID pMem, ULONG cbSize);HRESULT ( *Save)(IPersistMemory *This, LPVOID pMem, BOOL fClearDirty, ULONG cbSize);HRESULT ( *GetSizeMax)(IPersistMemory *This, ULONG *pCbSize);HRESULT ( *InitNew)(IPersistMemory *This);};
struct IPersistStreamVtbl {HRESULT ( *QueryInterface)(IPersistStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStream *This);ULONG ( *Release)(IPersistStream *This);HRESULT ( *GetClassID)(IPersistStream *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStream *This);HRESULT ( *Load)(IPersistStream *This, IStream *pStm);HRESULT ( *Save)(IPersistStream *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStream *This, ULARGE_INTEGER *pcbSize);};
struct IQuickActivateVtbl {HRESULT ( *QueryInterface)(IQuickActivate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQuickActivate *This);ULONG ( *Release)(IQuickActivate *This);HRESULT ( *QuickActivate)(IQuickActivate *This, QACONTAINER *pQaContainer, QACONTROL *pQaControl);HRESULT ( *SetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);HRESULT ( *GetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);};
struct IUPnPEventSinkVtbl {HRESULT ( *QueryInterface)(IUPnPEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPEventSink *This);ULONG ( *Release)(IUPnPEventSink *This);HRESULT ( *OnStateChanged)(IUPnPEventSink *This, DWORD cChanges,DISPID  *    rgdispidChanges);HRESULT ( *OnStateChangedSafe)(IUPnPEventSink *This, VARIANT varsadispidChanges);};
typedef void ( *PMQRECEIVECALLBACK)(HRESULT hrStatus, QUEUEHANDLE hSource, DWORD dwTimeout, DWORD dwAction, MQMSGPROPS *pMessageProps, LPOVERLAPPED lpOverlapped, HANDLE hCursor);
typedef HRESULT ( *TRANSLATEINFSTRING)(PCSTR pszInfFilename, PCSTR pszInstallSection, PCSTR pszTranslateSection, PCSTR pszTranslateKey, PSTR pszBuffer, DWORD dwBufferSize, PDWORD pdwRequiredSize, PVOID pvReserved);
struct _IO_STACK_LOCATION {UCHAR MajorFunction;UCHAR MinorFunction;UCHAR Flags;UCHAR Control;union _IO_STACK_LOCATION___E05297209D4E4E1DA488D2641E2A450E Parameters;PDEVICE_OBJECT DeviceObject;PFILE_OBJECT FileObject;PIO_COMPLETION_ROUTINE CompletionRoutine;PVOID Context;};
struct IAppPublisherVtbl {HRESULT ( *QueryInterface)(IAppPublisher *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAppPublisher *This);ULONG ( *Release)(IAppPublisher *This);HRESULT ( *GetNumberOfCategories)(IAppPublisher *This, DWORD *pdwCat);HRESULT ( *GetCategories)(IAppPublisher *This, APPCATEGORYINFOLIST *pAppCategoryList);HRESULT ( *GetNumberOfApps)(IAppPublisher *This, DWORD *pdwApps);HRESULT ( *EnumApps)(IAppPublisher *This, GUID *pAppCategoryId, IEnumPublishedApps **ppepa);};
struct IColumnMapperVtbl {HRESULT ( *QueryInterface)(IColumnMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnMapper *This);ULONG ( *Release)(IColumnMapper *This);HRESULT ( *GetPropInfoFromName)(IColumnMapper *This,  WCHAR *wcsPropName, DBID **ppPropId, DBTYPE *pPropType, unsigned int *puiWidth);HRESULT ( *GetPropInfoFromId)(IColumnMapper *This,  DBID *pPropId, WCHAR **pwcsName, DBTYPE *pPropType, unsigned int *puiWidth);HRESULT ( *EnumPropInfo)(IColumnMapper *This, ULONG iEntry,  WCHAR **pwcsName, DBID **ppPropId, DBTYPE *pPropType, unsigned int *puiWidth);HRESULT ( *IsMapUpToDate)(IColumnMapper *This);};
struct ICommonQueryAVtbl {HRESULT ( *QueryInterface)(ICommonQueryA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICommonQueryA *This);ULONG ( *Release)(ICommonQueryA *This);HRESULT ( *OpenQueryWindow)(ICommonQueryA *This, HWND hwndParent, LPOPENQUERYWINDOW_A pQueryWnd, IDataObject **ppDataObject);};
struct ICommonQueryWVtbl {HRESULT ( *QueryInterface)(ICommonQueryW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICommonQueryW *This);ULONG ( *Release)(ICommonQueryW *This);HRESULT ( *OpenQueryWindow)(ICommonQueryW *This, HWND hwndParent, LPOPENQUERYWINDOW_W pQueryWnd, IDataObject **ppDataObject);};
struct IHttpSecurityVtbl {HRESULT ( *QueryInterface)(IHttpSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpSecurity *This);ULONG ( *Release)(IHttpSecurity *This);HRESULT ( *GetWindow)(IHttpSecurity *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnSecurityProblem)(IHttpSecurity *This, DWORD dwProblem);};
struct IMediaSeekingVtbl {HRESULT ( *QueryInterface)(IMediaSeeking *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSeeking *This);ULONG ( *Release)(IMediaSeeking *This);HRESULT ( *GetCapabilities)(IMediaSeeking *This, DWORD *pCapabilities);HRESULT ( *CheckCapabilities)(IMediaSeeking *This, DWORD *pCapabilities);HRESULT ( *IsFormatSupported)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *QueryPreferredFormat)(IMediaSeeking *This, GUID *pFormat);HRESULT ( *GetTimeFormatA)(IMediaSeeking *This, GUID *pFormat);HRESULT ( *IsUsingTimeFormat)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *SetTimeFormat)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *GetDuration)(IMediaSeeking *This, LONGLONG *pDuration);HRESULT ( *GetStopPosition)(IMediaSeeking *This, LONGLONG *pStop);HRESULT ( *GetCurrentPosition)(IMediaSeeking *This, LONGLONG *pCurrent);HRESULT ( *ConvertTimeFormat)(IMediaSeeking *This, LONGLONG *pTarget,  GUID *pTargetFormat, LONGLONG Source,  GUID *pSourceFormat);HRESULT ( *SetPositions)(IMediaSeeking *This, LONGLONG *pCurrent, DWORD dwCurrentFlags, LONGLONG *pStop, DWORD dwStopFlags);HRESULT ( *GetPositions)(IMediaSeeking *This, LONGLONG *pCurrent, LONGLONG *pStop);HRESULT ( *GetAvailable)(IMediaSeeking *This, LONGLONG *pEarliest, LONGLONG *pLatest);HRESULT ( *SetRate)(IMediaSeeking *This, double dRate);HRESULT ( *GetRate)(IMediaSeeking *This, double *pdRate);HRESULT ( *GetPreroll)(IMediaSeeking *This, LONGLONG *pllPreroll);};
struct IMemAllocatorVtbl {HRESULT ( *QueryInterface)(IMemAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemAllocator *This);ULONG ( *Release)(IMemAllocator *This);HRESULT ( *SetProperties)(IMemAllocator *This, ALLOCATOR_PROPERTIES *pRequest, ALLOCATOR_PROPERTIES *pActual);HRESULT ( *GetProperties)(IMemAllocator *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *Commit)(IMemAllocator *This);HRESULT ( *Decommit)(IMemAllocator *This);HRESULT ( *GetBuffer)(IMemAllocator *This, IMediaSample **ppBuffer, REFERENCE_TIME *pStartTime, REFERENCE_TIME *pEndTime, DWORD dwFlags);HRESULT ( *ReleaseBuffer)(IMemAllocator *This, IMediaSample *pBuffer);};
struct IQueueCommandVtbl {HRESULT ( *QueryInterface)(IQueueCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQueueCommand *This);ULONG ( *Release)(IQueueCommand *This);HRESULT ( *InvokeAtStreamTime)(IQueueCommand *This, IDeferredCommand **pCmd, REFTIME time, GUID *iid, int dispidMethod, short wFlags, int cArgs, VARIANT *pDispParams, VARIANT *pvarResult, short *puArgErr);HRESULT ( *InvokeAtPresentationTime)(IQueueCommand *This, IDeferredCommand **pCmd, REFTIME time, GUID *iid, int dispidMethod, short wFlags, int cArgs, VARIANT *pDispParams, VARIANT *pvarResult, short *puArgErr);};
struct ISAXXMLFilterVtbl {HRESULT ( *QueryInterface)(ISAXXMLFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXXMLFilter *This);ULONG ( *Release)(ISAXXMLFilter *This);HRESULT ( *getFeature)(ISAXXMLFilter *This,  unsigned short *pwchName, VARIANT_BOOL *pvfValue);HRESULT ( *putFeature)(ISAXXMLFilter *This,  unsigned short *pwchName, VARIANT_BOOL vfValue);HRESULT ( *getProperty)(ISAXXMLFilter *This,  unsigned short *pwchName, VARIANT *pvarValue);HRESULT ( *putProperty)(ISAXXMLFilter *This,  unsigned short *pwchName, VARIANT varValue);HRESULT ( *getEntityResolver)(ISAXXMLFilter *This, ISAXEntityResolver **ppResolver);HRESULT ( *putEntityResolver)(ISAXXMLFilter *This, ISAXEntityResolver *pResolver);HRESULT ( *getContentHandler)(ISAXXMLFilter *This, ISAXContentHandler **ppHandler);HRESULT ( *putContentHandler)(ISAXXMLFilter *This, ISAXContentHandler *pHandler);HRESULT ( *getDTDHandler)(ISAXXMLFilter *This, ISAXDTDHandler **ppHandler);HRESULT ( *putDTDHandler)(ISAXXMLFilter *This, ISAXDTDHandler *pHandler);HRESULT ( *getErrorHandler)(ISAXXMLFilter *This, ISAXErrorHandler **ppHandler);HRESULT ( *putErrorHandler)(ISAXXMLFilter *This, ISAXErrorHandler *pHandler);HRESULT ( *getBaseURL)(ISAXXMLFilter *This,  unsigned short **ppwchBaseUrl);HRESULT ( *putBaseURL)(ISAXXMLFilter *This,  unsigned short *pwchBaseUrl);HRESULT ( *getSecureBaseURL)(ISAXXMLFilter *This,  unsigned short **ppwchSecureBaseUrl);HRESULT ( *putSecureBaseURL)(ISAXXMLFilter *This,  unsigned short *pwchSecureBaseUrl);HRESULT ( *parse)(ISAXXMLFilter *This, VARIANT varInput);HRESULT ( *parseURL)(ISAXXMLFilter *This,  unsigned short *pwchUrl);HRESULT ( *getParent)(ISAXXMLFilter *This, ISAXXMLReader **ppReader);HRESULT ( *putParent)(ISAXXMLFilter *This, ISAXXMLReader *pReader);};
struct ISAXXMLReaderVtbl {HRESULT ( *QueryInterface)(ISAXXMLReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISAXXMLReader *This);ULONG ( *Release)(ISAXXMLReader *This);HRESULT ( *getFeature)(ISAXXMLReader *This,  unsigned short *pwchName, VARIANT_BOOL *pvfValue);HRESULT ( *putFeature)(ISAXXMLReader *This,  unsigned short *pwchName, VARIANT_BOOL vfValue);HRESULT ( *getProperty)(ISAXXMLReader *This,  unsigned short *pwchName, VARIANT *pvarValue);HRESULT ( *putProperty)(ISAXXMLReader *This,  unsigned short *pwchName, VARIANT varValue);HRESULT ( *getEntityResolver)(ISAXXMLReader *This, ISAXEntityResolver **ppResolver);HRESULT ( *putEntityResolver)(ISAXXMLReader *This, ISAXEntityResolver *pResolver);HRESULT ( *getContentHandler)(ISAXXMLReader *This, ISAXContentHandler **ppHandler);HRESULT ( *putContentHandler)(ISAXXMLReader *This, ISAXContentHandler *pHandler);HRESULT ( *getDTDHandler)(ISAXXMLReader *This, ISAXDTDHandler **ppHandler);HRESULT ( *putDTDHandler)(ISAXXMLReader *This, ISAXDTDHandler *pHandler);HRESULT ( *getErrorHandler)(ISAXXMLReader *This, ISAXErrorHandler **ppHandler);HRESULT ( *putErrorHandler)(ISAXXMLReader *This, ISAXErrorHandler *pHandler);HRESULT ( *getBaseURL)(ISAXXMLReader *This,  unsigned short **ppwchBaseUrl);HRESULT ( *putBaseURL)(ISAXXMLReader *This,  unsigned short *pwchBaseUrl);HRESULT ( *getSecureBaseURL)(ISAXXMLReader *This,  unsigned short **ppwchSecureBaseUrl);HRESULT ( *putSecureBaseURL)(ISAXXMLReader *This,  unsigned short *pwchSecureBaseUrl);HRESULT ( *parse)(ISAXXMLReader *This, VARIANT varInput);HRESULT ( *parseURL)(ISAXXMLReader *This,  unsigned short *pwchUrl);};
struct ISecurityInfoVtbl {HRESULT ( *QueryInterface)(ISecurityInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISecurityInfo *This);ULONG ( *Release)(ISecurityInfo *This);HRESULT ( *GetCurrentTrustee)(ISecurityInfo *This, TRUSTEE_W **ppTrustee);HRESULT ( *GetObjectTypes)(ISecurityInfo *This, ULONG *cObjectTypes, GUID **rgObjectTypes);HRESULT ( *GetPermissions)(ISecurityInfo *This, GUID ObjectType, ACCESS_MASK *pPermissions);};
struct IShellDetailsVtbl {HRESULT ( *QueryInterface)(IShellDetails *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellDetails *This);ULONG ( *Release)(IShellDetails *This);HRESULT ( *GetDetailsOf)(IShellDetails *This, LPCITEMIDLIST pidl, UINT iColumn, SHELLDETAILS *pDetails);HRESULT ( *ColumnClick)(IShellDetails *This, UINT iColumn);};
struct ITrusteeAdminVtbl {HRESULT ( *QueryInterface)(ITrusteeAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrusteeAdmin *This);ULONG ( *Release)(ITrusteeAdmin *This);HRESULT ( *CompareTrustees)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee1, TRUSTEE_W *pTrustee2);HRESULT ( *CreateTrustee)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);HRESULT ( *DeleteTrustee)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee);HRESULT ( *SetTrusteeProperties)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);HRESULT ( *GetTrusteeProperties)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee,  ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);};
struct _CMSG_SIGNER_INFO {DWORD dwVersion;CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct _avitimecodeindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];TIMECODEDATA aIndex[1022];};
struct tagDBCOLUMNACCESS {void *pData;DBID columnid;DBLENGTH cbDataLen;DBSTATUS dwStatus;DBLENGTH cbMaxLen;DB_DWRESERVE dwReserved;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct tagREBARBANDINFOA {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;};
struct ICatRegisterVtbl {HRESULT ( *QueryInterface)(ICatRegister *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatRegister *This);ULONG ( *Release)(ICatRegister *This);HRESULT ( *RegisterCategories)(ICatRegister *This, ULONG cCategories,CATEGORYINFO  *    rgCategoryInfo);HRESULT ( *UnRegisterCategories)(ICatRegister *This, ULONG cCategories,CATID  *    rgcatid);HRESULT ( *RegisterClassImplCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories,CATID  *    rgcatid);HRESULT ( *UnRegisterClassImplCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories,CATID  *    rgcatid);HRESULT ( *RegisterClassReqCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories,CATID  *    rgcatid);HRESULT ( *UnRegisterClassReqCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories,CATID  *    rgcatid);};
struct ICommandTreeVtbl {HRESULT ( *QueryInterface)(ICommandTree *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandTree *This);ULONG ( *Release)(ICommandTree *This);HRESULT ( *FindErrorNodes)(ICommandTree *This,  DBCOMMANDTREE *pRoot, ULONG *pcErrorNodes, DBCOMMANDTREE ***prgErrorNodes);HRESULT ( *FreeCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot);HRESULT ( *GetCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot);HRESULT ( *SetCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot, DBCOMMANDREUSE dwCommandReuse, BOOL fCopy);};
struct IDVDTitleSetVtbl {HRESULT ( *QueryInterface)(IDVDTitleSet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDTitleSet *This);ULONG ( *Release)(IDVDTitleSet *This);HRESULT ( *GetSpecVersion)(IDVDTitleSet *This, UINT16 *pVersion);HRESULT ( *GetCategory)(IDVDTitleSet *This, UINT32 *pCategory);HRESULT ( *GetMenu)(IDVDTitleSet *This, IDVDMenu **ppMenu);HRESULT ( *GetDomain)(IDVDTitleSet *This, IDVDDomain **ppDomain);HRESULT ( *GetTotalTitleUnitCount)(IDVDTitleSet *This, UINT16 *pTtuCount);HRESULT ( *GetTitlePart)(IDVDTitleSet *This, UINT16 ttu, UINT16 ptt, UINT16 *pPgcn, UINT8 *pPgn);HRESULT ( *GetVTSN)(IDVDTitleSet *This, UINT16 *pVTSN);HRESULT ( *GetVolume)(IDVDTitleSet *This, IDVDVideoVolume **pVolume);};
struct IDXTransformVtbl {HRESULT ( *QueryInterface)(IDXTransform *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTransform *This);ULONG ( *Release)(IDXTransform *This);HRESULT ( *GetGenerationId)(IDXTransform *This, ULONG *pID);HRESULT ( *IncrementGenerationId)(IDXTransform *This, BOOL bRefresh);HRESULT ( *GetObjectSize)(IDXTransform *This, ULONG *pcbSize);HRESULT ( *Setup)(IDXTransform *This, IUnknown * *punkInputs, ULONG ulNumInputs, IUnknown * *punkOutputs, ULONG ulNumOutputs, DWORD dwFlags);HRESULT ( *Execute)(IDXTransform *This,  GUID *pRequestID,  DXBNDS *pClipBnds,  DXVEC *pPlacement);HRESULT ( *MapBoundsIn2Out)(IDXTransform *This,  DXBNDS *pInBounds, ULONG ulNumInBnds, ULONG ulOutIndex, DXBNDS *pOutBounds);HRESULT ( *MapBoundsOut2In)(IDXTransform *This, ULONG ulOutIndex,  DXBNDS *pOutBounds, ULONG ulInIndex, DXBNDS *pInBounds);HRESULT ( *SetMiscFlags)(IDXTransform *This, DWORD dwMiscFlags);HRESULT ( *GetMiscFlags)(IDXTransform *This, DWORD *pdwMiscFlags);HRESULT ( *GetInOutInfo)(IDXTransform *This, BOOL bIsOutput, ULONG ulIndex, DWORD *pdwFlags, GUID *pIDs, ULONG *pcIDs, IUnknown **ppUnkCurrentObject);HRESULT ( *SetQuality)(IDXTransform *This, float fQuality);HRESULT ( *GetQuality)(IDXTransform *This, float *fQuality);};
struct IFileAsyncIOVtbl {HRESULT ( *QueryInterface)(IFileAsyncIO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileAsyncIO *This);ULONG ( *Release)(IFileAsyncIO *This);HRESULT ( *QueryAlignment)(IFileAsyncIO *This, LPDWORD pdwAlign);HRESULT ( *Read)(IFileAsyncIO *This, AsyncIOReq *pReq);HRESULT ( *Write)(IFileAsyncIO *This, AsyncIOReq *pReq);HRESULT ( *WaitForNext)(IFileAsyncIO *This, AsyncIOReq **ppReq, DWORD dwTimeout);HRESULT ( *WaitForSpecific)(IFileAsyncIO *This, AsyncIOReq *pReq, DWORD dwTimeout);HRESULT ( *DiscardPending)(IFileAsyncIO *This);HRESULT ( *Flush)(IFileAsyncIO *This);};
struct IMediaHolderVtbl {HRESULT ( *QueryInterface)(IMediaHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaHolder *This);ULONG ( *Release)(IMediaHolder *This);HRESULT ( *RegisterClassMapping)(IMediaHolder *This, DWORD ctypes,LPCSTR  *    rgszNames, CLSID rgClsIDs[], DWORD dwReserved);HRESULT ( *FindClassMapping)(IMediaHolder *This, LPCSTR szMime, CLSID *pClassID, DWORD dwReserved);};
struct IMediaStreamVtbl {HRESULT ( *QueryInterface)(IMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaStream *This);ULONG ( *Release)(IMediaStream *This);HRESULT ( *GetMultiMediaStream)(IMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IMediaStream *This, DWORD dwFlags);};
struct IRowPositionVtbl {HRESULT ( *QueryInterface)(IRowPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowPosition *This);ULONG ( *Release)(IRowPosition *This);HRESULT ( *ClearRowPosition)(IRowPosition *This);HRESULT ( *GetRowPosition)(IRowPosition *This, HCHAPTER *phChapter, HROW *phRow, DBPOSITIONFLAGS *pdwPositionFlags);HRESULT ( *GetRowset)(IRowPosition *This,  IID * riid, IUnknown **ppRowset);HRESULT ( *Initialize)(IRowPosition *This, IUnknown *pRowset);HRESULT ( *SetRowPosition)(IRowPosition *This, HCHAPTER hChapter, HROW hRow, DBPOSITIONFLAGS dwPositionFlags);};
struct ITypeMarshalVtbl {HRESULT ( *QueryInterface)(ITypeMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeMarshal *This);ULONG ( *Release)(ITypeMarshal *This);HRESULT ( *Size)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);HRESULT ( *Marshal)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);HRESULT ( *Unmarshal)(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);HRESULT ( *Free)(ITypeMarshal *This, PVOID pvType);};
struct _D3DSURFACE_DESC {D3DFORMAT Format;D3DRESOURCETYPE Type;DWORD Usage;D3DPOOL Pool;UINT Size;D3DMULTISAMPLE_TYPE MultiSampleType;UINT Width;UINT Height;};
struct _FILEDESCRIPTORA {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;CHAR cFileName[260];};
struct _FILEDESCRIPTORW {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;WCHAR cFileName[260];};
struct _SHFILEOPSTRUCTA {HWND hwnd;UINT wFunc;LPCSTR pFrom;LPCSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCSTR lpszProgressTitle;};
struct tagIMAP_RESPONSE {WPARAM wParam;LPARAM lParam;HRESULT hrResult;LPSTR lpszResponseText;IMAP_RESPONSE_TYPE irtResponseType;IMAP_RESPONSE_DATA irdResponseData;};
struct IDVDTimeMapVtbl {HRESULT ( *QueryInterface)(IDVDTimeMap *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDTimeMap *This);ULONG ( *Release)(IDVDTimeMap *This);HRESULT ( *GetTableHeader)(IDVDTimeMap *This, UINT8 *pTMU, UINT16 *pnEntries);HRESULT ( *GetVOBUAddress)(IDVDTimeMap *This, UINT16 nEntryIndex, UINT32 *pVobuRlbn);};
struct IDXGradientVtbl {HRESULT ( *QueryInterface)(IDXGradient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXGradient *This);ULONG ( *Release)(IDXGradient *This);HRESULT ( *SetOutputSize)(IDXGradient *This,  SIZE OutSize, BOOL bMaintainAspect);HRESULT ( *SetGradient)(IDXGradient *This, DXSAMPLE StartColor, DXSAMPLE EndColor, BOOL bHorizontal);HRESULT ( *GetOutputSize)(IDXGradient *This, SIZE *pOutSize);};
struct IDataFilterVtbl {HRESULT ( *QueryInterface)(IDataFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataFilter *This);ULONG ( *Release)(IDataFilter *This);HRESULT ( *DoEncode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *DoDecode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *SetEncodingLevel)(IDataFilter *This, DWORD dwEncLevel);};
struct IRowsetInfoVtbl {HRESULT ( *QueryInterface)(IRowsetInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetInfo *This);ULONG ( *Release)(IRowsetInfo *This);HRESULT ( *GetProperties)(IRowsetInfo *This,  ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *GetReferencedRowset)(IRowsetInfo *This, DBORDINAL iOrdinal,  IID * riid, IUnknown **ppReferencedRowset);HRESULT ( *GetSpecification)(IRowsetInfo *This,  IID * riid, IUnknown **ppSpecification);};
typedef INT ( *LPNSPSETSERVICE)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo, LPWSAQUERYSETW lpqsRegInfo, WSAESETSERVICEOP essOperation, DWORD dwControlFlags);
typedef USB_TRANSFER (*LPSET_INTERFACE)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, UCHAR);
typedef HRESULT ( *RUNSETUPCOMMAND)(HWND hWnd, LPCSTR szCmdName, LPCSTR szInfSection, LPCSTR szDir, LPCSTR szTitle, HANDLE *phEXE, DWORD dwFlags, LPVOID pvReserved);
struct tagCODEPAGEINFO {DWORD dwMask;CODEPAGEID cpiCodePage;BOOL fIsValidCodePage;ULONG ulMaxCharSize;BOOL fInternetCP;CODEPAGEID cpiFamily;CHAR szName[128];CHAR szBodyCset[128];CHAR szHeaderCset[128];CHAR szWebCset[128];CHAR szFixedFont[128];CHAR szVariableFont[128];ENCODINGTYPE ietNewsDefault;ENCODINGTYPE ietMailDefault;DWORD dwReserved1;};
struct IAMTVTunerVtbl {HRESULT ( *QueryInterface)(IAMTVTuner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTVTuner *This);ULONG ( *Release)(IAMTVTuner *This);HRESULT ( *put_Channel)(IAMTVTuner *This, int lChannel, int lVideoSubChannel, int lAudioSubChannel);HRESULT ( *get_Channel)(IAMTVTuner *This, int *plChannel, int *plVideoSubChannel, int *plAudioSubChannel);HRESULT ( *ChannelMinMax)(IAMTVTuner *This, int *lChannelMin, int *lChannelMax);HRESULT ( *put_CountryCode)(IAMTVTuner *This, int lCountryCode);HRESULT ( *get_CountryCode)(IAMTVTuner *This, int *plCountryCode);HRESULT ( *put_TuningSpace)(IAMTVTuner *This, int lTuningSpace);HRESULT ( *get_TuningSpace)(IAMTVTuner *This, int *plTuningSpace);HRESULT ( *Logon)(IAMTVTuner *This, HANDLE hCurrentUser);HRESULT ( *Logout)(IAMTVTuner *This);HRESULT ( *SignalPresent)(IAMTVTuner *This, int *plSignalStrength);HRESULT ( *put_Mode)(IAMTVTuner *This, AMTunerModeType lMode);HRESULT ( *get_Mode)(IAMTVTuner *This, AMTunerModeType *plMode);HRESULT ( *GetAvailableModes)(IAMTVTuner *This, int *plModes);HRESULT ( *RegisterNotificationCallBack)(IAMTVTuner *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IAMTVTuner *This, IAMTunerNotification *pNotify);HRESULT ( *get_AvailableTVFormats)(IAMTVTuner *This, int *lAnalogVideoStandard);HRESULT ( *get_TVFormat)(IAMTVTuner *This, int *plAnalogVideoStandard);HRESULT ( *AutoTune)(IAMTVTuner *This, int lChannel, int *plFoundSignal);HRESULT ( *StoreAutoTune)(IAMTVTuner *This);HRESULT ( *get_NumInputConnections)(IAMTVTuner *This, int *plNumInputConnections);HRESULT ( *put_InputType)(IAMTVTuner *This, int lIndex, TunerInputType InputType);HRESULT ( *get_InputType)(IAMTVTuner *This, int lIndex, TunerInputType *pInputType);HRESULT ( *put_ConnectInput)(IAMTVTuner *This, int lIndex);HRESULT ( *get_ConnectInput)(IAMTVTuner *This, int *plIndex);HRESULT ( *get_VideoFrequency)(IAMTVTuner *This, int *lFreq);HRESULT ( *get_AudioFrequency)(IAMTVTuner *This, int *lFreq);};
struct IAudioDataVtbl {HRESULT ( *QueryInterface)(IAudioData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioData *This);ULONG ( *Release)(IAudioData *This);HRESULT ( *SetBuffer)(IAudioData *This, DWORD cbSize, BYTE *pbData, DWORD dwFlags);HRESULT ( *GetInfo)(IAudioData *This, DWORD *pdwLength, BYTE **ppbData, DWORD *pcbActualData);HRESULT ( *SetActual)(IAudioData *This, DWORD cbDataValid);HRESULT ( *GetFormat)(IAudioData *This, WAVEFORMATEX *pWaveFormatCurrent);HRESULT ( *SetFormat)(IAudioData *This,  WAVEFORMATEX *lpWaveFormat);};
struct ILockBytesVtbl {HRESULT ( *QueryInterface)(ILockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILockBytes *This);ULONG ( *Release)(ILockBytes *This);HRESULT ( *ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Flush)(ILockBytes *This);HRESULT ( *SetSize)(ILockBytes *This, ULARGE_INTEGER cb);HRESULT ( *LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IRangeListVtbl {HRESULT ( *QueryInterface)(IRangeList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRangeList *This);ULONG ( *Release)(IRangeList *This);HRESULT ( *Clear)(IRangeList *This);HRESULT ( *IsInRange)(IRangeList *This,  ULONG value);HRESULT ( *Min)(IRangeList *This, ULONG *pulMin);HRESULT ( *Max)(IRangeList *This, ULONG *pulMax);HRESULT ( *Save)(IRangeList *This, byte **ppbDestination, ULONG *pulSizeOfDestination);HRESULT ( *Load)(IRangeList *This, byte *pbSource,  ULONG ulSizeOfSource);HRESULT ( *AddRange)(IRangeList *This,  ULONG low,  ULONG high);HRESULT ( *AddSingleValue)(IRangeList *This,  ULONG value);HRESULT ( *AddRangeList)(IRangeList *This,  IRangeList *prl);HRESULT ( *DeleteRange)(IRangeList *This,  ULONG low,  ULONG high);HRESULT ( *DeleteSingleValue)(IRangeList *This,  ULONG value);HRESULT ( *DeleteRangeList)(IRangeList *This,  IRangeList *prl);HRESULT ( *MinOfRange)(IRangeList *This,  ULONG value, ULONG *pulMinOfRange);HRESULT ( *MaxOfRange)(IRangeList *This,  ULONG value, ULONG *pulMaxOfRange);HRESULT ( *RangeToIMAPString)(IRangeList *This, LPSTR *ppszDestination, LPDWORD pdwLengthOfDestination);HRESULT ( *Next)(IRangeList *This,  ULONG current, ULONG *pulNext);HRESULT ( *Prev)(IRangeList *This,  ULONG current, ULONG *pulPrev);HRESULT ( *Cardinality)(IRangeList *This, ULONG *pulCardinality);HRESULT ( *CardinalityFrom)(IRangeList *This,  ULONG ulStartPoint, ULONG *pulCardinalityFrom);};
struct IShellIconVtbl {HRESULT ( *QueryInterface)(IShellIcon *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIcon *This);ULONG ( *Release)(IShellIcon *This);HRESULT ( *GetIconOf)(IShellIcon *This, LPCITEMIDLIST pidl, UINT flags, LPINT lpIconIndex);};
typedef HRESULT ( *LPCQPAGEPROC_A)(LPCQPAGE_A pPage, HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef HRESULT ( *LPCQPAGEPROC_W)(LPCQPAGE_W pPage, HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
struct _DDPIXELFORMAT {DWORD dwSize;DWORD dwFlags;DWORD dwFourCC;_DDPIXELFORMAT___F1D3FB4D78950D0942225445130999CB __anonymous0;_DDPIXELFORMAT___6A86D2BA2D533C5D3D5AB1F1491969D5 __anonymous1;_DDPIXELFORMAT___4689F3D0B997E93FAF3E67A693E85360 __anonymous2;_DDPIXELFORMAT___4C86B66084EB9B6F3AE81991D3FADB38 __anonymous3;_DDPIXELFORMAT___23DF69239FC04D9BE22118E1AD8451FB __anonymous4;};
struct _avisuperindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];struct _avisuperindex___avisuperindex_entry aIndex[1022];};
struct IMimeInfoVtbl {HRESULT ( *QueryInterface)(IMimeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeInfo *This);ULONG ( *Release)(IMimeInfo *This);HRESULT ( *GetMimeCLSIDMapping)(IMimeInfo *This, UINT *pcTypes, LPCSTR **ppszTypes, CLSID **ppclsID);};
struct IShellAppVtbl {HRESULT ( *QueryInterface)(IShellApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellApp *This);ULONG ( *Release)(IShellApp *This);HRESULT ( *GetAppInfo)(IShellApp *This, PAPPINFODATA pai);HRESULT ( *GetPossibleActions)(IShellApp *This, DWORD *pdwActions);HRESULT ( *GetSlowAppInfo)(IShellApp *This, PSLOWAPPINFO psaid);HRESULT ( *GetCachedSlowAppInfo)(IShellApp *This, PSLOWAPPINFO psaid);HRESULT ( *IsInstalled)(IShellApp *This);};
struct IWordSinkVtbl {HRESULT ( *QueryInterface)(IWordSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWordSink *This);ULONG ( *Release)(IWordSink *This);SCODE ( *PutWord)(IWordSink *This, ULONG cwc,  WCHAR *pwcInBuf, ULONG cwcSrcLen, ULONG cwcSrcPos);SCODE ( *PutAltWord)(IWordSink *This, ULONG cwc,  WCHAR *pwcInBuf, ULONG cwcSrcLen, ULONG cwcSrcPos);SCODE ( *StartAltPhrase)(IWordSink *This);SCODE ( *EndAltPhrase)(IWordSink *This);SCODE ( *PutBreak)(IWordSink *This, WORDREP_BREAK_TYPE breakType);};
typedef PHYSICAL_ADDRESS (*PMAP_TRANSFER)(PDMA_ADAPTER DmaAdapter, PMDL Mdl, PVOID MapRegisterBase, PVOID CurrentVa, PULONG Length, BOOLEAN WriteToDevice);
struct _PCI_DEV_INFO {WCHAR RegPath[256];DWORD Bus;DWORD Device;DWORD Function;PPCI_COMMON_CONFIG Cfg;PCI_RSRC_LIST MemBase;PCI_RSRC_LIST MemLen;PCI_RSRC_LIST IoBase;PCI_RSRC_LIST IoLen;BOOL Matched;BOOL Configure;BOOL ConfigEntry;WCHAR ConfigEntryName[64];WCHAR ConfigDllName[64];WCHAR DllName[64];DWORD DevFlags;PPCI_CFG_INFO ConfigInfo;DWORD Command;DWORD BridgeControl;DWORD Latency;DWORD SecondaryLatency;};
struct _avitcdlindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];AVITCDLINDEX_ENTRY aIndex[584];DWORD adwTrailingFill[3512];};
struct IEnumDMOVtbl {HRESULT ( *QueryInterface)(IEnumDMO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumDMO *This);ULONG ( *Release)(IEnumDMO *This);HRESULT ( *Next)(IEnumDMO *This, DWORD cItemsToFetch, CLSID *pCLSID, WCHAR **Names, DWORD *pcItemsFetched);HRESULT ( *Skip)(IEnumDMO *This, DWORD cItemsToSkip);HRESULT ( *Reset)(IEnumDMO *This);HRESULT ( *Clone)(IEnumDMO *This, IEnumDMO **ppEnum);};
struct IStemmerVtbl {HRESULT ( *QueryInterface)(IStemmer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStemmer *This);ULONG ( *Release)(IStemmer *This);SCODE ( *Init)(IStemmer *This, ULONG ulMaxTokenSize, BOOL *pfLicense);SCODE ( *StemWord)(IStemmer *This,  WCHAR *pwcInBuf, ULONG cwc, IStemSink *pStemSink);SCODE ( *GetLicenseToUse)(IStemmer *This,  WCHAR **ppwcsLicense);};
struct tagTOOLINFOA {UINT cbSize;UINT uFlags;HWND hwnd;UINT uId;RECT rect;HINSTANCE hinst;LPSTR lpszText;LPARAM lParam;};
struct IVoIPUIVtbl {HRESULT ( *QueryInterface)(IVoIPUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPUI *This);ULONG ( *Release)(IVoIPUI *This);HRESULT ( *OnCallEvent)(IVoIPUI *This, VoIPCallEvent vceEvent, IVoIPCurrentCall *piCurrentCall);HRESULT ( *OnSystemEvent)(IVoIPUI *This, VoIPSystemEvent vseEvent, INT_PTR iptrParam);};
struct ITimerVtbl {HRESULT ( *QueryInterface)(ITimer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITimer *This);ULONG ( *Release)(ITimer *This);HRESULT ( *Advise)(ITimer *This, VARIANT vtimeMin, VARIANT vtimeMax, VARIANT vtimeInterval, DWORD dwFlags, ITimerSink *pTimerSink, DWORD *pdwCookie);HRESULT ( *Unadvise)(ITimer *This, DWORD dwCookie);HRESULT ( *Freeze)(ITimer *This, BOOL fFreeze);HRESULT ( *GetTime)(ITimer *This, VARIANT *pvtime);};
struct _CRL_INFO {DWORD dwVersion;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME ThisUpdate;FILETIME NextUpdate;DWORD cCRLEntry;PCRL_ENTRY rgCRLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _cqpage_A {DWORD cbStruct;DWORD dwFlags;LPCQPAGEPROC_A pPageProc;HINSTANCE hInstance;INT idPageName;INT idPageTemplate;DLGPROC pDlgProc;LPARAM lParam;};
struct _cqpage_W {DWORD cbStruct;DWORD dwFlags;LPCQPAGEPROC_W pPageProc;HINSTANCE hInstance;INT idPageName;INT idPageTemplate;DLGPROC pDlgProc;LPARAM lParam;};
struct tagMSG {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;POINT pt;};
struct _KDPC {USHORT Type;UCHAR Number;UCHAR Importance;LIST_ENTRY DpcListEntry;PKDEFERRED_ROUTINE DeferredRoutine;PVOID DeferredContext;PVOID SystemArgument1;PVOID SystemArgument2;PULONG Lock;};
struct IOleControlNavigation2AdviseSinkVtbl {HRESULT ( *QueryInterface)(IOleControlNavigation2AdviseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlNavigation2AdviseSink *This);ULONG ( *Release)(IOleControlNavigation2AdviseSink *This);HRESULT ( *OnNavigationStatusChange)(IOleControlNavigation2AdviseSink *This, DWORD navigationStatus);HRESULT ( *OnRectsChange)(IOleControlNavigation2AdviseSink *This);HRESULT ( *OnFocusRectChange)(IOleControlNavigation2AdviseSink *This, LPCRECT newRect);HRESULT ( *NavigateOutControl)(IOleControlNavigation2AdviseSink *This, RECT lastRect, NVFOCUS_DIRECTION direction);HRESULT ( *InvokeSoftKeyboard)(IOleControlNavigation2AdviseSink *This, RECT where);};
struct IInternetHostSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetHostSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetHostSecurityManager *This);ULONG ( *Release)(IInternetHostSecurityManager *This);HRESULT ( *GetSecurityId)(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT ( *ProcessUrlAction)(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetHostSecurityManager *This,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);};
struct IDDrawExclModeVideoCallbackVtbl {HRESULT ( *QueryInterface)(IDDrawExclModeVideoCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDDrawExclModeVideoCallback *This);ULONG ( *Release)(IDDrawExclModeVideoCallback *This);HRESULT ( *OnUpdateOverlay)(IDDrawExclModeVideoCallback *This, BOOL bBefore, DWORD dwFlags, BOOL bOldVisible,  RECT *prcOldSrc,  RECT *prcOldDest, BOOL bNewVisible,  RECT *prcNewSrc,  RECT *prcNewDest);HRESULT ( *OnUpdateColorKey)(IDDrawExclModeVideoCallback *This,  COLORKEY *pKey, DWORD dwColor);HRESULT ( *OnUpdateSize)(IDDrawExclModeVideoCallback *This, DWORD dwWidth, DWORD dwHeight, DWORD dwARWidth, DWORD dwARHeight);};
struct IOleInPlaceActiveObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceActiveObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceActiveObject *This);ULONG ( *Release)(IOleInPlaceActiveObject *This);HRESULT ( *GetWindow)(IOleInPlaceActiveObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceActiveObject *This, LPMSG lpmsg);HRESULT ( *OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);HRESULT ( *EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);};
struct IElementBehaviorLayoutVtbl {HRESULT ( *QueryInterface)(IElementBehaviorLayout *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorLayout *This);ULONG ( *Release)(IElementBehaviorLayout *This);HRESULT ( *GetSize)(IElementBehaviorLayout *This, LONG dwFlags, SIZE sizeContent, POINT *pptTranslateBy, POINT *pptTopLeft, SIZE *psizeProposed);HRESULT ( *GetLayoutInfo)(IElementBehaviorLayout *This, LONG *plLayoutInfo);HRESULT ( *GetPosition)(IElementBehaviorLayout *This, LONG lFlags, POINT *pptTopLeft);HRESULT ( *MapSize)(IElementBehaviorLayout *This, SIZE *psizeIn, RECT *prcOut);};
struct IInstallEngineCallbackVtbl {HRESULT ( *QueryInterface)(IInstallEngineCallback *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallEngineCallback *This);ULONG ( *Release)(IInstallEngineCallback *This);HRESULT ( *OnEngineStatusChange)(IInstallEngineCallback *This, DWORD dwEngineStatus, DWORD substatus);HRESULT ( *OnStartInstall)(IInstallEngineCallback *This, DWORD dwDLSize, DWORD dwInstallSize);HRESULT ( *OnStartComponent)(IInstallEngineCallback *This, LPCSTR pszID, DWORD dwDLSize, DWORD dwInstallSize, LPCSTR pszString);HRESULT ( *OnComponentProgress)(IInstallEngineCallback *This, LPCSTR pszID, DWORD dwPhase, LPCSTR pszString, LPCSTR pszMsgString, ULONG progress, ULONG themax);HRESULT ( *OnStopComponent)(IInstallEngineCallback *This, LPCSTR pszID, HRESULT hError, DWORD dwPhase, LPCSTR pszString, DWORD dwStatus);HRESULT ( *OnStopInstall)(IInstallEngineCallback *This, HRESULT hrError, LPCSTR szError, DWORD dwStatus);HRESULT ( *OnEngineProblem)(IInstallEngineCallback *This, DWORD dwEngineProblem, LPDWORD dwAction);};
struct IMLangLineBreakConsoleVtbl {HRESULT ( *QueryInterface)(IMLangLineBreakConsole *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangLineBreakConsole *This);ULONG ( *Release)(IMLangLineBreakConsole *This);HRESULT ( *BreakLineML)(IMLangLineBreakConsole *This, IMLangString *pSrcMLStr, int lSrcPos, int lSrcLen, int cMinColumns, int cMaxColumns, int *plLineLen, int *plSkipLen);HRESULT ( *BreakLineW)(IMLangLineBreakConsole *This, LCID locale,  WCHAR *pszSrc, int cchSrc, int cMaxColumns, int *pcchLine, int *pcchSkip);HRESULT ( *BreakLineA)(IMLangLineBreakConsole *This, LCID locale, UINT uCodePage,  CHAR *pszSrc, int cchSrc, int cMaxColumns, int *pcchLine, int *pcchSkip);};
struct _CMSG_CONTENT_ENCRYPT_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;PFN_CMSG_ALLOC pfnAlloc;PFN_CMSG_FREE pfnFree;DWORD dwEncryptFlags;HCRYPTKEY hContentEncryptKey;DWORD dwFlags;};
struct IDVDStreamControlInfoVtbl {HRESULT ( *QueryInterface)(IDVDStreamControlInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDStreamControlInfo *This);ULONG ( *Release)(IDVDStreamControlInfo *This);HRESULT ( *SetNavigationPack)(IDVDStreamControlInfo *This, UINT8 *pPack);HRESULT ( *GetBlockAddress)(IDVDStreamControlInfo *This, UINT32 *pLBN);HRESULT ( *GetCategory)(IDVDStreamControlInfo *This, UINT16 *pCat);HRESULT ( *GetUserOperationControlMask)(IDVDStreamControlInfo *This, UINT32 *pMask);HRESULT ( *GetPresentationTimes)(IDVDStreamControlInfo *This, UINT32 *pMpegStart, UINT32 *pMpegEnd);HRESULT ( *GetEndSequencePTM)(IDVDStreamControlInfo *This, UINT32 *pMpegTime);HRESULT ( *GetCellRelativeStartTime)(IDVDStreamControlInfo *This, UINT32 *pBCDTime);HRESULT ( *GetNonSeamlessAngleChangeAddress)(IDVDStreamControlInfo *This, UINT8 angle, UINT32 *pRLBN);HRESULT ( *GetHighlightInfo)(IDVDStreamControlInfo *This, IDVDHighlightInfo **ppHLI);HRESULT ( *GetDataSearchInfo)(IDVDStreamControlInfo *This, IDVDDataSearchInfo **ppDSI);HRESULT ( *GetRecordingVideoInfo)(IDVDStreamControlInfo *This, DVD_ISRC *pVideo);HRESULT ( *GetRecordingAudioInfo)(IDVDStreamControlInfo *This, UINT8 stream, DVD_ISRC *pAudio);HRESULT ( *GetRecordingSubpictureGroup)(IDVDStreamControlInfo *This, UINT8 *pSelector);HRESULT ( *GetRecordingSubpictureInfo)(IDVDStreamControlInfo *This, UINT8 bin, DVD_ISRC *pSubInfo);HRESULT ( *ReaderLock)(IDVDStreamControlInfo *This);HRESULT ( *ReaderUnlock)(IDVDStreamControlInfo *This);};
struct IObjectAccessControlVtbl {HRESULT ( *QueryInterface)(IObjectAccessControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectAccessControl *This);ULONG ( *Release)(IObjectAccessControl *This);HRESULT ( *GetObjectAccessRights)(IObjectAccessControl *This, SEC_OBJECT *pObject, ULONG *pcAccessEntries, EXPLICIT_ACCESS_W **prgAccessEntries);HRESULT ( *GetObjectOwner)(IObjectAccessControl *This, SEC_OBJECT *pObject, TRUSTEE_W **ppOwner);HRESULT ( *IsObjectAccessAllowed)(IObjectAccessControl *This, SEC_OBJECT *pObject, EXPLICIT_ACCESS_W *pAccessEntry, BOOL *pfResult);HRESULT ( *SetObjectAccessRights)(IObjectAccessControl *This, SEC_OBJECT *pObject, ULONG cAccessEntries, EXPLICIT_ACCESS_W *prgAccessEntries);HRESULT ( *SetObjectOwner)(IObjectAccessControl *This, SEC_OBJECT *pObject, TRUSTEE_W *pOwner);};
typedef USB_TRANSFER (*LPISSUE_CONTROL_TRANSFER)(USB_PIPE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, LPCVOID, DWORD, LPVOID, ULONG);
struct IReconcilableObjectVtbl {HRESULT ( *QueryInterface)(IReconcilableObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReconcilableObject *This);ULONG ( *Release)(IReconcilableObject *This);HRESULT ( *Reconcile)(IReconcilableObject *This, IReconcileInitiator *pInitiator, DWORD dwFlags, HWND hwndOwner, HWND hwndProgressFeedback, ULONG cInput, LPMONIKER *rgpmkOtherInput, LONG *plOutIndex, IStorage *pstgNewResidues, ULONG *pvReserved);HRESULT ( *GetProgressFeedbackMaxEstimate)(IReconcilableObject *This, ULONG *pulProgressMax);};
typedef USB_TRANSFER (*LPISSUE_VENDOR_TRANSFER)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, LPCUSB_DEVICE_REQUEST, LPVOID, ULONG);
struct _D3DPRESENT_PARAMETERS_ {UINT BackBufferWidth;UINT BackBufferHeight;D3DFORMAT BackBufferFormat;UINT BackBufferCount;D3DMULTISAMPLE_TYPE MultiSampleType;D3DSWAPEFFECT SwapEffect;HWND hDeviceWindow;BOOL Windowed;BOOL EnableAutoDepthStencil;D3DFORMAT AutoDepthStencilFormat;DWORD Flags;UINT FullScreen_RefreshRateInHz;UINT FullScreen_PresentationInterval;};
struct tagFETCH_CMD_RESULTS_EX {DWORD dwMsgSeqNum;BOOL bMsgFlags;IMAP_MSGFLAGS mfMsgFlags;BOOL bRFC822Size;DWORD dwRFC822Size;BOOL bUID;DWORD dwUID;BOOL bInternalDate;FILETIME ftInternalDate;LPARAM lpFetchCookie1;LPARAM lpFetchCookie2;BOOL bEnvelope;FILETIME ftENVDate;LPSTR pszENVSubject;IMAPADDR *piaENVFrom;IMAPADDR *piaENVSender;IMAPADDR *piaENVReplyTo;IMAPADDR *piaENVTo;IMAPADDR *piaENVCc;IMAPADDR *piaENVBcc;LPSTR pszENVInReplyTo;LPSTR pszENVMessageID;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;};
struct IAudioStreamSampleVtbl {HRESULT ( *QueryInterface)(IAudioStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioStreamSample *This);ULONG ( *Release)(IAudioStreamSample *This);HRESULT ( *GetMediaStream)(IAudioStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IAudioStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IAudioStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IAudioStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IAudioStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *GetAudioData)(IAudioStreamSample *This, IAudioData **ppAudio);};
struct IDVDDataSearchInfoVtbl {HRESULT ( *QueryInterface)(IDVDDataSearchInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDDataSearchInfo *This);ULONG ( *Release)(IDVDDataSearchInfo *This);HRESULT ( *GetControlInfo)(IDVDDataSearchInfo *This, IDVDStreamControlInfo **ppStream);HRESULT ( *GetSCRBase)(IDVDDataSearchInfo *This, UINT32 *pSCR);HRESULT ( *GetUnitEndAddress)(IDVDDataSearchInfo *This, UINT32 *pRLBN);HRESULT ( *GetRefPictureAddress)(IDVDDataSearchInfo *This, UINT8 refNo, UINT32 *pRLBN);HRESULT ( *GetVOB_ID)(IDVDDataSearchInfo *This, UINT16 *pVOB_ID);HRESULT ( *GetC_IDN)(IDVDDataSearchInfo *This, UINT8 *pC_IDN);HRESULT ( *GetSeamlessCategory)(IDVDDataSearchInfo *This, UINT16 *pCat);HRESULT ( *GetInterleavedUnitEndAddress)(IDVDDataSearchInfo *This, UINT32 *pRLBN);HRESULT ( *GetNextInterleavedUnit)(IDVDDataSearchInfo *This, UINT32 *pRLBN, UINT16 *pLBSize);HRESULT ( *GetAudioGapInfo)(IDVDDataSearchInfo *This, UINT8 streamNo, UINT8 gapNo, UINT32 *pMpegStart, UINT32 *pMpegEnd);HRESULT ( *GetSeamlessAngleChangeAddress)(IDVDDataSearchInfo *This, UINT8 angle, UINT32 *pRLBN, UINT32 *pLBSize);HRESULT ( *GetUnitStepAddress)(IDVDDataSearchInfo *This, UINT8 dir, INT16 stepIndex, UINT32 *pAddress);HRESULT ( *GetSyncAudioAddress)(IDVDDataSearchInfo *This, UINT8 streamN, UINT16 *pRLBN);HRESULT ( *GetSyncSPAddress)(IDVDDataSearchInfo *This, UINT8 streamN, UINT32 *pRLBN);};
struct IDXSurfaceModifierVtbl {HRESULT ( *QueryInterface)(IDXSurfaceModifier *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXSurfaceModifier *This);ULONG ( *Release)(IDXSurfaceModifier *This);HRESULT ( *SetFillColor)(IDXSurfaceModifier *This, DXSAMPLE Color);HRESULT ( *GetFillColor)(IDXSurfaceModifier *This, DXSAMPLE *pColor);HRESULT ( *SetBounds)(IDXSurfaceModifier *This,  DXBNDS *pBounds);HRESULT ( *SetBackground)(IDXSurfaceModifier *This, IDXSurface *pSurface);HRESULT ( *GetBackground)(IDXSurfaceModifier *This, IDXSurface **ppSurface);HRESULT ( *SetCompositeOperation)(IDXSurfaceModifier *This, DXSURFMODCOMPOP CompOp);HRESULT ( *GetCompositeOperation)(IDXSurfaceModifier *This, DXSURFMODCOMPOP *pCompOp);HRESULT ( *SetForeground)(IDXSurfaceModifier *This, IDXSurface *pSurface, BOOL bTile,  POINT *pOrigin);HRESULT ( *GetForeground)(IDXSurfaceModifier *This, IDXSurface **ppSurface, BOOL *pbTile, POINT *pOrigin);HRESULT ( *SetOpacity)(IDXSurfaceModifier *This, float Opacity);HRESULT ( *GetOpacity)(IDXSurfaceModifier *This, float *pOpacity);HRESULT ( *SetLookup)(IDXSurfaceModifier *This, IDXLookupTable *pLookupTable);HRESULT ( *GetLookup)(IDXSurfaceModifier *This, IDXLookupTable **ppLookupTable);};
struct IPersistStreamInitVtbl {HRESULT ( *QueryInterface)(IPersistStreamInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStreamInit *This);ULONG ( *Release)(IPersistStreamInit *This);HRESULT ( *GetClassID)(IPersistStreamInit *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStreamInit *This);HRESULT ( *Load)(IPersistStreamInit *This, LPSTREAM pStm);HRESULT ( *Save)(IPersistStreamInit *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStreamInit *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IPersistStreamInit *This);};
struct IRowsetNewRowAfterVtbl {HRESULT ( *QueryInterface)(IRowsetNewRowAfter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNewRowAfter *This);ULONG ( *Release)(IRowsetNewRowAfter *This);HRESULT ( *SetNewDataAfter)(IRowsetNewRowAfter *This, HCHAPTER hChapter, ULONG cbbmPrevious,  BYTE *pbmPrevious, HACCESSOR hAccessor, BYTE *pData, HROW *phRow);};
typedef USB_TRANSFER (*LPISSUE_ISOCH_TRANSFER)(USB_PIPE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, DWORD, DWORD, LPCDWORD, LPVOID, ULONG);
struct tagDVD_AudioAttributes {DVD_AUDIO_APPMODE AppMode;BYTE AppModeData;DVD_AUDIO_FORMAT AudioFormat;LCID Language;DVD_AUDIO_LANG_EXT LanguageExtension;BOOL fHasMultichannelInfo;DWORD dwFrequency;BYTE bQuantization;BYTE bNumberOfChannels;DWORD dwReserved[2];};
struct IAudioMediaStreamVtbl {HRESULT ( *QueryInterface)(IAudioMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioMediaStream *This);ULONG ( *Release)(IAudioMediaStream *This);HRESULT ( *GetMultiMediaStream)(IAudioMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAudioMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAudioMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAudioMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAudioMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAudioMediaStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IAudioMediaStream *This, WAVEFORMATEX *pWaveFormatCurrent);HRESULT ( *SetFormat)(IAudioMediaStream *This,  WAVEFORMATEX *lpWaveFormat);HRESULT ( *CreateSample)(IAudioMediaStream *This, IAudioData *pAudioData, DWORD dwFlags, IAudioStreamSample **ppSample);};
struct IDVDUserOperationVtbl {HRESULT ( *QueryInterface)(IDVDUserOperation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDUserOperation *This);ULONG ( *Release)(IDVDUserOperation *This);HRESULT ( *TitlePlay)(IDVDUserOperation *This, BYTE byteTitleNumber);HRESULT ( *PartPlay)(IDVDUserOperation *This, BYTE byteTitleNumber, USHORT uhPartOfTheTitle);HRESULT ( *TimePlay)(IDVDUserOperation *This, BYTE byteTitleNumber, UINT uiBCDTime);HRESULT ( *Stop)(IDVDUserOperation *This);HRESULT ( *GoUp)(IDVDUserOperation *This);HRESULT ( *TimeSearch)(IDVDUserOperation *This, UINT uiBCDTime);HRESULT ( *PTTSearch)(IDVDUserOperation *This, USHORT uhPartOfTheTitle);HRESULT ( *ProgramSearch)(IDVDUserOperation *This, BYTE byteProgramType);HRESULT ( *ForwardScan)(IDVDUserOperation *This, double dblSpeed);HRESULT ( *BackwardScan)(IDVDUserOperation *This, double dblSpeed);HRESULT ( *MenuCall)(IDVDUserOperation *This, BYTE byteMenu_ID);HRESULT ( *Resume)(IDVDUserOperation *This);HRESULT ( *ButtonSelect)(IDVDUserOperation *This, BYTE byteDirection);HRESULT ( *ButtonActivate)(IDVDUserOperation *This);HRESULT ( *ButtonSelectAndActivate)(IDVDUserOperation *This, BYTE byteButtonNumber);HRESULT ( *StillOff)(IDVDUserOperation *This);HRESULT ( *Pause)(IDVDUserOperation *This, BOOL bOnOff);HRESULT ( *MenuLanguageSelect)(IDVDUserOperation *This, USHORT uhLanguageCode);HRESULT ( *ChangeAudioStream)(IDVDUserOperation *This, BYTE byteStreamNumber);HRESULT ( *ChangeSubpictureStream)(IDVDUserOperation *This, BYTE streamNumber, BOOL bDisplayFlag);HRESULT ( *ChangeAngle)(IDVDUserOperation *This, BYTE byteAngleNumber);HRESULT ( *ParentalLevelSelect)(IDVDUserOperation *This, BYTE byteLevel);HRESULT ( *ParentalCountrySelect)(IDVDUserOperation *This, USHORT uhCountryCode);HRESULT ( *KaraokeAudioModePresentationChange)(IDVDUserOperation *This, USHORT uhKaraokeMode);HRESULT ( *VideoPresentationModeChange)(IDVDUserOperation *This, USHORT uhVideoMode);};
struct IDropTargetHelperVtbl {HRESULT ( *QueryInterface)(IDropTargetHelper *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDropTargetHelper *This);ULONG ( *Release)(IDropTargetHelper *This);HRESULT ( *DragEnter)(IDropTargetHelper *This, HWND hwndTarget, IDataObject *pDataObject, POINT *ppt, DWORD dwEffect);HRESULT ( *DragLeave)(IDropTargetHelper *This);HRESULT ( *DragOver)(IDropTargetHelper *This, POINT *ppt, DWORD dwEffect);HRESULT ( *Drop)(IDropTargetHelper *This, IDataObject *pDataObject, POINT *ppt, DWORD dwEffect);HRESULT ( *Show)(IDropTargetHelper *This, BOOL fShow);};
struct IPropFindResponseVtbl {HRESULT ( *QueryInterface)(IPropFindResponse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropFindResponse *This);ULONG ( *Release)(IPropFindResponse *This);BOOL ( *IsComplete)(IPropFindResponse *This);HRESULT ( *GetHref)(IPropFindResponse *This, LPSTR *ppszHref);HRESULT ( *GetProperty)(IPropFindResponse *This, DWORD dwNamespaceID, LPCSTR pszPropertyName, LPSTR *ppszPropertyValue);};
struct IAMStreamControlVtbl {HRESULT ( *QueryInterface)(IAMStreamControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamControl *This);ULONG ( *Release)(IAMStreamControl *This);HRESULT ( *StartAt)(IAMStreamControl *This,  REFERENCE_TIME *ptStart, DWORD dwCookie);HRESULT ( *StopAt)(IAMStreamControl *This,  REFERENCE_TIME *ptStop, BOOL bSendExtra, DWORD dwCookie);HRESULT ( *GetInfo)(IAMStreamControl *This, AM_STREAM_INFO *pInfo);};
struct ICommDlgBrowser2Vtbl {HRESULT ( *QueryInterface)(ICommDlgBrowser2 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICommDlgBrowser2 *This);ULONG ( *Release)(ICommDlgBrowser2 *This);HRESULT ( *OnDefaultCommand)(ICommDlgBrowser2 *This, struct IShellView *ppshv);HRESULT ( *OnStateChange)(ICommDlgBrowser2 *This, struct IShellView *ppshv, ULONG uChange);HRESULT ( *IncludeObject)(ICommDlgBrowser2 *This, struct IShellView *ppshv, LPCITEMIDLIST pidl);HRESULT ( *Notify)(ICommDlgBrowser2 *This, struct IShellView *ppshv, DWORD dwNotifyType);HRESULT ( *GetDefaultMenuText)(ICommDlgBrowser2 *This, struct IShellView *ppshv, WCHAR *pszText, INT cchMax);HRESULT ( *GetViewFlags)(ICommDlgBrowser2 *This, DWORD *pdwFlags);};
struct IDisplayServicesVtbl {HRESULT ( *QueryInterface)(IDisplayServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDisplayServices *This);ULONG ( *Release)(IDisplayServices *This);HRESULT ( *CreateDisplayPointer)(IDisplayServices *This, IDisplayPointer **ppDispPointer);HRESULT ( *TransformRect)(IDisplayServices *This, RECT *pRect, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement *pIElement);HRESULT ( *TransformPoint)(IDisplayServices *This, POINT *pPoint, COORD_SYSTEM eSource, COORD_SYSTEM eDestination, IHTMLElement *pIElement);HRESULT ( *GetCaret)(IDisplayServices *This, IHTMLCaret **ppCaret);HRESULT ( *GetComputedStyle)(IDisplayServices *This, IMarkupPointer *pPointer, IHTMLComputedStyle **ppComputedStyle);HRESULT ( *ScrollRectIntoView)(IDisplayServices *This, IHTMLElement *pIElement, RECT rect);HRESULT ( *HasFlowLayout)(IDisplayServices *This, IHTMLElement *pIElement, BOOL *pfHasFlowLayout);};
struct IDownloadSiteMgrVtbl {HRESULT ( *QueryInterface)(IDownloadSiteMgr *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDownloadSiteMgr *This);ULONG ( *Release)(IDownloadSiteMgr *This);HRESULT ( *Initialize)(IDownloadSiteMgr *This, LPCSTR pszUrl, SITEQUERYPARAMS *pqp);HRESULT ( *EnumSites)(IDownloadSiteMgr *This, DWORD dwIndex, IDownloadSite **pds);};
struct IIndexDefinitionVtbl {HRESULT ( *QueryInterface)(IIndexDefinition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIndexDefinition *This);ULONG ( *Release)(IIndexDefinition *This);HRESULT ( *CreateIndex)(IIndexDefinition *This, DBID *pTableID, DBID *pIndexID, DBORDINAL cIndexColumnDescs, DBINDEXCOLUMNDESC  *    rgIndexColumnDescs, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, DBID **ppIndexID);HRESULT ( *DropIndex)(IIndexDefinition *This, DBID *pTableID, DBID *pIndexID);};
struct IMLangStringWStrVtbl {HRESULT ( *QueryInterface)(IMLangStringWStr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringWStr *This);ULONG ( *Release)(IMLangStringWStr *This);HRESULT ( *Sync)(IMLangStringWStr *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangStringWStr *This, int *plLen);HRESULT ( *SetMLStr)(IMLangStringWStr *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);HRESULT ( *SetWStr)(IMLangStringWStr *This, int lDestPos, int lDestLen,  WCHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetStrBufW)(IMLangStringWStr *This, int lDestPos, int lDestLen, IMLangStringBufW *pSrcBuf, int *pcchActual, int *plActualLen);HRESULT ( *GetWStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, WCHAR *pszDest, int cchDest, int *pcchActual, int *plActualLen);HRESULT ( *GetStrBufW)(IMLangStringWStr *This, int lSrcPos, int lSrcMaxLen, IMLangStringBufW **ppDestBuf, int *plDestLen);HRESULT ( *LockWStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, int lFlags, int cchRequest, WCHAR **ppszDest, int *pcchDest, int *plDestLen);HRESULT ( *UnlockWStr)(IMLangStringWStr *This,  WCHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetLocale)(IMLangStringWStr *This, int lDestPos, int lDestLen, LCID locale);HRESULT ( *GetLocale)(IMLangStringWStr *This, int lSrcPos, int lSrcMaxLen, LCID *plocale, int *plLocalePos, int *plLocaleLen);};
struct IOleDocumentViewVtbl {HRESULT ( *QueryInterface)(IOleDocumentView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentView *This);ULONG ( *Release)(IOleDocumentView *This);HRESULT ( *SetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite *pIPSite);HRESULT ( *GetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite **ppIPSite);HRESULT ( *GetDocument)(IOleDocumentView *This, IUnknown **ppunk);HRESULT ( *SetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *GetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *SetRectComplex)(IOleDocumentView *This, LPRECT prcView, LPRECT prcHScroll, LPRECT prcVScroll, LPRECT prcSizeBox);HRESULT ( *Show)(IOleDocumentView *This, BOOL fShow);HRESULT ( *UIActivate)(IOleDocumentView *This, BOOL fUIActivate);HRESULT ( *Open)(IOleDocumentView *This);HRESULT ( *CloseView)(IOleDocumentView *This, DWORD dwReserved);HRESULT ( *SaveViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *ApplyViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *Clone)(IOleDocumentView *This, IOleInPlaceSite *pIPSiteNew, IOleDocumentView **ppViewNew);};
struct IPointerInactiveVtbl {HRESULT ( *QueryInterface)(IPointerInactive *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPointerInactive *This);ULONG ( *Release)(IPointerInactive *This);HRESULT ( *GetActivationPolicy)(IPointerInactive *This, DWORD *pdwPolicy);HRESULT ( *OnInactiveMouseMove)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD grfKeyState);HRESULT ( *OnInactiveSetCursor)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD dwMouseMsg, BOOL fSetAlways);};
struct ITableDefinitionVtbl {HRESULT ( *QueryInterface)(ITableDefinition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableDefinition *This);ULONG ( *Release)(ITableDefinition *This);HRESULT ( *CreateTable)(ITableDefinition *This, IUnknown *pUnkOuter, DBID *pTableID, DBORDINAL cColumnDescs, DBCOLUMNDESC  *    rgColumnDescs,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, DBID **ppTableID, IUnknown **ppRowset);HRESULT ( *DropTable)(ITableDefinition *This, DBID *pTableID);HRESULT ( *AddColumn)(ITableDefinition *This, DBID *pTableID, DBCOLUMNDESC *pColumnDesc, DBID **ppColumnID);HRESULT ( *DropColumn)(ITableDefinition *This, DBID *pTableID, DBID *pColumnID);};
struct _HTTP_FILTER_CONTEXT {DWORD cbSize;DWORD Revision;PVOID ServerContext;DWORD ulReserved;BOOL fIsSecurePort;PVOID pFilterContext;BOOL ( *GetServerVariable)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszVariableName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *AddResponseHeaders)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszHeaders, DWORD dwReserved);BOOL ( *WriteClient)(struct _HTTP_FILTER_CONTEXT *pfc, LPVOID Buffer, LPDWORD lpdwBytes, DWORD dwReserved);void *( *AllocMem)(struct _HTTP_FILTER_CONTEXT *pfc, DWORD cbSize, DWORD dwReserved);BOOL ( *ServerSupportFunction)(struct _HTTP_FILTER_CONTEXT *pfc, enum SF_REQ_TYPE sfReq, PVOID pData, DWORD ul1, DWORD ul2);};
struct IAMStreamSelectVtbl {HRESULT ( *QueryInterface)(IAMStreamSelect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamSelect *This);ULONG ( *Release)(IAMStreamSelect *This);HRESULT ( *Count)(IAMStreamSelect *This, DWORD *pcStreams);HRESULT ( *Info)(IAMStreamSelect *This, int lIndex, AM_MEDIA_TYPE **ppmt, DWORD *pdwFlags, LCID *plcid, DWORD *pdwGroup, WCHAR **ppszName, IUnknown **ppObject, IUnknown **ppUnk);HRESULT ( *Enable)(IAMStreamSelect *This, int lIndex, DWORD dwFlags);};
struct IPersistMonikerVtbl {HRESULT ( *QueryInterface)(IPersistMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMoniker *This);ULONG ( *Release)(IPersistMoniker *This);HRESULT ( *GetClassID)(IPersistMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMoniker *This);HRESULT ( *Load)(IPersistMoniker *This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);HRESULT ( *Save)(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc);HRESULT ( *GetCurMoniker)(IPersistMoniker *This, IMoniker **ppimkName);};
struct _DOT11_SCAN_REQUEST {DOT11_BSS_TYPE dot11BSSType;DOT11_MAC_ADDRESS dot11BSSID;DOT11_SSID dot11SSID;DOT11_SCAN_TYPE dot11ScanType;BOOL bRestrictedScan;BOOL bUseRequestIE;ULONG uRequestIDsOffset;ULONG uNumOfRequestIDs;ULONG uPhyTypesOffset;ULONG uNumOfPhyTypes;ULONG uIEsOffset;ULONG uIEsLength;UCHAR ucBuffer[1];};
struct IDXARGBReadPtrVtbl {HRESULT ( *QueryInterface)(IDXARGBReadPtr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXARGBReadPtr *This);ULONG ( *Release)(IDXARGBReadPtr *This);HRESULT ( *GetSurface)(IDXARGBReadPtr *This,  IID * riid, void **ppSurface);DXSAMPLEFORMATENUM ( *GetNativeType)(IDXARGBReadPtr *This, DXNATIVETYPEINFO *pInfo);void ( *Move)(IDXARGBReadPtr *This, int cSamples);void ( *MoveToRow)(IDXARGBReadPtr *This, ULONG y);void ( *MoveToXY)(IDXARGBReadPtr *This, ULONG x, ULONG y);ULONG ( *MoveAndGetRunInfo)(IDXARGBReadPtr *This, ULONG Row,  DXRUNINFO **ppInfo);DXSAMPLE *( *Unpack)(IDXARGBReadPtr *This, DXSAMPLE *pSamples, ULONG cSamples, BOOL bMove);DXPMSAMPLE *( *UnpackPremult)(IDXARGBReadPtr *This, DXPMSAMPLE *pSamples, ULONG cSamples, BOOL bMove);void ( *UnpackRect)(IDXARGBReadPtr *This,  DXPACKEDRECTDESC *pRectDesc);};
struct IDockingWindowVtbl {HRESULT ( *QueryInterface)(IDockingWindow *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDockingWindow *This);ULONG ( *Release)(IDockingWindow *This);HRESULT ( *GetWindow)(IDockingWindow *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindow *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDockingWindow *This, BOOL fShow);HRESULT ( *CloseDW)(IDockingWindow *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDockingWindow *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);};
struct IRowsetResynchVtbl {HRESULT ( *QueryInterface)(IRowsetResynch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetResynch *This);ULONG ( *Release)(IRowsetResynch *This);HRESULT ( *GetVisibleData)(IRowsetResynch *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *ResynchRows)(IRowsetResynch *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBCOUNTITEM *pcRowsResynched, HROW **prghRowsResynched, DBROWSTATUS **prgRowStatus);};
struct IUserIdentity2Vtbl {HRESULT ( *QueryInterface)(IUserIdentity2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserIdentity2 *This);ULONG ( *Release)(IUserIdentity2 *This);HRESULT ( *GetCookie)(IUserIdentity2 *This, GUID *puidCookie);HRESULT ( *GetName)(IUserIdentity2 *This, WCHAR *pszName, ULONG ulBuffSize);HRESULT ( *OpenIdentityRegKey)(IUserIdentity2 *This, DWORD dwDesiredAccess, HKEY *phKey);HRESULT ( *GetIdentityFolder)(IUserIdentity2 *This, DWORD dwFlags, WCHAR *pszPath, ULONG ulBuffSize);HRESULT ( *GetOrdinal)(IUserIdentity2 *This, DWORD *dwOrdinal);HRESULT ( *SetName)(IUserIdentity2 *This, WCHAR *pszName);HRESULT ( *ChangePassword)(IUserIdentity2 *This, WCHAR *szOldPass, WCHAR *szNewPass);};
struct _MIDL_STUB_MESSAGE {PRPC_MESSAGE RpcMsg;unsigned char *Buffer;unsigned char *BufferStart;unsigned char *BufferEnd;unsigned char *BufferMark;unsigned int BufferLength;unsigned int MemorySize;unsigned char *Memory;int IsClient;int ReuseBuffer;unsigned char *AllocAllNodesMemory;unsigned char *AllocAllNodesMemoryEnd;int IgnoreEmbeddedPointers;unsigned char *PointerBufferMark;unsigned char fBufferValid;unsigned char uFlags;unsigned int MaxCount;unsigned int Offset;unsigned int ActualCount;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);unsigned char *StackTop;unsigned char *pPresentedType;unsigned char *pTransmitType;handle_t SavedHandle; struct _MIDL_STUB_DESC *StubDesc;struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;unsigned int FullPtrRefId;int fCheckBounds;int fInDontFree : 1;int fDontCallFreeInst : 1;int fInOnlyParam : 1;int fHasReturn : 1;unsigned int dwDestContext;void *pvDestContext;NDR_SCONTEXT *SavedContextHandles;int ParamNumber;struct IRpcChannelBuffer *pRpcChannelBuffer;PARRAY_INFO pArrayInfo;unsigned int *SizePtrCountArray;unsigned int *SizePtrOffsetArray;unsigned int *SizePtrLengthArray;void *pArgQueue;unsigned int dwStubPhase;PNDR_PIPE_DESC pPipeDesc;PNDR_ASYNC_MESSAGE pAsyncMsg;unsigned int Reserved[3];};
struct IAdviseSinkExVtbl {HRESULT ( *QueryInterface)(IAdviseSinkEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSinkEx *This);ULONG ( *Release)(IAdviseSinkEx *This);void ( *OnDataChange)(IAdviseSinkEx *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSinkEx *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSinkEx *This, IMoniker *pmk);void ( *OnSave)(IAdviseSinkEx *This);void ( *OnClose)(IAdviseSinkEx *This);void ( *OnViewStatusChange)(IAdviseSinkEx *This, DWORD dwViewStatus);};
struct IErrorRecordsVtbl {HRESULT ( *QueryInterface)(IErrorRecords *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorRecords *This);ULONG ( *Release)(IErrorRecords *This);HRESULT ( *AddErrorRecord)(IErrorRecords *This, ERRORINFO *pErrorInfo, DWORD dwLookupID, DISPPARAMS *pdispparams, IUnknown *punkCustomError, DWORD dwDynamicErrorID);HRESULT ( *GetBasicErrorInfo)(IErrorRecords *This, ULONG ulRecordNum, ERRORINFO *pErrorInfo);HRESULT ( *GetCustomErrorObject)(IErrorRecords *This, ULONG ulRecordNum,  IID * riid, IUnknown **ppObject);HRESULT ( *GetErrorInfo)(IErrorRecords *This, ULONG ulRecordNum, LCID lcid, IErrorInfo **ppErrorInfo);HRESULT ( *GetErrorParameters)(IErrorRecords *This, ULONG ulRecordNum, DISPPARAMS *pdispparams);HRESULT ( *GetRecordCount)(IErrorRecords *This, ULONG *pcRecords);};
struct IExtractIconAVtbl {HRESULT ( *QueryInterface)(IExtractIconA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractIconA *This);ULONG ( *Release)(IExtractIconA *This);HRESULT ( *GetIconLocation)(IExtractIconA *This, UINT uFlags, LPSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconA *This, LPCSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct IStreamSampleVtbl {HRESULT ( *QueryInterface)(IStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStreamSample *This);ULONG ( *Release)(IStreamSample *This);HRESULT ( *GetMediaStream)(IStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);};
struct IUserIdentityVtbl {HRESULT ( *QueryInterface)(IUserIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUserIdentity *This);ULONG ( *Release)(IUserIdentity *This);HRESULT ( *GetCookie)(IUserIdentity *This, GUID *puidCookie);HRESULT ( *GetName)(IUserIdentity *This, WCHAR *pszName, ULONG ulBuffSize);HRESULT ( *OpenIdentityRegKey)(IUserIdentity *This, DWORD dwDesiredAccess, HKEY *phKey);HRESULT ( *GetIdentityFolder)(IUserIdentity *This, DWORD dwFlags, WCHAR *pszPath, ULONG ulBuffSize);};
struct IAdviseSink2Vtbl {HRESULT ( *QueryInterface)(IAdviseSink2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink2 *This);ULONG ( *Release)(IAdviseSink2 *This);void ( *OnDataChange)(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink2 *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink2 *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink2 *This);void ( *OnClose)(IAdviseSink2 *This);void ( *OnLinkSrcChange)(IAdviseSink2 *This, IMoniker *pmk);};
struct IDXGradient2Vtbl {HRESULT ( *QueryInterface)(IDXGradient2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXGradient2 *This);ULONG ( *Release)(IDXGradient2 *This);HRESULT ( *SetOutputSize)(IDXGradient2 *This,  SIZE OutSize, BOOL bMaintainAspect);HRESULT ( *SetGradient)(IDXGradient2 *This, DXSAMPLE StartColor, DXSAMPLE EndColor, BOOL bHorizontal);HRESULT ( *GetOutputSize)(IDXGradient2 *This, SIZE *pOutSize);HRESULT ( *SetRadialGradient)(IDXGradient2 *This, double *rgdblOffsets, double *rgdblColors, ULONG ulCount, double dblOpacity, DX2DXFORM *pXform, DWORD dwFlags);HRESULT ( *SetLinearGradient)(IDXGradient2 *This, double *rgdblOffsets, double *rgdblColors, ULONG ulCount, double dblOpacity, DX2DXFORM *pXform, DWORD dwFlags);};
struct IFileViewerAVtbl {HRESULT ( *QueryInterface)(IFileViewerA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerA *This);ULONG ( *Release)(IFileViewerA *This);HRESULT ( *ShowInitialize)(IFileViewerA *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerA *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerA *This, LPSTR pszDriver, BOOL fSuppressUI);};
struct IInputMethodVtbl {HRESULT ( *QueryInterface)(IInputMethod *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInputMethod *This);ULONG ( *Release)(IInputMethod *This);HRESULT ( *Select)(IInputMethod *This, HWND hwndSip);HRESULT ( *Deselect)(IInputMethod *This);HRESULT ( *Showing)(IInputMethod *This);HRESULT ( *Hiding)(IInputMethod *This);HRESULT ( *GetInfo)(IInputMethod *This, IMINFO *pimi);HRESULT ( *ReceiveSipInfo)(IInputMethod *This, SIPINFO *psi);HRESULT ( *RegisterCallback)(IInputMethod *This, IIMCallback *lpIMCallback);HRESULT ( *GetImData)(IInputMethod *This, DWORD dwSize, void *pvImData);HRESULT ( *SetImData)(IInputMethod *This, DWORD dwSize, void *pvImData);HRESULT ( *UserOptionsDlg)(IInputMethod *This, HWND hwndParent);};
struct IMediaFilterVtbl {HRESULT ( *QueryInterface)(IMediaFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaFilter *This);ULONG ( *Release)(IMediaFilter *This);HRESULT ( *GetClassID)(IMediaFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IMediaFilter *This);HRESULT ( *Pause)(IMediaFilter *This);HRESULT ( *Run)(IMediaFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IMediaFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IMediaFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IMediaFilter *This, IReferenceClock **pClock);};
struct IWordBreakerVtbl {HRESULT ( *QueryInterface)(IWordBreaker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWordBreaker *This);ULONG ( *Release)(IWordBreaker *This);SCODE ( *Init)(IWordBreaker *This, BOOL fQuery, ULONG ulMaxTokenSize, BOOL *pfLicense);SCODE ( *BreakText)(IWordBreaker *This, TEXT_SOURCE *pTextSource, IWordSink *pWordSink, IPhraseSink *pPhraseSink);SCODE ( *ComposePhrase)(IWordBreaker *This,  WCHAR *pwcNoun, ULONG cwcNoun,  WCHAR *pwcModifier, ULONG cwcModifier, ULONG ulAttachmentType, WCHAR *pwcPhrase, ULONG *pcwcPhrase);SCODE ( *GetLicenseToUse)(IWordBreaker *This,  WCHAR **ppwcsLicense);};
typedef USB_TRANSFER (*LPGET_DESCRIPTOR)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, UCHAR, WORD, WORD, LPVOID);
struct _IP_ADAPTER_INFO {struct _IP_ADAPTER_INFO *Next;DWORD ComboIndex;char AdapterName[260];char Description[132];UINT AddressLength;BYTE Address[8];DWORD Index;UINT Type;UINT DhcpEnabled;PIP_ADDR_STRING CurrentIpAddress;IP_ADDR_STRING IpAddressList;IP_ADDR_STRING GatewayList;IP_ADDR_STRING DhcpServer;BOOL HaveWins;IP_ADDR_STRING PrimaryWinsServer;IP_ADDR_STRING SecondaryWinsServer;time_t LeaseObtained;time_t LeaseExpires;};
struct tagCREATESTRUCTA {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;};
struct IAdviseSinkVtbl {HRESULT ( *QueryInterface)(IAdviseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink *This);ULONG ( *Release)(IAdviseSink *This);void ( *OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink *This);void ( *OnClose)(IAdviseSink *This);};
struct IAlterTableVtbl {HRESULT ( *QueryInterface)(IAlterTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAlterTable *This);ULONG ( *Release)(IAlterTable *This);HRESULT ( *AlterColumn)(IAlterTable *This, DBID *pTableId, DBID *pColumnId, DBCOLUMNDESCFLAGS ColumnDescFlags, DBCOLUMNDESC *pColumnDesc);HRESULT ( *AlterTable)(IAlterTable *This, DBID *pTableId, DBID *pNewTableId, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);};
struct IDataObjectVtbl {HRESULT ( *QueryInterface)(IDataObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataObject *This);ULONG ( *Release)(IDataObject *This);HRESULT ( *GetData)(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);HRESULT ( *GetDataHere)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);HRESULT ( *QueryGetData)(IDataObject *This, FORMATETC *pformatetc);HRESULT ( *GetCanonicalFormatEtc)(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);HRESULT ( *SetData)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *EnumFormatEtc)(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);HRESULT ( *DAdvise)(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *DUnadvise)(IDataObject *This, DWORD dwConnection);HRESULT ( *EnumDAdvise)(IDataObject *This, IEnumSTATDATA **ppenumAdvise);};
struct IHTMLEditorVtbl {HRESULT ( *QueryInterface)(IHTMLEditor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditor *This);ULONG ( *Release)(IHTMLEditor *This);HRESULT ( *PreHandleEvent)(IHTMLEditor *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *PostHandleEvent)(IHTMLEditor *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *TranslateAcceleratorA)(IHTMLEditor *This, DISPID inEvtDispId, IHTMLEventObj *pIEventObj);HRESULT ( *Initialize)(IHTMLEditor *This, IUnknown *pIDocument, IUnknown *pIContainer);HRESULT ( *Notify)(IHTMLEditor *This, EDITOR_NOTIFICATION eSelectionNotification, IUnknown *pUnknown, DWORD dword);HRESULT ( *GetCommandTarget)(IHTMLEditor *This, IUnknown *pContext, IUnknown **ppUnkTarget);HRESULT ( *GetElementToTabFrom)(IHTMLEditor *This, BOOL fForward, IHTMLElement **ppElement, BOOL *pfFindNext);HRESULT ( *IsEditContextUIActive)(IHTMLEditor *This);HRESULT ( *TerminateIMEComposition)(IHTMLEditor *This);HRESULT ( *EnableModeless)(IHTMLEditor *This, BOOL fEnable);};
struct IOleControlVtbl {HRESULT ( *QueryInterface)(IOleControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControl *This);ULONG ( *Release)(IOleControl *This);HRESULT ( *GetControlInfo)(IOleControl *This, CONTROLINFO *pCI);HRESULT ( *OnMnemonic)(IOleControl *This, MSG *pMsg);HRESULT ( *OnAmbientPropertyChange)(IOleControl *This, DISPID dispID);HRESULT ( *FreezeEvents)(IOleControl *This, BOOL bFreeze);};
struct IViewFilterVtbl {HRESULT ( *QueryInterface)(IViewFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewFilter *This);ULONG ( *Release)(IViewFilter *This);HRESULT ( *GetFilter)(IViewFilter *This, HACCESSOR hAccessor, DBCOUNTITEM *pcRows,DBCOMPAREOP * *    pCompareOps, void *pCriteriaData);HRESULT ( *GetFilterBindings)(IViewFilter *This, DBCOUNTITEM *pcBindings, DBBINDING **prgBindings);HRESULT ( *SetFilter)(IViewFilter *This, HACCESSOR hAccessor, DBCOUNTITEM cRows,DBCOMPAREOP  *    CompareOps, void *pCriteriaData);};
typedef USB_TRANSFER (*LPCLEAR_FEATURE)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, WORD, UCHAR);
typedef USB_TRANSFER (*LPGET_INTERFACE)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, PUCHAR);
struct ICopyHookAVtbl {HRESULT ( *QueryInterface)(ICopyHookA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICopyHookA *This);ULONG ( *Release)(ICopyHookA *This);UINT ( *CopyCallback)(ICopyHookA *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCSTR pszSrcFile, DWORD dwSrcAttribs, LPCSTR pszDestFile, DWORD dwDestAttribs);};
struct IHashTableVtbl {HRESULT ( *QueryInterface)(IHashTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHashTable *This);ULONG ( *Release)(IHashTable *This);HRESULT ( *Init)(IHashTable *This, DWORD dwSize, BOOL fDupeKeys);HRESULT ( *Insert)(IHashTable *This, LPSTR psz, LPVOID pv, DWORD dwFlags);HRESULT ( *Replace)(IHashTable *This, LPSTR psz, LPVOID pv);HRESULT ( *Find)(IHashTable *This, LPSTR psz, BOOL fRemove, LPVOID *ppv);HRESULT ( *Reset)(IHashTable *This);HRESULT ( *Next)(IHashTable *This, ULONG cFetch, LPVOID **prgpv, ULONG *pcFetched);};
struct ISdpSearchVtbl {HRESULT ( *QueryInterface)(ISdpSearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISdpSearch *This);ULONG ( *Release)(ISdpSearch *This);HRESULT ( *Begin)(ISdpSearch *This, ULONGLONG *pAddrss, ULONG fConnect);HRESULT ( *End)(ISdpSearch *This);HRESULT ( *ServiceSearch)(ISdpSearch *This, SdpQueryUuid *pUuidList, ULONG listSize, ULONG *pHandles, USHORT *pNumHandles);HRESULT ( *AttributeSearch)(ISdpSearch *This, ULONG handle, SdpAttributeRange *pRangeList, ULONG numRanges, ISdpRecord **ppSdpRecord);HRESULT ( *ServiceAndAttributeSearch)(ISdpSearch *This, SdpQueryUuid *pUuidList, ULONG listSize, SdpAttributeRange *pRangeList, ULONG numRanges, ISdpRecord ***pppSdpRecord, ULONG *pNumRecords);};
struct _DDSURFACEDESC {DWORD dwSize;DWORD dwFlags;DWORD dwHeight;DWORD dwWidth;_DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B __anonymous0;DWORD dwBackBufferCount;_DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B __anonymous2;DWORD dwAlphaBitDepth;DWORD dwReserved;LPVOID lpSurface;DDCOLORKEY ddckCKDestOverlay;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;DDPIXELFORMAT ddpfPixelFormat;DDSCAPS ddsCaps;};
struct _PPP_EAP_INPUT {DWORD dwSizeInBytes;DWORD fFlags;BOOL fAuthenticator;WCHAR *pwszIdentity;WCHAR *pwszPassword;BYTE bInitialId;RAS_AUTH_ATTRIBUTE *pUserAttributes;BOOL fAuthenticationComplete;DWORD dwAuthResultCode;HANDLE hTokenImpersonateUser;BOOL fSuccessPacketReceived;BOOL fDataReceivedFromInteractiveUI;PBYTE pDataFromInteractiveUI;DWORD dwSizeOfDataFromInteractiveUI;PBYTE pConnectionData;DWORD dwSizeOfConnectionData;PBYTE pUserData;DWORD dwSizeOfUserData;HANDLE hReserved;};
struct _avitimedindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved_3;AVITIMEDINDEX_ENTRY aIndex[1362];DWORD adwTrailingFill[2734];};
struct IOleCacheVtbl {HRESULT ( *QueryInterface)(IOleCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache *This);ULONG ( *Release)(IOleCache *This);HRESULT ( *Cache)(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);};
typedef USB_TRANSFER (*LPSET_FEATURE)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, WORD, UCHAR);
struct _WSAQuerySetA {DWORD dwSize;LPSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct ICifFileVtbl {HRESULT ( *QueryInterface)(ICifComponent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICifComponent *This);ULONG ( *Release)(ICifComponent *This);HRESULT ( *EnumComponents)(ICifComponent *This, IEnumCifComponents **, DWORD dwFilter, LPVOID pv);HRESULT ( *FindComponent)(ICifComponent *This, LPCSTR pszID, ICifComponent **p);HRESULT ( *EnumGroups)(ICifComponent *This, IEnumCifGroups **, DWORD dwFilter, LPVOID pv);HRESULT ( *FindGroup)(ICifComponent *This, LPCSTR pszID, ICifGroup **p);HRESULT ( *EnumModes)(ICifComponent *This, IEnumCifModes **, DWORD dwFilter, LPVOID pv);HRESULT ( *FindMode)(ICifComponent *This, LPCSTR pszID, ICifMode **p);HRESULT ( *GetDescription)(ICifComponent *This, LPSTR pszDesc, DWORD dwSize);HRESULT ( *GetDetDlls)(ICifComponent *This, LPSTR pszDlls, DWORD dwSize);};
typedef USB_TRANSFER (*LPGET_STATUS)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, LPWORD);
typedef USB_TRANSFER (*LPSYNC_FRAME)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, LPWORD);
struct _FILE_OBJECT {PDEVICE_OBJECT DeviceObject;PVOID FsContext;PVOID FsContext2;NTSTATUS FinalStatus;struct _FILE_OBJECT *RelatedFileObject;BOOLEAN ReadAccess;BOOLEAN WriteAccess;BOOLEAN SharedRead;BOOLEAN SharedWrite;ULONG Flags;HANDLE hCloseEvent;LARGE_INTEGER CurrentByteOffset;ULONG Busy;ULONG Lock;HANDLE Event;HANDLE hevtSynchronous;};
struct _avistdindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved_3;AVISTDINDEX_ENTRY aIndex[2044];};
struct tagWNDCLASSA {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;};
struct IStreamVtbl {HRESULT ( *QueryInterface)(IStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStream *This);ULONG ( *Release)(IStream *This);HRESULT ( *Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(IStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *SetSize)(IStream *This, ULARGE_INTEGER libNewSize);HRESULT ( *CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT ( *Commit)(IStream *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStream *This);HRESULT ( *LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT ( *Clone)(IStream *This, IStream **ppstm);};
struct IQueryVtbl {HRESULT ( *QueryInterface)(IQuery *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQuery *This);ULONG ( *Release)(IQuery *This);HRESULT ( *FindErrorNodes)(IQuery *This,  DBCOMMANDTREE *pRoot, ULONG *pcErrorNodes, DBCOMMANDTREE ***prgErrorNodes);HRESULT ( *FreeCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot);HRESULT ( *GetCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot);HRESULT ( *SetCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot, DBCOMMANDREUSE dwCommandReuse, BOOL fCopy);HRESULT ( *AddPostProcessing)(IQuery *This, DBCOMMANDTREE **ppRoot, BOOL fCopy);HRESULT ( *GetCardinalityEstimate)(IQuery *This, DBORDINAL *pulCardinality);};
typedef INT ( *LPNSPIOCTL)(HANDLE hLookup, DWORD dwControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSACOMPLETION lpCompletion, LPWSATHREADID lpThreadId);
struct _DDBLTFX {DWORD dwSize;DWORD dwDDFX;DWORD dwROP;DWORD dwDDROP;DWORD dwRotationAngle;DWORD dwZBufferOpCode;DWORD dwZBufferLow;DWORD dwZBufferHigh;DWORD dwZBufferBaseDest;DWORD dwZDestConstBitDepth;_DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 __anonymous0;DWORD dwZSrcConstBitDepth;_DDBLTFX___702C52B3655764E63C007A6B73D01C19 __anonymous1;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous2;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous4;_DDBLTFX___4C109671A06E28B8127C40041AB5795C __anonymous6;DDCOLORKEY ddckDestColorkey;DDCOLORKEY ddckSrcColorkey;};
union tagNNTPRESPONSE___972C5209C9C79C2B3E2837DC92DFE3AF {NNTPGROUP rGroup;NNTPNEXT rLast;NNTPNEXT rNext;NNTPNEXT rStat;NNTPARTICLE rArticle;NNTPARTICLE rHead;NNTPARTICLE rBody;NNTPLIST rList;NNTPLISTGROUP rListGroup;NNTPLIST rNewgroups;SYSTEMTIME rDate;NNTPHEADERRESP rHeaders;NNTPXHDRRESP rXhdr;};
struct _A5A2C297D512B29747AD9A814A819610 {_C6832D807A2747A4D0CBF13E34E0B28B __anonymous0;WORD wFillAttribute;WORD wPopupFillAttribute;COORD dwScreenBufferSize;COORD dwWindowSize;COORD dwWindowOrigin;DWORD nFont;DWORD nInputBufferSize;COORD dwFontSize;UINT uFontFamily;UINT uFontWeight;WCHAR FaceName[32];UINT uCursorSize;BOOL bFullScreen;BOOL bQuickEdit;BOOL bInsertMode;BOOL bAutoPosition;UINT uHistoryBufferSize;UINT uNumberOfHistoryBuffers;BOOL bHistoryNoDup;COLORREF ColorTable[16];};
struct IDirectDrawStreamSampleVtbl {HRESULT ( *QueryInterface)(IDirectDrawStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawStreamSample *This);ULONG ( *Release)(IDirectDrawStreamSample *This);HRESULT ( *GetMediaStream)(IDirectDrawStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IDirectDrawStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IDirectDrawStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IDirectDrawStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IDirectDrawStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *GetSurface)(IDirectDrawStreamSample *This, IDirectDrawSurface **ppDirectDrawSurface, RECT *pRect);HRESULT ( *SetRect)(IDirectDrawStreamSample *This,  RECT *pRect);};
struct IElementBehaviorRenderVtbl {HRESULT ( *QueryInterface)(IElementBehaviorRender *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorRender *This);ULONG ( *Release)(IElementBehaviorRender *This);HRESULT ( *Draw)(IElementBehaviorRender *This, HDC hdc, LONG lLayer, RECT *pRect, IUnknown *pReserved);HRESULT ( *GetRenderInfo)(IElementBehaviorRender *This, LONG *plRenderInfo);HRESULT ( *HitTestPoint)(IElementBehaviorRender *This, POINT *pPoint, IUnknown *pReserved, BOOL *pbHit);};
struct _DOT11_DEFAULT_WEP_OFFLOAD {ULONG uReserved;HANDLE hOffloadContext;HANDLE hOffload;DWORD dwIndex;DOT11_OFFLOAD_TYPE dot11OffloadType;DWORD dwAlgorithm;ULONG uFlags;DOT11_KEY_DIRECTION dot11KeyDirection;UCHAR ucMacAddress[6];ULONG uNumOfRWsOnMe;DOT11_IV48_COUNTER dot11IV48Counters[16];USHORT usDot11RWBitMaps[16];USHORT usKeyLength;UCHAR ucKey[1];};
struct _RNDIS_PDD_CHARACTERISTICS {PFN_PDD_SEND_RNDIS_MESSAGE SendRndisMessageHandler;PFN_PDD_SEND_RNDIS_PACKET SendRndisPacketHandler;PFN_PDD_INDICATE_RNDIS_PACKET_COMPLETE IndicateRndisPacketCompleteHandler;PFN_PDD_SET SetHandler;PFN_PDD_GET GetHandler;PFN_PDD_ISR ISRHandler;DWORD dwIRQ;DWORD dwMaxRx;DWORD dwBaseAddr;BOOL bPCIDevice;BOOL CheckPort;BOOL PortIsIO;BOOL UseMaskReg;DWORD PortAddr;DWORD PortSize;DWORD Mask;DWORD MaskAddr;};
struct IMLangConvertCharsetVtbl {HRESULT ( *QueryInterface)(IMLangConvertCharset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangConvertCharset *This);ULONG ( *Release)(IMLangConvertCharset *This);HRESULT ( *Initialize)(IMLangConvertCharset *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty);HRESULT ( *GetSourceCodePage)(IMLangConvertCharset *This, UINT *puiSrcCodePage);HRESULT ( *GetDestinationCodePage)(IMLangConvertCharset *This, UINT *puiDstCodePage);HRESULT ( *GetProperty)(IMLangConvertCharset *This, DWORD *pdwProperty);HRESULT ( *DoConversion)(IMLangConvertCharset *This, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *DoConversionToUnicode)(IMLangConvertCharset *This, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *DoConversionFromUnicode)(IMLangConvertCharset *This, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);};
typedef NTSTATUS (*PGET_SCATTER_GATHER_LIST)(PDMA_ADAPTER DmaAdapter, PDEVICE_OBJECT DeviceObject, PMDL Mdl, PVOID CurrentVa, ULONG Length, PDRIVER_LIST_CONTROL ExecutionRoutine, PVOID Context, BOOLEAN WriteToDevice);
struct _EXTENSION_CONTROL_BLOCK {DWORD cbSize;DWORD dwVersion;HCONN ConnID;DWORD dwHttpStatusCode;CHAR lpszLogData[80];LPSTR lpszMethod;LPSTR lpszQueryString;LPSTR lpszPathInfo;LPSTR lpszPathTranslated;DWORD cbTotalBytes;DWORD cbAvailable;LPBYTE lpbData;LPSTR lpszContentType;BOOL ( *GetServerVariable)(HCONN hConn, LPSTR lpszVariableName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *WriteClient)(HCONN ConnID, LPVOID Buffer, LPDWORD lpdwBytes, DWORD dwReserved);BOOL ( *ReadClient)(HCONN ConnID, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *ServerSupportFunction)(HCONN hConn, DWORD dwHSERequest, LPVOID lpvBuffer, LPDWORD lpdwSize, LPDWORD lpdwDataType);};
struct IDirect3DSwapChain8Vtbl {HRESULT ( *QueryInterface)(IDirect3DSwapChain8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DSwapChain8 *This);ULONG ( *Release)(IDirect3DSwapChain8 *This);HRESULT ( *Present)(IDirect3DSwapChain8 *This,  RECT *pSourceRect,  RECT *pDestRect, HWND hDestWindowOverride,  RGNDATA *pDirtyRegion);HRESULT ( *GetBackBuffer)(IDirect3DSwapChain8 *This, UINT BackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface8 **ppBackBuffer);};
struct IHTMLViewFilterSiteVtbl {HRESULT ( *QueryInterface)(IHTMLViewFilterSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLViewFilterSite *This);ULONG ( *Release)(IHTMLViewFilterSite *This);HRESULT ( *GetDC)(IHTMLViewFilterSite *This, LPCRECT prc, DWORD dwFlags, HDC *phdc);HRESULT ( *ReleaseDC)(IHTMLViewFilterSite *This, HDC hdc);HRESULT ( *InvalidateRect)(IHTMLViewFilterSite *This, LPCRECT prc, BOOL fErase);HRESULT ( *InvalidateRgn)(IHTMLViewFilterSite *This, HRGN hrgn, BOOL fErase);HRESULT ( *OnStatusBitsChange)(IHTMLViewFilterSite *This, DWORD dwFlags);};
struct IMimePropertySchemaVtbl {HRESULT ( *QueryInterface)(IMimePropertySchema *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimePropertySchema *This);ULONG ( *Release)(IMimePropertySchema *This);HRESULT ( *RegisterProperty)(IMimePropertySchema *This, LPCSTR pszName, DWORD dwFlags, DWORD dwRowNumber, VARTYPE vtDefault, LPDWORD pdwPropId);HRESULT ( *ModifyProperty)(IMimePropertySchema *This, LPCSTR pszName, DWORD dwFlags, DWORD dwRowNumber, VARTYPE vtDefault);HRESULT ( *GetPropertyId)(IMimePropertySchema *This, LPCSTR pszName, LPDWORD pdwPropId);HRESULT ( *GetPropertyName)(IMimePropertySchema *This, DWORD dwPropId, LPSTR *ppszName);HRESULT ( *RegisterAddressType)(IMimePropertySchema *This, LPCSTR pszName, LPDWORD pdwAdrType);};
struct IDirectDrawPaletteVtbl {HRESULT ( *QueryInterface)(IDirectDrawPalette *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawPalette *This);ULONG ( *Release)(IDirectDrawPalette *This);HRESULT ( *GetCaps)(IDirectDrawPalette *This, LPDWORD);HRESULT ( *GetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);HRESULT ( *Initialize)(IDirectDrawPalette *This, LPDIRECTDRAW, DWORD, LPPALETTEENTRY);HRESULT ( *SetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);};
struct IInternetTransportVtbl {HRESULT ( *QueryInterface)(IInternetTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetTransport *This);ULONG ( *Release)(IInternetTransport *This);HRESULT ( *GetServerInfo)(IInternetTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IInternetTransport *This);HRESULT ( *IsState)(IInternetTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IInternetTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IInternetTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IInternetTransport *This);HRESULT ( *Disconnect)(IInternetTransport *This);HRESULT ( *DropConnection)(IInternetTransport *This);HRESULT ( *GetStatus)(IInternetTransport *This, IXPSTATUS *pCurrentStatus);};
struct IDirect3DSurface8Vtbl {HRESULT ( *QueryInterface)(IDirect3DSurface8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DSurface8 *This);ULONG ( *Release)(IDirect3DSurface8 *This);HRESULT ( *GetDevice)(IDirect3DSurface8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DSurface8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DSurface8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DSurface8 *This,  GUID * refguid);HRESULT ( *GetContainer)(IDirect3DSurface8 *This,  IID * riid, void **ppContainer);HRESULT ( *GetDesc)(IDirect3DSurface8 *This, D3DSURFACE_DESC *pDesc);HRESULT ( *LockRect)(IDirect3DSurface8 *This, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DSurface8 *This);};
struct IOleCommandTargetVtbl {HRESULT ( *QueryInterface)(IOleCommandTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCommandTarget *This);ULONG ( *Release)(IOleCommandTarget *This);HRESULT ( *QueryStatus)(IOleCommandTarget *This,  GUID *pguidCmdGroup, ULONG cCmds,OLECMD  *    prgCmds, OLECMDTEXT *pCmdText);HRESULT ( *Exec)(IOleCommandTarget *This,  GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);};
struct IUrlHistoryNotifyVtbl {HRESULT ( *QueryInterface)(IUrlHistoryNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryNotify *This);ULONG ( *Release)(IUrlHistoryNotify *This);HRESULT ( *QueryStatus)(IUrlHistoryNotify *This,  GUID *pguidCmdGroup, ULONG cCmds,OLECMD  *    prgCmds, OLECMDTEXT *pCmdText);HRESULT ( *Exec)(IUrlHistoryNotify *This,  GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);};
struct _OFFLOAD_IPSEC_ADD_SA {IPAddr SrcAddr;IPMask SrcMask;IPAddr DestAddr;IPMask DestMask;ULONG Protocol;USHORT SrcPort;USHORT DestPort;IPAddr SrcTunnelAddr;IPAddr DestTunnelAddr;USHORT Flags;SHORT NumSAs;OFFLOAD_SECURITY_ASSOCIATION SecAssoc[3];HANDLE OffloadHandle;ULONG KeyLen;UCHAR KeyMat[1];};
struct IDirect3DVolume8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVolume8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVolume8 *This);ULONG ( *Release)(IDirect3DVolume8 *This);HRESULT ( *GetDevice)(IDirect3DVolume8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVolume8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVolume8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVolume8 *This,  GUID * refguid);HRESULT ( *GetContainer)(IDirect3DVolume8 *This,  IID * riid, void **ppContainer);HRESULT ( *GetDesc)(IDirect3DVolume8 *This, D3DVOLUME_DESC *pDesc);HRESULT ( *LockBox)(IDirect3DVolume8 *This, D3DLOCKED_BOX *pLockedVolume,  D3DBOX *pBox, DWORD Flags);HRESULT ( *UnlockBox)(IDirect3DVolume8 *This);};
struct IDirectDrawVideoVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideo *This);ULONG ( *Release)(IDirectDrawVideo *This);HRESULT ( *GetSwitches)(IDirectDrawVideo *This, DWORD *pSwitches);HRESULT ( *SetSwitches)(IDirectDrawVideo *This, DWORD Switches);HRESULT ( *GetCaps)(IDirectDrawVideo *This, DDCAPS *pCaps);HRESULT ( *GetEmulatedCaps)(IDirectDrawVideo *This, DDCAPS *pCaps);HRESULT ( *GetSurfaceDesc)(IDirectDrawVideo *This, DDSURFACEDESC *pSurfaceDesc);HRESULT ( *GetFourCCCodes)(IDirectDrawVideo *This, DWORD *pCount, DWORD *pCodes);HRESULT ( *SetDirectDraw)(IDirectDrawVideo *This, LPDIRECTDRAW pDirectDraw);HRESULT ( *GetDirectDraw)(IDirectDrawVideo *This, LPDIRECTDRAW *ppDirectDraw);HRESULT ( *GetSurfaceType)(IDirectDrawVideo *This, DWORD *pSurfaceType);HRESULT ( *SetDefault)(IDirectDrawVideo *This);HRESULT ( *UseScanLine)(IDirectDrawVideo *This, int UseScanLine);HRESULT ( *CanUseScanLine)(IDirectDrawVideo *This, int *UseScanLine);HRESULT ( *UseOverlayStretch)(IDirectDrawVideo *This, int UseOverlayStretch);HRESULT ( *CanUseOverlayStretch)(IDirectDrawVideo *This, int *UseOverlayStretch);HRESULT ( *UseWhenFullScreen)(IDirectDrawVideo *This, int UseWhenFullScreen);HRESULT ( *WillUseFullScreen)(IDirectDrawVideo *This, int *UseWhenFullScreen);};
struct IMLangStringAStrVtbl {HRESULT ( *QueryInterface)(IMLangStringAStr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringAStr *This);ULONG ( *Release)(IMLangStringAStr *This);HRESULT ( *Sync)(IMLangStringAStr *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangStringAStr *This, int *plLen);HRESULT ( *SetMLStr)(IMLangStringAStr *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);HRESULT ( *SetAStr)(IMLangStringAStr *This, int lDestPos, int lDestLen, UINT uCodePage,  CHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetStrBufA)(IMLangStringAStr *This, int lDestPos, int lDestLen, UINT uCodePage, IMLangStringBufA *pSrcBuf, int *pcchActual, int *plActualLen);HRESULT ( *GetAStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, UINT uCodePageIn, UINT *puCodePageOut, CHAR *pszDest, int cchDest, int *pcchActual, int *plActualLen);HRESULT ( *GetStrBufA)(IMLangStringAStr *This, int lSrcPos, int lSrcMaxLen, UINT *puDestCodePage, IMLangStringBufA **ppDestBuf, int *plDestLen);HRESULT ( *LockAStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, int lFlags, UINT uCodePageIn, int cchRequest, UINT *puCodePageOut, CHAR **ppszDest, int *pcchDest, int *plDestLen);HRESULT ( *UnlockAStr)(IMLangStringAStr *This,  CHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetLocale)(IMLangStringAStr *This, int lDestPos, int lDestLen, LCID locale);HRESULT ( *GetLocale)(IMLangStringAStr *This, int lSrcPos, int lSrcMaxLen, LCID *plocale, int *plLocalePos, int *plLocaleLen);};
struct IRowSchemaChangeVtbl {HRESULT ( *QueryInterface)(IRowSchemaChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowSchemaChange *This);ULONG ( *Release)(IRowSchemaChange *This);HRESULT ( *SetColumns)(IRowSchemaChange *This, DBORDINAL cColumns,DBCOLUMNACCESS  *    rgColumns);HRESULT ( *DeleteColumns)(IRowSchemaChange *This, DBORDINAL cColumns, DBID  *    rgColumnIDs, DBSTATUS rgdwStatus[]);HRESULT ( *AddColumns)(IRowSchemaChange *This, DBORDINAL cColumns, DBCOLUMNINFO  *    rgNewColumnInfo, DBCOLUMNACCESS rgColumns[]);};
struct IMediaParamInfoVtbl {HRESULT ( *QueryInterface)(IMediaParamInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaParamInfo *This);ULONG ( *Release)(IMediaParamInfo *This);HRESULT ( *GetParamCount)(IMediaParamInfo *This, DWORD *pdwParams);HRESULT ( *GetParamInfo)(IMediaParamInfo *This, DWORD dwParamIndex, MP_PARAMINFO *pInfo);HRESULT ( *GetParamText)(IMediaParamInfo *This, DWORD dwParamIndex, WCHAR **ppwchText);HRESULT ( *GetNumTimeFormats)(IMediaParamInfo *This, DWORD *pdwNumTimeFormats);HRESULT ( *GetSupportedTimeFormat)(IMediaParamInfo *This, DWORD dwFormatIndex, GUID *pguidTimeFormat);HRESULT ( *GetCurrentTimeFormat)(IMediaParamInfo *This, GUID *pguidTimeFormat, MP_TIMEDATA *pTimeData);};
struct IOleControlSiteVtbl {HRESULT ( *QueryInterface)(IOleControlSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlSite *This);ULONG ( *Release)(IOleControlSite *This);HRESULT ( *OnControlInfoChanged)(IOleControlSite *This);HRESULT ( *LockInPlaceActive)(IOleControlSite *This, BOOL fLock);HRESULT ( *GetExtendedControl)(IOleControlSite *This, IDispatch **ppDisp);HRESULT ( *TransformCoords)(IOleControlSite *This, POINTL *pPtlHimetric, POINTF *pPtfContainer, DWORD dwFlags);HRESULT ( *TranslateAcceleratorA)(IOleControlSite *This, MSG *pMsg, DWORD grfModifiers);HRESULT ( *OnFocus)(IOleControlSite *This, BOOL fGotFocus);HRESULT ( *ShowPropertyFrame)(IOleControlSite *This);};
struct IXMLNodeFactoryVtbl {HRESULT ( *QueryInterface)(IXMLNodeFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLNodeFactory *This);ULONG ( *Release)(IXMLNodeFactory *This);HRESULT ( *NotifyEvent)(IXMLNodeFactory *This, IXMLNodeSource *pSource, XML_NODEFACTORY_EVENT iEvt);HRESULT ( *BeginChildren)(IXMLNodeFactory *This, IXMLNodeSource *pSource, XML_NODE_INFO *pNodeInfo);HRESULT ( *EndChildren)(IXMLNodeFactory *This, IXMLNodeSource *pSource, BOOL fEmpty, XML_NODE_INFO *pNodeInfo);HRESULT ( *Error)(IXMLNodeFactory *This, IXMLNodeSource *pSource, HRESULT hrErrorCode, USHORT cNumRecs, XML_NODE_INFO **apNodeInfo);HRESULT ( *CreateNode)(IXMLNodeFactory *This, IXMLNodeSource *pSource, PVOID pNodeParent, USHORT cNumRecs, XML_NODE_INFO **apNodeInfo);};
struct IAMDirectSoundVtbl {HRESULT ( *QueryInterface)(IAMDirectSound *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMDirectSound *This);ULONG ( *Release)(IAMDirectSound *This);HRESULT ( *GetDirectSoundInterface)(IAMDirectSound *This, LPDIRECTSOUND *lplpds);HRESULT ( *GetPrimaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER *lplpdsb);HRESULT ( *GetSecondaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER *lplpdsb);HRESULT ( *ReleaseDirectSoundInterface)(IAMDirectSound *This, LPDIRECTSOUND lpds);HRESULT ( *ReleasePrimaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER lpdsb);HRESULT ( *ReleaseSecondaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER lpdsb);HRESULT ( *SetFocusWindow)(IAMDirectSound *This, HWND, BOOL);HRESULT ( *GetFocusWindow)(IAMDirectSound *This, HWND *, BOOL *);};
struct IAMMediaStreamVtbl {HRESULT ( *QueryInterface)(IAMMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaStream *This);ULONG ( *Release)(IAMMediaStream *This);HRESULT ( *GetMultiMediaStream)(IAMMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAMMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAMMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAMMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAMMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAMMediaStream *This, DWORD dwFlags);HRESULT ( *Initialize)(IAMMediaStream *This, IUnknown *pSourceObject, DWORD dwFlags, REFMSPID PurposeId,  STREAM_TYPE StreamType);HRESULT ( *SetState)(IAMMediaStream *This, FILTER_STATE State);HRESULT ( *JoinAMMultiMediaStream)(IAMMediaStream *This, IAMMultiMediaStream *pAMMultiMediaStream);HRESULT ( *JoinFilter)(IAMMediaStream *This, IMediaStreamFilter *pMediaStreamFilter);HRESULT ( *JoinFilterGraph)(IAMMediaStream *This, IFilterGraph *pFilterGraph);};
struct IHTMLPaintSiteVtbl {HRESULT ( *QueryInterface)(IHTMLPaintSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPaintSite *This);ULONG ( *Release)(IHTMLPaintSite *This);HRESULT ( *InvalidatePainterInfo)(IHTMLPaintSite *This);HRESULT ( *InvalidateRect)(IHTMLPaintSite *This, RECT *prcInvalid);HRESULT ( *InvalidateRegion)(IHTMLPaintSite *This, HRGN rgnInvalid);HRESULT ( *GetDrawInfo)(IHTMLPaintSite *This, LONG lFlags, HTML_PAINT_DRAW_INFO *pDrawInfo);HRESULT ( *TransformGlobalToLocal)(IHTMLPaintSite *This, POINT ptGlobal, POINT *pptLocal);HRESULT ( *TransformLocalToGlobal)(IHTMLPaintSite *This, POINT ptLocal, POINT *pptGlobal);HRESULT ( *GetHitTestCookie)(IHTMLPaintSite *This, LONG *plCookie);};
struct IInputMethodExVtbl {HRESULT ( *QueryInterface)(IInputMethodEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInputMethodEx *This);ULONG ( *Release)(IInputMethodEx *This);HRESULT ( *Select)(IInputMethodEx *This, HWND hwndSip);HRESULT ( *Deselect)(IInputMethodEx *This);HRESULT ( *Showing)(IInputMethodEx *This);HRESULT ( *Hiding)(IInputMethodEx *This);HRESULT ( *GetInfo)(IInputMethodEx *This, IMINFO *pimi);HRESULT ( *ReceiveSipInfo)(IInputMethodEx *This, SIPINFO *psi);HRESULT ( *RegisterCallback)(IInputMethodEx *This, IIMCallback *lpIMCallback);HRESULT ( *GetImData)(IInputMethodEx *This, DWORD dwSize, void *pvImData);HRESULT ( *SetImData)(IInputMethodEx *This, DWORD dwSize, void *pvImData);HRESULT ( *UserOptionsDlg)(IInputMethodEx *This, HWND hwndParent);HRESULT ( *SetIMMActiveContext)(IInputMethodEx *This, HWND hwnd, BOOL bOpen, DWORD dwConversion, DWORD dwSentence, DWORD hkl);HRESULT ( *RegisterCallbackEx)(IInputMethodEx *This, IIMCallbackEx *lpIMCallback);};
struct IMLangFontLinkVtbl {HRESULT ( *QueryInterface)(IMLangFontLink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangFontLink *This);ULONG ( *Release)(IMLangFontLink *This);HRESULT ( *GetCharCodePages)(IMLangFontLink *This, WCHAR chSrc, DWORD *pdwCodePages);HRESULT ( *GetStrCodePages)(IMLangFontLink *This,  WCHAR *pszSrc, int cchSrc, DWORD dwPriorityCodePages, DWORD *pdwCodePages, int *pcchCodePages);HRESULT ( *CodePageToCodePages)(IMLangFontLink *This, UINT uCodePage, DWORD *pdwCodePages);HRESULT ( *CodePagesToCodePage)(IMLangFontLink *This, DWORD dwCodePages, UINT uDefaultCodePage, UINT *puCodePage);HRESULT ( *GetFontCodePages)(IMLangFontLink *This, HDC hDC, HFONT hFont, DWORD *pdwCodePages);HRESULT ( *MapFont)(IMLangFontLink *This, HDC hDC, DWORD dwCodePages, HFONT hSrcFont, HFONT *phDestFont);HRESULT ( *ReleaseFont)(IMLangFontLink *This, HFONT hFont);HRESULT ( *ResetFontMapping)(IMLangFontLink *This);};
struct IOverlayNotifyVtbl {HRESULT ( *QueryInterface)(IOverlayNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlayNotify *This);ULONG ( *Release)(IOverlayNotify *This);HRESULT ( *OnPaletteChange)(IOverlayNotify *This, DWORD dwColors,  PALETTEENTRY *pPalette);HRESULT ( *OnClipChange)(IOverlayNotify *This,  RECT *pSourceRect,  RECT *pDestinationRect,  RGNDATA *pRgnData);HRESULT ( *OnColorKeyChange)(IOverlayNotify *This,  COLORKEY *pColorKey);HRESULT ( *OnPositionChange)(IOverlayNotify *This,  RECT *pSourceRect,  RECT *pDestinationRect);};
struct _DOT11_WEP_OFFLOAD {ULONG uReserved;HANDLE hOffloadContext;HANDLE hOffload;DOT11_OFFLOAD_TYPE dot11OffloadType;DWORD dwAlgorithm;BOOL bRowIsOutbound;BOOL bUseDefault;ULONG uFlags;UCHAR ucMacAddress[6];ULONG uNumOfRWsOnPeer;ULONG uNumOfRWsOnMe;DOT11_IV48_COUNTER dot11IV48Counters[16];USHORT usDot11RWBitMaps[16];USHORT usKeyLength;UCHAR ucKey[1];};
struct IDifferencingVtbl {HRESULT ( *QueryInterface)(IDifferencing *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDifferencing *This);ULONG ( *Release)(IDifferencing *This);HRESULT ( *SubtractMoniker)(IDifferencing *This, IReconcileInitiator *pInitiator, IMoniker *pOtherStg, DifferenceType diffType, STGMEDIUM *pStgMedium, DWORD reserved);HRESULT ( *SubtractVerid)(IDifferencing *This, IReconcileInitiator *pInitiator, VERID *pVerid, DifferenceType diffType, STGMEDIUM *pStgMedium, DWORD reserved);HRESULT ( *SubtractTimeStamp)(IDifferencing *This, IReconcileInitiator *pInitiator, FILETIME *pTimeStamp, DifferenceType diffType, STGMEDIUM *pStgMedium, DWORD reserved);HRESULT ( *Add)(IDifferencing *This, IReconcileInitiator *pInitiator, STGMEDIUM *pStgMedium);};
struct IInputMethod2Vtbl {HRESULT ( *QueryInterface)(IInputMethod2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInputMethod2 *This);ULONG ( *Release)(IInputMethod2 *This);HRESULT ( *Select)(IInputMethod2 *This, HWND hwndSip);HRESULT ( *Deselect)(IInputMethod2 *This);HRESULT ( *Showing)(IInputMethod2 *This);HRESULT ( *Hiding)(IInputMethod2 *This);HRESULT ( *GetInfo)(IInputMethod2 *This, IMINFO *pimi);HRESULT ( *ReceiveSipInfo)(IInputMethod2 *This, SIPINFO *psi);HRESULT ( *RegisterCallback)(IInputMethod2 *This, IIMCallback *lpIMCallback);HRESULT ( *GetImData)(IInputMethod2 *This, DWORD dwSize, void *pvImData);HRESULT ( *SetImData)(IInputMethod2 *This, DWORD dwSize, void *pvImData);HRESULT ( *UserOptionsDlg)(IInputMethod2 *This, HWND hwndParent);HRESULT ( *SetIMMActiveContext)(IInputMethod2 *This, HWND hwnd, BOOL bOpen, DWORD dwConversion, DWORD dwSentence, DWORD hkl);HRESULT ( *RegisterCallback2)(IInputMethod2 *This, IIMCallback2 *lpIMCallback);};
struct IInstalledAppVtbl {HRESULT ( *QueryInterface)(IInstalledApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInstalledApp *This);ULONG ( *Release)(IInstalledApp *This);HRESULT ( *GetAppInfo)(IInstalledApp *This, PAPPINFODATA pai);HRESULT ( *GetPossibleActions)(IInstalledApp *This, DWORD *pdwActions);HRESULT ( *GetSlowAppInfo)(IInstalledApp *This, PSLOWAPPINFO psaid);HRESULT ( *GetCachedSlowAppInfo)(IInstalledApp *This, PSLOWAPPINFO psaid);HRESULT ( *IsInstalled)(IInstalledApp *This);HRESULT ( *Uninstall)(IInstalledApp *This, HWND hwnd);HRESULT ( *Modify)(IInstalledApp *This, HWND hwndParent);HRESULT ( *Repair)(IInstalledApp *This, BOOL bReinstall);HRESULT ( *Upgrade)(IInstalledApp *This);};
struct IPublishedAppVtbl {HRESULT ( *QueryInterface)(IPublishedApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPublishedApp *This);ULONG ( *Release)(IPublishedApp *This);HRESULT ( *GetAppInfo)(IPublishedApp *This, PAPPINFODATA pai);HRESULT ( *GetPossibleActions)(IPublishedApp *This, DWORD *pdwActions);HRESULT ( *GetSlowAppInfo)(IPublishedApp *This, PSLOWAPPINFO psaid);HRESULT ( *GetCachedSlowAppInfo)(IPublishedApp *This, PSLOWAPPINFO psaid);HRESULT ( *IsInstalled)(IPublishedApp *This);HRESULT ( *Install)(IPublishedApp *This, LPSYSTEMTIME pstInstall);HRESULT ( *GetPublishedAppInfo)(IPublishedApp *This, PPUBAPPINFO ppai);HRESULT ( *Unschedule)(IPublishedApp *This);};
struct IRowsetChangeVtbl {HRESULT ( *QueryInterface)(IRowsetChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetChange *This);ULONG ( *Release)(IRowsetChange *This);HRESULT ( *DeleteRows)(IRowsetChange *This, HCHAPTER hReserved, DBCOUNTITEM cRows, HROW  *    rghRows, DBROWSTATUS rgRowStatus[]);HRESULT ( *SetData)(IRowsetChange *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *InsertRow)(IRowsetChange *This, HCHAPTER hReserved, HACCESSOR hAccessor, void *pData, HROW *phRow);};
struct IContextMenuVtbl {HRESULT ( *QueryInterface)(IContextMenu *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu *This);ULONG ( *Release)(IContextMenu *This);HRESULT ( *QueryContextMenu)(IContextMenu *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);};
struct IMediaObjectVtbl {HRESULT ( *QueryInterface)(IMediaObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaObject *This);ULONG ( *Release)(IMediaObject *This);HRESULT ( *GetStreamCount)(IMediaObject *This, DWORD *pcInputStreams, DWORD *pcOutputStreams);HRESULT ( *GetInputStreamInfo)(IMediaObject *This, DWORD dwInputStreamIndex, DWORD *pdwFlags);HRESULT ( *GetOutputStreamInfo)(IMediaObject *This, DWORD dwOutputStreamIndex, DWORD *pdwFlags);HRESULT ( *GetInputType)(IMediaObject *This, DWORD dwInputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);HRESULT ( *GetOutputType)(IMediaObject *This, DWORD dwOutputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);HRESULT ( *SetInputType)(IMediaObject *This, DWORD dwInputStreamIndex,  DMO_MEDIA_TYPE *pmt, DWORD dwFlags);HRESULT ( *SetOutputType)(IMediaObject *This, DWORD dwOutputStreamIndex,  DMO_MEDIA_TYPE *pmt, DWORD dwFlags);HRESULT ( *GetInputCurrentType)(IMediaObject *This, DWORD dwInputStreamIndex, DMO_MEDIA_TYPE *pmt);HRESULT ( *GetOutputCurrentType)(IMediaObject *This, DWORD dwOutputStreamIndex, DMO_MEDIA_TYPE *pmt);HRESULT ( *GetInputSizeInfo)(IMediaObject *This, DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pcbAlignment);HRESULT ( *GetOutputSizeInfo)(IMediaObject *This, DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pcbAlignment);HRESULT ( *GetInputMaxLatency)(IMediaObject *This, DWORD dwInputStreamIndex, REFERENCE_TIME *prtMaxLatency);HRESULT ( *SetInputMaxLatency)(IMediaObject *This, DWORD dwInputStreamIndex, REFERENCE_TIME rtMaxLatency);HRESULT ( *Flush)(IMediaObject *This);HRESULT ( *Discontinuity)(IMediaObject *This, DWORD dwInputStreamIndex);HRESULT ( *AllocateStreamingResources)(IMediaObject *This);HRESULT ( *FreeStreamingResources)(IMediaObject *This);HRESULT ( *GetInputStatus)(IMediaObject *This, DWORD dwInputStreamIndex, DWORD *dwFlags);HRESULT ( *ProcessInput)(IMediaObject *This, DWORD dwInputStreamIndex, IMediaBuffer *pBuffer, DWORD dwFlags, REFERENCE_TIME rtTimestamp, REFERENCE_TIME rtTimelength);HRESULT ( *ProcessOutput)(IMediaObject *This, DWORD dwFlags, DWORD cOutputBufferCount, DMO_OUTPUT_DATA_BUFFER *pOutputBuffers, DWORD *pdwStatus);HRESULT ( *Lock)(IMediaObject *This, LONG bLock);};
struct IMediaSampleVtbl {HRESULT ( *QueryInterface)(IMediaSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSample *This);ULONG ( *Release)(IMediaSample *This);HRESULT ( *GetPointer)(IMediaSample *This, BYTE **ppBuffer);int ( *GetSize)(IMediaSample *This);HRESULT ( *GetTime)(IMediaSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IMediaSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IMediaSample *This);HRESULT ( *SetSyncPoint)(IMediaSample *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IMediaSample *This);HRESULT ( *SetPreroll)(IMediaSample *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IMediaSample *This);HRESULT ( *SetActualDataLength)(IMediaSample *This, int MIDL_0008);HRESULT ( *GetMediaType)(IMediaSample *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IMediaSample *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IMediaSample *This);HRESULT ( *SetDiscontinuity)(IMediaSample *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IMediaSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IMediaSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);};
struct IRASCallbackVtbl {HRESULT ( *QueryInterface)(IRASCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRASCallback *This);ULONG ( *Release)(IRASCallback *This);HRESULT ( *OnReconnect)(IRASCallback *This, LPSTR pszCurrentConnectoid, LPSTR pszNewConnectoid, IRASTransport *pTransport);HRESULT ( *OnLogonPrompt)(IRASCallback *This, LPIXPRASLOGON pRasLogon, IRASTransport *pTransport);HRESULT ( *OnRasDialStatus)(IRASCallback *This, RASCONNSTATE rasconnstate, DWORD dwError, IRASTransport *pTransport);HRESULT ( *OnDisconnect)(IRASCallback *This, LPSTR pszCurrentConnectoid, boolean fConnectionOwner, IRASTransport *pTransport);};
typedef USB_TRANSFER (*LPSET_DESCRIPTOR)(USB_HANDLE, LPTRANSFER_NOTIFY_ROUTINE, LPVOID, DWORD, UCHAR, UCHAR, WORD, WORD, PVOID);
struct IQueryFormAVtbl {HRESULT ( *QueryInterface)(IQueryFormA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQueryFormA *This);ULONG ( *Release)(IQueryFormA *This);HRESULT ( *Initialize)(IQueryFormA *This, HKEY hkForm);HRESULT ( *AddForms)(IQueryFormA *This, LPCQADDFORMSPROC_A pAddFormsProc, LPARAM lParam);HRESULT ( *AddPages)(IQueryFormA *This, LPCQADDPAGESPROC_A pAddPagesProc, LPARAM lParam);};
struct IQueryFormWVtbl {HRESULT ( *QueryInterface)(IQueryFormW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQueryFormW *This);ULONG ( *Release)(IQueryFormW *This);HRESULT ( *Initialize)(IQueryFormW *This, HKEY hkForm);HRESULT ( *AddForms)(IQueryFormW *This, LPCQADDFORMSPROC_W pAddFormsProc, LPARAM lParam);HRESULT ( *AddPages)(IQueryFormW *This, LPCQADDPAGESPROC_W pAddPagesProc, LPARAM lParam);};
struct IDVDDomainVtbl {HRESULT ( *QueryInterface)(IDVDDomain *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDDomain *This);ULONG ( *Release)(IDVDDomain *This);HRESULT ( *GetType)(IDVDDomain *This, EDVDDomainType *pDType);HRESULT ( *GetSpace)(IDVDDomain *This, UINT8 *pSpaceSet);HRESULT ( *GetStreamAttributes)(IDVDDomain *This, IDVDStreamAttributes **ppAttr);HRESULT ( *GetPGCCount)(IDVDDomain *This, UINT16 *pCount);HRESULT ( *GetPGC)(IDVDDomain *This, UINT16 pgcn, IDVDProgramChain **ppPGC, UINT32 *pPGCCat);HRESULT ( *GetTotalVideoObjects)(IDVDDomain *This, UINT16 *pTotalVobs, UINT32 *pCellPieceCount);HRESULT ( *GetCellPieceEnumerator)(IDVDDomain *This, IEnumDVD_CELL_PIECE **ppEnumPieces, UINT32 *pPieceCount);HRESULT ( *GetTotalVOBUnits)(IDVDDomain *This, UINT32 *pVobus);HRESULT ( *GetVOBUTablePtr)(IDVDDomain *This, UINT32 **ppVOBUAddressArray);HRESULT ( *GetTimeMap)(IDVDDomain *This, UINT16 pgcn, IDVDTimeMap **ppTimeMap);HRESULT ( *GetVOBFileId)(IDVDDomain *This, INT16 *pFileId);HRESULT ( *GetVolume)(IDVDDomain *This, IDVDVideoVolume **ppVolume);HRESULT ( *GetTitleSet)(IDVDDomain *This, IDVDTitleSet **ppTitleSet);};
struct IMDDatasetVtbl {HRESULT ( *QueryInterface)(IMDDataset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDDataset *This);ULONG ( *Release)(IMDDataset *This);HRESULT ( *FreeAxisInfo)(IMDDataset *This, DBCOUNTITEM cAxes, MDAXISINFO *rgAxisInfo);HRESULT ( *GetAxisInfo)(IMDDataset *This, DBCOUNTITEM *pcAxes, MDAXISINFO **prgAxisInfo);HRESULT ( *GetAxisRowset)(IMDDataset *This, IUnknown *pUnkOuter, DBCOUNTITEM iAxis,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);HRESULT ( *GetCellData)(IMDDataset *This, HACCESSOR hAccessor, DBORDINAL ulStartCell, DBORDINAL ulEndCell, void *pData);HRESULT ( *GetSpecification)(IMDDataset *This,  IID * riid, IUnknown **ppSpecification);};
struct ISdpRecordVtbl {HRESULT ( *QueryInterface)(ISdpRecord *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISdpRecord *This);ULONG ( *Release)(ISdpRecord *This);HRESULT ( *CreateFromStream)(ISdpRecord *This, UCHAR *pStream, ULONG size);HRESULT ( *WriteToStream)(ISdpRecord *This, UCHAR **ppStream, ULONG *pStreamSize, ULONG preSize, ULONG postSize);HRESULT ( *SetAttribute)(ISdpRecord *This, USHORT attribute, NodeData *pNode);HRESULT ( *SetAttributeFromStream)(ISdpRecord *This, USHORT attribute, UCHAR *pStream, ULONG size);HRESULT ( *GetAttribute)(ISdpRecord *This, USHORT attribute, NodeData *pNode);HRESULT ( *GetAttributeAsStream)(ISdpRecord *This, USHORT attribute, UCHAR **ppStream, ULONG *pSize);HRESULT ( *Walk)(ISdpRecord *This, ISdpWalk *pWalk);HRESULT ( *GetAttributeList)(ISdpRecord *This, USHORT **ppList, ULONG *pListSize);HRESULT ( *GetString)(ISdpRecord *This, USHORT offset, USHORT *pLangId, WCHAR **ppString);HRESULT ( *GetIcon)(ISdpRecord *This, int cxRes, int cyRes, HICON *phIcon);HRESULT ( *GetServiceClass)(ISdpRecord *This, LPGUID pServiceClass);};
struct _DEVICE_OBJECT {LONG ReferenceCount;struct _DRIVER_OBJECT *DriverObject;struct _DEVICE_OBJECT *NextDevice;struct _DEVICE_OBJECT *AttachedDevice;struct _IRP *CurrentIrp;ULONG Flags;ULONG Characteristics;PVOID DeviceExtension;ULONG DeviceType;CCHAR StackSize;union _DEVICE_OBJECT___C539DEAEE31ED5B59C09D6583F6C5542 Queue;ULONG AlignmentRequirement;KDEVICE_QUEUE DeviceQueue;KDPC Dpc;ULONG ActiveThreadCount;USHORT Spare1;struct _DEVOBJ_EXTENSION *DeviceObjectExtension;};
struct _DRIVER_OBJECT {PDEVICE_OBJECT DeviceObject;ULONG Flags;PDRIVER_EXTENSION DriverExtension;PFAST_IO_DISPATCH FastIoDispatch;PDRIVER_INITIALIZE DriverInit;PDRIVER_STARTIO DriverStartIo;PDRIVER_UNLOAD DriverUnload;PDRIVER_DISPATCH MajorFunction[13];};
struct IDeskBandVtbl {HRESULT ( *QueryInterface)(IDeskBand *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDeskBand *This);ULONG ( *Release)(IDeskBand *This);HRESULT ( *GetWindow)(IDeskBand *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDeskBand *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDeskBand *This, BOOL fShow);HRESULT ( *CloseDW)(IDeskBand *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDeskBand *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);HRESULT ( *GetBandInfo)(IDeskBand *This, DWORD dwBandID, DWORD dwViewMode, DESKBANDINFO *pdbi);};
typedef int ( *LPWSPRECVFROM)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, struct sockaddr *lpFrom, LPINT lpFromlen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSPSENDTO)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags,  struct sockaddr *lpTo, int iTolen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct IPrintVtbl {HRESULT ( *QueryInterface)(IPrint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrint *This);ULONG ( *Release)(IPrint *This);HRESULT ( *SetInitialPageNum)(IPrint *This, LONG nFirstPage);HRESULT ( *GetPageInfo)(IPrint *This, LONG *pnFirstPage, LONG *pcPages);HRESULT ( *Print)(IPrint *This, DWORD grfFlags, DVTARGETDEVICE **pptd, PAGESET **ppPageSet, STGMEDIUM *pstgmOptions, IContinueCallback *pcallback, LONG nFirstPage, LONG *pcPagesPrinted, LONG *pnLastPage);};
typedef int ( *LPWSPIOCTL)(SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _CERT_INFO {DWORD dwVersion;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME NotBefore;FILETIME NotAfter;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;CRYPT_BIT_BLOB IssuerUniqueId;CRYPT_BIT_BLOB SubjectUniqueId;DWORD cExtension;PCERT_EXTENSION rgExtension;};
typedef int ( *LPWSPRECV)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSPSEND)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef HRESULT  WABOPENEX(LPADRBOOK *lppAdrBook, LPWABOBJECT *lppWABObject, LPWAB_PARAM lpWP, DWORD Reserved, ALLOCATEBUFFER *fnAllocateBuffer, ALLOCATEMORE *fnAllocateMore, FREEBUFFER *fnFreeBuffer);
struct _CTL_INFO {DWORD dwVersion;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;CRYPT_INTEGER_BLOB SequenceNumber;FILETIME ThisUpdate;FILETIME NextUpdate;CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;DWORD cCTLEntry;PCTL_ENTRY rgCTLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct tagOFNA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 {EXCEPTION_DEBUG_INFO Exception;CREATE_THREAD_DEBUG_INFO CreateThread;CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;EXIT_THREAD_DEBUG_INFO ExitThread;EXIT_PROCESS_DEBUG_INFO ExitProcess;LOAD_DLL_DEBUG_INFO LoadDll;UNLOAD_DLL_DEBUG_INFO UnloadDll;OUTPUT_DEBUG_STRING_INFO DebugString;RIP_INFO RipInfo;};
struct IDirect3DVertexBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVertexBuffer8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVertexBuffer8 *This);ULONG ( *Release)(IDirect3DVertexBuffer8 *This);HRESULT ( *GetDevice)(IDirect3DVertexBuffer8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVertexBuffer8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DVertexBuffer8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DVertexBuffer8 *This);void ( *PreLoad)(IDirect3DVertexBuffer8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DVertexBuffer8 *This);HRESULT ( *Lock)(IDirect3DVertexBuffer8 *This, UINT OffsetToLock, UINT SizeToLock, BYTE **ppbData, DWORD Flags);HRESULT ( *Unlock)(IDirect3DVertexBuffer8 *This);HRESULT ( *GetDesc)(IDirect3DVertexBuffer8 *This, D3DVERTEXBUFFER_DESC *pDesc);};
struct IDirectDrawMediaStreamVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaStream *This);ULONG ( *Release)(IDirectDrawMediaStream *This);HRESULT ( *GetMultiMediaStream)(IDirectDrawMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IDirectDrawMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IDirectDrawMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IDirectDrawMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IDirectDrawMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IDirectDrawMediaStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IDirectDrawMediaStream *This, DDSURFACEDESC *pDDSDCurrent, IDirectDrawPalette **ppDirectDrawPalette, DDSURFACEDESC *pDDSDDesired, DWORD *pdwFlags);HRESULT ( *SetFormat)(IDirectDrawMediaStream *This,  DDSURFACEDESC *pDDSurfaceDesc, IDirectDrawPalette *pDirectDrawPalette);HRESULT ( *GetDirectDraw)(IDirectDrawMediaStream *This, IDirectDraw **ppDirectDraw);HRESULT ( *SetDirectDraw)(IDirectDrawMediaStream *This, IDirectDraw *pDirectDraw);HRESULT ( *CreateSample)(IDirectDrawMediaStream *This, IDirectDrawSurface *pSurface,  RECT *pRect, DWORD dwFlags, IDirectDrawStreamSample **ppSample);HRESULT ( *GetTimePerFrame)(IDirectDrawMediaStream *This, STREAM_TIME *pFrameTime);};
struct IDVDNavigationManagerVtbl {HRESULT ( *QueryInterface)(IDVDNavigationManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDNavigationManager *This);ULONG ( *Release)(IDVDNavigationManager *This);HRESULT ( *SetVolume)(IDVDNavigationManager *This, IDVDVideoVolume *pVolume);HRESULT ( *GetSParameter)(IDVDNavigationManager *This, UINT8 no, UINT16 *pValue);HRESULT ( *GetGParameter)(IDVDNavigationManager *This, UINT8 no, UINT16 *pValue, BOOL *pbCounterMode);HRESULT ( *SetSParameter)(IDVDNavigationManager *This, UINT8 no, UINT16 wValue);HRESULT ( *GetScanCaps)(IDVDNavigationManager *This, UINT16 *pMask);HRESULT ( *GetPlaybackState)(IDVDNavigationManager *This, EDDVDPlaybackState *peState);HRESULT ( *UseRenderer)(IDVDNavigationManager *This, WCHAR *pszRendererName);HRESULT ( *ButtonSelectDirect)(IDVDNavigationManager *This, BYTE byteButtonNumber);};
struct IDirect3DIndexBuffer8Vtbl {HRESULT ( *QueryInterface)(IDirect3DIndexBuffer8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DIndexBuffer8 *This);ULONG ( *Release)(IDirect3DIndexBuffer8 *This);HRESULT ( *GetDevice)(IDirect3DIndexBuffer8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DIndexBuffer8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DIndexBuffer8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DIndexBuffer8 *This);void ( *PreLoad)(IDirect3DIndexBuffer8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DIndexBuffer8 *This);HRESULT ( *Lock)(IDirect3DIndexBuffer8 *This, UINT OffsetToLock, UINT SizeToLock, BYTE **ppbData, DWORD Flags);HRESULT ( *Unlock)(IDirect3DIndexBuffer8 *This);HRESULT ( *GetDesc)(IDirect3DIndexBuffer8 *This, D3DINDEXBUFFER_DESC *pDesc);};
struct IImageDecodeEventSinkVtbl {HRESULT ( *QueryInterface)(IImageDecodeEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImageDecodeEventSink *This);ULONG ( *Release)(IImageDecodeEventSink *This);HRESULT ( *GetSurface)(IImageDecodeEventSink *This, LONG nWidth, LONG nHeight,  GUID * bfid, ULONG nPasses, DWORD dwHints, IUnknown **ppSurface);HRESULT ( *OnBeginDecode)(IImageDecodeEventSink *This, DWORD *pdwEvents, ULONG *pnFormats, BFID **ppFormats);HRESULT ( *OnBitsComplete)(IImageDecodeEventSink *This);HRESULT ( *OnDecodeComplete)(IImageDecodeEventSink *This, HRESULT hrStatus);HRESULT ( *OnPalette)(IImageDecodeEventSink *This);HRESULT ( *OnProgress)(IImageDecodeEventSink *This, RECT *pBounds, BOOL bComplete);};
struct IDVDStreamAttributesVtbl {HRESULT ( *QueryInterface)(IDVDStreamAttributes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDStreamAttributes *This);ULONG ( *Release)(IDVDStreamAttributes *This);HRESULT ( *GetVideoAttr)(IDVDStreamAttributes *This, UINT16 *pVideoAttr);HRESULT ( *GetAudioCount)(IDVDStreamAttributes *This, UINT8 *pStreamCount);HRESULT ( *GetAudioAttr)(IDVDStreamAttributes *This, UINT nStreamNo, DVD_AUDIO_STREAM_ATTR *pAudioAttr);HRESULT ( *GetAudioMultichannelUseAttr)(IDVDStreamAttributes *This, UINT8 nStreamNo, DVD_AUDIO_MU_ATTR *pMuse);HRESULT ( *GetSubpictureCount)(IDVDStreamAttributes *This, UINT8 *pStreamCount);HRESULT ( *GetSubpictureAttr)(IDVDStreamAttributes *This, UINT8 nStreamNo, DVD_SUBPICTURE_STREAM_ATTR *pSPAttr);};
typedef BOOL ( *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters);
struct IDirectSoundCaptureVtbl {HRESULT ( *QueryInterface)(IDirectSoundCapture *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCapture *This);ULONG ( *Release)(IDirectSoundCapture *This);HRESULT ( *CreateCaptureBuffer)(IDirectSoundCapture *This, LPCDSCBUFFERDESC, LPDIRECTSOUNDCAPTUREBUFFER *, LPUNKNOWN);HRESULT ( *GetCaps)(IDirectSoundCapture *This, LPDSCCAPS);HRESULT ( *Initialize)(IDirectSoundCapture *This, LPGUID);};
struct IAMMediaTypeStreamVtbl {HRESULT ( *QueryInterface)(IAMMediaTypeStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaTypeStream *This);ULONG ( *Release)(IAMMediaTypeStream *This);HRESULT ( *GetMultiMediaStream)(IAMMediaTypeStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAMMediaTypeStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAMMediaTypeStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAMMediaTypeStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAMMediaTypeStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAMMediaTypeStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IAMMediaTypeStream *This, AM_MEDIA_TYPE *pMediaType, DWORD dwFlags);HRESULT ( *SetFormat)(IAMMediaTypeStream *This, AM_MEDIA_TYPE *pMediaType, DWORD dwFlags);HRESULT ( *CreateSample)(IAMMediaTypeStream *This, int lSampleSize, BYTE *pbBuffer, DWORD dwFlags, IUnknown *pUnkOuter, IAMMediaTypeSample **ppAMMediaTypeSample);HRESULT ( *GetStreamAllocatorRequirements)(IAMMediaTypeStream *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *SetStreamAllocatorRequirements)(IAMMediaTypeStream *This, ALLOCATOR_PROPERTIES *pProps);};
struct IDVDHighlightInfoVtbl {HRESULT ( *QueryInterface)(IDVDHighlightInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDHighlightInfo *This);ULONG ( *Release)(IDVDHighlightInfo *This);HRESULT ( *GetStreamingInfo)(IDVDHighlightInfo *This, IDVDStreamControlInfo **pControlInfo);HRESULT ( *GetPTMs)(IDVDHighlightInfo *This, UINT32 *puiStart, UINT32 *puiEnd, UINT32 *puiSelectionEnd);HRESULT ( *GetButtonMode)(IDVDHighlightInfo *This, UINT16 *pMode);HRESULT ( *GetButtonOffset)(IDVDHighlightInfo *This, UINT8 *pbyteOffset);HRESULT ( *GetButtonCount)(IDVDHighlightInfo *This, UINT8 *pbyteCount);HRESULT ( *GetNumberedButtonCount)(IDVDHighlightInfo *This, UINT8 *pbyteCount);HRESULT ( *GetInitialSelectionButton)(IDVDHighlightInfo *This, UINT8 *pInitialSelection);HRESULT ( *GetDefaultActionButton)(IDVDHighlightInfo *This, UINT8 *pActionButton);HRESULT ( *GetButtonColorInfo)(IDVDHighlightInfo *This, UINT8 byteButtonColor, UINT32 *pSelectionColors, UINT32 *pActionColors);HRESULT ( *GetButtonPositionInfo)(IDVDHighlightInfo *This, UINT8 byteButton, BYTE *pbyteButtonColor, UINT8 *pbyteActionMode, DVD_RECT *pArea);HRESULT ( *GetAdjacentButton)(IDVDHighlightInfo *This, UINT8 byteButton, UINT8 byteDir, UINT8 *pbyteButtonNumber);HRESULT ( *GetButtonCommand)(IDVDHighlightInfo *This, UINT8 byteButtonNumber, DVD_NAV_CMD *pCmd);HRESULT ( *GetHLIStatus)(IDVDHighlightInfo *This, UINT16 *pStatus);};
struct IMultiMediaStreamVtbl {HRESULT ( *QueryInterface)(IMultiMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiMediaStream *This);ULONG ( *Release)(IMultiMediaStream *This);HRESULT ( *GetInformation)(IMultiMediaStream *This, DWORD *pdwFlags, STREAM_TYPE *pStreamType);HRESULT ( *GetMediaStream)(IMultiMediaStream *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IMultiMediaStream *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *GetState)(IMultiMediaStream *This, STREAM_STATE *pCurrentState);HRESULT ( *SetState)(IMultiMediaStream *This, STREAM_STATE NewState);HRESULT ( *GetTime)(IMultiMediaStream *This, STREAM_TIME *pCurrentTime);HRESULT ( *GetDuration)(IMultiMediaStream *This, STREAM_TIME *pDuration);HRESULT ( *Seek)(IMultiMediaStream *This, STREAM_TIME SeekTime);HRESULT ( *GetEndOfStreamEventHandle)(IMultiMediaStream *This, HANDLE *phEOS);};
struct IOverlappedStreamVtbl {HRESULT ( *QueryInterface)(IOverlappedStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlappedStream *This);ULONG ( *Release)(IOverlappedStream *This);HRESULT ( *Read)(IOverlappedStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(IOverlappedStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Seek)(IOverlappedStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *SetSize)(IOverlappedStream *This, ULARGE_INTEGER libNewSize);HRESULT ( *CopyTo)(IOverlappedStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT ( *Commit)(IOverlappedStream *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IOverlappedStream *This);HRESULT ( *LockRegion)(IOverlappedStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(IOverlappedStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(IOverlappedStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT ( *Clone)(IOverlappedStream *This, IStream **ppstm);HRESULT ( *ReadOverlapped)(IOverlappedStream *This, void *pv, ULONG cb, ULONG *pcbRead, STGOVERLAPPED *lpOverlapped);HRESULT ( *WriteOverlapped)(IOverlappedStream *This, void *pv, ULONG cb, ULONG *pcbWritten, STGOVERLAPPED *lpOverlapped);HRESULT ( *GetOverlappedResult)(IOverlappedStream *This, STGOVERLAPPED *lpOverlapped, DWORD *plcbTransfer, BOOL fWait);};
struct ICompositeFolderVtbl {HRESULT ( *QueryInterface)(ICompositeFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICompositeFolder *This);ULONG ( *Release)(ICompositeFolder *This);HRESULT ( *InitComposite)(ICompositeFolder *This, WORD wSignature,  CLSID * refclsid, CFINITF flags, ULONG celt,  COMPFOLDERINIT *rgCFs);HRESULT ( *BindToParent)(ICompositeFolder *This, LPCITEMIDLIST pidl,  IID * riid, void **ppv, LPITEMIDLIST *ppidlLast);};
struct ISimpleFrameSiteVtbl {HRESULT ( *QueryInterface)(ISimpleFrameSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISimpleFrameSite *This);ULONG ( *Release)(ISimpleFrameSite *This);HRESULT ( *PreMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD *pdwCookie);HRESULT ( *PostMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD dwCookie);};
struct IColumnProviderVtbl {HRESULT ( *QueryInterface)(IColumnProvider *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IColumnProvider *This);ULONG ( *Release)(IColumnProvider *This);HRESULT ( *Initialize)(IColumnProvider *This, LPCSHCOLUMNINIT psci);HRESULT ( *GetColumnInfo)(IColumnProvider *This, DWORD dwIndex, SHCOLUMNINFO *psci);HRESULT ( *GetItemData)(IColumnProvider *This, LPCSHCOLUMNID pscid, LPCSHCOLUMNDATA pscd, VARIANT *pvarData);};
struct IDVDVideoVolumeVtbl {HRESULT ( *QueryInterface)(IDVDVideoVolume *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDVideoVolume *This);ULONG ( *Release)(IDVDVideoVolume *This);HRESULT ( *InitData)(IDVDVideoVolume *This, IDVDROM *pDisk);HRESULT ( *Lock)(IDVDVideoVolume *This);HRESULT ( *Unlock)(IDVDVideoVolume *This);HRESULT ( *GetSpecVersion)(IDVDVideoVolume *This, UINT16 *pVersion);HRESULT ( *GetCategory)(IDVDVideoVolume *This, UINT32 *pCat);HRESULT ( *GetVolumeSetInfo)(IDVDVideoVolume *This, UINT16 *pVolumeSetSize, UINT16 *pVolumeNo, UINT8 *pSide);HRESULT ( *GetVideoTitleSetsCount)(IDVDVideoVolume *This, UINT16 *pCount);HRESULT ( *GetProviderID)(IDVDVideoVolume *This, DVD_PROVIDER_ID *pProvider);HRESULT ( *GetPOSCode)(IDVDVideoVolume *This, DVD_POS_CODE *pPOSCode);HRESULT ( *GetFirstPlay)(IDVDVideoVolume *This, IDVDDomain **ppDomain);HRESULT ( *GetMenu)(IDVDVideoVolume *This, IDVDMenu **ppMenu);HRESULT ( *GetTotalTitleUnitCount)(IDVDVideoVolume *This, UINT16 *pTTUCount);HRESULT ( *GetTitleUnitInfo)(IDVDVideoVolume *This, UINT16 ttu, DVD_TITLE_SET_INFO *pTUInfo);HRESULT ( *GetTitleSet)(IDVDVideoVolume *This, UINT16 zbVtsn, IDVDTitleSet **ppTitleSet);HRESULT ( *GetTitleSetAttributes)(IDVDVideoVolume *This, UINT16 vtsn, UINT32 *pVTSCategory, IDVDStreamAttributes **ppVideoAttr);HRESULT ( *GetParentalManagementTable)(IDVDVideoVolume *This, IDVDParentalManagementTable **ppTable);HRESULT ( *GetTextDataManager)(IDVDVideoVolume *This, IDVDTextManager **ppTxtMgr);};
struct IElementAdornerVtbl {HRESULT ( *QueryInterface)(IElementAdorner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementAdorner *This);ULONG ( *Release)(IElementAdorner *This);HRESULT ( *Draw)(IElementAdorner *This, HDC hdc, LPRECT prc);HRESULT ( *HitTestPoint)(IElementAdorner *This, POINT *pt, LPRECT prc, BOOL *fResult, ADORNER_HTI *peAdornerHTI);HRESULT ( *GetSize)(IElementAdorner *This, SIZE *pSizeElem, SIZE *pSizeAdorn);HRESULT ( *GetPosition)(IElementAdorner *This, POINT *pPosElem, POINT *pPosAdorn);HRESULT ( *OnPositionSet)(IElementAdorner *This);};
struct IOleInPlaceSiteVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSite *This);ULONG ( *Release)(IOleInPlaceSite *This);HRESULT ( *GetWindow)(IOleInPlaceSite *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnUIActivate)(IOleInPlaceSite *This);HRESULT ( *GetWindowContext)(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSite *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSite *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSite *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSite *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);};
struct _NDIS_WLAN_BSSID_EX {ULONG Length;NDIS_802_11_MAC_ADDRESS MacAddress;UCHAR Reserved[2];NDIS_802_11_SSID Ssid;ULONG Privacy;NDIS_802_11_RSSI Rssi;NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;NDIS_802_11_CONFIGURATION Configuration;NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;NDIS_802_11_RATES_EX SupportedRates;ULONG IELength;UCHAR IEs[1];};
struct IRowsetRefreshVtbl {HRESULT ( *QueryInterface)(IRowsetRefresh *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetRefresh *This);ULONG ( *Release)(IRowsetRefresh *This);HRESULT ( *RefreshVisibleData)(IRowsetRefresh *This, HCHAPTER hChapter, DBCOUNTITEM cRows, HROW  *    rghRows, BOOL fOverWrite, DBCOUNTITEM *pcRowsRefreshed, HROW **prghRowsRefreshed, DBROWSTATUS **prgRowStatus);HRESULT ( *GetLastVisibleData)(IRowsetRefresh *This, HROW hRow, HACCESSOR hAccessor, void *pData);};
struct IMediaSample2Vtbl {HRESULT ( *QueryInterface)(IMediaSample2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSample2 *This);ULONG ( *Release)(IMediaSample2 *This);HRESULT ( *GetPointer)(IMediaSample2 *This, BYTE **ppBuffer);int ( *GetSize)(IMediaSample2 *This);HRESULT ( *GetTime)(IMediaSample2 *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IMediaSample2 *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IMediaSample2 *This);HRESULT ( *SetSyncPoint)(IMediaSample2 *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IMediaSample2 *This);HRESULT ( *SetPreroll)(IMediaSample2 *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IMediaSample2 *This);HRESULT ( *SetActualDataLength)(IMediaSample2 *This, int MIDL_0008);HRESULT ( *GetMediaType)(IMediaSample2 *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IMediaSample2 *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IMediaSample2 *This);HRESULT ( *SetDiscontinuity)(IMediaSample2 *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IMediaSample2 *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IMediaSample2 *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *GetProperties)(IMediaSample2 *This, DWORD cbProperties, BYTE *pbProperties);HRESULT ( *SetProperties)(IMediaSample2 *This, DWORD cbProperties,  BYTE *pbProperties);};
struct IRowsetNotifyVtbl {HRESULT ( *QueryInterface)(IRowsetNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNotify *This);ULONG ( *Release)(IRowsetNotify *This);HRESULT ( *OnFieldChange)(IRowsetNotify *This, IRowset *pRowset, HROW hRow, DBORDINAL cColumns,DBORDINAL  *    rgColumns, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);HRESULT ( *OnRowChange)(IRowsetNotify *This, IRowset *pRowset, DBCOUNTITEM cRows, HROW  *    rghRows, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);HRESULT ( *OnRowsetChange)(IRowsetNotify *This, IRowset *pRowset, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);};
struct IRowsetUpdateVtbl {HRESULT ( *QueryInterface)(IRowsetUpdate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetUpdate *This);ULONG ( *Release)(IRowsetUpdate *This);HRESULT ( *DeleteRows)(IRowsetUpdate *This, HCHAPTER hReserved, DBCOUNTITEM cRows, HROW  *    rghRows, DBROWSTATUS rgRowStatus[]);HRESULT ( *SetData)(IRowsetUpdate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *InsertRow)(IRowsetUpdate *This, HCHAPTER hReserved, HACCESSOR hAccessor, void *pData, HROW *phRow);HRESULT ( *GetOriginalData)(IRowsetUpdate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetPendingRows)(IRowsetUpdate *This, HCHAPTER hReserved, DBPENDINGSTATUS dwRowStatus, DBCOUNTITEM *pcPendingRows, HROW **prgPendingRows, DBPENDINGSTATUS **prgPendingStatus);HRESULT ( *GetRowStatus)(IRowsetUpdate *This, HCHAPTER hReserved, DBCOUNTITEM cRows, HROW  *    rghRows, DBPENDINGSTATUS rgPendingStatus[]);HRESULT ( *Undo)(IRowsetUpdate *This, HCHAPTER hReserved, DBCOUNTITEM cRows, HROW  *    rghRows, DBCOUNTITEM *pcRowsUndone, HROW **prgRowsUndone, DBROWSTATUS **prgRowStatus);HRESULT ( *Update)(IRowsetUpdate *This, HCHAPTER hReserved, DBCOUNTITEM cRows, HROW  *    rghRows, DBCOUNTITEM *pcRows, HROW **prgRows, DBROWSTATUS **prgRowStatus);};
struct _PROPSHEETHEADERA {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous0;LPCSTR pszCaption;UINT nPages;_PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 __anonymous2;_PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 __anonymous3;PFNPROPSHEETCALLBACK pfnCallback;};
struct IMediaParamsVtbl {HRESULT ( *QueryInterface)(IMediaParams *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaParams *This);ULONG ( *Release)(IMediaParams *This);HRESULT ( *GetParam)(IMediaParams *This, DWORD dwParamIndex, MP_DATA *pValue);HRESULT ( *SetParam)(IMediaParams *This, DWORD dwParamIndex, MP_DATA value);HRESULT ( *AddEnvelope)(IMediaParams *This, DWORD dwParamIndex, DWORD cSegments, MP_ENVELOPE_SEGMENT *pEnvelopeSegments);HRESULT ( *FlushEnvelope)(IMediaParams *This, DWORD dwParamIndex, REFERENCE_TIME refTimeStart, REFERENCE_TIME refTimeEnd);HRESULT ( *SetTimeFormat)(IMediaParams *This, GUID guidTimeFormat, MP_TIMEDATA mpTimeData);};
struct IRowsetIndexVtbl {HRESULT ( *QueryInterface)(IRowsetIndex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetIndex *This);ULONG ( *Release)(IRowsetIndex *This);HRESULT ( *GetIndexInfo)(IRowsetIndex *This, DBORDINAL *pcKeyColumns, DBINDEXCOLUMNDESC **prgIndexColumnDesc, ULONG *pcIndexProperties, DBPROPSET **prgIndexProperties);HRESULT ( *Seek)(IRowsetIndex *This, HACCESSOR hAccessor, DBORDINAL cKeyValues, void *pData, DBSEEK dwSeekOptions);HRESULT ( *SetRange)(IRowsetIndex *This, HACCESSOR hAccessor, DBORDINAL cStartKeyColumns, void *pStartData, DBORDINAL cEndKeyColumns, void *pEndData, DBRANGE dwRangeOptions);};
struct _NDIS_WLAN_BSSID {ULONG Length;NDIS_802_11_MAC_ADDRESS MacAddress;UCHAR Reserved[2];NDIS_802_11_SSID Ssid;ULONG Privacy;NDIS_802_11_RSSI Rssi;NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;NDIS_802_11_CONFIGURATION Configuration;NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;NDIS_802_11_RATES SupportedRates;};
struct IImnAccountVtbl {HRESULT ( *QueryInterface)(IImnAccount *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnAccount *This);ULONG ( *Release)(IImnAccount *This);HRESULT ( *GetProp)(IImnAccount *This, DWORD dwPropTag, BYTE *pb, ULONG *pcb);HRESULT ( *GetPropDw)(IImnAccount *This, DWORD dwPropTag, DWORD *pdw);HRESULT ( *GetPropSz)(IImnAccount *This, DWORD dwPropTag, LPSTR psz, ULONG cchMax);HRESULT ( *SetProp)(IImnAccount *This, DWORD dwPropTag, BYTE *pb, ULONG cb);HRESULT ( *SetPropDw)(IImnAccount *This, DWORD dwPropTag, DWORD dw);HRESULT ( *SetPropSz)(IImnAccount *This, DWORD dwPropTag, LPSTR psz);HRESULT ( *Exist)(IImnAccount *This);HRESULT ( *SetAsDefault)(IImnAccount *This);HRESULT ( *Delete)(IImnAccount *This);HRESULT ( *SaveChanges)(IImnAccount *This);HRESULT ( *GetAccountType)(IImnAccount *This, ACCTTYPE *pAcctType);HRESULT ( *GetServerTypes)(IImnAccount *This, DWORD *pdwSrvTypes);HRESULT ( *ShowProperties)(IImnAccount *This, HWND hwnd, DWORD dwFlags);HRESULT ( *ValidateProperty)(IImnAccount *This, DWORD dwPropTag, BYTE *pb, ULONG cb);HRESULT ( *DoWizard)(IImnAccount *This, HWND hwnd, DWORD dwFlags);HRESULT ( *DoImportWizard)(IImnAccount *This, HWND hwnd, CLSID clsid, DWORD dwFlags);};
struct _DDSURFACEDESC2 {DWORD dwSize;DWORD dwFlags;DWORD dwHeight;DWORD dwWidth;_DDSURFACEDESC2___091DBF7D405BE25E65B16620C008128B __anonymous0;_DDSURFACEDESC2___E56E877DD0D4D3B03846BC7047D947ED __anonymous2;_DDSURFACEDESC2___F25F5019EA70F6B9B11866A0D418A260 __anonymous3;DWORD dwAlphaBitDepth;DWORD dwReserved;LPVOID lpSurface;_DDSURFACEDESC2___5B12F1D1A21F9ED7C15CB39448B5A42D __anonymous4;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;_DDSURFACEDESC2___640C42AFF919FFD3058B9E962436B842 __anonymous5;DDSCAPS2 ddsCaps;DWORD dwTextureStage;};
struct _MIDL_STUB_DESC {void *RpcInterfaceInformation;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO; NDR_RUNDOWN *apfnNdrRundownRoutines; GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs; EXPR_EVAL *apfnExprEval; XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple; unsigned char *pFormatTypes;int fCheckBounds;unsigned int Version;MALLOC_FREE_STRUCT *pMallocFreeStruct;int MIDLVersion; COMM_FAULT_OFFSETS *CommFaultOffsets; USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;int Reserved1;int Reserved2;int Reserved3;int Reserved4;int Reserved5;};
struct _PROPSHEETPAGEA {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 __anonymous0;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous1;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;};
typedef LONG (*pRegCreateKeyEx)(HKEY hKey, LPCSTR lpSubKey, DWORD Reserved, LPSTR lpClass, DWORD dwOptions, REGSAM samDesired, LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition);
struct tCardEntryTuple {BYTE ConfigEntryNumber;BYTE DefaultBit;BYTE InterfaceBytePresent;tTPCE_IF IF;tTPCE_FS FS;tTPCE_PD PDVcc;tTPCE_PD PDVpp1;tTPCE_PD PDVpp2;tTPCE_TD TD;tTPCE_IO IO;tTPCE_IR IR;tTPCE_MS MS;tTPCE_MI MI;};
struct tagINPUTCONTEXT {HWND hWnd;BOOL fOpen;DWORD fdwClient;HWND hwndImeInUse;POINT ptStatusWndPos;POINT ptSoftKbdPos;DWORD fdwConversion;DWORD fdwSentence;union tagINPUTCONTEXT___072C26F05A152342D8ECB054BF7B2AA0 lfFont;COMPOSITIONFORM cfCompForm;CANDIDATEFORM cfCandForm[4];HIMCC hCompStr;HIMCC hCandInfo;HIMCC hGuideLine;HIMCC hPrivate;DWORD dwNumMsgBuf;HIMCC hMsgBuf;DWORD fdwInit;DWORD dwReserve[3];UINT uSavedVKey;BOOL fChgMsg;DWORD fdwFlags;DWORD fdw31Compat;DWORD dwRefCount;};
struct IDXSurfaceVtbl {HRESULT ( *QueryInterface)(IDXSurface *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXSurface *This);ULONG ( *Release)(IDXSurface *This);HRESULT ( *GetGenerationId)(IDXSurface *This, ULONG *pID);HRESULT ( *IncrementGenerationId)(IDXSurface *This, BOOL bRefresh);HRESULT ( *GetObjectSize)(IDXSurface *This, ULONG *pcbSize);HRESULT ( *GetPixelFormat)(IDXSurface *This, GUID *pFormatID, DXSAMPLEFORMATENUM *pSampleFormatEnum);HRESULT ( *GetBounds)(IDXSurface *This, DXBNDS *pBounds);HRESULT ( *GetStatusFlags)(IDXSurface *This, DWORD *pdwStatusFlags);HRESULT ( *SetStatusFlags)(IDXSurface *This, DWORD dwStatusFlags);HRESULT ( *LockSurface)(IDXSurface *This,  DXBNDS *pBounds, ULONG ulTimeOut, DWORD dwFlags,  IID * riid, void **ppPointer, ULONG *pulGenerationId);HRESULT ( *GetDirectDrawSurface)(IDXSurface *This,  IID * riid, void **ppSurface);HRESULT ( *GetColorKey)(IDXSurface *This, DXSAMPLE *pColorKey);HRESULT ( *SetColorKey)(IDXSurface *This, DXSAMPLE ColorKey);HRESULT ( *LockSurfaceDC)(IDXSurface *This,  DXBNDS *pBounds, ULONG ulTimeOut, DWORD dwFlags, IDXDCLock **ppDCLock);HRESULT ( *SetAppData)(IDXSurface *This, DWORD_PTR dwAppData);HRESULT ( *GetAppData)(IDXSurface *This, DWORD_PTR *pdwAppData);};
struct IOleCache2Vtbl {HRESULT ( *QueryInterface)(IOleCache2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache2 *This);ULONG ( *Release)(IOleCache2 *This);HRESULT ( *Cache)(IOleCache2 *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache2 *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache2 *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache2 *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache2 *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *UpdateCache)(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);HRESULT ( *DiscardCache)(IOleCache2 *This, DWORD dwDiscardOptions);};
struct IOverlayVtbl {HRESULT ( *QueryInterface)(IOverlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlay *This);ULONG ( *Release)(IOverlay *This);HRESULT ( *GetPalette)(IOverlay *This, DWORD *pdwColors, PALETTEENTRY **ppPalette);HRESULT ( *SetPalette)(IOverlay *This, DWORD dwColors, PALETTEENTRY *pPalette);HRESULT ( *GetDefaultColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *GetColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *SetColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *GetWindowHandle)(IOverlay *This, HWND *pHwnd);HRESULT ( *GetClipList)(IOverlay *This, RECT *pSourceRect, RECT *pDestinationRect, RGNDATA **ppRgnData);HRESULT ( *GetVideoPosition)(IOverlay *This, RECT *pSourceRect, RECT *pDestinationRect);HRESULT ( *Advise)(IOverlay *This, IOverlayNotify *pOverlayNotify, DWORD dwInterests);HRESULT ( *Unadvise)(IOverlay *This);};
struct IFilterVtbl {HRESULT ( *QueryInterface)(IFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilter *This);ULONG ( *Release)(IFilter *This);SCODE ( *Init)(IFilter *This, ULONG grfFlags, ULONG cAttributes,  FULLPROPSPEC *aAttributes, ULONG *pFlags);SCODE ( *GetChunk)(IFilter *This, STAT_CHUNK *pStat);SCODE ( *GetText)(IFilter *This, ULONG *pcwcBuffer, WCHAR *awcBuffer);SCODE ( *GetValue)(IFilter *This, PROPVARIANT **ppPropValue);SCODE ( *BindRegion)(IFilter *This, FILTERREGION origPos,  IID * riid, void **ppunk);};
struct IRowVtbl {HRESULT ( *QueryInterface)(IRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRow *This);ULONG ( *Release)(IRow *This);HRESULT ( *GetColumns)(IRow *This, DBORDINAL cColumns,DBCOLUMNACCESS  *    rgColumns);HRESULT ( *GetSourceRowset)(IRow *This,  IID * riid, IUnknown **ppRowset, HROW *phRow);HRESULT ( *Open)(IRow *This, IUnknown *pUnkOuter, DBID *pColumnID,  GUID * rguidColumnType, DWORD dwBindFlags,  IID * riid, IUnknown **ppUnk);};
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 {SAFEARR_BSTR BstrStr;SAFEARR_UNKNOWN UnknownStr;SAFEARR_DISPATCH DispatchStr;SAFEARR_VARIANT VariantStr;SAFEARR_BRECORD RecordStr;SAFEARR_HAVEIID HaveIidStr;BYTE_SIZEDARR ByteStr;WORD_SIZEDARR WordStr;DWORD_SIZEDARR LongStr;HYPER_SIZEDARR HyperStr;};
struct IOleInPlaceObjectWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObjectWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObjectWindowless *This);ULONG ( *Release)(IOleInPlaceObjectWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceObjectWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObjectWindowless *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *UIDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *SetObjectRects)(IOleInPlaceObjectWindowless *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObjectWindowless *This);HRESULT ( *OnWindowMessage)(IOleInPlaceObjectWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *GetDropTarget)(IOleInPlaceObjectWindowless *This, IDropTarget **ppDropTarget);};
struct IDirectSoundCaptureBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureBuffer *This);ULONG ( *Release)(IDirectSoundCaptureBuffer *This);HRESULT ( *GetCaps)(IDirectSoundCaptureBuffer *This, LPDSCBCAPS);HRESULT ( *GetCurrentPosition)(IDirectSoundCaptureBuffer *This, LPDWORD, LPDWORD);HRESULT ( *GetFormat)(IDirectSoundCaptureBuffer *This, LPWAVEFORMATEX, DWORD, LPDWORD);HRESULT ( *GetStatus)(IDirectSoundCaptureBuffer *This, LPDWORD);HRESULT ( *Initialize)(IDirectSoundCaptureBuffer *This, LPDIRECTSOUNDCAPTURE, LPCDSCBUFFERDESC);HRESULT ( *Lock)(IDirectSoundCaptureBuffer *This, DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD, DWORD);HRESULT ( *Start)(IDirectSoundCaptureBuffer *This, DWORD);HRESULT ( *Stop)(IDirectSoundCaptureBuffer *This);HRESULT ( *Unlock)(IDirectSoundCaptureBuffer *This, LPVOID, DWORD, LPVOID, DWORD);};
struct IDirect3DVolumeTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DVolumeTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DVolumeTexture8 *This);ULONG ( *Release)(IDirect3DVolumeTexture8 *This);HRESULT ( *GetDevice)(IDirect3DVolumeTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DVolumeTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DVolumeTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DVolumeTexture8 *This);void ( *PreLoad)(IDirect3DVolumeTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DVolumeTexture8 *This);DWORD ( *SetLOD)(IDirect3DVolumeTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DVolumeTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DVolumeTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DVolumeTexture8 *This, UINT Level, D3DVOLUME_DESC *pDesc);HRESULT ( *GetVolumeLevel)(IDirect3DVolumeTexture8 *This, UINT Level, IDirect3DVolume8 **ppVolumeLevel);HRESULT ( *LockBox)(IDirect3DVolumeTexture8 *This, UINT Level, D3DLOCKED_BOX *pLockedVolume,  D3DBOX *pBox, DWORD Flags);HRESULT ( *UnlockBox)(IDirect3DVolumeTexture8 *This, UINT Level);HRESULT ( *AddDirtyBox)(IDirect3DVolumeTexture8 *This,  D3DBOX *pDirtyBox);};
struct IHTMLFilterPaintSiteVtbl {HRESULT ( *QueryInterface)(IHTMLFilterPaintSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFilterPaintSite *This);ULONG ( *Release)(IHTMLFilterPaintSite *This);HRESULT ( *DrawUnfiltered)(IHTMLFilterPaintSite *This, HDC hdc, IUnknown *punkDrawObject, RECT rcBounds, RECT rcUpdate, LONG lDrawLayers);HRESULT ( *HitTestPointUnfiltered)(IHTMLFilterPaintSite *This, POINT pt, LONG lDrawLayers, BOOL *pbHit);HRESULT ( *InvalidateRectFiltered)(IHTMLFilterPaintSite *This, RECT *prcInvalid);HRESULT ( *InvalidateRgnFiltered)(IHTMLFilterPaintSite *This, HRGN hrgnInvalid);HRESULT ( *ChangeFilterVisibility)(IHTMLFilterPaintSite *This, BOOL fVisible);HRESULT ( *EnsureViewForFilterSite)(IHTMLFilterPaintSite *This);HRESULT ( *GetDirectDraw)(IHTMLFilterPaintSite *This, void **ppDirectDraw);HRESULT ( *GetFilterFlags)(IHTMLFilterPaintSite *This, DWORD *nFlagVal);};
struct IRowsetCurrentIndexVtbl {HRESULT ( *QueryInterface)(IRowsetCurrentIndex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetCurrentIndex *This);ULONG ( *Release)(IRowsetCurrentIndex *This);HRESULT ( *GetIndexInfo)(IRowsetCurrentIndex *This, DBORDINAL *pcKeyColumns, DBINDEXCOLUMNDESC **prgIndexColumnDesc, ULONG *pcIndexProperties, DBPROPSET **prgIndexProperties);HRESULT ( *Seek)(IRowsetCurrentIndex *This, HACCESSOR hAccessor, DBORDINAL cKeyValues, void *pData, DBSEEK dwSeekOptions);HRESULT ( *SetRange)(IRowsetCurrentIndex *This, HACCESSOR hAccessor, DBORDINAL cStartKeyColumns, void *pStartData, DBORDINAL cEndKeyColumns, void *pEndData, DBRANGE dwRangeOptions);HRESULT ( *GetIndex)(IRowsetCurrentIndex *This, DBID **ppIndexID);HRESULT ( *SetIndex)(IRowsetCurrentIndex *This, DBID *pIndexID);};
struct ISyncMgrSynchronizeVtbl {HRESULT ( *QueryInterface)(ISyncMgrSynchronize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncMgrSynchronize *This);ULONG ( *Release)(ISyncMgrSynchronize *This);HRESULT ( *Initialize)(ISyncMgrSynchronize *This, DWORD dwReserved, DWORD dwSyncMgrFlags, DWORD cbCookie,  BYTE *lpCookie);HRESULT ( *GetHandlerInfo)(ISyncMgrSynchronize *This, LPSYNCMGRHANDLERINFO *ppSyncMgrHandlerInfo);HRESULT ( *EnumSyncMgrItems)(ISyncMgrSynchronize *This, ISyncMgrEnumItems **ppSyncMgrEnumItems);HRESULT ( *GetItemObject)(ISyncMgrSynchronize *This, REFSYNCMGRITEMID ItemID,  IID * riid, void **ppv);HRESULT ( *ShowProperties)(ISyncMgrSynchronize *This, HWND hWndParent, REFSYNCMGRITEMID ItemID);HRESULT ( *SetProgressCallback)(ISyncMgrSynchronize *This, ISyncMgrSynchronizeCallback *lpCallBack);HRESULT ( *PrepareForSync)(ISyncMgrSynchronize *This, ULONG cbNumItems, SYNCMGRITEMID *pItemIDs, HWND hWndParent, DWORD dwReserved);HRESULT ( *Synchronize)(ISyncMgrSynchronize *This, HWND hWndParent);HRESULT ( *SetItemStatus)(ISyncMgrSynchronize *This, REFSYNCMGRITEMID pItemID, DWORD dwSyncMgrStatus);HRESULT ( *ShowError)(ISyncMgrSynchronize *This, HWND hWndParent, REFSYNCMGRERRORID ErrorID);};
struct IDirect3DTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DTexture8 *This);ULONG ( *Release)(IDirect3DTexture8 *This);HRESULT ( *GetDevice)(IDirect3DTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DTexture8 *This);void ( *PreLoad)(IDirect3DTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DTexture8 *This);DWORD ( *SetLOD)(IDirect3DTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DTexture8 *This, UINT Level, D3DSURFACE_DESC *pDesc);HRESULT ( *GetSurfaceLevel)(IDirect3DTexture8 *This, UINT Level, IDirect3DSurface8 **ppSurfaceLevel);HRESULT ( *LockRect)(IDirect3DTexture8 *This, UINT Level, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DTexture8 *This, UINT Level);HRESULT ( *AddDirtyRect)(IDirect3DTexture8 *This,  RECT *pDirtyRect);};
struct IOleInPlaceSiteExVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteEx *This);ULONG ( *Release)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindow)(IOleInPlaceSiteEx *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteEx *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteEx *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteEx *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteEx *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteEx *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteEx *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteEx *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteEx *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteEx *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteEx *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteEx *This);};
union tagIMAP_RESPONSE_DATA {MBOX_MSGCOUNT *pmcMsgCount;DWORD dwDeletedMsgSeqNum;FETCH_BODY_PART *pFetchBodyPart;FETCH_CMD_RESULTS *pFetchResults;IMAP_MSGFLAGS imfImapMessageFlags;DWORD dwUIDValidity;BOOL bReadWrite;IRangeList *prlSearchResults;IMAP_LISTLSUB_RESPONSE illrdMailboxListing;IMAP_STATUS_RESPONSE *pisrStatusResponse;APPEND_PROGRESS *papAppendProgress;FETCH_CMD_RESULTS_EX *pFetchResultsEx;};
struct IBluetoothDeviceVtbl {HRESULT ( *QueryInterface)(IBluetoothDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBluetoothDevice *This);ULONG ( *Release)(IBluetoothDevice *This);HRESULT ( *Initialize)(IBluetoothDevice *This,  BthDeviceInfo *pInfo);HRESULT ( *GetInfo)(IBluetoothDevice *This, BthDeviceInfo *pInfo);HRESULT ( *GetString)(IBluetoothDevice *This, enum BthDeviceStringType type, WCHAR **ppString);HRESULT ( *SetString)(IBluetoothDevice *This, enum BthDeviceStringType type, WCHAR *ppString);HRESULT ( *GetIcon)(IBluetoothDevice *This, int cxRes, int cyRes, HICON *phIcon);HRESULT ( *GetApprovedServices)(IBluetoothDevice *This, GUID *pServices, ULONG *pServiceCount);HRESULT ( *GetPassKey)(IBluetoothDevice *This, HWND hwndParent, UCHAR *pPassKey, UCHAR *pPassKeyLength);};
struct IRowsetCopyRowsVtbl {HRESULT ( *QueryInterface)(IRowsetCopyRows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetCopyRows *This);ULONG ( *Release)(IRowsetCopyRows *This);HRESULT ( *CloseSource)(IRowsetCopyRows *This, HSOURCE hSourceID);HRESULT ( *CopyByHROWS)(IRowsetCopyRows *This, HSOURCE hSourceID, HCHAPTER hReserved, DBROWCOUNT cRows, HROW  *    rghRows, ULONG bFlags);HRESULT ( *CopyRows)(IRowsetCopyRows *This, HSOURCE hSourceID, HCHAPTER hReserved, DBROWCOUNT cRows, ULONG bFlags, DBCOUNTITEM *pcRowsCopied);HRESULT ( *DefineSource)(IRowsetCopyRows *This,  IRowset *pRowsetSource,  DBORDINAL cColIds, DB_LORDINAL  *    rgSourceColumns,  DB_LORDINAL rgTargetColumns[], HSOURCE *phSourceID);};
struct IPersistQueryAVtbl {HRESULT ( *QueryInterface)(IPersistQueryA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPersistQueryA *This);ULONG ( *Release)(IPersistQueryA *This);HRESULT ( *GetClassID)(IPersistQueryA *This, CLSID *pClassID);HRESULT ( *WriteString)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, LPCSTR pValue);HRESULT ( *ReadString)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, LPSTR pBuffer, INT cchBuffer);HRESULT ( *WriteInt)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, INT value);HRESULT ( *ReadInt)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, LPINT pValue);HRESULT ( *WriteStruct)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, LPVOID pStruct, DWORD cbStruct);HRESULT ( *ReadStruct)(IPersistQueryA *This, LPCSTR pSection, LPCSTR pValueName, LPVOID pStruct, DWORD cbStruct);HRESULT ( *Clear)(IPersistQueryA *This);};
struct ISMTPTransportVtbl {HRESULT ( *QueryInterface)(ISMTPTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISMTPTransport *This);ULONG ( *Release)(ISMTPTransport *This);HRESULT ( *GetServerInfo)(ISMTPTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(ISMTPTransport *This);HRESULT ( *IsState)(ISMTPTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(ISMTPTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(ISMTPTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(ISMTPTransport *This);HRESULT ( *Disconnect)(ISMTPTransport *This);HRESULT ( *DropConnection)(ISMTPTransport *This);HRESULT ( *GetStatus)(ISMTPTransport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(ISMTPTransport *This, LPSTR pszLogFilePath, ISMTPCallback *pCallback);HRESULT ( *SendMessageA)(ISMTPTransport *This, LPSMTPMESSAGE pMessage);HRESULT ( *CommandMAIL)(ISMTPTransport *This, LPSTR pszEmailFrom);HRESULT ( *CommandRCPT)(ISMTPTransport *This, LPSTR pszEmailTo);HRESULT ( *CommandEHLO)(ISMTPTransport *This);HRESULT ( *CommandHELO)(ISMTPTransport *This);HRESULT ( *CommandAUTH)(ISMTPTransport *This, LPSTR pszAuthType);HRESULT ( *CommandQUIT)(ISMTPTransport *This);HRESULT ( *CommandRSET)(ISMTPTransport *This);HRESULT ( *CommandDATA)(ISMTPTransport *This);HRESULT ( *CommandDOT)(ISMTPTransport *This);HRESULT ( *SendDataStream)(ISMTPTransport *This, IStream *pStream, ULONG cbSize);};
struct IContextMenu2Vtbl {HRESULT ( *QueryInterface)(IContextMenu2 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu2 *This);ULONG ( *Release)(IContextMenu2 *This);HRESULT ( *QueryContextMenu)(IContextMenu2 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu2 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu2 *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu2 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);};
struct _FAST_IO_DISPATCH {ULONG SizeOfFastIoDispatch;PFAST_IO_CHECK_IF_POSSIBLE FastIoCheckIfPossible;PFAST_IO_READ FastIoRead;PFAST_IO_WRITE FastIoWrite;PFAST_IO_DEVICE_CONTROL FastIoDeviceControl;PFAST_IO_DETACH_DEVICE FastIoDetachDevice;PFAST_IO_MDL_READ MdlRead;PFAST_IO_MDL_READ_COMPLETE MdlReadComplete;PFAST_IO_PREPARE_MDL_WRITE PrepareMdlWrite;PFAST_IO_MDL_WRITE_COMPLETE MdlWriteComplete;};
struct IAsyncReaderVtbl {HRESULT ( *QueryInterface)(IAsyncReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncReader *This);ULONG ( *Release)(IAsyncReader *This);HRESULT ( *RequestAllocator)(IAsyncReader *This, IMemAllocator *pPreferred, ALLOCATOR_PROPERTIES *pProps, IMemAllocator **ppActual);HRESULT ( *Request)(IAsyncReader *This, IMediaSample *pSample, DWORD_PTR dwUser);HRESULT ( *WaitForNext)(IAsyncReader *This, DWORD dwTimeout, IMediaSample **ppSample, DWORD_PTR *pdwUser);HRESULT ( *SyncReadAligned)(IAsyncReader *This, IMediaSample *pSample);HRESULT ( *SyncRead)(IAsyncReader *This, LONGLONG llPosition, LONG lLength, BYTE *pBuffer);HRESULT ( *Length)(IAsyncReader *This, LONGLONG *pTotal, LONGLONG *pAvailable);HRESULT ( *BeginFlush)(IAsyncReader *This);HRESULT ( *EndFlush)(IAsyncReader *This);};
struct IViewObjectVtbl {HRESULT ( *QueryInterface)(IViewObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject *This);ULONG ( *Release)(IViewObject *This);HRESULT ( *Draw)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);};
struct IFontCacheVtbl {HRESULT ( *QueryInterface)(IFontCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontCache *This);ULONG ( *Release)(IFontCache *This);HRESULT ( *Init)(IFontCache *This, HKEY hkey, LPCSTR pszIntlKey, DWORD dwFlags);HRESULT ( *GetFont)(IFontCache *This, FNTSYSTYPE fntType, HCHARSET hCharset, HFONT *phFont);HRESULT ( *OnOptionChange)(IFontCache *This);HRESULT ( *GetJP_ISOControl)(IFontCache *This, BOOL *pfUseSIO);};
struct ITableDataVtbl {HRESULT ( *QueryInterface)(ITableData *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ITableData *This);ULONG ( *Release)(ITableData *This);HRESULT ( *HrGetView)(ITableData *This, LPSSortOrderSet lpSSortOrderSet, CALLERRELEASE *lpfCallerRelease, ULONG ulCallerData, LPMAPITABLE *lppMAPITable);HRESULT ( *HrModifyRow)(ITableData *This, LPSRow);HRESULT ( *HrDeleteRow)(ITableData *This, LPSPropValue lpSPropValue);HRESULT ( *HrQueryRow)(ITableData *This, LPSPropValue lpsPropValue, LPSRow *lppSRow, ULONG *lpuliRow);HRESULT ( *HrEnumRow)(ITableData *This, ULONG ulRowNumber, LPSRow *lppSRow);HRESULT ( *HrNotify)(ITableData *This, ULONG ulFlags, ULONG cValues, LPSPropValue lpSPropValue);HRESULT ( *HrInsertRow)(ITableData *This, ULONG uliRow, LPSRow lpSRow);HRESULT ( *HrModifyRows)(ITableData *This, ULONG ulFlags, LPSRowSet lpSRowSet);HRESULT ( *HrDeleteRows)(ITableData *This, ULONG ulFlags, LPSRowSet lprowsetToDelete, ULONG *cRowsDeleted);};
struct IAccessorVtbl {HRESULT ( *QueryInterface)(IAccessor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessor *This);ULONG ( *Release)(IAccessor *This);HRESULT ( *AddRefAccessor)(IAccessor *This, HACCESSOR hAccessor, DBREFCOUNT *pcRefCount);HRESULT ( *CreateAccessor)(IAccessor *This, DBACCESSORFLAGS dwAccessorFlags, DBCOUNTITEM cBindings, DBBINDING  *    rgBindings, DBLENGTH cbRowSize, HACCESSOR *phAccessor,DBBINDSTATUS  *    rgStatus);HRESULT ( *GetBindings)(IAccessor *This, HACCESSOR hAccessor, DBACCESSORFLAGS *pdwAccessorFlags, DBCOUNTITEM *pcBindings, DBBINDING **prgBindings);HRESULT ( *ReleaseAccessor)(IAccessor *This, HACCESSOR hAccessor, DBREFCOUNT *pcRefCount);};
struct _NSP_ROUTINE {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;LPNSPCLEANUP NSPCleanup;LPNSPLOOKUPSERVICEBEGIN NSPLookupServiceBegin;LPNSPLOOKUPSERVICENEXT NSPLookupServiceNext;LPNSPLOOKUPSERVICEEND NSPLookupServiceEnd;LPNSPSETSERVICE NSPSetService;LPNSPINSTALLSERVICECLASS NSPInstallServiceClass;LPNSPREMOVESERVICECLASS NSPRemoveServiceClass;LPNSPGETSERVICECLASSINFO NSPGetServiceClassInfo;LPNSPIOCTL NSPIoctl;};
struct tagPSDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
union tagHTTPMAILRESPONSE___25469AC23E09BBA79E0FC09E85120BDE {HTTPMAILGETPROP rGetPropInfo;HTTPMAILGET rGetInfo;HTTPMAILPOST rPutInfo;HTTPMAILPOST rPostInfo;HTTPMAILPROPFIND rPropFindInfo;HTTPMAILLOCATION rMkColInfo;HTTPMAILLOCATION rCopyMoveInfo;HTTPMAILBCOPYMOVELIST rBCopyMoveList;HTTPMEMBERINFOLIST rMemberInfoList;HTTPMEMBERERRORLIST rMemberErrorList;HTTPMAILPOST rSendMessageInfo;HTTPCONTACTIDLIST rContactIdList;HTTPCONTACTINFOLIST rContactInfoList;HTTPCONTACTID rPostContactInfo;HTTPCONTACTID rPatchContactInfo;};
union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6 {SComparePropsRestriction resCompareProps;SAndRestriction resAnd;SOrRestriction resOr;SNotRestriction resNot;SContentRestriction resContent;SPropertyRestriction resProperty;SBitMaskRestriction resBitMask;SSizeRestriction resSize;SExistRestriction resExist;SSubRestriction resSub;SCommentRestriction resComment;};
struct _FC03820C0C9B455049C143518E71A23B {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPSTR lpstrGroupNames;DWORD nMaxGroupNames;LPSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPSTR lpstrRdr;DWORD nMaxRdr;LPSTR lpstrCard;DWORD nMaxCard;LPCSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCA lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct IDirect3DCubeTexture8Vtbl {HRESULT ( *QueryInterface)(IDirect3DCubeTexture8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DCubeTexture8 *This);ULONG ( *Release)(IDirect3DCubeTexture8 *This);HRESULT ( *GetDevice)(IDirect3DCubeTexture8 *This, IDirect3DDevice8 **ppDevice);HRESULT ( *SetPrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid,  void *pData, DWORD SizeOfData, DWORD Flags);HRESULT ( *GetPrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid, void *pData, DWORD *pSizeOfData);HRESULT ( *FreePrivateData)(IDirect3DCubeTexture8 *This,  GUID * refguid);DWORD ( *SetPriority)(IDirect3DCubeTexture8 *This, DWORD PriorityNew);DWORD ( *GetPriority)(IDirect3DCubeTexture8 *This);void ( *PreLoad)(IDirect3DCubeTexture8 *This);D3DRESOURCETYPE ( *GetType)(IDirect3DCubeTexture8 *This);DWORD ( *SetLOD)(IDirect3DCubeTexture8 *This, DWORD LODNew);DWORD ( *GetLOD)(IDirect3DCubeTexture8 *This);DWORD ( *GetLevelCount)(IDirect3DCubeTexture8 *This);HRESULT ( *GetLevelDesc)(IDirect3DCubeTexture8 *This, UINT Level, D3DSURFACE_DESC *pDesc);HRESULT ( *GetCubeMapSurface)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level, IDirect3DSurface8 **ppCubeMapSurface);HRESULT ( *LockRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level, D3DLOCKED_RECT *pLockedRect,  RECT *pRect, DWORD Flags);HRESULT ( *UnlockRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType, UINT Level);HRESULT ( *AddDirtyRect)(IDirect3DCubeTexture8 *This, D3DCUBEMAP_FACES FaceType,  RECT *pDirtyRect);};
struct IDXARGBReadWritePtrVtbl {HRESULT ( *QueryInterface)(IDXARGBReadWritePtr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXARGBReadWritePtr *This);ULONG ( *Release)(IDXARGBReadWritePtr *This);HRESULT ( *GetSurface)(IDXARGBReadWritePtr *This,  IID * riid, void **ppSurface);DXSAMPLEFORMATENUM ( *GetNativeType)(IDXARGBReadWritePtr *This, DXNATIVETYPEINFO *pInfo);void ( *Move)(IDXARGBReadWritePtr *This, int cSamples);void ( *MoveToRow)(IDXARGBReadWritePtr *This, ULONG y);void ( *MoveToXY)(IDXARGBReadWritePtr *This, ULONG x, ULONG y);ULONG ( *MoveAndGetRunInfo)(IDXARGBReadWritePtr *This, ULONG Row,  DXRUNINFO **ppInfo);DXSAMPLE *( *Unpack)(IDXARGBReadWritePtr *This, DXSAMPLE *pSamples, ULONG cSamples, BOOL bMove);DXPMSAMPLE *( *UnpackPremult)(IDXARGBReadWritePtr *This, DXPMSAMPLE *pSamples, ULONG cSamples, BOOL bMove);void ( *UnpackRect)(IDXARGBReadWritePtr *This,  DXPACKEDRECTDESC *pRectDesc);void ( *PackAndMove)(IDXARGBReadWritePtr *This,  DXSAMPLE *pSamples, ULONG cSamples);void ( *PackPremultAndMove)(IDXARGBReadWritePtr *This,  DXPMSAMPLE *pSamples, ULONG cSamples);void ( *PackRect)(IDXARGBReadWritePtr *This,  DXPACKEDRECTDESC *pRectDesc);void ( *CopyAndMoveBoth)(IDXARGBReadWritePtr *This, DXBASESAMPLE *pScratchBuffer, IDXARGBReadPtr *pSrc, ULONG cSamples, BOOL bIsOpaque);void ( *CopyRect)(IDXARGBReadWritePtr *This, DXBASESAMPLE *pScratchBuffer,  RECT *pDestRect, IDXARGBReadPtr *pSrc,  POINT *pSrcOrigin, BOOL bIsOpaque);void ( *FillAndMove)(IDXARGBReadWritePtr *This, DXBASESAMPLE *pScratchBuffer, DXPMSAMPLE SampVal, ULONG cSamples, BOOL bDoOver);void ( *FillRect)(IDXARGBReadWritePtr *This,  RECT *pRect, DXPMSAMPLE SampVal, BOOL bDoOver);void ( *OverSample)(IDXARGBReadWritePtr *This,  DXOVERSAMPLEDESC *pOverDesc);void ( *OverArrayAndMove)(IDXARGBReadWritePtr *This, DXBASESAMPLE *pScratchBuffer,  DXPMSAMPLE *pSrc, ULONG cSamples);};
struct IDirectDrawClipperVtbl {HRESULT ( *QueryInterface)(IDirectDrawClipper *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawClipper *This);ULONG ( *Release)(IDirectDrawClipper *This);HRESULT ( *GetClipList)(IDirectDrawClipper *This, LPRECT, LPRGNDATA, LPDWORD);HRESULT ( *GetHWnd)(IDirectDrawClipper *This, HWND *);HRESULT ( *Initialize)(IDirectDrawClipper *This, LPDIRECTDRAW, DWORD);HRESULT ( *IsClipListChanged)(IDirectDrawClipper *This, BOOL *);HRESULT ( *SetClipList)(IDirectDrawClipper *This, LPRGNDATA, DWORD);HRESULT ( *SetHWnd)(IDirectDrawClipper *This, DWORD, HWND);};
struct IRowsetWatchRegionVtbl {HRESULT ( *QueryInterface)(IRowsetWatchRegion *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchRegion *This);ULONG ( *Release)(IRowsetWatchRegion *This);HRESULT ( *Acknowledge)(IRowsetWatchRegion *This);HRESULT ( *Start)(IRowsetWatchRegion *This);HRESULT ( *StopWatching)(IRowsetWatchRegion *This);HRESULT ( *CreateWatchRegion)(IRowsetWatchRegion *This, DBWATCHMODE dwWatchMode, HWATCHREGION *phRegion);HRESULT ( *ChangeWatchMode)(IRowsetWatchRegion *This, HWATCHREGION hRegion, DBWATCHMODE dwWatchMode);HRESULT ( *DeleteWatchRegion)(IRowsetWatchRegion *This, HWATCHREGION hRegion);HRESULT ( *GetWatchRegionInfo)(IRowsetWatchRegion *This, HWATCHREGION hRegion, DBWATCHMODE *pdwWatchMode, HCHAPTER *phChapter, DBBKMARK *pcbBookmark, BYTE **ppBookmark, DBROWCOUNT *pcRows);HRESULT ( *Refresh)(IRowsetWatchRegion *This, DBCOUNTITEM *pcChangesObtained, DBROWWATCHCHANGE **prgChanges);HRESULT ( *ShrinkWatchRegion)(IRowsetWatchRegion *This, HWATCHREGION hRegion, HCHAPTER hChapter, DBBKMARK cbBookmark, BYTE *pBookmark, DBROWCOUNT cRows);};
struct IDVDNavigatorSinkVtbl {HRESULT ( *QueryInterface)(IDVDNavigatorSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDNavigatorSink *This);ULONG ( *Release)(IDVDNavigatorSink *This);HRESULT ( *OnSPRMChange)(IDVDNavigatorSink *This, UINT8 no, UINT16 wValue);HRESULT ( *OnGPRMChange)(IDVDNavigatorSink *This, UINT8 no, UINT16 wValue, BOOL bCounter);HRESULT ( *OnNewProgramChain)(IDVDNavigatorSink *This, IDVDProgramChain *pChain);HRESULT ( *OnNewProgram)(IDVDNavigatorSink *This, UINT8 progNo);HRESULT ( *OnNewCell)(IDVDNavigatorSink *This, UINT8 cellNo);HRESULT ( *OnGOPUserData)(IDVDNavigatorSink *This, DVDUserGOPData *pData);HRESULT ( *OnUOPChange)(IDVDNavigatorSink *This, UINT32 newUOPMask);HRESULT ( *OnPlaybackStateChange)(IDVDNavigatorSink *This, EDDVDPlaybackState eState);HRESULT ( *OnDiskReadError)(IDVDNavigatorSink *This, DWORD osCode);HRESULT ( *ConfirmTemporaryParentalLevel)(IDVDNavigatorSink *This, UINT8 requestedLevel);HRESULT ( *OnNavigationException)(IDVDNavigatorSink *This, EDVDNavException excCode);};
struct IDVDProgramChainVtbl {HRESULT ( *QueryInterface)(IDVDProgramChain *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDProgramChain *This);ULONG ( *Release)(IDVDProgramChain *This);HRESULT ( *GetDomain)(IDVDProgramChain *This, IDVDDomain **ppDomain);HRESULT ( *GetContents)(IDVDProgramChain *This, UINT32 *pContents);HRESULT ( *GetPlaybackTime)(IDVDProgramChain *This, UINT32 *pbcdTime);HRESULT ( *GetUserOperationControlMask)(IDVDProgramChain *This, UINT32 *pmask);HRESULT ( *GetAudioStreamSelector)(IDVDProgramChain *This, UINT8 streamN, UINT16 *pSelector);HRESULT ( *GetSubpictureStreamSelector)(IDVDProgramChain *This, UINT8 streamN, UINT32 *pSPSel);HRESULT ( *GetLink)(IDVDProgramChain *This, EPGCLinkType eType, UINT16 *pgcn);HRESULT ( *GetPlaybackMode)(IDVDProgramChain *This, EPGCPlaybackMode *pMode, UINT8 *pRepeatCount, UINT8 *pStillTime);HRESULT ( *GetSubpicturePalette)(IDVDProgramChain *This, UINT32 *pBuf);HRESULT ( *GetNavCommandsCount)(IDVDProgramChain *This, ENavCmdArea eArea, UINT16 *pCount);HRESULT ( *GetNavCommand)(IDVDProgramChain *This, ENavCmdArea area, UINT16 commandN, DVD_NAV_CMD *pCmd);HRESULT ( *GetProgramEntryCell)(IDVDProgramChain *This, UINT16 pgno, UINT8 *pEntryCN);HRESULT ( *GetCellPlaybackInfo)(IDVDProgramChain *This, UINT8 cn, DVD_CELL_PLAYBACK *pInfo);HRESULT ( *GetCellPosition)(IDVDProgramChain *This, UINT8 cn, UINT16 *pVOB_ID, UINT8 *pC_IDN);HRESULT ( *GetPGCN)(IDVDProgramChain *This, UINT16 *pPGCN);};
struct _CRYPT_PROVIDER_DATA {DWORD cbStruct;WINTRUST_DATA *pWintrustData;BOOL fOpenedFile;HWND hWndParent;GUID *pgActionID;HCRYPTPROV hProv;DWORD dwError;DWORD dwRegSecuritySettings;DWORD dwRegPolicySettings;struct _CRYPT_PROVIDER_FUNCTIONS *psPfns;DWORD cdwTrustStepErrors;DWORD *padwTrustStepErrors;DWORD chStores;HCERTSTORE *pahStores;DWORD dwEncoding;HCRYPTMSG hMsg;DWORD csSigners;struct _CRYPT_PROVIDER_SGNR *pasSigners;DWORD csProvPrivData;struct _CRYPT_PROVIDER_PRIVDATA *pasProvPrivData;DWORD dwSubjectChoice;_CRYPT_PROVIDER_DATA___FE2B7DE956400363F942998E125D9843 __anonymous0;char *pszUsageOID;BOOL fRecallWithState;FILETIME sftSystemTime;char *pszCTLSignerUsageOID;DWORD dwProvFlags;DWORD dwFinalError;PCERT_USAGE_MATCH pRequestUsage;};
struct _tagNotificationItem {ULONG cbSize;LPNOTIFICATION pNotification;NOTIFICATIONTYPE NotificationType;NOTIFICATIONFLAGS NotificationFlags;DELIVERMODE DeliverMode;NOTIFICATIONCOOKIE NotificationCookie;TASK_TRIGGER TaskTrigger;TASK_DATA TaskData;NOTIFICATIONCOOKIE groupCookie;CLSID clsidSender;CLSID clsidDest;FILETIME dateLastRun;FILETIME dateNextRun;DWORD dwNotificationState;};
struct IDisplayPointerVtbl {HRESULT ( *QueryInterface)(IDisplayPointer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDisplayPointer *This);ULONG ( *Release)(IDisplayPointer *This);HRESULT ( *MoveToPoint)(IDisplayPointer *This, POINT ptPoint, COORD_SYSTEM eCoordSystem, IHTMLElement *pElementContext, DWORD dwHitTestOptions, DWORD *pdwHitTestResults);HRESULT ( *MoveUnit)(IDisplayPointer *This, DISPLAY_MOVEUNIT eMoveUnit, LONG lXPos);HRESULT ( *PositionMarkupPointer)(IDisplayPointer *This, IMarkupPointer *pMarkupPointer);HRESULT ( *MoveToPointer)(IDisplayPointer *This, IDisplayPointer *pDispPointer);HRESULT ( *SetPointerGravity)(IDisplayPointer *This, POINTER_GRAVITY eGravity);HRESULT ( *GetPointerGravity)(IDisplayPointer *This, POINTER_GRAVITY *peGravity);HRESULT ( *SetDisplayGravity)(IDisplayPointer *This, DISPLAY_GRAVITY eGravity);HRESULT ( *GetDisplayGravity)(IDisplayPointer *This, DISPLAY_GRAVITY *peGravity);HRESULT ( *IsPositioned)(IDisplayPointer *This, BOOL *pfPositioned);HRESULT ( *Unposition)(IDisplayPointer *This);HRESULT ( *IsEqualTo)(IDisplayPointer *This, IDisplayPointer *pDispPointer, BOOL *pfIsEqual);HRESULT ( *IsLeftOf)(IDisplayPointer *This, IDisplayPointer *pDispPointer, BOOL *pfIsLeftOf);HRESULT ( *IsRightOf)(IDisplayPointer *This, IDisplayPointer *pDispPointer, BOOL *pfIsRightOf);HRESULT ( *IsAtBOL)(IDisplayPointer *This, BOOL *pfBOL);HRESULT ( *MoveToMarkupPointer)(IDisplayPointer *This, IMarkupPointer *pPointer, IDisplayPointer *pDispLineContext);HRESULT ( *ScrollIntoView)(IDisplayPointer *This);HRESULT ( *GetLineInfo)(IDisplayPointer *This, ILineInfo **ppLineInfo);HRESULT ( *GetFlowElement)(IDisplayPointer *This, IHTMLElement **ppLayoutElement);HRESULT ( *QueryBreaks)(IDisplayPointer *This, DWORD *pdwBreaks);};
struct IMLangFontLink2Vtbl {HRESULT ( *QueryInterface)(IMLangFontLink2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangFontLink2 *This);ULONG ( *Release)(IMLangFontLink2 *This);HRESULT ( *GetCharCodePages)(IMLangFontLink2 *This, WCHAR chSrc, DWORD *pdwCodePages);HRESULT ( *GetStrCodePages)(IMLangFontLink2 *This,  WCHAR *pszSrc, int cchSrc, DWORD dwPriorityCodePages, DWORD *pdwCodePages, int *pcchCodePages);HRESULT ( *CodePageToCodePages)(IMLangFontLink2 *This, UINT uCodePage, DWORD *pdwCodePages);HRESULT ( *CodePagesToCodePage)(IMLangFontLink2 *This, DWORD dwCodePages, UINT uDefaultCodePage, UINT *puCodePage);HRESULT ( *GetFontCodePages)(IMLangFontLink2 *This, HDC hDC, HFONT hFont, DWORD *pdwCodePages);HRESULT ( *ReleaseFont)(IMLangFontLink2 *This, HFONT hFont);HRESULT ( *ResetFontMapping)(IMLangFontLink2 *This);HRESULT ( *MapFont)(IMLangFontLink2 *This, HDC hDC, DWORD dwCodePages, WCHAR chSrc, HFONT *pFont);HRESULT ( *GetFontUnicodeRanges)(IMLangFontLink2 *This, HDC hDC, UINT *puiRanges, UNICODERANGE *pUranges);HRESULT ( *GetScriptFontInfo)(IMLangFontLink2 *This, SCRIPT_ID sid, DWORD dwFlags, UINT *puiFonts, SCRIPTFONTINFO *pScriptFont);HRESULT ( *CodePageToScriptID)(IMLangFontLink2 *This, UINT uiCodePage, SCRIPT_ID *pSid);};
struct IInstallEngineVtbl {HRESULT ( *QueryInterface)(IInstallEngine *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallEngine *This);ULONG ( *Release)(IInstallEngine *This);HRESULT ( *GetEngineStatus)(IInstallEngine *This, DWORD *theenginestatus);HRESULT ( *SetCifFile)(IInstallEngine *This, LPCSTR pszCabName, LPCSTR pszCifName);HRESULT ( *DownloadComponents)(IInstallEngine *This, DWORD dwFlags);HRESULT ( *InstallComponents)(IInstallEngine *This, DWORD dwFlags);HRESULT ( *EnumInstallIDs)(IInstallEngine *This, UINT uIndex, LPSTR *ppszID);HRESULT ( *EnumDownloadIDs)(IInstallEngine *This, UINT uIndex, LPSTR *ppszID);HRESULT ( *IsComponentInstalled)(IInstallEngine *This, LPCSTR pszID, DWORD *pdwStatus);HRESULT ( *RegisterInstallEngineCallback)(IInstallEngine *This, IInstallEngineCallback *pcb);HRESULT ( *UnregisterInstallEngineCallback)(IInstallEngine *This);HRESULT ( *SetAction)(IInstallEngine *This, LPCSTR pszID, DWORD dwAction, DWORD dwPriority);HRESULT ( *GetSizes)(IInstallEngine *This, LPCSTR pszID, COMPONENT_SIZES *pSizes);HRESULT ( *LaunchExtraCommand)(IInstallEngine *This, LPCSTR pszInfName, LPCSTR pszSection);HRESULT ( *GetDisplayName)(IInstallEngine *This, LPCSTR pszID, LPSTR *ppszName);HRESULT ( *SetBaseUrl)(IInstallEngine *This, LPCSTR pszBaseName);HRESULT ( *SetDownloadDir)(IInstallEngine *This, LPCSTR pszDownloadDir);HRESULT ( *SetInstallDrive)(IInstallEngine *This, CHAR chDrive);HRESULT ( *SetInstallOptions)(IInstallEngine *This, DWORD dwInsFlag);HRESULT ( *SetHWND)(IInstallEngine *This, HWND hForUI);HRESULT ( *SetIStream)(IInstallEngine *This, IStream *pstm);HRESULT ( *Abort)(IInstallEngine *This, DWORD dwFlags);HRESULT ( *Suspend)(IInstallEngine *This);HRESULT ( *Resume)(IInstallEngine *This);};
struct IMimeAllocatorVtbl {HRESULT ( *QueryInterface)(IMimeAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeAllocator *This);ULONG ( *Release)(IMimeAllocator *This);void *( *Alloc)(IMimeAllocator *This, ULONG cb);void *( *Realloc)(IMimeAllocator *This, void *pv, ULONG cb);void ( *Free)(IMimeAllocator *This, void *pv);ULONG ( *GetSize)(IMimeAllocator *This, void *pv);int ( *DidAlloc)(IMimeAllocator *This, void *pv);void ( *HeapMinimize)(IMimeAllocator *This);HRESULT ( *FreeParamInfoArray)(IMimeAllocator *This, ULONG cParams, LPMIMEPARAMINFO prgParam, boolean fFreeArray);HRESULT ( *FreeAddressList)(IMimeAllocator *This, LPADDRESSLIST pList);HRESULT ( *FreeAddressProps)(IMimeAllocator *This, LPADDRESSPROPS pAddress);HRESULT ( *ReleaseObjects)(IMimeAllocator *This, ULONG cObjects, IUnknown **prgpUnknown, boolean fFreeArray);HRESULT ( *FreeEnumHeaderRowArray)(IMimeAllocator *This, ULONG cRows, LPENUMHEADERROW prgRow, boolean fFreeArray);HRESULT ( *FreeEnumPropertyArray)(IMimeAllocator *This, ULONG cProps, LPENUMPROPERTY prgProp, boolean fFreeArray);HRESULT ( *FreeThumbprint)(IMimeAllocator *This, THUMBBLOB *pthumbprint);HRESULT ( *PropVariantClear)(IMimeAllocator *This, LPPROPVARIANT pProp);};
struct IContextMenu3Vtbl {HRESULT ( *QueryInterface)(IContextMenu3 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IContextMenu3 *This);ULONG ( *Release)(IContextMenu3 *This);HRESULT ( *QueryContextMenu)(IContextMenu3 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu3 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu3 *This, UINT_PTR idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *HandleMenuMsg2)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct IHTMLPainterVtbl {HRESULT ( *QueryInterface)(IHTMLPainter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPainter *This);ULONG ( *Release)(IHTMLPainter *This);HRESULT ( *Draw)(IHTMLPainter *This, RECT rcBounds, RECT rcUpdate, LONG lDrawFlags, HDC hdc, LPVOID pvDrawObject);HRESULT ( *OnResize)(IHTMLPainter *This, SIZE size);HRESULT ( *GetPainterInfo)(IHTMLPainter *This, HTML_PAINTER_INFO *pInfo);HRESULT ( *HitTestPoint)(IHTMLPainter *This, POINT pt, BOOL *pbHit, LONG *plPartID);};
struct IViewObject2Vtbl {HRESULT ( *QueryInterface)(IViewObject2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject2 *This);ULONG ( *Release)(IViewObject2 *This);HRESULT ( *Draw)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject2 *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject2 *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);};
struct IShellLinkAVtbl {HRESULT ( *QueryInterface)(IShellLinkA *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellLinkA *This);ULONG ( *Release)(IShellLinkA *This);HRESULT ( *GetPath)(IShellLinkA *This, LPSTR pszFile, int cchMaxPath, WIN32_FIND_DATAA *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkA *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkA *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkA *This, LPSTR pszName, int cchMaxName);HRESULT ( *SetDescription)(IShellLinkA *This, LPCSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkA *This, LPSTR pszDir, int cchMaxPath);HRESULT ( *SetWorkingDirectory)(IShellLinkA *This, LPCSTR pszDir);HRESULT ( *GetArguments)(IShellLinkA *This, LPSTR pszArgs, int cchMaxPath);HRESULT ( *SetArguments)(IShellLinkA *This, LPCSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkA *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkA *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkA *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkA *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkA *This, LPSTR pszIconPath, int cchIconPath, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkA *This, LPCSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkA *This, LPCSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkA *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkA *This, LPCSTR pszFile);};
struct IWABOBJECT_Vtbl {HRESULT ( *QueryInterface)(struct _IWABOBJECT *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(struct _IWABOBJECT *This);ULONG ( *Release)(struct _IWABOBJECT *This);HRESULT ( *GetLastError)(struct _IWABOBJECT *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *AllocateBuffer)(struct _IWABOBJECT *This, ULONG cbSize, LPVOID *lppBuffer);HRESULT ( *AllocateMore)(struct _IWABOBJECT *This, ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);HRESULT ( *FreeBuffer)(struct _IWABOBJECT *This, LPVOID lpBuffer);HRESULT ( *Backup)(struct _IWABOBJECT *This, LPSTR lpFileName);HRESULT ( *Import)(struct _IWABOBJECT *This, LPSTR lpImportParam);HRESULT ( *Find)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd);HRESULT ( *VCardDisplay)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd, LPSTR lpszFileName);HRESULT ( *LDAPUrl)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, HWND hWnd, ULONG ulFlags, LPSTR lpszURL, LPMAILUSER *lppMailUser);HRESULT ( *VCardCreate)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER lpMailUser);HRESULT ( *VCardRetrieve)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER *lppMailUser);HRESULT ( *GetMe)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, DWORD *lpdwAction, SBinary *lpsbEID, ULONG ulParam);HRESULT ( *SetMe)(struct _IWABOBJECT *This, LPADRBOOK lpIAB, ULONG ulFlags, SBinary sbEID, ULONG ulParam);};
struct IFsCiAdminVtbl {HRESULT ( *QueryInterface)(IFsCiAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFsCiAdmin *This);ULONG ( *Release)(IFsCiAdmin *This);SCODE ( *ForceMerge)(IFsCiAdmin *This, PARTITIONID partId);SCODE ( *AbortMerge)(IFsCiAdmin *This, PARTITIONID partId);SCODE ( *CiState)(IFsCiAdmin *This, CI_STATE *pCiState);SCODE ( *UpdateDocuments)(IFsCiAdmin *This,  WCHAR *rootPath, ULONG flag);SCODE ( *AddScopeToCI)(IFsCiAdmin *This,  WCHAR *rootPath);SCODE ( *RemoveScopeFromCI)(IFsCiAdmin *This,  WCHAR *rootPath);SCODE ( *BeginCacheTransaction)(IFsCiAdmin *This, ULONG_PTR *pulToken);SCODE ( *SetupCache)(IFsCiAdmin *This,  FULLPROPSPEC *ps, ULONG vt, ULONG cbMaxLen, ULONG_PTR ulToken, BOOL fCanBeModified, DWORD dwStoreLevel);SCODE ( *EndCacheTransaction)(IFsCiAdmin *This, ULONG_PTR ulToken, BOOL fCommit);};
struct IWABObjectVtbl {HRESULT ( *QueryInterface)(IWABObject *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IWABObject *This);ULONG ( *Release)(IWABObject *This);HRESULT ( *GetLastError)(IWABObject *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *AllocateBuffer)(IWABObject *This, ULONG cbSize, LPVOID *lppBuffer);HRESULT ( *AllocateMore)(IWABObject *This, ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);HRESULT ( *FreeBuffer)(IWABObject *This, LPVOID lpBuffer);HRESULT ( *Backup)(IWABObject *This, LPSTR lpFileName);HRESULT ( *Import)(IWABObject *This, LPSTR lpImportParam);HRESULT ( *Find)(IWABObject *This, LPADRBOOK lpIAB, HWND hWnd);HRESULT ( *VCardDisplay)(IWABObject *This, LPADRBOOK lpIAB, HWND hWnd, LPSTR lpszFileName);HRESULT ( *LDAPUrl)(IWABObject *This, LPADRBOOK lpIAB, HWND hWnd, ULONG ulFlags, LPSTR lpszURL, LPMAILUSER *lppMailUser);HRESULT ( *VCardCreate)(IWABObject *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER lpMailUser);HRESULT ( *VCardRetrieve)(IWABObject *This, LPADRBOOK lpIAB, ULONG ulFlags, LPSTR lpszVCard, LPMAILUSER *lppMailUser);HRESULT ( *GetMe)(IWABObject *This, LPADRBOOK lpIAB, ULONG ulFlags, DWORD *lpdwAction, SBinary *lpsbEID, ULONG ulParam);HRESULT ( *SetMe)(IWABObject *This, LPADRBOOK lpIAB, ULONG ulFlags, SBinary sbEID, ULONG ulParam);};
struct IReadDataVtbl {HRESULT ( *QueryInterface)(IReadData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReadData *This);ULONG ( *Release)(IReadData *This);HRESULT ( *ReadData)(IReadData *This, HCHAPTER hChapter, DBBKMARK cbBookmark,  BYTE *pBookmark, DBROWOFFSET lRowsOffset, HACCESSOR hAccessor, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, BYTE **ppFixedData, DBLENGTH *pcbVariableTotal, BYTE **ppVariableData);HRESULT ( *ReleaseChapter)(IReadData *This, HCHAPTER hChapter);};
struct tagDBBINDING {DBORDINAL iOrdinal;DBBYTEOFFSET obValue;DBBYTEOFFSET obLength;DBBYTEOFFSET obStatus;ITypeInfo *pTypeInfo;DBOBJECT *pObject;DBBINDEXT *pBindExt;DBPART dwPart;DBMEMOWNER dwMemOwner;DBPARAMIO eParamIO;DBLENGTH cbMaxLen;DWORD dwFlags;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
union _8474248025A8750E00C60BF8466F1484___374EDF0D25A28277CD19F16CB81F0F1E {_FP32 Fp32Value;_FP64 Fp64Value;_FP80 Fp80Value;_FP128 Fp128Value;_I16 I16Value;_I32 I32Value;_I64 I64Value;_U16 U16Value;_U32 U32Value;_U64 U64Value;_BCD80 Bcd80Value;char *StringValue;int CompareValue;_U32ARRAY U32ArrayValue;};
struct IDDVideoPortContainerVtbl {HRESULT ( *QueryInterface)(IDDVideoPortContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDDVideoPortContainer *This);ULONG ( *Release)(IDDVideoPortContainer *This);HRESULT ( *CreateVideoPort)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTDESC, LPDIRECTDRAWVIDEOPORT *, IUnknown *);HRESULT ( *EnumVideoPorts)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTCAPS, LPVOID, LPDDENUMVIDEOCALLBACK);HRESULT ( *GetVideoPortConnectInfo)(IDDVideoPortContainer *This, DWORD, LPDWORD, LPDDVIDEOPORTCONNECT);HRESULT ( *QueryVideoPortStatus)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTSTATUS);};
struct IDirectDrawVideoPortVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideoPort *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideoPort *This);ULONG ( *Release)(IDirectDrawVideoPort *This);HRESULT ( *Flip)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetBandwidthInfo)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, DWORD, DWORD, DWORD, LPDDVIDEOPORTBANDWIDTH);HRESULT ( *GetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *GetInputFormats)(IDirectDrawVideoPort *This, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetOutputFormats)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetFieldPolarity)(IDirectDrawVideoPort *This, LPBOOL);HRESULT ( *GetVideoLine)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *GetVideoSignalStatus)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *SetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *SetTargetSurface)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *StartVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *StopVideo)(IDirectDrawVideoPort *This);HRESULT ( *UpdateVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *WaitForSync)(IDirectDrawVideoPort *This, DWORD, DWORD, DWORD);};
struct IAMMediaTypeSampleVtbl {HRESULT ( *QueryInterface)(IAMMediaTypeSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaTypeSample *This);ULONG ( *Release)(IAMMediaTypeSample *This);HRESULT ( *GetMediaStream)(IAMMediaTypeSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IAMMediaTypeSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IAMMediaTypeSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IAMMediaTypeSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IAMMediaTypeSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *SetPointer)(IAMMediaTypeSample *This, BYTE *pBuffer, int lSize);HRESULT ( *GetPointer)(IAMMediaTypeSample *This, BYTE **ppBuffer);int ( *GetSize)(IAMMediaTypeSample *This);HRESULT ( *GetTime)(IAMMediaTypeSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IAMMediaTypeSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IAMMediaTypeSample *This);HRESULT ( *SetSyncPoint)(IAMMediaTypeSample *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IAMMediaTypeSample *This);HRESULT ( *SetPreroll)(IAMMediaTypeSample *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IAMMediaTypeSample *This);HRESULT ( *SetActualDataLength)(IAMMediaTypeSample *This, int MIDL_0017);HRESULT ( *GetMediaType)(IAMMediaTypeSample *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IAMMediaTypeSample *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IAMMediaTypeSample *This);HRESULT ( *SetDiscontinuity)(IAMMediaTypeSample *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IAMMediaTypeSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IAMMediaTypeSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);};
struct IImnAccountManagerVtbl {HRESULT ( *QueryInterface)(IImnAccountManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnAccountManager *This);ULONG ( *Release)(IImnAccountManager *This);HRESULT ( *Init)(IImnAccountManager *This, IImnAdviseMigrateServer *pAdviseMigrateServer);HRESULT ( *CreateAccountObject)(IImnAccountManager *This, ACCTTYPE AcctType, IImnAccount **ppAccount);HRESULT ( *Enumerate)(IImnAccountManager *This, DWORD dwSrvTypes, IImnEnumAccounts **ppEnumAccounts);HRESULT ( *GetAccountCount)(IImnAccountManager *This, ACCTTYPE AcctType, ULONG *pcServers);HRESULT ( *FindAccount)(IImnAccountManager *This, DWORD dwPropTag, LPCSTR pszSearchData, IImnAccount **ppAccount);HRESULT ( *GetDefaultAccount)(IImnAccountManager *This, ACCTTYPE AcctType, IImnAccount **ppAccount);HRESULT ( *GetDefaultAccountName)(IImnAccountManager *This, ACCTTYPE AcctType, LPSTR pszAccount, ULONG cchMax);HRESULT ( *ProcessNotification)(IImnAccountManager *This, UINT uMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *ValidateDefaultSendAccount)(IImnAccountManager *This);HRESULT ( *AccountListDialog)(IImnAccountManager *This, HWND hwnd, ACCTLISTINFO *pinfo);HRESULT ( *Advise)(IImnAccountManager *This, IImnAdviseAccount *pAdviseAccount, DWORD *pdwConnection);HRESULT ( *Unadvise)(IImnAccountManager *This, DWORD dwConnection);HRESULT ( *GetUniqueAccountName)(IImnAccountManager *This, LPSTR szName, UINT cch);HRESULT ( *InitEx)(IImnAccountManager *This, IImnAdviseMigrateServer *pAdviseMigrateServer, DWORD dwFlags);};
struct IMimeAddressTableVtbl {HRESULT ( *QueryInterface)(IMimeAddressTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeAddressTable *This);ULONG ( *Release)(IMimeAddressTable *This);HRESULT ( *Append)(IMimeAddressTable *This, DWORD dwAdrType, ENCODINGTYPE ietFriendly, LPCSTR pszFriendly, LPCSTR pszEmail, LPHADDRESS phAddress);HRESULT ( *Insert)(IMimeAddressTable *This, LPADDRESSPROPS pAddress, LPHADDRESS phAddress);HRESULT ( *SetProps)(IMimeAddressTable *This, HADDRESS hAddress, LPADDRESSPROPS pAddress);HRESULT ( *GetProps)(IMimeAddressTable *This, HADDRESS hAddress, LPADDRESSPROPS pAddress);HRESULT ( *GetSender)(IMimeAddressTable *This, LPADDRESSPROPS pAddress);HRESULT ( *CountTypes)(IMimeAddressTable *This, DWORD dwAdrTypes, ULONG *pcAdrs);HRESULT ( *GetTypes)(IMimeAddressTable *This, DWORD dwAdrTypes, DWORD dwProps, LPADDRESSLIST pList);HRESULT ( *EnumTypes)(IMimeAddressTable *This, DWORD dwAdrTypes, DWORD dwProps, IMimeEnumAddressTypes **ppEnum);HRESULT ( *Delete)(IMimeAddressTable *This, HADDRESS hAddress);HRESULT ( *DeleteTypes)(IMimeAddressTable *This, DWORD dwAdrTypes);HRESULT ( *GetFormat)(IMimeAddressTable *This, DWORD dwAdrType, ADDRESSFORMAT format, LPSTR *ppszFormat);HRESULT ( *AppendRfc822)(IMimeAddressTable *This, DWORD dwAdrType, ENCODINGTYPE ietEncoding, LPCSTR pszRfc822Adr);HRESULT ( *ParseRfc822)(IMimeAddressTable *This, DWORD dwAdrType, ENCODINGTYPE ietEncoding, LPCSTR pszRfc822Adr, LPADDRESSLIST pList);HRESULT ( *Clone)(IMimeAddressTable *This, IMimeAddressTable **ppTable);HRESULT ( *BindToObject)(IMimeAddressTable *This,  IID * riid, void **ppvObject);};
struct ISMTPTransport2Vtbl {HRESULT ( *QueryInterface)(ISMTPTransport2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISMTPTransport2 *This);ULONG ( *Release)(ISMTPTransport2 *This);HRESULT ( *GetServerInfo)(ISMTPTransport2 *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(ISMTPTransport2 *This);HRESULT ( *IsState)(ISMTPTransport2 *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(ISMTPTransport2 *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(ISMTPTransport2 *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(ISMTPTransport2 *This);HRESULT ( *Disconnect)(ISMTPTransport2 *This);HRESULT ( *DropConnection)(ISMTPTransport2 *This);HRESULT ( *GetStatus)(ISMTPTransport2 *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(ISMTPTransport2 *This, LPSTR pszLogFilePath, ISMTPCallback *pCallback);HRESULT ( *SendMessageA)(ISMTPTransport2 *This, LPSMTPMESSAGE pMessage);HRESULT ( *CommandMAIL)(ISMTPTransport2 *This, LPSTR pszEmailFrom);HRESULT ( *CommandRCPT)(ISMTPTransport2 *This, LPSTR pszEmailTo);HRESULT ( *CommandEHLO)(ISMTPTransport2 *This);HRESULT ( *CommandHELO)(ISMTPTransport2 *This);HRESULT ( *CommandAUTH)(ISMTPTransport2 *This, LPSTR pszAuthType);HRESULT ( *CommandQUIT)(ISMTPTransport2 *This);HRESULT ( *CommandRSET)(ISMTPTransport2 *This);HRESULT ( *CommandDATA)(ISMTPTransport2 *This);HRESULT ( *CommandDOT)(ISMTPTransport2 *This);HRESULT ( *SendDataStream)(ISMTPTransport2 *This, IStream *pStream, ULONG cbSize);HRESULT ( *SetWindow)(ISMTPTransport2 *This);HRESULT ( *ResetWindow)(ISMTPTransport2 *This);HRESULT ( *SendMessage2)(ISMTPTransport2 *This, LPSMTPMESSAGE2 pMessage);HRESULT ( *CommandRCPT2)(ISMTPTransport2 *This, LPSTR pszEmailTo, INETADDRTYPE atDSN);};
struct IPOP3TransportVtbl {HRESULT ( *QueryInterface)(IPOP3Transport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPOP3Transport *This);ULONG ( *Release)(IPOP3Transport *This);HRESULT ( *GetServerInfo)(IPOP3Transport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IPOP3Transport *This);HRESULT ( *IsState)(IPOP3Transport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IPOP3Transport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IPOP3Transport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IPOP3Transport *This);HRESULT ( *Disconnect)(IPOP3Transport *This);HRESULT ( *DropConnection)(IPOP3Transport *This);HRESULT ( *GetStatus)(IPOP3Transport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(IPOP3Transport *This, LPSTR pszLogFilePath, IPOP3Callback *pCallback);HRESULT ( *MarkItem)(IPOP3Transport *This, POP3MARKTYPE marktype, DWORD dwPopId, boolean fMarked);HRESULT ( *CommandAUTH)(IPOP3Transport *This, LPSTR pszAuthType);HRESULT ( *CommandUSER)(IPOP3Transport *This, LPSTR pszUserName);HRESULT ( *CommandPASS)(IPOP3Transport *This, LPSTR pszPassword);HRESULT ( *CommandLIST)(IPOP3Transport *This, POP3CMDTYPE cmdtype, DWORD dwPopId);HRESULT ( *CommandTOP)(IPOP3Transport *This, POP3CMDTYPE cmdtype, DWORD dwPopId, DWORD cPreviewLines);HRESULT ( *CommandQUIT)(IPOP3Transport *This);HRESULT ( *CommandSTAT)(IPOP3Transport *This);HRESULT ( *CommandNOOP)(IPOP3Transport *This);HRESULT ( *CommandRSET)(IPOP3Transport *This);HRESULT ( *CommandUIDL)(IPOP3Transport *This, POP3CMDTYPE cmdtype, DWORD dwPopId);HRESULT ( *CommandDELE)(IPOP3Transport *This, POP3CMDTYPE cmdtype, DWORD dwPopId);HRESULT ( *CommandRETR)(IPOP3Transport *This, POP3CMDTYPE cmdtype, DWORD dwPopId);};
struct IMimeSecurityVtbl {HRESULT ( *QueryInterface)(IMimeSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeSecurity *This);ULONG ( *Release)(IMimeSecurity *This);HRESULT ( *InitNew)(IMimeSecurity *This);HRESULT ( *CheckInit)(IMimeSecurity *This);HRESULT ( *EncodeMessage)(IMimeSecurity *This, IMimeMessageTree * pTree, DWORD dwFlags);HRESULT ( *EncodeBody)(IMimeSecurity *This, IMimeMessageTree * pTree, HBODY hEncodeRoot, DWORD dwFlags);HRESULT ( *DecodeMessage)(IMimeSecurity *This, IMimeMessageTree * pTree, DWORD dwFlags);HRESULT ( *DecodeBody)(IMimeSecurity *This, IMimeMessageTree * pTree, HBODY hDecodeRoot, DWORD dwFlags);HRESULT ( *EnumCertificates)(IMimeSecurity *This, HCAPICERTSTORE hc, DWORD dwUsage, PCX509CERT pPrev, PCX509CERT *ppCert);HRESULT ( *GetCertificateName)(IMimeSecurity *This,  PCX509CERT pX509Cert,  CERTNAMETYPE cn, LPSTR *ppszName);HRESULT ( *GetMessageType)(IMimeSecurity *This,  HWND hwndParent, IMimeBody * pBody, DWORD * pdwSecType);HRESULT ( *GetCertData)(IMimeSecurity *This,  PCX509CERT pX509Cert,  CERTDATAID dataid, LPPROPVARIANT pValue);};
struct IRASTransportVtbl {HRESULT ( *QueryInterface)(IRASTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRASTransport *This);ULONG ( *Release)(IRASTransport *This);HRESULT ( *GetServerInfo)(IRASTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IRASTransport *This);HRESULT ( *IsState)(IRASTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IRASTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IRASTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IRASTransport *This);HRESULT ( *Disconnect)(IRASTransport *This);HRESULT ( *DropConnection)(IRASTransport *This);HRESULT ( *GetStatus)(IRASTransport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(IRASTransport *This, IRASCallback *pCallback);HRESULT ( *GetCurrentConnectoid)(IRASTransport *This, LPSTR pszConnectoid, ULONG cchMax);HRESULT ( *GetRasErrorString)(IRASTransport *This, UINT uRasErrorValue, LPSTR pszErrorString, ULONG cchMax, DWORD *pdwRASResult);HRESULT ( *FillConnectoidCombo)(IRASTransport *This, HWND hwndComboBox, boolean fUpdateOnly, DWORD *pdwRASResult);HRESULT ( *EditConnectoid)(IRASTransport *This, HWND hwndParent, LPSTR pszConnectoid, DWORD *pdwRASResult);HRESULT ( *CreateConnectoid)(IRASTransport *This, HWND hwndParent, DWORD *pdwRASResult);};
struct IDirectSoundVtbl {HRESULT ( *QueryInterface)(IDirectSound *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound *This);ULONG ( *Release)(IDirectSound *This);HRESULT ( *CreateSoundBuffer)(IDirectSound *This, LPCDSBUFFERDESC, LPDIRECTSOUNDBUFFER *, LPUNKNOWN);HRESULT ( *GetCaps)(IDirectSound *This, LPDSCAPS);HRESULT ( *DuplicateSoundBuffer)(IDirectSound *This, LPDIRECTSOUNDBUFFER, LPDIRECTSOUNDBUFFER *);HRESULT ( *SetCooperativeLevel)(IDirectSound *This, HWND, DWORD);HRESULT ( *Compact)(IDirectSound *This);HRESULT ( *GetSpeakerConfig)(IDirectSound *This, LPDWORD);HRESULT ( *SetSpeakerConfig)(IDirectSound *This, DWORD);HRESULT ( *Initialize)(IDirectSound *This, LPGUID);};
struct IRowsetFindVtbl {HRESULT ( *QueryInterface)(IRowsetFind *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetFind *This);ULONG ( *Release)(IRowsetFind *This);HRESULT ( *FindNextRow)(IRowsetFind *This, HCHAPTER hChapter, HACCESSOR hAccessor, void *pFindValue, DBCOMPAREOP CompareOp, DBBKMARK cbBookmark,  BYTE *pBookmark, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);};
union NodeDataUnion {SDP_LARGE_INTEGER_16 int128;SDP_ULARGE_INTEGER_16 uint128;GUID uuid128;ULONG uuid32;USHORT uuid16;LONGLONG int64;ULONGLONG uint64;LONG int32;ULONG uint32;SHORT int16;USHORT uint16;CHAR int8;UCHAR uint8;UCHAR booleanVal;SdpString str;SdpString url;ISdpNodeContainer *container;};
struct IRowsetVtbl {HRESULT ( *QueryInterface)(IRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowset *This);ULONG ( *Release)(IRowset *This);HRESULT ( *AddRefRows)(IRowset *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBREFCOUNT rgRefCounts[],DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowset *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowset *This, HCHAPTER hReserved, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowset *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBROWOPTIONS rgRowOptions[],DBREFCOUNT  *    rgRefCounts, DBROWSTATUS rgRowStatus[]);HRESULT ( *RestartPosition)(IRowset *This, HCHAPTER hReserved);};
union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF {LPVOID lpv;LPDTBLLABEL lplabel;LPDTBLEDIT lpedit;LPDTBLLBX lplbx;LPDTBLCOMBOBOX lpcombobox;LPDTBLDDLBX lpddlbx;LPDTBLCHECKBOX lpcheckbox;LPDTBLGROUPBOX lpgroupbox;LPDTBLBUTTON lpbutton;LPDTBLRADIOBUTTON lpradiobutton;LPDTBLMVLISTBOX lpmvlbx;LPDTBLMVDDLBX lpmvddlbx;LPDTBLPAGE lppage;};
struct IImnAccountManager2Vtbl {HRESULT ( *QueryInterface)(IImnAccountManager2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IImnAccountManager2 *This);ULONG ( *Release)(IImnAccountManager2 *This);HRESULT ( *Init)(IImnAccountManager2 *This, IImnAdviseMigrateServer *pAdviseMigrateServer);HRESULT ( *CreateAccountObject)(IImnAccountManager2 *This, ACCTTYPE AcctType, IImnAccount **ppAccount);HRESULT ( *Enumerate)(IImnAccountManager2 *This, DWORD dwSrvTypes, IImnEnumAccounts **ppEnumAccounts);HRESULT ( *GetAccountCount)(IImnAccountManager2 *This, ACCTTYPE AcctType, ULONG *pcServers);HRESULT ( *FindAccount)(IImnAccountManager2 *This, DWORD dwPropTag, LPCSTR pszSearchData, IImnAccount **ppAccount);HRESULT ( *GetDefaultAccount)(IImnAccountManager2 *This, ACCTTYPE AcctType, IImnAccount **ppAccount);HRESULT ( *GetDefaultAccountName)(IImnAccountManager2 *This, ACCTTYPE AcctType, LPSTR pszAccount, ULONG cchMax);HRESULT ( *ProcessNotification)(IImnAccountManager2 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *ValidateDefaultSendAccount)(IImnAccountManager2 *This);HRESULT ( *AccountListDialog)(IImnAccountManager2 *This, HWND hwnd, ACCTLISTINFO *pinfo);HRESULT ( *Advise)(IImnAccountManager2 *This, IImnAdviseAccount *pAdviseAccount, DWORD *pdwConnection);HRESULT ( *Unadvise)(IImnAccountManager2 *This, DWORD dwConnection);HRESULT ( *GetUniqueAccountName)(IImnAccountManager2 *This, LPSTR szName, UINT cch);HRESULT ( *InitEx)(IImnAccountManager2 *This, IImnAdviseMigrateServer *pAdviseMigrateServer, DWORD dwFlags);HRESULT ( *InitUser)(IImnAccountManager2 *This, IImnAdviseMigrateServer *pAdviseMigrateServer,  GUID * rguidID, DWORD dwFlags);HRESULT ( *GetIncompleteAccount)(IImnAccountManager2 *This, ACCTTYPE AcctType, LPSTR pszAccountId, ULONG cchMax);HRESULT ( *SetIncompleteAccount)(IImnAccountManager2 *This, ACCTTYPE AcctType, LPCSTR pszAccountId);};
struct IDirectSoundBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundBuffer *This);ULONG ( *Release)(IDirectSoundBuffer *This);HRESULT ( *GetCaps)(IDirectSoundBuffer *This, LPDSBCAPS);HRESULT ( *GetCurrentPosition)(IDirectSoundBuffer *This, LPDWORD, LPDWORD);HRESULT ( *GetFormat)(IDirectSoundBuffer *This, LPWAVEFORMATEX, DWORD, LPDWORD);HRESULT ( *GetVolume)(IDirectSoundBuffer *This, LPLONG);HRESULT ( *GetPan)(IDirectSoundBuffer *This, LPLONG);HRESULT ( *GetFrequency)(IDirectSoundBuffer *This, LPDWORD);HRESULT ( *GetStatus)(IDirectSoundBuffer *This, LPDWORD);HRESULT ( *Initialize)(IDirectSoundBuffer *This, LPDIRECTSOUND, LPCDSBUFFERDESC);HRESULT ( *Lock)(IDirectSoundBuffer *This, DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD, DWORD);HRESULT ( *Play)(IDirectSoundBuffer *This, DWORD, DWORD, DWORD);HRESULT ( *SetCurrentPosition)(IDirectSoundBuffer *This, DWORD);HRESULT ( *SetFormat)(IDirectSoundBuffer *This, LPCWAVEFORMATEX);HRESULT ( *SetVolume)(IDirectSoundBuffer *This, LONG);HRESULT ( *SetPan)(IDirectSoundBuffer *This, LONG);HRESULT ( *SetFrequency)(IDirectSoundBuffer *This, DWORD);HRESULT ( *Stop)(IDirectSoundBuffer *This);HRESULT ( *Unlock)(IDirectSoundBuffer *This, LPVOID, DWORD, LPVOID, DWORD);HRESULT ( *Restore)(IDirectSoundBuffer *This);};
struct IMimeHeaderTableVtbl {HRESULT ( *QueryInterface)(IMimeHeaderTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeHeaderTable *This);ULONG ( *Release)(IMimeHeaderTable *This);HRESULT ( *GetClassID)(IMimeHeaderTable *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMimeHeaderTable *This);HRESULT ( *Load)(IMimeHeaderTable *This, IStream *pStm);HRESULT ( *Save)(IMimeHeaderTable *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMimeHeaderTable *This, ULARGE_INTEGER *pcbSize);HRESULT ( *FindFirstRow)(IMimeHeaderTable *This, LPFINDHEADER pFindHeader, LPHHEADERROW phRow);HRESULT ( *FindNextRow)(IMimeHeaderTable *This, LPFINDHEADER pFindHeader, LPHHEADERROW phRow);HRESULT ( *CountRows)(IMimeHeaderTable *This, LPCSTR pszHeader, ULONG *pcRows);HRESULT ( *AppendRow)(IMimeHeaderTable *This, LPCSTR pszHeader, DWORD dwFlags, LPCSTR pszData, ULONG cchData, LPHHEADERROW phRow);HRESULT ( *DeleteRow)(IMimeHeaderTable *This, HHEADERROW hRow);HRESULT ( *GetRowData)(IMimeHeaderTable *This, HHEADERROW hRow, DWORD dwFlags, LPSTR *ppszData, ULONG *pcchData);HRESULT ( *SetRowData)(IMimeHeaderTable *This, HHEADERROW hRow, DWORD dwFlags, LPCSTR pszData, ULONG cchData);HRESULT ( *GetRowInfo)(IMimeHeaderTable *This, HHEADERROW hRow, LPHEADERROWINFO pInfo);HRESULT ( *SetRowNumber)(IMimeHeaderTable *This, HHEADERROW hRow, DWORD dwRowNumber);HRESULT ( *EnumRows)(IMimeHeaderTable *This, LPCSTR pszHeader, DWORD dwFlags, IMimeEnumHeaderRows **ppEnum);HRESULT ( *Clone)(IMimeHeaderTable *This, IMimeHeaderTable **ppTable);HRESULT ( *BindToObject)(IMimeHeaderTable *This,  IID * riid, void **ppvObject);};
struct _DMA_OPERATIONS {ULONG Size;PPUT_DMA_ADAPTER PutDmaAdapter;PALLOCATE_COMMON_BUFFER AllocateCommonBuffer;PFREE_COMMON_BUFFER FreeCommonBuffer;PALLOCATE_ADAPTER_CHANNEL AllocateAdapterChannel;PFLUSH_ADAPTER_BUFFERS FlushAdapterBuffers;PFREE_ADAPTER_CHANNEL FreeAdapterChannel;PFREE_MAP_REGISTERS FreeMapRegisters;PMAP_TRANSFER MapTransfer;PGET_DMA_ALIGNMENT GetDmaAlignment;PREAD_DMA_COUNTER ReadDmaCounter;PGET_SCATTER_GATHER_LIST GetScatterGatherList;PPUT_SCATTER_GATHER_LIST PutScatterGatherList;};
struct IMAPITableVtbl {HRESULT ( *QueryInterface)(IMAPITable *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPITable *This);ULONG ( *Release)(IMAPITable *This);HRESULT ( *GetLastError)(IMAPITable *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Advise)(IMAPITable *This, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMAPITable *This, ULONG ulConnection);HRESULT ( *GetStatus)(IMAPITable *This, ULONG *lpulTableStatus, ULONG *lpulTableType);HRESULT ( *SetColumns)(IMAPITable *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags);HRESULT ( *QueryColumns)(IMAPITable *This, ULONG ulFlags, LPSPropTagArray *lpPropTagArray);HRESULT ( *GetRowCount)(IMAPITable *This, ULONG ulFlags, ULONG *lpulCount);HRESULT ( *SeekRow)(IMAPITable *This, BOOKMARK bkOrigin, LONG lRowCount, LONG *lplRowsSought);HRESULT ( *SeekRowApprox)(IMAPITable *This, ULONG ulNumerator, ULONG ulDenominator);HRESULT ( *QueryPosition)(IMAPITable *This, ULONG *lpulRow, ULONG *lpulNumerator, ULONG *lpulDenominator);HRESULT ( *FindRow)(IMAPITable *This, LPSRestriction lpRestriction, BOOKMARK bkOrigin, ULONG ulFlags);HRESULT ( *Restrict)(IMAPITable *This, LPSRestriction lpRestriction, ULONG ulFlags);HRESULT ( *CreateBookmark)(IMAPITable *This, BOOKMARK *lpbkPosition);HRESULT ( *FreeBookmark)(IMAPITable *This, BOOKMARK bkPosition);HRESULT ( *SortTable)(IMAPITable *This, LPSSortOrderSet lpSortCriteria, ULONG ulFlags);HRESULT ( *QuerySortOrder)(IMAPITable *This, LPSSortOrderSet *lppSortCriteria);HRESULT ( *QueryRows)(IMAPITable *This, LONG lRowCount, ULONG ulFlags, LPSRowSet *lppRows);HRESULT ( *Abort)(IMAPITable *This);HRESULT ( *ExpandRow)(IMAPITable *This, ULONG cbInstanceKey, LPBYTE pbInstanceKey, ULONG ulRowCount, ULONG ulFlags, LPSRowSet *lppRows, ULONG *lpulMoreRows);HRESULT ( *CollapseRow)(IMAPITable *This, ULONG cbInstanceKey, LPBYTE pbInstanceKey, ULONG ulFlags, ULONG *lpulRowCount);HRESULT ( *WaitForCompletion)(IMAPITable *This, ULONG ulFlags, ULONG ulTimeout, ULONG *lpulTableStatus);HRESULT ( *GetCollapseState)(IMAPITable *This, ULONG ulFlags, ULONG cbInstanceKey, LPBYTE lpbInstanceKey, ULONG *lpcbCollapseState, LPBYTE *lppbCollapseState);HRESULT ( *SetCollapseState)(IMAPITable *This, ULONG ulFlags, ULONG cbCollapseState, LPBYTE pbCollapseState, BOOKMARK *lpbkLocation);};
struct IMimeInternationalVtbl {HRESULT ( *QueryInterface)(IMimeInternational *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeInternational *This);ULONG ( *Release)(IMimeInternational *This);HRESULT ( *SetDefaultCharset)(IMimeInternational *This, HCHARSET hCharset);HRESULT ( *GetDefaultCharset)(IMimeInternational *This, LPHCHARSET phCharset);HRESULT ( *GetCodePageCharset)(IMimeInternational *This, CODEPAGEID cpiCodePage, CHARSETTYPE ctCsetType, LPHCHARSET phCharset);HRESULT ( *FindCharset)(IMimeInternational *This, LPCSTR pszCharset, LPHCHARSET phCharset);HRESULT ( *GetCharsetInfo)(IMimeInternational *This, HCHARSET hCharset, LPINETCSETINFO pCsetInfo);HRESULT ( *GetCodePageInfo)(IMimeInternational *This, CODEPAGEID cpiCodePage, LPCODEPAGEINFO pCodePageInfo);HRESULT ( *CanConvertCodePages)(IMimeInternational *This, CODEPAGEID cpiSource, CODEPAGEID cpiDest);HRESULT ( *DecodeHeader)(IMimeInternational *This, HCHARSET hCharset, LPCSTR pszData, LPPROPVARIANT pDecoded, LPRFC1522INFO pRfc1522Info);HRESULT ( *EncodeHeader)(IMimeInternational *This, HCHARSET hCharset, LPPROPVARIANT pData, LPSTR *ppszEncoded, LPRFC1522INFO pRfc1522Info);HRESULT ( *ConvertBuffer)(IMimeInternational *This, CODEPAGEID cpiSource, CODEPAGEID cpiDest, LPBLOB pIn, LPBLOB pOut, ULONG *pcbRead);HRESULT ( *ConvertString)(IMimeInternational *This, CODEPAGEID cpiSource, CODEPAGEID cpiDest, LPPROPVARIANT pIn, LPPROPVARIANT pOut);HRESULT ( *MLANG_ConvertInetReset)(IMimeInternational *This);HRESULT ( *MLANG_ConvertInetString)(IMimeInternational *This, CODEPAGEID cpiSource, CODEPAGEID cpiDest, LPCSTR pSource, int *pnSizeOfSource, LPSTR pDestination, int *pnDstSize);HRESULT ( *Rfc1522Decode)(IMimeInternational *This, LPCSTR pszValue, LPSTR pszCharset, ULONG cchmax, LPSTR *ppszDecoded);HRESULT ( *Rfc1522Encode)(IMimeInternational *This, LPCSTR pszValue, HCHARSET hCharset, LPSTR *ppszEncoded);};
struct IIMAPTransportVtbl {HRESULT ( *QueryInterface)(IIMAPTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMAPTransport *This);ULONG ( *Release)(IIMAPTransport *This);HRESULT ( *GetServerInfo)(IIMAPTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IIMAPTransport *This);HRESULT ( *IsState)(IIMAPTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IIMAPTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IIMAPTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IIMAPTransport *This);HRESULT ( *Disconnect)(IIMAPTransport *This);HRESULT ( *DropConnection)(IIMAPTransport *This);HRESULT ( *GetStatus)(IIMAPTransport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(IIMAPTransport *This, LPSTR pszLogFilePath, IIMAPCallback *pCBHandler);HRESULT ( *NewIRangeList)(IIMAPTransport *This, IRangeList **pprlNewRangeList);HRESULT ( *Capability)(IIMAPTransport *This, DWORD *pdwCapabilityFlags);HRESULT ( *Select)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Examine)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Create)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Delete)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Rename)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName, LPSTR lpszNewMailboxName);HRESULT ( *Subscribe)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Unsubscribe)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *List)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxNameReference, LPSTR lpszMailboxNamePattern);HRESULT ( *Lsub)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxNameReference, LPSTR lpszMailboxNamePattern);HRESULT ( *Append)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName, LPSTR lpszMessageFlags, FILETIME ftMessageDateTime, LPSTREAM lpstmMessageToSave);HRESULT ( *Close)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *Expunge)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *Search)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszSearchCriteria, boolean bReturnUIDs, IRangeList *pMsgRange, boolean bUIDRangeList);HRESULT ( *Fetch)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDMsgRange, LPSTR lpszFetchArgs);HRESULT ( *Store)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDRangeList, LPSTR lpszStoreArgs);HRESULT ( *Copy)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDRangeList, LPSTR lpszMailboxName);HRESULT ( *Noop)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *ResizeMsgSeqNumTable)(IIMAPTransport *This, DWORD dwSizeOfMbox);HRESULT ( *UpdateSeqNumToUID)(IIMAPTransport *This, DWORD dwMsgSeqNum, DWORD dwUID);HRESULT ( *RemoveSequenceNum)(IIMAPTransport *This, DWORD dwDeletedMsgSeqNum);HRESULT ( *MsgSeqNumToUID)(IIMAPTransport *This, DWORD dwMsgSeqNum, DWORD *pdwUID);HRESULT ( *GetMsgSeqNumToUIDArray)(IIMAPTransport *This, DWORD **ppdwMsgSeqNumToUIDArray, DWORD *pdwNumberOfElements);HRESULT ( *GetHighestMsgSeqNum)(IIMAPTransport *This, DWORD *pdwHighestMSN);HRESULT ( *ResetMsgSeqNumToUID)(IIMAPTransport *This);HRESULT ( *SetDefaultCBHandler)(IIMAPTransport *This, IIMAPCallback *pCBHandler);HRESULT ( *Status)(IIMAPTransport *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR pszMailboxName, LPSTR pszStatusCmdArgs);};
struct ISdpStreamVtbl {HRESULT ( *QueryInterface)(ISdpStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISdpStream *This);ULONG ( *Release)(ISdpStream *This);HRESULT ( *Validate)(ISdpStream *This, UCHAR *pStream, ULONG size, ULONG *pErrorByte);HRESULT ( *Walk)(ISdpStream *This, UCHAR *pStream, ULONG size, ISdpWalk *pWalk);HRESULT ( *RetrieveRecords)(ISdpStream *This, UCHAR *pStream, ULONG size, ISdpRecord **ppSdpRecords, ULONG *pNumRecords);HRESULT ( *RetrieveUuid128)(ISdpStream *This, UCHAR *pStream, GUID *pUuid128);HRESULT ( *RetrieveUint16)(ISdpStream *This, UCHAR *pStream, USHORT *pUint16);HRESULT ( *RetrieveUint32)(ISdpStream *This, UCHAR *pStream, ULONG *pUint32);HRESULT ( *RetrieveUint64)(ISdpStream *This, UCHAR *pStream, ULONGLONG *pUint64);HRESULT ( *RetrieveUint128)(ISdpStream *This, UCHAR *pStream, PSDP_ULARGE_INTEGER_16 pUint128);HRESULT ( *RetrieveInt16)(ISdpStream *This, UCHAR *pStream, SHORT *pInt16);HRESULT ( *RetrieveInt32)(ISdpStream *This, UCHAR *pStream, LONG *pInt32);HRESULT ( *RetrieveInt64)(ISdpStream *This, UCHAR *pStream, LONGLONG *pInt64);HRESULT ( *RetrieveInt128)(ISdpStream *This, UCHAR *pStream, PSDP_LARGE_INTEGER_16 pInt128);HRESULT ( *ByteSwapUuid128)(ISdpStream *This, GUID *pInUuid128, GUID *pOutUuid128);HRESULT ( *ByteSwapUint128)(ISdpStream *This, PSDP_ULARGE_INTEGER_16 pInUint128, PSDP_ULARGE_INTEGER_16 pOutUint128);HRESULT ( *ByteSwapUint64)(ISdpStream *This, ULONGLONG inUint64, ULONGLONG *pOutUint64);HRESULT ( *ByteSwapUint32)(ISdpStream *This, ULONG uint32, ULONG *pUint32);HRESULT ( *ByteSwapUint16)(ISdpStream *This, USHORT uint16, USHORT *pUint16);HRESULT ( *ByteSwapInt128)(ISdpStream *This, PSDP_LARGE_INTEGER_16 pInInt128, PSDP_LARGE_INTEGER_16 pOutInt128);HRESULT ( *ByteSwapInt64)(ISdpStream *This, LONGLONG inInt64, LONGLONG *pOutInt64);HRESULT ( *ByteSwapInt32)(ISdpStream *This, LONG int32, LONG *pInt32);HRESULT ( *ByteSwapInt16)(ISdpStream *This, SHORT int16, SHORT *pInt16);HRESULT ( *NormalizeUuid)(ISdpStream *This, NodeData *pDataUuid, GUID *pNormalizeUuid);HRESULT ( *RetrieveElementInfo)(ISdpStream *This, UCHAR *pStream, SDP_TYPE *pElementType, SDP_SPECIFICTYPE *pElementSpecificType, ULONG *pElementSize, ULONG *pStorageSize, UCHAR **ppData);HRESULT ( *VerifySequenceOf)(ISdpStream *This, UCHAR *pStream, ULONG size, SDP_TYPE ofType, UCHAR *pSpecificSizes, ULONG *pNumFound);};
struct INNTPTransport2Vtbl {HRESULT ( *QueryInterface)(INNTPTransport2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INNTPTransport2 *This);ULONG ( *Release)(INNTPTransport2 *This);HRESULT ( *GetServerInfo)(INNTPTransport2 *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(INNTPTransport2 *This);HRESULT ( *IsState)(INNTPTransport2 *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(INNTPTransport2 *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(INNTPTransport2 *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(INNTPTransport2 *This);HRESULT ( *Disconnect)(INNTPTransport2 *This);HRESULT ( *DropConnection)(INNTPTransport2 *This);HRESULT ( *GetStatus)(INNTPTransport2 *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(INNTPTransport2 *This, LPSTR pszLogFilePath, INNTPCallback *pCallback);HRESULT ( *CommandAUTHINFO)(INNTPTransport2 *This, LPNNTPAUTHINFO pAuthInfo);HRESULT ( *CommandGROUP)(INNTPTransport2 *This, LPSTR pszGroup);HRESULT ( *CommandLAST)(INNTPTransport2 *This);HRESULT ( *CommandNEXT)(INNTPTransport2 *This);HRESULT ( *CommandSTAT)(INNTPTransport2 *This, LPARTICLEID pArticleId);HRESULT ( *CommandARTICLE)(INNTPTransport2 *This, LPARTICLEID pArticleId);HRESULT ( *CommandHEAD)(INNTPTransport2 *This, LPARTICLEID pArticleId);HRESULT ( *CommandBODY)(INNTPTransport2 *This, LPARTICLEID pArticleId);HRESULT ( *CommandPOST)(INNTPTransport2 *This, LPNNTPMESSAGE pMessage);HRESULT ( *CommandLIST)(INNTPTransport2 *This, LPSTR pszArgs);HRESULT ( *CommandLISTGROUP)(INNTPTransport2 *This, LPSTR pszGroup);HRESULT ( *CommandNEWGROUPS)(INNTPTransport2 *This, SYSTEMTIME *pstLast, LPSTR pszDist);HRESULT ( *CommandDATE)(INNTPTransport2 *This);HRESULT ( *CommandMODE)(INNTPTransport2 *This, LPSTR pszMode);HRESULT ( *CommandXHDR)(INNTPTransport2 *This, LPSTR pszHeader, LPRANGE pRange, LPSTR pszMessageId);HRESULT ( *CommandQUIT)(INNTPTransport2 *This);HRESULT ( *GetHeaders)(INNTPTransport2 *This, LPRANGE pRange);HRESULT ( *ReleaseResponse)(INNTPTransport2 *This, LPNNTPRESPONSE pResponse);HRESULT ( *SetWindow)(INNTPTransport2 *This);HRESULT ( *ResetWindow)(INNTPTransport2 *This);};
struct INNTPTransportVtbl {HRESULT ( *QueryInterface)(INNTPTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INNTPTransport *This);ULONG ( *Release)(INNTPTransport *This);HRESULT ( *GetServerInfo)(INNTPTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(INNTPTransport *This);HRESULT ( *IsState)(INNTPTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(INNTPTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(INNTPTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(INNTPTransport *This);HRESULT ( *Disconnect)(INNTPTransport *This);HRESULT ( *DropConnection)(INNTPTransport *This);HRESULT ( *GetStatus)(INNTPTransport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(INNTPTransport *This, LPSTR pszLogFilePath, INNTPCallback *pCallback);HRESULT ( *CommandAUTHINFO)(INNTPTransport *This, LPNNTPAUTHINFO pAuthInfo);HRESULT ( *CommandGROUP)(INNTPTransport *This, LPSTR pszGroup);HRESULT ( *CommandLAST)(INNTPTransport *This);HRESULT ( *CommandNEXT)(INNTPTransport *This);HRESULT ( *CommandSTAT)(INNTPTransport *This, LPARTICLEID pArticleId);HRESULT ( *CommandARTICLE)(INNTPTransport *This, LPARTICLEID pArticleId);HRESULT ( *CommandHEAD)(INNTPTransport *This, LPARTICLEID pArticleId);HRESULT ( *CommandBODY)(INNTPTransport *This, LPARTICLEID pArticleId);HRESULT ( *CommandPOST)(INNTPTransport *This, LPNNTPMESSAGE pMessage);HRESULT ( *CommandLIST)(INNTPTransport *This, LPSTR pszArgs);HRESULT ( *CommandLISTGROUP)(INNTPTransport *This, LPSTR pszGroup);HRESULT ( *CommandNEWGROUPS)(INNTPTransport *This, SYSTEMTIME *pstLast, LPSTR pszDist);HRESULT ( *CommandDATE)(INNTPTransport *This);HRESULT ( *CommandMODE)(INNTPTransport *This, LPSTR pszMode);HRESULT ( *CommandXHDR)(INNTPTransport *This, LPSTR pszHeader, LPRANGE pRange, LPSTR pszMessageId);HRESULT ( *CommandQUIT)(INNTPTransport *This);HRESULT ( *GetHeaders)(INNTPTransport *This, LPRANGE pRange);HRESULT ( *ReleaseResponse)(INNTPTransport *This, LPNNTPRESPONSE pResponse);};
struct IViewObjectExVtbl {HRESULT ( *QueryInterface)(IViewObjectEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObjectEx *This);ULONG ( *Release)(IViewObjectEx *This);HRESULT ( *Draw)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObjectEx *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObjectEx *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObjectEx *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);HRESULT ( *GetRect)(IViewObjectEx *This, DWORD dwAspect, LPRECTL pRect);HRESULT ( *GetViewStatus)(IViewObjectEx *This, DWORD *pdwStatus);HRESULT ( *QueryHitPoint)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, POINT ptlLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *QueryHitRect)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, LPCRECT pRectLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *GetNaturalExtent)(IViewObjectEx *This, DWORD dwAspect, LONG lindex, DVTARGETDEVICE *ptd, HDC hicTargetDev, DVEXTENTINFO *pExtentInfo, LPSIZEL pSizel);};
struct IPictureVtbl {HRESULT ( *QueryInterface)(IPicture *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPicture *This);ULONG ( *Release)(IPicture *This);HRESULT ( *get_Handle)(IPicture *This, OLE_HANDLE *pHandle);HRESULT ( *get_hPal)(IPicture *This, OLE_HANDLE *phPal);HRESULT ( *get_Type)(IPicture *This, SHORT *pType);HRESULT ( *get_Width)(IPicture *This, OLE_XSIZE_HIMETRIC *pWidth);HRESULT ( *get_Height)(IPicture *This, OLE_YSIZE_HIMETRIC *pHeight);HRESULT ( *Render)(IPicture *This, HDC hDC, LONG x, LONG y, LONG cx, LONG cy, OLE_XPOS_HIMETRIC xSrc, OLE_YPOS_HIMETRIC ySrc, OLE_XSIZE_HIMETRIC cxSrc, OLE_YSIZE_HIMETRIC cySrc, LPCRECT pRcWBounds);HRESULT ( *set_hPal)(IPicture *This, OLE_HANDLE hPal);HRESULT ( *get_CurDC)(IPicture *This, HDC *phDC);HRESULT ( *SelectPicture)(IPicture *This, HDC hDCIn, HDC *phDCOut, OLE_HANDLE *phBmpOut);HRESULT ( *get_KeepOriginalFormat)(IPicture *This, BOOL *pKeep);HRESULT ( *put_KeepOriginalFormat)(IPicture *This, BOOL keep);HRESULT ( *PictureChanged)(IPicture *This);HRESULT ( *SaveAsFile)(IPicture *This, LPSTREAM pStream, BOOL fSaveMemCopy, LONG *pCbSize);HRESULT ( *get_Attributes)(IPicture *This, DWORD *pDwAttr);};
struct IIMAPTransport2Vtbl {HRESULT ( *QueryInterface)(IIMAPTransport2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMAPTransport2 *This);ULONG ( *Release)(IIMAPTransport2 *This);HRESULT ( *GetServerInfo)(IIMAPTransport2 *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IIMAPTransport2 *This);HRESULT ( *IsState)(IIMAPTransport2 *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IIMAPTransport2 *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IIMAPTransport2 *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IIMAPTransport2 *This);HRESULT ( *Disconnect)(IIMAPTransport2 *This);HRESULT ( *DropConnection)(IIMAPTransport2 *This);HRESULT ( *GetStatus)(IIMAPTransport2 *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(IIMAPTransport2 *This, LPSTR pszLogFilePath, IIMAPCallback *pCBHandler);HRESULT ( *NewIRangeList)(IIMAPTransport2 *This, IRangeList **pprlNewRangeList);HRESULT ( *Capability)(IIMAPTransport2 *This, DWORD *pdwCapabilityFlags);HRESULT ( *Select)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Examine)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Create)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Delete)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Rename)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName, LPSTR lpszNewMailboxName);HRESULT ( *Subscribe)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *Unsubscribe)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName);HRESULT ( *List)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxNameReference, LPSTR lpszMailboxNamePattern);HRESULT ( *Lsub)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxNameReference, LPSTR lpszMailboxNamePattern);HRESULT ( *Append)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszMailboxName, LPSTR lpszMessageFlags, FILETIME ftMessageDateTime, LPSTREAM lpstmMessageToSave);HRESULT ( *Close)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *Expunge)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *Search)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR lpszSearchCriteria, boolean bReturnUIDs, IRangeList *pMsgRange, boolean bUIDRangeList);HRESULT ( *Fetch)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDMsgRange, LPSTR lpszFetchArgs);HRESULT ( *Store)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDRangeList, LPSTR lpszStoreArgs);HRESULT ( *Copy)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, IRangeList *pMsgRange, boolean bUIDRangeList, LPSTR lpszMailboxName);HRESULT ( *Noop)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler);HRESULT ( *ResizeMsgSeqNumTable)(IIMAPTransport2 *This, DWORD dwSizeOfMbox);HRESULT ( *UpdateSeqNumToUID)(IIMAPTransport2 *This, DWORD dwMsgSeqNum, DWORD dwUID);HRESULT ( *RemoveSequenceNum)(IIMAPTransport2 *This, DWORD dwDeletedMsgSeqNum);HRESULT ( *MsgSeqNumToUID)(IIMAPTransport2 *This, DWORD dwMsgSeqNum, DWORD *pdwUID);HRESULT ( *GetMsgSeqNumToUIDArray)(IIMAPTransport2 *This, DWORD **ppdwMsgSeqNumToUIDArray, DWORD *pdwNumberOfElements);HRESULT ( *GetHighestMsgSeqNum)(IIMAPTransport2 *This, DWORD *pdwHighestMSN);HRESULT ( *ResetMsgSeqNumToUID)(IIMAPTransport2 *This);HRESULT ( *SetDefaultCBHandler)(IIMAPTransport2 *This, IIMAPCallback *pCBHandler);HRESULT ( *Status)(IIMAPTransport2 *This, WPARAM wParam, LPARAM lParam, IIMAPCallback *pCBHandler, LPSTR pszMailboxName, LPSTR pszStatusCmdArgs);HRESULT ( *SetDefaultCP)(IIMAPTransport2 *This, DWORD dwTranslateFlags, UINT uiCodePage);HRESULT ( *MultiByteToModifiedUTF7)(IIMAPTransport2 *This, LPCSTR pszSource, LPSTR *ppszDestination, UINT uiSourceCP, DWORD dwFlags);HRESULT ( *ModifiedUTF7ToMultiByte)(IIMAPTransport2 *This, LPCSTR pszSource, LPSTR *ppszDestination, UINT uiDestinationCP, DWORD dwFlags);HRESULT ( *SetIdleMode)(IIMAPTransport2 *This, DWORD dwIdleFlags);HRESULT ( *EnableFetchEx)(IIMAPTransport2 *This, DWORD dwFetchExFlags);HRESULT ( *SetWindow)(IIMAPTransport2 *This);HRESULT ( *ResetWindow)(IIMAPTransport2 *This);};
struct IDirect3D8Vtbl {HRESULT ( *QueryInterface)(IDirect3D8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3D8 *This);ULONG ( *Release)(IDirect3D8 *This);HRESULT ( *RegisterSoftwareDevice)(IDirect3D8 *This, void *pInitializeFunction);UINT ( *GetAdapterCount)(IDirect3D8 *This);HRESULT ( *GetAdapterIdentifier)(IDirect3D8 *This, UINT Adapter, DWORD Flags, D3DADAPTER_IDENTIFIER8 *pIdentifier);UINT ( *GetAdapterModeCount)(IDirect3D8 *This, UINT Adapter);HRESULT ( *EnumAdapterModes)(IDirect3D8 *This, UINT Adapter, UINT Mode, D3DDISPLAYMODE *pMode);HRESULT ( *GetAdapterDisplayMode)(IDirect3D8 *This, UINT Adapter, D3DDISPLAYMODE *pMode);HRESULT ( *CheckDeviceType)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE CheckType, D3DFORMAT DisplayFormat, D3DFORMAT BackBufferFormat, BOOL Windowed);HRESULT ( *CheckDeviceFormat)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, DWORD Usage, D3DRESOURCETYPE RType, D3DFORMAT CheckFormat);HRESULT ( *CheckDeviceMultiSampleType)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SurfaceFormat, BOOL Windowed, D3DMULTISAMPLE_TYPE MultiSampleType);HRESULT ( *CheckDepthStencilMatch)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, D3DFORMAT RenderTargetFormat, D3DFORMAT DepthStencilFormat);HRESULT ( *GetDeviceCaps)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, D3DCAPS8 *pCaps);HMONITOR ( *GetAdapterMonitor)(IDirect3D8 *This, UINT Adapter);HRESULT ( *CreateDevice)(IDirect3D8 *This, UINT Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, DWORD BehaviorFlags, D3DPRESENT_PARAMETERS *pPresentationParameters, IDirect3DDevice8 **ppReturnedDeviceInterface);};
union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56 {GOPHER_ADMIN_ATTRIBUTE_TYPE Admin;GOPHER_MOD_DATE_ATTRIBUTE_TYPE ModDate;GOPHER_TTL_ATTRIBUTE_TYPE Ttl;GOPHER_SCORE_ATTRIBUTE_TYPE Score;GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE ScoreRange;GOPHER_SITE_ATTRIBUTE_TYPE Site;GOPHER_ORGANIZATION_ATTRIBUTE_TYPE Organization;GOPHER_LOCATION_ATTRIBUTE_TYPE Location;GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE GeographicalLocation;GOPHER_TIMEZONE_ATTRIBUTE_TYPE TimeZone;GOPHER_PROVIDER_ATTRIBUTE_TYPE Provider;GOPHER_VERSION_ATTRIBUTE_TYPE Version;GOPHER_ABSTRACT_ATTRIBUTE_TYPE Abstract;GOPHER_VIEW_ATTRIBUTE_TYPE View;GOPHER_VERONICA_ATTRIBUTE_TYPE Veronica;GOPHER_ASK_ATTRIBUTE_TYPE Ask;GOPHER_UNKNOWN_ATTRIBUTE_TYPE Unknown;};
struct IOleInPlaceSiteWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteWindowless *This);ULONG ( *Release)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceSiteWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteWindowless *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteWindowless *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteWindowless *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteWindowless *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteWindowless *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteWindowless *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteWindowless *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteWindowless *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *CanWindowlessActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetCapture)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetCapture)(IOleInPlaceSiteWindowless *This, BOOL fCapture);HRESULT ( *GetFocus)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetFocus)(IOleInPlaceSiteWindowless *This, BOOL fFocus);HRESULT ( *GetDC)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, DWORD grfFlags, HDC *phDC);HRESULT ( *ReleaseDC)(IOleInPlaceSiteWindowless *This, HDC hDC);HRESULT ( *InvalidateRect)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, BOOL fErase);HRESULT ( *InvalidateRgn)(IOleInPlaceSiteWindowless *This, HRGN hRGN, BOOL fErase);HRESULT ( *ScrollRect)(IOleInPlaceSiteWindowless *This, INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip);HRESULT ( *AdjustRect)(IOleInPlaceSiteWindowless *This, LPRECT prc);HRESULT ( *OnDefWindowMessage)(IOleInPlaceSiteWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct IHTTPMailTransportVtbl {HRESULT ( *QueryInterface)(IHTTPMailTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTTPMailTransport *This);ULONG ( *Release)(IHTTPMailTransport *This);HRESULT ( *GetServerInfo)(IHTTPMailTransport *This, LPINETSERVER pInetServer);IXPTYPE ( *GetIXPType)(IHTTPMailTransport *This);HRESULT ( *IsState)(IHTTPMailTransport *This, IXPISSTATE isstate);HRESULT ( *InetServerFromAccount)(IHTTPMailTransport *This, IImnAccount *pAccount, LPINETSERVER pInetServer);HRESULT ( *Connect)(IHTTPMailTransport *This, LPINETSERVER pInetServer, boolean fAuthenticate, boolean fCommandLogging);HRESULT ( *HandsOffCallback)(IHTTPMailTransport *This);HRESULT ( *Disconnect)(IHTTPMailTransport *This);HRESULT ( *DropConnection)(IHTTPMailTransport *This);HRESULT ( *GetStatus)(IHTTPMailTransport *This, IXPSTATUS *pCurrentStatus);HRESULT ( *InitNew)(IHTTPMailTransport *This, LPCSTR pszUserAgent, LPCSTR pszLogFilePath, IHTTPMailCallback *pCallback);HRESULT ( *CommandGET)(IHTTPMailTransport *This, LPCSTR pszPath, LPCSTR *rgszAcceptTypes, BOOL fTranslate, DWORD dwContext);HRESULT ( *CommandPUT)(IHTTPMailTransport *This, LPCSTR pszPath, LPVOID lpvData, ULONG cbSize, DWORD dwContext);HRESULT ( *CommandPOST)(IHTTPMailTransport *This, LPCSTR pszPath, IStream *pStream, LPCSTR pszContentType, DWORD dwContext);HRESULT ( *CommandDELETE)(IHTTPMailTransport *This, LPCSTR pszPath, DWORD dwContext);HRESULT ( *CommandBDELETE)(IHTTPMailTransport *This, LPCSTR pszSourceCollection, LPHTTPTARGETLIST pTargets, DWORD dwContext);HRESULT ( *CommandPROPFIND)(IHTTPMailTransport *This, LPCSTR pszPath, IPropFindRequest *pRequest, DWORD dwDepth, DWORD dwContext);HRESULT ( *CommandPROPPATCH)(IHTTPMailTransport *This, LPCSTR pszPath, IPropPatchRequest *pRequest, DWORD dwContext);HRESULT ( *CommandMKCOL)(IHTTPMailTransport *This, LPCSTR pszPath, DWORD dwContext);HRESULT ( *CommandCOPY)(IHTTPMailTransport *This, LPCSTR pszPath, LPCSTR pszDestination, BOOL fAllowRename, DWORD dwContext);HRESULT ( *CommandBCOPY)(IHTTPMailTransport *This, LPCSTR pszSourceCollection, LPHTTPTARGETLIST pTargets, LPCSTR pszDestCollection, LPHTTPTARGETLIST pDestinations, BOOL fAllowRename, DWORD dwContext);HRESULT ( *CommandMOVE)(IHTTPMailTransport *This, LPCSTR pszPath, LPCSTR pszDestination, BOOL fAllowRename, DWORD dwContext);HRESULT ( *CommandBMOVE)(IHTTPMailTransport *This, LPCSTR pszSourceCollection, LPHTTPTARGETLIST pTargets, LPCSTR pszDestCollection, LPHTTPTARGETLIST pDestinations, BOOL fAllowRename, DWORD dwContext);HRESULT ( *GetProperty)(IHTTPMailTransport *This, HTTPMAILPROPTYPE proptype, LPSTR *ppszProp);HRESULT ( *MemberInfo)(IHTTPMailTransport *This, LPCSTR pszPath, MEMBERINFOFLAGS flags, DWORD dwDepth, BOOL fIncludeRoot, DWORD dwContext);HRESULT ( *FindFolders)(IHTTPMailTransport *This, LPCSTR pszPath, DWORD dwContext);HRESULT ( *MarkRead)(IHTTPMailTransport *This, LPCSTR pszPath, LPHTTPTARGETLIST pTargets, BOOL fMarkRead, DWORD dwContext);HRESULT ( *SendMessageA)(IHTTPMailTransport *This, LPCSTR pszPath, LPCSTR pszFrom, LPHTTPTARGETLIST pTargets, BOOL fSaveInSent, IStream *pMessageStream, DWORD dwContext);HRESULT ( *ListContacts)(IHTTPMailTransport *This, LPCSTR pszPath, DWORD dwContext);HRESULT ( *ListContactInfos)(IHTTPMailTransport *This, LPCSTR pszCollectionPath, DWORD dwContext);HRESULT ( *ContactInfo)(IHTTPMailTransport *This, LPCSTR pszPath, DWORD dwContext);HRESULT ( *PostContact)(IHTTPMailTransport *This, LPCSTR pszPath, LPHTTPCONTACTINFO pciInfo, DWORD dwContext);HRESULT ( *PatchContact)(IHTTPMailTransport *This, LPCSTR pszPath, LPHTTPCONTACTINFO pciInfo, DWORD dwContext);};
struct IRowsetLocateVtbl {HRESULT ( *QueryInterface)(IRowsetLocate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetLocate *This);ULONG ( *Release)(IRowsetLocate *This);HRESULT ( *AddRefRows)(IRowsetLocate *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBREFCOUNT rgRefCounts[],DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowsetLocate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowsetLocate *This, HCHAPTER hReserved, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowsetLocate *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBROWOPTIONS rgRowOptions[],DBREFCOUNT  *    rgRefCounts, DBROWSTATUS rgRowStatus[]);HRESULT ( *RestartPosition)(IRowsetLocate *This, HCHAPTER hReserved);HRESULT ( *Compare)(IRowsetLocate *This, HCHAPTER hReserved, DBBKMARK cbBookmark1,  BYTE *pBookmark1, DBBKMARK cbBookmark2,  BYTE *pBookmark2, DBCOMPARE *pComparison);HRESULT ( *GetRowsAt)(IRowsetLocate *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, DBBKMARK cbBookmark,  BYTE *pBookmark, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);HRESULT ( *GetRowsByBookmark)(IRowsetLocate *This, HCHAPTER hReserved, DBCOUNTITEM cRows, DBBKMARK  *    rgcbBookmarks,  BYTE *rgpBookmarks[],HROW  *    rghRows, DBROWSTATUS rgRowStatus[]);HRESULT ( *Hash)(IRowsetLocate *This, HCHAPTER hReserved, DBBKMARK cBookmarks, DBBKMARK  *    rgcbBookmarks,  BYTE *rgpBookmarks[],DBHASHVALUE  *    rgHashedValues, DBROWSTATUS rgBookmarkStatus[]);};
struct IRowsetScrollVtbl {HRESULT ( *QueryInterface)(IRowsetScroll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetScroll *This);ULONG ( *Release)(IRowsetScroll *This);HRESULT ( *AddRefRows)(IRowsetScroll *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBREFCOUNT rgRefCounts[],DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowsetScroll *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowsetScroll *This, HCHAPTER hReserved, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowsetScroll *This, DBCOUNTITEM cRows, HROW  *    rghRows, DBROWOPTIONS rgRowOptions[],DBREFCOUNT  *    rgRefCounts, DBROWSTATUS rgRowStatus[]);HRESULT ( *RestartPosition)(IRowsetScroll *This, HCHAPTER hReserved);HRESULT ( *Compare)(IRowsetScroll *This, HCHAPTER hReserved, DBBKMARK cbBookmark1,  BYTE *pBookmark1, DBBKMARK cbBookmark2,  BYTE *pBookmark2, DBCOMPARE *pComparison);HRESULT ( *GetRowsAt)(IRowsetScroll *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, DBBKMARK cbBookmark,  BYTE *pBookmark, DBROWOFFSET lRowsOffset, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);HRESULT ( *GetRowsByBookmark)(IRowsetScroll *This, HCHAPTER hReserved, DBCOUNTITEM cRows, DBBKMARK  *    rgcbBookmarks,  BYTE *rgpBookmarks[],HROW  *    rghRows, DBROWSTATUS rgRowStatus[]);HRESULT ( *Hash)(IRowsetScroll *This, HCHAPTER hReserved, DBBKMARK cBookmarks, DBBKMARK  *    rgcbBookmarks,  BYTE *rgpBookmarks[],DBHASHVALUE  *    rgHashedValues, DBROWSTATUS rgBookmarkStatus[]);HRESULT ( *GetApproximatePosition)(IRowsetScroll *This, HCHAPTER hReserved, DBBKMARK cbBookmark,  BYTE *pBookmark, DBCOUNTITEM *pulPosition, DBCOUNTITEM *pcRows);HRESULT ( *GetRowsAtRatio)(IRowsetScroll *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, DBCOUNTITEM ulNumerator, DBCOUNTITEM ulDenominator, DBROWCOUNT cRows, DBCOUNTITEM *pcRowsObtained, HROW **prghRows);};
struct IDvdInfoVtbl {HRESULT ( *QueryInterface)(IDvdInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdInfo *This);ULONG ( *Release)(IDvdInfo *This);HRESULT ( *GetCurrentDomain)(IDvdInfo *This, DVD_DOMAIN *pDomain);HRESULT ( *GetCurrentLocation)(IDvdInfo *This, DVD_PLAYBACK_LOCATION *pLocation);HRESULT ( *GetTotalTitleTime)(IDvdInfo *This, ULONG *pTotalTime);HRESULT ( *GetCurrentButton)(IDvdInfo *This, ULONG *pnButtonsAvailable, ULONG *pnCurrentButton);HRESULT ( *GetCurrentAngle)(IDvdInfo *This, ULONG *pnAnglesAvailable, ULONG *pnCurrentAngle);HRESULT ( *GetCurrentAudio)(IDvdInfo *This, ULONG *pnStreamsAvailable, ULONG *pnCurrentStream);HRESULT ( *GetCurrentSubpicture)(IDvdInfo *This, ULONG *pnStreamsAvailable, ULONG *pnCurrentStream, BOOL *pIsDisabled);HRESULT ( *GetCurrentUOPS)(IDvdInfo *This, VALID_UOP_SOMTHING_OR_OTHER *pUOP);HRESULT ( *GetAllSPRMs)(IDvdInfo *This, SPRMARRAY *pRegisterArray);HRESULT ( *GetAllGPRMs)(IDvdInfo *This, GPRMARRAY *pRegisterArray);HRESULT ( *GetAudioLanguage)(IDvdInfo *This, ULONG nStream, LCID *pLanguage);HRESULT ( *GetSubpictureLanguage)(IDvdInfo *This, ULONG nStream, LCID *pLanguage);HRESULT ( *GetTitleAttributes)(IDvdInfo *This, ULONG nTitle, DVD_ATR *pATR);HRESULT ( *GetVMGAttributes)(IDvdInfo *This, DVD_ATR *pATR);HRESULT ( *GetCurrentVideoAttributes)(IDvdInfo *This, DVD_VideoATR *pATR);HRESULT ( *GetCurrentAudioAttributes)(IDvdInfo *This, DVD_AudioATR *pATR);HRESULT ( *GetCurrentSubpictureAttributes)(IDvdInfo *This, DVD_SubpictureATR *pATR);HRESULT ( *GetCurrentVolumeInfo)(IDvdInfo *This, ULONG *pNumOfVol, ULONG *pThisVolNum, DVD_DISC_SIDE *pSide, ULONG *pNumOfTitles);HRESULT ( *GetDVDTextInfo)(IDvdInfo *This, BYTE *pTextManager, ULONG cbBufSize, ULONG *pcbActualSize);HRESULT ( *GetPlayerParentalLevel)(IDvdInfo *This, ULONG *pParentalLevel, ULONG *pCountryCode);HRESULT ( *GetNumberOfChapters)(IDvdInfo *This, ULONG ulTitle, ULONG *pNumberOfChapters);HRESULT ( *GetTitleParentalLevels)(IDvdInfo *This, ULONG ulTitle, ULONG *pParentalLevels);HRESULT ( *GetRoot)(IDvdInfo *This, LPSTR pRoot, ULONG cbBufSize, ULONG *pcbActualSize);};
union _wireVARIANT___97E5681EB831466912C1B906D2CF69C6 {LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;wireBSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;wireSAFEARRAY parray;wireBRECORD brecVal;BYTE *pbVal;SHORT *piVal;LONG *plVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;wireBSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;wireSAFEARRAY *pparray;wireVARIANT *pvarVal;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL decVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;};
struct IMimePropertySetVtbl {HRESULT ( *QueryInterface)(IMimePropertySet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimePropertySet *This);ULONG ( *Release)(IMimePropertySet *This);HRESULT ( *GetClassID)(IMimePropertySet *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMimePropertySet *This);HRESULT ( *Load)(IMimePropertySet *This, LPSTREAM pStm);HRESULT ( *Save)(IMimePropertySet *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMimePropertySet *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IMimePropertySet *This);HRESULT ( *GetPropInfo)(IMimePropertySet *This, LPCSTR pszName, LPMIMEPROPINFO pInfo);HRESULT ( *SetPropInfo)(IMimePropertySet *This, LPCSTR pszName, LPCMIMEPROPINFO pInfo);HRESULT ( *GetProp)(IMimePropertySet *This, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *SetProp)(IMimePropertySet *This, LPCSTR pszName, DWORD dwFlags, LPCPROPVARIANT pValue);HRESULT ( *AppendProp)(IMimePropertySet *This, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *DeleteProp)(IMimePropertySet *This, LPCSTR pszName);HRESULT ( *CopyProps)(IMimePropertySet *This, ULONG cNames, LPCSTR *prgszName, IMimePropertySet *pPropertySet);HRESULT ( *MoveProps)(IMimePropertySet *This, ULONG cNames, LPCSTR *prgszName, IMimePropertySet *pPropertySet);HRESULT ( *DeleteExcept)(IMimePropertySet *This, ULONG cNames, LPCSTR *prgszName);HRESULT ( *QueryProp)(IMimePropertySet *This, LPCSTR pszName, LPCSTR pszCriteria, boolean fSubString, boolean fCaseSensitive);HRESULT ( *GetCharset)(IMimePropertySet *This, LPHCHARSET phCharset);HRESULT ( *SetCharset)(IMimePropertySet *This, HCHARSET hCharset, CSETAPPLYTYPE applytype);HRESULT ( *GetParameters)(IMimePropertySet *This, LPCSTR pszName, ULONG *pcParams, LPMIMEPARAMINFO *pprgParam);HRESULT ( *IsContentType)(IMimePropertySet *This, LPCSTR pszPriType, LPCSTR pszSubType);HRESULT ( *BindToObject)(IMimePropertySet *This,  IID * riid, void **ppvObject);HRESULT ( *Clone)(IMimePropertySet *This, IMimePropertySet **ppPropertySet);HRESULT ( *SetOption)(IMimePropertySet *This,  TYPEDID oid, LPCPROPVARIANT pValue);HRESULT ( *GetOption)(IMimePropertySet *This,  TYPEDID oid, LPPROPVARIANT pValue);HRESULT ( *EnumProps)(IMimePropertySet *This, DWORD dwFlags, IMimeEnumProperties **ppEnum);};
struct IDirectDrawSurface2Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface2 *This);ULONG ( *Release)(IDirectDrawSurface2 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface2 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface2 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface2 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE2, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface2 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface2 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface2 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE2 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface2 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface2 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface2 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface2 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface2 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface2 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface2 *This);HRESULT ( *Lock)(IDirectDrawSurface2 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface2 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface2 *This);HRESULT ( *SetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface2 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface2 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *GetDDInterface)(IDirectDrawSurface2 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface2 *This, DWORD);};
struct IDirectDrawSurface3Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface3 *This);ULONG ( *Release)(IDirectDrawSurface3 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface3 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface3 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface3 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE3, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface3 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface3 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface3 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE3 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface3 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface3 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface3 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface3 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface3 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface3 *This);HRESULT ( *Lock)(IDirectDrawSurface3 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface3 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface3 *This);HRESULT ( *SetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface3 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface3 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *GetDDInterface)(IDirectDrawSurface3 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC, DWORD);};
struct IDirectDrawSurfaceVtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface *This);ULONG ( *Release)(IDirectDrawSurface *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface *This, DWORD, DWORD, LPDIRECTDRAWSURFACE, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface *This, LPDDSCAPS, LPDIRECTDRAWSURFACE *);HRESULT ( *GetBltStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface *This);HRESULT ( *Lock)(IDirectDrawSurface *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface *This);HRESULT ( *SetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);};
struct IMimeMessageTreeVtbl {HRESULT ( *QueryInterface)(IMimeMessageTree *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeMessageTree *This);ULONG ( *Release)(IMimeMessageTree *This);HRESULT ( *GetClassID)(IMimeMessageTree *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMimeMessageTree *This);HRESULT ( *Load)(IMimeMessageTree *This, LPSTREAM pStm);HRESULT ( *Save)(IMimeMessageTree *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMimeMessageTree *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IMimeMessageTree *This);HRESULT ( *GetMessageSource)(IMimeMessageTree *This, IStream **ppStream, DWORD dwFlags);HRESULT ( *GetMessageSize)(IMimeMessageTree *This, ULONG *pcbSize, DWORD dwFlags);HRESULT ( *LoadOffsetTable)(IMimeMessageTree *This, IStream *pStream);HRESULT ( *SaveOffsetTable)(IMimeMessageTree *This, IStream *pStream, DWORD dwFlags);HRESULT ( *GetFlags)(IMimeMessageTree *This, DWORD *pdwFlags);HRESULT ( *Commit)(IMimeMessageTree *This, DWORD dwFlags);HRESULT ( *HandsOffStorage)(IMimeMessageTree *This);HRESULT ( *BindToObject)(IMimeMessageTree *This,  HBODY hBody,  IID * riid, void **ppvObject);HRESULT ( *SaveBody)(IMimeMessageTree *This, HBODY hBody, DWORD dwFlags, IStream *pStream);HRESULT ( *InsertBody)(IMimeMessageTree *This, BODYLOCATION location, HBODY hPivot, LPHBODY phBody);HRESULT ( *GetBody)(IMimeMessageTree *This, BODYLOCATION location, HBODY hPivot, LPHBODY phBody);HRESULT ( *DeleteBody)(IMimeMessageTree *This, HBODY hBody, DWORD dwFlags);HRESULT ( *MoveBody)(IMimeMessageTree *This, HBODY hBody, BODYLOCATION location);HRESULT ( *CountBodies)(IMimeMessageTree *This, HBODY hParent, boolean fRecurse, ULONG *pcBodies);HRESULT ( *FindFirst)(IMimeMessageTree *This, LPFINDBODY pFindBody, LPHBODY phBody);HRESULT ( *FindNext)(IMimeMessageTree *This, LPFINDBODY pFindBody, LPHBODY phBody);HRESULT ( *ResolveURL)(IMimeMessageTree *This, HBODY hRelated, LPCSTR pszBase, LPCSTR pszURL, DWORD dwFlags, LPHBODY phBody);HRESULT ( *ToMultipart)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszSubType, LPHBODY phMultipart);HRESULT ( *GetBodyOffsets)(IMimeMessageTree *This, HBODY hBody, LPBODYOFFSETS pOffsets);HRESULT ( *GetCharset)(IMimeMessageTree *This, LPHCHARSET phCharset);HRESULT ( *SetCharset)(IMimeMessageTree *This, HCHARSET hCharset, CSETAPPLYTYPE applytype);HRESULT ( *IsBodyType)(IMimeMessageTree *This, HBODY hBody, IMSGBODYTYPE bodytype);HRESULT ( *IsContentType)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszPriType, LPCSTR pszSubType);HRESULT ( *QueryBodyProp)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszName, LPCSTR pszCriteria, boolean fSubString, boolean fCaseSensitive);HRESULT ( *GetBodyProp)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *SetBodyProp)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszName, DWORD dwFlags, LPCPROPVARIANT pValue);HRESULT ( *DeleteBodyProp)(IMimeMessageTree *This, HBODY hBody, LPCSTR pszName);HRESULT ( *SetOption)(IMimeMessageTree *This,  TYPEDID oid, LPCPROPVARIANT pValue);HRESULT ( *GetOption)(IMimeMessageTree *This,  TYPEDID oid, LPPROPVARIANT pValue);};
struct IDirectDrawSurface4Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface4 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface4 *This);ULONG ( *Release)(IDirectDrawSurface4 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface4 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface4 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface4 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE4, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface4 *This, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface4 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *Flip)(IDirectDrawSurface4 *This, LPDIRECTDRAWSURFACE4, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface4 *This, LPDDSCAPS2, LPDIRECTDRAWSURFACE4 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface4 *This, LPDDSCAPS2);HRESULT ( *GetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface4 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface4 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface4 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2);HRESULT ( *Initialize)(IDirectDrawSurface4 *This, LPDIRECTDRAW, LPDDSURFACEDESC2);HRESULT ( *IsLost)(IDirectDrawSurface4 *This);HRESULT ( *Lock)(IDirectDrawSurface4 *This, LPRECT, LPDDSURFACEDESC2, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface4 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface4 *This);HRESULT ( *SetClipper)(IDirectDrawSurface4 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface4 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface4 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface4 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface4 *This, LPRECT);HRESULT ( *UpdateOverlay)(IDirectDrawSurface4 *This, LPRECT, LPDIRECTDRAWSURFACE4, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface4 *This, DWORD, LPDIRECTDRAWSURFACE4);HRESULT ( *GetDDInterface)(IDirectDrawSurface4 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface4 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface4 *This, LPDDSURFACEDESC2, DWORD);HRESULT ( *SetPrivateData)(IDirectDrawSurface4 *This,  GUID *, LPVOID, DWORD, DWORD);HRESULT ( *GetPrivateData)(IDirectDrawSurface4 *This,  GUID *, LPVOID, LPDWORD);HRESULT ( *FreePrivateData)(IDirectDrawSurface4 *This,  GUID *);HRESULT ( *GetUniquenessValue)(IDirectDrawSurface4 *This, LPDWORD);HRESULT ( *ChangeUniquenessValue)(IDirectDrawSurface4 *This);};
struct IDirectDrawSurface5Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface5 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface5 *This);ULONG ( *Release)(IDirectDrawSurface5 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface5 *This, LPDIRECTDRAWSURFACE5);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface5 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface5 *This, LPRECT, LPDIRECTDRAWSURFACE5, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface5 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface5 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE5, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface5 *This, DWORD, LPDIRECTDRAWSURFACE5);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface5 *This, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface5 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *Flip)(IDirectDrawSurface5 *This, LPDIRECTDRAWSURFACE5, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface5 *This, LPDDSCAPS2, LPDIRECTDRAWSURFACE5 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface5 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface5 *This, LPDDSCAPS2);HRESULT ( *GetClipper)(IDirectDrawSurface5 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface5 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface5 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface5 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface5 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface5 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface5 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface5 *This, LPDDSURFACEDESC2);HRESULT ( *Initialize)(IDirectDrawSurface5 *This, LPDIRECTDRAW, LPDDSURFACEDESC2);HRESULT ( *IsLost)(IDirectDrawSurface5 *This);HRESULT ( *Lock)(IDirectDrawSurface5 *This, LPRECT, LPDDSURFACEDESC2, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface5 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface5 *This);HRESULT ( *SetClipper)(IDirectDrawSurface5 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface5 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface5 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface5 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface5 *This, LPRECT);HRESULT ( *UpdateOverlay)(IDirectDrawSurface5 *This, LPRECT, LPDIRECTDRAWSURFACE5, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface5 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface5 *This, DWORD, LPDIRECTDRAWSURFACE5);HRESULT ( *GetDDInterface)(IDirectDrawSurface5 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface5 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface5 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface5 *This, LPDDSURFACEDESC2, DWORD);HRESULT ( *SetPrivateData)(IDirectDrawSurface5 *This,  GUID *, LPVOID, DWORD, DWORD);HRESULT ( *GetPrivateData)(IDirectDrawSurface5 *This,  GUID *, LPVOID, LPDWORD);HRESULT ( *FreePrivateData)(IDirectDrawSurface5 *This,  GUID *);HRESULT ( *GetUniquenessValue)(IDirectDrawSurface5 *This, LPDWORD);HRESULT ( *ChangeUniquenessValue)(IDirectDrawSurface5 *This);HRESULT ( *AlphaBlt)(IDirectDrawSurface5 *This, LPRECT, LPDIRECTDRAWSURFACE5, LPRECT, DWORD, LPDDALPHABLTFX);};
struct IMimeBodyVtbl {HRESULT ( *QueryInterface)(IMimeBody *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeBody *This);ULONG ( *Release)(IMimeBody *This);HRESULT ( *GetClassID)(IMimeBody *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMimeBody *This);HRESULT ( *Load)(IMimeBody *This, LPSTREAM pStm);HRESULT ( *Save)(IMimeBody *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMimeBody *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IMimeBody *This);HRESULT ( *GetPropInfo)(IMimeBody *This, LPCSTR pszName, LPMIMEPROPINFO pInfo);HRESULT ( *SetPropInfo)(IMimeBody *This, LPCSTR pszName, LPCMIMEPROPINFO pInfo);HRESULT ( *GetProp)(IMimeBody *This, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *SetProp)(IMimeBody *This, LPCSTR pszName, DWORD dwFlags, LPCPROPVARIANT pValue);HRESULT ( *AppendProp)(IMimeBody *This, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *DeleteProp)(IMimeBody *This, LPCSTR pszName);HRESULT ( *CopyProps)(IMimeBody *This, ULONG cNames, LPCSTR *prgszName, IMimePropertySet *pPropertySet);HRESULT ( *MoveProps)(IMimeBody *This, ULONG cNames, LPCSTR *prgszName, IMimePropertySet *pPropertySet);HRESULT ( *DeleteExcept)(IMimeBody *This, ULONG cNames, LPCSTR *prgszName);HRESULT ( *QueryProp)(IMimeBody *This, LPCSTR pszName, LPCSTR pszCriteria, boolean fSubString, boolean fCaseSensitive);HRESULT ( *GetCharset)(IMimeBody *This, LPHCHARSET phCharset);HRESULT ( *SetCharset)(IMimeBody *This, HCHARSET hCharset, CSETAPPLYTYPE applytype);HRESULT ( *GetParameters)(IMimeBody *This, LPCSTR pszName, ULONG *pcParams, LPMIMEPARAMINFO *pprgParam);HRESULT ( *IsContentType)(IMimeBody *This, LPCSTR pszPriType, LPCSTR pszSubType);HRESULT ( *BindToObject)(IMimeBody *This,  IID * riid, void **ppvObject);HRESULT ( *Clone)(IMimeBody *This, IMimePropertySet **ppPropertySet);HRESULT ( *SetOption)(IMimeBody *This,  TYPEDID oid, LPCPROPVARIANT pValue);HRESULT ( *GetOption)(IMimeBody *This,  TYPEDID oid, LPPROPVARIANT pValue);HRESULT ( *EnumProps)(IMimeBody *This, DWORD dwFlags, IMimeEnumProperties **ppEnum);HRESULT ( *IsType)(IMimeBody *This, IMSGBODYTYPE bodytype);HRESULT ( *SetDisplayName)(IMimeBody *This, LPCSTR pszDisplay);HRESULT ( *GetDisplayName)(IMimeBody *This, LPSTR *ppszDisplay);HRESULT ( *GetOffsets)(IMimeBody *This, LPBODYOFFSETS pOffsets);HRESULT ( *GetCurrentEncoding)(IMimeBody *This, ENCODINGTYPE *pietEncoding);HRESULT ( *SetCurrentEncoding)(IMimeBody *This, ENCODINGTYPE ietEncoding);HRESULT ( *GetEstimatedSize)(IMimeBody *This, ENCODINGTYPE ietEncoding, ULONG *pcbSize);HRESULT ( *GetDataHere)(IMimeBody *This, ENCODINGTYPE ietEncoding, IStream *pStream);HRESULT ( *GetData)(IMimeBody *This, ENCODINGTYPE ietEncoding, IStream **ppStream);HRESULT ( *SetData)(IMimeBody *This, ENCODINGTYPE ietEncoding, LPCSTR pszPriType, LPCSTR pszSubType,  IID * riid, LPVOID pvObject);HRESULT ( *EmptyData)(IMimeBody *This);HRESULT ( *CopyTo)(IMimeBody *This, IMimeBody *pBody);HRESULT ( *GetTransmitInfo)(IMimeBody *This, LPTRANSMITINFO pTransmitInfo);HRESULT ( *SaveToFile)(IMimeBody *This, ENCODINGTYPE ietEncoding, LPCSTR pszFilePath);HRESULT ( *GetHandle)(IMimeBody *This, LPHBODY phBody);};
struct IMimeMessageVtbl {HRESULT ( *QueryInterface)(IMimeMessage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeMessage *This);ULONG ( *Release)(IMimeMessage *This);HRESULT ( *GetClassID)(IMimeMessage *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMimeMessage *This);HRESULT ( *Load)(IMimeMessage *This, LPSTREAM pStm);HRESULT ( *Save)(IMimeMessage *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMimeMessage *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IMimeMessage *This);HRESULT ( *GetMessageSource)(IMimeMessage *This, IStream **ppStream, DWORD dwFlags);HRESULT ( *GetMessageSize)(IMimeMessage *This, ULONG *pcbSize, DWORD dwFlags);HRESULT ( *LoadOffsetTable)(IMimeMessage *This, IStream *pStream);HRESULT ( *SaveOffsetTable)(IMimeMessage *This, IStream *pStream, DWORD dwFlags);HRESULT ( *GetFlags)(IMimeMessage *This, DWORD *pdwFlags);HRESULT ( *Commit)(IMimeMessage *This, DWORD dwFlags);HRESULT ( *HandsOffStorage)(IMimeMessage *This);HRESULT ( *BindToObject)(IMimeMessage *This,  HBODY hBody,  IID * riid, void **ppvObject);HRESULT ( *SaveBody)(IMimeMessage *This, HBODY hBody, DWORD dwFlags, IStream *pStream);HRESULT ( *InsertBody)(IMimeMessage *This, BODYLOCATION location, HBODY hPivot, LPHBODY phBody);HRESULT ( *GetBody)(IMimeMessage *This, BODYLOCATION location, HBODY hPivot, LPHBODY phBody);HRESULT ( *DeleteBody)(IMimeMessage *This, HBODY hBody, DWORD dwFlags);HRESULT ( *MoveBody)(IMimeMessage *This, HBODY hBody, BODYLOCATION location);HRESULT ( *CountBodies)(IMimeMessage *This, HBODY hParent, boolean fRecurse, ULONG *pcBodies);HRESULT ( *FindFirst)(IMimeMessage *This, LPFINDBODY pFindBody, LPHBODY phBody);HRESULT ( *FindNext)(IMimeMessage *This, LPFINDBODY pFindBody, LPHBODY phBody);HRESULT ( *ResolveURL)(IMimeMessage *This, HBODY hRelated, LPCSTR pszBase, LPCSTR pszURL, DWORD dwFlags, LPHBODY phBody);HRESULT ( *ToMultipart)(IMimeMessage *This, HBODY hBody, LPCSTR pszSubType, LPHBODY phMultipart);HRESULT ( *GetBodyOffsets)(IMimeMessage *This, HBODY hBody, LPBODYOFFSETS pOffsets);HRESULT ( *GetCharset)(IMimeMessage *This, LPHCHARSET phCharset);HRESULT ( *SetCharset)(IMimeMessage *This, HCHARSET hCharset, CSETAPPLYTYPE applytype);HRESULT ( *IsBodyType)(IMimeMessage *This, HBODY hBody, IMSGBODYTYPE bodytype);HRESULT ( *IsContentType)(IMimeMessage *This, HBODY hBody, LPCSTR pszPriType, LPCSTR pszSubType);HRESULT ( *QueryBodyProp)(IMimeMessage *This, HBODY hBody, LPCSTR pszName, LPCSTR pszCriteria, boolean fSubString, boolean fCaseSensitive);HRESULT ( *GetBodyProp)(IMimeMessage *This, HBODY hBody, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *SetBodyProp)(IMimeMessage *This, HBODY hBody, LPCSTR pszName, DWORD dwFlags, LPCPROPVARIANT pValue);HRESULT ( *DeleteBodyProp)(IMimeMessage *This, HBODY hBody, LPCSTR pszName);HRESULT ( *SetOption)(IMimeMessage *This,  TYPEDID oid, LPCPROPVARIANT pValue);HRESULT ( *GetOption)(IMimeMessage *This,  TYPEDID oid, LPPROPVARIANT pValue);HRESULT ( *CreateWebPage)(IMimeMessage *This, IStream *pRootStm, LPWEBPAGEOPTIONS pOptions, IMimeMessageCallback *pCallback, IMoniker **ppMoniker);HRESULT ( *GetProp)(IMimeMessage *This, LPCSTR pszName, DWORD dwFlags, LPPROPVARIANT pValue);HRESULT ( *SetProp)(IMimeMessage *This, LPCSTR pszName, DWORD dwFlags, LPCPROPVARIANT pValue);HRESULT ( *DeleteProp)(IMimeMessage *This, LPCSTR pszName);HRESULT ( *QueryProp)(IMimeMessage *This, LPCSTR pszName, LPCSTR pszCriteria, boolean fSubString, boolean fCaseSensitive);HRESULT ( *GetTextBody)(IMimeMessage *This, DWORD dwTxtType, ENCODINGTYPE ietEncoding, IStream **ppStream, LPHBODY phBody);HRESULT ( *SetTextBody)(IMimeMessage *This, DWORD dwTxtType, ENCODINGTYPE ietEncoding, HBODY hAlternative, IStream *pStream, LPHBODY phBody);HRESULT ( *AttachObject)(IMimeMessage *This,  IID * riid, void *pvObject, LPHBODY phBody);HRESULT ( *AttachFile)(IMimeMessage *This, LPCSTR pszFilePath, IStream *pstmFile, LPHBODY phBody);HRESULT ( *AttachURL)(IMimeMessage *This, LPCSTR pszBase, LPCSTR pszURL, DWORD dwFlags, IStream *pstmURL, LPSTR *ppszCIDURL, LPHBODY phBody);HRESULT ( *GetAttachments)(IMimeMessage *This, ULONG *pcAttach, LPHBODY *pprghAttach);HRESULT ( *GetAddressTable)(IMimeMessage *This, IMimeAddressTable **ppTable);HRESULT ( *GetSender)(IMimeMessage *This, LPADDRESSPROPS pAddress);HRESULT ( *GetAddressTypes)(IMimeMessage *This, DWORD dwAdrTypes, DWORD dwProps, LPADDRESSLIST pList);HRESULT ( *GetAddressFormat)(IMimeMessage *This, DWORD dwAdrType, ADDRESSFORMAT format, LPSTR *ppszFormat);HRESULT ( *EnumAddressTypes)(IMimeMessage *This, DWORD dwAdrTypes, DWORD dwProps, IMimeEnumAddressTypes **ppEnum);HRESULT ( *SplitMessage)(IMimeMessage *This, ULONG cbMaxPart, IMimeMessageParts **ppParts);HRESULT ( *GetRootMoniker)(IMimeMessage *This, IMoniker **ppMoniker);};
struct IDirect3DDevice8Vtbl {HRESULT ( *QueryInterface)(IDirect3DDevice8 *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IDirect3DDevice8 *This);ULONG ( *Release)(IDirect3DDevice8 *This);HRESULT ( *TestCooperativeLevel)(IDirect3DDevice8 *This);UINT ( *GetAvailableTextureMem)(IDirect3DDevice8 *This);HRESULT ( *ResourceManagerDiscardBytes)(IDirect3DDevice8 *This, DWORD Bytes);HRESULT ( *GetDirect3D)(IDirect3DDevice8 *This, IDirect3D8 **ppD3D8);HRESULT ( *GetDeviceCaps)(IDirect3DDevice8 *This, D3DCAPS8 *pCaps);HRESULT ( *GetDisplayMode)(IDirect3DDevice8 *This, D3DDISPLAYMODE *pMode);HRESULT ( *GetCreationParameters)(IDirect3DDevice8 *This, D3DDEVICE_CREATION_PARAMETERS *pParameters);HRESULT ( *SetCursorProperties)(IDirect3DDevice8 *This, UINT XHotSpot, UINT YHotSpot, IDirect3DSurface8 *pCursorBitmap);void ( *SetCursorPosition)(IDirect3DDevice8 *This, UINT XScreenSpace, UINT YScreenSpace, DWORD Flags);BOOL ( *ShowCursor)(IDirect3DDevice8 *This, BOOL bShow);HRESULT ( *CreateAdditionalSwapChain)(IDirect3DDevice8 *This, D3DPRESENT_PARAMETERS *pPresentationParameters, IDirect3DSwapChain8 **pSwapChain);HRESULT ( *Reset)(IDirect3DDevice8 *This, D3DPRESENT_PARAMETERS *pPresentationParameters);HRESULT ( *Present)(IDirect3DDevice8 *This,  RECT *pSourceRect,  RECT *pDestRect, HWND hDestWindowOverride,  RGNDATA *pDirtyRegion);HRESULT ( *GetBackBuffer)(IDirect3DDevice8 *This, UINT BackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface8 **ppBackBuffer);HRESULT ( *GetRasterStatus)(IDirect3DDevice8 *This, D3DRASTER_STATUS *pRasterStatus);void ( *SetGammaRamp)(IDirect3DDevice8 *This, DWORD Flags,  D3DGAMMARAMP *pRamp);void ( *GetGammaRamp)(IDirect3DDevice8 *This, D3DGAMMARAMP *pRamp);HRESULT ( *CreateTexture)(IDirect3DDevice8 *This, UINT Width, UINT Height, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture8 **ppTexture);HRESULT ( *CreateVolumeTexture)(IDirect3DDevice8 *This, UINT Width, UINT Height, UINT Depth, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture8 **ppVolumeTexture);HRESULT ( *CreateCubeTexture)(IDirect3DDevice8 *This, UINT EdgeLength, UINT Levels, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture8 **ppCubeTexture);HRESULT ( *CreateVertexBuffer)(IDirect3DDevice8 *This, UINT Length, DWORD Usage, DWORD FVF, D3DPOOL Pool, IDirect3DVertexBuffer8 **ppVertexBuffer);HRESULT ( *CreateIndexBuffer)(IDirect3DDevice8 *This, UINT Length, DWORD Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer8 **ppIndexBuffer);HRESULT ( *CreateRenderTarget)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, BOOL Lockable, IDirect3DSurface8 **ppSurface);HRESULT ( *CreateDepthStencilSurface)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, IDirect3DSurface8 **ppSurface);HRESULT ( *CreateImageSurface)(IDirect3DDevice8 *This, UINT Width, UINT Height, D3DFORMAT Format, IDirect3DSurface8 **ppSurface);HRESULT ( *CopyRects)(IDirect3DDevice8 *This, IDirect3DSurface8 *pSourceSurface,  RECT *pSourceRectsArray, UINT cRects, IDirect3DSurface8 *pDestinationSurface,  POINT *pDestPointsArray);HRESULT ( *UpdateTexture)(IDirect3DDevice8 *This, IDirect3DBaseTexture8 *pSourceTexture, IDirect3DBaseTexture8 *pDestinationTexture);HRESULT ( *GetFrontBuffer)(IDirect3DDevice8 *This, IDirect3DSurface8 *pDestSurface);HRESULT ( *SetRenderTarget)(IDirect3DDevice8 *This, IDirect3DSurface8 *pRenderTarget, IDirect3DSurface8 *pNewZStencil);HRESULT ( *GetRenderTarget)(IDirect3DDevice8 *This, IDirect3DSurface8 **ppRenderTarget);HRESULT ( *GetDepthStencilSurface)(IDirect3DDevice8 *This, IDirect3DSurface8 **ppZStencilSurface);HRESULT ( *BeginScene)(IDirect3DDevice8 *This);HRESULT ( *EndScene)(IDirect3DDevice8 *This);HRESULT ( *Clear)(IDirect3DDevice8 *This, DWORD Count,  D3DRECT *pRects, DWORD Flags, D3DCOLOR Color, float Z, DWORD Stencil);HRESULT ( *SetTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE State,  D3DMATRIX *pMatrix);HRESULT ( *GetTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE State, D3DMATRIX *pMatrix);HRESULT ( *MultiplyTransform)(IDirect3DDevice8 *This, D3DTRANSFORMSTATETYPE,  D3DMATRIX *);HRESULT ( *SetViewport)(IDirect3DDevice8 *This,  D3DVIEWPORT8 *pViewport);HRESULT ( *GetViewport)(IDirect3DDevice8 *This, D3DVIEWPORT8 *pViewport);HRESULT ( *SetMaterial)(IDirect3DDevice8 *This,  D3DMATERIAL8 *pMaterial);HRESULT ( *GetMaterial)(IDirect3DDevice8 *This, D3DMATERIAL8 *pMaterial);HRESULT ( *SetLight)(IDirect3DDevice8 *This, DWORD Index,  D3DLIGHT8 *);HRESULT ( *GetLight)(IDirect3DDevice8 *This, DWORD Index, D3DLIGHT8 *);HRESULT ( *LightEnable)(IDirect3DDevice8 *This, DWORD Index, BOOL Enable);HRESULT ( *GetLightEnable)(IDirect3DDevice8 *This, DWORD Index, BOOL *pEnable);HRESULT ( *SetClipPlane)(IDirect3DDevice8 *This, DWORD Index,  float *pPlane);HRESULT ( *GetClipPlane)(IDirect3DDevice8 *This, DWORD Index, float *pPlane);HRESULT ( *SetRenderState)(IDirect3DDevice8 *This, D3DRENDERSTATETYPE State, DWORD Value);HRESULT ( *GetRenderState)(IDirect3DDevice8 *This, D3DRENDERSTATETYPE State, DWORD *pValue);HRESULT ( *BeginStateBlock)(IDirect3DDevice8 *This);HRESULT ( *EndStateBlock)(IDirect3DDevice8 *This, DWORD *pToken);HRESULT ( *ApplyStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *CaptureStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *DeleteStateBlock)(IDirect3DDevice8 *This, DWORD Token);HRESULT ( *CreateStateBlock)(IDirect3DDevice8 *This, D3DSTATEBLOCKTYPE Type, DWORD *pToken);HRESULT ( *SetClipStatus)(IDirect3DDevice8 *This,  D3DCLIPSTATUS8 *pClipStatus);HRESULT ( *GetClipStatus)(IDirect3DDevice8 *This, D3DCLIPSTATUS8 *pClipStatus);HRESULT ( *GetTexture)(IDirect3DDevice8 *This, DWORD Stage, IDirect3DBaseTexture8 **ppTexture);HRESULT ( *SetTexture)(IDirect3DDevice8 *This, DWORD Stage, IDirect3DBaseTexture8 *pTexture);HRESULT ( *GetTextureStageState)(IDirect3DDevice8 *This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD *pValue);HRESULT ( *SetTextureStageState)(IDirect3DDevice8 *This, DWORD Stage, D3DTEXTURESTAGESTATETYPE Type, DWORD Value);HRESULT ( *ValidateDevice)(IDirect3DDevice8 *This, DWORD *pNumPasses);HRESULT ( *GetInfo)(IDirect3DDevice8 *This, DWORD DevInfoID, void *pDevInfoStruct, DWORD DevInfoStructSize);HRESULT ( *SetPaletteEntries)(IDirect3DDevice8 *This, UINT PaletteNumber,  PALETTEENTRY *pEntries);HRESULT ( *GetPaletteEntries)(IDirect3DDevice8 *This, UINT PaletteNumber, PALETTEENTRY *pEntries);HRESULT ( *SetCurrentTexturePalette)(IDirect3DDevice8 *This, UINT PaletteNumber);HRESULT ( *GetCurrentTexturePalette)(IDirect3DDevice8 *This, UINT *PaletteNumber);HRESULT ( *DrawPrimitive)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT StartVertex, UINT PrimitiveCount);HRESULT ( *DrawIndexedPrimitive)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE, UINT minIndex, UINT NumVertices, UINT startIndex, UINT primCount);HRESULT ( *DrawPrimitiveUP)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT PrimitiveCount,  void *pVertexStreamZeroData, UINT VertexStreamZeroStride);HRESULT ( *DrawIndexedPrimitiveUP)(IDirect3DDevice8 *This, D3DPRIMITIVETYPE PrimitiveType, UINT MinVertexIndex, UINT NumVertexIndices, UINT PrimitiveCount,  void *pIndexData, D3DFORMAT IndexDataFormat,  void *pVertexStreamZeroData, UINT VertexStreamZeroStride);HRESULT ( *ProcessVertices)(IDirect3DDevice8 *This, UINT SrcStartIndex, UINT DestIndex, UINT VertexCount, IDirect3DVertexBuffer8 *pDestBuffer, DWORD Flags);HRESULT ( *CreateVertexShader)(IDirect3DDevice8 *This,  DWORD *pDeclaration,  DWORD *pFunction, DWORD *pHandle, DWORD Usage);HRESULT ( *SetVertexShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *GetVertexShader)(IDirect3DDevice8 *This, DWORD *pHandle);HRESULT ( *DeleteVertexShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *SetVertexShaderConstant)(IDirect3DDevice8 *This, DWORD Register,  void *pConstantData, DWORD ConstantCount);HRESULT ( *GetVertexShaderConstant)(IDirect3DDevice8 *This, DWORD Register, void *pConstantData, DWORD ConstantCount);HRESULT ( *GetVertexShaderDeclaration)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *GetVertexShaderFunction)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *SetStreamSource)(IDirect3DDevice8 *This, UINT StreamNumber, IDirect3DVertexBuffer8 *pStreamData, UINT Stride);HRESULT ( *GetStreamSource)(IDirect3DDevice8 *This, UINT StreamNumber, IDirect3DVertexBuffer8 **ppStreamData, UINT *pStride);HRESULT ( *SetIndices)(IDirect3DDevice8 *This, IDirect3DIndexBuffer8 *pIndexData, UINT BaseVertexIndex);HRESULT ( *GetIndices)(IDirect3DDevice8 *This, IDirect3DIndexBuffer8 **ppIndexData, UINT *pBaseVertexIndex);HRESULT ( *CreatePixelShader)(IDirect3DDevice8 *This,  DWORD *pFunction, DWORD *pHandle);HRESULT ( *SetPixelShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *GetPixelShader)(IDirect3DDevice8 *This, DWORD *pHandle);HRESULT ( *DeletePixelShader)(IDirect3DDevice8 *This, DWORD Handle);HRESULT ( *SetPixelShaderConstant)(IDirect3DDevice8 *This, DWORD Register,  void *pConstantData, DWORD ConstantCount);HRESULT ( *GetPixelShaderConstant)(IDirect3DDevice8 *This, DWORD Register, void *pConstantData, DWORD ConstantCount);HRESULT ( *GetPixelShaderFunction)(IDirect3DDevice8 *This, DWORD Handle, void *pData, DWORD *pSizeOfData);HRESULT ( *DrawRectPatch)(IDirect3DDevice8 *This, UINT Handle,  float *pNumSegs,  D3DRECTPATCH_INFO *pRectPatchInfo);HRESULT ( *DrawTriPatch)(IDirect3DDevice8 *This, UINT Handle,  float *pNumSegs,  D3DTRIPATCH_INFO *pTriPatchInfo);HRESULT ( *DeletePatch)(IDirect3DDevice8 *This, UINT Handle);};
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 {struct tagTYPEDESC *lptdesc;struct tagARRAYDESC *lpadesc;HREFTYPE hreftype;};
union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57 {PCHAR *modv_strvals;struct berval **modv_bvals;};
struct __MIDL___MIDL_itf_strmif_0080_0001 { CLSID *clsMajorType; CLSID *clsMinorType;};
struct _27240A871129E8C5EF2505ED059D4BC8 {unsigned int DispatchTableCount;RPC_DISPATCH_FUNCTION *DispatchTable;int Reserved;};
struct _8474248025A8750E00C60BF8466F1484 {union _8474248025A8750E00C60BF8466F1484___374EDF0D25A28277CD19F16CB81F0F1E Value;unsigned int OperandValid : 1;unsigned int Format : 4;};
typedef HRESULT (*PFN_PROVIDER_TESTFINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
struct _NDIS_802_11_STATUS_INDICATION {NDIS_802_11_STATUS_TYPE StatusType;};
typedef HRESULT (*PFN_PROVIDER_FINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _NDIS_PM_WAKE_UP_CAPABILITIES {NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;NDIS_DEVICE_POWER_STATE MinPatternWakeUp;NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;};
struct _SecPkgContext_PasswordExpiry {TimeStamp tsPasswordExpires;};
typedef HRESULT (*PFN_PROVIDER_CERTTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _SecPkgContext_NativeNamesA {SEC_CHAR *sClientName;SEC_CHAR *sServerName;};
typedef INTERNET_STATUS_CALLBACK *LPINTERNET_STATUS_CALLBACK;
struct NDIS_BPC_STATUS_CONNECTION {BPC_HANDLE nhConnection;BPC_HANDLE nhDevice;};
typedef HRESULT (*PFN_PROVIDER_OBJTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef HRESULT (*PFN_PROVIDER_SIGTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
struct _DEV_BROADCAST_USERDEFINED {struct _DEV_BROADCAST_HDR dbud_dbh;char dbud_szName[1];};
typedef CREATECONVERSATIONINDEX *LPCREATECONVERSATIONINDEX;
typedef HRESULT (*PFN_PROVIDER_CLEANUP_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
struct _CRL_FIND_ISSUED_FOR_PARA {PCCERT_CONTEXT pSubjectCert;PCCERT_CONTEXT pIssuerCert;};
struct _SecPkgContext_AuthorityA {SEC_CHAR *sAuthorityName;};
struct _SecPkgContext_ProtoInfoA {SEC_CHAR *sProtocolName;unsigned int majorVersion;unsigned int minorVersion;};
struct _SecPkgCredentials_NamesA {SEC_CHAR *sUserName;};
struct tagCInterfaceProxyHeader { IID *piid;};
typedef DISPATCHNOTIFICATIONS *LPDISPATCHNOTIFICATIONS;
typedef void RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event);
struct _SecPkgContext_KeyInfoA {SEC_CHAR *sSignatureAlgorithmName;SEC_CHAR *sEncryptAlgorithmName;unsigned int KeySize;unsigned int SignatureAlgorithm;unsigned int EncryptAlgorithm;};
struct _SecPkgContext_Lifespan {TimeStamp tsStart;TimeStamp tsExpiry;};
struct _XMIT_ROUTINE_QUINTUPLE {XMIT_HELPER_ROUTINE pfnTranslateToXmit;XMIT_HELPER_ROUTINE pfnTranslateFromXmit;XMIT_HELPER_ROUTINE pfnFreeXmit;XMIT_HELPER_ROUTINE pfnFreeInst;};
typedef SECURITY_STATUS ( *FREE_CONTEXT_BUFFER_FN)(void *);
typedef LPFNADDPROPSHEETPAGE LPFNSVADDPROPSHEETPAGE;
typedef HRESULT (*PFN_PROVIDER_INIT_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef DOT11_COUNTRY_STRING *PDOT11_COUNTRY_STRING;
typedef LPTHREAD_START_ROUTINE PTHREAD_START_ROUTINE;
struct _BTH_SOCKOPT_SECURITY {int iLength;bt_addr btAddr;unsigned char caData[16];};
struct _CRYPT_OID_FUNC_ENTRY {LPCSTR pszOID;void *pvFuncAddr;};
struct _SecPkgContext_NamesA {SEC_CHAR *sUserName;};
struct _UNIVERSAL_NAME_INFOA {LPSTR lpUniversalName;};
typedef MAPIALLOCATEBUFFER *LPMAPIALLOCATEBUFFER;
struct NDIS_BPC_POOL_RETURN {BPC_HANDLE nhConnection;};
struct _ACTRL_CONTROL_INFOA {LPSTR lpControlId;LPSTR lpControlName;};
struct _CERT_POLICY_MAPPING {LPSTR pszIssuerDomainPolicy;LPSTR pszSubjectDomainPolicy;};
struct _RPC_TRANSFER_SYNTAX {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
struct _TOKEN_PRIMARY_GROUP {PSID PrimaryGroup;};
struct __bth_inquiry_result {BT_ADDR ba;unsigned int cod;unsigned short clock_offset;unsigned char page_scan_mode;unsigned char page_scan_period_mode;unsigned char page_scan_repetition_mode;};
struct tagDBIMPLICITSESSION {IUnknown *pUnkOuter;IID *piid;IUnknown *pSession;};
struct IBaseVideoMixerVtbl {HRESULT ( *SetLeadPin)(IBaseVideoMixer *This, int iPin);HRESULT ( *GetLeadPin)(IBaseVideoMixer *This, int *piPin);HRESULT ( *GetInputPinCount)(IBaseVideoMixer *This, int *piPinCount);HRESULT ( *IsUsingClock)(IBaseVideoMixer *This, int *pbValue);HRESULT ( *SetUsingClock)(IBaseVideoMixer *This, int bValue);HRESULT ( *GetClockPeriod)(IBaseVideoMixer *This, int *pbValue);HRESULT ( *SetClockPeriod)(IBaseVideoMixer *This, int bValue);};
typedef WABALLOCATEBUFFER *LPWABALLOCATEBUFFER;
struct NDIS_BPC_DISCONNECT {BPC_HANDLE nhConnection;};
struct _DISPATCHER_CONTEXT {unsigned int ControlPc;struct _RUNTIME_FUNCTION *FunctionEntry;unsigned int EstablisherFrame;PCONTEXT ContextRecord;};
struct _IMAGE_THUNK_DATA32 {union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D u1;};
struct _IMAGE_THUNK_DATA64 {union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF u1;};
struct _RPC_BINDING_VECTOR {unsigned int Count;RPC_BINDING_HANDLE BindingH[1];};
struct _TOKEN_DEFAULT_DACL {PACL DefaultDacl;};
struct tagHTTPMAILLOCATION {LPSTR pszLocation;};
typedef AMGETERRORTEXTPROCA AMGETERRORTEXTPROC;
typedef LPDDENUMCALLBACKEXA LPDDENUMCALLBACKEX;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef void (*LPGET_USBD_VERSION)(LPDWORD lpdwMajorVersion, LPDWORD lpdwMinorVersion);
typedef MAPIALLOCATEMORE *LPMAPIALLOCATEMORE;
typedef DOT11_MAC_ADDRESS *PDOT11_MAC_ADDRESS;
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;
struct _REMOTE_NAME_INFOA {LPSTR lpUniversalName;LPSTR lpConnectionName;LPSTR lpRemainingPath;};
struct tagHH_SET_INFOTYPE {int cbStruct;LPCSTR pszCatName;LPCSTR pszInfoTypeName;};
typedef WABALLOCATEMORE *LPWABALLOCATEMORE;
typedef SCODE ( *PFNFILLTEXTBUFFER)(struct tagTEXT_SOURCE *pTextSource);
typedef ALLOCATEBUFFER *LPALLOCATEBUFFER;
typedef LPDDENUMCALLBACKA LPDDENUMCALLBACK;
typedef HRESULT ( *LPFNCANUNLOADNOW)();
typedef MAPIFREEBUFFER *LPMAPIFREEBUFFER;
typedef CLIENT_CALLBACK *PCLIENT_CALLBACK;
struct _GENERIC_MAPPING {ACCESS_MASK GenericRead;ACCESS_MASK GenericWrite;ACCESS_MASK GenericExecute;ACCESS_MASK GenericAll;};
struct _PCI_SLOT_NUMBER {union _PCI_SLOT_NUMBER___49AFFD3D7EC59F1BE207C4846B68BFFF u;};
struct tagMIMEPARAMINFO {LPSTR pszName;LPSTR pszData;};
struct tagREGISTERWORDA {LPSTR lpReading;LPSTR lpWord;};
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef ACMDRIVERPROC *LPACMDRIVERPROC;
typedef LPCRECT LPCBORDERWIDTHS;
typedef INTERNET_PORT *LPINTERNET_PORT;
typedef NOTIFCALLBACK *LPNOTIFCALLBACK;
typedef TEXTMETRICOLE *LPTEXTMETRICOLE;
typedef WABFREEBUFFER *LPWABFREEBUFFER;
typedef PST_PROVIDERID *PPST_PROVIDERID;
struct _FLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;STGMEDIUM Stgmed;};
struct _userCLIPFORMAT {int fContext;union _userCLIPFORMAT____MIDL_IWinTypes_0001 u;};
struct tagUNICODERANGE {WCHAR wcFrom;WCHAR wcTo;};
typedef ALLOCATEMORE *LPALLOCATEMORE;
typedef SCARDCONTEXT *LPSCARDCONTEXT;
typedef TIMECALLBACK *LPTIMECALLBACK;
typedef  SEC_CHAR *SECURITY_PCSTR;
struct _tagStartParam {IID iid;IBindCtx *pIBindCtx;IUnknown *pItf;};
struct arp_send_reply {IPAddr DestAddress;IPAddr SrcAddress;};
struct tagDBGROUPINFO {LCID lcid;};
struct tagHH_ENUM_CAT {int cbStruct;LPCSTR pszCatName;LPCSTR pszCatDescription;};
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef SCARDHANDLE *LPSCARDHANDLE;
typedef DXTASKPROC *PFNDXTASKPROC;
typedef SCARDCONTEXT *PSCARDCONTEXT;
typedef SEC_CHAR *SECURITY_PSTR;
struct _CERECORDINFO {CEOID oidParent;};
struct tagHH_ENUM_IT {int cbStruct;int iType;LPCSTR pszCatName;LPCSTR pszITName;LPCSTR pszITDescription;};
typedef int  IIDLookupRtn( IID *pIID, int *pIndex);
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef FREEBUFFER *LPFREEBUFFER;
typedef int ( *LPWPUFDISSET)(SOCKET s, fd_set *fdset);
typedef void ( *LPWSAUSERAPC)(DWORD_PTR dwContext);
typedef DRVCALLBACK MIDICALLBACK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef DRVCALLBACK *PDRVCALLBACK;
typedef DXAPCPROC *PFNDXAPCPROC;
typedef int ( *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
typedef int ( *PFNTVCOMPARE)(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
typedef HH_INFOTYPE *PHH_INFOTYPE;
typedef SCARDHANDLE *PSCARDHANDLE;
typedef WCHAR UNICODE_PATH[128];
typedef DRVCALLBACK WAVECALLBACK;
struct _SecPkgInfoA {unsigned int fCapabilities;unsigned short wVersion;unsigned short wRPCID;unsigned int cbMaxToken;SEC_CHAR *Name;SEC_CHAR *Comment;};
struct _TOKEN_OWNER {PSID Owner;};
struct _UUID_VECTOR {unsigned int Count;UUID *Uuid[1];};
typedef CSTRENTRY *LPCSTRENTRY;
typedef CSTRTABLE *LPCSTRTABLE;
typedef DISMISSMODELESS *LPFNDISMISS;
typedef HINTERNET *LPHINTERNET;
typedef OLERENDER *LPOLERENDER;
typedef OLEUPDATE *LPOLEUPDATE;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef WABOPENEX *LPWABOPENEX;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef PROPID QUEUEPROPID;
struct _FilterInfo {WCHAR achName[128];IFilterGraph *pGraph;};
struct tagDBVECTOR {DBLENGTH size;void *ptr;};
struct tagIMAPADDR {LPSTR pszName;LPSTR pszADL;LPSTR pszMailbox;LPSTR pszHost;struct tagIMAPADDR *pNext;};
typedef DWORD_PTR HSEMAPHORE;
typedef MMIOPROC *LPMMIOPROC;
typedef PROPID MGMTPROPID;
typedef DWORDLONG *PDWORDLONG;
typedef IIDLookupRtn *PIIDLookup;
typedef OLEUPDATE *POLEUPDATE;
struct _RPC_IF_ID {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
struct berelement {PCHAR opaque;};
typedef PCONTEXT LPCONTEXT;
typedef ACCELERATEABSDI *LPFNABSDI;
typedef WABOPEN *LPWABOPEN;
typedef PROPID MSGPROPID;
typedef CARD_ISR *PCARD_ISR;
typedef CEPROPID *PCEPROPID;
typedef WCHAR SEC_WCHAR;
typedef WPARAM WPARAM_16;
struct _StrEntry {LPSTR pszName;LPSTR pszValue;};
typedef HGLOBAL HOLEMENU;
typedef DDCAPS *LPDDCAPS;
typedef DISPID MEMBERID;
typedef BOOLEAN *PBOOLEAN;
typedef PROPID QMPROPID;
struct in6_addr {union in6_addr___8ED4E7701E25C3FE29CB3F55C2DB6D15 u;};
typedef CLSID *LPCLSID;
typedef LPCSTR LPCTSTR;
typedef  WCHAR *LPCWSTR;
typedef FMTID *LPFMTID;
typedef WCHAR OLECHAR;
typedef FNIDLE *PFNIDLE;
typedef HUSKEY *PHUSKEY;
typedef WCHAR SN_CHAR;
struct in_addr {union in_addr___C13EC994467D6E67044F092615EC7EA9 S_un;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
typedef  IID *LPCIID;
typedef  WCHAR *LPCWCH;
typedef LPSTR LPTSTR;
typedef WCHAR *LPWSTR;
typedef WCHAR *NWPSTR;
typedef CEOID *PCEOID;
typedef  WCHAR *PCWSTR;
typedef KIRQL *PKIRQL;
typedef SCODE *PSCODE;
typedef WCHAR *PWCHAR;
typedef IID *LPIID;
typedef WCHAR *LPWCH;
typedef  WCHAR *PCWCH;
typedef WCHAR *PWSTR;
typedef OLECHAR *BSTR;
typedef ALC *PALC;
typedef OLECHAR **SNB;
struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678 {LPWSAOVERLAPPED lpOverlapped;LPWSAOVERLAPPED_COMPLETION_ROUTINE lpfnCompletionProc;};
struct _IRP___587A9B960BE92E4E8E029EB753BAD923___15DEB8494280A91F57C8F397618367A3 {PIO_APC_ROUTINE UserApcRoutine;PVOID UserApcContext;};
union _EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED {LPTSTR lpszComponent;ULONG ulItemID;};
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 {void *pvSystemStore;LPCSTR pszSystemStore;LPCWSTR pwszSystemStore;};
union _NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F {struct _NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F___AuthenticationEvent AuthenticationEvent;NDIS_802_11_RSSI RssiTrigger;};
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 {UINT nStartPage;LPCWSTR pStartPage;};
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED {LPCWSTR pszTemplate;LPCDLGTEMPLATE pResource;};
union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923 {LONG lID;LPWSTR lpwstrName;};
union SPC_LINK____5823D59480DB17DC94F0503486FD38F0 {LPWSTR pwszUrl;SPC_SERIALIZED_OBJECT Moniker;LPWSTR pwszFile;};
union _STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D {LPWSTR pOleStr;UINT uOffset;char cStr[260];};
union _IRP___2B8045857F44E8706EFE3A31F95ACA19 {struct _IRP___2B8045857F44E8706EFE3A31F95ACA19___12B2BAD74E2AB4DE00B958803C411E58 Overlay;ULONG CompletionKey;};
union _IRP___587A9B960BE92E4E8E029EB753BAD923 {struct _IRP___587A9B960BE92E4E8E029EB753BAD923___15DEB8494280A91F57C8F397618367A3 AsynchronousParameters;LARGE_INTEGER AllocationSize;};
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {HKEY hKeyBase;LPWSTR pwszRegPath;};
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {HANDLE hFile;LPCWSTR lpPath;LPCWSTR lpDisplayName;};
struct _CERT_POLICY_QUALIFIER_USER_NOTICE {CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;LPWSTR pszDisplayText;};
struct __MIDL___MIDL_itf_strmif_0076_0001 {CLSID Clsid;LPWSTR Name;};
struct _1CF5A01E195BE25BEDA13B6A0EE28B07 {DWORD CategoryId;DWORD AttributeId;union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56 AttributeType;};
struct _6950E4854C03824D44DF624674A695D1 {LPCTSTR ContentType;LPCTSTR Language;DWORD Size;};
struct _73827E02090E4C689AB98CDF13C808CD {DWORD cbStruct;DWORD dwFlags;LPWSTR pDefaultScope;LPWSTR pDefaultSaveLocation;LPWSTR pUserName;LPWSTR pPassword;LPWSTR pServer;};
struct _8FE251E0C9BEAEF58C2D97D4F1899077 {_A5A2C297D512B29747AD9A814A819610 __anonymous0;UINT uCodePage;};
struct _C3D536761911E1B34BFF5DAB2CC3A2E9 {DWORD dwAccessType;LPCTSTR lpszProxy;LPCTSTR lpszProxyBypass;};
struct _FF89E438303108C0D33906FD5928F176 {DWORD dwOption;union _FF89E438303108C0D33906FD5928F176___7395E293A6E60324CDBFB0E25A5179BF Value;};
struct _CERT_REGISTRY_STORE_ROAMING_PARA {HKEY hKey;LPWSTR pwszStoreDirectory;};
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;LPVOID pvCompletion;};
struct _CERT_SYSTEM_STORE_RELOCATE_PARA {_CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 __anonymous0;_CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 __anonymous1;};
struct _INTERNET_CACHE_CONTAINER_INFOW {DWORD dwCacheVersion;LPWSTR lpszName;LPWSTR lpszCachePrefix;LPWSTR lpszVolumeLabel;LPWSTR lpszVolumeTitle;};
typedef BOOL (*LPUN_REGISTER_CLIENT_DRIVER_ID)(LPCWSTR);
struct _CRYPT_PASSWORD_CREDENTIALSW {DWORD cbSize;LPWSTR pszUsername;LPWSTR pszPassword;};
typedef BOOL (*LPREGISTER_CLIENT_DRIVER_ID)(LPCWSTR);
struct _CMSG_RECIPIENT_ENCODE_INFO {DWORD dwRecipientChoice;_CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA __anonymous0;};
typedef HKEY (*LPOPEN_CLIENT_REGISTRY_KEY)(LPCWSTR);
struct _CMSG_CMS_RECIPIENT_INFO {DWORD dwRecipientChoice;_CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC __anonymous0;};
struct _LOCALMANAGEDAPPLICATION {LPWSTR pszDeploymentName;LPWSTR pszPolicyName;LPWSTR pszProductId;DWORD dwState;};
struct _NDISPWR_SAVEPOWERSTATE {LPCWSTR pwcAdapterName;CEDEVICE_POWER_STATE CePowerState;};
struct _WIN_TRUST_SUBJECT_FILE {HANDLE hFile;LPCWSTR lpPath;};
struct _PST_AUTHENTICODEDATA {DWORD cbSize;DWORD dwModifiers;LPCWSTR szRootCA;LPCWSTR szIssuer;LPCWSTR szPublisher;LPCWSTR szProgramName;};
struct tagCInterfaceStubVtbl {CInterfaceStubHeader header;IRpcStubBufferVtbl Vtbl;};
typedef BOOL ( *UILANGUAGE_ENUMPROCW)(LPWSTR);
struct _PST_BINARYCHECKDATA {DWORD cbSize;DWORD dwModifiers;LPCWSTR szFilePath;};
struct _SSLVALIDATECERTHOOK {SSLVALIDATECERTFUNC HookFunc;LPVOID pvArg;};
struct _wireSAFEARRAY_UNION {ULONG sfType;union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 u;};
struct tagDebugPropertyInfo {DWORD m_dwValidFields;BSTR m_bstrName;BSTR m_bstrType;BSTR m_bstrValue;BSTR m_bstrFullName;DWORD m_dwAttrib;IDebugProperty *m_pDebugProp;};
struct _ACTRL_ACCESS_INFOW {ULONG fAccessPermission;LPWSTR lpAccessPermissionName;};
struct _CRYPT_PROVUI_FUNCS {DWORD cbStruct;struct _CRYPT_PROVUI_DATA *psUIData;PFN_PROVUI_CALL pfnOnMoreInfoClick;PFN_PROVUI_CALL pfnOnMoreInfoClickDefault;PFN_PROVUI_CALL pfnOnAdvancedClick;PFN_PROVUI_CALL pfnOnAdvancedClickDefault;};
struct _POWER_RELATIONSHIP {HANDLE hParent;LPCWSTR pwsParent;HANDLE hChild;LPCWSTR pwsChild;};
struct _SPC_SP_AGENCY_INFO {struct SPC_LINK_ *pPolicyInformation;LPWSTR pwszPolicyDisplayText;PSPC_IMAGE pLogoImage;struct SPC_LINK_ *pLogoLink;};
struct _SSLAUTHREQUESTHOOK {SSLAUTHREQUESTFUNC HookFunc;LPVOID pvArg;};
struct _SSLKEYEXCHANGEHOOK {SSLKEYEXCHANGEFUNC HookFunc;LPVOID pvArg;};
typedef BOOL ( *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL ( *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL ( *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL ( *ISMODULEREMOVABLE)(LPCTSTR lpszFile);
typedef BOOL ( *TIMEFMT_ENUMPROCW)(LPWSTR);
struct _CMSG_STREAM_INFO {DWORD cbContent;PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;void *pvArg;};
struct _INBOX_EVENT_DATA {DWORD dwRequest;DWORD dwInboxEvent;LPCWSTR pszName;LPCWSTR pszInboxDestination;IHeaderCollection *pHeaderCol;IStream *pStream;};
struct _NDIS_802_11_TEST {ULONG Length;ULONG Type;_NDIS_802_11_TEST___13BE848387D0B4BF1D9264D50C1DFD1F __anonymous0;};
struct _SSLSIGNATUREHOOK {SSLSIGNATUREFUNC HookFunc;LPVOID pvArg;};
struct _ShellAppCategory {LPWSTR pszCategory;UINT idCategory;};
typedef BOOL ( *LOCALE_ENUMPROCW)(LPWSTR);
struct _CRYPT_URL_ARRAY {DWORD cUrl;LPWSTR *rgwszUrl;};
struct _WINDOWS_IAS_SET {char irdaClassName[64];char irdaAttribName[256];u_long irdaAttribType;union _WINDOWS_IAS_SET___DDA767B7F38635A0F2A993A16BD02191 irdaAttribute;};
struct tagDRVCONFIGINFO {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;};
struct tagMONITORINFOEX {tagMONITORINFO __anonymous0;TCHAR szDevice[32];};
struct tagTCITEMHEADERW {UINT mask;UINT lpReserved1;UINT lpReserved2;LPWSTR pszText;int cchTextMax;int iImage;};
struct DRVCONFIGINFOEX {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;DWORD dnDevNode;};
struct _CAT_MEMBERINFO {LPWSTR pwszSubjGuid;DWORD dwCertVersion;};
struct _UNICODE_STRING {USHORT Length;USHORT MaximumLength;LPWSTR Buffer;};
struct tagMSAAMENUINFO {DWORD dwMSAASignature;DWORD cchWText;LPWSTR pszWText;};
struct _SWStringArray {ULONG cValues;LPWSTR *lppszW;};
struct tagRESTRICTION {ULONG rt;ULONG weight;union tagRESTRICTION___URes res;};
typedef DWORD (*PFN_DEV_ENTRY)(LPTSTR);
struct _NETRESOURCEW {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;LPWSTR lpProvider;};
struct _NOTIFICATION {ULONG ulEventType;ULONG ulAlignPad;union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4 info;};
struct _PST_TYPEINFO {DWORD cbSize;LPWSTR szDisplayName;};
struct _SRestriction {ULONG rt;union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6 res;};
struct _SdpQueryUuid {SdpQueryUuidUnion u;USHORT uuidType;};
struct _currencyfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPWSTR lpCurrencySymbol;};
struct _tagGroupInfo {ULONG cbSize;LPWSTR pwzGroupname;};
struct _AppInfoData {DWORD cbSize;DWORD dwMask;LPWSTR pszDisplayName;LPWSTR pszVersion;LPWSTR pszPublisher;LPWSTR pszProductID;LPWSTR pszRegisteredOwner;LPWSTR pszRegisteredCompany;LPWSTR pszLanguage;LPWSTR pszSupportUrl;LPWSTR pszSupportTelephone;LPWSTR pszHelpLink;LPWSTR pszInstallLocation;LPWSTR pszInstallSource;LPWSTR pszInstallDate;LPWSTR pszContact;LPWSTR pszComments;LPWSTR pszImage;LPWSTR pszReadmeUrl;LPWSTR pszUpdateInfoUrl;};
struct _CEOIDINFOEX {WORD wVersion;WORD wObjType;_CEOIDINFOEX___69C160A242F05D05EB1D41CC7FD259DB __anonymous0;};
struct _DEBUG_EVENT {DWORD dwDebugEventCode;DWORD dwProcessId;DWORD dwThreadId;union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 u;};
struct _tagITEMPROP {VARIANT variantValue;LPWSTR pwszName;};
struct ldapsortkeyW {PWCHAR sk_attrtype;PWCHAR sk_matchruleoid;BOOLEAN sk_reverseorder;};
struct tagHH_AKLINK {int cbStruct;BOOL fReserved;LPCTSTR pszKeywords;LPCTSTR pszUrl;LPCTSTR pszMsgText;LPCTSTR pszMsgTitle;LPCTSTR pszWindow;BOOL fIndexOnFail;};
struct tagLVCOLUMNW {UINT mask;int fmt;int cx;LPWSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagPARAMDATA {OLECHAR *szName;VARTYPE vt;};
struct _GDI_OBJECT {DWORD ObjectType;union _GDI_OBJECT____MIDL_IAdviseSink_0002 u;};
struct _numberfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;};
struct ip_msfilter {struct in_addr imsf_multiaddr;struct in_addr imsf_interface;u_long imsf_fmode;u_long imsf_numsrc;struct in_addr imsf_slist[1];};
struct sockaddr_in {short sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct tagCALPWSTR {ULONG cElems;LPWSTR *pElems;};
struct tagPICTDESC {UINT cbSizeofstruct;UINT picType;tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D __anonymous0;};
struct tagTYPEDESC {tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 __anonymous0;VARTYPE vt;};
struct _CEOIDINFO {WORD wObjType;WORD wPad;_CEOIDINFO___51E958489F3A3AB9E4FA9A4B244F18C9 __anonymous0;};
struct _MAPIERROR {ULONG ulVersion;LPTSTR lpszError;LPTSTR lpszComponent;ULONG ulLowLevelError;ULONG ulContext;};
struct _xml_error {unsigned int _nLine;BSTR _pchBuf;unsigned int _cchBuf;unsigned int _ich;BSTR _pszFound;BSTR _pszExpected;DWORD _reserved1;DWORD _reserved2;};
struct mmtime_tag {UINT wType;union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 u;};
struct SPC_LINK_ {DWORD dwLinkChoice;SPC_LINK____5823D59480DB17DC94F0503486FD38F0 __anonymous0;};
struct _DOCINFOW {int cbSize;LPCWSTR lpszDocName;LPCWSTR lpszOutput;LPCWSTR lpszDatatype;DWORD fwType;};
struct tagCABSTR {ULONG cElems;BSTR *pElems;};
struct tagHLITEM {ULONG uHLID;LPWSTR pwzFriendlyName;};
struct NodeData {USHORT type;USHORT specificType;NodeDataUnion u;};
struct tagINPUT {DWORD type;tagINPUT___72687D791E298366090936F57062F9D6 __anonymous0;};
struct _STRRET {UINT uType;_STRRET___CBA4CBE4EE73FCDBDFD08B2527F2F26D __anonymous0;};
struct DXBNDS {DXBNDTYPE eType;union DXBNDS____MIDL___MIDL_itf_dxtrans_0155_0001 u;};
union _69ED22A368F3E798C4741346320560FE___5D1CD365174EA865F6BBD61804407C82 {DWORD dwValue;LPWSTR pszValue;FILETIME ftValue;};
union _NMSHN___8295B2051F25299B4D869C96899A3C0F {LPCTSTR pszLink;BOOL fTimeout;POINT pt;};
typedef BOOL ( *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg);
struct _2E02FE147086727B9806CD802F6B77B7 {DWORD dwSize;LPWSTR pszConnection;DWORD dwOptionCount;DWORD dwOptionError;LPINTERNET_PER_CONN_OPTIONW pOptions;};
struct _8CFCABD0DC01E1B1C2FF20A071112968 {DWORD dwSize;SYSTEMTIME stStartTime;SYSTEMTIME stDeltaTime;SYSTEMTIME stRetryTime;DWORD dwType;DWORD dwMaxRetryTime;DWORD dwFlags;LPTSTR pwzRDN;LPTSTR pwzURL;LPTSTR pwzURLSig;LPTSTR pwzMisc;LPTSTR pwzData;LPTSTR pwzXml;};
struct _B4498E7712516769976529B01E1F74C2 {DWORD cbStruct;DWORD dwOptions;PFN_AUTH_NOTIFY pfnNotify;DWORD_PTR dwContext;};
struct _FB1D2264C317C52716420591CB70B7FC {FILETIME ftExpiry;FILETIME ftStart;LPTSTR lpszSubjectInfo;LPTSTR lpszIssuerInfo;LPTSTR lpszProtocolName;LPTSTR lpszSignatureAlgName;LPTSTR lpszEncryptionAlgName;DWORD dwKeySize;};
typedef SECURITY_STATUS ( *QUERY_SECURITY_PACKAGE_INFO_FN_W)(SEC_WCHAR *, PSecPkgInfoW *);
struct _WTD_GENERIC_CHAIN_POLICY_DATA {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;PWTD_GENERIC_CHAIN_POLICY_CREATE_INFO pSignerChainInfo;PWTD_GENERIC_CHAIN_POLICY_CREATE_INFO pCounterSignerChainInfo;PFN_WTD_GENERIC_CHAIN_POLICY_CALLBACK pfnPolicyCallback;void *pvPolicyArg;};
struct tagSOLE_AUTHENTICATION_SERVICE {DWORD dwAuthnSvc;DWORD dwAuthzSvc;OLECHAR *pPrincipalName;HRESULT hr;};
typedef BOOL (*LPUN_REGISTER_CLIENT_SETTINGS)(LPCWSTR, LPCWSTR, LPCUSB_DRIVER_SETTINGS);
typedef BOOL (*LPREGISTER_CLIENT_SETTINGS)(LPCWSTR, LPCWSTR, LPCWSTR, LPCUSB_DRIVER_SETTINGS);
struct _CRYPTPROTECT_PROMPTSTRUCT {DWORD cbSize;DWORD dwPromptFlags;HWND hwndApp;LPCWSTR szPrompt;};
struct _CRYPT_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;void *pvGetArg;};
struct _CERT_KEYGEN_REQUEST_INFO {DWORD dwVersion;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;LPWSTR pwszChallengeString;};
struct tagNMDATETIMEFORMATQUERYW {NMHDR nmhdr;LPCWSTR pszFormat;SIZE szMax;};
struct DirectoryClientRegParams {DWORD dwFlags;DWORD dwMask;BSTR bstrUserName;BSTR bstrPassword;BOOL fIsPasswordSet;BSTR bstrExtraXML;BSTR bstrDomain;};
struct _NDIS_TAPI_GATHER_DIGITS {ULONG ulRequestID;HDRV_CALL hdCall;ULONG ulEndToEndID;ULONG ulDigitModes;LPWSTR lpsOrigDigitsBuffer;ULONG ulDigitsBufferOffset;ULONG ulNumDigitsNeeded;ULONG ulNumDigitsRead;ULONG ulTickCount;ULONG ulTerminationReason;ULONG ulTerminationDigitsMask;ULONG ulFirstDigitTimeout;ULONG ulInterDigitTimeout;};
struct tagNMDATETIMEWMKEYDOWNW {NMHDR nmhdr;int nVirtKey;LPCWSTR pszFormat;SYSTEMTIME st;};
struct _ACTRL_PROPERTY_ENTRYW {LPWSTR lpProperty;PACTRL_ACCESS_ENTRY_LISTW pAccessEntryList;ULONG fListFlags;};
struct _CREDENTIAL_ATTRIBUTEW {LPWSTR Keyword;DWORD Flags;DWORD ValueSize;LPBYTE Value;};
struct tagSHCHANGENOTIFYENTRY {DWORD dwEventMask;LPTSTR pszWatchDir;BOOL fRecursive;};
typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);
struct _NEWMAIL_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG cbParentID;LPENTRYID lpParentID;ULONG ulFlags;LPTSTR lpszMessageClass;ULONG ulMessageFlags;};
struct _CRYPT_KEY_PROV_INFO {LPWSTR pwszContainerName;LPWSTR pwszProvName;DWORD dwProvType;DWORD dwFlags;DWORD cProvParam;PCRYPT_KEY_PROV_PARAM rgProvParam;DWORD dwKeySpec;};
struct tagNETCON_CHOOSECONN {DWORD lStructSize;HWND hwndParent;DWORD dwFlags;DWORD dwTypeMask;LPCWSTR lpstrCaption;LPCWSTR lpstrOkBttnText;};
typedef BOOL ( *CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL ( *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
struct IURLSearchHook2Vtbl {HRESULT ( *TranslateWithSearchContext)(IURLSearchHook2 *This, LPWSTR lpwszSearchURL, DWORD cchBufferSize, ISearchContext *pSearchContext);};
struct _CRYPT_CSP_PROVIDER {DWORD dwKeySpec;LPWSTR pwszProviderName;CRYPT_BIT_BLOB Signature;};
struct CRYPTCATATTRIBUTE_ {DWORD cbStruct;LPWSTR pwszReferenceTag;DWORD dwAttrTypeAndAction;DWORD cbValue;BYTE *pbValue;DWORD dwReserved;};
struct _INTERNET_BUFFERSW {DWORD dwStructSize;struct _INTERNET_BUFFERSW *Next;LPCWSTR lpcszHeader;DWORD dwHeadersLength;DWORD dwHeadersTotal;LPVOID lpvBuffer;DWORD dwBufferLength;DWORD dwBufferTotal;DWORD dwOffsetLow;DWORD dwOffsetHigh;};
union _IMAGE_AUX_SYMBOL {struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C Sym;struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 File;struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 Section;};
typedef LONG ( *FINDFIRSTCONTROL)(HANDLE *hFindHandle, HANDLE *hControlHandle, LPCTSTR lpszCachePath);
struct _APPCATEGORYINFO {LCID Locale;LPWSTR pszDescription;GUID AppCategoryId;};
struct _CMC_STATUS_INFO {DWORD dwStatus;DWORD cBodyList;DWORD *rgdwBodyList;LPWSTR pwszStatusString;DWORD dwOtherInfoChoice;_CMC_STATUS_INFO___7102899B559A8354A70F3F8928772BC0 __anonymous0;};
struct _CREDUI_BALLOONW {DWORD dwVersion;INT iControl;INT iIcon;PWSTR pszTitleText;PWSTR pszMessageText;};
struct _TRUSTEE_ACCESSW {LPWSTR lpProperty;ACCESS_RIGHTS Access;ULONG fAccessFlags;ULONG fReturnedAccess;};
struct _WSANSClassInfoW {LPWSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagCODEBASEHOLD {ULONG cbSize;LPWSTR szDistUnit;LPWSTR szCodeBase;DWORD dwVersionMS;DWORD dwVersionLS;DWORD dwStyle;};
struct _tagSOFTDISTINFO {ULONG cbSize;DWORD dwFlags;DWORD dwAdState;LPWSTR szTitle;LPWSTR szAbstract;LPWSTR szHREF;DWORD dwInstalledVersionMS;DWORD dwInstalledVersionLS;DWORD dwUpdateVersionMS;DWORD dwUpdateVersionLS;DWORD dwAdvertisedVersionMS;DWORD dwAdvertisedVersionLS;DWORD dwReserved;};
struct sockaddr_in6_old {short sin6_family;u_short sin6_port;u_long sin6_flowinfo;struct in6_addr sin6_addr;};
struct tagStorageLayout {DWORD LayoutType;OLECHAR *pwcsElementName;LARGE_INTEGER cOffset;LARGE_INTEGER cBytes;};
struct _DISCDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPWSTR lpLocalName;LPWSTR lpRemoteName;DWORD dwFlags;};
struct _PST_PROMPTINFO {DWORD cbSize;DWORD dwPromptFlags;HWND hwndApp;LPCWSTR szPrompt;};
struct _tagSlowAppInfo {ULONGLONG ullSize;FILETIME ftLastUsed;int iTimesUsed;LPWSTR pszImage;};
struct tACMDRVOPENDESC {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;DWORD dwVersion;DWORD dwFlags;DWORD dwError;LPCTSTR pszSectionName;LPCTSTR pszAliasName;DWORD dnDevNode;};
struct tagCATEGORYINFO {CATID catid;LCID lcid;OLECHAR szDescription[128];};
struct tagHH_FTS_QUERY {int cbStruct;BOOL fUniCodeStrings;LPCTSTR pszSearchQuery;LONG iProximity;BOOL fStemmedSearch;BOOL fTitleOnly;BOOL fExecute;LPCTSTR pszWindow;};
typedef CARD_CLIENT_HANDLE (*REGISTERCLIENT)(CLIENT_CALLBACK, PCARD_REGISTER_PARMS);
struct _CAT_NAMEVALUE {LPWSTR pwszTag;DWORD fdwFlags;CRYPT_DATA_BLOB Value;};
struct _DOCHOSTUIINFO {ULONG cbSize;DWORD dwFlags;DWORD dwDoubleClick;OLECHAR *pchHostCss;OLECHAR *pchHostNS;};
struct _DOT11_ADAPTER {GUID gAdapterId;LPWSTR pszDescription;DOT11_CURRENT_OPERATION_MODE Dot11CurrentOpMode;};
struct tagTEXT_SOURCE {PFNFILLTEXTBUFFER pfnFillTextBuffer; WCHAR *awcBuffer;ULONG iEnd;ULONG iCur;};
struct _COSERVERINFO {DWORD dwReserved1;LPWSTR pwszName;COAUTHINFO *pAuthInfo;DWORD dwReserved2;};
struct tagNMTOOLBARW {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPWSTR pszText;};
struct _wireVARIANT {DWORD clSize;DWORD rpcReserved;USHORT vt;USHORT wReserved1;USHORT wReserved2;USHORT wReserved3;_wireVARIANT___97E5681EB831466912C1B906D2CF69C6 __anonymous0;};
struct ldapcontrolW {PWCHAR ldctl_oid;struct berval ldctl_value;BOOLEAN ldctl_iscritical;};
union sockaddr_gen {struct sockaddr Address;struct sockaddr_in AddressIn;struct sockaddr_in6_old AddressIn6;};
struct sockaddr_in6 {short sin6_family;u_short sin6_port;u_long sin6_flowinfo;struct in6_addr sin6_addr;u_long sin6_scope_id;};
struct tagOBO_TOKEN {OBO_TOKEN_TYPE Type;INetCfgComponent *pncc;LPCWSTR pszwManufacturer;LPCWSTR pszwProduct;LPCWSTR pszwDisplayName;BOOL fRegistered;};
struct _COAUTHINFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;LPWSTR pwszServerPrincName;DWORD dwAuthnLevel;DWORD dwImpersonationLevel;COAUTHIDENTITY *pAuthIdentityData;DWORD dwCapabilities;};
struct _MAPINAMEID {LPGUID lpguid;ULONG ulKind;union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923 Kind;};
struct _PubAppInfo {DWORD cbSize;DWORD dwMask;LPWSTR pszSource;SYSTEMTIME stAssigned;SYSTEMTIME stPublished;SYSTEMTIME stScheduled;SYSTEMTIME stExpire;};
struct tagTVSORTCB {HTREEITEM hParent;PFNTVCOMPARE lpfnCompare;LPARAM lParam;};
struct _OFNOTIFYW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPWSTR pszFile;};
struct tMIXERLINE {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;TCHAR szShortName[16];TCHAR szName[64];struct tMIXERLINE___4C57F2B9A037CE403812BA722E360DF8 Target;};
struct tagLVITEMW {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;};
typedef HRESULT (*PDRAWENUM)(LPDDENUMCALLBACKA, LPVOID);
struct _CPS_URLS {LPWSTR pszURL;CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;CRYPT_DATA_BLOB *pDigest;};
struct _STATURL {DWORD cbSize;LPWSTR pwcsUrl;LPWSTR pwcsTitle;FILETIME ftLastVisited;FILETIME ftLastUpdated;FILETIME ftExpires;DWORD dwFlags;};
struct ldapmodA {ULONG mod_op;PCHAR mod_type;union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57 mod_vals;};
struct _REGINI {LPCWSTR lpszVal;LPBYTE pData;DWORD dwLen;DWORD dwType;};
union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655 {struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___59AFAA6F9F17F2AA385AB5E28054F780 WindowMessage;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___1D5E47AA0A419EF9D9DA6D4AA01777EC Event;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___C9F2A79EEE81C8CFC776F7DA83E58678 Apc;struct _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655___B971492F433B977CE6769B3AAD780315 Port;};
union _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997 {LPWSTR pszData;DWORD dwData;byte bData;struct _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997___E6DE4D969135FBE52EE29B014660F051 ba;};
struct IDebugPropertyEnumType_LocalsPlusArgsVtbl {HRESULT ( *QueryInterface)(IDebugPropertyEnumType_LocalsPlusArgs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugPropertyEnumType_LocalsPlusArgs *This);ULONG ( *Release)(IDebugPropertyEnumType_LocalsPlusArgs *This);HRESULT ( *GetName)(IDebugPropertyEnumType_LocalsPlusArgs *This, BSTR *MIDL_0015);};
struct IDebugPropertyEnumType_ArgumentsVtbl {HRESULT ( *QueryInterface)(IDebugPropertyEnumType_Arguments *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugPropertyEnumType_Arguments *This);ULONG ( *Release)(IDebugPropertyEnumType_Arguments *This);HRESULT ( *GetName)(IDebugPropertyEnumType_Arguments *This, BSTR *MIDL_0015);};
struct IDebugPropertyEnumType_RegistersVtbl {HRESULT ( *QueryInterface)(IDebugPropertyEnumType_Registers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugPropertyEnumType_Registers *This);ULONG ( *Release)(IDebugPropertyEnumType_Registers *This);HRESULT ( *GetName)(IDebugPropertyEnumType_Registers *This, BSTR *MIDL_0015);};
struct IElementNamespaceFactoryCallbackVtbl {HRESULT ( *QueryInterface)(IElementNamespaceFactoryCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespaceFactoryCallback *This);ULONG ( *Release)(IElementNamespaceFactoryCallback *This);HRESULT ( *Resolve)(IElementNamespaceFactoryCallback *This, BSTR bstrNamespace, BSTR bstrTagName, BSTR bstrAttrs, IElementNamespace *pNamespace);};
typedef BOOL (*LPUN_REGISTER_NOTIFICATION_ROUTINE)(USB_HANDLE, LPDEVICE_NOTIFY_ROUTINE, LPVOID);
struct _068AF82868DFBF98C4A3A88443B401AE {DWORD cbSize;HWND hwndOwner;int iShow;DWORD dwFlags;RECT rect;IUnknown *punkRel;OLECHAR strNewFile[260];};
struct _2B4FDC4BF487E67F052937EE78FAE255 {DWORD dwStructSize;LPWSTR lpszScheme;DWORD dwSchemeLength;INTERNET_SCHEME nScheme;LPWSTR lpszHostName;DWORD dwHostNameLength;INTERNET_PORT nPort;LPWSTR lpszUserName;DWORD dwUserNameLength;LPWSTR lpszPassword;DWORD dwPasswordLength;LPWSTR lpszUrlPath;DWORD dwUrlPathLength;LPWSTR lpszExtraInfo;DWORD dwExtraInfoLength;};
struct _B80B7D01E79FADDB4AAC58DE22BC823F {LPCWSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
struct _DA63D2C084DFF8EF53A1633F272A983E {ULONG ulCtlType;ULONG ulCtlFlags;LPBYTE lpbNotif;ULONG cbNotif;LPTSTR lpszFilter;ULONG ulItemID;union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF ctl;};
struct _EF67D941BFA119366B947DED69649A3B {ULONG cctl;LPTSTR lpszResourceName;_EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED __anonymous0;LPDTCTL lpctl;};
struct IDebugPropertyEnumType_LocalsVtbl {HRESULT ( *QueryInterface)(IDebugPropertyEnumType_Locals *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugPropertyEnumType_Locals *This);ULONG ( *Release)(IDebugPropertyEnumType_Locals *This);HRESULT ( *GetName)(IDebugPropertyEnumType_Locals *This, BSTR *MIDL_0015);};
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;DWORD dwRecipientIndex;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;};
typedef BOOL (*LPREGISTER_NOTIFICATION_ROUTINE)(USB_HANDLE, LPDEVICE_NOTIFY_ROUTINE, LPVOID);
struct _CREDENTIAL_TARGET_INFORMATIONW {LPWSTR TargetName;LPWSTR NetbiosServerName;LPWSTR DnsServerName;LPWSTR NetbiosDomainName;LPWSTR DnsDomainName;LPWSTR DnsTreeName;LPWSTR PackageName;ULONG Flags;DWORD CredTypeCount;LPDWORD CredTypes;};
struct IDebugPropertyEnumType_AllVtbl {HRESULT ( *QueryInterface)(IDebugPropertyEnumType_All *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugPropertyEnumType_All *This);ULONG ( *Release)(IDebugPropertyEnumType_All *This);HRESULT ( *GetName)(IDebugPropertyEnumType_All *This, BSTR *MIDL_0015);};
struct IAnimationComposerFactoryVtbl {HRESULT ( *QueryInterface)(IAnimationComposerFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationComposerFactory *This);ULONG ( *Release)(IAnimationComposerFactory *This);HRESULT ( *FindComposer)(IAnimationComposerFactory *This, IDispatch *targetElement, BSTR attributeName, IAnimationComposer **animationComposer);};
struct IElementNamespaceFactory2Vtbl {HRESULT ( *QueryInterface)(IElementNamespaceFactory2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespaceFactory2 *This);ULONG ( *Release)(IElementNamespaceFactory2 *This);HRESULT ( *Create)(IElementNamespaceFactory2 *This, IElementNamespace *pNamespace);HRESULT ( *CreateWithImplementation)(IElementNamespaceFactory2 *This, IElementNamespace *pNamespace, BSTR bstrImplementation);};
typedef BOOL ( *PFN_CERT_ENUM_PHYSICAL_STORE)( void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _SECURITY_QUALITY_OF_SERVICE {DWORD Length;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;BOOLEAN EffectiveOnly;};
struct IActiveScriptHostEncodeVtbl {HRESULT ( *QueryInterface)(IActiveScriptHostEncode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptHostEncode *This);ULONG ( *Release)(IActiveScriptHostEncode *This);HRESULT ( *EncodeScriptHostFile)(IActiveScriptHostEncode *This, BSTR bstrInFile, BSTR *pbstrOutFile, unsigned int cFlags, BSTR bstrDefaultLang);};
struct IElementBehaviorFactoryVtbl {HRESULT ( *QueryInterface)(IElementBehaviorFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorFactory *This);ULONG ( *Release)(IElementBehaviorFactory *This);HRESULT ( *FindBehavior)(IElementBehaviorFactory *This, BSTR bstrBehavior, BSTR bstrBehaviorUrl, IElementBehaviorSite *pSite, IElementBehavior **ppBehavior);};
struct INetCfgBindingInterfaceVtbl {HRESULT ( *QueryInterface)(INetCfgBindingInterface *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgBindingInterface *This);ULONG ( *Release)(INetCfgBindingInterface *This);HRESULT ( *GetName)(INetCfgBindingInterface *This, LPWSTR *ppszwInterfaceName);HRESULT ( *GetUpperComponent)(INetCfgBindingInterface *This, INetCfgComponent **ppnccItem);HRESULT ( *GetLowerComponent)(INetCfgBindingInterface *This, INetCfgComponent **ppnccItem);};
struct _INTERNET_CACHE_ENTRY_INFOW {DWORD dwStructSize;LPWSTR lpszSourceUrlName;LPWSTR lpszLocalFileName;DWORD CacheEntryType;DWORD dwUseCount;DWORD dwHitRate;DWORD dwSizeLow;DWORD dwSizeHigh;FILETIME LastModifiedTime;FILETIME ExpireTime;FILETIME LastAccessTime;FILETIME LastSyncTime;LPWSTR lpHeaderInfo;DWORD dwHeaderInfoSize;LPWSTR lpszFileExtension;_INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C __anonymous0;};
struct _CRYPT_PKCS8_IMPORT_PARAMS {CRYPT_DIGEST_BLOB PrivateKey;PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;LPVOID pVoidResolveFunc;PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;LPVOID pVoidDecryptFunc;};
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR);
struct _CERT_POLICY95_QUALIFIER1 {LPWSTR pszPracticesReference;LPSTR pszNoticeIdentifier;LPSTR pszNSINoticeIdentifier;DWORD cCPSURLs;CPS_URLS *rgCPSURLs;};
struct ITIMEMediaPlayerSiteVtbl {HRESULT ( *QueryInterface)(ITIMEMediaPlayerSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEMediaPlayerSite *This);ULONG ( *Release)(ITIMEMediaPlayerSite *This);HRESULT ( *get_timeElement)(ITIMEMediaPlayerSite *This, ITIMEElement **pElm);HRESULT ( *get_timeState)(ITIMEMediaPlayerSite *This, ITIMEState **pState);HRESULT ( *reportError)(ITIMEMediaPlayerSite *This, HRESULT hr, BSTR errorString);};
struct IVoIPDirectoryClientVtbl {HRESULT ( *QueryInterface)(IVoIPDirectoryClient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPDirectoryClient *This);ULONG ( *Release)(IVoIPDirectoryClient *This);HRESULT ( *put_RegistrationParameters)(IVoIPDirectoryClient *This, DirectoryClientRegParams *pdcrp);HRESULT ( *put_SipPassword)(IVoIPDirectoryClient *This, BSTR bstrSipPassword);HRESULT ( *get_SipServerParameters)(IVoIPDirectoryClient *This, BSTR *pbstrMyURI, BSTR *pbstrMyServer, BSTR *pbstrProfileString);};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXA)(LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
typedef BOOL (*LPTRANSLATE_STRING_DESCR)(LPCUSB_STRING_DESCRIPTOR, LPWSTR, DWORD);
struct IEnumWSDLOperationsVtbl {HRESULT ( *QueryInterface)(IEnumWSDLOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWSDLOperations *This);ULONG ( *Release)(IEnumWSDLOperations *This);HRESULT ( *Next)(IEnumWSDLOperations *This, int celt, IWSDLOperation **ppWSDLOperation, int *pulFetched);HRESULT ( *Skip)(IEnumWSDLOperations *This, int celt);HRESULT ( *Reset)(IEnumWSDLOperations *This);HRESULT ( *Clone)(IEnumWSDLOperations *This, IEnumWSDLOperations **ppenum);HRESULT ( *Find)(IEnumWSDLOperations *This, BSTR bstrOperationToFind, IWSDLOperation **ppIWSDLOperation);HRESULT ( *Size)(IEnumWSDLOperations *This, int *pSize);};
struct IUPnPDeviceProviderVtbl {HRESULT ( *QueryInterface)(IUPnPDeviceProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDeviceProvider *This);ULONG ( *Release)(IUPnPDeviceProvider *This);HRESULT ( *Start)(IUPnPDeviceProvider *This, BSTR bstrInitString);HRESULT ( *Stop)(IUPnPDeviceProvider *This);};
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD);
struct _tagSYNCMGRPROGRESSITEM {DWORD cbSize;UINT mask;LPCWSTR lpcStatusText;DWORD dwStatusType;INT iProgValue;INT iMaxValue;};
struct ISOAPIsapiResponseVtbl {HRESULT ( *QueryInterface)(ISOAPIsapiResponse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISOAPIsapiResponse *This);ULONG ( *Release)(ISOAPIsapiResponse *This);HRESULT ( *get_HTTPStatus)(ISOAPIsapiResponse *This, BSTR *pbstrStatus);HRESULT ( *put_HTTPStatus)(ISOAPIsapiResponse *This, BSTR bstrStatus);HRESULT ( *get_HTTPCharset)(ISOAPIsapiResponse *This, BSTR *pbstrCharset);HRESULT ( *put_HTTPCharset)(ISOAPIsapiResponse *This, BSTR bstrCharset);};
struct IUPnPDeviceControlVtbl {HRESULT ( *QueryInterface)(IUPnPDeviceControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDeviceControl *This);ULONG ( *Release)(IUPnPDeviceControl *This);HRESULT ( *Initialize)(IUPnPDeviceControl *This, BSTR bstrXMLDesc, BSTR bstrDeviceIdentifier, BSTR bstrInitString);HRESULT ( *GetServiceObject)(IUPnPDeviceControl *This, BSTR bstrUDN, BSTR bstrServiceId, IDispatch **ppdispService);};
typedef INT ( *LPWSCINSTALLNAMESPACE)(LPWSTR lpszIdentifier, LPWSTR lpszPathName, DWORD dwNameSpace, DWORD dwVersion, LPGUID lpProviderId);
struct _WSAServiceClassInfoW {LPGUID lpServiceClassId;LPWSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOW lpClassInfos;};
struct IEnumWSDLServiceVtbl {HRESULT ( *QueryInterface)(IEnumWSDLService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWSDLService *This);ULONG ( *Release)(IEnumWSDLService *This);HRESULT ( *Next)(IEnumWSDLService *This, int celt, IWSDLService **ppWSDLService, int *pulFetched);HRESULT ( *Skip)(IEnumWSDLService *This, int celt);HRESULT ( *Reset)(IEnumWSDLService *This);HRESULT ( *Clone)(IEnumWSDLService *This, IEnumWSDLService **ppenum);HRESULT ( *Find)(IEnumWSDLService *This, BSTR bstrServiceToFind, IWSDLService **ppWSDLService);};
struct IHTMLDXTransformVtbl {HRESULT ( *QueryInterface)(IHTMLDXTransform *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDXTransform *This);ULONG ( *Release)(IHTMLDXTransform *This);HRESULT ( *SetHostUrl)(IHTMLDXTransform *This, BSTR bstrHostUrl);};
struct ITargetContainerVtbl {HRESULT ( *QueryInterface)(ITargetContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetContainer *This);ULONG ( *Release)(ITargetContainer *This);HRESULT ( *GetFrameUrl)(ITargetContainer *This, LPWSTR *ppszFrameSrc);HRESULT ( *GetFramesContainer)(ITargetContainer *This, IOleContainer **ppContainer);};
struct IUPnPReregistrarVtbl {HRESULT ( *QueryInterface)(IUPnPReregistrar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPReregistrar *This);ULONG ( *Release)(IUPnPReregistrar *This);HRESULT ( *ReregisterDevice)(IUPnPReregistrar *This, BSTR bstrDeviceIdentifier, BSTR bstrXMLDesc, BSTR bstrProgIDDeviceControlClass, BSTR bstrInitString, BSTR bstrContainerId, BSTR bstrResourcePath, int nLifeTime);HRESULT ( *ReregisterRunningDevice)(IUPnPReregistrar *This, BSTR bstrDeviceIdentifier, BSTR bstrXMLDesc, IUnknown *punkDeviceControl, BSTR bstrInitString, BSTR bstrResourcePath, int nLifeTime);};
struct tagNMDATETIMEFORMATW {NMHDR nmhdr;LPCWSTR pszFormat;SYSTEMTIME st;LPCWSTR pszDisplay;WCHAR szDisplay[64];};
struct tagNMDATETIMESTRINGW {NMHDR nmhdr;LPCWSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
typedef HRESULT ( *REMOVECONTROLBYNAME)(LPCTSTR lpszFile, LPCTSTR lpszCLSID, LPCTSTR lpszTypeLibID, BOOL bForceRemove, DWORD dwIsDistUnit);
struct WINTRUST_BLOB_INFO_ {DWORD cbStruct;GUID gSubject;LPCWSTR pcwszDisplayName;DWORD cbMemObject;BYTE *pbMemObject;DWORD cbMemSignedMsg;BYTE *pbMemSignedMsg;};
struct WINTRUST_FILE_INFO_ {DWORD cbStruct;LPCWSTR pcwszFilePath;HANDLE hFile;GUID *pgKnownSubject;};
struct WINTRUST_SGNR_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CMSG_SIGNER_INFO *psSignerInfo;DWORD chStores;HCERTSTORE *pahStores;};
struct _WSANAMESPACE_INFOW {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPWSTR lpszIdentifier;};
struct IEnumWSDLPortsVtbl {HRESULT ( *QueryInterface)(IEnumWSDLPorts *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWSDLPorts *This);ULONG ( *Release)(IEnumWSDLPorts *This);HRESULT ( *Next)(IEnumWSDLPorts *This, int celt, IWSDLPort **ppWSDLPort, int *pulFetched);HRESULT ( *Skip)(IEnumWSDLPorts *This, int celt);HRESULT ( *Reset)(IEnumWSDLPorts *This);HRESULT ( *Clone)(IEnumWSDLPorts *This, IEnumWSDLPorts **ppenum);HRESULT ( *Find)(IEnumWSDLPorts *This, BSTR bstrPortToFind, IWSDLPort **ppIWSDLPort);};
struct IEnumWorkItemsVtbl {HRESULT ( *QueryInterface)(IEnumWorkItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWorkItems *This);ULONG ( *Release)(IEnumWorkItems *This);HRESULT ( *Next)(IEnumWorkItems *This, ULONG celt, LPWSTR **rgpwszNames, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumWorkItems *This, ULONG celt);HRESULT ( *Reset)(IEnumWorkItems *This);HRESULT ( *Clone)(IEnumWorkItems *This, IEnumWorkItems **ppEnumWorkItems);};
struct IRTCBuddyGroupVtbl {HRESULT ( *QueryInterface)(IRTCBuddyGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddyGroup *This);ULONG ( *Release)(IRTCBuddyGroup *This);HRESULT ( *get_Name)(IRTCBuddyGroup *This, BSTR *pbstrGroupName);HRESULT ( *put_Name)(IRTCBuddyGroup *This, BSTR bstrGroupName);HRESULT ( *AddBuddy)(IRTCBuddyGroup *This, IRTCBuddy *pBuddy);HRESULT ( *RemoveBuddy)(IRTCBuddyGroup *This, IRTCBuddy *pBuddy);HRESULT ( *EnumerateBuddies)(IRTCBuddyGroup *This, IRTCEnumBuddies **ppEnum);HRESULT ( *get_Buddies)(IRTCBuddyGroup *This, IRTCCollection **ppCollection);HRESULT ( *get_Data)(IRTCBuddyGroup *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCBuddyGroup *This, BSTR bstrData);HRESULT ( *get_Profile)(IRTCBuddyGroup *This, IRTCProfile2 **ppProfile);};
struct ITargetNotify2Vtbl {HRESULT ( *QueryInterface)(ITargetNotify2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetNotify2 *This);ULONG ( *Release)(ITargetNotify2 *This);HRESULT ( *OnCreate)(ITargetNotify2 *This, IUnknown *pUnkDestination, ULONG cbCookie);HRESULT ( *OnReuse)(ITargetNotify2 *This, IUnknown *pUnkDestination);HRESULT ( *GetOptionString)(ITargetNotify2 *This, BSTR *pbstrOptions);};
struct IVersionVectorVtbl {HRESULT ( *QueryInterface)(IVersionVector *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVersionVector *This);ULONG ( *Release)(IVersionVector *This);HRESULT ( *SetVersion)(IVersionVector *This,  OLECHAR *pchComponent,  OLECHAR *pchVersion);HRESULT ( *GetVersion)(IVersionVector *This,  OLECHAR *pchComponent, OLECHAR *pchVersion, ULONG *pcchVersion);};
struct IBindProtocolVtbl {HRESULT ( *QueryInterface)(IBindProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindProtocol *This);ULONG ( *Release)(IBindProtocol *This);HRESULT ( *CreateBinding)(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);};
struct IParserVerifyVtbl {HRESULT ( *QueryInterface)(IParserVerify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParserVerify *This);ULONG ( *Release)(IParserVerify *This);HRESULT ( *VerifyMachine)(IParserVerify *This, LPCWSTR pcwszMachine);HRESULT ( *VerifyCatalog)(IParserVerify *This, LPCWSTR pcwszMachine, LPCWSTR pcwszCatalog);};
typedef BOOL ( *LPDDENUMCALLBACKW)(GUID *, LPWSTR, LPWSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKW)(LPGUID, LPCWSTR, LPCWSTR, LPVOID);
struct _PST_PROVIDERINFO {DWORD cbSize;PST_PROVIDERID ID;PST_PROVIDERCAPABILITIES Capabilities;LPWSTR szProviderName;};
struct IDShowPluginVtbl {HRESULT ( *QueryInterface)(IDShowPlugin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDShowPlugin *This);ULONG ( *Release)(IDShowPlugin *This);HRESULT ( *get_URL)(IDShowPlugin *This, BSTR *pURL);HRESULT ( *get_UserAgent)(IDShowPlugin *This, BSTR *pUserAgent);};
struct INetCfgClassVtbl {HRESULT ( *QueryInterface)(INetCfgClass *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgClass *This);ULONG ( *Release)(INetCfgClass *This);HRESULT ( *FindComponent)(INetCfgClass *This, LPCWSTR pszwInfId, INetCfgComponent **ppnccItem);HRESULT ( *EnumComponents)(INetCfgClass *This, IEnumNetCfgComponent **ppenumComponent);};
struct IWSDLServiceVtbl {HRESULT ( *QueryInterface)(IWSDLService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWSDLService *This);ULONG ( *Release)(IWSDLService *This);HRESULT ( *get_name)(IWSDLService *This, BSTR *bstrServiceName);HRESULT ( *get_documentation)(IWSDLService *This, BSTR *bstrDocumentation);HRESULT ( *GetSoapPorts)(IWSDLService *This, IEnumWSDLPorts **ppIWSDLPorts);};
typedef HANDLE ( *PFN_CreateEventW)(LPSECURITY_ATTRIBUTES lpsa, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpName);
typedef LPTSTR (*PFN_DETECT_ENTRY)(CARD_SOCKET_HANDLE, UCHAR, LPTSTR, DWORD);
struct _VTableProvStruc {DWORD Version;FARPROC FuncVerifyImage;FARPROC FuncReturnhWnd;DWORD dwProvType;BYTE *pbContextInfo;DWORD cbContextInfo;LPWSTR pszProvName;};
struct tagNMHDDISPINFOW {NMHDR hdr;int iItem;UINT mask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagMQQUEUEPROPS {DWORD cProp;QUEUEPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct tagNNTPRESPONSE {NNTPSTATE state;BOOL fMustRelease;BOOL fDone;IXPRESULT rIxpResult;INNTPTransport *pTransport;tagNNTPRESPONSE___972C5209C9C79C2B3E2837DC92DFE3AF __anonymous0;};
struct tagPOP3RESPONSE {POP3COMMAND command;BOOL fDone;IXPRESULT rIxpResult;IPOP3Transport *pTransport;BOOL fValidInfo;tagPOP3RESPONSE___BF7D238E18609FD3182F5629010D447B __anonymous0;};
struct CRYPTCATSTORE_ {DWORD cbStruct;DWORD dwPublicVersion;LPWSTR pwszP7File;HCRYPTPROV hProv;DWORD dwEncodingType;DWORD fdwStoreFlags;HANDLE hReserved;HANDLE hAttrs;};
struct ISOAPErrorVtbl {HRESULT ( *QueryInterface)(ISOAPError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISOAPError *This);ULONG ( *Release)(ISOAPError *This);HRESULT ( *get_faultcode)(ISOAPError *This, BSTR *bstrFaultcode);HRESULT ( *get_faultstring)(ISOAPError *This, BSTR *bstrFaultstring);HRESULT ( *get_faultactor)(ISOAPError *This, BSTR *bstrActor);HRESULT ( *get_detail)(ISOAPError *This, BSTR *bstrDetail);HRESULT ( *get_faultcodeNS)(ISOAPError *This, BSTR *bstrNamespace);};
typedef SCARDHANDLE ( *LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);
struct tagLVFINDINFOW {UINT flags;LPCWSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
struct tagMQMGMTPROPS {DWORD cProp;MGMTPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct IWSDLPortVtbl {HRESULT ( *QueryInterface)(IWSDLPort *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWSDLPort *This);ULONG ( *Release)(IWSDLPort *This);HRESULT ( *get_name)(IWSDLPort *This, BSTR *pbstrPortName);HRESULT ( *get_address)(IWSDLPort *This, BSTR *pbstrPortAddress);HRESULT ( *get_bindStyle)(IWSDLPort *This, BSTR *pbstrbindStyle);HRESULT ( *get_transport)(IWSDLPort *This, BSTR *pbstrtransport);HRESULT ( *get_documentation)(IWSDLPort *This, BSTR *bstrDocumentation);HRESULT ( *GetSoapOperations)(IWSDLPort *This, IEnumWSDLOperations **ppIWSDLOperations);};
typedef int ( *LPWPUQUEUEAPC)(LPWSATHREADID lpThreadId, LPWSAUSERAPC lpfnUserApc, DWORD_PTR dwContext, LPINT lpErrno);
struct _CREDUI_INFOW {DWORD cbSize;HWND hwndParent;PCWSTR pszMessageText;PCWSTR pszCaptionText;HBITMAP hbmBanner;};
struct tagMQMSGPROPS {DWORD cProp;MSGPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct CRYPTCATCDF_ {DWORD cbStruct;HANDLE hFile;DWORD dwCurFilePos;DWORD dwLastMemberOffset;BOOL fEOF;LPWSTR pwszResultDir;HANDLE hCATStore;};
struct tagMQQMPROPS {DWORD cProp;QMPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
typedef HRESULT ( *REGINSTALL)(HMODULE hm, LPCSTR pszSection, LPCSTRTABLE pstTable);
struct _TRUSTEE_W {struct _TRUSTEE_W *pMultipleTrustee;MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;TRUSTEE_FORM TrusteeForm;TRUSTEE_TYPE TrusteeType;LPWSTR ptstrName;};
struct tagRMTPACK {ISequentialStream *pISeqStream;ULONG cbData;ULONG cBSTR;BSTR *rgBSTR;ULONG cVARIANT;VARIANT *rgVARIANT;ULONG cIDISPATCH;IDispatch **rgIDISPATCH;ULONG cIUNKNOWN;IUnknown **rgIUNKNOWN;ULONG cPROPVARIANT;PROPVARIANT *rgPROPVARIANT;ULONG cArray;VARIANT *rgArray;};
struct tagTCITEMW {UINT mask;DWORD dwState;DWORD dwStateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMW {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
struct _HD_ITEMW {UINT mask;int cxy;LPWSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;};
struct _cqform_W {DWORD cbStruct;DWORD dwFlags;CLSID clsid;HICON hIcon;LPCWSTR pszTitle;};
struct _NMSHN {NMHDR hdr;LPARAM lParam;DWORD dwReturn;_NMSHN___8295B2051F25299B4D869C96899A3C0F __anonymous0;};
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 {PCERT_OTHER_NAME pOtherName;LPWSTR pwszRfc822Name;LPWSTR pwszDNSName;CERT_NAME_BLOB DirectoryName;LPWSTR pwszURL;CRYPT_DATA_BLOB IPAddress;LPSTR pszRegisteredID;};
struct _8688FBDBF9FB8D670D1638B47BFC0FAD {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD lParam;LPWSTR pszText;int cchText;};
struct IRTCSessionDescriptionManagerVtbl {HRESULT ( *QueryInterface)(IRTCSessionDescriptionManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionDescriptionManager *This);ULONG ( *Release)(IRTCSessionDescriptionManager *This);HRESULT ( *EvaluateSessionDescription)(IRTCSessionDescriptionManager *This, BSTR bstrContentType, BSTR bstrSessionDescription, VARIANT_BOOL *pfApplicationSession);};
typedef SECURITY_STATUS ( *ACQUIRE_CREDENTIALS_HANDLE_FN_W)(SEC_WCHAR *, SEC_WCHAR *, unsigned int, void *, void *, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
struct ISelectionServicesListenerVtbl {HRESULT ( *QueryInterface)(ISelectionServicesListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISelectionServicesListener *This);ULONG ( *Release)(ISelectionServicesListener *This);HRESULT ( *BeginSelectionUndo)(ISelectionServicesListener *This);HRESULT ( *EndSelectionUndo)(ISelectionServicesListener *This);HRESULT ( *OnSelectedElementExit)(ISelectionServicesListener *This, IMarkupPointer *pIElementStart, IMarkupPointer *pIElementEnd, IMarkupPointer *pIElementContentStart, IMarkupPointer *pIElementContentEnd);HRESULT ( *OnChangeType)(ISelectionServicesListener *This, SELECTION_TYPE eType, ISelectionServicesListener *pIListener);HRESULT ( *GetTypeDetail)(ISelectionServicesListener *This, BSTR *pTypeDetail);};
struct IUPnPDeviceFinderCallbackVtbl {HRESULT ( *QueryInterface)(IUPnPDeviceFinderCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDeviceFinderCallback *This);ULONG ( *Release)(IUPnPDeviceFinderCallback *This);HRESULT ( *DeviceAdded)(IUPnPDeviceFinderCallback *This, LONG lFindData, IUPnPDevice *pDevice);HRESULT ( *DeviceRemoved)(IUPnPDeviceFinderCallback *This, LONG lFindData, BSTR bstrUDN);HRESULT ( *SearchComplete)(IUPnPDeviceFinderCallback *This, LONG lFindData);};
struct IElementNamespacePrivateVtbl {HRESULT ( *QueryInterface)(IElementNamespacePrivate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespacePrivate *This);ULONG ( *Release)(IElementNamespacePrivate *This);HRESULT ( *AddTagPrivate)(IElementNamespacePrivate *This, BSTR bstrTagName, BSTR bstrBaseTagName, LONG lFlags);};
struct INetCfgComponentBindingsVtbl {HRESULT ( *QueryInterface)(INetCfgComponentBindings *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentBindings *This);ULONG ( *Release)(INetCfgComponentBindings *This);HRESULT ( *BindTo)(INetCfgComponentBindings *This, INetCfgComponent *pnccItem);HRESULT ( *UnbindFrom)(INetCfgComponentBindings *This, INetCfgComponent *pnccItem);HRESULT ( *SupportsBindingInterface)(INetCfgComponentBindings *This, DWORD dwFlags, LPCWSTR pszwInterfaceName);HRESULT ( *IsBoundTo)(INetCfgComponentBindings *This, INetCfgComponent *pnccItem);HRESULT ( *IsBindableTo)(INetCfgComponentBindings *This, INetCfgComponent *pnccItem);HRESULT ( *EnumBindingPaths)(INetCfgComponentBindings *This, DWORD dwFlags, IEnumNetCfgBindingPath **ppIEnum);HRESULT ( *MoveBefore)(INetCfgComponentBindings *This, INetCfgBindingPath *pncbItemSrc, INetCfgBindingPath *pncbItemDest);HRESULT ( *MoveAfter)(INetCfgComponentBindings *This, INetCfgBindingPath *pncbItemSrc, INetCfgBindingPath *pncbItemDest);};
struct IRTCClientPortManagementVtbl {HRESULT ( *QueryInterface)(IRTCClientPortManagement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientPortManagement *This);ULONG ( *Release)(IRTCClientPortManagement *This);HRESULT ( *StartListenAddressAndPort)(IRTCClientPortManagement *This, BSTR bstrInternalLocalAddress, int lInternalLocalPort);HRESULT ( *StopListenAddressAndPort)(IRTCClientPortManagement *This, BSTR bstrInternalLocalAddress, int lInternalLocalPort);HRESULT ( *GetPortRange)(IRTCClientPortManagement *This, RTC_PORT_TYPE enPortType, int *plMinValue, int *plMaxValue);};
struct ISubscriptionAgentEventsVtbl {HRESULT ( *QueryInterface)(ISubscriptionAgentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionAgentEvents *This);ULONG ( *Release)(ISubscriptionAgentEvents *This);HRESULT ( *UpdateBegin)(ISubscriptionAgentEvents *This,  SUBSCRIPTIONCOOKIE *pSubscriptionCookie);HRESULT ( *UpdateProgress)(ISubscriptionAgentEvents *This,  SUBSCRIPTIONCOOKIE *pSubscriptionCookie, int lSizeDownloaded, int lProgressCurrent, int lProgressMax, HRESULT hrStatus, LPCWSTR wszStatus);HRESULT ( *UpdateEnd)(ISubscriptionAgentEvents *This,  SUBSCRIPTIONCOOKIE *pSubscriptionCookie, int lSizeDownloaded, HRESULT hrResult, LPCWSTR wszResult);HRESULT ( *ReportError)(ISubscriptionAgentEvents *This,  SUBSCRIPTIONCOOKIE *pSubscriptionCookie, HRESULT hrError, LPCWSTR wszError);};
struct IRTCClientProvisioning2Vtbl {HRESULT ( *QueryInterface)(IRTCClientProvisioning2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientProvisioning2 *This);ULONG ( *Release)(IRTCClientProvisioning2 *This);HRESULT ( *CreateProfile)(IRTCClientProvisioning2 *This, BSTR bstrProfileXML, IRTCProfile **ppProfile);HRESULT ( *EnableProfile)(IRTCClientProvisioning2 *This, IRTCProfile *pProfile, int lRegisterFlags);HRESULT ( *DisableProfile)(IRTCClientProvisioning2 *This, IRTCProfile *pProfile);HRESULT ( *EnumerateProfiles)(IRTCClientProvisioning2 *This, IRTCEnumProfiles **ppEnum);HRESULT ( *get_Profiles)(IRTCClientProvisioning2 *This, IRTCCollection **ppCollection);HRESULT ( *GetProfile)(IRTCClientProvisioning2 *This, BSTR bstrUserAccount, BSTR bstrUserPassword, BSTR bstrUserURI, BSTR bstrServer, int lTransport, LONG_PTR lCookie);HRESULT ( *get_SessionCapabilities)(IRTCClientProvisioning2 *This, int *plSupportedSessions);HRESULT ( *EnableProfileEx)(IRTCClientProvisioning2 *This, IRTCProfile *pProfile, int lRegisterFlags, int lRoamingFlags);};
struct IEncodingFilterFactoryVtbl {HRESULT ( *QueryInterface)(IEncodingFilterFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEncodingFilterFactory *This);ULONG ( *Release)(IEncodingFilterFactory *This);HRESULT ( *FindBestFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);HRESULT ( *GetDefaultFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);};
struct IRTCClientProvisioningVtbl {HRESULT ( *QueryInterface)(IRTCClientProvisioning *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientProvisioning *This);ULONG ( *Release)(IRTCClientProvisioning *This);HRESULT ( *CreateProfile)(IRTCClientProvisioning *This, BSTR bstrProfileXML, IRTCProfile **ppProfile);HRESULT ( *EnableProfile)(IRTCClientProvisioning *This, IRTCProfile *pProfile, int lRegisterFlags);HRESULT ( *DisableProfile)(IRTCClientProvisioning *This, IRTCProfile *pProfile);HRESULT ( *EnumerateProfiles)(IRTCClientProvisioning *This, IRTCEnumProfiles **ppEnum);HRESULT ( *get_Profiles)(IRTCClientProvisioning *This, IRTCCollection **ppCollection);HRESULT ( *GetProfile)(IRTCClientProvisioning *This, BSTR bstrUserAccount, BSTR bstrUserPassword, BSTR bstrUserURI, BSTR bstrServer, int lTransport, LONG_PTR lCookie);HRESULT ( *get_SessionCapabilities)(IRTCClientProvisioning *This, int *plSupportedSessions);};
struct _CRYPT_PKCS8_EXPORT_PARAMS {HCRYPTPROV hCryptProv;DWORD dwKeySpec;LPSTR pszPrivateKeyObjId;PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;LPVOID pVoidEncryptFunc;};
struct IAMSecureMediaContentVtbl {HRESULT ( *QueryInterface)(IAMSecureMediaContent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMSecureMediaContent *This);ULONG ( *Release)(IAMSecureMediaContent *This);HRESULT ( *get_IsSecure)(IAMSecureMediaContent *This, VARIANT_BOOL *pfIsSecure);HRESULT ( *get_Tooltip)(IAMSecureMediaContent *This, BSTR *pbstrTooltip);};
struct IHTMLPainterEventInfoVtbl {HRESULT ( *QueryInterface)(IHTMLPainterEventInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPainterEventInfo *This);ULONG ( *Release)(IHTMLPainterEventInfo *This);HRESULT ( *GetEventInfoFlags)(IHTMLPainterEventInfo *This, int *plEventInfoFlags);HRESULT ( *GetEventTarget)(IHTMLPainterEventInfo *This, IHTMLElement **ppElement);HRESULT ( *SetCursor)(IHTMLPainterEventInfo *This, LONG lPartID);HRESULT ( *StringFromPartID)(IHTMLPainterEventInfo *This, LONG lPartID, BSTR *pbstrPart);};
struct INetCfgComponentSetupVtbl {HRESULT ( *QueryInterface)(INetCfgComponentSetup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentSetup *This);ULONG ( *Release)(INetCfgComponentSetup *This);HRESULT ( *Install)(INetCfgComponentSetup *This, DWORD dwSetupFlags);HRESULT ( *Upgrade)(INetCfgComponentSetup *This, DWORD dwSetupFlags, DWORD dwUpgradeFomBuildNo);HRESULT ( *ReadAnswerFile)(INetCfgComponentSetup *This, LPCWSTR pszwAnswerFile, LPCWSTR pszwAnswerSections);HRESULT ( *Removing)(INetCfgComponentSetup *This);};
struct IVoIPCallerInfoRecordVtbl {HRESULT ( *QueryInterface)(IVoIPCallerInfoRecord *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallerInfoRecord *This);ULONG ( *Release)(IVoIPCallerInfoRecord *This);HRESULT ( *put_URI)(IVoIPCallerInfoRecord *This, BSTR bstrURI);HRESULT ( *get_URI)(IVoIPCallerInfoRecord *This, BSTR *pbstrURI);HRESULT ( *put_FriendlyName)(IVoIPCallerInfoRecord *This, BSTR bstrFriendlyName);HRESULT ( *get_FriendlyName)(IVoIPCallerInfoRecord *This, BSTR *pbstrFriendlyName);HRESULT ( *put_VoIPName)(IVoIPCallerInfoRecord *This, BSTR bstrVoIPName);HRESULT ( *get_VoIPName)(IVoIPCallerInfoRecord *This, BSTR *pbstrVoIPName);HRESULT ( *put_SpeedDialEntry)(IVoIPCallerInfoRecord *This, int idxSpeedDial);HRESULT ( *get_SpeedDialEntry)(IVoIPCallerInfoRecord *This, int *pidxSpeedDial);HRESULT ( *put_Blocked)(IVoIPCallerInfoRecord *This, VARIANT_BOOL fBlocked);HRESULT ( *get_Blocked)(IVoIPCallerInfoRecord *This, VARIANT_BOOL *pfBlocked);HRESULT ( *put_ForwardingURI)(IVoIPCallerInfoRecord *This, BSTR bstrForwardingURI);HRESULT ( *get_ForwardingURI)(IVoIPCallerInfoRecord *This, BSTR *pbstrForwardingURI);HRESULT ( *put_RingTone)(IVoIPCallerInfoRecord *This, BSTR bstrRingTonePath);HRESULT ( *get_RingTone)(IVoIPCallerInfoRecord *This, BSTR *pbstrRingTonePath);HRESULT ( *Commit)(IVoIPCallerInfoRecord *This);HRESULT ( *DeleteFromDB)(IVoIPCallerInfoRecord *This);};
struct IMediaPlayerListenerVtbl {HRESULT ( *QueryInterface)(IMediaPlayerListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPlayerListener *This);ULONG ( *Release)(IMediaPlayerListener *This);HRESULT ( *PlayStateChanged)(IMediaPlayerListener *This, int lNewState);HRESULT ( *Buffering)(IMediaPlayerListener *This, VARIANT_BOOL fStart);HRESULT ( *BufferPercent)(IMediaPlayerListener *This, int lBufferPercent);HRESULT ( *OpenStateChanged)(IMediaPlayerListener *This, int lOpenState);HRESULT ( *MediaInfoChanged)(IMediaPlayerListener *This, BSTR bstrShowTitle, BSTR bstrClipTitle, BSTR bstrClipAuthor, BSTR bstrClipCopyright, BSTR bstrStationURL);HRESULT ( *QualityChanged)(IMediaPlayerListener *This, int lQuality);HRESULT ( *Error)(IMediaPlayerListener *This, BSTR bstrError);};
struct IRTCUserSearchResultVtbl {HRESULT ( *QueryInterface)(IRTCUserSearchResult *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCUserSearchResult *This);ULONG ( *Release)(IRTCUserSearchResult *This);HRESULT ( *get_Value)(IRTCUserSearchResult *This, RTC_USER_SEARCH_COLUMN enColumn, BSTR *pbstrValue);};
struct IUPnPServiceCallbackVtbl {HRESULT ( *QueryInterface)(IUPnPServiceCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPServiceCallback *This);ULONG ( *Release)(IUPnPServiceCallback *This);HRESULT ( *StateVariableChanged)(IUPnPServiceCallback *This, IUPnPService *pus, LPCWSTR pcwszStateVarName, VARIANT vaValue);HRESULT ( *ServiceInstanceDied)(IUPnPServiceCallback *This, IUPnPService *pus);};
typedef LONG ( *GETCONTROLDEPENDENTFILE)(int iFile, HANDLE hControlHandle, LPTSTR lpszFile, LPDWORD lpdwSize, BOOL bToUpper);
struct IHTMLPrivateWindow2Vtbl {HRESULT ( *QueryInterface)(IHTMLPrivateWindow2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPrivateWindow2 *This);ULONG ( *Release)(IHTMLPrivateWindow2 *This);HRESULT ( *NavigateEx)(IHTMLPrivateWindow2 *This, BSTR bstrURL, BSTR bstrUnencodedUrl, BSTR bstrLocation, BSTR bstrContext, IBindCtx *pBindCtx, DWORD dwNavOptions, DWORD dwFHLFlags);HRESULT ( *GetInnerWindowUnknown)(IHTMLPrivateWindow2 *This, IUnknown **ppUnknown);};
struct IRTCPresenceContactVtbl {HRESULT ( *QueryInterface)(IRTCPresenceContact *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPresenceContact *This);ULONG ( *Release)(IRTCPresenceContact *This);HRESULT ( *get_PresentityURI)(IRTCPresenceContact *This, BSTR *pbstrPresentityURI);HRESULT ( *put_PresentityURI)(IRTCPresenceContact *This, BSTR bstrPresentityURI);HRESULT ( *get_Name)(IRTCPresenceContact *This, BSTR *pbstrName);HRESULT ( *put_Name)(IRTCPresenceContact *This, BSTR bstrName);HRESULT ( *get_Data)(IRTCPresenceContact *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCPresenceContact *This, BSTR bstrData);HRESULT ( *get_Persistent)(IRTCPresenceContact *This, VARIANT_BOOL *pfPersistent);HRESULT ( *put_Persistent)(IRTCPresenceContact *This, VARIANT_BOOL fPersistent);};
struct IRTCUserSearchQueryVtbl {HRESULT ( *QueryInterface)(IRTCUserSearchQuery *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCUserSearchQuery *This);ULONG ( *Release)(IRTCUserSearchQuery *This);HRESULT ( *put_SearchTerm)(IRTCUserSearchQuery *This, BSTR bstrName, BSTR bstrValue);HRESULT ( *get_SearchTerm)(IRTCUserSearchQuery *This, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *get_SearchTerms)(IRTCUserSearchQuery *This, BSTR *pbstrNames);HRESULT ( *put_SearchPreference)(IRTCUserSearchQuery *This, RTC_USER_SEARCH_PREFERENCE enPreference, int lValue);HRESULT ( *get_SearchPreference)(IRTCUserSearchQuery *This, RTC_USER_SEARCH_PREFERENCE enPreference, int *plValue);HRESULT ( *put_SearchDomain)(IRTCUserSearchQuery *This, BSTR bstrDomain);HRESULT ( *get_SearchDomain)(IRTCUserSearchQuery *This, BSTR *pbstrDomain);};
typedef BOOL ( *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue, DWORD  *    rgdwValueType,  LPCWSTR rgpwszValueName[],  BYTE * rgpbValueData[], DWORD  *    rgcbValueData, void *pvArg);
struct IAnimationComposerVtbl {HRESULT ( *QueryInterface)(IAnimationComposer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationComposer *This);ULONG ( *Release)(IAnimationComposer *This);HRESULT ( *get_attribute)(IAnimationComposer *This, BSTR *attributeName);HRESULT ( *ComposerInit)(IAnimationComposer *This, IDispatch *composerSite, BSTR attributeName);HRESULT ( *ComposerDetach)(IAnimationComposer *This);HRESULT ( *UpdateFragments)(IAnimationComposer *This);HRESULT ( *AddFragment)(IAnimationComposer *This, IDispatch *newAnimationFragment);HRESULT ( *InsertFragment)(IAnimationComposer *This, IDispatch *newAnimationFragment, VARIANT index);HRESULT ( *RemoveFragment)(IAnimationComposer *This, IDispatch *oldAnimationFragment);HRESULT ( *EnumerateFragments)(IAnimationComposer *This, IEnumVARIANT **fragments);HRESULT ( *GetNumFragments)(IAnimationComposer *This, int *fragmentCount);};
struct IExtensionServicesVtbl {HRESULT ( *QueryInterface)(IExtensionServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExtensionServices *This);ULONG ( *Release)(IExtensionServices *This);HRESULT ( *SetAdditionalHeaders)(IExtensionServices *This, LPCWSTR pwzAdditionalHeaders);HRESULT ( *SetAuthenticateData)(IExtensionServices *This, HWND phwnd, LPCWSTR pwzUsername, LPCWSTR pwzPassword);};
struct IHTMLElementRenderVtbl {HRESULT ( *QueryInterface)(IHTMLElementRender *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementRender *This);ULONG ( *Release)(IHTMLElementRender *This);HRESULT ( *DrawToDC)(IHTMLElementRender *This, HDC hDC);HRESULT ( *SetDocumentPrinter)(IHTMLElementRender *This, BSTR bstrPrinterName, HDC hDC);};
struct INetCfgBindingPathVtbl {HRESULT ( *QueryInterface)(INetCfgBindingPath *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgBindingPath *This);ULONG ( *Release)(INetCfgBindingPath *This);HRESULT ( *IsSamePathAs)(INetCfgBindingPath *This, INetCfgBindingPath *pPath);HRESULT ( *IsSubPathOf)(INetCfgBindingPath *This, INetCfgBindingPath *pPath);HRESULT ( *IsEnabled)(INetCfgBindingPath *This);HRESULT ( *Enable)(INetCfgBindingPath *This, BOOL fEnable);HRESULT ( *GetPathToken)(INetCfgBindingPath *This, LPWSTR *ppszwPathToken);HRESULT ( *GetOwner)(INetCfgBindingPath *This, INetCfgComponent **ppComponent);HRESULT ( *GetDepth)(INetCfgBindingPath *This, ULONG *pcInterfaces);HRESULT ( *EnumBindingInterfaces)(INetCfgBindingPath *This, IEnumNetCfgBindingInterface **ppenumInterface);};
struct WINTRUST_CATALOG_INFO_ {DWORD cbStruct;DWORD dwCatalogVersion;LPCWSTR pcwszCatalogFilePath;LPCWSTR pcwszMemberTag;LPCWSTR pcwszMemberFilePath;HANDLE hMemberFile;BYTE *pbCalculatedFileHash;DWORD cbCalculatedFileHash;PCCTL_CONTEXT pcCatalogContext;};
struct IElementNamespaceVtbl {HRESULT ( *QueryInterface)(IElementNamespace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespace *This);ULONG ( *Release)(IElementNamespace *This);HRESULT ( *AddTag)(IElementNamespace *This, BSTR bstrTagName, LONG lFlags);};
struct IOpsProfileSimpleVtbl {HRESULT ( *QueryInterface)(IOpsProfileSimple *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOpsProfileSimple *This);ULONG ( *Release)(IOpsProfileSimple *This);HRESULT ( *ReadProperties)(IOpsProfileSimple *This, int lNumProperties, LPCWSTR  *    szProperties, LPWSTR szReturnValues[]);HRESULT ( *WriteProperties)(IOpsProfileSimple *This, int lNumProperties, LPCWSTR  *    szProperties,  LPCWSTR szValues[]);};
struct ITravelLogClient2Vtbl {HRESULT ( *QueryInterface)(ITravelLogClient2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLogClient2 *This);ULONG ( *Release)(ITravelLogClient2 *This);HRESULT ( *GetDummyWindowData)(ITravelLogClient2 *This, LPWSTR pszUrl, LPWSTR pszTitle, LPWINDOWDATA pWinData);};
struct IVoIPCallerInfoDBVtbl {HRESULT ( *QueryInterface)(IVoIPCallerInfoDB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallerInfoDB *This);ULONG ( *Release)(IVoIPCallerInfoDB *This);HRESULT ( *Init)(IVoIPCallerInfoDB *This, BSTR bstrURI);HRESULT ( *CreateRecord)(IVoIPCallerInfoDB *This, IVoIPCallerInfoRecord **ppiRecord);HRESULT ( *get_Enumerator)(IVoIPCallerInfoDB *This, IVoIPCallerInfoDBEnum **ppiEnum);HRESULT ( *FindCallerInfoByURI)(IVoIPCallerInfoDB *This, BSTR bstrURI, IVoIPCallerInfoRecord **ppiRecord);HRESULT ( *FindCallerInfoBySpeedDialEntry)(IVoIPCallerInfoDB *This, INT idxSpeedDial, IVoIPCallerInfoRecord **ppiRecord);HRESULT ( *get_SpeedDialEnumerator)(IVoIPCallerInfoDB *This, IVoIPCallerInfoDBEnum **ppiEnum);HRESULT ( *get_FriendlyNameEnumerator)(IVoIPCallerInfoDB *This, IVoIPCallerInfoDBEnum **ppiEnum);};
struct IDATASRCListenerVtbl {HRESULT ( *QueryInterface)(IDATASRCListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDATASRCListener *This);ULONG ( *Release)(IDATASRCListener *This);HRESULT ( *datasrcChanged)(IDATASRCListener *This, BSTR bstrQualifier, BOOL fDataAvail);};
struct IDirectContainerVtbl {HRESULT ( *QueryInterface)(IDirectContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectContainer *This);ULONG ( *Release)(IDirectContainer *This);HRESULT ( *CreateControl)(IDirectContainer *This, BSTR bszClsid, DWORD dwClsContext, IUnknown **ppunk, DWORD dwWindowStyle);HRESULT ( *SetServiceProvider)(IDirectContainer *This, IServiceProvider *pspSet);HRESULT ( *SetIInputObjectSite)(IDirectContainer *This, IUnknown *pios);HRESULT ( *ShowControl)(IDirectContainer *This);HRESULT ( *HideControl)(IDirectContainer *This);HRESULT ( *IsControlCreated)(IDirectContainer *This);HRESULT ( *DestroyControl)(IDirectContainer *This);};
struct IEnumPStoreItemsVtbl {HRESULT ( *QueryInterface)(IEnumPStoreItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPStoreItems *This);ULONG ( *Release)(IEnumPStoreItems *This);HRESULT ( *Next)(IEnumPStoreItems *This, DWORD celt, LPWSTR *rgelt, DWORD *pceltFetched);HRESULT ( *Skip)(IEnumPStoreItems *This, DWORD celt);HRESULT ( *Reset)(IEnumPStoreItems *This);HRESULT ( *Clone)(IEnumPStoreItems *This, IEnumPStoreItems **ppenum);};
struct IMarkupTextFragsVtbl {HRESULT ( *QueryInterface)(IMarkupTextFrags *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupTextFrags *This);ULONG ( *Release)(IMarkupTextFrags *This);HRESULT ( *GetTextFragCount)(IMarkupTextFrags *This, int *pcFrags);HRESULT ( *GetTextFrag)(IMarkupTextFrags *This, int iFrag, BSTR *pbstrFrag, IMarkupPointer *pPointerFrag);HRESULT ( *RemoveTextFrag)(IMarkupTextFrags *This, int iFrag);HRESULT ( *InsertTextFrag)(IMarkupTextFrags *This, int iFrag, BSTR bstrInsert, IMarkupPointer *pPointerInsert);HRESULT ( *FindTextFragFromMarkupPointer)(IMarkupTextFrags *This, IMarkupPointer *pPointerFind, int *piFrag, BOOL *pfFragFound);};
struct IRecalcHostDebugVtbl {HRESULT ( *QueryInterface)(IRecalcHostDebug *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecalcHostDebug *This);ULONG ( *Release)(IRecalcHostDebug *This);HRESULT ( *GetObjectInfo)(IRecalcHostDebug *This, IUnknown *pUnk, DISPID dispid, BSTR *pbstrID, BSTR *pbstrMember, BSTR *pbstrTag);};
typedef INT ( *LPWSPSTRINGTOADDRESS)(LPWSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength, LPINT lpErrno);
struct _ACTRL_ACCESS_ENTRYW {TRUSTEE_W Trustee;ULONG fAccessFlags;ACCESS_RIGHTS Access;ACCESS_RIGHTS ProvSpecificAccess;INHERIT_FLAGS Inheritance;LPWSTR lpInheritProperty;};
struct IClientSecurityVtbl {HRESULT ( *QueryInterface)(IClientSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClientSecurity *This);ULONG ( *Release)(IClientSecurity *This);HRESULT ( *QueryBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);HRESULT ( *SetBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD AuthnSvc, DWORD AuthzSvc, OLECHAR *pServerPrincName, DWORD AuthnLevel, DWORD ImpLevel, void *pAuthInfo, DWORD Capabilities);HRESULT ( *CopyProxy)(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy);};
struct IDownloadNotifyVtbl {HRESULT ( *QueryInterface)(IDownloadNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDownloadNotify *This);ULONG ( *Release)(IDownloadNotify *This);HRESULT ( *DownloadStart)(IDownloadNotify *This, LPCWSTR pchUrl, DWORD dwDownloadId, DWORD dwType, DWORD dwReserved);HRESULT ( *DownloadComplete)(IDownloadNotify *This, DWORD dwDownloadId, HRESULT hrNotify, DWORD dwReserved);};
struct IRTCPortManagerVtbl {HRESULT ( *QueryInterface)(IRTCPortManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPortManager *This);ULONG ( *Release)(IRTCPortManager *This);HRESULT ( *GetMapping)(IRTCPortManager *This, BSTR bstrRemoteAddress, RTC_PORT_TYPE enPortType, BSTR *pbstrInternalLocalAddress, int *plInternalLocalPort, BSTR *pbstrExternalLocalAddress, int *plExternalLocalPort);HRESULT ( *UpdateRemoteAddress)(IRTCPortManager *This, BSTR bstrRemoteAddress, BSTR bstrInternalLocalAddress, int lInternalLocalPort, BSTR bstrExternalLocalAddress, int lExternalLocalPort);HRESULT ( *ReleaseMapping)(IRTCPortManager *This, BSTR bstrInternalLocalAddress, int lInternalLocalPort, BSTR bstrExternalLocalAddress, int lExternalLocalAddress);};
typedef BOOL ( *LPDDENUMCALLBACKEXW)(GUID *, LPWSTR, LPWSTR, LPVOID, HMONITOR);
struct WINTRUST_CERT_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CERT_CONTEXT *psCertContext;DWORD chStores;HCERTSTORE *pahStores;DWORD dwFlags;FILETIME *psftVerifyAsOf;};
struct _MANAGEDAPPLICATION {LPWSTR pszPackageName;LPWSTR pszPublisher;DWORD dwVersionHi;DWORD dwVersionLo;DWORD dwRevision;GUID GpoId;LPWSTR pszPolicyName;GUID ProductId;LANGID Language;LPWSTR pszOwner;LPWSTR pszCompany;LPWSTR pszComments;LPWSTR pszContact;LPWSTR pszSupportUrl;DWORD dwPathType;BOOL bInstalled;};
struct tagHTTPMAILRESPONSE {HTTPMAILCOMMAND command;DWORD dwContext;BOOL fDone;IXPRESULT rIxpResult;IHTTPMailTransport *pTransport;tagHTTPMAILRESPONSE___25469AC23E09BBA79E0FC09E85120BDE __anonymous0;};
struct ISearchContextVtbl {HRESULT ( *QueryInterface)(ISearchContext *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ISearchContext *This);ULONG ( *Release)(ISearchContext *This);HRESULT ( *GetSearchUrl)(ISearchContext *This, BSTR *pbstrSearchUrl);HRESULT ( *GetSearchText)(ISearchContext *This, BSTR *pbstrSearchText);HRESULT ( *GetSearchStyle)(ISearchContext *This, DWORD *pdwSearchStyle);};
struct IUPnPRegistrarVtbl {HRESULT ( *QueryInterface)(IUPnPRegistrar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPRegistrar *This);ULONG ( *Release)(IUPnPRegistrar *This);HRESULT ( *RegisterDevice)(IUPnPRegistrar *This, BSTR bstrXMLDesc, BSTR bstrProgIDDeviceControlClass, BSTR bstrInitString, BSTR bstrContainerId, BSTR bstrResourcePath, int nLifeTime, BSTR *pbstrDeviceIdentifier);HRESULT ( *RegisterRunningDevice)(IUPnPRegistrar *This, BSTR bstrXMLDesc, IUnknown *punkDeviceControl, BSTR bstrInitString, BSTR bstrResourcePath, int nLifeTime, BSTR *pbstrDeviceIdentifier);HRESULT ( *RegisterDeviceProvider)(IUPnPRegistrar *This, BSTR bstrProviderName, BSTR bstrProgIDProviderClass, BSTR bstrInitString, BSTR bstrContainerId);HRESULT ( *GetUniqueDeviceName)(IUPnPRegistrar *This, BSTR bstrDeviceIdentifier, BSTR bstrTemplateUDN, BSTR *pbstrUDN);HRESULT ( *UnregisterDevice)(IUPnPRegistrar *This, BSTR bstrDeviceIdentifier, BOOL fPermanent);HRESULT ( *UnregisterDeviceProvider)(IUPnPRegistrar *This, BSTR bstrProviderName);};
struct IURLSearchHookVtbl {HRESULT ( *QueryInterface)(IURLSearchHook *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IURLSearchHook *This);ULONG ( *Release)(IURLSearchHook *This);HRESULT ( *Translate)(IURLSearchHook *This, LPWSTR lpwszSearchURL, DWORD cchBufferSize);};
struct IVoIPCallLogDBVtbl {HRESULT ( *QueryInterface)(IVoIPCallLogDB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallLogDB *This);ULONG ( *Release)(IVoIPCallLogDB *This);HRESULT ( *Init)(IVoIPCallLogDB *This, BSTR bstrURI);HRESULT ( *CreateRecord)(IVoIPCallLogDB *This, enum VoIPCallType MIDL_0015, IVoIPCallRecord **ppiRecord);HRESULT ( *put_Capacity)(IVoIPCallLogDB *This, int cRecords);HRESULT ( *get_Capacity)(IVoIPCallLogDB *This, int *cRecords);HRESULT ( *get_IncomingEnumerator)(IVoIPCallLogDB *This, IVoIPCallLogDBEnum **ppiEnum);HRESULT ( *get_OutgoingEnumerator)(IVoIPCallLogDB *This, IVoIPCallLogDBEnum **ppiEnum);HRESULT ( *get_MissedEnumerator)(IVoIPCallLogDB *This, IVoIPCallLogDBEnum **ppiEnum);};
struct IXMLNodeSourceVtbl {HRESULT ( *QueryInterface)(IXMLNodeSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLNodeSource *This);ULONG ( *Release)(IXMLNodeSource *This);HRESULT ( *SetFactory)(IXMLNodeSource *This, IXMLNodeFactory *pNodeFactory);HRESULT ( *GetFactory)(IXMLNodeSource *This, IXMLNodeFactory **ppNodeFactory);HRESULT ( *Abort)(IXMLNodeSource *This, BSTR bstrErrorInfo);ULONG ( *GetLineNumber)(IXMLNodeSource *This);ULONG ( *GetLinePosition)(IXMLNodeSource *This);ULONG ( *GetAbsolutePosition)(IXMLNodeSource *This);HRESULT ( *GetLineBuffer)(IXMLNodeSource *This,  WCHAR **ppwcBuf, ULONG *pulLen, ULONG *pulStartPos);HRESULT ( *GetLastError)(IXMLNodeSource *This);HRESULT ( *GetErrorInfo)(IXMLNodeSource *This, BSTR *pbstrErrorInfo);ULONG ( *GetFlags)(IXMLNodeSource *This);HRESULT ( *GetURL)(IXMLNodeSource *This,  WCHAR **ppwcBuf);};
typedef ULONG QUERYFORCONNECTION(PLDAP PrimaryConnection, PLDAP ReferralFromConnection, PWCHAR NewDN, PCHAR HostName, ULONG PortNumber, PVOID SecAuthIdentity, PVOID CurrentUserToken, PLDAP *ConnectionToUse);
struct IAuthenticateVtbl {HRESULT ( *QueryInterface)(IAuthenticate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAuthenticate *This);ULONG ( *Release)(IAuthenticate *This);HRESULT ( *Authenticate)(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);};
struct ISQLErrorInfoVtbl {HRESULT ( *QueryInterface)(ISQLErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISQLErrorInfo *This);ULONG ( *Release)(ISQLErrorInfo *This);HRESULT ( *GetSQLInfo)(ISQLErrorInfo *This, BSTR *pbstrSQLState, LONG *plNativeError);};
struct IFilterGraphVtbl {HRESULT ( *QueryInterface)(IFilterGraph *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterGraph *This);ULONG ( *Release)(IFilterGraph *This);HRESULT ( *AddFilter)(IFilterGraph *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IFilterGraph *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IFilterGraph *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IFilterGraph *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IFilterGraph *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IFilterGraph *This, IPin *ppin);HRESULT ( *Disconnect)(IFilterGraph *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IFilterGraph *This);};
struct IMimeEditTagVtbl {HRESULT ( *QueryInterface)(IMimeEditTag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEditTag *This);ULONG ( *Release)(IMimeEditTag *This);HRESULT ( *GetSrc)(IMimeEditTag *This, BSTR *pbstr);HRESULT ( *SetSrc)(IMimeEditTag *This, BSTR bstr);HRESULT ( *GetDest)(IMimeEditTag *This, BSTR *pbstr);HRESULT ( *SetDest)(IMimeEditTag *This, BSTR bstr);HRESULT ( *OnPreSave)(IMimeEditTag *This);HRESULT ( *OnPostSave)(IMimeEditTag *This);HRESULT ( *CanPackage)(IMimeEditTag *This);HRESULT ( *IsValidMimeType)(IMimeEditTag *This, LPWSTR pszTypeW);};
struct IMonikerPropVtbl {HRESULT ( *QueryInterface)(IMonikerProp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMonikerProp *This);ULONG ( *Release)(IMonikerProp *This);HRESULT ( *PutProperty)(IMonikerProp *This, MONIKERPROPERTY mkp, LPCWSTR val);};
struct IObexServiceVtbl {HRESULT ( *QueryInterface)(IObexService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObexService *This);ULONG ( *Release)(IObexService *This);HRESULT ( *GetConnection)(IObexService *This, IObexServiceConnection **ppConnection, boolean fWait);HRESULT ( *Close)(IObexService *This);HRESULT ( *SetPassword)(IObexService *This, LPCWSTR pszPassword);};
struct ITaskTriggerVtbl {HRESULT ( *QueryInterface)(ITaskTrigger *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskTrigger *This);ULONG ( *Release)(ITaskTrigger *This);HRESULT ( *SetTrigger)(ITaskTrigger *This,  PTASK_TRIGGER pTrigger);HRESULT ( *GetTrigger)(ITaskTrigger *This, PTASK_TRIGGER pTrigger);HRESULT ( *GetTriggerString)(ITaskTrigger *This, LPWSTR *ppwszTrigger);};
struct tagMENUITEMINFOW {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;LPWSTR dwTypeData;UINT cch;};
struct tagProxyFileInfo { PCInterfaceProxyVtblList *pProxyVtblList; PCInterfaceStubVtblList *pStubVtblList; PCInterfaceName *pNamesArray; IID **pDelegatedIIDs; PIIDLookup pIIDLookupRtn;unsigned short TableSize;unsigned short TableVersion;unsigned int Filler1;unsigned int Filler2;unsigned int Filler3;unsigned int Filler4;};
struct CRYPTCATMEMBER_ {DWORD cbStruct;LPWSTR pwszReferenceTag;LPWSTR pwszFileName;GUID gSubjectType;DWORD fdwMemberFlags;struct SIP_INDIRECT_DATA_ *pIndirectData;DWORD dwCertVersion;DWORD dwReserved;HANDLE hReserved;CRYPT_ATTR_BLOB sEncodedIndirectData;CRYPT_ATTR_BLOB sEncodedMemberInfo;};
struct IMsgrUserOEVtbl {HRESULT ( *QueryInterface)(IMsgrUserOE *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrUserOE *This);ULONG ( *Release)(IMsgrUserOE *This);HRESULT ( *get_FriendlyName)(IMsgrUserOE *This, BSTR *pbstrFriendlyName);HRESULT ( *get_State)(IMsgrUserOE *This, MSTATEOE *pmStateOE);HRESULT ( *get_LogonName)(IMsgrUserOE *This, BSTR *pbstrLogonName);};
struct IObexDeviceVtbl {HRESULT ( *QueryInterface)(IObexDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObexDevice *This);ULONG ( *Release)(IObexDevice *This);HRESULT ( *Connect)(IObexDevice *This, LPCWSTR pszPassword, DWORD dwCapability, IHeaderCollection *pHeaders);HRESULT ( *Disconnect)(IObexDevice *This, IHeaderCollection *pHeaders);HRESULT ( *Get)(IObexDevice *This, IHeaderCollection *pHeaders, IStream **ppStream);HRESULT ( *Put)(IObexDevice *This, IHeaderCollection *pHeaders, IStream **ppStream);HRESULT ( *Abort)(IObexDevice *This, IHeaderCollection *pHeaders);HRESULT ( *SetPath)(IObexDevice *This, LPCWSTR pszName, DWORD dwFlags, IHeaderCollection *pHeaders);HRESULT ( *EnumProperties)(IObexDevice *This,  IID * riid, void **ppv);HRESULT ( *SetPassword)(IObexDevice *This, LPCWSTR pszPassword);HRESULT ( *BindToStorage)(IObexDevice *This, DWORD dwCapability, IStorage **ppStorage);};
struct IWSDLReaderVtbl {HRESULT ( *QueryInterface)(IWSDLReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWSDLReader *This);ULONG ( *Release)(IWSDLReader *This);HRESULT ( *Load)(IWSDLReader *This, BSTR bstrWSDLFileSpec, BSTR bstrWSMLFileSpec);HRESULT ( *GetSoapServices)(IWSDLReader *This, IEnumWSDLService **ppWSDLServiceEnum);HRESULT ( *ParseRequest)(IWSDLReader *This, ISoapReader *pSoapReader, IWSDLPort **ppIWSDLPort, IWSDLOperation **ppIWSDLOperation);HRESULT ( *setProperty)(IWSDLReader *This, BSTR bstrPropertyName, VARIANT varPropValue);};
struct _CRYPT_OID_INFO {DWORD cbSize;LPCSTR pszOID;LPCWSTR pwszName;DWORD dwGroupId;_CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 __anonymous0;CRYPT_DATA_BLOB ExtraInfo;};
struct _tagRemBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;REMSECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct tagRFCDLGPARAMW {DWORD dwFlags;LPCWSTR pszFilename;LPCWSTR pszLocation;LPCWSTR pszNewName;LPCWSTR pszNetworkModifiedBy;LPCWSTR pszLocalModifiedBy;LPCWSTR pszNetworkModifiedOn;LPCWSTR pszLocalModifiedOn;HICON hIKeepBoth;HICON hIKeepLocal;HICON hIKeepNetwork;PFNRFCDCALLBACK pfnCallBack;LPARAM lCallerData;};
typedef BOOL ( *GETCONTROLINFO)(HANDLE hControlHandle, UINT nFlag, LPDWORD lpdwData, LPTSTR lpszBuf, int nBufLen);
typedef BOOL ( *PROPENUMPROCEX)(HWND, LPWSTR, HANDLE, DWORD);
struct IProgSinkVtbl {HRESULT ( *QueryInterface)(IProgSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProgSink *This);ULONG ( *Release)(IProgSink *This);HRESULT ( *AddProgress)(IProgSink *This, DWORD dwClass, DWORD *pdwCookie);HRESULT ( *SetProgress)(IProgSink *This, DWORD dwCookie, DWORD dwFlags, DWORD dwState, LPCTSTR pchText, DWORD dwIds, DWORD dwPos, DWORD dwMax);HRESULT ( *DelProgress)(IProgSink *This, DWORD dwCookie);};
struct _STARTUPINFOW {DWORD cb;LPWSTR lpReserved;LPWSTR lpDesktop;LPWSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct _CREDENTIALW {DWORD Flags;DWORD Type;LPWSTR TargetName;LPWSTR Comment;FILETIME LastWritten;DWORD CredentialBlobSize;LPBYTE CredentialBlob;DWORD Persist;DWORD AttributeCount;PCREDENTIAL_ATTRIBUTEW Attributes;LPWSTR TargetAlias;LPWSTR UserName;};
struct IParserVtbl {HRESULT ( *QueryInterface)(IParser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParser *This);ULONG ( *Release)(IParser *This);HRESULT ( *CreateSession)(IParser *This,  GUID *pguidDialect, LPCWSTR pwszMachine, IParserVerify *ppIParserVerfiy, IColumnMapperCreator *pIColMapCreator, IParserSession **ppIParserSession);};
struct __MIDL___MIDL_itf_strmif_0080_0002 {LPWSTR strName;BOOL bRendered;BOOL bOutput;BOOL bZero;BOOL bMany; CLSID *clsConnectsToFilter; WCHAR *strConnectsToPin;UINT nMediaTypes; REGPINTYPES *lpMediaType;};
typedef SECURITY_STATUS ( *INITIALIZE_SECURITY_CONTEXT_FN_W)(PCredHandle, PCtxtHandle, SEC_WCHAR *, unsigned int, unsigned int, unsigned int, PSecBufferDesc, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct IShellIconOverlayIdentifierVtbl {HRESULT ( *QueryInterface)(IShellIconOverlayIdentifier *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellIconOverlayIdentifier *This);ULONG ( *Release)(IShellIconOverlayIdentifier *This);HRESULT ( *IsMemberOf)(IShellIconOverlayIdentifier *This, LPCWSTR pwszPath, DWORD dwAttrib);HRESULT ( *GetOverlayInfo)(IShellIconOverlayIdentifier *This, LPWSTR pwszIconFile, int cchMax, int *pIndex, DWORD *pdwFlags);HRESULT ( *GetPriority)(IShellIconOverlayIdentifier *This, int *pIPriority);};
struct IEmptyVolumeCacheCallBackVtbl {HRESULT ( *QueryInterface)(IEmptyVolumeCacheCallBack *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEmptyVolumeCacheCallBack *This);ULONG ( *Release)(IEmptyVolumeCacheCallBack *This);HRESULT ( *ScanProgress)(IEmptyVolumeCacheCallBack *This, DWORDLONG dwlSpaceUsed, DWORD dwFlags, LPCWSTR pcwszStatus);HRESULT ( *PurgeProgress)(IEmptyVolumeCacheCallBack *This, DWORDLONG dwlSpaceFreed, DWORDLONG dwlSpaceToFree, DWORD dwFlags, LPCWSTR pcwszStatus);};
struct ICurrentWorkingDirectoryVtbl {HRESULT ( *QueryInterface)(ICurrentWorkingDirectory *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICurrentWorkingDirectory *This);ULONG ( *Release)(ICurrentWorkingDirectory *This);HRESULT ( *GetDirectory)(ICurrentWorkingDirectory *This, LPWSTR pwzPath, DWORD cchSize);HRESULT ( *SetDirectory)(ICurrentWorkingDirectory *This, LPCWSTR pwzPath);};
struct IRegisterVirusScanEngineVtbl {HRESULT ( *QueryInterface)(IRegisterVirusScanEngine *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRegisterVirusScanEngine *This);ULONG ( *Release)(IRegisterVirusScanEngine *This);HRESULT ( *RegisterScanEngine)(IRegisterVirusScanEngine *This,  CLSID * rclsid, LPWSTR pwszDescription, DWORD dwFlags, DWORD dwReserved, DWORD *pdwCookie);HRESULT ( *UnRegisterScanEngine)(IRegisterVirusScanEngine *This,  CLSID * rclsid, LPWSTR pwszDescription, DWORD dwFlags, DWORD dwReserved, DWORD dwCookie);};
struct IElementNamespaceTableVtbl {HRESULT ( *QueryInterface)(IElementNamespaceTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementNamespaceTable *This);ULONG ( *Release)(IElementNamespaceTable *This);HRESULT ( *AddNamespace)(IElementNamespaceTable *This, BSTR bstrNamespace, BSTR bstrUrn, LONG lFlags, VARIANT *pvarFactory);};
struct IRTCSessionCallControlVtbl {HRESULT ( *QueryInterface)(IRTCSessionCallControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionCallControl *This);ULONG ( *Release)(IRTCSessionCallControl *This);HRESULT ( *Hold)(IRTCSessionCallControl *This, LONG_PTR lCookie);HRESULT ( *UnHold)(IRTCSessionCallControl *This, LONG_PTR lCookie);HRESULT ( *Forward)(IRTCSessionCallControl *This, BSTR bstrForwardToURI);HRESULT ( *Refer)(IRTCSessionCallControl *This, BSTR bstrReferToURI, BSTR bstrReferCookie);HRESULT ( *put_ReferredByURI)(IRTCSessionCallControl *This, BSTR bstrReferredByURI);HRESULT ( *get_ReferredByURI)(IRTCSessionCallControl *This, BSTR *pbstrReferredByURI);HRESULT ( *put_ReferCookie)(IRTCSessionCallControl *This, BSTR bstrReferCookie);HRESULT ( *get_ReferCookie)(IRTCSessionCallControl *This, BSTR *pbstrReferCookie);HRESULT ( *get_IsReferred)(IRTCSessionCallControl *This, VARIANT_BOOL *pfIsReferred);};
struct IInternetProtocolSinkVtbl {HRESULT ( *QueryInterface)(IInternetProtocolSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolSink *This);ULONG ( *Release)(IInternetProtocolSink *This);HRESULT ( *Switch)(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData);HRESULT ( *ReportProgress)(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *ReportData)(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);HRESULT ( *ReportResult)(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);};
struct IDXTFilterCollectionVtbl {HRESULT ( *QueryInterface)(IDXTFilterCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTFilterCollection *This);ULONG ( *Release)(IDXTFilterCollection *This);HRESULT ( *Init)(IDXTFilterCollection *This,  IDXTFilterBehavior *pDXTFilterBehavior);HRESULT ( *AddFilter)(IDXTFilterCollection *This,  BSTR bstrFilterString,  DWORD dwFlags, DWORD * pdwFilterType, HFILTER * phFilter);HRESULT ( *RemoveFilter)(IDXTFilterCollection *This,  HFILTER hFilter);HRESULT ( *RemoveFilters)(IDXTFilterCollection *This,  DWORD dwFlags);HRESULT ( *GetFilterController)(IDXTFilterCollection *This,  HFILTER hFilter, IDXTFilterController ** ppDXTFilterController);};
struct IActiveIMMRegistrarVtbl {HRESULT ( *QueryInterface)(IActiveIMMRegistrar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIMMRegistrar *This);ULONG ( *Release)(IActiveIMMRegistrar *This);HRESULT ( *RegisterIME)(IActiveIMMRegistrar *This,  CLSID * rclsid, LANGID lgid, LPCWSTR pszIconFile, LPCWSTR pszDesc);HRESULT ( *UnregisterIME)(IActiveIMMRegistrar *This,  CLSID * rclsid);};
struct IHTMLPrivateWindow3Vtbl {HRESULT ( *QueryInterface)(IHTMLPrivateWindow3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPrivateWindow3 *This);ULONG ( *Release)(IHTMLPrivateWindow3 *This);HRESULT ( *NavigateEx)(IHTMLPrivateWindow3 *This, BSTR bstrURL, BSTR bstrUnencodedUrl, BSTR bstrLocation, BSTR bstrContext, IBindCtx *pBindCtx, DWORD dwNavOptions, DWORD dwFHLFlags);HRESULT ( *GetInnerWindowUnknown)(IHTMLPrivateWindow3 *This, IUnknown **ppUnknown);HRESULT ( *OpenEx)(IHTMLPrivateWindow3 *This, BSTR url, BSTR urlContext, BSTR name, BSTR features, VARIANT_BOOL replace, IHTMLWindow2 **pomWindowResult);};
struct IDXTFilterBehaviorVtbl {HRESULT ( *QueryInterface)(IDXTFilterBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTFilterBehavior *This);ULONG ( *Release)(IDXTFilterBehavior *This);HRESULT ( *Initialize)(IDXTFilterBehavior *This, IDXTransformFactory *pDXTransformFactory);HRESULT ( *GetFilterCollection)(IDXTFilterBehavior *This, IDXTFilterCollection **ppDXTFilterCollection);HRESULT ( *LockFilterChainForEdit)(IDXTFilterBehavior *This, DWORD *pdwKey);HRESULT ( *AddFilterFromBSTR)(IDXTFilterBehavior *This,  BSTR bstrFilterString,  DWORD dwFlags, DWORD * pdwFilterType, HFILTER * phFilter);HRESULT ( *DestroyFilter)(IDXTFilterBehavior *This, HFILTER hFilter);HRESULT ( *UnlockFilterChain)(IDXTFilterBehavior *This, DWORD dwKey);};
struct IEditDebugServicesVtbl {HRESULT ( *QueryInterface)(IEditDebugServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEditDebugServices *This);ULONG ( *Release)(IEditDebugServices *This);HRESULT ( *GetCp)(IEditDebugServices *This, IMarkupPointer *pIPointer, int *pcp);HRESULT ( *SetDebugName)(IEditDebugServices *This, IMarkupPointer *pIPointer, LPCTSTR strDbgName);HRESULT ( *SetDisplayPointerDebugName)(IEditDebugServices *This, IDisplayPointer *pDispPointer, LPCTSTR strDbgName);HRESULT ( *DumpTree)(IEditDebugServices *This, IMarkupPointer *pIPointer);HRESULT ( *LinesInElement)(IEditDebugServices *This, IHTMLElement *pIElement, int *piLines);HRESULT ( *FontsOnLine)(IEditDebugServices *This, IHTMLElement *pIElement, int iLine, BSTR *pbstrFonts);HRESULT ( *GetPixel)(IEditDebugServices *This, int X, int Y, int *piColor);HRESULT ( *IsUsingBckgrnRecalc)(IEditDebugServices *This, BOOL *pfUsingBckgrnRecalc);HRESULT ( *IsEncodingAutoSelect)(IEditDebugServices *This, BOOL *pfEncodingAutoSelect);HRESULT ( *EnableEncodingAutoSelect)(IEditDebugServices *This, BOOL fEnable);HRESULT ( *IsUsingTableIncRecalc)(IEditDebugServices *This, BOOL *pfUsingTableIncRecalc);};
struct IRTCPresenceDeviceVtbl {HRESULT ( *QueryInterface)(IRTCPresenceDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPresenceDevice *This);ULONG ( *Release)(IRTCPresenceDevice *This);HRESULT ( *get_Status)(IRTCPresenceDevice *This, RTC_PRESENCE_STATUS *penStatus);HRESULT ( *get_Notes)(IRTCPresenceDevice *This, BSTR *pbstrNotes);HRESULT ( *get_PresenceProperty)(IRTCPresenceDevice *This, RTC_PRESENCE_PROPERTY enProperty, BSTR *pbstrProperty);HRESULT ( *GetPresenceData)(IRTCPresenceDevice *This, BSTR *pbstrNamespace, BSTR *pbstrData);};
struct _CMInvokeCommandInfoEx {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;LPCSTR lpTitle;LPCWSTR lpVerbW;LPCWSTR lpParametersW;LPCWSTR lpDirectoryW;LPCWSTR lpTitleW;POINT ptInvoke;};
struct IHeaderCollectionVtbl {HRESULT ( *QueryInterface)(IHeaderCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHeaderCollection *This);ULONG ( *Release)(IHeaderCollection *This);HRESULT ( *AddByteArray)(IHeaderCollection *This, byte Id, unsigned int ulSize, byte *pData);HRESULT ( *AddLong)(IHeaderCollection *This, byte Id, unsigned int ulData);HRESULT ( *AddByte)(IHeaderCollection *This, byte Id, byte pData);HRESULT ( *AddUnicodeString)(IHeaderCollection *This, byte Id, LPCWSTR pszData);HRESULT ( *Remove)(IHeaderCollection *This, byte Id);HRESULT ( *RemoveAll)(IHeaderCollection *This);HRESULT ( *AddCount)(IHeaderCollection *This, unsigned int ulCount);HRESULT ( *AddName)(IHeaderCollection *This, LPCWSTR pszName);HRESULT ( *AddType)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddLength)(IHeaderCollection *This, unsigned int ulLength);HRESULT ( *AddTimeOld)(IHeaderCollection *This, unsigned int ulTime);HRESULT ( *AddTime)(IHeaderCollection *This, FILETIME *pFiletime);HRESULT ( *AddDescription)(IHeaderCollection *This, LPCWSTR pszDescription);HRESULT ( *AddTarget)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddHTTP)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddBody)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddEndOfBody)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddWho)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddConnectionId)(IHeaderCollection *This, unsigned int ulConnectionId);HRESULT ( *AddAppParams)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *AddObjectClass)(IHeaderCollection *This, unsigned int ulSize, byte *pData);HRESULT ( *EnumHeaders)(IHeaderCollection *This, IHeaderEnum **pHeaderEnum);};
struct INewShortcutHookWVtbl {HRESULT ( *QueryInterface)(INewShortcutHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(INewShortcutHookW *This);ULONG ( *Release)(INewShortcutHookW *This);HRESULT ( *SetReferent)(INewShortcutHookW *This, LPCWSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookW *This, LPWSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookW *This, LPCWSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookW *This, LPWSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookW *This, LPWSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookW *This, LPWSTR pszExtension, int cchExtension);};
typedef BOOLEAN NOTIFYOFNEWCONNECTION(PLDAP PrimaryConnection, PLDAP ReferralFromConnection, PWCHAR NewDN, PCHAR HostName, PLDAP NewConnection, ULONG PortNumber, PVOID SecAuthIdentity, PVOID CurrentUser, ULONG ErrorCodeFromBind);
struct IDvdGraphBuilderVtbl {HRESULT ( *QueryInterface)(IDvdGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdGraphBuilder *This);ULONG ( *Release)(IDvdGraphBuilder *This);HRESULT ( *GetFiltergraph)(IDvdGraphBuilder *This, IGraphBuilder **ppGB);HRESULT ( *GetDvdInterface)(IDvdGraphBuilder *This,  IID * riid, void **ppvIF);HRESULT ( *RenderDvdVideoVolume)(IDvdGraphBuilder *This, LPCWSTR lpcwszPathName, DWORD dwFlags, AM_DVD_RENDERSTATUS *pStatus);};
struct IFullScreenVideoVtbl {HRESULT ( *QueryInterface)(IFullScreenVideo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFullScreenVideo *This);ULONG ( *Release)(IFullScreenVideo *This);HRESULT ( *CountModes)(IFullScreenVideo *This, int *pModes);HRESULT ( *GetModeInfo)(IFullScreenVideo *This, int Mode, int *pWidth, int *pHeight, int *pDepth);HRESULT ( *GetCurrentMode)(IFullScreenVideo *This, int *pMode);HRESULT ( *IsModeAvailable)(IFullScreenVideo *This, int Mode);HRESULT ( *IsModeEnabled)(IFullScreenVideo *This, int Mode);HRESULT ( *SetEnabled)(IFullScreenVideo *This, int Mode, int bEnabled);HRESULT ( *GetClipFactor)(IFullScreenVideo *This, int *pClipFactor);HRESULT ( *SetClipFactor)(IFullScreenVideo *This, int ClipFactor);HRESULT ( *SetMessageDrain)(IFullScreenVideo *This, HWND hwnd);HRESULT ( *GetMessageDrain)(IFullScreenVideo *This, HWND *hwnd);HRESULT ( *SetMonitor)(IFullScreenVideo *This, int Monitor);HRESULT ( *GetMonitor)(IFullScreenVideo *This, int *Monitor);HRESULT ( *HideOnDeactivate)(IFullScreenVideo *This, int Hide);HRESULT ( *IsHideOnDeactivate)(IFullScreenVideo *This);HRESULT ( *SetCaption)(IFullScreenVideo *This, BSTR strCaption);HRESULT ( *GetCaption)(IFullScreenVideo *This, BSTR *pstrCaption);HRESULT ( *SetDefault)(IFullScreenVideo *This);};
struct IResourceManagerVtbl {HRESULT ( *QueryInterface)(IResourceManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceManager *This);ULONG ( *Release)(IResourceManager *This);HRESULT ( *Register)(IResourceManager *This, LPCWSTR pName, LONG cResource, LONG *plToken);HRESULT ( *RegisterGroup)(IResourceManager *This, LPCWSTR pName, LONG cResource, LONG *palTokens, LONG *plToken);HRESULT ( *RequestResource)(IResourceManager *This, LONG idResource, IUnknown *pFocusObject, IResourceConsumer *pConsumer);HRESULT ( *NotifyAcquire)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer, HRESULT hr);HRESULT ( *NotifyRelease)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer, BOOL bStillWant);HRESULT ( *CancelRequest)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer);HRESULT ( *SetFocus)(IResourceManager *This, IUnknown *pFocusObject);HRESULT ( *ReleaseFocus)(IResourceManager *This, IUnknown *pFocusObject);};
struct ITargetFramePrivVtbl {HRESULT ( *QueryInterface)(ITargetFramePriv *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetFramePriv *This);ULONG ( *Release)(ITargetFramePriv *This);HRESULT ( *FindFrameDownwards)(ITargetFramePriv *This, LPCWSTR pszTargetName, DWORD dwFlags, IUnknown **ppunkTargetFrame);HRESULT ( *FindFrameInContext)(ITargetFramePriv *This, LPCWSTR pszTargetName, IUnknown *punkContextFrame, DWORD dwFlags, IUnknown **ppunkTargetFrame);HRESULT ( *OnChildFrameActivate)(ITargetFramePriv *This, IUnknown *pUnkChildFrame);HRESULT ( *OnChildFrameDeactivate)(ITargetFramePriv *This, IUnknown *pUnkChildFrame);HRESULT ( *NavigateHack)(ITargetFramePriv *This, DWORD grfHLNF, LPBC pbc, IBindStatusCallback *pibsc, LPCWSTR pszTargetName, LPCWSTR pszUrl, LPCWSTR pszLocation);HRESULT ( *FindBrowserByIndex)(ITargetFramePriv *This, DWORD dwID, IUnknown **ppunkBrowser);};
struct tagNETCON_PROPERTIES {GUID guidId;LPWSTR pszwName;LPWSTR pszwDeviceName;NETCON_STATUS Status;NETCON_MEDIATYPE MediaType;DWORD dwCharacter;CLSID clsidThisObject;CLSID clsidUiObject;};
struct IAMPlayListItemVtbl {HRESULT ( *QueryInterface)(IAMPlayListItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPlayListItem *This);ULONG ( *Release)(IAMPlayListItem *This);HRESULT ( *GetFlags)(IAMPlayListItem *This, DWORD *pdwFlags);HRESULT ( *GetSourceCount)(IAMPlayListItem *This, DWORD *pdwSources);HRESULT ( *GetSourceURL)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrURL);HRESULT ( *GetSourceStart)(IAMPlayListItem *This, DWORD dwSourceIndex, REFERENCE_TIME *prtStart);HRESULT ( *GetSourceDuration)(IAMPlayListItem *This, DWORD dwSourceIndex, REFERENCE_TIME *prtDuration);HRESULT ( *GetSourceStartMarker)(IAMPlayListItem *This, DWORD dwSourceIndex, DWORD *pdwMarker);HRESULT ( *GetSourceEndMarker)(IAMPlayListItem *This, DWORD dwSourceIndex, DWORD *pdwMarker);HRESULT ( *GetSourceStartMarkerName)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrStartMarker);HRESULT ( *GetSourceEndMarkerName)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrEndMarker);HRESULT ( *GetLinkURL)(IAMPlayListItem *This, BSTR *pbstrURL);HRESULT ( *GetScanDuration)(IAMPlayListItem *This, DWORD dwSourceIndex, REFERENCE_TIME *prtScanDuration);};
struct IOleUndoManagerVtbl {HRESULT ( *QueryInterface)(IOleUndoManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoManager *This);ULONG ( *Release)(IOleUndoManager *This);HRESULT ( *Open)(IOleUndoManager *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleUndoManager *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *GetOpenParentState)(IOleUndoManager *This, DWORD *pdwState);HRESULT ( *DiscardFrom)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *UndoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *RedoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *EnumUndoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *EnumRedoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *GetLastUndoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *GetLastRedoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *Enable)(IOleUndoManager *This, BOOL fEnable);};
struct IRTCParticipantVtbl {HRESULT ( *QueryInterface)(IRTCParticipant *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCParticipant *This);ULONG ( *Release)(IRTCParticipant *This);HRESULT ( *get_UserURI)(IRTCParticipant *This, BSTR *pbstrUserURI);HRESULT ( *get_Name)(IRTCParticipant *This, BSTR *pbstrName);HRESULT ( *get_Removable)(IRTCParticipant *This, VARIANT_BOOL *pfRemovable);HRESULT ( *get_State)(IRTCParticipant *This, RTC_PARTICIPANT_STATE *penState);HRESULT ( *get_Session)(IRTCParticipant *This, IRTCSession **ppSession);};
struct IRunnableObjectVtbl {HRESULT ( *QueryInterface)(IRunnableObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunnableObject *This);ULONG ( *Release)(IRunnableObject *This);HRESULT ( *GetRunningClass)(IRunnableObject *This, LPCLSID lpClsid);HRESULT ( *Run)(IRunnableObject *This, LPBINDCTX pbc);BOOL ( *IsRunning)(IRunnableObject *This);HRESULT ( *LockRunning)(IRunnableObject *This, BOOL fLock, BOOL fLastUnlockCloses);HRESULT ( *SetContainedObject)(IRunnableObject *This, BOOL fContained);};
struct IServerSecurityVtbl {HRESULT ( *QueryInterface)(IServerSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServerSecurity *This);ULONG ( *Release)(IServerSecurity *This);HRESULT ( *QueryBlanket)(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);HRESULT ( *ImpersonateClient)(IServerSecurity *This);HRESULT ( *RevertToSelf)(IServerSecurity *This);BOOL ( *IsImpersonating)(IServerSecurity *This);};
struct IUrlTrackingStgVtbl {HRESULT ( *QueryInterface)(IUrlTrackingStg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlTrackingStg *This);ULONG ( *Release)(IUrlTrackingStg *This);HRESULT ( *OnLoad)(IUrlTrackingStg *This, LPCTSTR lpszUrl, BRMODE ContextMode, BOOL fUseCache);HRESULT ( *OnUnload)(IUrlTrackingStg *This, LPCTSTR lpszUrl);};
struct IVoIPCallRecordVtbl {HRESULT ( *QueryInterface)(IVoIPCallRecord *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCallRecord *This);ULONG ( *Release)(IVoIPCallRecord *This);HRESULT ( *put_URI)(IVoIPCallRecord *This, BSTR bstrURI);HRESULT ( *get_URI)(IVoIPCallRecord *This, BSTR *pbstrURI);HRESULT ( *put_FriendlyName)(IVoIPCallRecord *This, BSTR bstrFriendlyName);HRESULT ( *get_FriendlyName)(IVoIPCallRecord *This, BSTR *pbstrFriendlyName);HRESULT ( *put_VoIPName)(IVoIPCallRecord *This, BSTR bstrVoIPName);HRESULT ( *get_VoIPName)(IVoIPCallRecord *This, BSTR *pbstrVoIPName);HRESULT ( *put_CallType)(IVoIPCallRecord *This, VoIPCallType vctType);HRESULT ( *get_CallType)(IVoIPCallRecord *This, VoIPCallType *pvctType);HRESULT ( *put_StartTime)(IVoIPCallRecord *This, SYSTEMTIME time);HRESULT ( *get_StartTime)(IVoIPCallRecord *This, SYSTEMTIME *ptime);HRESULT ( *put_EndTime)(IVoIPCallRecord *This, SYSTEMTIME time);HRESULT ( *get_EndTime)(IVoIPCallRecord *This, SYSTEMTIME *ptime);HRESULT ( *get_Duration)(IVoIPCallRecord *This, SYSTEMTIME *ptime);HRESULT ( *Commit)(IVoIPCallRecord *This);HRESULT ( *DeleteFromDB)(IVoIPCallRecord *This);};
struct _CERT_CHAIN_ELEMENT {DWORD cbSize;PCCERT_CONTEXT pCertContext;CERT_TRUST_STATUS TrustStatus;PCERT_REVOCATION_INFO pRevocationInfo;PCERT_ENHKEY_USAGE pIssuanceUsage;PCERT_ENHKEY_USAGE pApplicationUsage;LPCWSTR pwszExtendedErrorInfo;};
struct IHttpNegotiateVtbl {HRESULT ( *QueryInterface)(IHttpNegotiate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpNegotiate *This);ULONG ( *Release)(IHttpNegotiate *This);HRESULT ( *BeginningTransaction)(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT ( *OnResponse)(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);};
struct ILayoutStorageVtbl {HRESULT ( *QueryInterface)(ILayoutStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILayoutStorage *This);ULONG ( *Release)(ILayoutStorage *This);HRESULT ( *LayoutScript)(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);HRESULT ( *BeginMonitor)(ILayoutStorage *This);HRESULT ( *EndMonitor)(ILayoutStorage *This);HRESULT ( *ReLayoutDocfile)(ILayoutStorage *This, OLECHAR *pwcsNewDfName);HRESULT ( *ReLayoutDocfileOnILockBytes)(ILayoutStorage *This, ILockBytes *pILockBytes);};
struct INetConnectionVtbl {HRESULT ( *QueryInterface)(INetConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetConnection *This);ULONG ( *Release)(INetConnection *This);HRESULT ( *Connect)(INetConnection *This);HRESULT ( *Disconnect)(INetConnection *This);HRESULT ( *Delete)(INetConnection *This);HRESULT ( *Duplicate)(INetConnection *This, LPCWSTR pszwDuplicateName, INetConnection **ppCon);HRESULT ( *GetProperties)(INetConnection *This, NETCON_PROPERTIES **ppProps);HRESULT ( *GetUiObjectClassId)(INetConnection *This, CLSID *pclsid);HRESULT ( *Rename)(INetConnection *This, LPCWSTR pszwNewName);};
struct IParserSessionVtbl {HRESULT ( *QueryInterface)(IParserSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParserSession *This);ULONG ( *Release)(IParserSession *This);HRESULT ( *ToTree)(IParserSession *This, LCID lcidVal, LPCWSTR pcwszText, DBCOMMANDTREE **ppTree, IParserTreeProperties **ppPTProperties);HRESULT ( *FreeTree)(IParserSession *This, DBCOMMANDTREE **ppTree);HRESULT ( *SetCatalog)(IParserSession *This, LPCWSTR pcwszCatalog);};
struct ISecureUrlHostVtbl {HRESULT ( *QueryInterface)(ISecureUrlHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISecureUrlHost *This);ULONG ( *Release)(ISecureUrlHost *This);HRESULT ( *ValidateSecureUrl)(ISecureUrlHost *This, BOOL *pfAllow, OLECHAR *pchUrlInQuestion, DWORD dwFlags);};
struct ITaskSchedulerVtbl {HRESULT ( *QueryInterface)(ITaskScheduler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskScheduler *This);ULONG ( *Release)(ITaskScheduler *This);HRESULT ( *SetTargetComputer)(ITaskScheduler *This, LPCWSTR pwszComputer);HRESULT ( *GetTargetComputer)(ITaskScheduler *This, LPWSTR *ppwszComputer);HRESULT ( *Enum)(ITaskScheduler *This, IEnumWorkItems **ppEnumWorkItems);HRESULT ( *Activate)(ITaskScheduler *This, LPCWSTR pwszName,  IID * riid, IUnknown **ppUnk);HRESULT ( *Delete)(ITaskScheduler *This, LPCWSTR pwszName);HRESULT ( *NewWorkItem)(ITaskScheduler *This, LPCWSTR pwszTaskName,  CLSID * rclsid,  IID * riid, IUnknown **ppUnk);HRESULT ( *AddWorkItem)(ITaskScheduler *This, LPCWSTR pwszTaskName, IScheduledWorkItem *pWorkItem);HRESULT ( *IsOfType)(ITaskScheduler *This, LPCWSTR pwszName,  IID * riid);};
struct IWSDLOperationVtbl {HRESULT ( *QueryInterface)(IWSDLOperation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWSDLOperation *This);ULONG ( *Release)(IWSDLOperation *This);HRESULT ( *get_documentation)(IWSDLOperation *This, BSTR *bstrDocumentation);HRESULT ( *get_name)(IWSDLOperation *This, BSTR *pbstrOperationName);HRESULT ( *get_soapAction)(IWSDLOperation *This, BSTR *pbstrSoapAction);HRESULT ( *get_objectProgID)(IWSDLOperation *This, BSTR *pbstrobjectProgID);HRESULT ( *get_objectMethod)(IWSDLOperation *This, BSTR *pbstrobjectMethod);HRESULT ( *get_hasHeader)(IWSDLOperation *This, VARIANT_BOOL *pbHeader);HRESULT ( *get_style)(IWSDLOperation *This, BSTR *pbstrstyle);HRESULT ( *get_preferredEncoding)(IWSDLOperation *This, BSTR *pbstrpreferredEncoding);HRESULT ( *GetOperationParts)(IWSDLOperation *This, IEnumSoapMappers **ppIEnumSoapMappers);HRESULT ( *ExecuteOperation)(IWSDLOperation *This, ISoapReader *pISoapReader, ISoapSerializer *pISoapSerializer);HRESULT ( *Save)(IWSDLOperation *This, ISoapSerializer *pISoapSerializer, VARIANT_BOOL vbInput);HRESULT ( *SaveHeaders)(IWSDLOperation *This, ISoapSerializer *pISoapSerializer, VARIANT_BOOL vbOutput);HRESULT ( *Load)(IWSDLOperation *This, ISoapReader *pISoapReader, VARIANT_BOOL vbInput); WCHAR *( *getNameRef)(IWSDLOperation *This);};
typedef HRESULT ( *LPOPENSTREAMONFILE)(LPALLOCATEBUFFER lpAllocateBuffer, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, LPTSTR lpszFileName, LPTSTR lpszPrefix, LPSTREAM *lppStream);
struct IDialBrandingVtbl {HRESULT ( *QueryInterface)(IDialBranding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDialBranding *This);ULONG ( *Release)(IDialBranding *This);HRESULT ( *Initialize)(IDialBranding *This, LPCWSTR pwzConnectoid);HRESULT ( *GetBitmap)(IDialBranding *This, DWORD dwIndex, HBITMAP *phBitmap);};
struct IGraphBuilderVtbl {HRESULT ( *QueryInterface)(IGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGraphBuilder *This);ULONG ( *Release)(IGraphBuilder *This);HRESULT ( *AddFilter)(IGraphBuilder *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IGraphBuilder *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IGraphBuilder *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IGraphBuilder *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IGraphBuilder *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IGraphBuilder *This, IPin *ppin);HRESULT ( *Disconnect)(IGraphBuilder *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IGraphBuilder *This);HRESULT ( *Connect)(IGraphBuilder *This, IPin *ppinOut, IPin *ppinIn);HRESULT ( *Render)(IGraphBuilder *This, IPin *ppinOut);HRESULT ( *RenderFile)(IGraphBuilder *This, LPCWSTR lpcwstrFile, LPCWSTR lpcwstrPlayList);HRESULT ( *AddSourceFilter)(IGraphBuilder *This, LPCWSTR lpcwstrFileName, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *SetLogFile)(IGraphBuilder *This, HANDLE hFile);HRESULT ( *Abort)(IGraphBuilder *This);HRESULT ( *ShouldOperationContinue)(IGraphBuilder *This);};
struct ITargetFrame2Vtbl {HRESULT ( *QueryInterface)(ITargetFrame2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetFrame2 *This);ULONG ( *Release)(ITargetFrame2 *This);HRESULT ( *SetFrameName)(ITargetFrame2 *This, LPCWSTR pszFrameName);HRESULT ( *GetFrameName)(ITargetFrame2 *This, LPWSTR *ppszFrameName);HRESULT ( *GetParentFrame)(ITargetFrame2 *This, IUnknown **ppunkParent);HRESULT ( *SetFrameSrc)(ITargetFrame2 *This, LPCWSTR pszFrameSrc);HRESULT ( *GetFrameSrc)(ITargetFrame2 *This, LPWSTR *ppszFrameSrc);HRESULT ( *GetFramesContainer)(ITargetFrame2 *This, IOleContainer **ppContainer);HRESULT ( *SetFrameOptions)(ITargetFrame2 *This, DWORD dwFlags);HRESULT ( *GetFrameOptions)(ITargetFrame2 *This, DWORD *pdwFlags);HRESULT ( *SetFrameMargins)(ITargetFrame2 *This, DWORD dwWidth, DWORD dwHeight);HRESULT ( *GetFrameMargins)(ITargetFrame2 *This, DWORD *pdwWidth, DWORD *pdwHeight);HRESULT ( *FindFrame)(ITargetFrame2 *This, LPCWSTR pszTargetName, DWORD dwFlags, IUnknown **ppunkTargetFrame);HRESULT ( *GetTargetAlias)(ITargetFrame2 *This, LPCWSTR pszTargetName, LPWSTR *ppszTargetAlias);};
struct tagREBARBANDINFOW {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPWSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;};
struct IHlinkTargetVtbl {HRESULT ( *QueryInterface)(IHlinkTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkTarget *This);ULONG ( *Release)(IHlinkTarget *This);HRESULT ( *SetBrowseContext)(IHlinkTarget *This, IHlinkBrowseContext *pihlbc);HRESULT ( *GetBrowseContext)(IHlinkTarget *This, IHlinkBrowseContext **ppihlbc);HRESULT ( *Navigate)(IHlinkTarget *This, DWORD grfHLNF, LPCWSTR pwzJumpLocation);HRESULT ( *GetMoniker)(IHlinkTarget *This, LPCWSTR pwzLocation, DWORD dwAssign, IMoniker **ppimkLocation);HRESULT ( *GetFriendlyName)(IHlinkTarget *This, LPCWSTR pwzLocation, LPWSTR *ppwzFriendlyName);};
struct IOleUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoUnit *This);ULONG ( *Release)(IOleUndoUnit *This);HRESULT ( *Do)(IOleUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleUndoUnit *This);};
struct ITargetFrameVtbl {HRESULT ( *QueryInterface)(ITargetFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITargetFrame *This);ULONG ( *Release)(ITargetFrame *This);HRESULT ( *SetFrameName)(ITargetFrame *This, LPCWSTR pszFrameName);HRESULT ( *GetFrameName)(ITargetFrame *This, LPWSTR *ppszFrameName);HRESULT ( *GetParentFrame)(ITargetFrame *This, IUnknown **ppunkParent);HRESULT ( *FindFrame)(ITargetFrame *This, LPCWSTR pszTargetName, IUnknown *ppunkContextFrame, DWORD dwFlags, IUnknown **ppunkTargetFrame);HRESULT ( *SetFrameSrc)(ITargetFrame *This, LPCWSTR pszFrameSrc);HRESULT ( *GetFrameSrc)(ITargetFrame *This, LPWSTR *ppszFrameSrc);HRESULT ( *GetFramesContainer)(ITargetFrame *This, IOleContainer **ppContainer);HRESULT ( *SetFrameOptions)(ITargetFrame *This, DWORD dwFlags);HRESULT ( *GetFrameOptions)(ITargetFrame *This, DWORD *pdwFlags);HRESULT ( *SetFrameMargins)(ITargetFrame *This, DWORD dwWidth, DWORD dwHeight);HRESULT ( *GetFrameMargins)(ITargetFrame *This, DWORD *pdwWidth, DWORD *pdwHeight);HRESULT ( *RemoteNavigate)(ITargetFrame *This, ULONG cLength, ULONG *pulData);HRESULT ( *OnChildFrameActivate)(ITargetFrame *This, IUnknown *pUnkChildFrame);HRESULT ( *OnChildFrameDeactivate)(ITargetFrame *This, IUnknown *pUnkChildFrame);};
struct _SHFILEOPSTRUCTW {HWND hwnd;UINT wFunc;LPCWSTR pFrom;LPCWSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCWSTR lpszProgressTitle;};
struct tagNMTTDISPINFOW {NMHDR hdr;LPWSTR lpszText;WCHAR szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
struct IHlinkFrameVtbl {HRESULT ( *QueryInterface)(IHlinkFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkFrame *This);ULONG ( *Release)(IHlinkFrame *This);HRESULT ( *SetBrowseContext)(IHlinkFrame *This, IHlinkBrowseContext *pihlbc);HRESULT ( *GetBrowseContext)(IHlinkFrame *This, IHlinkBrowseContext **ppihlbc);HRESULT ( *Navigate)(IHlinkFrame *This, DWORD grfHLNF, LPBC pbc, IBindStatusCallback *pibsc, IHlink *pihlNavigate);HRESULT ( *OnNavigate)(IHlinkFrame *This, DWORD grfHLNF, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName, DWORD dwreserved);HRESULT ( *UpdateHlink)(IHlinkFrame *This, ULONG uHLID, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);};
struct INetCfgLockVtbl {HRESULT ( *QueryInterface)(INetCfgLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgLock *This);ULONG ( *Release)(INetCfgLock *This);HRESULT ( *AcquireWriteLock)(INetCfgLock *This, DWORD cmsTimeout, LPCWSTR pszwClientDescription, LPWSTR *ppszwClientDescription);HRESULT ( *ReleaseWriteLock)(INetCfgLock *This);HRESULT ( *IsWriteLocked)(INetCfgLock *This, LPWSTR *ppszwClientDescription);};
struct IRTCWatcherVtbl {HRESULT ( *QueryInterface)(IRTCWatcher *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCWatcher *This);ULONG ( *Release)(IRTCWatcher *This);HRESULT ( *get_PresentityURI)(IRTCWatcher *This, BSTR *pbstrPresentityURI);HRESULT ( *put_PresentityURI)(IRTCWatcher *This, BSTR bstrPresentityURI);HRESULT ( *get_Name)(IRTCWatcher *This, BSTR *pbstrName);HRESULT ( *put_Name)(IRTCWatcher *This, BSTR bstrName);HRESULT ( *get_Data)(IRTCWatcher *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCWatcher *This, BSTR bstrData);HRESULT ( *get_Persistent)(IRTCWatcher *This, VARIANT_BOOL *pfPersistent);HRESULT ( *put_Persistent)(IRTCWatcher *This, VARIANT_BOOL fPersistent);HRESULT ( *get_State)(IRTCWatcher *This, RTC_WATCHER_STATE *penState);HRESULT ( *put_State)(IRTCWatcher *This, RTC_WATCHER_STATE enState);};
struct _PPP_EAP_OUTPUT {DWORD dwSizeInBytes;PPP_EAP_ACTION Action;DWORD dwAuthResultCode;RAS_AUTH_ATTRIBUTE *pUserAttributes;BOOL fInvokeInteractiveUI;PBYTE pUIContextData;DWORD dwSizeOfUIContextData;BOOL fSaveConnectionData;PBYTE pConnectionData;DWORD dwSizeOfConnectionData;BOOL fSaveUserData;PBYTE pUserData;DWORD dwSizeOfUserData;BOOL fSetPassword;BOOL fSavePassword;PWSTR pwszPassword;};
struct IDispErrorVtbl {HRESULT ( *QueryInterface)(IDispError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispError *This);ULONG ( *Release)(IDispError *This);HRESULT ( *QueryErrorInfo)(IDispError *This, GUID guidErrorType, IDispError **ppde);HRESULT ( *GetNext)(IDispError *This, IDispError **ppde);HRESULT ( *GetHresult)(IDispError *This, HRESULT *phr);HRESULT ( *GetSource)(IDispError *This, BSTR *pbstrSource);HRESULT ( *GetHelpInfo)(IDispError *This, BSTR *pbstrFileName, DWORD *pdwContext);HRESULT ( *GetDescription)(IDispError *This, BSTR *pbstrDescription);};
struct IErrorInfoVtbl {HRESULT ( *QueryInterface)(IErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorInfo *This);ULONG ( *Release)(IErrorInfo *This);HRESULT ( *GetGUID)(IErrorInfo *This, GUID *pGUID);HRESULT ( *GetSource)(IErrorInfo *This, BSTR *pBstrSource);HRESULT ( *GetDescription)(IErrorInfo *This, BSTR *pBstrDescription);HRESULT ( *GetHelpFile)(IErrorInfo *This, BSTR *pBstrHelpFile);HRESULT ( *GetHelpContext)(IErrorInfo *This, DWORD *pdwHelpContext);};
struct IHlinkSiteVtbl {HRESULT ( *QueryInterface)(IHlinkSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkSite *This);ULONG ( *Release)(IHlinkSite *This);HRESULT ( *QueryService)(IHlinkSite *This, DWORD dwSiteData,  GUID * guidService,  IID * riid, IUnknown **ppiunk);HRESULT ( *GetMoniker)(IHlinkSite *This, DWORD dwSiteData, DWORD dwAssign, DWORD dwWhich, IMoniker **ppimk);HRESULT ( *ReadyToNavigate)(IHlinkSite *This, DWORD dwSiteData, DWORD dwReserved);HRESULT ( *OnNavigationComplete)(IHlinkSite *This, DWORD dwSiteData, DWORD dwreserved, HRESULT hrError, LPCWSTR pwzError);};
struct IJavaFileVtbl {HRESULT ( *QueryInterface)(IJavaFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaFile *This);ULONG ( *Release)(IJavaFile *This);HRESULT ( *GetName)(IJavaFile *This, DWORD dwType, BSTR *pbstrName);DWORD ( *GetFlags)(IJavaFile *This);HRESULT ( *GetFileStream)(IJavaFile *This, IStream **ppStream);HRESULT ( *GetPENativePath)(IJavaFile *This, BSTR *pbstrPath);HRESULT ( *GetPENativePathA)(IJavaFile *This, LPSTR pszPath, DWORD cbPath);HRESULT ( *GetTimestamp)(IJavaFile *This, DWORD *pdwTimestamp);};
struct IRTCBuddyVtbl {HRESULT ( *QueryInterface)(IRTCBuddy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddy *This);ULONG ( *Release)(IRTCBuddy *This);HRESULT ( *get_PresentityURI)(IRTCBuddy *This, BSTR *pbstrPresentityURI);HRESULT ( *put_PresentityURI)(IRTCBuddy *This, BSTR bstrPresentityURI);HRESULT ( *get_Name)(IRTCBuddy *This, BSTR *pbstrName);HRESULT ( *put_Name)(IRTCBuddy *This, BSTR bstrName);HRESULT ( *get_Data)(IRTCBuddy *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCBuddy *This, BSTR bstrData);HRESULT ( *get_Persistent)(IRTCBuddy *This, VARIANT_BOOL *pfPersistent);HRESULT ( *put_Persistent)(IRTCBuddy *This, VARIANT_BOOL fPersistent);HRESULT ( *get_Status)(IRTCBuddy *This, RTC_PRESENCE_STATUS *penStatus);HRESULT ( *get_Notes)(IRTCBuddy *This, BSTR *pbstrNotes);};
struct _tagBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;STGMEDIUM stgmedData;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;SECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct tagEXCEPINFO {WORD wCode;WORD wReserved;BSTR bstrSource;BSTR bstrDescription;BSTR bstrHelpFile;DWORD dwHelpContext;PVOID pvReserved;HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);SCODE scode;};
struct tagTOOLINFOW {UINT cbSize;UINT uFlags;HWND hwnd;UINT uId;RECT rect;HINSTANCE hinst;LPWSTR lpszText;LPARAM lParam;};
struct IMsgrOEVtbl {HRESULT ( *QueryInterface)(IMsgrOE *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrOE *This);ULONG ( *Release)(IMsgrOE *This);HRESULT ( *CreateUser)(IMsgrOE *This, BSTR bstrLogonName, IMsgrUserOE **ppUserOE);HRESULT ( *Logoff)(IMsgrOE *This);HRESULT ( *get_ContactList)(IMsgrOE *This, IMsgrUsersOE **ppUsersOE);HRESULT ( *get_LocalLogonName)(IMsgrOE *This, BSTR *pbstrName);HRESULT ( *put_LocalState)(IMsgrOE *This, MSTATEOE mStateOE);HRESULT ( *get_LocalState)(IMsgrOE *This, MSTATEOE *pmStateOE);HRESULT ( *AutoLogon)(IMsgrOE *This);HRESULT ( *LaunchLogonUI)(IMsgrOE *This);HRESULT ( *LaunchOptionsUI)(IMsgrOE *This);HRESULT ( *LaunchAddContactUI)(IMsgrOE *This, BSTR bstrEMail);HRESULT ( *LaunchIMUI)(IMsgrOE *This, VARIANT vUser);HRESULT ( *AdviseOE)(IMsgrOE *This, IUnknown *pUnk, int *plCookie);HRESULT ( *UnadviseOE)(IMsgrOE *This, int lCookie);};
struct INetCfgVtbl {HRESULT ( *QueryInterface)(INetCfg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfg *This);ULONG ( *Release)(INetCfg *This);HRESULT ( *Initialize)(INetCfg *This, PVOID pvReserved);HRESULT ( *Uninitialize)(INetCfg *This);HRESULT ( *Apply)(INetCfg *This);HRESULT ( *Cancel)(INetCfg *This);HRESULT ( *EnumComponents)(INetCfg *This,  GUID *pguidClass, IEnumNetCfgComponent **ppenumComponent);HRESULT ( *FindComponent)(INetCfg *This, LPCWSTR pszwInfId, INetCfgComponent **pComponent);HRESULT ( *QueryNetCfgClass)(INetCfg *This,  GUID *pguidClass,  IID * riid, void **ppvObject);};
union _CEVALUNION {short iVal;USHORT uiVal;int lVal;ULONG ulVal;FILETIME filetime;LPWSTR lpwstr;CEBLOB blob;BOOL boolVal;double dblVal;};
struct tagHH_POPUP {int cbStruct;HINSTANCE hinst;UINT idString;LPCTSTR pszText;POINT pt;COLORREF clrForeground;COLORREF clrBackground;RECT rcMargins;LPCTSTR pszFont;};
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;CRYPT_DATA_BLOB KeyId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct INetCfgPnpReconfigCallbackVtbl {HRESULT ( *QueryInterface)(INetCfgPnpReconfigCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgPnpReconfigCallback *This);ULONG ( *Release)(INetCfgPnpReconfigCallback *This);HRESULT ( *SendPnpReconfig)(INetCfgPnpReconfigCallback *This, NCPNP_RECONFIG_LAYER Layer, LPCWSTR pszwUpper, LPCWSTR pszwLower, PVOID pvData, DWORD dwSizeOfData);};
struct ISubscriptionAgentShellExtVtbl {HRESULT ( *QueryInterface)(ISubscriptionAgentShellExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionAgentShellExt *This);ULONG ( *Release)(ISubscriptionAgentShellExt *This);HRESULT ( *Initialize)(ISubscriptionAgentShellExt *This, SUBSCRIPTIONCOOKIE *pSubscriptionCookie, LPCWSTR pwszURL, LPCWSTR pwszName, SUBSCRIPTIONTYPE subsType);HRESULT ( *RemovePages)(ISubscriptionAgentShellExt *This, HWND hdlg);HRESULT ( *SaveSubscription)(ISubscriptionAgentShellExt *This);HRESULT ( *URLChange)(ISubscriptionAgentShellExt *This, LPCWSTR pwszNewURL);};
struct IInternetProtocolRootVtbl {HRESULT ( *QueryInterface)(IInternetProtocolRoot *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolRoot *This);ULONG ( *Release)(IInternetProtocolRoot *This);HRESULT ( *Start)(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT ( *Continue)(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocolRoot *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocolRoot *This);HRESULT ( *Resume)(IInternetProtocolRoot *This);};
struct IHTMLEditingServicesVtbl {HRESULT ( *QueryInterface)(IHTMLEditingServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEditingServices *This);ULONG ( *Release)(IHTMLEditingServices *This);HRESULT ( *Delete)(IHTMLEditingServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd, BOOL fAdjustPointers);HRESULT ( *Paste)(IHTMLEditingServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd, BSTR bstrText);HRESULT ( *PasteFromClipboard)(IHTMLEditingServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd, IDataObject *pDO);HRESULT ( *LaunderSpaces)(IHTMLEditingServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd);HRESULT ( *InsertSanitizedText)(IHTMLEditingServices *This, IMarkupPointer *InsertHere, OLECHAR *pstrText, LONG cChInput, BOOL fDataBinding);HRESULT ( *UrlAutoDetectCurrentWord)(IHTMLEditingServices *This, IMarkupPointer *pWord);HRESULT ( *UrlAutoDetectRange)(IHTMLEditingServices *This, IMarkupPointer *pStart, IMarkupPointer *pEnd);HRESULT ( *ShouldUpdateAnchorText)(IHTMLEditingServices *This, OLECHAR *pstrHref, OLECHAR *pstrAnchorText, BOOL *pfResult);HRESULT ( *AdjustPointerForInsert)(IHTMLEditingServices *This, IDisplayPointer *pDispWhereIThinkIAm, BOOL fFurtherInDocument, IMarkupPointer *pConstraintStart, IMarkupPointer *pConstraintEnd);HRESULT ( *FindSiteSelectableElement)(IHTMLEditingServices *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerEnd, IHTMLElement **ppIHTMLElement);HRESULT ( *IsElementSiteSelectable)(IHTMLEditingServices *This, IHTMLElement *pIHTMLElement, IHTMLElement **ppIElement);HRESULT ( *IsElementUIActivatable)(IHTMLEditingServices *This, IHTMLElement *pIHTMLElement);HRESULT ( *IsElementAtomic)(IHTMLEditingServices *This, IHTMLElement *pIHTMLElement);HRESULT ( *PositionPointersInMaster)(IHTMLEditingServices *This, IHTMLElement *pIElement, IMarkupPointer *pIStart, IMarkupPointer *pIEnd);};
struct ISubscriptionMgrPrivVtbl {HRESULT ( *QueryInterface)(ISubscriptionMgrPriv *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionMgrPriv *This);ULONG ( *Release)(ISubscriptionMgrPriv *This);HRESULT ( *CreateSubscriptionItem)(ISubscriptionMgrPriv *This,  SUBSCRIPTIONITEMINFO *pSubscriptionItemInfo, SUBSCRIPTIONCOOKIE *pNewCookie, ISubscriptionItem **ppSubscriptionItem);HRESULT ( *CloneSubscriptionItem)(ISubscriptionMgrPriv *This, ISubscriptionItem *pSubscriptionItem, SUBSCRIPTIONCOOKIE *pNewCookie, ISubscriptionItem **ppSubscriptionItem);HRESULT ( *DeleteSubscriptionItem)(ISubscriptionMgrPriv *This,  SUBSCRIPTIONCOOKIE *pCookie);HRESULT ( *RemovePages)(ISubscriptionMgrPriv *This, HWND hdlg);HRESULT ( *SaveSubscription)(ISubscriptionMgrPriv *This);HRESULT ( *URLChange)(ISubscriptionMgrPriv *This, LPCWSTR pwszNewURL);};
struct IAMVideoCompressionVtbl {HRESULT ( *QueryInterface)(IAMVideoCompression *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVideoCompression *This);ULONG ( *Release)(IAMVideoCompression *This);HRESULT ( *put_KeyFrameRate)(IAMVideoCompression *This, int KeyFrameRate);HRESULT ( *get_KeyFrameRate)(IAMVideoCompression *This, int *pKeyFrameRate);HRESULT ( *put_PFramesPerKeyFrame)(IAMVideoCompression *This, int PFramesPerKeyFrame);HRESULT ( *get_PFramesPerKeyFrame)(IAMVideoCompression *This, int *pPFramesPerKeyFrame);HRESULT ( *put_Quality)(IAMVideoCompression *This, double Quality);HRESULT ( *get_Quality)(IAMVideoCompression *This, double *pQuality);HRESULT ( *put_WindowSize)(IAMVideoCompression *This, DWORDLONG WindowSize);HRESULT ( *get_WindowSize)(IAMVideoCompression *This, DWORDLONG *pWindowSize);HRESULT ( *GetInfo)(IAMVideoCompression *This, WCHAR *pszVersion, int *pcbVersion, LPWSTR pszDescription, int *pcbDescription, int *pDefaultKeyFrameRate, int *pDefaultPFramesPerKey, double *pDefaultQuality, int *pCapabilities);HRESULT ( *OverrideKeyFrame)(IAMVideoCompression *This, int FrameNumber);HRESULT ( *OverrideFrameSize)(IAMVideoCompression *This, int FrameNumber, int Size);};
struct IDBBinderPropertiesVtbl {HRESULT ( *QueryInterface)(IDBBinderProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBBinderProperties *This);ULONG ( *Release)(IDBBinderProperties *This);HRESULT ( *GetProperties)(IDBBinderProperties *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *GetPropertyInfo)(IDBBinderProperties *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertyInfoSets, DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer);HRESULT ( *SetProperties)(IDBBinderProperties *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);HRESULT ( *Reset)(IDBBinderProperties *This);};
struct IDockingWindowFrameVtbl {HRESULT ( *QueryInterface)(IDockingWindowFrame *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDockingWindowFrame *This);ULONG ( *Release)(IDockingWindowFrame *This);HRESULT ( *GetWindow)(IDockingWindowFrame *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowFrame *This, BOOL fEnterMode);HRESULT ( *AddToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, LPCWSTR pwszItem, DWORD dwAddFlags);HRESULT ( *RemoveToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, DWORD dwRemoveFlags);HRESULT ( *FindToolbar)(IDockingWindowFrame *This, LPCWSTR pwszItem,  IID * riid, void **ppv);};
struct IEnumPrivacyRecordsVtbl {HRESULT ( *QueryInterface)(IEnumPrivacyRecords *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPrivacyRecords *This);ULONG ( *Release)(IEnumPrivacyRecords *This);HRESULT ( *Reset)(IEnumPrivacyRecords *This);HRESULT ( *GetSize)(IEnumPrivacyRecords *This, ULONG *pSize);HRESULT ( *GetPrivacyImpacted)(IEnumPrivacyRecords *This, BOOL *pState);HRESULT ( *Next)(IEnumPrivacyRecords *This, BSTR *pbstrUrl, BSTR *pbstrPolicyRef, LONG *pdwReserved, DWORD *pdwPrivacyFlags);};
struct IHlinkBrowseContextVtbl {HRESULT ( *QueryInterface)(IHlinkBrowseContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkBrowseContext *This);ULONG ( *Release)(IHlinkBrowseContext *This);HRESULT ( *Register)(IHlinkBrowseContext *This, DWORD reserved, IUnknown *piunk, IMoniker *pimk, DWORD *pdwRegister);HRESULT ( *GetObjectA)(IHlinkBrowseContext *This, IMoniker *pimk, BOOL fBindIfRootRegistered, IUnknown **ppiunk);HRESULT ( *Revoke)(IHlinkBrowseContext *This, DWORD dwRegister);HRESULT ( *SetBrowseWindowInfo)(IHlinkBrowseContext *This, HLBWINFO *phlbwi);HRESULT ( *GetBrowseWindowInfo)(IHlinkBrowseContext *This, HLBWINFO *phlbwi);HRESULT ( *SetInitialHlink)(IHlinkBrowseContext *This, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);HRESULT ( *OnNavigateHlink)(IHlinkBrowseContext *This, DWORD grfHLNF, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName, ULONG *puHLID);HRESULT ( *UpdateHlink)(IHlinkBrowseContext *This, ULONG uHLID, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);HRESULT ( *EnumNavigationStack)(IHlinkBrowseContext *This, DWORD dwReserved, DWORD grfHLFNAMEF, IEnumHLITEM **ppienumhlitem);HRESULT ( *QueryHlink)(IHlinkBrowseContext *This, DWORD grfHLQF, ULONG uHLID);HRESULT ( *GetHlink)(IHlinkBrowseContext *This, ULONG uHLID, IHlink **ppihl);HRESULT ( *SetCurrentHlink)(IHlinkBrowseContext *This, ULONG uHLID);HRESULT ( *Clone)(IHlinkBrowseContext *This, IUnknown *piunkOuter,  IID * riid, IUnknown **ppiunkObj);HRESULT ( *Close)(IHlinkBrowseContext *This, DWORD reserved);};
struct IActiveScriptErrorVtbl {HRESULT ( *QueryInterface)(IActiveScriptError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptError *This);ULONG ( *Release)(IActiveScriptError *This);HRESULT ( *GetExceptionInfo)(IActiveScriptError *This, EXCEPINFO *pexcepinfo);HRESULT ( *GetSourcePosition)(IActiveScriptError *This, DWORD *pdwSourceContext, ULONG *pulLineNumber, LONG *plCharacterPosition);HRESULT ( *GetSourceLineText)(IActiveScriptError *This, BSTR *pbstrSourceLine);};
struct IDBDataSourceAdminVtbl {HRESULT ( *QueryInterface)(IDBDataSourceAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBDataSourceAdmin *This);ULONG ( *Release)(IDBDataSourceAdmin *This);HRESULT ( *CreateDataSource)(IDBDataSourceAdmin *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppDBSession);HRESULT ( *DestroyDataSource)(IDBDataSourceAdmin *This);HRESULT ( *GetCreationProperties)(IDBDataSourceAdmin *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertyInfoSets, DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer);HRESULT ( *ModifyDataSource)(IDBDataSourceAdmin *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);};
struct IDockingWindowSiteVtbl {HRESULT ( *QueryInterface)(IDockingWindowSite *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IDockingWindowSite *This);ULONG ( *Release)(IDockingWindowSite *This);HRESULT ( *GetWindow)(IDockingWindowSite *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowSite *This, BOOL fEnterMode);HRESULT ( *GetBorderDW)(IDockingWindowSite *This, IUnknown *punkObj, LPRECT prcBorder);HRESULT ( *RequestBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);HRESULT ( *SetBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);};
struct IFullScreenVideoExVtbl {HRESULT ( *QueryInterface)(IFullScreenVideoEx *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFullScreenVideoEx *This);ULONG ( *Release)(IFullScreenVideoEx *This);HRESULT ( *CountModes)(IFullScreenVideoEx *This, int *pModes);HRESULT ( *GetModeInfo)(IFullScreenVideoEx *This, int Mode, int *pWidth, int *pHeight, int *pDepth);HRESULT ( *GetCurrentMode)(IFullScreenVideoEx *This, int *pMode);HRESULT ( *IsModeAvailable)(IFullScreenVideoEx *This, int Mode);HRESULT ( *IsModeEnabled)(IFullScreenVideoEx *This, int Mode);HRESULT ( *SetEnabled)(IFullScreenVideoEx *This, int Mode, int bEnabled);HRESULT ( *GetClipFactor)(IFullScreenVideoEx *This, int *pClipFactor);HRESULT ( *SetClipFactor)(IFullScreenVideoEx *This, int ClipFactor);HRESULT ( *SetMessageDrain)(IFullScreenVideoEx *This, HWND hwnd);HRESULT ( *GetMessageDrain)(IFullScreenVideoEx *This, HWND *hwnd);HRESULT ( *SetMonitor)(IFullScreenVideoEx *This, int Monitor);HRESULT ( *GetMonitor)(IFullScreenVideoEx *This, int *Monitor);HRESULT ( *HideOnDeactivate)(IFullScreenVideoEx *This, int Hide);HRESULT ( *IsHideOnDeactivate)(IFullScreenVideoEx *This);HRESULT ( *SetCaption)(IFullScreenVideoEx *This, BSTR strCaption);HRESULT ( *GetCaption)(IFullScreenVideoEx *This, BSTR *pstrCaption);HRESULT ( *SetDefault)(IFullScreenVideoEx *This);HRESULT ( *SetAcceleratorTable)(IFullScreenVideoEx *This, HWND hwnd, HACCEL hAccel);HRESULT ( *GetAcceleratorTable)(IFullScreenVideoEx *This, HWND *phwnd, HACCEL *phAccel);HRESULT ( *KeepPixelAspectRatio)(IFullScreenVideoEx *This, int KeepAspect);HRESULT ( *IsKeepPixelAspectRatio)(IFullScreenVideoEx *This, int *pKeepAspect);};
struct IDXSurfaceFactoryVtbl {HRESULT ( *QueryInterface)(IDXSurfaceFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXSurfaceFactory *This);ULONG ( *Release)(IDXSurfaceFactory *This);HRESULT ( *CreateSurface)(IDXSurfaceFactory *This, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pFormatID,  DXBNDS *pBounds, DWORD dwFlags, IUnknown *punkOuter,  IID * riid, void **ppDXSurface);HRESULT ( *CreateFromDDSurface)(IDXSurfaceFactory *This, IUnknown *pDDrawSurface,  GUID *pFormatID, DWORD dwFlags, IUnknown *punkOuter,  IID * riid, void **ppDXSurface);HRESULT ( *LoadImageA)(IDXSurfaceFactory *This,  LPWSTR pszFileName, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pFormatID,  IID * riid, void **ppDXSurface);HRESULT ( *LoadImageFromStream)(IDXSurfaceFactory *This, IStream *pStream, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pFormatID,  IID * riid, void **ppDXSurface);HRESULT ( *CopySurfaceToNewFormat)(IDXSurfaceFactory *This, IDXSurface *pSrc, IUnknown *pDirectDraw,  DDSURFACEDESC *pDDSurfaceDesc,  GUID *pDestFormatID, IDXSurface **ppNewSurface);HRESULT ( *CreateD3DRMTexture)(IDXSurfaceFactory *This, IDXSurface *pSrc, IUnknown *pDirectDraw, IUnknown *pD3DRM3,  IID * riid, void **ppTexture3);HRESULT ( *BitBlt)(IDXSurfaceFactory *This, IDXSurface *pDest,  DXVEC *pPlacement, IDXSurface *pSrc,  DXBNDS *pClipBounds, DWORD dwFlags);};
struct ISubscriptionItemVtbl {HRESULT ( *QueryInterface)(ISubscriptionItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionItem *This);ULONG ( *Release)(ISubscriptionItem *This);HRESULT ( *GetCookie)(ISubscriptionItem *This, SUBSCRIPTIONCOOKIE *pCookie);HRESULT ( *GetSubscriptionItemInfo)(ISubscriptionItem *This, SUBSCRIPTIONITEMINFO *pSubscriptionItemInfo);HRESULT ( *SetSubscriptionItemInfo)(ISubscriptionItem *This,  SUBSCRIPTIONITEMINFO *pSubscriptionItemInfo);HRESULT ( *ReadProperties)(ISubscriptionItem *This, ULONG nCount, LPCWSTR  *    rgwszName, VARIANT rgValue[]);HRESULT ( *WriteProperties)(ISubscriptionItem *This, ULONG nCount, LPCWSTR  *    rgwszName,  VARIANT rgValue[]);HRESULT ( *EnumProperties)(ISubscriptionItem *This, IEnumItemProperties **ppEnumItemProperties);HRESULT ( *NotifyChanged)(ISubscriptionItem *This);};
struct IReferenceClock2Vtbl {HRESULT ( *QueryInterface)(IReferenceClock2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReferenceClock2 *This);ULONG ( *Release)(IReferenceClock2 *This);HRESULT ( *GetTime)(IReferenceClock2 *This, REFERENCE_TIME *pTime);HRESULT ( *AdviseTime)(IReferenceClock2 *This, REFERENCE_TIME baseTime, REFERENCE_TIME streamTime, HEVENT hEvent, DWORD_PTR *pdwAdviseCookie);HRESULT ( *AdvisePeriodic)(IReferenceClock2 *This, REFERENCE_TIME startTime, REFERENCE_TIME periodTime, HSEMAPHORE hSemaphore, DWORD_PTR *pdwAdviseCookie);HRESULT ( *Unadvise)(IReferenceClock2 *This, DWORD_PTR dwAdviseCookie);};
struct ISyncMgrRegisterVtbl {HRESULT ( *QueryInterface)(ISyncMgrRegister *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncMgrRegister *This);ULONG ( *Release)(ISyncMgrRegister *This);HRESULT ( *RegisterSyncMgrHandler)(ISyncMgrRegister *This,  CLSID * rclsidHandler, LPCWSTR pwszDescription, DWORD dwSyncMgrRegisterFlags);HRESULT ( *UnregisterSyncMgrHandler)(ISyncMgrRegister *This,  CLSID * rclsidHandler, DWORD dwReserved);HRESULT ( *GetHandlerRegistrationInfo)(ISyncMgrRegister *This,  CLSID * rclsidHandler, LPDWORD pdwSyncMgrRegisterFlags);};
struct ISyncScheduleMgrVtbl {HRESULT ( *QueryInterface)(ISyncScheduleMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncScheduleMgr *This);ULONG ( *Release)(ISyncScheduleMgr *This);HRESULT ( *CreateSchedule)(ISyncScheduleMgr *This, LPCWSTR pwszScheduleName, DWORD dwFlags, SYNCSCHEDULECOOKIE *pSyncSchedCookie, ISyncSchedule **ppSyncSchedule);HRESULT ( *LaunchScheduleWizard)(ISyncScheduleMgr *This, HWND hParent, DWORD dwFlags, SYNCSCHEDULECOOKIE *pSyncSchedCookie, ISyncSchedule **ppSyncSchedule);HRESULT ( *OpenSchedule)(ISyncScheduleMgr *This, SYNCSCHEDULECOOKIE *pSyncSchedCookie, DWORD dwFlags, ISyncSchedule **ppSyncSchedule);HRESULT ( *RemoveSchedule)(ISyncScheduleMgr *This, SYNCSCHEDULECOOKIE *pSyncSchedCookie);HRESULT ( *EnumSyncSchedules)(ISyncScheduleMgr *This, IEnumSyncSchedules **ppEnumSyncSchedules);};
struct ITIMEMediaPlayerVtbl {HRESULT ( *QueryInterface)(ITIMEMediaPlayer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEMediaPlayer *This);ULONG ( *Release)(ITIMEMediaPlayer *This);HRESULT ( *Init)(ITIMEMediaPlayer *This, ITIMEMediaPlayerSite *mpsite);HRESULT ( *Detach)(ITIMEMediaPlayer *This);HRESULT ( *begin)(ITIMEMediaPlayer *This);HRESULT ( *end)(ITIMEMediaPlayer *This);HRESULT ( *resume)(ITIMEMediaPlayer *This);HRESULT ( *pause)(ITIMEMediaPlayer *This);HRESULT ( *repeat)(ITIMEMediaPlayer *This);HRESULT ( *reset)(ITIMEMediaPlayer *This);HRESULT ( *seek)(ITIMEMediaPlayer *This, double time);HRESULT ( *put_src)(ITIMEMediaPlayer *This, BSTR url);HRESULT ( *put_clipBegin)(ITIMEMediaPlayer *This, VARIANT b);HRESULT ( *put_clipEnd)(ITIMEMediaPlayer *This, VARIANT e);HRESULT ( *get_abstract)(ITIMEMediaPlayer *This, BSTR *abs);HRESULT ( *get_author)(ITIMEMediaPlayer *This, BSTR *auth);HRESULT ( *get_canPause)(ITIMEMediaPlayer *This, VARIANT_BOOL *b);HRESULT ( *get_canSeek)(ITIMEMediaPlayer *This, VARIANT_BOOL *b);HRESULT ( *get_clipDur)(ITIMEMediaPlayer *This, double *dur);HRESULT ( *get_copyright)(ITIMEMediaPlayer *This, BSTR *cpyrght);HRESULT ( *get_currTime)(ITIMEMediaPlayer *This, double *time);HRESULT ( *get_customObject)(ITIMEMediaPlayer *This, IDispatch **disp);HRESULT ( *get_hasAudio)(ITIMEMediaPlayer *This, VARIANT_BOOL *b);HRESULT ( *get_hasVisual)(ITIMEMediaPlayer *This, VARIANT_BOOL *b);HRESULT ( *get_mediaDur)(ITIMEMediaPlayer *This, double *dur);HRESULT ( *get_mediaHeight)(ITIMEMediaPlayer *This, int *height);HRESULT ( *get_mediaWidth)(ITIMEMediaPlayer *This, int *width);HRESULT ( *get_playList)(ITIMEMediaPlayer *This, ITIMEPlayList **pPlayList);HRESULT ( *get_rating)(ITIMEMediaPlayer *This, BSTR *rate);HRESULT ( *get_state)(ITIMEMediaPlayer *This, TimeState *ts);HRESULT ( *get_title)(ITIMEMediaPlayer *This, BSTR *name);};
typedef INT ( *LPWSPADDRESSTOSTRING)(LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPWSTR lpszAddressString, LPDWORD lpdwAddressStringLength, LPINT lpErrno);
struct _tagSubscriptionInfo {DWORD cbSize;DWORD fUpdateFlags;SUBSCRIPTIONSCHEDULE schedule;CLSID customGroupCookie;LPVOID pTrigger;DWORD dwRecurseLevels;DWORD fWebcrawlerFlags;BOOL bMailNotification;BOOL bGleam;BOOL bChangesOnly;BOOL bNeedPassword;DWORD fChannelFlags;BSTR bstrUserName;BSTR bstrPassword;BSTR bstrFriendlyName;DWORD dwMaxSizeKB;SUBSCRIPTIONTYPE subType;DWORD fTaskFlags;DWORD dwReserved;};
struct IPersistFolder3Vtbl {HRESULT ( *QueryInterface)(IPersistFolder3 *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IPersistFolder3 *This);ULONG ( *Release)(IPersistFolder3 *This);HRESULT ( *GetClassID)(IPersistFolder3 *This, LPCLSID lpClassID);HRESULT ( *Initialize)(IPersistFolder3 *This, LPCITEMIDLIST pidl);HRESULT ( *GetCurFolder)(IPersistFolder3 *This, LPITEMIDLIST *ppidl);HRESULT ( *InitializeEx)(IPersistFolder3 *This, IBindCtx *pbc, LPCITEMIDLIST pidlRoot,  PERSIST_FOLDER_TARGET_INFO *ppfti);HRESULT ( *GetFolderTargetInfo)(IPersistFolder3 *This, PERSIST_FOLDER_TARGET_INFO *ppfti);};
struct IReferenceClockVtbl {HRESULT ( *QueryInterface)(IReferenceClock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReferenceClock *This);ULONG ( *Release)(IReferenceClock *This);HRESULT ( *GetTime)(IReferenceClock *This, REFERENCE_TIME *pTime);HRESULT ( *AdviseTime)(IReferenceClock *This, REFERENCE_TIME baseTime, REFERENCE_TIME streamTime, HEVENT hEvent, DWORD_PTR *pdwAdviseCookie);HRESULT ( *AdvisePeriodic)(IReferenceClock *This, REFERENCE_TIME startTime, REFERENCE_TIME periodTime, HSEMAPHORE hSemaphore, DWORD_PTR *pdwAdviseCookie);HRESULT ( *Unadvise)(IReferenceClock *This, DWORD_PTR dwAdviseCookie);};
struct _SHNOTIFICATIONDATA {DWORD cbStruct;DWORD dwID;SHNP npPriority;DWORD csDuration;HICON hicon;DWORD grfFlags;CLSID clsid;HWND hwndSink;LPCTSTR pszHTML;LPCTSTR pszTitle;LPARAM lParam;};
struct IDBPropertiesVtbl {HRESULT ( *QueryInterface)(IDBProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBProperties *This);ULONG ( *Release)(IDBProperties *This);HRESULT ( *GetProperties)(IDBProperties *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *GetPropertyInfo)(IDBProperties *This, ULONG cPropertyIDSets, DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertyInfoSets, DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer);HRESULT ( *SetProperties)(IDBProperties *This, ULONG cPropertySets,DBPROPSET  *    rgPropertySets);};
struct IExtractIconWVtbl {HRESULT ( *QueryInterface)(IExtractIconW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractIconW *This);ULONG ( *Release)(IExtractIconW *This);HRESULT ( *GetIconLocation)(IExtractIconW *This, UINT uFlags, LPWSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconW *This, LPCWSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct IExtractImageVtbl {HRESULT ( *QueryInterface)(IExtractImage *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractImage *This);ULONG ( *Release)(IExtractImage *This);HRESULT ( *GetLocation)(IExtractImage *This, LPWSTR pszPathBuffer, DWORD cch, DWORD *pdwPriority,  SIZE *prgSize, DWORD dwRecClrDepth, DWORD *pdwFlags);HRESULT ( *Extract)(IExtractImage *This, HBITMAP *phBmpThumbnail);};
struct IFilterMapperVtbl {HRESULT ( *QueryInterface)(IFilterMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterMapper *This);ULONG ( *Release)(IFilterMapper *This);HRESULT ( *RegisterFilter)(IFilterMapper *This, CLSID clsid, LPCWSTR Name, DWORD dwMerit);HRESULT ( *RegisterFilterInstance)(IFilterMapper *This, CLSID clsid, LPCWSTR Name, CLSID *MRId);HRESULT ( *RegisterPin)(IFilterMapper *This, CLSID Filter, LPCWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, CLSID ConnectsToFilter, LPCWSTR ConnectsToPin);HRESULT ( *RegisterPinType)(IFilterMapper *This, CLSID clsFilter, LPCWSTR strName, CLSID clsMajorType, CLSID clsSubType);HRESULT ( *UnregisterFilter)(IFilterMapper *This, CLSID Filter);HRESULT ( *UnregisterFilterInstance)(IFilterMapper *This, CLSID MRId);HRESULT ( *UnregisterPin)(IFilterMapper *This, CLSID Filter, LPCWSTR Name);HRESULT ( *EnumMatchingFilters)(IFilterMapper *This, IEnumRegFilters **ppEnum, DWORD dwMerit, BOOL bInputNeeded, CLSID clsInMaj, CLSID clsInSub, BOOL bRender, BOOL bOututNeeded, CLSID clsOutMaj, CLSID clsOutSub);};
struct ICodeInstallVtbl {HRESULT ( *QueryInterface)(ICodeInstall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICodeInstall *This);ULONG ( *Release)(ICodeInstall *This);HRESULT ( *GetWindow)(ICodeInstall *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnCodeInstallProblem)(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);};
struct IColumnsInfoVtbl {HRESULT ( *QueryInterface)(IColumnsInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnsInfo *This);ULONG ( *Release)(IColumnsInfo *This);HRESULT ( *GetColumnInfo)(IColumnsInfo *This, DBORDINAL *pcColumns, DBCOLUMNINFO **prgInfo, OLECHAR **ppStringsBuffer);HRESULT ( *MapColumnIDs)(IColumnsInfo *This, DBORDINAL cColumnIDs, DBID  *    rgColumnIDs, DBORDINAL rgColumns[]);};
struct IErrorLookupVtbl {HRESULT ( *QueryInterface)(IErrorLookup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorLookup *This);ULONG ( *Release)(IErrorLookup *This);HRESULT ( *GetErrorDescription)(IErrorLookup *This, HRESULT hrError, DWORD dwLookupID, DISPPARAMS *pdispparams, LCID lcid, BSTR *pbstrSource, BSTR *pbstrDescription);HRESULT ( *GetHelpInfo)(IErrorLookup *This, HRESULT hrError, DWORD dwLookupID, LCID lcid, BSTR *pbstrHelpFile, DWORD *pdwHelpContext);HRESULT ( *ReleaseErrors)(IErrorLookup *This,  DWORD dwDynamicErrorID);};
struct IFileViewerWVtbl {HRESULT ( *QueryInterface)(IFileViewerW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IFileViewerW *This);ULONG ( *Release)(IFileViewerW *This);HRESULT ( *ShowInitialize)(IFileViewerW *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerW *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerW *This, LPWSTR pszDriver, BOOL fSuppressUI);};
struct IPropertyMapVtbl {HRESULT ( *QueryInterface)(IPropertyMap *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyMap *This);ULONG ( *Release)(IPropertyMap *This);HRESULT ( *Write)(IPropertyMap *This, LPCWSTR pstrName, VARIANT variantValue, DWORD dwFlags);HRESULT ( *Read)(IPropertyMap *This, LPCWSTR pstrName, VARIANT *pVariantValue);HRESULT ( *GetCount)(IPropertyMap *This, ULONG *pCount);HRESULT ( *GetEnumMAP)(IPropertyMap *This, LPENUMPROPERTYMAP *ppEnumMap);};
struct IRTCProfile2Vtbl {HRESULT ( *QueryInterface)(IRTCProfile2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCProfile2 *This);ULONG ( *Release)(IRTCProfile2 *This);HRESULT ( *get_Key)(IRTCProfile2 *This, BSTR *pbstrKey);HRESULT ( *get_Name)(IRTCProfile2 *This, BSTR *pbstrName);HRESULT ( *get_XML)(IRTCProfile2 *This, BSTR *pbstrXML);HRESULT ( *get_ProviderName)(IRTCProfile2 *This, BSTR *pbstrName);HRESULT ( *get_ProviderURI)(IRTCProfile2 *This, RTC_PROVIDER_URI enURI, BSTR *pbstrURI);HRESULT ( *get_ProviderData)(IRTCProfile2 *This, BSTR *pbstrData);HRESULT ( *get_ClientName)(IRTCProfile2 *This, BSTR *pbstrName);HRESULT ( *get_ClientBanner)(IRTCProfile2 *This, VARIANT_BOOL *pfBanner);HRESULT ( *get_ClientMinVer)(IRTCProfile2 *This, BSTR *pbstrMinVer);HRESULT ( *get_ClientCurVer)(IRTCProfile2 *This, BSTR *pbstrCurVer);HRESULT ( *get_ClientUpdateURI)(IRTCProfile2 *This, BSTR *pbstrUpdateURI);HRESULT ( *get_ClientData)(IRTCProfile2 *This, BSTR *pbstrData);HRESULT ( *get_UserURI)(IRTCProfile2 *This, BSTR *pbstrUserURI);HRESULT ( *get_UserName)(IRTCProfile2 *This, BSTR *pbstrUserName);HRESULT ( *get_UserAccount)(IRTCProfile2 *This, BSTR *pbstrUserAccount);HRESULT ( *SetCredentials)(IRTCProfile2 *This, BSTR bstrUserURI, BSTR bstrUserAccount, BSTR bstrPassword);HRESULT ( *get_SessionCapabilities)(IRTCProfile2 *This, int *plSupportedSessions);HRESULT ( *get_State)(IRTCProfile2 *This, RTC_REGISTRATION_STATE *penState);HRESULT ( *get_Realm)(IRTCProfile2 *This, BSTR *pbstrRealm);HRESULT ( *put_Realm)(IRTCProfile2 *This, BSTR bstrRealm);HRESULT ( *get_AllowedAuth)(IRTCProfile2 *This, int *plAllowedAuth);HRESULT ( *put_AllowedAuth)(IRTCProfile2 *This, int lAllowedAuth);};
struct IRTCWatcher2Vtbl {HRESULT ( *QueryInterface)(IRTCWatcher2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCWatcher2 *This);ULONG ( *Release)(IRTCWatcher2 *This);HRESULT ( *get_PresentityURI)(IRTCWatcher2 *This, BSTR *pbstrPresentityURI);HRESULT ( *put_PresentityURI)(IRTCWatcher2 *This, BSTR bstrPresentityURI);HRESULT ( *get_Name)(IRTCWatcher2 *This, BSTR *pbstrName);HRESULT ( *put_Name)(IRTCWatcher2 *This, BSTR bstrName);HRESULT ( *get_Data)(IRTCWatcher2 *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCWatcher2 *This, BSTR bstrData);HRESULT ( *get_Persistent)(IRTCWatcher2 *This, VARIANT_BOOL *pfPersistent);HRESULT ( *put_Persistent)(IRTCWatcher2 *This, VARIANT_BOOL fPersistent);HRESULT ( *get_State)(IRTCWatcher2 *This, RTC_WATCHER_STATE *penState);HRESULT ( *put_State)(IRTCWatcher2 *This, RTC_WATCHER_STATE enState);HRESULT ( *get_Profile)(IRTCWatcher2 *This, IRTCProfile2 **ppProfile);HRESULT ( *get_Scope)(IRTCWatcher2 *This, RTC_ACE_SCOPE *penScope);};
struct tagCREATESTRUCTW {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCWSTR lpszName;LPCWSTR lpszClass;DWORD dwExStyle;};
struct IDSPlayerExVtbl {HRESULT ( *QueryInterface)(IDSPlayerEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDSPlayerEx *This);ULONG ( *Release)(IDSPlayerEx *This);HRESULT ( *PutStatusTextEx)(IDSPlayerEx *This, BSTR wszText, BOOL fOverwrite, DWORD *pdwCookie);HRESULT ( *FlushStatusBar)(IDSPlayerEx *This);HRESULT ( *NavigateBrowserToURL)(IDSPlayerEx *This, BSTR bstrURL, BSTR bstrFrame);HRESULT ( *RestartPlaylist)(IDSPlayerEx *This, BOOL fPlay);HRESULT ( *PutPreviewModeHelper)(IDSPlayerEx *This, VARIANT_BOOL PreviewMode, BOOL fPlayWhenFinished);HRESULT ( *put_UserInteraction)(IDSPlayerEx *This, VARIANT_BOOL bVal);HRESULT ( *get_CurrentPositionInternal)(IDSPlayerEx *This, double *pCurrentPosition);HRESULT ( *put_CompatibilityMode)(IDSPlayerEx *This, int lCompatibilityMode);HRESULT ( *get_CompatibilityMode)(IDSPlayerEx *This, int *plCompatibilityMode);HRESULT ( *get_DurationInternal)(IDSPlayerEx *This, double *pDuration);HRESULT ( *get_SegmentSeek)(IDSPlayerEx *This, int *plSegmentSeek);HRESULT ( *get_CanSkip)(IDSPlayerEx *This, VARIANT_BOOL *pbCanSkip);HRESULT ( *get_BrowserIsIE4)(IDSPlayerEx *This, VARIANT_BOOL *pbCanSkip);HRESULT ( *GoFullScreen)(IDSPlayerEx *This, BOOL bFullScreen);};
struct IDialEngineVtbl {HRESULT ( *QueryInterface)(IDialEngine *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDialEngine *This);ULONG ( *Release)(IDialEngine *This);HRESULT ( *Initialize)(IDialEngine *This, LPCWSTR pwzConnectoid, IDialEventSink *pIDES);HRESULT ( *GetProperty)(IDialEngine *This, LPCWSTR pwzProperty, LPWSTR pwzValue, DWORD dwBufSize);HRESULT ( *SetProperty)(IDialEngine *This, LPCWSTR pwzProperty, LPCWSTR pwzValue);HRESULT ( *Dial)(IDialEngine *This);HRESULT ( *HangUp)(IDialEngine *This);HRESULT ( *GetConnectedState)(IDialEngine *This, DWORD *pdwState);HRESULT ( *GetConnectHandle)(IDialEngine *This, DWORD_PTR *pdwHandle);};
struct IRTCProfileVtbl {HRESULT ( *QueryInterface)(IRTCProfile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCProfile *This);ULONG ( *Release)(IRTCProfile *This);HRESULT ( *get_Key)(IRTCProfile *This, BSTR *pbstrKey);HRESULT ( *get_Name)(IRTCProfile *This, BSTR *pbstrName);HRESULT ( *get_XML)(IRTCProfile *This, BSTR *pbstrXML);HRESULT ( *get_ProviderName)(IRTCProfile *This, BSTR *pbstrName);HRESULT ( *get_ProviderURI)(IRTCProfile *This, RTC_PROVIDER_URI enURI, BSTR *pbstrURI);HRESULT ( *get_ProviderData)(IRTCProfile *This, BSTR *pbstrData);HRESULT ( *get_ClientName)(IRTCProfile *This, BSTR *pbstrName);HRESULT ( *get_ClientBanner)(IRTCProfile *This, VARIANT_BOOL *pfBanner);HRESULT ( *get_ClientMinVer)(IRTCProfile *This, BSTR *pbstrMinVer);HRESULT ( *get_ClientCurVer)(IRTCProfile *This, BSTR *pbstrCurVer);HRESULT ( *get_ClientUpdateURI)(IRTCProfile *This, BSTR *pbstrUpdateURI);HRESULT ( *get_ClientData)(IRTCProfile *This, BSTR *pbstrData);HRESULT ( *get_UserURI)(IRTCProfile *This, BSTR *pbstrUserURI);HRESULT ( *get_UserName)(IRTCProfile *This, BSTR *pbstrUserName);HRESULT ( *get_UserAccount)(IRTCProfile *This, BSTR *pbstrUserAccount);HRESULT ( *SetCredentials)(IRTCProfile *This, BSTR bstrUserURI, BSTR bstrUserAccount, BSTR bstrPassword);HRESULT ( *get_SessionCapabilities)(IRTCProfile *This, int *plSupportedSessions);HRESULT ( *get_State)(IRTCProfile *This, RTC_REGISTRATION_STATE *penState);};
struct ICopyHookWVtbl {HRESULT ( *QueryInterface)(ICopyHookW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(ICopyHookW *This);ULONG ( *Release)(ICopyHookW *This);UINT ( *CopyCallback)(ICopyHookW *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCWSTR pszSrcFile, DWORD dwSrcAttribs, LPCWSTR pszDestFile, DWORD dwDestAttribs);};
struct _WABEXTDISPLAY {ULONG cbSize;LPWABOBJECT lpWABObject;LPADRBOOK lpAdrBook;LPMAPIPROP lpPropObj;BOOL fReadOnly;BOOL fDataChanged;ULONG ulFlags;LPVOID lpv;LPTSTR lpsz;};
struct tagCHOOSECOLOR {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCTSTR lpTemplateName;};
struct _WSAQuerySetW {DWORD dwSize;LPWSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPWSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPWSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPWSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct tagHH_WINTYPE {int cbStruct;BOOL fUniCodeStrings;LPCTSTR pszType;DWORD fsValidMembers;DWORD fsWinProperties;LPCTSTR pszCaption;DWORD dwStyles;DWORD dwExStyles;RECT rcWindowPos;int nShowState;HWND hwndHelp;HWND hwndCaller;HH_INFOTYPE *paInfoTypes;HWND hwndToolBar;HWND hwndNavigation;HWND hwndHTML;int iNavWidth;RECT rcHTML;LPCTSTR pszToc;LPCTSTR pszIndex;LPCTSTR pszFile;LPCTSTR pszHome;DWORD fsToolBarFlags;BOOL fNotExpanded;int curNavType;int tabpos;int idNotify;BYTE tabOrder[20];int cHistory;LPCTSTR pszJump1;LPCTSTR pszJump2;LPCTSTR pszUrlJump1;LPCTSTR pszUrlJump2;RECT rcMinSize;int cbInfoTypes;};
struct tagMETHODDATA {OLECHAR *szName;PARAMDATA *ppdata;DISPID dispid;UINT iMeth;CALLCONV cc;UINT cArgs;WORD wFlags;VARTYPE vtReturn;};
struct tagWNDCLASSW {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;};
struct _browseinfo {HWND hwndOwner;LPCITEMIDLIST pidlRoot;LPTSTR pszDisplayName;LPCTSTR lpszTitle;UINT ulFlags;BFFCALLBACK lpfn;LPARAM lParam;int iImage;};
struct IHlinkVtbl {HRESULT ( *QueryInterface)(IHlink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlink *This);ULONG ( *Release)(IHlink *This);HRESULT ( *SetHlinkSite)(IHlink *This, IHlinkSite *pihlSite, DWORD dwSiteData);HRESULT ( *GetHlinkSite)(IHlink *This, IHlinkSite **ppihlSite, DWORD *pdwSiteData);HRESULT ( *SetMonikerReference)(IHlink *This, DWORD grfHLSETF, IMoniker *pimkTarget, LPCWSTR pwzLocation);HRESULT ( *GetMonikerReference)(IHlink *This, DWORD dwWhichRef, IMoniker **ppimkTarget, LPWSTR *ppwzLocation);HRESULT ( *SetStringReference)(IHlink *This, DWORD grfHLSETF, LPCWSTR pwzTarget, LPCWSTR pwzLocation);HRESULT ( *GetStringReference)(IHlink *This, DWORD dwWhichRef, LPWSTR *ppwzTarget, LPWSTR *ppwzLocation);HRESULT ( *SetFriendlyName)(IHlink *This, LPCWSTR pwzFriendlyName);HRESULT ( *GetFriendlyName)(IHlink *This, DWORD grfHLFNAMEF, LPWSTR *ppwzFriendlyName);HRESULT ( *SetTargetFrameName)(IHlink *This, LPCWSTR pwzTargetFrameName);HRESULT ( *GetTargetFrameName)(IHlink *This, LPWSTR *ppwzTargetFrameName);HRESULT ( *GetMiscStatus)(IHlink *This, DWORD *pdwStatus);HRESULT ( *Navigate)(IHlink *This, DWORD grfHLNF, LPBC pibc, IBindStatusCallback *pibsc, IHlinkBrowseContext *pihlbc);HRESULT ( *SetAdditionalParams)(IHlink *This, LPCWSTR pwzAdditionalParams);HRESULT ( *GetAdditionalParams)(IHlink *This, LPWSTR *ppwzAdditionalParams);};
struct _ADRPARM {ULONG cbABContEntryID;LPENTRYID lpABContEntryID;ULONG ulFlags;LPVOID lpReserved;ULONG ulHelpContext;LPTSTR lpszHelpFileName;LPFNABSDI lpfnABSDI;LPFNDISMISS lpfnDismiss;LPVOID lpvDismissContext;LPTSTR lpszCaption;LPTSTR lpszNewEntryTitle;LPTSTR lpszDestWellsTitle;ULONG cDestFields;ULONG nDestFieldFocus;LPTSTR *lppszDestTitles;ULONG *lpulDestComps;LPSRestriction lpContRestriction;LPSRestriction lpHierRestriction;};
struct INetCfgComponentPropertyUiVtbl {HRESULT ( *QueryInterface)(INetCfgComponentPropertyUi *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponentPropertyUi *This);ULONG ( *Release)(INetCfgComponentPropertyUi *This);HRESULT ( *QueryPropertyUi)(INetCfgComponentPropertyUi *This, IUnknown *pUnkReserved);HRESULT ( *SetContext)(INetCfgComponentPropertyUi *This, IUnknown *pUnkReserved);HRESULT ( *MergePropPages)(INetCfgComponentPropertyUi *This, DWORD *pdwDefPages, BYTE **pahpspPrivate, UINT *pcPages, HWND hwndParent, LPCWSTR *pszStartPage);HRESULT ( *ValidateProperties)(INetCfgComponentPropertyUi *This, HWND hwndSheet);HRESULT ( *ApplyProperties)(INetCfgComponentPropertyUi *This);HRESULT ( *CancelProperties)(INetCfgComponentPropertyUi *This);};
struct IInternetSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityManager *This);ULONG ( *Release)(IInternetSecurityManager *This);HRESULT ( *SetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite);HRESULT ( *GetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite);HRESULT ( *MapUrlToZone)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);HRESULT ( *GetSecurityId)(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT ( *ProcessUrlAction)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetSecurityManager *This, LPCWSTR pwszUrl,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);HRESULT ( *SetZoneMapping)(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);HRESULT ( *GetZoneMappings)(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);};
struct INotificationProcessMgr0Vtbl {HRESULT ( *QueryInterface)(INotificationProcessMgr0 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotificationProcessMgr0 *This);ULONG ( *Release)(INotificationProcessMgr0 *This);HRESULT ( *SetMode)(INotificationProcessMgr0 *This,  CLSID * rClsID, NOTIFICATIONMGRMODE NotificationMgrMode, LPCLSID *pClsIDPre, DWORD dwReserved);HRESULT ( *RegisterThrottleNotificationType)(INotificationProcessMgr0 *This, ULONG cItems, PTHROTTLEITEM pThrottleItems, ULONG *pcItemsOut, PTHROTTLEITEM *ppThrottleItemsOut, DWORD dwMode, DWORD dwReserved);};
struct ICommandWithParametersVtbl {HRESULT ( *QueryInterface)(ICommandWithParameters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandWithParameters *This);ULONG ( *Release)(ICommandWithParameters *This);HRESULT ( *GetParameterInfo)(ICommandWithParameters *This, DB_UPARAMS *pcParams, DBPARAMINFO **prgParamInfo, OLECHAR **ppNamesBuffer);HRESULT ( *MapParameterNames)(ICommandWithParameters *This, DB_UPARAMS cParamNames, OLECHAR * *    rgParamNames, DB_LPARAMS rgParamOrdinals[]);HRESULT ( *SetParameterInfo)(ICommandWithParameters *This, DB_UPARAMS cParams, DB_UPARAMS  *    rgParamOrdinals,  DBPARAMBINDINFO rgParamBindInfo[]);};
struct IRowsetWithParametersVtbl {HRESULT ( *QueryInterface)(IRowsetWithParameters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWithParameters *This);ULONG ( *Release)(IRowsetWithParameters *This);HRESULT ( *GetParameterInfo)(IRowsetWithParameters *This, DB_UPARAMS *pcParams, DBPARAMINFO **prgParamInfo, OLECHAR **ppNamesBuffer);HRESULT ( *Requery)(IRowsetWithParameters *This, DBPARAMS *pParams, ULONG *pulErrorParam, HCHAPTER *phReserved);};
struct IOleParentUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleParentUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleParentUndoUnit *This);ULONG ( *Release)(IOleParentUndoUnit *This);HRESULT ( *Do)(IOleParentUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleParentUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleParentUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleParentUndoUnit *This);HRESULT ( *Open)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *FindUnit)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *GetParentState)(IOleParentUndoUnit *This, DWORD *pdwState);};
struct INetCfgClassSetupVtbl {HRESULT ( *QueryInterface)(INetCfgClassSetup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgClassSetup *This);ULONG ( *Release)(INetCfgClassSetup *This);HRESULT ( *SelectAndInstall)(INetCfgClassSetup *This, HWND hwndParent, OBO_TOKEN *pOboToken, INetCfgComponent **ppnccItem);HRESULT ( *Install)(INetCfgClassSetup *This, LPCWSTR pszwInfId, OBO_TOKEN *pOboToken, DWORD dwSetupFlags, DWORD dwUpgradeFromBuildNo, LPCWSTR pszwAnswerFile, LPCWSTR pszwAnswerSections, INetCfgComponent **ppnccItem);HRESULT ( *DeInstall)(INetCfgClassSetup *This, INetCfgComponent *pComponent, OBO_TOKEN *pOboToken, LPWSTR *pmszwRefs);};
struct IInternetSessionVtbl {HRESULT ( *QueryInterface)(IInternetSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSession *This);ULONG ( *Release)(IInternetSession *This);HRESULT ( *RegisterNameSpace)(IInternetSession *This, IClassFactory *pCF,  CLSID * rclsid, LPCWSTR pwzProtocol, ULONG cPatterns,  LPCWSTR *ppwzPatterns, DWORD dwReserved);HRESULT ( *UnregisterNameSpace)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol);HRESULT ( *RegisterMimeFilter)(IInternetSession *This, IClassFactory *pCF,  CLSID * rclsid, LPCWSTR pwzType);HRESULT ( *UnregisterMimeFilter)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType);HRESULT ( *CreateBinding)(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);HRESULT ( *SetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);HRESULT ( *GetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);};
struct IShellAppManagerVtbl {HRESULT ( *QueryInterface)(IShellAppManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellAppManager *This);ULONG ( *Release)(IShellAppManager *This);HRESULT ( *GetNumberofInstalledApps)(IShellAppManager *This, DWORD *pdwResult);HRESULT ( *EnumInstalledApps)(IShellAppManager *This, IEnumInstalledApps **peia);HRESULT ( *GetPublishedAppCategories)(IShellAppManager *This, PSHELLAPPCATEGORYLIST pCategoryList);HRESULT ( *EnumPublishedApps)(IShellAppManager *This, LPCWSTR pszCategory, IEnumPublishedApps **ppepa);HRESULT ( *InstallFromFloppyOrCDROM)(IShellAppManager *This, HWND hwndParent);};
struct IVirusScanEngineVtbl {HRESULT ( *QueryInterface)(IVirusScanEngine *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVirusScanEngine *This);ULONG ( *Release)(IVirusScanEngine *This);HRESULT ( *ScanForVirus)(IVirusScanEngine *This, HWND hWnd, STGMEDIUM *pstgMedium, LPWSTR pwszItemDescription, DWORD dwFlags, DWORD dwReserved, LPVIRUSINFO pVirusInfo);HRESULT ( *DisplayCustomInfo)(IVirusScanEngine *This);};
struct ICatInformationVtbl {HRESULT ( *QueryInterface)(ICatInformation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatInformation *This);ULONG ( *Release)(ICatInformation *This);HRESULT ( *EnumCategories)(ICatInformation *This, LCID lcid, IEnumCATEGORYINFO **ppenumCategoryInfo);HRESULT ( *GetCategoryDesc)(ICatInformation *This, REFCATID rcatid, LCID lcid, LPWSTR *pszDesc);HRESULT ( *EnumClassesOfCategories)(ICatInformation *This, ULONG cImplemented,CATID  *    rgcatidImpl, ULONG cRequired,CATID  *    rgcatidReq, IEnumGUID **ppenumClsid);HRESULT ( *IsClassOfCategories)(ICatInformation *This,  CLSID * rclsid, ULONG cImplemented,CATID  *    rgcatidImpl, ULONG cRequired,CATID  *    rgcatidReq);HRESULT ( *EnumImplCategoriesOfClass)(ICatInformation *This,  CLSID * rclsid, IEnumGUID **ppenumCatid);HRESULT ( *EnumReqCategoriesOfClass)(ICatInformation *This,  CLSID * rclsid, IEnumGUID **ppenumCatid);};
struct IHttpNegotiate2Vtbl {HRESULT ( *QueryInterface)(IHttpNegotiate2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpNegotiate2 *This);ULONG ( *Release)(IHttpNegotiate2 *This);HRESULT ( *BeginningTransaction)(IHttpNegotiate2 *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT ( *OnResponse)(IHttpNegotiate2 *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);HRESULT ( *GetRootSecurityId)(IHttpNegotiate2 *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);};
struct IClassFactory2Vtbl {HRESULT ( *QueryInterface)(IClassFactory2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory2 *This);ULONG ( *Release)(IClassFactory2 *This);HRESULT ( *CreateInstance)(IClassFactory2 *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory2 *This, BOOL fLock);HRESULT ( *GetLicInfo)(IClassFactory2 *This, LICINFO *pLicInfo);HRESULT ( *RequestLicKey)(IClassFactory2 *This, DWORD dwReserved, BSTR *pBstrKey);HRESULT ( *CreateInstanceLic)(IClassFactory2 *This, IUnknown *pUnkOuter, IUnknown *pUnkReserved,  IID * riid, BSTR bstrKey, PVOID *ppvObj);};
struct IExtractImage2Vtbl {HRESULT ( *QueryInterface)(IExtractImage *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IExtractImage *This);ULONG ( *Release)(IExtractImage *This);HRESULT ( *GetLocation)(IExtractImage *This, LPWSTR pszPathBuffer, DWORD cch, DWORD *pdwPriority,  SIZE *prgSize, DWORD dwRecClrDepth, DWORD *pdwFlags);HRESULT ( *Extract)(IExtractImage *This, HBITMAP *phBmpThumbnail);HRESULT ( *GetDateStamp)(FILETIME *pDateStamp);};
struct IMonikerHelperVtbl {HRESULT ( *QueryInterface)(IMonikerHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMonikerHelper *This);ULONG ( *Release)(IMonikerHelper *This);HRESULT ( *Init)(IMonikerHelper *This, MKHELPF flags, IMoniker *pmk);HRESULT ( *GetLocalPath)(IMonikerHelper *This, MKHELPF flags, HWND hwnd, LPCWSTR pszTitle, LPWSTR pszOut, DWORD *pcchOut);HRESULT ( *Commit)(IMonikerHelper *This, MKHELPF flags, HWND hwnd, LPCWSTR pszTitle);};
struct IColumnsInfo2Vtbl {HRESULT ( *QueryInterface)(IColumnsInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnsInfo2 *This);ULONG ( *Release)(IColumnsInfo2 *This);HRESULT ( *GetColumnInfo)(IColumnsInfo2 *This, DBORDINAL *pcColumns, DBCOLUMNINFO **prgInfo, OLECHAR **ppStringsBuffer);HRESULT ( *MapColumnIDs)(IColumnsInfo2 *This, DBORDINAL cColumnIDs, DBID  *    rgColumnIDs, DBORDINAL rgColumns[]);HRESULT ( *GetRestrictedColumnInfo)(IColumnsInfo2 *This, DBORDINAL cColumnIDMasks, DBID  *    rgColumnIDMasks, DWORD dwFlags, DBORDINAL *pcColumns, DBID **prgColumnIDs, DBCOLUMNINFO **prgColumnInfo, OLECHAR **ppStringsBuffer);};
struct IFilterGraph2Vtbl {HRESULT ( *QueryInterface)(IFilterGraph2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterGraph2 *This);ULONG ( *Release)(IFilterGraph2 *This);HRESULT ( *AddFilter)(IFilterGraph2 *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IFilterGraph2 *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IFilterGraph2 *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IFilterGraph2 *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IFilterGraph2 *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IFilterGraph2 *This, IPin *ppin);HRESULT ( *Disconnect)(IFilterGraph2 *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IFilterGraph2 *This);HRESULT ( *Connect)(IFilterGraph2 *This, IPin *ppinOut, IPin *ppinIn);HRESULT ( *Render)(IFilterGraph2 *This, IPin *ppinOut);HRESULT ( *RenderFile)(IFilterGraph2 *This, LPCWSTR lpcwstrFile, LPCWSTR lpcwstrPlayList);HRESULT ( *AddSourceFilter)(IFilterGraph2 *This, LPCWSTR lpcwstrFileName, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *SetLogFile)(IFilterGraph2 *This, HANDLE hFile);HRESULT ( *Abort)(IFilterGraph2 *This);HRESULT ( *ShouldOperationContinue)(IFilterGraph2 *This);HRESULT ( *AddSourceFilterForMoniker)(IFilterGraph2 *This, IMoniker *pMoniker, IBindCtx *pCtx, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *ReconnectEx)(IFilterGraph2 *This, IPin *ppin,  AM_MEDIA_TYPE *pmt);HRESULT ( *RenderEx)(IFilterGraph2 *This, IPin *pPinOut, DWORD dwFlags, LPVOID pvContext);};
struct IVirusScannerVtbl {HRESULT ( *QueryInterface)(IVirusScanner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVirusScanner *This);ULONG ( *Release)(IVirusScanner *This);HRESULT ( *ScanForVirus)(IVirusScanner *This, HWND hWnd, STGMEDIUM *pstgMedium, LPWSTR pwszItemDescription, DWORD dwFlags, LPVIRUSINFO pVirusInfo);};
struct IVoIPMediaMgrVtbl {HRESULT ( *QueryInterface)(IVoIPMediaMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPMediaMgr *This);ULONG ( *Release)(IVoIPMediaMgr *This);HRESULT ( *Initialize)(IVoIPMediaMgr *This);HRESULT ( *InitializeRTCClient)(IVoIPMediaMgr *This, IRTCClient2 *piClient);HRESULT ( *CreatePCToPCSession)(IVoIPMediaMgr *This, IRTCClient2 *piClient, IRTCProfile *piProfile, IRTCSession2 **ppiSession);HRESULT ( *AnswerSession)(IVoIPMediaMgr *This, IRTCSession2 *piSession);HRESULT ( *HoldSession)(IVoIPMediaMgr *This, IRTCSession2 *piSession);HRESULT ( *UnholdSession)(IVoIPMediaMgr *This, IRTCSession2 *piSession);HRESULT ( *SendDTMF)(IVoIPMediaMgr *This, RTC_DTMF dtmf);HRESULT ( *get_SpeakerVolume)(IVoIPMediaMgr *This, float *pfpVolume);HRESULT ( *put_SpeakerVolume)(IVoIPMediaMgr *This, float fpVolume);HRESULT ( *get_MicrophoneVolume)(IVoIPMediaMgr *This, float *pfpVolume);HRESULT ( *put_MicrophoneVolume)(IVoIPMediaMgr *This, float fpVolume);HRESULT ( *get_SpeakerMute)(IVoIPMediaMgr *This, VARIANT_BOOL *pfMuted);HRESULT ( *put_SpeakerMute)(IVoIPMediaMgr *This, VARIANT_BOOL fMuted);HRESULT ( *get_MicrophoneMute)(IVoIPMediaMgr *This, VARIANT_BOOL *pfMuted);HRESULT ( *put_MicrophoneMute)(IVoIPMediaMgr *This, VARIANT_BOOL fMuted);HRESULT ( *PlaySoundA)(IVoIPMediaMgr *This, BSTR bstrFilePath, INT_PTR hCallback);HRESULT ( *StopSound)(IVoIPMediaMgr *This);HRESULT ( *PlayProgressTone)(IVoIPMediaMgr *This, VoIPProgressTone vpt);HRESULT ( *StopProgressTone)(IVoIPMediaMgr *This);HRESULT ( *OnReinviteEvent)(IVoIPMediaMgr *This, IRTCReInviteEvent *piReinviteEvent);HRESULT ( *OnSessionStateChangeEvent)(IVoIPMediaMgr *This, IRTCSessionStateChangeEvent *piSSCEvent);HRESULT ( *EvaluateSessionDescription)(IVoIPMediaMgr *This, BSTR bstrContentType, BSTR bstrSessionDescription, VARIANT_BOOL *pfApplicationSession);};
struct _SHELLEXECUTEINFO {DWORD cbSize;ULONG fMask;HWND hwnd;LPCTSTR lpVerb;LPCTSTR lpFile;LPCTSTR lpParameters;LPCTSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCTSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;HANDLE hIcon;HANDLE hProcess;};
struct IJavaPackageVtbl {HRESULT ( *QueryInterface)(IJavaPackage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaPackage *This);ULONG ( *Release)(IJavaPackage *This);HRESULT ( *GetPackageName)(IJavaPackage *This, BSTR *pbstrName);HRESULT ( *GetVersion)(IJavaPackage *This, DWORD *pdwVersionMS, DWORD *pdwVersionLS);HRESULT ( *GetFilePath)(IJavaPackage *This, BSTR *pbstrPath);HRESULT ( *IsSystemClass)(IJavaPackage *This, BOOL *pfIsSystemClass);HRESULT ( *NeedsTrustedSource)(IJavaPackage *This, BOOL *pfNeedsTrustedSource);HRESULT ( *GetCapabilities)(IJavaPackage *This, LPCBYTE *ppCapabilities, DWORD *pcbCapabilities);HRESULT ( *GetSigner)(IJavaPackage *This, LPCBYTE *ppSigner, DWORD *pcbSigner);HRESULT ( *GetDatabaseEntry)(IJavaPackage *This, ICodeStoreDBEntry **ppEntry);HRESULT ( *EnumFiles)(IJavaPackage *This, DWORD dwFlags, IEnumJavaFile **ppEnum);HRESULT ( *GetFilePathA)(IJavaPackage *This, LPSTR pszPath, DWORD cbPath);};
struct IIMCallbackVtbl {HRESULT ( *QueryInterface)(IIMCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMCallback *This);ULONG ( *Release)(IIMCallback *This);HRESULT ( *SetImInfo)(IIMCallback *This, IMINFO *pimi);HRESULT ( *SendVirtualKey)(IIMCallback *This, BYTE bVK, DWORD dwFlags);HRESULT ( *SendCharEvents)(IIMCallback *This, UINT uVK, UINT uKeyFlags, UINT uChars, UINT *puShift, UINT *puChars);HRESULT ( *SendString)(IIMCallback *This, BSTR ptszStr, DWORD dwChars);};
struct ISoapMapperVtbl {HRESULT ( *QueryInterface)(ISoapMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapMapper *This);ULONG ( *Release)(ISoapMapper *This);HRESULT ( *get_messageName)(ISoapMapper *This, BSTR *pbstrMessageName);HRESULT ( *get_elementName)(ISoapMapper *This, BSTR *pbstrElementName);HRESULT ( *get_partName)(ISoapMapper *This, BSTR *pbstrpartName);HRESULT ( *get_elementType)(ISoapMapper *This, BSTR *pbstrElementType);HRESULT ( *get_isInput)(ISoapMapper *This, smIsInputEnum *pbIsInput);HRESULT ( *get_encoding)(ISoapMapper *This, BSTR *pbstrEncodingStyle);HRESULT ( *get_comValue)(ISoapMapper *This, VARIANT *pVarOut);HRESULT ( *put_comValue)(ISoapMapper *This, VARIANT varIn);HRESULT ( *get_callIndex)(ISoapMapper *This, LONG *plCallIndex);HRESULT ( *get_parameterOrder)(ISoapMapper *This, LONG *plparaOrder);HRESULT ( *get_xmlNameSpace)(ISoapMapper *This, BSTR *pbstrxmlNameSpace);HRESULT ( *get_variantType)(ISoapMapper *This, int *pvtType);HRESULT ( *Save)(ISoapMapper *This, ISoapSerializer *pISoapSerializer, BSTR bstrEncoding, enEncodingStyle enSaveStyle, BSTR bstrMessageNamespace, int lFlags);HRESULT ( *Load)(ISoapMapper *This, IXMLDOMNode *pNode, BSTR bstrEncoding, enEncodingStyle enStyle, BSTR bstrMessageNamespace);};
struct tagADDRESSPROPS {DWORD dwProps;HADDRESS hAddress;ENCODINGTYPE ietFriendly;HCHARSET hCharset;DWORD dwAdrType;LPSTR pszFriendly;LPWSTR pwszReserved;LPSTR pszEmail;CERTSTATE certstate;THUMBBLOB tbSigning;THUMBBLOB tbEncryption;DWORD dwCookie;DWORD dwReserved1;DWORD dwReserved2;};
struct IHTMLCaretVtbl {HRESULT ( *QueryInterface)(IHTMLCaret *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCaret *This);ULONG ( *Release)(IHTMLCaret *This);HRESULT ( *MoveCaretToPointer)(IHTMLCaret *This, IDisplayPointer *pDispPointer, BOOL fScrollIntoView, CARET_DIRECTION eDir);HRESULT ( *MoveCaretToPointerEx)(IHTMLCaret *This, IDisplayPointer *pDispPointer, BOOL fVisible, BOOL fScrollIntoView, CARET_DIRECTION eDir);HRESULT ( *MoveMarkupPointerToCaret)(IHTMLCaret *This, IMarkupPointer *pIMarkupPointer);HRESULT ( *MoveDisplayPointerToCaret)(IHTMLCaret *This, IDisplayPointer *pDispPointer);HRESULT ( *IsVisible)(IHTMLCaret *This, BOOL *pIsVisible);HRESULT ( *Show)(IHTMLCaret *This, BOOL fScrollIntoView);HRESULT ( *Hide)(IHTMLCaret *This);HRESULT ( *InsertText)(IHTMLCaret *This, OLECHAR *pText, LONG lLen);HRESULT ( *ScrollIntoView)(IHTMLCaret *This);HRESULT ( *GetLocation)(IHTMLCaret *This, POINT *pPoint, BOOL fTranslate);HRESULT ( *GetCaretDirection)(IHTMLCaret *This, CARET_DIRECTION *peDir);HRESULT ( *SetCaretDirection)(IHTMLCaret *This, CARET_DIRECTION eDir);};
struct IRTCBuddy2Vtbl {HRESULT ( *QueryInterface)(IRTCBuddy2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddy2 *This);ULONG ( *Release)(IRTCBuddy2 *This);HRESULT ( *get_PresentityURI)(IRTCBuddy2 *This, BSTR *pbstrPresentityURI);HRESULT ( *put_PresentityURI)(IRTCBuddy2 *This, BSTR bstrPresentityURI);HRESULT ( *get_Name)(IRTCBuddy2 *This, BSTR *pbstrName);HRESULT ( *put_Name)(IRTCBuddy2 *This, BSTR bstrName);HRESULT ( *get_Data)(IRTCBuddy2 *This, BSTR *pbstrData);HRESULT ( *put_Data)(IRTCBuddy2 *This, BSTR bstrData);HRESULT ( *get_Persistent)(IRTCBuddy2 *This, VARIANT_BOOL *pfPersistent);HRESULT ( *put_Persistent)(IRTCBuddy2 *This, VARIANT_BOOL fPersistent);HRESULT ( *get_Status)(IRTCBuddy2 *This, RTC_PRESENCE_STATUS *penStatus);HRESULT ( *get_Notes)(IRTCBuddy2 *This, BSTR *pbstrNotes);HRESULT ( *get_Profile)(IRTCBuddy2 *This, IRTCProfile2 **ppProfile);HRESULT ( *Refresh)(IRTCBuddy2 *This);HRESULT ( *EnumerateGroups)(IRTCBuddy2 *This, IRTCEnumGroups **ppEnum);HRESULT ( *get_Groups)(IRTCBuddy2 *This, IRTCCollection **ppCollection);HRESULT ( *get_PresenceProperty)(IRTCBuddy2 *This, RTC_PRESENCE_PROPERTY enProperty, BSTR *pbstrProperty);HRESULT ( *EnumeratePresenceDevices)(IRTCBuddy2 *This, IRTCEnumPresenceDevices **ppEnumDevices);HRESULT ( *get_PresenceDevices)(IRTCBuddy2 *This, IRTCCollection **ppDevicesCollection);HRESULT ( *get_SubscriptionType)(IRTCBuddy2 *This, RTC_BUDDY_SUBSCRIPTION_TYPE *penSubscriptionType);};
struct ITravelLogVtbl {HRESULT ( *QueryInterface)(ITravelLog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLog *This);ULONG ( *Release)(ITravelLog *This);HRESULT ( *AddEntry)(ITravelLog *This, IUnknown *punk, BOOL fIsLocalAnchor);HRESULT ( *UpdateEntry)(ITravelLog *This, IUnknown *punk, BOOL fIsLocalAnchor);HRESULT ( *UpdateExternal)(ITravelLog *This, IUnknown *punk, IUnknown *punkHLBrowseContext);HRESULT ( *Travel)(ITravelLog *This, IUnknown *punk, int iOffset);HRESULT ( *GetTravelEntry)(ITravelLog *This, IUnknown *punk, int iOffset, ITravelEntry **ppte);HRESULT ( *FindTravelEntry)(ITravelLog *This, IUnknown *punk, LPCITEMIDLIST pidl, ITravelEntry **ppte);HRESULT ( *GetToolTipText)(ITravelLog *This, IUnknown *punk, int iOffset, int idsTemplate, LPWSTR pwzText, DWORD cchText);HRESULT ( *InsertMenuEntries)(ITravelLog *This, IUnknown *punk, HMENU hmenu, int nPos, int idFirst, int idLast, DWORD dwFlags);HRESULT ( *Clone)(ITravelLog *This, ITravelLog **pptl);DWORD ( *CountEntries)(ITravelLog *This, IUnknown *punk);HRESULT ( *Revert)(ITravelLog *This);};
struct IDVDROMVtbl {HRESULT ( *QueryInterface)(IDVDROM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDVDROM *This);ULONG ( *Release)(IDVDROM *This);HRESULT ( *Bind)(IDVDROM *This, UNICODE_PATH path);HRESULT ( *Unbind)(IDVDROM *This);HRESULT ( *ReadVMGI)(IDVDROM *This, UINT32 *length, UINT8 **bufPtr);HRESULT ( *ReadVTSI)(IDVDROM *This, UINT16 zbVTSN, UINT32 *length, UINT8 **bufPtr);HRESULT ( *ReleaseMem)(IDVDROM *This, UINT8 *bufPtr);HRESULT ( *OpenVOB)(IDVDROM *This, UINT16 *hVOB, INT16 obVTSN);HRESULT ( *ReadVOB)(IDVDROM *This, UINT16 hVOB, UINT8 *buf, UINT32 startBlock, UINT32 endBlock);HRESULT ( *CloseVOB)(IDVDROM *This, UINT16 hVOB);};
struct tagFUNCDESC {MEMBERID memid;SCODE *lprgscode;ELEMDESC *lprgelemdescParam;FUNCKIND funckind;INVOKEKIND invkind;CALLCONV callconv;SHORT cParams;SHORT cParamsOpt;SHORT oVft;SHORT cScodes;ELEMDESC elemdescFunc;WORD wFuncFlags;};
struct _MMIOINFO {DWORD dwFlags;FOURCC fccIOProc;LPMMIOPROC pIOProc;UINT wErrorRet;HTASK htask;LONG cchBuffer;HPSTR pchBuffer;HPSTR pchNext;HPSTR pchEndRead;HPSTR pchEndWrite;LONG lBufOffset;LONG lDiskOffset;DWORD adwInfo[3];DWORD dwReserved1;DWORD dwReserved2;HMMIO hmmio;};
struct IPinVtbl {HRESULT ( *QueryInterface)(IPin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPin *This);ULONG ( *Release)(IPin *This);HRESULT ( *Connect)(IPin *This, IPin *pReceivePin,  AM_MEDIA_TYPE *pmt);HRESULT ( *ReceiveConnection)(IPin *This, IPin *pConnector,  AM_MEDIA_TYPE *pmt);HRESULT ( *Disconnect)(IPin *This);HRESULT ( *ConnectedTo)(IPin *This, IPin **pPin);HRESULT ( *ConnectionMediaType)(IPin *This, AM_MEDIA_TYPE *pmt);HRESULT ( *QueryPinInfo)(IPin *This, PIN_INFO *pInfo);HRESULT ( *QueryDirection)(IPin *This, PIN_DIRECTION *pPinDir);HRESULT ( *QueryId)(IPin *This, LPWSTR *Id);HRESULT ( *QueryAccept)(IPin *This,  AM_MEDIA_TYPE *pmt);HRESULT ( *EnumMediaTypes)(IPin *This, IEnumMediaTypes **ppEnum);HRESULT ( *QueryInternalConnections)(IPin *This, IPin **apPin, ULONG *nPin);HRESULT ( *EndOfStream)(IPin *This);HRESULT ( *BeginFlush)(IPin *This);HRESULT ( *EndFlush)(IPin *This);HRESULT ( *NewSegment)(IPin *This, REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate);};
struct tagOFNW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpstrFilter;LPWSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPWSTR lpstrFile;DWORD nMaxFile;LPWSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCWSTR lpstrInitialDir;LPCWSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCWSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct ITableDefinitionWithConstraintsVtbl {HRESULT ( *QueryInterface)(ITableDefinitionWithConstraints *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableDefinitionWithConstraints *This);ULONG ( *Release)(ITableDefinitionWithConstraints *This);HRESULT ( *CreateTable)(ITableDefinitionWithConstraints *This, IUnknown *pUnkOuter, DBID *pTableID, DBORDINAL cColumnDescs, DBCOLUMNDESC  *    rgColumnDescs,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, DBID **ppTableID, IUnknown **ppRowset);HRESULT ( *DropTable)(ITableDefinitionWithConstraints *This, DBID *pTableID);HRESULT ( *AddColumn)(ITableDefinitionWithConstraints *This, DBID *pTableID, DBCOLUMNDESC *pColumnDesc, DBID **ppColumnID);HRESULT ( *DropColumn)(ITableDefinitionWithConstraints *This, DBID *pTableID, DBID *pColumnID);HRESULT ( *GetTableDefinition)(ITableDefinitionWithConstraints *This, DBID *pTableID, DBORDINAL *pcColumnDescs,DBCOLUMNDESC * *    prgColumnDescs, ULONG *pcPropertySets,DBPROPSET * *    prgPropertySets, ULONG *pcConstraintDescs,DBCONSTRAINTDESC * *    prgConstraintDescs, OLECHAR **ppwszStringBuffer);HRESULT ( *AddConstraint)(ITableDefinitionWithConstraints *This, DBID *pTableID, DBCONSTRAINTDESC *pConstraintDesc);HRESULT ( *CreateTableWithConstraints)(ITableDefinitionWithConstraints *This, IUnknown *pUnkOuter, DBID *pTableID, DBORDINAL cColumnDescs,DBCOLUMNDESC  *    rgColumnDescs, ULONG cConstraintDescs,DBCONSTRAINTDESC  *    rgConstraintDescs,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, DBID **ppTableID, IUnknown **ppRowset);HRESULT ( *DropConstraint)(ITableDefinitionWithConstraints *This, DBID *pTableID, DBID *pConstraintID);};
struct IBindStatusCallbackHolderVtbl {HRESULT ( *QueryInterface)(IBindStatusCallbackHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindStatusCallbackHolder *This);ULONG ( *Release)(IBindStatusCallbackHolder *This);HRESULT ( *OnStartBinding)(IBindStatusCallbackHolder *This, DWORD dwReserved, IBinding *pib);HRESULT ( *GetPriority)(IBindStatusCallbackHolder *This, LONG *pnPriority);HRESULT ( *OnLowResource)(IBindStatusCallbackHolder *This, DWORD reserved);HRESULT ( *OnProgress)(IBindStatusCallbackHolder *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *OnStopBinding)(IBindStatusCallbackHolder *This, HRESULT hresult, LPCWSTR szError);HRESULT ( *GetBindInfo)(IBindStatusCallbackHolder *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *OnDataAvailable)(IBindStatusCallbackHolder *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT ( *OnObjectAvailable)(IBindStatusCallbackHolder *This,  IID * riid, IUnknown *punk);};
struct IBindStatusCallbackMsgVtbl {HRESULT ( *QueryInterface)(IBindStatusCallbackMsg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindStatusCallbackMsg *This);ULONG ( *Release)(IBindStatusCallbackMsg *This);HRESULT ( *OnStartBinding)(IBindStatusCallbackMsg *This, DWORD dwReserved, IBinding *pib);HRESULT ( *GetPriority)(IBindStatusCallbackMsg *This, LONG *pnPriority);HRESULT ( *OnLowResource)(IBindStatusCallbackMsg *This, DWORD reserved);HRESULT ( *OnProgress)(IBindStatusCallbackMsg *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *OnStopBinding)(IBindStatusCallbackMsg *This, HRESULT hresult, LPCWSTR szError);HRESULT ( *GetBindInfo)(IBindStatusCallbackMsg *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *OnDataAvailable)(IBindStatusCallbackMsg *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT ( *OnObjectAvailable)(IBindStatusCallbackMsg *This,  IID * riid, IUnknown *punk);HRESULT ( *MessagePending)(IBindStatusCallbackMsg *This, DWORD dwPendingType, DWORD dwPendingRecursion, DWORD dwReserved);};
struct IInternetProtocolInfoVtbl {HRESULT ( *QueryInterface)(IInternetProtocolInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolInfo *This);ULONG ( *Release)(IInternetProtocolInfo *This);HRESULT ( *ParseUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CombineUrl)(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CompareUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);HRESULT ( *QueryInfo)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);};
struct IPerPropertyBrowsing2Vtbl {HRESULT ( *QueryInterface)(IPerPropertyBrowsing2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPerPropertyBrowsing2 *This);ULONG ( *Release)(IPerPropertyBrowsing2 *This);HRESULT ( *GetDisplayString)(IPerPropertyBrowsing2 *This, DISPID dispid, BSTR *pBstr);HRESULT ( *MapPropertyToPage)(IPerPropertyBrowsing2 *This, DISPID dispid, CLSID *pClsidPropPage);HRESULT ( *GetPredefinedStrings)(IPerPropertyBrowsing2 *This, DISPID dispid, CALPOLESTR *pCaStrings, CADWORD *pCaCookies);HRESULT ( *SetPredefinedValue)(IPerPropertyBrowsing2 *This, DISPID dispid, DWORD dwCookie);};
struct IBindStatusCallbackVtbl {HRESULT ( *QueryInterface)(IBindStatusCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindStatusCallback *This);ULONG ( *Release)(IBindStatusCallback *This);HRESULT ( *OnStartBinding)(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib);HRESULT ( *GetPriority)(IBindStatusCallback *This, LONG *pnPriority);HRESULT ( *OnLowResource)(IBindStatusCallback *This, DWORD reserved);HRESULT ( *OnProgress)(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *OnStopBinding)(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError);HRESULT ( *GetBindInfo)(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *OnDataAvailable)(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT ( *OnObjectAvailable)(IBindStatusCallback *This,  IID * riid, IUnknown *punk);};
struct IEmptyVolumeCache2Vtbl {HRESULT ( *QueryInterface)(IEmptyVolumeCache2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEmptyVolumeCache2 *This);ULONG ( *Release)(IEmptyVolumeCache2 *This);HRESULT ( *Initialize)(IEmptyVolumeCache2 *This, HKEY hkRegKey, LPCWSTR pcwszVolume, LPWSTR *ppwszDisplayName, LPWSTR *ppwszDescription, DWORD *pdwFlags);HRESULT ( *GetSpaceUsed)(IEmptyVolumeCache2 *This, DWORDLONG *pdwlSpaceUsed, IEmptyVolumeCacheCallBack *picb);HRESULT ( *Purge)(IEmptyVolumeCache2 *This, DWORDLONG dwlSpaceToFree, IEmptyVolumeCacheCallBack *picb);HRESULT ( *ShowProperties)(IEmptyVolumeCache2 *This, HWND hwnd);HRESULT ( *Deactivate)(IEmptyVolumeCache2 *This, DWORD *pdwFlags);HRESULT ( *InitializeEx)(IEmptyVolumeCache2 *This, HKEY hkRegKey, LPCWSTR pcwszVolume, LPCWSTR pcwszKeyName, LPWSTR *ppwszDisplayName, LPWSTR *ppwszDescription, LPWSTR *ppwszBtnText, DWORD *pdwFlags);};
struct IRTCClientPresenceVtbl {HRESULT ( *QueryInterface)(IRTCClientPresence *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientPresence *This);ULONG ( *Release)(IRTCClientPresence *This);HRESULT ( *EnablePresence)(IRTCClientPresence *This, VARIANT_BOOL fUseStorage, VARIANT varStorage);HRESULT ( *Export)(IRTCClientPresence *This, VARIANT varStorage);HRESULT ( *Import)(IRTCClientPresence *This, VARIANT varStorage, VARIANT_BOOL fReplaceAll);HRESULT ( *EnumerateBuddies)(IRTCClientPresence *This, IRTCEnumBuddies **ppEnum);HRESULT ( *get_Buddies)(IRTCClientPresence *This, IRTCCollection **ppCollection);HRESULT ( *get_Buddy)(IRTCClientPresence *This, BSTR bstrPresentityURI, IRTCBuddy **ppBuddy);HRESULT ( *AddBuddy)(IRTCClientPresence *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, VARIANT_BOOL fPersistent, IRTCProfile *pProfile, int lFlags, IRTCBuddy **ppBuddy);HRESULT ( *RemoveBuddy)(IRTCClientPresence *This, IRTCBuddy *pBuddy);HRESULT ( *EnumerateWatchers)(IRTCClientPresence *This, IRTCEnumWatchers **ppEnum);HRESULT ( *get_Watchers)(IRTCClientPresence *This, IRTCCollection **ppCollection);HRESULT ( *get_Watcher)(IRTCClientPresence *This, BSTR bstrPresentityURI, IRTCWatcher **ppWatcher);HRESULT ( *AddWatcher)(IRTCClientPresence *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, VARIANT_BOOL fBlocked, VARIANT_BOOL fPersistent, IRTCWatcher **ppWatcher);HRESULT ( *RemoveWatcher)(IRTCClientPresence *This, IRTCWatcher *pWatcher);HRESULT ( *SetLocalPresenceInfo)(IRTCClientPresence *This, RTC_PRESENCE_STATUS enStatus, BSTR bstrNotes);HRESULT ( *get_OfferWatcherMode)(IRTCClientPresence *This, RTC_OFFER_WATCHER_MODE *penMode);HRESULT ( *put_OfferWatcherMode)(IRTCClientPresence *This, RTC_OFFER_WATCHER_MODE enMode);HRESULT ( *get_PrivacyMode)(IRTCClientPresence *This, RTC_PRIVACY_MODE *penMode);HRESULT ( *put_PrivacyMode)(IRTCClientPresence *This, RTC_PRIVACY_MODE enMode);};
struct IEmptyVolumeCacheVtbl {HRESULT ( *QueryInterface)(IEmptyVolumeCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEmptyVolumeCache *This);ULONG ( *Release)(IEmptyVolumeCache *This);HRESULT ( *Initialize)(IEmptyVolumeCache *This, HKEY hkRegKey, LPCWSTR pcwszVolume, LPWSTR *ppwszDisplayName, LPWSTR *ppwszDescription, DWORD *pdwFlags);HRESULT ( *GetSpaceUsed)(IEmptyVolumeCache *This, DWORDLONG *pdwlSpaceUsed, IEmptyVolumeCacheCallBack *picb);HRESULT ( *Purge)(IEmptyVolumeCache *This, DWORDLONG dwlSpaceToFree, IEmptyVolumeCacheCallBack *picb);HRESULT ( *ShowProperties)(IEmptyVolumeCache *This, HWND hwnd);HRESULT ( *Deactivate)(IEmptyVolumeCache *This, DWORD *pdwFlags);};
struct IInternetProtocolVtbl {HRESULT ( *QueryInterface)(IInternetProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocol *This);ULONG ( *Release)(IInternetProtocol *This);HRESULT ( *Start)(IInternetProtocol *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT ( *Continue)(IInternetProtocol *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocol *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocol *This);HRESULT ( *Resume)(IInternetProtocol *This);HRESULT ( *Read)(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Seek)(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *LockRequest)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *UnlockRequest)(IInternetProtocol *This);};
struct IMarkupServices2Vtbl {HRESULT ( *QueryInterface)(IMarkupServices2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupServices2 *This);ULONG ( *Release)(IMarkupServices2 *This);HRESULT ( *CreateMarkupPointer)(IMarkupServices2 *This, IMarkupPointer **ppPointer);HRESULT ( *CreateMarkupContainer)(IMarkupServices2 *This, IMarkupContainer **ppMarkupContainer);HRESULT ( *CreateElement)(IMarkupServices2 *This, ELEMENT_TAG_ID tagID, OLECHAR *pchAttributes, IHTMLElement **ppElement);HRESULT ( *CloneElement)(IMarkupServices2 *This, IHTMLElement *pElemCloneThis, IHTMLElement **ppElementTheClone);HRESULT ( *InsertElement)(IMarkupServices2 *This, IHTMLElement *pElementInsert, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *RemoveElement)(IMarkupServices2 *This, IHTMLElement *pElementRemove);HRESULT ( *Remove)(IMarkupServices2 *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *Copy)(IMarkupServices2 *This, IMarkupPointer *pPointerSourceStart, IMarkupPointer *pPointerSourceFinish, IMarkupPointer *pPointerTarget);HRESULT ( *Move)(IMarkupServices2 *This, IMarkupPointer *pPointerSourceStart, IMarkupPointer *pPointerSourceFinish, IMarkupPointer *pPointerTarget);HRESULT ( *InsertText)(IMarkupServices2 *This, OLECHAR *pchText, int cch, IMarkupPointer *pPointerTarget);HRESULT ( *ParseString)(IMarkupServices2 *This, OLECHAR *pchHTML, DWORD dwFlags, IMarkupContainer **ppContainerResult, IMarkupPointer *ppPointerStart, IMarkupPointer *ppPointerFinish);HRESULT ( *ParseGlobal)(IMarkupServices2 *This, HGLOBAL hglobalHTML, DWORD dwFlags, IMarkupContainer **ppContainerResult, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *IsScopedElement)(IMarkupServices2 *This, IHTMLElement *pElement, BOOL *pfScoped);HRESULT ( *GetElementTagId)(IMarkupServices2 *This, IHTMLElement *pElement, ELEMENT_TAG_ID *ptagId);HRESULT ( *GetTagIDForName)(IMarkupServices2 *This, BSTR bstrName, ELEMENT_TAG_ID *ptagId);HRESULT ( *GetNameForTagID)(IMarkupServices2 *This, ELEMENT_TAG_ID tagId, BSTR *pbstrName);HRESULT ( *MovePointersToRange)(IMarkupServices2 *This, IHTMLTxtRange *pIRange, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *MoveRangeToPointers)(IMarkupServices2 *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish, IHTMLTxtRange *pIRange);HRESULT ( *BeginUndoUnit)(IMarkupServices2 *This, OLECHAR *pchTitle);HRESULT ( *EndUndoUnit)(IMarkupServices2 *This);HRESULT ( *ParseGlobalEx)(IMarkupServices2 *This, HGLOBAL hglobalHTML, DWORD dwFlags, IMarkupContainer *pContext, IMarkupContainer **ppContainerResult, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *ValidateElements)(IMarkupServices2 *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish, IMarkupPointer *pPointerTarget, IMarkupPointer *pPointerStatus, IHTMLElement **ppElemFailBottom, IHTMLElement **ppElemFailTop);HRESULT ( *SaveSegmentsToClipboard)(IMarkupServices2 *This, ISegmentList *pSegmentList, DWORD dwFlags);};
struct ISubscriptionMgrVtbl {HRESULT ( *QueryInterface)(ISubscriptionMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionMgr *This);ULONG ( *Release)(ISubscriptionMgr *This);HRESULT ( *DeleteSubscription)(ISubscriptionMgr *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *UpdateSubscription)(ISubscriptionMgr *This, LPCWSTR pwszURL);HRESULT ( *UpdateAll)(ISubscriptionMgr *This);HRESULT ( *IsSubscribed)(ISubscriptionMgr *This, LPCWSTR pwszURL, BOOL *pfSubscribed);HRESULT ( *GetSubscriptionInfo)(ISubscriptionMgr *This, LPCWSTR pwszURL, SUBSCRIPTIONINFO *pInfo);HRESULT ( *GetDefaultInfo)(ISubscriptionMgr *This, SUBSCRIPTIONTYPE subType, SUBSCRIPTIONINFO *pInfo);HRESULT ( *ShowSubscriptionProperties)(ISubscriptionMgr *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *CreateSubscription)(ISubscriptionMgr *This, HWND hwnd, LPCWSTR pwszURL, LPCWSTR pwszFriendlyName, DWORD dwFlags, SUBSCRIPTIONTYPE subsType, SUBSCRIPTIONINFO *pInfo);};
struct IVoIPCurrentCallVtbl {HRESULT ( *QueryInterface)(IVoIPCurrentCall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPCurrentCall *This);ULONG ( *Release)(IVoIPCurrentCall *This);HRESULT ( *get_URI)(IVoIPCurrentCall *This, BSTR *pbstrURI);HRESULT ( *get_FriendlyName)(IVoIPCurrentCall *This, BSTR *pbstrFriendlyName);HRESULT ( *get_VoIPName)(IVoIPCurrentCall *This, BSTR *pbstrVoIPName);HRESULT ( *get_StartTime)(IVoIPCurrentCall *This, SYSTEMTIME *pstStart);HRESULT ( *get_Duration)(IVoIPCurrentCall *This, SYSTEMTIME *pstDuration);HRESULT ( *get_RTCSession)(IVoIPCurrentCall *This, IRTCSession **piSession);HRESULT ( *get_Type)(IVoIPCurrentCall *This, VoIPCallType *pvctType);HRESULT ( *get_Status)(IVoIPCurrentCall *This, VoIPCallStatus *pvcsStatus);HRESULT ( *get_RTCParticipant)(IVoIPCurrentCall *This, IRTCParticipant **piparticipant);HRESULT ( *get_NetworkStatus)(IVoIPCurrentCall *This, LONG *plReason);HRESULT ( *Hold)(IVoIPCurrentCall *This);HRESULT ( *Unhold)(IVoIPCurrentCall *This);HRESULT ( *Answer)(IVoIPCurrentCall *This, BOOL fAccept);HRESULT ( *Hangup)(IVoIPCurrentCall *This);HRESULT ( *Ignore)(IVoIPCurrentCall *This);HRESULT ( *Redirect)(IVoIPCurrentCall *This, BSTR bstrRedirectURI);};
struct IMarkupServicesVtbl {HRESULT ( *QueryInterface)(IMarkupServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupServices *This);ULONG ( *Release)(IMarkupServices *This);HRESULT ( *CreateMarkupPointer)(IMarkupServices *This, IMarkupPointer **ppPointer);HRESULT ( *CreateMarkupContainer)(IMarkupServices *This, IMarkupContainer **ppMarkupContainer);HRESULT ( *CreateElement)(IMarkupServices *This, ELEMENT_TAG_ID tagID, OLECHAR *pchAttributes, IHTMLElement **ppElement);HRESULT ( *CloneElement)(IMarkupServices *This, IHTMLElement *pElemCloneThis, IHTMLElement **ppElementTheClone);HRESULT ( *InsertElement)(IMarkupServices *This, IHTMLElement *pElementInsert, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *RemoveElement)(IMarkupServices *This, IHTMLElement *pElementRemove);HRESULT ( *Remove)(IMarkupServices *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *Copy)(IMarkupServices *This, IMarkupPointer *pPointerSourceStart, IMarkupPointer *pPointerSourceFinish, IMarkupPointer *pPointerTarget);HRESULT ( *Move)(IMarkupServices *This, IMarkupPointer *pPointerSourceStart, IMarkupPointer *pPointerSourceFinish, IMarkupPointer *pPointerTarget);HRESULT ( *InsertText)(IMarkupServices *This, OLECHAR *pchText, int cch, IMarkupPointer *pPointerTarget);HRESULT ( *ParseString)(IMarkupServices *This, OLECHAR *pchHTML, DWORD dwFlags, IMarkupContainer **ppContainerResult, IMarkupPointer *ppPointerStart, IMarkupPointer *ppPointerFinish);HRESULT ( *ParseGlobal)(IMarkupServices *This, HGLOBAL hglobalHTML, DWORD dwFlags, IMarkupContainer **ppContainerResult, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *IsScopedElement)(IMarkupServices *This, IHTMLElement *pElement, BOOL *pfScoped);HRESULT ( *GetElementTagId)(IMarkupServices *This, IHTMLElement *pElement, ELEMENT_TAG_ID *ptagId);HRESULT ( *GetTagIDForName)(IMarkupServices *This, BSTR bstrName, ELEMENT_TAG_ID *ptagId);HRESULT ( *GetNameForTagID)(IMarkupServices *This, ELEMENT_TAG_ID tagId, BSTR *pbstrName);HRESULT ( *MovePointersToRange)(IMarkupServices *This, IHTMLTxtRange *pIRange, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish);HRESULT ( *MoveRangeToPointers)(IMarkupServices *This, IMarkupPointer *pPointerStart, IMarkupPointer *pPointerFinish, IHTMLTxtRange *pIRange);HRESULT ( *BeginUndoUnit)(IMarkupServices *This, OLECHAR *pchTitle);HRESULT ( *EndUndoUnit)(IMarkupServices *This);};
struct tagDBCONSTRAINTDESC {DBID *pConstraintID;DBCONSTRAINTTYPE ConstraintType;DBORDINAL cColumns;DBID *rgColumnList;DBID *pReferencedTableID;DBORDINAL cForeignKeyColumns;DBID *rgForeignKeyColumnList;OLECHAR *pwszConstraintText;DBUPDELRULE UpdateRule;DBUPDELRULE DeleteRule;DBMATCHTYPE MatchType;DBDEFERRABILITY Deferrability;DB_URESERVE cReserved;DBPROPSET *rgReserved;};
struct ITableCreationVtbl {HRESULT ( *QueryInterface)(ITableCreation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableCreation *This);ULONG ( *Release)(ITableCreation *This);HRESULT ( *CreateTable)(ITableCreation *This, IUnknown *pUnkOuter, DBID *pTableID, DBORDINAL cColumnDescs, DBCOLUMNDESC  *    rgColumnDescs,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, DBID **ppTableID, IUnknown **ppRowset);HRESULT ( *DropTable)(ITableCreation *This, DBID *pTableID);HRESULT ( *AddColumn)(ITableCreation *This, DBID *pTableID, DBCOLUMNDESC *pColumnDesc, DBID **ppColumnID);HRESULT ( *DropColumn)(ITableCreation *This, DBID *pTableID, DBID *pColumnID);HRESULT ( *GetTableDefinition)(ITableCreation *This, DBID *pTableID, DBORDINAL *pcColumnDescs,DBCOLUMNDESC * *    prgColumnDescs, ULONG *pcPropertySets,DBPROPSET * *    prgPropertySets, ULONG *pcConstraintDescs,DBCONSTRAINTDESC * *    prgConstraintDescs, OLECHAR **ppwszStringBuffer);};
struct IAuditControlVtbl {HRESULT ( *QueryInterface)(IAuditControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAuditControl *This);ULONG ( *Release)(IAuditControl *This);HRESULT ( *GrantAuditRights)(IAuditControl *This, PACTRL_AUDITW pAuditList);HRESULT ( *SetAuditRights)(IAuditControl *This, PACTRL_AUDITW pAuditList);HRESULT ( *RevokeAuditRights)(IAuditControl *This, LPWSTR lpProperty, ULONG cTrustees,TRUSTEEW  *    prgTrustees);HRESULT ( *GetAllAuditRights)(IAuditControl *This, LPWSTR lpProperty, PACTRL_AUDITW *ppAuditList);HRESULT ( *IsAccessAudited)(IAuditControl *This, PTRUSTEEW pTrustee, ACCESS_RIGHTS AuditRights, BOOL *pfAccessAudited);};
struct IIMCallbackExVtbl {HRESULT ( *QueryInterface)(IIMCallbackEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMCallbackEx *This);ULONG ( *Release)(IIMCallbackEx *This);HRESULT ( *SetImInfo)(IIMCallbackEx *This, IMINFO *pimi);HRESULT ( *SendVirtualKey)(IIMCallbackEx *This, BYTE bVK, DWORD dwFlags);HRESULT ( *SendCharEvents)(IIMCallbackEx *This, UINT uVK, UINT uKeyFlags, UINT uChars, UINT *puShift, UINT *puChars);HRESULT ( *SendString)(IIMCallbackEx *This, BSTR ptszStr, DWORD dwChars);HRESULT ( *SendAlternatives)(IIMCallbackEx *This, LMDATA *plmd);};
struct _PROPSHEETHEADERW {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous0;LPCWSTR pszCaption;UINT nPages;_PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 __anonymous2;_PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 __anonymous3;PFNPROPSHEETCALLBACK pfnCallback;};
struct IIMCallback2Vtbl {HRESULT ( *QueryInterface)(IIMCallback2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMCallback2 *This);ULONG ( *Release)(IIMCallback2 *This);HRESULT ( *SetImInfo)(IIMCallback2 *This, IMINFO *pimi);HRESULT ( *SendVirtualKey)(IIMCallback2 *This, BYTE bVK, DWORD dwFlags);HRESULT ( *SendCharEvents)(IIMCallback2 *This, UINT uVK, UINT uKeyFlags, UINT uChars, UINT *puShift, UINT *puChars);HRESULT ( *SendString)(IIMCallback2 *This, BSTR ptszStr, DWORD dwChars);HRESULT ( *SendAlternatives2)(IIMCallback2 *This, LMDATA *plmd);};
struct tACMFILTERCHOOSE {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFILTER pwfltr;DWORD cbwfltr;LPCWSTR pszTitle;WCHAR szFilterTag[48];WCHAR szFilter[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFILTER pwfltrEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFILTERCHOOSEHOOKPROC pfnHook;};
struct tACMFORMATCHOOSE {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFORMATEX pwfx;DWORD cbwfx;LPCWSTR pszTitle;WCHAR szFormatTag[48];WCHAR szFormat[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFORMATEX pwfxEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFORMATCHOOSEHOOKPROC pfnHook;};
struct IDvdControlVtbl {HRESULT ( *QueryInterface)(IDvdControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdControl *This);ULONG ( *Release)(IDvdControl *This);HRESULT ( *TitlePlay)(IDvdControl *This, ULONG uiTitle);HRESULT ( *ChapterPlay)(IDvdControl *This, ULONG uiTitle, ULONG uiChapter);HRESULT ( *TimePlay)(IDvdControl *This, ULONG uiTitle, ULONG bcdTime);HRESULT ( *StopForResume)(IDvdControl *This);HRESULT ( *GoUp)(IDvdControl *This);HRESULT ( *TimeSearch)(IDvdControl *This, ULONG bcdTime);HRESULT ( *ChapterSearch)(IDvdControl *This, ULONG Chapter);HRESULT ( *PrevPGSearch)(IDvdControl *This);HRESULT ( *TopPGSearch)(IDvdControl *This);HRESULT ( *NextPGSearch)(IDvdControl *This);HRESULT ( *ForwardScan)(IDvdControl *This, double dwSpeed);HRESULT ( *BackwardScan)(IDvdControl *This, double dwSpeed);HRESULT ( *MenuCall)(IDvdControl *This, DVD_MENU_ID MenuID);HRESULT ( *Resume)(IDvdControl *This);HRESULT ( *UpperButtonSelect)(IDvdControl *This);HRESULT ( *LowerButtonSelect)(IDvdControl *This);HRESULT ( *LeftButtonSelect)(IDvdControl *This);HRESULT ( *RightButtonSelect)(IDvdControl *This);HRESULT ( *ButtonActivate)(IDvdControl *This);HRESULT ( *ButtonSelectAndActivate)(IDvdControl *This, ULONG uiButton);HRESULT ( *StillOff)(IDvdControl *This);HRESULT ( *PauseOn)(IDvdControl *This);HRESULT ( *PauseOff)(IDvdControl *This);HRESULT ( *MenuLanguageSelect)(IDvdControl *This, LCID Language);HRESULT ( *AudioStreamChange)(IDvdControl *This, ULONG nAudio);HRESULT ( *SubpictureStreamChange)(IDvdControl *This, ULONG nSubPicture, BOOL bDisplay);HRESULT ( *AngleChange)(IDvdControl *This, ULONG ulAngle);HRESULT ( *ParentalLevelSelect)(IDvdControl *This, ULONG ulParentalLevel);HRESULT ( *ParentalCountrySelect)(IDvdControl *This, WORD wCountry);HRESULT ( *KaraokeAudioPresentationModeChange)(IDvdControl *This, ULONG ulMode);HRESULT ( *VideoModePreferrence)(IDvdControl *This, ULONG ulPreferredDisplayMode);HRESULT ( *SetRoot)(IDvdControl *This, LPCWSTR pszPath);HRESULT ( *MouseActivate)(IDvdControl *This, POINT point);HRESULT ( *MouseSelect)(IDvdControl *This, POINT point);HRESULT ( *ChapterPlayAutoStop)(IDvdControl *This, ULONG ulTitle, ULONG ulChapter, ULONG ulChaptersToPlay);};
struct _PROPSHEETPAGEW {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED __anonymous0;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous1;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;};
struct IXMLParserVtbl {HRESULT ( *QueryInterface)(IXMLParser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLParser *This);ULONG ( *Release)(IXMLParser *This);HRESULT ( *SetFactory)(IXMLParser *This, IXMLNodeFactory *pNodeFactory);HRESULT ( *GetFactory)(IXMLParser *This, IXMLNodeFactory **ppNodeFactory);HRESULT ( *Abort)(IXMLParser *This, BSTR bstrErrorInfo);ULONG ( *GetLineNumber)(IXMLParser *This);ULONG ( *GetLinePosition)(IXMLParser *This);ULONG ( *GetAbsolutePosition)(IXMLParser *This);HRESULT ( *GetLineBuffer)(IXMLParser *This,  WCHAR **ppwcBuf, ULONG *pulLen, ULONG *pulStartPos);HRESULT ( *GetLastError)(IXMLParser *This);HRESULT ( *GetErrorInfo)(IXMLParser *This, BSTR *pbstrErrorInfo);ULONG ( *GetFlags)(IXMLParser *This);HRESULT ( *GetURL)(IXMLParser *This,  WCHAR **ppwcBuf);HRESULT ( *SetURL)(IXMLParser *This,  WCHAR *pszBaseUrl,  WCHAR *pszRelativeUrl, BOOL fAsync);HRESULT ( *Load)(IXMLParser *This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);HRESULT ( *SetInput)(IXMLParser *This, IUnknown *pStm);HRESULT ( *PushData)(IXMLParser *This,  char *pData, ULONG ulChars, BOOL fLastBuffer);HRESULT ( *LoadDTD)(IXMLParser *This,  WCHAR *pszBaseUrl,  WCHAR *pszRelativeUrl);HRESULT ( *LoadEntity)(IXMLParser *This,  WCHAR *pszBaseUrl,  WCHAR *pszRelativeUrl, BOOL fpe);HRESULT ( *ParseEntity)(IXMLParser *This,  WCHAR *pwcText, ULONG ulLen, BOOL fpe);HRESULT ( *ExpandEntity)(IXMLParser *This,  WCHAR *pwcText, ULONG ulLen);HRESULT ( *SetRoot)(IXMLParser *This, PVOID pRoot);HRESULT ( *GetRoot)(IXMLParser *This, PVOID *ppRoot);HRESULT ( *Run)(IXMLParser *This, int lChars);HRESULT ( *GetParserState)(IXMLParser *This);HRESULT ( *Suspend)(IXMLParser *This);HRESULT ( *Reset)(IXMLParser *This);HRESULT ( *SetFlags)(IXMLParser *This, ULONG iFlags);HRESULT ( *SetSecureBaseURL)(IXMLParser *This,  WCHAR *pszBaseUrl);HRESULT ( *GetSecureBaseURL)(IXMLParser *This,  WCHAR **ppwcBuf);};
struct IStorageVtbl {HRESULT ( *QueryInterface)(IStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStorage *This);ULONG ( *Release)(IStorage *This);HRESULT ( *CreateStream)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);HRESULT ( *OpenStream)(IStorage *This,  OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);HRESULT ( *CreateStorage)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD dwStgFmt, DWORD reserved2, IStorage **ppstg);HRESULT ( *OpenStorage)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);HRESULT ( *CopyTo)(IStorage *This, DWORD ciidExclude,  IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);HRESULT ( *MoveElementTo)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgDest,  OLECHAR *pwcsNewName, DWORD grfFlags);HRESULT ( *Commit)(IStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStorage *This);HRESULT ( *EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);HRESULT ( *DestroyElement)(IStorage *This,  OLECHAR *pwcsName);HRESULT ( *RenameElement)(IStorage *This,  OLECHAR *pwcsOldName,  OLECHAR *pwcsNewName);HRESULT ( *SetElementTimes)(IStorage *This,  OLECHAR *pwcsName,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IStorage *This,  CLSID * clsid);HRESULT ( *SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);HRESULT ( *Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IVoIPMgrVtbl {HRESULT ( *QueryInterface)(IVoIPMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVoIPMgr *This);ULONG ( *Release)(IVoIPMgr *This);HRESULT ( *Initialize)(IVoIPMgr *This, IVoIPUI *piUI, VoIPMgrParameters *pvmpMgrParams);HRESULT ( *Uninitialize)(IVoIPMgr *This);HRESULT ( *Call)(IVoIPMgr *This, BSTR bstrURI, IVoIPCurrentCall **ppiCurrentCall);HRESULT ( *Reregister)(IVoIPMgr *This, VoIPMgrParameters *pvmpMgrParams);HRESULT ( *get_CallLogDB)(IVoIPMgr *This, IVoIPCallLogDB **piCallLogDB);HRESULT ( *get_CallerInfoDB)(IVoIPMgr *This, IVoIPCallerInfoDB **ppiCallerInfoDB);HRESULT ( *get_RTCClient)(IVoIPMgr *This, IRTCClient **ppiRTCClient);HRESULT ( *SendDTMF)(IVoIPMgr *This, RTC_DTMF rtcdtmf);HRESULT ( *get_CurrentCallEnumerator)(IVoIPMgr *This, IVoIPCurrentCallEnumerator **ppiEnum);HRESULT ( *get_SpeakerVolume)(IVoIPMgr *This, float *pfpVolume);HRESULT ( *put_SpeakerVolume)(IVoIPMgr *This, float fpVolume);HRESULT ( *get_MicrophoneVolume)(IVoIPMgr *This, float *pfpVolume);HRESULT ( *put_MicrophoneVolume)(IVoIPMgr *This, float fpVolume);HRESULT ( *get_SpeakerMute)(IVoIPMgr *This, VARIANT_BOOL *pfMuted);HRESULT ( *put_SpeakerMute)(IVoIPMgr *This, VARIANT_BOOL fMuted);HRESULT ( *get_MicrophoneMute)(IVoIPMgr *This, VARIANT_BOOL *pfMuted);HRESULT ( *put_MicrophoneMute)(IVoIPMgr *This, VARIANT_BOOL fMuted);HRESULT ( *get_RingTone)(IVoIPMgr *This, BSTR *pbstrRingTone);HRESULT ( *put_RingTone)(IVoIPMgr *This, BSTR bstrRingTone);HRESULT ( *get_ActiveCurrentCall)(IVoIPMgr *This, IVoIPCurrentCall **ppiCall);HRESULT ( *put_MissedCallTimeout)(IVoIPMgr *This, UINT nTimeoutMilliseconds);HRESULT ( *get_MissedCallTimeout)(IVoIPMgr *This, UINT *pnTimeoutMilliseconds);HRESULT ( *get_MyURI)(IVoIPMgr *This, BSTR *pbstrURI);HRESULT ( *get_MyServer)(IVoIPMgr *This, BSTR *pbstrServer);HRESULT ( *get_Parameters)(IVoIPMgr *This, VoIPMgrParameters *pvmpUsed);HRESULT ( *get_State)(IVoIPMgr *This, VoIPManagerState *pulState);HRESULT ( *put_AutoForwardURI)(IVoIPMgr *This, BSTR bstrAutoForward);HRESULT ( *get_AutoForwardURI)(IVoIPMgr *This, BSTR *pbstrAutoForward);HRESULT ( *PlayProgressTone)(IVoIPMgr *This, VoIPProgressTone vpt);HRESULT ( *StopProgressTone)(IVoIPMgr *This);};
struct tagPD {DWORD cbStruct;HWND hwndOwner;HDC hdc;DWORD dwFlags;RECT rcMinMargin;RECT rcMargin;HINSTANCE hinst;LPARAM lCustData;LPPRINTHOOKPROC pfnPrintHook;LPCTSTR pszPrintTemplateName;HGLOBAL hglbPrintTemplateResource;};
struct IShellNotificationCallbackVtbl {HRESULT ( *QueryInterface)(IShellNotificationCallback *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellNotificationCallback *This);ULONG ( *Release)(IShellNotificationCallback *This);HRESULT ( *OnShow)(IShellNotificationCallback *This, DWORD dwID, POINT pt, LPARAM lParam);HRESULT ( *OnCommandSelected)(IShellNotificationCallback *This, DWORD dwID, WORD wCmdID);HRESULT ( *OnLinkSelected)(IShellNotificationCallback *This, DWORD dwID, LPCTSTR pszLink, LPARAM lParam);HRESULT ( *OnDismiss)(IShellNotificationCallback *This, DWORD dwID, BOOL fTimeout, LPARAM lParam);};
struct IActiveXSafetyProviderVtbl {HRESULT ( *QueryInterface)(IActiveXSafetyProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveXSafetyProvider *This);ULONG ( *Release)(IActiveXSafetyProvider *This);HRESULT ( *TreatControlAsUntrusted)(IActiveXSafetyProvider *This, BOOL fTreatAsTUntrusted);HRESULT ( *IsControlUntrusted)(IActiveXSafetyProvider *This, BOOL *pfIsUntrusted);HRESULT ( *SetSecurityManager)(IActiveXSafetyProvider *This, IInternetSecurityManager *pSecurityManager);HRESULT ( *SetDocumentURLA)(IActiveXSafetyProvider *This, LPCSTR szDocumentURL);HRESULT ( *SetDocumentURLW)(IActiveXSafetyProvider *This, LPCWSTR szDocumentURL);HRESULT ( *ResetToDefaults)(IActiveXSafetyProvider *This);HRESULT ( *SafeDllRegisterServerA)(IActiveXSafetyProvider *This, LPCSTR szServerName);HRESULT ( *SafeDllRegisterServerW)(IActiveXSafetyProvider *This, LPCWSTR szServerName);HRESULT ( *SafeDllUnregisterServerA)(IActiveXSafetyProvider *This, LPCSTR szServerName);HRESULT ( *SafeDllUnregisterServerW)(IActiveXSafetyProvider *This, LPCWSTR szServerName);HRESULT ( *SafeGetClassObject)(IActiveXSafetyProvider *This,  CLSID * rclsid, DWORD dwClsContext, LPVOID reserved,  IID * riid, IUnknown **ppObj);HRESULT ( *SafeCreateInstance)(IActiveXSafetyProvider *This,  CLSID * rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext,  IID * riid, IUnknown **pObj);};
struct IInternetZoneManagerVtbl {HRESULT ( *QueryInterface)(IInternetZoneManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetZoneManager *This);ULONG ( *Release)(IInternetZoneManager *This);HRESULT ( *GetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *SetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *GetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *GetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *PromptAction)(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);HRESULT ( *LogAction)(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);HRESULT ( *CreateZoneEnumerator)(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);HRESULT ( *GetZoneAt)(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);HRESULT ( *DestroyZoneEnumerator)(IInternetZoneManager *This, DWORD dwEnum);HRESULT ( *CopyTemplatePoliciesToZone)(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);};
struct IPerPropertyBrowsingVtbl {HRESULT ( *QueryInterface)(IPerPropertyBrowsing *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPerPropertyBrowsing *This);ULONG ( *Release)(IPerPropertyBrowsing *This);HRESULT ( *GetDisplayString)(IPerPropertyBrowsing *This, DISPID dispID, BSTR *pBstr);HRESULT ( *MapPropertyToPage)(IPerPropertyBrowsing *This, DISPID dispID, CLSID *pClsid);HRESULT ( *GetPredefinedStrings)(IPerPropertyBrowsing *This, DISPID dispID, CALPOLESTR *pCaStringsOut, CADWORD *pCaCookiesOut);HRESULT ( *GetPredefinedValue)(IPerPropertyBrowsing *This, DISPID dispID, DWORD dwCookie, VARIANT *pVarOut);};
struct ISubscriptionMgr2Vtbl {HRESULT ( *QueryInterface)(ISubscriptionMgr2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionMgr2 *This);ULONG ( *Release)(ISubscriptionMgr2 *This);HRESULT ( *DeleteSubscription)(ISubscriptionMgr2 *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *UpdateSubscription)(ISubscriptionMgr2 *This, LPCWSTR pwszURL);HRESULT ( *UpdateAll)(ISubscriptionMgr2 *This);HRESULT ( *IsSubscribed)(ISubscriptionMgr2 *This, LPCWSTR pwszURL, BOOL *pfSubscribed);HRESULT ( *GetSubscriptionInfo)(ISubscriptionMgr2 *This, LPCWSTR pwszURL, SUBSCRIPTIONINFO *pInfo);HRESULT ( *GetDefaultInfo)(ISubscriptionMgr2 *This, SUBSCRIPTIONTYPE subType, SUBSCRIPTIONINFO *pInfo);HRESULT ( *ShowSubscriptionProperties)(ISubscriptionMgr2 *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *CreateSubscription)(ISubscriptionMgr2 *This, HWND hwnd, LPCWSTR pwszURL, LPCWSTR pwszFriendlyName, DWORD dwFlags, SUBSCRIPTIONTYPE subsType, SUBSCRIPTIONINFO *pInfo);HRESULT ( *GetItemFromURL)(ISubscriptionMgr2 *This, LPCWSTR pwszURL, ISubscriptionItem **ppSubscriptionItem);HRESULT ( *GetItemFromCookie)(ISubscriptionMgr2 *This,  SUBSCRIPTIONCOOKIE *pSubscriptionCookie, ISubscriptionItem **ppSubscriptionItem);HRESULT ( *GetSubscriptionRunState)(ISubscriptionMgr2 *This, DWORD dwNumCookies,  SUBSCRIPTIONCOOKIE *pCookies, DWORD *pdwRunState);HRESULT ( *EnumSubscriptions)(ISubscriptionMgr2 *This, DWORD dwFlags, IEnumSubscription **ppEnumSubscriptions);HRESULT ( *UpdateItems)(ISubscriptionMgr2 *This, DWORD dwFlags, DWORD dwNumCookies,  SUBSCRIPTIONCOOKIE *pCookies);HRESULT ( *AbortItems)(ISubscriptionMgr2 *This, DWORD dwNumCookies,  SUBSCRIPTIONCOOKIE *pCookies);HRESULT ( *AbortAll)(ISubscriptionMgr2 *This);};
struct INetCfgComponentVtbl {HRESULT ( *QueryInterface)(INetCfgComponent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INetCfgComponent *This);ULONG ( *Release)(INetCfgComponent *This);HRESULT ( *GetDisplayName)(INetCfgComponent *This, LPWSTR *ppszwDisplayName);HRESULT ( *SetDisplayName)(INetCfgComponent *This, LPCWSTR pszwDisplayName);HRESULT ( *GetHelpText)(INetCfgComponent *This, LPWSTR *pszwHelpText);HRESULT ( *GetId)(INetCfgComponent *This, LPWSTR *ppszwId);HRESULT ( *GetCharacteristics)(INetCfgComponent *This, LPDWORD pdwCharacteristics);HRESULT ( *GetInstanceGuid)(INetCfgComponent *This, GUID *pGuid);HRESULT ( *GetPnpDevNodeId)(INetCfgComponent *This, LPWSTR *ppszwDevNodeId);HRESULT ( *GetClassGuid)(INetCfgComponent *This, GUID *pGuid);HRESULT ( *GetBindName)(INetCfgComponent *This, LPWSTR *ppszwBindName);HRESULT ( *GetDeviceStatus)(INetCfgComponent *This, ULONG *pulStatus);HRESULT ( *OpenParamKey)(INetCfgComponent *This, HKEY *phkey);HRESULT ( *RaisePropertyUi)(INetCfgComponent *This, HWND hwndParent, DWORD dwFlags, IUnknown *punkContext);};
struct IMarkupPointer2Vtbl {HRESULT ( *QueryInterface)(IMarkupPointer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupPointer2 *This);ULONG ( *Release)(IMarkupPointer2 *This);HRESULT ( *OwningDoc)(IMarkupPointer2 *This, IHTMLDocument2 **ppDoc);HRESULT ( *Gravity)(IMarkupPointer2 *This, POINTER_GRAVITY *pGravity);HRESULT ( *SetGravity)(IMarkupPointer2 *This, POINTER_GRAVITY Gravity);HRESULT ( *Cling)(IMarkupPointer2 *This, BOOL *pfCling);HRESULT ( *SetCling)(IMarkupPointer2 *This, BOOL fCLing);HRESULT ( *Unposition)(IMarkupPointer2 *This);HRESULT ( *IsPositioned)(IMarkupPointer2 *This, BOOL *pfPositioned);HRESULT ( *GetContainer)(IMarkupPointer2 *This, IMarkupContainer **ppContainer);HRESULT ( *MoveAdjacentToElement)(IMarkupPointer2 *This, IHTMLElement *pElement, ELEMENT_ADJACENCY eAdj);HRESULT ( *MoveToPointer)(IMarkupPointer2 *This, IMarkupPointer *pPointer);HRESULT ( *MoveToContainer)(IMarkupPointer2 *This, IMarkupContainer *pContainer, BOOL fAtStart);HRESULT ( *Left)(IMarkupPointer2 *This, BOOL fMove, MARKUP_CONTEXT_TYPE *pContext, IHTMLElement **ppElement, int *pcch, OLECHAR *pchText);HRESULT ( *Right)(IMarkupPointer2 *This, BOOL fMove, MARKUP_CONTEXT_TYPE *pContext, IHTMLElement **ppElement, int *pcch, OLECHAR *pchText);HRESULT ( *CurrentScope)(IMarkupPointer2 *This, IHTMLElement **ppElemCurrent);HRESULT ( *IsLeftOf)(IMarkupPointer2 *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsLeftOfOrEqualTo)(IMarkupPointer2 *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsRightOf)(IMarkupPointer2 *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsRightOfOrEqualTo)(IMarkupPointer2 *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsEqualTo)(IMarkupPointer2 *This, IMarkupPointer *pPointerThat, BOOL *pfAreEqual);HRESULT ( *MoveUnit)(IMarkupPointer2 *This, MOVEUNIT_ACTION muAction);HRESULT ( *FindText)(IMarkupPointer2 *This, OLECHAR *pchFindText, DWORD dwFlags, IMarkupPointer *pIEndMatch, IMarkupPointer *pIEndSearch);HRESULT ( *IsAtWordBreak)(IMarkupPointer2 *This, BOOL *pfAtBreak);HRESULT ( *GetMarkupPosition)(IMarkupPointer2 *This, int *plMP);HRESULT ( *MoveToMarkupPosition)(IMarkupPointer2 *This, IMarkupContainer *pContainer, int lMP);HRESULT ( *MoveUnitBounded)(IMarkupPointer2 *This, MOVEUNIT_ACTION muAction, IMarkupPointer *pIBoundary);HRESULT ( *IsInsideURL)(IMarkupPointer2 *This, IMarkupPointer *pRight, BOOL *pfResult);HRESULT ( *MoveToContent)(IMarkupPointer2 *This, IHTMLElement *pIElement, BOOL fAtStart);};
struct IAccessControlVtbl {HRESULT ( *QueryInterface)(IAccessControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessControl *This);ULONG ( *Release)(IAccessControl *This);HRESULT ( *GrantAccessRights)(IAccessControl *This, PACTRL_ACCESSW pAccessList);HRESULT ( *SetAccessRights)(IAccessControl *This, PACTRL_ACCESSW pAccessList);HRESULT ( *SetOwner)(IAccessControl *This, PTRUSTEEW pOwner, PTRUSTEEW pGroup);HRESULT ( *RevokeAccessRights)(IAccessControl *This, LPWSTR lpProperty, ULONG cTrustees,TRUSTEEW  *    prgTrustees);HRESULT ( *GetAllAccessRights)(IAccessControl *This, LPWSTR lpProperty, PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList, PTRUSTEEW *ppOwner, PTRUSTEEW *ppGroup);HRESULT ( *IsAccessAllowed)(IAccessControl *This, PTRUSTEEW pTrustee, LPWSTR lpProperty, ACCESS_RIGHTS AccessRights, BOOL *pfAccessAllowed);};
struct IMarkupPointerVtbl {HRESULT ( *QueryInterface)(IMarkupPointer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarkupPointer *This);ULONG ( *Release)(IMarkupPointer *This);HRESULT ( *OwningDoc)(IMarkupPointer *This, IHTMLDocument2 **ppDoc);HRESULT ( *Gravity)(IMarkupPointer *This, POINTER_GRAVITY *pGravity);HRESULT ( *SetGravity)(IMarkupPointer *This, POINTER_GRAVITY Gravity);HRESULT ( *Cling)(IMarkupPointer *This, BOOL *pfCling);HRESULT ( *SetCling)(IMarkupPointer *This, BOOL fCLing);HRESULT ( *Unposition)(IMarkupPointer *This);HRESULT ( *IsPositioned)(IMarkupPointer *This, BOOL *pfPositioned);HRESULT ( *GetContainer)(IMarkupPointer *This, IMarkupContainer **ppContainer);HRESULT ( *MoveAdjacentToElement)(IMarkupPointer *This, IHTMLElement *pElement, ELEMENT_ADJACENCY eAdj);HRESULT ( *MoveToPointer)(IMarkupPointer *This, IMarkupPointer *pPointer);HRESULT ( *MoveToContainer)(IMarkupPointer *This, IMarkupContainer *pContainer, BOOL fAtStart);HRESULT ( *Left)(IMarkupPointer *This, BOOL fMove, MARKUP_CONTEXT_TYPE *pContext, IHTMLElement **ppElement, int *pcch, OLECHAR *pchText);HRESULT ( *Right)(IMarkupPointer *This, BOOL fMove, MARKUP_CONTEXT_TYPE *pContext, IHTMLElement **ppElement, int *pcch, OLECHAR *pchText);HRESULT ( *CurrentScope)(IMarkupPointer *This, IHTMLElement **ppElemCurrent);HRESULT ( *IsLeftOf)(IMarkupPointer *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsLeftOfOrEqualTo)(IMarkupPointer *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsRightOf)(IMarkupPointer *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsRightOfOrEqualTo)(IMarkupPointer *This, IMarkupPointer *pPointerThat, BOOL *pfResult);HRESULT ( *IsEqualTo)(IMarkupPointer *This, IMarkupPointer *pPointerThat, BOOL *pfAreEqual);HRESULT ( *MoveUnit)(IMarkupPointer *This, MOVEUNIT_ACTION muAction);HRESULT ( *FindText)(IMarkupPointer *This, OLECHAR *pchFindText, DWORD dwFlags, IMarkupPointer *pIEndMatch, IMarkupPointer *pIEndSearch);};
struct IPersistQueryWVtbl {HRESULT ( *QueryInterface)(IPersistQueryW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPersistQueryW *This);ULONG ( *Release)(IPersistQueryW *This);HRESULT ( *GetClassID)(IPersistQueryW *This, CLSID *pClassID);HRESULT ( *WriteString)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, LPCWSTR pValue);HRESULT ( *ReadString)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, LPWSTR pBuffer, INT cchBuffer);HRESULT ( *WriteInt)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, INT value);HRESULT ( *ReadInt)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, LPINT pValue);HRESULT ( *WriteStruct)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, LPVOID pStruct, DWORD cbStruct);HRESULT ( *ReadStruct)(IPersistQueryW *This, LPCWSTR pSection, LPCWSTR pValueName, LPVOID pStruct, DWORD cbStruct);HRESULT ( *Clear)(IPersistQueryW *This);};
struct ISoftDistExtVtbl {HRESULT ( *QueryInterface)(ISoftDistExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoftDistExt *This);ULONG ( *Release)(ISoftDistExt *This);HRESULT ( *ProcessSoftDist)(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);HRESULT ( *GetFirstCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *GetNextCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *AsyncInstallDistributionUnit)(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);};
struct IBaseFilterVtbl {HRESULT ( *QueryInterface)(IBaseFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBaseFilter *This);ULONG ( *Release)(IBaseFilter *This);HRESULT ( *GetClassID)(IBaseFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IBaseFilter *This);HRESULT ( *Pause)(IBaseFilter *This);HRESULT ( *Run)(IBaseFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IBaseFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IBaseFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IBaseFilter *This, IReferenceClock **pClock);HRESULT ( *EnumPins)(IBaseFilter *This, IEnumPins **ppEnum);HRESULT ( *FindPin)(IBaseFilter *This, LPCWSTR Id, IPin **ppPin);HRESULT ( *QueryFilterInfo)(IBaseFilter *This, FILTER_INFO *pInfo);HRESULT ( *JoinFilterGraph)(IBaseFilter *This, IFilterGraph *pGraph, LPCWSTR pName);HRESULT ( *QueryVendorInfo)(IBaseFilter *This, LPWSTR *pVendorInfo);};
struct IRTCSessionVtbl {HRESULT ( *QueryInterface)(IRTCSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSession *This);ULONG ( *Release)(IRTCSession *This);HRESULT ( *get_Client)(IRTCSession *This, IRTCClient **ppClient);HRESULT ( *get_State)(IRTCSession *This, RTC_SESSION_STATE *penState);HRESULT ( *get_Type)(IRTCSession *This, RTC_SESSION_TYPE *penType);HRESULT ( *get_Profile)(IRTCSession *This, IRTCProfile **ppProfile);HRESULT ( *get_Participants)(IRTCSession *This, IRTCCollection **ppCollection);HRESULT ( *Answer)(IRTCSession *This);HRESULT ( *Terminate)(IRTCSession *This, RTC_TERMINATE_REASON enReason);HRESULT ( *Redirect)(IRTCSession *This, RTC_SESSION_TYPE enType, BSTR bstrLocalPhoneURI, IRTCProfile *pProfile, int lFlags);HRESULT ( *AddParticipant)(IRTCSession *This, BSTR bstrAddress, BSTR bstrName, IRTCParticipant **ppParticipant);HRESULT ( *RemoveParticipant)(IRTCSession *This, IRTCParticipant *pParticipant);HRESULT ( *EnumerateParticipants)(IRTCSession *This, IRTCEnumParticipants **ppEnum);HRESULT ( *get_CanAddParticipants)(IRTCSession *This, VARIANT_BOOL *pfCanAdd);HRESULT ( *get_RedirectedUserURI)(IRTCSession *This, BSTR *pbstrUserURI);HRESULT ( *get_RedirectedUserName)(IRTCSession *This, BSTR *pbstrUserName);HRESULT ( *NextRedirectedUser)(IRTCSession *This);HRESULT ( *SendMessageA)(IRTCSession *This, BSTR bstrMessageHeader, BSTR bstrMessage, LONG_PTR lCookie);HRESULT ( *SendMessageStatus)(IRTCSession *This, RTC_MESSAGING_USER_STATUS enUserStatus, LONG_PTR lCookie);HRESULT ( *AddStream)(IRTCSession *This, int lMediaType, LONG_PTR lCookie);HRESULT ( *RemoveStream)(IRTCSession *This, int lMediaType, LONG_PTR lCookie);HRESULT ( *put_EncryptionKey)(IRTCSession *This, int lMediaType, BSTR EncryptionKey);};
struct _FIREWALL_RULE {DWORD dwSize;HRULE hRule;DWORD dwFlags;DWORD dwMask;LPWSTR wszDescription;FW_IP_ADDRESS PrivateHost;FW_IP_ADDRESS PublicHost;_FIREWALL_RULE___973FCA0161B39F61E7428A3C8AFC48CB __anonymous0;INT Protocol;FW_ACTIONS Action;WORD wHourStart;WORD wHourEnd;WORD wDayOfWeek;WORD wDay;WORD wMonth;union {_FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___1F732941DC73F2F4B18392F9D66856DC __anonymous1;_FIREWALL_RULE___A752DEA0DA53D32A610DEE5E5365ABC0___C3A437D225B8ED983937C7D8822FFF10 __anonymous2;};};
struct IDXTLabelVtbl {HRESULT ( *QueryInterface)(IDXTLabel *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXTLabel *This);ULONG ( *Release)(IDXTLabel *This);HRESULT ( *SetFontHandle)(IDXTLabel *This, HFONT hFont);HRESULT ( *GetFontHandle)(IDXTLabel *This, HFONT *phFont);HRESULT ( *SetTextString)(IDXTLabel *This, LPCWSTR pString);HRESULT ( *GetTextString)(IDXTLabel *This, LPWSTR *ppString);HRESULT ( *GetFillColor)(IDXTLabel *This, DXSAMPLE *pVal);HRESULT ( *SetFillColor)(IDXTLabel *This, DXSAMPLE newVal);HRESULT ( *GetBackgroundColor)(IDXTLabel *This, DXSAMPLE *pVal);HRESULT ( *SetBackgroundColor)(IDXTLabel *This, DXSAMPLE newVal);HRESULT ( *GetTexturePosition)(IDXTLabel *This, int *px, int *py);HRESULT ( *SetTexturePosition)(IDXTLabel *This, int x, int y);HRESULT ( *GetMatrix)(IDXTLabel *This, PDX2DXFORM pXform);HRESULT ( *SetMatrix)(IDXTLabel *This,  PDX2DXFORM pXform);HRESULT ( *SetLogfont)(IDXTLabel *This,  LOGFONTA *plf, DWORD dwFlags);HRESULT ( *GetLogfont)(IDXTLabel *This, LOGFONTA *plf, DWORD dwFlags);HRESULT ( *ExecuteWithRasterizer)(IDXTLabel *This, IDXRasterizer *pRasterizer,  DXBNDS *pClipBnds,  DXVEC *pPlacement);HRESULT ( *GetBaselineOffset)(IDXTLabel *This, int *px, int *py, int *pdx, int *pdy);};
struct IImgCtxVtbl {HRESULT ( *QueryInterface)(IImgCtx *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IImgCtx *This);ULONG ( *Release)(IImgCtx *This);HRESULT ( *Load)(IImgCtx *This, LPCWSTR pszUrl, DWORD dwFlags);HRESULT ( *SelectChanges)(IImgCtx *This, ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal);HRESULT ( *SetCallback)(IImgCtx *This, PFNIMGCTXCALLBACK pfn, void *pvPrivateData);HRESULT ( *Disconnect)(IImgCtx *This);HRESULT ( *GetUpdateRects)(IImgCtx *This, struct tagRECT *prc, struct tagRECT *prcImg, int *pcrc);HRESULT ( *GetStateInfo)(IImgCtx *This, ULONG *pulState, struct tagSIZE *psize, BOOL fClearChanges);HRESULT ( *GetPalette)(IImgCtx *This, HPALETTE *phpal);HRESULT ( *Draw)(IImgCtx *This, HDC hdc, struct tagRECT *prcBounds);HRESULT ( *Tile)(IImgCtx *This, HDC hdc, struct tagPOINT *pptBackOrg, struct tagRECT *prcClip, struct tagSIZE *psize);HRESULT ( *StretchBlt)(IImgCtx *This, HDC hdc, int dstX, int dstY, int dstXE, int dstYE, int srcX, int srcY, int srcXE, int srcYE, DWORD dwROP);};
struct IDX2DVtbl {HRESULT ( *QueryInterface)(IDX2D *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDX2D *This);ULONG ( *Release)(IDX2D *This);HRESULT ( *SetTransformFactory)(IDX2D *This, IDXTransformFactory *pTransFact);HRESULT ( *GetTransformFactory)(IDX2D *This, IDXTransformFactory **ppTransFact);HRESULT ( *SetSurface)(IDX2D *This, IUnknown *pSurface);HRESULT ( *GetSurface)(IDX2D *This,  IID * riid, void **ppSurface);HRESULT ( *SetClipRect)(IDX2D *This, RECT *pClipRect);HRESULT ( *GetClipRect)(IDX2D *This, RECT *pClipRect);HRESULT ( *SetWorldTransform)(IDX2D *This,  DX2DXFORM *pXform);HRESULT ( *GetWorldTransform)(IDX2D *This, DX2DXFORM *pXform);HRESULT ( *SetPen)(IDX2D *This,  DXPEN *pPen);HRESULT ( *GetPen)(IDX2D *This, DXPEN *pPen);HRESULT ( *SetBrush)(IDX2D *This,  DXBRUSH *pBrush);HRESULT ( *GetBrush)(IDX2D *This, DXBRUSH *pBrush);HRESULT ( *SetBackgroundBrush)(IDX2D *This,  DXBRUSH *pBrush);HRESULT ( *GetBackgroundBrush)(IDX2D *This, DXBRUSH *pBrush);HRESULT ( *SetFont)(IDX2D *This, HFONT hFont);HRESULT ( *GetFont)(IDX2D *This, HFONT *phFont);HRESULT ( *Blt)(IDX2D *This, IUnknown *punkSrc,  RECT *pSrcRect,  POINT *pDest);HRESULT ( *AAPolyDraw)(IDX2D *This,  DXFPOINT *pPos,  BYTE *pTypes, ULONG ulCount, ULONG SubSampRes, DWORD dwFlags);HRESULT ( *AAText)(IDX2D *This, DXFPOINT Pos, LPWSTR pString, ULONG ulCount, DWORD dwFlags);HRESULT ( *SetRadialGradientBrush)(IDX2D *This, double *rgdblOffsets, double *rgdblColors, ULONG ulCount, double dblOpacity, DX2DXFORM *pXform, DWORD dwFlags);HRESULT ( *SetLinearGradientBrush)(IDX2D *This, double *rgdblOffsets, double *rgdblColors, ULONG ulCount, double dblOpacity, DX2DXFORM *pXform, DWORD dwFlags);};
struct tagPSDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCWSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct _1FC20381981E06D3B4F68D6006129906 {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPWSTR lpstrGroupNames;DWORD nMaxGroupNames;LPWSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPWSTR lpstrRdr;DWORD nMaxRdr;LPWSTR lpstrCard;DWORD nMaxCard;LPCWSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCW lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct ISyncMgrSynchronizeCallbackVtbl {HRESULT ( *QueryInterface)(ISyncMgrSynchronizeCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncMgrSynchronizeCallback *This);ULONG ( *Release)(ISyncMgrSynchronizeCallback *This);HRESULT ( *ShowPropertiesCompleted)(ISyncMgrSynchronizeCallback *This, HRESULT hr);HRESULT ( *PrepareForSyncCompleted)(ISyncMgrSynchronizeCallback *This, HRESULT hr);HRESULT ( *SynchronizeCompleted)(ISyncMgrSynchronizeCallback *This, HRESULT hr);HRESULT ( *ShowErrorCompleted)(ISyncMgrSynchronizeCallback *This, HRESULT hr, ULONG cbNumItems, SYNCMGRITEMID *pItemIDs);HRESULT ( *EnableModeless)(ISyncMgrSynchronizeCallback *This, BOOL fEnable);HRESULT ( *Progress)(ISyncMgrSynchronizeCallback *This, REFSYNCMGRITEMID pItemID, LPSYNCMGRPROGRESSITEM lpSyncProgressItem);HRESULT ( *LogError)(ISyncMgrSynchronizeCallback *This, DWORD dwErrorLevel, LPCWSTR lpcErrorText, LPSYNCMGRLOGERRORINFO lpSyncLogError);HRESULT ( *DeleteLogError)(ISyncMgrSynchronizeCallback *This, REFSYNCMGRERRORID ErrorID, DWORD dwReserved);HRESULT ( *EstablishConnection)(ISyncMgrSynchronizeCallback *This, LPCWSTR lpwszConnection, DWORD dwReserved);};
struct IAMMultiMediaStreamVtbl {HRESULT ( *QueryInterface)(IAMMultiMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMultiMediaStream *This);ULONG ( *Release)(IAMMultiMediaStream *This);HRESULT ( *GetInformation)(IAMMultiMediaStream *This, DWORD *pdwFlags, STREAM_TYPE *pStreamType);HRESULT ( *GetMediaStream)(IAMMultiMediaStream *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IAMMultiMediaStream *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *GetState)(IAMMultiMediaStream *This, STREAM_STATE *pCurrentState);HRESULT ( *SetState)(IAMMultiMediaStream *This, STREAM_STATE NewState);HRESULT ( *GetTime)(IAMMultiMediaStream *This, STREAM_TIME *pCurrentTime);HRESULT ( *GetDuration)(IAMMultiMediaStream *This, STREAM_TIME *pDuration);HRESULT ( *Seek)(IAMMultiMediaStream *This, STREAM_TIME SeekTime);HRESULT ( *GetEndOfStreamEventHandle)(IAMMultiMediaStream *This, HANDLE *phEOS);HRESULT ( *Initialize)(IAMMultiMediaStream *This, STREAM_TYPE StreamType, DWORD dwFlags, IGraphBuilder *pFilterGraph);HRESULT ( *GetFilterGraph)(IAMMultiMediaStream *This, IGraphBuilder **ppGraphBuilder);HRESULT ( *GetFilter)(IAMMultiMediaStream *This, IMediaStreamFilter **ppFilter);HRESULT ( *AddMediaStream)(IAMMultiMediaStream *This, IUnknown *pStreamObject,  MSPID *PurposeId, DWORD dwFlags, IMediaStream **ppNewStream);HRESULT ( *OpenFile)(IAMMultiMediaStream *This, LPCWSTR pszFileName, DWORD dwFlags);HRESULT ( *OpenMoniker)(IAMMultiMediaStream *This, IBindCtx *pCtx, IMoniker *pMoniker, DWORD dwFlags);HRESULT ( *Render)(IAMMultiMediaStream *This, DWORD dwFlags);};
struct IScheduledWorkItemVtbl {HRESULT ( *QueryInterface)(IScheduledWorkItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScheduledWorkItem *This);ULONG ( *Release)(IScheduledWorkItem *This);HRESULT ( *CreateTrigger)(IScheduledWorkItem *This, WORD *piNewTrigger, ITaskTrigger **ppTrigger);HRESULT ( *DeleteTrigger)(IScheduledWorkItem *This, WORD iTrigger);HRESULT ( *GetTriggerCount)(IScheduledWorkItem *This, WORD *pwCount);HRESULT ( *GetTrigger)(IScheduledWorkItem *This, WORD iTrigger, ITaskTrigger **ppTrigger);HRESULT ( *GetTriggerString)(IScheduledWorkItem *This, WORD iTrigger, LPWSTR *ppwszTrigger);HRESULT ( *GetRunTimes)(IScheduledWorkItem *This,  LPSYSTEMTIME pstBegin,  LPSYSTEMTIME pstEnd, WORD *pCount, LPSYSTEMTIME *rgstTaskTimes);HRESULT ( *GetNextRunTime)(IScheduledWorkItem *This, SYSTEMTIME *pstNextRun);HRESULT ( *SetIdleWait)(IScheduledWorkItem *This, WORD wIdleMinutes, WORD wDeadlineMinutes);HRESULT ( *GetIdleWait)(IScheduledWorkItem *This, WORD *pwIdleMinutes, WORD *pwDeadlineMinutes);HRESULT ( *Run)(IScheduledWorkItem *This);HRESULT ( *Terminate)(IScheduledWorkItem *This);HRESULT ( *EditWorkItem)(IScheduledWorkItem *This, HWND hParent, DWORD dwReserved);HRESULT ( *GetMostRecentRunTime)(IScheduledWorkItem *This, SYSTEMTIME *pstLastRun);HRESULT ( *GetStatus)(IScheduledWorkItem *This, HRESULT *phrStatus);HRESULT ( *GetExitCode)(IScheduledWorkItem *This, DWORD *pdwExitCode);HRESULT ( *SetComment)(IScheduledWorkItem *This, LPCWSTR pwszComment);HRESULT ( *GetComment)(IScheduledWorkItem *This, LPWSTR *ppwszComment);HRESULT ( *SetCreator)(IScheduledWorkItem *This, LPCWSTR pwszCreator);HRESULT ( *GetCreator)(IScheduledWorkItem *This, LPWSTR *ppwszCreator);HRESULT ( *SetWorkItemData)(IScheduledWorkItem *This, WORD cbData,BYTE  *    rgbData);HRESULT ( *GetWorkItemData)(IScheduledWorkItem *This, WORD *pcbData, BYTE **prgbData);HRESULT ( *SetErrorRetryCount)(IScheduledWorkItem *This, WORD wRetryCount);HRESULT ( *GetErrorRetryCount)(IScheduledWorkItem *This, WORD *pwRetryCount);HRESULT ( *SetErrorRetryInterval)(IScheduledWorkItem *This, WORD wRetryInterval);HRESULT ( *GetErrorRetryInterval)(IScheduledWorkItem *This, WORD *pwRetryInterval);HRESULT ( *SetFlags)(IScheduledWorkItem *This, DWORD dwFlags);HRESULT ( *GetFlags)(IScheduledWorkItem *This, DWORD *pdwFlags);HRESULT ( *SetAccountInformation)(IScheduledWorkItem *This, LPCWSTR pwszAccountName, LPCWSTR pwszPassword);HRESULT ( *GetAccountInformation)(IScheduledWorkItem *This, LPWSTR *ppwszAccountName);};
struct _IP_ADAPTER_ADDRESSES {_IP_ADAPTER_ADDRESSES___7E29A655D09B4D37272EE4F766D62835 __anonymous0;struct _IP_ADAPTER_ADDRESSES *Next;PCHAR AdapterName;PIP_ADAPTER_UNICAST_ADDRESS FirstUnicastAddress;PIP_ADAPTER_ANYCAST_ADDRESS FirstAnycastAddress;PIP_ADAPTER_MULTICAST_ADDRESS FirstMulticastAddress;PIP_ADAPTER_DNS_SERVER_ADDRESS FirstDnsServerAddress;PWCHAR DnsSuffix;PWCHAR Description;PWCHAR FriendlyName;BYTE PhysicalAddress[8];DWORD PhysicalAddressLength;DWORD Flags;DWORD Mtu;DWORD IfType;IF_OPER_STATUS OperStatus;DWORD Ipv6IfIndex;DWORD ZoneIndices[16];PIP_ADAPTER_PREFIX FirstPrefix;};
struct IProgressDialogVtbl {HRESULT ( *QueryInterface)(IProgressDialog *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IProgressDialog *This);ULONG ( *Release)(IProgressDialog *This);HRESULT ( *StartProgressDialog)(IProgressDialog *This, HWND hwndParent, IUnknown *punkEnableModless, DWORD dwFlags, LPCVOID pvResevered);HRESULT ( *StopProgressDialog)(IProgressDialog *This);HRESULT ( *SetTitle)(IProgressDialog *This, LPCWSTR pwzTitle);HRESULT ( *SetAnimation)(IProgressDialog *This, HINSTANCE hInstAnimation, UINT idAnimation);BOOL ( *HasUserCancelled)(IProgressDialog *This);HRESULT ( *SetProgress)(IProgressDialog *This, DWORD dwCompleted, DWORD dwTotal);HRESULT ( *SetProgress64)(IProgressDialog *This, ULONGLONG ullCompleted, ULONGLONG ullTotal);HRESULT ( *SetLine)(IProgressDialog *This, DWORD dwLineNum, LPCWSTR pwzString, BOOL fCompactPath, LPCVOID pvResevered);HRESULT ( *SetCancelMsg)(IProgressDialog *This, LPCWSTR pwzCancelMsg, LPCVOID pvResevered);HRESULT ( *Timer)(IProgressDialog *This, DWORD dwTimerAction, LPCVOID pvResevered);};
struct IPropertyUIVtbl {HRESULT ( *QueryInterface)(IPropertyUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyUI *This);ULONG ( *Release)(IPropertyUI *This);HRESULT ( *ParsePropertyName)(IPropertyUI *This, LPCWSTR pszName, FMTID *pfmtid, PROPID *ppid, ULONG *pchEaten);HRESULT ( *GetCannonicalName)(IPropertyUI *This,  FMTID * fmtid, PROPID pid, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetDisplayName)(IPropertyUI *This,  FMTID * fmtid, PROPID pid, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetPropertyDescription)(IPropertyUI *This,  FMTID * fmtid, PROPID pid, LPWSTR pwszText, DWORD cchText);HRESULT ( *GetDefaultWidth)(IPropertyUI *This,  FMTID * fmtid, PROPID pid, ULONG *pcxChars);HRESULT ( *GetFlags)(IPropertyUI *This,  FMTID * fmtid, PROPID pid, PROPERTYUI_FLAGS *pFlags);HRESULT ( *FormatForDisplay)(IPropertyUI *This,  FMTID * fmtid, PROPID pid,  VARIANT *pvar, PROPERTYUI_FORMAT_FLAGS flags, LPWSTR pwszText, DWORD cchText);};
struct IShellLinkWVtbl {HRESULT ( *QueryInterface)(IShellLinkW *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IShellLinkW *This);ULONG ( *Release)(IShellLinkW *This);HRESULT ( *GetPath)(IShellLinkW *This, LPWSTR pszFile, int cchMaxPath, WIN32_FIND_DATAW *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkW *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkW *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkW *This, LPWSTR pszName, int cchMaxName);HRESULT ( *SetDescription)(IShellLinkW *This, LPCWSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkW *This, LPWSTR pszDir, int cchMaxPath);HRESULT ( *SetWorkingDirectory)(IShellLinkW *This, LPCWSTR pszDir);HRESULT ( *GetArguments)(IShellLinkW *This, LPWSTR pszArgs, int cchMaxPath);HRESULT ( *SetArguments)(IShellLinkW *This, LPCWSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkW *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkW *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkW *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkW *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkW *This, LPWSTR pszIconPath, int cchIconPath, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkW *This, LPCWSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkW *This, LPCWSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkW *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkW *This, LPCWSTR pszFile);};
struct IFontVtbl {HRESULT ( *QueryInterface)(IFont *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFont *This);ULONG ( *Release)(IFont *This);HRESULT ( *get_Name)(IFont *This, BSTR *pName);HRESULT ( *put_Name)(IFont *This, BSTR name);HRESULT ( *get_Size)(IFont *This, CY *pSize);HRESULT ( *put_Size)(IFont *This, CY size);HRESULT ( *get_Bold)(IFont *This, BOOL *pBold);HRESULT ( *put_Bold)(IFont *This, BOOL bold);HRESULT ( *get_Italic)(IFont *This, BOOL *pItalic);HRESULT ( *put_Italic)(IFont *This, BOOL italic);HRESULT ( *get_Underline)(IFont *This, BOOL *pUnderline);HRESULT ( *put_Underline)(IFont *This, BOOL underline);HRESULT ( *get_Strikethrough)(IFont *This, BOOL *pStrikethrough);HRESULT ( *put_Strikethrough)(IFont *This, BOOL strikethrough);HRESULT ( *get_Weight)(IFont *This, SHORT *pWeight);HRESULT ( *put_Weight)(IFont *This, SHORT weight);HRESULT ( *get_Charset)(IFont *This, SHORT *pCharset);HRESULT ( *put_Charset)(IFont *This, SHORT charset);HRESULT ( *get_hFont)(IFont *This, HFONT *phFont);HRESULT ( *Clone)(IFont *This, IFont **ppFont);HRESULT ( *IsEqual)(IFont *This, IFont *pFontOther);HRESULT ( *SetRatio)(IFont *This, LONG cyLogical, LONG cyHimetric);HRESULT ( *QueryTextMetrics)(IFont *This, TEXTMETRICOLE *pTM);HRESULT ( *AddRefHfont)(IFont *This, HFONT hFont);HRESULT ( *ReleaseHfont)(IFont *This, HFONT hFont);HRESULT ( *SetHdc)(IFont *This, HDC hDC);};
struct ITaskVtbl {HRESULT ( *QueryInterface)(ITask *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITask *This);ULONG ( *Release)(ITask *This);HRESULT ( *CreateTrigger)(ITask *This, WORD *piNewTrigger, ITaskTrigger **ppTrigger);HRESULT ( *DeleteTrigger)(ITask *This, WORD iTrigger);HRESULT ( *GetTriggerCount)(ITask *This, WORD *pwCount);HRESULT ( *GetTrigger)(ITask *This, WORD iTrigger, ITaskTrigger **ppTrigger);HRESULT ( *GetTriggerString)(ITask *This, WORD iTrigger, LPWSTR *ppwszTrigger);HRESULT ( *GetRunTimes)(ITask *This,  LPSYSTEMTIME pstBegin,  LPSYSTEMTIME pstEnd, WORD *pCount, LPSYSTEMTIME *rgstTaskTimes);HRESULT ( *GetNextRunTime)(ITask *This, SYSTEMTIME *pstNextRun);HRESULT ( *SetIdleWait)(ITask *This, WORD wIdleMinutes, WORD wDeadlineMinutes);HRESULT ( *GetIdleWait)(ITask *This, WORD *pwIdleMinutes, WORD *pwDeadlineMinutes);HRESULT ( *Run)(ITask *This);HRESULT ( *Terminate)(ITask *This);HRESULT ( *EditWorkItem)(ITask *This, HWND hParent, DWORD dwReserved);HRESULT ( *GetMostRecentRunTime)(ITask *This, SYSTEMTIME *pstLastRun);HRESULT ( *GetStatus)(ITask *This, HRESULT *phrStatus);HRESULT ( *GetExitCode)(ITask *This, DWORD *pdwExitCode);HRESULT ( *SetComment)(ITask *This, LPCWSTR pwszComment);HRESULT ( *GetComment)(ITask *This, LPWSTR *ppwszComment);HRESULT ( *SetCreator)(ITask *This, LPCWSTR pwszCreator);HRESULT ( *GetCreator)(ITask *This, LPWSTR *ppwszCreator);HRESULT ( *SetWorkItemData)(ITask *This, WORD cbData,BYTE  *    rgbData);HRESULT ( *GetWorkItemData)(ITask *This, WORD *pcbData, BYTE **prgbData);HRESULT ( *SetErrorRetryCount)(ITask *This, WORD wRetryCount);HRESULT ( *GetErrorRetryCount)(ITask *This, WORD *pwRetryCount);HRESULT ( *SetErrorRetryInterval)(ITask *This, WORD wRetryInterval);HRESULT ( *GetErrorRetryInterval)(ITask *This, WORD *pwRetryInterval);HRESULT ( *SetFlags)(ITask *This, DWORD dwFlags);HRESULT ( *GetFlags)(ITask *This, DWORD *pdwFlags);HRESULT ( *SetAccountInformation)(ITask *This, LPCWSTR pwszAccountName, LPCWSTR pwszPassword);HRESULT ( *GetAccountInformation)(ITask *This, LPWSTR *ppwszAccountName);HRESULT ( *SetApplicationName)(ITask *This, LPCWSTR pwszApplicationName);HRESULT ( *GetApplicationName)(ITask *This, LPWSTR *ppwszApplicationName);HRESULT ( *SetParameters)(ITask *This, LPCWSTR pwszParameters);HRESULT ( *GetParameters)(ITask *This, LPWSTR *ppwszParameters);HRESULT ( *SetWorkingDirectory)(ITask *This, LPCWSTR pwszWorkingDirectory);HRESULT ( *GetWorkingDirectory)(ITask *This, LPWSTR *ppwszWorkingDirectory);HRESULT ( *SetPriority)(ITask *This, DWORD dwPriority);HRESULT ( *GetPriority)(ITask *This, DWORD *pdwPriority);HRESULT ( *SetTaskFlags)(ITask *This, DWORD dwFlags);HRESULT ( *GetTaskFlags)(ITask *This, DWORD *pdwFlags);HRESULT ( *SetMaxRunTime)(ITask *This, DWORD dwMaxRunTimeMS);HRESULT ( *GetMaxRunTime)(ITask *This, DWORD *pdwMaxRunTimeMS);};
struct OLEDBSimpleProviderVtbl {HRESULT ( *QueryInterface)(OLEDBSimpleProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(OLEDBSimpleProvider *This);ULONG ( *Release)(OLEDBSimpleProvider *This);HRESULT ( *getRowCount)(OLEDBSimpleProvider *This, DBROWCOUNT *pcRows);HRESULT ( *getColumnCount)(OLEDBSimpleProvider *This, DB_LORDINAL *pcColumns);HRESULT ( *getRWStatus)(OLEDBSimpleProvider *This, DBROWCOUNT iRow, DB_LORDINAL iColumn, OSPRW *prwStatus);HRESULT ( *getVariant)(OLEDBSimpleProvider *This, DBROWCOUNT iRow, DB_LORDINAL iColumn, OSPFORMAT format, VARIANT *pVar);HRESULT ( *setVariant)(OLEDBSimpleProvider *This, DBROWCOUNT iRow, DB_LORDINAL iColumn, OSPFORMAT format, VARIANT Var);HRESULT ( *getLocale)(OLEDBSimpleProvider *This, BSTR *pbstrLocale);HRESULT ( *deleteRows)(OLEDBSimpleProvider *This, DBROWCOUNT iRow, DBROWCOUNT cRows, DBROWCOUNT *pcRowsDeleted);HRESULT ( *insertRows)(OLEDBSimpleProvider *This, DBROWCOUNT iRow, DBROWCOUNT cRows, DBROWCOUNT *pcRowsInserted);HRESULT ( *find)(OLEDBSimpleProvider *This, DBROWCOUNT iRowStart, DB_LORDINAL iColumn, VARIANT val, OSPFIND findFlags, OSPCOMP compType, DBROWCOUNT *piRowFound);HRESULT ( *addOLEDBSimpleProviderListener)(OLEDBSimpleProvider *This, OLEDBSimpleProviderListener *pospIListener);HRESULT ( *removeOLEDBSimpleProviderListener)(OLEDBSimpleProvider *This, OLEDBSimpleProviderListener *pospIListener);HRESULT ( *isAsync)(OLEDBSimpleProvider *This, BOOL *pbAsynch);HRESULT ( *getEstimatedRows)(OLEDBSimpleProvider *This, DBROWCOUNT *piRows);HRESULT ( *stopTransfer)(OLEDBSimpleProvider *This);};
struct IMediaStreamFilterVtbl {HRESULT ( *QueryInterface)(IMediaStreamFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaStreamFilter *This);ULONG ( *Release)(IMediaStreamFilter *This);HRESULT ( *GetClassID)(IMediaStreamFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IMediaStreamFilter *This);HRESULT ( *Pause)(IMediaStreamFilter *This);HRESULT ( *Run)(IMediaStreamFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IMediaStreamFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IMediaStreamFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IMediaStreamFilter *This, IReferenceClock **pClock);HRESULT ( *EnumPins)(IMediaStreamFilter *This, IEnumPins **ppEnum);HRESULT ( *FindPin)(IMediaStreamFilter *This, LPCWSTR Id, IPin **ppPin);HRESULT ( *QueryFilterInfo)(IMediaStreamFilter *This, FILTER_INFO *pInfo);HRESULT ( *JoinFilterGraph)(IMediaStreamFilter *This, IFilterGraph *pGraph, LPCWSTR pName);HRESULT ( *QueryVendorInfo)(IMediaStreamFilter *This, LPWSTR *pVendorInfo);HRESULT ( *AddMediaStream)(IMediaStreamFilter *This, IAMMediaStream *pAMMediaStream);HRESULT ( *GetMediaStream)(IMediaStreamFilter *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IMediaStreamFilter *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *SupportSeeking)(IMediaStreamFilter *This, BOOL bRenderer);HRESULT ( *ReferenceTimeToStreamTime)(IMediaStreamFilter *This, REFERENCE_TIME *pTime);HRESULT ( *GetCurrentStreamTime)(IMediaStreamFilter *This, REFERENCE_TIME *pCurrentStreamTime);HRESULT ( *WaitUntil)(IMediaStreamFilter *This, REFERENCE_TIME WaitStreamTime);HRESULT ( *Flush)(IMediaStreamFilter *This, BOOL bCancelEOS);HRESULT ( *EndOfStream)(IMediaStreamFilter *This);};
struct ITransportCallbackVtbl {HRESULT ( *QueryInterface)(ITransportCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransportCallback *This);ULONG ( *Release)(ITransportCallback *This);HRESULT ( *OnTimeout)(ITransportCallback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(ITransportCallback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(ITransportCallback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(ITransportCallback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(ITransportCallback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(ITransportCallback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);};
struct IProviderAdminVtbl {HRESULT ( *QueryInterface)(IProviderAdmin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IProviderAdmin *This);ULONG ( *Release)(IProviderAdmin *This);HRESULT ( *GetLastError)(IProviderAdmin *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetProviderTable)(IProviderAdmin *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *CreateProvider)(IProviderAdmin *This, LPTSTR lpszProvider, ULONG cValues, LPSPropValue lpProps, ULONG ulUIParam, ULONG ulFlags, MAPIUID *lpUID);HRESULT ( *DeleteProvider)(IProviderAdmin *This, LPMAPIUID lpUID);HRESULT ( *OpenProfileSection)(IProviderAdmin *This, LPMAPIUID lpUID, LPCIID lpInterface, ULONG ulFlags, LPPROFSECT *lppProfSect);};
struct ISyncScheduleVtbl {HRESULT ( *QueryInterface)(ISyncSchedule *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISyncSchedule *This);ULONG ( *Release)(ISyncSchedule *This);HRESULT ( *GetFlags)(ISyncSchedule *This, DWORD *pdwFlags);HRESULT ( *SetFlags)(ISyncSchedule *This, DWORD dwFlags);HRESULT ( *GetConnection)(ISyncSchedule *This, DWORD *pcbSize, LPWSTR pwszConnectionName, DWORD *pdwConnType);HRESULT ( *SetConnection)(ISyncSchedule *This, LPCWSTR pwszConnectionName, DWORD dwConnType);HRESULT ( *GetScheduleName)(ISyncSchedule *This, DWORD *pcbSize, LPWSTR pwszScheduleName);HRESULT ( *SetScheduleName)(ISyncSchedule *This, LPCWSTR pwszScheduleName);HRESULT ( *GetScheduleCookie)(ISyncSchedule *This, SYNCSCHEDULECOOKIE *pSyncSchedCookie);HRESULT ( *SetAccountInformation)(ISyncSchedule *This, LPCWSTR pwszAccountName, LPCWSTR pwszPassword);HRESULT ( *GetAccountInformation)(ISyncSchedule *This, DWORD *pcbSize, LPWSTR pwszAccountName);HRESULT ( *GetTrigger)(ISyncSchedule *This, ITaskTrigger **ppTrigger);HRESULT ( *GetNextRunTime)(ISyncSchedule *This, SYSTEMTIME *pstNextRun);HRESULT ( *GetMostRecentRunTime)(ISyncSchedule *This, SYSTEMTIME *pstRecentRun);HRESULT ( *EditSyncSchedule)(ISyncSchedule *This, HWND hParent, DWORD dwReserved);HRESULT ( *AddItem)(ISyncSchedule *This, LPSYNC_HANDLER_ITEM_INFO pHandlerItemInfo);HRESULT ( *RegisterItems)(ISyncSchedule *This,  CLSID * pHandlerID, SYNCMGRITEMID *pItemID);HRESULT ( *UnregisterItems)(ISyncSchedule *This,  CLSID * pHandlerID, SYNCMGRITEMID *pItemID);HRESULT ( *SetItemCheck)(ISyncSchedule *This,  CLSID * pHandlerID, SYNCMGRITEMID *pItemID, DWORD dwCheckState);HRESULT ( *GetItemCheck)(ISyncSchedule *This,  CLSID * pHandlerID, SYNCMGRITEMID *pItemID, DWORD *pdwCheckState);HRESULT ( *EnumItems)(ISyncSchedule *This,  CLSID * pHandlerID, IEnumSyncItems **ppEnumItems);HRESULT ( *Save)(ISyncSchedule *This);HRESULT ( *GetITask)(ISyncSchedule *This, ITask **ppITask);};
struct IRTCSession2Vtbl {HRESULT ( *QueryInterface)(IRTCSession2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSession2 *This);ULONG ( *Release)(IRTCSession2 *This);HRESULT ( *get_Client)(IRTCSession2 *This, IRTCClient **ppClient);HRESULT ( *get_State)(IRTCSession2 *This, RTC_SESSION_STATE *penState);HRESULT ( *get_Type)(IRTCSession2 *This, RTC_SESSION_TYPE *penType);HRESULT ( *get_Profile)(IRTCSession2 *This, IRTCProfile **ppProfile);HRESULT ( *get_Participants)(IRTCSession2 *This, IRTCCollection **ppCollection);HRESULT ( *Answer)(IRTCSession2 *This);HRESULT ( *Terminate)(IRTCSession2 *This, RTC_TERMINATE_REASON enReason);HRESULT ( *Redirect)(IRTCSession2 *This, RTC_SESSION_TYPE enType, BSTR bstrLocalPhoneURI, IRTCProfile *pProfile, int lFlags);HRESULT ( *AddParticipant)(IRTCSession2 *This, BSTR bstrAddress, BSTR bstrName, IRTCParticipant **ppParticipant);HRESULT ( *RemoveParticipant)(IRTCSession2 *This, IRTCParticipant *pParticipant);HRESULT ( *EnumerateParticipants)(IRTCSession2 *This, IRTCEnumParticipants **ppEnum);HRESULT ( *get_CanAddParticipants)(IRTCSession2 *This, VARIANT_BOOL *pfCanAdd);HRESULT ( *get_RedirectedUserURI)(IRTCSession2 *This, BSTR *pbstrUserURI);HRESULT ( *get_RedirectedUserName)(IRTCSession2 *This, BSTR *pbstrUserName);HRESULT ( *NextRedirectedUser)(IRTCSession2 *This);HRESULT ( *SendMessageA)(IRTCSession2 *This, BSTR bstrMessageHeader, BSTR bstrMessage, LONG_PTR lCookie);HRESULT ( *SendMessageStatus)(IRTCSession2 *This, RTC_MESSAGING_USER_STATUS enUserStatus, LONG_PTR lCookie);HRESULT ( *AddStream)(IRTCSession2 *This, int lMediaType, LONG_PTR lCookie);HRESULT ( *RemoveStream)(IRTCSession2 *This, int lMediaType, LONG_PTR lCookie);HRESULT ( *put_EncryptionKey)(IRTCSession2 *This, int lMediaType, BSTR EncryptionKey);HRESULT ( *SendInfo)(IRTCSession2 *This, BSTR bstrInfoHeader, BSTR bstrInfo, LONG_PTR lCookie);HRESULT ( *put_PreferredSecurityLevel)(IRTCSession2 *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL enSecurityLevel);HRESULT ( *get_PreferredSecurityLevel)(IRTCSession2 *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL *penSecurityLevel);HRESULT ( *IsSecurityEnabled)(IRTCSession2 *This, RTC_SECURITY_TYPE enSecurityType, VARIANT_BOOL *pfSecurityEnabled);HRESULT ( *AnswerWithSessionDescription)(IRTCSession2 *This, BSTR bstrContentType, BSTR bstrSessionDescription);HRESULT ( *ReInviteWithSessionDescription)(IRTCSession2 *This, BSTR bstrContentType, BSTR bstrSessionDescription, LONG_PTR lCookie);};
struct tagCHOOSEFONTW {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTW lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCWSTR lpTemplateName;HINSTANCE hInstance;LPWSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
struct IMultiLanguageVtbl {HRESULT ( *QueryInterface)(IMultiLanguage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiLanguage *This);ULONG ( *Release)(IMultiLanguage *This);HRESULT ( *GetNumberOfCodePageInfo)(IMultiLanguage *This, UINT *pcCodePage);HRESULT ( *GetCodePageInfo)(IMultiLanguage *This, UINT uiCodePage, PMIMECPINFO pCodePageInfo);HRESULT ( *GetFamilyCodePage)(IMultiLanguage *This, UINT uiCodePage, UINT *puiFamilyCodePage);HRESULT ( *EnumCodePages)(IMultiLanguage *This, DWORD grfFlags, IEnumCodePage **ppEnumCodePage);HRESULT ( *GetCharsetInfo)(IMultiLanguage *This, BSTR Charset, PMIMECSETINFO pCharsetInfo);HRESULT ( *IsConvertible)(IMultiLanguage *This, DWORD dwSrcEncoding, DWORD dwDstEncoding);HRESULT ( *ConvertString)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwSrcEncoding, DWORD dwDstEncoding, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringToUnicode)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringFromUnicode)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringReset)(IMultiLanguage *This);HRESULT ( *GetRfc1766FromLcid)(IMultiLanguage *This, LCID Locale, BSTR *pbstrRfc1766);HRESULT ( *GetLcidFromRfc1766)(IMultiLanguage *This, LCID *pLocale, BSTR bstrRfc1766);HRESULT ( *EnumRfc1766)(IMultiLanguage *This, IEnumRfc1766 **ppEnumRfc1766);HRESULT ( *GetRfc1766Info)(IMultiLanguage *This, LCID Locale, PRFC1766INFO pRfc1766Info);HRESULT ( *CreateConvertCharset)(IMultiLanguage *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty, IMLangConvertCharset **ppMLangConvertCharset);};
struct IIMAPCallbackVtbl {HRESULT ( *QueryInterface)(IIMAPCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIMAPCallback *This);ULONG ( *Release)(IIMAPCallback *This);HRESULT ( *OnTimeout)(IIMAPCallback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(IIMAPCallback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(IIMAPCallback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(IIMAPCallback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(IIMAPCallback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(IIMAPCallback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);HRESULT ( *OnResponse)(IIMAPCallback *This,  IMAP_RESPONSE *pirIMAPResponse);};
struct INNTPCallbackVtbl {HRESULT ( *QueryInterface)(INNTPCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INNTPCallback *This);ULONG ( *Release)(INNTPCallback *This);HRESULT ( *OnTimeout)(INNTPCallback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(INNTPCallback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(INNTPCallback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(INNTPCallback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(INNTPCallback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(INNTPCallback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);HRESULT ( *OnResponse)(INNTPCallback *This, LPNNTPRESPONSE pResponse);};
struct INotificationVtbl {HRESULT ( *QueryInterface)(INotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotification *This);ULONG ( *Release)(INotification *This);HRESULT ( *Write)(INotification *This, LPCWSTR pstrName, VARIANT variantValue, DWORD dwFlags);HRESULT ( *Read)(INotification *This, LPCWSTR pstrName, VARIANT *pVariantValue);HRESULT ( *GetCount)(INotification *This, ULONG *pCount);HRESULT ( *GetEnumMAP)(INotification *This, LPENUMPROPERTYMAP *ppEnumMap);HRESULT ( *GetNotificationInfo)(INotification *This, PNOTIFICATIONTYPE pNotificationType, PNOTIFICATIONCOOKIE pNotificationCookie, NOTIFICATIONFLAGS *pNotificationFlags, DELIVERMODE *pDeliverMode, DWORD dwReserved);HRESULT ( *Clone)(INotification *This, REFNOTIFICATIONTYPE rNotificationType, LPNOTIFICATION *ppNotification, DWORD dwReserved);};
struct IPOP3CallbackVtbl {HRESULT ( *QueryInterface)(IPOP3Callback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPOP3Callback *This);ULONG ( *Release)(IPOP3Callback *This);HRESULT ( *OnTimeout)(IPOP3Callback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(IPOP3Callback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(IPOP3Callback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(IPOP3Callback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(IPOP3Callback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(IPOP3Callback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);HRESULT ( *OnResponse)(IPOP3Callback *This, LPPOP3RESPONSE pResponse);};
struct ISMTPCallbackVtbl {HRESULT ( *QueryInterface)(ISMTPCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISMTPCallback *This);ULONG ( *Release)(ISMTPCallback *This);HRESULT ( *OnTimeout)(ISMTPCallback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(ISMTPCallback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(ISMTPCallback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(ISMTPCallback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(ISMTPCallback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(ISMTPCallback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);HRESULT ( *OnResponse)(ISMTPCallback *This, LPSMTPRESPONSE pResponse);};
struct IMAPIPropVtbl {HRESULT ( *QueryInterface)(IMAPIProp *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIProp *This);ULONG ( *Release)(IMAPIProp *This);HRESULT ( *GetLastError)(IMAPIProp *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIProp *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIProp *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIProp *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIProp *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIProp *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIProp *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIProp *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIProp *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIProp *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIProp *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IMailUserVtbl {HRESULT ( *QueryInterface)(IMailUser *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMailUser *This);ULONG ( *Release)(IMailUser *This);HRESULT ( *GetLastError)(IMailUser *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMailUser *This, ULONG ulFlags);HRESULT ( *GetProps)(IMailUser *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMailUser *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMailUser *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMailUser *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMailUser *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMailUser *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMailUser *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMailUser *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMailUser *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IProfSectVtbl {HRESULT ( *QueryInterface)(IProfSect *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IProfSect *This);ULONG ( *Release)(IProfSect *This);HRESULT ( *GetLastError)(IProfSect *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IProfSect *This, ULONG ulFlags);HRESULT ( *GetProps)(IProfSect *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IProfSect *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IProfSect *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IProfSect *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IProfSect *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IProfSect *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IProfSect *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IProfSect *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IProfSect *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IPropDataVtbl {HRESULT ( *QueryInterface)(IPropData *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPropData *This);ULONG ( *Release)(IPropData *This);HRESULT ( *GetLastError)(IPropData *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IPropData *This, ULONG ulFlags);HRESULT ( *GetProps)(IPropData *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IPropData *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IPropData *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IPropData *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IPropData *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IPropData *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IPropData *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IPropData *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IPropData *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *HrSetObjAccess)(IPropData *This, ULONG ulAccess);HRESULT ( *HrSetPropAccess)(IPropData *This, LPSPropTagArray lpPropTagArray, ULONG *rgulAccess);HRESULT ( *HrGetPropAccess)(IPropData *This, LPSPropTagArray *lppPropTagArray, ULONG **lprgulAccess);HRESULT ( *HrAddObjProps)(IPropData *This, LPSPropTagArray lppPropTagArray, LPSPropProblemArray *lprgulAccess);};
struct IAttachVtbl {HRESULT ( *QueryInterface)(IAttach *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAttach *This);ULONG ( *Release)(IAttach *This);HRESULT ( *GetLastError)(IAttach *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IAttach *This, ULONG ulFlags);HRESULT ( *GetProps)(IAttach *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IAttach *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IAttach *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IAttach *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IAttach *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IAttach *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IAttach *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IAttach *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IAttach *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IPStoreVtbl {HRESULT ( *QueryInterface)(IPStore *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPStore *This);ULONG ( *Release)(IPStore *This);HRESULT ( *GetInfo)(IPStore *This, PPST_PROVIDERINFO *ppProperties);HRESULT ( *GetProvParam)(IPStore *This, DWORD dwParam, DWORD *pcbData, BYTE **ppbData, DWORD dwFlags);HRESULT ( *SetProvParam)(IPStore *This, DWORD dwParam, DWORD cbData, BYTE *pbData, DWORD dwFlags);HRESULT ( *CreateType)(IPStore *This, PST_KEY Key,  GUID *pType, PPST_TYPEINFO pInfo, DWORD dwFlags);HRESULT ( *GetTypeInfo)(IPStore *This, PST_KEY Key,  GUID *pType, PPST_TYPEINFO *ppInfo, DWORD dwFlags);HRESULT ( *DeleteType)(IPStore *This, PST_KEY Key,  GUID *pType, DWORD dwFlags);HRESULT ( *CreateSubtype)(IPStore *This, PST_KEY Key,  GUID *pType,  GUID *pSubtype, PPST_TYPEINFO pInfo, PPST_ACCESSRULESET pRules, DWORD dwFlags);HRESULT ( *GetSubtypeInfo)(IPStore *This, PST_KEY Key,  GUID *pType,  GUID *pSubtype, PPST_TYPEINFO *ppInfo, DWORD dwFlags);HRESULT ( *DeleteSubtype)(IPStore *This, PST_KEY Key,  GUID *pType,  GUID *pSubtype, DWORD dwFlags);HRESULT ( *ReadAccessRuleset)(IPStore *This, PST_KEY Key,  GUID *pType,  GUID *pSubtype, PPST_ACCESSRULESET *ppRules, DWORD dwFlags);HRESULT ( *WriteAccessRuleset)(IPStore *This, PST_KEY Key,  GUID *pType,  GUID *pSubtype, PPST_ACCESSRULESET pRules, DWORD dwFlags);HRESULT ( *EnumTypes)(IPStore *This, PST_KEY Key, DWORD dwFlags, IEnumPStoreTypes **ppenum);HRESULT ( *EnumSubtypes)(IPStore *This, PST_KEY Key,  GUID *pType, DWORD dwFlags, IEnumPStoreTypes **ppenum);HRESULT ( *DeleteItem)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, LPCWSTR szItemName, PPST_PROMPTINFO pPromptInfo, DWORD dwFlags);HRESULT ( *ReadItem)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, LPCWSTR szItemName, DWORD *pcbData, BYTE **ppbData, PPST_PROMPTINFO pPromptInfo, DWORD dwFlags);HRESULT ( *WriteItem)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, LPCWSTR szItemName, DWORD cbData, BYTE *pbData, PPST_PROMPTINFO pPromptInfo, DWORD dwDefaultConfirmationStyle, DWORD dwFlags);HRESULT ( *OpenItem)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, LPCWSTR szItemName, PST_ACCESSMODE ModeFlags, PPST_PROMPTINFO pPromptInfo, DWORD dwFlags);HRESULT ( *CloseItem)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, LPCWSTR szItemName, DWORD dwFlags);HRESULT ( *EnumItems)(IPStore *This, PST_KEY Key,  GUID *pItemType,  GUID *pItemSubtype, DWORD dwFlags, IEnumPStoreItems **ppenum);};
struct IRTCClientPresence2Vtbl {HRESULT ( *QueryInterface)(IRTCClientPresence2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientPresence2 *This);ULONG ( *Release)(IRTCClientPresence2 *This);HRESULT ( *EnablePresence)(IRTCClientPresence2 *This, VARIANT_BOOL fUseStorage, VARIANT varStorage);HRESULT ( *Export)(IRTCClientPresence2 *This, VARIANT varStorage);HRESULT ( *Import)(IRTCClientPresence2 *This, VARIANT varStorage, VARIANT_BOOL fReplaceAll);HRESULT ( *EnumerateBuddies)(IRTCClientPresence2 *This, IRTCEnumBuddies **ppEnum);HRESULT ( *get_Buddies)(IRTCClientPresence2 *This, IRTCCollection **ppCollection);HRESULT ( *get_Buddy)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, IRTCBuddy **ppBuddy);HRESULT ( *AddBuddy)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, VARIANT_BOOL fPersistent, IRTCProfile *pProfile, int lFlags, IRTCBuddy **ppBuddy);HRESULT ( *RemoveBuddy)(IRTCClientPresence2 *This, IRTCBuddy *pBuddy);HRESULT ( *EnumerateWatchers)(IRTCClientPresence2 *This, IRTCEnumWatchers **ppEnum);HRESULT ( *get_Watchers)(IRTCClientPresence2 *This, IRTCCollection **ppCollection);HRESULT ( *get_Watcher)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, IRTCWatcher **ppWatcher);HRESULT ( *AddWatcher)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, VARIANT_BOOL fBlocked, VARIANT_BOOL fPersistent, IRTCWatcher **ppWatcher);HRESULT ( *RemoveWatcher)(IRTCClientPresence2 *This, IRTCWatcher *pWatcher);HRESULT ( *SetLocalPresenceInfo)(IRTCClientPresence2 *This, RTC_PRESENCE_STATUS enStatus, BSTR bstrNotes);HRESULT ( *get_OfferWatcherMode)(IRTCClientPresence2 *This, RTC_OFFER_WATCHER_MODE *penMode);HRESULT ( *put_OfferWatcherMode)(IRTCClientPresence2 *This, RTC_OFFER_WATCHER_MODE enMode);HRESULT ( *get_PrivacyMode)(IRTCClientPresence2 *This, RTC_PRIVACY_MODE *penMode);HRESULT ( *put_PrivacyMode)(IRTCClientPresence2 *This, RTC_PRIVACY_MODE enMode);HRESULT ( *EnablePresenceEx)(IRTCClientPresence2 *This, IRTCProfile *pProfile, VARIANT varStorage, int lFlags);HRESULT ( *DisablePresence)(IRTCClientPresence2 *This);HRESULT ( *AddGroup)(IRTCClientPresence2 *This, BSTR bstrGroupName, BSTR bstrData, IRTCProfile *pProfile, int lFlags, IRTCBuddyGroup **ppGroup);HRESULT ( *RemoveGroup)(IRTCClientPresence2 *This, IRTCBuddyGroup *pGroup);HRESULT ( *EnumerateGroups)(IRTCClientPresence2 *This, IRTCEnumGroups **ppEnum);HRESULT ( *get_Groups)(IRTCClientPresence2 *This, IRTCCollection **ppCollection);HRESULT ( *get_Group)(IRTCClientPresence2 *This, BSTR bstrGroupName, IRTCBuddyGroup **ppGroup);HRESULT ( *AddWatcherEx)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, RTC_WATCHER_STATE enState, VARIANT_BOOL fPersistent, RTC_ACE_SCOPE enScope, IRTCProfile *pProfile, int lFlags, IRTCWatcher2 **ppWatcher);HRESULT ( *get_WatcherEx)(IRTCClientPresence2 *This, RTC_WATCHER_MATCH_MODE enMode, BSTR bstrPresentityURI, IRTCWatcher2 **ppWatcher);HRESULT ( *put_PresenceProperty)(IRTCClientPresence2 *This, RTC_PRESENCE_PROPERTY enProperty, BSTR bstrProperty);HRESULT ( *get_PresenceProperty)(IRTCClientPresence2 *This, RTC_PRESENCE_PROPERTY enProperty, BSTR *pbstrProperty);HRESULT ( *SetPresenceData)(IRTCClientPresence2 *This, BSTR bstrNamespace, BSTR bstrData);HRESULT ( *GetPresenceData)(IRTCClientPresence2 *This, BSTR *pbstrNamespace, BSTR *pbstrData);HRESULT ( *GetLocalPresenceInfo)(IRTCClientPresence2 *This, RTC_PRESENCE_STATUS *penStatus, BSTR *pbstrNotes);HRESULT ( *AddBuddyEx)(IRTCClientPresence2 *This, BSTR bstrPresentityURI, BSTR bstrUserName, BSTR bstrData, VARIANT_BOOL fPersistent, RTC_BUDDY_SUBSCRIPTION_TYPE enSubscriptionType, IRTCProfile *pProfile, int lFlags, IRTCBuddy2 **ppBuddy);};
struct IQueryAssociationsVtbl {HRESULT ( *QueryInterface)(IQueryAssociations *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IQueryAssociations *This);ULONG ( *Release)(IQueryAssociations *This);HRESULT ( *Init)(IQueryAssociations *This, ASSOCF flags, LPCWSTR pszAssoc, HKEY hkProgid, HWND hwnd);HRESULT ( *GetString)(IQueryAssociations *This, ASSOCF flags, ASSOCSTR str, LPCWSTR pszExtra, LPWSTR pszOut, DWORD *pcchOut);HRESULT ( *GetKey)(IQueryAssociations *This, ASSOCF flags, ASSOCKEY key, LPCWSTR pszExtra, HKEY *phkeyOut);HRESULT ( *GetData)(IQueryAssociations *This, ASSOCF flags, ASSOCDATA data, LPCWSTR pszExtra, LPVOID pvOut, DWORD *pcbOut);HRESULT ( *GetEnum)(IQueryAssociations *This, ASSOCF flags, ASSOCENUM assocenum, LPCWSTR pszExtra,  IID * riid, LPVOID *ppvOut);};
struct IHTTPMailCallbackVtbl {HRESULT ( *QueryInterface)(IHTTPMailCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTTPMailCallback *This);ULONG ( *Release)(IHTTPMailCallback *This);HRESULT ( *OnTimeout)(IHTTPMailCallback *This, DWORD *pdwTimeout, IInternetTransport *pTransport);HRESULT ( *OnLogonPrompt)(IHTTPMailCallback *This, LPINETSERVER pInetServer, IInternetTransport *pTransport);INT ( *OnPrompt)(IHTTPMailCallback *This, HRESULT hrError, LPCTSTR pszText, LPCTSTR pszCaption, UINT uType, IInternetTransport *pTransport);HRESULT ( *OnStatus)(IHTTPMailCallback *This, IXPSTATUS ixpstatus, IInternetTransport *pTransport);HRESULT ( *OnError)(IHTTPMailCallback *This, IXPSTATUS ixpstatus, LPIXPRESULT pResult, IInternetTransport *pTransport);HRESULT ( *OnCommand)(IHTTPMailCallback *This, CMDTYPE cmdtype, LPSTR pszLine, HRESULT hrResponse, IInternetTransport *pTransport);HRESULT ( *OnResponse)(IHTTPMailCallback *This, LPHTTPMAILRESPONSE pResponse);HRESULT ( *GetParentWindow)(IHTTPMailCallback *This, HWND *phwndParent);};
struct IRTCClientVtbl {HRESULT ( *QueryInterface)(IRTCClient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClient *This);ULONG ( *Release)(IRTCClient *This);HRESULT ( *Initialize)(IRTCClient *This);HRESULT ( *Shutdown)(IRTCClient *This);HRESULT ( *PrepareForShutdown)(IRTCClient *This);HRESULT ( *put_EventFilter)(IRTCClient *This, int lFilter);HRESULT ( *get_EventFilter)(IRTCClient *This, int *plFilter);HRESULT ( *SetPreferredMediaTypes)(IRTCClient *This, int lMediaTypes, VARIANT_BOOL fPersistent);HRESULT ( *get_PreferredMediaTypes)(IRTCClient *This, int *plMediaTypes);HRESULT ( *get_MediaCapabilities)(IRTCClient *This, int *plMediaTypes);HRESULT ( *CreateSession)(IRTCClient *This, RTC_SESSION_TYPE enType, BSTR bstrLocalPhoneURI, IRTCProfile *pProfile, int lFlags, IRTCSession **ppSession);HRESULT ( *put_ListenForIncomingSessions)(IRTCClient *This, RTC_LISTEN_MODE enListen);HRESULT ( *get_ListenForIncomingSessions)(IRTCClient *This, RTC_LISTEN_MODE *penListen);HRESULT ( *get_NetworkAddresses)(IRTCClient *This, VARIANT_BOOL fTCP, VARIANT_BOOL fExternal, VARIANT *pvAddresses);HRESULT ( *put_Volume)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, int lVolume);HRESULT ( *get_Volume)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, int *plVolume);HRESULT ( *put_AudioMuted)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, VARIANT_BOOL fMuted);HRESULT ( *get_AudioMuted)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, VARIANT_BOOL *pfMuted);HRESULT ( *get_IVideoWindow)(IRTCClient *This, RTC_VIDEO_DEVICE enDevice, IVideoWindow **ppIVideoWindow);HRESULT ( *put_PreferredAudioDevice)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, BSTR bstrDeviceName);HRESULT ( *get_PreferredAudioDevice)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, BSTR *pbstrDeviceName);HRESULT ( *put_PreferredVolume)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, int lVolume);HRESULT ( *get_PreferredVolume)(IRTCClient *This, RTC_AUDIO_DEVICE enDevice, int *plVolume);HRESULT ( *put_PreferredAEC)(IRTCClient *This, VARIANT_BOOL bEnable);HRESULT ( *get_PreferredAEC)(IRTCClient *This, VARIANT_BOOL *pbEnabled);HRESULT ( *put_PreferredVideoDevice)(IRTCClient *This, BSTR bstrDeviceName);HRESULT ( *get_PreferredVideoDevice)(IRTCClient *This, BSTR *pbstrDeviceName);HRESULT ( *get_ActiveMedia)(IRTCClient *This, int *plMediaType);HRESULT ( *put_MaxBitrate)(IRTCClient *This, int lMaxBitrate);HRESULT ( *get_MaxBitrate)(IRTCClient *This, int *plMaxBitrate);HRESULT ( *put_TemporalSpatialTradeOff)(IRTCClient *This, int lValue);HRESULT ( *get_TemporalSpatialTradeOff)(IRTCClient *This, int *plValue);HRESULT ( *get_NetworkQuality)(IRTCClient *This, int *plNetworkQuality);HRESULT ( *StartT120Applet)(IRTCClient *This, RTC_T120_APPLET enApplet);HRESULT ( *StopT120Applets)(IRTCClient *This);HRESULT ( *get_IsT120AppletRunning)(IRTCClient *This, RTC_T120_APPLET enApplet, VARIANT_BOOL *pfRunning);HRESULT ( *get_LocalUserURI)(IRTCClient *This, BSTR *pbstrUserURI);HRESULT ( *put_LocalUserURI)(IRTCClient *This, BSTR bstrUserURI);HRESULT ( *get_LocalUserName)(IRTCClient *This, BSTR *pbstrUserName);HRESULT ( *put_LocalUserName)(IRTCClient *This, BSTR bstrUserName);HRESULT ( *PlayRing)(IRTCClient *This, RTC_RING_TYPE enType, VARIANT_BOOL bPlay);HRESULT ( *SendDTMF)(IRTCClient *This, RTC_DTMF enDTMF);HRESULT ( *InvokeTuningWizard)(IRTCClient *This, OAHWND hwndParent);HRESULT ( *get_IsTuned)(IRTCClient *This, VARIANT_BOOL *pfTuned);};
struct IShellViewVtbl {HRESULT ( *QueryInterface)(IShellView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellView *This);ULONG ( *Release)(IShellView *This);HRESULT ( *GetWindow)(IShellView *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellView *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView *This, LPMSG lpmsg);HRESULT ( *EnableModeless)(IShellView *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView *This, UINT uState);HRESULT ( *Refresh)(IShellView *This);HRESULT ( *CreateViewWindow)(IShellView *This, IShellView *psvPrevious, LPCFOLDERSETTINGS lpfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView *This);HRESULT ( *GetCurrentInfo)(IShellView *This, LPFOLDERSETTINGS lpfs);HRESULT ( *AddPropertySheetPages)(IShellView *This, DWORD dwReserved, LPFNSVADDPROPSHEETPAGE lpfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView *This);HRESULT ( *SelectItem)(IShellView *This, LPCITEMIDLIST pidlItem, UINT uFlags);HRESULT ( *GetItemObject)(IShellView *This, UINT uItem,  IID * riid, void **ppv);};
struct _IRP {PMDL MdlAddress;ULONG Flags;union _IRP___CBBBB9F4F0755A16DC8A369061485BEC AssociatedIrp;LIST_ENTRY ThreadListEntry;IO_STATUS_BLOCK IoStatus;BOOLEAN PendingReturned;CHAR StackCount;CHAR CurrentLocation;BOOLEAN Cancel;UCHAR AllocationFlags;PIO_STATUS_BLOCK UserIosb;HANDLE UserEvent;union _IRP___587A9B960BE92E4E8E029EB753BAD923 Overlay;PDRIVER_CANCEL CancelRoutine;PVOID UserBuffer;union _IRP___2B8045857F44E8706EFE3A31F95ACA19 Tail;};
struct _CRYPT_PROVIDER_FUNCTIONS {DWORD cbStruct;PFN_CPD_MEM_ALLOC pfnAlloc;PFN_CPD_MEM_FREE pfnFree;PFN_CPD_ADD_STORE pfnAddStore2Chain;PFN_CPD_ADD_SGNR pfnAddSgnr2Chain;PFN_CPD_ADD_CERT pfnAddCert2Chain;PFN_CPD_ADD_PRIVDATA pfnAddPrivData2Chain;PFN_PROVIDER_INIT_CALL pfnInitialize;PFN_PROVIDER_OBJTRUST_CALL pfnObjectTrust;PFN_PROVIDER_SIGTRUST_CALL pfnSignatureTrust;PFN_PROVIDER_CERTTRUST_CALL pfnCertificateTrust;PFN_PROVIDER_FINALPOLICY_CALL pfnFinalPolicy;PFN_PROVIDER_CERTCHKPOLICY_CALL pfnCertCheckPolicy;PFN_PROVIDER_TESTFINALPOLICY_CALL pfnTestFinalPolicy;struct _CRYPT_PROVUI_FUNCS *psUIpfns;PFN_PROVIDER_CLEANUP_CALL pfnCleanupPolicy;};
struct IMAPIStatusVtbl {HRESULT ( *QueryInterface)(IMAPIStatus *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIStatus *This);ULONG ( *Release)(IMAPIStatus *This);HRESULT ( *GetLastError)(IMAPIStatus *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIStatus *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIStatus *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIStatus *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIStatus *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIStatus *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIStatus *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIStatus *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIStatus *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIStatus *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIStatus *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *ValidateState)(IMAPIStatus *This, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *SettingsDialog)(IMAPIStatus *This, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *ChangePassword)(IMAPIStatus *This, LPTSTR lpOldPass, LPTSTR lpNewPass, ULONG ulFlags);HRESULT ( *FlushQueues)(IMAPIStatus *This, ULONG ulUIParam, ULONG cbTargetTransport, LPENTRYID lpTargetTransport, ULONG ulFlags);};
struct _WSPUPCALLTABLE {LPWPUCLOSEEVENT lpWPUCloseEvent;LPWPUCLOSESOCKETHANDLE lpWPUCloseSocketHandle;LPWPUCREATEEVENT lpWPUCreateEvent;LPWPUCREATESOCKETHANDLE lpWPUCreateSocketHandle;LPWPUFDISSET lpWPUFDIsSet;LPWPUGETPROVIDERPATH lpWPUGetProviderPath;LPWPUMODIFYIFSHANDLE lpWPUModifyIFSHandle;LPWPUPOSTMESSAGE lpWPUPostMessage;LPWPUQUERYBLOCKINGCALLBACK lpWPUQueryBlockingCallback;LPWPUQUERYSOCKETHANDLECONTEXT lpWPUQuerySocketHandleContext;LPWPUQUEUEAPC lpWPUQueueApc;LPWPURESETEVENT lpWPUResetEvent;LPWPUSETEVENT lpWPUSetEvent;LPWPUOPENCURRENTTHREAD lpWPUOpenCurrentThread;LPWPUCLOSETHREAD lpWPUCloseThread;};
struct IDvdControl2Vtbl {HRESULT ( *QueryInterface)(IDvdControl2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdControl2 *This);ULONG ( *Release)(IDvdControl2 *This);HRESULT ( *PlayTitle)(IDvdControl2 *This, ULONG ulTitle, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayChapterInTitle)(IDvdControl2 *This, ULONG ulTitle, ULONG ulChapter, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayAtTimeInTitle)(IDvdControl2 *This, ULONG ulTitle, DVD_HMSF_TIMECODE *pStartTime, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *Stop)(IDvdControl2 *This);HRESULT ( *ReturnFromSubmenu)(IDvdControl2 *This, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayAtTime)(IDvdControl2 *This, DVD_HMSF_TIMECODE *pTime, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayChapter)(IDvdControl2 *This, ULONG ulChapter, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayPrevChapter)(IDvdControl2 *This, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *ReplayChapter)(IDvdControl2 *This, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayNextChapter)(IDvdControl2 *This, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayForwards)(IDvdControl2 *This, double dSpeed, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayBackwards)(IDvdControl2 *This, double dSpeed, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *ShowMenu)(IDvdControl2 *This, DVD_MENU_ID MenuID, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *Resume)(IDvdControl2 *This, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SelectRelativeButton)(IDvdControl2 *This, DVD_RELATIVE_BUTTON buttonDir);HRESULT ( *ActivateButton)(IDvdControl2 *This);HRESULT ( *SelectButton)(IDvdControl2 *This, ULONG ulButton);HRESULT ( *SelectAndActivateButton)(IDvdControl2 *This, ULONG ulButton);HRESULT ( *StillOff)(IDvdControl2 *This);HRESULT ( *Pause)(IDvdControl2 *This, BOOL bState);HRESULT ( *SelectAudioStream)(IDvdControl2 *This, ULONG ulAudio, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SelectSubpictureStream)(IDvdControl2 *This, ULONG ulSubPicture, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SetSubpictureState)(IDvdControl2 *This, BOOL bState, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SelectAngle)(IDvdControl2 *This, ULONG ulAngle, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SelectParentalLevel)(IDvdControl2 *This, ULONG ulParentalLevel);HRESULT ( *SelectParentalCountry)(IDvdControl2 *This,BYTE  *    bCountry);HRESULT ( *SelectKaraokeAudioPresentationMode)(IDvdControl2 *This, ULONG ulMode);HRESULT ( *SelectVideoModePreference)(IDvdControl2 *This, ULONG ulPreferredDisplayMode);HRESULT ( *SetDVDDirectory)(IDvdControl2 *This, LPCWSTR pszwPath);HRESULT ( *ActivateAtPosition)(IDvdControl2 *This, POINT point);HRESULT ( *SelectAtPosition)(IDvdControl2 *This, POINT point);HRESULT ( *PlayChaptersAutoStop)(IDvdControl2 *This, ULONG ulTitle, ULONG ulChapter, ULONG ulChaptersToPlay, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *AcceptParentalLevelChange)(IDvdControl2 *This, BOOL bAccept);HRESULT ( *SetOption)(IDvdControl2 *This, DVD_OPTION_FLAG flag, BOOL fState);HRESULT ( *SetState)(IDvdControl2 *This, IDvdState *pState, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *PlayPeriodInTitleAutoStop)(IDvdControl2 *This, ULONG ulTitle, DVD_HMSF_TIMECODE *pStartTime, DVD_HMSF_TIMECODE *pEndTime, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SetGPRM)(IDvdControl2 *This, ULONG ulIndex, WORD wValue, DWORD dwFlags, IDvdCmd **ppCmd);HRESULT ( *SelectDefaultMenuLanguage)(IDvdControl2 *This, LCID Language);HRESULT ( *SelectDefaultAudioLanguage)(IDvdControl2 *This, LCID Language, DVD_AUDIO_LANG_EXT audioExtension);HRESULT ( *SelectDefaultSubpictureLanguage)(IDvdControl2 *This, LCID Language, DVD_SUBPICTURE_LANG_EXT subpictureExtension);};
struct IMessageVtbl {HRESULT ( *QueryInterface)(IMessage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMessage *This);ULONG ( *Release)(IMessage *This);HRESULT ( *GetLastError)(IMessage *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMessage *This, ULONG ulFlags);HRESULT ( *GetProps)(IMessage *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMessage *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMessage *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMessage *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMessage *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMessage *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMessage *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMessage *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMessage *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetAttachmentTable)(IMessage *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenAttach)(IMessage *This, ULONG ulAttachmentNum, LPCIID lpInterface, ULONG ulFlags, LPATTACH *lppAttach);HRESULT ( *CreateAttach)(IMessage *This, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulAttachmentNum, LPATTACH *lppAttach);HRESULT ( *DeleteAttach)(IMessage *This, ULONG ulAttachmentNum, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *GetRecipientTable)(IMessage *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *ModifyRecipients)(IMessage *This, ULONG ulFlags, LPADRLIST lpMods);HRESULT ( *SubmitMessage)(IMessage *This, ULONG ulFlags);HRESULT ( *SetReadFlag)(IMessage *This, ULONG ulFlags);};
struct IMAPIContainerVtbl {HRESULT ( *QueryInterface)(IMAPIContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIContainer *This);ULONG ( *Release)(IMAPIContainer *This);HRESULT ( *GetLastError)(IMAPIContainer *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIContainer *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIContainer *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIContainer *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIContainer *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIContainer *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIContainer *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIContainer *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIContainer *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIContainer *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IMAPIContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IMAPIContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IMAPIContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IMAPIContainer *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IMAPIContainer *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);};
struct IRTCClient2Vtbl {HRESULT ( *QueryInterface)(IRTCClient2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClient2 *This);ULONG ( *Release)(IRTCClient2 *This);HRESULT ( *Initialize)(IRTCClient2 *This);HRESULT ( *Shutdown)(IRTCClient2 *This);HRESULT ( *PrepareForShutdown)(IRTCClient2 *This);HRESULT ( *put_EventFilter)(IRTCClient2 *This, int lFilter);HRESULT ( *get_EventFilter)(IRTCClient2 *This, int *plFilter);HRESULT ( *SetPreferredMediaTypes)(IRTCClient2 *This, int lMediaTypes, VARIANT_BOOL fPersistent);HRESULT ( *get_PreferredMediaTypes)(IRTCClient2 *This, int *plMediaTypes);HRESULT ( *get_MediaCapabilities)(IRTCClient2 *This, int *plMediaTypes);HRESULT ( *CreateSession)(IRTCClient2 *This, RTC_SESSION_TYPE enType, BSTR bstrLocalPhoneURI, IRTCProfile *pProfile, int lFlags, IRTCSession **ppSession);HRESULT ( *put_ListenForIncomingSessions)(IRTCClient2 *This, RTC_LISTEN_MODE enListen);HRESULT ( *get_ListenForIncomingSessions)(IRTCClient2 *This, RTC_LISTEN_MODE *penListen);HRESULT ( *get_NetworkAddresses)(IRTCClient2 *This, VARIANT_BOOL fTCP, VARIANT_BOOL fExternal, VARIANT *pvAddresses);HRESULT ( *put_Volume)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, int lVolume);HRESULT ( *get_Volume)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, int *plVolume);HRESULT ( *put_AudioMuted)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, VARIANT_BOOL fMuted);HRESULT ( *get_AudioMuted)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, VARIANT_BOOL *pfMuted);HRESULT ( *get_IVideoWindow)(IRTCClient2 *This, RTC_VIDEO_DEVICE enDevice, IVideoWindow **ppIVideoWindow);HRESULT ( *put_PreferredAudioDevice)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, BSTR bstrDeviceName);HRESULT ( *get_PreferredAudioDevice)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, BSTR *pbstrDeviceName);HRESULT ( *put_PreferredVolume)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, int lVolume);HRESULT ( *get_PreferredVolume)(IRTCClient2 *This, RTC_AUDIO_DEVICE enDevice, int *plVolume);HRESULT ( *put_PreferredAEC)(IRTCClient2 *This, VARIANT_BOOL bEnable);HRESULT ( *get_PreferredAEC)(IRTCClient2 *This, VARIANT_BOOL *pbEnabled);HRESULT ( *put_PreferredVideoDevice)(IRTCClient2 *This, BSTR bstrDeviceName);HRESULT ( *get_PreferredVideoDevice)(IRTCClient2 *This, BSTR *pbstrDeviceName);HRESULT ( *get_ActiveMedia)(IRTCClient2 *This, int *plMediaType);HRESULT ( *put_MaxBitrate)(IRTCClient2 *This, int lMaxBitrate);HRESULT ( *get_MaxBitrate)(IRTCClient2 *This, int *plMaxBitrate);HRESULT ( *put_TemporalSpatialTradeOff)(IRTCClient2 *This, int lValue);HRESULT ( *get_TemporalSpatialTradeOff)(IRTCClient2 *This, int *plValue);HRESULT ( *get_NetworkQuality)(IRTCClient2 *This, int *plNetworkQuality);HRESULT ( *StartT120Applet)(IRTCClient2 *This, RTC_T120_APPLET enApplet);HRESULT ( *StopT120Applets)(IRTCClient2 *This);HRESULT ( *get_IsT120AppletRunning)(IRTCClient2 *This, RTC_T120_APPLET enApplet, VARIANT_BOOL *pfRunning);HRESULT ( *get_LocalUserURI)(IRTCClient2 *This, BSTR *pbstrUserURI);HRESULT ( *put_LocalUserURI)(IRTCClient2 *This, BSTR bstrUserURI);HRESULT ( *get_LocalUserName)(IRTCClient2 *This, BSTR *pbstrUserName);HRESULT ( *put_LocalUserName)(IRTCClient2 *This, BSTR bstrUserName);HRESULT ( *PlayRing)(IRTCClient2 *This, RTC_RING_TYPE enType, VARIANT_BOOL bPlay);HRESULT ( *SendDTMF)(IRTCClient2 *This, RTC_DTMF enDTMF);HRESULT ( *InvokeTuningWizard)(IRTCClient2 *This, OAHWND hwndParent);HRESULT ( *get_IsTuned)(IRTCClient2 *This, VARIANT_BOOL *pfTuned);HRESULT ( *put_AnswerMode)(IRTCClient2 *This, RTC_SESSION_TYPE enType, RTC_ANSWER_MODE enMode);HRESULT ( *get_AnswerMode)(IRTCClient2 *This, RTC_SESSION_TYPE enType, RTC_ANSWER_MODE *penMode);HRESULT ( *InvokeTuningWizardEx)(IRTCClient2 *This, OAHWND hwndParent, VARIANT_BOOL fAllowAudio, VARIANT_BOOL fAllowVideo);HRESULT ( *get_Version)(IRTCClient2 *This, int *plVersion);HRESULT ( *put_ClientName)(IRTCClient2 *This, BSTR bstrClientName);HRESULT ( *put_ClientCurVer)(IRTCClient2 *This, BSTR bstrClientCurVer);HRESULT ( *InitializeEx)(IRTCClient2 *This, int lFlags);HRESULT ( *CreateSessionWithDescription)(IRTCClient2 *This, BSTR bstrContentType, BSTR bstrSessionDescription, IRTCProfile *pProfile, int lFlags, IRTCSession2 **ppSession2);HRESULT ( *SetSessionDescriptionManager)(IRTCClient2 *This, IRTCSessionDescriptionManager *pSessionDescriptionManager);HRESULT ( *put_PreferredSecurityLevel)(IRTCClient2 *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL enSecurityLevel);HRESULT ( *get_PreferredSecurityLevel)(IRTCClient2 *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL *penSecurityLevel);HRESULT ( *put_AllowedPorts)(IRTCClient2 *This, int lTransport, RTC_LISTEN_MODE enListenMode);HRESULT ( *get_AllowedPorts)(IRTCClient2 *This, int lTransport, RTC_LISTEN_MODE *penListenMode);};
struct IShellView2Vtbl {HRESULT ( *QueryInterface)(IShellView2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellView2 *This);ULONG ( *Release)(IShellView2 *This);HRESULT ( *GetWindow)(IShellView2 *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellView2 *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView2 *This, LPMSG lpmsg);HRESULT ( *EnableModeless)(IShellView2 *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView2 *This, UINT uState);HRESULT ( *Refresh)(IShellView2 *This);HRESULT ( *CreateViewWindow)(IShellView2 *This, IShellView *psvPrevious, LPCFOLDERSETTINGS lpfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView2 *This);HRESULT ( *GetCurrentInfo)(IShellView2 *This, LPFOLDERSETTINGS lpfs);HRESULT ( *AddPropertySheetPages)(IShellView2 *This, DWORD dwReserved, LPFNSVADDPROPSHEETPAGE lpfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView2 *This);HRESULT ( *SelectItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, UINT uFlags);HRESULT ( *GetItemObject)(IShellView2 *This, UINT uItem,  IID * riid, void **ppv);HRESULT ( *GetView)(IShellView2 *This, SHELLVIEWID *pvid, ULONG uView);HRESULT ( *CreateViewWindow2)(IShellView2 *This, LPSV2CVW2_PARAMS lpParams);HRESULT ( *HandleRename)(IShellView2 *This, LPCITEMIDLIST pidlNew);HRESULT ( *SelectAndPositionItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, UINT uFlags, POINT *ppt);};
struct IScheduleGroupVtbl {HRESULT ( *QueryInterface)(IScheduleGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScheduleGroup *This);ULONG ( *Release)(IScheduleGroup *This);HRESULT ( *SetAttributes)(IScheduleGroup *This, PTASK_TRIGGER pTaskTrigger, PTASK_DATA pTaskData, PNOTIFICATIONCOOKIE pGroupCookie, PGROUPINFO pGroupInfo, GROUPMODE grfGroupMode);HRESULT ( *GetAttributes)(IScheduleGroup *This, PTASK_TRIGGER pTaskTrigger, PTASK_DATA pTaskData, PNOTIFICATIONCOOKIE pGroupCookie, PGROUPINFO pGroupInfo, GROUPMODE *pgrfGroupMode, LONG *pElements);HRESULT ( *AddNotification)(IScheduleGroup *This, LPNOTIFICATION pNotification,  CLSID * rNotificationDest, DELIVERMODE deliverMode, LPCLSID pClsidSender, LPNOTIFICATIONSINK pReportNotfctnSink, LPNOTIFICATIONREPORT *ppNotfctnReport, PNOTIFICATIONCOOKIE pNotificationCookie, PTASK_DATA pTaskData);HRESULT ( *FindNotification)(IScheduleGroup *This, PNOTIFICATIONCOOKIE pNotificatioCookie, PNOTIFICATIONITEM pNotificationItem, DWORD dwReserved);HRESULT ( *RevokeNotification)(IScheduleGroup *This, PNOTIFICATIONCOOKIE pnotificationCookie, PNOTIFICATIONITEM pschedulNotification, DWORD dwReserved);HRESULT ( *GetEnumNotification)(IScheduleGroup *This, DWORD grfFlags, LPENUMNOTIFICATION *ppEnumNotification);};
struct IActiveIME2Vtbl {HRESULT ( *QueryInterface)(IActiveIME2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIME2 *This);ULONG ( *Release)(IActiveIME2 *This);HRESULT ( *Inquire)(IActiveIME2 *This, DWORD dwSystemInfoFlags, IMEINFO *pIMEInfo, LPWSTR szWndClass, DWORD *pdwPrivate);HRESULT ( *ConversionList)(IActiveIME2 *This, HIMC hIMC, LPWSTR szSource, UINT uFlag, UINT uBufLen, CANDIDATELIST *pDest, UINT *puCopied);HRESULT ( *Configure)(IActiveIME2 *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDW *pRegisterWord);HRESULT ( *Destroy)(IActiveIME2 *This, UINT uReserved);HRESULT ( *Escape)(IActiveIME2 *This, HIMC hIMC, UINT uEscape, void *pData, LRESULT *plResult);HRESULT ( *SetActiveContext)(IActiveIME2 *This, HIMC hIMC, BOOL fFlag);HRESULT ( *ProcessKey)(IActiveIME2 *This, HIMC hIMC, UINT uVirKey, DWORD lParam, BYTE *pbKeyState);HRESULT ( *Notify)(IActiveIME2 *This, HIMC hIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);HRESULT ( *Select)(IActiveIME2 *This, HIMC hIMC, BOOL fSelect);HRESULT ( *SetCompositionString)(IActiveIME2 *This, HIMC hIMC, DWORD dwIndex, void *pComp, DWORD dwCompLen, void *pRead, DWORD dwReadLen);HRESULT ( *ToAsciiEx)(IActiveIME2 *This, UINT uVirKey, UINT uScanCode, BYTE *pbKeyState, UINT fuState, HIMC hIMC, DWORD *pdwTransBuf, UINT *puSize);HRESULT ( *RegisterWord)(IActiveIME2 *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szString);HRESULT ( *UnregisterWord)(IActiveIME2 *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szString);HRESULT ( *GetRegisterWordStyle)(IActiveIME2 *This, UINT nItem, STYLEBUFW *pStyleBuf, UINT *puBufSize);HRESULT ( *EnumRegisterWord)(IActiveIME2 *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister, LPVOID pData, IEnumRegisterWordW **ppEnum);HRESULT ( *GetCodePageA)(IActiveIME2 *This, UINT *uCodePage);HRESULT ( *GetLangId)(IActiveIME2 *This, LANGID *plid);HRESULT ( *Sleep)(IActiveIME2 *This);HRESULT ( *Unsleep)(IActiveIME2 *This, BOOL fDead);};
struct IDirectDrawVtbl {HRESULT ( *QueryInterface)(IDirectDraw *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw *This);ULONG ( *Release)(IDirectDraw *This);HRESULT ( *Compact)(IDirectDraw *This);HRESULT ( *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw *This);HRESULT ( *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw *This, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);};
struct IActiveIMEVtbl {HRESULT ( *QueryInterface)(IActiveIME *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIME *This);ULONG ( *Release)(IActiveIME *This);HRESULT ( *Inquire)(IActiveIME *This, DWORD dwSystemInfoFlags, IMEINFO *pIMEInfo, LPWSTR szWndClass, DWORD *pdwPrivate);HRESULT ( *ConversionList)(IActiveIME *This, HIMC hIMC, LPWSTR szSource, UINT uFlag, UINT uBufLen, CANDIDATELIST *pDest, UINT *puCopied);HRESULT ( *Configure)(IActiveIME *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDW *pRegisterWord);HRESULT ( *Destroy)(IActiveIME *This, UINT uReserved);HRESULT ( *Escape)(IActiveIME *This, HIMC hIMC, UINT uEscape, void *pData, LRESULT *plResult);HRESULT ( *SetActiveContext)(IActiveIME *This, HIMC hIMC, BOOL fFlag);HRESULT ( *ProcessKey)(IActiveIME *This, HIMC hIMC, UINT uVirKey, DWORD lParam, BYTE *pbKeyState);HRESULT ( *Notify)(IActiveIME *This, HIMC hIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);HRESULT ( *Select)(IActiveIME *This, HIMC hIMC, BOOL fSelect);HRESULT ( *SetCompositionString)(IActiveIME *This, HIMC hIMC, DWORD dwIndex, void *pComp, DWORD dwCompLen, void *pRead, DWORD dwReadLen);HRESULT ( *ToAsciiEx)(IActiveIME *This, UINT uVirKey, UINT uScanCode, BYTE *pbKeyState, UINT fuState, HIMC hIMC, DWORD *pdwTransBuf, UINT *puSize);HRESULT ( *RegisterWord)(IActiveIME *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szString);HRESULT ( *UnregisterWord)(IActiveIME *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szString);HRESULT ( *GetRegisterWordStyle)(IActiveIME *This, UINT nItem, STYLEBUFW *pStyleBuf, UINT *puBufSize);HRESULT ( *EnumRegisterWord)(IActiveIME *This, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister, LPVOID pData, IEnumRegisterWordW **ppEnum);HRESULT ( *GetCodePageA)(IActiveIME *This, UINT *uCodePage);HRESULT ( *GetLangId)(IActiveIME *This, LANGID *plid);};
struct _SECURITY_FUNCTION_TABLE_A {unsigned int dwVersion;ENUMERATE_SECURITY_PACKAGES_FN_A EnumerateSecurityPackagesA;QUERY_CREDENTIALS_ATTRIBUTES_FN_A QueryCredentialsAttributesA;ACQUIRE_CREDENTIALS_HANDLE_FN_A AcquireCredentialsHandleA;FREE_CREDENTIALS_HANDLE_FN FreeCredentialsHandle;void *Reserved2;INITIALIZE_SECURITY_CONTEXT_FN_A InitializeSecurityContextA;ACCEPT_SECURITY_CONTEXT_FN AcceptSecurityContext;COMPLETE_AUTH_TOKEN_FN CompleteAuthToken;DELETE_SECURITY_CONTEXT_FN DeleteSecurityContext;APPLY_CONTROL_TOKEN_FN ApplyControlToken;QUERY_CONTEXT_ATTRIBUTES_FN_A QueryContextAttributesA;IMPERSONATE_SECURITY_CONTEXT_FN ImpersonateSecurityContext;REVERT_SECURITY_CONTEXT_FN RevertSecurityContext;MAKE_SIGNATURE_FN MakeSignature;VERIFY_SIGNATURE_FN VerifySignature;FREE_CONTEXT_BUFFER_FN FreeContextBuffer;QUERY_SECURITY_PACKAGE_INFO_FN_A QuerySecurityPackageInfoA;void *Reserved3;void *Reserved4;void *Reserved5;void *Reserved6;void *Reserved7;void *Reserved8;QUERY_SECURITY_CONTEXT_TOKEN_FN QuerySecurityContextToken;ENCRYPT_MESSAGE_FN EncryptMessage;DECRYPT_MESSAGE_FN DecryptMessage;};
struct _SECURITY_FUNCTION_TABLE_W {unsigned int dwVersion;ENUMERATE_SECURITY_PACKAGES_FN_W EnumerateSecurityPackagesW;QUERY_CREDENTIALS_ATTRIBUTES_FN_W QueryCredentialsAttributesW;ACQUIRE_CREDENTIALS_HANDLE_FN_W AcquireCredentialsHandleW;FREE_CREDENTIALS_HANDLE_FN FreeCredentialsHandle;void *Reserved2;INITIALIZE_SECURITY_CONTEXT_FN_W InitializeSecurityContextW;ACCEPT_SECURITY_CONTEXT_FN AcceptSecurityContext;COMPLETE_AUTH_TOKEN_FN CompleteAuthToken;DELETE_SECURITY_CONTEXT_FN DeleteSecurityContext;APPLY_CONTROL_TOKEN_FN ApplyControlToken;QUERY_CONTEXT_ATTRIBUTES_FN_W QueryContextAttributesW;IMPERSONATE_SECURITY_CONTEXT_FN ImpersonateSecurityContext;REVERT_SECURITY_CONTEXT_FN RevertSecurityContext;MAKE_SIGNATURE_FN MakeSignature;VERIFY_SIGNATURE_FN VerifySignature;FREE_CONTEXT_BUFFER_FN FreeContextBuffer;QUERY_SECURITY_PACKAGE_INFO_FN_W QuerySecurityPackageInfoW;void *Reserved3;void *Reserved4;void *Reserved5;void *Reserved6;void *Reserved7;void *Reserved8;QUERY_SECURITY_CONTEXT_TOKEN_FN QuerySecurityContextToken;ENCRYPT_MESSAGE_FN EncryptMessage;DECRYPT_MESSAGE_FN DecryptMessage;};
struct IMultiLanguage2Vtbl {HRESULT ( *QueryInterface)(IMultiLanguage2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiLanguage2 *This);ULONG ( *Release)(IMultiLanguage2 *This);HRESULT ( *GetNumberOfCodePageInfo)(IMultiLanguage2 *This, UINT *pcCodePage);HRESULT ( *GetCodePageInfo)(IMultiLanguage2 *This, UINT uiCodePage, LANGID LangId, PMIMECPINFO pCodePageInfo);HRESULT ( *GetFamilyCodePage)(IMultiLanguage2 *This, UINT uiCodePage, UINT *puiFamilyCodePage);HRESULT ( *EnumCodePages)(IMultiLanguage2 *This, DWORD grfFlags, LANGID LangId, IEnumCodePage **ppEnumCodePage);HRESULT ( *GetCharsetInfo)(IMultiLanguage2 *This, BSTR Charset, PMIMECSETINFO pCharsetInfo);HRESULT ( *IsConvertible)(IMultiLanguage2 *This, DWORD dwSrcEncoding, DWORD dwDstEncoding);HRESULT ( *ConvertString)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwSrcEncoding, DWORD dwDstEncoding, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringToUnicode)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringFromUnicode)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringReset)(IMultiLanguage2 *This);HRESULT ( *GetRfc1766FromLcid)(IMultiLanguage2 *This, LCID Locale, BSTR *pbstrRfc1766);HRESULT ( *GetLcidFromRfc1766)(IMultiLanguage2 *This, LCID *pLocale, BSTR bstrRfc1766);HRESULT ( *EnumRfc1766)(IMultiLanguage2 *This, LANGID LangId, IEnumRfc1766 **ppEnumRfc1766);HRESULT ( *GetRfc1766Info)(IMultiLanguage2 *This, LCID Locale, LANGID LangId, PRFC1766INFO pRfc1766Info);HRESULT ( *CreateConvertCharset)(IMultiLanguage2 *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty, IMLangConvertCharset **ppMLangConvertCharset);HRESULT ( *ConvertStringInIStream)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwFlag, WCHAR *lpFallBack, DWORD dwSrcEncoding, DWORD dwDstEncoding, IStream *pstmIn, IStream *pstmOut);HRESULT ( *ConvertStringToUnicodeEx)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize, DWORD dwFlag, WCHAR *lpFallBack);HRESULT ( *ConvertStringFromUnicodeEx)(IMultiLanguage2 *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize, DWORD dwFlag, WCHAR *lpFallBack);HRESULT ( *DetectCodepageInIStream)(IMultiLanguage2 *This, DWORD dwFlag, DWORD dwPrefWinCodePage, IStream *pstmIn, DetectEncodingInfo *lpEncoding, INT *pnScores);HRESULT ( *DetectInputCodepage)(IMultiLanguage2 *This, DWORD dwFlag, DWORD dwPrefWinCodePage, CHAR *pSrcStr, INT *pcSrcSize, DetectEncodingInfo *lpEncoding, INT *pnScores);HRESULT ( *ValidateCodePage)(IMultiLanguage2 *This, UINT uiCodePage, HWND hwnd);HRESULT ( *GetCodePageDescription)(IMultiLanguage2 *This, UINT uiCodePage, LCID lcid, LPWSTR lpWideCharStr, int cchWideChar);HRESULT ( *IsCodePageInstallable)(IMultiLanguage2 *This, UINT uiCodePage);HRESULT ( *SetMimeDBSource)(IMultiLanguage2 *This, MIMECONTF dwSource);HRESULT ( *GetNumberOfScripts)(IMultiLanguage2 *This, UINT *pnScripts);HRESULT ( *EnumScripts)(IMultiLanguage2 *This, DWORD dwFlags, LANGID LangId, IEnumScript **ppEnumScript);HRESULT ( *ValidateCodePageEx)(IMultiLanguage2 *This, UINT uiCodePage, HWND hwnd, DWORD dwfIODControl);};
struct IDirectDraw2Vtbl {HRESULT ( *QueryInterface)(IDirectDraw2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw2 *This);ULONG ( *Release)(IDirectDraw2 *This);HRESULT ( *Compact)(IDirectDraw2 *This);HRESULT ( *CreateClipper)(IDirectDraw2 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw2 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw2 *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw2 *This);HRESULT ( *GetCaps)(IDirectDraw2 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw2 *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw2 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw2 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw2 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw2 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw2 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw2 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw2 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw2 *This, LPDDSCAPS, LPDWORD, LPDWORD);};
struct IMsgStoreVtbl {HRESULT ( *QueryInterface)(IMsgStore *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMsgStore *This);ULONG ( *Release)(IMsgStore *This);HRESULT ( *GetLastError)(IMsgStore *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMsgStore *This, ULONG ulFlags);HRESULT ( *GetProps)(IMsgStore *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMsgStore *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMsgStore *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMsgStore *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMsgStore *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMsgStore *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMsgStore *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMsgStore *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMsgStore *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *Advise)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMsgStore *This, ULONG ulConnection);HRESULT ( *CompareEntryIDs)(IMsgStore *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *OpenEntry)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetReceiveFolder)(IMsgStore *This, LPTSTR lpszMessageClass, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetReceiveFolder)(IMsgStore *This, LPTSTR lpszMessageClass, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID, LPTSTR *lppszExplicitClass);HRESULT ( *GetReceiveFolderTable)(IMsgStore *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *StoreLogoff)(IMsgStore *This, ULONG *lpulFlags);HRESULT ( *AbortSubmit)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags);HRESULT ( *GetOutgoingQueue)(IMsgStore *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *SetLockState)(IMsgStore *This, LPMESSAGE lpMessage, ULONG ulLockState);HRESULT ( *FinishedMsg)(IMsgStore *This, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *NotifyNewMail)(IMsgStore *This, LPNOTIFICATION_WABSDEFS lpNotification);};
union tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E {LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;BSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;SAFEARRAY *parray;BYTE *pbVal;SHORT *piVal;LONG *plVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;SAFEARRAY **pparray;VARIANT *pvarVal;PVOID byref;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578 __anonymous0;};
struct IMultiLanguage3Vtbl {HRESULT ( *QueryInterface)(IMultiLanguage3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiLanguage3 *This);ULONG ( *Release)(IMultiLanguage3 *This);HRESULT ( *GetNumberOfCodePageInfo)(IMultiLanguage3 *This, UINT *pcCodePage);HRESULT ( *GetCodePageInfo)(IMultiLanguage3 *This, UINT uiCodePage, LANGID LangId, PMIMECPINFO pCodePageInfo);HRESULT ( *GetFamilyCodePage)(IMultiLanguage3 *This, UINT uiCodePage, UINT *puiFamilyCodePage);HRESULT ( *EnumCodePages)(IMultiLanguage3 *This, DWORD grfFlags, LANGID LangId, IEnumCodePage **ppEnumCodePage);HRESULT ( *GetCharsetInfo)(IMultiLanguage3 *This, BSTR Charset, PMIMECSETINFO pCharsetInfo);HRESULT ( *IsConvertible)(IMultiLanguage3 *This, DWORD dwSrcEncoding, DWORD dwDstEncoding);HRESULT ( *ConvertString)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwSrcEncoding, DWORD dwDstEncoding, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringToUnicode)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringFromUnicode)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringReset)(IMultiLanguage3 *This);HRESULT ( *GetRfc1766FromLcid)(IMultiLanguage3 *This, LCID Locale, BSTR *pbstrRfc1766);HRESULT ( *GetLcidFromRfc1766)(IMultiLanguage3 *This, LCID *pLocale, BSTR bstrRfc1766);HRESULT ( *EnumRfc1766)(IMultiLanguage3 *This, LANGID LangId, IEnumRfc1766 **ppEnumRfc1766);HRESULT ( *GetRfc1766Info)(IMultiLanguage3 *This, LCID Locale, LANGID LangId, PRFC1766INFO pRfc1766Info);HRESULT ( *CreateConvertCharset)(IMultiLanguage3 *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty, IMLangConvertCharset **ppMLangConvertCharset);HRESULT ( *ConvertStringInIStream)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwFlag, WCHAR *lpFallBack, DWORD dwSrcEncoding, DWORD dwDstEncoding, IStream *pstmIn, IStream *pstmOut);HRESULT ( *ConvertStringToUnicodeEx)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize, DWORD dwFlag, WCHAR *lpFallBack);HRESULT ( *ConvertStringFromUnicodeEx)(IMultiLanguage3 *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize, DWORD dwFlag, WCHAR *lpFallBack);HRESULT ( *DetectCodepageInIStream)(IMultiLanguage3 *This, DWORD dwFlag, DWORD dwPrefWinCodePage, IStream *pstmIn, DetectEncodingInfo *lpEncoding, INT *pnScores);HRESULT ( *DetectInputCodepage)(IMultiLanguage3 *This, DWORD dwFlag, DWORD dwPrefWinCodePage, CHAR *pSrcStr, INT *pcSrcSize, DetectEncodingInfo *lpEncoding, INT *pnScores);HRESULT ( *ValidateCodePage)(IMultiLanguage3 *This, UINT uiCodePage, HWND hwnd);HRESULT ( *GetCodePageDescription)(IMultiLanguage3 *This, UINT uiCodePage, LCID lcid, LPWSTR lpWideCharStr, int cchWideChar);HRESULT ( *IsCodePageInstallable)(IMultiLanguage3 *This, UINT uiCodePage);HRESULT ( *SetMimeDBSource)(IMultiLanguage3 *This, MIMECONTF dwSource);HRESULT ( *GetNumberOfScripts)(IMultiLanguage3 *This, UINT *pnScripts);HRESULT ( *EnumScripts)(IMultiLanguage3 *This, DWORD dwFlags, LANGID LangId, IEnumScript **ppEnumScript);HRESULT ( *ValidateCodePageEx)(IMultiLanguage3 *This, UINT uiCodePage, HWND hwnd, DWORD dwfIODControl);HRESULT ( *DetectOutboundCodePage)(IMultiLanguage3 *This, DWORD dwFlags, LPCWSTR lpWideCharStr, UINT cchWideChar, UINT *puiPreferredCodePages, UINT nPreferredCodePages, UINT *puiDetectedCodePages, UINT *pnDetectedCodePages, WCHAR *lpSpecialChar);HRESULT ( *DetectOutboundCodePageInIStream)(IMultiLanguage3 *This, DWORD dwFlags, IStream *pStrIn, UINT *puiPreferredCodePages, UINT nPreferredCodePages, UINT *puiDetectedCodePages, UINT *pnDetectedCodePages, WCHAR *lpSpecialChar);};
struct IABContainerVtbl {HRESULT ( *QueryInterface)(IABContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IABContainer *This);ULONG ( *Release)(IABContainer *This);HRESULT ( *GetLastError)(IABContainer *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IABContainer *This, ULONG ulFlags);HRESULT ( *GetProps)(IABContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IABContainer *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IABContainer *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IABContainer *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IABContainer *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IABContainer *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IABContainer *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IABContainer *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IABContainer *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IABContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IABContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IABContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IABContainer *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IABContainer *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateEntry)(IABContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulCreateFlags, LPMAPIPROP *lppMAPIPropEntry);HRESULT ( *CopyEntries)(IABContainer *This, LPENTRYLIST lpEntries, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteEntries)(IABContainer *This, LPENTRYLIST lpEntries, ULONG ulFlags);HRESULT ( *ResolveNames)(IABContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, LPADRLIST lpAdrList, LPFlagList lpFlagList);};
struct IDistListVtbl {HRESULT ( *QueryInterface)(IDistList *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDistList *This);ULONG ( *Release)(IDistList *This);HRESULT ( *GetLastError)(IDistList *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IDistList *This, ULONG ulFlags);HRESULT ( *GetProps)(IDistList *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IDistList *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IDistList *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IDistList *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IDistList *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IDistList *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IDistList *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IDistList *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IDistList *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IDistList *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IDistList *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IDistList *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IDistList *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IDistList *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateEntry)(IDistList *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulCreateFlags, LPMAPIPROP *lppMAPIPropEntry);HRESULT ( *CopyEntries)(IDistList *This, LPENTRYLIST lpEntries, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteEntries)(IDistList *This, LPENTRYLIST lpEntries, ULONG ulFlags);HRESULT ( *ResolveNames)(IDistList *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, LPADRLIST lpAdrList, LPFlagList lpFlagList);};
struct IDirectDraw4Vtbl {HRESULT ( *QueryInterface)(IDirectDraw4 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw4 *This);ULONG ( *Release)(IDirectDraw4 *This);HRESULT ( *Compact)(IDirectDraw4 *This);HRESULT ( *CreateClipper)(IDirectDraw4 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw4 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw4 *This, LPDDSURFACEDESC2, LPDIRECTDRAWSURFACE4 *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4, LPDIRECTDRAWSURFACE4 *);HRESULT ( *EnumDisplayModes)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMMODESCALLBACK2);HRESULT ( *EnumSurfaces)(IDirectDraw4 *This, DWORD, LPDDSURFACEDESC2, LPVOID, LPDDENUMSURFACESCALLBACK2);HRESULT ( *FlipToGDISurface)(IDirectDraw4 *This);HRESULT ( *GetCaps)(IDirectDraw4 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw4 *This, LPDDSURFACEDESC2);HRESULT ( *GetFourCCCodes)(IDirectDraw4 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw4 *This, LPDIRECTDRAWSURFACE4 *);HRESULT ( *GetMonitorFrequency)(IDirectDraw4 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw4 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw4 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw4 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw4 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw4 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw4 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw4 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw4 *This, LPDDSCAPS2, LPDWORD, LPDWORD);HRESULT ( *GetSurfaceFromDC)(IDirectDraw4 *This, HDC, LPDIRECTDRAWSURFACE4 *);HRESULT ( *RestoreAllSurfaces)(IDirectDraw4 *This);HRESULT ( *TestCooperativeLevel)(IDirectDraw4 *This);HRESULT ( *GetDeviceIdentifier)(IDirectDraw4 *This, LPDDDEVICEIDENTIFIER, DWORD);};
struct IMAPIFolderVtbl {HRESULT ( *QueryInterface)(IMAPIFolder *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFolder *This);ULONG ( *Release)(IMAPIFolder *This);HRESULT ( *GetLastError)(IMAPIFolder *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIFolder *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIFolder *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIFolder *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIFolder *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIFolder *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIFolder *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIFolder *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIFolder *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIFolder *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIFolder *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IMAPIFolder *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IMAPIFolder *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IMAPIFolder *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IMAPIFolder *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateMessage)(IMAPIFolder *This, LPCIID lpInterface, ULONG ulFlags, LPMESSAGE *lppMessage);HRESULT ( *CopyMessages)(IMAPIFolder *This, LPENTRYLIST lpMsgList, LPCIID lpInterface, LPVOID lpDestFolder, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteMessages)(IMAPIFolder *This, LPENTRYLIST lpMsgList, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *CreateFolder)(IMAPIFolder *This, ULONG ulFolderType, LPTSTR lpszFolderName, LPTSTR lpszFolderComment, LPCIID lpInterface, ULONG ulFlags, LPMAPIFOLDER *lppFolder);HRESULT ( *CopyFolder)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, LPVOID lpDestFolder, LPTSTR lpszNewFolderName, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteFolder)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *SetReadFlags)(IMAPIFolder *This, LPENTRYLIST lpMsgList, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *GetMessageStatus)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags, ULONG *lpulMessageStatus);HRESULT ( *SetMessageStatus)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulNewStatus, ULONG ulNewStatusMask, ULONG *lpulOldStatus);HRESULT ( *SaveContentsSort)(IMAPIFolder *This, LPSSortOrderSet lpSortCriteria, ULONG ulFlags);HRESULT ( *EmptyFolder)(IMAPIFolder *This, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);};
struct INotificationMgrVtbl {HRESULT ( *QueryInterface)(INotificationMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INotificationMgr *This);ULONG ( *Release)(INotificationMgr *This);HRESULT ( *RegisterNotificationSink)(INotificationMgr *This, LPNOTIFICATIONSINK pNotfctnSink, LPCLSID pNotificationDest, NOTFSINKMODE NotfctnSinkMode, ULONG cNotifications, PNOTIFICATIONTYPE pNotificationIDs, PNOTIFICATIONCOOKIE pRegisterCookie, DWORD dwReserved);HRESULT ( *UnregisterNotificationSink)(INotificationMgr *This, PNOTIFICATIONCOOKIE pRegisterCookie);HRESULT ( *CreateNotification)(INotificationMgr *This, REFNOTIFICATIONTYPE rNotificationType, NOTIFICATIONFLAGS NotificationFlags, LPUNKNOWN pUnkOuter, LPNOTIFICATION *ppNotification, DWORD dwReserved);HRESULT ( *FindNotification)(INotificationMgr *This, PNOTIFICATIONCOOKIE pNotificatioCookie, PNOTIFICATIONITEM pNotificationItem, DWORD grfEnumMode);HRESULT ( *DeliverNotification)(INotificationMgr *This, LPNOTIFICATION pNotification,  CLSID * rNotificationDest, DELIVERMODE deliverMode, LPNOTIFICATIONSINK pReportNotfctnSink, LPNOTIFICATIONREPORT *ppNotfctnReport, PTASK_DATA pTaskData);HRESULT ( *ScheduleNotification)(INotificationMgr *This, LPNOTIFICATION pNotification,  CLSID * rNotificationDest, PTASK_TRIGGER pTaskTrigger, PTASK_DATA pTaskData, DELIVERMODE deliverMode, LPCLSID pClsidSender, LPNOTIFICATIONSINK pReportNotfctnSink, LPNOTIFICATIONREPORT *ppNotfctnReport, PNOTIFICATIONCOOKIE pNotificationCookie, DWORD dwReserved);HRESULT ( *UpdateNotification)(INotificationMgr *This, PNOTIFICATIONCOOKIE pNotificationCookie, PTASK_TRIGGER pTaskTrigger, PTASK_DATA pTaskData, DELIVERMODE deliverMode, DWORD dwReserved);HRESULT ( *RevokeNotification)(INotificationMgr *This, PNOTIFICATIONCOOKIE pnotificationCookie, PNOTIFICATIONITEM pNotificationItem, DWORD grfEnumMode);HRESULT ( *GetEnumNotification)(INotificationMgr *This, DWORD grfEnumFlags, LPENUMNOTIFICATION *ppEnumNotification);HRESULT ( *CreateScheduleGroup)(INotificationMgr *This, DWORD grfGroupCreateFlags, LPSCHEDULEGROUP *ppSchGroup, PNOTIFICATIONCOOKIE pGroupCookie, DWORD dwReserved);HRESULT ( *FindScheduleGroup)(INotificationMgr *This, PNOTIFICATIONCOOKIE pGroupCookie, LPSCHEDULEGROUP *ppSchGroup, DWORD dwReserved);HRESULT ( *RevokeScheduleGroup)(INotificationMgr *This, PNOTIFICATIONCOOKIE pGroupCookie, LPSCHEDULEGROUP *ppSchGroup, DWORD dwReserved);HRESULT ( *GetEnumScheduleGroup)(INotificationMgr *This, DWORD grfEnumFlags, LPENUMSCHEDULEGROUP *ppEnumScheduleGroup);HRESULT ( *DeliverReport)(INotificationMgr *This, LPNOTIFICATION pNotification, PNOTIFICATIONCOOKIE pRunningNotfCookie, DWORD dwReserved);};
union _PV {short i;LONG l;ULONG ul;float flt;double dbl;unsigned short b;CURRENCY cur;double at;FILETIME ft;LPSTR lpszA;SBinary bin;LPWSTR lpszW;LPGUID lpguid;LARGE_INTEGER li;SShortArray MVi;SLongArray MVl;SRealArray MVflt;SDoubleArray MVdbl;SCurrencyArray MVcur;SAppTimeArray MVat;SDateTimeArray MVft;SBinaryArray MVbin;SLPSTRArray MVszA;SWStringArray MVszW;SGuidArray MVguid;SLargeIntegerArray MVli;SCODE err;LONG x;};
struct IAddrBookVtbl {HRESULT ( *QueryInterface)(IAddrBook *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAddrBook *This);ULONG ( *Release)(IAddrBook *This);HRESULT ( *GetLastError)(IAddrBook *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IAddrBook *This, ULONG ulFlags);HRESULT ( *GetProps)(IAddrBook *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IAddrBook *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IAddrBook *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IAddrBook *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IAddrBook *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IAddrBook *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IAddrBook *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IAddrBook *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IAddrBook *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *OpenEntry)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *CompareEntryIDs)(IAddrBook *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *Advise)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IAddrBook *This, ULONG ulConnection);HRESULT ( *CreateOneOff)(IAddrBook *This, LPTSTR lpszName, LPTSTR lpszAdrType, LPTSTR lpszAddress, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *NewEntry)(IAddrBook *This, ULONG ulUIParam, ULONG ulFlags, ULONG cbEIDContainer, LPENTRYID lpEIDContainer, ULONG cbEIDNewEntryTpl, LPENTRYID lpEIDNewEntryTpl, ULONG *lpcbEIDNewEntry, LPENTRYID *lppEIDNewEntry);HRESULT ( *ResolveName)(IAddrBook *This, ULONG_PTR ulUIParam, ULONG ulFlags, LPTSTR lpszNewEntryTitle, LPADRLIST lpAdrList);HRESULT ( *Address)(IAddrBook *This, ULONG *lpulUIParam, LPADRPARM lpAdrParms, LPADRLIST *lppAdrList);HRESULT ( *Details)(IAddrBook *This, ULONG *lpulUIParam, LPFNDISMISS lpfnDismiss, LPVOID lpvDismissContext, ULONG cbEntryID, LPENTRYID lpEntryID, LPFNBUTTON lpfButtonCallback, LPVOID lpvButtonContext, LPTSTR lpszButtonText, ULONG ulFlags);HRESULT ( *RecipOptions)(IAddrBook *This, ULONG ulUIParam, ULONG ulFlags, LPADRENTRY lpRecip);HRESULT ( *QueryDefaultRecipOpt)(IAddrBook *This, LPTSTR lpszAdrType, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppOptions);HRESULT ( *GetPAB)(IAddrBook *This, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *SetPAB)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetDefaultDir)(IAddrBook *This, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *SetDefaultDir)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetSearchPath)(IAddrBook *This, ULONG ulFlags, LPSRowSet *lppSearchPath);HRESULT ( *SetSearchPath)(IAddrBook *This, ULONG ulFlags, LPSRowSet lpSearchPath);HRESULT ( *PrepareRecips)(IAddrBook *This, ULONG ulFlags, LPSPropTagArray lpPropTagArray, LPADRLIST lpRecipList);};
struct IActiveIMMAppVtbl {HRESULT ( *QueryInterface)(IActiveIMMApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIMMApp *This);ULONG ( *Release)(IActiveIMMApp *This);HRESULT ( *AssociateContext)(IActiveIMMApp *This, HWND hWnd, HIMC hIME, HIMC *phPrev);HRESULT ( *ConfigureIMEA)(IActiveIMMApp *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDA *pData);HRESULT ( *ConfigureIMEW)(IActiveIMMApp *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDW *pData);HRESULT ( *CreateContext)(IActiveIMMApp *This, HIMC *phIMC);HRESULT ( *DestroyContext)(IActiveIMMApp *This, HIMC hIME);HRESULT ( *EnumRegisterWordA)(IActiveIMMApp *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szRegister, LPVOID pData, IEnumRegisterWordA **pEnum);HRESULT ( *EnumRegisterWordW)(IActiveIMMApp *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister, LPVOID pData, IEnumRegisterWordW **pEnum);HRESULT ( *EscapeA)(IActiveIMMApp *This, HKL hKL, HIMC hIMC, UINT uEscape, LPVOID pData, LRESULT *plResult);HRESULT ( *EscapeW)(IActiveIMMApp *This, HKL hKL, HIMC hIMC, UINT uEscape, LPVOID pData, LRESULT *plResult);HRESULT ( *GetCandidateListA)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, UINT uBufLen, CANDIDATELIST *pCandList, UINT *puCopied);HRESULT ( *GetCandidateListW)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, UINT uBufLen, CANDIDATELIST *pCandList, UINT *puCopied);HRESULT ( *GetCandidateListCountA)(IActiveIMMApp *This, HIMC hIMC, DWORD *pdwListSize, DWORD *pdwBufLen);HRESULT ( *GetCandidateListCountW)(IActiveIMMApp *This, HIMC hIMC, DWORD *pdwListSize, DWORD *pdwBufLen);HRESULT ( *GetCandidateWindow)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, CANDIDATEFORM *pCandidate);HRESULT ( *GetCompositionFontA)(IActiveIMMApp *This, HIMC hIMC, LOGFONTA *plf);HRESULT ( *GetCompositionFontW)(IActiveIMMApp *This, HIMC hIMC, LOGFONTW *plf);HRESULT ( *GetCompositionStringA)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LONG *plCopied, LPVOID pBuf);HRESULT ( *GetCompositionStringW)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LONG *plCopied, LPVOID pBuf);HRESULT ( *GetCompositionWindow)(IActiveIMMApp *This, HIMC hIMC, COMPOSITIONFORM *pCompForm);HRESULT ( *GetContext)(IActiveIMMApp *This, HWND hWnd, HIMC *phIMC);HRESULT ( *GetConversionListA)(IActiveIMMApp *This, HKL hKL, HIMC hIMC, LPSTR pSrc, UINT uBufLen, UINT uFlag, CANDIDATELIST *pDst, UINT *puCopied);HRESULT ( *GetConversionListW)(IActiveIMMApp *This, HKL hKL, HIMC hIMC, LPWSTR pSrc, UINT uBufLen, UINT uFlag, CANDIDATELIST *pDst, UINT *puCopied);HRESULT ( *GetConversionStatus)(IActiveIMMApp *This, HIMC hIMC, DWORD *pfdwConversion, DWORD *pfdwSentence);HRESULT ( *GetDefaultIMEWnd)(IActiveIMMApp *This, HWND hWnd, HWND *phDefWnd);HRESULT ( *GetDescriptionA)(IActiveIMMApp *This, HKL hKL, UINT uBufLen, LPSTR szDescription, UINT *puCopied);HRESULT ( *GetDescriptionW)(IActiveIMMApp *This, HKL hKL, UINT uBufLen, LPWSTR szDescription, UINT *puCopied);HRESULT ( *GetGuideLineA)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LPSTR pBuf, DWORD *pdwResult);HRESULT ( *GetGuideLineW)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LPWSTR pBuf, DWORD *pdwResult);HRESULT ( *GetIMEFileNameA)(IActiveIMMApp *This, HKL hKL, UINT uBufLen, LPSTR szFileName, UINT *puCopied);HRESULT ( *GetIMEFileNameW)(IActiveIMMApp *This, HKL hKL, UINT uBufLen, LPWSTR szFileName, UINT *puCopied);HRESULT ( *GetOpenStatus)(IActiveIMMApp *This, HIMC hIMC);HRESULT ( *GetProperty)(IActiveIMMApp *This, HKL hKL, DWORD fdwIndex, DWORD *pdwProperty);HRESULT ( *GetRegisterWordStyleA)(IActiveIMMApp *This, HKL hKL, UINT nItem, STYLEBUFA *pStyleBuf, UINT *puCopied);HRESULT ( *GetRegisterWordStyleW)(IActiveIMMApp *This, HKL hKL, UINT nItem, STYLEBUFW *pStyleBuf, UINT *puCopied);HRESULT ( *GetStatusWindowPos)(IActiveIMMApp *This, HIMC hIMC, POINT *pptPos);HRESULT ( *GetVirtualKey)(IActiveIMMApp *This, HWND hWnd, UINT *puVirtualKey);HRESULT ( *InstallIMEA)(IActiveIMMApp *This, LPSTR szIMEFileName, LPSTR szLayoutText, HKL *phKL);HRESULT ( *InstallIMEW)(IActiveIMMApp *This, LPWSTR szIMEFileName, LPWSTR szLayoutText, HKL *phKL);HRESULT ( *IsIME)(IActiveIMMApp *This, HKL hKL);HRESULT ( *IsUIMessageA)(IActiveIMMApp *This, HWND hWndIME, UINT msg, WPARAM wParam, LPARAM lParam);HRESULT ( *IsUIMessageW)(IActiveIMMApp *This, HWND hWndIME, UINT msg, WPARAM wParam, LPARAM lParam);HRESULT ( *NotifyIME)(IActiveIMMApp *This, HIMC hIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);HRESULT ( *RegisterWordA)(IActiveIMMApp *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szRegister);HRESULT ( *RegisterWordW)(IActiveIMMApp *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister);HRESULT ( *ReleaseContext)(IActiveIMMApp *This, HWND hWnd, HIMC hIMC);HRESULT ( *SetCandidateWindow)(IActiveIMMApp *This, HIMC hIMC, CANDIDATEFORM *pCandidate);HRESULT ( *SetCompositionFontA)(IActiveIMMApp *This, HIMC hIMC, LOGFONTA *plf);HRESULT ( *SetCompositionFontW)(IActiveIMMApp *This, HIMC hIMC, LOGFONTW *plf);HRESULT ( *SetCompositionStringA)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, LPVOID pComp, DWORD dwCompLen, LPVOID pRead, DWORD dwReadLen);HRESULT ( *SetCompositionStringW)(IActiveIMMApp *This, HIMC hIMC, DWORD dwIndex, LPVOID pComp, DWORD dwCompLen, LPVOID pRead, DWORD dwReadLen);HRESULT ( *SetCompositionWindow)(IActiveIMMApp *This, HIMC hIMC, COMPOSITIONFORM *pCompForm);HRESULT ( *SetConversionStatus)(IActiveIMMApp *This, HIMC hIMC, DWORD fdwConversion, DWORD fdwSentence);HRESULT ( *SetOpenStatus)(IActiveIMMApp *This, HIMC hIMC, BOOL fOpen);HRESULT ( *SetStatusWindowPos)(IActiveIMMApp *This, HIMC hIMC, POINT *pptPos);HRESULT ( *SimulateHotKey)(IActiveIMMApp *This, HWND hWnd, DWORD dwHotKeyID);HRESULT ( *UnregisterWordA)(IActiveIMMApp *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szUnregister);HRESULT ( *UnregisterWordW)(IActiveIMMApp *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szUnregister);HRESULT ( *Activate)(IActiveIMMApp *This, BOOL fRestoreLayout);HRESULT ( *Deactivate)(IActiveIMMApp *This);HRESULT ( *OnDefWindowProc)(IActiveIMMApp *This, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *FilterClientWindows)(IActiveIMMApp *This, ATOM *aaClassList, UINT uSize);HRESULT ( *GetCodePageA)(IActiveIMMApp *This, HKL hKL, UINT *uCodePage);HRESULT ( *GetLangId)(IActiveIMMApp *This, HKL hKL, LANGID *plid);HRESULT ( *AssociateContextEx)(IActiveIMMApp *This, HWND hWnd, HIMC hIMC, DWORD dwFlags);HRESULT ( *DisableIME)(IActiveIMMApp *This, DWORD idThread);HRESULT ( *GetImeMenuItemsA)(IActiveIMMApp *This, HIMC hIMC, DWORD dwFlags, DWORD dwType, IMEMENUITEMINFOA *pImeParentMenu, IMEMENUITEMINFOA *pImeMenu, DWORD dwSize, DWORD *pdwResult);HRESULT ( *GetImeMenuItemsW)(IActiveIMMApp *This, HIMC hIMC, DWORD dwFlags, DWORD dwType, IMEMENUITEMINFOW *pImeParentMenu, IMEMENUITEMINFOW *pImeMenu, DWORD dwSize, DWORD *pdwResult);HRESULT ( *EnumInputContext)(IActiveIMMApp *This, DWORD idThread, IEnumInputContext **ppEnum);};
struct _WSPPROC_TABLE {LPWSPACCEPT lpWSPAccept;LPWSPADDRESSTOSTRING lpWSPAddressToString;LPWSPASYNCSELECT lpWSPAsyncSelect;LPWSPBIND lpWSPBind;LPWSPCANCELBLOCKINGCALL lpWSPCancelBlockingCall;LPWSPCLEANUP lpWSPCleanup;LPWSPCLOSESOCKET lpWSPCloseSocket;LPWSPCONNECT lpWSPConnect;LPWSPDUPLICATESOCKET lpWSPDuplicateSocket;LPWSPENUMNETWORKEVENTS lpWSPEnumNetworkEvents;LPWSPEVENTSELECT lpWSPEventSelect;LPWSPGETOVERLAPPEDRESULT lpWSPGetOverlappedResult;LPWSPGETPEERNAME lpWSPGetPeerName;LPWSPGETSOCKNAME lpWSPGetSockName;LPWSPGETSOCKOPT lpWSPGetSockOpt;LPWSPGETQOSBYNAME lpWSPGetQOSByName;LPWSPIOCTL lpWSPIoctl;LPWSPJOINLEAF lpWSPJoinLeaf;LPWSPLISTEN lpWSPListen;LPWSPRECV lpWSPRecv;LPWSPRECVDISCONNECT lpWSPRecvDisconnect;LPWSPRECVFROM lpWSPRecvFrom;LPWSPSELECT lpWSPSelect;LPWSPSEND lpWSPSend;LPWSPSENDDISCONNECT lpWSPSendDisconnect;LPWSPSENDTO lpWSPSendTo;LPWSPSETSOCKOPT lpWSPSetSockOpt;LPWSPSHUTDOWN lpWSPShutdown;LPWSPSOCKET lpWSPSocket;LPWSPSTRINGTOADDRESS lpWSPStringToAddress;};
struct IDvdInfo2Vtbl {HRESULT ( *QueryInterface)(IDvdInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdInfo2 *This);ULONG ( *Release)(IDvdInfo2 *This);HRESULT ( *GetCurrentDomain)(IDvdInfo2 *This, DVD_DOMAIN *pDomain);HRESULT ( *GetCurrentLocation)(IDvdInfo2 *This, DVD_PLAYBACK_LOCATION2 *pLocation);HRESULT ( *GetTotalTitleTime)(IDvdInfo2 *This, DVD_HMSF_TIMECODE *pTotalTime, ULONG *ulTimeCodeFlags);HRESULT ( *GetCurrentButton)(IDvdInfo2 *This, ULONG *pulButtonsAvailable, ULONG *pulCurrentButton);HRESULT ( *GetCurrentAngle)(IDvdInfo2 *This, ULONG *pulAnglesAvailable, ULONG *pulCurrentAngle);HRESULT ( *GetCurrentAudio)(IDvdInfo2 *This, ULONG *pulStreamsAvailable, ULONG *pulCurrentStream);HRESULT ( *GetCurrentSubpicture)(IDvdInfo2 *This, ULONG *pulStreamsAvailable, ULONG *pulCurrentStream, BOOL *pbIsDisabled);HRESULT ( *GetCurrentUOPS)(IDvdInfo2 *This, ULONG *pulUOPs);HRESULT ( *GetAllSPRMs)(IDvdInfo2 *This, SPRMARRAY *pRegisterArray);HRESULT ( *GetAllGPRMs)(IDvdInfo2 *This, GPRMARRAY *pRegisterArray);HRESULT ( *GetAudioLanguage)(IDvdInfo2 *This, ULONG ulStream, LCID *pLanguage);HRESULT ( *GetSubpictureLanguage)(IDvdInfo2 *This, ULONG ulStream, LCID *pLanguage);HRESULT ( *GetTitleAttributes)(IDvdInfo2 *This, ULONG ulTitle, DVD_MenuAttributes *pMenu, DVD_TitleAttributes *pTitle);HRESULT ( *GetVMGAttributes)(IDvdInfo2 *This, DVD_MenuAttributes *pATR);HRESULT ( *GetCurrentVideoAttributes)(IDvdInfo2 *This, DVD_VideoAttributes *pATR);HRESULT ( *GetAudioAttributes)(IDvdInfo2 *This, ULONG ulStream, DVD_AudioAttributes *pATR);HRESULT ( *GetKaraokeAttributes)(IDvdInfo2 *This, ULONG ulStream, DVD_KaraokeAttributes *pAttributes);HRESULT ( *GetSubpictureAttributes)(IDvdInfo2 *This, ULONG ulStream, DVD_SubpictureAttributes *pATR);HRESULT ( *GetDVDVolumeInfo)(IDvdInfo2 *This, ULONG *pulNumOfVolumes, ULONG *pulVolume, DVD_DISC_SIDE *pSide, ULONG *pulNumOfTitles);HRESULT ( *GetDVDTextNumberOfLanguages)(IDvdInfo2 *This, ULONG *pulNumOfLangs);HRESULT ( *GetDVDTextLanguageInfo)(IDvdInfo2 *This, ULONG ulLangIndex, ULONG *pulNumOfStrings, LCID *pLangCode, enum DVD_TextCharSet *pbCharacterSet);HRESULT ( *GetDVDTextStringAsNative)(IDvdInfo2 *This, ULONG ulLangIndex, ULONG ulStringIndex, BYTE *pbBuffer, ULONG ulMaxBufferSize, ULONG *pulActualSize, enum DVD_TextStringType *pType);HRESULT ( *GetDVDTextStringAsUnicode)(IDvdInfo2 *This, ULONG ulLangIndex, ULONG ulStringIndex, WCHAR *pchwBuffer, ULONG ulMaxBufferSize, ULONG *pulActualSize, enum DVD_TextStringType *pType);HRESULT ( *GetPlayerParentalLevel)(IDvdInfo2 *This, ULONG *pulParentalLevel,BYTE  *    pbCountryCode);HRESULT ( *GetNumberOfChapters)(IDvdInfo2 *This, ULONG ulTitle, ULONG *pulNumOfChapters);HRESULT ( *GetTitleParentalLevels)(IDvdInfo2 *This, ULONG ulTitle, ULONG *pulParentalLevels);HRESULT ( *GetDVDDirectory)(IDvdInfo2 *This, LPWSTR pszwPath, ULONG ulMaxSize, ULONG *pulActualSize);HRESULT ( *IsAudioStreamEnabled)(IDvdInfo2 *This, ULONG ulStreamNum, BOOL *pbEnabled);HRESULT ( *GetDiscID)(IDvdInfo2 *This, LPCWSTR pszwPath, ULONGLONG *pullDiscID);HRESULT ( *GetState)(IDvdInfo2 *This, IDvdState **pStateData);HRESULT ( *GetMenuLanguages)(IDvdInfo2 *This, LCID *pLanguages, ULONG ulMaxLanguages, ULONG *pulActualLanguages);HRESULT ( *GetButtonAtPosition)(IDvdInfo2 *This, POINT point, ULONG *pulButtonIndex);HRESULT ( *GetCmdFromEvent)(IDvdInfo2 *This, LONG_PTR lParam1, IDvdCmd **pCmdObj);HRESULT ( *GetDefaultMenuLanguage)(IDvdInfo2 *This, LCID *pLanguage);HRESULT ( *GetDefaultAudioLanguage)(IDvdInfo2 *This, LCID *pLanguage, DVD_AUDIO_LANG_EXT *pAudioExtension);HRESULT ( *GetDefaultSubpictureLanguage)(IDvdInfo2 *This, LCID *pLanguage, DVD_SUBPICTURE_LANG_EXT *pSubpictureExtension);HRESULT ( *GetDecoderCaps)(IDvdInfo2 *This, DVD_DECODER_CAPS *pCaps);HRESULT ( *GetButtonRect)(IDvdInfo2 *This, ULONG ulButton, RECT *pRect);HRESULT ( *IsSubpictureStreamEnabled)(IDvdInfo2 *This, ULONG ulStreamNum, BOOL *pbEnabled);};
struct IActiveIMMIMEVtbl {HRESULT ( *QueryInterface)(IActiveIMMIME *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveIMMIME *This);ULONG ( *Release)(IActiveIMMIME *This);HRESULT ( *AssociateContext)(IActiveIMMIME *This, HWND hWnd, HIMC hIME, HIMC *phPrev);HRESULT ( *ConfigureIMEA)(IActiveIMMIME *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDA *pData);HRESULT ( *ConfigureIMEW)(IActiveIMMIME *This, HKL hKL, HWND hWnd, DWORD dwMode, REGISTERWORDW *pData);HRESULT ( *CreateContext)(IActiveIMMIME *This, HIMC *phIMC);HRESULT ( *DestroyContext)(IActiveIMMIME *This, HIMC hIME);HRESULT ( *EnumRegisterWordA)(IActiveIMMIME *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szRegister, LPVOID pData, IEnumRegisterWordA **pEnum);HRESULT ( *EnumRegisterWordW)(IActiveIMMIME *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister, LPVOID pData, IEnumRegisterWordW **pEnum);HRESULT ( *EscapeA)(IActiveIMMIME *This, HKL hKL, HIMC hIMC, UINT uEscape, LPVOID pData, LRESULT *plResult);HRESULT ( *EscapeW)(IActiveIMMIME *This, HKL hKL, HIMC hIMC, UINT uEscape, LPVOID pData, LRESULT *plResult);HRESULT ( *GetCandidateListA)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, UINT uBufLen, CANDIDATELIST *pCandList, UINT *puCopied);HRESULT ( *GetCandidateListW)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, UINT uBufLen, CANDIDATELIST *pCandList, UINT *puCopied);HRESULT ( *GetCandidateListCountA)(IActiveIMMIME *This, HIMC hIMC, DWORD *pdwListSize, DWORD *pdwBufLen);HRESULT ( *GetCandidateListCountW)(IActiveIMMIME *This, HIMC hIMC, DWORD *pdwListSize, DWORD *pdwBufLen);HRESULT ( *GetCandidateWindow)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, CANDIDATEFORM *pCandidate);HRESULT ( *GetCompositionFontA)(IActiveIMMIME *This, HIMC hIMC, LOGFONTA *plf);HRESULT ( *GetCompositionFontW)(IActiveIMMIME *This, HIMC hIMC, LOGFONTW *plf);HRESULT ( *GetCompositionStringA)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LONG *plCopied, LPVOID pBuf);HRESULT ( *GetCompositionStringW)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LONG *plCopied, LPVOID pBuf);HRESULT ( *GetCompositionWindow)(IActiveIMMIME *This, HIMC hIMC, COMPOSITIONFORM *pCompForm);HRESULT ( *GetContext)(IActiveIMMIME *This, HWND hWnd, HIMC *phIMC);HRESULT ( *GetConversionListA)(IActiveIMMIME *This, HKL hKL, HIMC hIMC, LPSTR pSrc, UINT uBufLen, UINT uFlag, CANDIDATELIST *pDst, UINT *puCopied);HRESULT ( *GetConversionListW)(IActiveIMMIME *This, HKL hKL, HIMC hIMC, LPWSTR pSrc, UINT uBufLen, UINT uFlag, CANDIDATELIST *pDst, UINT *puCopied);HRESULT ( *GetConversionStatus)(IActiveIMMIME *This, HIMC hIMC, DWORD *pfdwConversion, DWORD *pfdwSentence);HRESULT ( *GetDefaultIMEWnd)(IActiveIMMIME *This, HWND hWnd, HWND *phDefWnd);HRESULT ( *GetDescriptionA)(IActiveIMMIME *This, HKL hKL, UINT uBufLen, LPSTR szDescription, UINT *puCopied);HRESULT ( *GetDescriptionW)(IActiveIMMIME *This, HKL hKL, UINT uBufLen, LPWSTR szDescription, UINT *puCopied);HRESULT ( *GetGuideLineA)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LPSTR pBuf, DWORD *pdwResult);HRESULT ( *GetGuideLineW)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, DWORD dwBufLen, LPWSTR pBuf, DWORD *pdwResult);HRESULT ( *GetIMEFileNameA)(IActiveIMMIME *This, HKL hKL, UINT uBufLen, LPSTR szFileName, UINT *puCopied);HRESULT ( *GetIMEFileNameW)(IActiveIMMIME *This, HKL hKL, UINT uBufLen, LPWSTR szFileName, UINT *puCopied);HRESULT ( *GetOpenStatus)(IActiveIMMIME *This, HIMC hIMC);HRESULT ( *GetProperty)(IActiveIMMIME *This, HKL hKL, DWORD fdwIndex, DWORD *pdwProperty);HRESULT ( *GetRegisterWordStyleA)(IActiveIMMIME *This, HKL hKL, UINT nItem, STYLEBUFA *pStyleBuf, UINT *puCopied);HRESULT ( *GetRegisterWordStyleW)(IActiveIMMIME *This, HKL hKL, UINT nItem, STYLEBUFW *pStyleBuf, UINT *puCopied);HRESULT ( *GetStatusWindowPos)(IActiveIMMIME *This, HIMC hIMC, POINT *pptPos);HRESULT ( *GetVirtualKey)(IActiveIMMIME *This, HWND hWnd, UINT *puVirtualKey);HRESULT ( *InstallIMEA)(IActiveIMMIME *This, LPSTR szIMEFileName, LPSTR szLayoutText, HKL *phKL);HRESULT ( *InstallIMEW)(IActiveIMMIME *This, LPWSTR szIMEFileName, LPWSTR szLayoutText, HKL *phKL);HRESULT ( *IsIME)(IActiveIMMIME *This, HKL hKL);HRESULT ( *IsUIMessageA)(IActiveIMMIME *This, HWND hWndIME, UINT msg, WPARAM wParam, LPARAM lParam);HRESULT ( *IsUIMessageW)(IActiveIMMIME *This, HWND hWndIME, UINT msg, WPARAM wParam, LPARAM lParam);HRESULT ( *NotifyIME)(IActiveIMMIME *This, HIMC hIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);HRESULT ( *RegisterWordA)(IActiveIMMIME *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szRegister);HRESULT ( *RegisterWordW)(IActiveIMMIME *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szRegister);HRESULT ( *ReleaseContext)(IActiveIMMIME *This, HWND hWnd, HIMC hIMC);HRESULT ( *SetCandidateWindow)(IActiveIMMIME *This, HIMC hIMC, CANDIDATEFORM *pCandidate);HRESULT ( *SetCompositionFontA)(IActiveIMMIME *This, HIMC hIMC, LOGFONTA *plf);HRESULT ( *SetCompositionFontW)(IActiveIMMIME *This, HIMC hIMC, LOGFONTW *plf);HRESULT ( *SetCompositionStringA)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, LPVOID pComp, DWORD dwCompLen, LPVOID pRead, DWORD dwReadLen);HRESULT ( *SetCompositionStringW)(IActiveIMMIME *This, HIMC hIMC, DWORD dwIndex, LPVOID pComp, DWORD dwCompLen, LPVOID pRead, DWORD dwReadLen);HRESULT ( *SetCompositionWindow)(IActiveIMMIME *This, HIMC hIMC, COMPOSITIONFORM *pCompForm);HRESULT ( *SetConversionStatus)(IActiveIMMIME *This, HIMC hIMC, DWORD fdwConversion, DWORD fdwSentence);HRESULT ( *SetOpenStatus)(IActiveIMMIME *This, HIMC hIMC, BOOL fOpen);HRESULT ( *SetStatusWindowPos)(IActiveIMMIME *This, HIMC hIMC, POINT *pptPos);HRESULT ( *SimulateHotKey)(IActiveIMMIME *This, HWND hWnd, DWORD dwHotKeyID);HRESULT ( *UnregisterWordA)(IActiveIMMIME *This, HKL hKL, LPSTR szReading, DWORD dwStyle, LPSTR szUnregister);HRESULT ( *UnregisterWordW)(IActiveIMMIME *This, HKL hKL, LPWSTR szReading, DWORD dwStyle, LPWSTR szUnregister);HRESULT ( *GenerateMessage)(IActiveIMMIME *This, HIMC hIMC);HRESULT ( *LockIMC)(IActiveIMMIME *This, HIMC hIMC, INPUTCONTEXT **ppIMC);HRESULT ( *UnlockIMC)(IActiveIMMIME *This, HIMC hIMC);HRESULT ( *GetIMCLockCount)(IActiveIMMIME *This, HIMC hIMC, DWORD *pdwLockCount);HRESULT ( *CreateIMCC)(IActiveIMMIME *This, DWORD dwSize, HIMCC *phIMCC);HRESULT ( *DestroyIMCC)(IActiveIMMIME *This, HIMCC hIMCC);HRESULT ( *LockIMCC)(IActiveIMMIME *This, HIMCC hIMCC, void **ppv);HRESULT ( *UnlockIMCC)(IActiveIMMIME *This, HIMCC hIMCC);HRESULT ( *ReSizeIMCC)(IActiveIMMIME *This, HIMCC hIMCC, DWORD dwSize, HIMCC *phIMCC);HRESULT ( *GetIMCCSize)(IActiveIMMIME *This, HIMCC hIMCC, DWORD *pdwSize);HRESULT ( *GetIMCCLockCount)(IActiveIMMIME *This, HIMCC hIMCC, DWORD *pdwLockCount);HRESULT ( *GetHotKey)(IActiveIMMIME *This, DWORD dwHotKeyID, UINT *puModifiers, UINT *puVKey, HKL *phKL);HRESULT ( *SetHotKey)(IActiveIMMIME *This, DWORD dwHotKeyID, UINT uModifiers, UINT uVKey, HKL hKL);HRESULT ( *CreateSoftKeyboard)(IActiveIMMIME *This, UINT uType, HWND hOwner, int x, int y, HWND *phSoftKbdWnd);HRESULT ( *DestroySoftKeyboard)(IActiveIMMIME *This, HWND hSoftKbdWnd);HRESULT ( *ShowSoftKeyboard)(IActiveIMMIME *This, HWND hSoftKbdWnd, int nCmdShow);HRESULT ( *GetCodePageA)(IActiveIMMIME *This, HKL hKL, UINT *uCodePage);HRESULT ( *GetLangId)(IActiveIMMIME *This, HKL hKL, LANGID *plid);HRESULT ( *KeybdEvent)(IActiveIMMIME *This, LANGID lgidIME, BYTE bVk, BYTE bScan, DWORD dwFlags, DWORD dwExtraInfo);HRESULT ( *LockModal)(IActiveIMMIME *This);HRESULT ( *UnlockModal)(IActiveIMMIME *This);HRESULT ( *AssociateContextEx)(IActiveIMMIME *This, HWND hWnd, HIMC hIMC, DWORD dwFlags);HRESULT ( *DisableIME)(IActiveIMMIME *This, DWORD idThread);HRESULT ( *GetImeMenuItemsA)(IActiveIMMIME *This, HIMC hIMC, DWORD dwFlags, DWORD dwType, IMEMENUITEMINFOA *pImeParentMenu, IMEMENUITEMINFOA *pImeMenu, DWORD dwSize, DWORD *pdwResult);HRESULT ( *GetImeMenuItemsW)(IActiveIMMIME *This, HIMC hIMC, DWORD dwFlags, DWORD dwType, IMEMENUITEMINFOW *pImeParentMenu, IMEMENUITEMINFOW *pImeMenu, DWORD dwSize, DWORD *pdwResult);HRESULT ( *EnumInputContext)(IActiveIMMIME *This, DWORD idThread, IEnumInputContext **ppEnum);HRESULT ( *RequestMessageA)(IActiveIMMIME *This, HIMC hIMC, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *RequestMessageW)(IActiveIMMIME *This, HIMC hIMC, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *SendIMCA)(IActiveIMMIME *This, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *SendIMCW)(IActiveIMMIME *This, HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *IsSleeping)(IActiveIMMIME *This);};
union tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8 {UCHAR bVal;short iVal;USHORT uiVal;VARIANT_BOOL boolVal;int lVal;ULONG ulVal;float fltVal;SCODE scode;LARGE_INTEGER hVal;ULARGE_INTEGER uhVal;double dblVal;CY cyVal;DATE date;FILETIME filetime;CLSID *puuid;BLOB blob;CLIPDATA *pclipdata;IStream *pStream;IStorage *pStorage;BSTR bstrVal;BSTRBLOB bstrblobVal;LPSTR pszVal;LPWSTR pwszVal;CAUB caub;CAI cai;CAUI caui;CABOOL cabool;CAL cal;CAUL caul;CAFLT caflt;CASCODE cascode;CAH cah;CAUH cauh;CADBL cadbl;CACY cacy;CADATE cadate;CAFILETIME cafiletime;CACLSID cauuid;CACLIPDATA caclipdata;CABSTR cabstr;CABSTRBLOB cabstrblob;CALPSTR calpstr;CALPWSTR calpwstr;CAPROPVARIANT capropvar;};
struct _USB_FUNCS {DWORD dwCount;LPGET_USBD_VERSION lpGetUSBDVersion;LPOPEN_CLIENT_REGISTRY_KEY lpOpenClientRegistyKey;LPREGISTER_NOTIFICATION_ROUTINE lpRegisterNotificationRoutine;LPUN_REGISTER_NOTIFICATION_ROUTINE lpUnRegisterNotificationRoutine;LPLOAD_GENERIC_INTERFACE_DRIVER lpLoadGenericInterfaceDriver;LPTRANSLATE_STRING_DESCR lpTranslateStringDesc;LPFIND_INTERFACE lpFindInterface;LPGET_FRAME_NUMBER lpGetFrameNumber;LPGET_FRAME_LENGTH lpGetFrameLength;LPTAKE_FRAME_LENGTH_CONTROL lpTakeFrameLengthControl;LPRELEASE_FRAME_LENGTH_CONTROL lpReleaseFrameLengthControl;LPSET_FRAME_LENGTH lpSetFrameLength;LPGET_DEVICE_INFO lpGetDeviceInfo;LPISSUE_VENDOR_TRANSFER lpIssueVendorTransfer;LPGET_INTERFACE lpGetInterface;LPSET_INTERFACE lpSetInterface;LPGET_DESCRIPTOR lpGetDescriptor;LPSET_DESCRIPTOR lpSetDescriptor;LPSET_FEATURE lpSetFeature;LPCLEAR_FEATURE lpClearFeature;LPGET_STATUS lpGetStatus;LPSYNC_FRAME lpSyncFrame;LPOPEN_PIPE lpOpenPipe;LPABORT_PIPE_TRANSFERS lpAbortPipeTransfers;LPRESET_PIPE lpResetPipe;LPCLOSE_PIPE lpClosePipe;LPIS_PIPE_HALTED lpIsPipeHalted;LPISSUE_CONTROL_TRANSFER lpIssueControlTransfer;LPISSUE_BULK_TRANSFER lpIssueBulkTransfer;LPISSUE_INTERRUPT_TRANSFER lpIssueInterruptTransfer;LPISSUE_ISOCH_TRANSFER lpIssueIsochTransfer;LPIS_TRANSFER_COMPLETE lpIsTransferComplete;LPGET_TRANSFER_STATUS lpGetTransferStatus;LPGET_ISOCH_RESULTS lpGetIsochResults;LPABORT_TRANSFER lpAbortTransfer;LPCLOSE_TRANSFER lpCloseTransfer;LPRESET_DEFAULT_PIPE lpResetDefaultPipe;LPIS_DEFAULT_PIPE_HALTED lpIsDefaultPipeHalted;};
union ldapmodW___E212A43E07F676EA561EB2F20C2750D7 {PWCHAR *modv_strvals;struct berval **modv_bvals;};
struct _098CCDCB9074DBE2AEBC1B4026CD72FD {LPCTSTR Version;};
struct _21B90258E17C8B6D2BC61A88DF74B5FB {LPCTSTR Site;};
struct _30CC7D53408649846FD423BE19D3AD21 {LPCTSTR QuestionType;LPCTSTR QuestionText;};
struct _60326525EFFC6265B33A0784E3C361D7 {LPCTSTR Text;};
struct _9EEC6D4C8F692379AA2A6356D0C3C3FC {LPCTSTR Provider;};
struct _B8380904D5E4DBEF1FA17159C4574D89 {LPCTSTR ShortAbstract;LPCTSTR AbstractFile;};
struct _C25693052C43ED6AA003F87DB66344AA {LPCTSTR Organization;};
struct _DE8A226FBF6958721EC6E17746E96A38 {LPCTSTR Location;};
struct _E42E7BED0EE5193A4D0BC9D45E2008A3 {LPCTSTR Comment;LPCTSTR EmailAddress;};
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {LPWSTR pwszName;LPWSTR pwszValue;};
struct _USERNAME_TARGET_CREDENTIAL_INFO {LPWSTR UserName;};
struct _CERT_LDAP_STORE_OPENED_PARA {void *pvLdapSessionHandle;LPCWSTR pwszLdapUrl;};
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
struct _SecPkgContext_NativeNamesW {SEC_WCHAR *sClientName;SEC_WCHAR *sServerName;};
struct _SecPkgContext_GroupNamesW {SEC_WCHAR *msGroupNames;};
struct _SecPkgContext_AuthorityW {SEC_WCHAR *sAuthorityName;};
struct _SecPkgContext_ProtoInfoW {SEC_WCHAR *sProtocolName;unsigned int majorVersion;unsigned int minorVersion;};
struct _SecPkgCredentials_NamesW {SEC_WCHAR *sUserName;};
typedef LPDIRECTDRAWENUMERATEEXA LPDIRECTDRAWENUMERATEEX;
struct _SecPkgContext_KeyInfoW {SEC_WCHAR *sSignatureAlgorithmName;SEC_WCHAR *sEncryptAlgorithmName;unsigned int KeySize;unsigned int SignatureAlgorithm;unsigned int EncryptAlgorithm;};
struct _SEC_NEGOTIATION_INFO {unsigned int Size;unsigned int NameLength;SEC_WCHAR *Name;void *Reserved;};
struct _SecPkgContext_NamesW {SEC_WCHAR *sUserName;};
struct _UNIVERSAL_NAME_INFOW {LPWSTR lpUniversalName;};
struct _ACTRL_CONTROL_INFOW {LPWSTR lpControlId;LPWSTR lpControlName;};
struct _REMOTE_NAME_INFOW {LPWSTR lpUniversalName;LPWSTR lpConnectionName;LPWSTR lpRemainingPath;};
typedef SN_CHAR SCOPE_NAME_BUFFER[256];
struct _SPC_SP_OPUS_INFO {LPCWSTR pwszProgramName;struct SPC_LINK_ *pMoreInfo;struct SPC_LINK_ *pPublisherInfo;};
struct tagREGISTERWORDW {LPWSTR lpReading;LPWSTR lpWord;};
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
struct ip_mreq_source {struct in_addr imr_multiaddr;struct in_addr imr_sourceaddr;struct in_addr imr_interface;};
struct _SecPkgInfoW {unsigned int fCapabilities;unsigned short wVersion;unsigned short wRPCID;unsigned int cbMaxToken;SEC_WCHAR *Name;SEC_WCHAR *Comment;};
typedef SN_CHAR *SCOPE_NAME;
typedef  OLECHAR *LPCOLESTR;
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
struct tagRemSNB {unsigned int ulCntStr;unsigned int ulCntChar;OLECHAR rgString[1];};
typedef OLECHAR *LPOLESTR;
typedef BSTR P3PCXSL;
typedef BSTR *LPBSTR;
struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___6B5846D67F7DD81E1807E9F45EE9219E {LPOLESTR pPackageName;GUID PolicyId;};
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF {PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;HANDLE hThread;};
union _COMPFOLDERINIT___4B9AD8C7A3F4309023EA46FD12BBDF5A {int csidl;LPCITEMIDLIST pidl;LPOLESTR pszPath;};
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 {PROPID propid;LPOLESTR lpwstr;};
union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB {LPOLESTR pwszName;ULONG ulPropid;};
struct _69ED22A368F3E798C4741346320560FE {DWORD dwOption;union _69ED22A368F3E798C4741346320560FE___5D1CD365174EA865F6BBD61804407C82 Value;};
struct _CERT_ALT_NAME_ENTRY {DWORD dwAltNameChoice;_CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 __anonymous0;};
struct _MIB_IPMCAST_SCOPE {DWORD dwGroupAddress;DWORD dwGroupMask;SCOPE_NAME_BUFFER snNameBuffer;DWORD dwStatus;};
struct VoIPMgrParameters {DirectoryClientRegParams DCRegParams;BSTR bstrSipPassword;};
struct _tagHTTPPROXYINFO {LPOLESTR pszProxy;LPOLESTR pszProxyBypass;DWORD dwReserved;};
struct tagDBCONTENTSCOPE {DWORD dwFlags;LPOLESTR *rgpwszTagName;LPOLESTR pwszElementValue;};
struct _INTERFACE_INFO {u_long iiFlags;sockaddr_gen iiAddress;sockaddr_gen iiBroadcastAddress;sockaddr_gen iiNetmask;};
struct _WSACOMPLETION {WSACOMPLETIONTYPE Type;union _WSACOMPLETION___B77E5D0774BD833EED8E59D576B19655 Parameters;};
struct tagCALPOLESTR {ULONG cElems;LPOLESTR *pElems;};
struct _OBEX_HEADER {byte bId;union _OBEX_HEADER___9BF493296DC89111E3E62151EACD9997 value;};
struct _SPropValue {ULONG ulPropTag;ULONG dwAlignPad;union _PV Value;};
struct tagPROPSPEC {ULONG ulKind;tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 __anonymous0;};
struct tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E __anonymous0;};
struct tagExtendedDebugPropertyInfo {DWORD dwValidFields;LPOLESTR pszName;LPOLESTR pszType;LPOLESTR pszValue;LPOLESTR pszFullName;DWORD dwAttrib;IDebugProperty *pDebugProp;DWORD nDISPID;DWORD nType;VARIANT varValue;ILockBytes *plbValue;IDebugExtendedProperty *pDebugExtProp;};
struct _tagWAPGATEWAYINFO {LPOLESTR pszGateway;DWORD dwServicePortA;LPOLESTR szServiceTypeA;DWORD dwServicePortB;LPOLESTR szServiceTypeB;BOOL bMaster;DWORD dwReserved;};
struct _COMPFOLDERINIT {UINT uType;_COMPFOLDERINIT___4B9AD8C7A3F4309023EA46FD12BBDF5A __anonymous0;LPOLESTR pszName;};
struct _tagSTATPROPMAP {LPOLESTR pstrName;DWORD dwFlags;VARIANT variantValue;};
struct tagPROPVARIANT {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8 __anonymous0;};
struct tagSTATPROPBAG {LPOLESTR lpwstrName;VARTYPE vt;GUID guidPropertyType;};
struct tagSTATPROPSTG {LPOLESTR lpwstrName;PROPID propid;VARTYPE vt;};
struct tagOLEVERB {LONG lVerb;LPOLESTR lpszVerbName;DWORD fuFlags;DWORD grfAttribs;};
struct tagDBTEXT {LPOLESTR pwszText;ULONG ulErrorLocator;ULONG ulTokenLength;GUID guidDialect;};
struct ldapmodW {ULONG mod_op;PWCHAR mod_type;union ldapmodW___E212A43E07F676EA561EB2F20C2750D7 mod_vals;};
struct tagDBID {union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D uGuid;DBKIND eKind;union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB uName;};
union __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005 {CLSID clsid;LPOLESTR pFileExt;LPOLESTR pMimeType;LPOLESTR pProgId;LPOLESTR pFileName;struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___6B5846D67F7DD81E1807E9F45EE9219E ByName;struct __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005___7C8E1366D020F294DF98B2AA96DD5064 ByObjectId;};
struct IElementBehaviorCategoryVtbl {HRESULT ( *QueryInterface)(IElementBehaviorCategory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorCategory *This);ULONG ( *Release)(IElementBehaviorCategory *This);HRESULT ( *GetCategory)(IElementBehaviorCategory *This, LPOLESTR *ppchCategory);};
struct IFileSystemDescriptorVtbl {HRESULT ( *QueryInterface)(IFileSystemDescriptor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSystemDescriptor *This);ULONG ( *Release)(IFileSystemDescriptor *This);HRESULT ( *GetStgDescription)(IFileSystemDescriptor *This, LPOLESTR *ppszName);HRESULT ( *GetFSPath)(IFileSystemDescriptor *This, LPOLESTR *ppszName);};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXW)(LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
struct IAMPhysicalPinInfoVtbl {HRESULT ( *QueryInterface)(IAMPhysicalPinInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPhysicalPinInfo *This);ULONG ( *Release)(IAMPhysicalPinInfo *This);HRESULT ( *GetPhysicalType)(IAMPhysicalPinInfo *This, int *pType, LPOLESTR *ppszType);};
struct IStorageDescriptorVtbl {HRESULT ( *QueryInterface)(IStorageDescriptor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStorageDescriptor *This);ULONG ( *Release)(IStorageDescriptor *This);HRESULT ( *GetStgDescription)(IStorageDescriptor *This, LPOLESTR *ppszName);};
struct IBindEventHandlerVtbl {HRESULT ( *QueryInterface)(IBindEventHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindEventHandler *This);ULONG ( *Release)(IBindEventHandler *This);HRESULT ( *BindHandler)(IBindEventHandler *This, LPCOLESTR pstrEvent, IDispatch *pdisp);};
struct IParseDisplayNameVtbl {HRESULT ( *QueryInterface)(IParseDisplayName *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParseDisplayName *This);ULONG ( *Release)(IParseDisplayName *This);HRESULT ( *ParseDisplayName)(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);};
struct tagPACKAGEINSTALLINFO {DWORD cbStruct;LPCOLESTR pszPackageName;DWORD dwVersionMS;DWORD dwVersionLS;DWORD dwFlags;LPCOLESTR pszCodebaseURL;LPCOLESTR pszDistributionUnit;LPUNKNOWN pUnknown;HRESULT result;};
struct LdapReferralCallback {ULONG SizeOfCallbacks;QUERYFORCONNECTION *QueryForConnection;NOTIFYOFNEWCONNECTION *NotifyRoutine;DEREFERENCECONNECTION *DereferenceRoutine;};
struct ITravelLogEntryVtbl {HRESULT ( *QueryInterface)(ITravelLogEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLogEntry *This);ULONG ( *Release)(ITravelLogEntry *This);HRESULT ( *GetTitle)(ITravelLogEntry *This, LPOLESTR *ppszTitle);HRESULT ( *GetURL)(ITravelLogEntry *This, LPOLESTR *ppszURL);};
struct tagDBPARAMBINDINFO {LPOLESTR pwszDataSourceType;LPOLESTR pwszName;DBLENGTH ulParamSize;DBPARAMFLAGS dwFlags;BYTE bPrecision;BYTE bScale;};
struct IRootStorageVtbl {HRESULT ( *QueryInterface)(IRootStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRootStorage *This);ULONG ( *Release)(IRootStorage *This);HRESULT ( *SwitchToFile)(IRootStorage *This, LPOLESTR pszFile);};
struct tagDBLITERALINFO {LPOLESTR pwszLiteralValue;LPOLESTR pwszInvalidChars;LPOLESTR pwszInvalidStartingChars;DBLITERAL lt;BOOL fSupported;ULONG cchMaxLen;};
struct IEnumStringVtbl {HRESULT ( *QueryInterface)(IEnumString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumString *This);ULONG ( *Release)(IEnumString *This);HRESULT ( *Next)(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumString *This, ULONG celt);HRESULT ( *Reset)(IEnumString *This);HRESULT ( *Clone)(IEnumString *This, IEnumString **ppenum);};
struct tagPROPPAGEINFO {ULONG cb;LPOLESTR pszTitle;SIZE size;LPOLESTR pszDocString;LPOLESTR pszHelpFile;DWORD dwHelpContext;};
struct tagMDAXISINFO {DBLENGTH cbSize;DBCOUNTITEM iAxis;DBCOUNTITEM cDimensions;DBCOUNTITEM cCoordinates;DBORDINAL *rgcColumns;LPOLESTR *rgpwszDimensionNames;};
struct tagDBCONTENT {LPOLESTR pwszPhrase;DWORD dwGenerateMethod;LONG lWeight;LCID lcid;};
struct IACListVtbl {HRESULT ( *QueryInterface)(IACList *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IACList *This);ULONG ( *Release)(IACList *This);HRESULT ( *Expand)(IACList *This, LPCOLESTR pszExpand);};
struct _WINDOWDATA {DWORD dwWindowID;UINT uiCP;LPITEMIDLIST pidl;LPOLESTR lpszUrl;LPOLESTR lpszUrlLocation;LPOLESTR lpszTitle;IStream *pStream;};
union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA {struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF APC;struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359 IOC;struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456 HWND;HANDLE hEvent;PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;};
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB {HBITMAP hBitmap;HMETAFILEPICT hMetaFilePict;HENHMETAFILE hEnhMetaFile;HGLOBAL hGlobal;LPOLESTR lpszFileName;IStream *pstm;IStorage *pstg;};
struct IActiveScriptParseProcedureOldVtbl {HRESULT ( *QueryInterface)(IActiveScriptParseProcedureOld *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParseProcedureOld *This);ULONG ( *Release)(IActiveScriptParseProcedureOld *This);HRESULT ( *ParseProcedureText)(IActiveScriptParseProcedureOld *This, LPCOLESTR pstrCode, LPCOLESTR pstrFormalParams, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, IDispatch **ppdisp);};
struct IActiveScriptAuthorProcedureVtbl {HRESULT ( *QueryInterface)(IActiveScriptAuthorProcedure *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptAuthorProcedure *This);ULONG ( *Release)(IActiveScriptAuthorProcedure *This);HRESULT ( *ParseProcedureText)(IActiveScriptAuthorProcedure *This, LPCOLESTR pszCode, LPCOLESTR pszFormalParams, LPCOLESTR pszProcedureName, LPCOLESTR pszItemName, LPCOLESTR pszDelimiter, DWORD dwCookie, DWORD dwFlags, IDispatch *pdispFor);};
struct IActiveScriptParseProcedure2Vtbl {HRESULT ( *QueryInterface)(IActiveScriptParseProcedure2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParseProcedure2 *This);ULONG ( *Release)(IActiveScriptParseProcedure2 *This);HRESULT ( *ParseProcedureText)(IActiveScriptParseProcedure2 *This, LPCOLESTR pstrCode, LPCOLESTR pstrFormalParams, LPCOLESTR pstrProcedureName, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, IDispatch **ppdisp);};
struct IElementBehaviorSiteCategoryVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteCategory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteCategory *This);ULONG ( *Release)(IElementBehaviorSiteCategory *This);HRESULT ( *GetRelatedBehaviors)(IElementBehaviorSiteCategory *This, LONG lDirection, LPOLESTR pchCategory, IEnumUnknown **ppEnumerator);};
struct IActiveScriptParseProcedureVtbl {HRESULT ( *QueryInterface)(IActiveScriptParseProcedure *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParseProcedure *This);ULONG ( *Release)(IActiveScriptParseProcedure *This);HRESULT ( *ParseProcedureText)(IActiveScriptParseProcedure *This, LPCOLESTR pstrCode, LPCOLESTR pstrFormalParams, LPCOLESTR pstrProcedureName, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, IDispatch **ppdisp);};
struct IElementBehaviorSiteOM2Vtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteOM2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteOM2 *This);ULONG ( *Release)(IElementBehaviorSiteOM2 *This);HRESULT ( *RegisterEvent)(IElementBehaviorSiteOM2 *This, LPOLESTR pchEvent, LONG lFlags, LONG *plCookie);HRESULT ( *GetEventCookie)(IElementBehaviorSiteOM2 *This, LPOLESTR pchEvent, LONG *plCookie);HRESULT ( *FireEvent)(IElementBehaviorSiteOM2 *This, LONG lCookie, IHTMLEventObj *pEventObject);HRESULT ( *CreateEventObject)(IElementBehaviorSiteOM2 *This, IHTMLEventObj **ppEventObject);HRESULT ( *RegisterName)(IElementBehaviorSiteOM2 *This, LPOLESTR pchName);HRESULT ( *RegisterUrn)(IElementBehaviorSiteOM2 *This, LPOLESTR pchUrn);HRESULT ( *GetDefaults)(IElementBehaviorSiteOM2 *This, IHTMLElementDefaults **ppDefaults);};
struct IElementBehaviorSiteOMVtbl {HRESULT ( *QueryInterface)(IElementBehaviorSiteOM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IElementBehaviorSiteOM *This);ULONG ( *Release)(IElementBehaviorSiteOM *This);HRESULT ( *RegisterEvent)(IElementBehaviorSiteOM *This, LPOLESTR pchEvent, LONG lFlags, LONG *plCookie);HRESULT ( *GetEventCookie)(IElementBehaviorSiteOM *This, LPOLESTR pchEvent, LONG *plCookie);HRESULT ( *FireEvent)(IElementBehaviorSiteOM *This, LONG lCookie, IHTMLEventObj *pEventObject);HRESULT ( *CreateEventObject)(IElementBehaviorSiteOM *This, IHTMLEventObj **ppEventObject);HRESULT ( *RegisterName)(IElementBehaviorSiteOM *This, LPOLESTR pchName);HRESULT ( *RegisterUrn)(IElementBehaviorSiteOM *This, LPOLESTR pchUrn);};
struct IMediaPropertyBagVtbl {HRESULT ( *QueryInterface)(IMediaPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPropertyBag *This);ULONG ( *Release)(IMediaPropertyBag *This);HRESULT ( *Read)(IMediaPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT ( *Write)(IMediaPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);HRESULT ( *EnumProperty)(IMediaPropertyBag *This, ULONG iProperty, VARIANT *pvarPropertyName, VARIANT *pvarPropertyValue);};
struct IEnumACStringVtbl {HRESULT ( *QueryInterface)(IEnumACString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumACString *This);ULONG ( *Release)(IEnumACString *This);HRESULT ( *Next)(IEnumACString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumACString *This, ULONG celt);HRESULT ( *Reset)(IEnumACString *This);HRESULT ( *Clone)(IEnumACString *This, IEnumString **ppenum);HRESULT ( *NextItem)(IEnumACString *This, LPOLESTR pszUrl, ULONG cchMax, ULONG *pulSortIndex);HRESULT ( *SetEnumOptions)(IEnumACString *This, DWORD dwOptions);HRESULT ( *GetEnumOptions)(IEnumACString *This, DWORD *pdwOptions);};
struct IAMExtDeviceVtbl {HRESULT ( *QueryInterface)(IAMExtDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtDevice *This);ULONG ( *Release)(IAMExtDevice *This);HRESULT ( *GetCapability)(IAMExtDevice *This, int Capability, int *pValue, double *pdblValue);HRESULT ( *get_ExternalDeviceID)(IAMExtDevice *This, LPOLESTR *ppszData);HRESULT ( *get_ExternalDeviceVersion)(IAMExtDevice *This, LPOLESTR *ppszData);HRESULT ( *put_DevicePower)(IAMExtDevice *This, int PowerMode);HRESULT ( *get_DevicePower)(IAMExtDevice *This, int *pPowerMode);HRESULT ( *Calibrate)(IAMExtDevice *This, HEVENT hEvent, int Mode, int *pStatus);HRESULT ( *put_DevicePort)(IAMExtDevice *This, int DevicePort);HRESULT ( *get_DevicePort)(IAMExtDevice *This, int *pDevicePort);};
struct ICodeStoreDBVtbl {HRESULT ( *QueryInterface)(ICodeStoreDB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICodeStoreDB *This);ULONG ( *Release)(ICodeStoreDB *This);HRESULT ( *CreateEntry)(ICodeStoreDB *This, LPCOLESTR pszName, ICodeStoreDBEntry **ppEntry);HRESULT ( *RemoveEntry)(ICodeStoreDB *This, LPCOLESTR pszName, DWORD dwFlags);HRESULT ( *GetEntry)(ICodeStoreDB *This, LPCOLESTR pszName, ICodeStoreDBEntry **ppEntry);HRESULT ( *EnumRootEntries)(ICodeStoreDB *This, IEnumCodeStoreDBEntry **ppEntry);};
struct IPropertyBagVtbl {HRESULT ( *QueryInterface)(IPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag *This);ULONG ( *Release)(IPropertyBag *This);HRESULT ( *Read)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT ( *Write)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);};
struct tagDBPARAMETER {LPOLESTR pwszName;ITypeInfo *pTypeInfo;DB_NUMERIC *pNum;DBLENGTH cbMaxLength;DBPARAMFLAGS dwFlags;DBTYPE wType;};
struct IBindHostVtbl {HRESULT ( *QueryInterface)(IBindHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindHost *This);ULONG ( *Release)(IBindHost *This);HRESULT ( *CreateMoniker)(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);HRESULT ( *MonikerBindToStorage)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);HRESULT ( *MonikerBindToObject)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);};
struct IErrorLogVtbl {HRESULT ( *QueryInterface)(IErrorLog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorLog *This);ULONG ( *Release)(IErrorLog *This);HRESULT ( *AddError)(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);};
struct tagDBPROPINFO {LPOLESTR pwszDescription;DBPROPID dwPropertyID;DBPROPFLAGS dwFlags;VARTYPE vtType;VARIANT vValues;};
struct IBindCtxVtbl {HRESULT ( *QueryInterface)(IBindCtx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindCtx *This);ULONG ( *Release)(IBindCtx *This);HRESULT ( *RegisterObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *RevokeObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *ReleaseBoundObjects)(IBindCtx *This);HRESULT ( *SetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetRunningObjectTable)(IBindCtx *This, IRunningObjectTable **pprot);HRESULT ( *RegisterObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);HRESULT ( *GetObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);HRESULT ( *EnumObjectParam)(IBindCtx *This, IEnumString **ppenum);HRESULT ( *RevokeObjectParam)(IBindCtx *This, LPOLESTR pszKey);};
struct _tagPROPBAG2 {DWORD dwType;VARTYPE vt;CLIPFORMAT cfType;DWORD dwHint;LPOLESTR pstrName;CLSID clsid;};
struct IGetRowVtbl {HRESULT ( *QueryInterface)(IGetRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetRow *This);ULONG ( *Release)(IGetRow *This);HRESULT ( *GetRowFromHROW)(IGetRow *This, IUnknown *pUnkOuter, HROW hRow,  IID * riid, IUnknown **ppUnk);HRESULT ( *GetURLFromHROW)(IGetRow *This, HROW hRow, LPOLESTR *ppwszURL);};
struct tagFONTDESC {UINT cbSizeofstruct;LPOLESTR lpstrName;CY cySize;SHORT sWeight;SHORT sCharset;BOOL fItalic;BOOL fUnderline;BOOL fStrikethrough;};
struct tagSTATSTG {LPOLESTR pwcsName;DWORD type;ULARGE_INTEGER cbSize;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD grfMode;DWORD grfLocksSupported;CLSID clsid;DWORD grfStateBits;DWORD reserved;};
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 {wireHMETAFILEPICT hMetaFilePict;wireHENHMETAFILE hHEnhMetaFile;GDI_OBJECT *hGdiHandle;wireHGLOBAL hGlobal;LPOLESTR lpszFileName;BYTE_BLOB *pstm;BYTE_BLOB *pstg;};
struct IFileSourceFilterVtbl {HRESULT ( *QueryInterface)(IFileSourceFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSourceFilter *This);ULONG ( *Release)(IFileSourceFilter *This);HRESULT ( *Load)(IFileSourceFilter *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSourceFilter *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);};
struct IInternetBindInfoVtbl {HRESULT ( *QueryInterface)(IInternetBindInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetBindInfo *This);ULONG ( *Release)(IInternetBindInfo *This);HRESULT ( *GetBindInfo)(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *GetBindString)(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);};
struct IOleItemContainerVtbl {HRESULT ( *QueryInterface)(IOleItemContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleItemContainer *This);ULONG ( *Release)(IOleItemContainer *This);HRESULT ( *ParseDisplayName)(IOleItemContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleItemContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleItemContainer *This, BOOL fLock);HRESULT ( *GetObjectA)(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc,  IID * riid, void **ppvObject);HRESULT ( *GetObjectStorage)(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc,  IID * riid, void **ppvStorage);HRESULT ( *IsRunning)(IOleItemContainer *This, LPOLESTR pszItem);};
struct IRegisterProviderVtbl {HRESULT ( *QueryInterface)(IRegisterProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRegisterProvider *This);ULONG ( *Release)(IRegisterProvider *This);HRESULT ( *GetURLMapping)(IRegisterProvider *This, LPCOLESTR pwszURL, DB_DWRESERVE dwReserved, CLSID *pclsidProvider);HRESULT ( *SetURLMapping)(IRegisterProvider *This, LPCOLESTR pwszURL, DB_DWRESERVE dwReserved,  CLSID * rclsidProvider);HRESULT ( *UnregisterProvider)(IRegisterProvider *This, LPCOLESTR pwszURL, DB_DWRESERVE dwReserved,  CLSID * rclsidProvider);};
struct ITypeChangeEventsVtbl {HRESULT ( *QueryInterface)(ITypeChangeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeChangeEvents *This);ULONG ( *Release)(ITypeChangeEvents *This);HRESULT ( *RequestTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);HRESULT ( *AfterTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);};
struct ICreateErrorInfoVtbl {HRESULT ( *QueryInterface)(ICreateErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateErrorInfo *This);ULONG ( *Release)(ICreateErrorInfo *This);HRESULT ( *SetGUID)(ICreateErrorInfo *This,  GUID * rguid);HRESULT ( *SetSource)(ICreateErrorInfo *This, LPOLESTR szSource);HRESULT ( *SetDescription)(ICreateErrorInfo *This, LPOLESTR szDescription);HRESULT ( *SetHelpFile)(ICreateErrorInfo *This, LPOLESTR szHelpFile);HRESULT ( *SetHelpContext)(ICreateErrorInfo *This, DWORD dwHelpContext);};
struct IPrivacyServicesVtbl {HRESULT ( *QueryInterface)(IPrivacyServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrivacyServices *This);ULONG ( *Release)(IPrivacyServices *This);HRESULT ( *AddPrivacyInfoToList)(IPrivacyServices *This, LPOLESTR pstrUrl, LPOLESTR pstrPolicyRef, LPOLESTR pstrP3PHeader, LONG dwReserved, DWORD privacyFlags);};
struct IScriptScriptletVtbl {HRESULT ( *QueryInterface)(IScriptScriptlet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptScriptlet *This);ULONG ( *Release)(IScriptScriptlet *This);HRESULT ( *Alive)(IScriptScriptlet *This);HRESULT ( *Delete)(IScriptScriptlet *This);HRESULT ( *GetParent)(IScriptScriptlet *This, IScriptNode **ppsnParent);HRESULT ( *GetIndexInParent)(IScriptScriptlet *This, ULONG *pisn);HRESULT ( *GetCookie)(IScriptScriptlet *This, DWORD *pdwCookie);HRESULT ( *GetNumberOfChildren)(IScriptScriptlet *This, ULONG *pcsn);HRESULT ( *GetChild)(IScriptScriptlet *This, ULONG isn, IScriptNode **ppsn);HRESULT ( *GetLanguage)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *CreateChildEntry)(IScriptScriptlet *This, ULONG isn, DWORD dwCookie, LPCOLESTR pszDelimiter, IScriptEntry **ppse);HRESULT ( *CreateChildHandler)(IScriptScriptlet *This, LPCOLESTR pszDefaultName, LPCOLESTR *prgpszNames, ULONG cpszNames, LPCOLESTR pszEvent, LPCOLESTR pszDelimiter, ITypeInfo *ptiSignature, ULONG iMethodSignature, ULONG isn, DWORD dwCookie, IScriptEntry **ppse);HRESULT ( *GetText)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetText)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetBody)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetBody)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetName)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetName)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetItemName)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetItemName)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetSignature)(IScriptScriptlet *This, ITypeInfo **ppti, ULONG *piMethod);HRESULT ( *SetSignature)(IScriptScriptlet *This, ITypeInfo *pti, ULONG iMethod);HRESULT ( *GetRange)(IScriptScriptlet *This, ULONG *pichMin, ULONG *pcch);HRESULT ( *GetSubItemName)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetSubItemName)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetEventName)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetEventName)(IScriptScriptlet *This, LPCOLESTR psz);HRESULT ( *GetSimpleEventName)(IScriptScriptlet *This, BSTR *pbstr);HRESULT ( *SetSimpleEventName)(IScriptScriptlet *This, LPCOLESTR psz);};
struct ITransactionDataVtbl {HRESULT ( *QueryInterface)(ITransactionData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionData *This);ULONG ( *Release)(ITransactionData *This);HRESULT ( *GetTransactionData)(ITransactionData *This, LPCWSTR szUrl, LPOLESTR *pszFilename, LPOLESTR *pszMime, DWORD *pdwSizeTotal, DWORD *pdwSizeAvailable, DWORD dwReserved);};
struct ITravelLogClientVtbl {HRESULT ( *QueryInterface)(ITravelLogClient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLogClient *This);ULONG ( *Release)(ITravelLogClient *This);HRESULT ( *FindWindowByIndex)(ITravelLogClient *This, DWORD dwID, IUnknown **ppunk);HRESULT ( *GetWindowData)(ITravelLogClient *This, LPWINDOWDATA pWinData);HRESULT ( *LoadHistoryPosition)(ITravelLogClient *This, LPOLESTR pszUrlLocation, DWORD dwPosition);};
struct IAMExtTransportVtbl {HRESULT ( *QueryInterface)(IAMExtTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtTransport *This);ULONG ( *Release)(IAMExtTransport *This);HRESULT ( *GetCapability)(IAMExtTransport *This, int Capability, int *pValue, double *pdblValue);HRESULT ( *put_MediaState)(IAMExtTransport *This, int State);HRESULT ( *get_MediaState)(IAMExtTransport *This, int *pState);HRESULT ( *put_LocalControl)(IAMExtTransport *This, int State);HRESULT ( *get_LocalControl)(IAMExtTransport *This, int *pState);HRESULT ( *GetStatus)(IAMExtTransport *This, int StatusItem, int *pValue);HRESULT ( *GetTransportBasicParameters)(IAMExtTransport *This, int Param, int *pValue, LPOLESTR *ppszData);HRESULT ( *SetTransportBasicParameters)(IAMExtTransport *This, int Param, int Value, LPCOLESTR pszData);HRESULT ( *GetTransportVideoParameters)(IAMExtTransport *This, int Param, int *pValue);HRESULT ( *SetTransportVideoParameters)(IAMExtTransport *This, int Param, int Value);HRESULT ( *GetTransportAudioParameters)(IAMExtTransport *This, int Param, int *pValue);HRESULT ( *SetTransportAudioParameters)(IAMExtTransport *This, int Param, int Value);HRESULT ( *put_Mode)(IAMExtTransport *This, int Mode);HRESULT ( *get_Mode)(IAMExtTransport *This, int *pMode);HRESULT ( *put_Rate)(IAMExtTransport *This, double dblRate);HRESULT ( *get_Rate)(IAMExtTransport *This, double *pdblRate);HRESULT ( *GetChase)(IAMExtTransport *This, int *pEnabled, int *pOffset, HEVENT *phEvent);HRESULT ( *SetChase)(IAMExtTransport *This, int Enable, int Offset, HEVENT hEvent);HRESULT ( *GetBump)(IAMExtTransport *This, int *pSpeed, int *pDuration);HRESULT ( *SetBump)(IAMExtTransport *This, int Speed, int Duration);HRESULT ( *get_AntiClogControl)(IAMExtTransport *This, int *pEnabled);HRESULT ( *put_AntiClogControl)(IAMExtTransport *This, int Enable);HRESULT ( *GetEditPropertySet)(IAMExtTransport *This, int EditID, int *pState);HRESULT ( *SetEditPropertySet)(IAMExtTransport *This, int *pEditID, int State);HRESULT ( *GetEditProperty)(IAMExtTransport *This, int EditID, int Param, int *pValue);HRESULT ( *SetEditProperty)(IAMExtTransport *This, int EditID, int Param, int Value);HRESULT ( *get_EditStart)(IAMExtTransport *This, int *pValue);HRESULT ( *put_EditStart)(IAMExtTransport *This, int Value);};
struct IFileSinkFilterVtbl {HRESULT ( *QueryInterface)(IFileSinkFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSinkFilter *This);ULONG ( *Release)(IFileSinkFilter *This);HRESULT ( *SetFileName)(IFileSinkFilter *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSinkFilter *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);};
struct IUrlHistoryStgVtbl {HRESULT ( *QueryInterface)(IUrlHistoryStg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryStg *This);ULONG ( *Release)(IUrlHistoryStg *This);HRESULT ( *AddUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags);HRESULT ( *DeleteUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, DWORD dwFlags);HRESULT ( *QueryUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, DWORD dwFlags, LPSTATURL lpSTATURL);HRESULT ( *BindToObject)(IUrlHistoryStg *This, LPCOLESTR pocsUrl,  IID * riid, void **ppvOut);HRESULT ( *EnumUrls)(IUrlHistoryStg *This, IEnumSTATURL **ppEnum);};
struct IAutoCompleteVtbl {HRESULT ( *QueryInterface)(IAutoComplete *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAutoComplete *This);ULONG ( *Release)(IAutoComplete *This);HRESULT ( *Init)(IAutoComplete *This, HWND hwndEdit, IUnknown *punkACL, LPCOLESTR pwszRegKeyPath, LPCOLESTR pwszQuickComplete);HRESULT ( *Enable)(IAutoComplete *This, BOOL fEnable);};
struct IOleContainerVtbl {HRESULT ( *QueryInterface)(IOleContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleContainer *This);ULONG ( *Release)(IOleContainer *This);HRESULT ( *ParseDisplayName)(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleContainer *This, BOOL fLock);};
struct ICommandCostVtbl {HRESULT ( *QueryInterface)(ICommandCost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandCost *This);ULONG ( *Release)(ICommandCost *This);HRESULT ( *GetAccumulatedCost)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostLimits, DBCOST **prgCostLimits);HRESULT ( *GetCostEstimate)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostEstimates, DBCOST *prgCostEstimates);HRESULT ( *GetCostGoals)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostGoals, DBCOST *prgCostGoals);HRESULT ( *GetCostLimits)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostLimits, DBCOST *prgCostLimits);HRESULT ( *SetCostGoals)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG cCostGoals, DBCOST  *    rgCostGoals);HRESULT ( *SetCostLimits)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG cCostLimits, DBCOST *prgCostLimits, DBEXECLIMITS dwExecutionFlags);};
struct IEnumSTATURLVtbl {HRESULT ( *QueryInterface)(IEnumSTATURL *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATURL *This);ULONG ( *Release)(IEnumSTATURL *This);HRESULT ( *Next)(IEnumSTATURL *This, ULONG celt, LPSTATURL rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATURL *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATURL *This);HRESULT ( *Clone)(IEnumSTATURL *This, IEnumSTATURL **ppenum);HRESULT ( *SetFilter)(IEnumSTATURL *This, LPCOLESTR poszFilter, DWORD dwFlags);};
struct IScriptEntryVtbl {HRESULT ( *QueryInterface)(IScriptEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptEntry *This);ULONG ( *Release)(IScriptEntry *This);HRESULT ( *Alive)(IScriptEntry *This);HRESULT ( *Delete)(IScriptEntry *This);HRESULT ( *GetParent)(IScriptEntry *This, IScriptNode **ppsnParent);HRESULT ( *GetIndexInParent)(IScriptEntry *This, ULONG *pisn);HRESULT ( *GetCookie)(IScriptEntry *This, DWORD *pdwCookie);HRESULT ( *GetNumberOfChildren)(IScriptEntry *This, ULONG *pcsn);HRESULT ( *GetChild)(IScriptEntry *This, ULONG isn, IScriptNode **ppsn);HRESULT ( *GetLanguage)(IScriptEntry *This, BSTR *pbstr);HRESULT ( *CreateChildEntry)(IScriptEntry *This, ULONG isn, DWORD dwCookie, LPCOLESTR pszDelimiter, IScriptEntry **ppse);HRESULT ( *CreateChildHandler)(IScriptEntry *This, LPCOLESTR pszDefaultName, LPCOLESTR *prgpszNames, ULONG cpszNames, LPCOLESTR pszEvent, LPCOLESTR pszDelimiter, ITypeInfo *ptiSignature, ULONG iMethodSignature, ULONG isn, DWORD dwCookie, IScriptEntry **ppse);HRESULT ( *GetText)(IScriptEntry *This, BSTR *pbstr);HRESULT ( *SetText)(IScriptEntry *This, LPCOLESTR psz);HRESULT ( *GetBody)(IScriptEntry *This, BSTR *pbstr);HRESULT ( *SetBody)(IScriptEntry *This, LPCOLESTR psz);HRESULT ( *GetName)(IScriptEntry *This, BSTR *pbstr);HRESULT ( *SetName)(IScriptEntry *This, LPCOLESTR psz);HRESULT ( *GetItemName)(IScriptEntry *This, BSTR *pbstr);HRESULT ( *SetItemName)(IScriptEntry *This, LPCOLESTR psz);HRESULT ( *GetSignature)(IScriptEntry *This, ITypeInfo **ppti, ULONG *piMethod);HRESULT ( *SetSignature)(IScriptEntry *This, ITypeInfo *pti, ULONG iMethod);HRESULT ( *GetRange)(IScriptEntry *This, ULONG *pichMin, ULONG *pcch);};
struct IComBindingVtbl {HRESULT ( *QueryInterface)(IComBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IComBinding *This);ULONG ( *Release)(IComBinding *This);HRESULT ( *InitBinding)(IComBinding *This, DWORD dwEndpointFlags, DWORD dwNICFlags, DWORD mbzReserved1, DWORD mbzReserved2, LPOLESTR pszBinding);HRESULT ( *QueryBinding)(IComBinding *This, LPDWORD pdwEndpointFlags, LPDWORD pdwNICFlags, LPDWORD mbzReserved1, LPDWORD mbzReserved2, LPOLESTR *ppszBinding);};
struct IScriptNodeVtbl {HRESULT ( *QueryInterface)(IScriptNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptNode *This);ULONG ( *Release)(IScriptNode *This);HRESULT ( *Alive)(IScriptNode *This);HRESULT ( *Delete)(IScriptNode *This);HRESULT ( *GetParent)(IScriptNode *This, IScriptNode **ppsnParent);HRESULT ( *GetIndexInParent)(IScriptNode *This, ULONG *pisn);HRESULT ( *GetCookie)(IScriptNode *This, DWORD *pdwCookie);HRESULT ( *GetNumberOfChildren)(IScriptNode *This, ULONG *pcsn);HRESULT ( *GetChild)(IScriptNode *This, ULONG isn, IScriptNode **ppsn);HRESULT ( *GetLanguage)(IScriptNode *This, BSTR *pbstr);HRESULT ( *CreateChildEntry)(IScriptNode *This, ULONG isn, DWORD dwCookie, LPCOLESTR pszDelimiter, IScriptEntry **ppse);HRESULT ( *CreateChildHandler)(IScriptNode *This, LPCOLESTR pszDefaultName, LPCOLESTR *prgpszNames, ULONG cpszNames, LPCOLESTR pszEvent, LPCOLESTR pszDelimiter, ITypeInfo *ptiSignature, ULONG iMethodSignature, ULONG isn, DWORD dwCookie, IScriptEntry **ppse);};
struct tagDBPARAMINFO {DBPARAMFLAGS dwFlags;DBORDINAL iOrdinal;LPOLESTR pwszName;ITypeInfo *pTypeInfo;DBLENGTH ulParamSize;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct IMDFindVtbl {HRESULT ( *QueryInterface)(IMDFind *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDFind *This);ULONG ( *Release)(IMDFind *This);HRESULT ( *FindCell)(IMDFind *This, DBORDINAL ulStartingOrdinal, DBCOUNTITEM cMembers, LPCOLESTR *rgpwszMember, DBORDINAL *pulCellOrdinal);HRESULT ( *FindTuple)(IMDFind *This, ULONG ulAxisIdentifier, DBORDINAL ulStartingOrdinal, DBCOUNTITEM cMembers, LPCOLESTR *rgpwszMember, ULONG *pulTupleOrdinal);};
struct tagVARDESC {MEMBERID memid;LPOLESTR lpstrSchema;tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B __anonymous0;ELEMDESC elemdescVar;WORD wVarFlags;VARKIND varkind;};
struct IActiveScriptEncodeVtbl {HRESULT ( *QueryInterface)(IActiveScriptEncode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptEncode *This);ULONG ( *Release)(IActiveScriptEncode *This);HRESULT ( *EncodeSection)(IActiveScriptEncode *This, LPCOLESTR pchIn, DWORD cchIn, LPOLESTR pchOut, DWORD cchOut, DWORD *pcchRet);HRESULT ( *DecodeScript)(IActiveScriptEncode *This, LPCOLESTR pchIn, DWORD cchIn, LPOLESTR pchOut, DWORD cchOut, DWORD *pcchRet);HRESULT ( *GetEncodeProgId)(IActiveScriptEncode *This, BSTR *pbstrOut);};
struct ITridentEventSinkVtbl {HRESULT ( *QueryInterface)(ITridentEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITridentEventSink *This);ULONG ( *Release)(ITridentEventSink *This);HRESULT ( *FireEvent)(ITridentEventSink *This, LPCOLESTR pstrEvent, DISPPARAMS *pdp, VARIANT *pvarRes, EXCEPINFO *pei);};
struct IFileSinkFilter2Vtbl {HRESULT ( *QueryInterface)(IFileSinkFilter2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSinkFilter2 *This);ULONG ( *Release)(IFileSinkFilter2 *This);HRESULT ( *SetFileName)(IFileSinkFilter2 *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSinkFilter2 *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);HRESULT ( *SetMode)(IFileSinkFilter2 *This, DWORD dwFlags);HRESULT ( *GetMode)(IFileSinkFilter2 *This, DWORD *pdwFlags);};
struct IMapMIMEToCLSIDVtbl {HRESULT ( *QueryInterface)(IMapMIMEToCLSID *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMapMIMEToCLSID *This);ULONG ( *Release)(IMapMIMEToCLSID *This);HRESULT ( *EnableDefaultMappings)(IMapMIMEToCLSID *This, BOOL bEnable);HRESULT ( *MapMIMEToCLSID)(IMapMIMEToCLSID *This, LPCOLESTR pszMIMEType, CLSID *pCLSID);HRESULT ( *SetMapping)(IMapMIMEToCLSID *This, LPCOLESTR pszMIMEType, DWORD dwMapMode,  CLSID * clsid);};
struct IUrlHistoryStg2Vtbl {HRESULT ( *QueryInterface)(IUrlHistoryStg2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryStg2 *This);ULONG ( *Release)(IUrlHistoryStg2 *This);HRESULT ( *AddUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags);HRESULT ( *DeleteUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, DWORD dwFlags);HRESULT ( *QueryUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, DWORD dwFlags, LPSTATURL lpSTATURL);HRESULT ( *BindToObject)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl,  IID * riid, void **ppvOut);HRESULT ( *EnumUrls)(IUrlHistoryStg2 *This, IEnumSTATURL **ppEnum);HRESULT ( *AddUrlAndNotify)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags, BOOL fWriteHistory, IOleCommandTarget *poctNotify, IUnknown *punkISFolder);HRESULT ( *ClearHistory)(IUrlHistoryStg2 *This);};
struct IAutoComplete2Vtbl {HRESULT ( *QueryInterface)(IAutoComplete2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAutoComplete2 *This);ULONG ( *Release)(IAutoComplete2 *This);HRESULT ( *Init)(IAutoComplete2 *This, HWND hwndEdit, IUnknown *punkACL, LPCOLESTR pwszRegKeyPath, LPCOLESTR pwszQuickComplete);HRESULT ( *Enable)(IAutoComplete2 *This, BOOL fEnable);HRESULT ( *SetOptions)(IAutoComplete2 *This, DWORD dwFlag);HRESULT ( *GetOptions)(IAutoComplete2 *This, DWORD *pdwFlag);};
struct IPropertyBagExVtbl {HRESULT ( *QueryInterface)(IPropertyBagEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBagEx *This);ULONG ( *Release)(IPropertyBagEx *This);HRESULT ( *ReadMultiple)(IPropertyBagEx *This, ULONG cprops, LPCOLESTR  *    rgwszPropNames, PROPVARIANT rgvar[], IErrorLog *pErrorLog);HRESULT ( *WriteMultiple)(IPropertyBagEx *This, ULONG cprops, LPCOLESTR  *    rgwszPropNames,  PROPVARIANT rgvar[]);HRESULT ( *DeleteMultiple)(IPropertyBagEx *This, ULONG cprops, LPCOLESTR  *    rgwszPropNames, DWORD dwReserved);HRESULT ( *Open)(IPropertyBagEx *This, IUnknown *pUnkOuter, LPCOLESTR wszPropName, GUID guidPropertyType, DWORD dwFlags,  IID * riid, IUnknown **ppUnk);HRESULT ( *Enum)(IPropertyBagEx *This, LPCOLESTR wszPropNameMask, DWORD dwFlags, IEnumSTATPROPBAG **ppenum);};
struct IPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag2 *This);ULONG ( *Release)(IPropertyBag2 *This);HRESULT ( *Read)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, IErrorLog *pErrLog, VARIANT *pvarValue, HRESULT *phrError);HRESULT ( *Write)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, VARIANT *pvarValue);HRESULT ( *CountProperties)(IPropertyBag2 *This, ULONG *pcProperties);HRESULT ( *GetPropertyInfo)(IPropertyBag2 *This, ULONG iProperty, ULONG cProperties, PROPBAG2 *pPropBag, ULONG *pcProperties);HRESULT ( *LoadObject)(IPropertyBag2 *This, LPCOLESTR pstrName, DWORD dwHint, IUnknown *pUnkObject, IErrorLog *pErrLog);};
struct IRecalcEngineVtbl {HRESULT ( *QueryInterface)(IRecalcEngine *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecalcEngine *This);ULONG ( *Release)(IRecalcEngine *This);HRESULT ( *RecalcAll)(IRecalcEngine *This, BOOL fForce);HRESULT ( *OnNameSpaceChange)(IRecalcEngine *This, IUnknown *pUnk);HRESULT ( *SetExpression)(IRecalcEngine *This, IUnknown *pUnk, DISPID dispid, LPOLESTR strExpression, LPOLESTR language);HRESULT ( *GetExpression)(IRecalcEngine *This, IUnknown *pUnk, DISPID dispid, BSTR *pstrExpression, BSTR *pstrLanguage);HRESULT ( *ClearExpression)(IRecalcEngine *This, IUnknown *pUnk, DISPID dispid);HRESULT ( *BeginStyle)(IRecalcEngine *This, IUnknown *pObject);HRESULT ( *EndStyle)(IRecalcEngine *This, IUnknown *pObject);};
struct ITravelLogStgVtbl {HRESULT ( *QueryInterface)(ITravelLogStg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLogStg *This);ULONG ( *Release)(ITravelLogStg *This);HRESULT ( *CreateEntry)(ITravelLogStg *This, LPCOLESTR pszUrl, LPCOLESTR pszTitle, ITravelLogEntry *ptleRelativeTo, BOOL fPrepend, ITravelLogEntry **pptle);HRESULT ( *TravelTo)(ITravelLogStg *This, ITravelLogEntry *ptle);HRESULT ( *EnumEntries)(ITravelLogStg *This, TLENUMF flags, IEnumTravelLogEntry **ppenum);HRESULT ( *FindEntries)(ITravelLogStg *This, TLENUMF flags, LPCOLESTR pszUrl, IEnumTravelLogEntry **ppenum);HRESULT ( *GetCount)(ITravelLogStg *This, TLENUMF flags, DWORD *pcEntries);HRESULT ( *RemoveEntry)(ITravelLogStg *This, ITravelLogEntry *ptle);HRESULT ( *GetRelativeEntry)(ITravelLogStg *This, int iOffset, ITravelLogEntry **ptle);};
struct ITravelLogExVtbl {HRESULT ( *QueryInterface)(ITravelLogEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITravelLogEx *This);ULONG ( *Release)(ITravelLogEx *This);HRESULT ( *FindTravelEntryWithUrl)(ITravelLogEx *This, IUnknown *punk, UINT uiCP, LPOLESTR pszUrl, ITravelEntry **ppte);HRESULT ( *TravelToUrl)(ITravelLogEx *This, IUnknown *punk, UINT uiCP, LPOLESTR pszUrl);HRESULT ( *DeleteIndexEntry)(ITravelLogEx *This, IUnknown *punk, int index);HRESULT ( *DeleteUrlEntry)(ITravelLogEx *This, IUnknown *punk, UINT uiCP, LPOLESTR pszUrl);HRESULT ( *CountEntryNodes)(ITravelLogEx *This, IUnknown *punk, DWORD dwFlags, DWORD *pdwCount);HRESULT ( *CreateEnumEntry)(ITravelLogEx *This, IUnknown *punk, IEnumTravelLogEntry **ppEnum, DWORD dwFlags);HRESULT ( *DeleteEntry)(ITravelLogEx *This, IUnknown *punk, ITravelLogEntry *pte);HRESULT ( *InsertEntry)(ITravelLogEx *This, IUnknown *punkBrowser, ITravelLogEntry *pteRelativeTo, BOOL fPrepend, IUnknown *punkTLClient, ITravelLogEntry **ppEntry);HRESULT ( *TravelToEntry)(ITravelLogEx *This, IUnknown *punkBrowser, ITravelLogEntry *pteDestination);};
struct tagDBCOLUMNINFO {LPOLESTR pwszName;ITypeInfo *pTypeInfo;DBORDINAL iOrdinal;DBCOLUMNFLAGS dwFlags;DBLENGTH ulColumnSize;DBTYPE wType;BYTE bPrecision;BYTE bScale;DBID columnid;};
struct tagOCPFIPARAMS {ULONG cbStructSize;HWND hWndOwner;int x;int y;LPCOLESTR lpszCaption;ULONG cObjects;LPUNKNOWN *lplpUnk;ULONG cPages;CLSID *lpPages;LCID lcid;DISPID dispidInitialProperty;};
struct ITypeCompVtbl {HRESULT ( *QueryInterface)(ITypeComp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeComp *This);ULONG ( *Release)(ITypeComp *This);HRESULT ( *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);HRESULT ( *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);};
struct IBindingVtbl {HRESULT ( *QueryInterface)(IBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBinding *This);ULONG ( *Release)(IBinding *This);HRESULT ( *Abort)(IBinding *This);HRESULT ( *Suspend)(IBinding *This);HRESULT ( *Resume)(IBinding *This);HRESULT ( *SetPriority)(IBinding *This, LONG nPriority);HRESULT ( *GetPriority)(IBinding *This, LONG *pnPriority);HRESULT ( *GetBindResult)(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);};
struct IOleLinkVtbl {HRESULT ( *QueryInterface)(IOleLink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleLink *This);ULONG ( *Release)(IOleLink *This);HRESULT ( *SetUpdateOptions)(IOleLink *This, DWORD dwUpdateOpt);HRESULT ( *GetUpdateOptions)(IOleLink *This, DWORD *pdwUpdateOpt);HRESULT ( *SetSourceMoniker)(IOleLink *This, IMoniker *pmk,  CLSID * rclsid);HRESULT ( *GetSourceMoniker)(IOleLink *This, IMoniker **ppmk);HRESULT ( *SetSourceDisplayName)(IOleLink *This, LPCOLESTR pszStatusText);HRESULT ( *GetSourceDisplayName)(IOleLink *This, LPOLESTR *ppszDisplayName);HRESULT ( *BindToSource)(IOleLink *This, DWORD bindflags, IBindCtx *pbc);HRESULT ( *BindIfRunning)(IOleLink *This);HRESULT ( *GetBoundSource)(IOleLink *This, IUnknown **ppunk);HRESULT ( *UnbindSource)(IOleLink *This);HRESULT ( *Update)(IOleLink *This, IBindCtx *pbc);};
struct IDBInfoVtbl {HRESULT ( *QueryInterface)(IDBInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBInfo *This);ULONG ( *Release)(IDBInfo *This);HRESULT ( *GetKeywords)(IDBInfo *This, LPOLESTR *ppwszKeywords);HRESULT ( *GetLiteralInfo)(IDBInfo *This, ULONG cLiterals, DBLITERAL  *    rgLiterals, ULONG *pcLiteralInfo, DBLITERALINFO **prgLiteralInfo, OLECHAR **ppCharBuffer);};
struct IOleInPlaceUIWindowVtbl {HRESULT ( *QueryInterface)(IOleInPlaceUIWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceUIWindow *This);ULONG ( *Release)(IOleInPlaceUIWindow *This);HRESULT ( *GetWindow)(IOleInPlaceUIWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);};
struct IActiveScriptParseVtbl {HRESULT ( *QueryInterface)(IActiveScriptParse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParse *This);ULONG ( *Release)(IActiveScriptParse *This);HRESULT ( *InitNew)(IActiveScriptParse *This);HRESULT ( *AddScriptlet)(IActiveScriptParse *This, LPCOLESTR pstrDefaultName, LPCOLESTR pstrCode, LPCOLESTR pstrItemName, LPCOLESTR pstrSubItemName, LPCOLESTR pstrEventName, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, BSTR *pbstrName, EXCEPINFO *pexcepinfo);HRESULT ( *ParseScriptText)(IActiveScriptParse *This, LPCOLESTR pstrCode, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, VARIANT *pvarResult, EXCEPINFO *pexcepinfo);};
struct IDownloadManagerVtbl {HRESULT ( *QueryInterface)(IDownloadManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDownloadManager *This);ULONG ( *Release)(IDownloadManager *This);HRESULT ( *Download)(IDownloadManager *This, IMoniker *pmk, IBindCtx *pbc, DWORD dwBindVerb, LONG grfBINDF, BINDINFO *pBindInfo, LPCOLESTR pszHeaders, LPCOLESTR pszRedir, UINT uiCP);};
struct IDBAsynchStatusVtbl {HRESULT ( *QueryInterface)(IDBAsynchStatus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBAsynchStatus *This);ULONG ( *Release)(IDBAsynchStatus *This);HRESULT ( *Abort)(IDBAsynchStatus *This, HCHAPTER hChapter, DBASYNCHOP eOperation);HRESULT ( *GetStatus)(IDBAsynchStatus *This, HCHAPTER hChapter, DBASYNCHOP eOperation, DBCOUNTITEM *pulProgress, DBCOUNTITEM *pulProgressMax, DBASYNCHPHASE *peAsynchPhase, LPOLESTR *ppwszStatusText);};
struct IBindResourceVtbl {HRESULT ( *QueryInterface)(IBindResource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindResource *This);ULONG ( *Release)(IBindResource *This);HRESULT ( *Bind)(IBindResource *This, IUnknown *pUnkOuter, LPCOLESTR pwszURL, DBBINDURLFLAG dwBindURLFlags,  GUID * rguid,  IID * riid, IAuthenticate *pAuthenticate, DBIMPLICITSESSION *pImplSession, DBBINDURLSTATUS *pdwBindStatus, IUnknown **ppUnk);};
struct ICommandTextVtbl {HRESULT ( *QueryInterface)(ICommandText *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandText *This);ULONG ( *Release)(ICommandText *This);HRESULT ( *Cancel)(ICommandText *This);HRESULT ( *Execute)(ICommandText *This, IUnknown *pUnkOuter,  IID * riid, DBPARAMS *pParams, DBROWCOUNT *pcRowsAffected, IUnknown **ppRowset);HRESULT ( *GetDBSession)(ICommandText *This,  IID * riid, IUnknown **ppSession);HRESULT ( *GetCommandText)(ICommandText *This, GUID *pguidDialect, LPOLESTR *ppwszCommand);HRESULT ( *SetCommandText)(ICommandText *This,  GUID * rguidDialect, LPCOLESTR pwszCommand);};
struct IPersistFileVtbl {HRESULT ( *QueryInterface)(IPersistFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFile *This);ULONG ( *Release)(IPersistFile *This);HRESULT ( *GetClassID)(IPersistFile *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistFile *This);HRESULT ( *Load)(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode);HRESULT ( *Save)(IPersistFile *This, LPCOLESTR pszFileName, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistFile *This, LPCOLESTR pszFileName);HRESULT ( *GetCurFile)(IPersistFile *This, LPOLESTR *ppszFileName);};
struct tagDBCOLUMNDESC {LPOLESTR pwszTypeName;ITypeInfo *pTypeInfo;DBPROPSET *rgPropertySets;CLSID *pclsid;ULONG cPropertySets;DBLENGTH ulColumnSize;DBID dbcid;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct IMultiplePropertyAccessVtbl {HRESULT ( *QueryInterface)(IMultiplePropertyAccess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiplePropertyAccess *This);ULONG ( *Release)(IMultiplePropertyAccess *This);HRESULT ( *GetIDsOfProperties)(IMultiplePropertyAccess *This,  IID * riid, LPOLESTR *rgszNames, ULONG cNames, LCID lcid, HRESULT *rghresult, DISPID *rgdispid);HRESULT ( *GetMultiple)(IMultiplePropertyAccess *This, DISPID *rgdispidMembers, ULONG cMembers,  IID * riid, LCID lcid, BOOL fAtomic, VARIANT *rgvarValues, HRESULT *rghresult);HRESULT ( *PutMultiple)(IMultiplePropertyAccess *This, DISPID *rgdispidMembers, USHORT *rgusFlags, ULONG cMembers,  IID * riid, LCID lcid, BOOL fAtomic, VARIANT *rgvarValues, HRESULT *rghresult);};
struct ICaptureGraphBuilderVtbl {HRESULT ( *QueryInterface)(ICaptureGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICaptureGraphBuilder *This);ULONG ( *Release)(ICaptureGraphBuilder *This);HRESULT ( *SetFiltergraph)(ICaptureGraphBuilder *This, IGraphBuilder *pfg);HRESULT ( *GetFiltergraph)(ICaptureGraphBuilder *This, IGraphBuilder **ppfg);HRESULT ( *SetOutputFileName)(ICaptureGraphBuilder *This,  GUID *pType, LPCOLESTR lpstrFile, IBaseFilter **ppf, IFileSinkFilter **ppSink);HRESULT ( *FindInterface)(ICaptureGraphBuilder *This,  GUID *pCategory, IBaseFilter *pf,  IID * riid, void **ppint);HRESULT ( *RenderStream)(ICaptureGraphBuilder *This,  GUID *pCategory, IUnknown *pSource, IBaseFilter *pfCompressor, IBaseFilter *pfRenderer);HRESULT ( *ControlStream)(ICaptureGraphBuilder *This,  GUID *pCategory, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie);HRESULT ( *AllocCapFile)(ICaptureGraphBuilder *This, LPCOLESTR lpstr, DWORDLONG dwlSize);HRESULT ( *CopyCaptureFile)(ICaptureGraphBuilder *This, LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *pCallback);};
struct IHTMLPrivateWindowVtbl {HRESULT ( *QueryInterface)(IHTMLPrivateWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPrivateWindow *This);ULONG ( *Release)(IHTMLPrivateWindow *This);HRESULT ( *SuperNavigate)(IHTMLPrivateWindow *This, BSTR bstrURL, BSTR bstrLocation, BSTR bstrShortcut, BSTR bstrFrameName, VARIANT *pvarPostData, VARIANT *pvarHeaders, DWORD dwFlags);HRESULT ( *GetPendingUrl)(IHTMLPrivateWindow *This, LPOLESTR *pstrURL);HRESULT ( *SetPICSTarget)(IHTMLPrivateWindow *This, IOleCommandTarget *pctPICS);HRESULT ( *PICSComplete)(IHTMLPrivateWindow *This, BOOL fApproved);HRESULT ( *FindWindowByName)(IHTMLPrivateWindow *This, LPCOLESTR pstrTargeName, IHTMLWindow2 **ppWindow);HRESULT ( *GetAddressBarUrl)(IHTMLPrivateWindow *This, BSTR *pbstrURL);};
struct ICodeStoreDBEntryVtbl {HRESULT ( *QueryInterface)(ICodeStoreDBEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICodeStoreDBEntry *This);ULONG ( *Release)(ICodeStoreDBEntry *This);HRESULT ( *GetName)(ICodeStoreDBEntry *This, DWORD dwFlags, BSTR *pbstrName);HRESULT ( *CreateChild)(ICodeStoreDBEntry *This, LPCOLESTR pszName, ICodeStoreDBEntry **ppEntry);HRESULT ( *RemoveChild)(ICodeStoreDBEntry *This, LPCOLESTR pszName, DWORD dwFlags);HRESULT ( *GetChild)(ICodeStoreDBEntry *This, LPCOLESTR pszName, ICodeStoreDBEntry **ppEntry);HRESULT ( *EnumChildren)(ICodeStoreDBEntry *This, IEnumCodeStoreDBEntry **ppEntry);HRESULT ( *GetParent)(ICodeStoreDBEntry *This, ICodeStoreDBEntry **ppParent);HRESULT ( *GetProperty)(ICodeStoreDBEntry *This, LPCOLESTR pszName, VARIANT *pvarProperty);HRESULT ( *SetProperty)(ICodeStoreDBEntry *This, LPCOLESTR pszName, VARIANT *pvarProperty);HRESULT ( *DeleteProperty)(ICodeStoreDBEntry *This, LPCOLESTR pszName);HRESULT ( *GetDWORDPropertyA)(ICodeStoreDBEntry *This, LPCSTR pszName, DWORD *pVal);HRESULT ( *SetDWORDPropertyA)(ICodeStoreDBEntry *This, LPCSTR pszName, DWORD dwVal);HRESULT ( *GetStringPropertyA)(ICodeStoreDBEntry *This, LPCSTR pszName, LPSTR pszVal, DWORD cbVal);HRESULT ( *SetStringPropertyA)(ICodeStoreDBEntry *This, LPCSTR pszName, LPCSTR pszVal);};
struct IDocHostShowUICEVtbl {HRESULT ( *QueryInterface)(IDocHostShowUICE *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostShowUICE *This);ULONG ( *Release)(IDocHostShowUICE *This);HRESULT ( *ShowInternalMessage)(IDocHostShowUICE *This, HWND hwnd, LPOLESTR lpstrText, LPOLESTR lpstrCaption, DWORD dwType, DWORD dwMessageId, LPOLESTR lpstrHelpFile, DWORD dwHelpContext, LRESULT *plResult);HRESULT ( *ShowPrompt)(IDocHostShowUICE *This, HWND hwnd, LPOLESTR lpstrMessage, LPOLESTR lpstrDefault, VARIANT *pvarText, LRESULT *plResult);HRESULT ( *GetFilename)(IDocHostShowUICE *This, BOOL fSave, HWND hwnd, DWORD idFilterRes, LPOLESTR lpstrFileName, DWORD cchFile, int lCustData);};
struct IDBAsynchNotifyVtbl {HRESULT ( *QueryInterface)(IDBAsynchNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBAsynchNotify *This);ULONG ( *Release)(IDBAsynchNotify *This);HRESULT ( *OnLowResource)(IDBAsynchNotify *This, DB_DWRESERVE dwReserved);HRESULT ( *OnProgress)(IDBAsynchNotify *This, HCHAPTER hChapter, DBASYNCHOP eOperation, DBCOUNTITEM ulProgress, DBCOUNTITEM ulProgressMax, DBASYNCHPHASE eAsynchPhase, LPOLESTR pwszStatusText);HRESULT ( *OnStop)(IDBAsynchNotify *This, HCHAPTER hChapter, DBASYNCHOP eOperation, HRESULT hrStatus, LPOLESTR pwszStatusText);};
struct IDebugPropertyVtbl {HRESULT ( *QueryInterface)(IDebugProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugProperty *This);ULONG ( *Release)(IDebugProperty *This);HRESULT ( *GetPropertyInfo)(IDebugProperty *This, DWORD dwFieldSpec, UINT nRadix, DebugPropertyInfo *pPropertyInfo);HRESULT ( *GetExtendedInfo)(IDebugProperty *This, ULONG cInfos, GUID *rgguidExtendedInfo, VARIANT *rgvar);HRESULT ( *SetValueAsString)(IDebugProperty *This, LPCOLESTR pszValue, UINT nRadix);HRESULT ( *EnumMembers)(IDebugProperty *This, DWORD dwFieldSpec, UINT nRadix,  IID * refiid, IEnumDebugPropertyInfo **ppepi);HRESULT ( *GetParent)(IDebugProperty *This, IDebugProperty **ppDebugProp);};
struct IDocHostShowUIVtbl {HRESULT ( *QueryInterface)(IDocHostShowUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostShowUI *This);ULONG ( *Release)(IDocHostShowUI *This);HRESULT ( *ShowMessage)(IDocHostShowUI *This, HWND hwnd, LPOLESTR lpstrText, LPOLESTR lpstrCaption, DWORD dwType, LPOLESTR lpstrHelpFile, DWORD dwHelpContext, LRESULT *plResult);HRESULT ( *ShowHelp)(IDocHostShowUI *This, HWND hwnd, LPOLESTR pszHelpFile, UINT uCommand, DWORD dwData, POINT ptMouse, IDispatch *pDispatchObjectHit);};
struct IShellMonikerVtbl {HRESULT ( *QueryInterface)(IShellMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellMoniker *This);ULONG ( *Release)(IShellMoniker *This);HRESULT ( *BindToObject)(IShellMoniker *This, IBindCtx *pbc,  IID * riid, void **ppvOut);HRESULT ( *BindToStorage)(IShellMoniker *This, IBindCtx *pbc,  IID * riid, void **ppvOut);HRESULT ( *GetDisplayName)(IShellMoniker *This, IBindCtx *pbc, SHGDNF shgdnFlags, LPOLESTR *ppszName);HRESULT ( *GetAttributes)(IShellMoniker *This, SFGAOF sfgaoMask, SFGAOF *psfgaoFlags);HRESULT ( *GetProperty)(IShellMoniker *This, IBindCtx *pbc,  FMTID * fmtid, PROPID pid, VARIANT *pv);};
struct IRecordInfoVtbl {HRESULT ( *QueryInterface)(IRecordInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecordInfo *This);ULONG ( *Release)(IRecordInfo *This);HRESULT ( *RecordInit)(IRecordInfo *This, PVOID pvNew);HRESULT ( *RecordClear)(IRecordInfo *This, PVOID pvExisting);HRESULT ( *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);HRESULT ( *GetGuid)(IRecordInfo *This, GUID *pguid);HRESULT ( *GetName)(IRecordInfo *This, BSTR *pbstrName);HRESULT ( *GetSize)(IRecordInfo *This, ULONG *pcbSize);HRESULT ( *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);HRESULT ( *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);HRESULT ( *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);BOOL ( *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);PVOID ( *RecordCreate)(IRecordInfo *This);HRESULT ( *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);HRESULT ( *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);};
struct ICreateRowVtbl {HRESULT ( *QueryInterface)(ICreateRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateRow *This);ULONG ( *Release)(ICreateRow *This);HRESULT ( *CreateRow)(ICreateRow *This, IUnknown *pUnkOuter, LPCOLESTR pwszURL, DBBINDURLFLAG dwBindURLFlags,  GUID * rguid,  IID * riid, IAuthenticate *pAuthenticate, DBIMPLICITSESSION *pImplSession, DBBINDURLSTATUS *pdwBindStatus, LPOLESTR *ppwszNewURL, IUnknown **ppUnk);};
struct IMonikerVtbl {HRESULT ( *QueryInterface)(IMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMoniker *This);ULONG ( *Release)(IMoniker *This);HRESULT ( *GetClassID)(IMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMoniker *This);HRESULT ( *Load)(IMoniker *This, IStream *pStm);HRESULT ( *Save)(IMoniker *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);HRESULT ( *BindToObject)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riidResult, void **ppvResult);HRESULT ( *BindToStorage)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riid, void **ppvObj);HRESULT ( *Reduce)(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);HRESULT ( *ComposeWith)(IMoniker *This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);HRESULT ( *Enum)(IMoniker *This, BOOL fForward, IEnumMoniker **ppenumMoniker);HRESULT ( *IsEqual)(IMoniker *This, IMoniker *pmkOtherMoniker);HRESULT ( *Hash)(IMoniker *This, DWORD *pdwHash);HRESULT ( *IsRunning)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);HRESULT ( *GetTimeOfLastChange)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);HRESULT ( *Inverse)(IMoniker *This, IMoniker **ppmk);HRESULT ( *CommonPrefixWith)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);HRESULT ( *RelativePathTo)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);HRESULT ( *GetDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);HRESULT ( *ParseDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *IsSystemMoniker)(IMoniker *This, DWORD *pdwMksys);};
struct IDebugExtendedPropertyVtbl {HRESULT ( *QueryInterface)(IDebugExtendedProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDebugExtendedProperty *This);ULONG ( *Release)(IDebugExtendedProperty *This);HRESULT ( *GetPropertyInfo)(IDebugExtendedProperty *This, DWORD dwFieldSpec, UINT nRadix, DebugPropertyInfo *pPropertyInfo);HRESULT ( *GetExtendedInfo)(IDebugExtendedProperty *This, ULONG cInfos, GUID *rgguidExtendedInfo, VARIANT *rgvar);HRESULT ( *SetValueAsString)(IDebugExtendedProperty *This, LPCOLESTR pszValue, UINT nRadix);HRESULT ( *EnumMembers)(IDebugExtendedProperty *This, DWORD dwFieldSpec, UINT nRadix,  IID * refiid, IEnumDebugPropertyInfo **ppepi);HRESULT ( *GetParent)(IDebugExtendedProperty *This, IDebugProperty **ppDebugProp);HRESULT ( *GetExtendedPropertyInfo)(IDebugExtendedProperty *This, DWORD dwFieldSpec, UINT nRadix, ExtendedDebugPropertyInfo *pExtendedPropertyInfo);HRESULT ( *EnumExtendedMembers)(IDebugExtendedProperty *This, DWORD dwFieldSpec, UINT nRadix, IEnumDebugExtendedPropertyInfo **ppeepi);};
struct IJavaPackageManagerVtbl {HRESULT ( *QueryInterface)(IJavaPackageManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaPackageManager *This);ULONG ( *Release)(IJavaPackageManager *This);HRESULT ( *InstallPackage)(IJavaPackageManager *This, LPCOLESTR pszFileName, LPCOLESTR pszNamespace, DWORD dwFileType, LPPACKAGEINSTALLINFO pPackageInfo, UINT cPackages, DWORD dwFlags, LPCPACKAGESECURITYINFO pSecurityInfo);HRESULT ( *UninstallPackage)(IJavaPackageManager *This, LPCOLESTR pszPackageName, LPCOLESTR pszNamespace, DWORD dwFlags);HRESULT ( *EnumPackages)(IJavaPackageManager *This, LPCOLESTR pszNamespace, IEnumJavaPackage **ppEnum);HRESULT ( *GetPackage)(IJavaPackageManager *This, LPCOLESTR pszPackageName, LPCOLESTR pszNamespace, IJavaPackage **ppPackage);HRESULT ( *GetFile)(IJavaPackageManager *This, LPCOLESTR pszFileName, LPCOLESTR pszNamespace, DWORD dwFlags, IJavaFile **ppFile);HRESULT ( *GetExplicitClassPath)(IJavaPackageManager *This, BSTR *pbstrPath);HRESULT ( *SetExplicitClassPath)(IJavaPackageManager *This, LPCOLESTR pszPath, BOOL fAppend);HRESULT ( *SetCurrentDirectory)(IJavaPackageManager *This, LPCOLESTR pszDir);};
struct IActiveScriptSiteVtbl {HRESULT ( *QueryInterface)(IActiveScriptSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSite *This);ULONG ( *Release)(IActiveScriptSite *This);HRESULT ( *GetLCID)(IActiveScriptSite *This, LCID *plcid);HRESULT ( *GetItemInfo)(IActiveScriptSite *This, LPCOLESTR pstrName, DWORD dwReturnMask, IUnknown **ppiunkItem, ITypeInfo **ppti);HRESULT ( *GetDocVersionString)(IActiveScriptSite *This, BSTR *pbstrVersion);HRESULT ( *OnScriptTerminate)(IActiveScriptSite *This,  VARIANT *pvarResult,  EXCEPINFO *pexcepinfo);HRESULT ( *OnStateChange)(IActiveScriptSite *This, SCRIPTSTATE ssScriptState);HRESULT ( *OnScriptError)(IActiveScriptSite *This, IActiveScriptError *pscripterror);HRESULT ( *OnEnterScript)(IActiveScriptSite *This);HRESULT ( *OnLeaveScript)(IActiveScriptSite *This);};
struct ICreateTypeLibVtbl {HRESULT ( *QueryInterface)(ICreateTypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib *This);ULONG ( *Release)(ICreateTypeLib *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib *This);};
struct IActiveScriptVtbl {HRESULT ( *QueryInterface)(IActiveScript *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScript *This);ULONG ( *Release)(IActiveScript *This);HRESULT ( *SetScriptSite)(IActiveScript *This, IActiveScriptSite *pass);HRESULT ( *GetScriptSite)(IActiveScript *This,  IID * riid, void **ppvObject);HRESULT ( *SetScriptState)(IActiveScript *This, SCRIPTSTATE ss);HRESULT ( *GetScriptState)(IActiveScript *This, SCRIPTSTATE *pssState);HRESULT ( *Close)(IActiveScript *This);HRESULT ( *AddNamedItem)(IActiveScript *This, LPCOLESTR pstrName, DWORD dwFlags);HRESULT ( *AddTypeLib)(IActiveScript *This,  GUID * rguidTypeLib, DWORD dwMajor, DWORD dwMinor, DWORD dwFlags);HRESULT ( *GetScriptDispatch)(IActiveScript *This, LPCOLESTR pstrItemName, IDispatch **ppdisp);HRESULT ( *GetCurrentScriptThreadID)(IActiveScript *This, SCRIPTTHREADID *pstidThread);HRESULT ( *GetScriptThreadID)(IActiveScript *This, DWORD dwWin32ThreadId, SCRIPTTHREADID *pstidThread);HRESULT ( *GetScriptThreadState)(IActiveScript *This, SCRIPTTHREADID stidThread, SCRIPTTHREADSTATE *pstsState);HRESULT ( *InterruptScriptThread)(IActiveScript *This, SCRIPTTHREADID stidThread,  EXCEPINFO *pexcepinfo, DWORD dwFlags);HRESULT ( *Clone)(IActiveScript *This, IActiveScript **ppscript);};
struct IPropertyPageVtbl {HRESULT ( *QueryInterface)(IPropertyPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage *This);ULONG ( *Release)(IPropertyPage *This);HRESULT ( *SetPageSite)(IPropertyPage *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage *This);HRESULT ( *GetPageInfo)(IPropertyPage *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage *This);HRESULT ( *Apply)(IPropertyPage *This);HRESULT ( *Help)(IPropertyPage *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage *This, MSG *pMsg);};
struct tagTYPEATTR {GUID guid;LCID lcid;DWORD dwReserved;MEMBERID memidConstructor;MEMBERID memidDestructor;LPOLESTR lpstrSchema;ULONG cbSizeInstance;TYPEKIND typekind;WORD cFuncs;WORD cVars;WORD cImplTypes;WORD cbSizeVft;WORD cbAlignment;WORD wTypeFlags;WORD wMajorVerNum;WORD wMinorVerNum;TYPEDESC tdescAlias;IDLDESC idldescType;};
struct HTMLOptionButtonElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLOptionButtonElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLOptionButtonElementEvents2 *This);ULONG ( *Release)(HTMLOptionButtonElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLOptionButtonElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLOptionButtonElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLOptionButtonElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLOptionButtonElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLStyleSheetPagesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetPagesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetPagesCollection *This);ULONG ( *Release)(IHTMLStyleSheetPagesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetPagesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetPagesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetPagesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetPagesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLStyleSheetPagesCollection *This, int *p);HRESULT ( *item)(IHTMLStyleSheetPagesCollection *This, int index, IHTMLStyleSheetPage **ppHTMLStyleSheetPage);};
struct IHTMLStyleSheetRulesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetRulesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetRulesCollection *This);ULONG ( *Release)(IHTMLStyleSheetRulesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetRulesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetRulesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetRulesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetRulesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLStyleSheetRulesCollection *This, int *p);HRESULT ( *item)(IHTMLStyleSheetRulesCollection *This, int index, IHTMLStyleSheetRule **ppHTMLStyleSheetRule);};
struct HTMLOptionButtonElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLOptionButtonElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLOptionButtonElementEvents *This);ULONG ( *Release)(HTMLOptionButtonElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLOptionButtonElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLOptionButtonElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLOptionButtonElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLOptionButtonElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IAnimationComposerSiteFactoryVtbl {HRESULT ( *QueryInterface)(IAnimationComposerSiteFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationComposerSiteFactory *This);ULONG ( *Release)(IAnimationComposerSiteFactory *This);HRESULT ( *GetTypeInfoCount)(IAnimationComposerSiteFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAnimationComposerSiteFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAnimationComposerSiteFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAnimationComposerSiteFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IRTCDispatchEventNotificationVtbl {HRESULT ( *QueryInterface)(IRTCDispatchEventNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCDispatchEventNotification *This);ULONG ( *Release)(IRTCDispatchEventNotification *This);HRESULT ( *GetTypeInfoCount)(IRTCDispatchEventNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCDispatchEventNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCDispatchEventNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCDispatchEventNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLOptionButtonElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLOptionButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLOptionButtonElement *This);ULONG ( *Release)(DispIHTMLOptionButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLOptionButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLOptionButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLOptionButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLOptionButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ITIMEActiveElementCollectionVtbl {HRESULT ( *QueryInterface)(ITIMEActiveElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEActiveElementCollection *This);ULONG ( *Release)(ITIMEActiveElementCollection *This);HRESULT ( *GetTypeInfoCount)(ITIMEActiveElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEActiveElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEActiveElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEActiveElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(ITIMEActiveElementCollection *This, int *p);HRESULT ( *get__newEnum)(ITIMEActiveElementCollection *This, IUnknown **p);HRESULT ( *item)(ITIMEActiveElementCollection *This, VARIANT varIndex, VARIANT *pvarResult);};
struct DispHTMLAttributeCollectionVtbl {HRESULT ( *QueryInterface)(DispHTMLAttributeCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLAttributeCollection *This);ULONG ( *Release)(DispHTMLAttributeCollection *This);HRESULT ( *GetTypeInfoCount)(DispHTMLAttributeCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLAttributeCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLAttributeCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLAttributeCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputButtonElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputButtonElement *This);ULONG ( *Release)(DispIHTMLInputButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputFileElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLInputFileElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputFileElementEvents2 *This);ULONG ( *Release)(HTMLInputFileElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLInputFileElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputFileElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputFileElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputFileElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputTextElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLInputTextElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputTextElementEvents2 *This);ULONG ( *Release)(HTMLInputTextElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLInputTextElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputTextElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputTextElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputTextElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputFileElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputFileElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputFileElementEvents *This);ULONG ( *Release)(HTMLInputFileElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputFileElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputFileElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputFileElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputFileElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputTextElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputTextElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputTextElementEvents *This);ULONG ( *Release)(HTMLInputTextElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputTextElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputTextElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputTextElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputTextElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLDOMChildrenCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLDOMChildrenCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMChildrenCollection *This);ULONG ( *Release)(IHTMLDOMChildrenCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMChildrenCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMChildrenCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMChildrenCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMChildrenCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLDOMChildrenCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLDOMChildrenCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLDOMChildrenCollection *This, int index, IDispatch **ppItem);};
struct IHTMLStyleSheetsCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetsCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetsCollection *This);ULONG ( *Release)(IHTMLStyleSheetsCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetsCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetsCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetsCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLStyleSheetsCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLStyleSheetsCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLStyleSheetsCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct DispDOMChildrenCollectionVtbl {HRESULT ( *QueryInterface)(DispDOMChildrenCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispDOMChildrenCollection *This);ULONG ( *Release)(DispDOMChildrenCollection *This);HRESULT ( *GetTypeInfoCount)(DispDOMChildrenCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispDOMChildrenCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispDOMChildrenCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispDOMChildrenCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDOMImplementationVtbl {HRESULT ( *QueryInterface)(DispHTMLDOMImplementation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDOMImplementation *This);ULONG ( *Release)(DispHTMLDOMImplementation *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDOMImplementation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDOMImplementation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDOMImplementation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLElementCollectionVtbl {HRESULT ( *QueryInterface)(DispHTMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLElementCollection *This);ULONG ( *Release)(DispHTMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(DispHTMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputFileElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputFileElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputFileElement *This);ULONG ( *Release)(DispIHTMLInputFileElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputFileElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputFileElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputFileElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputFileElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputTextElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputTextElement *This);ULONG ( *Release)(DispIHTMLInputTextElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLControlElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLControlElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLControlElementEvents2 *This);ULONG ( *Release)(HTMLControlElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLControlElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLControlElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLControlElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLControlElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMarqueeElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLMarqueeElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMarqueeElementEvents2 *This);ULONG ( *Release)(HTMLMarqueeElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLMarqueeElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMarqueeElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMarqueeElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMarqueeElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLOptionElementFactoryVtbl {HRESULT ( *QueryInterface)(IHTMLOptionElementFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElementFactory *This);ULONG ( *Release)(IHTMLOptionElementFactory *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElementFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElementFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElementFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElementFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *create)(IHTMLOptionElementFactory *This, VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, IHTMLOptionElement **MIDL_0016);};
struct HTMLButtonElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLButtonElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLButtonElementEvents2 *This);ULONG ( *Release)(HTMLButtonElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLButtonElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLButtonElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLButtonElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLButtonElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLControlElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLControlElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLControlElementEvents *This);ULONG ( *Release)(HTMLControlElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLControlElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLControlElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLControlElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLControlElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMarqueeElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLMarqueeElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMarqueeElementEvents *This);ULONG ( *Release)(HTMLMarqueeElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLMarqueeElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMarqueeElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMarqueeElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMarqueeElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLObjectElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLObjectElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLObjectElementEvents2 *This);ULONG ( *Release)(HTMLObjectElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLObjectElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLObjectElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLObjectElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLObjectElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLSelectElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLSelectElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLSelectElementEvents2 *This);ULONG ( *Release)(HTMLSelectElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLSelectElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLSelectElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLSelectElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLSelectElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTextContainerEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLTextContainerEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTextContainerEvents2 *This);ULONG ( *Release)(HTMLTextContainerEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLTextContainerEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTextContainerEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTextContainerEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTextContainerEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLAttributeCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLAttributeCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAttributeCollection *This);ULONG ( *Release)(IHTMLAttributeCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLAttributeCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAttributeCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAttributeCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAttributeCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLAttributeCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLAttributeCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLAttributeCollection *This, VARIANT *name, IDispatch **pdisp);};
struct IHTMLImageElementFactoryVtbl {HRESULT ( *QueryInterface)(IHTMLImageElementFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLImageElementFactory *This);ULONG ( *Release)(IHTMLImageElementFactory *This);HRESULT ( *GetTypeInfoCount)(IHTMLImageElementFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLImageElementFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLImageElementFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLImageElementFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *create)(IHTMLImageElementFactory *This, VARIANT width, VARIANT height, IHTMLImgElement **MIDL_0015);};
struct IHTMLMimeTypesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLMimeTypesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMimeTypesCollection *This);ULONG ( *Release)(IHTMLMimeTypesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLMimeTypesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMimeTypesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMimeTypesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMimeTypesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLMimeTypesCollection *This, int *p);};
struct DispHTCPropertyBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTCPropertyBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCPropertyBehavior *This);ULONG ( *Release)(DispHTCPropertyBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTCPropertyBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCPropertyBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCPropertyBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCPropertyBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLAreasCollectionVtbl {HRESULT ( *QueryInterface)(DispHTMLAreasCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLAreasCollection *This);ULONG ( *Release)(DispHTMLAreasCollection *This);HRESULT ( *GetTypeInfoCount)(DispHTMLAreasCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLAreasCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLAreasCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLAreasCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLBaseFontElementVtbl {HRESULT ( *QueryInterface)(DispHTMLBaseFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBaseFontElement *This);ULONG ( *Release)(DispHTMLBaseFontElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBaseFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBaseFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBaseFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBaseFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFieldSetElementVtbl {HRESULT ( *QueryInterface)(DispHTMLFieldSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFieldSetElement *This);ULONG ( *Release)(DispHTMLFieldSetElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFieldSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFieldSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFieldSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFieldSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLRichtextElementVtbl {HRESULT ( *QueryInterface)(DispHTMLRichtextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLRichtextElement *This);ULONG ( *Release)(DispHTMLRichtextElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLRichtextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLRichtextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLRichtextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLRichtextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTextAreaElementVtbl {HRESULT ( *QueryInterface)(DispHTMLTextAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTextAreaElement *This);ULONG ( *Release)(DispHTMLTextAreaElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTextAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTextAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTextAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTextAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLButtonElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLButtonElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLButtonElementEvents *This);ULONG ( *Release)(HTMLButtonElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLButtonElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLButtonElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLButtonElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLButtonElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLObjectElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLObjectElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLObjectElementEvents *This);ULONG ( *Release)(HTMLObjectElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLObjectElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLObjectElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLObjectElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLObjectElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLSelectElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLSelectElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLSelectElementEvents *This);ULONG ( *Release)(HTMLSelectElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLSelectElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLSelectElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLSelectElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLSelectElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLStyleElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLStyleElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLStyleElementEvents2 *This);ULONG ( *Release)(HTMLStyleElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLStyleElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLStyleElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLStyleElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLStyleElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTextContainerEventsVtbl {HRESULT ( *QueryInterface)(HTMLTextContainerEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTextContainerEvents *This);ULONG ( *Release)(HTMLTextContainerEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLTextContainerEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTextContainerEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTextContainerEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTextContainerEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLBookmarkCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLBookmarkCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBookmarkCollection *This);ULONG ( *Release)(IHTMLBookmarkCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLBookmarkCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBookmarkCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBookmarkCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBookmarkCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLBookmarkCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLBookmarkCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLBookmarkCollection *This, int index, VARIANT *pVarBookmark);};
struct IHTMLElementCollection2Vtbl {HRESULT ( *QueryInterface)(IHTMLElementCollection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementCollection2 *This);ULONG ( *Release)(IHTMLElementCollection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLElementCollection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElementCollection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElementCollection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElementCollection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *urns)(IHTMLElementCollection2 *This, VARIANT urn, IDispatch **pdisp);};
struct IHTMLTxtRangeCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLTxtRangeCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTxtRangeCollection *This);ULONG ( *Release)(IHTMLTxtRangeCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLTxtRangeCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTxtRangeCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTxtRangeCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTxtRangeCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLTxtRangeCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLTxtRangeCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLTxtRangeCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct _IDirectContainerEventsVtbl {HRESULT ( *QueryInterface)(_IDirectContainerEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_IDirectContainerEvents *This);ULONG ( *Release)(_IDirectContainerEvents *This);HRESULT ( *GetTypeInfoCount)(_IDirectContainerEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_IDirectContainerEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_IDirectContainerEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_IDirectContainerEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DShellFolderViewEventsVtbl {HRESULT ( *QueryInterface)(DShellFolderViewEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellFolderViewEvents *This);ULONG ( *Release)(DShellFolderViewEvents *This);HRESULT ( *GetTypeInfoCount)(DShellFolderViewEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellFolderViewEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellFolderViewEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellFolderViewEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTCDefaultDispatchVtbl {HRESULT ( *QueryInterface)(DispHTCDefaultDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCDefaultDispatch *This);ULONG ( *Release)(DispHTCDefaultDispatch *This);HRESULT ( *GetTypeInfoCount)(DispHTCDefaultDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCDefaultDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCDefaultDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCDefaultDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLCommentElementVtbl {HRESULT ( *QueryInterface)(DispHTMLCommentElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLCommentElement *This);ULONG ( *Release)(DispHTMLCommentElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLCommentElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLCommentElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLCommentElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLCommentElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLGenericElementVtbl {HRESULT ( *QueryInterface)(DispHTMLGenericElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLGenericElement *This);ULONG ( *Release)(DispHTMLGenericElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLGenericElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLGenericElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLGenericElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLGenericElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLIsIndexElementVtbl {HRESULT ( *QueryInterface)(DispHTMLIsIndexElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLIsIndexElement *This);ULONG ( *Release)(DispHTMLIsIndexElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLIsIndexElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLIsIndexElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLIsIndexElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLIsIndexElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLMarqueeElementVtbl {HRESULT ( *QueryInterface)(DispHTMLMarqueeElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLMarqueeElement *This);ULONG ( *Release)(DispHTMLMarqueeElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLMarqueeElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLMarqueeElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLMarqueeElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLMarqueeElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLUnknownElementVtbl {HRESULT ( *QueryInterface)(DispHTMLUnknownElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLUnknownElement *This);ULONG ( *Release)(DispHTMLUnknownElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLUnknownElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLUnknownElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLUnknownElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLUnknownElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLFormElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLFormElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLFormElementEvents2 *This);ULONG ( *Release)(HTMLFormElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLFormElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLFormElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLFormElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLFormElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLLinkElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLLinkElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLinkElementEvents2 *This);ULONG ( *Release)(HTMLLinkElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLLinkElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLinkElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLinkElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLinkElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLStyleElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLStyleElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLStyleElementEvents *This);ULONG ( *Release)(HTMLStyleElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLStyleElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLStyleElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLStyleElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLStyleElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLFiltersCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFiltersCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFiltersCollection *This);ULONG ( *Release)(IHTMLFiltersCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFiltersCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFiltersCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFiltersCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFiltersCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFiltersCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFiltersCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLFiltersCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct IHTMLFramesCollection2Vtbl {HRESULT ( *QueryInterface)(IHTMLFramesCollection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFramesCollection2 *This);ULONG ( *Release)(IHTMLFramesCollection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFramesCollection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFramesCollection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFramesCollection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFramesCollection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *item)(IHTMLFramesCollection2 *This, VARIANT *pvarIndex, VARIANT *pvarResult);HRESULT ( *get_length)(IHTMLFramesCollection2 *This, int *p);};
struct IHTMLTextRangeMetrics2Vtbl {HRESULT ( *QueryInterface)(IHTMLTextRangeMetrics2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextRangeMetrics2 *This);ULONG ( *Release)(IHTMLTextRangeMetrics2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextRangeMetrics2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextRangeMetrics2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextRangeMetrics2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextRangeMetrics2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *getClientRects)(IHTMLTextRangeMetrics2 *This, IHTMLRectCollection **pRectCol);HRESULT ( *getBoundingClientRect)(IHTMLTextRangeMetrics2 *This, IHTMLRect **pRect);};
struct ITIMEElementCollectionVtbl {HRESULT ( *QueryInterface)(ITIMEElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEElementCollection *This);ULONG ( *Release)(ITIMEElementCollection *This);HRESULT ( *GetTypeInfoCount)(ITIMEElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(ITIMEElementCollection *This, int v);HRESULT ( *get_length)(ITIMEElementCollection *This, int *p);HRESULT ( *get__newEnum)(ITIMEElementCollection *This, IUnknown **ppIUnknown);HRESULT ( *item)(ITIMEElementCollection *This, VARIANT varName, VARIANT varIndex, IDispatch **ppDisp);HRESULT ( *tags)(ITIMEElementCollection *This, VARIANT varName, IDispatch **ppDisp);};
struct _SearchAssistantEventsVtbl {HRESULT ( *QueryInterface)(_SearchAssistantEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_SearchAssistantEvents *This);ULONG ( *Release)(_SearchAssistantEvents *This);HRESULT ( *GetTypeInfoCount)(_SearchAssistantEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_SearchAssistantEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_SearchAssistantEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_SearchAssistantEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DShellNameSpaceEventsVtbl {HRESULT ( *QueryInterface)(DShellNameSpaceEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellNameSpaceEvents *This);ULONG ( *Release)(DShellNameSpaceEvents *This);HRESULT ( *GetTypeInfoCount)(DShellNameSpaceEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellNameSpaceEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellNameSpaceEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellNameSpaceEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTCAttachBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTCAttachBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCAttachBehavior *This);ULONG ( *Release)(DispHTCAttachBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTCAttachBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCAttachBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCAttachBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCAttachBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTCMethodBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTCMethodBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCMethodBehavior *This);ULONG ( *Release)(DispHTCMethodBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTCMethodBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCMethodBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCMethodBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCMethodBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLAnchorElementVtbl {HRESULT ( *QueryInterface)(DispHTMLAnchorElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLAnchorElement *This);ULONG ( *Release)(DispHTMLAnchorElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLAnchorElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLAnchorElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLAnchorElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLAnchorElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLButtonElementVtbl {HRESULT ( *QueryInterface)(DispHTMLButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLButtonElement *This);ULONG ( *Release)(DispHTMLButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLHeaderElementVtbl {HRESULT ( *QueryInterface)(DispHTMLHeaderElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLHeaderElement *This);ULONG ( *Release)(DispHTMLHeaderElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLHeaderElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLHeaderElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLHeaderElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLHeaderElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLLegendElementVtbl {HRESULT ( *QueryInterface)(DispHTMLLegendElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLLegendElement *This);ULONG ( *Release)(DispHTMLLegendElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLLegendElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLLegendElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLLegendElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLLegendElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLNextIdElementVtbl {HRESULT ( *QueryInterface)(DispHTMLNextIdElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLNextIdElement *This);ULONG ( *Release)(DispHTMLNextIdElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLNextIdElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLNextIdElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLNextIdElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLNextIdElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLNoShowElementVtbl {HRESULT ( *QueryInterface)(DispHTMLNoShowElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLNoShowElement *This);ULONG ( *Release)(DispHTMLNoShowElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLNoShowElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLNoShowElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLNoShowElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLNoShowElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLObjectElementVtbl {HRESULT ( *QueryInterface)(DispHTMLObjectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLObjectElement *This);ULONG ( *Release)(DispHTMLObjectElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLObjectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLObjectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLObjectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLObjectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLOptionElementVtbl {HRESULT ( *QueryInterface)(DispHTMLOptionElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLOptionElement *This);ULONG ( *Release)(DispHTMLOptionElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLOptionElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLOptionElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLOptionElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLOptionElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLPhraseElementVtbl {HRESULT ( *QueryInterface)(DispHTMLPhraseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLPhraseElement *This);ULONG ( *Release)(DispHTMLPhraseElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLPhraseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLPhraseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLPhraseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLPhraseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLScriptElementVtbl {HRESULT ( *QueryInterface)(DispHTMLScriptElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLScriptElement *This);ULONG ( *Release)(DispHTMLScriptElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLScriptElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLScriptElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLScriptElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLScriptElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLSelectElementVtbl {HRESULT ( *QueryInterface)(DispHTMLSelectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLSelectElement *This);ULONG ( *Release)(DispHTMLSelectElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLSelectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLSelectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLSelectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLSelectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLFormElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLFormElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLFormElementEvents *This);ULONG ( *Release)(HTMLFormElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLFormElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLFormElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLFormElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLFormElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputImageEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLInputImageEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputImageEvents2 *This);ULONG ( *Release)(HTMLInputImageEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLInputImageEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputImageEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputImageEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputImageEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLLinkElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLLinkElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLinkElementEvents *This);ULONG ( *Release)(HTMLLinkElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLLinkElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLinkElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLinkElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLinkElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ICaptureGraphBuilder2Vtbl {HRESULT ( *QueryInterface)(ICaptureGraphBuilder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICaptureGraphBuilder2 *This);ULONG ( *Release)(ICaptureGraphBuilder2 *This);HRESULT ( *SetFiltergraph)(ICaptureGraphBuilder2 *This, IGraphBuilder *pfg);HRESULT ( *GetFiltergraph)(ICaptureGraphBuilder2 *This, IGraphBuilder **ppfg);HRESULT ( *SetOutputFileName)(ICaptureGraphBuilder2 *This,  GUID *pType, LPCOLESTR lpstrFile, IBaseFilter **ppf, IFileSinkFilter **ppSink);HRESULT ( *FindInterface)(ICaptureGraphBuilder2 *This,  GUID *pCategory,  GUID *pType, IBaseFilter *pf,  IID * riid, void **ppint);HRESULT ( *RenderStream)(ICaptureGraphBuilder2 *This,  GUID *pCategory,  GUID *pType, IUnknown *pSource, IBaseFilter *pfCompressor, IBaseFilter *pfRenderer);HRESULT ( *ControlStream)(ICaptureGraphBuilder2 *This,  GUID *pCategory,  GUID *pType, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie);HRESULT ( *AllocCapFile)(ICaptureGraphBuilder2 *This, LPCOLESTR lpstr, DWORDLONG dwlSize);HRESULT ( *CopyCaptureFile)(ICaptureGraphBuilder2 *This, LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *pCallback);HRESULT ( *FindPin)(ICaptureGraphBuilder2 *This, IUnknown *pSource, PIN_DIRECTION pindir,  GUID *pCategory,  GUID *pType, BOOL fUnconnected, int num, IPin **ppPin);};
struct IHTMLAreasCollection2Vtbl {HRESULT ( *QueryInterface)(IHTMLAreasCollection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreasCollection2 *This);ULONG ( *Release)(IHTMLAreasCollection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreasCollection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreasCollection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreasCollection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreasCollection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *urns)(IHTMLAreasCollection2 *This, VARIANT urn, IDispatch **pdisp);};
struct IHTMLFieldSetElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLFieldSetElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFieldSetElement2 *This);ULONG ( *Release)(IHTMLFieldSetElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFieldSetElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFieldSetElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFieldSetElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFieldSetElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_form)(IHTMLFieldSetElement2 *This, IHTMLFormElement **p);};
struct IHTMLFrameSetElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLFrameSetElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameSetElement2 *This);ULONG ( *Release)(IHTMLFrameSetElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameSetElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameSetElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameSetElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameSetElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_onbeforeprint)(IHTMLFrameSetElement2 *This, VARIANT v);HRESULT ( *get_onbeforeprint)(IHTMLFrameSetElement2 *This, VARIANT *p);HRESULT ( *put_onafterprint)(IHTMLFrameSetElement2 *This, VARIANT v);HRESULT ( *get_onafterprint)(IHTMLFrameSetElement2 *This, VARIANT *p);};
struct IHTMLIPrintCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLIPrintCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIPrintCollection *This);ULONG ( *Release)(IHTMLIPrintCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLIPrintCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIPrintCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIPrintCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIPrintCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLIPrintCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLIPrintCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLIPrintCollection *This, int index, IUnknown **ppIPrint);};
struct IHTMLTextRangeMetricsVtbl {HRESULT ( *QueryInterface)(IHTMLTextRangeMetrics *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextRangeMetrics *This);ULONG ( *Release)(IHTMLTextRangeMetrics *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextRangeMetrics *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextRangeMetrics *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextRangeMetrics *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextRangeMetrics *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_offsetTop)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_offsetLeft)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingTop)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingLeft)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingWidth)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingHeight)(IHTMLTextRangeMetrics *This, int *p);};
struct ISoapConnectorFactoryVtbl {HRESULT ( *QueryInterface)(ISoapConnectorFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapConnectorFactory *This);ULONG ( *Release)(ISoapConnectorFactory *This);HRESULT ( *GetTypeInfoCount)(ISoapConnectorFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapConnectorFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapConnectorFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapConnectorFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreatePortConnector)(ISoapConnectorFactory *This, IWSDLPort *pPort, ISoapConnector **ppConnector);};
struct IXMLElementCollectionVtbl {HRESULT ( *QueryInterface)(IXMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElementCollection *This);ULONG ( *Release)(IXMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(IXMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(IXMLElementCollection *This, int v);HRESULT ( *get_length)(IXMLElementCollection *This, int *p);HRESULT ( *get__newEnum)(IXMLElementCollection *This, IUnknown **ppUnk);HRESULT ( *item)(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);};
struct _IDirectControlEventsVtbl {HRESULT ( *QueryInterface)(_IDirectControlEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_IDirectControlEvents *This);ULONG ( *Release)(_IDirectControlEvents *This);HRESULT ( *GetTypeInfoCount)(_IDirectControlEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_IDirectControlEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_IDirectControlEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_IDirectControlEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DSearchCommandEventsVtbl {HRESULT ( *QueryInterface)(DSearchCommandEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DSearchCommandEvents *This);ULONG ( *Release)(DSearchCommandEvents *This);HRESULT ( *GetTypeInfoCount)(DSearchCommandEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DSearchCommandEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DSearchCommandEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DSearchCommandEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTCEventBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTCEventBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCEventBehavior *This);ULONG ( *Release)(DispHTCEventBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTCEventBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCEventBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCEventBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCEventBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLBlockElementVtbl {HRESULT ( *QueryInterface)(DispHTMLBlockElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBlockElement *This);ULONG ( *Release)(DispHTMLBlockElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBlockElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBlockElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBlockElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBlockElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLCurrentStyleVtbl {HRESULT ( *QueryInterface)(DispHTMLCurrentStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLCurrentStyle *This);ULONG ( *Release)(DispHTMLCurrentStyle *This);HRESULT ( *GetTypeInfoCount)(DispHTMLCurrentStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLCurrentStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLCurrentStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLCurrentStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDListElementVtbl {HRESULT ( *QueryInterface)(DispHTMLDListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDListElement *This);ULONG ( *Release)(DispHTMLDListElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDOMAttributeVtbl {HRESULT ( *QueryInterface)(DispHTMLDOMAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDOMAttribute *This);ULONG ( *Release)(DispHTMLDOMAttribute *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDOMAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDOMAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDOMAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFrameElementVtbl {HRESULT ( *QueryInterface)(DispHTMLFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFrameElement *This);ULONG ( *Release)(DispHTMLFrameElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFrameSetSiteVtbl {HRESULT ( *QueryInterface)(DispHTMLFrameSetSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFrameSetSite *This);ULONG ( *Release)(DispHTMLFrameSetSite *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFrameSetSite *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFrameSetSite *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFrameSetSite *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFrameSetSite *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLInputElementVtbl {HRESULT ( *QueryInterface)(DispHTMLInputElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLInputElement *This);ULONG ( *Release)(DispHTMLInputElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLInputElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLInputElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLInputElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLInputElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLLabelElementVtbl {HRESULT ( *QueryInterface)(DispHTMLLabelElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLLabelElement *This);ULONG ( *Release)(DispHTMLLabelElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLLabelElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLLabelElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLLabelElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLLabelElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLOListElementVtbl {HRESULT ( *QueryInterface)(DispHTMLOListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLOListElement *This);ULONG ( *Release)(DispHTMLOListElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLOListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLOListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLOListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLOListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLParamElementVtbl {HRESULT ( *QueryInterface)(DispHTMLParamElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLParamElement *This);ULONG ( *Release)(DispHTMLParamElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLParamElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLParamElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLParamElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLParamElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLStyleElementVtbl {HRESULT ( *QueryInterface)(DispHTMLStyleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLStyleElement *This);ULONG ( *Release)(DispHTMLStyleElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLStyleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLStyleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLStyleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLStyleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableCaptionVtbl {HRESULT ( *QueryInterface)(DispHTMLTableCaption *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTableCaption *This);ULONG ( *Release)(DispHTMLTableCaption *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTableCaption *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTableCaption *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTableCaption *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTableCaption *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableSectionVtbl {HRESULT ( *QueryInterface)(DispHTMLTableSection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTableSection *This);ULONG ( *Release)(DispHTMLTableSection *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTableSection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTableSection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTableSection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTableSection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTitleElementVtbl {HRESULT ( *QueryInterface)(DispHTMLTitleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTitleElement *This);ULONG ( *Release)(DispHTMLTitleElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTitleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTitleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTitleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTitleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLUListElementVtbl {HRESULT ( *QueryInterface)(DispHTMLUListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLUListElement *This);ULONG ( *Release)(DispHTMLUListElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLUListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLUListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLUListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLUListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLFrameSiteEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLFrameSiteEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLFrameSiteEvents2 *This);ULONG ( *Release)(HTMLFrameSiteEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLFrameSiteEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLFrameSiteEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLFrameSiteEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLFrameSiteEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputImageEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputImageEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputImageEvents *This);ULONG ( *Release)(HTMLInputImageEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputImageEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputImageEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputImageEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputImageEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTCPropertyBehaviorVtbl {HRESULT ( *QueryInterface)(IHTCPropertyBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCPropertyBehavior *This);ULONG ( *Release)(IHTCPropertyBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTCPropertyBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCPropertyBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCPropertyBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCPropertyBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *fireChange)(IHTCPropertyBehavior *This);HRESULT ( *put_value)(IHTCPropertyBehavior *This, VARIANT v);HRESULT ( *get_value)(IHTCPropertyBehavior *This, VARIANT *p);};
struct IHTMLAreasCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLAreasCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreasCollection *This);ULONG ( *Release)(IHTMLAreasCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreasCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreasCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreasCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreasCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(IHTMLAreasCollection *This, int v);HRESULT ( *get_length)(IHTMLAreasCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLAreasCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLAreasCollection *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLAreasCollection *This, VARIANT tagName, IDispatch **pdisp);HRESULT ( *add)(IHTMLAreasCollection *This, IHTMLElement *element, VARIANT before);HRESULT ( *remove)(IHTMLAreasCollection *This, int index);};
struct IHTMLIsIndexElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLIsIndexElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIsIndexElement2 *This);ULONG ( *Release)(IHTMLIsIndexElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLIsIndexElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIsIndexElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIsIndexElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIsIndexElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_form)(IHTMLIsIndexElement2 *This, IHTMLFormElement **p);};
struct IHTMLTableRowMetricsVtbl {HRESULT ( *QueryInterface)(IHTMLTableRowMetrics *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRowMetrics *This);ULONG ( *Release)(IHTMLTableRowMetrics *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRowMetrics *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRowMetrics *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRowMetrics *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRowMetrics *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_clientHeight)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientWidth)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientTop)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientLeft)(IHTMLTableRowMetrics *This, int *p);};
struct ITIMEDVDPlayerObjectVtbl {HRESULT ( *QueryInterface)(ITIMEDVDPlayerObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEDVDPlayerObject *This);ULONG ( *Release)(ITIMEDVDPlayerObject *This);HRESULT ( *GetTypeInfoCount)(ITIMEDVDPlayerObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEDVDPlayerObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEDVDPlayerObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEDVDPlayerObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *upperButtonSelect)(ITIMEDVDPlayerObject *This);HRESULT ( *lowerButtonSelect)(ITIMEDVDPlayerObject *This);HRESULT ( *leftButtonSelect)(ITIMEDVDPlayerObject *This);HRESULT ( *rightButtonSelect)(ITIMEDVDPlayerObject *This);HRESULT ( *buttonActivate)(ITIMEDVDPlayerObject *This);HRESULT ( *gotoMenu)(ITIMEDVDPlayerObject *This);};
struct XMLDOMDocumentEventsVtbl {HRESULT ( *QueryInterface)(XMLDOMDocumentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(XMLDOMDocumentEvents *This);ULONG ( *Release)(XMLDOMDocumentEvents *This);HRESULT ( *GetTypeInfoCount)(XMLDOMDocumentEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(XMLDOMDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(XMLDOMDocumentEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(XMLDOMDocumentEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DShellWindowsEventsVtbl {HRESULT ( *QueryInterface)(DShellWindowsEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellWindowsEvents *This);ULONG ( *Release)(DShellWindowsEvents *This);HRESULT ( *GetTypeInfoCount)(DShellWindowsEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellWindowsEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellWindowsEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellWindowsEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTCDescBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTCDescBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTCDescBehavior *This);ULONG ( *Release)(DispHTCDescBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTCDescBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTCDescBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTCDescBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTCDescBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLAppBehaviorVtbl {HRESULT ( *QueryInterface)(DispHTMLAppBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLAppBehavior *This);ULONG ( *Release)(DispHTMLAppBehavior *This);HRESULT ( *GetTypeInfoCount)(DispHTMLAppBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLAppBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLAppBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLAppBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLAreaElementVtbl {HRESULT ( *QueryInterface)(DispHTMLAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLAreaElement *This);ULONG ( *Release)(DispHTMLAreaElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLBaseElementVtbl {HRESULT ( *QueryInterface)(DispHTMLBaseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBaseElement *This);ULONG ( *Release)(DispHTMLBaseElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBaseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBaseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBaseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBaseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDOMTextNodeVtbl {HRESULT ( *QueryInterface)(DispHTMLDOMTextNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDOMTextNode *This);ULONG ( *Release)(DispHTMLDOMTextNode *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDOMTextNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDOMTextNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDOMTextNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDOMTextNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDivPositionVtbl {HRESULT ( *QueryInterface)(DispHTMLDivPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDivPosition *This);ULONG ( *Release)(DispHTMLDivPosition *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDivPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDivPosition *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDivPosition *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDivPosition *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFontElementVtbl {HRESULT ( *QueryInterface)(DispHTMLFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFontElement *This);ULONG ( *Release)(DispHTMLFontElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFormElementVtbl {HRESULT ( *QueryInterface)(DispHTMLFormElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFormElement *This);ULONG ( *Release)(DispHTMLFormElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFormElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFormElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFormElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFormElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLHeadElementVtbl {HRESULT ( *QueryInterface)(DispHTMLHeadElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLHeadElement *This);ULONG ( *Release)(DispHTMLHeadElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLHeadElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLHeadElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLHeadElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLHeadElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLHtmlElementVtbl {HRESULT ( *QueryInterface)(DispHTMLHtmlElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLHtmlElement *This);ULONG ( *Release)(DispHTMLHtmlElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLHtmlElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLHtmlElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLHtmlElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLHtmlElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLLinkElementVtbl {HRESULT ( *QueryInterface)(DispHTMLLinkElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLLinkElement *This);ULONG ( *Release)(DispHTMLLinkElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLLinkElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLLinkElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLLinkElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLLinkElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLListElementVtbl {HRESULT ( *QueryInterface)(DispHTMLListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLListElement *This);ULONG ( *Release)(DispHTMLListElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLMetaElementVtbl {HRESULT ( *QueryInterface)(DispHTMLMetaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLMetaElement *This);ULONG ( *Release)(DispHTMLMetaElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLMetaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLMetaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLMetaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLMetaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLParaElementVtbl {HRESULT ( *QueryInterface)(DispHTMLParaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLParaElement *This);ULONG ( *Release)(DispHTMLParaElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLParaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLParaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLParaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLParaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLRenderStyleVtbl {HRESULT ( *QueryInterface)(DispHTMLRenderStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLRenderStyle *This);ULONG ( *Release)(DispHTMLRenderStyle *This);HRESULT ( *GetTypeInfoCount)(DispHTMLRenderStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLRenderStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLRenderStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLRenderStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLSpanElementVtbl {HRESULT ( *QueryInterface)(DispHTMLSpanElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLSpanElement *This);ULONG ( *Release)(DispHTMLSpanElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLSpanElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLSpanElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLSpanElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLSpanElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTextElementVtbl {HRESULT ( *QueryInterface)(DispHTMLTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTextElement *This);ULONG ( *Release)(DispHTMLTextElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLWindowProxyVtbl {HRESULT ( *QueryInterface)(DispHTMLWindowProxy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLWindowProxy *This);ULONG ( *Release)(DispHTMLWindowProxy *This);HRESULT ( *GetTypeInfoCount)(DispHTMLWindowProxy *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLWindowProxy *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLWindowProxy *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLWindowProxy *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputImageVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputImage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputImage *This);ULONG ( *Release)(DispIHTMLInputImage *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputImage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputImage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputImage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputImage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLDocumentEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLDocumentEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLDocumentEvents2 *This);ULONG ( *Release)(HTMLDocumentEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLDocumentEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLDocumentEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLDocumentEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLDocumentEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLFrameSiteEventsVtbl {HRESULT ( *QueryInterface)(HTMLFrameSiteEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLFrameSiteEvents *This);ULONG ( *Release)(HTMLFrameSiteEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLFrameSiteEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLFrameSiteEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLFrameSiteEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLFrameSiteEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLNamespaceEventsVtbl {HRESULT ( *QueryInterface)(HTMLNamespaceEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLNamespaceEvents *This);ULONG ( *Release)(HTMLNamespaceEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLNamespaceEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLNamespaceEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLNamespaceEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLNamespaceEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTCAttachBehavior2Vtbl {HRESULT ( *QueryInterface)(IHTCAttachBehavior2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCAttachBehavior2 *This);ULONG ( *Release)(IHTCAttachBehavior2 *This);HRESULT ( *GetTypeInfoCount)(IHTCAttachBehavior2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCAttachBehavior2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCAttachBehavior2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCAttachBehavior2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *fireEvent)(IHTCAttachBehavior2 *This, VARIANT evt);};
struct IHTCDefaultDispatchVtbl {HRESULT ( *QueryInterface)(IHTCDefaultDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCDefaultDispatch *This);ULONG ( *Release)(IHTCDefaultDispatch *This);HRESULT ( *GetTypeInfoCount)(IHTCDefaultDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCDefaultDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCDefaultDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCDefaultDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_element)(IHTCDefaultDispatch *This, IHTMLElement **p);HRESULT ( *createEventObject)(IHTCDefaultDispatch *This, IHTMLEventObj **eventObj);HRESULT ( *get_defaults)(IHTCDefaultDispatch *This, IDispatch **p);HRESULT ( *get_document)(IHTCDefaultDispatch *This, IDispatch **p);};
struct IHTMLIFrameElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLIFrameElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIFrameElement2 *This);ULONG ( *Release)(IHTMLIFrameElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLIFrameElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIFrameElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIFrameElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIFrameElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_height)(IHTMLIFrameElement2 *This, VARIANT v);HRESULT ( *get_height)(IHTMLIFrameElement2 *This, VARIANT *p);HRESULT ( *put_width)(IHTMLIFrameElement2 *This, VARIANT v);HRESULT ( *get_width)(IHTMLIFrameElement2 *This, VARIANT *p);};
struct IHTMLLegendElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLLegendElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLegendElement2 *This);ULONG ( *Release)(IHTMLLegendElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLLegendElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLegendElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLegendElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLegendElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_form)(IHTMLLegendElement2 *This, IHTMLFormElement **p);};
struct IHTMLRectCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLRectCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRectCollection *This);ULONG ( *Release)(IHTMLRectCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLRectCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRectCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRectCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRectCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLRectCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLRectCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLRectCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct IHTMLSelectElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLSelectElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectElement2 *This);ULONG ( *Release)(IHTMLSelectElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *urns)(IHTMLSelectElement2 *This, VARIANT urn, IDispatch **pdisp);};
struct IHTMLUnknownElementVtbl {HRESULT ( *QueryInterface)(IHTMLUnknownElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUnknownElement *This);ULONG ( *Release)(IHTMLUnknownElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLUnknownElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUnknownElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUnknownElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUnknownElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IInternetBindClientVtbl {HRESULT ( *QueryInterface)(IInternetBindClient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetBindClient *This);ULONG ( *Release)(IInternetBindClient *This);HRESULT ( *GetBindInfo)(IInternetBindClient *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *GetBindString)(IInternetBindClient *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);HRESULT ( *GetClassFileOrMime)(IInternetBindClient *This, LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, LPCLSID pclsid);HRESULT ( *FindMimeFromData)(IInternetBindClient *This, LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);};
struct IMessengerIMWindowsVtbl {HRESULT ( *QueryInterface)(IMessengerIMWindows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessengerIMWindows *This);ULONG ( *Release)(IMessengerIMWindows *This);HRESULT ( *GetTypeInfoCount)(IMessengerIMWindows *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMessengerIMWindows *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMessengerIMWindows *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMessengerIMWindows *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IMessengerIMWindows *This, int *pcWindows);HRESULT ( *Item)(IMessengerIMWindows *This, int Index, IMessengerIMWindow **ppIMWindow);HRESULT ( *get__NewEnum)(IMessengerIMWindows *This, IUnknown **ppUnknown);};
struct IRadioServerControlVtbl {HRESULT ( *QueryInterface)(IRadioServerControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioServerControl *This);ULONG ( *Release)(IRadioServerControl *This);HRESULT ( *GetTypeInfoCount)(IRadioServerControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioServerControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioServerControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioServerControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DWebBrowserEvents2Vtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents2 *This);ULONG ( *Release)(DWebBrowserEvents2 *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDivElementVtbl {HRESULT ( *QueryInterface)(DispHTMLDivElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDivElement *This);ULONG ( *Release)(DispHTMLDivElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDivElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDivElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDivElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDivElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLMapElementVtbl {HRESULT ( *QueryInterface)(DispHTMLMapElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLMapElement *This);ULONG ( *Release)(DispHTMLMapElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLMapElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLMapElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLMapElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLMapElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLStyleSheetVtbl {HRESULT ( *QueryInterface)(DispHTMLStyleSheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLStyleSheet *This);ULONG ( *Release)(DispHTMLStyleSheet *This);HRESULT ( *GetTypeInfoCount)(DispHTMLStyleSheet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLStyleSheet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLStyleSheet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLStyleSheet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLDocumentEventsVtbl {HRESULT ( *QueryInterface)(HTMLDocumentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLDocumentEvents *This);ULONG ( *Release)(HTMLDocumentEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLDocumentEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLDocumentEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLDocumentEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLElementEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLElementEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLElementEvents2 *This);ULONG ( *Release)(HTMLElementEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLElementEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLElementEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLElementEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLElementEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTCAttachBehaviorVtbl {HRESULT ( *QueryInterface)(IHTCAttachBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCAttachBehavior *This);ULONG ( *Release)(IHTCAttachBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTCAttachBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCAttachBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCAttachBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCAttachBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *fireEvent)(IHTCAttachBehavior *This, IDispatch *evt);HRESULT ( *detachEvent)(IHTCAttachBehavior *This);};
struct IHTCMethodBehaviorVtbl {HRESULT ( *QueryInterface)(IHTCMethodBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCMethodBehavior *This);ULONG ( *Release)(IHTCMethodBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTCMethodBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCMethodBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCMethodBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCMethodBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLControlRange2Vtbl {HRESULT ( *QueryInterface)(IHTMLControlRange2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLControlRange2 *This);ULONG ( *Release)(IHTMLControlRange2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLControlRange2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLControlRange2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLControlRange2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLControlRange2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *addElement)(IHTMLControlRange2 *This, IHTMLElement *item);};
struct IHTMLFrameElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLFrameElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameElement2 *This);ULONG ( *Release)(IHTMLFrameElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_height)(IHTMLFrameElement2 *This, VARIANT v);HRESULT ( *get_height)(IHTMLFrameElement2 *This, VARIANT *p);HRESULT ( *put_width)(IHTMLFrameElement2 *This, VARIANT v);HRESULT ( *get_width)(IHTMLFrameElement2 *This, VARIANT *p);};
struct IHTMLLabelElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLLabelElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLabelElement2 *This);ULONG ( *Release)(IHTMLLabelElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLLabelElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLabelElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLabelElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLabelElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_form)(IHTMLLabelElement2 *This, IHTMLFormElement **p);};
struct IHTMLNoShowElementVtbl {HRESULT ( *QueryInterface)(IHTMLNoShowElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNoShowElement *This);ULONG ( *Release)(IHTMLNoShowElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLNoShowElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNoShowElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNoShowElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNoShowElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLPhraseElementVtbl {HRESULT ( *QueryInterface)(IHTMLPhraseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPhraseElement *This);ULONG ( *Release)(IHTMLPhraseElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLPhraseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPhraseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPhraseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPhraseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLTableSection2Vtbl {HRESULT ( *QueryInterface)(IHTMLTableSection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableSection2 *This);ULONG ( *Release)(IHTMLTableSection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableSection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableSection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableSection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableSection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *moveRow)(IHTMLTableSection2 *This, int indexFrom, int indexTo, IDispatch **row);};
struct IHTMLTextContainerVtbl {HRESULT ( *QueryInterface)(IHTMLTextContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextContainer *This);ULONG ( *Release)(IHTMLTextContainer *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextContainer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextContainer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextContainer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextContainer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createControlRange)(IHTMLTextContainer *This, IDispatch **range);HRESULT ( *get_scrollHeight)(IHTMLTextContainer *This, int *p);HRESULT ( *get_scrollWidth)(IHTMLTextContainer *This, int *p);HRESULT ( *put_scrollTop)(IHTMLTextContainer *This, int v);HRESULT ( *get_scrollTop)(IHTMLTextContainer *This, int *p);HRESULT ( *put_scrollLeft)(IHTMLTextContainer *This, int v);HRESULT ( *get_scrollLeft)(IHTMLTextContainer *This, int *p);HRESULT ( *put_onscroll)(IHTMLTextContainer *This, VARIANT v);HRESULT ( *get_onscroll)(IHTMLTextContainer *This, VARIANT *p);};
struct _MediaPlayerEventsVtbl {HRESULT ( *QueryInterface)(_MediaPlayerEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_MediaPlayerEvents *This);ULONG ( *Release)(_MediaPlayerEvents *This);HRESULT ( *GetTypeInfoCount)(_MediaPlayerEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_MediaPlayerEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_MediaPlayerEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_MediaPlayerEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DMsgrObjectEventsVtbl {HRESULT ( *QueryInterface)(DMsgrObjectEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DMsgrObjectEvents *This);ULONG ( *Release)(DMsgrObjectEvents *This);HRESULT ( *GetTypeInfoCount)(DMsgrObjectEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DMsgrObjectEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DMsgrObjectEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DMsgrObjectEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DWebBrowserEventsVtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents *This);ULONG ( *Release)(DWebBrowserEvents *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLBRElementVtbl {HRESULT ( *QueryInterface)(DispHTMLBRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBRElement *This);ULONG ( *Release)(DispHTMLBRElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDDElementVtbl {HRESULT ( *QueryInterface)(DispHTMLDDElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDDElement *This);ULONG ( *Release)(DispHTMLDDElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDDElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDDElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDDElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDDElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDTElementVtbl {HRESULT ( *QueryInterface)(DispHTMLDTElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDTElement *This);ULONG ( *Release)(DispHTMLDTElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDTElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDTElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDTElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDTElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLFrameBaseVtbl {HRESULT ( *QueryInterface)(DispHTMLFrameBase *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLFrameBase *This);ULONG ( *Release)(DispHTMLFrameBase *This);HRESULT ( *GetTypeInfoCount)(DispHTMLFrameBase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLFrameBase *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLFrameBase *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLFrameBase *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLHRElementVtbl {HRESULT ( *QueryInterface)(DispHTMLHRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLHRElement *This);ULONG ( *Release)(DispHTMLHRElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLHRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLHRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLHRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLHRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLLIElementVtbl {HRESULT ( *QueryInterface)(DispHTMLLIElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLLIElement *This);ULONG ( *Release)(DispHTMLLIElement *This);HRESULT ( *GetTypeInfoCount)(DispHTMLLIElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLLIElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLLIElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLLIElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLRuleStyleVtbl {HRESULT ( *QueryInterface)(DispHTMLRuleStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLRuleStyle *This);ULONG ( *Release)(DispHTMLRuleStyle *This);HRESULT ( *GetTypeInfoCount)(DispHTMLRuleStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLRuleStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLRuleStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLRuleStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableCellVtbl {HRESULT ( *QueryInterface)(DispHTMLTableCell *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTableCell *This);ULONG ( *Release)(DispHTMLTableCell *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTableCell *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTableCell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTableCell *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTableCell *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLAnchorEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLAnchorEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAnchorEvents2 *This);ULONG ( *Release)(HTMLAnchorEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLAnchorEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAnchorEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAnchorEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAnchorEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLElementEvents *This);ULONG ( *Release)(HTMLElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLScriptEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLScriptEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLScriptEvents2 *This);ULONG ( *Release)(HTMLScriptEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLScriptEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLScriptEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLScriptEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLScriptEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLWindowEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLWindowEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLWindowEvents2 *This);ULONG ( *Release)(HTMLWindowEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLWindowEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLWindowEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLWindowEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLWindowEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTCEventBehaviorVtbl {HRESULT ( *QueryInterface)(IHTCEventBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCEventBehavior *This);ULONG ( *Release)(IHTCEventBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTCEventBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCEventBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCEventBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCEventBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *fire)(IHTCEventBehavior *This, IHTMLEventObj *pvar);};
struct IHTMLBodyElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLBodyElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBodyElement2 *This);ULONG ( *Release)(IHTMLBodyElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLBodyElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBodyElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBodyElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBodyElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_onbeforeprint)(IHTMLBodyElement2 *This, VARIANT v);HRESULT ( *get_onbeforeprint)(IHTMLBodyElement2 *This, VARIANT *p);HRESULT ( *put_onafterprint)(IHTMLBodyElement2 *This, VARIANT v);HRESULT ( *get_onafterprint)(IHTMLBodyElement2 *This, VARIANT *p);};
struct IHTMLFrameElementVtbl {HRESULT ( *QueryInterface)(IHTMLFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameElement *This);ULONG ( *Release)(IHTMLFrameElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_borderColor)(IHTMLFrameElement *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLFrameElement *This, VARIANT *p);};
struct IHTMLModelessInitVtbl {HRESULT ( *QueryInterface)(IHTMLModelessInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLModelessInit *This);ULONG ( *Release)(IHTMLModelessInit *This);HRESULT ( *GetTypeInfoCount)(IHTMLModelessInit *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLModelessInit *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLModelessInit *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLModelessInit *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_parameters)(IHTMLModelessInit *This, VARIANT *p);HRESULT ( *get_optionString)(IHTMLModelessInit *This, VARIANT *p);HRESULT ( *get_moniker)(IHTMLModelessInit *This, IUnknown **p);HRESULT ( *get_document)(IHTMLModelessInit *This, IUnknown **p);};
struct DWebBridgeEventsVtbl {HRESULT ( *QueryInterface)(DWebBridgeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBridgeEvents *This);ULONG ( *Release)(DWebBridgeEvents *This);HRESULT ( *GetTypeInfoCount)(DWebBridgeEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBridgeEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBridgeEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBridgeEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDefaultsVtbl {HRESULT ( *QueryInterface)(DispHTMLDefaults *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDefaults *This);ULONG ( *Release)(DispHTMLDefaults *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDefaults *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDefaults *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDefaults *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDefaults *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLDocumentVtbl {HRESULT ( *QueryInterface)(DispHTMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLDocument *This);ULONG ( *Release)(DispHTMLDocument *This);HRESULT ( *GetTypeInfoCount)(DispHTMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLSpanFlowVtbl {HRESULT ( *QueryInterface)(DispHTMLSpanFlow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLSpanFlow *This);ULONG ( *Release)(DispHTMLSpanFlow *This);HRESULT ( *GetTypeInfoCount)(DispHTMLSpanFlow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLSpanFlow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLSpanFlow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLSpanFlow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableColVtbl {HRESULT ( *QueryInterface)(DispHTMLTableCol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTableCol *This);ULONG ( *Release)(DispHTMLTableCol *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTableCol *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTableCol *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTableCol *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTableCol *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableRowVtbl {HRESULT ( *QueryInterface)(DispHTMLTableRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTableRow *This);ULONG ( *Release)(DispHTMLTableRow *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTableRow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTableRow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTableRow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTableRow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLAnchorEventsVtbl {HRESULT ( *QueryInterface)(HTMLAnchorEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAnchorEvents *This);ULONG ( *Release)(HTMLAnchorEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLAnchorEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAnchorEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAnchorEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAnchorEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLLabelEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLLabelEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLabelEvents2 *This);ULONG ( *Release)(HTMLLabelEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLLabelEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLabelEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLabelEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLabelEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLScriptEventsVtbl {HRESULT ( *QueryInterface)(HTMLScriptEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLScriptEvents *This);ULONG ( *Release)(HTMLScriptEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLScriptEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLScriptEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLScriptEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLScriptEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTableEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLTableEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTableEvents2 *This);ULONG ( *Release)(HTMLTableEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLTableEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTableEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTableEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTableEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLWindowEventsVtbl {HRESULT ( *QueryInterface)(HTMLWindowEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLWindowEvents *This);ULONG ( *Release)(HTMLWindowEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLWindowEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLWindowEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLWindowEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLWindowEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLListElementVtbl {HRESULT ( *QueryInterface)(IHTMLListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLListElement *This);ULONG ( *Release)(IHTMLListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLSpanElementVtbl {HRESULT ( *QueryInterface)(IHTMLSpanElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSpanElement *This);ULONG ( *Release)(IHTMLSpanElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLSpanElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSpanElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSpanElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSpanElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLTextElementVtbl {HRESULT ( *QueryInterface)(IHTMLTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextElement *This);ULONG ( *Release)(IHTMLTextElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IMXReaderControlVtbl {HRESULT ( *QueryInterface)(IMXReaderControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMXReaderControl *This);ULONG ( *Release)(IMXReaderControl *This);HRESULT ( *GetTypeInfoCount)(IMXReaderControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMXReaderControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMXReaderControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMXReaderControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *abort)(IMXReaderControl *This);HRESULT ( *resume)(IMXReaderControl *This);HRESULT ( *suspend)(IMXReaderControl *This);};
struct IPropertyStorageVtbl {HRESULT ( *QueryInterface)(IPropertyStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyStorage *This);ULONG ( *Release)(IPropertyStorage *This);HRESULT ( *ReadMultiple)(IPropertyStorage *This, ULONG cpspec, PROPSPEC  *    rgpspec, PROPVARIANT rgpropvar[]);HRESULT ( *WriteMultiple)(IPropertyStorage *This, ULONG cpspec, PROPSPEC  *    rgpspec,  PROPVARIANT rgpropvar[], PROPID propidNameFirst);HRESULT ( *DeleteMultiple)(IPropertyStorage *This, ULONG cpspec, PROPSPEC  *    rgpspec);HRESULT ( *ReadPropertyNames)(IPropertyStorage *This, ULONG cpropid, PROPID  *    rgpropid, LPOLESTR rglpwstrName[]);HRESULT ( *WritePropertyNames)(IPropertyStorage *This, ULONG cpropid, PROPID  *    rgpropid,  LPOLESTR rglpwstrName[]);HRESULT ( *DeletePropertyNames)(IPropertyStorage *This, ULONG cpropid, PROPID  *    rgpropid);HRESULT ( *Commit)(IPropertyStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IPropertyStorage *This);HRESULT ( *Enum)(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum);HRESULT ( *SetTimes)(IPropertyStorage *This,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IPropertyStorage *This,  CLSID * clsid);HRESULT ( *Stat)(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg);};
struct IRTCWatcherEventVtbl {HRESULT ( *QueryInterface)(IRTCWatcherEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCWatcherEvent *This);ULONG ( *Release)(IRTCWatcherEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCWatcherEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCWatcherEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCWatcherEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCWatcherEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Watcher)(IRTCWatcherEvent *This, IRTCWatcher **ppWatcher);};
struct DThumbCtlEventsVtbl {HRESULT ( *QueryInterface)(DThumbCtlEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DThumbCtlEvents *This);ULONG ( *Release)(DThumbCtlEvents *This);HRESULT ( *GetTypeInfoCount)(DThumbCtlEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DThumbCtlEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DThumbCtlEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DThumbCtlEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLBGsoundVtbl {HRESULT ( *QueryInterface)(DispHTMLBGsound *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBGsound *This);ULONG ( *Release)(DispHTMLBGsound *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBGsound *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBGsound *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBGsound *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBGsound *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLWindow2Vtbl {HRESULT ( *QueryInterface)(DispHTMLWindow2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLWindow2 *This);ULONG ( *Release)(DispHTMLWindow2 *This);HRESULT ( *GetTypeInfoCount)(DispHTMLWindow2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLWindow2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLWindow2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLWindow2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItemVerbsVtbl {HRESULT ( *QueryInterface)(FolderItemVerbs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerbs *This);ULONG ( *Release)(FolderItemVerbs *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerbs *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerbs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerbs *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerbs *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItemVerbs *This, int *plCount);HRESULT ( *get_Application)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *Item)(FolderItemVerbs *This, VARIANT index, FolderItemVerb **ppid);HRESULT ( *_NewEnum)(FolderItemVerbs *This, IUnknown **ppunk);};
struct HTMLAreaEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLAreaEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAreaEvents2 *This);ULONG ( *Release)(HTMLAreaEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLAreaEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAreaEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAreaEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAreaEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLLabelEventsVtbl {HRESULT ( *QueryInterface)(HTMLLabelEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLabelEvents *This);ULONG ( *Release)(HTMLLabelEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLLabelEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLabelEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLabelEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLabelEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTableEventsVtbl {HRESULT ( *QueryInterface)(HTMLTableEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTableEvents *This);ULONG ( *Release)(HTMLTableEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLTableEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTableEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTableEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTableEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ICreateTypeLib2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib2 *This);ULONG ( *Release)(ICreateTypeLib2 *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib2 *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib2 *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib2 *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib2 *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib2 *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib2 *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib2 *This);HRESULT ( *DeleteTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetCustData)(ICreateTypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeLib2 *This, ULONG dwHelpStringContext);HRESULT ( *SetHelpStringDll)(ICreateTypeLib2 *This, LPOLESTR szFileName);};
struct IMsgrIMSessionsVtbl {HRESULT ( *QueryInterface)(IMsgrIMSessions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrIMSessions *This);ULONG ( *Release)(IMsgrIMSessions *This);HRESULT ( *GetTypeInfoCount)(IMsgrIMSessions *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrIMSessions *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrIMSessions *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrIMSessions *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IMsgrIMSessions *This, int *pcSessions);HRESULT ( *Item)(IMsgrIMSessions *This, int Index, IMsgrIMSession **ppIMSession);HRESULT ( *get__NewEnum)(IMsgrIMSessions *This, IUnknown **ppUnknown);};
struct IVBSAXXMLFilterVtbl {HRESULT ( *QueryInterface)(IVBSAXXMLFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXXMLFilter *This);ULONG ( *Release)(IVBSAXXMLFilter *This);HRESULT ( *GetTypeInfoCount)(IVBSAXXMLFilter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXXMLFilter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXXMLFilter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXXMLFilter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_parent)(IVBSAXXMLFilter *This, IVBSAXXMLReader **oReader);HRESULT ( *putref_parent)(IVBSAXXMLFilter *This, IVBSAXXMLReader *oReader);};
struct IXMLDOMNodeListVtbl {HRESULT ( *QueryInterface)(IXMLDOMNodeList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNodeList *This);ULONG ( *Release)(IXMLDOMNodeList *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNodeList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNodeList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNodeList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNodeList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_item)(IXMLDOMNodeList *This, int index, IXMLDOMNode **listItem);HRESULT ( *get_length)(IXMLDOMNodeList *This, int *listLength);HRESULT ( *nextNode)(IXMLDOMNodeList *This, IXMLDOMNode **nextItem);HRESULT ( *reset)(IXMLDOMNodeList *This);HRESULT ( *get__newEnum)(IXMLDOMNodeList *This, IUnknown **ppUnk);};
struct DispHTMLIFrameVtbl {HRESULT ( *QueryInterface)(DispHTMLIFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLIFrame *This);ULONG ( *Release)(DispHTMLIFrame *This);HRESULT ( *GetTypeInfoCount)(DispHTMLIFrame *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLIFrame *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLIFrame *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLIFrame *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLScreenVtbl {HRESULT ( *QueryInterface)(DispHTMLScreen *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLScreen *This);ULONG ( *Release)(DispHTMLScreen *This);HRESULT ( *GetTypeInfoCount)(DispHTMLScreen *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLScreen *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLScreen *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLScreen *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLAreaEventsVtbl {HRESULT ( *QueryInterface)(HTMLAreaEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAreaEvents *This);ULONG ( *Release)(HTMLAreaEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLAreaEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAreaEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAreaEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAreaEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLImgEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLImgEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLImgEvents2 *This);ULONG ( *Release)(HTMLImgEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLImgEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLImgEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLImgEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLImgEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMapEvents2Vtbl {HRESULT ( *QueryInterface)(HTMLMapEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMapEvents2 *This);ULONG ( *Release)(HTMLMapEvents2 *This);HRESULT ( *GetTypeInfoCount)(HTMLMapEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMapEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMapEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMapEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IAsyncMHandlerVtbl {HRESULT ( *QueryInterface)(IAsyncMHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncMHandler *This);ULONG ( *Release)(IAsyncMHandler *This);HRESULT ( *GetTypeInfoCount)(IAsyncMHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAsyncMHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAsyncMHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAsyncMHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLEventObj4Vtbl {HRESULT ( *QueryInterface)(IHTMLEventObj4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEventObj4 *This);ULONG ( *Release)(IHTMLEventObj4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLEventObj4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEventObj4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEventObj4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEventObj4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_wheelDelta)(IHTMLEventObj4 *This, int *p);};
struct IHTMLTableRow2Vtbl {HRESULT ( *QueryInterface)(IHTMLTableRow2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRow2 *This);ULONG ( *Release)(IHTMLTableRow2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRow2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRow2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRow2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRow2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_height)(IHTMLTableRow2 *This, VARIANT v);HRESULT ( *get_height)(IHTMLTableRow2 *This, VARIANT *p);};
struct IPropertyPage2Vtbl {HRESULT ( *QueryInterface)(IPropertyPage2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage2 *This);ULONG ( *Release)(IPropertyPage2 *This);HRESULT ( *SetPageSite)(IPropertyPage2 *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage2 *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage2 *This);HRESULT ( *GetPageInfo)(IPropertyPage2 *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage2 *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage2 *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage2 *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage2 *This);HRESULT ( *Apply)(IPropertyPage2 *This);HRESULT ( *Help)(IPropertyPage2 *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage2 *This, MSG *pMsg);HRESULT ( *EditProperty)(IPropertyPage2 *This, DISPID dispID);};
struct IRTCBuddyEventVtbl {HRESULT ( *QueryInterface)(IRTCBuddyEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddyEvent *This);ULONG ( *Release)(IRTCBuddyEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCBuddyEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCBuddyEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCBuddyEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCBuddyEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Buddy)(IRTCBuddyEvent *This, IRTCBuddy **ppBuddy);};
struct IRTCCollectionVtbl {HRESULT ( *QueryInterface)(IRTCCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCCollection *This);ULONG ( *Release)(IRTCCollection *This);HRESULT ( *GetTypeInfoCount)(IRTCCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IRTCCollection *This, int *lCount);HRESULT ( *get_Item)(IRTCCollection *This, int Index, VARIANT *pVariant);HRESULT ( *get__NewEnum)(IRTCCollection *This, IUnknown **ppNewEnum);};
struct IUtilityButtonVtbl {HRESULT ( *QueryInterface)(IUtilityButton *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUtilityButton *This);ULONG ( *Release)(IUtilityButton *This);HRESULT ( *GetTypeInfoCount)(IUtilityButton *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUtilityButton *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUtilityButton *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUtilityButton *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DMsgrOEEventsVtbl {HRESULT ( *QueryInterface)(DMsgrOEEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DMsgrOEEvents *This);ULONG ( *Release)(DMsgrOEEvents *This);HRESULT ( *GetTypeInfoCount)(DMsgrOEEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DMsgrOEEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DMsgrOEEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DMsgrOEEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispCEventObjVtbl {HRESULT ( *QueryInterface)(DispCEventObj *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispCEventObj *This);ULONG ( *Release)(DispCEventObj *This);HRESULT ( *GetTypeInfoCount)(DispCEventObj *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispCEventObj *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispCEventObj *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispCEventObj *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLEmbedVtbl {HRESULT ( *QueryInterface)(DispHTMLEmbed *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLEmbed *This);ULONG ( *Release)(DispHTMLEmbed *This);HRESULT ( *GetTypeInfoCount)(DispHTMLEmbed *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLEmbed *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLEmbed *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLEmbed *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLPopupVtbl {HRESULT ( *QueryInterface)(DispHTMLPopup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLPopup *This);ULONG ( *Release)(DispHTMLPopup *This);HRESULT ( *GetTypeInfoCount)(DispHTMLPopup *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLPopup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLPopup *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLPopup *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLStyleVtbl {HRESULT ( *QueryInterface)(DispHTMLStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLStyle *This);ULONG ( *Release)(DispHTMLStyle *This);HRESULT ( *GetTypeInfoCount)(DispHTMLStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispHTMLTableVtbl {HRESULT ( *QueryInterface)(DispHTMLTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLTable *This);ULONG ( *Release)(DispHTMLTable *This);HRESULT ( *GetTypeInfoCount)(DispHTMLTable *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLTable *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLTable *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLTable *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLImgEventsVtbl {HRESULT ( *QueryInterface)(HTMLImgEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLImgEvents *This);ULONG ( *Release)(HTMLImgEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLImgEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLImgEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLImgEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLImgEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMapEventsVtbl {HRESULT ( *QueryInterface)(HTMLMapEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMapEvents *This);ULONG ( *Release)(HTMLMapEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLMapEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMapEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMapEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMapEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IFolderViewOCVtbl {HRESULT ( *QueryInterface)(IFolderViewOC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderViewOC *This);ULONG ( *Release)(IFolderViewOC *This);HRESULT ( *GetTypeInfoCount)(IFolderViewOC *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFolderViewOC *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFolderViewOC *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFolderViewOC *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetFolderView)(IFolderViewOC *This, IDispatch *pdisp);};
struct IHTMLDOMNode2Vtbl {HRESULT ( *QueryInterface)(IHTMLDOMNode2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMNode2 *This);ULONG ( *Release)(IHTMLDOMNode2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMNode2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMNode2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMNode2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMNode2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ownerDocument)(IHTMLDOMNode2 *This, IDispatch **p);};
struct IHTMLDocumentVtbl {HRESULT ( *QueryInterface)(IHTMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument *This);ULONG ( *Release)(IHTMLDocument *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Script)(IHTMLDocument *This, IDispatch **p);};
struct IMsgrServicesVtbl {HRESULT ( *QueryInterface)(IMsgrServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrServices *This);ULONG ( *Release)(IMsgrServices *This);HRESULT ( *GetTypeInfoCount)(IMsgrServices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrServices *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrServices *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrServices *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_PrimaryService)(IMsgrServices *This, IMsgrService *pService);HRESULT ( *get_PrimaryService)(IMsgrServices *This, IMsgrService **ppService);HRESULT ( *get_Count)(IMsgrServices *This, int *pcServices);HRESULT ( *Item)(IMsgrServices *This, int Index, IMsgrService **ppService);HRESULT ( *get__NewEnum)(IMsgrServices *This, IUnknown **ppUnknown);};
struct ITIMEPlayListVtbl {HRESULT ( *QueryInterface)(ITIMEPlayList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEPlayList *This);ULONG ( *Release)(ITIMEPlayList *This);HRESULT ( *GetTypeInfoCount)(ITIMEPlayList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEPlayList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEPlayList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEPlayList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_activeTrack)(ITIMEPlayList *This, VARIANT vTrack);HRESULT ( *get_activeTrack)(ITIMEPlayList *This, ITIMEPlayItem **pPlayItem);HRESULT ( *get_dur)(ITIMEPlayList *This, double *dur);HRESULT ( *item)(ITIMEPlayList *This, VARIANT varIndex, ITIMEPlayItem **pPlayItem);HRESULT ( *get_length)(ITIMEPlayList *This, int *p);HRESULT ( *get__newEnum)(ITIMEPlayList *This, IUnknown **p);HRESULT ( *nextTrack)(ITIMEPlayList *This);HRESULT ( *prevTrack)(ITIMEPlayList *This);};
struct DispHTMLBodyVtbl {HRESULT ( *QueryInterface)(DispHTMLBody *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLBody *This);ULONG ( *Release)(DispHTMLBody *This);HRESULT ( *GetTypeInfoCount)(DispHTMLBody *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLBody *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLBody *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLBody *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItems2Vtbl {HRESULT ( *QueryInterface)(FolderItems2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems2 *This);ULONG ( *Release)(FolderItems2 *This);HRESULT ( *GetTypeInfoCount)(FolderItems2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems2 *This, int *plCount);HRESULT ( *get_Application)(FolderItems2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems2 *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems2 *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems2 *This, IUnknown **ppunk);HRESULT ( *InvokeVerbEx)(FolderItems2 *This, VARIANT vVerb, VARIANT vArgs);};
struct IAnchorClickVtbl {HRESULT ( *QueryInterface)(IAnchorClick *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnchorClick *This);ULONG ( *Release)(IAnchorClick *This);HRESULT ( *GetTypeInfoCount)(IAnchorClick *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAnchorClick *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAnchorClick *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAnchorClick *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ProcOnClick)(IAnchorClick *This);};
struct IHTMLScreen2Vtbl {HRESULT ( *QueryInterface)(IHTMLScreen2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScreen2 *This);ULONG ( *Release)(IHTMLScreen2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLScreen2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScreen2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScreen2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScreen2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_logicalXDPI)(IHTMLScreen2 *This, int *p);HRESULT ( *get_logicalYDPI)(IHTMLScreen2 *This, int *p);HRESULT ( *get_deviceXDPI)(IHTMLScreen2 *This, int *p);HRESULT ( *get_deviceYDPI)(IHTMLScreen2 *This, int *p);};
struct IHTMLWindow4Vtbl {HRESULT ( *QueryInterface)(IHTMLWindow4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLWindow4 *This);ULONG ( *Release)(IHTMLWindow4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLWindow4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLWindow4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLWindow4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLWindow4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createPopup)(IHTMLWindow4 *This, VARIANT *varArgIn, IDispatch **ppPopup);HRESULT ( *get_frameElement)(IHTMLWindow4 *This, IHTMLFrameBase **p);};
struct IPictureDispVtbl {HRESULT ( *QueryInterface)(IPictureDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPictureDisp *This);ULONG ( *Release)(IPictureDisp *This);HRESULT ( *GetTypeInfoCount)(IPictureDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPictureDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPictureDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPictureDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IXSLTemplateVtbl {HRESULT ( *QueryInterface)(IXSLTemplate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXSLTemplate *This);ULONG ( *Release)(IXSLTemplate *This);HRESULT ( *GetTypeInfoCount)(IXSLTemplate *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXSLTemplate *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXSLTemplate *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXSLTemplate *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *putref_stylesheet)(IXSLTemplate *This, IXMLDOMNode *stylesheet);HRESULT ( *get_stylesheet)(IXSLTemplate *This, IXMLDOMNode **stylesheet);HRESULT ( *createProcessor)(IXSLTemplate *This, IXSLProcessor **ppProcessor);};
struct DispHTMLImgVtbl {HRESULT ( *QueryInterface)(DispHTMLImg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispHTMLImg *This);ULONG ( *Release)(DispHTMLImg *This);HRESULT ( *GetTypeInfoCount)(DispHTMLImg *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispHTMLImg *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispHTMLImg *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispHTMLImg *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItemsVtbl {HRESULT ( *QueryInterface)(FolderItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems *This);ULONG ( *Release)(FolderItems *This);HRESULT ( *GetTypeInfoCount)(FolderItems *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems *This, int *plCount);HRESULT ( *get_Application)(FolderItems *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems *This, IUnknown **ppunk);};
struct IAsyncPProtVtbl {HRESULT ( *QueryInterface)(IAsyncPProt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncPProt *This);ULONG ( *Release)(IAsyncPProt *This);HRESULT ( *GetTypeInfoCount)(IAsyncPProt *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAsyncPProt *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAsyncPProt *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAsyncPProt *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IBasicAudioVtbl {HRESULT ( *QueryInterface)(IBasicAudio *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBasicAudio *This);ULONG ( *Release)(IBasicAudio *This);HRESULT ( *GetTypeInfoCount)(IBasicAudio *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBasicAudio *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IBasicAudio *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IBasicAudio *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Volume)(IBasicAudio *This, int lVolume);HRESULT ( *get_Volume)(IBasicAudio *This, int *plVolume);HRESULT ( *put_Balance)(IBasicAudio *This, int lBalance);HRESULT ( *get_Balance)(IBasicAudio *This, int *plBalance);};
struct IDeviceRectVtbl {HRESULT ( *QueryInterface)(IDeviceRect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDeviceRect *This);ULONG ( *Release)(IDeviceRect *This);HRESULT ( *GetTypeInfoCount)(IDeviceRect *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDeviceRect *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDeviceRect *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDeviceRect *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLTable2Vtbl {HRESULT ( *QueryInterface)(IHTMLTable2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTable2 *This);ULONG ( *Release)(IHTMLTable2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTable2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTable2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTable2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTable2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *firstPage)(IHTMLTable2 *This);HRESULT ( *lastPage)(IHTMLTable2 *This);HRESULT ( *get_cells)(IHTMLTable2 *This, IHTMLElementCollection **p);HRESULT ( *moveRow)(IHTMLTable2 *This, int indexFrom, int indexTo, IDispatch **row);};
struct IRecalcHostVtbl {HRESULT ( *QueryInterface)(IRecalcHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecalcHost *This);ULONG ( *Release)(IRecalcHost *This);HRESULT ( *CompileExpression)(IRecalcHost *This, IUnknown *pUnk, DISPID dispid, LPOLESTR strExpression, LPOLESTR strLanguage, IDispatch **ppExpressionObject, IDispatch **ppThis);HRESULT ( *EvalExpression)(IRecalcHost *This, IUnknown *pUnk, DISPID dispid, LPOLESTR strExpression, LPOLESTR strLanguage, VARIANT *pvResult);HRESULT ( *ResolveNames)(IRecalcHost *This, IUnknown *pUnk, DISPID dispid, unsigned int cNames, BSTR *pstrNames, IDispatch **ppObjects, DISPID *pDispids);HRESULT ( *RequestRecalc)(IRecalcHost *This);HRESULT ( *SetValue)(IRecalcHost *This, IUnknown *pUnk, DISPID dispid, VARIANT *pv, BOOL fStyle);HRESULT ( *RemoveValue)(IRecalcHost *This, IUnknown *pUnk, DISPID dispid);HRESULT ( *GetScriptTextAttributes)(IRecalcHost *This, LPCOLESTR szLanguage, LPCOLESTR pchCode, ULONG cchCode, LPCOLESTR szDelim, DWORD dwFlags, WORD *pwAttr);};
struct ISpinButtonVtbl {HRESULT ( *QueryInterface)(ISpinButton *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISpinButton *This);ULONG ( *Release)(ISpinButton *This);HRESULT ( *GetTypeInfoCount)(ISpinButton *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISpinButton *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISpinButton *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISpinButton *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IMsgrUsersVtbl {HRESULT ( *QueryInterface)(IMsgrUsers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrUsers *This);ULONG ( *Release)(IMsgrUsers *This);HRESULT ( *GetTypeInfoCount)(IMsgrUsers *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrUsers *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrUsers *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrUsers *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IMsgrUsers *This, int *pcUsers);HRESULT ( *Item)(IMsgrUsers *This, int Index, IMsgrUser **ppUser);HRESULT ( *Add)(IMsgrUsers *This, IMsgrUser *pUser);HRESULT ( *Remove)(IMsgrUsers *This, IMsgrUser *pUser);HRESULT ( *get__NewEnum)(IMsgrUsers *This, IUnknown **ppUnknown);};
struct IOmHistoryVtbl {HRESULT ( *QueryInterface)(IOmHistory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOmHistory *This);ULONG ( *Release)(IOmHistory *This);HRESULT ( *GetTypeInfoCount)(IOmHistory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IOmHistory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IOmHistory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IOmHistory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IOmHistory *This, short *p);HRESULT ( *back)(IOmHistory *This, VARIANT *pvargdistance);HRESULT ( *forward)(IOmHistory *This, VARIANT *pvargdistance);HRESULT ( *go)(IOmHistory *This, VARIANT *pvargdistance);};
struct IRadioViewVtbl {HRESULT ( *QueryInterface)(IRadioView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioView *This);ULONG ( *Release)(IRadioView *This);HRESULT ( *GetTypeInfoCount)(IRadioView *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioView *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioView *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioView *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IDXEffectVtbl {HRESULT ( *QueryInterface)(IDXEffect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDXEffect *This);ULONG ( *Release)(IDXEffect *This);HRESULT ( *GetTypeInfoCount)(IDXEffect *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDXEffect *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDXEffect *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDXEffect *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Capabilities)(IDXEffect *This, int *pVal);HRESULT ( *get_Progress)(IDXEffect *This, float *pVal);HRESULT ( *put_Progress)(IDXEffect *This, float newVal);HRESULT ( *get_StepResolution)(IDXEffect *This, float *pVal);HRESULT ( *get_Duration)(IDXEffect *This, float *pVal);HRESULT ( *put_Duration)(IDXEffect *This, float newVal);};
struct IDispatchVtbl {HRESULT ( *QueryInterface)(IDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatch *This);ULONG ( *Release)(IDispatch *This);HRESULT ( *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IFontDispVtbl {HRESULT ( *QueryInterface)(IFontDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontDisp *This);ULONG ( *Release)(IFontDisp *This);HRESULT ( *GetTypeInfoCount)(IFontDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLRectVtbl {HRESULT ( *QueryInterface)(IHTMLRect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRect *This);ULONG ( *Release)(IHTMLRect *This);HRESULT ( *GetTypeInfoCount)(IHTMLRect *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRect *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRect *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRect *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_left)(IHTMLRect *This, int v);HRESULT ( *get_left)(IHTMLRect *This, int *p);HRESULT ( *put_top)(IHTMLRect *This, int v);HRESULT ( *get_top)(IHTMLRect *This, int *p);HRESULT ( *put_right)(IHTMLRect *This, int v);HRESULT ( *get_right)(IHTMLRect *This, int *p);HRESULT ( *put_bottom)(IHTMLRect *This, int v);HRESULT ( *get_bottom)(IHTMLRect *This, int *p);};
struct IRequestVtbl {HRESULT ( *QueryInterface)(IRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRequest *This);ULONG ( *Release)(IRequest *This);HRESULT ( *GetTypeInfoCount)(IRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_TotalBytes)(IRequest *This, int *pVal);HRESULT ( *get_ServerVariables)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_QueryString)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Form)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Cookies)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *BinaryRead)(IRequest *This, VARIANT *pvarCountToRead, VARIANT *pvarReturn);};
struct IWebViewVtbl {HRESULT ( *QueryInterface)(IWebView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebView *This);ULONG ( *Release)(IWebView *This);HRESULT ( *GetTypeInfoCount)(IWebView *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebView *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebView *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebView *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *OnCSCClick)(IWebView *This);HRESULT ( *CSCSynchronize)(IWebView *This);HRESULT ( *OnCSCMouseOver)(IWebView *This);HRESULT ( *OnCSCMouseOut)(IWebView *This);};
struct IRTCParticipantStateChangeEventVtbl {HRESULT ( *QueryInterface)(IRTCParticipantStateChangeEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCParticipantStateChangeEvent *This);ULONG ( *Release)(IRTCParticipantStateChangeEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCParticipantStateChangeEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCParticipantStateChangeEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCParticipantStateChangeEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCParticipantStateChangeEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Participant)(IRTCParticipantStateChangeEvent *This, IRTCParticipant **ppParticipant);HRESULT ( *get_State)(IRTCParticipantStateChangeEvent *This, RTC_PARTICIPANT_STATE *penState);HRESULT ( *get_StatusCode)(IRTCParticipantStateChangeEvent *This, int *plStatusCode);};
struct IHTMLAttributeCollection2Vtbl {HRESULT ( *QueryInterface)(IHTMLAttributeCollection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAttributeCollection2 *This);ULONG ( *Release)(IHTMLAttributeCollection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAttributeCollection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAttributeCollection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAttributeCollection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAttributeCollection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *getNamedItem)(IHTMLAttributeCollection2 *This, BSTR bstrName, IHTMLDOMAttribute **newretNode);HRESULT ( *setNamedItem)(IHTMLAttributeCollection2 *This, IHTMLDOMAttribute *ppNode, IHTMLDOMAttribute **newretNode);HRESULT ( *removeNamedItem)(IHTMLAttributeCollection2 *This, BSTR bstrName, IHTMLDOMAttribute **newretNode);};
struct IHTMLFontNamesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFontNamesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontNamesCollection *This);ULONG ( *Release)(IHTMLFontNamesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontNamesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontNamesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontNamesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontNamesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFontNamesCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFontNamesCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLFontNamesCollection *This, int index, BSTR *pBstr);};
struct IHTMLFontSizesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFontSizesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontSizesCollection *This);ULONG ( *Release)(IHTMLFontSizesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontSizesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontSizesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontSizesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontSizesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFontSizesCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFontSizesCollection *This, IUnknown **p);HRESULT ( *get_forFont)(IHTMLFontSizesCollection *This, BSTR *p);HRESULT ( *item)(IHTMLFontSizesCollection *This, int index, int *plSize);};
struct IHTMLNamespaceCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLNamespaceCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNamespaceCollection *This);ULONG ( *Release)(IHTMLNamespaceCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLNamespaceCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNamespaceCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNamespaceCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNamespaceCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLNamespaceCollection *This, int *p);HRESULT ( *item)(IHTMLNamespaceCollection *This, VARIANT index, IDispatch **ppNamespace);HRESULT ( *add)(IHTMLNamespaceCollection *This, BSTR bstrNamespace, BSTR bstrUrn, VARIANT implementationUrl, IDispatch **ppNamespace);};
struct IHTMLElementCollection3Vtbl {HRESULT ( *QueryInterface)(IHTMLElementCollection3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementCollection3 *This);ULONG ( *Release)(IHTMLElementCollection3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLElementCollection3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElementCollection3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElementCollection3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElementCollection3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *namedItem)(IHTMLElementCollection3 *This, BSTR name, IDispatch **pdisp);};
struct ITIMEDMusicPlayerObjectVtbl {HRESULT ( *QueryInterface)(ITIMEDMusicPlayerObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEDMusicPlayerObject *This);ULONG ( *Release)(ITIMEDMusicPlayerObject *This);HRESULT ( *GetTypeInfoCount)(ITIMEDMusicPlayerObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEDMusicPlayerObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEDMusicPlayerObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEDMusicPlayerObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_isDirectMusicInstalled)(ITIMEDMusicPlayerObject *This, VARIANT_BOOL *hasDM);};
struct IXMLDOMSchemaCollectionVtbl {HRESULT ( *QueryInterface)(IXMLDOMSchemaCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMSchemaCollection *This);ULONG ( *Release)(IXMLDOMSchemaCollection *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMSchemaCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMSchemaCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMSchemaCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMSchemaCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *add)(IXMLDOMSchemaCollection *This, BSTR namespaceURI, VARIANT var);HRESULT ( *get)(IXMLDOMSchemaCollection *This, BSTR namespaceURI, IXMLDOMNode **schemaNode);HRESULT ( *remove)(IXMLDOMSchemaCollection *This, BSTR namespaceURI);HRESULT ( *get_length)(IXMLDOMSchemaCollection *This, int *length);HRESULT ( *get_namespaceURI)(IXMLDOMSchemaCollection *This, int index, BSTR *length);HRESULT ( *addCollection)(IXMLDOMSchemaCollection *This, IXMLDOMSchemaCollection *otherCollection);HRESULT ( *get__newEnum)(IXMLDOMSchemaCollection *This, IUnknown **ppUnk);};
struct IAnimationComposerSiteVtbl {HRESULT ( *QueryInterface)(IAnimationComposerSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationComposerSite *This);ULONG ( *Release)(IAnimationComposerSite *This);HRESULT ( *GetTypeInfoCount)(IAnimationComposerSite *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAnimationComposerSite *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAnimationComposerSite *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAnimationComposerSite *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddFragment)(IAnimationComposerSite *This, BSTR attributeName, IDispatch *fragment);HRESULT ( *RemoveFragment)(IAnimationComposerSite *This, BSTR attributeName, IDispatch *fragment);HRESULT ( *InsertFragment)(IAnimationComposerSite *This, BSTR attributeName, IDispatch *fragment, VARIANT index);HRESULT ( *EnumerateFragments)(IAnimationComposerSite *This, BSTR attributeName, IEnumVARIANT **fragments);HRESULT ( *RegisterComposerFactory)(IAnimationComposerSite *This, VARIANT *factory);HRESULT ( *UnregisterComposerFactory)(IAnimationComposerSite *This, VARIANT *factory);};
struct IHTMLElementCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementCollection *This);ULONG ( *Release)(IHTMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *toString)(IHTMLElementCollection *This, BSTR *String);HRESULT ( *put_length)(IHTMLElementCollection *This, int v);HRESULT ( *get_length)(IHTMLElementCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLElementCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLElementCollection *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLElementCollection *This, VARIANT tagName, IDispatch **pdisp);};
struct IHTMLPluginsCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLPluginsCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPluginsCollection *This);ULONG ( *Release)(IHTMLPluginsCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLPluginsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPluginsCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPluginsCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPluginsCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLPluginsCollection *This, int *p);HRESULT ( *refresh)(IHTMLPluginsCollection *This, VARIANT_BOOL reload);};
struct IHTMLAreasCollection3Vtbl {HRESULT ( *QueryInterface)(IHTMLAreasCollection3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreasCollection3 *This);ULONG ( *Release)(IHTMLAreasCollection3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreasCollection3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreasCollection3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreasCollection3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreasCollection3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *namedItem)(IHTMLAreasCollection3 *This, BSTR name, IDispatch **pdisp);};
struct IHTMLSelectionObject2Vtbl {HRESULT ( *QueryInterface)(IHTMLSelectionObject2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectionObject2 *This);ULONG ( *Release)(IHTMLSelectionObject2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectionObject2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectionObject2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectionObject2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectionObject2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createRangeCollection)(IHTMLSelectionObject2 *This, IDispatch **rangeCollection);HRESULT ( *get_typeDetail)(IHTMLSelectionObject2 *This, BSTR *p);};
struct IRTCPresenceDataEventVtbl {HRESULT ( *QueryInterface)(IRTCPresenceDataEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPresenceDataEvent *This);ULONG ( *Release)(IRTCPresenceDataEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCPresenceDataEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCPresenceDataEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCPresenceDataEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCPresenceDataEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_StatusCode)(IRTCPresenceDataEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCPresenceDataEvent *This, BSTR *pbstrStatusText);HRESULT ( *GetPresenceData)(IRTCPresenceDataEvent *This, BSTR *pbstrNamespace, BSTR *pbstrData);};
struct IHTMLBaseFontElementVtbl {HRESULT ( *QueryInterface)(IHTMLBaseFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBaseFontElement *This);ULONG ( *Release)(IHTMLBaseFontElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBaseFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBaseFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBaseFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBaseFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_color)(IHTMLBaseFontElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLBaseFontElement *This, VARIANT *p);HRESULT ( *put_face)(IHTMLBaseFontElement *This, BSTR v);HRESULT ( *get_face)(IHTMLBaseFontElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLBaseFontElement *This, int v);HRESULT ( *get_size)(IHTMLBaseFontElement *This, int *p);};
struct IHTMLCommentElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLCommentElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCommentElement2 *This);ULONG ( *Release)(IHTMLCommentElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLCommentElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCommentElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCommentElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCommentElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_data)(IHTMLCommentElement2 *This, BSTR v);HRESULT ( *get_data)(IHTMLCommentElement2 *This, BSTR *p);HRESULT ( *get_length)(IHTMLCommentElement2 *This, int *p);HRESULT ( *substringData)(IHTMLCommentElement2 *This, int offset, int Count, BSTR *pbstrsubString);HRESULT ( *appendData)(IHTMLCommentElement2 *This, BSTR bstrstring);HRESULT ( *insertData)(IHTMLCommentElement2 *This, int offset, BSTR bstrstring);HRESULT ( *deleteData)(IHTMLCommentElement2 *This, int offset, int Count);HRESULT ( *replaceData)(IHTMLCommentElement2 *This, int offset, int Count, BSTR bstrstring);};
struct IHTMLFieldSetElementVtbl {HRESULT ( *QueryInterface)(IHTMLFieldSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFieldSetElement *This);ULONG ( *Release)(IHTMLFieldSetElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFieldSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFieldSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFieldSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFieldSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLFieldSetElement *This, BSTR v);HRESULT ( *get_align)(IHTMLFieldSetElement *This, BSTR *p);};
struct IHTMLFrameSetElementVtbl {HRESULT ( *QueryInterface)(IHTMLFrameSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameSetElement *This);ULONG ( *Release)(IHTMLFrameSetElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_rows)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_rows)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_cols)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_cols)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_border)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_border)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_frameBorder)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_frameBorder)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_frameSpacing)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_frameSpacing)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_name)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_name)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_onload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLFrameSetElement *This, VARIANT *p);};
struct IHTMLSelectionObjectVtbl {HRESULT ( *QueryInterface)(IHTMLSelectionObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectionObject *This);ULONG ( *Release)(IHTMLSelectionObject *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectionObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectionObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectionObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectionObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createRange)(IHTMLSelectionObject *This, IDispatch **range);HRESULT ( *empty)(IHTMLSelectionObject *This);HRESULT ( *clear)(IHTMLSelectionObject *This);HRESULT ( *get_type)(IHTMLSelectionObject *This, BSTR *p);};
struct IShellFolderViewDualVtbl {HRESULT ( *QueryInterface)(IShellFolderViewDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolderViewDual *This);ULONG ( *Release)(IShellFolderViewDual *This);HRESULT ( *GetTypeInfoCount)(IShellFolderViewDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFolderViewDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFolderViewDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFolderViewDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Folder)(IShellFolderViewDual *This, Folder **ppid);HRESULT ( *SelectedItems)(IShellFolderViewDual *This, FolderItems **ppid);HRESULT ( *get_FocusedItem)(IShellFolderViewDual *This, FolderItem **ppid);HRESULT ( *SelectItem)(IShellFolderViewDual *This, VARIANT *pvfi, int dwFlags);HRESULT ( *PopupItemMenu)(IShellFolderViewDual *This, FolderItem *pfi, VARIANT vx, VARIANT vy, BSTR *pbs);HRESULT ( *get_Script)(IShellFolderViewDual *This, IDispatch **ppDisp);HRESULT ( *get_ViewOptions)(IShellFolderViewDual *This, int *plViewOptions);};
struct IVBSAXContentHandlerVtbl {HRESULT ( *QueryInterface)(IVBSAXContentHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXContentHandler *This);ULONG ( *Release)(IVBSAXContentHandler *This);HRESULT ( *GetTypeInfoCount)(IVBSAXContentHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXContentHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXContentHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXContentHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *putref_documentLocator)(IVBSAXContentHandler *This, IVBSAXLocator *oLocator);HRESULT ( *startDocument)(IVBSAXContentHandler *This);HRESULT ( *endDocument)(IVBSAXContentHandler *This);HRESULT ( *startPrefixMapping)(IVBSAXContentHandler *This, BSTR *strPrefix, BSTR *strURI);HRESULT ( *endPrefixMapping)(IVBSAXContentHandler *This, BSTR *strPrefix);HRESULT ( *startElement)(IVBSAXContentHandler *This, BSTR *strNamespaceURI, BSTR *strLocalName, BSTR *strQName, IVBSAXAttributes *oAttributes);HRESULT ( *endElement)(IVBSAXContentHandler *This, BSTR *strNamespaceURI, BSTR *strLocalName, BSTR *strQName);HRESULT ( *characters)(IVBSAXContentHandler *This, BSTR *strChars);HRESULT ( *ignorableWhitespace)(IVBSAXContentHandler *This, BSTR *strChars);HRESULT ( *processingInstruction)(IVBSAXContentHandler *This, BSTR *strTarget, BSTR *strData);HRESULT ( *skippedEntity)(IVBSAXContentHandler *This, BSTR *strName);};
struct IVBSAXEntityResolverVtbl {HRESULT ( *QueryInterface)(IVBSAXEntityResolver *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXEntityResolver *This);ULONG ( *Release)(IVBSAXEntityResolver *This);HRESULT ( *GetTypeInfoCount)(IVBSAXEntityResolver *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXEntityResolver *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXEntityResolver *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXEntityResolver *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *resolveEntity)(IVBSAXEntityResolver *This, BSTR *strPublicId, BSTR *strSystemId, VARIANT *varInput);};
struct IVBSAXLexicalHandlerVtbl {HRESULT ( *QueryInterface)(IVBSAXLexicalHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXLexicalHandler *This);ULONG ( *Release)(IVBSAXLexicalHandler *This);HRESULT ( *GetTypeInfoCount)(IVBSAXLexicalHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXLexicalHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXLexicalHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXLexicalHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *startDTD)(IVBSAXLexicalHandler *This, BSTR *strName, BSTR *strPublicId, BSTR *strSystemId);HRESULT ( *endDTD)(IVBSAXLexicalHandler *This);HRESULT ( *startEntity)(IVBSAXLexicalHandler *This, BSTR *strName);HRESULT ( *endEntity)(IVBSAXLexicalHandler *This, BSTR *strName);HRESULT ( *startCDATA)(IVBSAXLexicalHandler *This);HRESULT ( *endCDATA)(IVBSAXLexicalHandler *This);HRESULT ( *comment)(IVBSAXLexicalHandler *This, BSTR *strChars);};
struct IActiveScriptAuthorVtbl {HRESULT ( *QueryInterface)(IActiveScriptAuthor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptAuthor *This);ULONG ( *Release)(IActiveScriptAuthor *This);HRESULT ( *AddNamedItem)(IActiveScriptAuthor *This, LPCOLESTR pszName, DWORD dwFlags, IDispatch *pdisp);HRESULT ( *AddScriptlet)(IActiveScriptAuthor *This, LPCOLESTR pszDefaultName, LPCOLESTR pszCode, LPCOLESTR pszItemName, LPCOLESTR pszSubItemName, LPCOLESTR pszEventName, LPCOLESTR pszDelimiter, DWORD dwCookie, DWORD dwFlags);HRESULT ( *ParseScriptText)(IActiveScriptAuthor *This, LPCOLESTR pszCode, LPCOLESTR pszItemName, LPCOLESTR pszDelimiter, DWORD dwCookie, DWORD dwFlags);HRESULT ( *GetScriptTextAttributes)(IActiveScriptAuthor *This, LPCOLESTR pszCode, ULONG cch, LPCOLESTR pszDelimiter, DWORD dwFlags, SOURCE_TEXT_ATTR *pattr);HRESULT ( *GetScriptletTextAttributes)(IActiveScriptAuthor *This, LPCOLESTR pszCode, ULONG cch, LPCOLESTR pszDelimiter, DWORD dwFlags, SOURCE_TEXT_ATTR *pattr);HRESULT ( *GetRoot)(IActiveScriptAuthor *This, IScriptNode **ppsp);HRESULT ( *GetLanguageFlags)(IActiveScriptAuthor *This, DWORD *pgrfasa);HRESULT ( *GetEventHandler)(IActiveScriptAuthor *This, IDispatch *pdisp, LPCOLESTR pszItem, LPCOLESTR pszSubItem, LPCOLESTR pszEvent, IScriptEntry **ppse);HRESULT ( *RemoveNamedItem)(IActiveScriptAuthor *This, LPCOLESTR pszName);HRESULT ( *AddTypeLib)(IActiveScriptAuthor *This,  GUID * rguidTypeLib, DWORD dwMajor, DWORD dwMinor, DWORD dwFlags);HRESULT ( *RemoveTypeLib)(IActiveScriptAuthor *This,  GUID * rguidTypeLib, DWORD dwMajor, DWORD dwMinor);HRESULT ( *GetChars)(IActiveScriptAuthor *This, DWORD fRequestedList, BSTR *pbstrChars);HRESULT ( *GetInfoFromContext)(IActiveScriptAuthor *This, LPCOLESTR pszCode, ULONG cchCode, ULONG ichCurrentPosition, DWORD dwListTypesRequested, DWORD *pdwListTypesProvided, ULONG *pichListAnchorPosition, ULONG *pichFuncAnchorPosition, MEMBERID *pmemid, LONG *piCurrentParameter, IUnknown **ppunk);HRESULT ( *IsCommitChar)(IActiveScriptAuthor *This, OLECHAR ch, BOOL *pfcommit);};
struct IHTMLAnchorElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLAnchorElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAnchorElement2 *This);ULONG ( *Release)(IHTMLAnchorElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAnchorElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAnchorElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAnchorElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAnchorElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_charset)(IHTMLAnchorElement2 *This, BSTR v);HRESULT ( *get_charset)(IHTMLAnchorElement2 *This, BSTR *p);HRESULT ( *put_coords)(IHTMLAnchorElement2 *This, BSTR v);HRESULT ( *get_coords)(IHTMLAnchorElement2 *This, BSTR *p);HRESULT ( *put_hreflang)(IHTMLAnchorElement2 *This, BSTR v);HRESULT ( *get_hreflang)(IHTMLAnchorElement2 *This, BSTR *p);HRESULT ( *put_shape)(IHTMLAnchorElement2 *This, BSTR v);HRESULT ( *get_shape)(IHTMLAnchorElement2 *This, BSTR *p);HRESULT ( *put_type)(IHTMLAnchorElement2 *This, BSTR v);HRESULT ( *get_type)(IHTMLAnchorElement2 *This, BSTR *p);};
struct IHTMLCommentElementVtbl {HRESULT ( *QueryInterface)(IHTMLCommentElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCommentElement *This);ULONG ( *Release)(IHTMLCommentElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLCommentElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCommentElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCommentElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCommentElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_text)(IHTMLCommentElement *This, BSTR v);HRESULT ( *get_text)(IHTMLCommentElement *This, BSTR *p);HRESULT ( *put_atomic)(IHTMLCommentElement *This, int v);HRESULT ( *get_atomic)(IHTMLCommentElement *This, int *p);};
struct IHTMLControlElementVtbl {HRESULT ( *QueryInterface)(IHTMLControlElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLControlElement *This);ULONG ( *Release)(IHTMLControlElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLControlElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLControlElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLControlElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLControlElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_tabIndex)(IHTMLControlElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLControlElement *This, short *p);HRESULT ( *focus)(IHTMLControlElement *This);HRESULT ( *put_accessKey)(IHTMLControlElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLControlElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *put_onresize)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onresize)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *blur)(IHTMLControlElement *This);HRESULT ( *addFilter)(IHTMLControlElement *This, IUnknown *pUnk);HRESULT ( *removeFilter)(IHTMLControlElement *This, IUnknown *pUnk);HRESULT ( *get_clientHeight)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientWidth)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientTop)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientLeft)(IHTMLControlElement *This, int *p);};
struct IHTMLGenericElementVtbl {HRESULT ( *QueryInterface)(IHTMLGenericElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLGenericElement *This);ULONG ( *Release)(IHTMLGenericElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLGenericElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLGenericElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLGenericElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLGenericElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_recordset)(IHTMLGenericElement *This, IDispatch **p);HRESULT ( *namedRecordset)(IHTMLGenericElement *This, BSTR dataMember, VARIANT *hierarchy, IDispatch **ppRecordset);};
struct IHTMLIsIndexElementVtbl {HRESULT ( *QueryInterface)(IHTMLIsIndexElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIsIndexElement *This);ULONG ( *Release)(IHTMLIsIndexElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLIsIndexElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIsIndexElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIsIndexElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIsIndexElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_prompt)(IHTMLIsIndexElement *This, BSTR v);HRESULT ( *get_prompt)(IHTMLIsIndexElement *This, BSTR *p);HRESULT ( *put_action)(IHTMLIsIndexElement *This, BSTR v);HRESULT ( *get_action)(IHTMLIsIndexElement *This, BSTR *p);};
struct IHTMLObjectElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLObjectElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLObjectElement2 *This);ULONG ( *Release)(IHTMLObjectElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLObjectElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLObjectElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLObjectElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLObjectElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *namedRecordset)(IHTMLObjectElement2 *This, BSTR dataMember, VARIANT *hierarchy, IDispatch **ppRecordset);HRESULT ( *put_classid)(IHTMLObjectElement2 *This, BSTR v);HRESULT ( *get_classid)(IHTMLObjectElement2 *This, BSTR *p);HRESULT ( *put_data)(IHTMLObjectElement2 *This, BSTR v);HRESULT ( *get_data)(IHTMLObjectElement2 *This, BSTR *p);};
struct IHTMLOptionElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLOptionElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElement3 *This);ULONG ( *Release)(IHTMLOptionElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_label)(IHTMLOptionElement3 *This, BSTR v);HRESULT ( *get_label)(IHTMLOptionElement3 *This, BSTR *p);};
struct IHTMLPhraseElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLPhraseElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPhraseElement2 *This);ULONG ( *Release)(IHTMLPhraseElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLPhraseElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPhraseElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPhraseElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPhraseElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_cite)(IHTMLPhraseElement2 *This, BSTR v);HRESULT ( *get_cite)(IHTMLPhraseElement2 *This, BSTR *p);HRESULT ( *put_dateTime)(IHTMLPhraseElement2 *This, BSTR v);HRESULT ( *get_dateTime)(IHTMLPhraseElement2 *This, BSTR *p);};
struct IHTMLScriptElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLScriptElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScriptElement2 *This);ULONG ( *Release)(IHTMLScriptElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLScriptElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScriptElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScriptElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScriptElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_charset)(IHTMLScriptElement2 *This, BSTR v);HRESULT ( *get_charset)(IHTMLScriptElement2 *This, BSTR *p);};
struct IHTMLSelectElement4Vtbl {HRESULT ( *QueryInterface)(IHTMLSelectElement4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectElement4 *This);ULONG ( *Release)(IHTMLSelectElement4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectElement4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectElement4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectElement4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectElement4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *namedItem)(IHTMLSelectElement4 *This, BSTR name, IDispatch **pdisp);};
struct IHTMLStyleSheetPageVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetPage *This);ULONG ( *Release)(IHTMLStyleSheetPage *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetPage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetPage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetPage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetPage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_selector)(IHTMLStyleSheetPage *This, BSTR *p);HRESULT ( *get_pseudoClass)(IHTMLStyleSheetPage *This, BSTR *p);};
struct IRTCBuddyGroupEventVtbl {HRESULT ( *QueryInterface)(IRTCBuddyGroupEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddyGroupEvent *This);ULONG ( *Release)(IRTCBuddyGroupEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCBuddyGroupEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCBuddyGroupEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCBuddyGroupEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCBuddyGroupEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_EventType)(IRTCBuddyGroupEvent *This, RTC_GROUP_EVENT_TYPE *pEventType);HRESULT ( *get_Group)(IRTCBuddyGroupEvent *This, IRTCBuddyGroup **ppGroup);HRESULT ( *get_Buddy)(IRTCBuddyGroupEvent *This, IRTCBuddy2 **ppBuddy);HRESULT ( *get_StatusCode)(IRTCBuddyGroupEvent *This, int *plStatusCode);};
struct IXMLDOMNamedNodeMapVtbl {HRESULT ( *QueryInterface)(IXMLDOMNamedNodeMap *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNamedNodeMap *This);ULONG ( *Release)(IXMLDOMNamedNodeMap *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNamedNodeMap *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNamedNodeMap *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNamedNodeMap *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNamedNodeMap *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *getNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT ( *setNamedItem)(IXMLDOMNamedNodeMap *This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem);HRESULT ( *removeNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT ( *get_item)(IXMLDOMNamedNodeMap *This, int index, IXMLDOMNode **listItem);HRESULT ( *get_length)(IXMLDOMNamedNodeMap *This, int *listLength);HRESULT ( *getQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT ( *removeQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT ( *nextNode)(IXMLDOMNamedNodeMap *This, IXMLDOMNode **nextItem);HRESULT ( *reset)(IXMLDOMNamedNodeMap *This);HRESULT ( *get__newEnum)(IXMLDOMNamedNodeMap *This, IUnknown **ppUnk);};
struct IAMExtendedSeekingVtbl {HRESULT ( *QueryInterface)(IAMExtendedSeeking *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtendedSeeking *This);ULONG ( *Release)(IAMExtendedSeeking *This);HRESULT ( *GetTypeInfoCount)(IAMExtendedSeeking *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMExtendedSeeking *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMExtendedSeeking *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMExtendedSeeking *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ExSeekCapabilities)(IAMExtendedSeeking *This, int *pExCapabilities);HRESULT ( *get_MarkerCount)(IAMExtendedSeeking *This, int *pMarkerCount);HRESULT ( *get_CurrentMarker)(IAMExtendedSeeking *This, int *pCurrentMarker);HRESULT ( *GetMarkerTime)(IAMExtendedSeeking *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(IAMExtendedSeeking *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *put_PlaybackSpeed)(IAMExtendedSeeking *This, double Speed);HRESULT ( *get_PlaybackSpeed)(IAMExtendedSeeking *This, double *pSpeed);};
struct IAnimationFragmentVtbl {HRESULT ( *QueryInterface)(IAnimationFragment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAnimationFragment *This);ULONG ( *Release)(IAnimationFragment *This);HRESULT ( *GetTypeInfoCount)(IAnimationFragment *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAnimationFragment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAnimationFragment *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAnimationFragment *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_element)(IAnimationFragment *This, IDispatch **htmlElement);HRESULT ( *get_value)(IAnimationFragment *This, BSTR attributeName, VARIANT origvalue, VARIANT currentvalue, VARIANT *newvalue);HRESULT ( *DetachFromComposer)(IAnimationFragment *This);};
struct IDirectControlViewVtbl {HRESULT ( *QueryInterface)(IDirectControlView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectControlView *This);ULONG ( *Release)(IDirectControlView *This);HRESULT ( *GetTypeInfoCount)(IDirectControlView *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDirectControlView *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDirectControlView *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDirectControlView *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *IsTimerNeeded)(IDirectControlView *This);HRESULT ( *OnTimer)(IDirectControlView *This);HRESULT ( *put_Visible)(IDirectControlView *This, VARIANT_BOOL bVisible);HRESULT ( *OnFocusChange)(IDirectControlView *This, VARIANT_BOOL bFocus);};
struct IDocHostUIHandler2Vtbl {HRESULT ( *QueryInterface)(IDocHostUIHandler2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostUIHandler2 *This);ULONG ( *Release)(IDocHostUIHandler2 *This);HRESULT ( *ShowContextMenu)(IDocHostUIHandler2 *This, DWORD dwID, POINT *ppt, IUnknown *pcmdtReserved, IDispatch *pdispReserved);HRESULT ( *GetHostInfo)(IDocHostUIHandler2 *This, DOCHOSTUIINFO *pInfo);HRESULT ( *ShowUI)(IDocHostUIHandler2 *This, DWORD dwID, IOleInPlaceActiveObject *pActiveObject, IOleCommandTarget *pCommandTarget, IOleInPlaceFrame *pFrame, IOleInPlaceUIWindow *pDoc);HRESULT ( *HideUI)(IDocHostUIHandler2 *This);HRESULT ( *UpdateUI)(IDocHostUIHandler2 *This);HRESULT ( *EnableModeless)(IDocHostUIHandler2 *This, BOOL fEnable);HRESULT ( *OnDocWindowActivate)(IDocHostUIHandler2 *This, BOOL fActivate);HRESULT ( *OnFrameWindowActivate)(IDocHostUIHandler2 *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IDocHostUIHandler2 *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fRameWindow);HRESULT ( *TranslateAcceleratorA)(IDocHostUIHandler2 *This, LPMSG lpMsg,  GUID *pguidCmdGroup, DWORD nCmdID);HRESULT ( *GetOptionKeyPath)(IDocHostUIHandler2 *This, LPOLESTR *pchKey, DWORD dw);HRESULT ( *GetDropTarget)(IDocHostUIHandler2 *This, IDropTarget *pDropTarget, IDropTarget **ppDropTarget);HRESULT ( *GetExternal)(IDocHostUIHandler2 *This, IDispatch **ppDispatch);HRESULT ( *TranslateUrl)(IDocHostUIHandler2 *This, DWORD dwTranslate, OLECHAR *pchURLIn, OLECHAR **ppchURLOut);HRESULT ( *FilterDataObject)(IDocHostUIHandler2 *This, IDataObject *pDO, IDataObject **ppDORet);HRESULT ( *GetOverrideKeyPath)(IDocHostUIHandler2 *This, LPOLESTR *pchKey, DWORD dw);};
struct IHTMLAnchorElementVtbl {HRESULT ( *QueryInterface)(IHTMLAnchorElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAnchorElement *This);ULONG ( *Release)(IHTMLAnchorElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLAnchorElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAnchorElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAnchorElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAnchorElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_href)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_target)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_rel)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_rel)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_rev)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_rev)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_urn)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_urn)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_Methods)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_Methods)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_name)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_host)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_host)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_hostname)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_pathname)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_port)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_port)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_protocol)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_search)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_search)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_hash)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_hash)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLAnchorElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLAnchorElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLAnchorElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLAnchorElement *This, VARIANT *p);HRESULT ( *put_accessKey)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_protocolLong)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_tabIndex)(IHTMLAnchorElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLAnchorElement *This, short *p);HRESULT ( *focus)(IHTMLAnchorElement *This);HRESULT ( *blur)(IHTMLAnchorElement *This);};
struct IHTMLBlockElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLBlockElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBlockElement2 *This);ULONG ( *Release)(IHTMLBlockElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLBlockElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBlockElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBlockElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBlockElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_cite)(IHTMLBlockElement2 *This, BSTR v);HRESULT ( *get_cite)(IHTMLBlockElement2 *This, BSTR *p);HRESULT ( *put_width)(IHTMLBlockElement2 *This, BSTR v);HRESULT ( *get_width)(IHTMLBlockElement2 *This, BSTR *p);};
struct IHTMLCurrentStyle3Vtbl {HRESULT ( *QueryInterface)(IHTMLCurrentStyle3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCurrentStyle3 *This);ULONG ( *Release)(IHTMLCurrentStyle3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLCurrentStyle3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCurrentStyle3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCurrentStyle3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCurrentStyle3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_textOverflow)(IHTMLCurrentStyle3 *This, BSTR *p);HRESULT ( *get_minHeight)(IHTMLCurrentStyle3 *This, VARIANT *p);HRESULT ( *get_wordSpacing)(IHTMLCurrentStyle3 *This, VARIANT *p);HRESULT ( *get_whiteSpace)(IHTMLCurrentStyle3 *This, BSTR *p);};
struct IHTMLHeaderElementVtbl {HRESULT ( *QueryInterface)(IHTMLHeaderElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHeaderElement *This);ULONG ( *Release)(IHTMLHeaderElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHeaderElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHeaderElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHeaderElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHeaderElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLHeaderElement *This, BSTR v);HRESULT ( *get_align)(IHTMLHeaderElement *This, BSTR *p);};
struct IHTMLIFrameElementVtbl {HRESULT ( *QueryInterface)(IHTMLIFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIFrameElement *This);ULONG ( *Release)(IHTMLIFrameElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLIFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_vspace)(IHTMLIFrameElement *This, int v);HRESULT ( *get_vspace)(IHTMLIFrameElement *This, int *p);HRESULT ( *put_hspace)(IHTMLIFrameElement *This, int v);HRESULT ( *get_hspace)(IHTMLIFrameElement *This, int *p);HRESULT ( *put_align)(IHTMLIFrameElement *This, BSTR v);HRESULT ( *get_align)(IHTMLIFrameElement *This, BSTR *p);};
struct IHTMLInputElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLInputElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputElement2 *This);ULONG ( *Release)(IHTMLInputElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_accept)(IHTMLInputElement2 *This, BSTR v);HRESULT ( *get_accept)(IHTMLInputElement2 *This, BSTR *p);HRESULT ( *put_useMap)(IHTMLInputElement2 *This, BSTR v);HRESULT ( *get_useMap)(IHTMLInputElement2 *This, BSTR *p);};
struct IHTMLLegendElementVtbl {HRESULT ( *QueryInterface)(IHTMLLegendElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLegendElement *This);ULONG ( *Release)(IHTMLLegendElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLegendElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLegendElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLegendElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLegendElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLLegendElement *This, BSTR v);HRESULT ( *get_align)(IHTMLLegendElement *This, BSTR *p);};
struct IHTMLNextIdElementVtbl {HRESULT ( *QueryInterface)(IHTMLNextIdElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNextIdElement *This);ULONG ( *Release)(IHTMLNextIdElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLNextIdElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNextIdElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNextIdElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNextIdElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_n)(IHTMLNextIdElement *This, BSTR v);HRESULT ( *get_n)(IHTMLNextIdElement *This, BSTR *p);};
struct IHTMLObjectElementVtbl {HRESULT ( *QueryInterface)(IHTMLObjectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLObjectElement *This);ULONG ( *Release)(IHTMLObjectElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLObjectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLObjectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLObjectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLObjectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_object)(IHTMLObjectElement *This, IDispatch **p);HRESULT ( *get_classid)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_data)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *putref_recordset)(IHTMLObjectElement *This, IDispatch *v);HRESULT ( *get_recordset)(IHTMLObjectElement *This, IDispatch **p);HRESULT ( *put_align)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_align)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_name)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_codeBase)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_codeBase)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_codeType)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_codeType)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_code)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_code)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_BaseHref)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_type)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_type)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_form)(IHTMLObjectElement *This, IHTMLFormElement **p);HRESULT ( *put_width)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *get_readyState)(IHTMLObjectElement *This, int *p);HRESULT ( *put_onreadystatechange)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_altHtml)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_altHtml)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_vspace)(IHTMLObjectElement *This, int v);HRESULT ( *get_vspace)(IHTMLObjectElement *This, int *p);HRESULT ( *put_hspace)(IHTMLObjectElement *This, int v);HRESULT ( *get_hspace)(IHTMLObjectElement *This, int *p);};
struct IHTMLPersistDataOMVtbl {HRESULT ( *QueryInterface)(IHTMLPersistDataOM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPersistDataOM *This);ULONG ( *Release)(IHTMLPersistDataOM *This);HRESULT ( *GetTypeInfoCount)(IHTMLPersistDataOM *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPersistDataOM *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPersistDataOM *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPersistDataOM *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_XMLDocument)(IHTMLPersistDataOM *This, IDispatch **p);HRESULT ( *getAttribute)(IHTMLPersistDataOM *This, BSTR name, VARIANT *pValue);HRESULT ( *setAttribute)(IHTMLPersistDataOM *This, BSTR name, VARIANT value);HRESULT ( *removeAttribute)(IHTMLPersistDataOM *This, BSTR name);};
struct IHTMLStyleFontFaceVtbl {HRESULT ( *QueryInterface)(IHTMLStyleFontFace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleFontFace *This);ULONG ( *Release)(IHTMLStyleFontFace *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleFontFace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleFontFace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleFontFace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleFontFace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontsrc)(IHTMLStyleFontFace *This, BSTR v);HRESULT ( *get_fontsrc)(IHTMLStyleFontFace *This, BSTR *p);};
struct IHTMLTableSection3Vtbl {HRESULT ( *QueryInterface)(IHTMLTableSection3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableSection3 *This);ULONG ( *Release)(IHTMLTableSection3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableSection3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableSection3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableSection3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableSection3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_ch)(IHTMLTableSection3 *This, BSTR v);HRESULT ( *get_ch)(IHTMLTableSection3 *This, BSTR *p);HRESULT ( *put_chOff)(IHTMLTableSection3 *This, BSTR v);HRESULT ( *get_chOff)(IHTMLTableSection3 *This, BSTR *p);};
struct IHTMLUrnCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLUrnCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUrnCollection *This);ULONG ( *Release)(IHTMLUrnCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLUrnCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUrnCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUrnCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUrnCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLUrnCollection *This, int *p);HRESULT ( *item)(IHTMLUrnCollection *This, int index, BSTR *ppUrn);};
struct IHtmlDlgSafeHelperVtbl {HRESULT ( *QueryInterface)(IHtmlDlgSafeHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHtmlDlgSafeHelper *This);ULONG ( *Release)(IHtmlDlgSafeHelper *This);HRESULT ( *GetTypeInfoCount)(IHtmlDlgSafeHelper *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHtmlDlgSafeHelper *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHtmlDlgSafeHelper *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHtmlDlgSafeHelper *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *choosecolordlg)(IHtmlDlgSafeHelper *This, VARIANT initColor, VARIANT *rgbColor);HRESULT ( *getCharset)(IHtmlDlgSafeHelper *This, BSTR fontName, VARIANT *charset);HRESULT ( *get_Fonts)(IHtmlDlgSafeHelper *This, IDispatch **p);HRESULT ( *get_BlockFormats)(IHtmlDlgSafeHelper *This, IDispatch **p);};
struct IRTCIntensityEventVtbl {HRESULT ( *QueryInterface)(IRTCIntensityEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCIntensityEvent *This);ULONG ( *Release)(IRTCIntensityEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCIntensityEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCIntensityEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCIntensityEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCIntensityEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Level)(IRTCIntensityEvent *This, int *plLevel);HRESULT ( *get_Min)(IRTCIntensityEvent *This, int *plMin);HRESULT ( *get_Max)(IRTCIntensityEvent *This, int *plMax);HRESULT ( *get_Direction)(IRTCIntensityEvent *This, RTC_AUDIO_DEVICE *penDirection);};
struct IRequestDictionaryVtbl {HRESULT ( *QueryInterface)(IRequestDictionary *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRequestDictionary *This);ULONG ( *Release)(IRequestDictionary *This);HRESULT ( *GetTypeInfoCount)(IRequestDictionary *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRequestDictionary *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRequestDictionary *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRequestDictionary *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IRequestDictionary *This, VARIANT Var, VARIANT *pVariantReturn);HRESULT ( *put_Item)(IRequestDictionary *This, VARIANT Var, BSTR bstrValue);HRESULT ( *get__NewEnum)(IRequestDictionary *This, IUnknown **ppEnumReturn);HRESULT ( *get_Count)(IRequestDictionary *This, int *cStrRet);HRESULT ( *get_Key)(IRequestDictionary *This, VARIANT VarKey, VARIANT *pvar);};
struct IVBSAXErrorHandlerVtbl {HRESULT ( *QueryInterface)(IVBSAXErrorHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXErrorHandler *This);ULONG ( *Release)(IVBSAXErrorHandler *This);HRESULT ( *GetTypeInfoCount)(IVBSAXErrorHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXErrorHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXErrorHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXErrorHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *error)(IVBSAXErrorHandler *This, IVBSAXLocator *oLocator, BSTR *strErrorMessage, int nErrorCode);HRESULT ( *fatalError)(IVBSAXErrorHandler *This, IVBSAXLocator *oLocator, BSTR *strErrorMessage, int nErrorCode);HRESULT ( *ignorableWarning)(IVBSAXErrorHandler *This, IVBSAXLocator *oLocator, BSTR *strErrorMessage, int nErrorCode);};
struct IAMMediaContentExVtbl {HRESULT ( *QueryInterface)(IAMMediaContentEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaContentEx *This);ULONG ( *Release)(IAMMediaContentEx *This);HRESULT ( *GetTypeInfoCount)(IAMMediaContentEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMMediaContentEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMMediaContentEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMMediaContentEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MediaParameter)(IAMMediaContentEx *This, int EntryNum, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *get_MediaParameterName)(IAMMediaContentEx *This, int EntryNum, int Index, BSTR *pbstrName);HRESULT ( *get_PlaylistCount)(IAMMediaContentEx *This, int *pNumberEntries);};
struct IAMNetShowPrerollVtbl {HRESULT ( *QueryInterface)(IAMNetShowPreroll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMNetShowPreroll *This);ULONG ( *Release)(IAMNetShowPreroll *This);HRESULT ( *GetTypeInfoCount)(IAMNetShowPreroll *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetShowPreroll *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMNetShowPreroll *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMNetShowPreroll *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Preroll)(IAMNetShowPreroll *This, VARIANT_BOOL fPreroll);HRESULT ( *get_Preroll)(IAMNetShowPreroll *This, VARIANT_BOOL *pfPreroll);};
struct IDocHostUIHandlerVtbl {HRESULT ( *QueryInterface)(IDocHostUIHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostUIHandler *This);ULONG ( *Release)(IDocHostUIHandler *This);HRESULT ( *ShowContextMenu)(IDocHostUIHandler *This, DWORD dwID, POINT *ppt, IUnknown *pcmdtReserved, IDispatch *pdispReserved);HRESULT ( *GetHostInfo)(IDocHostUIHandler *This, DOCHOSTUIINFO *pInfo);HRESULT ( *ShowUI)(IDocHostUIHandler *This, DWORD dwID, IOleInPlaceActiveObject *pActiveObject, IOleCommandTarget *pCommandTarget, IOleInPlaceFrame *pFrame, IOleInPlaceUIWindow *pDoc);HRESULT ( *HideUI)(IDocHostUIHandler *This);HRESULT ( *UpdateUI)(IDocHostUIHandler *This);HRESULT ( *EnableModeless)(IDocHostUIHandler *This, BOOL fEnable);HRESULT ( *OnDocWindowActivate)(IDocHostUIHandler *This, BOOL fActivate);HRESULT ( *OnFrameWindowActivate)(IDocHostUIHandler *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IDocHostUIHandler *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fRameWindow);HRESULT ( *TranslateAcceleratorA)(IDocHostUIHandler *This, LPMSG lpMsg,  GUID *pguidCmdGroup, DWORD nCmdID);HRESULT ( *GetOptionKeyPath)(IDocHostUIHandler *This, LPOLESTR *pchKey, DWORD dw);HRESULT ( *GetDropTarget)(IDocHostUIHandler *This, IDropTarget *pDropTarget, IDropTarget **ppDropTarget);HRESULT ( *GetExternal)(IDocHostUIHandler *This, IDispatch **ppDispatch);HRESULT ( *TranslateUrl)(IDocHostUIHandler *This, DWORD dwTranslate, OLECHAR *pchURLIn, OLECHAR **ppchURLOut);HRESULT ( *FilterDataObject)(IDocHostUIHandler *This, IDataObject *pDO, IDataObject **ppDORet);};
struct IDownloadBehaviorVtbl {HRESULT ( *QueryInterface)(IDownloadBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDownloadBehavior *This);ULONG ( *Release)(IDownloadBehavior *This);HRESULT ( *GetTypeInfoCount)(IDownloadBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDownloadBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDownloadBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDownloadBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *startDownload)(IDownloadBehavior *This, BSTR bstrUrl, IDispatch *pdispCallback);};
struct IHTMLAppBehavior2Vtbl {HRESULT ( *QueryInterface)(IHTMLAppBehavior2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAppBehavior2 *This);ULONG ( *Release)(IHTMLAppBehavior2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAppBehavior2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAppBehavior2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAppBehavior2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAppBehavior2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_contextMenu)(IHTMLAppBehavior2 *This, BSTR v);HRESULT ( *get_contextMenu)(IHTMLAppBehavior2 *This, BSTR *p);HRESULT ( *put_innerBorder)(IHTMLAppBehavior2 *This, BSTR v);HRESULT ( *get_innerBorder)(IHTMLAppBehavior2 *This, BSTR *p);HRESULT ( *put_scroll)(IHTMLAppBehavior2 *This, BSTR v);HRESULT ( *get_scroll)(IHTMLAppBehavior2 *This, BSTR *p);HRESULT ( *put_scrollFlat)(IHTMLAppBehavior2 *This, BSTR v);HRESULT ( *get_scrollFlat)(IHTMLAppBehavior2 *This, BSTR *p);HRESULT ( *put_selection)(IHTMLAppBehavior2 *This, BSTR v);HRESULT ( *get_selection)(IHTMLAppBehavior2 *This, BSTR *p);};
struct IHTMLAppBehavior3Vtbl {HRESULT ( *QueryInterface)(IHTMLAppBehavior3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAppBehavior3 *This);ULONG ( *Release)(IHTMLAppBehavior3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLAppBehavior3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAppBehavior3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAppBehavior3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAppBehavior3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_navigable)(IHTMLAppBehavior3 *This, BSTR v);HRESULT ( *get_navigable)(IHTMLAppBehavior3 *This, BSTR *p);};
struct IHTMLBlockElementVtbl {HRESULT ( *QueryInterface)(IHTMLBlockElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBlockElement *This);ULONG ( *Release)(IHTMLBlockElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBlockElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBlockElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBlockElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBlockElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_clear)(IHTMLBlockElement *This, BSTR v);HRESULT ( *get_clear)(IHTMLBlockElement *This, BSTR *p);};
struct IHTMLDListElementVtbl {HRESULT ( *QueryInterface)(IHTMLDListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDListElement *This);ULONG ( *Release)(IHTMLDListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLDListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLDListElement *This, VARIANT_BOOL *p);};
struct IHTMLDOMTextNode2Vtbl {HRESULT ( *QueryInterface)(IHTMLDOMTextNode2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMTextNode2 *This);ULONG ( *Release)(IHTMLDOMTextNode2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMTextNode2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMTextNode2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMTextNode2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMTextNode2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *substringData)(IHTMLDOMTextNode2 *This, int offset, int Count, BSTR *pbstrsubString);HRESULT ( *appendData)(IHTMLDOMTextNode2 *This, BSTR bstrstring);HRESULT ( *insertData)(IHTMLDOMTextNode2 *This, int offset, BSTR bstrstring);HRESULT ( *deleteData)(IHTMLDOMTextNode2 *This, int offset, int Count);HRESULT ( *replaceData)(IHTMLDOMTextNode2 *This, int offset, int Count, BSTR bstrstring);};
struct IHTMLEmbedElementVtbl {HRESULT ( *QueryInterface)(IHTMLEmbedElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEmbedElement *This);ULONG ( *Release)(IHTMLEmbedElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLEmbedElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEmbedElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEmbedElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEmbedElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_hidden)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_hidden)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *get_palette)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *get_pluginspage)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_src)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_src)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_units)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_units)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_name)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_width)(IHTMLEmbedElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLEmbedElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLEmbedElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLEmbedElement *This, VARIANT *p);};
struct IHTMLFormElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLFormElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFormElement2 *This);ULONG ( *Release)(IHTMLFormElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFormElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFormElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFormElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFormElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_acceptCharset)(IHTMLFormElement2 *This, BSTR v);HRESULT ( *get_acceptCharset)(IHTMLFormElement2 *This, BSTR *p);HRESULT ( *urns)(IHTMLFormElement2 *This, VARIANT urn, IDispatch **pdisp);};
struct IHTMLFormElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLFormElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFormElement3 *This);ULONG ( *Release)(IHTMLFormElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFormElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFormElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFormElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFormElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *namedItem)(IHTMLFormElement3 *This, BSTR name, IDispatch **pdisp);};
struct IHTMLLabelElementVtbl {HRESULT ( *QueryInterface)(IHTMLLabelElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLabelElement *This);ULONG ( *Release)(IHTMLLabelElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLabelElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLabelElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLabelElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLabelElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_htmlFor)(IHTMLLabelElement *This, BSTR v);HRESULT ( *get_htmlFor)(IHTMLLabelElement *This, BSTR *p);HRESULT ( *put_accessKey)(IHTMLLabelElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLLabelElement *This, BSTR *p);};
struct IHTMLLinkElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLLinkElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLinkElement2 *This);ULONG ( *Release)(IHTMLLinkElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLLinkElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLinkElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLinkElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLinkElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_target)(IHTMLLinkElement2 *This, BSTR v);HRESULT ( *get_target)(IHTMLLinkElement2 *This, BSTR *p);};
struct IHTMLLinkElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLLinkElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLinkElement3 *This);ULONG ( *Release)(IHTMLLinkElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLLinkElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLinkElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLinkElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLinkElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_charset)(IHTMLLinkElement3 *This, BSTR v);HRESULT ( *get_charset)(IHTMLLinkElement3 *This, BSTR *p);HRESULT ( *put_hreflang)(IHTMLLinkElement3 *This, BSTR v);HRESULT ( *get_hreflang)(IHTMLLinkElement3 *This, BSTR *p);};
struct IHTMLListElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLListElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLListElement2 *This);ULONG ( *Release)(IHTMLListElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLListElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLListElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLListElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLListElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLListElement2 *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLListElement2 *This, VARIANT_BOOL *p);};
struct IHTMLMetaElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLMetaElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMetaElement2 *This);ULONG ( *Release)(IHTMLMetaElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLMetaElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMetaElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMetaElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMetaElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_scheme)(IHTMLMetaElement2 *This, BSTR v);HRESULT ( *get_scheme)(IHTMLMetaElement2 *This, BSTR *p);};
struct IHTMLParamElementVtbl {HRESULT ( *QueryInterface)(IHTMLParamElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLParamElement *This);ULONG ( *Release)(IHTMLParamElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLParamElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLParamElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLParamElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLParamElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_name)(IHTMLParamElement *This, BSTR v);HRESULT ( *get_name)(IHTMLParamElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLParamElement *This, BSTR v);HRESULT ( *get_value)(IHTMLParamElement *This, BSTR *p);HRESULT ( *put_type)(IHTMLParamElement *This, BSTR v);HRESULT ( *get_type)(IHTMLParamElement *This, BSTR *p);HRESULT ( *put_valueType)(IHTMLParamElement *This, BSTR v);HRESULT ( *get_valueType)(IHTMLParamElement *This, BSTR *p);};
struct IHTMLTableCaptionVtbl {HRESULT ( *QueryInterface)(IHTMLTableCaption *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCaption *This);ULONG ( *Release)(IHTMLTableCaption *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCaption *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCaption *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCaption *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCaption *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableCaption *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCaption *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCaption *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCaption *This, BSTR *p);};
struct IHTMLTableSectionVtbl {HRESULT ( *QueryInterface)(IHTMLTableSection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableSection *This);ULONG ( *Release)(IHTMLTableSection *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableSection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableSection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableSection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableSection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableSection *This, BSTR v);HRESULT ( *get_align)(IHTMLTableSection *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableSection *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableSection *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableSection *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableSection *This, VARIANT *p);HRESULT ( *get_rows)(IHTMLTableSection *This, IHTMLElementCollection **p);HRESULT ( *insertRow)(IHTMLTableSection *This, int index, IDispatch **row);HRESULT ( *deleteRow)(IHTMLTableSection *This, int index);};
struct IHTMLTitleElementVtbl {HRESULT ( *QueryInterface)(IHTMLTitleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTitleElement *This);ULONG ( *Release)(IHTMLTitleElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTitleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTitleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTitleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTitleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_text)(IHTMLTitleElement *This, BSTR v);HRESULT ( *get_text)(IHTMLTitleElement *This, BSTR *p);};
struct IRTCWatcherEvent2Vtbl {HRESULT ( *QueryInterface)(IRTCWatcherEvent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCWatcherEvent2 *This);ULONG ( *Release)(IRTCWatcherEvent2 *This);HRESULT ( *GetTypeInfoCount)(IRTCWatcherEvent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCWatcherEvent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCWatcherEvent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCWatcherEvent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Watcher)(IRTCWatcherEvent2 *This, IRTCWatcher **ppWatcher);HRESULT ( *get_EventType)(IRTCWatcherEvent2 *This, RTC_WATCHER_EVENT_TYPE *pEventType);HRESULT ( *get_StatusCode)(IRTCWatcherEvent2 *This, int *plStatusCode);};
struct IVBSAXDeclHandlerVtbl {HRESULT ( *QueryInterface)(IVBSAXDeclHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXDeclHandler *This);ULONG ( *Release)(IVBSAXDeclHandler *This);HRESULT ( *GetTypeInfoCount)(IVBSAXDeclHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXDeclHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXDeclHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXDeclHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *elementDecl)(IVBSAXDeclHandler *This, BSTR *strName, BSTR *strModel);HRESULT ( *attributeDecl)(IVBSAXDeclHandler *This, BSTR *strElementName, BSTR *strAttributeName, BSTR *strType, BSTR *strValueDefault, BSTR *strValue);HRESULT ( *internalEntityDecl)(IVBSAXDeclHandler *This, BSTR *strName, BSTR *strValue);HRESULT ( *externalEntityDecl)(IVBSAXDeclHandler *This, BSTR *strName, BSTR *strPublicId, BSTR *strSystemId);};
struct IXMLDOMParseErrorVtbl {HRESULT ( *QueryInterface)(IXMLDOMParseError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMParseError *This);ULONG ( *Release)(IXMLDOMParseError *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMParseError *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMParseError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMParseError *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMParseError *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_errorCode)(IXMLDOMParseError *This, int *errorCode);HRESULT ( *get_url)(IXMLDOMParseError *This, BSTR *urlString);HRESULT ( *get_reason)(IXMLDOMParseError *This, BSTR *reasonString);HRESULT ( *get_srcText)(IXMLDOMParseError *This, BSTR *sourceString);HRESULT ( *get_line)(IXMLDOMParseError *This, int *lineNumber);HRESULT ( *get_linepos)(IXMLDOMParseError *This, int *linePosition);HRESULT ( *get_filepos)(IXMLDOMParseError *This, int *filePosition);};
struct IAMNetworkStatusVtbl {HRESULT ( *QueryInterface)(IAMNetworkStatus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMNetworkStatus *This);ULONG ( *Release)(IAMNetworkStatus *This);HRESULT ( *GetTypeInfoCount)(IAMNetworkStatus *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetworkStatus *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMNetworkStatus *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMNetworkStatus *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ReceivedPackets)(IAMNetworkStatus *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(IAMNetworkStatus *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(IAMNetworkStatus *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(IAMNetworkStatus *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(IAMNetworkStatus *This, int *pBufferingCount);HRESULT ( *get_IsBroadcast)(IAMNetworkStatus *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_BufferingProgress)(IAMNetworkStatus *This, int *pBufferingProgress);};
struct IHTCDescBehaviorVtbl {HRESULT ( *QueryInterface)(IHTCDescBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTCDescBehavior *This);ULONG ( *Release)(IHTCDescBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTCDescBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTCDescBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTCDescBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTCDescBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_urn)(IHTCDescBehavior *This, BSTR *p);HRESULT ( *get_name)(IHTCDescBehavior *This, BSTR *p);};
struct IHTMLAppBehaviorVtbl {HRESULT ( *QueryInterface)(IHTMLAppBehavior *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAppBehavior *This);ULONG ( *Release)(IHTMLAppBehavior *This);HRESULT ( *GetTypeInfoCount)(IHTMLAppBehavior *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAppBehavior *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAppBehavior *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAppBehavior *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_applicationName)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_applicationName)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_version)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_version)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_icon)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_icon)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_singleInstance)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_singleInstance)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_minimizeButton)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_minimizeButton)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_maximizeButton)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_maximizeButton)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_border)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_border)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_borderStyle)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_borderStyle)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_sysMenu)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_sysMenu)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_caption)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_caption)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_windowState)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_windowState)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *put_showInTaskBar)(IHTMLAppBehavior *This, BSTR v);HRESULT ( *get_showInTaskBar)(IHTMLAppBehavior *This, BSTR *p);HRESULT ( *get_commandLine)(IHTMLAppBehavior *This, BSTR *p);};
struct IHTMLBaseElementVtbl {HRESULT ( *QueryInterface)(IHTMLBaseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBaseElement *This);ULONG ( *Release)(IHTMLBaseElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBaseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBaseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBaseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBaseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLBaseElement *This, BSTR v);HRESULT ( *get_href)(IHTMLBaseElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLBaseElement *This, BSTR v);HRESULT ( *get_target)(IHTMLBaseElement *This, BSTR *p);};
struct IHTMLDOMTextNodeVtbl {HRESULT ( *QueryInterface)(IHTMLDOMTextNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMTextNode *This);ULONG ( *Release)(IHTMLDOMTextNode *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMTextNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMTextNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMTextNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMTextNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_data)(IHTMLDOMTextNode *This, BSTR v);HRESULT ( *get_data)(IHTMLDOMTextNode *This, BSTR *p);HRESULT ( *toString)(IHTMLDOMTextNode *This, BSTR *String);HRESULT ( *get_length)(IHTMLDOMTextNode *This, int *p);HRESULT ( *splitText)(IHTMLDOMTextNode *This, int offset, IHTMLDOMNode **pRetNode);};
struct IHTMLDatabindingVtbl {HRESULT ( *QueryInterface)(IHTMLDatabinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDatabinding *This);ULONG ( *Release)(IHTMLDatabinding *This);HRESULT ( *GetTypeInfoCount)(IHTMLDatabinding *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDatabinding *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDatabinding *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDatabinding *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_dataFld)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataFld)(IHTMLDatabinding *This, BSTR *p);HRESULT ( *put_dataSrc)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataSrc)(IHTMLDatabinding *This, BSTR *p);HRESULT ( *put_dataFormatAs)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataFormatAs)(IHTMLDatabinding *This, BSTR *p);};
struct IHTMLDivPositionVtbl {HRESULT ( *QueryInterface)(IHTMLDivPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDivPosition *This);ULONG ( *Release)(IHTMLDivPosition *This);HRESULT ( *GetTypeInfoCount)(IHTMLDivPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDivPosition *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDivPosition *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDivPosition *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLDivPosition *This, BSTR v);HRESULT ( *get_align)(IHTMLDivPosition *This, BSTR *p);};
struct IHTMLFontElementVtbl {HRESULT ( *QueryInterface)(IHTMLFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontElement *This);ULONG ( *Release)(IHTMLFontElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_color)(IHTMLFontElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLFontElement *This, VARIANT *p);HRESULT ( *put_face)(IHTMLFontElement *This, BSTR v);HRESULT ( *get_face)(IHTMLFontElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLFontElement *This, VARIANT v);HRESULT ( *get_size)(IHTMLFontElement *This, VARIANT *p);};
struct IHTMLFormElementVtbl {HRESULT ( *QueryInterface)(IHTMLFormElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFormElement *This);ULONG ( *Release)(IHTMLFormElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFormElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFormElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFormElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFormElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_action)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_action)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_dir)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_dir)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_encoding)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_encoding)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_method)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_method)(IHTMLFormElement *This, BSTR *p);HRESULT ( *get_elements)(IHTMLFormElement *This, IDispatch **p);HRESULT ( *put_target)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_target)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_name)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_onsubmit)(IHTMLFormElement *This, VARIANT v);HRESULT ( *get_onsubmit)(IHTMLFormElement *This, VARIANT *p);HRESULT ( *put_onreset)(IHTMLFormElement *This, VARIANT v);HRESULT ( *get_onreset)(IHTMLFormElement *This, VARIANT *p);HRESULT ( *submit)(IHTMLFormElement *This);HRESULT ( *reset)(IHTMLFormElement *This);HRESULT ( *put_length)(IHTMLFormElement *This, int v);HRESULT ( *get_length)(IHTMLFormElement *This, int *p);HRESULT ( *get__newEnum)(IHTMLFormElement *This, IUnknown **p);HRESULT ( *item)(IHTMLFormElement *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLFormElement *This, VARIANT tagName, IDispatch **pdisp);};
struct IHTMLHeadElementVtbl {HRESULT ( *QueryInterface)(IHTMLHeadElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHeadElement *This);ULONG ( *Release)(IHTMLHeadElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHeadElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHeadElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHeadElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHeadElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_profile)(IHTMLHeadElement *This, BSTR v);HRESULT ( *get_profile)(IHTMLHeadElement *This, BSTR *p);};
struct IHTMLHtmlElementVtbl {HRESULT ( *QueryInterface)(IHTMLHtmlElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHtmlElement *This);ULONG ( *Release)(IHTMLHtmlElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHtmlElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHtmlElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHtmlElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHtmlElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_version)(IHTMLHtmlElement *This, BSTR v);HRESULT ( *get_version)(IHTMLHtmlElement *This, BSTR *p);};
struct IHTMLImgElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLImgElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLImgElement2 *This);ULONG ( *Release)(IHTMLImgElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLImgElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLImgElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLImgElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLImgElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_longDesc)(IHTMLImgElement2 *This, BSTR v);HRESULT ( *get_longDesc)(IHTMLImgElement2 *This, BSTR *p);};
struct IHTMLMetaElementVtbl {HRESULT ( *QueryInterface)(IHTMLMetaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMetaElement *This);ULONG ( *Release)(IHTMLMetaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMetaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMetaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMetaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMetaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_httpEquiv)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_httpEquiv)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_content)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_content)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_name)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_url)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_url)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_charset)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_charset)(IHTMLMetaElement *This, BSTR *p);};
struct IHTMLParaElementVtbl {HRESULT ( *QueryInterface)(IHTMLParaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLParaElement *This);ULONG ( *Release)(IHTMLParaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLParaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLParaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLParaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLParaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLParaElement *This, BSTR v);HRESULT ( *get_align)(IHTMLParaElement *This, BSTR *p);};
struct IHTMLRenderStyleVtbl {HRESULT ( *QueryInterface)(IHTMLRenderStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRenderStyle *This);ULONG ( *Release)(IHTMLRenderStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLRenderStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRenderStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRenderStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRenderStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_textLineThroughStyle)(IHTMLRenderStyle *This, BSTR v);HRESULT ( *get_textLineThroughStyle)(IHTMLRenderStyle *This, BSTR *p);HRESULT ( *put_textUnderlineStyle)(IHTMLRenderStyle *This, BSTR v);HRESULT ( *get_textUnderlineStyle)(IHTMLRenderStyle *This, BSTR *p);HRESULT ( *put_textEffect)(IHTMLRenderStyle *This, BSTR v);HRESULT ( *get_textEffect)(IHTMLRenderStyle *This, BSTR *p);HRESULT ( *put_textColor)(IHTMLRenderStyle *This, VARIANT v);HRESULT ( *get_textColor)(IHTMLRenderStyle *This, VARIANT *p);HRESULT ( *put_textBackgroundColor)(IHTMLRenderStyle *This, VARIANT v);HRESULT ( *get_textBackgroundColor)(IHTMLRenderStyle *This, VARIANT *p);HRESULT ( *put_textDecorationColor)(IHTMLRenderStyle *This, VARIANT v);HRESULT ( *get_textDecorationColor)(IHTMLRenderStyle *This, VARIANT *p);HRESULT ( *put_renderingPriority)(IHTMLRenderStyle *This, int v);HRESULT ( *get_renderingPriority)(IHTMLRenderStyle *This, int *p);HRESULT ( *put_defaultTextSelection)(IHTMLRenderStyle *This, BSTR v);HRESULT ( *get_defaultTextSelection)(IHTMLRenderStyle *This, BSTR *p);HRESULT ( *put_textDecoration)(IHTMLRenderStyle *This, BSTR v);HRESULT ( *get_textDecoration)(IHTMLRenderStyle *This, BSTR *p);};
struct IHTMLStyleSheet2Vtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheet2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheet2 *This);ULONG ( *Release)(IHTMLStyleSheet2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheet2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheet2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheet2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheet2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_pages)(IHTMLStyleSheet2 *This, IHTMLStyleSheetPagesCollection **p);HRESULT ( *addPageRule)(IHTMLStyleSheet2 *This, BSTR bstrSelector, BSTR bstrStyle, int lIndex, int *plNewIndex);};
struct IMediaBindStreamVtbl {HRESULT ( *QueryInterface)(IMediaBindStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaBindStream *This);ULONG ( *Release)(IMediaBindStream *This);HRESULT ( *GetTypeInfoCount)(IMediaBindStream *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaBindStream *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaBindStream *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaBindStream *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *LoadMoniker)(IMediaBindStream *This, BSTR bszTransferContext, BSTR bszUrl);};
struct IRTCProfileEventVtbl {HRESULT ( *QueryInterface)(IRTCProfileEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCProfileEvent *This);ULONG ( *Release)(IRTCProfileEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCProfileEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCProfileEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCProfileEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCProfileEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Profile)(IRTCProfileEvent *This, IRTCProfile **ppProfile);HRESULT ( *get_Cookie)(IRTCProfileEvent *This, LONG_PTR *plCookie);HRESULT ( *get_StatusCode)(IRTCProfileEvent *This, int *plStatusCode);};
struct IVBSAXAttributesVtbl {HRESULT ( *QueryInterface)(IVBSAXAttributes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXAttributes *This);ULONG ( *Release)(IVBSAXAttributes *This);HRESULT ( *GetTypeInfoCount)(IVBSAXAttributes *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXAttributes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXAttributes *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXAttributes *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IVBSAXAttributes *This, int *nLength);HRESULT ( *getURI)(IVBSAXAttributes *This, int nIndex, BSTR *strURI);HRESULT ( *getLocalName)(IVBSAXAttributes *This, int nIndex, BSTR *strLocalName);HRESULT ( *getQName)(IVBSAXAttributes *This, int nIndex, BSTR *strQName);HRESULT ( *getIndexFromName)(IVBSAXAttributes *This, BSTR strURI, BSTR strLocalName, int *nIndex);HRESULT ( *getIndexFromQName)(IVBSAXAttributes *This, BSTR strQName, int *nIndex);HRESULT ( *getType)(IVBSAXAttributes *This, int nIndex, BSTR *strType);HRESULT ( *getTypeFromName)(IVBSAXAttributes *This, BSTR strURI, BSTR strLocalName, BSTR *strType);HRESULT ( *getTypeFromQName)(IVBSAXAttributes *This, BSTR strQName, BSTR *strType);HRESULT ( *getValue)(IVBSAXAttributes *This, int nIndex, BSTR *strValue);HRESULT ( *getValueFromName)(IVBSAXAttributes *This, BSTR strURI, BSTR strLocalName, BSTR *strValue);HRESULT ( *getValueFromQName)(IVBSAXAttributes *This, BSTR strQName, BSTR *strValue);};
struct IVBSAXDTDHandlerVtbl {HRESULT ( *QueryInterface)(IVBSAXDTDHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXDTDHandler *This);ULONG ( *Release)(IVBSAXDTDHandler *This);HRESULT ( *GetTypeInfoCount)(IVBSAXDTDHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXDTDHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXDTDHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXDTDHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *notationDecl)(IVBSAXDTDHandler *This, BSTR *strName, BSTR *strPublicId, BSTR *strSystemId);HRESULT ( *unparsedEntityDecl)(IVBSAXDTDHandler *This, BSTR *strName, BSTR *strPublicId, BSTR *strSystemId, BSTR *strNotationName);};
struct IXMLDOMSelectionVtbl {HRESULT ( *QueryInterface)(IXMLDOMSelection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMSelection *This);ULONG ( *Release)(IXMLDOMSelection *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMSelection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMSelection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMSelection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMSelection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_item)(IXMLDOMSelection *This, int index, IXMLDOMNode **listItem);HRESULT ( *get_length)(IXMLDOMSelection *This, int *listLength);HRESULT ( *nextNode)(IXMLDOMSelection *This, IXMLDOMNode **nextItem);HRESULT ( *reset)(IXMLDOMSelection *This);HRESULT ( *get__newEnum)(IXMLDOMSelection *This, IUnknown **ppUnk);HRESULT ( *get_expr)(IXMLDOMSelection *This, BSTR *expression);HRESULT ( *put_expr)(IXMLDOMSelection *This, BSTR expression);HRESULT ( *get_context)(IXMLDOMSelection *This, IXMLDOMNode **ppNode);HRESULT ( *putref_context)(IXMLDOMSelection *This, IXMLDOMNode *pNode);HRESULT ( *peekNode)(IXMLDOMSelection *This, IXMLDOMNode **ppNode);HRESULT ( *matches)(IXMLDOMSelection *This, IXMLDOMNode *pNode, IXMLDOMNode **ppNode);HRESULT ( *removeNext)(IXMLDOMSelection *This, IXMLDOMNode **ppNode);HRESULT ( *removeAll)(IXMLDOMSelection *This);HRESULT ( *clone)(IXMLDOMSelection *This, IXMLDOMSelection **ppNode);HRESULT ( *getProperty)(IXMLDOMSelection *This, BSTR name, VARIANT *value);HRESULT ( *setProperty)(IXMLDOMSelection *This, BSTR name, VARIANT value);};
struct IAMMediaContentVtbl {HRESULT ( *QueryInterface)(IAMMediaContent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaContent *This);ULONG ( *Release)(IAMMediaContent *This);HRESULT ( *GetTypeInfoCount)(IAMMediaContent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMMediaContent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMMediaContent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMMediaContent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AuthorName)(IAMMediaContent *This, BSTR *pbstrAuthorName);HRESULT ( *get_Title)(IAMMediaContent *This, BSTR *pbstrTitle);HRESULT ( *get_Rating)(IAMMediaContent *This, BSTR *pbstrRating);HRESULT ( *get_Description)(IAMMediaContent *This, BSTR *pbstrDescription);HRESULT ( *get_Copyright)(IAMMediaContent *This, BSTR *pbstrCopyright);HRESULT ( *get_BaseURL)(IAMMediaContent *This, BSTR *pbstrBaseURL);HRESULT ( *get_LogoURL)(IAMMediaContent *This, BSTR *pbstrLogoURL);HRESULT ( *get_LogoIconURL)(IAMMediaContent *This, BSTR *pbstrLogoURL);HRESULT ( *get_WatermarkURL)(IAMMediaContent *This, BSTR *pbstrWatermarkURL);HRESULT ( *get_MoreInfoURL)(IAMMediaContent *This, BSTR *pbstrMoreInfoURL);HRESULT ( *get_MoreInfoBannerImage)(IAMMediaContent *This, BSTR *pbstrMoreInfoBannerImage);HRESULT ( *get_MoreInfoBannerURL)(IAMMediaContent *This, BSTR *pbstrMoreInfoBannerURL);HRESULT ( *get_MoreInfoText)(IAMMediaContent *This, BSTR *pbstrMoreInfoText);};
struct IHTMLFrameBase3Vtbl {HRESULT ( *QueryInterface)(IHTMLFrameBase3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameBase3 *This);ULONG ( *Release)(IHTMLFrameBase3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameBase3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameBase3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameBase3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameBase3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_longDesc)(IHTMLFrameBase3 *This, BSTR v);HRESULT ( *get_longDesc)(IHTMLFrameBase3 *This, BSTR *p);};
struct IHTMLMapElementVtbl {HRESULT ( *QueryInterface)(IHTMLMapElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMapElement *This);ULONG ( *Release)(IHTMLMapElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMapElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMapElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMapElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMapElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_areas)(IHTMLMapElement *This, IHTMLAreasCollection **p);HRESULT ( *put_name)(IHTMLMapElement *This, BSTR v);HRESULT ( *get_name)(IHTMLMapElement *This, BSTR *p);};
struct IHTMLRuleStyle2Vtbl {HRESULT ( *QueryInterface)(IHTMLRuleStyle2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRuleStyle2 *This);ULONG ( *Release)(IHTMLRuleStyle2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLRuleStyle2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRuleStyle2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRuleStyle2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRuleStyle2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_tableLayout)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_tableLayout)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_borderCollapse)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_borderCollapse)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_direction)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_direction)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_behavior)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_behavior)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_position)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_position)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_unicodeBidi)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_unicodeBidi)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_bottom)(IHTMLRuleStyle2 *This, VARIANT v);HRESULT ( *get_bottom)(IHTMLRuleStyle2 *This, VARIANT *p);HRESULT ( *put_right)(IHTMLRuleStyle2 *This, VARIANT v);HRESULT ( *get_right)(IHTMLRuleStyle2 *This, VARIANT *p);HRESULT ( *put_pixelBottom)(IHTMLRuleStyle2 *This, int v);HRESULT ( *get_pixelBottom)(IHTMLRuleStyle2 *This, int *p);HRESULT ( *put_pixelRight)(IHTMLRuleStyle2 *This, int v);HRESULT ( *get_pixelRight)(IHTMLRuleStyle2 *This, int *p);HRESULT ( *put_posBottom)(IHTMLRuleStyle2 *This, float v);HRESULT ( *get_posBottom)(IHTMLRuleStyle2 *This, float *p);HRESULT ( *put_posRight)(IHTMLRuleStyle2 *This, float v);HRESULT ( *get_posRight)(IHTMLRuleStyle2 *This, float *p);HRESULT ( *put_imeMode)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_imeMode)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_rubyAlign)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_rubyAlign)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_rubyPosition)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_rubyPosition)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_rubyOverhang)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_rubyOverhang)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_layoutGridChar)(IHTMLRuleStyle2 *This, VARIANT v);HRESULT ( *get_layoutGridChar)(IHTMLRuleStyle2 *This, VARIANT *p);HRESULT ( *put_layoutGridLine)(IHTMLRuleStyle2 *This, VARIANT v);HRESULT ( *get_layoutGridLine)(IHTMLRuleStyle2 *This, VARIANT *p);HRESULT ( *put_layoutGridMode)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_layoutGridMode)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_layoutGridType)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_layoutGridType)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_layoutGrid)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_layoutGrid)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_textAutospace)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_textAutospace)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_wordBreak)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_wordBreak)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_lineBreak)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_lineBreak)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_textJustify)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_textJustify)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_textJustifyTrim)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_textJustifyTrim)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_textKashida)(IHTMLRuleStyle2 *This, VARIANT v);HRESULT ( *get_textKashida)(IHTMLRuleStyle2 *This, VARIANT *p);HRESULT ( *put_overflowX)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_overflowX)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_overflowY)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_overflowY)(IHTMLRuleStyle2 *This, BSTR *p);HRESULT ( *put_accelerator)(IHTMLRuleStyle2 *This, BSTR v);HRESULT ( *get_accelerator)(IHTMLRuleStyle2 *This, BSTR *p);};
struct IHTMLRuleStyle3Vtbl {HRESULT ( *QueryInterface)(IHTMLRuleStyle3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRuleStyle3 *This);ULONG ( *Release)(IHTMLRuleStyle3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLRuleStyle3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRuleStyle3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRuleStyle3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRuleStyle3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_layoutFlow)(IHTMLRuleStyle3 *This, BSTR v);HRESULT ( *get_layoutFlow)(IHTMLRuleStyle3 *This, BSTR *p);HRESULT ( *put_zoom)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_zoom)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_wordWrap)(IHTMLRuleStyle3 *This, BSTR v);HRESULT ( *get_wordWrap)(IHTMLRuleStyle3 *This, BSTR *p);HRESULT ( *put_textUnderlinePosition)(IHTMLRuleStyle3 *This, BSTR v);HRESULT ( *get_textUnderlinePosition)(IHTMLRuleStyle3 *This, BSTR *p);HRESULT ( *put_scrollbarBaseColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarBaseColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarFaceColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarFaceColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbar3dLightColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbar3dLightColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarShadowColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarShadowColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarHighlightColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarHighlightColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarDarkShadowColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarDarkShadowColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarArrowColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarArrowColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarTrackColor)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarTrackColor)(IHTMLRuleStyle3 *This, VARIANT *p);HRESULT ( *put_writingMode)(IHTMLRuleStyle3 *This, BSTR v);HRESULT ( *get_writingMode)(IHTMLRuleStyle3 *This, BSTR *p);HRESULT ( *put_textAlignLast)(IHTMLRuleStyle3 *This, BSTR v);HRESULT ( *get_textAlignLast)(IHTMLRuleStyle3 *This, BSTR *p);HRESULT ( *put_textKashidaSpace)(IHTMLRuleStyle3 *This, VARIANT v);HRESULT ( *get_textKashidaSpace)(IHTMLRuleStyle3 *This, VARIANT *p);};
struct IHTMLRuleStyle4Vtbl {HRESULT ( *QueryInterface)(IHTMLRuleStyle4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRuleStyle4 *This);ULONG ( *Release)(IHTMLRuleStyle4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLRuleStyle4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRuleStyle4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRuleStyle4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRuleStyle4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_textOverflow)(IHTMLRuleStyle4 *This, BSTR v);HRESULT ( *get_textOverflow)(IHTMLRuleStyle4 *This, BSTR *p);HRESULT ( *put_minHeight)(IHTMLRuleStyle4 *This, VARIANT v);HRESULT ( *get_minHeight)(IHTMLRuleStyle4 *This, VARIANT *p);};
struct IHTMLSubmitDataVtbl {HRESULT ( *QueryInterface)(IHTMLSubmitData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSubmitData *This);ULONG ( *Release)(IHTMLSubmitData *This);HRESULT ( *GetTypeInfoCount)(IHTMLSubmitData *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSubmitData *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSubmitData *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSubmitData *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *appendNameValuePair)(IHTMLSubmitData *This, BSTR name, BSTR value);HRESULT ( *appendNameFilePair)(IHTMLSubmitData *This, BSTR name, BSTR filename);HRESULT ( *appendItemSeparator)(IHTMLSubmitData *This);};
struct IHTMLTableCell2Vtbl {HRESULT ( *QueryInterface)(IHTMLTableCell2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCell2 *This);ULONG ( *Release)(IHTMLTableCell2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCell2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCell2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCell2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCell2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_abbr)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_abbr)(IHTMLTableCell2 *This, BSTR *p);HRESULT ( *put_axis)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_axis)(IHTMLTableCell2 *This, BSTR *p);HRESULT ( *put_ch)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_ch)(IHTMLTableCell2 *This, BSTR *p);HRESULT ( *put_chOff)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_chOff)(IHTMLTableCell2 *This, BSTR *p);HRESULT ( *put_headers)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_headers)(IHTMLTableCell2 *This, BSTR *p);HRESULT ( *put_scope)(IHTMLTableCell2 *This, BSTR v);HRESULT ( *get_scope)(IHTMLTableCell2 *This, BSTR *p);};
struct IHTMLUniqueNameVtbl {HRESULT ( *QueryInterface)(IHTMLUniqueName *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUniqueName *This);ULONG ( *Release)(IHTMLUniqueName *This);HRESULT ( *GetTypeInfoCount)(IHTMLUniqueName *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUniqueName *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUniqueName *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUniqueName *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_uniqueNumber)(IHTMLUniqueName *This, int *p);HRESULT ( *get_uniqueID)(IHTMLUniqueName *This, BSTR *p);};
struct IHTMLUserDataOMVtbl {HRESULT ( *QueryInterface)(IHTMLUserDataOM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUserDataOM *This);ULONG ( *Release)(IHTMLUserDataOM *This);HRESULT ( *GetTypeInfoCount)(IHTMLUserDataOM *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUserDataOM *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUserDataOM *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUserDataOM *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_XMLDocument)(IHTMLUserDataOM *This, IDispatch **p);HRESULT ( *save)(IHTMLUserDataOM *This, BSTR strName);HRESULT ( *load)(IHTMLUserDataOM *This, BSTR strName);HRESULT ( *getAttribute)(IHTMLUserDataOM *This, BSTR name, VARIANT *pValue);HRESULT ( *setAttribute)(IHTMLUserDataOM *This, BSTR name, VARIANT value);HRESULT ( *removeAttribute)(IHTMLUserDataOM *This, BSTR name);HRESULT ( *put_expires)(IHTMLUserDataOM *This, BSTR bstr);HRESULT ( *get_expires)(IHTMLUserDataOM *This, BSTR *pbstr);};
struct IRTCClientEventVtbl {HRESULT ( *QueryInterface)(IRTCClientEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCClientEvent *This);ULONG ( *Release)(IRTCClientEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCClientEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCClientEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCClientEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCClientEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_EventType)(IRTCClientEvent *This, RTC_CLIENT_EVENT_TYPE *penEventType);HRESULT ( *get_Client)(IRTCClientEvent *This, IRTCClient **ppClient);};
struct IShellDispatch2Vtbl {HRESULT ( *QueryInterface)(IShellDispatch2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch2 *This);ULONG ( *Release)(IShellDispatch2 *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch2 *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch2 *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch2 *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch2 *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch2 *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch2 *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch2 *This);HRESULT ( *FileRun)(IShellDispatch2 *This);HRESULT ( *CascadeWindows)(IShellDispatch2 *This);HRESULT ( *TileVertically)(IShellDispatch2 *This);HRESULT ( *TileHorizontally)(IShellDispatch2 *This);HRESULT ( *ShutdownWindows)(IShellDispatch2 *This);HRESULT ( *Suspend)(IShellDispatch2 *This);HRESULT ( *EjectPC)(IShellDispatch2 *This);HRESULT ( *SetTime)(IShellDispatch2 *This);HRESULT ( *TrayProperties)(IShellDispatch2 *This);HRESULT ( *Help)(IShellDispatch2 *This);HRESULT ( *FindFiles)(IShellDispatch2 *This);HRESULT ( *FindComputer)(IShellDispatch2 *This);HRESULT ( *RefreshMenu)(IShellDispatch2 *This);HRESULT ( *ControlPanelItem)(IShellDispatch2 *This, BSTR szDir);HRESULT ( *IsRestricted)(IShellDispatch2 *This, BSTR Group, BSTR Restriction, int *plRestrictValue);HRESULT ( *ShellExecute)(IShellDispatch2 *This, BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);HRESULT ( *FindPrinter)(IShellDispatch2 *This, BSTR name, BSTR location, BSTR model);HRESULT ( *GetSystemInformation)(IShellDispatch2 *This, BSTR name, VARIANT *pv);HRESULT ( *ServiceStart)(IShellDispatch2 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *ServiceStop)(IShellDispatch2 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *IsServiceRunning)(IShellDispatch2 *This, BSTR ServiceName, VARIANT *pRunning);HRESULT ( *CanStartStopService)(IShellDispatch2 *This, BSTR ServiceName, VARIANT *pCanStartStop);HRESULT ( *ShowBrowserBar)(IShellDispatch2 *This, BSTR bstrClsid, VARIANT bShow, VARIANT *pSuccess);};
struct IShellDispatch3Vtbl {HRESULT ( *QueryInterface)(IShellDispatch3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch3 *This);ULONG ( *Release)(IShellDispatch3 *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch3 *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch3 *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch3 *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch3 *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch3 *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch3 *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch3 *This);HRESULT ( *FileRun)(IShellDispatch3 *This);HRESULT ( *CascadeWindows)(IShellDispatch3 *This);HRESULT ( *TileVertically)(IShellDispatch3 *This);HRESULT ( *TileHorizontally)(IShellDispatch3 *This);HRESULT ( *ShutdownWindows)(IShellDispatch3 *This);HRESULT ( *Suspend)(IShellDispatch3 *This);HRESULT ( *EjectPC)(IShellDispatch3 *This);HRESULT ( *SetTime)(IShellDispatch3 *This);HRESULT ( *TrayProperties)(IShellDispatch3 *This);HRESULT ( *Help)(IShellDispatch3 *This);HRESULT ( *FindFiles)(IShellDispatch3 *This);HRESULT ( *FindComputer)(IShellDispatch3 *This);HRESULT ( *RefreshMenu)(IShellDispatch3 *This);HRESULT ( *ControlPanelItem)(IShellDispatch3 *This, BSTR szDir);HRESULT ( *IsRestricted)(IShellDispatch3 *This, BSTR Group, BSTR Restriction, int *plRestrictValue);HRESULT ( *ShellExecute)(IShellDispatch3 *This, BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);HRESULT ( *FindPrinter)(IShellDispatch3 *This, BSTR name, BSTR location, BSTR model);HRESULT ( *GetSystemInformation)(IShellDispatch3 *This, BSTR name, VARIANT *pv);HRESULT ( *ServiceStart)(IShellDispatch3 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *ServiceStop)(IShellDispatch3 *This, BSTR ServiceName, VARIANT Persistent, VARIANT *pSuccess);HRESULT ( *IsServiceRunning)(IShellDispatch3 *This, BSTR ServiceName, VARIANT *pRunning);HRESULT ( *CanStartStopService)(IShellDispatch3 *This, BSTR ServiceName, VARIANT *pCanStartStop);HRESULT ( *ShowBrowserBar)(IShellDispatch3 *This, BSTR bstrClsid, VARIANT bShow, VARIANT *pSuccess);HRESULT ( *AddToRecent)(IShellDispatch3 *This, VARIANT varFile, BSTR bstrCategory);};
struct IShellLinkDual2Vtbl {HRESULT ( *QueryInterface)(IShellLinkDual2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkDual2 *This);ULONG ( *Release)(IShellLinkDual2 *This);HRESULT ( *GetTypeInfoCount)(IShellLinkDual2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellLinkDual2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellLinkDual2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellLinkDual2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Path)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Description)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Description)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_WorkingDirectory)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_WorkingDirectory)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Arguments)(IShellLinkDual2 *This, BSTR *pbs);HRESULT ( *put_Arguments)(IShellLinkDual2 *This, BSTR bs);HRESULT ( *get_Hotkey)(IShellLinkDual2 *This, int *piHK);HRESULT ( *put_Hotkey)(IShellLinkDual2 *This, int iHK);HRESULT ( *get_ShowCommand)(IShellLinkDual2 *This, int *piShowCommand);HRESULT ( *put_ShowCommand)(IShellLinkDual2 *This, int iShowCommand);HRESULT ( *Resolve)(IShellLinkDual2 *This, int fFlags);HRESULT ( *GetIconLocation)(IShellLinkDual2 *This, BSTR *pbs, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkDual2 *This, BSTR bs, int iIcon);HRESULT ( *Save)(IShellLinkDual2 *This, VARIANT vWhere);HRESULT ( *get_Target)(IShellLinkDual2 *This, FolderItem **ppfi);};
struct ISoapSerializerVtbl {HRESULT ( *QueryInterface)(ISoapSerializer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapSerializer *This);ULONG ( *Release)(ISoapSerializer *This);HRESULT ( *GetTypeInfoCount)(ISoapSerializer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapSerializer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapSerializer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapSerializer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Init)(ISoapSerializer *This, VARIANT vDestination);HRESULT ( *startEnvelope)(ISoapSerializer *This, BSTR env_Prefix, BSTR enc_style_uri, BSTR xml_encoding);HRESULT ( *endEnvelope)(ISoapSerializer *This);HRESULT ( *startHeader)(ISoapSerializer *This, BSTR enc_style_uri);HRESULT ( *startHeaderElement)(ISoapSerializer *This, BSTR name, BSTR ns_uri, int mustUnderstand, BSTR actor_uri, BSTR enc_style_uri, BSTR prefix);HRESULT ( *endHeaderElement)(ISoapSerializer *This);HRESULT ( *endHeader)(ISoapSerializer *This);HRESULT ( *startBody)(ISoapSerializer *This, BSTR enc_style_uri);HRESULT ( *endBody)(ISoapSerializer *This);HRESULT ( *startElement)(ISoapSerializer *This, BSTR name, BSTR ns_uri, BSTR enc_style_uri, BSTR prefix);HRESULT ( *endElement)(ISoapSerializer *This);HRESULT ( *SoapAttribute)(ISoapSerializer *This, BSTR name, BSTR ns_uri, BSTR value, BSTR prefix);HRESULT ( *SoapNamespace)(ISoapSerializer *This, BSTR prefix, BSTR ns_uri);HRESULT ( *SoapDefaultNamespace)(ISoapSerializer *This, BSTR ns_uri);HRESULT ( *writeString)(ISoapSerializer *This, BSTR string);HRESULT ( *writeBuffer)(ISoapSerializer *This, int len, char *buffer);HRESULT ( *startFault)(ISoapSerializer *This, BSTR faultcode, BSTR faultstring, BSTR faultactor, BSTR faultcodeNS);HRESULT ( *startFaultDetail)(ISoapSerializer *This, BSTR enc_style_uri);HRESULT ( *endFaultDetail)(ISoapSerializer *This);HRESULT ( *endFault)(ISoapSerializer *This);HRESULT ( *reset)(ISoapSerializer *This);HRESULT ( *writeXML)(ISoapSerializer *This, BSTR string);HRESULT ( *getPrefixForNamespace)(ISoapSerializer *This, BSTR ns_string, BSTR *ns_prefix);HRESULT ( *get_EncodingStream)(ISoapSerializer *This, IUnknown **ppIEncodingStream);};
struct IXMLHTTPRequestVtbl {HRESULT ( *QueryInterface)(IXMLHTTPRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLHTTPRequest *This);ULONG ( *Release)(IXMLHTTPRequest *This);HRESULT ( *GetTypeInfoCount)(IXMLHTTPRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLHTTPRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLHTTPRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLHTTPRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *open)(IXMLHTTPRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);HRESULT ( *setRequestHeader)(IXMLHTTPRequest *This, BSTR bstrHeader, BSTR bstrValue);HRESULT ( *getResponseHeader)(IXMLHTTPRequest *This, BSTR bstrHeader, BSTR *pbstrValue);HRESULT ( *getAllResponseHeaders)(IXMLHTTPRequest *This, BSTR *pbstrHeaders);HRESULT ( *send)(IXMLHTTPRequest *This, VARIANT varBody);HRESULT ( *abort)(IXMLHTTPRequest *This);HRESULT ( *get_status)(IXMLHTTPRequest *This, int *plStatus);HRESULT ( *get_statusText)(IXMLHTTPRequest *This, BSTR *pbstrStatus);HRESULT ( *get_responseXML)(IXMLHTTPRequest *This, IDispatch **ppBody);HRESULT ( *get_responseText)(IXMLHTTPRequest *This, BSTR *pbstrBody);HRESULT ( *get_responseBody)(IXMLHTTPRequest *This, VARIANT *pvarBody);HRESULT ( *get_responseStream)(IXMLHTTPRequest *This, VARIANT *pvarBody);HRESULT ( *get_readyState)(IXMLHTTPRequest *This, int *plState);HRESULT ( *put_onreadystatechange)(IXMLHTTPRequest *This, IDispatch *pReadyStateSink);};
struct FolderItemVerbVtbl {HRESULT ( *QueryInterface)(FolderItemVerb *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerb *This);ULONG ( *Release)(FolderItemVerb *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerb *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerb *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerb *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerb *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItemVerb *This, BSTR *pbs);HRESULT ( *DoIt)(FolderItemVerb *This);};
struct IAMChannelInfoVtbl {HRESULT ( *QueryInterface)(IAMChannelInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMChannelInfo *This);ULONG ( *Release)(IAMChannelInfo *This);HRESULT ( *GetTypeInfoCount)(IAMChannelInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMChannelInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMChannelInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMChannelInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ChannelName)(IAMChannelInfo *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(IAMChannelInfo *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(IAMChannelInfo *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(IAMChannelInfo *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(IAMChannelInfo *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(IAMChannelInfo *This, BSTR *pbstrContactEmail);};
struct IDirectControlVtbl {HRESULT ( *QueryInterface)(IDirectControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectControl *This);ULONG ( *Release)(IDirectControl *This);HRESULT ( *GetTypeInfoCount)(IDirectControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDirectControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDirectControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDirectControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreateView)(IDirectControl *This, BSTR bszClsid);HRESULT ( *DestroyAllViews)(IDirectControl *This);};
struct IHTMLBRElementVtbl {HRESULT ( *QueryInterface)(IHTMLBRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBRElement *This);ULONG ( *Release)(IHTMLBRElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_clear)(IHTMLBRElement *This, BSTR v);HRESULT ( *get_clear)(IHTMLBRElement *This, BSTR *p);};
struct IHTMLDDElementVtbl {HRESULT ( *QueryInterface)(IHTMLDDElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDDElement *This);ULONG ( *Release)(IHTMLDDElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDDElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDDElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDDElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDDElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_noWrap)(IHTMLDDElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDDElement *This, VARIANT_BOOL *p);};
struct IHTMLDTElementVtbl {HRESULT ( *QueryInterface)(IHTMLDTElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDTElement *This);ULONG ( *Release)(IHTMLDTElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDTElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDTElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDTElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDTElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_noWrap)(IHTMLDTElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDTElement *This, VARIANT_BOOL *p);};
struct IHTMLDocument5Vtbl {HRESULT ( *QueryInterface)(IHTMLDocument5 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument5 *This);ULONG ( *Release)(IHTMLDocument5 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument5 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument5 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument5 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument5 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_onmousewheel)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onmousewheel)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *get_doctype)(IHTMLDocument5 *This, IHTMLDOMNode **p);HRESULT ( *get_implementation)(IHTMLDocument5 *This, IHTMLDOMImplementation **p);HRESULT ( *createAttribute)(IHTMLDocument5 *This, BSTR bstrattrName, IHTMLDOMAttribute **ppattribute);HRESULT ( *createComment)(IHTMLDocument5 *This, BSTR bstrdata, IHTMLDOMNode **ppRetNode);HRESULT ( *put_onfocusin)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onfocusin)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *put_onfocusout)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onfocusout)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *put_onactivate)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onactivate)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *put_ondeactivate)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_ondeactivate)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *put_onbeforeactivate)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onbeforeactivate)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *put_onbeforedeactivate)(IHTMLDocument5 *This, VARIANT v);HRESULT ( *get_onbeforedeactivate)(IHTMLDocument5 *This, VARIANT *p);HRESULT ( *get_compatMode)(IHTMLDocument5 *This, BSTR *p);};
struct IHTMLLIElementVtbl {HRESULT ( *QueryInterface)(IHTMLLIElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLIElement *This);ULONG ( *Release)(IHTMLLIElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLIElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLIElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLIElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLIElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_type)(IHTMLLIElement *This, BSTR v);HRESULT ( *get_type)(IHTMLLIElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLLIElement *This, int v);HRESULT ( *get_value)(IHTMLLIElement *This, int *p);};
struct IHTMLTableCol2Vtbl {HRESULT ( *QueryInterface)(IHTMLTableCol2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCol2 *This);ULONG ( *Release)(IHTMLTableCol2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCol2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCol2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCol2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCol2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_ch)(IHTMLTableCol2 *This, BSTR v);HRESULT ( *get_ch)(IHTMLTableCol2 *This, BSTR *p);HRESULT ( *put_chOff)(IHTMLTableCol2 *This, BSTR v);HRESULT ( *get_chOff)(IHTMLTableCol2 *This, BSTR *p);};
struct IHTMLTableRow3Vtbl {HRESULT ( *QueryInterface)(IHTMLTableRow3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRow3 *This);ULONG ( *Release)(IHTMLTableRow3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRow3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRow3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRow3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRow3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_ch)(IHTMLTableRow3 *This, BSTR v);HRESULT ( *get_ch)(IHTMLTableRow3 *This, BSTR *p);HRESULT ( *put_chOff)(IHTMLTableRow3 *This, BSTR v);HRESULT ( *get_chOff)(IHTMLTableRow3 *This, BSTR *p);};
struct IHeaderHandlerVtbl {HRESULT ( *QueryInterface)(IHeaderHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHeaderHandler *This);ULONG ( *Release)(IHeaderHandler *This);HRESULT ( *GetTypeInfoCount)(IHeaderHandler *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHeaderHandler *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHeaderHandler *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHeaderHandler *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *willWriteHeaders)(IHeaderHandler *This, VARIANT_BOOL *pbWillWriteHeaders);HRESULT ( *writeHeaders)(IHeaderHandler *This, ISoapSerializer *pSerializer, IDispatch *pObject);HRESULT ( *readHeader)(IHeaderHandler *This, IXMLDOMNode *pHeaderNode, IDispatch *pObject, VARIANT_BOOL *pUnderstood);};
struct IMediaTypeInfoVtbl {HRESULT ( *QueryInterface)(IMediaTypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaTypeInfo *This);ULONG ( *Release)(IMediaTypeInfo *This);HRESULT ( *GetTypeInfoCount)(IMediaTypeInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaTypeInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaTypeInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaTypeInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Type)(IMediaTypeInfo *This, BSTR *strType);HRESULT ( *get_Subtype)(IMediaTypeInfo *This, BSTR *strType);};
struct IRegFilterInfoVtbl {HRESULT ( *QueryInterface)(IRegFilterInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRegFilterInfo *This);ULONG ( *Release)(IRegFilterInfo *This);HRESULT ( *GetTypeInfoCount)(IRegFilterInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRegFilterInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRegFilterInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRegFilterInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IRegFilterInfo *This, BSTR *strName);HRESULT ( *Filter)(IRegFilterInfo *This, IDispatch **ppUnk);};
struct IShellDispatchVtbl {HRESULT ( *QueryInterface)(IShellDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch *This);ULONG ( *Release)(IShellDispatch *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch *This);HRESULT ( *FileRun)(IShellDispatch *This);HRESULT ( *CascadeWindows)(IShellDispatch *This);HRESULT ( *TileVertically)(IShellDispatch *This);HRESULT ( *TileHorizontally)(IShellDispatch *This);HRESULT ( *ShutdownWindows)(IShellDispatch *This);HRESULT ( *Suspend)(IShellDispatch *This);HRESULT ( *EjectPC)(IShellDispatch *This);HRESULT ( *SetTime)(IShellDispatch *This);HRESULT ( *TrayProperties)(IShellDispatch *This);HRESULT ( *Help)(IShellDispatch *This);HRESULT ( *FindFiles)(IShellDispatch *This);HRESULT ( *FindComputer)(IShellDispatch *This);HRESULT ( *RefreshMenu)(IShellDispatch *This);HRESULT ( *ControlPanelItem)(IShellDispatch *This, BSTR szDir);};
struct IShellLinkDualVtbl {HRESULT ( *QueryInterface)(IShellLinkDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkDual *This);ULONG ( *Release)(IShellLinkDual *This);HRESULT ( *GetTypeInfoCount)(IShellLinkDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellLinkDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellLinkDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellLinkDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Path)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Description)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Description)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_WorkingDirectory)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_WorkingDirectory)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Arguments)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Arguments)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Hotkey)(IShellLinkDual *This, int *piHK);HRESULT ( *put_Hotkey)(IShellLinkDual *This, int iHK);HRESULT ( *get_ShowCommand)(IShellLinkDual *This, int *piShowCommand);HRESULT ( *put_ShowCommand)(IShellLinkDual *This, int iShowCommand);HRESULT ( *Resolve)(IShellLinkDual *This, int fFlags);HRESULT ( *GetIconLocation)(IShellLinkDual *This, BSTR *pbs, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkDual *This, BSTR bs, int iIcon);HRESULT ( *Save)(IShellLinkDual *This, VARIANT vWhere);};
struct ISoapConnectorVtbl {HRESULT ( *QueryInterface)(ISoapConnector *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapConnector *This);ULONG ( *Release)(ISoapConnector *This);HRESULT ( *GetTypeInfoCount)(ISoapConnector *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapConnector *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapConnector *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapConnector *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_InputStream)(ISoapConnector *This, IStream **pVal);HRESULT ( *get_OutputStream)(ISoapConnector *This, IStream **pVal);HRESULT ( *get_Property)(ISoapConnector *This, BSTR pPropertyName, VARIANT *pPropertyValue);HRESULT ( *put_Property)(ISoapConnector *This, BSTR pPropertyName, VARIANT PropertyValue);HRESULT ( *ConnectWSDL)(ISoapConnector *This, IWSDLPort *pPort);HRESULT ( *Reset)(ISoapConnector *This);HRESULT ( *BeginMessageWSDL)(ISoapConnector *This, IWSDLOperation *pOperation);HRESULT ( *EndMessage)(ISoapConnector *This);HRESULT ( *Connect)(ISoapConnector *This);HRESULT ( *BeginMessage)(ISoapConnector *This);};
struct IAMCollectionVtbl {HRESULT ( *QueryInterface)(IAMCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCollection *This);ULONG ( *Release)(IAMCollection *This);HRESULT ( *GetTypeInfoCount)(IAMCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IAMCollection *This, LONG *plCount);HRESULT ( *Item)(IAMCollection *This, int lItem, IUnknown **ppUnk);HRESULT ( *get__NewEnum)(IAMCollection *This, IUnknown **ppUnk);};
struct IBlockFormatsVtbl {HRESULT ( *QueryInterface)(IBlockFormats *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBlockFormats *This);ULONG ( *Release)(IBlockFormats *This);HRESULT ( *GetTypeInfoCount)(IBlockFormats *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBlockFormats *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IBlockFormats *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IBlockFormats *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(IBlockFormats *This, IUnknown **p);HRESULT ( *get_Count)(IBlockFormats *This, int *p);HRESULT ( *Item)(IBlockFormats *This, VARIANT *pvarIndex, BSTR *pbstrBlockFormat);};
struct IHTMLElement4Vtbl {HRESULT ( *QueryInterface)(IHTMLElement4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElement4 *This);ULONG ( *Release)(IHTMLElement4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLElement4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElement4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElement4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElement4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_onmousewheel)(IHTMLElement4 *This, VARIANT v);HRESULT ( *get_onmousewheel)(IHTMLElement4 *This, VARIANT *p);HRESULT ( *normalize)(IHTMLElement4 *This);HRESULT ( *getAttributeNode)(IHTMLElement4 *This, BSTR bstrname, IHTMLDOMAttribute **ppAttribute);HRESULT ( *setAttributeNode)(IHTMLElement4 *This, IHTMLDOMAttribute *pattr, IHTMLDOMAttribute **ppretAttribute);HRESULT ( *removeAttributeNode)(IHTMLElement4 *This, IHTMLDOMAttribute *pattr, IHTMLDOMAttribute **ppretAttribute);HRESULT ( *put_onbeforeactivate)(IHTMLElement4 *This, VARIANT v);HRESULT ( *get_onbeforeactivate)(IHTMLElement4 *This, VARIANT *p);HRESULT ( *put_onfocusin)(IHTMLElement4 *This, VARIANT v);HRESULT ( *get_onfocusin)(IHTMLElement4 *This, VARIANT *p);HRESULT ( *put_onfocusout)(IHTMLElement4 *This, VARIANT v);HRESULT ( *get_onfocusout)(IHTMLElement4 *This, VARIANT *p);};
struct IHTMLSpanFlowVtbl {HRESULT ( *QueryInterface)(IHTMLSpanFlow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSpanFlow *This);ULONG ( *Release)(IHTMLSpanFlow *This);HRESULT ( *GetTypeInfoCount)(IHTMLSpanFlow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSpanFlow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSpanFlow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSpanFlow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLSpanFlow *This, BSTR v);HRESULT ( *get_align)(IHTMLSpanFlow *This, BSTR *p);};
struct IHTMLTableColVtbl {HRESULT ( *QueryInterface)(IHTMLTableCol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCol *This);ULONG ( *Release)(IHTMLTableCol *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCol *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCol *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCol *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCol *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_span)(IHTMLTableCol *This, int v);HRESULT ( *get_span)(IHTMLTableCol *This, int *p);HRESULT ( *put_width)(IHTMLTableCol *This, VARIANT v);HRESULT ( *get_width)(IHTMLTableCol *This, VARIANT *p);HRESULT ( *put_align)(IHTMLTableCol *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCol *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCol *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCol *This, BSTR *p);};
struct IHTMLTableRowVtbl {HRESULT ( *QueryInterface)(IHTMLTableRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRow *This);ULONG ( *Release)(IHTMLTableRow *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableRow *This, BSTR v);HRESULT ( *get_align)(IHTMLTableRow *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableRow *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableRow *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *get_rowIndex)(IHTMLTableRow *This, int *p);HRESULT ( *get_sectionRowIndex)(IHTMLTableRow *This, int *p);HRESULT ( *get_cells)(IHTMLTableRow *This, IHTMLElementCollection **p);HRESULT ( *insertCell)(IHTMLTableRow *This, int index, IDispatch **row);HRESULT ( *deleteCell)(IHTMLTableRow *This, int index);};
struct IIntelliFormsVtbl {HRESULT ( *QueryInterface)(IIntelliForms *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIntelliForms *This);ULONG ( *Release)(IIntelliForms *This);HRESULT ( *GetTypeInfoCount)(IIntelliForms *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IIntelliForms *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IIntelliForms *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IIntelliForms *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_enabled)(IIntelliForms *This, VARIANT_BOOL *pVal);HRESULT ( *put_enabled)(IIntelliForms *This, VARIANT_BOOL bVal);};
struct IMXAttributesVtbl {HRESULT ( *QueryInterface)(IMXAttributes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMXAttributes *This);ULONG ( *Release)(IMXAttributes *This);HRESULT ( *GetTypeInfoCount)(IMXAttributes *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMXAttributes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMXAttributes *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMXAttributes *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *addAttribute)(IMXAttributes *This, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue);HRESULT ( *addAttributeFromIndex)(IMXAttributes *This, VARIANT varAtts, int nIndex);HRESULT ( *clear)(IMXAttributes *This);HRESULT ( *removeAttribute)(IMXAttributes *This, int nIndex);HRESULT ( *setAttribute)(IMXAttributes *This, int nIndex, BSTR strURI, BSTR strLocalName, BSTR strQName, BSTR strType, BSTR strValue);HRESULT ( *setAttributes)(IMXAttributes *This, VARIANT varAtts);HRESULT ( *setLocalName)(IMXAttributes *This, int nIndex, BSTR strLocalName);HRESULT ( *setQName)(IMXAttributes *This, int nIndex, BSTR strQName);HRESULT ( *setType)(IMXAttributes *This, int nIndex, BSTR strType);HRESULT ( *setURI)(IMXAttributes *This, int nIndex, BSTR strURI);HRESULT ( *setValue)(IMXAttributes *This, int nIndex, BSTR strValue);};
struct IRTCInfoEventVtbl {HRESULT ( *QueryInterface)(IRTCInfoEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCInfoEvent *This);ULONG ( *Release)(IRTCInfoEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCInfoEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCInfoEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCInfoEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCInfoEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCInfoEvent *This, IRTCSession2 **ppSession);HRESULT ( *get_Participant)(IRTCInfoEvent *This, IRTCParticipant **ppParticipant);HRESULT ( *get_Info)(IRTCInfoEvent *This, BSTR *pbstrInfo);HRESULT ( *get_InfoHeader)(IRTCInfoEvent *This, BSTR *pbstrInfoHeader);};
struct ITIMEPlayItemVtbl {HRESULT ( *QueryInterface)(ITIMEPlayItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEPlayItem *This);ULONG ( *Release)(ITIMEPlayItem *This);HRESULT ( *GetTypeInfoCount)(ITIMEPlayItem *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEPlayItem *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEPlayItem *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEPlayItem *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_abstract)(ITIMEPlayItem *This, BSTR *abs);HRESULT ( *get_author)(ITIMEPlayItem *This, BSTR *auth);HRESULT ( *get_copyright)(ITIMEPlayItem *This, BSTR *cpyrght);HRESULT ( *get_dur)(ITIMEPlayItem *This, double *dur);HRESULT ( *get_index)(ITIMEPlayItem *This, int *index);HRESULT ( *get_rating)(ITIMEPlayItem *This, BSTR *rate);HRESULT ( *get_src)(ITIMEPlayItem *This, BSTR *src);HRESULT ( *get_title)(ITIMEPlayItem *This, BSTR *title);HRESULT ( *setActive)(ITIMEPlayItem *This);};
struct IVBSAXLocatorVtbl {HRESULT ( *QueryInterface)(IVBSAXLocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXLocator *This);ULONG ( *Release)(IVBSAXLocator *This);HRESULT ( *GetTypeInfoCount)(IVBSAXLocator *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXLocator *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXLocator *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXLocator *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_columnNumber)(IVBSAXLocator *This, int *nColumn);HRESULT ( *get_lineNumber)(IVBSAXLocator *This, int *nLine);HRESULT ( *get_publicId)(IVBSAXLocator *This, BSTR *strPublicId);HRESULT ( *get_systemId)(IVBSAXLocator *This, BSTR *strSystemId);};
struct IXMLAttributeVtbl {HRESULT ( *QueryInterface)(IXMLAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLAttribute *This);ULONG ( *Release)(IXMLAttribute *This);HRESULT ( *GetTypeInfoCount)(IXMLAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_name)(IXMLAttribute *This, BSTR *n);HRESULT ( *get_value)(IXMLAttribute *This, BSTR *v);};
struct DFConstraintVtbl {HRESULT ( *QueryInterface)(DFConstraint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DFConstraint *This);ULONG ( *Release)(DFConstraint *This);HRESULT ( *GetTypeInfoCount)(DFConstraint *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DFConstraint *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DFConstraint *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DFConstraint *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(DFConstraint *This, BSTR *pbs);HRESULT ( *get_Value)(DFConstraint *This, VARIANT *pv);};
struct FolderItems3Vtbl {HRESULT ( *QueryInterface)(FolderItems3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems3 *This);ULONG ( *Release)(FolderItems3 *This);HRESULT ( *GetTypeInfoCount)(FolderItems3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems3 *This, int *plCount);HRESULT ( *get_Application)(FolderItems3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems3 *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems3 *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems3 *This, IUnknown **ppunk);HRESULT ( *InvokeVerbEx)(FolderItems3 *This, VARIANT vVerb, VARIANT vArgs);HRESULT ( *Filter)(FolderItems3 *This, int grfFlags, BSTR bstrFileSpec);HRESULT ( *get_Verbs)(FolderItems3 *This, FolderItemVerbs **ppfic);};
struct IBasicVideo2Vtbl {HRESULT ( *QueryInterface)(IBasicVideo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBasicVideo2 *This);ULONG ( *Release)(IBasicVideo2 *This);HRESULT ( *GetTypeInfoCount)(IBasicVideo2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBasicVideo2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IBasicVideo2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IBasicVideo2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AvgTimePerFrame)(IBasicVideo2 *This, REFTIME *pAvgTimePerFrame);HRESULT ( *get_BitRate)(IBasicVideo2 *This, int *pBitRate);HRESULT ( *get_BitErrorRate)(IBasicVideo2 *This, int *pBitErrorRate);HRESULT ( *get_VideoWidth)(IBasicVideo2 *This, int *pVideoWidth);HRESULT ( *get_VideoHeight)(IBasicVideo2 *This, int *pVideoHeight);HRESULT ( *put_SourceLeft)(IBasicVideo2 *This, int SourceLeft);HRESULT ( *get_SourceLeft)(IBasicVideo2 *This, int *pSourceLeft);HRESULT ( *put_SourceWidth)(IBasicVideo2 *This, int SourceWidth);HRESULT ( *get_SourceWidth)(IBasicVideo2 *This, int *pSourceWidth);HRESULT ( *put_SourceTop)(IBasicVideo2 *This, int SourceTop);HRESULT ( *get_SourceTop)(IBasicVideo2 *This, int *pSourceTop);HRESULT ( *put_SourceHeight)(IBasicVideo2 *This, int SourceHeight);HRESULT ( *get_SourceHeight)(IBasicVideo2 *This, int *pSourceHeight);HRESULT ( *put_DestinationLeft)(IBasicVideo2 *This, int DestinationLeft);HRESULT ( *get_DestinationLeft)(IBasicVideo2 *This, int *pDestinationLeft);HRESULT ( *put_DestinationWidth)(IBasicVideo2 *This, int DestinationWidth);HRESULT ( *get_DestinationWidth)(IBasicVideo2 *This, int *pDestinationWidth);HRESULT ( *put_DestinationTop)(IBasicVideo2 *This, int DestinationTop);HRESULT ( *get_DestinationTop)(IBasicVideo2 *This, int *pDestinationTop);HRESULT ( *put_DestinationHeight)(IBasicVideo2 *This, int DestinationHeight);HRESULT ( *get_DestinationHeight)(IBasicVideo2 *This, int *pDestinationHeight);HRESULT ( *SetSourcePosition)(IBasicVideo2 *This, int Left, int Top, int Width, int Height);HRESULT ( *GetSourcePosition)(IBasicVideo2 *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultSourcePosition)(IBasicVideo2 *This);HRESULT ( *SetDestinationPosition)(IBasicVideo2 *This, int Left, int Top, int Width, int Height);HRESULT ( *GetDestinationPosition)(IBasicVideo2 *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultDestinationPosition)(IBasicVideo2 *This);HRESULT ( *GetVideoSize)(IBasicVideo2 *This, int *pWidth, int *pHeight);HRESULT ( *GetVideoPaletteEntries)(IBasicVideo2 *This, int StartIndex, int Entries, int *pRetrieved, int *pPalette);HRESULT ( *GetCurrentImage)(IBasicVideo2 *This, int *pBufferSize, int *pDIBImage);HRESULT ( *IsUsingDefaultSource)(IBasicVideo2 *This);HRESULT ( *IsUsingDefaultDestination)(IBasicVideo2 *This);HRESULT ( *GetPreferredAspectRatio)(IBasicVideo2 *This, int *plAspectX, int *plAspectY);};
struct IHTMLBGsoundVtbl {HRESULT ( *QueryInterface)(IHTMLBGsound *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBGsound *This);ULONG ( *Release)(IHTMLBGsound *This);HRESULT ( *GetTypeInfoCount)(IHTMLBGsound *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBGsound *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBGsound *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBGsound *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLBGsound *This, BSTR v);HRESULT ( *get_src)(IHTMLBGsound *This, BSTR *p);HRESULT ( *put_loop)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_loop)(IHTMLBGsound *This, VARIANT *p);HRESULT ( *put_volume)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_volume)(IHTMLBGsound *This, VARIANT *p);HRESULT ( *put_balance)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_balance)(IHTMLBGsound *This, VARIANT *p);};
struct IHTMLDialog2Vtbl {HRESULT ( *QueryInterface)(IHTMLDialog2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDialog2 *This);ULONG ( *Release)(IHTMLDialog2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDialog2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDialog2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDialog2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDialog2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_status)(IHTMLDialog2 *This, BSTR v);HRESULT ( *get_status)(IHTMLDialog2 *This, BSTR *p);HRESULT ( *put_resizable)(IHTMLDialog2 *This, BSTR v);HRESULT ( *get_resizable)(IHTMLDialog2 *This, BSTR *p);};
struct IHTMLDialog3Vtbl {HRESULT ( *QueryInterface)(IHTMLDialog3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDialog3 *This);ULONG ( *Release)(IHTMLDialog3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDialog3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDialog3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDialog3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDialog3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_unadorned)(IHTMLDialog3 *This, BSTR v);HRESULT ( *get_unadorned)(IHTMLDialog3 *This, BSTR *p);HRESULT ( *put_dialogHide)(IHTMLDialog3 *This, BSTR v);HRESULT ( *get_dialogHide)(IHTMLDialog3 *This, BSTR *p);};
struct IRadioButtonVtbl {HRESULT ( *QueryInterface)(IRadioButton *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioButton *This);ULONG ( *Release)(IRadioButton *This);HRESULT ( *GetTypeInfoCount)(IRadioButton *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioButton *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioButton *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioButton *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(IRadioButton *This, BSTR v);HRESULT ( *get_value)(IRadioButton *This, BSTR *p);};
struct IRadioServerVtbl {HRESULT ( *QueryInterface)(IRadioServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioServer *This);ULONG ( *Release)(IRadioServer *This);HRESULT ( *GetTypeInfoCount)(IRadioServer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioServer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioServer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioServer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *BindToRadio)(IRadioServer *This, BSTR wszRadio, IRadioPlayer **ppServer);HRESULT ( *IsRadioExists)(IRadioServer *This, BSTR wszRadio);HRESULT ( *LaunchStandardUrl)(IRadioServer *This, BSTR bszUrl, IUnknown *pBrowser);};
struct IUPnPServiceVtbl {HRESULT ( *QueryInterface)(IUPnPService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPService *This);ULONG ( *Release)(IUPnPService *This);HRESULT ( *GetTypeInfoCount)(IUPnPService *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPService *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPService *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPService *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *QueryStateVariable)(IUPnPService *This, BSTR bstrVariableName, VARIANT *pValue);HRESULT ( *InvokeAction)(IUPnPService *This, BSTR bstrActionName, VARIANT vInActionArgs, VARIANT *pvOutActionArgs, VARIANT *pvRetVal);HRESULT ( *get_ServiceTypeIdentifier)(IUPnPService *This, BSTR *pVal);HRESULT ( *AddCallback)(IUPnPService *This, IUnknown *pUnkCallback);HRESULT ( *get_Id)(IUPnPService *This, BSTR *pbstrId);HRESULT ( *get_LastTransportStatus)(IUPnPService *This, int *plValue);};
struct IXMLDocumentVtbl {HRESULT ( *QueryInterface)(IXMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDocument *This);ULONG ( *Release)(IXMLDocument *This);HRESULT ( *GetTypeInfoCount)(IXMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_root)(IXMLDocument *This, IXMLElement **p);HRESULT ( *get_fileSize)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_URL)(IXMLDocument *This, BSTR *p);HRESULT ( *put_URL)(IXMLDocument *This, BSTR p);HRESULT ( *get_mimeType)(IXMLDocument *This, BSTR *p);HRESULT ( *get_readyState)(IXMLDocument *This, int *pl);HRESULT ( *get_charset)(IXMLDocument *This, BSTR *p);HRESULT ( *put_charset)(IXMLDocument *This, BSTR p);HRESULT ( *get_version)(IXMLDocument *This, BSTR *p);HRESULT ( *get_doctype)(IXMLDocument *This, BSTR *p);HRESULT ( *get_dtdURL)(IXMLDocument *This, BSTR *p);HRESULT ( *createElement)(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);};
struct IXMLElement2Vtbl {HRESULT ( *QueryInterface)(IXMLElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElement2 *This);ULONG ( *Release)(IXMLElement2 *This);HRESULT ( *GetTypeInfoCount)(IXMLElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_tagName)(IXMLElement2 *This, BSTR *p);HRESULT ( *put_tagName)(IXMLElement2 *This, BSTR p);HRESULT ( *get_parent)(IXMLElement2 *This, IXMLElement2 **ppParent);HRESULT ( *setAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT ( *getAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT ( *removeAttribute)(IXMLElement2 *This, BSTR strPropertyName);HRESULT ( *get_children)(IXMLElement2 *This, IXMLElementCollection **pp);HRESULT ( *get_type)(IXMLElement2 *This, int *plType);HRESULT ( *get_text)(IXMLElement2 *This, BSTR *p);HRESULT ( *put_text)(IXMLElement2 *This, BSTR p);HRESULT ( *addChild)(IXMLElement2 *This, IXMLElement2 *pChildElem, int lIndex, int lReserved);HRESULT ( *removeChild)(IXMLElement2 *This, IXMLElement2 *pChildElem);HRESULT ( *get_attributes)(IXMLElement2 *This, IXMLElementCollection **pp);};
struct IAccessibleVtbl {HRESULT ( *QueryInterface)(IAccessible *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessible *This);ULONG ( *Release)(IAccessible *This);HRESULT ( *GetTypeInfoCount)(IAccessible *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAccessible *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAccessible *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAccessible *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accParent)(IAccessible *This, IDispatch **ppdispParent);HRESULT ( *get_accChildCount)(IAccessible *This, int *pcountChildren);HRESULT ( *get_accChild)(IAccessible *This, VARIANT varChild, IDispatch **ppdispChild);HRESULT ( *get_accName)(IAccessible *This, VARIANT varChild, BSTR *pszName);HRESULT ( *get_accValue)(IAccessible *This, VARIANT varChild, BSTR *pszValue);HRESULT ( *get_accDescription)(IAccessible *This, VARIANT varChild, BSTR *pszDescription);HRESULT ( *get_accRole)(IAccessible *This, VARIANT varChild, VARIANT *pvarRole);HRESULT ( *get_accState)(IAccessible *This, VARIANT varChild, VARIANT *pvarState);HRESULT ( *get_accHelp)(IAccessible *This, VARIANT varChild, BSTR *pszHelp);HRESULT ( *get_accHelpTopic)(IAccessible *This, BSTR *pszHelpFile, VARIANT varChild, int *pidTopic);HRESULT ( *get_accKeyboardShortcut)(IAccessible *This, VARIANT varChild, BSTR *pszKeyboardShortcut);HRESULT ( *get_accFocus)(IAccessible *This, VARIANT *pvarChild);HRESULT ( *get_accSelection)(IAccessible *This, VARIANT *pvarChildren);HRESULT ( *get_accDefaultAction)(IAccessible *This, VARIANT varChild, BSTR *pszDefaultAction);HRESULT ( *accSelect)(IAccessible *This, int flagsSelect, VARIANT varChild);HRESULT ( *accLocation)(IAccessible *This, int *pxLeft, int *pyTop, int *pcxWidth, int *pcyHeight, VARIANT varChild);HRESULT ( *accNavigate)(IAccessible *This, int navDir, VARIANT varStart, VARIANT *pvarEndUpAt);HRESULT ( *accHitTest)(IAccessible *This, int xLeft, int yTop, VARIANT *pvarChild);HRESULT ( *accDoDefaultAction)(IAccessible *This, VARIANT varChild);HRESULT ( *put_accName)(IAccessible *This, VARIANT varChild, BSTR szName);HRESULT ( *put_accValue)(IAccessible *This, VARIANT varChild, BSTR szValue);};
struct IBasicVideoVtbl {HRESULT ( *QueryInterface)(IBasicVideo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBasicVideo *This);ULONG ( *Release)(IBasicVideo *This);HRESULT ( *GetTypeInfoCount)(IBasicVideo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBasicVideo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IBasicVideo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IBasicVideo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AvgTimePerFrame)(IBasicVideo *This, REFTIME *pAvgTimePerFrame);HRESULT ( *get_BitRate)(IBasicVideo *This, int *pBitRate);HRESULT ( *get_BitErrorRate)(IBasicVideo *This, int *pBitErrorRate);HRESULT ( *get_VideoWidth)(IBasicVideo *This, int *pVideoWidth);HRESULT ( *get_VideoHeight)(IBasicVideo *This, int *pVideoHeight);HRESULT ( *put_SourceLeft)(IBasicVideo *This, int SourceLeft);HRESULT ( *get_SourceLeft)(IBasicVideo *This, int *pSourceLeft);HRESULT ( *put_SourceWidth)(IBasicVideo *This, int SourceWidth);HRESULT ( *get_SourceWidth)(IBasicVideo *This, int *pSourceWidth);HRESULT ( *put_SourceTop)(IBasicVideo *This, int SourceTop);HRESULT ( *get_SourceTop)(IBasicVideo *This, int *pSourceTop);HRESULT ( *put_SourceHeight)(IBasicVideo *This, int SourceHeight);HRESULT ( *get_SourceHeight)(IBasicVideo *This, int *pSourceHeight);HRESULT ( *put_DestinationLeft)(IBasicVideo *This, int DestinationLeft);HRESULT ( *get_DestinationLeft)(IBasicVideo *This, int *pDestinationLeft);HRESULT ( *put_DestinationWidth)(IBasicVideo *This, int DestinationWidth);HRESULT ( *get_DestinationWidth)(IBasicVideo *This, int *pDestinationWidth);HRESULT ( *put_DestinationTop)(IBasicVideo *This, int DestinationTop);HRESULT ( *get_DestinationTop)(IBasicVideo *This, int *pDestinationTop);HRESULT ( *put_DestinationHeight)(IBasicVideo *This, int DestinationHeight);HRESULT ( *get_DestinationHeight)(IBasicVideo *This, int *pDestinationHeight);HRESULT ( *SetSourcePosition)(IBasicVideo *This, int Left, int Top, int Width, int Height);HRESULT ( *GetSourcePosition)(IBasicVideo *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultSourcePosition)(IBasicVideo *This);HRESULT ( *SetDestinationPosition)(IBasicVideo *This, int Left, int Top, int Width, int Height);HRESULT ( *GetDestinationPosition)(IBasicVideo *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultDestinationPosition)(IBasicVideo *This);HRESULT ( *GetVideoSize)(IBasicVideo *This, int *pWidth, int *pHeight);HRESULT ( *GetVideoPaletteEntries)(IBasicVideo *This, int StartIndex, int Entries, int *pRetrieved, int *pPalette);HRESULT ( *GetCurrentImage)(IBasicVideo *This, int *pBufferSize, int *pDIBImage);HRESULT ( *IsUsingDefaultSource)(IBasicVideo *This);HRESULT ( *IsUsingDefaultDestination)(IBasicVideo *This);};
struct IDSOControlVtbl {HRESULT ( *QueryInterface)(IDSOControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDSOControl *This);ULONG ( *Release)(IDSOControl *This);HRESULT ( *GetTypeInfoCount)(IDSOControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDSOControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDSOControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDSOControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_XMLDocument)(IDSOControl *This, IXMLDOMDocument **ppDoc);HRESULT ( *put_XMLDocument)(IDSOControl *This, IXMLDOMDocument *ppDoc);HRESULT ( *get_JavaDSOCompatible)(IDSOControl *This, BOOL *fJavaDSOCompatible);HRESULT ( *put_JavaDSOCompatible)(IDSOControl *This, BOOL fJavaDSOCompatible);HRESULT ( *get_readyState)(IDSOControl *This, int *state);};
struct IHTMLDialogVtbl {HRESULT ( *QueryInterface)(IHTMLDialog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDialog *This);ULONG ( *Release)(IHTMLDialog *This);HRESULT ( *GetTypeInfoCount)(IHTMLDialog *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDialog *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDialog *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDialog *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_dialogTop)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogTop)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogLeft)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogLeft)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogWidth)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogWidth)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogHeight)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogHeight)(IHTMLDialog *This, VARIANT *p);HRESULT ( *get_dialogArguments)(IHTMLDialog *This, VARIANT *p);HRESULT ( *get_menuArguments)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_returnValue)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_returnValue)(IHTMLDialog *This, VARIANT *p);HRESULT ( *close)(IHTMLDialog *This);HRESULT ( *toString)(IHTMLDialog *This, BSTR *String);};
struct IHTMLScreenVtbl {HRESULT ( *QueryInterface)(IHTMLScreen *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScreen *This);ULONG ( *Release)(IHTMLScreen *This);HRESULT ( *GetTypeInfoCount)(IHTMLScreen *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScreen *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScreen *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScreen *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_colorDepth)(IHTMLScreen *This, int *p);HRESULT ( *put_bufferDepth)(IHTMLScreen *This, int v);HRESULT ( *get_bufferDepth)(IHTMLScreen *This, int *p);HRESULT ( *get_width)(IHTMLScreen *This, int *p);HRESULT ( *get_height)(IHTMLScreen *This, int *p);HRESULT ( *put_updateInterval)(IHTMLScreen *This, int v);HRESULT ( *get_updateInterval)(IHTMLScreen *This, int *p);HRESULT ( *get_availHeight)(IHTMLScreen *This, int *p);HRESULT ( *get_availWidth)(IHTMLScreen *This, int *p);HRESULT ( *get_fontSmoothingEnabled)(IHTMLScreen *This, VARIANT_BOOL *p);};
struct IHTMLStyle3Vtbl {HRESULT ( *QueryInterface)(IHTMLStyle3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyle3 *This);ULONG ( *Release)(IHTMLStyle3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyle3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyle3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyle3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyle3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_layoutFlow)(IHTMLStyle3 *This, BSTR v);HRESULT ( *get_layoutFlow)(IHTMLStyle3 *This, BSTR *p);HRESULT ( *put_zoom)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_zoom)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_wordWrap)(IHTMLStyle3 *This, BSTR v);HRESULT ( *get_wordWrap)(IHTMLStyle3 *This, BSTR *p);HRESULT ( *put_textUnderlinePosition)(IHTMLStyle3 *This, BSTR v);HRESULT ( *get_textUnderlinePosition)(IHTMLStyle3 *This, BSTR *p);HRESULT ( *put_scrollbarBaseColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarBaseColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarFaceColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarFaceColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbar3dLightColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbar3dLightColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarShadowColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarShadowColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarHighlightColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarHighlightColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarDarkShadowColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarDarkShadowColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarArrowColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarArrowColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_scrollbarTrackColor)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_scrollbarTrackColor)(IHTMLStyle3 *This, VARIANT *p);HRESULT ( *put_writingMode)(IHTMLStyle3 *This, BSTR v);HRESULT ( *get_writingMode)(IHTMLStyle3 *This, BSTR *p);HRESULT ( *put_textAlignLast)(IHTMLStyle3 *This, BSTR v);HRESULT ( *get_textAlignLast)(IHTMLStyle3 *This, BSTR *p);HRESULT ( *put_textKashidaSpace)(IHTMLStyle3 *This, VARIANT v);HRESULT ( *get_textKashidaSpace)(IHTMLStyle3 *This, VARIANT *p);};
struct IHTMLStyle4Vtbl {HRESULT ( *QueryInterface)(IHTMLStyle4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyle4 *This);ULONG ( *Release)(IHTMLStyle4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyle4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyle4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyle4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyle4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_textOverflow)(IHTMLStyle4 *This, BSTR v);HRESULT ( *get_textOverflow)(IHTMLStyle4 *This, BSTR *p);HRESULT ( *put_minHeight)(IHTMLStyle4 *This, VARIANT v);HRESULT ( *get_minHeight)(IHTMLStyle4 *This, VARIANT *p);};
struct IHTMLTable3Vtbl {HRESULT ( *QueryInterface)(IHTMLTable3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTable3 *This);ULONG ( *Release)(IHTMLTable3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLTable3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTable3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTable3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTable3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_summary)(IHTMLTable3 *This, BSTR v);HRESULT ( *get_summary)(IHTMLTable3 *This, BSTR *p);};
struct IMediaEventVtbl {HRESULT ( *QueryInterface)(IMediaEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaEvent *This);ULONG ( *Release)(IMediaEvent *This);HRESULT ( *GetTypeInfoCount)(IMediaEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetEventHandle)(IMediaEvent *This, OAEVENT *hEvent);HRESULT ( *GetEvent)(IMediaEvent *This, int *lEventCode, int *lParam1, int *lParam2, int msTimeout);HRESULT ( *WaitForCompletion)(IMediaEvent *This, int msTimeout, int *pEvCode);HRESULT ( *CancelDefaultHandling)(IMediaEvent *This, int lEvCode);HRESULT ( *RestoreDefaultHandling)(IMediaEvent *This, int lEvCode);HRESULT ( *FreeEventParams)(IMediaEvent *This, int lEvCode, int lParam1, int lParam2);};
struct ISOAPClientVtbl {HRESULT ( *QueryInterface)(ISOAPClient *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISOAPClient *This);ULONG ( *Release)(ISOAPClient *This);HRESULT ( *GetTypeInfoCount)(ISOAPClient *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISOAPClient *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISOAPClient *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISOAPClient *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *mssoapinit)(ISOAPClient *This, BSTR bstrWSDLFile, BSTR bstrServiceName, BSTR bstrPort, BSTR bstrWSMLFile);HRESULT ( *get_faultcode)(ISOAPClient *This, BSTR *bstrFaultcode);HRESULT ( *get_faultstring)(ISOAPClient *This, BSTR *bstrFaultstring);HRESULT ( *get_faultactor)(ISOAPClient *This, BSTR *bstrActor);HRESULT ( *get_detail)(ISOAPClient *This, BSTR *bstrDetail);HRESULT ( *get_ClientProperty)(ISOAPClient *This, BSTR PropertyName, VARIANT *pPropertyValue);HRESULT ( *putref_HeaderHandler)(ISOAPClient *This, IDispatch *pHeaderHandler);HRESULT ( *put_ClientProperty)(ISOAPClient *This, BSTR PropertyName, VARIANT PropertyValue);HRESULT ( *get_ConnectorProperty)(ISOAPClient *This, BSTR PropertyName, VARIANT *pPropertyValue);HRESULT ( *put_ConnectorProperty)(ISOAPClient *This, BSTR PropertyName, VARIANT PropertyValue);};
struct ISOAPServerVtbl {HRESULT ( *QueryInterface)(ISOAPServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISOAPServer *This);ULONG ( *Release)(ISOAPServer *This);HRESULT ( *GetTypeInfoCount)(ISOAPServer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISOAPServer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISOAPServer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISOAPServer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Init)(ISOAPServer *This, BSTR pUrlWSDLFile, BSTR bstrWSMLFileSpec);HRESULT ( *SoapInvoke)(ISOAPServer *This, VARIANT varInput, IUnknown *pOutputStream, BSTR bstrSoapAction);};
struct IXMLElementVtbl {HRESULT ( *QueryInterface)(IXMLElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElement *This);ULONG ( *Release)(IXMLElement *This);HRESULT ( *GetTypeInfoCount)(IXMLElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_tagName)(IXMLElement *This, BSTR *p);HRESULT ( *put_tagName)(IXMLElement *This, BSTR p);HRESULT ( *get_parent)(IXMLElement *This, IXMLElement **ppParent);HRESULT ( *setAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT ( *getAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT ( *removeAttribute)(IXMLElement *This, BSTR strPropertyName);HRESULT ( *get_children)(IXMLElement *This, IXMLElementCollection **pp);HRESULT ( *get_type)(IXMLElement *This, int *plType);HRESULT ( *get_text)(IXMLElement *This, BSTR *p);HRESULT ( *put_text)(IXMLElement *This, BSTR p);HRESULT ( *addChild)(IXMLElement *This, IXMLElement *pChildElem, int lIndex, int lReserved);HRESULT ( *removeChild)(IXMLElement *This, IXMLElement *pChildElem);};
struct IFontNamesVtbl {HRESULT ( *QueryInterface)(IFontNames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontNames *This);ULONG ( *Release)(IFontNames *This);HRESULT ( *GetTypeInfoCount)(IFontNames *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontNames *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontNames *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontNames *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(IFontNames *This, IUnknown **p);HRESULT ( *get_Count)(IFontNames *This, int *p);HRESULT ( *Item)(IFontNames *This, VARIANT *pvarIndex, BSTR *pbstrFontName);};
struct IHTMLPopupVtbl {HRESULT ( *QueryInterface)(IHTMLPopup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPopup *This);ULONG ( *Release)(IHTMLPopup *This);HRESULT ( *GetTypeInfoCount)(IHTMLPopup *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPopup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPopup *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPopup *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *show)(IHTMLPopup *This, int x, int y, int w, int h, VARIANT *pElement);HRESULT ( *hide)(IHTMLPopup *This);HRESULT ( *get_document)(IHTMLPopup *This, IHTMLDocument **p);HRESULT ( *get_isOpen)(IHTMLPopup *This, VARIANT_BOOL *p);};
struct IHTMLTableVtbl {HRESULT ( *QueryInterface)(IHTMLTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTable *This);ULONG ( *Release)(IHTMLTable *This);HRESULT ( *GetTypeInfoCount)(IHTMLTable *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTable *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTable *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTable *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_cols)(IHTMLTable *This, int v);HRESULT ( *get_cols)(IHTMLTable *This, int *p);HRESULT ( *put_border)(IHTMLTable *This, VARIANT v);HRESULT ( *get_border)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_frame)(IHTMLTable *This, BSTR v);HRESULT ( *get_frame)(IHTMLTable *This, BSTR *p);HRESULT ( *put_rules)(IHTMLTable *This, BSTR v);HRESULT ( *get_rules)(IHTMLTable *This, BSTR *p);HRESULT ( *put_cellSpacing)(IHTMLTable *This, VARIANT v);HRESULT ( *get_cellSpacing)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_cellPadding)(IHTMLTable *This, VARIANT v);HRESULT ( *get_cellPadding)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_background)(IHTMLTable *This, BSTR v);HRESULT ( *get_background)(IHTMLTable *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTable *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_align)(IHTMLTable *This, BSTR v);HRESULT ( *get_align)(IHTMLTable *This, BSTR *p);HRESULT ( *refresh)(IHTMLTable *This);HRESULT ( *get_rows)(IHTMLTable *This, IHTMLElementCollection **p);HRESULT ( *put_width)(IHTMLTable *This, VARIANT v);HRESULT ( *get_width)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_height)(IHTMLTable *This, VARIANT v);HRESULT ( *get_height)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_dataPageSize)(IHTMLTable *This, int v);HRESULT ( *get_dataPageSize)(IHTMLTable *This, int *p);HRESULT ( *nextPage)(IHTMLTable *This);HRESULT ( *previousPage)(IHTMLTable *This);HRESULT ( *get_tHead)(IHTMLTable *This, IHTMLTableSection **p);HRESULT ( *get_tFoot)(IHTMLTable *This, IHTMLTableSection **p);HRESULT ( *get_tBodies)(IHTMLTable *This, IHTMLElementCollection **p);HRESULT ( *get_caption)(IHTMLTable *This, IHTMLTableCaption **p);HRESULT ( *createTHead)(IHTMLTable *This, IDispatch **head);HRESULT ( *deleteTHead)(IHTMLTable *This);HRESULT ( *createTFoot)(IHTMLTable *This, IDispatch **foot);HRESULT ( *deleteTFoot)(IHTMLTable *This);HRESULT ( *createCaption)(IHTMLTable *This, IHTMLTableCaption **caption);HRESULT ( *deleteCaption)(IHTMLTable *This);HRESULT ( *insertRow)(IHTMLTable *This, int index, IDispatch **row);HRESULT ( *deleteRow)(IHTMLTable *This, int index);HRESULT ( *get_readyState)(IHTMLTable *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLTable *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLTable *This, VARIANT *p);};
struct IRadioBandVtbl {HRESULT ( *QueryInterface)(IRadioBand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioBand *This);ULONG ( *Release)(IRadioBand *This);HRESULT ( *GetTypeInfoCount)(IRadioBand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioBand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioBand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioBand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Create)(IRadioBand *This, LONG *phwnd, LONG hwndParent);};
struct IScrollBarVtbl {HRESULT ( *QueryInterface)(IScrollBar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScrollBar *This);ULONG ( *Release)(IScrollBar *This);HRESULT ( *GetTypeInfoCount)(IScrollBar *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IScrollBar *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IScrollBar *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IScrollBar *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_min)(IScrollBar *This, int v);HRESULT ( *get_min)(IScrollBar *This, int *p);HRESULT ( *put_max)(IScrollBar *This, int v);HRESULT ( *get_max)(IScrollBar *This, int *p);HRESULT ( *put_position)(IScrollBar *This, int v);HRESULT ( *get_position)(IScrollBar *This, int *p);HRESULT ( *put_unit)(IScrollBar *This, int v);HRESULT ( *get_unit)(IScrollBar *This, int *p);HRESULT ( *put_block)(IScrollBar *This, int v);HRESULT ( *get_block)(IScrollBar *This, int *p);HRESULT ( *put_orientation)(IScrollBar *This, BSTR v);HRESULT ( *get_orientation)(IScrollBar *This, BSTR *p);HRESULT ( *put_visibleUnits)(IScrollBar *This, int v);HRESULT ( *get_visibleUnits)(IScrollBar *This, int *p);};
struct ISensLogonVtbl {HRESULT ( *QueryInterface)(ISensLogon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISensLogon *This);ULONG ( *Release)(ISensLogon *This);HRESULT ( *GetTypeInfoCount)(ISensLogon *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISensLogon *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISensLogon *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISensLogon *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Logon)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *Logoff)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *StartShell)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *DisplayLock)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *DisplayUnlock)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *StartScreenSaver)(ISensLogon *This, BSTR bstrUserName);HRESULT ( *StopScreenSaver)(ISensLogon *This, BSTR bstrUserName);};
struct ISensOnNowVtbl {HRESULT ( *QueryInterface)(ISensOnNow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISensOnNow *This);ULONG ( *Release)(ISensOnNow *This);HRESULT ( *GetTypeInfoCount)(ISensOnNow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISensOnNow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISensOnNow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISensOnNow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *OnACPower)(ISensOnNow *This);HRESULT ( *OnBatteryPower)(ISensOnNow *This, DWORD dwBatteryLifePercent);HRESULT ( *BatteryLow)(ISensOnNow *This, DWORD dwBatteryLifePercent);};
struct ISliderBarVtbl {HRESULT ( *QueryInterface)(ISliderBar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISliderBar *This);ULONG ( *Release)(ISliderBar *This);HRESULT ( *GetTypeInfoCount)(ISliderBar *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISliderBar *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISliderBar *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISliderBar *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_min)(ISliderBar *This, int v);HRESULT ( *get_min)(ISliderBar *This, int *p);HRESULT ( *put_max)(ISliderBar *This, int v);HRESULT ( *get_max)(ISliderBar *This, int *p);HRESULT ( *put_position)(ISliderBar *This, int v);HRESULT ( *get_position)(ISliderBar *This, int *p);HRESULT ( *put_unit)(ISliderBar *This, int v);HRESULT ( *get_unit)(ISliderBar *This, int *p);HRESULT ( *put_block)(ISliderBar *This, int v);HRESULT ( *get_block)(ISliderBar *This, int *p);HRESULT ( *put_orientation)(ISliderBar *This, BSTR v);HRESULT ( *get_orientation)(ISliderBar *This, BSTR *p);};
struct ICheckBoxVtbl {HRESULT ( *QueryInterface)(ICheckBox *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICheckBox *This);ULONG ( *Release)(ICheckBox *This);HRESULT ( *GetTypeInfoCount)(ICheckBox *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICheckBox *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICheckBox *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICheckBox *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(ICheckBox *This, BSTR v);HRESULT ( *get_value)(ICheckBox *This, BSTR *p);};
struct IComboboxVtbl {HRESULT ( *QueryInterface)(ICombobox *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICombobox *This);ULONG ( *Release)(ICombobox *This);HRESULT ( *GetTypeInfoCount)(ICombobox *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICombobox *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICombobox *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICombobox *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(ICombobox *This, BSTR v);HRESULT ( *get_value)(ICombobox *This, BSTR *p);};
struct IHtmlAreaVtbl {HRESULT ( *QueryInterface)(IHtmlArea *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHtmlArea *This);ULONG ( *Release)(IHtmlArea *This);HRESULT ( *GetTypeInfoCount)(IHtmlArea *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHtmlArea *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHtmlArea *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHtmlArea *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(IHtmlArea *This, BSTR v);HRESULT ( *get_value)(IHtmlArea *This, BSTR *p);HRESULT ( *select)(IHtmlArea *This);};
struct ISearchesVtbl {HRESULT ( *QueryInterface)(ISearches *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearches *This);ULONG ( *Release)(ISearches *This);HRESULT ( *GetTypeInfoCount)(ISearches *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearches *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearches *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearches *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ISearches *This, int *plCount);HRESULT ( *get_Default)(ISearches *This, BSTR *pbstrDefault);HRESULT ( *Item)(ISearches *This, VARIANT index, ISearch **ppid);HRESULT ( *_NewEnum)(ISearches *This, IUnknown **ppunk);};
struct ISearchVtbl {HRESULT ( *QueryInterface)(ISearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearch *This);ULONG ( *Release)(ISearch *This);HRESULT ( *GetTypeInfoCount)(ISearch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(ISearch *This, BSTR *pbstrTitle);HRESULT ( *get_Id)(ISearch *This, BSTR *pbstrId);HRESULT ( *get_Url)(ISearch *This, BSTR *pbstrUrl);};
struct IServerVtbl {HRESULT ( *QueryInterface)(IServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServer *This);ULONG ( *Release)(IServer *This);HRESULT ( *GetTypeInfoCount)(IServer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IServer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IServer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IServer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_URLEncode)(IServer *This, BSTR pszName, BSTR *pVal);HRESULT ( *get_MapPath)(IServer *This, BSTR pszName, BSTR *pVal);};
struct FolderVtbl {HRESULT ( *QueryInterface)(Folder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder *This);ULONG ( *Release)(Folder *This);HRESULT ( *GetTypeInfoCount)(Folder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder *This, BSTR *pbs);HRESULT ( *get_Application)(Folder *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder *This, Folder **ppsf);HRESULT ( *Items)(Folder *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder *This, VARIANT vItem, int iColumn, BSTR *pbs);};
struct IRTCSessionOperationCompleteEvent2Vtbl {HRESULT ( *QueryInterface)(IRTCSessionOperationCompleteEvent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionOperationCompleteEvent2 *This);ULONG ( *Release)(IRTCSessionOperationCompleteEvent2 *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionOperationCompleteEvent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionOperationCompleteEvent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionOperationCompleteEvent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionOperationCompleteEvent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionOperationCompleteEvent2 *This, IRTCSession **ppSession);HRESULT ( *get_Cookie)(IRTCSessionOperationCompleteEvent2 *This, LONG_PTR *plCookie);HRESULT ( *get_StatusCode)(IRTCSessionOperationCompleteEvent2 *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCSessionOperationCompleteEvent2 *This, BSTR *pbstrStatusText);HRESULT ( *get_Participant)(IRTCSessionOperationCompleteEvent2 *This, IRTCParticipant **ppParticipant);HRESULT ( *GetRemoteSessionDescription)(IRTCSessionOperationCompleteEvent2 *This, BSTR *pbstrContentType, BSTR *pbstrSessionDescription);};
struct IRTCSessionOperationCompleteEventVtbl {HRESULT ( *QueryInterface)(IRTCSessionOperationCompleteEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionOperationCompleteEvent *This);ULONG ( *Release)(IRTCSessionOperationCompleteEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionOperationCompleteEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionOperationCompleteEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionOperationCompleteEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionOperationCompleteEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionOperationCompleteEvent *This, IRTCSession **ppSession);HRESULT ( *get_Cookie)(IRTCSessionOperationCompleteEvent *This, LONG_PTR *plCookie);HRESULT ( *get_StatusCode)(IRTCSessionOperationCompleteEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCSessionOperationCompleteEvent *This, BSTR *pbstrStatusText);};
struct IRTCRegistrationStateChangeEventVtbl {HRESULT ( *QueryInterface)(IRTCRegistrationStateChangeEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCRegistrationStateChangeEvent *This);ULONG ( *Release)(IRTCRegistrationStateChangeEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCRegistrationStateChangeEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCRegistrationStateChangeEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCRegistrationStateChangeEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCRegistrationStateChangeEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Profile)(IRTCRegistrationStateChangeEvent *This, IRTCProfile **ppProfile);HRESULT ( *get_State)(IRTCRegistrationStateChangeEvent *This, RTC_REGISTRATION_STATE *penState);HRESULT ( *get_StatusCode)(IRTCRegistrationStateChangeEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCRegistrationStateChangeEvent *This, BSTR *pbstrStatusText);};
struct IRTCSessionReferStatusEventVtbl {HRESULT ( *QueryInterface)(IRTCSessionReferStatusEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionReferStatusEvent *This);ULONG ( *Release)(IRTCSessionReferStatusEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionReferStatusEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionReferStatusEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionReferStatusEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionReferStatusEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionReferStatusEvent *This, IRTCSession2 **ppSession);HRESULT ( *get_ReferStatus)(IRTCSessionReferStatusEvent *This, RTC_SESSION_REFER_STATUS *penReferStatus);HRESULT ( *get_StatusCode)(IRTCSessionReferStatusEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCSessionReferStatusEvent *This, BSTR *pbstrStatusText);};
struct IRTCSessionStateChangeEventVtbl {HRESULT ( *QueryInterface)(IRTCSessionStateChangeEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionStateChangeEvent *This);ULONG ( *Release)(IRTCSessionStateChangeEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionStateChangeEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionStateChangeEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionStateChangeEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionStateChangeEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionStateChangeEvent *This, IRTCSession **ppSession);HRESULT ( *get_State)(IRTCSessionStateChangeEvent *This, RTC_SESSION_STATE *penState);HRESULT ( *get_StatusCode)(IRTCSessionStateChangeEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCSessionStateChangeEvent *This, BSTR *pbstrStatusText);};
struct IRTCUserSearchResultsEventVtbl {HRESULT ( *QueryInterface)(IRTCUserSearchResultsEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCUserSearchResultsEvent *This);ULONG ( *Release)(IRTCUserSearchResultsEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCUserSearchResultsEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCUserSearchResultsEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCUserSearchResultsEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCUserSearchResultsEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *EnumerateResults)(IRTCUserSearchResultsEvent *This, IRTCEnumUserSearchResults **ppEnum);HRESULT ( *get_Results)(IRTCUserSearchResultsEvent *This, IRTCCollection **ppCollection);HRESULT ( *get_Profile)(IRTCUserSearchResultsEvent *This, IRTCProfile2 **ppProfile);HRESULT ( *get_Query)(IRTCUserSearchResultsEvent *This, IRTCUserSearchQuery **ppQuery);HRESULT ( *get_Cookie)(IRTCUserSearchResultsEvent *This, LONG_PTR *plCookie);HRESULT ( *get_StatusCode)(IRTCUserSearchResultsEvent *This, int *plStatusCode);HRESULT ( *get_MoreAvailable)(IRTCUserSearchResultsEvent *This, VARIANT_BOOL *pfMoreAvailable);};
struct IRTCPresencePropertyEventVtbl {HRESULT ( *QueryInterface)(IRTCPresencePropertyEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPresencePropertyEvent *This);ULONG ( *Release)(IRTCPresencePropertyEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCPresencePropertyEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCPresencePropertyEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCPresencePropertyEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCPresencePropertyEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_StatusCode)(IRTCPresencePropertyEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCPresencePropertyEvent *This, BSTR *pbstrStatusText);HRESULT ( *get_PresenceProperty)(IRTCPresencePropertyEvent *This, RTC_PRESENCE_PROPERTY *penPresProp);HRESULT ( *get_Value)(IRTCPresencePropertyEvent *This, BSTR *pbstrValue);};
struct IHTMLOptionButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLOptionButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionButtonElement *This);ULONG ( *Release)(IHTMLOptionButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(IHTMLOptionButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *get_type)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLOptionButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *put_checked)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_checked)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_defaultChecked)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_defaultChecked)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_onchange)(IHTMLOptionButtonElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLOptionButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_status)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_status)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_indeterminate)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_indeterminate)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLOptionButtonElement *This, IHTMLFormElement **p);};
struct IRTCSessionReferredEventVtbl {HRESULT ( *QueryInterface)(IRTCSessionReferredEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionReferredEvent *This);ULONG ( *Release)(IRTCSessionReferredEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionReferredEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionReferredEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionReferredEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionReferredEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionReferredEvent *This, IRTCSession2 **ppSession);HRESULT ( *get_ReferredByURI)(IRTCSessionReferredEvent *This, BSTR *pbstrReferredByURI);HRESULT ( *get_ReferToURI)(IRTCSessionReferredEvent *This, BSTR *pbstrReferoURI);HRESULT ( *get_ReferCookie)(IRTCSessionReferredEvent *This, BSTR *pbstrReferCookie);HRESULT ( *Accept)(IRTCSessionReferredEvent *This);HRESULT ( *Reject)(IRTCSessionReferredEvent *This);HRESULT ( *SetReferredSessionState)(IRTCSessionReferredEvent *This, RTC_SESSION_STATE enState);};
struct IShellFavoritesNameSpaceVtbl {HRESULT ( *QueryInterface)(IShellFavoritesNameSpace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFavoritesNameSpace *This);ULONG ( *Release)(IShellFavoritesNameSpace *This);HRESULT ( *GetTypeInfoCount)(IShellFavoritesNameSpace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFavoritesNameSpace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFavoritesNameSpace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFavoritesNameSpace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *MoveSelectionUp)(IShellFavoritesNameSpace *This);HRESULT ( *MoveSelectionDown)(IShellFavoritesNameSpace *This);HRESULT ( *ResetSort)(IShellFavoritesNameSpace *This);HRESULT ( *NewFolder)(IShellFavoritesNameSpace *This);HRESULT ( *Synchronize)(IShellFavoritesNameSpace *This);HRESULT ( *Import)(IShellFavoritesNameSpace *This);HRESULT ( *Export)(IShellFavoritesNameSpace *This);HRESULT ( *InvokeContextMenuCommand)(IShellFavoritesNameSpace *This, BSTR strCommand);HRESULT ( *MoveSelectionTo)(IShellFavoritesNameSpace *This);HRESULT ( *get_SubscriptionsEnabled)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *CreateSubscriptionForSelection)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *DeleteSubscriptionForSelection)(IShellFavoritesNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *SetRoot)(IShellFavoritesNameSpace *This, BSTR bstrFullPath);};
struct IUPnPDescriptionDocumentVtbl {HRESULT ( *QueryInterface)(IUPnPDescriptionDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDescriptionDocument *This);ULONG ( *Release)(IUPnPDescriptionDocument *This);HRESULT ( *GetTypeInfoCount)(IUPnPDescriptionDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPDescriptionDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPDescriptionDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPDescriptionDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ReadyState)(IUPnPDescriptionDocument *This, LONG *plReadyState);HRESULT ( *Load)(IUPnPDescriptionDocument *This, BSTR bstrUrl);HRESULT ( *LoadAsync)(IUPnPDescriptionDocument *This, BSTR bstrUrl, IUnknown *punkCallback);HRESULT ( *get_LoadResult)(IUPnPDescriptionDocument *This, int *phrError);HRESULT ( *Abort)(IUPnPDescriptionDocument *This);HRESULT ( *RootDevice)(IUPnPDescriptionDocument *This, IUPnPDevice **ppudRootDevice);HRESULT ( *DeviceByUDN)(IUPnPDescriptionDocument *This, BSTR bstrUDN, IUPnPDevice **ppudDevice);};
struct IHTMLInputButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputButtonElement *This);ULONG ( *Release)(IHTMLInputButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputButtonElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputButtonElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLInputButtonElement *This, IHTMLTxtRange **range);};
struct IHTMLInputHiddenElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputHiddenElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputHiddenElement *This);ULONG ( *Release)(IHTMLInputHiddenElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputHiddenElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputHiddenElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputHiddenElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputHiddenElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputHiddenElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputHiddenElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputHiddenElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputHiddenElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputHiddenElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputHiddenElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputHiddenElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLInputHiddenElement *This, IHTMLTxtRange **range);};
struct IRTCPresenceStatusEventVtbl {HRESULT ( *QueryInterface)(IRTCPresenceStatusEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCPresenceStatusEvent *This);ULONG ( *Release)(IRTCPresenceStatusEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCPresenceStatusEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCPresenceStatusEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCPresenceStatusEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCPresenceStatusEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_StatusCode)(IRTCPresenceStatusEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCPresenceStatusEvent *This, BSTR *pbstrStatusText);HRESULT ( *GetLocalPresenceInfo)(IRTCPresenceStatusEvent *This, RTC_PRESENCE_STATUS *penStatus, BSTR *pbstrNotes);};
struct IHTMLDOMImplementationVtbl {HRESULT ( *QueryInterface)(IHTMLDOMImplementation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMImplementation *This);ULONG ( *Release)(IHTMLDOMImplementation *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMImplementation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMImplementation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMImplementation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *hasFeature)(IHTMLDOMImplementation *This, BSTR bstrfeature, VARIANT version, VARIANT_BOOL *pfHasFeature);};
struct ISoapTypeMapperFactoryVtbl {HRESULT ( *QueryInterface)(ISoapTypeMapperFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapTypeMapperFactory *This);ULONG ( *Release)(ISoapTypeMapperFactory *This);HRESULT ( *GetTypeInfoCount)(ISoapTypeMapperFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapTypeMapperFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapTypeMapperFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapTypeMapperFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *addSchema)(ISoapTypeMapperFactory *This, IXMLDOMNode *pSchemaNode);HRESULT ( *getElementMapperbyName)(ISoapTypeMapperFactory *This, BSTR bstrElementName, BSTR bstrElementNamespace, ISoapTypeMapper **ppSoapTypeMapper);HRESULT ( *getTypeMapperbyName)(ISoapTypeMapperFactory *This, BSTR bstrTypeName, BSTR bstrTypeNamespace, ISoapTypeMapper **ppSoapTypeMapper);HRESULT ( *getElementMapper)(ISoapTypeMapperFactory *This, IXMLDOMNode *pElementNode, ISoapTypeMapper **ppSoapTypeMapper);HRESULT ( *getTypeMapper)(ISoapTypeMapperFactory *This, IXMLDOMNode *pTypeNode, ISoapTypeMapper **ppSoapTypeMapper);HRESULT ( *addType)(ISoapTypeMapperFactory *This, BSTR bstrTypeName, BSTR bstrTypeNamespace, BSTR bstrProgID);HRESULT ( *addElement)(ISoapTypeMapperFactory *This, BSTR bstrElementName, BSTR bstrElementNamespace, BSTR bstrProgID);HRESULT ( *getMapper)(ISoapTypeMapperFactory *This, enXSDType xsdType, IXMLDOMNode *pSchemaNode, ISoapTypeMapper **ppSoapTypeMapper);HRESULT ( *addTypeObjectMapper)(ISoapTypeMapperFactory *This, BSTR bstrTypeName, BSTR bstrTypeNamespace, BSTR bstrProgID, BSTR bstrIID);HRESULT ( *addElementObjectMapper)(ISoapTypeMapperFactory *This, BSTR bstrElementName, BSTR bstrElementNamespace, BSTR bstrProgID, BSTR bstrIID);};
struct IHTMLInputFileElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputFileElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputFileElement *This);ULONG ( *Release)(IHTMLInputFileElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputFileElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputFileElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputFileElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputFileElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputFileElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputFileElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputFileElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputFileElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputFileElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputFileElement *This, IHTMLFormElement **p);HRESULT ( *put_size)(IHTMLInputFileElement *This, int v);HRESULT ( *get_size)(IHTMLInputFileElement *This, int *p);HRESULT ( *put_maxLength)(IHTMLInputFileElement *This, int v);HRESULT ( *get_maxLength)(IHTMLInputFileElement *This, int *p);HRESULT ( *select)(IHTMLInputFileElement *This);HRESULT ( *put_onchange)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_value)(IHTMLInputFileElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputFileElement *This, BSTR *p);};
struct IHTMLInputTextElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputTextElement *This);ULONG ( *Release)(IHTMLInputTextElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputTextElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputTextElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputTextElement *This, IHTMLFormElement **p);HRESULT ( *put_defaultValue)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_defaultValue)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLInputTextElement *This, int v);HRESULT ( *get_size)(IHTMLInputTextElement *This, int *p);HRESULT ( *put_maxLength)(IHTMLInputTextElement *This, int v);HRESULT ( *get_maxLength)(IHTMLInputTextElement *This, int *p);HRESULT ( *select)(IHTMLInputTextElement *This);HRESULT ( *put_onchange)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_readOnly)(IHTMLInputTextElement *This, VARIANT_BOOL v);HRESULT ( *get_readOnly)(IHTMLInputTextElement *This, VARIANT_BOOL *p);HRESULT ( *createTextRange)(IHTMLInputTextElement *This, IHTMLTxtRange **range);};
struct IXMLDOMImplementationVtbl {HRESULT ( *QueryInterface)(IXMLDOMImplementation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMImplementation *This);ULONG ( *Release)(IXMLDOMImplementation *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMImplementation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMImplementation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMImplementation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *hasFeature)(IXMLDOMImplementation *This, BSTR feature, BSTR version, VARIANT_BOOL *hasFeature);};
struct IAMExtendedErrorInfoVtbl {HRESULT ( *QueryInterface)(IAMExtendedErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtendedErrorInfo *This);ULONG ( *Release)(IAMExtendedErrorInfo *This);HRESULT ( *GetTypeInfoCount)(IAMExtendedErrorInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMExtendedErrorInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMExtendedErrorInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMExtendedErrorInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_HasError)(IAMExtendedErrorInfo *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(IAMExtendedErrorInfo *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(IAMExtendedErrorInfo *This, int *pErrorCode);};
struct IHTMLElementDefaultsVtbl {HRESULT ( *QueryInterface)(IHTMLElementDefaults *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementDefaults *This);ULONG ( *Release)(IHTMLElementDefaults *This);HRESULT ( *GetTypeInfoCount)(IHTMLElementDefaults *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElementDefaults *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElementDefaults *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElementDefaults *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_style)(IHTMLElementDefaults *This, IHTMLStyle **p);HRESULT ( *put_tabStop)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_tabStop)(IHTMLElementDefaults *This, VARIANT_BOOL *p);HRESULT ( *put_viewInheritStyle)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_viewInheritStyle)(IHTMLElementDefaults *This, VARIANT_BOOL *p);HRESULT ( *put_viewMasterTab)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_viewMasterTab)(IHTMLElementDefaults *This, VARIANT_BOOL *p);HRESULT ( *put_scrollSegmentX)(IHTMLElementDefaults *This, int v);HRESULT ( *get_scrollSegmentX)(IHTMLElementDefaults *This, int *p);HRESULT ( *put_scrollSegmentY)(IHTMLElementDefaults *This, int v);HRESULT ( *get_scrollSegmentY)(IHTMLElementDefaults *This, int *p);HRESULT ( *put_isMultiLine)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_isMultiLine)(IHTMLElementDefaults *This, VARIANT_BOOL *p);HRESULT ( *put_contentEditable)(IHTMLElementDefaults *This, BSTR v);HRESULT ( *get_contentEditable)(IHTMLElementDefaults *This, BSTR *p);HRESULT ( *put_canHaveHTML)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_canHaveHTML)(IHTMLElementDefaults *This, VARIANT_BOOL *p);HRESULT ( *putref_viewLink)(IHTMLElementDefaults *This, IHTMLDocument *v);HRESULT ( *get_viewLink)(IHTMLElementDefaults *This, IHTMLDocument **p);HRESULT ( *put_frozen)(IHTMLElementDefaults *This, VARIANT_BOOL v);HRESULT ( *get_frozen)(IHTMLElementDefaults *This, VARIANT_BOOL *p);};
struct IHTMLTextAreaElementVtbl {HRESULT ( *QueryInterface)(IHTMLTextAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextAreaElement *This);ULONG ( *Release)(IHTMLTextAreaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_value)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_name)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLTextAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLTextAreaElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLTextAreaElement *This, IHTMLFormElement **p);HRESULT ( *put_defaultValue)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_defaultValue)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *select)(IHTMLTextAreaElement *This);HRESULT ( *put_onchange)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_readOnly)(IHTMLTextAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_readOnly)(IHTMLTextAreaElement *This, VARIANT_BOOL *p);HRESULT ( *put_rows)(IHTMLTextAreaElement *This, int v);HRESULT ( *get_rows)(IHTMLTextAreaElement *This, int *p);HRESULT ( *put_cols)(IHTMLTextAreaElement *This, int v);HRESULT ( *get_cols)(IHTMLTextAreaElement *This, int *p);HRESULT ( *put_wrap)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_wrap)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *createTextRange)(IHTMLTextAreaElement *This, IHTMLTxtRange **range);};
struct IHTMLMarqueeElementVtbl {HRESULT ( *QueryInterface)(IHTMLMarqueeElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMarqueeElement *This);ULONG ( *Release)(IHTMLMarqueeElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMarqueeElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMarqueeElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMarqueeElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMarqueeElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_bgColor)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_scrollDelay)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_scrollDelay)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_direction)(IHTMLMarqueeElement *This, BSTR v);HRESULT ( *get_direction)(IHTMLMarqueeElement *This, BSTR *p);HRESULT ( *put_behavior)(IHTMLMarqueeElement *This, BSTR v);HRESULT ( *get_behavior)(IHTMLMarqueeElement *This, BSTR *p);HRESULT ( *put_scrollAmount)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_scrollAmount)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_loop)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_loop)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_vspace)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_vspace)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_hspace)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_hspace)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_onfinish)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onfinish)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_onstart)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onstart)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_onbounce)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onbounce)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_width)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_trueSpeed)(IHTMLMarqueeElement *This, VARIANT_BOOL v);HRESULT ( *get_trueSpeed)(IHTMLMarqueeElement *This, VARIANT_BOOL *p);HRESULT ( *start)(IHTMLMarqueeElement *This);HRESULT ( *stop)(IHTMLMarqueeElement *This);};
struct IHTMLObjectElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLObjectElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLObjectElement3 *This);ULONG ( *Release)(IHTMLObjectElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLObjectElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLObjectElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLObjectElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLObjectElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_archive)(IHTMLObjectElement3 *This, BSTR v);HRESULT ( *get_archive)(IHTMLObjectElement3 *This, BSTR *p);HRESULT ( *put_alt)(IHTMLObjectElement3 *This, BSTR v);HRESULT ( *get_alt)(IHTMLObjectElement3 *This, BSTR *p);HRESULT ( *put_declare)(IHTMLObjectElement3 *This, VARIANT_BOOL v);HRESULT ( *get_declare)(IHTMLObjectElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_standby)(IHTMLObjectElement3 *This, BSTR v);HRESULT ( *get_standby)(IHTMLObjectElement3 *This, BSTR *p);HRESULT ( *put_border)(IHTMLObjectElement3 *This, VARIANT v);HRESULT ( *get_border)(IHTMLObjectElement3 *This, VARIANT *p);HRESULT ( *put_useMap)(IHTMLObjectElement3 *This, BSTR v);HRESULT ( *get_useMap)(IHTMLObjectElement3 *This, BSTR *p);};
struct IHTMLOptionElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLOptionElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElement2 *This);ULONG ( *Release)(IHTMLOptionElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(IHTMLOptionElement2 *This, BSTR v);HRESULT ( *get_value)(IHTMLOptionElement2 *This, BSTR *p);HRESULT ( *put_selected)(IHTMLOptionElement2 *This, VARIANT_BOOL v);HRESULT ( *get_selected)(IHTMLOptionElement2 *This, VARIANT_BOOL *p);HRESULT ( *put_defaultSelected)(IHTMLOptionElement2 *This, VARIANT_BOOL v);HRESULT ( *get_defaultSelected)(IHTMLOptionElement2 *This, VARIANT_BOOL *p);HRESULT ( *put_index)(IHTMLOptionElement2 *This, int lIndex);HRESULT ( *get_index)(IHTMLOptionElement2 *This, int *plIndex);HRESULT ( *put_text)(IHTMLOptionElement2 *This, BSTR bstrText);HRESULT ( *get_text)(IHTMLOptionElement2 *This, BSTR *pbstrText);};
struct IHTMLSelectElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLSelectElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectElement3 *This);ULONG ( *Release)(IHTMLSelectElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *clearSelection)(IHTMLSelectElement3 *This);HRESULT ( *selectAll)(IHTMLSelectElement3 *This);HRESULT ( *put_name)(IHTMLSelectElement3 *This, BSTR bstrName);HRESULT ( *get_name)(IHTMLSelectElement3 *This, BSTR *pbstrName);HRESULT ( *put_size)(IHTMLSelectElement3 *This, int lSize);HRESULT ( *get_size)(IHTMLSelectElement3 *This, int *plSize);HRESULT ( *put_selectedIndex)(IHTMLSelectElement3 *This, int lIndex);HRESULT ( *get_selectedIndex)(IHTMLSelectElement3 *This, int *plIndex);HRESULT ( *put_multiple)(IHTMLSelectElement3 *This, VARIANT_BOOL bMultiple);HRESULT ( *get_multiple)(IHTMLSelectElement3 *This, VARIANT_BOOL *bMultiple);HRESULT ( *get_length)(IHTMLSelectElement3 *This, int *plLength);HRESULT ( *get_type)(IHTMLSelectElement3 *This, BSTR *pbstrType);HRESULT ( *get_options)(IHTMLSelectElement3 *This, IDispatch **ppOptions);HRESULT ( *remove)(IHTMLSelectElement3 *This, int lIndex);HRESULT ( *add)(IHTMLSelectElement3 *This, IDispatch *pOption, VARIANT varIndex);HRESULT ( *get__newEnum)(IHTMLSelectElement3 *This, IUnknown **p);HRESULT ( *item)(IHTMLSelectElement3 *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLSelectElement3 *This, VARIANT tagName, IDispatch **pdisp);HRESULT ( *urns)(IHTMLSelectElement3 *This, VARIANT urn, IDispatch **pdisp);};
struct IHTMLStyleSheetRuleVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetRule *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetRule *This);ULONG ( *Release)(IHTMLStyleSheetRule *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetRule *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetRule *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetRule *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetRule *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_selectorText)(IHTMLStyleSheetRule *This, BSTR v);HRESULT ( *get_selectorText)(IHTMLStyleSheetRule *This, BSTR *p);HRESULT ( *get_style)(IHTMLStyleSheetRule *This, IHTMLRuleStyle **p);HRESULT ( *get_readOnly)(IHTMLStyleSheetRule *This, VARIANT_BOOL *p);};
struct ISearchAssistantOC2Vtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC2 *This);ULONG ( *Release)(ISearchAssistantOC2 *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC2 *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC2 *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC2 *This);HRESULT ( *IsRestricted)(ISearchAssistantOC2 *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC2 *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC2 *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC2 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC2 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC2 *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC2 *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC2 *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC2 *This);HRESULT ( *FindComputer)(ISearchAssistantOC2 *This);HRESULT ( *FindPrinter)(ISearchAssistantOC2 *This);HRESULT ( *FindPeople)(ISearchAssistantOC2 *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC2 *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC2 *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC2 *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC2 *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC2 *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC2 *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC2 *This);HRESULT ( *PutFindText)(ISearchAssistantOC2 *This, BSTR FindText);HRESULT ( *get_Version)(ISearchAssistantOC2 *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC2 *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);HRESULT ( *get_ShowFindPrinter)(ISearchAssistantOC2 *This, VARIANT_BOOL *pbShowFindPrinter);};
struct ISearchAssistantOC3Vtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC3 *This);ULONG ( *Release)(ISearchAssistantOC3 *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC3 *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC3 *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC3 *This);HRESULT ( *IsRestricted)(ISearchAssistantOC3 *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC3 *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC3 *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC3 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC3 *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC3 *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC3 *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC3 *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC3 *This);HRESULT ( *FindComputer)(ISearchAssistantOC3 *This);HRESULT ( *FindPrinter)(ISearchAssistantOC3 *This);HRESULT ( *FindPeople)(ISearchAssistantOC3 *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC3 *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC3 *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC3 *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC3 *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC3 *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC3 *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC3 *This);HRESULT ( *PutFindText)(ISearchAssistantOC3 *This, BSTR FindText);HRESULT ( *get_Version)(ISearchAssistantOC3 *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC3 *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);HRESULT ( *get_ShowFindPrinter)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbShowFindPrinter);HRESULT ( *get_SearchCompanionAvailable)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbAvailable);HRESULT ( *put_UseSearchCompanion)(ISearchAssistantOC3 *This, VARIANT_BOOL bUseSC);HRESULT ( *get_UseSearchCompanion)(ISearchAssistantOC3 *This, VARIANT_BOOL *pbUseSC);};
struct IWebViewFolderIcon2Vtbl {HRESULT ( *QueryInterface)(IWebViewFolderIcon2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebViewFolderIcon2 *This);ULONG ( *Release)(IWebViewFolderIcon2 *This);HRESULT ( *GetTypeInfoCount)(IWebViewFolderIcon2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebViewFolderIcon2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebViewFolderIcon2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebViewFolderIcon2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_scale)(IWebViewFolderIcon2 *This, BSTR *MIDL_0020);HRESULT ( *put_scale)(IWebViewFolderIcon2 *This, BSTR MIDL_0021);HRESULT ( *get_path)(IWebViewFolderIcon2 *This, BSTR *MIDL_0022);HRESULT ( *put_path)(IWebViewFolderIcon2 *This, BSTR MIDL_0023);HRESULT ( *get_view)(IWebViewFolderIcon2 *This, BSTR *MIDL_0024);HRESULT ( *put_view)(IWebViewFolderIcon2 *This, BSTR MIDL_0025);HRESULT ( *get_advproperty)(IWebViewFolderIcon2 *This, VARIANT_BOOL *MIDL_0026);HRESULT ( *put_advproperty)(IWebViewFolderIcon2 *This, VARIANT_BOOL MIDL_0027);HRESULT ( *setSlice)(IWebViewFolderIcon2 *This, int index, VARIANT varHiBytes, VARIANT varLoBytes, VARIANT varColorref);};
struct ICSSFilterDispatchVtbl {HRESULT ( *QueryInterface)(ICSSFilterDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICSSFilterDispatch *This);ULONG ( *Release)(ICSSFilterDispatch *This);HRESULT ( *GetTypeInfoCount)(ICSSFilterDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICSSFilterDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICSSFilterDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICSSFilterDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Percent)(ICSSFilterDispatch *This, float *pVal);HRESULT ( *put_Percent)(ICSSFilterDispatch *This, float newVal);HRESULT ( *get_Duration)(ICSSFilterDispatch *This, float *pVal);HRESULT ( *put_Duration)(ICSSFilterDispatch *This, float newVal);HRESULT ( *get_Enabled)(ICSSFilterDispatch *This, VARIANT_BOOL *pfVal);HRESULT ( *put_Enabled)(ICSSFilterDispatch *This, VARIANT_BOOL fVal);HRESULT ( *get_Status)(ICSSFilterDispatch *This, DXTFILTER_STATUS *peVal);HRESULT ( *Apply)(ICSSFilterDispatch *This);HRESULT ( *Play)(ICSSFilterDispatch *This, VARIANT varDuration);HRESULT ( *Stop)(ICSSFilterDispatch *This);};
struct IHTMLButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLButtonElement *This);ULONG ( *Release)(IHTMLButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLButtonElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLButtonElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLButtonElement *This, IHTMLTxtRange **range);};
struct IHTMLCurrentStyle2Vtbl {HRESULT ( *QueryInterface)(IHTMLCurrentStyle2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCurrentStyle2 *This);ULONG ( *Release)(IHTMLCurrentStyle2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLCurrentStyle2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCurrentStyle2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCurrentStyle2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCurrentStyle2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_layoutFlow)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_wordWrap)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_textUnderlinePosition)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_hasLayout)(IHTMLCurrentStyle2 *This, VARIANT_BOOL *p);HRESULT ( *get_scrollbarBaseColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarFaceColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbar3dLightColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarShadowColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarHighlightColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarDarkShadowColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarArrowColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_scrollbarTrackColor)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_writingMode)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_zoom)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_filter)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_textAlignLast)(IHTMLCurrentStyle2 *This, BSTR *p);HRESULT ( *get_textKashidaSpace)(IHTMLCurrentStyle2 *This, VARIANT *p);HRESULT ( *get_isBlock)(IHTMLCurrentStyle2 *This, VARIANT_BOOL *p);};
struct IHTMLDOMAttribute2Vtbl {HRESULT ( *QueryInterface)(IHTMLDOMAttribute2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMAttribute2 *This);ULONG ( *Release)(IHTMLDOMAttribute2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMAttribute2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMAttribute2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMAttribute2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMAttribute2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_name)(IHTMLDOMAttribute2 *This, BSTR *p);HRESULT ( *put_value)(IHTMLDOMAttribute2 *This, BSTR v);HRESULT ( *get_value)(IHTMLDOMAttribute2 *This, BSTR *p);HRESULT ( *get_expando)(IHTMLDOMAttribute2 *This, VARIANT_BOOL *p);HRESULT ( *get_nodeType)(IHTMLDOMAttribute2 *This, int *p);HRESULT ( *get_parentNode)(IHTMLDOMAttribute2 *This, IHTMLDOMNode **p);HRESULT ( *get_childNodes)(IHTMLDOMAttribute2 *This, IDispatch **p);HRESULT ( *get_firstChild)(IHTMLDOMAttribute2 *This, IHTMLDOMNode **p);HRESULT ( *get_lastChild)(IHTMLDOMAttribute2 *This, IHTMLDOMNode **p);HRESULT ( *get_previousSibling)(IHTMLDOMAttribute2 *This, IHTMLDOMNode **p);HRESULT ( *get_nextSibling)(IHTMLDOMAttribute2 *This, IHTMLDOMNode **p);HRESULT ( *get_attributes)(IHTMLDOMAttribute2 *This, IDispatch **p);HRESULT ( *get_ownerDocument)(IHTMLDOMAttribute2 *This, IDispatch **p);HRESULT ( *insertBefore)(IHTMLDOMAttribute2 *This, IHTMLDOMNode *newChild, VARIANT refChild, IHTMLDOMNode **node);HRESULT ( *replaceChild)(IHTMLDOMAttribute2 *This, IHTMLDOMNode *newChild, IHTMLDOMNode *oldChild, IHTMLDOMNode **node);HRESULT ( *removeChild)(IHTMLDOMAttribute2 *This, IHTMLDOMNode *oldChild, IHTMLDOMNode **node);HRESULT ( *appendChild)(IHTMLDOMAttribute2 *This, IHTMLDOMNode *newChild, IHTMLDOMNode **node);HRESULT ( *hasChildNodes)(IHTMLDOMAttribute2 *This, VARIANT_BOOL *fChildren);HRESULT ( *cloneNode)(IHTMLDOMAttribute2 *This, VARIANT_BOOL fDeep, IHTMLDOMAttribute **clonedNode);};
struct IHTMLOptionsHolderVtbl {HRESULT ( *QueryInterface)(IHTMLOptionsHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionsHolder *This);ULONG ( *Release)(IHTMLOptionsHolder *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionsHolder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionsHolder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionsHolder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionsHolder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_document)(IHTMLOptionsHolder *This, IHTMLDocument2 **p);HRESULT ( *get_fonts)(IHTMLOptionsHolder *This, IHTMLFontNamesCollection **p);HRESULT ( *put_execArg)(IHTMLOptionsHolder *This, VARIANT v);HRESULT ( *get_execArg)(IHTMLOptionsHolder *This, VARIANT *p);HRESULT ( *put_errorLine)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorLine)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorCharacter)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorCharacter)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorCode)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorCode)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorMessage)(IHTMLOptionsHolder *This, BSTR v);HRESULT ( *get_errorMessage)(IHTMLOptionsHolder *This, BSTR *p);HRESULT ( *put_errorDebug)(IHTMLOptionsHolder *This, VARIANT_BOOL v);HRESULT ( *get_errorDebug)(IHTMLOptionsHolder *This, VARIANT_BOOL *p);HRESULT ( *get_unsecuredWindowOfDocument)(IHTMLOptionsHolder *This, IHTMLWindow2 **p);HRESULT ( *put_findText)(IHTMLOptionsHolder *This, BSTR v);HRESULT ( *get_findText)(IHTMLOptionsHolder *This, BSTR *p);HRESULT ( *put_anythingAfterFrameset)(IHTMLOptionsHolder *This, VARIANT_BOOL v);HRESULT ( *get_anythingAfterFrameset)(IHTMLOptionsHolder *This, VARIANT_BOOL *p);HRESULT ( *sizes)(IHTMLOptionsHolder *This, BSTR fontName, IHTMLFontSizesCollection **pSizesCollection);HRESULT ( *openfiledlg)(IHTMLOptionsHolder *This, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR *pathName);HRESULT ( *savefiledlg)(IHTMLOptionsHolder *This, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR *pathName);HRESULT ( *choosecolordlg)(IHTMLOptionsHolder *This, VARIANT initColor, int *rgbColor);HRESULT ( *showSecurityInfo)(IHTMLOptionsHolder *This);HRESULT ( *isApartmentModel)(IHTMLOptionsHolder *This, IHTMLObjectElement *object, VARIANT_BOOL *fApartment);HRESULT ( *getCharset)(IHTMLOptionsHolder *This, BSTR fontName, int *charset);HRESULT ( *get_secureConnectionInfo)(IHTMLOptionsHolder *This, BSTR *p);};
struct IHTMLScriptElementVtbl {HRESULT ( *QueryInterface)(IHTMLScriptElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScriptElement *This);ULONG ( *Release)(IHTMLScriptElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLScriptElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScriptElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScriptElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScriptElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_src)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_htmlFor)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_htmlFor)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_event)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_event)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_text)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_text)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_defer)(IHTMLScriptElement *This, VARIANT_BOOL v);HRESULT ( *get_defer)(IHTMLScriptElement *This, VARIANT_BOOL *p);HRESULT ( *get_readyState)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_onerror)(IHTMLScriptElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLScriptElement *This, VARIANT *p);HRESULT ( *put_type)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_type)(IHTMLScriptElement *This, BSTR *p);};
struct IHTMLSelectElementVtbl {HRESULT ( *QueryInterface)(IHTMLSelectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectElement *This);ULONG ( *Release)(IHTMLSelectElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_size)(IHTMLSelectElement *This, int v);HRESULT ( *get_size)(IHTMLSelectElement *This, int *p);HRESULT ( *put_multiple)(IHTMLSelectElement *This, VARIANT_BOOL v);HRESULT ( *get_multiple)(IHTMLSelectElement *This, VARIANT_BOOL *p);HRESULT ( *put_name)(IHTMLSelectElement *This, BSTR v);HRESULT ( *get_name)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *get_options)(IHTMLSelectElement *This, IDispatch **p);HRESULT ( *put_onchange)(IHTMLSelectElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLSelectElement *This, VARIANT *p);HRESULT ( *put_selectedIndex)(IHTMLSelectElement *This, int v);HRESULT ( *get_selectedIndex)(IHTMLSelectElement *This, int *p);HRESULT ( *get_type)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLSelectElement *This, BSTR v);HRESULT ( *get_value)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *put_disabled)(IHTMLSelectElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLSelectElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLSelectElement *This, IHTMLFormElement **p);HRESULT ( *add)(IHTMLSelectElement *This, IHTMLElement *element, VARIANT before);HRESULT ( *remove)(IHTMLSelectElement *This, int index);HRESULT ( *put_length)(IHTMLSelectElement *This, int v);HRESULT ( *get_length)(IHTMLSelectElement *This, int *p);HRESULT ( *get__newEnum)(IHTMLSelectElement *This, IUnknown **p);HRESULT ( *item)(IHTMLSelectElement *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLSelectElement *This, VARIANT tagName, IDispatch **pdisp);};
struct IMessengerIMWindowVtbl {HRESULT ( *QueryInterface)(IMessengerIMWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessengerIMWindow *This);ULONG ( *Release)(IMessengerIMWindow *This);HRESULT ( *GetTypeInfoCount)(IMessengerIMWindow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMessengerIMWindow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMessengerIMWindow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMessengerIMWindow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IMessengerIMWindow *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IMessengerIMWindow *This, IDispatch **ppDisp);HRESULT ( *get_IMSession)(IMessengerIMWindow *This, IMsgrIMSession **ppIMSession);HRESULT ( *get_History)(IMessengerIMWindow *This, BSTR *pbstrHistory);HRESULT ( *SendText)(IMessengerIMWindow *This, BSTR bstrSendText);HRESULT ( *Close)(IMessengerIMWindow *This);HRESULT ( *get_ToolBar)(IMessengerIMWindow *This, VARIANT_BOOL *pBoolToolBar);HRESULT ( *put_ToolBar)(IMessengerIMWindow *This, VARIANT_BOOL BoolToolBar);HRESULT ( *get_StatusBar)(IMessengerIMWindow *This, VARIANT_BOOL *pBoolStatusBar);HRESULT ( *put_StatusBar)(IMessengerIMWindow *This, VARIANT_BOOL BoolStatusBar);HRESULT ( *get_StatusText)(IMessengerIMWindow *This, BSTR *pbstrStatusText);HRESULT ( *put_StatusText)(IMessengerIMWindow *This, BSTR bstrStatusText);HRESULT ( *get_HWND)(IMessengerIMWindow *This, int *phWnd);HRESULT ( *get_Left)(IMessengerIMWindow *This, int *plLeft);HRESULT ( *put_Left)(IMessengerIMWindow *This, int lLeft);HRESULT ( *get_Top)(IMessengerIMWindow *This, int *plTop);HRESULT ( *put_Top)(IMessengerIMWindow *This, int lTop);HRESULT ( *get_Width)(IMessengerIMWindow *This, int *plWidth);HRESULT ( *put_Width)(IMessengerIMWindow *This, int lWidth);HRESULT ( *get_Height)(IMessengerIMWindow *This, int *plHeight);HRESULT ( *put_Height)(IMessengerIMWindow *This, int lHeight);HRESULT ( *get_Visible)(IMessengerIMWindow *This, VARIANT_BOOL *pBoolVisible);HRESULT ( *put_Visible)(IMessengerIMWindow *This, VARIANT_BOOL BoolVisible);};
struct ISearchAssistantOCVtbl {HRESULT ( *QueryInterface)(ISearchAssistantOC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchAssistantOC *This);ULONG ( *Release)(ISearchAssistantOC *This);HRESULT ( *GetTypeInfoCount)(ISearchAssistantOC *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchAssistantOC *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchAssistantOC *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchAssistantOC *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddNextMenuItem)(ISearchAssistantOC *This, BSTR bstrText, int idItem);HRESULT ( *SetDefaultSearchUrl)(ISearchAssistantOC *This, BSTR bstrUrl);HRESULT ( *NavigateToDefaultSearch)(ISearchAssistantOC *This);HRESULT ( *IsRestricted)(ISearchAssistantOC *This, BSTR bstrGuid, VARIANT_BOOL *pVal);HRESULT ( *get_ShellFeaturesEnabled)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *get_SearchAssistantDefault)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *get_Searches)(ISearchAssistantOC *This, ISearches **ppid);HRESULT ( *get_InWebFolder)(ISearchAssistantOC *This, VARIANT_BOOL *pVal);HRESULT ( *PutProperty)(ISearchAssistantOC *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR bstrValue);HRESULT ( *GetProperty)(ISearchAssistantOC *This, VARIANT_BOOL bPerLocale, BSTR bstrName, BSTR *pbstrValue);HRESULT ( *put_EventHandled)(ISearchAssistantOC *This, VARIANT_BOOL bHandled);HRESULT ( *ResetNextMenu)(ISearchAssistantOC *This);HRESULT ( *FindOnWeb)(ISearchAssistantOC *This);HRESULT ( *FindFilesOrFolders)(ISearchAssistantOC *This);HRESULT ( *FindComputer)(ISearchAssistantOC *This);HRESULT ( *FindPrinter)(ISearchAssistantOC *This);HRESULT ( *FindPeople)(ISearchAssistantOC *This);HRESULT ( *GetSearchAssistantURL)(ISearchAssistantOC *This, VARIANT_BOOL bSubstitute, VARIANT_BOOL bCustomize, BSTR *pbstrValue);HRESULT ( *NotifySearchSettingsChanged)(ISearchAssistantOC *This);HRESULT ( *put_ASProvider)(ISearchAssistantOC *This, BSTR Provider);HRESULT ( *get_ASProvider)(ISearchAssistantOC *This, BSTR *pProvider);HRESULT ( *put_ASSetting)(ISearchAssistantOC *This, int Setting);HRESULT ( *get_ASSetting)(ISearchAssistantOC *This, int *pSetting);HRESULT ( *NETDetectNextNavigate)(ISearchAssistantOC *This);HRESULT ( *PutFindText)(ISearchAssistantOC *This, BSTR FindText);HRESULT ( *get_Version)(ISearchAssistantOC *This, int *pVersion);HRESULT ( *EncodeString)(ISearchAssistantOC *This, BSTR bstrValue, BSTR bstrCharSet, VARIANT_BOOL bUseUTF8, BSTR *pbstrResult);};
struct IWebViewFolderIconVtbl {HRESULT ( *QueryInterface)(IWebViewFolderIcon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebViewFolderIcon *This);ULONG ( *Release)(IWebViewFolderIcon *This);HRESULT ( *GetTypeInfoCount)(IWebViewFolderIcon *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebViewFolderIcon *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebViewFolderIcon *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebViewFolderIcon *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_scale)(IWebViewFolderIcon *This, BSTR *MIDL_0020);HRESULT ( *put_scale)(IWebViewFolderIcon *This, BSTR MIDL_0021);HRESULT ( *get_path)(IWebViewFolderIcon *This, BSTR *MIDL_0022);HRESULT ( *put_path)(IWebViewFolderIcon *This, BSTR MIDL_0023);HRESULT ( *get_view)(IWebViewFolderIcon *This, BSTR *MIDL_0024);HRESULT ( *put_view)(IWebViewFolderIcon *This, BSTR MIDL_0025);HRESULT ( *get_advproperty)(IWebViewFolderIcon *This, VARIANT_BOOL *MIDL_0026);HRESULT ( *put_advproperty)(IWebViewFolderIcon *This, VARIANT_BOOL MIDL_0027);};
struct IDirectShowStreamVtbl {HRESULT ( *QueryInterface)(IDirectShowStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectShowStream *This);ULONG ( *Release)(IDirectShowStream *This);HRESULT ( *GetTypeInfoCount)(IDirectShowStream *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDirectShowStream *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDirectShowStream *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDirectShowStream *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_FileName)(IDirectShowStream *This, BSTR *pVal);HRESULT ( *put_FileName)(IDirectShowStream *This, BSTR newVal);HRESULT ( *get_Video)(IDirectShowStream *This, OUTPUT_STATE *pVal);HRESULT ( *put_Video)(IDirectShowStream *This, OUTPUT_STATE newVal);HRESULT ( *get_Audio)(IDirectShowStream *This, OUTPUT_STATE *pVal);HRESULT ( *put_Audio)(IDirectShowStream *This, OUTPUT_STATE newVal);};
struct IHTMLControlRangeVtbl {HRESULT ( *QueryInterface)(IHTMLControlRange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLControlRange *This);ULONG ( *Release)(IHTMLControlRange *This);HRESULT ( *GetTypeInfoCount)(IHTMLControlRange *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLControlRange *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLControlRange *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLControlRange *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *select)(IHTMLControlRange *This);HRESULT ( *add)(IHTMLControlRange *This, IHTMLControlElement *item);HRESULT ( *remove)(IHTMLControlRange *This, int index);HRESULT ( *item)(IHTMLControlRange *This, int index, IHTMLElement **pdisp);HRESULT ( *scrollIntoView)(IHTMLControlRange *This, VARIANT varargStart);HRESULT ( *queryCommandSupported)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLControlRange *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLControlRange *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *commonParentElement)(IHTMLControlRange *This, IHTMLElement **parent);HRESULT ( *get_length)(IHTMLControlRange *This, int *p);};
struct IHTMLCurrentStyleVtbl {HRESULT ( *QueryInterface)(IHTMLCurrentStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCurrentStyle *This);ULONG ( *Release)(IHTMLCurrentStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLCurrentStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCurrentStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCurrentStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCurrentStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_position)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_styleFloat)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_color)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_backgroundColor)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_fontFamily)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_fontStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_fontVariant)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_fontWeight)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_fontSize)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_backgroundImage)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_backgroundPositionX)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_backgroundPositionY)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_backgroundRepeat)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderLeftColor)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderTopColor)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderRightColor)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderBottomColor)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderTopStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderRightStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderBottomStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderLeftStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderTopWidth)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderRightWidth)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderBottomWidth)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_borderLeftWidth)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_left)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_top)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_width)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_height)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_paddingLeft)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_paddingTop)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_paddingRight)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_paddingBottom)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_textAlign)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textDecoration)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_display)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_visibility)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_zIndex)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_letterSpacing)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_lineHeight)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_textIndent)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_verticalAlign)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_backgroundAttachment)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_marginTop)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_marginRight)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_marginBottom)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_marginLeft)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_clear)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_listStyleType)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_listStylePosition)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_listStyleImage)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_clipTop)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_clipRight)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_clipBottom)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_clipLeft)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_overflow)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_pageBreakBefore)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_pageBreakAfter)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_cursor)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_tableLayout)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderCollapse)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_direction)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_behavior)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *getAttribute)(IHTMLCurrentStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *get_unicodeBidi)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_right)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_bottom)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_imeMode)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_rubyAlign)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_rubyPosition)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_rubyOverhang)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textAutospace)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_lineBreak)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_wordBreak)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textJustify)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textJustifyTrim)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textKashida)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_blockDirection)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_layoutGridChar)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_layoutGridLine)(IHTMLCurrentStyle *This, VARIANT *p);HRESULT ( *get_layoutGridMode)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_layoutGridType)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderStyle)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderColor)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_borderWidth)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_padding)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_margin)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_accelerator)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_overflowX)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_overflowY)(IHTMLCurrentStyle *This, BSTR *p);HRESULT ( *get_textTransform)(IHTMLCurrentStyle *This, BSTR *p);};
struct IHTMLDOMAttributeVtbl {HRESULT ( *QueryInterface)(IHTMLDOMAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMAttribute *This);ULONG ( *Release)(IHTMLDOMAttribute *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IHTMLDOMAttribute *This, BSTR *p);HRESULT ( *put_nodeValue)(IHTMLDOMAttribute *This, VARIANT v);HRESULT ( *get_nodeValue)(IHTMLDOMAttribute *This, VARIANT *p);HRESULT ( *get_specified)(IHTMLDOMAttribute *This, VARIANT_BOOL *p);};
struct IHTMLDataTransferVtbl {HRESULT ( *QueryInterface)(IHTMLDataTransfer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDataTransfer *This);ULONG ( *Release)(IHTMLDataTransfer *This);HRESULT ( *GetTypeInfoCount)(IHTMLDataTransfer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDataTransfer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDataTransfer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDataTransfer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *setData)(IHTMLDataTransfer *This, BSTR format, VARIANT *data, VARIANT_BOOL *pret);HRESULT ( *getData)(IHTMLDataTransfer *This, BSTR format, VARIANT *pvarRet);HRESULT ( *clearData)(IHTMLDataTransfer *This, BSTR format, VARIANT_BOOL *pret);HRESULT ( *put_dropEffect)(IHTMLDataTransfer *This, BSTR v);HRESULT ( *get_dropEffect)(IHTMLDataTransfer *This, BSTR *p);HRESULT ( *put_effectAllowed)(IHTMLDataTransfer *This, BSTR v);HRESULT ( *get_effectAllowed)(IHTMLDataTransfer *This, BSTR *p);};
struct IHTMLInputElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputElement *This);ULONG ( *Release)(IHTMLInputElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_type)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_type)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_status)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *put_disabled)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputElement *This, IHTMLFormElement **p);HRESULT ( *put_size)(IHTMLInputElement *This, int v);HRESULT ( *get_size)(IHTMLInputElement *This, int *p);HRESULT ( *put_maxLength)(IHTMLInputElement *This, int v);HRESULT ( *get_maxLength)(IHTMLInputElement *This, int *p);HRESULT ( *select)(IHTMLInputElement *This);HRESULT ( *put_onchange)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_defaultValue)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_defaultValue)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_readOnly)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_readOnly)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *createTextRange)(IHTMLInputElement *This, IHTMLTxtRange **range);HRESULT ( *put_indeterminate)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_indeterminate)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *put_defaultChecked)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_defaultChecked)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *put_checked)(IHTMLInputElement *This, VARIANT_BOOL v);HRESULT ( *get_checked)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *put_border)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_border)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_vspace)(IHTMLInputElement *This, int v);HRESULT ( *get_vspace)(IHTMLInputElement *This, int *p);HRESULT ( *put_hspace)(IHTMLInputElement *This, int v);HRESULT ( *get_hspace)(IHTMLInputElement *This, int *p);HRESULT ( *put_alt)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_alt)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_src)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_src)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_lowsrc)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_lowsrc)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_vrml)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_vrml)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_dynsrc)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_dynsrc)(IHTMLInputElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLInputElement *This, BSTR *p);HRESULT ( *get_complete)(IHTMLInputElement *This, VARIANT_BOOL *p);HRESULT ( *put_loop)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_loop)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_align)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_align)(IHTMLInputElement *This, BSTR *p);HRESULT ( *put_onload)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_onabort)(IHTMLInputElement *This, VARIANT v);HRESULT ( *get_onabort)(IHTMLInputElement *This, VARIANT *p);HRESULT ( *put_width)(IHTMLInputElement *This, int v);HRESULT ( *get_width)(IHTMLInputElement *This, int *p);HRESULT ( *put_height)(IHTMLInputElement *This, int v);HRESULT ( *get_height)(IHTMLInputElement *This, int *p);HRESULT ( *put_start)(IHTMLInputElement *This, BSTR v);HRESULT ( *get_start)(IHTMLInputElement *This, BSTR *p);};
struct IHTMLOListElementVtbl {HRESULT ( *QueryInterface)(IHTMLOListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOListElement *This);ULONG ( *Release)(IHTMLOListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLOListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLOListElement *This, VARIANT_BOOL *p);HRESULT ( *put_start)(IHTMLOListElement *This, int v);HRESULT ( *get_start)(IHTMLOListElement *This, int *p);HRESULT ( *put_type)(IHTMLOListElement *This, BSTR v);HRESULT ( *get_type)(IHTMLOListElement *This, BSTR *p);};
struct IHTMLStyleElementVtbl {HRESULT ( *QueryInterface)(IHTMLStyleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleElement *This);ULONG ( *Release)(IHTMLStyleElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_type)(IHTMLStyleElement *This, BSTR v);HRESULT ( *get_type)(IHTMLStyleElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLStyleElement *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *get_styleSheet)(IHTMLStyleElement *This, IHTMLStyleSheet **p);HRESULT ( *put_disabled)(IHTMLStyleElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLStyleElement *This, VARIANT_BOOL *p);HRESULT ( *put_media)(IHTMLStyleElement *This, BSTR v);HRESULT ( *get_media)(IHTMLStyleElement *This, BSTR *p);};
struct IHTMLUListElementVtbl {HRESULT ( *QueryInterface)(IHTMLUListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUListElement *This);ULONG ( *Release)(IHTMLUListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLUListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLUListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLUListElement *This, VARIANT_BOOL *p);HRESULT ( *put_type)(IHTMLUListElement *This, BSTR v);HRESULT ( *get_type)(IHTMLUListElement *This, BSTR *p);};
struct IRTCProfileEvent2Vtbl {HRESULT ( *QueryInterface)(IRTCProfileEvent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCProfileEvent2 *This);ULONG ( *Release)(IRTCProfileEvent2 *This);HRESULT ( *GetTypeInfoCount)(IRTCProfileEvent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCProfileEvent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCProfileEvent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCProfileEvent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Profile)(IRTCProfileEvent2 *This, IRTCProfile **ppProfile);HRESULT ( *get_Cookie)(IRTCProfileEvent2 *This, LONG_PTR *plCookie);HRESULT ( *get_StatusCode)(IRTCProfileEvent2 *This, int *plStatusCode);HRESULT ( *get_EventType)(IRTCProfileEvent2 *This, RTC_PROFILE_EVENT_TYPE *pEventType);};
struct IRTCReInviteEventVtbl {HRESULT ( *QueryInterface)(IRTCReInviteEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCReInviteEvent *This);ULONG ( *Release)(IRTCReInviteEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCReInviteEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCReInviteEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCReInviteEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCReInviteEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCReInviteEvent *This, IRTCSession2 **ppSession2);HRESULT ( *Accept)(IRTCReInviteEvent *This, BSTR bstrContentType, BSTR bstrSessionDescription);HRESULT ( *Reject)(IRTCReInviteEvent *This);HRESULT ( *get_State)(IRTCReInviteEvent *This, RTC_REINVITE_STATE *pState);HRESULT ( *GetRemoteSessionDescription)(IRTCReInviteEvent *This, BSTR *pbstrContentType, BSTR *pbstrSessionDescription);};
struct ISearchCommandExtVtbl {HRESULT ( *QueryInterface)(ISearchCommandExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISearchCommandExt *This);ULONG ( *Release)(ISearchCommandExt *This);HRESULT ( *GetTypeInfoCount)(ISearchCommandExt *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISearchCommandExt *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISearchCommandExt *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISearchCommandExt *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ClearResults)(ISearchCommandExt *This);HRESULT ( *NavigateToSearchResults)(ISearchCommandExt *This);HRESULT ( *get_ProgressText)(ISearchCommandExt *This, BSTR *pbs);HRESULT ( *SaveSearch)(ISearchCommandExt *This);HRESULT ( *GetErrorInfo)(ISearchCommandExt *This, BSTR *pbs, int *phr);HRESULT ( *SearchFor)(ISearchCommandExt *This, int iFor);HRESULT ( *GetScopeInfo)(ISearchCommandExt *This, BSTR bsScope, int *pdwScopeInfo);HRESULT ( *RestoreSavedSearch)(ISearchCommandExt *This, VARIANT *pvarFile);HRESULT ( *Execute)(ISearchCommandExt *This, VARIANT *RecordsAffected, VARIANT *Parameters, int Options);HRESULT ( *AddConstraint)(ISearchCommandExt *This, BSTR Name, VARIANT Value);HRESULT ( *GetNextConstraint)(ISearchCommandExt *This, VARIANT_BOOL fReset, DFConstraint **ppdfc);};
struct IAMMediaContent2Vtbl {HRESULT ( *QueryInterface)(IAMMediaContent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaContent2 *This);ULONG ( *Release)(IAMMediaContent2 *This);HRESULT ( *GetTypeInfoCount)(IAMMediaContent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMMediaContent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMMediaContent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMMediaContent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AuthorName)(IAMMediaContent2 *This, BSTR *pbstrAuthorName);HRESULT ( *get_Title)(IAMMediaContent2 *This, BSTR *pbstrTitle);HRESULT ( *get_Rating)(IAMMediaContent2 *This, BSTR *pbstrRating);HRESULT ( *get_Description)(IAMMediaContent2 *This, BSTR *pbstrDescription);HRESULT ( *get_Copyright)(IAMMediaContent2 *This, BSTR *pbstrCopyright);HRESULT ( *get_BaseURL)(IAMMediaContent2 *This, BSTR *pbstrBaseURL);HRESULT ( *get_LogoURL)(IAMMediaContent2 *This, BSTR *pbstrLogoURL);HRESULT ( *get_LogoIconURL)(IAMMediaContent2 *This, BSTR *pbstrLogoURL);HRESULT ( *get_WatermarkURL)(IAMMediaContent2 *This, BSTR *pbstrWatermarkURL);HRESULT ( *get_MoreInfoURL)(IAMMediaContent2 *This, BSTR *pbstrMoreInfoURL);HRESULT ( *get_MoreInfoBannerImage)(IAMMediaContent2 *This, BSTR *pbstrMoreInfoBannerImage);HRESULT ( *get_MoreInfoBannerURL)(IAMMediaContent2 *This, BSTR *pbstrMoreInfoBannerURL);HRESULT ( *get_MoreInfoText)(IAMMediaContent2 *This, BSTR *pbstrMoreInfoText);HRESULT ( *get_MoreInfoBannerBitmap)(IAMMediaContent2 *This, LONG *pMoreInfoBannerBitmap);};
struct IAMNetShowConfigVtbl {HRESULT ( *QueryInterface)(IAMNetShowConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMNetShowConfig *This);ULONG ( *Release)(IAMNetShowConfig *This);HRESULT ( *GetTypeInfoCount)(IAMNetShowConfig *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetShowConfig *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMNetShowConfig *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMNetShowConfig *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_BufferingTime)(IAMNetShowConfig *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(IAMNetShowConfig *This, double BufferingTime);HRESULT ( *get_UseFixedUDPPort)(IAMNetShowConfig *This, VARIANT_BOOL *pUseFixedUDPPort);HRESULT ( *put_UseFixedUDPPort)(IAMNetShowConfig *This, VARIANT_BOOL UseFixedUDPPort);HRESULT ( *get_FixedUDPPort)(IAMNetShowConfig *This, int *pFixedUDPPort);HRESULT ( *put_FixedUDPPort)(IAMNetShowConfig *This, int FixedUDPPort);HRESULT ( *get_UseHTTPProxy)(IAMNetShowConfig *This, VARIANT_BOOL *pUseHTTPProxy);HRESULT ( *put_UseHTTPProxy)(IAMNetShowConfig *This, VARIANT_BOOL UseHTTPProxy);HRESULT ( *get_EnableAutoProxy)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableAutoProxy);HRESULT ( *put_EnableAutoProxy)(IAMNetShowConfig *This, VARIANT_BOOL EnableAutoProxy);HRESULT ( *get_HTTPProxyHost)(IAMNetShowConfig *This, BSTR *pbstrHTTPProxyHost);HRESULT ( *put_HTTPProxyHost)(IAMNetShowConfig *This, BSTR bstrHTTPProxyHost);HRESULT ( *get_HTTPProxyPort)(IAMNetShowConfig *This, int *pHTTPProxyPort);HRESULT ( *put_HTTPProxyPort)(IAMNetShowConfig *This, int HTTPProxyPort);HRESULT ( *get_EnableMulticast)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableMulticast);HRESULT ( *put_EnableMulticast)(IAMNetShowConfig *This, VARIANT_BOOL EnableMulticast);HRESULT ( *get_EnableUDP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableUDP);HRESULT ( *put_EnableUDP)(IAMNetShowConfig *This, VARIANT_BOOL EnableUDP);HRESULT ( *get_EnableTCP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableTCP);HRESULT ( *put_EnableTCP)(IAMNetShowConfig *This, VARIANT_BOOL EnableTCP);HRESULT ( *get_EnableHTTP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableHTTP);HRESULT ( *put_EnableHTTP)(IAMNetShowConfig *This, VARIANT_BOOL EnableHTTP);};
struct IHTMLAreaElementVtbl {HRESULT ( *QueryInterface)(IHTMLAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreaElement *This);ULONG ( *Release)(IHTMLAreaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_shape)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_shape)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_coords)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_coords)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_href)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_href)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_target)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_alt)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_alt)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_noHref)(IHTMLAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_noHref)(IHTMLAreaElement *This, VARIANT_BOOL *p);HRESULT ( *put_host)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_host)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_hostname)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_pathname)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_port)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_port)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_protocol)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_search)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_search)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_hash)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_hash)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLAreaElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLAreaElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLAreaElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLAreaElement *This, VARIANT *p);HRESULT ( *put_tabIndex)(IHTMLAreaElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLAreaElement *This, short *p);HRESULT ( *focus)(IHTMLAreaElement *This);HRESULT ( *blur)(IHTMLAreaElement *This);};
struct IHTMLBodyElementVtbl {HRESULT ( *QueryInterface)(IHTMLBodyElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBodyElement *This);ULONG ( *Release)(IHTMLBodyElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBodyElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBodyElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBodyElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBodyElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_background)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_background)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_bgProperties)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_bgProperties)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_leftMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_leftMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_topMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_topMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_rightMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_rightMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_bottomMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_bottomMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_noWrap)(IHTMLBodyElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLBodyElement *This, VARIANT_BOOL *p);HRESULT ( *put_bgColor)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_text)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_text)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_link)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_link)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_vLink)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_vLink)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_aLink)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_aLink)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_scroll)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_scroll)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_onselect)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *createTextRange)(IHTMLBodyElement *This, IHTMLTxtRange **range);};
struct IHTMLLinkElementVtbl {HRESULT ( *QueryInterface)(IHTMLLinkElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLinkElement *This);ULONG ( *Release)(IHTMLLinkElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLinkElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLinkElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLinkElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLinkElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_href)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_rel)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_rel)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_rev)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_rev)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_type)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_type)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *get_styleSheet)(IHTMLLinkElement *This, IHTMLStyleSheet **p);HRESULT ( *put_disabled)(IHTMLLinkElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLLinkElement *This, VARIANT_BOOL *p);HRESULT ( *put_media)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_media)(IHTMLLinkElement *This, BSTR *p);};
struct IOleInPlaceFrameVtbl {HRESULT ( *QueryInterface)(IOleInPlaceFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceFrame *This);ULONG ( *Release)(IOleInPlaceFrame *This);HRESULT ( *GetWindow)(IOleInPlaceFrame *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);HRESULT ( *InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);HRESULT ( *RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);HRESULT ( *SetStatusText)(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);HRESULT ( *EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);};
struct IRTCRoamingEventVtbl {HRESULT ( *QueryInterface)(IRTCRoamingEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCRoamingEvent *This);ULONG ( *Release)(IRTCRoamingEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCRoamingEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCRoamingEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCRoamingEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCRoamingEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_EventType)(IRTCRoamingEvent *This, RTC_ROAMING_EVENT_TYPE *pEventType);HRESULT ( *get_Profile)(IRTCRoamingEvent *This, IRTCProfile2 **ppProfile);HRESULT ( *get_StatusCode)(IRTCRoamingEvent *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCRoamingEvent *This, BSTR *pbstrStatusText);};
struct ITemplatePrinterVtbl {HRESULT ( *QueryInterface)(ITemplatePrinter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITemplatePrinter *This);ULONG ( *Release)(ITemplatePrinter *This);HRESULT ( *GetTypeInfoCount)(ITemplatePrinter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITemplatePrinter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITemplatePrinter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITemplatePrinter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *startDoc)(ITemplatePrinter *This, BSTR bstrTitle, VARIANT_BOOL *p);HRESULT ( *stopDoc)(ITemplatePrinter *This);HRESULT ( *printBlankPage)(ITemplatePrinter *This);HRESULT ( *printPage)(ITemplatePrinter *This, IDispatch *pElemDisp);HRESULT ( *ensurePrintDialogDefaults)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *showPrintDialog)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *showPageSetupDialog)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *printNonNative)(ITemplatePrinter *This, IUnknown *pMarkup, VARIANT_BOOL *p);HRESULT ( *printNonNativeFrames)(ITemplatePrinter *This, IUnknown *pMarkup, VARIANT_BOOL fActiveFrame);HRESULT ( *put_framesetDocument)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_framesetDocument)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_frameActive)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_frameActive)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_frameAsShown)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_frameAsShown)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_selection)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_selection)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_selectedPages)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_selectedPages)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_currentPage)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_currentPage)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_currentPageAvail)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_currentPageAvail)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_collate)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_collate)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *get_duplex)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_copies)(ITemplatePrinter *This, WORD v);HRESULT ( *get_copies)(ITemplatePrinter *This, WORD *p);HRESULT ( *put_pageFrom)(ITemplatePrinter *This, WORD v);HRESULT ( *get_pageFrom)(ITemplatePrinter *This, WORD *p);HRESULT ( *put_pageTo)(ITemplatePrinter *This, WORD v);HRESULT ( *get_pageTo)(ITemplatePrinter *This, WORD *p);HRESULT ( *put_tableOfLinks)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_tableOfLinks)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_allLinkedDocuments)(ITemplatePrinter *This, VARIANT_BOOL v);HRESULT ( *get_allLinkedDocuments)(ITemplatePrinter *This, VARIANT_BOOL *p);HRESULT ( *put_header)(ITemplatePrinter *This, BSTR bstrHeader);HRESULT ( *get_header)(ITemplatePrinter *This, BSTR *bstrHeader);HRESULT ( *put_footer)(ITemplatePrinter *This, BSTR bstrFooter);HRESULT ( *get_footer)(ITemplatePrinter *This, BSTR *bstrFooter);HRESULT ( *put_marginLeft)(ITemplatePrinter *This, int v);HRESULT ( *get_marginLeft)(ITemplatePrinter *This, int *p);HRESULT ( *put_marginRight)(ITemplatePrinter *This, int v);HRESULT ( *get_marginRight)(ITemplatePrinter *This, int *p);HRESULT ( *put_marginTop)(ITemplatePrinter *This, int v);HRESULT ( *get_marginTop)(ITemplatePrinter *This, int *p);HRESULT ( *put_marginBottom)(ITemplatePrinter *This, int v);HRESULT ( *get_marginBottom)(ITemplatePrinter *This, int *p);HRESULT ( *get_pageWidth)(ITemplatePrinter *This, int *p);HRESULT ( *get_pageHeight)(ITemplatePrinter *This, int *p);HRESULT ( *get_unprintableLeft)(ITemplatePrinter *This, int *p);HRESULT ( *get_unprintableTop)(ITemplatePrinter *This, int *p);HRESULT ( *get_unprintableRight)(ITemplatePrinter *This, int *p);HRESULT ( *get_unprintableBottom)(ITemplatePrinter *This, int *p);HRESULT ( *updatePageStatus)(ITemplatePrinter *This, int *p);};
struct IWBScriptControlVtbl {HRESULT ( *QueryInterface)(IWBScriptControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWBScriptControl *This);ULONG ( *Release)(IWBScriptControl *This);HRESULT ( *GetTypeInfoCount)(IWBScriptControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWBScriptControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWBScriptControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWBScriptControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *raiseEvent)(IWBScriptControl *This, BSTR name, VARIANT eventData);HRESULT ( *bubbleEvent)(IWBScriptControl *This);HRESULT ( *setContextMenu)(IWBScriptControl *This, VARIANT menuItemPairs);HRESULT ( *put_selectableContent)(IWBScriptControl *This, VARIANT_BOOL v);HRESULT ( *get_selectableContent)(IWBScriptControl *This, VARIANT_BOOL *p);HRESULT ( *get_frozen)(IWBScriptControl *This, VARIANT_BOOL *p);HRESULT ( *put_scrollbar)(IWBScriptControl *This, VARIANT_BOOL v);HRESULT ( *get_scrollbar)(IWBScriptControl *This, VARIANT_BOOL *p);HRESULT ( *get_version)(IWBScriptControl *This, BSTR *p);HRESULT ( *get_visibility)(IWBScriptControl *This, VARIANT_BOOL *p);HRESULT ( *put_onvisibilitychange)(IWBScriptControl *This, VARIANT v);HRESULT ( *get_onvisibilitychange)(IWBScriptControl *This, VARIANT *p);};
struct IFileSearchBandVtbl {HRESULT ( *QueryInterface)(IFileSearchBand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSearchBand *This);ULONG ( *Release)(IFileSearchBand *This);HRESULT ( *GetTypeInfoCount)(IFileSearchBand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFileSearchBand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFileSearchBand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFileSearchBand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetFocus)(IFileSearchBand *This);HRESULT ( *SetSearchParameters)(IFileSearchBand *This, BSTR *pbstrSearchID, VARIANT_BOOL bNavToResults, VARIANT *pvarScope, VARIANT *pvarQueryFile);HRESULT ( *get_SearchID)(IFileSearchBand *This, BSTR *pbstrSearchID);HRESULT ( *get_Scope)(IFileSearchBand *This, VARIANT *pvarScope);HRESULT ( *get_QueryFile)(IFileSearchBand *This, VARIANT *pvarFile);};
struct IHTMLDivElementVtbl {HRESULT ( *QueryInterface)(IHTMLDivElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDivElement *This);ULONG ( *Release)(IHTMLDivElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDivElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDivElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDivElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDivElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLDivElement *This, BSTR v);HRESULT ( *get_align)(IHTMLDivElement *This, BSTR *p);HRESULT ( *put_noWrap)(IHTMLDivElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDivElement *This, VARIANT_BOOL *p);};
struct IHTMLFrameBase2Vtbl {HRESULT ( *QueryInterface)(IHTMLFrameBase2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameBase2 *This);ULONG ( *Release)(IHTMLFrameBase2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameBase2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameBase2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameBase2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameBase2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_contentWindow)(IHTMLFrameBase2 *This, IHTMLWindow2 **p);HRESULT ( *put_onload)(IHTMLFrameBase2 *This, VARIANT v);HRESULT ( *get_onload)(IHTMLFrameBase2 *This, VARIANT *p);HRESULT ( *put_onreadystatechange)(IHTMLFrameBase2 *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLFrameBase2 *This, VARIANT *p);HRESULT ( *get_readyState)(IHTMLFrameBase2 *This, BSTR *p);HRESULT ( *put_allowTransparency)(IHTMLFrameBase2 *This, VARIANT_BOOL v);HRESULT ( *get_allowTransparency)(IHTMLFrameBase2 *This, VARIANT_BOOL *p);};
struct IHTMLImgElementVtbl {HRESULT ( *QueryInterface)(IHTMLImgElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLImgElement *This);ULONG ( *Release)(IHTMLImgElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLImgElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLImgElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLImgElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLImgElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_isMap)(IHTMLImgElement *This, VARIANT_BOOL v);HRESULT ( *get_isMap)(IHTMLImgElement *This, VARIANT_BOOL *p);HRESULT ( *put_useMap)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_useMap)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileSize)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileCreatedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_protocol)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_href)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_border)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_border)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_vspace)(IHTMLImgElement *This, int v);HRESULT ( *get_vspace)(IHTMLImgElement *This, int *p);HRESULT ( *put_hspace)(IHTMLImgElement *This, int v);HRESULT ( *get_hspace)(IHTMLImgElement *This, int *p);HRESULT ( *put_alt)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_alt)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_src)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_src)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_lowsrc)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_lowsrc)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_vrml)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_vrml)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_dynsrc)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_dynsrc)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_complete)(IHTMLImgElement *This, VARIANT_BOOL *p);HRESULT ( *put_loop)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_loop)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_align)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_align)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_onload)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_onabort)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onabort)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_name)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_name)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_width)(IHTMLImgElement *This, int v);HRESULT ( *get_width)(IHTMLImgElement *This, int *p);HRESULT ( *put_height)(IHTMLImgElement *This, int v);HRESULT ( *get_height)(IHTMLImgElement *This, int *p);HRESULT ( *put_start)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_start)(IHTMLImgElement *This, BSTR *p);};
struct IHTMLInputImageVtbl {HRESULT ( *QueryInterface)(IHTMLInputImage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputImage *This);ULONG ( *Release)(IHTMLInputImage *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputImage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputImage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputImage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputImage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_disabled)(IHTMLInputImage *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputImage *This, VARIANT_BOOL *p);HRESULT ( *put_border)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_border)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_vspace)(IHTMLInputImage *This, int v);HRESULT ( *get_vspace)(IHTMLInputImage *This, int *p);HRESULT ( *put_hspace)(IHTMLInputImage *This, int v);HRESULT ( *get_hspace)(IHTMLInputImage *This, int *p);HRESULT ( *put_alt)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_alt)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_src)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_src)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_lowsrc)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_lowsrc)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_vrml)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_vrml)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_dynsrc)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_dynsrc)(IHTMLInputImage *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLInputImage *This, BSTR *p);HRESULT ( *get_complete)(IHTMLInputImage *This, VARIANT_BOOL *p);HRESULT ( *put_loop)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_loop)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_align)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_align)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_onload)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onload)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_onabort)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onabort)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_name)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_name)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_width)(IHTMLInputImage *This, int v);HRESULT ( *get_width)(IHTMLInputImage *This, int *p);HRESULT ( *put_height)(IHTMLInputImage *This, int v);HRESULT ( *get_height)(IHTMLInputImage *This, int *p);HRESULT ( *put_start)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_start)(IHTMLInputImage *This, BSTR *p);};
struct IHTMLOpsProfileVtbl {HRESULT ( *QueryInterface)(IHTMLOpsProfile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOpsProfile *This);ULONG ( *Release)(IHTMLOpsProfile *This);HRESULT ( *GetTypeInfoCount)(IHTMLOpsProfile *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOpsProfile *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOpsProfile *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOpsProfile *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *addRequest)(IHTMLOpsProfile *This, BSTR name, VARIANT reserved, VARIANT_BOOL *success);HRESULT ( *clearRequest)(IHTMLOpsProfile *This);HRESULT ( *doRequest)(IHTMLOpsProfile *This, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved);HRESULT ( *getAttribute)(IHTMLOpsProfile *This, BSTR name, BSTR *value);HRESULT ( *setAttribute)(IHTMLOpsProfile *This, BSTR name, BSTR value, VARIANT prefs, VARIANT_BOOL *success);HRESULT ( *commitChanges)(IHTMLOpsProfile *This, VARIANT_BOOL *success);HRESULT ( *addReadRequest)(IHTMLOpsProfile *This, BSTR name, VARIANT reserved, VARIANT_BOOL *success);HRESULT ( *doReadRequest)(IHTMLOpsProfile *This, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved);HRESULT ( *doWriteRequest)(IHTMLOpsProfile *This, VARIANT_BOOL *success);};
struct IHTMLStyleSheetVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheet *This);ULONG ( *Release)(IHTMLStyleSheet *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_title)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_title)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_parentStyleSheet)(IHTMLStyleSheet *This, IHTMLStyleSheet **p);HRESULT ( *get_owningElement)(IHTMLStyleSheet *This, IHTMLElement **p);HRESULT ( *put_disabled)(IHTMLStyleSheet *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLStyleSheet *This, VARIANT_BOOL *p);HRESULT ( *get_readOnly)(IHTMLStyleSheet *This, VARIANT_BOOL *p);HRESULT ( *get_imports)(IHTMLStyleSheet *This, IHTMLStyleSheetsCollection **p);HRESULT ( *put_href)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_href)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_type)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_id)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *addImport)(IHTMLStyleSheet *This, BSTR bstrURL, int lIndex, int *plIndex);HRESULT ( *addRule)(IHTMLStyleSheet *This, BSTR bstrSelector, BSTR bstrStyle, int lIndex, int *plNewIndex);HRESULT ( *removeImport)(IHTMLStyleSheet *This, int lIndex);HRESULT ( *removeRule)(IHTMLStyleSheet *This, int lIndex);HRESULT ( *put_media)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_media)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_cssText)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_rules)(IHTMLStyleSheet *This, IHTMLStyleSheetRulesCollection **p);};
struct IRTCBuddyEvent2Vtbl {HRESULT ( *QueryInterface)(IRTCBuddyEvent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCBuddyEvent2 *This);ULONG ( *Release)(IRTCBuddyEvent2 *This);HRESULT ( *GetTypeInfoCount)(IRTCBuddyEvent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCBuddyEvent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCBuddyEvent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCBuddyEvent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Buddy)(IRTCBuddyEvent2 *This, IRTCBuddy **ppBuddy);HRESULT ( *get_EventType)(IRTCBuddyEvent2 *This, RTC_BUDDY_EVENT_TYPE *pEventType);HRESULT ( *get_StatusCode)(IRTCBuddyEvent2 *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCBuddyEvent2 *This, BSTR *pbstrStatusText);};
struct IVBSAXXMLReaderVtbl {HRESULT ( *QueryInterface)(IVBSAXXMLReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVBSAXXMLReader *This);ULONG ( *Release)(IVBSAXXMLReader *This);HRESULT ( *GetTypeInfoCount)(IVBSAXXMLReader *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVBSAXXMLReader *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVBSAXXMLReader *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVBSAXXMLReader *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *getFeature)(IVBSAXXMLReader *This, BSTR strName, VARIANT_BOOL *fValue);HRESULT ( *putFeature)(IVBSAXXMLReader *This, BSTR strName, VARIANT_BOOL fValue);HRESULT ( *getProperty)(IVBSAXXMLReader *This, BSTR strName, VARIANT *varValue);HRESULT ( *putProperty)(IVBSAXXMLReader *This, BSTR strName, VARIANT varValue);HRESULT ( *get_entityResolver)(IVBSAXXMLReader *This, IVBSAXEntityResolver **oResolver);HRESULT ( *putref_entityResolver)(IVBSAXXMLReader *This, IVBSAXEntityResolver *oResolver);HRESULT ( *get_contentHandler)(IVBSAXXMLReader *This, IVBSAXContentHandler **oHandler);HRESULT ( *putref_contentHandler)(IVBSAXXMLReader *This, IVBSAXContentHandler *oHandler);HRESULT ( *get_dtdHandler)(IVBSAXXMLReader *This, IVBSAXDTDHandler **oHandler);HRESULT ( *putref_dtdHandler)(IVBSAXXMLReader *This, IVBSAXDTDHandler *oHandler);HRESULT ( *get_errorHandler)(IVBSAXXMLReader *This, IVBSAXErrorHandler **oHandler);HRESULT ( *putref_errorHandler)(IVBSAXXMLReader *This, IVBSAXErrorHandler *oHandler);HRESULT ( *get_baseURL)(IVBSAXXMLReader *This, BSTR *strBaseURL);HRESULT ( *put_baseURL)(IVBSAXXMLReader *This, BSTR strBaseURL);HRESULT ( *get_secureBaseURL)(IVBSAXXMLReader *This, BSTR *strSecureBaseURL);HRESULT ( *put_secureBaseURL)(IVBSAXXMLReader *This, BSTR strSecureBaseURL);HRESULT ( *parse)(IVBSAXXMLReader *This, VARIANT varInput);HRESULT ( *parseURL)(IVBSAXXMLReader *This, BSTR strURL);};
struct IHTMLDocument3Vtbl {HRESULT ( *QueryInterface)(IHTMLDocument3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument3 *This);ULONG ( *Release)(IHTMLDocument3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *releaseCapture)(IHTMLDocument3 *This);HRESULT ( *recalc)(IHTMLDocument3 *This, VARIANT_BOOL fForce);HRESULT ( *createTextNode)(IHTMLDocument3 *This, BSTR text, IHTMLDOMNode **newTextNode);HRESULT ( *get_documentElement)(IHTMLDocument3 *This, IHTMLElement **p);HRESULT ( *get_uniqueID)(IHTMLDocument3 *This, BSTR *p);HRESULT ( *attachEvent)(IHTMLDocument3 *This, BSTR event, IDispatch *pDisp, VARIANT_BOOL *pfResult);HRESULT ( *detachEvent)(IHTMLDocument3 *This, BSTR event, IDispatch *pDisp);HRESULT ( *put_onrowsdelete)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_onrowsdelete)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_onrowsinserted)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_onrowsinserted)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_oncellchange)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_oncellchange)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_ondatasetchanged)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_ondatasetchanged)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_ondataavailable)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_ondataavailable)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_ondatasetcomplete)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_ondatasetcomplete)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_onpropertychange)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_onpropertychange)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_dir)(IHTMLDocument3 *This, BSTR v);HRESULT ( *get_dir)(IHTMLDocument3 *This, BSTR *p);HRESULT ( *put_oncontextmenu)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_oncontextmenu)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *put_onstop)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_onstop)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *createDocumentFragment)(IHTMLDocument3 *This, IHTMLDocument2 **pNewDoc);HRESULT ( *get_parentDocument)(IHTMLDocument3 *This, IHTMLDocument2 **p);HRESULT ( *put_enableDownload)(IHTMLDocument3 *This, VARIANT_BOOL v);HRESULT ( *get_enableDownload)(IHTMLDocument3 *This, VARIANT_BOOL *p);HRESULT ( *put_baseUrl)(IHTMLDocument3 *This, BSTR v);HRESULT ( *get_baseUrl)(IHTMLDocument3 *This, BSTR *p);HRESULT ( *get_childNodes)(IHTMLDocument3 *This, IDispatch **p);HRESULT ( *put_inheritStyleSheets)(IHTMLDocument3 *This, VARIANT_BOOL v);HRESULT ( *get_inheritStyleSheets)(IHTMLDocument3 *This, VARIANT_BOOL *p);HRESULT ( *put_onbeforeeditfocus)(IHTMLDocument3 *This, VARIANT v);HRESULT ( *get_onbeforeeditfocus)(IHTMLDocument3 *This, VARIANT *p);HRESULT ( *getElementsByName)(IHTMLDocument3 *This, BSTR v, IHTMLElementCollection **pelColl);HRESULT ( *getElementById)(IHTMLDocument3 *This, BSTR v, IHTMLElement **pel);HRESULT ( *getElementsByTagName)(IHTMLDocument3 *This, BSTR v, IHTMLElementCollection **pelColl);};
struct IHTMLDocument4Vtbl {HRESULT ( *QueryInterface)(IHTMLDocument4 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument4 *This);ULONG ( *Release)(IHTMLDocument4 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument4 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument4 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument4 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *focus)(IHTMLDocument4 *This);HRESULT ( *hasFocus)(IHTMLDocument4 *This, VARIANT_BOOL *pfFocus);HRESULT ( *put_onselectionchange)(IHTMLDocument4 *This, VARIANT v);HRESULT ( *get_onselectionchange)(IHTMLDocument4 *This, VARIANT *p);HRESULT ( *get_namespaces)(IHTMLDocument4 *This, IDispatch **p);HRESULT ( *createDocumentFromUrl)(IHTMLDocument4 *This, BSTR bstrUrl, BSTR bstrOptions, IHTMLDocument2 **newDoc);HRESULT ( *put_media)(IHTMLDocument4 *This, BSTR v);HRESULT ( *get_media)(IHTMLDocument4 *This, BSTR *p);HRESULT ( *createEventObject)(IHTMLDocument4 *This, VARIANT *pvarEventObject, IHTMLEventObj **ppEventObj);HRESULT ( *fireEvent)(IHTMLDocument4 *This, BSTR bstrEventName, VARIANT *pvarEventObject, VARIANT_BOOL *pfCancelled);HRESULT ( *createRenderStyle)(IHTMLDocument4 *This, BSTR v, IHTMLRenderStyle **ppIHTMLRenderStyle);HRESULT ( *put_oncontrolselect)(IHTMLDocument4 *This, VARIANT v);HRESULT ( *get_oncontrolselect)(IHTMLDocument4 *This, VARIANT *p);HRESULT ( *get_URLUnencoded)(IHTMLDocument4 *This, BSTR *p);};
struct IHTMLFrameBaseVtbl {HRESULT ( *QueryInterface)(IHTMLFrameBase *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameBase *This);ULONG ( *Release)(IHTMLFrameBase *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameBase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameBase *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameBase *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameBase *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_src)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_name)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_name)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_border)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_border)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_frameBorder)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_frameBorder)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_frameSpacing)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_frameSpacing)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_marginWidth)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_marginWidth)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_marginHeight)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_marginHeight)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_noResize)(IHTMLFrameBase *This, VARIANT_BOOL v);HRESULT ( *get_noResize)(IHTMLFrameBase *This, VARIANT_BOOL *p);HRESULT ( *put_scrolling)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_scrolling)(IHTMLFrameBase *This, BSTR *p);};
struct IHTMLHRElementVtbl {HRESULT ( *QueryInterface)(IHTMLHRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHRElement *This);ULONG ( *Release)(IHTMLHRElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLHRElement *This, BSTR v);HRESULT ( *get_align)(IHTMLHRElement *This, BSTR *p);HRESULT ( *put_color)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLHRElement *This, VARIANT *p);HRESULT ( *put_noShade)(IHTMLHRElement *This, VARIANT_BOOL v);HRESULT ( *get_noShade)(IHTMLHRElement *This, VARIANT_BOOL *p);HRESULT ( *put_width)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLHRElement *This, VARIANT *p);HRESULT ( *put_size)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_size)(IHTMLHRElement *This, VARIANT *p);};
struct IHTMLNamespaceVtbl {HRESULT ( *QueryInterface)(IHTMLNamespace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNamespace *This);ULONG ( *Release)(IHTMLNamespace *This);HRESULT ( *GetTypeInfoCount)(IHTMLNamespace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNamespace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNamespace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNamespace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_name)(IHTMLNamespace *This, BSTR *p);HRESULT ( *get_urn)(IHTMLNamespace *This, BSTR *p);HRESULT ( *get_tagNames)(IHTMLNamespace *This, IDispatch **p);HRESULT ( *get_readyState)(IHTMLNamespace *This, VARIANT *p);HRESULT ( *put_onreadystatechange)(IHTMLNamespace *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLNamespace *This, VARIANT *p);HRESULT ( *doImport)(IHTMLNamespace *This, BSTR bstrImplementationUrl);HRESULT ( *attachEvent)(IHTMLNamespace *This, BSTR event, IDispatch *pDisp, VARIANT_BOOL *pfResult);HRESULT ( *detachEvent)(IHTMLNamespace *This, BSTR event, IDispatch *pDisp);};
struct IHTMLTableCellVtbl {HRESULT ( *QueryInterface)(IHTMLTableCell *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCell *This);ULONG ( *Release)(IHTMLTableCell *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCell *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCell *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCell *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_rowSpan)(IHTMLTableCell *This, int v);HRESULT ( *get_rowSpan)(IHTMLTableCell *This, int *p);HRESULT ( *put_colSpan)(IHTMLTableCell *This, int v);HRESULT ( *get_colSpan)(IHTMLTableCell *This, int *p);HRESULT ( *put_align)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_noWrap)(IHTMLTableCell *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLTableCell *This, VARIANT_BOOL *p);HRESULT ( *put_background)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_background)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_width)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_width)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_height)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_height)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *get_cellIndex)(IHTMLTableCell *This, int *p);};
struct IMediaPositionVtbl {HRESULT ( *QueryInterface)(IMediaPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPosition *This);ULONG ( *Release)(IMediaPosition *This);HRESULT ( *GetTypeInfoCount)(IMediaPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaPosition *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaPosition *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaPosition *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Duration)(IMediaPosition *This, REFTIME *plength);HRESULT ( *put_CurrentPosition)(IMediaPosition *This, REFTIME llTime);HRESULT ( *get_CurrentPosition)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *get_StopTime)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *put_StopTime)(IMediaPosition *This, REFTIME llTime);HRESULT ( *get_PrerollTime)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *put_PrerollTime)(IMediaPosition *This, REFTIME llTime);HRESULT ( *put_Rate)(IMediaPosition *This, double dRate);HRESULT ( *get_Rate)(IMediaPosition *This, double *pdRate);HRESULT ( *CanSeekForward)(IMediaPosition *This, LONG *pCanSeekForward);HRESULT ( *CanSeekBackward)(IMediaPosition *This, LONG *pCanSeekBackward);};
struct IRTCMediaEventVtbl {HRESULT ( *QueryInterface)(IRTCMediaEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCMediaEvent *This);ULONG ( *Release)(IRTCMediaEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCMediaEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCMediaEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCMediaEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCMediaEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MediaType)(IRTCMediaEvent *This, int *pMediaType);HRESULT ( *get_EventType)(IRTCMediaEvent *This, RTC_MEDIA_EVENT_TYPE *penEventType);HRESULT ( *get_EventReason)(IRTCMediaEvent *This, RTC_MEDIA_EVENT_REASON *penEventReason);};
struct IShellUIHelperVtbl {HRESULT ( *QueryInterface)(IShellUIHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellUIHelper *This);ULONG ( *Release)(IShellUIHelper *This);HRESULT ( *GetTypeInfoCount)(IShellUIHelper *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellUIHelper *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellUIHelper *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellUIHelper *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ResetFirstBootMode)(IShellUIHelper *This);HRESULT ( *ResetSafeMode)(IShellUIHelper *This);HRESULT ( *RefreshOfflineDesktop)(IShellUIHelper *This);HRESULT ( *AddFavorite)(IShellUIHelper *This, BSTR URL, VARIANT *Title);HRESULT ( *AddChannel)(IShellUIHelper *This, BSTR URL);HRESULT ( *AddDesktopComponent)(IShellUIHelper *This, BSTR URL, BSTR Type, VARIANT *Left, VARIANT *Top, VARIANT *Width, VARIANT *Height);HRESULT ( *IsSubscribed)(IShellUIHelper *This, BSTR URL, VARIANT_BOOL *pBool);HRESULT ( *NavigateAndFind)(IShellUIHelper *This, BSTR URL, BSTR strQuery, VARIANT *varTargetFrame);HRESULT ( *ImportExportFavorites)(IShellUIHelper *This, VARIANT_BOOL fImport, BSTR strImpExpPath);HRESULT ( *AutoCompleteSaveForm)(IShellUIHelper *This, VARIANT *Form);HRESULT ( *AutoScan)(IShellUIHelper *This, BSTR strSearch, BSTR strFailureUrl, VARIANT *pvarTargetFrame);HRESULT ( *AutoCompleteAttach)(IShellUIHelper *This, VARIANT *Reserved);HRESULT ( *ShowBrowserUI)(IShellUIHelper *This, BSTR bstrName, VARIANT *pvarIn, VARIANT *pvarOut);};
struct IWebBrowserAppVtbl {HRESULT ( *QueryInterface)(IWebBrowserApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowserApp *This);ULONG ( *Release)(IWebBrowserApp *This);HRESULT ( *GetTypeInfoCount)(IWebBrowserApp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowserApp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowserApp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowserApp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowserApp *This);HRESULT ( *GoForward)(IWebBrowserApp *This);HRESULT ( *GoHome)(IWebBrowserApp *This);HRESULT ( *GoSearch)(IWebBrowserApp *This);HRESULT ( *Navigate)(IWebBrowserApp *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowserApp *This);HRESULT ( *Refresh2)(IWebBrowserApp *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowserApp *This);HRESULT ( *get_Application)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowserApp *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Left)(IWebBrowserApp *This, int Left);HRESULT ( *get_Top)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Top)(IWebBrowserApp *This, int Top);HRESULT ( *get_Width)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Width)(IWebBrowserApp *This, int Width);HRESULT ( *get_Height)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Height)(IWebBrowserApp *This, int Height);HRESULT ( *get_LocationName)(IWebBrowserApp *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowserApp *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowserApp *This);HRESULT ( *ClientToWindow)(IWebBrowserApp *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowserApp *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowserApp *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowserApp *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowserApp *This, int *pHWND);HRESULT ( *get_FullName)(IWebBrowserApp *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowserApp *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowserApp *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowserApp *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowserApp *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowserApp *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL bFullScreen);};
struct IHTMLElement2Vtbl {HRESULT ( *QueryInterface)(IHTMLElement2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElement2 *This);ULONG ( *Release)(IHTMLElement2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLElement2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElement2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElement2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_scopeName)(IHTMLElement2 *This, BSTR *p);HRESULT ( *setCapture)(IHTMLElement2 *This, VARIANT_BOOL containerCapture);HRESULT ( *releaseCapture)(IHTMLElement2 *This);HRESULT ( *put_onlosecapture)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onlosecapture)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *componentFromPoint)(IHTMLElement2 *This, int x, int y, BSTR *component);HRESULT ( *doScroll)(IHTMLElement2 *This, VARIANT component);HRESULT ( *put_onscroll)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onscroll)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondrag)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondrag)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondragend)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondragend)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondragenter)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondragenter)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondragover)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondragover)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondragleave)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondragleave)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_ondrop)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_ondrop)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onbeforecut)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onbeforecut)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_oncut)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_oncut)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onbeforecopy)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onbeforecopy)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_oncopy)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_oncopy)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onbeforepaste)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onbeforepaste)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onpaste)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onpaste)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *get_currentStyle)(IHTMLElement2 *This, IHTMLCurrentStyle **p);HRESULT ( *put_onpropertychange)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onpropertychange)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *getClientRects)(IHTMLElement2 *This, IHTMLRectCollection **pRectCol);HRESULT ( *getBoundingClientRect)(IHTMLElement2 *This, IHTMLRect **pRect);HRESULT ( *setExpression)(IHTMLElement2 *This, BSTR propname, BSTR expression, BSTR language);HRESULT ( *getExpression)(IHTMLElement2 *This, BSTR propname, VARIANT *expression);HRESULT ( *removeExpression)(IHTMLElement2 *This, BSTR propname, VARIANT_BOOL *pfSuccess);HRESULT ( *put_tabIndex)(IHTMLElement2 *This, short v);HRESULT ( *get_tabIndex)(IHTMLElement2 *This, short *p);HRESULT ( *focus)(IHTMLElement2 *This);HRESULT ( *put_accessKey)(IHTMLElement2 *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLElement2 *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onresize)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onresize)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *blur)(IHTMLElement2 *This);HRESULT ( *addFilter)(IHTMLElement2 *This, IUnknown *pUnk);HRESULT ( *removeFilter)(IHTMLElement2 *This, IUnknown *pUnk);HRESULT ( *get_clientHeight)(IHTMLElement2 *This, int *p);HRESULT ( *get_clientWidth)(IHTMLElement2 *This, int *p);HRESULT ( *get_clientTop)(IHTMLElement2 *This, int *p);HRESULT ( *get_clientLeft)(IHTMLElement2 *This, int *p);HRESULT ( *attachEvent)(IHTMLElement2 *This, BSTR event, IDispatch *pDisp, VARIANT_BOOL *pfResult);HRESULT ( *detachEvent)(IHTMLElement2 *This, BSTR event, IDispatch *pDisp);HRESULT ( *get_readyState)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onreadystatechange)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onrowsdelete)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onrowsdelete)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_onrowsinserted)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onrowsinserted)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_oncellchange)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_oncellchange)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *put_dir)(IHTMLElement2 *This, BSTR v);HRESULT ( *get_dir)(IHTMLElement2 *This, BSTR *p);HRESULT ( *createControlRange)(IHTMLElement2 *This, IDispatch **range);HRESULT ( *get_scrollHeight)(IHTMLElement2 *This, int *p);HRESULT ( *get_scrollWidth)(IHTMLElement2 *This, int *p);HRESULT ( *put_scrollTop)(IHTMLElement2 *This, int v);HRESULT ( *get_scrollTop)(IHTMLElement2 *This, int *p);HRESULT ( *put_scrollLeft)(IHTMLElement2 *This, int v);HRESULT ( *get_scrollLeft)(IHTMLElement2 *This, int *p);HRESULT ( *clearAttributes)(IHTMLElement2 *This);HRESULT ( *mergeAttributes)(IHTMLElement2 *This, IHTMLElement *mergeThis);HRESULT ( *put_oncontextmenu)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_oncontextmenu)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *insertAdjacentElement)(IHTMLElement2 *This, BSTR where, IHTMLElement *insertedElement, IHTMLElement **inserted);HRESULT ( *applyElement)(IHTMLElement2 *This, IHTMLElement *apply, BSTR where, IHTMLElement **applied);HRESULT ( *getAdjacentText)(IHTMLElement2 *This, BSTR where, BSTR *text);HRESULT ( *replaceAdjacentText)(IHTMLElement2 *This, BSTR where, BSTR newText, BSTR *oldText);HRESULT ( *get_canHaveChildren)(IHTMLElement2 *This, VARIANT_BOOL *p);HRESULT ( *addBehavior)(IHTMLElement2 *This, BSTR bstrUrl, VARIANT *pvarFactory, int *pCookie);HRESULT ( *removeBehavior)(IHTMLElement2 *This, int cookie, VARIANT_BOOL *pfResult);HRESULT ( *get_runtimeStyle)(IHTMLElement2 *This, IHTMLStyle **p);HRESULT ( *get_behaviorUrns)(IHTMLElement2 *This, IDispatch **p);HRESULT ( *put_tagUrn)(IHTMLElement2 *This, BSTR v);HRESULT ( *get_tagUrn)(IHTMLElement2 *This, BSTR *p);HRESULT ( *put_onbeforeeditfocus)(IHTMLElement2 *This, VARIANT v);HRESULT ( *get_onbeforeeditfocus)(IHTMLElement2 *This, VARIANT *p);HRESULT ( *get_readyStateValue)(IHTMLElement2 *This, int *p);HRESULT ( *getElementsByTagName)(IHTMLElement2 *This, BSTR v, IHTMLElementCollection **pelColl);};
struct IHTMLEventObjVtbl {HRESULT ( *QueryInterface)(IHTMLEventObj *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEventObj *This);ULONG ( *Release)(IHTMLEventObj *This);HRESULT ( *GetTypeInfoCount)(IHTMLEventObj *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEventObj *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEventObj *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEventObj *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_srcElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *get_altKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_ctrlKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_shiftKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *put_returnValue)(IHTMLEventObj *This, VARIANT v);HRESULT ( *get_returnValue)(IHTMLEventObj *This, VARIANT *p);HRESULT ( *put_cancelBubble)(IHTMLEventObj *This, VARIANT_BOOL v);HRESULT ( *get_cancelBubble)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_fromElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *get_toElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *put_keyCode)(IHTMLEventObj *This, int v);HRESULT ( *get_keyCode)(IHTMLEventObj *This, int *p);HRESULT ( *get_button)(IHTMLEventObj *This, int *p);HRESULT ( *get_type)(IHTMLEventObj *This, BSTR *p);HRESULT ( *get_qualifier)(IHTMLEventObj *This, BSTR *p);HRESULT ( *get_reason)(IHTMLEventObj *This, int *p);HRESULT ( *get_x)(IHTMLEventObj *This, int *p);HRESULT ( *get_y)(IHTMLEventObj *This, int *p);HRESULT ( *get_clientX)(IHTMLEventObj *This, int *p);HRESULT ( *get_clientY)(IHTMLEventObj *This, int *p);HRESULT ( *get_offsetX)(IHTMLEventObj *This, int *p);HRESULT ( *get_offsetY)(IHTMLEventObj *This, int *p);HRESULT ( *get_screenX)(IHTMLEventObj *This, int *p);HRESULT ( *get_screenY)(IHTMLEventObj *This, int *p);HRESULT ( *get_srcFilter)(IHTMLEventObj *This, IDispatch **p);};
struct IHTMLLocationVtbl {HRESULT ( *QueryInterface)(IHTMLLocation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLocation *This);ULONG ( *Release)(IHTMLLocation *This);HRESULT ( *GetTypeInfoCount)(IHTMLLocation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLocation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLocation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLocation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLLocation *This, BSTR v);HRESULT ( *get_href)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLLocation *This, BSTR v);HRESULT ( *get_protocol)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_host)(IHTMLLocation *This, BSTR v);HRESULT ( *get_host)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLLocation *This, BSTR v);HRESULT ( *get_hostname)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_port)(IHTMLLocation *This, BSTR v);HRESULT ( *get_port)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLLocation *This, BSTR v);HRESULT ( *get_pathname)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_search)(IHTMLLocation *This, BSTR v);HRESULT ( *get_search)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_hash)(IHTMLLocation *This, BSTR v);HRESULT ( *get_hash)(IHTMLLocation *This, BSTR *p);HRESULT ( *reload)(IHTMLLocation *This, VARIANT_BOOL flag);HRESULT ( *replace)(IHTMLLocation *This, BSTR bstr);HRESULT ( *assign)(IHTMLLocation *This, BSTR bstr);HRESULT ( *toString)(IHTMLLocation *This, BSTR *string);};
struct IHTMLTxtRangeVtbl {HRESULT ( *QueryInterface)(IHTMLTxtRange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTxtRange *This);ULONG ( *Release)(IHTMLTxtRange *This);HRESULT ( *GetTypeInfoCount)(IHTMLTxtRange *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTxtRange *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTxtRange *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTxtRange *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_htmlText)(IHTMLTxtRange *This, BSTR *p);HRESULT ( *put_text)(IHTMLTxtRange *This, BSTR v);HRESULT ( *get_text)(IHTMLTxtRange *This, BSTR *p);HRESULT ( *parentElement)(IHTMLTxtRange *This, IHTMLElement **parent);HRESULT ( *duplicate)(IHTMLTxtRange *This, IHTMLTxtRange **Duplicate);HRESULT ( *inRange)(IHTMLTxtRange *This, IHTMLTxtRange *Range, VARIANT_BOOL *InRange);HRESULT ( *isEqual)(IHTMLTxtRange *This, IHTMLTxtRange *Range, VARIANT_BOOL *IsEqual);HRESULT ( *scrollIntoView)(IHTMLTxtRange *This, VARIANT_BOOL fStart);HRESULT ( *collapse)(IHTMLTxtRange *This, VARIANT_BOOL Start);HRESULT ( *expand)(IHTMLTxtRange *This, BSTR Unit, VARIANT_BOOL *Success);HRESULT ( *move)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *moveStart)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *moveEnd)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *select)(IHTMLTxtRange *This);HRESULT ( *pasteHTML)(IHTMLTxtRange *This, BSTR html);HRESULT ( *moveToElementText)(IHTMLTxtRange *This, IHTMLElement *element);HRESULT ( *setEndPoint)(IHTMLTxtRange *This, BSTR how, IHTMLTxtRange *SourceRange);HRESULT ( *compareEndPoints)(IHTMLTxtRange *This, BSTR how, IHTMLTxtRange *SourceRange, int *ret);HRESULT ( *findText)(IHTMLTxtRange *This, BSTR String, int count, int Flags, VARIANT_BOOL *Success);HRESULT ( *moveToPoint)(IHTMLTxtRange *This, int x, int y);HRESULT ( *getBookmark)(IHTMLTxtRange *This, BSTR *Boolmark);HRESULT ( *moveToBookmark)(IHTMLTxtRange *This, BSTR Bookmark, VARIANT_BOOL *Success);HRESULT ( *queryCommandSupported)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLTxtRange *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLTxtRange *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);};
struct IHeaderFooterVtbl {HRESULT ( *QueryInterface)(IHeaderFooter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHeaderFooter *This);ULONG ( *Release)(IHeaderFooter *This);HRESULT ( *GetTypeInfoCount)(IHeaderFooter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHeaderFooter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHeaderFooter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHeaderFooter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_htmlHead)(IHeaderFooter *This, BSTR *p);HRESULT ( *get_htmlFoot)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_textHead)(IHeaderFooter *This, BSTR v);HRESULT ( *get_textHead)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_textFoot)(IHeaderFooter *This, BSTR v);HRESULT ( *get_textFoot)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_page)(IHeaderFooter *This, DWORD v);HRESULT ( *get_page)(IHeaderFooter *This, DWORD *p);HRESULT ( *put_pageTotal)(IHeaderFooter *This, DWORD v);HRESULT ( *get_pageTotal)(IHeaderFooter *This, DWORD *p);HRESULT ( *put_URL)(IHeaderFooter *This, BSTR v);HRESULT ( *get_URL)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_title)(IHeaderFooter *This, BSTR v);HRESULT ( *get_title)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_dateShort)(IHeaderFooter *This, BSTR v);HRESULT ( *get_dateShort)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_dateLong)(IHeaderFooter *This, BSTR v);HRESULT ( *get_dateLong)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_timeShort)(IHeaderFooter *This, BSTR v);HRESULT ( *get_timeShort)(IHeaderFooter *This, BSTR *p);HRESULT ( *put_timeLong)(IHeaderFooter *This, BSTR v);HRESULT ( *get_timeLong)(IHeaderFooter *This, BSTR *p);};
struct IMediaEventExVtbl {HRESULT ( *QueryInterface)(IMediaEventEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaEventEx *This);ULONG ( *Release)(IMediaEventEx *This);HRESULT ( *GetTypeInfoCount)(IMediaEventEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaEventEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaEventEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaEventEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetEventHandle)(IMediaEventEx *This, OAEVENT *hEvent);HRESULT ( *GetEvent)(IMediaEventEx *This, int *lEventCode, int *lParam1, int *lParam2, int msTimeout);HRESULT ( *WaitForCompletion)(IMediaEventEx *This, int msTimeout, int *pEvCode);HRESULT ( *CancelDefaultHandling)(IMediaEventEx *This, int lEvCode);HRESULT ( *RestoreDefaultHandling)(IMediaEventEx *This, int lEvCode);HRESULT ( *FreeEventParams)(IMediaEventEx *This, int lEvCode, int lParam1, int lParam2);HRESULT ( *SetNotifyWindow)(IMediaEventEx *This, OAHWND hwnd, int lMsg, int lInstanceData);HRESULT ( *SetNotifyFlags)(IMediaEventEx *This, int lNoNotifyFlags);HRESULT ( *GetNotifyFlags)(IMediaEventEx *This, int *lplNoNotifyFlags);};
struct IShellWindowsVtbl {HRESULT ( *QueryInterface)(IShellWindows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellWindows *This);ULONG ( *Release)(IShellWindows *This);HRESULT ( *GetTypeInfoCount)(IShellWindows *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellWindows *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellWindows *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellWindows *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IShellWindows *This, int *Count);HRESULT ( *Item)(IShellWindows *This, VARIANT index, IDispatch **Folder);HRESULT ( *_NewEnum)(IShellWindows *This, IUnknown **ppunk);HRESULT ( *Register)(IShellWindows *This, IDispatch *pid, int hwnd, int swClass, int *plCookie);HRESULT ( *RegisterPending)(IShellWindows *This, int lThreadId, VARIANT *pvarloc, VARIANT *pvarlocRoot, int swClass, int *plCookie);HRESULT ( *Revoke)(IShellWindows *This, int lCookie);HRESULT ( *OnNavigate)(IShellWindows *This, int lCookie, VARIANT *pvarLoc);HRESULT ( *OnActivated)(IShellWindows *This, int lCookie, VARIANT_BOOL fActive);HRESULT ( *FindWindowSW)(IShellWindows *This, VARIANT *pvarLoc, VARIANT *pvarLocRoot, int swClass, int *phwnd, int swfwOptions, IDispatch **ppdispOut);HRESULT ( *OnCreated)(IShellWindows *This, int lCookie, IUnknown *punk);HRESULT ( *ProcessAttachDetach)(IShellWindows *This, VARIANT_BOOL fAttach);};
struct IUPnPServicesVtbl {HRESULT ( *QueryInterface)(IUPnPServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPServices *This);ULONG ( *Release)(IUPnPServices *This);HRESULT ( *GetTypeInfoCount)(IUPnPServices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPServices *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPServices *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPServices *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IUPnPServices *This, int *plCount);HRESULT ( *get__NewEnum)(IUPnPServices *This, LPUNKNOWN *ppunk);HRESULT ( *get_Item)(IUPnPServices *This, BSTR bstrServiceId, IUPnPService **ppService);};
struct IXMLDocument2Vtbl {HRESULT ( *QueryInterface)(IXMLDocument2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDocument2 *This);ULONG ( *Release)(IXMLDocument2 *This);HRESULT ( *GetTypeInfoCount)(IXMLDocument2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDocument2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDocument2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_root)(IXMLDocument2 *This, IXMLElement2 **p);HRESULT ( *get_fileSize)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_URL)(IXMLDocument2 *This, BSTR *p);HRESULT ( *put_URL)(IXMLDocument2 *This, BSTR p);HRESULT ( *get_mimeType)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_readyState)(IXMLDocument2 *This, int *pl);HRESULT ( *get_charset)(IXMLDocument2 *This, BSTR *p);HRESULT ( *put_charset)(IXMLDocument2 *This, BSTR p);HRESULT ( *get_version)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_doctype)(IXMLDocument2 *This, BSTR *p);HRESULT ( *get_dtdURL)(IXMLDocument2 *This, BSTR *p);HRESULT ( *createElement)(IXMLDocument2 *This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem);HRESULT ( *get_async)(IXMLDocument2 *This, VARIANT_BOOL *pf);HRESULT ( *put_async)(IXMLDocument2 *This, VARIANT_BOOL f);};
struct IXSLProcessorVtbl {HRESULT ( *QueryInterface)(IXSLProcessor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXSLProcessor *This);ULONG ( *Release)(IXSLProcessor *This);HRESULT ( *GetTypeInfoCount)(IXSLProcessor *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXSLProcessor *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXSLProcessor *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXSLProcessor *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_input)(IXSLProcessor *This, VARIANT var);HRESULT ( *get_input)(IXSLProcessor *This, VARIANT *pVar);HRESULT ( *get_ownerTemplate)(IXSLProcessor *This, IXSLTemplate **ppTemplate);HRESULT ( *setStartMode)(IXSLProcessor *This, BSTR mode, BSTR namespaceURI);HRESULT ( *get_startMode)(IXSLProcessor *This, BSTR *mode);HRESULT ( *get_startModeURI)(IXSLProcessor *This, BSTR *namespaceURI);HRESULT ( *put_output)(IXSLProcessor *This, VARIANT output);HRESULT ( *get_output)(IXSLProcessor *This, VARIANT *pOutput);HRESULT ( *transform)(IXSLProcessor *This, VARIANT_BOOL *pDone);HRESULT ( *reset)(IXSLProcessor *This);HRESULT ( *get_readyState)(IXSLProcessor *This, int *pReadyState);HRESULT ( *addParameter)(IXSLProcessor *This, BSTR baseName, VARIANT parameter, BSTR namespaceURI);HRESULT ( *addObject)(IXSLProcessor *This, IDispatch *obj, BSTR namespaceURI);HRESULT ( *get_stylesheet)(IXSLProcessor *This, IXMLDOMNode **stylesheet);};
struct IHTMLDOMNodeVtbl {HRESULT ( *QueryInterface)(IHTMLDOMNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDOMNode *This);ULONG ( *Release)(IHTMLDOMNode *This);HRESULT ( *GetTypeInfoCount)(IHTMLDOMNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDOMNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDOMNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDOMNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeType)(IHTMLDOMNode *This, int *p);HRESULT ( *get_parentNode)(IHTMLDOMNode *This, IHTMLDOMNode **p);HRESULT ( *hasChildNodes)(IHTMLDOMNode *This, VARIANT_BOOL *fChildren);HRESULT ( *get_childNodes)(IHTMLDOMNode *This, IDispatch **p);HRESULT ( *get_attributes)(IHTMLDOMNode *This, IDispatch **p);HRESULT ( *insertBefore)(IHTMLDOMNode *This, IHTMLDOMNode *newChild, VARIANT refChild, IHTMLDOMNode **node);HRESULT ( *removeChild)(IHTMLDOMNode *This, IHTMLDOMNode *oldChild, IHTMLDOMNode **node);HRESULT ( *replaceChild)(IHTMLDOMNode *This, IHTMLDOMNode *newChild, IHTMLDOMNode *oldChild, IHTMLDOMNode **node);HRESULT ( *cloneNode)(IHTMLDOMNode *This, VARIANT_BOOL fDeep, IHTMLDOMNode **clonedNode);HRESULT ( *removeNode)(IHTMLDOMNode *This, VARIANT_BOOL fDeep, IHTMLDOMNode **removed);HRESULT ( *swapNode)(IHTMLDOMNode *This, IHTMLDOMNode *otherNode, IHTMLDOMNode **swappedNode);HRESULT ( *replaceNode)(IHTMLDOMNode *This, IHTMLDOMNode *replacement, IHTMLDOMNode **replaced);HRESULT ( *appendChild)(IHTMLDOMNode *This, IHTMLDOMNode *newChild, IHTMLDOMNode **node);HRESULT ( *get_nodeName)(IHTMLDOMNode *This, BSTR *p);HRESULT ( *put_nodeValue)(IHTMLDOMNode *This, VARIANT v);HRESULT ( *get_nodeValue)(IHTMLDOMNode *This, VARIANT *p);HRESULT ( *get_firstChild)(IHTMLDOMNode *This, IHTMLDOMNode **p);HRESULT ( *get_lastChild)(IHTMLDOMNode *This, IHTMLDOMNode **p);HRESULT ( *get_previousSibling)(IHTMLDOMNode *This, IHTMLDOMNode **p);HRESULT ( *get_nextSibling)(IHTMLDOMNode *This, IHTMLDOMNode **p);};
struct IHTMLWindow2Vtbl {HRESULT ( *QueryInterface)(IHTMLWindow2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLWindow2 *This);ULONG ( *Release)(IHTMLWindow2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLWindow2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLWindow2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLWindow2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLWindow2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *item)(IHTMLWindow2 *This, VARIANT *pvarIndex, VARIANT *pvarResult);HRESULT ( *get_length)(IHTMLWindow2 *This, int *p);HRESULT ( *get_frames)(IHTMLWindow2 *This, IHTMLFramesCollection2 **p);HRESULT ( *put_defaultStatus)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_defaultStatus)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *put_status)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_status)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *setTimeout)(IHTMLWindow2 *This, BSTR expression, int msec, VARIANT *language, int *timerID);HRESULT ( *clearTimeout)(IHTMLWindow2 *This, int timerID);HRESULT ( *alert)(IHTMLWindow2 *This, BSTR message);HRESULT ( *confirm)(IHTMLWindow2 *This, BSTR message, VARIANT_BOOL *confirmed);HRESULT ( *prompt)(IHTMLWindow2 *This, BSTR message, BSTR defstr, VARIANT *textdata);HRESULT ( *get_Image)(IHTMLWindow2 *This, IHTMLImageElementFactory **p);HRESULT ( *get_location)(IHTMLWindow2 *This, IHTMLLocation **p);HRESULT ( *get_history)(IHTMLWindow2 *This, IOmHistory **p);HRESULT ( *close)(IHTMLWindow2 *This);HRESULT ( *put_opener)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_opener)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *get_navigator)(IHTMLWindow2 *This, IOmNavigator **p);HRESULT ( *put_name)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_name)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *get_parent)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *open)(IHTMLWindow2 *This, BSTR url, BSTR name, BSTR features, VARIANT_BOOL replace, IHTMLWindow2 **pomWindowResult);HRESULT ( *get_self)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *get_top)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *get_window)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *navigate)(IHTMLWindow2 *This, BSTR url);HRESULT ( *put_onfocus)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onblur)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onhelp)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onresize)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onresize)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onscroll)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onscroll)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *get_document)(IHTMLWindow2 *This, IHTMLDocument2 **p);HRESULT ( *get_event)(IHTMLWindow2 *This, IHTMLEventObj **p);HRESULT ( *get__newEnum)(IHTMLWindow2 *This, IUnknown **p);HRESULT ( *showModalDialog)(IHTMLWindow2 *This, BSTR dialog, VARIANT *varArgIn, VARIANT *varOptions, VARIANT *varArgOut);HRESULT ( *showHelp)(IHTMLWindow2 *This, BSTR helpURL, VARIANT helpArg, BSTR features);HRESULT ( *get_screen)(IHTMLWindow2 *This, IHTMLScreen **p);HRESULT ( *get_Option)(IHTMLWindow2 *This, IHTMLOptionElementFactory **p);HRESULT ( *focus)(IHTMLWindow2 *This);HRESULT ( *get_closed)(IHTMLWindow2 *This, VARIANT_BOOL *p);HRESULT ( *blur)(IHTMLWindow2 *This);HRESULT ( *scroll)(IHTMLWindow2 *This, int x, int y);HRESULT ( *get_clientInformation)(IHTMLWindow2 *This, IOmNavigator **p);HRESULT ( *setInterval)(IHTMLWindow2 *This, BSTR expression, int msec, VARIANT *language, int *timerID);HRESULT ( *clearInterval)(IHTMLWindow2 *This, int timerID);HRESULT ( *put_offscreenBuffering)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_offscreenBuffering)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *execScript)(IHTMLWindow2 *This, BSTR code, BSTR language, VARIANT *pvarRet);HRESULT ( *toString)(IHTMLWindow2 *This, BSTR *String);HRESULT ( *scrollBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *scrollTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *moveTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *moveBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *resizeTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *resizeBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *get_external)(IHTMLWindow2 *This, IDispatch **p);};
struct IHTMLWindow3Vtbl {HRESULT ( *QueryInterface)(IHTMLWindow3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLWindow3 *This);ULONG ( *Release)(IHTMLWindow3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLWindow3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLWindow3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLWindow3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLWindow3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_screenLeft)(IHTMLWindow3 *This, int *p);HRESULT ( *get_screenTop)(IHTMLWindow3 *This, int *p);HRESULT ( *attachEvent)(IHTMLWindow3 *This, BSTR event, IDispatch *pDisp, VARIANT_BOOL *pfResult);HRESULT ( *detachEvent)(IHTMLWindow3 *This, BSTR event, IDispatch *pDisp);HRESULT ( *setTimeout)(IHTMLWindow3 *This, VARIANT *expression, int msec, VARIANT *language, int *timerID);HRESULT ( *setInterval)(IHTMLWindow3 *This, VARIANT *expression, int msec, VARIANT *language, int *timerID);HRESULT ( *print)(IHTMLWindow3 *This);HRESULT ( *put_onbeforeprint)(IHTMLWindow3 *This, VARIANT v);HRESULT ( *get_onbeforeprint)(IHTMLWindow3 *This, VARIANT *p);HRESULT ( *put_onafterprint)(IHTMLWindow3 *This, VARIANT v);HRESULT ( *get_onafterprint)(IHTMLWindow3 *This, VARIANT *p);HRESULT ( *get_clipboardData)(IHTMLWindow3 *This, IHTMLDataTransfer **p);HRESULT ( *showModelessDialog)(IHTMLWindow3 *This, BSTR url, VARIANT *varArgIn, VARIANT *options, IHTMLWindow2 **pDialog);};
struct IOmNavigatorVtbl {HRESULT ( *QueryInterface)(IOmNavigator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOmNavigator *This);ULONG ( *Release)(IOmNavigator *This);HRESULT ( *GetTypeInfoCount)(IOmNavigator *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IOmNavigator *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IOmNavigator *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IOmNavigator *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_appCodeName)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appName)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appVersion)(IOmNavigator *This, BSTR *p);HRESULT ( *get_userAgent)(IOmNavigator *This, BSTR *p);HRESULT ( *javaEnabled)(IOmNavigator *This, VARIANT_BOOL *enabled);HRESULT ( *taintEnabled)(IOmNavigator *This, VARIANT_BOOL *enabled);HRESULT ( *get_mimeTypes)(IOmNavigator *This, IHTMLMimeTypesCollection **p);HRESULT ( *get_plugins)(IOmNavigator *This, IHTMLPluginsCollection **p);HRESULT ( *get_cookieEnabled)(IOmNavigator *This, VARIANT_BOOL *p);HRESULT ( *get_opsProfile)(IOmNavigator *This, IHTMLOpsProfile **p);HRESULT ( *toString)(IOmNavigator *This, BSTR *string);HRESULT ( *get_cpuClass)(IOmNavigator *This, BSTR *p);HRESULT ( *get_systemLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_browserLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_userLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_platform)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appMinorVersion)(IOmNavigator *This, BSTR *p);HRESULT ( *get_connectionSpeed)(IOmNavigator *This, int *p);HRESULT ( *get_onLine)(IOmNavigator *This, VARIANT_BOOL *p);HRESULT ( *get_userProfile)(IOmNavigator *This, IHTMLOpsProfile **p);};
struct ISensNetworkVtbl {HRESULT ( *QueryInterface)(ISensNetwork *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISensNetwork *This);ULONG ( *Release)(ISensNetwork *This);HRESULT ( *GetTypeInfoCount)(ISensNetwork *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISensNetwork *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISensNetwork *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISensNetwork *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ConnectionMade)(ISensNetwork *This, BSTR bstrConnection, ULONG ulType, LPSENS_QOCINFO lpQOCInfo);HRESULT ( *ConnectionMadeNoQOCInfo)(ISensNetwork *This, BSTR bstrConnection, ULONG ulType);HRESULT ( *ConnectionLost)(ISensNetwork *This, BSTR bstrConnection, ULONG ulType);HRESULT ( *DestinationReachable)(ISensNetwork *This, BSTR bstrDestination, BSTR bstrConnection, ULONG ulType, LPSENS_QOCINFO lpQOCInfo);HRESULT ( *DestinationReachableNoQOCInfo)(ISensNetwork *This, BSTR bstrDestination, BSTR bstrConnection, ULONG ulType);};
struct IUPnPDevicesVtbl {HRESULT ( *QueryInterface)(IUPnPDevices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDevices *This);ULONG ( *Release)(IUPnPDevices *This);HRESULT ( *GetTypeInfoCount)(IUPnPDevices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPDevices *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPDevices *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPDevices *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IUPnPDevices *This, int *plCount);HRESULT ( *get__NewEnum)(IUPnPDevices *This, LPUNKNOWN *ppunk);HRESULT ( *get_Item)(IUPnPDevices *This, BSTR bstrUDN, IUPnPDevice **ppDevice);};
struct IVideoWindowVtbl {HRESULT ( *QueryInterface)(IVideoWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVideoWindow *This);ULONG ( *Release)(IVideoWindow *This);HRESULT ( *GetTypeInfoCount)(IVideoWindow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVideoWindow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVideoWindow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVideoWindow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Caption)(IVideoWindow *This, BSTR strCaption);HRESULT ( *get_Caption)(IVideoWindow *This, BSTR *strCaption);HRESULT ( *put_WindowStyle)(IVideoWindow *This, int WindowStyle);HRESULT ( *get_WindowStyle)(IVideoWindow *This, int *WindowStyle);HRESULT ( *put_WindowStyleEx)(IVideoWindow *This, int WindowStyleEx);HRESULT ( *get_WindowStyleEx)(IVideoWindow *This, int *WindowStyleEx);HRESULT ( *put_AutoShow)(IVideoWindow *This, int AutoShow);HRESULT ( *get_AutoShow)(IVideoWindow *This, int *AutoShow);HRESULT ( *put_WindowState)(IVideoWindow *This, int WindowState);HRESULT ( *get_WindowState)(IVideoWindow *This, int *WindowState);HRESULT ( *put_BackgroundPalette)(IVideoWindow *This, int BackgroundPalette);HRESULT ( *get_BackgroundPalette)(IVideoWindow *This, int *pBackgroundPalette);HRESULT ( *put_Visible)(IVideoWindow *This, int Visible);HRESULT ( *get_Visible)(IVideoWindow *This, int *pVisible);HRESULT ( *put_Left)(IVideoWindow *This, int Left);HRESULT ( *get_Left)(IVideoWindow *This, int *pLeft);HRESULT ( *put_Width)(IVideoWindow *This, int Width);HRESULT ( *get_Width)(IVideoWindow *This, int *pWidth);HRESULT ( *put_Top)(IVideoWindow *This, int Top);HRESULT ( *get_Top)(IVideoWindow *This, int *pTop);HRESULT ( *put_Height)(IVideoWindow *This, int Height);HRESULT ( *get_Height)(IVideoWindow *This, int *pHeight);HRESULT ( *put_Owner)(IVideoWindow *This, OAHWND Owner);HRESULT ( *get_Owner)(IVideoWindow *This, OAHWND *Owner);HRESULT ( *put_MessageDrain)(IVideoWindow *This, OAHWND Drain);HRESULT ( *get_MessageDrain)(IVideoWindow *This, OAHWND *Drain);HRESULT ( *get_BorderColor)(IVideoWindow *This, int *Color);HRESULT ( *put_BorderColor)(IVideoWindow *This, int Color);HRESULT ( *get_FullScreenMode)(IVideoWindow *This, int *FullScreenMode);HRESULT ( *put_FullScreenMode)(IVideoWindow *This, int FullScreenMode);HRESULT ( *SetWindowForeground)(IVideoWindow *This, int Focus);HRESULT ( *NotifyOwnerMessage)(IVideoWindow *This, OAHWND hwnd, int uMsg, int wParam, int lParam);HRESULT ( *SetWindowPosition)(IVideoWindow *This, int Left, int Top, int Width, int Height);HRESULT ( *GetWindowPosition)(IVideoWindow *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *GetMinIdealImageSize)(IVideoWindow *This, int *pWidth, int *pHeight);HRESULT ( *GetMaxIdealImageSize)(IVideoWindow *This, int *pWidth, int *pHeight);HRESULT ( *GetRestorePosition)(IVideoWindow *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *HideCursor)(IVideoWindow *This, int HideCursor);HRESULT ( *IsCursorHidden)(IVideoWindow *This, int *CursorHidden);};
struct IClientCapsVtbl {HRESULT ( *QueryInterface)(IClientCaps *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClientCaps *This);ULONG ( *Release)(IClientCaps *This);HRESULT ( *GetTypeInfoCount)(IClientCaps *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IClientCaps *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IClientCaps *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IClientCaps *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_javaEnabled)(IClientCaps *This, VARIANT_BOOL *pVal);HRESULT ( *get_cookieEnabled)(IClientCaps *This, VARIANT_BOOL *pVal);HRESULT ( *get_cpuClass)(IClientCaps *This, BSTR *p);HRESULT ( *get_systemLanguage)(IClientCaps *This, BSTR *p);HRESULT ( *get_userLanguage)(IClientCaps *This, BSTR *p);HRESULT ( *get_platform)(IClientCaps *This, BSTR *p);HRESULT ( *get_connectionSpeed)(IClientCaps *This, int *p);HRESULT ( *get_onLine)(IClientCaps *This, VARIANT_BOOL *p);HRESULT ( *get_colorDepth)(IClientCaps *This, int *p);HRESULT ( *get_bufferDepth)(IClientCaps *This, int *p);HRESULT ( *get_width)(IClientCaps *This, int *p);HRESULT ( *get_height)(IClientCaps *This, int *p);HRESULT ( *get_availHeight)(IClientCaps *This, int *p);HRESULT ( *get_availWidth)(IClientCaps *This, int *p);HRESULT ( *get_connectionType)(IClientCaps *This, BSTR *p);HRESULT ( *isComponentInstalled)(IClientCaps *This, BSTR bstrName, BSTR bstrType, BSTR bStrVer, VARIANT_BOOL *p);HRESULT ( *getComponentVersion)(IClientCaps *This, BSTR bstrName, BSTR bstrType, BSTR *pbstrVer);HRESULT ( *compareVersions)(IClientCaps *This, BSTR bstrVer1, BSTR bstrVer2, int *p);HRESULT ( *addComponentRequest)(IClientCaps *This, BSTR bstrName, BSTR bstrType, BSTR bstrVer);HRESULT ( *doComponentRequest)(IClientCaps *This, VARIANT_BOOL *p);HRESULT ( *clearComponentRequest)(IClientCaps *This);};
struct IDispatchExVtbl {HRESULT ( *QueryInterface)(IDispatchEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatchEx *This);ULONG ( *Release)(IDispatchEx *This);HRESULT ( *GetTypeInfoCount)(IDispatchEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatchEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatchEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatchEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDispID)(IDispatchEx *This, BSTR bstrName, DWORD grfdex, DISPID *pid);HRESULT ( *InvokeEx)(IDispatchEx *This, DISPID id, LCID lcid, WORD wFlags, DISPPARAMS *pdp, VARIANT *pvarRes, EXCEPINFO *pei, IServiceProvider *pspCaller);HRESULT ( *DeleteMemberByName)(IDispatchEx *This, BSTR bstrName, DWORD grfdex);HRESULT ( *DeleteMemberByDispID)(IDispatchEx *This, DISPID id);HRESULT ( *GetMemberProperties)(IDispatchEx *This, DISPID id, DWORD grfdexFetch, DWORD *pgrfdex);HRESULT ( *GetMemberName)(IDispatchEx *This, DISPID id, BSTR *pbstrName);HRESULT ( *GetNextDispID)(IDispatchEx *This, DWORD grfdex, DISPID id, DISPID *pid);HRESULT ( *GetNameSpaceParent)(IDispatchEx *This, IUnknown **ppunk);};
struct IFilterInfoVtbl {HRESULT ( *QueryInterface)(IFilterInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterInfo *This);ULONG ( *Release)(IFilterInfo *This);HRESULT ( *GetTypeInfoCount)(IFilterInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFilterInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFilterInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFilterInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *FindPin)(IFilterInfo *This, BSTR strPinID, IDispatch **ppUnk);HRESULT ( *get_Name)(IFilterInfo *This, BSTR *strName);HRESULT ( *get_VendorInfo)(IFilterInfo *This, BSTR *strVendorInfo);HRESULT ( *get_Filter)(IFilterInfo *This, IUnknown **ppUnk);HRESULT ( *get_Pins)(IFilterInfo *This, IDispatch **ppUnk);HRESULT ( *get_IsFileSource)(IFilterInfo *This, LONG *pbIsSource);HRESULT ( *get_Filename)(IFilterInfo *This, BSTR *pstrFilename);HRESULT ( *put_Filename)(IFilterInfo *This, BSTR strFilename);};
struct IFtpWebViewVtbl {HRESULT ( *QueryInterface)(IFtpWebView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFtpWebView *This);ULONG ( *Release)(IFtpWebView *This);HRESULT ( *GetTypeInfoCount)(IFtpWebView *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFtpWebView *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFtpWebView *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFtpWebView *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Server)(IFtpWebView *This, BSTR *pbstr);HRESULT ( *get_Directory)(IFtpWebView *This, BSTR *pbstr);HRESULT ( *get_UserName)(IFtpWebView *This, BSTR *pbstr);HRESULT ( *get_PasswordLength)(IFtpWebView *This, int *plLength);HRESULT ( *get_EmailAddress)(IFtpWebView *This, BSTR *pbstr);HRESULT ( *put_EmailAddress)(IFtpWebView *This, BSTR bstr);HRESULT ( *get_CurrentLoginAnonymous)(IFtpWebView *This, VARIANT_BOOL *pfAnonymousLogin);HRESULT ( *get_MessageOfTheDay)(IFtpWebView *This, BSTR *pbstr);HRESULT ( *LoginAnonymously)(IFtpWebView *This);HRESULT ( *LoginWithPassword)(IFtpWebView *This, BSTR bUserName, BSTR bPassword);HRESULT ( *LoginWithoutPassword)(IFtpWebView *This, BSTR bUserName);HRESULT ( *InvokeHelp)(IFtpWebView *This);};
struct IHTMLStyle2Vtbl {HRESULT ( *QueryInterface)(IHTMLStyle2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyle2 *This);ULONG ( *Release)(IHTMLStyle2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyle2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyle2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyle2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyle2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_tableLayout)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_tableLayout)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_borderCollapse)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_borderCollapse)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_direction)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_direction)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_behavior)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_behavior)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *setExpression)(IHTMLStyle2 *This, BSTR propname, BSTR expression, BSTR language);HRESULT ( *getExpression)(IHTMLStyle2 *This, BSTR propname, VARIANT *expression);HRESULT ( *removeExpression)(IHTMLStyle2 *This, BSTR propname, VARIANT_BOOL *pfSuccess);HRESULT ( *put_position)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_position)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_unicodeBidi)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_unicodeBidi)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_bottom)(IHTMLStyle2 *This, VARIANT v);HRESULT ( *get_bottom)(IHTMLStyle2 *This, VARIANT *p);HRESULT ( *put_right)(IHTMLStyle2 *This, VARIANT v);HRESULT ( *get_right)(IHTMLStyle2 *This, VARIANT *p);HRESULT ( *put_pixelBottom)(IHTMLStyle2 *This, int v);HRESULT ( *get_pixelBottom)(IHTMLStyle2 *This, int *p);HRESULT ( *put_pixelRight)(IHTMLStyle2 *This, int v);HRESULT ( *get_pixelRight)(IHTMLStyle2 *This, int *p);HRESULT ( *put_posBottom)(IHTMLStyle2 *This, float v);HRESULT ( *get_posBottom)(IHTMLStyle2 *This, float *p);HRESULT ( *put_posRight)(IHTMLStyle2 *This, float v);HRESULT ( *get_posRight)(IHTMLStyle2 *This, float *p);HRESULT ( *put_imeMode)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_imeMode)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_rubyAlign)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_rubyAlign)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_rubyPosition)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_rubyPosition)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_rubyOverhang)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_rubyOverhang)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_layoutGridChar)(IHTMLStyle2 *This, VARIANT v);HRESULT ( *get_layoutGridChar)(IHTMLStyle2 *This, VARIANT *p);HRESULT ( *put_layoutGridLine)(IHTMLStyle2 *This, VARIANT v);HRESULT ( *get_layoutGridLine)(IHTMLStyle2 *This, VARIANT *p);HRESULT ( *put_layoutGridMode)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_layoutGridMode)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_layoutGridType)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_layoutGridType)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_layoutGrid)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_layoutGrid)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_wordBreak)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_wordBreak)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_lineBreak)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_lineBreak)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_textJustify)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_textJustify)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_textJustifyTrim)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_textJustifyTrim)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_textKashida)(IHTMLStyle2 *This, VARIANT v);HRESULT ( *get_textKashida)(IHTMLStyle2 *This, VARIANT *p);HRESULT ( *put_textAutospace)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_textAutospace)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_overflowX)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_overflowX)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_overflowY)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_overflowY)(IHTMLStyle2 *This, BSTR *p);HRESULT ( *put_accelerator)(IHTMLStyle2 *This, BSTR v);HRESULT ( *get_accelerator)(IHTMLStyle2 *This, BSTR *p);};
struct ILayoutRectVtbl {HRESULT ( *QueryInterface)(ILayoutRect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILayoutRect *This);ULONG ( *Release)(ILayoutRect *This);HRESULT ( *GetTypeInfoCount)(ILayoutRect *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ILayoutRect *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ILayoutRect *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ILayoutRect *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_nextRect)(ILayoutRect *This, BSTR bstrElementId);HRESULT ( *get_nextRect)(ILayoutRect *This, BSTR *pbstrElementId);HRESULT ( *put_contentSrc)(ILayoutRect *This, VARIANT varContentSrc);HRESULT ( *get_contentSrc)(ILayoutRect *This, VARIANT *pvarContentSrc);HRESULT ( *put_honorPageBreaks)(ILayoutRect *This, VARIANT_BOOL v);HRESULT ( *get_honorPageBreaks)(ILayoutRect *This, VARIANT_BOOL *p);HRESULT ( *put_honorPageRules)(ILayoutRect *This, VARIANT_BOOL v);HRESULT ( *get_honorPageRules)(ILayoutRect *This, VARIANT_BOOL *p);HRESULT ( *put_nextRectElement)(ILayoutRect *This, IDispatch *pElem);HRESULT ( *get_nextRectElement)(ILayoutRect *This, IDispatch **ppElem);HRESULT ( *get_contentDocument)(ILayoutRect *This, IDispatch **pDoc);};
struct ISoapReaderVtbl {HRESULT ( *QueryInterface)(ISoapReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapReader *This);ULONG ( *Release)(ISoapReader *This);HRESULT ( *GetTypeInfoCount)(ISoapReader *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapReader *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapReader *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapReader *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *load)(ISoapReader *This, VARIANT xmlSource, BSTR bstrSoapAction, VARIANT_BOOL *isSuccessful);HRESULT ( *loadXML)(ISoapReader *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);HRESULT ( *get_DOM)(ISoapReader *This, IXMLDOMDocument **pIXMLDOMDocument);HRESULT ( *get_Envelope)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_Body)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_Header)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_Fault)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_FaultString)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_FaultCode)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_FaultActor)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_FaultDetail)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_HeaderEntry)(ISoapReader *This, BSTR LocalName, BSTR NamespaceURI, IXMLDOMElement **ppElement);HRESULT ( *get_MustUnderstandHeaderEntries)(ISoapReader *This, IXMLDOMNodeList **ppNodeList);HRESULT ( *get_HeaderEntries)(ISoapReader *This, IXMLDOMNodeList **ppNodeList);HRESULT ( *get_BodyEntries)(ISoapReader *This, IXMLDOMNodeList **ppNodeList);HRESULT ( *get_BodyEntry)(ISoapReader *This, BSTR LocalName, BSTR NamespaceURI, IXMLDOMElement **ppElement);HRESULT ( *get_RPCStruct)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_RPCParameter)(ISoapReader *This, BSTR LocalName, BSTR NamespaceURI, IXMLDOMElement **ppElement);HRESULT ( *get_RPCResult)(ISoapReader *This, IXMLDOMElement **ppElement);HRESULT ( *get_soapAction)(ISoapReader *This, BSTR *pbstrSoapAction);};
struct IWebBrowserVtbl {HRESULT ( *QueryInterface)(IWebBrowser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser *This);ULONG ( *Release)(IWebBrowser *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser *This);HRESULT ( *GoForward)(IWebBrowser *This);HRESULT ( *GoHome)(IWebBrowser *This);HRESULT ( *GoSearch)(IWebBrowser *This);HRESULT ( *Navigate)(IWebBrowser *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser *This);HRESULT ( *Refresh2)(IWebBrowser *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser *This);HRESULT ( *get_Application)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser *This, int *pl);HRESULT ( *put_Left)(IWebBrowser *This, int Left);HRESULT ( *get_Top)(IWebBrowser *This, int *pl);HRESULT ( *put_Top)(IWebBrowser *This, int Top);HRESULT ( *get_Width)(IWebBrowser *This, int *pl);HRESULT ( *put_Width)(IWebBrowser *This, int Width);HRESULT ( *get_Height)(IWebBrowser *This, int *pl);HRESULT ( *put_Height)(IWebBrowser *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser *This, VARIANT_BOOL *pBool);};
struct IWebBridgeVtbl {HRESULT ( *QueryInterface)(IWebBridge *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBridge *This);ULONG ( *Release)(IWebBridge *This);HRESULT ( *GetTypeInfoCount)(IWebBridge *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBridge *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBridge *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBridge *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_URL)(IWebBridge *This, BSTR v);HRESULT ( *get_URL)(IWebBridge *This, BSTR *p);HRESULT ( *put_Scrollbar)(IWebBridge *This, VARIANT_BOOL v);HRESULT ( *get_Scrollbar)(IWebBridge *This, VARIANT_BOOL *p);HRESULT ( *put_embed)(IWebBridge *This, VARIANT_BOOL v);HRESULT ( *get_embed)(IWebBridge *This, VARIANT_BOOL *p);HRESULT ( *get_event)(IWebBridge *This, IDispatch **p);HRESULT ( *get_readyState)(IWebBridge *This, int *p);HRESULT ( *AboutBox)(IWebBridge *This);};
struct IHomePageVtbl {HRESULT ( *QueryInterface)(IHomePage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHomePage *This);ULONG ( *Release)(IHomePage *This);HRESULT ( *GetTypeInfoCount)(IHomePage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHomePage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHomePage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHomePage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *navigateHomePage)(IHomePage *This);HRESULT ( *setHomePage)(IHomePage *This, BSTR bstrURL);HRESULT ( *isHomePage)(IHomePage *This, BSTR bstrURL, VARIANT_BOOL *p);};
struct IMXWriterVtbl {HRESULT ( *QueryInterface)(IMXWriter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMXWriter *This);ULONG ( *Release)(IMXWriter *This);HRESULT ( *GetTypeInfoCount)(IMXWriter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMXWriter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMXWriter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMXWriter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_output)(IMXWriter *This, VARIANT varDestination);HRESULT ( *get_output)(IMXWriter *This, VARIANT *varDestination);HRESULT ( *put_encoding)(IMXWriter *This, BSTR strEncoding);HRESULT ( *get_encoding)(IMXWriter *This, BSTR *strEncoding);HRESULT ( *put_byteOrderMark)(IMXWriter *This, VARIANT_BOOL fWriteByteOrderMark);HRESULT ( *get_byteOrderMark)(IMXWriter *This, VARIANT_BOOL *fWriteByteOrderMark);HRESULT ( *put_indent)(IMXWriter *This, VARIANT_BOOL fIndentMode);HRESULT ( *get_indent)(IMXWriter *This, VARIANT_BOOL *fIndentMode);HRESULT ( *put_standalone)(IMXWriter *This, VARIANT_BOOL fValue);HRESULT ( *get_standalone)(IMXWriter *This, VARIANT_BOOL *fValue);HRESULT ( *put_omitXMLDeclaration)(IMXWriter *This, VARIANT_BOOL fValue);HRESULT ( *get_omitXMLDeclaration)(IMXWriter *This, VARIANT_BOOL *fValue);HRESULT ( *put_version)(IMXWriter *This, BSTR strVersion);HRESULT ( *get_version)(IMXWriter *This, BSTR *strVersion);HRESULT ( *put_disableOutputEscaping)(IMXWriter *This, VARIANT_BOOL fValue);HRESULT ( *get_disableOutputEscaping)(IMXWriter *This, VARIANT_BOOL *fValue);HRESULT ( *flush)(IMXWriter *This);};
struct IScopeAdmVtbl {HRESULT ( *QueryInterface)(IScopeAdm *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScopeAdm *This);ULONG ( *Release)(IScopeAdm *This);HRESULT ( *GetTypeInfoCount)(IScopeAdm *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IScopeAdm *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IScopeAdm *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IScopeAdm *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Rescan)(IScopeAdm *This, VARIANT_BOOL fFull);HRESULT ( *SetLogonInfo)(IScopeAdm *This, BSTR bstrLogon, BSTR bstrPassword);HRESULT ( *get_Path)(IScopeAdm *This, BSTR *pVal);HRESULT ( *put_Path)(IScopeAdm *This, BSTR newVal);HRESULT ( *get_Alias)(IScopeAdm *This, BSTR *pVal);HRESULT ( *put_Alias)(IScopeAdm *This, BSTR newVal);HRESULT ( *get_ExcludeScope)(IScopeAdm *This, VARIANT_BOOL *pVal);HRESULT ( *put_ExcludeScope)(IScopeAdm *This, VARIANT_BOOL newVal);HRESULT ( *get_VirtualScope)(IScopeAdm *This, VARIANT_BOOL *pVal);HRESULT ( *get_Logon)(IScopeAdm *This, BSTR *pVal);};
struct IThumbCtlVtbl {HRESULT ( *QueryInterface)(IThumbCtl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IThumbCtl *This);ULONG ( *Release)(IThumbCtl *This);HRESULT ( *GetTypeInfoCount)(IThumbCtl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IThumbCtl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IThumbCtl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IThumbCtl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *displayFile)(IThumbCtl *This, BSTR bsFileName, VARIANT_BOOL *MIDL_0015);HRESULT ( *haveThumbnail)(IThumbCtl *This, VARIANT_BOOL *MIDL_0016);HRESULT ( *get_freeSpace)(IThumbCtl *This, BSTR *MIDL_0017);HRESULT ( *get_usedSpace)(IThumbCtl *This, BSTR *MIDL_0018);HRESULT ( *get_totalSpace)(IThumbCtl *This, BSTR *MIDL_0019);};
struct IwfoldersVtbl {HRESULT ( *QueryInterface)(Iwfolders *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Iwfolders *This);ULONG ( *Release)(Iwfolders *This);HRESULT ( *GetTypeInfoCount)(Iwfolders *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Iwfolders *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Iwfolders *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Iwfolders *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *navigate)(Iwfolders *This, BSTR bstrUrl, BSTR *pbstrRetVal);HRESULT ( *navigateFrame)(Iwfolders *This, BSTR bstrUrl, BSTR bstrTargetFrame, BSTR *pbstrRetVal);HRESULT ( *navigateNoSite)(Iwfolders *This, BSTR bstrUrl, BSTR bstrTargetFrame, DWORD dwhwnd, IUnknown *pwb);};
struct IPinInfoVtbl {HRESULT ( *QueryInterface)(IPinInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPinInfo *This);ULONG ( *Release)(IPinInfo *This);HRESULT ( *GetTypeInfoCount)(IPinInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPinInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPinInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPinInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Pin)(IPinInfo *This, IUnknown **ppUnk);HRESULT ( *get_ConnectedTo)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_ConnectionMediaType)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_FilterInfo)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_Name)(IPinInfo *This, BSTR *ppUnk);HRESULT ( *get_Direction)(IPinInfo *This, LONG *ppDirection);HRESULT ( *get_PinID)(IPinInfo *This, BSTR *strPinID);HRESULT ( *get_MediaTypes)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *Connect)(IPinInfo *This, IUnknown *pPin);HRESULT ( *ConnectDirect)(IPinInfo *This, IUnknown *pPin);HRESULT ( *ConnectWithType)(IPinInfo *This, IUnknown *pPin, IDispatch *pMediaType);HRESULT ( *Disconnect)(IPinInfo *This);HRESULT ( *Render)(IPinInfo *This);};
struct IRTCMediaRequestEventVtbl {HRESULT ( *QueryInterface)(IRTCMediaRequestEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCMediaRequestEvent *This);ULONG ( *Release)(IRTCMediaRequestEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCMediaRequestEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCMediaRequestEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCMediaRequestEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCMediaRequestEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCMediaRequestEvent *This, IRTCSession2 **ppSession);HRESULT ( *get_ProposedMedia)(IRTCMediaRequestEvent *This, int *plMediaTypes);HRESULT ( *get_CurrentMedia)(IRTCMediaRequestEvent *This, int *plMediaTypes);HRESULT ( *Accept)(IRTCMediaRequestEvent *This, int lMediaTypes);HRESULT ( *get_RemotePreferredSecurityLevel)(IRTCMediaRequestEvent *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL *penSecurityLevel);HRESULT ( *Reject)(IRTCMediaRequestEvent *This);HRESULT ( *get_State)(IRTCMediaRequestEvent *This, RTC_REINVITE_STATE *pState);};
struct IServerXMLHTTPRequestVtbl {HRESULT ( *QueryInterface)(IServerXMLHTTPRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServerXMLHTTPRequest *This);ULONG ( *Release)(IServerXMLHTTPRequest *This);HRESULT ( *GetTypeInfoCount)(IServerXMLHTTPRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IServerXMLHTTPRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IServerXMLHTTPRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IServerXMLHTTPRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *open)(IServerXMLHTTPRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);HRESULT ( *setRequestHeader)(IServerXMLHTTPRequest *This, BSTR bstrHeader, BSTR bstrValue);HRESULT ( *getResponseHeader)(IServerXMLHTTPRequest *This, BSTR bstrHeader, BSTR *pbstrValue);HRESULT ( *getAllResponseHeaders)(IServerXMLHTTPRequest *This, BSTR *pbstrHeaders);HRESULT ( *send)(IServerXMLHTTPRequest *This, VARIANT varBody);HRESULT ( *abort)(IServerXMLHTTPRequest *This);HRESULT ( *get_status)(IServerXMLHTTPRequest *This, int *plStatus);HRESULT ( *get_statusText)(IServerXMLHTTPRequest *This, BSTR *pbstrStatus);HRESULT ( *get_responseXML)(IServerXMLHTTPRequest *This, IDispatch **ppBody);HRESULT ( *get_responseText)(IServerXMLHTTPRequest *This, BSTR *pbstrBody);HRESULT ( *get_responseBody)(IServerXMLHTTPRequest *This, VARIANT *pvarBody);HRESULT ( *get_responseStream)(IServerXMLHTTPRequest *This, VARIANT *pvarBody);HRESULT ( *get_readyState)(IServerXMLHTTPRequest *This, int *plState);HRESULT ( *put_onreadystatechange)(IServerXMLHTTPRequest *This, IDispatch *pReadyStateSink);HRESULT ( *setTimeouts)(IServerXMLHTTPRequest *This, int resolveTimeout, int connectTimeout, int sendTimeout, int receiveTimeout);HRESULT ( *waitForResponse)(IServerXMLHTTPRequest *This, VARIANT timeoutInSeconds, VARIANT_BOOL *isSuccessful);HRESULT ( *getOption)(IServerXMLHTTPRequest *This, SERVERXMLHTTP_OPTION option, VARIANT *value);HRESULT ( *setOption)(IServerXMLHTTPRequest *This, SERVERXMLHTTP_OPTION option, VARIANT value);};
struct IWebViewFolderIcon3Vtbl {HRESULT ( *QueryInterface)(IWebViewFolderIcon3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebViewFolderIcon3 *This);ULONG ( *Release)(IWebViewFolderIcon3 *This);HRESULT ( *GetTypeInfoCount)(IWebViewFolderIcon3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebViewFolderIcon3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebViewFolderIcon3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebViewFolderIcon3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_scale)(IWebViewFolderIcon3 *This, BSTR *MIDL_0020);HRESULT ( *put_scale)(IWebViewFolderIcon3 *This, BSTR MIDL_0021);HRESULT ( *get_path)(IWebViewFolderIcon3 *This, BSTR *MIDL_0022);HRESULT ( *put_path)(IWebViewFolderIcon3 *This, BSTR MIDL_0023);HRESULT ( *get_view)(IWebViewFolderIcon3 *This, BSTR *MIDL_0024);HRESULT ( *put_view)(IWebViewFolderIcon3 *This, BSTR MIDL_0025);HRESULT ( *get_advproperty)(IWebViewFolderIcon3 *This, VARIANT_BOOL *MIDL_0026);HRESULT ( *put_advproperty)(IWebViewFolderIcon3 *This, VARIANT_BOOL MIDL_0027);HRESULT ( *setSlice)(IWebViewFolderIcon3 *This, int index, VARIANT varHiBytes, VARIANT varLoBytes, VARIANT varColorref);HRESULT ( *get_item)(IWebViewFolderIcon3 *This, FolderItem **ppFolderItem);HRESULT ( *put_item)(IWebViewFolderIcon3 *This, FolderItem *pFolderItem);HRESULT ( *get_clickStyle)(IWebViewFolderIcon3 *This, LONG *plClickStyle);HRESULT ( *put_clickStyle)(IWebViewFolderIcon3 *This, LONG lClickStyle);HRESULT ( *get_labelGap)(IWebViewFolderIcon3 *This, LONG *plLabelGap);HRESULT ( *put_labelGap)(IWebViewFolderIcon3 *This, LONG lLabelGap);};
struct IHTMLOptionElementVtbl {HRESULT ( *QueryInterface)(IHTMLOptionElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElement *This);ULONG ( *Release)(IHTMLOptionElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_selected)(IHTMLOptionElement *This, VARIANT_BOOL v);HRESULT ( *get_selected)(IHTMLOptionElement *This, VARIANT_BOOL *p);HRESULT ( *put_value)(IHTMLOptionElement *This, BSTR v);HRESULT ( *get_value)(IHTMLOptionElement *This, BSTR *p);HRESULT ( *put_defaultSelected)(IHTMLOptionElement *This, VARIANT_BOOL v);HRESULT ( *get_defaultSelected)(IHTMLOptionElement *This, VARIANT_BOOL *p);HRESULT ( *put_index)(IHTMLOptionElement *This, LONG v);HRESULT ( *get_index)(IHTMLOptionElement *This, LONG *p);HRESULT ( *put_text)(IHTMLOptionElement *This, BSTR v);HRESULT ( *get_text)(IHTMLOptionElement *This, BSTR *p);HRESULT ( *get_form)(IHTMLOptionElement *This, IHTMLFormElement **p);};
struct IRTCMessagingEventVtbl {HRESULT ( *QueryInterface)(IRTCMessagingEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCMessagingEvent *This);ULONG ( *Release)(IRTCMessagingEvent *This);HRESULT ( *GetTypeInfoCount)(IRTCMessagingEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCMessagingEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCMessagingEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCMessagingEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCMessagingEvent *This, IRTCSession **ppSession);HRESULT ( *get_Participant)(IRTCMessagingEvent *This, IRTCParticipant **ppParticipant);HRESULT ( *get_EventType)(IRTCMessagingEvent *This, RTC_MESSAGING_EVENT_TYPE *penEventType);HRESULT ( *get_Message)(IRTCMessagingEvent *This, BSTR *pbstrMessage);HRESULT ( *get_MessageHeader)(IRTCMessagingEvent *This, BSTR *pbstrMessageHeader);HRESULT ( *get_UserStatus)(IRTCMessagingEvent *This, RTC_MESSAGING_USER_STATUS *penUserStatus);};
struct IAMNetShowExPropsVtbl {HRESULT ( *QueryInterface)(IAMNetShowExProps *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMNetShowExProps *This);ULONG ( *Release)(IAMNetShowExProps *This);HRESULT ( *GetTypeInfoCount)(IAMNetShowExProps *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetShowExProps *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAMNetShowExProps *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAMNetShowExProps *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_SourceProtocol)(IAMNetShowExProps *This, int *pSourceProtocol);HRESULT ( *get_Bandwidth)(IAMNetShowExProps *This, int *pBandwidth);HRESULT ( *get_ErrorCorrection)(IAMNetShowExProps *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_CodecCount)(IAMNetShowExProps *This, int *pCodecCount);HRESULT ( *GetCodecInstalled)(IAMNetShowExProps *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(IAMNetShowExProps *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(IAMNetShowExProps *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *get_CreationDate)(IAMNetShowExProps *This, DATE *pCreationDate);HRESULT ( *get_SourceLink)(IAMNetShowExProps *This, BSTR *pbstrSourceLink);};
struct IAdminIndexServerVtbl {HRESULT ( *QueryInterface)(IAdminIndexServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdminIndexServer *This);ULONG ( *Release)(IAdminIndexServer *This);HRESULT ( *GetTypeInfoCount)(IAdminIndexServer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAdminIndexServer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAdminIndexServer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAdminIndexServer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MachineName)(IAdminIndexServer *This, BSTR *pVal);HRESULT ( *put_MachineName)(IAdminIndexServer *This, BSTR newVal);HRESULT ( *AddCatalog)(IAdminIndexServer *This, BSTR bstrCatName, BSTR bstrCatLocation, IDispatch **pIDsip);HRESULT ( *RemoveCatalog)(IAdminIndexServer *This, BSTR bstrCatName, VARIANT_BOOL fDelDirectory);HRESULT ( *GetCatalogByName)(IAdminIndexServer *This, BSTR bstrCatalogName, IDispatch **pDisp);HRESULT ( *FindFirstCatalog)(IAdminIndexServer *This, VARIANT_BOOL *pfFound);HRESULT ( *FindNextCatalog)(IAdminIndexServer *This, VARIANT_BOOL *pfFound);HRESULT ( *GetCatalog)(IAdminIndexServer *This, IDispatch **pIDisp);HRESULT ( *Start)(IAdminIndexServer *This);HRESULT ( *Stop)(IAdminIndexServer *This);HRESULT ( *IsRunning)(IAdminIndexServer *This, VARIANT_BOOL *pfIsRunning);HRESULT ( *EnableCI)(IAdminIndexServer *This, VARIANT_BOOL fAutoStart);HRESULT ( *Pause)(IAdminIndexServer *This);HRESULT ( *IsPaused)(IAdminIndexServer *This, VARIANT_BOOL *pfIsPaused);HRESULT ( *Continue)(IAdminIndexServer *This);HRESULT ( *SetLongProperty)(IAdminIndexServer *This, BSTR bstrPropName, LONG lVal);HRESULT ( *GetLongProperty)(IAdminIndexServer *This, BSTR bstrPropName, LONG *plVal);HRESULT ( *SetSZProperty)(IAdminIndexServer *This, BSTR bstrPropName, BSTR bstrVal);HRESULT ( *GetSZProperty)(IAdminIndexServer *This, BSTR bstrPropName, BSTR *pbstrVal);};
struct IUPnPDeviceFinderVtbl {HRESULT ( *QueryInterface)(IUPnPDeviceFinder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDeviceFinder *This);ULONG ( *Release)(IUPnPDeviceFinder *This);HRESULT ( *GetTypeInfoCount)(IUPnPDeviceFinder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPDeviceFinder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPDeviceFinder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPDeviceFinder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *FindByType)(IUPnPDeviceFinder *This, BSTR bstrTypeURI, DWORD dwFlags, IUPnPDevices **pDevices);HRESULT ( *CreateAsyncFind)(IUPnPDeviceFinder *This, BSTR bstrTypeURI, DWORD dwFlags, IUnknown *punkDeviceFinderCallback, LONG *plFindData);HRESULT ( *StartAsyncFind)(IUPnPDeviceFinder *This, LONG lFindData);HRESULT ( *CancelAsyncFind)(IUPnPDeviceFinder *This, LONG lFindData);HRESULT ( *FindByUDN)(IUPnPDeviceFinder *This, BSTR bstrUDN, IUPnPDevice **pDevice);};
struct IScriptErrorListVtbl {HRESULT ( *QueryInterface)(IScriptErrorList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptErrorList *This);ULONG ( *Release)(IScriptErrorList *This);HRESULT ( *GetTypeInfoCount)(IScriptErrorList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IScriptErrorList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IScriptErrorList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IScriptErrorList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *advanceError)(IScriptErrorList *This);HRESULT ( *retreatError)(IScriptErrorList *This);HRESULT ( *canAdvanceError)(IScriptErrorList *This, BOOL *pfCanAdvance);HRESULT ( *canRetreatError)(IScriptErrorList *This, BOOL *pfCanRetreat);HRESULT ( *getErrorLine)(IScriptErrorList *This, LONG *plLine);HRESULT ( *getErrorChar)(IScriptErrorList *This, LONG *plChar);HRESULT ( *getErrorCode)(IScriptErrorList *This, LONG *plCode);HRESULT ( *getErrorMsg)(IScriptErrorList *This, BSTR *pstr);HRESULT ( *getErrorUrl)(IScriptErrorList *This, BSTR *pstr);HRESULT ( *getAlwaysShowLockState)(IScriptErrorList *This, BOOL *pfAlwaysShowLocked);HRESULT ( *getDetailsPaneOpen)(IScriptErrorList *This, BOOL *pfDetailsPaneOpen);HRESULT ( *setDetailsPaneOpen)(IScriptErrorList *This, BOOL fDetailsPaneOpen);HRESULT ( *getPerErrorDisplay)(IScriptErrorList *This, BOOL *pfPerErrorDisplay);HRESULT ( *setPerErrorDisplay)(IScriptErrorList *This, BOOL fPerErrorDisplay);};
struct ISoapTypeMapper2Vtbl {HRESULT ( *QueryInterface)(ISoapTypeMapper2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapTypeMapper2 *This);ULONG ( *Release)(ISoapTypeMapper2 *This);HRESULT ( *GetTypeInfoCount)(ISoapTypeMapper2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapTypeMapper2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapTypeMapper2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapTypeMapper2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *init)(ISoapTypeMapper2 *This, ISoapTypeMapperFactory *pFactory, IXMLDOMNode *pSchema, enXSDType xsdType);HRESULT ( *read)(ISoapTypeMapper2 *This, IXMLDOMNode *pNode, BSTR bstrEncoding, enEncodingStyle encodingMode, int lFlags, VARIANT *pvar);HRESULT ( *write)(ISoapTypeMapper2 *This, ISoapSerializer *pSoapSerializer, BSTR bstrEncoding, enEncodingStyle encodingMode, int lFlags, VARIANT *pvar);HRESULT ( *varType)(ISoapTypeMapper2 *This, int *pvtType);HRESULT ( *iid)(ISoapTypeMapper2 *This, BSTR *bstrIIDAsString);};
struct IMediaPlayerDvdVtbl {HRESULT ( *QueryInterface)(IMediaPlayerDvd *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPlayerDvd *This);ULONG ( *Release)(IMediaPlayerDvd *This);HRESULT ( *GetTypeInfoCount)(IMediaPlayerDvd *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaPlayerDvd *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaPlayerDvd *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaPlayerDvd *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ButtonSelectAndActivate)(IMediaPlayerDvd *This, ULONG uiButton);HRESULT ( *UpperButtonSelect)(IMediaPlayerDvd *This);HRESULT ( *LowerButtonSelect)(IMediaPlayerDvd *This);HRESULT ( *LeftButtonSelect)(IMediaPlayerDvd *This);HRESULT ( *RightButtonSelect)(IMediaPlayerDvd *This);HRESULT ( *ButtonActivate)(IMediaPlayerDvd *This);HRESULT ( *ForwardScan)(IMediaPlayerDvd *This, double dwSpeed);HRESULT ( *BackwardScan)(IMediaPlayerDvd *This, double dwSpeed);HRESULT ( *PrevPGSearch)(IMediaPlayerDvd *This);HRESULT ( *TopPGSearch)(IMediaPlayerDvd *This);HRESULT ( *NextPGSearch)(IMediaPlayerDvd *This);HRESULT ( *TitlePlay)(IMediaPlayerDvd *This, ULONG uiTitle);HRESULT ( *ChapterPlay)(IMediaPlayerDvd *This, ULONG uiTitle, ULONG uiChapter);HRESULT ( *ChapterSearch)(IMediaPlayerDvd *This, ULONG Chapter);HRESULT ( *MenuCall)(IMediaPlayerDvd *This, DVDMenuIDConstants MenuID);HRESULT ( *ResumeFromMenu)(IMediaPlayerDvd *This);HRESULT ( *TimePlay)(IMediaPlayerDvd *This, ULONG uiTitle, BSTR bstrTime);HRESULT ( *TimeSearch)(IMediaPlayerDvd *This, BSTR bstrTime);HRESULT ( *ChapterPlayAutoStop)(IMediaPlayerDvd *This, ULONG ulTitle, ULONG ulChapter, ULONG ulChaptersToPlay);HRESULT ( *StillOff)(IMediaPlayerDvd *This);HRESULT ( *GoUp)(IMediaPlayerDvd *This);HRESULT ( *get_TotalTitleTime)(IMediaPlayerDvd *This, BSTR *bstrTime);HRESULT ( *GetNumberOfChapters)(IMediaPlayerDvd *This, ULONG ulTitle, ULONG *ulNumChapters);HRESULT ( *GetAudioLanguage)(IMediaPlayerDvd *This, ULONG ulStream, BSTR *bstrAudioLang);HRESULT ( *GetSubpictureLanguage)(IMediaPlayerDvd *This, ULONG ulStream, BSTR *bstrSubpictureLang);HRESULT ( *GetAllGPRMs)(IMediaPlayerDvd *This, VARIANT *vtGPRM);HRESULT ( *GetAllSPRMs)(IMediaPlayerDvd *This, VARIANT *vtSPRM);HRESULT ( *UOPValid)(IMediaPlayerDvd *This, ULONG ulUOP, VARIANT_BOOL *bValid);HRESULT ( *get_ButtonsAvailable)(IMediaPlayerDvd *This, ULONG *ulButtonsAvailable);HRESULT ( *get_CurrentButton)(IMediaPlayerDvd *This, ULONG *ulCurrentButton);HRESULT ( *get_AudioStreamsAvailable)(IMediaPlayerDvd *This, ULONG *ulAudioStreamsAvailable);HRESULT ( *get_CurrentAudioStream)(IMediaPlayerDvd *This, ULONG *ulAudioStream);HRESULT ( *put_CurrentAudioStream)(IMediaPlayerDvd *This, ULONG ulAudioStream);HRESULT ( *get_CurrentSubpictureStream)(IMediaPlayerDvd *This, ULONG *ulSubpictureStream);HRESULT ( *put_CurrentSubpictureStream)(IMediaPlayerDvd *This, ULONG ulSubpictureStream);HRESULT ( *get_SubpictureStreamsAvailable)(IMediaPlayerDvd *This, ULONG *ulNumSubpictureStreams);HRESULT ( *get_SubpictureOn)(IMediaPlayerDvd *This, VARIANT_BOOL *bSubpictureON);HRESULT ( *put_SubpictureOn)(IMediaPlayerDvd *This, VARIANT_BOOL bSubpictureON);HRESULT ( *get_AnglesAvailable)(IMediaPlayerDvd *This, ULONG *ulAnglesAvailable);HRESULT ( *get_CurrentAngle)(IMediaPlayerDvd *This, ULONG *ulAngle);HRESULT ( *put_CurrentAngle)(IMediaPlayerDvd *This, ULONG ulAngle);HRESULT ( *get_CurrentTitle)(IMediaPlayerDvd *This, ULONG *ulTitle);HRESULT ( *get_CurrentChapter)(IMediaPlayerDvd *This, ULONG *ulChapter);HRESULT ( *get_CurrentTime)(IMediaPlayerDvd *This, BSTR *bstrTime);HRESULT ( *put_Root)(IMediaPlayerDvd *This, BSTR bstrPath);HRESULT ( *get_Root)(IMediaPlayerDvd *This, BSTR *pbstrPath);HRESULT ( *get_FramesPerSecond)(IMediaPlayerDvd *This, ULONG *ulFps);HRESULT ( *get_CurrentDomain)(IMediaPlayerDvd *This, ULONG *ulDomain);HRESULT ( *get_TitlesAvailable)(IMediaPlayerDvd *This, ULONG *ulTitles);HRESULT ( *get_VolumesAvailable)(IMediaPlayerDvd *This, ULONG *pulVolumes);HRESULT ( *get_CurrentVolume)(IMediaPlayerDvd *This, ULONG *pulVolume);HRESULT ( *get_CurrentDiscSide)(IMediaPlayerDvd *This, ULONG *pulDiscSide);HRESULT ( *get_CCActive)(IMediaPlayerDvd *This, VARIANT_BOOL *bCCActive);HRESULT ( *put_CCActive)(IMediaPlayerDvd *This, VARIANT_BOOL bCCActive);HRESULT ( *get_CurrentCCService)(IMediaPlayerDvd *This, ULONG *pulService);HRESULT ( *put_CurrentCCService)(IMediaPlayerDvd *This, ULONG ulService);HRESULT ( *get_UniqueID)(IMediaPlayerDvd *This, BSTR *pvtUniqueID);HRESULT ( *get_ColorKey)(IMediaPlayerDvd *This, ULONG *pClr);HRESULT ( *put_ColorKey)(IMediaPlayerDvd *This, ULONG Clr);};
struct IRequestStrListVtbl {HRESULT ( *QueryInterface)(IRequestStrList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRequestStrList *This);ULONG ( *Release)(IRequestStrList *This);HRESULT ( *GetTypeInfoCount)(IRequestStrList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRequestStrList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRequestStrList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRequestStrList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IRequestStrList *This, VARIANT Var, VARIANT *pVariantReturn);HRESULT ( *put_Item)(IRequestStrList *This, VARIANT Var, BSTR bstrValue);HRESULT ( *get__NewEnum)(IRequestStrList *This, IUnknown **ppEnumReturn);HRESULT ( *get_Count)(IRequestStrList *This, int *cStrRet);HRESULT ( *get_Key)(IRequestStrList *This, VARIANT VarKey, VARIANT *pvar);HRESULT ( *put_Expires)(IRequestStrList *This, DATE dtExpires);HRESULT ( *put_Domain)(IRequestStrList *This, BSTR bstrDomain);HRESULT ( *put_Path)(IRequestStrList *This, BSTR bstrPath);HRESULT ( *get_HasKeys)(IRequestStrList *This, VARIANT_BOOL *pfHasKeys);};
struct ISoapTypeMapperVtbl {HRESULT ( *QueryInterface)(ISoapTypeMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoapTypeMapper *This);ULONG ( *Release)(ISoapTypeMapper *This);HRESULT ( *GetTypeInfoCount)(ISoapTypeMapper *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISoapTypeMapper *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISoapTypeMapper *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISoapTypeMapper *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *init)(ISoapTypeMapper *This, ISoapTypeMapperFactory *pFactory, IXMLDOMNode *pSchema, enXSDType xsdType);HRESULT ( *read)(ISoapTypeMapper *This, IXMLDOMNode *pNode, BSTR bstrEncoding, enEncodingStyle encodingMode, int lFlags, VARIANT *pvar);HRESULT ( *write)(ISoapTypeMapper *This, ISoapSerializer *pSoapSerializer, BSTR bstrEncoding, enEncodingStyle encodingMode, int lFlags, VARIANT *pvar);HRESULT ( *varType)(ISoapTypeMapper *This, int *pvtType);};
struct IHTMLDocument2Vtbl {HRESULT ( *QueryInterface)(IHTMLDocument2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument2 *This);ULONG ( *Release)(IHTMLDocument2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Script)(IHTMLDocument2 *This, IDispatch **p);HRESULT ( *get_all)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_body)(IHTMLDocument2 *This, IHTMLElement **p);HRESULT ( *get_activeElement)(IHTMLDocument2 *This, IHTMLElement **p);HRESULT ( *get_images)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_applets)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_links)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_forms)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_anchors)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_title)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_title)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_scripts)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_designMode)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_designMode)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_selection)(IHTMLDocument2 *This, IHTMLSelectionObject **p);HRESULT ( *get_readyState)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_frames)(IHTMLDocument2 *This, IHTMLFramesCollection2 **p);HRESULT ( *get_embeds)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_plugins)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_alinkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_alinkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_bgColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_fgColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_fgColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_linkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_linkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_vlinkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_vlinkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *get_referrer)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_location)(IHTMLDocument2 *This, IHTMLLocation **p);HRESULT ( *get_lastModified)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_URL)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_URL)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_domain)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_domain)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_cookie)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_cookie)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_expando)(IHTMLDocument2 *This, VARIANT_BOOL v);HRESULT ( *get_expando)(IHTMLDocument2 *This, VARIANT_BOOL *p);HRESULT ( *put_charset)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_charset)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_defaultCharset)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_defaultCharset)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileSize)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileCreatedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_security)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_protocol)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *write)(IHTMLDocument2 *This, SAFEARRAY *psarray);HRESULT ( *writeln)(IHTMLDocument2 *This, SAFEARRAY *psarray);HRESULT ( *open)(IHTMLDocument2 *This, BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch **pomWindowResult);HRESULT ( *close)(IHTMLDocument2 *This);HRESULT ( *clear)(IHTMLDocument2 *This);HRESULT ( *queryCommandSupported)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLDocument2 *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLDocument2 *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *createElement)(IHTMLDocument2 *This, BSTR eTag, IHTMLElement **newElem);HRESULT ( *put_onhelp)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onclick)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onclick)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_ondblclick)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_ondblclick)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeyup)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeyup)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeydown)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeydown)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeypress)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeypress)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseup)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseup)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmousedown)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmousedown)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmousemove)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmousemove)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseout)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseout)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseover)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseover)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onreadystatechange)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onafterupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onafterupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onrowexit)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onrowexit)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onrowenter)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onrowenter)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_ondragstart)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_ondragstart)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onselectstart)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onselectstart)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *elementFromPoint)(IHTMLDocument2 *This, int x, int y, IHTMLElement **elementHit);HRESULT ( *get_parentWindow)(IHTMLDocument2 *This, IHTMLWindow2 **p);HRESULT ( *get_styleSheets)(IHTMLDocument2 *This, IHTMLStyleSheetsCollection **p);HRESULT ( *put_onbeforeupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onbeforeupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onerrorupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onerrorupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *toString)(IHTMLDocument2 *This, BSTR *String);HRESULT ( *createStyleSheet)(IHTMLDocument2 *This, BSTR bstrHref, int lIndex, IHTMLStyleSheet **ppnewStyleSheet);};
struct IHTMLEventObj2Vtbl {HRESULT ( *QueryInterface)(IHTMLEventObj2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEventObj2 *This);ULONG ( *Release)(IHTMLEventObj2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLEventObj2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEventObj2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEventObj2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEventObj2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *setAttribute)(IHTMLEventObj2 *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLEventObj2 *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLEventObj2 *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);HRESULT ( *put_propertyName)(IHTMLEventObj2 *This, BSTR v);HRESULT ( *get_propertyName)(IHTMLEventObj2 *This, BSTR *p);HRESULT ( *putref_bookmarks)(IHTMLEventObj2 *This, IHTMLBookmarkCollection *v);HRESULT ( *get_bookmarks)(IHTMLEventObj2 *This, IHTMLBookmarkCollection **p);HRESULT ( *putref_recordset)(IHTMLEventObj2 *This, IDispatch *v);HRESULT ( *get_recordset)(IHTMLEventObj2 *This, IDispatch **p);HRESULT ( *put_dataFld)(IHTMLEventObj2 *This, BSTR v);HRESULT ( *get_dataFld)(IHTMLEventObj2 *This, BSTR *p);HRESULT ( *putref_boundElements)(IHTMLEventObj2 *This, IHTMLElementCollection *v);HRESULT ( *get_boundElements)(IHTMLEventObj2 *This, IHTMLElementCollection **p);HRESULT ( *put_repeat)(IHTMLEventObj2 *This, VARIANT_BOOL v);HRESULT ( *get_repeat)(IHTMLEventObj2 *This, VARIANT_BOOL *p);HRESULT ( *put_srcUrn)(IHTMLEventObj2 *This, BSTR v);HRESULT ( *get_srcUrn)(IHTMLEventObj2 *This, BSTR *p);HRESULT ( *putref_srcElement)(IHTMLEventObj2 *This, IHTMLElement *v);HRESULT ( *get_srcElement)(IHTMLEventObj2 *This, IHTMLElement **p);HRESULT ( *put_altKey)(IHTMLEventObj2 *This, VARIANT_BOOL v);HRESULT ( *get_altKey)(IHTMLEventObj2 *This, VARIANT_BOOL *p);HRESULT ( *put_ctrlKey)(IHTMLEventObj2 *This, VARIANT_BOOL v);HRESULT ( *get_ctrlKey)(IHTMLEventObj2 *This, VARIANT_BOOL *p);HRESULT ( *put_shiftKey)(IHTMLEventObj2 *This, VARIANT_BOOL v);HRESULT ( *get_shiftKey)(IHTMLEventObj2 *This, VARIANT_BOOL *p);HRESULT ( *putref_fromElement)(IHTMLEventObj2 *This, IHTMLElement *v);HRESULT ( *get_fromElement)(IHTMLEventObj2 *This, IHTMLElement **p);HRESULT ( *putref_toElement)(IHTMLEventObj2 *This, IHTMLElement *v);HRESULT ( *get_toElement)(IHTMLEventObj2 *This, IHTMLElement **p);HRESULT ( *put_button)(IHTMLEventObj2 *This, int v);HRESULT ( *get_button)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_type)(IHTMLEventObj2 *This, BSTR v);HRESULT ( *get_type)(IHTMLEventObj2 *This, BSTR *p);HRESULT ( *put_qualifier)(IHTMLEventObj2 *This, BSTR v);HRESULT ( *get_qualifier)(IHTMLEventObj2 *This, BSTR *p);HRESULT ( *put_reason)(IHTMLEventObj2 *This, int v);HRESULT ( *get_reason)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_x)(IHTMLEventObj2 *This, int v);HRESULT ( *get_x)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_y)(IHTMLEventObj2 *This, int v);HRESULT ( *get_y)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_clientX)(IHTMLEventObj2 *This, int v);HRESULT ( *get_clientX)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_clientY)(IHTMLEventObj2 *This, int v);HRESULT ( *get_clientY)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_offsetX)(IHTMLEventObj2 *This, int v);HRESULT ( *get_offsetX)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_offsetY)(IHTMLEventObj2 *This, int v);HRESULT ( *get_offsetY)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_screenX)(IHTMLEventObj2 *This, int v);HRESULT ( *get_screenX)(IHTMLEventObj2 *This, int *p);HRESULT ( *put_screenY)(IHTMLEventObj2 *This, int v);HRESULT ( *get_screenY)(IHTMLEventObj2 *This, int *p);HRESULT ( *putref_srcFilter)(IHTMLEventObj2 *This, IDispatch *v);HRESULT ( *get_srcFilter)(IHTMLEventObj2 *This, IDispatch **p);HRESULT ( *get_dataTransfer)(IHTMLEventObj2 *This, IHTMLDataTransfer **p);};
struct IHTMLEventObj3Vtbl {HRESULT ( *QueryInterface)(IHTMLEventObj3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEventObj3 *This);ULONG ( *Release)(IHTMLEventObj3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLEventObj3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEventObj3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEventObj3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEventObj3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_contentOverflow)(IHTMLEventObj3 *This, VARIANT_BOOL *p);HRESULT ( *put_shiftLeft)(IHTMLEventObj3 *This, VARIANT_BOOL v);HRESULT ( *get_shiftLeft)(IHTMLEventObj3 *This, VARIANT_BOOL *p);HRESULT ( *put_altLeft)(IHTMLEventObj3 *This, VARIANT_BOOL v);HRESULT ( *get_altLeft)(IHTMLEventObj3 *This, VARIANT_BOOL *p);HRESULT ( *put_ctrlLeft)(IHTMLEventObj3 *This, VARIANT_BOOL v);HRESULT ( *get_ctrlLeft)(IHTMLEventObj3 *This, VARIANT_BOOL *p);HRESULT ( *get_imeCompositionChange)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_imeNotifyCommand)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_imeNotifyData)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_imeRequest)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_imeRequestData)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_keyboardLayout)(IHTMLEventObj3 *This, LONG_PTR *p);HRESULT ( *get_behaviorCookie)(IHTMLEventObj3 *This, int *p);HRESULT ( *get_behaviorPart)(IHTMLEventObj3 *This, int *p);HRESULT ( *get_nextPage)(IHTMLEventObj3 *This, BSTR *p);};
struct IHTMLRuleStyleVtbl {HRESULT ( *QueryInterface)(IHTMLRuleStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRuleStyle *This);ULONG ( *Release)(IHTMLRuleStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLRuleStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRuleStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRuleStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRuleStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontFamily)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontFamily)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontVariant)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontVariant)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontWeight)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontWeight)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontSize)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_fontSize)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_font)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_font)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_color)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_color)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_background)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_background)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_backgroundImage)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundImage)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundRepeat)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundRepeat)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundAttachment)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundAttachment)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundPosition)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundPosition)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundPositionX)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionX)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_backgroundPositionY)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionY)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_wordSpacing)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_wordSpacing)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_letterSpacing)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_letterSpacing)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_textDecoration)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textDecoration)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textDecorationNone)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationNone)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationUnderline)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationUnderline)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationOverline)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationOverline)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationLineThrough)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationLineThrough)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationBlink)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationBlink)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_verticalAlign)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_verticalAlign)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_textTransform)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textTransform)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textAlign)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textAlign)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textIndent)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_textIndent)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_lineHeight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_lineHeight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginTop)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginTop)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginRight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginRight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginBottom)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginBottom)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginLeft)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginLeft)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_margin)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_margin)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_paddingTop)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingTop)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingRight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingRight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingBottom)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingBottom)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingLeft)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingLeft)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_padding)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_padding)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_border)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_border)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTop)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderTop)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderRight)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderRight)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderBottom)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderBottom)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderLeft)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderLeft)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderColor)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderTopColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderRightColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderRightColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderBottomColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderBottomColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderLeftColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderLeftColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderWidth)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderWidth)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderTopWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderRightWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderRightWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderBottomWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderBottomWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderLeftWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderLeftWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderTopStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderRightStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderRightStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderBottomStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderBottomStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderLeftStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderLeftStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_width)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_width)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_height)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_height)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_styleFloat)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_styleFloat)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_clear)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_clear)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_display)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_display)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_visibility)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_visibility)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyleType)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyleType)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStylePosition)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStylePosition)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyleImage)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyleImage)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_whiteSpace)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_whiteSpace)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_top)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_top)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_left)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_left)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *get_position)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_zIndex)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_zIndex)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_overflow)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_overflow)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_pageBreakBefore)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_pageBreakBefore)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_pageBreakAfter)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_pageBreakAfter)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_cssText)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_cursor)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_cursor)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_clip)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_clip)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_filter)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_filter)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *setAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);};
struct IHTMLElement3Vtbl {HRESULT ( *QueryInterface)(IHTMLElement3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElement3 *This);ULONG ( *Release)(IHTMLElement3 *This);HRESULT ( *GetTypeInfoCount)(IHTMLElement3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElement3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElement3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElement3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *mergeAttributes)(IHTMLElement3 *This, IHTMLElement *mergeThis, VARIANT *pvarFlags);HRESULT ( *get_isMultiLine)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *get_canHaveHTML)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_onlayoutcomplete)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onlayoutcomplete)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onpage)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onpage)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_inflateBlock)(IHTMLElement3 *This, VARIANT_BOOL v);HRESULT ( *get_inflateBlock)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_onbeforedeactivate)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onbeforedeactivate)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *setActive)(IHTMLElement3 *This);HRESULT ( *put_contentEditable)(IHTMLElement3 *This, BSTR v);HRESULT ( *get_contentEditable)(IHTMLElement3 *This, BSTR *p);HRESULT ( *get_isContentEditable)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_hideFocus)(IHTMLElement3 *This, VARIANT_BOOL v);HRESULT ( *get_hideFocus)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_disabled)(IHTMLElement3 *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *get_isDisabled)(IHTMLElement3 *This, VARIANT_BOOL *p);HRESULT ( *put_onmove)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onmove)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_oncontrolselect)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_oncontrolselect)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *fireEvent)(IHTMLElement3 *This, BSTR bstrEventName, VARIANT *pvarEventObject, VARIANT_BOOL *pfCancelled);HRESULT ( *put_onresizestart)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onresizestart)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onresizeend)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onresizeend)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onmovestart)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onmovestart)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onmoveend)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onmoveend)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onmouseenter)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onmouseenter)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onmouseleave)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onmouseleave)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_onactivate)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_onactivate)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *put_ondeactivate)(IHTMLElement3 *This, VARIANT v);HRESULT ( *get_ondeactivate)(IHTMLElement3 *This, VARIANT *p);HRESULT ( *dragDrop)(IHTMLElement3 *This, VARIANT_BOOL *pfRet);HRESULT ( *get_glyphMode)(IHTMLElement3 *This, LONG *p);};
struct IMediaControlVtbl {HRESULT ( *QueryInterface)(IMediaControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaControl *This);ULONG ( *Release)(IMediaControl *This);HRESULT ( *GetTypeInfoCount)(IMediaControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Run)(IMediaControl *This);HRESULT ( *Pause)(IMediaControl *This);HRESULT ( *Stop)(IMediaControl *This);HRESULT ( *GetState)(IMediaControl *This, LONG msTimeout, OAFilterState *pfs);HRESULT ( *RenderFile)(IMediaControl *This, BSTR strFilename);HRESULT ( *AddSourceFilter)(IMediaControl *This, BSTR strFilename, IDispatch **ppUnk);HRESULT ( *get_FilterCollection)(IMediaControl *This, IDispatch **ppUnk);HRESULT ( *get_RegFilterCollection)(IMediaControl *This, IDispatch **ppUnk);HRESULT ( *StopWhenReady)(IMediaControl *This);};
struct IMessengerAppVtbl {HRESULT ( *QueryInterface)(IMessengerApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessengerApp *This);ULONG ( *Release)(IMessengerApp *This);HRESULT ( *GetTypeInfoCount)(IMessengerApp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMessengerApp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMessengerApp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMessengerApp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IMessengerApp *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IMessengerApp *This, IDispatch **ppDisp);HRESULT ( *Quit)(IMessengerApp *This);HRESULT ( *get_Name)(IMessengerApp *This, BSTR *pbstrName);HRESULT ( *get_FullName)(IMessengerApp *This, BSTR *pbstrFullName);HRESULT ( *get_Path)(IMessengerApp *This, BSTR *pbstrPath);HRESULT ( *LaunchLogonUI)(IMessengerApp *This);HRESULT ( *LaunchOptionsUI)(IMessengerApp *This, MOPTDLGPAGE mOptDlgPage);HRESULT ( *LaunchAddContactUI)(IMessengerApp *This, BSTR bstrEMail);HRESULT ( *LaunchFindContactUI)(IMessengerApp *This, BSTR bstrFirstName, BSTR bstrLastName, VARIANT vbstrCity, VARIANT vbstrState, VARIANT vbstrCountry);HRESULT ( *LaunchIMUI)(IMessengerApp *This, VARIANT vUser, IMessengerIMWindow **ppIMWindow);HRESULT ( *get_IMWindows)(IMessengerApp *This, IMessengerIMWindows **ppIMWindows);HRESULT ( *get_ToolBar)(IMessengerApp *This, VARIANT_BOOL *pBoolToolBar);HRESULT ( *put_ToolBar)(IMessengerApp *This, VARIANT_BOOL BoolToolBar);HRESULT ( *get_StatusBar)(IMessengerApp *This, VARIANT_BOOL *pBoolStatusBar);HRESULT ( *put_StatusBar)(IMessengerApp *This, VARIANT_BOOL BoolStatusBar);HRESULT ( *get_StatusText)(IMessengerApp *This, BSTR *pbstrStatusText);HRESULT ( *put_StatusText)(IMessengerApp *This, BSTR bstrStatusText);HRESULT ( *get_HWND)(IMessengerApp *This, int *phWnd);HRESULT ( *get_Left)(IMessengerApp *This, int *plLeft);HRESULT ( *put_Left)(IMessengerApp *This, int lLeft);HRESULT ( *get_Top)(IMessengerApp *This, int *plTop);HRESULT ( *put_Top)(IMessengerApp *This, int lTop);HRESULT ( *get_Width)(IMessengerApp *This, int *plWidth);HRESULT ( *put_Width)(IMessengerApp *This, int lWidth);HRESULT ( *get_Height)(IMessengerApp *This, int *plHeight);HRESULT ( *put_Height)(IMessengerApp *This, int lHeight);HRESULT ( *get_Visible)(IMessengerApp *This, VARIANT_BOOL *pBoolVisible);HRESULT ( *put_Visible)(IMessengerApp *This, VARIANT_BOOL BoolVisible);HRESULT ( *AutoLogon)(IMessengerApp *This);};
struct IHTMLElementVtbl {HRESULT ( *QueryInterface)(IHTMLElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElement *This);ULONG ( *Release)(IHTMLElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *setAttribute)(IHTMLElement *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLElement *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLElement *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);HRESULT ( *put_className)(IHTMLElement *This, BSTR v);HRESULT ( *get_className)(IHTMLElement *This, BSTR *p);HRESULT ( *put_id)(IHTMLElement *This, BSTR v);HRESULT ( *get_id)(IHTMLElement *This, BSTR *p);HRESULT ( *get_tagName)(IHTMLElement *This, BSTR *p);HRESULT ( *get_parentElement)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *get_style)(IHTMLElement *This, IHTMLStyle **p);HRESULT ( *put_onhelp)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onclick)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onclick)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondblclick)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondblclick)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeydown)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeydown)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeyup)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeyup)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeypress)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeypress)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseout)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseout)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseover)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseover)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmousemove)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmousemove)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmousedown)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmousedown)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseup)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseup)(IHTMLElement *This, VARIANT *p);HRESULT ( *get_document)(IHTMLElement *This, IDispatch **p);HRESULT ( *put_title)(IHTMLElement *This, BSTR v);HRESULT ( *get_title)(IHTMLElement *This, BSTR *p);HRESULT ( *put_language)(IHTMLElement *This, BSTR v);HRESULT ( *get_language)(IHTMLElement *This, BSTR *p);HRESULT ( *put_onselectstart)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onselectstart)(IHTMLElement *This, VARIANT *p);HRESULT ( *scrollIntoView)(IHTMLElement *This, VARIANT varargStart);HRESULT ( *contains)(IHTMLElement *This, IHTMLElement *pChild, VARIANT_BOOL *pfResult);HRESULT ( *get_sourceIndex)(IHTMLElement *This, int *p);HRESULT ( *get_recordNumber)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_lang)(IHTMLElement *This, BSTR v);HRESULT ( *get_lang)(IHTMLElement *This, BSTR *p);HRESULT ( *get_offsetLeft)(IHTMLElement *This, int *p);HRESULT ( *get_offsetTop)(IHTMLElement *This, int *p);HRESULT ( *get_offsetWidth)(IHTMLElement *This, int *p);HRESULT ( *get_offsetHeight)(IHTMLElement *This, int *p);HRESULT ( *get_offsetParent)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *put_innerHTML)(IHTMLElement *This, BSTR v);HRESULT ( *get_innerHTML)(IHTMLElement *This, BSTR *p);HRESULT ( *put_innerText)(IHTMLElement *This, BSTR v);HRESULT ( *get_innerText)(IHTMLElement *This, BSTR *p);HRESULT ( *put_outerHTML)(IHTMLElement *This, BSTR v);HRESULT ( *get_outerHTML)(IHTMLElement *This, BSTR *p);HRESULT ( *put_outerText)(IHTMLElement *This, BSTR v);HRESULT ( *get_outerText)(IHTMLElement *This, BSTR *p);HRESULT ( *insertAdjacentHTML)(IHTMLElement *This, BSTR where, BSTR html);HRESULT ( *insertAdjacentText)(IHTMLElement *This, BSTR where, BSTR text);HRESULT ( *get_parentTextEdit)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *get_isTextEdit)(IHTMLElement *This, VARIANT_BOOL *p);HRESULT ( *click)(IHTMLElement *This);HRESULT ( *get_filters)(IHTMLElement *This, IHTMLFiltersCollection **p);HRESULT ( *put_ondragstart)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondragstart)(IHTMLElement *This, VARIANT *p);HRESULT ( *toString)(IHTMLElement *This, BSTR *String);HRESULT ( *put_onbeforeupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onbeforeupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onafterupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onafterupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onerrorupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onerrorupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onrowexit)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onrowexit)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onrowenter)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onrowenter)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondatasetchanged)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondatasetchanged)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondataavailable)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondataavailable)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondatasetcomplete)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondatasetcomplete)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onfilterchange)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onfilterchange)(IHTMLElement *This, VARIANT *p);HRESULT ( *get_children)(IHTMLElement *This, IDispatch **p);HRESULT ( *get_all)(IHTMLElement *This, IDispatch **p);};
struct IUPnPDeviceVtbl {HRESULT ( *QueryInterface)(IUPnPDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUPnPDevice *This);ULONG ( *Release)(IUPnPDevice *This);HRESULT ( *GetTypeInfoCount)(IUPnPDevice *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IUPnPDevice *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IUPnPDevice *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IUPnPDevice *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_IsRootDevice)(IUPnPDevice *This, VARIANT_BOOL *pvarb);HRESULT ( *get_RootDevice)(IUPnPDevice *This, IUPnPDevice **ppudRootDevice);HRESULT ( *get_ParentDevice)(IUPnPDevice *This, IUPnPDevice **ppudDeviceParent);HRESULT ( *get_HasChildren)(IUPnPDevice *This, VARIANT_BOOL *pvarb);HRESULT ( *get_Children)(IUPnPDevice *This, IUPnPDevices **ppudChildren);HRESULT ( *get_UniqueDeviceName)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_FriendlyName)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_Type)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_PresentationURL)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_ManufacturerName)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_ManufacturerURL)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_ModelName)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_ModelNumber)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_Description)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_ModelURL)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_UPC)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *get_SerialNumber)(IUPnPDevice *This, BSTR *pbstr);HRESULT ( *IconURL)(IUPnPDevice *This, BSTR bstrEncodingFormat, LONG lSizeX, LONG lSizeY, LONG lBitDepth, BSTR *pbstrIconURL);HRESULT ( *get_Services)(IUPnPDevice *This, IUPnPServices **ppusServices);};
struct IHTMLStyleVtbl {HRESULT ( *QueryInterface)(IHTMLStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyle *This);ULONG ( *Release)(IHTMLStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontFamily)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontFamily)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontVariant)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontVariant)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontWeight)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontWeight)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontSize)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_fontSize)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_font)(IHTMLStyle *This, BSTR v);HRESULT ( *get_font)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_color)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_color)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_background)(IHTMLStyle *This, BSTR v);HRESULT ( *get_background)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_backgroundImage)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundImage)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundRepeat)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundRepeat)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundAttachment)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundAttachment)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundPosition)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundPosition)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundPositionX)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionX)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_backgroundPositionY)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionY)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_wordSpacing)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_wordSpacing)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_letterSpacing)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_letterSpacing)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_textDecoration)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textDecoration)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textDecorationNone)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationNone)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationUnderline)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationUnderline)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationOverline)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationOverline)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationLineThrough)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationLineThrough)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationBlink)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationBlink)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_verticalAlign)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_verticalAlign)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_textTransform)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textTransform)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textAlign)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textAlign)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textIndent)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_textIndent)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_lineHeight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_lineHeight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginTop)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginTop)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginRight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginRight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginBottom)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginBottom)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginLeft)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginLeft)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_margin)(IHTMLStyle *This, BSTR v);HRESULT ( *get_margin)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_paddingTop)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingTop)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingRight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingRight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingBottom)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingBottom)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingLeft)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingLeft)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_padding)(IHTMLStyle *This, BSTR v);HRESULT ( *get_padding)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_border)(IHTMLStyle *This, BSTR v);HRESULT ( *get_border)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTop)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderTop)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderRight)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderRight)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderBottom)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderBottom)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderLeft)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderLeft)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderColor)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderTopColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderRightColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderRightColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderBottomColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderBottomColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderLeftColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderLeftColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderWidth)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderWidth)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderTopWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderRightWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderRightWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderBottomWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderBottomWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderLeftWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderLeftWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderTopStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderRightStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderRightStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderBottomStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderBottomStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderLeftStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderLeftStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_width)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_width)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_height)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_height)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_styleFloat)(IHTMLStyle *This, BSTR v);HRESULT ( *get_styleFloat)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_clear)(IHTMLStyle *This, BSTR v);HRESULT ( *get_clear)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_display)(IHTMLStyle *This, BSTR v);HRESULT ( *get_display)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_visibility)(IHTMLStyle *This, BSTR v);HRESULT ( *get_visibility)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyleType)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyleType)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStylePosition)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStylePosition)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyleImage)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyleImage)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_whiteSpace)(IHTMLStyle *This, BSTR v);HRESULT ( *get_whiteSpace)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_top)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_top)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_left)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_left)(IHTMLStyle *This, VARIANT *p);HRESULT ( *get_position)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_zIndex)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_zIndex)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_overflow)(IHTMLStyle *This, BSTR v);HRESULT ( *get_overflow)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pageBreakBefore)(IHTMLStyle *This, BSTR v);HRESULT ( *get_pageBreakBefore)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pageBreakAfter)(IHTMLStyle *This, BSTR v);HRESULT ( *get_pageBreakAfter)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLStyle *This, BSTR v);HRESULT ( *get_cssText)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pixelTop)(IHTMLStyle *This, int v);HRESULT ( *get_pixelTop)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelLeft)(IHTMLStyle *This, int v);HRESULT ( *get_pixelLeft)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelWidth)(IHTMLStyle *This, int v);HRESULT ( *get_pixelWidth)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelHeight)(IHTMLStyle *This, int v);HRESULT ( *get_pixelHeight)(IHTMLStyle *This, int *p);HRESULT ( *put_posTop)(IHTMLStyle *This, float v);HRESULT ( *get_posTop)(IHTMLStyle *This, float *p);HRESULT ( *put_posLeft)(IHTMLStyle *This, float v);HRESULT ( *get_posLeft)(IHTMLStyle *This, float *p);HRESULT ( *put_posWidth)(IHTMLStyle *This, float v);HRESULT ( *get_posWidth)(IHTMLStyle *This, float *p);HRESULT ( *put_posHeight)(IHTMLStyle *This, float v);HRESULT ( *get_posHeight)(IHTMLStyle *This, float *p);HRESULT ( *put_cursor)(IHTMLStyle *This, BSTR v);HRESULT ( *get_cursor)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_clip)(IHTMLStyle *This, BSTR v);HRESULT ( *get_clip)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_filter)(IHTMLStyle *This, BSTR v);HRESULT ( *get_filter)(IHTMLStyle *This, BSTR *p);HRESULT ( *setAttribute)(IHTMLStyle *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);HRESULT ( *toString)(IHTMLStyle *This, BSTR *String);};
struct IOleObjectVtbl {HRESULT ( *QueryInterface)(IOleObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleObject *This);ULONG ( *Release)(IOleObject *This);HRESULT ( *SetClientSite)(IOleObject *This, IOleClientSite *pClientSite);HRESULT ( *GetClientSite)(IOleObject *This, IOleClientSite **ppClientSite);HRESULT ( *SetHostNames)(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);HRESULT ( *Close)(IOleObject *This, DWORD dwSaveOption);HRESULT ( *SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);HRESULT ( *GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *InitFromData)(IOleObject *This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);HRESULT ( *GetClipboardData)(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);HRESULT ( *DoVerb)(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);HRESULT ( *EnumVerbs)(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);HRESULT ( *Update)(IOleObject *This);HRESULT ( *IsUpToDate)(IOleObject *This);HRESULT ( *GetUserClassID)(IOleObject *This, CLSID *pClsid);HRESULT ( *GetUserType)(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);HRESULT ( *SetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *GetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *Advise)(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleObject *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleObject *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);HRESULT ( *SetColorScheme)(IOleObject *This, LOGPALETTE *pLogpal);};
struct IMimeEditVtbl {HRESULT ( *QueryInterface)(IMimeEdit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeEdit *This);ULONG ( *Release)(IMimeEdit *This);HRESULT ( *GetTypeInfoCount)(IMimeEdit *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMimeEdit *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMimeEdit *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMimeEdit *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IMimeEdit *This, BSTR bstr);HRESULT ( *get_src)(IMimeEdit *This, BSTR *pbstr);HRESULT ( *put_header)(IMimeEdit *This, LONG lStyle);HRESULT ( *get_header)(IMimeEdit *This, LONG *plStyle);HRESULT ( *put_editMode)(IMimeEdit *This, VARIANT_BOOL b);HRESULT ( *get_editMode)(IMimeEdit *This, VARIANT_BOOL *pbool);HRESULT ( *get_messageSource)(IMimeEdit *This, BSTR *pbstr);HRESULT ( *get_text)(IMimeEdit *This, BSTR *pbstr);HRESULT ( *get_html)(IMimeEdit *This, BSTR *pbstr);HRESULT ( *clear)(IMimeEdit *This);HRESULT ( *get_doc)(IMimeEdit *This, IDispatch **ppDoc);};
struct IResponseVtbl {HRESULT ( *QueryInterface)(IResponse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResponse *This);ULONG ( *Release)(IResponse *This);HRESULT ( *GetTypeInfoCount)(IResponse *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IResponse *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IResponse *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IResponse *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Buffer)(IResponse *This, VARIANT_BOOL *pVal);HRESULT ( *put_Buffer)(IResponse *This, VARIANT_BOOL newVal);HRESULT ( *Write)(IResponse *This, VARIANT varData);HRESULT ( *get_Expires)(IResponse *This, VARIANT *pvarExpiresMinutesRet);HRESULT ( *put_Expires)(IResponse *This, int lExpiresMinutes);HRESULT ( *get_ExpiresAbsolute)(IResponse *This, VARIANT *pvarExpiresRet);HRESULT ( *put_ExpiresAbsolute)(IResponse *This, DATE dtExpires);HRESULT ( *get_Cookies)(IResponse *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Status)(IResponse *This, BSTR *pVal);HRESULT ( *put_Status)(IResponse *This, BSTR newVal);HRESULT ( *get_ContentType)(IResponse *This, BSTR *pVal);HRESULT ( *put_ContentType)(IResponse *This, BSTR newVal);HRESULT ( *get_Charset)(IResponse *This, BSTR *pVal);HRESULT ( *put_Charset)(IResponse *This, BSTR newVal);HRESULT ( *AddHeader)(IResponse *This, BSTR pszName, BSTR pszValue);HRESULT ( *AppendToLog)(IResponse *This, BSTR pszLogData);HRESULT ( *Clear)(IResponse *This);HRESULT ( *End)(IResponse *This);HRESULT ( *Flush)(IResponse *This);HRESULT ( *Redirect)(IResponse *This, BSTR pszURL);HRESULT ( *BinaryWrite)(IResponse *This, VARIANT varData);};
struct INSOPlayVtbl {HRESULT ( *QueryInterface)(INSOPlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INSOPlay *This);ULONG ( *Release)(INSOPlay *This);HRESULT ( *GetTypeInfoCount)(INSOPlay *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(INSOPlay *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(INSOPlay *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(INSOPlay *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ImageSourceWidth)(INSOPlay *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(INSOPlay *This, int *pHeight);HRESULT ( *get_Duration)(INSOPlay *This, double *pDuration);HRESULT ( *get_Author)(INSOPlay *This, BSTR *pbstrAuthor);HRESULT ( *get_Copyright)(INSOPlay *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(INSOPlay *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(INSOPlay *This, BSTR *pbstrRating);HRESULT ( *get_Title)(INSOPlay *This, BSTR *pbstrTitle);HRESULT ( *get_SourceLink)(INSOPlay *This, BSTR *pbstrSourceLink);HRESULT ( *get_MarkerCount)(INSOPlay *This, int *pMarkerCount);HRESULT ( *get_CanScan)(INSOPlay *This, VARIANT_BOOL *pCanScan);HRESULT ( *get_CanSeek)(INSOPlay *This, VARIANT_BOOL *pCanSeek);HRESULT ( *get_CanSeekToMarkers)(INSOPlay *This, VARIANT_BOOL *pCanSeekToMarkers);HRESULT ( *get_CreationDate)(INSOPlay *This, DATE *pCreationDate);HRESULT ( *get_Bandwidth)(INSOPlay *This, int *pBandwidth);HRESULT ( *get_ErrorCorrection)(INSOPlay *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_AutoStart)(INSOPlay *This, VARIANT_BOOL *pAutoStart);HRESULT ( *put_AutoStart)(INSOPlay *This, VARIANT_BOOL AutoStart);HRESULT ( *get_AutoRewind)(INSOPlay *This, VARIANT_BOOL *pAutoRewind);HRESULT ( *put_AutoRewind)(INSOPlay *This, VARIANT_BOOL AutoRewind);HRESULT ( *get_InvokeURLs)(INSOPlay *This, VARIANT_BOOL *pInvokeURLs);HRESULT ( *put_InvokeURLs)(INSOPlay *This, VARIANT_BOOL InvokeURLs);HRESULT ( *get_EnableContextMenu)(INSOPlay *This, VARIANT_BOOL *pEnableContextMenu);HRESULT ( *put_EnableContextMenu)(INSOPlay *This, VARIANT_BOOL EnableContextMenu);HRESULT ( *get_TransparentAtStart)(INSOPlay *This, VARIANT_BOOL *pTransparentAtStart);HRESULT ( *put_TransparentAtStart)(INSOPlay *This, VARIANT_BOOL TransparentAtStart);HRESULT ( *get_ClickToPlay)(INSOPlay *This, VARIANT_BOOL *pClickToPlay);HRESULT ( *put_ClickToPlay)(INSOPlay *This, VARIANT_BOOL ClickToPlay);HRESULT ( *get_FileName)(INSOPlay *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(INSOPlay *This, BSTR bstrFileName);HRESULT ( *get_CurrentPosition)(INSOPlay *This, double *pCurrentPosition);HRESULT ( *put_CurrentPosition)(INSOPlay *This, double CurrentPosition);HRESULT ( *get_Rate)(INSOPlay *This, double *pRate);HRESULT ( *put_Rate)(INSOPlay *This, double Rate);HRESULT ( *get_CurrentMarker)(INSOPlay *This, int *pCurrentMarker);HRESULT ( *put_CurrentMarker)(INSOPlay *This, int CurrentMarker);HRESULT ( *get_PlayCount)(INSOPlay *This, int *pPlayCount);HRESULT ( *put_PlayCount)(INSOPlay *This, int PlayCount);HRESULT ( *get_CurrentState)(INSOPlay *This, int *pCurrentState);HRESULT ( *get_DisplaySize)(INSOPlay *This, int *pDisplaySize);HRESULT ( *put_DisplaySize)(INSOPlay *This, int DisplaySize);HRESULT ( *get_MainWindow)(INSOPlay *This, int *pMainWindow);HRESULT ( *get_AllowScan)(INSOPlay *This, VARIANT_BOOL *pAllowScan);HRESULT ( *put_AllowScan)(INSOPlay *This, VARIANT_BOOL AllowScan);HRESULT ( *get_SendKeyboardEvents)(INSOPlay *This, VARIANT_BOOL *pSendKeyboardEvents);HRESULT ( *put_SendKeyboardEvents)(INSOPlay *This, VARIANT_BOOL SendKeyboardEvents);HRESULT ( *get_SendMouseClickEvents)(INSOPlay *This, VARIANT_BOOL *pSendMouseClickEvents);HRESULT ( *put_SendMouseClickEvents)(INSOPlay *This, VARIANT_BOOL SendMouseClickEvents);HRESULT ( *get_SendMouseMoveEvents)(INSOPlay *This, VARIANT_BOOL *pSendMouseMoveEvents);HRESULT ( *put_SendMouseMoveEvents)(INSOPlay *This, VARIANT_BOOL SendMouseMoveEvents);HRESULT ( *get_SendStateChangeEvents)(INSOPlay *This, VARIANT_BOOL *pSendStateChangeEvents);HRESULT ( *put_SendStateChangeEvents)(INSOPlay *This, VARIANT_BOOL SendStateChangeEvents);HRESULT ( *get_ReceivedPackets)(INSOPlay *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(INSOPlay *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(INSOPlay *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(INSOPlay *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(INSOPlay *This, int *pBufferingCount);HRESULT ( *get_CursorType)(INSOPlay *This, int *pCursorType);HRESULT ( *put_CursorType)(INSOPlay *This, int CursorType);HRESULT ( *get_AnimationAtStart)(INSOPlay *This, VARIANT_BOOL *pAnimationAtStart);HRESULT ( *put_AnimationAtStart)(INSOPlay *This, VARIANT_BOOL AnimationAtStart);HRESULT ( *get_AnimationOnStop)(INSOPlay *This, VARIANT_BOOL *pAnimationOnStop);HRESULT ( *put_AnimationOnStop)(INSOPlay *This, VARIANT_BOOL AnimationOnStop);HRESULT ( *Play)(INSOPlay *This);HRESULT ( *Pause)(INSOPlay *This);HRESULT ( *Stop)(INSOPlay *This);HRESULT ( *GetMarkerTime)(INSOPlay *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(INSOPlay *This, int MarkerNum, BSTR *pbstrMarkerName);};
struct INSPlay1Vtbl {HRESULT ( *QueryInterface)(INSPlay1 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INSPlay1 *This);ULONG ( *Release)(INSPlay1 *This);HRESULT ( *GetTypeInfoCount)(INSPlay1 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(INSPlay1 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(INSPlay1 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(INSPlay1 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ImageSourceWidth)(INSPlay1 *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(INSPlay1 *This, int *pHeight);HRESULT ( *get_Duration)(INSPlay1 *This, double *pDuration);HRESULT ( *get_Author)(INSPlay1 *This, BSTR *pbstrAuthor);HRESULT ( *get_Copyright)(INSPlay1 *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(INSPlay1 *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(INSPlay1 *This, BSTR *pbstrRating);HRESULT ( *get_Title)(INSPlay1 *This, BSTR *pbstrTitle);HRESULT ( *get_SourceLink)(INSPlay1 *This, BSTR *pbstrSourceLink);HRESULT ( *get_MarkerCount)(INSPlay1 *This, int *pMarkerCount);HRESULT ( *get_CanScan)(INSPlay1 *This, VARIANT_BOOL *pCanScan);HRESULT ( *get_CanSeek)(INSPlay1 *This, VARIANT_BOOL *pCanSeek);HRESULT ( *get_CanSeekToMarkers)(INSPlay1 *This, VARIANT_BOOL *pCanSeekToMarkers);HRESULT ( *get_CreationDate)(INSPlay1 *This, DATE *pCreationDate);HRESULT ( *get_Bandwidth)(INSPlay1 *This, int *pBandwidth);HRESULT ( *get_ErrorCorrection)(INSPlay1 *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_AutoStart)(INSPlay1 *This, VARIANT_BOOL *pAutoStart);HRESULT ( *put_AutoStart)(INSPlay1 *This, VARIANT_BOOL AutoStart);HRESULT ( *get_AutoRewind)(INSPlay1 *This, VARIANT_BOOL *pAutoRewind);HRESULT ( *put_AutoRewind)(INSPlay1 *This, VARIANT_BOOL AutoRewind);HRESULT ( *get_InvokeURLs)(INSPlay1 *This, VARIANT_BOOL *pInvokeURLs);HRESULT ( *put_InvokeURLs)(INSPlay1 *This, VARIANT_BOOL InvokeURLs);HRESULT ( *get_EnableContextMenu)(INSPlay1 *This, VARIANT_BOOL *pEnableContextMenu);HRESULT ( *put_EnableContextMenu)(INSPlay1 *This, VARIANT_BOOL EnableContextMenu);HRESULT ( *get_TransparentAtStart)(INSPlay1 *This, VARIANT_BOOL *pTransparentAtStart);HRESULT ( *put_TransparentAtStart)(INSPlay1 *This, VARIANT_BOOL TransparentAtStart);HRESULT ( *get_ClickToPlay)(INSPlay1 *This, VARIANT_BOOL *pClickToPlay);HRESULT ( *put_ClickToPlay)(INSPlay1 *This, VARIANT_BOOL ClickToPlay);HRESULT ( *get_FileName)(INSPlay1 *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(INSPlay1 *This, BSTR bstrFileName);HRESULT ( *get_CurrentPosition)(INSPlay1 *This, double *pCurrentPosition);HRESULT ( *put_CurrentPosition)(INSPlay1 *This, double CurrentPosition);HRESULT ( *get_Rate)(INSPlay1 *This, double *pRate);HRESULT ( *put_Rate)(INSPlay1 *This, double Rate);HRESULT ( *get_CurrentMarker)(INSPlay1 *This, int *pCurrentMarker);HRESULT ( *put_CurrentMarker)(INSPlay1 *This, int CurrentMarker);HRESULT ( *get_PlayCount)(INSPlay1 *This, int *pPlayCount);HRESULT ( *put_PlayCount)(INSPlay1 *This, int PlayCount);HRESULT ( *get_CurrentState)(INSPlay1 *This, int *pCurrentState);HRESULT ( *get_DisplaySize)(INSPlay1 *This, int *pDisplaySize);HRESULT ( *put_DisplaySize)(INSPlay1 *This, int DisplaySize);HRESULT ( *get_MainWindow)(INSPlay1 *This, int *pMainWindow);HRESULT ( *get_AllowScan)(INSPlay1 *This, VARIANT_BOOL *pAllowScan);HRESULT ( *put_AllowScan)(INSPlay1 *This, VARIANT_BOOL AllowScan);HRESULT ( *get_SendKeyboardEvents)(INSPlay1 *This, VARIANT_BOOL *pSendKeyboardEvents);HRESULT ( *put_SendKeyboardEvents)(INSPlay1 *This, VARIANT_BOOL SendKeyboardEvents);HRESULT ( *get_SendMouseClickEvents)(INSPlay1 *This, VARIANT_BOOL *pSendMouseClickEvents);HRESULT ( *put_SendMouseClickEvents)(INSPlay1 *This, VARIANT_BOOL SendMouseClickEvents);HRESULT ( *get_SendMouseMoveEvents)(INSPlay1 *This, VARIANT_BOOL *pSendMouseMoveEvents);HRESULT ( *put_SendMouseMoveEvents)(INSPlay1 *This, VARIANT_BOOL SendMouseMoveEvents);HRESULT ( *get_SendStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL *pSendStateChangeEvents);HRESULT ( *put_SendStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL SendStateChangeEvents);HRESULT ( *get_ReceivedPackets)(INSPlay1 *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(INSPlay1 *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(INSPlay1 *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(INSPlay1 *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(INSPlay1 *This, int *pBufferingCount);HRESULT ( *get_CursorType)(INSPlay1 *This, int *pCursorType);HRESULT ( *put_CursorType)(INSPlay1 *This, int CursorType);HRESULT ( *get_AnimationAtStart)(INSPlay1 *This, VARIANT_BOOL *pAnimationAtStart);HRESULT ( *put_AnimationAtStart)(INSPlay1 *This, VARIANT_BOOL AnimationAtStart);HRESULT ( *get_AnimationOnStop)(INSPlay1 *This, VARIANT_BOOL *pAnimationOnStop);HRESULT ( *put_AnimationOnStop)(INSPlay1 *This, VARIANT_BOOL AnimationOnStop);HRESULT ( *Play)(INSPlay1 *This);HRESULT ( *Pause)(INSPlay1 *This);HRESULT ( *Stop)(INSPlay1 *This);HRESULT ( *GetMarkerTime)(INSPlay1 *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(INSPlay1 *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *get_ChannelName)(INSPlay1 *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(INSPlay1 *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(INSPlay1 *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(INSPlay1 *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(INSPlay1 *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(INSPlay1 *This, BSTR *pbstrContactEmail);HRESULT ( *get_AllowChangeDisplaySize)(INSPlay1 *This, VARIANT_BOOL *pAllowChangeDisplaySize);HRESULT ( *put_AllowChangeDisplaySize)(INSPlay1 *This, VARIANT_BOOL AllowChangeDisplaySize);HRESULT ( *get_CodecCount)(INSPlay1 *This, int *pCodecCount);HRESULT ( *get_IsBroadcast)(INSPlay1 *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_IsDurationValid)(INSPlay1 *This, VARIANT_BOOL *pIsDurationValid);HRESULT ( *get_SourceProtocol)(INSPlay1 *This, int *pSourceProtocol);HRESULT ( *get_OpenState)(INSPlay1 *This, int *pOpenState);HRESULT ( *get_SendOpenStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL *pSendOpenStateChangeEvents);HRESULT ( *put_SendOpenStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL SendOpenStateChangeEvents);HRESULT ( *get_SendWarningEvents)(INSPlay1 *This, VARIANT_BOOL *pSendWarningEvents);HRESULT ( *put_SendWarningEvents)(INSPlay1 *This, VARIANT_BOOL SendWarningEvents);HRESULT ( *get_SendErrorEvents)(INSPlay1 *This, VARIANT_BOOL *pSendErrorEvents);HRESULT ( *put_SendErrorEvents)(INSPlay1 *This, VARIANT_BOOL SendErrorEvents);HRESULT ( *get_HasError)(INSPlay1 *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(INSPlay1 *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(INSPlay1 *This, int *pErrorCode);HRESULT ( *get_PlayState)(INSPlay1 *This, int *pPlayState);HRESULT ( *get_SendPlayStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL *pSendPlayStateChangeEvents);HRESULT ( *put_SendPlayStateChangeEvents)(INSPlay1 *This, VARIANT_BOOL SendPlayStateChangeEvents);HRESULT ( *get_BufferingTime)(INSPlay1 *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(INSPlay1 *This, double BufferingTime);HRESULT ( *get_UseFixedUDPPort)(INSPlay1 *This, VARIANT_BOOL *pUseFixedUDPPort);HRESULT ( *put_UseFixedUDPPort)(INSPlay1 *This, VARIANT_BOOL UseFixedUDPPort);HRESULT ( *get_FixedUDPPort)(INSPlay1 *This, int *pFixedUDPPort);HRESULT ( *put_FixedUDPPort)(INSPlay1 *This, int FixedUDPPort);HRESULT ( *get_UseHTTPProxy)(INSPlay1 *This, VARIANT_BOOL *pUseHTTPProxy);HRESULT ( *put_UseHTTPProxy)(INSPlay1 *This, VARIANT_BOOL UseHTTPProxy);HRESULT ( *get_EnableAutoProxy)(INSPlay1 *This, VARIANT_BOOL *pEnableAutoProxy);HRESULT ( *put_EnableAutoProxy)(INSPlay1 *This, VARIANT_BOOL EnableAutoProxy);HRESULT ( *get_HTTPProxyHost)(INSPlay1 *This, BSTR *pbstrHTTPProxyHost);HRESULT ( *put_HTTPProxyHost)(INSPlay1 *This, BSTR bstrHTTPProxyHost);HRESULT ( *get_HTTPProxyPort)(INSPlay1 *This, int *pHTTPProxyPort);HRESULT ( *put_HTTPProxyPort)(INSPlay1 *This, int HTTPProxyPort);HRESULT ( *get_EnableMulticast)(INSPlay1 *This, VARIANT_BOOL *pEnableMulticast);HRESULT ( *put_EnableMulticast)(INSPlay1 *This, VARIANT_BOOL EnableMulticast);HRESULT ( *get_EnableUDP)(INSPlay1 *This, VARIANT_BOOL *pEnableUDP);HRESULT ( *put_EnableUDP)(INSPlay1 *This, VARIANT_BOOL EnableUDP);HRESULT ( *get_EnableTCP)(INSPlay1 *This, VARIANT_BOOL *pEnableTCP);HRESULT ( *put_EnableTCP)(INSPlay1 *This, VARIANT_BOOL EnableTCP);HRESULT ( *get_EnableHTTP)(INSPlay1 *This, VARIANT_BOOL *pEnableHTTP);HRESULT ( *put_EnableHTTP)(INSPlay1 *This, VARIANT_BOOL EnableHTTP);HRESULT ( *get_BufferingProgress)(INSPlay1 *This, int *pBufferingProgress);HRESULT ( *get_BaseURL)(INSPlay1 *This, BSTR *pbstrBaseURL);HRESULT ( *put_BaseURL)(INSPlay1 *This, BSTR bstrBaseURL);HRESULT ( *get_DefaultFrame)(INSPlay1 *This, BSTR *pbstrDefaultFrame);HRESULT ( *put_DefaultFrame)(INSPlay1 *This, BSTR bstrDefaultFrame);HRESULT ( *AboutBox)(INSPlay1 *This);HRESULT ( *Cancel)(INSPlay1 *This);HRESULT ( *GetCodecInstalled)(INSPlay1 *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(INSPlay1 *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(INSPlay1 *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *Open)(INSPlay1 *This, BSTR bstrFileName);HRESULT ( *get_MediaPlayer)(INSPlay1 *This, IDispatch **ppdispatch);};
struct ITypeLibVtbl {HRESULT ( *QueryInterface)(ITypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib *This);ULONG ( *Release)(ITypeLib *This);UINT ( *GetTypeInfoCount)(ITypeLib *This);HRESULT ( *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);};
struct Folder2Vtbl {HRESULT ( *QueryInterface)(Folder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder2 *This);ULONG ( *Release)(Folder2 *This);HRESULT ( *GetTypeInfoCount)(Folder2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder2 *This, BSTR *pbs);HRESULT ( *get_Application)(Folder2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder2 *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder2 *This, Folder **ppsf);HRESULT ( *Items)(Folder2 *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder2 *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder2 *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder2 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder2 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder2 *This, VARIANT vItem, int iColumn, BSTR *pbs);HRESULT ( *get_Self)(Folder2 *This, FolderItem **ppfi);HRESULT ( *get_OfflineStatus)(Folder2 *This, LONG *pul);HRESULT ( *Synchronize)(Folder2 *This);HRESULT ( *get_HaveToShowWebViewBarricade)(Folder2 *This, VARIANT_BOOL *pbHaveToShowWebViewBarricade);HRESULT ( *DismissedWebViewBarricade)(Folder2 *This);};
struct Folder3Vtbl {HRESULT ( *QueryInterface)(Folder3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder3 *This);ULONG ( *Release)(Folder3 *This);HRESULT ( *GetTypeInfoCount)(Folder3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder3 *This, BSTR *pbs);HRESULT ( *get_Application)(Folder3 *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder3 *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder3 *This, Folder **ppsf);HRESULT ( *Items)(Folder3 *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder3 *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder3 *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder3 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder3 *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder3 *This, VARIANT vItem, int iColumn, BSTR *pbs);HRESULT ( *get_Self)(Folder3 *This, FolderItem **ppfi);HRESULT ( *get_OfflineStatus)(Folder3 *This, LONG *pul);HRESULT ( *Synchronize)(Folder3 *This);HRESULT ( *get_HaveToShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL *pbHaveToShowWebViewBarricade);HRESULT ( *DismissedWebViewBarricade)(Folder3 *This);HRESULT ( *get_ShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL *pbShowWebViewBarricade);HRESULT ( *put_ShowWebViewBarricade)(Folder3 *This, VARIANT_BOOL bShowWebViewBarricade);};
struct IADCCtlVtbl {HRESULT ( *QueryInterface)(IADCCtl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADCCtl *This);ULONG ( *Release)(IADCCtl *This);HRESULT ( *GetTypeInfoCount)(IADCCtl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADCCtl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADCCtl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADCCtl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Dirty)(IADCCtl *This, VARIANT_BOOL bDirty);HRESULT ( *get_Dirty)(IADCCtl *This, VARIANT_BOOL *pbDirty);HRESULT ( *put_Category)(IADCCtl *This, BSTR bstrCategory);HRESULT ( *get_Category)(IADCCtl *This, BSTR *pbstrCategory);HRESULT ( *put_Sort)(IADCCtl *This, BSTR bstrSortExpr);HRESULT ( *get_Sort)(IADCCtl *This, BSTR *pbstrSortExpr);HRESULT ( *put_Forcex86)(IADCCtl *This, VARIANT_BOOL bForce);HRESULT ( *get_Forcex86)(IADCCtl *This, VARIANT_BOOL *pbForce);HRESULT ( *get_ShowPostSetup)(IADCCtl *This, VARIANT_BOOL *pbShow);HRESULT ( *put_OnDomain)(IADCCtl *This, VARIANT_BOOL bOnDomain);HRESULT ( *get_OnDomain)(IADCCtl *This, VARIANT_BOOL *pbOnDomain);HRESULT ( *get_DefaultCategory)(IADCCtl *This, BSTR *pbstrCategory);HRESULT ( *msDataSourceObject)(IADCCtl *This, BSTR qualifier, IUnknown **ppUnk);HRESULT ( *addDataSourceListener)(IADCCtl *This, IUnknown *pEvent);HRESULT ( *Reset)(IADCCtl *This, BSTR bstrQualifier);HRESULT ( *IsRestricted)(IADCCtl *This, BSTR bstrPolicy, VARIANT_BOOL *pbRestricted);HRESULT ( *Exec)(IADCCtl *This, BSTR bstrQualifier, BSTR bstrCmd, LONG nRecord);};
struct INSPlayVtbl {HRESULT ( *QueryInterface)(INSPlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(INSPlay *This);ULONG ( *Release)(INSPlay *This);HRESULT ( *GetTypeInfoCount)(INSPlay *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(INSPlay *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(INSPlay *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(INSPlay *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ImageSourceWidth)(INSPlay *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(INSPlay *This, int *pHeight);HRESULT ( *get_Duration)(INSPlay *This, double *pDuration);HRESULT ( *get_Author)(INSPlay *This, BSTR *pbstrAuthor);HRESULT ( *get_Copyright)(INSPlay *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(INSPlay *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(INSPlay *This, BSTR *pbstrRating);HRESULT ( *get_Title)(INSPlay *This, BSTR *pbstrTitle);HRESULT ( *get_SourceLink)(INSPlay *This, BSTR *pbstrSourceLink);HRESULT ( *get_MarkerCount)(INSPlay *This, int *pMarkerCount);HRESULT ( *get_CanScan)(INSPlay *This, VARIANT_BOOL *pCanScan);HRESULT ( *get_CanSeek)(INSPlay *This, VARIANT_BOOL *pCanSeek);HRESULT ( *get_CanSeekToMarkers)(INSPlay *This, VARIANT_BOOL *pCanSeekToMarkers);HRESULT ( *get_CreationDate)(INSPlay *This, DATE *pCreationDate);HRESULT ( *get_Bandwidth)(INSPlay *This, int *pBandwidth);HRESULT ( *get_ErrorCorrection)(INSPlay *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_AutoStart)(INSPlay *This, VARIANT_BOOL *pAutoStart);HRESULT ( *put_AutoStart)(INSPlay *This, VARIANT_BOOL AutoStart);HRESULT ( *get_AutoRewind)(INSPlay *This, VARIANT_BOOL *pAutoRewind);HRESULT ( *put_AutoRewind)(INSPlay *This, VARIANT_BOOL AutoRewind);HRESULT ( *get_InvokeURLs)(INSPlay *This, VARIANT_BOOL *pInvokeURLs);HRESULT ( *put_InvokeURLs)(INSPlay *This, VARIANT_BOOL InvokeURLs);HRESULT ( *get_EnableContextMenu)(INSPlay *This, VARIANT_BOOL *pEnableContextMenu);HRESULT ( *put_EnableContextMenu)(INSPlay *This, VARIANT_BOOL EnableContextMenu);HRESULT ( *get_TransparentAtStart)(INSPlay *This, VARIANT_BOOL *pTransparentAtStart);HRESULT ( *put_TransparentAtStart)(INSPlay *This, VARIANT_BOOL TransparentAtStart);HRESULT ( *get_ClickToPlay)(INSPlay *This, VARIANT_BOOL *pClickToPlay);HRESULT ( *put_ClickToPlay)(INSPlay *This, VARIANT_BOOL ClickToPlay);HRESULT ( *get_FileName)(INSPlay *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(INSPlay *This, BSTR bstrFileName);HRESULT ( *get_CurrentPosition)(INSPlay *This, double *pCurrentPosition);HRESULT ( *put_CurrentPosition)(INSPlay *This, double CurrentPosition);HRESULT ( *get_Rate)(INSPlay *This, double *pRate);HRESULT ( *put_Rate)(INSPlay *This, double Rate);HRESULT ( *get_CurrentMarker)(INSPlay *This, int *pCurrentMarker);HRESULT ( *put_CurrentMarker)(INSPlay *This, int CurrentMarker);HRESULT ( *get_PlayCount)(INSPlay *This, int *pPlayCount);HRESULT ( *put_PlayCount)(INSPlay *This, int PlayCount);HRESULT ( *get_CurrentState)(INSPlay *This, int *pCurrentState);HRESULT ( *get_DisplaySize)(INSPlay *This, int *pDisplaySize);HRESULT ( *put_DisplaySize)(INSPlay *This, int DisplaySize);HRESULT ( *get_MainWindow)(INSPlay *This, int *pMainWindow);HRESULT ( *get_AllowScan)(INSPlay *This, VARIANT_BOOL *pAllowScan);HRESULT ( *put_AllowScan)(INSPlay *This, VARIANT_BOOL AllowScan);HRESULT ( *get_SendKeyboardEvents)(INSPlay *This, VARIANT_BOOL *pSendKeyboardEvents);HRESULT ( *put_SendKeyboardEvents)(INSPlay *This, VARIANT_BOOL SendKeyboardEvents);HRESULT ( *get_SendMouseClickEvents)(INSPlay *This, VARIANT_BOOL *pSendMouseClickEvents);HRESULT ( *put_SendMouseClickEvents)(INSPlay *This, VARIANT_BOOL SendMouseClickEvents);HRESULT ( *get_SendMouseMoveEvents)(INSPlay *This, VARIANT_BOOL *pSendMouseMoveEvents);HRESULT ( *put_SendMouseMoveEvents)(INSPlay *This, VARIANT_BOOL SendMouseMoveEvents);HRESULT ( *get_SendStateChangeEvents)(INSPlay *This, VARIANT_BOOL *pSendStateChangeEvents);HRESULT ( *put_SendStateChangeEvents)(INSPlay *This, VARIANT_BOOL SendStateChangeEvents);HRESULT ( *get_ReceivedPackets)(INSPlay *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(INSPlay *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(INSPlay *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(INSPlay *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(INSPlay *This, int *pBufferingCount);HRESULT ( *get_CursorType)(INSPlay *This, int *pCursorType);HRESULT ( *put_CursorType)(INSPlay *This, int CursorType);HRESULT ( *get_AnimationAtStart)(INSPlay *This, VARIANT_BOOL *pAnimationAtStart);HRESULT ( *put_AnimationAtStart)(INSPlay *This, VARIANT_BOOL AnimationAtStart);HRESULT ( *get_AnimationOnStop)(INSPlay *This, VARIANT_BOOL *pAnimationOnStop);HRESULT ( *put_AnimationOnStop)(INSPlay *This, VARIANT_BOOL AnimationOnStop);HRESULT ( *Play)(INSPlay *This);HRESULT ( *Pause)(INSPlay *This);HRESULT ( *Stop)(INSPlay *This);HRESULT ( *GetMarkerTime)(INSPlay *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(INSPlay *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *get_ChannelName)(INSPlay *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(INSPlay *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(INSPlay *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(INSPlay *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(INSPlay *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(INSPlay *This, BSTR *pbstrContactEmail);HRESULT ( *get_AllowChangeDisplaySize)(INSPlay *This, VARIANT_BOOL *pAllowChangeDisplaySize);HRESULT ( *put_AllowChangeDisplaySize)(INSPlay *This, VARIANT_BOOL AllowChangeDisplaySize);HRESULT ( *get_CodecCount)(INSPlay *This, int *pCodecCount);HRESULT ( *get_IsBroadcast)(INSPlay *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_IsDurationValid)(INSPlay *This, VARIANT_BOOL *pIsDurationValid);HRESULT ( *get_SourceProtocol)(INSPlay *This, int *pSourceProtocol);HRESULT ( *get_OpenState)(INSPlay *This, int *pOpenState);HRESULT ( *get_SendOpenStateChangeEvents)(INSPlay *This, VARIANT_BOOL *pSendOpenStateChangeEvents);HRESULT ( *put_SendOpenStateChangeEvents)(INSPlay *This, VARIANT_BOOL SendOpenStateChangeEvents);HRESULT ( *get_SendWarningEvents)(INSPlay *This, VARIANT_BOOL *pSendWarningEvents);HRESULT ( *put_SendWarningEvents)(INSPlay *This, VARIANT_BOOL SendWarningEvents);HRESULT ( *get_SendErrorEvents)(INSPlay *This, VARIANT_BOOL *pSendErrorEvents);HRESULT ( *put_SendErrorEvents)(INSPlay *This, VARIANT_BOOL SendErrorEvents);HRESULT ( *get_HasError)(INSPlay *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(INSPlay *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(INSPlay *This, int *pErrorCode);HRESULT ( *get_PlayState)(INSPlay *This, int *pPlayState);HRESULT ( *get_SendPlayStateChangeEvents)(INSPlay *This, VARIANT_BOOL *pSendPlayStateChangeEvents);HRESULT ( *put_SendPlayStateChangeEvents)(INSPlay *This, VARIANT_BOOL SendPlayStateChangeEvents);HRESULT ( *get_BufferingTime)(INSPlay *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(INSPlay *This, double BufferingTime);HRESULT ( *get_UseFixedUDPPort)(INSPlay *This, VARIANT_BOOL *pUseFixedUDPPort);HRESULT ( *put_UseFixedUDPPort)(INSPlay *This, VARIANT_BOOL UseFixedUDPPort);HRESULT ( *get_FixedUDPPort)(INSPlay *This, int *pFixedUDPPort);HRESULT ( *put_FixedUDPPort)(INSPlay *This, int FixedUDPPort);HRESULT ( *get_UseHTTPProxy)(INSPlay *This, VARIANT_BOOL *pUseHTTPProxy);HRESULT ( *put_UseHTTPProxy)(INSPlay *This, VARIANT_BOOL UseHTTPProxy);HRESULT ( *get_EnableAutoProxy)(INSPlay *This, VARIANT_BOOL *pEnableAutoProxy);HRESULT ( *put_EnableAutoProxy)(INSPlay *This, VARIANT_BOOL EnableAutoProxy);HRESULT ( *get_HTTPProxyHost)(INSPlay *This, BSTR *pbstrHTTPProxyHost);HRESULT ( *put_HTTPProxyHost)(INSPlay *This, BSTR bstrHTTPProxyHost);HRESULT ( *get_HTTPProxyPort)(INSPlay *This, int *pHTTPProxyPort);HRESULT ( *put_HTTPProxyPort)(INSPlay *This, int HTTPProxyPort);HRESULT ( *get_EnableMulticast)(INSPlay *This, VARIANT_BOOL *pEnableMulticast);HRESULT ( *put_EnableMulticast)(INSPlay *This, VARIANT_BOOL EnableMulticast);HRESULT ( *get_EnableUDP)(INSPlay *This, VARIANT_BOOL *pEnableUDP);HRESULT ( *put_EnableUDP)(INSPlay *This, VARIANT_BOOL EnableUDP);HRESULT ( *get_EnableTCP)(INSPlay *This, VARIANT_BOOL *pEnableTCP);HRESULT ( *put_EnableTCP)(INSPlay *This, VARIANT_BOOL EnableTCP);HRESULT ( *get_EnableHTTP)(INSPlay *This, VARIANT_BOOL *pEnableHTTP);HRESULT ( *put_EnableHTTP)(INSPlay *This, VARIANT_BOOL EnableHTTP);HRESULT ( *get_BufferingProgress)(INSPlay *This, int *pBufferingProgress);HRESULT ( *get_BaseURL)(INSPlay *This, BSTR *pbstrBaseURL);HRESULT ( *put_BaseURL)(INSPlay *This, BSTR bstrBaseURL);HRESULT ( *get_DefaultFrame)(INSPlay *This, BSTR *pbstrDefaultFrame);HRESULT ( *put_DefaultFrame)(INSPlay *This, BSTR bstrDefaultFrame);HRESULT ( *AboutBox)(INSPlay *This);HRESULT ( *Cancel)(INSPlay *This);HRESULT ( *GetCodecInstalled)(INSPlay *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(INSPlay *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(INSPlay *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *Open)(INSPlay *This, BSTR bstrFileName);};
struct IXMLDOMProcessingInstructionVtbl {HRESULT ( *QueryInterface)(IXMLDOMProcessingInstruction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMProcessingInstruction *This);ULONG ( *Release)(IXMLDOMProcessingInstruction *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMProcessingInstruction *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMProcessingInstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMProcessingInstruction *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMProcessingInstruction *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMProcessingInstruction *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMProcessingInstruction *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMProcessingInstruction *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMProcessingInstruction *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMProcessingInstruction *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMProcessingInstruction *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMProcessingInstruction *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMProcessingInstruction *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMProcessingInstruction *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMProcessingInstruction *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMProcessingInstruction *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMProcessingInstruction *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMProcessingInstruction *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_target)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT ( *get_data)(IXMLDOMProcessingInstruction *This, BSTR *value);HRESULT ( *put_data)(IXMLDOMProcessingInstruction *This, BSTR value);};
struct IXMLDOMDocumentFragmentVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocumentFragment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocumentFragment *This);ULONG ( *Release)(IXMLDOMDocumentFragment *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentFragment *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocumentFragment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentFragment *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocumentFragment *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocumentFragment *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocumentFragment *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocumentFragment *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocumentFragment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocumentFragment *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocumentFragment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentFragment *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocumentFragment *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocumentFragment *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocumentFragment *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocumentFragment *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocumentFragment *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocumentFragment *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocumentFragment *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocumentFragment *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocumentFragment *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMEntityReferenceVtbl {HRESULT ( *QueryInterface)(IXMLDOMEntityReference *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMEntityReference *This);ULONG ( *Release)(IXMLDOMEntityReference *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMEntityReference *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMEntityReference *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMEntityReference *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMEntityReference *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMEntityReference *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMEntityReference *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMEntityReference *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMEntityReference *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMEntityReference *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMEntityReference *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMEntityReference *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMEntityReference *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMEntityReference *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMEntityReference *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMEntityReference *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMEntityReference *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMEntityReference *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMEntityReference *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMEntityReference *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMEntityReference *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMEntityReference *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMEntityReference *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMEntityReference *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMEntityReference *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMEntityReference *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMEntityReference *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMEntityReference *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMEntityReference *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMEntityReference *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct ITIMEAnimationElementVtbl {HRESULT ( *QueryInterface)(ITIMEAnimationElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEAnimationElement *This);ULONG ( *Release)(ITIMEAnimationElement *This);HRESULT ( *GetTypeInfoCount)(ITIMEAnimationElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEAnimationElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEAnimationElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEAnimationElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accelerate)(ITIMEAnimationElement *This, VARIANT *MIDL_0014);HRESULT ( *put_accelerate)(ITIMEAnimationElement *This, VARIANT MIDL_0015);HRESULT ( *get_autoReverse)(ITIMEAnimationElement *This, VARIANT *MIDL_0016);HRESULT ( *put_autoReverse)(ITIMEAnimationElement *This, VARIANT MIDL_0017);HRESULT ( *get_begin)(ITIMEAnimationElement *This, VARIANT *time);HRESULT ( *put_begin)(ITIMEAnimationElement *This, VARIANT time);HRESULT ( *get_decelerate)(ITIMEAnimationElement *This, VARIANT *MIDL_0018);HRESULT ( *put_decelerate)(ITIMEAnimationElement *This, VARIANT MIDL_0019);HRESULT ( *get_dur)(ITIMEAnimationElement *This, VARIANT *time);HRESULT ( *put_dur)(ITIMEAnimationElement *This, VARIANT time);HRESULT ( *get_end)(ITIMEAnimationElement *This, VARIANT *time);HRESULT ( *put_end)(ITIMEAnimationElement *This, VARIANT time);HRESULT ( *get_fill)(ITIMEAnimationElement *This, BSTR *f);HRESULT ( *put_fill)(ITIMEAnimationElement *This, BSTR f);HRESULT ( *get_mute)(ITIMEAnimationElement *This, VARIANT *b);HRESULT ( *put_mute)(ITIMEAnimationElement *This, VARIANT b);HRESULT ( *get_repeatCount)(ITIMEAnimationElement *This, VARIANT *c);HRESULT ( *put_repeatCount)(ITIMEAnimationElement *This, VARIANT c);HRESULT ( *get_repeatDur)(ITIMEAnimationElement *This, VARIANT *time);HRESULT ( *put_repeatDur)(ITIMEAnimationElement *This, VARIANT time);HRESULT ( *get_restart)(ITIMEAnimationElement *This, BSTR *MIDL_0020);HRESULT ( *put_restart)(ITIMEAnimationElement *This, BSTR MIDL_0021);HRESULT ( *get_speed)(ITIMEAnimationElement *This, VARIANT *speed);HRESULT ( *put_speed)(ITIMEAnimationElement *This, VARIANT speed);HRESULT ( *get_syncBehavior)(ITIMEAnimationElement *This, BSTR *sync);HRESULT ( *put_syncBehavior)(ITIMEAnimationElement *This, BSTR sync);HRESULT ( *get_syncTolerance)(ITIMEAnimationElement *This, VARIANT *tol);HRESULT ( *put_syncTolerance)(ITIMEAnimationElement *This, VARIANT tol);HRESULT ( *get_syncMaster)(ITIMEAnimationElement *This, VARIANT *b);HRESULT ( *put_syncMaster)(ITIMEAnimationElement *This, VARIANT b);HRESULT ( *get_timeAction)(ITIMEAnimationElement *This, BSTR *time);HRESULT ( *put_timeAction)(ITIMEAnimationElement *This, BSTR time);HRESULT ( *get_timeContainer)(ITIMEAnimationElement *This, BSTR *MIDL_0022);HRESULT ( *get_volume)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_volume)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_currTimeState)(ITIMEAnimationElement *This, ITIMEState **TimeState);HRESULT ( *get_timeAll)(ITIMEAnimationElement *This, ITIMEElementCollection **allColl);HRESULT ( *get_timeChildren)(ITIMEAnimationElement *This, ITIMEElementCollection **childColl);HRESULT ( *get_timeParent)(ITIMEAnimationElement *This, ITIMEElement **parent);HRESULT ( *get_isPaused)(ITIMEAnimationElement *This, VARIANT_BOOL *b);HRESULT ( *beginElement)(ITIMEAnimationElement *This);HRESULT ( *beginElementAt)(ITIMEAnimationElement *This, double parentTime);HRESULT ( *endElement)(ITIMEAnimationElement *This);HRESULT ( *endElementAt)(ITIMEAnimationElement *This, double parentTime);HRESULT ( *pauseElement)(ITIMEAnimationElement *This);HRESULT ( *resetElement)(ITIMEAnimationElement *This);HRESULT ( *resumeElement)(ITIMEAnimationElement *This);HRESULT ( *seekActiveTime)(ITIMEAnimationElement *This, double activeTime);HRESULT ( *seekSegmentTime)(ITIMEAnimationElement *This, double segmentTime);HRESULT ( *seekTo)(ITIMEAnimationElement *This, LONG repeatCount, double segmentTime);HRESULT ( *documentTimeToParentTime)(ITIMEAnimationElement *This, double documentTime, double *parentTime);HRESULT ( *parentTimeToDocumentTime)(ITIMEAnimationElement *This, double parentTime, double *documentTime);HRESULT ( *parentTimeToActiveTime)(ITIMEAnimationElement *This, double parentTime, double *activeTime);HRESULT ( *activeTimeToParentTime)(ITIMEAnimationElement *This, double activeTime, double *parentTime);HRESULT ( *activeTimeToSegmentTime)(ITIMEAnimationElement *This, double activeTime, double *segmentTime);HRESULT ( *segmentTimeToActiveTime)(ITIMEAnimationElement *This, double segmentTime, double *activeTime);HRESULT ( *segmentTimeToSimpleTime)(ITIMEAnimationElement *This, double segmentTime, double *simpleTime);HRESULT ( *simpleTimeToSegmentTime)(ITIMEAnimationElement *This, double simpleTime, double *segmentTime);HRESULT ( *get_endSync)(ITIMEAnimationElement *This, BSTR *es);HRESULT ( *put_endSync)(ITIMEAnimationElement *This, BSTR es);HRESULT ( *get_activeElements)(ITIMEAnimationElement *This, ITIMEActiveElementCollection **activeColl);HRESULT ( *get_hasMedia)(ITIMEAnimationElement *This, VARIANT_BOOL *flag);HRESULT ( *nextElement)(ITIMEAnimationElement *This);HRESULT ( *prevElement)(ITIMEAnimationElement *This);HRESULT ( *get_updateMode)(ITIMEAnimationElement *This, BSTR *updateMode);HRESULT ( *put_updateMode)(ITIMEAnimationElement *This, BSTR updateMode);HRESULT ( *get_attributeName)(ITIMEAnimationElement *This, BSTR *attrib);HRESULT ( *put_attributeName)(ITIMEAnimationElement *This, BSTR attrib);HRESULT ( *get_by)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_by)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_calcMode)(ITIMEAnimationElement *This, BSTR *calcmode);HRESULT ( *put_calcMode)(ITIMEAnimationElement *This, BSTR calcmode);HRESULT ( *get_from)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_from)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_keySplines)(ITIMEAnimationElement *This, BSTR *val);HRESULT ( *put_keySplines)(ITIMEAnimationElement *This, BSTR val);HRESULT ( *get_keyTimes)(ITIMEAnimationElement *This, BSTR *val);HRESULT ( *put_keyTimes)(ITIMEAnimationElement *This, BSTR val);HRESULT ( *get_targetElement)(ITIMEAnimationElement *This, BSTR *target);HRESULT ( *put_targetElement)(ITIMEAnimationElement *This, BSTR target);HRESULT ( *get_to)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_to)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_values)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_values)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_origin)(ITIMEAnimationElement *This, BSTR *val);HRESULT ( *put_origin)(ITIMEAnimationElement *This, BSTR val);HRESULT ( *get_path)(ITIMEAnimationElement *This, VARIANT *val);HRESULT ( *put_path)(ITIMEAnimationElement *This, VARIANT val);HRESULT ( *get_additive)(ITIMEAnimationElement *This, BSTR *val);HRESULT ( *put_additive)(ITIMEAnimationElement *This, BSTR val);HRESULT ( *get_accumulate)(ITIMEAnimationElement *This, BSTR *val);HRESULT ( *put_accumulate)(ITIMEAnimationElement *This, BSTR val);};
struct IXMLDOMCharacterDataVtbl {HRESULT ( *QueryInterface)(IXMLDOMCharacterData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMCharacterData *This);ULONG ( *Release)(IXMLDOMCharacterData *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMCharacterData *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMCharacterData *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMCharacterData *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMCharacterData *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMCharacterData *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMCharacterData *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMCharacterData *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMCharacterData *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMCharacterData *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMCharacterData *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMCharacterData *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMCharacterData *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMCharacterData *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMCharacterData *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMCharacterData *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMCharacterData *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMCharacterData *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMCharacterData *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMCharacterData *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMCharacterData *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMCharacterData *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMCharacterData *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMCharacterData *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMCharacterData *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMCharacterData *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMCharacterData *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMCharacterData *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMCharacterData *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMCharacterData *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMCharacterData *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMCharacterData *This, BSTR data);HRESULT ( *get_length)(IXMLDOMCharacterData *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMCharacterData *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMCharacterData *This, BSTR data);HRESULT ( *insertData)(IXMLDOMCharacterData *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMCharacterData *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMCharacterData *This, int offset, int count, BSTR data);};
struct IXMLDOMCDATASectionVtbl {HRESULT ( *QueryInterface)(IXMLDOMCDATASection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMCDATASection *This);ULONG ( *Release)(IXMLDOMCDATASection *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMCDATASection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMCDATASection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMCDATASection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMCDATASection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMCDATASection *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMCDATASection *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMCDATASection *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMCDATASection *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMCDATASection *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMCDATASection *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMCDATASection *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMCDATASection *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMCDATASection *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMCDATASection *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMCDATASection *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMCDATASection *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMCDATASection *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMCDATASection *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMCDATASection *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMCDATASection *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMCDATASection *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMCDATASection *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMCDATASection *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMCDATASection *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMCDATASection *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMCDATASection *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMCDATASection *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMCDATASection *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMCDATASection *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMCDATASection *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMCDATASection *This, BSTR data);HRESULT ( *get_length)(IXMLDOMCDATASection *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMCDATASection *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMCDATASection *This, BSTR data);HRESULT ( *insertData)(IXMLDOMCDATASection *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMCDATASection *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMCDATASection *This, int offset, int count, BSTR data);HRESULT ( *splitText)(IXMLDOMCDATASection *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXMLDOMDocumentTypeVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocumentType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocumentType *This);ULONG ( *Release)(IXMLDOMDocumentType *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocumentType *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocumentType *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocumentType *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocumentType *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocumentType *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocumentType *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocumentType *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocumentType *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocumentType *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocumentType *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocumentType *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocumentType *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocumentType *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocumentType *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocumentType *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocumentType *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocumentType *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocumentType *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocumentType *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocumentType *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocumentType *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocumentType *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocumentType *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocumentType *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocumentType *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocumentType *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocumentType *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocumentType *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_name)(IXMLDOMDocumentType *This, BSTR *rootName);HRESULT ( *get_entities)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **entityMap);HRESULT ( *get_notations)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **notationMap);};
struct IScopedOperationsVtbl {HRESULT ( *QueryInterface)(IScopedOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScopedOperations *This);ULONG ( *Release)(IScopedOperations *This);HRESULT ( *Bind)(IScopedOperations *This, IUnknown *pUnkOuter, LPCOLESTR pwszURL, DBBINDURLFLAG dwBindURLFlags,  GUID * rguid,  IID * riid, IAuthenticate *pAuthenticate, DBIMPLICITSESSION *pImplSession, DBBINDURLSTATUS *pdwBindStatus, IUnknown **ppUnk);HRESULT ( *Copy)(IScopedOperations *This, DBCOUNTITEM cRows,LPCOLESTR  *    rgpwszSourceURLs, LPCOLESTR rgpwszDestURLs[], DWORD dwCopyFlags, IAuthenticate *pAuthenticate,DBSTATUS  *    rgdwStatus, LPOLESTR rgpwszNewURLs[], OLECHAR **ppStringsBuffer);HRESULT ( *Move)(IScopedOperations *This, DBCOUNTITEM cRows,LPCOLESTR  *    rgpwszSourceURLs, LPCOLESTR rgpwszDestURLs[], DWORD dwMoveFlags, IAuthenticate *pAuthenticate,DBSTATUS  *    rgdwStatus, LPOLESTR rgpwszNewURLs[], OLECHAR **ppStringsBuffer);HRESULT ( *Delete)(IScopedOperations *This, DBCOUNTITEM cRows,LPCOLESTR  *    rgpwszURLs, DWORD dwDeleteFlags,DBSTATUS  *    rgdwStatus);HRESULT ( *OpenRowset)(IScopedOperations *This, IUnknown *pUnkOuter, DBID *pTableID, DBID *pIndexID,  IID * riid, ULONG cPropertySets,DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);};
struct ITIMEMediaElementVtbl {HRESULT ( *QueryInterface)(ITIMEMediaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEMediaElement *This);ULONG ( *Release)(ITIMEMediaElement *This);HRESULT ( *GetTypeInfoCount)(ITIMEMediaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEMediaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEMediaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEMediaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accelerate)(ITIMEMediaElement *This, VARIANT *MIDL_0014);HRESULT ( *put_accelerate)(ITIMEMediaElement *This, VARIANT MIDL_0015);HRESULT ( *get_autoReverse)(ITIMEMediaElement *This, VARIANT *MIDL_0016);HRESULT ( *put_autoReverse)(ITIMEMediaElement *This, VARIANT MIDL_0017);HRESULT ( *get_begin)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_begin)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_decelerate)(ITIMEMediaElement *This, VARIANT *MIDL_0018);HRESULT ( *put_decelerate)(ITIMEMediaElement *This, VARIANT MIDL_0019);HRESULT ( *get_dur)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_dur)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_end)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_end)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_fill)(ITIMEMediaElement *This, BSTR *f);HRESULT ( *put_fill)(ITIMEMediaElement *This, BSTR f);HRESULT ( *get_mute)(ITIMEMediaElement *This, VARIANT *b);HRESULT ( *put_mute)(ITIMEMediaElement *This, VARIANT b);HRESULT ( *get_repeatCount)(ITIMEMediaElement *This, VARIANT *c);HRESULT ( *put_repeatCount)(ITIMEMediaElement *This, VARIANT c);HRESULT ( *get_repeatDur)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_repeatDur)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_restart)(ITIMEMediaElement *This, BSTR *MIDL_0020);HRESULT ( *put_restart)(ITIMEMediaElement *This, BSTR MIDL_0021);HRESULT ( *get_speed)(ITIMEMediaElement *This, VARIANT *speed);HRESULT ( *put_speed)(ITIMEMediaElement *This, VARIANT speed);HRESULT ( *get_syncBehavior)(ITIMEMediaElement *This, BSTR *sync);HRESULT ( *put_syncBehavior)(ITIMEMediaElement *This, BSTR sync);HRESULT ( *get_syncTolerance)(ITIMEMediaElement *This, VARIANT *tol);HRESULT ( *put_syncTolerance)(ITIMEMediaElement *This, VARIANT tol);HRESULT ( *get_syncMaster)(ITIMEMediaElement *This, VARIANT *b);HRESULT ( *put_syncMaster)(ITIMEMediaElement *This, VARIANT b);HRESULT ( *get_timeAction)(ITIMEMediaElement *This, BSTR *time);HRESULT ( *put_timeAction)(ITIMEMediaElement *This, BSTR time);HRESULT ( *get_timeContainer)(ITIMEMediaElement *This, BSTR *MIDL_0022);HRESULT ( *get_volume)(ITIMEMediaElement *This, VARIANT *val);HRESULT ( *put_volume)(ITIMEMediaElement *This, VARIANT val);HRESULT ( *get_currTimeState)(ITIMEMediaElement *This, ITIMEState **TimeState);HRESULT ( *get_timeAll)(ITIMEMediaElement *This, ITIMEElementCollection **allColl);HRESULT ( *get_timeChildren)(ITIMEMediaElement *This, ITIMEElementCollection **childColl);HRESULT ( *get_timeParent)(ITIMEMediaElement *This, ITIMEElement **parent);HRESULT ( *get_isPaused)(ITIMEMediaElement *This, VARIANT_BOOL *b);HRESULT ( *beginElement)(ITIMEMediaElement *This);HRESULT ( *beginElementAt)(ITIMEMediaElement *This, double parentTime);HRESULT ( *endElement)(ITIMEMediaElement *This);HRESULT ( *endElementAt)(ITIMEMediaElement *This, double parentTime);HRESULT ( *pauseElement)(ITIMEMediaElement *This);HRESULT ( *resetElement)(ITIMEMediaElement *This);HRESULT ( *resumeElement)(ITIMEMediaElement *This);HRESULT ( *seekActiveTime)(ITIMEMediaElement *This, double activeTime);HRESULT ( *seekSegmentTime)(ITIMEMediaElement *This, double segmentTime);HRESULT ( *seekTo)(ITIMEMediaElement *This, LONG repeatCount, double segmentTime);HRESULT ( *documentTimeToParentTime)(ITIMEMediaElement *This, double documentTime, double *parentTime);HRESULT ( *parentTimeToDocumentTime)(ITIMEMediaElement *This, double parentTime, double *documentTime);HRESULT ( *parentTimeToActiveTime)(ITIMEMediaElement *This, double parentTime, double *activeTime);HRESULT ( *activeTimeToParentTime)(ITIMEMediaElement *This, double activeTime, double *parentTime);HRESULT ( *activeTimeToSegmentTime)(ITIMEMediaElement *This, double activeTime, double *segmentTime);HRESULT ( *segmentTimeToActiveTime)(ITIMEMediaElement *This, double segmentTime, double *activeTime);HRESULT ( *segmentTimeToSimpleTime)(ITIMEMediaElement *This, double segmentTime, double *simpleTime);HRESULT ( *simpleTimeToSegmentTime)(ITIMEMediaElement *This, double simpleTime, double *segmentTime);HRESULT ( *get_endSync)(ITIMEMediaElement *This, BSTR *es);HRESULT ( *put_endSync)(ITIMEMediaElement *This, BSTR es);HRESULT ( *get_activeElements)(ITIMEMediaElement *This, ITIMEActiveElementCollection **activeColl);HRESULT ( *get_hasMedia)(ITIMEMediaElement *This, VARIANT_BOOL *flag);HRESULT ( *nextElement)(ITIMEMediaElement *This);HRESULT ( *prevElement)(ITIMEMediaElement *This);HRESULT ( *get_updateMode)(ITIMEMediaElement *This, BSTR *updateMode);HRESULT ( *put_updateMode)(ITIMEMediaElement *This, BSTR updateMode);HRESULT ( *get_clipBegin)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_clipBegin)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_clipEnd)(ITIMEMediaElement *This, VARIANT *time);HRESULT ( *put_clipEnd)(ITIMEMediaElement *This, VARIANT time);HRESULT ( *get_player)(ITIMEMediaElement *This, VARIANT *id);HRESULT ( *put_player)(ITIMEMediaElement *This, VARIANT id);HRESULT ( *get_src)(ITIMEMediaElement *This, VARIANT *url);HRESULT ( *put_src)(ITIMEMediaElement *This, VARIANT url);HRESULT ( *get_type)(ITIMEMediaElement *This, VARIANT *mimetype);HRESULT ( *put_type)(ITIMEMediaElement *This, VARIANT mimetype);HRESULT ( *get_abstract)(ITIMEMediaElement *This, BSTR *abs);HRESULT ( *get_author)(ITIMEMediaElement *This, BSTR *auth);HRESULT ( *get_copyright)(ITIMEMediaElement *This, BSTR *cpyrght);HRESULT ( *get_hasAudio)(ITIMEMediaElement *This, VARIANT_BOOL *b);HRESULT ( *get_hasVisual)(ITIMEMediaElement *This, VARIANT_BOOL *b);HRESULT ( *get_mediaDur)(ITIMEMediaElement *This, double *dur);HRESULT ( *get_mediaHeight)(ITIMEMediaElement *This, int *height);HRESULT ( *get_mediaWidth)(ITIMEMediaElement *This, int *width);HRESULT ( *get_playerObject)(ITIMEMediaElement *This, IDispatch **ppDisp);HRESULT ( *get_playList)(ITIMEMediaElement *This, ITIMEPlayList **pPlayList);HRESULT ( *get_rating)(ITIMEMediaElement *This, BSTR *rate);HRESULT ( *get_title)(ITIMEMediaElement *This, BSTR *name);HRESULT ( *get_hasPlayList)(ITIMEMediaElement *This, VARIANT_BOOL *b);HRESULT ( *get_canPause)(ITIMEMediaElement *This, VARIANT_BOOL *b);HRESULT ( *get_canSeek)(ITIMEMediaElement *This, VARIANT_BOOL *b);};
struct ITIMEBodyElementVtbl {HRESULT ( *QueryInterface)(ITIMEBodyElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEBodyElement *This);ULONG ( *Release)(ITIMEBodyElement *This);HRESULT ( *GetTypeInfoCount)(ITIMEBodyElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEBodyElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEBodyElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEBodyElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accelerate)(ITIMEBodyElement *This, VARIANT *MIDL_0014);HRESULT ( *put_accelerate)(ITIMEBodyElement *This, VARIANT MIDL_0015);HRESULT ( *get_autoReverse)(ITIMEBodyElement *This, VARIANT *MIDL_0016);HRESULT ( *put_autoReverse)(ITIMEBodyElement *This, VARIANT MIDL_0017);HRESULT ( *get_begin)(ITIMEBodyElement *This, VARIANT *time);HRESULT ( *put_begin)(ITIMEBodyElement *This, VARIANT time);HRESULT ( *get_decelerate)(ITIMEBodyElement *This, VARIANT *MIDL_0018);HRESULT ( *put_decelerate)(ITIMEBodyElement *This, VARIANT MIDL_0019);HRESULT ( *get_dur)(ITIMEBodyElement *This, VARIANT *time);HRESULT ( *put_dur)(ITIMEBodyElement *This, VARIANT time);HRESULT ( *get_end)(ITIMEBodyElement *This, VARIANT *time);HRESULT ( *put_end)(ITIMEBodyElement *This, VARIANT time);HRESULT ( *get_fill)(ITIMEBodyElement *This, BSTR *f);HRESULT ( *put_fill)(ITIMEBodyElement *This, BSTR f);HRESULT ( *get_mute)(ITIMEBodyElement *This, VARIANT *b);HRESULT ( *put_mute)(ITIMEBodyElement *This, VARIANT b);HRESULT ( *get_repeatCount)(ITIMEBodyElement *This, VARIANT *c);HRESULT ( *put_repeatCount)(ITIMEBodyElement *This, VARIANT c);HRESULT ( *get_repeatDur)(ITIMEBodyElement *This, VARIANT *time);HRESULT ( *put_repeatDur)(ITIMEBodyElement *This, VARIANT time);HRESULT ( *get_restart)(ITIMEBodyElement *This, BSTR *MIDL_0020);HRESULT ( *put_restart)(ITIMEBodyElement *This, BSTR MIDL_0021);HRESULT ( *get_speed)(ITIMEBodyElement *This, VARIANT *speed);HRESULT ( *put_speed)(ITIMEBodyElement *This, VARIANT speed);HRESULT ( *get_syncBehavior)(ITIMEBodyElement *This, BSTR *sync);HRESULT ( *put_syncBehavior)(ITIMEBodyElement *This, BSTR sync);HRESULT ( *get_syncTolerance)(ITIMEBodyElement *This, VARIANT *tol);HRESULT ( *put_syncTolerance)(ITIMEBodyElement *This, VARIANT tol);HRESULT ( *get_syncMaster)(ITIMEBodyElement *This, VARIANT *b);HRESULT ( *put_syncMaster)(ITIMEBodyElement *This, VARIANT b);HRESULT ( *get_timeAction)(ITIMEBodyElement *This, BSTR *time);HRESULT ( *put_timeAction)(ITIMEBodyElement *This, BSTR time);HRESULT ( *get_timeContainer)(ITIMEBodyElement *This, BSTR *MIDL_0022);HRESULT ( *get_volume)(ITIMEBodyElement *This, VARIANT *val);HRESULT ( *put_volume)(ITIMEBodyElement *This, VARIANT val);HRESULT ( *get_currTimeState)(ITIMEBodyElement *This, ITIMEState **TimeState);HRESULT ( *get_timeAll)(ITIMEBodyElement *This, ITIMEElementCollection **allColl);HRESULT ( *get_timeChildren)(ITIMEBodyElement *This, ITIMEElementCollection **childColl);HRESULT ( *get_timeParent)(ITIMEBodyElement *This, ITIMEElement **parent);HRESULT ( *get_isPaused)(ITIMEBodyElement *This, VARIANT_BOOL *b);HRESULT ( *beginElement)(ITIMEBodyElement *This);HRESULT ( *beginElementAt)(ITIMEBodyElement *This, double parentTime);HRESULT ( *endElement)(ITIMEBodyElement *This);HRESULT ( *endElementAt)(ITIMEBodyElement *This, double parentTime);HRESULT ( *pauseElement)(ITIMEBodyElement *This);HRESULT ( *resetElement)(ITIMEBodyElement *This);HRESULT ( *resumeElement)(ITIMEBodyElement *This);HRESULT ( *seekActiveTime)(ITIMEBodyElement *This, double activeTime);HRESULT ( *seekSegmentTime)(ITIMEBodyElement *This, double segmentTime);HRESULT ( *seekTo)(ITIMEBodyElement *This, LONG repeatCount, double segmentTime);HRESULT ( *documentTimeToParentTime)(ITIMEBodyElement *This, double documentTime, double *parentTime);HRESULT ( *parentTimeToDocumentTime)(ITIMEBodyElement *This, double parentTime, double *documentTime);HRESULT ( *parentTimeToActiveTime)(ITIMEBodyElement *This, double parentTime, double *activeTime);HRESULT ( *activeTimeToParentTime)(ITIMEBodyElement *This, double activeTime, double *parentTime);HRESULT ( *activeTimeToSegmentTime)(ITIMEBodyElement *This, double activeTime, double *segmentTime);HRESULT ( *segmentTimeToActiveTime)(ITIMEBodyElement *This, double segmentTime, double *activeTime);HRESULT ( *segmentTimeToSimpleTime)(ITIMEBodyElement *This, double segmentTime, double *simpleTime);HRESULT ( *simpleTimeToSegmentTime)(ITIMEBodyElement *This, double simpleTime, double *segmentTime);HRESULT ( *get_endSync)(ITIMEBodyElement *This, BSTR *es);HRESULT ( *put_endSync)(ITIMEBodyElement *This, BSTR es);HRESULT ( *get_activeElements)(ITIMEBodyElement *This, ITIMEActiveElementCollection **activeColl);HRESULT ( *get_hasMedia)(ITIMEBodyElement *This, VARIANT_BOOL *flag);HRESULT ( *nextElement)(ITIMEBodyElement *This);HRESULT ( *prevElement)(ITIMEBodyElement *This);HRESULT ( *get_updateMode)(ITIMEBodyElement *This, BSTR *updateMode);HRESULT ( *put_updateMode)(ITIMEBodyElement *This, BSTR updateMode);};
struct IXMLDOMAttributeVtbl {HRESULT ( *QueryInterface)(IXMLDOMAttribute *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMAttribute *This);ULONG ( *Release)(IXMLDOMAttribute *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMAttribute *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMAttribute *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMAttribute *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMAttribute *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMAttribute *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMAttribute *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMAttribute *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMAttribute *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMAttribute *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMAttribute *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMAttribute *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMAttribute *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMAttribute *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMAttribute *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMAttribute *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMAttribute *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMAttribute *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMAttribute *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMAttribute *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMAttribute *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMAttribute *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMAttribute *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMAttribute *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMAttribute *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMAttribute *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMAttribute *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMAttribute *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMAttribute *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMAttribute *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMAttribute *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_name)(IXMLDOMAttribute *This, BSTR *attributeName);HRESULT ( *get_value)(IXMLDOMAttribute *This, VARIANT *attributeValue);HRESULT ( *put_value)(IXMLDOMAttribute *This, VARIANT attributeValue);};
struct IXMLDOMDocument2Vtbl {HRESULT ( *QueryInterface)(IXMLDOMDocument2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocument2 *This);ULONG ( *Release)(IXMLDOMDocument2 *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocument2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocument2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocument2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocument2 *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocument2 *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocument2 *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocument2 *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocument2 *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocument2 *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocument2 *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocument2 *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocument2 *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocument2 *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocument2 *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocument2 *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocument2 *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocument2 *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocument2 *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocument2 *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocument2 *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocument2 *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocument2 *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocument2 *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocument2 *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocument2 *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocument2 *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocument2 *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocument2 *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocument2 *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocument2 *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocument2 *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocument2 *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocument2 *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocument2 *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocument2 *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocument2 *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocument2 *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocument2 *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocument2 *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_doctype)(IXMLDOMDocument2 *This, IXMLDOMDocumentType **documentType);HRESULT ( *get_implementation)(IXMLDOMDocument2 *This, IXMLDOMImplementation **impl);HRESULT ( *get_documentElement)(IXMLDOMDocument2 *This, IXMLDOMElement **DOMElement);HRESULT ( *putref_documentElement)(IXMLDOMDocument2 *This, IXMLDOMElement *DOMElement);HRESULT ( *createElement)(IXMLDOMDocument2 *This, BSTR tagName, IXMLDOMElement **element);HRESULT ( *createDocumentFragment)(IXMLDOMDocument2 *This, IXMLDOMDocumentFragment **docFrag);HRESULT ( *createTextNode)(IXMLDOMDocument2 *This, BSTR data, IXMLDOMText **text);HRESULT ( *createComment)(IXMLDOMDocument2 *This, BSTR data, IXMLDOMComment **comment);HRESULT ( *createCDATASection)(IXMLDOMDocument2 *This, BSTR data, IXMLDOMCDATASection **cdata);HRESULT ( *createProcessingInstruction)(IXMLDOMDocument2 *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);HRESULT ( *createAttribute)(IXMLDOMDocument2 *This, BSTR name, IXMLDOMAttribute **attribute);HRESULT ( *createEntityReference)(IXMLDOMDocument2 *This, BSTR name, IXMLDOMEntityReference **entityRef);HRESULT ( *getElementsByTagName)(IXMLDOMDocument2 *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT ( *createNode)(IXMLDOMDocument2 *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);HRESULT ( *nodeFromID)(IXMLDOMDocument2 *This, BSTR idString, IXMLDOMNode **node);HRESULT ( *load)(IXMLDOMDocument2 *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);HRESULT ( *get_readyState)(IXMLDOMDocument2 *This, int *value);HRESULT ( *get_parseError)(IXMLDOMDocument2 *This, IXMLDOMParseError **errorObj);HRESULT ( *get_url)(IXMLDOMDocument2 *This, BSTR *urlString);HRESULT ( *get_async)(IXMLDOMDocument2 *This, VARIANT_BOOL *isAsync);HRESULT ( *put_async)(IXMLDOMDocument2 *This, VARIANT_BOOL isAsync);HRESULT ( *abort)(IXMLDOMDocument2 *This);HRESULT ( *loadXML)(IXMLDOMDocument2 *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);HRESULT ( *save)(IXMLDOMDocument2 *This, VARIANT destination);HRESULT ( *get_validateOnParse)(IXMLDOMDocument2 *This, VARIANT_BOOL *isValidating);HRESULT ( *put_validateOnParse)(IXMLDOMDocument2 *This, VARIANT_BOOL isValidating);HRESULT ( *get_resolveExternals)(IXMLDOMDocument2 *This, VARIANT_BOOL *isResolving);HRESULT ( *put_resolveExternals)(IXMLDOMDocument2 *This, VARIANT_BOOL isResolving);HRESULT ( *get_preserveWhiteSpace)(IXMLDOMDocument2 *This, VARIANT_BOOL *isPreserving);HRESULT ( *put_preserveWhiteSpace)(IXMLDOMDocument2 *This, VARIANT_BOOL isPreserving);HRESULT ( *put_onreadystatechange)(IXMLDOMDocument2 *This, VARIANT readystatechangeSink);HRESULT ( *put_ondataavailable)(IXMLDOMDocument2 *This, VARIANT ondataavailableSink);HRESULT ( *put_ontransformnode)(IXMLDOMDocument2 *This, VARIANT ontransformnodeSink);HRESULT ( *get_namespaces)(IXMLDOMDocument2 *This, IXMLDOMSchemaCollection **namespaceCollection);HRESULT ( *get_schemas)(IXMLDOMDocument2 *This, VARIANT *otherCollection);HRESULT ( *putref_schemas)(IXMLDOMDocument2 *This, VARIANT otherCollection);HRESULT ( *validate)(IXMLDOMDocument2 *This, IXMLDOMParseError **errorObj);HRESULT ( *setProperty)(IXMLDOMDocument2 *This, BSTR name, VARIANT value);HRESULT ( *getProperty)(IXMLDOMDocument2 *This, BSTR name, VARIANT *value);};
struct ICreateTypeInfoVtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo *This);ULONG ( *Release)(ICreateTypeInfo *This);HRESULT ( *SetGuid)(ICreateTypeInfo *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo *This);};
struct IShellNameSpaceVtbl {HRESULT ( *QueryInterface)(IShellNameSpace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellNameSpace *This);ULONG ( *Release)(IShellNameSpace *This);HRESULT ( *GetTypeInfoCount)(IShellNameSpace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellNameSpace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellNameSpace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellNameSpace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *MoveSelectionUp)(IShellNameSpace *This);HRESULT ( *MoveSelectionDown)(IShellNameSpace *This);HRESULT ( *ResetSort)(IShellNameSpace *This);HRESULT ( *NewFolder)(IShellNameSpace *This);HRESULT ( *Synchronize)(IShellNameSpace *This);HRESULT ( *Import)(IShellNameSpace *This);HRESULT ( *Export)(IShellNameSpace *This);HRESULT ( *InvokeContextMenuCommand)(IShellNameSpace *This, BSTR strCommand);HRESULT ( *MoveSelectionTo)(IShellNameSpace *This);HRESULT ( *get_SubscriptionsEnabled)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *CreateSubscriptionForSelection)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *DeleteSubscriptionForSelection)(IShellNameSpace *This, VARIANT_BOOL *pBool);HRESULT ( *SetRoot)(IShellNameSpace *This, BSTR bstrFullPath);HRESULT ( *get_EnumOptions)(IShellNameSpace *This, LONG *pgrfEnumFlags);HRESULT ( *put_EnumOptions)(IShellNameSpace *This, LONG lVal);HRESULT ( *get_SelectedItem)(IShellNameSpace *This, IDispatch **pItem);HRESULT ( *put_SelectedItem)(IShellNameSpace *This, IDispatch *pItem);HRESULT ( *get_Root)(IShellNameSpace *This, VARIANT *pvar);HRESULT ( *put_Root)(IShellNameSpace *This, VARIANT var);HRESULT ( *get_Depth)(IShellNameSpace *This, int *piDepth);HRESULT ( *put_Depth)(IShellNameSpace *This, int iDepth);HRESULT ( *get_Mode)(IShellNameSpace *This, UINT *puMode);HRESULT ( *put_Mode)(IShellNameSpace *This, UINT uMode);HRESULT ( *get_Flags)(IShellNameSpace *This, DWORD *pdwFlags);HRESULT ( *put_Flags)(IShellNameSpace *This, DWORD dwFlags);HRESULT ( *put_TVFlags)(IShellNameSpace *This, DWORD dwFlags);HRESULT ( *get_TVFlags)(IShellNameSpace *This, DWORD *dwFlags);HRESULT ( *get_Columns)(IShellNameSpace *This, BSTR *bstrColumns);HRESULT ( *put_Columns)(IShellNameSpace *This, BSTR bstrColumns);HRESULT ( *get_CountViewTypes)(IShellNameSpace *This, int *piTypes);HRESULT ( *SetViewType)(IShellNameSpace *This, int iType);HRESULT ( *SelectedItems)(IShellNameSpace *This, IDispatch **ppid);HRESULT ( *Expand)(IShellNameSpace *This, VARIANT var, int iDepth);HRESULT ( *UnselectAll)(IShellNameSpace *This);};
struct IXMLDOMDocumentVtbl {HRESULT ( *QueryInterface)(IXMLDOMDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMDocument *This);ULONG ( *Release)(IXMLDOMDocument *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMDocument *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMDocument *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMDocument *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMDocument *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMDocument *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMDocument *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMDocument *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMDocument *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMDocument *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMDocument *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMDocument *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMDocument *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMDocument *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMDocument *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMDocument *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMDocument *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMDocument *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMDocument *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMDocument *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMDocument *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMDocument *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMDocument *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMDocument *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMDocument *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMDocument *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMDocument *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMDocument *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMDocument *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMDocument *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMDocument *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_doctype)(IXMLDOMDocument *This, IXMLDOMDocumentType **documentType);HRESULT ( *get_implementation)(IXMLDOMDocument *This, IXMLDOMImplementation **impl);HRESULT ( *get_documentElement)(IXMLDOMDocument *This, IXMLDOMElement **DOMElement);HRESULT ( *putref_documentElement)(IXMLDOMDocument *This, IXMLDOMElement *DOMElement);HRESULT ( *createElement)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMElement **element);HRESULT ( *createDocumentFragment)(IXMLDOMDocument *This, IXMLDOMDocumentFragment **docFrag);HRESULT ( *createTextNode)(IXMLDOMDocument *This, BSTR data, IXMLDOMText **text);HRESULT ( *createComment)(IXMLDOMDocument *This, BSTR data, IXMLDOMComment **comment);HRESULT ( *createCDATASection)(IXMLDOMDocument *This, BSTR data, IXMLDOMCDATASection **cdata);HRESULT ( *createProcessingInstruction)(IXMLDOMDocument *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);HRESULT ( *createAttribute)(IXMLDOMDocument *This, BSTR name, IXMLDOMAttribute **attribute);HRESULT ( *createEntityReference)(IXMLDOMDocument *This, BSTR name, IXMLDOMEntityReference **entityRef);HRESULT ( *getElementsByTagName)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT ( *createNode)(IXMLDOMDocument *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);HRESULT ( *nodeFromID)(IXMLDOMDocument *This, BSTR idString, IXMLDOMNode **node);HRESULT ( *load)(IXMLDOMDocument *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);HRESULT ( *get_readyState)(IXMLDOMDocument *This, int *value);HRESULT ( *get_parseError)(IXMLDOMDocument *This, IXMLDOMParseError **errorObj);HRESULT ( *get_url)(IXMLDOMDocument *This, BSTR *urlString);HRESULT ( *get_async)(IXMLDOMDocument *This, VARIANT_BOOL *isAsync);HRESULT ( *put_async)(IXMLDOMDocument *This, VARIANT_BOOL isAsync);HRESULT ( *abort)(IXMLDOMDocument *This);HRESULT ( *loadXML)(IXMLDOMDocument *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);HRESULT ( *save)(IXMLDOMDocument *This, VARIANT destination);HRESULT ( *get_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL *isValidating);HRESULT ( *put_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL isValidating);HRESULT ( *get_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL *isResolving);HRESULT ( *put_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL isResolving);HRESULT ( *get_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL *isPreserving);HRESULT ( *put_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL isPreserving);HRESULT ( *put_onreadystatechange)(IXMLDOMDocument *This, VARIANT readystatechangeSink);HRESULT ( *put_ondataavailable)(IXMLDOMDocument *This, VARIANT ondataavailableSink);HRESULT ( *put_ontransformnode)(IXMLDOMDocument *This, VARIANT ontransformnodeSink);};
struct IXMLDOMNotationVtbl {HRESULT ( *QueryInterface)(IXMLDOMNotation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNotation *This);ULONG ( *Release)(IXMLDOMNotation *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNotation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNotation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNotation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNotation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMNotation *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMNotation *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMNotation *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMNotation *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMNotation *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMNotation *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMNotation *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMNotation *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMNotation *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMNotation *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMNotation *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMNotation *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMNotation *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMNotation *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMNotation *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMNotation *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMNotation *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMNotation *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMNotation *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMNotation *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMNotation *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMNotation *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMNotation *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMNotation *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMNotation *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMNotation *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMNotation *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMNotation *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMNotation *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMNotation *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_publicId)(IXMLDOMNotation *This, VARIANT *publicID);HRESULT ( *get_systemId)(IXMLDOMNotation *This, VARIANT *systemID);};
struct IMsgrIMSessionVtbl {HRESULT ( *QueryInterface)(IMsgrIMSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrIMSession *This);ULONG ( *Release)(IMsgrIMSession *This);HRESULT ( *GetTypeInfoCount)(IMsgrIMSession *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrIMSession *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrIMSession *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrIMSession *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Members)(IMsgrIMSession *This, IMsgrUsers **ppUsers);HRESULT ( *get_State)(IMsgrIMSession *This, SSTATE *psState);HRESULT ( *get_Service)(IMsgrIMSession *This, IMsgrService **ppService);HRESULT ( *get_Invitees)(IMsgrIMSession *This, IMsgrUsers **ppUsers);HRESULT ( *LeaveSession)(IMsgrIMSession *This);HRESULT ( *InviteUser)(IMsgrIMSession *This, VARIANT vUser);HRESULT ( *SendText)(IMsgrIMSession *This, BSTR bstrMsgHeader, BSTR bstrMsgText, MMSGTYPE mmtType, LONG *plCookie);};
struct IXMLDOMCommentVtbl {HRESULT ( *QueryInterface)(IXMLDOMComment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMComment *This);ULONG ( *Release)(IXMLDOMComment *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMComment *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMComment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMComment *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMComment *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMComment *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMComment *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMComment *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMComment *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMComment *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMComment *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMComment *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMComment *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMComment *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMComment *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMComment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMComment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMComment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMComment *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMComment *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMComment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMComment *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMComment *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMComment *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMComment *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMComment *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMComment *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMComment *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMComment *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMComment *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMComment *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMComment *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMComment *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMComment *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMComment *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMComment *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMComment *This, BSTR data);HRESULT ( *get_length)(IXMLDOMComment *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMComment *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMComment *This, BSTR data);HRESULT ( *insertData)(IXMLDOMComment *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMComment *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMComment *This, int offset, int count, BSTR data);};
struct IXMLDOMElementVtbl {HRESULT ( *QueryInterface)(IXMLDOMElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMElement *This);ULONG ( *Release)(IXMLDOMElement *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMElement *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMElement *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMElement *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMElement *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMElement *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMElement *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMElement *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMElement *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMElement *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMElement *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMElement *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMElement *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMElement *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMElement *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMElement *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMElement *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMElement *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMElement *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMElement *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMElement *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMElement *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMElement *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMElement *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMElement *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMElement *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMElement *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMElement *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMElement *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMElement *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMElement *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_tagName)(IXMLDOMElement *This, BSTR *tagName);HRESULT ( *getAttribute)(IXMLDOMElement *This, BSTR name, VARIANT *value);HRESULT ( *setAttribute)(IXMLDOMElement *This, BSTR name, VARIANT value);HRESULT ( *removeAttribute)(IXMLDOMElement *This, BSTR name);HRESULT ( *getAttributeNode)(IXMLDOMElement *This, BSTR name, IXMLDOMAttribute **attributeNode);HRESULT ( *setAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT ( *removeAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT ( *getElementsByTagName)(IXMLDOMElement *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT ( *normalize)(IXMLDOMElement *This);};
struct IXMLDOMEntityVtbl {HRESULT ( *QueryInterface)(IXMLDOMEntity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMEntity *This);ULONG ( *Release)(IXMLDOMEntity *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMEntity *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMEntity *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMEntity *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMEntity *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMEntity *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMEntity *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMEntity *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMEntity *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMEntity *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMEntity *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMEntity *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMEntity *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMEntity *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMEntity *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMEntity *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMEntity *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMEntity *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMEntity *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMEntity *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMEntity *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMEntity *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMEntity *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMEntity *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMEntity *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMEntity *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMEntity *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMEntity *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMEntity *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMEntity *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMEntity *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMEntity *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMEntity *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMEntity *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMEntity *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_publicId)(IXMLDOMEntity *This, VARIANT *publicID);HRESULT ( *get_systemId)(IXMLDOMEntity *This, VARIANT *systemID);HRESULT ( *get_notationName)(IXMLDOMEntity *This, BSTR *name);};
struct IRadioPlayerVtbl {HRESULT ( *QueryInterface)(IRadioPlayer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRadioPlayer *This);ULONG ( *Release)(IRadioPlayer *This);HRESULT ( *GetTypeInfoCount)(IRadioPlayer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRadioPlayer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRadioPlayer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRadioPlayer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *BindRadioMemory)(IRadioPlayer *This);HRESULT ( *ReleaseRadio)(IRadioPlayer *This);HRESULT ( *RegisterEvent)(IRadioPlayer *This, BSTR bszEvent, LONG *plRegister);HRESULT ( *RegisterWindow)(IRadioPlayer *This, LONG lHWND, DWORD dwMessage, DWORD dwCodeSet, LONG *plRegister);HRESULT ( *GetSection)(IRadioPlayer *This, BSTR *bszSection);HRESULT ( *Unregister)(IRadioPlayer *This, LONG lRegister);HRESULT ( *GetInstanceCount)(IRadioPlayer *This, LONG *plInstances);HRESULT ( *Play)(IRadioPlayer *This);HRESULT ( *Stop)(IRadioPlayer *This);HRESULT ( *put_Url)(IRadioPlayer *This, BSTR wszUrl);HRESULT ( *put_Volume)(IRadioPlayer *This, LONG lVolumeSet);HRESULT ( *put_Mute)(IRadioPlayer *This, VARIANT_BOOL fMuteSet);HRESULT ( *GetStatus)(IRadioPlayer *This, LONG *plVolume, LONG *pfMute, LONG *pfPlay, BSTR *MIDL_0015, BSTR *MIDL_0016, BSTR *MIDL_0017, BSTR *MIDL_0018, BSTR *MIDL_0019, BSTR *MIDL_0020, BSTR *MIDL_0021);HRESULT ( *GetState)(IRadioPlayer *This, LONG *plOpenState, LONG *pfBuffering, LONG *plBufferingPercent, LONG *plQuality);};
struct IShellFolderVtbl {HRESULT ( *QueryInterface)(IShellFolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolder *This);ULONG ( *Release)(IShellFolder *This);HRESULT ( *ParseDisplayName)(IShellFolder *This, HWND hwnd, LPBC pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes);HRESULT ( *EnumObjects)(IShellFolder *This, HWND hwnd, SHCONTF grfFlags, IEnumIDList **ppenumIDList);HRESULT ( *BindToObject)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *BindToStorage)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *CompareIDs)(IShellFolder *This, LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);HRESULT ( *CreateViewObject)(IShellFolder *This, HWND hwndOwner,  IID * riid, void **ppv);HRESULT ( *GetAttributesOf)(IShellFolder *This, UINT cidl, LPCITEMIDLIST *apidl, SFGAOF *rgfInOut);HRESULT ( *GetUIObjectOf)(IShellFolder *This, HWND hwndOwner, UINT cidl, LPCITEMIDLIST *apidl,  IID * riid, UINT *rgfReserved, void **ppv);HRESULT ( *GetDisplayNameOf)(IShellFolder *This, LPCITEMIDLIST pidl, SHGDNF uFlags, LPSTRRET lpName);HRESULT ( *SetNameOf)(IShellFolder *This, HWND hwnd, LPCITEMIDLIST pidl, LPCOLESTR pszName, SHGDNF uFlags, LPITEMIDLIST *ppidlOut);};
struct ITIMEElementVtbl {HRESULT ( *QueryInterface)(ITIMEElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEElement *This);ULONG ( *Release)(ITIMEElement *This);HRESULT ( *GetTypeInfoCount)(ITIMEElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_accelerate)(ITIMEElement *This, VARIANT *MIDL_0014);HRESULT ( *put_accelerate)(ITIMEElement *This, VARIANT MIDL_0015);HRESULT ( *get_autoReverse)(ITIMEElement *This, VARIANT *MIDL_0016);HRESULT ( *put_autoReverse)(ITIMEElement *This, VARIANT MIDL_0017);HRESULT ( *get_begin)(ITIMEElement *This, VARIANT *time);HRESULT ( *put_begin)(ITIMEElement *This, VARIANT time);HRESULT ( *get_decelerate)(ITIMEElement *This, VARIANT *MIDL_0018);HRESULT ( *put_decelerate)(ITIMEElement *This, VARIANT MIDL_0019);HRESULT ( *get_dur)(ITIMEElement *This, VARIANT *time);HRESULT ( *put_dur)(ITIMEElement *This, VARIANT time);HRESULT ( *get_end)(ITIMEElement *This, VARIANT *time);HRESULT ( *put_end)(ITIMEElement *This, VARIANT time);HRESULT ( *get_fill)(ITIMEElement *This, BSTR *f);HRESULT ( *put_fill)(ITIMEElement *This, BSTR f);HRESULT ( *get_mute)(ITIMEElement *This, VARIANT *b);HRESULT ( *put_mute)(ITIMEElement *This, VARIANT b);HRESULT ( *get_repeatCount)(ITIMEElement *This, VARIANT *c);HRESULT ( *put_repeatCount)(ITIMEElement *This, VARIANT c);HRESULT ( *get_repeatDur)(ITIMEElement *This, VARIANT *time);HRESULT ( *put_repeatDur)(ITIMEElement *This, VARIANT time);HRESULT ( *get_restart)(ITIMEElement *This, BSTR *MIDL_0020);HRESULT ( *put_restart)(ITIMEElement *This, BSTR MIDL_0021);HRESULT ( *get_speed)(ITIMEElement *This, VARIANT *speed);HRESULT ( *put_speed)(ITIMEElement *This, VARIANT speed);HRESULT ( *get_syncBehavior)(ITIMEElement *This, BSTR *sync);HRESULT ( *put_syncBehavior)(ITIMEElement *This, BSTR sync);HRESULT ( *get_syncTolerance)(ITIMEElement *This, VARIANT *tol);HRESULT ( *put_syncTolerance)(ITIMEElement *This, VARIANT tol);HRESULT ( *get_syncMaster)(ITIMEElement *This, VARIANT *b);HRESULT ( *put_syncMaster)(ITIMEElement *This, VARIANT b);HRESULT ( *get_timeAction)(ITIMEElement *This, BSTR *time);HRESULT ( *put_timeAction)(ITIMEElement *This, BSTR time);HRESULT ( *get_timeContainer)(ITIMEElement *This, BSTR *MIDL_0022);HRESULT ( *get_volume)(ITIMEElement *This, VARIANT *val);HRESULT ( *put_volume)(ITIMEElement *This, VARIANT val);HRESULT ( *get_currTimeState)(ITIMEElement *This, ITIMEState **TimeState);HRESULT ( *get_timeAll)(ITIMEElement *This, ITIMEElementCollection **allColl);HRESULT ( *get_timeChildren)(ITIMEElement *This, ITIMEElementCollection **childColl);HRESULT ( *get_timeParent)(ITIMEElement *This, ITIMEElement **parent);HRESULT ( *get_isPaused)(ITIMEElement *This, VARIANT_BOOL *b);HRESULT ( *beginElement)(ITIMEElement *This);HRESULT ( *beginElementAt)(ITIMEElement *This, double parentTime);HRESULT ( *endElement)(ITIMEElement *This);HRESULT ( *endElementAt)(ITIMEElement *This, double parentTime);HRESULT ( *pauseElement)(ITIMEElement *This);HRESULT ( *resetElement)(ITIMEElement *This);HRESULT ( *resumeElement)(ITIMEElement *This);HRESULT ( *seekActiveTime)(ITIMEElement *This, double activeTime);HRESULT ( *seekSegmentTime)(ITIMEElement *This, double segmentTime);HRESULT ( *seekTo)(ITIMEElement *This, LONG repeatCount, double segmentTime);HRESULT ( *documentTimeToParentTime)(ITIMEElement *This, double documentTime, double *parentTime);HRESULT ( *parentTimeToDocumentTime)(ITIMEElement *This, double parentTime, double *documentTime);HRESULT ( *parentTimeToActiveTime)(ITIMEElement *This, double parentTime, double *activeTime);HRESULT ( *activeTimeToParentTime)(ITIMEElement *This, double activeTime, double *parentTime);HRESULT ( *activeTimeToSegmentTime)(ITIMEElement *This, double activeTime, double *segmentTime);HRESULT ( *segmentTimeToActiveTime)(ITIMEElement *This, double segmentTime, double *activeTime);HRESULT ( *segmentTimeToSimpleTime)(ITIMEElement *This, double segmentTime, double *simpleTime);HRESULT ( *simpleTimeToSegmentTime)(ITIMEElement *This, double simpleTime, double *segmentTime);HRESULT ( *get_endSync)(ITIMEElement *This, BSTR *es);HRESULT ( *put_endSync)(ITIMEElement *This, BSTR es);HRESULT ( *get_activeElements)(ITIMEElement *This, ITIMEActiveElementCollection **activeColl);HRESULT ( *get_hasMedia)(ITIMEElement *This, VARIANT_BOOL *flag);HRESULT ( *nextElement)(ITIMEElement *This);HRESULT ( *prevElement)(ITIMEElement *This);HRESULT ( *get_updateMode)(ITIMEElement *This, BSTR *updateMode);HRESULT ( *put_updateMode)(ITIMEElement *This, BSTR updateMode);};
struct FolderItem2Vtbl {HRESULT ( *QueryInterface)(FolderItem2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItem2 *This);ULONG ( *Release)(FolderItem2 *This);HRESULT ( *GetTypeInfoCount)(FolderItem2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItem2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItem2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItem2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItem2 *This, BSTR *pbs);HRESULT ( *put_Name)(FolderItem2 *This, BSTR bs);HRESULT ( *get_Path)(FolderItem2 *This, BSTR *pbs);HRESULT ( *get_GetLink)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_GetFolder)(FolderItem2 *This, IDispatch **ppid);HRESULT ( *get_IsLink)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFolder)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFileSystem)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_IsBrowsable)(FolderItem2 *This, VARIANT_BOOL *pb);HRESULT ( *get_ModifyDate)(FolderItem2 *This, DATE *pdt);HRESULT ( *put_ModifyDate)(FolderItem2 *This, DATE dt);HRESULT ( *get_Size)(FolderItem2 *This, LONG *pul);HRESULT ( *get_Type)(FolderItem2 *This, BSTR *pbs);HRESULT ( *Verbs)(FolderItem2 *This, FolderItemVerbs **ppfic);HRESULT ( *InvokeVerb)(FolderItem2 *This, VARIANT vVerb);HRESULT ( *InvokeVerbEx)(FolderItem2 *This, VARIANT vVerb, VARIANT vArgs);HRESULT ( *ExtendedProperty)(FolderItem2 *This, BSTR bstrPropName, VARIANT *pvRet);};
struct IXMLDOMNodeVtbl {HRESULT ( *QueryInterface)(IXMLDOMNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMNode *This);ULONG ( *Release)(IXMLDOMNode *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMNode *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMNode *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMNode *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMNode *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMNode *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMNode *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMNode *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMNode *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMNode *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMNode *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMNode *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMNode *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMNode *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMNode *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMNode *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMNode *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMNode *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMNode *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMNode *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMNode *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMNode *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMNode *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMNode *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMNode *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMNode *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMNode *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMNode *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMNode *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMNode *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMNode *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMTextVtbl {HRESULT ( *QueryInterface)(IXMLDOMText *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDOMText *This);ULONG ( *Release)(IXMLDOMText *This);HRESULT ( *GetTypeInfoCount)(IXMLDOMText *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDOMText *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDOMText *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDOMText *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXMLDOMText *This, BSTR *name);HRESULT ( *get_nodeValue)(IXMLDOMText *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXMLDOMText *This, VARIANT value);HRESULT ( *get_nodeType)(IXMLDOMText *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXMLDOMText *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXMLDOMText *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXMLDOMText *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXMLDOMText *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXMLDOMText *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXMLDOMText *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXMLDOMText *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXMLDOMText *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXMLDOMText *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXMLDOMText *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXMLDOMText *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXMLDOMText *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXMLDOMText *This, BSTR *nodeType);HRESULT ( *get_text)(IXMLDOMText *This, BSTR *text);HRESULT ( *put_text)(IXMLDOMText *This, BSTR text);HRESULT ( *get_specified)(IXMLDOMText *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXMLDOMText *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXMLDOMText *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXMLDOMText *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXMLDOMText *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXMLDOMText *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXMLDOMText *This, BSTR *xmlString);HRESULT ( *transformNode)(IXMLDOMText *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXMLDOMText *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXMLDOMText *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXMLDOMText *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXMLDOMText *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXMLDOMText *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXMLDOMText *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXMLDOMText *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *get_data)(IXMLDOMText *This, BSTR *data);HRESULT ( *put_data)(IXMLDOMText *This, BSTR data);HRESULT ( *get_length)(IXMLDOMText *This, int *dataLength);HRESULT ( *substringData)(IXMLDOMText *This, int offset, int count, BSTR *data);HRESULT ( *appendData)(IXMLDOMText *This, BSTR data);HRESULT ( *insertData)(IXMLDOMText *This, int offset, BSTR data);HRESULT ( *deleteData)(IXMLDOMText *This, int offset, int count);HRESULT ( *replaceData)(IXMLDOMText *This, int offset, int count, BSTR data);HRESULT ( *splitText)(IXMLDOMText *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXTLRuntimeVtbl {HRESULT ( *QueryInterface)(IXTLRuntime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXTLRuntime *This);ULONG ( *Release)(IXTLRuntime *This);HRESULT ( *GetTypeInfoCount)(IXTLRuntime *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXTLRuntime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXTLRuntime *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXTLRuntime *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_nodeName)(IXTLRuntime *This, BSTR *name);HRESULT ( *get_nodeValue)(IXTLRuntime *This, VARIANT *value);HRESULT ( *put_nodeValue)(IXTLRuntime *This, VARIANT value);HRESULT ( *get_nodeType)(IXTLRuntime *This, DOMNodeType *type);HRESULT ( *get_parentNode)(IXTLRuntime *This, IXMLDOMNode **parent);HRESULT ( *get_childNodes)(IXTLRuntime *This, IXMLDOMNodeList **childList);HRESULT ( *get_firstChild)(IXTLRuntime *This, IXMLDOMNode **firstChild);HRESULT ( *get_lastChild)(IXTLRuntime *This, IXMLDOMNode **lastChild);HRESULT ( *get_previousSibling)(IXTLRuntime *This, IXMLDOMNode **previousSibling);HRESULT ( *get_nextSibling)(IXTLRuntime *This, IXMLDOMNode **nextSibling);HRESULT ( *get_attributes)(IXTLRuntime *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT ( *insertBefore)(IXTLRuntime *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT ( *replaceChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT ( *removeChild)(IXTLRuntime *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT ( *appendChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT ( *hasChildNodes)(IXTLRuntime *This, VARIANT_BOOL *hasChild);HRESULT ( *get_ownerDocument)(IXTLRuntime *This, IXMLDOMDocument **DOMDocument);HRESULT ( *cloneNode)(IXTLRuntime *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT ( *get_nodeTypeString)(IXTLRuntime *This, BSTR *nodeType);HRESULT ( *get_text)(IXTLRuntime *This, BSTR *text);HRESULT ( *put_text)(IXTLRuntime *This, BSTR text);HRESULT ( *get_specified)(IXTLRuntime *This, VARIANT_BOOL *isSpecified);HRESULT ( *get_definition)(IXTLRuntime *This, IXMLDOMNode **definitionNode);HRESULT ( *get_nodeTypedValue)(IXTLRuntime *This, VARIANT *typedValue);HRESULT ( *put_nodeTypedValue)(IXTLRuntime *This, VARIANT typedValue);HRESULT ( *get_dataType)(IXTLRuntime *This, VARIANT *dataTypeName);HRESULT ( *put_dataType)(IXTLRuntime *This, BSTR dataTypeName);HRESULT ( *get_xml)(IXTLRuntime *This, BSTR *xmlString);HRESULT ( *transformNode)(IXTLRuntime *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT ( *selectNodes)(IXTLRuntime *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT ( *selectSingleNode)(IXTLRuntime *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT ( *get_parsed)(IXTLRuntime *This, VARIANT_BOOL *isParsed);HRESULT ( *get_namespaceURI)(IXTLRuntime *This, BSTR *namespaceURI);HRESULT ( *get_prefix)(IXTLRuntime *This, BSTR *prefixString);HRESULT ( *get_baseName)(IXTLRuntime *This, BSTR *nameString);HRESULT ( *transformNodeToObject)(IXTLRuntime *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT ( *uniqueID)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pID);HRESULT ( *depth)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pDepth);HRESULT ( *childNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *ancestorChildNumber)(IXTLRuntime *This, BSTR bstrNodeName, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *absoluteChildNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT ( *formatIndex)(IXTLRuntime *This, int lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT ( *formatNumber)(IXTLRuntime *This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT ( *formatDate)(IXTLRuntime *This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);HRESULT ( *formatTime)(IXTLRuntime *This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);};
struct FolderItemVtbl {HRESULT ( *QueryInterface)(FolderItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItem *This);ULONG ( *Release)(FolderItem *This);HRESULT ( *GetTypeInfoCount)(FolderItem *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItem *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItem *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItem *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItem *This, BSTR *pbs);HRESULT ( *put_Name)(FolderItem *This, BSTR bs);HRESULT ( *get_Path)(FolderItem *This, BSTR *pbs);HRESULT ( *get_GetLink)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_GetFolder)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_IsLink)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFolder)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFileSystem)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsBrowsable)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_ModifyDate)(FolderItem *This, DATE *pdt);HRESULT ( *put_ModifyDate)(FolderItem *This, DATE dt);HRESULT ( *get_Size)(FolderItem *This, LONG *pul);HRESULT ( *get_Type)(FolderItem *This, BSTR *pbs);HRESULT ( *Verbs)(FolderItem *This, FolderItemVerbs **ppfic);HRESULT ( *InvokeVerb)(FolderItem *This, VARIANT vVerb);};
struct ITIMEStateVtbl {HRESULT ( *QueryInterface)(ITIMEState *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITIMEState *This);ULONG ( *Release)(ITIMEState *This);HRESULT ( *GetTypeInfoCount)(ITIMEState *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITIMEState *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITIMEState *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITIMEState *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_activeDur)(ITIMEState *This, double *dur);HRESULT ( *get_activeTime)(ITIMEState *This, double *time);HRESULT ( *get_isActive)(ITIMEState *This, VARIANT_BOOL *active);HRESULT ( *get_isOn)(ITIMEState *This, VARIANT_BOOL *on);HRESULT ( *get_isPaused)(ITIMEState *This, VARIANT_BOOL *paused);HRESULT ( *get_isMuted)(ITIMEState *This, VARIANT_BOOL *muted);HRESULT ( *get_parentTimeBegin)(ITIMEState *This, double *time);HRESULT ( *get_parentTimeEnd)(ITIMEState *This, double *time);HRESULT ( *get_progress)(ITIMEState *This, double *progress);HRESULT ( *get_repeatCount)(ITIMEState *This, LONG *count);HRESULT ( *get_segmentDur)(ITIMEState *This, double *dur);HRESULT ( *get_segmentTime)(ITIMEState *This, double *time);HRESULT ( *get_simpleDur)(ITIMEState *This, double *dur);HRESULT ( *get_simpleTime)(ITIMEState *This, double *time);HRESULT ( *get_speed)(ITIMEState *This, float *speed);HRESULT ( *get_state)(ITIMEState *This, TimeState *timeState);HRESULT ( *get_stateString)(ITIMEState *This, BSTR *state);HRESULT ( *get_volume)(ITIMEState *This, float *vol);};
struct IMsgrUserVtbl {HRESULT ( *QueryInterface)(IMsgrUser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrUser *This);ULONG ( *Release)(IMsgrUser *This);HRESULT ( *GetTypeInfoCount)(IMsgrUser *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrUser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrUser *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrUser *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_FriendlyName)(IMsgrUser *This, BSTR bstrFriendlyName);HRESULT ( *get_FriendlyName)(IMsgrUser *This, BSTR *pbstrFriendlyName);HRESULT ( *get_EmailAddress)(IMsgrUser *This, BSTR *pbstrEmailAddress);HRESULT ( *get_State)(IMsgrUser *This, MSTATE *pmState);HRESULT ( *get_LogonName)(IMsgrUser *This, BSTR *pbstrLogonName);HRESULT ( *SendText)(IMsgrUser *This, BSTR bstrMsgHeader, BSTR bstrMsgText, MMSGTYPE mmtType, LONG *plCookie);HRESULT ( *get_Service)(IMsgrUser *This, IMsgrService **ppService);};
struct ICatAdmVtbl {HRESULT ( *QueryInterface)(ICatAdm *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatAdm *This);ULONG ( *Release)(ICatAdm *This);HRESULT ( *GetTypeInfoCount)(ICatAdm *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICatAdm *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICatAdm *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICatAdm *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ForceMasterMerge)(ICatAdm *This);HRESULT ( *AddScope)(ICatAdm *This, BSTR bstrScopeName, VARIANT_BOOL fExclude, VARIANT vtLogon, VARIANT vtPassword, IDispatch **pIDisp);HRESULT ( *RemoveScope)(ICatAdm *This, BSTR bstrScopePath);HRESULT ( *GetScopeByPath)(ICatAdm *This, BSTR bstrPath, IDispatch **pIDisp);HRESULT ( *GetScopeByAlias)(ICatAdm *This, BSTR bstrAlias, IDispatch **pIDisp);HRESULT ( *FindFirstScope)(ICatAdm *This, VARIANT_BOOL *pfFound);HRESULT ( *FindNextScope)(ICatAdm *This, VARIANT_BOOL *pfFound);HRESULT ( *GetScope)(ICatAdm *This, IDispatch **pIDisp);HRESULT ( *get_CatalogName)(ICatAdm *This, BSTR *pVal);HRESULT ( *get_CatalogLocation)(ICatAdm *This, BSTR *pVal);HRESULT ( *get_WordListCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_PersistentIndexCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_QueryCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_DocumentsToFilter)(ICatAdm *This, LONG *pVal);HRESULT ( *get_FreshTestCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_PctMergeComplete)(ICatAdm *This, LONG *pVal);HRESULT ( *get_FilteredDocumentCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_TotalDocumentCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_PendingScanCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_IndexSize)(ICatAdm *This, LONG *pVal);HRESULT ( *get_UniqueKeyCount)(ICatAdm *This, LONG *pVal);HRESULT ( *get_StateInfo)(ICatAdm *This, LONG *pVal);HRESULT ( *get_IsUpToDate)(ICatAdm *This, VARIANT_BOOL *pVal);HRESULT ( *get_DelayedFilterCount)(ICatAdm *This, LONG *pVal);HRESULT ( *StartCatalog)(ICatAdm *This, CatalogStateType *pdwOldState);HRESULT ( *StopCatalog)(ICatAdm *This, CatalogStateType *pdwOldState);HRESULT ( *PauseCatalog)(ICatAdm *This, CatalogStateType *pdwOldState);HRESULT ( *ContinueCatalog)(ICatAdm *This, CatalogStateType *pdwOldState);HRESULT ( *IsCatalogRunning)(ICatAdm *This, VARIANT_BOOL *pfIsRunning);HRESULT ( *IsCatalogPaused)(ICatAdm *This, VARIANT_BOOL *pfIsPaused);HRESULT ( *IsCatalogStopped)(ICatAdm *This, VARIANT_BOOL *pIsStopped);};
struct IRTCSessionStateChangeEvent2Vtbl {HRESULT ( *QueryInterface)(IRTCSessionStateChangeEvent2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTCSessionStateChangeEvent2 *This);ULONG ( *Release)(IRTCSessionStateChangeEvent2 *This);HRESULT ( *GetTypeInfoCount)(IRTCSessionStateChangeEvent2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRTCSessionStateChangeEvent2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRTCSessionStateChangeEvent2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRTCSessionStateChangeEvent2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Session)(IRTCSessionStateChangeEvent2 *This, IRTCSession **ppSession);HRESULT ( *get_State)(IRTCSessionStateChangeEvent2 *This, RTC_SESSION_STATE *penState);HRESULT ( *get_StatusCode)(IRTCSessionStateChangeEvent2 *This, int *plStatusCode);HRESULT ( *get_StatusText)(IRTCSessionStateChangeEvent2 *This, BSTR *pbstrStatusText);HRESULT ( *get_MediaTypes)(IRTCSessionStateChangeEvent2 *This, int *pMediaTypes);HRESULT ( *get_RemotePreferredSecurityLevel)(IRTCSessionStateChangeEvent2 *This, RTC_SECURITY_TYPE enSecurityType, RTC_SECURITY_LEVEL *penSecurityLevel);HRESULT ( *get_IsForked)(IRTCSessionStateChangeEvent2 *This, VARIANT_BOOL *pfIsForked);HRESULT ( *GetRemoteSessionDescription)(IRTCSessionStateChangeEvent2 *This, BSTR *pbstrContentType, BSTR *pbstrSessionDescription);};
struct IMsgrServiceVtbl {HRESULT ( *QueryInterface)(IMsgrService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrService *This);ULONG ( *Release)(IMsgrService *This);HRESULT ( *GetTypeInfoCount)(IMsgrService *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrService *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrService *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrService *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ServiceName)(IMsgrService *This, BSTR *pbstrServiceName);HRESULT ( *get_LogonName)(IMsgrService *This, BSTR *pbstrName);HRESULT ( *put_FriendlyName)(IMsgrService *This, BSTR bstrName);HRESULT ( *get_FriendlyName)(IMsgrService *This, BSTR *pbstrName);HRESULT ( *get_Capabilities)(IMsgrService *This, LONG *plCapabilities);HRESULT ( *get_Status)(IMsgrService *This, MSVCSTATUS *pmStatus);HRESULT ( *Logoff)(IMsgrService *This);HRESULT ( *FindUser)(IMsgrService *This, BSTR bstrFirstName, BSTR bstrLastName, BSTR bstrCity, BSTR bstrState, BSTR bstrCountry, LONG *plCookie);HRESULT ( *SendInviteMail)(IMsgrService *This, BSTR bstrEmailAddress, LONG lFindCookie, LONG lFindIndex, LONG *plCookie);HRESULT ( *RequestURL)(IMsgrService *This, MURLTYPE muType, BSTR bstrAdditionalInfo, LONG *plCookie);HRESULT ( *put_ProfileField)(IMsgrService *This, MPFLFIELD mpflField, VARIANT vFieldValue);HRESULT ( *get_ProfileField)(IMsgrService *This, MPFLFIELD mpflField, VARIANT *pvFieldValue);};
struct IWebBrowser2Vtbl {HRESULT ( *QueryInterface)(IWebBrowser2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser2 *This);ULONG ( *Release)(IWebBrowser2 *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser2 *This);HRESULT ( *GoForward)(IWebBrowser2 *This);HRESULT ( *GoHome)(IWebBrowser2 *This);HRESULT ( *GoSearch)(IWebBrowser2 *This);HRESULT ( *Navigate)(IWebBrowser2 *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser2 *This);HRESULT ( *Refresh2)(IWebBrowser2 *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser2 *This);HRESULT ( *get_Application)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser2 *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Left)(IWebBrowser2 *This, int Left);HRESULT ( *get_Top)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Top)(IWebBrowser2 *This, int Top);HRESULT ( *get_Width)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Width)(IWebBrowser2 *This, int Width);HRESULT ( *get_Height)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Height)(IWebBrowser2 *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser2 *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser2 *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowser2 *This);HRESULT ( *ClientToWindow)(IWebBrowser2 *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowser2 *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowser2 *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowser2 *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowser2 *This, int *pHWND);HRESULT ( *get_FullName)(IWebBrowser2 *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowser2 *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowser2 *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowser2 *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowser2 *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowser2 *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL bFullScreen);HRESULT ( *Navigate2)(IWebBrowser2 *This, VARIANT *URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *QueryStatusWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDF *pcmdf);HRESULT ( *ExecWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);HRESULT ( *ShowBrowserBar)(IWebBrowser2 *This, VARIANT *pvaClsid, VARIANT *pvarShow, VARIANT *pvarSize);HRESULT ( *get_ReadyState)(IWebBrowser2 *This, READYSTATE *plReadyState);HRESULT ( *get_Offline)(IWebBrowser2 *This, VARIANT_BOOL *pbOffline);HRESULT ( *put_Offline)(IWebBrowser2 *This, VARIANT_BOOL bOffline);HRESULT ( *get_Silent)(IWebBrowser2 *This, VARIANT_BOOL *pbSilent);HRESULT ( *put_Silent)(IWebBrowser2 *This, VARIANT_BOOL bSilent);HRESULT ( *get_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_Resizable)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_Resizable)(IWebBrowser2 *This, VARIANT_BOOL Value);};
struct ITypeLib2Vtbl {HRESULT ( *QueryInterface)(ITypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib2 *This);ULONG ( *Release)(ITypeLib2 *This);UINT ( *GetTypeInfoCount)(ITypeLib2 *This);HRESULT ( *GetTypeInfo)(ITypeLib2 *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib2 *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib2 *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib2 *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib2 *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib2 *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib2 *This, TLIBATTR *pTLibAttr);HRESULT ( *GetCustData)(ITypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetLibStatistics)(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);HRESULT ( *GetDocumentation2)(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeLib2 *This, CUSTDATA *pCustData);};
struct ICreateTypeInfo2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo2 *This);ULONG ( *Release)(ICreateTypeInfo2 *This);HRESULT ( *SetGuid)(ICreateTypeInfo2 *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo2 *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo2 *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo2 *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo2 *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo2 *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo2 *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo2 *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo2 *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo2 *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo2 *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo2 *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo2 *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo2 *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo2 *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo2 *This);HRESULT ( *DeleteFuncDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteFuncDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind);HRESULT ( *DeleteVarDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteVarDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid);HRESULT ( *DeleteImplType)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *SetCustData)(ICreateTypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetFuncCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetParamCustData)(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetVarCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetImplTypeCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeInfo2 *This, ULONG dwHelpStringContext);HRESULT ( *SetFuncHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *SetVarHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *Invalidate)(ICreateTypeInfo2 *This);HRESULT ( *SetName)(ICreateTypeInfo2 *This, LPOLESTR szName);};
struct IShellBrowserVtbl {HRESULT ( *QueryInterface)(IShellBrowser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellBrowser *This);ULONG ( *Release)(IShellBrowser *This);HRESULT ( *GetWindow)(IShellBrowser *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IShellBrowser *This, BOOL fEnterMode);HRESULT ( *InsertMenusSB)(IShellBrowser *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenuSB)(IShellBrowser *This, HMENU hmenuShared, HOLEMENU holemenuRes, HWND hwndActiveObject);HRESULT ( *RemoveMenusSB)(IShellBrowser *This, HMENU hmenuShared);HRESULT ( *SetStatusTextSB)(IShellBrowser *This, LPCOLESTR pszStatusText);HRESULT ( *EnableModelessSB)(IShellBrowser *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorSB)(IShellBrowser *This, MSG *pmsg, WORD wID);HRESULT ( *BrowseObject)(IShellBrowser *This, LPCITEMIDLIST pidl, UINT wFlags);HRESULT ( *GetViewStateStream)(IShellBrowser *This, DWORD grfMode, IStream **ppStrm);HRESULT ( *GetControlWindow)(IShellBrowser *This, UINT id, HWND *lphwnd);HRESULT ( *SendControlMsg)(IShellBrowser *This, UINT id, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pret);HRESULT ( *QueryActiveShellView)(IShellBrowser *This, IShellView **ppshv);HRESULT ( *OnViewWindowActive)(IShellBrowser *This, IShellView *pshv);HRESULT ( *SetToolbarItems)(IShellBrowser *This, LPTBBUTTONSB lpButtons, UINT nButtons, UINT uFlags);};
struct IActiveMovieVtbl {HRESULT ( *QueryInterface)(IActiveMovie *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveMovie *This);ULONG ( *Release)(IActiveMovie *This);HRESULT ( *GetTypeInfoCount)(IActiveMovie *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IActiveMovie *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IActiveMovie *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IActiveMovie *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AboutBox)(IActiveMovie *This);HRESULT ( *Run)(IActiveMovie *This);HRESULT ( *Pause)(IActiveMovie *This);HRESULT ( *Stop)(IActiveMovie *This);HRESULT ( *get_ImageSourceWidth)(IActiveMovie *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(IActiveMovie *This, int *pHeight);HRESULT ( *get_Author)(IActiveMovie *This, BSTR *pbstrAuthor);HRESULT ( *get_Title)(IActiveMovie *This, BSTR *pbstrTitle);HRESULT ( *get_Copyright)(IActiveMovie *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(IActiveMovie *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(IActiveMovie *This, BSTR *pbstrRating);HRESULT ( *get_FileName)(IActiveMovie *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(IActiveMovie *This, BSTR bstrFileName);HRESULT ( *get_Duration)(IActiveMovie *This, double *pValue);HRESULT ( *get_CurrentPosition)(IActiveMovie *This, double *pValue);HRESULT ( *put_CurrentPosition)(IActiveMovie *This, double Value);HRESULT ( *get_PlayCount)(IActiveMovie *This, int *pPlayCount);HRESULT ( *put_PlayCount)(IActiveMovie *This, int PlayCount);HRESULT ( *get_SelectionStart)(IActiveMovie *This, double *pValue);HRESULT ( *put_SelectionStart)(IActiveMovie *This, double Value);HRESULT ( *get_SelectionEnd)(IActiveMovie *This, double *pValue);HRESULT ( *put_SelectionEnd)(IActiveMovie *This, double Value);HRESULT ( *get_CurrentState)(IActiveMovie *This, StateConstants *pState);HRESULT ( *get_Rate)(IActiveMovie *This, double *pValue);HRESULT ( *put_Rate)(IActiveMovie *This, double Value);HRESULT ( *get_Volume)(IActiveMovie *This, int *pValue);HRESULT ( *put_Volume)(IActiveMovie *This, int Value);HRESULT ( *get_Balance)(IActiveMovie *This, int *pValue);HRESULT ( *put_Balance)(IActiveMovie *This, int Value);HRESULT ( *get_EnableContextMenu)(IActiveMovie *This, VARIANT_BOOL *pEnable);HRESULT ( *put_EnableContextMenu)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_ShowDisplay)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowDisplay)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_ShowControls)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowControls)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_ShowPositionControls)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowPositionControls)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_ShowSelectionControls)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowSelectionControls)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_ShowTracker)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowTracker)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_EnablePositionControls)(IActiveMovie *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnablePositionControls)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableSelectionControls)(IActiveMovie *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableSelectionControls)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableTracker)(IActiveMovie *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableTracker)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_AllowHideDisplay)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideDisplay)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_AllowHideControls)(IActiveMovie *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideControls)(IActiveMovie *This, VARIANT_BOOL Show);HRESULT ( *get_DisplayMode)(IActiveMovie *This, DisplayModeConstants *pValue);HRESULT ( *put_DisplayMode)(IActiveMovie *This, DisplayModeConstants Value);HRESULT ( *get_AllowChangeDisplayMode)(IActiveMovie *This, VARIANT_BOOL *fAllow);HRESULT ( *put_AllowChangeDisplayMode)(IActiveMovie *This, VARIANT_BOOL Allow);HRESULT ( *get_FilterGraph)(IActiveMovie *This, IUnknown **ppFilterGraph);HRESULT ( *put_FilterGraph)(IActiveMovie *This, IUnknown *pFilterGraph);HRESULT ( *get_FilterGraphDispatch)(IActiveMovie *This, IDispatch **pDispatch);HRESULT ( *get_DisplayForeColor)(IActiveMovie *This, OLE_COLOR *ForeColor);HRESULT ( *put_DisplayForeColor)(IActiveMovie *This, OLE_COLOR ForeColor);HRESULT ( *get_DisplayBackColor)(IActiveMovie *This, OLE_COLOR *BackColor);HRESULT ( *put_DisplayBackColor)(IActiveMovie *This, OLE_COLOR BackColor);HRESULT ( *get_MovieWindowSize)(IActiveMovie *This, WindowSizeConstants *WindowSize);HRESULT ( *put_MovieWindowSize)(IActiveMovie *This, WindowSizeConstants WindowSize);HRESULT ( *get_FullScreenMode)(IActiveMovie *This, VARIANT_BOOL *pEnable);HRESULT ( *put_FullScreenMode)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoStart)(IActiveMovie *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoStart)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoRewind)(IActiveMovie *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoRewind)(IActiveMovie *This, VARIANT_BOOL Enable);HRESULT ( *get_hWnd)(IActiveMovie *This, int *hWnd);HRESULT ( *get_Appearance)(IActiveMovie *This, AppearanceConstants *pAppearance);HRESULT ( *put_Appearance)(IActiveMovie *This, AppearanceConstants Appearance);HRESULT ( *get_BorderStyle)(IActiveMovie *This, BorderStyleConstants *pBorderStyle);HRESULT ( *put_BorderStyle)(IActiveMovie *This, BorderStyleConstants BorderStyle);HRESULT ( *get_Enabled)(IActiveMovie *This, VARIANT_BOOL *pEnabled);HRESULT ( *put_Enabled)(IActiveMovie *This, VARIANT_BOOL Enabled);HRESULT ( *get_Info)(IActiveMovie *This, int *ppInfo);};
struct ITypeInfoVtbl {HRESULT ( *QueryInterface)(ITypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo *This);ULONG ( *Release)(ITypeInfo *This);HRESULT ( *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);};
struct IActiveMovie2Vtbl {HRESULT ( *QueryInterface)(IActiveMovie2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveMovie2 *This);ULONG ( *Release)(IActiveMovie2 *This);HRESULT ( *GetTypeInfoCount)(IActiveMovie2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IActiveMovie2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IActiveMovie2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IActiveMovie2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AboutBox)(IActiveMovie2 *This);HRESULT ( *Run)(IActiveMovie2 *This);HRESULT ( *Pause)(IActiveMovie2 *This);HRESULT ( *Stop)(IActiveMovie2 *This);HRESULT ( *get_ImageSourceWidth)(IActiveMovie2 *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(IActiveMovie2 *This, int *pHeight);HRESULT ( *get_Author)(IActiveMovie2 *This, BSTR *pbstrAuthor);HRESULT ( *get_Title)(IActiveMovie2 *This, BSTR *pbstrTitle);HRESULT ( *get_Copyright)(IActiveMovie2 *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(IActiveMovie2 *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(IActiveMovie2 *This, BSTR *pbstrRating);HRESULT ( *get_FileName)(IActiveMovie2 *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(IActiveMovie2 *This, BSTR bstrFileName);HRESULT ( *get_Duration)(IActiveMovie2 *This, double *pValue);HRESULT ( *get_CurrentPosition)(IActiveMovie2 *This, double *pValue);HRESULT ( *put_CurrentPosition)(IActiveMovie2 *This, double Value);HRESULT ( *get_PlayCount)(IActiveMovie2 *This, int *pPlayCount);HRESULT ( *put_PlayCount)(IActiveMovie2 *This, int PlayCount);HRESULT ( *get_SelectionStart)(IActiveMovie2 *This, double *pValue);HRESULT ( *put_SelectionStart)(IActiveMovie2 *This, double Value);HRESULT ( *get_SelectionEnd)(IActiveMovie2 *This, double *pValue);HRESULT ( *put_SelectionEnd)(IActiveMovie2 *This, double Value);HRESULT ( *get_CurrentState)(IActiveMovie2 *This, StateConstants *pState);HRESULT ( *get_Rate)(IActiveMovie2 *This, double *pValue);HRESULT ( *put_Rate)(IActiveMovie2 *This, double Value);HRESULT ( *get_Volume)(IActiveMovie2 *This, int *pValue);HRESULT ( *put_Volume)(IActiveMovie2 *This, int Value);HRESULT ( *get_Balance)(IActiveMovie2 *This, int *pValue);HRESULT ( *put_Balance)(IActiveMovie2 *This, int Value);HRESULT ( *get_EnableContextMenu)(IActiveMovie2 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_EnableContextMenu)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_ShowDisplay)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowDisplay)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowControls)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowControls)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowPositionControls)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowPositionControls)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowSelectionControls)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowSelectionControls)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowTracker)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowTracker)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_EnablePositionControls)(IActiveMovie2 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnablePositionControls)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableSelectionControls)(IActiveMovie2 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableSelectionControls)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableTracker)(IActiveMovie2 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableTracker)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_AllowHideDisplay)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideDisplay)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_AllowHideControls)(IActiveMovie2 *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideControls)(IActiveMovie2 *This, VARIANT_BOOL Show);HRESULT ( *get_DisplayMode)(IActiveMovie2 *This, DisplayModeConstants *pValue);HRESULT ( *put_DisplayMode)(IActiveMovie2 *This, DisplayModeConstants Value);HRESULT ( *get_AllowChangeDisplayMode)(IActiveMovie2 *This, VARIANT_BOOL *fAllow);HRESULT ( *put_AllowChangeDisplayMode)(IActiveMovie2 *This, VARIANT_BOOL Allow);HRESULT ( *get_FilterGraph)(IActiveMovie2 *This, IUnknown **ppFilterGraph);HRESULT ( *put_FilterGraph)(IActiveMovie2 *This, IUnknown *pFilterGraph);HRESULT ( *get_FilterGraphDispatch)(IActiveMovie2 *This, IDispatch **pDispatch);HRESULT ( *get_DisplayForeColor)(IActiveMovie2 *This, OLE_COLOR *ForeColor);HRESULT ( *put_DisplayForeColor)(IActiveMovie2 *This, OLE_COLOR ForeColor);HRESULT ( *get_DisplayBackColor)(IActiveMovie2 *This, OLE_COLOR *BackColor);HRESULT ( *put_DisplayBackColor)(IActiveMovie2 *This, OLE_COLOR BackColor);HRESULT ( *get_MovieWindowSize)(IActiveMovie2 *This, WindowSizeConstants *WindowSize);HRESULT ( *put_MovieWindowSize)(IActiveMovie2 *This, WindowSizeConstants WindowSize);HRESULT ( *get_FullScreenMode)(IActiveMovie2 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_FullScreenMode)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoStart)(IActiveMovie2 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoStart)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoRewind)(IActiveMovie2 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoRewind)(IActiveMovie2 *This, VARIANT_BOOL Enable);HRESULT ( *get_hWnd)(IActiveMovie2 *This, int *hWnd);HRESULT ( *get_Appearance)(IActiveMovie2 *This, AppearanceConstants *pAppearance);HRESULT ( *put_Appearance)(IActiveMovie2 *This, AppearanceConstants Appearance);HRESULT ( *get_BorderStyle)(IActiveMovie2 *This, BorderStyleConstants *pBorderStyle);HRESULT ( *put_BorderStyle)(IActiveMovie2 *This, BorderStyleConstants BorderStyle);HRESULT ( *get_Enabled)(IActiveMovie2 *This, VARIANT_BOOL *pEnabled);HRESULT ( *put_Enabled)(IActiveMovie2 *This, VARIANT_BOOL Enabled);HRESULT ( *get_Info)(IActiveMovie2 *This, int *ppInfo);HRESULT ( *IsSoundCardEnabled)(IActiveMovie2 *This, VARIANT_BOOL *pbSoundCard);HRESULT ( *get_ReadyState)(IActiveMovie2 *This, ReadyStateConstants *pValue);};
struct IActiveMovie3Vtbl {HRESULT ( *QueryInterface)(IActiveMovie3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveMovie3 *This);ULONG ( *Release)(IActiveMovie3 *This);HRESULT ( *GetTypeInfoCount)(IActiveMovie3 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IActiveMovie3 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IActiveMovie3 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IActiveMovie3 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AboutBox)(IActiveMovie3 *This);HRESULT ( *Run)(IActiveMovie3 *This);HRESULT ( *Pause)(IActiveMovie3 *This);HRESULT ( *Stop)(IActiveMovie3 *This);HRESULT ( *get_ImageSourceWidth)(IActiveMovie3 *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(IActiveMovie3 *This, int *pHeight);HRESULT ( *get_Author)(IActiveMovie3 *This, BSTR *pbstrAuthor);HRESULT ( *get_Title)(IActiveMovie3 *This, BSTR *pbstrTitle);HRESULT ( *get_Copyright)(IActiveMovie3 *This, BSTR *pbstrCopyright);HRESULT ( *get_Description)(IActiveMovie3 *This, BSTR *pbstrDescription);HRESULT ( *get_Rating)(IActiveMovie3 *This, BSTR *pbstrRating);HRESULT ( *get_FileName)(IActiveMovie3 *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(IActiveMovie3 *This, BSTR bstrFileName);HRESULT ( *get_Duration)(IActiveMovie3 *This, double *pValue);HRESULT ( *get_CurrentPosition)(IActiveMovie3 *This, double *pValue);HRESULT ( *put_CurrentPosition)(IActiveMovie3 *This, double Value);HRESULT ( *get_PlayCount)(IActiveMovie3 *This, int *pPlayCount);HRESULT ( *put_PlayCount)(IActiveMovie3 *This, int PlayCount);HRESULT ( *get_SelectionStart)(IActiveMovie3 *This, double *pValue);HRESULT ( *put_SelectionStart)(IActiveMovie3 *This, double Value);HRESULT ( *get_SelectionEnd)(IActiveMovie3 *This, double *pValue);HRESULT ( *put_SelectionEnd)(IActiveMovie3 *This, double Value);HRESULT ( *get_CurrentState)(IActiveMovie3 *This, StateConstants *pState);HRESULT ( *get_Rate)(IActiveMovie3 *This, double *pValue);HRESULT ( *put_Rate)(IActiveMovie3 *This, double Value);HRESULT ( *get_Volume)(IActiveMovie3 *This, int *pValue);HRESULT ( *put_Volume)(IActiveMovie3 *This, int Value);HRESULT ( *get_Balance)(IActiveMovie3 *This, int *pValue);HRESULT ( *put_Balance)(IActiveMovie3 *This, int Value);HRESULT ( *get_EnableContextMenu)(IActiveMovie3 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_EnableContextMenu)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_ShowDisplay)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowDisplay)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowControls)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowControls)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowPositionControls)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowPositionControls)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowSelectionControls)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowSelectionControls)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowTracker)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowTracker)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_EnablePositionControls)(IActiveMovie3 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnablePositionControls)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableSelectionControls)(IActiveMovie3 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableSelectionControls)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableTracker)(IActiveMovie3 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableTracker)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_AllowHideDisplay)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideDisplay)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_AllowHideControls)(IActiveMovie3 *This, VARIANT_BOOL *Show);HRESULT ( *put_AllowHideControls)(IActiveMovie3 *This, VARIANT_BOOL Show);HRESULT ( *get_DisplayMode)(IActiveMovie3 *This, DisplayModeConstants *pValue);HRESULT ( *put_DisplayMode)(IActiveMovie3 *This, DisplayModeConstants Value);HRESULT ( *get_AllowChangeDisplayMode)(IActiveMovie3 *This, VARIANT_BOOL *fAllow);HRESULT ( *put_AllowChangeDisplayMode)(IActiveMovie3 *This, VARIANT_BOOL Allow);HRESULT ( *get_FilterGraph)(IActiveMovie3 *This, IUnknown **ppFilterGraph);HRESULT ( *put_FilterGraph)(IActiveMovie3 *This, IUnknown *pFilterGraph);HRESULT ( *get_FilterGraphDispatch)(IActiveMovie3 *This, IDispatch **pDispatch);HRESULT ( *get_DisplayForeColor)(IActiveMovie3 *This, OLE_COLOR *ForeColor);HRESULT ( *put_DisplayForeColor)(IActiveMovie3 *This, OLE_COLOR ForeColor);HRESULT ( *get_DisplayBackColor)(IActiveMovie3 *This, OLE_COLOR *BackColor);HRESULT ( *put_DisplayBackColor)(IActiveMovie3 *This, OLE_COLOR BackColor);HRESULT ( *get_MovieWindowSize)(IActiveMovie3 *This, WindowSizeConstants *WindowSize);HRESULT ( *put_MovieWindowSize)(IActiveMovie3 *This, WindowSizeConstants WindowSize);HRESULT ( *get_FullScreenMode)(IActiveMovie3 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_FullScreenMode)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoStart)(IActiveMovie3 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoStart)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_AutoRewind)(IActiveMovie3 *This, VARIANT_BOOL *pEnable);HRESULT ( *put_AutoRewind)(IActiveMovie3 *This, VARIANT_BOOL Enable);HRESULT ( *get_hWnd)(IActiveMovie3 *This, int *hWnd);HRESULT ( *get_Appearance)(IActiveMovie3 *This, AppearanceConstants *pAppearance);HRESULT ( *put_Appearance)(IActiveMovie3 *This, AppearanceConstants Appearance);HRESULT ( *get_BorderStyle)(IActiveMovie3 *This, BorderStyleConstants *pBorderStyle);HRESULT ( *put_BorderStyle)(IActiveMovie3 *This, BorderStyleConstants BorderStyle);HRESULT ( *get_Enabled)(IActiveMovie3 *This, VARIANT_BOOL *pEnabled);HRESULT ( *put_Enabled)(IActiveMovie3 *This, VARIANT_BOOL Enabled);HRESULT ( *get_Info)(IActiveMovie3 *This, int *ppInfo);HRESULT ( *IsSoundCardEnabled)(IActiveMovie3 *This, VARIANT_BOOL *pbSoundCard);HRESULT ( *get_ReadyState)(IActiveMovie3 *This, ReadyStateConstants *pValue);HRESULT ( *get_MediaPlayer)(IActiveMovie3 *This, IDispatch **ppDispatch);};
struct IMsgrObjectVtbl {HRESULT ( *QueryInterface)(IMsgrObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrObject *This);ULONG ( *Release)(IMsgrObject *This);HRESULT ( *GetTypeInfoCount)(IMsgrObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreateUser)(IMsgrObject *This, BSTR bstrLogonName, IMsgrService *pService, IMsgrUser **ppUser);HRESULT ( *Logon)(IMsgrObject *This, BSTR bstrUser, BSTR bstrPassword, IMsgrService *pService);HRESULT ( *Logoff)(IMsgrObject *This);HRESULT ( *get_List)(IMsgrObject *This, MLIST mList, IMsgrUsers **ppUsers);HRESULT ( *get_LocalLogonName)(IMsgrObject *This, BSTR *pbstrName);HRESULT ( *get_LocalFriendlyName)(IMsgrObject *This, BSTR *pbstrName);HRESULT ( *put_LocalState)(IMsgrObject *This, MSTATE mState);HRESULT ( *get_LocalState)(IMsgrObject *This, MSTATE *pmState);HRESULT ( *put_MessagePrivacy)(IMsgrObject *This, MMSGPRIVACY mmpSetting);HRESULT ( *get_MessagePrivacy)(IMsgrObject *This, MMSGPRIVACY *pmmpSetting);HRESULT ( *put_Prompt)(IMsgrObject *This, MPROMPT mpSetting);HRESULT ( *get_Prompt)(IMsgrObject *This, MPROMPT *pmpSetting);HRESULT ( *SendAppInvite)(IMsgrObject *This, IMsgrUser *pUser, LONG lCookie, BSTR bstrAppGUID, BSTR bstrAppName, BSTR bstrAppURL, MMSGTYPE mmtType, LONG *plCookie);HRESULT ( *SendAppInviteAccept)(IMsgrObject *This, IMsgrUser *pUser, LONG lCookie, MMSGTYPE mmtType, LONG *plCookie);HRESULT ( *SendAppInviteCancel)(IMsgrObject *This, IMsgrUser *pUser, LONG lCookie, LONG hrReason, MMSGTYPE mmtType, LONG *plCookie);HRESULT ( *put_LocalOption)(IMsgrObject *This, MLOCALOPTION option, VARIANT vSetting);HRESULT ( *get_LocalOption)(IMsgrObject *This, MLOCALOPTION option, VARIANT *pvSetting);HRESULT ( *FindUser)(IMsgrObject *This, BSTR bstrFirstName, BSTR bstrLastName, BSTR bstrCity, BSTR bstrState, BSTR bstrCountry, LONG *plCookie);HRESULT ( *SendInviteMail)(IMsgrObject *This, BSTR bstrEmailAddress, LONG lFindCookie, LONG lFindIndex, LONG *plCookie);HRESULT ( *RequestURL)(IMsgrObject *This, MURLTYPE muType, BSTR bstrAdditionalInfo, LONG *plCookie);HRESULT ( *get_IMSessions)(IMsgrObject *This, IMsgrIMSessions **ppIMSessions);HRESULT ( *CreateIMSession)(IMsgrObject *This, VARIANT vUser, IMsgrIMSession **ppIMSession);HRESULT ( *SessionRequestAccept)(IMsgrObject *This, IMsgrIMSession *pIMsgrIMSession, int hrReason);HRESULT ( *SessionRequestCancel)(IMsgrObject *This, IMsgrIMSession *pIMsgrIMSession, int hrReason);HRESULT ( *get_Services)(IMsgrObject *This, IMsgrServices **ppServices);};
struct IMsgrSPVtbl {HRESULT ( *QueryInterface)(IMsgrSP *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMsgrSP *This);ULONG ( *Release)(IMsgrSP *This);HRESULT ( *GetTypeInfoCount)(IMsgrSP *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMsgrSP *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMsgrSP *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMsgrSP *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ServiceName)(IMsgrSP *This, BSTR *pbstrServiceName);HRESULT ( *get_LogonName)(IMsgrSP *This, BSTR *pbstrName);HRESULT ( *put_FriendlyName)(IMsgrSP *This, BSTR bstrName);HRESULT ( *get_FriendlyName)(IMsgrSP *This, BSTR *pbstrName);HRESULT ( *get_Capabilities)(IMsgrSP *This, LONG *plCapabilities);HRESULT ( *get_Status)(IMsgrSP *This, MSVCSTATUS *pmStatus);HRESULT ( *Logoff)(IMsgrSP *This);HRESULT ( *FindUser)(IMsgrSP *This, BSTR bstrFirstName, BSTR bstrLastName, BSTR bstrCity, BSTR bstrState, BSTR bstrCountry, LONG *plCookie);HRESULT ( *SendInviteMail)(IMsgrSP *This, BSTR bstrEmailAddress, LONG lFindCookie, LONG lFindIndex, LONG *plCookie);HRESULT ( *RequestURL)(IMsgrSP *This, MURLTYPE muType, BSTR bstrAdditionalInfo, LONG *plCookie);HRESULT ( *put_ProfileField)(IMsgrSP *This, MPFLFIELD mpflField, VARIANT vFieldValue);HRESULT ( *get_ProfileField)(IMsgrSP *This, MPFLFIELD mpflField, VARIANT *pvFieldValue);HRESULT ( *Logon)(IMsgrSP *This, BSTR bstrUser, BSTR bstrPassword);HRESULT ( *CreateUser)(IMsgrSP *This, BSTR bstrLogonName, IMsgrUser **ppUser);HRESULT ( *get_List)(IMsgrSP *This, MLIST mList, IMsgrUsers **ppUsers);HRESULT ( *put_MessagePrivacy)(IMsgrSP *This, MMSGPRIVACY mmpSetting);HRESULT ( *get_MessagePrivacy)(IMsgrSP *This, MMSGPRIVACY *pmmpSetting);HRESULT ( *put_Prompt)(IMsgrSP *This, MPROMPT mpSetting);HRESULT ( *get_Prompt)(IMsgrSP *This, MPROMPT *pmpSetting);HRESULT ( *put_LocalState)(IMsgrSP *This, MSTATE mState);HRESULT ( *get_LocalState)(IMsgrSP *This, MSTATE *pmState);HRESULT ( *AddBuddy)(IMsgrSP *This, IMsgrUser *pBuddy, MLIST mList);HRESULT ( *RemoveBuddy)(IMsgrSP *This, IMsgrUser *pBuddy, MLIST mList);HRESULT ( *CreateIMSession)(IMsgrSP *This, IMsgrUser *pUser, IMsgrIMSession **ppIMSession);HRESULT ( *get_IMSessions)(IMsgrSP *This, IMsgrIMSessions **ppIMSessions);};
struct IShellFolder2Vtbl {HRESULT ( *QueryInterface)(IShellFolder2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolder2 *This);ULONG ( *Release)(IShellFolder2 *This);HRESULT ( *ParseDisplayName)(IShellFolder2 *This, HWND hwnd, LPBC pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes);HRESULT ( *EnumObjects)(IShellFolder2 *This, HWND hwnd, SHCONTF grfFlags, IEnumIDList **ppenumIDList);HRESULT ( *BindToObject)(IShellFolder2 *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *BindToStorage)(IShellFolder2 *This, LPCITEMIDLIST pidl, LPBC pbc,  IID * riid, void **ppv);HRESULT ( *CompareIDs)(IShellFolder2 *This, LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);HRESULT ( *CreateViewObject)(IShellFolder2 *This, HWND hwndOwner,  IID * riid, void **ppv);HRESULT ( *GetAttributesOf)(IShellFolder2 *This, UINT cidl, LPCITEMIDLIST *apidl, SFGAOF *rgfInOut);HRESULT ( *GetUIObjectOf)(IShellFolder2 *This, HWND hwndOwner, UINT cidl, LPCITEMIDLIST *apidl,  IID * riid, UINT *rgfReserved, void **ppv);HRESULT ( *GetDisplayNameOf)(IShellFolder2 *This, LPCITEMIDLIST pidl, SHGDNF uFlags, LPSTRRET lpName);HRESULT ( *SetNameOf)(IShellFolder2 *This, HWND hwnd, LPCITEMIDLIST pidl, LPCOLESTR pszName, SHGDNF uFlags, LPITEMIDLIST *ppidlOut);HRESULT ( *GetDefaultSearchGUID)(IShellFolder2 *This, GUID *pguid);HRESULT ( *EnumSearches)(IShellFolder2 *This, IEnumExtraSearch **ppenum);HRESULT ( *GetDefaultColumn)(IShellFolder2 *This, DWORD dwRes, ULONG *pSort, ULONG *pDisplay);HRESULT ( *GetDefaultColumnState)(IShellFolder2 *This, UINT iColumn, SHCOLSTATEF *pcsFlags);HRESULT ( *GetDetailsEx)(IShellFolder2 *This, LPCITEMIDLIST pidl,  SHCOLUMNID *pscid, VARIANT *pv);HRESULT ( *GetDetailsOf)(IShellFolder2 *This, LPCITEMIDLIST pidl, UINT iColumn, SHELLDETAILS *psd);HRESULT ( *MapColumnToSCID)(IShellFolder2 *This, UINT iColumn, SHCOLUMNID *pscid);};
struct IMediaPlayerVtbl {HRESULT ( *QueryInterface)(IMediaPlayer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPlayer *This);ULONG ( *Release)(IMediaPlayer *This);HRESULT ( *GetTypeInfoCount)(IMediaPlayer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaPlayer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaPlayer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaPlayer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_CurrentPosition)(IMediaPlayer *This, double *pCurrentPosition);HRESULT ( *put_CurrentPosition)(IMediaPlayer *This, double CurrentPosition);HRESULT ( *get_Duration)(IMediaPlayer *This, double *pDuration);HRESULT ( *get_ImageSourceWidth)(IMediaPlayer *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(IMediaPlayer *This, int *pHeight);HRESULT ( *get_MarkerCount)(IMediaPlayer *This, int *pMarkerCount);HRESULT ( *get_CanScan)(IMediaPlayer *This, VARIANT_BOOL *pCanScan);HRESULT ( *get_CanSeek)(IMediaPlayer *This, VARIANT_BOOL *pCanSeek);HRESULT ( *get_CanSeekToMarkers)(IMediaPlayer *This, VARIANT_BOOL *pCanSeekToMarkers);HRESULT ( *get_CurrentMarker)(IMediaPlayer *This, int *pCurrentMarker);HRESULT ( *put_CurrentMarker)(IMediaPlayer *This, int CurrentMarker);HRESULT ( *get_FileName)(IMediaPlayer *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(IMediaPlayer *This, BSTR bstrFileName);HRESULT ( *get_SourceLink)(IMediaPlayer *This, BSTR *pbstrSourceLink);HRESULT ( *get_CreationDate)(IMediaPlayer *This, DATE *pCreationDate);HRESULT ( *get_ErrorCorrection)(IMediaPlayer *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_Bandwidth)(IMediaPlayer *This, int *pBandwidth);HRESULT ( *get_SourceProtocol)(IMediaPlayer *This, int *pSourceProtocol);HRESULT ( *get_ReceivedPackets)(IMediaPlayer *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(IMediaPlayer *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(IMediaPlayer *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(IMediaPlayer *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(IMediaPlayer *This, int *pBufferingCount);HRESULT ( *get_IsBroadcast)(IMediaPlayer *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_BufferingProgress)(IMediaPlayer *This, int *pBufferingProgress);HRESULT ( *get_ChannelName)(IMediaPlayer *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(IMediaPlayer *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(IMediaPlayer *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(IMediaPlayer *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(IMediaPlayer *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(IMediaPlayer *This, BSTR *pbstrContactEmail);HRESULT ( *get_BufferingTime)(IMediaPlayer *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(IMediaPlayer *This, double BufferingTime);HRESULT ( *get_AutoStart)(IMediaPlayer *This, VARIANT_BOOL *pAutoStart);HRESULT ( *put_AutoStart)(IMediaPlayer *This, VARIANT_BOOL AutoStart);HRESULT ( *get_AutoRewind)(IMediaPlayer *This, VARIANT_BOOL *pAutoRewind);HRESULT ( *put_AutoRewind)(IMediaPlayer *This, VARIANT_BOOL AutoRewind);HRESULT ( *get_Rate)(IMediaPlayer *This, double *pRate);HRESULT ( *put_Rate)(IMediaPlayer *This, double Rate);HRESULT ( *get_SendKeyboardEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendKeyboardEvents);HRESULT ( *put_SendKeyboardEvents)(IMediaPlayer *This, VARIANT_BOOL SendKeyboardEvents);HRESULT ( *get_SendMouseClickEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendMouseClickEvents);HRESULT ( *put_SendMouseClickEvents)(IMediaPlayer *This, VARIANT_BOOL SendMouseClickEvents);HRESULT ( *get_SendMouseMoveEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendMouseMoveEvents);HRESULT ( *put_SendMouseMoveEvents)(IMediaPlayer *This, VARIANT_BOOL SendMouseMoveEvents);HRESULT ( *get_PlayCount)(IMediaPlayer *This, int *pPlayCount);HRESULT ( *put_PlayCount)(IMediaPlayer *This, int PlayCount);HRESULT ( *get_ClickToPlay)(IMediaPlayer *This, VARIANT_BOOL *pClickToPlay);HRESULT ( *put_ClickToPlay)(IMediaPlayer *This, VARIANT_BOOL ClickToPlay);HRESULT ( *get_AllowScan)(IMediaPlayer *This, VARIANT_BOOL *pAllowScan);HRESULT ( *put_AllowScan)(IMediaPlayer *This, VARIANT_BOOL AllowScan);HRESULT ( *get_EnableContextMenu)(IMediaPlayer *This, VARIANT_BOOL *pEnableContextMenu);HRESULT ( *put_EnableContextMenu)(IMediaPlayer *This, VARIANT_BOOL EnableContextMenu);HRESULT ( *get_CursorType)(IMediaPlayer *This, int *pCursorType);HRESULT ( *put_CursorType)(IMediaPlayer *This, int CursorType);HRESULT ( *get_CodecCount)(IMediaPlayer *This, int *pCodecCount);HRESULT ( *get_AllowChangeDisplaySize)(IMediaPlayer *This, VARIANT_BOOL *pAllowChangeDisplaySize);HRESULT ( *put_AllowChangeDisplaySize)(IMediaPlayer *This, VARIANT_BOOL AllowChangeDisplaySize);HRESULT ( *get_IsDurationValid)(IMediaPlayer *This, VARIANT_BOOL *pIsDurationValid);HRESULT ( *get_OpenState)(IMediaPlayer *This, int *pOpenState);HRESULT ( *get_SendOpenStateChangeEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendOpenStateChangeEvents);HRESULT ( *put_SendOpenStateChangeEvents)(IMediaPlayer *This, VARIANT_BOOL SendOpenStateChangeEvents);HRESULT ( *get_SendWarningEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendWarningEvents);HRESULT ( *put_SendWarningEvents)(IMediaPlayer *This, VARIANT_BOOL SendWarningEvents);HRESULT ( *get_SendErrorEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendErrorEvents);HRESULT ( *put_SendErrorEvents)(IMediaPlayer *This, VARIANT_BOOL SendErrorEvents);HRESULT ( *get_PlayState)(IMediaPlayer *This, MPPlayStateConstants *pPlayState);HRESULT ( *get_SendPlayStateChangeEvents)(IMediaPlayer *This, VARIANT_BOOL *pSendPlayStateChangeEvents);HRESULT ( *put_SendPlayStateChangeEvents)(IMediaPlayer *This, VARIANT_BOOL SendPlayStateChangeEvents);HRESULT ( *get_DisplaySize)(IMediaPlayer *This, MPDisplaySizeConstants *pDisplaySize);HRESULT ( *put_DisplaySize)(IMediaPlayer *This, MPDisplaySizeConstants DisplaySize);HRESULT ( *get_InvokeURLs)(IMediaPlayer *This, VARIANT_BOOL *pInvokeURLs);HRESULT ( *put_InvokeURLs)(IMediaPlayer *This, VARIANT_BOOL InvokeURLs);HRESULT ( *get_BaseURL)(IMediaPlayer *This, BSTR *pbstrBaseURL);HRESULT ( *put_BaseURL)(IMediaPlayer *This, BSTR bstrBaseURL);HRESULT ( *get_DefaultFrame)(IMediaPlayer *This, BSTR *pbstrDefaultFrame);HRESULT ( *put_DefaultFrame)(IMediaPlayer *This, BSTR bstrDefaultFrame);HRESULT ( *get_HasError)(IMediaPlayer *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(IMediaPlayer *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(IMediaPlayer *This, int *pErrorCode);HRESULT ( *get_AnimationAtStart)(IMediaPlayer *This, VARIANT_BOOL *pAnimationAtStart);HRESULT ( *put_AnimationAtStart)(IMediaPlayer *This, VARIANT_BOOL AnimationAtStart);HRESULT ( *get_TransparentAtStart)(IMediaPlayer *This, VARIANT_BOOL *pTransparentAtStart);HRESULT ( *put_TransparentAtStart)(IMediaPlayer *This, VARIANT_BOOL TransparentAtStart);HRESULT ( *get_Volume)(IMediaPlayer *This, int *pVolume);HRESULT ( *put_Volume)(IMediaPlayer *This, int Volume);HRESULT ( *get_Balance)(IMediaPlayer *This, int *pBalance);HRESULT ( *put_Balance)(IMediaPlayer *This, int Balance);HRESULT ( *get_ReadyState)(IMediaPlayer *This, MPReadyStateConstants *pValue);HRESULT ( *get_SelectionStart)(IMediaPlayer *This, double *pValue);HRESULT ( *put_SelectionStart)(IMediaPlayer *This, double Value);HRESULT ( *get_SelectionEnd)(IMediaPlayer *This, double *pValue);HRESULT ( *put_SelectionEnd)(IMediaPlayer *This, double Value);HRESULT ( *get_ShowDisplay)(IMediaPlayer *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowDisplay)(IMediaPlayer *This, VARIANT_BOOL Show);HRESULT ( *get_ShowControls)(IMediaPlayer *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowControls)(IMediaPlayer *This, VARIANT_BOOL Show);HRESULT ( *get_ShowPositionControls)(IMediaPlayer *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowPositionControls)(IMediaPlayer *This, VARIANT_BOOL Show);HRESULT ( *get_ShowTracker)(IMediaPlayer *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowTracker)(IMediaPlayer *This, VARIANT_BOOL Show);HRESULT ( *get_EnablePositionControls)(IMediaPlayer *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnablePositionControls)(IMediaPlayer *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableTracker)(IMediaPlayer *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableTracker)(IMediaPlayer *This, VARIANT_BOOL Enable);HRESULT ( *get_Enabled)(IMediaPlayer *This, VARIANT_BOOL *pEnabled);HRESULT ( *put_Enabled)(IMediaPlayer *This, VARIANT_BOOL Enabled);HRESULT ( *get_DisplayForeColor)(IMediaPlayer *This, VB_OLE_COLOR *ForeColor);HRESULT ( *put_DisplayForeColor)(IMediaPlayer *This, VB_OLE_COLOR ForeColor);HRESULT ( *get_DisplayBackColor)(IMediaPlayer *This, VB_OLE_COLOR *BackColor);HRESULT ( *put_DisplayBackColor)(IMediaPlayer *This, VB_OLE_COLOR BackColor);HRESULT ( *get_DisplayMode)(IMediaPlayer *This, MPDisplayModeConstants *pValue);HRESULT ( *put_DisplayMode)(IMediaPlayer *This, MPDisplayModeConstants Value);HRESULT ( *get_VideoBorder3D)(IMediaPlayer *This, VARIANT_BOOL *pVideoBorderWidth);HRESULT ( *put_VideoBorder3D)(IMediaPlayer *This, VARIANT_BOOL VideoBorderWidth);HRESULT ( *get_VideoBorderWidth)(IMediaPlayer *This, int *pVideoBorderWidth);HRESULT ( *put_VideoBorderWidth)(IMediaPlayer *This, int VideoBorderWidth);HRESULT ( *get_VideoBorderColor)(IMediaPlayer *This, VB_OLE_COLOR *pVideoBorderWidth);HRESULT ( *put_VideoBorderColor)(IMediaPlayer *This, VB_OLE_COLOR VideoBorderColor);HRESULT ( *get_ShowGotoBar)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowGotoBar)(IMediaPlayer *This, VARIANT_BOOL vbool);HRESULT ( *get_ShowStatusBar)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowStatusBar)(IMediaPlayer *This, VARIANT_BOOL vbool);HRESULT ( *get_ShowCaptioning)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowCaptioning)(IMediaPlayer *This, VARIANT_BOOL pbool);HRESULT ( *get_ShowAudioControls)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowAudioControls)(IMediaPlayer *This, VARIANT_BOOL bBool);HRESULT ( *get_CaptioningID)(IMediaPlayer *This, BSTR *pstrText);HRESULT ( *put_CaptioningID)(IMediaPlayer *This, BSTR strText);HRESULT ( *get_Mute)(IMediaPlayer *This, VARIANT_BOOL *vbool);HRESULT ( *put_Mute)(IMediaPlayer *This, VARIANT_BOOL vbool);HRESULT ( *get_CanPreview)(IMediaPlayer *This, VARIANT_BOOL *pCanPreview);HRESULT ( *get_PreviewMode)(IMediaPlayer *This, VARIANT_BOOL *pPreviewMode);HRESULT ( *put_PreviewMode)(IMediaPlayer *This, VARIANT_BOOL PreviewMode);HRESULT ( *get_HasMultipleItems)(IMediaPlayer *This, VARIANT_BOOL *pHasMuliItems);HRESULT ( *get_Language)(IMediaPlayer *This, int *pLanguage);HRESULT ( *put_Language)(IMediaPlayer *This, int Language);HRESULT ( *get_AudioStream)(IMediaPlayer *This, int *pStream);HRESULT ( *put_AudioStream)(IMediaPlayer *This, int Stream);HRESULT ( *get_SAMIStyle)(IMediaPlayer *This, BSTR *pbstrStyle);HRESULT ( *put_SAMIStyle)(IMediaPlayer *This, BSTR bstrStyle);HRESULT ( *get_SAMILang)(IMediaPlayer *This, BSTR *pbstrLang);HRESULT ( *put_SAMILang)(IMediaPlayer *This, BSTR bstrLang);HRESULT ( *get_SAMIFileName)(IMediaPlayer *This, BSTR *pbstrFileName);HRESULT ( *put_SAMIFileName)(IMediaPlayer *This, BSTR bstrFileName);HRESULT ( *get_StreamCount)(IMediaPlayer *This, int *pStreamCount);HRESULT ( *get_ClientId)(IMediaPlayer *This, BSTR *pbstrClientId);HRESULT ( *get_ConnectionSpeed)(IMediaPlayer *This, int *plConnectionSpeed);HRESULT ( *get_AutoSize)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_AutoSize)(IMediaPlayer *This, VARIANT_BOOL vbool);HRESULT ( *get_EnableFullScreenControls)(IMediaPlayer *This, VARIANT_BOOL *pbVal);HRESULT ( *put_EnableFullScreenControls)(IMediaPlayer *This, VARIANT_BOOL bVal);HRESULT ( *get_ActiveMovie)(IMediaPlayer *This, IDispatch **ppdispatch);HRESULT ( *get_NSPlay)(IMediaPlayer *This, IDispatch **ppdispatch);HRESULT ( *get_WindowlessVideo)(IMediaPlayer *This, VARIANT_BOOL *pbool);HRESULT ( *put_WindowlessVideo)(IMediaPlayer *This, VARIANT_BOOL _bool);HRESULT ( *Play)(IMediaPlayer *This);HRESULT ( *Stop)(IMediaPlayer *This);HRESULT ( *Pause)(IMediaPlayer *This);HRESULT ( *GetMarkerTime)(IMediaPlayer *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(IMediaPlayer *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *AboutBox)(IMediaPlayer *This);HRESULT ( *GetCodecInstalled)(IMediaPlayer *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(IMediaPlayer *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(IMediaPlayer *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *GetMoreInfoURL)(IMediaPlayer *This, MPMoreInfoType MoreInfoType, BSTR *pbstrMoreInfoURL);HRESULT ( *GetMediaInfoString)(IMediaPlayer *This, MPMediaInfoType MediaInfoType, BSTR *pbstrMediaInfo);HRESULT ( *Cancel)(IMediaPlayer *This);HRESULT ( *Open)(IMediaPlayer *This, BSTR bstrFileName);HRESULT ( *IsSoundCardEnabled)(IMediaPlayer *This, VARIANT_BOOL *pbSoundCard);HRESULT ( *Next)(IMediaPlayer *This);HRESULT ( *Previous)(IMediaPlayer *This);HRESULT ( *StreamSelect)(IMediaPlayer *This, int StreamNum);HRESULT ( *FastForward)(IMediaPlayer *This);HRESULT ( *FastReverse)(IMediaPlayer *This);HRESULT ( *GetStreamName)(IMediaPlayer *This, int StreamNum, BSTR *pbstrStreamName);HRESULT ( *GetStreamGroup)(IMediaPlayer *This, int StreamNum, int *pStreamGroup);HRESULT ( *GetStreamSelected)(IMediaPlayer *This, int StreamNum, VARIANT_BOOL *pStreamSelected);};
struct IMediaPlayer2Vtbl {HRESULT ( *QueryInterface)(IMediaPlayer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPlayer2 *This);ULONG ( *Release)(IMediaPlayer2 *This);HRESULT ( *GetTypeInfoCount)(IMediaPlayer2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaPlayer2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMediaPlayer2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMediaPlayer2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_CurrentPosition)(IMediaPlayer2 *This, double *pCurrentPosition);HRESULT ( *put_CurrentPosition)(IMediaPlayer2 *This, double CurrentPosition);HRESULT ( *get_Duration)(IMediaPlayer2 *This, double *pDuration);HRESULT ( *get_ImageSourceWidth)(IMediaPlayer2 *This, int *pWidth);HRESULT ( *get_ImageSourceHeight)(IMediaPlayer2 *This, int *pHeight);HRESULT ( *get_MarkerCount)(IMediaPlayer2 *This, int *pMarkerCount);HRESULT ( *get_CanScan)(IMediaPlayer2 *This, VARIANT_BOOL *pCanScan);HRESULT ( *get_CanSeek)(IMediaPlayer2 *This, VARIANT_BOOL *pCanSeek);HRESULT ( *get_CanSeekToMarkers)(IMediaPlayer2 *This, VARIANT_BOOL *pCanSeekToMarkers);HRESULT ( *get_CurrentMarker)(IMediaPlayer2 *This, int *pCurrentMarker);HRESULT ( *put_CurrentMarker)(IMediaPlayer2 *This, int CurrentMarker);HRESULT ( *get_FileName)(IMediaPlayer2 *This, BSTR *pbstrFileName);HRESULT ( *put_FileName)(IMediaPlayer2 *This, BSTR bstrFileName);HRESULT ( *get_SourceLink)(IMediaPlayer2 *This, BSTR *pbstrSourceLink);HRESULT ( *get_CreationDate)(IMediaPlayer2 *This, DATE *pCreationDate);HRESULT ( *get_ErrorCorrection)(IMediaPlayer2 *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_Bandwidth)(IMediaPlayer2 *This, int *pBandwidth);HRESULT ( *get_SourceProtocol)(IMediaPlayer2 *This, int *pSourceProtocol);HRESULT ( *get_ReceivedPackets)(IMediaPlayer2 *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(IMediaPlayer2 *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(IMediaPlayer2 *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(IMediaPlayer2 *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(IMediaPlayer2 *This, int *pBufferingCount);HRESULT ( *get_IsBroadcast)(IMediaPlayer2 *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_BufferingProgress)(IMediaPlayer2 *This, int *pBufferingProgress);HRESULT ( *get_ChannelName)(IMediaPlayer2 *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(IMediaPlayer2 *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(IMediaPlayer2 *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(IMediaPlayer2 *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(IMediaPlayer2 *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(IMediaPlayer2 *This, BSTR *pbstrContactEmail);HRESULT ( *get_BufferingTime)(IMediaPlayer2 *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(IMediaPlayer2 *This, double BufferingTime);HRESULT ( *get_AutoStart)(IMediaPlayer2 *This, VARIANT_BOOL *pAutoStart);HRESULT ( *put_AutoStart)(IMediaPlayer2 *This, VARIANT_BOOL AutoStart);HRESULT ( *get_AutoRewind)(IMediaPlayer2 *This, VARIANT_BOOL *pAutoRewind);HRESULT ( *put_AutoRewind)(IMediaPlayer2 *This, VARIANT_BOOL AutoRewind);HRESULT ( *get_Rate)(IMediaPlayer2 *This, double *pRate);HRESULT ( *put_Rate)(IMediaPlayer2 *This, double Rate);HRESULT ( *get_SendKeyboardEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendKeyboardEvents);HRESULT ( *put_SendKeyboardEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendKeyboardEvents);HRESULT ( *get_SendMouseClickEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendMouseClickEvents);HRESULT ( *put_SendMouseClickEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendMouseClickEvents);HRESULT ( *get_SendMouseMoveEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendMouseMoveEvents);HRESULT ( *put_SendMouseMoveEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendMouseMoveEvents);HRESULT ( *get_PlayCount)(IMediaPlayer2 *This, int *pPlayCount);HRESULT ( *put_PlayCount)(IMediaPlayer2 *This, int PlayCount);HRESULT ( *get_ClickToPlay)(IMediaPlayer2 *This, VARIANT_BOOL *pClickToPlay);HRESULT ( *put_ClickToPlay)(IMediaPlayer2 *This, VARIANT_BOOL ClickToPlay);HRESULT ( *get_AllowScan)(IMediaPlayer2 *This, VARIANT_BOOL *pAllowScan);HRESULT ( *put_AllowScan)(IMediaPlayer2 *This, VARIANT_BOOL AllowScan);HRESULT ( *get_EnableContextMenu)(IMediaPlayer2 *This, VARIANT_BOOL *pEnableContextMenu);HRESULT ( *put_EnableContextMenu)(IMediaPlayer2 *This, VARIANT_BOOL EnableContextMenu);HRESULT ( *get_CursorType)(IMediaPlayer2 *This, int *pCursorType);HRESULT ( *put_CursorType)(IMediaPlayer2 *This, int CursorType);HRESULT ( *get_CodecCount)(IMediaPlayer2 *This, int *pCodecCount);HRESULT ( *get_AllowChangeDisplaySize)(IMediaPlayer2 *This, VARIANT_BOOL *pAllowChangeDisplaySize);HRESULT ( *put_AllowChangeDisplaySize)(IMediaPlayer2 *This, VARIANT_BOOL AllowChangeDisplaySize);HRESULT ( *get_IsDurationValid)(IMediaPlayer2 *This, VARIANT_BOOL *pIsDurationValid);HRESULT ( *get_OpenState)(IMediaPlayer2 *This, int *pOpenState);HRESULT ( *get_SendOpenStateChangeEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendOpenStateChangeEvents);HRESULT ( *put_SendOpenStateChangeEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendOpenStateChangeEvents);HRESULT ( *get_SendWarningEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendWarningEvents);HRESULT ( *put_SendWarningEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendWarningEvents);HRESULT ( *get_SendErrorEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendErrorEvents);HRESULT ( *put_SendErrorEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendErrorEvents);HRESULT ( *get_PlayState)(IMediaPlayer2 *This, MPPlayStateConstants *pPlayState);HRESULT ( *get_SendPlayStateChangeEvents)(IMediaPlayer2 *This, VARIANT_BOOL *pSendPlayStateChangeEvents);HRESULT ( *put_SendPlayStateChangeEvents)(IMediaPlayer2 *This, VARIANT_BOOL SendPlayStateChangeEvents);HRESULT ( *get_DisplaySize)(IMediaPlayer2 *This, MPDisplaySizeConstants *pDisplaySize);HRESULT ( *put_DisplaySize)(IMediaPlayer2 *This, MPDisplaySizeConstants DisplaySize);HRESULT ( *get_InvokeURLs)(IMediaPlayer2 *This, VARIANT_BOOL *pInvokeURLs);HRESULT ( *put_InvokeURLs)(IMediaPlayer2 *This, VARIANT_BOOL InvokeURLs);HRESULT ( *get_BaseURL)(IMediaPlayer2 *This, BSTR *pbstrBaseURL);HRESULT ( *put_BaseURL)(IMediaPlayer2 *This, BSTR bstrBaseURL);HRESULT ( *get_DefaultFrame)(IMediaPlayer2 *This, BSTR *pbstrDefaultFrame);HRESULT ( *put_DefaultFrame)(IMediaPlayer2 *This, BSTR bstrDefaultFrame);HRESULT ( *get_HasError)(IMediaPlayer2 *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(IMediaPlayer2 *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(IMediaPlayer2 *This, int *pErrorCode);HRESULT ( *get_AnimationAtStart)(IMediaPlayer2 *This, VARIANT_BOOL *pAnimationAtStart);HRESULT ( *put_AnimationAtStart)(IMediaPlayer2 *This, VARIANT_BOOL AnimationAtStart);HRESULT ( *get_TransparentAtStart)(IMediaPlayer2 *This, VARIANT_BOOL *pTransparentAtStart);HRESULT ( *put_TransparentAtStart)(IMediaPlayer2 *This, VARIANT_BOOL TransparentAtStart);HRESULT ( *get_Volume)(IMediaPlayer2 *This, int *pVolume);HRESULT ( *put_Volume)(IMediaPlayer2 *This, int Volume);HRESULT ( *get_Balance)(IMediaPlayer2 *This, int *pBalance);HRESULT ( *put_Balance)(IMediaPlayer2 *This, int Balance);HRESULT ( *get_ReadyState)(IMediaPlayer2 *This, MPReadyStateConstants *pValue);HRESULT ( *get_SelectionStart)(IMediaPlayer2 *This, double *pValue);HRESULT ( *put_SelectionStart)(IMediaPlayer2 *This, double Value);HRESULT ( *get_SelectionEnd)(IMediaPlayer2 *This, double *pValue);HRESULT ( *put_SelectionEnd)(IMediaPlayer2 *This, double Value);HRESULT ( *get_ShowDisplay)(IMediaPlayer2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowDisplay)(IMediaPlayer2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowControls)(IMediaPlayer2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowControls)(IMediaPlayer2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowPositionControls)(IMediaPlayer2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowPositionControls)(IMediaPlayer2 *This, VARIANT_BOOL Show);HRESULT ( *get_ShowTracker)(IMediaPlayer2 *This, VARIANT_BOOL *Show);HRESULT ( *put_ShowTracker)(IMediaPlayer2 *This, VARIANT_BOOL Show);HRESULT ( *get_EnablePositionControls)(IMediaPlayer2 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnablePositionControls)(IMediaPlayer2 *This, VARIANT_BOOL Enable);HRESULT ( *get_EnableTracker)(IMediaPlayer2 *This, VARIANT_BOOL *Enable);HRESULT ( *put_EnableTracker)(IMediaPlayer2 *This, VARIANT_BOOL Enable);HRESULT ( *get_Enabled)(IMediaPlayer2 *This, VARIANT_BOOL *pEnabled);HRESULT ( *put_Enabled)(IMediaPlayer2 *This, VARIANT_BOOL Enabled);HRESULT ( *get_DisplayForeColor)(IMediaPlayer2 *This, VB_OLE_COLOR *ForeColor);HRESULT ( *put_DisplayForeColor)(IMediaPlayer2 *This, VB_OLE_COLOR ForeColor);HRESULT ( *get_DisplayBackColor)(IMediaPlayer2 *This, VB_OLE_COLOR *BackColor);HRESULT ( *put_DisplayBackColor)(IMediaPlayer2 *This, VB_OLE_COLOR BackColor);HRESULT ( *get_DisplayMode)(IMediaPlayer2 *This, MPDisplayModeConstants *pValue);HRESULT ( *put_DisplayMode)(IMediaPlayer2 *This, MPDisplayModeConstants Value);HRESULT ( *get_VideoBorder3D)(IMediaPlayer2 *This, VARIANT_BOOL *pVideoBorderWidth);HRESULT ( *put_VideoBorder3D)(IMediaPlayer2 *This, VARIANT_BOOL VideoBorderWidth);HRESULT ( *get_VideoBorderWidth)(IMediaPlayer2 *This, int *pVideoBorderWidth);HRESULT ( *put_VideoBorderWidth)(IMediaPlayer2 *This, int VideoBorderWidth);HRESULT ( *get_VideoBorderColor)(IMediaPlayer2 *This, VB_OLE_COLOR *pVideoBorderWidth);HRESULT ( *put_VideoBorderColor)(IMediaPlayer2 *This, VB_OLE_COLOR VideoBorderColor);HRESULT ( *get_ShowGotoBar)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowGotoBar)(IMediaPlayer2 *This, VARIANT_BOOL vbool);HRESULT ( *get_ShowStatusBar)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowStatusBar)(IMediaPlayer2 *This, VARIANT_BOOL vbool);HRESULT ( *get_ShowCaptioning)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowCaptioning)(IMediaPlayer2 *This, VARIANT_BOOL pbool);HRESULT ( *get_ShowAudioControls)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_ShowAudioControls)(IMediaPlayer2 *This, VARIANT_BOOL bBool);HRESULT ( *get_CaptioningID)(IMediaPlayer2 *This, BSTR *pstrText);HRESULT ( *put_CaptioningID)(IMediaPlayer2 *This, BSTR strText);HRESULT ( *get_Mute)(IMediaPlayer2 *This, VARIANT_BOOL *vbool);HRESULT ( *put_Mute)(IMediaPlayer2 *This, VARIANT_BOOL vbool);HRESULT ( *get_CanPreview)(IMediaPlayer2 *This, VARIANT_BOOL *pCanPreview);HRESULT ( *get_PreviewMode)(IMediaPlayer2 *This, VARIANT_BOOL *pPreviewMode);HRESULT ( *put_PreviewMode)(IMediaPlayer2 *This, VARIANT_BOOL PreviewMode);HRESULT ( *get_HasMultipleItems)(IMediaPlayer2 *This, VARIANT_BOOL *pHasMuliItems);HRESULT ( *get_Language)(IMediaPlayer2 *This, int *pLanguage);HRESULT ( *put_Language)(IMediaPlayer2 *This, int Language);HRESULT ( *get_AudioStream)(IMediaPlayer2 *This, int *pStream);HRESULT ( *put_AudioStream)(IMediaPlayer2 *This, int Stream);HRESULT ( *get_SAMIStyle)(IMediaPlayer2 *This, BSTR *pbstrStyle);HRESULT ( *put_SAMIStyle)(IMediaPlayer2 *This, BSTR bstrStyle);HRESULT ( *get_SAMILang)(IMediaPlayer2 *This, BSTR *pbstrLang);HRESULT ( *put_SAMILang)(IMediaPlayer2 *This, BSTR bstrLang);HRESULT ( *get_SAMIFileName)(IMediaPlayer2 *This, BSTR *pbstrFileName);HRESULT ( *put_SAMIFileName)(IMediaPlayer2 *This, BSTR bstrFileName);HRESULT ( *get_StreamCount)(IMediaPlayer2 *This, int *pStreamCount);HRESULT ( *get_ClientId)(IMediaPlayer2 *This, BSTR *pbstrClientId);HRESULT ( *get_ConnectionSpeed)(IMediaPlayer2 *This, int *plConnectionSpeed);HRESULT ( *get_AutoSize)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_AutoSize)(IMediaPlayer2 *This, VARIANT_BOOL vbool);HRESULT ( *get_EnableFullScreenControls)(IMediaPlayer2 *This, VARIANT_BOOL *pbVal);HRESULT ( *put_EnableFullScreenControls)(IMediaPlayer2 *This, VARIANT_BOOL bVal);HRESULT ( *get_ActiveMovie)(IMediaPlayer2 *This, IDispatch **ppdispatch);HRESULT ( *get_NSPlay)(IMediaPlayer2 *This, IDispatch **ppdispatch);HRESULT ( *get_WindowlessVideo)(IMediaPlayer2 *This, VARIANT_BOOL *pbool);HRESULT ( *put_WindowlessVideo)(IMediaPlayer2 *This, VARIANT_BOOL _bool);HRESULT ( *Play)(IMediaPlayer2 *This);HRESULT ( *Stop)(IMediaPlayer2 *This);HRESULT ( *Pause)(IMediaPlayer2 *This);HRESULT ( *GetMarkerTime)(IMediaPlayer2 *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(IMediaPlayer2 *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *AboutBox)(IMediaPlayer2 *This);HRESULT ( *GetCodecInstalled)(IMediaPlayer2 *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(IMediaPlayer2 *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(IMediaPlayer2 *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *GetMoreInfoURL)(IMediaPlayer2 *This, MPMoreInfoType MoreInfoType, BSTR *pbstrMoreInfoURL);HRESULT ( *GetMediaInfoString)(IMediaPlayer2 *This, MPMediaInfoType MediaInfoType, BSTR *pbstrMediaInfo);HRESULT ( *Cancel)(IMediaPlayer2 *This);HRESULT ( *Open)(IMediaPlayer2 *This, BSTR bstrFileName);HRESULT ( *IsSoundCardEnabled)(IMediaPlayer2 *This, VARIANT_BOOL *pbSoundCard);HRESULT ( *Next)(IMediaPlayer2 *This);HRESULT ( *Previous)(IMediaPlayer2 *This);HRESULT ( *StreamSelect)(IMediaPlayer2 *This, int StreamNum);HRESULT ( *FastForward)(IMediaPlayer2 *This);HRESULT ( *FastReverse)(IMediaPlayer2 *This);HRESULT ( *GetStreamName)(IMediaPlayer2 *This, int StreamNum, BSTR *pbstrStreamName);HRESULT ( *GetStreamGroup)(IMediaPlayer2 *This, int StreamNum, int *pStreamGroup);HRESULT ( *GetStreamSelected)(IMediaPlayer2 *This, int StreamNum, VARIANT_BOOL *pStreamSelected);HRESULT ( *get_DVD)(IMediaPlayer2 *This, IMediaPlayerDvd **ppdispatch);HRESULT ( *GetMediaParameter)(IMediaPlayer2 *This, int EntryNum, BSTR bstrParameterName, BSTR *pbstrParameterValue);HRESULT ( *GetMediaParameterName)(IMediaPlayer2 *This, int EntryNum, int Index, BSTR *pbstrParameterName);HRESULT ( *get_EntryCount)(IMediaPlayer2 *This, int *pNumberEntries);HRESULT ( *GetCurrentEntry)(IMediaPlayer2 *This, int *pEntryNumber);HRESULT ( *SetCurrentEntry)(IMediaPlayer2 *This, int EntryNumber);HRESULT ( *ShowDialog)(IMediaPlayer2 *This, MPShowDialogConstants mpDialogIndex);};
struct ITypeInfo2Vtbl {HRESULT ( *QueryInterface)(ITypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo2 *This);ULONG ( *Release)(ITypeInfo2 *This);HRESULT ( *GetTypeAttr)(ITypeInfo2 *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo2 *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo2 *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo2 *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo2 *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo2 *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo2 *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo2 *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo2 *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo2 *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo2 *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo2 *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo2 *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo2 *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo2 *This, VARDESC *pVarDesc);HRESULT ( *GetTypeKind)(ITypeInfo2 *This, TYPEKIND *pTypeKind);HRESULT ( *GetTypeFlags)(ITypeInfo2 *This, ULONG *pTypeFlags);HRESULT ( *GetFuncIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);HRESULT ( *GetVarIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex);HRESULT ( *GetCustData)(ITypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetFuncCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetVarCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetImplTypeCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetDocumentation2)(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeInfo2 *This, CUSTDATA *pCustData);HRESULT ( *GetAllFuncCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);HRESULT ( *GetAllVarCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllImplTypeCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);};
union tagDBCOMMANDTREE___E5937B8F0F9741201FD055AC240E9FBB {long long llValue;unsigned long long ullValue;BOOL fValue;unsigned char uchValue;signed char schValue;unsigned short usValue;short sValue;LPOLESTR pwszValue;LONG lValue;ULONG ulValue;float flValue;double dblValue;CY cyValue;DATE dateValue;DBDATE dbdateValue;DBTIME dbtimeValue;SCODE scodeValue;BSTR *pbstrValue;ICommand *pCommand;IDispatch *pDispatch;IMoniker *pMoniker;IRowset *pRowset;IUnknown *pUnknown;DBBYGUID *pdbbygdValue;DBCOLUMNDESC *pcoldescValue;DBID *pdbidValue;DBLIKE *pdblikeValue;DBCONTENT *pdbcntntValue;DBCONTENTSCOPE *pdbcntntscpValue;DBCONTENTTABLE *pdbcntnttblValue;DBCONTENTVECTOR *pdbcntntvcValue;DBCONTENTPROXIMITY *pdbcntntproxValue;DBGROUPINFO *pdbgrpinfValue;DBPARAMETER *pdbparamValue;DBPROPSET *pdbpropValue;DBSETFUNC *pdbstfncValue;DBSORTINFO *pdbsrtinfValue;DBTEXT *pdbtxtValue;DBVECTOR *pdbvectorValue;SAFEARRAY *parrayValue;VARIANT *pvarValue;GUID *pGuid;BYTE *pbValue;char *pzValue;DB_NUMERIC *pdbnValue;DBTIMESTAMP *pdbtsValue;void *pvValue;DBPROBABILISTIC *pdbprobValue;DBRELEVANTDOCUMENT *pdbreldocValue;};
struct tagDBCONTENTTABLE {LPOLESTR pwszMachine;LPOLESTR pwszCatalog;};
union tagVARIANT___CFEED276C078973BD7512520F6B5AF6E {tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB __anonymous0;DECIMAL decVal;};
struct __MIDL___MIDL_itf_urlmon_0000_0001 {DWORD tyspec;union __MIDL___MIDL_itf_urlmon_0000_0001____MIDL___MIDL_itf_urlmon_0000_0005 tagged_union;};
struct _userSTGMEDIUM___STGMEDIUM_UNION {DWORD tymed;union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 u;};
struct tagSTGMEDIUM {DWORD tymed;tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB __anonymous0;IUnknown *pUnkForRelease;};
struct _RPC_ASYNC_STATE {unsigned int Size;unsigned int Signature;int Lock;unsigned int Flags;void *StubInfo;void *UserInfo;void *RuntimeInfo;RPC_ASYNC_EVENT Event;RPC_NOTIFICATION_TYPES NotificationType;union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA u;int Reserved[4];};
struct tagDBCOMMANDTREE {DBCOMMANDOP op;WORD wKind;struct tagDBCOMMANDTREE *pctFirstChild;struct tagDBCOMMANDTREE *pctNextSibling;union tagDBCOMMANDTREE___E5937B8F0F9741201FD055AC240E9FBB value;HRESULT hrError;};
struct tagVARIANT {tagVARIANT___CFEED276C078973BD7512520F6B5AF6E __anonymous0;};



/// #endif ===true


