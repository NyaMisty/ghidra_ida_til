
#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\vc6win.til.h"
/// #define GHIDRA ===DEFINED

/// #ifndef INCLUDE_GUARD_vc6win_til ===true

/// #define INCLUDE_GUARD_vc6win_til ===DEFINED


#line 1: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\5_gengdt\pc\.\..\..\..\..\IDAPlugins\idatil2c\common.h"


/// #define __int64  long long ===DEFINED
/// #define __int32  int ===DEFINED
/// #define __int16  short ===DEFINED
/// #define __int8  char ===DEFINED

/// #ifdef GHIDRA ===true

typedef struct {
    long long u1;
    long long u2;
} __int128;
typedef struct {
    unsigned long long u1;
    unsigned long long u2;
} __uint128;
/// #endif ===true


typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

/// #define _BYTE  uint8_t ===DEFINED
/// #define _WORD  uint16_t ===DEFINED
/// #define _QWORD  uint64_t ===DEFINED
/// #define _DWORD  uint32_t ===DEFINED



/// #ifndef HAVETYPE_bool ===true

/// #define bool  char ===DEFINED
/// #endif ===true


/// #ifndef HAVETYPE___u32 ===true

typedef uint32_t __u32;
/// #endif ===true

/// #ifndef HAVETYPE___u16 ===true

typedef uint16_t __u16;
/// #endif ===true

/// #ifndef HAVETYPE___u64 ===true

typedef uint64_t __u64;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_uid32_t ===true

typedef unsigned int __kernel_uid32_t;
/// #endif ===true

/// #ifndef HAVETYPE___kernel_mqd_t ===true

typedef int __kernel_mqd_t;
/// #endif ===true

/// #ifndef HAVETYPE_DOT11_DIRECTION ===true

typedef int DOT11_DIRECTION; 
/// #endif ===true

/// #ifndef HAVETYPE__DEVICE_RELATION_TYPE ===true

enum _DEVICE_RELATION_TYPE {_DEVICE_RELATION_TYPE_UNDEFINED,};
/// #endif ===true



/// #define __fastcall ===DEFINED

/// #define __unaligned ===DEFINED

/// #define __stdcall ===DEFINED

/// #define __cppobj ===DEFINED

/// #define __declspec([x])   ===DEFINED
/// #define __hidden ===DEFINED

/// #define __cdecl ===DEFINED

/// #define __noreturn ===DEFINED

/// #define __pascal ===DEFINED

/// #define __near ===DEFINED

/// #define __high ===DEFINED


/// #define const ===DEFINED

/// #define this  _this ===DEFINED
/// #define near ===DEFINED


typedef char _Mbstatet;

typedef void **va_list;





























 
#line 4: "D:\Workspaces\UtilWorkspace\Reverse\GhidraTools\ghidra_ida_til\4_til_til2c_headers\pc\vc6win.til.h"




struct __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___209C0FF5F0640AAD819CD18287CEBBF4;
struct __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___69BA54E60E080FF0D431A75B0D38E6E2;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3;
union CLUS_RESOURCE_CLASS_INFO______40830167533866F3F54C93CEFD5163C1___80588CB7E6A8241175BA3655013B14BD;
union _FILESYSTEM_STATISTICS______AE95DDE6C9C27FBF24E5C6B187468200___C3FF8AB90952EAB5EEBF3A16E3DE958E;
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1;
struct CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F___40830167533866F3F54C93CEFD5163C1;
struct _FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC___AE95DDE6C9C27FBF24E5C6B187468200;
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264;
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158;
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81;
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___29E668CDF699B04E5534A451C956F19F;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___2AC1A0508EF9BCBABE5AC960F9ACD9BD;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___89D0EED50E7EB6AF2A3CF195F6B324D9;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___AC895D76FEB8AD7CCBA57D090D995565;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___B77FC36072AAC97468D5DBEF9C8DEA1B;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___EE8F0E8E6B4392040B096A0A18F796A4;
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___FEF65DEF9E8D3E402C8E4CBE8FFE0BEF;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F;
struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___3CE44E73086180F89031D1BB35ED5A26;
struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___B282398C81B6FF20F165753A3DA70A52;
struct CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09___857958BF799C2928E4122E1E6ECCA6A2;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC;
struct tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578;
struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B;
union tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E;
union BDN_VALUE______BC76CA3BCEACCD00BFE19C0FAD7C2138___05FAD7053CEFB55D5DB10BB62A7755FE;
struct _KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D___F32151EA73C45A0B912EECB7D87258C2;
struct _KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67___699DD847B0F9C515D4C82B3BB6B28060;
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9;
struct _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5;
struct _devicemodeW___8704E1B782D57C585145E63F7510EBEA___5ACE225D4D14CE0550A9F5A217E306C5;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858;
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D;
struct tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB;
struct BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F___BC76CA3BCEACCD00BFE19C0FAD7C2138;
struct tpstahdr___A6D8E33AC39759CFC20E94B336D7745F___603949C2B9C451F7A302AB722CDAFB11;
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___4E360FE05B55FC1B7DE1F318AE520C50;
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___5B8C33BBDA1E90A3135660F6C2060421;
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___6D0E5E48C7AAB79E1BA653B8A7C28F8A;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___028BC7EA7492FE4A8CE916CF8CE81F9F;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___0C84567BC15175E871F7BC59643BADDE;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___4B76563A33A04C2B484E004C44890E3C;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___68B743954C8238C4EC931D8D0416CEBE;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___768A8DAD4940E326AEC35D738F467B21;
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___90D28FF8396C2E5717E88A87F7FA367B;
struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___2186F38D6E36B45FD2D7B53ADC765B0A;
struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___AC659166113B5A242CBE56A6BFAA57EE;
struct bufelt___8899DE19478DD9A30897A768D03DABCC___4EC57D389E9FF5992BC5C98350285BAE;
struct bufelt___8899DE19478DD9A30897A768D03DABCC___D2918238ED4827AFD39ED5377ABF4AE5;
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___04482C8E927EEEC92939AAD340FA2F33;
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___3CBDD733A7F82DAE20B81DF65415100F;
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___88C53FC97706F7F4B3328D695F8A1E29;
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___F52E1212EA13844F586727D2C5AAB393;
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B;
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56;
union _LLC___BD8DAC351D2955BFEDB8952A36AC5422___02D548A99EB2D2C428FE49EA73D40A48;
union _LLC___BD8DAC351D2955BFEDB8952A36AC5422___633B2AA9B79D6734E97CE0D21746D833;
struct ____446F191665B55C76FC203DCA446CB75E___11D7E2EEDC905229D05BF81DCE1ACA56;
struct ____446F191665B55C76FC203DCA446CB75E___CED17800A94116C6709D31E7721A19C6;
struct ____543FA3AE02DFE9E044D92CF6A451C814___17DF1E99E4527329F6C5B633745778B6;
union __MIDL___MIDL_itf_wtypes_0001_0001____MIDL___MIDL_itf_wtypes_0001_0003;
union __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899;
union _176AE562BEBA221D9147C7D653950669___A9EF3B5146E74FA1D748AD7DEFEAA145;
union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56;
union _33C4C3464C1F55DF358037E82FD3A381___543FA3AE02DFE9E044D92CF6A451C814;
union _478FD611D4CFE009DAD748EFF45E08FA___7B02E3B50742AB47356AF5E80558A105;
union _478FD611D4CFE009DAD748EFF45E08FA___9D1752F92D652BDA7BF3CD505478029C;
union _478FD611D4CFE009DAD748EFF45E08FA___BBC34037224A51D42A04ADC23A3CFE4A;
union _5738CA44FE4A305B347403BC29DEBFB1___1E086DA97258E44C2D8AD7C7CCE8E386;
struct _5AC28848A8A0188E71C0B88AB8CF796B___33A5881EA3D20175AF6F6CBC82269B7B;
struct _644E466E06576D194C6182F3C91B6C45___A8864017B88463FEDB093277956EAB61;
union _65758D9D43B54B363A052B56EC34040F___4BC380B0414FD4D1A387B4548A8B198D;
union _65758D9D43B54B363A052B56EC34040F___9D1752F92D652BDA7BF3CD505478029C;
union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344;
union _7CE74CE74CF979B93E9F8A54217A4B92___E492AAD3BDB014670AF7883727C49B32;
union _7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669;
struct _85601F4DDA405B3A8D51460B5AB09A10___D976F8EFFE6D1361093B26837C23B240;
struct _85601F4DDA405B3A8D51460B5AB09A10___E13E322415CFCBFB6D3FEC2B29CD0749;
struct _87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379;
struct _87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8;
union _93DD11BEAC2601A6EF0B5FEB14D3B821___446F191665B55C76FC203DCA446CB75E;
union _94FF0DCDFF19E9D844EB9057038515A4___AA90C7C52CB1487987B0F426BAFB98E6;
union _9624B207E0A914870924A3D14631D94B___5E4550463BAFEE6E8C703CAEAD9B5F63;
union _A3ABF0E8F12B01D8CF792B8266628F14___3A59B7EE443DAB28210B05555185179E;
struct _AABF73CB38EC495F6AFFF3108991DB2A___2194BC531F59466BE42B702B8A5EF68B;
struct _C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6;
struct _C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992;
union _CC101A5DC835CA1BB7FB5BD237B40121___25E48A7F248F70E41140C37F96B9BE07;
union _CC101A5DC835CA1BB7FB5BD237B40121___F50C430ED4C369A4C694211AB0CC4AFB;
struct _CEB0288F8947EE21048823F466ABF866___8DB12206A787E12F5CB68E9C5F8D04FA;
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F;
union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF;
union _DEC76BDFA461320EB33154E3BA44F85F___B0C0A055862D20B8805E43D91089E34A;
union _DEC76BDFA461320EB33154E3BA44F85F___ED49A8AFEC0B061CE76DB553A726581F;
union _EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED;
union _F10EAF12E46EBA994735C587F3E497C7___3711B978F6157F59598EFB5D0B22300D;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29;
union _IPX_STATIC_NETBIOS_NAME_INFO___78CE80410E7D5482A942DBDEECB6BC55;
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B;
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43;
union _INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C;
union _INTERNET_CACHE_ENTRY_INFOW___9E8845A706AB4DF9270F3009F082917C;
union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F;
union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F;
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0;
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1;
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5;
union CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F;
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38;
union _NTMS_OBJECTINFORMATIONA___C54245BCF81BD8C2976163E7CB33D303;
union _NTMS_OBJECTINFORMATIONW___0CBDE24DA5C159C356A2BA5F5BFBCD0A;
union _SAP_SERVICE_FILTER_INFO___C22F3CB86C059B621E49F8C990C080A4;
union _METADATA_GETALL_RECORD___74D6405487D82570D3F0F9DA713B78B0;
struct lineagentgroupentry_tag___3B15045ED2134A72ECDB79D8EFF28E30;
union _FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC;
union _IPX_STATIC_ROUTE_INFO___55A506EDD8AAD14FACDD6C3120B03F69;
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003;
union tagSQL_INTERVAL_STRUCT___E0CBF60BBC76AAAF9CF29F3CBADF463C;
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A;
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D;
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7;
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C;
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1;
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1;
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0;
union _CERT_ALT_NAME_ENTRY___7E4B233ED3B78E5B558F9B49A3136717;
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178;
union _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45;
union lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F;
union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D;
union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF;
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07;
union MSBDN_OUTPUT_VALUE___FF2674E992A362656645868EC7412F11;
union _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6;
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4;
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4;
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001;
union tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E;
union tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872;
union CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09;
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11;
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C;
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34;
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5;
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED;
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C;
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42;
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987;
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5;
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457;
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779;
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710;
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F;
struct RAS_PARAMS_VALUE___3E41164A919764C5D03D915E312E931F;
union SIP_SUBJECTINFO____02ECAB1B75FB78019062BA5F11C342E3;
union _CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E;
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B;
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156;
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250;
union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA;
union _RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F;
struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E;
union tagDBCOMMANDTREE___23A2F42342E34259C4EB96A74BF3859B;
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8;
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E;
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122;
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E;
struct CLUSPROP_SYNTAX___AAE71ADAC41F2CC60275D879B9ACCE7A;
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50;
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672;
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56;
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED;
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC;
union tagODBC_VS_ARGS___0C8F0D999772A4985FC9E94A4859820E;
union tagODBC_VS_ARGS___8B886DFCDC4562487DC12D65EA88126B;
union _D3DCOLORVALUE___1870E08CD1297AF1183F2104CF0E68BB;
union _D3DCOLORVALUE___5FBE30F4B5EDEA02F5A8FF631684CD5C;
union _D3DCOLORVALUE___79F58B462609A8478E0156545A48EE38;
union _D3DCOLORVALUE___89D0C02BD3EDF7E42F4E64602AB90C16;
union _DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157;
union _DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013;
union _DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968;
union _DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4;
union _DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5;
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B;
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B;
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E;
union _RTM_IPX_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7;
union _RTM_IPX_ROUTE___699C5E920C4F94118D3CA0585219D565;
union _RTM_IPX_ROUTE___84BE75615039A1B539474E75E854ADAC;
union _RTM_IPX_ROUTE___85E7B8B11946BA927F63B847A2BF5F33;
union _RTM_IPX_ROUTE___95FE7FC4F53A272F19648AD0B352E2FC;
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB;
union tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8;
union DelayLoadProc___6C742A419700A36D4C6A0BE2A92A6405;
union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4;
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4;
union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4;
union _RTM_IP_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7;
union _RTM_IP_ROUTE___699C5E920C4F94118D3CA0585219D565;
union _RTM_IP_ROUTE___B65F32E54A7D132F22C0F4ED7A007718;
union _RTM_IP_ROUTE___D7E34B8E0CF8F922B22A9A1306909A02;
union _RTM_IP_ROUTE___DFE08586EF63A6DAB2B8E734DD72B954;
union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6;
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E;
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA;
union _D3DMATERIAL___0E29CCD1ABCFA56B0343B217BB93547E;
union _D3DMATERIAL___48A7D73869B8DD97079A7DB0052C867A;
union _D3DMATERIAL___4E89CE7B3871A99DAB3B73BC63770FCE;
union _D3DMATERIAL___B545799AB1B094EA7448ADA6B118C0D5;
union _D3DMATERIAL___F37024B6A2A7DA8F8161E452127F778F;
union _D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691;
union _D3DTLVERTEX___30594A6BB70EFF251680D22A869004B0;
union _D3DTLVERTEX___34D6BCDD47B44126D7A203197E7A8282;
union _D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703;
union _D3DTLVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111;
union _D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3;
union _D3DTLVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
union _D3DTRIANGLE___5E81141D7147E4DA50A203FBA8012470;
union _D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA;
union _D3DTRIANGLE___C167AD525C2A16158535093655B0BE27;
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83;
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87;
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4;
union _KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D;
union _KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67;
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F;
union _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4;
union _devicemodeW___8704E1B782D57C585145E63F7510EBEA;
union _wireVARIANT___97E5681EB831466912C1B906D2CF69C6;
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB;
union tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A;
union _D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165;
union _D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D;
union _D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD;
union _D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA;
union _D3DLVERTEX___30594A6BB70EFF251680D22A869004B0;
union _D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282;
union _D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21;
union _D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0;
union _D3DLVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
struct _LLC_BUFFER___2D0AC769B473AF70044942827F91E8BC;
struct _LLC_BUFFER___E568244FB8030BE4C3EFA72F3DEF7F57;
union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923;
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D;
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D;
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2;
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897;
union DPLAPPINFO___6B7C85D79A977F51592E8F07D5D2FE48;
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _CONFADDRA___6189D175D0D80E2BA877E8501BB5D2E1;
union _CONFADDRW___4D176CB0667F62A0AC10010AC63075C7;
union _D3DVECTOR___2970DA2ECFB38188FCB670891BDDBDFA;
union _D3DVECTOR___3781A3F6A2280FF9BE972B852E87FD21;
union _D3DVECTOR___681612F8DC6DDCA79CBEF9228C3A67A0;
union _D3DVERTEX___2970DA2ECFB38188FCB670891BDDBDFA;
union _D3DVERTEX___3781A3F6A2280FF9BE972B852E87FD21;
union _D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A;
union _D3DVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0;
union _D3DVERTEX___7013070F7992C3CB148910863AB1E659;
union _D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631;
union _D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699;
union _D3DVERTEX___F5EA273054A07BEACA92D8100BBF37A6;
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097;
union _TOKENRING___D5A0CFD0485969A31AA970E0E4F75009;
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514;
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B;
union tagVARIANT___CFEED276C078973BD7512520F6B5AF6E;
union BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F;
union _D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589;
union _D3DSTATE___F2EA3FEE0507817BD9C946BFDA84F9EF;
union _ETHERNET___FBF8A93E0AC2563FB57148D5C1660BB7;
union _adsvalue___BA98B216490F4398E51052A67E18CE1F;
struct _timecode___6889D7C8638655C86F211076F8C624CB;
union _D3DLINE___5E81141D7147E4DA50A203FBA8012470;
union _D3DLINE___C167AD525C2A16158535093655B0BE27;
union _D3DRECT___5C92D98B6486E2D73C75D371A41BD7BA;
union _D3DRECT___5FA8995385DC59DE62F772EF39CB3CD0;
union _D3DRECT___A06CC334F0A72C7C08028D8694B5ECC1;
union _D3DRECT___AB8E8EA9B71D458E94A6241D094F864D;
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83;
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C;
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19;
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87;
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935;
union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57;
union ldapmodW___E212A43E07F676EA561EB2F20C2750D7;
union tagINPUT___72687D791E298366090936F57062F9D6;
union tpstahdr___A6D8E33AC39759CFC20E94B336D7745F;
struct IDtcLuRecoveryInitiatedByDtcStatusWorkVtbl;
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA;
union _STRRET___3AF7F6543D4EBCAE352F8864F620C6EA;
union _action___4F51FE4D2EA0AB41DD903A61846FC72C;
struct _avifieldindex_chunk___avifieldindex_entry;
union in_addr___C13EC994467D6E67044F092615EC7EA9;
union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB;
union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D;
union tpashdr___DE5CBA54BA8BE874C4E36EB888298902;
union tpophdr___095F276FF5EBABB63F94067ADE8FD2C4;
struct IDtcLuRecoveryInitiatedByDtcTransWorkVtbl;
union _userHMETAFILEPICT____MIDL_IWinTypes_0005;
union bufelt___8899DE19478DD9A30897A768D03DABCC;
union bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D;
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34;
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301;
union _NSID___19E630ABC4E67F8A7A8368ED53A9D1DA;
union _userHENHMETAFILE____MIDL_IWinTypes_0006;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _LLC___BD8DAC351D2955BFEDB8952A36AC5422;
union _RemotableHandle____MIDL_IWinTypes_0009;
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
struct ldap___C24F30664623ED2C5300C291F5E91248;
struct IDtcLuRecoveryInitiatedByDtcStatusWork;
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
union _userCLIPFORMAT____MIDL_IWinTypes_0001;
struct IDtcLuRecoveryInitiatedByDtcTransWork;
union _GDI_NONREMOTE____MIDL_IWinTypes_0002;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO;
union _userHMETAFILE____MIDL_IWinTypes_0004;
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION;
union _GDI_OBJECT____MIDL_IAdviseSink_0002;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct _avisuperindex___avisuperindex_entry;
union _userHPALETTE____MIDL_IWinTypes_0008;
struct tuispicreatedialoginstanceparams_tag;
struct IDirectDrawMediaSampleAllocatorVtbl;
struct IDtcLuRecoveryInitiatedByLuWorkVtbl;
struct IExchangeImportHierarchyChangesVtbl;
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO;
struct _POLICY_LOCAL_MACHINE_PASSWORD_INFO;
struct _SecPkgContext_RemoteCredentialInfo;
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
union _userHBITMAP____MIDL_IWinTypes_0007;
union _userHGLOBAL____MIDL_IWinTypes_0003;
struct IActiveScriptParseProcedureOldVtbl;
struct IActiveScriptSiteInterruptPollVtbl;
struct IExchangeImportContentsChangesVtbl;
struct IHTMLStyleSheetRulesCollectionVtbl;
struct ITransactionTransmitterFactoryVtbl;
struct _CHANGER_INITIALIZE_ELEMENT_STATUS;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _POLICY_LOCAL_IPSEC_REFERENCE_INFO;
struct _POLICY_LOCAL_POLICY_LOCATION_INFO;
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A;
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W;
struct _SecPkgContext_LocalCredentialInfo;
struct __MIDL___MIDL_itf_strmif_0070_0001;
struct __MIDL___MIDL_itf_strmif_0074_0001;
struct __MIDL___MIDL_itf_strmif_0074_0002;
struct __MIDL___MIDL_itf_strmif_0074_0003;
struct __MIDL___MIDL_itf_strmif_0074_0005;
struct __MIDL___MIDL_itf_strmif_0074_0006;
struct __MIDL___MIDL_itf_strmif_0094_0002;
struct __MIDL___MIDL_itf_strmif_0223_0001;
struct __MIDL___MIDL_itf_wtypes_0001_0001;
struct _00C90F9554CD018C8A08AD8BDB9761D9;
struct _01091B9DEBEBC2354EBF1594EEF6BE89;
struct _0302F8A06E19F526F6B7CE33122C2128;
struct _033FDDF8C92E552042E0320A022B0EBA;
struct _03D431463D1B1B07D135EFD405717ACF;
struct _047A9D6DB9EB3B65E20B29F40C814688;
struct _060D6FD956D3EBF205D64C3CA4764571;
struct _0704266397680A28280F4A6885C4C35C;
struct _098CCDCB9074DBE2AEBC1B4026CD72FD;
struct _0AEE12B045F8657F1D84907C62993E1D;
struct _0B8D1429C3827E0DB460E98487EB6908;
struct _0E076CBD8F5A7ED08B697C5009EDFCFF;
struct _0FC5C6CE63995F723FAD6419C86EA56D;
struct _114DC3E6372E97B43E837C0EA892420F;
struct _12065485545C98CF3EA596DDCCDF0ED5;
struct _12220BD7577024BDCE09342FCD2824E0;
struct _13AC4D5D0927D2C6C16DF20D64ACBBB3;
struct _13B347001B2B96C65D01839EEA37C971;
struct _1548BBD1D24884F45375B762909DAFED;
struct _155DA1A439C400442DF8DC3CA0B009F1;
struct _15CCEDC8B607AED044732B1CC203D4F1;
struct _176AE562BEBA221D9147C7D653950669;
struct _17CA7839736B8F73357CD165DBE52F18;
struct _1889F3BAB83DF1AC38A4E0627115688D;
struct _18FEA12C471CE0A4515515C42723EF45;
struct _195B5ED187AD0EF03C07D6DC4096CC78;
struct _1960CEC5D16E97BD5D34D82AA1F3F495;
struct _197B5A7C8A9A186B55DFC6C456EA8A07;
struct _1A2DA8A1FB7718738B15D949BE0009F3;
struct _1B524A7EE9DF0D2D7407CE43B258BBC8;
struct _1B9FED13861BA37B232486F1850D8B89;
struct _1C9ED8E2FE494C714F8336D090291E50;
struct _1CF5A01E195BE25BEDA13B6A0EE28B07;
struct _1E2FD961D0F6599201D4719261A6C1FA;
struct _1E7FF90346B85F5B5B2905177EF5A1FD;
struct _204C6CB5B1CC0D35B371E5C594718A83;
struct _20D2774EFCA5A66C7957E72E344FDD43;
struct _20E271452B0D17C3D7527FFA40499DEB;
struct _21B90258E17C8B6D2BC61A88DF74B5FB;
struct _21BC78F9FD7040767E91D83497A8A62C;
struct _2217024DFB55A6F4C8452C0D2E818FB7;
struct _22BDD2D628B0B561C5A9CA42290FE551;
struct _2646B588B97D9461B888B3A6B0F533BF;
struct _26873349DB0A36B1F3161FA857CA70AC;
struct _271E49C86C8EFA0B647D87A58CF03284;
struct _27240A871129E8C5EF2505ED059D4BC8;
struct _27EED8F145487CB1BEE00199BFE0C5C4;
struct _284877062F9D14F112F3A0D6BC9583DD;
struct _290BC7C79F72D28CCB42E0D04B0B8F8F;
struct _299134A1587F81C88B1AF91D3DBFCA39;
struct _29CD99F8CA239F4FFB76FBF32B00C866;
struct _2B4FDC4BF487E67F052937EE78FAE255;
struct _2B6042393D1A02E0AE9B16B44F784AC7;
struct _2D53B4FD6E19D1977DDA8FD016F55563;
struct _2DFBDCCDB67179C152E4440B255C036F;
struct _2E2AA9F03C861A9A9D27DBF19670D54B;
struct _2F1E0242A20BC17A87F654C54F0A4255;
struct _2FCB7B16F35A994219C907239F9496DC;
struct _30C092ACFDACA2A085242C6994837CA9;
struct _30CC7D53408649846FD423BE19D3AD21;
struct _30CDF2DE7DC7B55457111E3E79D8AE18;
struct _328060AA9F47934214406E09F9D6352A;
struct _32D5F4ECB3520837EC43A0FF60CF3E0A;
struct _33C4C3464C1F55DF358037E82FD3A381;
struct _362ECF3E0DC92881BF24984B329406EC;
struct _37E4785F055768DB96FB0F6687850E13;
struct _39A7E4ECA0CDD25B70D9543F73C0D523;
struct _3A21E11B68C434F2F5E8C2B6B2DCB409;
struct _3A744348A6C9F73853F568E19FD6B4F7;
struct _3D26434F5A7D20980B51C6D4C88FA6DE;
struct _3DDD578915499A46BA4B885B93AB36C5;
struct _3E0A08AB4DFF2F80B8E74D39D385CA44;
struct _3E43CC221FCFDCE5A8A514736F12696C;
struct _3E8BFD172CC0232DA5E7071EC2A0A89F;
struct _3EB284A884AA968851CCD5BE7E4B68CB;
struct _3EC5757393EE7828D79CED73ACE876F0;
struct _3FA64165D15A4602C29B2D9B0DA4A5E9;
struct _3FBC325AC5E1830BAC7DB9619C6C90C8;
struct _42792D5BBA08C54B20EEEC50F78E7D08;
struct _434864393F5F5FC8FD08DA4EC836A36F;
struct _44F6892C3B9E49E721808137885C3B18;
struct _455481A63A960E136730B1239333B9FD;
struct _459629BAC169663B96C3B85C5F4E781B;
struct _463E06C868FD59B527DBF787F8EA20AA;
struct _46B8CD9DF897759D0306203A2121EA8B;
struct _478EBBB1B521D3328EC986A2D868B910;
struct _478FD611D4CFE009DAD748EFF45E08FA;
struct _4874CB709CB649921F75355CBB4A6CDD;
struct _4952B9873E48B84CD6F4372AC683C647;
struct _49CD7323AA35D3C00204BB7AA8563FFA;
struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38;
struct _4CE3C6CFBB2F191E29A1B4952A0683B3;
struct _4F60ECD4258FF26BBA8BD131C8AAF615;
struct _50092E5B8D5585E25A36D2D7AA7D11CF;
struct _511A31EFEAABA2548CBC69D58C296B4A;
struct _52BD71AC0F61B53F3E44045ED088295E;
union _52E42AF55B98D6DF1D491C96B8589219;
struct _5687B37E6A0F56297A2BB22AF6770AC6;
struct _5738CA44FE4A305B347403BC29DEBFB1;
union _57C85DECF0FD0199FAFF37B7119884AE;
struct _588C2BE90DB58BC312EC5D0109822B62;
struct _58C2C1BF6568EE28BD9B872E6BA03976;
struct _58C398469581E4FCDD5ADAF6870FB0ED;
struct _58E0F274DC6232A5BB94C8FA4256266B;
struct _5960E7280C1CD3895029C6009DE30C9A;
struct _59D180E16117F59D65359090B51374E6;
union _5AC28848A8A0188E71C0B88AB8CF796B;
struct _5C0C72291B37B22FE700A61795928759;
struct _5C25098378D11CF2DF13A353B46EE415;
struct _5C484BA576E4B3479DA7CECC9170D175;
struct _5CC485201744F683BFCAFBF5CC04CDB7;
struct _5D5BF4B99560B17B9B110B9D66DCBC97;
struct _5DBE423D59383EF3676E2D6AC9F8E7EA;
struct _5DC41656C27EA70C267F54907B5957CB;
union _5F879E5D7F7731C83E6AA76CA640BB1B;
struct _60326525EFFC6265B33A0784E3C361D7;
struct _61992E1E6DA7B91ECC7FA4A74B115A04;
struct _61B889227CECAFED4E8A477D21B34BC9;
struct _6283893B713888864804C588D87395BB;
struct _62EC1DAD6DB92F8723AD0A50B2259449;
struct _6354F15A6C1C612C283F299C530B649A;
union _644E466E06576D194C6182F3C91B6C45;
struct _65212D604C3568820517740B7202AE45;
struct _65758D9D43B54B363A052B56EC34040F;
struct _6652B21352113B30C39F76850DA69899;
struct _66B5A26201EC17B1A46E254DD42DACEF;
struct _66EE77830E735B4EF58A5F76D8ADF8E5;
struct _683A07C7E5B3B29A9EBE9FB3AE677E07;
struct _683A376D3D72D8A4C1C01AE0B36D8AA2;
struct _6950E4854C03824D44DF624674A695D1;
struct _69DAD432D0597BAB6A67398C913F94DB;
struct _6AFAE163AB7E9AE51B9FB2136B2CBA4E;
struct _6C6AB21879699522A68F36BDADA97F41;
struct _6D2254E53597AC8CE26BF57895A6DFF7;
struct _6D499679CD08099A5FDFDFD45568A323;
struct _6E70C678EEF4FE821533C3EEF387F3E8;
struct _6F312F6C8B75A1ED7F97F8719E9B642A;
struct _705BCFC90ADC6A58B0FDE7ED53396BD1;
struct _70BF96555A8221A8BC520C987124981D;
struct _70EF98671D92E01A751E5EFF82E819E9;
struct _70FDF56272F5970FD1BEEDD1849B3C69;
struct _70FE3ED39A29D5613E00A3E72F8FD4C3;
struct _71862E795461F7636CC2839B33F62969;
struct _72295A7541EC936D47FC3642EE72298B;
struct _72F2A3C647F25D7F0ECCF03C491B3ECA;
struct _7300D6D0160F27FB0DC605F404D9E579;
struct _74061E8FA51BA29473CFAA122BBAB1AC;
struct _7545F1A067A9FBB43FDF50E78E6B08BD;
struct _756B7C543A2D8873FCA38AB7A21F7B82;
struct _7644B9603AEA08EBF4DF4A983BB6B237;
struct _7684FB82DC2359E8867448D749E28870;
struct _76984A67E2D58AA25A49E08E8F9C1198;
struct _76E0DBF45CB9E280DCDAD06E7D8FE87F;
struct _782F046A0E8041278EBDE36B024DE05B;
struct _78DD00BDF4D9248AAFB252631B04B74F;
struct _7909BF26B031C365F3B32F82E7366E93;
struct _793203A904263AF632B64217160A3CD4;
struct _797ABA875A7F80AEFE23C6BF7D56B10A;
struct _7A6011D9BCD953C4A60C0773422E3F2A;
struct _7ADE47B00230EF5EBD78FEDFCEB95499;
union _7BE17F41E2ABE62BCFC5B0B03F418DA3;
struct _7CD0DE64846C1F4E244BDF2230E7B4C4;
struct _7CE74CE74CF979B93E9F8A54217A4B92;
struct _7D6AD1D4C0599A70ED2A75DF53A62D54;
struct _7D8FD30789366CCEA8FE3DB6E0740A33;
struct _7DB559BE1DE343E17A8A94B6F2E38031;
struct _7DEDD44825251A4EAA915BE1158FDB4F;
struct _7DF8531BA86889E182D5E2B59DD739DF;
struct _7E4D4F669364F297B2F59C7E54290CAF;
struct _7E7F9E6E46889EEDB1929991A6A7474A;
struct _7ED3E3B28A0D58F6B953DC5EB3956646;
struct _7F09F6AD7173E0292471C155D2885AEF;
struct _7F42DEB2BB5D0DE64733A8884285C23D;
struct _80E50DFA284ED4BC838B08AAD8EA99BA;
struct _81F87192090A4BA4742125C4E2A912AF;
struct _82F8C43FDAD4693C28E55E9304381917;
struct _83A144ADE81B1E4C267934DC64843ED5;
union _85601F4DDA405B3A8D51460B5AB09A10;
struct _8597D300EC808C32B843E8106ABB2EC1;
struct _862005EC9EDD7026C51E0C19A67AAE6E;
struct _8688FBDBF9FB8D670D1638B47BFC0FAD;
struct _87B38C5BC85AA4DC076D4608CF4D41BB;
union _87B5C366CEDD06D1A6AC557671C7F981;
struct _89421D30547F23217914C1D2E90C706A;
struct _89CF5CC4DDEE16BF1FDCA78B7BAB1123;
struct _8A6C4411A6AFE08051239E9D0E609899;
struct _8A8B79EBB5E366F38FEADC6BCD47EF14;
struct _8B637E45ECF54E3AF9C38EA7F99EC0BD;
struct _8B9777916333A4B8A3A60FA8F93F002E;
struct _8BB509EE23B3AF5C934691E6EB52B09A;
struct _8C3F85A0EA2F93E5FB549BFC1FBD2808;
struct _8C6ACB55671DB169C8FCCCD9E0DAFA1D;
struct _8C7301159AF0C1BFC267CBF90877013D;
struct _8C804DA91EAA1D72F3F02F1E499057D7;
struct _8D5240EB4C2C3F8FC45B3D9D0343B483;
struct _8E3D5C816F45029DFC3A1E2FB5D03F2C;
struct _8F30CF6E010BF118E26738C5B9E0B40D;
struct _9094404ECC54B56F86821B4C6C888B0E;
struct _90C95F6D8FBD31365E56BBF2FD97089A;
struct _90D6D0DC7478186808F66339FCD4C48E;
struct _90E769FB438B6A83B49CA07EC4EB3EFA;
struct _9186133EF552B6DB84C666EDEF474133;
struct _91BF47EF3F45CCDAE56826EECF9B1EE8;
struct _9223FF9C4398B5998F8B0B2319A44BF2;
struct _923DA7BE11DCB482D02B0566D8DB27AB;
struct _92AD7B8CF7589C2FF45E6AC6DF63FADA;
struct _9324B80A405C3638A757CE3525837AFF;
struct _93DD11BEAC2601A6EF0B5FEB14D3B821;
struct _947C6FA139885FA2B0DE7F2A3FDD942C;
struct _94A9993CAD7BD5ABD1D57B70615D1866;
struct _94FF0DCDFF19E9D844EB9057038515A4;
struct _9624B207E0A914870924A3D14631D94B;
struct _97DDCABA8DED8140EC93664CC20AFA42;
struct _98BEB28C79E54824F19FEAA43CA20E4E;
struct _9ADD4811563784E97592213CBF8060F3;
struct _9CC657B7E0AE245246966219C61A944E;
struct _9CDBCEE1F465C05E6C1B2E3C0329570E;
struct _9CE0644C253DBAB51052D414D7E91AF8;
struct _9EEC6D4C8F692379AA2A6356D0C3C3FC;
struct _A07373D2A5755254DCD028456AB4EC3B;
struct _A1A9A244AE7EE0CEFF363F43C752B07C;
struct _A1AF5D8F2011341D578B8F744C42EE44;
struct _A227968E8D32EBA0D259BD466BD0F746;
struct _A22BA5DB39A448CA61FD0153A48F18FB;
struct _A2F74AF90EE3AACE3322F4FF0CBF4977;
struct _A3ABF0E8F12B01D8CF792B8266628F14;
struct _A45289B030366F6A209F1D22B819A49A;
struct _A4CC0F087DE00420119DAAB092DFFA3E;
struct _A4DD02794CFF2FFACE800CDFB553DD44;
struct _A615A68A66448D8BF4E7E81F3C279570;
struct _A77A9FF834B5EBD4EC6B664E82547FE4;
struct _A796FD32A2A58348CC7057E9D7EB520D;
struct _A820875CF544015241589462689E9AE4;
struct _A89BDE8BB34616876C69A26DB46B7136;
struct _AAA3FC4CA65A0A79E764CC38F9D92130;
union _AABF73CB38EC495F6AFFF3108991DB2A;
struct _AB97F029BC7AD90C3813597C038C5112;
struct _ACEAE6F707210F0DF226FE321F0C4CF6;
struct _AD47B7B6770F26FF00FF8EF46A9765CE;
struct _ADB447A89171D7A348B94130055F93A9;
struct _B0BC4AADD5C9FF12157D028DEF0CCD6A;
struct _B2C1794739E4EE832382C8443FB3E776;
struct _B2D668220A1566F070E9D4CE9C5B369E;
struct _B6822E6B2532C41BAC9FA8CDDAB44A4D;
struct _B8380904D5E4DBEF1FA17159C4574D89;
struct _B90EAB9AC8B4BF0F295F7B6D198ACEA2;
struct _BA38072C3DF14F81D778878E553711E9;
struct _BA718A362089753A7EB60B21429558A7;
struct _BC2FB811D417144E831EE3AEA4A279C8;
struct _BC43068C8DCBA7D8F8979D82055549DE;
struct _BC7A094E99B893F962A170A802EFE988;
struct _BD5EDE25C0B1E5C449572B377A1B7D7D;
struct _BDD35E4D6D3904DAB7D4846C261BAE65;
struct _BDE91A4D4766441856A2EB7036E539BD;
struct _BE2AAA237DCCFCC05A1ABA31135D92CC;
struct _BEA4C6939D98A17C28446F73864087A3;
struct _C0A2C8317C92AEC6C65405BB0D08D817;
struct _C0E9FF9F6B7B062E990DE9E300C0D00E;
struct _C122A470DBEA2CDC41A37BACF6A49BCA;
struct _C149548EC2AEEA8856E6DF2E99B3AF78;
struct _C1DF3B0F556FA828E59A73099276FD8C;
struct _C25693052C43ED6AA003F87DB66344AA;
struct _C2DEA1EC9E907F11F9CFE09E5953DA8B;
struct _C3CAB9B290DE542345BF3A821AEDD70F;
struct _C3D536761911E1B34BFF5DAB2CC3A2E9;
struct _C568E0E755FFC2BCAF75367048F0EAC6;
struct _C588D60136F5233389A280E70F7EA459;
struct _C5C9E4429F4E5976A7E6A04308F34D53;
struct _C60E957D81AACC99A9C8D1688EAC55F2;
struct _C7C46F6CCBD2CAD1FCFEC4764C87E3D1;
union _C9F2A16A1B5FC998B91DA494984E0FDB;
struct _CA0DACF90AABDE33CADDF7416F0C17F2;
struct _CB9F4276D477D4EDC30066925B58EE0F;
struct _CC101A5DC835CA1BB7FB5BD237B40121;
struct _CC81E267BD8B32E89ADB7AE662C05BFA;
struct _CD3C127D93F7C951E1306B8CE5D16670;
union _CEB0288F8947EE21048823F466ABF866;
struct _CFDE79073F41BFFF7E06FED73F276E8B;
struct _D0C2582348DF16EE31650672742EA602;
struct _D26D25374C75FEF3AD181CCFA77BD37F;
struct _D27293EA07A9AE13A5F9D796DF4562B3;
struct _D333B2CEDD563FFBEB75B63E07F81E15;
struct _D421F65DCC699F7A3DD5C4DC8797164D;
struct _D4B41BFB0D7ACAABEF7B64D0EE03F789;
struct _D611436986C6FEF0F654B123D787805F;
struct _D63E714A239F9C0D1FE2D222C2E0E7D5;
struct _D692CA7460863103343173F071E8F66B;
struct _D74CC9719E317AD446E2F62991DAE0C8;
struct _D78DF0A6BFF0F3E53FB1F17463D2E937;
struct _D890D4C8B96B04D8C981ECF31CD55F01;
struct _D916DB49F0BCC31D2F37C460432A7C94;
struct _DA63D2C084DFF8EF53A1633F272A983E;
struct _DB6DF50B4F389C31260AEE4712B8E725;
struct _DC1848BC535E57FD034836B06DEEA43E;
struct _DC731844EB8703AC39E0F1B64989CDCD;
struct _DCCCDBDB2D2AC461237A75FB18C0449E;
struct _DCD76CF5A248684E95EEC87F56AA655C;
struct _DD2E0983FBF83F36606C69DABA2BC276;
struct _DE8A226FBF6958721EC6E17746E96A38;
struct _DEC76BDFA461320EB33154E3BA44F85F;
struct _DF483159CAAEA82745063FD51FDE02D7;
struct _E1FC672EFA0154DDDEED24E20FAA5FC7;
struct _E21F85AFDEE9EAF37885ADBF8938BB0C;
struct _E2C7760653C2B7B798640D9B30FB3CE4;
struct _E3900F4E8C66B34C84E740787FDB0DE9;
struct _E3EDD7A8EB9A8A8EC907A9BA28720893;
struct _E42E7BED0EE5193A4D0BC9D45E2008A3;
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09;
struct _E5266EB545CAD3D38D115197841707E4;
struct _E6EEE8D03854377210BB1626C10183C8;
struct _E76253F876E841F225888AB457FD0286;
struct _E7808ED52D89E2C9F1492EE2222DF379;
struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1;
struct _E9EAD05D222C1BBF08E4876BE3047475;
struct _EA831C4C2E16EF6F2B7E490157D80D27;
struct _EA96C5F0D9445AECD5022D472819168D;
struct _EAA2A559B48BCBAE81109D6C3EFDA87C;
struct _EADE59A3AB4D211471738C1C0A1C48E6;
struct _EAF9C7AE235510435B672EB36E720462;
struct _EB59546A6B00F9787175E0D2790469DD;
struct _EC5D1C1BD51CCAB9AF6F5AE0D6E88016;
struct _EC8EE2E9AF7D4EC32726A7FD632A186D;
struct _EF67D941BFA119366B947DED69649A3B;
struct _EF98EE567420140E285BF0657F46953F;
struct _EFE0F4933F551C6F216DF753EC3D85D4;
struct _F0080E258AF97822278D302FBC4D344F;
struct _F10D036DAB5DBA0B4D269BB7AEDCBE71;
struct _F10EAF12E46EBA994735C587F3E497C7;
struct _F1FF9EB17A5B0DC512AB60E4FE6215DC;
struct _F2AFD13852ACA75C0D1B7913E08A9A3F;
struct _F40F1746FC5A0A350E7B6DA8E0494300;
struct _F4219B4F960B4E0EA54950CBBE2CC12A;
struct _F42371D36A819E0C8DFBAA8BF3769AB0;
struct _F4E2A3B3EF6C4FAA4EC9C87B4A54D83E;
struct _F6CC20CF8176C211D0C88E599FF300CF;
struct _F76776D9748BF04A28B27A81EDBC1B75;
struct _F77B4E368325CF7BDE015CEDC90789C7;
struct _F867B4C5F172AA4F41F7BD1464BC5D23;
struct _FB10B385A80E8C43E2FAF14F8CAB4B13;
struct _FB1D2264C317C52716420591CB70B7FC;
struct _FB9D1F30B538457F25D66F947CEA1060;
struct _FBE7179BAB40555F1A13AD3C5BC3BB71;
struct _FDC653A8F1B81D585EA1877B866731F7;
struct _FEF45AADF86B3C581868F0239CC1F2BD;
struct HTMLOptionButtonElementEventsVtbl;
struct ITransactionImportWhereaboutsVtbl;
struct DispIHTMLOptionButtonElementVtbl;
struct IASQLOLEUserDefinedDatatypesVtbl;
struct IDtcLuRecoveryInitiatedByDtcVtbl;
struct IInternetHostSecurityManagerVtbl;
struct ITransactionVoterBallotAsyncVtbl;
struct ITransactionVoterNotifyAsyncVtbl;
struct _CERT_KEY_USAGE_RESTRICTION_INFO;
struct _DEV_BROADCAST_DEVICEINTERFACE_A;
struct _DEV_BROADCAST_DEVICEINTERFACE_W;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _TRUSTED_DOMAIN_AUTH_INFORMATION;
struct _TRUSTED_DOMAIN_FULL_INFORMATION;
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA;
struct _avioldindex___avioldindex_entry;
struct _userSTGMEDIUM___STGMEDIUM_UNION;
struct tagMIXERCONTROLDETAILS_LISTTEXTA;
struct tagMIXERCONTROLDETAILS_LISTTEXTW;
struct ADOConnectionConstruction15Vtbl;
struct DispIHTMLInputButtonElementVtbl;
struct IASQLOLEUserDefinedDatatypeVtbl;
struct IActiveScriptParseProcedureVtbl;
struct IAgentAudioOutputPropertiesVtbl;
struct IAgentSpeechInputPropertiesVtbl;
struct IBPCEmailMessagesCollectionVtbl;
struct ICertEncodeSampleStructure1Vtbl;
struct ICertEncodeSampleStructure2Vtbl;
struct IDirectDrawMediaSampleAllocator;
struct IDtcLuRecoveryInitiatedByLuVtbl;
struct IDtcLuRecoveryInitiatedByLuWork;
struct IDtcLuSubordinateDtcFactoryVtbl;
struct IEDKVirtualStreamOnPropertyVtbl;
struct IExchangeImportHierarchyChanges;
struct IGetClusterNetInterfaceInfoVtbl;
struct IJavaEnumRemoteBooleanValueVtbl;
struct IOleInPlaceObjectWindowlessVtbl;
struct IRemoteDebugManagerCallbackVtbl;
struct ISharedPropertyGroupManagerVtbl;
struct IShellIconOverlayIdentifierVtbl;
struct ITransactionEnlistmentAsyncVtbl;
struct ITransactionReceiverFactoryVtbl;
struct IXMLElementNotificationSinkVtbl;
struct OLEDBSimpleProviderListenerVtbl;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _IPX_TRAFFIC_FILTER_GLOBAL_INFO;
struct _SecPkgContext_IssuerListInfoEx;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY;
struct __MIDL_IH26XEncoderControl_0001;
struct creative_fastspeech10format_tag;
struct tagHOSTSEC_DISPATCH_VERSION_1_1;
struct tagHOSTSEC_DISPATCH_VERSION_1_2;
struct HTMLInputFileElementEventsVtbl;
struct HTMLInputTextElementEventsVtbl;
struct IAMCopyCaptureFileProgressVtbl;
struct IASQLOLEIntegratedSecurityVtbl;
struct IActiveScriptParseProcedureOld;
struct IActiveScriptSiteInterruptPoll;
struct IBPCHistoryItemsCollectionVtbl;
struct IDirect3DRMProgressiveMeshVtbl;
struct IExchExtAttachedFileEventsVtbl;
struct IExchangeImportContentsChanges;
struct IHTMLStyleSheetRulesCollection;
struct IHTMLStyleSheetsCollectionVtbl;
struct IID_IResourceManagerClientVtbl;
struct IJavaEnumRemoteDoubleValueVtbl;
struct IJavaEnumRemoteThreadGroupVtbl;
struct IMSAdminCryptoCapabilitiesVtbl;
struct ITAddressEventNotificationVtbl;
struct ITMultiChannelNotificationVtbl;
struct ITransactionTransmitterFactory;
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA;
struct _CRYPT_TIME_STAMP_REQUEST_INFO;
struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct _MPR40_ROUTING_CHARACTERISTICS;
struct _MPR40_SERVICE_CHARACTERISTICS;
struct _MPR50_ROUTING_CHARACTERISTICS;
struct _MPR50_SERVICE_CHARACTERISTICS;
struct _POLICY_DOMAIN_PUBLIC_KEY_INFO;
struct _SP_DEVINFO_LIST_DETAIL_DATA_A;
struct _SP_DEVINFO_LIST_DETAIL_DATA_W;
struct _SecPkgCred_SupportedProtocols;
struct _TRUSTED_DOMAIN_INFORMATION_EX;
struct __MIDL_IH26XEncodeOptions_0001;
struct creative_fastspeech8format_tag;
struct mediaspace_adpcmwaveformat_tag;
struct tagSOLE_AUTHENTICATION_SERVICE;
struct ADOConnectionConstructionVtbl;
struct DispIHTMLInputFileElementVtbl;
struct DispIHTMLInputTextElementVtbl;
struct HTMLOptionButtonElementEvents;
struct HTMLStyleSheetRulesCollection;
struct IADsFileServiceOperationsVtbl;
struct IASQLOLERegisteredServersVtbl;
struct IConnectionPointContainerVtbl;
struct IDirectSoundCaptureBufferVtbl;
struct IDtcLuRmEnlistmentFactoryVtbl;
struct IHTMLOptionElementFactoryVtbl;
struct IJavaEnumRemoteFloatValueVtbl;
struct IJavaEnumRemoteShortValueVtbl;
struct IOleInPlaceSiteWindowlessVtbl;
struct IProvideMultipleClassInfoVtbl;
struct ITransactionExportFactoryVtbl;
struct ITransactionImportWhereabouts;
struct ITransactionOutcomeEventsVtbl;
struct ITransactionResourceAsyncVtbl;
struct IXAResourceManagerFactoryVtbl;
struct _CERT_BASIC_CONSTRAINTS2_INFO;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _IPX_STATIC_NETBIOS_NAME_INFO;
struct _MEMORY_BASIC_INFORMATION_VLM;
struct _NTMS_CHANGERTYPEINFORMATIONA;
struct _NTMS_CHANGERTYPEINFORMATIONW;
struct _NTMS_NOTIFICATIONINFORMATION;
struct _POLICY_AUDIT_FULL_QUERY_INFO;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _SQL_CONNECT_CONNECTED_PARAMS;
struct _SecPkgContext_ConnectionInfo;
struct _SecPkgContext_IssuerListInfo;
struct _SecPkgContext_PasswordExpiry;
struct _WSH_LOOKUP_NETDEF_ON_ADAPTER;
struct __MIDL_IH26XVideoEffects_0002;
struct __MIDL___MIDL__intf_0000_0002;
struct __MIDL___MIDL__intf_0000_0003;
struct creative_fastspeechformat_tag;
struct linemediacontrolcallstate_tag;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct tagEMRCREATEDIBPATTERNBRUSHPT;
struct tagNTSEC_DISPATCH_VERSION_1_1;
struct tagNTSEC_DISPATCH_VERSION_1_2;
struct ADORecordsetConstructionVtbl;
union CLUSPROP_REQUIRED_DEPENDENCY;
struct CLUSPROP_RESOURCE_CLASS_INFO;
struct ClusNetworkNetInterfacesVtbl;
struct DispIHTMLBaseFontElementVtbl;
struct DispIHTMLFieldSetElementVtbl;
struct DispIHTMLFrameSetElementVtbl;
struct DispIHTMLOptionButtonElement;
struct DispIHTMLTextAreaElementVtbl;
struct HTMLControlElementEventsVtbl;
struct HTMLMarqueeElementEventsVtbl;
struct IADsPrintQueueOperationsVtbl;
struct IASQLOLERegisteredServerVtbl;
struct IASQLOLEStoredProceduresVtbl;
struct IASQLOLEUserDefinedDatatypes;
struct IDirect3DRMViewportArrayVtbl;
struct IDirectDrawSurfaceKernelVtbl;
struct IDtcLuRecoveryInitiatedByDtc;
struct IDtcLuSubordinateDtcSinkVtbl;
struct IExchExtAdvancedCriteriaVtbl;
struct IExchExtModelessCallbackVtbl;
struct IExchangeRuleExtCallbackVtbl;
struct IHTMLFontNamesCollectionVtbl;
struct IHTMLFontSizesCollectionVtbl;
struct IHTMLImageElementFactoryVtbl;
struct IHTMLMimeTypesCollectionVtbl;
struct IHTMLOptionButtonElementVtbl;
struct IInternetHostSecurityManager;
struct IInternetSecurityManagerVtbl;
struct IInternetSecurityMgrSiteVtbl;
struct IJavaEnumRemoteByteValueVtbl;
struct IJavaEnumRemoteCharValueVtbl;
struct IJavaEnumRemoteLongValueVtbl;
struct IPersistMediaPropertyBagVtbl;
struct ITransactionVoterBallotAsync;
struct ITransactionVoterFactoryVtbl;
struct ITransactionVoterNotifyAsync;
struct IUniformResourceLocatorAVtbl;
struct IUniformResourceLocatorWVtbl;
struct IWCPropertySheetCallbackVtbl;
struct _CERT_AUTHORITY_KEY_ID2_INFO;
struct _CERT_BASIC_CONSTRAINTS_INFO;
struct _CERT_SAMPLE_STRUCTURE1_INFO;
struct _CERT_SAMPLE_STRUCTURE2_INFO;
struct _CHANGER_READ_ELEMENT_STATUS;
struct _CRYPT_KEY_SIGN_MESSAGE_PARA;
struct _DTUNE_TVX_CONTROLEventsVtbl;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct _HTTP_FILTER_PREPROC_HEADERS;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_LOAD_CONFIG_DIRECTORY;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _LSA_ENUMERATION_INFORMATION;
struct _NTMS_LIBREQUESTINFORMATIONA;
struct _NTMS_LIBREQUESTINFORMATIONW;
struct _NTMS_STORAGESLOTINFORMATION;
struct _POLICY_DOMAIN_PASSWORD_INFO;
struct _POLICY_LSA_SERVER_ROLE_INFO;
struct _POLICY_PRIVILEGE_DEFINITION;
struct _PRINTER_NOTIFY_OPTIONS_TYPE;
struct _RECOVERY_AGENT_INFORMATIONA;
struct _RECOVERY_AGENT_INFORMATIONW;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _STATIC_SERVICES_TABLE_INDEX;
struct _WINDBG_OLDKD_EXTENSION_APIS;
struct __MIDL_TriggerPublicRPC_0001;
struct __MIDL_TriggerPublicRPC_0002;
struct __MIDL_TriggerPublicRPC_0003;
struct __MIDL_TriggerPublicRPC_0004;
struct __MIDL_TriggerPublicRPC_0005;
struct audiofile_af10waveformat_tag;
struct audiofile_af36waveformat_tag;
struct creative_adpcmwaveformat_tag;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct tagEMREXTCREATEFONTINDIRECTW;
struct ADOConnectionConstruction15;
struct CCertEncodeSampleStructure1;
struct CCertEncodeSampleStructure2;
struct DIDEVICEOBJECTINSTANCE_DX3A;
struct DIDEVICEOBJECTINSTANCE_DX3W;
struct DispIHTMLCommentElementVtbl;
struct DispIHTMLControlElementVtbl;
struct DispIHTMLInputButtonElement;
struct DispIHTMLIsIndexElementVtbl;
struct DispIHTMLMarqueeElementVtbl;
struct DispIHTMLUnknownElementVtbl;
struct HTMLButtonElementEventsVtbl;
struct HTMLObjectElementEventsVtbl;
struct HTMLSelectElementEventsVtbl;
struct HTMLTextContainerEventsVtbl;
struct IASQLOLEStoredProcedureVtbl;
struct IASQLOLESystemDatatypesVtbl;
struct IASQLOLEUserDefinedDatatype;
struct IActiveScriptParseProcedure;
struct IActiveScriptSiteWindowVtbl;
struct IAgentAudioOutputProperties;
struct IAgentCtlCommandsWindowVtbl;
struct IAgentPrivateNotifySinkVtbl;
struct IAgentSpeechInputProperties;
struct IBPCEmailMessagesCollection;
struct ICertEncodeSampleStructure1;
struct ICertEncodeSampleStructure2;
struct IDirect3DRMAnimationSetVtbl;
struct IDirect3DRMInterpolatorVtbl;
struct IDirect3DRMMeshBuilder2Vtbl;
struct IDirect3DRMPicked2ArrayVtbl;
struct IDirectDrawColorControlVtbl;
struct IDirectDrawStreamSampleVtbl;
struct IDtcLuRecoveryInitiatedByLu;
struct IDtcLuSubordinateDtcFactory;
struct IEDKVirtualStreamOnProperty;
struct IEnumRemoteBooleanValueVtbl;
struct IGetClusterNetInterfaceInfo;
struct IGetClusterResourceInfoVtbl;
struct IHTMLInputButtonElementVtbl;
struct IHTMLInputHiddenElementVtbl;
struct IJavaEnumRemoteBooleanValue;
struct IJavaEnumRemoteIntValueVtbl;
struct IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceObjectWindowless;
struct IRemoteDebugManagerCallback;
struct IResourceManagerFactoryVtbl;
struct ISharedPropertyGroupManager;
struct IShellIconOverlayIdentifier;
struct ITCallTonesNotificationVtbl;
struct ITTAPIEventNotificationVtbl;
struct ITransactionEnlistmentAsync;
struct ITransactionReceiverFactory;
struct ITransactionTransmitterVtbl;
struct IXMLElementNotificationSink;
struct OLEDBSimpleProviderListener;
struct _BY_HANDLE_FILE_INFORMATION;
struct _CERT_AUTHORITY_KEY_ID_INFO;
struct _CERT_POLICY_QUALIFIER_INFO;
struct _CMSG_ENCRYPTED_ENCODE_INFO;
struct _CMSG_ENVELOPED_ENCODE_INFO;
struct _CONSOLE_SCREEN_BUFFER_INFO;
struct _CRYPT_ALGORITHM_IDENTIFIER;
struct _CRYPT_ATTRIBUTE_TYPE_VALUE;
struct _CRYPT_DECRYPT_MESSAGE_PARA;
struct _CRYPT_ENCRYPT_MESSAGE_PARA;
struct _DPLMSG_GETPROPERTYRESPONSE;
struct _DPLMSG_SETPROPERTYRESPONSE;
struct _FILE_ZERO_DATA_INFORMATION;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
struct _INTERNET_CACHE_ENTRY_INFOA;
struct _INTERNET_CACHE_ENTRY_INFOW;
struct _LSA_REFERENCED_DOMAIN_LIST;
struct _NTMS_DRIVETYPEINFORMATIONA;
struct _NTMS_DRIVETYPEINFORMATIONW;
struct _NTMS_OPREQUESTINFORMATIONA;
struct _NTMS_OPREQUESTINFORMATIONW;
struct _NTMS_PARTITIONINFORMATIONA;
struct _NTMS_PARTITIONINFORMATIONW;
struct _POLICY_ACCOUNT_DOMAIN_INFO;
struct _POLICY_AUDIT_FULL_SET_INFO;
struct _POLICY_DOMAIN_LOCKOUT_INFO;
struct _POLICY_PRIMARY_DOMAIN_INFO;
struct _POLICY_REPLICA_SOURCE_INFO;
struct _QUERY_SERVICE_LOCK_STATUSA;
struct _QUERY_SERVICE_LOCK_STATUSW;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _SSL_CREDENTIAL_CERTIFICATE;
struct _SecPkgContext_PackageInfoA;
struct _SecPkgContext_PackageInfoW;
struct _SecPkgCred_CipherStrengths;
struct __MIDL_IH26XRTPControl_0001;
struct contres_vqlpcwaveformat_tag;
struct nms_vbxadpcmmwaveformat_tag;
struct phoneinitializeexparams_tag;
struct tMIXERCONTROLDETAILS_SIGNED;
struct x25_physical_link_info_sect;
struct ADOCommandConstructionVtbl;
struct DShellFolderViewEventsVtbl;
struct DispIHTMLAnchorElementVtbl;
struct DispIHTMLButtonElementVtbl;
struct DispIHTMLHeaderElementVtbl;
struct DispIHTMLIFrameElementVtbl;
struct DispIHTMLLegendElementVtbl;
struct DispIHTMLNextIdElementVtbl;
struct DispIHTMLNoShowElementVtbl;
struct DispIHTMLObjectElementVtbl;
struct DispIHTMLOptionElementVtbl;
struct DispIHTMLPhraseElementVtbl;
struct DispIHTMLScriptElementVtbl;
struct DispIHTMLSelectElementVtbl;
struct DispIHTMLTextContainerVtbl;
struct HTMLInputFileElementEvents;
struct HTMLInputTextElementEvents;
struct HTMLStyleElementEventsVtbl;
struct IADsAccessControlEntryVtbl;
struct IADsComputerOperationsVtbl;
struct IADsPrintJobOperationsVtbl;
struct IADsSecurityDescriptorVtbl;
struct IAMCopyCaptureFileProgress;
struct IAMTVAudioNotificationVtbl;
struct IASQLOLEIntegratedSecurity;
struct IASQLOLESubscriberInfoVtbl;
struct IASQLOLESystemDatatypeVtbl;
struct IASQLOLETransactionLogVtbl;
struct IAgentCtlPropertySheetVtbl;
struct IBPCHistoryItemsCollection;
struct ICertEncodeCRLDistInfoVtbl;
struct ICertEncodeStringArrayVtbl;
struct ICommandWithParametersVtbl;
struct IDirect3DExecuteBufferVtbl;
struct IDirect3DRMDeviceArrayVtbl;
struct IDirect3DRMMeshBuilderVtbl;
struct IDirect3DRMObjectArrayVtbl;
struct IDirect3DRMPickedArrayVtbl;
struct IDirect3DRMProgressiveMesh;
struct IDirect3DRMVisualArrayVtbl;
struct IDirectDrawMediaSampleVtbl;
struct IDirectDrawMediaStreamVtbl;
struct IDirectSound3DListenerVtbl;
struct IDtcLuRmEnlistmentSinkVtbl;
struct IEncodingFilterFactoryVtbl;
struct IEnumRemoteDoubleValueVtbl;
struct IEnumRemoteThreadGroupVtbl;
struct IExchExtAttachedFileEvents;
struct IExchExtPropertySheetsVtbl;
struct IExchangeExportChangesVtbl;
struct IGetClusterNetworkInfoVtbl;
struct IHTMLElementCollectionVtbl;
struct IHTMLFiltersCollectionVtbl;
struct IHTMLFramesCollection2Vtbl;
struct IHTMLPluginsCollectionVtbl;
struct IHTMLStyleSheetsCollection;
struct IID_IResourceManagerClient;
struct IJavaEnumRemoteDoubleValue;
struct IJavaEnumRemoteProcessVtbl;
struct IJavaEnumRemoteThreadGroup;
struct IMLangLineBreakConsoleVtbl;
struct IMSAdminCryptoCapabilities;
struct IObjectContextActivityVtbl;
struct IRemoteContainerObjectVtbl;
struct IRemoteProcessCallbackVtbl;
struct IResourceManagerFacadeVtbl;
struct ITAddressEventNotification;
struct ITMultiChannelNotification;
struct IWCContextMenuCallbackVtbl;
struct IWEExtendPropertySheetVtbl;
struct SharedPropertyGroupManager;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _CERT_PRIVATE_KEY_VALIDITY;
struct _CREATE_PROCESS_DEBUG_INFO;
struct _CRYPT_VERIFY_MESSAGE_PARA;
struct _DEV_BROADCAST_USERDEFINED;
struct _FULL_PTR_TO_REFID_ELEMENT;
struct _HTTP_FILTER_ACCESS_DENIED;
struct _IMAGEHLP_DUPLICATE_SYMBOL;
struct _IMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _LLC_BUFFER__LlcNextBuffer;
struct _LOCALGROUP_MEMBERS_INFO_0;
struct _LOCALGROUP_MEMBERS_INFO_1;
struct _LOCALGROUP_MEMBERS_INFO_2;
struct _LOCALGROUP_MEMBERS_INFO_3;
struct _NTMS_MEDIAPOOLINFORMATION;
struct _NTMS_MEDIATYPEINFORMATION;
struct _POLICY_DEFAULT_QUOTA_INFO;
struct _RAS_PPP_PROJECTION_RESULT;
struct _READ_ELEMENT_ADDRESS_INFO;
struct _REPARSE_POINT_INFORMATION;
struct _SCH_CRED_PUBLIC_CERTCHAIN;
struct _SECURITY_FUNCTION_TABLE_A;
struct _SECURITY_FUNCTION_TABLE_W;
struct _SEC_WINNT_AUTH_IDENTITY_A;
struct _SEC_WINNT_AUTH_IDENTITY_W;
struct _SET_PARTITION_INFORMATION;
struct _SPC_INDIRECT_DATA_CONTENT;
struct _STATIC_ROUTES_TABLE_INDEX;
struct _STORAGE_BUS_RESET_REQUEST;
struct _SecPkgContext_StreamSizes;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS;
struct _TRUSTED_POSIX_OFFSET_INFO;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct _WINDBG_OLD_EXTENSION_APIS;
struct _WINDOW_BUFFER_SIZE_RECORD;
struct _WSH_PAP_GET_SERVER_STATUS;
struct contres_cr10waveformat_tag;
struct fmtowns_snd_waveformat_tag;
struct lineagentactivityentry_tag;
struct linecalltreatmententry_tag;
struct lineinitializeexparams_tag;
struct sierra_adpcmwaveformat_tag;
struct tagEMRMODIFYWORLDTRANSFORM;
struct yamaha_adpmcwaveformat_tag;
struct ADOConnectionConstruction;
struct AM_DVDCOPY_SET_COPY_STATE;
struct ClusNodeNetInterfacesVtbl;
struct DispIHTMLBlockElementVtbl;
struct DispIHTMLDListElementVtbl;
struct DispIHTMLEmbedElementVtbl;
struct DispIHTMLFrameElementVtbl;
struct DispIHTMLInputFileElement;
struct DispIHTMLInputTextElement;
struct DispIHTMLLabelElementVtbl;
struct DispIHTMLOListElementVtbl;
struct DispIHTMLStyleElementVtbl;
struct DispIHTMLTableCaptionVtbl;
struct DispIHTMLTableSectionVtbl;
struct DispIHTMLTitleElementVtbl;
struct DispIHTMLUListElementVtbl;
struct HTMLFormElementEventsVtbl;
struct HTMLLinkElementEventsVtbl;
struct HTMLStyleSheetsCollection;
struct IADsAccessControlListVtbl;
struct IADsFileServiceOperations;
struct IADsServiceOperationsVtbl;
struct IAMAnalogVideoDecoderVtbl;
struct IAMAnalogVideoEncoderVtbl;
struct IAMDevMemoryAllocatorVtbl;
struct IAMVfwCompressDialogsVtbl;
struct IASQLOLEConfigurationVtbl;
struct IASQLOLEHistoryFilterVtbl;
struct IASQLOLERegisteredServers;
struct IASQLOLERemoteServersVtbl;
struct IASQLOLESubscriptionsVtbl;
struct IConnectionPointContainer;
struct IDDVideoPortContainerVtbl;
struct IDirect3DRMFrameArrayVtbl;
struct IDirect3DRMLightArrayVtbl;
struct IDirect3DRMUserVisualVtbl;
struct IDirectSoundCaptureBuffer;
struct IDtcLuRecoveryFactoryVtbl;
struct IDtcLuRmEnlistmentFactory;
struct IDtcToXaHelperFactoryVtbl;
struct IEnumConnectionPointsVtbl;
struct IEnumOleDocumentViewsVtbl;
struct IEnumRemoteFloatValueVtbl;
struct IEnumRemoteShortValueVtbl;
struct IExchExtMessageEventsVtbl;
struct IExchExtSessionEventsVtbl;
struct IExchangeFastTransferVtbl;
struct IGetClusterObjectInfoVtbl;
struct IGetContextPropertiesVtbl;
struct IGlobalInterfaceTableVtbl;
struct IHTMLInputFileElementVtbl;
struct IHTMLInputTextElementVtbl;
struct IHTMLOptionElementFactory;
struct IHTMLTextRangeMetricsVtbl;
struct IInternetProtocolInfoVtbl;
struct IInternetProtocolRootVtbl;
struct IInternetProtocolSinkVtbl;
struct IInternetThreadSwitchVtbl;
struct IJavaEnumRemoteFloatValue;
struct IJavaEnumRemoteObjectVtbl;
struct IJavaEnumRemoteShortValue;
struct IJavaEnumRemoteThreadVtbl;
struct IMtsTransactionEventsVtbl;
struct IOleInPlaceSiteWindowless;
struct IProvideMultipleClassInfo;
struct IRemoteContainerFieldVtbl;
struct IRowsetWithParametersVtbl;
struct ISQLRequestDiagFieldsVtbl;
struct ISpecifyPropertyPagesVtbl;
struct ITConferenceDirectoryVtbl;
struct ITransactionContextExVtbl;
struct ITransactionDispenserVtbl;
struct ITransactionExportFactory;
struct ITransactionOutcomeEvents;
struct ITransactionResourceAsync;
struct IXAResourceManagerFactory;
struct IXMLElementCollectionVtbl;
struct MS_ADDINFO_CATALOGMEMBER_;
struct RETRIEVAL_POINTERS_BUFFER;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _ACL_REVISION_INFORMATION;
struct _ACTRL_ACCESS_ENTRY_LISTA;
struct _ACTRL_ACCESS_ENTRY_LISTW;
struct _AUDIO_STREAM_CONFIG_CAPS;
struct _CERT_KEYGEN_REQUEST_INFO;
struct _CERT_KEY_ATTRIBUTES_INFO;
struct _CERT_SIGNED_CONTENT_INFO;
struct _COINSTALLER_CONTEXT_DATA;
struct _CREATE_THREAD_DEBUG_INFO;
struct _CRYPT_PROVIDER_FUNCTIONS;
struct _CRYPT_RC2_CBC_PARAMETERS;
struct _CRYPT_SMIME_CAPABILITIES;
struct _DRIVE_LAYOUT_INFORMATION;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _MEMORY_BASIC_INFORMATION;
struct _MIDL_STUBLESS_PROXY_INFO;
struct _NTMS_CHANGERINFORMATIONA;
struct _NTMS_CHANGERINFORMATIONW;
struct _OUTPUT_DEBUG_STRING_INFO;
struct _PERF_INSTANCE_DEFINITION;
struct _POLICY_AUDIT_EVENTS_INFO;
struct _POLICY_MODIFICATION_INFO;
struct _PRINTER_NOTIFY_INFO_DATA;
struct _REPARSE_GUID_DATA_BUFFER;
struct _SComparePropsRestriction;
struct _SECURITY_PACKAGE_OPTIONS;
struct _SERVICE_FAILURE_ACTIONSA;
struct _SERVICE_FAILURE_ACTIONSW;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SP_DEVICE_INTERFACE_DATA;
struct _SP_DRVINFO_DETAIL_DATA_A;
struct _SP_DRVINFO_DETAIL_DATA_W;
struct _SP_PROPSHEETPAGE_REQUEST;
struct _SP_SELECTDEVICE_PARAMS_A;
struct _SP_SELECTDEVICE_PARAMS_W;
struct _SP_UNREMOVEDEVICE_PARAMS;
struct _SecPkgContext_AuthorityA;
struct _SecPkgContext_AuthorityW;
struct _SecPkgContext_ProtoInfoA;
struct _SecPkgContext_ProtoInfoW;
struct _SecPkgContext_SessionKey;
struct _SecPkgCred_SupportedAlgs;
struct _SecPkgCredentials_NamesA;
struct _SecPkgCredentials_NamesW;
struct _TRUSTED_CONTROLLERS_INFO;
struct _TRUSTED_DOMAIN_NAME_INFO;
struct _VIDEO_STREAM_CONFIG_CAPS;
struct _WLX_DISPATCH_VERSION_1_0;
struct _WLX_DISPATCH_VERSION_1_1;
struct lineagentactivitylist_tag;
struct linemediacontroldigit_tag;
struct linemediacontrolmedia_tag;
struct tagEMRCREATEBRUSHINDIRECT;
struct tagMCI_ANIM_WINDOW_PARMSA;
struct tagMCI_ANIM_WINDOW_PARMSW;
struct tagMCI_OVLY_WINDOW_PARMSA;
struct tagMCI_OVLY_WINDOW_PARMSW;
struct tagMCI_VCR_SETAUDIO_PARMS;
struct tagMCI_VCR_SETTUNER_PARMS;
struct tagMCI_VCR_SETVIDEO_PARMS;
struct tagNMDATETIMEFORMATQUERYA;
struct tagNMDATETIMEFORMATQUERYW;
struct ADORecordsetConstruction;
struct CLUS_RESOURCE_CLASS_INFO;
struct ClusNetworkNetInterfaces;
struct ClusResTypeResourcesVtbl;
struct DPCOMPOUNDADDRESSELEMENT;
struct DispIHTMLAreaElementVtbl;
struct DispIHTMLBaseElementVtbl;
struct DispIHTMLBaseFontElement;
struct DispIHTMLBodyElementVtbl;
struct DispIHTMLDivPositionVtbl;
struct DispIHTMLFieldSetElement;
struct DispIHTMLFontElementVtbl;
struct DispIHTMLFormElementVtbl;
struct DispIHTMLFrameSetElement;
struct DispIHTMLLinkElementVtbl;
struct DispIHTMLListElementVtbl;
struct DispIHTMLMetaElementVtbl;
struct DispIHTMLParaElementVtbl;
struct DispIHTMLSpanElementVtbl;
struct DispIHTMLTextAreaElement;
struct DispIHTMLTextElementVtbl;
struct HTMLControlElementEvents;
struct HTMLInputImageEventsVtbl;
struct HTMLMarqueeElementEvents;
struct HTMLOptionElementFactory;
struct IADsPrintQueueOperations;
struct IAMBufferNegotiationVtbl;
struct IAMExtendedErrorInfoVtbl;
struct IAMTimecodeGeneratorVtbl;
struct IAMTunerNotificationVtbl;
struct IAMVfwCaptureDialogsVtbl;
struct IASQLOLEBulkCopySinkVtbl;
struct IASQLOLEConfigValuesVtbl;
struct IASQLOLEPublicationsVtbl;
struct IASQLOLEQueryResultsVtbl;
struct IASQLOLERegisteredServer;
struct IASQLOLERemoteLoginsVtbl;
struct IASQLOLERemoteServerVtbl;
struct IASQLOLEServerGroupsVtbl;
struct IASQLOLEStoredProcedures;
struct IASQLOLESubscriptionVtbl;
struct IASQLOLETransferSinkVtbl;
struct IAgentCtlAudioObjectVtbl;
struct IAgentCtlSpeechInputVtbl;
struct ICaptureGraphBuilderVtbl;
struct ICertEncodeBitStringVtbl;
struct ICertEncodeDateArrayVtbl;
struct ICertEncodeLongArrayVtbl;
struct IDirect3DRMAnimationVtbl;
struct IDirect3DRMFaceArrayVtbl;
struct IDirect3DRMViewportArray;
struct IDirect3DRMWinDeviceVtbl;
struct IDirectDrawSurfaceKernel;
struct IDirectDrawVideoPortVtbl;
struct IDirectInputDevice2AVtbl;
struct IDirectInputDevice2WVtbl;
struct IDirectSound3DBufferVtbl;
struct IDtcLuSubordinateDtcSink;
struct IDtcLuSubordinateDtcVtbl;
struct IEnumParticipantInfoVtbl;
struct IEnumRemoteByteValueVtbl;
struct IEnumRemoteCharValueVtbl;
struct IEnumRemoteLongValueVtbl;
struct IEnumTerminalClassesVtbl;
struct IExchExtAdvancedCriteria;
struct IExchExtModelessCallback;
struct IExchangeFolderRulesVtbl;
struct IExchangeManageStoreVtbl;
struct IExchangeModifyTableVtbl;
struct IExchangeRuleExtCallback;
struct IGetClusterGroupInfoVtbl;
struct IHTMLAreasCollectionVtbl;
struct IHTMLBaseFontElementVtbl;
struct IHTMLFieldSetElementVtbl;
struct IHTMLFontNamesCollection;
struct IHTMLFontSizesCollection;
struct IHTMLFrameSetElementVtbl;
struct IHTMLImageElementFactory;
struct IHTMLMimeTypesCollection;
struct IHTMLOptionButtonElement;
struct IHTMLSelectionObjectVtbl;
struct IHTMLTableRowMetricsVtbl;
struct IHTMLTextAreaElementVtbl;
struct IInternetSecurityManager;
struct IInternetSecurityMgrSite;
struct IInternetZoneManagerVtbl;
struct IJavaEnumRemoteByteValue;
struct IJavaEnumRemoteCharValue;
struct IJavaEnumRemoteFieldVtbl;
struct IJavaEnumRemoteLongValue;
struct IMLangConvertCharsetVtbl;
struct IObjectAccessControlVtbl;
struct IOleUILinkContainerAVtbl;
struct IOleUILinkContainerWVtbl;
struct IPX_ADAPTER_BINDING_INFO;
struct IPerPropertyBrowsingVtbl;
struct IPersistMediaPropertyBag;
struct IPersistPropertyBag2Vtbl;
struct IRemoteBooleanObjectVtbl;
struct IRemoteComponentUtilVtbl;
struct IResourceManagerSinkVtbl;
struct IRichEditOleCallbackVtbl;
struct IRoleAssociationUtilVtbl;
struct IRowsetChangeExtInfoVtbl;
struct IRowsetChapterMemberVtbl;
struct ISharedPropertyGroupVtbl;
struct IShellFolderViewDualVtbl;
struct ITBasicAudioTerminalVtbl;
struct ITrackFileRestrictedVtbl;
struct ITransactionReceiverVtbl;
struct ITransactionResourceVtbl;
struct ITransactionVoterFactory;
struct IUniformResourceLocatorA;
struct IUniformResourceLocatorW;
struct IWCPropertySheetCallback;
struct IWEExtendContextMenuVtbl;
struct _BROWSER_EMULATED_DOMAIN;
struct _CHANGER_EXCHANGE_MEDIUM;
struct _CMSG_HASHED_ENCODE_INFO;
struct _CMSG_SIGNED_ENCODE_INFO;
struct _CMSG_SIGNER_ENCODE_INFO;
struct _CRYPT_HASH_MESSAGE_PARA;
struct _CRYPT_PROVIDER_PRIVDATA;
struct _CRYPT_REGISTER_ACTIONID;
struct _CRYPT_SIGN_MESSAGE_PARA;
struct _CTL_VERIFY_USAGE_STATUS;
struct _DSETUP_CB_FILECOPYERROR;
struct _DTUNE_TVX_CONTROLEvents;
struct _EXIT_PROCESS_DEBUG_INFO;
struct _EXTENSION_CONTROL_BLOCK;
struct _FILE_NOTIFY_INFORMATION;
struct _HSE_SEND_HEADER_EX_INFO;
struct _IMAGE_DEBUG_INFORMATION;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IPX_TRAFFIC_FILTER_INFO;
struct _ImageArchitectureHeader;
struct _LOCALGROUP_USERS_INFO_0;
struct _NTMS_LIBRARYINFORMATION;
struct _NTMS_OBJECTINFORMATIONA;
struct _NTMS_OBJECTINFORMATIONW;
struct _PERF_COUNTER_DEFINITION;
struct _RSVP_FILTERSPEC_V6_FLOW;
struct _RTCP_PARTICIPANT_REPORT;
struct _RemoteMaintenanceStatus;
struct _SAP_SERVICE_FILTER_INFO;
struct _SCH_CRED_SECRET_PRIVKEY;
struct _SERVER_TRANSPORT_INFO_0;
struct _SERVER_TRANSPORT_INFO_1;
struct _SERVER_TRANSPORT_INFO_2;
struct _SERVICE_TYPE_VALUE_ABSA;
struct _SERVICE_TYPE_VALUE_ABSW;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct _UPDATE_COMPLETE_MESSAGE;
struct csimaadpcmwaveformat_tag;
struct digiadpcmmwaveformat_tag;
struct g721_adpcmwaveformat_tag;
struct g723_adpcmwaveformat_tag;
struct linemediacontroltone_tag;
struct mpeglayer3waveformat_tag;
struct tagAM_SAMPLE2_PROPERTIES;
struct tagCInterfaceProxyHeader;
struct tagDVD_PLAYBACK_LOCATION;
struct tagEMRSCALEVIEWPORTEXTEX;
struct tagEMRSETCOLORADJUSTMENT;
struct tagMCI_ANIM_UPDATE_PARMS;
struct tagMCI_WAVE_DELETE_PARMS;
struct tagMQPROPERTYRESTRICTION;
struct tagPIXELFORMATDESCRIPTOR;
struct truespeechwaveformat_tag;
struct CLUSPROP_PARTITION_INFO;
struct CLUSPROP_RESOURCE_CLASS;
struct CLUSPROP_ULARGE_INTEGER;
struct ClusResDependenciesVtbl;
struct DIDEVICEOBJECTINSTANCEA;
struct DIDEVICEOBJECTINSTANCEW;
struct DShellWindowsEventsVtbl;
struct DispIHTMLCommentElement;
struct DispIHTMLControlElement;
struct DispIHTMLDivElementVtbl;
struct DispIHTMLImgElementVtbl;
struct DispIHTMLInputImageVtbl;
struct DispIHTMLIsIndexElement;
struct DispIHTMLMapElementVtbl;
struct DispIHTMLMarqueeElement;
struct DispIHTMLUnknownElement;
struct HTMLButtonElementEvents;
struct HTMLImageElementFactory;
struct HTMLObjectElementEvents;
struct HTMLOptionButtonElement;
struct HTMLSelectElementEvents;
struct HTMLTextContainerEvents;
struct IAMDevMemoryControlVtbl;
struct IAMMultiMediaStreamVtbl;
struct IAMVideoCompressionVtbl;
struct IASQLOLEAlertSystemVtbl;
struct IASQLOLEApplicationVtbl;
struct IASQLOLEConfigValueVtbl;
struct IASQLOLEPublicationVtbl;
struct IASQLOLERemoteLoginVtbl;
struct IASQLOLEServerGroupVtbl;
struct IASQLOLEStoredProcedure;
struct IASQLOLESystemDatatypes;
struct IActiveScriptSiteWindow;
struct IAgentCommandWindowVtbl;
struct IAgentCtlCharactersVtbl;
struct IAgentCtlCommandsWindow;
struct IAgentPrivateNotifySink;
struct IAgentPropertySheetVtbl;
struct IBindStatusCallbackVtbl;
struct IBriefcaseInitiatorVtbl;
struct IClusterApplicationVtbl;
struct IConfigInterleavingVtbl;
struct IDBPromptInitializeVtbl;
struct IDirect3DRMAnimationSet;
struct IDirect3DRMInterpolator;
struct IDirect3DRMMaterialVtbl;
struct IDirect3DRMMeshBuilder2;
struct IDirect3DRMPicked2Array;
struct IDirect3DRMTexture2Vtbl;
struct IDirect3DRMViewportVtbl;
struct IDirectDrawColorControl;
struct IDirectDrawStreamSample;
struct IDirectDrawSurface2Vtbl;
struct IDirectDrawSurface3Vtbl;
struct IDirectInputDeviceAVtbl;
struct IDirectInputDeviceWVtbl;
struct IDirectSoundCaptureVtbl;
struct IDockingWindowFrameVtbl;
struct IEnumMediaTerminalsVtbl;
struct IEnumRemoteBooleanValue;
struct IEnumRemoteIntValueVtbl;
struct IEnumSTATPROPSETSTGVtbl;
struct IExchangeFolderACLsVtbl;
struct IExchangeRuleActionVtbl;
struct IExternalConnectionVtbl;
struct IGetClusterDataInfoVtbl;
struct IGetClusterNodeInfoVtbl;
struct IGetClusterResourceInfo;
struct IH26XEncoderControlVtbl;
struct IHTMLCommentElementVtbl;
struct IHTMLControlElementVtbl;
struct IHTMLInputButtonElement;
struct IHTMLInputHiddenElement;
struct IHTMLIsIndexElementVtbl;
struct IHTMLMarqueeElementVtbl;
struct IHTMLStyleSheetRuleVtbl;
struct IHTMLUnknownElementVtbl;
struct IHlinkBrowseContextVtbl;
struct IInstallAudioCodecsVtbl;
struct IInstallVideoCodecsVtbl;
struct IJavaEnumRemoteIntValue;
struct IMAPIFormAdviseSinkVtbl;
struct IMAPIViewAdviseSinkVtbl;
struct IMSAdminReplicationVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceUIWindowVtbl;
struct IP_ADAPTER_BINDING_INFO;
struct IPersistPropertyBagVtbl;
struct IProcessDestroyHackVtbl;
struct IPropertyNotifySinkVtbl;
struct IPropertySetStorageVtbl;
struct IReconcilableObjectVtbl;
struct IReconcileInitiatorVtbl;
struct IRemoteDebugManagerVtbl;
struct IRemoteDoubleObjectVtbl;
struct IResourceManagerFactory;
struct IRunningObjectTableVtbl;
struct ITCallTonesNotification;
struct ITTAPIEventNotification;
struct ITransactionContextVtbl;
struct ITransactionOptionsVtbl;
struct ITransactionTransmitter;
struct IWindowForBindingUIVtbl;
struct OLEDBSimpleProviderVtbl;
struct _BROWSER_STATISTICS_100;
struct _BROWSER_STATISTICS_101;
struct _CERT_REVOCATION_STATUS;
struct _CHANGER_ELEMENT_STATUS;
struct _CMSG_CTRL_DECRYPT_PARA;
struct _CRYPT_SMIME_CAPABILITY;
struct _DADV_CONTROLEventsVtbl;
struct _DISK_CONTROLLER_NUMBER;
struct _DistributedLockRequest;
struct _EXIT_THREAD_DEBUG_INFO;
struct _FILE_IN_CABINET_INFO_A;
struct _FILE_IN_CABINET_INFO_W;
struct _GET_CHANGER_PARAMETERS;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY64;
struct _IPX_MIB_GET_INPUT_DATA;
struct _IPX_MIB_SET_INPUT_DATA;
struct _IPX_SPXCONNSTATUS_DATA;
struct _ImageArchitectureEntry;
struct _MESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_ENTRY;
struct _METADATA_GETALL_RECORD;
struct _NTMS_DRIVEINFORMATIONA;
struct _NTMS_DRIVEINFORMATIONW;
struct _NTMS_IEDOORINFORMATION;
struct _NTMS_IEPORTINFORMATION;
struct _POLICY_DNS_DOMAIN_INFO;
struct _POLICY_PD_ACCOUNT_INFO;
struct _PRINTER_NOTIFY_OPTIONS;
struct _PRINTPROCESSOR_INFO_1A;
struct _PRINTPROCESSOR_INFO_1W;
struct _PROTOCOL_SPECIFIC_DATA;
struct _REMSECURITY_ATTRIBUTES;
struct _RIP_MIB_GET_INPUT_DATA;
struct _RIP_MIB_SET_INPUT_DATA;
struct _RSVP_FILTERSPEC_V4_GPI;
struct _RSVP_FILTERSPEC_V6_GPI;
struct _SAP_MIB_GET_INPUT_DATA;
struct _SAP_MIB_SET_INPUT_DATA;
struct _SERVICE_TYPE_INFO_ABSA;
struct _SERVICE_TYPE_INFO_ABSW;
struct _SE_IMPERSONATION_STATE;
struct _SP_CLASSIMAGELIST_DATA;
struct _SP_CLASSINSTALL_HEADER;
struct _SP_DETECTDEVICE_PARAMS;
struct _SP_DEVINSTALL_PARAMS_A;
struct _SP_DEVINSTALL_PARAMS_W;
struct _SP_REMOVEDEVICE_PARAMS;
struct _SecPkgContext_KeyInfoA;
struct _SecPkgContext_KeyInfoW;
struct _SecPkgContext_Lifespan;
struct _WIN_TRUST_SUBJECT_FILE;
struct _WKSTA_TRANSPORT_INFO_0;
struct _XMIT_ROUTINE_QUINTUPLE;
struct _tagChannelCategoryInfo;
struct _tagChannelShortcutInfo;
struct dvi_adpcmwaveformat_tag;
struct ima_adpcmwaveformat_tag;
struct lineagentgroupentry_tag;
struct linetranslateoutput_tag;
struct tagCInterfaceStubHeader;
struct tagEMRSETDIBITSTODEVICE;
struct tagEMRSETPALETTEENTRIES;
struct tagEMRSETWORLDTRANSFORM;
struct tagINITCOMMONCONTROLSEX;
struct tagLAYERPLANEDESCRIPTOR;
struct tagMCI_ANIM_OPEN_PARMSA;
struct tagMCI_ANIM_OPEN_PARMSW;
struct tagMCI_GETDEVCAPS_PARMS;
struct tagMCI_OVLY_LOAD_PARMSA;
struct tagMCI_OVLY_LOAD_PARMSW;
struct tagMCI_OVLY_OPEN_PARMSA;
struct tagMCI_OVLY_OPEN_PARMSW;
struct tagMCI_OVLY_SAVE_PARMSA;
struct tagMCI_OVLY_SAVE_PARMSW;
struct tagMCI_VCR_ESCAPE_PARMS;
struct tagMCI_VCR_RECORD_PARMS;
struct tagMCI_VCR_SIGNAL_PARMS;
struct tagMCI_VCR_STATUS_PARMS;
struct tagMCI_VD_ESCAPE_PARMSA;
struct tagMCI_VD_ESCAPE_PARMSW;
struct tagMCI_WAVE_OPEN_PARMSA;
struct tagMCI_WAVE_OPEN_PARMSW;
struct tagNMDATETIMEWMKEYDOWNA;
struct tagNMDATETIMEWMKEYDOWNW;
struct ADOCommandConstruction;
struct CCertEncodeCRLDistInfo;
struct CCertEncodeStringArray;
union CLUSPROP_BUFFER_HELPER;
struct ClusGroupResourcesVtbl;
struct ConnectionEventsVtVtbl;
struct DShellFolderViewEvents;
struct DWebBrowserEvents2Vtbl;
struct DataSourceListenerVtbl;
struct DispIHTMLAnchorElement;
struct DispIHTMLBRElementVtbl;
struct DispIHTMLButtonElement;
struct DispIHTMLDDElementVtbl;
struct DispIHTMLDTElementVtbl;
struct DispIHTMLFrameBaseVtbl;
struct DispIHTMLHRElementVtbl;
struct DispIHTMLHeaderElement;
struct DispIHTMLIFrameElement;
struct DispIHTMLLIElementVtbl;
struct DispIHTMLLegendElement;
struct DispIHTMLNextIdElement;
struct DispIHTMLNoShowElement;
struct DispIHTMLObjectElement;
struct DispIHTMLOptionElement;
struct DispIHTMLPhraseElement;
struct DispIHTMLScriptElement;
struct DispIHTMLSelectElement;
struct DispIHTMLTableCellVtbl;
struct DispIHTMLTextContainer;
struct HTMLDocumentEventsVtbl;
struct HTMLInputButtonElement;
struct HTMLStyleElementEvents;
struct IADsAccessControlEntry;
struct IADsComputerOperations;
struct IADsPrintJobOperations;
struct IADsSecurityDescriptor;
struct IAMAudioInputMixerVtbl;
struct IAMExtendedSeekingVtbl;
struct IAMMediaTypeSampleVtbl;
struct IAMMediaTypeStreamVtbl;
struct IAMPhysicalPinInfoVtbl;
struct IAMTVAudioNotification;
struct IAMTimecodeDisplayVtbl;
struct IASQLOLEBackupSinkVtbl;
struct IASQLOLEDRIDefaultVtbl;
struct IASQLOLEObjectListVtbl;
struct IASQLOLEPermissionVtbl;
struct IASQLOLEServerSinkVtbl;
struct IASQLOLESubscriberInfo;
struct IASQLOLESystemDatatype;
struct IASQLOLETransactionLog;
struct IActiveScriptErrorVtbl;
struct IActiveScriptParseVtbl;
struct IActiveScriptStatsVtbl;
struct IAgentCtlCharacterVtbl;
struct IAgentCtlPropertySheet;
struct IAgentCtlUserInputVtbl;
struct IApplicationObjectVtbl;
struct IAudioStreamSampleVtbl;
struct IBPCSatelliteTunerVtbl;
struct ICancelMethodCallsVtbl;
struct ICatalogCollectionVtbl;
struct ICertEncodeAltNameVtbl;
struct ICertEncodeCRLDistInfo;
struct ICertEncodeStringArray;
struct ICommandPropertiesVtbl;
struct ICommandWithParameters;
struct IDBDataSourceAdminVtbl;
struct IDataSourceLocatorVtbl;
struct IDirect3DExecuteBuffer;
struct IDirect3DMaterial2Vtbl;
struct IDirect3DRMDevice2Vtbl;
struct IDirect3DRMDeviceArray;
struct IDirect3DRMMeshBuilder;
struct IDirect3DRMObjectArray;
struct IDirect3DRMPickedArray;
struct IDirect3DRMTextureVtbl;
struct IDirect3DRMVisualArray;
struct IDirect3DViewport2Vtbl;
struct IDirectDrawClipperVtbl;
struct IDirectDrawFactoryVtbl;
struct IDirectDrawMediaSample;
struct IDirectDrawMediaStream;
struct IDirectDrawPaletteVtbl;
struct IDirectDrawSurfaceVtbl;
struct IDirectInputEffectVtbl;
struct IDirectSound3DListener;
struct IDirectSoundBufferVtbl;
struct IDirectSoundNotifyVtbl;
struct IDirectoryAttrMgmtVtbl;
struct IDistributorNotifyVtbl;
struct IDockingWindowSiteVtbl;
struct IDtcLuRmEnlistmentSink;
struct IDtcLuRmEnlistmentVtbl;
struct IEncodingFilterFactory;
struct IEnumExtendedMediaVtbl;
struct IEnumRemoteDoubleValue;
struct IEnumRemoteProcessVtbl;
struct IEnumRemoteThreadGroup;
struct IExchExtPropertySheets;
struct IExchExtUserEventsVtbl;
struct IExchangeExportChanges;
struct IExchangeFavoritesVtbl;
struct IExtensionServicesVtbl;
struct IFullScreenVideoExVtbl;
struct IGetClusterNetworkInfo;
struct IH26XEncodeOptionsVtbl;
struct IHTMLAnchorElementVtbl;
struct IHTMLButtonElementVtbl;
struct IHTMLElementCollection;
struct IHTMLFiltersCollection;
struct IHTMLFramesCollection2;
struct IHTMLHeaderElementVtbl;
struct IHTMLIFrameElementVtbl;
struct IHTMLLegendElementVtbl;
struct IHTMLNextIdElementVtbl;
struct IHTMLNoShowElementVtbl;
struct IHTMLObjectElementVtbl;
struct IHTMLOptionElementVtbl;
struct IHTMLOptionsHolderVtbl;
struct IHTMLPhraseElementVtbl;
struct IHTMLPluginsCollection;
struct IHTMLScriptElementVtbl;
struct IHTMLSelectElementVtbl;
struct IHTMLStyleFontFaceVtbl;
struct IHTMLTextContainerVtbl;
struct IJavaEnumRemoteProcess;
struct IMAPIFormContainerVtbl;
struct IMLangLineBreakConsole;
struct IMediaStreamFilterVtbl;
struct IMtsInstanceEventsVtbl;
struct IMtsResourceEventsVtbl;
struct IMtsSecurityEventsVtbl;
struct IObjectContextActivity;
struct IOleParentUndoUnitVtbl;
struct IPersistStreamInitVtbl;
struct IProvideClassInfo2Vtbl;
struct IRemoteArrayObjectVtbl;
struct IRemoteClassObjectVtbl;
struct IRemoteContainerObject;
struct IRemoteFloatObjectVtbl;
struct IRemoteMethodFieldVtbl;
struct IRemoteProcessCallback;
struct IRemoteShortObjectVtbl;
struct IRemoteThreadGroupVtbl;
struct IRequestDictionaryVtbl;
struct IResourceManagerFacade;
struct IRowPositionChangeVtbl;
struct IRowsetNewRowAfterVtbl;
struct IRowsetWatchNotifyVtbl;
struct IRowsetWatchRegionVtbl;
struct IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer3Vtbl;
struct IScheduledWorkItemVtbl;
struct ISessionPropertiesVtbl;
struct IShellChangeNotifyVtbl;
struct IShellExecuteHookAVtbl;
struct IShellExecuteHookWVtbl;
struct IShellPropSheetExtVtbl;
struct ISilenceSuppressorVtbl;
struct ITBasicCallControlVtbl;
struct ITCallNotificationVtbl;
struct ITMultiChannelCallVtbl;
struct ITransactionExportVtbl;
struct ITransactionImportVtbl;
struct ITransactionObjectVtbl;
struct ITrusteeGroupAdminVtbl;
struct IVariantChangeTypeVtbl;
struct IVariantDictionaryVtbl;
struct IWCContextMenuCallback;
struct IWEExtendPropertySheet;
struct IXAResourceManagerVtbl;
struct MSBDN_BRIDGE_CALLBACKS;
struct MSBDN_OUTPUT_SUBSYSTEM;
struct WINTRUST_CATALOG_INFO_;
struct _ACTRL_PROPERTY_ENTRYA;
struct _ACTRL_PROPERTY_ENTRYW;
struct _ADODynaCollectionVtbl;
struct _CMInvokeCommandInfoEx;
struct _CRYPT_SEQUENCE_OF_ANY;
struct _CRYPT_TRUST_REG_ENTRY;
struct _CTL_FIND_SUBJECT_PARA;
struct _CTL_VERIFY_USAGE_PARA;
struct _DEV_BROADCAST_DEVNODE;
struct _DSETUP_CB_UPGRADEINFO;
struct _DTUNE_TVX_CONTROLVtbl;
struct _EXTENDED_NOTIFICATION;
struct _FILESYSTEM_STATISTICS;
struct _IMAGE_BASE_RELOCATION;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64;
struct _IPX_STATIC_ROUTE_INFO;
struct _LSA_OBJECT_ATTRIBUTES;
struct _LSA_TRUST_INFORMATION;
struct _MESSAGE_RESOURCE_DATA;
struct _NTMS_PMIDINFORMATIONA;
struct _NTMS_PMIDINFORMATIONW;
struct _PARTITION_INFORMATION;
struct _POLICY_AUDIT_LOG_INFO;
struct _POWER_DEVICE_TIMEOUTS;
struct _PREVENT_MEDIA_REMOVAL;
struct _PRINTPROCESSOR_CAPS_1;
struct _QUERY_SERVICE_CONFIGA;
struct _QUERY_SERVICE_CONFIGW;
struct _RIP_ROUTE_FILTER_INFO;
struct _RPC_SYNTAX_IDENTIFIER;
struct _RTR_INFO_BLOCK_HEADER;
struct _SP_ENABLECLASS_PARAMS;
struct _SP_INSTALLWIZARD_DATA;
struct _STORAGE_DEVICE_NUMBER;
struct _SecPkgContext_DceInfo;
struct _TAPE_CREATE_PARTITION;
struct _TIME_ZONE_INFORMATION;
struct _TRANSMIT_FILE_BUFFERS;
struct _TRUSTED_PASSWORD_INFO;
struct _UNLOAD_DLL_DEBUG_INFO;
struct _USER_MODALS_INFO_1001;
struct _USER_MODALS_INFO_1002;
struct _USER_MODALS_INFO_1003;
struct _USER_MODALS_INFO_1004;
struct _USER_MODALS_INFO_1005;
struct _USER_MODALS_INFO_1006;
struct _USER_MODALS_INFO_1007;
struct _WINDBG_EXTENSION_APIS;
struct __GENERIC_BINDING_INFO;
struct _tagPROTOCOLFILTERDATA;
struct digirealwaveformat_tag;
struct dolbyac2waveformat_tag;
struct lineagentgrouplist_tag;
struct oliadpcmwaveformat_tag;
struct tagCInterfaceProxyVtbl;
struct tagCStdPSFactoryBuffer;
struct tagDDEML_MSG_HOOK_DATA;
struct tagEMRCREATECOLORSPACE;
struct tagEMREXTSELECTCLIPRGN;
struct tagEMRGLSBOUNDEDRECORD;
struct tagEMRSELECTCOLORSPACE;
struct tagEMRSETVIEWPORTEXTEX;
struct tagEMRSETVIEWPORTORGEX;
struct tagMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_STEP_PARMS;
struct tagMCI_OVLY_RECT_PARMS;
struct tagSQL_INTERVAL_STRUCT;
struct CLUSPROP_SCSI_ADDRESS;
struct Classjava_lang_String;
struct ClusNetInterfacesVtbl;
struct ClusNodeNetInterfaces;
struct ClusObjCollectionVtbl;
struct DIDEVICEINSTANCE_DX3A;
struct DIDEVICEINSTANCE_DX3W;
struct DWebBrowserEventsVtbl;
struct DispIHTMLBlockElement;
struct DispIHTMLDListElement;
struct DispIHTMLEmbedElement;
struct DispIHTMLFrameElement;
struct DispIHTMLLabelElement;
struct DispIHTMLOListElement;
struct DispIHTMLSpanFlowVtbl;
struct DispIHTMLStyleElement;
struct DispIHTMLTableCaption;
struct DispIHTMLTableColVtbl;
struct DispIHTMLTableRowVtbl;
struct DispIHTMLTableSection;
struct DispIHTMLTitleElement;
struct DispIHTMLUListElement;
struct HTAPIDIALOGINSTANCE__;
struct HTMLElementEventsVtbl;
struct HTMLFiltersCollection;
struct HTMLFormElementEvents;
struct HTMLLinkElementEvents;
struct IADsAccessControlList;
struct IADsPropertyEntryVtbl;
struct IADsPropertyValueVtbl;
struct IADsServiceOperations;
struct IAMAnalogVideoDecoder;
struct IAMAnalogVideoEncoder;
struct IAMDevMemoryAllocator;
struct IAMNetShowExPropsVtbl;
struct IAMTimecodeReaderVtbl;
struct IAMVfwCompressDialogs;
struct IASQLOLEConfiguration;
struct IASQLOLEDatabasesVtbl;
struct IASQLOLEExecutiveVtbl;
struct IASQLOLEHistoryFilter;
struct IASQLOLELanguagesVtbl;
struct IASQLOLEOperatorsVtbl;
struct IASQLOLERemoteServers;
struct IASQLOLEStdObjectVtbl;
struct IASQLOLESubscriptions;
struct IActiveScriptSiteVtbl;
struct IAgentCtlCommandsVtbl;
struct IAudioMediaStreamVtbl;
struct IBindEventHandlerVtbl;
struct ICertServerPolicyVtbl;
struct IContinueCallbackVtbl;
struct IDDVideoPortContainer;
struct IDataAdviseHolderVtbl;
struct IDirect3DMaterialVtbl;
struct IDirect3DRMDeviceVtbl;
struct IDirect3DRMFrame2Vtbl;
struct IDirect3DRMFrameArray;
struct IDirect3DRMLightArray;
struct IDirect3DRMObjectVtbl;
struct IDirect3DRMShadowVtbl;
struct IDirect3DRMUserVisual;
struct IDirect3DRMVisualVtbl;
struct IDirect3DTexture2Vtbl;
struct IDirect3DViewportVtbl;
struct IDirectDrawKernelVtbl;
struct IDirectPlayLobby2Vtbl;
struct IDirectShowStreamVtbl;
struct IDirectWriterLockVtbl;
struct IDispenserManagerVtbl;
struct IDocHostUIHandlerVtbl;
struct IDtcLuRecoveryFactory;
struct IDtcToXaHelperFactory;
struct IEnumCATEGORYINFOVtbl;
struct IEnumConnectionPoints;
struct IEnumJAVAPROPERTYVtbl;
struct IEnumOleDocumentViews;
struct IEnumOleUndoUnitsVtbl;
struct IEnumRemoteFloatValue;
struct IEnumRemoteObjectVtbl;
struct IEnumRemoteShortValue;
struct IEnumRemoteThreadVtbl;
struct IExchExtMessageEvents;
struct IExchExtSessionEvents;
struct IExchangeFastTransfer;
struct IFileSourceFilterVtbl;
struct IGetClusterObjectInfo;
struct IGetClusterUIInfoVtbl;
struct IGetContextProperties;
struct IGlobalInterfaceTable;
struct IH26XVideoEffectsVtbl;
struct IHTMLBlockElementVtbl;
struct IHTMLControlRangeVtbl;
struct IHTMLDListElementVtbl;
struct IHTMLEmbedElementVtbl;
struct IHTMLFrameElementVtbl;
struct IHTMLInputFileElement;
struct IHTMLInputTextElement;
struct IHTMLLabelElementVtbl;
struct IHTMLOListElementVtbl;
struct IHTMLStyleElementVtbl;
struct IHTMLTableCaptionVtbl;
struct IHTMLTableSectionVtbl;
struct IHTMLTextRangeMetrics;
struct IHTMLTitleElementVtbl;
struct IHTMLUListElementVtbl;
struct IInternetBindInfoVtbl;
struct IInternetPriorityVtbl;
struct IInternetProtocolInfo;
struct IInternetProtocolRoot;
struct IInternetProtocolSink;
struct IInternetProtocolVtbl;
struct IInternetThreadSwitch;
struct IJavaDebugManagerVtbl;
struct IJavaEnumLINEINFOVtbl;
struct IJavaEnumRemoteObject;
struct IJavaEnumRemoteThread;
struct IMSAdminBaseSinkWVtbl;
struct IMediaPropertyBagVtbl;
struct IMpegAudioDecoderVtbl;
struct IMtsPackageEventsVtbl;
struct IMtsTransactionEvents;
struct IMultiMediaStreamVtbl;
struct INewShortcutHookAVtbl;
struct INewShortcutHookWVtbl;
struct IOleCommandTargetVtbl;
struct IOleInPlaceObjectVtbl;
struct IOleInPlaceSiteExVtbl;
struct IOleItemContainerVtbl;
struct IParseDisplayNameVtbl;
struct IPropertyPageSiteVtbl;
struct IProvideClassInfoVtbl;
struct IRemoteArrayFieldVtbl;
struct IRemoteByteObjectVtbl;
struct IRemoteCharObjectVtbl;
struct IRemoteClassFieldVtbl;
struct IRemoteContainerField;
struct IRemoteLongObjectVtbl;
struct IRemoteStackFrameVtbl;
struct IResourceConsumerVtbl;
struct IRowsetNextRowsetVtbl;
struct IRowsetWithParameters;
struct IRpcChannelBufferVtbl;
struct ISQLRequestDiagFields;
struct IScriptingContextVtbl;
struct ISecurityPropertyVtbl;
struct ISequentialStreamVtbl;
struct IShellIconOverlayVtbl;
struct ISpecifyPropertyPages;
struct ISupportErrorInfoVtbl;
struct ISynchronizeEventVtbl;
struct ISynchronizeMutexVtbl;
struct ITConferenceDirectory;
struct ITMediaCollectionVtbl;
struct ITParticipantInfoVtbl;
struct ITTerminalManagerVtbl;
struct ITTerminalSupportVtbl;
struct ITVControlPrivateVtbl;
struct ITransactionContextEx;
struct ITransactionDispenser;
struct ITransactionLocalVtbl;
struct ITypeChangeEventsVtbl;
struct IUrlHistoryNotifyVtbl;
struct IWCWizardCallbackVtbl;
struct IXMLElementCollection;
struct RecordsetEventsVtVtbl;
struct WebViewFolderContents;
struct _ACL_SIZE_INFORMATION;
struct _Alpha_EV4_MEM_Format;
struct _Alpha_EV4_REI_Format;
struct _Alpha_EV5_MEM_Format;
struct _Alpha_EV5_REI_Format;
struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_REVOCATION_PARA;
struct _CERT_STORE_PROV_INFO;
struct _CHANGER_ELEMENT_LIST;
struct _CHANGER_PRODUCT_DATA;
struct _CHANGER_SET_POSITION;
struct _CRL_DIST_POINTS_INFO;
struct _CRYPT_KEY_PROV_PARAM;
struct _CRYPT_OID_FUNC_ENTRY;
struct _CTL_ANY_SUBJECT_INFO;
struct _D3DExecuteBufferDesc;
struct _D3DRMPMESHLOADSTATUS;
struct _DDVIDEOPORTBANDWIDTH;
struct _DEV_BROADCAST_HANDLE;
struct _DEV_BROADCAST_HEADER;
struct _DEV_BROADCAST_PORT_A;
struct _DEV_BROADCAST_PORT_W;
struct _DEV_BROADCAST_VOLUME;
struct _DistributedLockOwner;
struct _DistributedLockReply;
struct _ENUM_SERVICE_STATUSA;
struct _ENUM_SERVICE_STATUSW;
struct _EXCEPTION_DEBUG_INFO;
struct _FILEGROUPDESCRIPTORA;
struct _FILEGROUPDESCRIPTORW;
struct _FILE_OBJECTID_BUFFER;
union _FILE_SEGMENT_ELEMENT;
struct _FORMAT_EX_PARAMETERS;
struct _FULL_PTR_XLAT_TABLES;
struct _HTTP_FILTER_RAW_DATA;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY;
struct _IMAGE_IMPORT_BY_NAME;
struct _IMAGE_SECTION_HEADER;
struct _IPX_NEXT_HOP_ADDRESS;
struct _LOCALGROUP_INFO_1002;
struct _LSA_AUTH_INFORMATION;
struct _METADATA_HANDLE_INFO;
struct _NETCONNECTINFOSTRUCT;
struct _NEWMAIL_NOTIFICATION;
struct _NTMS_LMIDINFORMATION;
struct _PRINTER_ENUM_VALUESA;
struct _PRINTER_ENUM_VALUESW;
struct _RAS_PPP_IPXCP_RESULT;
struct _RAS_PPP_NBFCP_RESULT;
struct _RPC_CLIENT_INTERFACE;
struct _RPC_PROTSEQ_ENDPOINT;
struct _RPC_SERVER_INTERFACE;
struct _RTCP_RECEIVER_REPORT;
struct _RTL_CRITICAL_SECTION;
struct _SCH_CRED_PUBLIC_CAPI;
struct _SCH_CRED_SECRET_CAPI;
struct _SEC_NEGOTIATION_INFO;
struct _SERVICES_TABLE_INDEX;
struct _SERVICE_DESCRIPTIONA;
struct _SERVICE_DESCRIPTIONW;
struct _SERVICE_TABLE_ENTRYA;
struct _SERVICE_TABLE_ENTRYW;
struct _SP_DRVINSTALL_PARAMS;
struct _SP_PROPCHANGE_PARAMS;
struct _SPropertyRestriction;
struct _SecPkgContext_NamesA;
struct _SecPkgContext_NamesW;
struct _UNIVERSAL_NAME_INFOA;
struct _UNIVERSAL_NAME_INFOW;
struct _WKSTA_USER_INFO_1101;
struct _WSAServiceClassInfoA;
struct _WSAServiceClassInfoW;
struct _wireSAFEARR_DISPATCH;
struct digifixwaveformat_tag;
struct digistdwaveformat_tag;
struct echosc1waveformat_tag;
struct lineaddressstatus_tag;
struct linelocationentry_tag;
struct lineproviderentry_tag;
struct linereqmediacallW_tag;
struct linetranslatecaps_tag;
struct mc_prepare_to_receive;
struct olicelpwaveformat_tag;
struct tACMFILTERTAGDETAILSA;
struct tACMFILTERTAGDETAILSW;
struct tACMFORMATTAGDETAILSA;
struct tACMFORMATTAGDETAILSW;
struct tagCInterfaceStubVtbl;
struct tagCLIENTCREATESTRUCT;
struct tagDBCONTENTPROXIMITY;
struct tagEMRCREATEMONOBRUSH;
struct tagEMREXCLUDECLIPRECT;
struct tagEMRSETARCDIRECTION;
struct tagHARDWAREHOOKSTRUCT;
struct tagMCI_SYSINFO_PARMSA;
struct tagMCI_SYSINFO_PARMSW;
struct tagMCI_VCR_LIST_PARMS;
struct tagMCI_VCR_PLAY_PARMS;
struct tagMCI_VCR_SEEK_PARMS;
struct tagMCI_VCR_STEP_PARMS;
struct tagMCI_WAVE_SET_PARMS;
struct tagMIXERLINECONTROLSA;
struct tagMIXERLINECONTROLSW;
struct tagNAMED_PROFILE_INFO;
struct tagOLEUICHANGESOURCEA;
struct tagOLEUICHANGESOURCEW;
struct tagOLEUIINSERTOBJECTA;
struct tagOLEUIINSERTOBJECTW;
struct tagOLEUIPASTESPECIALA;
struct tagOLEUIPASTESPECIALW;
struct tagOleMenuGroupWidths;
struct tagSQL_NUMERIC_STRUCT;
struct urlinvokecommandinfoA;
struct urlinvokecommandinfoW;
struct wavefilter_volume_tag;
struct CCertEncodeBitString;
struct CCertEncodeDateArray;
struct CCertEncodeLongArray;
struct CMLangConvertCharset;
struct ClusNetInterfaceVtbl;
struct ClusResTypeResources;
struct ConnectionEventsVtbl;
struct DataSourceObjectVtbl;
struct DispIHTMLAreaElement;
struct DispIHTMLBGsoundVtbl;
struct DispIHTMLBaseElement;
struct DispIHTMLBodyElement;
struct DispIHTMLDivPosition;
struct DispIHTMLFontElement;
struct DispIHTMLFormElement;
struct DispIHTMLLinkElement;
struct DispIHTMLListElement;
struct DispIHTMLMetaElement;
struct DispIHTMLParaElement;
struct DispIHTMLSpanElement;
struct DispIHTMLTextElement;
struct HDRVDIALOGINSTANCE__;
struct HTMLAnchorEventsVtbl;
struct HTMLInputFileElement;
struct HTMLInputImageEvents;
struct HTMLInputTextElement;
struct HTMLScriptEventsVtbl;
struct HTMLWindowEventsVtbl;
struct IADsLargeIntegerVtbl;
struct IADsOpenDSObjectVtbl;
struct IADsPropertyListVtbl;
struct IAMBufferNegotiation;
struct IAMCameraControlVtbl;
struct IAMDroppedFramesVtbl;
struct IAMExtendedErrorInfo;
struct IAMNetShowConfigVtbl;
struct IAMNetworkStatusVtbl;
struct IAMStreamControlVtbl;
struct IAMTimecodeGenerator;
struct IAMTunerNotification;
struct IAMVfwCaptureDialogs;
struct IASQLOLEArticlesVtbl;
struct IASQLOLEBulkCopySink;
struct IASQLOLEBulkCopyVtbl;
struct IASQLOLEConfigValues;
struct IASQLOLEDBObjectVtbl;
struct IASQLOLEDBOptionVtbl;
struct IASQLOLEDatabaseVtbl;
struct IASQLOLEDefaultsVtbl;
struct IASQLOLELanguageVtbl;
struct IASQLOLENameListVtbl;
struct IASQLOLEOperatorVtbl;
struct IASQLOLEPublications;
struct IASQLOLEQueryResults;
struct IASQLOLERegistryVtbl;
struct IASQLOLERemoteLogins;
struct IASQLOLERemoteServer;
struct IASQLOLEServerGroups;
struct IASQLOLESubscription;
struct IASQLOLETransferSink;
struct IASQLOLETransferVtbl;
struct IASQLOLETriggersVtbl;
struct IAgentCtlAudioObject;
struct IAgentCtlBalloonVtbl;
struct IAgentCtlCommandVtbl;
struct IAgentCtlRequestVtbl;
struct IAgentCtlSpeechInput;
struct IAgentNotifySinkVtbl;
struct IBPCEmailMessageVtbl;
struct ICaptureGraphBuilder;
struct ICertEncodeBitString;
struct ICertEncodeDateArray;
struct ICertEncodeLongArray;
struct IChapteredRowsetVtbl;
struct ICommandValidateVtbl;
struct IConnectionPointVtbl;
struct ICreateErrorInfoVtbl;
struct ICreateTypeInfo2Vtbl;
struct IDBCreateCommandVtbl;
struct IDBCreateSessionVtbl;
struct IDBSchemaCommandVtbl;
struct IDeferredCommandVtbl;
struct IDirect3DDevice2Vtbl;
struct IDirect3DRMAnimation;
struct IDirect3DRMArrayVtbl;
struct IDirect3DRMFaceArray;
struct IDirect3DRMFrameVtbl;
struct IDirect3DRMLightVtbl;
struct IDirect3DRMWinDevice;
struct IDirect3DTextureVtbl;
struct IDirectDrawVideoPort;
struct IDirectDrawVideoVtbl;
struct IDirectInputDevice2A;
struct IDirectInputDevice2W;
struct IDirectPlayLobbyVtbl;
struct IDirectSound3DBuffer;
struct IDirectoryObjectVtbl;
struct IDirectorySearchVtbl;
struct IDispenserDriverVtbl;
struct IDtcLuSubordinateDtc;
struct IDvdGraphBuilderVtbl;
struct IEnumAddressTypeVtbl;
struct IEnumConnectionsVtbl;
struct IEnumParticipantInfo;
struct IEnumRemoteByteValue;
struct IEnumRemoteCharValue;
struct IEnumRemoteFieldVtbl;
struct IEnumRemoteLongValue;
struct IEnumRemoteValueVtbl;
struct IEnumSTATPROPSTGVtbl;
struct IEnumTerminalClasses;
struct IExchExtCallbackVtbl;
struct IExchExtCommandsVtbl;
struct IExchExtModelessVtbl;
struct IExchangeFolderRules;
struct IExchangeManageStore;
struct IExchangeModifyTable;
struct IExchangeRuleExtVtbl;
struct IFileSinkFilter2Vtbl;
struct IFullScreenVideoVtbl;
struct IGetClusterGroupInfo;
struct IHTMLAreaElementVtbl;
struct IHTMLAreasCollection;
struct IHTMLBaseElementVtbl;
struct IHTMLBaseFontElement;
struct IHTMLBodyElementVtbl;
struct IHTMLDatabindingVtbl;
struct IHTMLDivPositionVtbl;
struct IHTMLFieldSetElement;
struct IHTMLFontElementVtbl;
struct IHTMLFormElementVtbl;
struct IHTMLFrameSetElement;
struct IHTMLLinkElementVtbl;
struct IHTMLListElementVtbl;
struct IHTMLMetaElementVtbl;
struct IHTMLParaElementVtbl;
struct IHTMLSelectionObject;
struct IHTMLSpanElementVtbl;
struct IHTMLTableRowMetrics;
struct IHTMLTextAreaElement;
struct IHTMLTextElementVtbl;
struct IIndexDefinitionVtbl;
struct IInputObjectSiteVtbl;
struct IInternetSessionVtbl;
struct IInternetZoneManager;
struct IJavaEnumRemoteField;
struct IMAPIFormFactoryVtbl;
struct IMAPIMessageSiteVtbl;
struct IMAPIViewContextVtbl;
struct IMLangConvertCharset;
struct IMLangStringAStrVtbl;
struct IMLangStringBufAVtbl;
struct IMLangStringBufWVtbl;
struct IMLangStringWStrVtbl;
struct IMPORT_OBJECT_HEADER;
struct IMsgServiceAdminVtbl;
struct IMtsMethodEventsVtbl;
struct IMtsObjectEventsVtbl;
struct IMtsThreadEventsVtbl;
struct IMultipleResultsVtbl;
struct IObjectAccessControl;
struct IOleAdviseHolderVtbl;
struct IOleCacheControlVtbl;
struct IOleDocumentSiteVtbl;
struct IOleDocumentViewVtbl;
struct IOleInPlaceFrameVtbl;
struct IOleUILinkContainerA;
struct IOleUILinkContainerW;
struct IPSFactoryBufferVtbl;
struct IPerPropertyBrowsing;
struct IPersistPropertyBag2;
struct IPointerInactiveVtbl;
struct IPropertyStorageVtbl;
struct IProvideTaskPageVtbl;
struct IRPHH26XSettingsVtbl;
struct IReferenceClock2Vtbl;
struct IRemoteBooleanObject;
struct IRemoteComponentUtil;
struct IRemoteDataFieldVtbl;
struct IRemoteIntObjectVtbl;
struct IResourceManagerSink;
struct IResourceManagerVtbl;
struct IRichEditOleCallback;
struct IRoleAssociationUtil;
struct IRowsetChangeExtInfo;
struct IRowsetChapterMember;
struct ISQLGetDiagFieldVtbl;
struct ISeekingPassThruVtbl;
struct IServiceProviderVtbl;
struct ISharedPropertyGroup;
struct IShellFolderViewDual;
struct ISimpleFrameSiteVtbl;
struct ISubscriptionMgrVtbl;
struct ITBasicAudioTerminal;
struct ITCallMediaEventVtbl;
struct ITCallStateEventVtbl;
struct ITConferenceBlobVtbl;
struct ITTimeCollectionVtbl;
struct ITableDefinitionVtbl;
struct ITrackFileRestricted;
struct ITransactionJoinVtbl;
struct ITransactionReceiver;
struct ITransactionResource;
struct IWEExtendContextMenu;
struct IWEInvokeCommandVtbl;
struct IWinInetHttpInfoVtbl;
struct LdapReferralCallback;
struct SChannelHookCallInfo;
struct SIP_ADD_NEWPROVIDER_;
struct TransactionContextEx;
struct _ACTRL_ACCESS_ENTRYA;
struct _ACTRL_ACCESS_ENTRYW;
struct _ACTRL_CONTROL_INFOA;
struct _ACTRL_CONTROL_INFOW;
struct _AM_COPY_MACROVISION;
struct _AllocatorProperties;
struct _Alpha_Branch_Format;
struct _Alpha_EV4_PR_Format;
struct _Alpha_EV5_PR_Format;
struct _Alpha_Memory_Format;
struct _CERT_ALT_NAME_ENTRY;
struct _CERT_DSS_PARAMETERS;
struct _CHANGER_MOVE_MEDIUM;
struct _CMINVOKECOMMANDINFO;
struct _CONSOLE_CURSOR_INFO;
struct _CRL_DIST_POINT_NAME;
struct _CRYPT_KEY_PROV_INFO;
struct _CRYPT_PROVIDER_CERT;
struct _CRYPT_PROVIDER_DATA;
struct _CRYPT_PROVIDER_SGNR;
struct _CTL_FIND_USAGE_PARA;
struct _D3DFINDDEVICERESULT;
struct _D3DFINDDEVICESEARCH;
struct _DIRECTXREGISTERAPPA;
struct _DIRECTXREGISTERAPPW;
struct _DPLDATA_PLAYERSCORE;
struct _ENCRYPTED_DATA_INFO;
struct _HTTP_FILTER_AUTHENT;
struct _HTTP_FILTER_CONTEXT;
struct _HTTP_FILTER_URL_MAP;
struct _HTTP_FILTER_VERSION;
struct _IMAGELISTDRAWPARAMS;
struct _LOAD_DLL_DEBUG_INFO;
struct _LSA_TRANSLATED_NAME;
struct _LUID_AND_ATTRIBUTES;
struct _NET_DISPLAY_MACHINE;
struct _NTSD_EXTENSION_APIS;
struct _OBJECT_NOTIFICATION;
struct _PRINTER_NOTIFY_INFO;
struct _PROCESS_INFORMATION;
struct _RAS_PORT_STATISTICS;
struct _RAS_PPP_ATCP_RESULT;
struct _RAS_PPP_IPCP_RESULT;
struct _REPARSE_DATA_BUFFER;
struct _REPL_EDIR_INFO_1000;
struct _REPL_EDIR_INFO_1001;
struct _ROUTING_TABLE_INDEX;
struct _RPC_PROTSEQ_VECTORA;
struct _RPC_PROTSEQ_VECTORW;
struct _RPC_TRANSFER_SYNTAX;
struct _RTP_ENCRYPTION_INFO;
struct _RemoteServiceStatus;
struct _SBitMaskRestriction;
struct _SCommentRestriction;
struct _SContentRestriction;
struct _SECURITY_ATTRIBUTES;
struct _SECURITY_DESCRIPTOR;
struct _SOCKET_ADDRESS_LIST;
struct _SYSTEM_POWER_STATUS;
struct _SecPkgContext_Sizes;
struct _TAPE_GET_STATISTICS;
struct _TOKEN_PRIMARY_GROUP;
struct _WLX_MPR_NOTIFY_INFO;
struct _avifieldindex_chunk;
struct _avitimedindex_entry;
struct _tagCOLORMATCHSETUPA;
struct _tagCOLORMATCHSETUPW;
struct _tagHIT_LOGGING_INFO;
struct _tagREADCONTROLSPACE;
struct _tagSubscriptionInfo;
struct _wireSAFEARRAY_UNION;
struct _wireSAFEARR_BRECORD;
struct _wireSAFEARR_HAVEIID;
struct _wireSAFEARR_UNKNOWN;
struct _wireSAFEARR_VARIANT;
struct adpcmewaveformat_tag;
struct get_cp_convert_table;
struct gsm610waveformat_tag;
struct linecountryentry_tag;
struct linegeneratetone_tag;
struct lineproviderlist_tag;
struct lineproxyrequest_tag;
struct linereqmakecallW_tag;
struct linereqmediacall_tag;
struct mc_receive_immediate;
struct mc_send_conversation;
struct mc_test_rts_and_post;
struct ms_act_trans_overlay;
struct oligsmwaveformat_tag;
struct olioprwaveformat_tag;
struct olisbcwaveformat_tag;
struct phoneextensionid_tag;
struct sna_global_info_sect;
struct sonarcwaveformat_tag;
struct tMIXERCONTROLDETAILS;
struct tagAM_MPEGSTREAMTYPE;
struct tagAM_MPEGSYSTEMTYPE;
struct tagBDN_HARDWARE_ADDR;
struct tagCBTACTIVATESTRUCT;
struct tagCLEANLOCALSTORAGE;
struct tagCOMPAREITEMSTRUCT;
struct tagDBINDEXCOLUMNDESC;
struct tagEMRPOLYPOLYLINE16;
struct tagEMRSELECTCLIPPATH;
struct tagEMRSETMAPPERFLAGS;
struct tagEMRTRANSPARENTBLT;
struct tagMCI_GENERIC_PARMS;
struct tagMCI_SEQ_SET_PARMS;
struct tagMCI_VCR_CUE_PARMS;
struct tagMCI_VCR_SET_PARMS;
struct tagMCI_VD_PLAY_PARMS;
struct tagMCI_VD_STEP_PARMS;
struct tagMEASUREITEMSTRUCT;
struct tagMENUGETOBJECTINFO;
struct tagNCCALCSIZE_PARAMS;
struct tagNMDATETIMEFORMATA;
struct tagNMDATETIMEFORMATW;
struct tagNMDATETIMESTRINGA;
struct tagNMDATETIMESTRINGW;
struct tagNMLVODSTATECHANGE;
struct tagNONCLIENTMETRICSA;
struct tagNONCLIENTMETRICSW;
struct tagOLEUIOBJECTPROPSA;
struct tagOLEUIOBJECTPROPSW;
struct tagPUBLISHEDINFOLIST;
struct tagRASAUTODIALENTRYA;
struct tagRASAUTODIALENTRYW;
struct tagRASDIALEXTENSIONS;
struct tagUNDETERMINESTRUCT;
struct AM_DVDCOPY_TITLEKEY;
struct CLUSPROP_FTSET_INFO;
struct CLUS_PARTITION_INFO;
struct ClusGroupOwnersVtbl;
struct ClusResDependencies;
struct ConferenceDirectory;
struct DShellWindowsEvents;
struct DispIHTMLDivElement;
struct DispIHTMLImgElement;
struct DispIHTMLInputImage;
struct DispIHTMLMapElement;
struct FolderItemVerbsVtbl;
struct HTMLBaseFontElement;
struct HTMLFieldSetElement;
struct HTMLLabelEventsVtbl;
struct HTMLTableEventsVtbl;
struct HTMLTextAreaElement;
struct IADsFileServiceVtbl;
struct IAMDevMemoryControl;
struct IAMExtTransportVtbl;
struct IAMMediaContentVtbl;
struct IAMMultiMediaStream;
struct IAMPlayListItemVtbl;
struct IAMStreamConfigVtbl;
struct IAMStreamSelectVtbl;
struct IAMVideoCompression;
struct IAMVideoProcAmpVtbl;
struct IASQLOLEAlertSystem;
struct IASQLOLEApplication;
struct IASQLOLEArticleVtbl;
struct IASQLOLEColumnsVtbl;
struct IASQLOLEConfigValue;
struct IASQLOLEDefaultVtbl;
struct IASQLOLEDevicesVtbl;
struct IASQLOLEIndexesVtbl;
struct IASQLOLEPublication;
struct IASQLOLERemoteLogin;
struct IASQLOLEServerGroup;
struct IASQLOLEServersVtbl;
struct IASQLOLETriggerVtbl;
struct IAgentCharacterVtbl;
struct IAgentCommandWindow;
struct IAgentCtlCharacters;
struct IAgentPropertySheet;
struct IAgentUserInputVtbl;
struct IBPCDeviceEventVtbl;
struct IBaseVideoMixerVtbl;
struct IBindStatusCallback;
struct IBriefcaseInitiator;
struct ICatInformationVtbl;
struct ICertServerExitVtbl;
struct IClassActivatorVtbl;
struct IClientSecurityVtbl;
struct IClusterApplication;
struct ICommDlgBrowserVtbl;
struct ICommandPersistVtbl;
struct ICommandPrepareVtbl;
struct IConfigInterleaving;
struct ICreateTypeInfoVtbl;
struct ICreateTypeLib2Vtbl;
struct IDBAsynchNotifyVtbl;
struct IDBAsynchStatusVtbl;
struct IDBPromptInitialize;
struct IDBSchemaRowsetVtbl;
struct IDataInitializeVtbl;
struct IDirect3DDeviceVtbl;
struct IDirect3DRMFaceVtbl;
struct IDirect3DRMMaterial;
struct IDirect3DRMMeshVtbl;
struct IDirect3DRMTexture2;
struct IDirect3DRMViewport;
struct IDirect3DRMWrapVtbl;
struct IDirectDrawSurface2;
struct IDirectDrawSurface3;
struct IDirectInputDeviceA;
struct IDirectInputDeviceW;
struct IDirectSoundCapture;
struct IDockingWindowFrame;
struct IDtcLuConfigureVtbl;
struct IEnumMediaTerminals;
struct IEnumMediaTypesVtbl;
struct IEnumRegFiltersVtbl;
struct IEnumRemoteIntValue;
struct IEnumSTATPROPSETSTG;
struct IExchangeFolderACLs;
struct IExchangeRuleAction;
struct IExternalConnection;
struct IFileSinkFilterVtbl;
struct IFileViewerSiteVtbl;
struct IFontEventsDispVtbl;
struct IGetClusterDataInfo;
struct IGetClusterNodeInfo;
struct IH26XEncoderControl;
struct IH26XRTPControlVtbl;
struct IHTMLCommentElement;
struct IHTMLControlElement;
struct IHTMLDivElementVtbl;
struct IHTMLImgElementVtbl;
struct IHTMLInputImageVtbl;
struct IHTMLIsIndexElement;
struct IHTMLMapElementVtbl;
struct IHTMLMarqueeElement;
struct IHTMLOpsProfileVtbl;
struct IHTMLStyleSheetRule;
struct IHTMLStyleSheetVtbl;
struct IHTMLUnknownElement;
struct IHlinkBrowseContext;
struct IInstallAudioCodecs;
struct IInstallVideoCodecs;
struct IMAPIAdviseSinkVtbl;
struct IMAPIFormAdviseSink;
struct IMAPIViewAdviseSink;
struct IMLangCodePagesVtbl;
struct IMSAdminReplication;
struct IMediaEventSinkVtbl;
struct IMixerPinConfigVtbl;
struct IObjectIdentityVtbl;
struct IObjectWithSiteVtbl;
struct IOleControlSiteVtbl;
struct IOleInPlaceSiteVtbl;
struct IOleInPlaceUIWindow;
struct IOleUILinkInfoAVtbl;
struct IOleUILinkInfoWVtbl;
struct IOleUndoManagerVtbl;
struct IPersistFolder2Vtbl;
struct IPersistHistoryVtbl;
struct IPersistMessageVtbl;
struct IPersistMonikerVtbl;
struct IPersistPropertyBag;
struct IPersistStorageVtbl;
struct IProcessDestroyHack;
struct IProgressNotifyVtbl;
struct IPropertyNotifySink;
struct IPropertySetStorage;
struct IProvideMonikerVtbl;
struct IQualityControlVtbl;
struct IRTPDemuxFilterVtbl;
struct IReconcilableObject;
struct IReconcileInitiator;
struct IReferenceClockVtbl;
struct IRemoteDebugManager;
struct IRemoteDoubleObject;
struct IRowsetCopyRowsVtbl;
struct IRowsetIdentityVtbl;
struct IRowsetWatchAllVtbl;
struct IRpcProxyBufferVtbl;
struct IRunnableObjectVtbl;
struct IRunningObjectTable;
struct IServerSecurityVtbl;
struct ISharedPropertyVtbl;
struct IStdMarshalInfoVtbl;
struct ITAttributeListVtbl;
struct ITMediaTerminalVtbl;
struct ITransactionContext;
struct ITransactionOptions;
struct IUrlHistoryStg2Vtbl;
struct IWEExtendWizardVtbl;
struct IWindowForBindingUI;
struct IXAObtainRMInfoVtbl;
struct OLEDBSimpleProvider;
struct RecordsetEventsVtbl;
struct RemoteComponentUtil;
struct RoleAssociationUtil;
struct SharedPropertyGroup;
struct ShellDispatchInproc;
struct WINTRUST_BLOB_INFO_;
struct WINTRUST_CERT_INFO_;
struct WINTRUST_FILE_INFO_;
struct WINTRUST_SGNR_INFO_;
struct _ACCESS_ALLOWED_ACE;
struct _ACTRL_ACCESS_INFOA;
struct _ACTRL_ACCESS_INFOW;
struct _AM_DVDCOPY_CHLGKEY;
struct _AM_DVDCOPY_DISCKEY;
struct _Alpha_OpLit_Format;
struct _Alpha_OpReg_Format;
struct _BROWSER_STATISTICS;
struct _CERT_ALT_NAME_INFO;
struct _CERT_POLICIES_INFO;
struct _CHANGER_SET_ACCESS;
struct _CHARDEVQ_INFO_1002;
struct _CHARDEVQ_INFO_1003;
union _CLIENT_CALL_RETURN;
struct _COMM_FAULT_OFFSETS;
struct _CRYPT_CONTENT_INFO;
struct _D3DLIGHTINGELEMENT;
struct _D3DPROCESSVERTICES;
struct _DADV_CONTROLEvents;
struct _DDVIDEOPORTCONNECT;
struct _DIOBJECTDATAFORMAT;
struct _DPLDATA_PLAYERGUID;
struct _DPLMSG_GETPROPERTY;
struct _DPLMSG_SETPROPERTY;
struct _DPreviewEventsVtbl;
struct _ERROR_NOTIFICATION;
struct _EXCEPTION_POINTERS;
struct _FLOATING_SAVE_AREA;
struct _FOCUS_EVENT_RECORD;
struct _GETVERSIONINPARAMS;
struct _GROUP_USERS_INFO_0;
struct _GROUP_USERS_INFO_1;
struct _HSE_URL_MAPEX_INFO;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64;
struct _LSA_TRANSLATED_SID;
struct _LSA_UNICODE_STRING;
struct _MALLOC_FREE_STRUCT;
struct _MD_CHANGE_OBJECT_W;
struct _MIDL_FORMAT_STRING;
struct _MOUSE_EVENT_RECORD;
struct _OUTLINETEXTMETRICA;
struct _OUTLINETEXTMETRICW;
struct _PERF_COUNTER_BLOCK;
struct _PROCESS_HEAP_ENTRY;
struct _RAS_AUTH_ATTRIBUTE;
struct _RPC_BINDING_VECTOR;
struct _RSVP_FILTERSPEC_V4;
struct _RSVP_FILTERSPEC_V6;
struct _RTCP_SENDER_REPORT;
struct _SEC_OBJECT_ELEMENT;
struct _SERVICE_ASYNC_INFO;
struct _SERVICE_TYPE_VALUE;
struct _SID_AND_ATTRIBUTES;
struct _SLargeIntegerArray;
struct _SP_INF_INFORMATION;
struct _SQL_CONNECT_PARAMS;
struct _STAT_WORKSTATION_0;
struct _TABLE_NOTIFICATION;
struct _TOKEN_DEFAULT_DACL;
union _TRIGGER_TYPE_UNION;
struct _USER_MODALS_INFO_0;
struct _USER_MODALS_INFO_1;
struct _USER_MODALS_INFO_2;
struct _USER_MODALS_INFO_3;
struct _VERIFY_INFORMATION;
struct _WSANAMESPACE_INFOA;
struct _WSANAMESPACE_INFOW;
struct _avitcdlindex_entry;
struct _remoteMETAFILEPICT;
struct _tagGET_SET_SYMPATH;
struct _userFLAG_STGMEDIUM;
struct adpcmwaveformat_tag;
struct ads_searchpref_info;
struct lineaddresscaps_tag;
struct lineagentstatus_tag;
struct linecountrylist_tag;
struct lineextensionid_tag;
struct lineforwardlist_tag;
struct linemonitortone_tag;
struct linereqmakecall_tag;
struct mc_receive_and_post;
struct mc_receive_and_wait;
struct mc_receive_log_data;
struct midiproptimediv_tag;
struct midistrmbuffver_tag;
struct mpeg1waveformat_tag;
struct phonebuttoninfo_tag;
struct tagBITMAPCOREHEADER;
struct tagBITMAPFILEHEADER;
struct tagBITMAPINFOHEADER;
struct tagDELETEITEMSTRUCT;
struct tagEMRCREATEPALETTE;
struct tagEMROFFSETCLIPRGN;
struct tagEMRRESIZEPALETTE;
struct tagEMRSELECTPALETTE;
struct tagEMRSETICMPROFILE;
struct tagEMRSETMITERLIMIT;
struct tagEMRSTRETCHDIBITS;
struct tagENUMLOGFONTEXDVA;
struct tagENUMLOGFONTEXDVW;
struct tagHW_PROFILE_INFOA;
struct tagHW_PROFILE_INFOW;
struct tagIMEMENUITEMINFOA;
struct tagIMEMENUITEMINFOW;
struct tagMCI_RECORD_PARMS;
struct tagMCI_STATUS_PARMS;
struct tagMDICREATESTRUCTA;
struct tagMDICREATESTRUCTW;
struct tagMINIMIZEDMETRICS;
struct tagNEWTEXTMETRICEXA;
struct tagNEWTEXTMETRICEXW;
struct tagNMCUSTOMDRAWINFO;
struct tagNMDATETIMECHANGE;
struct tagNMREBARCHILDSIZE;
struct tagOBJECTDESCRIPTOR;
struct tagOLEUICHANGEICONA;
struct tagOLEUICHANGEICONW;
struct tagOLEUIPASTEENTRYA;
struct tagOLEUIPASTEENTRYW;
struct tagRemHMETAFILEPICT;
struct tagTIMESTAMP_STRUCT;
struct tagVIDEOINFOHEADER2;
struct tagVS_FIXEDFILEINFO;
struct tag_s_RIFFWAVE_INST;
struct tag_s_RIFFWAVE_inst;
struct wavefilter_echo_tag;
struct AMMultiMediaStream;
struct CCertEncodeAltName;
struct CLUSTERVERSIONINFO;
struct ClassArrayOfDouble;
struct ClassArrayOfObject;
struct ClassArrayOfString;
struct ClusGroupResources;
struct ClusPropertiesVtbl;
struct ConnectionEventsVt;
struct DIDEVICEOBJECTDATA;
struct DWebBrowserEvents2;
struct DataSourceListener;
struct DispIHTMLBRElement;
struct DispIHTMLDDElement;
struct DispIHTMLDTElement;
struct DispIHTMLFrameBase;
struct DispIHTMLHRElement;
struct DispIHTMLLIElement;
struct DispIHTMLTableCell;
struct DispIHTMLTableVtbl;
struct FolderItemVerbVtbl;
struct HTMLAreaEventsVtbl;
struct HTMLCommentElement;
struct HTMLDocumentEvents;
struct HTMLIsIndexElement;
struct HTMLMarqueeElement;
struct HTMLStyleSheetRule;
struct HTMLUnknownElement;
struct IADsAggregateeVtbl;
struct IADsAggregatorVtbl;
struct IADsCollectionVtbl;
struct IADsNamespacesVtbl;
struct IADsPrintQueueVtbl;
struct IAMAudioInputMixer;
struct IAMChannelInfoVtbl;
struct IAMDirectSoundVtbl;
struct IAMExtendedSeeking;
struct IAMMediaStreamVtbl;
struct IAMMediaTypeSample;
struct IAMMediaTypeStream;
struct IAMPhysicalPinInfo;
struct IAMTimecodeDisplay;
struct IASQLOLEAlertsVtbl;
struct IASQLOLEBackupSink;
struct IASQLOLEBackupVtbl;
struct IASQLOLEChecksVtbl;
struct IASQLOLEColumnVtbl;
struct IASQLOLEDRIDefault;
struct IASQLOLEDeviceVtbl;
struct IASQLOLEGroupsVtbl;
struct IASQLOLELoginsVtbl;
struct IASQLOLEObjectList;
struct IASQLOLEPermission;
struct IASQLOLEServerSink;
struct IASQLOLEServerVtbl;
struct IASQLOLETablesVtbl;
struct IAVIEditStreamVtbl;
struct IActiveDesktopVtbl;
struct IActiveScriptError;
struct IActiveScriptParse;
struct IActiveScriptStats;
struct IAgentCommandsVtbl;
struct IAgentCtlCharacter;
struct IAgentCtlUserInput;
struct IApplicationObject;
struct IAudioStreamSample;
struct IBPCDeviceBaseVtbl;
struct IBPCSatelliteTuner;
struct ICDAORecordsetVtbl;
struct ICSSFilterSiteVtbl;
struct ICancelMethodCalls;
struct ICatalogCollection;
struct ICatalogObjectVtbl;
struct ICertEncodeAltName;
struct ICertGetConfigVtbl;
struct IClassFactory2Vtbl;
struct IColumnsRowsetVtbl;
struct ICommandProperties;
struct IComponentUtilVtbl;
struct ICreateDevEnumVtbl;
struct ICreateTypeLibVtbl;
struct IDBDataSourceAdmin;
struct IDataSourceLocator;
struct IDirect3DLightVtbl;
struct IDirect3DMaterial2;
struct IDirect3DRMDevice2;
struct IDirect3DRMTexture;
struct IDirect3DViewport2;
struct IDirectDrawClipper;
struct IDirectDrawFactory;
struct IDirectDrawPalette;
struct IDirectDrawSurface;
struct IDirectInput2AVtbl;
struct IDirectInput2WVtbl;
struct IDirectInputEffect;
struct IDirectSoundBuffer;
struct IDirectSoundNotify;
struct IDirectoryAttrMgmt;
struct IDistributorNotify;
struct IDocHostShowUIVtbl;
struct IDockingWindowSite;
struct IDockingWindowVtbl;
struct IDtcLuRecoveryVtbl;
struct IDtcLuRmEnlistment;
struct IDtcToXaHelperVtbl;
struct IDtcToXaMapperVtbl;
struct IEnumExtendedMedia;
struct IEnumFORMATETCVtbl;
struct IEnumMediaTypeVtbl;
struct IEnumRemoteProcess;
struct IEnumWorkItemsVtbl;
struct IExchExtUserEvents;
struct IExchangeFavorites;
struct IExtensionServices;
struct IFillLockBytesVtbl;
struct IFilterMapper2Vtbl;
struct IFullScreenVideoEx;
struct IGetDataSourceVtbl;
struct IH26XEncodeOptions;
struct IHTMLAnchorElement;
struct IHTMLBRElementVtbl;
struct IHTMLButtonElement;
struct IHTMLDDElementVtbl;
struct IHTMLDTElementVtbl;
struct IHTMLDocument2Vtbl;
struct IHTMLFrameBaseVtbl;
struct IHTMLHRElementVtbl;
struct IHTMLHeaderElement;
struct IHTMLIFrameElement;
struct IHTMLLIElementVtbl;
struct IHTMLLegendElement;
struct IHTMLNextIdElement;
struct IHTMLNoShowElement;
struct IHTMLObjectElement;
struct IHTMLOptionElement;
struct IHTMLOptionsHolder;
struct IHTMLPhraseElement;
struct IHTMLRuleStyleVtbl;
struct IHTMLScriptElement;
struct IHTMLSelectElement;
struct IHTMLStyleFontFace;
struct IHTMLTableCellVtbl;
struct IHTMLTextContainer;
struct IHttpNegotiateVtbl;
struct IInstallCodecsVtbl;
struct IKsPropertySetVtbl;
struct ILayoutStorageVtbl;
struct IMAPIContainerVtbl;
struct IMAPIFormContainer;
struct IMDRangeRowsetVtbl;
struct IMLangFontLinkVtbl;
struct IMediaPositionVtbl;
struct IMediaStreamFilter;
struct IMediaTypeInfoVtbl;
struct IMessageFilterVtbl;
struct IMtsInstanceEvents;
struct IMtsResourceEvents;
struct IMtsSecurityEvents;
struct IMultiLanguageVtbl;
struct INotifyReplicaVtbl;
struct IObjectContextVtbl;
struct IObjectControlVtbl;
struct IOleClientSiteVtbl;
struct IOleParentUndoUnit;
struct IOleUIObjInfoAVtbl;
struct IOleUIObjInfoWVtbl;
struct IOverlayNotifyVtbl;
struct IPersistFolderVtbl;
struct IPersistMemoryVtbl;
struct IPersistStreamInit;
struct IPersistStreamVtbl;
struct IPropertyPage2Vtbl;
struct IProvideClassInfo2;
struct IProviderAdminVtbl;
struct IQuickActivateVtbl;
struct IRegFilterInfoVtbl;
struct IRemoteArrayObject;
struct IRemoteClassObject;
struct IRemoteFloatObject;
struct IRemoteMethodField;
struct IRemoteProcessVtbl;
struct IRemoteShortObject;
struct IRemoteThreadGroup;
struct IRequestDictionary;
struct IRowPositionChange;
struct IRowsetExactScroll;
struct IRowsetNewRowAfter;
struct IRowsetRefreshVtbl;
struct IRowsetResynchVtbl;
struct IRowsetWatchNotify;
struct IRowsetWatchRegion;
struct IRpcChannelBuffer2;
struct IRpcChannelBuffer3;
struct IRpcStubBufferVtbl;
struct IScheduledWorkItem;
struct ISessionObjectVtbl;
struct ISessionProperties;
struct IShellChangeNotify;
struct IShellDispatchVtbl;
struct IShellExecuteHookA;
struct IShellExecuteHookW;
struct IShellLinkDualVtbl;
struct IShellPropSheetExt;
struct IShellUIHelperVtbl;
struct ISilenceSuppressor;
struct ISourcesRowsetVtbl;
struct IStreamBuilderVtbl;
struct ITBasicCallControl;
struct ITCallNotification;
struct ITFileTerminalVtbl;
struct ITMediaSupportVtbl;
struct ITMultiChannelCall;
struct ITNotificationVtbl;
struct ITaskSchedulerVtbl;
struct ITransactionExport;
struct ITransactionImport;
struct ITransactionObject;
struct ITrusteeGroupAdmin;
struct IURLSearchHookVtbl;
struct IUrlHistoryStgVtbl;
struct IVariantChangeType;
struct IVariantDictionary;
struct IWebBrowserAppVtbl;
struct IXAResourceManager;
struct IXATransLookupVtbl;
struct IXATransactionVtbl;
struct MSBDN_OUTPUT_VALUE;
struct OldHTMLFormElement;
struct SIP_DISPATCH_INFO_;
struct SIP_INDIRECT_DATA_;
struct TransactionContext;
struct _ACCESS_DENIED_ACE;
struct _ADOCollectionVtbl;
struct _ADODynaCollection;
struct _AD_GENERAL_PARAMS;
struct _AM_DVDCOPY_BUSKEY;
struct _AM_PROPERTY_SPHLI;
struct _AM_PROPERTY_SPPAL;
struct _Alpha_FpOp_Format;
union _Alpha_Instruction;
struct _Alpha_Jump_Format;
struct _CERT_REQUEST_INFO;
struct _CONNECTDLGSTRUCTA;
struct _CONNECTDLGSTRUCTW;
struct _CONNECTION_INFO_0;
struct _CONNECTION_INFO_1;
struct _CRYPT_OBJID_TABLE;
struct _D3DMATRIXMULTIPLY;
struct _D3DRMLOADRESOURCE;
struct _D3DRMPALETTEENTRY;
struct _DATATYPES_INFO_1A;
struct _DATATYPES_INFO_1W;
struct _DDVIDEOPORTSTATUS;
struct _DEVICE_MEDIA_INFO;
struct _DEV_BROADCAST_HDR;
struct _DEV_BROADCAST_NET;
struct _DEV_BROADCAST_OEM;
struct _DMsepg4EventsVtbl;
struct _DSBPOSITIONNOTIFY;
struct _DTUNE_TVX_CONTROL;
struct _ENCRYPTION_BUFFER;
struct _ERRLOG_OTHER_INFO;
struct _EXPLICIT_ACCESS_A;
struct _EXPLICIT_ACCESS_W;
struct _FLAGGED_BYTE_BLOB;
struct _FLAGGED_WORD_BLOB;
struct _FLT_IF_GET_PARAMS;
struct _FLT_IF_SET_PARAMS;
struct _FMS_GETDRIVEINFOA;
struct _FMS_GETDRIVEINFOW;
struct _FORMAT_PARAMETERS;
struct _GLYPHMETRICSFLOAT;
struct _GRADIENT_TRIANGLE;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_ROM_HEADERS;
struct _INTERNET_BUFFERSA;
struct _INTERNET_BUFFERSW;
struct _IPX_SPECIFIC_DATA;
struct _LOCALGROUP_INFO_0;
struct _LOCALGROUP_INFO_1;
struct _MENU_EVENT_RECORD;
struct _MIDL_SERVER_INFO_;
struct _MIDL_STUB_MESSAGE;
struct _NET_DISPLAY_GROUP;
struct _PRINTER_DEFAULTSA;
struct _PRINTER_DEFAULTSW;
struct _ProxyConfigParams;
struct _QOS_TRAFFIC_CLASS;
struct _RASTERIZER_STATUS;
struct _RAS_SECURITY_INFO;
struct _REMOTE_NAME_INFOA;
struct _REMOTE_NAME_INFOW;
struct _RSVP_RESERVE_INFO;
struct _SERVICE_ADDRESSES;
struct _SERVICE_TYPE_INFO;
struct _SExistRestriction;
struct _SHELLEXECUTEINFOA;
struct _SHELLEXECUTEINFOW;
struct _SINGLE_LIST_ENTRY;
struct _SP_DRVINFO_DATA_A;
struct _SP_DRVINFO_DATA_W;
struct _SP_MOVEDEV_PARAMS;
struct _SPropProblemArray;
struct _STnefProblemArray;
struct _SUPPORT_FUNCTIONS;
struct _TAPE_GET_POSITION;
struct _TAPE_SET_POSITION;
struct _WKSTA_USER_INFO_0;
struct _WKSTA_USER_INFO_1;
struct _WSAPROTOCOL_INFOA;
struct _WSAPROTOCOL_INFOW;
struct _avistdindex_entry;
struct _tagREAD_WRITE_MSR;
struct _userHMETAFILEPICT;
struct aptxwaveformat_tag;
struct copy_trace_to_file;
struct linecallparams_tag;
struct linecallstatus_tag;
struct linedialparams_tag;
struct link_def_info_sect;
struct mc_post_on_receipt;
struct mc_request_to_send;
struct mode_def_info_sect;
struct prepare_to_receive;
struct set_user_log_queue;
struct tACMDRIVERDETAILSA;
struct tACMDRIVERDETAILSW;
struct tACMFILTERDETAILSA;
struct tACMFILTERDETAILSW;
struct tACMFORMATDETAILSA;
struct tACMFORMATDETAILSW;
struct tagAnalogVideoInfo;
struct tagCOLORADJUSTMENT;
struct tagCOMBOBOXEXITEMA;
struct tagCOMBOBOXEXITEMW;
struct tagCOMPOSITIONFORM;
struct tagDBCONTENTVECTOR;
struct tagDBPARAMBINDINFO;
struct tagDBROWWATCHRANGE;
struct tagEMREXTCREATEPEN;
struct tagEMREXTFLOODFILL;
struct tagEMRGRADIENTFILL;
struct tagEMRPOLYPOLYLINE;
struct tagEMRPOLYTEXTOUTA;
struct tagEMRSELECTOBJECT;
struct tagEMRSETTEXTCOLOR;
struct tagENUMTEXTMETRICA;
struct tagENUMTEXTMETRICW;
struct tagFMS_HELPSTRINGA;
struct tagFMS_HELPSTRINGW;
struct tagFMS_TOOLBARLOAD;
struct tagJAVAEXECUTEINFO;
struct tagKBDLLHOOKSTRUCT;
struct tagLOCALESIGNATURE;
struct tagMCI_BREAK_PARMS;
struct tagMCI_INFO_PARMSA;
struct tagMCI_INFO_PARMSW;
struct tagMCI_LOAD_PARMSA;
struct tagMCI_LOAD_PARMSW;
struct tagMCI_OPEN_PARMSA;
struct tagMCI_OPEN_PARMSW;
struct tagMCI_SAVE_PARMSA;
struct tagMCI_SAVE_PARMSW;
struct tagMOUSEHOOKSTRUCT;
struct tagNMLVGETINFOTIPA;
struct tagNMLVGETINFOTIPW;
struct tagNMTBGETINFOTIPA;
struct tagNMTBGETINFOTIPW;
struct tagNMTVGETINFOTIPA;
struct tagNMTVGETINFOTIPW;
struct tagOLEUIEDITLINKSA;
struct tagOLEUIEDITLINKSW;
struct tagOLEUIGNRLPROPSA;
struct tagOLEUIGNRLPROPSW;
struct tagOLEUILINKPROPSA;
struct tagOLEUILINKPROPSW;
struct tagOLEUIVIEWPROPSA;
struct tagOLEUIVIEWPROPSW;
struct tagPACKAGEINFOLIST;
struct tagPROCESSENTRY32W;
struct tagRASCREDENTIALSA;
struct tagRASCREDENTIALSW;
struct tagRECONVERTSTRING;
struct tagRemHENHMETAFILE;
struct tagTIMECODE_SAMPLE;
struct tagTOOLDISPLAYDATA;
struct tagTRACKMOUSEEVENT;
struct tagTTPOLYGONHEADER;
struct tagTVINSERTSTRUCTA;
struct tagTVINSERTSTRUCTW;
struct tagUSEROBJECTFLAGS;
struct tagVIDEOINFOHEADER;
struct tagWINDOWPLACEMENT;
struct tag_IDFCHANNELINFO;
struct tag_IDFPATCHMAPHDR;
struct CCertServerPolicy;
struct CLUS_SCSI_ADDRESS;
struct CatalogCollection;
struct ClassArrayOfArray;
struct ClassArrayOfFloat;
struct ClassArrayOfShort;
struct ClusNetInterfaces;
struct ClusObjCollection;
struct ClusRefObjectVtbl;
struct ClusResGroupsVtbl;
struct ClusResOwnersVtbl;
struct ClusResourcesVtbl;
struct DBPCVidEventsVtbl;
struct DIDEVICEINSTANCEA;
struct DIDEVICEINSTANCEW;
struct DIPROPGUIDANDPATH;
struct DWebBrowserEvents;
struct DispIHTMLSpanFlow;
struct DispIHTMLTableCol;
struct DispIHTMLTableRow;
struct HTMLAnchorElement;
struct HTMLButtonElement;
struct HTMLElementEvents;
struct HTMLHeaderElement;
struct HTMLImgEventsVtbl;
struct HTMLLegendElement;
struct HTMLMapEventsVtbl;
struct HTMLNextIdElement;
struct HTMLNoShowElement;
struct HTMLObjectElement;
struct HTMLOptionElement;
struct HTMLPhraseElement;
struct HTMLScriptElement;
struct HTMLSelectElement;
struct HTMLStyleFontFace;
struct IADsContainerVtbl;
struct IADsFileShareVtbl;
struct IADsPropertyEntry;
struct IADsPropertyValue;
struct IAMCollectionVtbl;
struct IAMNetShowExProps;
struct IAMTimecodeReader;
struct IASQLOLEAlertVtbl;
struct IASQLOLECheckVtbl;
struct IASQLOLEDBObjects;
struct IASQLOLEDatabases;
struct IASQLOLEExecutive;
struct IASQLOLEGroupVtbl;
struct IASQLOLEIndexVtbl;
struct IASQLOLELanguages;
struct IASQLOLELoginVtbl;
struct IASQLOLENamesVtbl;
struct IASQLOLEOperators;
struct IASQLOLERulesVtbl;
struct IASQLOLEStdObject;
struct IASQLOLETableVtbl;
struct IASQLOLETasksVtbl;
struct IASQLOLEUsersVtbl;
struct IASQLOLEViewsVtbl;
struct IAVIStreamingVtbl;
struct IActiveScriptSite;
struct IActiveScriptVtbl;
struct IAdviseSinkExVtbl;
struct IAgentBalloonVtbl;
struct IAgentCommandVtbl;
struct IAgentCtlCommands;
struct IAsyncManagerVtbl;
struct IAudioMediaStream;
struct IAuthenticateVtbl;
struct IBindEventHandler;
struct IBindProtocolVtbl;
struct IBitmapEffectVtbl;
struct ICertServerPolicy;
struct IClassFactoryVtbl;
struct IClassRefreshVtbl;
struct IConfigAviMuxVtbl;
struct IContextMenu2Vtbl;
struct IContextMenu3Vtbl;
struct IContinueCallback;
struct IDBInitializeVtbl;
struct IDBPropertiesVtbl;
struct IDataAdviseHolder;
struct IDirect3DMaterial;
struct IDirect3DRMDevice;
struct IDirect3DRMFrame2;
struct IDirect3DRMObject;
struct IDirect3DRMShadow;
struct IDirect3DRMVisual;
struct IDirect3DTexture2;
struct IDirect3DViewport;
struct IDirectDrawKernel;
struct IDirectInputAVtbl;
struct IDirectInputWVtbl;
struct IDirectPlayLobby2;
struct IDirectShowStream;
struct IDirectWriterLock;
struct IDispenserManager;
struct IDocHostUIHandler;
struct IEPGComponentVtbl;
struct IEnumCATEGORYINFO;
struct IEnumChannelsVtbl;
struct IEnumCodePageVtbl;
struct IEnumJAVAPROPERTY;
struct IEnumLINEINFOVtbl;
struct IEnumOleUndoUnits;
struct IEnumRemoteObject;
struct IEnumRemoteThread;
struct IEnumSTATDATAVtbl;
struct IEnumTerminalVtbl;
struct IErrorRecordsVtbl;
struct IEventMonikerVtbl;
struct IExtractIconAVtbl;
struct IExtractIconWVtbl;
struct IFileSourceFilter;
struct IFilterGraph2Vtbl;
struct IFilterMapperVtbl;
struct IFolderViewOCVtbl;
struct IGetClusterUIInfo;
struct IGetDispenserVtbl;
struct IGraphBuilderVtbl;
struct IGraphVersionVtbl;
struct IH26XSnapshotVtbl;
struct IH26XVideoEffects;
struct IHTMLBlockElement;
struct IHTMLControlRange;
struct IHTMLDListElement;
struct IHTMLDocumentVtbl;
struct IHTMLEmbedElement;
struct IHTMLEventObjVtbl;
struct IHTMLFrameElement;
struct IHTMLLabelElement;
struct IHTMLLocationVtbl;
struct IHTMLOListElement;
struct IHTMLSpanFlowVtbl;
struct IHTMLStyleElement;
struct IHTMLTableCaption;
struct IHTMLTableColVtbl;
struct IHTMLTableRowVtbl;
struct IHTMLTableSection;
struct IHTMLTitleElement;
struct IHTMLTxtRangeVtbl;
struct IHTMLUListElement;
struct IHttpSecurityVtbl;
struct IInternetBindInfo;
struct IInternetPriority;
struct IInternetProtocol;
struct IJavaDebugManager;
struct IJavaEnumLINEINFO;
struct IJavaExecute2Vtbl;
struct IMAPIFormInfoVtbl;
struct IMAPIProgressVtbl;
struct IMSAdminBaseSinkW;
struct IMSAdminBaseWVtbl;
struct IMediaControlVtbl;
struct IMediaEventExVtbl;
struct IMediaPropertyBag;
struct IMediaSample2Vtbl;
struct IMediaSeekingVtbl;
struct IMemAllocatorVtbl;
struct IMpegAudioDecoder;
struct IMtsEventInfoVtbl;
struct IMtsPackageEvents;
struct IMtsUserEventVtbl;
struct IMultiMediaStream;
struct INewShortcutHookA;
struct INewShortcutHookW;
struct IObjectSafetyVtbl;
struct IObtainRatingVtbl;
struct IOleCommandTarget;
struct IOleContainerVtbl;
struct IOleInPlaceObject;
struct IOleInPlaceSiteEx;
struct IOleItemContainer;
struct IParentRowsetVtbl;
struct IParseDisplayName;
struct IPropertyBag2Vtbl;
struct IPropertyPageSite;
struct IPropertyPageVtbl;
struct IProvideClassInfo;
struct IQueueCommandVtbl;
struct IRTPRPHFilterVtbl;
struct IRTPSPHFilterVtbl;
struct IRemoteArrayField;
struct IRemoteByteObject;
struct IRemoteCharObject;
struct IRemoteClassField;
struct IRemoteLongObject;
struct IRemoteObjectVtbl;
struct IRemoteStackFrame;
struct IRemoteThreadVtbl;
struct IResourceConsumer;
struct IRowsetAsynchVtbl;
struct IRowsetChangeVtbl;
struct IRowsetLocateVtbl;
struct IRowsetNextRowset;
struct IRowsetNotifyVtbl;
struct IRowsetScrollVtbl;
struct IRowsetUpdateVtbl;
struct IRpcChannelBuffer;
struct ISQLErrorInfoVtbl;
struct IScriptingContext;
struct ISecurityInfoVtbl;
struct ISecurityProperty;
struct ISequentialStream;
struct IShellBrowserVtbl;
struct IShellExtInitVtbl;
struct IShellIconOverlay;
struct IShellWindowsVtbl;
struct IStreamSampleVtbl;
struct ISupportErrorInfo;
struct ISynchronizeEvent;
struct ISynchronizeMutex;
struct ITConsultCallVtbl;
struct ITMediaCollection;
struct ITParticipantInfo;
struct ITTerminalManager;
struct ITTerminalSupport;
struct ITVControlPrivate;
struct ITrackStorageVtbl;
struct ITransactionLocal;
struct ITrusteeAdminVtbl;
struct ITypeChangeEvents;
struct IUrlHistoryNotify;
struct IViewObjectExVtbl;
struct IWCWizardCallback;
struct IWaitMultipleVtbl;
struct MD_CollectionVtbl;
struct NDdeShareInfo_tag;
struct RecordsetEventsVt;
struct SdpConferenceBlob;
struct ShellFolderViewOC;
struct _ACCESS_INFO_1002;
struct _ACTRL_OVERLAPPED;
struct _ADDRESS_RESERVED;
struct _ADMIN_OTHER_INFO;
struct _Alpha_PAL_Format;
struct _CERT_KEY_CONTEXT;
struct _CERT_POLICY_INFO;
struct _CMSG_SIGNER_INFO;
struct _CMSG_STREAM_INFO;
struct _CRYPT_ATTRIBUTES;
struct _Connection15Vtbl;
struct _D3DTRANSFORMCAPS;
struct _D3DTRANSFORMDATA;
struct _DADV_CONTROLVtbl;
struct _DFS_STORAGE_INFO;
struct _DISK_PERFORMANCE;
struct _DPCOMPORTADDRESS;
struct _EVENTSFORLOGFILE;
struct _EXCEPTION_RECORD;
struct _FIND_NAME_BUFFER;
struct _FIND_NAME_HEADER;
struct _HISTOGRAM_BUCKET;
struct _HSE_VERSION_INFO;
union _IMAGE_AUX_SYMBOL;
struct _IMAGE_DEBUG_MISC;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_LINENUMBER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OS2_HEADER;
struct _IMAGE_RELOCATION;
struct _IMAGE_VXD_HEADER;
struct _INTERFACE_RECORD;
struct _IPX_ADAPTER_INFO;
struct _IPX_ADDRESS_DATA;
struct _IPX_SERVER_ENTRY;
struct _IP_SPECIFIC_DATA;
struct _KEY_EVENT_RECORD;
struct _KEY_TYPE_SUBTYPE;
struct _NET_DISPLAY_USER;
struct _NS_SERVICE_INFOA;
struct _NS_SERVICE_INFOW;
struct _OBJECT_TYPE_LIST;
struct _OSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW;
struct _PERF_OBJECT_TYPE;
struct _PRINT_OTHER_INFO;
struct _PROPSHEETHEADERA;
struct _PROPSHEETHEADERW;
struct _PROVIDOR_INFO_1A;
struct _PROVIDOR_INFO_1W;
struct _PROV_ENUMALGS_EX;
struct _PUBLISHEDAPPINFO;
struct _QualityOfService;
struct _REPL_EDIR_INFO_0;
struct _REPL_EDIR_INFO_1;
struct _REPL_EDIR_INFO_2;
struct _REPL_IDIR_INFO_0;
struct _REPL_IDIR_INFO_1;
struct _RPC_SECURITY_QOS;
struct _RSVP_STATUS_INFO;
struct _SCARD_IO_REQUEST;
struct _SECURITY_MESSAGE;
struct _SENDCMDOUTPARAMS;
struct _SERVER_INFO_1005;
struct _SERVER_INFO_1010;
struct _SERVER_INFO_1016;
struct _SERVER_INFO_1017;
struct _SERVER_INFO_1018;
struct _SERVER_INFO_1107;
struct _SERVER_INFO_1501;
struct _SERVER_INFO_1502;
struct _SERVER_INFO_1503;
struct _SERVER_INFO_1506;
struct _SERVER_INFO_1509;
struct _SERVER_INFO_1510;
struct _SERVER_INFO_1511;
struct _SERVER_INFO_1512;
struct _SERVER_INFO_1513;
struct _SERVER_INFO_1514;
struct _SERVER_INFO_1515;
struct _SERVER_INFO_1516;
struct _SERVER_INFO_1518;
struct _SERVER_INFO_1520;
struct _SERVER_INFO_1521;
struct _SERVER_INFO_1522;
struct _SERVER_INFO_1523;
struct _SERVER_INFO_1524;
struct _SERVER_INFO_1525;
struct _SERVER_INFO_1528;
struct _SERVER_INFO_1529;
struct _SERVER_INFO_1530;
struct _SERVER_INFO_1533;
struct _SERVER_INFO_1534;
struct _SERVER_INFO_1535;
struct _SERVER_INFO_1536;
struct _SERVER_INFO_1537;
struct _SERVER_INFO_1538;
struct _SERVER_INFO_1539;
struct _SERVER_INFO_1540;
struct _SERVER_INFO_1541;
struct _SERVER_INFO_1542;
struct _SERVER_INFO_1543;
struct _SERVER_INFO_1544;
struct _SERVER_INFO_1545;
struct _SERVER_INFO_1546;
struct _SERVER_INFO_1547;
struct _SERVER_INFO_1548;
struct _SERVER_INFO_1549;
struct _SERVER_INFO_1550;
struct _SERVER_INFO_1552;
struct _SERVER_INFO_1553;
struct _SERVER_INFO_1554;
struct _SERVER_INFO_1555;
struct _SERVER_INFO_1556;
struct _SERVER_INFO_1557;
struct _SERVER_INFO_1560;
struct _SERVER_INFO_1561;
struct _SERVER_INFO_1562;
struct _SERVER_INFO_1563;
struct _SERVER_INFO_1564;
struct _SERVER_INFO_1565;
struct _SERVER_INFO_1566;
struct _SERVER_INFO_1567;
struct _SERVER_INFO_1568;
struct _SERVER_INFO_1569;
struct _SERVER_INFO_1570;
struct _SERVER_INFO_1571;
struct _SERVER_INFO_1572;
struct _SERVER_INFO_1573;
struct _SERVER_INFO_1574;
struct _SERVER_INFO_1575;
struct _SERVER_INFO_1576;
struct _SERVER_INFO_1577;
struct _SERVER_INFO_1578;
struct _SERVER_INFO_1579;
struct _SERVER_INFO_1580;
struct _SERVER_INFO_1581;
struct _SERVER_INFO_1582;
struct _SERVER_INFO_1583;
struct _SERVER_INFO_1584;
struct _SERVER_INFO_1585;
struct _SERVER_INFO_1586;
struct _SERVER_INFO_1587;
struct _SERVER_INFO_1588;
struct _SERVER_INFO_1589;
struct _SERVER_INFO_1590;
struct _SERVER_INFO_1591;
struct _SERVER_INFO_1592;
struct _SERVER_INFO_1593;
struct _SERVER_INFO_1594;
struct _SERVER_INFO_1595;
struct _SERVER_INFO_1596;
struct _SESSION_INFO_502;
struct _SSizeRestriction;
struct _SYSTEM_ALARM_ACE;
struct _SYSTEM_AUDIT_ACE;
struct _SecurityUserData;
struct _TAPE_WRITE_MARKS;
struct _TIME_OF_DAY_INFO;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_STATISTICS;
struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAW;
struct _WLX_PROFILE_V1_0;
struct _WLX_PROFILE_V2_0;
struct _WSANETWORKEVENTS;
struct _WSAPROTOCOLCHAIN;
struct _WSH_LOOKUP_ZONES;
struct _avitimecodeindex;
struct _tagCOMPONENTSOPT;
struct _tagEXTSTACKTRACE;
struct _tagPROCESSORINFO;
struct _userHENHMETAFILE;
struct _wireSAFEARR_BSTR;
struct adapter_info_sect;
struct ads_search_column;
struct alt_alias_overlay;
struct get_tp_properties;
struct ldap_version_info;
struct lineagentcaps_tag;
struct linecardentry_tag;
struct linedevstatus_tag;
struct mc_get_attributes;
struct midiproptempo_tag;
struct pcmwaveformat_tag;
struct plu_def_info_sect;
struct receive_immediate;
struct send_conversation;
struct srv_comport_queue;
struct sys_def_info_sect;
struct tACMFILTERCHOOSEA;
struct tACMFILTERCHOOSEW;
struct tACMFORMATCHOOSEA;
struct tACMFORMATCHOOSEW;
struct tagBITMAPCOREINFO;
struct tagCBT_CREATEWNDA;
struct tagCBT_CREATEWNDW;
struct tagCOPYDATASTRUCT;
struct tagCStdStubBuffer;
struct tagDRAWITEMSTRUCT;
struct tagDRAWTEXTPARAMS;
struct tagDVTARGETDEVICE;
struct tagEMREXTTEXTOUTA;
struct tagEMRPIXELFORMAT;
struct tagENUMLOGFONTEXA;
struct tagENUMLOGFONTEXW;
struct tagEXBMINFOHEADER;
struct tagJPEGINFOHEADER;
struct tagLOGCOLORSPACEA;
struct tagLOGCOLORSPACEW;
struct tagMCI_PLAY_PARMS;
struct tagMCI_SEEK_PARMS;
struct tagMODULEENTRY32W;
struct tagMONITORINFOEXA;
struct tagMONITORINFOEXW;
struct tagMOUSEMOVEPOINT;
struct tagMPEG1VIDEOINFO;
struct tagMPEG2VIDEOINFO;
struct tagMSLLHOOKSTRUCT;
struct tagNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW;
struct tagNMITEMACTIVATE;
struct tagNMLVCUSTOMDRAW;
struct tagNMOBJECTNOTIFY;
struct tagNMTTCUSTOMDRAW;
struct tagNMTVCUSTOMDRAW;
struct tagPROCESSENTRY32;
struct tagRASCONNSTATUSA;
struct tagRASCONNSTATUSW;
struct tagRASDIALPARAMSA;
struct tagRASDIALPARAMSW;
struct tagREBARBANDINFOA;
struct tagREBARBANDINFOW;
struct tagSAFEARRAYBOUND;
struct tagSQL_DAY_SECOND;
struct tagSQL_YEAR_MONTH;
struct tagSTATPROPSETSTG;
struct tagSTRINGEXSTRUCT;
struct tagVFW_FILTERLIST;
struct tag_IDFCHANNELHDR;
struct tag_TRUECOLORINFO;
struct test_rts_and_post;
struct ClassArrayOfByte;
struct ClassArrayOfChar;
struct ClassArrayOfLong;
struct ClusNetInterface;
struct ClusNetworksVtbl;
struct ClusPropertyVtbl;
struct ClusResGroupVtbl;
struct ClusResTypesVtbl;
struct ClusResourceVtbl;
struct ClusterNamesVtbl;
struct ConnectionEvents;
struct DataSourceObject;
struct DispIHTMLBGsound;
struct HTMLAnchorEvents;
struct HTMLBlockElement;
struct HTMLDListElement;
struct HTMLFrameElement;
struct HTMLFrameSetSite;
struct HTMLLabelElement;
struct HTMLOListElement;
struct HTMLScriptEvents;
struct HTMLStyleElement;
struct HTMLTableCaption;
struct HTMLTableSection;
struct HTMLTitleElement;
struct HTMLUListElement;
struct HTMLWindowEvents;
struct IABContainerVtbl;
struct IADsAttrInfoVtbl;
struct IADsComputerVtbl;
struct IADsLargeInteger;
struct IADsLocalityVtbl;
struct IADsOpenDSObject;
struct IADsPathnameVtbl;
struct IADsPrintJobVtbl;
struct IADsPropertyList;
struct IADsPropertyVtbl;
struct IADsResourceVtbl;
struct IAMCameraControl;
struct IAMDroppedFrames;
struct IAMExtDeviceVtbl;
struct IAMNetShowConfig;
struct IAMNetworkStatus;
struct IAMStreamControl;
struct IAMovieSetupVtbl;
struct IASQLOLEArticles;
struct IASQLOLEBulkCopy;
struct IASQLOLEDBObject;
struct IASQLOLEDBOption;
struct IASQLOLEDatabase;
struct IASQLOLEDefaults;
struct IASQLOLEKeysVtbl;
struct IASQLOLELanguage;
struct IASQLOLENameList;
struct IASQLOLEOperator;
struct IASQLOLERegistry;
struct IASQLOLERuleVtbl;
struct IASQLOLETaskVtbl;
struct IASQLOLETransfer;
struct IASQLOLETriggers;
struct IASQLOLEUserVtbl;
struct IASQLOLEViewVtbl;
struct IAdviseSink2Vtbl;
struct IAgentCtlBalloon;
struct IAgentCtlCommand;
struct IAgentCtlRequest;
struct IAgentNotifySink;
struct IAsyncReaderVtbl;
struct IBPCEmailMessage;
struct IBPCPurchaseVtbl;
struct ICatRegisterVtbl;
struct ICertRequestVtbl;
struct IChannelHookVtbl;
struct IChapteredRowset;
struct IClassAccessVtbl;
struct ICodeInstallVtbl;
struct IColumnsInfoVtbl;
struct ICommandCostVtbl;
struct ICommandTextVtbl;
struct ICommandTreeVtbl;
struct ICommandValidate;
struct IConnectionPoint;
struct IContextMenuVtbl;
struct IConvertTypeVtbl;
struct ICreateErrorInfo;
struct ICreateTypeInfo2;
struct IDBCreateCommand;
struct IDBCreateSession;
struct IDBSchemaCommand;
struct IDataConvertVtbl;
struct IDeferredCommand;
struct IDirect3DDevice2;
struct IDirect3DRM2Vtbl;
struct IDirect3DRMArray;
struct IDirect3DRMFrame;
struct IDirect3DRMLight;
struct IDirect3DTexture;
struct IDirectDraw2Vtbl;
struct IDirectDraw3Vtbl;
struct IDirectDrawVideo;
struct IDirectPlay2Vtbl;
struct IDirectPlay3Vtbl;
struct IDirectPlayLobby;
struct IDirectSoundVtbl;
struct IDirectoryObject;
struct IDirectorySearch;
struct IDispenserDriver;
struct IDvdGraphBuilder;
struct IEnumAddressType;
struct IEnumAddressVtbl;
struct IEnumChannelVtbl;
struct IEnumConnections;
struct IEnumFiltersVtbl;
struct IEnumMonikerVtbl;
struct IEnumOLEVERBVtbl;
struct IEnumPackageVtbl;
struct IEnumRemoteField;
struct IEnumRemoteValue;
struct IEnumRfc1766Vtbl;
struct IEnumSTATPROPSTG;
struct IEnumSTATSTGVtbl;
struct IEnumSTATURLVtbl;
struct IEnumUnknownVtbl;
struct IEnumVARIANTVtbl;
struct IErrorLookupVtbl;
struct IExchExtCallback;
struct IExchExtCommands;
struct IExchExtModeless;
struct IExchangeRuleExt;
struct IFileAsyncIOVtbl;
struct IFileSinkFilter2;
struct IFileViewerAVtbl;
struct IFileViewerWVtbl;
struct IFilterGraphVtbl;
struct IFullScreenVideo;
struct IHTMLAreaElement;
struct IHTMLBGsoundVtbl;
struct IHTMLBaseElement;
struct IHTMLBodyElement;
struct IHTMLDatabinding;
struct IHTMLDivPosition;
struct IHTMLElementVtbl;
struct IHTMLFontElement;
struct IHTMLFormElement;
struct IHTMLLinkElement;
struct IHTMLListElement;
struct IHTMLMetaElement;
struct IHTMLParaElement;
struct IHTMLSpanElement;
struct IHTMLTextElement;
struct IHTMLWindow2Vtbl;
struct IHlinkTargetVtbl;
struct IIndexDefinition;
struct IInputObjectSite;
struct IInputObjectVtbl;
struct IInternetSession;
struct IJavaExecuteVtbl;
struct IMAPIControlVtbl;
struct IMAPIFormFactory;
struct IMAPIFormMgrVtbl;
struct IMAPIMessageSite;
struct IMAPISessionVtbl;
struct IMAPISupportVtbl;
struct IMAPIViewContext;
struct IMLangStringAStr;
struct IMLangStringBufA;
struct IMLangStringBufW;
struct IMLangStringVtbl;
struct IMLangStringWStr;
struct IMediaFilterVtbl;
struct IMediaSampleVtbl;
struct IMediaStreamVtbl;
struct IMemInputPinVtbl;
struct IMprUIPluginVtbl;
struct IMsgServiceAdmin;
struct IMtsMethodEvents;
struct IMtsObjectEvents;
struct IMtsThreadEvents;
struct IMultipleResults;
struct IOleAdviseHolder;
struct IOleCacheControl;
struct IOleDocumentSite;
struct IOleDocumentView;
struct IOleDocumentVtbl;
struct IOleInPlaceFrame;
struct IOleUndoUnitVtbl;
struct IOmNavigatorVtbl;
struct IPSFactoryBuffer;
struct IP_LOCAL_BINDING;
struct IPackageUtilVtbl;
struct IPersistFileVtbl;
struct IPictureDispVtbl;
struct IPointerInactive;
struct IPrepareInfoVtbl;
struct IPropertyBagVtbl;
struct IPropertyStorage;
struct IProvideTaskPage;
struct IRPHH26XSettings;
struct IReferenceClock2;
struct IRemoteDataField;
struct IRemoteFieldVtbl;
struct IRemoteIntObject;
struct IResourceManager;
struct IRichEditOleVtbl;
struct IRootStorageVtbl;
struct IRowPositionVtbl;
struct IRowsetIndexVtbl;
struct ISQLGetDiagField;
struct ISeekingPassThru;
struct IServiceProvider;
struct IShellFolderVtbl;
struct ISimpleFrameSite;
struct ISoftDistExtVtbl;
struct ISpoolerHookVtbl;
struct ISubscriptionMgr;
struct ISynchronizeVtbl;
struct ITAMTerminalVtbl;
struct ITCallMediaEvent;
struct ITCallStateEvent;
struct ITCollectionVtbl;
struct ITConferenceBlob;
struct ITConferenceVtbl;
struct ITConnectionVtbl;
struct ITTimeCollection;
struct ITableDefinition;
struct ITableRenameVtbl;
struct ITaskTriggerVtbl;
struct ITransactionJoin;
struct ITransactionVtbl;
struct ITypeFactoryVtbl;
struct ITypeMarshalVtbl;
struct IVideoWindowVtbl;
struct IViewChapterVtbl;
struct IViewObject2Vtbl;
struct IWEInvokeCommand;
struct IWebBrowser2Vtbl;
struct IWinInetHttpInfo;
struct IWinInetInfoVtbl;
struct IWriteCookieVtbl;
struct IXMLDocumentVtbl;
struct InternetExplorer;
struct MS_ADDINFO_BLOB_;
struct MS_ADDINFO_FLAT_;
union RAS_PARAMS_VALUE;
struct SIP_SUBJECTINFO_;
struct ScriptingContext;
struct VolLockBroadcast;
struct _AE_RESACCESSREJ;
struct _AUX_RGBImageRec;
struct _AgentEventsVtbl;
struct _CERT_CONTEXT_EX;
struct _CERT_EXTENSIONS;
struct _CERT_NAME_VALUE;
struct _CHANGER_ELEMENT;
struct _CHARDEVQ_INFO_0;
struct _CHARDEVQ_INFO_1;
struct _CONTROL_SERVICE;
struct _CRYPT_ATTRIBUTE;
struct _CRYPT_HASH_INFO;
struct _D3DLIGHTINGCAPS;
struct _D3DRMLOADMEMORY;
struct _D3DRMQUATERNION;
struct _DDVIDEOPORTCAPS;
struct _DDVIDEOPORTDESC;
struct _DDVIDEOPORTINFO;
struct _DISPLAY_DEVICEA;
struct _DISPLAY_DEVICEW;
struct _DSKTLSYSTEMTIME;
struct _DTBLRADIOBUTTON;
struct _FILEDESCRIPTORA;
struct _FILEDESCRIPTORW;
struct _FMS_GETFILESELA;
struct _FMS_GETFILESELW;
struct _GENERIC_MAPPING;
struct _GET_MEDIA_TYPES;
struct _GROUP_INFO_1002;
struct _GROUP_INFO_1005;
struct _HTTP_FILTER_LOG;
struct _IMAGEHLP_MODULE;
struct _IMAGEHLP_SYMBOL;
struct _IPX_GLOBAL_INFO;
struct _IPX_NETNUM_DATA;
struct _LLC_XMIT_BUFFER;
struct _MEMORYSTATUSVLM;
struct _METADATA_RECORD;
struct _MIDL_ES_MESSAGE;
struct _MONITOR_INFO_1A;
struct _MONITOR_INFO_1W;
struct _MONITOR_INFO_2A;
struct _MONITOR_INFO_2W;
struct _MonSharedMemory;
struct _NETLOGON_INFO_1;
struct _NETLOGON_INFO_2;
struct _NETLOGON_INFO_3;
struct _NETLOGON_INFO_4;
struct _NOTIFYICONDATAA;
struct _NOTIFYICONDATAW;
struct _NTFS_STATISTICS;
struct _PACKEDEVENTINFO;
struct _PATHNAME_BUFFER;
struct _PERF_DATA_BLOCK;
struct _POLICY_EFS_INFO;
struct _PRINTER_INFO_1A;
struct _PRINTER_INFO_1W;
struct _PRINTER_INFO_2A;
struct _PRINTER_INFO_2W;
struct _PRINTER_INFO_4A;
struct _PRINTER_INFO_4W;
struct _PRINTER_INFO_5A;
struct _PRINTER_INFO_5W;
struct _PRINTER_INFO_7A;
struct _PRINTER_INFO_7W;
struct _REASSIGN_BLOCKS;
struct _RIP_GLOBAL_INFO;
struct _RPC_ASYNC_STATE;
struct _RSVP_FILTERSPEC;
struct _Recordset15Vtbl;
struct _RemotableHandle;
struct _SAP_GLOBAL_INFO;
struct _SAndRestriction;
struct _SECURITY_STRING;
struct _SENDCMDINPARAMS;
struct _SERVER_INFO_100;
struct _SERVER_INFO_101;
struct _SERVER_INFO_102;
struct _SERVER_INFO_402;
struct _SERVER_INFO_403;
struct _SERVER_INFO_502;
struct _SERVER_INFO_503;
struct _SERVER_INFO_598;
struct _SERVER_INFO_599;
struct _SERVICE_ADDRESS;
struct _SESSION_INFO_10;
struct _SHARE_INFO_1004;
struct _SHARE_INFO_1005;
struct _SHARE_INFO_1006;
struct _SHARE_INFO_1007;
struct _SHARE_INFO_1501;
struct _SHDESCRIPTIONID;
struct _SHFILEOPSTRUCTA;
struct _SHFILEOPSTRUCTW;
struct _SNotRestriction;
struct _SP_DEVINFO_DATA;
struct _SSubRestriction;
struct _TAPE_STATISTICS;
struct _TRUSTEE_ACCESSA;
struct _TRUSTEE_ACCESSW;
struct _TT_HITTESTINFOA;
struct _TT_HITTESTINFOW;
struct _USER_MARSHAL_CB;
struct _USER_OTHER_INFO;
struct _VTableProvStruc;
struct _WIN32_STREAM_ID;
struct _WIN_CERTIFICATE;
struct _WKSTA_INFO_1010;
struct _WKSTA_INFO_1011;
struct _WKSTA_INFO_1012;
struct _WKSTA_INFO_1013;
struct _WKSTA_INFO_1018;
struct _WKSTA_INFO_1023;
struct _WKSTA_INFO_1027;
struct _WKSTA_INFO_1028;
struct _WKSTA_INFO_1032;
struct _WKSTA_INFO_1033;
struct _WKSTA_INFO_1041;
struct _WKSTA_INFO_1042;
struct _WKSTA_INFO_1043;
struct _WKSTA_INFO_1044;
struct _WKSTA_INFO_1045;
struct _WKSTA_INFO_1046;
struct _WKSTA_INFO_1047;
struct _WKSTA_INFO_1048;
struct _WKSTA_INFO_1049;
struct _WKSTA_INFO_1050;
struct _WKSTA_INFO_1051;
struct _WKSTA_INFO_1052;
struct _WKSTA_INFO_1053;
struct _WKSTA_INFO_1054;
struct _WKSTA_INFO_1055;
struct _WKSTA_INFO_1056;
struct _WKSTA_INFO_1057;
struct _WKSTA_INFO_1058;
struct _WKSTA_INFO_1059;
struct _WKSTA_INFO_1060;
struct _WKSTA_INFO_1061;
struct _WKSTA_INFO_1062;
struct _WSANSClassInfoA;
struct _WSANSClassInfoW;
struct _WSH_LOOKUP_NAME;
struct _X509Certificate;
struct _ads_object_info;
struct _avistreamheader;
struct _ensaveclipboard;
struct _gettextlengthex;
struct _objectpositions;
struct _tagCODEBASEHOLD;
struct _tagPROTOCOLDATA;
struct _tagSOFTDISTINFO;
struct _tagWALLPAPEROPT;
struct channel_caps_tag;
struct linecallinfo_tag;
struct linecalllist_tag;
struct linetermcaps_tag;
struct link_def_overlay;
struct lu_0_3_info_sect;
struct lu_def_info_sect;
struct mode_def_overlay;
struct phonemessage_tag;
struct receive_allocate;
struct receive_and_post;
struct receive_and_wait;
struct receive_log_data;
struct srv_login_oldtds;
struct tACMSTREAMHEADER;
struct tagACCESSTIMEOUT;
struct tagANIMATIONINFO;
struct tagCANDIDATEFORM;
struct tagCANDIDATELIST;
struct tagCAPROPVARIANT;
struct tagCIPROPERTYDEF;
struct tagCREATESTRUCTA;
struct tagCREATESTRUCTW;
struct tagCapDriverCaps;
struct tagDBCOMMANDTREE;
struct tagDBFAILUREINFO;
struct tagDBLITERALINFO;
struct tagDBPROPINFOSET;
struct tagDB_VARNUMERIC;
struct tagDEBUGHOOKINFO;
struct tagDRVCONFIGINFO;
struct tagEMRALPHABLEND;
struct tagEMRGDICOMMENT;
struct tagEMRPOLYDRAW16;
struct tagEMRPOLYLINE16;
struct tagEMRSTRETCHBLT;
struct tagENHMETAHEADER;
struct tagENHMETARECORD;
struct tagFONTSIGNATURE;
struct tagGUITHREADINFO;
struct tagHARDWAREINPUT;
struct tagHIGHCONTRASTA;
struct tagHIGHCONTRASTW;
struct tagINTERFACEDATA;
struct tagINTERFACEIMPL;
struct tagINTERFACEINFO;
struct tagLASTINPUTINFO;
struct tagLVHITTESTINFO;
struct tagMCI_SET_PARMS;
struct tagMENUITEMINFOA;
struct tagMENUITEMINFOW;
struct tagMIXERCONTROLA;
struct tagMIXERCONTROLW;
struct tagMODULEENTRY32;
struct tagMONCONVSTRUCT;
struct tagMONHSZSTRUCTA;
struct tagMONHSZSTRUCTW;
struct tagMONLINKSTRUCT;
struct tagMQRESTRICTION;
struct tagMSGBOXPARAMSA;
struct tagMSGBOXPARAMSW;
struct tagMULTIKEYHELPA;
struct tagMULTIKEYHELPW;
struct tagNMHDDISPINFOA;
struct tagNMHDDISPINFOW;
struct tagNMLVCACHEHINT;
struct tagNMTTDISPIFNOA;
struct tagNMTTDISPINFOW;
struct tagOEM_PENPACKET;
struct tagOLEUICONVERTA;
struct tagOLEUICONVERTW;
struct tagPACKAGEDETAIL;
struct tagPENDATAHEADER;
struct tagPROFILEHEADER;
struct tagProxyFileInfo;
struct tagRASENTRYNAMEA;
struct tagRASENTRYNAMEW;
struct tagRASMONITORDLG;
struct tagREGISTERWORDA;
struct tagREGISTERWORDW;
struct tagRPCOLEMESSAGE;
struct tagSCROLLBARINFO;
struct tagStorageLayout;
struct tagTBSAVEPARAMSA;
struct tagTBSAVEPARAMSW;
struct tagTCHITTESTINFO;
struct tagTCITEMHEADERA;
struct tagTCITEMHEADERW;
struct tagTHREADENTRY32;
struct tagTVHITTESTINFO;
struct tag_IDFKEYMAPHDR;
struct tagrpcLOGPALETTE;
struct transfer_ms_data;
struct translation_info;
struct BasicAudCapInfo;
struct BasicVidCapInfo;
struct CCertServerExit;
struct CLUSPROP_BINARY;
union CLUSPROP_SYNTAX;
struct CLUS_FTSET_INFO;
struct ClassArrayOfInt;
struct ClusGroupOwners;
struct ClusNetworkVtbl;
struct ClusResTypeVtbl;
struct DICONSTANTFORCE;
struct DRVCONFIGINFOEX;
struct DomainNamesVtbl;
struct EXT_API_VERSION;
struct FolderItemVerbs;
struct FolderItemsVtbl;
struct GENERIC3CHANNEL;
struct HTMLAreaElement;
struct HTMLBaseElement;
struct HTMLDivPosition;
struct HTMLFontElement;
struct HTMLFormElement;
struct HTMLLabelEvents;
struct HTMLLinkElement;
struct HTMLListElement;
struct HTMLMetaElement;
struct HTMLParaElement;
struct HTMLSpanElement;
struct HTMLTableEvents;
struct HTMLTextElement;
struct HTMLWindowProxy;
struct HWINEVENTHOOK__;
struct HierarchiesVtbl;
struct IABProviderVtbl;
struct IADsFileService;
struct IADsMembersVtbl;
struct IADsServiceVtbl;
struct IADsSessionVtbl;
struct IAMCrossbarVtbl;
struct IAMExtTransport;
struct IAMMediaContent;
struct IAMPlayListItem;
struct IAMPlayListVtbl;
struct IAMStreamConfig;
struct IAMStreamSelect;
struct IAMVideoProcAmp;
struct IASQLOLEArticle;
struct IASQLOLEColumns;
struct IASQLOLEDefault;
struct IASQLOLEDevices;
struct IASQLOLEIndexes;
struct IASQLOLEKeyVtbl;
struct IASQLOLEServers;
struct IASQLOLETrigger;
struct IAccessibleVtbl;
struct IAdviseSinkVtbl;
struct IAgentCharacter;
struct IAgentUserInput;
struct IAlterIndexVtbl;
struct IAlterTableVtbl;
struct IAsyncSetupVtbl;
struct IBPCDeviceEvent;
struct IBPCDevicesVtbl;
struct IBPCMessageVtbl;
struct IBPCSuspendVtbl;
struct IBaseFilterVtbl;
struct IBaseVideoMixer;
struct IBasicAudioVtbl;
struct IBasicVideoVtbl;
struct ICatInformation;
struct ICertConfigVtbl;
struct ICertPolicyVtbl;
struct ICertServerExit;
struct IChannelMgrVtbl;
struct IClassActivator;
struct IClassAdminVtbl;
struct IClientSecurity;
struct IComBindingVtbl;
struct ICommDlgBrowser;
struct ICommandPersist;
struct ICommandPrepare;
struct ICreateTypeInfo;
struct ICreateTypeLib2;
struct IDBAsynchNotify;
struct IDBAsynchStatus;
struct IDBSchemaRowset;
struct IDSAttrMgmtVtbl;
struct IDataFilterVtbl;
struct IDataInitialize;
struct IDataObjectVtbl;
struct IDirect3DDevice;
struct IDirect3DRMFace;
struct IDirect3DRMMesh;
struct IDirect3DRMVtbl;
struct IDirect3DRMWrap;
struct IDirectDrawVtbl;
struct IDirectPlayVtbl;
struct IDispatchExVtbl;
struct IDropSourceVtbl;
struct IDropTargetVtbl;
struct IDtcLuConfigure;
struct IDvdControlVtbl;
struct IEnumHLITEMVtbl;
struct IEnumIDListVtbl;
struct IEnumMediaTypes;
struct IEnumRegFilters;
struct IEnumStringVtbl;
struct IFileSinkFilter;
struct IFileViewerSite;
struct IFilterInfoVtbl;
struct IFontEventsDisp;
struct IH26XRTPControl;
struct IHTMLDialogVtbl;
struct IHTMLDivElement;
struct IHTMLImgElement;
struct IHTMLInputImage;
struct IHTMLMapElement;
struct IHTMLOpsProfile;
struct IHTMLScreenVtbl;
struct IHTMLStyleSheet;
struct IHlinkFrameVtbl;
struct IMAPIAdviseSink;
struct IMAPIFolderVtbl;
struct IMAPIStatusVtbl;
struct IMLangCodePages;
struct IMSProviderVtbl;
struct IMTSLocaterVtbl;
struct IMediaEventSink;
struct IMediaEventVtbl;
struct IMemoryDataVtbl;
struct IMixerPinConfig;
struct IObjectIdentity;
struct IObjectWithSite;
struct IOleControlSite;
struct IOleControlVtbl;
struct IOleInPlaceSite;
struct IOleUILinkInfoA;
struct IOleUILinkInfoW;
struct IOleUndoManager;
struct IOpenRowsetVtbl;
struct IPersistFolder2;
struct IPersistHistory;
struct IPersistMessage;
struct IPersistMoniker;
struct IPersistStorage;
struct IProgressNotify;
struct IProvideMoniker;
struct IQualityControl;
struct IRTPDemuxFilter;
struct IReadCookieVtbl;
struct IRecordInfoVtbl;
struct IReferenceClock;
struct IRowsetCopyRows;
struct IRowsetFindVtbl;
struct IRowsetIdentity;
struct IRowsetInfoVtbl;
struct IRowsetKeysVtbl;
struct IRowsetViewVtbl;
struct IRowsetWatchAll;
struct IRpcOptionsVtbl;
struct IRpcProxyBuffer;
struct IRunnableObject;
struct IServerSecurity;
struct ISharedProperty;
struct IShellLinkAVtbl;
struct IShellLinkWVtbl;
struct IShellView2Vtbl;
struct IStdMarshalInfo;
struct IStringListVtbl;
struct ITAttributeList;
struct ITCallTonesVtbl;
struct ITMediaTerminal;
struct IUrlHistoryStg2;
struct IViewFilterVtbl;
struct IViewObjectVtbl;
struct IViewRowsetVtbl;
struct IWEExtendWizard;
struct IWebBrowserVtbl;
struct IXAObtainRMInfo;
struct IXMLElementVtbl;
struct IXPProviderVtbl;
struct MediaCollection;
struct OldHTMLDocument;
struct RecordsetEvents;
struct ShellFolderView;
struct ShellLinkObject;
struct SubscriptionMgr;
struct _ADAPTER_STATUS;
struct _ADDJOB_INFO_1A;
struct _ADDJOB_INFO_1W;
struct _AE_SERVICESTAT;
struct _AVISTREAMINFOA;
struct _AVISTREAMINFOW;
struct _BackupListNode;
struct _CABINET_INFO_A;
struct _CABINET_INFO_W;
struct _CERT_EXTENSION;
struct _CERT_NAME_INFO;
struct _CERT_POLICY_ID;
struct _CHARDEV_INFO_0;
struct _CHARDEV_INFO_1;
struct _COAUTHIDENTITY;
struct _CRL_DIST_POINT;
struct _CRYPTOAPI_BLOB;
struct _CRYPT_BIT_BLOB;
struct _CRYPT_OID_INFO;
struct _ConnectionVtbl;
struct _D3DEXECUTEDATA;
struct _D3DINSTRUCTION;
struct _D3DLINEPATTERN;
struct _D3DRMPICKDESC2;
struct _D3DTEXTURELOAD;
struct _DBanEventsVtbl;
struct _DDCOLORCONTROL;
struct _DEPGEventsVtbl;
struct _DISCDLGSTRUCTA;
struct _DISCDLGSTRUCTW;
struct _DISK_HISTOGRAM;
struct _DPLMSG_GENERIC;
struct _DPOPEventsVtbl;
struct _DPSPEventsVtbl;
struct _DPreviewEvents;
struct _DRIVER_INFO_1A;
struct _DRIVER_INFO_1W;
struct _DRIVER_INFO_2A;
struct _DRIVER_INFO_2W;
struct _DRIVER_INFO_3A;
struct _DRIVER_INFO_3W;
struct _DllVersionInfo;
struct _EVENTLOGRECORD;
struct _FAT_STATISTICS;
struct _FLAG_STGMEDIUM;
struct _FLOWDESCRIPTOR;
struct _FLT_PACKET_LOG;
struct _HD_HITTESTINFO;
struct _HYPER_SIZEDARR;
struct _IF_TABLE_INDEX;
struct _INTERFACE_INFO;
struct _IPXWAN_IF_INFO;
struct _LinkPerfShrHdr;
struct _MIDL_STUB_DESC;
struct _MPR_PROTOCOL_0;
struct _NMTBCUSTOMDRAW;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOW;
struct _PPP_EAP_OUTPUT;
struct _PPP_EAP_PACKET;
struct _PRINTER_INFO_3;
struct _PRINTER_INFO_6;
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
struct _PROTOCOL_INFOA;
struct _PROTOCOL_INFOW;
struct _PUBLICKEYSTRUC;
struct _RB_HITTESTINFO;
struct _REPL_INFO_1000;
struct _REPL_INFO_1001;
struct _REPL_INFO_1002;
struct _REPL_INFO_1003;
struct _RIP_IF_FILTERS;
struct _SAP_IF_FILTERS;
struct _SCONTEXT_QUEUE;
struct _SCurrencyArray;
struct _SDateTimeArray;
struct _SERVICE_INFO_0;
struct _SERVICE_INFO_1;
struct _SERVICE_INFO_2;
struct _SERVICE_STATUS;
struct _SESSION_BUFFER;
struct _SESSION_HEADER;
struct _SESSION_INFO_0;
struct _SESSION_INFO_1;
struct _SESSION_INFO_2;
struct _SHARE_INFO_501;
struct _SHARE_INFO_502;
struct _SHNAMEMAPPINGA;
struct _SHNAMEMAPPINGW;
struct _SHORT_SIZEDARR;
struct _SOCKET_ADDRESS;
struct _SOURCE_MEDIA_A;
struct _SOURCE_MEDIA_W;
struct _SOrRestriction;
struct _SPropAttrArray;
struct _SV2CVW2_PARAMS;
union _ULARGE_INTEGER;
struct _USER_INFO_1003;
struct _USER_INFO_1005;
struct _USER_INFO_1006;
struct _USER_INFO_1007;
struct _USER_INFO_1008;
struct _USER_INFO_1009;
struct _USER_INFO_1010;
struct _USER_INFO_1011;
struct _USER_INFO_1012;
struct _USER_INFO_1013;
struct _USER_INFO_1014;
struct _USER_INFO_1017;
struct _USER_INFO_1018;
struct _USER_INFO_1020;
struct _USER_INFO_1023;
struct _USER_INFO_1024;
struct _USER_INFO_1025;
struct _USER_INFO_1051;
struct _USER_INFO_1052;
struct _USER_INFO_1053;
struct _WKSTA_INFO_100;
struct _WKSTA_INFO_101;
struct _WKSTA_INFO_102;
struct _WKSTA_INFO_302;
struct _WKSTA_INFO_402;
struct _WKSTA_INFO_502;
struct _WSPUPCALLTABLE;
struct _ZONEATTRIBUTES;
struct _audcapinfolist;
struct _repastespecial;
struct _tagChannelInfo;
struct _tagRemBINDINFO;
struct _tp_start_entry;
struct _userCLIPFORMAT;
struct _vidcapinfolist;
struct _wfinddatai64_t;
struct adapter_overlay;
struct adapterperfdata;
struct lineappinfo_tag;
struct linedevcaps_tag;
struct lineforward_tag;
struct linemessage_tag;
struct ms_appl_overlay;
struct phonestatus_tag;
struct plu_def_overlay;
struct post_on_receipt;
struct request_to_send;
struct side_info_entry;
struct tagCATEGORYINFO;
struct tagCCSTYLEFLAGA;
struct tagCCSTYLEFLAGW;
struct tagCHANNEL_INFO;
struct tagCHOOSECOLORA;
struct tagCHOOSECOLORW;
struct tagCOMBOBOXINFO;
struct tagCTLINITBEDIT;
struct tagCTLINITHEDIT;
struct tagCTLINITIEDIT;
struct tagCUSTDATAITEM;
struct tagCWPRETSTRUCT;
struct tagCapInfoChunk;
struct tagCaptureParms;
struct tagDBCOLUMNDESC;
struct tagDBCOLUMNINFO;
struct tagDESIGNVECTOR;
struct tagDRAGLISTINFO;
struct tagDVD_TIMECODE;
struct tagEMRCREATEPEN;
struct tagEMRGLSRECORD;
struct tagEMRINVERTRGN;
struct tagEMRRESTOREDC;
struct tagEMRROUNDRECT;
struct tagEMRSETPIXELV;
struct tagENUMLOGFONTA;
struct tagENUMLOGFONTW;
struct tagFILTERREGION;
struct tagFINDREPLACEA;
struct tagFINDREPLACEW;
struct tagFULLPROPSPEC;
struct tagGCP_RESULTSA;
struct tagGCP_RESULTSW;
struct tagHELPWININFOA;
struct tagHELPWININFOW;
struct tagICEXYZTRIPLE;
struct tagICONMETRICSA;
struct tagICONMETRICSW;
struct tagMETAFILEPICT;
struct tagMIDIOUTCAPSA;
struct tagMIDIOUTCAPSW;
struct tagMIMECSETINFO;
struct tagMONERRSTRUCT;
struct tagMONMSGSTRUCT;
struct tagMQQUEUEPROPS;
struct tagNMLVFINDITEM;
struct tagNMRBAUTOSIZE;
struct tagODBC_VS_ARGS;
struct tagPALETTEENTRY;
struct tagPROPPAGEINFO;
struct tagQUERYCONTEXT;
struct tagRASENTRYDLGA;
struct tagRASENTRYDLGW;
struct tagRASSUBENTRYA;
struct tagRASSUBENTRYW;
struct tagRemFORMATETC;
struct tagRemSTGMEDIUM;
struct tagSOUNDSENTRYA;
struct tagSOUNDSENTRYW;
struct tagTITLEBARINFO;
struct tagWAVEOUTCAPSA;
struct tagWAVEOUTCAPSW;
struct tag_IDFINSTCAPS;
struct tag_IDFINSTINFO;
struct CCertGetConfig;
struct CLUSPROP_DWORD;
struct CLUSPROP_VALUE;
struct CMultiLanguage;
struct ClusProperties;
struct DataSourceVtbl;
struct DimensionsVtbl;
struct DispIHTMLTable;
struct ETHERNET_FRAME;
struct FolderItemVerb;
struct FolderItemVtbl;
struct HACMDRIVERID__;
struct HENHMETAFILE__;
struct HTMLAreaEvents;
struct HTMLDivElement;
struct HTMLInputImage;
struct HTMLMapElement;
struct HTMLStyleSheet;
struct IADsAggregatee;
struct IADsAggregator;
struct IADsCollection;
struct IADsDomainVtbl;
struct IADsNamespaces;
struct IADsPrintQueue;
struct IADsSyntaxVtbl;
struct IAMChannelInfo;
struct IAMDirectSound;
struct IAMMediaStream;
struct IAMTVAudioVtbl;
struct IAMTVTunerVtbl;
struct IASQLOLEAlerts;
struct IASQLOLEBackup;
struct IASQLOLEChecks;
struct IASQLOLEColumn;
struct IASQLOLEDevice;
struct IASQLOLEGroups;
struct IASQLOLELogins;
struct IASQLOLEServer;
struct IASQLOLETables;
struct IAVIEditStream;
struct IAVIStreamVtbl;
struct IActiveDesktop;
struct IAgentCommands;
struct IAudioDataVtbl;
struct IBPCDeviceBase;
struct ICDAORecordset;
struct ICSSFilterSite;
struct ICSSFilterVtbl;
struct ICatalogObject;
struct ICertAdminVtbl;
struct ICertGetConfig;
struct IClassFactory2;
struct IColumnsRowset;
struct IComponentUtil;
struct ICopyHookAVtbl;
struct ICopyHookWVtbl;
struct ICreateDevEnum;
struct ICreateTypeLib;
struct ICustomDocVtbl;
struct IDirect3D2Vtbl;
struct IDirect3DLight;
struct IDirectInput2A;
struct IDirectInput2W;
struct IDispErrorVtbl;
struct IDocHostShowUI;
struct IDockingWindow;
struct IDtcLuRecovery;
struct IDtcToXaHelper;
struct IDtcToXaMapper;
struct IEnumClassVtbl;
struct IEnumFORMATETC;
struct IEnumMediaType;
struct IEnumNamesVtbl;
struct IEnumSSRCsVtbl;
struct IEnumWorkItems;
struct IErrorInfoVtbl;
struct IFillLockBytes;
struct IFilterMapper2;
struct IGetDataSource;
struct IHTMLBRElement;
struct IHTMLDDElement;
struct IHTMLDTElement;
struct IHTMLDocument2;
struct IHTMLFrameBase;
struct IHTMLHRElement;
struct IHTMLLIElement;
struct IHTMLRuleStyle;
struct IHTMLStyleVtbl;
struct IHTMLTableCell;
struct IHTMLTableVtbl;
struct IHlinkSiteVtbl;
struct IHttpNegotiate;
struct IInstallCodecs;
struct IKsPropertySet;
struct ILayoutStorage;
struct ILockBytesVtbl;
struct IMAPIContainer;
struct IMAPITableVtbl;
struct IMDDatasetVtbl;
struct IMDRangeRowset;
struct IMLangFontLink;
struct IMallocSpyVtbl;
struct IMediaPosition;
struct IMediaTypeInfo;
struct IMessageFilter;
struct IMprUIHostVtbl;
struct IMtsEventsVtbl;
struct IMultiLanguage;
struct INotifyReplica;
struct IObjectContext;
struct IObjectControl;
struct IOleCache2Vtbl;
struct IOleClientSite;
struct IOleObjectVtbl;
struct IOleUIObjInfoA;
struct IOleUIObjInfoW;
struct IOleWindowVtbl;
struct IOmHistoryVtbl;
struct IOverlayNotify;
struct IPersistFolder;
struct IPersistMemory;
struct IPersistStream;
struct IProfAdminVtbl;
struct IPropertyPage2;
struct IProviderAdmin;
struct IQueryInfoVtbl;
struct IQuickActivate;
struct IRTPStreamVtbl;
struct IRegFilterInfo;
struct IRemoteProcess;
struct IRowsetRefresh;
struct IRowsetResynch;
struct IRpcStubBuffer;
struct ISessionObject;
struct IShellDispatch;
struct IShellIconVtbl;
struct IShellLinkDual;
struct IShellUIHelper;
struct IShellViewVtbl;
struct ISourcesRowset;
struct IStreamBuilder;
struct ISurrogateVtbl;
struct ITCallInfoVtbl;
struct ITFileTerminal;
struct ITMediaSupport;
struct ITNotification;
struct ITTerminalVtbl;
struct ITableDataVtbl;
struct ITaskScheduler;
struct ITrackFileVtbl;
struct ITypeInfo2Vtbl;
struct IURLSearchHook;
struct IUrlHistoryStg;
struct IWebBrowserApp;
struct IXATransLookup;
struct IXATransaction;
struct MSDAINITIALIZE;
struct ParametersVtbl;
struct PropertiesVtbl;
struct RAS_PARAMETERS;
struct SharedProperty;
struct TimeCollection;
struct _ACCESS_INFO_0;
struct _ACCESS_INFO_1;
struct _ACTION_HEADER;
struct _ADOCollection;
struct _ADOConnection;
struct _AD_GUARANTEED;
struct _AE_SESSLOGOFF;
struct _BLENDFUNCTION;
struct _BYTE_SIZEDARR;
struct _CERT_RDN_ATTR;
struct _CONFFILEINFOA;
struct _CONFFILEINFOW;
struct _CONFIG_INFO_0;
struct _CONFUSERINFOA;
struct _CONFUSERINFOW;
struct _COSERVERINFO2;
struct _Command15Vtbl;
struct _D3DCLIPSTATUS;
struct _D3DCOLORVALUE;
struct _D3DDeviceDesc;
struct _D3DMATRIXLOAD;
struct _D3DPICKRECORD;
struct _D3DRMPICKDESC;
struct _D3DRMVECTOR4D;
struct _DDPIXELFORMAT;
struct _DDSURFACEDESC;
struct _DISK_GEOMETRY;
struct _DMsepg4Events;
struct _DOCHOSTUIINFO;
struct _DSCBUFFERDESC;
struct _DTBLMVLISTBOX;
struct _EDKEventCount;
struct _GDI_NONREMOTE;
struct _GRADIENT_RECT;
struct _HANDLE_INFO_1;
struct _IMAGEHLP_LINE;
struct _IPX_INTERFACE;
union _IPX_MIB_INDEX;
union _LARGE_INTEGER;
struct _LONG_SIZEDARR;
struct _MODEMSETTINGS;
struct _NETINFOSTRUCT;
struct _NETRESOURCE2A;
struct _NETRESOURCE2W;
struct _OBJDESCRIPTOR;
struct _OLESTREAMVTBL;
struct _PPP_EAP_INPUT;
struct _PRIVILEGE_SET;
struct _PROV_ENUMALGS;
struct _ParameterVtbl;
struct _RECIPIENTINFO;
struct _RGNDATAHEADER;
struct _RIP_IF_CONFIG;
struct _RIP_INTERFACE;
struct _RTM_IPX_ROUTE;
struct _RTP_SDES_ITEM;
struct _RTR_TOC_ENTRY;
struct _RecordsetVtbl;
struct _SAP_IF_CONFIG;
struct _SAP_INTERFACE;
struct _SAppTimeArray;
struct _SERVICE_INFOA;
struct _SERVICE_INFOW;
struct _SHQUERYRBINFO;
struct _SPropTagArray;
struct _SSortOrderSet;
struct _STAT_SERVER_0;
struct _SWStringArray;
struct _SecBufferDesc;
struct _TOKEN_CONTROL;
struct _WINTRUST_DATA;
struct _WSAOVERLAPPED;
struct _WSPPROC_TABLE;
struct _ads_attr_info;
struct _avimainheader;
struct _avisuperindex;
struct _avitimedindex;
struct _encorrecttext;
struct _enoleopfailed;
struct _finddatai64_t;
struct _tagIOSPACE_EX;
struct _tagOLECMDTEXT;
struct _tagSTACKFRAME;
struct _userHMETAFILE;
struct _userSTGMEDIUM;
struct _wireSAFEARRAY;
struct adaptercounter;
struct fqpcid_overlay;
struct get_attributes;
struct link_info_sect;
struct lu62_info_sect;
struct lu_0_3_overlay;
struct lu_def_overlay;
struct luw_id_overlay;
struct sess_info_sect;
struct srv_comportbuf;
struct srv_subchannel;
struct tagANIMATEINFO;
struct tagBOXEDITINFO;
struct tagCHARSETINFO;
struct tagCHOOSEFONTA;
struct tagCHOOSEFONTW;
struct tagCLASSDETAIL;
struct tagCOLORSCHEME;
struct tagCONNECTDATA;
struct tagCONTROLINFO;
struct tagCONVCONTEXT;
struct tagCURSORSHAPE;
struct tagDATE_STRUCT;
struct tagDBGROUPINFO;
struct tagDBPARAMETER;
struct tagDBPARAMINFO;
struct tagDBPROPIDSET;
struct tagDBTIMESTAMP;
struct tagEDB_RSTMAPA;
struct tagEDB_RSTMAPW;
struct tagEMRANGLEARC;
struct tagEMRFILLPATH;
struct tagEMRFRAMERGN;
struct tagEMRPOLYDRAW;
struct tagEMRPOLYLINE;
struct tagEXTLOGFONTA;
struct tagEXTLOGFONTW;
struct tagHANDLETABLE;
struct tagHEAPENTRY32;
struct tagKERNINGPAIR;
struct tagLVDISPINFOW;
struct tagLVFINDINFOA;
struct tagLVFINDINFOW;
struct tagMDINEXTMENU;
struct tagMENUBARINFO;
struct tagMIDIINCAPSA;
struct tagMIDIINCAPSW;
struct tagMONCBSTRUCT;
struct tagMONITORINFO;
struct tagMQCOLUMNSET;
struct tagNEWCPLINFOA;
struct tagNEWCPLINFOW;
struct tagNMIPADDRESS;
struct tagNMSELCHANGE;
struct tagNMTBHOTITEM;
struct tagNMTREEVIEWA;
struct tagNMTREEVIEWW;
struct tagOCPFIPARAMS;
struct tagPACKAGEINFO;
struct tagPAINTSTRUCT;
struct tagPARAMDESCEX;
struct tagPROPVARIANT;
struct tagQACONTAINER;
struct tagRASADPARAMS;
struct tagRASDEVINFOA;
struct tagRASDEVINFOW;
struct tagRFC1766INFO;
struct tagRemHPALETTE;
struct tagSERIALKEYSA;
struct tagSERIALKEYSW;
struct tagSTATPROPSTG;
struct tagSTYLESTRUCT;
struct tagTBADDBITMAP;
struct tagTEXTMETRICA;
struct tagTEXTMETRICW;
struct tagTIME_STRUCT;
struct tagTTPOLYCURVE;
struct tagTUNING_INFO;
struct tagTVDISPINFOA;
struct tagTVDISPINFOW;
struct tagWAVEINCAPSA;
struct tagWAVEINCAPSW;
struct tagWNDCLASSEXA;
struct tagWNDCLASSEXW;
struct tagWPPROVINFOA;
struct tagWPPROVINFOW;
struct tagWPSITEINFOA;
struct tagWPSITEINFOW;
struct wavefilter_tag;
struct waveformat_tag;
struct ADOConnection;
struct ADOParameters;
struct ADOProperties;
struct CLUSPROP_LIST;
struct CatalogObject;
struct ClusNodesVtbl;
struct ClusRefObject;
struct ClusResGroups;
struct ClusResOwners;
struct ClusResources;
struct ComponentUtil;
struct DBPCVidEvents;
struct DICUSTOMFORCE;
struct DIDEVCAPS_DX3;
struct DIEFFECTINFOA;
struct DIEFFECTINFOW;
struct DelayLoadInfo;
struct DelayLoadProc;
struct DimensionVtbl;
struct GLUtesselator;
struct HCOLORSPACE__;
struct HTMLBRElement;
struct HTMLDDElement;
struct HTMLDTElement;
struct HTMLFrameBase;
struct HTMLHRElement;
struct HTMLImgEvents;
struct HTMLLIElement;
struct HTMLMapEvents;
struct HTMLNavigator;
struct HTMLRuleStyle;
struct HTMLTableCell;
struct HierarchyVtbl;
struct IADsClassVtbl;
struct IADsContainer;
struct IADsFileShare;
struct IADsGroupVtbl;
struct IADsValueVtbl;
struct IAMCollection;
struct IASQLOLEAlert;
struct IASQLOLECheck;
struct IASQLOLEGroup;
struct IASQLOLEIndex;
struct IASQLOLELogin;
struct IASQLOLENames;
struct IASQLOLERules;
struct IASQLOLETable;
struct IASQLOLETasks;
struct IASQLOLEUsers;
struct IASQLOLEViews;
struct IAVIStreaming;
struct IAccessorVtbl;
struct IActiveScript;
struct IAddrBookVtbl;
struct IAdviseSinkEx;
struct IAgentBalloon;
struct IAgentCommand;
struct IAgentCtlVtbl;
struct IAsyncManager;
struct IAuthenticate;
struct IBindHostVtbl;
struct IBindProtocol;
struct IBitmapEffect;
struct ICertExitVtbl;
struct IClassFactory;
struct IClassRefresh;
struct IConfigAviMux;
struct IContextMenu2;
struct IContextMenu3;
struct IContinueVtbl;
struct IDBInitialize;
struct IDBProperties;
struct IDSObjectVtbl;
struct IDSSearchVtbl;
struct IDeskBandVtbl;
struct IDirect3DVtbl;
struct IDirectInputA;
struct IDirectInputW;
struct IDispatchVtbl;
struct IDistListVtbl;
struct IEPGComponent;
struct IEnumCallVtbl;
struct IEnumChannels;
struct IEnumCodePage;
struct IEnumGUIDVtbl;
struct IEnumLINEINFO;
struct IEnumPinsVtbl;
struct IEnumSTATDATA;
struct IEnumTerminal;
struct IErrorLogVtbl;
struct IErrorRecords;
struct IEventMoniker;
struct IExtractIconA;
struct IExtractIconW;
struct IFilterGraph2;
struct IFilterMapper;
struct IFolderViewOC;
struct IFontDispVtbl;
struct IGetDispenser;
struct IGetFrameVtbl;
struct IGraphBuilder;
struct IGraphVersion;
struct IH26XSnapshot;
struct IHTMLDocument;
struct IHTMLEventObj;
struct IHTMLLocation;
struct IHTMLSpanFlow;
struct IHTMLTableCol;
struct IHTMLTableRow;
struct IHTMLTxtRange;
struct IHttpSecurity;
struct IInternetVtbl;
struct IJavaExecute2;
struct IMAPIFormInfo;
struct IMAPIFormVtbl;
struct IMAPIProgress;
struct IMAPIPropVtbl;
struct IMSAdminBaseW;
struct IMailUserVtbl;
struct IMediaControl;
struct IMediaEventEx;
struct IMediaSample2;
struct IMediaSeeking;
struct IMemAllocator;
struct IMimeInfoVtbl;
struct IMsgStoreVtbl;
struct IMtsEventInfo;
struct IMtsUserEvent;
struct IObjectSafety;
struct IObtainRating;
struct IOleCacheVtbl;
struct IOleContainer;
struct IParentRowset;
struct IProfSectVtbl;
struct IPropDataVtbl;
struct IPropertyBag2;
struct IPropertyPage;
struct IQualPropVtbl;
struct IQueueCommand;
struct IRMHelperVtbl;
struct IRTPRPHFilter;
struct IRTPSPHFilter;
struct IReadDataVtbl;
struct IRemoteObject;
struct IRemoteThread;
struct IResponseVtbl;
struct IRowsetAsynch;
struct IRowsetChange;
struct IRowsetLocate;
struct IRowsetNotify;
struct IRowsetScroll;
struct IRowsetUpdate;
struct ISQLErrorInfo;
struct ISecurityInfo;
struct IShellBrowser;
struct IShellExtInit;
struct IShellWindows;
struct IStreamSample;
struct ITAddressVtbl;
struct ITChannelVtbl;
struct ITConsultCall;
struct ITrackStorage;
struct ITrusteeAdmin;
struct ITypeCompVtbl;
struct ITypeInfoVtbl;
struct ITypeLib2Vtbl;
struct IViewObjectEx;
struct IViewSortVtbl;
struct IWaitMultiple;
struct IXAConfigVtbl;
struct IXMLErrorVtbl;
struct ImgDelayDescr;
struct LUA_EXT_ENTRY;
struct MD_Collection;
struct PACKET_BUFFER;
struct PositionsVtbl;
struct ShellUIHelper;
struct Tag_DVAudInfo;
struct WebBrowser_V1;
struct XACTTRANSINFO;
struct _ACTRL_ALISTA;
struct _ACTRL_ALISTW;
struct _ADOParameter;
struct _ADORecordset;
struct _AE_CLOSEFILE;
struct _AE_CONNSTART;
struct _AE_NETLOGOFF;
struct _AE_RESACCESS;
struct _AE_SESSLOGON;
struct _AE_SESSPWERR;
struct _AE_SRVSTATUS;
struct _AMVPDATAINFO;
struct _AUX_EVENTREC;
struct _AVIFILEINFOA;
struct _AVIFILEINFOW;
struct _AdviseNotify;
struct _CERT_CONTEXT;
struct _COMMTIMEOUTS;
struct _CONV_OPTIONS;
struct _COSERVERINFO;
struct _Connection15;
struct _D3DLIGHTDATA;
struct _D3DVIEWPORT2;
struct _DADV_CONTROL;
struct _DDKERNELCAPS;
struct _DFS_INFO_100;
struct _DFS_INFO_101;
struct _DIDATAFORMAT;
struct _DIMOUSESTATE;
struct _DISK_LOGGING;
struct _DPreviewVtbl;
struct _DRIVERSTATUS;
struct _DS3DLISTENER;
struct _DSBUFFERDESC;
struct _DTBLCHECKBOX;
struct _DTBLCOMBOBOX;
struct _DTBLGROUPBOX;
struct _FORM_INFO_1A;
struct _FORM_INFO_1W;
struct _GLYPHMETRICS;
struct _GROUP_INFO_0;
struct _GROUP_INFO_1;
struct _GROUP_INFO_2;
struct _IMAGE_SYMBOL;
struct _INPUT_RECORD;
union _IN_ADDR_IPV4;
struct _IN_ADDR_IPV6;
struct _IPX_IF_STATS;
struct _LOADED_IMAGE;
struct _MEMORYSTATUS;
struct _MODEMDEVCAPS;
struct _NETRESOURCEA;
struct _NETRESOURCEW;
struct _NOTIFICATION;
struct _PARAM_BUFFER;
struct _PORT_INFO_1A;
struct _PORT_INFO_1W;
struct _PORT_INFO_2A;
struct _PORT_INFO_2W;
struct _PORT_INFO_3A;
struct _PORT_INFO_3W;
struct _PPP_EAP_INFO;
struct _PSINJECTDATA;
struct _PctPublicKey;
struct _QOS_PRIORITY;
struct _QUOTA_LIMITS;
struct _QWordAddress;
struct _RAS_SERVER_0;
struct _RIP_IF_STATS;
struct _RTM_IP_ROUTE;
struct _RTP_HEADER_X;
struct _SAP_IF_STATS;
struct _SAP_MIB_BASE;
struct _SBinaryArray;
struct _SCHANNEL_ALG;
struct _SDoubleArray;
struct _SEGMENT_NOTE;
struct _SHARE_INFO_0;
struct _SHARE_INFO_1;
struct _SHARE_INFO_2;
struct _SPropProblem;
struct _SRestriction;
struct _STARTUPINFOA;
struct _STARTUPINFOW;
struct _STnefProblem;
struct _TAPE_PREPARE;
struct _TASK_TRIGGER;
struct _TEMP_BP_NOTE;
struct _TOKEN_GROUPS;
struct _TOKEN_SOURCE;
struct _USER_INFO_10;
struct _USER_INFO_11;
struct _USER_INFO_20;
struct _USER_INFO_21;
struct _USER_INFO_22;
struct _WSAQuerySetA;
struct _WSAQuerySetW;
struct __JUMP_BUFFER;
struct _ads_attr_def;
struct _aviextheader;
struct _avimetaindex;
struct _avitcdlindex;
struct _charformat2a;
struct _charformat2w;
struct _currencyfmtA;
struct _currencyfmtW;
struct _tagCOMPONENT;
struct _timecodedata;
struct _tp_start_hdr;
struct _userHPALETTE;
struct accessdata_dn;
struct adpcmcoef_tag;
struct joyinfoex_tag;
struct mc_deallocate;
struct mc_send_error;
struct midievent_tag;
struct ms_fp_overlay;
struct ods_callbacks;
struct perf_server_0;
struct phonecaps_tag;
struct plu62_overlay;
struct provider_info;
struct srv_listentry;
struct srv_queuehead;
struct tWAVEFORMATEX;
struct tagALTTABINFO;
struct tagAspectInfo;
struct tagBIND_OPTS2;
struct tagBITMAPINFO;
struct tagBOXRESULTS;
struct tagCABSTRBLOB;
struct tagCACLIPDATA;
struct tagCAFILETIME;
struct tagCALBSTRUCT;
struct tagCALPOLESTR;
struct tagCSPLATFORM;
struct tagCURSORINFO;
struct tagDBFILETIME;
struct tagDBPROPINFO;
struct tagDBSORTINFO;
struct tagDB_NUMERIC;
struct tagDIBSECTION;
struct tagDISPPARAMS;
struct tagDROPSTRUCT;
struct tagEMRELLIPSE;
struct tagEMRFILLRGN;
struct tagEMRMASKBLT;
struct tagEXT_BUTTON;
struct tagExtentInfo;
struct tagFILTERKEYS;
struct tagHEAPLIST32;
struct tagINKINGINFO;
struct tagKAGGETDIAG;
struct tagKAGREQDIAG;
struct tagKEYBDINPUT;
struct tagLOGPALETTE;
struct tagLVBKIMAGEA;
struct tagLVBKIMAGEW;
struct tagLVDISPINFO;
struct tagMDAXISINFO;
struct tagMETAHEADER;
struct tagMETARECORD;
struct tagMETHODDATA;
struct tagMIMECPINFO;
struct tagMINMAXINFO;
struct tagMIXERCAPSA;
struct tagMIXERCAPSW;
struct tagMIXERLINEA;
struct tagMIXERLINEW;
struct tagMOUSEINPUT;
struct tagMQMSGPROPS;
struct tagNMDAYSTATE;
struct tagNMLISTVIEW;
struct tagNMTOOLBARA;
struct tagNMTOOLBARW;
struct tagOEMPENINFO;
struct tagOLEUIBUSYA;
struct tagOLEUIBUSYW;
struct tagRASDIALDLG;
struct tagRASNOUSERA;
struct tagRASNOUSERW;
struct tagRASPPPIPXA;
struct tagRASPPPNBFA;
struct tagRASPPPNBFW;
struct tagRemHBITMAP;
struct tagRemHGLOBAL;
struct tagSCROLLINFO;
struct tagSTAT_CHUNK;
struct tagSTICKYKEYS;
struct tagSTROKEINFO;
struct tagTOGGLEKEYS;
struct tagWINDOWINFO;
struct tag_IDFHEADER;
struct tag_IDFKEYMAP;
struct varstring_tag;
struct ADOParameter;
struct ADORecordset;
struct CCertRequest;
struct CMLangString;
struct CPPEH_RECORD;
struct ClusNetworks;
struct ClusNodeVtbl;
struct ClusProperty;
struct ClusResGroup;
struct ClusResTypes;
struct ClusResource;
struct ClusterNames;
struct CoMTSLocater;
struct CubeDefsVtbl;
struct DIPROPHEADER;
struct EventMoniker;
struct Fields15Vtbl;
struct HACMDRIVER__;
struct HACMSTREAM__;
struct HTAPIPHONE__;
struct HTMLDocument;
struct HTMLLocation;
struct HTMLSpanFlow;
struct HTMLTableCol;
struct HTMLTableRow;
struct IABContainer;
struct IABLogonVtbl;
struct IADsAttrInfo;
struct IADsComputer;
struct IADsLocality;
struct IADsPathname;
struct IADsPrintJob;
struct IADsProperty;
struct IADsResource;
struct IADsUserVtbl;
struct IAMExtDevice;
struct IAMTunerVtbl;
struct IAMovieSetup;
struct IASQLOLEKeys;
struct IASQLOLERule;
struct IASQLOLETask;
struct IASQLOLEUser;
struct IASQLOLEView;
struct IAVIFileVtbl;
struct IAdviseSink2;
struct IAsyncReader;
struct IBPCPurchase;
struct IBindCtxVtbl;
struct IBindingVtbl;
struct ICatRegister;
struct ICatalogVtbl;
struct ICellsetVtbl;
struct ICertRequest;
struct IChannelHook;
struct IClassAccess;
struct IClusterVtbl;
struct ICodeInstall;
struct IColumnsInfo;
struct ICommandCost;
struct ICommandText;
struct ICommandTree;
struct ICommandVtbl;
struct IContextMenu;
struct IConvertType;
struct IDataConvert;
struct IDirect3DRM2;
struct IDirectDraw2;
struct IDirectDraw3;
struct IDirectPlay2;
struct IDirectPlay3;
struct IDirectSound;
struct IDvdInfoVtbl;
struct IEnumAddress;
struct IEnumChannel;
struct IEnumFilters;
struct IEnumMoniker;
struct IEnumOLEVERB;
struct IEnumPackage;
struct IEnumRfc1766;
struct IEnumSTATSTG;
struct IEnumSTATURL;
struct IEnumUnknown;
struct IEnumVARIANT;
struct IErrorLookup;
struct IExchExtVtbl;
struct IFileAsyncIO;
struct IFileViewerA;
struct IFileViewerW;
struct IFilterGraph;
struct IHTMLBGsound;
struct IHTMLElement;
struct IHTMLWindow2;
struct IHlinkTarget;
struct IInputObject;
struct IJavaExecute;
struct IMAPIControl;
struct IMAPIFormMgr;
struct IMAPISession;
struct IMAPISupport;
struct IMLangString;
struct IMSLogonVtbl;
struct IMarshalVtbl;
struct IMediaFilter;
struct IMediaSample;
struct IMediaStream;
struct IMemInputPin;
struct IMessageVtbl;
struct IMonikerVtbl;
struct IMprUIPlugin;
struct IMultiQIVtbl;
struct IOleDocument;
struct IOleLinkVtbl;
struct IOleUndoUnit;
struct IOmNavigator;
struct IOverlayVtbl;
struct IPackageUtil;
struct IPersistFile;
struct IPersistVtbl;
struct IPictureDisp;
struct IPictureVtbl;
struct IPinInfoVtbl;
struct IPrepareInfo;
struct IPropertyBag;
struct IROTDataVtbl;
struct IRemoteField;
struct IRequestVtbl;
struct IRichEditOle;
struct IRootStorage;
struct IRowPosition;
struct IRowsetIndex;
struct IServiceVtbl;
struct IShellFolder;
struct ISoftDistExt;
struct ISpoolerHook;
struct IStorageVtbl;
struct ISynchronize;
struct ITAMTerminal;
struct ITCollection;
struct ITConference;
struct ITConnection;
struct ITableRename;
struct ITaskTrigger;
struct ITransaction;
struct ITypeFactory;
struct ITypeLibVtbl;
struct ITypeMarshal;
struct IUnknownVtbl;
struct IVideoWindow;
struct IViewChapter;
struct IViewObject2;
struct IWebBrowser2;
struct IWinInetInfo;
struct IWriteCookie;
struct IXMLDocument;
struct IXPLogonVtbl;
union LUA_SPECIFIC;
struct PositionVtbl;
struct PropertyVtbl;
struct ShellWindows;
struct _ACCESS_LIST;
struct _AE_CONNSTOP;
struct _AE_NETLOGON;
struct _AFPROTOCOLS;
struct _AMMediaType;
struct _AMVPDIMINFO;
struct _AUDIT_ENTRY;
struct _AgentEvents;
struct _BIN_RESULTS;
struct _CONFRECDIRA;
struct _CONFRECDIRW;
struct _CONVDLLVECT;
struct _CRL_CONTEXT;
struct _CSADDR_INFO;
struct _CTL_CONTEXT;
struct _CommandVtbl;
struct _CrtMemState;
struct _D3DMATERIAL;
struct _D3DPrimCaps;
struct _D3DRMVERTEX;
struct _D3DTLVERTEX;
struct _D3DTRIANGLE;
struct _D3DVIEWPORT;
struct _DDOVERLAYFX;
struct _DEBUG_EVENT;
struct _DISK_RECORD;
struct _DMsepg4Vtbl;
struct _DOC_INFO_1A;
struct _DOC_INFO_1W;
struct _DOC_INFO_2A;
struct _DOC_INFO_2W;
struct _DRAWPATRECT;
struct _DTBLMVDDLBX;
struct _FILEPATHS_A;
struct _FILEPATHS_W;
struct _FILE_INFO_2;
struct _FILE_INFO_3;
struct _FILTER_INFO;
struct _FOLDER_INFO;
struct _HSE_TF_INFO;
struct _IPXMIB_BASE;
struct _IPX_IF_INFO;
union _IPX_MIB_ROW;
struct _IPX_NETWORK;
struct _IPX_SERVICE;
struct _JOB_INFO_1A;
struct _JOB_INFO_1W;
struct _JOB_INFO_2A;
struct _JOB_INFO_2W;
struct _KSEVENTDATA;
struct _MONTHLYDATE;
struct _NAME_BUFFER;
struct _NSP_ROUTINE;
struct _OFNOTIFYEXA;
struct _OFNOTIFYEXW;
struct _QOS_SD_MODE;
struct _REPL_INFO_0;
struct _RIPMIB_BASE;
struct _RIP_IF_INFO;
struct _RPCBINDINFO;
struct _RPC_MESSAGE;
struct _RPC_VERSION;
struct _RSVP_ADSPEC;
struct _RSVP_POLICY;
struct _RTFSYNCINFO;
struct _Recordset15;
struct _SAP_IF_INFO;
struct _SCALAR_INFO;
struct _SHFILEINFOA;
struct _SHFILEINFOW;
struct _SLPSTRArray;
struct _SShortArray;
struct _SYSTEM_INFO;
struct _SecPkgInfoA;
struct _SecPkgInfoW;
struct _TOKEN_OWNER;
struct _USER_INFO_0;
struct _USER_INFO_1;
struct _USER_INFO_2;
struct _USER_INFO_3;
struct _UUID_VECTOR;
struct _VDM_SEGINFO;
struct _WLX_DESKTOP;
struct _WSATHREADID;
struct _ads_sortkey;
struct _avioldindex;
struct _avistdindex;
struct _bidioptions;
struct _browseinfoA;
struct _browseinfoW;
struct _charformatw;
struct _devicemodeA;
struct _devicemodeW;
struct _dir_entryid;
struct _endropfiles;
struct _enprotected;
struct _findtextexa;
struct _findtextexw;
struct _formatrange;
struct _paraformat2;
struct _punctuation;
struct _tagBINDINFO;
struct _tagDATAINFO;
struct _tagDATETIME;
struct _tagHLBWINFO;
struct _tagHLTBINFO;
struct _tagPHYSICAL;
struct _userHBITMAP;
struct _userHGLOBAL;
struct _usr_entryid;
struct _wfinddata_t;
struct _wireBRECORD;
struct _wireVARIANT;
struct am_info_sect;
struct conv_overlay;
struct define_trace;
struct gw_info_sect;
struct ldapcontrolA;
struct ldapcontrolW;
struct ldapsortkeyA;
struct ldapsortkeyW;
struct link_overlay;
struct lu62_overlay;
struct mc_confirmed;
struct mc_send_data;
struct mode_overlay;
struct ms_info_sect;
struct sess_overlay;
struct sockaddr_atm;
union sockaddr_gen;
struct sockaddr_in6;
struct sockaddr_ipx;
struct sockaddr_vns;
struct srv_inputbuf;
struct srv_listhead;
struct srv_loginrec;
struct tagABORTPATH;
struct tagAPPDETAIL;
struct tagARRAYDESC;
struct tagAXESLISTA;
struct tagAXESLISTW;
struct tagAXISINFOA;
struct tagAXISINFOW;
struct tagBIND_OPTS;
struct tagBOXLAYOUT;
struct tagCWPSTRUCT;
struct tagCapStatus;
struct tagDBBINDEXT;
struct tagDBBINDING;
struct tagDBCONTENT;
struct tagDBPROPSET;
struct tagDBSETFUNC;
struct tagEMRBITBLT;
struct tagEMRFORMAT;
struct tagEMRLINETO;
struct tagEMRPLGBLT;
struct tagENUMTYPEA;
struct tagENUMTYPEW;
struct tagERRORINFO;
struct tagEXCEPINFO;
struct tagEXTLOGPEN;
struct tagFORMATETC;
struct tagIMECOLORS;
struct tagIMESTRUCT;
struct tagINPPARAMS;
struct tagLVCOLUMNA;
struct tagLVCOLUMNW;
struct tagLVKEYDOWN;
struct tagMOUSEKEYS;
struct tagMQQMPROPS;
struct tagMQSORTKEY;
struct tagMQSORTSET;
struct tagNMHEADERA;
struct tagNMHEADERW;
struct tagPAGERANGE;
struct tagPARAMDATA;
struct tagPARAMDESC;
struct tagPENPACKET;
struct tagPOLYTEXTA;
struct tagPOLYTEXTW;
struct tagQACONTROL;
struct tagRASENTRYA;
struct tagRASENTRYW;
struct tagRASPBDLGA;
struct tagRASPBDLGW;
struct tagRASPPPIPA;
struct tagRASPPPIPW;
struct tagRASPPPLCP;
struct tagREBARINFO;
struct tagRGBTRIPLE;
struct tagSAFEARRAY;
struct tagSTGMEDIUM;
struct tagSTYLEBUFA;
struct tagSTYLEBUFW;
struct tagTCKEYDOWN;
struct tagTOOLINFOA;
struct tagTOOLINFOW;
struct tagTPMPARAMS;
struct tagTVITEMEXA;
struct tagTVITEMEXW;
struct tagTVKEYDOWN;
struct tagVIDEOINFO;
struct tagWAPPCDATA;
struct tagWCPICDATA;
struct tagWINDOWPOS;
struct tagWNDCLASSA;
struct tagWNDCLASSW;
struct timecaps_tag;
struct tp_info_sect;
struct videohdr_tag;
struct ADOProperty;
struct API_VERSION;
struct AgentServer;
struct Application;
struct CCertConfig;
struct CCertPolicy;
struct CLUSPROP_SZ;
struct COpsProfile;
struct ClusNetwork;
struct ClusObjVtbl;
struct ClusResType;
struct CoMTSEvents;
struct CubeDefVtbl;
struct DICONDITION;
struct DIEFFESCAPE;
struct DIJOYSTATE2;
struct DIPROPDWORD;
struct DIPROPRANGE;
struct DIRAMPFORCE;
struct DomainNames;
struct Field15Vtbl;
struct FolderItems;
struct HCONVLIST__;
struct HDRVPHONE__;
struct HINSTANCE__;
struct HMETAFILE__;
struct HMIDISTRM__;
struct HMIXEROBJ__;
struct HPHONEAPP__;
struct HPROVIDER__;
struct HRCRESULT__;
struct HTAPICALL__;
struct HTAPILINE__;
struct HTERMINAL__;
struct HTMLBGsound;
struct HTMLHistory;
struct HTMLWindow2;
struct Hierarchies;
struct IABProvider;
struct IADsMembers;
struct IADsService;
struct IADsSession;
struct IAMCrossbar;
struct IAMPlayList;
struct IAMovieVtbl;
struct IASQLOLEKey;
struct IAccessible;
struct IAdviseSink;
struct IAlterIndex;
struct IAlterTable;
struct IAsyncSetup;
struct IAttachVtbl;
struct IBPCDevices;
struct IBPCMessage;
struct IBPCSuspend;
struct IBPCVidVtbl;
struct IBaseFilter;
struct IBasicAudio;
struct IBasicVideo;
struct ICertConfig;
struct ICertPolicy;
struct IChannelMgr;
struct IClassAdmin;
struct IComBinding;
struct IDBInfoVtbl;
struct IDCInfoVtbl;
struct IDSAttrMgmt;
struct IDataFilter;
struct IDataObject;
struct IDirect3DRM;
struct IDirectDraw;
struct IDirectPlay;
struct IDispatchEx;
struct IDropSource;
struct IDropTarget;
struct IDvdControl;
struct IEnumHLITEM;
struct IEnumIDList;
struct IEnumString;
struct IFilterInfo;
struct IFilterVtbl;
struct IHTMLDialog;
struct IHTMLScreen;
struct IHlinkFrame;
struct IHolderVtbl;
struct IImgCtxVtbl;
struct IMAPIFolder;
struct IMAPIStatus;
struct IMDFindVtbl;
struct IMSProvider;
struct IMTSLocater;
struct IMallocVtbl;
struct IMediaEvent;
struct IMemoryData;
struct IMtsGrpVtbl;
struct IOleControl;
struct IOpenRowset;
struct IReadCookie;
struct IRecordInfo;
struct IRowsetFind;
struct IRowsetInfo;
struct IRowsetKeys;
struct IRowsetView;
struct IRowsetVtbl;
struct IRpcOptions;
struct IServerVtbl;
struct IShellLinkA;
struct IShellLinkW;
struct IShellView2;
struct IStreamVtbl;
struct IStringList;
struct ITCallTones;
struct ITMediaVtbl;
struct IUrlMonVtbl;
struct IViewFilter;
struct IViewObject;
struct IViewRowset;
struct IWebBrowser;
struct IXMLElement;
struct IXPProvider;
struct MembersVtbl;
struct PackageUtil;
struct RASCTRYINFO;
struct XMLDocument;
struct _ACE_HEADER;
struct _ADDR_ALIAS;
struct _ADOCommand;
struct _AE_CONNREJ;
struct _AE_GENERIC;
struct _AE_LOCKOUT;
struct _AM_DVD_YUV;
struct _AppBarData;
struct _AsyncIOReq;
struct _CERT_CHAIN;
struct _COAUTHINFO;
struct _COMMCONFIG;
struct _CONFNOTIFY;
struct _Connection;
struct _CounterDef;
struct _D3DHVERTEX;
struct _D3DLVERTEX;
struct _D3DRMIMAGE;
struct _DBanEvents;
struct _DDBLTBATCH;
struct _DDCAPS_DX3;
struct _DDCOLORKEY;
struct _DEPGEvents;
struct _DFS_INFO_1;
struct _DFS_INFO_2;
struct _DFS_INFO_3;
struct _DPOPEvents;
struct _DPSPEvents;
struct _DS3DBUFFER;
struct _DTBLBUTTON;
struct _DVD_REGION;
struct _DWORD_BLOB;
struct _FilterInfo;
struct _GDI_OBJECT;
struct _IMAGE_NOTE;
struct _INFCONTEXT;
struct _IP_NETWORK;
struct _ITEMIDLIST;
struct _JOB_INFO_3;
struct _LIST_ENTRY;
union _LLC_BUFFER;
struct _LSA_STRING;
struct _MAPINAMEID;
struct _MONTHLYDOW;
struct _MSG_INFO_0;
struct _MSG_INFO_1;
struct _OPTIONDATA;
struct _OVERLAPPED;
struct _POINTFLOAT;
struct _RAS_PORT_0;
struct _RAS_PORT_1;
struct _RAS_USER_0;
struct _RPC_POLICY;
struct _RTP_HEADER;
struct _SEC_OBJECT;
struct _SGuidArray;
struct _SLongArray;
struct _SMALL_RECT;
struct _SPropValue;
struct _SRealArray;
struct _SSortOrder;
struct _SYSTEMTIME;
struct _TAPE_ERASE;
struct _TOKEN_USER;
struct _USE_INFO_0;
struct _USE_INFO_1;
struct _USE_INFO_2;
struct _USE_INFO_3;
struct _WSAVersion;
struct _charformat;
struct _diskfree_t;
struct _editstream;
struct _finddata_t;
struct _numberfmtA;
struct _numberfmtW;
struct _paraformat;
struct _tagADDRESS;
struct _tagCOMPPOS;
struct _tagIMEPROA;
struct _tagIMEPROW;
struct _tagIOSPACE;
struct _textrangew;
struct _userBITMAP;
struct _usr_permid;
struct calldata_dn;
struct dbdatetime4;
struct dnet_accent;
struct joyinfo_tag;
struct linkinfo_dn;
struct log_message;
struct mc_allocate;
struct mc_test_rts;
struct midihdr_tag;
struct perf_stat_0;
struct psid_struct;
struct sockaddr_at;
struct sockaddr_dn;
struct sockaddr_in;
struct sockaddr_nb;
struct sockaddr_tp;
struct sockaddr_vv;
struct srv_coldesc;
struct srv_comport;
struct srv_control;
struct srv_handler;
struct srv_pevents;
struct tagAUXCAPSA;
struct tagAUXCAPSW;
struct tagBSTRBLOB;
struct tagCALPWSTR;
struct tagCCSTYLEA;
struct tagCCSTYLEW;
struct tagCLIPDATA;
struct tagCOLORKEY;
struct tagCONVINFO;
struct tagCUSTDATA;
struct tagConfDest;
struct tagDBBYGUID;
struct tagDBOBJECT;
struct tagDBPARAMS;
struct tagDBVECTOR;
struct tagDEVNAMES;
struct tagELEMDESC;
struct tagEVENTMSG;
struct tagFONTDESC;
struct tagFUNCDESC;
struct tagGLYPHSET;
struct tagHELPINFO;
struct tagINTERVAL;
struct tagJOYCAPSA;
struct tagJOYCAPSW;
struct tagLINEINFO;
struct tagLOGBRUSH;
struct tagLOGFONTA;
struct tagLOGFONTW;
struct tagMENUINFO;
struct tagMULTI_QI;
struct tagPELARRAY;
struct tagPICTDESC;
struct tagPROPBAG2;
struct tagPROPSPEC;
struct tagPassParm;
struct tagRASCONNA;
struct tagRASCONNW;
struct tagRASSLIPA;
struct tagRASSLIPW;
struct tagRemBRUSH;
struct tagSTATDATA;
struct tagTARGINFO;
struct tagTLIBATTR;
struct tagTVSORTCB;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagWCSVDATA;
struct val_context;
struct wavehdr_tag;
struct x25_overlay;
struct xa_switch_t;
struct ADOCommand;
struct CCertAdmin;
struct CMimeTypes;
struct ChannelMgr;
struct Conference;
struct DIENVELOPE;
struct DIJOYSTATE;
struct DIPERIODIC;
struct DPLAPPINFO;
struct DataSource;
struct Dimensions;
struct ErrorsVtbl;
struct FieldsVtbl;
struct FolderItem;
struct FolderVtbl;
struct GLUquadric;
struct HDDEDATA__;
struct HDRVCALL__;
struct HDRVLINE__;
struct HLINEAPP__;
struct HMIDIOUT__;
struct HMONITOR__;
struct HPALETTE__;
struct HPENDATA__;
struct HRASCONN__;
struct HRECHOOK__;
struct HTMLDialog;
struct HTMLIFrame;
struct HTMLScreen;
struct HWAVEOUT__;
struct IADsDomain;
struct IADsOUVtbl;
struct IADsSyntax;
struct IAMTVAudio;
struct IAMTVTuner;
struct IAVIStream;
struct IAgentVtbl;
struct IAudioData;
struct ICSSFilter;
struct ICertAdmin;
struct ICopyHookA;
struct ICopyHookW;
struct ICustomDoc;
struct IDirect3D2;
struct IDispError;
struct IEnumClass;
struct IEnumNames;
struct IEnumSSRCs;
struct IErrorInfo;
struct IHTMLStyle;
struct IHTMLTable;
struct IHlinkSite;
struct IHlinkVtbl;
struct ILockBytes;
struct IMAPITable;
struct IMDDataset;
struct IMallocSpy;
struct IMprUIHost;
struct IMtsEvents;
struct IOleCache2;
struct IOleObject;
struct IOleWindow;
struct IOmHistory;
struct IPrintVtbl;
struct IProfAdmin;
struct IQueryInfo;
struct IQueryVtbl;
struct IRTPStream;
struct IShellIcon;
struct IShellView;
struct ISurrogate;
struct ITCallInfo;
struct ITTAPIVtbl;
struct ITTerminal;
struct ITTimeVtbl;
struct ITableData;
struct ITrackFile;
struct ITypeInfo2;
struct IWPObjVtbl;
struct LUA_COMMON;
struct LevelsVtbl;
struct MemberVtbl;
struct NAMEDCOLOR;
struct Parameters;
struct Properties;
struct UDP_HEADER;
struct UnloadInfo;
struct WebBrowser;
struct _AE_ACCLIM;
struct _AE_ACLMOD;
struct _AE_UASMOD;
struct _AM_COLCON;
struct _BIN_COUNT;
struct _BIN_RANGE;
struct _BYTE_BLOB;
struct _CERT_INFO;
struct _CHAR_INFO;
struct _CONFADDRA;
struct _CONFADDRW;
struct _CONFGUIDA;
struct _CONFGUIDW;
struct _CONFINFOA;
struct _CONFINFOW;
struct _CRL_ENTRY;
struct _CTL_ENTRY;
struct _CTL_USAGE;
struct _Command15;
struct _D3DBRANCH;
struct _D3DLIGHT2;
struct _D3DMATRIX;
struct _D3DSTATUS;
struct _D3DVECTOR;
struct _D3DVERTEX;
struct _DPADDRESS;
struct _DRAGINFOA;
struct _DRAGINFOW;
struct _DROPFILES;
struct _DTBLDDLBX;
struct _DTBLLABEL;
struct _EDKCNVENV;
struct _ERROR_LOG;
struct _FMS_LOADA;
struct _FMS_LOADW;
struct _HD_LAYOUT;
struct _HMAC_Info;
struct _IMAGEINFO;
struct _IMAGELIST;
struct _IPX_ROUTE;
struct _LANA_ENUM;
struct _LDT_ENTRY;
union _LLC_PARMS;
struct _MAPIERROR;
struct _NM_UPDOWN;
struct _NRESARRAY;
struct _OFNOTIFYA;
struct _OFNOTIFYW;
struct _OLESTREAM;
struct _PROXYINFO;
struct _PROXYLIST;
struct _PROXYNODE;
struct _PSHNOTIFY;
struct _Parameter;
struct _RPC_IF_ID;
struct _RSAPUBKEY;
struct _ReadState;
struct _Recordset;
struct _SC_ACTION;
struct _STD_ALERT;
struct _SYNC_CARD;
struct _SecBuffer;
struct _SecHandle;
struct _TOKENRING;
struct _TRIVERTEX;
struct _TRUSTEE_A;
struct _TRUSTEE_W;
struct _WORD_BLOB;
struct _charrange;
struct _compcolor;
struct _cpinfoexA;
struct _cpinfoexW;
struct _exception;
struct _findtextw;
struct _gettextex;
struct _msgfilter;
struct _reqresize;
struct _riffchunk;
struct _selchange;
struct _tagOLECMD;
struct _textrange;
struct _xml_error;
struct am_overlay;
struct berelement;
struct dbdatetime;
struct dbvarychar;
struct deallocate;
struct gw_overlay;
struct ldapsearch;
struct mc_confirm;
struct mmtime_tag;
struct optdata_dn;
struct send_error;
struct srv_config;
struct srv_events;
struct srv_params;
struct srv_server;
struct srv_tdshdr;
struct tagABSTIME;
union tagBINDPTR;
struct tagCACLSID;
struct tagCADWORD;
struct tagCALPSTR;
struct tagCASCODE;
struct tagCCINFOA;
struct tagCCINFOW;
struct tagCPLINFO;
struct tagDVD_ATR;
struct tagEMRTEXT;
struct tagHSZPAIR;
struct tagIDLDESC;
struct tagLICINFO;
struct tagLVITEMA;
struct tagLVITEMW;
struct tagNMMOUSE;
struct tagNMREBAR;
struct tagOLEVERB;
struct tagPAGESET;
struct tagPCMINFO;
struct tagPDEVENT;
struct tagPENINFO;
struct tagPOINTFX;
struct tagPROFILE;
struct tagQuality;
struct tagRASAMBA;
struct tagRASAMBW;
struct tagRASIPXW;
struct tagRECTOFS;
struct tagRGBQUAD;
struct tagSTATSTG;
struct tagSTRKFMT;
struct tagTCITEMA;
struct tagTCITEMW;
struct tagTVITEMA;
struct tagTVITEMW;
struct tagVARDESC;
struct tagVARIANT;
struct tagWCRANGE;
struct tag_DVINFO;
struct tp_overlay;
struct tp_started;
struct value_entA;
struct value_entW;
struct ADOErrors;
struct ADOFields;
struct BDN_VALUE;
struct CCertExit;
struct CMYKCOLOR;
struct ClusNodes;
struct DIDEVCAPS;
struct DIPROPCAL;
struct DataLinks;
struct Dimension;
struct ErrorVtbl;
struct FieldVtbl;
struct GRAYCOLOR;
struct HACMOBJ__;
struct HBITMAP__;
struct HINKSET__;
struct HMIDIIN__;
struct HTMLEmbed;
struct HTMLStyle;
struct HTMLTable;
struct HWAVEIN__;
struct HWINSTA__;
struct HiFiCOLOR;
struct Hierarchy;
struct IADsClass;
struct IADsGroup;
struct IADsOVtbl;
struct IADsValue;
struct IAccessor;
struct IAddrBook;
struct IAgentCtl;
struct IBindHost;
struct ICertExit;
struct IContinue;
struct IDSObject;
struct IDSSearch;
struct IDeskBand;
struct IDirect3D;
struct IDispatch;
struct IDistList;
struct IEnumCall;
struct IEnumGUID;
struct IEnumPins;
struct IErrorLog;
struct IFontDisp;
struct IFontVtbl;
struct IGetFrame;
struct IInternet;
struct IMAPIForm;
struct IMAPIProp;
struct IMailUser;
struct IMimeInfo;
struct IMsgStore;
struct IOleCache;
struct IP_HEADER;
struct IProfSect;
struct IPropData;
struct IQualProp;
struct IRMHelper;
struct IReadData;
struct IResponse;
struct ITAddress;
struct ITChannel;
struct ITSdpVtbl;
struct ITaskVtbl;
struct ITnefVtbl;
struct ITypeComp;
struct ITypeInfo;
struct ITypeLib2;
struct IViewSort;
struct IXAConfig;
struct IXMLError;
struct LUA_FLAG1;
struct LUA_FLAG2;
struct LevelVtbl;
struct Positions;
struct RASIPADDR;
struct SchedSess;
struct XACTSTATS;
struct _ABCFLOAT;
struct _ADRENTRY;
struct _AMVPSIZE;
struct _CERT_RDN;
struct _COLORMAP;
struct _COMMPROP;
struct _CRL_INFO;
struct _CTL_INFO;
struct _Ctypevec;
struct _D3DLIGHT;
struct _D3DPOINT;
struct _D3DRMBOX;
struct _D3DRMRAY;
struct _D3DSTATE;
struct _D3DSTATS;
struct _DBanVtbl;
struct _DEPGVtbl;
struct _DOCINFOA;
struct _DOCINFOW;
struct _DPOPVtbl;
struct _DPSPVtbl;
struct _DPreview;
struct _DSCBCAPS;
struct _DTBLEDIT;
struct _DTBLPAGE;
struct _ETHERNET;
struct _FILETIME;
struct _FLOAT128;
struct _FPO_DATA;
struct _HD_ITEMA;
struct _HD_ITEMW;
struct _ICONINFO;
struct _MMCKINFO;
struct _MMIOINFO;
struct _NS_INFOA;
struct _NS_INFOW;
struct _OBJECTID;
struct _OFSTRUCT;
struct _PERF_BIN;
struct _PORT_DEF;
struct _RIP_INFO;
struct _ROWENTRY;
struct _SCH_CRED;
struct _SHITEMID;
struct _SYNC_CFG;
struct _StrEntry;
struct _StrTable;
struct _TBBUTTON;
struct _adsvalue;
struct _findtext;
struct _flaglist;
struct _flowspec;
struct _heapinfo;
struct _renddata;
struct _reobject;
struct _rifflist;
union _timecode;
struct confirmed;
struct cscritsec;
struct dbdaterec;
struct dbnumeric;
struct dbvarybin;
struct get_state;
struct l_timeval;
struct nodeent_f;
struct send_data;
struct sockproto;
struct srv_stats;
struct tagBITMAP;
struct tagCABOOL;
struct tagCABSTR;
struct tagCADATE;
struct tagCAUUID;
struct tagCIEXYZ;
struct tagDBCOST;
struct tagDBDATE;
struct tagDBLIKE;
struct tagDBPROP;
struct tagDBTEXT;
struct tagDBTIME;
struct tagDCINFO;
struct tagEMRARC;
struct tagEMREOF;
struct tagHLITEM;
struct tagLOGPEN;
struct tagNMCHAR;
struct tagPANOSE;
struct tagPENTIP;
struct tagPOINTF;
struct tagPOINTS;
struct tagRemSNB;
struct tagTARGET;
struct ADOError;
struct ADOField;
struct AxesVtbl;
struct AxisVtbl;
struct BDN_RSVP;
struct CPlugins;
struct CellVtbl;
struct ClusNode;
struct CubeDefs;
struct DIEFFECT;
struct Fields15;
struct GLUnurbs;
struct HACCEL__;
struct HBRUSH__;
struct HMIXER__;
struct HPHONE__;
struct HTMLBody;
struct HVIDEO__;
struct IABLogon;
struct IADsUser;
struct IADsVtbl;
struct IAMTuner;
struct IAVIFile;
struct IBindCtx;
struct IBinding;
struct ICatalog;
struct ICellset;
struct ICluster;
struct ICommand;
struct IDvdInfo;
struct IEPGVtbl;
struct IExchExt;
struct IMSLogon;
struct IMarshal;
struct IMessage;
struct IMoniker;
struct IMultiQI;
struct IOleLink;
struct IOverlay;
struct IPersist;
struct IPicture;
struct IPinInfo;
struct IPinVtbl;
struct IROTData;
struct IRequest;
struct IService;
struct IStorage;
struct ITypeLib;
struct IUnknown;
struct IXPLogon;
struct LabCOLOR;
struct Position;
struct Property;
struct RGBCOLOR;
struct Response;
struct SLI_OPEN;
struct Terminal;
struct XYZCOLOR;
struct YxyCOLOR;
struct _ADOVtbl;
struct _ADRLIST;
struct _ADRPARM;
struct _AT_ENUM;
struct _AT_INFO;
struct _COMSTAT;
struct _CONTEXT;
struct _CabInfo;
struct _Collvec;
struct _Command;
struct _D3DLINE;
struct _D3DRECT;
struct _D3DSPAN;
struct _DDBLTFX;
struct _DDSCAPS;
struct _DMsepg4;
struct _DSBCAPS;
struct _DSCCAPS;
struct _DSSSEED;
struct _DTBLLBX;
struct _GENERIC;
struct _HMAPPER;
struct _IDEREGS;
struct _LLC_CCB;
struct _MAPIUID;
union _MESSAGE;
struct _PinInfo;
struct _RGNDATA;
struct _ROWLIST;
struct _SBinary;
struct _SLPARMS;
struct _SRowSet;
struct _STATURL;
struct _UDACCEL;
struct _WGLSWAP;
struct _actions;
struct _complex;
struct _lzfuhdr;
struct _stati64;
struct _utimbuf;
struct allocate;
struct appc_hdr;
struct dn_naddr;
struct get_type;
struct in_addr6;
struct ldapmodA;
struct ldapmodW;
struct mc_flush;
struct protoent;
struct sockaddr;
struct srv_proc;
struct srv_rpcp;
struct tagACCEL;
struct tagCADBL;
struct tagCAFLT;
union tagCOLOR;
struct tagGUIDE;
struct tagINPUT;
struct tagNMHDR;
struct tagNMKEY;
struct tagPOINT;
struct tagXFORM;
struct tecwrksd;
struct tecwrkus;
struct tedalert;
struct tediagns;
struct test_rts;
struct tp_ended;
struct tpfmihdr;
struct tpstahdr;
struct tpstchdr;
struct tpstehdr;
struct tpstmhdr;
struct tpstrhdr;
struct tpstshdr;
struct Address;
struct Catalog;
struct Cellset;
struct ClusObj;
struct CubeDef;
struct Field15;
struct HCALL__;
struct HCONV__;
struct HDESK__;
struct HDROP__;
struct HDRVR__;
struct HFONT__;
struct HGLRC__;
struct HHOOK__;
struct HICON__;
struct HIMCC__;
struct HLINE__;
struct HMENU__;
struct HMIDI__;
struct HMMIO__;
struct HRSRC__;
struct HTASK__;
struct HTMLImg;
struct HWAVE__;
struct IAMovie;
struct IAttach;
struct IBPCVid;
struct IDBInfo;
struct IDCInfo;
struct IFilter;
struct IHolder;
struct IImgCtx;
struct IMDFind;
struct IMalloc;
struct IMtsGrp;
struct IRowset;
struct IServer;
struct IStream;
struct ITMedia;
struct IUrlMon;
struct Members;
struct Request;
struct Session;
struct WSAData;
struct WSPData;
struct XACTOPT;
struct _BUFFER;
struct _Cvtvec;
struct _DDCAPS;
struct _DSCAPS;
struct _KDHELP;
struct _NOTIFY;
struct _NT_TIB;
struct _POINTL;
struct _PUBKEY;
struct _SCALAR;
struct _STRRET;
struct _WEEKLY;
struct _WSABUF;
struct _action;
struct _cpinfo;
struct _enlink;
struct _ldiv_t;
struct confirm;
struct convert;
struct cs_info;
struct dbmoney;
struct display;
struct hostent;
struct in_addr;
struct ip_mreq;
struct ldapmsg;
struct pvalueA;
struct pvalueW;
struct servent;
struct svc_hdr;
struct tagCACY;
struct tagCAUB;
struct tagCAUH;
struct tagCAUI;
struct tagCAUL;
struct tagCRGB;
struct tagDBID;
struct tagOFNA;
struct tagOFNW;
struct tagOIFI;
struct tagPSDA;
struct tagPSDW;
struct tagRECT;
struct tagSIZE;
struct timeval;
struct tpashdr;
struct tpclhdr;
struct tpophdr;
struct utimbuf;
struct Errors;
struct Fields;
struct Folder;
struct HIMC__;
struct HKEY__;
struct HPCM__;
struct HPEN__;
struct HREC__;
struct HRGN__;
struct HSTR__;
struct HTRG__;
struct HWND__;
struct IADsOU;
struct IAgent;
struct IHlink;
struct IPrint;
struct IQuery;
struct ITTAPI;
struct ITTime;
struct IWPObj;
struct LUA_RH;
struct LUA_TH;
struct Levels;
struct Member;
struct MtsGrp;
struct Server;
struct _COORD;
struct _DAILY;
struct _FIXED;
struct _FRAME;
struct _RECTL;
struct _STATS;
struct _TOKEN;
struct _div_t;
struct _iobuf;
struct _timeb;
struct berval;
struct bufelt;
struct bufhdr;
struct fd_set;
struct linger;
struct netent;
struct srv_io;
struct tagCAH;
struct tagCAI;
struct tagCAL;
struct tagDEC;
struct tagEMR;
struct tagMSG;
struct tagPDA;
struct tagPDW;
struct Agent;
struct Error;
struct Field;
struct HDC__;
struct HIC__;
struct HKL__;
struct HRC__;
struct HSZ__;
struct HWL__;
struct IADsO;
struct IFont;
struct ITSdp;
struct ITask;
struct ITnef;
struct Level;
struct Media;
struct Shell;
struct _BLOB;
struct _DBan;
struct _DEPG;
struct _DPOP;
struct _DPSP;
struct _FDDI;
struct _GUID;
struct _HLOG;
struct _LINK;
struct _LIST;
struct _LUID;
struct _MAT2;
struct _NSID;
struct _SRow;
struct _msEH;
struct _stat;
struct flush;
struct lconv;
union tagCY;
struct timeb;
struct xid_t;
struct Axes;
struct Axis;
struct BOID;
struct Cell;
struct IADs;
struct IEPG;
struct IPin;
struct PDPO;
struct TAPI;
struct Time;
struct _ABC;
struct _ACL;
struct _ADO;
struct _BTE;
struct _DCB;
struct _IDA;
struct _LLC;
struct _NCB;
struct _PSP;
struct _SID;
struct _dtr;
struct _trp;
struct cnos;
struct ldap;
struct stat;
union _PV;
struct trc;
struct tm;

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A {unsigned int NameOffset : 31;unsigned int NameIsString : 1;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 {unsigned int OffsetToDirectory : 31;unsigned int DataIsDirectory : 1;};
struct _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 {short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;};
struct _devicemodeW___8704E1B782D57C585145E63F7510EBEA___5ACE225D4D14CE0550A9F5A217E306C5 {short dmOrientation;short dmPaperSize;short dmPaperLength;short dmPaperWidth;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E {unsigned int BaseMid : 8;unsigned int Type : 5;unsigned int Dpl : 2;unsigned int Pres : 1;unsigned int LimitHi : 4;unsigned int Sys : 1;unsigned int Reserved_0 : 1;unsigned int Default_Big : 1;unsigned int Granularity : 1;unsigned int BaseHi : 8;};
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 {void **XlatTable;unsigned char *StateTable;unsigned int NumberOfEntries;};
union SIP_SUBJECTINFO____02ECAB1B75FB78019062BA5F11C342E3 {struct MS_ADDINFO_FLAT_ *psFlat;struct MS_ADDINFO_CATALOGMEMBER_ *psCatMember;struct MS_ADDINFO_BLOB_ *psBlob;};
struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E {short left;short top;short right;short bottom;};
union _WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB {struct WINTRUST_FILE_INFO_ *pFile;struct WINTRUST_CATALOG_INFO_ *pCatalog;struct WINTRUST_BLOB_INFO_ *pBlob;struct WINTRUST_SGNR_INFO_ *pSgnr;struct WINTRUST_CERT_INFO_ *pCert;};
typedef struct _E3900F4E8C66B34C84E740787FDB0DE9 *LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;
typedef struct _E3900F4E8C66B34C84E740787FDB0DE9 GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT *LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3 {unsigned int Lo;int Hi;};
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009 {int hInproc;int hRemote;};
struct IDtcLuRecoveryInitiatedByDtcStatusWork {struct IDtcLuRecoveryInitiatedByDtcStatusWorkVtbl *lpVtbl;};
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
enum MACRO_OLEUI_IOERR_SRCDATAOBJECTINVALID {OLEUI_IOERR_SRCDATAOBJECTINVALID = 116,OLEUI_IOERR_ARRPASTEENTRIESINVALID = 117,OLEUI_IOERR_ARRLINKTYPESINVALID = 118,OLEUI_PSERR_CLIPBOARDCHANGED = 119,OLEUI_PSERR_GETCLIPBOARDFAILED = 120,OLEUI_ELERR_LINKCNTRNULL = 116,OLEUI_ELERR_LINKCNTRINVALID = 117,};
enum MACRO_hrExistingLogFileHasBadSignature {hrExistingLogFileHasBadSignature = 0x8800022E,};
enum MACRO_hrExistingLogFileIsNotContiguous {hrExistingLogFileIsNotContiguous = 0x8800022F,};
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO *PPOLICY_DOMAIN_QUALITY_OF_SERVICE_INFO;
typedef struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct IDtcLuRecoveryInitiatedByDtcTransWork {struct IDtcLuRecoveryInitiatedByDtcTransWorkVtbl *lpVtbl;};
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO POLICY_DOMAIN_QUALITY_OF_SERVICE_INFO;
typedef struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO *PPOLICY_LOCAL_QUALITY_OF_SERVICE_INFO;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _C25693052C43ED6AA003F87DB66344AA *LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE;
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY *LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum MACRO_tevtMessageBackboneTransferOut {tevtMessageBackboneTransferOut = 1002,};
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO POLICY_LOCAL_QUALITY_OF_SERVICE_INFO;
enum __MIDL_IInternetSecurityManager_0001 {PUAF_DEFAULT = 0x0,PUAF_NOUI = 0x1,PUAF_ISFILE = 0x2,PUAF_WARN_IF_DENIED = 0x4,PUAF_FORCEUI_FOREGROUND = 0x8,PUAF_CHECK_TIFS = 0x10,};
enum __MIDL_IInternetSecurityManager_0002 {SZM_CREATE = 0x0,SZM_DELETE = 0x1,};
enum __MIDL___MIDL_itf_amstream_0000_0001 {AMMSF_NOGRAPHTHREAD = 0x1,};
enum __MIDL___MIDL_itf_amstream_0000_0002 {AMMSF_ADDDEFAULTRENDERER = 0x1,AMMSF_CREATEPEER = 0x2,};
enum __MIDL___MIDL_itf_amstream_0000_0003 {AMMSF_RENDERTYPEMASK = 0x3,AMMSF_RENDERTOEXISTING = 0x0,AMMSF_RENDERALLSTREAMS = 0x1,AMMSF_NORENDER = 0x2,AMMSF_NOCLOCK = 0x4,AMMSF_RUN = 0x8,};
enum __MIDL___MIDL_itf_amstream_0000_0004 {Disabled = 0x0,ReadData = 0x1,RenderData = 0x2,};
enum __MIDL___MIDL_itf_ddstream_0000_0001 {DDSFF_PROGRESSIVERENDER = 0x1,};
enum __MIDL___MIDL_itf_mmstream_0000_0001 {STREAMTYPE_READ = 0x0,STREAMTYPE_WRITE = 0x1,STREAMTYPE_TRANSFORM = 0x2,};
enum __MIDL___MIDL_itf_mmstream_0000_0002 {STREAMSTATE_STOP = 0x0,STREAMSTATE_RUN = 0x1,};
enum __MIDL___MIDL_itf_mmstream_0000_0003 {COMPSTAT_NOUPDATEOK = 0x1,COMPSTAT_WAIT = 0x2,COMPSTAT_ABORT = 0x4,};
enum __MIDL___MIDL_itf_mmstream_0000_0004 {MMSSF_HASCLOCK = 0x1,MMSSF_SUPPORTSEEK = 0x2,MMSSF_ASYNCHRONOUS = 0x4,};
enum __MIDL___MIDL_itf_mmstream_0000_0005 {SSUPDATE_ASYNC = 0x1,SSUPDATE_CONTINUOUS = 0x2,};
enum __MIDL___MIDL_itf_mtxadmin_0107_0001 {mtsInstallUsers = 0x1,};
enum __MIDL___MIDL_itf_mtxadmin_0107_0002 {mtsExportUsers = 0x1,};
enum __MIDL___MIDL_itf_mtxadmin_0107_0003 {mtsErrObjectErrors = 0x80110401,mtsErrObjectInvalid = 0x80110402,mtsErrKeyMissing = 0x80110403,mtsErrAlreadyInstalled = 0x80110404,mtsErrDownloadFailed = 0x80110405,mtsErrPDFWriteFail = 0x80110407,mtsErrPDFReadFail = 0x80110408,mtsErrPDFVersion = 0x80110409,mtsErrCoReqCompInstalled = 0x80110410,mtsErrBadPath = 0x8011040A,mtsErrPackageExists = 0x8011040B,mtsErrRoleExists = 0x8011040C,mtsErrCantCopyFile = 0x8011040D,mtsErrNoTypeLib = 0x8011040E,mtsErrNoUser = 0x8011040F,mtsErrInvalidUserids = 0x80110410,mtsErrNoRegistryCLSID = 0x80110411,mtsErrBadRegistryProgID = 0x80110412,mtsErrAuthenticationLevel = 0x80110413,mtsErrUserPasswdNotValid = 0x80110414,mtsErrNoRegistryRead = 0x80110415,mtsErrNoRegistryWrite = 0x80110416,mtsErrNoRegistryRepair = 0x80110417,mtsErrCLSIDOrIIDMismatch = 0x80110418,mtsErrRemoteInterface = 0x80110419,mtsErrDllRegisterServer = 0x8011041A,mtsErrNoServerShare = 0x8011041B,mtsErrNoAccessToUNC = 0x8011041C,mtsErrDllLoadFailed = 0x8011041D,mtsErrBadRegistryLibID = 0x8011041E,mtsErrPackDirNotFound = 0x8011041F,mtsErrTreatAs = 0x80110420,mtsErrBadForward = 0x80110421,mtsErrBadIID = 0x80110422,mtsErrRegistrarFailed = 0x80110423,mtsErrCompFileDoesNotExist = 0x80110424,mtsErrCompFileLoadDLLFail = 0x80110425,mtsErrCompFileGetClassObj = 0x80110426,mtsErrCompFileClassNotAvail = 0x80110427,mtsErrCompFileBadTLB = 0x80110428,mtsErrCompFileNotInstallable = 0x80110429,mtsErrNotChangeable = 0x8011042A,mtsErrNotDeletable = 0x8011042B,mtsErrSession = 0x8011042C,mtsErrCompFileNoRegistrar = 0x80110434,};
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION CHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _7909BF26B031C365F3B32F82E7366E93 *LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;
enum MACRO_hrGivenLogFileHasBadSignature {hrGivenLogFileHasBadSignature = 0xC800022B,};
enum MACRO_hrGivenLogFileIsNotContiguous {hrGivenLogFileIsNotContiguous = 0xC800022C,};
enum MACRO_pidExchangeNonXmitReservedMin {pidExchangeNonXmitReservedMin = 0x65E0,};
enum MACRO_tevtMessageBackboneTransferIn {tevtMessageBackboneTransferIn = 1001,};
enum MACRO_tevtMessageGatewayTransferOut {tevtMessageGatewayTransferOut = 1003,};
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO *PPOLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef struct _POLICY_LOCAL_MACHINE_PASSWORD_INFO *PPOLICY_LOCAL_MACHINE_PASSWORD_INFO;
typedef struct _SecPkgContext_RemoteCredentialInfo *PSecPkgContext_RemoteCredentialInfo;
enum tagEOLE_AUTHENTICATION_CAPABILITIES {EOAC_NONE = 0x0,EOAC_MUTUAL_AUTH = 0x1,EOAC_CLOAKING = 0x10,EOAC_SECURE_REFS = 0x2,EOAC_ACCESS_CONTROL = 0x4,EOAC_APPID = 0x8,};
typedef struct _EB59546A6B00F9787175E0D2790469DD ATM_BROADBAND_BEARER_CAPABILITY_IE;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _C25693052C43ED6AA003F87DB66344AA GOPHER_ORGANIZATION_ATTRIBUTE_TYPE;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct tuispicreatedialoginstanceparams_tag *LPTUISPICREATEDIALOGINSTANCEPARAMS;
enum MACRO_IoctlCodeReadInterfaceRecord {IoctlCodeReadInterfaceRecord = 0x642,};
enum MACRO_oledbICommandWithParameters_ {oledbICommandWithParameters__GetParameterInfo = 50025,oledbICommandWithParameters__MapParameterNames = 50026,oledbICommandWithParameters__SetParameterInfo = 50027,};
enum MACRO_tevtMessageGatewayTransferIn {tevtMessageGatewayTransferIn = 1004,};
enum MACRO_tevtReportGatewayTransferOut {tevtReportGatewayTransferOut = 1006,};
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO POLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef struct _POLICY_LOCAL_MACHINE_PASSWORD_INFO POLICY_LOCAL_MACHINE_PASSWORD_INFO;
typedef struct _POLICY_LOCAL_IPSEC_REFERENCE_INFO *PPOLICY_LOCAL_IPSEC_REFERENCE_INFO;
typedef struct _POLICY_LOCAL_POLICY_LOCATION_INFO *PPOLICY_LOCAL_POLICY_LOCATION_INFO;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A *PSP_DEVICE_INTERFACE_DETAIL_DATA_A;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W *PSP_DEVICE_INTERFACE_DETAIL_DATA_W;
typedef struct _SecPkgContext_LocalCredentialInfo *PSecPkgContext_LocalCredentialInfo;
typedef struct _SecPkgContext_RemoteCredentialInfo SecPkgContext_RemoteCredentialInfo;
typedef unsigned char *( *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
typedef struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY WIN_TRUST_SUBJECT_FILE_AND_DISPLAY;
enum __MIDL_IRemoteProcessCallback_0001 {EXCEPTION_KIND_FIRST_CHANCE = 0x1,EXCEPTION_KIND_LAST_CHANCE = 0x2,};
enum __MIDL___MIDL_itf_mtxspm_0098_0001 {LockSetGet = 0x0,LockMethod = 0x1,};
enum __MIDL___MIDL_itf_mtxspm_0098_0002 {Standard = 0x0,Process = 0x1,};
enum __MIDL___MIDL_itf_objidl_0052_0001 {COMBND_RPCSTRINGS = 0x1,};
enum __MIDL___MIDL_itf_strmif_0074_0004 {REG_PINFLAG_B_ZERO = 0x1,REG_PINFLAG_B_RENDERER = 0x2,REG_PINFLAG_B_MANY = 0x4,REG_PINFLAG_B_OUTPUT = 0x8,};
enum __MIDL___MIDL_itf_strmif_0077_0001 {CK_NOCOLORKEY = 0x0,CK_INDEX = 0x1,CK_RGB = 0x2,};
enum __MIDL___MIDL_itf_strmif_0077_0002 {ADVISE_NONE = 0x0,ADVISE_CLIPPING = 0x1,ADVISE_PALETTE = 0x2,ADVISE_COLORKEY = 0x4,ADVISE_POSITION = 0x8,};
enum __MIDL___MIDL_itf_strmif_0083_0001 {AM_FILE_OVERWRITE = 0x1,};
enum __MIDL___MIDL_itf_strmif_0094_0001 {AM_STREAM_INFO_START_DEFINED = 0x1,AM_STREAM_INFO_STOP_DEFINED = 0x2,AM_STREAM_INFO_DISCARDING = 0x4,AM_STREAM_INFO_STOP_SEND_EXTRA = 0x10,};
enum __MIDL___MIDL_itf_strmif_0101_0001 {CompressionCaps_CanQuality = 0x1,CompressionCaps_CanCrunch = 0x2,CompressionCaps_CanKeyFrame = 0x4,CompressionCaps_CanBFrame = 0x8,CompressionCaps_CanWindow = 0x10,};
enum __MIDL___MIDL_itf_strmif_0102_0001 {VfwCaptureDialog_Source = 0x1,VfwCaptureDialog_Format = 0x2,VfwCaptureDialog_Display = 0x4,};
enum __MIDL___MIDL_itf_strmif_0102_0002 {VfwCompressDialog_Config = 0x1,VfwCompressDialog_About = 0x2,};
enum __MIDL___MIDL_itf_strmif_0107_0001 {VideoCopyProtectionMacrovisionBasic = 0x0,VideoCopyProtectionMacrovisionCBI = 0x1,};
enum __MIDL___MIDL_itf_strmif_0118_0001 {AMPROPERTY_PIN_CATEGORY = 0x0,AMPROPERTY_PIN_MEDIUM = 0x1,};
enum _0098F46D2464D30143688EA3FCC60E02 {SQLOLEWeek_Unknown = 0x0,SQLOLEWeek_Sunday = 0x1,SQLOLEWeek_Monday = 0x2,SQLOLEWeek_Tuesday = 0x4,SQLOLEWeek_Wednesday = 0x8,SQLOLEWeek_Thursday = 0x10,SQLOLEWeek_Friday = 0x20,SQLOLEWeek_Saturday = 0x40,SQLOLEWeek_WeekDays = 0x3E,SQLOLEWeek_WeekEnds = 0x41,SQLOLEWeek_EveryDay = 0x7F,};
enum _04ED89F01C0FDF2BC464E7F71D566769 {AM_PROPERTY_DVDCOPY_CHLG_KEY = 0x1,AM_PROPERTY_DVDCOPY_DVD_KEY1 = 0x2,AM_PROPERTY_DVDCOPY_DEC_KEY2 = 0x3,AM_PROPERTY_DVDCOPY_TITLE_KEY = 0x4,AM_PROPERTY_COPY_MACROVISION = 0x5,AM_PROPERTY_DVDCOPY_REGION = 0x6,AM_PROPERTY_DVDCOPY_SET_COPY_STATE = 0x7,AM_PROPERTY_DVDCOPY_DISC_KEY = 0x80,};
enum _053EB6A1E433FFB0C0E77AB4917E32C9 {SQLOLEMedia_Floppy = 0x1,SQLOLEMedia_FixedDisk = 0x2,SQLOLEMedia_Tape = 0x4,SQLOLEMedia_CDROM = 0x8,SQLOLEMedia_All = 0xF,};
enum _05FE3C528592B9EC24F3019FCB2598A5 {SCALAR_STRING = 0x0,SCALAR_INT = 0x1,SCALAR_TIME = 0x2,SCALAR_BINARY = 0x3,};
enum _09BE76804438A6C75E84C7C383FD9ECA {AM_EXSEEK_CANSEEK = 0x1,AM_EXSEEK_CANSCAN = 0x2,AM_EXSEEK_MARKERSEEK = 0x4,AM_EXSEEK_SCANWITHOUTCLOCK = 0x8,AM_EXSEEK_NOSTANDARDREPAINT = 0x10,};
enum _0A77555B03865B677ABEDAD45C36FB86 {KSPROPERTY_MEDIASEEKING_CAPABILITIES = 0x0,KSPROPERTY_MEDIASEEKING_FORMATS = 0x1,KSPROPERTY_MEDIASEEKING_TIMEFORMAT = 0x2,KSPROPERTY_MEDIASEEKING_POSITION = 0x3,KSPROPERTY_MEDIASEEKING_STOPPOSITION = 0x4,KSPROPERTY_MEDIASEEKING_POSITIONS = 0x5,KSPROPERTY_MEDIASEEKING_DURATION = 0x6,KSPROPERTY_MEDIASEEKING_AVAILABLE = 0x7,KSPROPERTY_MEDIASEEKING_PREROLL = 0x8,KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 0x9,};
enum _0AEECC1A63E1B2F73D11FBA74082B60B {PROXY_CALCSIZE = 0x0,PROXY_GETBUFFER = 0x1,PROXY_MARSHAL = 0x2,PROXY_SENDRECEIVE = 0x3,PROXY_UNMARSHAL = 0x4,};
struct _0B8D1429C3827E0DB460E98487EB6908 {unsigned int Inexact : 1;unsigned int Underflow : 1;unsigned int Overflow : 1;unsigned int ZeroDivide : 1;unsigned int InvalidOperation : 1;};
enum _0C0D8E877CDAA32B9F529E7264818D98 {_FpCompareEqual = 0x0,_FpCompareGreater = 0x1,_FpCompareLess = 0x2,_FpCompareUnordered = 0x3,};
enum _0CDD13AED9949118DD70163834A3A235 {_FpRoundNearest = 0x0,_FpRoundMinusInfinity = 0x1,_FpRoundPlusInfinity = 0x2,_FpRoundChopped = 0x3,};
enum _0E92F63A5A78F3D3A0BA83AEB1AA18A7 {SQLOLEDevice_Unknown = 0x64,SQLOLEDevice_Database = 0x0,SQLOLEDevice_DiskDump = 0x2,SQLOLEDevice_FloppyADump = 0x3,SQLOLEDevice_FloppyBDump = 0x4,SQLOLEDevice_TapeDump = 0x5,SQLOLEDevice_PipeDump = 0x6,SQLOLEDevice_CDROM = 0x7,};
enum _180907713B49757DA176019EC73BD97C {SQLOLEAudit_None = 0x0,SQLOLEAudit_Success = 0x1,SQLOLEAudit_Failure = 0x2,SQLOLEAudit_All = 0x3,};
enum _18A957B6E01C1C99DD9440B9AA09B38E {MES_INCREMENTAL_HANDLE = 0x0,MES_FIXED_BUFFER_HANDLE = 0x1,MES_DYNAMIC_BUFFER_HANDLE = 0x2,};
struct _18FEA12C471CE0A4515515C42723EF45 {int iLow;int iHigh;};
enum _1CFACC66F05DAE103E3F945B1517C0DE {SQLOLEStart_NoServiceControl = 0x1,SQLOLEStart_NTErrorLogging = 0x2,SQLOLEStart_SingleUser = 0x4,SQLOLEStart_StartAndConnect = 0x8,SQLOLEStart_RealTime = 0x10,SQLOLEStart_Defaults = 0xA,};
enum _1D78A0CD8D81717194D9F89815B5F9FC {SBO_DEFAULT = 0x0,SBO_NOBROWSERPAGES = 0x1,};
enum _205964628A8ECFF8E361C7538BE987D4 {BM_x555RGB = 0x0,BM_x555XYZ = 0x101,BM_x555Yxy = 0x102,BM_x555Lab = 0x103,BM_x555G3CH = 0x104,BM_RGBTRIPLETS = 0x2,BM_BGRTRIPLETS = 0x4,BM_XYZTRIPLETS = 0x201,BM_YxyTRIPLETS = 0x202,BM_LabTRIPLETS = 0x203,BM_G3CHTRIPLETS = 0x204,BM_5CHANNEL = 0x205,BM_6CHANNEL = 0x206,BM_7CHANNEL = 0x207,BM_8CHANNEL = 0x208,BM_GRAY = 0x209,BM_xRGBQUADS = 0x8,BM_xBGRQUADS = 0x10,BM_xXYZQUADS = 0x301,BM_xYxyQUADS = 0x302,BM_xLabQUADS = 0x303,BM_xG3CHQUADS = 0x304,BM_KYMCQUADS = 0x305,BM_CMYKQUADS = 0x20,BM_10b_RGB = 0x9,BM_10b_XYZ = 0x401,BM_10b_Yxy = 0x402,BM_10b_Lab = 0x403,BM_10b_G3CH = 0x404,BM_NAMED_INDEX = 0x405,BM_16b_RGB = 0xA,BM_16b_XYZ = 0x501,BM_16b_Yxy = 0x502,BM_16b_Lab = 0x503,BM_16b_G3CH = 0x504,BM_16b_GRAY = 0x505,BM_565RGB = 0x1,};
enum _2144C7962DF9F3D2D57FF310327A22F0 {SQLOLENotify_None = 0x0,SQLOLENotify_Email = 0x1,SQLOLENotify_Pager = 0x2,SQLOLENotify_Both = 0x3,SQLOLENotify_Valid = 0x3,};
enum _233AE091E6F51587616C839325431F7C {SQLOLEEvent_Unknown = 0x0,SQLOLEEvent_Info = 0x1,SQLOLEEvent_Warning = 0x2,SQLOLEEvent_Error = 0x4,SQLOLEEvent_AuditSuccess = 0x8,SQLOLEEvent_AuditFailure = 0x10,SQLOLEEvent_All = 0x1F,};
enum _239F13ABFE0DEB25C9BEF2C1826A55A5 {_FpFormatFp32 = 0x0,_FpFormatFp64 = 0x1,_FpFormatFp80 = 0x2,_FpFormatFp128 = 0x3,_FpFormatI16 = 0x4,_FpFormatI32 = 0x5,_FpFormatI64 = 0x6,_FpFormatU16 = 0x7,_FpFormatU32 = 0x8,_FpFormatU64 = 0x9,_FpFormatBcd80 = 0xA,_FpFormatCompare = 0xB,_FpFormatString = 0xC,};
enum _25D95637D5496764A31AF6B682C31248 {SVUIA_DEACTIVATE = 0x0,SVUIA_ACTIVATE_NOFOCUS = 0x1,SVUIA_ACTIVATE_FOCUS = 0x2,SVUIA_INPLACEACTIVATE = 0x3,};
enum _2936DD3E54A60C83E0CA563A059B9B5A {SQLOLEPreArt_Min = 0x0,SQLOLEPreArt_None = 0x0,SQLOLEPreArt_DropTable = 0x1,SQLOLEPreArt_DeleteRows = 0x2,SQLOLEPreArt_TruncateTable = 0x3,SQLOLEPreArt_Max = 0x3,};
enum _2937D2B0EF55474EA0DE449AF045CB44 {IDX_CHECK_IN_BOUND = 0x0,IDX_CHECK_OUT_BOUND = 0x1,IDX_EDIT_THREADS_IN = 0x2,IDX_EDIT_THREADS_OUT = 0x3,IDX_EDIT_MSGS_IN = 0x4,IDX_EDIT_MSGS_OUT = 0x5,IDX_EDIT_SLEEP_IN = 0x6,IDX_EDIT_SLEEP_OUT = 0x7,IDX_EDIT_POLLING_IN = 0x8,IDX_EDIT_POLLING_OUT = 0x9,IDX_ADDR_TYPE = 0xA,IDX_DISP_NAME = 0xB,IDX_EMAIL_ADDR = 0xC,IDX_DIR_IN = 0xD,IDX_DIR_OUT = 0xE,IDX_CONVERTER_IN = 0xF,IDX_CONVERTER_OUT = 0x10,SGWDATA_PROP_COUNT = 0x11,};
enum _29DA7B98C2E2CB34CDBF24D85A286AD2 {AALTYPE_5 = 0x5,AALTYPE_USER = 0x10,};
enum _2A6324B8E10DEE2666A6A5498DFC667B {XLAT_SERVER = 0x1,XLAT_CLIENT = 0x2,};
enum _2D3643867FFB1094BAAE5460C0765888 {DAO_I2 = 0x0,DAO_I4 = 0x1,DAO_R4 = 0x2,DAO_R8 = 0x3,DAO_CURRENCY = 0x4,DAO_DATE = 0x5,DAO_BOOL = 0x6,DAO_BSTR = 0x7,DAO_LPSTR = 0x8,DAO_LPWSTR = 0x9,DAO_BLOB = 0xA,DAO_BYTES = 0xB,DAO_CHAR = 0xC,DAO_WCHAR = 0xD,DAO_ANYVARIANT = 0xE,DAO_BOOKMARK = 0xF,DAO_BYTE = 0x10,DAO_GUID = 0x11,DAO_DATATYPEMAX = 0x12,};
enum _2D5ABFA93E7EBCA3032380217130FA91 {SQLOLESubInfo_SQLServer = 0x0,SQLOLESubInfo_ODBCDatasource = 0x1,};
enum _2E4D6E69AC5B406EE64EF4CFE7610CC3 {IE_AALParameters = 0x0,IE_TrafficDescriptor = 0x1,IE_BroadbandBearerCapability = 0x2,IE_BHLI = 0x3,IE_BLLI = 0x4,IE_CalledPartyNumber = 0x5,IE_CalledPartySubaddress = 0x6,IE_CallingPartyNumber = 0x7,IE_CallingPartySubaddress = 0x8,IE_Cause = 0x9,IE_QOSClass = 0xA,IE_TransitNetworkSelection = 0xB,};
enum _310FDAB998881B9ADB132AD59C696495 {SLR_NO_UI = 0x1,SLR_ANY_MATCH = 0x2,SLR_UPDATE = 0x4,SLR_NOUPDATE = 0x8,};
enum _32421077C2010E274338AC2C523E1512 {KS_SEEKING_CanSeekAbsolute = 0x1,KS_SEEKING_CanSeekForwards = 0x2,KS_SEEKING_CanSeekBackwards = 0x4,KS_SEEKING_CanGetCurrentPos = 0x8,KS_SEEKING_CanGetStopPos = 0x10,KS_SEEKING_CanGetDuration = 0x20,KS_SEEKING_CanPlayBackwards = 0x40,};
struct _32D5F4ECB3520837EC43A0FF60CF3E0A {int base;int limit;};
enum _360EF92493B7E421425DE3A11B88ED7C {SQLOLERepFreq_Unknown = 0x3E8,SQLOLERepFreq_Min = 0x0,SQLOLERepFreq_Continuous = 0x0,SQLOLERepFreq_Snapshot = 0x1,SQLOLERepFreq_Max = 0x1,};
enum _38A529004179A583405242EBFE3B9E0D {SQLOLERunPri_Unknown = 0x64,SQLOLERunPri_Min = 0x1,SQLOLERunPri_Idle = 0xFFFFFFF1,SQLOLERunPri_Lowest = 0xFFFFFFFE,SQLOLERunPri_BelowNormal = 0xFFFFFFFF,SQLOLERunPri_Normal = 0x0,SQLOLERunPri_AboveNormal = 0x1,SQLOLERunPri_Highest = 0x2,SQLOLERunPri_TimeCritical = 0xF,};
enum _3D20E5AD71FB7B2EAEA904DDDD144215 {SQLOLEKey_Unknown = 0x0,SQLOLEKey_Primary = 0x1,SQLOLEKey_Unique = 0x2,SQLOLEKey_Foreign = 0x3,};
enum _3D835074FED48FDAAF4B1ED4A0224C0A {stateStopped = 0x0,statePaused = 0x1,stateRunning = 0x2,};
struct _3FA64165D15A4602C29B2D9B0DA4A5E9 {void *pad[2];void *userContext;};
enum _4218CD2CD980A290FF820393F4F33E3B {SHREGENUM_DEFAULT = 0x0,SHREGENUM_HKCU = 0x1,SHREGENUM_HKLM = 0x10,SHREGENUM_BOTH = 0x11,};
enum _4359A6DF66D6C0A2E03091CE4CF62226 {KSDEGRADE_STANDARD_SAMPLE = 0x0,KSDEGRADE_STANDARD_QUALITY = 0x1,KSDEGRADE_STANDARD_COMPUTATION = 0x2,KSDEGRADE_STANDARD_SKIP = 0x3,};
enum _4491740396E631478E0BF9925CACA2B7 {FWF_AUTOARRANGE = 0x1,FWF_ABBREVIATEDNAMES = 0x2,FWF_SNAPTOGRID = 0x4,FWF_OWNERDATA = 0x8,FWF_BESTFITWINDOW = 0x10,FWF_DESKTOP = 0x20,FWF_SINGLESEL = 0x40,FWF_NOSUBFOLDERS = 0x80,FWF_TRANSPARENT = 0x100,FWF_NOCLIENTEDGE = 0x200,FWF_NOSCROLL = 0x400,FWF_ALIGNLEFT = 0x800,FWF_NOICONS = 0x1000,FWF_SINGLECLICKACTIVATE = 0x8000,};
enum _44F87F8F2E1997D7283E1DB2EBD1089A {SQLOLESecurity_Min = 0x0,SQLOLESecurity_Normal = 0x0,SQLOLESecurity_Integrated = 0x1,SQLOLESecurity_Mixed = 0x2,SQLOLESecurity_Max = 0x2,};
enum _50D74A66A516C54C82561A091172DF5E {KSPROPERTY_CONNECTION_STATE = 0x0,KSPROPERTY_CONNECTION_PRIORITY = 0x1,KSPROPERTY_CONNECTION_DATAFORMAT = 0x2,KSPROPERTY_CONNECTION_ALLOCATORFRAMING = 0x3,KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT = 0x4,KSPROPERTY_CONNECTION_ACQUIREORDERING = 0x5,};
enum _519AA8129C8FE434C8B6333B794FFBBA {SQLOLEXfrFile_Default = 0x1,SQLOLEXfrFile_SummaryFiles = 0x1,SQLOLEXfrFile_SingleFile = 0x2,SQLOLEXfrFile_SingleFilePerObject = 0x4,};
enum _53EEC439051CDCA8BFC07626FF271DBE {SLGP_SHORTPATH = 0x1,SLGP_UNCPRIORITY = 0x2,SLGP_RAWPATH = 0x4,};
enum _552B465EEBBBB55F99060CD3683EE0BB {SQLOLEConfig_RecoveryInterval = 0x65,SQLOLEConfig_AllowUpdates = 0x66,SQLOLEConfig_UserConnections = 0x67,SQLOLEConfig_Memory = 0x68,SQLOLEConfig_OpenDatabases = 0x69,SQLOLEConfig_Locks = 0x6A,SQLOLEConfig_OpenObjects = 0x6B,SQLOLEConfig_ProcedureCache = 0x6C,SQLOLEConfig_FillFactor = 0x6D,SQLOLEConfig_DatabaseSize = 0x6F,SQLOLEConfig_MediaRetention = 0x70,SQLOLEConfig_RecoveryFlags = 0x71,SQLOLEConfig_NestedTriggers = 0x73,SQLOLEConfig_RemoteAccess = 0x75,SQLOLEConfig_DefaultLanguage = 0x7C,SQLOLEConfig_LanguageInCache = 0x7D,SQLOLEConfig_TempdbInRamMB = 0x1F5,SQLOLEConfig_MaxAsyncIO = 0x1F6,SQLOLEConfig_MaxWorkerThreads = 0x1F7,SQLOLEConfig_NetworkPacketSize = 0x1F9,SQLOLEConfig_RAWorkerThreads = 0x1FC,SQLOLEConfig_ShowAdvancedOption = 0x206,SQLOLEConfig_LEThresholdPercent = 0x209,SQLOLEConfig_LEThresholdMaximum = 0x20B,SQLOLEConfig_BackupThreads = 0x21C,SQLOLEConfig_BackupBufferSize = 0x21D,SQLOLEConfig_RemoteProcTrans = 0x21E,SQLOLEConfig_RemoteConnTimeout = 0x21F,SQLOLEConfig_TimeSlice = 0x456,SQLOLEConfig_RemoteSites = 0x45F,SQLOLEConfig_DefaultSortorderId = 0x463,SQLOLEConfig_HashBuckets = 0x5E0,SQLOLEConfig_SortPages = 0x5E1,SQLOLEConfig_MaxLazywriteIO = 0x5E2,SQLOLEConfig_RASlotsPerThread = 0x5E5,SQLOLEConfig_RAPrefetches = 0x5E6,SQLOLEConfig_RADelay = 0x5E7,SQLOLEConfig_RACacheMissLimit = 0x5E8,SQLOLEConfig_RACacheHitLimit = 0x5E9,SQLOLEConfig_SpinCounter = 0x5EA,SQLOLEConfig_FreeBuffers = 0x5EB,SQLOLEConfig_SMPConcurrency = 0x5EC,SQLOLEConfig_PriorityBoost = 0x5ED,SQLOLEConfig_RemoteLoginTimeout = 0x5EF,SQLOLEConfig_RemoteQueryTimeout = 0x5F0,SQLOLEConfig_LEThresholdMinimum = 0x5F2,SQLOLEConfig_LogwriteSleepMS = 0x5FA,SQLOLEConfig_CursorThreshold = 0x5FB,SQLOLEConfig_SetWorkingSetSize = 0x5FC,SQLOLEConfig_ResourceTimeout = 0x5FD,SQLOLEConfig_UserOptions = 0x5FE,SQLOLEConfig_ProcessorAffinityMask = 0x5FF,SQLOLEConfig_MaxTextReplSize = 0x600,};
enum _55BF08B00F142B6EC708C95723E2EDB1 {LDAP_SUCCESS = 0x0,LDAP_OPERATIONS_ERROR = 0x1,LDAP_PROTOCOL_ERROR = 0x2,LDAP_TIMELIMIT_EXCEEDED = 0x3,LDAP_SIZELIMIT_EXCEEDED = 0x4,LDAP_COMPARE_FALSE = 0x5,LDAP_COMPARE_TRUE = 0x6,LDAP_AUTH_METHOD_NOT_SUPPORTED = 0x7,LDAP_STRONG_AUTH_REQUIRED = 0x8,LDAP_REFERRAL_V2 = 0x9,LDAP_PARTIAL_RESULTS = 0x9,LDAP_REFERRAL = 0xA,LDAP_ADMIN_LIMIT_EXCEEDED = 0xB,LDAP_UNAVAILABLE_CRIT_EXTENSION = 0xC,LDAP_CONFIDENTIALITY_REQUIRED = 0xD,LDAP_NO_SUCH_ATTRIBUTE = 0x10,LDAP_UNDEFINED_TYPE = 0x11,LDAP_INAPPROPRIATE_MATCHING = 0x12,LDAP_CONSTRAINT_VIOLATION = 0x13,LDAP_ATTRIBUTE_OR_VALUE_EXISTS = 0x14,LDAP_INVALID_SYNTAX = 0x15,LDAP_NO_SUCH_OBJECT = 0x20,LDAP_ALIAS_PROBLEM = 0x21,LDAP_INVALID_DN_SYNTAX = 0x22,LDAP_IS_LEAF = 0x23,LDAP_ALIAS_DEREF_PROBLEM = 0x24,LDAP_INAPPROPRIATE_AUTH = 0x30,LDAP_INVALID_CREDENTIALS = 0x31,LDAP_INSUFFICIENT_RIGHTS = 0x32,LDAP_BUSY = 0x33,LDAP_UNAVAILABLE = 0x34,LDAP_UNWILLING_TO_PERFORM = 0x35,LDAP_LOOP_DETECT = 0x36,LDAP_NAMING_VIOLATION = 0x40,LDAP_OBJECT_CLASS_VIOLATION = 0x41,LDAP_NOT_ALLOWED_ON_NONLEAF = 0x42,LDAP_NOT_ALLOWED_ON_RDN = 0x43,LDAP_ALREADY_EXISTS = 0x44,LDAP_NO_OBJECT_CLASS_MODS = 0x45,LDAP_RESULTS_TOO_LARGE = 0x46,LDAP_AFFECTS_MULTIPLE_DSAS = 0x47,LDAP_OTHER = 0x50,LDAP_SERVER_DOWN = 0x51,LDAP_LOCAL_ERROR = 0x52,LDAP_ENCODING_ERROR = 0x53,LDAP_DECODING_ERROR = 0x54,LDAP_TIMEOUT = 0x55,LDAP_AUTH_UNKNOWN = 0x56,LDAP_FILTER_ERROR = 0x57,LDAP_USER_CANCELLED = 0x58,LDAP_PARAM_ERROR = 0x59,LDAP_NO_MEMORY = 0x5A,LDAP_CONNECT_ERROR = 0x5B,LDAP_NOT_SUPPORTED = 0x5C,LDAP_NO_RESULTS_RETURNED = 0x5E,LDAP_CONTROL_NOT_FOUND = 0x5D,LDAP_MORE_RESULTS_TO_RETURN = 0x5F,LDAP_CLIENT_LOOP = 0x60,LDAP_REFERRAL_LIMIT_EXCEEDED = 0x61,};
struct _5687B37E6A0F56297A2BB22AF6770AC6 {int fShowAllObjects : 1;int fShowExtensions : 1;int fNoConfirmRecycle : 1;int fShowSysFiles : 1;int fShowCompColor : 1;int fDoubleClickInWebView : 1;int fDesktopHTML : 1;int fWin95Classic : 1;int fDontPrettyPath : 1;int fShowAttribCol : 1;int fMapNetDrvBtn : 1;int fShowInfoTip : 1;int fHideIcons : 1;unsigned int fRestFlags : 3;};
union _57C85DECF0FD0199FAFF37B7119884AE {unsigned short _W[5];float _F;double _D;long double _L;};
enum _5BA8699F8741A720A1AB2749ED431340 {SetupFileLogSourceFilename = 0x0,SetupFileLogChecksum = 0x1,SetupFileLogDiskTagfile = 0x2,SetupFileLogDiskDescription = 0x3,SetupFileLogOtherInfo = 0x4,SetupFileLogMax = 0x5,};
enum _5BB8D3BA9D9883BD9C02B252C232FB44 {SQLOLERep_Unknown = 0x100,SQLOLERep_LogBased = 0x1,SQLOLERep_ManualFilterProc = 0x2,SQLOLERep_LogBasedManualFilterProc = 0x3,SQLOLERep_ManualSyncView = 0x4,SQLOLERep_LogBasedManualSyncView = 0x5,SQLOLERep_LogBasedManualBoth = 0x7,SQLOLERep_Valid = 0x7,};
enum _5D36364CC1C3A504756EDD19BD556A35 {IDX_PASSWORD = 0x0,MBXDATA_PROP_COUNT = 0x1,};
enum _5E1E73E39030074B9246C87C124F2111 {KSPROPERTY_QUALITY_REPORT = 0x0,};
struct _61B889227CECAFED4E8A477D21B34BC9 {unsigned short reserved : 14;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;short cfFormat;};
struct _62EC1DAD6DB92F8723AD0A50B2259449 {unsigned char *UserName;unsigned char *ComputerName;unsigned short Privilege;unsigned int AuthFlags;};
enum _632B66A9D7130349A03EF30A1CC9533A {FILTERSPECV4 = 0x1,FILTERSPECV6 = 0x2,FILTERSPECV6_FLOW = 0x3,FILTERSPECV4_GPI = 0x4,FILTERSPECV6_GPI = 0x5,FILTERSPEC_END = 0x6,};
enum _67718A78AE86034E0FDA9E159B7F39CF {SQLOLEDBStat_Normal = 0x0,SQLOLEDBStat_Loading = 0x20,SQLOLEDBStat_Recovering = 0xC0,SQLOLEDBStat_Suspect = 0x100,SQLOLEDBStat_Offline = 0x200,SQLOLEDBStat_Inaccessible = 0x3E0,SQLOLEDBStat_EmergencyMode = 0x8000,SQLOLEDBStat_All = 0x83E0,};
struct _683A376D3D72D8A4C1C01AE0B36D8AA2 {unsigned int W[4];};
enum _68C893AC38C567F76FBEA67C49572CB7 {SQLOLEObjSort_Name = 0x0,SQLOLEObjSort_Type = 0x1,SQLOLEObjSort_Owner = 0x2,SQLOLEObjSort_Date = 0x3,};
enum _6D08AF020E88675B59174822EC55B914 {KSEVENT_CLOCK_INTERVAL_MARK = 0x0,KSEVENT_CLOCK_POSITION_MARK = 0x1,};
enum _6D73FF0D610B6630DEA088FE300A9A76 {SQLOLESrvUserProf_None = 0x0,SQLOLESrvUserProf_SaLogin = 0x1,SQLOLESrvUserProf_CreateDatabase = 0x2,SQLOLESrvUserProf_CreateXP = 0x4,SQLOLESrvUserProf_AllProfileBits = 0x7,};
enum _6DAD80B3977302E5EA3CDCFB6538A59F {KSMETHOD_STREAMALLOCATOR_ALLOC = 0x0,KSMETHOD_STREAMALLOCATOR_FREE = 0x1,};
enum _6DB5DE90781BF57D609B50B4D29B6B8B {SQLOLESubSync_Unknown = 0x3E8,SQLOLESubSync_Min = 0x0,SQLOLESubSync_Manual = 0x0,SQLOLESubSync_Auto = 0x1,SQLOLESubSync_Default = 0x1,SQLOLESubSync_None = 0x2,SQLOLESubSync_Max = 0x2,};
enum _6DC56AAB304957BC9D3606A0F1B62D39 {ACSLAN_STATUS_COMMAND_ACCEPTED = 0x0,ACSLAN_STATUS_INVALID_CCB_POINTER = 0x1,ACSLAN_STATUS_CCB_IN_ERROR = 0x2,ACSLAN_STATUS_CHAINED_CCB_IN_ERROR = 0x3,ACSLAN_STATUS_SYSTEM_ERROR = 0x4,ACSLAN_STATUS_SYSTEM_STATUS = 0x5,ACSLAN_STATUS_INVALID_COMMAND = 0x6,};
enum _6F9F41060DD80647953DB726CA7F25E7 {KS_SEEKING_NoPositioning = 0x0,KS_SEEKING_AbsolutePositioning = 0x1,KS_SEEKING_RelativePositioning = 0x2,KS_SEEKING_IncrementalPositioning = 0x3,KS_SEEKING_PositioningBitsMask = 0x3,KS_SEEKING_SeekToKeyFrame = 0x4,KS_SEEKING_ReturnTime = 0x8,};
enum _6FB945646DCDC979B45A0864DF90F90A {SHREGDEL_DEFAULT = 0x0,SHREGDEL_HKCU = 0x1,SHREGDEL_HKLM = 0x10,SHREGDEL_BOTH = 0x11,};
enum _71DB154D1671C30C9D80722DE394F922 {SQLOLEConn_LastState = 0x1,SQLOLEConn_CurrentState = 0x2,SQLOLEConn_ReconnectIfDead = 0x6,SQLOLEConn_Valid = 0x7,};
struct _72295A7541EC936D47FC3642EE72298B {unsigned short W[5];};
enum _72442BC1633A72B4A848039868482DB7 {triUnchecked = 0x0,triChecked = 0x1,triGray = 0x2,};
enum _729DCE355D7523E6CA017E6077BAB356 {KSPROPERTY_TOPOLOGY_CATEGORIES = 0x0,KSPROPERTY_TOPOLOGY_NODES = 0x1,KSPROPERTY_TOPOLOGY_CONNECTIONS = 0x2,KSPROPERTY_TOPOLOGY_NAME = 0x3,};
enum _74C8A70E38C6290854EB8681903412E2 {SQLOLEFreqRel_Unknown = 0x0,SQLOLEFreqRel_First = 0x1,SQLOLEFreqRel_Second = 0x2,SQLOLEFreqRel_Third = 0x4,SQLOLEFreqRel_Fourth = 0x8,SQLOLEFreqRel_Last = 0x10,SQLOLEFreqRel_Valid = 0x1F,};
enum _7664F704ABC67D45E5B7F4DA451346F1 {SQLOLEScript_Default = 0x4,SQLOLEScript_Drops = 0x1,SQLOLEScript_ObjectPermissions = 0x2,SQLOLEScript_PrimaryObject = 0x4,SQLOLEScript_ClusteredIndexes = 0x8,SQLOLEScript_Triggers = 0x10,SQLOLEScript_DatabasePermissions = 0x20,SQLOLEScript_Permissions = 0x22,SQLOLEScript_ToFileOnly = 0x40,SQLOLEScript_Bindings = 0x80,SQLOLEScript_AppendToFile = 0x100,SQLOLEScript_NoDRI = 0x200,SQLOLEScript_UDDTsToBaseType = 0x400,SQLOLEScript_42Syntax = 0x800,SQLOLEScript_ODBCSyntax = 0xE00,SQLOLEScript_IncludeIfNotExists = 0x1000,SQLOLEScript_NonClusteredIndexes = 0x2000,SQLOLEScript_Indexes = 0x12008,SQLOLEScript_Aliases = 0x4000,SQLOLEScript_NoCommandTerm = 0x8000,SQLOLEScript_DRIIndexes = 0x10000,SQLOLEScript_IncludeHeaders = 0x20000,SQLOLEScript_OwnerQualify = 0x40000,SQLOLEScript_TimestampToBinary = 0x80000,SQLOLEScript_SortedData = 0x100000,SQLOLEScript_SortedDataReorg = 0x200000,SQLOLEScript_TransferDefault = 0x670FF,SQLOLEScript_DRI_NonClustered = 0x400000,SQLOLEScript_DRI_Clustered = 0x800000,SQLOLEScript_DRI_Checks = 0x1000000,SQLOLEScript_DRI_Defaults = 0x2000000,SQLOLEScript_DRI_UniqueKeys = 0x4000000,SQLOLEScript_DRI_ForeignKeys = 0x8000000,SQLOLEScript_DRI_PrimaryKey = 0x10000000,SQLOLEScript_DRI_AllKeys = 0x1C000000,SQLOLEScript_DRI_AllConstraints = 0x1F000000,SQLOLEScript_DRI_All = 0x1FC00000,SQLOLEScript_DRIWithNoCheck = 0x20000000,SQLOLEScript_NoIdentity = 0x40000000,SQLOLEScript_UseQuotedIdentifiers = 0x80000000,};
enum _7A041642E677561B10EFDE79481847F2 {AM_PROPERTY_AC3_ERROR_CONCEALMENT = 0x1,AM_PROPERTY_AC3_ALTERNATE_AUDIO = 0x2,AM_PROPERTY_AC3_DOWNMIX = 0x3,AM_PROPERTY_AC3_BIT_STREAM_MODE = 0x4,AM_PROPERTY_AC3_DIALOGUE_LEVEL = 0x5,AM_PROPERTY_AC3_LANGUAGE_CODE = 0x6,AM_PROPERTY_AC3_ROOM_TYPE = 0x7,};
struct _7ADE47B00230EF5EBD78FEDFCEB95499 {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fDeferUpd : 1;unsigned short fAckReq : 1;short cfFormat;};
enum _7B52FA00EE202F4C4B756F96ECB31DD6 {SQLOLEPerfmon_None = 0x3E8,SQLOLEPerfmon_MinSet = 0x0,SQLOLEPerfmon_Continuous = 0x0,SQLOLEPerfmon_OnDemand = 0x1,SQLOLEPerfmon_MaxSet = 0x1,};
enum _7D6175C22EDABD4AD0E004E4A00D671E {SQLOLEObj_Unknown = 0x4000,SQLOLEObj_Application = 0x0,SQLOLEObj_UserDefinedDatatype = 0x1,SQLOLEObj_SystemTable = 0x2,SQLOLEObj_View = 0x4,SQLOLEObj_UserTable = 0x8,SQLOLEObj_StoredProcedure = 0x10,SQLOLEObj_Default = 0x40,SQLOLEObj_Rule = 0x80,SQLOLEObj_Trigger = 0x100,SQLOLEObj_AllDatabaseUserObjects = 0x1FD,SQLOLEObj_AllDatabaseObjects = 0x1FF,SQLOLEObj_SystemDatatype = 0x2725,SQLOLEObj_User = 0x2726,SQLOLEObj_Group = 0x2727,SQLOLEObj_Index = 0x2728,SQLOLEObj_Key = 0x2729,SQLOLEObj_Column = 0x272A,SQLOLEObj_DBObject = 0x272B,SQLOLEObj_DBOption = 0x272C,SQLOLEObj_ProcedureParameter = 0x272D,SQLOLEObj_Permission = 0x2731,SQLOLEObj_IntegratedSecurity = 0x2732,SQLOLEObj_Check = 0x2733,SQLOLEObj_DRIDefault = 0x2734,SQLOLEObj_SQLServer = 0x2742,SQLOLEObj_Database = 0x2743,SQLOLEObj_Device = 0x2744,SQLOLEObj_Login = 0x2746,SQLOLEObj_Language = 0x2747,SQLOLEObj_RemoteServer = 0x2748,SQLOLEObj_RemoteLogin = 0x2749,SQLOLEObj_Configuration = 0x274B,SQLOLEObj_ConfigValue = 0x274C,SQLOLEObj_AlertSystem = 0x274D,SQLOLEObj_Executive = 0x274E,SQLOLEObj_QueryResults = 0x274F,SQLOLEObj_TransactionLog = 0x2750,SQLOLEObj_Registry = 0x2751,SQLOLEObj_Transfer = 0x2752,SQLOLEObj_Backup = 0x2753,SQLOLEObj_Task = 0x2754,SQLOLEObj_Alert = 0x2755,SQLOLEObj_Operator = 0x2756,SQLOLEObj_HistoryFilter = 0x2757,SQLOLEObj_Publication = 0x2758,SQLOLEObj_Article = 0x2759,SQLOLEObj_Subscription = 0x275A,SQLOLEObj_SubscriberInfo = 0x275B,SQLOLEObj_AutoProperty = 0x275C,SQLOLEObj_ServerGroup = 0x275D,SQLOLEObj_RegisteredServer = 0x275E,SQLOLEObj_BulkCopy = 0x275F,};
enum _7FBDC45E152D142A058D5B6E187D632B {SQLOLEFreqSub_Unknown = 0x0,SQLOLEFreqSub_Once = 0x1,SQLOLEFreqSub_Minute = 0x4,SQLOLEFreqSub_Hour = 0x8,SQLOLEFreqSub_Valid = 0xD,};
enum _803011E51B5E478693461E1C7C3C8425 {SQLOLEDep_Parents = 0x0,SQLOLEDep_FullHierarchy = 0x10000,SQLOLEDep_OrderDescending = 0x20000,SQLOLEDep_Children = 0x40000,SQLOLEDep_ReturnInputObject = 0x80000,SQLOLEDep_FirstLevelOnly = 0x100000,SQLOLEDep_DRIOnly = 0x200000,SQLOLEDep_Valid = 0x3F0000,};
enum _810103D2840B7FD967840B86193DEF94 {TVX_CONTROL_GENERIC = 0x0,TVX_CONTROL_EPG = 0x1,TVX_CONTROL_FSVIDEO = 0x2,TVX_CONTROL_NUM_OF_TYPES = 0x3,};
enum _810BCDBA5BCB17F35A1EBA0E4BF76392 {MES_ENCODE = 0x0,MES_DECODE = 0x1,};
enum _819CCC2F5A6039AE91021E07B1C0B9A0 {SQLOLE_E_DBLIBFIRSTERROR = 0x2710,SQLOLE_E_DBLIBLASTERROR = 0x27D8,SQLOLE_E_FIRSTERROR = 0x5000,SQLOLE_ECAT_MASK = 0x5F00,SQLOLE_ECAT_INVALIDCONTEXT = 0x5000,SQLOLE_E_ALREADYCONN = 0x5000,SQLOLE_E_ALREADYCOLL = 0x5001,SQLOLE_E_NOTCONN = 0x5002,SQLOLE_E_CANTDROPSERVER = 0x5003,SQLOLE_E_NOCOMPLEXALTER = 0x5004,SQLOLE_E_PROPNEEDSCREATE = 0x5005,SQLOLE_E_COLTYPEFIXED = 0x5006,SQLOLE_E_COLTYPENONNULL = 0x5007,SQLOLE_E_CANTCHANGEUDDT = 0x5008,SQLOLE_E_BASETYPEFIXED = 0x5009,SQLOLE_E_BASETYPENONNULL = 0x500A,SQLOLE_E_ENUMORDINAL = 0x500B,SQLOLE_E_CANTRENAMEUSER = 0x500C,SQLOLE_E_CANTRENAMEGROUP = 0x500D,SQLOLE_E_CANTRENAMELOGIN = 0x500E,SQLOLE_E_CANTRENAMEDEVICE = 0x500F,SQLOLE_E_NOTDUMPPROP = 0x5010,SQLOLE_E_NOSERVERASSOC = 0x5011,SQLOLE_E_NOTCOLLTYPE = 0x5012,SQLOLE_E_CANTMODIFYDRIINDEX = 0x5013,SQLOLE_E_CANTCHANGEPROCTYPE = 0x5014,SQLOLE_E_CANTMODIFYINDEX = 0x5015,SQLOLE_E_INVALIDPRIVOBJ = 0x5016,SQLOLE_E_CANTCHANGETRIGTYPE = 0x5017,SQLOLE_E_NOVIEWCOLALTER = 0x5018,SQLOLE_E_CANTRENAMELANGUAGE = 0x5019,SQLOLE_E_CANTRENAMERSERVER = 0x501A,SQLOLE_E_CANTRENAMERLOGIN = 0x501B,SQLOLE_E_MUSTBEDBDEV = 0x501C,SQLOLE_E_NOINACTIVEMIRROR = 0x501D,SQLOLE_E_NOACTIVEMIRROR = 0x501E,SQLOLE_E_NOMIRROR = 0x501F,SQLOLE_E_SERVERDISCONNECTED = 0x5020,SQLOLE_E_CANTRENAMESERVER = 0x5021,SQLOLE_E_CANTMODIFYTEXT = 0x5022,SQLOLE_E_CANTMODIFYSYSTABLE = 0x5023,SQLOLE_E_LOGINALREADYALIASED = 0x5024,SQLOLE_E_LOGINALREADYUSER = 0x5025,SQLOLE_E_CACHENORESULTS = 0x5026,SQLOLE_E_ALREADYCREATED = 0x5027,SQLOLE_E_NOTDISCONN = 0x5028,SQLOLE_E_CANTMODIFYARTTABLE = 0x5029,SQLOLE_E_CANTMODIFYSUBSERVER = 0x502A,SQLOLE_E_BASETYPENOTNUMERIC = 0x502B,SQLOLE_E_TOFILEBUTNOFILENAME = 0x502C,SQLOLE_E_MUSTBEDISTSERVER = 0x502D,SQLOLE_E_CANTMODIFYKEY = 0x502E,SQLOLE_E_LISTCANTREFRESH = 0x502F,SQLOLE_E_NOCOLTABLE = 0x5030,SQLOLE_E_MUSTBEINALTER = 0x5031,SQLOLE_E_CANTUNDEDICATELOGDEVICE = 0x5032,SQLOLE_E_CANTRENAMESERVERGROUP = 0x5033,SQLOLE_E_CANTRENAMEREGISTEREDSERVER = 0x5034,SQLOLE_E_INDEXREBUILDKEYTYPE = 0x5035,SQLOLE_E_REBUILDINDEXOPTIONS = 0x5036,SQLOLE_E_IMPERSONATEXPONLY = 0x5037,SQLOLE_ECAT_INVALIDOBJECT = 0x5100,SQLOLE_E_OBJECTDROPPED = 0x5100,SQLOLE_E_NOTSQLOLEOBJECT = 0x5101,SQLOLE_E_OBJECTDETACHED = 0x5102,SQLOLE_E_SERVERCLOSED = 0x5103,SQLOLE_ECAT_INVALIDOBJECTDEFINITION = 0x5200,SQLOLE_E_NOCOLUMNSADDED = 0x5200,SQLOLE_E_COLUMNINCOMPLETE = 0x5201,SQLOLE_E_TABLEINCOMPLETE = 0x5202,SQLOLE_E_UDDTINCOMPLETE = 0x5203,SQLOLE_E_RULEINCOMPLETE = 0x5204,SQLOLE_E_DEFAULTINCOMPLETE = 0x5205,SQLOLE_E_VIEWINCOMPLETE = 0x5206,SQLOLE_E_USERINCOMPLETE = 0x5207,SQLOLE_E_GROUPINCOMPLETE = 0x5208,SQLOLE_E_PROCINCOMPLETE = 0x5209,SQLOLE_E_USERALREADYEXISTS = 0x520A,SQLOLE_E_GROUPALREADYEXISTS = 0x520B,SQLOLE_E_COLUMNALREADYEXISTS = 0x520C,SQLOLE_E_OBJECTALREADYEXISTS = 0x520D,SQLOLE_E_INDEXALREADYEXISTS = 0x520E,SQLOLE_E_DBALREADYEXISTS = 0x520F,SQLOLE_E_LOGINALREADYEXISTS = 0x5210,SQLOLE_E_DEVICEALREADYEXISTS = 0x5211,SQLOLE_E_SKIPONLYTAPE = 0x5212,SQLOLE_E_DEVICEINCOMPLETE = 0x5213,SQLOLE_E_PROCALREADYEXISTS = 0x5214,SQLOLE_E_UDDTALREADYEXISTS = 0x5215,SQLOLE_E_TABLEALREADYEXISTS = 0x5216,SQLOLE_E_RULEALREADYEXISTS = 0x5217,SQLOLE_E_DEFAULTALREADYEXISTS = 0x5218,SQLOLE_E_VIEWALREADYEXISTS = 0x5219,SQLOLE_E_INDEXINCOMPLETE = 0x521A,SQLOLE_E_TRIGINCOMPLETE = 0x521B,SQLOLE_E_TRIGALREADYEXISTS = 0x521C,SQLOLE_E_LANGUAGEINCOMPLETE = 0x521D,SQLOLE_E_LANGUAGEALREADYEXISTS = 0x521E,SQLOLE_E_LOGININCOMPLETE = 0x521F,SQLOLE_E_RSERVERINCOMPLETE = 0x5220,SQLOLE_E_RSERVERALREADYEXISTS = 0x5221,SQLOLE_E_NULLRLOGINALREADYEXISTS = 0x5222,SQLOLE_E_RLOGINALREADYEXISTS = 0x5223,SQLOLE_E_REMOTENEEDSLOCAL = 0x5224,SQLOLE_E_BACKUPNEEDSDEVICE = 0x5225,SQLOLE_E_NEEDMANUALFILTERNAME = 0x5226,SQLOLE_E_TASKINCOMPLETE = 0x5227,SQLOLE_E_ARTINCOMPLETE = 0x5228,SQLOLE_E_PUBINCOMPLETE = 0x5229,SQLOLE_E_SUBINCOMPLETE = 0x522A,SQLOLE_E_ALERTINCOMPLETE = 0x522B,SQLOLE_E_OPERATORINCOMPLETE = 0x522C,SQLOLE_E_NAMEMUSTMATCH = 0x522D,SQLOLE_E_TRIGREQTABLENAME = 0x522E,SQLOLE_E_MUSTBESYNCTASK = 0x522F,SQLOLE_E_NOEVENTCOMPLETION = 0x5230,SQLOLE_E_FKEYINCOMPLETE = 0x5231,SQLOLE_E_KEYINCOMPLETE = 0x5232,SQLOLE_E_KEYALREADYEXISTS = 0x5233,SQLOLE_E_CHECKINCOMPLETE = 0x5234,SQLOLE_E_DRIDEFAULTINCOMPLETE = 0x5235,SQLOLE_E_CHECKALREADYEXISTS = 0x5236,SQLOLE_E_ONLYONEPRIMARYKEY = 0x5237,SQLOLE_E_NEEDMANUALVIEWNAME = 0x5238,SQLOLE_E_SERVERGROUPINCOMPLETE = 0x5239,SQLOLE_E_REGISTEREDSERVERINCOMPLETE = 0x523A,SQLOLE_E_SERVERGROUPALREADYEXISTS = 0x523B,SQLOLE_E_REGISTEREDSERVERALREADYEXISTS = 0x523C,SQLOLE_E_NEEDLOADTABLENAME = 0x523D,SQLOLE_ECAT_INVALIDPARAMETER = 0x5300,SQLOLE_E_BADCOLLEN = 0x5300,SQLOLE_E_INVALIDPERFMONSET = 0x5301,SQLOLE_E_BADDEVICETYPE = 0x5302,SQLOLE_E_SIZEGREATERTHAN0 = 0x5303,SQLOLE_E_RESULTSETOUTOFRANGE = 0x5304,SQLOLE_E_OUTPUTPARAMREQUIRED = 0x5305,SQLOLE_E_PROPTEXTNONNULL = 0x5306,SQLOLE_E_BADPROCTYPE = 0x5307,SQLOLE_E_BADFILLFACTOR = 0x5308,SQLOLE_E_INVALIDINDEXTYPE = 0x5309,SQLOLE_E_INVALIDPRIVTYPE = 0x530A,SQLOLE_E_BADTRIGTYPE = 0x530B,SQLOLE_E_INVALIDDAYOFWEEK = 0x530C,SQLOLE_E_INVALIDMONTH = 0x530D,SQLOLE_E_BADDAYCOUNT = 0x530E,SQLOLE_E_BADMONTHCOUNT = 0x530F,SQLOLE_E_BADCONFIGVALUE = 0x5310,SQLOLE_E_INVALIDPARAMINDEX = 0x5311,SQLOLE_E_INVALIDPARAMRANGE = 0x5312,SQLOLE_E_INVALIDDBOBJTYPE = 0x5313,SQLOLE_E_ROWCOLOUTOFRANGE = 0x5314,SQLOLE_E_NONUNIQUENAME = 0x5315,SQLOLE_E_NOTIMESTAMPUDDT = 0x5316,SQLOLE_E_INVALIDNAME = 0x5317,SQLOLE_E_INVALIDCOMPLETION = 0x5318,SQLOLE_E_NAMETOOLONG = 0x5319,SQLOLE_E_INVALIDFREQTYPE = 0x531A,SQLOLE_E_INVALIDFREQSUBDAY = 0x531B,SQLOLE_E_INVALIDFREQRELINTERVAL = 0x531C,SQLOLE_E_BADWEEKLYINTERVAL = 0x531D,SQLOLE_E_BADMONTHLYINTERVAL = 0x531E,SQLOLE_E_BADMONTHLYRELINTERVAL = 0x531F,SQLOLE_E_INVALIDSRVOPTION = 0x5320,SQLOLE_E_INVALIDRUNPRIORITY = 0x5321,SQLOLE_E_DBNAMEREQUIRED = 0x5322,SQLOLE_E_PUBNAMEREQUIRED = 0x5323,SQLOLE_E_PROPINDEXOUTOFRANGE = 0x5324,SQLOLE_E_INVALIDNOTIFYTYPE = 0x5325,SQLOLE_E_INVALIDENUMNOTIFYTYPE = 0x5326,SQLOLE_E_INVALIDWEEKDAY = 0x5327,SQLOLE_E_INVALIDOBJECTTYPE = 0x5328,SQLOLE_E_OBJECTREQUIRED = 0x5329,SQLOLE_E_INVALIDEVENTTYPE = 0x532A,SQLOLE_E_INVALIDCOMPLETIONTYPE = 0x532B,SQLOLE_E_INVALIDKEYTYPE = 0x532C,SQLOLE_E_TABLEMUSTBECREATED = 0x532D,SQLOLE_E_INVALIDPREARTICLE = 0x532E,SQLOLE_E_INVALIDSECURITYMODE = 0x532F,SQLOLE_E_INVALIDPREC = 0x5330,SQLOLE_E_INVALIDDEPENDENCYTYPE = 0x5331,SQLOLE_E_INVALIDVERIFYCONNTYPE = 0x5332,SQLOLE_E_INVALIDSTATUSINFOTYPE = 0x5333,SQLOLE_E_INVALIDFORWARDINGSEVERITY = 0x5334,SQLOLE_E_INVALIDFORWARDINGSERVER = 0x5335,SQLOLE_E_INVALIDRESTARTINTERVAL = 0x5336,SQLOLE_E_INVALIDHISTORYROWSMAX = 0x5337,SQLOLE_E_NAMETOOSHORT = 0x5338,SQLOLE_E_UNEXPECTED = 0x5339,SQLOLE_E_INVALIDHISTORYROWSPERTASKMAX = 0x533A,SQLOLE_E_INVALIDOBJSORTTYPE = 0x533B,SQLOLE_E_INVALIDEXECTYPE = 0x533C,SQLOLE_ECAT_INVALIDPLATFORM = 0x5400,SQLOLE_E_BACKUPSQL60ONLY = 0x5400,SQLOLE_E_MSSQLONLY = 0x5401,SQLOLE_E_WIN95REQUIRESCONN = 0x5402,SQLOLE_E_NOTONWIN95 = 0x5403,SQLOLE_E_SQL60ONLY = 0x5404,SQLOLE_E_REPLSQL60ONLY = 0x5405,SQLOLE_E_STARTUPPROCSQL60ONLY = 0x5406,SQLOLE_E_NEEDSQLOLEPROCS = 0x5407,SQLOLE_E_ALTERSQL60ONLY = 0x5408,SQLOLE_E_SORTEDDATAREORGSQL60ONLY = 0x5409,SQLOLE_E_MSSQLNTONLY = 0x540A,SQLOLE_E_WIN95REQUIRESSQL60 = 0x540B,SQLOLE_E_BACKUPSQL65ONLY = 0x540C,SQLOLE_E_SQL65ONLY = 0x540D,SQLOLE_E_ALERTSQL65ONLY = 0x540E,SQLOLE_E_REMOTESQL65ONLY = 0x540F,SQLOLE_E_PIPEDEVSQL60ONLY = 0x5410,SQLOLE_E_FKEYSQL65ONLY = 0x5411,SQLOLE_E_XPIMPERSONATESQL65ONLY = 0x5412,SQLOLE_ECAT_ITEMNOTFOUND = 0x5500,SQLOLE_E_RULENOTFOUND = 0x5500,SQLOLE_E_DEFAULTNOTFOUND = 0x5501,SQLOLE_E_TYPENOTFOUND = 0x5502,SQLOLE_E_LOGINNOTFOUND = 0x5503,SQLOLE_E_GROUPNOTFOUND = 0x5504,SQLOLE_E_LANGNOTFOUND = 0x5505,SQLOLE_E_DBNOTFOUND = 0x5506,SQLOLE_E_DEVICENOTFOUND = 0x5507,SQLOLE_E_COLUMNNOTFOUND = 0x5508,SQLOLE_E_ORDOUTOFRANGE = 0x5509,SQLOLE_E_NAMENOTFOUND = 0x550A,SQLOLE_E_USERNOTFOUND = 0x550B,SQLOLE_E_NAMENOTINCACHE = 0x550C,SQLOLE_E_PROPNAMENOTFOUND = 0x550D,SQLOLE_E_IDNOTFOUND = 0x550E,SQLOLE_ECAT_UNPRIVILEGEDLOGIN = 0x5600,SQLOLE_E_MUSTBESAORDBO = 0x5600,SQLOLE_E_MUSTBESAORLOGIN = 0x5601,SQLOLE_E_MUSTBESA = 0x5602,SQLOLE_ECAT_EXECUTION = 0x5700,SQLOLE_E_SYSPROCERROR = 0x5700,SQLOLE_E_CACHEEXECERROR = 0x5701,SQLOLE_E_INACCESSIBLEDB = 0x5702,SQLOLE_E_BATCHCOMPLETEWITHERRORS = 0x5703,SQLOLE_ECAT_CONNECTION = 0x5800,SQLOLE_E_CANTRECONNDEADCONN = 0x5800,SQLOLE_ECAT_RESOURCE = 0x5900,SQLOLE_E_OUTOFMEMORY = 0x5900,SQLOLE_E_NOMOREDEVNOS = 0x5901,SQLOLE_ECAT_TRANSFER = 0x5A00,SQLOLE_E_USERABORTED = 0x5A00,SQLOLE_E_FILEPATHREQUIRED = 0x5A01,SQLOLE_ECAT_BCP = 0x5B00,SQLOLE_E_INCOMPATIBLEPROPS = 0x5B00,SQLOLE_E_BCPEXECFAILED = 0x5B01,SQLOLE_E_BCPINITFAILED = 0x5B02,SQLOLE_E_BCPCONTROLFAILED = 0x5B03,SQLOLE_E_BCPCOLFMTFAILED = 0x5B04,SQLOLE_E_SUSPENDINDEX = 0x5B05,SQLOLE_E_RESUMEINDEX = 0x5B06,SQLOLE_E_LASTERROR = 0x5AFF,};
enum _861DD39FC4CEDEF9FD3B0ECFEB4EA61F {KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0x0,KSEVENT_STREAMALLOCATOR_FREEFRAME = 0x1,};
enum _8AF783F14E88CD65246D8216CEBAA459 {SQLOLEComp_Unknown = 0x1000,SQLOLEComp_None = 0x0,SQLOLEComp_Success = 0x1,SQLOLEComp_Failure = 0x2,SQLOLEComp_Always = 0x3,SQLOLEComp_Running = 0x4,SQLOLEComp_Aborted = 0x8,SQLOLEComp_Skipped = 0x10,SQLOLEComp_All = 0x1F,};
enum _8C57D1DDA788D6050A7C554DBD1EB1AC {AddrMode1616 = 0x0,AddrMode1632 = 0x1,AddrModeReal = 0x2,AddrModeFlat = 0x3,};
enum _8F00D86C453A25D588E012916CBB9FA9 {OP_AND = 0x3,OP_OR = 0x2,};
enum _90913C78F6CA6F56CF6907A05EF6F9B8 {SQLOLESrvOpt_Unknown = 0x0,SQLOLESrvOpt_RPC = 0x1,SQLOLESrvOpt_Publisher = 0x2,SQLOLESrvOpt_Subscriber = 0x4,SQLOLESrvOpt_Distributor = 0x8,SQLOLESrvOpt_DistPublisher = 0x10,SQLOLESrvOpt_ODBCDatasource = 0x20,SQLOLESrvOpt_Valid = 0x3F,};
struct _923DA7BE11DCB482D02B0566D8DB27AB {unsigned short bAppReturnCode : 8;unsigned short reserved : 6;unsigned short fBusy : 1;unsigned short fAck : 1;};
enum _92E343B9497C79C1DA0A7F8171886153 {INTERNET_SCHEME_PARTIAL = 0xFFFFFFFE,INTERNET_SCHEME_UNKNOWN = 0xFFFFFFFF,INTERNET_SCHEME_DEFAULT = 0x0,INTERNET_SCHEME_FTP = 0x1,INTERNET_SCHEME_GOPHER = 0x2,INTERNET_SCHEME_HTTP = 0x3,INTERNET_SCHEME_HTTPS = 0x4,INTERNET_SCHEME_FILE = 0x5,INTERNET_SCHEME_NEWS = 0x6,INTERNET_SCHEME_MAILTO = 0x7,INTERNET_SCHEME_SOCKS = 0x8,INTERNET_SCHEME_FIRST = 0x1,INTERNET_SCHEME_LAST = 0x8,};
enum _936C2FE519B675B2E022D90168411006 {SQLOLEMirror_None = 0x0,SQLOLEMirror_Inactive = 0x40,SQLOLEMirror_RunningOnMirror = 0x140,SQLOLEMirror_Active = 0x240,};
enum _949C6DE7E35D61EB41F69899473EA56C {NameUnknown = 0x0,NameFullyQualifiedDN = 0x1,NameSamCompatible = 0x2,NameDisplay = 0x3,NameDomainSimple = 0x4,NameEnterpriseSimple = 0x5,NameUniqueId = 0x6,NameCanonical = 0x7,};
enum _95C7AEA25925C6A7B486469C0CA30401 {SQLOLEIndex_Default = 0x0,SQLOLEIndex_IgnoreDupKey = 0x1,SQLOLEIndex_Unique = 0x2,SQLOLEIndex_IgnoreDupRow = 0x4,SQLOLEIndex_Clustered = 0x10,SQLOLEIndex_AllowDupRow = 0x40,SQLOLEIndex_SortedData = 0x200,SQLOLEIndex_SortedDataReorg = 0x2000,SQLOLEIndex_Valid = 0x2257,SQLOLEIndex_DRIPrimaryKey = 0x800,SQLOLEIndex_DRIUniqueKey = 0x1000,SQLOLEIndex_DRIIndex = 0x1800,};
enum _96F7A58B68CC258820CDC3DFD29FE008 {IDX_PUBLIC_TOPIC_FOLDER = 0x0,IDX_POLL_INBOX_MSEC = 0x1,IDX_ACL_RIGHTS = 0x2,IDX_TOPIC_ROOT_FOLDER_NAME = 0x3,IDX_TOPIC_ROOT_FOLDER_COMMENT = 0x4,SMBDATA_PROP_COUNT = 0x5,};
enum _973D6FE86EA20EE140FCFE92BAEE2448 {KSPROPERTY_PIN_CINSTANCES = 0x0,KSPROPERTY_PIN_CTYPES = 0x1,KSPROPERTY_PIN_DATAFLOW = 0x2,KSPROPERTY_PIN_DATARANGES = 0x3,KSPROPERTY_PIN_DATAINTERSECTION = 0x4,KSPROPERTY_PIN_INTERFACES = 0x5,KSPROPERTY_PIN_MEDIUMS = 0x6,KSPROPERTY_PIN_COMMUNICATION = 0x7,KSPROPERTY_PIN_GLOBALCINSTANCES = 0x8,KSPROPERTY_PIN_NECESSARYINSTANCES = 0x9,KSPROPERTY_PIN_PHYSICALCONNECTION = 0xA,KSPROPERTY_PIN_CATEGORY = 0xB,KSPROPERTY_PIN_NAME = 0xC,};
struct _97DDCABA8DED8140EC93664CC20AFA42 {unsigned int W[2];};
enum _99797C396B1D447BBE63E5346EF4FE3A {KSPIN_COMMUNICATION_NONE = 0x0,KSPIN_COMMUNICATION_SINK = 0x1,KSPIN_COMMUNICATION_SOURCE = 0x2,KSPIN_COMMUNICATION_BOTH = 0x3,KSPIN_COMMUNICATION_BRIDGE = 0x4,};
enum _9C39054F312540C7FE42E020DEAACE0C {modeTime = 0x0,modeFrames = 0x1,};
enum _9EF127759E207CC5B87425543DA97D1F {AM_PROPERTY_DVDSUBPIC_PALETTE = 0x0,AM_PROPERTY_DVDSUBPIC_HLI = 0x1,AM_PROPERTY_DVDSUBPIC_COMPOSIT_ON = 0x2,};
enum _9F310CE5EA53A2C70140B86ECB915AA4 {T_CONTAINER = 0x0,T_FOLDER = 0x1,};
enum _9FF73E7851F502F03F84204CED385180 {DBID_BANDINFOCHANGED = 0x0,DBID_SHOWONLY = 0x1,DBID_MAXIMIZEBAND = 0x2,};
enum _A3BE4B05CF77562F14E76615CA0A7487 {SQLOLESubStat_Unknown = 0x3E8,SQLOLESubStat_Default = 0x3E8,SQLOLESubStat_Min = 0x0,SQLOLESubStat_Inactive = 0x0,SQLOLESubStat_Unsynced = 0x1,SQLOLESubStat_Active = 0x2,SQLOLESubStat_Max = 0x2,};
enum _A4ED03FE42A9AAABABA9C82DE4BC07BA {SQLOLESvc_Unknown = 0x0,SQLOLESvc_Running = 0x1,SQLOLESvc_Paused = 0x2,SQLOLESvc_Stopped = 0x3,SQLOLESvc_Starting = 0x4,SQLOLESvc_Stopping = 0x5,SQLOLESvc_Continuing = 0x6,SQLOLESvc_Pausing = 0x7,};
enum _A505905B9019AA97D205795F9CD1DA04 {AM_RATE_SimpleRateChange = 0x1,AM_RATE_ExactRateChange = 0x2,AM_RATE_MaxFullDataRate = 0x3,AM_RATE_Step = 0x4,};
enum _A53018422640A123E20F3CC4D8AD31A0 {FD_CLSID = 0x1,FD_SIZEPOINT = 0x2,FD_ATTRIBUTES = 0x4,FD_CREATETIME = 0x8,FD_ACCESSTIME = 0x10,FD_WRITESTIME = 0x20,FD_FILESIZE = 0x40,FD_LINKUI = 0x8000,};
enum _A53745463A0A658E3EF7C43C13621D21 {dliStartProcessing = 0x0,dliNotePreLoadLibrary = 0x1,dliNotePreGetProcAddress = 0x2,dliFailLoadLib = 0x3,dliFailGetProc = 0x4,dliNoteEndProcessing = 0x5,};
enum _A80082A4D5E6371C89CADA5F555E3D72 {Small = 0x0,Medium = 0x1,Large = 0x2,};
enum _AAF7D8B1D740C4801D49F07692D1E0A1 {SQL_IS_YEAR = 0x1,SQL_IS_MONTH = 0x2,SQL_IS_DAY = 0x3,SQL_IS_HOUR = 0x4,SQL_IS_MINUTE = 0x5,SQL_IS_SECOND = 0x6,SQL_IS_YEAR_TO_MONTH = 0x7,SQL_IS_DAY_TO_HOUR = 0x8,SQL_IS_DAY_TO_MINUTE = 0x9,SQL_IS_DAY_TO_SECOND = 0xA,SQL_IS_HOUR_TO_MINUTE = 0xB,SQL_IS_HOUR_TO_SECOND = 0xC,SQL_IS_MINUTE_TO_SECOND = 0xD,};
struct _AD47B7B6770F26FF00FF8EF46A9765CE {unsigned int Count;unsigned int Stats[1];};
enum _ADC633718E981BBAA2F59FA41E3EE0B2 {KSINTERFACE_STANDARD_STREAMING = 0x0,KSINTERFACE_STANDARD_LOOPED_STREAMING = 0x1,KSINTERFACE_STANDARD_CONTROL = 0x2,};
enum _AE317B1E244CA87819BCECF193C2CCE0 {LogSevInformation = 0x0,LogSevWarning = 0x1,LogSevError = 0x2,LogSevFatalError = 0x3,LogSevMaximum = 0x4,};
enum _AFC6697302246711AAC432C95CBEA10F {SQLOLEPriv_Unknown = 0x0,SQLOLEPriv_Select = 0x1,SQLOLEPriv_Insert = 0x2,SQLOLEPriv_Update = 0x4,SQLOLEPriv_Delete = 0x8,SQLOLEPriv_Execute = 0x10,SQLOLEPriv_References = 0x20,SQLOLEPriv_AllObjectPrivs = 0x3F,SQLOLEPriv_CreateTable = 0x80,SQLOLEPriv_CreateDatabase = 0x100,SQLOLEPriv_CreateView = 0x200,SQLOLEPriv_CreateProcedure = 0x400,SQLOLEPriv_DumpDatabase = 0x800,SQLOLEPriv_CreateDefault = 0x1000,SQLOLEPriv_DumpTransaction = 0x2000,SQLOLEPriv_CreateRule = 0x4000,SQLOLEPriv_AllDatabasePrivs = 0x7F80,};
enum _B02EA45DA9249FCB81A2A79124C480DE {COLOR_GRAY = 0x1,COLOR_RGB = 0x2,COLOR_XYZ = 0x3,COLOR_Yxy = 0x4,COLOR_Lab = 0x5,COLOR_3_CHANNEL = 0x6,COLOR_CMYK = 0x7,COLOR_5_CHANNEL = 0x8,COLOR_6_CHANNEL = 0x9,COLOR_7_CHANNEL = 0xA,COLOR_8_CHANNEL = 0xB,COLOR_NAMED = 0xC,};
enum _B2CD58BB5E151C37D855099D3E2FDD5A {STUB_UNMARSHAL = 0x0,STUB_CALL_SERVER = 0x1,STUB_MARSHAL = 0x2,STUB_CALL_SERVER_NO_HRESULT = 0x3,};
enum _B3BBE9873D99521DD98BD039DB6D363A {AM_DVDCOPYSTATE_INITIALIZE = 0x0,AM_DVDCOPYSTATE_INITIALIZE_TITLE = 0x1,AM_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 0x2,AM_DVDCOPYSTATE_AUTHENTICATION_REQUIRED = 0x3,AM_DVDCOPYSTATE_DONE = 0x4,};
enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A {KSSTATE_STOP = 0x0,KSSTATE_ACQUIRE = 0x1,KSSTATE_PAUSE = 0x2,KSSTATE_RUN = 0x3,};
enum _B5C4BFDF5647DD76A5A7DC88A24121ED {_FpCodeUnspecified = 0x0,_FpCodeAdd = 0x1,_FpCodeSubtract = 0x2,_FpCodeMultiply = 0x3,_FpCodeDivide = 0x4,_FpCodeSquareRoot = 0x5,_FpCodeRemainder = 0x6,_FpCodeCompare = 0x7,_FpCodeConvert = 0x8,_FpCodeRound = 0x9,_FpCodeTruncate = 0xA,_FpCodeFloor = 0xB,_FpCodeCeil = 0xC,_FpCodeAcos = 0xD,_FpCodeAsin = 0xE,_FpCodeAtan = 0xF,_FpCodeAtan2 = 0x10,_FpCodeCabs = 0x11,_FpCodeCos = 0x12,_FpCodeCosh = 0x13,_FpCodeExp = 0x14,_FpCodeFabs = 0x15,_FpCodeFmod = 0x16,_FpCodeFrexp = 0x17,_FpCodeHypot = 0x18,_FpCodeLdexp = 0x19,_FpCodeLog = 0x1A,_FpCodeLog10 = 0x1B,_FpCodeModf = 0x1C,_FpCodePow = 0x1D,_FpCodeSin = 0x1E,_FpCodeSinh = 0x1F,_FpCodeTan = 0x20,_FpCodeTanh = 0x21,_FpCodeY0 = 0x22,_FpCodeY1 = 0x23,_FpCodeYn = 0x24,_FpCodeLogb = 0x25,_FpCodeNextafter = 0x26,_FpCodeNegate = 0x27,};
enum _B7D1CDF80B7CC72DADF079F75B7264FC {SymNone = 0x0,SymCoff = 0x1,SymCv = 0x2,SymPdb = 0x3,SymExport = 0x4,SymDeferred = 0x5,SymSym = 0x6,};
enum _BAED4F588FE0DC8D2F85793B08F7ABBB {KSPROPERTY_STREAM_ALLOCATOR = 0x0,KSPROPERTY_STREAM_QUALITY = 0x1,KSPROPERTY_STREAM_DEGRADATION = 0x2,KSPROPERTY_STREAM_MASTERCLOCK = 0x3,KSPROPERTY_STREAM_TIMEFORMAT = 0x4,KSPROPERTY_STREAM_PRESENTATIONTIME = 0x5,KSPROPERTY_STREAM_PRESENTATIONEXTENT = 0x6,KSPROPERTY_STREAM_FRAMETIME = 0x7,KSPROPERTY_STREAM_RATECAPABILITY = 0x8,KSPROPERTY_STREAM_RATE = 0x9,};
enum _BF0F4415E1602A9FE3AFCAFCA10811A9 {FVM_ICON = 0x1,FVM_SMALLICON = 0x2,FVM_LIST = 0x3,FVM_DETAILS = 0x4,};
enum _BF99222CF03DF5552123F5B194CFC8CC {AM_MACROVISION_DISABLED = 0x0,AM_MACROVISION_LEVEL1 = 0x1,AM_MACROVISION_LEVEL2 = 0x2,AM_MACROVISION_LEVEL3 = 0x3,};
enum _C2B6FCF4766265D794587D5BC4C4F6BB {LLC_ETHERNET_TYPE_DEFAULT = 0x0,LLC_ETHERNET_TYPE_AUTO = 0x1,LLC_ETHERNET_TYPE_802_3 = 0x2,LLC_ETHERNET_TYPE_DIX = 0x3,};
enum _C2DA7626A49A9D2948C6887CBF356963 {DAOCOLKIND_IND = 0x0,DAOCOLKIND_STR = 0x1,DAOCOLKIND_WSTR = 0x2,};
enum _C58BD8FF5CD371D6CCE85BA5CD9B414E {SQLOLECopyData_False = 0x0,SQLOLECopyData_Replace = 0x1,SQLOLECopyData_Append = 0x2,};
enum _C9C41CE7F7AB140BE1C872069B92FC11 {LT_DONT_CARE = 0x0,LT_LOWEST_LATENCY = 0x1,};
enum _CB3435FABEA0A3C4DEC3DC8A5EBD37B4 {KSEVENT_CONNECTION_POSITIONUPDATE = 0x0,KSEVENT_CONNECTION_DATADISCONTINUITY = 0x1,KSEVENT_CONNECTION_TIMEDISCONTINUITY = 0x2,KSEVENT_CONNECTION_PRIORITY = 0x3,KSEVENT_CONNECTION_ENDOFSTREAM = 0x4,};
enum _CC676C3048A9BD4AD39696EC544251C6 {AUX_USE_ID = 0x1,AUX_EXACT_MATCH = 0x2,AUX_MINIMUM_CRITERIA = 0x3,};
struct _CC81E267BD8B32E89ADB7AE662C05BFA {int Dimension;unsigned int *BufferConformanceMark;unsigned int *BufferVarianceMark;unsigned int *MaxCountArray;unsigned int *OffsetArray;unsigned int *ActualCountArray;};
enum _CDE9529195AAB83176AF2EC10292DC84 {SQLOLETabAtt_Identity = 0x1,SQLOLETabAtt_SystemObject = 0x2,SQLOLETabAtt_ForeignKey = 0x4,SQLOLETabAtt_Referenced = 0x8,SQLOLETabAtt_Published = 0x20,SQLOLETabAtt_Replicated = 0x40,SQLOLETabAtt_Check = 0x80,SQLOLETabAtt_Replica = 0x100,SQLOLETabAtt_PrimaryKey = 0x200,SQLOLETabAtt_Unique = 0x400,SQLOLETabAtt_Default = 0x800,SQLOLETabAtt_ReplCheck = 0x1000,SQLOLETabAtt_HasConstraint = 0x1C84,};
enum _D5A9BE53F5312CC59A8B037E92CC2DF0 {KSPROPERTY_CLOCK_TIME = 0x0,KSPROPERTY_CLOCK_PHYSICALTIME = 0x1,KSPROPERTY_CLOCK_CORRELATEDTIME = 0x2,KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 0x3,KSPROPERTY_CLOCK_RESOLUTION = 0x4,KSPROPERTY_CLOCK_STATE = 0x5,};
enum _D64CEF8F52066C406CD4BA6573420261 {KSRESET_BEGIN = 0x0,KSRESET_END = 0x1,};
enum _D80439DB4E69C19C2A267CE458236C0A {SQLOLEEnumNotify_Min = 0x1,SQLOLEEnumNotify_All = 0x1,SQLOLEEnumNotify_Actual = 0x2,SQLOLEEnumNotify_Target = 0x3,SQLOLEEnumNotify_Max = 0x3,};
enum _D90EEA7593E95EFD96C9D40F4B183355 {SQLOLEDataFile_CommaDelimitedChar = 0x1,SQLOLEDataFile_Default = 0x1,SQLOLEDataFile_TabDelimitedChar = 0x2,SQLOLEDataFile_SpecialDelimitedChar = 0x3,SQLOLEDataFile_NativeFormat = 0x4,SQLOLEDataFile_UseFormatFile = 0x5,};
enum _DE28C8B50B885D0E6AD38427B3595C81 {OP_MOVE = 0x1,OP_COPY = 0x2,OP_REPLY = 0x3,OP_OOF_REPLY = 0x4,OP_DEFER_ACTION = 0x5,OP_BOUNCE = 0x6,OP_FORWARD = 0x7,OP_DELEGATE = 0x8,OP_TAG = 0x9,OP_DELETE = 0xA,OP_MARK_AS_READ = 0xB,};
enum _E03D370E3F3619BCD661B8E2F3ACDA6B {SQLOLE_NOENDDATE = 0x5F5BEBF,SQLOLE_NOENDTIME = 0x399B7,SQLOLE_USEEXISTINGFILLFACTOR = 0x0,};
enum _E370912A73A0394600136E88281E4FAF {SQLOLEDbUserProf_None = 0x0,SQLOLEDbUserProf_DboLogin = 0x1,SQLOLEDbUserProf_CreateTable = 0x2,SQLOLEDbUserProf_CreateView = 0x4,SQLOLEDbUserProf_CreateProcedure = 0x8,SQLOLEDbUserProf_DumpDatabase = 0x10,SQLOLEDbUserProf_CreateDefault = 0x20,SQLOLEDbUserProf_DumpTransaction = 0x40,SQLOLEDbUserProf_CreateRule = 0x80,SQLOLEDbUserProf_AllProfileBits = 0xFF,SQLOLEDbUserProf_InvalidLogin = 0x40000000,SQLOLEDbUserProf_InaccessibleDb = 0x80000000,SQLOLEDbUserProf_DbNotAvailable = 0xC0000000,};
enum _E429D5BCA10BC7F1E46CF67F9B793820 {KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0x0,};
enum _E5E05FC88E8385A5216FCD37A95BAA87 {KSPIN_DATAFLOW_IN = 0x1,KSPIN_DATAFLOW_OUT = 0x2,};
enum _E653B2203B724337CC464B3CE50B781E {OLECMDIDF_REFRESH_NORMAL = 0x0,OLECMDIDF_REFRESH_IFEXPIRED = 0x1,OLECMDIDF_REFRESH_CONTINUE = 0x2,OLECMDIDF_REFRESH_COMPLETELY = 0x3,OLECMDIDF_REFRESH_NO_CACHE = 0x4,OLECMDIDF_REFRESH_RELOAD = 0x5,OLECMDIDF_REFRESH_LEVELMASK = 0xFF,OLECMDIDF_REFRESH_CLEARUSERINPUT = 0x1000,OLECMDIDF_REFRESH_PROMPTIFOFFLINE = 0x2000,};
enum _E987151DB23D835B5546EE21DFD8C6E5 {movieDefaultSize = 0x0,movieHalfSize = 0x1,movieDoubleSize = 0x2,movieMaximizeSize = 0x3,movieFullScreen = 0x4,moviePermitResizeWithAspect = 0x5,moviePermitResizeNoRestrict = 0x6,};
enum _EBF8251B43E7412EBBCF0A9FFEA6D7A7 {_FpPrecisionFull = 0x0,_FpPrecision53 = 0x1,_FpPrecision24 = 0x2,};
enum _F02755F122FE19118E72AACBE6981A03 {atypNull = 0x0,atypFile = 0x1,atypOle = 0x2,atypPicture = 0x3,atypMax = 0x4,};
enum _F26E917C7ED159ADFEC283CA634D0FC0 {SQLOLEProc_Unknown = 0x0,SQLOLEProc_Standard = 0x1,SQLOLEProc_Extended = 0x2,SQLOLEProc_Macro = 0x3,SQLOLEProc_ReplicationFilter = 0x4,};
enum _F3E0A1FCB14049C2450A549C6FC2CE26 {SQLOLEFreq_Unknown = 0x0,SQLOLEFreq_OneTime = 0x1,SQLOLEFreq_OnDemand = 0x2,SQLOLEFreq_Daily = 0x4,SQLOLEFreq_Weekly = 0x8,SQLOLEFreq_Monthly = 0x10,SQLOLEFreq_MonthlyRelative = 0x20,SQLOLEFreq_Autostart = 0x40,SQLOLEFreq_Recurring = 0x7C,SQLOLEFreq_Valid = 0x7F,};
enum _F43DA53C7A5EEAF50F7640DB6027D0C0 {SQLOLEStatInfo_Unknown = 0x0,SQLOLEStatInfo_DatabaseStatus = 0x1,SQLOLEStatInfo_DatabaseSpace = 0x2,SQLOLEStatInfo_AutoVerifyConnection = 0x4,SQLOLEStatInfo_All = 0x7,};
enum _F536DD99CDA3AEF7F8C14D1AF7912B02 {SQLOLETrig_Unknown = 0x0,SQLOLETrig_Insert = 0x1,SQLOLETrig_Update = 0x2,SQLOLETrig_Delete = 0x4,SQLOLETrig_All = 0x7,};
enum _F5DE883C21C00D044D40D05491204D19 {SBSC_HIDE = 0x0,SBSC_SHOW = 0x1,SBSC_TOGGLE = 0x2,SBSC_QUERY = 0x3,};
enum _F9F43F4D68578F6DEA1B957C4A505B7D {SQLOLEMonth_Unknown = 0x0,SQLOLEMonth_MinValid = 0x1,SQLOLEMonth_Sunday = 0x1,SQLOLEMonth_Monday = 0x2,SQLOLEMonth_Tuesday = 0x3,SQLOLEMonth_Wednesday = 0x4,SQLOLEMonth_Thursday = 0x5,SQLOLEMonth_Friday = 0x6,SQLOLEMonth_Saturday = 0x7,SQLOLEMonth_Day = 0x8,SQLOLEMonth_WeekDay = 0x9,SQLOLEMonth_WeekEndDay = 0xA,SQLOLEMonth_MaxValid = 0xA,};
enum _FAAC8C047B8D946A570AE38DE6A4C568 {SQLOLEIntSecLogin_Unknown = 0x0,SQLOLEIntSecLogin_Min = 0x1,SQLOLEIntSecLogin_Admin = 0x1,SQLOLEIntSecLogin_User = 0x2,SQLOLEIntSecLogin_Replication = 0x3,SQLOLEIntSecLogin_Max = 0x3,};
enum _FC200439F7F0269D790F85D85E2347C8 {SQLOLEInitSync_Unknown = 0xA,SQLOLEInitSync_Min = 0x0,SQLOLEInitSync_BCPNative = 0x0,SQLOLEInitSync_BCPChar = 0x1,SQLOLEInitSync_TableDumpLoad = 0x2,SQLOLEInitSync_Max = 0x2,};
enum _FC7397F06F001F7890189E8DF0977CBC {DB_SQL = 0x0,DB_SQL_CONNECTED = 0x1,DB_OTHER = 0x2,};
enum _FCAF746DC32E40D81D76F02A4B81A88C {SQLOLEExec_Default = 0x0,SQLOLEExec_NoCommandTerm = 0x1,SQLOLEExec_ContinueOnError = 0x2,SQLOLEExec_NoExec = 0x4,SQLOLEExec_ParseOnly = 0x8,};
enum _FFD469A34A0225161FC30EFD32614023 {SQLOLE_DTypeUnknown = 0x0,SQLOLE_DTypeChar = 0x2F,SQLOLE_DTypeText = 0x23,SQLOLE_DTypeVarchar = 0x27,SQLOLE_DTypeVarBinary = 0x25,SQLOLE_DTypeBinary = 0x2D,SQLOLE_DTypeImage = 0x22,SQLOLE_DTypeFloat4 = 0x3B,SQLOLE_DTypeFloat8 = 0x3E,SQLOLE_DTypeInt1 = 0x30,SQLOLE_DTypeInt2 = 0x34,SQLOLE_DTypeInt4 = 0x38,SQLOLE_DTypeMoney4 = 0x7A,SQLOLE_DTypeMoney = 0x3C,SQLOLE_DTypeDateTime = 0x3D,SQLOLE_DTypeDateTime4 = 0x3A,SQLOLE_DTypeBit = 0x32,};
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS CHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _7909BF26B031C365F3B32F82E7366E93 GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA *LPWIN_SPUB_TRUSTED_PUBLISHER_DATA;
enum MACRO_DISPID_XMLELEMENTCOLLECTION {DISPID_XMLELEMENTCOLLECTION = 65536,DISPID_XMLELEMENTCOLLECTION_LENGTH = 65537,DISPID_XMLELEMENTCOLLECTION_NEWENUM = -4,DISPID_XMLELEMENTCOLLECTION_ITEM = 65539,DISPID_XMLDOCUMENT = 65636,DISPID_XMLDOCUMENT_ROOT = 65637,DISPID_XMLDOCUMENT_FILESIZE = 65638,DISPID_XMLDOCUMENT_FILEMODIFIEDDATE = 65639,DISPID_XMLDOCUMENT_FILEUPDATEDDATE = 65640,DISPID_XMLDOCUMENT_URL = 65641,DISPID_XMLDOCUMENT_MIMETYPE = 65642,DISPID_XMLDOCUMENT_READYSTATE = 65643,DISPID_XMLDOCUMENT_CREATEELEMENT = 65644,DISPID_XMLDOCUMENT_CHARSET = 65645,DISPID_XMLDOCUMENT_VERSION = 65646,DISPID_XMLDOCUMENT_DOCTYPE = 65647,DISPID_XMLDOCUMENT_DTDURL = 65648,DISPID_XMLELEMENT = 65736,DISPID_XMLELEMENT_TAGNAME = 65737,DISPID_XMLELEMENT_PARENT = 65738,DISPID_XMLELEMENT_SETATTRIBUTE = 65739,DISPID_XMLELEMENT_GETATTRIBUTE = 65740,DISPID_XMLELEMENT_REMOVEATTRIBUTE = 65741,DISPID_XMLELEMENT_CHILDREN = 65742,DISPID_XMLELEMENT_TYPE = 65743,DISPID_XMLELEMENT_TEXT = 65744,DISPID_XMLELEMENT_ADDCHILD = 65745,DISPID_XMLELEMENT_REMOVECHILD = 65746,DISPID_XMLNOTIFSINK = 65836,DISPID_XMLNOTIFSINK_CHILDADDED = 65837,};
enum MACRO_DRV_SetPenDriverEntryPoints {DRV_SetPenDriverEntryPoints = 2049,DRV_SetEntryPoints = 2049,DRV_RemovePenDriverEntryPoints = 2050,DRV_RemoveEntryPoints = 2050,DRV_SetPenSamplingRate = 2051,DRV_SetPenSamplingDist = 2052,DRV_GetName = 2053,DRV_GetVersion = 2054,DRV_GetPenInfo = 2055,DRV_PenPlayStart = 2056,DRV_PenPlayBack = 2057,DRV_PenPlayStop = 2058,DRV_GetCalibration = 2059,DRV_SetCalibration = 2060,DRV_Reserved1 = 2061,DRV_Reserved2 = 2062,DRV_Query = 2063,DRV_GetPenSamplingRate = 2064,DRV_Calibrate = 2065,};
enum MACRO_IoctlCodeSetInterfaceRecord {IoctlCodeSetInterfaceRecord = 0x610,};
enum MACRO_dispidGetPreviousTuningInfo {dispidGetPreviousTuningInfo = 4012,};
enum MACRO_hrIncrementalBackupDisabled {hrIncrementalBackupDisabled = 0xC7FF0009,};
enum MACRO_oledbICommandWithParameters {oledbICommandWithParameters = 50024,};
enum MACRO_tevtReportGatewayTransferIn {tevtReportGatewayTransferIn = 1005,};
enum MACRO_tevtUnroutableReportDiscard {tevtUnroutableReportDiscard = 43,};
typedef struct _POLICY_LOCAL_IPSEC_REFERENCE_INFO POLICY_LOCAL_IPSEC_REFERENCE_INFO;
typedef struct _POLICY_LOCAL_POLICY_LOCATION_INFO POLICY_LOCAL_POLICY_LOCATION_INFO;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_DEVICE_INTERFACE_DETAIL_DATA_A;
typedef struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_DEVICE_INTERFACE_DETAIL_DATA_W;
typedef struct _SecPkgContext_LocalCredentialInfo SecPkgContext_LocalCredentialInfo;
enum _DtcLu_CompareStates_Confirmation {DTCLUCOMPARESTATESCONFIRMATION_CONFIRM = 0x1,DTCLUCOMPARESTATESCONFIRMATION_PROTOCOL = 0x2,};
enum ADCPROP_ASYNCTHREADPRIORITY_ENUM {adPriorityLowest = 0x1,adPriorityBelowNormal = 0x2,adPriorityNormal = 0x3,adPriorityAboveNormal = 0x4,adPriorityHighest = 0x5,};
typedef struct _0704266397680A28280F4A6885C4C35C ATM_TRANSIT_NETWORK_SELECTION_IE;
typedef struct IExchangeImportHierarchyChanges *LPEXCHANGEIMPORTHIERARCHYCHANGES;
typedef struct _B8380904D5E4DBEF1FA17159C4574D89 *LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE;
typedef struct _DE8A226FBF6958721EC6E17746E96A38 *LPGOPHER_LOCATION_ATTRIBUTE_TYPE;
typedef struct _7F09F6AD7173E0292471C155D2885AEF *LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE;
typedef struct _9EEC6D4C8F692379AA2A6356D0C3C3FC *LPGOPHER_PROVIDER_ATTRIBUTE_TYPE;
typedef struct _C0A2C8317C92AEC6C65405BB0D08D817 *LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE;
typedef struct _793203A904263AF632B64217160A3CD4 *LPGOPHER_VERONICA_ATTRIBUTE_TYPE;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY *LPWIN_TRUST_ACTDATA_SUBJECT_ONLY;
enum MACRO_DPENUMPLAYERS_SERVERPLAYER {DPENUMPLAYERS_SERVERPLAYER = 0x100,DPENUMPLAYERS_SPECTATOR = 0x200,};
enum MACRO_NELOG_NetlogonSSIInitError {NELOG_NetlogonSSIInitError = 5700,NELOG_NetlogonFailedToUpdateTrustList = 5701,NELOG_NetlogonFailedToAddRpcInterface = 5702,NELOG_NetlogonFailedToReadMailslot = 5703,NELOG_NetlogonFailedToRegisterSC = 5704,NELOG_NetlogonChangeLogCorrupt = 5705,NELOG_NetlogonFailedToCreateShare = 5706,NELOG_NetlogonDownLevelLogonFailed = 5707,NELOG_NetlogonDownLevelLogoffFailed = 5708,NELOG_NetlogonNTLogonFailed = 5709,NELOG_NetlogonNTLogoffFailed = 5710,NELOG_NetlogonPartialSyncCallSuccess = 5711,NELOG_NetlogonPartialSyncCallFailed = 5712,NELOG_NetlogonFullSyncCallSuccess = 5713,NELOG_NetlogonFullSyncCallFailed = 5714,NELOG_NetlogonPartialSyncSuccess = 5715,NELOG_NetlogonPartialSyncFailed = 5716,NELOG_NetlogonFullSyncSuccess = 5717,NELOG_NetlogonFullSyncFailed = 5718,NELOG_NetlogonAuthNoDomainController = 5719,NELOG_NetlogonAuthNoTrustLsaSecret = 5720,NELOG_NetlogonAuthNoTrustSamAccount = 5721,NELOG_NetlogonServerAuthFailed = 5722,NELOG_NetlogonServerAuthNoTrustSamAccount = 5723,NELOG_FailedToRegisterSC = 5724,NELOG_FailedToSetServiceStatus = 5725,NELOG_FailedToGetComputerName = 5726,NELOG_DriverNotLoaded = 5727,NELOG_NoTranportLoaded = 5728,NELOG_NetlogonFailedDomainDelta = 5729,NELOG_NetlogonFailedGlobalGroupDelta = 5730,NELOG_NetlogonFailedLocalGroupDelta = 5731,NELOG_NetlogonFailedUserDelta = 5732,NELOG_NetlogonFailedPolicyDelta = 5733,NELOG_NetlogonFailedTrustedDomainDelta = 5734,NELOG_NetlogonFailedAccountDelta = 5735,NELOG_NetlogonFailedSecretDelta = 5736,NELOG_NetlogonSystemError = 5737,NELOG_NetlogonDuplicateMachineAccounts = 5738,NELOG_NetlogonTooManyGlobalGroups = 5739,NELOG_NetlogonBrowserDriver = 5740,NELOG_NetlogonAddNameFailure = 5741,NELOG_RplMessages = 5742,NELOG_RplXnsBoot = 5743,NELOG_RplSystem = 5744,NELOG_RplWkstaTimeout = 5745,NELOG_RplWkstaFileOpen = 5746,NELOG_RplWkstaFileRead = 5747,NELOG_RplWkstaMemory = 5748,NELOG_RplWkstaFileChecksum = 5749,NELOG_RplWkstaFileLineCount = 5750,NELOG_RplWkstaBbcFile = 5751,NELOG_RplWkstaFileSize = 5752,NELOG_RplWkstaInternal = 5753,NELOG_RplWkstaWrongVersion = 5754,NELOG_RplWkstaNetwork = 5755,NELOG_RplAdapterResource = 5756,NELOG_RplFileCopy = 5757,NELOG_RplFileDelete = 5758,NELOG_RplFilePerms = 5759,NELOG_RplCheckConfigs = 5760,NELOG_RplCreateProfiles = 5761,NELOG_RplRegistry = 5762,NELOG_RplReplaceRPLDISK = 5763,NELOG_RplCheckSecurity = 5764,NELOG_RplBackupDatabase = 5765,NELOG_RplInitDatabase = 5766,NELOG_RplRestoreDatabaseFailure = 5767,NELOG_RplRestoreDatabaseSuccess = 5768,NELOG_RplInitRestoredDatabase = 5769,NELOG_NetlogonSessionTypeWrong = 5770,NELOG_RplUpgradeDBTo40 = 5771,NELOG_NetlogonLanmanBdcsNotAllowed = 5772,NELOG_NetlogonNoDynamicDns = 5773,NELOG_NetlogonDynamicDnsRegisterFailure = 5774,NELOG_NetlogonDynamicDnsDeregisterFailure = 5775,NELOG_NetlogonFailedFileCreate = 5776,NELOG_NetlogonGetSubnetToSite = 5777,NELOG_NetlogonNoSiteForClient = 5778,NELOG_NetlogonBadSiteName = 5779,NELOG_NetlogonBadSubnetName = 5780,};
enum MACRO_TRANSPORT_QUALITYOFSERVICE {TRANSPORT_QUALITYOFSERVICE_PARMNUM = 201,TRANSPORT_NAME_PARMNUM = 202,};
enum MACRO_attAttachTransportFilename {attAttachTransportFilename = 0x69001,};
enum MACRO_cchMaxValidateMSPostoffice {cchMaxValidateMSPostoffice = 11,};
enum MACRO_dispidEpisodeStatusChanged {dispidEpisodeStatusChanged = 3005,};
enum MACRO_dispidGetCurrentTuningInfo {dispidGetCurrentTuningInfo = 4011,};
enum MACRO_hrCurrencyStackOutOfMemory {hrCurrencyStackOutOfMemory = 0xC800042E,};
enum MACRO_hrTooManyAttachedDatabases {hrTooManyAttachedDatabases = 0xC800070D,};
enum MACRO_pidExchangeXmitReservedMin {pidExchangeXmitReservedMin = 0x3FE0,};
enum MACRO_tevtReportGatewayGenerated {tevtReportGatewayGenerated = 1007,};
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A *PDEV_BROADCAST_DEVICEINTERFACE_A;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W *PDEV_BROADCAST_DEVICEINTERFACE_W;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION *PTRUSTED_DOMAIN_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION *PTRUSTED_DOMAIN_FULL_INFORMATION;
typedef struct tuispicreatedialoginstanceparams_tag TUISPICREATEDIALOGINSTANCEPARAMS;
typedef unsigned char *( *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, unsigned char *, void *);
enum _POLICY_DOMAIN_INFORMATION_CLASS {PolicyDomainIPSecReferenceInformation = 0x1,PolicyDomainQualityOfServiceInformation = 0x2,PolicyDomainEfsInformation = 0x3,PolicyDomainPublicKeyInformation = 0x4,PolicyDomainPasswordPolicyInformation = 0x5,PolicyDomainLockoutInformation = 0x6,PolicyDomainKerberosTicketInformation = 0x7,};
enum __MIDL_IInternetZoneManager_0001 {MAX_ZONE_PATH = 0x104,MAX_ZONE_DESCRIPTION = 0xC8,};
enum __MIDL_IInternetZoneManager_0002 {ZAFLAGS_CUSTOM_EDIT = 0x1,ZAFLAGS_ADD_SITES = 0x2,ZAFLAGS_REQUIRE_VERIFICATION = 0x4,ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,ZAFLAGS_NO_UI = 0x20,ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,ZAFLAGS_UNC_AS_INTRANET = 0x80,};
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO CERT_KEY_USAGE_RESTRICTION_INFO;
enum CLUSTER_GROUP_AUTOFAILBACK_TYPE {ClusterGroupPreventFailback = 0x0,ClusterGroupAllowFailback = 0x1,ClusterGroupFailbackTypeCount = 0x2,};
enum CLUSTER_RESOURCE_RESTART_ACTION {ClusterResourceDontRestart = 0x0,ClusterResourceRestartNoNotify = 0x1,ClusterResourceRestartNotify = 0x2,ClusterResourceRestartActionCount = 0x3,};
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_A DEV_BROADCAST_DEVICEINTERFACE_A;
typedef struct _DEV_BROADCAST_DEVICEINTERFACE_W DEV_BROADCAST_DEVICEINTERFACE_W;
struct IDirectDrawMediaSampleAllocator {struct IDirectDrawMediaSampleAllocatorVtbl *lpVtbl;};
struct IDtcLuRecoveryInitiatedByLuWork {struct IDtcLuRecoveryInitiatedByLuWorkVtbl *lpVtbl;};
struct IExchangeImportHierarchyChanges {struct IExchangeImportHierarchyChangesVtbl *lpVtbl;};
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct IExchangeImportContentsChanges *LPEXCHANGEIMPORTCONTENTSCHANGES;
typedef struct _60326525EFFC6265B33A0784E3C361D7 *LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE;
typedef struct _098CCDCB9074DBE2AEBC1B4026CD72FD *LPGOPHER_VERSION_ATTRIBUTE_TYPE;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;
enum MACRO_hrBackupDirectoryNotEmpty {hrBackupDirectoryNotEmpty = 0xC80001F8,};
enum MACRO_hrMakeBackupDirectoryFail {hrMakeBackupDirectoryFail = 0xC800020D,};
enum MACRO_hrVersionStoreOutOfMemory {hrVersionStoreOutOfMemory = 0xC800042D,};
enum MACRO_oledbITransactionOptions_ {oledbITransactionOptions__GetOptions = 50144,oledbITransactionOptions__SetOptions = 50145,};
enum MACRO_tevtReleaseAssocByMTSUser {tevtReleaseAssocByMTSUser = 23,};
enum MACRO_trpidResolvedGroupAddress {trpidResolvedGroupAddress = 0x9,};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IPX_TRAFFIC_FILTER_GLOBAL_INFO *PIPX_TRAFFIC_FILTER_GLOBAL_INFO;
typedef struct _A45289B030366F6A209F1D22B819A49A *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct _SecPkgContext_IssuerListInfoEx *PSecPkgContext_IssuerListInfoEx;
typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION TRUSTED_DOMAIN_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION TRUSTED_DOMAIN_FULL_INFORMATION;
typedef struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA WIN_SPUB_TRUSTED_PUBLISHER_DATA;
enum _POLICY_LOCAL_INFORMATION_CLASS {PolicyLocalAuditEventsInformation = 0x1,PolicyLocalPdAccountInformation = 0x2,PolicyLocalAccountDomainInformation = 0x3,PolicyLocalLsaServerRoleInformation = 0x4,PolicyLocalReplicaSourceInformation = 0x5,PolicyLocalModificationInformation = 0x6,PolicyLocalAuditFullSetInformation = 0x7,PolicyLocalAuditFullQueryInformation = 0x8,PolicyLocalDnsDomainInformation = 0x9,PolicyLocalIPSecReferenceInformation = 0xA,PolicyLocalMachinePasswordInformation = 0xB,PolicyLocalQualityOfServiceInformation = 0xC,PolicyLocalPolicyLocationInformation = 0xD,};
enum __MIDL_IBindStatusCallback_0001 {BINDVERB_GET = 0x0,BINDVERB_POST = 0x1,BINDVERB_PUT = 0x2,BINDVERB_CUSTOM = 0x3,};
enum __MIDL_IBindStatusCallback_0002 {BINDINFOF_URLENCODESTGMEDDATA = 0x1,BINDINFOF_URLENCODEDEXTRAINFO = 0x2,};
enum __MIDL_IBindStatusCallback_0003 {BINDF_ASYNCHRONOUS = 0x1,BINDF_ASYNCSTORAGE = 0x2,BINDF_NOPROGRESSIVERENDERING = 0x4,BINDF_OFFLINEOPERATION = 0x8,BINDF_GETNEWESTVERSION = 0x10,BINDF_NOWRITECACHE = 0x20,BINDF_NEEDFILE = 0x40,BINDF_PULLDATA = 0x80,BINDF_IGNORESECURITYPROBLEM = 0x100,BINDF_RESYNCHRONIZE = 0x200,BINDF_HYPERLINK = 0x400,BINDF_NO_UI = 0x800,BINDF_SILENTOPERATION = 0x1000,BINDF_PRAGMA_NO_CACHE = 0x2000,BINDF_FREE_THREADED = 0x10000,BINDF_DIRECT_READ = 0x20000,BINDF_FORMS_SUBMIT = 0x40000,BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,};
enum __MIDL_IBindStatusCallback_0004 {BSCF_FIRSTDATANOTIFICATION = 0x1,BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,BSCF_LASTDATANOTIFICATION = 0x4,BSCF_DATAFULLYAVAILABLE = 0x8,BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,};
enum __MIDL_IConfigInterleaving_0001 {INTERLEAVE_NONE = 0x0,INTERLEAVE_CAPTURE = 0x1,INTERLEAVE_FULL = 0x2,};
enum __MIDL_IHlinkBrowseContext_0001 {HLTB_DOCKEDLEFT = 0x0,HLTB_DOCKEDTOP = 0x1,HLTB_DOCKEDRIGHT = 0x2,HLTB_DOCKEDBOTTOM = 0x3,HLTB_FLOATING = 0x4,};
enum __MIDL_IHlinkBrowseContext_0002 {HLBWIF_HASFRAMEWNDINFO = 0x1,HLBWIF_HASDOCWNDINFO = 0x2,HLBWIF_FRAMEWNDMAXIMIZED = 0x4,HLBWIF_DOCWNDMAXIMIZED = 0x8,HLBWIF_HASWEBTOOLBARINFO = 0x10,HLBWIF_WEBTOOLBARHIDDEN = 0x20,};
enum __MIDL_IHlinkBrowseContext_0003 {HLID_INVALID = 0x0,HLID_PREVIOUS = 0xFFFFFFFF,HLID_NEXT = 0xFFFFFFFE,HLID_CURRENT = 0xFFFFFFFD,HLID_STACKBOTTOM = 0xFFFFFFFC,HLID_STACKTOP = 0xFFFFFFFB,};
enum __MIDL_IHlinkBrowseContext_0004 {HLQF_ISVALID = 0x1,HLQF_ISCURRENT = 0x2,};
enum AM_SEEKING_SeekingCapabilities {AM_SEEKING_CanSeekAbsolute = 0x1,AM_SEEKING_CanSeekForwards = 0x2,AM_SEEKING_CanSeekBackwards = 0x4,AM_SEEKING_CanGetCurrentPos = 0x8,AM_SEEKING_CanGetStopPos = 0x10,AM_SEEKING_CanGetDuration = 0x20,AM_SEEKING_CanPlayBackwards = 0x40,AM_SEEKING_CanDoSegments = 0x80,AM_SEEKING_Source = 0x100,};
typedef struct creative_fastspeech10format_tag CREATIVEFASTSPEECH10WAVEFORMAT;
typedef struct _B8380904D5E4DBEF1FA17159C4574D89 GOPHER_ABSTRACT_ATTRIBUTE_TYPE;
typedef struct _DE8A226FBF6958721EC6E17746E96A38 GOPHER_LOCATION_ATTRIBUTE_TYPE;
typedef struct _7F09F6AD7173E0292471C155D2885AEF GOPHER_MOD_DATE_ATTRIBUTE_TYPE;
typedef struct _9EEC6D4C8F692379AA2A6356D0C3C3FC GOPHER_PROVIDER_ATTRIBUTE_TYPE;
typedef struct _C0A2C8317C92AEC6C65405BB0D08D817 GOPHER_TIMEZONE_ATTRIBUTE_TYPE;
typedef struct _793203A904263AF632B64217160A3CD4 GOPHER_VERONICA_ATTRIBUTE_TYPE;
struct IActiveScriptParseProcedureOld {struct IActiveScriptParseProcedureOldVtbl *lpVtbl;};
struct IActiveScriptSiteInterruptPoll {struct IActiveScriptSiteInterruptPollVtbl *lpVtbl;};
struct IExchangeImportContentsChanges {struct IExchangeImportContentsChangesVtbl *lpVtbl;};
struct IHTMLStyleSheetRulesCollection {struct IHTMLStyleSheetRulesCollectionVtbl *lpVtbl;};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IPX_TRAFFIC_FILTER_GLOBAL_INFO IPX_TRAFFIC_FILTER_GLOBAL_INFO;
struct ITransactionTransmitterFactory {struct ITransactionTransmitterFactoryVtbl *lpVtbl;};
typedef  DIDEVICEOBJECTINSTANCE_DX3A *LPCDIDEVICEOBJECTINSTANCE_DX3A;
typedef  DIDEVICEOBJECTINSTANCE_DX3W *LPCDIDEVICEOBJECTINSTANCE_DX3W;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
typedef struct _NTMS_NOTIFICATIONINFORMATION *LPNTMS_NOTIFICATIONINFORMATION;
enum MACRO_EXCEPTION_NONCONTINUABLE {EXCEPTION_NONCONTINUABLE = 0x1,EXCEPTION_MAXIMUM_PARAMETERS = 0xF,};
enum MACRO_MIXERCONTROL_CONTROLTYPE {MIXERCONTROL_CONTROLTYPE_SRS_MTS = 536936454,MIXERCONTROL_CONTROLTYPE_SRS_ONOFF = 536936455,MIXERCONTROL_CONTROLTYPE_SRS_SYNTHSELECT = 536936456,};
enum MACRO_cchMaxCreateMSPostoffice {cchMaxCreateMSPostoffice = 11,};
enum MACRO_ecProxyDLLNotImplemented {ecProxyDLLNotImplemented = 50005,};
enum MACRO_hrBadCheckpointSignature {hrBadCheckpointSignature = 0xC8000214,};
enum MACRO_hrConsistentTimeMismatch {hrConsistentTimeMismatch = 0xC8000227,};
enum MACRO_hrMissingPreviousLogFile {hrMissingPreviousLogFile = 0xC80001FD,};
enum MACRO_hrMissingRestoreLogFiles {hrMissingRestoreLogFiles = 0xC800022D,};
enum MACRO_hrRecordClusteredChanged {hrRecordClusteredChanged = 0xC8000644,};
enum MACRO_ichOpMapReservedDelivery {ichOpMapReservedDelivery = 7,ichOpMapReplyToFolder = 8,chOpMapByClient = 48,};
enum MACRO_oledbICommandProperties_ {oledbICommandProperties__GetProperties = 50019,oledbICommandProperties__SetProperties = 50020,};
enum MACRO_oledbIDBDataSourceAdmin_ {oledbIDBDataSourceAdmin__CreateDataSource = 50035,oledbIDBDataSourceAdmin__DestroyDataSource = 50036,oledbIDBDataSourceAdmin__GetCreationProperties = 50037,oledbIDBDataSourceAdmin__ModifyDataSource = 50038,};
enum MACRO_oledbISessionProperties_ {oledbISessionProperties__GetProperties = 50118,oledbISessionProperties__SetProperties = 50119,};
enum MACRO_oledbITransactionObject_ {oledbITransactionObject__GetTransactionObject = 50142,};
enum MACRO_oledbITransactionOptions {oledbITransactionOptions = 50143,};
enum MACRO_tevtMessageLocalDelivery {tevtMessageLocalDelivery = 1000,};
typedef struct _A45289B030366F6A209F1D22B819A49A NTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD *PIMAGEHLP_DEFERRED_SYMBOL_LOAD;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF *PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _POLICY_DOMAIN_PUBLIC_KEY_INFO *PPOLICY_DOMAIN_PUBLIC_KEY_INFO;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_A *PSP_DEVINFO_LIST_DETAIL_DATA_A;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_W *PSP_DEVINFO_LIST_DETAIL_DATA_W;
typedef struct _SecPkgCred_SupportedProtocols *PSecPkgCred_SupportedProtocols;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX *PTRUSTED_DOMAIN_INFORMATION_EX;
typedef struct _SecPkgContext_IssuerListInfoEx SecPkgContext_IssuerListInfoEx;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY WIN_TRUST_ACTDATA_SUBJECT_ONLY;
struct __MIDL_IH26XEncodeOptions_0001 {int bExtendedMV;int bPBFrames;int bAdvPrediction;};
enum mimeassociationdialog_in_flags {MIMEASSOCDLG_FL_REGISTER_ASSOC = 0x1,};
enum CLUSTER_RESOURCE_CREATE_FLAGS {CLUSTER_RESOURCE_SEPARATE_MONITOR = 0x1,CLUSTER_RESOURCE_VALID_FLAGS = 0x1,};
typedef struct creative_fastspeech8format_tag CREATIVEFASTSPEECH8WAVEFORMAT;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA CRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO CRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct IDDVideoPortContainerVtbl DDVIDEOPORTCONTAINERCALLBACKS;
typedef struct _60326525EFFC6265B33A0784E3C361D7 GOPHER_UNKNOWN_ATTRIBUTE_TYPE;
typedef struct _098CCDCB9074DBE2AEBC1B4026CD72FD GOPHER_VERSION_ATTRIBUTE_TYPE;
struct HTMLOptionButtonElementEvents {struct HTMLOptionButtonElementEventsVtbl *lpVtbl;};
struct HTMLStyleSheetRulesCollection;
typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct ITransactionImportWhereabouts {struct ITransactionImportWhereaboutsVtbl *lpVtbl;};
typedef struct IASQLOLEUserDefinedDatatypes *LPASQLOLEUSERDEFINEDDATATYPES;
typedef struct DIDEVICEOBJECTINSTANCE_DX3A *LPDIDEVICEOBJECTINSTANCE_DX3A;
typedef struct DIDEVICEOBJECTINSTANCE_DX3W *LPDIDEVICEOBJECTINSTANCE_DX3W;
typedef struct _E42E7BED0EE5193A4D0BC9D45E2008A3 *LPGOPHER_ADMIN_ATTRIBUTE_TYPE;
typedef struct _3FBC325AC5E1830BAC7DB9619C6C90C8 *LPGOPHER_SCORE_ATTRIBUTE_TYPE;
typedef struct IDirect3DRMProgressiveMesh **LPLPDIRECT3DRMPROGRESSIVEMESH;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _RECOVERY_AGENT_INFORMATIONA *LPRECOVERY_AGENT_INFORMATIONA;
typedef struct _RECOVERY_AGENT_INFORMATIONW *LPRECOVERY_AGENT_INFORMATIONW;
enum MACRO_IDS_CVRESULTCONVERTLINK {IDS_CVRESULTCONVERTLINK = 32440,IDS_CVRESULTCONVERTTO = 32441,IDS_CVRESULTNOCHANGE = 32442,IDS_CVRESULTDISPLAYASICON = 32443,IDS_CVRESULTACTIVATEAS = 32444,IDS_CVRESULTACTIVATEDIFF = 32445,};
enum MACRO_PHONEINITIALIZEEXOPTION {PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x1,PHONEINITIALIZEEXOPTION_USEEVENT = 0x2,PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x3,};
enum MACRO_STATUS_SEVERITY_SUCCESS {STATUS_SEVERITY_SUCCESS = 0x0,STATUS_SEVERITY_COERROR = 0x2,};
enum MACRO_TIME_NOMINUTESORSECONDS {TIME_NOMINUTESORSECONDS = 0x1,TIME_NOSECONDS = 0x2,TIME_NOTIMEMARKER = 0x4,TIME_FORCE24HOURFORMAT = 0x8,};
enum MACRO_attOriginalMessageClass {attOriginalMessageClass = 0x70006,};
enum MACRO_cchMaxValidateMSNetwork {cchMaxValidateMSNetwork = 11,};
enum MACRO_dwServerFlagMapiRunning {dwServerFlagMapiRunning = 0x1,dwServerFlagNoPrivateStore = 0x2,};
enum MACRO_errVtoFetchBuffTooSmall {errVtoFetchBuffTooSmall = -30028,};
enum MACRO_hrBadBackupDatabaseSize {hrBadBackupDatabaseSize = 0xC8000231,};
enum MACRO_hrInvalidBackupSequence {hrInvalidBackupSequence = 0xC8000209,};
enum MACRO_ichOpMapReservedCompose {ichOpMapReservedCompose = 0,ichOpMapOpen = 1,ichOpMapReplyToSender = 2,};
enum MACRO_oledbICommandProperties {oledbICommandProperties = 50018,};
enum MACRO_oledbIDBDataSourceAdmin {oledbIDBDataSourceAdmin = 50034,};
enum MACRO_oledbISessionProperties {oledbISessionProperties = 50117,};
enum MACRO_oledbISupportErrorInfo_ {oledbISupportErrorInfo__InterfaceSupportsErrorInfo = 50125,};
enum MACRO_oledbITransactionObject {oledbITransactionObject = 50141,};
enum MACRO_tevtStartAssocByMTSUser {tevtStartAssocByMTSUser = 18,};
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _MPR40_ROUTING_CHARACTERISTICS MPR40_ROUTING_CHARACTERISTICS;
typedef struct _MPR40_SERVICE_CHARACTERISTICS MPR40_SERVICE_CHARACTERISTICS;
typedef struct _MPR50_ROUTING_CHARACTERISTICS MPR50_ROUTING_CHARACTERISTICS;
typedef struct _MPR50_SERVICE_CHARACTERISTICS MPR50_SERVICE_CHARACTERISTICS;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF NTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef union CLUSPROP_REQUIRED_DEPENDENCY *PCLUSPROP_REQUIRED_DEPENDENCY;
typedef struct CLUSPROP_RESOURCE_CLASS_INFO *PCLUSPROP_RESOURCE_CLASS_INFO;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct tagHOSTSEC_DISPATCH_VERSION_1_1 *PHOSTSEC_DISPATCH_VERSION_1_1;
typedef struct tagHOSTSEC_DISPATCH_VERSION_1_2 *PHOSTSEC_DISPATCH_VERSION_1_2;
typedef struct _IPX_STATIC_NETBIOS_NAME_INFO *PIPX_STATIC_NETBIOS_NAME_INFO;
typedef struct _39A7E4ECA0CDD25B70D9543F73C0D523 *PKSPROPERTY_STEPPING_LONGLONG;
typedef struct _MEMORY_BASIC_INFORMATION_VLM *PMEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
typedef struct _POLICY_DOMAIN_PUBLIC_KEY_INFO POLICY_DOMAIN_PUBLIC_KEY_INFO;
typedef struct _POLICY_AUDIT_FULL_QUERY_INFO *PPOLICY_AUDIT_FULL_QUERY_INFO;
typedef struct _SecPkgContext_ConnectionInfo *PSecPkgContext_ConnectionInfo;
typedef struct _SecPkgContext_IssuerListInfo *PSecPkgContext_IssuerListInfo;
typedef struct _SecPkgContext_PasswordExpiry *PSecPkgContext_PasswordExpiry;
typedef struct _WSH_LOOKUP_NETDEF_ON_ADAPTER *PWSH_LOOKUP_NETDEF_ON_ADAPTER;
typedef struct __MIDL_TriggerPublicRPC_0005 RPC_GATEWAY_TRACK_INFORMATION;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_A SP_DEVINFO_LIST_DETAIL_DATA_A;
typedef struct _SP_DEVINFO_LIST_DETAIL_DATA_W SP_DEVINFO_LIST_DETAIL_DATA_W;
typedef struct _SecPkgCred_SupportedProtocols SecPkgCred_SupportedProtocols;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX TRUSTED_DOMAIN_INFORMATION_EX;
typedef signed int XC_CONVERSATION_SECURITY_TYPE;
enum _DtcLu_CompareStates_Response {DTCLUCOMPARESTATESRESPONSE_OK = 0x1,DTCLUCOMPARESTATESRESPONSE_PROTOCOL = 0x2,};
enum _SECURITY_IMPERSONATION_LEVEL {SecurityAnonymous = 0x0,SecurityIdentification = 0x1,SecurityImpersonation = 0x2,SecurityDelegation = 0x3,};
enum __MIDL_IH26XVideoEffects_0001 {H26X_VE_UNDEFINED = 0x0,H26X_VE_BRIGHTNESS = 0x1,H26X_VE_CONTRAST = 0x2,H26X_VE_SATURATION = 0x3,H26X_VE_TINT = 0x4,H26X_VE_MIRROR = 0x5,H26X_VE_ASPECT_CORRECT = 0x6,};
struct __MIDL_IH26XVideoEffects_0002 {int iBrightness;int iSaturation;int iContrast;int iMirror;int iAspectCorrect;};
enum __MIDL_IRemoteClassField_0001 {CP_CONSTANT_UTF8 = 0x1,CP_CONSTANT_UNICODE = 0x2,CP_CONSTANT_INTEGER = 0x3,CP_CONSTANT_FLOAT = 0x4,CP_CONSTANT_LONG = 0x5,CP_CONSTANT_DOUBLE = 0x6,CP_CONSTANT_CLASS = 0x7,CP_CONSTANT_STRING = 0x8,CP_CONSTANT_FIELDREF = 0x9,CP_CONSTANT_METHODREF = 0xA,CP_CONSTANT_INTERFACEMETHODREF = 0xB,CP_CONSTANT_NAMEANDTYPE = 0xC,};
enum __MIDL_IRemoteStackFrame_0001 {FRAME_KIND_INVALID = 0x0,FRAME_KIND_INTERPRETED = 0x1,FRAME_KIND_NATIVE = 0x2,FRAME_KIND_JIT_COMPILED = 0x3,};
enum __MIDL___MIDL__intf_0000_0001 {ADSTYPE_INVALID = 0x0,ADSTYPE_DN_STRING = 0x1,ADSTYPE_CASE_EXACT_STRING = 0x2,ADSTYPE_CASE_IGNORE_STRING = 0x3,ADSTYPE_PRINTABLE_STRING = 0x4,ADSTYPE_NUMERIC_STRING = 0x5,ADSTYPE_BOOLEAN = 0x6,ADSTYPE_INTEGER = 0x7,ADSTYPE_OCTET_STRING = 0x8,ADSTYPE_UTC_TIME = 0x9,ADSTYPE_LARGE_INTEGER = 0xA,ADSTYPE_PROV_SPECIFIC = 0xB,ADSTYPE_OBJECT_CLASS = 0xC,};
enum __MIDL___MIDL__intf_0000_0005 {ADS_STATUS_S_OK = 0x0,ADS_STATUS_INVALID_SEARCHPREF = 0x1,ADS_STATUS_INVALID_SEARCHPREFVALUE = 0x2,};
enum __MIDL___MIDL__intf_0000_0006 {ADS_DEREF_NEVER = 0x0,ADS_DEREF_SEARCHING = 0x1,ADS_DEREF_FINDING = 0x2,ADS_DEREF_ALWAYS = 0x3,};
enum __MIDL___MIDL__intf_0000_0007 {ADS_SCOPE_BASE = 0x0,ADS_SCOPE_ONELEVEL = 0x1,ADS_SCOPE_SUBTREE = 0x2,};
enum __MIDL___MIDL__intf_0000_0008 {ADS_SEARCHPREF_ASYNCHRONOUS = 0x0,ADS_SEARCHPREF_DEREF_ALIASES = 0x1,ADS_SEARCHPREF_SIZE_LIMIT = 0x2,ADS_SEARCHPREF_TIME_LIMIT = 0x3,ADS_SEARCHPREF_ATTRIBTYPES_ONLY = 0x4,ADS_SEARCHPREF_SEARCH_SCOPE = 0x5,ADS_SEARCHPREF_TIMEOUT = 0x6,ADS_SEARCHPREF_PAGESIZE = 0x7,ADS_SEARCHPREF_PAGED_TIME_LIMIT = 0x8,ADS_SEARCHPREF_CHASE_REFERRALS = 0x9,ADS_SEARCHPREF_SORT_ON = 0xA,};
enum __MIDL___MIDL__intf_0000_0009 {ADS_PROPERTY_CLEAR = 0x1,ADS_PROPERTY_UPDATE = 0x2,ADS_PROPERTY_APPEND = 0x3,ADS_PROPERTY_DELETE = 0x4,};
enum __MIDL___MIDL__intf_0115_0001 {ADS_SETTYPE_FULL = 0x1,ADS_SETTYPE_PROVIDER = 0x2,ADS_SETTYPE_SERVER = 0x3,ADS_SETTYPE_DN = 0x4,};
enum __MIDL___MIDL__intf_0115_0002 {ADS_FORMAT_WINDOWS = 0x1,ADS_FORMAT_WINDOWS_NO_SERVER = 0x2,ADS_FORMAT_WINDOWS_DN = 0x3,ADS_FORMAT_WINDOWS_PARENT = 0x4,ADS_FORMAT_X500 = 0x5,ADS_FORMAT_X500_NO_SERVER = 0x6,ADS_FORMAT_X500_DN = 0x7,ADS_FORMAT_X500_PARENT = 0x8,ADS_FORMAT_SERVER = 0x9,ADS_FORMAT_PROVIDER = 0xA,ADS_FORMAT_LEAF = 0xB,};
enum __MIDL___MIDL__intf_0115_0003 {ADS_DISPLAY_FULL = 0x1,ADS_DISPLAY_VALUE_ONLY = 0x2,};
enum tagDVD_PREFERRED_DISPLAY_MODE {DISPLAY_CONTENT_DEFAULT = 0x0,DISPLAY_16x9 = 0x1,DISPLAY_4x3_PANSCAN_PREFERRED = 0x2,DISPLAY_4x3_LETTERBOX_PREFERRED = 0x3,};
enum urlassociationdialog_in_flags {URLASSOCDLG_FL_USE_DEFAULT_NAME = 0x1,URLASSOCDLG_FL_REGISTER_ASSOC = 0x2,};
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO CERT_BASIC_CONSTRAINTS2_INFO;
typedef struct IDirectDrawVideoPortVtbl DIRECTDRAWVIDEOPORTCALLBACKS;
struct DispIHTMLOptionButtonElement {struct DispIHTMLOptionButtonElementVtbl *lpVtbl;};
typedef struct _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
typedef struct tagHOSTSEC_DISPATCH_VERSION_1_1 HOSTSEC_DISPATCH_VERSION_1_1;
typedef struct tagHOSTSEC_DISPATCH_VERSION_1_2 HOSTSEC_DISPATCH_VERSION_1_2;
struct IASQLOLEUserDefinedDatatypes {struct IASQLOLEUserDefinedDatatypesVtbl *lpVtbl;};
struct IDtcLuRecoveryInitiatedByDtc {struct IDtcLuRecoveryInitiatedByDtcVtbl *lpVtbl;};
struct IInternetHostSecurityManager {struct IInternetHostSecurityManagerVtbl *lpVtbl;};
typedef struct _IPX_STATIC_NETBIOS_NAME_INFO IPX_STATIC_NETBIOS_NAME_INFO;
struct ITransactionVoterBallotAsync {struct ITransactionVoterBallotAsyncVtbl *lpVtbl;};
struct ITransactionVoterNotifyAsync {struct ITransactionVoterNotifyAsyncVtbl *lpVtbl;};
typedef struct _39A7E4ECA0CDD25B70D9543F73C0D523 KSPROPERTY_STEPPING_LONGLONG;
typedef struct IASQLOLEUserDefinedDatatype *LPASQLOLEUSERDEFINEDDATATYPE;
typedef struct _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
typedef struct _DPLMSG_GETPROPERTYRESPONSE *LPDPLMSG_GETPROPERTYRESPONSE;
typedef struct _DPLMSG_SETPROPERTYRESPONSE *LPDPLMSG_SETPROPERTYRESPONSE;
typedef struct _047A9D6DB9EB3B65E20B29F40C814688 *LPDPMSG_DESTROYPLAYERORGROUP;
typedef struct _87B38C5BC85AA4DC076D4608CF4D41BB *LPDPMSG_SETPLAYERORGROUPDATA;
typedef struct _9186133EF552B6DB84C666EDEF474133 *LPDPMSG_SETPLAYERORGROUPNAME;
typedef struct _21B90258E17C8B6D2BC61A88DF74B5FB *LPGOPHER_SITE_ATTRIBUTE_TYPE;
typedef struct _6950E4854C03824D44DF624674A695D1 *LPGOPHER_VIEW_ATTRIBUTE_TYPE;
typedef struct _INTERNET_CACHE_ENTRY_INFOA *LPINTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW *LPINTERNET_CACHE_ENTRY_INFOW;
typedef struct tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
typedef IOleInPlaceObjectWindowless *LPOLEINPLACEOBJECTWINDOWLESS;
typedef struct _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;
typedef IRemoteDebugManagerCallback *LPREMOTEDEBUGMANAGERCALLBACK;
enum MACRO_DIPROP_CALIBRATIONMODE {DIPROP_CALIBRATIONMODE = 10,};
enum MACRO_IoctlCodeAbortReceiver {IoctlCodeAbortReceiver = 0x460,};
enum MACRO_IoctlCodeAbortTransmit {IoctlCodeAbortTransmit = 0x450,};
enum MACRO_LINEINITIALIZEEXOPTION {LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 0x1,LINEINITIALIZEEXOPTION_USEEVENT = 0x2,LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 0x3,};
enum MACRO_MAX_JOYSTICKOEMVXDNAME {MAX_JOYSTICKOEMVXDNAME = 260,};
enum MACRO_MIXER_GETLINECONTROLSF {MIXER_GETLINECONTROLSF_ALL = 0x0,MIXER_GETLINECONTROLSF_ONEBYID = 0x1,MIXER_GETLINECONTROLSF_ONEBYTYPE = 0x2,MIXER_GETLINECONTROLSF_QUERYMASK = 0xF,MIXER_GETCONTROLDETAILSF_VALUE = 0x0,MIXER_GETCONTROLDETAILSF_LISTTEXT = 0x1,MIXER_GETCONTROLDETAILSF_QUERYMASK = 0xF,MIXER_SETCONTROLDETAILSF_VALUE = 0x0,MIXER_SETCONTROLDETAILSF_CUSTOM = 0x1,MIXER_SETCONTROLDETAILSF_QUERYMASK = 0xF,};
enum MACRO_POSTSCRIPT_PASSTHROUGH {POSTSCRIPT_PASSTHROUGH = 4115,};
enum MACRO_PRINTER_NOTIFY_OPTIONS {PRINTER_NOTIFY_OPTIONS_REFRESH = 0x1,PRINTER_NOTIFY_INFO_DISCARDED = 0x1,PRINTER_CHANGE_ADD_PRINTER = 0x1,PRINTER_CHANGE_SET_PRINTER = 0x2,PRINTER_CHANGE_DELETE_PRINTER = 0x4,PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 0x8,PRINTER_CHANGE_PRINTER = 0xFF,PRINTER_CHANGE_ADD_JOB = 0x100,PRINTER_CHANGE_SET_JOB = 0x200,PRINTER_CHANGE_DELETE_JOB = 0x400,PRINTER_CHANGE_WRITE_JOB = 0x800,PRINTER_CHANGE_JOB = 0xFF00,PRINTER_CHANGE_ADD_FORM = 0x10000,PRINTER_CHANGE_SET_FORM = 0x20000,PRINTER_CHANGE_DELETE_FORM = 0x40000,PRINTER_CHANGE_FORM = 0x70000,PRINTER_CHANGE_ADD_PORT = 0x100000,PRINTER_CHANGE_CONFIGURE_PORT = 0x200000,PRINTER_CHANGE_DELETE_PORT = 0x400000,PRINTER_CHANGE_PORT = 0x700000,PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 0x1000000,PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 0x4000000,PRINTER_CHANGE_PRINT_PROCESSOR = 0x7000000,PRINTER_CHANGE_ADD_PRINTER_DRIVER = 0x10000000,PRINTER_CHANGE_SET_PRINTER_DRIVER = 0x20000000,PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 0x40000000,PRINTER_CHANGE_PRINTER_DRIVER = 0x70000000,PRINTER_CHANGE_TIMEOUT = 0x80000000,PRINTER_CHANGE_ALL = 0x7777FFFF,PRINTER_ERROR_INFORMATION = 0x80000000,PRINTER_ERROR_WARNING = 0x40000000,PRINTER_ERROR_SEVERE = 0x20000000,PRINTER_ERROR_OUTOFPAPER = 0x1,PRINTER_ERROR_JAM = 0x2,PRINTER_ERROR_OUTOFTONER = 0x4,};
enum MACRO_SEC_E_PERMISSIONDENIED {SEC_E_PERMISSIONDENIED = -2147217911,SEC_E_BADTRUSTEEID = -2147217814,SEC_E_NOTRUSTEEID = -2147217813,SEC_E_NOMEMBERSHIPSUPPORT = -2147217812,SEC_E_INVALIDOBJECT = -2147217811,SEC_E_NOOWNER = -2147217810,SEC_E_INVALIDACCESSENTRYLIST = -2147217809,SEC_E_INVALIDOWNER = -2147217808,SEC_E_INVALIDACCESSENTRY = -2147217807,};
enum MACRO_TAPIMAXCALLEDPARTYSIZE {TAPIMAXCALLEDPARTYSIZE = 40,TAPIMAXCOMMENTSIZE = 80,};
enum MACRO_TAPIMAXDESTADDRESSSIZE {TAPIMAXDESTADDRESSSIZE = 80,};
enum MACRO_TAPIMAXDEVICECLASSSIZE {TAPIMAXDEVICECLASSSIZE = 40,};
enum MACRO_URLACTION_AUTHENTICATE {URLACTION_AUTHENTICATE_CLIENT = 0x1A01,};
enum MACRO_URLPOLICY_AUTHENTICATE {URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0x0,URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 0x10000,URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 0x30000,};
enum MACRO_WSAEPROVIDERFAILEDINIT {WSAEPROVIDERFAILEDINIT = 10106,};
enum MACRO_dwMagicUncompressedRTF {dwMagicUncompressedRTF = 0x414C454D,};
enum MACRO_hrDatabaseInconsistent {hrDatabaseInconsistent = 0xC8000226,};
enum MACRO_hrDatabaseInvalidPages {hrDatabaseInvalidPages = 0xC80004B5,};
enum MACRO_hrDeleteBackupFileFail {hrDeleteBackupFileFail = 0xC800020C,};
enum MACRO_hrSessionWriteConflict {hrSessionWriteConflict = 0xC8000453,};
enum MACRO_hrTooManyOpenDatabases {hrTooManyOpenDatabases = 0xC8000403,};
enum MACRO_nDesiredConvDllVersion {nDesiredConvDllVersion = 1,};
enum MACRO_oledbIDBCreateCommand_ {oledbIDBCreateCommand__CreateCommand = 50031,};
enum MACRO_oledbIDBCreateSession_ {oledbIDBCreateSession__CreateSession = 50033,};
enum MACRO_oledbIIndexDefinition_ {oledbIIndexDefinition__CreateIndex = 50072,oledbIIndexDefinition__DropIndex = 50073,};
enum MACRO_oledbIMultipleResults_ {oledbIMultipleResults__GetResult = 50147,};
enum MACRO_oledbISupportErrorInfo {oledbISupportErrorInfo = 50124,};
enum MACRO_oledbITableDefinition_ {oledbITableDefinition__AddColumn = 50127,oledbITableDefinition__CreateTable = 50128,oledbITableDefinition__DropColumn = 50129,oledbITableDefinition__DropTable = 50130,};
enum MACRO_oledbITransactionJoin_ {oledbITransactionJoin__GetOptionsObject = 50136,oledbITransactionJoin__JoinTransaction = 50137,};
enum MACRO_oledbITransactionLocal {oledbITransactionLocal___ITransaction = 50138,oledbITransactionLocal__GetOptionsObject = 50139,oledbITransactionLocal__StartTransaction = 50140,};
enum MACRO_pidMessageWriteableMin {pidMessageWriteableMin = 0x6658,};
enum MACRO_tevtMessageTransferOut {tevtMessageTransferOut = 7,tevtReportTransferOut = 8,};
typedef struct _MEMORY_BASIC_INFORMATION_VLM MEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
typedef struct _NTMS_CHANGERTYPEINFORMATIONA NTMS_CHANGERTYPEINFORMATIONA;
typedef struct _NTMS_CHANGERTYPEINFORMATIONW NTMS_CHANGERTYPEINFORMATIONW;
typedef struct _NTMS_NOTIFICATIONINFORMATION NTMS_NOTIFICATIONINFORMATION;
enum NtmsReadWriteCharacteristics {NTMS_MEDIARW_UNKNOWN = 0x0,NTMS_MEDIARW_REWRITABLE = 0x1,NTMS_MEDIARW_WRITEONCE = 0x2,NTMS_MEDIARW_READONLY = 0x3,};
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _HTTP_FILTER_PREPROC_HEADERS *PHTTP_FILTER_PREPROC_HEADERS;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY *PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _F4219B4F960B4E0EA54950CBBE2CC12A *PLLC_DLC_SET_THRESHOLD_PARMS;
typedef struct _LSA_ENUMERATION_INFORMATION *PLSA_ENUMERATION_INFORMATION;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _POLICY_AUDIT_FULL_QUERY_INFO POLICY_AUDIT_FULL_QUERY_INFO;
typedef struct _POLICY_DOMAIN_PASSWORD_INFO *PPOLICY_DOMAIN_PASSWORD_INFO;
typedef struct _POLICY_LSA_SERVER_ROLE_INFO *PPOLICY_LSA_SERVER_ROLE_INFO;
typedef struct _POLICY_PRIVILEGE_DEFINITION *PPOLICY_PRIVILEGE_DEFINITION;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;
typedef struct _STATIC_SERVICES_TABLE_INDEX *PSTATIC_SERVICES_TABLE_INDEX;
typedef struct _WINDBG_OLDKD_EXTENSION_APIS *PWINDBG_OLDKD_EXTENSION_APIS;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SQL_CONNECT_CONNECTED_PARAMS SQL_CONNECT_CONNECTED_PARAMS;
typedef struct _SecPkgContext_ConnectionInfo SecPkgContext_ConnectionInfo;
typedef struct _SecPkgContext_IssuerListInfo SecPkgContext_IssuerListInfo;
typedef struct _SecPkgContext_PasswordExpiry SecPkgContext_PasswordExpiry;
enum ShellWindowFindWindowOptions {SWFO_NEEDDISPATCH = 0x1,SWFO_INCLUDEPENDING = 0x2,SWFO_COOKIEPASSED = 0x4,};
typedef void ( *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);
typedef struct _WSH_LOOKUP_NETDEF_ON_ADAPTER WSH_LOOKUP_NETDEF_ON_ADAPTER;
struct __MIDL_TriggerPublicRPC_0001 {short rgwSystemTime[8];};
struct __MIDL_TriggerPublicRPC_0003 {int rgdwServiceStatus[7];};
enum ADCPROP_UPDATECRITERIA_ENUM {adCriteriaKey = 0x0,adCriteriaAllCols = 0x1,adCriteriaUpdCols = 0x2,adCriteriaTimeStamp = 0x3,};
struct ADOConnectionConstruction15 {struct ADOConnectionConstruction15Vtbl *lpVtbl;};
typedef struct _70EF98671D92E01A751E5EFF82E819E9 ATM_CALLING_PARTY_NUMBER_IE;
struct CCertEncodeSampleStructure1;
struct CCertEncodeSampleStructure2;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO CERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO CERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_SAMPLE_STRUCTURE1_INFO CERT_SAMPLE_STRUCTURE1_INFO;
typedef struct _CERT_SAMPLE_STRUCTURE2_INFO CERT_SAMPLE_STRUCTURE2_INFO;
typedef struct _CHANGER_READ_ELEMENT_STATUS CHANGER_READ_ELEMENT_STATUS;
enum CLUSCTL_RESOURCE_TYPE_CODES {CLUSCTL_RESOURCE_TYPE_UNKNOWN = 0x2000000,CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 0x2000005,CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 0x2000009,CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 0x200000D,CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 0x2000011,CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 0x2000051,CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 0x2000055,CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 0x2000059,CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 0x2000061,CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 0x240005E,CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 0x2000079,CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 0x200007D,CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 0x2000081,CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 0x2400086,CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 0x2000089,CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 0x20000A9,CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 0x2000195,CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 0x250000A,CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 0x250000E,};
typedef signed int CM_REQUEST_TO_SEND_RECEIVED;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA CRYPT_KEY_SIGN_MESSAGE_PARA;
enum CommandStateChangeConstants {CSC_UPDATECOMMANDS = 0xFFFFFFFF,CSC_NAVIGATEFORWARD = 0x1,CSC_NAVIGATEBACK = 0x2,};
struct DispIHTMLInputButtonElement {struct DispIHTMLInputButtonElementVtbl *lpVtbl;};
typedef struct _FILE_ALLOCATED_RANGE_BUFFER FILE_ALLOCATED_RANGE_BUFFER;
typedef struct _E42E7BED0EE5193A4D0BC9D45E2008A3 GOPHER_ADMIN_ATTRIBUTE_TYPE;
typedef struct _3FBC325AC5E1830BAC7DB9619C6C90C8 GOPHER_SCORE_ATTRIBUTE_TYPE;
typedef struct _HTTP_FILTER_PREPROC_HEADERS HTTP_FILTER_PREPROC_HEADERS;
struct IASQLOLEUserDefinedDatatype {struct IASQLOLEUserDefinedDatatypeVtbl *lpVtbl;};
struct IActiveScriptParseProcedure {struct IActiveScriptParseProcedureVtbl *lpVtbl;};
struct IAgentAudioOutputProperties {struct IAgentAudioOutputPropertiesVtbl *lpVtbl;};
struct IAgentSpeechInputProperties {struct IAgentSpeechInputPropertiesVtbl *lpVtbl;};
struct IBPCEmailMessagesCollection {struct IBPCEmailMessagesCollectionVtbl *lpVtbl;};
struct ICertEncodeSampleStructure1 {struct ICertEncodeSampleStructure1Vtbl *lpVtbl;};
struct ICertEncodeSampleStructure2 {struct ICertEncodeSampleStructure2Vtbl *lpVtbl;};
struct IDtcLuRecoveryInitiatedByLu {struct IDtcLuRecoveryInitiatedByLuVtbl *lpVtbl;};
struct IDtcLuSubordinateDtcFactory {struct IDtcLuSubordinateDtcFactoryVtbl *lpVtbl;};
struct IEDKVirtualStreamOnProperty {struct IEDKVirtualStreamOnPropertyVtbl *lpVtbl;};
struct IGetClusterNetInterfaceInfo {struct IGetClusterNetInterfaceInfoVtbl *lpVtbl;};
struct IJavaEnumRemoteBooleanValue {struct IJavaEnumRemoteBooleanValueVtbl *lpVtbl;};
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY IMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
struct IOleInPlaceObjectWindowless {struct IOleInPlaceObjectWindowlessVtbl *lpVtbl;};
struct IRemoteDebugManagerCallback {struct IRemoteDebugManagerCallbackVtbl *lpVtbl;};
struct ISharedPropertyGroupManager {struct ISharedPropertyGroupManagerVtbl *lpVtbl;};
struct IShellIconOverlayIdentifier {struct IShellIconOverlayIdentifierVtbl *lpVtbl;};
struct ITransactionEnlistmentAsync {struct ITransactionEnlistmentAsyncVtbl *lpVtbl;};
struct ITransactionReceiverFactory {struct ITransactionReceiverFactoryVtbl *lpVtbl;};
struct IXMLElementNotificationSink {struct IXMLElementNotificationSinkVtbl *lpVtbl;};
typedef struct _F4219B4F960B4E0EA54950CBBE2CC12A LLC_DLC_SET_THRESHOLD_PARMS;
typedef struct IASQLOLEIntegratedSecurity *LPASQLOLEINTEGRATEDSECURITY;
typedef  DPCOMPOUNDADDRESSELEMENT *LPCDPCOMPOUNDADDRESSELEMENT;
typedef struct _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct IDirect3DRMProgressiveMesh *LPDIRECT3DRMPROGRESSIVEMESH;
typedef struct _7D8FD30789366CCEA8FE3DB6E0740A33 *LPDPMSG_CREATEPLAYERORGROUP;
typedef IExchExtAttachedFileEvents *LPEXCHEXTATTACHEDFILEEVENTS;
typedef struct _30CC7D53408649846FD423BE19D3AD21 *LPGOPHER_ASK_ATTRIBUTE_TYPE;
typedef struct _FEF45AADF86B3C581868F0239CC1F2BD *LPGOPHER_TTL_ATTRIBUTE_TYPE;
typedef struct _FB1D2264C317C52716420591CB70B7FC *LPINTERNET_CERTIFICATE_INFO;
typedef struct linemediacontrolcallstate_tag *LPLINEMEDIACONTROLCALLSTATE;
typedef struct _LOCALGROUP_MEMBERS_INFO_0 *LPLOCALGROUP_MEMBERS_INFO_0;
typedef struct _LOCALGROUP_MEMBERS_INFO_1 *LPLOCALGROUP_MEMBERS_INFO_1;
typedef struct _LOCALGROUP_MEMBERS_INFO_2 *LPLOCALGROUP_MEMBERS_INFO_2;
typedef struct _LOCALGROUP_MEMBERS_INFO_3 *LPLOCALGROUP_MEMBERS_INFO_3;
typedef struct IDirect3DRMViewportArray **LPLPDIRECT3DRMVIEWPORTARRAY;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;
typedef struct _LSA_ENUMERATION_INFORMATION LSA_ENUMERATION_INFORMATION;
enum MACRO_ACM_FILTERTAGDETAILSF {ACM_FILTERTAGDETAILSF_INDEX = 0x0,ACM_FILTERTAGDETAILSF_FILTERTAG = 0x1,ACM_FILTERTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FILTERTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_ACM_FORMATTAGDETAILSF {ACM_FORMATTAGDETAILSF_INDEX = 0x0,ACM_FORMATTAGDETAILSF_FORMATTAG = 0x1,ACM_FORMATTAGDETAILSF_LARGESTSIZE = 0x2,ACM_FORMATTAGDETAILSF_QUERYMASK = 0xF,};
enum MACRO_CACHE_ENTRY_ATTRIBUTE {CACHE_ENTRY_ATTRIBUTE_FC = 0x4,CACHE_ENTRY_HITRATE_FC = 0x10,CACHE_ENTRY_MODTIME_FC = 0x40,CACHE_ENTRY_EXPTIME_FC = 0x80,CACHE_ENTRY_ACCTIME_FC = 0x100,CACHE_ENTRY_SYNCTIME_FC = 0x200,CACHE_ENTRY_HEADERINFO_FC = 0x400,CACHE_ENTRY_EXEMPT_DELTA_FC = 0x800,};
enum MACRO_DIPROPCALIBRATIONMODE {DIPROPCALIBRATIONMODE_COOKED = 0,DIPROPCALIBRATIONMODE_RAW = 1,};
enum MACRO_DISPID_BEFORENAVIGATE {DISPID_BEFORENAVIGATE = 100,DISPID_NAVIGATECOMPLETE = 101,DISPID_STATUSTEXTCHANGE = 102,DISPID_QUIT = 103,DISPID_DOWNLOADCOMPLETE = 104,DISPID_COMMANDSTATECHANGE = 105,DISPID_DOWNLOADBEGIN = 106,DISPID_NEWWINDOW = 107,DISPID_PROGRESSCHANGE = 108,DISPID_WINDOWMOVE = 109,DISPID_WINDOWRESIZE = 110,DISPID_WINDOWACTIVATE = 111,DISPID_PROPERTYCHANGE = 112,DISPID_TITLECHANGE = 113,DISPID_FRAMEBEFORENAVIGATE = 200,DISPID_FRAMENAVIGATECOMPLETE = 201,DISPID_FRAMENEWWINDOW = 204,DISPID_BEFORENAVIGATE2 = 250,DISPID_NEWWINDOW2 = 251,DISPID_NAVIGATECOMPLETE2 = 252,DISPID_ONQUIT = 253,DISPID_ONVISIBLE = 254,DISPID_ONTOOLBAR = 255,DISPID_ONMENUBAR = 256,DISPID_ONSTATUSBAR = 257,DISPID_ONFULLSCREEN = 258,DISPID_DOCUMENTCOMPLETE = 259,DISPID_ONTHEATERMODE = 260,DISPID_ONADDRESSBAR = 261,DISPID_SELECTIONCHANGED = 200,DISPID_WINDOWREGISTERED = 200,DISPID_WINDOWREVOKED = 201,DISPID_RESETFIRSTBOOTMODE = 1,DISPID_RESETSAFEMODE = 2,DISPID_REFRESHOFFLINEDESKTOP = 3,DISPID_ADDFAVORITE = 4,DISPID_ADDCHANNEL = 5,DISPID_ADDDESKTOPCOMPONENT = 6,DISPID_ISSUBSCRIBED = 7,DISPID_SHELLUIHELPERLAST = 7,};
enum MACRO_DLG_SCRNSAVECONFIGURE {DLG_SCRNSAVECONFIGURE = 2003,};
enum MACRO_DPENUMGROUPS_SHORTCUT {DPENUMGROUPS_SHORTCUT = 0x400,DPENUMGROUPS_STAGINGAREA = 0x800,};
enum MACRO_LOCALE_NOUSEROVERRIDE {LOCALE_NOUSEROVERRIDE = 0x80000000,LOCALE_USE_CP_ACP = 0x40000000,LOCALE_RETURN_NUMBER = 0x20000000,LOCALE_ILANGUAGE = 0x1,LOCALE_SLANGUAGE = 0x2,LOCALE_SENGLANGUAGE = 0x1001,LOCALE_SABBREVLANGNAME = 0x3,LOCALE_SNATIVELANGNAME = 0x4,LOCALE_ICOUNTRY = 0x5,LOCALE_SCOUNTRY = 0x6,LOCALE_SENGCOUNTRY = 0x1002,LOCALE_SABBREVCTRYNAME = 0x7,LOCALE_SNATIVECTRYNAME = 0x8,LOCALE_IDEFAULTLANGUAGE = 0x9,LOCALE_IDEFAULTCOUNTRY = 0xA,LOCALE_IDEFAULTCODEPAGE = 0xB,LOCALE_IDEFAULTANSICODEPAGE = 0x1004,LOCALE_IDEFAULTMACCODEPAGE = 0x1011,LOCALE_SLIST = 0xC,LOCALE_IMEASURE = 0xD,LOCALE_SDECIMAL = 0xE,LOCALE_STHOUSAND = 0xF,LOCALE_SGROUPING = 0x10,LOCALE_IDIGITS = 0x11,LOCALE_ILZERO = 0x12,LOCALE_INEGNUMBER = 0x1010,LOCALE_SNATIVEDIGITS = 0x13,LOCALE_SCURRENCY = 0x14,LOCALE_SINTLSYMBOL = 0x15,LOCALE_SMONDECIMALSEP = 0x16,LOCALE_SMONTHOUSANDSEP = 0x17,LOCALE_SMONGROUPING = 0x18,LOCALE_ICURRDIGITS = 0x19,LOCALE_IINTLCURRDIGITS = 0x1A,LOCALE_ICURRENCY = 0x1B,LOCALE_INEGCURR = 0x1C,LOCALE_SDATE = 0x1D,LOCALE_STIME = 0x1E,LOCALE_SSHORTDATE = 0x1F,LOCALE_SLONGDATE = 0x20,LOCALE_STIMEFORMAT = 0x1003,LOCALE_IDATE = 0x21,LOCALE_ILDATE = 0x22,LOCALE_ITIME = 0x23,LOCALE_ITIMEMARKPOSN = 0x1005,LOCALE_ICENTURY = 0x24,LOCALE_ITLZERO = 0x25,LOCALE_IDAYLZERO = 0x26,LOCALE_IMONLZERO = 0x27,LOCALE_S1159 = 0x28,LOCALE_S2359 = 0x29,LOCALE_ICALENDARTYPE = 0x1009,LOCALE_IOPTIONALCALENDAR = 0x100B,LOCALE_IFIRSTDAYOFWEEK = 0x100C,LOCALE_IFIRSTWEEKOFYEAR = 0x100D,LOCALE_SDAYNAME1 = 0x2A,LOCALE_SDAYNAME2 = 0x2B,LOCALE_SDAYNAME3 = 0x2C,LOCALE_SDAYNAME4 = 0x2D,LOCALE_SDAYNAME5 = 0x2E,LOCALE_SDAYNAME6 = 0x2F,LOCALE_SDAYNAME7 = 0x30,LOCALE_SABBREVDAYNAME1 = 0x31,LOCALE_SABBREVDAYNAME2 = 0x32,LOCALE_SABBREVDAYNAME3 = 0x33,LOCALE_SABBREVDAYNAME4 = 0x34,LOCALE_SABBREVDAYNAME5 = 0x35,LOCALE_SABBREVDAYNAME6 = 0x36,LOCALE_SABBREVDAYNAME7 = 0x37,LOCALE_SMONTHNAME1 = 0x38,LOCALE_SMONTHNAME2 = 0x39,LOCALE_SMONTHNAME3 = 0x3A,LOCALE_SMONTHNAME4 = 0x3B,LOCALE_SMONTHNAME5 = 0x3C,LOCALE_SMONTHNAME6 = 0x3D,LOCALE_SMONTHNAME7 = 0x3E,LOCALE_SMONTHNAME8 = 0x3F,LOCALE_SMONTHNAME9 = 0x40,LOCALE_SMONTHNAME10 = 0x41,LOCALE_SMONTHNAME11 = 0x42,LOCALE_SMONTHNAME12 = 0x43,LOCALE_SMONTHNAME13 = 0x100E,LOCALE_SABBREVMONTHNAME1 = 0x44,LOCALE_SABBREVMONTHNAME2 = 0x45,LOCALE_SABBREVMONTHNAME3 = 0x46,LOCALE_SABBREVMONTHNAME4 = 0x47,LOCALE_SABBREVMONTHNAME5 = 0x48,LOCALE_SABBREVMONTHNAME6 = 0x49,LOCALE_SABBREVMONTHNAME7 = 0x4A,LOCALE_SABBREVMONTHNAME8 = 0x4B,LOCALE_SABBREVMONTHNAME9 = 0x4C,LOCALE_SABBREVMONTHNAME10 = 0x4D,LOCALE_SABBREVMONTHNAME11 = 0x4E,LOCALE_SABBREVMONTHNAME12 = 0x4F,LOCALE_SABBREVMONTHNAME13 = 0x100F,LOCALE_SPOSITIVESIGN = 0x50,LOCALE_SNEGATIVESIGN = 0x51,LOCALE_IPOSSIGNPOSN = 0x52,LOCALE_INEGSIGNPOSN = 0x53,LOCALE_IPOSSYMPRECEDES = 0x54,LOCALE_IPOSSEPBYSPACE = 0x55,LOCALE_INEGSYMPRECEDES = 0x56,LOCALE_INEGSEPBYSPACE = 0x57,LOCALE_FONTSIGNATURE = 0x58,LOCALE_SISO639LANGNAME = 0x59,LOCALE_SISO3166CTRYNAME = 0x5A,LOCALE_IDEFAULTEBCDICCODEPAGE = 0x1012,LOCALE_IPAPERSIZE = 0x100A,LOCALE_SENGCURRNAME = 0x1007,LOCALE_SNATIVECURRNAME = 0x1008,LOCALE_SYEARMONTH = 0x1006,LOCALE_SSORTNAME = 0x1013,LOCALE_IDIGITSUBSTITUTION = 0x1014,};
enum MACRO_MAXLOGICALLOGNAMESIZE {MAXLOGICALLOGNAMESIZE = 256,};
enum MACRO_MCM_SETFIRSTDAYOFWEEK {MCM_SETFIRSTDAYOFWEEK = 4111,MCM_GETFIRSTDAYOFWEEK = 4112,MCM_GETRANGE = 4113,MCM_SETRANGE = 4114,MCM_GETMONTHDELTA = 4115,MCM_SETMONTHDELTA = 4116,MCM_GETMAXTODAYWIDTH = 4117,MCM_SETUNICODEFORMAT = 8197,MCM_GETUNICODEFORMAT = 8198,};
enum MACRO_NUMOFERRRETURNEDTOAPP {NUMOFERRRETURNEDTOAPP = 62,};
enum MACRO_PDTS_COMPRESS2NDDERIV {PDTS_COMPRESS2NDDERIV = 0x10,PDTS_COMPRESSMETHOD = 0xF0,PDTS_NOPENINFO = 0x100,PDTS_NOUPPOINTS = 0x200,PDTS_NOOEMDATA = 0x400,PDTS_NOCOLLINEAR = 0x800,PDTS_NOCOLINEAR = 0x800,PDTS_NOTICK = 0x1000,PDTS_NOUSER = 0x2000,PDTS_NOEMPTYSTROKES = 0x4000,PDTS_COMPRESSED = 0x8000,};
enum MACRO_REGSTR_VAL_BACKBITMAP {REGSTR_VAL_BACKBITMAP_TYPE = 1,REGSTR_VAL_SCHANNELENABLEPROTOCOL_TYPE = 4,REGSTR_VAL_SCHANNELENABLEPROTOCOL_DEF = 1,REGSTR_VAL_DEFAULT_CODEPAGE_TYPE = 1,REGSTR_VAL_ACCETP_LANGUAGE_TYPE = 1,REGSTR_VAL_FONT_SCRIPT_TYPE = 1,REGSTR_VAL_DEF_ENCODING_TYPE = 1,REGSTR_VAL_DEF_INETENCODING_TYPE = 4,REGSTR_VAL_FIXED_FONT_TYPE = 1,REGSTR_VAL_PROP_FONT_TYPE = 1,REGSTR_VAL_FONT_SIZE_TYPE = 3,REGSTR_VAL_FONT_SIZE_DEF = 2,REGSTR_VAL_AUTODETECT_TYPE = 1,REGSTR_VAL_CODEPAGE_TYPE = 4,REGSTR_VAL_INETENCODING_TYPE = 4,REGSTR_VAL_FAMILY_TYPE = 4,REGSTR_VAL_LEVEL_TYPE = 4,REGSTR_VAL_ALIASTO_TYPE = 1,REGSTR_VAL_ENCODENAME_TYPE = 1,REGSTR_VAL_DESCRIPTION_TYPE = 1,REGSTR_VAL_WEBCHARSET_TYPE = 1,REGSTR_VAL_BODYCHARSET_TYPE = 1,REGSTR_VAL_HEADERCHARSET_TYPE = 1,REGSTR_VAL_FIXEDWIDTHFONT_TYPE = 1,REGSTR_VAL_PROPOPRTIONALFONT_TYPE = 1,REGSTR_VAL_PRIVCONVERTER_TYPE = 1,};
enum MACRO_TOTALJOURNALINPACKETS {TOTALJOURNALINPACKETS = 44,};
enum MACRO_cchMaxCreateMSNetwork {cchMaxCreateMSNetwork = 11,};
enum MACRO_ckidSTREAMHANDLERDATA {ckidSTREAMHANDLERDATA = 1685222515,};
enum MACRO_dispidGlobalStartTime {dispidGlobalStartTime = 4006,};
enum MACRO_dispidIsModalDialogUp {dispidIsModalDialogUp = 4004,};
enum MACRO_fdexNameCaseSensitive {fdexNameCaseSensitive = 0x1,fdexNameEnsure = 0x2,fdexNameImplicit = 0x4,fdexNameCaseInsensitive = 0x8,};
enum MACRO_hrAfterInitialization {hrAfterInitialization = 0xC800073A,};
enum MACRO_hrBackupNotAllowedYet {hrBackupNotAllowedYet = 0xC800020B,};
enum MACRO_hrDatabaseInvalidName {hrDatabaseInvalidName = 0xC80004B4,};
enum MACRO_hrFeatureNotAvailable {hrFeatureNotAvailable = 0xC80003E9,};
enum MACRO_hrRecoveredWithErrors {hrRecoveredWithErrors = 0xC800020F,};
enum MACRO_oledbICommandPrepare_ {oledbICommandPrepare__Prepare = 50016,oledbICommandPrepare__Unprepare = 50017,};
enum MACRO_oledbIDBCreateCommand {oledbIDBCreateCommand = 50030,};
enum MACRO_oledbIDBCreateSession {oledbIDBCreateSession = 50032,};
enum MACRO_oledbIDBSchemaRowset_ {oledbIDBSchemaRowset__GetRowset = 50050,oledbIDBSchemaRowset__GetSchemas = 50051,};
enum MACRO_oledbIIndexDefinition {oledbIIndexDefinition = 50071,};
enum MACRO_oledbIMultipleResults {oledbIMultipleResults = 50146,};
enum MACRO_oledbIRowsetIdentity_ {oledbIRowsetIdentity__IsSameRow = 50087,};
enum MACRO_oledbITableDefinition {oledbITableDefinition = 50126,};
enum MACRO_oledbITransactionJoin {oledbITransactionJoin = 50135,};
enum MACRO_pidMessageReadOnlyMin {pidMessageReadOnlyMin = 0x6640,};
enum MACRO_tevtMessageTransferIn {tevtMessageTransferIn = 0,tevtReportTransferIn = 2,tevtMessageSubmission = 4,};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
typedef struct _NTMS_LIBREQUESTINFORMATIONA NTMS_LIBREQUESTINFORMATIONA;
typedef struct _NTMS_LIBREQUESTINFORMATIONW NTMS_LIBREQUESTINFORMATIONW;
typedef struct _NTMS_STORAGESLOTINFORMATION NTMS_STORAGESLOTINFORMATION;
struct OLEDBSimpleProviderListener {struct OLEDBSimpleProviderListenerVtbl *lpVtbl;};
typedef struct _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef union _87B5C366CEDD06D1A6AC557671C7F981 *PKSPROPERTY_BOUNDS_LONGLONG;
typedef struct _782F046A0E8041278EBDE36B024DE05B *PLLC_DIR_OPEN_ADAPTER_PARMS;
typedef struct _D916DB49F0BCC31D2F37C460432A7C94 *PLLC_DLC_OPEN_STATION_PARMS;
typedef struct _1548BBD1D24884F45375B762909DAFED *PLLC_EXTENDED_ADAPTER_PARMS;
typedef struct _89CF5CC4DDEE16BF1FDCA78B7BAB1123 *PLLC_TRACE_INITIALIZE_PARMS;
typedef struct _LSA_REFERENCED_DOMAIN_LIST *PLSA_REFERENCED_DOMAIN_LIST;
typedef struct tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
typedef struct tagNTSEC_DISPATCH_VERSION_1_1 *PNTSEC_DISPATCH_VERSION_1_1;
typedef struct tagNTSEC_DISPATCH_VERSION_1_2 *PNTSEC_DISPATCH_VERSION_1_2;
typedef struct _POLICY_DOMAIN_PASSWORD_INFO POLICY_DOMAIN_PASSWORD_INFO;
typedef struct _POLICY_LSA_SERVER_ROLE_INFO POLICY_LSA_SERVER_ROLE_INFO;
typedef struct _POLICY_PRIVILEGE_DEFINITION POLICY_PRIVILEGE_DEFINITION;
typedef struct _POLICY_ACCOUNT_DOMAIN_INFO *PPOLICY_ACCOUNT_DOMAIN_INFO;
typedef struct _POLICY_AUDIT_FULL_SET_INFO *PPOLICY_AUDIT_FULL_SET_INFO;
typedef struct _POLICY_DOMAIN_LOCKOUT_INFO *PPOLICY_DOMAIN_LOCKOUT_INFO;
typedef struct _POLICY_PRIMARY_DOMAIN_INFO *PPOLICY_PRIMARY_DOMAIN_INFO;
typedef struct _POLICY_REPLICA_SOURCE_INFO *PPOLICY_REPLICA_SOURCE_INFO;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE PRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _SSL_CREDENTIAL_CERTIFICATE *PSSL_CREDENTIAL_CERTIFICATE;
typedef struct _SecPkgContext_PackageInfoA *PSecPkgContext_PackageInfoA;
typedef struct _SecPkgContext_PackageInfoW *PSecPkgContext_PackageInfoW;
typedef struct _SecPkgCred_CipherStrengths *PSecPkgCred_CipherStrengths;
typedef struct _RECOVERY_AGENT_INFORMATIONA RECOVERY_AGENT_INFORMATIONA;
typedef struct _RECOVERY_AGENT_INFORMATIONW RECOVERY_AGENT_INFORMATIONW;
typedef struct _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
typedef struct tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
typedef struct _STATIC_SERVICES_TABLE_INDEX STATIC_SERVICES_TABLE_INDEX;
enum ShellSpecialFolderConstants {ssfDESKTOP = 0x0,ssfPROGRAMS = 0x2,ssfCONTROLS = 0x3,ssfPRINTERS = 0x4,ssfPERSONAL = 0x5,ssfFAVORITES = 0x6,ssfSTARTUP = 0x7,ssfRECENT = 0x8,ssfSENDTO = 0x9,ssfBITBUCKET = 0xA,ssfSTARTMENU = 0xB,ssfDESKTOPDIRECTORY = 0x10,ssfDRIVES = 0x11,ssfNETWORK = 0x12,ssfNETHOOD = 0x13,ssfFONTS = 0x14,ssfTEMPLATES = 0x15,};
typedef unsigned int ( *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);
typedef struct _WINDBG_OLDKD_EXTENSION_APIS WINDBG_OLDKD_EXTENSION_APIS;
typedef struct x25_physical_link_info_sect X25_PHYSICAL_LINK_INFO_SECT;
enum _MULTIPLE_TRUSTEE_OPERATION {NO_MULTIPLE_TRUSTEE = 0x0,TRUSTEE_IS_IMPERSONATE = 0x1,};
enum _POLICY_SERVER_ENABLE_STATE {PolicyServerEnabled = 0x2,PolicyServerDisabled = 0x3,};
enum tagAM_SAMPLE_PROPERTY_FLAGS {AM_SAMPLE_SPLICEPOINT = 0x1,AM_SAMPLE_PREROLL = 0x2,AM_SAMPLE_DATADISCONTINUITY = 0x4,AM_SAMPLE_TYPECHANGED = 0x8,AM_SAMPLE_TIMEVALID = 0x10,AM_SAMPLE_TIMEDISCONTINUITY = 0x40,AM_SAMPLE_FLUSH_ON_PAUSE = 0x80,AM_SAMPLE_STOPVALID = 0x100,AM_SAMPLE_ENDOFSTREAM = 0x200,AM_STREAM_MEDIA = 0x0,AM_STREAM_CONTROL = 0x1,};
struct x25_physical_link_info_sect {unsigned int x25_init_sect_len;unsigned short num_x25_links;unsigned short num_x25_link_entries;};
typedef struct _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO CERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO CERT_POLICY_QUALIFIER_INFO;
enum CLUSCTL_NETINTERFACE_CODES {CLUSCTL_NETINTERFACE_UNKNOWN = 0x6000000,CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 0x6000005,CLUSCTL_NETINTERFACE_GET_FLAGS = 0x6000009,CLUSCTL_NETINTERFACE_GET_NAME = 0x6000029,CLUSCTL_NETINTERFACE_GET_ID = 0x6000039,CLUSCTL_NETINTERFACE_GET_NODE = 0x6000031,CLUSCTL_NETINTERFACE_GET_NETWORK = 0x6000035,CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 0x6000051,CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 0x6000055,CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 0x6000059,CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 0x640005E,CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 0x6000061,CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 0x6000079,CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 0x600007D,CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 0x6000081,CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 0x6400086,CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 0x6000089,};
enum CLUSTER_NETINTERFACE_STATE {ClusterNetInterfaceStateUnknown = 0xFFFFFFFF,ClusterNetInterfaceUnavailable = 0x0,ClusterNetInterfaceFailed = 0x1,ClusterNetInterfaceUnreachable = 0x2,ClusterNetInterfaceUp = 0x3,};
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO CMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO CMSG_ENVELOPED_ENCODE_INFO;
typedef signed int CM_PREPARE_TO_RECEIVE_TYPE;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER CRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE CRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA CRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA CRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct creative_fastspeechformat_tag DIALOGICOKIADPCMWAVEFORMAT;
typedef DIDEVICEOBJECTINSTANCE_DX3A DIDEVICEOBJECTINSTANCE_DX3;
typedef struct _DPLMSG_GETPROPERTYRESPONSE DPLMSG_GETPROPERTYRESPONSE;
typedef struct _DPLMSG_SETPROPERTYRESPONSE DPLMSG_SETPROPERTYRESPONSE;
typedef struct _047A9D6DB9EB3B65E20B29F40C814688 DPMSG_DESTROYPLAYERORGROUP;
typedef struct _87B38C5BC85AA4DC076D4608CF4D41BB DPMSG_SETPLAYERORGROUPDATA;
typedef struct _9186133EF552B6DB84C666EDEF474133 DPMSG_SETPLAYERORGROUPNAME;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION FILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER FSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct _21B90258E17C8B6D2BC61A88DF74B5FB GOPHER_SITE_ATTRIBUTE_TYPE;
typedef struct _6950E4854C03824D44DF624674A695D1 GOPHER_VIEW_ATTRIBUTE_TYPE;
struct HTMLInputFileElementEvents {struct HTMLInputFileElementEventsVtbl *lpVtbl;};
struct HTMLInputTextElementEvents {struct HTMLInputTextElementEventsVtbl *lpVtbl;};
struct IAMCopyCaptureFileProgress {struct IAMCopyCaptureFileProgressVtbl *lpVtbl;};
struct IASQLOLEIntegratedSecurity {struct IASQLOLEIntegratedSecurityVtbl *lpVtbl;};
struct IBPCHistoryItemsCollection {struct IBPCHistoryItemsCollectionVtbl *lpVtbl;};
struct IDirect3DRMProgressiveMesh {struct IDirect3DRMProgressiveMeshVtbl *lpVtbl;};
struct IExchExtAttachedFileEvents {struct IExchExtAttachedFileEventsVtbl *lpVtbl;};
struct IHTMLStyleSheetsCollection {struct IHTMLStyleSheetsCollectionVtbl *lpVtbl;};
struct IID_IResourceManagerClient {struct IID_IResourceManagerClientVtbl *lpVtbl;};
struct IJavaEnumRemoteDoubleValue {struct IJavaEnumRemoteDoubleValueVtbl *lpVtbl;};
struct IJavaEnumRemoteThreadGroup {struct IJavaEnumRemoteThreadGroupVtbl *lpVtbl;};
struct IMSAdminCryptoCapabilities {struct IMSAdminCryptoCapabilitiesVtbl *lpVtbl;};
typedef struct _INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFOA;
typedef struct _INTERNET_CACHE_ENTRY_INFOW INTERNET_CACHE_ENTRY_INFOW;
struct ITAddressEventNotification {struct ITAddressEventNotificationVtbl *lpVtbl;};
struct ITMultiChannelNotification {struct ITMultiChannelNotificationVtbl *lpVtbl;};
typedef union _87B5C366CEDD06D1A6AC557671C7F981 KSPROPERTY_BOUNDS_LONGLONG;
typedef struct _782F046A0E8041278EBDE36B024DE05B LLC_DIR_OPEN_ADAPTER_PARMS;
typedef struct _D916DB49F0BCC31D2F37C460432A7C94 LLC_DLC_OPEN_STATION_PARMS;
typedef struct _1548BBD1D24884F45375B762909DAFED LLC_EXTENDED_ADAPTER_PARMS;
typedef struct _89CF5CC4DDEE16BF1FDCA78B7BAB1123 LLC_TRACE_INITIALIZE_PARMS;
typedef struct IASQLOLERegisteredServers *LPASQLOLEREGISTEREDSERVERS;
typedef  DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;
typedef  DIDEVICEOBJECTINSTANCEW *LPCDIDEVICEOBJECTINSTANCEW;
typedef IConnectionPointContainer *LPCONNECTIONPOINTCONTAINER;
typedef struct _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;
typedef struct IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;
typedef struct DPCOMPOUNDADDRESSELEMENT *LPDPCOMPOUNDADDRESSELEMENT;
typedef struct IDirect3DRMAnimationSet **LPLPDIRECT3DRMANIMATIONSET;
typedef struct IDirect3DRMInterpolator **LPLPDIRECT3DRMINTERPOLATOR;
typedef struct IDirect3DRMMeshBuilder2 **LPLPDIRECT3DRMMESHBUILDER2;
typedef struct IDirect3DRMPicked2Array **LPLPDIRECT3DRMPICKED2ARRAY;
typedef IOleInPlaceSiteWindowless *LPOLEINPLACESITEWINDOWLESS;
typedef struct _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;
typedef IProvideMultipleClassInfo *LPPROVIDEMULTIPLECLASSINFO;
typedef struct _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;
typedef struct _LSA_REFERENCED_DOMAIN_LIST LSA_REFERENCED_DOMAIN_LIST;
enum MACRO_CALLBACK_DISCONTINUE {CALLBACK_DISCONTINUE = 0x80000000,};
enum MACRO_CTL3D_CTLCOLORMSGBOX {CTL3D_CTLCOLORMSGBOX = 4593,CTL3D_CTLCOLOREDIT = 4594,CTL3D_CTLCOLORLISTBOX = 4595,CTL3D_CTLCOLORBTN = 4596,CTL3D_CTLCOLORSCROLLBAR = 4597,CTL3D_CTLCOLORSTATIC = 4598,CTL3D_CTLCOLORDLG = 4599,CTL3D_3DCHECK = 26567,};
enum MACRO_D3DRMGENERATENORMALS {D3DRMGENERATENORMALS_PRECOMPACT = 1,D3DRMGENERATENORMALS_USECREASEANGLE = 2,};
enum MACRO_DDSCAPS_DATAEXCHANGE {DDSCAPS_DATAEXCHANGE = 18432,};
enum MACRO_DOUBLE_MAXIMUM_VALUE {DOUBLE_MAXIMUM_VALUE_HIGH = 0x7FEFFFFF,DOUBLE_MAXIMUM_VALUE_LOW = 0xFFFFFFFF,};
enum MACRO_ENABLERELATIVEWIDTHS {ENABLERELATIVEWIDTHS = 768,};
enum MACRO_FLAG_EMBEDDEDPROFILE {FLAG_EMBEDDEDPROFILE = 0x1,FLAG_DEPENDENTONDATA = 0x2,};
enum MACRO_IDS_BZRESULTTEXTBUSY {IDS_BZRESULTTEXTBUSY = 32447,IDS_BZRESULTTEXTNOTRESPONDING = 32448,IDS_LINK_AUTO = 32450,IDS_LINK_MANUAL = 32451,IDS_LINK_UNKNOWN = 32452,IDS_LINKS = 32453,IDS_FAILED = 32454,IDS_CHANGESOURCE = 32455,IDS_INVALIDSOURCE = 32456,IDS_ERR_GETLINKSOURCE = 32457,IDS_ERR_GETLINKUPDATEOPTIONS = 32458,IDS_ERR_ADDSTRING = 32459,IDS_CHANGEADDITIONALLINKS = 32460,IDS_CLOSE = 32461,};
enum MACRO_IoctlCodeSetLinkChar {IoctlCodeSetLinkChar = 0x420,};
enum MACRO_LAST_LINEREQUESTMODE {LAST_LINEREQUESTMODE = 2,};
enum MACRO_LVM_GETISEARCHSTRING {LVM_GETISEARCHSTRING = 4148,};
enum MACRO_SBN_SIMPLEMODECHANGE {SBN_SIMPLEMODECHANGE = -880,};
enum MACRO_SCHANNEL_RENEGOTIATE {SCHANNEL_RENEGOTIATE = 0,SCHANNEL_SHUTDOWN = 1,};
enum MACRO_SECURITY_INFORMATION {OWNER_SECURITY_INFORMATION = 0x1,GROUP_SECURITY_INFORMATION = 0x2,DACL_SECURITY_INFORMATION = 0x4,SACL_SECURITY_INFORMATION = 0x8,};
enum MACRO_VERSIONFILEFLAGSMASK {VERSIONFILEFLAGSMASK = 0x30003F,};
enum MACRO_WAPPCVERNOTSUPPORTED {WAPPCVERNOTSUPPORTED = 0xF004,};
enum MACRO_WCPICVERNOTSUPPORTED {WCPICVERNOTSUPPORTED = 0xF004,};
enum MACRO_WLUASTARTUPNOTCALLED {WLUASTARTUPNOTCALLED = 11,};
enum MACRO_WSAEINVALIDPROCTABLE {WSAEINVALIDPROCTABLE = 10104,};
enum MACRO_cchMaxValidateMSName {cchMaxValidateMSName = 11,};
enum MACRO_dispidDeleteReminder {dispidDeleteReminder = 4015,};
enum MACRO_dispidHasEnhancement {dispidHasEnhancement = 4016,};
enum MACRO_dispidIsChannelBarUp {dispidIsChannelBarUp = 4003,};
enum MACRO_dispidIsLoaderActive {dispidIsLoaderActive = 4005,};
enum MACRO_dwMagicCompressedRTF {dwMagicCompressedRTF = 0x75465A4C,};
enum MACRO_ecProxyDLLContention {ecProxyDLLContention = 50013,};
enum MACRO_errVtoEOFDuringFetch {errVtoEOFDuringFetch = -30029,};
enum MACRO_errVtoRowLenTooSmall {errVtoRowLenTooSmall = -30032,};
enum MACRO_hrAlreadyInitialized {hrAlreadyInitialized = 0xC8000406,};
enum MACRO_hrColumnMaxTruncated {hrColumnMaxTruncated = 0x880005E8,};
enum MACRO_hrColumnNotUpdatable {hrColumnNotUpdatable = 0xC8000418,};
enum MACRO_hrCommunicationError {hrCommunicationError = 0xC7FF000D,};
enum MACRO_hrFLDTooManySegments {hrFLDTooManySegments = 0xC8000191,};
enum MACRO_hrFullBackupNotTaken {hrFullBackupNotTaken = 0xC7FF000E,};
enum MACRO_hrInvalidLogSequence {hrInvalidLogSequence = 0xC8000203,};
enum MACRO_hrOutOfDatabaseSpace {hrOutOfDatabaseSpace = 0xC80003F4,};
enum MACRO_hrTooManyActiveUsers {hrTooManyActiveUsers = 0xC8000423,};
enum MACRO_hrTooManyOpenIndexes {hrTooManyOpenIndexes = 0xC8000582,};
enum MACRO_infotypeDIGITIZATION {infotypeDIGITIZATION_TIME = 1414087753,infotypeSMPTE_TIME = 1347244873,};
enum MACRO_listtypeSTREAMHEADER {listtypeSTREAMHEADER = 1819440243,};
enum MACRO_oledbIColumnsRowset_ {oledbIColumnsRowset__GetAvailableColumns = 50009,oledbIColumnsRowset__GetColumnsRowset = 50010,};
enum MACRO_oledbICommandPrepare {oledbICommandPrepare = 50015,};
enum MACRO_oledbIDBSchemaRowset {oledbIDBSchemaRowset = 50049,};
enum MACRO_oledbIGetDataSource_ {oledbIGetDataSource__GetDataSource = 50070,};
enum MACRO_oledbIRowsetIdentity {oledbIRowsetIdentity = 50086,};
enum MACRO_oledbIRowsetResynch_ {oledbIRowsetResynch__GetVisibleData = 50106,oledbIRowsetResynch__ResynchRows = 50107,};
enum MACRO_oledbISourcesRowset_ {oledbISourcesRowset__GetSourcesRowset = 50121,};
enum MACRO_pidAttachReadOnlyMin {pidAttachReadOnlyMin = 0x666C,};
enum MACRO_tevtReportAbsorption {tevtReportAbsorption = 33,};
enum MACRO_trpidResolvedAddress {trpidResolvedAddress = 0x3,trpidOneOff = 0x4,};
typedef struct tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
typedef struct _NTMS_DRIVETYPEINFORMATIONA NTMS_DRIVETYPEINFORMATIONA;
typedef struct _NTMS_DRIVETYPEINFORMATIONW NTMS_DRIVETYPEINFORMATIONW;
typedef struct _NTMS_OPREQUESTINFORMATIONA NTMS_OPREQUESTINFORMATIONA;
typedef struct _NTMS_OPREQUESTINFORMATIONW NTMS_OPREQUESTINFORMATIONW;
typedef struct _NTMS_PARTITIONINFORMATIONA NTMS_PARTITIONINFORMATIONA;
typedef struct _NTMS_PARTITIONINFORMATIONW NTMS_PARTITIONINFORMATIONW;
typedef struct tagNTSEC_DISPATCH_VERSION_1_1 NTSEC_DISPATCH_VERSION_1_1;
typedef struct tagNTSEC_DISPATCH_VERSION_1_2 NTSEC_DISPATCH_VERSION_1_2;
enum NtmsNotificationOperations {NTMS_OBJ_UPDATE = 0x1,NTMS_OBJ_INSERT = 0x2,NTMS_OBJ_DELETE = 0x3,};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct AM_DVDCOPY_SET_COPY_STATE *PAM_DVDCOPY_SET_COPY_STATE;
typedef struct _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;
typedef struct _FULL_PTR_TO_REFID_ELEMENT *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _HTTP_FILTER_ACCESS_DENIED *PHTTP_FILTER_ACCESS_DENIED;
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL *PIMAGEHLP_DUPLICATE_SYMBOL;
typedef struct _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _61992E1E6DA7B91ECC7FA4A74B115A04 *PKSPROPERTY_MEDIAAVAILABLE;
typedef struct _1A2DA8A1FB7718738B15D949BE0009F3 *PLLC_DIR_MULTICAST_ADDRESS;
typedef struct _15CCEDC8B607AED044732B1CC203D4F1 *PLLC_DIR_OPEN_DIRECT_PARMS;
typedef struct _LOCALGROUP_MEMBERS_INFO_0 *PLOCALGROUP_MEMBERS_INFO_0;
typedef struct _LOCALGROUP_MEMBERS_INFO_1 *PLOCALGROUP_MEMBERS_INFO_1;
typedef struct _LOCALGROUP_MEMBERS_INFO_2 *PLOCALGROUP_MEMBERS_INFO_2;
typedef struct _LOCALGROUP_MEMBERS_INFO_3 *PLOCALGROUP_MEMBERS_INFO_3;
typedef struct _POLICY_ACCOUNT_DOMAIN_INFO POLICY_ACCOUNT_DOMAIN_INFO;
typedef struct _POLICY_AUDIT_FULL_SET_INFO POLICY_AUDIT_FULL_SET_INFO;
typedef struct _POLICY_DOMAIN_LOCKOUT_INFO POLICY_DOMAIN_LOCKOUT_INFO;
typedef struct _POLICY_PRIMARY_DOMAIN_INFO POLICY_PRIMARY_DOMAIN_INFO;
typedef struct _POLICY_REPLICA_SOURCE_INFO POLICY_REPLICA_SOURCE_INFO;
typedef struct _POLICY_DEFAULT_QUOTA_INFO *PPOLICY_DEFAULT_QUOTA_INFO;
typedef struct _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;
typedef struct _REPARSE_POINT_INFORMATION *PREPARSE_POINT_INFORMATION;
typedef struct RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;
typedef struct _SCH_CRED_PUBLIC_CERTCHAIN *PSCH_CRED_PUBLIC_CERTCHAIN;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;
typedef struct _SPC_INDIRECT_DATA_CONTENT *PSPC_INDIRECT_DATA_CONTENT;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 *PSTARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA *PSTARTING_VCN_INPUT_BUFFER;
typedef struct _STATIC_ROUTES_TABLE_INDEX *PSTATIC_ROUTES_TABLE_INDEX;
typedef struct _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;
typedef struct _SecPkgContext_StreamSizes *PSecPkgContext_StreamSizes;
typedef struct _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TRUSTED_POSIX_OFFSET_INFO *PTRUSTED_POSIX_OFFSET_INFO;
typedef struct _WINDBG_OLD_EXTENSION_APIS *PWINDBG_OLD_EXTENSION_APIS;
typedef struct _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _WSH_PAP_GET_SERVER_STATUS *PWSH_PAP_GET_SERVER_STATUS;
typedef struct _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA REQUEST_RAW_ENCRYPTED_DATA;
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
typedef struct _SSL_CREDENTIAL_CERTIFICATE SSL_CREDENTIAL_CERTIFICATE;
typedef struct _D27293EA07A9AE13A5F9D796DF4562B3 STATUS_OBJECT_NOTIFICATION;
typedef struct _SecPkgContext_PackageInfoA SecPkgContext_PackageInfoA;
typedef struct _SecPkgContext_PackageInfoW SecPkgContext_PackageInfoW;
typedef struct _SecPkgCred_CipherStrengths SecPkgCred_CipherStrengths;
struct SharedPropertyGroupManager;
enum _AMSTREAMSELECTENABLEFLAGS {AMSTREAMSELECTENABLE_ENABLE = 0x1,AMSTREAMSELECTENABLE_ENABLEALL = 0x2,};
enum _DtcLu_CompareStates_Error {DTCLUCOMPARESTATESERROR_PROTOCOL = 0x1,};
struct _FULL_PTR_TO_REFID_ELEMENT {struct _FULL_PTR_TO_REFID_ELEMENT *Next;void *Pointer;unsigned int RefId;unsigned char State;};
struct _SEC_WINNT_AUTH_IDENTITY_A {unsigned char *User;unsigned int UserLength;unsigned char *Domain;unsigned int DomainLength;unsigned char *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SEC_WINNT_AUTH_IDENTITY_W {unsigned short *User;unsigned int UserLength;unsigned short *Domain;unsigned int DomainLength;unsigned short *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SecPkgContext_StreamSizes {unsigned int cbHeader;unsigned int cbTrailer;unsigned int cbMaximumMessage;unsigned int cBuffers;unsigned int cbBlockSize;};
enum _TRUSTED_INFORMATION_CLASS {TrustedDomainNameInformation = 0x1,TrustedControllersInformation = 0x2,TrustedPosixOffsetInformation = 0x3,TrustedPasswordInformation = 0x4,TrustedDomainInformationBasic = 0x5,TrustedDomainInformationEx = 0x6,TrustedDomainAuthInformation = 0x7,TrustedDomainFullInformation = 0x8,};
enum tagINSTALLFEATUREATTRIBUTE {INSTALLFEATUREATTRIBUTE_FAVORLOCAL = 0x1,INSTALLFEATUREATTRIBUTE_FAVORSOURCE = 0x2,INSTALLFEATUREATTRIBUTE_FOLLOWPARENT = 0x4,};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
struct ADOConnectionConstruction {struct ADOConnectionConstructionVtbl *lpVtbl;};
typedef unsigned int AFTP_ALLOCATION_SIZE_TYPE;
typedef struct _E3EDD7A8EB9A8A8EC907A9BA28720893 ATM_TRAFFIC_DESCRIPTOR_IE;
typedef struct _CERT_PRIVATE_KEY_VALIDITY CERT_PRIVATE_KEY_VALIDITY;
typedef struct _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA CRYPT_VERIFY_MESSAGE_PARA;
typedef struct _7D8FD30789366CCEA8FE3DB6E0740A33 DPMSG_CREATEPLAYERORGROUP;
struct DispIHTMLInputFileElement {struct DispIHTMLInputFileElementVtbl *lpVtbl;};
struct DispIHTMLInputTextElement {struct DispIHTMLInputTextElementVtbl *lpVtbl;};
typedef struct tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
typedef struct _FULL_PTR_TO_REFID_ELEMENT FULL_PTR_TO_REFID_ELEMENT;
typedef struct _30CC7D53408649846FD423BE19D3AD21 GOPHER_ASK_ATTRIBUTE_TYPE;
typedef struct _FEF45AADF86B3C581868F0239CC1F2BD GOPHER_TTL_ATTRIBUTE_TYPE;
struct HTMLStyleSheetsCollection;
typedef struct _HTTP_FILTER_ACCESS_DENIED HTTP_FILTER_ACCESS_DENIED;
struct IADsFileServiceOperations {struct IADsFileServiceOperationsVtbl *lpVtbl;};
struct IASQLOLERegisteredServers {struct IASQLOLERegisteredServersVtbl *lpVtbl;};
struct IConnectionPointContainer {struct IConnectionPointContainerVtbl *lpVtbl;};
struct IDirectSoundCaptureBuffer {struct IDirectSoundCaptureBufferVtbl *lpVtbl;};
struct IDtcLuRmEnlistmentFactory {struct IDtcLuRmEnlistmentFactoryVtbl *lpVtbl;};
struct IHTMLOptionElementFactory {struct IHTMLOptionElementFactoryVtbl *lpVtbl;};
struct IJavaEnumRemoteFloatValue {struct IJavaEnumRemoteFloatValueVtbl *lpVtbl;};
struct IJavaEnumRemoteShortValue {struct IJavaEnumRemoteShortValueVtbl *lpVtbl;};
typedef struct _IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL;
typedef struct _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
typedef struct _1E7FF90346B85F5B5B2905177EF5A1FD INTERNET_AUTH_NOTIFY_DATA;
typedef struct _FB1D2264C317C52716420591CB70B7FC INTERNET_CERTIFICATE_INFO;
struct IOleInPlaceSiteWindowless {struct IOleInPlaceSiteWindowlessVtbl *lpVtbl;};
struct IProvideMultipleClassInfo {struct IProvideMultipleClassInfoVtbl *lpVtbl;};
struct ITransactionExportFactory {struct ITransactionExportFactoryVtbl *lpVtbl;};
struct ITransactionOutcomeEvents {struct ITransactionOutcomeEventsVtbl *lpVtbl;};
struct ITransactionResourceAsync {struct ITransactionResourceAsyncVtbl *lpVtbl;};
struct IXAResourceManagerFactory {struct IXAResourceManagerFactoryVtbl *lpVtbl;};
typedef struct _61992E1E6DA7B91ECC7FA4A74B115A04 KSPROPERTY_MEDIAAVAILABLE;
typedef struct linemediacontrolcallstate_tag LINEMEDIACONTROLCALLSTATE;
typedef struct _1A2DA8A1FB7718738B15D949BE0009F3 LLC_DIR_MULTICAST_ADDRESS;
typedef struct _15CCEDC8B607AED044732B1CC203D4F1 LLC_DIR_OPEN_DIRECT_PARMS;
typedef struct _A1AF5D8F2011341D578B8F744C42EE44 LLC_NOT_CONTIGUOUS_BUFFER;
typedef struct _LOCALGROUP_MEMBERS_INFO_0 LOCALGROUP_MEMBERS_INFO_0;
typedef struct _LOCALGROUP_MEMBERS_INFO_1 LOCALGROUP_MEMBERS_INFO_1;
typedef struct _LOCALGROUP_MEMBERS_INFO_2 LOCALGROUP_MEMBERS_INFO_2;
typedef struct _LOCALGROUP_MEMBERS_INFO_3 LOCALGROUP_MEMBERS_INFO_3;
typedef struct IASQLOLERegisteredServer *LPASQLOLEREGISTEREDSERVER;
typedef struct IASQLOLEStoredProcedures *LPASQLOLESTOREDPROCEDURES;
typedef struct DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;
typedef struct DIDEVICEOBJECTINSTANCEW *LPDIDEVICEOBJECTINSTANCEW;
typedef struct IDirect3DRMViewportArray *LPDIRECT3DRMVIEWPORTARRAY;
typedef struct IDirectDrawSurfaceKernel *LPDIRECTDRAWSURFACEKERNEL;
typedef IExchangeRuleExtCallback *LPEXCHANGERULEEXTCALLBACK;
typedef IExchExtAdvancedCriteria *LPEXCHEXTADVANCEDCRITERIA;
typedef IExchExtModelessCallback *LPEXCHEXTMODELESSCALLBACK;
typedef struct _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _EXTENSION_CONTROL_BLOCK *LPEXTENSION_CONTROL_BLOCK;
typedef struct _HSE_SEND_HEADER_EX_INFO *LPHSE_SEND_HEADER_EX_INFO;
typedef struct _1B524A7EE9DF0D2D7407CE43B258BBC8 *LPINTERNET_CONNECTED_INFO;
typedef struct _LOCALGROUP_USERS_INFO_0 *LPLOCALGROUP_USERS_INFO_0;
typedef struct IDirect3DRMDeviceArray **LPLPDIRECT3DRMDEVICEARRAY;
typedef struct IDirect3DRMMeshBuilder **LPLPDIRECT3DRMMESHBUILDER;
typedef struct IDirect3DRMObjectArray **LPLPDIRECT3DRMOBJECTARRAY;
typedef struct IDirect3DRMPickedArray **LPLPDIRECT3DRMPICKEDARRAY;
typedef struct IDirect3DRMVisualArray **LPLPDIRECT3DRMVISUALARRAY;
typedef struct _NTMS_OBJECTINFORMATIONA *LPNTMS_OBJECTINFORMATIONA;
typedef struct _NTMS_OBJECTINFORMATIONW *LPNTMS_OBJECTINFORMATIONW;
typedef IPersistMediaPropertyBag *LPPERSISTMEDIAPROPERTYBAG;
typedef struct phoneinitializeexparams_tag *LPPHONEINITIALIZEEXPARAMS;
typedef struct _RSVP_FILTERSPEC_V6_FLOW *LPRSVP_FILTERSPEC_V6_FLOW;
typedef struct _SERVER_TRANSPORT_INFO_0 *LPSERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_TRANSPORT_INFO_1 *LPSERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_TRANSPORT_INFO_2 *LPSERVER_TRANSPORT_INFO_2;
typedef struct _SERVICE_TYPE_VALUE_ABSA *LPSERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW *LPSERVICE_TYPE_VALUE_ABSW;
enum MACRO_ACMFILTERTAGDETAILS {ACMFILTERTAGDETAILS_FILTERTAG_CHARS = 48,};
enum MACRO_ACMFORMATTAGDETAILS {ACMFORMATTAGDETAILS_FORMATTAG_CHARS = 48,};
enum MACRO_ACM_DRIVERPRIORITYF {ACM_DRIVERPRIORITYF_ENABLE = 0x1,ACM_DRIVERPRIORITYF_DISABLE = 0x2,ACM_DRIVERPRIORITYF_ABLEMASK = 0x3,ACM_DRIVERPRIORITYF_BEGIN = 0x10000,ACM_DRIVERPRIORITYF_END = 0x20000,ACM_DRIVERPRIORITYF_DEFERMASK = 0x30000,};
enum MACRO_CRYPT_VERIFYCONTEXT {CRYPT_VERIFYCONTEXT = 0xF0000000,CRYPT_NEWKEYSET = 0x8,CRYPT_DELETEKEYSET = 0x10,CRYPT_MACHINE_KEYSET = 0x20,CRYPT_EXPORTABLE = 0x1,CRYPT_USER_PROTECTED = 0x2,CRYPT_CREATE_SALT = 0x4,CRYPT_UPDATE_KEY = 0x8,CRYPT_NO_SALT = 0x10,CRYPT_PREGEN = 0x40,CRYPT_RECIPIENT = 0x10,CRYPT_INITIATOR = 0x40,CRYPT_ONLINE = 0x80,CRYPT_SF = 0x100,CRYPT_CREATE_IV = 0x200,CRYPT_KEK = 0x400,CRYPT_DATA_KEY = 0x800,CRYPT_SERVER = 0x400,};
enum MACRO_DB_COUNTUNAVAILABLE {DB_COUNTUNAVAILABLE = -1,};
enum MACRO_DEFAULT_HATCHBORDER {DEFAULT_HATCHBORDER_WIDTH = 4,};
enum MACRO_DLG_ACMFILTERCHOOSE {DLG_ACMFILTERCHOOSE_ID = 71,};
enum MACRO_DLG_ACMFORMATCHOOSE {DLG_ACMFORMATCHOOSE_ID = 70,};
enum MACRO_IDD_ACMFILTERCHOOSE {IDD_ACMFILTERCHOOSE_BTN_HELP = 9,IDD_ACMFILTERCHOOSE_CMB_CUSTOM = 100,IDD_ACMFILTERCHOOSE_CMB_FILTERTAG = 101,IDD_ACMFILTERCHOOSE_CMB_FILTER = 102,IDD_ACMFILTERCHOOSE_BTN_SETNAME = 103,IDD_ACMFILTERCHOOSE_BTN_DELNAME = 104,};
enum MACRO_IDD_ACMFORMATCHOOSE {IDD_ACMFORMATCHOOSE_BTN_HELP = 9,IDD_ACMFORMATCHOOSE_CMB_CUSTOM = 100,IDD_ACMFORMATCHOOSE_CMB_FORMATTAG = 101,IDD_ACMFORMATCHOOSE_CMB_FORMAT = 102,IDD_ACMFORMATCHOOSE_BTN_SETNAME = 103,IDD_ACMFORMATCHOOSE_BTN_DELNAME = 104,};
enum MACRO_IDS_CINOICONSINFILE {IDS_CINOICONSINFILE = 32430,IDS_CIINVALIDFILE = 32431,IDS_CIFILEACCESS = 32432,IDS_CIFILESHARE = 32433,IDS_CIFILEOPENFAIL = 32434,};
enum MACRO_INTERNET_ERROR_BASE {INTERNET_ERROR_BASE = 12000,};
enum MACRO_INTERNET_ERROR_LAST {INTERNET_ERROR_LAST = 12171,};
enum MACRO_LINETRANSLATEOPTION {LINETRANSLATEOPTION_CARDOVERRIDE = 0x1,LINETRANSLATEOPTION_CANCELCALLWAITING = 0x2,LINETRANSLATEOPTION_FORCELOCAL = 0x4,LINETRANSLATEOPTION_FORCELD = 0x8,};
enum MACRO_LINETRANSLATERESULT {LINETRANSLATERESULT_CANONICAL = 0x1,LINETRANSLATERESULT_INTERNATIONAL = 0x2,LINETRANSLATERESULT_LONGDISTANCE = 0x4,LINETRANSLATERESULT_LOCAL = 0x8,LINETRANSLATERESULT_INTOLLLIST = 0x10,LINETRANSLATERESULT_NOTINTOLLLIST = 0x20,LINETRANSLATERESULT_DIALBILLING = 0x40,LINETRANSLATERESULT_DIALQUIET = 0x80,LINETRANSLATERESULT_DIALDIALTONE = 0x100,LINETRANSLATERESULT_DIALPROMPT = 0x200,LINETRANSLATERESULT_VOICEDETECT = 0x400,};
enum MACRO_MAPIFORM_EXACTMATCH {MAPIFORM_EXACTMATCH = 0x20,MAPIFORM_CPU_X86 = 0x1,MAPIFORM_CPU_MIP = 0x2,MAPIFORM_CPU_AXP = 0x3,MAPIFORM_CPU_PPC = 0x4,MAPIFORM_CPU_M68 = 0x5,MAPIFORM_OS_WIN_31 = 0x1,MAPIFORM_OS_WINNT_35 = 0x2,MAPIFORM_OS_WIN_95 = 0x3,MAPIFORM_OS_MAC_7x = 0x4,MAPIFORM_OS_WINNT_40 = 0x5,MAPIFORM_INSTALL_DIALOG = 0x8,MAPIFORM_INSTALL_OVERWRITEONCONFLICT = 0x10,};
enum MACRO_MAX_GOPHER_CATEGORY {MAX_GOPHER_CATEGORY_NAME = 128,MAX_GOPHER_ATTRIBUTE_NAME = 128,};
enum MACRO_MM_ACM_FILTERCHOOSE {MM_ACM_FILTERCHOOSE = 0x8000,};
enum MACRO_MM_ACM_FORMATCHOOSE {MM_ACM_FORMATCHOOSE = 0x8000,};
enum MACRO_MSG_SERVICE_INSTALL {MSG_SERVICE_INSTALL = 0x1,MSG_SERVICE_CREATE = 0x2,MSG_SERVICE_CONFIGURE = 0x3,MSG_SERVICE_DELETE = 0x4,MSG_SERVICE_UNINSTALL = 0x5,MSG_SERVICE_PROVIDER_CREATE = 0x6,MSG_SERVICE_PROVIDER_DELETE = 0x7,};
enum MACRO_OLEIVERB_PROPERTIES {OLEIVERB_PROPERTIES = -7,};
enum MACRO_PHONEBUTTONFUNCTION {PHONEBUTTONFUNCTION_UNKNOWN = 0x0,PHONEBUTTONFUNCTION_CONFERENCE = 0x1,PHONEBUTTONFUNCTION_TRANSFER = 0x2,PHONEBUTTONFUNCTION_DROP = 0x3,PHONEBUTTONFUNCTION_HOLD = 0x4,PHONEBUTTONFUNCTION_RECALL = 0x5,PHONEBUTTONFUNCTION_DISCONNECT = 0x6,PHONEBUTTONFUNCTION_CONNECT = 0x7,PHONEBUTTONFUNCTION_MSGWAITON = 0x8,PHONEBUTTONFUNCTION_MSGWAITOFF = 0x9,PHONEBUTTONFUNCTION_SELECTRING = 0xA,PHONEBUTTONFUNCTION_ABBREVDIAL = 0xB,PHONEBUTTONFUNCTION_FORWARD = 0xC,PHONEBUTTONFUNCTION_PICKUP = 0xD,PHONEBUTTONFUNCTION_RINGAGAIN = 0xE,PHONEBUTTONFUNCTION_PARK = 0xF,PHONEBUTTONFUNCTION_REJECT = 0x10,PHONEBUTTONFUNCTION_REDIRECT = 0x11,PHONEBUTTONFUNCTION_MUTE = 0x12,PHONEBUTTONFUNCTION_VOLUMEUP = 0x13,PHONEBUTTONFUNCTION_VOLUMEDOWN = 0x14,PHONEBUTTONFUNCTION_SPEAKERON = 0x15,PHONEBUTTONFUNCTION_SPEAKEROFF = 0x16,PHONEBUTTONFUNCTION_FLASH = 0x17,PHONEBUTTONFUNCTION_DATAON = 0x18,PHONEBUTTONFUNCTION_DATAOFF = 0x19,PHONEBUTTONFUNCTION_DONOTDISTURB = 0x1A,PHONEBUTTONFUNCTION_INTERCOM = 0x1B,PHONEBUTTONFUNCTION_BRIDGEDAPP = 0x1C,PHONEBUTTONFUNCTION_BUSY = 0x1D,PHONEBUTTONFUNCTION_CALLAPP = 0x1E,PHONEBUTTONFUNCTION_DATETIME = 0x1F,PHONEBUTTONFUNCTION_DIRECTORY = 0x20,PHONEBUTTONFUNCTION_COVER = 0x21,PHONEBUTTONFUNCTION_CALLID = 0x22,PHONEBUTTONFUNCTION_LASTNUM = 0x23,PHONEBUTTONFUNCTION_NIGHTSRV = 0x24,PHONEBUTTONFUNCTION_SENDCALLS = 0x25,PHONEBUTTONFUNCTION_MSGINDICATOR = 0x26,PHONEBUTTONFUNCTION_REPDIAL = 0x27,PHONEBUTTONFUNCTION_SETREPDIAL = 0x28,PHONEBUTTONFUNCTION_SYSTEMSPEED = 0x29,PHONEBUTTONFUNCTION_STATIONSPEED = 0x2A,PHONEBUTTONFUNCTION_CAMPON = 0x2B,PHONEBUTTONFUNCTION_SAVEREPEAT = 0x2C,PHONEBUTTONFUNCTION_QUEUECALL = 0x2D,PHONEBUTTONFUNCTION_NONE = 0x2E,};
enum MACRO_PHONEHOOKSWITCHMODE {PHONEHOOKSWITCHMODE_ONHOOK = 0x1,PHONEHOOKSWITCHMODE_MIC = 0x2,PHONEHOOKSWITCHMODE_SPEAKER = 0x4,PHONEHOOKSWITCHMODE_MICSPEAKER = 0x8,PHONEHOOKSWITCHMODE_UNKNOWN = 0x10,};
enum MACRO_POSTSCRIPT_IDENTIFY {POSTSCRIPT_IDENTIFY = 4117,POSTSCRIPT_INJECTION = 4118,};
enum MACRO_RESOURCEDISPLAYTYPE {RESOURCEDISPLAYTYPE_GENERIC = 0x0,RESOURCEDISPLAYTYPE_DOMAIN = 0x1,RESOURCEDISPLAYTYPE_SERVER = 0x2,RESOURCEDISPLAYTYPE_SHARE = 0x3,RESOURCEDISPLAYTYPE_FILE = 0x4,RESOURCEDISPLAYTYPE_GROUP = 0x5,RESOURCEDISPLAYTYPE_NETWORK = 0x6,RESOURCEDISPLAYTYPE_ROOT = 0x7,RESOURCEDISPLAYTYPE_SHAREADMIN = 0x8,RESOURCEDISPLAYTYPE_DIRECTORY = 0x9,RESOURCEDISPLAYTYPE_TREE = 0xA,RESOURCEDISPLAYTYPE_NDSCONTAINER = 0xB,};
enum MACRO_SECURITY_DESCRIPTOR {SECURITY_DESCRIPTOR_REVISION = 1,SECURITY_DESCRIPTOR_REVISION1 = 1,};
enum MACRO_TAPIMAXDEVICEIDSIZE {TAPIMAXDEVICEIDSIZE = 40,};
enum MACRO_TOTALJOURNALINBYTES {TOTALJOURNALINBYTES = 46,};
enum MACRO_TOTALQUEUEINPACKETS {TOTALQUEUEINPACKETS = 40,};
enum MACRO_TOTALSESSOUTPACKETS {TOTALSESSOUTPACKETS = 34,};
enum MACRO_TVM_CREATEDRAGIMAGE {TVM_CREATEDRAGIMAGE = 4370,TVM_SORTCHILDREN = 4371,TVM_ENSUREVISIBLE = 4372,TVM_SORTCHILDRENCB = 4373,TVM_ENDEDITLABELNOW = 4374,TVM_GETISEARCHSTRINGA = 4375,TVM_GETISEARCHSTRINGW = 4416,TVM_GETISEARCHSTRING = 4375,TVM_SETTOOLTIPS = 4376,TVM_GETTOOLTIPS = 4377,TVM_SETINSERTMARK = 4378,TVM_SETUNICODEFORMAT = 8197,TVM_GETUNICODEFORMAT = 8198,TVM_SETITEMHEIGHT = 4379,TVM_GETITEMHEIGHT = 4380,TVM_SETBKCOLOR = 4381,TVM_SETTEXTCOLOR = 4382,TVM_GETBKCOLOR = 4383,TVM_GETTEXTCOLOR = 4384,TVM_SETSCROLLTIME = 4385,TVM_GETSCROLLTIME = 4386,TVM_SETINSERTMARKCOLOR = 4389,TVM_GETINSERTMARKCOLOR = 4390,};
enum MACRO_VARIANT_NOVALUEPROP {VARIANT_NOVALUEPROP = 0x1,VARIANT_ALPHABOOL = 0x2,VARIANT_NOUSEROVERRIDE = 0x4,VARIANT_CALENDAR_HIJRI = 0x8,VARIANT_LOCALBOOL = 0x10,};
enum MACRO_WSAEINVALIDPROVIDER {WSAEINVALIDPROVIDER = 10105,};
enum MACRO_attAttachCreateDate {attAttachCreateDate = 0x38012,};
enum MACRO_attAttachModifyDate {attAttachModifyDate = 0x38013,};
enum MACRO_cchTextLimitDefault {cchTextLimitDefault = 32767,};
enum MACRO_cktypeDIBcompressed {cktypeDIBcompressed = 25444,};
enum MACRO_dispidGetActiveView {dispidGetActiveView = 2002,};
enum MACRO_dispidGlobalEndTime {dispidGlobalEndTime = 4007,};
enum MACRO_dispidSetActiveView {dispidSetActiveView = 2001,};
enum MACRO_ecProxyDLLDiskSpace {ecProxyDLLDiskSpace = 50015,};
enum MACRO_ecProxyDLLException {ecProxyDLLException = 50016,};
enum MACRO_ecSomeProxiesFailed {ecSomeProxiesFailed = 50002,};
enum MACRO_errVtoColumnMissing {errVtoColumnMissing = -30034,};
enum MACRO_errVtoRecordDeleted {errVtoRecordDeleted = -30031,};
enum MACRO_hrCheckpointCorrupt {hrCheckpointCorrupt = 0xC8000215,};
enum MACRO_hrColumn2ndSysMaint {hrColumn2ndSysMaint = 0xC80005E6,};
enum MACRO_hrColumnCannotIndex {hrColumnCannotIndex = 0xC80005E9,};
enum MACRO_hrContainerNotEmpty {hrContainerNotEmpty = 0xC8000413,};
enum MACRO_hrCreateIndexFailed {hrCreateIndexFailed = 0x88000581,};
enum MACRO_hrDatabaseCorrupted {hrDatabaseCorrupted = 0xC80004B6,};
enum MACRO_hrDatabaseDuplicate {hrDatabaseDuplicate = 0xC80004B1,};
enum MACRO_hrIndexHasClustered {hrIndexHasClustered = 0xC8000580,};
enum MACRO_hrInvalidBufferSize {hrInvalidBufferSize = 0xC8000417,};
enum MACRO_hrInvalidColumnType {hrInvalidColumnType = 0xC80005E7,};
enum MACRO_hrInvalidDatabaseId {hrInvalidDatabaseId = 0xC80003F2,};
enum MACRO_hrInvalidLanguageId {hrInvalidLanguageId = 0xC8000426,};
enum MACRO_hrLogBufferTooSmall {hrLogBufferTooSmall = 0xC8000205,};
enum MACRO_hrMissingFullBackup {hrMissingFullBackup = 0xC8000230,};
enum MACRO_hrNoBackupDirectory {hrNoBackupDirectory = 0xC80001F7,};
enum MACRO_hrNullKeyDisallowed {hrNullKeyDisallowed = 0xC800041D,};
enum MACRO_hrPatchFileMismatch {hrPatchFileMismatch = 0xC8000228,};
enum MACRO_hrReadVerifyFailure {hrReadVerifyFailure = 0xC80003FA,};
enum MACRO_hrRemainingVersions {hrRemainingVersions = 0x88000141,};
enum MACRO_hrRestoreInProgress {hrRestoreInProgress = 0xC7FF0004,};
enum MACRO_hrRestoreLogTooHigh {hrRestoreLogTooHigh = 0xC800022A,};
enum MACRO_hrTempFileOpenError {hrTempFileOpenError = 0xC800070B,};
enum MACRO_hrTooManyOpenTables {hrTooManyOpenTables = 0xC800051F,};
enum MACRO_hrUpdateNotPrepared {hrUpdateNotPrepared = 0xC8000649,};
enum MACRO_hrerrDataHasChanged {hrerrDataHasChanged = 0xC800064B,};
enum MACRO_hrwrnDataHasChanged {hrwrnDataHasChanged = 0x8800064A,};
enum MACRO_oledbIColumnsRowset {oledbIColumnsRowset = 50008,};
enum MACRO_oledbIDBInitialize_ {oledbIDBInitialize__Initialize = 50043,oledbIDBInitialize__Uninitialize = 50044,};
enum MACRO_oledbIDBProperties_ {oledbIDBProperties__GetProperties = 50046,oledbIDBProperties__GetPropertyInfo = 50047,oledbIDBProperties__SetProperties = 50048,};
enum MACRO_oledbIErrorRecords_ {oledbIErrorRecords__AddErrorRecord = 50063,oledbIErrorRecords__GetBasicErrorInfo = 50064,oledbIErrorRecords__GetCustomErrorObject = 50065,oledbIErrorRecords__GetErrorInfo = 50066,oledbIErrorRecords__GetErrorParameters = 50067,oledbIErrorRecords__GetRecordCount = 50068,};
enum MACRO_oledbIGetDataSource {oledbIGetDataSource = 50069,};
enum MACRO_oledbIRowsetChange_ {oledbIRowsetChange__DeleteRows = 50083,oledbIRowsetChange__InsertRow = 50084,oledbIRowsetChange__SetData = 50085,};
enum MACRO_oledbIRowsetNotify_ {oledbIRowsetNotify__OnFieldChange = 50102,oledbIRowsetNotify__OnRowChange = 50103,oledbIRowsetNotify__OnRowsetChange = 50104,};
enum MACRO_oledbIRowsetResynch {oledbIRowsetResynch = 50105,};
enum MACRO_oledbISQLErrorInfo_ {oledbISQLErrorInfo__GetSQLInfo = 50123,};
enum MACRO_oledbISourcesRowset {oledbISourcesRowset = 50120,};
enum MACRO_pidSecureProfileMin {pidSecureProfileMin = 26608,};
enum MACRO_tevtMessageDelivery {tevtMessageDelivery = 9,};
enum MACRO_tevtReportGenerated {tevtReportGenerated = 34,};
typedef struct mediaspace_adpcmwaveformat_tag MEDIASPACEADPCMWAVEFORMAT;
typedef struct _NTMS_MEDIAPOOLINFORMATION NTMS_MEDIAPOOLINFORMATION;
typedef struct _NTMS_MEDIATYPEINFORMATION NTMS_MEDIATYPEINFORMATION;
typedef struct _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;
typedef struct _ACTRL_ACCESS_ENTRY_LISTA *PACTRL_ACCESS_ENTRY_LISTA;
typedef struct _ACTRL_ACCESS_ENTRY_LISTW *PACTRL_ACCESS_ENTRY_LISTW;
typedef struct _2FCB7B16F35A994219C907239F9496DC *PAM_AC3_ERROR_CONCEALMENT;
typedef struct _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;
typedef  IUniformResourceLocatorA *PCIUniformResourceLocator;
typedef struct CLUS_RESOURCE_CLASS_INFO *PCLUS_RESOURCE_CLASS_INFO;
typedef struct _COINSTALLER_CONTEXT_DATA *PCOINSTALLER_CONTEXT_DATA;
typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;
typedef struct _CRYPT_PROVIDER_FUNCTIONS *PCRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;
typedef struct _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;
typedef struct _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;
typedef struct IPX_ADAPTER_BINDING_INFO *PIPX_ADAPTER_BINDING_INFO;
typedef struct _1889F3BAB83DF1AC38A4E0627115688D *PKSPIN_PHYSICALCONNECTION;
typedef struct _BC7A094E99B893F962A170A802EFE988 *PKSPROPERTY_MEMBERSHEADER;
typedef struct _BA718A362089753A7EB60B21429558A7 *PKSPROPERTY_STEPPING_LONG;
typedef struct _E21F85AFDEE9EAF37885ADBF8938BB0C *PKSSTREAMALLOCATOR_STATUS;
typedef struct _C2DEA1EC9E907F11F9CFE09E5953DA8B *PLLC_DIR_INITIALIZE_PARMS;
typedef struct _21BC78F9FD7040767E91D83497A8A62C *PLLC_DLC_REALLOCATE_PARMS;
typedef struct _9094404ECC54B56F86821B4C6C888B0E *PLLC_DLC_STATISTICS_PARMS;
typedef struct _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;
typedef struct MS_ADDINFO_CATALOGMEMBER_ *PMS_ADDINFO_CATALOGMEMBER;
typedef struct _POLICY_DEFAULT_QUOTA_INFO POLICY_DEFAULT_QUOTA_INFO;
typedef struct _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;
typedef struct _POLICY_AUDIT_EVENTS_INFO *PPOLICY_AUDIT_EVENTS_INFO;
typedef struct _POLICY_MODIFICATION_INFO *PPOLICY_MODIFICATION_INFO;
typedef struct _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;
typedef struct _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;
typedef struct _SECURITY_PACKAGE_OPTIONS *PSECURITY_PACKAGE_OPTIONS;
typedef struct _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;
typedef struct _SP_DEVICE_INTERFACE_DATA *PSP_DEVICE_INTERFACE_DATA;
typedef struct _SP_DRVINFO_DETAIL_DATA_A *PSP_DRVINFO_DETAIL_DATA_A;
typedef struct _SP_DRVINFO_DETAIL_DATA_W *PSP_DRVINFO_DETAIL_DATA_W;
typedef struct _SP_PROPSHEETPAGE_REQUEST *PSP_PROPSHEETPAGE_REQUEST;
typedef struct _SP_SELECTDEVICE_PARAMS_A *PSP_SELECTDEVICE_PARAMS_A;
typedef struct _SP_SELECTDEVICE_PARAMS_W *PSP_SELECTDEVICE_PARAMS_W;
typedef struct _SP_UNREMOVEDEVICE_PARAMS *PSP_UNREMOVEDEVICE_PARAMS;
typedef struct _SecPkgContext_AuthorityA *PSecPkgContext_AuthorityA;
typedef struct _SecPkgContext_AuthorityW *PSecPkgContext_AuthorityW;
typedef struct _SecPkgContext_ProtoInfoA *PSecPkgContext_ProtoInfoA;
typedef struct _SecPkgContext_ProtoInfoW *PSecPkgContext_ProtoInfoW;
typedef struct _SecPkgContext_SessionKey *PSecPkgContext_SessionKey;
typedef struct _SecPkgCred_SupportedAlgs *PSecPkgCred_SupportedAlgs;
typedef struct _SecPkgCredentials_NamesA *PSecPkgCredentials_NamesA;
typedef struct _SecPkgCredentials_NamesW *PSecPkgCredentials_NamesW;
typedef struct _TRUSTED_CONTROLLERS_INFO *PTRUSTED_CONTROLLERS_INFO;
typedef struct _TRUSTED_DOMAIN_NAME_INFO *PTRUSTED_DOMAIN_NAME_INFO;
typedef struct __MIDL_IH26XEncodeOptions_0001 *PTR_ENCODE_OPTIONS_VALUES;
typedef struct _WLX_DISPATCH_VERSION_1_0 *PWLX_DISPATCH_VERSION_1_0;
typedef struct _WLX_DISPATCH_VERSION_1_1 *PWLX_DISPATCH_VERSION_1_1;
typedef struct _RAS_PPP_PROJECTION_RESULT RAS_PPP_PROJECTION_RESULT;
typedef struct _READ_ELEMENT_ADDRESS_INFO READ_ELEMENT_ADDRESS_INFO;
typedef struct _REPARSE_POINT_INFORMATION REPARSE_POINT_INFORMATION;
typedef struct __MIDL_TriggerPublicRPC_0002 RPC_TIME_ZONE_INFORMATION;
typedef struct _SCH_CRED_PUBLIC_CERTCHAIN SCH_CRED_PUBLIC_CERTCHAIN;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION;
typedef struct _SPC_INDIRECT_DATA_CONTENT SPC_INDIRECT_DATA_CONTENT;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 STARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA STARTING_VCN_INPUT_BUFFER;
typedef struct _STATIC_ROUTES_TABLE_INDEX STATIC_ROUTES_TABLE_INDEX;
typedef struct _STORAGE_BUS_RESET_REQUEST STORAGE_BUS_RESET_REQUEST;
typedef struct _SecPkgContext_StreamSizes SecPkgContext_StreamSizes;
typedef struct _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
typedef struct _TRUSTED_POSIX_OFFSET_INFO TRUSTED_POSIX_OFFSET_INFO;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
typedef struct _WINDBG_OLD_EXTENSION_APIS WINDBG_OLD_EXTENSION_APIS;
typedef struct _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
typedef struct _WSH_PAP_GET_SERVER_STATUS WSH_PAP_GET_SERVER_STATUS;
enum _DtcLu_LocalRecovery_Work {DTCINITIATEDRECOVERYWORK_CHECKLUSTATUS = 0x1,DTCINITIATEDRECOVERYWORK_TRANS = 0x2,DTCINITIATEDRECOVERYWORK_TMDOWN = 0x3,};
enum _POLICY_INFORMATION_CLASS {PolicyAuditLogInformation = 0x1,PolicyAuditEventsInformation = 0x2,PolicyPrimaryDomainInformation = 0x3,PolicyPdAccountInformation = 0x4,PolicyAccountDomainInformation = 0x5,PolicyLsaServerRoleInformation = 0x6,PolicyReplicaSourceInformation = 0x7,PolicyDefaultQuotaInformation = 0x8,PolicyModificationInformation = 0x9,PolicyAuditFullSetInformation = 0xA,PolicyAuditFullQueryInformation = 0xB,PolicyDnsDomainInformation = 0xC,PolicyEfsInformation = 0xD,};
enum _RAS_AUTH_ATTRIBUTE_TYPE_ {raatMinimum = 0x0,raatUserName = 0x1,raatUserPassword = 0x2,raatMD5CHAPPassword = 0x3,raatNASIPAddress = 0x4,raatNASPort = 0x5,raatServiceType = 0x6,raatFramedProtocol = 0x7,raatFramedIPAddress = 0x8,raatFramedIPNetmask = 0x9,raatFramedRouting = 0xA,raatFilterId = 0xB,raatFramedMTU = 0xC,raatFramedCompression = 0xD,raatLoginIPHost = 0xE,raatLoginService = 0xF,raatLoginTCPPort = 0x10,raatUnassigned1 = 0x11,raatReplyMessage = 0x12,raatCallbackNumber = 0x13,raatCallbackId = 0x14,raatUnassigned2 = 0x15,raatFramedRoute = 0x16,raatFramedIPXNetwork = 0x17,raatState = 0x18,raatClass = 0x19,raatVendorSpecific = 0x1A,raatSessionTimeout = 0x1B,raatIdleTimeout = 0x1C,raatTerminationAction = 0x1D,raatCalledStationId = 0x1E,raatCallingStationId = 0x1F,raatNASIdentifier = 0x20,raatProxyState = 0x21,raatLoginLATService = 0x22,raatLoginLATNode = 0x23,raatLoginLATGroup = 0x24,raatFramedAppleTalkLink = 0x25,raatFramedAppleTalkNetwork = 0x26,raatFramedAppleTalkZone = 0x27,raatAcctStatusType = 0x28,raatAcctDelayType = 0x29,raatAcctInputOctets = 0x2A,raatAcctOutputOctets = 0x2B,raatAcctSessionId = 0x2C,raatAcctAuthentic = 0x2D,raatAcctSessionTime = 0x2E,raatAcctInputPackets = 0x2F,raatAcctOutputPackets = 0x30,raatAcctTerminateCause = 0x31,raatAcctMultiSessionId = 0x32,raatAcctLinkCount = 0x33,raatMD5CHAPChallenge = 0x3C,raatNASPortType = 0x3D,raatPortLimit = 0x3E,raatLoginLATPort = 0x3F,raatPrompt = 0x40,raatConnectInfo = 0x41,raatSignature = 0x42,raatEAPMessage = 0x43,raatConfigurationToken = 0x44,raatPasswordRetry = 0x45,raatARAPPassword = 0x46,raatARAPFeatures = 0x47,raatARAPZoneAccess = 0x48,raatARAPSecurity = 0x49,raatARAPSecurityData = 0x4A,raatReserved = 0xFFFFFFFF,};
struct _SECURITY_PACKAGE_OPTIONS {unsigned int Size;unsigned int Type;unsigned int Flags;unsigned int SignatureSize;void *Signature;};
struct _SecPkgContext_SessionKey {unsigned int SessionKeyLength;unsigned char *SessionKey;};
enum __MIDL_IFilterMapper_0001 {MERIT_PREFERRED = 0x800000,MERIT_NORMAL = 0x600000,MERIT_UNLIKELY = 0x400000,MERIT_DO_NOT_USE = 0x200000,MERIT_SW_COMPRESSOR = 0x100000,MERIT_HW_COMPRESSOR = 0x100050,};
typedef struct _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
typedef struct _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
typedef struct _ACTRL_ACCESS_ENTRY_LISTA ACTRL_ACCESS_ENTRY_LISTA;
typedef struct _ACTRL_ACCESS_ENTRY_LISTW ACTRL_ACCESS_ENTRY_LISTW;
struct ADORecordsetConstruction {struct ADORecordsetConstructionVtbl *lpVtbl;};
typedef struct _2FCB7B16F35A994219C907239F9496DC AM_AC3_ERROR_CONCEALMENT;
typedef struct audiofile_af10waveformat_tag AUDIOFILE_AF10WAVEFORMAT;
typedef struct audiofile_af36waveformat_tag AUDIOFILE_AF36WAVEFORMAT;
typedef struct _AUDIO_STREAM_CONFIG_CAPS AUDIO_STREAM_CONFIG_CAPS;
typedef struct _CERT_KEYGEN_REQUEST_INFO CERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO CERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_SIGNED_CONTENT_INFO CERT_SIGNED_CONTENT_INFO;
typedef  IUniformResourceLocatorA CIUniformResourceLocator;
typedef struct _COINSTALLER_CONTEXT_DATA COINSTALLER_CONTEXT_DATA;
typedef struct _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
typedef struct _CRYPT_PROVIDER_FUNCTIONS CRYPT_PROVIDER_FUNCTIONS;
typedef struct _CRYPT_RC2_CBC_PARAMETERS CRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES CRYPT_SMIME_CAPABILITIES;
struct ClusNetworkNetInterfaces {struct ClusNetworkNetInterfacesVtbl *lpVtbl;};
enum DBCOMMANDPERSISTFLAGENUM {DBCOMMANDPERSISTFLAG_NOSAVE = 0x1,};
typedef struct _DRIVE_LAYOUT_INFORMATION DRIVE_LAYOUT_INFORMATION;
struct DispIHTMLBaseFontElement {struct DispIHTMLBaseFontElementVtbl *lpVtbl;};
struct DispIHTMLFieldSetElement {struct DispIHTMLFieldSetElementVtbl *lpVtbl;};
struct DispIHTMLFrameSetElement {struct DispIHTMLFrameSetElementVtbl *lpVtbl;};
struct DispIHTMLTextAreaElement {struct DispIHTMLTextAreaElementVtbl *lpVtbl;};
struct HTMLControlElementEvents {struct HTMLControlElementEventsVtbl *lpVtbl;};
struct HTMLMarqueeElementEvents {struct HTMLMarqueeElementEventsVtbl *lpVtbl;};
struct HTMLOptionElementFactory;
struct IADsPrintQueueOperations {struct IADsPrintQueueOperationsVtbl *lpVtbl;};
struct IASQLOLERegisteredServer {struct IASQLOLERegisteredServerVtbl *lpVtbl;};
struct IASQLOLEStoredProcedures {struct IASQLOLEStoredProceduresVtbl *lpVtbl;};
struct IDirect3DRMViewportArray {struct IDirect3DRMViewportArrayVtbl *lpVtbl;};
struct IDirectDrawSurfaceKernel {struct IDirectDrawSurfaceKernelVtbl *lpVtbl;};
struct IDtcLuSubordinateDtcSink {struct IDtcLuSubordinateDtcSinkVtbl *lpVtbl;};
struct IExchExtAdvancedCriteria {struct IExchExtAdvancedCriteriaVtbl *lpVtbl;};
struct IExchExtModelessCallback {struct IExchExtModelessCallbackVtbl *lpVtbl;};
struct IExchangeRuleExtCallback {struct IExchangeRuleExtCallbackVtbl *lpVtbl;};
struct IHTMLFontNamesCollection {struct IHTMLFontNamesCollectionVtbl *lpVtbl;};
struct IHTMLFontSizesCollection {struct IHTMLFontSizesCollectionVtbl *lpVtbl;};
struct IHTMLImageElementFactory {struct IHTMLImageElementFactoryVtbl *lpVtbl;};
struct IHTMLMimeTypesCollection {struct IHTMLMimeTypesCollectionVtbl *lpVtbl;};
struct IHTMLOptionButtonElement {struct IHTMLOptionButtonElementVtbl *lpVtbl;};
struct IInternetSecurityManager {struct IInternetSecurityManagerVtbl *lpVtbl;};
struct IInternetSecurityMgrSite {struct IInternetSecurityMgrSiteVtbl *lpVtbl;};
struct IJavaEnumRemoteByteValue {struct IJavaEnumRemoteByteValueVtbl *lpVtbl;};
struct IJavaEnumRemoteCharValue {struct IJavaEnumRemoteCharValueVtbl *lpVtbl;};
struct IJavaEnumRemoteLongValue {struct IJavaEnumRemoteLongValueVtbl *lpVtbl;};
typedef struct _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
struct IPersistMediaPropertyBag {struct IPersistMediaPropertyBagVtbl *lpVtbl;};
struct ITransactionVoterFactory {struct ITransactionVoterFactoryVtbl *lpVtbl;};
struct IUniformResourceLocatorA {struct IUniformResourceLocatorAVtbl *lpVtbl;};
struct IUniformResourceLocatorW {struct IUniformResourceLocatorWVtbl *lpVtbl;};
struct IWCPropertySheetCallback {struct IWCPropertySheetCallbackVtbl *lpVtbl;};
typedef struct _1889F3BAB83DF1AC38A4E0627115688D KSPIN_PHYSICALCONNECTION;
typedef struct _BC7A094E99B893F962A170A802EFE988 KSPROPERTY_MEMBERSHEADER;
typedef struct _BA718A362089753A7EB60B21429558A7 KSPROPERTY_STEPPING_LONG;
typedef struct _E21F85AFDEE9EAF37885ADBF8938BB0C KSSTREAMALLOCATOR_STATUS;
typedef struct _C2DEA1EC9E907F11F9CFE09E5953DA8B LLC_DIR_INITIALIZE_PARMS;
typedef struct _21BC78F9FD7040767E91D83497A8A62C LLC_DLC_REALLOCATE_PARMS;
typedef struct _9094404ECC54B56F86821B4C6C888B0E LLC_DLC_STATISTICS_PARMS;
typedef struct IASQLOLEStoredProcedure *LPASQLOLESTOREDPROCEDURE;
typedef struct IASQLOLESystemDatatypes *LPASQLOLESYSTEMDATATYPES;
typedef  DIDEVICEINSTANCE_DX3A *LPCDIDEVICEINSTANCE_DX3A;
typedef  DIDEVICEINSTANCE_DX3W *LPCDIDEVICEINSTANCE_DX3W;
typedef struct IDirect3DRMAnimationSet *LPDIRECT3DRMANIMATIONSET;
typedef struct IDirect3DRMInterpolator *LPDIRECT3DRMINTERPOLATOR;
typedef struct IDirect3DRMMeshBuilder2 *LPDIRECT3DRMMESHBUILDER2;
typedef struct IDirect3DRMPicked2Array *LPDIRECT3DRMPICKED2ARRAY;
typedef struct IDirectDrawColorControl *LPDIRECTDRAWCOLORCONTROL;
typedef struct _9CE0644C253DBAB51052D414D7E91AF8 *LPDPMSG_ADDPLAYERTOGROUP;
typedef IEnumRemoteBooleanValue *LPENUMREMOTEBOOLEANVALUE;
typedef struct _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;
typedef struct lineagentactivityentry_tag *LPLINEAGENTACTIVITYENTRY;
typedef struct linecalltreatmententry_tag *LPLINECALLTREATMENTENTRY;
typedef struct lineinitializeexparams_tag *LPLINEINITIALIZEEXPARAMS;
typedef struct IDirect3DRMFrameArray **LPLPDIRECT3DRMFRAMEARRAY;
typedef struct IDirect3DRMLightArray **LPLPDIRECT3DRMLIGHTARRAY;
typedef struct IDirect3DRMUserVisual **LPLPDIRECT3DRMUSERVISUAL;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;
typedef struct tagNMDATETIMEFORMATQUERYA *LPNMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW *LPNMDATETIMEFORMATQUERYW;
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
typedef struct _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _RSVP_FILTERSPEC_V4_GPI *LPRSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI *LPRSVP_FILTERSPEC_V6_GPI;
typedef struct _SERVICE_TYPE_INFO_ABSA *LPSERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW *LPSERVICE_TYPE_INFO_ABSW;
typedef struct _WIN_TRUST_SUBJECT_FILE *LPWIN_TRUST_SUBJECT_FILE;
typedef struct _WKSTA_TRANSPORT_INFO_0 *LPWKSTA_TRANSPORT_INFO_0;
enum MACRO_ACM_FILTERDETAILSF {ACM_FILTERDETAILSF_INDEX = 0x0,ACM_FILTERDETAILSF_FILTER = 0x1,ACM_FILTERDETAILSF_QUERYMASK = 0xF,ACM_FILTERENUMF_DWFILTERTAG = 0x10000,};
enum MACRO_ACM_FORMATDETAILSF {ACM_FORMATDETAILSF_INDEX = 0x0,ACM_FORMATDETAILSF_FORMAT = 0x1,ACM_FORMATDETAILSF_QUERYMASK = 0xF,ACM_FORMATENUMF_WFORMATTAG = 0x10000,ACM_FORMATENUMF_NCHANNELS = 0x20000,ACM_FORMATENUMF_NSAMPLESPERSEC = 0x40000,ACM_FORMATENUMF_WBITSPERSAMPLE = 0x80000,ACM_FORMATENUMF_CONVERT = 0x100000,ACM_FORMATENUMF_SUGGEST = 0x200000,ACM_FORMATENUMF_HARDWARE = 0x400000,ACM_FORMATENUMF_INPUT = 0x800000,ACM_FORMATENUMF_OUTPUT = 0x1000000,ACM_FORMATSUGGESTF_WFORMATTAG = 0x10000,ACM_FORMATSUGGESTF_NCHANNELS = 0x20000,ACM_FORMATSUGGESTF_NSAMPLESPERSEC = 0x40000,ACM_FORMATSUGGESTF_WBITSPERSAMPLE = 0x80000,ACM_FORMATSUGGESTF_TYPEMASK = 0xFF0000,};
enum MACRO_COMPRESSION_FORMAT {COMPRESSION_FORMAT_SPARSE = 0x4000,};
enum MACRO_CREATE_NEW_PROCESS {CREATE_NEW_PROCESS_GROUP = 0x200,CREATE_UNICODE_ENVIRONMENT = 0x400,CREATE_SEPARATE_WOW_VDM = 0x800,CREATE_SHARED_WOW_VDM = 0x1000,CREATE_FORCEDOS = 0x2000,CREATE_DEFAULT_ERROR_MODE = 0x4000000,CREATE_NO_WINDOW = 0x8000000,};
enum MACRO_D3DPROCESSVERTICES {D3DPROCESSVERTICES_TRANSFORMLIGHT = 0x0,D3DPROCESSVERTICES_TRANSFORM = 0x1,D3DPROCESSVERTICES_COPY = 0x2,D3DPROCESSVERTICES_OPMASK = 0x7,D3DPROCESSVERTICES_UPDATEEXTENTS = 0x8,D3DPROCESSVERTICES_NOCOLOR = 0x10,};
enum MACRO_D3DRMINTERPOLATION {D3DRMINTERPOLATION_OPEN = 0x1,D3DRMINTERPOLATION_CLOSED = 0x2,D3DRMINTERPOLATION_NEAREST = 0x100,D3DRMINTERPOLATION_LINEAR = 0x4,D3DRMINTERPOLATION_SPLINE = 0x8,D3DRMINTERPOLATION_VERTEXCOLOR = 0x40,D3DRMINTERPOLATION_SLERPNORMALS = 0x80,};
enum MACRO_DIPROP_CALIBRATION {DIPROP_CALIBRATION = 11,DIPROP_GUIDANDPATH = 12,};
enum MACRO_DIPROP_GRANULARITY {DIPROP_GRANULARITY = 3,DIPROP_RANGE = 4,DIPROP_DEADZONE = 5,DIPROP_SATURATION = 6,DIPROP_FFGAIN = 7,DIPROP_FFLOAD = 8,DIPROP_AUTOCENTER = 9,};
enum MACRO_DISPATCH_CONSTRUCT {DISPATCH_CONSTRUCT = 0x4000,};
enum MACRO_DPCAPS_NAMESERVICE {DPCAPS_NAMESERVICE = 0x1,DPCAPS_NAMESERVER = 0x2,DPCAPS_GUARANTEED = 0x4,};
enum MACRO_DPOPEN_OPENSESSION {DPOPEN_OPENSESSION = 1,DPOPEN_CREATESESSION = 2,};
enum MACRO_DTN_DATETIMECHANGE {DTN_DATETIMECHANGE = -759,DTN_USERSTRINGA = -758,DTN_USERSTRINGW = -745,DTN_USERSTRING = -758,DTN_WMKEYDOWNA = -757,DTN_WMKEYDOWNW = -744,DTN_WMKEYDOWN = -757,DTN_FORMATA = -756,DTN_FORMATW = -743,DTN_FORMAT = -756,DTN_FORMATQUERYA = -755,DTN_FORMATQUERYW = -742,DTN_FORMATQUERY = -755,DTN_DROPDOWN = -754,DTN_CLOSEUP = -753,};
enum MACRO_ENCODING_TYPE_MASK {CERT_ENCODING_TYPE_MASK = 0xFFFF,CMSG_ENCODING_TYPE_MASK = 0xFFFF0000,};
enum MACRO_E_SHUTDOWN_SERVICE {EC_EDK_E_SHUTDOWN_SERVICE = 0x2,EDK_E_SHUTDOWN_SERVICE = 0x800B0002,};
enum MACRO_FACILITY_VISUALCPP {FACILITY_VISUALCPP = 0x6D,};
enum MACRO_GETSETPAPERMETRICS {GETSETPAPERMETRICS = 35,};
enum MACRO_GETSETSCREENPARAMS {GETSETSCREENPARAMS = 3072,};
enum MACRO_GETVECTORBRUSHSIZE {GETVECTORBRUSHSIZE = 27,};
enum MACRO_HFRMREG_ENTERPRISE {HFRMREG_ENTERPRISE = 4,};
enum MACRO_IDB_STANDARDIMAGES {IDB_STANDARDIMAGES = 400,IDB_STANDARDIMAGESMIN = 400,IDB_STANDARDIMAGES96 = 400,IDB_STANDARDIMAGES72 = 401,IDB_STANDARDIMAGES120 = 402,};
enum MACRO_IDC_NEWUICURSORMIN {IDC_NEWUICURSORMIN = 500,IDC_RIGHTARROW = 500,IDC_CONTEXTHELP = 501,IDC_MAGNIFY = 502,IDC_NODROP = 503,IDC_TABLETOP = 504,IDC_HSIZEBAR = 505,IDC_VSIZEBAR = 506,IDC_HSPLITBAR = 507,IDC_VSPLITBAR = 508,IDC_SMALLARROWS = 509,IDC_LARGEARROWS = 510,IDC_HARROWS = 511,IDC_VARROWS = 512,IDC_NESWARROWS = 513,IDC_NWSEARROWS = 514,IDC_NEWUICURSORMAX = 514,};
enum MACRO_IPX_INTERFACE_ANSI {IPX_INTERFACE_ANSI_NAME_LEN = 48,};
enum MACRO_I_CHILDRENCALLBACK {I_CHILDRENCALLBACK = -1,};
enum MACRO_JOY_PASSDRIVERDATA {JOY_PASSDRIVERDATA = 0x10000000,JOY_HWS_ISHEADTRACKER = 0x2000000,JOY_HWS_ISGAMEPORTDRIVER = 0x4000000,JOY_HWS_ISANALOGPORTDRIVER = 0x8000000,JOY_HWS_AUTOLOAD = 0x10000000,JOY_HWS_NODEVNODE = 0x20000000,JOY_HWS_ISGAMEPORTEMULATOR = 0x40000000,JOY_US_VOLATILE = 0x8,};
enum MACRO_LINEADDRESSSHARING {LINEADDRESSSHARING_PRIVATE = 0x1,LINEADDRESSSHARING_BRIDGEDEXCL = 0x2,LINEADDRESSSHARING_BRIDGEDNEW = 0x4,LINEADDRESSSHARING_BRIDGEDSHARED = 0x8,LINEADDRESSSHARING_MONITORED = 0x10,};
enum MACRO_LINECALLPARAMFLAGS {LINECALLPARAMFLAGS_SECURE = 0x1,LINECALLPARAMFLAGS_IDLE = 0x2,LINECALLPARAMFLAGS_BLOCKID = 0x4,LINECALLPARAMFLAGS_ORIGOFFHOOK = 0x8,LINECALLPARAMFLAGS_DESTOFFHOOK = 0x10,LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 0x20,LINECALLPARAMFLAGS_PREDICTIVEDIAL = 0x40,LINECALLPARAMFLAGS_ONESTEPTRANSFER = 0x80,};
enum MACRO_LINEDEVSTATUSFLAGS {LINEDEVSTATUSFLAGS_CONNECTED = 0x1,LINEDEVSTATUSFLAGS_MSGWAIT = 0x2,LINEDEVSTATUSFLAGS_INSERVICE = 0x4,LINEDEVSTATUSFLAGS_LOCKED = 0x8,};
enum MACRO_LINEDISCONNECTMODE {LINEDISCONNECTMODE_NORMAL = 0x1,LINEDISCONNECTMODE_UNKNOWN = 0x2,LINEDISCONNECTMODE_REJECT = 0x4,LINEDISCONNECTMODE_PICKUP = 0x8,LINEDISCONNECTMODE_FORWARDED = 0x10,LINEDISCONNECTMODE_BUSY = 0x20,LINEDISCONNECTMODE_NOANSWER = 0x40,LINEDISCONNECTMODE_BADADDRESS = 0x80,LINEDISCONNECTMODE_UNREACHABLE = 0x100,LINEDISCONNECTMODE_CONGESTION = 0x200,LINEDISCONNECTMODE_INCOMPATIBLE = 0x400,LINEDISCONNECTMODE_UNAVAIL = 0x800,LINEDISCONNECTMODE_NODIALTONE = 0x1000,LINEDISCONNECTMODE_NUMBERCHANGED = 0x2000,LINEDISCONNECTMODE_OUTOFORDER = 0x4000,LINEDISCONNECTMODE_TEMPFAILURE = 0x8000,LINEDISCONNECTMODE_QOSUNAVAIL = 0x10000,LINEDISCONNECTMODE_BLOCKED = 0x20000,LINEDISCONNECTMODE_DONOTDISTURB = 0x40000,LINEDISCONNECTMODE_CANCELLED = 0x80000,};
enum MACRO_LINELOCATIONOPTION {LINELOCATIONOPTION_PULSEDIAL = 0x1,};
enum MACRO_LINEREMOVEFROMCONF {LINEREMOVEFROMCONF_NONE = 0x1,LINEREMOVEFROMCONF_LAST = 0x2,LINEREMOVEFROMCONF_ANY = 0x3,};
enum MACRO_LINETOLLLISTOPTION {LINETOLLLISTOPTION_ADD = 0x1,LINETOLLLISTOPTION_REMOVE = 0x2,};
enum MACRO_LINE_AGENTSPECIFIC {LINE_AGENTSPECIFIC = 21,LINE_AGENTSTATUS = 22,LINE_APPNEWCALL = 23,LINE_PROXYREQUEST = 24,LINE_REMOVE = 25,};
enum MACRO_LVM_GETSTRINGWIDTH {LVM_GETSTRINGWIDTH = 4113,};
enum MACRO_MAXIMUM_ENCRYPTION {MAXIMUM_ENCRYPTION_VALUE = 0x4,};
enum MACRO_MAXIMUM_PROCESSORS {MAXIMUM_PROCESSORS = 32,};
enum MACRO_MIXER_GETLINEINFOF {MIXER_GETLINEINFOF_DESTINATION = 0x0,MIXER_GETLINEINFOF_SOURCE = 0x1,MIXER_GETLINEINFOF_LINEID = 0x2,MIXER_GETLINEINFOF_COMPONENTTYPE = 0x3,MIXER_GETLINEINFOF_TARGETTYPE = 0x4,MIXER_GETLINEINFOF_QUERYMASK = 0xF,};
enum MACRO_MMIO_DEFAULTBUFFER {MMIO_DEFAULTBUFFER = 8192,};
enum MACRO_OtherProgramShowed {OtherProgramShowed = 6,};
enum MACRO_PHONEHOOKSWITCHDEV {PHONEHOOKSWITCHDEV_HANDSET = 0x1,PHONEHOOKSWITCHDEV_SPEAKER = 0x2,PHONEHOOKSWITCHDEV_HEADSET = 0x4,};
enum MACRO_PR_ACKNOWLEDGEMENT {PR_ACKNOWLEDGEMENT_MODE = 0x10003,PR_ALTERNATE_RECIPIENT_ALLOWED = 0x2000B,PR_AUTHORIZING_USERS = 0x30102,PR_AUTO_FORWARD_COMMENT = 0x4001E,PR_AUTO_FORWARD_COMMENT_W = 0x4001F,PR_AUTO_FORWARD_COMMENT_A = 0x4001E,PR_AUTO_FORWARDED = 0x5000B,PR_CONTENT_CONFIDENTIALITY_ALGORITHM_ID = 0x60102,PR_CONTENT_CORRELATOR = 0x70102,PR_CONTENT_IDENTIFIER = 0x8001E,PR_CONTENT_IDENTIFIER_W = 0x8001F,PR_CONTENT_IDENTIFIER_A = 0x8001E,PR_CONTENT_LENGTH = 0x90003,PR_CONTENT_RETURN_REQUESTED = 0xA000B,PR_CONVERSATION_KEY = 0xB0102,PR_CONVERSION_EITS = 0xC0102,PR_CONVERSION_WITH_LOSS_PROHIBITED = 0xD000B,PR_CONVERTED_EITS = 0xE0102,PR_DEFERRED_DELIVERY_TIME = 0xF0040,PR_DELIVER_TIME = 0x100040,PR_DISCARD_REASON = 0x110003,PR_DISCLOSURE_OF_RECIPIENTS = 0x12000B,PR_DL_EXPANSION_HISTORY = 0x130102,PR_DL_EXPANSION_PROHIBITED = 0x14000B,PR_EXPIRY_TIME = 0x150040,PR_IMPLICIT_CONVERSION_PROHIBITED = 0x16000B,PR_IMPORTANCE = 0x170003,PR_IPM_ID = 0x180102,PR_LATEST_DELIVERY_TIME = 0x190040,PR_MESSAGE_CLASS = 0x1A001E,PR_MESSAGE_CLASS_W = 0x1A001F,PR_MESSAGE_CLASS_A = 0x1A001E,PR_MESSAGE_DELIVERY_ID = 0x1B0102,PR_MESSAGE_SECURITY_LABEL = 0x1E0102,PR_OBSOLETED_IPMS = 0x1F0102,PR_ORIGINALLY_INTENDED_RECIPIENT_NAME = 0x200102,PR_ORIGINAL_EITS = 0x210102,PR_ORIGINATOR_CERTIFICATE = 0x220102,PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED = 0x23000B,PR_ORIGINATOR_RETURN_ADDRESS = 0x240102,PR_PARENT_KEY = 0x250102,PR_PRIORITY = 0x260003,PR_ORIGIN_CHECK = 0x270102,PR_PROOF_OF_SUBMISSION_REQUESTED = 0x28000B,PR_READ_RECEIPT_REQUESTED = 0x29000B,PR_RECEIPT_TIME = 0x2A0040,PR_RECIPIENT_REASSIGNMENT_PROHIBITED = 0x2B000B,PR_REDIRECTION_HISTORY = 0x2C0102,PR_RELATED_IPMS = 0x2D0102,PR_ORIGINAL_SENSITIVITY = 0x2E0003,PR_LANGUAGES = 0x2F001E,PR_LANGUAGES_W = 0x2F001F,PR_LANGUAGES_A = 0x2F001E,PR_REPLY_TIME = 0x300040,PR_REPORT_TAG = 0x310102,PR_REPORT_TIME = 0x320040,PR_RETURNED_IPM = 0x33000B,PR_SECURITY = 0x340003,PR_INCOMPLETE_COPY = 0x35000B,PR_SENSITIVITY = 0x360003,PR_SUBJECT = 0x37001E,PR_SUBJECT_W = 0x37001F,PR_SUBJECT_A = 0x37001E,PR_SUBJECT_IPM = 0x380102,PR_CLIENT_SUBMIT_TIME = 0x390040,PR_REPORT_NAME = 0x3A001E,PR_REPORT_NAME_W = 0x3A001F,PR_REPORT_NAME_A = 0x3A001E,PR_SENT_REPRESENTING_SEARCH_KEY = 0x3B0102,PR_X400_CONTENT_TYPE = 0x3C0102,PR_SUBJECT_PREFIX = 0x3D001E,PR_SUBJECT_PREFIX_W = 0x3D001F,PR_SUBJECT_PREFIX_A = 0x3D001E,PR_NON_RECEIPT_REASON = 0x3E0003,PR_RECEIVED_BY_ENTRYID = 0x3F0102,PR_RECEIVED_BY_NAME = 0x40001E,PR_RECEIVED_BY_NAME_W = 0x40001F,PR_RECEIVED_BY_NAME_A = 0x40001E,PR_SENT_REPRESENTING_ENTRYID = 0x410102,PR_SENT_REPRESENTING_NAME = 0x42001E,PR_SENT_REPRESENTING_NAME_W = 0x42001F,PR_SENT_REPRESENTING_NAME_A = 0x42001E,PR_RCVD_REPRESENTING_ENTRYID = 0x430102,PR_RCVD_REPRESENTING_NAME = 0x44001E,PR_RCVD_REPRESENTING_NAME_W = 0x44001F,PR_RCVD_REPRESENTING_NAME_A = 0x44001E,PR_REPORT_ENTRYID = 0x450102,PR_READ_RECEIPT_ENTRYID = 0x460102,PR_MESSAGE_SUBMISSION_ID = 0x470102,PR_PROVIDER_SUBMIT_TIME = 0x480040,PR_ORIGINAL_SUBJECT = 0x49001E,PR_ORIGINAL_SUBJECT_W = 0x49001F,PR_ORIGINAL_SUBJECT_A = 0x49001E,PR_DISC_VAL = 0x4A000B,PR_ORIG_MESSAGE_CLASS = 0x4B001E,PR_ORIG_MESSAGE_CLASS_W = 0x4B001F,PR_ORIG_MESSAGE_CLASS_A = 0x4B001E,PR_ORIGINAL_AUTHOR_ENTRYID = 0x4C0102,PR_ORIGINAL_AUTHOR_NAME = 0x4D001E,PR_ORIGINAL_AUTHOR_NAME_W = 0x4D001F,PR_ORIGINAL_AUTHOR_NAME_A = 0x4D001E,PR_ORIGINAL_SUBMIT_TIME = 0x4E0040,PR_REPLY_RECIPIENT_ENTRIES = 0x4F0102,PR_REPLY_RECIPIENT_NAMES = 0x50001E,PR_REPLY_RECIPIENT_NAMES_W = 0x50001F,PR_REPLY_RECIPIENT_NAMES_A = 0x50001E,PR_RECEIVED_BY_SEARCH_KEY = 0x510102,PR_RCVD_REPRESENTING_SEARCH_KEY = 0x520102,PR_READ_RECEIPT_SEARCH_KEY = 0x530102,PR_REPORT_SEARCH_KEY = 0x540102,PR_ORIGINAL_DELIVERY_TIME = 0x550040,PR_ORIGINAL_AUTHOR_SEARCH_KEY = 0x560102,PR_MESSAGE_TO_ME = 0x57000B,PR_MESSAGE_CC_ME = 0x58000B,PR_MESSAGE_RECIP_ME = 0x59000B,PR_ORIGINAL_SENDER_NAME = 0x5A001E,PR_ORIGINAL_SENDER_NAME_W = 0x5A001F,PR_ORIGINAL_SENDER_NAME_A = 0x5A001E,PR_ORIGINAL_SENDER_ENTRYID = 0x5B0102,PR_ORIGINAL_SENDER_SEARCH_KEY = 0x5C0102,PR_ORIGINAL_SENT_REPRESENTING_NAME = 0x5D001E,PR_ORIGINAL_SENT_REPRESENTING_NAME_W = 0x5D001F,PR_ORIGINAL_SENT_REPRESENTING_NAME_A = 0x5D001E,PR_ORIGINAL_SENT_REPRESENTING_ENTRYID = 0x5E0102,PR_ORIGINAL_SENT_REPRESENTING_SEARCH_KEY = 0x5F0102,PR_START_DATE = 0x600040,PR_END_DATE = 0x610040,PR_OWNER_APPT_ID = 0x620003,PR_RESPONSE_REQUESTED = 0x63000B,PR_SENT_REPRESENTING_ADDRTYPE = 0x64001E,PR_SENT_REPRESENTING_ADDRTYPE_W = 0x64001F,PR_SENT_REPRESENTING_ADDRTYPE_A = 0x64001E,PR_SENT_REPRESENTING_EMAIL_ADDRESS = 0x65001E,PR_SENT_REPRESENTING_EMAIL_ADDRESS_W = 0x65001F,PR_SENT_REPRESENTING_EMAIL_ADDRESS_A = 0x65001E,PR_ORIGINAL_SENDER_ADDRTYPE = 0x66001E,PR_ORIGINAL_SENDER_ADDRTYPE_W = 0x66001F,PR_ORIGINAL_SENDER_ADDRTYPE_A = 0x66001E,PR_ORIGINAL_SENDER_EMAIL_ADDRESS = 0x67001E,PR_ORIGINAL_SENDER_EMAIL_ADDRESS_W = 0x67001F,PR_ORIGINAL_SENDER_EMAIL_ADDRESS_A = 0x67001E,PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE = 0x68001E,PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_W = 0x68001F,PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_A = 0x68001E,PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS = 0x69001E,PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_W = 0x69001F,PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_A = 0x69001E,PR_CONVERSATION_TOPIC = 0x70001E,PR_CONVERSATION_TOPIC_W = 0x70001F,PR_CONVERSATION_TOPIC_A = 0x70001E,PR_CONVERSATION_INDEX = 0x710102,PR_ORIGINAL_DISPLAY_BCC = 0x72001E,PR_ORIGINAL_DISPLAY_BCC_W = 0x72001F,PR_ORIGINAL_DISPLAY_BCC_A = 0x72001E,PR_ORIGINAL_DISPLAY_CC = 0x73001E,PR_ORIGINAL_DISPLAY_CC_W = 0x73001F,PR_ORIGINAL_DISPLAY_CC_A = 0x73001E,PR_ORIGINAL_DISPLAY_TO = 0x74001E,PR_ORIGINAL_DISPLAY_TO_W = 0x74001F,PR_ORIGINAL_DISPLAY_TO_A = 0x74001E,PR_RECEIVED_BY_ADDRTYPE = 0x75001E,PR_RECEIVED_BY_ADDRTYPE_W = 0x75001F,PR_RECEIVED_BY_ADDRTYPE_A = 0x75001E,PR_RECEIVED_BY_EMAIL_ADDRESS = 0x76001E,PR_RECEIVED_BY_EMAIL_ADDRESS_W = 0x76001F,PR_RECEIVED_BY_EMAIL_ADDRESS_A = 0x76001E,PR_RCVD_REPRESENTING_ADDRTYPE = 0x77001E,PR_RCVD_REPRESENTING_ADDRTYPE_W = 0x77001F,PR_RCVD_REPRESENTING_ADDRTYPE_A = 0x77001E,PR_RCVD_REPRESENTING_EMAIL_ADDRESS = 0x78001E,PR_RCVD_REPRESENTING_EMAIL_ADDRESS_W = 0x78001F,PR_RCVD_REPRESENTING_EMAIL_ADDRESS_A = 0x78001E,PR_ORIGINAL_AUTHOR_ADDRTYPE = 0x79001E,PR_ORIGINAL_AUTHOR_ADDRTYPE_W = 0x79001F,PR_ORIGINAL_AUTHOR_ADDRTYPE_A = 0x79001E,PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS = 0x7A001E,PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_W = 0x7A001F,PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_A = 0x7A001E,PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE = 0x7B001E,PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_W = 0x7B001F,PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_A = 0x7B001E,PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS = 0x7C001E,PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_W = 0x7C001F,PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_A = 0x7C001E,PR_TRANSPORT_MESSAGE_HEADERS = 0x7D001E,PR_TRANSPORT_MESSAGE_HEADERS_W = 0x7D001F,PR_TRANSPORT_MESSAGE_HEADERS_A = 0x7D001E,PR_DELEGATION = 0x7E0102,PR_TNEF_CORRELATION_KEY = 0x7F0102,PR_BODY = 0x1000001E,PR_BODY_W = 0x1000001F,PR_BODY_A = 0x1000001E,PR_REPORT_TEXT = 0x1001001E,PR_REPORT_TEXT_W = 0x1001001F,PR_REPORT_TEXT_A = 0x1001001E,PR_ORIGINATOR_AND_DL_EXPANSION_HISTORY = 0x10020102,PR_REPORTING_DL_NAME = 0x10030102,PR_REPORTING_MTA_CERTIFICATE = 0x10040102,PR_RTF_SYNC_BODY_CRC = 0x10060003,PR_RTF_SYNC_BODY_COUNT = 0x10070003,PR_RTF_SYNC_BODY_TAG = 0x1008001E,PR_RTF_SYNC_BODY_TAG_W = 0x1008001F,PR_RTF_SYNC_BODY_TAG_A = 0x1008001E,PR_RTF_COMPRESSED = 0x10090102,PR_RTF_SYNC_PREFIX_COUNT = 0x10100003,PR_RTF_SYNC_TRAILING_COUNT = 0x10110003,PR_ORIGINALLY_INTENDED_RECIP_ENTRYID = 0x10120102,PR_CONTENT_INTEGRITY_CHECK = 0xC000102,PR_EXPLICIT_CONVERSION = 0xC010003,PR_IPM_RETURN_REQUESTED = 0xC02000B,PR_MESSAGE_TOKEN = 0xC030102,PR_NDR_REASON_CODE = 0xC040003,PR_NDR_DIAG_CODE = 0xC050003,PR_NON_RECEIPT_NOTIFICATION_REQUESTED = 0xC06000B,PR_DELIVERY_POINT = 0xC070003,PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED = 0xC08000B,PR_ORIGINATOR_REQUESTED_ALTERNATE_RECIPIENT = 0xC090102,PR_PHYSICAL_DELIVERY_BUREAU_FAX_DELIVERY = 0xC0A000B,PR_PHYSICAL_DELIVERY_MODE = 0xC0B0003,PR_PHYSICAL_DELIVERY_REPORT_REQUEST = 0xC0C0003,PR_PHYSICAL_FORWARDING_ADDRESS = 0xC0D0102,PR_PHYSICAL_FORWARDING_ADDRESS_REQUESTED = 0xC0E000B,PR_PHYSICAL_FORWARDING_PROHIBITED = 0xC0F000B,PR_PHYSICAL_RENDITION_ATTRIBUTES = 0xC100102,PR_PROOF_OF_DELIVERY = 0xC110102,PR_PROOF_OF_DELIVERY_REQUESTED = 0xC12000B,PR_RECIPIENT_CERTIFICATE = 0xC130102,PR_RECIPIENT_NUMBER_FOR_ADVICE = 0xC14001E,PR_RECIPIENT_NUMBER_FOR_ADVICE_W = 0xC14001F,PR_RECIPIENT_NUMBER_FOR_ADVICE_A = 0xC14001E,PR_RECIPIENT_TYPE = 0xC150003,PR_REGISTERED_MAIL_TYPE = 0xC160003,PR_REPLY_REQUESTED = 0xC17000B,PR_REQUESTED_DELIVERY_METHOD = 0xC180003,PR_SENDER_ENTRYID = 0xC190102,PR_SENDER_NAME = 0xC1A001E,PR_SENDER_NAME_W = 0xC1A001F,PR_SENDER_NAME_A = 0xC1A001E,PR_SUPPLEMENTARY_INFO = 0xC1B001E,PR_SUPPLEMENTARY_INFO_W = 0xC1B001F,PR_SUPPLEMENTARY_INFO_A = 0xC1B001E,PR_TYPE_OF_MTS_USER = 0xC1C0003,PR_SENDER_SEARCH_KEY = 0xC1D0102,PR_SENDER_ADDRTYPE = 0xC1E001E,PR_SENDER_ADDRTYPE_W = 0xC1E001F,PR_SENDER_ADDRTYPE_A = 0xC1E001E,PR_SENDER_EMAIL_ADDRESS = 0xC1F001E,PR_SENDER_EMAIL_ADDRESS_W = 0xC1F001F,PR_SENDER_EMAIL_ADDRESS_A = 0xC1F001E,PR_CURRENT_VERSION = 0xE000014,PR_DELETE_AFTER_SUBMIT = 0xE01000B,PR_DISPLAY_BCC = 0xE02001E,PR_DISPLAY_BCC_W = 0xE02001F,PR_DISPLAY_BCC_A = 0xE02001E,PR_DISPLAY_CC = 0xE03001E,PR_DISPLAY_CC_W = 0xE03001F,PR_DISPLAY_CC_A = 0xE03001E,PR_DISPLAY_TO = 0xE04001E,PR_DISPLAY_TO_W = 0xE04001F,PR_DISPLAY_TO_A = 0xE04001E,PR_PARENT_DISPLAY = 0xE05001E,PR_PARENT_DISPLAY_W = 0xE05001F,PR_PARENT_DISPLAY_A = 0xE05001E,PR_MESSAGE_DELIVERY_TIME = 0xE060040,PR_MESSAGE_FLAGS = 0xE070003,PR_MESSAGE_SIZE = 0xE080003,PR_PARENT_ENTRYID = 0xE090102,PR_SENTMAIL_ENTRYID = 0xE0A0102,PR_CORRELATE = 0xE0C000B,PR_CORRELATE_MTSID = 0xE0D0102,PR_DISCRETE_VALUES = 0xE0E000B,PR_RESPONSIBILITY = 0xE0F000B,PR_SPOOLER_STATUS = 0xE100003,PR_TRANSPORT_STATUS = 0xE110003,PR_MESSAGE_RECIPIENTS = 0xE12000D,PR_MESSAGE_ATTACHMENTS = 0xE13000D,PR_SUBMIT_FLAGS = 0xE140003,PR_RECIPIENT_STATUS = 0xE150003,PR_TRANSPORT_KEY = 0xE160003,PR_MSG_STATUS = 0xE170003,PR_MESSAGE_DOWNLOAD_TIME = 0xE180003,PR_CREATION_VERSION = 0xE190014,PR_MODIFY_VERSION = 0xE1A0014,PR_HASATTACH = 0xE1B000B,PR_BODY_CRC = 0xE1C0003,PR_NORMALIZED_SUBJECT = 0xE1D001E,PR_NORMALIZED_SUBJECT_W = 0xE1D001F,PR_NORMALIZED_SUBJECT_A = 0xE1D001E,PR_RTF_IN_SYNC = 0xE1F000B,PR_ATTACH_SIZE = 0xE200003,PR_ATTACH_NUM = 0xE210003,PR_PREPROCESS = 0xE22000B,PR_ORIGINATING_MTA_CERTIFICATE = 0xE250102,PR_PROOF_OF_SUBMISSION = 0xE260102,PR_ENTRYID = 0xFFF0102,PR_OBJECT_TYPE = 0xFFE0003,PR_ICON = 0xFFD0102,PR_MINI_ICON = 0xFFC0102,PR_STORE_ENTRYID = 0xFFB0102,PR_STORE_RECORD_KEY = 0xFFA0102,PR_RECORD_KEY = 0xFF90102,PR_MAPPING_SIGNATURE = 0xFF80102,PR_ACCESS_LEVEL = 0xFF70003,PR_INSTANCE_KEY = 0xFF60102,PR_ROW_TYPE = 0xFF50003,PR_ACCESS = 0xFF40003,PR_ROWID = 0x30000003,PR_DISPLAY_NAME = 0x3001001E,PR_DISPLAY_NAME_W = 0x3001001F,PR_DISPLAY_NAME_A = 0x3001001E,PR_ADDRTYPE = 0x3002001E,PR_ADDRTYPE_W = 0x3002001F,PR_ADDRTYPE_A = 0x3002001E,PR_EMAIL_ADDRESS = 0x3003001E,PR_EMAIL_ADDRESS_W = 0x3003001F,PR_EMAIL_ADDRESS_A = 0x3003001E,PR_COMMENT = 0x3004001E,PR_COMMENT_W = 0x3004001F,PR_COMMENT_A = 0x3004001E,PR_DEPTH = 0x30050003,PR_PROVIDER_DISPLAY = 0x3006001E,PR_PROVIDER_DISPLAY_W = 0x3006001F,PR_PROVIDER_DISPLAY_A = 0x3006001E,PR_CREATION_TIME = 0x30070040,PR_LAST_MODIFICATION_TIME = 0x30080040,PR_RESOURCE_FLAGS = 0x30090003,PR_PROVIDER_DLL_NAME = 0x300A001E,PR_PROVIDER_DLL_NAME_W = 0x300A001F,PR_PROVIDER_DLL_NAME_A = 0x300A001E,PR_SEARCH_KEY = 0x300B0102,PR_PROVIDER_UID = 0x300C0102,PR_PROVIDER_ORDINAL = 0x300D0003,PR_FORM_VERSION = 0x3301001E,PR_FORM_VERSION_W = 0x3301001F,PR_FORM_VERSION_A = 0x3301001E,PR_FORM_CLSID = 0x33020048,PR_FORM_CONTACT_NAME = 0x3303001E,PR_FORM_CONTACT_NAME_W = 0x3303001F,PR_FORM_CONTACT_NAME_A = 0x3303001E,PR_FORM_CATEGORY = 0x3304001E,PR_FORM_CATEGORY_W = 0x3304001F,PR_FORM_CATEGORY_A = 0x3304001E,PR_FORM_CATEGORY_SUB = 0x3305001E,PR_FORM_CATEGORY_SUB_W = 0x3305001F,PR_FORM_CATEGORY_SUB_A = 0x3305001E,PR_FORM_HOST_MAP = 0x33061003,PR_FORM_HIDDEN = 0x3307000B,PR_FORM_DESIGNER_NAME = 0x3308001E,PR_FORM_DESIGNER_NAME_W = 0x3308001F,PR_FORM_DESIGNER_NAME_A = 0x3308001E,PR_FORM_DESIGNER_GUID = 0x33090048,PR_FORM_MESSAGE_BEHAVIOR = 0x330A0003,PR_DEFAULT_STORE = 0x3400000B,PR_STORE_SUPPORT_MASK = 0x340D0003,PR_STORE_STATE = 0x340E0003,PR_IPM_SUBTREE_SEARCH_KEY = 0x34100102,PR_IPM_OUTBOX_SEARCH_KEY = 0x34110102,PR_IPM_WASTEBASKET_SEARCH_KEY = 0x34120102,PR_IPM_SENTMAIL_SEARCH_KEY = 0x34130102,PR_MDB_PROVIDER = 0x34140102,PR_RECEIVE_FOLDER_SETTINGS = 0x3415000D,PR_VALID_FOLDER_MASK = 0x35DF0003,PR_IPM_SUBTREE_ENTRYID = 0x35E00102,PR_IPM_OUTBOX_ENTRYID = 0x35E20102,PR_IPM_WASTEBASKET_ENTRYID = 0x35E30102,PR_IPM_SENTMAIL_ENTRYID = 0x35E40102,PR_VIEWS_ENTRYID = 0x35E50102,PR_COMMON_VIEWS_ENTRYID = 0x35E60102,PR_FINDER_ENTRYID = 0x35E70102,PR_CONTAINER_FLAGS = 0x36000003,PR_FOLDER_TYPE = 0x36010003,PR_CONTENT_COUNT = 0x36020003,PR_CONTENT_UNREAD = 0x36030003,PR_CREATE_TEMPLATES = 0x3604000D,PR_DETAILS_TABLE = 0x3605000D,PR_SEARCH = 0x3607000D,PR_SELECTABLE = 0x3609000B,PR_SUBFOLDERS = 0x360A000B,PR_STATUS = 0x360B0003,PR_ANR = 0x360C001E,PR_ANR_W = 0x360C001F,PR_ANR_A = 0x360C001E,PR_CONTENTS_SORT_ORDER = 0x360D1003,PR_CONTAINER_HIERARCHY = 0x360E000D,PR_CONTAINER_CONTENTS = 0x360F000D,PR_FOLDER_ASSOCIATED_CONTENTS = 0x3610000D,PR_DEF_CREATE_DL = 0x36110102,PR_DEF_CREATE_MAILUSER = 0x36120102,PR_CONTAINER_CLASS = 0x3613001E,PR_CONTAINER_CLASS_W = 0x3613001F,PR_CONTAINER_CLASS_A = 0x3613001E,PR_CONTAINER_MODIFY_VERSION = 0x36140014,PR_AB_PROVIDER_ID = 0x36150102,PR_DEFAULT_VIEW_ENTRYID = 0x36160102,PR_ASSOC_CONTENT_COUNT = 0x36170003,PR_ATTACHMENT_X400_PARAMETERS = 0x37000102,PR_ATTACH_DATA_OBJ = 0x3701000D,PR_ATTACH_DATA_BIN = 0x37010102,PR_ATTACH_ENCODING = 0x37020102,PR_ATTACH_EXTENSION = 0x3703001E,PR_ATTACH_EXTENSION_W = 0x3703001F,PR_ATTACH_EXTENSION_A = 0x3703001E,PR_ATTACH_FILENAME = 0x3704001E,PR_ATTACH_FILENAME_W = 0x3704001F,PR_ATTACH_FILENAME_A = 0x3704001E,PR_ATTACH_METHOD = 0x37050003,PR_ATTACH_LONG_FILENAME = 0x3707001E,PR_ATTACH_LONG_FILENAME_W = 0x3707001F,PR_ATTACH_LONG_FILENAME_A = 0x3707001E,PR_ATTACH_PATHNAME = 0x3708001E,PR_ATTACH_PATHNAME_W = 0x3708001F,PR_ATTACH_PATHNAME_A = 0x3708001E,PR_ATTACH_RENDERING = 0x37090102,PR_ATTACH_TAG = 0x370A0102,PR_RENDERING_POSITION = 0x370B0003,PR_ATTACH_TRANSPORT_NAME = 0x370C001E,PR_ATTACH_TRANSPORT_NAME_W = 0x370C001F,PR_ATTACH_TRANSPORT_NAME_A = 0x370C001E,PR_ATTACH_LONG_PATHNAME = 0x370D001E,PR_ATTACH_LONG_PATHNAME_W = 0x370D001F,PR_ATTACH_LONG_PATHNAME_A = 0x370D001E,PR_ATTACH_MIME_TAG = 0x370E001E,PR_ATTACH_MIME_TAG_W = 0x370E001F,PR_ATTACH_MIME_TAG_A = 0x370E001E,PR_ATTACH_ADDITIONAL_INFO = 0x370F0102,PR_DISPLAY_TYPE = 0x39000003,PR_TEMPLATEID = 0x39020102,PR_PRIMARY_CAPABILITY = 0x39040102,PR_7BIT_DISPLAY_NAME = 0x39FF001E,PR_ACCOUNT = 0x3A00001E,PR_ACCOUNT_W = 0x3A00001F,PR_ACCOUNT_A = 0x3A00001E,PR_ALTERNATE_RECIPIENT = 0x3A010102,PR_CALLBACK_TELEPHONE_NUMBER = 0x3A02001E,PR_CALLBACK_TELEPHONE_NUMBER_W = 0x3A02001F,PR_CALLBACK_TELEPHONE_NUMBER_A = 0x3A02001E,PR_CONVERSION_PROHIBITED = 0x3A03000B,PR_DISCLOSE_RECIPIENTS = 0x3A04000B,PR_GENERATION = 0x3A05001E,PR_GENERATION_W = 0x3A05001F,PR_GENERATION_A = 0x3A05001E,PR_GIVEN_NAME = 0x3A06001E,PR_GIVEN_NAME_W = 0x3A06001F,PR_GIVEN_NAME_A = 0x3A06001E,PR_GOVERNMENT_ID_NUMBER = 0x3A07001E,PR_GOVERNMENT_ID_NUMBER_W = 0x3A07001F,PR_GOVERNMENT_ID_NUMBER_A = 0x3A07001E,PR_BUSINESS_TELEPHONE_NUMBER = 0x3A08001E,PR_BUSINESS_TELEPHONE_NUMBER_W = 0x3A08001F,PR_BUSINESS_TELEPHONE_NUMBER_A = 0x3A08001E,PR_OFFICE_TELEPHONE_NUMBER = 0x3A08001E,PR_OFFICE_TELEPHONE_NUMBER_W = 0x3A08001F,PR_OFFICE_TELEPHONE_NUMBER_A = 0x3A08001E,PR_HOME_TELEPHONE_NUMBER = 0x3A09001E,PR_HOME_TELEPHONE_NUMBER_W = 0x3A09001F,PR_HOME_TELEPHONE_NUMBER_A = 0x3A09001E,PR_INITIALS = 0x3A0A001E,PR_INITIALS_W = 0x3A0A001F,PR_INITIALS_A = 0x3A0A001E,PR_KEYWORD = 0x3A0B001E,PR_KEYWORD_W = 0x3A0B001F,PR_KEYWORD_A = 0x3A0B001E,PR_LANGUAGE = 0x3A0C001E,PR_LANGUAGE_W = 0x3A0C001F,PR_LANGUAGE_A = 0x3A0C001E,PR_LOCATION = 0x3A0D001E,PR_LOCATION_W = 0x3A0D001F,PR_LOCATION_A = 0x3A0D001E,PR_MAIL_PERMISSION = 0x3A0E000B,PR_MHS_COMMON_NAME = 0x3A0F001E,PR_MHS_COMMON_NAME_W = 0x3A0F001F,PR_MHS_COMMON_NAME_A = 0x3A0F001E,PR_ORGANIZATIONAL_ID_NUMBER = 0x3A10001E,PR_ORGANIZATIONAL_ID_NUMBER_W = 0x3A10001F,PR_ORGANIZATIONAL_ID_NUMBER_A = 0x3A10001E,PR_SURNAME = 0x3A11001E,PR_SURNAME_W = 0x3A11001F,PR_SURNAME_A = 0x3A11001E,PR_ORIGINAL_ENTRYID = 0x3A120102,PR_ORIGINAL_DISPLAY_NAME = 0x3A13001E,PR_ORIGINAL_DISPLAY_NAME_W = 0x3A13001F,PR_ORIGINAL_DISPLAY_NAME_A = 0x3A13001E,PR_ORIGINAL_SEARCH_KEY = 0x3A140102,PR_POSTAL_ADDRESS = 0x3A15001E,PR_POSTAL_ADDRESS_W = 0x3A15001F,PR_POSTAL_ADDRESS_A = 0x3A15001E,PR_COMPANY_NAME = 0x3A16001E,PR_COMPANY_NAME_W = 0x3A16001F,PR_COMPANY_NAME_A = 0x3A16001E,PR_TITLE = 0x3A17001E,PR_TITLE_W = 0x3A17001F,PR_TITLE_A = 0x3A17001E,PR_DEPARTMENT_NAME = 0x3A18001E,PR_DEPARTMENT_NAME_W = 0x3A18001F,PR_DEPARTMENT_NAME_A = 0x3A18001E,PR_OFFICE_LOCATION = 0x3A19001E,PR_OFFICE_LOCATION_W = 0x3A19001F,PR_OFFICE_LOCATION_A = 0x3A19001E,PR_PRIMARY_TELEPHONE_NUMBER = 0x3A1A001E,PR_PRIMARY_TELEPHONE_NUMBER_W = 0x3A1A001F,PR_PRIMARY_TELEPHONE_NUMBER_A = 0x3A1A001E,PR_BUSINESS2_TELEPHONE_NUMBER = 0x3A1B001E,PR_BUSINESS2_TELEPHONE_NUMBER_W = 0x3A1B001F,PR_BUSINESS2_TELEPHONE_NUMBER_A = 0x3A1B001E,PR_OFFICE2_TELEPHONE_NUMBER = 0x3A1B001E,PR_OFFICE2_TELEPHONE_NUMBER_W = 0x3A1B001F,PR_OFFICE2_TELEPHONE_NUMBER_A = 0x3A1B001E,PR_MOBILE_TELEPHONE_NUMBER = 0x3A1C001E,PR_MOBILE_TELEPHONE_NUMBER_W = 0x3A1C001F,PR_MOBILE_TELEPHONE_NUMBER_A = 0x3A1C001E,PR_CELLULAR_TELEPHONE_NUMBER = 0x3A1C001E,PR_CELLULAR_TELEPHONE_NUMBER_W = 0x3A1C001F,PR_CELLULAR_TELEPHONE_NUMBER_A = 0x3A1C001E,PR_RADIO_TELEPHONE_NUMBER = 0x3A1D001E,PR_RADIO_TELEPHONE_NUMBER_W = 0x3A1D001F,PR_RADIO_TELEPHONE_NUMBER_A = 0x3A1D001E,PR_CAR_TELEPHONE_NUMBER = 0x3A1E001E,PR_CAR_TELEPHONE_NUMBER_W = 0x3A1E001F,PR_CAR_TELEPHONE_NUMBER_A = 0x3A1E001E,PR_OTHER_TELEPHONE_NUMBER = 0x3A1F001E,PR_OTHER_TELEPHONE_NUMBER_W = 0x3A1F001F,PR_OTHER_TELEPHONE_NUMBER_A = 0x3A1F001E,PR_TRANSMITABLE_DISPLAY_NAME = 0x3A20001E,PR_TRANSMITABLE_DISPLAY_NAME_W = 0x3A20001F,PR_TRANSMITABLE_DISPLAY_NAME_A = 0x3A20001E,PR_PAGER_TELEPHONE_NUMBER = 0x3A21001E,PR_PAGER_TELEPHONE_NUMBER_W = 0x3A21001F,PR_PAGER_TELEPHONE_NUMBER_A = 0x3A21001E,PR_BEEPER_TELEPHONE_NUMBER = 0x3A21001E,PR_BEEPER_TELEPHONE_NUMBER_W = 0x3A21001F,PR_BEEPER_TELEPHONE_NUMBER_A = 0x3A21001E,PR_USER_CERTIFICATE = 0x3A220102,PR_PRIMARY_FAX_NUMBER = 0x3A23001E,PR_PRIMARY_FAX_NUMBER_W = 0x3A23001F,PR_PRIMARY_FAX_NUMBER_A = 0x3A23001E,PR_BUSINESS_FAX_NUMBER = 0x3A24001E,PR_BUSINESS_FAX_NUMBER_W = 0x3A24001F,PR_BUSINESS_FAX_NUMBER_A = 0x3A24001E,PR_HOME_FAX_NUMBER = 0x3A25001E,PR_HOME_FAX_NUMBER_W = 0x3A25001F,PR_HOME_FAX_NUMBER_A = 0x3A25001E,PR_COUNTRY = 0x3A26001E,PR_COUNTRY_W = 0x3A26001F,PR_COUNTRY_A = 0x3A26001E,PR_BUSINESS_ADDRESS_COUNTRY = 0x3A26001E,PR_BUSINESS_ADDRESS_COUNTRY_W = 0x3A26001F,PR_BUSINESS_ADDRESS_COUNTRY_A = 0x3A26001E,PR_LOCALITY = 0x3A27001E,PR_LOCALITY_W = 0x3A27001F,PR_LOCALITY_A = 0x3A27001E,PR_BUSINESS_ADDRESS_CITY = 0x3A27001E,PR_BUSINESS_ADDRESS_CITY_W = 0x3A27001F,PR_BUSINESS_ADDRESS_CITY_A = 0x3A27001E,PR_STATE_OR_PROVINCE = 0x3A28001E,PR_STATE_OR_PROVINCE_W = 0x3A28001F,PR_STATE_OR_PROVINCE_A = 0x3A28001E,PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE = 0x3A28001E,PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_W = 0x3A28001F,PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_A = 0x3A28001E,PR_STREET_ADDRESS = 0x3A29001E,PR_STREET_ADDRESS_W = 0x3A29001F,PR_STREET_ADDRESS_A = 0x3A29001E,PR_BUSINESS_ADDRESS_STREET = 0x3A29001E,PR_BUSINESS_ADDRESS_STREET_W = 0x3A29001F,PR_BUSINESS_ADDRESS_STREET_A = 0x3A29001E,PR_POSTAL_CODE = 0x3A2A001E,PR_POSTAL_CODE_W = 0x3A2A001F,PR_POSTAL_CODE_A = 0x3A2A001E,PR_BUSINESS_ADDRESS_POSTAL_CODE = 0x3A2A001E,PR_BUSINESS_ADDRESS_POSTAL_CODE_W = 0x3A2A001F,PR_BUSINESS_ADDRESS_POSTAL_CODE_A = 0x3A2A001E,PR_POST_OFFICE_BOX = 0x3A2B001E,PR_POST_OFFICE_BOX_W = 0x3A2B001F,PR_POST_OFFICE_BOX_A = 0x3A2B001E,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX = 0x3A2B001E,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_W = 0x3A2B001F,PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_A = 0x3A2B001E,PR_TELEX_NUMBER = 0x3A2C001E,PR_TELEX_NUMBER_W = 0x3A2C001F,PR_TELEX_NUMBER_A = 0x3A2C001E,PR_ISDN_NUMBER = 0x3A2D001E,PR_ISDN_NUMBER_W = 0x3A2D001F,PR_ISDN_NUMBER_A = 0x3A2D001E,PR_ASSISTANT_TELEPHONE_NUMBER = 0x3A2E001E,PR_ASSISTANT_TELEPHONE_NUMBER_W = 0x3A2E001F,PR_ASSISTANT_TELEPHONE_NUMBER_A = 0x3A2E001E,PR_HOME2_TELEPHONE_NUMBER = 0x3A2F001E,PR_HOME2_TELEPHONE_NUMBER_W = 0x3A2F001F,PR_HOME2_TELEPHONE_NUMBER_A = 0x3A2F001E,PR_ASSISTANT = 0x3A30001E,PR_ASSISTANT_W = 0x3A30001F,PR_ASSISTANT_A = 0x3A30001E,PR_SEND_RICH_INFO = 0x3A40000B,PR_WEDDING_ANNIVERSARY = 0x3A410040,PR_BIRTHDAY = 0x3A420040,PR_HOBBIES = 0x3A43001E,PR_HOBBIES_W = 0x3A43001F,PR_HOBBIES_A = 0x3A43001E,PR_MIDDLE_NAME = 0x3A44001E,PR_MIDDLE_NAME_W = 0x3A44001F,PR_MIDDLE_NAME_A = 0x3A44001E,PR_DISPLAY_NAME_PREFIX = 0x3A45001E,PR_DISPLAY_NAME_PREFIX_W = 0x3A45001F,PR_DISPLAY_NAME_PREFIX_A = 0x3A45001E,PR_PROFESSION = 0x3A46001E,PR_PROFESSION_W = 0x3A46001F,PR_PROFESSION_A = 0x3A46001E,PR_PREFERRED_BY_NAME = 0x3A47001E,PR_PREFERRED_BY_NAME_W = 0x3A47001F,PR_PREFERRED_BY_NAME_A = 0x3A47001E,PR_SPOUSE_NAME = 0x3A48001E,PR_SPOUSE_NAME_W = 0x3A48001F,PR_SPOUSE_NAME_A = 0x3A48001E,PR_COMPUTER_NETWORK_NAME = 0x3A49001E,PR_COMPUTER_NETWORK_NAME_W = 0x3A49001F,PR_COMPUTER_NETWORK_NAME_A = 0x3A49001E,PR_CUSTOMER_ID = 0x3A4A001E,PR_CUSTOMER_ID_W = 0x3A4A001F,PR_CUSTOMER_ID_A = 0x3A4A001E,PR_TTYTDD_PHONE_NUMBER = 0x3A4B001E,PR_TTYTDD_PHONE_NUMBER_W = 0x3A4B001F,PR_TTYTDD_PHONE_NUMBER_A = 0x3A4B001E,PR_FTP_SITE = 0x3A4C001E,PR_FTP_SITE_W = 0x3A4C001F,PR_FTP_SITE_A = 0x3A4C001E,PR_GENDER = 0x3A4D0002,PR_MANAGER_NAME = 0x3A4E001E,PR_MANAGER_NAME_W = 0x3A4E001F,PR_MANAGER_NAME_A = 0x3A4E001E,PR_NICKNAME = 0x3A4F001E,PR_NICKNAME_W = 0x3A4F001F,PR_NICKNAME_A = 0x3A4F001E,PR_PERSONAL_HOME_PAGE = 0x3A50001E,PR_PERSONAL_HOME_PAGE_W = 0x3A50001F,PR_PERSONAL_HOME_PAGE_A = 0x3A50001E,PR_BUSINESS_HOME_PAGE = 0x3A51001E,PR_BUSINESS_HOME_PAGE_W = 0x3A51001F,PR_BUSINESS_HOME_PAGE_A = 0x3A51001E,PR_CONTACT_VERSION = 0x3A520048,PR_CONTACT_ENTRYIDS = 0x3A531102,PR_CONTACT_ADDRTYPES = 0x3A54101E,PR_CONTACT_ADDRTYPES_W = 0x3A54101F,PR_CONTACT_ADDRTYPES_A = 0x3A54101E,PR_CONTACT_DEFAULT_ADDRESS_INDEX = 0x3A550003,PR_CONTACT_EMAIL_ADDRESSES = 0x3A56101E,PR_CONTACT_EMAIL_ADDRESSES_W = 0x3A56101F,PR_CONTACT_EMAIL_ADDRESSES_A = 0x3A56101E,PR_COMPANY_MAIN_PHONE_NUMBER = 0x3A57001E,PR_COMPANY_MAIN_PHONE_NUMBER_W = 0x3A57001F,PR_COMPANY_MAIN_PHONE_NUMBER_A = 0x3A57001E,PR_CHILDRENS_NAMES = 0x3A58101E,PR_CHILDRENS_NAMES_W = 0x3A58101F,PR_CHILDRENS_NAMES_A = 0x3A58101E,PR_HOME_ADDRESS_CITY = 0x3A59001E,PR_HOME_ADDRESS_CITY_W = 0x3A59001F,PR_HOME_ADDRESS_CITY_A = 0x3A59001E,PR_HOME_ADDRESS_COUNTRY = 0x3A5A001E,PR_HOME_ADDRESS_COUNTRY_W = 0x3A5A001F,PR_HOME_ADDRESS_COUNTRY_A = 0x3A5A001E,PR_HOME_ADDRESS_POSTAL_CODE = 0x3A5B001E,PR_HOME_ADDRESS_POSTAL_CODE_W = 0x3A5B001F,PR_HOME_ADDRESS_POSTAL_CODE_A = 0x3A5B001E,PR_HOME_ADDRESS_STATE_OR_PROVINCE = 0x3A5C001E,PR_HOME_ADDRESS_STATE_OR_PROVINCE_W = 0x3A5C001F,PR_HOME_ADDRESS_STATE_OR_PROVINCE_A = 0x3A5C001E,PR_HOME_ADDRESS_STREET = 0x3A5D001E,PR_HOME_ADDRESS_STREET_W = 0x3A5D001F,PR_HOME_ADDRESS_STREET_A = 0x3A5D001E,PR_HOME_ADDRESS_POST_OFFICE_BOX = 0x3A5E001E,PR_HOME_ADDRESS_POST_OFFICE_BOX_W = 0x3A5E001F,PR_HOME_ADDRESS_POST_OFFICE_BOX_A = 0x3A5E001E,PR_OTHER_ADDRESS_CITY = 0x3A5F001E,PR_OTHER_ADDRESS_CITY_W = 0x3A5F001F,PR_OTHER_ADDRESS_CITY_A = 0x3A5F001E,PR_OTHER_ADDRESS_COUNTRY = 0x3A60001E,PR_OTHER_ADDRESS_COUNTRY_W = 0x3A60001F,PR_OTHER_ADDRESS_COUNTRY_A = 0x3A60001E,PR_OTHER_ADDRESS_POSTAL_CODE = 0x3A61001E,PR_OTHER_ADDRESS_POSTAL_CODE_W = 0x3A61001F,PR_OTHER_ADDRESS_POSTAL_CODE_A = 0x3A61001E,PR_OTHER_ADDRESS_STATE_OR_PROVINCE = 0x3A62001E,PR_OTHER_ADDRESS_STATE_OR_PROVINCE_W = 0x3A62001F,PR_OTHER_ADDRESS_STATE_OR_PROVINCE_A = 0x3A62001E,PR_OTHER_ADDRESS_STREET = 0x3A63001E,PR_OTHER_ADDRESS_STREET_W = 0x3A63001F,PR_OTHER_ADDRESS_STREET_A = 0x3A63001E,PR_OTHER_ADDRESS_POST_OFFICE_BOX = 0x3A64001E,PR_OTHER_ADDRESS_POST_OFFICE_BOX_W = 0x3A64001F,PR_OTHER_ADDRESS_POST_OFFICE_BOX_A = 0x3A64001E,PR_STORE_PROVIDERS = 0x3D000102,PR_AB_PROVIDERS = 0x3D010102,PR_TRANSPORT_PROVIDERS = 0x3D020102,PR_DEFAULT_PROFILE = 0x3D04000B,PR_AB_SEARCH_PATH = 0x3D051102,PR_AB_DEFAULT_DIR = 0x3D060102,PR_AB_DEFAULT_PAB = 0x3D070102,PR_FILTERING_HOOKS = 0x3D080102,PR_SERVICE_NAME = 0x3D09001E,PR_SERVICE_NAME_W = 0x3D09001F,PR_SERVICE_NAME_A = 0x3D09001E,PR_SERVICE_DLL_NAME = 0x3D0A001E,PR_SERVICE_DLL_NAME_W = 0x3D0A001F,PR_SERVICE_DLL_NAME_A = 0x3D0A001E,PR_SERVICE_ENTRY_NAME = 0x3D0B001E,PR_SERVICE_UID = 0x3D0C0102,PR_SERVICE_EXTRA_UIDS = 0x3D0D0102,PR_SERVICES = 0x3D0E0102,PR_SERVICE_SUPPORT_FILES = 0x3D0F101E,PR_SERVICE_SUPPORT_FILES_W = 0x3D0F101F,PR_SERVICE_SUPPORT_FILES_A = 0x3D0F101E,PR_SERVICE_DELETE_FILES = 0x3D10101E,PR_SERVICE_DELETE_FILES_W = 0x3D10101F,PR_SERVICE_DELETE_FILES_A = 0x3D10101E,PR_AB_SEARCH_PATH_UPDATE = 0x3D110102,PR_PROFILE_NAME = 0x3D12001E,PR_PROFILE_NAME_A = 0x3D12001E,PR_PROFILE_NAME_W = 0x3D12001F,PR_IDENTITY_DISPLAY = 0x3E00001E,PR_IDENTITY_DISPLAY_W = 0x3E00001F,PR_IDENTITY_DISPLAY_A = 0x3E00001E,PR_IDENTITY_ENTRYID = 0x3E010102,PR_RESOURCE_METHODS = 0x3E020003,PR_RESOURCE_TYPE = 0x3E030003,PR_STATUS_CODE = 0x3E040003,PR_IDENTITY_SEARCH_KEY = 0x3E050102,PR_OWN_STORE_ENTRYID = 0x3E060102,PR_RESOURCE_PATH = 0x3E07001E,PR_RESOURCE_PATH_W = 0x3E07001F,PR_RESOURCE_PATH_A = 0x3E07001E,PR_STATUS_STRING = 0x3E08001E,PR_STATUS_STRING_W = 0x3E08001F,PR_STATUS_STRING_A = 0x3E08001E,PR_X400_DEFERRED_DELIVERY_CANCEL = 0x3E09000B,PR_HEADER_FOLDER_ENTRYID = 0x3E0A0102,PR_REMOTE_PROGRESS = 0x3E0B0003,PR_REMOTE_PROGRESS_TEXT = 0x3E0C001E,PR_REMOTE_PROGRESS_TEXT_W = 0x3E0C001F,PR_REMOTE_PROGRESS_TEXT_A = 0x3E0C001E,PR_REMOTE_VALIDATE_OK = 0x3E0D000B,PR_CONTROL_FLAGS = 0x3F000003,PR_CONTROL_STRUCTURE = 0x3F010102,PR_CONTROL_TYPE = 0x3F020003,PR_DELTAX = 0x3F030003,PR_DELTAY = 0x3F040003,PR_XPOS = 0x3F050003,PR_YPOS = 0x3F060003,PR_CONTROL_ID = 0x3F070102,PR_INITIAL_DETAILS_PANE = 0x3F080003,};
enum MACRO_RequestInterrupted {RequestInterrupted = 3,RequestInProgress = 4,};
enum MACRO_SECPKG_ATTR_ISSUER {SECPKG_ATTR_ISSUER_LIST = 0x50,SECPKG_ATTR_REMOTE_CRED = 0x51,SECPKG_ATTR_LOCAL_CRED = 0x52,};
enum MACRO_SNMPAPI_TRANSLATED {SNMPAPI_TRANSLATED = 0,SNMPAPI_UNTRANSLATED_V1 = 1,SNMPAPI_UNTRANSLATED_V2 = 2,SNMPAPI_NO_SUPPORT = 0,SNMPAPI_V1_SUPPORT = 1,SNMPAPI_V2_SUPPORT = 2,SNMPAPI_M2M_SUPPORT = 3,SNMPAPI_OFF = 0,SNMPAPI_ON = 1,SNMPAPI_FAILURE = 0,SNMPAPI_SUCCESS = 1,SNMPAPI_ALLOC_ERROR = 2,SNMPAPI_CONTEXT_INVALID = 3,SNMPAPI_CONTEXT_UNKNOWN = 4,SNMPAPI_ENTITY_INVALID = 5,SNMPAPI_ENTITY_UNKNOWN = 6,SNMPAPI_INDEX_INVALID = 7,SNMPAPI_NOOP = 8,SNMPAPI_OID_INVALID = 9,SNMPAPI_OPERATION_INVALID = 10,SNMPAPI_OUTPUT_TRUNCATED = 11,SNMPAPI_PDU_INVALID = 12,SNMPAPI_SESSION_INVALID = 13,SNMPAPI_SYNTAX_INVALID = 14,SNMPAPI_VBL_INVALID = 15,SNMPAPI_MODE_INVALID = 16,SNMPAPI_SIZE_INVALID = 17,SNMPAPI_NOT_INITIALIZED = 18,SNMPAPI_MESSAGE_INVALID = 19,SNMPAPI_HWND_INVALID = 20,SNMPAPI_OTHER_ERROR = 99,SNMPAPI_TL_NOT_INITIALIZED = 100,SNMPAPI_TL_NOT_SUPPORTED = 101,SNMPAPI_TL_NOT_AVAILABLE = 102,SNMPAPI_TL_RESOURCE_ERROR = 103,SNMPAPI_TL_UNDELIVERABLE = 104,SNMPAPI_TL_SRC_INVALID = 105,SNMPAPI_TL_INVALID_PARAM = 106,SNMPAPI_TL_IN_USE = 107,SNMPAPI_TL_TIMEOUT = 108,SNMPAPI_TL_PDU_TOO_BIG = 109,SNMPAPI_TL_OTHER = 199,};
enum MACRO_SSF_SHOWALLOBJECTS {SSF_SHOWALLOBJECTS = 0x1,SSF_SHOWEXTENSIONS = 0x2,SSF_SHOWCOMPCOLOR = 0x8,SSF_SHOWSYSFILES = 0x20,SSF_DOUBLECLICKINWEBVIEW = 0x80,SSF_SHOWATTRIBCOL = 0x100,SSF_DESKTOPHTML = 0x200,SSF_WIN95CLASSIC = 0x400,SSF_DONTPRETTYPATH = 0x800,SSF_SHOWINFOTIP = 0x2000,SSF_MAPNETDRVBUTTON = 0x1000,SSF_NOCONFIRMRECYCLE = 0x8000,SSF_HIDEICONS = 0x4000,};
enum MACRO_STD_BOOKMARKLENGTH {STD_BOOKMARKLENGTH = 1,};
enum MACRO_TAPIMAXAPPNAMESIZE {TAPIMAXAPPNAMESIZE = 40,};
enum MACRO_TBN_GETBUTTONINFOA {TBN_GETBUTTONINFOA = -700,TBN_GETBUTTONINFOW = -720,TBN_BEGINDRAG = -701,TBN_ENDDRAG = -702,TBN_BEGINADJUST = -703,TBN_ENDADJUST = -704,TBN_RESET = -705,TBN_QUERYINSERT = -706,TBN_QUERYDELETE = -707,TBN_TOOLBARCHANGE = -708,TBN_CUSTHELP = -709,TBN_DROPDOWN = -710,TBN_GETOBJECT = -712,};
enum MACRO_TOTALBYTESINQUEUES {TOTALBYTESINQUEUES = 18,};
enum MACRO_TOTALSESSINPACKETS {TOTALSESSINPACKETS = 30,TOTALSESSINBYTES = 32,};
enum MACRO_TRANSPORT_DOWNLOAD {TRANSPORT_DOWNLOAD = 1,TRANSPORT_UPLOAD = 2,};
enum MACRO_TVN_ITEMEXPANDINGA {TVN_ITEMEXPANDINGA = -405,TVN_ITEMEXPANDINGW = -454,TVN_ITEMEXPANDEDA = -406,TVN_ITEMEXPANDEDW = -455,TVN_BEGINDRAGA = -407,TVN_BEGINDRAGW = -456,TVN_BEGINRDRAGA = -408,TVN_BEGINRDRAGW = -457,TVN_DELETEITEMA = -409,TVN_DELETEITEMW = -458,TVN_BEGINLABELEDITA = -410,TVN_BEGINLABELEDITW = -459,TVN_ENDLABELEDITA = -411,TVN_ENDLABELEDITW = -460,TVN_KEYDOWN = -412,TVN_GETINFOTIPA = -413,TVN_GETINFOTIPW = -414,TVN_SINGLEEXPAND = -415,TVN_SELCHANGING = -401,TVN_SELCHANGED = -402,TVN_GETDISPINFO = -403,TVN_SETDISPINFO = -404,TVN_ITEMEXPANDING = -405,TVN_ITEMEXPANDED = -406,TVN_BEGINDRAG = -407,TVN_BEGINRDRAG = -408,TVN_DELETEITEM = -409,TVN_BEGINLABELEDIT = -410,TVN_ENDLABELEDIT = -411,TVN_GETINFOTIP = -413,};
enum MACRO_USER_AUTHENTICATED {USER_AUTHENTICATED = 0x1,};
enum MACRO_WAVE_INVALIDFORMAT {WAVE_INVALIDFORMAT = 0x0,WAVE_FORMAT_1M08 = 0x1,WAVE_FORMAT_1S08 = 0x2,WAVE_FORMAT_1M16 = 0x4,WAVE_FORMAT_1S16 = 0x8,WAVE_FORMAT_2M08 = 0x10,WAVE_FORMAT_2S08 = 0x20,WAVE_FORMAT_2M16 = 0x40,WAVE_FORMAT_2S16 = 0x80,WAVE_FORMAT_4M08 = 0x100,WAVE_FORMAT_4S08 = 0x200,WAVE_FORMAT_4M16 = 0x400,WAVE_FORMAT_4S16 = 0x800,WAVE_FORMAT_PCM = 0x1,};
enum MACRO_WLUALINKACTIVATING {WLUALINKACTIVATING = 13,};
enum MACRO_WSAEPROTONOSUPPORT {WSAEPROTONOSUPPORT = 10043,};
enum MACRO_WSAESOCKTNOSUPPORT {WSAESOCKTNOSUPPORT = 10044,};
enum MACRO_WSAVERNOTSUPPORTED {WSAVERNOTSUPPORTED = 10092,};
enum MACRO_cchMaxCreateMSName {cchMaxCreateMSName = 11,};
enum MACRO_dispidAccelCommand {dispidAccelCommand = 3004,};
enum MACRO_ecProxyDLLNotFound {ecProxyDLLNotFound = 50014,};
enum MACRO_ecProxyDLLProtocol {ecProxyDLLProtocol = 50008,};
enum MACRO_ecProxyDLLSoftware {ecProxyDLLSoftware = 50011,};
enum MACRO_errVtoSilentCancel {errVtoSilentCancel = -30030,};
enum MACRO_grfdexPropExtraAll {grfdexPropExtraAll = 192,};
enum MACRO_hrAlreadyListening {hrAlreadyListening = 1713,};
enum MACRO_hrBFNotSynchronous {hrBFNotSynchronous = 0x880000C8,};
enum MACRO_hrBackupInProgress {hrBackupInProgress = 0xC80001F9,};
enum MACRO_hrColumnDoesNotFit {hrColumnDoesNotFit = 0xC80005DF,};
enum MACRO_hrDatabaseAttached {hrDatabaseAttached = 0x880003EF,};
enum MACRO_hrDatabaseNotFound {hrDatabaseNotFound = 0xC80004B3,};
enum MACRO_hrFileAccessDenied {hrFileAccessDenied = 0xC8000408,};
enum MACRO_hrFileOpenReadOnly {hrFileOpenReadOnly = 0x88000715,};
enum MACRO_hrIllegalOperation {hrIllegalOperation = 0xC8000520,};
enum MACRO_hrInvalidOperation {hrInvalidOperation = 0xC8000772,};
enum MACRO_hrInvalidParameter {hrInvalidParameter = 0xC80003EB,};
enum MACRO_hrNotInTransaction {hrNotInTransaction = 0xC800041E,};
enum MACRO_hrOutOfFileHandles {hrOutOfFileHandles = 0xC80003FC,};
enum MACRO_hrPermissionDenied {hrPermissionDenied = 0xC8000711,};
enum MACRO_hrRestoreLogTooLow {hrRestoreLogTooLow = 0xC8000229,};
enum MACRO_hrRestoreMapExists {hrRestoreMapExists = 0xC7FF0008,};
enum MACRO_ichOpMapReplyToAll {ichOpMapReplyToAll = 3,ichOpMapForward = 4,};
enum MACRO_oledbIColumnsInfo_ {oledbIColumnsInfo__GetColumnInfo = 50006,oledbIColumnsInfo__MapColumnIDs = 50007,};
enum MACRO_oledbIConvertType_ {oledbIConvertType__CanConvert = 50029,};
enum MACRO_oledbIDBInitialize {oledbIDBInitialize = 50042,};
enum MACRO_oledbIDBProperties {oledbIDBProperties = 50045,};
enum MACRO_oledbIErrorLookup_ {oledbIErrorLookup__GetErrorDescription = 50059,oledbIErrorLookup__GetHelpInfo = 50060,oledbIErrorLookup__ReleaseErrors = 50061,};
enum MACRO_oledbIErrorRecords {oledbIErrorRecords = 50062,};
enum MACRO_oledbIRowsetChange {oledbIRowsetChange = 50082,};
enum MACRO_oledbIRowsetIndex_ {oledbIRowsetIndex__GetIndexInfo = 50089,oledbIRowsetIndex__Seek = 50090,oledbIRowsetIndex__SetRange = 50091,};
enum MACRO_oledbIRowsetLocate {oledbIRowsetLocate___IRowset = 50096,oledbIRowsetLocate__Compare = 50097,oledbIRowsetLocate__GetRowsAt = 50098,oledbIRowsetLocate__GetRowsByBookmark = 50099,oledbIRowsetLocate__Hash = 50100,};
enum MACRO_oledbIRowsetNotify {oledbIRowsetNotify = 50101,};
enum MACRO_oledbIRowsetScroll {oledbIRowsetScroll___IRowsetLocate = 50108,oledbIRowsetScroll__GetApproximatePosition = 50109,oledbIRowsetScroll__GetRowsAtRatio = 50110,};
enum MACRO_oledbIRowsetUpdate {oledbIRowsetUpdate___IRowsetChange = 50111,oledbIRowsetUpdate__GetOriginalData = 50112,oledbIRowsetUpdate__GetPendingRows = 50113,oledbIRowsetUpdate__GetRowStatus = 50114,oledbIRowsetUpdate__Undo = 50115,oledbIRowsetUpdate__Update = 50116,};
enum MACRO_oledbISQLErrorInfo {oledbISQLErrorInfo = 50122,};
enum MACRO_oledbITransaction_ {oledbITransaction__Abort = 50132,oledbITransaction__Commit = 50133,oledbITransaction__GetTransactionInfo = 50134,};
enum MACRO_tevtReportDelivery {tevtReportDelivery = 10,};
enum MACRO_yHeightCharPtsMost {yHeightCharPtsMost = 1638,};
typedef struct _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
typedef struct _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
typedef struct MS_ADDINFO_CATALOGMEMBER_ MS_ADDINFO_CATALOGMEMBER;
typedef struct _NTMS_CHANGERINFORMATIONA NTMS_CHANGERINFORMATIONA;
typedef struct _NTMS_CHANGERINFORMATIONW NTMS_CHANGERINFORMATIONW;
typedef struct _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
typedef struct _BROWSER_EMULATED_DOMAIN *PBROWSER_EMULATED_DOMAIN;
typedef struct _5C0C72291B37B22FE700A61795928759 *PBULK_SECURITY_TEST_DATA;
typedef struct _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;
typedef struct tagCInterfaceProxyVtbl *PCInterfaceProxyVtblList;
typedef CLUSPROP_DWORD *PCLUSPROP_DISK_SIGNATURE;
typedef struct CLUSPROP_PARTITION_INFO *PCLUSPROP_PARTITION_INFO;
typedef struct CLUSPROP_RESOURCE_CLASS *PCLUSPROP_RESOURCE_CLASS;
typedef struct CLUSPROP_ULARGE_INTEGER *PCLUSPROP_ULARGE_INTEGER;
typedef struct _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _284877062F9D14F112F3A0D6BC9583DD *PCREATE_USN_JOURNAL_DATA;
typedef struct _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_PRIVDATA *PCRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID *PCRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;
typedef struct tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;
typedef struct _PERF_INSTANCE_DEFINITION PERF_INSTANCE_DEFINITION;
typedef struct _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;
typedef struct _IMAGE_DEBUG_INFORMATION *PIMAGE_DEBUG_INFORMATION;
typedef struct _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;
typedef struct _IPX_TRAFFIC_FILTER_INFO *PIPX_TRAFFIC_FILTER_INFO;
typedef struct IP_ADAPTER_BINDING_INFO *PIP_ADAPTER_BINDING_INFO;
typedef IUniformResourceLocatorA *PIUniformResourceLocator;
typedef struct _F40F1746FC5A0A350E7B6DA8E0494300 *PLLC_BUFFER_CREATE_PARMS;
typedef union _AABF73CB38EC495F6AFFF3108991DB2A *PLLC_DIR_READ_LOG_BUFFER;
typedef struct _CD3C127D93F7C951E1306B8CE5D16670 *PLLC_DIR_SET_EFLAG_PARMS;
typedef struct _72F2A3C647F25D7F0ECCF03C491B3ECA *PLLC_TRANSMIT_DESCRIPTOR;
typedef struct _LOCALGROUP_USERS_INFO_0 *PLOCALGROUP_USERS_INFO_0;
typedef struct _DCD76CF5A248684E95EEC87F56AA655C *PNTFS_VOLUME_DATA_BUFFER;
typedef struct _POLICY_AUDIT_EVENTS_INFO POLICY_AUDIT_EVENTS_INFO;
typedef struct _POLICY_MODIFICATION_INFO POLICY_MODIFICATION_INFO;
typedef struct _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;
typedef struct _PRINTER_NOTIFY_INFO_DATA PRINTER_NOTIFY_INFO_DATA;
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 *PRPC_CLIENT_INFORMATION1;
typedef struct _RTCP_PARTICIPANT_REPORT *PRTCP_PARTICIPANT_REPORT;
typedef struct _SAP_SERVICE_FILTER_INFO *PSAP_SERVICE_FILTER_INFO;
typedef struct _SCH_CRED_SECRET_PRIVKEY *PSCH_CRED_SECRET_PRIVKEY;
typedef struct _SERVER_TRANSPORT_INFO_0 *PSERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_TRANSPORT_INFO_1 *PSERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_TRANSPORT_INFO_2 *PSERVER_TRANSPORT_INFO_2;
typedef struct _SERVICE_TYPE_VALUE_ABSA *PSERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW *PSERVICE_TYPE_VALUE_ABSW;
typedef struct _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _UPDATE_COMPLETE_MESSAGE *PUPDATE_COMPLETE_MESSAGE;
typedef IEDKVirtualStreamOnProperty *PVIRTUALSTREAMONPROPERTY;
typedef struct _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
typedef void *RPC_AUTH_IDENTITY_HANDLE;
typedef struct _SComparePropsRestriction SComparePropsRestriction;
typedef struct _SECURITY_PACKAGE_OPTIONS SECURITY_PACKAGE_OPTIONS;
typedef struct _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
typedef struct _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
typedef struct _SP_DEVICE_INTERFACE_DATA SP_DEVICE_INTERFACE_DATA;
typedef struct _SP_DRVINFO_DETAIL_DATA_A SP_DRVINFO_DETAIL_DATA_A;
typedef struct _SP_DRVINFO_DETAIL_DATA_W SP_DRVINFO_DETAIL_DATA_W;
typedef struct _SP_PROPSHEETPAGE_REQUEST SP_PROPSHEETPAGE_REQUEST;
typedef struct _SP_SELECTDEVICE_PARAMS_A SP_SELECTDEVICE_PARAMS_A;
typedef struct _SP_SELECTDEVICE_PARAMS_W SP_SELECTDEVICE_PARAMS_W;
typedef struct _SP_UNREMOVEDEVICE_PARAMS SP_UNREMOVEDEVICE_PARAMS;
typedef struct _SecPkgContext_AuthorityA SecPkgContext_AuthorityA;
typedef struct _SecPkgContext_AuthorityW SecPkgContext_AuthorityW;
typedef struct _SecPkgContext_ProtoInfoA SecPkgContext_ProtoInfoA;
typedef struct _SecPkgContext_ProtoInfoW SecPkgContext_ProtoInfoW;
typedef struct _SecPkgContext_SessionKey SecPkgContext_SessionKey;
typedef struct _SecPkgCred_SupportedAlgs SecPkgCred_SupportedAlgs;
typedef struct _SecPkgCredentials_NamesA SecPkgCredentials_NamesA;
typedef struct _SecPkgCredentials_NamesW SecPkgCredentials_NamesW;
enum ShellWindowTypeConstants {SWC_EXPLORER = 0x0,SWC_BROWSER = 0x1,SWC_3RDPARTY = 0x2,SWC_CALLBACK = 0x4,};
typedef struct _TRUSTED_CONTROLLERS_INFO TRUSTED_CONTROLLERS_INFO;
typedef struct _TRUSTED_DOMAIN_NAME_INFO TRUSTED_DOMAIN_NAME_INFO;
typedef struct _VIDEO_STREAM_CONFIG_CAPS VIDEO_STREAM_CONFIG_CAPS;
typedef struct _WLX_DISPATCH_VERSION_1_0 WLX_DISPATCH_VERSION_1_0;
typedef struct _WLX_DISPATCH_VERSION_1_1 WLX_DISPATCH_VERSION_1_1;
enum _AMSTREAMSELECTINFOFLAGS {AMSTREAMSELECTINFO_ENABLED = 0x1,AMSTREAMSELECTINFO_EXCLUSIVE = 0x2,};
struct _DTUNE_TVX_CONTROLEvents {struct _DTUNE_TVX_CONTROLEventsVtbl *lpVtbl;};
struct _ImageArchitectureHeader {unsigned int AmaskValue : 1;int : 7;unsigned int AmaskShift : 8;int : 16;unsigned int FirstEntryRVA;};
enum _POLICY_AUDIT_EVENT_TYPE {AuditCategorySystem = 0x0,AuditCategoryLogon = 0x1,AuditCategoryObjectAccess = 0x2,AuditCategoryPrivilegeUse = 0x3,AuditCategoryDetailedTracking = 0x4,AuditCategoryPolicyChange = 0x5,AuditCategoryAccountManagement = 0x6,AuditCategoryDirectoryServiceAccess = 0x7,AuditCategoryAccountLogon = 0x8,};
enum _ROUTING_PROTOCOL_EVENTS {ROUTER_STOPPED = 0x0,SAVE_GLOBAL_CONFIG_INFO = 0x1,SAVE_INTERFACE_CONFIG_INFO = 0x2,UPDATE_COMPLETE = 0x3,};
enum _TOKEN_INFORMATION_CLASS {TokenUser = 0x1,TokenGroups = 0x2,TokenPrivileges = 0x3,TokenOwner = 0x4,TokenPrimaryGroup = 0x5,TokenDefaultDacl = 0x6,TokenSource = 0x7,TokenType = 0x8,TokenImpersonationLevel = 0x9,TokenStatistics = 0xA,TokenRestrictedSids = 0xB,TokenSessionId = 0xC,};
enum __MIDL_ICodeInstall_0001 {CIP_DISK_FULL = 0x0,CIP_ACCESS_DENIED = 0x1,CIP_NEWER_VERSION_EXISTS = 0x2,CIP_OLDER_VERSION_EXISTS = 0x3,CIP_NAME_CONFLICT = 0x4,CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,CIP_UNSAFE_TO_ABORT = 0x7,CIP_NEED_REBOOT = 0x8,};
enum __MIDL_IOleDocument_0001 {DOCMISC_CANCREATEMULTIPLEVIEWS = 0x1,DOCMISC_SUPPORTCOMPLEXRECTANGLES = 0x2,DOCMISC_CANTOPENEDIT = 0x4,DOCMISC_NOFILESUPPORT = 0x8,};
enum __MIDL_IRemoteField_0001 {FIELD_KIND_DATA_OBJECT = 0x1,FIELD_KIND_DATA_PRIMITIVE = 0x2,FIELD_KIND_ARRAY = 0x4,FIELD_KIND_CLASS = 0x8,FIELD_KIND_METHOD = 0x10,FIELD_KIND_LOCAL = 0x1000,FIELD_KIND_PARAM = 0x2000,FIELD_KIND_THIS = 0x4000,};
enum __MIDL_IRemoteField_0002 {FIELD_ACC_PUBLIC = 0x1,FIELD_ACC_PRIVATE = 0x2,FIELD_ACC_PROTECTED = 0x4,FIELD_ACC_STATIC = 0x8,FIELD_ACC_FINAL = 0x10,FIELD_ACC_SYNCHRONIZED = 0x20,FIELD_ACC_VOLATILE = 0x40,FIELD_ACC_TRANSIENT = 0x80,FIELD_ACC_NATIVE = 0x100,FIELD_ACC_INTERFACE = 0x200,FIELD_ACC_ABSTRACT = 0x400,};
enum iurl_invokecommand_flags {IURL_INVOKECOMMAND_FL_ALLOW_UI = 0x1,IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 0x2,};
enum tagAMTunerSignalStrength {AMTUNER_HASNOSIGNALSTRENGTH = 0xFFFFFFFF,AMTUNER_NOSIGNAL = 0x0,AMTUNER_SIGNALPRESENT = 0x1,};
enum tagCameraControlProperty {CameraControl_Pan = 0x0,CameraControl_Tilt = 0x1,CameraControl_Roll = 0x2,CameraControl_Zoom = 0x3,CameraControl_Exposure = 0x4,CameraControl_Iris = 0x5,CameraControl_Focus = 0x6,};
enum tagPhysicalConnectorType {PhysConn_Video_Tuner = 0x1,PhysConn_Video_Composite = 0x2,PhysConn_Video_SVideo = 0x3,PhysConn_Video_RGB = 0x4,PhysConn_Video_YRYBY = 0x5,PhysConn_Video_SerialDigital = 0x6,PhysConn_Video_ParallelDigital = 0x7,PhysConn_Video_SCSI = 0x8,PhysConn_Video_AUX = 0x9,PhysConn_Video_1394 = 0xA,PhysConn_Video_USB = 0xB,PhysConn_Video_VideoDecoder = 0xC,PhysConn_Video_VideoEncoder = 0xD,PhysConn_Video_SCART = 0xE,PhysConn_Video_Black = 0xF,PhysConn_Audio_Tuner = 0x1000,PhysConn_Audio_Line = 0x1001,PhysConn_Audio_Mic = 0x1002,PhysConn_Audio_AESDigital = 0x1003,PhysConn_Audio_SPDIFDigital = 0x1004,PhysConn_Audio_SCSI = 0x1005,PhysConn_Audio_AUX = 0x1006,PhysConn_Audio_1394 = 0x1007,PhysConn_Audio_USB = 0x1008,PhysConn_Audio_AudioDecoder = 0x1009,};
typedef unsigned int AFTP_RECORD_FORMAT_TYPE;
typedef unsigned int AFTP_RECORD_LENGTH_TYPE;
enum AM_SEEKING_SeekingFlags {AM_SEEKING_NoPositioning = 0x0,AM_SEEKING_AbsolutePositioning = 0x1,AM_SEEKING_RelativePositioning = 0x2,AM_SEEKING_IncrementalPositioning = 0x3,AM_SEEKING_PositioningBitsMask = 0x3,AM_SEEKING_SeekToKeyFrame = 0x4,AM_SEEKING_ReturnTime = 0x8,AM_SEEKING_Segment = 0x10,AM_SEEKING_NoFlush = 0x20,};
typedef struct _BROWSER_EMULATED_DOMAIN BROWSER_EMULATED_DOMAIN;
typedef struct _5C0C72291B37B22FE700A61795928759 BULK_SECURITY_TEST_DATA;
typedef struct _CHANGER_EXCHANGE_MEDIUM CHANGER_EXCHANGE_MEDIUM;
typedef CLUSPROP_DWORD CLUSPROP_DISK_SIGNATURE;
enum CLUSTER_PROPERTY_FORMAT {CLUSPROP_FORMAT_UNKNOWN = 0x0,CLUSPROP_FORMAT_BINARY = 0x1,CLUSPROP_FORMAT_DWORD = 0x2,CLUSPROP_FORMAT_SZ = 0x3,CLUSPROP_FORMAT_EXPAND_SZ = 0x4,CLUSPROP_FORMAT_MULTI_SZ = 0x5,CLUSPROP_FORMAT_ULARGE_INTEGER = 0x6,CLUSPROP_FORMAT_USER = 0x8000,};
enum CLUSTER_PROPERTY_SYNTAX {CLUSPROP_SYNTAX_ENDMARK = 0x0,CLUSPROP_SYNTAX_NAME = 0x40003,CLUSPROP_SYNTAX_RESCLASS = 0x20002,CLUSPROP_SYNTAX_LIST_VALUE_SZ = 0x10003,CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 0x10004,CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 0x10002,CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 0x10001,CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 0x10005,CLUSPROP_SYNTAX_DISK_SIGNATURE = 0x50002,CLUSPROP_SYNTAX_SCSI_ADDRESS = 0x60002,CLUSPROP_SYNTAX_DISK_NUMBER = 0x70002,CLUSPROP_SYNTAX_PARTITION_INFO = 0x80001,CLUSPROP_SYNTAX_FTSET_INFO = 0x90001,};
typedef struct _E2C7760653C2B7B798640D9B30FB3CE4 CMC_X_COM_configuration;
typedef struct _CMSG_HASHED_ENCODE_INFO CMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO CMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO CMSG_SIGNER_ENCODE_INFO;
enum CREATESUBSCRIPTIONFLAGS {CREATESUBS_ADDTOFAVORITES = 0x1,CREATESUBS_FROMFAVORITES = 0x2,CREATESUBS_NOUI = 0x4,CREATESUBS_NOSAVE = 0x8,CREATESUBS_SOFTWAREUPDATE = 0x10,};
typedef struct _284877062F9D14F112F3A0D6BC9583DD CREATE_USN_JOURNAL_DATA;
typedef struct creative_adpcmwaveformat_tag CREATIVEADPCMWAVEFORMAT;
typedef struct _CRYPT_HASH_MESSAGE_PARA CRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_PROVIDER_PRIVDATA CRYPT_PROVIDER_PRIVDATA;
typedef struct _CRYPT_REGISTER_ACTIONID CRYPT_REGISTER_ACTIONID;
typedef struct _CRYPT_SIGN_MESSAGE_PARA CRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS CTL_VERIFY_USAGE_STATUS;
typedef struct _DSETUP_CB_FILECOPYERROR DSETUP_CB_FILECOPYERROR;
struct DispIHTMLCommentElement {struct DispIHTMLCommentElementVtbl *lpVtbl;};
struct DispIHTMLControlElement {struct DispIHTMLControlElementVtbl *lpVtbl;};
struct DispIHTMLIsIndexElement {struct DispIHTMLIsIndexElementVtbl *lpVtbl;};
struct DispIHTMLMarqueeElement {struct DispIHTMLMarqueeElementVtbl *lpVtbl;};
struct DispIHTMLUnknownElement {struct DispIHTMLUnknownElementVtbl *lpVtbl;};
typedef struct tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
typedef struct _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
typedef struct _EXTENSION_CONTROL_BLOCK EXTENSION_CONTROL_BLOCK;
typedef struct _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
typedef void *( *GENERIC_BINDING_ROUTINE)(void *);
typedef struct _HSE_SEND_HEADER_EX_INFO HSE_SEND_HEADER_EX_INFO;
struct HTMLButtonElementEvents {struct HTMLButtonElementEventsVtbl *lpVtbl;};
struct HTMLImageElementFactory;
struct HTMLObjectElementEvents {struct HTMLObjectElementEventsVtbl *lpVtbl;};
struct HTMLOptionButtonElement;
struct HTMLSelectElementEvents {struct HTMLSelectElementEventsVtbl *lpVtbl;};
struct HTMLTextContainerEvents {struct HTMLTextContainerEventsVtbl *lpVtbl;};
struct IASQLOLEStoredProcedure {struct IASQLOLEStoredProcedureVtbl *lpVtbl;};
struct IASQLOLESystemDatatypes {struct IASQLOLESystemDatatypesVtbl *lpVtbl;};
struct IActiveScriptSiteWindow {struct IActiveScriptSiteWindowVtbl *lpVtbl;};
struct IAgentCtlCommandsWindow {struct IAgentCtlCommandsWindowVtbl *lpVtbl;};
struct IAgentPrivateNotifySink {struct IAgentPrivateNotifySinkVtbl *lpVtbl;};
struct IDirect3DRMAnimationSet {struct IDirect3DRMAnimationSetVtbl *lpVtbl;};
struct IDirect3DRMInterpolator {struct IDirect3DRMInterpolatorVtbl *lpVtbl;};
struct IDirect3DRMMeshBuilder2 {struct IDirect3DRMMeshBuilder2Vtbl *lpVtbl;};
struct IDirect3DRMPicked2Array {struct IDirect3DRMPicked2ArrayVtbl *lpVtbl;};
struct IDirectDrawColorControl {struct IDirectDrawColorControlVtbl *lpVtbl;};
struct IDirectDrawStreamSample {struct IDirectDrawStreamSampleVtbl *lpVtbl;};
struct IEnumRemoteBooleanValue {struct IEnumRemoteBooleanValueVtbl *lpVtbl;};
struct IGetClusterResourceInfo {struct IGetClusterResourceInfoVtbl *lpVtbl;};
struct IHTMLInputButtonElement {struct IHTMLInputButtonElementVtbl *lpVtbl;};
struct IHTMLInputHiddenElement {struct IHTMLInputHiddenElementVtbl *lpVtbl;};
struct IJavaEnumRemoteIntValue {struct IJavaEnumRemoteIntValueVtbl *lpVtbl;};
typedef struct _IMAGE_DEBUG_INFORMATION IMAGE_DEBUG_INFORMATION;
typedef struct _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
enum IMPORT_OBJECT_NAME_TYPE {IMPORT_OBJECT_ORDINAL = 0x0,IMPORT_OBJECT_NAME = 0x1,IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,IMPORT_OBJECT_NAME_UNDECORATE = 0x3,};
typedef struct _1B524A7EE9DF0D2D7407CE43B258BBC8 INTERNET_CONNECTED_INFO;
struct IOleInPlaceActiveObject {struct IOleInPlaceActiveObjectVtbl *lpVtbl;};
typedef struct _IPX_TRAFFIC_FILTER_INFO IPX_TRAFFIC_FILTER_INFO;
struct IResourceManagerFactory {struct IResourceManagerFactoryVtbl *lpVtbl;};
struct ITCallTonesNotification {struct ITCallTonesNotificationVtbl *lpVtbl;};
struct ITTAPIEventNotification {struct ITTAPIEventNotificationVtbl *lpVtbl;};
struct ITransactionTransmitter {struct ITransactionTransmitterVtbl *lpVtbl;};
typedef struct _F40F1746FC5A0A350E7B6DA8E0494300 LLC_BUFFER_CREATE_PARMS;
typedef union _AABF73CB38EC495F6AFFF3108991DB2A LLC_DIR_READ_LOG_BUFFER;
typedef struct _CD3C127D93F7C951E1306B8CE5D16670 LLC_DIR_SET_EFLAG_PARMS;
typedef struct _72F2A3C647F25D7F0ECCF03C491B3ECA LLC_TRANSMIT_DESCRIPTOR;
typedef struct _LOCALGROUP_USERS_INFO_0 LOCALGROUP_USERS_INFO_0;
typedef struct IASQLOLESubscriberInfo *LPASQLOLESUBSCRIBERINFO;
typedef struct IASQLOLESystemDatatype *LPASQLOLESYSTEMDATATYPE;
typedef struct IASQLOLETransactionLog *LPASQLOLETRANSACTIONLOG;
typedef struct _CMInvokeCommandInfoEx *LPCMINVOKECOMMANDINFOEX;
typedef struct DIDEVICEINSTANCE_DX3A *LPDIDEVICEINSTANCE_DX3A;
typedef struct DIDEVICEINSTANCE_DX3W *LPDIDEVICEINSTANCE_DX3W;
typedef struct IDirect3DExecuteBuffer *LPDIRECT3DEXECUTEBUFFER;
typedef struct IDirect3DRMDeviceArray *LPDIRECT3DRMDEVICEARRAY;
typedef struct IDirect3DRMMeshBuilder *LPDIRECT3DRMMESHBUILDER;
typedef struct IDirect3DRMObjectArray *LPDIRECT3DRMOBJECTARRAY;
typedef struct IDirect3DRMPickedArray *LPDIRECT3DRMPICKEDARRAY;
typedef struct IDirect3DRMVisualArray *LPDIRECT3DRMVISUALARRAY;
typedef struct IDirectSound3DListener *LPDIRECTSOUND3DLISTENER;
typedef struct _D74CC9719E317AD446E2F62991DAE0C8 *LPDPMSG_ADDGROUPTOGROUP;
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
typedef IEnumRemoteDoubleValue *LPENUMREMOTEDOUBLEVALUE;
typedef IEnumRemoteThreadGroup *LPENUMREMOTETHREADGROUP;
typedef struct IExchangeExportChanges *LPEXCHANGEEXPORTCHANGES;
typedef IExchExtPropertySheets *LPEXCHEXTPROPERTYSHEETS;
typedef struct _1CF5A01E195BE25BEDA13B6A0EE28B07 *LPGOPHER_ATTRIBUTE_TYPE;
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
typedef struct _2217024DFB55A6F4C8452C0D2E818FB7 *LPINTERNET_ASYNC_RESULT;
typedef struct _D692CA7460863103343173F071E8F66B *LPINTERNET_VERSION_INFO;
typedef struct _ACEAE6F707210F0DF226FE321F0C4CF6 *LPJAVACLASSRESOURCEINFO;
typedef struct lineagentactivitylist_tag *LPLINEAGENTACTIVITYLIST;
typedef struct linemediacontroldigit_tag *LPLINEMEDIACONTROLDIGIT;
typedef struct linemediacontrolmedia_tag *LPLINEMEDIACONTROLMEDIA;
typedef struct IDirect3DRMAnimation **LPLPDIRECT3DRMANIMATION;
typedef struct IDirect3DRMFaceArray **LPLPDIRECT3DRMFACEARRAY;
typedef struct IDirect3DRMWinDevice **LPLPDIRECT3DRMWINDEVICE;
typedef struct tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;
typedef struct tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;
typedef struct _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;
typedef IRemoteContainerObject *LPREMOTECONTAINEROBJECT;
typedef IRemoteProcessCallback *LPREMOTEPROCESSCALLBACK;
typedef struct _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
typedef struct _TRANSMIT_FILE_BUFFERS *LPTRANSMIT_FILE_BUFFERS;
typedef struct _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _USER_MODALS_INFO_1001 *LPUSER_MODALS_INFO_1001;
typedef struct _USER_MODALS_INFO_1002 *LPUSER_MODALS_INFO_1002;
typedef struct _USER_MODALS_INFO_1003 *LPUSER_MODALS_INFO_1003;
typedef struct _USER_MODALS_INFO_1004 *LPUSER_MODALS_INFO_1004;
typedef struct _USER_MODALS_INFO_1005 *LPUSER_MODALS_INFO_1005;
typedef struct _USER_MODALS_INFO_1006 *LPUSER_MODALS_INFO_1006;
typedef struct _USER_MODALS_INFO_1007 *LPUSER_MODALS_INFO_1007;
enum MACRO_ACCESS_STICKYKEYS {ACCESS_STICKYKEYS = 0x1,ACCESS_FILTERKEYS = 0x2,ACCESS_MOUSEKEYS = 0x3,};
enum MACRO_CALLBACK_TYPEMASK {CALLBACK_TYPEMASK = 0x70000,CALLBACK_NULL = 0x0,CALLBACK_WINDOW = 0x10000,CALLBACK_TASK = 0x20000,CALLBACK_FUNCTION = 0x30000,CALLBACK_THREAD = 0x20000,CALLBACK_EVENT = 0x50000,};
enum MACRO_CBEN_GETDISPINFOA {CBEN_GETDISPINFOA = -800,CBEN_INSERTITEM = -801,CBEN_DELETEITEM = -802,CBEN_BEGINEDIT = -804,CBEN_ENDEDITA = -805,CBEN_ENDEDITW = -806,CBEN_GETDISPINFOW = -807,CBEN_DRAGBEGINA = -808,CBEN_DRAGBEGINW = -809,CBEN_DRAGBEGIN = -808,CBEN_ENDEDIT = -805,};
enum MACRO_CF_SHOWHELPBUTTON {CF_SHOWHELPBUTTON = 0x1,CF_SETCONVERTDEFAULT = 0x2,CF_SETACTIVATEDEFAULT = 0x4,CF_SELECTCONVERTTO = 0x8,CF_SELECTACTIVATEAS = 0x10,CF_DISABLEDISPLAYASICON = 0x20,CF_DISABLEACTIVATEAS = 0x40,CF_HIDECHANGEICON = 0x80,CF_CONVERTONLY = 0x100,};
enum MACRO_DIDEVTYPEJOYSTICK {DIDEVTYPEJOYSTICK_UNKNOWN = 1,DIDEVTYPEJOYSTICK_TRADITIONAL = 2,DIDEVTYPEJOYSTICK_FLIGHTSTICK = 3,DIDEVTYPEJOYSTICK_GAMEPAD = 4,DIDEVTYPEJOYSTICK_RUDDER = 5,DIDEVTYPEJOYSTICK_WHEEL = 6,DIDEVTYPEJOYSTICK_HEADTRACKER = 7,};
enum MACRO_DIDEVTYPEKEYBOARD {DIDEVTYPEKEYBOARD_UNKNOWN = 0,DIDEVTYPEKEYBOARD_PCXT = 1,DIDEVTYPEKEYBOARD_OLIVETTI = 2,DIDEVTYPEKEYBOARD_PCAT = 3,DIDEVTYPEKEYBOARD_PCENH = 4,DIDEVTYPEKEYBOARD_NOKIA1050 = 5,DIDEVTYPEKEYBOARD_NOKIA9140 = 6,DIDEVTYPEKEYBOARD_NEC98 = 7,DIDEVTYPEKEYBOARD_NEC98LAPTOP = 8,DIDEVTYPEKEYBOARD_NEC98106 = 9,DIDEVTYPEKEYBOARD_JAPAN106 = 10,DIDEVTYPEKEYBOARD_JAPANAX = 11,DIDEVTYPEKEYBOARD_J3100 = 12,};
enum MACRO_DISPID_READYSTATE {DISPID_READYSTATE = -525,DISPID_READYSTATECHANGE = -609,DISPID_AMBIENT_TRANSFERPRIORITY = -728,DISPID_AMBIENT_OFFLINEIFNOTCONNECTED = -5501,DISPID_AMBIENT_SILENT = -5502,DISPID_AMBIENT_CODEPAGE = -725,DISPID_AMBIENT_CHARSET = -727,};
enum MACRO_ENABLEPAIRKERNING {ENABLEPAIRKERNING = 769,};
enum MACRO_FACILITY_SECURITY {FACILITY_SECURITY = 0x9,};
enum MACRO_GETPRINTINGOFFSET {GETPRINTINGOFFSET = 13,};
enum MACRO_GETSETPRINTORIENT {GETSETPRINTORIENT = 30,};
enum MACRO_GETTRACKKERNTABLE {GETTRACKKERNTABLE = 259,EXTTEXTOUT = 512,};
enum MACRO_HDN_ITEMCHANGINGA {HDN_ITEMCHANGINGA = -300,HDN_ITEMCHANGINGW = -320,HDN_ITEMCHANGEDA = -301,HDN_ITEMCHANGEDW = -321,HDN_ITEMCLICKA = -302,HDN_ITEMCLICKW = -322,HDN_ITEMDBLCLICKA = -303,HDN_ITEMDBLCLICKW = -323,HDN_DIVIDERDBLCLICKA = -305,HDN_DIVIDERDBLCLICKW = -325,HDN_BEGINTRACKA = -306,HDN_BEGINTRACKW = -326,HDN_ENDTRACKA = -307,HDN_ENDTRACKW = -327,HDN_TRACKA = -308,HDN_TRACKW = -328,HDN_GETDISPINFOA = -309,HDN_GETDISPINFOW = -329,HDN_BEGINDRAG = -310,HDN_ENDDRAG = -311,HDN_ITEMCHANGING = -300,HDN_ITEMCHANGED = -301,HDN_ITEMCLICK = -302,HDN_ITEMDBLCLICK = -303,HDN_DIVIDERDBLCLICK = -305,HDN_BEGINTRACK = -306,HDN_ENDTRACK = -307,HDN_TRACK = -308,HDN_GETDISPINFO = -309,};
enum MACRO_HOSTSEC_ERROR_NOT {HOSTSEC_ERROR_NOT_IMPLEMENTED = 0xE90005E6,};
enum MACRO_IDI_RESOURCEFIRST {IDI_RESOURCEFIRST = 159,IDI_RESOURCE = 159,IDI_NOCFGDATA = 160,IDI_RESOURCELAST = 161,IDI_RESOURCEOVERLAYFIRST = 161,IDI_RESOURCEOVERLAYLAST = 161,IDI_CONFLICT = 161,IDI_CLASSICON_OVERLAYFIRST = 500,IDI_CLASSICON_OVERLAYLAST = 502,IDI_PROBLEM_OVL = 500,IDI_DISABLED_OVL = 501,IDI_FORCED_OVL = 502,};
enum MACRO_IDS_OLE2UIUNKNOWN {IDS_OLE2UIUNKNOWN = 32300,IDS_OLE2UILINK = 32301,IDS_OLE2UIOBJECT = 32302,IDS_OLE2UIEDIT = 32303,IDS_OLE2UICONVERT = 32304,IDS_OLE2UIEDITLINKCMD_1VERB = 32305,IDS_OLE2UIEDITOBJECTCMD_1VERB = 32306,IDS_OLE2UIEDITLINKCMD_NVERB = 32307,IDS_OLE2UIEDITOBJECTCMD_NVERB = 32308,IDS_OLE2UIEDITNOOBJCMD = 32309,IDS_DEFICONLABEL = 32310,IDS_OLE2UIPASTELINKEDTYPE = 32311,IDS_FILTERS = 32320,IDS_ICONFILTERS = 32321,IDS_BROWSE = 32322,};
enum MACRO_INTERNET_AUTODIAL {INTERNET_AUTODIAL_FORCE_ONLINE = 1,INTERNET_AUTODIAL_FORCE_UNATTENDED = 2,INTERNET_AUTODIAL_FAILIFSECURITYCHECK = 4,INTERNET_AUTODIAL_FLAGS_MASK = 7,INTERNET_CONNECTION_MODEM = 1,INTERNET_CONNECTION_LAN = 2,INTERNET_CONNECTION_PROXY = 4,INTERNET_CONNECTION_MODEM_BUSY = 8,INTERNET_CUSTOMDIAL_CONNECT = 0,INTERNET_CUSTOMDIAL_UNATTENDED = 1,INTERNET_CUSTOMDIAL_DISCONNECT = 2,INTERNET_CUSTOMDIAL_SHOWOFFLINE = 4,INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED = 1,INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE = 2,INTERNET_CUSTOMDIAL_CAN_HANGUP = 4,INTERNET_DIALSTATE_DISCONNECTED = 1,};
enum MACRO_IoctlCodeSetEvent {IoctlCodeSetEvent = 0x410,};
enum MACRO_LINECALLCOMPLCOND {LINECALLCOMPLCOND_BUSY = 0x1,LINECALLCOMPLCOND_NOANSWER = 0x2,};
enum MACRO_LINECALLCOMPLMODE {LINECALLCOMPLMODE_CAMPON = 0x1,LINECALLCOMPLMODE_CALLBACK = 0x2,LINECALLCOMPLMODE_INTRUDE = 0x4,LINECALLCOMPLMODE_MESSAGE = 0x8,};
enum MACRO_LINECALLINFOSTATE {LINECALLINFOSTATE_OTHER = 0x1,LINECALLINFOSTATE_DEVSPECIFIC = 0x2,LINECALLINFOSTATE_BEARERMODE = 0x4,LINECALLINFOSTATE_RATE = 0x8,LINECALLINFOSTATE_MEDIAMODE = 0x10,LINECALLINFOSTATE_APPSPECIFIC = 0x20,LINECALLINFOSTATE_CALLID = 0x40,LINECALLINFOSTATE_RELATEDCALLID = 0x80,LINECALLINFOSTATE_ORIGIN = 0x100,LINECALLINFOSTATE_REASON = 0x200,LINECALLINFOSTATE_COMPLETIONID = 0x400,LINECALLINFOSTATE_NUMOWNERINCR = 0x800,LINECALLINFOSTATE_NUMOWNERDECR = 0x1000,LINECALLINFOSTATE_NUMMONITORS = 0x2000,LINECALLINFOSTATE_TRUNK = 0x4000,LINECALLINFOSTATE_CALLERID = 0x8000,LINECALLINFOSTATE_CALLEDID = 0x10000,LINECALLINFOSTATE_CONNECTEDID = 0x20000,LINECALLINFOSTATE_REDIRECTIONID = 0x40000,LINECALLINFOSTATE_REDIRECTINGID = 0x80000,LINECALLINFOSTATE_DISPLAY = 0x100000,LINECALLINFOSTATE_USERUSERINFO = 0x200000,LINECALLINFOSTATE_HIGHLEVELCOMP = 0x400000,LINECALLINFOSTATE_LOWLEVELCOMP = 0x800000,LINECALLINFOSTATE_CHARGINGINFO = 0x1000000,LINECALLINFOSTATE_TERMINAL = 0x2000000,LINECALLINFOSTATE_DIALPARAMS = 0x4000000,LINECALLINFOSTATE_MONITORMODES = 0x8000000,LINECALLINFOSTATE_TREATMENT = 0x10000000,LINECALLINFOSTATE_QOS = 0x20000000,LINECALLINFOSTATE_CALLDATA = 0x40000000,};
enum MACRO_LINECALLPRIVILEGE {LINECALLPRIVILEGE_NONE = 0x1,LINECALLPRIVILEGE_MONITOR = 0x2,LINECALLPRIVILEGE_OWNER = 0x4,};
enum MACRO_LINECALLTREATMENT {LINECALLTREATMENT_SILENCE = 0x1,LINECALLTREATMENT_RINGBACK = 0x2,LINECALLTREATMENT_BUSY = 0x3,LINECALLTREATMENT_MUSIC = 0x4,};
enum MACRO_LINECONNECTEDMODE {LINECONNECTEDMODE_ACTIVE = 0x1,LINECONNECTEDMODE_INACTIVE = 0x2,LINECONNECTEDMODE_ACTIVEHELD = 0x4,LINECONNECTEDMODE_INACTIVEHELD = 0x8,LINECONNECTEDMODE_CONFIRMED = 0x10,};
enum MACRO_LINE_ADDRESSSTATE {LINE_ADDRESSSTATE = 0,LINE_CALLINFO = 1,LINE_CALLSTATE = 2,LINE_CLOSE = 3,LINE_DEVSPECIFIC = 4,LINE_DEVSPECIFICFEATURE = 5,LINE_GATHERDIGITS = 6,LINE_GENERATE = 7,LINE_LINEDEVSTATE = 8,LINE_MONITORDIGITS = 9,LINE_MONITORMEDIA = 10,LINE_MONITORTONE = 11,LINE_REPLY = 12,LINE_REQUEST = 13,};
enum MACRO_LM20_MAXCOMMENTSZ {LM20_MAXCOMMENTSZ = 48,};
enum MACRO_MAXCOMPLEXSUBSTAT {MAXCOMPLEXSUBSTAT = 8,};
enum MACRO_MAXIMUM_SUPPORTED {MAXIMUM_SUPPORTED_EXTENSION = 512,};
enum MACRO_MAXSTRETCHBLTMODE {MAXSTRETCHBLTMODE = 4,};
enum MACRO_MAX_INSTALLWIZARD {MAX_INSTALLWIZARD_DYNAPAGES = 20,};
enum MACRO_MAX_NDDESHARENAME {MAX_NDDESHARENAME = 256,MAX_DOMAINNAME = 15,MAX_USERNAME = 15,MAX_APPNAME = 255,MAX_TOPICNAME = 255,MAX_ITEMNAME = 255,};
enum MACRO_MAX_PROTOCOL_NAME {MAX_PROTOCOL_NAME_LEN = 40,MAX_PROTOCOL_DLL_LEN = 48,};
enum MACRO_NUMOFACCESSTOSRVR {NUMOFACCESSTOSRVR = 58,};
enum MACRO_NUMOFSYNCREQUESTS {NUMOFSYNCREQUESTS = 50,};
enum MACRO_NUMOFWRITEREQSENT {NUMOFWRITEREQSENT = 60,};
enum MACRO_NUMSESSOUTPACKETS {NUMSESSOUTPACKETS = 24,};
enum MACRO_OLESTDCANCELRETRY {OLESTDCANCELRETRY = 4294967295,};
enum MACRO_OtherProgramMoved {OtherProgramMoved = 3,};
enum MACRO_PBT_APMBATTERYLOW {PBT_APMBATTERYLOW = 0x9,PBT_APMPOWERSTATUSCHANGE = 0xA,PBT_APMOEMEVENT = 0xB,PBT_APMRESUMEAUTOMATIC = 0x12,};
enum MACRO_PSM_SETFINISHTEXT {PSM_SETFINISHTEXT = 1139,};
enum MACRO_SECURITY_INTERNET {SECURITY_INTERNET_MASK = 61440,};
enum MACRO_SECURITY_PROTOCOL {SECURITY_PROTOCOL_NONE = 0x0,};
enum MACRO_SELECTPAPERSOURCE {SELECTPAPERSOURCE = 18,};
enum MACRO_SERVICE_IMMEDIATE {SERVICE_IMMEDIATE_TRAFFIC_CONTROL = 0x80000000,SERVICE_NO_QOS_SIGNALING = 0x40000000,};
enum MACRO_SW_SCROLLCHILDREN {SW_SCROLLCHILDREN = 0x1,SW_INVALIDATE = 0x2,SW_ERASE = 0x4,SW_SMOOTHSCROLL = 0x10,};
enum MACRO_TBN_GETBUTTONINFO {TBN_GETBUTTONINFO = -700,};
enum MACRO_TBN_HOTITEMCHANGE {TBN_HOTITEMCHANGE = -713,TBN_DRAGOUT = -714,TBN_DELETINGBUTTON = -715,TBN_GETDISPINFOA = -716,TBN_GETDISPINFOW = -717,TBN_GETINFOTIPA = -718,TBN_GETINFOTIPW = -719,TBN_GETINFOTIP = -718,};
enum MACRO_TB_MAPACCELERATOR {TB_MAPACCELERATOR = 1102,};
enum MACRO_TOTALOUTQMPACKETS {TOTALOUTQMPACKETS = 14,TOTALPACKETSINQUEUES = 16,};
enum MACRO_TOTALQUEUEINBYTES {TOTALQUEUEINBYTES = 42,};
enum MACRO_TOTALSESSOUTBYTES {TOTALSESSOUTBYTES = 36,};
enum MACRO_URLACTION_CHANNEL {URLACTION_CHANNEL_SOFTDIST_MAX = 0x1EFF,};
enum MACRO_URLACTION_NETWORK {URLACTION_NETWORK_CURR_MAX = 0x1A01,URLACTION_NETWORK_MAX = 0x1BFF,URLACTION_JAVA_MIN = 0x1C00,URLACTION_JAVA_PERMISSIONS = 0x1C00,};
enum MACRO_URLPOLICY_CHANNEL {URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 0x10000,URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 0x20000,URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 0x30000,};
enum MACRO_WC_COMPOSITECHECK {WC_COMPOSITECHECK = 0x200,WC_DISCARDNS = 0x10,WC_SEPCHARS = 0x20,WC_DEFAULTCHAR = 0x40,WC_NO_BEST_FIT_CHARS = 0x400,};
enum MACRO_WLUAALREADYACTIVE {WLUAALREADYACTIVE = 22,};
enum MACRO_WLUAGLOBALHANDLER {WLUAGLOBALHANDLER = 24,};
enum MACRO_WLUAINVALIDHANDLE {WLUAINVALIDHANDLE = 10,};
enum MACRO_WLUALUREACTIVATED {WLUALUREACTIVATED = 19,};
enum MACRO_WSANOTINITIALISED {WSANOTINITIALISED = 10093,};
enum MACRO_WSASYSCALLFAILURE {WSASYSCALLFAILURE = 10107,};
enum MACRO_X509_UNICODE_NAME {X509_UNICODE_NAME_VALUE = 24,X509_ANY_STRING = 6,X509_UNICODE_ANY_STRING = 24,X509_OCTET_STRING = 25,X509_BITS = 26,X509_INTEGER = 27,X509_MULTI_BYTE_INTEGER = 28,X509_ENUMERATED = 29,X509_CHOICE_OF_TIME = 30,X509_AUTHORITY_KEY_ID2 = 31,X509_CRL_REASON_CODE = 29,};
enum MACRO_attAttachMetaFile {attAttachMetaFile = 0x68011,};
enum MACRO_attAttachRenddata {attAttachRenddata = 0x69002,};
enum MACRO_attConversationID {attConversationID = 0x1800B,};
enum MACRO_cchProfileNameMax {cchProfileNameMax = 64,};
enum MACRO_cchProfilePassMax {cchProfilePassMax = 64,};
enum MACRO_ckidAVISUPERINDEX {ckidAVISUPERINDEX = 2019847785,};
enum MACRO_ckidMAINAVIHEADER {ckidMAINAVIHEADER = 1751742049,};
enum MACRO_dispidEnableVideo {dispidEnableVideo = 3012,};
enum MACRO_dispidHasReminder {dispidHasReminder = 4014,};
enum MACRO_dispidPowerChange {dispidPowerChange = 3007,};
enum MACRO_dispidSetReminder {dispidSetReminder = 4013,};
enum MACRO_dispidTVSetOutput {dispidTVSetOutput = 3009,};
enum MACRO_dispidTuneControl {dispidTuneControl = 3002,};
enum MACRO_ecProxyDLLDefault {ecProxyDLLDefault = 50017,};
enum MACRO_ecTargetNotUnique {ecTargetNotUnique = 50004,};
enum MACRO_errVtoBadBindInfo {errVtoBadBindInfo = -30033,};
enum MACRO_fnevCriticalError {fnevCriticalError = 0x1,fnevNewMail = 0x2,fnevObjectCreated = 0x4,fnevObjectDeleted = 0x8,fnevObjectModified = 0x10,fnevObjectMoved = 0x20,fnevObjectCopied = 0x40,fnevSearchComplete = 0x80,fnevTableModified = 0x100,fnevStatusObjectModified = 0x200,fnevReservedForMapi = 0x40000000,fnevExtended = 0x80000000,};
enum MACRO_hrAlreadyPrepared {hrAlreadyPrepared = 0xC8000647,};
enum MACRO_hrBadItagSequence {hrBadItagSequence = 0xC80005EE,};
enum MACRO_hrBadLogSignature {hrBadLogSignature = 0xC8000212,};
enum MACRO_hrBufferTruncated {hrBufferTruncated = 0x880003EE,};
enum MACRO_hrCircularLogging {hrCircularLogging = 0xC7FF000B,};
enum MACRO_hrColumnDuplicate {hrColumnDuplicate = 0xC80005E4,};
enum MACRO_hrCouldNotConnect {hrCouldNotConnect = 0xC7FF0007,};
enum MACRO_hrIndexHasPrimary {hrIndexHasPrimary = 0xC800057A,};
enum MACRO_hrIndexInvalidDef {hrIndexInvalidDef = 0xC800057E,};
enum MACRO_hrInvalidBookmark {hrInvalidBookmark = 0xC8000415,};
enum MACRO_hrInvalidCodePage {hrInvalidCodePage = 0xC8000427,};
enum MACRO_hrInvalidDatabase {hrInvalidDatabase = 0xC8000404,};
enum MACRO_hrInvalidFilename {hrInvalidFilename = 0xC8000414,};
enum MACRO_hrLogFileNotFound {hrLogFileNotFound = 0xC7FF000A,};
enum MACRO_hrLoggingDisabled {hrLoggingDisabled = 0xC8000204,};
enum MACRO_hrNoCurrentRecord {hrNoCurrentRecord = 0xC8000643,};
enum MACRO_hrObjectDuplicate {hrObjectDuplicate = 0xC8000522,};
enum MACRO_listtypeAVIHEADER {listtypeAVIHEADER = 1819436136,};
enum MACRO_listtypeAVIRECORD {listtypeAVIRECORD = 543384946,};
enum MACRO_oledbIColumnsInfo {oledbIColumnsInfo = 50005,};
enum MACRO_oledbICommandText {oledbICommandText___ICommand = 50021,oledbICommandText__GetCommandText = 50022,oledbICommandText__SetCommandText = 50023,};
enum MACRO_oledbIConvertType {oledbIConvertType = 50028,};
enum MACRO_oledbIErrorLookup {oledbIErrorLookup = 50058,};
enum MACRO_oledbIOpenRowset_ {oledbIOpenRowset__OpenRowset = 50075,};
enum MACRO_oledbIRowsetIndex {oledbIRowsetIndex = 50088,};
enum MACRO_oledbIRowsetInfo_ {oledbIRowsetInfo__GetProperties = 50093,oledbIRowsetInfo__GetReferencedRowset = 50094,oledbIRowsetInfo__GetSpecification = 50095,};
enum MACRO_oledbITransaction {oledbITransaction = 50131,};
typedef struct _59D180E16117F59D65359090B51374E6 MCI_DGV_SETAUDIO_PARMSA;
typedef struct _F76776D9748BF04A28B27A81EDBC1B75 MCI_DGV_SETAUDIO_PARMSW;
typedef struct _A22BA5DB39A448CA61FD0153A48F18FB MCI_DGV_SETVIDEO_PARMSA;
typedef struct _3DDD578915499A46BA4B885B93AB36C5 MCI_DGV_SETVIDEO_PARMSW;
typedef struct _DCD76CF5A248684E95EEC87F56AA655C NTFS_VOLUME_DATA_BUFFER;
typedef struct _NTMS_LIBRARYINFORMATION NTMS_LIBRARYINFORMATION;
typedef struct _NTMS_OBJECTINFORMATIONA NTMS_OBJECTINFORMATIONA;
typedef struct _NTMS_OBJECTINFORMATIONW NTMS_OBJECTINFORMATIONW;
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 *PAM_AC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 *PAM_AC3_BIT_STREAM_MODE;
typedef struct _BROWSER_STATISTICS_100 *PBROWSER_STATISTICS_100;
typedef struct _BROWSER_STATISTICS_101 *PBROWSER_STATISTICS_101;
typedef struct _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;
typedef struct _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;
typedef struct tagCInterfaceStubVtbl *PCInterfaceStubVtblList;
typedef union CLUSPROP_BUFFER_HELPER *PCLUSPROP_BUFFER_HELPER;
typedef CLUSPROP_SZ *PCLUSPROP_PROPERTY_NAME;
typedef struct _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;
typedef struct _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;
typedef struct tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;
typedef struct _PERF_COUNTER_DEFINITION PERF_COUNTER_DEFINITION;
typedef struct _FILE_IN_CABINET_INFO_A *PFILE_IN_CABINET_INFO_A;
typedef struct _FILE_IN_CABINET_INFO_W *PFILE_IN_CABINET_INFO_W;
typedef struct _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;
typedef struct _5C484BA576E4B3479DA7CECC9170D175 *PHFS_INFORMATION_BUFFER;
typedef struct phoneinitializeexparams_tag PHONEINITIALIZEEXPARAMS;
typedef struct _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;
typedef struct _IPX_MIB_GET_INPUT_DATA *PIPX_MIB_GET_INPUT_DATA;
typedef struct _IPX_MIB_SET_INPUT_DATA *PIPX_MIB_SET_INPUT_DATA;
typedef struct _IPX_SPXCONNSTATUS_DATA *PIPX_SPXCONNSTATUS_DATA;
typedef union _C9F2A16A1B5FC998B91DA494984E0FDB *PKSPROPERTY_BOUNDS_LONG;
typedef struct _155DA1A439C400442DF8DC3CA0B009F1 *PKSPROPERTY_DESCRIPTION;
typedef struct LdapReferralCallback *PLDAP_REFERRAL_CALLBACK;
typedef struct _94A9993CAD7BD5ABD1D57B70615D1866 *PLLC_ADAPTER_OPEN_PARMS;
typedef struct _D78DF0A6BFF0F3E53FB1F17463D2E937 *PLLC_DIR_READ_LOG_PARMS;
typedef struct _5DC41656C27EA70C267F54907B5957CB *PLLC_DLC_OPEN_SAP_PARMS;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 *PMENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;
typedef struct _METADATA_GETALL_RECORD *PMETADATA_GETALL_RECORD;
typedef struct _POLICY_DNS_DOMAIN_INFO *PPOLICY_DNS_DOMAIN_INFO;
typedef struct _POLICY_PD_ACCOUNT_INFO *PPOLICY_PD_ACCOUNT_INFO;
typedef struct _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;
typedef struct _PROTOCOL_SPECIFIC_DATA *PPROTOCOL_SPECIFIC_DATA;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _RIP_MIB_GET_INPUT_DATA *PRIP_MIB_GET_INPUT_DATA;
typedef struct _RIP_MIB_SET_INPUT_DATA *PRIP_MIB_SET_INPUT_DATA;
typedef struct _SAP_MIB_GET_INPUT_DATA *PSAP_MIB_GET_INPUT_DATA;
typedef struct _SAP_MIB_SET_INPUT_DATA *PSAP_MIB_SET_INPUT_DATA;
typedef struct _SERVICE_TYPE_INFO_ABSA *PSERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW *PSERVICE_TYPE_INFO_ABSW;
typedef struct _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;
typedef struct _SP_CLASSIMAGELIST_DATA *PSP_CLASSIMAGELIST_DATA;
typedef struct _SP_CLASSINSTALL_HEADER *PSP_CLASSINSTALL_HEADER;
typedef struct _SP_DETECTDEVICE_PARAMS *PSP_DETECTDEVICE_PARAMS;
typedef struct _SP_DEVINSTALL_PARAMS_A *PSP_DEVINSTALL_PARAMS_A;
typedef struct _SP_DEVINSTALL_PARAMS_W *PSP_DEVINSTALL_PARAMS_W;
typedef struct _SP_REMOVEDEVICE_PARAMS *PSP_REMOVEDEVICE_PARAMS;
typedef struct _SecPkgContext_KeyInfoA *PSecPkgContext_KeyInfoA;
typedef struct _SecPkgContext_KeyInfoW *PSecPkgContext_KeyInfoW;
typedef struct _SecPkgContext_Lifespan *PSecPkgContext_Lifespan;
typedef struct _SECURITY_FUNCTION_TABLE_A *PSecurityFunctionTableA;
typedef struct _SECURITY_FUNCTION_TABLE_W *PSecurityFunctionTableW;
typedef struct __MIDL_IH26XVideoEffects_0002 *PTR_VIDEO_EFFECT_VALUES;
typedef struct _WKSTA_TRANSPORT_INFO_0 *PWKSTA_TRANSPORT_INFO_0;
typedef struct _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;
enum ParameterAttributesEnum {adParamSigned = 0x10,adParamNullable = 0x40,adParamLong = 0x80,};
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 RPC_CLIENT_INFORMATION1;
typedef struct _RSVP_FILTERSPEC_V6_FLOW RSVP_FILTERSPEC_V6_FLOW;
typedef struct _RTCP_PARTICIPANT_REPORT RTCP_PARTICIPANT_REPORT;
typedef struct _RemoteMaintenanceStatus RemoteMaintenanceStatus;
typedef struct _SAP_SERVICE_FILTER_INFO SAP_SERVICE_FILTER_INFO;
typedef struct _SCH_CRED_SECRET_PRIVKEY SCH_CRED_SECRET_PRIVKEY;
typedef struct _SERVER_TRANSPORT_INFO_0 SERVER_TRANSPORT_INFO_0;
typedef struct _SERVER_TRANSPORT_INFO_1 SERVER_TRANSPORT_INFO_1;
typedef struct _SERVER_TRANSPORT_INFO_2 SERVER_TRANSPORT_INFO_2;
typedef struct _SERVICE_TYPE_VALUE_ABSA SERVICE_TYPE_VALUE_ABSA;
typedef struct _SERVICE_TYPE_VALUE_ABSW SERVICE_TYPE_VALUE_ABSW;
typedef struct _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
typedef struct _UPDATE_COMPLETE_MESSAGE UPDATE_COMPLETE_MESSAGE;
enum _DtcLu_Xln_Confirmation {DTCLUXLNCONFIRMATION_CONFIRM = 0x1,DTCLUXLNCONFIRMATION_LOGNAMEMISMATCH = 0x2,DTCLUXLNCONFIRMATION_COLDWARMMISMATCH = 0x3,DTCLUXLNCONFIRMATION_OBSOLETE = 0x4,};
typedef struct _0B8D1429C3827E0DB460E98487EB6908 _FPIEEE_EXCEPTION_FLAGS;
enum _GET_FILEEX_INFO_LEVELS {GetFileExInfoStandard = 0x0,GetFileExMaxInfoLevel = 0x1,};
enum _HLSHORTCUTF__NOREDEF10 {HLSHORTCUTF_DEFAULT = 0x0,HLSHORTCUTF_DONTACTUALLYCREATE = 0x1,HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 0x2,HLSHORTCUTF_USEUNIQUEFILENAME = 0x4,HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = 0x8,};
enum _HLTRANSLATEF_NOREDEF10 {HLTRANSLATEF_DEFAULT = 0x0,HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 0x1,};
enum _IMAGEHLP_STATUS_REASON {BindOutOfMemory = 0x0,BindRvaToVaFailed = 0x1,BindNoRoomInImage = 0x2,BindImportModuleFailed = 0x3,BindImportProcedureFailed = 0x4,BindImportModule = 0x5,BindImportProcedure = 0x6,BindForwarder = 0x7,BindForwarderNOT = 0x8,BindImageModified = 0x9,BindExpandFileHeaders = 0xA,BindImageComplete = 0xB,BindMismatchedSymbols = 0xC,BindSymbolsNotUpdated = 0xD,};
enum _POLICY_LSA_SERVER_ROLE {PolicyServerRoleBackup = 0x2,PolicyServerRolePrimary = 0x3,};
enum _RPC_NOTIFICATION_TYPES {RpcNotificationTypeNone = 0x0,RpcNotificationTypeEvent = 0x1,RpcNotificationTypeApc = 0x2,RpcNotificationTypeIoc = 0x3,RpcNotificationTypeHwnd = 0x4,RpcNotificationTypeCallback = 0x5,};
enum tagVideoProcAmpProperty {VideoProcAmp_Brightness = 0x0,VideoProcAmp_Contrast = 0x1,VideoProcAmp_Hue = 0x2,VideoProcAmp_Saturation = 0x3,VideoProcAmp_Sharpness = 0x4,VideoProcAmp_Gamma = 0x5,VideoProcAmp_ColorEnable = 0x6,VideoProcAmp_WhiteBalance = 0x7,VideoProcAmp_BacklightCompensation = 0x8,};
struct ADOCommandConstruction {struct ADOCommandConstructionVtbl *lpVtbl;};
typedef unsigned int AFTP_DETAIL_LEVEL_TYPE;
typedef struct _FBE7179BAB40555F1A13AD3C5BC3BB71 AM_AC3_ALTERNATE_AUDIO;
typedef struct _9ADD4811563784E97592213CBF8060F3 AM_AC3_BIT_STREAM_MODE;
typedef struct _BROWSER_STATISTICS_100 BROWSER_STATISTICS_100;
typedef struct _BROWSER_STATISTICS_101 BROWSER_STATISTICS_101;
enum CALL_STATE_EVENT_CAUSE {CEC_NONE = 0x0,CEC_DISCONNECT_NORMAL = 0x1,CEC_DISCONNECT_BUSY = 0x2,CEC_DISCONNECT_BADADDRESS = 0x3,CEC_DISCONNECT_NOANSWER = 0x4,CEC_DISCONNECT_CANCELLED = 0x5,CEC_DISCONNECT_REJECTED = 0x6,CEC_DISCONNECT_FAILED = 0x7,};
struct CCertEncodeCRLDistInfo;
struct CCertEncodeStringArray;
typedef struct _CERT_REVOCATION_STATUS CERT_REVOCATION_STATUS;
typedef struct _CHANGER_ELEMENT_STATUS CHANGER_ELEMENT_STATUS;
enum CLUSCTL_RESOURCE_CODES {CLUSCTL_RESOURCE_UNKNOWN = 0x1000000,CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 0x1000005,CLUSCTL_RESOURCE_GET_FLAGS = 0x1000009,CLUSCTL_RESOURCE_GET_CLASS_INFO = 0x100000D,CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 0x1000011,CLUSCTL_RESOURCE_GET_NAME = 0x1000029,CLUSCTL_RESOURCE_GET_ID = 0x1000039,CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 0x100002D,CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 0x1000051,CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 0x1000055,CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 0x1000059,CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 0x140005E,CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 0x1000061,CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 0x1000079,CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 0x100007D,CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 0x1000081,CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 0x1400086,CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 0x1000089,CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 0x14000A2,CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 0x14000A6,CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 0x10000A9,CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 0x10000C9,CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 0x1000191,CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 0x1000199,CLUSCTL_RESOURCE_DELETE = 0x1500006,CLUSCTL_RESOURCE_INSTALL_NODE = 0x150000A,CLUSCTL_RESOURCE_EVICT_NODE = 0x150000E,CLUSCTL_RESOURCE_ADD_DEPENDENCY = 0x1500012,CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 0x1500016,CLUSCTL_RESOURCE_ADD_OWNER = 0x150001A,CLUSCTL_RESOURCE_REMOVE_OWNER = 0x150001E,CLUSCTL_RESOURCE_SET_NAME = 0x1500026,CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 0x150002A,};
typedef struct CLUSPROP_ULARGE_INTEGER CLUSPROP_LARGE_INTEGER;
typedef CLUSPROP_SZ CLUSPROP_PROPERTY_NAME;
enum CLUSTER_CONTROL_OBJECT {CLUS_OBJECT_INVALID = 0x0,CLUS_OBJECT_RESOURCE = 0x1,CLUS_OBJECT_RESOURCE_TYPE = 0x2,CLUS_OBJECT_GROUP = 0x3,CLUS_OBJECT_NODE = 0x4,CLUS_OBJECT_NETWORK = 0x5,CLUS_OBJECT_NETINTERFACE = 0x6,CLUS_OBJECT_USER = 0x80,};
enum CLUSTER_RESOURCE_CLASS {CLUS_RESCLASS_UNKNOWN = 0x0,CLUS_RESCLASS_STORAGE = 0x1,CLUS_RESCLASS_USER = 0x8000,};
enum CLUSTER_RESOURCE_STATE {ClusterResourceStateUnknown = 0xFFFFFFFF,ClusterResourceInherited = 0x0,ClusterResourceInitializing = 0x1,ClusterResourceOnline = 0x2,ClusterResourceOffline = 0x3,ClusterResourceFailed = 0x4,ClusterResourcePending = 0x80,ClusterResourceOnlinePending = 0x81,ClusterResourceOfflinePending = 0x82,};
typedef struct _CMSG_CTRL_DECRYPT_PARA CMSG_CTRL_DECRYPT_PARA;
typedef struct contres_vqlpcwaveformat_tag CONTRESVQLPCWAVEFORMAT;
typedef struct _CRYPT_SMIME_CAPABILITY CRYPT_SMIME_CAPABILITY;
typedef DIDEVICEOBJECTINSTANCEA DIDEVICEOBJECTINSTANCE;
typedef struct _DISK_CONTROLLER_NUMBER DISK_CONTROLLER_NUMBER;
typedef struct _9CE0644C253DBAB51052D414D7E91AF8 DPMSG_ADDPLAYERTOGROUP;
struct DShellFolderViewEvents {struct DShellFolderViewEventsVtbl *lpVtbl;};
struct DispIHTMLAnchorElement {struct DispIHTMLAnchorElementVtbl *lpVtbl;};
struct DispIHTMLButtonElement {struct DispIHTMLButtonElementVtbl *lpVtbl;};
struct DispIHTMLHeaderElement {struct DispIHTMLHeaderElementVtbl *lpVtbl;};
struct DispIHTMLIFrameElement {struct DispIHTMLIFrameElementVtbl *lpVtbl;};
struct DispIHTMLLegendElement {struct DispIHTMLLegendElementVtbl *lpVtbl;};
struct DispIHTMLNextIdElement {struct DispIHTMLNextIdElementVtbl *lpVtbl;};
struct DispIHTMLNoShowElement {struct DispIHTMLNoShowElementVtbl *lpVtbl;};
struct DispIHTMLObjectElement {struct DispIHTMLObjectElementVtbl *lpVtbl;};
struct DispIHTMLOptionElement {struct DispIHTMLOptionElementVtbl *lpVtbl;};
struct DispIHTMLPhraseElement {struct DispIHTMLPhraseElementVtbl *lpVtbl;};
struct DispIHTMLScriptElement {struct DispIHTMLScriptElementVtbl *lpVtbl;};
struct DispIHTMLSelectElement {struct DispIHTMLSelectElementVtbl *lpVtbl;};
struct DispIHTMLTextContainer {struct DispIHTMLTextContainerVtbl *lpVtbl;};
typedef struct _DistributedLockRequest DistributedLockRequest;
typedef struct tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
typedef struct _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
typedef struct _FILE_IN_CABINET_INFO_A FILE_IN_CABINET_INFO_A;
typedef struct _FILE_IN_CABINET_INFO_W FILE_IN_CABINET_INFO_W;
typedef struct fmtowns_snd_waveformat_tag FMTOWNS_SND_WAVEFORMAT;
typedef void ( *GENERIC_UNBIND_ROUTINE)(void *, unsigned char *);
typedef struct _GET_CHANGER_PARAMETERS GET_CHANGER_PARAMETERS;
typedef struct _5C484BA576E4B3479DA7CECC9170D175 HFS_INFORMATION_BUFFER;
struct HTMLInputButtonElement;
struct HTMLStyleElementEvents {struct HTMLStyleElementEventsVtbl *lpVtbl;};
struct IADsAccessControlEntry {struct IADsAccessControlEntryVtbl *lpVtbl;};
struct IADsComputerOperations {struct IADsComputerOperationsVtbl *lpVtbl;};
struct IADsPrintJobOperations {struct IADsPrintJobOperationsVtbl *lpVtbl;};
struct IADsSecurityDescriptor {struct IADsSecurityDescriptorVtbl *lpVtbl;};
struct IAMTVAudioNotification {struct IAMTVAudioNotificationVtbl *lpVtbl;};
struct IASQLOLESubscriberInfo {struct IASQLOLESubscriberInfoVtbl *lpVtbl;};
struct IASQLOLESystemDatatype {struct IASQLOLESystemDatatypeVtbl *lpVtbl;};
struct IASQLOLETransactionLog {struct IASQLOLETransactionLogVtbl *lpVtbl;};
struct IAgentCtlPropertySheet {struct IAgentCtlPropertySheetVtbl *lpVtbl;};
struct ICertEncodeCRLDistInfo {struct ICertEncodeCRLDistInfoVtbl *lpVtbl;};
struct ICertEncodeStringArray {struct ICertEncodeStringArrayVtbl *lpVtbl;};
struct ICommandWithParameters {struct ICommandWithParametersVtbl *lpVtbl;};
struct IDirect3DExecuteBuffer {struct IDirect3DExecuteBufferVtbl *lpVtbl;};
struct IDirect3DRMDeviceArray {struct IDirect3DRMDeviceArrayVtbl *lpVtbl;};
struct IDirect3DRMMeshBuilder {struct IDirect3DRMMeshBuilderVtbl *lpVtbl;};
struct IDirect3DRMObjectArray {struct IDirect3DRMObjectArrayVtbl *lpVtbl;};
struct IDirect3DRMPickedArray {struct IDirect3DRMPickedArrayVtbl *lpVtbl;};
struct IDirect3DRMVisualArray {struct IDirect3DRMVisualArrayVtbl *lpVtbl;};
struct IDirectDrawMediaSample {struct IDirectDrawMediaSampleVtbl *lpVtbl;};
struct IDirectDrawMediaStream {struct IDirectDrawMediaStreamVtbl *lpVtbl;};
struct IDirectSound3DListener {struct IDirectSound3DListenerVtbl *lpVtbl;};
struct IDtcLuRmEnlistmentSink {struct IDtcLuRmEnlistmentSinkVtbl *lpVtbl;};
struct IEncodingFilterFactory {struct IEncodingFilterFactoryVtbl *lpVtbl;};
struct IEnumRemoteDoubleValue {struct IEnumRemoteDoubleValueVtbl *lpVtbl;};
struct IEnumRemoteThreadGroup {struct IEnumRemoteThreadGroupVtbl *lpVtbl;};
struct IExchExtPropertySheets {struct IExchExtPropertySheetsVtbl *lpVtbl;};
struct IExchangeExportChanges {struct IExchangeExportChangesVtbl *lpVtbl;};
struct IGetClusterNetworkInfo {struct IGetClusterNetworkInfoVtbl *lpVtbl;};
struct IHTMLElementCollection {struct IHTMLElementCollectionVtbl *lpVtbl;};
struct IHTMLFiltersCollection {struct IHTMLFiltersCollectionVtbl *lpVtbl;};
struct IHTMLFramesCollection2 {struct IHTMLFramesCollection2Vtbl *lpVtbl;};
struct IHTMLPluginsCollection {struct IHTMLPluginsCollectionVtbl *lpVtbl;};
struct IJavaEnumRemoteProcess {struct IJavaEnumRemoteProcessVtbl *lpVtbl;};
typedef struct _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
struct IMLangLineBreakConsole {struct IMLangLineBreakConsoleVtbl *lpVtbl;};
struct IObjectContextActivity {struct IObjectContextActivityVtbl *lpVtbl;};
typedef struct _IPX_MIB_GET_INPUT_DATA IPX_MIB_GET_INPUT_DATA;
typedef struct _IPX_MIB_SET_INPUT_DATA IPX_MIB_SET_INPUT_DATA;
typedef struct _IPX_SPXCONNSTATUS_DATA IPX_SPXCONNSTATUS_DATA;
struct IRemoteContainerObject {struct IRemoteContainerObjectVtbl *lpVtbl;};
struct IRemoteProcessCallback {struct IRemoteProcessCallbackVtbl *lpVtbl;};
struct IResourceManagerFacade {struct IResourceManagerFacadeVtbl *lpVtbl;};
struct IWCContextMenuCallback {struct IWCContextMenuCallbackVtbl *lpVtbl;};
struct IWEExtendPropertySheet {struct IWEExtendPropertySheetVtbl *lpVtbl;};
typedef union _C9F2A16A1B5FC998B91DA494984E0FDB KSPROPERTY_BOUNDS_LONG;
typedef struct _155DA1A439C400442DF8DC3CA0B009F1 KSPROPERTY_DESCRIPTION;
typedef struct LdapReferralCallback LDAP_REFERRAL_CALLBACK;
typedef struct lineagentactivityentry_tag LINEAGENTACTIVITYENTRY;
typedef struct linecalltreatmententry_tag LINECALLTREATMENTENTRY;
typedef struct lineinitializeexparams_tag LINEINITIALIZEEXPARAMS;
typedef struct _94A9993CAD7BD5ABD1D57B70615D1866 LLC_ADAPTER_OPEN_PARMS;
typedef struct _D78DF0A6BFF0F3E53FB1F17463D2E937 LLC_DIR_READ_LOG_PARMS;
typedef struct _5DC41656C27EA70C267F54907B5957CB LLC_DLC_OPEN_SAP_PARMS;
typedef struct tACMFILTERTAGDETAILSA *LPACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW *LPACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA *LPACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW *LPACMFORMATTAGDETAILSW;
typedef struct IASQLOLEConfiguration *LPASQLOLECONFIGURATION;
typedef struct IASQLOLEHistoryFilter *LPASQLOLEHISTORYFILTER;
typedef struct IASQLOLERemoteServers *LPASQLOLEREMOTESERVERS;
typedef struct IASQLOLEStdObject *LPASQLOLESTDCOLLECTION;
typedef struct IASQLOLESubscriptions *LPASQLOLESUBSCRIPTIONS;
typedef struct _D3DExecuteBufferDesc *LPD3DEXECUTEBUFFERDESC;
typedef struct _D3DRMPMESHLOADSTATUS *LPD3DRMPMESHLOADSTATUS;
typedef struct _DDVIDEOPORTBANDWIDTH *LPDDVIDEOPORTBANDWIDTH;
typedef struct IDDVideoPortContainer *LPDDVIDEOPORTCONTAINER;
typedef struct IDirect3DRMFrameArray *LPDIRECT3DRMFRAMEARRAY;
typedef struct IDirect3DRMLightArray *LPDIRECT3DRMLIGHTARRAY;
typedef struct IDirect3DRMUserVisual *LPDIRECT3DRMUSERVISUAL;
typedef struct _C5C9E4429F4E5976A7E6A04308F34D53 *LPDPMSG_SETSESSIONDESC;
typedef IEnumConnectionPoints *LPENUMCONNECTIONPOINTS;
typedef IEnumOleDocumentViews *LPENUMOLEDOCUMENTVIEWS;
typedef IEnumRemoteFloatValue *LPENUMREMOTEFLOATVALUE;
typedef IEnumRemoteShortValue *LPENUMREMOTESHORTVALUE;
typedef struct _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;
typedef struct _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;
typedef struct IExchangeFastTransfer *LPEXCHANGEFASTTRANSFER;
typedef IExchExtMessageEvents *LPEXCHEXTMESSAGEEVENTS;
typedef IExchExtSessionEvents *LPEXCHEXTSESSIONEVENTS;
typedef struct _FILEGROUPDESCRIPTORA *LPFILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW *LPFILEGROUPDESCRIPTORW;
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
typedef struct tagINITCOMMONCONTROLSEX *LPINITCOMMONCONTROLSEX;
typedef struct tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;
typedef struct linemediacontroltone_tag *LPLINEMEDIACONTROLTONE;
typedef struct _LOCALGROUP_INFO_1002 *LPLOCALGROUP_INFO_1002;
typedef struct IDirect3DRMMaterial **LPLPDIRECT3DRMMATERIAL;
typedef struct IDirect3DRMTexture2 **LPLPDIRECT3DRMTEXTURE2;
typedef struct IDirect3DRMViewport **LPLPDIRECT3DRMVIEWPORT;
typedef struct tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;
typedef struct _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;
typedef struct tagNMDATETIMEWMKEYDOWNA *LPNMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW *LPNMDATETIMEWMKEYDOWNW;
typedef struct _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;
typedef IRemoteContainerField *LPREMOTECONTAINERFIELD;
typedef struct _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;
typedef ISpecifyPropertyPages *LPSPECIFYPROPERTYPAGES;
typedef struct _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;
typedef struct _WKSTA_USER_INFO_1101 *LPWKSTA_USER_INFO_1101;
typedef struct _WSAServiceClassInfoA *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *LPWSASERVICECLASSINFOW;
enum MACRO_ACMDRIVERDETAILS {ACMDRIVERDETAILS_SHORTNAME_CHARS = 32,ACMDRIVERDETAILS_LONGNAME_CHARS = 128,ACMDRIVERDETAILS_COPYRIGHT_CHARS = 80,ACMDRIVERDETAILS_LICENSING_CHARS = 128,ACMDRIVERDETAILS_FEATURES_CHARS = 512,ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC = 1667528033,ACMDRIVERDETAILS_FCCCOMP_UNDEFINED = 0,ACMDRIVERDETAILS_SUPPORTF_CODEC = 1,ACMDRIVERDETAILS_SUPPORTF_CONVERTER = 2,ACMDRIVERDETAILS_SUPPORTF_FILTER = 4,ACMDRIVERDETAILS_SUPPORTF_HARDWARE = 8,ACMDRIVERDETAILS_SUPPORTF_ASYNC = 16,ACMDRIVERDETAILS_SUPPORTF_LOCAL = 1073741824,ACMDRIVERDETAILS_SUPPORTF_DISABLED = -2147483648,};
enum MACRO_ACMFILTERDETAILS {ACMFILTERDETAILS_FILTER_CHARS = 128,};
enum MACRO_ACMFORMATDETAILS {ACMFORMATDETAILS_FORMAT_CHARS = 128,};
enum MACRO_APPCLASS_MONITOR {APPCLASS_MONITOR = 0x1,XTYP_MONITOR = 0x80F2,};
enum MACRO_APPNAMEBUFFERLEN {APPNAMEBUFFERLEN = 40,};
enum MACRO_BSF_MSGSRV32ISOK {BSF_MSGSRV32ISOK = 0x80000000,BSF_MSGSRV32ISOK_BIT = 0x1F,};
enum MACRO_CREATE_SUSPENDED {CREATE_SUSPENDED = 0x4,};
enum MACRO_CSTORAGEPROPERTY {CSTORAGEPROPERTY = 0x15,};
enum MACRO_D3DLIGHTINGMODEL {D3DLIGHTINGMODEL_RGB = 0x1,D3DLIGHTINGMODEL_MONO = 0x2,};
enum MACRO_D3DPTADDRESSCAPS {D3DPTADDRESSCAPS_WRAP = 0x1,D3DPTADDRESSCAPS_MIRROR = 0x2,D3DPTADDRESSCAPS_CLAMP = 0x4,D3DPTADDRESSCAPS_BORDER = 0x8,D3DPTADDRESSCAPS_INDEPENDENTUV = 0x10,};
enum MACRO_D3DRMPMESHSTATUS {D3DRMPMESHSTATUS_VALID = 0x1,D3DRMPMESHSTATUS_INTERRUPTED = 0x2,D3DRMPMESHSTATUS_BASEMESHCOMPLETE = 0x4,D3DRMPMESHSTATUS_COMPLETE = 0x8,D3DRMPMESHSTATUS_RENDERABLE = 0x10,};
enum MACRO_D3DTRANSFORMCAPS {D3DTRANSFORMCAPS_CLIP = 0x1,};
enum MACRO_DEFAULTPRECISION {DEFAULTPRECISION = 18,};
enum MACRO_DIPROPAUTOCENTER {DIPROPAUTOCENTER_OFF = 0,DIPROPAUTOCENTER_ON = 1,};
enum MACRO_DPSEND_GUARANTEE {DPSEND_GUARANTEE = 1,DPSEND_TRYONCE = 4,};
enum MACRO_ENUMPAPERMETRICS {ENUMPAPERMETRICS = 34,};
enum MACRO_EXCEPTION_ACCESS {EXCEPTION_ACCESS_VIOLATION = 3221225477,EXCEPTION_DATATYPE_MISALIGNMENT = 2147483650,EXCEPTION_BREAKPOINT = 2147483651,EXCEPTION_SINGLE_STEP = 2147483652,EXCEPTION_ARRAY_BOUNDS_EXCEEDED = 3221225612,EXCEPTION_FLT_DENORMAL_OPERAND = 3221225613,EXCEPTION_FLT_DIVIDE_BY_ZERO = 3221225614,EXCEPTION_FLT_INEXACT_RESULT = 3221225615,EXCEPTION_FLT_INVALID_OPERATION = 3221225616,EXCEPTION_FLT_OVERFLOW = 3221225617,EXCEPTION_FLT_STACK_CHECK = 3221225618,EXCEPTION_FLT_UNDERFLOW = 3221225619,EXCEPTION_INT_DIVIDE_BY_ZERO = 3221225620,EXCEPTION_INT_OVERFLOW = 3221225621,EXCEPTION_PRIV_INSTRUCTION = 3221225622,EXCEPTION_IN_PAGE_ERROR = 3221225478,EXCEPTION_ILLEGAL_INSTRUCTION = 3221225501,EXCEPTION_NONCONTINUABLE_EXCEPTION = 3221225509,EXCEPTION_STACK_OVERFLOW = 3221225725,EXCEPTION_INVALID_DISPOSITION = 3221225510,EXCEPTION_GUARD_PAGE = 2147483649,EXCEPTION_INVALID_HANDLE = 3221225480,};
enum MACRO_E_ALREADY_EXISTS {EC_EDK_E_ALREADY_EXISTS = 0x3,EDK_E_ALREADY_EXISTS = 0x800B0003,};
enum MACRO_FILE_COMPRESSION {FILE_COMPRESSION_NONE = 0,FILE_COMPRESSION_WINLZA = 1,FILE_COMPRESSION_MSZIP = 2,};
enum MACRO_GETPAIRKERNTABLE {GETPAIRKERNTABLE = 258,};
enum MACRO_GETSCALINGFACTOR {GETSCALINGFACTOR = 14,};
enum MACRO_GETVECTORPENSIZE {GETVECTORPENSIZE = 26,};
enum MACRO_GOPHER_ATTRIBUTE {GOPHER_ATTRIBUTE_ID_BASE = 0xABCCCC00,GOPHER_CATEGORY_ID_ALL = 0xABCCCC01,GOPHER_CATEGORY_ID_INFO = 0xABCCCC02,GOPHER_CATEGORY_ID_ADMIN = 0xABCCCC03,GOPHER_CATEGORY_ID_VIEWS = 0xABCCCC04,GOPHER_CATEGORY_ID_ABSTRACT = 0xABCCCC05,GOPHER_CATEGORY_ID_VERONICA = 0xABCCCC06,GOPHER_CATEGORY_ID_ASK = 0xABCCCC07,GOPHER_CATEGORY_ID_UNKNOWN = 0xABCCCC08,GOPHER_ATTRIBUTE_ID_ALL = 0xABCCCC09,GOPHER_ATTRIBUTE_ID_ADMIN = 0xABCCCC0A,GOPHER_ATTRIBUTE_ID_MOD_DATE = 0xABCCCC0B,GOPHER_ATTRIBUTE_ID_TTL = 0xABCCCC0C,GOPHER_ATTRIBUTE_ID_SCORE = 0xABCCCC0D,GOPHER_ATTRIBUTE_ID_RANGE = 0xABCCCC0E,GOPHER_ATTRIBUTE_ID_SITE = 0xABCCCC0F,GOPHER_ATTRIBUTE_ID_ORG = 0xABCCCC10,GOPHER_ATTRIBUTE_ID_LOCATION = 0xABCCCC11,GOPHER_ATTRIBUTE_ID_GEOG = 0xABCCCC12,GOPHER_ATTRIBUTE_ID_TIMEZONE = 0xABCCCC13,GOPHER_ATTRIBUTE_ID_PROVIDER = 0xABCCCC14,GOPHER_ATTRIBUTE_ID_VERSION = 0xABCCCC15,GOPHER_ATTRIBUTE_ID_ABSTRACT = 0xABCCCC16,GOPHER_ATTRIBUTE_ID_VIEW = 0xABCCCC17,GOPHER_ATTRIBUTE_ID_TREEWALK = 0xABCCCC18,GOPHER_ATTRIBUTE_ID_UNKNOWN = 0xABCCCC19,};
enum MACRO_ICCOMPRESSFRAMES {ICCOMPRESSFRAMES_PADDING = 0x1,};
enum MACRO_IMAGE_SEPARATION {IMAGE_SEPARATION = 65536,};
enum MACRO_INTERNET_RFC1123 {INTERNET_RFC1123_FORMAT = 0,INTERNET_RFC1123_BUFSIZE = 30,};
enum MACRO_INTERNET_SERVICE {INTERNET_SERVICE_URL = 0,INTERNET_SERVICE_FTP = 1,INTERNET_SERVICE_GOPHER = 2,INTERNET_SERVICE_HTTP = 3,};
enum MACRO_IOCTL_DISK_CHECK {IOCTL_DISK_CHECK_VERIFY = 0x74800,IOCTL_DISK_MEDIA_REMOVAL = 0x74804,IOCTL_DISK_EJECT_MEDIA = 0x74808,IOCTL_DISK_LOAD_MEDIA = 0x7480C,IOCTL_DISK_RESERVE = 0x74810,IOCTL_DISK_RELEASE = 0x74814,IOCTL_DISK_FIND_NEW_DEVICES = 0x74818,IOCTL_DISK_GET_MEDIA_TYPES = 0x70C00,};
enum MACRO_IPN_FIELDCHANGED {IPN_FIELDCHANGED = -860,};
enum MACRO_IoctlCodeRxFrame {IoctlCodeRxFrame = 0x632,};
enum MACRO_IoctlCodeTxFrame {IoctlCodeTxFrame = 0x441,};
enum MACRO_JOB_NOTIFY_FIELD {JOB_NOTIFY_FIELD_PRINTER_NAME = 0x0,JOB_NOTIFY_FIELD_MACHINE_NAME = 0x1,JOB_NOTIFY_FIELD_PORT_NAME = 0x2,JOB_NOTIFY_FIELD_USER_NAME = 0x3,JOB_NOTIFY_FIELD_NOTIFY_NAME = 0x4,JOB_NOTIFY_FIELD_DATATYPE = 0x5,JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 0x6,JOB_NOTIFY_FIELD_PARAMETERS = 0x7,JOB_NOTIFY_FIELD_DRIVER_NAME = 0x8,JOB_NOTIFY_FIELD_DEVMODE = 0x9,JOB_NOTIFY_FIELD_STATUS = 0xA,JOB_NOTIFY_FIELD_STATUS_STRING = 0xB,JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,JOB_NOTIFY_FIELD_DOCUMENT = 0xD,JOB_NOTIFY_FIELD_PRIORITY = 0xE,JOB_NOTIFY_FIELD_POSITION = 0xF,JOB_NOTIFY_FIELD_SUBMITTED = 0x10,JOB_NOTIFY_FIELD_START_TIME = 0x11,JOB_NOTIFY_FIELD_UNTIL_TIME = 0x12,JOB_NOTIFY_FIELD_TIME = 0x13,JOB_NOTIFY_FIELD_TOTAL_PAGES = 0x14,JOB_NOTIFY_FIELD_PAGES_PRINTED = 0x15,JOB_NOTIFY_FIELD_TOTAL_BYTES = 0x16,JOB_NOTIFY_FIELD_BYTES_PRINTED = 0x17,};
enum MACRO_LINEADDRCAPFLAGS {LINEADDRCAPFLAGS_FWDNUMRINGS = 0x1,LINEADDRCAPFLAGS_PICKUPGROUPID = 0x2,LINEADDRCAPFLAGS_SECURE = 0x4,LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 0x8,LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 0x10,LINEADDRCAPFLAGS_DIALED = 0x20,LINEADDRCAPFLAGS_ORIGOFFHOOK = 0x40,LINEADDRCAPFLAGS_DESTOFFHOOK = 0x80,LINEADDRCAPFLAGS_FWDCONSULT = 0x100,LINEADDRCAPFLAGS_SETUPCONFNULL = 0x200,LINEADDRCAPFLAGS_AUTORECONNECT = 0x400,LINEADDRCAPFLAGS_COMPLETIONID = 0x800,LINEADDRCAPFLAGS_TRANSFERHELD = 0x1000,LINEADDRCAPFLAGS_TRANSFERMAKE = 0x2000,LINEADDRCAPFLAGS_CONFERENCEHELD = 0x4000,LINEADDRCAPFLAGS_CONFERENCEMAKE = 0x8000,LINEADDRCAPFLAGS_PARTIALDIAL = 0x10000,LINEADDRCAPFLAGS_FWDSTATUSVALID = 0x20000,LINEADDRCAPFLAGS_FWDINTEXTADDR = 0x40000,LINEADDRCAPFLAGS_FWDBUSYNAADDR = 0x80000,LINEADDRCAPFLAGS_ACCEPTTOALERT = 0x100000,LINEADDRCAPFLAGS_CONFDROP = 0x200000,LINEADDRCAPFLAGS_PICKUPCALLWAIT = 0x400000,LINEADDRCAPFLAGS_PREDICTIVEDIALER = 0x800000,LINEADDRCAPFLAGS_QUEUE = 0x1000000,LINEADDRCAPFLAGS_ROUTEPOINT = 0x2000000,LINEADDRCAPFLAGS_HOLDMAKESNEW = 0x4000000,LINEADDRCAPFLAGS_NOINTERNALCALLS = 0x8000000,LINEADDRCAPFLAGS_NOEXTERNALCALLS = 0x10000000,LINEADDRCAPFLAGS_SETCALLINGID = 0x20000000,};
enum MACRO_LINEADDRESSSTATE {LINEADDRESSSTATE_OTHER = 0x1,LINEADDRESSSTATE_DEVSPECIFIC = 0x2,LINEADDRESSSTATE_INUSEZERO = 0x4,LINEADDRESSSTATE_INUSEONE = 0x8,LINEADDRESSSTATE_INUSEMANY = 0x10,LINEADDRESSSTATE_NUMCALLS = 0x20,LINEADDRESSSTATE_FORWARD = 0x40,LINEADDRESSSTATE_TERMINALS = 0x80,LINEADDRESSSTATE_CAPSCHANGE = 0x100,};
enum MACRO_LINEAGENTFEATURE {LINEAGENTFEATURE_SETAGENTGROUP = 0x1,LINEAGENTFEATURE_SETAGENTSTATE = 0x2,LINEAGENTFEATURE_SETAGENTACTIVITY = 0x4,LINEAGENTFEATURE_AGENTSPECIFIC = 0x8,LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 0x10,LINEAGENTFEATURE_GETAGENTGROUP = 0x20,};
enum MACRO_LINECALLFEATURE2 {LINECALLFEATURE2_NOHOLDCONFERENCE = 0x1,LINECALLFEATURE2_ONESTEPTRANSFER = 0x2,LINECALLFEATURE2_COMPLCAMPON = 0x4,LINECALLFEATURE2_COMPLCALLBACK = 0x8,LINECALLFEATURE2_COMPLINTRUDE = 0x10,LINECALLFEATURE2_COMPLMESSAGE = 0x20,LINECALLFEATURE2_TRANSFERNORM = 0x40,LINECALLFEATURE2_TRANSFERCONF = 0x80,LINECALLFEATURE2_PARKDIRECT = 0x100,LINECALLFEATURE2_PARKNONDIRECT = 0x200,};
enum MACRO_LINEDIALTONEMODE {LINEDIALTONEMODE_NORMAL = 0x1,LINEDIALTONEMODE_SPECIAL = 0x2,LINEDIALTONEMODE_INTERNAL = 0x4,LINEDIALTONEMODE_EXTERNAL = 0x8,LINEDIALTONEMODE_UNKNOWN = 0x10,LINEDIALTONEMODE_UNAVAIL = 0x20,};
enum MACRO_LINEGENERATETERM {LINEGENERATETERM_DONE = 0x1,LINEGENERATETERM_CANCEL = 0x2,};
enum MACRO_LINEMEDIACONTROL {LINEMEDIACONTROL_NONE = 0x1,LINEMEDIACONTROL_START = 0x2,LINEMEDIACONTROL_RESET = 0x4,LINEMEDIACONTROL_PAUSE = 0x8,LINEMEDIACONTROL_RESUME = 0x10,LINEMEDIACONTROL_RATEUP = 0x20,LINEMEDIACONTROL_RATEDOWN = 0x40,LINEMEDIACONTROL_RATENORMAL = 0x80,LINEMEDIACONTROL_VOLUMEUP = 0x100,LINEMEDIACONTROL_VOLUMEDOWN = 0x200,LINEMEDIACONTROL_VOLUMENORMAL = 0x400,};
enum MACRO_LINEOFFERINGMODE {LINEOFFERINGMODE_ACTIVE = 0x1,LINEOFFERINGMODE_INACTIVE = 0x2,};
enum MACRO_LINEPROXYREQUEST {LINEPROXYREQUEST_SETAGENTGROUP = 0x1,LINEPROXYREQUEST_SETAGENTSTATE = 0x2,LINEPROXYREQUEST_SETAGENTACTIVITY = 0x3,LINEPROXYREQUEST_GETAGENTCAPS = 0x4,LINEPROXYREQUEST_GETAGENTSTATUS = 0x5,LINEPROXYREQUEST_AGENTSPECIFIC = 0x6,LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 0x7,LINEPROXYREQUEST_GETAGENTGROUPLIST = 0x8,};
enum MACRO_LINETRANSFERMODE {LINETRANSFERMODE_TRANSFER = 0x1,LINETRANSFERMODE_CONFERENCE = 0x2,};
enum MACRO_LVN_ITEMCHANGING {LVN_ITEMCHANGING = -100,LVN_ITEMCHANGED = -101,LVN_INSERTITEM = -102,LVN_DELETEITEM = -103,LVN_DELETEALLITEMS = -104,LVN_BEGINLABELEDITA = -105,LVN_BEGINLABELEDITW = -175,LVN_ENDLABELEDITA = -106,LVN_ENDLABELEDITW = -176,LVN_COLUMNCLICK = -108,LVN_BEGINDRAG = -109,LVN_BEGINRDRAG = -111,LVN_ODCACHEHINT = -113,LVN_ODFINDITEMA = -152,LVN_ODFINDITEMW = -179,LVN_ITEMACTIVATE = -114,LVN_ODSTATECHANGED = -115,LVN_ODFINDITEM = -152,LVN_HOTTRACK = -121,LVN_GETDISPINFOA = -150,LVN_GETDISPINFOW = -177,LVN_SETDISPINFOA = -151,LVN_SETDISPINFOW = -178,LVN_BEGINLABELEDIT = -105,LVN_ENDLABELEDIT = -106,LVN_GETDISPINFO = -150,LVN_SETDISPINFO = -151,};
enum MACRO_MARSHALINTERFACE {MARSHALINTERFACE_MIN = 500,};
enum MACRO_MAXGETHOSTSTRUCT {MAXGETHOSTSTRUCT = 1024,};
enum MACRO_MAXNETLIBCONNSTR {MAXNETLIBCONNSTR = 255,};
enum MACRO_MAX_COMPUTERNAME {MAX_COMPUTERNAME_LENGTH = 15,};
enum MACRO_MD_AUTHORIZATION {MD_AUTHORIZATION = 6000,MD_REALM = 6001,MD_HTTP_EXPIRES = 6002,MD_HTTP_PICS = 6003,MD_HTTP_CUSTOM = 6004,MD_DIRECTORY_BROWSING = 6005,MD_DEFAULT_LOAD_FILE = 6006,MD_CUSTOM_ERROR = 6008,MD_FOOTER_DOCUMENT = 6009,MD_FOOTER_ENABLED = 6010,MD_HTTP_REDIRECT = 6011,MD_DEFAULT_LOGON_DOMAIN = 6012,MD_LOGON_METHOD = 6013,MD_SCRIPT_MAPS = 6014,MD_MIME_MAP = 6015,MD_ACCESS_PERM = 6016,MD_IP_SEC = 6019,MD_ANONYMOUS_USER_NAME = 6020,MD_ANONYMOUS_PWD = 6021,MD_ANONYMOUS_USE_SUBAUTH = 6022,MD_DONT_LOG = 6023,MD_ADMIN_ACL = 6027,MD_SSI_EXEC_DISABLED = 6028,MD_DO_REVERSE_DNS = 6029,MD_SSL_ACCESS_PERM = 6030,MD_AUTHORIZATION_PERSISTENCE = 6031,MD_NTAUTHENTICATION_PROVIDERS = 6032,MD_SCRIPT_TIMEOUT = 6033,MD_CACHE_EXTENSIONS = 6034,MD_CREATE_PROCESS_AS_USER = 6035,MD_CREATE_PROC_NEW_CONSOLE = 6036,MD_POOL_IDC_TIMEOUT = 6037,MD_ALLOW_KEEPALIVES = 6038,MD_IS_CONTENT_INDEXED = 6039,MD_CC_NO_CACHE = 6041,MD_CC_MAX_AGE = 6042,MD_CC_OTHER = 6043,MD_REDIRECT_HEADERS = 6044,MD_UPLOAD_READAHEAD_SIZE = 6045,MD_PUT_READ_SIZE = 6046,};
enum MACRO_MULTIFILEOPENORD {MULTIFILEOPENORD = 1537,};
enum MACRO_NEWOBJECTOPENORD {NEWOBJECTOPENORD = 1548,};
enum MACRO_NULL_RESTRICTION {NULL_RESTRICTION = 0xFF,};
enum MACRO_NUMOFREPLREQRECV {NUMOFREPLREQRECV = 54,};
enum MACRO_NUMOFREPLREQSENT {NUMOFREPLREQSENT = 56,};
enum MACRO_NUMOFSYNCREPLIES {NUMOFSYNCREPLIES = 52,};
enum MACRO_NUMSESSINPACKETS {NUMSESSINPACKETS = 22,};
enum MACRO_OLESTDRETRYDELAY {OLESTDRETRYDELAY = 5000,};
enum MACRO_PHONEBUTTONSTATE {PHONEBUTTONSTATE_UP = 0x1,PHONEBUTTONSTATE_DOWN = 0x2,PHONEBUTTONSTATE_UNKNOWN = 0x4,PHONEBUTTONSTATE_UNAVAIL = 0x8,};
enum MACRO_PHONESTATUSFLAGS {PHONESTATUSFLAGS_CONNECTED = 0x1,PHONESTATUSFLAGS_SUSPENDED = 0x2,};
enum MACRO_PORT_MULTILINKED {PORT_MULTILINKED = 0x20,};
enum MACRO_PROFILE_FILENAME {PROFILE_FILENAME = 1,PROFILE_MEMBUFFER = 2,PROFILE_READ = 1,PROFILE_READWRITE = 2,};
enum MACRO_QUERY_SORTASCEND {QUERY_SORTASCEND = 0,QUERY_SORTDESCEND = 1,};
enum MACRO_RAS_IPADDRESSLEN {RAS_IPADDRESSLEN = 15,RAS_IPXADDRESSLEN = 22,RAS_ATADDRESSLEN = 32,};
enum MACRO_RBN_HEIGHTCHANGE {RBN_HEIGHTCHANGE = -831,RBN_GETOBJECT = -832,RBN_LAYOUTCHANGED = -833,RBN_AUTOSIZE = -834,RBN_BEGINDRAG = -835,RBN_ENDDRAG = -836,RBN_DELETINGBAND = -837,RBN_DELETEDBAND = -838,RBN_CHILDSIZE = -839,};
enum MACRO_SECPKG_CRED_ATTR {SECPKG_CRED_ATTR_NAMES = 1,SECPKG_ATTR_SIZES = 0,SECPKG_ATTR_NAMES = 1,SECPKG_ATTR_LIFESPAN = 2,SECPKG_ATTR_DCE_INFO = 3,SECPKG_ATTR_STREAM_SIZES = 4,SECPKG_ATTR_KEY_INFO = 5,SECPKG_ATTR_AUTHORITY = 6,SECPKG_ATTR_PROTO_INFO = 7,SECPKG_ATTR_PASSWORD_EXPIRY = 8,SECPKG_ATTR_SESSION_KEY = 9,SECPKG_ATTR_PACKAGE_INFO = 10,SECPKG_CONTEXT_EXPORT_RESET_NEW = 1,SECPKG_CONTEXT_EXPORT_DELETE_OLD = 2,};
enum MACRO_SECURITY_CONTEXT {SECURITY_CONTEXT_TRACKING = 0x40000,SECURITY_EFFECTIVE_ONLY = 0x80000,SECURITY_SQOS_PRESENT = 0x100000,SECURITY_VALID_SQOS_FLAGS = 0x1F0000,};
enum MACRO_SECURITY_CONTROL {SECURITY_CONTROL_REFRESH = 100,SECURITY_CONTROL_UPDATE_MACHINE_JP_PROPS = 101,SECURITY_CONTROL_RELOAD_LOCAL_POLICY = 102,};
enum MACRO_SECURITY_DYNAMIC {SECURITY_DYNAMIC_TRACKING = 1,SECURITY_STATIC_TRACKING = 0,};
enum MACRO_SECURITY_SUPPORT {SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION = 1,};
enum MACRO_SERVICE_MULTIPLE {SERVICE_MULTIPLE = 0x1,};
enum MACRO_SERVICE_RESOURCE {SERVICE_RESOURCE = 0x1,SERVICE_SERVICE = 0x2,SERVICE_LOCAL = 0x4,SERVICE_REGISTER = 0x1,SERVICE_DEREGISTER = 0x2,SERVICE_FLUSH = 0x3,SERVICE_ADD_TYPE = 0x4,SERVICE_DELETE_TYPE = 0x5,SERVICE_FLAG_DEFER = 0x1,SERVICE_FLAG_HARD = 0x2,};
enum MACRO_SETALLJUSTVALUES {SETALLJUSTVALUES = 771,};
enum MACRO_SRV_SERVNETFUNCS {SRV_SERVNETFUNCS = 11,SRV_NUMINPUTBUFS = 2,SRV_TDS_TEXT = 35,SRV_TDS_VARBINARY = 37,SRV_TDS_INTN = 38,SRV_TDS_VARCHAR = 39,SRV_TDS_LOGIN = 173,SRV_TDS_BINARY = 45,SRV_TDS_IMAGE = 34,SRV_TDS_CHAR = 47,SRV_TDS_INT1 = 48,SRV_TDS_BIT = 50,SRV_TDS_INT2 = 52,SRV_TDS_INT4 = 56,SRV_TDS_MONEY = 60,SRV_TDS_DATETIME = 61,SRV_TDS_FLT8 = 62,SRV_TDS_FLTN = 109,SRV_TDS_MONEYN = 110,SRV_TDS_DATETIMN = 111,SRV_TDS_OFFSET = 120,SRV_TDS_RETURNSTATUS = 121,SRV_TDS_PROCID = 124,SRV_TDS_COLNAME = 160,SRV_TDS_COLFMT = 161,SRV_TDS2_COLFMT = 42,SRV_TDS_TABNAME = 164,SRV_TDS_COLINFO = 165,SRV_TDS_ORDER = 169,SRV_TDS_ERROR = 170,SRV_TDS_INFO = 171,SRV_TDS_RETURNVALUE = 172,SRV_TDS_CONTROL = 174,SRV_TDS_ROW = 209,SRV_TDS_DONE = 253,SRV_TDS_DONEPROC = 254,SRV_TDS_DONEINPROC = 255,SRV_TDS_FLT4 = 59,SRV_TDS_MONEY4 = 122,SRV_TDS_DATETIM4 = 58,SRV_TDS_NULL = 31,SRV_TDS_ENVCHANGE = 227,SRV_TDS_NUMERIC = 63,SRV_TDS_NUMERICN = 108,SRV_TDS_DECIMAL = 55,SRV_TDS_DECIMALN = 106,SRV_ERROR = 0,SRV_DONE = 1,SRV_DATATYPE = 2,SRV_EVENT = 4,SRV_ENO_OS_ERR = 0,SRV_INFO = 1,SRV_FATAL_PROCESS = 10,SRV_FATAL_SERVER = 19,SRV_CONTINUE = 0,SRV_LANGUAGE = 1,SRV_CONNECT = 2,SRV_RPC = 3,SRV_RESTART = 4,SRV_DISCONNECT = 5,SRV_ATTENTION = 6,SRV_SLEEP = 7,SRV_START = 8,SRV_STOP = 9,SRV_EXIT = 10,SRV_CANCEL = 11,SRV_SETUP = 12,SRV_CLOSE = 13,SRV_PRACK = 14,SRV_PRERROR = 15,SRV_ATTENTION_ACK = 16,SRV_SKIP = 17,SRV_TRANSMGR = 18,SRV_INSERTEXEC = 19,SRV_OLEDB = 20,SRV_INTERNAL_HANDLER = 99,SRV_PROGRAMMER_DEFINED = 100,SRV_SERVERNAME = 0,SRV_CONNECTIONS = 1,SRV_LOGFILE = 2,SRV_STACKSIZE = 3,SRV_PRINT_RECV = 4,SRV_PRINT_SEND = 5,SRV_VERSION = 6,SRV_REMOTE_ACCESS = 7,SRV_REMOTE_SITES = 8,SRV_REMOTE_CONNECTIONS = 9,SRV_MAX_PACKETS = 10,SRV_MAXWORKINGTHREADS = 11,SRV_MINWORKINGTHREADS = 12,SRV_THREADTIMEOUT = 13,SRV_CONCURRENTTHREADS = 14,SRV_LOCAL_ONLY = 15,SRV_UNPACK_RPC = 16,SRV_MAX_PACKETSIZE = 17,SRV_THREADPRIORITY = 18,SRV_ANSI_CODEPAGE = 19,SRV_REMOTENAME = 20,SRV_TDS_VERSION = 21,SRV_PROG_VERSION = 22,SRV_DEFAULT_PACKETSIZE = 26,SRV_PASSTHROUGH = 27,SRV_THREADAFFINITY = 28,SRV_PRIORITY_LOW = -2,SRV_PRIORITY_NORMAL = 0,SRV_PRIORITY_HIGH = 2,SRV_PRIORITY_CRITICAL = 15,SRV_DUPLICATE_HANDLER = 2,SRV_NULLTERM = -1,SRV_MSG_INFO = 1,SRV_MSG_ERROR = 2,SRV_LOGGING_IN = 1,SRV_FREE = 2,SRV_SUSPENDED = 4,SRV_DEAD = 8,SRV_KILL = 16,SRV_RUNNING = 32,SRV_ATTN = 64,SRV_WAITING = 128,SRV_IOERROR = 256,SRV_QUEUED = 512,SRV_INEXEC = 1024,SRV_DONE_FINAL = 0,SRV_DONE_MORE = 1,SRV_DONE_ERROR = 2,SRV_DONE_INXACT = 4,SRV_DONE_PROC = 8,SRV_DONE_COUNT = 16,SRV_DONE_ATTN = 32,SRV_DONE_RPC_IN_BATCH = 128,SRV_PARAMRETURN = 1,SRV_EQUEUED = 1,SRV_EIMMEDIATE = 2,SRV_SPID = 10,SRV_NETSPID = 11,SRV_TYPE = 12,SRV_STATUS = 13,SRV_RMTSERVER = 14,SRV_HOST = 15,SRV_USER = 16,SRV_PWD = 17,SRV_CPID = 18,SRV_APPLNAME = 19,SRV_TDS = 20,SRV_CLIB = 21,SRV_LIBVERS = 22,SRV_ROWSENT = 23,SRV_BCPFLAG = 24,SRV_NATLANG = 25,SRV_PIPEHANDLE = 26,SRV_NETWORK_MODULE = 27,SRV_NETWORK_VERSION = 28,SRV_NETWORK_CONNECTION = 29,SRV_LSECURE = 30,SRV_SAXP = 31,SRV_TDS_NONE = 0,SRV_TDS_2_0 = 1,SRV_TDS_3_4 = 2,SRV_TDS_4_2 = 3,SRV_TDS_6_0 = 4,SRV_INITIALNETTHREADCNT = 1,SRV_RPC_ACTIVE = 1,SRV_RPC_DISABLE_OUTPARAMS = 2,SRV_ENV_PACKETSIZE = 4,SRV_NO_FLUSH = 0,SRV_FLUSH_EOM = 1,SRV_FLUSH_MORE = 2,};
enum MACRO_SUPPRESS_RECEIPT {SUPPRESS_RECEIPT = 0x1,};
enum MACRO_SW_PARENTCLOSING {SW_PARENTCLOSING = 1,SW_OTHERZOOM = 2,SW_PARENTOPENING = 3,SW_OTHERUNZOOM = 4,};
enum MACRO_S_BUFFERTOOSMALL {S_BUFFERTOOSMALL = 0x41000,S_ENDOFCURSOR = 0x41001,S_SILENTCANCEL = 0x41002,S_RECORDDELETED = 0x41003,};
enum MACRO_TB_GETBUTTONINFO {TB_GETBUTTONINFO = 1089,TB_SETBUTTONINFO = 1090,TB_INSERTBUTTON = 1045,TB_ADDBUTTONS = 1044,};
enum MACRO_TOTALINQMPACKETS {TOTALINQMPACKETS = 10,};
enum MACRO_TTN_GETDISPINFOA {TTN_GETDISPINFOA = -520,TTN_GETDISPINFOW = -530,TTN_SHOW = -521,TTN_POP = -522,TTN_GETDISPINFO = -520,TTN_NEEDTEXT = -520,TTN_NEEDTEXTA = -520,TTN_NEEDTEXTW = -530,};
enum MACRO_TVM_SETIMAGELIST {TVM_SETIMAGELIST = 4361,TVM_GETNEXTITEM = 4362,};
enum MACRO_TVN_GETDISPINFOA {TVN_GETDISPINFOA = -403,TVN_GETDISPINFOW = -452,TVN_SETDISPINFOA = -404,TVN_SETDISPINFOW = -453,};
enum MACRO_TVN_SELCHANGINGA {TVN_SELCHANGINGA = -401,TVN_SELCHANGINGW = -450,TVN_SELCHANGEDA = -402,TVN_SELCHANGEDW = -451,};
enum MACRO_VER_PRIVATEBUILD {VER_PRIVATEBUILD = 8,};
enum MACRO_VER_PRODUCTBUILD {VER_PRODUCTBUILD_QFE = 1,VER_PRODUCTBUILD = 1636,VER_PRODUCTVERSION_W = 1280,VER_PRODUCTVERSION_DW = 83887716,VER_DEBUG = 0,VER_PRERELEASE = 0,VER_FILEFLAGSMASK = 63,VER_FILEOS = 262148,VER_FILEFLAGS = 0,};
enum MACRO_WAPPCDESCRIPTION {WAPPCDESCRIPTION_LEN = 127,};
enum MACRO_WAPPCSYSNOTREADY {WAPPCSYSNOTREADY = 0xF003,};
enum MACRO_WAVE_FORMAT_G726 {WAVE_FORMAT_G726_ADPCM = 0x64,WAVE_FORMAT_G722_ADPCM = 0x65,WAVE_FORMAT_DSAT = 0x66,WAVE_FORMAT_DSAT_DISPLAY = 0x67,WAVE_FORMAT_SOFTSOUND = 0x80,WAVE_FORMAT_RHETOREX_ADPCM = 0x100,WAVE_FORMAT_CREATIVE_ADPCM = 0x200,WAVE_FORMAT_CREATIVE_FASTSPEECH8 = 0x202,WAVE_FORMAT_CREATIVE_FASTSPEECH10 = 0x203,WAVE_FORMAT_QUARTERDECK = 0x220,WAVE_FORMAT_FM_TOWNS_SND = 0x300,WAVE_FORMAT_BTV_DIGITAL = 0x400,WAVE_FORMAT_OLIGSM = 0x1000,WAVE_FORMAT_OLIADPCM = 0x1001,WAVE_FORMAT_OLICELP = 0x1002,WAVE_FORMAT_OLISBC = 0x1003,WAVE_FORMAT_OLIOPR = 0x1004,WAVE_FORMAT_LH_CODEC = 0x1100,WAVE_FORMAT_NORRIS = 0x1400,WAVE_FORMAT_DEVELOPMENT = 0xFFFF,};
enum MACRO_WCPICDESCRIPTION {WCPICDESCRIPTION_LEN = 127,};
enum MACRO_WCPICSYSNOTREADY {WCPICSYSNOTREADY = 0xF003,};
enum MACRO_WHEEL_PAGESCROLL {WHEEL_PAGESCROLL = -1,};
enum MACRO_WLUALINKINACTIVE {WLUALINKINACTIVE = 12,};
enum MACRO_WSAEADDRNOTAVAIL {WSAEADDRNOTAVAIL = 10049,};
enum MACRO_WS_ACTIVECAPTION {WS_ACTIVECAPTION = 0x1,};
enum MACRO_attMessageStatus {attMessageStatus = 0x68007,};
enum MACRO_cchMaxProxyValue {cchMaxProxyValue = 1111,};
enum MACRO_ckidAVIEXTHEADER {ckidAVIEXTHEADER = 1751936356,};
enum MACRO_ckidSTREAMFORMAT {ckidSTREAMFORMAT = 1718776947,};
enum MACRO_ckidSTREAMHEADER {ckidSTREAMHEADER = 1752331379,};
enum MACRO_ecProxyDLLConfig {ecProxyDLLConfig = 50012,};
enum MACRO_ecProxyDLLSyntax {ecProxyDLLSyntax = 50009,};
enum MACRO_ecProxyDuplicate {ecProxyDuplicate = 50020,};
enum MACRO_ecProxyNotUnique {ecProxyNotUnique = 50019,};
enum MACRO_ecTargetNotValid {ecTargetNotValid = 50003,};
enum MACRO_grfdexPropCanAll {grfdexPropCanAll = 5397,grfdexPropCannotAll = 10794,};
enum MACRO_hrBFPageNotFound {hrBFPageNotFound = 0x880000C9,};
enum MACRO_hrBadDbSignature {hrBadDbSignature = 0xC8000213,};
enum MACRO_hrBufferTooSmall {hrBufferTooSmall = 0xC800040E,};
enum MACRO_hrCannotBeTagged {hrCannotBeTagged = 0xC80005F1,};
enum MACRO_hrColumnNotFound {hrColumnNotFound = 0xC80005E3,};
enum MACRO_hrDatabaseLocked {hrDatabaseLocked = 0xC80004B7,};
enum MACRO_hrDensityInvalid {hrDensityInvalid = 0xC800051B,};
enum MACRO_hrIndexCantBuild {hrIndexCantBuild = 0xC8000579,};
enum MACRO_hrIndexDuplicate {hrIndexDuplicate = 0xC800057B,};
enum MACRO_hrInvalidCountry {hrInvalidCountry = 0xC8000425,};
enum MACRO_hrInvalidTableId {hrInvalidTableId = 0xC800051E,};
enum MACRO_hrLogFileCorrupt {hrLogFileCorrupt = 0xC80001F5,};
enum MACRO_hrLogSequenceEnd {hrLogSequenceEnd = 0xC8000207,};
enum MACRO_hrMissingLogFile {hrMissingLogFile = 0xC8000210,};
enum MACRO_hrNoCurrentIndex {hrNoCurrentIndex = 0xC80005EB,};
enum MACRO_hrNoIdleActivity {hrNoIdleActivity = 0x88000422,};
enum MACRO_hrNotInitialized {hrNotInitialized = 0xC8000405,};
enum MACRO_hrObjectNotFound {hrObjectNotFound = 0xC8000519,};
enum MACRO_hrRecordNotFound {hrRecordNotFound = 0xC8000641,};
enum MACRO_hrTableDuplicate {hrTableDuplicate = 0xC8000517,};
enum MACRO_hrTermInProgress {hrTermInProgress = 0xC80003E8,};
enum MACRO_hrTooManyColumns {hrTooManyColumns = 0xC8000410,};
enum MACRO_hrTooManyIndexes {hrTooManyIndexes = 0xC80003F7,};
enum MACRO_listtypeAVIMOVIE {listtypeAVIMOVIE = 1769369453,};
enum MACRO_oledbIErrorInfo_ {oledbIErrorInfo__GetDescription = 50053,oledbIErrorInfo__GetGUID = 50054,oledbIErrorInfo__GetHelpContext = 50055,oledbIErrorInfo__GetHelpFile = 50056,oledbIErrorInfo__GetSource = 50057,};
enum MACRO_oledbIOpenRowset {oledbIOpenRowset = 50074,};
enum MACRO_oledbIRowsetInfo {oledbIRowsetInfo = 50092,};
enum MACRO_rmsSuspendRepair {rmsSuspendRepair = 0x1,rmsSuspendNotif = 0x2,};
typedef struct tagMCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMSW;
typedef struct _7300D6D0160F27FB0DC605F404D9E579 MCI_DGV_CAPTURE_PARMSA;
typedef struct _5CC485201744F683BFCAFBF5CC04CDB7 MCI_DGV_CAPTURE_PARMSW;
typedef struct _9324B80A405C3638A757CE3525837AFF MCI_DGV_QUALITY_PARMSA;
typedef struct _66B5A26201EC17B1A46E254DD42DACEF MCI_DGV_QUALITY_PARMSW;
typedef struct _EADE59A3AB4D211471738C1C0A1C48E6 MCI_DGV_RESERVE_PARMSA;
typedef struct _0FC5C6CE63995F723FAD6419C86EA56D MCI_DGV_RESERVE_PARMSW;
typedef struct _7300D6D0160F27FB0DC605F404D9E579 MCI_DGV_RESTORE_PARMSA;
typedef struct _5CC485201744F683BFCAFBF5CC04CDB7 MCI_DGV_RESTORE_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMSW;
typedef struct tagMCI_VCR_SETAUDIO_PARMS MCI_VCR_SETAUDIO_PARMS;
typedef struct tagMCI_VCR_SETTUNER_PARMS MCI_VCR_SETTUNER_PARMS;
typedef struct tagMCI_VCR_SETVIDEO_PARMS MCI_VCR_SETVIDEO_PARMS;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 MENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
typedef struct _METADATA_GETALL_RECORD METADATA_GETALL_RECORD;
typedef struct tagNMDATETIMEFORMATQUERYA NMDATETIMEFORMATQUERYA;
typedef struct tagNMDATETIMEFORMATQUERYW NMDATETIMEFORMATQUERYW;
typedef struct nms_vbxadpcmmwaveformat_tag NMS_VBXADPCMWAVEFORMAT;
typedef struct _NTMS_DRIVEINFORMATIONA NTMS_DRIVEINFORMATIONA;
typedef struct _NTMS_DRIVEINFORMATIONW NTMS_DRIVEINFORMATIONW;
typedef struct _NTMS_IEDOORINFORMATION NTMS_IEDOORINFORMATION;
typedef struct _NTMS_IEPORTINFORMATION NTMS_IEPORTINFORMATION;
enum NtmsDeallocationPolicy {NTMS_DEALLOCATE_TOSCRATCH = 0x1,};
typedef struct _ACTRL_PROPERTY_ENTRYA *PACTRL_PROPERTY_ENTRYA;
typedef struct _ACTRL_PROPERTY_ENTRYW *PACTRL_PROPERTY_ENTRYW;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 *PAM_AC3_DIALOGUE_LEVEL;
typedef struct CLUSPROP_SCSI_ADDRESS *PCLUSPROP_SCSI_ADDRESS;
typedef struct _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY *PCRYPT_TRUST_REG_ENTRY;
typedef struct _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;
typedef struct _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;
typedef struct _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;
typedef struct _IPX_STATIC_ROUTE_INFO *PIPX_STATIC_ROUTE_INFO;
typedef struct _BDE91A4D4766441856A2EB7036E539BD *PKSEVENT_TIME_INTERVAL;
typedef struct _B0BC4AADD5C9FF12157D028DEF0CCD6A *PKSTOPOLOGY_CONNECTION;
typedef struct _ADB447A89171D7A348B94130055F93A9 *PLLC_BUFFER_FREE_PARMS;
typedef struct _70FDF56272F5970FD1BEEDD1849B3C69 *PLLC_DLC_CONNECT_PARMS;
typedef struct _20E271452B0D17C3D7527FFA40499DEB *PLLC_TRANSMIT2_COMMAND;
typedef struct _LSA_OBJECT_ATTRIBUTES *PLSA_OBJECT_ATTRIBUTES;
typedef struct _LSA_TRUST_INFORMATION *PLSA_TRUST_INFORMATION;
typedef struct tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;
typedef struct _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;
typedef struct _POLICY_DNS_DOMAIN_INFO POLICY_DNS_DOMAIN_INFO;
typedef struct _POLICY_PD_ACCOUNT_INFO POLICY_PD_ACCOUNT_INFO;
typedef struct _PARTITION_INFORMATION *PPARTITION_INFORMATION;
typedef struct tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;
typedef struct _POLICY_AUDIT_LOG_INFO *PPOLICY_AUDIT_LOG_INFO;
typedef struct _POWER_DEVICE_TIMEOUTS *PPOWER_DEVICE_TIMEOUTS;
typedef struct _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;
typedef struct _PRINTPROCESSOR_CAPS_1 *PPRINTPROCESSOR_CAPS_1;
typedef struct _13AC4D5D0927D2C6C16DF20D64ACBBB3 *PREAD_USN_JOURNAL_DATA;
typedef struct _PRINTER_NOTIFY_OPTIONS PRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1W;
typedef struct _RIP_ROUTE_FILTER_INFO *PRIP_ROUTE_FILTER_INFO;
typedef struct _PROTOCOL_SPECIFIC_DATA PROTOCOL_SPECIFIC_DATA;
typedef struct _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;
typedef struct _RTR_INFO_BLOCK_HEADER *PRTR_INFO_BLOCK_HEADER;
typedef struct _SP_ENABLECLASS_PARAMS *PSP_ENABLECLASS_PARAMS;
typedef struct _SP_INSTALLWIZARD_DATA *PSP_INSTALLWIZARD_DATA;
typedef struct _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;
typedef struct _SecPkgContext_DceInfo *PSecPkgContext_DceInfo;
typedef struct _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;
typedef struct _TRANSMIT_FILE_BUFFERS *PTRANSMIT_FILE_BUFFERS;
typedef struct _TRUSTED_PASSWORD_INFO *PTRUSTED_PASSWORD_INFO;
typedef struct _USER_MODALS_INFO_1001 *PUSER_MODALS_INFO_1001;
typedef struct _USER_MODALS_INFO_1002 *PUSER_MODALS_INFO_1002;
typedef struct _USER_MODALS_INFO_1003 *PUSER_MODALS_INFO_1003;
typedef struct _USER_MODALS_INFO_1004 *PUSER_MODALS_INFO_1004;
typedef struct _USER_MODALS_INFO_1005 *PUSER_MODALS_INFO_1005;
typedef struct _USER_MODALS_INFO_1006 *PUSER_MODALS_INFO_1006;
typedef struct _USER_MODALS_INFO_1007 *PUSER_MODALS_INFO_1007;
typedef struct _WINDBG_EXTENSION_APIS *PWINDBG_EXTENSION_APIS;
typedef struct WINTRUST_CATALOG_INFO_ *PWINTRUST_CATALOG_INFO;
enum ParameterDirectionEnum {adParamUnknown = 0x0,adParamInput = 0x1,adParamOutput = 0x2,adParamInputOutput = 0x3,adParamReturnValue = 0x4,};
enum PropertyAttributesEnum {adPropNotSupported = 0x0,adPropRequired = 0x1,adPropOptional = 0x2,adPropRead = 0x200,adPropWrite = 0x400,};
typedef struct _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
typedef struct _RIP_MIB_GET_INPUT_DATA RIP_MIB_GET_INPUT_DATA;
typedef struct _RIP_MIB_SET_INPUT_DATA RIP_MIB_SET_INPUT_DATA;
typedef struct _RSVP_FILTERSPEC_V4_GPI RSVP_FILTERSPEC_V4_GPI;
typedef struct _RSVP_FILTERSPEC_V6_GPI RSVP_FILTERSPEC_V6_GPI;
typedef struct _SAP_MIB_GET_INPUT_DATA SAP_MIB_GET_INPUT_DATA;
typedef struct _SAP_MIB_SET_INPUT_DATA SAP_MIB_SET_INPUT_DATA;
typedef struct _SERVICE_TYPE_INFO_ABSA SERVICE_TYPE_INFO_ABSA;
typedef struct _SERVICE_TYPE_INFO_ABSW SERVICE_TYPE_INFO_ABSW;
typedef struct _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
typedef struct _SP_CLASSIMAGELIST_DATA SP_CLASSIMAGELIST_DATA;
typedef struct _SP_CLASSINSTALL_HEADER SP_CLASSINSTALL_HEADER;
typedef struct _SP_DETECTDEVICE_PARAMS SP_DETECTDEVICE_PARAMS;
typedef struct _SP_DEVINSTALL_PARAMS_A SP_DEVINSTALL_PARAMS_A;
typedef struct _SP_DEVINSTALL_PARAMS_W SP_DEVINSTALL_PARAMS_W;
typedef struct _SP_REMOVEDEVICE_PARAMS SP_REMOVEDEVICE_PARAMS;
typedef struct _SecPkgContext_KeyInfoA SecPkgContext_KeyInfoA;
typedef struct _SecPkgContext_KeyInfoW SecPkgContext_KeyInfoW;
typedef struct _SecPkgContext_Lifespan SecPkgContext_Lifespan;
typedef struct _SECURITY_FUNCTION_TABLE_A SecurityFunctionTableA;
typedef struct _SECURITY_FUNCTION_TABLE_W SecurityFunctionTableW;
enum ShellFolderViewOptions {SFVVO_SHOWALLOBJECTS = 0x1,SFVVO_SHOWEXTENSIONS = 0x2,SFVVO_SHOWCOMPCOLOR = 0x8,SFVVO_SHOWSYSFILES = 0x20,SFVVO_WIN95CLASSIC = 0x40,SFVVO_DOUBLECLICKINWEBVIEW = 0x80,SFVVO_DESKTOPHTML = 0x200,};
typedef struct _WIN_TRUST_SUBJECT_FILE WIN_TRUST_SUBJECT_FILE;
typedef struct _WKSTA_TRANSPORT_INFO_0 WKSTA_TRANSPORT_INFO_0;
typedef struct _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
typedef struct yamaha_adpmcwaveformat_tag YAMAHA_ADPCMWAVEFORMAT;
enum _ACL_INFORMATION_CLASS {AclRevisionInformation = 0x1,AclSizeInformation = 0x2,};
enum _AMVP_SELECT_FORMAT_BY {AMVP_DO_NOT_CARE = 0x0,AMVP_BEST_BANDWIDTH = 0x1,AMVP_INPUT_SAME_AS_OUTPUT = 0x2,};
enum _CM_ERROR_CONTROL_TYPE {IgnoreError = 0x0,NormalError = 0x1,SevereError = 0x2,CriticalError = 0x3,};
enum _D3DRMUSERVISUALREASON {D3DRMUSERVISUAL_CANSEE = 0x0,D3DRMUSERVISUAL_RENDER = 0x1,};
enum _D3DTRANSFORMSTATETYPE {D3DTRANSFORMSTATE_WORLD = 0x1,D3DTRANSFORMSTATE_VIEW = 0x2,D3DTRANSFORMSTATE_PROJECTION = 0x3,D3DTRANSFORMSTATE_FORCE_DWORD = 0x7FFFFFFF,};
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,};
struct _SecPkgContext_DceInfo {unsigned int AuthzSvc;void *pPac;};
enum __MIDL_IHlinkSite_0001 {HLINKWHICHMK_CONTAINER = 0x1,HLINKWHICHMK_BASE = 0x2,};
enum tagAM_MEDIAEVENT_FLAGS {AM_MEDIAEVENT_NONOTIFY = 0x1,};
enum tagAnalogVideoStandard {AnalogVideo_None = 0x0,AnalogVideo_NTSC_M = 0x1,AnalogVideo_NTSC_M_J = 0x2,AnalogVideo_NTSC_433 = 0x4,AnalogVideo_PAL_B = 0x10,AnalogVideo_PAL_D = 0x20,AnalogVideo_PAL_G = 0x40,AnalogVideo_PAL_H = 0x80,AnalogVideo_PAL_I = 0x100,AnalogVideo_PAL_M = 0x200,AnalogVideo_PAL_N = 0x400,AnalogVideo_PAL_60 = 0x800,AnalogVideo_SECAM_B = 0x1000,AnalogVideo_SECAM_D = 0x2000,AnalogVideo_SECAM_G = 0x4000,AnalogVideo_SECAM_H = 0x8000,AnalogVideo_SECAM_K = 0x10000,AnalogVideo_SECAM_K1 = 0x20000,AnalogVideo_SECAM_L = 0x40000,AnalogVideo_SECAM_L1 = 0x80000,};
enum tagDBPROMPTOPTIONSENUM {DBPROMPTOPTIONS_NONE = 0x0,DBPROMPTOPTIONS_WIZARDSHEET = 0x1,DBPROMPTOPTIONS_PROPERTYSHEET = 0x2,DBPROMPTOPTIONS_BROWSEONLY = 0x8,DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION = 0x10,};
enum tagINSTALLSOURCEACTION {INSTALLSOURCEACTION_ADD = 0x1,INSTALLSOURCEACTION_REMOVE = 0x2,INSTALLSOURCEACTION_REMOVEALL = 0x3,INSTALLSOURCEACTION_REMOVEALLNET = 0x4,INSTALLSOURCEACTION_REMOVEALLURL = 0x5,INSTALLSOURCEACTION_ENABLECD = 0x6,INSTALLSOURCEACTION_DISABLECD = 0x7,};
typedef struct _ACTRL_PROPERTY_ENTRYA ACTRL_PROPERTY_ENTRYA;
typedef struct _ACTRL_PROPERTY_ENTRYW ACTRL_PROPERTY_ENTRYW;
typedef unsigned int AFTP_RETURN_CODE_TYPE;
typedef unsigned int AFTP_TRACE_LEVEL_TYPE;
typedef struct _299134A1587F81C88B1AF91D3DBFCA39 AM_AC3_DIALOGUE_LEVEL;
typedef struct tagAM_SAMPLE2_PROPERTIES AM_SAMPLE2_PROPERTIES;
typedef struct tagCInterfaceProxyHeader CInterfaceProxyHeader;
enum CLUSCTL_NETWORK_CODES {CLUSCTL_NETWORK_UNKNOWN = 0x5000000,CLUSCTL_NETWORK_GET_CHARACTERISTICS = 0x5000005,CLUSCTL_NETWORK_GET_FLAGS = 0x5000009,CLUSCTL_NETWORK_GET_NAME = 0x5000029,CLUSCTL_NETWORK_GET_ID = 0x5000039,CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 0x5000051,CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 0x5000055,CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 0x5000059,CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 0x540005E,CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 0x5000061,CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 0x5000079,CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 0x500007D,CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 0x5000081,CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 0x5400086,CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 0x5000089,};
enum CLUSTER_NETWORK_STATE {ClusterNetworkStateUnknown = 0xFFFFFFFF,ClusterNetworkUnavailable = 0x0,ClusterNetworkDown = 0x1,ClusterNetworkPartitioned = 0x2,ClusterNetworkUp = 0x3,};
enum CLUSTER_PROPERTY_TYPE {CLUSPROP_TYPE_ENDMARK = 0x0,CLUSPROP_TYPE_LIST_VALUE = 0x1,CLUSPROP_TYPE_RESCLASS = 0x2,CLUSPROP_TYPE_RESERVED1 = 0x3,CLUSPROP_TYPE_NAME = 0x4,CLUSPROP_TYPE_SIGNATURE = 0x5,CLUSPROP_TYPE_SCSI_ADDRESS = 0x6,CLUSPROP_TYPE_DISK_NUMBER = 0x7,CLUSPROP_TYPE_PARTITION_INFO = 0x8,CLUSPROP_TYPE_FTSET_INFO = 0x9,CLUSPROP_TYPE_USER = 0x8000,};
enum CLUSTER_RESOURCE_ENUM {CLUSTER_RESOURCE_ENUM_DEPENDS = 0x1,CLUSTER_RESOURCE_ENUM_PROVIDES = 0x2,CLUSTER_RESOURCE_ENUM_NODES = 0x4,CLUSTER_RESOURCE_ENUM_ALL = 0x7,};
typedef struct _CMInvokeCommandInfoEx CMINVOKECOMMANDINFOEX;
typedef signed int CM_CONVERSATION_STATE;
typedef signed int CM_DATA_RECEIVED_TYPE;
typedef struct contres_cr10waveformat_tag CONTRESCR10WAVEFORMAT;
typedef struct _CRYPT_SEQUENCE_OF_ANY CRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_TRUST_REG_ENTRY CRYPT_TRUST_REG_ENTRY;
typedef struct _CTL_FIND_SUBJECT_PARA CTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA CTL_VERIFY_USAGE_PARA;
struct Classjava_lang_String;
struct ClusNodeNetInterfaces {struct ClusNodeNetInterfacesVtbl *lpVtbl;};
enum DBACCESSORFLAGSENUM25 {DBACCESSOR_INHERITED = 0x10,};
enum DBCOLUMNDESCFLAGSENUM {DBCOLUMNDESCFLAGS_TYPENAME = 0x1,DBCOLUMNDESCFLAGS_ITYPEINFO = 0x2,DBCOLUMNDESCFLAGS_PROPERTIES = 0x4,DBCOLUMNDESCFLAGS_CLSID = 0x8,DBCOLUMNDESCFLAGS_COLSIZE = 0x10,DBCOLUMNDESCFLAGS_DBCID = 0x20,DBCOLUMNDESCFLAGS_WTYPE = 0x40,DBCOLUMNDESCFLAGS_PRECISION = 0x80,DBCOLUMNDESCFLAGS_SCALE = 0x100,};
enum DBINDEX_COL_ORDERENUM {DBINDEX_COL_ORDER_ASC = 0x0,DBINDEX_COL_ORDER_DESC = 0x1,};
typedef struct _DEV_BROADCAST_DEVNODE DEV_BROADCAST_DEVNODE;
typedef struct _D74CC9719E317AD446E2F62991DAE0C8 DPMSG_ADDGROUPTOGROUP;
typedef struct _DSETUP_CB_UPGRADEINFO DSETUP_CB_UPGRADEINFO;
typedef struct tagDVD_PLAYBACK_LOCATION DVD_PLAYBACK_LOCATION;
struct DispIHTMLBlockElement {struct DispIHTMLBlockElementVtbl *lpVtbl;};
struct DispIHTMLDListElement {struct DispIHTMLDListElementVtbl *lpVtbl;};
struct DispIHTMLEmbedElement {struct DispIHTMLEmbedElementVtbl *lpVtbl;};
struct DispIHTMLFrameElement {struct DispIHTMLFrameElementVtbl *lpVtbl;};
struct DispIHTMLLabelElement {struct DispIHTMLLabelElementVtbl *lpVtbl;};
struct DispIHTMLOListElement {struct DispIHTMLOListElementVtbl *lpVtbl;};
struct DispIHTMLStyleElement {struct DispIHTMLStyleElementVtbl *lpVtbl;};
struct DispIHTMLTableCaption {struct DispIHTMLTableCaptionVtbl *lpVtbl;};
struct DispIHTMLTableSection {struct DispIHTMLTableSectionVtbl *lpVtbl;};
struct DispIHTMLTitleElement {struct DispIHTMLTitleElementVtbl *lpVtbl;};
struct DispIHTMLUListElement {struct DispIHTMLUListElementVtbl *lpVtbl;};
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
typedef struct __MIDL_IH26XEncodeOptions_0001 ENCODE_OPTIONS_VALUES;
typedef struct _EXTENDED_NOTIFICATION EXTENDED_NOTIFICATION;
typedef struct _FILESYSTEM_STATISTICS FILESYSTEM_STATISTICS;
typedef void ( *GLUtessVertexDataProc)(void *, void *);
typedef struct _1CF5A01E195BE25BEDA13B6A0EE28B07 GOPHER_ATTRIBUTE_TYPE;
struct HTAPIDIALOGINSTANCE__ {int unused;};
struct HTMLFiltersCollection;
struct HTMLFormElementEvents {struct HTMLFormElementEventsVtbl *lpVtbl;};
struct HTMLLinkElementEvents {struct HTMLLinkElementEventsVtbl *lpVtbl;};
struct IADsAccessControlList {struct IADsAccessControlListVtbl *lpVtbl;};
struct IADsServiceOperations {struct IADsServiceOperationsVtbl *lpVtbl;};
struct IAMAnalogVideoDecoder {struct IAMAnalogVideoDecoderVtbl *lpVtbl;};
struct IAMAnalogVideoEncoder {struct IAMAnalogVideoEncoderVtbl *lpVtbl;};
struct IAMDevMemoryAllocator {struct IAMDevMemoryAllocatorVtbl *lpVtbl;};
struct IAMVfwCompressDialogs {struct IAMVfwCompressDialogsVtbl *lpVtbl;};
struct IASQLOLEConfiguration {struct IASQLOLEConfigurationVtbl *lpVtbl;};
struct IASQLOLEHistoryFilter {struct IASQLOLEHistoryFilterVtbl *lpVtbl;};
struct IASQLOLERemoteServers {struct IASQLOLERemoteServersVtbl *lpVtbl;};
struct IASQLOLESubscriptions {struct IASQLOLESubscriptionsVtbl *lpVtbl;};
struct IDDVideoPortContainer {struct IDDVideoPortContainerVtbl *lpVtbl;};
struct IDirect3DRMFrameArray {struct IDirect3DRMFrameArrayVtbl *lpVtbl;};
struct IDirect3DRMLightArray {struct IDirect3DRMLightArrayVtbl *lpVtbl;};
struct IDirect3DRMUserVisual {struct IDirect3DRMUserVisualVtbl *lpVtbl;};
struct IDtcLuRecoveryFactory {struct IDtcLuRecoveryFactoryVtbl *lpVtbl;};
struct IDtcToXaHelperFactory {struct IDtcToXaHelperFactoryVtbl *lpVtbl;};
struct IEnumConnectionPoints {struct IEnumConnectionPointsVtbl *lpVtbl;};
struct IEnumOleDocumentViews {struct IEnumOleDocumentViewsVtbl *lpVtbl;};
struct IEnumRemoteFloatValue {struct IEnumRemoteFloatValueVtbl *lpVtbl;};
struct IEnumRemoteShortValue {struct IEnumRemoteShortValueVtbl *lpVtbl;};
struct IExchExtMessageEvents {struct IExchExtMessageEventsVtbl *lpVtbl;};
struct IExchExtSessionEvents {struct IExchExtSessionEventsVtbl *lpVtbl;};
struct IExchangeFastTransfer {struct IExchangeFastTransferVtbl *lpVtbl;};
struct IGetClusterObjectInfo {struct IGetClusterObjectInfoVtbl *lpVtbl;};
struct IGetContextProperties {struct IGetContextPropertiesVtbl *lpVtbl;};
struct IGlobalInterfaceTable {struct IGlobalInterfaceTableVtbl *lpVtbl;};
struct IHTMLInputFileElement {struct IHTMLInputFileElementVtbl *lpVtbl;};
struct IHTMLInputTextElement {struct IHTMLInputTextElementVtbl *lpVtbl;};
struct IHTMLTextRangeMetrics {struct IHTMLTextRangeMetricsVtbl *lpVtbl;};
struct IInternetProtocolInfo {struct IInternetProtocolInfoVtbl *lpVtbl;};
struct IInternetProtocolRoot {struct IInternetProtocolRootVtbl *lpVtbl;};
struct IInternetProtocolSink {struct IInternetProtocolSinkVtbl *lpVtbl;};
struct IInternetThreadSwitch {struct IInternetThreadSwitchVtbl *lpVtbl;};
struct IJavaEnumRemoteObject {struct IJavaEnumRemoteObjectVtbl *lpVtbl;};
struct IJavaEnumRemoteThread {struct IJavaEnumRemoteThreadVtbl *lpVtbl;};
typedef struct _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
typedef struct _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
typedef struct _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
struct IMtsTransactionEvents {struct IMtsTransactionEventsVtbl *lpVtbl;};
typedef struct _2217024DFB55A6F4C8452C0D2E818FB7 INTERNET_ASYNC_RESULT;
typedef struct _D692CA7460863103343173F071E8F66B INTERNET_VERSION_INFO;
typedef struct _IPX_STATIC_ROUTE_INFO IPX_STATIC_ROUTE_INFO;
struct IRemoteContainerField {struct IRemoteContainerFieldVtbl *lpVtbl;};
struct IRowsetWithParameters {struct IRowsetWithParametersVtbl *lpVtbl;};
struct ISQLRequestDiagFields {struct ISQLRequestDiagFieldsVtbl *lpVtbl;};
struct ISpecifyPropertyPages {struct ISpecifyPropertyPagesVtbl *lpVtbl;};
struct ITConferenceDirectory {struct ITConferenceDirectoryVtbl *lpVtbl;};
struct ITransactionContextEx {struct ITransactionContextExVtbl *lpVtbl;};
struct ITransactionDispenser {struct ITransactionDispenserVtbl *lpVtbl;};
struct IXMLElementCollection {struct IXMLElementCollectionVtbl *lpVtbl;};
typedef struct _ACEAE6F707210F0DF226FE321F0C4CF6 JAVACLASSRESOURCEINFO;
typedef struct _BDE91A4D4766441856A2EB7036E539BD KSEVENT_TIME_INTERVAL;
typedef struct _B0BC4AADD5C9FF12157D028DEF0CCD6A KSTOPOLOGY_CONNECTION;
typedef struct lineagentactivitylist_tag LINEAGENTACTIVITYLIST;
typedef struct linemediacontroldigit_tag LINEMEDIACONTROLDIGIT;
typedef struct linemediacontrolmedia_tag LINEMEDIACONTROLMEDIA;
typedef struct _ADB447A89171D7A348B94130055F93A9 LLC_BUFFER_FREE_PARMS;
typedef struct _F867B4C5F172AA4F41F7BD1464BC5D23 LLC_CONTIGUOUS_BUFFER;
typedef struct _70FDF56272F5970FD1BEEDD1849B3C69 LLC_DLC_CONNECT_PARMS;
typedef struct _20E271452B0D17C3D7527FFA40499DEB LLC_TRANSMIT2_COMMAND;
typedef struct ads_searchpref_info *LPADS_SEARCHPREF_INFO;
typedef struct IASQLOLEBulkCopySink *LPASQLOLEBULKCOPYSINK;
typedef struct IASQLOLEConfigValues *LPASQLOLECONFIGVALUES;
typedef struct IASQLOLEPublications *LPASQLOLEPUBLICATIONS;
typedef struct IASQLOLEQueryResults *LPASQLOLEQUERYRESULTS;
typedef struct IASQLOLERemoteLogins *LPASQLOLEREMOTELOGINS;
typedef struct IASQLOLERemoteServer *LPASQLOLEREMOTESERVER;
typedef struct IASQLOLEServerGroups *LPASQLOLESERVERGROUPS;
typedef struct IASQLOLESubscription *LPASQLOLESUBSCRIPTION;
typedef struct IASQLOLETransferSink *LPASQLOLETRANSFERSINK;
typedef  DIDEVICEOBJECTDATA *LPCDIDEVICEOBJECTDATA;
typedef struct _CMINVOKECOMMANDINFO *LPCMINVOKECOMMANDINFO;
typedef struct _D3DFINDDEVICERESULT *LPD3DFINDDEVICERESULT;
typedef struct _D3DFINDDEVICESEARCH *LPD3DFINDDEVICESEARCH;
typedef struct IDirect3DRMAnimation *LPDIRECT3DRMANIMATION;
typedef struct IDirect3DRMFaceArray *LPDIRECT3DRMFACEARRAY;
typedef struct IDirect3DRMWinDevice *LPDIRECT3DRMWINDEVICE;
typedef struct IDirectDrawVideoPort *LPDIRECTDRAWVIDEOPORT;
typedef struct IDirectInputDevice2A *LPDIRECTINPUTDEVICE2A;
typedef struct IDirectInputDevice2W *LPDIRECTINPUTDEVICE2W;
typedef struct IDirectSound3DBuffer *LPDIRECTSOUND3DBUFFER;
typedef struct _DIRECTXREGISTERAPPA *LPDIRECTXREGISTERAPPA;
typedef struct _DIRECTXREGISTERAPPW *LPDIRECTXREGISTERAPPW;
typedef struct _DPLDATA_PLAYERSCORE *LPDPLDATA_PLAYERSCORE;
typedef struct _5960E7280C1CD3895029C6009DE30C9A *LPDPMSG_SECUREMESSAGE;
typedef IEnumRemoteByteValue *LPENUMREMOTEBYTEVALUE;
typedef IEnumRemoteCharValue *LPENUMREMOTECHARVALUE;
typedef IEnumRemoteLongValue *LPENUMREMOTELONGVALUE;
typedef struct IExchangeManageStore *LPEXCHANGEMANAGESTORE;
typedef struct IExchangeModifyTable *LPEXCHANGEMODIFYTABLE;
typedef struct _BE2AAA237DCCFCC05A1ABA31135D92CC *LPEXCHEXTCHOOSEFOLDER;
typedef struct _IMAGELISTDRAWPARAMS *LPIMAGELISTDRAWPARAMS;
typedef struct _C3D536761911E1B34BFF5DAB2CC3A2E9 *LPINTERNET_PROXY_INFO;
typedef struct lineagentgroupentry_tag *LPLINEAGENTGROUPENTRY;
typedef struct linetranslateoutput_tag *LPLINETRANSLATEOUTPUT;
typedef struct _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;
typedef struct IDirect3DRMDevice2 **LPLPDIRECT3DRMDEVICE2;
typedef struct IDirect3DRMTexture **LPLPDIRECT3DRMTEXTURE;
typedef struct _7ED3E3B28A0D58F6B953DC5EB3956646 *LPMAPIFORMPROPENUMVAL;
typedef struct tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
typedef IMLangConvertCharset *LPMLANGCONVERTCHARSET;
typedef OLEDBSimpleProvider *LPOLEDBSimpleProvider;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
typedef IOleUILinkContainerA *LPOLEUILINKCONTAINERA;
typedef IOleUILinkContainerW *LPOLEUILINKCONTAINERW;
typedef IPerPropertyBrowsing *LPPERPROPERTYBROWSING;
typedef IPersistPropertyBag2 *LPPERSISTPROPERTYBAG2;
typedef struct _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
typedef IRemoteBooleanObject *LPREMOTEBOOLEANOBJECT;
typedef struct _REPL_EDIR_INFO_1000 *LPREPL_EDIR_INFO_1000;
typedef struct _REPL_EDIR_INFO_1001 *LPREPL_EDIR_INFO_1001;
typedef IRichEditOleCallback *LPRICHEDITOLECALLBACK;
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
typedef struct _SOCKET_ADDRESS_LIST *LPSOCKET_ADDRESS_LIST;
typedef struct _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;
typedef struct _LSA_OBJECT_ATTRIBUTES LSA_OBJECT_ATTRIBUTES;
typedef struct _LSA_TRUST_INFORMATION LSA_TRUST_INFORMATION;
enum MACRO_ACCESS_ACE_FLAG {SUCCESSFUL_ACCESS_ACE_FLAG = 0x40,FAILED_ACCESS_ACE_FLAG = 0x80,};
enum MACRO_ACMFILTERCHOOSE {ACMFILTERCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFILTERCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT = 0x40,ACMFILTERCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMFORMATCHOOSE {ACMFORMATCHOOSE_STYLEF_SHOWHELP = 0x4,ACMFORMATCHOOSE_STYLEF_ENABLEHOOK = 0x8,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE = 0x10,ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE = 0x20,ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT = 0x40,ACMFORMATCHOOSE_STYLEF_CONTEXTHELP = 0x80,};
enum MACRO_ACMSTREAMHEADER {ACMSTREAMHEADER_STATUSF_DONE = 0x10000,ACMSTREAMHEADER_STATUSF_PREPARED = 0x20000,ACMSTREAMHEADER_STATUSF_INQUEUE = 0x100000,};
enum MACRO_ACM_STREAMOPENF {ACM_STREAMOPENF_QUERY = 0x1,ACM_STREAMOPENF_ASYNC = 0x2,ACM_STREAMOPENF_NONREALTIME = 0x4,ACM_STREAMSIZEF_SOURCE = 0x0,ACM_STREAMSIZEF_DESTINATION = 0x1,ACM_STREAMSIZEF_QUERYMASK = 0xF,ACM_STREAMCONVERTF_BLOCKALIGN = 0x4,ACM_STREAMCONVERTF_START = 0x10,ACM_STREAMCONVERTF_END = 0x20,};
enum MACRO_AGENTAUDIOERROR {AGENTAUDIOERROR_DEVICE = -2147212287,AGENTAUDIOERROR_TTSENUMERATOR = -2147212286,AGENTAUDIOERROR_TTSSELECT = -2147212285,AGENTAUDIOERROR_TTSREGISTER = -2147212284,AGENTAUDIOERROR_TTSUNEXPECTED = -2147212283,AGENTAUDIOERROR_LWVINIT = -2147212282,AGENTAUDIOERROR_LWVREGISTER = -2147212281,AGENTAUDIOERROR_LWVUNEXPECTED = -2147212280,};
enum MACRO_AGENTVOICEERROR {AGENTVOICEERROR_COULDNTSTARTDEVICE = -2147212543,AGENTVOICEERROR_NOTINSTALLED = -2147212542,AGENTVOICEERROR_NOTINITIALIZED = -2147212541,AGENTVOICEERROR_INVALIDMENU = -2147212540,AGENTVOICEERROR_UNCLOSEDALTERNATIVE = -2147212539,AGENTVOICEERROR_UNCLOSEDOPTIONAL = -2147212538,AGENTVOICEERROR_UNEXPECTEDENDOFALTERNATIVE = -2147212537,AGENTVOICEERROR_UNEXPECTEDENDOFOPTIONAL = -2147212536,AGENTVOICEERROR_UNEXPECTEDALTERNATIVE = -2147212535,AGENTVOICEERROR_NOSRMODE = -2147212534,AGENTVOICEERROR_SRMODENOTFOUND = -2147212533,AGENTVOICEERROR_SPEECHDISABLED = -2147212532,};
enum MACRO_ATTRIBUTEBUTTON {ATTRIBUTEBUTTON_UP = 2,ATTRIBUTEBUTTON_MOUSEDOWN = 3,ATTRIBUTEBUTTON_DISABLED = 4,ATTRIBUTEBUTTON_DOWN = 11,ATTRIBUTEBUTTON_INDETERMINATE = 10,ATTRIBUTEBUTTON_DOWNDISABLED = 13,};
enum MACRO_CERT_CONFIDENCE {CERT_CONFIDENCE_SIG = 0x10000000,CERT_CONFIDENCE_TIME = 0x1000000,CERT_CONFIDENCE_TIMENEST = 0x100000,CERT_CONFIDENCE_AUTHIDEXT = 0x10000,CERT_CONFIDENCE_HIGHEST = 0x11110000,};
enum MACRO_CLUSCTL_CONTROL {CLUSCTL_CONTROL_CODE_MASK = 0x3FFFFF,CLUSCTL_OBJECT_MASK = 0xFF,CLUSCTL_ACCESS_MODE_MASK = 0x3,};
enum MACRO_COLOR_HUESCROLL {COLOR_HUESCROLL = 700,COLOR_SATSCROLL = 701,COLOR_LUMSCROLL = 702,COLOR_HUE = 703,COLOR_SAT = 704,COLOR_LUM = 705,COLOR_RED = 706,COLOR_GREEN = 707,COLOR_BLUE = 708,COLOR_CURRENT = 709,COLOR_RAINBOW = 710,COLOR_SAVE = 711,COLOR_ADD = 712,COLOR_SOLID = 713,COLOR_TUNE = 714,COLOR_SCHEMES = 715,COLOR_ELEMENT = 716,COLOR_SAMPLES = 717,COLOR_PALETTE = 718,COLOR_MIX = 719,COLOR_BOX1 = 720,COLOR_CUSTOM1 = 721,COLOR_HUEACCEL = 723,COLOR_SATACCEL = 724,COLOR_LUMACCEL = 725,COLOR_REDACCEL = 726,COLOR_GREENACCEL = 727,COLOR_BLUEACCEL = 728,COLOR_SOLID_LEFT = 730,COLOR_SOLID_RIGHT = 731,};
enum MACRO_COLOR_SCROLLBAR {COLOR_SCROLLBAR = 0,COLOR_BACKGROUND = 1,COLOR_ACTIVECAPTION = 2,COLOR_INACTIVECAPTION = 3,COLOR_MENU = 4,COLOR_WINDOW = 5,COLOR_WINDOWFRAME = 6,COLOR_MENUTEXT = 7,COLOR_WINDOWTEXT = 8,COLOR_CAPTIONTEXT = 9,COLOR_ACTIVEBORDER = 10,COLOR_INACTIVEBORDER = 11,COLOR_APPWORKSPACE = 12,COLOR_HIGHLIGHT = 13,COLOR_HIGHLIGHTTEXT = 14,COLOR_BTNFACE = 15,COLOR_BTNSHADOW = 16,COLOR_GRAYTEXT = 17,COLOR_BTNTEXT = 18,COLOR_INACTIVECAPTIONTEXT = 19,COLOR_BTNHIGHLIGHT = 20,COLOR_3DDKSHADOW = 21,COLOR_3DLIGHT = 22,COLOR_INFOTEXT = 23,COLOR_INFOBK = 24,COLOR_HOTLIGHT = 26,COLOR_GRADIENTACTIVECAPTION = 27,COLOR_GRADIENTINACTIVECAPTION = 28,COLOR_DESKTOP = 1,COLOR_3DFACE = 15,COLOR_3DSHADOW = 16,COLOR_3DHIGHLIGHT = 20,COLOR_3DHILIGHT = 20,COLOR_BTNHILIGHT = 20,};
enum MACRO_CONTROLCALLBACK {CONTROLCALLBACK_PREROLL = 1,CONTROLCALLBACK_CAPTURING = 2,};
enum MACRO_COPY_SUBFOLDERS {COPY_SUBFOLDERS = 0x10,};
enum MACRO_D3DPTEXTURECAPS {D3DPTEXTURECAPS_PERSPECTIVE = 0x1,D3DPTEXTURECAPS_POW2 = 0x2,D3DPTEXTURECAPS_ALPHA = 0x4,D3DPTEXTURECAPS_TRANSPARENCY = 0x8,D3DPTEXTURECAPS_BORDER = 0x10,D3DPTEXTURECAPS_SQUAREONLY = 0x20,};
enum MACRO_D3DPTFILTERCAPS {D3DPTFILTERCAPS_NEAREST = 0x1,D3DPTFILTERCAPS_LINEAR = 0x2,D3DPTFILTERCAPS_MIPNEAREST = 0x4,D3DPTFILTERCAPS_MIPLINEAR = 0x8,D3DPTFILTERCAPS_LINEARMIPNEAREST = 0x10,D3DPTFILTERCAPS_LINEARMIPLINEAR = 0x20,};
enum MACRO_D3DRMPMESHEVENT {D3DRMPMESHEVENT_BASEMESH = 0x1,D3DRMPMESHEVENT_COMPLETE = 0x2,};
enum MACRO_D3DRMRENDERMODE {D3DRMRENDERMODE_BLENDEDTRANSPARENCY = 1,D3DRMRENDERMODE_SORTEDTRANSPARENCY = 2,};
enum MACRO_DAPIMSG_READING {DAPIMSG_READING = 0xD,DAPIMSG_PROGRESS_TITLE = 0xE,};
enum MACRO_DISPID_AUTOSIZE {DISPID_AUTOSIZE = -500,DISPID_BACKCOLOR = -501,DISPID_BACKSTYLE = -502,DISPID_BORDERCOLOR = -503,DISPID_BORDERSTYLE = -504,DISPID_BORDERWIDTH = -505,DISPID_DRAWMODE = -507,DISPID_DRAWSTYLE = -508,DISPID_DRAWWIDTH = -509,DISPID_FILLCOLOR = -510,DISPID_FILLSTYLE = -511,DISPID_FONT = -512,DISPID_FORECOLOR = -513,DISPID_ENABLED = -514,DISPID_HWND = -515,DISPID_TABSTOP = -516,DISPID_TEXT = -517,DISPID_CAPTION = -518,DISPID_BORDERVISIBLE = -519,DISPID_APPEARANCE = -520,DISPID_MOUSEPOINTER = -521,DISPID_MOUSEICON = -522,DISPID_PICTURE = -523,DISPID_VALID = -524,DISPID_LISTINDEX = -526,DISPID_SELECTED = -527,DISPID_LIST = -528,DISPID_COLUMN = -529,DISPID_LISTCOUNT = -531,DISPID_MULTISELECT = -532,DISPID_MAXLENGTH = -533,DISPID_PASSWORDCHAR = -534,DISPID_SCROLLBARS = -535,DISPID_WORDWRAP = -536,DISPID_MULTILINE = -537,DISPID_NUMBEROFROWS = -538,DISPID_NUMBEROFCOLUMNS = -539,DISPID_DISPLAYSTYLE = -540,DISPID_GROUPNAME = -541,DISPID_IMEMODE = -542,DISPID_ACCELERATOR = -543,DISPID_ENTERKEYBEHAVIOR = -544,DISPID_TABKEYBEHAVIOR = -545,DISPID_SELTEXT = -546,DISPID_SELSTART = -547,DISPID_SELLENGTH = -548,DISPID_REFRESH = -550,DISPID_DOCLICK = -551,DISPID_ABOUTBOX = -552,DISPID_ADDITEM = -553,DISPID_CLEAR = -554,DISPID_REMOVEITEM = -555,DISPID_CLICK = -600,DISPID_DBLCLICK = -601,DISPID_KEYDOWN = -602,DISPID_KEYPRESS = -603,DISPID_KEYUP = -604,DISPID_MOUSEDOWN = -605,DISPID_MOUSEMOVE = -606,DISPID_MOUSEUP = -607,DISPID_ERROREVENT = -608,DISPID_CLICK_VALUE = -610,DISPID_RIGHTTOLEFT = -611,DISPID_TOPTOBOTTOM = -612,DISPID_AMBIENT_BACKCOLOR = -701,DISPID_AMBIENT_DISPLAYNAME = -702,DISPID_AMBIENT_FONT = -703,DISPID_AMBIENT_FORECOLOR = -704,DISPID_AMBIENT_LOCALEID = -705,DISPID_AMBIENT_MESSAGEREFLECT = -706,DISPID_AMBIENT_SCALEUNITS = -707,DISPID_AMBIENT_TEXTALIGN = -708,DISPID_AMBIENT_USERMODE = -709,DISPID_AMBIENT_UIDEAD = -710,DISPID_AMBIENT_SHOWGRABHANDLES = -711,DISPID_AMBIENT_SHOWHATCHING = -712,DISPID_AMBIENT_DISPLAYASDEFAULT = -713,DISPID_AMBIENT_SUPPORTSMNEMONICS = -714,DISPID_AMBIENT_AUTOCLIP = -715,DISPID_AMBIENT_APPEARANCE = -716,DISPID_AMBIENT_PALETTE = -726,DISPID_AMBIENT_RIGHTTOLEFT = -732,DISPID_AMBIENT_TOPTOBOTTOM = -733,DISPID_Name = -800,DISPID_Delete = -801,DISPID_Object = -802,DISPID_Parent = -803,DISPID_FONT_NAME = 0,DISPID_FONT_SIZE = 2,DISPID_FONT_BOLD = 3,DISPID_FONT_ITALIC = 4,DISPID_FONT_UNDER = 5,DISPID_FONT_STRIKE = 6,DISPID_FONT_WEIGHT = 7,DISPID_FONT_CHARSET = 8,DISPID_FONT_CHANGED = 9,DISPID_PICT_HANDLE = 0,DISPID_PICT_HPAL = 2,DISPID_PICT_TYPE = 3,DISPID_PICT_WIDTH = 4,DISPID_PICT_HEIGHT = 5,DISPID_PICT_RENDER = 6,};
enum MACRO_DI_REMOVEDEVICE {DI_REMOVEDEVICE_GLOBAL = 0x1,DI_REMOVEDEVICE_CONFIGSPECIFIC = 0x2,DI_UNREMOVEDEVICE_CONFIGSPECIFIC = 0x2,};
enum MACRO_DOUBLE_EXPONENT {DOUBLE_EXPONENT_BIAS = 1023,};
enum MACRO_DOUBLE_INFINITY {DOUBLE_INFINITY_VALUE_HIGH = 0x7FF00000,DOUBLE_INFINITY_VALUE_LOW = 0x0,DOUBLE_MAXIMUM_VALUE = 0x7FEFFFFFFFFFFFFF,DOUBLE_INFINITY_VALUE = 0x7FF0000000000000,DOUBLE_QUIET_NAN_VALUE = 0xFFF8000000000000,};
enum MACRO_DPSYS_ADDPLAYER {DPSYS_ADDPLAYER = 0x3,DPSYS_DELETEPLAYER = 0x5,DPSYS_DELETEGROUP = 0x20,DPSYS_DELETEPLAYERFROMGRP = 0x21,DPSYS_CONNECT = 0x484B,};
enum MACRO_DRAWPATTERNRECT {DRAWPATTERNRECT = 25,};
enum MACRO_DUPLICATE_DEREG {DUPLICATE_DEREG = 0x7,};
enum MACRO_EDKEVENT_CANNOT {EDKEVENT_CANNOT_INIT_MAPI = 0xE0000007,};
enum MACRO_FACILITY_SYSTEM {FACILITY_SYSTEM = 0x0,FACILITY_EDB = 0x800,FACILITY_BACKUP = 0x7FF,};
enum MACRO_FLOODFILLBORDER {FLOODFILLBORDER = 0,FLOODFILLSURFACE = 1,CCHDEVICENAME = 32,};
enum MACRO_FM_GETDRIVEINFO {FM_GETDRIVEINFO = 1537,FM_GETFILESEL = 1540,FM_GETFILESELLFN = 1541,};
enum MACRO_GENERATE_METHOD {GENERATE_METHOD_EXACT = 0,GENERATE_METHOD_PREFIX = 1,GENERATE_METHOD_INFLECT = 2,};
enum MACRO_GETPHYSPAGESIZE {GETPHYSPAGESIZE = 12,};
enum MACRO_GETSETPAPERBINS {GETSETPAPERBINS = 29,};
enum MACRO_IDS_DESCRIPTION {IDS_DESCRIPTION = 1,};
enum MACRO_IDS_IORESULTNEW {IDS_IORESULTNEW = 32400,IDS_IORESULTNEWICON = 32401,IDS_IORESULTFROMFILE1 = 32402,IDS_IORESULTFROMFILE2 = 32403,IDS_IORESULTFROMFILEICON2 = 32404,IDS_IORESULTLINKFILE1 = 32405,IDS_IORESULTLINKFILE2 = 32406,IDS_IORESULTLINKFILEICON1 = 32407,IDS_IORESULTLINKFILEICON2 = 32408,};
enum MACRO_IDS_PSPASTEDATA {IDS_PSPASTEDATA = 32410,IDS_PSPASTEOBJECT = 32411,IDS_PSPASTEOBJECTASICON = 32412,IDS_PSPASTELINKDATA = 32413,IDS_PSPASTELINKOBJECT = 32414,IDS_PSPASTELINKOBJECTASICON = 32415,IDS_PSNONOLE = 32416,IDS_PSUNKNOWNTYPE = 32417,IDS_PSUNKNOWNSRC = 32418,IDS_PSUNKNOWNAPP = 32419,};
enum MACRO_IIS_MD_LOG_LAST {IIS_MD_LOG_LAST = 4014,};
enum MACRO_INTERFACE_INDEX {MAX_INTERFACE_INDEX = 0xFFFFFFFE,GLOBAL_INTERFACE_INDEX = 0xFFFFFFFF,};
enum MACRO_INTERNET_ACCESS {PRE_CONFIG_INTERNET_ACCESS = 0,LOCAL_INTERNET_ACCESS = 1,CERN_PROXY_INTERNET_ACCESS = 3,};
enum MACRO_INTERNET_OPTION {INTERNET_OPTION_CALLBACK = 1,INTERNET_OPTION_CONNECT_TIMEOUT = 2,INTERNET_OPTION_CONNECT_RETRIES = 3,INTERNET_OPTION_CONNECT_BACKOFF = 4,INTERNET_OPTION_SEND_TIMEOUT = 5,INTERNET_OPTION_CONTROL_SEND_TIMEOUT = 5,INTERNET_OPTION_RECEIVE_TIMEOUT = 6,INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT = 6,INTERNET_OPTION_DATA_SEND_TIMEOUT = 7,INTERNET_OPTION_DATA_RECEIVE_TIMEOUT = 8,INTERNET_OPTION_HANDLE_TYPE = 9,INTERNET_OPTION_LISTEN_TIMEOUT = 11,INTERNET_OPTION_READ_BUFFER_SIZE = 12,INTERNET_OPTION_WRITE_BUFFER_SIZE = 13,INTERNET_OPTION_ASYNC_ID = 15,INTERNET_OPTION_ASYNC_PRIORITY = 16,INTERNET_OPTION_PARENT_HANDLE = 21,INTERNET_OPTION_KEEP_CONNECTION = 22,INTERNET_OPTION_REQUEST_FLAGS = 23,INTERNET_OPTION_EXTENDED_ERROR = 24,INTERNET_OPTION_OFFLINE_MODE = 26,INTERNET_OPTION_CACHE_STREAM_HANDLE = 27,INTERNET_OPTION_USERNAME = 28,INTERNET_OPTION_PASSWORD = 29,INTERNET_OPTION_ASYNC = 30,INTERNET_OPTION_SECURITY_FLAGS = 31,INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT = 32,INTERNET_OPTION_DATAFILE_NAME = 33,INTERNET_OPTION_URL = 34,INTERNET_OPTION_SECURITY_CERTIFICATE = 35,INTERNET_OPTION_SECURITY_KEY_BITNESS = 36,INTERNET_OPTION_REFRESH = 37,INTERNET_OPTION_PROXY = 38,INTERNET_OPTION_SETTINGS_CHANGED = 39,INTERNET_OPTION_VERSION = 40,INTERNET_OPTION_USER_AGENT = 41,INTERNET_OPTION_END_BROWSER_SESSION = 42,INTERNET_OPTION_PROXY_USERNAME = 43,INTERNET_OPTION_PROXY_PASSWORD = 44,INTERNET_OPTION_CONTEXT_VALUE = 45,INTERNET_OPTION_CONNECT_LIMIT = 46,INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT = 47,INTERNET_OPTION_POLICY = 48,INTERNET_OPTION_DISCONNECTED_TIMEOUT = 49,INTERNET_OPTION_CONNECTED_STATE = 50,INTERNET_OPTION_IDLE_STATE = 51,INTERNET_OPTION_OFFLINE_SEMANTICS = 52,INTERNET_OPTION_SECONDARY_CACHE_KEY = 53,INTERNET_OPTION_CALLBACK_FILTER = 54,INTERNET_OPTION_CONNECT_TIME = 55,INTERNET_OPTION_SEND_THROUGHPUT = 56,INTERNET_OPTION_RECEIVE_THROUGHPUT = 57,INTERNET_OPTION_REQUEST_PRIORITY = 58,INTERNET_OPTION_HTTP_VERSION = 59,INTERNET_OPTION_RESET_URLCACHE_SESSION = 60,INTERNET_OPTION_ERROR_MASK = 62,INTERNET_FIRST_OPTION = 1,INTERNET_LAST_OPTION = 62,INTERNET_PRIORITY_FOREGROUND = 1000,INTERNET_HANDLE_TYPE_INTERNET = 1,INTERNET_HANDLE_TYPE_CONNECT_FTP = 2,INTERNET_HANDLE_TYPE_CONNECT_GOPHER = 3,INTERNET_HANDLE_TYPE_CONNECT_HTTP = 4,INTERNET_HANDLE_TYPE_FTP_FIND = 5,INTERNET_HANDLE_TYPE_FTP_FIND_HTML = 6,INTERNET_HANDLE_TYPE_FTP_FILE = 7,INTERNET_HANDLE_TYPE_FTP_FILE_HTML = 8,INTERNET_HANDLE_TYPE_GOPHER_FIND = 9,INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML = 10,INTERNET_HANDLE_TYPE_GOPHER_FILE = 11,INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML = 12,INTERNET_HANDLE_TYPE_HTTP_REQUEST = 13,};
enum MACRO_INTERNET_STATUS {INTERNET_STATUS_RESOLVING_NAME = 10,INTERNET_STATUS_NAME_RESOLVED = 11,INTERNET_STATUS_CONNECTING_TO_SERVER = 20,INTERNET_STATUS_CONNECTED_TO_SERVER = 21,INTERNET_STATUS_SENDING_REQUEST = 30,INTERNET_STATUS_REQUEST_SENT = 31,INTERNET_STATUS_RECEIVING_RESPONSE = 40,INTERNET_STATUS_RESPONSE_RECEIVED = 41,INTERNET_STATUS_CTL_RESPONSE_RECEIVED = 42,INTERNET_STATUS_PREFETCH = 43,INTERNET_STATUS_CLOSING_CONNECTION = 50,INTERNET_STATUS_CONNECTION_CLOSED = 51,INTERNET_STATUS_HANDLE_CREATED = 60,INTERNET_STATUS_HANDLE_CLOSING = 70,INTERNET_STATUS_REQUEST_COMPLETE = 100,INTERNET_STATUS_REDIRECT = 110,INTERNET_STATUS_INTERMEDIATE_RESPONSE = 120,INTERNET_STATUS_STATE_CHANGE = 200,INTERNET_STATE_CONNECTED = 1,INTERNET_STATE_DISCONNECTED = 2,INTERNET_STATE_DISCONNECTED_BY_USER = 16,INTERNET_STATE_IDLE = 256,INTERNET_STATE_BUSY = 512,INTERNET_INVALID_STATUS_CALLBACK = -1,};
enum MACRO_INVALID_TRACEID {INVALID_TRACEID = 0xFFFFFFFF,};
enum MACRO_INVALID_UROWNUM {INVALID_UROWNUM = 4294967295,};
enum MACRO_IOCTL_SMARTCARD {IOCTL_SMARTCARD_POWER = 3211268,IOCTL_SMARTCARD_GET_ATTRIBUTE = 3211272,IOCTL_SMARTCARD_SET_ATTRIBUTE = 3211276,IOCTL_SMARTCARD_CONFISCATE = 3211280,IOCTL_SMARTCARD_TRANSMIT = 3211284,IOCTL_SMARTCARD_EJECT = 3211288,IOCTL_SMARTCARD_SWALLOW = 3211292,IOCTL_SMARTCARD_IS_PRESENT = 3211304,IOCTL_SMARTCARD_IS_ABSENT = 3211308,IOCTL_SMARTCARD_SET_PROTOCOL = 3211312,IOCTL_SMARTCARD_GET_STATE = 3211320,IOCTL_SMARTCARD_GET_LAST_ERROR = 3211324,};
enum MACRO_I_IMAGECALLBACK {I_IMAGECALLBACK = -1,};
enum MACRO_IoctlCodeGetV24 {IoctlCodeGetV24 = 0x623,};
enum MACRO_IoctlCodeSetV24 {IoctlCodeSetV24 = 0x430,};
enum MACRO_KSPROPERTY_TYPE {KSPROPERTY_TYPE_GET = 0x1,KSPROPERTY_TYPE_SET = 0x2,KSPROPERTY_TYPE_SETSUPPORT = 0x100,KSPROPERTY_TYPE_BASICSUPPORT = 0x200,KSPROPERTY_TYPE_RELATIONS = 0x400,KSPROPERTY_TYPE_SERIALIZESET = 0x800,KSPROPERTY_TYPE_UNSERIALIZESET = 0x1000,KSPROPERTY_TYPE_SERIALIZERAW = 0x2000,KSPROPERTY_TYPE_UNSERIALIZERAW = 0x4000,KSPROPERTY_TYPE_SERIALIZESIZE = 0x8000,KSPROPERTY_TYPE_DEFAULTVALUES = 0x10000,KSPROPERTY_TYPE_TOPOLOGY = 0x10000000,KSPROPERTY_MEMBER_RANGES = 0x1,KSPROPERTY_MEMBER_STEPPEDRANGES = 0x2,KSPROPERTY_MEMBER_VALUES = 0x3,KSPROPERTY_MEMBER_FLAG_DEFAULT = 0x1,};
enum MACRO_LINEADDRESSMODE {LINEADDRESSMODE_ADDRESSID = 0x1,LINEADDRESSMODE_DIALABLEADDR = 0x2,};
enum MACRO_LINEADDRFEATURE {LINEADDRFEATURE_FORWARD = 0x1,LINEADDRFEATURE_MAKECALL = 0x2,LINEADDRFEATURE_PICKUP = 0x4,LINEADDRFEATURE_SETMEDIACONTROL = 0x8,LINEADDRFEATURE_SETTERMINAL = 0x10,LINEADDRFEATURE_SETUPCONF = 0x20,LINEADDRFEATURE_UNCOMPLETECALL = 0x40,LINEADDRFEATURE_UNPARK = 0x80,LINEADDRFEATURE_PICKUPHELD = 0x100,LINEADDRFEATURE_PICKUPGROUP = 0x200,LINEADDRFEATURE_PICKUPDIRECT = 0x400,LINEADDRFEATURE_PICKUPWAITING = 0x800,LINEADDRFEATURE_FORWARDFWD = 0x1000,LINEADDRFEATURE_FORWARDDND = 0x2000,};
enum MACRO_LINEAGENTSTATUS {LINEAGENTSTATUS_GROUP = 0x1,LINEAGENTSTATUS_STATE = 0x2,LINEAGENTSTATUS_NEXTSTATE = 0x4,LINEAGENTSTATUS_ACTIVITY = 0x8,LINEAGENTSTATUS_ACTIVITYLIST = 0x10,LINEAGENTSTATUS_GROUPLIST = 0x20,LINEAGENTSTATUS_CAPSCHANGE = 0x40,LINEAGENTSTATUS_VALIDSTATES = 0x80,LINEAGENTSTATUS_VALIDNEXTSTATES = 0x100,};
enum MACRO_LINECALLFEATURE {LINECALLFEATURE_ACCEPT = 0x1,LINECALLFEATURE_ADDTOCONF = 0x2,LINECALLFEATURE_ANSWER = 0x4,LINECALLFEATURE_BLINDTRANSFER = 0x8,LINECALLFEATURE_COMPLETECALL = 0x10,LINECALLFEATURE_COMPLETETRANSF = 0x20,LINECALLFEATURE_DIAL = 0x40,LINECALLFEATURE_DROP = 0x80,LINECALLFEATURE_GATHERDIGITS = 0x100,LINECALLFEATURE_GENERATEDIGITS = 0x200,LINECALLFEATURE_GENERATETONE = 0x400,LINECALLFEATURE_HOLD = 0x800,LINECALLFEATURE_MONITORDIGITS = 0x1000,LINECALLFEATURE_MONITORMEDIA = 0x2000,LINECALLFEATURE_MONITORTONES = 0x4000,LINECALLFEATURE_PARK = 0x8000,LINECALLFEATURE_PREPAREADDCONF = 0x10000,LINECALLFEATURE_REDIRECT = 0x20000,LINECALLFEATURE_REMOVEFROMCONF = 0x40000,LINECALLFEATURE_SECURECALL = 0x80000,LINECALLFEATURE_SENDUSERUSER = 0x100000,LINECALLFEATURE_SETCALLPARAMS = 0x200000,LINECALLFEATURE_SETMEDIACONTROL = 0x400000,LINECALLFEATURE_SETTERMINAL = 0x800000,LINECALLFEATURE_SETUPCONF = 0x1000000,LINECALLFEATURE_SETUPTRANSFER = 0x2000000,LINECALLFEATURE_SWAPHOLD = 0x4000000,LINECALLFEATURE_UNHOLD = 0x8000000,LINECALLFEATURE_RELEASEUSERUSERINFO = 0x10000000,LINECALLFEATURE_SETTREATMENT = 0x20000000,LINECALLFEATURE_SETQOS = 0x40000000,LINECALLFEATURE_SETCALLDATA = 0x80000000,};
enum MACRO_LINECALLPARTYID {LINECALLPARTYID_BLOCKED = 0x1,LINECALLPARTYID_OUTOFAREA = 0x2,LINECALLPARTYID_NAME = 0x4,LINECALLPARTYID_ADDRESS = 0x8,LINECALLPARTYID_PARTIAL = 0x10,LINECALLPARTYID_UNKNOWN = 0x20,LINECALLPARTYID_UNAVAIL = 0x40,};
enum MACRO_LINEDEVCAPFLAGS {LINEDEVCAPFLAGS_CROSSADDRCONF = 0x1,LINEDEVCAPFLAGS_HIGHLEVCOMP = 0x2,LINEDEVCAPFLAGS_LOWLEVCOMP = 0x4,LINEDEVCAPFLAGS_MEDIACONTROL = 0x8,LINEDEVCAPFLAGS_MULTIPLEADDR = 0x10,LINEDEVCAPFLAGS_CLOSEDROP = 0x20,LINEDEVCAPFLAGS_DIALBILLING = 0x40,LINEDEVCAPFLAGS_DIALQUIET = 0x80,LINEDEVCAPFLAGS_DIALDIALTONE = 0x100,};
enum MACRO_LINEFORWARDMODE {LINEFORWARDMODE_UNCOND = 0x1,LINEFORWARDMODE_UNCONDINTERNAL = 0x2,LINEFORWARDMODE_UNCONDEXTERNAL = 0x4,LINEFORWARDMODE_UNCONDSPECIFIC = 0x8,LINEFORWARDMODE_BUSY = 0x10,LINEFORWARDMODE_BUSYINTERNAL = 0x20,LINEFORWARDMODE_BUSYEXTERNAL = 0x40,LINEFORWARDMODE_BUSYSPECIFIC = 0x80,LINEFORWARDMODE_NOANSW = 0x100,LINEFORWARDMODE_NOANSWINTERNAL = 0x200,LINEFORWARDMODE_NOANSWEXTERNAL = 0x400,LINEFORWARDMODE_NOANSWSPECIFIC = 0x800,LINEFORWARDMODE_BUSYNA = 0x1000,LINEFORWARDMODE_BUSYNAINTERNAL = 0x2000,LINEFORWARDMODE_BUSYNAEXTERNAL = 0x4000,LINEFORWARDMODE_BUSYNASPECIFIC = 0x8000,LINEFORWARDMODE_UNKNOWN = 0x10000,LINEFORWARDMODE_UNAVAIL = 0x20000,};
enum MACRO_LINEREQUESTMODE {LINEREQUESTMODE_MAKECALL = 0x1,LINEREQUESTMODE_MEDIACALL = 0x2,LINEREQUESTMODE_DROP = 0x4,};
enum MACRO_LINESPECIALINFO {LINESPECIALINFO_NOCIRCUIT = 0x1,LINESPECIALINFO_CUSTIRREG = 0x2,LINESPECIALINFO_REORDER = 0x4,LINESPECIALINFO_UNKNOWN = 0x8,LINESPECIALINFO_UNAVAIL = 0x10,};
enum MACRO_LINETERMSHARING {LINETERMSHARING_PRIVATE = 0x1,LINETERMSHARING_SHAREDEXCL = 0x2,LINETERMSHARING_SHAREDCONF = 0x4,};
enum MACRO_LVM_GETITEMTEXT {LVM_GETITEMTEXT = 4141,LVM_SETITEMTEXT = 4142,};
enum MACRO_LVN_GETINFOTIPA {LVN_GETINFOTIPA = -157,LVN_GETINFOTIPW = -158,LVN_GETINFOTIP = -157,};
enum MACRO_MAPI_UNRESOLVED {MAPI_UNRESOLVED = 0x0,MAPI_AMBIGUOUS = 0x1,MAPI_RESOLVED = 0x2,MAPI_SEND_NO_RICH_INFO = 0x10000,MAPI_DIAG_NO_DIAGNOSTIC = 0xFFFFFFFF,MAPI_DIAG_OR_NAME_UNRECOGNIZED = 0x0,MAPI_DIAG_OR_NAME_AMBIGUOUS = 0x1,MAPI_DIAG_MTS_CONGESTED = 0x2,MAPI_DIAG_LOOP_DETECTED = 0x3,MAPI_DIAG_RECIPIENT_UNAVAILABLE = 0x4,MAPI_DIAG_MAXIMUM_TIME_EXPIRED = 0x5,MAPI_DIAG_EITS_UNSUPPORTED = 0x6,MAPI_DIAG_CONTENT_TOO_LONG = 0x7,MAPI_DIAG_IMPRACTICAL_TO_CONVERT = 0x8,MAPI_DIAG_PROHIBITED_TO_CONVERT = 0x9,MAPI_DIAG_CONVERSION_UNSUBSCRIBED = 0xA,MAPI_DIAG_PARAMETERS_INVALID = 0xB,MAPI_DIAG_CONTENT_SYNTAX_IN_ERROR = 0xC,MAPI_DIAG_LENGTH_CONSTRAINT_VIOLATD = 0xD,MAPI_DIAG_NUMBER_CONSTRAINT_VIOLATD = 0xE,MAPI_DIAG_CONTENT_TYPE_UNSUPPORTED = 0xF,MAPI_DIAG_TOO_MANY_RECIPIENTS = 0x10,MAPI_DIAG_NO_BILATERAL_AGREEMENT = 0x11,MAPI_DIAG_CRITICAL_FUNC_UNSUPPORTED = 0x12,MAPI_DIAG_CONVERSION_LOSS_PROHIB = 0x13,MAPI_DIAG_LINE_TOO_LONG = 0x14,MAPI_DIAG_PAGE_TOO_LONG = 0x15,MAPI_DIAG_PICTORIAL_SYMBOL_LOST = 0x16,MAPI_DIAG_PUNCTUATION_SYMBOL_LOST = 0x17,MAPI_DIAG_ALPHABETIC_CHARACTER_LOST = 0x18,MAPI_DIAG_MULTIPLE_INFO_LOSSES = 0x19,MAPI_DIAG_REASSIGNMENT_PROHIBITED = 0x1A,MAPI_DIAG_REDIRECTION_LOOP_DETECTED = 0x1B,MAPI_DIAG_EXPANSION_PROHIBITED = 0x1C,MAPI_DIAG_SUBMISSION_PROHIBITED = 0x1D,MAPI_DIAG_EXPANSION_FAILED = 0x1E,MAPI_DIAG_RENDITION_UNSUPPORTED = 0x1F,MAPI_DIAG_MAIL_ADDRESS_INCORRECT = 0x20,MAPI_DIAG_MAIL_OFFICE_INCOR_OR_INVD = 0x21,MAPI_DIAG_MAIL_ADDRESS_INCOMPLETE = 0x22,MAPI_DIAG_MAIL_RECIPIENT_UNKNOWN = 0x23,MAPI_DIAG_MAIL_RECIPIENT_DECEASED = 0x24,MAPI_DIAG_MAIL_ORGANIZATION_EXPIRED = 0x25,MAPI_DIAG_MAIL_REFUSED = 0x26,MAPI_DIAG_MAIL_UNCLAIMED = 0x27,MAPI_DIAG_MAIL_RECIPIENT_MOVED = 0x28,MAPI_DIAG_MAIL_RECIPIENT_TRAVELLING = 0x29,MAPI_DIAG_MAIL_RECIPIENT_DEPARTED = 0x2A,MAPI_DIAG_MAIL_NEW_ADDRESS_UNKNOWN = 0x2B,MAPI_DIAG_MAIL_FORWARDING_UNWANTED = 0x2C,MAPI_DIAG_MAIL_FORWARDING_PROHIB = 0x2D,MAPI_DIAG_SECURE_MESSAGING_ERROR = 0x2E,MAPI_DIAG_DOWNGRADING_IMPOSSIBLE = 0x2F,MAPI_MH_DP_PUBLIC_UA = 0x0,MAPI_MH_DP_PRIVATE_UA = 0x1,MAPI_MH_DP_MS = 0x2,MAPI_MH_DP_ML = 0x3,MAPI_MH_DP_PDAU = 0x4,MAPI_MH_DP_PDS_PATRON = 0x5,MAPI_MH_DP_OTHER_AU = 0x6,};
enum MACRO_MAXDICTIONARIES {MAXDICTIONARIES = 16,};
enum MACRO_MAXIMUM_ALLOWED {MAXIMUM_ALLOWED = 0x2000000,};
enum MACRO_MAXIMUM_REPARSE {MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384,};
enum MACRO_MAXOBJIDSTRSIZE {MAXOBJIDSTRSIZE = 1408,};
enum MACRO_MAXOEMDATAWORDS {MAXOEMDATAWORDS = 6,};
enum MACRO_MAX_CALLLETTERS {MAX_CALLLETTERS = 10,MAX_TITLE = 256,MAX_DESCRIPTION = 1024,MAX_LOGOMONIKER = 1024,};
enum MACRO_MAX_CLUSTERNAME {MAX_CLUSTERNAME_LENGTH = 15,};
enum MACRO_MAX_MODULE_NAME {MAX_MODULE_NAME = 9,MAX_PATH16 = 255,};
enum MACRO_MEDIA_ERASEABLE {MEDIA_ERASEABLE = 0x1,MEDIA_WRITE_ONCE = 0x2,MEDIA_READ_ONLY = 0x4,MEDIA_READ_WRITE = 0x8,MEDIA_WRITE_PROTECTED = 0x100,MEDIA_CURRENTLY_MOUNTED = 0x80000000,};
enum MACRO_METADATA_MASTER {METADATA_MASTER_ROOT_HANDLE = 0,};
enum MACRO_NAME_INFO_LEVEL {UNIVERSAL_NAME_INFO_LEVEL = 0x1,REMOTE_NAME_INFO_LEVEL = 0x2,};
enum MACRO_NUMOUTQMPACKETS {NUMOUTQMPACKETS = 12,};
enum MACRO_NUMSESSOUTBYTES {NUMSESSOUTBYTES = 28,};
enum MACRO_OLEUI_CCHKEYMAX {OLEUI_CCHKEYMAX = 256,OLEUI_CCHVERBMAX = 32,OLEUI_OBJECTMENUMAX = 256,OLEUI_CCHPATHMAX = 256,OLEUI_CCHFILEMAX = 13,OLEUI_CCHLABELMAX = 40,OLEUI_CCHCLSIDSTRING = 39,};
enum MACRO_OtherProgramHid {OtherProgramHid = 5,};
enum MACRO_PAGESETUPDLGORD {PAGESETUPDLGORD = 1546,};
enum MACRO_PFM_SPACEBEFORE {PFM_SPACEBEFORE = 0x40,PFM_SPACEAFTER = 0x80,PFM_LINESPACING = 0x100,PFM_STYLE = 0x400,PFM_BORDER = 0x800,PFM_SHADING = 0x1000,PFM_NUMBERINGSTYLE = 0x2000,PFM_NUMBERINGTAB = 0x4000,PFM_NUMBERINGSTART = 0x8000,PFM_DIR = 0x10000,PFM_RTLPARA = 0x10000,PFM_KEEP = 0x20000,PFM_KEEPNEXT = 0x40000,PFM_PAGEBREAKBEFORE = 0x80000,PFM_NOLINENUMBER = 0x100000,PFM_NOWIDOWCONTROL = 0x200000,PFM_DONOTHYPHEN = 0x400000,PFM_SIDEBYSIDE = 0x800000,PFM_TABLE = 0xC0000000,PFM_EFFECTS = 0xC0FF0000,PFM_ALL2 = 0xC0FFFDFF,};
enum MACRO_PHONEBUTTONMODE {PHONEBUTTONMODE_DUMMY = 0x1,PHONEBUTTONMODE_CALL = 0x2,PHONEBUTTONMODE_FEATURE = 0x4,PHONEBUTTONMODE_KEYPAD = 0x8,PHONEBUTTONMODE_LOCAL = 0x10,PHONEBUTTONMODE_DISPLAY = 0x20,};
enum MACRO_PHYSICALOFFSETX {PHYSICALOFFSETX = 112,};
enum MACRO_PHYSICALOFFSETY {PHYSICALOFFSETY = 113,};
enum MACRO_PROFILE_PRIMARY {PROFILE_PRIMARY_USER = 1,PROFILE_DELEGATE = 2,PROFILE_PUBLIC_STORE = 3,PROFILE_SUBSCRIPTION = 4,};
enum MACRO_PROFILE_VERSION {PROFILE_VERSION = 0x501,};
enum MACRO_PR_PROFILE_OPEN {PR_PROFILE_OPEN_FLAGS = 0x66090003,PR_PROFILE_TYPE = 0x660A0003,PR_PROFILE_MAILBOX = 0x660B001E,PR_PROFILE_SERVER = 0x660C001E,PR_PROFILE_SERVER_DN = 0x6614001E,PR_PROFILE_FAVFLD_DISPLAY_NAME = 0x660F001E,PR_PROFILE_FAVFLD_COMMENT = 0x6615001E,PR_PROFILE_ALLPUB_DISPLAY_NAME = 0x6616001E,PR_PROFILE_ALLPUB_COMMENT = 0x6617001E,};
enum MACRO_PS_MAXLINKTYPES {PS_MAXLINKTYPES = 8,};
enum MACRO_PT_SRESTRICTION {PT_SRESTRICTION = 0xFD,PT_ACTIONS = 0xFE,};
enum MACRO_QUERYDIBSUPPORT {QUERYDIBSUPPORT = 3073,};
enum MACRO_READ_ATTRIBUTES {READ_ATTRIBUTES = 0xD0,READ_THRESHOLDS = 0xD1,};
enum MACRO_SCHANNEL_SECRET {SCHANNEL_SECRET_TYPE_CAPI = 0x1,SCHANNEL_SECRET_PRIVKEY = 0x2,};
enum MACRO_SCRIPTINTERRUPT {SCRIPTINTERRUPT_DEBUG = 0x1,SCRIPTINTERRUPT_RAISEEXCEPTION = 0x2,SCRIPTINTERRUPT_ALL_FLAGS = 0x3,};
enum MACRO_SECURITY_NATIVE {SECURITY_NATIVE_DREP = 0x10,SECURITY_NETWORK_DREP = 0x0,};
enum MACRO_SECURITY_SIGNED {SECURITY_SIGNED = 0x1,SECURITY_ENCRYPTED = 0x2,};
enum MACRO_SERVICE_ADDRESS {SERVICE_ADDRESS_FLAG_RPC_CN = 0x1,SERVICE_ADDRESS_FLAG_RPC_DG = 0x2,SERVICE_ADDRESS_FLAG_RPC_NB = 0x4,};
enum MACRO_SERVICE_DEFAULT {SERVICE_DEFAULT_STORE = 0x1,SERVICE_SINGLE_COPY = 0x2,SERVICE_CREATE_WITH_STORE = 0x4,SERVICE_PRIMARY_IDENTITY = 0x8,SERVICE_NO_PRIMARY_IDENTITY = 0x20,};
enum MACRO_SERVICE_INSTALL {SERVICE_INSTALL_STATE = 0x3,SERVICE_UNINSTALLED = 0x0,SERVICE_INSTALL_PENDING = 0x1,SERVICE_UNINSTALL_PENDING = 0x2,SERVICE_INSTALLED = 0x3,SERVICE_PAUSE_STATE = 0xC,};
enum MACRO_SESSION_ABORTED {SESSION_ABORTED = 0x6,};
enum MACRO_SINGLE_INFINITY {SINGLE_INFINITY_VALUE = 0x7F800000,};
enum MACRO_SORT_STRINGSORT {SORT_STRINGSORT = 0x1000,};
enum MACRO_SRVRETURNSTATUS {SRVRETURNSTATUS = 121,};
enum MACRO_STATUS_SEVERITY {STATUS_SEVERITY_WARNING = 0x2,STATUS_SEVERITY_MASK = 0x3,STATUS_SEVERITY_INFORMATIONAL = 0x1,STATUS_SEVERITY_ERROR = 0x3,};
enum MACRO_STATUS_VALIDATE {STATUS_VALIDATE_STATE = 0x1,STATUS_SETTINGS_DIALOG = 0x2,STATUS_CHANGE_PASSWORD = 0x4,STATUS_FLUSH_QUEUES = 0x8,STATUS_DEFAULT_OUTBOUND = 0x1,STATUS_DEFAULT_STORE = 0x2,STATUS_PRIMARY_IDENTITY = 0x4,STATUS_SIMPLE_STORE = 0x8,STATUS_XP_PREFER_LAST = 0x10,STATUS_NO_PRIMARY_IDENTITY = 0x20,STATUS_NO_DEFAULT_STORE = 0x40,STATUS_TEMP_SECTION = 0x80,STATUS_OWN_STORE = 0x100,STATUS_NEED_IPM_TREE = 0x800,STATUS_PRIMARY_STORE = 0x1000,STATUS_SECONDARY_STORE = 0x2000,STATUS_AVAILABLE = 0x1,STATUS_OFFLINE = 0x2,STATUS_FAILURE = 0x4,STATUS_INBOUND_ENABLED = 0x10000,STATUS_INBOUND_ACTIVE = 0x20000,STATUS_INBOUND_FLUSH = 0x40000,STATUS_OUTBOUND_ENABLED = 0x100000,STATUS_OUTBOUND_ACTIVE = 0x200000,STATUS_OUTBOUND_FLUSH = 0x400000,STATUS_REMOTE_ACCESS = 0x800000,};
enum MACRO_TBN_GETDISPINFO {TBN_GETDISPINFO = -716,};
enum MACRO_THREAD_PRIORITY {THREAD_PRIORITY_LOWEST = -2,THREAD_PRIORITY_BELOW_NORMAL = -1,THREAD_PRIORITY_NORMAL = 0,THREAD_PRIORITY_HIGHEST = 2,THREAD_PRIORITY_ABOVE_NORMAL = 1,THREAD_PRIORITY_ERROR_RETURN = 2147483647,THREAD_PRIORITY_TIME_CRITICAL = 15,THREAD_PRIORITY_IDLE = -15,};
enum MACRO_TITLEBARNAMELEN {TITLEBARNAMELEN = 40,};
enum MACRO_TVM_GETITEMRECT {TVM_GETITEMRECT = 4356,TVM_GETCOUNT = 4357,TVM_GETINDENT = 4358,TVM_SETINDENT = 4359,TVM_GETIMAGELIST = 4360,};
enum MACRO_URLPOLICY_ALLOW {URLPOLICY_ALLOW = 0x0,URLPOLICY_QUERY = 0x1,URLPOLICY_DISALLOW = 0x3,URLPOLICY_NOTIFY_ON_ALLOW = 0x10,URLPOLICY_NOTIFY_ON_DISALLOW = 0x20,URLPOLICY_LOG_ON_ALLOW = 0x40,URLPOLICY_LOG_ON_DISALLOW = 0x80,URLPOLICY_MASK_PERMISSIONS = 0xF,};
enum MACRO_USER_MAXSTORAGE {USER_MAXSTORAGE_UNLIMITED = 4294967295,USER_NO_LOGOFF = 4294967295,};
enum MACRO_VALID_FLAGS_SET {SHI1005_VALID_FLAGS_SET = 252,SHI1007_VALID_FLAGS_SET = 252,};
enum MACRO_VIEW_LARGEICONS {VIEW_LARGEICONS = 0,VIEW_SMALLICONS = 1,VIEW_LIST = 2,VIEW_DETAILS = 3,VIEW_SORTNAME = 4,VIEW_SORTSIZE = 5,VIEW_SORTDATE = 6,VIEW_SORTTYPE = 7,VIEW_PARENTFOLDER = 8,VIEW_NETCONNECT = 9,VIEW_NETDISCONNECT = 10,VIEW_NEWFOLDER = 11,VIEW_VIEWMENU = 12,};
enum MACRO_WCSVDESCRIPTION {WCSVDESCRIPTION_LEN = 127,};
enum MACRO_WLUADESCRIPTION {WLUADESCRIPTION_LEN = 40,};
enum MACRO_WLUANTFYINVALID {WLUANTFYINVALID = 23,};
enum MACRO_WLUASYSNOTREADY {WLUASYSNOTREADY = 1,WLUAVERNOTSUPPORTED = 2,};
enum MACRO_WSAEAFNOSUPPORT {WSAEAFNOSUPPORT = 10047,};
enum MACRO_WSAECONNABORTED {WSAECONNABORTED = 10053,};
enum MACRO_WSAECONNREFUSED {WSAECONNREFUSED = 10061,};
enum MACRO_WSAEDESTADDRREQ {WSAEDESTADDRREQ = 10039,};
enum MACRO_WSAEHOSTUNREACH {WSAEHOSTUNREACH = 10065,};
enum MACRO_WSAENAMETOOLONG {WSAENAMETOOLONG = 10063,};
enum MACRO_WSAEPFNOSUPPORT {WSAEPFNOSUPPORT = 10046,};
enum MACRO_WSAETOOMANYREFS {WSAETOOMANYREFS = 10059,};
enum MACRO_XP_HEADER_CACHE {REFRESH_XP_HEADER_CACHE = 0x10000,PROCESS_XP_HEADER_CACHE = 0x20000,};
enum MACRO_attDateModified {attDateModified = 0x38020,};
enum MACRO_attMessageClass {attMessageClass = 0x78008,};
enum MACRO_cbRcLanguageMax {cbRcLanguageMax = 44,};
enum MACRO_ckidAVINEWINDEX {ckidAVINEWINDEX = 829973609,};
enum MACRO_ckidAVIOLDINDEX {ckidAVIOLDINDEX = 829973609,};
enum MACRO_cktypePALchange {cktypePALchange = 25456,};
enum MACRO_cktypeWAVEbytes {cktypeWAVEbytes = 25207,};
enum MACRO_cwRcReservedMax {cwRcReservedMax = 8,};
enum MACRO_dispidOnTVFocus {dispidOnTVFocus = 3008,};
enum MACRO_dispidSetTVMode {dispidSetTVMode = 4001,};
enum MACRO_dispidSyncEvent {dispidSyncEvent = 3004,};
enum MACRO_dispidTakeFocus {dispidTakeFocus = 2004,};
enum MACRO_ecProxyDLLError {ecProxyDLLError = 50007,};
enum MACRO_ecProxyNotValid {ecProxyNotValid = 50018,};
enum MACRO_fdexEnumDefault {fdexEnumDefault = 0x1,fdexEnumAll = 0x2,};
enum MACRO_hrBadLogVersion {hrBadLogVersion = 0xC8000202,};
enum MACRO_hrColumnIndexed {hrColumnIndexed = 0xC80005E1,};
enum MACRO_hrColumnSetNull {hrColumnSetNull = 0x8800042C,};
enum MACRO_hrDatabaseInUse {hrDatabaseInUse = 0xC80004B2,};
enum MACRO_hrInTransaction {hrInTransaction = 0xC8000454,};
enum MACRO_hrIndexMustStay {hrIndexMustStay = 0xC800057D,};
enum MACRO_hrIndexNotFound {hrIndexNotFound = 0xC800057C,};
enum MACRO_hrInvalidBackup {hrInvalidBackup = 0xC800020E,};
enum MACRO_hrInvalidHandle {hrInvalidHandle = 0xC7FF0003,};
enum MACRO_hrInvalidObject {hrInvalidObject = 0xC8000524,};
enum MACRO_hrInvalidOnSort {hrInvalidOnSort = 0xC80006A6,};
enum MACRO_hrInvalidRecips {hrInvalidRecips = 0xC7FF0006,};
enum MACRO_hrNoFullRestore {hrNoFullRestore = 0xC7FF000C,};
enum MACRO_hrOutOfSessions {hrOutOfSessions = 0xC800044D,};
enum MACRO_hrRecordDeleted {hrRecordDeleted = 0xC80003F9,};
enum MACRO_hrTableNotEmpty {hrTableNotEmpty = 0xC800051C,};
enum MACRO_hrTaggedNotNULL {hrTaggedNotNULL = 0xC80005EA,};
enum MACRO_hrWriteConflict {hrWriteConflict = 0xC800044E,};
enum MACRO_idsNoHelpMemory {idsNoHelpMemory = 1008,};
enum MACRO_oledbIAccessor_ {oledbIAccessor__AddRefAccessor = 50001,oledbIAccessor__CreateAccessor = 50002,oledbIAccessor__GetBindings = 50003,oledbIAccessor__ReleaseAccessor = 50004,};
enum MACRO_oledbIErrorInfo {oledbIErrorInfo = 50052,};
enum MACRO_rightsReadWrite {rightsReadWrite = 33,};
enum MACRO_streamtypeAUDIO {streamtypeAUDIO = 1935963489,};
enum MACRO_streamtypeVIDEO {streamtypeVIDEO = 1935960438,};
enum MACRO_tevtDLExpansion {tevtDLExpansion = 26,};
enum MACRO_tevtDowngrading {tevtDowngrading = 31,};
enum MACRO_tevtRedirection {tevtRedirection = 28,};
typedef struct tagMCI_ANIM_UPDATE_PARMS MCI_ANIM_UPDATE_PARMS;
typedef struct _6F312F6C8B75A1ED7F97F8719E9B642A MCI_DGV_MONITOR_PARMS;
typedef struct _DB6DF50B4F389C31260AEE4712B8E725 MCI_DGV_STATUS_PARMSA;
typedef struct _C3CAB9B290DE542345BF3A821AEDD70F MCI_DGV_STATUS_PARMSW;
typedef struct _8E3D5C816F45029DFC3A1E2FB5D03F2C MCI_DGV_WINDOW_PARMSA;
typedef struct _BA38072C3DF14F81D778878E553711E9 MCI_DGV_WINDOW_PARMSW;
typedef struct tagMCI_WAVE_DELETE_PARMS MCI_WAVE_DELETE_PARMS;
typedef struct mc_prepare_to_receive MC_PREPARE_TO_RECEIVE;
typedef struct _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
typedef struct tagMQPROPERTYRESTRICTION MQPROPERTYRESTRICTION;
typedef struct _NTMS_PMIDINFORMATIONA NTMS_PMIDINFORMATIONA;
typedef struct _NTMS_PMIDINFORMATIONW NTMS_PMIDINFORMATIONW;
typedef struct tACMFILTERTAGDETAILSA *PACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW *PACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA *PACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW *PACMFORMATTAGDETAILSW;
typedef IAMDevMemoryAllocator *PAMDEVMEMORYALLOCATOR;
typedef struct _PARTITION_INFORMATION PARTITION_INFORMATION;
typedef struct _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;
typedef struct _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;
typedef CLUSPROP_DWORD *PCLUSPROP_DISK_NUMBER;
typedef struct _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;
typedef struct _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;
typedef struct _DEV_BROADCAST_HANDLE *PDEV_BROADCAST_HANDLE;
typedef struct _DEV_BROADCAST_PORT_A *PDEV_BROADCAST_PORT_A;
typedef struct _DEV_BROADCAST_PORT_W *PDEV_BROADCAST_PORT_W;
typedef struct tagEMRTRANSPARENTBLT *PEMREMRTRANSPARENTBLT;
typedef struct tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;
typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;
typedef struct _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;
typedef void ( *PFNSNMPEXTENSIONCLOSE)();
typedef struct _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;
typedef struct __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;
typedef struct _HTTP_FILTER_RAW_DATA *PHTTP_FILTER_RAW_DATA;
typedef IAMTimecodeGenerator *PIAMTIMECODEGENERATOR;
typedef struct _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
typedef struct _IPX_NEXT_HOP_ADDRESS *PIPX_NEXT_HOP_ADDRESS;
typedef struct _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;
typedef struct tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
typedef struct _7D6AD1D4C0599A70ED2A75DF53A62D54 *PKSPROPERTY_POSITIONS;
typedef struct _F1FF9EB17A5B0DC512AB60E4FE6215DC *PKSPROPERTY_SERIALHDR;
typedef struct tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;
typedef struct _8C804DA91EAA1D72F3F02F1E499057D7 *PLLC_BUFFER_GET_PARMS;
typedef struct _AB97F029BC7AD90C3813597C038C5112 *PLLC_DIR_STATUS_PARMS;
typedef struct _D4B41BFB0D7ACAABEF7B64D0EE03F789 *PLLC_DLC_MODIFY_PARMS;
typedef struct _LOCALGROUP_INFO_1002 *PLOCALGROUP_INFO_1002;
typedef struct _LSA_AUTH_INFORMATION *PLSA_AUTH_INFORMATION;
typedef struct tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;
typedef struct _METADATA_HANDLE_INFO *PMETADATA_HANDLE_INFO;
typedef struct _POLICY_AUDIT_LOG_INFO POLICY_AUDIT_LOG_INFO;
typedef struct _POWER_DEVICE_TIMEOUTS POWER_DEVICE_TIMEOUTS;
typedef struct _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;
typedef struct _PREVENT_MEDIA_REMOVAL PREVENT_MEDIA_REMOVAL;
typedef struct _PRINTPROCESSOR_CAPS_1 PRINTPROCESSOR_CAPS_1;
typedef struct _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D *PRPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;
typedef struct _RTCP_RECEIVER_REPORT *PRTCP_RECEIVER_REPORT;
typedef struct _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
typedef struct _SCH_CRED_PUBLIC_CAPI *PSCH_CRED_PUBLIC_CAPI;
typedef struct _SCH_CRED_SECRET_CAPI *PSCH_CRED_SECRET_CAPI;
typedef struct _SEC_NEGOTIATION_INFO *PSEC_NEGOTIATION_INFO;
typedef struct _SERVICES_TABLE_INDEX *PSERVICES_TABLE_INDEX;
typedef struct _SP_DRVINSTALL_PARAMS *PSP_DRVINSTALL_PARAMS;
typedef struct _SP_PROPCHANGE_PARAMS *PSP_PROPCHANGE_PARAMS;
typedef struct _SecPkgContext_NamesA *PSecPkgContext_NamesA;
typedef struct _SecPkgContext_NamesW *PSecPkgContext_NamesW;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 *PVOLUME_BITMAP_BUFFER;
typedef struct _WKSTA_USER_INFO_1101 *PWKSTA_USER_INFO_1101;
typedef struct _WSAServiceClassInfoA *PWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *PWSASERVICECLASSINFOW;
typedef struct _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
typedef struct _13AC4D5D0927D2C6C16DF20D64ACBBB3 READ_USN_JOURNAL_DATA;
typedef struct _RIP_ROUTE_FILTER_INFO RIP_ROUTE_FILTER_INFO;
enum RND_ADVERTISING_SCOPE {AS_LOCAL = 0x1,AS_SITE = 0x2,AS_REGION = 0x3,AS_WORLD = 0x4,};
typedef struct _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
typedef struct _RTR_INFO_BLOCK_HEADER RTR_INFO_BLOCK_HEADER;
typedef struct sierra_adpcmwaveformat_tag SIERRAADPCMWAVEFORMAT;
typedef struct _SP_ENABLECLASS_PARAMS SP_ENABLECLASS_PARAMS;
typedef struct _SP_INSTALLWIZARD_DATA SP_INSTALLWIZARD_DATA;
typedef struct tagSQL_DAY_SECOND SQL_DAY_SECOND_STRUCT;
typedef struct tagSQL_YEAR_MONTH SQL_YEAR_MONTH_STRUCT;
typedef struct _STORAGE_DEVICE_NUMBER STORAGE_DEVICE_NUMBER;
enum SUBSCRIPTIONINFOFLAGS {SUBSINFO_SCHEDULE = 0x1,SUBSINFO_RECURSE = 0x2,SUBSINFO_WEBCRAWL = 0x4,SUBSINFO_MAILNOT = 0x8,SUBSINFO_MAXSIZEKB = 0x10,SUBSINFO_USER = 0x20,SUBSINFO_PASSWORD = 0x40,SUBSINFO_TASKFLAGS = 0x100,SUBSINFO_GLEAM = 0x200,SUBSINFO_CHANGESONLY = 0x400,SUBSINFO_CHANNELFLAGS = 0x800,SUBSINFO_FRIENDLYNAME = 0x2000,SUBSINFO_NEEDPASSWORD = 0x4000,SUBSINFO_TYPE = 0x8000,};
typedef struct _SecPkgContext_DceInfo SecPkgContext_DceInfo;
typedef struct _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
typedef struct _TRANSMIT_FILE_BUFFERS TRANSMIT_FILE_BUFFERS;
typedef struct _TRUSTED_PASSWORD_INFO TRUSTED_PASSWORD_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
typedef struct urlinvokecommandinfoA URLINVOKECOMMANDINFOA;
typedef struct urlinvokecommandinfoW URLINVOKECOMMANDINFOW;
typedef struct _USER_MODALS_INFO_1001 USER_MODALS_INFO_1001;
typedef struct _USER_MODALS_INFO_1002 USER_MODALS_INFO_1002;
typedef struct _USER_MODALS_INFO_1003 USER_MODALS_INFO_1003;
typedef struct _USER_MODALS_INFO_1004 USER_MODALS_INFO_1004;
typedef struct _USER_MODALS_INFO_1005 USER_MODALS_INFO_1005;
typedef struct _USER_MODALS_INFO_1006 USER_MODALS_INFO_1006;
typedef struct _USER_MODALS_INFO_1007 USER_MODALS_INFO_1007;
enum WEBCRAWL_RECURSEFLAGS {WEBCRAWL_DONT_MAKE_STICKY = 0x1,WEBCRAWL_GET_IMAGES = 0x2,WEBCRAWL_GET_VIDEOS = 0x4,WEBCRAWL_GET_BGSOUNDS = 0x8,WEBCRAWL_GET_CONTROLS = 0x10,WEBCRAWL_LINKS_ELSEWHERE = 0x20,WEBCRAWL_IGNORE_ROBOTSTXT = 0x80,};
typedef struct _WINDBG_EXTENSION_APIS WINDBG_EXTENSION_APIS;
typedef struct WINTRUST_CATALOG_INFO_ WINTRUST_CATALOG_INFO;
struct WebViewFolderContents;
enum _AM_ASPECT_RATIO_MODE {AM_ARMODE_STRETCHED = 0x0,AM_ARMODE_LETTER_BOX = 0x1,AM_ARMODE_CROP = 0x2,AM_ARMODE_STRETCHED_AS_PRIMARY = 0x3,};
struct _Alpha_EV4_MEM_Format {unsigned int Disp : 12;unsigned int QuadWord : 1;unsigned int RWcheck : 1;unsigned int Alt : 1;unsigned int Physical : 1;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_EV4_REI_Format {unsigned int IGN : 14;unsigned int zero : 1;unsigned int one : 1;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_EV5_MEM_Format {unsigned int Disp : 10;unsigned int Lock_Cond : 1;unsigned int Vpte : 1;unsigned int QuadWord : 1;unsigned int RWcheck : 1;unsigned int Alt : 1;unsigned int Physical : 1;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_EV5_REI_Format {unsigned int IGN : 14;unsigned int Type : 2;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
enum _CLUADMEX_OBJECT_TYPE {CLUADMEX_OT_NONE = 0x0,CLUADMEX_OT_CLUSTER = 0x1,CLUADMEX_OT_NODE = 0x2,CLUADMEX_OT_GROUP = 0x3,CLUADMEX_OT_RESOURCE = 0x4,CLUADMEX_OT_RESOURCETYPE = 0x5,CLUADMEX_OT_NETWORK = 0x6,CLUADMEX_OT_NETINTERFACE = 0x7,};
enum _CM_SERVICE_LOAD_TYPE {BootLoad = 0x0,SystemLoad = 0x1,AutoLoad = 0x2,DemandLoad = 0x3,DisableLoad = 0x4,};
enum _CM_SERVICE_NODE_TYPE {DriverType = 0x1,FileSystemType = 0x2,Win32ServiceOwnProcess = 0x10,Win32ServiceShareProcess = 0x20,AdapterType = 0x4,RecognizerType = 0x8,};
enum _D3DRMFRAMECONSTRAINT {D3DRMCONSTRAIN_Z = 0x0,D3DRMCONSTRAIN_Y = 0x1,D3DRMCONSTRAIN_X = 0x2,};
struct _RPC_PROTSEQ_ENDPOINT {unsigned char *RpcProtocolSequence;unsigned char *Endpoint;};
struct mc_prepare_to_receive {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char ptr_type;unsigned char locks;};
enum tagAMTVAudioEventType {AMTVAUDIO_EVENT_CHANGED = 0x1,};
enum tagCameraControlFlags {CameraControl_Flags_Manual = 0x0,CameraControl_Flags_Auto = 0x1,};
enum tagQualityMessageType {Famine = 0x0,Flood = 0x1,};
enum translateurl_in_flags {TRANSLATEURL_FL_GUESS_PROTOCOL = 0x1,TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 0x2,};
typedef struct _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
typedef struct tACMFILTERTAGDETAILSA ACMFILTERTAGDETAILSA;
typedef struct tACMFILTERTAGDETAILSW ACMFILTERTAGDETAILSW;
typedef struct tACMFORMATTAGDETAILSA ACMFORMATTAGDETAILSA;
typedef struct tACMFORMATTAGDETAILSW ACMFORMATTAGDETAILSW;
typedef unsigned int AFTP_BLOCK_SIZE_TYPE;
typedef unsigned int AFTP_INFO_LEVEL_TYPE;
typedef unsigned int AFTP_WRITE_MODE_TYPE;
typedef struct _AllocatorProperties ALLOCATOR_PROPERTIES;
typedef struct _Alpha_EV4_MEM_Format Alpha_EV4_MEM_Format;
typedef struct _Alpha_EV4_REI_Format Alpha_EV4_REI_Format;
typedef struct _Alpha_EV5_MEM_Format Alpha_EV5_MEM_Format;
typedef struct _Alpha_EV5_REI_Format Alpha_EV5_REI_Format;
struct CCertEncodeBitString;
struct CCertEncodeDateArray;
struct CCertEncodeLongArray;
typedef struct _CERT_PUBLIC_KEY_INFO CERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_PARA CERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO CERT_STORE_PROV_INFO;
typedef struct _CHANGER_ELEMENT_LIST CHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA CHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION CHANGER_SET_POSITION;
typedef struct tagCInterfaceStubHeader CInterfaceStubHeader;
typedef CLUSPROP_DWORD CLUSPROP_DISK_NUMBER;
enum CLUSTER_NETWORK_ENUM {CLUSTER_NETWORK_ENUM_NETINTERFACES = 0x1,CLUSTER_NETWORK_ENUM_ALL = 0x1,};
enum CLUSTER_NETWORK_ROLE {ClusterNetworkRoleNone = 0x0,ClusterNetworkRoleInternalUse = 0x1,ClusterNetworkRoleClientAccess = 0x2,ClusterNetworkRoleInternalAndClient = 0x3,};
enum CLUS_CHARACTERISTICS {CLUS_CHAR_UNKNOWN = 0x0,CLUS_CHAR_QUORUM = 0x1,CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 0x2,};
struct CMLangConvertCharset;
typedef signed int CM_CONVERSATION_TYPE;
typedef struct _CRL_DIST_POINTS_INFO CRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM CRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY CRYPT_OID_FUNC_ENTRY;
typedef struct csimaadpcmwaveformat_tag CSIMAADPCMWAVEFORMAT;
typedef struct _CTL_ANY_SUBJECT_INFO CTL_ANY_SUBJECT_INFO;
struct ClusResTypeResources {struct ClusResTypeResourcesVtbl *lpVtbl;};
typedef struct _D3DExecuteBufferDesc D3DEXECUTEBUFFERDESC;
typedef struct _D3DRMPMESHLOADSTATUS D3DRMPMESHLOADSTATUS;
enum DBCONVERTFLAGSENUM20 {DBCONVERTFLAGS_ISLONG = 0x2,DBCONVERTFLAGS_ISFIXEDLENGTH = 0x4,DBCONVERTFLAGS_FROMVARIANT = 0x8,};
typedef struct _DDVIDEOPORTBANDWIDTH DDVIDEOPORTBANDWIDTH;
typedef struct _DEV_BROADCAST_HANDLE DEV_BROADCAST_HANDLE;
typedef struct _DEV_BROADCAST_PORT_A DEV_BROADCAST_PORT_A;
typedef struct _DEV_BROADCAST_PORT_W DEV_BROADCAST_PORT_W;
typedef struct _DEV_BROADCAST_VOLUME DEV_BROADCAST_VOLUME;
typedef DIDEVICEINSTANCE_DX3A DIDEVICEINSTANCE_DX3;
typedef struct _C5C9E4429F4E5976A7E6A04308F34D53 DPMSG_SETSESSIONDESC;
struct DispIHTMLAreaElement {struct DispIHTMLAreaElementVtbl *lpVtbl;};
struct DispIHTMLBaseElement {struct DispIHTMLBaseElementVtbl *lpVtbl;};
struct DispIHTMLBodyElement {struct DispIHTMLBodyElementVtbl *lpVtbl;};
struct DispIHTMLDivPosition {struct DispIHTMLDivPositionVtbl *lpVtbl;};
struct DispIHTMLFontElement {struct DispIHTMLFontElementVtbl *lpVtbl;};
struct DispIHTMLFormElement {struct DispIHTMLFormElementVtbl *lpVtbl;};
struct DispIHTMLLinkElement {struct DispIHTMLLinkElementVtbl *lpVtbl;};
struct DispIHTMLListElement {struct DispIHTMLListElementVtbl *lpVtbl;};
struct DispIHTMLMetaElement {struct DispIHTMLMetaElementVtbl *lpVtbl;};
struct DispIHTMLParaElement {struct DispIHTMLParaElementVtbl *lpVtbl;};
struct DispIHTMLSpanElement {struct DispIHTMLSpanElementVtbl *lpVtbl;};
struct DispIHTMLTextElement {struct DispIHTMLTextElementVtbl *lpVtbl;};
typedef struct _DistributedLockOwner DistributedLockOwner;
typedef struct _DistributedLockReply DistributedLockReply;
typedef struct tagEMRTRANSPARENTBLT EMREMRTRANSPARENTBLT;
typedef struct tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH EMRSTROKEANDFILLPATH;
typedef struct _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
typedef struct _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
typedef struct _FILEGROUPDESCRIPTORA FILEGROUPDESCRIPTORA;
typedef struct _FILEGROUPDESCRIPTORW FILEGROUPDESCRIPTORW;
typedef struct _FILE_OBJECTID_BUFFER FILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
typedef struct _FORMAT_EX_PARAMETERS FORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
typedef struct g721_adpcmwaveformat_tag G721_ADPCMWAVEFORMAT;
typedef struct g723_adpcmwaveformat_tag G723_ADPCMWAVEFORMAT;
typedef struct __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
struct HDRVDIALOGINSTANCE__ {int unused;};
struct HTMLInputFileElement;
struct HTMLInputImageEvents {struct HTMLInputImageEventsVtbl *lpVtbl;};
struct HTMLInputTextElement;
typedef struct _HTTP_FILTER_RAW_DATA HTTP_FILTER_RAW_DATA;
struct IAMBufferNegotiation {struct IAMBufferNegotiationVtbl *lpVtbl;};
struct IAMExtendedErrorInfo {struct IAMExtendedErrorInfoVtbl *lpVtbl;};
struct IAMTimecodeGenerator {struct IAMTimecodeGeneratorVtbl *lpVtbl;};
struct IAMTunerNotification {struct IAMTunerNotificationVtbl *lpVtbl;};
struct IAMVfwCaptureDialogs {struct IAMVfwCaptureDialogsVtbl *lpVtbl;};
struct IASQLOLEBulkCopySink {struct IASQLOLEBulkCopySinkVtbl *lpVtbl;};
struct IASQLOLEConfigValues {struct IASQLOLEConfigValuesVtbl *lpVtbl;};
struct IASQLOLEPublications {struct IASQLOLEPublicationsVtbl *lpVtbl;};
struct IASQLOLEQueryResults {struct IASQLOLEQueryResultsVtbl *lpVtbl;};
struct IASQLOLERemoteLogins {struct IASQLOLERemoteLoginsVtbl *lpVtbl;};
struct IASQLOLERemoteServer {struct IASQLOLERemoteServerVtbl *lpVtbl;};
struct IASQLOLEServerGroups {struct IASQLOLEServerGroupsVtbl *lpVtbl;};
struct IASQLOLESubscription {struct IASQLOLESubscriptionVtbl *lpVtbl;};
struct IASQLOLETransferSink {struct IASQLOLETransferSinkVtbl *lpVtbl;};
struct IAgentCtlAudioObject {struct IAgentCtlAudioObjectVtbl *lpVtbl;};
struct IAgentCtlSpeechInput {struct IAgentCtlSpeechInputVtbl *lpVtbl;};
struct ICaptureGraphBuilder {struct ICaptureGraphBuilderVtbl *lpVtbl;};
struct ICertEncodeBitString {struct ICertEncodeBitStringVtbl *lpVtbl;};
struct ICertEncodeDateArray {struct ICertEncodeDateArrayVtbl *lpVtbl;};
struct ICertEncodeLongArray {struct ICertEncodeLongArrayVtbl *lpVtbl;};
struct IDirect3DRMAnimation {struct IDirect3DRMAnimationVtbl *lpVtbl;};
struct IDirect3DRMFaceArray {struct IDirect3DRMFaceArrayVtbl *lpVtbl;};
struct IDirect3DRMWinDevice {struct IDirect3DRMWinDeviceVtbl *lpVtbl;};
struct IDirectDrawVideoPort {struct IDirectDrawVideoPortVtbl *lpVtbl;};
struct IDirectInputDevice2A {struct IDirectInputDevice2AVtbl *lpVtbl;};
struct IDirectInputDevice2W {struct IDirectInputDevice2WVtbl *lpVtbl;};
struct IDirectSound3DBuffer {struct IDirectSound3DBufferVtbl *lpVtbl;};
struct IDtcLuSubordinateDtc {struct IDtcLuSubordinateDtcVtbl *lpVtbl;};
struct IEnumParticipantInfo {struct IEnumParticipantInfoVtbl *lpVtbl;};
struct IEnumRemoteByteValue {struct IEnumRemoteByteValueVtbl *lpVtbl;};
struct IEnumRemoteCharValue {struct IEnumRemoteCharValueVtbl *lpVtbl;};
struct IEnumRemoteLongValue {struct IEnumRemoteLongValueVtbl *lpVtbl;};
struct IEnumTerminalClasses {struct IEnumTerminalClassesVtbl *lpVtbl;};
struct IExchangeFolderRules {struct IExchangeFolderRulesVtbl *lpVtbl;};
struct IExchangeManageStore {struct IExchangeManageStoreVtbl *lpVtbl;};
struct IExchangeModifyTable {struct IExchangeModifyTableVtbl *lpVtbl;};
struct IGetClusterGroupInfo {struct IGetClusterGroupInfoVtbl *lpVtbl;};
struct IHTMLAreasCollection {struct IHTMLAreasCollectionVtbl *lpVtbl;};
struct IHTMLBaseFontElement {struct IHTMLBaseFontElementVtbl *lpVtbl;};
struct IHTMLFieldSetElement {struct IHTMLFieldSetElementVtbl *lpVtbl;};
struct IHTMLFrameSetElement {struct IHTMLFrameSetElementVtbl *lpVtbl;};
struct IHTMLSelectionObject {struct IHTMLSelectionObjectVtbl *lpVtbl;};
struct IHTMLTableRowMetrics {struct IHTMLTableRowMetricsVtbl *lpVtbl;};
struct IHTMLTextAreaElement {struct IHTMLTextAreaElementVtbl *lpVtbl;};
struct IInternetZoneManager {struct IInternetZoneManagerVtbl *lpVtbl;};
struct IJavaEnumRemoteField {struct IJavaEnumRemoteFieldVtbl *lpVtbl;};
typedef struct _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
struct IMLangConvertCharset {struct IMLangConvertCharsetVtbl *lpVtbl;};
typedef struct tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;
struct IObjectAccessControl {struct IObjectAccessControlVtbl *lpVtbl;};
struct IOleUILinkContainerA {struct IOleUILinkContainerAVtbl *lpVtbl;};
struct IOleUILinkContainerW {struct IOleUILinkContainerWVtbl *lpVtbl;};
typedef struct _IPX_NEXT_HOP_ADDRESS IPX_NEXT_HOP_ADDRESS;
struct IPerPropertyBrowsing {struct IPerPropertyBrowsingVtbl *lpVtbl;};
struct IPersistPropertyBag2 {struct IPersistPropertyBag2Vtbl *lpVtbl;};
struct IRemoteBooleanObject {struct IRemoteBooleanObjectVtbl *lpVtbl;};
struct IRemoteComponentUtil {struct IRemoteComponentUtilVtbl *lpVtbl;};
struct IResourceManagerSink {struct IResourceManagerSinkVtbl *lpVtbl;};
struct IRichEditOleCallback {struct IRichEditOleCallbackVtbl *lpVtbl;};
struct IRoleAssociationUtil {struct IRoleAssociationUtilVtbl *lpVtbl;};
struct IRowsetChangeExtInfo {struct IRowsetChangeExtInfoVtbl *lpVtbl;};
struct IRowsetChapterMember {struct IRowsetChapterMemberVtbl *lpVtbl;};
struct ISharedPropertyGroup {struct ISharedPropertyGroupVtbl *lpVtbl;};
struct IShellFolderViewDual {struct IShellFolderViewDualVtbl *lpVtbl;};
struct ITBasicAudioTerminal {struct ITBasicAudioTerminalVtbl *lpVtbl;};
struct ITrackFileRestricted {struct ITrackFileRestrictedVtbl *lpVtbl;};
struct ITransactionReceiver {struct ITransactionReceiverVtbl *lpVtbl;};
struct ITransactionResource {struct ITransactionResourceVtbl *lpVtbl;};
struct IWEExtendContextMenu {struct IWEExtendContextMenuVtbl *lpVtbl;};
typedef struct _7D6AD1D4C0599A70ED2A75DF53A62D54 KSPROPERTY_POSITIONS;
typedef struct _F1FF9EB17A5B0DC512AB60E4FE6215DC KSPROPERTY_SERIALHDR;
typedef struct tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
typedef struct linemediacontroltone_tag LINEMEDIACONTROLTONE;
typedef struct _8C804DA91EAA1D72F3F02F1E499057D7 LLC_BUFFER_GET_PARMS;
typedef struct _AB97F029BC7AD90C3813597C038C5112 LLC_DIR_STATUS_PARMS;
typedef struct _D4B41BFB0D7ACAABEF7B64D0EE03F789 LLC_DLC_MODIFY_PARMS;
typedef struct _LOCALGROUP_INFO_1002 LOCALGROUP_INFO_1002;
typedef struct IASQLOLEAlertSystem *LPASQLOLEALERTSYSTEM;
typedef struct IASQLOLEApplication *LPASQLOLEAPPLICATION;
typedef struct IASQLOLEConfigValue *LPASQLOLECONFIGVALUE;
typedef struct IASQLOLEPublication *LPASQLOLEPUBLICATION;
typedef struct IASQLOLERemoteLogin *LPASQLOLEREMOTELOGIN;
typedef struct IASQLOLEServerGroup *LPASQLOLESERVERGROUP;
typedef struct _455481A63A960E136730B1239333B9FD *LPAVICOMPRESSOPTIONS;
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
typedef struct _BROWSER_STATISTICS *LPBROWSER_STATISTICS;
typedef  DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;
typedef  DIDEVICEINSTANCEW *LPCDIDEVICEINSTANCEW;
typedef  DIPROPGUIDANDPATH *LPCDIPROPGUIDANDPATH;
typedef struct _CHARDEVQ_INFO_1002 *LPCHARDEVQ_INFO_1002;
typedef struct _CHARDEVQ_INFO_1003 *LPCHARDEVQ_INFO_1003;
typedef struct tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;
typedef struct CLUSTERVERSIONINFO *LPCLUSTERVERSIONINFO;
typedef struct _D3DLIGHTINGELEMENT *LPD3DLIGHTINGELEMENT;
typedef struct _D3DPROCESSVERTICES *LPD3DPROCESSVERTICES;
typedef struct _DDVIDEOPORTCONNECT *LPDDVIDEOPORTCONNECT;
typedef struct DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;
typedef struct _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;
typedef struct IDirect3DRMMaterial *LPDIRECT3DRMMATERIAL;
typedef struct IDirect3DRMTexture2 *LPDIRECT3DRMTEXTURE2;
typedef struct IDirect3DRMViewport *LPDIRECT3DRMVIEWPORT;
typedef struct IDirectDrawSurface2 *LPDIRECTDRAWSURFACE2;
typedef struct IDirectDrawSurface3 *LPDIRECTDRAWSURFACE3;
typedef struct IDirectInputDevice2A *LPDIRECTINPUTDEVICE2;
typedef struct IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;
typedef struct IDirectInputDeviceW *LPDIRECTINPUTDEVICEW;
typedef struct IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;
typedef struct _DPLDATA_PLAYERGUID *LPDPLDATA_PLAYERGUID;
typedef struct _DPLMSG_GETPROPERTY *LPDPLMSG_GETPROPERTY;
typedef struct _DPLMSG_SETPROPERTY *LPDPLMSG_SETPROPERTY;
typedef struct _2F1E0242A20BC17A87F654C54F0A4255 *LPDPMSG_STARTSESSION;
typedef IEnumRemoteIntValue *LPENUMREMOTEINTVALUE;
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef struct IExchangeRuleAction *LPEXCHANGERULEACTION;
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef struct _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;
typedef struct _GROUP_USERS_INFO_0 *LPGROUP_USERS_INFO_0;
typedef struct _GROUP_USERS_INFO_1 *LPGROUP_USERS_INFO_1;
typedef struct tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;
typedef IHlinkBrowseContext *LPHLINKBROWSECONTEXT;
typedef struct _HSE_URL_MAPEX_INFO *LPHSE_URL_MAPEX_INFO;
typedef struct IInstallAudioCodecs *LPINSTALLAUDIOCODECS;
typedef struct IInstallVideoCodecs *LPINSTALLVIDEOCODECS;
typedef struct lineagentgrouplist_tag *LPLINEAGENTGROUPLIST;
typedef struct IDirect3DRMDevice **LPLPDIRECT3DRMDEVICE;
typedef struct IDirect3DRMFrame2 **LPLPDIRECT3DRMFRAME2;
typedef struct IDirect3DRMObject **LPLPDIRECT3DRMOBJECT;
typedef struct IDirect3DRMShadow **LPLPDIRECT3DRMSHADOW;
typedef struct IDirect3DRMVisual **LPLPDIRECT3DRMVISUAL;
typedef struct IMAPIFormAdviseSink *LPMAPIFORMADVISESINK;
typedef struct IMAPIViewAdviseSink *LPMAPIVIEWADVISESINK;
typedef struct tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;
typedef struct tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef struct tagOLEUICHANGESOURCEA *LPOLEUICHANGESOURCEA;
typedef struct tagOLEUICHANGESOURCEW *LPOLEUICHANGESOURCEW;
typedef struct tagOLEUIINSERTOBJECTA *LPOLEUIINSERTOBJECTA;
typedef struct tagOLEUIINSERTOBJECTW *LPOLEUIINSERTOBJECTW;
typedef struct tagOLEUIPASTESPECIALA *LPOLEUIPASTESPECIALA;
typedef struct tagOLEUIPASTESPECIALW *LPOLEUIPASTESPECIALW;
typedef struct _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;
typedef IPersistPropertyBag *LPPERSISTPROPERTYBAG;
typedef struct _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;
typedef IPropertyNotifySink *LPPROPERTYNOTIFYSINK;
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
typedef IRemoteDebugManager *LPREMOTEDEBUGMANAGER;
typedef IRemoteDoubleObject *LPREMOTEDOUBLEOBJECT;
typedef struct _RSVP_FILTERSPEC_V4 *LPRSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 *LPRSVP_FILTERSPEC_V6;
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
typedef struct _SERVICE_ASYNC_INFO *LPSERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE *LPSERVICE_TYPE_VALUE;
typedef struct _DF483159CAAEA82745063FD51FDE02D7 *LPSMAPIFORMINFOARRAY;
typedef struct _74061E8FA51BA29473CFAA122BBAB1AC *LPSMESSAGECLASSARRAY;
typedef struct _STAT_WORKSTATION_0 *LPSTAT_WORKSTATION_0;
typedef struct _USER_MODALS_INFO_0 *LPUSER_MODALS_INFO_0;
typedef struct _USER_MODALS_INFO_1 *LPUSER_MODALS_INFO_1;
typedef struct _USER_MODALS_INFO_2 *LPUSER_MODALS_INFO_2;
typedef struct _USER_MODALS_INFO_3 *LPUSER_MODALS_INFO_3;
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
typedef struct _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *LPWSANAMESPACE_INFOW;
typedef struct _LSA_AUTH_INFORMATION LSA_AUTH_INFORMATION;
enum MACRO_AGENTPROVERROR {AGENTPROVERROR_INIT = -2147212799,AGENTPROVERROR_CHARACTERVERSION = -2147212798,AGENTPROVERROR_VERSION = -2147212797,AGENTPROVERROR_MAGIC = -2147212796,AGENTPROVERROR_CHARACTERINVALID = -2147212795,AGENTPROVERROR_WAVEINVALID = -2147212794,AGENTPROVERROR_WAVECORRUPT = -2147212793,AGENTPROVERROR_MMIO = -2147212792,AGENTPROVERROR_PROTOCOL = -2147212791,};
enum MACRO_APMMENUSUSPEND {APMMENUSUSPEND_DISABLED = 0,APMMENUSUSPEND_ENABLED = 1,APMMENUSUSPEND_UNDOCKED = 2,APMMENUSUSPEND_NOCHANGE = 128,};
enum MACRO_AVIFILEHANDLER {AVIFILEHANDLER_CANREAD = 0x1,AVIFILEHANDLER_CANWRITE = 0x2,AVIFILEHANDLER_CANACCEPTNONRGB = 0x4,};
enum MACRO_AVSTREAMMASTER {AVSTREAMMASTER_AUDIO = 0,AVSTREAMMASTER_NONE = 1,};
enum MACRO_BERR_SIGNATURE {BERR_SIGNATURE_MISMATCH = 0xC00000AC,BERR_INVALID_BASEPOINT = 0xC00000AD,BERR_NO_SUCH_BASEPOINT = 0xC00000AE,BERR_INVALID_CONTAINER = 0xC00000AF,BERR_NO_SUCH_CONTAINER = 0xC00000B0,BERR_DEFAULT_USER_ERROR = 0xC00000B1,BERR_NO_WORKSPACE = 0xC00000B2,BERR_DUA_UNAVAILABLE = 0xC00000B3,BERR_NEGOTIATE_FAILURE = 0xC00000B4,BERR_DSA_BIND_FAILURE = 0xC00000B5,BERR_DEFAULT_BIND_FAILURE = 0xC00000B6,BERR_ILLEGAL_DSANAME = 0xC00000B7,BERR_SERVER_NOT_WRITABLE = 0xC00000B8,BERR_DSA_UNBIND_FAILURE = 0xC00000B9,BERR_SCHEMA_LOAD_FAILED = 0xC00000BA,BERR_XOM_SCHEMA_READ = 0xC00000BB,BERR_XDS_SCHEMA_READ = 0xC00000BC,BERR_ATTRIBUTES_UNAVAILABLE = 0xC00000BD,BERR_ATTRIBUTE_PROPERTY_UNAVAILABLE = 0xC00000BE,BERR_INIT_ATTR_UNKNOWN = 0xC00000BF,BERR_UNREC_OBJECT_TYPE = 0xC00000C0,BERR_OBJECT_TYPE_NOT_IMPLEMENTED = 0xC00000C1,BERR_UNREC_ATTR_SYNTAX = 0xC00000C2,BERR_ATTR_SYNTAX_NOT_IMPLEMENTED = 0xC00000C3,BERR_VALUE_SYNTAX_NOT_IMPLEMENTED = 0xC00000C4,BERR_UNREC_VALUE_SYNTAX = 0xC00000C5,BERR_VALUE_OBJECT_TYPE_NOT_IMPLEMENTED = 0xC00000C6,BERR_UNREC_VALUE_OBJECT_TYPE = 0xC00000C7,BERR_INIT_CLASS_UNKNOWN = 0xC00000C8,BERR_CLASSES_UNAVAILABLE = 0xC00000C9,BERR_CLASS_PROPERTY_UNAVAILABLE = 0xC00000CA,BERR_CLASS_ATTRIBUTE_MISSING = 0xC00000CB,BERR_NO_IMPORT_FILE = 0xC00000CC,BERR_NO_EXPORT_FILE = 0xC00000CD,BERR_INVALID_IMPORT_FILE = 0xC00000CE,BERR_INVALID_EXPORT_FILE = 0xC00000CF,BERR_FILE_IS_UNICODE = 0xC00000D0,BERR_FILE_IS_NOT_UNICODE = 0xC00000D1,BERR_INVALID_FILENAME = 0xC00000D2,BERR_CANT_RENAME_IMP_FILE = 0xC00000D3,BERR_CANT_RENAME_EXPORT_FILE = 0xC00000D4,BERR_FILE_IS_DIRECTORY = 0xC00000D5,BERR_FILE_IS_READONLY = 0xC00000D6,BERR_CREATE_LOG_FAILED = 0xC00000D7,BERR_CREATE_PSW_FAILED = 0xC00000D8,BERR_WRITE_PSW_ERROR = 0xC00000D9,BERR_MISSING_OBJ_CLASS = 0xC00000DA,BERR_RDN_MISSING = 0xC00000DB,BERR_MISQUOTED_IMPORT_LINE = 0xC00000DC,BERR_ILLEGAL_MODE = 0xC00000DD,BERR_MODE_COLUMN = 0xC00000DE,BERR_OUT_OF_MEMORY = 0xC00000DF,BERR_FILE_READ_FAILURE = 0xC00000E0,BERR_MISSING_COMMON_NAME_HEADER = 0xC00000E1,BERR_MISSING_OBJ_CLASS_HEADER = 0xC00000E2,BERR_HEADER_MISQUOTED = 0xC00000E3,BERR_INVALID_OBJ_CLASS = 0xC00000E4,BERR_PROXY_INIT_ERROR = 0xC00000E5,BERR_NO_PROXY_SEPARATOR = 0xC00000E6,BERR_NO_PROXY_PREFIX = 0xC00000E7,BERR_ILLEGAL_PROXY_PREFIX_LEN = 0xC00000E8,BERR_DUPLICATE_PROXY = 0xC00000E9,BERR_PROXY_GENERAL_FAILURE = 0xC00000EA,BERR_PROXY_TARGET_INVALID = 0xC00000EB,BERR_PROXY_TARGET_NOT_UNIQUE = 0xC00000EC,BERR_PROXY_INVALID = 0xC00000ED,BERR_PROXY_NOT_UNIQUE = 0xC00000EE,BERR_PROXY_GENERIC = 0xC00000EF,BERR_PROXY_SYSTEM = 0xC00000F0,BERR_CREATE_DEL_ERROR = 0xC00000F1,BERR_OM_ERROR = 0xC00000F2,BERR_ATTRIBUTE_OR_VALUE_EXISTS = 0xC00000F3,BERR_CONSTRAINT_VIOLATION = 0xC00000F4,BERR_INVALID_SYNTAX = 0xC00000F5,BERR_NO_SUCH_ATTRIBUTE_OR_VALUE = 0xC00000F6,BERR_ACCNT_LM_INIT_ERROR = 0xC00000F7,BERR_LM_INIT_ERROR = 0xC00000F8,BERR_LM_ERROR = 0xC00000F9,BERR_ACCNT_PDC_GONE = 0xC00000FA,BERR_ACCNT_LM_ERROR = 0xC00000FB,BERR_ACCNT_WIN_ERROR = 0xC00000FC,BERR_ACCNT_TOO_LONG = 0xC00000FD,BERR_ILLEGAL_ACCNT_CHARS = 0xC00000FE,BERR_LM_DELETE_ACCOUNT = 0xC00000FF,BERR_WIN_DELETE_ACCOUNT = 0xC0000100,BERR_DEL_ACCOUNT_LOOKUP_FAILED = 0xC0000101,BERR_ACCOUNT_LOOKUP_FAILED = 0x80000102,BERR_ACCNT_WIN_INIT_ERROR = 0xC0000103,BERR_WIN_INIT_ERROR = 0xC0000104,BERR_REGISTER_ERROR = 0xC0000105,BERR_WIN_ERROR = 0xC0000106,BERR_NO_ATTRIBUTES_SPECIFIED = 0xC0000107,BERR_ATTRIBUTE_UNKNOWN = 0xC0000108,BERR_ATTRIBUTE_NOT_IMPORTABLE = 0xC0000109,BERR_CANT_DELETE_REQUIRED_ATTRIBUTE = 0xC000010A,BERR_CANT_DELETE_ATTRIBUTE = 0xC000010B,BERR_DELETE_KEY_MUST_BE_SINGLE = 0xC000010C,BERR_COULD_NOT_EMPTY_MAILBOX = 0xC000010D,BERR_MALFORMED_OCTET_STRING = 0xC000010E,BERR_ILLEGAL_CHAR_IN_NUMBER = 0xC000010F,BERR_ILLEGAL_CHAR_IN_HEX_NUMBER = 0xC0000110,BERR_CANNOT_BUILD_DN = 0xC0000111,BERR_MALFORMED_DN_STRING = 0xC0000112,BERR_UNKNOWN_RDN = 0xC0000113,BERR_BADLY_SPECIFIED_DN = 0xC0000114,BERR_MALFORMED_DN_OBJECT = 0xC0000115,BERR_ACCNT_PDC_DISAPPEARED = 0xC0000116,BERR_XOM_REVOKE_MEMBERSHIP = 0xC0000117,BERR_XDS_ERROR = 0xC0000118,BERR_XDS_CREATE = 0xC0000119,BERR_XDS_MODIFY = 0xC000011A,BERR_XDS_REMOVE = 0xC000011B,BERR_XDS_DL_MEMBERSHIP = 0xC000011C,BERR_OBJECT_MEMBERSHIP_ERROR = 0xC000011D,BERR_CREATE_PATH_NOT_FOUND = 0xC000011E,BERR_CREATE_TARGET_EXISTS = 0xC000011F,BERR_MOD_TARGET_NOT_FOUND = 0xC0000120,BERR_MOD_CLASS_MISMATCH = 0xC0000121,BERR_DEL_CLASS_MISMATCH = 0xC0000122,BERR_INCORRECT_FIELD_COUNT = 0xC0000123,BERR_MISSING_REQUIRED_ATTRIBUTE = 0xC0000124,BERR_ONLY_SINGLE_CONTAINER = 0xC0000125,BERR_CANNOT_LOG_ERROR = 0xC0000126,BERR_INCLUDE_FAIL = 0xC0000127,BERR_BAD_FILE_PTR = 0xC0000128,BERR_HOME_SERVER_UNKNOWN = 0xC0000129,BERR_HOME_SERVER_NO_MTA = 0xC000012A,BERR_HOME_SERVER_NO_PRIVATE_STORE = 0xC000012B,};
enum MACRO_BIMPMSG_PROMPT {BIMPMSG_PROMPT_LOG_FULL = 0x85,BIMPMSG_PROMPT_LOG_ERROR = 0x86,BIMPMSG_PROMPT_LOG_FILE_ERROR = 0x87,};
enum MACRO_BUTTON_PRESSED {FROM_LEFT_1ST_BUTTON_PRESSED = 0x1,RIGHTMOST_BUTTON_PRESSED = 0x2,FROM_LEFT_2ND_BUTTON_PRESSED = 0x4,FROM_LEFT_3RD_BUTTON_PRESSED = 0x8,FROM_LEFT_4TH_BUTTON_PRESSED = 0x10,};
enum MACRO_CF_SCREENFONTS {CF_SCREENFONTS = 0x1,CF_PRINTERFONTS = 0x2,CF_BOTH = 0x3,CF_SHOWHELP = 0x4,CF_ENABLEHOOK = 0x8,CF_ENABLETEMPLATE = 0x10,CF_ENABLETEMPLATEHANDLE = 0x20,CF_INITTOLOGFONTSTRUCT = 0x40,CF_USESTYLE = 0x80,CF_EFFECTS = 0x100,CF_APPLY = 0x200,CF_ANSIONLY = 0x400,CF_SCRIPTSONLY = 0x400,CF_NOVECTORFONTS = 0x800,CF_NOOEMFONTS = 0x800,CF_NOSIMULATIONS = 0x1000,CF_LIMITSIZE = 0x2000,CF_FIXEDPITCHONLY = 0x4000,CF_WYSIWYG = 0x8000,CF_FORCEFONTEXIST = 0x10000,CF_SCALABLEONLY = 0x20000,CF_TTONLY = 0x40000,CF_NOFACESEL = 0x80000,CF_NOSTYLESEL = 0x100000,CF_NOSIZESEL = 0x200000,CF_SELECTSCRIPT = 0x400000,CF_NOSCRIPTSEL = 0x800000,CF_NOVERTFONTS = 0x1000000,};
enum MACRO_CLCTL_INTERNAL {CLCTL_INTERNAL_MASK = 1048576,CLCTL_USER_MASK = 2097152,CLCTL_MODIFY_MASK = 4194304,CLCTL_GLOBAL_MASK = 8388608,};
enum MACRO_CLUSCTL_OBJECT {CLUSCTL_OBJECT_SHIFT = 24,};
enum MACRO_CMS_DISABLEICM {CMS_DISABLEICM = 1,CMS_ENABLEPROOFING = 2,CMS_SETRENDERINTENT = 4,CMS_SETPROOFINTENT = 8,CMS_SETMONITORPROFILE = 16,CMS_SETPRINTERPROFILE = 32,CMS_SETTARGETPROFILE = 64,CMS_USEHOOK = 128,CMS_USEAPPLYCALLBACK = 256,CMS_MONITOROVERFLOW = -2147483648,CMS_PRINTEROVERFLOW = 1073741824,CMS_TARGETOVERFLOW = 536870912,};
enum MACRO_CONFIG_SERVICE {CONFIG_SERVICE = 1,CONFIG_SHOW_STARTUP_UI = 2,CONFIG_SHOW_CONNECT_UI = 4,CONFIG_PROMPT_FOR_CREDENTIALS = 8,};
enum MACRO_CRYPT_USERDATA {CRYPT_USERDATA = 1,};
enum MACRO_CWCSTORAGENAME {CWCSTORAGENAME = 32,};
enum MACRO_CYBUTTONBAR120 {CYBUTTONBAR120 = 38,};
enum MACRO_D3DPRASTERCAPS {D3DPRASTERCAPS_DITHER = 0x1,D3DPRASTERCAPS_ROP2 = 0x2,D3DPRASTERCAPS_XOR = 0x4,D3DPRASTERCAPS_PAT = 0x8,D3DPRASTERCAPS_ZTEST = 0x10,D3DPRASTERCAPS_SUBPIXEL = 0x20,D3DPRASTERCAPS_SUBPIXELX = 0x40,D3DPRASTERCAPS_FOGVERTEX = 0x80,D3DPRASTERCAPS_FOGTABLE = 0x100,D3DPRASTERCAPS_STIPPLE = 0x200,D3DPRASTERCAPS_ANTIALIASSORTDEPENDENT = 0x400,D3DPRASTERCAPS_ANTIALIASSORTINDEPENDENT = 0x800,D3DPRASTERCAPS_ANTIALIASEDGES = 0x1000,D3DPRASTERCAPS_MIPMAPLODBIAS = 0x2000,D3DPRASTERCAPS_ZBIAS = 0x4000,D3DPRASTERCAPS_ZBUFFERLESSHSR = 0x8000,D3DPRASTERCAPS_FOGRANGE = 0x10000,D3DPRASTERCAPS_ANISOTROPY = 0x20000,};
enum MACRO_D3DPTBLENDCAPS {D3DPTBLENDCAPS_DECAL = 0x1,D3DPTBLENDCAPS_MODULATE = 0x2,D3DPTBLENDCAPS_DECALALPHA = 0x4,D3DPTBLENDCAPS_MODULATEALPHA = 0x8,D3DPTBLENDCAPS_DECALMASK = 0x10,D3DPTBLENDCAPS_MODULATEMASK = 0x20,D3DPTBLENDCAPS_COPY = 0x40,D3DPTBLENDCAPS_ADD = 0x80,};
enum MACRO_D3DRMANIMATION {D3DRMANIMATION_OPEN = 0x1,D3DRMANIMATION_CLOSED = 0x2,D3DRMANIMATION_LINEARPOSITION = 0x4,D3DRMANIMATION_SPLINEPOSITION = 0x8,D3DRMANIMATION_SCALEANDROTATION = 0x10,D3DRMANIMATION_POSITION = 0x20,};
enum MACRO_D3DRMWIREFRAME {D3DRMWIREFRAME_CULL = 1,D3DRMWIREFRAME_HIDDENLINE = 2,};
enum MACRO_DBRPCRECOMPILE {DBRPCRECOMPILE = 0x1,DBRPCRESET = 0x4,DBRPCCURSOR = 0x8,};
enum MACRO_DBSETLOGINTIME {DBSETLOGINTIME = 10,};
enum MACRO_DBT_VPOWERDAPI {DBT_VPOWERDAPI = 0x8100,DBT_USERDEFINED = 0xFFFF,};
enum MACRO_DDENUMOVERLAYZ {DDENUMOVERLAYZ_BACKTOFRONT = 0x0,DDENUMOVERLAYZ_FRONTTOBACK = 0x1,};
enum MACRO_DDENUMSURFACES {DDENUMSURFACES_ALL = 0x1,DDENUMSURFACES_MATCH = 0x2,DDENUMSURFACES_NOMATCH = 0x4,DDENUMSURFACES_CANBECREATED = 0x8,DDENUMSURFACES_DOESEXIST = 0x10,};
enum MACRO_DESKTOPHORZRES {DESKTOPHORZRES = 118,};
enum MACRO_DESKTOPVERTRES {DESKTOPVERTRES = 117,};
enum MACRO_DIDEVTYPEMOUSE {DIDEVTYPEMOUSE_UNKNOWN = 1,DIDEVTYPEMOUSE_TRADITIONAL = 2,DIDEVTYPEMOUSE_FINGERSTICK = 3,DIDEVTYPEMOUSE_TOUCHPAD = 4,DIDEVTYPEMOUSE_TRACKBALL = 5,};
enum MACRO_DIPROPAXISMODE {DIPROPAXISMODE_ABS = 0,DIPROPAXISMODE_REL = 1,};
enum MACRO_DISPID_ONABORT {DISPID_ONABORT = 1000,DISPID_ONCHANGE = 1001,DISPID_ONERROR = 1002,DISPID_ONLOAD = 1003,DISPID_ONSELECT = 1006,DISPID_ONSUBMIT = 1007,DISPID_ONUNLOAD = 1008,DISPID_ONBOUNCE = 1009,DISPID_ONFINISH = 1010,DISPID_ONSTART = 1011,DISPID_ONLAYOUT = 1013,DISPID_ONSCROLL = 1014,DISPID_ONRESET = 1015,DISPID_ONRESIZE = 1016,DISPID_ONBEFOREUNLOAD = 1017,DISPID_ONCHANGEFOCUS = 1018,DISPID_ONCHANGEBLUR = 1019,DISPID_A_FIRST = -2147413112,DISPID_A_BACKGROUNDIMAGE = -2147413111,DISPID_A_COLOR = -2147413110,DISPID_A_TEXTTRANSFORM = -2147413108,DISPID_A_NOWRAP = -2147413107,DISPID_A_LINEHEIGHT = -2147413106,DISPID_A_TEXTINDENT = -2147413105,DISPID_A_LETTERSPACING = -2147413104,DISPID_A_LANG = -2147413103,DISPID_A_OVERFLOW = -2147413102,DISPID_A_PADDING = -2147413101,DISPID_A_PADDINGTOP = -2147413100,DISPID_A_PADDINGRIGHT = -2147413099,DISPID_A_PADDINGBOTTOM = -2147413098,DISPID_A_PADDINGLEFT = -2147413097,DISPID_A_CLEAR = -2147413096,DISPID_A_LISTTYPE = -2147413095,DISPID_A_FONTFACE = -2147413094,DISPID_A_FONTSIZE = -2147413093,DISPID_A_TEXTDECORATIONLINETHROUGH = -2147413092,DISPID_A_TEXTDECORATIONUNDERLINE = -2147413091,DISPID_A_TEXTDECORATIONBLINK = -2147413090,DISPID_A_TEXTDECORATIONNONE = -2147413089,DISPID_A_FONTSTYLE = -2147413088,DISPID_A_FONTVARIANT = -2147413087,DISPID_A_BASEFONT = -2147413086,DISPID_A_FONTWEIGHT = -2147413085,DISPID_A_TABLEBORDERCOLOR = -2147413084,DISPID_A_TABLEBORDERCOLORLIGHT = -2147413083,DISPID_A_TABLEBORDERCOLORDARK = -2147413082,DISPID_A_TABLEVALIGN = -2147413081,DISPID_A_BACKGROUND = -2147413080,DISPID_A_BACKGROUNDPOSX = -2147413079,DISPID_A_BACKGROUNDPOSY = -2147413078,DISPID_A_TEXTDECORATION = -2147413077,DISPID_A_MARGIN = -2147413076,DISPID_A_MARGINTOP = -2147413075,DISPID_A_MARGINRIGHT = -2147413074,DISPID_A_MARGINBOTTOM = -2147413073,DISPID_A_MARGINLEFT = -2147413072,DISPID_A_FONT = -2147413071,DISPID_A_FONTSIZEKEYWORD = -2147413070,DISPID_A_FONTSIZECOMBINE = -2147413069,DISPID_A_BACKGROUNDREPEAT = -2147413068,DISPID_A_BACKGROUNDATTACHMENT = -2147413067,DISPID_A_BACKGROUNDPOSITION = -2147413066,DISPID_A_WORDSPACING = -2147413065,DISPID_A_VERTICALALIGN = -2147413064,DISPID_A_BORDER = -2147413063,DISPID_A_BORDERTOP = -2147413062,DISPID_A_BORDERRIGHT = -2147413061,DISPID_A_BORDERBOTTOM = -2147413060,DISPID_A_BORDERLEFT = -2147413059,DISPID_A_BORDERCOLOR = -2147413058,DISPID_A_BORDERTOPCOLOR = -2147413057,DISPID_A_BORDERRIGHTCOLOR = -2147413056,DISPID_A_BORDERBOTTOMCOLOR = -2147413055,DISPID_A_BORDERLEFTCOLOR = -2147413054,DISPID_A_BORDERWIDTH = -2147413053,DISPID_A_BORDERTOPWIDTH = -2147413052,DISPID_A_BORDERRIGHTWIDTH = -2147413051,DISPID_A_BORDERBOTTOMWIDTH = -2147413050,DISPID_A_BORDERLEFTWIDTH = -2147413049,DISPID_A_BORDERSTYLE = -2147413048,DISPID_A_BORDERTOPSTYLE = -2147413047,DISPID_A_BORDERRIGHTSTYLE = -2147413046,DISPID_A_BORDERBOTTOMSTYLE = -2147413045,DISPID_A_BORDERLEFTSTYLE = -2147413044,DISPID_A_TEXTDECORATIONOVERLINE = -2147413043,DISPID_A_FLOAT = -2147413042,DISPID_A_DISPLAY = -2147413041,DISPID_A_LISTSTYLETYPE = -2147413040,DISPID_A_LISTSTYLEPOSITION = -2147413039,DISPID_A_LISTSTYLEIMAGE = -2147413038,DISPID_A_LISTSTYLE = -2147413037,DISPID_A_WHITESPACE = -2147413036,DISPID_A_PAGEBREAKBEFORE = -2147413035,DISPID_A_PAGEBREAKAFTER = -2147413034,DISPID_A_SCROLL = -2147413033,DISPID_A_VISIBILITY = -2147413032,DISPID_A_HIDDEN = -2147413031,DISPID_A_FILTER = -2147413030,DISPID_DEFAULTVALUE = -2147413029,DISPID_A_POSITION = -2147413022,DISPID_A_ZINDEX = -2147413021,DISPID_A_CLIP = -2147413020,DISPID_A_CLIPRECTTOP = -2147413019,DISPID_A_CLIPRECTRIGHT = -2147413018,DISPID_A_CLIPRECTBOTTOM = -2147413017,DISPID_A_CLIPRECTLEFT = -2147413016,DISPID_A_FONTFACESRC = -2147413015,DISPID_A_STYLETEXT = -2147413013,DISPID_A_LANGUAGE = -2147413012,DISPID_A_VALUE = -2147413011,DISPID_A_CURSOR = -2147413010,DISPID_EVPROP_ONMOUSEOVER = -2147412112,DISPID_EVMETH_ONMOUSEOVER = -2147418104,DISPID_EVPROP_ONMOUSEOUT = -2147412111,DISPID_EVMETH_ONMOUSEOUT = -2147418103,DISPID_EVPROP_ONMOUSEDOWN = -2147412110,DISPID_EVPROP_ONMOUSEUP = -2147412109,DISPID_EVPROP_ONMOUSEMOVE = -2147412108,DISPID_EVPROP_ONKEYDOWN = -2147412107,DISPID_EVPROP_ONKEYUP = -2147412106,DISPID_EVPROP_ONKEYPRESS = -2147412105,DISPID_EVPROP_ONCLICK = -2147412104,DISPID_EVPROP_ONDBLCLICK = -2147412103,DISPID_EVPROP_ONSELECT = -2147412102,DISPID_EVMETH_ONSELECT = 1006,DISPID_EVPROP_ONSUBMIT = -2147412101,DISPID_EVMETH_ONSUBMIT = 1007,DISPID_EVPROP_ONRESET = -2147412100,DISPID_EVMETH_ONRESET = 1015,DISPID_EVPROP_ONHELP = -2147412099,DISPID_EVMETH_ONHELP = -2147418102,DISPID_EVPROP_ONFOCUS = -2147412098,DISPID_EVMETH_ONFOCUS = -2147418111,DISPID_EVPROP_ONBLUR = -2147412097,DISPID_EVMETH_ONBLUR = -2147418112,DISPID_EVPROP_ONROWEXIT = -2147412094,DISPID_EVMETH_ONROWEXIT = -2147418106,DISPID_EVPROP_ONROWENTER = -2147412093,DISPID_EVMETH_ONROWENTER = -2147418105,DISPID_EVPROP_ONBOUNCE = -2147412092,DISPID_EVMETH_ONBOUNCE = 1009,DISPID_EVPROP_ONBEFOREUPDATE = -2147412091,DISPID_EVMETH_ONBEFOREUPDATE = -2147418108,DISPID_EVPROP_ONAFTERUPDATE = -2147412090,DISPID_EVMETH_ONAFTERUPDATE = -2147418107,DISPID_EVPROP_ONBEFOREDRAGOVER = -2147412089,DISPID_EVPROP_ONBEFOREDROPORPASTE = -2147412088,DISPID_EVPROP_ONREADYSTATECHANGE = -2147412087,DISPID_EVMETH_ONREADYSTATECHANGE = -609,DISPID_EVPROP_ONFINISH = -2147412086,DISPID_EVMETH_ONFINISH = 1010,DISPID_EVPROP_ONSTART = -2147412085,DISPID_EVMETH_ONSTART = 1011,DISPID_EVPROP_ONABORT = -2147412084,DISPID_EVMETH_ONABORT = 1000,DISPID_EVPROP_ONERROR = -2147412083,DISPID_EVMETH_ONERROR = 1002,DISPID_EVPROP_ONCHANGE = -2147412082,DISPID_EVMETH_ONCHANGE = 1001,DISPID_EVPROP_ONSCROLL = -2147412081,DISPID_EVMETH_ONSCROLL = 1014,DISPID_EVPROP_ONLOAD = -2147412080,DISPID_EVMETH_ONLOAD = 1003,DISPID_EVPROP_ONUNLOAD = -2147412079,DISPID_EVMETH_ONUNLOAD = 1008,DISPID_EVPROP_ONLAYOUT = -2147412078,DISPID_EVMETH_ONLAYOUT = 1013,DISPID_EVPROP_ONDRAGSTART = -2147412077,DISPID_EVMETH_ONDRAGSTART = -2147418101,DISPID_EVPROP_ONRESIZE = -2147412076,DISPID_EVMETH_ONRESIZE = 1016,DISPID_EVPROP_ONSELECTSTART = -2147412075,DISPID_EVMETH_ONSELECTSTART = -2147418100,DISPID_EVPROP_ONERRORUPDATE = -2147412074,DISPID_EVMETH_ONERRORUPDATE = -2147418099,DISPID_EVPROP_ONBEFOREUNLOAD = -2147412073,DISPID_EVMETH_ONBEFOREUNLOAD = 1017,DISPID_EVPROP_ONDATASETCHANGED = -2147412072,DISPID_EVMETH_ONDATASETCHANGED = -2147418098,DISPID_EVPROP_ONDATAAVAILABLE = -2147412071,DISPID_EVMETH_ONDATAAVAILABLE = -2147418097,DISPID_EVPROP_ONDATASETCOMPLETE = -2147412070,DISPID_EVMETH_ONDATASETCOMPLETE = -2147418096,DISPID_EVPROP_ONFILTER = -2147412069,DISPID_EVMETH_ONFILTER = -2147418095,DISPID_EVMETH_ONCHANGEFOCUS = 1018,DISPID_EVPROP_ONCHANGEFOCUS = -2147412068,DISPID_EVMETH_ONCHANGEBLUR = 1019,DISPID_EVPROP_ONCHANGEBLUR = -2147412067,DISPID_EVPROPS_COUNT = 45,DISPID_IHTMLSTYLE_FONTFAMILY = -2147413094,DISPID_IHTMLSTYLE_FONTSTYLE = -2147413088,DISPID_IHTMLSTYLE_FONTVARIANT = -2147413087,DISPID_IHTMLSTYLE_FONTWEIGHT = -2147413085,DISPID_IHTMLSTYLE_FONTSIZE = -2147413093,DISPID_IHTMLSTYLE_FONT = -2147413071,DISPID_IHTMLSTYLE_COLOR = -2147413110,DISPID_IHTMLSTYLE_BACKGROUND = -2147413080,DISPID_IHTMLSTYLE_BACKGROUNDIMAGE = -2147413111,DISPID_IHTMLSTYLE_BACKGROUNDREPEAT = -2147413068,DISPID_IHTMLSTYLE_BACKGROUNDATTACHMENT = -2147413067,DISPID_IHTMLSTYLE_BACKGROUNDPOSITION = -2147413066,DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONX = -2147413079,DISPID_IHTMLSTYLE_BACKGROUNDPOSITIONY = -2147413078,DISPID_IHTMLSTYLE_WORDSPACING = -2147413065,DISPID_IHTMLSTYLE_LETTERSPACING = -2147413104,DISPID_IHTMLSTYLE_TEXTDECORATION = -2147413077,DISPID_IHTMLSTYLE_TEXTDECORATIONNONE = -2147413089,DISPID_IHTMLSTYLE_TEXTDECORATIONUNDERLINE = -2147413091,DISPID_IHTMLSTYLE_TEXTDECORATIONOVERLINE = -2147413043,DISPID_IHTMLSTYLE_TEXTDECORATIONLINETHROUGH = -2147413092,DISPID_IHTMLSTYLE_TEXTDECORATIONBLINK = -2147413090,DISPID_IHTMLSTYLE_VERTICALALIGN = -2147413064,DISPID_IHTMLSTYLE_TEXTTRANSFORM = -2147413108,DISPID_IHTMLSTYLE_TEXTALIGN = -2147418040,DISPID_IHTMLSTYLE_TEXTINDENT = -2147413105,DISPID_IHTMLSTYLE_LINEHEIGHT = -2147413106,DISPID_IHTMLSTYLE_MARGINTOP = -2147413075,DISPID_IHTMLSTYLE_MARGINRIGHT = -2147413074,DISPID_IHTMLSTYLE_MARGINBOTTOM = -2147413073,DISPID_IHTMLSTYLE_MARGINLEFT = -2147413072,DISPID_IHTMLSTYLE_MARGIN = -2147413076,DISPID_IHTMLSTYLE_PADDINGTOP = -2147413100,DISPID_IHTMLSTYLE_PADDINGRIGHT = -2147413099,DISPID_IHTMLSTYLE_PADDINGBOTTOM = -2147413098,DISPID_IHTMLSTYLE_PADDINGLEFT = -2147413097,DISPID_IHTMLSTYLE_PADDING = -2147413101,DISPID_IHTMLSTYLE_BORDER = -2147413063,DISPID_IHTMLSTYLE_BORDERTOP = -2147413062,DISPID_IHTMLSTYLE_BORDERRIGHT = -2147413061,DISPID_IHTMLSTYLE_BORDERBOTTOM = -2147413060,DISPID_IHTMLSTYLE_BORDERLEFT = -2147413059,DISPID_IHTMLSTYLE_BORDERCOLOR = -2147413058,DISPID_IHTMLSTYLE_BORDERTOPCOLOR = -2147413057,DISPID_IHTMLSTYLE_BORDERRIGHTCOLOR = -2147413056,DISPID_IHTMLSTYLE_BORDERBOTTOMCOLOR = -2147413055,DISPID_IHTMLSTYLE_BORDERLEFTCOLOR = -2147413054,DISPID_IHTMLSTYLE_BORDERWIDTH = -2147413053,DISPID_IHTMLSTYLE_BORDERTOPWIDTH = -2147413052,DISPID_IHTMLSTYLE_BORDERRIGHTWIDTH = -2147413051,DISPID_IHTMLSTYLE_BORDERBOTTOMWIDTH = -2147413050,DISPID_IHTMLSTYLE_BORDERLEFTWIDTH = -2147413049,DISPID_IHTMLSTYLE_BORDERSTYLE = -2147413048,DISPID_IHTMLSTYLE_BORDERTOPSTYLE = -2147413047,DISPID_IHTMLSTYLE_BORDERRIGHTSTYLE = -2147413046,DISPID_IHTMLSTYLE_BORDERBOTTOMSTYLE = -2147413045,DISPID_IHTMLSTYLE_BORDERLEFTSTYLE = -2147413044,DISPID_IHTMLSTYLE_WIDTH = -2147418107,DISPID_IHTMLSTYLE_HEIGHT = -2147418106,DISPID_IHTMLSTYLE_STYLEFLOAT = -2147413042,DISPID_IHTMLSTYLE_CLEAR = -2147413096,DISPID_IHTMLSTYLE_DISPLAY = -2147413041,DISPID_IHTMLSTYLE_VISIBILITY = -2147413032,DISPID_IHTMLSTYLE_LISTSTYLETYPE = -2147413040,DISPID_IHTMLSTYLE_LISTSTYLEPOSITION = -2147413039,DISPID_IHTMLSTYLE_LISTSTYLEIMAGE = -2147413038,DISPID_IHTMLSTYLE_LISTSTYLE = -2147413037,DISPID_IHTMLSTYLE_WHITESPACE = -2147413036,DISPID_IHTMLSTYLE_TOP = -2147418108,DISPID_IHTMLSTYLE_LEFT = -2147418109,DISPID_IHTMLSTYLE_POSITION = -2147413022,DISPID_IHTMLSTYLE_ZINDEX = -2147413021,DISPID_IHTMLSTYLE_OVERFLOW = -2147413102,DISPID_IHTMLSTYLE_PAGEBREAKBEFORE = -2147413035,DISPID_IHTMLSTYLE_PAGEBREAKAFTER = -2147413034,DISPID_IHTMLSTYLE_CSSTEXT = -2147413013,DISPID_IHTMLSTYLE_PIXELTOP = -2147414112,DISPID_IHTMLSTYLE_PIXELLEFT = -2147414111,DISPID_IHTMLSTYLE_PIXELWIDTH = -2147414110,DISPID_IHTMLSTYLE_PIXELHEIGHT = -2147414109,DISPID_IHTMLSTYLE_POSTOP = -2147414108,DISPID_IHTMLSTYLE_POSLEFT = -2147414107,DISPID_IHTMLSTYLE_POSWIDTH = -2147414106,DISPID_IHTMLSTYLE_POSHEIGHT = -2147414105,DISPID_IHTMLSTYLE_CURSOR = -2147413010,DISPID_IHTMLSTYLE_CLIP = -2147413020,DISPID_IHTMLSTYLE_FILTER = -2147413030,DISPID_IHTMLSTYLE_SETATTRIBUTE = -2147417611,DISPID_IHTMLSTYLE_GETATTRIBUTE = -2147417610,DISPID_IHTMLSTYLE_REMOVEATTRIBUTE = -2147417609,DISPID_IHTMLSTYLE_TOSTRING = -2147414104,DISPID_IHTMLRULESTYLE_FONTFAMILY = -2147413094,DISPID_IHTMLRULESTYLE_FONTSTYLE = -2147413088,DISPID_IHTMLRULESTYLE_FONTVARIANT = -2147413087,DISPID_IHTMLRULESTYLE_FONTWEIGHT = -2147413085,DISPID_IHTMLRULESTYLE_FONTSIZE = -2147413093,DISPID_IHTMLRULESTYLE_FONT = -2147413071,DISPID_IHTMLRULESTYLE_COLOR = -2147413110,DISPID_IHTMLRULESTYLE_BACKGROUND = -2147413080,DISPID_IHTMLRULESTYLE_BACKGROUNDIMAGE = -2147413111,DISPID_IHTMLRULESTYLE_BACKGROUNDREPEAT = -2147413068,DISPID_IHTMLRULESTYLE_BACKGROUNDATTACHMENT = -2147413067,DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITION = -2147413066,DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONX = -2147413079,DISPID_IHTMLRULESTYLE_BACKGROUNDPOSITIONY = -2147413078,DISPID_IHTMLRULESTYLE_WORDSPACING = -2147413065,DISPID_IHTMLRULESTYLE_LETTERSPACING = -2147413104,DISPID_IHTMLRULESTYLE_TEXTDECORATION = -2147413077,DISPID_IHTMLRULESTYLE_TEXTDECORATIONNONE = -2147413089,DISPID_IHTMLRULESTYLE_TEXTDECORATIONUNDERLINE = -2147413091,DISPID_IHTMLRULESTYLE_TEXTDECORATIONOVERLINE = -2147413043,DISPID_IHTMLRULESTYLE_TEXTDECORATIONLINETHROUGH = -2147413092,DISPID_IHTMLRULESTYLE_TEXTDECORATIONBLINK = -2147413090,DISPID_IHTMLRULESTYLE_VERTICALALIGN = -2147413064,DISPID_IHTMLRULESTYLE_TEXTTRANSFORM = -2147413108,DISPID_IHTMLRULESTYLE_TEXTALIGN = -2147418040,DISPID_IHTMLRULESTYLE_TEXTINDENT = -2147413105,DISPID_IHTMLRULESTYLE_LINEHEIGHT = -2147413106,DISPID_IHTMLRULESTYLE_MARGINTOP = -2147413075,DISPID_IHTMLRULESTYLE_MARGINRIGHT = -2147413074,DISPID_IHTMLRULESTYLE_MARGINBOTTOM = -2147413073,DISPID_IHTMLRULESTYLE_MARGINLEFT = -2147413072,DISPID_IHTMLRULESTYLE_MARGIN = -2147413076,DISPID_IHTMLRULESTYLE_PADDINGTOP = -2147413100,DISPID_IHTMLRULESTYLE_PADDINGRIGHT = -2147413099,DISPID_IHTMLRULESTYLE_PADDINGBOTTOM = -2147413098,DISPID_IHTMLRULESTYLE_PADDINGLEFT = -2147413097,DISPID_IHTMLRULESTYLE_PADDING = -2147413101,DISPID_IHTMLRULESTYLE_BORDER = -2147413063,DISPID_IHTMLRULESTYLE_BORDERTOP = -2147413062,DISPID_IHTMLRULESTYLE_BORDERRIGHT = -2147413061,DISPID_IHTMLRULESTYLE_BORDERBOTTOM = -2147413060,DISPID_IHTMLRULESTYLE_BORDERLEFT = -2147413059,DISPID_IHTMLRULESTYLE_BORDERCOLOR = -2147413058,DISPID_IHTMLRULESTYLE_BORDERTOPCOLOR = -2147413057,DISPID_IHTMLRULESTYLE_BORDERRIGHTCOLOR = -2147413056,DISPID_IHTMLRULESTYLE_BORDERBOTTOMCOLOR = -2147413055,DISPID_IHTMLRULESTYLE_BORDERLEFTCOLOR = -2147413054,DISPID_IHTMLRULESTYLE_BORDERWIDTH = -2147413053,DISPID_IHTMLRULESTYLE_BORDERTOPWIDTH = -2147413052,DISPID_IHTMLRULESTYLE_BORDERRIGHTWIDTH = -2147413051,DISPID_IHTMLRULESTYLE_BORDERBOTTOMWIDTH = -2147413050,DISPID_IHTMLRULESTYLE_BORDERLEFTWIDTH = -2147413049,DISPID_IHTMLRULESTYLE_BORDERSTYLE = -2147413048,DISPID_IHTMLRULESTYLE_BORDERTOPSTYLE = -2147413047,DISPID_IHTMLRULESTYLE_BORDERRIGHTSTYLE = -2147413046,DISPID_IHTMLRULESTYLE_BORDERBOTTOMSTYLE = -2147413045,DISPID_IHTMLRULESTYLE_BORDERLEFTSTYLE = -2147413044,DISPID_IHTMLRULESTYLE_WIDTH = -2147418107,DISPID_IHTMLRULESTYLE_HEIGHT = -2147418106,DISPID_IHTMLRULESTYLE_STYLEFLOAT = -2147413042,DISPID_IHTMLRULESTYLE_CLEAR = -2147413096,DISPID_IHTMLRULESTYLE_DISPLAY = -2147413041,DISPID_IHTMLRULESTYLE_VISIBILITY = -2147413032,DISPID_IHTMLRULESTYLE_LISTSTYLETYPE = -2147413040,DISPID_IHTMLRULESTYLE_LISTSTYLEPOSITION = -2147413039,DISPID_IHTMLRULESTYLE_LISTSTYLEIMAGE = -2147413038,DISPID_IHTMLRULESTYLE_LISTSTYLE = -2147413037,DISPID_IHTMLRULESTYLE_WHITESPACE = -2147413036,DISPID_IHTMLRULESTYLE_TOP = -2147418108,DISPID_IHTMLRULESTYLE_LEFT = -2147418109,DISPID_IHTMLRULESTYLE_POSITION = -2147413022,DISPID_IHTMLRULESTYLE_ZINDEX = -2147413021,DISPID_IHTMLRULESTYLE_OVERFLOW = -2147413102,DISPID_IHTMLRULESTYLE_PAGEBREAKBEFORE = -2147413035,DISPID_IHTMLRULESTYLE_PAGEBREAKAFTER = -2147413034,DISPID_IHTMLRULESTYLE_CSSTEXT = -2147413013,DISPID_IHTMLRULESTYLE_CURSOR = -2147413010,DISPID_IHTMLRULESTYLE_CLIP = -2147413020,DISPID_IHTMLRULESTYLE_FILTER = -2147413030,DISPID_IHTMLRULESTYLE_SETATTRIBUTE = -2147417611,DISPID_IHTMLRULESTYLE_GETATTRIBUTE = -2147417610,DISPID_IHTMLRULESTYLE_REMOVEATTRIBUTE = -2147417609,DISPID_IHTMLFILTERSCOLLECTION_LENGTH = 1001,DISPID_IHTMLFILTERSCOLLECTION__NEWENUM = -4,DISPID_IHTMLFILTERSCOLLECTION_ITEM = 0,DISPID_IHTMLELEMENT_SETATTRIBUTE = -2147417611,DISPID_IHTMLELEMENT_GETATTRIBUTE = -2147417610,DISPID_IHTMLELEMENT_REMOVEATTRIBUTE = -2147417609,DISPID_IHTMLELEMENT_CLASSNAME = -2147417111,DISPID_IHTMLELEMENT_ID = -2147417110,DISPID_IHTMLELEMENT_TAGNAME = -2147417108,DISPID_IHTMLELEMENT_PARENTELEMENT = -2147418104,DISPID_IHTMLELEMENT_STYLE = -2147418038,DISPID_IHTMLELEMENT_ONHELP = -2147412099,DISPID_IHTMLELEMENT_ONCLICK = -2147412104,DISPID_IHTMLELEMENT_ONDBLCLICK = -2147412103,DISPID_IHTMLELEMENT_ONKEYDOWN = -2147412107,DISPID_IHTMLELEMENT_ONKEYUP = -2147412106,DISPID_IHTMLELEMENT_ONKEYPRESS = -2147412105,DISPID_IHTMLELEMENT_ONMOUSEOUT = -2147412111,DISPID_IHTMLELEMENT_ONMOUSEOVER = -2147412112,DISPID_IHTMLELEMENT_ONMOUSEMOVE = -2147412108,DISPID_IHTMLELEMENT_ONMOUSEDOWN = -2147412110,DISPID_IHTMLELEMENT_ONMOUSEUP = -2147412109,DISPID_IHTMLELEMENT_DOCUMENT = -2147417094,DISPID_IHTMLELEMENT_TITLE = -2147418043,DISPID_IHTMLELEMENT_LANGUAGE = -2147413012,DISPID_IHTMLELEMENT_ONSELECTSTART = -2147412075,DISPID_IHTMLELEMENT_SCROLLINTOVIEW = -2147417093,DISPID_IHTMLELEMENT_CONTAINS = -2147417092,DISPID_IHTMLELEMENT_SOURCEINDEX = -2147417088,DISPID_IHTMLELEMENT_RECORDNUMBER = -2147417087,DISPID_IHTMLELEMENT_LANG = -2147413103,DISPID_IHTMLELEMENT_OFFSETLEFT = -2147417104,DISPID_IHTMLELEMENT_OFFSETTOP = -2147417103,DISPID_IHTMLELEMENT_OFFSETWIDTH = -2147417102,DISPID_IHTMLELEMENT_OFFSETHEIGHT = -2147417101,DISPID_IHTMLELEMENT_OFFSETPARENT = -2147417100,DISPID_IHTMLELEMENT_INNERHTML = -2147417086,DISPID_IHTMLELEMENT_INNERTEXT = -2147417085,DISPID_IHTMLELEMENT_OUTERHTML = -2147417084,DISPID_IHTMLELEMENT_OUTERTEXT = -2147417083,DISPID_IHTMLELEMENT_INSERTADJACENTHTML = -2147417082,DISPID_IHTMLELEMENT_INSERTADJACENTTEXT = -2147417081,DISPID_IHTMLELEMENT_PARENTTEXTEDIT = -2147417080,DISPID_IHTMLELEMENT_ISTEXTEDIT = -2147417078,DISPID_IHTMLELEMENT_CLICK = -2147417079,DISPID_IHTMLELEMENT_FILTERS = -2147417077,DISPID_IHTMLELEMENT_ONDRAGSTART = -2147412077,DISPID_IHTMLELEMENT_TOSTRING = -2147417076,DISPID_IHTMLELEMENT_ONBEFOREUPDATE = -2147412091,DISPID_IHTMLELEMENT_ONAFTERUPDATE = -2147412090,DISPID_IHTMLELEMENT_ONERRORUPDATE = -2147412074,DISPID_IHTMLELEMENT_ONROWEXIT = -2147412094,DISPID_IHTMLELEMENT_ONROWENTER = -2147412093,DISPID_IHTMLELEMENT_ONDATASETCHANGED = -2147412072,DISPID_IHTMLELEMENT_ONDATAAVAILABLE = -2147412071,DISPID_IHTMLELEMENT_ONDATASETCOMPLETE = -2147412070,DISPID_IHTMLELEMENT_ONFILTERCHANGE = -2147412069,DISPID_IHTMLELEMENT_CHILDREN = -2147417075,DISPID_IHTMLELEMENT_ALL = -2147417074,DISPID_IHTMLDATABINDING_DATAFLD = -2147417091,DISPID_IHTMLDATABINDING_DATASRC = -2147417090,DISPID_IHTMLDATABINDING_DATAFORMATAS = -2147417089,DISPID_HTMLELEMENTEVENTS_ONHELP = -2147418102,DISPID_HTMLELEMENTEVENTS_ONMOUSEOUT = -2147418103,DISPID_HTMLELEMENTEVENTS_ONMOUSEOVER = -2147418104,DISPID_HTMLELEMENTEVENTS_ONSELECTSTART = -2147418100,DISPID_HTMLELEMENTEVENTS_ONFILTERCHANGE = -2147418095,DISPID_HTMLELEMENTEVENTS_ONDRAGSTART = -2147418101,DISPID_HTMLELEMENTEVENTS_ONBEFOREUPDATE = -2147418108,DISPID_HTMLELEMENTEVENTS_ONAFTERUPDATE = -2147418107,DISPID_HTMLELEMENTEVENTS_ONERRORUPDATE = -2147418099,DISPID_HTMLELEMENTEVENTS_ONROWEXIT = -2147418106,DISPID_HTMLELEMENTEVENTS_ONROWENTER = -2147418105,DISPID_HTMLELEMENTEVENTS_ONDATASETCHANGED = -2147418098,DISPID_HTMLELEMENTEVENTS_ONDATAAVAILABLE = -2147418097,DISPID_HTMLELEMENTEVENTS_ONDATASETCOMPLETE = -2147418096,DISPID_IHTMLSTYLESHEETRULE_SELECTORTEXT = 1001,DISPID_IHTMLSTYLESHEETRULE_STYLE = -2147418038,DISPID_IHTMLSTYLESHEETRULE_READONLY = 1002,DISPID_IHTMLSTYLESHEETRULESCOLLECTION_LENGTH = 1001,DISPID_IHTMLSTYLESHEETRULESCOLLECTION_ITEM = 0,DISPID_IHTMLSTYLESHEET_TITLE = 1001,DISPID_IHTMLSTYLESHEET_PARENTSTYLESHEET = 1002,DISPID_IHTMLSTYLESHEET_OWNINGELEMENT = 1003,DISPID_IHTMLSTYLESHEET_DISABLED = -2147418036,DISPID_IHTMLSTYLESHEET_READONLY = 1004,DISPID_IHTMLSTYLESHEET_IMPORTS = 1005,DISPID_IHTMLSTYLESHEET_HREF = 1006,DISPID_IHTMLSTYLESHEET_TYPE = 1007,DISPID_IHTMLSTYLESHEET_ID = 1008,DISPID_IHTMLSTYLESHEET_ADDIMPORT = 1009,DISPID_IHTMLSTYLESHEET_ADDRULE = 1010,DISPID_IHTMLSTYLESHEET_REMOVEIMPORT = 1011,DISPID_IHTMLSTYLESHEET_REMOVERULE = 1012,DISPID_IHTMLSTYLESHEET_MEDIA = 1013,DISPID_IHTMLSTYLESHEET_CSSTEXT = 1014,DISPID_IHTMLSTYLESHEET_RULES = 1015,DISPID_IHTMLSTYLESHEETSCOLLECTION_LENGTH = 1001,DISPID_IHTMLSTYLESHEETSCOLLECTION__NEWENUM = -4,DISPID_IHTMLSTYLESHEETSCOLLECTION_ITEM = 0,DISPID_IHTMLLINKELEMENT_HREF = 1005,DISPID_IHTMLLINKELEMENT_REL = 1006,DISPID_IHTMLLINKELEMENT_REV = 1007,DISPID_IHTMLLINKELEMENT_TYPE = 1008,DISPID_IHTMLLINKELEMENT_READYSTATE = 1009,DISPID_IHTMLLINKELEMENT_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLLINKELEMENT_ONLOAD = -2147412080,DISPID_IHTMLLINKELEMENT_ONERROR = -2147412083,DISPID_IHTMLLINKELEMENT_STYLESHEET = 1014,DISPID_IHTMLLINKELEMENT_DISABLED = 1015,DISPID_IHTMLLINKELEMENT_MEDIA = 1016,DISPID_HTMLLINKELEMENTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLLINKELEMENTEVENTS_ONLOAD = 1003,DISPID_HTMLLINKELEMENTEVENTS_ONERROR = 1002,DISPID_IHTMLTXTRANGE_HTMLTEXT = 1003,DISPID_IHTMLTXTRANGE_TEXT = 1004,DISPID_IHTMLTXTRANGE_PARENTELEMENT = 1006,DISPID_IHTMLTXTRANGE_DUPLICATE = 1008,DISPID_IHTMLTXTRANGE_INRANGE = 1010,DISPID_IHTMLTXTRANGE_ISEQUAL = 1011,DISPID_IHTMLTXTRANGE_SCROLLINTOVIEW = 1012,DISPID_IHTMLTXTRANGE_COLLAPSE = 1013,DISPID_IHTMLTXTRANGE_EXPAND = 1014,DISPID_IHTMLTXTRANGE_MOVE = 1015,DISPID_IHTMLTXTRANGE_MOVESTART = 1016,DISPID_IHTMLTXTRANGE_MOVEEND = 1017,DISPID_IHTMLTXTRANGE_SELECT = 1024,DISPID_IHTMLTXTRANGE_PASTEHTML = 1026,DISPID_IHTMLTXTRANGE_MOVETOELEMENTTEXT = 1001,DISPID_IHTMLTXTRANGE_SETENDPOINT = 1025,DISPID_IHTMLTXTRANGE_COMPAREENDPOINTS = 1018,DISPID_IHTMLTXTRANGE_FINDTEXT = 1019,DISPID_IHTMLTXTRANGE_MOVETOPOINT = 1020,DISPID_IHTMLTXTRANGE_GETBOOKMARK = 1021,DISPID_IHTMLTXTRANGE_MOVETOBOOKMARK = 1009,DISPID_IHTMLTXTRANGE_QUERYCOMMANDSUPPORTED = 1027,DISPID_IHTMLTXTRANGE_QUERYCOMMANDENABLED = 1028,DISPID_IHTMLTXTRANGE_QUERYCOMMANDSTATE = 1029,DISPID_IHTMLTXTRANGE_QUERYCOMMANDINDETERM = 1030,DISPID_IHTMLTXTRANGE_QUERYCOMMANDTEXT = 1031,DISPID_IHTMLTXTRANGE_QUERYCOMMANDVALUE = 1032,DISPID_IHTMLTXTRANGE_EXECCOMMAND = 1033,DISPID_IHTMLTXTRANGE_EXECCOMMANDSHOWHELP = 1034,DISPID_IHTMLTEXTRANGEMETRICS_OFFSETTOP = 1035,DISPID_IHTMLTEXTRANGEMETRICS_OFFSETLEFT = 1036,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGTOP = 1037,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGLEFT = 1038,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGWIDTH = 1039,DISPID_IHTMLTEXTRANGEMETRICS_BOUNDINGHEIGHT = 1040,DISPID_IHTMLFORMELEMENT_ACTION = 1001,DISPID_IHTMLFORMELEMENT_DIR = 1002,DISPID_IHTMLFORMELEMENT_ENCODING = 1003,DISPID_IHTMLFORMELEMENT_METHOD = 1004,DISPID_IHTMLFORMELEMENT_ELEMENTS = 1005,DISPID_IHTMLFORMELEMENT_TARGET = 1006,DISPID_IHTMLFORMELEMENT_NAME = -2147418112,DISPID_IHTMLFORMELEMENT_ONSUBMIT = -2147412101,DISPID_IHTMLFORMELEMENT_ONRESET = -2147412100,DISPID_IHTMLFORMELEMENT_SUBMIT = 1009,DISPID_IHTMLFORMELEMENT_RESET = 1010,DISPID_IHTMLFORMELEMENT_LENGTH = 1500,DISPID_IHTMLFORMELEMENT__NEWENUM = -4,DISPID_IHTMLFORMELEMENT_ITEM = 0,DISPID_IHTMLFORMELEMENT_TAGS = 1502,DISPID_HTMLFORMELEMENTEVENTS_ONSUBMIT = 1007,DISPID_HTMLFORMELEMENTEVENTS_ONRESET = 1015,DISPID_IHTMLCONTROLELEMENT_TABINDEX = -2147418097,DISPID_IHTMLCONTROLELEMENT_FOCUS = -2147416112,DISPID_IHTMLCONTROLELEMENT_ACCESSKEY = -2147416107,DISPID_IHTMLCONTROLELEMENT_ONBLUR = -2147412097,DISPID_IHTMLCONTROLELEMENT_ONFOCUS = -2147412098,DISPID_IHTMLCONTROLELEMENT_ONRESIZE = -2147412076,DISPID_IHTMLCONTROLELEMENT_BLUR = -2147416110,DISPID_IHTMLCONTROLELEMENT_ADDFILTER = -2147416095,DISPID_IHTMLCONTROLELEMENT_REMOVEFILTER = -2147416094,DISPID_IHTMLCONTROLELEMENT_CLIENTHEIGHT = -2147416093,DISPID_IHTMLCONTROLELEMENT_CLIENTWIDTH = -2147416092,DISPID_IHTMLCONTROLELEMENT_CLIENTTOP = -2147416091,DISPID_IHTMLCONTROLELEMENT_CLIENTLEFT = -2147416090,DISPID_HTMLCONTROLELEMENTEVENTS_ONFOCUS = -2147418111,DISPID_HTMLCONTROLELEMENTEVENTS_ONBLUR = -2147418112,DISPID_HTMLCONTROLELEMENTEVENTS_ONRESIZE = 1016,DISPID_IHTMLTEXTCONTAINER_CREATECONTROLRANGE = 1001,DISPID_IHTMLTEXTCONTAINER_SCROLLHEIGHT = 1002,DISPID_IHTMLTEXTCONTAINER_SCROLLWIDTH = 1003,DISPID_IHTMLTEXTCONTAINER_SCROLLTOP = 1004,DISPID_IHTMLTEXTCONTAINER_SCROLLLEFT = 1005,DISPID_IHTMLTEXTCONTAINER_ONSCROLL = -2147412081,DISPID_HTMLTEXTCONTAINEREVENTS_ONCHANGE = 1001,DISPID_HTMLTEXTCONTAINEREVENTS_ONSCROLL = 1014,DISPID_HTMLTEXTCONTAINEREVENTS_ONSELECT = 1006,DISPID_IHTMLCONTROLRANGE_SELECT = 1002,DISPID_IHTMLCONTROLRANGE_ADD = 1003,DISPID_IHTMLCONTROLRANGE_REMOVE = 1004,DISPID_IHTMLCONTROLRANGE_ITEM = 0,DISPID_IHTMLCONTROLRANGE_SCROLLINTOVIEW = 1006,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSUPPORTED = 1007,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDENABLED = 1008,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDSTATE = 1009,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDINDETERM = 1010,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDTEXT = 1011,DISPID_IHTMLCONTROLRANGE_QUERYCOMMANDVALUE = 1012,DISPID_IHTMLCONTROLRANGE_EXECCOMMAND = 1013,DISPID_IHTMLCONTROLRANGE_EXECCOMMANDSHOWHELP = 1014,DISPID_IHTMLCONTROLRANGE_COMMONPARENTELEMENT = 1015,DISPID_IHTMLCONTROLRANGE_LENGTH = 1005,DISPID_HTMLIMGBASEEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLIMGBASEEVENTS_ONLOAD = 1003,DISPID_HTMLIMGBASEEVENTS_ONERROR = 1002,DISPID_HTMLIMGBASEEVENTS_ONABORT = 1000,DISPID_IHTMLIMGELEMENT_ISMAP = 2002,DISPID_IHTMLIMGELEMENT_USEMAP = 2008,DISPID_IHTMLIMGELEMENT_MIMETYPE = 2010,DISPID_IHTMLIMGELEMENT_FILESIZE = 2011,DISPID_IHTMLIMGELEMENT_FILECREATEDDATE = 2012,DISPID_IHTMLIMGELEMENT_FILEMODIFIEDDATE = 2013,DISPID_IHTMLIMGELEMENT_FILEUPDATEDDATE = 2014,DISPID_IHTMLIMGELEMENT_PROTOCOL = 2015,DISPID_IHTMLIMGELEMENT_HREF = 2016,DISPID_IHTMLIMGELEMENT_NAMEPROP = 2017,DISPID_IHTMLIMGELEMENT_BORDER = 1004,DISPID_IHTMLIMGELEMENT_VSPACE = 1005,DISPID_IHTMLIMGELEMENT_HSPACE = 1006,DISPID_IHTMLIMGELEMENT_ALT = 1002,DISPID_IHTMLIMGELEMENT_SRC = 1003,DISPID_IHTMLIMGELEMENT_LOWSRC = 1007,DISPID_IHTMLIMGELEMENT_VRML = 1008,DISPID_IHTMLIMGELEMENT_DYNSRC = 1009,DISPID_IHTMLIMGELEMENT_READYSTATE = 1012,DISPID_IHTMLIMGELEMENT_COMPLETE = 1010,DISPID_IHTMLIMGELEMENT_LOOP = 1011,DISPID_IHTMLIMGELEMENT_ALIGN = -2147418039,DISPID_IHTMLIMGELEMENT_ONLOAD = -2147412080,DISPID_IHTMLIMGELEMENT_ONERROR = -2147412083,DISPID_IHTMLIMGELEMENT_ONABORT = -2147412084,DISPID_IHTMLIMGELEMENT_NAME = -2147418112,DISPID_IHTMLIMGELEMENT_WIDTH = -2147418107,DISPID_IHTMLIMGELEMENT_HEIGHT = -2147418106,DISPID_IHTMLIMGELEMENT_START = 1013,DISPID_IHTMLINPUTIMAGE_TYPE = 2000,DISPID_IHTMLINPUTIMAGE_DISABLED = -2147418036,DISPID_IHTMLINPUTIMAGE_BORDER = 1004,DISPID_IHTMLINPUTIMAGE_VSPACE = 1005,DISPID_IHTMLINPUTIMAGE_HSPACE = 1006,DISPID_IHTMLINPUTIMAGE_ALT = 1002,DISPID_IHTMLINPUTIMAGE_SRC = 1003,DISPID_IHTMLINPUTIMAGE_LOWSRC = 1007,DISPID_IHTMLINPUTIMAGE_VRML = 1008,DISPID_IHTMLINPUTIMAGE_DYNSRC = 1009,DISPID_IHTMLINPUTIMAGE_READYSTATE = 1012,DISPID_IHTMLINPUTIMAGE_COMPLETE = 1010,DISPID_IHTMLINPUTIMAGE_LOOP = 1011,DISPID_IHTMLINPUTIMAGE_ALIGN = -2147418039,DISPID_IHTMLINPUTIMAGE_ONLOAD = -2147412080,DISPID_IHTMLINPUTIMAGE_ONERROR = -2147412083,DISPID_IHTMLINPUTIMAGE_ONABORT = -2147412084,DISPID_IHTMLINPUTIMAGE_NAME = -2147418112,DISPID_IHTMLINPUTIMAGE_WIDTH = -2147418107,DISPID_IHTMLINPUTIMAGE_HEIGHT = -2147418106,DISPID_IHTMLINPUTIMAGE_START = 1013,DISPID_IHTMLIMAGEELEMENTFACTORY_CREATE = 0,DISPID_IHTMLBODYELEMENT_BACKGROUND = -2147413111,DISPID_IHTMLBODYELEMENT_BGPROPERTIES = -2147413067,DISPID_IHTMLBODYELEMENT_LEFTMARGIN = -2147413072,DISPID_IHTMLBODYELEMENT_TOPMARGIN = -2147413075,DISPID_IHTMLBODYELEMENT_RIGHTMARGIN = -2147413074,DISPID_IHTMLBODYELEMENT_BOTTOMMARGIN = -2147413073,DISPID_IHTMLBODYELEMENT_NOWRAP = -2147413107,DISPID_IHTMLBODYELEMENT_TEXT = -2147413110,DISPID_IHTMLBODYELEMENT_LINK = 2010,DISPID_IHTMLBODYELEMENT_VLINK = 2012,DISPID_IHTMLBODYELEMENT_ALINK = 2011,DISPID_IHTMLBODYELEMENT_ONLOAD = -2147412080,DISPID_IHTMLBODYELEMENT_ONUNLOAD = -2147412079,DISPID_IHTMLBODYELEMENT_SCROLL = -2147413033,DISPID_IHTMLBODYELEMENT_ONSELECT = -2147412102,DISPID_IHTMLBODYELEMENT_ONBEFOREUNLOAD = -2147412073,DISPID_IHTMLBODYELEMENT_CREATETEXTRANGE = 2013,DISPID_IHTMLFONTELEMENT_COLOR = -2147413110,DISPID_IHTMLFONTELEMENT_FACE = -2147413094,DISPID_IHTMLFONTELEMENT_SIZE = -2147413093,DISPID_IHTMLANCHORELEMENT_HREF = 0,DISPID_IHTMLANCHORELEMENT_TARGET = 1003,DISPID_IHTMLANCHORELEMENT_REL = 1005,DISPID_IHTMLANCHORELEMENT_REV = 1006,DISPID_IHTMLANCHORELEMENT_URN = 1007,DISPID_IHTMLANCHORELEMENT_METHODS = 1008,DISPID_IHTMLANCHORELEMENT_NAME = -2147418112,DISPID_IHTMLANCHORELEMENT_HOST = 1012,DISPID_IHTMLANCHORELEMENT_HOSTNAME = 1013,DISPID_IHTMLANCHORELEMENT_PATHNAME = 1014,DISPID_IHTMLANCHORELEMENT_PORT = 1015,DISPID_IHTMLANCHORELEMENT_PROTOCOL = 1016,DISPID_IHTMLANCHORELEMENT_SEARCH = 1017,DISPID_IHTMLANCHORELEMENT_HASH = 1018,DISPID_IHTMLANCHORELEMENT_ONBLUR = -2147412097,DISPID_IHTMLANCHORELEMENT_ONFOCUS = -2147412098,DISPID_IHTMLANCHORELEMENT_ACCESSKEY = 1022,DISPID_IHTMLANCHORELEMENT_PROTOCOLLONG = 1031,DISPID_IHTMLANCHORELEMENT_MIMETYPE = 1030,DISPID_IHTMLANCHORELEMENT_NAMEPROP = 1032,DISPID_IHTMLANCHORELEMENT_TABINDEX = -2147418097,DISPID_IHTMLANCHORELEMENT_FOCUS = 1033,DISPID_IHTMLANCHORELEMENT_BLUR = 1034,DISPID_HTMLANCHOREVENTS_ONFOCUS = -2147418111,DISPID_HTMLANCHOREVENTS_ONBLUR = -2147418112,DISPID_IHTMLLABELELEMENT_HTMLFOR = 1000,DISPID_IHTMLLABELELEMENT_ACCESSKEY = 1001,DISPID_IHTMLULISTELEMENT_COMPACT = 1002,DISPID_IHTMLULISTELEMENT_TYPE = -2147413095,DISPID_IHTMLOLISTELEMENT_COMPACT = 1002,DISPID_IHTMLOLISTELEMENT_START = 1003,DISPID_IHTMLOLISTELEMENT_TYPE = -2147413095,DISPID_IHTMLLIELEMENT_TYPE = -2147413095,DISPID_IHTMLLIELEMENT_VALUE = 1001,DISPID_IHTMLBLOCKELEMENT_CLEAR = -2147413096,DISPID_IHTMLDIVELEMENT_ALIGN = -2147418040,DISPID_IHTMLDIVELEMENT_NOWRAP = -2147413107,DISPID_IHTMLDDELEMENT_NOWRAP = -2147413107,DISPID_IHTMLDTELEMENT_NOWRAP = -2147413107,DISPID_IHTMLBRELEMENT_CLEAR = -2147413096,DISPID_IHTMLDLISTELEMENT_COMPACT = 1001,DISPID_IHTMLHRELEMENT_ALIGN = -2147418040,DISPID_IHTMLHRELEMENT_COLOR = -2147413110,DISPID_IHTMLHRELEMENT_NOSHADE = 1001,DISPID_IHTMLHRELEMENT_WIDTH = -2147418107,DISPID_IHTMLHRELEMENT_SIZE = -2147418106,DISPID_IHTMLPARAELEMENT_ALIGN = -2147418040,DISPID_IHTMLELEMENTCOLLECTION_TOSTRING = 1501,DISPID_IHTMLELEMENTCOLLECTION_LENGTH = 1500,DISPID_IHTMLELEMENTCOLLECTION__NEWENUM = -4,DISPID_IHTMLELEMENTCOLLECTION_ITEM = 0,DISPID_IHTMLELEMENTCOLLECTION_TAGS = 1502,DISPID_IHTMLHEADERELEMENT_ALIGN = -2147418040,DISPID_IHTMLSELECTELEMENT_SIZE = 1002,DISPID_IHTMLSELECTELEMENT_MULTIPLE = 1003,DISPID_IHTMLSELECTELEMENT_NAME = -2147418112,DISPID_IHTMLSELECTELEMENT_OPTIONS = 1005,DISPID_IHTMLSELECTELEMENT_ONCHANGE = -2147412082,DISPID_IHTMLSELECTELEMENT_SELECTEDINDEX = 1010,DISPID_IHTMLSELECTELEMENT_TYPE = 1012,DISPID_IHTMLSELECTELEMENT_VALUE = 1011,DISPID_IHTMLSELECTELEMENT_DISABLED = -2147418036,DISPID_IHTMLSELECTELEMENT_FORM = -2147416108,DISPID_IHTMLSELECTELEMENT_ADD = 1503,DISPID_IHTMLSELECTELEMENT_REMOVE = 1504,DISPID_IHTMLSELECTELEMENT_LENGTH = 1500,DISPID_IHTMLSELECTELEMENT__NEWENUM = -4,DISPID_IHTMLSELECTELEMENT_ITEM = 0,DISPID_IHTMLSELECTELEMENT_TAGS = 1502,DISPID_HTMLSELECTELEMENTEVENTS_ONCHANGE = 1001,DISPID_IHTMLSELECTIONOBJECT_CREATERANGE = 1001,DISPID_IHTMLSELECTIONOBJECT_EMPTY = 1002,DISPID_IHTMLSELECTIONOBJECT_CLEAR = 1003,DISPID_IHTMLSELECTIONOBJECT_TYPE = 1004,DISPID_IHTMLOPTIONELEMENT_SELECTED = 1001,DISPID_IHTMLOPTIONELEMENT_VALUE = 1002,DISPID_IHTMLOPTIONELEMENT_DEFAULTSELECTED = 1003,DISPID_IHTMLOPTIONELEMENT_INDEX = 1005,DISPID_IHTMLOPTIONELEMENT_TEXT = 1004,DISPID_IHTMLOPTIONELEMENT_FORM = 1006,DISPID_IHTMLOPTIONELEMENTFACTORY_CREATE = 0,DISPID_IHTMLINPUTHIDDENELEMENT_TYPE = 2000,DISPID_IHTMLINPUTHIDDENELEMENT_VALUE = -2147413011,DISPID_IHTMLINPUTHIDDENELEMENT_NAME = -2147418112,DISPID_IHTMLINPUTHIDDENELEMENT_STATUS = 2001,DISPID_IHTMLINPUTHIDDENELEMENT_DISABLED = -2147418036,DISPID_IHTMLINPUTHIDDENELEMENT_FORM = -2147416108,DISPID_IHTMLINPUTHIDDENELEMENT_CREATETEXTRANGE = 3005,DISPID_IHTMLINPUTTEXTELEMENT_TYPE = 2000,DISPID_IHTMLINPUTTEXTELEMENT_VALUE = -2147413011,DISPID_IHTMLINPUTTEXTELEMENT_NAME = -2147418112,DISPID_IHTMLINPUTTEXTELEMENT_STATUS = 2001,DISPID_IHTMLINPUTTEXTELEMENT_DISABLED = -2147418036,DISPID_IHTMLINPUTTEXTELEMENT_FORM = -2147416108,DISPID_IHTMLINPUTTEXTELEMENT_DEFAULTVALUE = -2147413029,DISPID_IHTMLINPUTTEXTELEMENT_SIZE = 4001,DISPID_IHTMLINPUTTEXTELEMENT_MAXLENGTH = 4002,DISPID_IHTMLINPUTTEXTELEMENT_SELECT = 3003,DISPID_IHTMLINPUTTEXTELEMENT_ONCHANGE = -2147412082,DISPID_IHTMLINPUTTEXTELEMENT_ONSELECT = -2147412102,DISPID_IHTMLINPUTTEXTELEMENT_READONLY = 3001,DISPID_IHTMLINPUTTEXTELEMENT_CREATETEXTRANGE = 3005,DISPID_IHTMLTEXTAREAELEMENT_TYPE = 2000,DISPID_IHTMLTEXTAREAELEMENT_VALUE = -2147413011,DISPID_IHTMLTEXTAREAELEMENT_NAME = -2147418112,DISPID_IHTMLTEXTAREAELEMENT_STATUS = 2001,DISPID_IHTMLTEXTAREAELEMENT_DISABLED = -2147418036,DISPID_IHTMLTEXTAREAELEMENT_FORM = -2147416108,DISPID_IHTMLTEXTAREAELEMENT_DEFAULTVALUE = -2147413029,DISPID_IHTMLTEXTAREAELEMENT_SELECT = 3003,DISPID_IHTMLTEXTAREAELEMENT_ONCHANGE = -2147412082,DISPID_IHTMLTEXTAREAELEMENT_ONSELECT = -2147412102,DISPID_IHTMLTEXTAREAELEMENT_READONLY = 3001,DISPID_IHTMLTEXTAREAELEMENT_ROWS = 5001,DISPID_IHTMLTEXTAREAELEMENT_COLS = 5002,DISPID_IHTMLTEXTAREAELEMENT_WRAP = 5003,DISPID_IHTMLTEXTAREAELEMENT_CREATETEXTRANGE = 3005,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONCHANGE = 1001,DISPID_HTMLINPUTTEXTELEMENTEVENTS_ONSELECT = 1006,DISPID_IHTMLINPUTBUTTONELEMENT_TYPE = 2000,DISPID_IHTMLINPUTBUTTONELEMENT_VALUE = -2147413011,DISPID_IHTMLINPUTBUTTONELEMENT_NAME = -2147418112,DISPID_IHTMLINPUTBUTTONELEMENT_STATUS = 2001,DISPID_IHTMLINPUTBUTTONELEMENT_DISABLED = -2147418036,DISPID_IHTMLINPUTBUTTONELEMENT_FORM = -2147416108,DISPID_IHTMLINPUTBUTTONELEMENT_CREATETEXTRANGE = 2004,DISPID_IHTMLBUTTONELEMENT_TYPE = 2000,DISPID_IHTMLBUTTONELEMENT_VALUE = -2147413011,DISPID_IHTMLBUTTONELEMENT_NAME = -2147418112,DISPID_IHTMLBUTTONELEMENT_STATUS = 2001,DISPID_IHTMLBUTTONELEMENT_DISABLED = -2147418036,DISPID_IHTMLBUTTONELEMENT_FORM = -2147416108,DISPID_IHTMLBUTTONELEMENT_CREATETEXTRANGE = 2004,DISPID_IHTMLINPUTFILEELEMENT_TYPE = 2000,DISPID_IHTMLINPUTFILEELEMENT_NAME = -2147418112,DISPID_IHTMLINPUTFILEELEMENT_STATUS = 2001,DISPID_IHTMLINPUTFILEELEMENT_DISABLED = -2147418036,DISPID_IHTMLINPUTFILEELEMENT_FORM = -2147416108,DISPID_IHTMLINPUTFILEELEMENT_SIZE = 4001,DISPID_IHTMLINPUTFILEELEMENT_MAXLENGTH = 4002,DISPID_IHTMLINPUTFILEELEMENT_SELECT = 3003,DISPID_IHTMLINPUTFILEELEMENT_ONCHANGE = -2147412082,DISPID_IHTMLINPUTFILEELEMENT_ONSELECT = -2147412102,DISPID_IHTMLINPUTFILEELEMENT_VALUE = -2147413011,DISPID_IHTMLMARQUEEELEMENT_SCROLLDELAY = 6000,DISPID_IHTMLMARQUEEELEMENT_DIRECTION = 6001,DISPID_IHTMLMARQUEEELEMENT_BEHAVIOR = 6002,DISPID_IHTMLMARQUEEELEMENT_SCROLLAMOUNT = 6003,DISPID_IHTMLMARQUEEELEMENT_LOOP = 6004,DISPID_IHTMLMARQUEEELEMENT_VSPACE = 6005,DISPID_IHTMLMARQUEEELEMENT_HSPACE = 6006,DISPID_IHTMLMARQUEEELEMENT_ONFINISH = -2147412086,DISPID_IHTMLMARQUEEELEMENT_ONSTART = -2147412085,DISPID_IHTMLMARQUEEELEMENT_ONBOUNCE = -2147412092,DISPID_IHTMLMARQUEEELEMENT_WIDTH = -2147418107,DISPID_IHTMLMARQUEEELEMENT_HEIGHT = -2147418106,DISPID_IHTMLMARQUEEELEMENT_TRUESPEED = 6007,DISPID_IHTMLMARQUEEELEMENT_START = 6010,DISPID_IHTMLMARQUEEELEMENT_STOP = 6011,DISPID_HTMLMARQUEEELEMENTEVENTS_ONBOUNCE = 1009,DISPID_HTMLMARQUEEELEMENTEVENTS_ONFINISH = 1010,DISPID_HTMLMARQUEEELEMENTEVENTS_ONSTART = 1011,DISPID_IHTMLOPTIONBUTTONELEMENT_VALUE = -2147413011,DISPID_IHTMLOPTIONBUTTONELEMENT_TYPE = 1000,DISPID_IHTMLOPTIONBUTTONELEMENT_NAME = -2147418112,DISPID_IHTMLOPTIONBUTTONELEMENT_CHECKED = 1001,DISPID_IHTMLOPTIONBUTTONELEMENT_DEFAULTCHECKED = 1002,DISPID_IHTMLOPTIONBUTTONELEMENT_ONCHANGE = -2147412082,DISPID_IHTMLOPTIONBUTTONELEMENT_DISABLED = -2147418036,DISPID_IHTMLOPTIONBUTTONELEMENT_STATUS = 1003,DISPID_IHTMLOPTIONBUTTONELEMENT_INDETERMINATE = 1004,DISPID_IHTMLOPTIONBUTTONELEMENT_FORM = -2147416108,DISPID_HTMLOPTIONBUTTONELEMENTEVENTS_ONCHANGE = 1001,DISPID_IHTMLTITLEELEMENT_TEXT = -2147413011,DISPID_IHTMLMETAELEMENT_HTTPEQUIV = 1001,DISPID_IHTMLMETAELEMENT_CONTENT = 1002,DISPID_IHTMLMETAELEMENT_NAME = -2147418112,DISPID_IHTMLMETAELEMENT_URL = 1003,DISPID_IHTMLMETAELEMENT_CHARSET = 1013,DISPID_IHTMLBASEELEMENT_HREF = 1003,DISPID_IHTMLBASEELEMENT_TARGET = 1004,DISPID_IHTMLISINDEXELEMENT_PROMPT = 1010,DISPID_IHTMLISINDEXELEMENT_ACTION = 1011,DISPID_IHTMLNEXTIDELEMENT_N = 1012,DISPID_IHTMLBASEFONTELEMENT_COLOR = -2147413110,DISPID_IHTMLBASEFONTELEMENT_FACE = -2147413094,DISPID_IHTMLBASEFONTELEMENT_SIZE = -2147413086,DISPID_IOMHISTORY_LENGTH = 1,DISPID_IOMHISTORY_BACK = 2,DISPID_IOMHISTORY_FORWARD = 3,DISPID_IOMHISTORY_GO = 4,DISPID_IHTMLMIMETYPESCOLLECTION_LENGTH = 1,DISPID_IHTMLPLUGINSCOLLECTION_LENGTH = 1,DISPID_IHTMLPLUGINSCOLLECTION_REFRESH = 2,DISPID_IHTMLOPSPROFILE_ADDREQUEST = 1,DISPID_IHTMLOPSPROFILE_CLEARREQUEST = 2,DISPID_IHTMLOPSPROFILE_DOREQUEST = 3,DISPID_IHTMLOPSPROFILE_GETATTRIBUTE = 4,DISPID_IHTMLOPSPROFILE_SETATTRIBUTE = 5,DISPID_IHTMLOPSPROFILE_COMMITCHANGES = 6,DISPID_IHTMLOPSPROFILE_ADDREADREQUEST = 7,DISPID_IHTMLOPSPROFILE_DOREADREQUEST = 8,DISPID_IHTMLOPSPROFILE_DOWRITEREQUEST = 9,DISPID_IOMNAVIGATOR_APPCODENAME = 1,DISPID_IOMNAVIGATOR_APPNAME = 2,DISPID_IOMNAVIGATOR_APPVERSION = 3,DISPID_IOMNAVIGATOR_USERAGENT = 4,DISPID_IOMNAVIGATOR_JAVAENABLED = 5,DISPID_IOMNAVIGATOR_TAINTENABLED = 6,DISPID_IOMNAVIGATOR_MIMETYPES = 7,DISPID_IOMNAVIGATOR_PLUGINS = 8,DISPID_IOMNAVIGATOR_COOKIEENABLED = 9,DISPID_IOMNAVIGATOR_OPSPROFILE = 10,DISPID_IOMNAVIGATOR_TOSTRING = 11,DISPID_IOMNAVIGATOR_CPUCLASS = 12,DISPID_IOMNAVIGATOR_SYSTEMLANGUAGE = 13,DISPID_IOMNAVIGATOR_BROWSERLANGUAGE = 14,DISPID_IOMNAVIGATOR_USERLANGUAGE = 15,DISPID_IOMNAVIGATOR_PLATFORM = 16,DISPID_IOMNAVIGATOR_APPMINORVERSION = 17,DISPID_IOMNAVIGATOR_CONNECTIONSPEED = 18,DISPID_IOMNAVIGATOR_ONLINE = 19,DISPID_IOMNAVIGATOR_USERPROFILE = 20,DISPID_IHTMLLOCATION_HREF = 0,DISPID_IHTMLLOCATION_PROTOCOL = 1,DISPID_IHTMLLOCATION_HOST = 2,DISPID_IHTMLLOCATION_HOSTNAME = 3,DISPID_IHTMLLOCATION_PORT = 4,DISPID_IHTMLLOCATION_PATHNAME = 5,DISPID_IHTMLLOCATION_SEARCH = 6,DISPID_IHTMLLOCATION_HASH = 7,DISPID_IHTMLLOCATION_RELOAD = 8,DISPID_IHTMLLOCATION_REPLACE = 9,DISPID_IHTMLLOCATION_ASSIGN = 10,DISPID_IHTMLLOCATION_TOSTRING = 11,DISPID_IHTMLEVENTOBJ_SRCELEMENT = 1001,DISPID_IHTMLEVENTOBJ_ALTKEY = 1002,DISPID_IHTMLEVENTOBJ_CTRLKEY = 1003,DISPID_IHTMLEVENTOBJ_SHIFTKEY = 1004,DISPID_IHTMLEVENTOBJ_RETURNVALUE = 1007,DISPID_IHTMLEVENTOBJ_CANCELBUBBLE = 1008,DISPID_IHTMLEVENTOBJ_FROMELEMENT = 1009,DISPID_IHTMLEVENTOBJ_TOELEMENT = 1010,DISPID_IHTMLEVENTOBJ_KEYCODE = 1011,DISPID_IHTMLEVENTOBJ_BUTTON = 1012,DISPID_IHTMLEVENTOBJ_TYPE = 1013,DISPID_IHTMLEVENTOBJ_QUALIFIER = 1014,DISPID_IHTMLEVENTOBJ_REASON = 1015,DISPID_IHTMLEVENTOBJ_X = 1005,DISPID_IHTMLEVENTOBJ_Y = 1006,DISPID_IHTMLEVENTOBJ_CLIENTX = 1020,DISPID_IHTMLEVENTOBJ_CLIENTY = 1021,DISPID_IHTMLEVENTOBJ_OFFSETX = 1022,DISPID_IHTMLEVENTOBJ_OFFSETY = 1023,DISPID_IHTMLEVENTOBJ_SCREENX = 1024,DISPID_IHTMLEVENTOBJ_SCREENY = 1025,DISPID_IHTMLEVENTOBJ_SRCFILTER = 1026,DISPID_IHTMLFRAMESCOLLECTION2_ITEM = 0,DISPID_IHTMLFRAMESCOLLECTION2_LENGTH = 1001,DISPID_IHTMLSCREEN_COLORDEPTH = 1001,DISPID_IHTMLSCREEN_BUFFERDEPTH = 1002,DISPID_IHTMLSCREEN_WIDTH = 1003,DISPID_IHTMLSCREEN_HEIGHT = 1004,DISPID_IHTMLSCREEN_UPDATEINTERVAL = 1005,DISPID_IHTMLSCREEN_AVAILHEIGHT = 1006,DISPID_IHTMLSCREEN_AVAILWIDTH = 1007,DISPID_IHTMLSCREEN_FONTSMOOTHINGENABLED = 1008,DISPID_IHTMLWINDOW2_FRAMES = 1100,DISPID_IHTMLWINDOW2_DEFAULTSTATUS = 1101,DISPID_IHTMLWINDOW2_STATUS = 1102,DISPID_IHTMLWINDOW2_SETTIMEOUT = 1103,DISPID_IHTMLWINDOW2_CLEARTIMEOUT = 1104,DISPID_IHTMLWINDOW2_ALERT = 1105,DISPID_IHTMLWINDOW2_CONFIRM = 1110,DISPID_IHTMLWINDOW2_PROMPT = 1111,DISPID_IHTMLWINDOW2_IMAGE = 1125,DISPID_IHTMLWINDOW2_LOCATION = 14,DISPID_IHTMLWINDOW2_HISTORY = 2,DISPID_IHTMLWINDOW2_CLOSE = 3,DISPID_IHTMLWINDOW2_OPENER = 4,DISPID_IHTMLWINDOW2_NAVIGATOR = 5,DISPID_IHTMLWINDOW2_NAME = 11,DISPID_IHTMLWINDOW2_PARENT = 12,DISPID_IHTMLWINDOW2_OPEN = 13,DISPID_IHTMLWINDOW2_SELF = 20,DISPID_IHTMLWINDOW2_TOP = 21,DISPID_IHTMLWINDOW2_WINDOW = 22,DISPID_IHTMLWINDOW2_NAVIGATE = 25,DISPID_IHTMLWINDOW2_ONFOCUS = -2147412098,DISPID_IHTMLWINDOW2_ONBLUR = -2147412097,DISPID_IHTMLWINDOW2_ONLOAD = -2147412080,DISPID_IHTMLWINDOW2_ONBEFOREUNLOAD = -2147412073,DISPID_IHTMLWINDOW2_ONUNLOAD = -2147412079,DISPID_IHTMLWINDOW2_ONHELP = -2147412099,DISPID_IHTMLWINDOW2_ONERROR = -2147412083,DISPID_IHTMLWINDOW2_ONRESIZE = -2147412076,DISPID_IHTMLWINDOW2_ONSCROLL = -2147412081,DISPID_IHTMLWINDOW2_DOCUMENT = 1151,DISPID_IHTMLWINDOW2_EVENT = 1152,DISPID_IHTMLWINDOW2__NEWENUM = 1153,DISPID_IHTMLWINDOW2_SHOWMODALDIALOG = 1154,DISPID_IHTMLWINDOW2_SHOWHELP = 1155,DISPID_IHTMLWINDOW2_SCREEN = 1156,DISPID_IHTMLWINDOW2_OPTION = 1157,DISPID_IHTMLWINDOW2_FOCUS = 1158,DISPID_IHTMLWINDOW2_CLOSED = 23,DISPID_IHTMLWINDOW2_BLUR = 1159,DISPID_IHTMLWINDOW2_SCROLL = 1160,DISPID_IHTMLWINDOW2_CLIENTINFORMATION = 1161,DISPID_IHTMLWINDOW2_SETINTERVAL = 1162,DISPID_IHTMLWINDOW2_CLEARINTERVAL = 1163,DISPID_IHTMLWINDOW2_OFFSCREENBUFFERING = 1164,DISPID_IHTMLWINDOW2_EXECSCRIPT = 1165,DISPID_IHTMLWINDOW2_TOSTRING = 1166,DISPID_IHTMLWINDOW2_SCROLLBY = 1167,DISPID_IHTMLWINDOW2_SCROLLTO = 1168,DISPID_IHTMLWINDOW2_MOVETO = 6,DISPID_IHTMLWINDOW2_MOVEBY = 7,DISPID_IHTMLWINDOW2_RESIZETO = 9,DISPID_IHTMLWINDOW2_RESIZEBY = 8,DISPID_IHTMLWINDOW2_EXTERNAL = 1169,DISPID_HTMLWINDOWEVENTS_ONLOAD = 1003,DISPID_HTMLWINDOWEVENTS_ONUNLOAD = 1008,DISPID_HTMLWINDOWEVENTS_ONHELP = -2147418102,DISPID_HTMLWINDOWEVENTS_ONFOCUS = -2147418111,DISPID_HTMLWINDOWEVENTS_ONBLUR = -2147418112,DISPID_HTMLWINDOWEVENTS_ONERROR = 1002,DISPID_HTMLWINDOWEVENTS_ONRESIZE = 1016,DISPID_HTMLWINDOWEVENTS_ONSCROLL = 1014,DISPID_HTMLWINDOWEVENTS_ONBEFOREUNLOAD = 1017,DISPID_IHTMLDOCUMENT_SCRIPT = 1001,DISPID_IHTMLDOCUMENT2_ALL = 1003,DISPID_IHTMLDOCUMENT2_BODY = 1004,DISPID_IHTMLDOCUMENT2_ACTIVEELEMENT = 1005,DISPID_IHTMLDOCUMENT2_IMAGES = 1011,DISPID_IHTMLDOCUMENT2_APPLETS = 1008,DISPID_IHTMLDOCUMENT2_LINKS = 1009,DISPID_IHTMLDOCUMENT2_FORMS = 1010,DISPID_IHTMLDOCUMENT2_ANCHORS = 1007,DISPID_IHTMLDOCUMENT2_TITLE = 1012,DISPID_IHTMLDOCUMENT2_SCRIPTS = 1013,DISPID_IHTMLDOCUMENT2_DESIGNMODE = 1014,DISPID_IHTMLDOCUMENT2_SELECTION = 1017,DISPID_IHTMLDOCUMENT2_READYSTATE = 1018,DISPID_IHTMLDOCUMENT2_FRAMES = 1019,DISPID_IHTMLDOCUMENT2_EMBEDS = 1015,DISPID_IHTMLDOCUMENT2_PLUGINS = 1021,DISPID_IHTMLDOCUMENT2_ALINKCOLOR = 1022,DISPID_IHTMLDOCUMENT2_FGCOLOR = -2147413110,DISPID_IHTMLDOCUMENT2_LINKCOLOR = 1024,DISPID_IHTMLDOCUMENT2_VLINKCOLOR = 1023,DISPID_IHTMLDOCUMENT2_REFERRER = 1027,DISPID_IHTMLDOCUMENT2_LOCATION = 1026,DISPID_IHTMLDOCUMENT2_LASTMODIFIED = 1028,DISPID_IHTMLDOCUMENT2_URL = 1025,DISPID_IHTMLDOCUMENT2_DOMAIN = 1029,DISPID_IHTMLDOCUMENT2_COOKIE = 1030,DISPID_IHTMLDOCUMENT2_EXPANDO = 1031,DISPID_IHTMLDOCUMENT2_CHARSET = 1032,DISPID_IHTMLDOCUMENT2_DEFAULTCHARSET = 1033,DISPID_IHTMLDOCUMENT2_MIMETYPE = 1041,DISPID_IHTMLDOCUMENT2_FILESIZE = 1042,DISPID_IHTMLDOCUMENT2_FILECREATEDDATE = 1043,DISPID_IHTMLDOCUMENT2_FILEMODIFIEDDATE = 1044,DISPID_IHTMLDOCUMENT2_FILEUPDATEDDATE = 1045,DISPID_IHTMLDOCUMENT2_SECURITY = 1046,DISPID_IHTMLDOCUMENT2_PROTOCOL = 1047,DISPID_IHTMLDOCUMENT2_NAMEPROP = 1048,DISPID_IHTMLDOCUMENT2_WRITE = 1054,DISPID_IHTMLDOCUMENT2_WRITELN = 1055,DISPID_IHTMLDOCUMENT2_OPEN = 1056,DISPID_IHTMLDOCUMENT2_CLOSE = 1057,DISPID_IHTMLDOCUMENT2_CLEAR = 1058,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSUPPORTED = 1059,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDENABLED = 1060,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDSTATE = 1061,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDINDETERM = 1062,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDTEXT = 1063,DISPID_IHTMLDOCUMENT2_QUERYCOMMANDVALUE = 1064,DISPID_IHTMLDOCUMENT2_EXECCOMMAND = 1065,DISPID_IHTMLDOCUMENT2_EXECCOMMANDSHOWHELP = 1066,DISPID_IHTMLDOCUMENT2_CREATEELEMENT = 1067,DISPID_IHTMLDOCUMENT2_ONHELP = -2147412099,DISPID_IHTMLDOCUMENT2_ONCLICK = -2147412104,DISPID_IHTMLDOCUMENT2_ONDBLCLICK = -2147412103,DISPID_IHTMLDOCUMENT2_ONKEYUP = -2147412106,DISPID_IHTMLDOCUMENT2_ONKEYDOWN = -2147412107,DISPID_IHTMLDOCUMENT2_ONKEYPRESS = -2147412105,DISPID_IHTMLDOCUMENT2_ONMOUSEUP = -2147412109,DISPID_IHTMLDOCUMENT2_ONMOUSEDOWN = -2147412110,DISPID_IHTMLDOCUMENT2_ONMOUSEMOVE = -2147412108,DISPID_IHTMLDOCUMENT2_ONMOUSEOUT = -2147412111,DISPID_IHTMLDOCUMENT2_ONMOUSEOVER = -2147412112,DISPID_IHTMLDOCUMENT2_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLDOCUMENT2_ONAFTERUPDATE = -2147412090,DISPID_IHTMLDOCUMENT2_ONROWEXIT = -2147412094,DISPID_IHTMLDOCUMENT2_ONROWENTER = -2147412093,DISPID_IHTMLDOCUMENT2_ONDRAGSTART = -2147412077,DISPID_IHTMLDOCUMENT2_ONSELECTSTART = -2147412075,DISPID_IHTMLDOCUMENT2_ELEMENTFROMPOINT = 1068,DISPID_IHTMLDOCUMENT2_PARENTWINDOW = 1034,DISPID_IHTMLDOCUMENT2_STYLESHEETS = 1069,DISPID_IHTMLDOCUMENT2_ONBEFOREUPDATE = -2147412091,DISPID_IHTMLDOCUMENT2_ONERRORUPDATE = -2147412074,DISPID_IHTMLDOCUMENT2_TOSTRING = 1070,DISPID_IHTMLDOCUMENT2_CREATESTYLESHEET = 1071,DISPID_HTMLDOCUMENTEVENTS_ONHELP = -2147418102,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOUT = -2147418103,DISPID_HTMLDOCUMENTEVENTS_ONMOUSEOVER = -2147418104,DISPID_HTMLDOCUMENTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLDOCUMENTEVENTS_ONBEFOREUPDATE = -2147418108,DISPID_HTMLDOCUMENTEVENTS_ONAFTERUPDATE = -2147418107,DISPID_HTMLDOCUMENTEVENTS_ONROWEXIT = -2147418106,DISPID_HTMLDOCUMENTEVENTS_ONROWENTER = -2147418105,DISPID_HTMLDOCUMENTEVENTS_ONDRAGSTART = -2147418101,DISPID_HTMLDOCUMENTEVENTS_ONSELECTSTART = -2147418100,DISPID_HTMLDOCUMENTEVENTS_ONERRORUPDATE = -2147418099,DISPID_IHTMLEMBEDELEMENT_HIDDEN = -2147413031,DISPID_IHTMLEMBEDELEMENT_PALETTE = -2147415108,DISPID_IHTMLEMBEDELEMENT_PLUGINSPAGE = -2147415107,DISPID_IHTMLEMBEDELEMENT_SRC = -2147415106,DISPID_IHTMLEMBEDELEMENT_UNITS = -2147415104,DISPID_IHTMLEMBEDELEMENT_NAME = -2147418112,DISPID_IHTMLEMBEDELEMENT_WIDTH = -2147418107,DISPID_IHTMLEMBEDELEMENT_HEIGHT = -2147418106,DISPID_IHTMLAREASCOLLECTION_LENGTH = 1500,DISPID_IHTMLAREASCOLLECTION__NEWENUM = -4,DISPID_IHTMLAREASCOLLECTION_ITEM = 0,DISPID_IHTMLAREASCOLLECTION_TAGS = 1502,DISPID_IHTMLAREASCOLLECTION_ADD = 1503,DISPID_IHTMLAREASCOLLECTION_REMOVE = 1504,DISPID_IHTMLMAPELEMENT_AREAS = 1002,DISPID_IHTMLMAPELEMENT_NAME = -2147418112,DISPID_IHTMLAREAELEMENT_SHAPE = 1001,DISPID_IHTMLAREAELEMENT_COORDS = 1002,DISPID_IHTMLAREAELEMENT_HREF = 0,DISPID_IHTMLAREAELEMENT_TARGET = 1004,DISPID_IHTMLAREAELEMENT_ALT = 1005,DISPID_IHTMLAREAELEMENT_NOHREF = 1006,DISPID_IHTMLAREAELEMENT_HOST = 1007,DISPID_IHTMLAREAELEMENT_HOSTNAME = 1008,DISPID_IHTMLAREAELEMENT_PATHNAME = 1009,DISPID_IHTMLAREAELEMENT_PORT = 1010,DISPID_IHTMLAREAELEMENT_PROTOCOL = 1011,DISPID_IHTMLAREAELEMENT_SEARCH = 1012,DISPID_IHTMLAREAELEMENT_HASH = 1013,DISPID_IHTMLAREAELEMENT_ONBLUR = -2147412097,DISPID_IHTMLAREAELEMENT_ONFOCUS = -2147412098,DISPID_IHTMLAREAELEMENT_TABINDEX = -2147418097,DISPID_IHTMLAREAELEMENT_FOCUS = 1014,DISPID_IHTMLAREAELEMENT_BLUR = 1015,DISPID_HTMLAREAEVENTS_ONFOCUS = -2147418111,DISPID_HTMLAREAEVENTS_ONBLUR = -2147418112,DISPID_IHTMLTABLECAPTION_ALIGN = -2147418040,DISPID_IHTMLTABLECAPTION_VALIGN = -2147413081,DISPID_IHTMLCOMMENTELEMENT_TEXT = 1001,DISPID_IHTMLCOMMENTELEMENT_ATOMIC = 1002,DISPID_IHTMLTABLE_COLS = 1001,DISPID_IHTMLTABLE_BORDER = 1002,DISPID_IHTMLTABLE_FRAME = 1004,DISPID_IHTMLTABLE_RULES = 1003,DISPID_IHTMLTABLE_CELLSPACING = 1005,DISPID_IHTMLTABLE_CELLPADDING = 1006,DISPID_IHTMLTABLE_BACKGROUND = -2147413111,DISPID_IHTMLTABLE_BORDERCOLOR = -2147413084,DISPID_IHTMLTABLE_BORDERCOLORLIGHT = -2147413083,DISPID_IHTMLTABLE_BORDERCOLORDARK = -2147413082,DISPID_IHTMLTABLE_ALIGN = -2147418039,DISPID_IHTMLTABLE_REFRESH = 1015,DISPID_IHTMLTABLE_ROWS = 1016,DISPID_IHTMLTABLE_WIDTH = -2147418107,DISPID_IHTMLTABLE_HEIGHT = -2147418106,DISPID_IHTMLTABLE_DATAPAGESIZE = 1017,DISPID_IHTMLTABLE_NEXTPAGE = 1018,DISPID_IHTMLTABLE_PREVIOUSPAGE = 1019,DISPID_IHTMLTABLE_THEAD = 1020,DISPID_IHTMLTABLE_TFOOT = 1021,DISPID_IHTMLTABLE_TBODIES = 1024,DISPID_IHTMLTABLE_CAPTION = 1025,DISPID_IHTMLTABLE_CREATETHEAD = 1026,DISPID_IHTMLTABLE_DELETETHEAD = 1027,DISPID_IHTMLTABLE_CREATETFOOT = 1028,DISPID_IHTMLTABLE_DELETETFOOT = 1029,DISPID_IHTMLTABLE_CREATECAPTION = 1030,DISPID_IHTMLTABLE_DELETECAPTION = 1031,DISPID_IHTMLTABLE_INSERTROW = 1032,DISPID_IHTMLTABLE_DELETEROW = 1033,DISPID_IHTMLTABLE_READYSTATE = 1034,DISPID_IHTMLTABLE_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLTABLECOL_SPAN = 1001,DISPID_IHTMLTABLECOL_WIDTH = -2147418107,DISPID_IHTMLTABLECOL_ALIGN = -2147418040,DISPID_IHTMLTABLECOL_VALIGN = -2147413081,DISPID_IHTMLTABLESECTION_ALIGN = -2147418040,DISPID_IHTMLTABLESECTION_VALIGN = -2147413081,DISPID_IHTMLTABLESECTION_ROWS = 1000,DISPID_IHTMLTABLESECTION_INSERTROW = 1001,DISPID_IHTMLTABLESECTION_DELETEROW = 1002,DISPID_IHTMLTABLEROW_ALIGN = -2147418040,DISPID_IHTMLTABLEROW_VALIGN = -2147413081,DISPID_IHTMLTABLEROW_BORDERCOLOR = -2147413084,DISPID_IHTMLTABLEROW_BORDERCOLORLIGHT = -2147413083,DISPID_IHTMLTABLEROW_BORDERCOLORDARK = -2147413082,DISPID_IHTMLTABLEROW_ROWINDEX = 1000,DISPID_IHTMLTABLEROW_SECTIONROWINDEX = 1001,DISPID_IHTMLTABLEROW_CELLS = 1002,DISPID_IHTMLTABLEROW_INSERTCELL = 1003,DISPID_IHTMLTABLEROW_DELETECELL = 1004,DISPID_IHTMLTABLEROWMETRICS_CLIENTHEIGHT = 1005,DISPID_IHTMLTABLEROWMETRICS_CLIENTWIDTH = 1006,DISPID_IHTMLTABLEROWMETRICS_CLIENTTOP = 1007,DISPID_IHTMLTABLEROWMETRICS_CLIENTLEFT = 1008,DISPID_IHTMLTABLECELL_ROWSPAN = 2001,DISPID_IHTMLTABLECELL_COLSPAN = 2002,DISPID_IHTMLTABLECELL_ALIGN = -2147418040,DISPID_IHTMLTABLECELL_VALIGN = -2147413081,DISPID_IHTMLTABLECELL_NOWRAP = -2147413107,DISPID_IHTMLTABLECELL_BACKGROUND = -2147413111,DISPID_IHTMLTABLECELL_BORDERCOLOR = -2147413084,DISPID_IHTMLTABLECELL_BORDERCOLORLIGHT = -2147413083,DISPID_IHTMLTABLECELL_BORDERCOLORDARK = -2147413082,DISPID_IHTMLTABLECELL_WIDTH = -2147418107,DISPID_IHTMLTABLECELL_HEIGHT = -2147418106,DISPID_IHTMLTABLECELL_CELLINDEX = 2003,DISPID_HTMLTABLEEVENTS_ONREADYSTATECHANGE = -609,DISPID_IHTMLSCRIPTELEMENT_SRC = 1001,DISPID_IHTMLSCRIPTELEMENT_HTMLFOR = 1004,DISPID_IHTMLSCRIPTELEMENT_EVENT = 1005,DISPID_IHTMLSCRIPTELEMENT_TEXT = 1006,DISPID_IHTMLSCRIPTELEMENT_DEFER = 1007,DISPID_IHTMLSCRIPTELEMENT_READYSTATE = 1008,DISPID_IHTMLSCRIPTELEMENT_ONERROR = -2147412083,DISPID_IHTMLSCRIPTELEMENT_TYPE = 1009,DISPID_HTMLSCRIPTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLSCRIPTEVENTS_ONERROR = 1002,DISPID_IHTMLOBJECTELEMENT_OBJECT = -2147415111,DISPID_IHTMLOBJECTELEMENT_CLASSID = -2147415110,DISPID_IHTMLOBJECTELEMENT_DATA = -2147415109,DISPID_IHTMLOBJECTELEMENT_RECORDSET = -2147415107,DISPID_IHTMLOBJECTELEMENT_ALIGN = -2147418039,DISPID_IHTMLOBJECTELEMENT_NAME = -2147418112,DISPID_IHTMLOBJECTELEMENT_CODEBASE = -2147415106,DISPID_IHTMLOBJECTELEMENT_CODETYPE = -2147415105,DISPID_IHTMLOBJECTELEMENT_CODE = -2147415104,DISPID_IHTMLOBJECTELEMENT_BASEHREF = -2147418110,DISPID_IHTMLOBJECTELEMENT_TYPE = -2147415103,DISPID_IHTMLOBJECTELEMENT_FORM = -2147416108,DISPID_IHTMLOBJECTELEMENT_WIDTH = -2147418107,DISPID_IHTMLOBJECTELEMENT_HEIGHT = -2147418106,DISPID_IHTMLOBJECTELEMENT_READYSTATE = -2147415102,DISPID_IHTMLOBJECTELEMENT_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLOBJECTELEMENT_ONERROR = -2147412083,DISPID_IHTMLOBJECTELEMENT_ALTHTML = -2147415101,DISPID_IHTMLOBJECTELEMENT_VSPACE = -2147415100,DISPID_IHTMLOBJECTELEMENT_HSPACE = -2147415099,DISPID_HTMLOBJECTELEMENTEVENTS_ONBEFOREUPDATE = -2147418108,DISPID_HTMLOBJECTELEMENTEVENTS_ONAFTERUPDATE = -2147418107,DISPID_HTMLOBJECTELEMENTEVENTS_ONERRORUPDATE = -2147418099,DISPID_HTMLOBJECTELEMENTEVENTS_ONROWEXIT = -2147418106,DISPID_HTMLOBJECTELEMENTEVENTS_ONROWENTER = -2147418105,DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCHANGED = -2147418098,DISPID_HTMLOBJECTELEMENTEVENTS_ONDATAAVAILABLE = -2147418097,DISPID_HTMLOBJECTELEMENTEVENTS_ONDATASETCOMPLETE = -2147418096,DISPID_HTMLOBJECTELEMENTEVENTS_ONREADYSTATECHANGE = -2147418094,DISPID_HTMLOBJECTELEMENTEVENTS_ONERROR = -2147418093,DISPID_IHTMLFRAMEBASE_SRC = -2147415112,DISPID_IHTMLFRAMEBASE_NAME = -2147418112,DISPID_IHTMLFRAMEBASE_BORDER = -2147415110,DISPID_IHTMLFRAMEBASE_FRAMEBORDER = -2147415109,DISPID_IHTMLFRAMEBASE_FRAMESPACING = -2147415108,DISPID_IHTMLFRAMEBASE_MARGINWIDTH = -2147415107,DISPID_IHTMLFRAMEBASE_MARGINHEIGHT = -2147415106,DISPID_IHTMLFRAMEBASE_NORESIZE = -2147415105,DISPID_IHTMLFRAMEBASE_SCROLLING = -2147415104,DISPID_IHTMLFRAMEELEMENT_BORDERCOLOR = -2147414111,DISPID_IHTMLIFRAMEELEMENT_HEIGHT = -2147418106,DISPID_IHTMLIFRAMEELEMENT_WIDTH = -2147418107,DISPID_IHTMLIFRAMEELEMENT_VSPACE = -2147414111,DISPID_IHTMLIFRAMEELEMENT_HSPACE = -2147414110,DISPID_IHTMLIFRAMEELEMENT_ALIGN = -2147418039,DISPID_IHTMLDIVPOSITION_ALIGN = -2147418039,DISPID_IHTMLFIELDSETELEMENT_ALIGN = -2147418039,DISPID_IHTMLLEGENDELEMENT_ALIGN = -2147418039,DISPID_IHTMLSPANFLOW_ALIGN = -2147418039,DISPID_IHTMLFRAMESETELEMENT_ROWS = 1000,DISPID_IHTMLFRAMESETELEMENT_COLS = 1001,DISPID_IHTMLFRAMESETELEMENT_BORDER = 1002,DISPID_IHTMLFRAMESETELEMENT_BORDERCOLOR = 1003,DISPID_IHTMLFRAMESETELEMENT_FRAMEBORDER = 1004,DISPID_IHTMLFRAMESETELEMENT_FRAMESPACING = 1005,DISPID_IHTMLFRAMESETELEMENT_NAME = -2147418112,DISPID_IHTMLFRAMESETELEMENT_ONLOAD = -2147412080,DISPID_IHTMLFRAMESETELEMENT_ONUNLOAD = -2147412079,DISPID_IHTMLFRAMESETELEMENT_ONBEFOREUNLOAD = -2147412073,DISPID_IHTMLBGSOUND_SRC = 1001,DISPID_IHTMLBGSOUND_LOOP = 1002,DISPID_IHTMLBGSOUND_VOLUME = 1003,DISPID_IHTMLBGSOUND_BALANCE = 1004,DISPID_IHTMLFONTNAMESCOLLECTION_LENGTH = 1501,DISPID_IHTMLFONTNAMESCOLLECTION__NEWENUM = -4,DISPID_IHTMLFONTNAMESCOLLECTION_ITEM = 0,DISPID_IHTMLFONTSIZESCOLLECTION_LENGTH = 1502,DISPID_IHTMLFONTSIZESCOLLECTION__NEWENUM = -4,DISPID_IHTMLFONTSIZESCOLLECTION_FORFONT = 1503,DISPID_IHTMLFONTSIZESCOLLECTION_ITEM = 0,DISPID_IHTMLOPTIONSHOLDER_DOCUMENT = 1503,DISPID_IHTMLOPTIONSHOLDER_FONTS = 1504,DISPID_IHTMLOPTIONSHOLDER_EXECARG = 1505,DISPID_IHTMLOPTIONSHOLDER_ERRORLINE = 1506,DISPID_IHTMLOPTIONSHOLDER_ERRORCHARACTER = 1507,DISPID_IHTMLOPTIONSHOLDER_ERRORCODE = 1508,DISPID_IHTMLOPTIONSHOLDER_ERRORMESSAGE = 1509,DISPID_IHTMLOPTIONSHOLDER_ERRORDEBUG = 1510,DISPID_IHTMLOPTIONSHOLDER_UNSECUREDWINDOWOFDOCUMENT = 1511,DISPID_IHTMLOPTIONSHOLDER_FINDTEXT = 1512,DISPID_IHTMLOPTIONSHOLDER_ANYTHINGAFTERFRAMESET = 1513,DISPID_IHTMLOPTIONSHOLDER_SIZES = 1514,DISPID_IHTMLOPTIONSHOLDER_OPENFILEDLG = 1515,DISPID_IHTMLOPTIONSHOLDER_SAVEFILEDLG = 1516,DISPID_IHTMLOPTIONSHOLDER_CHOOSECOLORDLG = 1517,DISPID_IHTMLOPTIONSHOLDER_SHOWSECURITYINFO = 1518,DISPID_IHTMLOPTIONSHOLDER_ISAPARTMENTMODEL = 1519,DISPID_IHTMLOPTIONSHOLDER_GETCHARSET = 1520,DISPID_IHTMLSTYLEELEMENT_TYPE = 1002,DISPID_IHTMLSTYLEELEMENT_READYSTATE = 1003,DISPID_IHTMLSTYLEELEMENT_ONREADYSTATECHANGE = -2147412087,DISPID_IHTMLSTYLEELEMENT_ONLOAD = -2147412080,DISPID_IHTMLSTYLEELEMENT_ONERROR = -2147412083,DISPID_IHTMLSTYLEELEMENT_STYLESHEET = 1004,DISPID_IHTMLSTYLEELEMENT_DISABLED = 1005,DISPID_IHTMLSTYLEELEMENT_MEDIA = 1006,DISPID_HTMLSTYLEELEMENTEVENTS_ONREADYSTATECHANGE = -609,DISPID_HTMLSTYLEELEMENTEVENTS_ONLOAD = 1003,DISPID_HTMLSTYLEELEMENTEVENTS_ONERROR = 1002,DISPID_IHTMLSTYLEFONTFACE_FONTSRC = -2147413015,DISPID_IHTMLDIALOG_DIALOGTOP = -2147418108,DISPID_IHTMLDIALOG_DIALOGLEFT = -2147418109,DISPID_IHTMLDIALOG_DIALOGWIDTH = -2147418107,DISPID_IHTMLDIALOG_DIALOGHEIGHT = -2147418106,DISPID_IHTMLDIALOG_DIALOGARGUMENTS = 25000,DISPID_IHTMLDIALOG_MENUARGUMENTS = 25013,DISPID_IHTMLDIALOG_RETURNVALUE = 25001,DISPID_IHTMLDIALOG_CLOSE = 25011,DISPID_IHTMLDIALOG_TOSTRING = 25012,};
enum MACRO_DLGWINDOWEXTRA {DLGWINDOWEXTRA = 30,};
enum MACRO_DMDISPLAYFLAGS {DMDISPLAYFLAGS_TEXTMODE = 0x4,};
enum MACRO_DM_SPECVERSION {DM_SPECVERSION = 0x401,DM_ORIENTATION = 0x1,DM_PAPERSIZE = 0x2,DM_PAPERLENGTH = 0x4,DM_PAPERWIDTH = 0x8,DM_SCALE = 0x10,DM_POSITION = 0x20,DM_COPIES = 0x100,DM_DEFAULTSOURCE = 0x200,DM_PRINTQUALITY = 0x400,DM_COLOR = 0x800,DM_DUPLEX = 0x1000,DM_YRESOLUTION = 0x2000,DM_TTOPTION = 0x4000,DM_COLLATE = 0x8000,DM_FORMNAME = 0x10000,DM_LOGPIXELS = 0x20000,DM_BITSPERPEL = 0x40000,DM_PELSWIDTH = 0x80000,DM_PELSHEIGHT = 0x100000,DM_DISPLAYFLAGS = 0x200000,DM_DISPLAYFREQUENCY = 0x400000,DM_ICMMETHOD = 0x800000,DM_ICMINTENT = 0x1000000,DM_MEDIATYPE = 0x2000000,DM_DITHERTYPE = 0x4000000,DM_PANNINGWIDTH = 0x8000000,DM_PANNINGHEIGHT = 0x10000000,};
enum MACRO_DOUBLE_MAXIMUM {DOUBLE_MAXIMUM_EXPONENT = 2047,DOUBLE_MINIMUM_EXPONENT = 0,};
enum MACRO_DOWNLOADHEADER {DOWNLOADHEADER = 4111,};
enum MACRO_DPENUMSESSIONS {DPENUMSESSIONS_AVAILABLE = 0x1,DPENUMSESSIONS_ALL = 0x2,DPENUMSESSIONS_ASYNC = 0x10,DPENUMSESSIONS_STOPASYNC = 0x20,DPENUMSESSIONS_PASSWORDREQUIRED = 0x40,DPENUMSESSIONS_RETURNSTATUS = 0x80,};
enum MACRO_DPSHORTNAMELEN {DPSHORTNAMELEN = 20,DPSESSIONNAMELEN = 32,};
enum MACRO_DPUSERRESERVED {DPUSERRESERVED = 16,};
enum MACRO_EDK_CBTRANSFER {EDK_CBTRANSFER = 4096,};
enum MACRO_ELEMENT_STATUS {ELEMENT_STATUS_FULL = 0x1,ELEMENT_STATUS_IMPEXP = 0x2,ELEMENT_STATUS_EXCEPT = 0x4,ELEMENT_STATUS_ACCESS = 0x8,ELEMENT_STATUS_EXENAB = 0x10,ELEMENT_STATUS_INENAB = 0x20,ELEMENT_STATUS_LUN_VALID = 0x1000,ELEMENT_STATUS_ID_VALID = 0x2000,ELEMENT_STATUS_NOT_BUS = 0x8000,ELEMENT_STATUS_INVERT = 0x400000,ELEMENT_STATUS_SVALID = 0x800000,ELEMENT_STATUS_PVOLTAG = 0x10000000,ELEMENT_STATUS_AVOLTAG = 0x20000000,};
enum MACRO_ENABLE_DISABLE {ENABLE_DISABLE_AUTOSAVE = 0xD2,};
enum MACRO_ERROR_EXPECTED {ERROR_EXPECTED_SECTION_NAME = -536870912,ERROR_BAD_SECTION_NAME_LINE = -536870911,ERROR_SECTION_NAME_TOO_LONG = -536870910,ERROR_GENERAL_SYNTAX = -536870909,ERROR_WRONG_INF_STYLE = -536870656,ERROR_SECTION_NOT_FOUND = -536870655,ERROR_LINE_NOT_FOUND = -536870654,ERROR_NO_ASSOCIATED_CLASS = -536870400,ERROR_CLASS_MISMATCH = -536870399,ERROR_DUPLICATE_FOUND = -536870398,ERROR_NO_DRIVER_SELECTED = -536870397,ERROR_KEY_DOES_NOT_EXIST = -536870396,ERROR_INVALID_DEVINST_NAME = -536870395,ERROR_INVALID_CLASS = -536870394,ERROR_DEVINST_ALREADY_EXISTS = -536870393,ERROR_DEVINFO_NOT_REGISTERED = -536870392,ERROR_INVALID_REG_PROPERTY = -536870391,ERROR_NO_INF = -536870390,ERROR_NO_SUCH_DEVINST = -536870389,ERROR_CANT_LOAD_CLASS_ICON = -536870388,ERROR_INVALID_CLASS_INSTALLER = -536870387,ERROR_DI_DO_DEFAULT = -536870386,ERROR_DI_NOFILECOPY = -536870385,ERROR_INVALID_HWPROFILE = -536870384,ERROR_NO_DEVICE_SELECTED = -536870383,ERROR_DEVINFO_LIST_LOCKED = -536870382,ERROR_DEVINFO_DATA_LOCKED = -536870381,ERROR_DI_BAD_PATH = -536870380,ERROR_NO_CLASSINSTALL_PARAMS = -536870379,ERROR_FILEQUEUE_LOCKED = -536870378,ERROR_BAD_SERVICE_INSTALLSECT = -536870377,ERROR_NO_CLASS_DRIVER_LIST = -536870376,ERROR_NO_ASSOCIATED_SERVICE = -536870375,ERROR_NO_DEFAULT_DEVICE_INTERFACE = -536870374,ERROR_DEVICE_INTERFACE_ACTIVE = -536870373,ERROR_DEVICE_INTERFACE_REMOVED = -536870372,ERROR_BAD_INTERFACE_INSTALLSECT = -536870371,ERROR_NO_SUCH_INTERFACE_CLASS = -536870370,ERROR_INVALID_REFERENCE_STRING = -536870369,ERROR_INVALID_MACHINENAME = -536870368,ERROR_REMOTE_COMM_FAILURE = -536870367,ERROR_MACHINE_UNAVAILABLE = -536870366,ERROR_NO_CONFIGMGR_SERVICES = -536870365,ERROR_INVALID_PROPPAGE_PROVIDER = -536870364,ERROR_NO_SUCH_DEVICE_INTERFACE = -536870363,ERROR_DI_POSTPROCESSING_REQUIRED = -536870362,ERROR_INVALID_COINSTALLER = -536870361,ERROR_NO_COMPAT_DRIVERS = -536870360,ERROR_NO_DEVICE_ICON = -536870359,ERROR_INVALID_INF_LOGCONFIG = -536870358,ERROR_DI_DONT_INSTALL = -536870357,ERROR_INVALID_FILTER_DRIVER = -536870356,ERROR_NO_DEFAULT_INTERFACE_DEVICE = -536870374,ERROR_INTERFACE_DEVICE_ACTIVE = -536870373,ERROR_INTERFACE_DEVICE_REMOVED = -536870372,ERROR_NO_SUCH_INTERFACE_DEVICE = -536870363,ERROR_NOT_INSTALLED = -536866816,};
enum MACRO_ERROR_INTERNET {ERROR_INTERNET_OUT_OF_HANDLES = 12001,ERROR_INTERNET_TIMEOUT = 12002,ERROR_INTERNET_EXTENDED_ERROR = 12003,ERROR_INTERNET_INTERNAL_ERROR = 12004,ERROR_INTERNET_INVALID_URL = 12005,ERROR_INTERNET_UNRECOGNIZED_SCHEME = 12006,ERROR_INTERNET_NAME_NOT_RESOLVED = 12007,ERROR_INTERNET_PROTOCOL_NOT_FOUND = 12008,ERROR_INTERNET_INVALID_OPTION = 12009,ERROR_INTERNET_BAD_OPTION_LENGTH = 12010,ERROR_INTERNET_OPTION_NOT_SETTABLE = 12011,ERROR_INTERNET_SHUTDOWN = 12012,ERROR_INTERNET_INCORRECT_USER_NAME = 12013,ERROR_INTERNET_INCORRECT_PASSWORD = 12014,ERROR_INTERNET_LOGIN_FAILURE = 12015,ERROR_INTERNET_INVALID_OPERATION = 12016,ERROR_INTERNET_OPERATION_CANCELLED = 12017,ERROR_INTERNET_INCORRECT_HANDLE_TYPE = 12018,ERROR_INTERNET_INCORRECT_HANDLE_STATE = 12019,ERROR_INTERNET_NOT_PROXY_REQUEST = 12020,ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND = 12021,ERROR_INTERNET_BAD_REGISTRY_PARAMETER = 12022,ERROR_INTERNET_NO_DIRECT_ACCESS = 12023,ERROR_INTERNET_NO_CONTEXT = 12024,ERROR_INTERNET_NO_CALLBACK = 12025,ERROR_INTERNET_REQUEST_PENDING = 12026,ERROR_INTERNET_INCORRECT_FORMAT = 12027,ERROR_INTERNET_ITEM_NOT_FOUND = 12028,ERROR_INTERNET_CANNOT_CONNECT = 12029,ERROR_INTERNET_CONNECTION_ABORTED = 12030,ERROR_INTERNET_CONNECTION_RESET = 12031,ERROR_INTERNET_FORCE_RETRY = 12032,ERROR_INTERNET_INVALID_PROXY_REQUEST = 12033,ERROR_INTERNET_NEED_UI = 12034,ERROR_INTERNET_HANDLE_EXISTS = 12036,ERROR_INTERNET_SEC_CERT_DATE_INVALID = 12037,ERROR_INTERNET_SEC_CERT_CN_INVALID = 12038,ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR = 12039,ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR = 12040,ERROR_INTERNET_MIXED_SECURITY = 12041,ERROR_INTERNET_CHG_POST_IS_NON_SECURE = 12042,ERROR_INTERNET_POST_IS_NON_SECURE = 12043,ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED = 12044,ERROR_INTERNET_INVALID_CA = 12045,ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP = 12046,ERROR_INTERNET_ASYNC_THREAD_FAILED = 12047,ERROR_INTERNET_REDIRECT_SCHEME_CHANGE = 12048,ERROR_INTERNET_DIALOG_PENDING = 12049,ERROR_INTERNET_RETRY_DIALOG = 12050,ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR = 12052,ERROR_INTERNET_INSERT_CDROM = 12053,ERROR_FTP_TRANSFER_IN_PROGRESS = 12110,ERROR_FTP_DROPPED = 12111,ERROR_FTP_NO_PASSIVE_MODE = 12112,ERROR_GOPHER_PROTOCOL_ERROR = 12130,ERROR_GOPHER_NOT_FILE = 12131,ERROR_GOPHER_DATA_ERROR = 12132,ERROR_GOPHER_END_OF_DATA = 12133,ERROR_GOPHER_INVALID_LOCATOR = 12134,ERROR_GOPHER_INCORRECT_LOCATOR_TYPE = 12135,ERROR_GOPHER_NOT_GOPHER_PLUS = 12136,ERROR_GOPHER_ATTRIBUTE_NOT_FOUND = 12137,ERROR_GOPHER_UNKNOWN_LOCATOR = 12138,ERROR_HTTP_HEADER_NOT_FOUND = 12150,ERROR_HTTP_DOWNLEVEL_SERVER = 12151,ERROR_HTTP_INVALID_SERVER_RESPONSE = 12152,ERROR_HTTP_INVALID_HEADER = 12153,ERROR_HTTP_INVALID_QUERY_REQUEST = 12154,ERROR_HTTP_HEADER_ALREADY_EXISTS = 12155,ERROR_HTTP_REDIRECT_FAILED = 12156,ERROR_HTTP_NOT_REDIRECTED = 12160,ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION = 12161,ERROR_HTTP_COOKIE_DECLINED = 12162,ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION = 12168,ERROR_INTERNET_SECURITY_CHANNEL_ERROR = 12157,ERROR_INTERNET_UNABLE_TO_CACHE_FILE = 12158,ERROR_INTERNET_TCPIP_NOT_INSTALLED = 12159,ERROR_INTERNET_DISCONNECTED = 12163,ERROR_INTERNET_SERVER_UNREACHABLE = 12164,ERROR_INTERNET_PROXY_SERVER_UNREACHABLE = 12165,ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT = 12166,ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT = 12167,ERROR_INTERNET_SEC_INVALID_CERT = 12169,ERROR_INTERNET_SEC_CERT_REVOKED = 12170,ERROR_INTERNET_FAILED_DUETOSECURITYCHECK = 12171,};
enum MACRO_ETHERNET_FRAME {ETHERNET_FRAME_TYPE_IP = 0x800,};
enum MACRO_FACILITY_SCARD {FACILITY_SCARD = 0x10,};
enum MACRO_FORMATDLGORD30 {FORMATDLGORD30 = 1544,};
enum MACRO_FORMATDLGORD31 {FORMATDLGORD31 = 1543,};
enum MACRO_GCL_CONVERSION {GCL_CONVERSION = 0x1,GCL_REVERSECONVERSION = 0x2,GCL_REVERSE_LENGTH = 0x3,};
enum MACRO_GETDEVICEUNITS {GETDEVICEUNITS = 42,GETEXTENDEDTEXTMETRICS = 256,};
enum MACRO_GETEXTENTTABLE {GETEXTENTTABLE = 257,};
enum MACRO_GMEM_DISCARDED {GMEM_DISCARDED = 0x4000,GMEM_LOCKCOUNT = 0xFF,};
enum MACRO_ID_DEFAULTINST {ID_DEFAULTINST = -2,};
enum MACRO_IME_MAXPROCESS {IME_MAXPROCESS = 32,};
enum MACRO_INTERNET_CACHE {INTERNET_CACHE_GROUP_ADD = 0,INTERNET_CACHE_GROUP_REMOVE = 1,INTERNET_DIAL_UNATTENDED = 32768,};
enum MACRO_INTERNET_ERROR {INTERNET_ERROR_MASK_INSERT_CDROM = 0x1,};
enum MACRO_INVALID_SOCKET {INVALID_SOCKET = 4294967295,};
enum MACRO_LINEAGENTSTATE {LINEAGENTSTATE_LOGGEDOFF = 0x1,LINEAGENTSTATE_NOTREADY = 0x2,LINEAGENTSTATE_READY = 0x4,LINEAGENTSTATE_BUSYACD = 0x8,LINEAGENTSTATE_BUSYINCOMING = 0x10,LINEAGENTSTATE_BUSYOUTBOUND = 0x20,LINEAGENTSTATE_BUSYOTHER = 0x40,LINEAGENTSTATE_WORKINGAFTERCALL = 0x80,LINEAGENTSTATE_UNKNOWN = 0x100,LINEAGENTSTATE_UNAVAIL = 0x200,};
enum MACRO_LINEANSWERMODE {LINEANSWERMODE_NONE = 0x1,LINEANSWERMODE_DROP = 0x2,LINEANSWERMODE_HOLD = 0x4,};
enum MACRO_LINEBEARERMODE {LINEBEARERMODE_VOICE = 0x1,LINEBEARERMODE_SPEECH = 0x2,LINEBEARERMODE_MULTIUSE = 0x4,LINEBEARERMODE_DATA = 0x8,LINEBEARERMODE_ALTSPEECHDATA = 0x10,LINEBEARERMODE_NONCALLSIGNALING = 0x20,LINEBEARERMODE_PASSTHROUGH = 0x40,LINEBEARERMODE_RESTRICTEDDATA = 0x80,};
enum MACRO_LINECALLORIGIN {LINECALLORIGIN_OUTBOUND = 0x1,LINECALLORIGIN_INTERNAL = 0x2,LINECALLORIGIN_EXTERNAL = 0x4,LINECALLORIGIN_UNKNOWN = 0x10,LINECALLORIGIN_UNAVAIL = 0x20,LINECALLORIGIN_CONFERENCE = 0x40,LINECALLORIGIN_INBOUND = 0x80,};
enum MACRO_LINECALLREASON {LINECALLREASON_DIRECT = 0x1,LINECALLREASON_FWDBUSY = 0x2,LINECALLREASON_FWDNOANSWER = 0x4,LINECALLREASON_FWDUNCOND = 0x8,LINECALLREASON_PICKUP = 0x10,LINECALLREASON_UNPARK = 0x20,LINECALLREASON_REDIRECT = 0x40,LINECALLREASON_CALLCOMPLETION = 0x80,LINECALLREASON_TRANSFER = 0x100,LINECALLREASON_REMINDER = 0x200,LINECALLREASON_UNKNOWN = 0x400,LINECALLREASON_UNAVAIL = 0x800,LINECALLREASON_INTRUDE = 0x1000,LINECALLREASON_PARKED = 0x2000,LINECALLREASON_CAMPEDON = 0x4000,LINECALLREASON_ROUTEREQUEST = 0x8000,};
enum MACRO_LINECALLSELECT {LINECALLSELECT_LINE = 0x1,LINECALLSELECT_ADDRESS = 0x2,LINECALLSELECT_CALL = 0x4,LINECALLSELECT_DEVICEID = 0x8,};
enum MACRO_LINECARDOPTION {LINECARDOPTION_PREDEFINED = 0x1,LINECARDOPTION_HIDDEN = 0x2,};
enum MACRO_LINEGATHERTERM {LINEGATHERTERM_BUFFERFULL = 0x1,LINEGATHERTERM_TERMDIGIT = 0x2,LINEGATHERTERM_FIRSTTIMEOUT = 0x4,LINEGATHERTERM_INTERTIMEOUT = 0x8,LINEGATHERTERM_CANCEL = 0x10,};
enum MACRO_LINEOPENOPTION {LINEOPENOPTION_SINGLEADDRESS = 0x80000000,LINEOPENOPTION_PROXY = 0x40000000,};
enum MACRO_LINETSPIOPTION {LINETSPIOPTION_NONREENTRANT = 0x1,};
enum MACRO_LMEM_DISCARDED {LMEM_DISCARDED = 0x4000,LMEM_LOCKCOUNT = 0xFF,};
enum MACRO_LVM_SETBKIMAGE {LVM_SETBKIMAGE = 4164,LVM_GETBKIMAGE = 4165,};
enum MACRO_MAXPERMENTRIES {MAXPERMENTRIES = 64,};
enum MACRO_MAX_SIZE_MPEG1 {MAX_SIZE_MPEG1_SEQUENCE_INFO = 140,};
enum MACRO_MB_PRECOMPOSED {MB_PRECOMPOSED = 0x1,MB_COMPOSITE = 0x2,MB_USEGLYPHCHARS = 0x4,MB_ERR_INVALID_CHARS = 0x8,};
enum MACRO_MODRECIP_EMPTY {MODRECIP_EMPTY = 10,};
enum MACRO_MOD_UNMODIFIED {MOD_UNMODIFIED = 0x0,MOD_CREATED = 0x1,MOD_DELETED = 0x2,MOD_DENY_ACCESS = 0x4,};
enum MACRO_MOM_POSITIONCB {MOM_POSITIONCB = 970,};
enum MACRO_MULTICLASSINFO {MULTICLASSINFO_GETTYPEINFO = 0x1,MULTICLASSINFO_GETNUMRESERVEDDISPIDS = 0x2,MULTICLASSINFO_GETIIDPRIMARY = 0x4,MULTICLASSINFO_GETIIDSOURCE = 0x8,};
enum MACRO_NCBCHAINSENDNA {NCBCHAINSENDNA = 0x72,};
enum MACRO_NEWFILEOPENORD {NEWFILEOPENORD = 1547,};
enum MACRO_NEWTRANSPARENT {NEWTRANSPARENT = 3,QUERYROPSUPPORT = 40,};
enum MACRO_NOTIFY_NEWMAIL {NOTIFY_NEWMAIL = 0x1,NOTIFY_READYTOSEND = 0x2,NOTIFY_SENTDEFERRED = 0x4,NOTIFY_CRITSEC = 0x1000,NOTIFY_NONCRIT = 0x2000,NOTIFY_CONFIG_CHANGE = 0x4000,NOTIFY_CRITICAL_ERROR = 0x10000000,NOTIFY_NEWMAIL_RECEIVED = 0x20000000,};
enum MACRO_NO_INHERITANCE {NO_INHERITANCE = 0x0,};
enum MACRO_NUMIPXSESSIONS {NUMIPXSESSIONS = 6,NUMINQMPACKETS = 8,};
enum MACRO_NUMSESSINBYTES {NUMSESSINBYTES = 26,};
enum MACRO_NWEXPORT_NWDLL {NWEXPORT_NWDLL_LOAD_FAILED = 0xC0000133,NWEXPORT_LOGIN_FAILED = 0xC0000134,NWEXPORT_ATTACH_FAILED = 0xC0000135,NWEXPORT_LOGOUT_FAILED = 0xC0000136,NWEXPORT_DETACHED_FAILED = 0xC0000137,NWEXPORT_NO_USER = 0xC0000138,};
enum MACRO_PDC_INTEGRATED {PDC_INTEGRATED = 0x1,PDC_PROXIMITY = 0x2,PDC_RANGE = 0x4,PDC_INVERT = 0x8,PDC_RELATIVE = 0x10,PDC_BARREL1 = 0x20,PDC_BARREL2 = 0x40,PDC_BARREL3 = 0x80,};
enum MACRO_PHONEPRIVILEGE {PHONEPRIVILEGE_MONITOR = 0x1,PHONEPRIVILEGE_OWNER = 0x2,};
enum MACRO_PHYSICALHEIGHT {PHYSICALHEIGHT = 111,};
enum MACRO_PKCS_ATTRIBUTE {PKCS_ATTRIBUTE = 22,PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 23,};
enum MACRO_PRINTER_ACCESS {PRINTER_ACCESS_ADMINISTER = 0x4,PRINTER_ACCESS_USE = 0x8,};
enum MACRO_PRINTER_NOTIFY {PRINTER_NOTIFY_FIELD_SERVER_NAME = 0x0,PRINTER_NOTIFY_FIELD_PRINTER_NAME = 0x1,PRINTER_NOTIFY_FIELD_SHARE_NAME = 0x2,PRINTER_NOTIFY_FIELD_PORT_NAME = 0x3,PRINTER_NOTIFY_FIELD_DRIVER_NAME = 0x4,PRINTER_NOTIFY_FIELD_COMMENT = 0x5,PRINTER_NOTIFY_FIELD_LOCATION = 0x6,PRINTER_NOTIFY_FIELD_DEVMODE = 0x7,PRINTER_NOTIFY_FIELD_SEPFILE = 0x8,PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 0x9,PRINTER_NOTIFY_FIELD_PARAMETERS = 0xA,PRINTER_NOTIFY_FIELD_DATATYPE = 0xB,PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,PRINTER_NOTIFY_FIELD_ATTRIBUTES = 0xD,PRINTER_NOTIFY_FIELD_PRIORITY = 0xE,PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 0xF,PRINTER_NOTIFY_FIELD_START_TIME = 0x10,PRINTER_NOTIFY_FIELD_UNTIL_TIME = 0x11,PRINTER_NOTIFY_FIELD_STATUS = 0x12,PRINTER_NOTIFY_FIELD_STATUS_STRING = 0x13,PRINTER_NOTIFY_FIELD_CJOBS = 0x14,PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 0x15,PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 0x16,PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 0x17,PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 0x18,PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 0x19,PRINTER_NOTIFY_FIELD_OBJECT_GUID = 0x1A,};
enum MACRO_PRIORITY_CLASS {NORMAL_PRIORITY_CLASS = 0x20,IDLE_PRIORITY_CLASS = 0x40,HIGH_PRIORITY_CLASS = 0x80,REALTIME_PRIORITY_CLASS = 0x100,};
enum MACRO_PRIVATEKEYBLOB {PRIVATEKEYBLOB = 0x7,PLAINTEXTKEYBLOB = 0x8,};
enum MACRO_PRNSETUPDLGORD {PRNSETUPDLGORD = 1539,};
enum MACRO_PROFILE_LINKED {PROFILE_LINKED = 1279872587,PROFILE_EMBEDDED = 1296188740,};
enum MACRO_PR_CFG_NETBIOS {PR_CFG_NETBIOS_NTFY = 0x6623000B,PR_CFG_SPOOLER_POLL = 0x6624001E,PR_CFG_GAL_ONLY = 0x6625000B,PR_CFG_LAN_HEADERS = 0x6630000B,PR_CFG_LAN_LOCAL_AB = 0x6631000B,PR_CFG_LAN_EXTERNAL_DELIVERY = 0x6632000B,PR_CFG_RAS_EXTERNAL_DELIVERY = 0x6639000B,PR_CFG_RAS_HEADERS = 0x6640000B,PR_CFG_RAS_LOCAL_AB = 0x6641000B,PR_CFG_RAS_INIT_ON_START = 0x6642000B,PR_CFG_RAS_TERM_ON_HDRS = 0x6643000B,PR_CFG_RAS_TERM_ON_XFER = 0x6644000B,PR_CFG_RAS_TERM_ON_EXIT = 0x6645000B,PR_CFG_RAS_PROFILE = 0x6646001E,PR_CFG_RAS_CONFIRM = 0x66470003,};
enum MACRO_PR_CFG_SESSION {PR_CFG_SESSION_LOG = 0x6604000B,PR_CFG_SESSION_LOG_FILE = 0x6605001E,PR_CFG_REMEMBER = 0x6606000B,PR_CFG_ENABLE_UPLOAD = 0x6620000B,PR_CFG_ENABLE_DOWNLOAD = 0x6621000B,PR_CFG_UPLOADTO = 0x66220003,};
enum MACRO_PT_UNSPECIFIED {PT_UNSPECIFIED = 0,PT_NULL = 1,PT_I2 = 2,PT_LONG = 3,PT_R4 = 4,PT_DOUBLE = 5,PT_CURRENCY = 6,PT_APPTIME = 7,PT_ERROR = 10,PT_BOOLEAN = 11,PT_OBJECT = 13,PT_I8 = 20,PT_STRING8 = 30,PT_UNICODE = 31,PT_SYSTIME = 64,PT_CLSID = 72,PT_BINARY = 258,PT_SHORT = 2,PT_I4 = 3,PT_FLOAT = 4,PT_R8 = 5,PT_LONGLONG = 20,PT_TSTRING = 30,PT_MV_TSTRING = 4126,};
enum MACRO_REGSTR_VAL_MAX {REGSTR_VAL_MAX_HCID_LEN = 1024,};
enum MACRO_RequestSuccess {RequestSuccess = 0,RequestFailed = 1,RequestPending = 2,};
enum MACRO_SAVE_ATTRIBUTE {SAVE_ATTRIBUTE_VALUES = 0xD3,};
enum MACRO_SCALINGFACTORX {SCALINGFACTORX = 114,};
enum MACRO_SCALINGFACTORY {SCALINGFACTORY = 115,};
enum MACRO_SCRIPTTHREADID {SCRIPTTHREADID_CURRENT = 4294967295,SCRIPTTHREADID_BASE = 4294967294,SCRIPTTHREADID_ALL = 4294967293,};
enum MACRO_SEARCH_NEAREST {SEARCH_NEAREST = 4,SEARCH_BACKWARD = 4,SEARCH_FORWARD = 1,SEARCH_KEY = 16,SEARCH_ANY = 32,};
enum MACRO_SECPKG_OPTIONS {SECPKG_OPTIONS_TYPE_UNKNOWN = 0,SECPKG_OPTIONS_TYPE_LSA = 1,SECPKG_OPTIONS_TYPE_SSPI = 2,SECPKG_OPTIONS_PERMANENT = 1,};
enum MACRO_SHADEBLENDCAPS {SHADEBLENDCAPS = 45,};
enum MACRO_SINGLE_MAXIMUM {SINGLE_MAXIMUM_VALUE = 0x7F7FFFFF,};
enum MACRO_SMALLMONEYBIND {SMALLMONEYBIND = 15,SMALLDATETIBIND = 16,};
enum MACRO_SNMP_EXCEPTION {SNMP_EXCEPTION_NOSUCHOBJECT = 0x80,SNMP_EXCEPTION_NOSUCHINSTANCE = 0x81,SNMP_EXCEPTION_ENDOFMIBVIEW = 0x82,SNMP_EXTENSION_GET = 0xA0,SNMP_EXTENSION_GET_NEXT = 0xA1,SNMP_EXTENSION_GET_BULK = 0xA5,SNMP_EXTENSION_SET_TEST = 0xE0,SNMP_EXTENSION_SET_COMMIT = 0xA3,SNMP_EXTENSION_SET_UNDO = 0xE1,SNMP_EXTENSION_SET_CLEANUP = 0xE2,SNMP_ERRORSTATUS_NOERROR = 0x0,SNMP_ERRORSTATUS_TOOBIG = 0x1,SNMP_ERRORSTATUS_NOSUCHNAME = 0x2,SNMP_ERRORSTATUS_BADVALUE = 0x3,SNMP_ERRORSTATUS_READONLY = 0x4,SNMP_ERRORSTATUS_GENERR = 0x5,SNMP_ERRORSTATUS_NOACCESS = 0x6,SNMP_ERRORSTATUS_WRONGTYPE = 0x7,SNMP_ERRORSTATUS_WRONGLENGTH = 0x8,SNMP_ERRORSTATUS_WRONGENCODING = 0x9,SNMP_ERRORSTATUS_WRONGVALUE = 0xA,SNMP_ERRORSTATUS_NOCREATION = 0xB,SNMP_ERRORSTATUS_INCONSISTENTVALUE = 0xC,SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE = 0xD,SNMP_ERRORSTATUS_COMMITFAILED = 0xE,SNMP_ERRORSTATUS_UNDOFAILED = 0xF,SNMP_ERRORSTATUS_AUTHORIZATIONERROR = 0x10,SNMP_ERRORSTATUS_NOTWRITABLE = 0x11,SNMP_ERRORSTATUS_INCONSISTENTNAME = 0x12,SNMP_GENERICTRAP_COLDSTART = 0x0,SNMP_GENERICTRAP_WARMSTART = 0x1,SNMP_GENERICTRAP_LINKDOWN = 0x2,SNMP_GENERICTRAP_LINKUP = 0x3,SNMP_GENERICTRAP_AUTHFAILURE = 0x4,SNMP_GENERICTRAP_EGPNEIGHLOSS = 0x5,SNMP_GENERICTRAP_ENTERSPECIFIC = 0x6,SNMP_ACCESS_NONE = 0x0,SNMP_ACCESS_NOTIFY = 0x1,SNMP_ACCESS_READ_ONLY = 0x2,SNMP_ACCESS_READ_WRITE = 0x3,SNMP_ACCESS_READ_CREATE = 0x4,};
enum MACRO_SP_NOTREPORTED {SP_NOTREPORTED = 0x4000,SP_ERROR = 0xFFFFFFFF,SP_APPABORT = 0xFFFFFFFE,SP_USERABORT = 0xFFFFFFFD,SP_OUTOFDISK = 0xFFFFFFFC,SP_OUTOFMEMORY = 0xFFFFFFFB,};
enum MACRO_SRCDECIMALBIND {SRCDECIMALBIND = 19,};
enum MACRO_SRCNUMERICBIND {SRCNUMERICBIND = 20,};
enum MACRO_SRVRETURNVALUE {SRVRETURNVALUE = 172,};
enum MACRO_SUBLANG_KOREAN {SUBLANG_KOREAN_JOHAB = 0x2,};
enum MACRO_S_ASYNCHRONOUS {S_ASYNCHRONOUS = 262632,};
enum MACRO_TIMEOUT_IGNORE {TIMEOUT_IGNORE = 4294967295,TIMEOUT_INFINITE = 0,TIMEOUT_MAXIMUM = 1200,};
enum MACRO_TVM_SELECTITEM {TVM_SELECTITEM = 4363,TVM_GETITEMA = 4364,TVM_GETITEMW = 4414,TVM_GETITEM = 4364,TVM_SETITEMA = 4365,TVM_SETITEMW = 4415,TVM_SETITEM = 4365,TVM_EDITLABELA = 4366,TVM_EDITLABELW = 4417,TVM_EDITLABEL = 4366,TVM_GETEDITCONTROL = 4367,TVM_GETVISIBLECOUNT = 4368,TVM_HITTEST = 4369,};
enum MACRO_UDP_NOCHECKSUM {UDP_NOCHECKSUM = 1,};
enum MACRO_URLACTION_JAVA {URLACTION_JAVA_CURR_MAX = 0x1C00,URLACTION_JAVA_MAX = 0x1CFF,URLACTION_INFODELIVERY_MIN = 0x1D00,URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 0x1D00,URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 0x1D01,URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 0x1D02,URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 0x1D03,URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 0x1D04,URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 0x1D05,URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x1D06,URLACTION_INFODELIVERY_CURR_MAX = 0x1D06,URLACTION_INFODELIVERY_MAX = 0x1DFF,URLACTION_CHANNEL_SOFTDIST_MIN = 0x1E00,URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 0x1E05,};
enum MACRO_URLPOLICY_JAVA {URLPOLICY_JAVA_PROHIBIT = 0x0,URLPOLICY_JAVA_HIGH = 0x10000,URLPOLICY_JAVA_MEDIUM = 0x20000,URLPOLICY_JAVA_LOW = 0x30000,URLPOLICY_JAVA_CUSTOM = 0x800000,};
enum MACRO_WLUAINITREJECT {WLUAINITREJECT = 5,};
enum MACRO_WLUALUINACTIVE {WLUALUINACTIVE = 17,};
enum MACRO_WLUAPUINACTIVE {WLUAPUINACTIVE = 14,};
enum MACRO_WLUASIDINVALID {WLUASIDINVALID = 20,};
enum MACRO_WSAEINPROGRESS {WSAEINPROGRESS = 10036,};
enum MACRO_WSAEMSGPARTIAL {WSAEMSGPARTIAL = 10100,};
enum MACRO_WSAENETUNREACH {WSAENETUNREACH = 10051,};
enum MACRO_WSAENOPROTOOPT {WSAENOPROTOOPT = 10042,};
enum MACRO_WSAEWOULDBLOCK {WSAEWOULDBLOCK = 10035,};
enum MACRO_WSASYSNOTREADY {WSASYSNOTREADY = 10091,};
enum MACRO_WSPDESCRIPTION {WSPDESCRIPTION_LEN = 255,};
enum MACRO_WS_TILEDWINDOW {WS_TILEDWINDOW = 13565952,};
enum MACRO__SW_UNEMULATED {_SW_UNEMULATED = 0x40,_SW_SQRTNEG = 0x80,_SW_STACKOVERFLOW = 0x200,_SW_STACKUNDERFLOW = 0x400,};
enum MACRO_attAttachTitle {attAttachTitle = 0x18010,};
enum MACRO_attOemCodepage {attOemCodepage = 0x69007,};
enum MACRO_attTnefVersion {attTnefVersion = 0x89006,};
enum MACRO_cbRcrgbfAlcMax {cbRcrgbfAlcMax = 32,};
enum MACRO_cchMaxLockName {cchMaxLockName = 17,};
enum MACRO_chOpMapDisable {chOpMapDisable = 50,};
enum MACRO_ckidAVIMAINHDR {ckidAVIMAINHDR = 1751742049,};
enum MACRO_ckidAVIPADDING {ckidAVIPADDING = 1263424842,};
enum MACRO_ckidSTREAMLIST {ckidSTREAMLIST = 1819440243,};
enum MACRO_ckidSTREAMNAME {ckidSTREAMNAME = 1852994675,};
enum MACRO_dispidIdentify {dispidIdentify = 3003,};
enum MACRO_dispidIsTVMode {dispidIsTVMode = 4002,};
enum MACRO_dispidTearDown {dispidTearDown = 3003,};
enum MACRO_dispidViewerID {dispidViewerID = 4008,};
enum MACRO_dispidWantKeys {dispidWantKeys = 4009,};
enum MACRO_fdexPropCanGet {fdexPropCanGet = 0x1,fdexPropCannotGet = 0x2,fdexPropCanPut = 0x4,fdexPropCannotPut = 0x8,fdexPropCanPutRef = 0x10,fdexPropCannotPutRef = 0x20,fdexPropNoSideEffects = 0x40,fdexPropDynamicType = 0x80,fdexPropCanCall = 0x100,fdexPropCannotCall = 0x200,fdexPropCanConstruct = 0x400,fdexPropCannotConstruct = 0x800,fdexPropCanSourceEvents = 0x1000,fdexPropCannotSourceEvents = 0x2000,};
enum MACRO_frightsReadAny {frightsReadAny = 0x1,frightsCreate = 0x2,frightsEditOwned = 0x8,frightsDeleteOwned = 0x10,frightsEditAny = 0x20,frightsDeleteAny = 0x40,frightsCreateSubfolder = 0x80,frightsOwner = 0x100,frightsContact = 0x200,};
enum MACRO_hrAccessDenied {hrAccessDenied = 0xC8000773,};
enum MACRO_hrCannotRename {hrCannotRename = 0xC800051A,};
enum MACRO_hrColumnTooBig {hrColumnTooBig = 0xC80005E2,};
enum MACRO_hrFLDKeyTooBig {hrFLDKeyTooBig = 0x88000190,};
enum MACRO_hrFileNotFound {hrFileNotFound = 0xC8000713,};
enum MACRO_hrInvalidParam {hrInvalidParam = 0xC7FF0001,};
enum MACRO_hrInvalidSesid {hrInvalidSesid = 0xC8000450,};
enum MACRO_hrKeyDuplicate {hrKeyDuplicate = 0xC8000645,};
enum MACRO_hrLogCorrupted {hrLogCorrupted = 0xC800073C,};
enum MACRO_hrLogWriteFail {hrLogWriteFail = 0xC80001FE,};
enum MACRO_hrOutOfBuffers {hrOutOfBuffers = 0xC80003F6,};
enum MACRO_hrOutOfCursors {hrOutOfCursors = 0xC80003F5,};
enum MACRO_hrOutOfThreads {hrOutOfThreads = 0xC8000067,};
enum MACRO_hrPMRecDeleted {hrPMRecDeleted = 0xC800012E,};
enum MACRO_hrRecordTooBig {hrRecordTooBig = 0xC8000402,};
enum MACRO_hrSeekNotEqual {hrSeekNotEqual = 0x8800040F,};
enum MACRO_hrTooManySorts {hrTooManySorts = 0xC80006A5,};
enum MACRO_hrTransTooDeep {hrTransTooDeep = 0xC800044F,};
enum MACRO_ichOpMapSaveAs {ichOpMapSaveAs = 6,};
enum MACRO_idsDifferentPW {idsDifferentPW = 1004,};
enum MACRO_idsScreenSaver {idsScreenSaver = 1002,};
enum MACRO_oledbIAccessor {oledbIAccessor = 50000,};
enum MACRO_oledbICommand_ {oledbICommand__Cancel = 50012,oledbICommand__Execute = 50013,oledbICommand__GetDBSession = 50014,};
enum MACRO_streamtypeMIDI {streamtypeMIDI = 1935960429,};
enum MACRO_streamtypeTEXT {streamtypeTEXT = 1937012852,};
enum MACRO_trpidGroupNSID {trpidGroupNSID = 0x5,};
typedef struct tagMCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMSW;
typedef struct _434864393F5F5FC8FD08DA4EC836A36F MCI_DGV_DELETE_PARMS;
typedef struct _434864393F5F5FC8FD08DA4EC836A36F MCI_DGV_RECORD_PARMS;
typedef struct _290BC7C79F72D28CCB42E0D04B0B8F8F MCI_DGV_SIGNAL_PARMS;
typedef struct _6AFAE163AB7E9AE51B9FB2136B2CBA4E MCI_DGV_UPDATE_PARMS;
typedef struct tagMCI_GETDEVCAPS_PARMS MCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VCR_ESCAPE_PARMS MCI_VCR_ESCAPE_PARMS;
typedef struct tagMCI_VCR_RECORD_PARMS MCI_VCR_RECORD_PARMS;
typedef struct tagMCI_VCR_SIGNAL_PARMS MCI_VCR_SIGNAL_PARMS;
typedef struct tagMCI_VCR_STATUS_PARMS MCI_VCR_STATUS_PARMS;
typedef struct tagMCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMSW;
typedef struct mc_receive_immediate MC_RECEIVE_IMMEDIATE;
typedef struct mc_send_conversation MC_SEND_CONVERSATION;
typedef struct mc_test_rts_and_post MC_TEST_RTS_AND_POST;
typedef struct _METADATA_HANDLE_INFO METADATA_HANDLE_INFO;
typedef struct mpeglayer3waveformat_tag MPEGLAYER3WAVEFORMAT;
typedef struct ms_act_trans_overlay MS_ACT_TRANS_OVERLAY;
typedef struct _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
typedef struct _NEWMAIL_NOTIFICATION NEWMAIL_NOTIFICATION;
typedef struct tagNMDATETIMEWMKEYDOWNA NMDATETIMEWMKEYDOWNA;
typedef struct tagNMDATETIMEWMKEYDOWNW NMDATETIMEWMKEYDOWNW;
typedef struct _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;
typedef struct _588C2BE90DB58BC312EC5D0109822B62 NTMS_FILESYSTEM_INFO;
typedef struct _NTMS_LMIDINFORMATION NTMS_LMIDINFORMATION;
enum NtmsAllocationPolicy {NTMS_ALLOCATE_FROMSCRATCH = 0x1,};
enum NtmsOperationalState {NTMS_READY = 0x0,NTMS_NEEDS_SERVICE = 0x14,NTMS_NOT_PRESENT = 0x15,};
typedef struct _ACTRL_ACCESS_ENTRYA *PACTRL_ACCESS_ENTRYA;
typedef struct _ACTRL_ACCESS_ENTRYW *PACTRL_ACCESS_ENTRYW;
typedef struct _ACTRL_CONTROL_INFOA *PACTRL_CONTROL_INFOA;
typedef struct _ACTRL_CONTROL_INFOW *PACTRL_CONTROL_INFOW;
typedef struct ads_searchpref_info *PADS_SEARCHPREF_INFO;
typedef struct _AM_COPY_MACROVISION *PAM_COPY_MACROVISION;
typedef struct AM_DVDCOPY_TITLEKEY *PAM_DVDCOPY_TITLEKEY;
typedef struct _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;
typedef struct _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;
typedef struct CLUSPROP_FTSET_INFO *PCLUSPROP_FTSET_INFO;
typedef struct CLUS_PARTITION_INFO *PCLUS_PARTITION_INFO;
typedef struct _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;
typedef struct _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT *PCRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA *PCRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR *PCRYPT_PROVIDER_SGNR;
typedef struct _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;
typedef struct tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;
typedef struct _DIRECTXREGISTERAPPA *PDIRECTXREGISTERAPPA;
typedef struct _DIRECTXREGISTERAPPW *PDIRECTXREGISTERAPPW;
typedef struct tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;
typedef struct tagEMRSELECTCOLORSPACE *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSELECTCOLORSPACE *PEMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;
typedef struct _HTTP_FILTER_AUTHENT *PHTTP_FILTER_AUTHENT;
typedef struct _HTTP_FILTER_CONTEXT *PHTTP_FILTER_CONTEXT;
typedef struct _HTTP_FILTER_URL_MAP *PHTTP_FILTER_URL_MAP;
typedef struct _HTTP_FILTER_VERSION *PHTTP_FILTER_VERSION;
typedef struct _7DEDD44825251A4EAA915BE1158FDB4F *PKSALLOCATOR_FRAMING;
typedef struct _8F30CF6E010BF118E26738C5B9E0B40D *PLLC_ADAPTER_LOG_ETH;
typedef struct _LSA_TRANSLATED_NAME *PLSA_TRANSLATED_NAME;
typedef struct _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;
typedef struct tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
typedef struct _NET_DISPLAY_MACHINE *PNET_DISPLAY_MACHINE;
typedef struct _NTSD_EXTENSION_APIS *PNTSD_EXTENSION_APIS;
typedef void (*PNTSD_OUTPUT_ROUTINE)(char *, ...);
typedef struct _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION *PPROCESS_INFORMATION;
typedef struct _RAS_PORT_STATISTICS *PRAS_PORT_STATISTICS;
typedef struct _REPARSE_DATA_BUFFER *PREPARSE_DATA_BUFFER;
typedef struct _REPL_EDIR_INFO_1000 *PREPL_EDIR_INFO_1000;
typedef struct _REPL_EDIR_INFO_1001 *PREPL_EDIR_INFO_1001;
typedef struct _PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUESW;
typedef struct _ROUTING_TABLE_INDEX *PROUTING_TABLE_INDEX;
typedef struct _RTP_ENCRYPTION_INFO *PRTP_ENCRYPTION_INFO;
typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
typedef struct SIP_ADD_NEWPROVIDER_ *PSIP_ADD_NEWPROVIDER;
typedef struct _SecPkgContext_Sizes *PSecPkgContext_Sizes;
typedef struct _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;
typedef struct _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;
typedef struct _WLX_MPR_NOTIFY_INFO *PWLX_MPR_NOTIFY_INFO;
typedef struct _RAS_PPP_IPXCP_RESULT RAS_PPP_IPXCP_RESULT;
typedef struct _RAS_PPP_NBFCP_RESULT RAS_PPP_NBFCP_RESULT;
typedef struct _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D RPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
typedef void *RPC_SS_THREAD_HANDLE;
typedef struct _RTCP_RECEIVER_REPORT RTCP_RECEIVER_REPORT;
typedef struct _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
typedef struct __MIDL_TriggerPublicRPC_0004 RemoteSystemTimeInfo;
typedef struct _SCH_CRED_PUBLIC_CAPI SCH_CRED_PUBLIC_CAPI;
typedef struct _SCH_CRED_SECRET_CAPI SCH_CRED_SECRET_CAPI;
typedef struct _SEC_NEGOTIATION_INFO SEC_NEGOTIATION_INFO;
typedef struct _SERVICES_TABLE_INDEX SERVICES_TABLE_INDEX;
typedef struct _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
typedef struct _7ED3E3B28A0D58F6B953DC5EB3956646 SMAPIFormPropEnumVal;
typedef struct sna_global_info_sect SNA_GLOBAL_INFO_SECT;
typedef struct _SP_DRVINSTALL_PARAMS SP_DRVINSTALL_PARAMS;
typedef struct _SP_PROPCHANGE_PARAMS SP_PROPCHANGE_PARAMS;
typedef struct _SPropertyRestriction SPropertyRestriction;
enum SUBSCRIPTIONSCHEDULE {SUBSSCHED_AUTO = 0x0,SUBSSCHED_DAILY = 0x1,SUBSSCHED_WEEKLY = 0x2,SUBSSCHED_CUSTOM = 0x3,SUBSSCHED_MANUAL = 0x4,};
typedef struct _SecPkgContext_NamesA SecPkgContext_NamesA;
typedef struct _SecPkgContext_NamesW SecPkgContext_NamesW;
typedef struct truespeechwaveformat_tag TRUESPEECHWAVEFORMAT;
struct TransactionContextEx;
typedef struct _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 VOLUME_BITMAP_BUFFER;
typedef struct _WKSTA_USER_INFO_1101 WKSTA_USER_INFO_1101;
typedef struct _WSAServiceClassInfoA WSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW WSASERVICECLASSINFOW;
enum _AM_DVD_STREAM_FLAGS {AM_DVD_STREAM_VIDEO = 0x1,AM_DVD_STREAM_AUDIO = 0x2,AM_DVD_STREAM_SUBPIC = 0x4,};
struct _AllocatorProperties {int cBuffers;int cbBuffer;int cbAlign;int cbPrefix;};
struct _Alpha_Branch_Format {int BranchDisp : 21;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_EV4_PR_Format {unsigned int Index : 5;unsigned int Ibox : 1;unsigned int Abox : 1;unsigned int PalTemp : 1;unsigned int IGN : 8;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_EV5_PR_Format {unsigned int Index : 16;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_Memory_Format {int MemDisp : 16;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
enum _D3DRMPROJECTIONTYPE {D3DRMPROJECT_PERSPECTIVE = 0x0,D3DRMPROJECT_ORTHOGRAPHIC = 0x1,D3DRMPROJECT_RIGHTHANDPERSPECTIVE = 0x2,D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC = 0x3,};
enum _D3DRMTEXTUREQUALITY {D3DRMTEXTURE_NEAREST = 0x0,D3DRMTEXTURE_LINEAR = 0x1,D3DRMTEXTURE_MIPNEAREST = 0x2,D3DRMTEXTURE_MIPLINEAR = 0x3,D3DRMTEXTURE_LINEARMIPNEAREST = 0x4,D3DRMTEXTURE_LINEARMIPLINEAR = 0x5,};
enum _EDKServiceControl_T {EDK_SC_NONE = 0x0,EDK_SC_PAUSE = 0x1,EDK_SC_CONTINUE = 0x2,EDK_SC_STOP = 0x3,EDK_SC_LAST = 0x4,};
struct _RPC_PROTSEQ_VECTORA {unsigned int Count;unsigned char *Protseq[1];};
struct _RPC_PROTSEQ_VECTORW {unsigned int Count;unsigned short *Protseq[1];};
enum _SECURITY_LOGON_TYPE {Interactive = 0x2,Network = 0x3,Batch = 0x4,Service = 0x5,Proxy = 0x6,Unlock = 0x7,};
struct _SecPkgContext_Sizes {unsigned int cbMaxToken;unsigned int cbMaxSignature;unsigned int cbBlockSize;unsigned int cbSecurityTrailer;};
enum _TrkMendRestrictions {TRK_MEND_DEFAULT = 0x0,TRK_MEND_LAST_ONLY = 0x1,TRK_MEND_DONT_USE_LOG = 0x2,TRK_MEND_DONT_USE_DC = 0x4,TRK_MEND_SEARCH_ALL_VOLUMES = 0x8,};
enum _tagChannelEnumFlags {CHANENUM_CHANNELFOLDER = 0x1,CHANENUM_SOFTUPDATEFOLDER = 0x2,CHANENUM_DESKTOPFOLDER = 0x4,CHANENUM_TITLE = 0x10000,CHANENUM_PATH = 0x20000,CHANENUM_URL = 0x40000,CHANENUM_SUBSCRIBESTATE = 0x80000,};
enum _tagSubcriptionState {SUBSTATE_NOTSUBSCRIBED = 0x0,SUBSTATE_PARTIALSUBSCRIPTION = 0x1,SUBSTATE_FULLSUBSCRIPTION = 0x2,};
struct get_cp_convert_table {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned short source_cp;unsigned short target_cp;unsigned char *conv_tbl_addr;unsigned char char_not_fnd;unsigned char substitute_char;};
struct mc_receive_immediate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char reserv4;unsigned char rts_rcvd;unsigned char reserv5;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char reserv6[5];};
struct mc_send_conversation {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned char reserv3[8];unsigned char rtn_ctl;unsigned char reserv4;unsigned int conv_group_id;unsigned int sense_data;unsigned char plu_alias[8];unsigned char mode_name[8];unsigned char tp_name[64];unsigned char security;unsigned char reserv5[11];unsigned char pwd[10];unsigned char user_id[10];unsigned short pip_dlen;unsigned char *pip_dptr;unsigned char reserv6;unsigned char fqplu_name[17];unsigned char reserv7[8];unsigned short dlen;unsigned char *dptr;};
struct mc_test_rts_and_post {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned int handle;};
struct ms_act_trans_overlay {unsigned int ms_act_trans_entry_len;unsigned char fq_origin_cp_name[17];unsigned char origin_ms_appl_name[8];unsigned char fq_dest_cp_name[17];unsigned char dest_ms_appl_name[8];unsigned char fq_req_loc_cp_name[17];unsigned char req_agent_appl_name[8];unsigned char seq_num_dt[15];};
enum tagAMTunerSubChannel {AMTUNER_SUBCHAN_NO_TUNE = 0xFFFFFFFE,AMTUNER_SUBCHAN_DEFAULT = 0xFFFFFFFF,};
enum tagPictureAttributes {PICTURE_SCALABLE = 0x1,PICTURE_TRANSPARENT = 0x2,};
enum tagSCRIPTTHREADSTATE {SCRIPTTHREADSTATE_NOTINSCRIPT = 0x0,SCRIPTTHREADSTATE_RUNNING = 0x1,};
enum tagVideoProcAmpFlags {VideoProcAmp_Flags_Manual = 0x0,VideoProcAmp_Flags_Auto = 0x1,};
typedef struct _ACTRL_ACCESS_ENTRYA ACTRL_ACCESS_ENTRYA;
typedef struct _ACTRL_ACCESS_ENTRYW ACTRL_ACCESS_ENTRYW;
typedef struct _ACTRL_CONTROL_INFOA ACTRL_CONTROL_INFOA;
typedef struct _ACTRL_CONTROL_INFOW ACTRL_CONTROL_INFOW;
typedef struct ads_searchpref_info ADS_SEARCHPREF_INFO;
typedef signed int AFTP_DATA_TYPE_TYPE;
typedef unsigned int AFTP_DATE_MODE_TYPE;
typedef unsigned int AFTP_FILE_MODE_TYPE;
typedef unsigned int AFTP_FILE_SIZE_TYPE;
typedef unsigned int AFTP_FILE_TIME_TYPE;
typedef unsigned int AFTP_FILE_TYPE_TYPE;
enum AMPlayListItemFlags {AMPLAYLISTITEM_CANSKIP = 0x1,AMPLAYLISTITEM_CANBIND = 0x2,};
typedef struct _AM_COPY_MACROVISION AM_COPY_MACROVISION;
typedef struct __MIDL___MIDL_itf_strmif_0223_0001 AM_DVD_RENDERSTATUS;
typedef struct _3A744348A6C9F73853F568E19FD6B4F7 AM_SimpleRateChange;
typedef struct _avitimedindex_entry AVITIMEDINDEX_ENTRY;
typedef struct _Alpha_Branch_Format Alpha_Branch_Format;
typedef struct _Alpha_EV4_PR_Format Alpha_EV4_PR_Format;
typedef struct _Alpha_EV5_PR_Format Alpha_EV5_PR_Format;
typedef struct _Alpha_Memory_Format Alpha_Memory_Format;
typedef struct _DC1848BC535E57FD034836B06DEEA43E AsnObjectIdentifier;
enum BrowserNavConstants {navOpenInNewWindow = 0x1,navNoHistory = 0x2,navNoReadFromCache = 0x4,navNoWriteToCache = 0x8,navAllowAutosearch = 0x10,navBrowserBar = 0x20,};
typedef struct _CERT_ALT_NAME_ENTRY CERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS CERT_DSS_PARAMETERS;
typedef struct _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM CHANGER_MOVE_MEDIUM;
typedef struct _tagChannelCategoryInfo CHANNELCATEGORYINFO;
typedef struct _tagChannelShortcutInfo CHANNELSHORTCUTINFO;
enum CHANNEL_AGENT_FLAGS {CHANNEL_AGENT_DYNAMIC_SCHEDULE = 0x1,CHANNEL_AGENT_PRECACHE_SOME = 0x2,CHANNEL_AGENT_PRECACHE_ALL = 0x4,CHANNEL_AGENT_PRECACHE_SCRNSAVER = 0x8,};
typedef struct tagCInterfaceProxyVtbl CInterfaceProxyVtbl;
enum CLUSCTL_GROUP_CODES {CLUSCTL_GROUP_UNKNOWN = 0x3000000,CLUSCTL_GROUP_GET_CHARACTERISTICS = 0x3000005,CLUSCTL_GROUP_GET_FLAGS = 0x3000009,CLUSCTL_GROUP_GET_NAME = 0x3000029,CLUSCTL_GROUP_GET_ID = 0x3000039,CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 0x3000051,CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 0x3000055,CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 0x3000059,CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 0x340005E,CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 0x3000061,CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 0x3000079,CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 0x300007D,CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 0x3000081,CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 0x3400086,CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 0x3000089,};
enum CLUSTER_GROUP_STATE {ClusterGroupStateUnknown = 0xFFFFFFFF,ClusterGroupOnline = 0x0,ClusterGroupOffline = 0x1,ClusterGroupFailed = 0x2,ClusterGroupPartialOnline = 0x3,};
enum CLUSTER_QUORUM_TYPE {OperationalQuorum = 0x0,ModifyQuorum = 0x1,};
typedef struct _A820875CF544015241589462689E9AE4 CMC_message_summary;
typedef struct _CMINVOKECOMMANDINFO CMINVOKECOMMANDINFO;
typedef struct _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME CRL_DIST_POINT_NAME;
typedef struct _CRYPT_KEY_PROV_INFO CRYPT_KEY_PROV_INFO;
typedef struct _CRYPT_PROVIDER_CERT CRYPT_PROVIDER_CERT;
typedef struct _CRYPT_PROVIDER_DATA CRYPT_PROVIDER_DATA;
typedef struct _CRYPT_PROVIDER_SGNR CRYPT_PROVIDER_SGNR;
typedef struct tagCStdPSFactoryBuffer CStdPSFactoryBuffer;
typedef struct _CTL_FIND_USAGE_PARA CTL_FIND_USAGE_PARA;
struct ClusResDependencies {struct ClusResDependenciesVtbl *lpVtbl;};
struct ConferenceDirectory;
typedef struct _D3DFINDDEVICERESULT D3DFINDDEVICERESULT;
typedef struct _D3DFINDDEVICESEARCH D3DFINDDEVICESEARCH;
enum DBACCESSORFLAGSENUM {DBACCESSOR_INVALID = 0x0,DBACCESSOR_PASSBYREF = 0x1,DBACCESSOR_ROWDATA = 0x2,DBACCESSOR_PARAMETERDATA = 0x4,DBACCESSOR_OPTIMIZED = 0x8,};
enum DBCOLUMNFLAGS15ENUM {DBCOLUMNFLAGS_ISCHAPTER = 0x2000,};
enum DBCOLUMNFLAGSENUM20 {DBCOLUMNFLAGS_SCALEISNEGATIVE = 0x4000,DBCOLUMNFLAGS_KEYCOLUMN = 0x8000,};
enum DBPENDINGSTATUSENUM {DBPENDINGSTATUS_NEW = 0x1,DBPENDINGSTATUS_CHANGED = 0x2,DBPENDINGSTATUS_DELETED = 0x4,DBPENDINGSTATUS_UNCHANGED = 0x8,DBPENDINGSTATUS_INVALIDROW = 0x10,};
enum DBPOSITIONFLAGSENUM {DBPOSITION_OK = 0x0,DBPOSITION_NOROW = 0x1,DBPOSITION_BOF = 0x2,DBPOSITION_EOF = 0x3,};
enum DBROWCHANGEKINDENUM {DBROWCHANGEKIND_INSERT = 0x0,DBROWCHANGEKIND_DELETE = 0x1,DBROWCHANGEKIND_UPDATE = 0x2,DBROWCHANGEKIND_COUNT = 0x3,};
typedef struct tagDDEML_MSG_HOOK_DATA DDEML_MSG_HOOK_DATA;
typedef struct digiadpcmmwaveformat_tag DIGIADPCMWAVEFORMAT;
typedef struct _DIRECTXREGISTERAPPA DIRECTXREGISTERAPPA;
typedef struct _DIRECTXREGISTERAPPW DIRECTXREGISTERAPPW;
typedef struct _DPLDATA_PLAYERSCORE DPLDATA_PLAYERSCORE;
typedef struct _5960E7280C1CD3895029C6009DE30C9A DPMSG_SECUREMESSAGE;
struct DShellWindowsEvents {struct DShellWindowsEventsVtbl *lpVtbl;};
struct DispIHTMLDivElement {struct DispIHTMLDivElementVtbl *lpVtbl;};
struct DispIHTMLImgElement {struct DispIHTMLImgElementVtbl *lpVtbl;};
struct DispIHTMLInputImage {struct DispIHTMLInputImageVtbl *lpVtbl;};
struct DispIHTMLMapElement {struct DispIHTMLMapElementVtbl *lpVtbl;};
typedef struct tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
typedef struct tagEMRSELECTCOLORSPACE EMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD EMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
typedef struct tagEMRSELECTCOLORSPACE EMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
typedef struct _ENCRYPTED_DATA_INFO ENCRYPTED_DATA_INFO;
typedef struct _BE2AAA237DCCFCC05A1ABA31135D92CC EXCHEXTCHOOSEFOLDER;
typedef  struct HTAPIDIALOGINSTANCE__ *HTAPIDIALOGINSTANCE;
struct HTMLBaseFontElement;
struct HTMLFieldSetElement;
struct HTMLTextAreaElement;
typedef struct _HTTP_FILTER_AUTHENT HTTP_FILTER_AUTHENT;
typedef struct _HTTP_FILTER_CONTEXT HTTP_FILTER_CONTEXT;
typedef struct _HTTP_FILTER_URL_MAP HTTP_FILTER_URL_MAP;
typedef struct _HTTP_FILTER_VERSION HTTP_FILTER_VERSION;
struct IAMDevMemoryControl {struct IAMDevMemoryControlVtbl *lpVtbl;};
struct IAMMultiMediaStream {struct IAMMultiMediaStreamVtbl *lpVtbl;};
struct IAMVideoCompression {struct IAMVideoCompressionVtbl *lpVtbl;};
struct IASQLOLEAlertSystem {struct IASQLOLEAlertSystemVtbl *lpVtbl;};
struct IASQLOLEApplication {struct IASQLOLEApplicationVtbl *lpVtbl;};
struct IASQLOLEConfigValue {struct IASQLOLEConfigValueVtbl *lpVtbl;};
struct IASQLOLEPublication {struct IASQLOLEPublicationVtbl *lpVtbl;};
struct IASQLOLERemoteLogin {struct IASQLOLERemoteLoginVtbl *lpVtbl;};
struct IASQLOLEServerGroup {struct IASQLOLEServerGroupVtbl *lpVtbl;};
struct IAgentCommandWindow {struct IAgentCommandWindowVtbl *lpVtbl;};
struct IAgentCtlCharacters {struct IAgentCtlCharactersVtbl *lpVtbl;};
struct IAgentPropertySheet {struct IAgentPropertySheetVtbl *lpVtbl;};
struct IBindStatusCallback {struct IBindStatusCallbackVtbl *lpVtbl;};
struct IBriefcaseInitiator {struct IBriefcaseInitiatorVtbl *lpVtbl;};
struct IClusterApplication {struct IClusterApplicationVtbl *lpVtbl;};
struct IConfigInterleaving {struct IConfigInterleavingVtbl *lpVtbl;};
struct IDBPromptInitialize {struct IDBPromptInitializeVtbl *lpVtbl;};
struct IDirect3DRMMaterial {struct IDirect3DRMMaterialVtbl *lpVtbl;};
struct IDirect3DRMTexture2 {struct IDirect3DRMTexture2Vtbl *lpVtbl;};
struct IDirect3DRMViewport {struct IDirect3DRMViewportVtbl *lpVtbl;};
struct IDirectDrawSurface2 {struct IDirectDrawSurface2Vtbl *lpVtbl;};
struct IDirectDrawSurface3 {struct IDirectDrawSurface3Vtbl *lpVtbl;};
struct IDirectInputDeviceA {struct IDirectInputDeviceAVtbl *lpVtbl;};
struct IDirectInputDeviceW {struct IDirectInputDeviceWVtbl *lpVtbl;};
struct IDirectSoundCapture {struct IDirectSoundCaptureVtbl *lpVtbl;};
struct IDockingWindowFrame {struct IDockingWindowFrameVtbl *lpVtbl;};
struct IEnumMediaTerminals {struct IEnumMediaTerminalsVtbl *lpVtbl;};
struct IEnumRemoteIntValue {struct IEnumRemoteIntValueVtbl *lpVtbl;};
struct IEnumSTATPROPSETSTG {struct IEnumSTATPROPSETSTGVtbl *lpVtbl;};
struct IExchangeFolderACLs {struct IExchangeFolderACLsVtbl *lpVtbl;};
struct IExchangeRuleAction {struct IExchangeRuleActionVtbl *lpVtbl;};
struct IExternalConnection {struct IExternalConnectionVtbl *lpVtbl;};
struct IGetClusterDataInfo {struct IGetClusterDataInfoVtbl *lpVtbl;};
struct IGetClusterNodeInfo {struct IGetClusterNodeInfoVtbl *lpVtbl;};
struct IH26XEncoderControl {struct IH26XEncoderControlVtbl *lpVtbl;};
struct IHTMLCommentElement {struct IHTMLCommentElementVtbl *lpVtbl;};
struct IHTMLControlElement {struct IHTMLControlElementVtbl *lpVtbl;};
struct IHTMLIsIndexElement {struct IHTMLIsIndexElementVtbl *lpVtbl;};
struct IHTMLMarqueeElement {struct IHTMLMarqueeElementVtbl *lpVtbl;};
struct IHTMLStyleSheetRule {struct IHTMLStyleSheetRuleVtbl *lpVtbl;};
struct IHTMLUnknownElement {struct IHTMLUnknownElementVtbl *lpVtbl;};
struct IHlinkBrowseContext {struct IHlinkBrowseContextVtbl *lpVtbl;};
struct IInstallAudioCodecs {struct IInstallAudioCodecsVtbl *lpVtbl;};
struct IInstallVideoCodecs {struct IInstallVideoCodecsVtbl *lpVtbl;};
typedef struct _IMAGELISTDRAWPARAMS IMAGELISTDRAWPARAMS;
struct IMAPIFormAdviseSink {struct IMAPIFormAdviseSinkVtbl *lpVtbl;};
struct IMAPIViewAdviseSink {struct IMAPIViewAdviseSinkVtbl *lpVtbl;};
struct IMSAdminReplication {struct IMSAdminReplicationVtbl *lpVtbl;};
typedef struct _C3D536761911E1B34BFF5DAB2CC3A2E9 INTERNET_PROXY_INFO;
struct IOleInPlaceUIWindow {struct IOleInPlaceUIWindowVtbl *lpVtbl;};
struct IPersistPropertyBag {struct IPersistPropertyBagVtbl *lpVtbl;};
struct IProcessDestroyHack {struct IProcessDestroyHackVtbl *lpVtbl;};
struct IPropertyNotifySink {struct IPropertyNotifySinkVtbl *lpVtbl;};
struct IPropertySetStorage {struct IPropertySetStorageVtbl *lpVtbl;};
struct IReconcilableObject {struct IReconcilableObjectVtbl *lpVtbl;};
struct IReconcileInitiator {struct IReconcileInitiatorVtbl *lpVtbl;};
struct IRemoteDebugManager {struct IRemoteDebugManagerVtbl *lpVtbl;};
struct IRemoteDoubleObject {struct IRemoteDoubleObjectVtbl *lpVtbl;};
struct IRunningObjectTable {struct IRunningObjectTableVtbl *lpVtbl;};
struct ITransactionContext {struct ITransactionContextVtbl *lpVtbl;};
struct ITransactionOptions {struct ITransactionOptionsVtbl *lpVtbl;};
struct IWindowForBindingUI {struct IWindowForBindingUIVtbl *lpVtbl;};
enum KAGREQDIAGFLAGSENUM {KAGREQDIAGFLAGS_HEADER = 0x1,KAGREQDIAGFLAGS_RECORD = 0x2,};
typedef struct _7DEDD44825251A4EAA915BE1158FDB4F KSALLOCATOR_FRAMING;
typedef struct lineagentgroupentry_tag LINEAGENTGROUPENTRY;
typedef struct linetranslateoutput_tag LINETRANSLATEOUTPUT;
typedef struct _8F30CF6E010BF118E26738C5B9E0B40D LLC_ADAPTER_LOG_ETH;
typedef struct _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
typedef struct tACMDRIVERDETAILSA *LPACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW *LPACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA *LPACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW *LPACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA *LPACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW *LPACMFORMATDETAILSW;
typedef struct _AD_GENERAL_PARAMS *LPAD_GENERAL_PARAMS;
typedef struct IASQLOLEBackupSink *LPASQLOLEBACKUPSINK;
typedef struct IASQLOLEDRIDefault *LPASQLOLEDRIDEFAULT;
typedef struct IASQLOLEObjectList *LPASQLOLEOBJECTLIST;
typedef struct IASQLOLEPermission *LPASQLOLEPERMISSION;
typedef struct IASQLOLEServerSink *LPASQLOLESERVERSINK;
typedef struct tagBDN_HARDWARE_ADDR *LPBDN_HARDWARE_ADDR;
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
typedef struct tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;
typedef struct tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
typedef struct _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;
typedef struct _CONNECTION_INFO_0 *LPCONNECTION_INFO_0;
typedef struct _CONNECTION_INFO_1 *LPCONNECTION_INFO_1;
typedef struct _D3DMATRIXMULTIPLY *LPD3DMATRIXMULTIPLY;
typedef struct _D3DRMLOADRESOURCE *LPD3DRMLOADRESOURCE;
typedef struct _D3DRMPALETTEENTRY *LPD3DRMPALETTEENTRY;
typedef struct _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;
typedef struct _DDVIDEOPORTSTATUS *LPDDVIDEOPORTSTATUS;
typedef struct DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;
typedef struct DIDEVICEINSTANCEW *LPDIDEVICEINSTANCEW;
typedef struct DIPROPGUIDANDPATH *LPDIPROPGUIDANDPATH;
typedef struct IDirect3DMaterial2 *LPDIRECT3DMATERIAL2;
typedef struct IDirect3DRMDevice2 *LPDIRECT3DRMDEVICE2;
typedef struct IDirect3DRMTexture *LPDIRECT3DRMTEXTURE;
typedef struct IDirect3DViewport2 *LPDIRECT3DVIEWPORT2;
typedef struct IDirectDrawClipper *LPDIRECTDRAWCLIPPER;
typedef struct IDirectDrawPalette *LPDIRECTDRAWPALETTE;
typedef struct IDirectDrawSurface *LPDIRECTDRAWSURFACE;
typedef struct IDirectInputDeviceA *LPDIRECTINPUTDEVICE;
typedef struct IDirectInputEffect *LPDIRECTINPUTEFFECT;
typedef struct IDirectPlayLobby2 *LPDIRECTPLAYLOBBY2A;
typedef struct IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;
typedef struct IDirectSoundNotify *LPDIRECTSOUNDNOTIFY;
typedef struct _DSBPOSITIONNOTIFY *LPDSBPOSITIONNOTIFY;
typedef IEnumRemoteProcess *LPENUMREMOTEPROCESS;
typedef struct _ERRLOG_OTHER_INFO *LPERRLOG_OTHER_INFO;
typedef struct IExchangeFavorites *LPEXCHANGEFAVORITES;
typedef IExchExtUserEvents *LPEXCHEXTUSEREVENTS;
typedef IExtensionServices *LPEXTENSIONSERVICES;
typedef struct _FMS_GETDRIVEINFOA *LPFMS_GETDRIVEINFOA;
typedef struct _FMS_GETDRIVEINFOW *LPFMS_GETDRIVEINFOW;
typedef struct _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;
typedef struct _7644B9603AEA08EBF4DF4A983BB6B237 *LPGOPHER_FIND_DATAA;
typedef struct _17CA7839736B8F73357CD165DBE52F18 *LPGOPHER_FIND_DATAW;
typedef struct _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;
typedef struct _D692CA7460863103343173F071E8F66B *LPHTTP_VERSION_INFO;
typedef IInternetBindInfo *LPIINTERNETBINDINFO;
typedef IInternetPriority *LPIINTERNETPRIORITY;
typedef IInternetProtocol *LPIINTERNETPROTOCOL;
typedef struct _INTERNET_BUFFERSA *LPINTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW *LPINTERNET_BUFFERSW;
typedef struct lineaddressstatus_tag *LPLINEADDRESSSTATUS;
typedef struct linelocationentry_tag *LPLINELOCATIONENTRY;
typedef struct lineproviderentry_tag *LPLINEPROVIDERENTRY;
typedef struct linereqmediacallW_tag *LPLINEREQMEDIACALLW;
typedef struct linetranslatecaps_tag *LPLINETRANSLATECAPS;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef struct _LOCALGROUP_INFO_0 *LPLOCALGROUP_INFO_0;
typedef struct _LOCALGROUP_INFO_1 *LPLOCALGROUP_INFO_1;
typedef struct IDirect3DRMArray **LPLPDIRECT3DRMARRAY;
typedef struct IDirect3DRMFrame **LPLPDIRECT3DRMFRAME;
typedef struct IDirect3DRMLight **LPLPDIRECT3DRMLIGHT;
typedef struct IMAPIFormContainer *LPMAPIFORMCONTAINER;
typedef struct _29CD99F8CA239F4FFB76FBF32B00C866 *LPMAPIFORMPROPARRAY;
typedef struct tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
typedef struct tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;
typedef struct tagNMDATETIMEFORMATA *LPNMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW *LPNMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA *LPNMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW *LPNMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE *LPNMLVODSTATECHANGE;
typedef struct tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;
typedef IOleParentUndoUnit *LPOLEPARENTUNDOUNIT;
typedef struct tagOLEUIOBJECTPROPSA *LPOLEUIOBJECTPROPSA;
typedef struct tagOLEUIOBJECTPROPSW *LPOLEUIOBJECTPROPSW;
typedef IPersistStreamInit *LPPERSISTSTREAMINIT;
typedef struct _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;
typedef IProvideClassInfo2 *LPPROVIDECLASSINFO2;
typedef struct _QOS_TRAFFIC_CLASS *LPQOS_TRAFFIC_CLASS;
typedef struct _RASTERIZER_STATUS *LPRASTERIZER_STATUS;
typedef IRemoteArrayObject *LPREMOTEARRAYOBJECT;
typedef IRemoteClassObject *LPREMOTECLASSOBJECT;
typedef IRemoteFloatObject *LPREMOTEFLOATOBJECT;
typedef IRemoteMethodField *LPREMOTEMETHODFIELD;
typedef IRemoteShortObject *LPREMOTESHORTOBJECT;
typedef IRemoteStackFrame *LPREMOTESTACKOBJECT;
typedef IRemoteThreadGroup *LPREMOTETHREADGROUP;
typedef struct _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;
typedef struct _RSVP_RESERVE_INFO *LPRSVP_RESERVE_INFO;
typedef struct _SERVICE_ADDRESSES *LPSERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO *LPSERVICE_TYPE_INFO;
typedef struct _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;
typedef IShellPropSheetExt *LPSHELLPROPSHEETEXT;
typedef struct SIP_DISPATCH_INFO_ *LPSIP_DISPATCH_INFO;
typedef struct _SPropProblemArray *LPSPropProblemArray;
typedef struct _STnefProblemArray *LPSTnefProblemArray;
typedef struct tagUNDETERMINESTRUCT *LPUNDETERMINESTRUCT;
typedef struct _WKSTA_USER_INFO_0 *LPWKSTA_USER_INFO_0;
typedef struct _WKSTA_USER_INFO_1 *LPWKSTA_USER_INFO_1;
typedef struct _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;
typedef struct _LSA_TRANSLATED_NAME LSA_TRANSLATED_NAME;
typedef struct _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
enum MACRO_AB_SELECTONLY {AB_SELECTONLY = 0x10,AB_RESOLVE = 0x20,};
enum MACRO_ACCESS_MAX_MS {ACCESS_MAX_MS_OBJECT_ACE_TYPE = 0x8,ACCESS_MAX_MS_V4_ACE_TYPE = 0x8,ACCESS_MAX_MS_ACE_TYPE = 0x8,};
enum MACRO_ACCESS_MODIFY {ACCESS_MODIFY = 0x4,};
enum MACRO_ACCESS_OBJECT {ACCESS_OBJECT_GUID = 0,ACCESS_PROPERTY_SET_GUID = 1,ACCESS_PROPERTY_GUID = 2,ACCESS_MAX_LEVEL = 4,};
enum MACRO_AGENTCTLERROR {AGENTCTLERROR_NOEVENTSAVAILABLE = -2147212031,AGENTCTLERROR_SERVERINIT = -2147212030,AGENTCTLERROR_LANGUAGE = -2147212029,};
enum MACRO_AGENTEXTERROR {AGENTEXTERROR_EXTNOTFOUND = -2147211775,AGENTEXTERROR_INVALIDCLIENT = -2147211774,};
enum MACRO_AMCOPYPROTECT {AMCOPYPROTECT_RestrictDuplication = 0x1,};
enum MACRO_ASP_MD_SERVER {ASP_MD_SERVER_BASE = 7000,};
enum MACRO_AVISTREAMINFO {AVISTREAMINFO_DISABLED = 0x1,AVISTREAMINFO_FORMATCHANGES = 0x10000,};
enum MACRO_AVISTREAMREAD {AVISTREAMREAD_CONVENIENT = -1,};
enum MACRO_BEXPORT_WRITE {BEXPORT_WRITE_ERROR = 0xC000012C,BEXPORT_UNKNOWN_CLASS = 0xC000012D,BEXPORT_NOSEARCHINFO_WARN = 0x8000012E,};
enum MACRO_BS_PUSHBUTTON {BS_PUSHBUTTON = 0x0,BS_DEFPUSHBUTTON = 0x1,BS_CHECKBOX = 0x2,BS_AUTOCHECKBOX = 0x3,BS_RADIOBUTTON = 0x4,BS_3STATE = 0x5,BS_AUTO3STATE = 0x6,BS_GROUPBOX = 0x7,BS_USERBUTTON = 0x8,BS_AUTORADIOBUTTON = 0x9,BS_OWNERDRAW = 0xB,BS_LEFTTEXT = 0x20,BS_TEXT = 0x0,BS_ICON = 0x40,BS_BITMAP = 0x80,BS_LEFT = 0x100,BS_RIGHT = 0x200,BS_CENTER = 0x300,BS_TOP = 0x400,BS_BOTTOM = 0x800,BS_VCENTER = 0xC00,BS_PUSHLIKE = 0x1000,BS_MULTILINE = 0x2000,BS_NOTIFY = 0x4000,BS_FLAT = 0x8000,BS_RIGHTBUTTON = 0x20,};
enum MACRO_BWARN_RENAMED {BWARN_RENAMED_OUTPUT_FILE = 0x40000094,BWARN_RENAMED_IMPORT_FILE = 0x80000095,BWARN_DEL_ATTR = 0x80000096,BWARN_THREAD_FAILED = 0x80000097,BWARN_ATTRIBUTE_DUPLICATE = 0x80000098,BWARN_ATTRIBUTE_READONLY = 0x80000099,BWARN_ATTRIBUTE_NOT_IMPORTABLE = 0xC000009A,BWARN_NO_RAW_MODE_TEMPLATE = 0x8000009B,BWARN_OVERSIZE_ATT_FILE = 0x8000009C,};
enum MACRO_CAL_GREGORIAN {CAL_GREGORIAN = 1,CAL_GREGORIAN_US = 2,CAL_JAPAN = 3,CAL_TAIWAN = 4,CAL_KOREA = 5,CAL_HIJRI = 6,CAL_THAI = 7,CAL_HEBREW = 8,CAL_GREGORIAN_ME_FRENCH = 9,CAL_GREGORIAN_ARABIC = 10,CAL_GREGORIAN_XLIT_ENGLISH = 11,CAL_GREGORIAN_XLIT_FRENCH = 12,};
enum MACRO_CDALREADYUSED {CDALREADYUSED = 7100,};
enum MACRO_CDCONFIRMINFO {CDCONFIRMINFO = 7300,};
enum MACRO_CERT_SCHANNEL {CERT_SCHANNEL_IIS_PRIVATE_KEY_PROP_ID = 32768,CERT_SCHANNEL_IIS_PASSWORD_PROP_ID = 32769,CERT_SCHANNEL_SGC_CERTIFICATE_PROP_ID = 32770,};
enum MACRO_CFE_SMALLCAPS {CFE_SMALLCAPS = 64,CFE_ALLCAPS = 128,CFE_HIDDEN = 256,CFE_OUTLINE = 512,CFE_SHADOW = 1024,CFE_EMBOSS = 2048,CFE_IMPRINT = 4096,CFE_DISABLED = 8192,CFE_REVISED = 16384,CFE_AUTOBACKCOLOR = 67108864,};
enum MACRO_CFE_SUBSCRIPT {CFE_SUBSCRIPT = 0x10000,CFE_SUPERSCRIPT = 0x20000,};
enum MACRO_CFM_SUBSCRIPT {CFM_SUBSCRIPT = 196608,CFM_SUPERSCRIPT = 196608,CFM_EFFECTS2 = 1141080063,CFM_ALL2 = -16777217,};
enum MACRO_CLCTL_CLUSTER {CLCTL_CLUSTER_BASE = 0,CLCTL_USER_BASE = 2097152,};
enum MACRO_CM_INITIALIZE {CM_INITIALIZE_STATE = 2,CM_SEND_STATE = 3,CM_RECEIVE_STATE = 4,CM_SEND_PENDING_STATE = 5,CM_CONFIRM_STATE = 6,CM_CONFIRM_SEND_STATE = 7,CM_CONFIRM_DEALLOCATE_STATE = 8,CM_DEFER_RECEIVE_STATE = 9,CM_DEFER_DEALLOCATE_STATE = 10,CM_SYNC_POINT_STATE = 11,CM_SYNC_POINT_SEND_STATE = 12,CM_SYNC_POINT_DEALLOCATE_STATE = 13,CM_INITIALIZE_INCOMING_STATE = 14,CM_BASIC_CONVERSATION = 0,CM_MAPPED_CONVERSATION = 1,CM_NO_DATA_RECEIVED = 0,CM_DATA_RECEIVED = 1,CM_COMPLETE_DATA_RECEIVED = 2,CM_INCOMPLETE_DATA_RECEIVED = 3,CM_DEALLOCATE_SYNC_LEVEL = 0,CM_DEALLOCATE_FLUSH = 1,CM_DEALLOCATE_CONFIRM = 2,CM_DEALLOCATE_ABEND = 3,CM_RECEIVE_ERROR = 0,CM_SEND_ERROR = 1,CM_FILL_LL = 0,CM_FILL_BUFFER = 1,CM_BLOCKING = 0,CM_NON_BLOCKING = 1,CM_PREP_TO_RECEIVE_SYNC_LEVEL = 0,CM_PREP_TO_RECEIVE_FLUSH = 1,CM_PREP_TO_RECEIVE_CONFIRM = 2,CM_RECEIVE_AND_WAIT = 0,CM_RECEIVE_IMMEDIATE = 1,CM_REQ_TO_SEND_NOT_RECEIVED = 0,CM_REQ_TO_SEND_RECEIVED = 1,CM_OK = 0,CM_ALLOCATE_FAILURE_NO_RETRY = 1,CM_ALLOCATE_FAILURE_RETRY = 2,CM_CONVERSATION_TYPE_MISMATCH = 3,CM_PIP_NOT_SPECIFIED_CORRECTLY = 5,CM_SECURITY_NOT_VALID = 6,CM_SYNC_LVL_NOT_SUPPORTED_LU = 7,CM_SYNC_LVL_NOT_SUPPORTED_PGM = 8,CM_TPN_NOT_RECOGNIZED = 9,CM_SYNC_LEVEL_NOT_SUPPORTED_LU = 7,CM_SYNC_LEVEL_NOT_SUPPORTED_PGM = 8,CM_TPN_NOT_RECOGNISED = 9,CM_TP_NOT_AVAILABLE_NO_RETRY = 10,CM_TP_NOT_AVAILABLE_RETRY = 11,CM_DEALLOCATED_ABEND = 17,CM_DEALLOCATED_NORMAL = 18,CM_PARAMETER_ERROR = 19,CM_PRODUCT_SPECIFIC_ERROR = 20,CM_PROGRAM_ERROR_NO_TRUNC = 21,CM_PROGRAM_ERROR_PURGING = 22,CM_PROGRAM_ERROR_TRUNC = 23,CM_PROGRAM_PARAMETER_CHECK = 24,CM_PROGRAM_STATE_CHECK = 25,CM_RESOURCE_FAILURE_NO_RETRY = 26,CM_RESOURCE_FAILURE_RETRY = 27,CM_UNSUCCESSFUL = 28,CM_DEALLOCATED_ABEND_SVC = 30,CM_DEALLOCATED_ABEND_TIMER = 31,CM_SVC_ERROR_NO_TRUNC = 32,CM_SVC_ERROR_PURGING = 33,CM_SVC_ERROR_TRUNC = 34,CM_OPERATION_INCOMPLETE = 35,CM_SYSTEM_EVENT = 36,CM_OPERATION_NOT_ACCEPTED = 37,CM_TAKE_BACKOUT = 100,CM_DEALLOCATED_ABEND_BO = 130,CM_DEALLOCATED_ABEND_SVC_BO = 131,CM_DEALLOCATED_ABEND_TIMER_BO = 132,CM_RESOURCE_FAIL_NO_RETRY_BO = 133,CM_RESOURCE_FAILURE_RETRY_BO = 134,CM_DEALLOCATED_NORMAL_BO = 135,CM_WHEN_SESSION_ALLOCATED = 0,CM_IMMEDIATE = 1,CM_BUFFER_DATA = 0,CM_SEND_AND_FLUSH = 1,CM_SEND_AND_CONFIRM = 2,CM_SEND_AND_PREP_TO_RECEIVE = 3,CM_SEND_AND_DEALLOCATE = 4,CM_NO_STATUS_RECEIVED = 0,CM_SEND_RECEIVED = 1,CM_CONFIRM_RECEIVED = 2,CM_CONFIRM_SEND_RECEIVED = 3,CM_CONFIRM_DEALLOC_RECEIVED = 4,CM_TAKE_COMMIT = 5,CM_TAKE_COMMIT_SEND = 6,CM_TAKE_COMMIT_DEALLOCATE = 7,CM_NONE = 0,CM_CONFIRM = 1,CM_CID_SIZE = 8,CM_CTX_SIZE = 32,CM_LD_SIZE = 512,CM_MN_SIZE = 8,CM_PLN_SIZE = 17,CM_PW_SIZE = 10,CM_SDN_SIZE = 8,CM_TPN_SIZE = 64,CM_UID_SIZE = 10,};
enum MACRO_COMMANDBUTTON {COMMANDBUTTON_UP = 2,COMMANDBUTTON_MOUSEDOWN = 3,COMMANDBUTTON_DISABLED = 4,};
enum MACRO_COMPLEXREGION {COMPLEXREGION = 3,};
enum MACRO_CRESTRICTIONS {CRESTRICTIONS_DBSCHEMA_ASSERTIONS = 3,CRESTRICTIONS_DBSCHEMA_CATALOGS = 1,CRESTRICTIONS_DBSCHEMA_CHARACTER_SETS = 3,CRESTRICTIONS_DBSCHEMA_COLLATIONS = 3,CRESTRICTIONS_DBSCHEMA_COLUMNS = 4,CRESTRICTIONS_DBSCHEMA_CHECK_CONSTRAINTS = 3,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_COLUMN_USAGE = 4,CRESTRICTIONS_DBSCHEMA_CONSTRAINT_TABLE_USAGE = 3,CRESTRICTIONS_DBSCHEMA_KEY_COLUMN_USAGE = 7,CRESTRICTIONS_DBSCHEMA_REFERENTIAL_CONSTRAINTS = 3,CRESTRICTIONS_DBSCHEMA_TABLE_CONSTRAINTS = 7,CRESTRICTIONS_DBSCHEMA_COLUMN_DOMAIN_USAGE = 4,CRESTRICTIONS_DBSCHEMA_INDEXES = 5,CRESTRICTIONS_DBSCHEMA_OBJECT_ACTIONS = 1,CRESTRICTIONS_DBSCHEMA_OBJECTS = 1,CRESTRICTIONS_DBSCHEMA_COLUMN_PRIVILEGES = 6,CRESTRICTIONS_DBSCHEMA_TABLE_PRIVILEGES = 5,CRESTRICTIONS_DBSCHEMA_USAGE_PRIVILEGES = 6,CRESTRICTIONS_DBSCHEMA_PROCEDURES = 4,CRESTRICTIONS_DBSCHEMA_SCHEMATA = 3,CRESTRICTIONS_DBSCHEMA_SQL_LANGUAGES = 0,CRESTRICTIONS_DBSCHEMA_STATISTICS = 3,CRESTRICTIONS_DBSCHEMA_TABLES = 4,CRESTRICTIONS_DBSCHEMA_TRANSLATIONS = 3,CRESTRICTIONS_DBSCHEMA_PROVIDER_TYPES = 2,CRESTRICTIONS_DBSCHEMA_VIEWS = 3,CRESTRICTIONS_DBSCHEMA_VIEW_COLUMN_USAGE = 3,CRESTRICTIONS_DBSCHEMA_VIEW_TABLE_USAGE = 3,CRESTRICTIONS_DBSCHEMA_PROCEDURE_PARAMETERS = 4,CRESTRICTIONS_DBSCHEMA_FOREIGN_KEYS = 6,CRESTRICTIONS_DBSCHEMA_PRIMARY_KEYS = 3,CRESTRICTIONS_DBSCHEMA_PROCEDURE_COLUMNS = 4,CRESTRICTIONS_DBSCHEMA_TABLES_INFO = 4,CRESTRICTIONS_MDSCHEMA_CUBES = 3,CRESTRICTIONS_MDSCHEMA_DIMENSIONS = 5,CRESTRICTIONS_MDSCHEMA_HIERARCHIES = 6,CRESTRICTIONS_MDSCHEMA_LEVELS = 7,CRESTRICTIONS_MDSCHEMA_MEASURES = 5,CRESTRICTIONS_MDSCHEMA_PROPERTIES = 9,CRESTRICTIONS_MDSCHEMA_MEMBERS = 12,};
enum MACRO_CRYPT_INSTALL {CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1,CRYPT_REGISTER_FIRST_INDEX = 0,CRYPT_REGISTER_LAST_INDEX = -1,CRYPT_MATCH_ANY_ENCODING_TYPE = -1,CRYPT_HASH_ALG_OID_GROUP_ID = 1,CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,CRYPT_SIGN_ALG_OID_GROUP_ID = 4,CRYPT_RDN_ATTR_OID_GROUP_ID = 5,CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,CRYPT_POLICY_OID_GROUP_ID = 8,CRYPT_LAST_OID_GROUP_ID = 8,CRYPT_FIRST_ALG_OID_GROUP_ID = 1,CRYPT_LAST_ALG_OID_GROUP_ID = 4,CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1,CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2,CRYPT_OID_INFO_OID_KEY = 1,CRYPT_OID_INFO_NAME_KEY = 2,CRYPT_OID_INFO_ALGID_KEY = 3,CRYPT_OID_INFO_SIGN_KEY = 4,CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1,};
enum MACRO_CRYPT_MESSAGE {CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 0x1,};
enum MACRO_CS_INSERTCHAR {CS_INSERTCHAR = 0x2000,CS_NOMOVECARET = 0x4000,};
enum MACRO_CYBUTTONBAR72 {CYBUTTONBAR72 = 23,};
enum MACRO_CYBUTTONBAR96 {CYBUTTONBAR96 = 29,};
enum MACRO_D3DCLIPSTATUS {D3DCLIPSTATUS_STATUS = 0x1,D3DCLIPSTATUS_EXTENTS2 = 0x2,D3DCLIPSTATUS_EXTENTS3 = 0x4,};
enum MACRO_D3DPBLENDCAPS {D3DPBLENDCAPS_ZERO = 0x1,D3DPBLENDCAPS_ONE = 0x2,D3DPBLENDCAPS_SRCCOLOR = 0x4,D3DPBLENDCAPS_INVSRCCOLOR = 0x8,D3DPBLENDCAPS_SRCALPHA = 0x10,D3DPBLENDCAPS_INVSRCALPHA = 0x20,D3DPBLENDCAPS_DESTALPHA = 0x40,D3DPBLENDCAPS_INVDESTALPHA = 0x80,D3DPBLENDCAPS_DESTCOLOR = 0x100,D3DPBLENDCAPS_INVDESTCOLOR = 0x200,D3DPBLENDCAPS_SRCALPHASAT = 0x400,D3DPBLENDCAPS_BOTHSRCALPHA = 0x800,D3DPBLENDCAPS_BOTHINVSRCALPHA = 0x1000,};
enum MACRO_D3DPSHADECAPS {D3DPSHADECAPS_COLORFLATMONO = 0x1,D3DPSHADECAPS_COLORFLATRGB = 0x2,D3DPSHADECAPS_COLORGOURAUDMONO = 0x4,D3DPSHADECAPS_COLORGOURAUDRGB = 0x8,D3DPSHADECAPS_COLORPHONGMONO = 0x10,D3DPSHADECAPS_COLORPHONGRGB = 0x20,D3DPSHADECAPS_SPECULARFLATMONO = 0x40,D3DPSHADECAPS_SPECULARFLATRGB = 0x80,D3DPSHADECAPS_SPECULARGOURAUDMONO = 0x100,D3DPSHADECAPS_SPECULARGOURAUDRGB = 0x200,D3DPSHADECAPS_SPECULARPHONGMONO = 0x400,D3DPSHADECAPS_SPECULARPHONGRGB = 0x800,D3DPSHADECAPS_ALPHAFLATBLEND = 0x1000,D3DPSHADECAPS_ALPHAFLATSTIPPLED = 0x2000,D3DPSHADECAPS_ALPHAGOURAUDBLEND = 0x4000,D3DPSHADECAPS_ALPHAGOURAUDSTIPPLED = 0x8000,D3DPSHADECAPS_ALPHAPHONGBLEND = 0x10000,D3DPSHADECAPS_ALPHAPHONGSTIPPLED = 0x20000,D3DPSHADECAPS_FOGFLAT = 0x40000,D3DPSHADECAPS_FOGGOURAUD = 0x80000,D3DPSHADECAPS_FOGPHONG = 0x100000,};
enum MACRO_D3DRMCALLBACK {D3DRMCALLBACK_PREORDER = 0,D3DRMCALLBACK_POSTORDER = 1,};
enum MACRO_DBARITHIGNORE {DBARITHIGNORE = 7,DBNOAUTOFREE = 8,};
enum MACRO_DBCOMPUTEMODE {DBCOMPUTEMODE_COMPUTED = 0x1,DBCOMPUTEMODE_DYNAMIC = 0x2,DBCOMPUTEMODE_NOTCOMPUTED = 0x3,};
enum MACRO_DBQUOTEDIDENT {DBQUOTEDIDENT = 18,};
enum MACRO_DBSETFALLBACK {DBSETFALLBACK = 12,};
enum MACRO_DBWATCHREGION {DBWATCHREGION_NULL = 0,};
enum MACRO_DB_E_NOCOLUMN {DB_E_NOCOLUMN = 0x80040E65,DB_E_COMMANDNOTPERSISTED = 0x80040E67,DB_E_DUPLICATEID = 0x80040E68,DB_E_OBJECTCREATIONLIMITREACHED = 0x80040E69,DB_E_BADINDEXID = 0x80040E72,DB_E_BADINITSTRING = 0x80040E73,DB_E_NOPROVIDERSREGISTERED = 0x80040E74,DB_E_MISMATCHEDPROVIDER = 0x80040E75,};
enum MACRO_DC_PRINTERMEM {DC_PRINTERMEM = 28,DC_MEDIAREADY = 29,};
enum MACRO_DDFXALPHACAPS {DDFXALPHACAPS_BLTALPHAEDGEBLEND = 0x1,DDFXALPHACAPS_BLTALPHAPIXELS = 0x2,DDFXALPHACAPS_BLTALPHAPIXELSNEG = 0x4,DDFXALPHACAPS_BLTALPHASURFACES = 0x8,DDFXALPHACAPS_BLTALPHASURFACESNEG = 0x10,DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 0x20,DDFXALPHACAPS_OVERLAYALPHAPIXELS = 0x40,DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 0x80,DDFXALPHACAPS_OVERLAYALPHASURFACES = 0x100,DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 0x200,};
enum MACRO_DEMAND_UPDATE {DEMAND_UPDATE_ROUTES = 0x4,};
enum MACRO_DIALOG_FOLDER {DIALOG_FOLDER = 0x1,DIALOG_MESSAGE = 0x2,DIALOG_PROP = 0x4,DIALOG_ATTACH = 0x8,DIALOG_MOVE = 0x10,DIALOG_COPY = 0x20,DIALOG_DELETE = 0x40,DIALOG_ALLOW_CANCEL = 0x80,DIALOG_CONFIRM_CANCEL = 0x100,};
enum MACRO_DISPID_NORMAL {DISPID_NORMAL_FIRST = 1000,DISPID_ANCHOR = 1000,DISPID_BLOCK = 1000,DISPID_BR = 1000,DISPID_BGSOUND = 1000,DISPID_DD = 1000,DISPID_DIR = 1000,DISPID_DIV = 1000,DISPID_DL = 1000,DISPID_DT = 1000,DISPID_EFONT = 1000,DISPID_FORM = 1000,DISPID_HEADER = 1000,DISPID_HEDELEMS = 1000,DISPID_HR = 1000,DISPID_LABEL = 1000,DISPID_LI = 1000,DISPID_IMGBASE = 1000,DISPID_IMG = 2000,DISPID_INPUTIMAGE = 2000,DISPID_MENU = 1000,DISPID_OL = 1000,DISPID_PARA = 1000,DISPID_SELECT = 1000,DISPID_SELECTOBJ = 1000,DISPID_TABLE = 1000,DISPID_TEXTSITE = 1000,DISPID_TEXTAREA = 5000,DISPID_MARQUEE = 6000,DISPID_UL = 1000,DISPID_PHRASE = 1000,DISPID_UNKNOWNPDL = 1000,DISPID_COMMENTPDL = 1000,DISPID_TABLECELL = 2000,DISPID_RANGE = 1000,DISPID_SELECTION = 1000,DISPID_OPTION = 1000,DISPID_1D = 2000,DISPID_MAP = 1000,DISPID_AREA = 1000,DISPID_PARAM = 1000,DISPID_TABLESECTION = 1000,DISPID_TABLEROW = 1000,DISPID_TABLECOL = 1000,DISPID_SCRIPT = 1000,DISPID_STYLESHEET = 1000,DISPID_STYLERULE = 1000,DISPID_STYLESHEETS_COL = 1000,DISPID_STYLERULES_COL = 1000,DISPID_MIMETYPES_COL = 1000,DISPID_PLUGINS_COL = 1000,DISPID_2D = 1000,DISPID_OMWINDOW = 1000,DISPID_EVENTOBJ = 1000,DISPID_OLESITE = 1000,DISPID_FRAMESET = 1000,DISPID_LINK = 1000,DISPID_STYLEELEMENT = 1000,DISPID_FILTERS = 1000,DISPID_HTMLDOCUMENT = 1000,DISPID_OMDOCUMENT = 1000,DISPID_WINDOW = 1,DISPID_SCREEN = 1000,DISPID_HISTORY = 1,DISPID_LOCATION = 1,DISPID_NAVIGATOR = 1,DISPID_COLLECTION = 1500,DISPID_OPTIONS_COL = 1500,DISPID_CHECKBOX = 1000,DISPID_RADIO = 2000,DISPID_FRAMESITE = -2147415112,DISPID_FRAME = -2147414112,DISPID_IFRAME = -2147414112,DISPID_WINDOWOBJECT = -5500,DISPID_LOCATIONOBJECT = -5506,DISPID_HISTORYOBJECT = -5507,DISPID_NAVIGATOROBJECT = -5508,DISPID_SECURITYCTX = -5511,DISPID_AMBIENT_DLCONTROL = -5512,DISPID_AMBIENT_USERAGENT = -5513,DISPID_SECURITYDOMAIN = -5514,};
enum MACRO_DPENUMPLAYERS {DPENUMPLAYERS_GROUP = 0x20,DPENUMPLAYERS_SESSION = 0x80,};
enum MACRO_DPLCONNECTION {DPLCONNECTION_CREATESESSION = 2,DPLCONNECTION_JOINSESSION = 1,};
enum MACRO_DPLONGNAMELEN {DPLONGNAMELEN = 52,};
enum MACRO_DPPASSWORDLEN {DPPASSWORDLEN = 16,};
enum MACRO_DRIVERVERSION {DRIVERVERSION = 0,TECHNOLOGY = 2,HORZSIZE = 4,};
enum MACRO_EC_SYSTEMBASE {EC_SYSTEMBASE = 0x0,EC_USER = 0x8000,EC_COMPLETE = 0x1,EC_USERABORT = 0x2,EC_ERRORABORT = 0x3,EC_TIME = 0x4,EC_REPAINT = 0x5,EC_STREAM_ERROR_STOPPED = 0x6,EC_STREAM_ERROR_STILLPLAYING = 0x7,EC_ERROR_STILLPLAYING = 0x8,EC_PALETTE_CHANGED = 0x9,EC_VIDEO_SIZE_CHANGED = 0xA,EC_QUALITY_CHANGE = 0xB,EC_SHUTTING_DOWN = 0xC,EC_CLOCK_CHANGED = 0xD,EC_OPENING_FILE = 0x10,EC_BUFFERING_DATA = 0x11,EC_FULLSCREEN_LOST = 0x12,EC_ACTIVATE = 0x13,EC_NEED_RESTART = 0x14,EC_WINDOW_DESTROYED = 0x15,EC_DISPLAY_CHANGED = 0x16,EC_STARVATION = 0x17,EC_OLE_EVENT = 0x18,EC_NOTIFY_WINDOW = 0x19,EC_STREAM_CONTROL_STOPPED = 0x1A,EC_STREAM_CONTROL_STARTED = 0x1B,EC_END_OF_SEGMENT = 0x1C,EC_SEGMENT_STARTED = 0x1D,EC_LENGTH_CHANGED = 0x1E,};
enum MACRO_ENUMPAPERBINS {ENUMPAPERBINS = 31,SETDIBSCALING = 32,};
enum MACRO_ERROR_INSTALL {ERROR_INSTALL_STARTING = 1600,ERROR_INSTALL_SERVICE_FAILURE = 1601,ERROR_INSTALL_PACKAGE_VERSION = 1613,ERROR_INVALID_COMMAND_LINE = 1617,ERROR_INSTALL_ALREADY_RUNNING = 1618,ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619,ERROR_INSTALL_PACKAGE_INVALID = 1620,ERROR_INSTALL_UI_FAILURE = 1621,ERROR_INSTALL_LOG_FAILURE = 1622,ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623,ERROR_INSTALL_TRANFORM_FAILURE = 1624,ERROR_INSTALL_PACKAGE_REJECTED = 1625,ERROR_FUNCTION_NOT_CALLED = 1626,ERROR_FUNCTION_FAILED = 1627,ERROR_INVALID_TABLE = 1628,ERROR_DATATYPE_MISMATCH = 1629,ERROR_UNSUPPORTED_TYPE = 1630,ERROR_CREATE_FAILED = 1631,ERROR_INSTALL_TEMP_UNWRITABLE = 1632,};
enum MACRO_ERROR_INVALID {ERROR_INVALID_PORT_HANDLE = 601,ERROR_PORT_ALREADY_OPEN = 602,ERROR_BUFFER_TOO_SMALL = 603,ERROR_WRONG_INFO_SPECIFIED = 604,ERROR_CANNOT_SET_PORT_INFO = 605,ERROR_PORT_NOT_CONNECTED = 606,ERROR_EVENT_INVALID = 607,ERROR_DEVICE_DOES_NOT_EXIST = 608,ERROR_DEVICETYPE_DOES_NOT_EXIST = 609,ERROR_BUFFER_INVALID = 610,ERROR_ROUTE_NOT_AVAILABLE = 611,ERROR_ROUTE_NOT_ALLOCATED = 612,ERROR_INVALID_COMPRESSION_SPECIFIED = 613,ERROR_OUT_OF_BUFFERS = 614,ERROR_PORT_NOT_FOUND = 615,ERROR_ASYNC_REQUEST_PENDING = 616,ERROR_ALREADY_DISCONNECTING = 617,ERROR_PORT_NOT_OPEN = 618,ERROR_PORT_DISCONNECTED = 619,ERROR_NO_ENDPOINTS = 620,ERROR_CANNOT_OPEN_PHONEBOOK = 621,ERROR_CANNOT_LOAD_PHONEBOOK = 622,ERROR_CANNOT_FIND_PHONEBOOK_ENTRY = 623,ERROR_CANNOT_WRITE_PHONEBOOK = 624,ERROR_CORRUPT_PHONEBOOK = 625,ERROR_CANNOT_LOAD_STRING = 626,ERROR_KEY_NOT_FOUND = 627,ERROR_DISCONNECTION = 628,ERROR_REMOTE_DISCONNECTION = 629,ERROR_HARDWARE_FAILURE = 630,ERROR_USER_DISCONNECTION = 631,ERROR_INVALID_SIZE = 632,ERROR_PORT_NOT_AVAILABLE = 633,ERROR_CANNOT_PROJECT_CLIENT = 634,ERROR_UNKNOWN = 635,ERROR_WRONG_DEVICE_ATTACHED = 636,ERROR_BAD_STRING = 637,ERROR_REQUEST_TIMEOUT = 638,ERROR_CANNOT_GET_LANA = 639,ERROR_NETBIOS_ERROR = 640,ERROR_SERVER_OUT_OF_RESOURCES = 641,ERROR_NAME_EXISTS_ON_NET = 642,ERROR_SERVER_GENERAL_NET_FAILURE = 643,};
enum MACRO_ERROR_NETWORK {ERROR_NETWORK_NOT_AVAILABLE = 0x13AB,ERROR_NODE_NOT_AVAILABLE = 0x13AC,ERROR_ALL_NODES_NOT_AVAILABLE = 0x13AD,ERROR_RESOURCE_FAILED = 0x13AE,ERROR_CLUSTER_INVALID_NODE = 0x13AF,ERROR_CLUSTER_NODE_EXISTS = 0x13B0,ERROR_CLUSTER_JOIN_IN_PROGRESS = 0x13B1,ERROR_CLUSTER_NODE_NOT_FOUND = 0x13B2,ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 0x13B3,ERROR_CLUSTER_NETWORK_EXISTS = 0x13B4,ERROR_CLUSTER_NETWORK_NOT_FOUND = 0x13B5,ERROR_CLUSTER_NETINTERFACE_EXISTS = 0x13B6,ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 0x13B7,ERROR_CLUSTER_INVALID_REQUEST = 0x13B8,ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 0x13B9,ERROR_CLUSTER_NODE_DOWN = 0x13BA,ERROR_CLUSTER_NODE_UNREACHABLE = 0x13BB,ERROR_CLUSTER_NODE_NOT_MEMBER = 0x13BC,ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 0x13BD,ERROR_CLUSTER_INVALID_NETWORK = 0x13BE,ERROR_CLUSTER_NODE_UP = 0x13C0,ERROR_CLUSTER_IPADDR_IN_USE = 0x13C1,ERROR_CLUSTER_NODE_NOT_PAUSED = 0x13C2,ERROR_CLUSTER_NO_SECURITY_CONTEXT = 0x13C3,ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 0x13C4,ERROR_CLUSTER_NODE_ALREADY_UP = 0x13C5,ERROR_CLUSTER_NODE_ALREADY_DOWN = 0x13C6,ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 0x13C7,ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 0x13C8,ERROR_CLUSTER_NODE_ALREADY_MEMBER = 0x13C9,ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 0x13CA,ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 0x13CB,ERROR_INVALID_OPERATION_ON_QUORUM = 0x13CC,ERROR_DEPENDENCY_NOT_ALLOWED = 0x13CD,ERROR_CLUSTER_NODE_PAUSED = 0x13CE,ERROR_NODE_CANT_HOST_RESOURCE = 0x13CF,ERROR_CLUSTER_NODE_NOT_READY = 0x13D0,ERROR_CLUSTER_NODE_SHUTTING_DOWN = 0x13D1,ERROR_CLUSTER_JOIN_ABORTED = 0x13D2,ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 0x13D3,};
enum MACRO_ERR_SUCCEEDED {ERR_SUCCEEDED = 0x0,ERR_NULL_CHANNEL_LIST = 0x10001,ERR_EPISODE_RS_FAILED = 0x10002,ERR_NULL_TVXDOC = 0xF0001,ERR_IN_MODAL_STATE = 0xF0002,ERR_FILE_MSVIDEO_MISSING = 0x100001,ERR_FILE_NODEVICE_MISSING = 0x100002,ERR_FILE_MSGUIDE_MISSING = 0x100003,ERR_CANT_NAVIGATE = 0xFF0001,ERR_CHANNEL_DNE = 0xFF0002,};
enum MACRO_EXCONSISTENCY {EXCONSISTENCY = 11,};
enum MACRO_E_END_OF_FILE {EC_EDK_E_END_OF_FILE = 0x4,EDK_E_END_OF_FILE = 0x800B0004,};
enum MACRO_E_ROWTOOSHORT {E_ROWTOOSHORT = 0x80041000,E_BADBINDINFO = 0x80041001,E_COLUMNUNAVAILABLE = 0x80041002,};
enum MACRO_FACILITY_MDSI {FACILITY_MDSI = 0x900,};
enum MACRO_FOLDER_DIALOG {FOLDER_DIALOG = 0x2,};
enum MACRO_GETCOLORTABLE {GETCOLORTABLE = 5,};
enum MACRO_GETTECHNOLOGY {GETTECHNOLOGY = 20,};
enum MACRO_HOSTSEC_ERROR {HOSTSEC_ERROR_UNABLE_TO_PROCESS_REQUEST = 0xE90005DD,HOSTSEC_ERROR_REMOTE_UNREACHABLE = 0xE90005DE,HOSTSEC_ERROR_INVALID_USERNAME = 0xE90005DF,HOSTSEC_ERROR_INVALID_PASSWORD = 0xE90005E0,};
enum MACRO_HTBOTTOMRIGHT {HTBOTTOMRIGHT = 17,};
enum MACRO_HTTRANSPARENT {HTTRANSPARENT = -1,};
enum MACRO_IDC_OLEUIHELP {IDC_OLEUIHELP = 99,IDC_IO_CREATENEW = 2100,IDC_IO_CREATEFROMFILE = 2101,IDC_IO_LINKFILE = 2102,IDC_IO_OBJECTTYPELIST = 2103,IDC_IO_DISPLAYASICON = 2104,IDC_IO_CHANGEICON = 2105,IDC_IO_FILE = 2106,IDC_IO_FILEDISPLAY = 2107,IDC_IO_RESULTIMAGE = 2108,IDC_IO_RESULTTEXT = 2109,IDC_IO_ICONDISPLAY = 2110,IDC_IO_OBJECTTYPETEXT = 2111,IDC_IO_FILETEXT = 2112,IDC_IO_FILETYPE = 2113,IDC_IO_INSERTCONTROL = 2114,IDC_IO_ADDCONTROL = 2115,IDC_IO_CONTROLTYPELIST = 2116,IDC_PS_PASTE = 500,IDC_PS_PASTELINK = 501,IDC_PS_SOURCETEXT = 502,IDC_PS_PASTELIST = 503,IDC_PS_PASTELINKLIST = 504,IDC_PS_DISPLAYLIST = 505,IDC_PS_DISPLAYASICON = 506,IDC_PS_ICONDISPLAY = 507,IDC_PS_CHANGEICON = 508,IDC_PS_RESULTIMAGE = 509,IDC_PS_RESULTTEXT = 510,IDC_CI_GROUP = 120,IDC_CI_CURRENT = 121,IDC_CI_CURRENTICON = 122,IDC_CI_DEFAULT = 123,IDC_CI_DEFAULTICON = 124,IDC_CI_FROMFILE = 125,IDC_CI_FROMFILEEDIT = 126,IDC_CI_ICONLIST = 127,IDC_CI_LABEL = 128,IDC_CI_LABELEDIT = 129,IDC_CI_BROWSE = 130,IDC_CI_ICONDISPLAY = 131,IDC_CV_OBJECTTYPE = 150,IDC_CV_DISPLAYASICON = 152,IDC_CV_CHANGEICON = 153,IDC_CV_ACTIVATELIST = 154,IDC_CV_CONVERTTO = 155,IDC_CV_ACTIVATEAS = 156,IDC_CV_RESULTTEXT = 157,IDC_CV_CONVERTLIST = 158,IDC_CV_ICONDISPLAY = 165,IDC_EL_CHANGESOURCE = 201,IDC_EL_AUTOMATIC = 202,IDC_EL_CANCELLINK = 209,IDC_EL_UPDATENOW = 210,IDC_EL_OPENSOURCE = 211,IDC_EL_MANUAL = 212,IDC_EL_LINKSOURCE = 216,IDC_EL_LINKTYPE = 217,IDC_EL_LINKSLISTBOX = 206,IDC_EL_COL1 = 220,IDC_EL_COL2 = 221,IDC_EL_COL3 = 222,IDC_BZ_RETRY = 600,IDC_BZ_ICON = 601,IDC_BZ_MESSAGE1 = 602,IDC_BZ_SWITCHTO = 604,IDC_UL_METER = 1029,IDC_UL_STOP = 1030,IDC_UL_PERCENT = 1031,IDC_UL_PROGRESS = 1032,IDC_PU_LINKS = 900,IDC_PU_TEXT = 901,IDC_PU_CONVERT = 902,IDC_PU_ICON = 908,IDC_GP_OBJECTNAME = 1009,IDC_GP_OBJECTTYPE = 1010,IDC_GP_OBJECTSIZE = 1011,IDC_GP_CONVERT = 1013,IDC_GP_OBJECTICON = 1014,IDC_GP_OBJECTLOCATION = 1022,IDC_VP_PERCENT = 1000,IDC_VP_CHANGEICON = 1001,IDC_VP_EDITABLE = 1002,IDC_VP_ASICON = 1003,IDC_VP_RELATIVE = 1005,IDC_VP_SPIN = 1006,IDC_VP_SCALETXT = 1034,IDC_VP_ICONDISPLAY = 1021,IDC_VP_RESULTIMAGE = 1033,IDC_LP_OPENSOURCE = 1006,IDC_LP_UPDATENOW = 1007,IDC_LP_BREAKLINK = 1008,IDC_LP_LINKSOURCE = 1012,IDC_LP_CHANGESOURCE = 1015,IDC_LP_AUTOMATIC = 1016,IDC_LP_MANUAL = 1017,IDC_LP_DATE = 1018,IDC_LP_TIME = 1019,};
enum MACRO_IDFCHANNELHDR {IDFCHANNELHDR_F_GENERAL_MIDI = 0x1,};
enum MACRO_IIS_MD_SERVER {IIS_MD_SERVER_BASE = 1000,};
enum MACRO_IMF_FORCENONE {IMF_FORCENONE = 0x1,IMF_FORCEENABLE = 0x2,IMF_FORCEDISABLE = 0x4,IMF_CLOSESTATUSWINDOW = 0x8,IMF_VERTICAL = 0x20,IMF_FORCEACTIVE = 0x40,IMF_FORCEINACTIVE = 0x80,IMF_FORCEREMEMBER = 0x100,IMF_MULTIPLEEDIT = 0x400,};
enum MACRO_INTERFACESAFE {INTERFACESAFE_FOR_UNTRUSTED_CALLER = 0x1,INTERFACESAFE_FOR_UNTRUSTED_DATA = 0x2,};
enum MACRO_INTERNET_OPEN {INTERNET_OPEN_TYPE_PRECONFIG = 0,INTERNET_OPEN_TYPE_DIRECT = 1,INTERNET_OPEN_TYPE_PROXY = 3,INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY = 4,};
enum MACRO_INVALID_AUDIO {INVALID_AUDIO_FORMAT = 0xFFFFFFFF,INVALID_MEDIA_FORMAT = 0xFFFFFFFF,INVALID_VIDEO_FORMAT = 0xFFFFFFFF,};
enum MACRO_IOCTL_CHANGER {IOCTL_CHANGER_BASE = 48,IOCTL_CHANGER_GET_PARAMETERS = 3162112,IOCTL_CHANGER_GET_STATUS = 3162116,IOCTL_CHANGER_GET_PRODUCT_DATA = 3162120,IOCTL_CHANGER_SET_ACCESS = 3194896,IOCTL_CHANGER_GET_ELEMENT_STATUS = 3194900,IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = 3162136,IOCTL_CHANGER_SET_POSITION = 3162140,IOCTL_CHANGER_EXCHANGE_MEDIUM = 3162144,IOCTL_CHANGER_MOVE_MEDIUM = 3162148,IOCTL_CHANGER_REINITIALIZE_TRANSPORT = 3162152,IOCTL_CHANGER_QUERY_VOLUME_TAGS = 3194924,};
enum MACRO_IOCTL_STORAGE {IOCTL_STORAGE_BASE = 45,IOCTL_STORAGE_CHECK_VERIFY = 2967552,IOCTL_STORAGE_MEDIA_REMOVAL = 2967556,IOCTL_STORAGE_EJECT_MEDIA = 2967560,IOCTL_STORAGE_LOAD_MEDIA = 2967564,IOCTL_STORAGE_RESERVE = 2967568,IOCTL_STORAGE_RELEASE = 2967572,IOCTL_STORAGE_FIND_NEW_DEVICES = 2967576,IOCTL_STORAGE_GET_MEDIA_TYPES = 2952192,IOCTL_STORAGE_GET_MEDIA_TYPES_EX = 2952196,IOCTL_STORAGE_RESET_BUS = 2969600,IOCTL_STORAGE_RESET_DEVICE = 2969604,IOCTL_STORAGE_GET_DEVICE_NUMBER = 2953344,};
enum MACRO_IPX_INTERFACE {IPX_INTERFACE_INFO_TYPE = 1,IPX_STATIC_ROUTE_INFO_TYPE = 2,IPX_STATIC_SERVICE_INFO_TYPE = 3,IPX_SERVICE_FILTER_INFO_TYPE = 4,IPX_ROUTE_FILTER_INFO_TYPE = 5,IPX_IN_TRAFFIC_FILTER_INFO_TYPE = 6,IPX_ADAPTER_INFO_TYPE = 7,};
enum MACRO_LINECALLSTATE {LINECALLSTATE_IDLE = 0x1,LINECALLSTATE_OFFERING = 0x2,LINECALLSTATE_ACCEPTED = 0x4,LINECALLSTATE_DIALTONE = 0x8,LINECALLSTATE_DIALING = 0x10,LINECALLSTATE_RINGBACK = 0x20,LINECALLSTATE_BUSY = 0x40,LINECALLSTATE_SPECIALINFO = 0x80,LINECALLSTATE_CONNECTED = 0x100,LINECALLSTATE_PROCEEDING = 0x200,LINECALLSTATE_ONHOLD = 0x400,LINECALLSTATE_CONFERENCED = 0x800,LINECALLSTATE_ONHOLDPENDCONF = 0x1000,LINECALLSTATE_ONHOLDPENDTRANSFER = 0x2000,LINECALLSTATE_DISCONNECTED = 0x4000,LINECALLSTATE_UNKNOWN = 0x8000,};
enum MACRO_LINEDIGITMODE {LINEDIGITMODE_PULSE = 0x1,LINEDIGITMODE_DTMF = 0x2,LINEDIGITMODE_DTMFEND = 0x4,};
enum MACRO_LINEMEDIAMODE {LINEMEDIAMODE_UNKNOWN = 0x2,LINEMEDIAMODE_INTERACTIVEVOICE = 0x4,LINEMEDIAMODE_AUTOMATEDVOICE = 0x8,LINEMEDIAMODE_DATAMODEM = 0x10,LINEMEDIAMODE_G3FAX = 0x20,LINEMEDIAMODE_TDD = 0x40,LINEMEDIAMODE_G4FAX = 0x80,LINEMEDIAMODE_DIGITALDATA = 0x100,LINEMEDIAMODE_TELETEX = 0x200,LINEMEDIAMODE_VIDEOTEX = 0x400,LINEMEDIAMODE_TELEX = 0x800,LINEMEDIAMODE_MIXED = 0x1000,LINEMEDIAMODE_ADSI = 0x2000,LINEMEDIAMODE_VOICEVIEW = 0x4000,LINEMEDIAMODE_VIDEO = 0x8000,};
enum MACRO_LOGOFF_NORMAL {LOGOFF_NORMAL = 0x1,LOGOFF_HURRY = 0x80000000,};
enum MACRO_LVM_EDITLABEL {LVM_EDITLABEL = 4119,};
enum MACRO_LVM_GETCOLUMN {LVM_GETCOLUMN = 4121,LVM_SETCOLUMN = 4122,LVM_INSERTCOLUMN = 4123,};
enum MACRO_MAPI_DEFERRED {MAPI_DEFERRED_ERRORS = 0x8,MAPI_ASSOCIATED = 0x40,};
enum MACRO_MAPPER_STATUS {DRVM_MAPPER_STATUS = 0x2000,WIDM_MAPPER_STATUS = 0x2000,};
enum MACRO_MAXNETLIBNAME {MAXNETLIBNAME = 255,};
enum MACRO_MAXNUMERICLEN {MAXNUMERICLEN = 16,MAXNUMERICDIG = 38,};
enum MACRO_MAXSERVERNAME {MAXSERVERNAME = 30,};
enum MACRO_MAX_LEADBYTES {MAX_LEADBYTES = 12,MAX_DEFAULTCHAR = 2,};
enum MACRO_MAX_PREFERRED {MAX_PREFERRED_LENGTH = 4294967295,};
enum MACRO_MCN_SELCHANGE {MCN_SELCHANGE = -749,MCN_GETDAYSTATE = -747,MCN_SELECT = -746,};
enum MACRO_MIDIPATCHSIZE {MIDIPATCHSIZE = 128,};
enum MACRO_MINSYSCOMMAND {MINSYSCOMMAND = 61440,};
enum MACRO_MIXER_OBJECTF {MIXER_OBJECTF_HANDLE = 0x80000000,MIXER_OBJECTF_MIXER = 0x0,MIXER_OBJECTF_HMIXER = 0x80000000,MIXER_OBJECTF_WAVEOUT = 0x10000000,MIXER_OBJECTF_HWAVEOUT = 0x90000000,MIXER_OBJECTF_WAVEIN = 0x20000000,MIXER_OBJECTF_HWAVEIN = 0xA0000000,MIXER_OBJECTF_MIDIOUT = 0x30000000,MIXER_OBJECTF_HMIDIOUT = 0xB0000000,MIXER_OBJECTF_MIDIIN = 0x40000000,MIXER_OBJECTF_HMIDIIN = 0xC0000000,MIXER_OBJECTF_AUX = 0x50000000,};
enum MACRO_MOUSE_WHEELED {MOUSE_WHEELED = 0x4,};
enum MACRO_MSGF_COMMCTRL {MSGF_COMMCTRL_BEGINDRAG = 0x4200,MSGF_COMMCTRL_SIZEHEADER = 0x4201,MSGF_COMMCTRL_DRAGSELECT = 0x4202,MSGF_COMMCTRL_TOOLBARCUST = 0x4203,};
enum MACRO_MSSIP_ADDINFO {MSSIP_ADDINFO_NONE = 0,MSSIP_ADDINFO_FLAT = 1,MSSIP_ADDINFO_CATMEMBER = 2,MSSIP_ADDINFO_BLOB = 3,MSSIP_ADDINFO_NONMSSIP = 500,};
enum MACRO_NCBLANSTALERT {NCBLANSTALERT = 0x73,};
enum MACRO_NON_VALIDATED {NON_VALIDATED_LOGON = 3,};
enum MACRO_NOT_SUPPORTED {NOT_SUPPORTED = 0x8,};
enum MACRO_NO_PERMISSION {NO_PERMISSION_REQUIRED = 0x1,};
enum MACRO_NTBSTRINGBIND {NTBSTRINGBIND = 11,};
enum MACRO_OLEUI_HANDLES {OLEUI_HANDLES_USEINVERSE = 0x1,OLEUI_HANDLES_NOBORDER = 0x2,OLEUI_HANDLES_INSIDE = 0x4,OLEUI_HANDLES_OUTSIDE = 0x8,OLEUI_SHADE_FULLRECT = 0x1,OLEUI_SHADE_BORDERIN = 0x2,OLEUI_SHADE_BORDEROUT = 0x3,};
enum MACRO_OLEUI_VERSION {OLEUI_VERSION_MAGIC = 0x4D42,};
enum MACRO_PGF_CALCWIDTH {PGF_CALCWIDTH = 1,PGF_CALCHEIGHT = 2,};
enum MACRO_PHONELAMPMODE {PHONELAMPMODE_DUMMY = 0x1,PHONELAMPMODE_OFF = 0x2,PHONELAMPMODE_STEADY = 0x4,PHONELAMPMODE_WINK = 0x8,PHONELAMPMODE_FLASH = 0x10,PHONELAMPMODE_FLUTTER = 0x20,PHONELAMPMODE_BROKENFLUTTER = 0x40,PHONELAMPMODE_UNKNOWN = 0x80,};
enum MACRO_PHYSICALWIDTH {PHYSICALWIDTH = 110,};
enum MACRO_PRINTRATEUNIT {PRINTRATEUNIT_PPM = 1,PRINTRATEUNIT_CPS = 2,PRINTRATEUNIT_LPM = 3,PRINTRATEUNIT_IPM = 4,};
enum MACRO_QUERY_SHALLOW {QUERY_SHALLOW = 0,QUERY_DEEP = 1,QUERY_PHYSICAL_PATH = 0,QUERY_VIRTUAL_PATH = 2,};
enum MACRO_REMOTE_LISTEN {REMOTE_LISTEN = 0x10,};
enum MACRO_REPLACEDLGORD {REPLACEDLGORD = 1541,};
enum MACRO_RESOURCEUSAGE {RESOURCEUSAGE_CONNECTABLE = 0x1,RESOURCEUSAGE_CONTAINER = 0x2,RESOURCEUSAGE_NOLOCALDEVICE = 0x4,RESOURCEUSAGE_SIBLING = 0x8,RESOURCEUSAGE_ATTACHED = 0x10,RESOURCEUSAGE_ALL = 0x13,RESOURCEUSAGE_RESERVED = 0x80000000,};
enum MACRO_RIFFCPPO_objr {RIFFCPPO_objr = 1919574639,RIFFCPPO_obji = 1768579695,RIFFCPPO_clsr = 1920167011,RIFFCPPO_clsi = 1769172067,RIFFCPPO_mbr = 544367213,RIFFCPPO_char = 1918986339,RIFFCPPO_byte = 1702132066,RIFFCPPO_int = 544501353,RIFFCPPO_word = 1685221239,RIFFCPPO_long = 1735290732,RIFFCPPO_dwrd = 1685223268,RIFFCPPO_flt = 544500838,RIFFCPPO_dbl = 543973988,RIFFCPPO_str = 544371827,};
enum MACRO_RPC_INTERFACE {RPC_INTERFACE_HAS_PIPES = 0x1,};
enum MACRO_RSVP_WILDCARD {RSVP_WILDCARD_STYLE = 0x1,RSVP_FIXED_FILTER_STYLE = 0x2,RSVP_SHARED_EXPLICIT_STYLE = 0x3,};
enum MACRO_SCHANNEL_CRED {SCHANNEL_CRED_VERSION = 0x3,};
enum MACRO_SCH_CRED_X509 {SCH_CRED_X509_CERTCHAIN = 0x1,SCH_CRED_X509_CAPI = 0x2,SCH_CRED_CERT_CONTEXT = 0x3,};
enum MACRO_SCRIPTTYPELIB {SCRIPTTYPELIB_ISCONTROL = 0x10,SCRIPTTYPELIB_ISPERSISTENT = 0x40,};
enum MACRO_SECURITY_FLAG {SECURITY_FLAG_SECURE = 0x1,SECURITY_FLAG_STRENGTH_WEAK = 0x10000000,SECURITY_FLAG_STRENGTH_MEDIUM = 0x40000000,SECURITY_FLAG_STRENGTH_STRONG = 0x20000000,SECURITY_FLAG_UNKNOWNBIT = 0x80000000,SECURITY_FLAG_NORMALBITNESS = 0x10000000,SECURITY_FLAG_SSL = 0x2,SECURITY_FLAG_SSL3 = 0x4,SECURITY_FLAG_PCT = 0x8,SECURITY_FLAG_PCT4 = 0x10,SECURITY_FLAG_IETFSSL4 = 0x20,SECURITY_FLAG_40BIT = 0x10000000,SECURITY_FLAG_128BIT = 0x20000000,SECURITY_FLAG_56BIT = 0x40000000,SECURITY_FLAG_IGNORE_REVOCATION = 0x80,SECURITY_FLAG_IGNORE_UNKNOWN_CA = 0x100,SECURITY_FLAG_IGNORE_WRONG_USAGE = 0x200,SECURITY_FLAG_IGNORE_CERT_CN_INVALID = 0x1000,SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 0x2000,SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS = 0x4000,SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP = 0x8000,SECURITY_SET_MASK = 0x3380,};
enum MACRO_SERVICE_LOGON {SERVICE_LOGON_FAILED = 0x20,};
enum MACRO_SERVICE_QUERY {SERVICE_QUERY_CONFIG = 0x1,SERVICE_CHANGE_CONFIG = 0x2,SERVICE_QUERY_STATUS = 0x4,SERVICE_ENUMERATE_DEPENDENTS = 0x8,SERVICE_START = 0x10,SERVICE_STOP = 0x20,SERVICE_PAUSE_CONTINUE = 0x40,SERVICE_INTERROGATE = 0x80,SERVICE_USER_DEFINED_CONTROL = 0x100,SERVICE_ALL_ACCESS = 0xF01FF,SERVICE_CONFIG_DESCRIPTION = 0x1,SERVICE_CONFIG_FAILURE_ACTIONS = 0x2,};
enum MACRO_SESSION_CRYPT {SESSION_CRYPT_KLEN = 21,};
enum MACRO_SETICMPROFILE {SETICMPROFILE_EMBEDED = 0x1,};
enum MACRO_SETMITERLIMIT {SETMITERLIMIT = 23,};
enum MACRO_SIZE_RESTORED {SIZE_RESTORED = 0,SIZE_MINIMIZED = 1,SIZE_MAXIMIZED = 2,SIZE_MAXSHOW = 3,SIZE_MAXHIDE = 4,};
enum MACRO_SOL_APPLETALK {SOL_APPLETALK = 16000,};
enum MACRO_SQLOLEVERSION {SQLOLEVERSION_600 = 0x60000,SQLOLEVERSION_650 = 0x63200,SQLOLEVERSION_CURRENT = 0x63200,};
enum MACRO_SRVDONEINPROC {SRVDONEINPROC = 255,};
enum MACRO_STREAM_APPEND {STREAM_APPEND = 0x4,};
enum MACRO_SUCCEED_ABORT {SUCCEED_ABORT = 2,};
enum MACRO_TBL_NOADVANCE {TBL_NOADVANCE = 0x1,};
enum MACRO_TCP_BSDURGENT {TCP_BSDURGENT = 0x7000,};
enum MACRO_TCP_EXPEDITED {TCP_EXPEDITED_1122 = 0x2,};
enum MACRO_TRACE_VERSION {TRACE_VERSION = 1000,TRACE_ON = 1,TRACE_VS_EVENT_ON = 2,};
enum MACRO_VECTOR_SEARCH {VECTOR_SEARCH = 0x8,};
enum MACRO_WBREAK_E_INIT {WBREAK_E_INIT_FAILED = 0x80041785,};
enum MACRO_WSAEADDRINUSE {WSAEADDRINUSE = 10048,};
enum MACRO_WSAECANCELLED {WSAECANCELLED = 10103,};
enum MACRO_WSAECONNRESET {WSAECONNRESET = 10054,};
enum MACRO_WSAEOPNOTSUPP {WSAEOPNOTSUPP = 10045,};
enum MACRO_WSAEPROTOTYPE {WSAEPROTOTYPE = 10041,};
enum MACRO_X509_SEQUENCE {X509_SEQUENCE_OF_ANY = 34,X509_CRL_DIST_POINTS = 35,X509_ENHANCED_KEY_USAGE = 36,};
enum MACRO__CRTDBG_ALLOC {_CRTDBG_ALLOC_MEM_DF = 0x1,_CRTDBG_DELAY_FREE_MEM_DF = 0x2,_CRTDBG_CHECK_ALWAYS_DF = 0x4,_CRTDBG_RESERVED_DF = 0x8,_CRTDBG_CHECK_CRT_DF = 0x10,_CRTDBG_LEAK_CHECK_DF = 0x20,_CRTDBG_REPORT_FLAG = 0xFFFFFFFF,};
enum MACRO__HEAPBADBEGIN {_HEAPBADBEGIN = -3,};
enum MACRO__INC_DIGITALV {_INC_DIGITALV = 100,};
enum MACRO_attAttachData {attAttachData = 0x6800F,};
enum MACRO_attAttachment {attAttachment = 0x69005,};
enum MACRO_attRecipTable {attRecipTable = 0x69004,};
enum MACRO_attRequestRes {attRequestRes = 0x40009,};
enum MACRO_cchBodyTagMax {cchBodyTagMax = 100,};
enum MACRO_chOpMapByForm {chOpMapByForm = 49,};
enum MACRO_cktypeDIBbits {cktypeDIBbits = 25188,};
enum MACRO_dispidSetItem {dispidSetItem = 1001,};
enum MACRO_dispidSuspend {dispidSuspend = 3002,};
enum MACRO_dispidTVXTune {dispidTVXTune = 4010,};
enum MACRO_ecProxyDLLEOF {ecProxyDLLEOF = 50010,};
enum MACRO_ecProxyDLLOOM {ecProxyDLLOOM = 50006,};
enum MACRO_grfdexPropAll {grfdexPropAll = 16383,};
enum MACRO_hrAlreadyOpen {hrAlreadyOpen = 0xC7FF0005,};
enum MACRO_hrBadColumnId {hrBadColumnId = 0xC80005ED,};
enum MACRO_hrColumnInUse {hrColumnInUse = 0xC8000416,};
enum MACRO_hrInvalidName {hrInvalidName = 0xC80003EA,};
enum MACRO_hrInvalidPath {hrInvalidPath = 0xC80003FF,};
enum MACRO_hrLogDiskFull {hrLogDiskFull = 0xC8000211,};
enum MACRO_hrNoWriteLock {hrNoWriteLock = 0x8800042B,};
enum MACRO_hrNullInvalid {hrNullInvalid = 0xC80005E0,};
enum MACRO_hrOutOfMemory {hrOutOfMemory = 0xC80003F3,};
enum MACRO_hrTableLocked {hrTableLocked = 0xC8000516,};
enum MACRO_hrTooManyKeys {hrTooManyKeys = 0xC80003F8,};
enum MACRO_ichOpMapPrint {ichOpMapPrint = 5,};
enum MACRO_idsDefKeyword {idsDefKeyword = 1010,};
enum MACRO_idsIsPassword {idsIsPassword = 1000,};
enum MACRO_lhSessionNull {lhSessionNull = 0,};
enum MACRO_oledbICommand {oledbICommand = 50011,};
enum MACRO_oledbIDBInfo_ {oledbIDBInfo__GetKeywords = 50040,oledbIDBInfo__GetLiteralInfo = 50041,};
enum MACRO_oledbIRowset_ {oledbIRowset__AddRefRows = 50077,oledbIRowset__GetData = 50078,oledbIRowset__GetNextRows = 50079,oledbIRowset__ReleaseRows = 50080,oledbIRowset__RestartPosition = 50081,};
enum MACRO_pidProfileMin {pidProfileMin = 0x6600,};
enum MACRO_pidSpecialMin {pidSpecialMin = 0x6670,};
enum MACRO_tevtRerouting {tevtRerouting = 29,};
typedef struct tagMCI_ANIM_PLAY_PARMS MCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS MCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS MCI_ANIM_STEP_PARMS;
typedef struct _8597D300EC808C32B843E8106ABB2EC1 MCI_DGV_INFO_PARMSA;
typedef struct _EC5D1C1BD51CCAB9AF6F5AE0D6E88016 MCI_DGV_INFO_PARMSW;
typedef struct _2646B588B97D9461B888B3A6B0F533BF MCI_DGV_LIST_PARMSA;
typedef struct _FB9D1F30B538457F25D66F947CEA1060 MCI_DGV_LIST_PARMSW;
typedef struct _114DC3E6372E97B43E837C0EA892420F MCI_DGV_OPEN_PARMSA;
typedef struct _1E2FD961D0F6599201D4719261A6C1FA MCI_DGV_OPEN_PARMSW;
typedef struct _705BCFC90ADC6A58B0FDE7ED53396BD1 MCI_DGV_PASTE_PARMS;
typedef struct _7300D6D0160F27FB0DC605F404D9E579 MCI_DGV_SAVE_PARMSA;
typedef struct _5CC485201744F683BFCAFBF5CC04CDB7 MCI_DGV_SAVE_PARMSW;
typedef struct tagMCI_OVLY_RECT_PARMS MCI_OVLY_RECT_PARMS;
typedef struct mc_receive_and_post MC_RECEIVE_AND_POST;
typedef struct mc_receive_and_wait MC_RECEIVE_AND_WAIT;
typedef struct mc_receive_log_data MC_RECEIVE_LOG_DATA;
typedef struct tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
typedef struct _NET_DISPLAY_MACHINE NET_DISPLAY_MACHINE;
typedef struct tagUNDETERMINESTRUCT *NPUNDETERMINESTRUCT;
typedef struct _NTSD_EXTENSION_APIS NTSD_EXTENSION_APIS;
enum NtmsAllocateOptions {NTMS_ALLOCATE_NEW = 0x1,NTMS_ALLOCATE_NEXT = 0x2,NTMS_ALLOCATE_ERROR_IF_UNAVAILABLE = 0x4,};
enum NtmsDismountOptions {NTMS_DISMOUNT_DEFERRED = 0x1,};
enum NtmsInjectOperation {NTMS_INJECT_START = 0x0,NTMS_INJECT_STOP = 0x1,};
enum NtmsInventoryMethod {NTMS_INVENTORY_NONE = 0x0,NTMS_INVENTORY_FAST = 0x1,NTMS_INVENTORY_OMID = 0x2,NTMS_INVENTORY_DEFAULT = 0x3,NTMS_INVENTORY_MAX = 0x4,};
typedef struct _OBJECT_NOTIFICATION OBJECT_NOTIFICATION;
struct OLEDBSimpleProvider {struct OLEDBSimpleProviderVtbl *lpVtbl;};
typedef struct tagOIFI OLEINPLACEFRAMEINFO;
typedef float OLE_XSIZE_CONTAINER;
typedef float OLE_YSIZE_CONTAINER;
typedef struct _ACTRL_ACCESS_INFOA *PACTRL_ACCESS_INFOA;
typedef struct _ACTRL_ACCESS_INFOW *PACTRL_ACCESS_INFOW;
typedef IAMDevMemoryControl *PAMDEVMEMORYCONTROL;
typedef struct _AM_DVDCOPY_CHLGKEY *PAM_DVDCOPY_CHLGKEY;
typedef struct _AM_DVDCOPY_DISCKEY *PAM_DVDCOPY_DISCKEY;
typedef struct _BROWSER_STATISTICS *PBROWSER_STATISTICS;
typedef struct _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;
typedef struct _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;
typedef struct _CHARDEVQ_INFO_1002 *PCHARDEVQ_INFO_1002;
typedef struct _CHARDEVQ_INFO_1003 *PCHARDEVQ_INFO_1003;
typedef struct _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;
typedef struct tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;
typedef struct _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
typedef struct _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;
typedef struct _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;
typedef struct _GROUP_USERS_INFO_0 *PGROUP_USERS_INFO_0;
typedef struct _GROUP_USERS_INFO_1 *PGROUP_USERS_INFO_1;
typedef struct tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;
typedef IAMTimecodeDisplay *PIAMTIMECODEDISPLAY;
typedef IActiveScriptParse *PIActiveScriptParse;
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
typedef struct _8B637E45ECF54E3AF9C38EA7F99EC0BD *PLLC_ADAPTER_LOG_TR;
typedef union _52E42AF55B98D6DF1D491C96B8589219 *PLLC_DLC_LOG_BUFFER;
typedef struct _9CDBCEE1F465C05E6C1B2E3C0329570E *PLLC_TRANSMIT_PARMS;
typedef struct _LSA_TRANSLATED_SID *PLSA_TRANSLATED_SID;
typedef struct _LSA_UNICODE_STRING *PLSA_UNICODE_STRING;
typedef struct tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;
typedef struct _MD_CHANGE_OBJECT_W *PMD_CHANGE_OBJECT_W;
typedef struct tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;
typedef struct _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;
typedef struct tagOLEUICHANGESOURCEA *POLEUICHANGESOURCEA;
typedef struct tagOLEUICHANGESOURCEW *POLEUICHANGESOURCEW;
typedef struct tagOLEUIINSERTOBJECTA *POLEUIINSERTOBJECTA;
typedef struct tagOLEUIINSERTOBJECTW *POLEUIINSERTOBJECTW;
typedef struct tagOLEUIPASTESPECIALA *POLEUIPASTESPECIALA;
typedef struct tagOLEUIPASTESPECIALW *POLEUIPASTESPECIALW;
typedef struct _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;
typedef struct _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;
typedef struct _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;
typedef struct _RAS_AUTH_ATTRIBUTE *PRAS_AUTH_ATTRIBUTE;
typedef struct _PRINTER_NOTIFY_INFO PRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION PROCESS_INFORMATION;
typedef struct _ProxyConfigParams PROXY_CONFIG_PARAMS;
typedef struct _27240A871129E8C5EF2505ED059D4BC8 *PRPC_DISPATCH_TABLE;
typedef struct _RTCP_SENDER_REPORT *PRTCP_SENDER_REPORT;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;
typedef struct _SERVICE_ASYNC_INFO *PSERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE *PSERVICE_TYPE_VALUE;
typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;
typedef struct _SP_INF_INFORMATION *PSP_INF_INFORMATION;
typedef struct _STAT_WORKSTATION_0 *PSTAT_WORKSTATION_0;
typedef struct _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;
typedef struct _USER_MODALS_INFO_0 *PUSER_MODALS_INFO_0;
typedef struct _USER_MODALS_INFO_1 *PUSER_MODALS_INFO_1;
typedef struct _USER_MODALS_INFO_2 *PUSER_MODALS_INFO_2;
typedef struct _USER_MODALS_INFO_3 *PUSER_MODALS_INFO_3;
typedef struct _VERIFY_INFORMATION *PVERIFY_INFORMATION;
typedef struct WINTRUST_BLOB_INFO_ *PWINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ *PWINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ *PWINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ *PWINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA *PWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *PWSANAMESPACE_INFOW;
typedef struct _RAS_PORT_STATISTICS RAS_PORT_STATISTICS;
typedef struct _RAS_PPP_ATCP_RESULT RAS_PPP_ATCP_RESULT;
typedef struct _RAS_PPP_IPCP_RESULT RAS_PPP_IPCP_RESULT;
typedef struct _REPARSE_DATA_BUFFER REPARSE_DATA_BUFFER;
typedef struct _REPL_EDIR_INFO_1000 REPL_EDIR_INFO_1000;
typedef struct _REPL_EDIR_INFO_1001 REPL_EDIR_INFO_1001;
enum RND_NOTIFICATION_ID {NI_SUB_TYPE = 0x1,NI_ORIGINATOR = 0x2,NI_ANNOUNCEMENT_SCOPE = 0x3,NI_ADVERTISING_SCOPE = 0x4,NI_URL = 0x5,NI_DESCRIPTION = 0x6,NI_START_TIME = 0x7,NI_STOP_TIME = 0x8,NI_CONFERENCE_BLOB = 0x9,};
typedef struct _ROUTING_TABLE_INDEX ROUTING_TABLE_INDEX;
typedef struct _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
typedef struct _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
typedef struct _RTP_ENCRYPTION_INFO RTP_ENCRYPTION_INFO;
struct RemoteComponentUtil;
typedef struct _RemoteServiceStatus RemoteServiceStatus;
struct RoleAssociationUtil;
typedef struct _SBitMaskRestriction SBitMaskRestriction;
typedef struct _SCommentRestriction SCommentRestriction;
typedef struct _SContentRestriction SContentRestriction;
typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
typedef struct _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
typedef struct SIP_ADD_NEWPROVIDER_ SIP_ADD_NEWPROVIDER;
typedef struct _SOCKET_ADDRESS_LIST SOCKET_ADDRESS_LIST;
typedef struct tagSQL_INTERVAL_STRUCT SQL_INTERVAL_STRUCT;
typedef struct _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
enum SearchDirectionEnum {adSearchForward = 0x1,adSearchBackward = 0xFFFFFFFF,};
typedef struct _SecPkgContext_Sizes SecPkgContext_Sizes;
struct SharedPropertyGroup;
struct ShellDispatchInproc;
typedef struct _TAPE_GET_STATISTICS TAPE_GET_STATISTICS;
typedef struct _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
typedef struct __MIDL_IH26XVideoEffects_0002 VIDEO_EFFECT_VALUES;
typedef struct _WLX_MPR_NOTIFY_INFO WLX_MPR_NOTIFY_INFO;
enum _AM_DVD_GRAPH_FLAGS {AM_DVD_HWDEC_PREFER = 0x1,AM_DVD_HWDEC_ONLY = 0x2,AM_DVD_SWDEC_PREFER = 0x4,AM_DVD_SWDEC_ONLY = 0x8,AM_DVD_NOVPE = 0x100,};
struct _Alpha_OpLit_Format {unsigned int Rc : 5;unsigned int Function : 7;unsigned int RbvType : 1;unsigned int Literal : 8;unsigned int Ra : 5;unsigned int Opcode : 6;};
struct _Alpha_OpReg_Format {unsigned int Rc : 5;unsigned int Function : 7;unsigned int RbvType : 1;unsigned int SBZ : 3;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
union _CLIENT_CALL_RETURN {void *Pointer;int Simple;};
struct _COMM_FAULT_OFFSETS {short CommOffset;short FaultOffset;};
enum _D3DRENDERSTATETYPE {D3DRENDERSTATE_TEXTUREHANDLE = 0x1,D3DRENDERSTATE_ANTIALIAS = 0x2,D3DRENDERSTATE_TEXTUREADDRESS = 0x3,D3DRENDERSTATE_TEXTUREPERSPECTIVE = 0x4,D3DRENDERSTATE_WRAPU = 0x5,D3DRENDERSTATE_WRAPV = 0x6,D3DRENDERSTATE_ZENABLE = 0x7,D3DRENDERSTATE_FILLMODE = 0x8,D3DRENDERSTATE_SHADEMODE = 0x9,D3DRENDERSTATE_LINEPATTERN = 0xA,D3DRENDERSTATE_MONOENABLE = 0xB,D3DRENDERSTATE_ROP2 = 0xC,D3DRENDERSTATE_PLANEMASK = 0xD,D3DRENDERSTATE_ZWRITEENABLE = 0xE,D3DRENDERSTATE_ALPHATESTENABLE = 0xF,D3DRENDERSTATE_LASTPIXEL = 0x10,D3DRENDERSTATE_TEXTUREMAG = 0x11,D3DRENDERSTATE_TEXTUREMIN = 0x12,D3DRENDERSTATE_SRCBLEND = 0x13,D3DRENDERSTATE_DESTBLEND = 0x14,D3DRENDERSTATE_TEXTUREMAPBLEND = 0x15,D3DRENDERSTATE_CULLMODE = 0x16,D3DRENDERSTATE_ZFUNC = 0x17,D3DRENDERSTATE_ALPHAREF = 0x18,D3DRENDERSTATE_ALPHAFUNC = 0x19,D3DRENDERSTATE_DITHERENABLE = 0x1A,D3DRENDERSTATE_ALPHABLENDENABLE = 0x1B,D3DRENDERSTATE_FOGENABLE = 0x1C,D3DRENDERSTATE_SPECULARENABLE = 0x1D,D3DRENDERSTATE_ZVISIBLE = 0x1E,D3DRENDERSTATE_SUBPIXEL = 0x1F,D3DRENDERSTATE_SUBPIXELX = 0x20,D3DRENDERSTATE_STIPPLEDALPHA = 0x21,D3DRENDERSTATE_FOGCOLOR = 0x22,D3DRENDERSTATE_FOGTABLEMODE = 0x23,D3DRENDERSTATE_FOGTABLESTART = 0x24,D3DRENDERSTATE_FOGTABLEEND = 0x25,D3DRENDERSTATE_FOGTABLEDENSITY = 0x26,D3DRENDERSTATE_STIPPLEENABLE = 0x27,D3DRENDERSTATE_EDGEANTIALIAS = 0x28,D3DRENDERSTATE_COLORKEYENABLE = 0x29,D3DRENDERSTATE_BORDERCOLOR = 0x2B,D3DRENDERSTATE_TEXTUREADDRESSU = 0x2C,D3DRENDERSTATE_TEXTUREADDRESSV = 0x2D,D3DRENDERSTATE_MIPMAPLODBIAS = 0x2E,D3DRENDERSTATE_ZBIAS = 0x2F,D3DRENDERSTATE_RANGEFOGENABLE = 0x30,D3DRENDERSTATE_ANISOTROPY = 0x31,D3DRENDERSTATE_FLUSHBATCH = 0x32,D3DRENDERSTATE_STIPPLEPATTERN00 = 0x40,D3DRENDERSTATE_STIPPLEPATTERN01 = 0x41,D3DRENDERSTATE_STIPPLEPATTERN02 = 0x42,D3DRENDERSTATE_STIPPLEPATTERN03 = 0x43,D3DRENDERSTATE_STIPPLEPATTERN04 = 0x44,D3DRENDERSTATE_STIPPLEPATTERN05 = 0x45,D3DRENDERSTATE_STIPPLEPATTERN06 = 0x46,D3DRENDERSTATE_STIPPLEPATTERN07 = 0x47,D3DRENDERSTATE_STIPPLEPATTERN08 = 0x48,D3DRENDERSTATE_STIPPLEPATTERN09 = 0x49,D3DRENDERSTATE_STIPPLEPATTERN10 = 0x4A,D3DRENDERSTATE_STIPPLEPATTERN11 = 0x4B,D3DRENDERSTATE_STIPPLEPATTERN12 = 0x4C,D3DRENDERSTATE_STIPPLEPATTERN13 = 0x4D,D3DRENDERSTATE_STIPPLEPATTERN14 = 0x4E,D3DRENDERSTATE_STIPPLEPATTERN15 = 0x4F,D3DRENDERSTATE_STIPPLEPATTERN16 = 0x50,D3DRENDERSTATE_STIPPLEPATTERN17 = 0x51,D3DRENDERSTATE_STIPPLEPATTERN18 = 0x52,D3DRENDERSTATE_STIPPLEPATTERN19 = 0x53,D3DRENDERSTATE_STIPPLEPATTERN20 = 0x54,D3DRENDERSTATE_STIPPLEPATTERN21 = 0x55,D3DRENDERSTATE_STIPPLEPATTERN22 = 0x56,D3DRENDERSTATE_STIPPLEPATTERN23 = 0x57,D3DRENDERSTATE_STIPPLEPATTERN24 = 0x58,D3DRENDERSTATE_STIPPLEPATTERN25 = 0x59,D3DRENDERSTATE_STIPPLEPATTERN26 = 0x5A,D3DRENDERSTATE_STIPPLEPATTERN27 = 0x5B,D3DRENDERSTATE_STIPPLEPATTERN28 = 0x5C,D3DRENDERSTATE_STIPPLEPATTERN29 = 0x5D,D3DRENDERSTATE_STIPPLEPATTERN30 = 0x5E,D3DRENDERSTATE_STIPPLEPATTERN31 = 0x5F,D3DRENDERSTATE_FORCE_DWORD = 0x7FFFFFFF,};
struct _DADV_CONTROLEvents {struct _DADV_CONTROLEventsVtbl *lpVtbl;};
enum _DtcLu_CompareState {DTCLUCOMPARESTATE_COMMITTED = 0x1,DTCLUCOMPARESTATE_HEURISTICCOMMITTED = 0x2,DTCLUCOMPARESTATE_HEURISTICMIXED = 0x3,DTCLUCOMPARESTATE_HEURISTICRESET = 0x4,DTCLUCOMPARESTATE_INDOUBT = 0x5,DTCLUCOMPARESTATE_RESET = 0x6,};
enum _DtcLu_Xln_Response {DTCLUXLNRESPONSE_OK_SENDOURXLNBACK = 0x1,DTCLUXLNRESPONSE_OK_SENDCONFIRMATION = 0x2,DTCLUXLNRESPONSE_LOGNAMEMISMATCH = 0x3,DTCLUXLNRESPONSE_COLDWARMMISMATCH = 0x4,};
enum _FINDEX_INFO_LEVELS {FindExInfoStandard = 0x0,FindExInfoMaxInfoLevel = 0x1,};
enum _JOBOBJECTINFOCLASS {JobObjectBasicAccountingInformation = 0x1,JobObjectBasicLimitInformation = 0x2,JobObjectBasicProcessIdList = 0x3,JobObjectBasicUIRestrictions = 0x4,JobObjectSecurityLimitInformation = 0x5,JobObjectEndOfJobTimeInformation = 0x6,JobObjectAssociateCompletionPortInformation = 0x7,MaxJobObjectInfoClass = 0x8,};
struct _MIDL_FORMAT_STRING {short Pad;unsigned char Format[];};
enum _NET_INTERFACE_TYPE {PERMANENT = 0x0,DEMAND_DIAL = 0x1,LOCAL_WORKSTATION_DIAL = 0x2,REMOTE_WORKSTATION_DIAL = 0x3,};
enum _STORAGE_MEDIA_TYPE {DDS_4mm = 0x20,MiniQic = 0x21,Travan = 0x22,QIC = 0x23,MP_8mm = 0x24,AME_8mm = 0x25,AIT1_8mm = 0x26,DLT = 0x27,NCTP = 0x28,IBM_3480 = 0x29,IBM_3490E = 0x2A,IBM_Magstar_3590 = 0x2B,IBM_Magstar_MP = 0x2C,STK_DATA_D3 = 0x2D,SONY_DTF = 0x2E,DV_6mm = 0x2F,DMI = 0x30,SONY_D2 = 0x31,CLEANER_CARTRIDGE = 0x32,CD_ROM = 0x33,CD_R = 0x34,CD_RW = 0x35,DVD_ROM = 0x36,DVD_R = 0x37,DVD_RW = 0x38,MO_3_RW = 0x39,MO_5_WO = 0x3A,MO_5_RW = 0x3B,MO_5_LIMDOW = 0x3C,PC_5_WO = 0x3D,PC_5_RW = 0x3E,PD_5_RW = 0x3F,ABL_5_WO = 0x40,PINNACLE_APEX_5_RW = 0x41,SONY_12_WO = 0x42,PHILIPS_12_WO = 0x43,HITACHI_12_WO = 0x44,CYGNET_12_WO = 0x45,KODAK_14_WO = 0x46,MO_NFR_525 = 0x47,NIKON_12_RW = 0x48,IOMEGA_ZIP = 0x49,IOMEGA_JAZ = 0x4A,SYQUEST_EZ135 = 0x4B,SYQUEST_EZFLYER = 0x4C,SYQUEST_SYJET = 0x4D,AVATAR_F2 = 0x4E,MP2_8mm = 0x4F,};
struct linereqmakecall_tag {char szDestAddress[80];char szAppName[40];char szCalledParty[40];char szComment[80];};
struct mc_receive_and_post {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char reserv4;unsigned char rts_rcvd;unsigned char reserv5;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char *sema;unsigned char reserv6;};
struct mc_receive_and_wait {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char reserv4;unsigned char rts_rcvd;unsigned char reserv5;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char reserv6[5];};
struct mc_receive_log_data {unsigned short opcode;unsigned char opext;unsigned char reserv1;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short log_dlen;unsigned char *log_dptr;};
enum tagAMTunerEventType {AMTUNER_EVENT_CHANGED = 0x1,};
enum tagQACONTAINERFLAGS {QACONTAINER_SHOWHATCHING = 0x1,QACONTAINER_SHOWGRABHANDLES = 0x2,QACONTAINER_USERMODE = 0x4,QACONTAINER_DISPLAYASDEFAULT = 0x8,QACONTAINER_UIDEAD = 0x10,QACONTAINER_AUTOCLIP = 0x20,QACONTAINER_MESSAGEREFLECT = 0x40,QACONTAINER_SUPPORTSMNEMONICS = 0x80,};
struct tag_s_RIFFWAVE_INST;
typedef struct psid_struct type_product_set_id;
typedef struct _463E06C868FD59B527DBF787F8EA20AA AALUSER_PARAMETERS;
typedef struct _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
typedef struct _ACTRL_ACCESS_INFOA ACTRL_ACCESS_INFOA;
typedef struct _ACTRL_ACCESS_INFOW ACTRL_ACCESS_INFOW;
typedef unsigned int AFTP_SECURITY_TYPE;
struct AMMultiMediaStream;
typedef struct _AM_DVDCOPY_CHLGKEY AM_DVDCOPY_CHLGKEY;
typedef struct _AM_DVDCOPY_DISCKEY AM_DVDCOPY_DISCKEY;
typedef struct _D63E714A239F9C0D1FE2D222C2E0E7D5 AM_ExactRateChange;
typedef struct _455481A63A960E136730B1239333B9FD AVICOMPRESSOPTIONS;
typedef struct _avitcdlindex_entry AVITCDLINDEX_ENTRY;
typedef struct _Alpha_OpLit_Format Alpha_OpLit_Format;
typedef struct _Alpha_OpReg_Format Alpha_OpReg_Format;
typedef struct _BROWSER_STATISTICS BROWSER_STATISTICS;
struct CCertEncodeAltName;
typedef struct _CERT_ALT_NAME_INFO CERT_ALT_NAME_INFO;
typedef struct _CERT_POLICIES_INFO CERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS CHANGER_SET_ACCESS;
typedef struct _CHARDEVQ_INFO_1002 CHARDEVQ_INFO_1002;
typedef struct _CHARDEVQ_INFO_1003 CHARDEVQ_INFO_1003;
typedef struct tagCInterfaceStubVtbl CInterfaceStubVtbl;
typedef struct tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
typedef union _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
enum CLUSCTL_NODE_CODES {CLUSCTL_NODE_UNKNOWN = 0x4000000,CLUSCTL_NODE_GET_CHARACTERISTICS = 0x4000005,CLUSCTL_NODE_GET_FLAGS = 0x4000009,CLUSCTL_NODE_GET_NAME = 0x4000029,CLUSCTL_NODE_GET_ID = 0x4000039,CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 0x4000051,CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 0x4000055,CLUSCTL_NODE_GET_COMMON_PROPERTIES = 0x4000059,CLUSCTL_NODE_SET_COMMON_PROPERTIES = 0x440005E,CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 0x4000061,CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 0x4000079,CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 0x400007D,CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 0x4000081,CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 0x4400086,CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 0x4000089,};
enum CLUSTER_GROUP_ENUM {CLUSTER_GROUP_ENUM_CONTAINS = 0x1,CLUSTER_GROUP_ENUM_NODES = 0x2,CLUSTER_GROUP_ENUM_ALL = 0x3,};
enum CLUSTER_NODE_STATE {ClusterNodeStateUnknown = 0xFFFFFFFF,ClusterNodeUp = 0x0,ClusterNodeDown = 0x1,ClusterNodePaused = 0x2,ClusterNodeJoining = 0x3,};
typedef struct _6354F15A6C1C612C283F299C530B649A CMC_counted_string;
typedef signed int CM_DEALLOCATE_TYPE;
typedef signed int CM_ERROR_DIRECTION;
typedef signed int CM_PROCESSING_MODE;
typedef signed int CM_STATUS_RECEIVED;
typedef struct _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
typedef struct _CRYPT_CONTENT_INFO CRYPT_CONTENT_INFO;
typedef struct _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB;
struct ClusGroupResources {struct ClusGroupResourcesVtbl *lpVtbl;};
struct ConnectionEventsVt {struct ConnectionEventsVtVtbl *lpVtbl;};
enum CursorLocationEnum {adUseNone = 0x1,adUseServer = 0x2,adUseClient = 0x3,adUseClientBatch = 0x3,};
typedef struct _D3DLIGHTINGELEMENT D3DLIGHTINGELEMENT;
typedef struct _D3DPROCESSVERTICES D3DPROCESSVERTICES;
enum DBCOMMANDREUSEENUM {DBCOMMANDREUSE_NONE = 0x0,DBCOMMANDREUSE_PROPERTIES = 0x1,DBCOMMANDREUSE_PARAMETERS = 0x2,};
enum DBCOMPAREOPSENUM20 {DBCOMPAREOPS_NOTBEGINSWITH = 0x9,DBCOMPAREOPS_NOTCONTAINS = 0xA,};
typedef struct tagDBCONTENTPROXIMITY DBCONTENTPROXIMITY;
enum DBCONVERTFLAGSENUM {DBCONVERTFLAGS_COLUMN = 0x0,DBCONVERTFLAGS_PARAMETER = 0x1,};
enum DBPARAMFLAGSENUM20 {DBPARAMFLAGS_SCALEISNEGATIVE = 0x100,};
enum DBPROPSTATUSENUM21 {DBPROPSTATUS_NOTAVAILAVLE = 0x9,};
enum DBRESOURCEKINDENUM {DBRESOURCE_INVALID = 0x0,DBRESOURCE_TOTAL = 0x1,DBRESOURCE_CPU = 0x2,DBRESOURCE_MEMORY = 0x3,DBRESOURCE_DISK = 0x4,DBRESOURCE_NETWORK = 0x5,DBRESOURCE_RESPONSE = 0x6,DBRESOURCE_ROWS = 0x7,DBRESOURCE_OTHER = 0x8,};
enum DBSOURCETYPEENUM20 {DBSOURCETYPE_DATASOURCE_TDP = 0x1,DBSOURCETYPE_DATASOURCE_MDP = 0x3,};
typedef struct _DDVIDEOPORTCONNECT DDVIDEOPORTCONNECT;
typedef struct digirealwaveformat_tag DIGIREALWAVEFORMAT;
typedef struct _DIOBJECTDATAFORMAT DIOBJECTDATAFORMAT;
typedef struct dolbyac2waveformat_tag DOLBYAC2WAVEFORMAT;
typedef struct _DPLDATA_PLAYERGUID DPLDATA_PLAYERGUID;
typedef struct _DPLMSG_GETPROPERTY DPLMSG_GETPROPERTY;
typedef struct _DPLMSG_SETPROPERTY DPLMSG_SETPROPERTY;
typedef struct _7A6011D9BCD953C4A60C0773422E3F2A DPMSG_DELETEPLAYER;
typedef struct _2F1E0242A20BC17A87F654C54F0A4255 DPMSG_STARTSESSION;
typedef struct dvi_adpcmwaveformat_tag DVIADPCMWAVEFORMAT;
struct DWebBrowserEvents2 {struct DWebBrowserEvents2Vtbl *lpVtbl;};
struct DataSourceListener {struct DataSourceListenerVtbl *lpVtbl;};
struct DispIHTMLBRElement {struct DispIHTMLBRElementVtbl *lpVtbl;};
struct DispIHTMLDDElement {struct DispIHTMLDDElementVtbl *lpVtbl;};
struct DispIHTMLDTElement {struct DispIHTMLDTElementVtbl *lpVtbl;};
struct DispIHTMLFrameBase {struct DispIHTMLFrameBaseVtbl *lpVtbl;};
struct DispIHTMLHRElement {struct DispIHTMLHRElementVtbl *lpVtbl;};
struct DispIHTMLLIElement {struct DispIHTMLLIElementVtbl *lpVtbl;};
struct DispIHTMLTableCell {struct DispIHTMLTableCellVtbl *lpVtbl;};
typedef struct tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
typedef struct _ERROR_NOTIFICATION ERROR_NOTIFICATION;
typedef struct _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;
typedef struct _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
enum FieldAttributeEnum {adFldUnspecified = 0xFFFFFFFF,adFldMayDefer = 0x2,adFldUpdatable = 0x4,adFldUnknownUpdatable = 0x8,adFldFixed = 0x10,adFldIsNullable = 0x20,adFldMayBeNull = 0x40,adFldLong = 0x80,adFldRowID = 0x100,adFldRowVersion = 0x200,adFldCacheDeferred = 0x1000,adFldNegativeScale = 0x4000,adFldKeyColumn = 0x8000,};
typedef struct _GETVERSIONINPARAMS GETVERSIONINPARAMS;
typedef void ( *GLUtessEndDataProc)(void *);
typedef struct GLUtesselator GLUtriangulatorObj;
typedef struct _GROUP_USERS_INFO_0 GROUP_USERS_INFO_0;
typedef struct _GROUP_USERS_INFO_1 GROUP_USERS_INFO_1;
typedef struct tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
typedef  struct HDRVDIALOGINSTANCE__ *HDRVDIALOGINSTANCE;
typedef struct _HSE_URL_MAPEX_INFO HSE_URL_MAPEX_INFO;
struct HTMLCommentElement;
struct HTMLDocumentEvents {struct HTMLDocumentEventsVtbl *lpVtbl;};
struct HTMLIsIndexElement;
struct HTMLMarqueeElement;
struct HTMLStyleSheetRule;
struct HTMLUnknownElement;
struct IAMAudioInputMixer {struct IAMAudioInputMixerVtbl *lpVtbl;};
struct IAMExtendedSeeking {struct IAMExtendedSeekingVtbl *lpVtbl;};
struct IAMMediaTypeSample {struct IAMMediaTypeSampleVtbl *lpVtbl;};
struct IAMMediaTypeStream {struct IAMMediaTypeStreamVtbl *lpVtbl;};
struct IAMPhysicalPinInfo {struct IAMPhysicalPinInfoVtbl *lpVtbl;};
struct IAMTimecodeDisplay {struct IAMTimecodeDisplayVtbl *lpVtbl;};
struct IASQLOLEBackupSink {struct IASQLOLEBackupSinkVtbl *lpVtbl;};
struct IASQLOLEDRIDefault {struct IASQLOLEDRIDefaultVtbl *lpVtbl;};
struct IASQLOLEObjectList {struct IASQLOLEObjectListVtbl *lpVtbl;};
struct IASQLOLEPermission {struct IASQLOLEPermissionVtbl *lpVtbl;};
struct IASQLOLEServerSink {struct IASQLOLEServerSinkVtbl *lpVtbl;};
struct IActiveScriptError {struct IActiveScriptErrorVtbl *lpVtbl;};
struct IActiveScriptParse {struct IActiveScriptParseVtbl *lpVtbl;};
struct IActiveScriptStats {struct IActiveScriptStatsVtbl *lpVtbl;};
struct IAgentCtlCharacter {struct IAgentCtlCharacterVtbl *lpVtbl;};
struct IAgentCtlUserInput {struct IAgentCtlUserInputVtbl *lpVtbl;};
struct IApplicationObject {struct IApplicationObjectVtbl *lpVtbl;};
struct IAudioStreamSample {struct IAudioStreamSampleVtbl *lpVtbl;};
struct IBPCSatelliteTuner {struct IBPCSatelliteTunerVtbl *lpVtbl;};
struct ICancelMethodCalls {struct ICancelMethodCallsVtbl *lpVtbl;};
struct ICatalogCollection {struct ICatalogCollectionVtbl *lpVtbl;};
struct ICertEncodeAltName {struct ICertEncodeAltNameVtbl *lpVtbl;};
struct ICommandProperties {struct ICommandPropertiesVtbl *lpVtbl;};
struct IDBDataSourceAdmin {struct IDBDataSourceAdminVtbl *lpVtbl;};
struct IDataSourceLocator {struct IDataSourceLocatorVtbl *lpVtbl;};
struct IDirect3DMaterial2 {struct IDirect3DMaterial2Vtbl *lpVtbl;};
struct IDirect3DRMDevice2 {struct IDirect3DRMDevice2Vtbl *lpVtbl;};
struct IDirect3DRMTexture {struct IDirect3DRMTextureVtbl *lpVtbl;};
struct IDirect3DViewport2 {struct IDirect3DViewport2Vtbl *lpVtbl;};
struct IDirectDrawClipper {struct IDirectDrawClipperVtbl *lpVtbl;};
struct IDirectDrawFactory {struct IDirectDrawFactoryVtbl *lpVtbl;};
struct IDirectDrawPalette {struct IDirectDrawPaletteVtbl *lpVtbl;};
struct IDirectDrawSurface {struct IDirectDrawSurfaceVtbl *lpVtbl;};
struct IDirectInputEffect {struct IDirectInputEffectVtbl *lpVtbl;};
typedef struct IDirectPlayLobby2 IDirectPlayLobby2A;
struct IDirectSoundBuffer {struct IDirectSoundBufferVtbl *lpVtbl;};
struct IDirectSoundNotify {struct IDirectSoundNotifyVtbl *lpVtbl;};
struct IDirectoryAttrMgmt {struct IDirectoryAttrMgmtVtbl *lpVtbl;};
struct IDistributorNotify {struct IDistributorNotifyVtbl *lpVtbl;};
struct IDockingWindowSite {struct IDockingWindowSiteVtbl *lpVtbl;};
struct IDtcLuRmEnlistment {struct IDtcLuRmEnlistmentVtbl *lpVtbl;};
struct IEnumExtendedMedia {struct IEnumExtendedMediaVtbl *lpVtbl;};
struct IEnumRemoteProcess {struct IEnumRemoteProcessVtbl *lpVtbl;};
struct IExchExtUserEvents {struct IExchExtUserEventsVtbl *lpVtbl;};
struct IExchangeFavorites {struct IExchangeFavoritesVtbl *lpVtbl;};
struct IExtensionServices {struct IExtensionServicesVtbl *lpVtbl;};
struct IFullScreenVideoEx {struct IFullScreenVideoExVtbl *lpVtbl;};
struct IH26XEncodeOptions {struct IH26XEncodeOptionsVtbl *lpVtbl;};
struct IHTMLAnchorElement {struct IHTMLAnchorElementVtbl *lpVtbl;};
struct IHTMLButtonElement {struct IHTMLButtonElementVtbl *lpVtbl;};
struct IHTMLHeaderElement {struct IHTMLHeaderElementVtbl *lpVtbl;};
struct IHTMLIFrameElement {struct IHTMLIFrameElementVtbl *lpVtbl;};
struct IHTMLLegendElement {struct IHTMLLegendElementVtbl *lpVtbl;};
struct IHTMLNextIdElement {struct IHTMLNextIdElementVtbl *lpVtbl;};
struct IHTMLNoShowElement {struct IHTMLNoShowElementVtbl *lpVtbl;};
struct IHTMLObjectElement {struct IHTMLObjectElementVtbl *lpVtbl;};
struct IHTMLOptionElement {struct IHTMLOptionElementVtbl *lpVtbl;};
struct IHTMLOptionsHolder {struct IHTMLOptionsHolderVtbl *lpVtbl;};
struct IHTMLPhraseElement {struct IHTMLPhraseElementVtbl *lpVtbl;};
struct IHTMLScriptElement {struct IHTMLScriptElementVtbl *lpVtbl;};
struct IHTMLSelectElement {struct IHTMLSelectElementVtbl *lpVtbl;};
struct IHTMLStyleFontFace {struct IHTMLStyleFontFaceVtbl *lpVtbl;};
struct IHTMLTextContainer {struct IHTMLTextContainerVtbl *lpVtbl;};
typedef struct ima_adpcmwaveformat_tag IMAADPCMWAVEFORMAT;
typedef struct _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
typedef struct _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef struct _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
struct IMAPIFormContainer {struct IMAPIFormContainerVtbl *lpVtbl;};
enum IMPORT_OBJECT_TYPE {IMPORT_OBJECT_CODE = 0x0,IMPORT_OBJECT_DATA = 0x1,IMPORT_OBJECT_CONST = 0x2,};
struct IMediaStreamFilter {struct IMediaStreamFilterVtbl *lpVtbl;};
struct IMtsInstanceEvents {struct IMtsInstanceEventsVtbl *lpVtbl;};
struct IMtsResourceEvents {struct IMtsResourceEventsVtbl *lpVtbl;};
struct IMtsSecurityEvents {struct IMtsSecurityEventsVtbl *lpVtbl;};
struct IOleParentUndoUnit {struct IOleParentUndoUnitVtbl *lpVtbl;};
struct IPersistStreamInit {struct IPersistStreamInitVtbl *lpVtbl;};
struct IProvideClassInfo2 {struct IProvideClassInfo2Vtbl *lpVtbl;};
struct IRemoteArrayObject {struct IRemoteArrayObjectVtbl *lpVtbl;};
struct IRemoteClassObject {struct IRemoteClassObjectVtbl *lpVtbl;};
struct IRemoteFloatObject {struct IRemoteFloatObjectVtbl *lpVtbl;};
struct IRemoteMethodField {struct IRemoteMethodFieldVtbl *lpVtbl;};
struct IRemoteShortObject {struct IRemoteShortObjectVtbl *lpVtbl;};
struct IRemoteThreadGroup {struct IRemoteThreadGroupVtbl *lpVtbl;};
struct IRequestDictionary {struct IRequestDictionaryVtbl *lpVtbl;};
struct IRowPositionChange {struct IRowPositionChangeVtbl *lpVtbl;};
struct IRowsetExactScroll;
struct IRowsetNewRowAfter {struct IRowsetNewRowAfterVtbl *lpVtbl;};
struct IRowsetWatchNotify {struct IRowsetWatchNotifyVtbl *lpVtbl;};
struct IRowsetWatchRegion {struct IRowsetWatchRegionVtbl *lpVtbl;};
struct IRpcChannelBuffer2 {struct IRpcChannelBuffer2Vtbl *lpVtbl;};
struct IRpcChannelBuffer3 {struct IRpcChannelBuffer3Vtbl *lpVtbl;};
struct IScheduledWorkItem {struct IScheduledWorkItemVtbl *lpVtbl;};
struct ISessionProperties {struct ISessionPropertiesVtbl *lpVtbl;};
struct IShellChangeNotify {struct IShellChangeNotifyVtbl *lpVtbl;};
struct IShellExecuteHookA {struct IShellExecuteHookAVtbl *lpVtbl;};
struct IShellExecuteHookW {struct IShellExecuteHookWVtbl *lpVtbl;};
struct IShellPropSheetExt {struct IShellPropSheetExtVtbl *lpVtbl;};
struct ISilenceSuppressor {struct ISilenceSuppressorVtbl *lpVtbl;};
struct ITBasicCallControl {struct ITBasicCallControlVtbl *lpVtbl;};
struct ITCallNotification {struct ITCallNotificationVtbl *lpVtbl;};
struct ITMultiChannelCall {struct ITMultiChannelCallVtbl *lpVtbl;};
struct ITransactionExport {struct ITransactionExportVtbl *lpVtbl;};
struct ITransactionImport {struct ITransactionImportVtbl *lpVtbl;};
struct ITransactionObject {struct ITransactionObjectVtbl *lpVtbl;};
struct ITrusteeGroupAdmin {struct ITrusteeGroupAdminVtbl *lpVtbl;};
struct IVariantChangeType {struct IVariantChangeTypeVtbl *lpVtbl;};
struct IVariantDictionary {struct IVariantDictionaryVtbl *lpVtbl;};
struct IXAResourceManager {struct IXAResourceManagerVtbl *lpVtbl;};
enum IsolationLevelEnum {adXactUnspecified = 0xFFFFFFFF,adXactChaos = 0x10,adXactReadUncommitted = 0x100,adXactBrowse = 0x100,adXactCursorStability = 0x1000,adXactReadCommitted = 0x1000,adXactRepeatableRead = 0x10000,adXactSerializable = 0x100000,adXactIsolated = 0x100000,};
typedef struct lineagentgrouplist_tag LINEAGENTGROUPLIST;
typedef struct link_def_info_sect LINK_DEF_INFO_SECT;
typedef struct _8B637E45ECF54E3AF9C38EA7F99EC0BD LLC_ADAPTER_LOG_TR;
typedef union _52E42AF55B98D6DF1D491C96B8589219 LLC_DLC_LOG_BUFFER;
typedef struct _9CDBCEE1F465C05E6C1B2E3C0329570E LLC_TRANSMIT_PARMS;
typedef struct _ACCESS_INFO_1002 *LPACCESS_INFO_1002;
typedef struct tACMFILTERCHOOSEA *LPACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW *LPACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA *LPACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW *LPACMFORMATCHOOSEW;
typedef struct _ADMIN_OTHER_INFO *LPADMIN_OTHER_INFO;
typedef struct IASQLOLEDatabases *LPASQLOLEDATABASES;
typedef struct IASQLOLEDBObjects *LPASQLOLEDBOBJECTS;
typedef struct IASQLOLEExecutive *LPASQLOLEEXECUTIVE;
typedef struct IASQLOLELanguages *LPASQLOLELANGUAGES;
typedef struct IASQLOLEOperators *LPASQLOLEOPERATORS;
typedef struct IASQLOLEStdObject *LPASQLOLESTDOBJECT;
typedef struct tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;
typedef  DICONSTANTFORCE *LPCDICONSTANTFORCE;
typedef struct _tagCOLORMATCHSETUPA *LPCOLORMATCHSETUPA;
typedef struct _tagCOLORMATCHSETUPW *LPCOLORMATCHSETUPW;
typedef IContinueCallback *LPCONTINUECALLBACK;
typedef struct _D3DTRANSFORMCAPS *LPD3DTRANSFORMCAPS;
typedef struct _D3DTRANSFORMDATA *LPD3DTRANSFORMDATA;
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;
typedef struct _DFS_STORAGE_INFO *LPDFS_STORAGE_INFO;
typedef struct IDirect3DMaterial *LPDIRECT3DMATERIAL;
typedef struct IDirect3DRMDevice *LPDIRECT3DRMDEVICE;
typedef struct IDirect3DRMFrame2 *LPDIRECT3DRMFRAME2;
typedef struct IDirect3DRMObject *LPDIRECT3DRMOBJECT;
typedef struct IDirect3DRMShadow *LPDIRECT3DRMSHADOW;
typedef struct IDirect3DRMVisual *LPDIRECT3DRMVISUAL;
typedef struct IDirect3DTexture2 *LPDIRECT3DTEXTURE2;
typedef struct IDirect3DViewport *LPDIRECT3DVIEWPORT;
typedef struct IDirectDrawKernel *LPDIRECTDRAWKERNEL;
typedef struct IDirectPlayLobby2 *LPDIRECTPLAYLOBBY2;
typedef struct IDirectPlayLobby *LPDIRECTPLAYLOBBYA;
typedef IEnumCATEGORYINFO *LPENUMCATEGORYINFO;
typedef IEnumJAVAPROPERTY *LPENUMJAVAPROPERTY;
typedef struct tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;
typedef IEnumOleUndoUnits *LPENUMOLEUNDOUNITS;
typedef IEnumRemoteObject *LPENUMREMOTEOBJECT;
typedef IEnumRemoteThread *LPENUMREMOTETHREAD;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
typedef struct _HSE_VERSION_INFO *LPHSE_VERSION_INFO;
typedef struct tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;
typedef IInternetSession *LPIINTERNETSESSION;
typedef struct tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;
typedef struct linecountryentry_tag *LPLINECOUNTRYENTRY;
typedef struct linegeneratetone_tag *LPLINEGENERATETONE;
typedef struct lineproviderlist_tag *LPLINEPROVIDERLIST;
typedef struct lineproxyrequest_tag *LPLINEPROXYREQUEST;
typedef struct linereqmakecallW_tag *LPLINEREQMAKECALLW;
typedef struct linereqmediacall_tag *LPLINEREQMEDIACALL;
typedef struct IDirect3DRMFace **LPLPDIRECT3DRMFACE;
typedef struct IDirect3DRMMesh **LPLPDIRECT3DRMMESH;
typedef struct IDirect3DRMWrap **LPLPDIRECT3DRMWRAP;
typedef struct tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;
typedef IMediaPropertyBag *LPMEDIAPROPERTYBAG;
typedef struct tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;
typedef struct tagNMDATETIMECHANGE *LPNMDATETIMECHANGE;
typedef struct tagNMREBARCHILDSIZE *LPNMREBARCHILDSIZE;
typedef struct _NS_SERVICE_INFOA *LPNS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW *LPNS_SERVICE_INFOW;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef IOleCommandTarget *LPOLECOMMANDTARGET;
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef IOleInPlaceSiteEx *LPOLEINPLACESITEEX;
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef struct tagOLEUICHANGEICONA *LPOLEUICHANGEICONA;
typedef struct tagOLEUICHANGEICONW *LPOLEUICHANGEICONW;
typedef struct tagOLEUIPASTEENTRYA *LPOLEUIPASTEENTRYA;
typedef struct tagOLEUIPASTEENTRYW *LPOLEUIPASTEENTRYW;
typedef struct _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
typedef struct phoneextensionid_tag *LPPHONEEXTENSIONID;
typedef struct _PRINT_OTHER_INFO *LPPRINT_OTHER_INFO;
typedef IPropertyPageSite *LPPROPERTYPAGESITE;
typedef struct _PROPSHEETHEADERA *LPPROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW *LPPROPSHEETHEADERW;
typedef IProvideClassInfo *LPPROVIDECLASSINFO;
typedef struct _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;
typedef IRemoteArrayField *LPREMOTEARRAYFIELD;
typedef IRemoteByteObject *LPREMOTEBYTEOBJECT;
typedef IRemoteCharObject *LPREMOTECHAROBJECT;
typedef IRemoteClassField *LPREMOTECLASSFIELD;
typedef IRemoteLongObject *LPREMOTELONGOBJECT;
typedef struct _REPL_EDIR_INFO_0 *LPREPL_EDIR_INFO_0;
typedef struct _REPL_EDIR_INFO_1 *LPREPL_EDIR_INFO_1;
typedef struct _REPL_EDIR_INFO_2 *LPREPL_EDIR_INFO_2;
typedef struct _REPL_IDIR_INFO_0 *LPREPL_IDIR_INFO_0;
typedef struct _REPL_IDIR_INFO_1 *LPREPL_IDIR_INFO_1;
typedef struct _RSVP_STATUS_INFO *LPRSVP_STATUS_INFO;
typedef struct _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 *LPSCARD_T0_COMMAND;
typedef struct _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;
typedef struct _SERVER_INFO_1005 *LPSERVER_INFO_1005;
typedef struct _SERVER_INFO_1010 *LPSERVER_INFO_1010;
typedef struct _SERVER_INFO_1016 *LPSERVER_INFO_1016;
typedef struct _SERVER_INFO_1017 *LPSERVER_INFO_1017;
typedef struct _SERVER_INFO_1018 *LPSERVER_INFO_1018;
typedef struct _SERVER_INFO_1107 *LPSERVER_INFO_1107;
typedef struct _SERVER_INFO_1501 *LPSERVER_INFO_1501;
typedef struct _SERVER_INFO_1502 *LPSERVER_INFO_1502;
typedef struct _SERVER_INFO_1503 *LPSERVER_INFO_1503;
typedef struct _SERVER_INFO_1506 *LPSERVER_INFO_1506;
typedef struct _SERVER_INFO_1509 *LPSERVER_INFO_1509;
typedef struct _SERVER_INFO_1510 *LPSERVER_INFO_1510;
typedef struct _SERVER_INFO_1511 *LPSERVER_INFO_1511;
typedef struct _SERVER_INFO_1512 *LPSERVER_INFO_1512;
typedef struct _SERVER_INFO_1513 *LPSERVER_INFO_1513;
typedef struct _SERVER_INFO_1514 *LPSERVER_INFO_1514;
typedef struct _SERVER_INFO_1515 *LPSERVER_INFO_1515;
typedef struct _SERVER_INFO_1516 *LPSERVER_INFO_1516;
typedef struct _SERVER_INFO_1518 *LPSERVER_INFO_1518;
typedef struct _SERVER_INFO_1520 *LPSERVER_INFO_1520;
typedef struct _SERVER_INFO_1521 *LPSERVER_INFO_1521;
typedef struct _SERVER_INFO_1522 *LPSERVER_INFO_1522;
typedef struct _SERVER_INFO_1523 *LPSERVER_INFO_1523;
typedef struct _SERVER_INFO_1524 *LPSERVER_INFO_1524;
typedef struct _SERVER_INFO_1525 *LPSERVER_INFO_1525;
typedef struct _SERVER_INFO_1528 *LPSERVER_INFO_1528;
typedef struct _SERVER_INFO_1529 *LPSERVER_INFO_1529;
typedef struct _SERVER_INFO_1530 *LPSERVER_INFO_1530;
typedef struct _SERVER_INFO_1533 *LPSERVER_INFO_1533;
typedef struct _SERVER_INFO_1534 *LPSERVER_INFO_1534;
typedef struct _SERVER_INFO_1535 *LPSERVER_INFO_1535;
typedef struct _SERVER_INFO_1536 *LPSERVER_INFO_1536;
typedef struct _SERVER_INFO_1537 *LPSERVER_INFO_1537;
typedef struct _SERVER_INFO_1538 *LPSERVER_INFO_1538;
typedef struct _SERVER_INFO_1539 *LPSERVER_INFO_1539;
typedef struct _SERVER_INFO_1540 *LPSERVER_INFO_1540;
typedef struct _SERVER_INFO_1541 *LPSERVER_INFO_1541;
typedef struct _SERVER_INFO_1542 *LPSERVER_INFO_1542;
typedef struct _SERVER_INFO_1543 *LPSERVER_INFO_1543;
typedef struct _SERVER_INFO_1544 *LPSERVER_INFO_1544;
typedef struct _SERVER_INFO_1545 *LPSERVER_INFO_1545;
typedef struct _SERVER_INFO_1546 *LPSERVER_INFO_1546;
typedef struct _SERVER_INFO_1547 *LPSERVER_INFO_1547;
typedef struct _SERVER_INFO_1548 *LPSERVER_INFO_1548;
typedef struct _SERVER_INFO_1549 *LPSERVER_INFO_1549;
typedef struct _SERVER_INFO_1550 *LPSERVER_INFO_1550;
typedef struct _SERVER_INFO_1552 *LPSERVER_INFO_1552;
typedef struct _SERVER_INFO_1553 *LPSERVER_INFO_1553;
typedef struct _SERVER_INFO_1554 *LPSERVER_INFO_1554;
typedef struct _SERVER_INFO_1555 *LPSERVER_INFO_1555;
typedef struct _SERVER_INFO_1556 *LPSERVER_INFO_1556;
typedef struct _SERVER_INFO_1557 *LPSERVER_INFO_1557;
typedef struct _SERVER_INFO_1560 *LPSERVER_INFO_1560;
typedef struct _SERVER_INFO_1561 *LPSERVER_INFO_1561;
typedef struct _SERVER_INFO_1562 *LPSERVER_INFO_1562;
typedef struct _SERVER_INFO_1563 *LPSERVER_INFO_1563;
typedef struct _SERVER_INFO_1564 *LPSERVER_INFO_1564;
typedef struct _SERVER_INFO_1565 *LPSERVER_INFO_1565;
typedef struct _SERVER_INFO_1566 *LPSERVER_INFO_1566;
typedef struct _SERVER_INFO_1567 *LPSERVER_INFO_1567;
typedef struct _SERVER_INFO_1568 *LPSERVER_INFO_1568;
typedef struct _SERVER_INFO_1569 *LPSERVER_INFO_1569;
typedef struct _SERVER_INFO_1570 *LPSERVER_INFO_1570;
typedef struct _SERVER_INFO_1571 *LPSERVER_INFO_1571;
typedef struct _SERVER_INFO_1572 *LPSERVER_INFO_1572;
typedef struct _SERVER_INFO_1573 *LPSERVER_INFO_1573;
typedef struct _SERVER_INFO_1574 *LPSERVER_INFO_1574;
typedef struct _SERVER_INFO_1575 *LPSERVER_INFO_1575;
typedef struct _SERVER_INFO_1576 *LPSERVER_INFO_1576;
typedef struct _SERVER_INFO_1577 *LPSERVER_INFO_1577;
typedef struct _SERVER_INFO_1578 *LPSERVER_INFO_1578;
typedef struct _SERVER_INFO_1579 *LPSERVER_INFO_1579;
typedef struct _SERVER_INFO_1580 *LPSERVER_INFO_1580;
typedef struct _SERVER_INFO_1581 *LPSERVER_INFO_1581;
typedef struct _SERVER_INFO_1582 *LPSERVER_INFO_1582;
typedef struct _SERVER_INFO_1583 *LPSERVER_INFO_1583;
typedef struct _SERVER_INFO_1584 *LPSERVER_INFO_1584;
typedef struct _SERVER_INFO_1585 *LPSERVER_INFO_1585;
typedef struct _SERVER_INFO_1586 *LPSERVER_INFO_1586;
typedef struct _SERVER_INFO_1587 *LPSERVER_INFO_1587;
typedef struct _SERVER_INFO_1588 *LPSERVER_INFO_1588;
typedef struct _SERVER_INFO_1589 *LPSERVER_INFO_1589;
typedef struct _SERVER_INFO_1590 *LPSERVER_INFO_1590;
typedef struct _SERVER_INFO_1591 *LPSERVER_INFO_1591;
typedef struct _SERVER_INFO_1592 *LPSERVER_INFO_1592;
typedef struct _SERVER_INFO_1593 *LPSERVER_INFO_1593;
typedef struct _SERVER_INFO_1594 *LPSERVER_INFO_1594;
typedef struct _SERVER_INFO_1595 *LPSERVER_INFO_1595;
typedef struct _SERVER_INFO_1596 *LPSERVER_INFO_1596;
typedef struct _SESSION_INFO_502 *LPSESSION_INFO_502;
typedef struct _tagSubscriptionInfo *LPSUBSCRIPTIONINFO;
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef struct _TIME_OF_DAY_INFO *LPTIME_OF_DAY_INFO;
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef IUrlHistoryNotify *LPURLHISTORYNOTIFY;
typedef struct _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS *LPWSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN *LPWSAPROTOCOLCHAIN;
typedef struct _LSA_TRANSLATED_SID LSA_TRANSLATED_SID;
typedef struct _LSA_UNICODE_STRING LSA_UNICODE_STRING;
enum MACRO_ACTIVEOBJECT {ACTIVEOBJECT_STRONG = 0x0,ACTIVEOBJECT_WEAK = 0x1,};
enum MACRO_AGENTWARNING {AGENTWARNING_TTSENGINENOTFOUND = 270337,AGENTWARNING_ONLYCLIENT = 270338,};
enum MACRO_AVICOMPRESSF {AVICOMPRESSF_INTERLEAVE = 0x1,AVICOMPRESSF_DATARATE = 0x2,AVICOMPRESSF_KEYFRAMES = 0x4,AVICOMPRESSF_VALID = 0x8,};
enum MACRO_AVIGETFRAMEF {AVIGETFRAMEF_BESTDISPLAYFMT = 1,};
enum MACRO_BCPKEEPNULLS {BCPKEEPNULLS = 5,};
enum MACRO_BERR_GENERAL {BERR_GENERAL_FAILURE = 0xC0000080,};
enum MACRO_BLACKONWHITE {BLACKONWHITE = 1,WHITEONBLACK = 2,};
enum MACRO_BLTALIGNMENT {BLTALIGNMENT = 119,};
enum MACRO_CBEMAXSTRLEN {CBEMAXSTRLEN = 260,};
enum MACRO_CDGETNAMEORG {CDGETNAMEORG = 7500,};
enum MACRO_CERT_REQUEST {CERT_REQUEST_V1 = 0,CERT_KEYGEN_REQUEST_V1 = 0,};
enum MACRO_CERT_UNICODE {CERT_UNICODE_RDN_ERR_INDEX_MASK = 0x3FF,CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 0x16,CERT_UNICODE_ATTR_ERR_INDEX_MASK = 0x3F,CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 0x10,CERT_UNICODE_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_DIGITAL_SIGNATURE_KEY_USAGE = 0x80,CERT_NON_REPUDIATION_KEY_USAGE = 0x40,CERT_KEY_ENCIPHERMENT_KEY_USAGE = 0x20,CERT_DATA_ENCIPHERMENT_KEY_USAGE = 0x10,CERT_KEY_AGREEMENT_KEY_USAGE = 0x8,CERT_KEY_CERT_SIGN_KEY_USAGE = 0x4,CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 0x2,CERT_CRL_SIGN_KEY_USAGE = 0x2,CERT_ALT_NAME_OTHER_NAME = 0x1,CERT_ALT_NAME_RFC822_NAME = 0x2,CERT_ALT_NAME_DNS_NAME = 0x3,CERT_ALT_NAME_X400_ADDRESS = 0x4,CERT_ALT_NAME_DIRECTORY_NAME = 0x5,CERT_ALT_NAME_EDI_PARTY_NAME = 0x6,CERT_ALT_NAME_URL = 0x7,CERT_ALT_NAME_IP_ADDRESS = 0x8,CERT_ALT_NAME_REGISTERED_ID = 0x9,CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 0xFF,CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 0x10,CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_CA_SUBJECT_FLAG = 0x80,CERT_END_ENTITY_SUBJECT_FLAG = 0x40,};
enum MACRO_CFG_UPLOADTO {CFG_UPLOADTO_PCMAIL = 0x1,CFG_UPLOADTO_PROFS = 0x2,CFG_UPLOADTO_SNADS = 0x4,CFG_UPLOADTO_MCI = 0x8,CFG_UPLOADTO_X400 = 0x10,CFG_UPLOADTO_FAX = 0x40,CFG_UPLOADTO_MHS = 0x80,CFG_UPLOADTO_SMTP = 0x100,CFG_UPLOADTO_OV = 0x800,CFG_UPLOADTO_MACMAIL = 0x1000,CFG_UPLOADTO_ALL = 0x19DF,};
enum MACRO_CLASSFACTORY {CLASSFACTORY_E_FIRST = 0x80040110,CLASSFACTORY_E_LAST = 0x8004011F,CLASSFACTORY_S_FIRST = 0x40110,CLASSFACTORY_S_LAST = 0x4011F,};
enum MACRO_CLASS_SOURCE {CLASS_SOURCE_TYPE_MODULERESOURCES = 0x1,CLASS_SOURCE_TYPE_ISTORAGE = 0x2,};
enum MACRO_CLOSECHANNEL {CLOSECHANNEL = 4112,};
enum MACRO_CMSG_TRUSTED {CMSG_TRUSTED_SIGNER_FLAG = 0x1,CMSG_SIGNER_ONLY_FLAG = 0x2,CMSG_USE_SIGNER_INDEX_FLAG = 0x4,};
enum MACRO_COLORONCOLOR {COLORONCOLOR = 3,HALFTONE = 4,};
enum MACRO_CONTEXT_MENU {CONTEXT_MENU_DEFAULT = 0,CONTEXT_MENU_IMAGE = 1,CONTEXT_MENU_CONTROL = 2,CONTEXT_MENU_TABLE = 3,CONTEXT_MENU_TEXTSELECT = 4,CONTEXT_MENU_ANCHOR = 5,CONTEXT_MENU_UNKNOWN = 6,};
enum MACRO_CP_INSTALLED {CP_INSTALLED = 0x1,CP_SUPPORTED = 0x2,};
enum MACRO_CREATE_CHECK {CREATE_CHECK_DUP_STRICT = 0x1,CREATE_CHECK_DUP_LOOSE = 0x2,CREATE_REPLACE = 0x4,};
enum MACRO_CRYPT_DECODE {CRYPT_DECODE_NOCOPY_FLAG = 0x1,CRYPT_ENCODE_DECODE_NONE = 0x0,};
enum MACRO_CRYPT_FAILED {CRYPT_FAILED = 0,CRYPT_SUCCEED = 1,};
enum MACRO_CSCONFIGFLAG {CSCONFIGFLAG_BITS = 0x7,CSCONFIGFLAG_DISABLED = 0x1,CSCONFIGFLAG_DO_NOT_CREATE = 0x2,CSCONFIGFLAG_DO_NOT_START = 0x4,};
enum MACRO_CTLMSGOFFSET {CTLMSGOFFSET = 3569,};
enum MACRO_CUR_READONLY {CUR_READONLY = 1,CUR_LOCKCC = 2,CUR_OPTCC = 3,CUR_OPTCCVAL = 4,CUR_FORWARD = 0,CUR_KEYSET = -1,CUR_DYNAMIC = 1,CUR_INSENSITIVE = -2,};
enum MACRO_D3DLIGHTCAPS {D3DLIGHTCAPS_POINT = 0x1,D3DLIGHTCAPS_SPOT = 0x2,D3DLIGHTCAPS_DIRECTIONAL = 0x4,D3DLIGHTCAPS_PARALLELPOINT = 0x8,};
enum MACRO_D3DPMISCCAPS {D3DPMISCCAPS_MASKPLANES = 0x1,D3DPMISCCAPS_MASKZ = 0x2,D3DPMISCCAPS_LINEPATTERNREP = 0x4,D3DPMISCCAPS_CONFORMANT = 0x8,D3DPMISCCAPS_CULLNONE = 0x10,D3DPMISCCAPS_CULLCW = 0x20,D3DPMISCCAPS_CULLCCW = 0x40,};
enum MACRO_D3DRMRAYPICK {D3DRMRAYPICK_ONLYBOUNDINGBOXES = 1,D3DRMRAYPICK_IGNOREFURTHERPRIMITIVES = 2,D3DRMRAYPICK_INTERPOLATEUV = 4,D3DRMRAYPICK_INTERPOLATECOLOR = 8,D3DRMRAYPICK_INTERPOLATENORMAL = 16,};
enum MACRO_D3DRMXOFSAVE {D3DRMXOFSAVE_NORMALS = 1,D3DRMXOFSAVE_TEXTURECOORDINATES = 2,D3DRMXOFSAVE_MATERIALS = 4,D3DRMXOFSAVE_TEXTURENAMES = 8,D3DRMXOFSAVE_ALL = 15,D3DRMXOFSAVE_TEMPLATES = 16,D3DRMXOFSAVE_TEXTURETOPOLOGY = 32,};
enum MACRO_D3DSETSTATUS {D3DSETSTATUS_STATUS = 0x1,D3DSETSTATUS_EXTENTS = 0x2,D3DSETSTATUS_ALL = 0x3,};
enum MACRO_D3DTRANSFORM {D3DTRANSFORM_CLIPPED = 0x1,D3DTRANSFORM_UNCLIPPED = 0x2,};
enum MACRO_DAPI_MISSING {DAPI_MISSING_EXCHANGE_CP = 0x40000093,};
enum MACRO_DATETIMEBIND {DATETIMEBIND = 7,MONEYBIND = 8,};
enum MACRO_DBARITHABORT {DBARITHABORT = 6,};
enum MACRO_DBPROPVAL_AO {DBPROPVAL_AO_SEQUENTIAL = 0x0,DBPROPVAL_AO_SEQUENTIALSTORAGEOBJECTS = 0x1,DBPROPVAL_AO_RANDOM = 0x2,DBPROPVAL_BD_ROWSET = 0x0,DBPROPVAL_BD_INTRANSACTION = 0x1,DBPROPVAL_BD_XTRANSACTION = 0x2,DBPROPVAL_BD_REORGANIZATION = 0x3,};
enum MACRO_DBPROPVAL_BO {DBPROPVAL_BO_NOLOG = 0x0,DBPROPVAL_BO_NOINDEXUPDATE = 0x1,DBPROPVAL_BO_REFINTEGRITY = 0x2,DBPROPVAL_STGM_DIRECT = 0x10000,DBPROPVAL_STGM_TRANSACTED = 0x20000,DBPROPVAL_STGM_CONVERT = 0x40000,DBPROPVAL_STGM_FAILIFTHERE = 0x80000,DBPROPVAL_STGM_PRIORITY = 0x100000,DBPROPVAL_STGM_DELETEONRELEASE = 0x200000,DBPROPVAL_GB_COLLATE = 0x10,DBPROPVAL_CS_UNINITIALIZED = 0x0,DBPROPVAL_CS_INITIALIZED = 0x1,DBPROPVAL_CS_COMMUNICATIONFAILURE = 0x2,DBPROPVAL_RD_RESETALL = 0xFFFFFFFF,DBPROPVAL_OS_RESOURCEPOOLING = 0x1,DBPROPVAL_OS_TXNENLISTMENT = 0x2,DBPROPVAL_OS_CLIENTCURSOR = 0x4,DBPROPVAL_OS_ENABLEALL = 0xFFFFFFFF,DBPROPVAL_BI_CROSSROWSET = 0x1,};
enum MACRO_DBPROPVAL_DF {DBPROPVAL_DF_INITIALLY_DEFERRED = 0x1,DBPROPVAL_DF_INITIALLY_IMMEDIATE = 0x2,DBPROPVAL_DF_NOT_DEFERRABLE = 0x3,};
enum MACRO_DBSTORPROCID {DBSTORPROCID = 13,};
enum MACRO_DC_BINADJUST {DC_BINADJUST = 19,DC_EMF_COMPLIANT = 20,DC_DATATYPE_PRODUCED = 21,DC_COLLATE = 22,DC_MANUFACTURER = 23,DC_MODEL = 24,DC_COLORDEVICE = 23,DC_NUP = 24,DC_PERSONALITY = 25,DC_PRINTRATE = 26,DC_PRINTRATEUNIT = 27,};
enum MACRO_DDKERNELCAPS {DDKERNELCAPS_SKIPFIELDS = 0x1,DDKERNELCAPS_AUTOFLIP = 0x2,DDKERNELCAPS_SETSTATE = 0x4,DDKERNELCAPS_LOCK = 0x8,DDKERNELCAPS_FLIPVIDEOPORT = 0x10,DDKERNELCAPS_FLIPOVERLAY = 0x20,DDKERNELCAPS_TRANSFER_SYSMEM = 0x40,DDKERNELCAPS_TRANSFER_AGP = 0x80,DDKERNELCAPS_FIELDPOLARITY = 0x100,};
enum MACRO_DECIMAL_BASE {DECIMAL_BASE = 10,ATPROTO_BASE = 16000,};
enum MACRO_DEFAULTSCALE {DEFAULTSCALE = 0,MAXCOLNAMELEN = 30,};
enum MACRO_DEFAULT_SNMP {DEFAULT_SNMP_PORT_UDP = 161,DEFAULT_SNMP_PORT_IPX = 36879,DEFAULT_SNMPTRAP_PORT_UDP = 162,DEFAULT_SNMPTRAP_PORT_IPX = 36880,};
enum MACRO_DEREGISTERED {DEREGISTERED = 0x5,};
enum MACRO_DOUBLE_QUIET {DOUBLE_QUIET_NAN_PREFIX_HIGH = 0x7FF80000,DOUBLE_SIGNAL_NAN_PREFIX_HIGH = 0x7FF00000,DOUBLE_QUIET_NAN_VALUE_HIGH = 0xFFF80000,DOUBLE_QUIET_NAN_VALUE_LOW = 0x0,};
enum MACRO_DOWNLOADFACE {DOWNLOADFACE = 514,};
enum MACRO_DPCONNECTION {DPCONNECTION_DIRECTPLAY = 0x1,DPCONNECTION_DIRECTPLAYLOBBY = 0x2,};
enum MACRO_DPENUMGROUPS {DPENUMGROUPS_SESSION = 128,};
enum MACRO_DPPLAYERTYPE {DPPLAYERTYPE_GROUP = 0x0,DPPLAYERTYPE_PLAYER = 0x1,};
enum MACRO_DSBFREQUENCY {DSBFREQUENCY_MIN = 100,DSBFREQUENCY_MAX = 100000,DSBFREQUENCY_ORIGINAL = 0,};
enum MACRO_DTRESULTPART {DTRESULTPART = 3,};
enum MACRO_DT_MULTILINE {DT_MULTILINE = 0x1,DT_EDITABLE = 0x2,DT_REQUIRED = 0x4,DT_SET_IMMEDIATE = 0x8,DT_PASSWORD_EDIT = 0x10,DT_ACCEPT_DBCS = 0x20,DT_SET_SELECTION = 0x40,};
enum MACRO_EC_ENABLEALL {EC_ENABLEALL = 0,EC_ENABLEONE = 128,EC_DISABLE = 8,EC_QUERYWAITING = 2,};
enum MACRO_ELF_SHOWHELP {ELF_SHOWHELP = 0x1,ELF_DISABLEUPDATENOW = 0x2,ELF_DISABLEOPENSOURCE = 0x4,ELF_DISABLECHANGESOURCE = 0x8,ELF_DISABLECANCELLINK = 0x10,};
enum MACRO_ENABLEDUPLEX {ENABLEDUPLEX = 28,};
enum MACRO_ENABLE_GAMUT {ENABLE_GAMUT_CHECKING = 0x10000,};
enum MACRO_ENABLE_SMART {ENABLE_SMART = 0xD8,DISABLE_SMART = 0xD9,};
enum MACRO_ENCAPSULATED {ENCAPSULATED_POSTSCRIPT = 4116,};
enum MACRO_ENUM_CURRENT {ENUM_CURRENT_SETTINGS = 4294967295,ENUM_REGISTRY_SETTINGS = 4294967294,};
enum MACRO_ENUM_INVALID {ENUM_INVALID_PARAM = 0x10,};
enum MACRO_ENUM_MINIMUM {ENUM_MINIMUM = 1,ENUM_MAXIMUM = 4096,};
enum MACRO_ENUM_SUCCESS {ENUM_SUCCESS = 0x0,};
enum MACRO_EN_MSGFILTER {EN_MSGFILTER = 0x700,EN_REQUESTRESIZE = 0x701,EN_SELCHANGE = 0x702,EN_DROPFILES = 0x703,EN_PROTECTED = 0x704,EN_CORRECTTEXT = 0x705,EN_STOPNOUNDO = 0x706,EN_IMECHANGE = 0x707,EN_SAVECLIPBOARD = 0x708,EN_OLEOPFAILED = 0x709,EN_OBJECTPOSITIONS = 0x70A,EN_LINK = 0x70B,EN_DRAGDROPDONE = 0x70C,EN_ALIGN_LTR = 0x710,EN_ALIGN_RTL = 0x711,};
enum MACRO_ERROR_ROUTER {ERROR_ROUTER_STOPPED = 900,ERROR_ALREADY_CONNECTED = 901,ERROR_UNKNOWN_PROTOCOL_ID = 902,ERROR_DDM_NOT_RUNNING = 903,ERROR_INTERFACE_ALREADY_EXISTS = 904,ERROR_NO_SUCH_INTERFACE = 905,ERROR_INTERFACE_NOT_CONNECTED = 906,ERROR_PROTOCOL_STOP_PENDING = 907,ERROR_INTERFACE_CONNECTED = 908,ERROR_NO_INTERFACE_CREDENTIALS_SET = 909,ERROR_ALREADY_CONNECTING = 910,ERROR_UPDATE_IN_PROGRESS = 911,ERROR_INTERFACE_CONFIGURATION = 912,ERROR_NOT_CLIENT_PORT = 913,ERROR_NOT_ROUTER_PORT = 914,ERROR_CLIENT_INTERFACE_ALREADY_EXISTS = 915,ERROR_INTERFACE_DISABLED = 916,ERROR_AUTH_PROTOCOL_REJECTED = 917,ERROR_NO_AUTH_PROTOCOL_AVAILABLE = 918,ERROR_PEER_REFUSED_AUTH = 919,ERROR_REMOTE_NO_DIALIN_PERMISSION = 920,ERROR_REMOTE_PASSWD_EXPIRED = 921,ERROR_REMOTE_ACCT_DISABLED = 922,ERROR_REMOTE_RESTRICTED_LOGON_HOURS = 923,ERROR_REMOTE_AUTHENTICATION_FAILURE = 924,ERROR_INTERFACE_HAS_NO_DEVICES = 925,ERROR_IDLE_DISCONNECTED = 926,ERROR_INTERFACE_UNREACHABLE = 927,ERROR_SERVICE_IS_PAUSED = 928,ERROR_INTERFACE_DISCONNECTED = 929,ERROR_AUTH_SERVER_TIMEOUT = 930,ERROR_PORT_LIMIT_REACHED = 931,ERROR_PPP_SESSION_TIMEOUT = 932,ERROR_MAX_LAN_INTERFACE_LIMIT = 933,ERROR_MAX_WAN_INTERFACE_LIMIT = 934,ERROR_MAX_CLIENT_INTERFACE_LIMIT = 935,ERROR_BAP_DISCONNECTED = 936,ERROR_ONE_USER_LIMIT = 937,ERROR_NO_RADIUS_SERVERS = 938,ERROR_INVALID_RADIUS_RESPONSE = 939,};
enum MACRO_ERROR_SERVER {ERROR_SERVER = 14,ERROR_LOCAL_FAILURE = 15,};
enum MACRO_FACILITY_EDK {FACILITY_EDK = 11,};
enum MACRO_FACILITY_ITF {FACILITY_ITF = 0x4,};
enum MACRO_FILTERCHOOSE {FILTERCHOOSE_MESSAGE = 0,FILTERCHOOSE_FILTERTAG_VERIFY = 0,FILTERCHOOSE_FILTER_VERIFY = 1,FILTERCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_FORCE_SUBMIT {FORCE_SUBMIT = 0x1,};
enum MACRO_FORMATCHOOSE {FORMATCHOOSE_MESSAGE = 0,FORMATCHOOSE_FORMATTAG_VERIFY = 0,FORMATCHOOSE_FORMAT_VERIFY = 1,FORMATCHOOSE_CUSTOM_VERIFY = 2,};
enum MACRO_FR_MATCHDIAC {FR_MATCHDIAC = 0x20000000,FR_MATCHKASHIDA = 0x40000000,FR_MATCHALEFHAMZA = 0x80000000,};
enum MACRO_GETTECHNOLGY {GETTECHNOLGY = 20,};
enum MACRO_HWND_DESKTOP {HWND_DESKTOP = 0,};
enum MACRO_ICDECOMPRESS {ICDECOMPRESS_HURRYUP = 0x80000000,ICDECOMPRESS_UPDATE = 0x40000000,ICDECOMPRESS_PREROLL = 0x20000000,ICDECOMPRESS_NULLFRAME = 0x10000000,ICDECOMPRESS_NOTKEYFRAME = 0x8000000,};
enum MACRO_IDD_FILEOPEN {IDD_FILEOPEN = 32253,};
enum MACRO_ID_OLEUIHELP {ID_OLEUIHELP = 99,ID_STATIC = 98,};
enum MACRO_IMAGE_BITMAP {IMAGE_BITMAP = 0,IMAGE_ICON = 1,IMAGE_CURSOR = 2,IMAGE_ENHMETAFILE = 3,};
enum MACRO_IMAGE_SIZEOF {IMAGE_SIZEOF_AUX_SYMBOL = 18,IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY = 2,IMAGE_COMDAT_SELECT_SAME_SIZE = 3,IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,IMAGE_COMDAT_SELECT_LARGEST = 6,IMAGE_COMDAT_SELECT_NEWEST = 7,IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2,IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3,IMAGE_SIZEOF_RELOCATION = 10,IMAGE_REL_I386_ABSOLUTE = 0,IMAGE_REL_I386_DIR16 = 1,IMAGE_REL_I386_REL16 = 2,IMAGE_REL_I386_DIR32 = 6,IMAGE_REL_I386_DIR32NB = 7,IMAGE_REL_I386_SEG12 = 9,IMAGE_REL_I386_SECTION = 10,IMAGE_REL_I386_SECREL = 11,IMAGE_REL_I386_REL32 = 20,IMAGE_REL_MIPS_ABSOLUTE = 0,IMAGE_REL_MIPS_REFHALF = 1,IMAGE_REL_MIPS_REFWORD = 2,IMAGE_REL_MIPS_JMPADDR = 3,IMAGE_REL_MIPS_REFHI = 4,IMAGE_REL_MIPS_REFLO = 5,IMAGE_REL_MIPS_GPREL = 6,IMAGE_REL_MIPS_LITERAL = 7,IMAGE_REL_MIPS_SECTION = 10,IMAGE_REL_MIPS_SECREL = 11,IMAGE_REL_MIPS_SECRELLO = 12,IMAGE_REL_MIPS_SECRELHI = 13,IMAGE_REL_MIPS_JMPADDR16 = 16,IMAGE_REL_MIPS_REFWORDNB = 34,IMAGE_REL_MIPS_PAIR = 37,IMAGE_REL_ALPHA_ABSOLUTE = 0,IMAGE_REL_ALPHA_REFLONG = 1,IMAGE_REL_ALPHA_REFQUAD = 2,IMAGE_REL_ALPHA_GPREL32 = 3,IMAGE_REL_ALPHA_LITERAL = 4,IMAGE_REL_ALPHA_LITUSE = 5,IMAGE_REL_ALPHA_GPDISP = 6,IMAGE_REL_ALPHA_BRADDR = 7,IMAGE_REL_ALPHA_HINT = 8,IMAGE_REL_ALPHA_INLINE_REFLONG = 9,IMAGE_REL_ALPHA_REFHI = 10,IMAGE_REL_ALPHA_REFLO = 11,IMAGE_REL_ALPHA_PAIR = 12,IMAGE_REL_ALPHA_MATCH = 13,IMAGE_REL_ALPHA_SECTION = 14,IMAGE_REL_ALPHA_SECREL = 15,IMAGE_REL_ALPHA_REFLONGNB = 16,IMAGE_REL_ALPHA_SECRELLO = 17,IMAGE_REL_ALPHA_SECRELHI = 18,IMAGE_REL_ALPHA_REFQ3 = 19,IMAGE_REL_ALPHA_REFQ2 = 20,IMAGE_REL_ALPHA_REFQ1 = 21,IMAGE_REL_ALPHA_GPRELLO = 22,IMAGE_REL_ALPHA_GPRELHI = 23,IMAGE_REL_PPC_ABSOLUTE = 0,IMAGE_REL_PPC_ADDR64 = 1,IMAGE_REL_PPC_ADDR32 = 2,IMAGE_REL_PPC_ADDR24 = 3,IMAGE_REL_PPC_ADDR16 = 4,IMAGE_REL_PPC_ADDR14 = 5,IMAGE_REL_PPC_REL24 = 6,IMAGE_REL_PPC_REL14 = 7,IMAGE_REL_PPC_TOCREL16 = 8,IMAGE_REL_PPC_TOCREL14 = 9,IMAGE_REL_PPC_ADDR32NB = 10,IMAGE_REL_PPC_SECREL = 11,IMAGE_REL_PPC_SECTION = 12,IMAGE_REL_PPC_IFGLUE = 13,IMAGE_REL_PPC_IMGLUE = 14,IMAGE_REL_PPC_SECREL16 = 15,IMAGE_REL_PPC_REFHI = 16,IMAGE_REL_PPC_REFLO = 17,IMAGE_REL_PPC_PAIR = 18,IMAGE_REL_PPC_SECRELLO = 19,IMAGE_REL_PPC_SECRELHI = 20,IMAGE_REL_PPC_GPREL = 21,IMAGE_REL_PPC_TYPEMASK = 255,IMAGE_REL_PPC_NEG = 256,IMAGE_REL_PPC_BRTAKEN = 512,IMAGE_REL_PPC_BRNTAKEN = 1024,IMAGE_REL_PPC_TOCDEFN = 2048,IMAGE_REL_SH3_ABSOLUTE = 0,IMAGE_REL_SH3_DIRECT16 = 1,IMAGE_REL_SH3_DIRECT32 = 2,IMAGE_REL_SH3_DIRECT8 = 3,IMAGE_REL_SH3_DIRECT8_WORD = 4,IMAGE_REL_SH3_DIRECT8_LONG = 5,IMAGE_REL_SH3_DIRECT4 = 6,IMAGE_REL_SH3_DIRECT4_WORD = 7,IMAGE_REL_SH3_DIRECT4_LONG = 8,IMAGE_REL_SH3_PCREL8_WORD = 9,IMAGE_REL_SH3_PCREL8_LONG = 10,IMAGE_REL_SH3_PCREL12_WORD = 11,IMAGE_REL_SH3_STARTOF_SECTION = 12,IMAGE_REL_SH3_SIZEOF_SECTION = 13,IMAGE_REL_SH3_SECTION = 14,IMAGE_REL_SH3_SECREL = 15,IMAGE_REL_SH3_DIRECT32_NB = 16,IMAGE_REL_ARM_ABSOLUTE = 0,IMAGE_REL_ARM_ADDR32 = 1,IMAGE_REL_ARM_ADDR32NB = 2,IMAGE_REL_ARM_BRANCH24 = 3,IMAGE_REL_ARM_BRANCH11 = 4,IMAGE_REL_ARM_SECTION = 14,IMAGE_REL_ARM_SECREL = 15,IMAGE_REL_IA64_ABSOLUTE = 0,IMAGE_REL_IA64_IMM14 = 1,IMAGE_REL_IA64_IMM22 = 2,IMAGE_REL_IA64_IMM64 = 3,IMAGE_REL_IA64_DIR32 = 4,IMAGE_REL_IA64_DIR64 = 5,IMAGE_REL_IA64_PCREL21B = 6,IMAGE_REL_IA64_PCREL21M = 7,IMAGE_REL_IA64_PCREL21F = 8,IMAGE_REL_IA64_GPREL22 = 9,IMAGE_REL_IA64_LTOFF22 = 10,IMAGE_REL_IA64_SECTION = 11,IMAGE_REL_IA64_SECREL22 = 12,IMAGE_REL_IA64_SECREL64I = 13,IMAGE_REL_IA64_SECREL32 = 14,IMAGE_REL_IA64_LTOFF64 = 15,IMAGE_REL_IA64_DIR32NB = 16,IMAGE_REL_IA64_RESERVED_11 = 17,IMAGE_REL_IA64_RESERVED_12 = 18,IMAGE_REL_IA64_RESERVED_13 = 19,IMAGE_REL_IA64_RESERVED_14 = 20,IMAGE_REL_IA64_RESERVED_15 = 21,IMAGE_REL_IA64_RESERVED_16 = 22,IMAGE_REL_IA64_ADDEND = 31,IMAGE_SIZEOF_LINENUMBER = 6,IMAGE_SIZEOF_BASE_RELOCATION = 8,IMAGE_REL_BASED_ABSOLUTE = 0,IMAGE_REL_BASED_HIGH = 1,IMAGE_REL_BASED_LOW = 2,IMAGE_REL_BASED_HIGHLOW = 3,IMAGE_REL_BASED_HIGHADJ = 4,IMAGE_REL_BASED_MIPS_JMPADDR = 5,IMAGE_REL_BASED_SECTION = 6,IMAGE_REL_BASED_REL32 = 7,IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,IMAGE_REL_BASED_IA64_IMM64 = 9,IMAGE_REL_BASED_DIR64 = 10,IMAGE_REL_BASED_HIGH3ADJ = 11,IMAGE_ARCHIVE_START_SIZE = 8,IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60,IMAGE_ORDINAL_FLAG64 = -9223372036854775808,IMAGE_ORDINAL_FLAG32 = -2147483648,IMAGE_ORDINAL_FLAG = -2147483648,IMAGE_RESOURCE_NAME_IS_STRING = -2147483648,IMAGE_RESOURCE_DATA_IS_DIRECTORY = -2147483648,IMAGE_DEBUG_TYPE_UNKNOWN = 0,IMAGE_DEBUG_TYPE_COFF = 1,IMAGE_DEBUG_TYPE_CODEVIEW = 2,IMAGE_DEBUG_TYPE_FPO = 3,IMAGE_DEBUG_TYPE_MISC = 4,IMAGE_DEBUG_TYPE_EXCEPTION = 5,IMAGE_DEBUG_TYPE_FIXUP = 6,IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7,IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,IMAGE_DEBUG_TYPE_BORLAND = 9,IMAGE_DEBUG_TYPE_RESERVED10 = 10,};
enum MACRO_IMPLTYPEFLAG {IMPLTYPEFLAG_FDEFAULT = 0x1,IMPLTYPEFLAG_FSOURCE = 0x2,IMPLTYPEFLAG_FRESTRICTED = 0x4,IMPLTYPEFLAG_FDEFAULTVTABLE = 0x8,};
enum MACRO_INVALID_ATOM {INVALID_ATOM = 0,};
enum MACRO_IOCTL_SERIAL {IOCTL_SERIAL_LSRMST_INSERT = 1769596,};
enum MACRO_IPX_PROTOCOL {IPX_PROTOCOL_BASE = 0x1FFFF,IPX_PROTOCOL_RIP = 0x20000,IPX_PROTOCOL_SAP = 0x20001,IPX_PROTOCOL_NLSP = 0x20002,};
enum MACRO_JPEG_PROCESS {JPEG_PROCESS_BASELINE = 0,};
enum MACRO_KSDATAFORMAT {KSDATAFORMAT_BIT_TEMPORAL_COMPRESSION = 0,KSDATAFORMAT_TEMPORAL_COMPRESSION = 1,};
enum MACRO_LINEBUSYMODE {LINEBUSYMODE_STATION = 0x1,LINEBUSYMODE_TRUNK = 0x2,LINEBUSYMODE_UNKNOWN = 0x4,LINEBUSYMODE_UNAVAIL = 0x8,};
enum MACRO_LINEDEVSTATE {LINEDEVSTATE_OTHER = 0x1,LINEDEVSTATE_RINGING = 0x2,LINEDEVSTATE_CONNECTED = 0x4,LINEDEVSTATE_DISCONNECTED = 0x8,LINEDEVSTATE_MSGWAITON = 0x10,LINEDEVSTATE_MSGWAITOFF = 0x20,LINEDEVSTATE_INSERVICE = 0x40,LINEDEVSTATE_OUTOFSERVICE = 0x80,LINEDEVSTATE_MAINTENANCE = 0x100,LINEDEVSTATE_OPEN = 0x200,LINEDEVSTATE_CLOSE = 0x400,LINEDEVSTATE_NUMCALLS = 0x800,LINEDEVSTATE_NUMCOMPLETIONS = 0x1000,LINEDEVSTATE_TERMINALS = 0x2000,LINEDEVSTATE_ROAMMODE = 0x4000,LINEDEVSTATE_BATTERY = 0x8000,LINEDEVSTATE_SIGNAL = 0x10000,LINEDEVSTATE_DEVSPECIFIC = 0x20000,LINEDEVSTATE_REINIT = 0x40000,LINEDEVSTATE_LOCK = 0x80000,LINEDEVSTATE_CAPSCHANGE = 0x100000,LINEDEVSTATE_CONFIGCHANGE = 0x200000,LINEDEVSTATE_TRANSLATECHANGE = 0x400000,LINEDEVSTATE_COMPLCANCEL = 0x800000,LINEDEVSTATE_REMOVED = 0x1000000,};
enum MACRO_LINEPARKMODE {LINEPARKMODE_DIRECTED = 0x1,LINEPARKMODE_NONDIRECTED = 0x2,};
enum MACRO_LINEROAMMODE {LINEROAMMODE_UNKNOWN = 0x1,LINEROAMMODE_UNAVAIL = 0x2,LINEROAMMODE_HOME = 0x4,LINEROAMMODE_ROAMA = 0x8,LINEROAMMODE_ROAMB = 0x10,};
enum MACRO_LINETERMMODE {LINETERMMODE_BUTTONS = 0x1,LINETERMMODE_LAMPS = 0x2,LINETERMMODE_DISPLAY = 0x4,LINETERMMODE_RINGER = 0x8,LINETERMMODE_HOOKSWITCH = 0x10,LINETERMMODE_MEDIATOLINE = 0x20,LINETERMMODE_MEDIAFROMLINE = 0x40,LINETERMMODE_MEDIABIDIRECT = 0x80,};
enum MACRO_LINETONEMODE {LINETONEMODE_CUSTOM = 0x1,LINETONEMODE_RINGBACK = 0x2,LINETONEMODE_BUSY = 0x4,LINETONEMODE_BEEP = 0x8,LINETONEMODE_BILLING = 0x10,};
enum MACRO_LINE_NEWCALL {LINE_NEWCALL = 500,LINE_CALLDEVSPECIFIC = 501,LINE_CALLDEVSPECIFICFEATURE = 502,LINE_CREATEDIALOGINSTANCE = 503,LINE_SENDDIALOGINSTANCEDATA = 504,};
enum MACRO_LM20_PATHLEN {LM20_PATHLEN = 256,};
enum MACRO_LM20_SERVICE {LM20_SERVICE_ACTIVE = 0x0,LM20_SERVICE_CONTINUE_PENDING = 0x4,LM20_SERVICE_PAUSE_PENDING = 0x8,LM20_SERVICE_PAUSED = 0xC,};
enum MACRO_LM20_STXTLEN {LM20_STXTLEN = 63,};
enum MACRO_LVM_FINDITEM {LVM_FINDITEM = 4109,};
enum MACRO_MAPI_ENABLED {MAPI_ENABLED = 0x0,MAPI_DISABLED = 0x1,};
enum MACRO_MAPI_MESSAGE {MAPI_MESSAGE_BEHAVIOR_IPM = 0,MAPI_MESSAGE_BEHAVIOR_FOLDER = 1,};
enum MACRO_MAXBQUALSIZE {MAXBQUALSIZE = 64,};
enum MACRO_MAXCOMMENTSZ {MAXCOMMENTSZ = 256,};
enum MACRO_MAXGTRIDSIZE {MAXGTRIDSIZE = 64,};
enum MACRO_MAXIMUM_ATTR {MAXIMUM_ATTR_STRING_LENGTH = 32,MAXIMUM_SMARTCARD_READERS = 10,};
enum MACRO_MAXOBJIDSIZE {MAXOBJIDSIZE = 128,};
enum MACRO_MAXPROPPAGES {MAXPROPPAGES = 100,};
enum MACRO_MAXTABLENAME {MAXTABLENAME = 30,};
enum MACRO_MAX_MONITORS {MAX_MONITORS = 4,};
enum MACRO_MAX_PROTOCOL {MAX_PROTOCOL_CHAIN = 7,};
enum MACRO_MAX_SITENAME {MAX_SITENAME_LEN = 128,};
enum MACRO_MCM_SETTODAY {MCM_SETTODAY = 4108,MCM_GETTODAY = 4109,MCM_HITTEST = 4110,};
enum MACRO_MESSAGE_MOVE {MESSAGE_MOVE = 0x1,MESSAGE_DIALOG = 0x2,};
enum MACRO_MIM_MOREDATA {MIM_MOREDATA = 972,};
enum MACRO_MIXERCONTROL {MIXERCONTROL_CONTROLF_UNIFORM = 0x1,MIXERCONTROL_CONTROLF_MULTIPLE = 0x2,MIXERCONTROL_CONTROLF_DISABLED = 0x80000000,MIXERCONTROL_CT_CLASS_MASK = 0xF0000000,MIXERCONTROL_CT_CLASS_CUSTOM = 0x0,MIXERCONTROL_CT_CLASS_METER = 0x10000000,MIXERCONTROL_CT_CLASS_SWITCH = 0x20000000,MIXERCONTROL_CT_CLASS_NUMBER = 0x30000000,MIXERCONTROL_CT_CLASS_SLIDER = 0x40000000,MIXERCONTROL_CT_CLASS_FADER = 0x50000000,MIXERCONTROL_CT_CLASS_TIME = 0x60000000,MIXERCONTROL_CT_CLASS_LIST = 0x70000000,MIXERCONTROL_CT_SUBCLASS_MASK = 0xF000000,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0x0,MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0x1000000,MIXERCONTROL_CT_SC_METER_POLLED = 0x0,MIXERCONTROL_CT_SC_TIME_MICROSECS = 0x0,MIXERCONTROL_CT_SC_TIME_MILLISECS = 0x1000000,MIXERCONTROL_CT_SC_LIST_SINGLE = 0x0,MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0x1000000,MIXERCONTROL_CT_UNITS_MASK = 0xFF0000,MIXERCONTROL_CT_UNITS_CUSTOM = 0x0,MIXERCONTROL_CT_UNITS_BOOLEAN = 0x10000,MIXERCONTROL_CT_UNITS_SIGNED = 0x20000,MIXERCONTROL_CT_UNITS_UNSIGNED = 0x30000,MIXERCONTROL_CT_UNITS_DECIBELS = 0x40000,MIXERCONTROL_CT_UNITS_PERCENT = 0x50000,MIXERCONTROL_CONTROLTYPE_CUSTOM = 0x0,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 0x10010000,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 0x10020000,MIXERCONTROL_CONTROLTYPE_PEAKMETER = 0x10020001,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 0x10030000,MIXERCONTROL_CONTROLTYPE_BOOLEAN = 0x20010000,MIXERCONTROL_CONTROLTYPE_ONOFF = 0x20010001,MIXERCONTROL_CONTROLTYPE_MUTE = 0x20010002,MIXERCONTROL_CONTROLTYPE_MONO = 0x20010003,MIXERCONTROL_CONTROLTYPE_LOUDNESS = 0x20010004,MIXERCONTROL_CONTROLTYPE_STEREOENH = 0x20010005,MIXERCONTROL_CONTROLTYPE_BUTTON = 0x21010000,MIXERCONTROL_CONTROLTYPE_DECIBELS = 0x30040000,MIXERCONTROL_CONTROLTYPE_SIGNED = 0x30020000,MIXERCONTROL_CONTROLTYPE_UNSIGNED = 0x30030000,MIXERCONTROL_CONTROLTYPE_PERCENT = 0x30050000,MIXERCONTROL_CONTROLTYPE_SLIDER = 0x40020000,MIXERCONTROL_CONTROLTYPE_PAN = 0x40020001,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 0x40020002,MIXERCONTROL_CONTROLTYPE_FADER = 0x50030000,MIXERCONTROL_CONTROLTYPE_VOLUME = 0x50030001,MIXERCONTROL_CONTROLTYPE_BASS = 0x50030002,MIXERCONTROL_CONTROLTYPE_TREBLE = 0x50030003,MIXERCONTROL_CONTROLTYPE_EQUALIZER = 0x50030004,MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 0x70010000,MIXERCONTROL_CONTROLTYPE_MUX = 0x70010001,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 0x71010000,MIXERCONTROL_CONTROLTYPE_MIXER = 0x71010001,MIXERCONTROL_CONTROLTYPE_MICROTIME = 0x60030000,MIXERCONTROL_CONTROLTYPE_MILLITIME = 0x61030000,};
enum MACRO_MM_MICROSOFT {MM_MICROSOFT = 1,MM_CREATIVE = 2,MM_MEDIAVISION = 3,MM_FUJITSU = 4,MM_ARTISOFT = 20,MM_TURTLE_BEACH = 21,MM_IBM = 22,MM_VOCALTEC = 23,MM_ROLAND = 24,MM_DSP_SOLUTIONS = 25,MM_NEC = 26,MM_ATI = 27,MM_WANGLABS = 28,MM_TANDY = 29,MM_VOYETRA = 30,MM_ANTEX = 31,MM_ICL_PS = 32,MM_INTEL = 33,MM_GRAVIS = 34,MM_VAL = 35,MM_INTERACTIVE = 36,MM_YAMAHA = 37,MM_EVEREX = 38,MM_ECHO = 39,MM_SIERRA = 40,MM_CAT = 41,MM_APPS = 42,MM_DSP_GROUP = 43,MM_MELABS = 44,MM_COMPUTER_FRIENDS = 45,MM_ESS = 46,MM_AUDIOFILE = 47,MM_MOTOROLA = 48,MM_CANOPUS = 49,MM_EPSON = 50,MM_TRUEVISION = 51,MM_AZTECH = 52,MM_VIDEOLOGIC = 53,MM_SCALACS = 54,MM_KORG = 55,MM_APT = 56,MM_ICS = 57,MM_ITERATEDSYS = 58,MM_METHEUS = 59,MM_LOGITECH = 60,MM_WINNOV = 61,MM_NCR = 62,MM_EXAN = 63,MM_AST = 64,MM_WILLOWPOND = 65,MM_SONICFOUNDRY = 66,MM_VITEC = 67,MM_MOSCOM = 68,MM_SILICONSOFT = 69,MM_SUPERMAC = 73,MM_AUDIOPT = 74,MM_SPEECHCOMP = 76,MM_AHEAD = 77,MM_DOLBY = 78,MM_OKI = 79,MM_AURAVISION = 80,MM_OLIVETTI = 81,MM_IOMAGIC = 82,MM_MATSUSHITA = 83,MM_CONTROLRES = 84,MM_XEBEC = 85,MM_NEWMEDIA = 86,MM_NMS = 87,MM_LYRRUS = 88,MM_COMPUSIC = 89,MM_OPTI = 90,MM_ADLACC = 91,MM_COMPAQ = 92,MM_DIALOGIC = 93,MM_INSOFT = 94,MM_MPTUS = 95,MM_WEITEK = 96,MM_LERNOUT_AND_HAUSPIE = 97,MM_QCIAR = 98,MM_APPLE = 99,MM_DIGITAL = 100,MM_MOTU = 101,MM_WORKBIT = 102,MM_OSITECH = 103,MM_MIRO = 104,MM_CIRRUSLOGIC = 105,MM_ISOLUTION = 106,MM_HORIZONS = 107,MM_CONCEPTS = 108,MM_VTG = 109,MM_RADIUS = 110,MM_ROCKWELL = 111,MM_XYz = 112,MM_OPCODE = 113,MM_VOXWARE = 114,MM_NORTHERN_TELECOM = 115,MM_APICOM = 116,MM_GRANDE = 117,MM_ADDX = 118,MM_WILDCAT = 119,MM_RHETOREX = 120,MM_BROOKTREE = 121,MM_ENSONIQ = 125,MM_FAST = 126,MM_NVIDIA = 127,MM_OKSORI = 128,MM_DIACOUSTICS = 129,MM_GULBRANSEN = 130,MM_KAY_ELEMETRICS = 131,MM_CRYSTAL = 132,MM_SPLASH_STUDIOS = 133,MM_QUARTERDECK = 134,MM_TDK = 135,MM_DIGITAL_AUDIO_LABS = 136,MM_SEERSYS = 137,MM_PICTURETEL = 138,MM_ATT_MICROELECTRONICS = 139,MM_OSPREY = 140,MM_MEDIATRIX = 141,MM_SOUNDESIGNS = 142,MM_ALDIGITAL = 143,MM_SPECTRUM_SIGNAL_PROCESSING = 144,MM_ECS = 145,MM_AMD = 146,MM_COREDYNAMICS = 147,MM_CANAM = 148,MM_SOFTSOUND = 149,MM_NORRIS = 150,MM_DDD = 151,MM_EUPHONICS = 152,MM_PRECEPT = 153,MM_CRYSTAL_NET = 154,MM_CHROMATIC = 155,MM_VOICEINFO = 156,MM_VIENNASYS = 157,MM_CONNECTIX = 158,MM_GADGETLABS = 159,MM_FRONTIER = 160,MM_VIONA = 161,MM_CASIO = 162,MM_DIAMONDMM = 163,MM_S3 = 164,MM_FRAUNHOFER_IIS = 172,MM_MIDI_MAPPER = 1,MM_WAVE_MAPPER = 2,MM_SNDBLST_MIDIOUT = 3,MM_SNDBLST_MIDIIN = 4,MM_SNDBLST_SYNTH = 5,MM_SNDBLST_WAVEOUT = 6,MM_SNDBLST_WAVEIN = 7,MM_ADLIB = 9,MM_MPU401_MIDIOUT = 10,MM_MPU401_MIDIIN = 11,MM_PC_JOYSTICK = 12,MM_PCSPEAKER_WAVEOUT = 13,MM_MSFT_WSS_WAVEIN = 14,MM_MSFT_WSS_WAVEOUT = 15,MM_MSFT_WSS_FMSYNTH_STEREO = 16,MM_MSFT_WSS_MIXER = 17,MM_MSFT_WSS_OEM_WAVEIN = 18,MM_MSFT_WSS_OEM_WAVEOUT = 19,MM_MSFT_WSS_OEM_FMSYNTH_STEREO = 20,MM_MSFT_WSS_AUX = 21,MM_MSFT_WSS_OEM_AUX = 22,MM_MSFT_GENERIC_WAVEIN = 23,MM_MSFT_GENERIC_WAVEOUT = 24,MM_MSFT_GENERIC_MIDIIN = 25,MM_MSFT_GENERIC_MIDIOUT = 26,MM_MSFT_GENERIC_MIDISYNTH = 27,MM_MSFT_GENERIC_AUX_LINE = 28,MM_MSFT_GENERIC_AUX_MIC = 29,MM_MSFT_GENERIC_AUX_CD = 30,MM_MSFT_WSS_OEM_MIXER = 31,MM_MSFT_MSACM = 32,MM_MSFT_ACM_MSADPCM = 33,MM_MSFT_ACM_IMAADPCM = 34,MM_MSFT_ACM_MSFILTER = 35,MM_MSFT_ACM_GSM610 = 36,MM_MSFT_ACM_G711 = 37,MM_MSFT_ACM_PCM = 38,MM_WSS_SB16_WAVEIN = 39,MM_WSS_SB16_WAVEOUT = 40,MM_WSS_SB16_MIDIIN = 41,MM_WSS_SB16_MIDIOUT = 42,MM_WSS_SB16_SYNTH = 43,MM_WSS_SB16_AUX_LINE = 44,MM_WSS_SB16_AUX_CD = 45,MM_WSS_SB16_MIXER = 46,MM_WSS_SBPRO_WAVEIN = 47,MM_WSS_SBPRO_WAVEOUT = 48,MM_WSS_SBPRO_MIDIIN = 49,MM_WSS_SBPRO_MIDIOUT = 50,MM_WSS_SBPRO_SYNTH = 51,MM_WSS_SBPRO_AUX_LINE = 52,MM_WSS_SBPRO_AUX_CD = 53,MM_WSS_SBPRO_MIXER = 54,MM_MSFT_WSS_NT_WAVEIN = 55,MM_MSFT_WSS_NT_WAVEOUT = 56,MM_MSFT_WSS_NT_FMSYNTH_STEREO = 57,MM_MSFT_WSS_NT_MIXER = 58,MM_MSFT_WSS_NT_AUX = 59,MM_MSFT_SB16_WAVEIN = 60,MM_MSFT_SB16_WAVEOUT = 61,MM_MSFT_SB16_MIDIIN = 62,MM_MSFT_SB16_MIDIOUT = 63,MM_MSFT_SB16_SYNTH = 64,MM_MSFT_SB16_AUX_LINE = 65,MM_MSFT_SB16_AUX_CD = 66,MM_MSFT_SB16_MIXER = 67,MM_MSFT_SBPRO_WAVEIN = 68,MM_MSFT_SBPRO_WAVEOUT = 69,MM_MSFT_SBPRO_MIDIIN = 70,MM_MSFT_SBPRO_MIDIOUT = 71,MM_MSFT_SBPRO_SYNTH = 72,MM_MSFT_SBPRO_AUX_LINE = 73,MM_MSFT_SBPRO_AUX_CD = 74,MM_MSFT_SBPRO_MIXER = 75,MM_MSFT_MSOPL_SYNTH = 76,MM_MSFT_VMDMS_LINE_WAVEIN = 80,MM_MSFT_VMDMS_LINE_WAVEOUT = 81,MM_MSFT_VMDMS_HANDSET_WAVEIN = 82,MM_MSFT_VMDMS_HANDSET_WAVEOUT = 83,MM_MSFT_VMDMW_LINE_WAVEIN = 84,MM_MSFT_VMDMW_LINE_WAVEOUT = 85,MM_MSFT_VMDMW_HANDSET_WAVEIN = 86,MM_MSFT_VMDMW_HANDSET_WAVEOUT = 87,MM_MSFT_VMDMW_MIXER = 88,MM_MSFT_VMDM_GAME_WAVEOUT = 89,MM_MSFT_VMDM_GAME_WAVEIN = 90,MM_MSFT_ACM_MSNAUDIO = 91,MM_MSFT_ACM_MSG723 = 92,MM_MSFT_WDMAUDIO_WAVEOUT = 100,MM_MSFT_WDMAUDIO_WAVEIN = 101,MM_MSFT_WDMAUDIO_MIDIOUT = 102,MM_MSFT_WDMAUDIO_MIDIIN = 103,MM_MSFT_WDMAUDIO_MIXER = 104,MM_CREATIVE_SB15_WAVEIN = 1,MM_CREATIVE_SB20_WAVEIN = 2,MM_CREATIVE_SBPRO_WAVEIN = 3,MM_CREATIVE_SBP16_WAVEIN = 4,MM_CREATIVE_PHNBLST_WAVEIN = 5,MM_CREATIVE_SB15_WAVEOUT = 101,MM_CREATIVE_SB20_WAVEOUT = 102,MM_CREATIVE_SBPRO_WAVEOUT = 103,MM_CREATIVE_SBP16_WAVEOUT = 104,MM_CREATIVE_PHNBLST_WAVEOUT = 105,MM_CREATIVE_MIDIOUT = 201,MM_CREATIVE_MIDIIN = 202,MM_CREATIVE_FMSYNTH_MONO = 301,MM_CREATIVE_FMSYNTH_STEREO = 302,MM_CREATIVE_MIDI_AWE32 = 303,MM_CREATIVE_AUX_CD = 401,MM_CREATIVE_AUX_LINE = 402,MM_CREATIVE_AUX_MIC = 403,MM_CREATIVE_AUX_MASTER = 404,MM_CREATIVE_AUX_PCSPK = 405,MM_CREATIVE_AUX_WAVE = 406,MM_CREATIVE_AUX_MIDI = 407,MM_CREATIVE_SBPRO_MIXER = 408,MM_CREATIVE_SB16_MIXER = 409,MM_MEDIAVISION_PROAUDIO = 16,MM_PROAUD_MIDIOUT = 17,MM_PROAUD_MIDIIN = 18,MM_PROAUD_SYNTH = 19,MM_PROAUD_WAVEOUT = 20,MM_PROAUD_WAVEIN = 21,MM_PROAUD_MIXER = 22,MM_PROAUD_AUX = 23,MM_MEDIAVISION_THUNDER = 32,MM_THUNDER_SYNTH = 35,MM_THUNDER_WAVEOUT = 36,MM_THUNDER_WAVEIN = 37,MM_THUNDER_AUX = 39,MM_MEDIAVISION_TPORT = 64,MM_TPORT_WAVEOUT = 65,MM_TPORT_WAVEIN = 66,MM_TPORT_SYNTH = 67,MM_MEDIAVISION_PROAUDIO_PLUS = 80,MM_PROAUD_PLUS_MIDIOUT = 81,MM_PROAUD_PLUS_MIDIIN = 82,MM_PROAUD_PLUS_SYNTH = 83,MM_PROAUD_PLUS_WAVEOUT = 84,MM_PROAUD_PLUS_WAVEIN = 85,MM_PROAUD_PLUS_MIXER = 86,MM_PROAUD_PLUS_AUX = 87,MM_MEDIAVISION_PROAUDIO_16 = 96,MM_PROAUD_16_MIDIOUT = 97,MM_PROAUD_16_MIDIIN = 98,MM_PROAUD_16_SYNTH = 99,MM_PROAUD_16_WAVEOUT = 100,MM_PROAUD_16_WAVEIN = 101,MM_PROAUD_16_MIXER = 102,MM_PROAUD_16_AUX = 103,MM_MEDIAVISION_PROSTUDIO_16 = 96,MM_STUDIO_16_MIDIOUT = 97,MM_STUDIO_16_MIDIIN = 98,MM_STUDIO_16_SYNTH = 99,MM_STUDIO_16_WAVEOUT = 100,MM_STUDIO_16_WAVEIN = 101,MM_STUDIO_16_MIXER = 102,MM_STUDIO_16_AUX = 103,MM_MEDIAVISION_CDPC = 112,MM_CDPC_MIDIOUT = 113,MM_CDPC_MIDIIN = 114,MM_CDPC_SYNTH = 115,MM_CDPC_WAVEOUT = 116,MM_CDPC_WAVEIN = 117,MM_CDPC_MIXER = 118,MM_CDPC_AUX = 119,MM_MEDIAVISION_OPUS1208 = 128,MM_OPUS401_MIDIOUT = 129,MM_OPUS401_MIDIIN = 130,MM_OPUS1208_SYNTH = 131,MM_OPUS1208_WAVEOUT = 132,MM_OPUS1208_WAVEIN = 133,MM_OPUS1208_MIXER = 134,MM_OPUS1208_AUX = 135,MM_MEDIAVISION_OPUS1216 = 144,MM_OPUS1216_MIDIOUT = 145,MM_OPUS1216_MIDIIN = 146,MM_OPUS1216_SYNTH = 147,MM_OPUS1216_WAVEOUT = 148,MM_OPUS1216_WAVEIN = 149,MM_OPUS1216_MIXER = 150,MM_OPUS1216_AUX = 151,MM_ARTISOFT_SBWAVEIN = 1,MM_ARTISOFT_SBWAVEOUT = 2,MM_MMOTION_WAVEAUX = 1,MM_MMOTION_WAVEOUT = 2,MM_MMOTION_WAVEIN = 3,MM_IBM_PCMCIA_WAVEIN = 11,MM_IBM_PCMCIA_WAVEOUT = 12,MM_IBM_PCMCIA_SYNTH = 13,MM_IBM_PCMCIA_MIDIIN = 14,MM_IBM_PCMCIA_MIDIOUT = 15,MM_IBM_PCMCIA_AUX = 16,MM_IBM_THINKPAD200 = 17,MM_IBM_MWAVE_WAVEIN = 18,MM_IBM_MWAVE_WAVEOUT = 19,MM_IBM_MWAVE_MIXER = 20,MM_IBM_MWAVE_MIDIIN = 21,MM_IBM_MWAVE_MIDIOUT = 22,MM_IBM_MWAVE_AUX = 23,MM_IBM_WC_MIDIOUT = 30,MM_IBM_WC_WAVEOUT = 31,MM_IBM_WC_MIXEROUT = 33,MM_VOCALTEC_WAVEOUT = 1,MM_VOCALTEC_WAVEIN = 2,MM_ROLAND_RAP10_MIDIOUT = 10,MM_ROLAND_RAP10_MIDIIN = 11,MM_ROLAND_RAP10_SYNTH = 12,MM_ROLAND_RAP10_WAVEOUT = 13,MM_ROLAND_RAP10_WAVEIN = 14,MM_ROLAND_MPU401_MIDIOUT = 15,MM_ROLAND_MPU401_MIDIIN = 16,MM_ROLAND_SMPU_MIDIOUTA = 17,MM_ROLAND_SMPU_MIDIOUTB = 18,MM_ROLAND_SMPU_MIDIINA = 19,MM_ROLAND_SMPU_MIDIINB = 20,MM_ROLAND_SC7_MIDIOUT = 21,MM_ROLAND_SC7_MIDIIN = 22,MM_ROLAND_SERIAL_MIDIOUT = 23,MM_ROLAND_SERIAL_MIDIIN = 24,MM_ROLAND_SCP_MIDIOUT = 38,MM_ROLAND_SCP_MIDIIN = 39,MM_ROLAND_SCP_WAVEOUT = 40,MM_ROLAND_SCP_WAVEIN = 41,MM_ROLAND_SCP_MIXER = 42,MM_ROLAND_SCP_AUX = 48,MM_DSP_SOLUTIONS_WAVEOUT = 1,MM_DSP_SOLUTIONS_WAVEIN = 2,MM_DSP_SOLUTIONS_SYNTH = 3,MM_DSP_SOLUTIONS_AUX = 4,MM_WANGLABS_WAVEIN1 = 1,MM_WANGLABS_WAVEOUT1 = 2,MM_TANDY_VISWAVEIN = 1,MM_TANDY_VISWAVEOUT = 2,MM_TANDY_VISBIOSSYNTH = 3,MM_TANDY_SENS_MMAWAVEIN = 4,MM_TANDY_SENS_MMAWAVEOUT = 5,MM_TANDY_SENS_MMAMIDIIN = 6,MM_TANDY_SENS_MMAMIDIOUT = 7,MM_TANDY_SENS_VISWAVEOUT = 8,MM_TANDY_PSSJWAVEIN = 9,MM_TANDY_PSSJWAVEOUT = 10,MM_INTELOPD_WAVEIN = 1,MM_INTELOPD_WAVEOUT = 101,MM_INTELOPD_AUX = 401,MM_INTEL_NSPMODEMLINE = 501,MM_INTERACTIVE_WAVEIN = 69,MM_INTERACTIVE_WAVEOUT = 69,MM_YAMAHA_GSS_SYNTH = 1,MM_YAMAHA_GSS_WAVEOUT = 2,MM_YAMAHA_GSS_WAVEIN = 3,MM_YAMAHA_GSS_MIDIOUT = 4,MM_YAMAHA_GSS_MIDIIN = 5,MM_YAMAHA_GSS_AUX = 6,MM_YAMAHA_SERIAL_MIDIOUT = 7,MM_YAMAHA_SERIAL_MIDIIN = 8,MM_YAMAHA_OPL3SA_WAVEOUT = 16,MM_YAMAHA_OPL3SA_WAVEIN = 17,MM_YAMAHA_OPL3SA_FMSYNTH = 18,MM_YAMAHA_OPL3SA_YSYNTH = 19,MM_YAMAHA_OPL3SA_MIDIOUT = 20,MM_YAMAHA_OPL3SA_MIDIIN = 21,MM_YAMAHA_OPL3SA_MIXER = 23,MM_YAMAHA_OPL3SA_JOYSTICK = 24,MM_EVEREX_CARRIER = 1,MM_ECHO_SYNTH = 1,MM_ECHO_WAVEOUT = 2,MM_ECHO_WAVEIN = 3,MM_ECHO_MIDIOUT = 4,MM_ECHO_MIDIIN = 5,MM_ECHO_AUX = 6,MM_SIERRA_ARIA_MIDIOUT = 20,MM_SIERRA_ARIA_MIDIIN = 21,MM_SIERRA_ARIA_SYNTH = 22,MM_SIERRA_ARIA_WAVEOUT = 23,MM_SIERRA_ARIA_WAVEIN = 24,MM_SIERRA_ARIA_AUX = 25,MM_SIERRA_ARIA_AUX2 = 32,MM_SIERRA_QUARTET_WAVEIN = 80,MM_SIERRA_QUARTET_WAVEOUT = 81,MM_SIERRA_QUARTET_MIDIIN = 82,MM_SIERRA_QUARTET_MIDIOUT = 83,MM_SIERRA_QUARTET_SYNTH = 84,MM_SIERRA_QUARTET_AUX_CD = 85,MM_SIERRA_QUARTET_AUX_LINE = 86,MM_SIERRA_QUARTET_AUX_MODEM = 87,MM_SIERRA_QUARTET_MIXER = 88,MM_CAT_WAVEOUT = 1,MM_DSP_GROUP_TRUESPEECH = 1,MM_MELABS_MIDI2GO = 1,MM_ESS_AMWAVEOUT = 1,MM_ESS_AMWAVEIN = 2,MM_ESS_AMAUX = 3,MM_ESS_AMSYNTH = 4,MM_ESS_AMMIDIOUT = 5,MM_ESS_AMMIDIIN = 6,MM_ESS_MIXER = 7,MM_ESS_AUX_CD = 8,MM_ESS_MPU401_MIDIOUT = 9,MM_ESS_MPU401_MIDIIN = 10,MM_ESS_ES488_WAVEOUT = 16,MM_ESS_ES488_WAVEIN = 17,MM_ESS_ES488_MIXER = 18,MM_ESS_ES688_WAVEOUT = 19,MM_ESS_ES688_WAVEIN = 20,MM_ESS_ES688_MIXER = 21,MM_ESS_ES1488_WAVEOUT = 22,MM_ESS_ES1488_WAVEIN = 23,MM_ESS_ES1488_MIXER = 24,MM_ESS_ES1688_WAVEOUT = 25,MM_ESS_ES1688_WAVEIN = 26,MM_ESS_ES1688_MIXER = 27,MM_ESS_ES1788_WAVEOUT = 28,MM_ESS_ES1788_WAVEIN = 29,MM_ESS_ES1788_MIXER = 30,MM_ESS_ES1888_WAVEOUT = 31,MM_ESS_ES1888_WAVEIN = 32,MM_ESS_ES1888_MIXER = 33,MM_ESS_ES1868_WAVEOUT = 34,MM_ESS_ES1868_WAVEIN = 35,MM_ESS_ES1868_MIXER = 36,MM_ESS_ES1878_WAVEOUT = 37,MM_ESS_ES1878_WAVEIN = 38,MM_ESS_ES1878_MIXER = 39,MM_EPS_FMSND = 1,MM_TRUEVISION_WAVEIN1 = 1,MM_TRUEVISION_WAVEOUT1 = 2,MM_AZTECH_MIDIOUT = 3,MM_AZTECH_MIDIIN = 4,MM_AZTECH_WAVEIN = 17,MM_AZTECH_WAVEOUT = 18,MM_AZTECH_FMSYNTH = 20,MM_AZTECH_MIXER = 21,MM_AZTECH_PRO16_WAVEIN = 33,MM_AZTECH_PRO16_WAVEOUT = 34,MM_AZTECH_PRO16_FMSYNTH = 38,MM_AZTECH_DSP16_WAVEIN = 65,MM_AZTECH_DSP16_WAVEOUT = 66,MM_AZTECH_DSP16_FMSYNTH = 68,MM_AZTECH_DSP16_WAVESYNTH = 70,MM_AZTECH_NOVA16_WAVEIN = 71,MM_AZTECH_NOVA16_WAVEOUT = 72,MM_AZTECH_NOVA16_MIXER = 73,MM_AZTECH_WASH16_WAVEIN = 74,MM_AZTECH_WASH16_WAVEOUT = 75,MM_AZTECH_WASH16_MIXER = 76,MM_AZTECH_AUX_CD = 401,MM_AZTECH_AUX_LINE = 402,MM_AZTECH_AUX_MIC = 403,MM_AZTECH_AUX = 404,MM_VIDEOLOGIC_MSWAVEIN = 1,MM_VIDEOLOGIC_MSWAVEOUT = 2,MM_KORG_PCIF_MIDIOUT = 1,MM_KORG_PCIF_MIDIIN = 2,MM_APT_ACE100CD = 1,MM_ICS_WAVEDECK_WAVEOUT = 1,MM_ICS_WAVEDECK_WAVEIN = 2,MM_ICS_WAVEDECK_MIXER = 3,MM_ICS_WAVEDECK_AUX = 4,MM_ICS_WAVEDECK_SYNTH = 5,MM_ICS_WAVEDEC_SB_WAVEOUT = 6,MM_ICS_WAVEDEC_SB_WAVEIN = 7,MM_ICS_WAVEDEC_SB_FM_MIDIOUT = 8,MM_ICS_WAVEDEC_SB_MPU401_MIDIOUT = 9,MM_ICS_WAVEDEC_SB_MPU401_MIDIIN = 10,MM_ICS_WAVEDEC_SB_MIXER = 11,MM_ICS_WAVEDEC_SB_AUX = 12,MM_ICS_2115_LITE_MIDIOUT = 13,MM_ICS_2120_LITE_MIDIOUT = 14,MM_ITERATEDSYS_FUFCODEC = 1,MM_METHEUS_ZIPPER = 1,MM_WINNOV_CAVIAR_WAVEIN = 1,MM_WINNOV_CAVIAR_WAVEOUT = 2,MM_WINNOV_CAVIAR_VIDC = 3,MM_WINNOV_CAVIAR_CHAMPAGNE = 4,MM_WINNOV_CAVIAR_YUV8 = 5,MM_NCR_BA_WAVEIN = 1,MM_NCR_BA_WAVEOUT = 2,MM_NCR_BA_SYNTH = 3,MM_NCR_BA_AUX = 4,MM_NCR_BA_MIXER = 5,MM_VITEC_VMAKER = 1,MM_VITEC_VMPRO = 2,MM_MOSCOM_VPC2400_IN = 1,MM_MOSCOM_VPC2400_OUT = 2,MM_SILICONSOFT_SC1_WAVEIN = 1,MM_SILICONSOFT_SC1_WAVEOUT = 2,MM_SILICONSOFT_SC2_WAVEIN = 3,MM_SILICONSOFT_SC2_WAVEOUT = 4,MM_SILICONSOFT_SOUNDJR2_WAVEOUT = 5,MM_SILICONSOFT_SOUNDJR2PR_WAVEIN = 6,MM_SILICONSOFT_SOUNDJR2PR_WAVEOUT = 7,MM_SILICONSOFT_SOUNDJR3_WAVEOUT = 8,MM_OLIVETTI_WAVEIN = 1,MM_OLIVETTI_WAVEOUT = 2,MM_OLIVETTI_MIXER = 3,MM_OLIVETTI_AUX = 4,MM_OLIVETTI_MIDIIN = 5,MM_OLIVETTI_MIDIOUT = 6,MM_OLIVETTI_SYNTH = 7,MM_OLIVETTI_JOYSTICK = 8,MM_OLIVETTI_ACM_GSM = 9,MM_OLIVETTI_ACM_ADPCM = 10,MM_OLIVETTI_ACM_CELP = 11,MM_OLIVETTI_ACM_SBC = 12,MM_OLIVETTI_ACM_OPR = 13,MM_IOMAGIC_TEMPO_WAVEOUT = 1,MM_IOMAGIC_TEMPO_WAVEIN = 2,MM_IOMAGIC_TEMPO_SYNTH = 3,MM_IOMAGIC_TEMPO_MIDIOUT = 4,MM_IOMAGIC_TEMPO_MXDOUT = 5,MM_IOMAGIC_TEMPO_AUXOUT = 6,MM_MATSUSHITA_WAVEIN = 1,MM_MATSUSHITA_WAVEOUT = 2,MM_MATSUSHITA_FMSYNTH_STEREO = 3,MM_MATSUSHITA_MIXER = 4,MM_MATSUSHITA_AUX = 5,MM_NEWMEDIA_WAVJAMMER = 1,MM_LYRRUS_BRIDGE_GUITAR = 1,MM_OPTI_M16_FMSYNTH_STEREO = 1,MM_OPTI_M16_MIDIIN = 2,MM_OPTI_M16_MIDIOUT = 3,MM_OPTI_M16_WAVEIN = 4,MM_OPTI_M16_WAVEOUT = 5,MM_OPTI_M16_MIXER = 6,MM_OPTI_M16_AUX = 7,MM_OPTI_P16_FMSYNTH_STEREO = 16,MM_OPTI_P16_MIDIIN = 17,MM_OPTI_P16_MIDIOUT = 18,MM_OPTI_P16_WAVEIN = 19,MM_OPTI_P16_WAVEOUT = 20,MM_OPTI_P16_MIXER = 21,MM_OPTI_P16_AUX = 22,MM_OPTI_M32_WAVEIN = 32,MM_OPTI_M32_WAVEOUT = 33,MM_OPTI_M32_MIDIIN = 34,MM_OPTI_M32_MIDIOUT = 35,MM_OPTI_M32_SYNTH_STEREO = 36,MM_OPTI_M32_MIXER = 37,MM_OPTI_M32_AUX = 38,MM_ADDX_PCTV_DIGITALMIX = 1,MM_ADDX_PCTV_WAVEIN = 2,MM_ADDX_PCTV_WAVEOUT = 3,MM_ADDX_PCTV_MIXER = 4,MM_ADDX_PCTV_AUX_CD = 5,MM_ADDX_PCTV_AUX_LINE = 6,MM_AHEAD_MULTISOUND = 1,MM_AHEAD_SOUNDBLASTER = 2,MM_AHEAD_PROAUDIO = 3,MM_AHEAD_GENERIC = 4,MM_AMD_INTERWAVE_WAVEIN = 1,MM_AMD_INTERWAVE_WAVEOUT = 2,MM_AMD_INTERWAVE_SYNTH = 3,MM_AMD_INTERWAVE_MIXER1 = 4,MM_AMD_INTERWAVE_MIXER2 = 5,MM_AMD_INTERWAVE_JOYSTICK = 6,MM_AMD_INTERWAVE_EX_CD = 7,MM_AMD_INTERWAVE_MIDIIN = 8,MM_AMD_INTERWAVE_MIDIOUT = 9,MM_AMD_INTERWAVE_AUX1 = 10,MM_AMD_INTERWAVE_AUX2 = 11,MM_AMD_INTERWAVE_AUX_MIC = 12,MM_AMD_INTERWAVE_AUX_CD = 13,MM_AMD_INTERWAVE_MONO_IN = 14,MM_AMD_INTERWAVE_MONO_OUT = 15,MM_AMD_INTERWAVE_EX_TELEPHONY = 16,MM_AMD_INTERWAVE_WAVEOUT_BASE = 17,MM_AMD_INTERWAVE_WAVEOUT_TREBLE = 18,MM_AMD_INTERWAVE_STEREO_ENHANCED = 19,MM_AST_MODEMWAVE_WAVEIN = 13,MM_AST_MODEMWAVE_WAVEOUT = 14,MM_BTV_WAVEIN = 1,MM_BTV_WAVEOUT = 2,MM_BTV_MIDIIN = 3,MM_BTV_MIDIOUT = 4,MM_BTV_MIDISYNTH = 5,MM_BTV_AUX_LINE = 6,MM_BTV_AUX_MIC = 7,MM_BTV_AUX_CD = 8,MM_BTV_DIGITALIN = 9,MM_BTV_DIGITALOUT = 10,MM_BTV_MIDIWAVESTREAM = 11,MM_BTV_MIXER = 12,MM_CANAM_CBXWAVEOUT = 1,MM_CANAM_CBXWAVEIN = 2,MM_CASIO_WP150_MIDIOUT = 1,MM_CASIO_WP150_MIDIIN = 2,MM_COMPAQ_BB_WAVEIN = 1,MM_COMPAQ_BB_WAVEOUT = 2,MM_COMPAQ_BB_WAVEAUX = 3,MM_COREDYNAMICS_DYNAMIXHR = 1,MM_COREDYNAMICS_DYNASONIX_SYNTH = 2,MM_COREDYNAMICS_DYNASONIX_MIDI_IN = 3,MM_COREDYNAMICS_DYNASONIX_MIDI_OUT = 4,MM_COREDYNAMICS_DYNASONIX_WAVE_IN = 5,MM_COREDYNAMICS_DYNASONIX_WAVE_OUT = 6,MM_COREDYNAMICS_DYNASONIX_AUDIO_IN = 7,MM_COREDYNAMICS_DYNASONIX_AUDIO_OUT = 8,MM_COREDYNAMICS_DYNAGRAFX_VGA = 9,MM_COREDYNAMICS_DYNAGRAFX_WAVE_IN = 10,MM_COREDYNAMICS_DYNAGRAFX_WAVE_OUT = 11,MM_CRYSTAL_CS4232_WAVEIN = 1,MM_CRYSTAL_CS4232_WAVEOUT = 2,MM_CRYSTAL_CS4232_WAVEMIXER = 3,MM_CRYSTAL_CS4232_WAVEAUX_AUX1 = 4,MM_CRYSTAL_CS4232_WAVEAUX_AUX2 = 5,MM_CRYSTAL_CS4232_WAVEAUX_LINE = 6,MM_CRYSTAL_CS4232_WAVEAUX_MONO = 7,MM_CRYSTAL_CS4232_WAVEAUX_MASTER = 8,MM_CRYSTAL_CS4232_MIDIIN = 9,MM_CRYSTAL_CS4232_MIDIOUT = 10,MM_CRYSTAL_CS4232_INPUTGAIN_AUX1 = 13,MM_CRYSTAL_CS4232_INPUTGAIN_LOOP = 14,MM_DDD_MIDILINK_MIDIIN = 1,MM_DDD_MIDILINK_MIDIOUT = 2,MM_DIACOUSTICS_DRUM_ACTION = 1,MM_DIMD_PLATFORM = 0,MM_DIMD_DIRSOUND = 1,MM_DIMD_VIRTMPU = 2,MM_DIMD_VIRTSB = 3,MM_DIMD_VIRTJOY = 4,MM_DIMD_WAVEIN = 5,MM_DIMD_WAVEOUT = 6,MM_DIMD_MIDIIN = 7,MM_DIMD_MIDIOUT = 8,MM_DIMD_AUX_LINE = 9,MM_DIMD_MIXER = 10,MM_DIGITAL_AUDIO_LABS_V8 = 16,MM_DIGITAL_AUDIO_LABS_CPRO = 17,MM_DIGITAL_AV320_WAVEIN = 1,MM_DIGITAL_AV320_WAVEOUT = 2,MM_ECS_AADF_MIDI_IN = 10,MM_ECS_AADF_MIDI_OUT = 11,MM_ECS_AADF_WAVE2MIDI_IN = 12,MM_ENSONIQ_SOUNDSCAPE = 16,MM_SOUNDSCAPE_WAVEOUT = 17,MM_SOUNDSCAPE_WAVEOUT_AUX = 18,MM_SOUNDSCAPE_WAVEIN = 19,MM_SOUNDSCAPE_MIDIOUT = 20,MM_SOUNDSCAPE_MIDIIN = 21,MM_SOUNDSCAPE_SYNTH = 22,MM_SOUNDSCAPE_MIXER = 23,MM_SOUNDSCAPE_AUX = 24,MM_FRONTIER_WAVECENTER_MIDIIN = 1,MM_FRONTIER_WAVECENTER_MIDIOUT = 2,MM_FRONTIER_WAVECENTER_WAVEIN = 3,MM_FRONTIER_WAVECENTER_WAVEOUT = 4,MM_GADGETLABS_WAVE44_WAVEIN = 1,MM_GADGETLABS_WAVE44_WAVEOUT = 2,MM_GADGETLABS_WAVE42_WAVEIN = 3,MM_GADGETLABS_WAVE42_WAVEOUT = 4,MM_GADGETLABS_WAVE4_MIDIIN = 5,MM_GADGETLABS_WAVE4_MIDIOUT = 6,MM_KAY_ELEMETRICS_CSL = 17152,MM_KAY_ELEMETRICS_CSL_DAT = 17160,MM_KAY_ELEMETRICS_CSL_4CHANNEL = 17161,MM_LERNOUT_ANDHAUSPIE_LHCODECACM = 1,MM_MPTUS_SPWAVEOUT = 1,MM_MOTU_MTP_MIDIOUT_ALL = 100,MM_MOTU_MTP_MIDIIN_1 = 101,MM_MOTU_MTP_MIDIOUT_1 = 101,MM_MOTU_MTP_MIDIIN_2 = 102,MM_MOTU_MTP_MIDIOUT_2 = 102,MM_MOTU_MTP_MIDIIN_3 = 103,MM_MOTU_MTP_MIDIOUT_3 = 103,MM_MOTU_MTP_MIDIIN_4 = 104,MM_MOTU_MTP_MIDIOUT_4 = 104,MM_MOTU_MTP_MIDIIN_5 = 105,MM_MOTU_MTP_MIDIOUT_5 = 105,MM_MOTU_MTP_MIDIIN_6 = 106,MM_MOTU_MTP_MIDIOUT_6 = 106,MM_MOTU_MTP_MIDIIN_7 = 107,MM_MOTU_MTP_MIDIOUT_7 = 107,MM_MOTU_MTP_MIDIIN_8 = 108,MM_MOTU_MTP_MIDIOUT_8 = 108,MM_MOTU_MTPII_MIDIOUT_ALL = 200,MM_MOTU_MTPII_MIDIIN_SYNC = 200,MM_MOTU_MTPII_MIDIIN_1 = 201,MM_MOTU_MTPII_MIDIOUT_1 = 201,MM_MOTU_MTPII_MIDIIN_2 = 202,MM_MOTU_MTPII_MIDIOUT_2 = 202,MM_MOTU_MTPII_MIDIIN_3 = 203,MM_MOTU_MTPII_MIDIOUT_3 = 203,MM_MOTU_MTPII_MIDIIN_4 = 204,MM_MOTU_MTPII_MIDIOUT_4 = 204,MM_MOTU_MTPII_MIDIIN_5 = 205,MM_MOTU_MTPII_MIDIOUT_5 = 205,MM_MOTU_MTPII_MIDIIN_6 = 206,MM_MOTU_MTPII_MIDIOUT_6 = 206,MM_MOTU_MTPII_MIDIIN_7 = 207,MM_MOTU_MTPII_MIDIOUT_7 = 207,MM_MOTU_MTPII_MIDIIN_8 = 208,MM_MOTU_MTPII_MIDIOUT_8 = 208,MM_MOTU_MTPII_NET_MIDIIN_1 = 209,MM_MOTU_MTPII_NET_MIDIOUT_1 = 209,MM_MOTU_MTPII_NET_MIDIIN_2 = 210,MM_MOTU_MTPII_NET_MIDIOUT_2 = 210,MM_MOTU_MTPII_NET_MIDIIN_3 = 211,MM_MOTU_MTPII_NET_MIDIOUT_3 = 211,MM_MOTU_MTPII_NET_MIDIIN_4 = 212,MM_MOTU_MTPII_NET_MIDIOUT_4 = 212,MM_MOTU_MTPII_NET_MIDIIN_5 = 213,MM_MOTU_MTPII_NET_MIDIOUT_5 = 213,MM_MOTU_MTPII_NET_MIDIIN_6 = 214,MM_MOTU_MTPII_NET_MIDIOUT_6 = 214,MM_MOTU_MTPII_NET_MIDIIN_7 = 215,MM_MOTU_MTPII_NET_MIDIOUT_7 = 215,MM_MOTU_MTPII_NET_MIDIIN_8 = 216,MM_MOTU_MTPII_NET_MIDIOUT_8 = 216,MM_MOTU_MXP_MIDIIN_MIDIOUT_ALL = 300,MM_MOTU_MXP_MIDIIN_SYNC = 300,MM_MOTU_MXP_MIDIIN_MIDIIN_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIOUT_1 = 301,MM_MOTU_MXP_MIDIIN_MIDIIN_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIOUT_2 = 302,MM_MOTU_MXP_MIDIIN_MIDIIN_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIOUT_3 = 303,MM_MOTU_MXP_MIDIIN_MIDIIN_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIOUT_4 = 304,MM_MOTU_MXP_MIDIIN_MIDIIN_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIOUT_5 = 305,MM_MOTU_MXP_MIDIIN_MIDIIN_6 = 306,MM_MOTU_MXP_MIDIIN_MIDIOUT_6 = 306,MM_MOTU_MXPMPU_MIDIOUT_ALL = 400,MM_MOTU_MXPMPU_MIDIIN_SYNC = 400,MM_MOTU_MXPMPU_MIDIIN_1 = 401,MM_MOTU_MXPMPU_MIDIOUT_1 = 401,MM_MOTU_MXPMPU_MIDIIN_2 = 402,MM_MOTU_MXPMPU_MIDIOUT_2 = 402,MM_MOTU_MXPMPU_MIDIIN_3 = 403,MM_MOTU_MXPMPU_MIDIOUT_3 = 403,MM_MOTU_MXPMPU_MIDIIN_4 = 404,MM_MOTU_MXPMPU_MIDIOUT_4 = 404,MM_MOTU_MXPMPU_MIDIIN_5 = 405,MM_MOTU_MXPMPU_MIDIOUT_5 = 405,MM_MOTU_MXPMPU_MIDIIN_6 = 406,MM_MOTU_MXPMPU_MIDIOUT_6 = 406,MM_MOTU_MXN_MIDIOUT_ALL = 500,MM_MOTU_MXN_MIDIIN_SYNC = 500,MM_MOTU_MXN_MIDIIN_1 = 501,MM_MOTU_MXN_MIDIOUT_1 = 501,MM_MOTU_MXN_MIDIIN_2 = 502,MM_MOTU_MXN_MIDIOUT_2 = 502,MM_MOTU_MXN_MIDIIN_3 = 503,MM_MOTU_MXN_MIDIOUT_3 = 503,MM_MOTU_MXN_MIDIIN_4 = 504,MM_MOTU_MXN_MIDIOUT_4 = 504,MM_MOTU_FLYER_MIDI_IN_SYNC = 600,MM_MOTU_FLYER_MIDI_IN_A = 601,MM_MOTU_FLYER_MIDI_OUT_A = 601,MM_MOTU_FLYER_MIDI_IN_B = 602,MM_MOTU_FLYER_MIDI_OUT_B = 602,MM_MOTU_PKX_MIDI_IN_SYNC = 700,MM_MOTU_PKX_MIDI_IN_A = 701,MM_MOTU_PKX_MIDI_OUT_A = 701,MM_MOTU_PKX_MIDI_IN_B = 702,MM_MOTU_PKX_MIDI_OUT_B = 702,MM_MOTU_DTX_MIDI_IN_SYNC = 800,MM_MOTU_DTX_MIDI_IN_A = 801,MM_MOTU_DTX_MIDI_OUT_A = 801,MM_MOTU_DTX_MIDI_IN_B = 802,MM_MOTU_DTX_MIDI_OUT_B = 802,MM_MOTU_MTPAV_MIDIOUT_ALL = 900,MM_MOTU_MTPAV_MIDIIN_SYNC = 900,MM_MOTU_MTPAV_MIDIIN_1 = 901,MM_MOTU_MTPAV_MIDIOUT_1 = 901,MM_MOTU_MTPAV_MIDIIN_2 = 902,MM_MOTU_MTPAV_MIDIOUT_2 = 902,MM_MOTU_MTPAV_MIDIIN_3 = 903,MM_MOTU_MTPAV_MIDIOUT_3 = 903,MM_MOTU_MTPAV_MIDIIN_4 = 904,MM_MOTU_MTPAV_MIDIOUT_4 = 904,MM_MOTU_MTPAV_MIDIIN_5 = 905,MM_MOTU_MTPAV_MIDIOUT_5 = 905,MM_MOTU_MTPAV_MIDIIN_6 = 906,MM_MOTU_MTPAV_MIDIOUT_6 = 906,MM_MOTU_MTPAV_MIDIIN_7 = 907,MM_MOTU_MTPAV_MIDIOUT_7 = 907,MM_MOTU_MTPAV_MIDIIN_8 = 908,MM_MOTU_MTPAV_MIDIOUT_8 = 908,MM_MOTU_MTPAV_NET_MIDIIN_1 = 909,MM_MOTU_MTPAV_NET_MIDIOUT_1 = 909,MM_MOTU_MTPAV_NET_MIDIIN_2 = 910,MM_MOTU_MTPAV_NET_MIDIOUT_2 = 910,MM_MOTU_MTPAV_NET_MIDIIN_3 = 911,MM_MOTU_MTPAV_NET_MIDIOUT_3 = 911,MM_MOTU_MTPAV_NET_MIDIIN_4 = 912,MM_MOTU_MTPAV_NET_MIDIOUT_4 = 912,MM_MOTU_MTPAV_NET_MIDIIN_5 = 913,MM_MOTU_MTPAV_NET_MIDIOUT_5 = 913,MM_MOTU_MTPAV_NET_MIDIIN_6 = 914,MM_MOTU_MTPAV_NET_MIDIOUT_6 = 914,MM_MOTU_MTPAV_NET_MIDIIN_7 = 915,MM_MOTU_MTPAV_NET_MIDIOUT_7 = 915,MM_MOTU_MTPAV_NET_MIDIIN_8 = 916,MM_MOTU_MTPAV_NET_MIDIOUT_8 = 916,MM_MOTU_MTPAV_MIDIIN_ADAT = 917,MM_MOTU_MTPAV_MIDIOUT_ADAT = 917,MM_MIRO_MOVIEPRO = 1,MM_MIRO_VIDEOD1 = 2,MM_MIRO_VIDEODC1TV = 3,MM_MIRO_VIDEOTD = 4,MM_MIRO_DC30_WAVEOUT = 5,MM_MIRO_DC30_WAVEIN = 6,MM_MIRO_DC30_MIX = 7,MM_NEC_73_86_SYNTH = 5,MM_NEC_73_86_WAVEOUT = 6,MM_NEC_73_86_WAVEIN = 7,MM_NEC_26_SYNTH = 9,MM_NEC_MPU401_MIDIOUT = 10,MM_NEC_MPU401_MIDIIN = 11,MM_NEC_JOYSTICK = 12,MM_NORRIS_VOICELINK = 1,MM_NORTEL_MPXAC_WAVEIN = 1,MM_NORTEL_MPXAC_WAVEOUT = 2,MM_NVIDIA_WAVEOUT = 1,MM_NVIDIA_WAVEIN = 2,MM_NVIDIA_MIDIOUT = 3,MM_NVIDIA_MIDIIN = 4,MM_NVIDIA_GAMEPORT = 5,MM_NVIDIA_MIXER = 6,MM_NVIDIA_AUX = 7,MM_OKSORI_BASE = 0,MM_OKSORI_OSR8_WAVEOUT = 1,MM_OKSORI_OSR8_WAVEIN = 2,MM_OKSORI_OSR16_WAVEOUT = 3,MM_OKSORI_OSR16_WAVEIN = 4,MM_OKSORI_FM_OPL4 = 5,MM_OKSORI_MIX_MASTER = 6,MM_OKSORI_MIX_WAVE = 7,MM_OKSORI_MIX_FM = 8,MM_OKSORI_MIX_LINE = 9,MM_OKSORI_MIX_CD = 10,MM_OKSORI_MIX_MIC = 11,MM_OKSORI_MIX_ECHO = 12,MM_OKSORI_MIX_AUX1 = 13,MM_OKSORI_MIX_LINE1 = 14,MM_OKSORI_EXT_MIC1 = 15,MM_OKSORI_EXT_MIC2 = 16,MM_OKSORI_MIDIOUT = 17,MM_OKSORI_MIDIIN = 18,MM_OKSORI_MPEG_CDVISION = 19,MM_OSITECH_TRUMPCARD = 1,MM_OSPREY_1000WAVEIN = 1,MM_OSPREY_1000WAVEOUT = 2,MM_QUARTERDECK_LHWAVEIN = 0,MM_QUARTERDECK_LHWAVEOUT = 1,MM_RHETOREX_WAVEIN = 1,MM_RHETOREX_WAVEOUT = 2,MM_VOICEMIXER = 1,};
enum MACRO_MOD_MIDIPORT {MOD_MIDIPORT = 1,MOD_SYNTH = 2,MOD_SQSYNTH = 3,MOD_FMSYNTH = 4,MOD_MAPPER = 5,};
enum MACRO_MONITORINFOF {MONITORINFOF_PRIMARY = 0x1,};
enum MACRO_MSBDN_BRIDGE {MSBDN_BRIDGE_CALLBACKS_VERSION = 0x20000,MSBDN_OUTPUT_SUBSYSTEM_VERSION_1 = 0x1,MSBDN_OUTPUT_SUBSYSTEM_VERSION = 0x1,MSBDN_OUTPUT_DISABLED = 0x0,MSBDN_OUTPUT_ENABLED = 0x1,MSBDN_OUTPUT_FORCED = 0x2,MSBDN_OUTPUT_WARNING = 0xA,MSBDN_REPORT_RATE = 0x64,MSBDN_REPORT_OUTPUT = 0x65,MSBDN_REPORT_ERROR = 0x66,MSBDN_REPORT_TIMEOUT = 0x67,MSBDN_REPORT_FULLFIFO = 0x68,MSBDN_OUTPUT_API_VERSION = 0x20000,MSBDN_OUTPUT_VALUE_STRING = 0x0,MSBDN_OUTPUT_VALUE_DWORD = 0x1,MSBDN_OUTPUT_VALUE_IPADDRESS = 0x2,MSBDN_OUTPUT_VALUE_BOOLEAN = 0x3,};
enum MACRO_NCBADDGRNAME {NCBADDGRNAME = 0x36,};
enum MACRO_NCBCHAINSEND {NCBCHAINSEND = 0x17,NCBDGSEND = 0x20,};
enum MACRO_NETBIOS_NAME {NETBIOS_NAME_LENGTH = 16,NETBIOS_UNIQUE_NAME = 0,NETBIOS_GROUP_NAME = 1,NETBIOS_TYPE_QUICK_UNIQUE = 2,NETBIOS_TYPE_QUICK_GROUP = 3,};
enum MACRO_NETWORK_DREP {NETWORK_DREP = 0x0,};
enum MACRO_NLS_DBCSCHAR {NLS_DBCSCHAR = 0x10000,NLS_ALPHANUMERIC = 0x0,NLS_KATAKANA = 0x20000,NLS_HIRAGANA = 0x40000,NLS_ROMAN = 0x400000,NLS_IME_CONVERSION = 0x800000,NLS_IME_DISABLE = 0x20000000,};
enum MACRO_NOTIFY_ABORT {NOTIFY_ABORT_DEFERRED = 0x40000000,NOTIFY_CANCEL_MESSAGE = 0x80000000,NOTIFY_BEGIN_INBOUND = 0x1,NOTIFY_END_INBOUND = 0x10000,NOTIFY_BEGIN_OUTBOUND = 0x2,NOTIFY_END_OUTBOUND = 0x20000,NOTIFY_BEGIN_INBOUND_FLUSH = 0x4,NOTIFY_END_INBOUND_FLUSH = 0x40000,NOTIFY_BEGIN_OUTBOUND_FLUSH = 0x8,NOTIFY_END_OUTBOUND_FLUSH = 0x80000,};
enum MACRO_NUM_ELEMENTS {SHI1_NUM_ELEMENTS = 4,SHI2_NUM_ELEMENTS = 10,};
enum MACRO_NUM_RESOURCE {NUM_RESOURCE_MAP = 256,};
enum MACRO_OF_AVAILABLE {OF_AVAILABLE_OFFLINE = 0x1,OF_FORCE = 0x80000000,};
enum MACRO_PARMNUM_BASE {PARMNUM_BASE_INFOLEVEL = 1000,};
enum MACRO_PC_FOLLOWING {PC_FOLLOWING = 1,PC_LEADING = 2,PC_OVERFLOW = 3,PC_DELIMITER = 4,};
enum MACRO_PGF_SCROLLUP {PGF_SCROLLUP = 1,PGF_SCROLLDOWN = 2,PGF_SCROLLLEFT = 4,PGF_SCROLLRIGHT = 8,};
enum MACRO_PGN_CALCSIZE {PGN_CALCSIZE = -902,};
enum MACRO_PHONEFEATURE {PHONEFEATURE_GETBUTTONINFO = 0x1,PHONEFEATURE_GETDATA = 0x2,PHONEFEATURE_GETDISPLAY = 0x4,PHONEFEATURE_GETGAINHANDSET = 0x8,PHONEFEATURE_GETGAINSPEAKER = 0x10,PHONEFEATURE_GETGAINHEADSET = 0x20,PHONEFEATURE_GETHOOKSWITCHHANDSET = 0x40,PHONEFEATURE_GETHOOKSWITCHSPEAKER = 0x80,PHONEFEATURE_GETHOOKSWITCHHEADSET = 0x100,PHONEFEATURE_GETLAMP = 0x200,PHONEFEATURE_GETRING = 0x400,PHONEFEATURE_GETVOLUMEHANDSET = 0x800,PHONEFEATURE_GETVOLUMESPEAKER = 0x1000,PHONEFEATURE_GETVOLUMEHEADSET = 0x2000,PHONEFEATURE_SETBUTTONINFO = 0x4000,PHONEFEATURE_SETDATA = 0x8000,PHONEFEATURE_SETDISPLAY = 0x10000,PHONEFEATURE_SETGAINHANDSET = 0x20000,PHONEFEATURE_SETGAINSPEAKER = 0x40000,PHONEFEATURE_SETGAINHEADSET = 0x80000,PHONEFEATURE_SETHOOKSWITCHHANDSET = 0x100000,PHONEFEATURE_SETHOOKSWITCHSPEAKER = 0x200000,PHONEFEATURE_SETHOOKSWITCHHEADSET = 0x400000,PHONEFEATURE_SETLAMP = 0x800000,PHONEFEATURE_SETRING = 0x1000000,PHONEFEATURE_SETVOLUMEHANDSET = 0x2000000,PHONEFEATURE_SETVOLUMESPEAKER = 0x4000000,PHONEFEATURE_SETVOLUMEHEADSET = 0x8000000,};
enum MACRO_PHONE_REMOVE {PHONE_REMOVE = 26,};
enum MACRO_PKCS_CONTENT {PKCS_CONTENT_INFO = 33,};
enum MACRO_PRINTER_ENUM {PRINTER_ENUM_DEFAULT = 0x1,PRINTER_ENUM_LOCAL = 0x2,PRINTER_ENUM_CONNECTIONS = 0x4,PRINTER_ENUM_FAVORITE = 0x4,PRINTER_ENUM_NAME = 0x8,PRINTER_ENUM_REMOTE = 0x10,PRINTER_ENUM_SHARED = 0x20,PRINTER_ENUM_NETWORK = 0x40,PRINTER_ENUM_EXPAND = 0x4000,PRINTER_ENUM_CONTAINER = 0x8000,PRINTER_ENUM_ICONMASK = 0xFF0000,PRINTER_ENUM_ICON1 = 0x10000,PRINTER_ENUM_ICON2 = 0x20000,PRINTER_ENUM_ICON3 = 0x40000,PRINTER_ENUM_ICON4 = 0x80000,PRINTER_ENUM_ICON5 = 0x100000,PRINTER_ENUM_ICON6 = 0x200000,PRINTER_ENUM_ICON7 = 0x400000,PRINTER_ENUM_ICON8 = 0x800000,PRINTER_NOTIFY_TYPE = 0x0,};
enum MACRO_PRINTER_HTML {PRINTER_HTML_VIEW_QUEUE = 0,PRINTER_HTML_VIEW_PRINTPROPERTIES = 1,PRINTER_HTML_VIEW_INSTALL = 2,PRINTER_HTML_VIEW_JOBPROPERTIES = 3,};
enum MACRO_PROCESS_HEAP {PROCESS_HEAP_REGION = 0x1,PROCESS_HEAP_UNCOMMITTED_RANGE = 0x2,PROCESS_HEAP_ENTRY_BUSY = 0x4,PROCESS_HEAP_ENTRY_MOVEABLE = 0x10,PROCESS_HEAP_ENTRY_DDESHARE = 0x20,};
enum MACRO_PROPID_QUERY {PROPID_QUERY_WORKID = 5,PROPID_QUERY_UNFILTERED = 7,PROPID_QUERY_VIRTUALPATH = 9,PROPID_QUERY_LASTSEENTIME = 10,};
enum MACRO_PROP_COMMENT {PROP_COMMENT = 0x1,PROP_LOCALE = 0x2,PROP_DISPLAY_HINT = 0x4,PROP_VERSION = 0x8,PROP_START_TIME = 0x10,PROP_MACHINE = 0x20,PROP_ADDRESSES = 0x100,PROP_SD = 0x200,PROP_ALL = 0x80000000,};
enum MACRO_PROTOCOLFLAG {PROTOCOLFLAG_NO_PICS_CHECK = 0x1,};
enum MACRO_PR_CFG_SCHED {PR_CFG_SCHED_SESS = 1728053506,};
enum MACRO_PSTF_FUNCPTR {PSTF_FUNCPTR = 0x1,PSTF_COUNT = 0x0,PSTF_RATE = 0x2,PSTF_FREQ_HIGH = 0x0,PSTF_FREQ_LOW = 0x4,PSTF_FREQ_STATIC = 0x8,PSTF_FREQ_MASK = 0xC,PSTF_SCALE_LINEAR = 0x0,PSTF_SCALE_LOG10 = 0x10,PSTF_SCALE_LOG2 = 0x20,PSTF_SCALE_MASK = 0x30,};
enum MACRO_RASDOWNLEVEL {RASDOWNLEVEL = 10,};
enum MACRO_RELOP_MEMBER {RELOP_MEMBER_OF_DL = 100,};
enum MACRO_RESOURCETYPE {RESOURCETYPE_ANY = 0x0,RESOURCETYPE_DISK = 0x1,RESOURCETYPE_PRINT = 0x2,RESOURCETYPE_RESERVED = 0x8,RESOURCETYPE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_ROUTEBASEEND {ROUTEBASEEND = 939,};
enum MACRO_SETABORTPROC {SETABORTPROC = 9,};
enum MACRO_SETCOPYCOUNT {SETCOPYCOUNT = 17,};
enum MACRO_SETKERNTRACK {SETKERNTRACK = 770,};
enum MACRO_SE_PRIVILEGE {SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1,SE_PRIVILEGE_ENABLED = 0x2,SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000,};
enum MACRO_SINGLE_QUIET {SINGLE_QUIET_NAN_PREFIX = 0x7FC00000,SINGLE_SIGNAL_NAN_PREFIX = 0x7F800000,SINGLE_QUIET_NAN_VALUE = 0xFFC00000,};
enum MACRO_SIZEZOOMSHOW {SIZEZOOMSHOW = 3,SIZEZOOMHIDE = 4,};
enum MACRO_SNMP_MGMTAPI {SNMP_MGMTAPI_TIMEOUT = 40,SNMP_MGMTAPI_SELECT_FDERRORS = 41,SNMP_MGMTAPI_TRAP_ERRORS = 42,SNMP_MGMTAPI_TRAP_DUPINIT = 43,SNMP_MGMTAPI_NOTRAPS = 44,SNMP_MGMTAPI_AGAIN = 45,};
enum MACRO_SOFTKEYBOARD {SOFTKEYBOARD_TYPE_T1 = 0x1,SOFTKEYBOARD_TYPE_C1 = 0x2,};
enum MACRO_SPC_INDIRECT {SPC_INDIRECT_DATA_CONTENT_STRUCT = 2003,};
enum MACRO_SPFILENOTIFY {SPFILENOTIFY_STARTQUEUE = 0x1,SPFILENOTIFY_ENDQUEUE = 0x2,SPFILENOTIFY_STARTSUBQUEUE = 0x3,SPFILENOTIFY_ENDSUBQUEUE = 0x4,SPFILENOTIFY_STARTDELETE = 0x5,SPFILENOTIFY_ENDDELETE = 0x6,SPFILENOTIFY_DELETEERROR = 0x7,SPFILENOTIFY_STARTRENAME = 0x8,SPFILENOTIFY_ENDRENAME = 0x9,SPFILENOTIFY_RENAMEERROR = 0xA,SPFILENOTIFY_STARTCOPY = 0xB,SPFILENOTIFY_ENDCOPY = 0xC,SPFILENOTIFY_COPYERROR = 0xD,SPFILENOTIFY_NEEDMEDIA = 0xE,SPFILENOTIFY_QUEUESCAN = 0xF,SPFILENOTIFY_CABINETINFO = 0x10,SPFILENOTIFY_FILEINCABINET = 0x11,SPFILENOTIFY_NEEDNEWCABINET = 0x12,SPFILENOTIFY_FILEEXTRACTED = 0x13,SPFILENOTIFY_FILEOPDELAYED = 0x14,SPFILENOTIFY_LANGMISMATCH = 0x10000,SPFILENOTIFY_TARGETEXISTS = 0x20000,SPFILENOTIFY_TARGETNEWER = 0x40000,};
enum MACRO_SQLCRSUPDTAB {SQLCRSUPDTAB = 10092,};
enum MACRO_SQLENONFLOAT {SQLENONFLOAT = 10109,};
enum MACRO_SRVVARBINARY {SRVVARBINARY = 37,};
enum MACRO_STDINDEXSIZE {STDINDEXSIZE = 0x4000,};
enum MACRO_STRINGFORMAT {STRINGFORMAT_ASCII = 0x1,STRINGFORMAT_DBCS = 0x2,STRINGFORMAT_UNICODE = 0x3,STRINGFORMAT_BINARY = 0x4,};
enum MACRO_STYLE_ALWAYS {STYLE_ALWAYS_INTERVAL_DEFAULT = 15,REPLICATION_MESSAGE_SIZE_LIMIT_DEFAULT = 100,};
enum MACRO_SYSTEM_AUDIT {SYSTEM_AUDIT_OBJECT_ACE_TYPE = 0x7,SYSTEM_ALARM_OBJECT_ACE_TYPE = 0x8,};
enum MACRO_SYSTEM_ERROR {SYSTEM_ERROR = 0x4000F114,TEMPORARY_ERROR = 0x4000F115,};
enum MACRO_SYSTEM_FIXED {SYSTEM_FIXED_FONT = 16,DEFAULT_GUI_FONT = 17,};
enum MACRO_TCM_GETITEMA {TCM_GETITEMA = 4869,TCM_GETITEMW = 4924,TCM_GETITEM = 4869,TCM_SETITEMA = 4870,TCM_SETITEMW = 4925,TCM_SETITEM = 4870,TCM_INSERTITEMA = 4871,TCM_INSERTITEMW = 4926,TCM_INSERTITEM = 4871,TCM_DELETEITEM = 4872,TCM_DELETEALLITEMS = 4873,TCM_GETITEMRECT = 4874,TCM_GETCURSEL = 4875,TCM_SETCURSEL = 4876,};
enum MACRO_TIME_ONESHOT {TIME_ONESHOT = 0x0,TIME_PERIODIC = 0x1,TIME_CALLBACK_FUNCTION = 0x0,TIME_CALLBACK_EVENT_SET = 0x10,TIME_CALLBACK_EVENT_PULSE = 0x20,};
enum MACRO_TMSTARTRSCAN {TMSTARTRSCAN = 0x1000000,};
enum MACRO_TT_AVAILABLE {TT_AVAILABLE = 0x1,TT_ENABLED = 0x2,};
enum MACRO_UDN_DELTAPOS {UDN_DELTAPOS = -722,};
enum MACRO_USE_RELATIVE {USE_RELATIVE_COLORIMETRIC = 0x20000,};
enum MACRO_USE_SPECIFIC {USE_SPECIFIC_TRANSPORT = 0x80000000,};
enum MACRO_VALID_LOGOFF {VALID_LOGOFF = 1,};
enum MACRO_VARYCHARBIND {VARYCHARBIND = 12,};
enum MACRO_VERSIONFLAGS {VERSIONFLAGS = 10,};
enum MACRO_WAPPCALREADY {WAPPCALREADY = 0xF000,};
enum MACRO_WAPPCINVALID {WAPPCINVALID = 0xF001,};
enum MACRO_WCPICALREADY {WCPICALREADY = 0xF000,};
enum MACRO_WCPICINVALID {WCPICINVALID = 0xF001,};
enum MACRO_WLUALUACTIVE {WLUALUACTIVE = 18,};
enum MACRO_WLUAPUACTIVE {WLUAPUACTIVE = 15,WLUAPUREACTIVATED = 16,};
enum MACRO_WRITES_VALID {RECOVERED_WRITES_VALID = 0x1,UNRECOVERED_WRITES_VALID = 0x2,RECOVERED_READS_VALID = 0x4,UNRECOVERED_READS_VALID = 0x8,WRITE_COMPRESSION_INFO_VALID = 0x10,READ_COMPRESSION_INFO_VALID = 0x20,};
enum MACRO_WSAEHOSTDOWN {WSAEHOSTDOWN = 10064,};
enum MACRO_WSAENETRESET {WSAENETRESET = 10052,};
enum MACRO_WSAENOTEMPTY {WSAENOTEMPTY = 10066,};
enum MACRO_WSAESHUTDOWN {WSAESHUTDOWN = 10058,};
enum MACRO_WSAETIMEDOUT {WSAETIMEDOUT = 10060,};
enum MACRO_X509_UNICODE {X509_UNICODE_NAME = 20,X509_KEYGEN_REQUEST_TO_BE_SIGNED = 21,};
enum MACRO__HEAPBADNODE {_HEAPBADNODE = -4,};
enum MACRO__NLSCMPERROR {_NLSCMPERROR = 2147483647,};
enum MACRO_attDateStart {attDateStart = 0x30006,};
enum MACRO_attMAPIProps {attMAPIProps = 0x69003,};
enum MACRO_attMessageID {attMessageID = 0x18009,};
enum MACRO_cbNDRContext {cbNDRContext = 20,};
enum MACRO_cchMaxNumber {cchMaxNumber = 11,};
enum MACRO_cchMaxServer {cchMaxServer = 16,};
enum MACRO_dispidJumpTo {dispidJumpTo = 2003,};
enum MACRO_dispidResume {dispidResume = 3001,};
enum MACRO_fMapiUnicode {fMapiUnicode = 0,};
enum MACRO_hrColumnLong {hrColumnLong = 0xC80005DD,};
enum MACRO_hrColumnNull {hrColumnNull = 0x880003EC,};
enum MACRO_hrFLDNullKey {hrFLDNullKey = 0x88000192,};
enum MACRO_hrIndexInUse {hrIndexInUse = 0xC800041B,};
enum MACRO_hrKeyChanged {hrKeyChanged = 0x88000652,};
enum MACRO_hrKeyNotMade {hrKeyNotMade = 0xC8000648,};
enum MACRO_hrTableEmpty {hrTableEmpty = 0x88000515,};
enum MACRO_hrTableInUse {hrTableInUse = 0xC8000518,};
enum MACRO_nMaxOrgUnits {nMaxOrgUnits = 4,};
enum MACRO_oledbIDBInfo {oledbIDBInfo = 50039,};
enum MACRO_oledbIRowset {oledbIRowset = 50076,};
enum MACRO_pidFolderMin {pidFolderMin = 0x6638,};
enum MACRO_trpidOffline {trpidOffline = 0x6,};
enum MACRO_xtypeUnknown {xtypeUnknown = 0,xtypeInternet = 6,cbDisplayName = 41,};
typedef struct _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
typedef struct _434864393F5F5FC8FD08DA4EC836A36F MCI_DGV_COPY_PARMS;
typedef struct _81F87192090A4BA4742125C4E2A912AF MCI_DGV_RECT_PARMS;
typedef struct _58E0F274DC6232A5BB94C8FA4256266B MCI_DGV_STEP_PARMS;
typedef struct tagMCI_SYSINFO_PARMSA MCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW MCI_SYSINFO_PARMSW;
typedef struct tagMCI_VCR_LIST_PARMS MCI_VCR_LIST_PARMS;
typedef struct tagMCI_VCR_PLAY_PARMS MCI_VCR_PLAY_PARMS;
typedef struct tagMCI_VCR_SEEK_PARMS MCI_VCR_SEEK_PARMS;
typedef struct tagMCI_VCR_STEP_PARMS MCI_VCR_STEP_PARMS;
typedef struct tagMCI_WAVE_SET_PARMS MCI_WAVE_SET_PARMS;
typedef struct mc_post_on_receipt MC_POST_ON_RECEIPT;
typedef struct mc_request_to_send MC_REQUEST_TO_SEND;
typedef struct _MD_CHANGE_OBJECT_W MD_CHANGE_OBJECT_W;
typedef struct _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
typedef struct tagMIXERLINECONTROLSA MIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW MIXERLINECONTROLSW;
typedef struct mode_def_info_sect MODE_DEF_INFO_SECT;
typedef struct _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
enum MarshalOptionsEnum {adMarshalAll = 0x0,adMarshalModifiedOnly = 0x1,};
typedef struct tagNAMED_PROFILE_INFO NAMED_PROFILE_INFO;
typedef struct tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;
enum NtmsEjectOperation {NTMS_EJECT_START = 0x0,NTMS_EJECT_STOP = 0x1,};
enum NtmsPartitionState {NTMS_PARTSTATE_UNKNOWN = 0x0,NTMS_PARTSTATE_UNPREPARED = 0x1,NTMS_PARTSTATE_INCOMPATIBLE = 0x2,NTMS_PARTSTATE_DECOMMISSIONED = 0x3,NTMS_PARTSTATE_AVAILABLE = 0x4,NTMS_PARTSTATE_ALLOCATED = 0x5,NTMS_PARTSTATE_COMPLETE = 0x6,NTMS_PARTSTATE_FOREIGN = 0x7,NTMS_PARTSTATE_IMPORT = 0x8,NTMS_PARTSTATE_RESERVED = 0x9,};
enum NtmsSessionOptions {NTMS_SESSION_QUERYEXPEDITE = 0x1,};
typedef struct tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef struct tagOLEUICHANGESOURCEA OLEUICHANGESOURCEA;
typedef struct tagOLEUICHANGESOURCEW OLEUICHANGESOURCEW;
typedef struct tagOLEUIINSERTOBJECTA OLEUIINSERTOBJECTA;
typedef struct tagOLEUIINSERTOBJECTW OLEUIINSERTOBJECTW;
typedef struct tagOLEUIPASTESPECIALA OLEUIPASTESPECIALA;
typedef struct tagOLEUIPASTESPECIALW OLEUIPASTESPECIALW;
typedef float OLE_XPOS_CONTAINER;
typedef float OLE_YPOS_CONTAINER;
typedef struct oliadpcmwaveformat_tag OLIADPCMWAVEFORMAT;
typedef struct _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
struct OldHTMLFormElement;
typedef struct tACMDRIVERDETAILSA *PACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW *PACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA *PACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW *PACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA *PACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW *PACMFORMATDETAILSW;
typedef struct __MIDL___MIDL__intf_0000_0003 *PADS_PROV_SPECIFIC;
typedef struct ads_search_column *PADS_SEARCH_COLUMN;
typedef union _Alpha_Instruction *PALPHA_INSTRUCTION;
typedef IAMPhysicalPinInfo *PAMPHYSICALPININFO;
typedef struct _AM_DVDCOPY_BUSKEY *PAM_DVDCOPY_BUSKEY;
typedef struct _AM_PROPERTY_SPHLI *PAM_PROPERTY_SPHLI;
typedef struct _AM_PROPERTY_SPPAL *PAM_PROPERTY_SPPAL;
typedef struct BasicAudCapInfo *PBASIC_AUDCAP_INFO;
typedef struct BasicVidCapInfo *PBASIC_VIDCAP_INFO;
typedef struct _CTL_USAGE *PCERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;
typedef CLUSPROP_SZ *PCLUSPROP_MULTI_SZ;
typedef struct CLUS_SCSI_ADDRESS *PCLUS_SCSI_ADDRESS;
typedef struct tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;
typedef struct _CONNECTION_INFO_0 *PCONNECTION_INFO_0;
typedef struct _CONNECTION_INFO_1 *PCONNECTION_INFO_1;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;
typedef struct _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;
typedef struct _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;
typedef struct _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;
typedef struct tagABORTPATH *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;
typedef struct tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;
typedef struct _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;
typedef struct _PERF_COUNTER_BLOCK PERF_COUNTER_BLOCK;
typedef struct _ERRLOG_OTHER_INFO *PERRLOG_OTHER_INFO;
typedef struct _EXPLICIT_ACCESS_A *PEXPLICIT_ACCESS_A;
typedef struct _EXPLICIT_ACCESS_W *PEXPLICIT_ACCESS_W;
typedef struct _FLT_IF_GET_PARAMS *PFLT_IF_GET_PARAMS;
typedef struct _FLT_IF_SET_PARAMS *PFLT_IF_SET_PARAMS;
typedef struct _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;
typedef struct _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;
typedef IAMTimecodeReader *PIAMTIMECODEREADER;
typedef IActiveScriptSite *PIActiveScriptSite;
typedef struct _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;
typedef struct _IPX_SPECIFIC_DATA *PIPX_SPECIFIC_DATA;
typedef struct _DCCCDBDB2D2AC461237A75FB18C0449E *PKSCORRELATED_TIME;
typedef struct _A07373D2A5755254DCD028456AB4EC3B *PKSEVENT_TIME_MARK;
typedef struct _0E076CBD8F5A7ED08B697C5009EDFCFF *PKSPROPERTY_SERIAL;
typedef struct _91BF47EF3F45CCDAE56826EECF9B1EE8 *PKSQUALITY_MANAGER;
typedef struct _26873349DB0A36B1F3161FA857CA70AC *PKSRATE_CAPABILITY;
typedef struct ldap_version_info *PLDAP_VERSION_INFO;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct _3E43CC221FCFDCE5A8A514736F12696C *PLLC_RECEIVE_PARMS;
typedef struct _LOCALGROUP_INFO_0 *PLOCALGROUP_INFO_0;
typedef struct _LOCALGROUP_INFO_1 *PLOCALGROUP_INFO_1;
typedef struct tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;
typedef struct _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct _NET_DISPLAY_GROUP *PNET_DISPLAY_GROUP;
typedef struct tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;
typedef struct tagOLEUIOBJECTPROPSA *POLEUIOBJECTPROPSA;
typedef struct tagOLEUIOBJECTPROPSW *POLEUIOBJECTPROPSW;
typedef struct _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;
typedef struct _RAS_SECURITY_INFO *PRAS_SECURITY_INFO;
typedef struct prepare_to_receive PREPARE_TO_RECEIVE;
typedef struct _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
typedef struct _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
typedef struct _SERVICE_ADDRESSES *PSERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO *PSERVICE_TYPE_INFO;
typedef struct _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;
typedef struct SIP_INDIRECT_DATA_ *PSIP_INDIRECT_DATA;
typedef struct _SP_DRVINFO_DATA_A *PSP_DRVINFO_DATA_A;
typedef struct _SP_DRVINFO_DATA_W *PSP_DRVINFO_DATA_W;
typedef struct _SP_MOVEDEV_PARAMS *PSP_MOVEDEV_PARAMS;
typedef struct _SUPPORT_FUNCTIONS *PSUPPORT_FUNCTIONS;
typedef struct _TAPE_GET_POSITION *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION *PTAPE_SET_POSITION;
typedef struct tagUNDETERMINESTRUCT *PUNDETERMINESTRUCT;
typedef struct _WKSTA_USER_INFO_0 *PWKSTA_USER_INFO_0;
typedef struct _WKSTA_USER_INFO_1 *PWKSTA_USER_INFO_1;
typedef union _644E466E06576D194C6182F3C91B6C45 *PWSH_ATALK_ADDRESS;
typedef struct _RAS_AUTH_ATTRIBUTE RAS_AUTH_ATTRIBUTE;
typedef struct _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
typedef struct _27240A871129E8C5EF2505ED059D4BC8 RPC_DISPATCH_TABLE;
typedef struct __MIDL_TriggerPublicRPC_0003 RPC_SERVICE_STATUS;
typedef struct _RSVP_FILTERSPEC_V4 RSVP_FILTERSPEC_V4;
typedef struct _RSVP_FILTERSPEC_V6 RSVP_FILTERSPEC_V6;
typedef struct _RTCP_SENDER_REPORT RTCP_SENDER_REPORT;
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
typedef struct _SEC_OBJECT_ELEMENT SEC_OBJECT_ELEMENT;
typedef struct _SERVICE_ASYNC_INFO SERVICE_ASYNC_INFO;
typedef struct _SERVICE_TYPE_VALUE SERVICE_TYPE_VALUE;
typedef struct _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
typedef struct _SLargeIntegerArray SLargeIntegerArray;
typedef struct _DF483159CAAEA82745063FD51FDE02D7 SMAPIFormInfoArray;
typedef struct _29CD99F8CA239F4FFB76FBF32B00C866 SMAPIFormPropArray;
typedef struct _74061E8FA51BA29473CFAA122BBAB1AC SMessageClassArray;
typedef struct _SP_INF_INFORMATION SP_INF_INFORMATION;
typedef struct _SQL_CONNECT_PARAMS SQL_CONNECT_PARAMS;
typedef struct tagSQL_NUMERIC_STRUCT SQL_NUMERIC_STRUCT;
typedef struct _STAT_WORKSTATION_0 STAT_WORKSTATION_0;
typedef struct _TABLE_NOTIFICATION TABLE_NOTIFICATION;
typedef struct _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
typedef union _TRIGGER_TYPE_UNION TRIGGER_TYPE_UNION;
struct TransactionContext;
typedef struct _USER_MODALS_INFO_0 USER_MODALS_INFO_0;
typedef struct _USER_MODALS_INFO_1 USER_MODALS_INFO_1;
typedef struct _USER_MODALS_INFO_2 USER_MODALS_INFO_2;
typedef struct _USER_MODALS_INFO_3 USER_MODALS_INFO_3;
typedef struct _VERIFY_INFORMATION VERIFY_INFORMATION;
typedef struct WINTRUST_BLOB_INFO_ WINTRUST_BLOB_INFO;
typedef struct WINTRUST_CERT_INFO_ WINTRUST_CERT_INFO;
typedef struct WINTRUST_FILE_INFO_ WINTRUST_FILE_INFO;
typedef struct WINTRUST_SGNR_INFO_ WINTRUST_SGNR_INFO;
typedef struct _WSANAMESPACE_INFOA WSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW WSANAMESPACE_INFOW;
enum XACT_DTC_CONSTANTS {XACT_E_CONNECTION_REQUEST_DENIED = 0x8004D100,XACT_E_TOOMANY_ENLISTMENTS = 0x8004D101,XACT_E_DUPLICATE_GUID = 0x8004D102,XACT_E_NOTSINGLEPHASE = 0x8004D103,XACT_E_RECOVERYALREADYDONE = 0x8004D104,XACT_E_PROTOCOL = 0x8004D105,XACT_E_RM_FAILURE = 0x8004D106,XACT_E_RECOVERY_FAILED = 0x8004D107,XACT_E_LU_NOT_FOUND = 0x8004D108,XACT_E_DUPLICATE_LU = 0x8004D109,XACT_E_LU_NOT_CONNECTED = 0x8004D10A,XACT_E_DUPLICATE_TRANSID = 0x8004D10B,XACT_E_LU_BUSY = 0x8004D10C,XACT_E_LU_NO_RECOVERY_PROCESS = 0x8004D10D,XACT_E_LU_DOWN = 0x8004D10E,XACT_E_LU_RECOVERING = 0x8004D10F,XACT_E_LU_RECOVERY_MISMATCH = 0x8004D110,XACT_S_NONOTIFY = 0x4D100,XACT_OK_NONOTIFY = 0x4D101,dwUSER_MS_SQLSERVER = 0xFFFF,};
struct _ADODynaCollection {struct _ADODynaCollectionVtbl *lpVtbl;};
enum _AM_RENSDEREXFLAGS {AM_RENDEREX_RENDERTOEXISTINGRENDERERS = 0x1,};
struct _Alpha_FpOp_Format {unsigned int Fc : 5;unsigned int Function : 11;unsigned int Fb : 5;unsigned int Fa : 5;unsigned int Opcode : 6;};
struct _Alpha_Jump_Format {int Hint : 14;unsigned int Function : 2;unsigned int Rb : 5;unsigned int Ra : 5;unsigned int Opcode : 6;};
enum _D3DLIGHTSTATETYPE {D3DLIGHTSTATE_MATERIAL = 0x1,D3DLIGHTSTATE_AMBIENT = 0x2,D3DLIGHTSTATE_COLORMODEL = 0x3,D3DLIGHTSTATE_FOGMODE = 0x4,D3DLIGHTSTATE_FOGSTART = 0x5,D3DLIGHTSTATE_FOGEND = 0x6,D3DLIGHTSTATE_FOGDENSITY = 0x7,D3DLIGHTSTATE_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DRMMATERIALMODE {D3DRMMATERIAL_FROMMESH = 0x0,D3DRMMATERIAL_FROMPARENT = 0x1,D3DRMMATERIAL_FROMFRAME = 0x2,};
struct _D3DRMPALETTEENTRY {unsigned char red;unsigned char green;unsigned char blue;unsigned char flags;};
enum _D3DRMPALETTEFLAGS {D3DRMPALETTE_FREE = 0x0,D3DRMPALETTE_READONLY = 0x1,D3DRMPALETTE_RESERVED = 0x2,};
enum _D3DTEXTUREADDRESS {D3DTADDRESS_WRAP = 0x1,D3DTADDRESS_MIRROR = 0x2,D3DTADDRESS_CLAMP = 0x3,D3DTADDRESS_BORDER = 0x4,D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,};
struct _DTUNE_TVX_CONTROL {struct _DTUNE_TVX_CONTROLVtbl *lpVtbl;};
enum _FINDEX_SEARCH_OPS {FindExSearchNameMatch = 0x0,FindExSearchLimitToDirectories = 0x1,FindExSearchLimitToDevices = 0x2,FindExSearchMaxSearchOp = 0x3,};
struct _FLAGGED_WORD_BLOB {unsigned int fFlags;unsigned int clSize;unsigned short asData[1];};
struct _RASTERIZER_STATUS {short nSize;short wFlags;short nLanguageID;};
struct _SINGLE_LIST_ENTRY {struct _SINGLE_LIST_ENTRY *Next;};
enum _SecDelegationType {SecFull = 0x0,SecService = 0x1,SecTree = 0x2,SecDirectory = 0x3,SecObject = 0x4,};
enum _TASK_TRIGGER_TYPE {TASK_TIME_TRIGGER_ONCE = 0x0,TASK_TIME_TRIGGER_DAILY = 0x1,TASK_TIME_TRIGGER_WEEKLY = 0x2,TASK_TIME_TRIGGER_MONTHLYDATE = 0x3,TASK_TIME_TRIGGER_MONTHLYDOW = 0x4,TASK_EVENT_TRIGGER_ON_IDLE = 0x5,TASK_EVENT_TRIGGER_AT_SYSTEMSTART = 0x6,TASK_EVENT_TRIGGER_AT_LOGON = 0x7,};
enum __MIDL_IHlink_0001 {HLNF_INTERNALJUMP = 0x1,HLNF_OPENINNEWWINDOW = 0x2,HLNF_NAVIGATINGBACK = 0x4,HLNF_NAVIGATINGFORWARD = 0x8,HLNF_NAVIGATINGTOSTACKITEM = 0x10,HLNF_CREATENOHISTORY = 0x20,};
enum __MIDL_IHlink_0002 {HLINKGETREF_DEFAULT = 0x0,HLINKGETREF_ABSOLUTE = 0x1,HLINKGETREF_RELATIVE = 0x2,};
enum __MIDL_IHlink_0003 {HLFNAMEF_DEFAULT = 0x0,HLFNAMEF_TRYCACHE = 0x1,HLFNAMEF_TRYPRETTYTARGET = 0x2,HLFNAMEF_TRYFULLTARGET = 0x4,HLFNAMEF_TRYWIN95SHORTCUT = 0x8,};
enum __MIDL_IHlink_0004 {HLINKMISC_RELATIVE = 0x1,};
enum __MIDL_IHlink_0005 {HLINKSETF_TARGET = 0x1,HLINKSETF_LOCATION = 0x2,};
enum __MIDL_IPrint_0001 {PRINTFLAG_MAYBOTHERUSER = 0x1,PRINTFLAG_PROMPTUSER = 0x2,PRINTFLAG_USERMAYCHANGEPRINTER = 0x4,PRINTFLAG_RECOMPOSETODEVICE = 0x8,PRINTFLAG_DONTACTUALLYPRINT = 0x10,PRINTFLAG_FORCEPROPERTIES = 0x20,PRINTFLAG_PRINTTOFILE = 0x40,};
struct copy_trace_to_file {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char reserv3[8];unsigned char file_name[64];unsigned char file_option;unsigned char reserv4[12];};
struct link_def_info_sect {unsigned int link_def_init_sect_len;unsigned short num_link_def;unsigned short total_link_def;};
struct mc_post_on_receipt {unsigned short opcode;unsigned char opext;unsigned char reserv1;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short reserv2;unsigned char reserv3;unsigned char reserv4;unsigned short max_len;unsigned short reserv5;unsigned char *reserv6;unsigned char reserv7[5];unsigned int sema;};
struct mc_request_to_send {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
struct mode_def_info_sect {unsigned int mode_def_init_sect_len;unsigned short num_mode_def;unsigned short total_mode_def;};
struct prepare_to_receive {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char ptr_type;unsigned char locks;};
typedef struct _remoteMETAFILEPICT remoteMETAFILEPICT;
struct set_user_log_queue {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char reserv3[8];unsigned char queue_name[64];unsigned char forward;unsigned char suppress;unsigned char selection;unsigned short numbers[10];};
enum tagAMTunerModeType {AMTUNER_MODE_DEFAULT = 0x0,AMTUNER_MODE_TV = 0x1,AMTUNER_MODE_FM_RADIO = 0x2,AMTUNER_MODE_AM_RADIO = 0x4,AMTUNER_MODE_DSS = 0x8,};
enum tagCHUNK_BREAKTYPE {CHUNK_NO_BREAK = 0x0,CHUNK_EOW = 0x1,CHUNK_EOS = 0x2,CHUNK_EOP = 0x3,CHUNK_EOC = 0x4,};
enum tagDCOM_CALL_STATE {DCOM_NONE = 0x0,DCOM_CALL_COMPLETE = 0x1,DCOM_CALL_CANCELED = 0x2,};
enum tagDOCHOSTUIDBLCLK {DOCHOSTUIDBLCLK_DEFAULT = 0x0,DOCHOSTUIDBLCLK_SHOWPROPERTIES = 0x1,DOCHOSTUIDBLCLK_SHOWCODE = 0x2,};
enum tagPOINTERINACTIVE {POINTERINACTIVE_ACTIVATEONENTRY = 0x1,POINTERINACTIVE_DEACTIVATEONLEAVE = 0x2,POINTERINACTIVE_ACTIVATEONDRAG = 0x4,};
typedef struct _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
typedef struct _683A07C7E5B3B29A9EBE9FB3AE677E07 AAL_PARAMETERS_IE;
typedef struct _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
typedef struct tACMDRIVERDETAILSA ACMDRIVERDETAILSA;
typedef struct tACMDRIVERDETAILSW ACMDRIVERDETAILSW;
typedef struct tACMFILTERDETAILSA ACMFILTERDETAILSA;
typedef struct tACMFILTERDETAILSW ACMFILTERDETAILSW;
typedef struct tACMFORMATDETAILSA ACMFORMATDETAILSA;
typedef struct tACMFORMATDETAILSW ACMFORMATDETAILSW;
typedef struct adapter_info_sect ADAPTER_INFO_SECT;
typedef struct __MIDL___MIDL__intf_0000_0003 ADS_PROV_SPECIFIC;
typedef struct ads_search_column ADS_SEARCH_COLUMN;
typedef struct _AD_GENERAL_PARAMS AD_GENERAL_PARAMS;
typedef unsigned int AFTP_BOOLEAN_TYPE;
typedef unsigned int AFTP_VERSION_TYPE;
typedef union _Alpha_Instruction ALPHA_INSTRUCTION;
typedef struct alt_alias_overlay ALT_ALIAS_OVERLAY;
typedef struct _AM_DVDCOPY_BUSKEY AM_DVDCOPY_BUSKEY;
typedef struct tagAM_MPEGSTREAMTYPE AM_MPEGSTREAMTYPE;
typedef struct tagAM_MPEGSYSTEMTYPE AM_MPEGSYSTEMTYPE;
typedef struct _AM_PROPERTY_SPHLI AM_PROPERTY_SPHLI;
typedef struct _AM_PROPERTY_SPPAL AM_PROPERTY_SPPAL;
typedef struct _362ECF3E0DC92881BF24984B329406EC ATM_CONNECTION_ID;
typedef struct _avistdindex_entry AVISTDINDEX_ENTRY;
typedef struct _Alpha_FpOp_Format Alpha_FpOp_Format;
typedef struct _Alpha_Jump_Format Alpha_Jump_Format;
typedef struct BasicAudCapInfo BASIC_AUDCAP_INFO;
typedef struct BasicVidCapInfo BASIC_VIDCAP_INFO;
typedef struct tagBDN_HARDWARE_ADDR BDN_HARDWARE_ADDR;
typedef struct _F10EAF12E46EBA994735C587F3E497C7 C2JMethodHookInfo;
typedef struct tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
struct CCertServerPolicy;
typedef struct _CTL_USAGE CERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO CERT_REQUEST_INFO;
typedef struct tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
typedef CLUSPROP_SZ CLUSPROP_MULTI_SZ;
enum CLUSTER_NODE_ENUM {CLUSTER_NODE_ENUM_NETINTERFACES = 0x1,CLUSTER_NODE_ENUM_ALL = 0x1,};
typedef struct _4874CB709CB649921F75355CBB4A6CDD CMC_X_COM_support;
typedef signed int CM_RETURN_CONTROL;
typedef struct tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
typedef struct _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
typedef struct _CONNECTION_INFO_0 CONNECTION_INFO_0;
typedef struct _CONNECTION_INFO_1 CONNECTION_INFO_1;
typedef struct _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB;
typedef struct _CRYPT_OBJID_TABLE CRYPT_OBJID_TABLE;
struct CatalogCollection;
struct ClusNetInterfaces {struct ClusNetInterfacesVtbl *lpVtbl;};
struct ClusObjCollection {struct ClusObjCollectionVtbl *lpVtbl;};
enum ConnectOptionEnum {adConnectUnspecified = 0xFFFFFFFF,adAsyncConnect = 0x10,};
enum ConnectPromptEnum {adPromptAlways = 0x1,adPromptComplete = 0x2,adPromptCompleteRequired = 0x3,adPromptNever = 0x4,};
typedef struct _D3DMATRIXMULTIPLY D3DMATRIXMULTIPLY;
typedef struct _D3DRMLOADRESOURCE D3DRMLOADRESOURCE;
typedef struct _D3DRMPALETTEENTRY D3DRMPALETTEENTRY;
typedef struct _DATATYPES_INFO_1A DATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W DATATYPES_INFO_1W;
enum DBASYNCHPHASEENUM {DBASYNCHPHASE_INITIALIZATION = 0x0,DBASYNCHPHASE_POPULATION = 0x1,DBASYNCHPHASE_COMPLETE = 0x2,DBASYNCHPHASE_CANCELED = 0x3,};
enum DBCOLUMNFLAGSENUM {DBCOLUMNFLAGS_ISBOOKMARK = 0x1,DBCOLUMNFLAGS_MAYDEFER = 0x2,DBCOLUMNFLAGS_WRITE = 0x4,DBCOLUMNFLAGS_WRITEUNKNOWN = 0x8,DBCOLUMNFLAGS_ISFIXEDLENGTH = 0x10,DBCOLUMNFLAGS_ISNULLABLE = 0x20,DBCOLUMNFLAGS_MAYBENULL = 0x40,DBCOLUMNFLAGS_ISLONG = 0x80,DBCOLUMNFLAGS_ISROWID = 0x100,DBCOLUMNFLAGS_ISROWVER = 0x200,DBCOLUMNFLAGS_CACHEDEFERRED = 0x1000,};
enum DBDATACONVERTENUM {DBDATACONVERT_DEFAULT = 0x0,DBDATACONVERT_SETDATABEHAVIOR = 0x1,DBDATACONVERT_LENGTHFROMNTS = 0x2,};
typedef struct tagDBINDEXCOLUMNDESC DBINDEXCOLUMNDESC;
enum DBPROPFLAGSENUM21 {DBPROPFLAGS_TRUSTEE = 0x2000,};
enum DBPROPOPTIONSENUM {DBPROPOPTIONS_REQUIRED = 0x0,DBPROPOPTIONS_SETIFCHEAP = 0x1,DBPROPOPTIONS_OPTIONAL = 0x1,};
enum DBROWSTATUSENUM20 {DBROWSTATUS_S_NOCHANGE = 0x14,};
enum DBWATCHNOTIFYENUM {DBWATCHNOTIFY_ROWSCHANGED = 0x1,DBWATCHNOTIFY_QUERYDONE = 0x2,DBWATCHNOTIFY_QUERYREEXECUTED = 0x3,};
typedef struct _DDVIDEOPORTSTATUS DDVIDEOPORTSTATUS;
typedef struct _DEVICE_MEDIA_INFO DEVICE_MEDIA_INFO;
typedef struct _DEV_BROADCAST_HDR DEV_BROADCAST_HDR;
typedef struct _DEV_BROADCAST_NET DEV_BROADCAST_NET;
typedef struct _DEV_BROADCAST_OEM DEV_BROADCAST_OEM;
typedef struct digifixwaveformat_tag DIGIFIXWAVEFORMAT;
typedef struct digistdwaveformat_tag DIGISTDWAVEFORMAT;
typedef struct _DSBPOSITIONNOTIFY DSBPOSITIONNOTIFY;
struct DWebBrowserEvents {struct DWebBrowserEventsVtbl *lpVtbl;};
struct DispIHTMLSpanFlow {struct DispIHTMLSpanFlowVtbl *lpVtbl;};
struct DispIHTMLTableCol {struct DispIHTMLTableColVtbl *lpVtbl;};
struct DispIHTMLTableRow {struct DispIHTMLTableRowVtbl *lpVtbl;};
typedef struct echosc1waveformat_tag ECHOSC1WAVEFORMAT;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
typedef struct tagABORTPATH EMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
typedef struct tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
typedef struct _ENCRYPTION_BUFFER ENCRYPTION_BUFFER;
typedef struct _ERRLOG_OTHER_INFO ERRLOG_OTHER_INFO;
typedef struct _EXPLICIT_ACCESS_A EXPLICIT_ACCESS_A;
typedef struct _EXPLICIT_ACCESS_W EXPLICIT_ACCESS_W;
enum ExecuteOptionEnum {adOptionUnspecified = 0xFFFFFFFF,adAsyncExecute = 0x10,adAsyncFetch = 0x20,adAsyncFetchNonBlocking = 0x40,adExecuteNoRecords = 0x80,};
typedef struct _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
typedef struct _FLT_IF_GET_PARAMS FLT_IF_GET_PARAMS;
typedef struct _FLT_IF_SET_PARAMS FLT_IF_SET_PARAMS;
typedef struct _FMS_GETDRIVEINFOA FMS_GETDRIVEINFOA;
typedef struct _FMS_GETDRIVEINFOW FMS_GETDRIVEINFOW;
typedef struct _FORMAT_PARAMETERS FORMAT_PARAMETERS;
typedef struct get_tp_properties GET_TP_PROPERTIES;
typedef void ( *GLUtessVertexProc)(void *);
typedef struct _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
typedef struct _7644B9603AEA08EBF4DF4A983BB6B237 GOPHER_FIND_DATAA;
typedef struct _17CA7839736B8F73357CD165DBE52F18 GOPHER_FIND_DATAW;
typedef struct _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
enum GetRowsOptionEnum {adGetRowsRest = 0xFFFFFFFF,};
typedef void *HCRYPTOIDFUNCADDR;
struct HTMLAnchorElement;
struct HTMLButtonElement;
struct HTMLElementEvents {struct HTMLElementEventsVtbl *lpVtbl;};
struct HTMLHeaderElement;
struct HTMLLegendElement;
struct HTMLNextIdElement;
struct HTMLNoShowElement;
struct HTMLObjectElement;
struct HTMLOptionElement;
struct HTMLPhraseElement;
struct HTMLScriptElement;
struct HTMLSelectElement;
struct HTMLStyleFontFace;
typedef struct _D692CA7460863103343173F071E8F66B HTTP_VERSION_INFO;
struct IADsPropertyEntry {struct IADsPropertyEntryVtbl *lpVtbl;};
struct IADsPropertyValue {struct IADsPropertyValueVtbl *lpVtbl;};
struct IAMNetShowExProps {struct IAMNetShowExPropsVtbl *lpVtbl;};
struct IAMTimecodeReader {struct IAMTimecodeReaderVtbl *lpVtbl;};
struct IASQLOLEDBObjects;
struct IASQLOLEDatabases {struct IASQLOLEDatabasesVtbl *lpVtbl;};
struct IASQLOLEExecutive {struct IASQLOLEExecutiveVtbl *lpVtbl;};
struct IASQLOLELanguages {struct IASQLOLELanguagesVtbl *lpVtbl;};
struct IASQLOLEOperators {struct IASQLOLEOperatorsVtbl *lpVtbl;};
struct IASQLOLEStdObject {struct IASQLOLEStdObjectVtbl *lpVtbl;};
struct IActiveScriptSite {struct IActiveScriptSiteVtbl *lpVtbl;};
struct IAgentCtlCommands {struct IAgentCtlCommandsVtbl *lpVtbl;};
struct IAudioMediaStream {struct IAudioMediaStreamVtbl *lpVtbl;};
struct IBindEventHandler {struct IBindEventHandlerVtbl *lpVtbl;};
struct ICertServerPolicy {struct ICertServerPolicyVtbl *lpVtbl;};
struct IContinueCallback {struct IContinueCallbackVtbl *lpVtbl;};
struct IDataAdviseHolder {struct IDataAdviseHolderVtbl *lpVtbl;};
struct IDirect3DMaterial {struct IDirect3DMaterialVtbl *lpVtbl;};
struct IDirect3DRMDevice {struct IDirect3DRMDeviceVtbl *lpVtbl;};
struct IDirect3DRMFrame2 {struct IDirect3DRMFrame2Vtbl *lpVtbl;};
struct IDirect3DRMObject {struct IDirect3DRMObjectVtbl *lpVtbl;};
struct IDirect3DRMShadow {struct IDirect3DRMShadowVtbl *lpVtbl;};
struct IDirect3DRMVisual {struct IDirect3DRMVisualVtbl *lpVtbl;};
struct IDirect3DTexture2 {struct IDirect3DTexture2Vtbl *lpVtbl;};
struct IDirect3DViewport {struct IDirect3DViewportVtbl *lpVtbl;};
struct IDirectDrawKernel {struct IDirectDrawKernelVtbl *lpVtbl;};
struct IDirectPlayLobby2 {struct IDirectPlayLobby2Vtbl *lpVtbl;};
typedef struct IDirectPlayLobby IDirectPlayLobbyA;
struct IDirectShowStream {struct IDirectShowStreamVtbl *lpVtbl;};
struct IDirectWriterLock {struct IDirectWriterLockVtbl *lpVtbl;};
struct IDispenserManager {struct IDispenserManagerVtbl *lpVtbl;};
struct IDocHostUIHandler {struct IDocHostUIHandlerVtbl *lpVtbl;};
struct IEnumCATEGORYINFO {struct IEnumCATEGORYINFOVtbl *lpVtbl;};
struct IEnumJAVAPROPERTY {struct IEnumJAVAPROPERTYVtbl *lpVtbl;};
struct IEnumOleUndoUnits {struct IEnumOleUndoUnitsVtbl *lpVtbl;};
struct IEnumRemoteObject {struct IEnumRemoteObjectVtbl *lpVtbl;};
struct IEnumRemoteThread {struct IEnumRemoteThreadVtbl *lpVtbl;};
struct IFileSourceFilter {struct IFileSourceFilterVtbl *lpVtbl;};
struct IGetClusterUIInfo {struct IGetClusterUIInfoVtbl *lpVtbl;};
struct IH26XVideoEffects {struct IH26XVideoEffectsVtbl *lpVtbl;};
struct IHTMLBlockElement {struct IHTMLBlockElementVtbl *lpVtbl;};
struct IHTMLControlRange {struct IHTMLControlRangeVtbl *lpVtbl;};
struct IHTMLDListElement {struct IHTMLDListElementVtbl *lpVtbl;};
struct IHTMLEmbedElement {struct IHTMLEmbedElementVtbl *lpVtbl;};
struct IHTMLFrameElement {struct IHTMLFrameElementVtbl *lpVtbl;};
struct IHTMLLabelElement {struct IHTMLLabelElementVtbl *lpVtbl;};
struct IHTMLOListElement {struct IHTMLOListElementVtbl *lpVtbl;};
struct IHTMLStyleElement {struct IHTMLStyleElementVtbl *lpVtbl;};
struct IHTMLTableCaption {struct IHTMLTableCaptionVtbl *lpVtbl;};
struct IHTMLTableSection {struct IHTMLTableSectionVtbl *lpVtbl;};
struct IHTMLTitleElement {struct IHTMLTitleElementVtbl *lpVtbl;};
struct IHTMLUListElement {struct IHTMLUListElementVtbl *lpVtbl;};
struct IInternetBindInfo {struct IInternetBindInfoVtbl *lpVtbl;};
struct IInternetPriority {struct IInternetPriorityVtbl *lpVtbl;};
struct IInternetProtocol {struct IInternetProtocolVtbl *lpVtbl;};
struct IJavaDebugManager {struct IJavaDebugManagerVtbl *lpVtbl;};
struct IJavaEnumLINEINFO {struct IJavaEnumLINEINFOVtbl *lpVtbl;};
typedef struct _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
struct IMSAdminBaseSinkW {struct IMSAdminBaseSinkWVtbl *lpVtbl;};
struct IMediaPropertyBag {struct IMediaPropertyBagVtbl *lpVtbl;};
struct IMpegAudioDecoder {struct IMpegAudioDecoderVtbl *lpVtbl;};
struct IMtsPackageEvents {struct IMtsPackageEventsVtbl *lpVtbl;};
struct IMultiMediaStream {struct IMultiMediaStreamVtbl *lpVtbl;};
typedef struct _INTERNET_BUFFERSA INTERNET_BUFFERSA;
typedef struct _INTERNET_BUFFERSW INTERNET_BUFFERSW;
struct INewShortcutHookA {struct INewShortcutHookAVtbl *lpVtbl;};
struct INewShortcutHookW {struct INewShortcutHookWVtbl *lpVtbl;};
struct IOleCommandTarget {struct IOleCommandTargetVtbl *lpVtbl;};
struct IOleInPlaceObject {struct IOleInPlaceObjectVtbl *lpVtbl;};
struct IOleInPlaceSiteEx {struct IOleInPlaceSiteExVtbl *lpVtbl;};
struct IOleItemContainer {struct IOleItemContainerVtbl *lpVtbl;};
typedef struct _IPX_SPECIFIC_DATA IPX_SPECIFIC_DATA;
struct IParseDisplayName {struct IParseDisplayNameVtbl *lpVtbl;};
struct IPropertyPageSite {struct IPropertyPageSiteVtbl *lpVtbl;};
struct IProvideClassInfo {struct IProvideClassInfoVtbl *lpVtbl;};
struct IRemoteArrayField {struct IRemoteArrayFieldVtbl *lpVtbl;};
struct IRemoteByteObject {struct IRemoteByteObjectVtbl *lpVtbl;};
struct IRemoteCharObject {struct IRemoteCharObjectVtbl *lpVtbl;};
struct IRemoteClassField {struct IRemoteClassFieldVtbl *lpVtbl;};
struct IRemoteLongObject {struct IRemoteLongObjectVtbl *lpVtbl;};
struct IRemoteStackFrame {struct IRemoteStackFrameVtbl *lpVtbl;};
struct IResourceConsumer {struct IResourceConsumerVtbl *lpVtbl;};
struct IRowsetNextRowset {struct IRowsetNextRowsetVtbl *lpVtbl;};
struct IRpcChannelBuffer {struct IRpcChannelBufferVtbl *lpVtbl;};
struct IScriptingContext {struct IScriptingContextVtbl *lpVtbl;};
struct ISecurityProperty {struct ISecurityPropertyVtbl *lpVtbl;};
struct ISequentialStream {struct ISequentialStreamVtbl *lpVtbl;};
struct IShellIconOverlay {struct IShellIconOverlayVtbl *lpVtbl;};
struct ISupportErrorInfo {struct ISupportErrorInfoVtbl *lpVtbl;};
struct ISynchronizeEvent {struct ISynchronizeEventVtbl *lpVtbl;};
struct ISynchronizeMutex {struct ISynchronizeMutexVtbl *lpVtbl;};
struct ITMediaCollection {struct ITMediaCollectionVtbl *lpVtbl;};
struct ITParticipantInfo {struct ITParticipantInfoVtbl *lpVtbl;};
struct ITTerminalManager {struct ITTerminalManagerVtbl *lpVtbl;};
struct ITTerminalSupport {struct ITTerminalSupportVtbl *lpVtbl;};
struct ITVControlPrivate {struct ITVControlPrivateVtbl *lpVtbl;};
struct ITransactionLocal {struct ITransactionLocalVtbl *lpVtbl;};
struct ITypeChangeEvents {struct ITypeChangeEventsVtbl *lpVtbl;};
struct IUrlHistoryNotify {struct IUrlHistoryNotifyVtbl *lpVtbl;};
struct IWCWizardCallback {struct IWCWizardCallbackVtbl *lpVtbl;};
typedef struct _89421D30547F23217914C1D2E90C706A J2CMethodHookInfo;
typedef struct _DCCCDBDB2D2AC461237A75FB18C0449E KSCORRELATED_TIME;
typedef struct _A07373D2A5755254DCD028456AB4EC3B KSEVENT_TIME_MARK;
typedef struct _0E076CBD8F5A7ED08B697C5009EDFCFF KSPROPERTY_SERIAL;
typedef struct _91BF47EF3F45CCDAE56826EECF9B1EE8 KSQUALITY_MANAGER;
typedef struct _26873349DB0A36B1F3161FA857CA70AC KSRATE_CAPABILITY;
typedef struct ldap_version_info LDAP_VERSION_INFO;
typedef struct lineaddressstatus_tag LINEADDRESSSTATUS;
typedef struct linelocationentry_tag LINELOCATIONENTRY;
typedef struct lineproviderentry_tag LINEPROVIDERENTRY;
typedef struct linereqmediacallW_tag LINEREQMEDIACALLW;
typedef struct linetranslatecaps_tag LINETRANSLATECAPS;
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef struct _3E43CC221FCFDCE5A8A514736F12696C LLC_RECEIVE_PARMS;
typedef struct _LOCALGROUP_INFO_0 LOCALGROUP_INFO_0;
typedef struct _LOCALGROUP_INFO_1 LOCALGROUP_INFO_1;
typedef struct tACMSTREAMHEADER *LPACMSTREAMHEADER;
typedef struct _AE_RESACCESSREJ *LPAE_RESACCESSREJ;
typedef struct IASQLOLEArticles *LPASQLOLEARTICLES;
typedef struct IASQLOLEBulkCopy *LPASQLOLEBULKCOPY;
typedef struct IASQLOLEDatabase *LPASQLOLEDATABASE;
typedef struct IASQLOLEDBObject *LPASQLOLEDBOBJECT;
typedef struct IASQLOLEDBOption *LPASQLOLEDBOPTION;
typedef struct IASQLOLEDefaults *LPASQLOLEDEFAULTS;
typedef struct IASQLOLELanguage *LPASQLOLELANGUAGE;
typedef struct IASQLOLENameList *LPASQLOLENAMELIST;
typedef struct IASQLOLEOperator *LPASQLOLEOPERATOR;
typedef struct IASQLOLERegistry *LPASQLOLEREGISTRY;
typedef struct IASQLOLETransfer *LPASQLOLETRANSFER;
typedef struct IASQLOLETriggers *LPASQLOLETRIGGERS;
typedef struct _CHARDEVQ_INFO_0 *LPCHARDEVQ_INFO_0;
typedef struct _CHARDEVQ_INFO_1 *LPCHARDEVQ_INFO_1;
typedef struct tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;
typedef struct tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;
typedef IConnectionPoint *LPCONNECTIONPOINT;
typedef struct _CONTROL_SERVICE *LPCONTROL_SERVICE;
typedef ICreateErrorInfo *LPCREATEERRORINFO;
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
typedef struct _D3DLIGHTINGCAPS *LPD3DLIGHTINGCAPS;
typedef struct _D3DRMLOADMEMORY *LPD3DRMLOADMEMORY;
typedef struct _D3DRMQUATERNION *LPD3DRMQUATERNION;
typedef struct _DDVIDEOPORTCAPS *LPDDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC *LPDDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO *LPDDVIDEOPORTINFO;
typedef struct DICONSTANTFORCE *LPDICONSTANTFORCE;
typedef struct IDirect3DDevice2 *LPDIRECT3DDEVICE2;
typedef struct IDirect3DRMArray *LPDIRECT3DRMARRAY;
typedef struct IDirect3DRMFrame *LPDIRECT3DRMFRAME;
typedef struct IDirect3DRMLight *LPDIRECT3DRMLIGHT;
typedef struct IDirect3DTexture *LPDIRECT3DTEXTURE;
typedef struct IDirectPlayLobby *LPDIRECTPLAYLOBBY;
typedef struct _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;
typedef struct DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
typedef struct _DSKTLSYSTEMTIME *LPDSKTLSYSTEMTIME;
typedef struct _DTBLRADIOBUTTON *LPDTBLRADIOBUTTON;
typedef IEnumConnections *LPENUMCONNECTIONS;
typedef IEnumRemoteField *LPENUMREMOTEFIELD;
typedef IEnumRemoteValue *LPENUMREMOTEVALUE;
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
typedef struct tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;
typedef IExchangeRuleExt *LPEXCHANGERULEEXT;
typedef IExchExtCallback *LPEXCHEXTCALLBACK;
typedef IExchExtCommands *LPEXCHEXTCOMMANDS;
typedef IExchExtModeless *LPEXCHEXTMODELESS;
typedef struct EXT_API_VERSION *LPEXT_API_VERSION;
typedef struct _FILEDESCRIPTORA *LPFILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW *LPFILEDESCRIPTORW;
typedef struct _FMS_GETFILESELA *LPFMS_GETFILESELA;
typedef struct _FMS_GETFILESELW *LPFMS_GETFILESELW;
typedef struct tagFMS_HELPSTRINGA *LPFMS_HELPSTRINGA;
typedef struct tagFMS_HELPSTRINGW *LPFMS_HELPSTRINGW;
typedef struct tagFMS_TOOLBARLOAD *LPFMS_TOOLBARLOAD;
typedef struct _GROUP_INFO_1002 *LPGROUP_INFO_1002;
typedef struct _GROUP_INFO_1005 *LPGROUP_INFO_1005;
typedef struct tagJAVAEXECUTEINFO *LPJAVAEXECUTEINFO;
typedef struct tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;
typedef struct lineaddresscaps_tag *LPLINEADDRESSCAPS;
typedef struct lineagentstatus_tag *LPLINEAGENTSTATUS;
typedef struct linecountrylist_tag *LPLINECOUNTRYLIST;
typedef struct lineextensionid_tag *LPLINEEXTENSIONID;
typedef struct lineforwardlist_tag *LPLINEFORWARDLIST;
typedef struct linemonitortone_tag *LPLINEMONITORTONE;
typedef struct linereqmakecall_tag *LPLINEREQMAKECALL;
typedef struct tagLOCALESIGNATURE *LPLOCALESIGNATURE;
typedef struct IMAPIFormFactory *LPMAPIFORMFACTORY;
typedef struct IMAPIMessageSite *LPMAPIMESSAGESITE;
typedef struct IMAPIViewContext *LPMAPIVIEWCONTEXT;
typedef struct tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;
typedef struct _MEMORYSTATUSVLM *LPMEMORYSTATUSVLM;
typedef struct midiproptimediv_tag *LPMIDIPROPTIMEDIV;
typedef struct _MONITOR_INFO_1A *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *LPMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *LPMONITOR_INFO_2W;
typedef struct _MonSharedMemory *LPMONSHAREDMEMORY;
typedef struct tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;
typedef struct _EAF9C7AE235510435B672EB36E720462 *LPNMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D *LPNMCBEDRAGBEGINW;
typedef struct tagNMLVGETINFOTIPA *LPNMLVGETINFOTIPA;
typedef struct tagNMLVGETINFOTIPW *LPNMLVGETINFOTIPW;
typedef struct tagNMTBGETINFOTIPA *LPNMTBGETINFOTIPA;
typedef struct tagNMTBGETINFOTIPW *LPNMTBGETINFOTIPW;
typedef struct tagNMTVGETINFOTIPA *LPNMTVGETINFOTIPA;
typedef struct tagNMTVGETINFOTIPW *LPNMTVGETINFOTIPW;
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef IOleCacheControl *LPOLECACHECONTROL;
typedef IOleDocumentSite *LPOLEDOCUMENTSITE;
typedef IOleDocumentView *LPOLEDOCUMENTVIEW;
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct tagOLEUIEDITLINKSA *LPOLEUIEDITLINKSA;
typedef struct tagOLEUIEDITLINKSW *LPOLEUIEDITLINKSW;
typedef struct tagOLEUIGNRLPROPSA *LPOLEUIGNRLPROPSA;
typedef struct tagOLEUIGNRLPROPSW *LPOLEUIGNRLPROPSW;
typedef struct tagOLEUILINKPROPSA *LPOLEUILINKPROPSA;
typedef struct tagOLEUILINKPROPSW *LPOLEUILINKPROPSW;
typedef struct tagOLEUIVIEWPROPSA *LPOLEUIVIEWPROPSA;
typedef struct tagOLEUIVIEWPROPSW *LPOLEUIVIEWPROPSW;
typedef struct phonebuttoninfo_tag *LPPHONEBUTTONINFO;
typedef IPointerInactive *LPPOINTERINACTIVE;
typedef struct _PRINTER_INFO_1A *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *LPPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *LPPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *LPPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *LPPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *LPPRINTER_INFO_7W;
typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct tagRECONVERTSTRING *LPRECONVERTSTRING;
typedef IRemoteDataField *LPREMOTEDATAFIELD;
typedef IRemoteIntObject *LPREMOTEINTOBJECT;
typedef struct _RSVP_FILTERSPEC *LPRSVP_FILTERSPEC;
typedef struct _SENDCMDINPARAMS *LPSENDCMDINPARAMS;
typedef struct _SERVER_INFO_100 *LPSERVER_INFO_100;
typedef struct _SERVER_INFO_101 *LPSERVER_INFO_101;
typedef struct _SERVER_INFO_102 *LPSERVER_INFO_102;
typedef struct _SERVER_INFO_402 *LPSERVER_INFO_402;
typedef struct _SERVER_INFO_403 *LPSERVER_INFO_403;
typedef struct _SERVER_INFO_502 *LPSERVER_INFO_502;
typedef struct _SERVER_INFO_503 *LPSERVER_INFO_503;
typedef struct _SERVER_INFO_598 *LPSERVER_INFO_598;
typedef struct _SERVER_INFO_599 *LPSERVER_INFO_599;
typedef IServiceProvider *LPSERVICEPROVIDER;
typedef struct _SERVICE_ADDRESS *LPSERVICE_ADDRESS;
typedef struct _SESSION_INFO_10 *LPSESSION_INFO_10;
typedef struct _SHARE_INFO_1004 *LPSHARE_INFO_1004;
typedef struct _SHARE_INFO_1005 *LPSHARE_INFO_1005;
typedef struct _SHARE_INFO_1006 *LPSHARE_INFO_1006;
typedef struct _SHARE_INFO_1007 *LPSHARE_INFO_1007;
typedef struct _SHARE_INFO_1501 *LPSHARE_INFO_1501;
typedef struct _SHDESCRIPTIONID *LPSHDESCRIPTIONID;
typedef struct _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;
typedef ISimpleFrameSite *LPSIMPLEFRAMESITE;
typedef struct SIP_SUBJECTINFO_ *LPSIP_SUBJECTINFO;
typedef struct _DD2E0983FBF83F36606C69DABA2BC276 *LPTBREPLACEBITMAP;
typedef struct tagTOOLDISPLAYDATA *LPTOOLDISPLAYDATA;
typedef struct tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;
typedef struct tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;
typedef struct tagTVINSERTSTRUCTA *LPTVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW *LPTVINSERTSTRUCTW;
typedef struct _BC2FB811D417144E831EE3AEA4A279C8 *LPURL_COMPONENTSA;
typedef struct _2B4FDC4BF487E67F052937EE78FAE255 *LPURL_COMPONENTSW;
typedef struct _USER_OTHER_INFO *LPUSER_OTHER_INFO;
typedef struct _WIN32_STREAM_ID *LPWIN32_STREAM_ID;
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
typedef struct _WIN_CERTIFICATE *LPWIN_CERTIFICATE;
typedef struct _WKSTA_INFO_1010 *LPWKSTA_INFO_1010;
typedef struct _WKSTA_INFO_1011 *LPWKSTA_INFO_1011;
typedef struct _WKSTA_INFO_1012 *LPWKSTA_INFO_1012;
typedef struct _WKSTA_INFO_1013 *LPWKSTA_INFO_1013;
typedef struct _WKSTA_INFO_1018 *LPWKSTA_INFO_1018;
typedef struct _WKSTA_INFO_1023 *LPWKSTA_INFO_1023;
typedef struct _WKSTA_INFO_1027 *LPWKSTA_INFO_1027;
typedef struct _WKSTA_INFO_1028 *LPWKSTA_INFO_1028;
typedef struct _WKSTA_INFO_1032 *LPWKSTA_INFO_1032;
typedef struct _WKSTA_INFO_1033 *LPWKSTA_INFO_1033;
typedef struct _WKSTA_INFO_1041 *LPWKSTA_INFO_1041;
typedef struct _WKSTA_INFO_1042 *LPWKSTA_INFO_1042;
typedef struct _WKSTA_INFO_1043 *LPWKSTA_INFO_1043;
typedef struct _WKSTA_INFO_1044 *LPWKSTA_INFO_1044;
typedef struct _WKSTA_INFO_1045 *LPWKSTA_INFO_1045;
typedef struct _WKSTA_INFO_1046 *LPWKSTA_INFO_1046;
typedef struct _WKSTA_INFO_1047 *LPWKSTA_INFO_1047;
typedef struct _WKSTA_INFO_1048 *LPWKSTA_INFO_1048;
typedef struct _WKSTA_INFO_1049 *LPWKSTA_INFO_1049;
typedef struct _WKSTA_INFO_1050 *LPWKSTA_INFO_1050;
typedef struct _WKSTA_INFO_1051 *LPWKSTA_INFO_1051;
typedef struct _WKSTA_INFO_1052 *LPWKSTA_INFO_1052;
typedef struct _WKSTA_INFO_1053 *LPWKSTA_INFO_1053;
typedef struct _WKSTA_INFO_1054 *LPWKSTA_INFO_1054;
typedef struct _WKSTA_INFO_1055 *LPWKSTA_INFO_1055;
typedef struct _WKSTA_INFO_1056 *LPWKSTA_INFO_1056;
typedef struct _WKSTA_INFO_1057 *LPWKSTA_INFO_1057;
typedef struct _WKSTA_INFO_1058 *LPWKSTA_INFO_1058;
typedef struct _WKSTA_INFO_1059 *LPWKSTA_INFO_1059;
typedef struct _WKSTA_INFO_1060 *LPWKSTA_INFO_1060;
typedef struct _WKSTA_INFO_1061 *LPWKSTA_INFO_1061;
typedef struct _WKSTA_INFO_1062 *LPWKSTA_INFO_1062;
typedef struct _WSANSClassInfoA *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *LPWSANSCLASSINFOW;
enum MACRO_ACCESS_NONE {ACCESS_NONE = 0,ACCESS_READ = 1,ACCESS_WRITE = 2,ACCESS_CREATE = 4,ACCESS_EXEC = 8,ACCESS_DELETE = 16,ACCESS_ATRIB = 32,ACCESS_PERM = 64,ACCESS_GROUP = 32768,ACCESS_AUDIT = 1,ACCESS_SUCCESS_OPEN = 16,ACCESS_SUCCESS_WRITE = 32,ACCESS_SUCCESS_DELETE = 64,ACCESS_SUCCESS_ACL = 128,ACCESS_SUCCESS_MASK = 240,ACCESS_FAIL_OPEN = 256,ACCESS_FAIL_WRITE = 512,ACCESS_FAIL_DELETE = 1024,ACCESS_FAIL_ACL = 2048,ACCESS_FAIL_MASK = 3840,ACCESS_FAIL_SHIFT = 4,ACCESS_RESOURCE_NAME_PARMNUM = 1,ACCESS_ATTR_PARMNUM = 2,ACCESS_COUNT_PARMNUM = 3,ACCESS_ACCESS_LIST_PARMNUM = 4,ACCESS_RESOURCE_NAME_INFOLEVEL = 1001,ACCESS_ATTR_INFOLEVEL = 1002,ACCESS_COUNT_INFOLEVEL = 1003,ACCESS_ACCESS_LIST_INFOLEVEL = 1004,};
enum MACRO_ADDRESS_ONE {ADDRESS_ONE = 0x8,};
enum MACRO_AGENTREQERR {AGENTREQERR_OBJECTNOTFOUND = -2147213055,AGENTREQERR_OBJECTINVALID = -2147213054,AGENTREQERR_CANTSTOPOTHERS = -2147213053,AGENTREQERR_CANTINTERRUPTSELF = -2147213052,AGENTREQERR_CANTWAITONSELF = -2147213051,AGENTREQERR_INVALIDBOOKMARK = -2147213050,AGENTREQERR_SUSPENDED = -2147213049,AGENTREQERR_REMOVED = -2147213048,AGENTREQERR_INTERRUPTEDLISTENKEY = -2147213046,AGENTREQERR_INTERRUPTEDHEARING = -2147213045,AGENTREQERR_INTERRUPTEDCODE = -2147213044,AGENTREQERR_INTERRUPTEDUSER = -2147213043,AGENTREQERR_INVALIDLASTTAG = -2147213042,};
enum MACRO_AMINTERLACE {AMINTERLACE_IsInterlaced = 0x1,AMINTERLACE_1FieldPerSample = 0x2,AMINTERLACE_Field1First = 0x4,AMINTERLACE_UNUSED = 0x8,AMINTERLACE_FieldPatternMask = 0x30,AMINTERLACE_FieldPatField1Only = 0x0,AMINTERLACE_FieldPatField2Only = 0x10,AMINTERLACE_FieldPatBothRegular = 0x20,AMINTERLACE_FieldPatBothIrregular = 0x30,AMINTERLACE_DisplayModeMask = 0xC0,AMINTERLACE_DisplayModeBobOnly = 0x0,AMINTERLACE_DisplayModeWeaveOnly = 0x40,AMINTERLACE_DisplayModeBobOrWeave = 0x80,};
enum MACRO_APPLICATION {APPLICATION_ERROR_MASK = 0x20000000,};
enum MACRO_APPREVISION {APPREVISION = 0,};
enum MACRO_ASN_INTEGER {ASN_INTEGER = 0x2,ASN_BITS = 0x3,ASN_OCTETSTRING = 0x4,ASN_NULL = 0x5,ASN_OBJECTIDENTIFIER = 0x6,ASN_INTEGER32 = 0x2,ASN_SEQUENCE = 0x30,ASN_SEQUENCEOF = 0x30,ASN_IPADDRESS = 0x40,ASN_COUNTER32 = 0x41,ASN_GAUGE32 = 0x42,ASN_TIMETICKS = 0x43,ASN_OPAQUE = 0x44,ASN_COUNTER64 = 0x46,ASN_UNSIGNED32 = 0x47,};
enum MACRO_ASN_RFC1155 {ASN_RFC1155_IPADDRESS = 64,ASN_RFC1155_COUNTER = 65,ASN_RFC1155_GAUGE = 66,ASN_RFC1155_TIMETICKS = 67,ASN_RFC1155_OPAQUE = 68,ASN_RFC1213_DISPSTRING = 4,ASN_RFC1157_GETREQUEST = 160,ASN_RFC1157_GETNEXTREQUEST = 161,ASN_RFC1157_GETRESPONSE = 162,ASN_RFC1157_SETREQUEST = 163,ASN_RFC1157_TRAP = 164,ASN_CONTEXTSPECIFIC = 128,ASN_PRIMATIVE = 0,};
enum MACRO_AVIFILECAPS {AVIFILECAPS_CANREAD = 0x1,AVIFILECAPS_CANWRITE = 0x2,AVIFILECAPS_ALLKEYFRAMES = 0x10,AVIFILECAPS_NOCOMPRESSION = 0x20,};
enum MACRO_AVIFILEINFO {AVIFILEINFO_HASINDEX = 0x10,AVIFILEINFO_MUSTUSEINDEX = 0x20,AVIFILEINFO_ISINTERLEAVED = 0x100,AVIFILEINFO_WASCAPTUREFILE = 0x10000,AVIFILEINFO_COPYRIGHTED = 0x20000,};
enum MACRO_AVIIF_TWOCC {AVIIF_TWOCC = 0x2,};
enum MACRO_AVISTDINDEX {AVISTDINDEX_DELTAFRAME = 0x80000000,AVISTDINDEX_SIZEMASK = 0x7FFFFFFF,};
enum MACRO_AnalogVideo {AnalogVideo_NTSC_Mask = 0x7,AnalogVideo_PAL_Mask = 0xFF0,AnalogVideo_SECAM_Mask = 0xFF000,};
enum MACRO_BACKUP_TYPE {BACKUP_TYPE_FULL = 0x1,BACKUP_TYPE_LOGS_ONLY = 0x2,BACKUP_DISABLE_INCREMENTAL = 0xFFFFFFFF,};
enum MACRO_BLANKBUTTON {BLANKBUTTON_UP = 18,BLANKBUTTON_DOWN = 27,BLANKBUTTON_MOUSEDOWN = 19,BLANKBUTTON_INDETERMINATE = 26,};
enum MACRO_BUFFER_SIZE {READ_ATTRIBUTE_BUFFER_SIZE = 512,IDENTIFY_BUFFER_SIZE = 512,READ_THRESHOLD_BUFFER_SIZE = 512,};
enum MACRO_BUTTONGROUP {BUTTONGROUP_DOWN = 0x1,BUTTONGROUP_ACTIVE = 0x2,BUTTONGROUP_DISABLED = 0x4,BUTTONGROUP_LIGHTFACE = 0x8,BUTTONGROUP_BLANK = 0x10,};
enum MACRO_CACHE_ENTRY {NORMAL_CACHE_ENTRY = 0x1,COOKIE_CACHE_ENTRY = 0x100000,URLHISTORY_CACHE_ENTRY = 0x200000,TRACK_OFFLINE_CACHE_ENTRY = 0x10,TRACK_ONLINE_CACHE_ENTRY = 0x20,STICKY_CACHE_ENTRY = 0x4,SPARSE_CACHE_ENTRY = 0x10000,};
enum MACRO_CCHFORMNAME {CCHFORMNAME = 32,};
enum MACRO_CERT_VERIFY {CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 0x1,CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 0x2,CERT_VERIFY_NO_TIME_CHECK_FLAG = 0x4,CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 0x8,CERT_VERIFY_UPDATED_CTL_FLAG = 0x1,CERT_CONTEXT_REVOCATION_TYPE = 0x1,CERT_VERIFY_REV_CHAIN_FLAG = 0x1,CERT_UNICODE_IS_RDN_ATTRS_FLAG = 0x1,CERT_SIMPLE_NAME_STR = 0x1,CERT_OID_NAME_STR = 0x2,CERT_X500_NAME_STR = 0x3,CERT_NAME_STR_SEMICOLON_FLAG = 0x40000000,CERT_NAME_STR_NO_PLUS_FLAG = 0x20000000,CERT_NAME_STR_NO_QUOTING_FLAG = 0x10000000,CERT_NAME_STR_CRLF_FLAG = 0x8000000,CERT_NAME_STR_COMMA_FLAG = 0x4000000,};
enum MACRO_CFM_EFFECTS {CFM_EFFECTS = 1073741887,CFM_ALL = -134217665,CFM_SMALLCAPS = 64,CFM_ALLCAPS = 128,CFM_HIDDEN = 256,CFM_OUTLINE = 512,CFM_SHADOW = 1024,CFM_EMBOSS = 2048,CFM_IMPRINT = 4096,CFM_DISABLED = 8192,CFM_REVISED = 16384,CFM_BACKCOLOR = 67108864,CFM_LCID = 33554432,CFM_UNDERLINETYPE = 8388608,CFM_WEIGHT = 4194304,CFM_SPACING = 2097152,CFM_KERNING = 1048576,CFM_STYLE = 524288,CFM_ANIMATION = 262144,CFM_REVAUTHOR = 32768,};
enum MACRO_CLR_HILIGHT {CLR_HILIGHT = -16777216,};
enum MACRO_COLOR_MATCH {COLOR_MATCH_VERSION = 0x200,};
enum MACRO_COMPRESSION {COMPRESSION_FORMAT_NONE = 0x0,COMPRESSION_FORMAT_DEFAULT = 0x1,COMPRESSION_FORMAT_LZNT1 = 0x2,COMPRESSION_ENGINE_STANDARD = 0x0,COMPRESSION_ENGINE_MAXIMUM = 0x100,};
enum MACRO_CONNECT_USE {CONNECT_USE_ADMIN_PRIVILEGE = 1,CONNECT_NO_RPC_ENCRYPTION = 2,};
enum MACRO_CRYPT_FIRST {CRYPT_FIRST = 1,CRYPT_NEXT = 2,CRYPT_IMPL_HARDWARE = 1,CRYPT_IMPL_SOFTWARE = 2,CRYPT_IMPL_MIXED = 3,CRYPT_IMPL_UNKNOWN = 4,CRYPT_SEC_DESCR = 1,CRYPT_PSTORE = 2,CRYPT_UI_PROMPT = 4,CRYPT_FLAG_PCT1 = 1,CRYPT_FLAG_SSL2 = 2,CRYPT_FLAG_SSL3 = 4,CRYPT_FLAG_TLS1 = 8,};
enum MACRO_D3DPCMPCAPS {D3DPCMPCAPS_NEVER = 0x1,D3DPCMPCAPS_LESS = 0x2,D3DPCMPCAPS_EQUAL = 0x4,D3DPCMPCAPS_LESSEQUAL = 0x8,D3DPCMPCAPS_GREATER = 0x10,D3DPCMPCAPS_NOTEQUAL = 0x20,D3DPCMPCAPS_GREATEREQUAL = 0x40,D3DPCMPCAPS_ALWAYS = 0x80,};
enum MACRO_DAOROWFETCH {DAOROWFETCH_CALLEEALLOCATES = 0x1,DAOROWFETCH_DONTADVANCE = 0x2,DAOROWFETCH_FORCEREFRESH = 0x4,DAOROWFETCH_BINDABSOLUTE = 0x8,DAOROWFETCH_ODBCNEXT = 0x10,};
enum MACRO_DBANSItoOEM {DBANSItoOEM = 14,};
enum MACRO_DBG_CERTSRV {DBG_CERTSRV = 0,};
enum MACRO_DBG_SEGLOAD {DBG_SEGLOAD = 0,DBG_SEGMOVE = 1,DBG_SEGFREE = 2,DBG_MODLOAD = 3,DBG_MODFREE = 4,DBG_SINGLESTEP = 5,DBG_BREAK = 6,DBG_GPFAULT = 7,DBG_DIVOVERFLOW = 8,DBG_INSTRFAULT = 9,DBG_TASKSTART = 10,DBG_TASKSTOP = 11,DBG_DLLSTART = 12,DBG_DLLSTOP = 13,DBG_ATTACH = 14,DBG_TOOLHELP = 15,DBG_STACKFAULT = 16,DBG_WOWINIT = 17,DBG_TEMPBP = 18,DBG_MODMOVE = 19,DBG_INIT = 20,};
enum MACRO_DBOEMtoANSI {DBOEMtoANSI = 15,DBCLIENTCURSORS = 16,};
enum MACRO_DBPARAMTYPE {DBPARAMTYPE_INPUT = 0x1,DBPARAMTYPE_INPUTOUTPUT = 0x2,DBPARAMTYPE_OUTPUT = 0x3,DBPARAMTYPE_RETURNVALUE = 0x4,};
enum MACRO_DBPARSEONLY {DBPARSEONLY = 11,};
enum MACRO_DBPROPFLAGS {DBPROPFLAGS_ADSISEARCH = 0xC000,};
enum MACRO_DBRPCRETURN {DBRPCRETURN = 0x1,DBRPCDEFAULT = 0x2,};
enum MACRO_DBSETSECURE {DBSETSECURE = 7,DBVER42 = 8,};
enum MACRO_DC_HASDEFID {DC_HASDEFID = 0x534B,};
enum MACRO_DDVPCONNECT {DDVPCONNECT_DOUBLECLOCK = 0x1,DDVPCONNECT_VACT = 0x2,DDVPCONNECT_INVERTPOLARITY = 0x4,DDVPCONNECT_DISCARDSVREFDATA = 0x8,DDVPCONNECT_HALFLINE = 0x10,DDVPCONNECT_INTERLACED = 0x20,DDVPCONNECT_SHAREEVEN = 0x40,DDVPCONNECT_SHAREODD = 0x80,};
enum MACRO_DEBUG_EVENT {EXCEPTION_DEBUG_EVENT = 1,CREATE_THREAD_DEBUG_EVENT = 2,CREATE_PROCESS_DEBUG_EVENT = 3,EXIT_THREAD_DEBUG_EVENT = 4,EXIT_PROCESS_DEBUG_EVENT = 5,LOAD_DLL_DEBUG_EVENT = 6,UNLOAD_DLL_DEBUG_EVENT = 7,OUTPUT_DEBUG_STRING_EVENT = 8,RIP_EVENT = 9,};
enum MACRO_DECIMALBIND {DECIMALBIND = 17,};
enum MACRO_DEL_FOLDERS {DEL_FOLDERS = 0x4,DEL_ASSOCIATED = 0x8,};
enum MACRO_DIPROPRANGE {DIPROPRANGE_NOMIN = 0x80000000,DIPROPRANGE_NOMAX = 0x7FFFFFFF,};
enum MACRO_DIRECTINPUT {DIRECTINPUT_VERSION = 0x500,};
enum MACRO_DISPID_IADs {DISPID_IADs_UPPER_BOUND = 14,DISPID_IADsService_UPPER_BOUND = 32,};
enum MACRO_DISPID_LOAD {DISPID_LOAD = 1,DISPID_UNLOAD = 2,DISPID_SUBMIT = 3,DISPID_FOCUS = 4,DISPID_CHANGE = 5,DISPID_BLUR = 6,DISPID_MOUSEOVER = 8,DISPID_PARSECOMPLETE = 9,DISPID_ABORT = 10,DISPID_ERROR = 11,DISPID_MOUSEOUT = 12,};
enum MACRO_DISPID_THIS {DISPID_THIS = -613,DISPID_STARTENUM = -1,};
enum MACRO_DISPID_XOBJ {DISPID_XOBJ_MIN = 0x80010000,DISPID_XOBJ_MAX = 0x8001FFFF,DISPID_XOBJ_BASE = 0x80010000,DISPID_HTMLOBJECT = 0x800101F4,DISPID_ELEMENT = 0x800103E8,DISPID_SITE = 0x800107D0,DISPID_OBJECT = 0x80010BB8,DISPID_STYLE = 0x80010FA0,DISPID_ATTRS = 0x80011388,DISPID_EVENTS = 0x80011770,DISPID_XOBJ_EXPANDO = 0x80011B58,DISPID_XOBJ_ORDINAL = 0x80011F40,DISPID_CommonCtrl_FONTNAME = 0x1,DISPID_CommonCtrl_FONTSIZE = 0x2,DISPID_CommonCtrl_FONTBOLD = 0x3,DISPID_CommonCtrl_FONTITAL = 0x4,DISPID_CommonCtrl_FONTUNDER = 0x5,DISPID_CommonCtrl_FONTSTRIKE = 0x6,DISPID_CommonCtrl_FONTWEIGHT = 0x7,DISPID_CommonCtrl_FONTCHARSET = 0x8,DISPID_CommonCtrl_FONTSUPERSCRIPT = 0x9,DISPID_CommonCtrl_FONTSUBSCRIPT = 0xA,DISPID_MSDATASRCINTERFACE = 0xFFFFF0C4,DISPID_ADVISEDATASRCCHANGEEVENT = 0xFFFFF0C3,DISPID_HTMLDLG = 0x61A8,DISPID_HTMLDLGMODEL = 0x6590,};
enum MACRO_DMICMMETHOD {DMICMMETHOD_NONE = 1,DMICMMETHOD_SYSTEM = 2,DMICMMETHOD_DRIVER = 3,DMICMMETHOD_DEVICE = 4,DMICMMETHOD_USER = 256,};
enum MACRO_DMSTATEFLAG {DMSTATEFLAG_APPLYTOALL = 0x1,};
enum MACRO_DRV_FAILURE {DRV_FAILURE = 0x0,DRV_SUCCESS = 0x1,DRV_BADPARAM1 = 0xFFFFFFFF,DRV_BADPARAM2 = 0xFFFFFFFE,DRV_BADSTRUCT = 0xFFFFFFFD,};
enum MACRO_DT_MAILUSER {DT_MAILUSER = 0x0,DT_DISTLIST = 0x1,DT_FORUM = 0x2,DT_AGENT = 0x3,DT_ORGANIZATION = 0x4,DT_PRIVATE_DISTLIST = 0x5,DT_REMOTE_MAILUSER = 0x6,DT_MODIFIABLE = 0x10000,DT_GLOBAL = 0x20000,DT_LOCAL = 0x30000,DT_WAN = 0x40000,DT_NOT_SPECIFIC = 0x50000,DT_FOLDER = 0x1000000,DT_FOLDER_LINK = 0x2000000,DT_FOLDER_SPECIAL = 0x4000000,};
enum MACRO_DUPLICATE_0 {DUPLICATE = 0x6,};
enum MACRO_ENABLECLASS {ENABLECLASS_QUERY = 0,ENABLECLASS_SUCCESS = 1,ENABLECLASS_FAILURE = 2,};
enum MACRO_EPSPRINTING {EPSPRINTING = 33,};
enum MACRO_ERROR_LABEL {ERROR_LABEL_UNREADABLE = 0x1,ERROR_LABEL_QUESTIONABLE = 0x2,ERROR_SLOT_NOT_PRESENT = 0x4,ERROR_DRIVE_NOT_INSTALLED = 0x8,ERROR_TRAY_MALFUNCTION = 0x10,ERROR_INIT_STATUS_NEEDED = 0x11,ERROR_UNHANDLED_ERROR = 0xFFFFFFFF,};
enum MACRO_E_AMBIGUOUS {EC_EDK_E_AMBIGUOUS = 0x5,EDK_E_AMBIGUOUS = 0x800B0005,};
enum MACRO_E_NOT_FOUND {EC_EDK_E_NOT_FOUND = 0x1,EDK_E_NOT_FOUND = 0x800B0001,};
enum MACRO_FACILITY_NT {FACILITY_NT_BIT = 0x10000000,};
enum MACRO_FILEOPENORD {FILEOPENORD = 1536,};
enum MACRO_FILE_DEVICE {FILE_DEVICE_BEEP = 0x1,FILE_DEVICE_CD_ROM = 0x2,FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0x3,FILE_DEVICE_CONTROLLER = 0x4,FILE_DEVICE_DATALINK = 0x5,FILE_DEVICE_DFS = 0x6,FILE_DEVICE_DISK = 0x7,FILE_DEVICE_DISK_FILE_SYSTEM = 0x8,FILE_DEVICE_FILE_SYSTEM = 0x9,FILE_DEVICE_INPORT_PORT = 0xA,FILE_DEVICE_KEYBOARD = 0xB,FILE_DEVICE_MAILSLOT = 0xC,FILE_DEVICE_MIDI_IN = 0xD,FILE_DEVICE_MIDI_OUT = 0xE,FILE_DEVICE_MOUSE = 0xF,FILE_DEVICE_MULTI_UNC_PROVIDER = 0x10,FILE_DEVICE_NAMED_PIPE = 0x11,FILE_DEVICE_NETWORK = 0x12,FILE_DEVICE_NETWORK_BROWSER = 0x13,FILE_DEVICE_NETWORK_FILE_SYSTEM = 0x14,FILE_DEVICE_NULL = 0x15,FILE_DEVICE_PARALLEL_PORT = 0x16,FILE_DEVICE_PHYSICAL_NETCARD = 0x17,FILE_DEVICE_PRINTER = 0x18,FILE_DEVICE_SCANNER = 0x19,FILE_DEVICE_SERIAL_MOUSE_PORT = 0x1A,FILE_DEVICE_SERIAL_PORT = 0x1B,FILE_DEVICE_SCREEN = 0x1C,FILE_DEVICE_SOUND = 0x1D,FILE_DEVICE_STREAMS = 0x1E,FILE_DEVICE_TAPE = 0x1F,FILE_DEVICE_TAPE_FILE_SYSTEM = 0x20,FILE_DEVICE_TRANSPORT = 0x21,FILE_DEVICE_UNKNOWN = 0x22,FILE_DEVICE_VIDEO = 0x23,FILE_DEVICE_VIRTUAL_DISK = 0x24,FILE_DEVICE_WAVE_IN = 0x25,FILE_DEVICE_WAVE_OUT = 0x26,FILE_DEVICE_8042_PORT = 0x27,FILE_DEVICE_NETWORK_REDIRECTOR = 0x28,FILE_DEVICE_BATTERY = 0x29,FILE_DEVICE_BUS_EXTENDER = 0x2A,FILE_DEVICE_MODEM = 0x2B,FILE_DEVICE_VDM = 0x2C,FILE_DEVICE_MASS_STORAGE = 0x2D,FILE_DEVICE_SMB = 0x2E,FILE_DEVICE_KS = 0x2F,FILE_DEVICE_CHANGER = 0x30,FILE_DEVICE_SMARTCARD = 0x31,FILE_DEVICE_ACPI = 0x32,FILE_DEVICE_DVD = 0x33,FILE_DEVICE_FULLSCREEN_VIDEO = 0x34,FILE_DEVICE_DFS_FILE_SYSTEM = 0x35,FILE_DEVICE_DFS_VOLUME = 0x36,};
enum MACRO_FILTER_TEMP {FILTER_TEMP_DUPLICATE_ACCOUNT = 0x1,FILTER_NORMAL_ACCOUNT = 0x2,FILTER_INTERDOMAIN_TRUST_ACCOUNT = 0x8,FILTER_WORKSTATION_TRUST_ACCOUNT = 0x10,FILTER_SERVER_TRUST_ACCOUNT = 0x20,};
enum MACRO_FINDCLASSEX {FINDCLASSEX_NOINIT = 0x1,FINDCLASSEX_IGNORECASE = 0x2,FINDCLASSEX_SYSTEMONLY = 0x4,};
enum MACRO_FLT_IEEE_LO {FLT_IEEE_LO = 10,FLT_ND5000 = 11,};
enum MACRO_FLUSHOUTPUT {FLUSHOUTPUT = 6,};
enum MACRO_FOLDER_MOVE {FOLDER_MOVE = 0x1,};
enum MACRO_FORMPROPSET {FORMPROPSET_UNION = 0,FORMPROPSET_INTERSECTION = 1,};
enum MACRO_GCL_HICONSM {GCL_HICONSM = -34,};
enum MACRO_GCP_CLASSIN {GCP_CLASSIN = 0x80000,GCP_MAXEXTENT = 0x100000,GCP_JUSTIFYIN = 0x200000,GCP_DISPLAYZWG = 0x400000,GCP_SYMSWAPOFF = 0x800000,GCP_NUMERICOVERRIDE = 0x1000000,GCP_NEUTRALOVERRIDE = 0x2000000,GCP_NUMERICSLATIN = 0x4000000,GCP_NUMERICSLOCAL = 0x8000000,};
enum MACRO_GCP_JUSTIFY {GCP_JUSTIFY = 0x10000,};
enum MACRO_GETFACENAME {GETFACENAME = 513,};
enum MACRO_GROUPIDMASK {GROUPIDMASK = 0x8000,};
enum MACRO_HANDLE_INFO {HANDLE_INFO_LEVEL_1 = 1,HANDLE_CHARTIME_PARMNUM = 1,HANDLE_CHARCOUNT_PARMNUM = 2,};
enum MACRO_HDM_HITTEST {HDM_HITTEST = 4614,HDM_GETITEMRECT = 4615,HDM_SETIMAGELIST = 4616,HDM_GETIMAGELIST = 4617,HDM_ORDERTOINDEX = 4623,HDM_CREATEDRAGIMAGE = 4624,HDM_GETORDERARRAY = 4625,HDM_SETORDERARRAY = 4626,HDM_SETHOTDIVIDER = 4627,HDM_SETUNICODEFORMAT = 8197,HDM_GETUNICODEFORMAT = 8198,};
enum MACRO_HTMAXBUTTON {HTMAXBUTTON = 9,};
enum MACRO_HTSIZEFIRST {HTSIZEFIRST = 10,HTSIZELAST = 17,};
enum MACRO_ICM_NOTOPEN {ICM_NOTOPEN = 0x0,ICM_LEVEL3 = 0x1,ICM_LEVEL2 = 0x2,ICM_LEVEL2_5 = 0x3,ICM_LEVEL2_SUI = 0x4,};
enum MACRO_IDC_OFFLINE {IDC_OFFLINE_HAND = 103,};
enum MACRO_IDD_DYNAWIZ {IDD_DYNAWIZ_FIRSTPAGE = 10000,IDD_DYNAWIZ_SELECT_PREVPAGE = 10001,IDD_DYNAWIZ_SELECT_NEXTPAGE = 10002,IDD_DYNAWIZ_ANALYZE_PREVPAGE = 10003,IDD_DYNAWIZ_ANALYZE_NEXTPAGE = 10004,IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = 10006,IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = 10007,IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = 10008,IDD_DYNAWIZ_SELECTDEV_PAGE = 10009,IDD_DYNAWIZ_ANALYZEDEV_PAGE = 10010,IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = 10011,IDD_DYNAWIZ_SELECTCLASS_PAGE = 10012,};
enum MACRO_IDFINSTCAPS {IDFINSTCAPS_F_GENERAL_MIDI = 0x1,IDFINSTCAPS_F_SYSTEMEXCLUSIVE = 0x2,};
enum MACRO_IDM_UNKNOWN {IDM_UNKNOWN = 0,IDM_ALIGNBOTTOM = 1,IDM_ALIGNHORIZONTALCENTERS = 2,IDM_ALIGNLEFT = 3,IDM_ALIGNRIGHT = 4,IDM_ALIGNTOGRID = 5,IDM_ALIGNTOP = 6,IDM_ALIGNVERTICALCENTERS = 7,IDM_ARRANGEBOTTOM = 8,IDM_ARRANGERIGHT = 9,IDM_BRINGFORWARD = 10,IDM_BRINGTOFRONT = 11,IDM_CENTERHORIZONTALLY = 12,IDM_CENTERVERTICALLY = 13,IDM_CODE = 14,IDM_DELETE = 17,IDM_FONTNAME = 18,IDM_FONTSIZE = 19,IDM_GROUP = 20,IDM_HORIZSPACECONCATENATE = 21,IDM_HORIZSPACEDECREASE = 22,IDM_HORIZSPACEINCREASE = 23,IDM_HORIZSPACEMAKEEQUAL = 24,IDM_INSERTOBJECT = 25,IDM_MULTILEVELREDO = 30,IDM_SENDBACKWARD = 32,IDM_SENDTOBACK = 33,IDM_SHOWTABLE = 34,IDM_SIZETOCONTROL = 35,IDM_SIZETOCONTROLHEIGHT = 36,IDM_SIZETOCONTROLWIDTH = 37,IDM_SIZETOFIT = 38,IDM_SIZETOGRID = 39,IDM_SNAPTOGRID = 40,IDM_TABORDER = 41,IDM_TOOLBOX = 42,IDM_MULTILEVELUNDO = 44,IDM_UNGROUP = 45,IDM_VERTSPACECONCATENATE = 46,IDM_VERTSPACEDECREASE = 47,IDM_VERTSPACEINCREASE = 48,IDM_VERTSPACEMAKEEQUAL = 49,IDM_JUSTIFYFULL = 50,IDM_BACKCOLOR = 51,IDM_BOLD = 52,IDM_BORDERCOLOR = 53,IDM_FLAT = 54,IDM_FORECOLOR = 55,IDM_ITALIC = 56,IDM_JUSTIFYCENTER = 57,IDM_JUSTIFYGENERAL = 58,IDM_JUSTIFYLEFT = 59,IDM_JUSTIFYRIGHT = 60,IDM_RAISED = 61,IDM_SUNKEN = 62,IDM_UNDERLINE = 63,IDM_CHISELED = 64,IDM_ETCHED = 65,IDM_SHADOWED = 66,IDM_FIND = 67,IDM_SHOWGRID = 69,IDM_OBJECTVERBLIST0 = 72,IDM_OBJECTVERBLIST1 = 73,IDM_OBJECTVERBLIST2 = 74,IDM_OBJECTVERBLIST3 = 75,IDM_OBJECTVERBLIST4 = 76,IDM_OBJECTVERBLIST5 = 77,IDM_OBJECTVERBLIST6 = 78,IDM_OBJECTVERBLIST7 = 79,IDM_OBJECTVERBLIST8 = 80,IDM_OBJECTVERBLIST9 = 81,IDM_OBJECTVERBLISTLAST = 81,IDM_CONVERTOBJECT = 82,IDM_CUSTOMCONTROL = 83,IDM_CUSTOMIZEITEM = 84,IDM_RENAME = 85,IDM_IMPORT = 86,IDM_NEWPAGE = 87,IDM_MOVE = 88,IDM_CANCEL = 89,IDM_FONT = 90,IDM_STRIKETHROUGH = 91,IDM_DELETEWORD = 92,IDM_FOLLOW_ANCHOR = 2008,IDM_INSINPUTIMAGE = 2114,IDM_INSINPUTBUTTON = 2115,IDM_INSINPUTRESET = 2116,IDM_INSINPUTSUBMIT = 2117,IDM_INSINPUTUPLOAD = 2118,IDM_INSFIELDSET = 2119,IDM_PASTEINSERT = 2120,IDM_REPLACE = 2121,IDM_EDITSOURCE = 2122,IDM_BOOKMARK = 2123,IDM_HYPERLINK = 2124,IDM_UNLINK = 2125,IDM_BROWSEMODE = 2126,IDM_EDITMODE = 2127,IDM_UNBOOKMARK = 2128,IDM_TOOLBARS = 2130,IDM_STATUSBAR = 2131,IDM_FORMATMARK = 2132,IDM_TEXTONLY = 2133,IDM_OPTIONS = 2135,IDM_FOLLOWLINKC = 2136,IDM_FOLLOWLINKN = 2137,IDM_VIEWSOURCE = 2139,IDM_ZOOMPOPUP = 2140,IDM_BASELINEFONT1 = 2141,IDM_BASELINEFONT2 = 2142,IDM_BASELINEFONT3 = 2143,IDM_BASELINEFONT4 = 2144,IDM_BASELINEFONT5 = 2145,IDM_HORIZONTALLINE = 2150,IDM_LINEBREAKNORMAL = 2151,IDM_LINEBREAKLEFT = 2152,IDM_LINEBREAKRIGHT = 2153,IDM_LINEBREAKBOTH = 2154,IDM_NONBREAK = 2155,IDM_SPECIALCHAR = 2156,IDM_HTMLSOURCE = 2157,IDM_IFRAME = 2158,IDM_HTMLCONTAIN = 2159,IDM_TEXTBOX = 2161,IDM_TEXTAREA = 2162,IDM_CHECKBOX = 2163,IDM_RADIOBUTTON = 2164,IDM_DROPDOWNBOX = 2165,IDM_LISTBOX = 2166,IDM_BUTTON = 2167,IDM_IMAGE = 2168,IDM_OBJECT = 2169,IDM_1D = 2170,IDM_IMAGEMAP = 2171,IDM_FILE = 2172,IDM_COMMENT = 2173,IDM_SCRIPT = 2174,IDM_JAVAAPPLET = 2175,IDM_PLUGIN = 2176,IDM_PAGEBREAK = 2177,IDM_PARAGRAPH = 2180,IDM_FORM = 2181,IDM_MARQUEE = 2182,IDM_LIST = 2183,IDM_ORDERLIST = 2184,IDM_UNORDERLIST = 2185,IDM_INDENT = 2186,IDM_OUTDENT = 2187,IDM_PREFORMATTED = 2188,IDM_ADDRESS = 2189,IDM_BLINK = 2190,IDM_DIV = 2191,IDM_TABLEINSERT = 2200,IDM_RCINSERT = 2201,IDM_CELLINSERT = 2202,IDM_CAPTIONINSERT = 2203,IDM_CELLMERGE = 2204,IDM_CELLSPLIT = 2205,IDM_CELLSELECT = 2206,IDM_ROWSELECT = 2207,IDM_COLUMNSELECT = 2208,IDM_TABLESELECT = 2209,IDM_TABLEPROPERTIES = 2210,IDM_CELLPROPERTIES = 2211,IDM_ROWINSERT = 2212,IDM_COLUMNINSERT = 2213,IDM_HELP_CONTENT = 2220,IDM_HELP_ABOUT = 2221,IDM_HELP_README = 2222,IDM_REMOVEFORMAT = 2230,IDM_PAGEINFO = 2231,IDM_TELETYPE = 2232,IDM_GETBLOCKFMTS = 2233,IDM_BLOCKFMT = 2234,IDM_SHOWHIDE_CODE = 2235,IDM_TABLE = 2236,IDM_COPYFORMAT = 2237,IDM_PASTEFORMAT = 2238,IDM_GOTO = 2239,IDM_CHANGEFONT = 2240,IDM_CHANGEFONTSIZE = 2241,IDM_INCFONTSIZE = 2242,IDM_DECFONTSIZE = 2243,IDM_INCFONTSIZE1PT = 2244,IDM_DECFONTSIZE1PT = 2245,IDM_CHANGECASE = 2246,IDM_SUBSCRIPT = 2247,IDM_SUPERSCRIPT = 2248,IDM_SHOWSPECIALCHAR = 2249,IDM_CENTERALIGNPARA = 2250,IDM_LEFTALIGNPARA = 2251,IDM_RIGHTALIGNPARA = 2252,IDM_REMOVEPARAFORMAT = 2253,IDM_APPLYNORMAL = 2254,IDM_APPLYHEADING1 = 2255,IDM_APPLYHEADING2 = 2256,IDM_APPLYHEADING3 = 2257,IDM_DOCPROPERTIES = 2260,IDM_ADDFAVORITES = 2261,IDM_COPYSHORTCUT = 2262,IDM_SAVEBACKGROUND = 2263,IDM_SETWALLPAPER = 2264,IDM_COPYBACKGROUND = 2265,IDM_CREATESHORTCUT = 2266,IDM_PAGE = 2267,IDM_SAVETARGET = 2268,IDM_SHOWPICTURE = 2269,IDM_SAVEPICTURE = 2270,IDM_DYNSRCPLAY = 2271,IDM_DYNSRCSTOP = 2272,IDM_PRINTTARGET = 2273,IDM_IMGARTPLAY = 2274,IDM_IMGARTSTOP = 2275,IDM_IMGARTREWIND = 2276,IDM_PRINTQUERYJOBSPENDING = 2277,IDM_CONTEXTMENU = 2280,IDM_GOBACKWARD = 2282,IDM_GOFORWARD = 2283,IDM_PRESTOP = 2284,IDM_CREATELINK = 2290,IDM_COPYCONTENT = 2291,IDM_LANGUAGE = 2292,IDM_REFRESH = 2300,IDM_STOPDOWNLOAD = 2301,IDM_ENABLE_INTERACTION = 2302,IDM_LAUNCHDEBUGGER = 2310,IDM_BREAKATNEXT = 2311,IDM_INSINPUTHIDDEN = 2312,IDM_INSINPUTPASSWORD = 2313,IDM_OVERWRITE = 2314,IDM_PARSECOMPLETE = 2315,IDM_HTMLEDITMODE = 2316,IDM_REGISTRYREFRESH = 2317,IDM_COMPOSESETTINGS = 2318,IDM_SHOWALLTAGS = 2320,IDM_SHOWALIGNEDSITETAGS = 2321,IDM_SHOWSCRIPTTAGS = 2322,IDM_SHOWSTYLETAGS = 2323,IDM_SHOWCOMMENTTAGS = 2324,IDM_SHOWAREATAGS = 2325,IDM_SHOWUNKNOWNTAGS = 2326,IDM_SHOWMISCTAGS = 2327,IDM_SHOWZEROBORDERATDESIGNTIME = 2328,IDM_AUTODETECT = 2329,IDM_SCRIPTDEBUGGER = 2330,IDM_GETBYTESDOWNLOADED = 2331,IDM_NOACTIVATENORMALOLECONTROLS = 2332,IDM_NOACTIVATEDESIGNTIMECONTROLS = 2333,IDM_NOACTIVATEJAVAAPPLETS = 2334,IDM_SHOWWBRTAGS = 2340,IDM_PERSISTSTREAMSYNC = 2341,IDM_SETDIRTY = 2342,IDM_MIMECSET__FIRST__ = 3609,IDM_MIMECSET__LAST__ = 3640,IDM_MENUEXT_FIRST__ = 3700,IDM_MENUEXT_LAST__ = 3732,IDM_MENUEXT_COUNT = 3733,IDM_OPEN = 2000,IDM_NEW = 2001,IDM_SAVE = 70,IDM_SAVEAS = 71,IDM_SAVECOPYAS = 2002,IDM_PRINTPREVIEW = 2003,IDM_PRINT = 27,IDM_PAGESETUP = 2004,IDM_SPELL = 2005,IDM_PASTESPECIAL = 2006,IDM_CLEARSELECTION = 2007,IDM_PROPERTIES = 28,IDM_REDO = 29,IDM_UNDO = 43,IDM_SELECTALL = 31,IDM_ZOOMPERCENT = 50,IDM_GETZOOM = 68,IDM_STOP = 2138,IDM_COPY = 15,IDM_CUT = 16,IDM_PASTE = 26,};
enum MACRO_IDS_WMCLOSE {IDS_WMCLOSE_CAPTION = 100,IDS_WMCLOSE_TEXT = 101,};
enum MACRO_IIS_MD_FILE {IIS_MD_FILE_PROP_BASE = 6000,};
enum MACRO_IIS_MD_HTTP {IIS_MD_HTTP_BASE = 2000,};
enum MACRO_IMAGE_DEBUG {IMAGE_DEBUG_MISC_EXENAME = 1,IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756,IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768,IMAGE_SEPARATE_DEBUG_MISMATCH = 32768,};
enum MACRO_IME_REQUEST {IME_REQUEST_CONVERT = 0x1,IME_ENABLE_CONVERT = 0x2,};
enum MACRO_INFOTIPSIZE {INFOTIPSIZE = 1024,};
enum MACRO_INTERNET_NO {INTERNET_NO_CALLBACK = 0,};
enum MACRO_IN_CONFLICT {MSGSTATUS_IN_CONFLICT = 0x800,PR_IN_CONFLICT = 0x666C000B,};
enum MACRO_IPX_SERVICE {IPX_SERVICE_FILTER_PERMIT = 1,IPX_SERVICE_FILTER_DENY = 2,};
enum MACRO_IPX_TRAFFIC {IPX_TRAFFIC_FILTER_ACTION_PERMIT = 1,IPX_TRAFFIC_FILTER_ACTION_DENY = 2,IPX_TRAFFIC_FILTER_ON_SRCNET = 1,IPX_TRAFFIC_FILTER_ON_SRCNODE = 2,IPX_TRAFFIC_FILTER_ON_SRCSOCKET = 4,IPX_TRAFFIC_FILTER_ON_DSTNET = 16,IPX_TRAFFIC_FILTER_ON_DSTNODE = 32,IPX_TRAFFIC_FILTER_ON_DSTSOCKET = 64,IPX_TRAFFIC_FILTER_ON_PKTTYPE = 256,IPX_TRAFFIC_FILTER_LOG_MATCHES = -2147483648,IPX_PROTOCOL_LOCAL = 1,IPX_PROTOCOL_STATIC = 2,};
enum MACRO_JOB_CONTROL {JOB_CONTROL_PAUSE = 1,JOB_CONTROL_RESUME = 2,JOB_CONTROL_CANCEL = 3,JOB_CONTROL_RESTART = 4,JOB_CONTROL_DELETE = 5,JOB_CONTROL_SENT_TO_PRINTER = 6,JOB_CONTROL_LAST_PAGE_EJECTED = 7,JOB_STATUS_PAUSED = 1,JOB_STATUS_ERROR = 2,JOB_STATUS_DELETING = 4,JOB_STATUS_SPOOLING = 8,JOB_STATUS_PRINTING = 16,JOB_STATUS_OFFLINE = 32,JOB_STATUS_PAPEROUT = 64,JOB_STATUS_PRINTED = 128,JOB_STATUS_DELETED = 256,JOB_STATUS_BLOCKED_DEVQ = 512,JOB_STATUS_USER_INTERVENTION = 1024,JOB_STATUS_RESTART = 2048,JOB_POSITION_UNSPECIFIED = 0,};
enum MACRO_JOYSTICKID1 {JOYSTICKID1 = 0,JOYSTICKID2 = 1,};
enum MACRO_KSALLOCATOR {KSALLOCATOR_REQUIREMENTF_INPLACE_MODIFIER = 0x1,KSALLOCATOR_REQUIREMENTF_SYSTEM_MEMORY = 0x2,KSALLOCATOR_REQUIREMENTF_FRAME_INTEGRITY = 0x4,KSALLOCATOR_REQUIREMENTF_MUST_ALLOCATE = 0x8,KSALLOCATOR_REQUIREMENTF_PREFERENCES_ONLY = 0x80000000,KSALLOCATOR_OPTIONF_COMPATIBLE = 0x1,KSALLOCATOR_OPTIONF_SYSTEM_MEMORY = 0x2,KSALLOCATOR_OPTIONF_VALID = 0x3,};
enum MACRO_KSFRAMETIME {KSFRAMETIME_VARIABLESIZE = 0x1,};
enum MACRO_LANG_SYSTEM {LANG_SYSTEM_DEFAULT = 2048,LANG_USER_DEFAULT = 1024,};
enum MACRO_LINEFEATURE {LINEFEATURE_DEVSPECIFIC = 0x1,LINEFEATURE_DEVSPECIFICFEAT = 0x2,LINEFEATURE_FORWARD = 0x4,LINEFEATURE_MAKECALL = 0x8,LINEFEATURE_SETMEDIACONTROL = 0x10,LINEFEATURE_SETTERMINAL = 0x20,LINEFEATURE_SETDEVSTATUS = 0x40,LINEFEATURE_FORWARDFWD = 0x80,LINEFEATURE_FORWARDDND = 0x100,};
enum MACRO_LINETERMDEV {LINETERMDEV_PHONE = 0x1,LINETERMDEV_HEADSET = 0x2,LINETERMDEV_SPEAKER = 0x4,};
enum MACRO_LINE_CREATE {LINE_CREATE = 19,PHONE_CREATE = 20,};
enum MACRO_LM20_DEVLEN {LM20_DEVLEN = 8,};
enum MACRO_LM20_UNCLEN {LM20_UNCLEN = 17,};
enum MACRO_LVN_KEYDOWN {LVN_KEYDOWN = -155,LVN_MARQUEEBEGIN = -156,};
enum MACRO_MAPI_CREATE {MAPI_CREATE = 0x2,};
enum MACRO_MAPI_REASON {MAPI_REASON_TRANSFER_FAILED = 0,MAPI_REASON_TRANSFER_IMPOSSIBLE = 1,MAPI_REASON_CONVERSION_NOT_PERFORMED = 2,MAPI_REASON_PHYSICAL_RENDITN_NOT_DONE = 3,MAPI_REASON_PHYSICAL_DELIV_NOT_DONE = 4,MAPI_REASON_RESTRICTED_DELIVERY = 5,MAPI_REASON_DIRECTORY_OPERATN_FAILED = 6,};
enum MACRO_MAXLONGLONG {MAXLONGLONG = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_MAXPNAMELEN {MAXPNAMELEN = 32,MAXERRORLENGTH = 256,};
enum MACRO_MAX_ADAPTER {MAX_ADAPTER_NAME_LEN = 48,};
enum MACRO_MAX_FEATURE {MAX_FEATURE_CHARS = 38,};
enum MACRO_MAX_NETLIBS {MAX_NETLIBS = 16,};
enum MACRO_MAX_PROFILE {MAX_PROFILE_LEN = 80,};
enum MACRO_MAX_REQUEST {MAX_REQUEST = 17,};
enum MACRO_MAX_SERVICE {MAX_SERVICE_NAME_LENGTH = 256,};
enum MACRO_MCIWNDOPENF {MCIWNDOPENF_NEW = 0x1,};
enum MACRO_MCW_DEFAULT {MCW_DEFAULT = 0x0,MCW_RECT = 0x1,MCW_WINDOW = 0x2,MCW_SCREEN = 0x4,MCW_VERTICAL = 0x8,MCW_HIDDEN = 0x10,};
enum MACRO_MDMSPKRFLAG {MDMSPKRFLAG_OFF = 0x1,MDMSPKRFLAG_DIAL = 0x2,MDMSPKRFLAG_ON = 0x4,MDMSPKRFLAG_CALLSETUP = 0x8,};
enum MACRO_MD_LOG_TYPE {MD_LOG_TYPE_DISABLED = 0,MD_LOG_TYPE_ENABLED = 1,MD_LOGFILE_PERIOD_NONE = 0,MD_LOGFILE_PERIOD_MAXSIZE = 0,MD_LOGFILE_PERIOD_DAILY = 1,MD_LOGFILE_PERIOD_WEEKLY = 2,MD_LOGFILE_PERIOD_MONTHLY = 3,MD_EXTLOG_DATE = 1,MD_EXTLOG_TIME = 2,MD_EXTLOG_CLIENT_IP = 4,MD_EXTLOG_USERNAME = 8,MD_EXTLOG_SITE_NAME = 16,MD_EXTLOG_COMPUTER_NAME = 32,MD_EXTLOG_SERVER_IP = 64,MD_EXTLOG_METHOD = 128,MD_EXTLOG_URI_STEM = 256,MD_EXTLOG_URI_QUERY = 512,MD_EXTLOG_HTTP_STATUS = 1024,MD_EXTLOG_WIN32_STATUS = 2048,MD_EXTLOG_BYTES_SENT = 4096,MD_EXTLOG_BYTES_RECV = 8192,MD_EXTLOG_TIME_TAKEN = 16384,MD_EXTLOG_SERVER_PORT = 32768,MD_EXTLOG_USER_AGENT = 65536,MD_EXTLOG_COOKIE = 131072,MD_EXTLOG_REFERER = 262144,MD_EXTLOG_PROTOCOL_VERSION = 524288,MD_DEFAULT_EXTLOG_FIELDS = 1414,MD_NOTIFY_SECURE_PORT = 1,MD_NOTIFY_NONSECURE_PORT = 2,MD_NOTIFY_READ_RAW_DATA = 32768,MD_NOTIFY_PREPROC_HEADERS = 16384,MD_NOTIFY_AUTHENTICATION = 8192,MD_NOTIFY_URL_MAP = 4096,MD_NOTIFY_ACCESS_DENIED = 2048,MD_NOTIFY_SEND_RESPONSE = 64,MD_NOTIFY_SEND_RAW_DATA = 1024,MD_NOTIFY_LOG = 512,MD_NOTIFY_END_OF_REQUEST = 128,MD_NOTIFY_END_OF_NET_SESSION = 256,MD_NOTIFY_ORDER_HIGH = 524288,MD_NOTIFY_ORDER_MEDIUM = 262144,MD_NOTIFY_ORDER_LOW = 131072,MD_NOTIFY_ORDER_DEFAULT = 131072,MD_NOTIFY_ORDER_MASK = 917504,};
enum MACRO_MM_JOY1MOVE {MM_JOY1MOVE = 0x3A0,MM_JOY2MOVE = 0x3A1,MM_JOY1ZMOVE = 0x3A2,MM_JOY2ZMOVE = 0x3A3,MM_JOY1BUTTONDOWN = 0x3B5,MM_JOY2BUTTONDOWN = 0x3B6,MM_JOY1BUTTONUP = 0x3B7,MM_JOY2BUTTONUP = 0x3B8,MM_MCINOTIFY = 0x3B9,MM_WOM_OPEN = 0x3BB,MM_WOM_CLOSE = 0x3BC,MM_WOM_DONE = 0x3BD,MM_WIM_OPEN = 0x3BE,MM_WIM_CLOSE = 0x3BF,MM_WIM_DATA = 0x3C0,MM_MIM_OPEN = 0x3C1,MM_MIM_CLOSE = 0x3C2,MM_MIM_DATA = 0x3C3,MM_MIM_LONGDATA = 0x3C4,MM_MIM_ERROR = 0x3C5,MM_MIM_LONGERROR = 0x3C6,MM_MOM_OPEN = 0x3C7,MM_MOM_CLOSE = 0x3C8,MM_MOM_DONE = 0x3C9,MM_DRVM_OPEN = 0x3D0,MM_DRVM_CLOSE = 0x3D1,MM_DRVM_DATA = 0x3D2,MM_DRVM_ERROR = 0x3D3,MM_STREAM_OPEN = 0x3D4,MM_STREAM_CLOSE = 0x3D5,MM_STREAM_DONE = 0x3D6,MM_STREAM_ERROR = 0x3D7,MM_MOM_POSITIONCB = 0x3CA,MM_MCISIGNAL = 0x3CB,MM_MIM_MOREDATA = 0x3CC,MM_MIXM_LINE_CHANGE = 0x3D0,MM_MIXM_CONTROL_CHANGE = 0x3D1,};
enum MACRO_MM_MAX_AXES {MM_MAX_AXES_NAMELEN = 16,};
enum MACRO_MOUSEEVENTF {MOUSEEVENTF_MOVE = 0x1,MOUSEEVENTF_LEFTDOWN = 0x2,MOUSEEVENTF_LEFTUP = 0x4,MOUSEEVENTF_RIGHTDOWN = 0x8,MOUSEEVENTF_RIGHTUP = 0x10,MOUSEEVENTF_MIDDLEDOWN = 0x20,MOUSEEVENTF_MIDDLEUP = 0x40,MOUSEEVENTF_WHEEL = 0x800,MOUSEEVENTF_ABSOLUTE = 0x8000,};
enum MACRO_MOUSETRAILS {MOUSETRAILS = 39,};
enum MACRO_MSGF_DDEMGR {MSGF_DDEMGR = 0x8001,};
enum MACRO_MSG_SERVICE {MSG_SERVICE_UI_READ_ONLY = 0x8,};
enum MACRO_MV_INSTANCE {MV_INSTANCE = 0x2000,};
enum MACRO_NCBDGRECVBC {NCBDGRECVBC = 0x23,};
enum MACRO_NCBDGSENDBC {NCBDGSENDBC = 0x22,};
enum MACRO_NCBFINDNAME {NCBFINDNAME = 0x78,};
enum MACRO_NETPROPERTY {NETPROPERTY_PERSISTENT = 1,};
enum MACRO_NONZEROLHND {NONZEROLHND = 2,};
enum MACRO_NONZEROLPTR {NONZEROLPTR = 0,};
enum MACRO_NOTSRCERASE {NOTSRCERASE = 0x1100A6,};
enum MACRO_NTEXPORT_DC {NTEXPORT_DC_NOT_FOUND = 0xC000012F,NTEXPORT_USER_ENUM_ERROR = 0xC0000130,NTEXPORT_SERVER_NOT_FOUND = 0xC0000131,};
enum MACRO_NTSEC_ERROR {NTSEC_ERROR_INVALID_NEW_PASSWORD = 0xE90005E7,NTSEC_ERROR_NEW_PASSWORD_HAS_REPEATING_CHARS = 0xE90005E8,NTSEC_ERROR_NEW_PASSWORD_TOO_LONG = 0xE90005E9,NTSEC_ERROR_NEW_PASSWORD_TOO_SHORT = 0xE90005EA,NTSEC_ERROR_NEW_PASSWORD_BAD_CHAR = 0xE90005EB,NTSEC_ERROR_NEW_PASSWORD_SPACES = 0xE90005EC,NTSEC_ERROR_NEW_PASSWORD_NULL = 0xE90005ED,NTSEC_ERROR_NEW_PASSWORD_NON_ALPHANUMERIC = 0xE90005EE,NTSEC_ERROR_NEW_PASSWORD_SAME_AS_PREVIOUS = 0xE90005EF,NTSEC_ERROR_NEW_PASSWORD_NOT_ALLOWED = 0xE90005F0,NTSEC_ERROR_NEW_PASSWORD_HISTORY_CONFLICT = 0xE90005F1,NTSEC_ERROR_REQUEST_REJECTED = 0xE90005F2,NTSEC_ERROR_PASSWORD_EXPIRED = 0xE90005F3,NTSEC_ERROR_ACCOUNT_DISABLED = 0xE90005F4,NTSEC_ERROR_ACCOUNT_LOCKED = 0xE90005F5,NTSEC_ERROR_USER_CANNOT_CHANGE_PASSWORD = 0xE90005F6,};
enum MACRO_NUMERICBIND {NUMERICBIND = 18,};
enum MACRO_NUMRESERVED {NUMRESERVED = 106,};
enum MACRO_OLEUI_BZERR {OLEUI_BZERR_HTASKINVALID = 116,OLEUI_BZ_SWITCHTOSELECTED = 117,OLEUI_BZ_RETRYSELECTED = 118,OLEUI_BZ_CALLUNBLOCKED = 119,};
enum MACRO_OLEUI_CIERR {OLEUI_CIERR_MUSTHAVECLSID = 116,OLEUI_CIERR_MUSTHAVECURRENTMETAFILE = 117,OLEUI_CIERR_SZICONEXEINVALID = 118,};
enum MACRO_OLEUI_CSERR {OLEUI_CSERR_LINKCNTRNULL = 116,OLEUI_CSERR_LINKCNTRINVALID = 117,OLEUI_CSERR_FROMNOTNULL = 118,OLEUI_CSERR_TONOTNULL = 119,OLEUI_CSERR_SOURCENULL = 120,OLEUI_CSERR_SOURCEINVALID = 121,OLEUI_CSERR_SOURCEPARSERROR = 122,OLEUI_CSERR_SOURCEPARSEERROR = 122,};
enum MACRO_OLEUI_CTERR {OLEUI_CTERR_CLASSIDINVALID = 117,OLEUI_CTERR_DVASPECTINVALID = 118,OLEUI_CTERR_CBFORMATINVALID = 119,OLEUI_CTERR_HMETAPICTINVALID = 120,OLEUI_CTERR_STRINGINVALID = 121,};
enum MACRO_OLEUI_IOERR {OLEUI_IOERR_LPSZFILEINVALID = 116,OLEUI_IOERR_LPSZLABELINVALID = 117,OLEUI_IOERR_HICONINVALID = 118,OLEUI_IOERR_LPFORMATETCINVALID = 119,OLEUI_IOERR_PPVOBJINVALID = 120,OLEUI_IOERR_LPIOLECLIENTSITEINVALID = 121,OLEUI_IOERR_LPISTORAGEINVALID = 122,OLEUI_IOERR_SCODEHASERROR = 123,OLEUI_IOERR_LPCLSIDEXCLUDEINVALID = 124,OLEUI_IOERR_CCHFILEINVALID = 125,};
enum MACRO_OLEUI_OPERR {OLEUI_OPERR_SUBPROPNULL = 116,OLEUI_OPERR_SUBPROPINVALID = 117,OLEUI_OPERR_PROPSHEETNULL = 118,OLEUI_OPERR_PROPSHEETINVALID = 119,OLEUI_OPERR_SUPPROP = 120,OLEUI_OPERR_PROPSINVALID = 121,OLEUI_OPERR_PAGESINCORRECT = 122,OLEUI_OPERR_INVALIDPAGES = 123,OLEUI_OPERR_NOTSUPPORTED = 124,OLEUI_OPERR_DLGPROCNOTNULL = 125,OLEUI_OPERR_LPARAMNOTZERO = 126,OLEUI_GPERR_STRINGINVALID = 127,OLEUI_GPERR_CLASSIDINVALID = 128,OLEUI_GPERR_LPCLSIDEXCLUDEINVALID = 129,OLEUI_GPERR_CBFORMATINVALID = 130,OLEUI_VPERR_METAPICTINVALID = 131,OLEUI_VPERR_DVASPECTINVALID = 132,OLEUI_LPERR_LINKCNTRNULL = 133,OLEUI_LPERR_LINKCNTRINVALID = 134,OLEUI_OPERR_PROPERTYSHEET = 135,OLEUI_OPERR_OBJINFOINVALID = 136,OLEUI_OPERR_LINKINFOINVALID = 137,OLEUI_QUERY_GETCLASSID = 65280,OLEUI_QUERY_LINKBROKEN = 65281,};
enum MACRO_OPENCHANNEL {OPENCHANNEL = 4110,};
enum MACRO_PASSTHROUGH {PASSTHROUGH = 19,};
enum MACRO_PDEVICESIZE {PDEVICESIZE = 26,};
enum MACRO_PFA_JUSTIFY {PFA_JUSTIFY = 4,};
enum MACRO_PID_CURRENT {PID_CURRENT = 4294967295,};
enum MACRO_PP_ENUMALGS {PP_ENUMALGS = 1,PP_ENUMCONTAINERS = 2,PP_IMPTYPE = 3,PP_NAME = 4,PP_VERSION = 5,PP_CONTAINER = 6,PP_CHANGE_PASSWORD = 7,PP_KEYSET_SEC_DESCR = 8,PP_CERTCHAIN = 9,PP_KEY_TYPE_SUBTYPE = 10,PP_PROVTYPE = 16,PP_KEYSTORAGE = 17,PP_APPLI_CERT = 18,PP_SYM_KEYSIZE = 19,PP_SESSION_KEYSIZE = 20,PP_UI_PROMPT = 21,PP_ENUMALGS_EX = 22,};
enum MACRO_PRINTACTION {PRINTACTION_OPEN = 0,PRINTACTION_PROPERTIES = 1,PRINTACTION_NETINSTALL = 2,PRINTACTION_NETINSTALLLINK = 3,PRINTACTION_TESTPAGE = 4,PRINTACTION_OPENNETPRN = 5,};
enum MACRO_PRINTDLGORD {PRINTDLGORD = 1538,};
enum MACRO_PRINTER_ALL {PRINTER_ALL_ACCESS = 983052,PRINTER_READ = 131080,PRINTER_WRITE = 131080,PRINTER_EXECUTE = 131080,};
enum MACRO_PROPSETFLAG {PROPSETFLAG_DEFAULT = 0,PROPSETFLAG_NONSIMPLE = 1,PROPSETFLAG_ANSI = 2,PROPSETFLAG_UNBUFFERED = 4,};
enum MACRO_PR_LONGTERM {PR_LONGTERM_ENTRYID_FROM_TABLE = 1718616322,PR_ORIGINATOR_NAME = 1717239838,PR_ORIGINATOR_ADDR = 1717305374,PR_ORIGINATOR_ADDRTYPE = 1717370910,PR_ORIGINATOR_ENTRYID = 1717436674,PR_ARRIVAL_TIME = 1717502016,PR_TRACE_INFO = 1717567746,PR_INTERNAL_TRACE_INFO = 1718223106,PR_SUBJECT_TRACE_INFO = 1717633282,PR_RECIPIENT_NUMBER = 1717698563,PR_MTS_SUBJECT_ID = 1717764354,PR_REPORT_DESTINATION_NAME = 1717829662,PR_REPORT_DESTINATION_ENTRYID = 1717895426,PR_CONTENT_SEARCH_KEY = 1717960962,PR_FOREIGN_ID = 1718026498,PR_FOREIGN_REPORT_ID = 1718092034,PR_FOREIGN_SUBJECT_ID = 1718157570,PR_MTS_ID = 4653314,PR_MTS_REPORT_ID = 4653314,};
enum MACRO_RASPBDEVENT {RASPBDEVENT_AddEntry = 1,RASPBDEVENT_EditEntry = 2,RASPBDEVENT_RemoveEntry = 3,RASPBDEVENT_DialEntry = 4,RASPBDEVENT_EditGlobals = 5,RASPBDEVENT_NoUser = 6,RASPBDEVENT_NoUserEdit = 7,};
enum MACRO_RC_WDEFAULT {RC_WDEFAULT = 0xFFFF,RC_LDEFAULT = 0xFFFFFFFF,RC_WDEFAULTFLAGS = 0x8000,RC_LDEFAULTFLAGS = 0x80000000,};
enum MACRO_REGISTERING {REGISTERING = 0x0,REGISTERED = 0x4,};
enum MACRO_RNIMAJORVER {RNIMAJORVER = 2,};
enum MACRO_RNIMINORVER {RNIMINORVER = 0,RNIVER = 131072,};
enum MACRO_SCARD_CLASS {SCARD_CLASS_VENDOR_INFO = 1,SCARD_CLASS_COMMUNICATIONS = 2,SCARD_CLASS_PROTOCOL = 3,SCARD_CLASS_POWER_MGMT = 4,SCARD_CLASS_SECURITY = 5,SCARD_CLASS_MECHANICAL = 6,SCARD_CLASS_VENDOR_DEFINED = 7,SCARD_CLASS_IFD_PROTOCOL = 8,SCARD_CLASS_ICC_STATE = 9,SCARD_CLASS_SYSTEM = 32767,SCARD_ATTR_VENDOR_NAME = 65792,SCARD_ATTR_VENDOR_IFD_TYPE = 65793,SCARD_ATTR_VENDOR_IFD_VERSION = 65794,SCARD_ATTR_VENDOR_IFD_SERIAL_NO = 65795,SCARD_ATTR_CHANNEL_ID = 131344,SCARD_ATTR_ASYNC_PROTOCOL_TYPES = 196896,SCARD_ATTR_DEFAULT_CLK = 196897,SCARD_ATTR_MAX_CLK = 196898,SCARD_ATTR_DEFAULT_DATA_RATE = 196899,SCARD_ATTR_MAX_DATA_RATE = 196900,SCARD_ATTR_MAX_IFSD = 196901,SCARD_ATTR_SYNC_PROTOCOL_TYPES = 196902,SCARD_ATTR_POWER_MGMT_SUPPORT = 262449,SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = 328000,SCARD_ATTR_USER_AUTH_INPUT_DEVICE = 328002,SCARD_ATTR_CHARACTERISTICS = 393552,SCARD_ATTR_CURRENT_PROTOCOL_TYPE = 524801,SCARD_ATTR_CURRENT_CLK = 524802,SCARD_ATTR_CURRENT_F = 524803,SCARD_ATTR_CURRENT_D = 524804,SCARD_ATTR_CURRENT_N = 524805,SCARD_ATTR_CURRENT_W = 524806,SCARD_ATTR_CURRENT_IFSC = 524807,SCARD_ATTR_CURRENT_IFSD = 524808,SCARD_ATTR_CURRENT_BWT = 524809,SCARD_ATTR_CURRENT_CWT = 524810,SCARD_ATTR_CURRENT_EBC_ENCODING = 524811,SCARD_ATTR_EXTENDED_BWT = 524812,SCARD_ATTR_ICC_PRESENCE = 590592,SCARD_ATTR_ICC_INTERFACE_STATUS = 590593,SCARD_ATTR_CURRENT_IO_STATE = 590594,SCARD_ATTR_ATR_STRING = 590595,SCARD_ATTR_ICC_TYPE_PER_ATR = 590596,SCARD_ATTR_ESC_RESET = 499712,SCARD_ATTR_ESC_CANCEL = 499715,SCARD_ATTR_ESC_AUTHREQUEST = 499717,SCARD_ATTR_MAXINPUT = 499719,SCARD_ATTR_DEVICE_UNIT = 2147418113,SCARD_ATTR_DEVICE_IN_USE = 2147418114,SCARD_ATTR_DEVICE_FRIENDLY_NAME_A = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME_A = 2147418116,SCARD_ATTR_DEVICE_FRIENDLY_NAME_W = 2147418117,SCARD_ATTR_DEVICE_SYSTEM_NAME_W = 2147418118,SCARD_ATTR_SUPRESS_T1_IFS_REQUEST = 2147418119,SCARD_ATTR_DEVICE_FRIENDLY_NAME = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME = 2147418116,SCARD_T0_HEADER_LENGTH = 7,SCARD_T0_CMD_LENGTH = 5,SCARD_T1_PROLOGUE_LENGTH = 3,SCARD_T1_EPILOGUE_LENGTH = 2,SCARD_T1_MAX_IFS = 254,SCARD_UNKNOWN = 0,SCARD_ABSENT = 1,SCARD_PRESENT = 2,SCARD_SWALLOWED = 3,SCARD_POWERED = 4,SCARD_NEGOTIABLE = 5,SCARD_SPECIFIC = 6,SCARD_READER_SWALLOWS = 1,SCARD_READER_EJECTS = 2,SCARD_READER_CONFISCATES = 4,SCARD_READER_TYPE_SERIAL = 1,SCARD_READER_TYPE_PARALELL = 2,SCARD_READER_TYPE_KEYBOARD = 4,SCARD_READER_TYPE_SCSI = 8,SCARD_READER_TYPE_IDE = 16,SCARD_READER_TYPE_USB = 32,SCARD_READER_TYPE_PCMCIA = 64,SCARD_READER_TYPE_VENDOR = 240,};
enum MACRO_SDP_ALREADY {SDP_ALREADY_PARSED = -536869863,SDP_INVALID_PARAMETER = -536869862,SDP_INVALID_VALUE = -536869861,SDP_OUTPUT_ERROR = -536869860,};
enum MACRO_SECPKG_ATTR {SECPKG_ATTR_REMOTE_CERT_CONTEXT = 0x53,SECPKG_ATTR_LOCAL_CERT_CONTEXT = 0x54,SECPKG_ATTR_ROOT_STORE = 0x55,SECPKG_ATTR_SUPPORTED_ALGS = 0x56,SECPKG_ATTR_CIPHER_STRENGTHS = 0x57,SECPKG_ATTR_SUPPORTED_PROTOCOLS = 0x58,SECPKG_ATTR_ISSUER_LIST_EX = 0x59,SECPKG_ATTR_CONNECTION_INFO = 0x5A,};
enum MACRO_SECPKG_CRED {SECPKG_CRED_INBOUND = 0x1,SECPKG_CRED_OUTBOUND = 0x2,SECPKG_CRED_BOTH = 0x3,};
enum MACRO_SECURITYMSG {SECURITYMSG_SUCCESS = 1,SECURITYMSG_FAILURE = 2,SECURITYMSG_ERROR = 3,};
enum MACRO_SENSITIVITY {SENSITIVITY_NONE = 0x0,SENSITIVITY_PERSONAL = 0x1,SENSITIVITY_PRIVATE = 0x2,SENSITIVITY_COMPANY_CONFIDENTIAL = 0x3,};
enum MACRO_SERVICETYPE {SERVICETYPE_NOTRAFFIC = 0x0,SERVICETYPE_BESTEFFORT = 0x1,SERVICETYPE_CONTROLLEDLOAD = 0x2,SERVICETYPE_GUARANTEED = 0x3,SERVICETYPE_NETWORK_UNAVAILABLE = 0x4,SERVICETYPE_GENERAL_INFORMATION = 0x5,SERVICETYPE_NOCHANGE = 0x6,};
enum MACRO_SERVICE_NOT {SERVICE_NOT_UNINSTALLABLE = 0x0,SERVICE_UNINSTALLABLE = 0x10,SERVICE_NOT_PAUSABLE = 0x0,SERVICE_PAUSABLE = 0x20,SERVICE_REDIR_PAUSED = 0x700,SERVICE_REDIR_DISK_PAUSED = 0x100,SERVICE_REDIR_PRINT_PAUSED = 0x200,SERVICE_REDIR_COMM_PAUSED = 0x400,SERVICE_CTRL_INTERROGATE = 0x0,SERVICE_CTRL_PAUSE = 0x1,SERVICE_CTRL_CONTINUE = 0x2,SERVICE_CTRL_UNINSTALL = 0x3,SERVICE_CTRL_REDIR_DISK = 0x1,SERVICE_CTRL_REDIR_PRINT = 0x2,SERVICE_CTRL_REDIR_COMM = 0x4,SERVICE_IP_NO_HINT = 0x0,SERVICE_CCP_NO_HINT = 0x0,SERVICE_IP_QUERY_HINT = 0x10000,SERVICE_CCP_QUERY_HINT = 0x10000,SERVICE_IP_CHKPT_NUM = 0xFF,SERVICE_CCP_CHKPT_NUM = 0xFF,SERVICE_IP_WAIT_TIME = 0xFF00,SERVICE_CCP_WAIT_TIME = 0xFF00,SERVICE_IP_WAITTIME_SHIFT = 0x8,SERVICE_NTIP_WAITTIME_SHIFT = 0xC,};
enum MACRO_SERVICE_UIC {SERVICE_UIC_M_NETLOGON_MPATH = 5600,SERVICE_UIC_M_LSA_MACHINE_ACCT = 5601,SERVICE_UIC_M_DATABASE_ERROR = 5602,};
enum MACRO_SETLINEJOIN {SETLINEJOIN = 22,};
enum MACRO_SET_SERVICE {SET_SERVICE_PARTIAL_SUCCESS = 0x1,};
enum MACRO_SIZEPALETTE {SIZEPALETTE = 104,};
enum MACRO_SIZE_DVINFO {SIZE_DVINFO = 0x20,};
enum MACRO_SNMP_SYNTAX {SNMP_SYNTAX_INT = 0x2,SNMP_SYNTAX_BITS = 0x3,SNMP_SYNTAX_OCTETS = 0x4,SNMP_SYNTAX_NULL = 0x5,SNMP_SYNTAX_OID = 0x6,SNMP_SYNTAX_INT32 = 0x2,SNMP_SYNTAX_SEQUENCE = 0x30,SNMP_SYNTAX_IPADDR = 0x40,SNMP_SYNTAX_CNTR32 = 0x41,SNMP_SYNTAX_GAUGE32 = 0x42,SNMP_SYNTAX_TIMETICKS = 0x43,SNMP_SYNTAX_OPAQUE = 0x44,SNMP_SYNTAX_NSAPADDR = 0x45,SNMP_SYNTAX_CNTR64 = 0x46,SNMP_SYNTAX_UINT32 = 0x47,SNMP_SYNTAX_NOSUCHOBJECT = 0x80,SNMP_SYNTAX_NOSUCHINSTANCE = 0x81,SNMP_SYNTAX_ENDOFMIBVIEW = 0x82,};
enum MACRO_SO_CONNDATA {SO_CONNDATA = 0x7000,SO_CONNOPT = 0x7001,SO_DISCDATA = 0x7002,SO_DISCOPT = 0x7003,SO_CONNDATALEN = 0x7004,SO_CONNOPTLEN = 0x7005,SO_DISCDATALEN = 0x7006,SO_DISCOPTLEN = 0x7007,SO_OPENTYPE = 0x7008,SO_SYNCHRONOUS_ALERT = 0x10,SO_SYNCHRONOUS_NONALERT = 0x20,SO_MAXDG = 0x7009,SO_MAXPATHDG = 0x700A,SO_UPDATE_ACCEPT_CONTEXT = 0x700B,SO_CONNECT_TIME = 0x700C,};
enum MACRO_SO_LINKINFO {SO_LINKINFO = 7,};
enum MACRO_SO_REGISTER {SO_REGISTER_NAME = 0xA000,SO_DEREGISTER_NAME = 0xA001,SO_REMOVE_NAME = 0xA001,SO_LOOKUP_NAME = 0xA002,SO_CONFIRM_NAME = 0xA003,SO_LOOKUP_MYZONE = 0xA004,SO_GETMYZONE = 0xA004,SO_LOOKUP_ZONES = 0xA005,SO_GETZONELIST = 0xA005,SO_LOOKUP_ZONES_ON_ADAPTER = 0xA006,SO_GETLOCALZONES = 0xA006,SO_LOOKUP_NETDEF_ON_ADAPTER = 0xA007,SO_GETNETINFO = 0xA007,SO_PAP_SET_SERVER_STATUS = 0xA007,SO_PAP_GET_SERVER_STATUS = 0xA008,SO_PAP_PRIME_READ = 0xA009,};
enum MACRO_SPI_VERSION {CURRENT_SPI_VERSION = 0x10010,PDK1_SPI_VERSION = 0x10000,PDK2_SPI_VERSION = 0x10008,PDK3_SPI_VERSION = 0x10010,};
enum MACRO_SQLCRSBSKEY {SQLCRSBSKEY = 10082,};
enum MACRO_SQLCRSFLAST {SQLCRSFLAST = 10089,};
enum MACRO_SQLCRSFRAND {SQLCRSFRAND = 10088,};
enum MACRO_SQLCRSFROWN {SQLCRSFROWN = 10086,};
enum MACRO_SQLCRSNOIND {SQLCRSNOIND = 10077,};
enum MACRO_SQLCRSNORES {SQLCRSNORES = 10083,};
enum MACRO_SQLCRSNOUPD {SQLCRSNOUPD = 10095,};
enum MACRO_SQLCRSUPDNB {SQLCRSUPDNB = 10093,};
enum MACRO_SQLCRSVIIND {SQLCRSVIIND = 10094,};
enum MACRO_SQLENOTIMPL {SQLENOTIMPL = 10108,};
enum MACRO_SRVDATETIM4 {SRVDATETIM4 = 58,};
enum MACRO_SRVDATETIME {SRVDATETIME = 61,};
enum MACRO_SRVDATETIMN {SRVDATETIMN = 111,};
enum MACRO_SRVDECIMALN {SRVDECIMALN = 106,};
enum MACRO_SRVDONEPROC {SRVDONEPROC = 254,};
enum MACRO_SRVNUMERICN {SRVNUMERICN = 108,};
enum MACRO_SRV_DEFAULT {SRV_DEFAULT_SERVBSIZE = 512,};
enum MACRO_STATURLFLAG {STATURLFLAG_ISCACHED = 0x1,};
enum MACRO_STGM_DFRALL {STGM_DFRALL = 65570,STGM_DFALL = 65554,STGM_SALL = 18,};
enum MACRO_STYLE_NEVER {STYLE_NEVER = 0,STYLE_NORMAL = 1,STYLE_ALWAYS = 2,STYLE_DEFAULT = 4294967295,};
enum MACRO_ST_DISABLED {ST_DISABLED = 0x0,ST_ENABLED = 0x1,ST_ERROR = 0x2,ST_ONLY_WHEN_OOF = 0x4,ST_KEEP_OOF_HIST = 0x8,ST_EXIT_LEVEL = 0x10,ST_CLEAR_OOF_HIST = 0x80000000,};
enum MACRO_SV_PLATFORM {SV_PLATFORM_ID_OS2 = 400,SV_PLATFORM_ID_NT = 500,};
enum MACRO_SW_AUTOPROF {SW_AUTOPROF_LOAD_MASK = 0x1,SW_AUTOPROF_SAVE_MASK = 0x2,};
enum MACRO_SYNCHRONIZE {SYNCHRONIZE = 0x100000,};
enum MACRO_SYSTEM_FLAG {SYSTEM_FLAG_REMOTE_BOOT_CLIENT = 0x1,SYSTEM_FLAG_DISKLESS_CLIENT = 0x2,};
enum MACRO_TAPE_RETURN {TAPE_RETURN_STATISTICS = 0,TAPE_RETURN_ENV_INFO = 1,TAPE_RESET_STATISTICS = 2,};
enum MACRO_TCM_HITTEST {TCM_HITTEST = 4877,TCM_SETITEMEXTRA = 4878,TCM_ADJUSTRECT = 4904,TCM_SETITEMSIZE = 4905,TCM_REMOVEIMAGE = 4906,TCM_SETPADDING = 4907,TCM_GETROWCOUNT = 4908,TCM_GETTOOLTIPS = 4909,TCM_SETTOOLTIPS = 4910,TCM_GETCURFOCUS = 4911,TCM_SETCURFOCUS = 4912,TCM_SETMINTABWIDTH = 4913,TCM_DESELECTALL = 4914,TCM_HIGHLIGHTITEM = 4915,TCM_SETEXTENDEDSTYLE = 4916,TCM_GETEXTENDEDSTYLE = 4917,TCM_SETUNICODEFORMAT = 8197,TCM_GETUNICODEFORMAT = 8198,};
enum MACRO_TCN_KEYDOWN {TCN_KEYDOWN = -550,TCN_SELCHANGE = -551,TCN_SELCHANGING = -552,TCN_GETOBJECT = -553,};
enum MACRO_THREAD_BASE {THREAD_BASE_PRIORITY_LOWRT = 15,THREAD_BASE_PRIORITY_MAX = 2,THREAD_BASE_PRIORITY_MIN = -2,THREAD_BASE_PRIORITY_IDLE = -15,};
enum MACRO_TRANSPARENT {TRANSPARENT = 1,OPAQUE = 2,};
enum MACRO_UI_READONLY {UI_READONLY = 0x1,};
enum MACRO_UPDATELINKS {UPDATELINKS_STARTDELAY = 2000,};
enum MACRO_USE_NOFORCE {USE_NOFORCE = 0,USE_FORCE = 1,USE_LOTS_OF_FORCE = 2,USE_LOCAL_PARMNUM = 1,USE_REMOTE_PARMNUM = 2,USE_PASSWORD_PARMNUM = 3,USE_ASGTYPE_PARMNUM = 4,USE_USERNAME_PARMNUM = 5,USE_DOMAINNAME_PARMNUM = 6,USE_OK = 0,USE_PAUSED = 1,USE_SESSLOST = 2,USE_DISCONN = 2,USE_NETERR = 3,USE_CONN = 4,USE_RECONN = 5,USE_WILDCARD = 4294967295,USE_DISKDEV = 0,USE_SPOOLDEV = 1,USE_CHARDEV = 2,USE_IPC = 3,};
enum MACRO_VARYBINBIND {VARYBINBIND = 13,};
enum MACRO_WAPPCCANCEL {WAPPCCANCEL = 0xF002,};
enum MACRO_WAVE_FILTER {WAVE_FILTER_UNKNOWN = 0x0,WAVE_FILTER_DEVELOPMENT = 0xFFFF,WAVE_FILTER_VOLUME = 0x1,WAVE_FILTER_ECHO = 0x2,};
enum MACRO_WAVE_FORMAT {WAVE_FORMAT_UNKNOWN = 0x0,WAVE_FORMAT_ADPCM = 0x2,WAVE_FORMAT_IEEE_FLOAT = 0x3,WAVE_FORMAT_IBM_CVSD = 0x5,WAVE_FORMAT_ALAW = 0x6,WAVE_FORMAT_MULAW = 0x7,WAVE_FORMAT_OKI_ADPCM = 0x10,WAVE_FORMAT_DVI_ADPCM = 0x11,WAVE_FORMAT_IMA_ADPCM = 0x11,WAVE_FORMAT_MEDIASPACE_ADPCM = 0x12,WAVE_FORMAT_SIERRA_ADPCM = 0x13,WAVE_FORMAT_G723_ADPCM = 0x14,WAVE_FORMAT_DIGISTD = 0x15,WAVE_FORMAT_DIGIFIX = 0x16,WAVE_FORMAT_DIALOGIC_OKI_ADPCM = 0x17,WAVE_FORMAT_MEDIAVISION_ADPCM = 0x18,WAVE_FORMAT_YAMAHA_ADPCM = 0x20,WAVE_FORMAT_SONARC = 0x21,WAVE_FORMAT_DSPGROUP_TRUESPEECH = 0x22,WAVE_FORMAT_ECHOSC1 = 0x23,WAVE_FORMAT_AUDIOFILE_AF36 = 0x24,WAVE_FORMAT_APTX = 0x25,WAVE_FORMAT_AUDIOFILE_AF10 = 0x26,WAVE_FORMAT_DOLBY_AC2 = 0x30,WAVE_FORMAT_GSM610 = 0x31,WAVE_FORMAT_MSNAUDIO = 0x32,WAVE_FORMAT_ANTEX_ADPCME = 0x33,WAVE_FORMAT_CONTROL_RES_VQLPC = 0x34,WAVE_FORMAT_DIGIREAL = 0x35,WAVE_FORMAT_DIGIADPCM = 0x36,WAVE_FORMAT_CONTROL_RES_CR10 = 0x37,WAVE_FORMAT_NMS_VBXADPCM = 0x38,WAVE_FORMAT_CS_IMAADPCM = 0x39,WAVE_FORMAT_ECHOSC3 = 0x3A,WAVE_FORMAT_ROCKWELL_ADPCM = 0x3B,WAVE_FORMAT_ROCKWELL_DIGITALK = 0x3C,WAVE_FORMAT_XEBEC = 0x3D,WAVE_FORMAT_G721_ADPCM = 0x40,WAVE_FORMAT_G728_CELP = 0x41,WAVE_FORMAT_MPEG = 0x50,WAVE_FORMAT_MPEGLAYER3 = 0x55,WAVE_FORMAT_CIRRUS = 0x60,WAVE_FORMAT_ESPCM = 0x61,WAVE_FORMAT_VOXWARE = 0x62,};
enum MACRO_WB_CLASSIFY {WB_CLASSIFY = 3,WB_MOVEWORDLEFT = 4,WB_MOVEWORDRIGHT = 5,WB_LEFTBREAK = 6,WB_RIGHTBREAK = 7,WB_MOVEWORDPREV = 4,WB_MOVEWORDNEXT = 5,WB_PREVBREAK = 6,WB_NEXTBREAK = 7,};
enum MACRO_WCPICCANCEL {WCPICCANCEL = 0xF002,};
enum MACRO_WININETINFO {WININETINFO_OPTION_LOCK_HANDLE = 65534,};
enum MACRO_WLUAINVALID {WLUAINVALID = 3,WLUAFAILURE = 4,};
enum MACRO_WLUASIDZERO {WLUASIDZERO = 21,};
enum MACRO_WLUAUNKNOWN {WLUAUNKNOWN = 255,};
enum MACRO_WSAEALREADY {WSAEALREADY = 10037,};
enum MACRO_WSAEMSGSIZE {WSAEMSGSIZE = 10040,};
enum MACRO_WSAENETDOWN {WSAENETDOWN = 10050,};
enum MACRO_WSAENOTCONN {WSAENOTCONN = 10057,};
enum MACRO_WSAENOTSOCK {WSAENOTSOCK = 10038,};
enum MACRO_WSAEPROCLIM {WSAEPROCLIM = 10067,};
enum MACRO_WSAEREFUSED {WSAEREFUSED = 10112,};
enum MACRO_WSAPROTOCOL {WSAPROTOCOL_LEN = 255,};
enum MACRO_Workstation {Workstation = 0,LANMan = 1,NetWare = 2,};
enum MACRO_XIDDATASIZE {XIDDATASIZE = 128,};
enum MACRO__HEAPBADPTR {_HEAPBADPTR = -6,};
enum MACRO__INC_AVIFMT {_INC_AVIFMT = 100,};
enum MACRO__MAX_BLOCKS {_MAX_BLOCKS = 5,};
enum MACRO_attAidOwner {attAidOwner = 0x50008,};
enum MACRO_attDateRecd {attDateRecd = 0x38006,};
enum MACRO_attDateSent {attDateSent = 0x38005,};
enum MACRO_attDelegate {attDelegate = 0x60002,};
enum MACRO_attParentID {attParentID = 0x1800A,};
enum MACRO_attPriority {attPriority = 0x4800D,};
enum MACRO_cbEmailName {cbEmailName = 11,};
enum MACRO_cbRcUserMax {cbRcUserMax = 32,};
enum MACRO_cbSeverName {cbSeverName = 12,cbTYPE = 16,cbMaxIdData = 200,};
enum MACRO_comptypeDIB {comptypeDIB = 541215044,};
enum MACRO_dispidClear {dispidClear = 1002,};
enum MACRO_dispidGetCC {dispidGetCC = 3010,};
enum MACRO_dispidSetCC {dispidSetCC = 3011,};
enum MACRO_formtypeAVI {formtypeAVI = 541677121,};
enum MACRO_hrFileClose {hrFileClose = 0xC8000066,};
enum MACRO_hrKeyIsMade {hrKeyIsMade = 0xC80005EC,};
enum MACRO_hrTooManyIO {hrTooManyIO = 0xC8000069,};
enum MACRO_idsBadOldPW {idsBadOldPW = 1006,};
enum MACRO_idsChangePW {idsChangePW = 1005,};
enum MACRO_idsHelpFile {idsHelpFile = 1009,};
enum MACRO_idsPassword {idsPassword = 1003,};
enum MACRO_lDefaultTab {lDefaultTab = 720,};
enum MACRO_pidAdminMin {pidAdminMin = 0x6690,};
enum MACRO_pidStoreMin {pidStoreMin = 0x6618,};
enum MACRO_tevtUserMin {tevtUserMin = 2000,};
enum MACRO_trpidIgnore {trpidIgnore = 0x7,trpidClassEntry = 0x8,};
enum MACRO_ulKindOpMap {ulKindOpMap = 0,lidOpMap = 1,ptOpMap = 30,};
typedef struct _FDC653A8F1B81D585EA1877B866731F7 MCI_DGV_CUE_PARMS;
typedef struct _434864393F5F5FC8FD08DA4EC836A36F MCI_DGV_CUT_PARMS;
typedef struct _6652B21352113B30C39F76850DA69899 MCI_DGV_SET_PARMS;
typedef struct tagMCI_GENERIC_PARMS MCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS MCI_SEQ_SET_PARMS;
typedef struct tagMCI_VCR_CUE_PARMS MCI_VCR_CUE_PARMS;
typedef struct tagMCI_VCR_SET_PARMS MCI_VCR_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS MCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS MCI_VD_STEP_PARMS;
typedef struct mc_get_attributes MC_GET_ATTRIBUTES;
typedef struct tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO MENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD MENU_EVENT_RECORD;
typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef struct tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
typedef struct _NET_DISPLAY_GROUP NET_DISPLAY_GROUP;
typedef struct tagNMDATETIMEFORMATA NMDATETIMEFORMATA;
typedef struct tagNMDATETIMEFORMATW NMDATETIMEFORMATW;
typedef struct tagNMDATETIMESTRINGA NMDATETIMESTRINGA;
typedef struct tagNMDATETIMESTRINGW NMDATETIMESTRINGW;
typedef struct tagNMLVODSTATECHANGE NMLVODSTATECHANGE;
typedef struct tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
typedef struct tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;
typedef struct DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;
typedef struct tagRECONVERTSTRING *NPRECONVERTSTRING;
enum NtmsCreateOptions {NTMS_OPEN_EXISTING = 0x1,NTMS_CREATE_NEW = 0x2,NTMS_OPEN_ALWAYS = 0x3,};
enum NtmsMountPriority {NTMS_PRIORITY_DEFAULT = 0x32,NTMS_PRIORITY_HIGHEST = 0x1,NTMS_PRIORITY_HIGH = 0x19,NTMS_PRIORITY_NORMAL = 0x32,NTMS_PRIORITY_LOW = 0x4B,NTMS_PRIORITY_LOWEST = 0x64,};
typedef struct tagOLEUIOBJECTPROPSA OLEUIOBJECTPROPSA;
typedef struct tagOLEUIOBJECTPROPSW OLEUIOBJECTPROPSW;
typedef struct olicelpwaveformat_tag OLICELPWAVEFORMAT;
typedef struct _ACCESS_INFO_1002 *PACCESS_INFO_1002;
typedef struct tACMFILTERCHOOSEA *PACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW *PACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA *PACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW *PACMFORMATCHOOSEW;
typedef struct _ACTRL_OVERLAPPED *PACTRL_OVERLAPPED;
typedef struct _ADDRESS_RESERVED *PADDRESS_RESERVED;
typedef struct _ADMIN_OTHER_INFO *PADMIN_OTHER_INFO;
typedef struct __MIDL___MIDL__intf_0000_0002 *PADS_OCTET_STRING;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 *PAM_AC3_ROOM_TYPE;
typedef struct _audcapinfolist *PAUDCAP_INFO_LIST;
typedef struct tagBITMAPCOREHEADER *PBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *PBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *PBITMAPINFOHEADER;
typedef struct _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO *PCERT_POLICY_INFO;
typedef struct _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;
typedef struct _tagCOLORMATCHSETUPA *PCOLORMATCHSETUPA;
typedef struct _tagCOLORMATCHSETUPW *PCOLORMATCHSETUPW;
typedef struct _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;
typedef struct tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;
typedef struct _DFS_STORAGE_INFO *PDFS_STORAGE_INFO;
typedef struct _DISK_PERFORMANCE *PDISK_PERFORMANCE;
typedef struct tagEMRCREATEPALETTE *PEMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE *PEMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;
typedef struct tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;
typedef struct _EXPLICIT_ACCESS_A *PEXPLICIT_ACCESSA;
typedef struct _EXPLICIT_ACCESS_W *PEXPLICIT_ACCESSW;
typedef IFileSourceFilter *PFILTERFILESOURCE;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 *PFIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER *PFIND_NAME_HEADER;
typedef void ( *PFNIMGCTXCALLBACK)(void *, void *);
typedef struct _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;
typedef struct _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;
typedef struct _IPX_ADAPTER_INFO *PIPX_ADAPTER_INFO;
typedef struct _IPX_ADDRESS_DATA *PIPX_ADDRESS_DATA;
typedef struct _IPX_SERVER_ENTRY *PIPX_SERVER_ENTRY;
typedef struct IP_LOCAL_BINDING *PIP_LOCAL_BINDING;
typedef struct _IP_SPECIFIC_DATA *PIP_SPECIFIC_DATA;
typedef struct _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;
typedef struct _01091B9DEBEBC2354EBF1594EEF6BE89 *PKSPIN_CINSTANCES;
typedef struct _A77A9FF834B5EBD4EC6B664E82547FE4 *PLLC_READ_COMMAND;
typedef struct plu_def_info_sect PLU_DEF_INFO_SECT;
typedef struct tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;
typedef struct _46B8CD9DF897759D0306203A2121EA8B *PMENUITEMTEMPLATE;
typedef struct _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;
typedef struct tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;
typedef struct _NDR_PIPE_MESSAGE *PNDR_PIPE_MESSAGE;
typedef struct _NET_DISPLAY_USER *PNET_DISPLAY_USER;
typedef struct _NS_SERVICE_INFOA *PNS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW *PNS_SERVICE_INFOW;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;
typedef struct tagOLEUICHANGEICONA *POLEUICHANGEICONA;
typedef struct tagOLEUICHANGEICONW *POLEUICHANGEICONW;
typedef struct tagOLEUIPASTEENTRYA *POLEUIPASTEENTRYA;
typedef struct tagOLEUIPASTEENTRYW *POLEUIPASTEENTRYW;
typedef struct _OSVERSIONINFOEXA *POSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *POSVERSIONINFOEXW;
typedef struct _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;
typedef struct _PRINT_OTHER_INFO *PPRINT_OTHER_INFO;
typedef struct _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;
typedef struct _tagREADCONTROLSPACE *PREADCONTROLSPACE;
typedef struct _REPL_EDIR_INFO_0 *PREPL_EDIR_INFO_0;
typedef struct _REPL_EDIR_INFO_1 *PREPL_EDIR_INFO_1;
typedef struct _REPL_EDIR_INFO_2 *PREPL_EDIR_INFO_2;
typedef struct _REPL_IDIR_INFO_0 *PREPL_IDIR_INFO_0;
typedef struct _REPL_IDIR_INFO_1 *PREPL_IDIR_INFO_1;
typedef struct _PRINTER_DEFAULTSA PRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW PRINTER_DEFAULTSW;
typedef struct _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;
typedef struct _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;
typedef struct _SECURITY_MESSAGE *PSECURITY_MESSAGE;
typedef struct _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;
typedef struct _SERVER_INFO_1005 *PSERVER_INFO_1005;
typedef struct _SERVER_INFO_1010 *PSERVER_INFO_1010;
typedef struct _SERVER_INFO_1016 *PSERVER_INFO_1016;
typedef struct _SERVER_INFO_1017 *PSERVER_INFO_1017;
typedef struct _SERVER_INFO_1018 *PSERVER_INFO_1018;
typedef struct _SERVER_INFO_1107 *PSERVER_INFO_1107;
typedef struct _SERVER_INFO_1501 *PSERVER_INFO_1501;
typedef struct _SERVER_INFO_1502 *PSERVER_INFO_1502;
typedef struct _SERVER_INFO_1503 *PSERVER_INFO_1503;
typedef struct _SERVER_INFO_1506 *PSERVER_INFO_1506;
typedef struct _SERVER_INFO_1509 *PSERVER_INFO_1509;
typedef struct _SERVER_INFO_1510 *PSERVER_INFO_1510;
typedef struct _SERVER_INFO_1511 *PSERVER_INFO_1511;
typedef struct _SERVER_INFO_1512 *PSERVER_INFO_1512;
typedef struct _SERVER_INFO_1513 *PSERVER_INFO_1513;
typedef struct _SERVER_INFO_1514 *PSERVER_INFO_1514;
typedef struct _SERVER_INFO_1515 *PSERVER_INFO_1515;
typedef struct _SERVER_INFO_1516 *PSERVER_INFO_1516;
typedef struct _SERVER_INFO_1518 *PSERVER_INFO_1518;
typedef struct _SERVER_INFO_1520 *PSERVER_INFO_1520;
typedef struct _SERVER_INFO_1521 *PSERVER_INFO_1521;
typedef struct _SERVER_INFO_1522 *PSERVER_INFO_1522;
typedef struct _SERVER_INFO_1523 *PSERVER_INFO_1523;
typedef struct _SERVER_INFO_1524 *PSERVER_INFO_1524;
typedef struct _SERVER_INFO_1525 *PSERVER_INFO_1525;
typedef struct _SERVER_INFO_1528 *PSERVER_INFO_1528;
typedef struct _SERVER_INFO_1529 *PSERVER_INFO_1529;
typedef struct _SERVER_INFO_1530 *PSERVER_INFO_1530;
typedef struct _SERVER_INFO_1533 *PSERVER_INFO_1533;
typedef struct _SERVER_INFO_1534 *PSERVER_INFO_1534;
typedef struct _SERVER_INFO_1535 *PSERVER_INFO_1535;
typedef struct _SERVER_INFO_1536 *PSERVER_INFO_1536;
typedef struct _SERVER_INFO_1537 *PSERVER_INFO_1537;
typedef struct _SERVER_INFO_1538 *PSERVER_INFO_1538;
typedef struct _SERVER_INFO_1539 *PSERVER_INFO_1539;
typedef struct _SERVER_INFO_1540 *PSERVER_INFO_1540;
typedef struct _SERVER_INFO_1541 *PSERVER_INFO_1541;
typedef struct _SERVER_INFO_1542 *PSERVER_INFO_1542;
typedef struct _SERVER_INFO_1543 *PSERVER_INFO_1543;
typedef struct _SERVER_INFO_1544 *PSERVER_INFO_1544;
typedef struct _SERVER_INFO_1545 *PSERVER_INFO_1545;
typedef struct _SERVER_INFO_1546 *PSERVER_INFO_1546;
typedef struct _SERVER_INFO_1547 *PSERVER_INFO_1547;
typedef struct _SERVER_INFO_1548 *PSERVER_INFO_1548;
typedef struct _SERVER_INFO_1549 *PSERVER_INFO_1549;
typedef struct _SERVER_INFO_1550 *PSERVER_INFO_1550;
typedef struct _SERVER_INFO_1552 *PSERVER_INFO_1552;
typedef struct _SERVER_INFO_1553 *PSERVER_INFO_1553;
typedef struct _SERVER_INFO_1554 *PSERVER_INFO_1554;
typedef struct _SERVER_INFO_1555 *PSERVER_INFO_1555;
typedef struct _SERVER_INFO_1556 *PSERVER_INFO_1556;
typedef struct _SERVER_INFO_1557 *PSERVER_INFO_1557;
typedef struct _SERVER_INFO_1560 *PSERVER_INFO_1560;
typedef struct _SERVER_INFO_1561 *PSERVER_INFO_1561;
typedef struct _SERVER_INFO_1562 *PSERVER_INFO_1562;
typedef struct _SERVER_INFO_1563 *PSERVER_INFO_1563;
typedef struct _SERVER_INFO_1564 *PSERVER_INFO_1564;
typedef struct _SERVER_INFO_1565 *PSERVER_INFO_1565;
typedef struct _SERVER_INFO_1566 *PSERVER_INFO_1566;
typedef struct _SERVER_INFO_1567 *PSERVER_INFO_1567;
typedef struct _SERVER_INFO_1568 *PSERVER_INFO_1568;
typedef struct _SERVER_INFO_1569 *PSERVER_INFO_1569;
typedef struct _SERVER_INFO_1570 *PSERVER_INFO_1570;
typedef struct _SERVER_INFO_1571 *PSERVER_INFO_1571;
typedef struct _SERVER_INFO_1572 *PSERVER_INFO_1572;
typedef struct _SERVER_INFO_1573 *PSERVER_INFO_1573;
typedef struct _SERVER_INFO_1574 *PSERVER_INFO_1574;
typedef struct _SERVER_INFO_1575 *PSERVER_INFO_1575;
typedef struct _SERVER_INFO_1576 *PSERVER_INFO_1576;
typedef struct _SERVER_INFO_1577 *PSERVER_INFO_1577;
typedef struct _SERVER_INFO_1578 *PSERVER_INFO_1578;
typedef struct _SERVER_INFO_1579 *PSERVER_INFO_1579;
typedef struct _SERVER_INFO_1580 *PSERVER_INFO_1580;
typedef struct _SERVER_INFO_1581 *PSERVER_INFO_1581;
typedef struct _SERVER_INFO_1582 *PSERVER_INFO_1582;
typedef struct _SERVER_INFO_1583 *PSERVER_INFO_1583;
typedef struct _SERVER_INFO_1584 *PSERVER_INFO_1584;
typedef struct _SERVER_INFO_1585 *PSERVER_INFO_1585;
typedef struct _SERVER_INFO_1586 *PSERVER_INFO_1586;
typedef struct _SERVER_INFO_1587 *PSERVER_INFO_1587;
typedef struct _SERVER_INFO_1588 *PSERVER_INFO_1588;
typedef struct _SERVER_INFO_1589 *PSERVER_INFO_1589;
typedef struct _SERVER_INFO_1590 *PSERVER_INFO_1590;
typedef struct _SERVER_INFO_1591 *PSERVER_INFO_1591;
typedef struct _SERVER_INFO_1592 *PSERVER_INFO_1592;
typedef struct _SERVER_INFO_1593 *PSERVER_INFO_1593;
typedef struct _SERVER_INFO_1594 *PSERVER_INFO_1594;
typedef struct _SERVER_INFO_1595 *PSERVER_INFO_1595;
typedef struct _SERVER_INFO_1596 *PSERVER_INFO_1596;
typedef struct _SESSION_INFO_502 *PSESSION_INFO_502;
typedef struct _tagSubscriptionInfo *PSUBSCRIPTIONINFO;
typedef struct _SecurityUserData *PSecurityUserData;
typedef struct _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;
typedef struct _TIME_OF_DAY_INFO *PTIME_OF_DAY_INFO;
typedef struct _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS *PTOKEN_STATISTICS;
typedef struct tagPUBLISHEDINFOLIST PUBLISHEDINFOLIST;
typedef struct _vidcapinfolist *PVIDCAP_INFO_LIST;
typedef struct _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;
typedef struct _WLX_PROFILE_V1_0 *PWLX_PROFILE_V1_0;
typedef struct _WLX_PROFILE_V2_0 *PWLX_PROFILE_V2_0;
typedef struct _WSH_LOOKUP_ZONES *PWSH_LOOKUP_ZONES;
enum PersistFormatEnum {adPersistADTG = 0x0,adPersistXML = 0x1,};
typedef struct _QOS_TRAFFIC_CLASS QOS_TRAFFIC_CLASS;
typedef struct _RASTERIZER_STATUS RASTERIZER_STATUS;
enum RAS_PARAMS_FORMAT {ParamNumber = 0x0,ParamString = 0x1,};
typedef struct _RAS_SECURITY_INFO RAS_SECURITY_INFO;
typedef struct receive_immediate RECEIVE_IMMEDIATE;
typedef struct _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
typedef struct _RSVP_RESERVE_INFO RSVP_RESERVE_INFO;
struct RecordsetEventsVt {struct RecordsetEventsVtVtbl *lpVtbl;};
typedef struct send_conversation SEND_CONVERSATION;
typedef struct _SERVICE_ADDRESSES SERVICE_ADDRESSES;
typedef struct _SERVICE_TYPE_INFO SERVICE_TYPE_INFO;
typedef struct _SExistRestriction SExistRestriction;
typedef struct _SHELLEXECUTEINFOA SHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;
typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
typedef struct SIP_DISPATCH_INFO_ SIP_DISPATCH_INFO;
typedef struct SIP_INDIRECT_DATA_ SIP_INDIRECT_DATA;
typedef struct _SP_DRVINFO_DATA_A SP_DRVINFO_DATA_A;
typedef struct _SP_DRVINFO_DATA_W SP_DRVINFO_DATA_W;
typedef struct _SP_MOVEDEV_PARAMS SP_MOVEDEV_PARAMS;
typedef struct _SPropProblemArray SPropProblemArray;
typedef struct srv_comport_queue SRV_COMPORT_QUEUE;
typedef struct _STnefProblemArray STnefProblemArray;
typedef struct _SUPPORT_FUNCTIONS SUPPORT_FUNCTIONS;
typedef struct sys_def_info_sect SYS_DEF_INFO_SECT;
struct SdpConferenceBlob;
struct ShellFolderViewOC;
typedef struct _TAPE_GET_POSITION TAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION TAPE_SET_POSITION;
typedef struct test_rts_and_post TEST_RTS_AND_POST;
enum TX_MISC_CONSTANTS {MAX_TRAN_DESC = 0x28,};
typedef struct tagUNDETERMINESTRUCT UNDETERMINESTRUCT;
typedef struct _WKSTA_USER_INFO_0 WKSTA_USER_INFO_0;
typedef struct _WKSTA_USER_INFO_1 WKSTA_USER_INFO_1;
typedef struct _WSAPROTOCOL_INFOA WSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW WSAPROTOCOL_INFOW;
typedef union _644E466E06576D194C6182F3C91B6C45 WSH_ATALK_ADDRESS;
enum XactAttributeEnum {adXactCommitRetaining = 0x20000,adXactAbortRetaining = 0x40000,adXactAsyncPhaseOne = 0x80000,adXactSyncPhaseOne = 0x100000,};
enum _AUDIT_EVENT_TYPE {AuditEventObjectAccess = 0x0,AuditEventDirectoryServiceAccess = 0x1,};
struct _Alpha_PAL_Format {unsigned int Function : 26;unsigned int Opcode : 6;};
enum _D3DANTIALIASMODE {D3DANTIALIAS_NONE = 0x0,D3DANTIALIAS_SORTDEPENDENT = 0x1,D3DANTIALIAS_SORTINDEPENDENT = 0x2,D3DANTIALIAS_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DPRIMITIVETYPE {D3DPT_POINTLIST = 0x1,D3DPT_LINELIST = 0x2,D3DPT_LINESTRIP = 0x3,D3DPT_TRIANGLELIST = 0x4,D3DPT_TRIANGLESTRIP = 0x5,D3DPT_TRIANGLEFAN = 0x6,D3DPT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DRMCOLORSOURCE {D3DRMCOLOR_FROMFACE = 0x0,D3DRMCOLOR_FROMVERTEX = 0x1,};
enum _D3DRMCOMBINETYPE {D3DRMCOMBINE_REPLACE = 0x0,D3DRMCOMBINE_BEFORE = 0x1,D3DRMCOMBINE_AFTER = 0x2,};
enum _D3DRMZBUFFERMODE {D3DRMZBUFFER_FROMPARENT = 0x0,D3DRMZBUFFER_ENABLE = 0x1,D3DRMZBUFFER_DISABLE = 0x2,};
enum _D3DTEXTUREFILTER {D3DFILTER_NEAREST = 0x1,D3DFILTER_LINEAR = 0x2,D3DFILTER_MIPNEAREST = 0x3,D3DFILTER_MIPLINEAR = 0x4,D3DFILTER_LINEARMIPNEAREST = 0x5,D3DFILTER_LINEARMIPLINEAR = 0x6,D3DFILTER_FORCE_DWORD = 0x7FFFFFFF,};
struct _RPC_SECURITY_QOS {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;};
enum _SC_RETURN_VALUES {SC_OK = 0x0,SC_Error = 0xBF69,SC_BPActive = 0xBF6A,SC_BPInactive = 0xBF6B,SC_BPShutdownPending = 0xBF6C,SC_BPSiteAddressMismatch = 0xBF6D,};
enum _WSAESETSERVICEOP {RNRSERVICE_REGISTER = 0x0,RNRSERVICE_DEREGISTER = 0x1,RNRSERVICE_DELETE = 0x2,};
struct _WSANETWORKEVENTS {int lNetworkEvents;int iErrorCode[10];};
struct adapter_info_sect {unsigned int adapter_init_sect_len;unsigned short num_adapters;unsigned short total_adapters;};
struct alt_alias_overlay {unsigned char alt_plu_alias[8];};
struct get_tp_properties {unsigned short opcode;unsigned char reserv2[2];unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned char tp_name[64];unsigned char lu_alias[8];unsigned char luw_id[26];unsigned char fqlu_name[17];unsigned char reserv3[10];unsigned char user_id[10];};
enum iurl_seturl_flags {IURL_SETURL_FL_GUESS_PROTOCOL = 0x1,IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 0x2,};
struct mc_get_attributes {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned char sync_level;unsigned char mode_name[8];unsigned char net_name[8];unsigned char lu_name[8];unsigned char lu_alias[8];unsigned char plu_alias[8];unsigned char plu_un_name[8];unsigned char reserv4[2];unsigned char fqplu_name[17];unsigned char reserv5;unsigned char user_id[10];unsigned int conv_group_id;unsigned char conv_corr_len;unsigned char conv_corr[8];unsigned char reserv6[13];};
typedef VolLockBroadcast *pVolLockBroadcast;
struct plu_def_info_sect {unsigned int plu_def_init_sect_len;unsigned short num_plu_def;unsigned short total_plu_def;};
struct receive_immediate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char fill;unsigned char rts_rcvd;unsigned char reserv4;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char reserv5[5];};
struct send_conversation {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned char reserv3[8];unsigned char rtn_ctl;unsigned char reserv4;unsigned int conv_group_id;unsigned int sense_data;unsigned char plu_alias[8];unsigned char mode_name[8];unsigned char tp_name[64];unsigned char security;unsigned char reserv5[11];unsigned char pwd[10];unsigned char user_id[10];unsigned short pip_dlen;unsigned char *pip_dptr;unsigned char reserv6;unsigned char fqplu_name[17];unsigned char reserv7[8];unsigned short dlen;unsigned char *dptr;};
struct srv_comport_queue {struct srv_comport_queue *Flink;struct srv_comport_queue *Blink;};
struct sys_def_info_sect {unsigned char default_mode_name[8];unsigned char default_local_lu_name[8];unsigned char implicit_inb_rlu_supp;unsigned char max_held_alerts;unsigned char tp_conv_sec_rqd;unsigned char reserv3;unsigned short max_mc_ll_send_size;unsigned char dir_for_attaches[64];unsigned char tp_operation;unsigned char tp_program_type;};
enum tagAspectInfoFlag {DVASPECTINFOFLAG_CANOPTIMIZE = 0x1,};
struct tagCStdStubBuffer { struct IRpcStubBufferVtbl *lpVtbl;int RefCount;struct IUnknown *pvServerObject;};
enum tagINSTALLMESSAGE {INSTALLMESSAGE_OUTOFMEMORY = 0x0,INSTALLMESSAGE_ERROR = 0x1000000,INSTALLMESSAGE_WARNING = 0x2000000,INSTALLMESSAGE_USER = 0x3000000,INSTALLMESSAGE_INFO = 0x4000000,INSTALLMESSAGE_DIAGNOSTIC = 0x5000000,INSTALLMESSAGE_COMMONDATA = 0x6000000,INSTALLMESSAGE_RESERVED = 0x7000000,INSTALLMESSAGE_ACTIONSTART = 0x8000000,INSTALLMESSAGE_ACTIONDATA = 0x9000000,INSTALLMESSAGE_PROGRESS = 0xA000000,INSTALLMESSAGE_ACTIONDONE = 0xB000000,};
enum tagINSTALLUILEVEL {INSTALLUILEVEL_NOCHANGE = 0x0,INSTALLUILEVEL_DEFAULT = 0x1,INSTALLUILEVEL_NONE = 0x2,INSTALLUILEVEL_BASIC = 0x3,INSTALLUILEVEL_REDUCED = 0x4,INSTALLUILEVEL_FULL = 0x5,};
enum tagOLEUIPASTEFLAG {OLEUIPASTE_ENABLEICON = 0x800,OLEUIPASTE_PASTEONLY = 0x0,OLEUIPASTE_PASTE = 0x200,OLEUIPASTE_LINKANYTYPE = 0x400,OLEUIPASTE_LINKTYPE1 = 0x1,OLEUIPASTE_LINKTYPE2 = 0x2,OLEUIPASTE_LINKTYPE3 = 0x4,OLEUIPASTE_LINKTYPE4 = 0x8,OLEUIPASTE_LINKTYPE5 = 0x10,OLEUIPASTE_LINKTYPE6 = 0x20,OLEUIPASTE_LINKTYPE7 = 0x40,OLEUIPASTE_LINKTYPE8 = 0x80,};
enum tagPROPPAGESTATUS {PROPPAGESTATUS_DIRTY = 0x1,PROPPAGESTATUS_VALIDATE = 0x2,PROPPAGESTATUS_CLEAN = 0x4,};
enum tagTunerInputType {TunerInputCable = 0x0,TunerInputAntenna = 0x1,};
struct test_rts_and_post {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned int handle;};
typedef struct _userHMETAFILEPICT userHMETAFILEPICT;
typedef struct _ACCESS_INFO_1002 ACCESS_INFO_1002;
typedef struct tACMFILTERCHOOSEA ACMFILTERCHOOSEA;
typedef struct tACMFILTERCHOOSEW ACMFILTERCHOOSEW;
typedef struct tACMFORMATCHOOSEA ACMFORMATCHOOSEA;
typedef struct tACMFORMATCHOOSEW ACMFORMATCHOOSEW;
typedef struct _ACTRL_OVERLAPPED ACTRL_OVERLAPPED;
typedef struct _ADDRESS_RESERVED ADDRESS_RESERVED;
typedef struct _ADMIN_OTHER_INFO ADMIN_OTHER_INFO;
typedef struct adpcmewaveformat_tag ADPCMEWAVEFORMAT;
typedef struct __MIDL___MIDL__intf_0000_0002 ADS_OCTET_STRING;
typedef unsigned char AFTP_HANDLE_TYPE[8];
typedef unsigned int AFTP_LENGTH_TYPE;
typedef struct _12065485545C98CF3EA596DDCCDF0ED5 AM_AC3_ROOM_TYPE;
typedef struct _70FE3ED39A29D5613E00A3E72F8FD4C3 ATM_QOS_CLASS_IE;
typedef struct _audcapinfolist AUDCAP_INFO_LIST;
typedef struct _avitimecodeindex AVITIMECODEINDEX;
typedef struct _Alpha_PAL_Format Alpha_PAL_Format;
typedef struct _C568E0E755FFC2BCAF75367048F0EAC6 ArrayOfSomething;
typedef struct tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;
enum BpcVidsvrProgIds {BPC_IDS_VIDSVR_PROGID = 0x834,BPC_IDS_COABPCDETAILS_PROGID = 0x835,};
enum CALL_MEDIA_CAUSE {CMC_NOTDEFINED = 0x0,};
enum CALL_MEDIA_EVENT {CME_NOTDEFINED = 0x0,};
typedef struct _CERT_KEY_CONTEXT CERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO CERT_POLICY_INFO;
enum CLUSPROP_PIFLAGS {CLUSPROP_PIFLAG_STICKY = 0x1,CLUSPROP_PIFLAG_REMOVABLE = 0x2,CLUSPROP_PIFLAG_USABLE = 0x4,};
enum CLUS_RESSUBCLASS {CLUS_RESSUBCLASS_SHARED = 0x80000000,};
typedef struct _CMSG_SIGNER_INFO CMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO CMSG_STREAM_INFO;
typedef struct _tagCOLORMATCHSETUPA COLORMATCHSETUPA;
typedef struct _tagCOLORMATCHSETUPW COLORMATCHSETUPW;
typedef struct _CRYPT_ATTRIBUTES CRYPT_ATTRIBUTES;
typedef struct _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB;
struct ClusNetInterface {struct ClusNetInterfaceVtbl *lpVtbl;};
struct ConnectionEvents {struct ConnectionEventsVtbl *lpVtbl;};
enum CursorOptionEnum {adHoldRecords = 0x100,adMovePrevious = 0x200,adAddNew = 0x1000400,adDelete = 0x1000800,adUpdate = 0x1008000,adBookmark = 0x2000,adApproxPosition = 0x4000,adUpdateBatch = 0x10000,adResync = 0x20000,adNotify = 0x40000,adFind = 0x80000,};
typedef struct _D3DTRANSFORMCAPS D3DTRANSFORMCAPS;
typedef struct _D3DTRANSFORMDATA D3DTRANSFORMDATA;
typedef struct _A89BDE8BB34616876C69A26DB46B7136 DAOCOLUMNBINDING;
enum DBBINDSTATUSENUM {DBBINDSTATUS_OK = 0x0,DBBINDSTATUS_BADORDINAL = 0x1,DBBINDSTATUS_UNSUPPORTEDCONVERSION = 0x2,DBBINDSTATUS_BADBINDINFO = 0x3,DBBINDSTATUS_BADSTORAGEFLAGS = 0x4,DBBINDSTATUS_NOINTERFACE = 0x5,DBBINDSTATUS_MULTIPLESTORAGE = 0x6,};
enum DBCOMPAREOPSENUM {DBCOMPAREOPS_LT = 0x0,DBCOMPAREOPS_LE = 0x1,DBCOMPAREOPS_EQ = 0x2,DBCOMPAREOPS_GE = 0x3,DBCOMPAREOPS_GT = 0x4,DBCOMPAREOPS_BEGINSWITH = 0x5,DBCOMPAREOPS_CONTAINS = 0x6,DBCOMPAREOPS_NE = 0x7,DBCOMPAREOPS_IGNORE = 0x8,DBCOMPAREOPS_CASESENSITIVE = 0x1000,DBCOMPAREOPS_CASEINSENSITIVE = 0x2000,};
enum DBEVENTPHASEENUM {DBEVENTPHASE_OKTODO = 0x0,DBEVENTPHASE_ABOUTTODO = 0x1,DBEVENTPHASE_SYNCHAFTER = 0x2,DBEVENTPHASE_FAILEDTODO = 0x3,DBEVENTPHASE_DIDEVENT = 0x4,};
enum DBEXECLIMITSENUM {DBEXECLIMITS_ABORT = 0x1,DBEXECLIMITS_STOP = 0x2,DBEXECLIMITS_SUSPEND = 0x3,};
enum DBPARAMFLAGSENUM {DBPARAMFLAGS_ISINPUT = 0x1,DBPARAMFLAGS_ISOUTPUT = 0x2,DBPARAMFLAGS_ISSIGNED = 0x10,DBPARAMFLAGS_ISNULLABLE = 0x40,DBPARAMFLAGS_ISLONG = 0x80,};
enum DBPROPSTATUSENUM {DBPROPSTATUS_OK = 0x0,DBPROPSTATUS_NOTSUPPORTED = 0x1,DBPROPSTATUS_BADVALUE = 0x2,DBPROPSTATUS_BADOPTION = 0x3,DBPROPSTATUS_BADCOLUMN = 0x4,DBPROPSTATUS_NOTALLSETTABLE = 0x5,DBPROPSTATUS_NOTSETTABLE = 0x6,DBPROPSTATUS_NOTSET = 0x7,DBPROPSTATUS_CONFLICTING = 0x8,};
typedef struct tagDBROWWATCHRANGE DBROWWATCHCHANGE;
enum DBSOURCETYPEENUM {DBSOURCETYPE_DATASOURCE = 0x1,DBSOURCETYPE_ENUMERATOR = 0x2,};
typedef struct tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
typedef struct _DFS_STORAGE_INFO DFS_STORAGE_INFO;
typedef DIDEVICEINSTANCEA DIDEVICEINSTANCE;
typedef struct _DISK_PERFORMANCE DISK_PERFORMANCE;
typedef struct _DPCOMPORTADDRESS DPCOMPORTADDRESS;
struct DataSourceObject {struct DataSourceObjectVtbl *lpVtbl;};
struct DispIHTMLBGsound {struct DispIHTMLBGsoundVtbl *lpVtbl;};
typedef struct tagEMRCREATEPALETTE EMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE EMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
typedef struct tagENUMLOGFONTEXDVA ENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW ENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE;
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef struct _EXPLICIT_ACCESS_A EXPLICIT_ACCESSA;
typedef struct _EXPLICIT_ACCESS_W EXPLICIT_ACCESSW;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 FIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER FIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER FIND_NAME_HEADER;
typedef struct GLUtesselator GLUtesselatorObj;
typedef struct gsm610waveformat_tag GSM610WAVEFORMAT;
typedef void *HCRYPTOIDFUNCSET;
typedef struct _HISTOGRAM_BUCKET HISTOGRAM_BUCKET;
typedef struct _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
typedef struct _HSE_VERSION_INFO HSE_VERSION_INFO;
struct HTMLAnchorEvents {struct HTMLAnchorEventsVtbl *lpVtbl;};
struct HTMLBlockElement;
struct HTMLDListElement;
struct HTMLFrameElement;
struct HTMLFrameSetSite;
struct HTMLLabelElement;
struct HTMLOListElement;
struct HTMLScriptEvents {struct HTMLScriptEventsVtbl *lpVtbl;};
struct HTMLStyleElement;
struct HTMLTableCaption;
struct HTMLTableSection;
struct HTMLTitleElement;
struct HTMLUListElement;
struct HTMLWindowEvents {struct HTMLWindowEventsVtbl *lpVtbl;};
typedef struct tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
struct IADsLargeInteger {struct IADsLargeIntegerVtbl *lpVtbl;};
struct IADsOpenDSObject {struct IADsOpenDSObjectVtbl *lpVtbl;};
struct IADsPropertyList {struct IADsPropertyListVtbl *lpVtbl;};
struct IAMCameraControl {struct IAMCameraControlVtbl *lpVtbl;};
struct IAMDroppedFrames {struct IAMDroppedFramesVtbl *lpVtbl;};
struct IAMNetShowConfig {struct IAMNetShowConfigVtbl *lpVtbl;};
struct IAMNetworkStatus {struct IAMNetworkStatusVtbl *lpVtbl;};
struct IAMStreamControl {struct IAMStreamControlVtbl *lpVtbl;};
struct IASQLOLEArticles {struct IASQLOLEArticlesVtbl *lpVtbl;};
struct IASQLOLEBulkCopy {struct IASQLOLEBulkCopyVtbl *lpVtbl;};
struct IASQLOLEDBObject {struct IASQLOLEDBObjectVtbl *lpVtbl;};
struct IASQLOLEDBOption {struct IASQLOLEDBOptionVtbl *lpVtbl;};
struct IASQLOLEDatabase {struct IASQLOLEDatabaseVtbl *lpVtbl;};
struct IASQLOLEDefaults {struct IASQLOLEDefaultsVtbl *lpVtbl;};
struct IASQLOLELanguage {struct IASQLOLELanguageVtbl *lpVtbl;};
struct IASQLOLENameList {struct IASQLOLENameListVtbl *lpVtbl;};
struct IASQLOLEOperator {struct IASQLOLEOperatorVtbl *lpVtbl;};
struct IASQLOLERegistry {struct IASQLOLERegistryVtbl *lpVtbl;};
struct IASQLOLETransfer {struct IASQLOLETransferVtbl *lpVtbl;};
struct IASQLOLETriggers {struct IASQLOLETriggersVtbl *lpVtbl;};
struct IAgentCtlBalloon {struct IAgentCtlBalloonVtbl *lpVtbl;};
struct IAgentCtlCommand {struct IAgentCtlCommandVtbl *lpVtbl;};
struct IAgentCtlRequest {struct IAgentCtlRequestVtbl *lpVtbl;};
struct IAgentNotifySink {struct IAgentNotifySinkVtbl *lpVtbl;};
struct IBPCEmailMessage {struct IBPCEmailMessageVtbl *lpVtbl;};
typedef struct _6283893B713888864804C588D87395BB ICCOMPRESSFRAMES;
struct IChapteredRowset {struct IChapteredRowsetVtbl *lpVtbl;};
struct ICommandValidate {struct ICommandValidateVtbl *lpVtbl;};
struct IConnectionPoint {struct IConnectionPointVtbl *lpVtbl;};
struct ICreateErrorInfo {struct ICreateErrorInfoVtbl *lpVtbl;};
struct ICreateTypeInfo2 {struct ICreateTypeInfo2Vtbl *lpVtbl;};
struct IDBCreateCommand {struct IDBCreateCommandVtbl *lpVtbl;};
struct IDBCreateSession {struct IDBCreateSessionVtbl *lpVtbl;};
struct IDBSchemaCommand {struct IDBSchemaCommandVtbl *lpVtbl;};
struct IDeferredCommand {struct IDeferredCommandVtbl *lpVtbl;};
struct IDirect3DDevice2 {struct IDirect3DDevice2Vtbl *lpVtbl;};
struct IDirect3DRMArray {struct IDirect3DRMArrayVtbl *lpVtbl;};
struct IDirect3DRMFrame {struct IDirect3DRMFrameVtbl *lpVtbl;};
struct IDirect3DRMLight {struct IDirect3DRMLightVtbl *lpVtbl;};
struct IDirect3DTexture {struct IDirect3DTextureVtbl *lpVtbl;};
struct IDirectDrawVideo {struct IDirectDrawVideoVtbl *lpVtbl;};
struct IDirectPlayLobby {struct IDirectPlayLobbyVtbl *lpVtbl;};
struct IDirectoryObject {struct IDirectoryObjectVtbl *lpVtbl;};
struct IDirectorySearch {struct IDirectorySearchVtbl *lpVtbl;};
struct IDispenserDriver {struct IDispenserDriverVtbl *lpVtbl;};
struct IDvdGraphBuilder {struct IDvdGraphBuilderVtbl *lpVtbl;};
struct IEnumAddressType {struct IEnumAddressTypeVtbl *lpVtbl;};
struct IEnumConnections {struct IEnumConnectionsVtbl *lpVtbl;};
struct IEnumRemoteField {struct IEnumRemoteFieldVtbl *lpVtbl;};
struct IEnumRemoteValue {struct IEnumRemoteValueVtbl *lpVtbl;};
struct IEnumSTATPROPSTG {struct IEnumSTATPROPSTGVtbl *lpVtbl;};
struct IExchExtCallback {struct IExchExtCallbackVtbl *lpVtbl;};
struct IExchExtCommands {struct IExchExtCommandsVtbl *lpVtbl;};
struct IExchExtModeless {struct IExchExtModelessVtbl *lpVtbl;};
struct IExchangeRuleExt {struct IExchangeRuleExtVtbl *lpVtbl;};
struct IFileSinkFilter2 {struct IFileSinkFilter2Vtbl *lpVtbl;};
struct IFullScreenVideo {struct IFullScreenVideoVtbl *lpVtbl;};
struct IHTMLAreaElement {struct IHTMLAreaElementVtbl *lpVtbl;};
struct IHTMLBaseElement {struct IHTMLBaseElementVtbl *lpVtbl;};
struct IHTMLBodyElement {struct IHTMLBodyElementVtbl *lpVtbl;};
struct IHTMLDatabinding {struct IHTMLDatabindingVtbl *lpVtbl;};
struct IHTMLDivPosition {struct IHTMLDivPositionVtbl *lpVtbl;};
struct IHTMLFontElement {struct IHTMLFontElementVtbl *lpVtbl;};
struct IHTMLFormElement {struct IHTMLFormElementVtbl *lpVtbl;};
struct IHTMLLinkElement {struct IHTMLLinkElementVtbl *lpVtbl;};
struct IHTMLListElement {struct IHTMLListElementVtbl *lpVtbl;};
struct IHTMLMetaElement {struct IHTMLMetaElementVtbl *lpVtbl;};
struct IHTMLParaElement {struct IHTMLParaElementVtbl *lpVtbl;};
struct IHTMLSpanElement {struct IHTMLSpanElementVtbl *lpVtbl;};
struct IHTMLTextElement {struct IHTMLTextElementVtbl *lpVtbl;};
struct IIndexDefinition {struct IIndexDefinitionVtbl *lpVtbl;};
struct IInputObjectSite {struct IInputObjectSiteVtbl *lpVtbl;};
struct IInternetSession {struct IInternetSessionVtbl *lpVtbl;};
typedef union _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
typedef struct _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
typedef struct _IMAGE_LINENUMBER IMAGE_LINENUMBER;
typedef struct _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
typedef struct _IMAGE_RELOCATION IMAGE_RELOCATION;
typedef struct _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
struct IMAPIFormFactory {struct IMAPIFormFactoryVtbl *lpVtbl;};
struct IMAPIMessageSite {struct IMAPIMessageSiteVtbl *lpVtbl;};
struct IMAPIViewContext {struct IMAPIViewContextVtbl *lpVtbl;};
typedef struct tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
struct IMLangStringAStr {struct IMLangStringAStrVtbl *lpVtbl;};
struct IMLangStringBufA {struct IMLangStringBufAVtbl *lpVtbl;};
struct IMLangStringBufW {struct IMLangStringBufWVtbl *lpVtbl;};
struct IMLangStringWStr {struct IMLangStringWStrVtbl *lpVtbl;};
struct IMsgServiceAdmin {struct IMsgServiceAdminVtbl *lpVtbl;};
struct IMtsMethodEvents {struct IMtsMethodEventsVtbl *lpVtbl;};
struct IMtsObjectEvents {struct IMtsObjectEventsVtbl *lpVtbl;};
struct IMtsThreadEvents {struct IMtsThreadEventsVtbl *lpVtbl;};
struct IMultipleResults {struct IMultipleResultsVtbl *lpVtbl;};
struct IOleAdviseHolder {struct IOleAdviseHolderVtbl *lpVtbl;};
struct IOleCacheControl {struct IOleCacheControlVtbl *lpVtbl;};
struct IOleDocumentSite {struct IOleDocumentSiteVtbl *lpVtbl;};
struct IOleDocumentView {struct IOleDocumentViewVtbl *lpVtbl;};
struct IOleInPlaceFrame {struct IOleInPlaceFrameVtbl *lpVtbl;};
struct IPSFactoryBuffer {struct IPSFactoryBufferVtbl *lpVtbl;};
typedef struct _IPX_ADAPTER_INFO IPX_ADAPTER_INFO;
typedef struct _IPX_ADDRESS_DATA IPX_ADDRESS_DATA;
typedef struct _IPX_SERVER_ENTRY IPX_SERVER_ENTRY;
typedef struct _IP_SPECIFIC_DATA IP_SPECIFIC_DATA;
struct IPointerInactive {struct IPointerInactiveVtbl *lpVtbl;};
struct IPropertyStorage {struct IPropertyStorageVtbl *lpVtbl;};
struct IProvideTaskPage {struct IProvideTaskPageVtbl *lpVtbl;};
struct IRPHH26XSettings {struct IRPHH26XSettingsVtbl *lpVtbl;};
struct IReferenceClock2 {struct IReferenceClock2Vtbl *lpVtbl;};
struct IRemoteDataField {struct IRemoteDataFieldVtbl *lpVtbl;};
struct IRemoteIntObject {struct IRemoteIntObjectVtbl *lpVtbl;};
struct IResourceManager {struct IResourceManagerVtbl *lpVtbl;};
struct ISQLGetDiagField {struct ISQLGetDiagFieldVtbl *lpVtbl;};
struct ISeekingPassThru {struct ISeekingPassThruVtbl *lpVtbl;};
struct IServiceProvider {struct IServiceProviderVtbl *lpVtbl;};
struct ISimpleFrameSite {struct ISimpleFrameSiteVtbl *lpVtbl;};
struct ISubscriptionMgr {struct ISubscriptionMgrVtbl *lpVtbl;};
struct ITCallMediaEvent {struct ITCallMediaEventVtbl *lpVtbl;};
struct ITCallStateEvent {struct ITCallStateEventVtbl *lpVtbl;};
struct ITConferenceBlob {struct ITConferenceBlobVtbl *lpVtbl;};
struct ITTimeCollection {struct ITTimeCollectionVtbl *lpVtbl;};
struct ITableDefinition {struct ITableDefinitionVtbl *lpVtbl;};
struct ITransactionJoin {struct ITransactionJoinVtbl *lpVtbl;};
struct IWEInvokeCommand {struct IWEInvokeCommandVtbl *lpVtbl;};
struct IWinInetHttpInfo {struct IWinInetHttpInfoVtbl *lpVtbl;};
struct InternetExplorer;
typedef struct _KEY_EVENT_RECORD KEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE KEY_TYPE_SUBTYPE;
typedef struct _01091B9DEBEBC2354EBF1594EEF6BE89 KSPIN_CINSTANCES;
typedef struct linecountryentry_tag LINECOUNTRYENTRY;
typedef struct linegeneratetone_tag LINEGENERATETONE;
typedef struct lineproviderlist_tag LINEPROVIDERLIST;
typedef struct lineproxyrequest_tag LINEPROXYREQUEST;
typedef struct linereqmakecallW_tag LINEREQMAKECALLW;
typedef struct linereqmediacall_tag LINEREQMEDIACALL;
typedef struct link_def_overlay LINK_DEF_OVERLAY;
typedef struct _A77A9FF834B5EBD4EC6B664E82547FE4 LLC_READ_COMMAND;
typedef struct _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;
typedef struct _AE_SERVICESTAT *LPAE_SERVICESTAT;
typedef struct IASQLOLEArticle *LPASQLOLEARTICLE;
typedef struct IASQLOLEColumns *LPASQLOLECOLUMNS;
typedef struct IASQLOLEDefault *LPASQLOLEDEFAULT;
typedef struct IASQLOLEDevices *LPASQLOLEDEVICES;
typedef struct IASQLOLEIndexes *LPASQLOLEINDEXES;
typedef struct IASQLOLEServers *LPASQLOLESERVERS;
typedef struct IASQLOLETrigger *LPASQLOLETRIGGER;
typedef IAuthenticate *LPAUTHENTICATION;
typedef struct _AVISTREAMINFOA *LPAVISTREAMINFOA;
typedef struct _AVISTREAMINFOW *LPAVISTREAMINFOW;
typedef struct tagBITMAPCOREINFO *LPBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *LPBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *LPBITMAPV5HEADER;
typedef ICatInformation *LPCATINFORMATION;
typedef struct tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;
typedef  DICUSTOMFORCE *LPCDICUSTOMFORCE;
typedef  DIEFFECTINFOA *LPCDIEFFECTINFOA;
typedef  DIEFFECTINFOW *LPCDIEFFECTINFOW;
typedef struct _CHARDEV_INFO_0 *LPCHARDEV_INFO_0;
typedef struct _CHARDEV_INFO_1 *LPCHARDEV_INFO_1;
typedef ICommDlgBrowser *LPCOMMDLGBROWSER;
typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct _D3DEXECUTEDATA *LPD3DEXECUTEDATA;
typedef struct _D3DINSTRUCTION *LPD3DINSTRUCTION;
typedef struct _D3DRMPICKDESC2 *LPD3DRMPICKDESC2;
typedef struct _D3DTEXTURELOAD *LPD3DTEXTURELOAD;
typedef struct _DDCOLORCONTROL *LPDDCOLORCONTROL;
typedef struct IDirect3DDevice *LPDIRECT3DDEVICE;
typedef struct IDirect3DRMFace *LPDIRECT3DRMFACE;
typedef struct IDirect3DRMMesh *LPDIRECT3DRMMESH;
typedef struct IDirect3DRMWrap *LPDIRECT3DRMWRAP;
typedef struct _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;
typedef struct _DPLMSG_GENERIC *LPDPLMSG_GENERIC;
typedef struct _CC101A5DC835CA1BB7FB5BD237B40121 *LPDPSECURITYDESC;
typedef struct _65758D9D43B54B363A052B56EC34040F *LPDPSESSIONDESC2;
typedef struct tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *LPDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *LPDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *LPDRIVER_INFO_3W;
typedef struct tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;
typedef IFileViewerSite *LPFILEVIEWERSITE;
typedef struct _FLOWDESCRIPTOR *LPFLOWDESCRIPTOR;
typedef struct _58C398469581E4FCDD5ADAF6870FB0ED *LPFOLDERSETTINGS;
typedef struct _E7808ED52D89E2C9F1492EE2222DF379 *LPFORMPRINTSETUP;
typedef struct tag_IDFCHANNELINFO *LPIDFCHANNELINFO;
typedef struct tag_IDFPATCHMAPHDR *LPIDFPATCHMAPHDR;
typedef struct _INTERFACE_INFO *LPINTERFACE_INFO;
typedef struct linecallparams_tag *LPLINECALLPARAMS;
typedef struct linecallstatus_tag *LPLINECALLSTATUS;
typedef struct linedialparams_tag *LPLINEDIALPARAMS;
typedef struct tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;
typedef struct IMAPIAdviseSink *LPMAPIADVISESINK;
typedef struct tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;
typedef struct tagMONITORINFOEXA *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW *LPMONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;
typedef struct tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;
typedef struct tagNMITEMACTIVATE *LPNMITEMACTIVATE;
typedef struct tagNMLVCUSTOMDRAW *LPNMLVCUSTOMDRAW;
typedef struct tagNMOBJECTNOTIFY *LPNMOBJECTNOTIFY;
typedef struct _NMTBCUSTOMDRAW *LPNMTBCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW *LPNMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW *LPNMTVCUSTOMDRAW;
typedef IObjectWithSite *LPOBJECTWITHSITE;
typedef IOleControlSite *LPOLECONTROLSITE;
typedef IOleInPlaceSite *LPOLEINPLACESITE;
typedef IOleUILinkInfoA *LPOLEUILINKINFOA;
typedef IOleUILinkInfoW *LPOLEUILINKINFOW;
typedef IOleUndoManager *LPOLEUNDOMANAGER;
typedef struct _OSVERSIONINFOA *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *LPOSVERSIONINFOW;
typedef IPersistHistory *LPPERSISTHISTORY;
typedef struct IPersistMessage *LPPERSISTMESSAGE;
typedef IPersistMoniker *LPPERSISTMONIKER;
typedef IPersistStorage *LPPERSISTSTORAGE;
typedef struct _PRINTER_INFO_3 *LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *LPPRINTER_INFO_6;
typedef struct _PROPSHEETPAGEA *LPPROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW *LPPROPSHEETPAGEW;
typedef struct _PROTOCOL_INFOA *LPPROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW *LPPROTOCOL_INFOW;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D *LPQOS_OBJECT_HDR;
typedef struct tagREBARBANDINFOA *LPREBARBANDINFOA;
typedef struct tagREBARBANDINFOW *LPREBARBANDINFOW;
typedef struct _REPL_INFO_1000 *LPREPL_INFO_1000;
typedef struct _REPL_INFO_1001 *LPREPL_INFO_1001;
typedef struct _REPL_INFO_1002 *LPREPL_INFO_1002;
typedef struct _REPL_INFO_1003 *LPREPL_INFO_1003;
typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _SERVICE_INFO_0 *LPSERVICE_INFO_0;
typedef struct _SERVICE_INFO_1 *LPSERVICE_INFO_1;
typedef struct _SERVICE_INFO_2 *LPSERVICE_INFO_2;
typedef struct _SERVICE_STATUS *LPSERVICE_STATUS;
typedef struct _SESSION_INFO_0 *LPSESSION_INFO_0;
typedef struct _SESSION_INFO_1 *LPSESSION_INFO_1;
typedef struct _SESSION_INFO_2 *LPSESSION_INFO_2;
typedef struct _SHARE_INFO_501 *LPSHARE_INFO_501;
typedef struct _SHARE_INFO_502 *LPSHARE_INFO_502;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 *LPSHELLFLAGSTATE;
typedef struct _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;
typedef struct _SOCKET_ADDRESS *LPSOCKET_ADDRESS;
typedef struct _SPropAttrArray *LPSPropAttrArray;
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
typedef struct tagSTRINGEXSTRUCT *LPSTRINGEXSTRUCT;
typedef struct _TT_HITTESTINFOA *LPTTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW *LPTTHITTESTINFOW;
typedef IUrlHistoryStg2 *LPURLHISTORYSTG2;
typedef IInternetZoneManager *LPURLZONEMANAGER;
typedef struct _USER_INFO_1003 *LPUSER_INFO_1003;
typedef struct _USER_INFO_1005 *LPUSER_INFO_1005;
typedef struct _USER_INFO_1006 *LPUSER_INFO_1006;
typedef struct _USER_INFO_1007 *LPUSER_INFO_1007;
typedef struct _USER_INFO_1008 *LPUSER_INFO_1008;
typedef struct _USER_INFO_1009 *LPUSER_INFO_1009;
typedef struct _USER_INFO_1010 *LPUSER_INFO_1010;
typedef struct _USER_INFO_1011 *LPUSER_INFO_1011;
typedef struct _USER_INFO_1012 *LPUSER_INFO_1012;
typedef struct _USER_INFO_1013 *LPUSER_INFO_1013;
typedef struct _USER_INFO_1014 *LPUSER_INFO_1014;
typedef struct _USER_INFO_1017 *LPUSER_INFO_1017;
typedef struct _USER_INFO_1018 *LPUSER_INFO_1018;
typedef struct _USER_INFO_1020 *LPUSER_INFO_1020;
typedef struct _USER_INFO_1023 *LPUSER_INFO_1023;
typedef struct _USER_INFO_1024 *LPUSER_INFO_1024;
typedef struct _USER_INFO_1025 *LPUSER_INFO_1025;
typedef struct _USER_INFO_1051 *LPUSER_INFO_1051;
typedef struct _USER_INFO_1052 *LPUSER_INFO_1052;
typedef struct _USER_INFO_1053 *LPUSER_INFO_1053;
typedef struct _WKSTA_INFO_100 *LPWKSTA_INFO_100;
typedef struct _WKSTA_INFO_101 *LPWKSTA_INFO_101;
typedef struct _WKSTA_INFO_102 *LPWKSTA_INFO_102;
typedef struct _WKSTA_INFO_302 *LPWKSTA_INFO_302;
typedef struct _WKSTA_INFO_402 *LPWKSTA_INFO_402;
typedef struct _WKSTA_INFO_502 *LPWKSTA_INFO_502;
typedef struct _WSPUPCALLTABLE *LPWSPUPCALLTABLE;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
typedef struct lu_0_3_info_sect LU_0_3_INFO_SECT;
typedef struct lu_def_info_sect LU_DEF_INFO_SECT;
enum MACRO_ACCESS_MAX {ACCESS_MAX_MS_V2_ACE_TYPE = 0x3,ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 0x4,ACCESS_MAX_MS_V3_ACE_TYPE = 0x4,ACCESS_MIN_MS_OBJECT_ACE_TYPE = 0x5,ACCESS_ALLOWED_OBJECT_ACE_TYPE = 0x5,ACCESS_DENIED_OBJECT_ACE_TYPE = 0x6,};
enum MACRO_ACCESS_MIN {ACCESS_MIN_MS_ACE_TYPE = 0x0,ACCESS_ALLOWED_ACE_TYPE = 0x0,ACCESS_DENIED_ACE_TYPE = 0x1,};
enum MACRO_ACE_OBJECT {ACE_OBJECT_TYPE_PRESENT = 0x1,ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2,};
enum MACRO_ACM_METRIC {ACM_METRIC_COUNT_DRIVERS = 1,ACM_METRIC_COUNT_CODECS = 2,ACM_METRIC_COUNT_CONVERTERS = 3,ACM_METRIC_COUNT_FILTERS = 4,ACM_METRIC_COUNT_DISABLED = 5,ACM_METRIC_COUNT_HARDWARE = 6,ACM_METRIC_COUNT_LOCAL_DRIVERS = 20,ACM_METRIC_COUNT_LOCAL_CODECS = 21,ACM_METRIC_COUNT_LOCAL_CONVERTERS = 22,ACM_METRIC_COUNT_LOCAL_FILTERS = 23,ACM_METRIC_COUNT_LOCAL_DISABLED = 24,ACM_METRIC_HARDWARE_WAVE_INPUT = 30,ACM_METRIC_HARDWARE_WAVE_OUTPUT = 31,ACM_METRIC_MAX_SIZE_FORMAT = 50,ACM_METRIC_MAX_SIZE_FILTER = 51,ACM_METRIC_DRIVER_SUPPORT = 100,ACM_METRIC_DRIVER_PRIORITY = 101,ACM_DRIVERENUMF_NOLOCAL = 1073741824,ACM_DRIVERENUMF_DISABLED = -2147483648,ACM_DRIVERADDF_FUNCTION = 3,ACM_DRIVERADDF_NOTIFYHWND = 4,ACM_DRIVERADDF_TYPEMASK = 7,ACM_DRIVERADDF_LOCAL = 0,ACM_DRIVERADDF_GLOBAL = 8,};
enum MACRO_APPRELEASE {APPRELEASE = 0,};
enum MACRO_APPVERSION {APPVERSION = 4,};
enum MACRO_AVIIF_LIST {AVIIF_LIST = 0x1,AVIIF_KEYFRAME = 0x10,AVIIF_NOTIME = 0x100,AVIIF_COMPUSE = 0xFFF0000,};
enum MACRO_BACKGROUND {BACKGROUND_BLUE = 0x10,BACKGROUND_GREEN = 0x20,BACKGROUND_RED = 0x40,BACKGROUND_INTENSITY = 0x80,};
enum MACRO_BCPMAXERRS {BCPMAXERRS = 1,BCPFIRST = 2,};
enum MACRO_BINARYBIND {BINARYBIND = 5,};
enum MACRO_BIND_TABLE {BIND_TABLE_INDEX_PRT = 1,BIND_TABLE_INDEX_CRT = 2,};
enum MACRO_BUFFERSIZE {BUFFERSIZE = 32768,};
enum MACRO_CCHCCCLASS {CCHCCCLASS = 32,};
enum MACRO_CC_RGBINIT {CC_RGBINIT = 0x1,CC_FULLOPEN = 0x2,CC_PREVENTFULLOPEN = 0x4,CC_SHOWHELP = 0x8,CC_ENABLEHOOK = 0x10,CC_ENABLETEMPLATE = 0x20,CC_ENABLETEMPLATEHANDLE = 0x40,CC_SOLIDCOLOR = 0x80,CC_ANYCOLOR = 0x100,};
enum MACRO_CEDINNOMSG {CEDINNOMSG = 0,CEDINMSG = 1,CEDINLLN = 2,};
enum MACRO_CFG_ALWAYS {CFG_ALWAYS = 0,CFG_ASK_FIRST = 1,CFG_ASK_EVERY = 2,};
enum MACRO_CFG_SS_SUN {CFG_SS_SUN = 0x1,CFG_SS_MON = 0x2,CFG_SS_TUE = 0x4,CFG_SS_WED = 0x8,CFG_SS_THU = 0x10,CFG_SS_FRI = 0x20,CFG_SS_SAT = 0x40,CFG_SS_EVERY = 0x0,CFG_SS_WEEKLY = 0x1,CFG_SS_ONCE = 0x2,CFG_SS_NULLTYPE = 0x3,};
enum MACRO_CHAR_ASCII {CHAR_ASCII = 6,CHAR_EBCDID = 7,};
enum MACRO_CLIENTSITE {CLIENTSITE_E_FIRST = 0x80040190,CLIENTSITE_E_LAST = 0x8004019F,CLIENTSITE_S_FIRST = 0x40190,CLIENTSITE_S_LAST = 0x4019F,};
enum MACRO_CONFIGFLAG {CONFIGFLAG_REMOVED = 0x2,CONFIGFLAG_MANUAL_INSTALL = 0x4,CONFIGFLAG_IGNORE_BOOT_LC = 0x8,CONFIGFLAG_NET_BOOT = 0x10,CONFIGFLAG_REINSTALL = 0x20,CONFIGFLAG_FAILEDINSTALL = 0x40,CONFIGFLAG_CANTSTOPACHILD = 0x80,CONFIGFLAG_OKREMOVEROM = 0x100,CONFIGFLAG_NOREMOVEEXIT = 0x200,CONFIGFLAG_FINISH_INSTALL = 0x400,CONFIGFLAG_NEEDS_FORCED_CONFIG = 0x800,};
enum MACRO_CONTINUOUS {CONTINUOUS_EPISODE = 0,};
enum MACRO_CONVENIENT {CONVENIENT_DEPTH = 0x1,};
enum MACRO_CP_WINANSI {CP_WINANSI = 1004,CP_WINUNICODE = 1200,CP_WINNEUTRAL = 1004,};
enum MACRO_CREATE_FOR {CREATE_FOR_IMPORT = 1,CREATE_FOR_DIR = 2,};
enum MACRO_CREATE_NEW {CREATE_NEW_CONSOLE = 0x10,};
enum MACRO_CRL_REASON {CRL_REASON_UNSPECIFIED = 0,CRL_REASON_KEY_COMPROMISE = 1,CRL_REASON_CA_COMPROMISE = 2,CRL_REASON_AFFILIATION_CHANGED = 3,CRL_REASON_SUPERSEDED = 4,CRL_REASON_CESSATION_OF_OPERATION = 5,CRL_REASON_CERTIFICATE_HOLD = 6,CRL_REASON_REMOVE_FROM_CRL = 8,CRL_DIST_POINT_NO_NAME = 0,CRL_DIST_POINT_FULL_NAME = 1,CRL_DIST_POINT_ISSUER_RDN_NAME = 2,CRL_REASON_UNUSED_FLAG = 128,CRL_REASON_KEY_COMPROMISE_FLAG = 64,CRL_REASON_CA_COMPROMISE_FLAG = 32,CRL_REASON_AFFILIATION_CHANGED_FLAG = 16,CRL_REASON_SUPERSEDED_FLAG = 8,CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4,CRL_REASON_CERTIFICATE_HOLD_FLAG = 2,CRL_DIST_POINT_ERR_INDEX_MASK = 127,CRL_DIST_POINT_ERR_INDEX_SHIFT = 24,CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648,};
enum MACRO_CRYPT_MODE {CRYPT_MODE_CBC = 1,CRYPT_MODE_ECB = 2,CRYPT_MODE_OFB = 3,CRYPT_MODE_CFB = 4,CRYPT_MODE_CTS = 5,CRYPT_ENCRYPT = 1,CRYPT_DECRYPT = 2,CRYPT_EXPORT = 4,CRYPT_READ = 8,CRYPT_WRITE = 16,CRYPT_MAC = 32,CRYPT_EXPORT_KEY = 64,CRYPT_IMPORT_KEY = 128,};
enum MACRO_CS_VREDRAW {CS_VREDRAW = 0x1,CS_HREDRAW = 0x2,CS_DBLCLKS = 0x8,CS_OWNDC = 0x20,CS_CLASSDC = 0x40,CS_PARENTDC = 0x80,CS_NOCLOSE = 0x200,CS_SAVEBITS = 0x800,CS_BYTEALIGNCLIENT = 0x1000,CS_BYTEALIGNWINDOW = 0x2000,CS_GLOBALCLASS = 0x4000,CS_IME = 0x10000,};
enum MACRO_CW_DEFAULT {CW_DEFAULT = 589855,};
enum MACRO_D3DDEBCAPS {D3DDEBCAPS_SYSTEMMEMORY = 0x1,D3DDEBCAPS_VIDEOMEMORY = 0x2,D3DDEBCAPS_MEM = 0x3,};
enum MACRO_D3DDEVCAPS {D3DDEVCAPS_FLOATTLVERTEX = 0x1,D3DDEVCAPS_SORTINCREASINGZ = 0x2,D3DDEVCAPS_SORTDECREASINGZ = 0x4,D3DDEVCAPS_SORTEXACT = 0x8,D3DDEVCAPS_EXECUTESYSTEMMEMORY = 0x10,D3DDEVCAPS_EXECUTEVIDEOMEMORY = 0x20,D3DDEVCAPS_TLVERTEXSYSTEMMEMORY = 0x40,D3DDEVCAPS_TLVERTEXVIDEOMEMORY = 0x80,D3DDEVCAPS_TEXTURESYSTEMMEMORY = 0x100,D3DDEVCAPS_TEXTUREVIDEOMEMORY = 0x200,D3DDEVCAPS_DRAWPRIMTLVERTEX = 0x400,D3DDEVCAPS_CANRENDERAFTERFLIP = 0x800,D3DDEVCAPS_TEXTURENONLOCALVIDMEM = 0x1000,};
enum MACRO_D3DENUMRET {D3DENUMRET_CANCEL = 0,D3DENUMRET_OK = 1,};
enum MACRO_D3DEXECUTE {D3DEXECUTE_CLIPPED = 0x1,D3DEXECUTE_UNCLIPPED = 0x2,};
enum MACRO_D3DTRIFLAG {D3DTRIFLAG_START = 0x0,D3DTRIFLAG_ODD = 0x1E,D3DTRIFLAG_EVEN = 0x1F,D3DTRIFLAG_EDGEENABLE1 = 0x100,D3DTRIFLAG_EDGEENABLE2 = 0x200,D3DTRIFLAG_EDGEENABLE3 = 0x400,D3DTRIFLAG_EDGEENABLETRIANGLE = 0x700,};
enum MACRO_DAOBINDING {DAOBINDING_DIRECT = 0x1,DAOBINDING_VARIANT = 0x2,DAOBINDING_CALLBACK = 0x4,};
enum MACRO_DAPI_E_ANR {DAPI_E_ANR_MULTIPLE_MATCH = 0xC0001000,DAPI_E_ANR_NO_MATCH = 0xC0001001,DAPI_E_MULTIPLE_MATCH_ON_ATT = 0xC0001002,DAPI_E_NO_MATCH_ON_ATT = 0xC0001003,};
enum MACRO_DBPROGNLEN {DBPROGNLEN = 10,};
enum MACRO_DBSHOWPLAN {DBSHOWPLAN = 12,};
enum MACRO_DBTEXTSIZE {DBTEXTSIZE = 5,};
enum MACRO_DDCKEYCAPS {DDCKEYCAPS_DESTBLT = 0x1,DDCKEYCAPS_DESTBLTCLRSPACE = 0x2,DDCKEYCAPS_DESTBLTCLRSPACEYUV = 0x4,DDCKEYCAPS_DESTBLTYUV = 0x8,DDCKEYCAPS_DESTOVERLAY = 0x10,DDCKEYCAPS_DESTOVERLAYCLRSPACE = 0x20,DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 0x40,DDCKEYCAPS_DESTOVERLAYONEACTIVE = 0x80,DDCKEYCAPS_DESTOVERLAYYUV = 0x100,DDCKEYCAPS_SRCBLT = 0x200,DDCKEYCAPS_SRCBLTCLRSPACE = 0x400,DDCKEYCAPS_SRCBLTCLRSPACEYUV = 0x800,DDCKEYCAPS_SRCBLTYUV = 0x1000,DDCKEYCAPS_SRCOVERLAY = 0x2000,DDCKEYCAPS_SRCOVERLAYCLRSPACE = 0x4000,DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 0x8000,DDCKEYCAPS_SRCOVERLAYONEACTIVE = 0x10000,DDCKEYCAPS_SRCOVERLAYYUV = 0x20000,DDCKEYCAPS_NOCOSTOVERLAY = 0x40000,};
enum MACRO_DDVPCREATE {DDVPCREATE_VBIONLY = 0x1,DDVPCREATE_VIDEOONLY = 0x2,};
enum MACRO_DDVPFORMAT {DDVPFORMAT_VIDEO = 0x1,DDVPFORMAT_VBI = 0x2,};
enum MACRO_DDVPSTATUS {DDVPSTATUS_VBIONLY = 0x1,DDVPSTATUS_VIDEOONLY = 0x2,};
enum MACRO_DDVPTARGET {DDVPTARGET_VIDEO = 0x1,DDVPTARGET_VBI = 0x2,};
enum MACRO_DEBUG_HEAP {DEBUG_HEAP_CHECK = 0,DEBUG_DUMP_HEAP = 0,};
enum MACRO_DEVICEDATA {DEVICEDATA = 19,};
enum MACRO_DIALOPTION {DIALOPTION_BILLING = 0x40,DIALOPTION_QUIET = 0x80,DIALOPTION_DIALTONE = 0x100,};
enum MACRO_DIFFERENCE {DIFFERENCE = 11,};
enum MACRO_DIRECTDRAW {DIRECTDRAW_VERSION = 0x500,};
enum MACRO_DISPID_ACC {DISPID_ACC_PARENT = -5000,DISPID_ACC_CHILDCOUNT = -5001,DISPID_ACC_CHILD = -5002,DISPID_ACC_NAME = -5003,DISPID_ACC_VALUE = -5004,DISPID_ACC_DESCRIPTION = -5005,DISPID_ACC_ROLE = -5006,DISPID_ACC_STATE = -5007,DISPID_ACC_HELP = -5008,DISPID_ACC_HELPTOPIC = -5009,DISPID_ACC_KEYBOARDSHORTCUT = -5010,DISPID_ACC_FOCUS = -5011,DISPID_ACC_SELECTION = -5012,DISPID_ACC_DEFAULTACTION = -5013,DISPID_ACC_SELECT = -5014,DISPID_ACC_LOCATION = -5015,DISPID_ACC_NAVIGATE = -5016,DISPID_ACC_HITTEST = -5017,DISPID_ACC_DODEFAULTACTION = -5018,};
enum MACRO_DISPLAYDIB {DISPLAYDIB_NOERROR = 0x0,DISPLAYDIB_NOTSUPPORTED = 0x1,DISPLAYDIB_INVALIDDIB = 0x2,DISPLAYDIB_INVALIDFORMAT = 0x3,DISPLAYDIB_INVALIDTASK = 0x4,DISPLAYDIB_STOP = 0x5,DISPLAYDIB_NOTACTIVE = 0x6,DISPLAYDIB_BADSIZE = 0x7,DISPLAYDIB_NOPALETTE = 0x10,DISPLAYDIB_NOCENTER = 0x20,DISPLAYDIB_NOWAIT = 0x40,DISPLAYDIB_NOIMAGE = 0x80,DISPLAYDIB_ZOOM2 = 0x100,DISPLAYDIB_DONTLOCKTASK = 0x200,DISPLAYDIB_TEST = 0x400,DISPLAYDIB_NOFLIP = 0x800,DISPLAYDIB_BEGIN = 0x8000,DISPLAYDIB_END = 0x4000,DISPLAYDIB_MODE = 0xF,DISPLAYDIB_MODE_DEFAULT = 0x0,DISPLAYDIB_MODE_320x200x8 = 0x1,DISPLAYDIB_MODE_320x240x8 = 0x5,};
enum MACRO_DI_CHANNEL {DI_CHANNEL = 1,DI_READ_SPOOL_JOB = 3,};
enum MACRO_DI_DEGREES {DI_DEGREES = 100,DI_FFNOMINALMAX = 10000,DI_SECONDS = 1000000,};
enum MACRO_DI_SHOWOEM {DI_SHOWOEM = 0x1,DI_SHOWCOMPAT = 0x2,DI_SHOWCLASS = 0x4,DI_SHOWALL = 0x7,DI_NOVCP = 0x8,DI_DIDCOMPAT = 0x10,DI_DIDCLASS = 0x20,DI_AUTOASSIGNRES = 0x40,DI_NEEDRESTART = 0x80,DI_NEEDREBOOT = 0x100,DI_NOBROWSE = 0x200,DI_MULTMFGS = 0x400,DI_DISABLED = 0x800,DI_GENERALPAGE_ADDED = 0x1000,DI_RESOURCEPAGE_ADDED = 0x2000,DI_PROPERTIES_CHANGE = 0x4000,DI_INF_IS_SORTED = 0x8000,DI_ENUMSINGLEINF = 0x10000,DI_DONOTCALLCONFIGMG = 0x20000,DI_INSTALLDISABLED = 0x40000,DI_COMPAT_FROM_CLASS = 0x80000,DI_CLASSINSTALLPARAMS = 0x100000,DI_NODI_DEFAULTACTION = 0x200000,DI_QUIETINSTALL = 0x800000,DI_NOFILECOPY = 0x1000000,DI_FORCECOPY = 0x2000000,DI_DRIVERPAGE_ADDED = 0x4000000,DI_USECI_SELECTSTRINGS = 0x8000000,DI_OVERRIDE_INFFLAGS = 0x10000000,DI_PROPS_NOCHANGEUSAGE = 0x20000000,DI_NOSELECTICONS = 0x40000000,DI_NOWRITE_IDS = 0x80000000,DI_FLAGSEX_USEOLDINFSEARCH = 0x1,DI_FLAGSEX_AUTOSELECTRANK0 = 0x2,DI_FLAGSEX_CI_FAILED = 0x4,DI_FLAGSEX_DIDINFOLIST = 0x10,DI_FLAGSEX_DIDCOMPATINFO = 0x20,DI_FLAGSEX_FILTERCLASSES = 0x40,DI_FLAGSEX_SETFAILEDINSTALL = 0x80,DI_FLAGSEX_DEVICECHANGE = 0x100,DI_FLAGSEX_ALWAYSWRITEIDS = 0x200,DI_FLAGSEX_ALLOWEXCLUDEDDRVS = 0x800,DI_FLAGSEX_NOUIONQUERYREMOVE = 0x1000,DI_FLAGSEX_USECLASSFORCOMPAT = 0x2000,DI_FLAGSEX_OLDINF_IN_CLASSLIST = 0x4000,DI_FLAGSEX_NO_DRVREG_MODIFY = 0x8000,DI_FLAGSEX_IN_SYSTEM_SETUP = 0x10000,DI_FLAGSEX_INET_DRIVER = 0x20000,DI_FLAGSEX_APPENDDRIVERLIST = 0x40000,};
enum MACRO_DN_MAXADDL {DN_MAXADDL = 20,DN_ADDL = 2,DN_MAXOPTL = 16,DN_MAXOBJL = 16,DN_MAXACCL = 39,DN_MAXALIASL = 128,DN_MAXNODEL = 7,};
enum MACRO_DPD_HDCPEN {DPD_HDCPEN = 0x1,DPD_DRAWSEL = 0x2,};
enum MACRO_DROPEFFECT {DROPEFFECT_NONE = 0,DROPEFFECT_COPY = 1,DROPEFFECT_MOVE = 2,DROPEFFECT_LINK = 4,DROPEFFECT_SCROLL = -2147483648,};
enum MACRO_DRV_CANCEL {DRV_CANCEL = 0,DRV_OK = 1,DRV_RESTART = 2,DRV_MCI_FIRST = 2048,DRV_MCI_LAST = 6143,};
enum MACRO_DRV_MAPPER {DRV_MAPPER_PREFERRED_INPUT_GET = 16384,DRV_MAPPER_PREFERRED_OUTPUT_GET = 16386,};
enum MACRO_DSCBSTATUS {DSCBSTATUS_CAPTURING = 0x1,DSCBSTATUS_LOOPING = 0x2,};
enum MACRO_DS_PROBLEM {DS_PROBLEM_ADMIN_LIMIT_EXCEEDED = 0x4000F201,DS_PROBLEM_AFFECTS_MULTIPLE_DSAS = 0x4000F202,DS_PROBLEM_ALIAS_DEREFERENCING_PROBLEM = 0x4000F203,DS_PROBLEM_ALIAS_PROBLEM = 0x4000F204,DS_PROBLEM_ATTRIBUTE_OR_VALUE_EXISTS = 0x4000F205,DS_PROBLEM_BAD_ARGUMENT = 0x4000F206,DS_PROBLEM_BAD_CLASS = 0x4000F207,DS_PROBLEM_BAD_CONTEXT = 0x4000F208,DS_PROBLEM_BAD_NAME = 0x4000F209,DS_PROBLEM_BAD_SESSION = 0x4000F20A,DS_PROBLEM_BAD_WORKSPACE = 0x4000F20B,DS_PROBLEM_BUSY = 0x4000F20C,DS_PROBLEM_CANNOT_ABANDON = 0x4000F20D,DS_PROBLEM_CHAINING_REQUIRED = 0x4000F20E,DS_PROBLEM_COMMUNICATIONS_PROBLEM = 0x4000F20F,DS_PROBLEM_CONSTRAINT_VIOLATION = 0x4000F210,DS_PROBLEM_DIT_ERROR = 0x4000F211,DS_PROBLEM_ENTRY_EXISTS = 0x4000F212,DS_PROBLEM_INAPPROP_AUTHENTICATION = 0x4000F213,DS_PROBLEM_INAPPROP_MATCHING = 0x4000F214,DS_PROBLEM_INSUFFICIENT_ACCESS_RIGHTS = 0x4000F215,DS_PROBLEM_INVALID_ATTRIBUTE_SYNTAX = 0x4000F216,DS_PROBLEM_INVALID_ATTRIBUTE_VALUE = 0x4000F217,DS_PROBLEM_INVALID_CREDENTIALS = 0x4000F218,DS_PROBLEM_INVALID_REF = 0x4000F219,DS_PROBLEM_INVALID_SIGNATURE = 0x4000F21A,DS_PROBLEM_LOOP_DETECTED = 0x4000F21B,DS_PROBLEM_MISCELLANEOUS = 0x4000F21C,DS_PROBLEM_MISSING_TYPE = 0x4000F21D,DS_PROBLEM_MIXED_SYNCHRONOUS = 0x4000F21E,DS_PROBLEM_NAMING_VIOLATION = 0x4000F21F,DS_PROBLEM_NO_INFORMATION = 0x4000F220,DS_PROBLEM_NO_SUCH_ATTRIBUTE_OR_VALUE = 0x4000F221,DS_PROBLEM_NO_SUCH_OBJECT = 0x4000F222,DS_PROBLEM_NO_SUCH_OPERATION = 0x4000F223,DS_PROBLEM_NOT_ALLOWED_ON_NON_LEAF = 0x4000F224,DS_PROBLEM_NOT_ALLOWED_ON_RDN = 0x4000F225,DS_PROBLEM_NOT_SUPPORTED = 0x4000F226,DS_PROBLEM_OBJECT_CLASS_MOD_PROHIB = 0x4000F227,DS_PROBLEM_OBJECT_CLASS_VIOLATION = 0x4000F228,DS_PROBLEM_OUT_OF_SCOPE = 0x4000F229,DS_PROBLEM_PROTECTION_REQUIRED = 0x4000F22A,DS_PROBLEM_TIME_LIMIT_EXCEEDED = 0x4000F22B,DS_PROBLEM_TOO_LATE = 0x4000F22C,DS_PROBLEM_TOO_MANY_OPERATIONS = 0x4000F22D,DS_PROBLEM_TOO_MANY_SESSIONS = 0x4000F22E,DS_PROBLEM_UNABLE_TO_PROCEED = 0x4000F22F,DS_PROBLEM_UNAVAILABLE = 0x4000F230,DS_PROBLEM_UNAVAILABLE_CRIT_EXT = 0x4000F231,DS_PROBLEM_UNDEFINED_ATTRIBUTE_TYPE = 0x4000F232,DS_PROBLEM_UNWILLING_TO_PERFORM = 0x4000F233,DS_PROBLEM_NOT_ON_CURRENT_SITE = 0x4000F234,DS_FULL_DRIVE = 0x4000F235,DS_OUT_OF_MEMORY = 0x4000F236,DS_SYSTEM_ERROR = 0x4000F237,};
enum MACRO_DTRESULTOK {DTRESULTOK = 0,DTRESULTFIX = 1,DTRESULTPROB = 2,};
enum MACRO_EC_DVDBASE {EC_DVDBASE = 0x100,EC_DVD_DOMAIN_CHANGE = 0x101,EC_DVD_TITLE_CHANGE = 0x102,EC_DVD_CHAPTER_START = 0x103,EC_DVD_AUDIO_STREAM_CHANGE = 0x104,EC_DVD_SUBPICTURE_STREAM_CHANGE = 0x105,EC_DVD_ANGLE_CHANGE = 0x106,EC_DVD_BUTTON_CHANGE = 0x107,EC_DVD_VALID_UOPS_CHANGE = 0x108,EC_DVD_STILL_ON = 0x109,EC_DVD_STILL_OFF = 0x10A,EC_DVD_CURRENT_TIME = 0x10B,EC_DVD_ERROR = 0x10C,EC_DVD_WARNING = 0x10D,EC_DVD_CHAPTER_AUTOSTOP = 0x10E,EC_DVD_NO_FP_PGC = 0x10F,};
enum MACRO_ENABLE_OLD {ENABLE_OLD_PASSWORD_PROPAGATION = 1,};
enum MACRO_ENCRYPTION {ENCRYPTION_FORMAT_DEFAULT = 0x1,};
enum MACRO_ERROR_AUTH {ERROR_AUTH_INTERNAL = 645,ERROR_RESTRICTED_LOGON_HOURS = 646,ERROR_ACCT_DISABLED = 647,ERROR_PASSWD_EXPIRED = 648,ERROR_NO_DIALIN_PERMISSION = 649,ERROR_SERVER_NOT_RESPONDING = 650,ERROR_FROM_DEVICE = 651,ERROR_UNRECOGNIZED_RESPONSE = 652,ERROR_MACRO_NOT_FOUND = 653,ERROR_MACRO_NOT_DEFINED = 654,ERROR_MESSAGE_MACRO_NOT_FOUND = 655,ERROR_DEFAULTOFF_MACRO_NOT_FOUND = 656,ERROR_FILE_COULD_NOT_BE_OPENED = 657,ERROR_DEVICENAME_TOO_LONG = 658,ERROR_DEVICENAME_NOT_FOUND = 659,ERROR_NO_RESPONSES = 660,ERROR_NO_COMMAND_FOUND = 661,ERROR_WRONG_KEY_SPECIFIED = 662,ERROR_UNKNOWN_DEVICE_TYPE = 663,ERROR_ALLOCATING_MEMORY = 664,ERROR_PORT_NOT_CONFIGURED = 665,ERROR_DEVICE_NOT_READY = 666,ERROR_READING_INI_FILE = 667,ERROR_NO_CONNECTION = 668,ERROR_BAD_USAGE_IN_INI_FILE = 669,ERROR_READING_SECTIONNAME = 670,ERROR_READING_DEVICETYPE = 671,ERROR_READING_DEVICENAME = 672,ERROR_READING_USAGE = 673,ERROR_READING_MAXCONNECTBPS = 674,ERROR_READING_MAXCARRIERBPS = 675,ERROR_LINE_BUSY = 676,ERROR_VOICE_ANSWER = 677,ERROR_NO_ANSWER = 678,ERROR_NO_CARRIER = 679,ERROR_NO_DIALTONE = 680,ERROR_IN_COMMAND = 681,ERROR_WRITING_SECTIONNAME = 682,ERROR_WRITING_DEVICETYPE = 683,ERROR_WRITING_DEVICENAME = 684,ERROR_WRITING_MAXCONNECTBPS = 685,ERROR_WRITING_MAXCARRIERBPS = 686,ERROR_WRITING_USAGE = 687,ERROR_WRITING_DEFAULTOFF = 688,ERROR_READING_DEFAULTOFF = 689,ERROR_EMPTY_INI_FILE = 690,ERROR_AUTHENTICATION_FAILURE = 691,ERROR_PORT_OR_DEVICE = 692,ERROR_NOT_BINARY_MACRO = 693,ERROR_DCB_NOT_FOUND = 694,ERROR_STATE_MACHINES_NOT_STARTED = 695,ERROR_STATE_MACHINES_ALREADY_STARTED = 696,ERROR_PARTIAL_RESPONSE_LOOPING = 697,ERROR_UNKNOWN_RESPONSE_KEY = 698,ERROR_RECV_BUF_FULL = 699,ERROR_CMD_TOO_LONG = 700,ERROR_UNSUPPORTED_BPS = 701,ERROR_UNEXPECTED_RESPONSE = 702,ERROR_INTERACTIVE_MODE = 703,ERROR_BAD_CALLBACK_NUMBER = 704,ERROR_INVALID_AUTH_STATE = 705,ERROR_WRITING_INITBPS = 706,ERROR_X25_DIAGNOSTIC = 707,ERROR_ACCT_EXPIRED = 708,ERROR_CHANGING_PASSWORD = 709,ERROR_OVERRUN = 710,ERROR_RASMAN_CANNOT_INITIALIZE = 711,ERROR_BIPLEX_PORT_NOT_AVAILABLE = 712,ERROR_NO_ACTIVE_ISDN_LINES = 713,ERROR_NO_ISDN_CHANNELS_AVAILABLE = 714,ERROR_TOO_MANY_LINE_ERRORS = 715,ERROR_IP_CONFIGURATION = 716,ERROR_NO_IP_ADDRESSES = 717,ERROR_PPP_TIMEOUT = 718,ERROR_PPP_REMOTE_TERMINATED = 719,ERROR_PPP_NO_PROTOCOLS_CONFIGURED = 720,ERROR_PPP_NO_RESPONSE = 721,ERROR_PPP_INVALID_PACKET = 722,ERROR_PHONE_NUMBER_TOO_LONG = 723,ERROR_IPXCP_NO_DIALOUT_CONFIGURED = 724,ERROR_IPXCP_NO_DIALIN_CONFIGURED = 725,ERROR_IPXCP_DIALOUT_ALREADY_ACTIVE = 726,ERROR_ACCESSING_TCPCFGDLL = 727,ERROR_NO_IP_RAS_ADAPTER = 728,ERROR_SLIP_REQUIRES_IP = 729,ERROR_PROJECTION_NOT_COMPLETE = 730,ERROR_PROTOCOL_NOT_CONFIGURED = 731,ERROR_PPP_NOT_CONVERGING = 732,ERROR_PPP_CP_REJECTED = 733,ERROR_PPP_LCP_TERMINATED = 734,ERROR_PPP_REQUIRED_ADDRESS_REJECTED = 735,ERROR_PPP_NCP_TERMINATED = 736,ERROR_PPP_LOOPBACK_DETECTED = 737,ERROR_PPP_NO_ADDRESS_ASSIGNED = 738,ERROR_CANNOT_USE_LOGON_CREDENTIALS = 739,ERROR_TAPI_CONFIGURATION = 740,ERROR_NO_LOCAL_ENCRYPTION = 741,ERROR_NO_REMOTE_ENCRYPTION = 742,ERROR_REMOTE_REQUIRES_ENCRYPTION = 743,ERROR_IPXCP_NET_NUMBER_CONFLICT = 744,ERROR_INVALID_SMM = 745,ERROR_SMM_UNINITIALIZED = 746,ERROR_NO_MAC_FOR_PORT = 747,ERROR_SMM_TIMEOUT = 748,ERROR_BAD_PHONE_NUMBER = 749,ERROR_WRONG_MODULE = 750,ERROR_INVALID_CALLBACK_NUMBER = 751,ERROR_SCRIPT_SYNTAX = 752,ERROR_HANGUP_FAILED = 753,};
enum MACRO_ERROR_MORE {ERROR_MORE_MESSAGES = 234,ERROR_CLIENT_ALREADY_EXISTS = 183,ERROR_NO_MESSAGES = 259,ERROR_NO_MORE_ROUTES = 259,ERROR_NO_ROUTES = 259,ERROR_NO_SUCH_ROUTE = 259,};
enum MACRO_ES_SAVESEL {ES_SAVESEL = 0x8000,ES_SUNKEN = 0x4000,ES_DISABLENOSCROLL = 0x2000,ES_SELECTIONBAR = 0x1000000,ES_NOOLEDRAGDROP = 0x8,ES_EX_NOCALLOLEINIT = 0x1000000,ES_VERTICAL = 0x400000,ES_NOIME = 0x80000,ES_SELFIME = 0x40000,};
enum MACRO_EXNONFATAL {EXNONFATAL = 3,EXCONVERSION = 4,};
enum MACRO_FILESYSTEM {FILESYSTEM_STATISTICS_TYPE_NTFS = 1,FILESYSTEM_STATISTICS_TYPE_FAT = 2,};
enum MACRO_FILE_BEGIN {FILE_BEGIN = 0,FILE_CURRENT = 1,FILE_END = 2,};
enum MACRO_FINDDLGORD {FINDDLGORD = 1540,};
enum MACRO_FLI_GLYPHS {FLI_GLYPHS = 0x40000,};
enum MACRO_FOLDER_IPM {FOLDER_IPM_SUBTREE_VALID = 0x1,FOLDER_IPM_INBOX_VALID = 0x2,FOLDER_IPM_OUTBOX_VALID = 0x4,FOLDER_IPM_WASTEBASKET_VALID = 0x8,FOLDER_IPM_SENTMAIL_VALID = 0x10,FOLDER_VIEWS_VALID = 0x20,FOLDER_COMMON_VIEWS_VALID = 0x40,FOLDER_FINDER_VALID = 0x80,};
enum MACRO_FONTDLGORD {FONTDLGORD = 1542,};
enum MACRO_FONTMAPPER {FONTMAPPER_MAX = 10,};
enum MACRO_FOREGROUND {FOREGROUND_BLUE = 0x1,FOREGROUND_GREEN = 0x2,FOREGROUND_RED = 0x4,FOREGROUND_INTENSITY = 0x8,};
enum MACRO_FP_COMPARE {FP_COMPARE_TRUE = 0x4000000000000000,FP_COMPARE_FALSE = 0x0,};
enum MACRO_GDICOMMENT {GDICOMMENT_IDENTIFIER = 0x43494447,GDICOMMENT_WINDOWS_METAFILE = 0x80000001,GDICOMMENT_BEGINGROUP = 0x2,GDICOMMENT_ENDGROUP = 0x3,GDICOMMENT_MULTIFORMATS = 0x40000004,};
enum MACRO_GL_VERSION {GL_VERSION_1_1 = 1,GL_ACCUM = 256,GL_LOAD = 257,GL_RETURN = 258,GL_MULT = 259,GL_ADD = 260,GL_NEVER = 512,GL_LESS = 513,GL_EQUAL = 514,GL_LEQUAL = 515,GL_GREATER = 516,GL_NOTEQUAL = 517,GL_GEQUAL = 518,GL_ALWAYS = 519,GL_CURRENT_BIT = 1,GL_POINT_BIT = 2,GL_LINE_BIT = 4,GL_POLYGON_BIT = 8,GL_POLYGON_STIPPLE_BIT = 16,GL_PIXEL_MODE_BIT = 32,GL_LIGHTING_BIT = 64,GL_FOG_BIT = 128,GL_DEPTH_BUFFER_BIT = 256,GL_ACCUM_BUFFER_BIT = 512,GL_STENCIL_BUFFER_BIT = 1024,GL_VIEWPORT_BIT = 2048,GL_TRANSFORM_BIT = 4096,GL_ENABLE_BIT = 8192,GL_COLOR_BUFFER_BIT = 16384,GL_HINT_BIT = 32768,GL_EVAL_BIT = 65536,GL_LIST_BIT = 131072,GL_TEXTURE_BIT = 262144,GL_SCISSOR_BIT = 524288,GL_ALL_ATTRIB_BITS = 1048575,GL_POINTS = 0,GL_LINES = 1,GL_LINE_LOOP = 2,GL_LINE_STRIP = 3,GL_TRIANGLES = 4,GL_TRIANGLE_STRIP = 5,GL_TRIANGLE_FAN = 6,GL_QUADS = 7,GL_QUAD_STRIP = 8,GL_POLYGON = 9,GL_ZERO = 0,GL_ONE = 1,GL_SRC_COLOR = 768,GL_ONE_MINUS_SRC_COLOR = 769,GL_SRC_ALPHA = 770,GL_ONE_MINUS_SRC_ALPHA = 771,GL_DST_ALPHA = 772,GL_ONE_MINUS_DST_ALPHA = 773,GL_DST_COLOR = 774,GL_ONE_MINUS_DST_COLOR = 775,GL_SRC_ALPHA_SATURATE = 776,GL_TRUE = 1,GL_FALSE = 0,GL_CLIP_PLANE0 = 12288,GL_CLIP_PLANE1 = 12289,GL_CLIP_PLANE2 = 12290,GL_CLIP_PLANE3 = 12291,GL_CLIP_PLANE4 = 12292,GL_CLIP_PLANE5 = 12293,GL_BYTE = 5120,GL_UNSIGNED_BYTE = 5121,GL_SHORT = 5122,GL_UNSIGNED_SHORT = 5123,GL_INT = 5124,GL_UNSIGNED_INT = 5125,GL_FLOAT = 5126,GL_2_BYTES = 5127,GL_3_BYTES = 5128,GL_4_BYTES = 5129,GL_DOUBLE = 5130,GL_NONE = 0,GL_FRONT_LEFT = 1024,GL_FRONT_RIGHT = 1025,GL_BACK_LEFT = 1026,GL_BACK_RIGHT = 1027,GL_FRONT = 1028,GL_BACK = 1029,GL_LEFT = 1030,GL_RIGHT = 1031,GL_FRONT_AND_BACK = 1032,GL_AUX0 = 1033,GL_AUX1 = 1034,GL_AUX2 = 1035,GL_AUX3 = 1036,GL_NO_ERROR = 0,GL_INVALID_ENUM = 1280,GL_INVALID_VALUE = 1281,GL_INVALID_OPERATION = 1282,GL_STACK_OVERFLOW = 1283,GL_STACK_UNDERFLOW = 1284,GL_OUT_OF_MEMORY = 1285,GL_2D = 1536,GL_3D = 1537,GL_3D_COLOR = 1538,GL_3D_COLOR_TEXTURE = 1539,GL_4D_COLOR_TEXTURE = 1540,GL_PASS_THROUGH_TOKEN = 1792,GL_POINT_TOKEN = 1793,GL_LINE_TOKEN = 1794,GL_POLYGON_TOKEN = 1795,GL_BITMAP_TOKEN = 1796,GL_DRAW_PIXEL_TOKEN = 1797,GL_COPY_PIXEL_TOKEN = 1798,GL_LINE_RESET_TOKEN = 1799,GL_EXP = 2048,GL_EXP2 = 2049,GL_CW = 2304,GL_CCW = 2305,GL_COEFF = 2560,GL_ORDER = 2561,GL_DOMAIN = 2562,GL_CURRENT_COLOR = 2816,GL_CURRENT_INDEX = 2817,GL_CURRENT_NORMAL = 2818,GL_CURRENT_TEXTURE_COORDS = 2819,GL_CURRENT_RASTER_COLOR = 2820,GL_CURRENT_RASTER_INDEX = 2821,GL_CURRENT_RASTER_TEXTURE_COORDS = 2822,GL_CURRENT_RASTER_POSITION = 2823,GL_CURRENT_RASTER_POSITION_VALID = 2824,GL_CURRENT_RASTER_DISTANCE = 2825,GL_POINT_SMOOTH = 2832,GL_POINT_SIZE = 2833,GL_POINT_SIZE_RANGE = 2834,GL_POINT_SIZE_GRANULARITY = 2835,GL_LINE_SMOOTH = 2848,GL_LINE_WIDTH = 2849,GL_LINE_WIDTH_RANGE = 2850,GL_LINE_WIDTH_GRANULARITY = 2851,GL_LINE_STIPPLE = 2852,GL_LINE_STIPPLE_PATTERN = 2853,GL_LINE_STIPPLE_REPEAT = 2854,GL_LIST_MODE = 2864,GL_MAX_LIST_NESTING = 2865,GL_LIST_BASE = 2866,GL_LIST_INDEX = 2867,GL_POLYGON_MODE = 2880,GL_POLYGON_SMOOTH = 2881,GL_POLYGON_STIPPLE = 2882,GL_EDGE_FLAG = 2883,GL_CULL_FACE = 2884,GL_CULL_FACE_MODE = 2885,GL_FRONT_FACE = 2886,GL_LIGHTING = 2896,GL_LIGHT_MODEL_LOCAL_VIEWER = 2897,GL_LIGHT_MODEL_TWO_SIDE = 2898,GL_LIGHT_MODEL_AMBIENT = 2899,GL_SHADE_MODEL = 2900,GL_COLOR_MATERIAL_FACE = 2901,GL_COLOR_MATERIAL_PARAMETER = 2902,GL_COLOR_MATERIAL = 2903,GL_FOG = 2912,GL_FOG_INDEX = 2913,GL_FOG_DENSITY = 2914,GL_FOG_START = 2915,GL_FOG_END = 2916,GL_FOG_MODE = 2917,GL_FOG_COLOR = 2918,GL_DEPTH_RANGE = 2928,GL_DEPTH_TEST = 2929,GL_DEPTH_WRITEMASK = 2930,GL_DEPTH_CLEAR_VALUE = 2931,GL_DEPTH_FUNC = 2932,GL_ACCUM_CLEAR_VALUE = 2944,GL_STENCIL_TEST = 2960,GL_STENCIL_CLEAR_VALUE = 2961,GL_STENCIL_FUNC = 2962,GL_STENCIL_VALUE_MASK = 2963,GL_STENCIL_FAIL = 2964,GL_STENCIL_PASS_DEPTH_FAIL = 2965,GL_STENCIL_PASS_DEPTH_PASS = 2966,GL_STENCIL_REF = 2967,GL_STENCIL_WRITEMASK = 2968,GL_MATRIX_MODE = 2976,GL_NORMALIZE = 2977,GL_VIEWPORT = 2978,GL_MODELVIEW_STACK_DEPTH = 2979,GL_PROJECTION_STACK_DEPTH = 2980,GL_TEXTURE_STACK_DEPTH = 2981,GL_MODELVIEW_MATRIX = 2982,GL_PROJECTION_MATRIX = 2983,GL_TEXTURE_MATRIX = 2984,GL_ATTRIB_STACK_DEPTH = 2992,GL_CLIENT_ATTRIB_STACK_DEPTH = 2993,GL_ALPHA_TEST = 3008,GL_ALPHA_TEST_FUNC = 3009,GL_ALPHA_TEST_REF = 3010,GL_DITHER = 3024,GL_BLEND_DST = 3040,GL_BLEND_SRC = 3041,GL_BLEND = 3042,GL_LOGIC_OP_MODE = 3056,GL_INDEX_LOGIC_OP = 3057,GL_COLOR_LOGIC_OP = 3058,GL_AUX_BUFFERS = 3072,GL_DRAW_BUFFER = 3073,GL_READ_BUFFER = 3074,GL_SCISSOR_BOX = 3088,GL_SCISSOR_TEST = 3089,GL_INDEX_CLEAR_VALUE = 3104,GL_INDEX_WRITEMASK = 3105,GL_COLOR_CLEAR_VALUE = 3106,GL_COLOR_WRITEMASK = 3107,GL_INDEX_MODE = 3120,GL_RGBA_MODE = 3121,GL_DOUBLEBUFFER = 3122,GL_STEREO = 3123,GL_RENDER_MODE = 3136,GL_PERSPECTIVE_CORRECTION_HINT = 3152,GL_POINT_SMOOTH_HINT = 3153,GL_LINE_SMOOTH_HINT = 3154,GL_POLYGON_SMOOTH_HINT = 3155,GL_FOG_HINT = 3156,GL_TEXTURE_GEN_S = 3168,GL_TEXTURE_GEN_T = 3169,GL_TEXTURE_GEN_R = 3170,GL_TEXTURE_GEN_Q = 3171,GL_PIXEL_MAP_I_TO_I = 3184,GL_PIXEL_MAP_S_TO_S = 3185,GL_PIXEL_MAP_I_TO_R = 3186,GL_PIXEL_MAP_I_TO_G = 3187,GL_PIXEL_MAP_I_TO_B = 3188,GL_PIXEL_MAP_I_TO_A = 3189,GL_PIXEL_MAP_R_TO_R = 3190,GL_PIXEL_MAP_G_TO_G = 3191,GL_PIXEL_MAP_B_TO_B = 3192,GL_PIXEL_MAP_A_TO_A = 3193,GL_PIXEL_MAP_I_TO_I_SIZE = 3248,GL_PIXEL_MAP_S_TO_S_SIZE = 3249,GL_PIXEL_MAP_I_TO_R_SIZE = 3250,GL_PIXEL_MAP_I_TO_G_SIZE = 3251,GL_PIXEL_MAP_I_TO_B_SIZE = 3252,GL_PIXEL_MAP_I_TO_A_SIZE = 3253,GL_PIXEL_MAP_R_TO_R_SIZE = 3254,GL_PIXEL_MAP_G_TO_G_SIZE = 3255,GL_PIXEL_MAP_B_TO_B_SIZE = 3256,GL_PIXEL_MAP_A_TO_A_SIZE = 3257,GL_UNPACK_SWAP_BYTES = 3312,GL_UNPACK_LSB_FIRST = 3313,GL_UNPACK_ROW_LENGTH = 3314,GL_UNPACK_SKIP_ROWS = 3315,GL_UNPACK_SKIP_PIXELS = 3316,GL_UNPACK_ALIGNMENT = 3317,GL_PACK_SWAP_BYTES = 3328,GL_PACK_LSB_FIRST = 3329,GL_PACK_ROW_LENGTH = 3330,GL_PACK_SKIP_ROWS = 3331,GL_PACK_SKIP_PIXELS = 3332,GL_PACK_ALIGNMENT = 3333,GL_MAP_COLOR = 3344,GL_MAP_STENCIL = 3345,GL_INDEX_SHIFT = 3346,GL_INDEX_OFFSET = 3347,GL_RED_SCALE = 3348,GL_RED_BIAS = 3349,GL_ZOOM_X = 3350,GL_ZOOM_Y = 3351,GL_GREEN_SCALE = 3352,GL_GREEN_BIAS = 3353,GL_BLUE_SCALE = 3354,GL_BLUE_BIAS = 3355,GL_ALPHA_SCALE = 3356,GL_ALPHA_BIAS = 3357,GL_DEPTH_SCALE = 3358,GL_DEPTH_BIAS = 3359,GL_MAX_EVAL_ORDER = 3376,GL_MAX_LIGHTS = 3377,GL_MAX_CLIP_PLANES = 3378,GL_MAX_TEXTURE_SIZE = 3379,GL_MAX_PIXEL_MAP_TABLE = 3380,GL_MAX_ATTRIB_STACK_DEPTH = 3381,GL_MAX_MODELVIEW_STACK_DEPTH = 3382,GL_MAX_NAME_STACK_DEPTH = 3383,GL_MAX_PROJECTION_STACK_DEPTH = 3384,GL_MAX_TEXTURE_STACK_DEPTH = 3385,GL_MAX_VIEWPORT_DIMS = 3386,GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387,GL_SUBPIXEL_BITS = 3408,GL_INDEX_BITS = 3409,GL_RED_BITS = 3410,GL_GREEN_BITS = 3411,GL_BLUE_BITS = 3412,GL_ALPHA_BITS = 3413,GL_DEPTH_BITS = 3414,GL_STENCIL_BITS = 3415,GL_ACCUM_RED_BITS = 3416,GL_ACCUM_GREEN_BITS = 3417,GL_ACCUM_BLUE_BITS = 3418,GL_ACCUM_ALPHA_BITS = 3419,GL_NAME_STACK_DEPTH = 3440,GL_AUTO_NORMAL = 3456,GL_MAP1_COLOR_4 = 3472,GL_MAP1_INDEX = 3473,GL_MAP1_NORMAL = 3474,GL_MAP1_TEXTURE_COORD_1 = 3475,GL_MAP1_TEXTURE_COORD_2 = 3476,GL_MAP1_TEXTURE_COORD_3 = 3477,GL_MAP1_TEXTURE_COORD_4 = 3478,GL_MAP1_VERTEX_3 = 3479,GL_MAP1_VERTEX_4 = 3480,GL_MAP2_COLOR_4 = 3504,GL_MAP2_INDEX = 3505,GL_MAP2_NORMAL = 3506,GL_MAP2_TEXTURE_COORD_1 = 3507,GL_MAP2_TEXTURE_COORD_2 = 3508,GL_MAP2_TEXTURE_COORD_3 = 3509,GL_MAP2_TEXTURE_COORD_4 = 3510,GL_MAP2_VERTEX_3 = 3511,GL_MAP2_VERTEX_4 = 3512,GL_MAP1_GRID_DOMAIN = 3536,GL_MAP1_GRID_SEGMENTS = 3537,GL_MAP2_GRID_DOMAIN = 3538,GL_MAP2_GRID_SEGMENTS = 3539,GL_TEXTURE_1D = 3552,GL_TEXTURE_2D = 3553,GL_FEEDBACK_BUFFER_POINTER = 3568,GL_FEEDBACK_BUFFER_SIZE = 3569,GL_FEEDBACK_BUFFER_TYPE = 3570,GL_SELECTION_BUFFER_POINTER = 3571,GL_SELECTION_BUFFER_SIZE = 3572,GL_TEXTURE_WIDTH = 4096,GL_TEXTURE_HEIGHT = 4097,GL_TEXTURE_INTERNAL_FORMAT = 4099,GL_TEXTURE_BORDER_COLOR = 4100,GL_TEXTURE_BORDER = 4101,GL_DONT_CARE = 4352,GL_FASTEST = 4353,GL_NICEST = 4354,GL_LIGHT0 = 16384,GL_LIGHT1 = 16385,GL_LIGHT2 = 16386,GL_LIGHT3 = 16387,GL_LIGHT4 = 16388,GL_LIGHT5 = 16389,GL_LIGHT6 = 16390,GL_LIGHT7 = 16391,GL_AMBIENT = 4608,GL_DIFFUSE = 4609,GL_SPECULAR = 4610,GL_POSITION = 4611,GL_SPOT_DIRECTION = 4612,GL_SPOT_EXPONENT = 4613,GL_SPOT_CUTOFF = 4614,GL_CONSTANT_ATTENUATION = 4615,GL_LINEAR_ATTENUATION = 4616,GL_QUADRATIC_ATTENUATION = 4617,GL_COMPILE = 4864,GL_COMPILE_AND_EXECUTE = 4865,GL_CLEAR = 5376,GL_AND = 5377,GL_AND_REVERSE = 5378,GL_COPY = 5379,GL_AND_INVERTED = 5380,GL_NOOP = 5381,GL_XOR = 5382,GL_OR = 5383,GL_NOR = 5384,GL_EQUIV = 5385,GL_INVERT = 5386,GL_OR_REVERSE = 5387,GL_COPY_INVERTED = 5388,GL_OR_INVERTED = 5389,GL_NAND = 5390,GL_SET = 5391,GL_EMISSION = 5632,GL_SHININESS = 5633,GL_AMBIENT_AND_DIFFUSE = 5634,GL_COLOR_INDEXES = 5635,GL_MODELVIEW = 5888,GL_PROJECTION = 5889,GL_TEXTURE = 5890,GL_COLOR = 6144,GL_DEPTH = 6145,GL_STENCIL = 6146,GL_COLOR_INDEX = 6400,GL_STENCIL_INDEX = 6401,GL_DEPTH_COMPONENT = 6402,GL_RED = 6403,GL_GREEN = 6404,GL_BLUE = 6405,GL_ALPHA = 6406,GL_RGB = 6407,GL_RGBA = 6408,GL_LUMINANCE = 6409,GL_LUMINANCE_ALPHA = 6410,GL_BITMAP = 6656,GL_POINT = 6912,GL_LINE = 6913,GL_FILL = 6914,GL_RENDER = 7168,GL_FEEDBACK = 7169,GL_SELECT = 7170,GL_FLAT = 7424,GL_SMOOTH = 7425,GL_KEEP = 7680,GL_REPLACE = 7681,GL_INCR = 7682,GL_DECR = 7683,GL_VENDOR = 7936,GL_RENDERER = 7937,GL_VERSION = 7938,GL_EXTENSIONS = 7939,GL_S = 8192,GL_T = 8193,GL_R = 8194,GL_Q = 8195,GL_MODULATE = 8448,GL_DECAL = 8449,GL_TEXTURE_ENV_MODE = 8704,GL_TEXTURE_ENV_COLOR = 8705,GL_TEXTURE_ENV = 8960,GL_EYE_LINEAR = 9216,GL_OBJECT_LINEAR = 9217,GL_SPHERE_MAP = 9218,GL_TEXTURE_GEN_MODE = 9472,GL_OBJECT_PLANE = 9473,GL_EYE_PLANE = 9474,GL_NEAREST = 9728,GL_LINEAR = 9729,GL_NEAREST_MIPMAP_NEAREST = 9984,GL_LINEAR_MIPMAP_NEAREST = 9985,GL_NEAREST_MIPMAP_LINEAR = 9986,GL_LINEAR_MIPMAP_LINEAR = 9987,GL_TEXTURE_MAG_FILTER = 10240,GL_TEXTURE_MIN_FILTER = 10241,GL_TEXTURE_WRAP_S = 10242,GL_TEXTURE_WRAP_T = 10243,GL_CLAMP = 10496,GL_REPEAT = 10497,GL_CLIENT_PIXEL_STORE_BIT = 1,GL_CLIENT_VERTEX_ARRAY_BIT = 2,GL_CLIENT_ALL_ATTRIB_BITS = -1,GL_POLYGON_OFFSET_FACTOR = 32824,GL_POLYGON_OFFSET_UNITS = 10752,GL_POLYGON_OFFSET_POINT = 10753,GL_POLYGON_OFFSET_LINE = 10754,GL_POLYGON_OFFSET_FILL = 32823,GL_ALPHA4 = 32827,GL_ALPHA8 = 32828,GL_ALPHA12 = 32829,GL_ALPHA16 = 32830,GL_LUMINANCE4 = 32831,GL_LUMINANCE8 = 32832,GL_LUMINANCE12 = 32833,GL_LUMINANCE16 = 32834,GL_LUMINANCE4_ALPHA4 = 32835,GL_LUMINANCE6_ALPHA2 = 32836,GL_LUMINANCE8_ALPHA8 = 32837,GL_LUMINANCE12_ALPHA4 = 32838,GL_LUMINANCE12_ALPHA12 = 32839,GL_LUMINANCE16_ALPHA16 = 32840,GL_INTENSITY = 32841,GL_INTENSITY4 = 32842,GL_INTENSITY8 = 32843,GL_INTENSITY12 = 32844,GL_INTENSITY16 = 32845,GL_R3_G3_B2 = 10768,GL_RGB4 = 32847,GL_RGB5 = 32848,GL_RGB8 = 32849,GL_RGB10 = 32850,GL_RGB12 = 32851,GL_RGB16 = 32852,GL_RGBA2 = 32853,GL_RGBA4 = 32854,GL_RGB5_A1 = 32855,GL_RGBA8 = 32856,GL_RGB10_A2 = 32857,GL_RGBA12 = 32858,GL_RGBA16 = 32859,GL_TEXTURE_RED_SIZE = 32860,GL_TEXTURE_GREEN_SIZE = 32861,GL_TEXTURE_BLUE_SIZE = 32862,GL_TEXTURE_ALPHA_SIZE = 32863,GL_TEXTURE_LUMINANCE_SIZE = 32864,GL_TEXTURE_INTENSITY_SIZE = 32865,GL_PROXY_TEXTURE_1D = 32867,GL_PROXY_TEXTURE_2D = 32868,GL_TEXTURE_PRIORITY = 32870,GL_TEXTURE_RESIDENT = 32871,GL_TEXTURE_BINDING_1D = 32872,GL_TEXTURE_BINDING_2D = 32873,GL_VERTEX_ARRAY = 32884,GL_NORMAL_ARRAY = 32885,GL_COLOR_ARRAY = 32886,GL_INDEX_ARRAY = 32887,GL_TEXTURE_COORD_ARRAY = 32888,GL_EDGE_FLAG_ARRAY = 32889,GL_VERTEX_ARRAY_SIZE = 32890,GL_VERTEX_ARRAY_TYPE = 32891,GL_VERTEX_ARRAY_STRIDE = 32892,GL_NORMAL_ARRAY_TYPE = 32894,GL_NORMAL_ARRAY_STRIDE = 32895,GL_COLOR_ARRAY_SIZE = 32897,GL_COLOR_ARRAY_TYPE = 32898,GL_COLOR_ARRAY_STRIDE = 32899,GL_INDEX_ARRAY_TYPE = 32901,GL_INDEX_ARRAY_STRIDE = 32902,GL_TEXTURE_COORD_ARRAY_SIZE = 32904,GL_TEXTURE_COORD_ARRAY_TYPE = 32905,GL_TEXTURE_COORD_ARRAY_STRIDE = 32906,GL_EDGE_FLAG_ARRAY_STRIDE = 32908,GL_VERTEX_ARRAY_POINTER = 32910,GL_NORMAL_ARRAY_POINTER = 32911,GL_COLOR_ARRAY_POINTER = 32912,GL_INDEX_ARRAY_POINTER = 32913,GL_TEXTURE_COORD_ARRAY_POINTER = 32914,GL_EDGE_FLAG_ARRAY_POINTER = 32915,GL_V2F = 10784,GL_V3F = 10785,GL_C4UB_V2F = 10786,GL_C4UB_V3F = 10787,GL_C3F_V3F = 10788,GL_N3F_V3F = 10789,GL_C4F_N3F_V3F = 10790,GL_T2F_V3F = 10791,GL_T4F_V4F = 10792,GL_T2F_C4UB_V3F = 10793,GL_T2F_C3F_V3F = 10794,GL_T2F_N3F_V3F = 10795,GL_T2F_C4F_N3F_V3F = 10796,GL_T4F_C4F_N3F_V4F = 10797,GL_EXT_vertex_array = 1,GL_EXT_bgra = 1,GL_EXT_paletted_texture = 1,GL_WIN_swap_hint = 1,GL_WIN_draw_range_elements = 1,GL_VERTEX_ARRAY_EXT = 32884,GL_NORMAL_ARRAY_EXT = 32885,GL_COLOR_ARRAY_EXT = 32886,GL_INDEX_ARRAY_EXT = 32887,GL_TEXTURE_COORD_ARRAY_EXT = 32888,GL_EDGE_FLAG_ARRAY_EXT = 32889,GL_VERTEX_ARRAY_SIZE_EXT = 32890,GL_VERTEX_ARRAY_TYPE_EXT = 32891,GL_VERTEX_ARRAY_STRIDE_EXT = 32892,GL_VERTEX_ARRAY_COUNT_EXT = 32893,GL_NORMAL_ARRAY_TYPE_EXT = 32894,GL_NORMAL_ARRAY_STRIDE_EXT = 32895,GL_NORMAL_ARRAY_COUNT_EXT = 32896,GL_COLOR_ARRAY_SIZE_EXT = 32897,GL_COLOR_ARRAY_TYPE_EXT = 32898,GL_COLOR_ARRAY_STRIDE_EXT = 32899,GL_COLOR_ARRAY_COUNT_EXT = 32900,GL_INDEX_ARRAY_TYPE_EXT = 32901,GL_INDEX_ARRAY_STRIDE_EXT = 32902,GL_INDEX_ARRAY_COUNT_EXT = 32903,GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904,GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905,GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906,GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907,GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908,GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909,GL_VERTEX_ARRAY_POINTER_EXT = 32910,GL_NORMAL_ARRAY_POINTER_EXT = 32911,GL_COLOR_ARRAY_POINTER_EXT = 32912,GL_INDEX_ARRAY_POINTER_EXT = 32913,GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914,GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915,GL_DOUBLE_EXT = 5130,GL_BGR_EXT = 32992,GL_BGRA_EXT = 32993,GL_COLOR_TABLE_FORMAT_EXT = 32984,GL_COLOR_TABLE_WIDTH_EXT = 32985,GL_COLOR_TABLE_RED_SIZE_EXT = 32986,GL_COLOR_TABLE_GREEN_SIZE_EXT = 32987,GL_COLOR_TABLE_BLUE_SIZE_EXT = 32988,GL_COLOR_TABLE_ALPHA_SIZE_EXT = 32989,GL_COLOR_TABLE_LUMINANCE_SIZE_EXT = 32990,GL_COLOR_TABLE_INTENSITY_SIZE_EXT = 32991,GL_COLOR_INDEX1_EXT = 32994,GL_COLOR_INDEX2_EXT = 32995,GL_COLOR_INDEX4_EXT = 32996,GL_COLOR_INDEX8_EXT = 32997,GL_COLOR_INDEX12_EXT = 32998,GL_COLOR_INDEX16_EXT = 32999,GL_MAX_ELEMENTS_VERTICES_WIN = 33000,GL_MAX_ELEMENTS_INDICES_WIN = 33001,GL_PHONG_WIN = 33002,GL_PHONG_HINT_WIN = 33003,GL_FOG_SPECULAR_TEXTURE_WIN = 33004,GL_LOGIC_OP = 3057,GL_TEXTURE_COMPONENTS = 4099,};
enum MACRO_GT_UNKNOWN {GT_UNKNOWN = 0,GT_DGROUP = 1,GT_DATA = 2,GT_CODE = 3,GT_TASK = 4,GT_RESOURCE = 5,GT_MODULE = 6,GT_FREE = 7,GT_INTERNAL = 8,GT_SENTINEL = 9,GT_BURGERMASTER = 10,};
enum MACRO_HTTOPRIGHT {HTTOPRIGHT = 14,};
enum MACRO_ICCOMPRESS {ICCOMPRESS_KEYFRAME = 0x1,};
enum MACRO_IDC_STATIC {IDC_STATIC = -1,};
enum MACRO_IDENTIFIER {IDENTIFIER_SDK_MASK = 0xF0000000,IDENTIFIER_SDK_ERROR = 0x10000000,};
enum MACRO_IIS_MD_FTP {IIS_MD_FTP_BASE = 5000,};
enum MACRO_IIS_MD_LOG {IIS_MD_LOG_BASE = 4000,};
enum MACRO_IIS_MD_SSL {IIS_MD_SSL_BASE = 5500,};
enum MACRO_ILLUMINANT {ILLUMINANT_DEVICE_DEFAULT = 0,ILLUMINANT_A = 1,ILLUMINANT_B = 2,ILLUMINANT_C = 3,ILLUMINANT_D50 = 4,ILLUMINANT_D55 = 5,ILLUMINANT_D65 = 6,ILLUMINANT_D75 = 7,ILLUMINANT_F2 = 8,ILLUMINANT_MAX_INDEX = 8,ILLUMINANT_TUNGSTEN = 1,ILLUMINANT_DAYLIGHT = 3,ILLUMINANT_FLUORESCENT = 8,ILLUMINANT_NTSC = 3,};
enum MACRO_IME_CONFIG {IME_CONFIG_GENERAL = 1,IME_CONFIG_REGISTERWORD = 2,IME_CONFIG_SELECTDICTIONARY = 3,IME_ESC_QUERY_SUPPORT = 3,IME_ESC_RESERVED_FIRST = 4,IME_ESC_RESERVED_LAST = 2047,IME_ESC_PRIVATE_FIRST = 2048,IME_ESC_PRIVATE_LAST = 4095,IME_ESC_SEQUENCE_TO_INTERNAL = 4097,IME_ESC_GET_EUDC_DICTIONARY = 4099,IME_ESC_SET_EUDC_DICTIONARY = 4100,IME_ESC_MAX_KEY = 4101,IME_ESC_IME_NAME = 4102,IME_ESC_SYNC_HOTKEY = 4103,IME_ESC_HANJA_MODE = 4104,IME_ESC_AUTOMATA = 4105,IME_ESC_PRIVATE_HOTKEY = 4106,IME_ESC_GETHELPFILENAME = 4107,IME_REGWORD_STYLE_EUDC = 1,IME_REGWORD_STYLE_USER_FIRST = -2147483648,IME_REGWORD_STYLE_USER_LAST = -1,};
enum MACRO_IMPORTANCE {IMPORTANCE_LOW = 0,IMPORTANCE_NORMAL = 1,IMPORTANCE_HIGH = 2,};
enum MACRO_INITIALIZE {INITIALIZE_NEGOTIATION = 0xFFFFFFFF,};
enum MACRO_IN_PDEVENT {IN_PDEVENT = 256,IN_ERASEBKGND = 1,IN_PREPAINT = 514,IN_PAINT = 3,IN_POSTPAINT = 516,IN_MODECHANGED = 4101,IN_CHANGE = 4102,IN_UPDATE = 4103,IN_SETFOCUS = 1032,IN_KILLFOCUS = 1033,IN_MEMERR = 10,IN_HSCROLL = 2059,IN_VSCROLL = 2060,IN_GESTURE = 4109,IN_COMMAND = 4110,IN_CLOSE = 15,IN_PROPERTIES = 8208,};
enum MACRO_IOCTL_DISK {IOCTL_DISK_BASE = 7,IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752,IOCTL_DISK_GET_PARTITION_INFO = 475140,IOCTL_DISK_SET_PARTITION_INFO = 507912,IOCTL_DISK_GET_DRIVE_LAYOUT = 475148,IOCTL_DISK_SET_DRIVE_LAYOUT = 507920,IOCTL_DISK_VERIFY = 458772,IOCTL_DISK_FORMAT_TRACKS = 507928,IOCTL_DISK_REASSIGN_BLOCKS = 507932,IOCTL_DISK_PERFORMANCE = 458784,IOCTL_DISK_IS_WRITABLE = 458788,IOCTL_DISK_LOGGING = 458792,IOCTL_DISK_FORMAT_TRACKS_EX = 507948,IOCTL_DISK_HISTOGRAM_STRUCTURE = 458800,IOCTL_DISK_HISTOGRAM_DATA = 458804,IOCTL_DISK_HISTOGRAM_RESET = 458808,IOCTL_DISK_REQUEST_STRUCTURE = 458812,IOCTL_DISK_REQUEST_DATA = 458816,IOCTL_DISK_CONTROLLER_NUMBER = 458820,};
enum MACRO_IPX_GLOBAL {IPX_GLOBAL_CLIENT_WAN_ROUTE = 0x1,IP_VALID_ROUTE = 0x1,RTM_CURRENT_BEST_ROUTE = 0x1,RTM_PREVIOUS_BEST_ROUTE = 0x2,};
enum MACRO_IP_OPTIONS {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_MULTICAST_IF = 9,IP_MULTICAST_TTL = 10,IP_MULTICAST_LOOP = 11,IP_ADD_MEMBERSHIP = 12,IP_DROP_MEMBERSHIP = 13,IP_DONTFRAGMENT = 14,};
enum MACRO_IR_IV24CTS {IR_IV24CTS = 1,IR_IV24DSR = 2,IR_IV24DCD = 4,IR_IV24RI = 8,IR_IV24Test = 16,};
enum MACRO_IR_OV24RTS {IR_OV24RTS = 1,IR_OV24DTR = 2,IR_OV24DSRS = 4,IR_OV24SlSt = 8,IR_OV24Test = 16,};
enum MACRO_ISO_GLOBAL {ISO_GLOBAL = 0x1,ISO_REGISTRY = 0x2,ISO_VALID_FLAGS = 0x3,};
enum MACRO_JOB_ACCESS {JOB_ACCESS_ADMINISTER = 0x10,};
enum MACRO_JOB_NOTIFY {JOB_NOTIFY_TYPE = 0x1,};
enum MACRO_JOB_OBJECT {JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0,JOB_OBJECT_POST_AT_END_OF_JOB = 1,JOB_OBJECT_MSG_END_OF_JOB_TIME = 1,JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2,JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3,JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4,JOB_OBJECT_LIMIT_WORKINGSET = 1,JOB_OBJECT_LIMIT_PROCESS_TIME = 2,JOB_OBJECT_LIMIT_JOB_TIME = 4,JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8,JOB_OBJECT_LIMIT_AFFINITY = 16,JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32,JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64,JOB_OBJECT_LIMIT_VALID_FLAGS = 127,JOB_OBJECT_UILIMIT_NONE = 0,JOB_OBJECT_UILIMIT_HANDLES = 1,JOB_OBJECT_UILIMIT_READCLIPBOARD = 2,JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4,JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8,JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16,JOB_OBJECT_UILIMIT_GLOBALATOMS = 32,JOB_OBJECT_UILIMIT_DESKTOP = 64,JOB_OBJECT_UILIMIT_EXITWINDOWS = 128,JOB_OBJECT_UILIMIT_ALL = 255,JOB_OBJECT_UI_VALID_FLAGS = 255,JOB_OBJECT_SECURITY_NO_ADMIN = 1,JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2,JOB_OBJECT_SECURITY_ONLY_TOKEN = 4,JOB_OBJECT_SECURITY_FILTER_TOKENS = 8,JOB_OBJECT_SECURITY_VALID_FLAGS = 15,};
enum MACRO_KAGPROPVAL {KAGPROPVAL_CONCUR_ROWVER = 0x1,KAGPROPVAL_CONCUR_VALUES = 0x2,KAGPROPVAL_CONCUR_LOCK = 0x4,KAGPROPVAL_CONCUR_READ_ONLY = 0x8,};
enum MACRO_KEY_LENGTH {KEY_LENGTH_MASK = 0xFFFF0000,};
enum MACRO_KSINSTANCE {KSINSTANCE_INDETERMINATE = 4294967295,};
enum MACRO_KSPRIORITY {KSPRIORITY_LOW = 0x1,KSPRIORITY_NORMAL = 0x40000000,KSPRIORITY_HIGH = 0x80000000,KSPRIORITY_EXCLUSIVE = 0xFFFFFFFF,};
enum MACRO_KSPROPERTY {KSPROPERTY_SUPPORT_GET = 0x1,KSPROPERTY_SUPPORT_SET = 0x2,};
enum MACRO_LANGUAGE_E {LANGUAGE_E_DATABASE_NOT_FOUND = 0x80041784,};
enum MACRO_LDBL_RADIX {LDBL_RADIX = 2,LDBL_ROUNDS = 1,};
enum MACRO_LINEMAPPER {LINEMAPPER = 0xFFFFFFFF,};
enum MACRO_LM20_DNLEN {LM20_DNLEN = 15,};
enum MACRO_LM20_GNLEN {LM20_GNLEN = 20,};
enum MACRO_LM20_NNLEN {LM20_NNLEN = 12,};
enum MACRO_LM20_PWLEN {LM20_PWLEN = 14,};
enum MACRO_LM20_QNLEN {LM20_QNLEN = 12,};
enum MACRO_LM20_RMLEN {LM20_RMLEN = 30,};
enum MACRO_LM20_SNLEN {LM20_SNLEN = 15,};
enum MACRO_LM20_UNLEN {LM20_UNLEN = 20,};
enum MACRO_LOCALGROUP {LOCALGROUP_NAME_PARMNUM = 1,LOCALGROUP_COMMENT_PARMNUM = 2,};
enum MACRO_LOGPIXELSX {LOGPIXELSX = 88,};
enum MACRO_LOGPIXELSY {LOGPIXELSY = 90,};
enum MACRO_LONG_LIVED {LONG_LIVED = 0xFFFFFFFE,};
enum MACRO_LONG_NAMES {UNDERSTANDS_LONG_NAMES = 1,NO_LONG_NAMES = 2,};
enum MACRO_LinkOption {LinkOption_4Wire = 128,LinkOption_NRZI = 64,LinkOption_HDLC = 32,LinkOption_FullDuplex = 16,LinkOption_InternalClock = 8,LinkOption_DMA = 4,LinkOption_ResetStatistics = 2,};
enum MACRO_MAPI_FORCE {MAPI_FORCE_CREATE = 1,MAPI_FULL_IPM_TREE = 2,};
enum MACRO_MAPI_LOGON {MAPI_LOGON_UI = 0x1,MAPI_NEW_SESSION = 0x2,MAPI_ALLOW_OTHERS = 0x8,MAPI_EXPLICIT_PROFILE = 0x10,MAPI_EXTENDED = 0x20,MAPI_FORCE_DOWNLOAD = 0x1000,MAPI_SERVICE_UI_ALWAYS = 0x2000,MAPI_NO_MAIL = 0x8000,MAPI_PASSWORD_UI = 0x20000,MAPI_TIMEOUT_SHORT = 0x100000,MAPI_SIMPLE_DEFAULT = 0x1009,MAPI_SIMPLE_EXPLICIT = 0x1012,MAPI_INIT_VERSION = 0x0,MAPI_MULTITHREAD_NOTIFICATIONS = 0x1,MAPI_LOGOFF_SHARED = 0x1,MAPI_LOGOFF_UI = 0x2,MAPI_DEFAULT_STORE = 0x1,MAPI_SIMPLE_STORE_TEMPORARY = 0x2,MAPI_SIMPLE_STORE_PERMANENT = 0x3,MAPI_PRIMARY_STORE = 0x4,MAPI_SECONDARY_STORE = 0x5,MAPI_POST_MESSAGE = 0x1,MAPI_NEW_MESSAGE = 0x2,MAPI_DEFAULT_SERVICES = 0x1,};
enum MACRO_MAPI_STORE {MAPI_STORE_PROVIDER = 33,MAPI_AB = 34,MAPI_AB_PROVIDER = 35,MAPI_TRANSPORT_PROVIDER = 36,MAPI_SPOOLER = 37,MAPI_PROFILE_PROVIDER = 38,MAPI_SUBSYSTEM = 39,MAPI_HOOK_PROVIDER = 40,};
enum MACRO_MARKPARITY {MARKPARITY = 3,SPACEPARITY = 4,};
enum MACRO_MAXEAPCODE {MAXEAPCODE = 4,};
enum MACRO_MAXFILELEN {MAXFILELEN = 13,};
enum MACRO_MAXHOTSPOT {MAXHOTSPOT = 8,};
enum MACRO_MAXINTATOM {MAXINTATOM = 0xC000,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 50,};
enum MACRO_MAX_ENTITY {MAX_ENTITY = 32,};
enum MACRO_MAX_GOPHER {MAX_GOPHER_DISPLAY_TEXT = 128,MAX_GOPHER_SELECTOR_TEXT = 256,MAX_GOPHER_HOST_NAME = 256,MAX_GOPHER_LOCATOR_LENGTH = 653,};
enum MACRO_MAX_LANMAN {MAX_LANMAN_MESSAGE_ID = 5799,};
enum MACRO_MAX_MIMECP {MAX_MIMECP_NAME = 64,MAX_MIMECSET_NAME = 50,MAX_MIMEFACE_NAME = 32,MAX_RFC1766_NAME = 6,MAX_LOCALE_NAME = 32,};
enum MACRO_MAX_MODULE {MAX_MODULE_NAME32 = 255,};
enum MACRO_MAX_PASSWD {MAX_PASSWD_LEN = 256,};
enum MACRO_MAX_SEARCH {MAX_SEARCH_FORMAT_STRING = 255,};
enum MACRO_MAX_VOLUME {MAX_VOLUME_ID_SIZE = 36,MAX_VOLUME_TEMPLATE_SIZE = 40,};
enum MACRO_MCIERR_AVI {MCIERR_AVI_OLDAVIFORMAT = 612,MCIERR_AVI_NOTINTERLEAVED = 613,MCIERR_AVI_NODISPDIB = 614,MCIERR_AVI_CANTPLAYFULLSCREEN = 615,MCIERR_AVI_TOOBIGFORVGA = 616,MCIERR_AVI_NOCOMPRESSOR = 617,MCIERR_AVI_DISPLAYERROR = 618,MCIERR_AVI_AUDIOERROR = 619,MCIERR_AVI_BADPALETTE = 620,};
enum MACRO_MCIERR_DGV {MCIERR_DGV_DEVICE_LIMIT = 512,MCIERR_DGV_IOERR = 513,MCIERR_DGV_WORKSPACE_EMPTY = 514,MCIERR_DGV_DISK_FULL = 515,MCIERR_DGV_DEVICE_MEMORY_FULL = 516,MCIERR_DGV_BAD_CLIPBOARD_RANGE = 517,};
enum MACRO_MCIERR_VCR {MCIERR_VCR_CANNOT_OPEN_COMM = 513,MCIERR_VCR_CANNOT_WRITE_COMM = 514,MCIERR_VCR_READ_TIMEOUT = 515,MCIERR_VCR_COMMAND_BUFFER_FULL = 516,MCIERR_VCR_COMMAND_CANCELLED = 517,MCIERR_VCR_POWER_OFF = 518,MCIERR_VCR_COMMAND_FAILED = 519,MCIERR_VCR_SEARCH = 520,MCIERR_VCR_CONDITION = 521,MCIERR_VCR_CAMERA_MODE = 522,MCIERR_VCR_VCR_MODE = 523,MCIERR_VCR_COUNTER_TYPE = 524,MCIERR_VCR_TUNER = 525,MCIERR_VCR_EMERGENCY_STOP = 526,MCIERR_VCR_MEDIA_UNMOUNTED = 527,MCIERR_VCR_REGISTER = 528,MCIERR_VCR_TRACK_FAILURE = 529,MCIERR_VCR_CUE_FAILED_FLAGS = 530,MCIERR_VCR_ISWRITEPROTECTED = 531,};
enum MACRO_MCI_MCIAVI {MCI_MCIAVI_PLAY_WINDOW = 0x1000000,MCI_MCIAVI_PLAY_FULLSCREEN = 0x2000000,MCI_MCIAVI_PLAY_FULLBY2 = 0x4000000,MCI_AVI_STATUS_FRAMES_SKIPPED = 0x8001,MCI_AVI_STATUS_LAST_PLAY_SPEED = 0x8002,MCI_AVI_STATUS_AUDIO_BREAKS = 0x8003,MCI_AVI_SETVIDEO_DRAW_PROCEDURE = 0x8000,MCI_AVI_SETVIDEO_PALETTE_COLOR = 0x8100,MCI_AVI_SETVIDEO_PALETTE_HALFTONE = 0xFFFF,};
enum MACRO_MDB_FOLDER {MDB_FOLDER_IPM = 0x1,MDB_FOLDER_SEARCH = 0x2,MDB_FOLDER_NORMAL = 0x4,MDB_FOLDER_RULES = 0x8,MDB_NON_IPM = 0x10,MDB_IPM = 0x20,MDB_LIMIT_BELOW = 0x1,MDB_LIMIT_ISSUE_WARNING = 0x2,MDB_LIMIT_PROHIBIT_SEND = 0x4,MDB_LIMIT_NO_CHECK = 0x8,};
enum MACRO_MDDISPINFO {MDDISPINFO_DRILLED_DOWN = 0x10000,MDDISPINFO_PARENT_SAME_AS_PREV = 0x20000,};
enum MACRO_MDMVOLFLAG {MDMVOLFLAG_LOW = 0x1,MDMVOLFLAG_MEDIUM = 0x2,MDMVOLFLAG_HIGH = 0x4,};
enum MACRO_MERGEPAINT {MERGEPAINT = 0xBB0226,};
enum MACRO_MIDIMAPPER {MIDIMAPPER = 4294967295,};
enum MACRO_MK_LBUTTON {MK_LBUTTON = 0x1,MK_RBUTTON = 0x2,MK_SHIFT = 0x4,MK_CONTROL = 0x8,MK_MBUTTON = 0x10,};
enum MACRO_MPEGLAYER3 {MPEGLAYER3_WFX_EXTRA_BYTES = 12,MPEGLAYER3_ID_UNKNOWN = 0,MPEGLAYER3_ID_MPEG = 1,MPEGLAYER3_ID_CONSTANTFRAMESIZE = 2,MPEGLAYER3_FLAG_PADDING_ISO = 0,MPEGLAYER3_FLAG_PADDING_ON = 1,MPEGLAYER3_FLAG_PADDING_OFF = 2,};
enum MACRO_MQ_JOURNAL {MQ_JOURNAL_NONE = 0,MQ_JOURNAL = 1,MQ_TRANSACTIONAL_NONE = 0,MQ_TRANSACTIONAL = 1,MQ_AUTHENTICATE_NONE = 0,MQ_AUTHENTICATE = 1,MQ_PRIV_LEVEL_NONE = 0,MQ_PRIV_LEVEL_OPTIONAL = 1,MQ_PRIV_LEVEL_BODY = 2,};
enum MACRO_MSG_LOCKED {MSG_LOCKED = 0x1,MSG_UNLOCKED = 0x0,};
enum MACRO_NCBADDNAME {NCBADDNAME = 0x30,};
enum MACRO_NCBDELNAME {NCBDELNAME = 0x31,};
enum MACRO_NCBRECVANY {NCBRECVANY = 0x16,};
enum MACRO_NDDE_TRUST {NDDE_TRUST_SHARE_START = 0x80000000,NDDE_TRUST_SHARE_INIT = 0x40000000,NDDE_TRUST_SHARE_DEL = 0x20000000,NDDE_TRUST_CMD_SHOW = 0x10000000,NDDE_CMD_SHOW_MASK = 0xFFFF,NDDE_SHAREDB_ADD = 0x1,NDDE_SHAREDB_DELETE = 0x2,NDDE_SHAREDB_LIST = 0x4,NDDE_SHAREDB_ADMIN = 0xE0007,NDDE_SHAREDB_OPER = 0x7,NDDE_SHAREDB_POWER = 0x7,NDDE_SHAREDB_USER = 0x7,NDDE_SHAREDB_EVERYONE = 0x4,NDDE_SHARE_READ = 0x1,NDDE_SHARE_WRITE = 0x2,NDDE_SHARE_INITIATE_STATIC = 0x4,NDDE_SHARE_INITIATE_LINK = 0x8,NDDE_SHARE_REQUEST = 0x10,NDDE_SHARE_ADVISE = 0x20,NDDE_SHARE_POKE = 0x40,NDDE_SHARE_EXECUTE = 0x80,NDDE_SHARE_ADD_ITEMS = 0x100,NDDE_SHARE_LIST_ITEMS = 0x200,NDDE_SHARE_GENERIC_READ = 0x235,NDDE_SHARE_GENERIC_WRITE = 0x1004C,NDDE_SHARE_GENERIC_EXECUTE = 0x8C,NDDE_SHARE_GENERIC_ALL = 0xF03FF,NDDE_ITEM_REQUEST = 0x1,NDDE_ITEM_ADVISE = 0x2,NDDE_ITEM_POKE = 0x4,NDDE_ITEM_GENERIC_READ = 0x3,NDDE_ITEM_GENERIC_WRITE = 0x4,NDDE_ITEM_GENERIC_EXECUTE = 0x0,NDDE_ITEM_GENERIC_ALL = 0xF0007,NDDE_GUI_NONE = 0x0,NDDE_GUI_READ = 0x235,NDDE_GUI_READ_LINK = 0x23D,NDDE_GUI_CHANGE = 0x102FD,NDDE_GUI_FULL_CONTROL = 0xF03FF,};
enum MACRO_NOTSRCCOPY {NOTSRCCOPY = 0x330008,};
enum MACRO_NS_DEFAULT {NS_DEFAULT = 0,NS_VNS = 50,};
enum MACRO_NUMMARKERS {NUMMARKERS = 20,};
enum MACRO_NeverMoved {NeverMoved = 0,UserMoved = 1,ProgramMoved = 2,};
enum MACRO_NeverShown {NeverShown = 0,UserHid = 1,UserShowed = 2,};
enum MACRO_ODT_HEADER {ODT_HEADER = 100,ODT_TAB = 101,ODT_LISTVIEW = 102,};
enum MACRO_OLESTDDROP {OLESTDDROP_NONE = 0,OLESTDDROP_DEFAULT = 1,OLESTDDROP_NONDEFAULT = 2,};
enum MACRO_ONESTOPBIT {ONESTOPBIT = 0,ONE5STOPBITS = 1,TWOSTOPBITS = 2,};
enum MACRO_PGN_SCROLL {PGN_SCROLL = -901,};
enum MACRO_PHONESTATE {PHONESTATE_OTHER = 0x1,PHONESTATE_CONNECTED = 0x2,PHONESTATE_DISCONNECTED = 0x4,PHONESTATE_OWNER = 0x8,PHONESTATE_MONITORS = 0x10,PHONESTATE_DISPLAY = 0x20,PHONESTATE_LAMP = 0x40,PHONESTATE_RINGMODE = 0x80,PHONESTATE_RINGVOLUME = 0x100,PHONESTATE_HANDSETHOOKSWITCH = 0x200,PHONESTATE_HANDSETVOLUME = 0x400,PHONESTATE_HANDSETGAIN = 0x800,PHONESTATE_SPEAKERHOOKSWITCH = 0x1000,PHONESTATE_SPEAKERVOLUME = 0x2000,PHONESTATE_SPEAKERGAIN = 0x4000,PHONESTATE_HEADSETHOOKSWITCH = 0x8000,PHONESTATE_HEADSETVOLUME = 0x10000,PHONESTATE_HEADSETGAIN = 0x20000,PHONESTATE_SUSPEND = 0x40000,PHONESTATE_RESUME = 0x80000,PHONESTATE_DEVSPECIFIC = 0x100000,PHONESTATE_REINIT = 0x200000,PHONESTATE_CAPSCHANGE = 0x400000,PHONESTATE_REMOVED = 0x800000,};
enum MACRO_PI_ALLOWED {PI_ALLOWED = 0x0,PI_RESTRICTED = 0x40,PI_NUMBER_NOT_AVAILABLE = 0x80,};
enum MACRO_POSTSCRIPT {POSTSCRIPT_DATA = 37,POSTSCRIPT_IGNORE = 38,};
enum MACRO_PRDATETIME {PRDATETIME = 27,};
enum MACRO_PRIHIGHEST {PRIHIGHEST = 32767,};
enum MACRO_PROPSETHDR {PROPSETHDR_OSVERSION_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_PR_CFG_MIN {PR_CFG_MIN = 1711276062,PR_CFG_MAX = 1729036546,PR_ASSIGNED_ACCESS = 1727987715,PR_OWNER_NAME = 1727922206,};
enum MACRO_PR_CFG_RAS {PR_CFG_RAS_RETRYATTEMPTS = 1715994654,PR_CFG_RAS_RETRYDELAY = 1716060190,PR_CFG_LOCAL_HEADER = 1719664651,};
enum MACRO_PR_OFFLINE {PR_OFFLINE_FLAGS = 0x663D0003,PR_SYNCHRONIZE_FLAGS = 0x65E40003,};
enum MACRO_PR_PROFILE {PR_PROFILE_VERSION = 0x66000003,PR_PROFILE_CONFIG_FLAGS = 0x66010003,PR_PROFILE_HOME_SERVER = 0x6602001E,PR_PROFILE_HOME_SERVER_DN = 0x6612001E,PR_PROFILE_HOME_SERVER_ADDRS = 0x6613101E,PR_PROFILE_USER = 0x6603001E,PR_PROFILE_CONNECT_FLAGS = 0x66040003,PR_PROFILE_TRANSPORT_FLAGS = 0x66050003,PR_PROFILE_UI_STATE = 0x66060003,PR_PROFILE_UNRESOLVED_NAME = 0x6607001E,PR_PROFILE_UNRESOLVED_SERVER = 0x6608001E,PR_PROFILE_BINDING_ORDER = 0x6609001E,PR_PROFILE_MAX_RESTRICT = 0x660D0003,PR_PROFILE_AB_FILES_PATH = 0x660E001E,PR_PROFILE_OFFLINE_STORE_PATH = 0x6610001E,PR_PROFILE_OFFLINE_INFO = 0x66110102,PR_PROFILE_ADDR_INFO = 0x66870102,PR_PROFILE_OPTIONS_DATA = 0x66890102,PR_PROFILE_SECURE_MAILBOX = 0x67F00102,PR_DISABLE_WINSOCK = 0x66180003,PR_OST_ENCRYPTION = 0x67020003,};
enum MACRO_PST_EXTERN {PST_EXTERN_PROPID_BASE = 0x6700,};
enum MACRO_ProgramHid {ProgramHid = 3,ProgramShowed = 4,};
enum MACRO_QOS_CLASS0 {QOS_CLASS0 = 0x0,QOS_CLASS1 = 0x1,QOS_CLASS2 = 0x2,QOS_CLASS3 = 0x3,QOS_CLASS4 = 0x4,};
enum MACRO_RASBASEEND {RASBASEEND = 753,};
enum MACRO_RASPBDFLAG {RASPBDFLAG_PositionDlg = 0x1,RASPBDFLAG_ForceCloseOnDial = 0x2,RASPBDFLAG_NoUser = 0x10,RASPBDFLAG_UpdateDefaults = 0x80000000,};
enum MACRO_RASTERCAPS {RASTERCAPS = 38,};
enum MACRO_REGSTR_MAX {REGSTR_MAX_VALUE_LENGTH = 256,};
enum MACRO_REGSTR_VAL {REGSTR_VAL_TRUSTWARNINGLEVEL_TYPE = 1,REGSTR_VAL_SECURITYWARNONSEND_TYPE = 3,REGSTR_VAL_SECURITYWARNONSEND_DEF = 1,REGSTR_VAL_SECURITYWARNONSENDALWAYS_TYPE = 3,REGSTR_VAL_SECURITYWARNONSENDALWAYS_DEF = 1,REGSTR_VAL_SECURITYWARNONVIEW_TYPE = 3,REGSTR_VAL_SECURITYWARNONVIEW_DEF = 1,REGSTR_VAL_SECURITYALLOWCOOKIES_TYPE = 3,REGSTR_VAL_SECURITYALLOWCOOKIES_DEF = 1,REGSTR_VAL_SECURITYWARNONZONECROSSING_TYPE = 3,REGSTR_VAL_SECURITYWARNONZONECROSSING_DEF = 1,REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_TYPE = 3,REGSTR_VAL_SECURITYWARNONBADCERTVIEWING_DEF = 1,REGSTR_VAL_SECURITYWARNONBADCERTSENDING_TYPE = 3,REGSTR_VAL_SECURITYWARNONBADCERTSENDING_DEF = 1,REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_TYPE = 4,REGSTR_VAL_SECURITYDISABLECACHINGOFSSLPAGES_DEF = 0,REGSTR_VAL_SECURITYACTIVEX_TYPE = 3,REGSTR_VAL_SECURITYACTIVEX_DEF = 1,REGSTR_VAL_SECURITYACTICEXSCRIPTS_TYPE = 3,REGSTR_VAL_SECURITYACTICEXSCRIPTS_DEF = 1,REGSTR_VAL_SECURITYJAVA_TYPE = 3,REGSTR_VAL_SECURITYJAVA_DEF = 1,REGSTR_VAL_JAVAJIT_TYPE = 4,REGSTR_VAL_JAVAJIT_DEF = 0,REGSTR_VAL_JAVALOGGING_TYPE = 4,REGSTR_VAL_JAVALOGGING_DEF = 0,REGSTR_VAL_VISIBLEBANDS_TYPE = 4,REGSTR_VAL_VISIBLEBANDS_DEF = 7,};
enum MACRO_RES_UNUSED {RES_UNUSED_1 = 0x1,RES_FLUSH_CACHE = 0x2,RES_SERVICE = 0x4,};
enum MACRO_RTF_APPEND {RTF_APPEND_RTF_TEXT = 0x1,RTF_APPEND_PLAIN_TEXT = 0x0,RTF_APPEND_BEGIN = 0x2,RTF_APPEND_END = 0x0,};
enum MACRO_RT_VERSION {RT_VERSION = 16,RT_DLGINCLUDE = 17,RT_PLUGPLAY = 19,RT_VXD = 20,RT_ANICURSOR = 21,RT_ANIICON = 22,RT_HTML = 23,};
enum MACRO_SB_GETTEXT {SB_GETTEXT = 1026,SB_SETTEXT = 1025,SB_GETTEXTLENGTH = 1027,SB_SETTIPTEXT = 1040,SB_GETTIPTEXT = 1042,};
enum MACRO_SCRIPTINFO {SCRIPTINFO_IUNKNOWN = 0x1,SCRIPTINFO_ITYPEINFO = 0x2,SCRIPTINFO_ALL_FLAGS = 0x3,};
enum MACRO_SCRIPTITEM {SCRIPTITEM_ISVISIBLE = 0x2,SCRIPTITEM_ISSOURCE = 0x4,SCRIPTITEM_GLOBALMEMBERS = 0x8,SCRIPTITEM_ISPERSISTENT = 0x40,SCRIPTITEM_CODEONLY = 0x200,SCRIPTITEM_NOCODE = 0x400,SCRIPTITEM_ALL_FLAGS = 0x64E,};
enum MACRO_SCRIPTPROC {SCRIPTPROC_HOSTMANAGESSOURCE = 0x80,SCRIPTPROC_IMPLICIT_THIS = 0x100,SCRIPTPROC_IMPLICIT_PARENTS = 0x200,SCRIPTPROC_ALL_FLAGS = 0x380,};
enum MACRO_SCRIPTSTAT {SCRIPTSTAT_STATEMENT_COUNT = 1,SCRIPTSTAT_INSTRUCTION_COUNT = 2,SCRIPTSTAT_INTSTRUCTION_TIME = 3,SCRIPTSTAT_TOTAL_TIME = 4,};
enum MACRO_SCRIPTTEXT {SCRIPTTEXT_DELAYEXECUTION = 0x1,SCRIPTTEXT_ISVISIBLE = 0x2,SCRIPTTEXT_ISEXPRESSION = 0x20,SCRIPTTEXT_ISPERSISTENT = 0x40,SCRIPTTEXT_HOSTMANAGESSOURCE = 0x80,SCRIPTTEXT_ALL_FLAGS = 0xE3,};
enum MACRO_SCS_SETSTR {SCS_SETSTR = 9,SCS_CHANGEATTR = 18,SCS_CHANGECLAUSE = 36,SCS_SETRECONVERTSTRING = 65536,SCS_QUERYRECONVERTSTRING = 131072,};
enum MACRO_SC_MANAGER {SC_MANAGER_CONNECT = 0x1,SC_MANAGER_CREATE_SERVICE = 0x2,SC_MANAGER_ENUMERATE_SERVICE = 0x4,SC_MANAGER_LOCK = 0x8,SC_MANAGER_QUERY_LOCK_STATUS = 0x10,SC_MANAGER_MODIFY_BOOT_CONFIG = 0x20,SC_MANAGER_ALL_ACCESS = 0xF003F,};
enum MACRO_SEARCH_ALL {SEARCH_ALL = 0x0,SEARCH_PRIMARY = 0x1,SEARCH_ALTERNATE = 0x2,SEARCH_ALL_NO_SEQ = 0x4,SEARCH_PRI_NO_SEQ = 0x5,SEARCH_ALT_NO_SEQ = 0x6,};
enum MACRO_SERVER_ALL {SERVER_ALL_ACCESS = 983043,SERVER_READ = 131074,SERVER_WRITE = 131075,SERVER_EXECUTE = 131074,};
enum MACRO_SERVICE_NO {SERVICE_NO_CHANGE = 0xFFFFFFFF,SERVICE_ACTIVE = 0x1,SERVICE_INACTIVE = 0x2,SERVICE_STATE_ALL = 0x3,SERVICE_CONTROL_STOP = 0x1,SERVICE_CONTROL_PAUSE = 0x2,SERVICE_CONTROL_CONTINUE = 0x3,SERVICE_CONTROL_INTERROGATE = 0x4,SERVICE_CONTROL_SHUTDOWN = 0x5,SERVICE_CONTROL_PARAMCHANGE = 0x6,SERVICE_CONTROL_NETBINDADD = 0x7,SERVICE_CONTROL_NETBINDREMOVE = 0x8,SERVICE_CONTROL_NETBINDENABLE = 0x9,SERVICE_CONTROL_NETBINDDISABLE = 0xA,SERVICE_STOPPED = 0x1,SERVICE_START_PENDING = 0x2,SERVICE_STOP_PENDING = 0x3,SERVICE_RUNNING = 0x4,SERVICE_CONTINUE_PENDING = 0x5,SERVICE_PAUSE_PENDING = 0x6,SERVICE_PAUSED = 0x7,SERVICE_ACCEPT_STOP = 0x1,SERVICE_ACCEPT_PAUSE_CONTINUE = 0x2,SERVICE_ACCEPT_SHUTDOWN = 0x4,SERVICE_ACCEPT_PARAMCHANGE = 0x8,SERVICE_ACCEPT_NETBINDCHANGE = 0x10,};
enum MACRO_SERVICE_NT {SERVICE_NT_MAXTIME = 0xFFFF,SERVICE_RESRV_MASK = 0x1FFFF,SERVICE_MAXTIME = 0xFF,SERVICE_BASE = 0xBEA,SERVICE_UIC_NORMAL = 0x0,SERVICE_UIC_BADPARMVAL = 0xBEB,SERVICE_UIC_MISSPARM = 0xBEC,SERVICE_UIC_UNKPARM = 0xBED,SERVICE_UIC_RESOURCE = 0xBEE,SERVICE_UIC_CONFIG = 0xBEF,SERVICE_UIC_SYSTEM = 0xBF0,SERVICE_UIC_INTERNAL = 0xBF1,SERVICE_UIC_AMBIGPARM = 0xBF2,SERVICE_UIC_DUPPARM = 0xBF3,SERVICE_UIC_KILL = 0xBF4,SERVICE_UIC_EXEC = 0xBF5,SERVICE_UIC_SUBSERV = 0xBF6,SERVICE_UIC_CONFLPARM = 0xBF7,SERVICE_UIC_FILE = 0xBF8,SERVICE_UIC_M_NULL = 0x0,SERVICE_UIC_M_MEMORY = 0xBFE,SERVICE_UIC_M_DISK = 0xBFF,SERVICE_UIC_M_THREADS = 0xC00,SERVICE_UIC_M_PROCESSES = 0xC01,SERVICE_UIC_M_SECURITY = 0xC02,SERVICE_UIC_M_LANROOT = 0xC03,SERVICE_UIC_M_REDIR = 0xC04,SERVICE_UIC_M_SERVER = 0xC05,SERVICE_UIC_M_SEC_FILE_ERR = 0xC06,SERVICE_UIC_M_FILES = 0xC07,SERVICE_UIC_M_LOGS = 0xC08,SERVICE_UIC_M_LANGROUP = 0xC09,SERVICE_UIC_M_MSGNAME = 0xC0A,SERVICE_UIC_M_ANNOUNCE = 0xC0B,SERVICE_UIC_M_UAS = 0xC0C,SERVICE_UIC_M_SERVER_SEC_ERR = 0xC0D,SERVICE_UIC_M_WKSTA = 0xC0F,SERVICE_UIC_M_ERRLOG = 0xC10,SERVICE_UIC_M_FILE_UW = 0xC11,SERVICE_UIC_M_ADDPAK = 0xC12,SERVICE_UIC_M_LAZY = 0xC13,SERVICE_UIC_M_UAS_MACHINE_ACCT = 0xC14,SERVICE_UIC_M_UAS_SERVERS_NMEMB = 0xC15,SERVICE_UIC_M_UAS_SERVERS_NOGRP = 0xC16,SERVICE_UIC_M_UAS_INVALID_ROLE = 0xC17,SERVICE_UIC_M_NETLOGON_NO_DC = 0xC18,SERVICE_UIC_M_NETLOGON_DC_CFLCT = 0xC19,SERVICE_UIC_M_NETLOGON_AUTH = 0xC1A,SERVICE_UIC_M_UAS_PROLOG = 0xC1B,};
enum MACRO_SERVICE_UI {SERVICE_UI_ALWAYS = 0x2,SERVICE_UI_ALLOWED = 0x10,};
enum MACRO_SESSIONOBJ {SESSIONOBJ = 20,};
enum MACRO_SETCHARSET {SETCHARSET = 772,STRETCHBLT = 2048,};
enum MACRO_SETLINECAP {SETLINECAP = 21,};
enum MACRO_SHARE_TYPE {SHARE_TYPE_OLD = 0x1,SHARE_TYPE_NEW = 0x2,SHARE_TYPE_STATIC = 0x4,};
enum MACRO_SIMPLEBLOB {SIMPLEBLOB = 0x1,PUBLICKEYBLOB = 0x6,};
enum MACRO_SIZENORMAL {SIZENORMAL = 0,SIZEICONIC = 1,SIZEFULLSCREEN = 2,};
enum MACRO_SQLCRSBROL {SQLCRSBROL = 10087,};
enum MACRO_SQLCRSBUFR {SQLCRSBUFR = 10085,};
enum MACRO_SQLCRSVIEW {SQLCRSVIEW = 10084,};
enum MACRO_SQLEBSKERR {SQLEBSKERR = 10070,};
enum MACRO_SQLECONNFB {SQLECONNFB = 10110,};
enum MACRO_SQL_SERVER {SQL_SERVER = 2,GDK_SERVER = 3,};
enum MACRO_SRVCOLINFO {SRVCOLINFO = 165,};
enum MACRO_SRVCOLNAME {SRVCOLNAME = 160,};
enum MACRO_SRVCONTROL {SRVCONTROL = 174,};
enum MACRO_SRVDECIMAL {SRVDECIMAL = 55,};
enum MACRO_SRVNUMERIC {SRVNUMERIC = 63,};
enum MACRO_SRVTABNAME {SRVTABNAME = 164,};
enum MACRO_SRVVARCHAR {SRVVARCHAR = 39,};
enum MACRO_STATUS_VDM {STATUS_VDM_EVENT = 1073741829,};
enum MACRO_STREAM_SET {STREAM_SET_ENCRYPTION = 0x3,STREAM_CLEAR_ENCRYPTION = 0x4,};
enum MACRO_STRINGBIND {STRINGBIND = 10,};
enum MACRO_SUBMITFLAG {SUBMITFLAG_LOCKED = 0x1,SUBMITFLAG_PREPROCESS = 0x2,};
enum MACRO_SV_MAX_SRV {SV_MAX_SRV_HEUR_LEN = 32,SV_USERS_PER_LICENSE = 5,};
enum MACRO_SW_INVALID {SW_INVALID = 16,SW_DENORMAL = 524288,SW_ZERODIVIDE = 8,SW_OVERFLOW = 4,SW_UNDERFLOW = 2,SW_INEXACT = 1,SW_UNEMULATED = 64,SW_SQRTNEG = 128,SW_STACKOVERFLOW = 512,SW_STACKUNDERFLOW = 1024,};
enum MACRO_TABLE_SORT {TABLE_SORT_ASCEND = 0x0,TABLE_SORT_DESCEND = 0x1,TABLE_SORT_COMBINE = 0x2,};
enum MACRO_TC_NONCONF {TC_NONCONF_BORROW = 0,TC_NONCONF_SHAPE = 1,TC_NONCONF_DISCARD = 2,};
enum MACRO_TMENDRSCAN {TMENDRSCAN = 0x800000,};
enum MACRO_TMMULTIPLE {TMMULTIPLE = 0x400000,};
enum MACRO_TMONEPHASE {TMONEPHASE = 0x40000000,};
enum MACRO_TOKEN_USER {TOKEN_USER = 0x8,TOKEN_OR = 0x2,TOKEN_AND = 0x3,TOKEN_OPENPAREN = 0x4,TOKEN_CLOSEPAREN = 0x5,TOKEN_NOTIN = 0x20,TOKEN_OPERATOR = 0x2,TOKEN_PAREN = 0x4,};
enum MACRO_TOOLBUTTON {TOOLBUTTON_STDWIDTH = 24,TOOLBUTTON_STDHEIGHT = 22,TOOLBUTTON_STDIMAGEWIDTH = 16,TOOLBUTTON_STDIMAGEHEIGHT = 15,TOOLBUTTON_STD72WIDTH = 24,TOOLBUTTON_STD72HEIGHT = 16,TOOLBUTTON_STD72IMAGEWIDTH = 16,TOOLBUTTON_STD72IMAGEHEIGHT = 11,TOOLBUTTON_STD96WIDTH = 24,TOOLBUTTON_STD96HEIGHT = 22,TOOLBUTTON_STD96IMAGEWIDTH = 16,TOOLBUTTON_STD96IMAGEHEIGHT = 15,TOOLBUTTON_STD120WIDTH = 32,TOOLBUTTON_STD120HEIGHT = 31,TOOLBUTTON_STD120IMAGEWIDTH = 24,TOOLBUTTON_STD120IMAGEHEIGHT = 23,};
enum MACRO_TPSENTRIES {MIN_TPSENTRIES = 16,DEFAULT_TPSENTRIES = 64,MAX_TPSENTRIES = 256,};
enum MACRO_TRUSTERROR {TRUSTERROR_STEP_WVTPARAMS = 0,TRUSTERROR_STEP_FILEIO = 2,TRUSTERROR_STEP_SIP = 3,TRUSTERROR_STEP_SIPSUBJINFO = 5,TRUSTERROR_STEP_CATALOGFILE = 6,TRUSTERROR_STEP_CERTSTORE = 7,TRUSTERROR_STEP_MESSAGE = 8,TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9,TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10,TRUSTERROR_STEP_MSG_INNERCNT = 11,TRUSTERROR_STEP_MSG_STORE = 12,TRUSTERROR_STEP_MSG_SIGNERINFO = 13,TRUSTERROR_STEP_MSG_SIGNERCERT = 14,TRUSTERROR_STEP_MSG_CERTCHAIN = 15,TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16,TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17,TRUSTERROR_STEP_VERIFY_MSGHASH = 18,TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19,TRUSTERROR_STEP_FINAL_WVTINIT = 30,TRUSTERROR_STEP_FINAL_INITPROV = 31,TRUSTERROR_STEP_FINAL_OBJPROV = 32,TRUSTERROR_STEP_FINAL_SIGPROV = 33,TRUSTERROR_STEP_FINAL_CERTPROV = 34,TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35,TRUSTERROR_STEP_FINAL_POLICYPROV = 36,TRUSTERROR_STEP_FINAL_UIPROV = 37,TRUSTERROR_MAX_STEPS = 38,};
enum MACRO_UI_CURRENT {UI_CURRENT_PROVIDER_FIRST = 0x4,};
enum MACRO_UI_SERVICE {UI_SERVICE = 0x2,};
enum MACRO_VDMCONTEXT {VDMCONTEXT_i386 = 0x10000,VDMCONTEXT_i486 = 0x10000,VDMCONTEXT_CONTROL = 0x10001,VDMCONTEXT_INTEGER = 0x10002,VDMCONTEXT_SEGMENTS = 0x10004,VDMCONTEXT_FLOATING_POINT = 0x10008,VDMCONTEXT_DEBUG_REGISTERS = 0x10010,VDMCONTEXT_FULL = 0x10007,};
enum MACRO_WAIT_CHILD {WAIT_CHILD = 0,WAIT_GRANDCHILD = 1,};
enum MACRO_WAVEFORMAT {WAVEFORMAT_CANOPUS_ATRAC = 0x63,};
enum MACRO_WSABASEERR {WSABASEERR = 10000,};
enum MACRO_WSAEDISCON {WSAEDISCON = 10101,};
enum MACRO_WSAEISCONN {WSAEISCONN = 10056,};
enum MACRO_WSAENOBUFS {WSAENOBUFS = 10055,};
enum MACRO_WSAENOMORE {WSAENOMORE = 10102,};
enum MACRO_WSAEREMOTE {WSAEREMOTE = 10071,};
enum MACRO_WT_CURRENT {WT_CURRENT_VERSION = 0x200,WT_MAX_FUNC_NAME = 0x80,};
enum MACRO_X509_MULTI {X509_MULTI_BYTE_UINT = 38,X509_DSS_PUBLICKEY = 38,X509_DSS_PARAMETERS = 39,X509_DSS_SIGNATURE = 40,};
enum MACRO__FREEENTRY {_FREEENTRY = 0,_USEDENTRY = 1,};
enum MACRO__HEAPEMPTY {_HEAPEMPTY = -1,};
enum MACRO__P_NOWAITO {_P_NOWAITO = 3,_P_DETACH = 4,};
enum MACRO___REQUIRED {__REQUIRED_RPCNDR_H_VERSION__ = 440,};
enum MACRO___RPCPROXY {__RPCPROXY_H_VERSION__ = 450,};
enum MACRO_atpTriples {atpTriples = 0x0,atpString = 0x1,atpText = 0x2,};
enum MACRO_attDateEnd {attDateEnd = 0x30007,};
enum MACRO_attSentFor {attSentFor = 0x60001,};
enum MACRO_attSubject {attSubject = 0x18004,};
enum MACRO_dispidIsCC {dispidIsCC = 4017,};
enum MACRO_hrDiskFull {hrDiskFull = 0xC8000710,};
enum MACRO_hrNoBackup {hrNoBackup = 0xC8000208,};
enum MACRO_iTRUECOLOR {iTRUECOLOR = 16,};
enum MACRO_idsAppName {idsAppName = 1007,};
enum MACRO_idsIniFile {idsIniFile = 1001,};
enum MACRO_rightsNone {rightsNone = 0x0,rightsReadOnly = 0x1,};
typedef void  MAPIUNINITIALIZE();
typedef struct tagMCI_RECORD_PARMS MCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS MCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA MDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW MDICREATESTRUCTW;
typedef struct _46B8CD9DF897759D0306203A2121EA8B MENUITEMTEMPLATE;
typedef struct _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
typedef struct tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
typedef struct mode_def_overlay MODE_DEF_OVERLAY;
typedef struct _NET_DISPLAY_USER NET_DISPLAY_USER;
typedef struct tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
typedef struct tagNMDATETIMECHANGE NMDATETIMECHANGE;
typedef struct tagNMREBARCHILDSIZE NMREBARCHILDSIZE;
typedef struct tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;
typedef struct tagSTRINGEXSTRUCT *NPSTRINGEXSTRUCT;
typedef struct _NS_SERVICE_INFOA NS_SERVICE_INFOA;
typedef struct _NS_SERVICE_INFOW NS_SERVICE_INFOW;
enum NtmsBarCodeState {NTMS_BARCODESTATE_OK = 0x1,NTMS_BARCODESTATE_UNREADABLE = 0x2,};
enum NtmsMountOptions {NTMS_MOUNT_READ = 0x1,NTMS_MOUNT_WRITE = 0x2,NTMS_MOUNT_ERROR_NOT_AVAILABLE = 0x4,NTMS_MOUNT_ERROR_IF_UNAVAILABLE = 0x4,NTMS_MOUNT_ERROR_OFFLINE = 0x8,NTMS_MOUNT_ERROR_IF_OFFLINE = 0x8,NTMS_MOUNT_SPECIFIC_DRIVE = 0x10,NTMS_MOUNT_NOWAIT = 0x20,};
enum NtmsObjectsTypes {NTMS_UNKNOWN = 0x0,NTMS_OBJECT = 0x1,NTMS_CHANGER = 0x2,NTMS_CHANGER_TYPE = 0x3,NTMS_COMPUTER = 0x4,NTMS_DRIVE = 0x5,NTMS_DRIVE_TYPE = 0x6,NTMS_IEDOOR = 0x7,NTMS_IEPORT = 0x8,NTMS_LIBRARY = 0x9,NTMS_LIBREQUEST = 0xA,NTMS_LOGICAL_MEDIA = 0xB,NTMS_MEDIA_POOL = 0xC,NTMS_MEDIA_TYPE = 0xD,NTMS_PARTITION = 0xE,NTMS_PHYSICAL_MEDIA = 0xF,NTMS_STORAGESLOT = 0x10,NTMS_OPREQUEST = 0x11,NTMS_NUMBER_OF_OBJECT_TYPES = 0x12,};
enum NtmsOpreqCommand {NTMS_OPREQ_UNKNOWN = 0x0,NTMS_OPREQ_NEWMEDIA = 0x1,NTMS_OPREQ_CLEANER = 0x2,NTMS_OPREQ_DEVICESERVICE = 0x3,NTMS_OPREQ_MOVEMEDIA = 0x4,NTMS_OPREQ_MESSAGE = 0x5,};
enum NtmsPortPosition {NTMS_PORTPOSITION_UNKNOWN = 0x0,NTMS_PORTPOSITION_EXTENDED = 0x1,NTMS_PORTPOSITION_RETRACTED = 0x2,};
typedef struct tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
typedef struct tagOLEUICHANGEICONA OLEUICHANGEICONA;
typedef struct tagOLEUICHANGEICONW OLEUICHANGEICONW;
typedef struct tagOLEUIPASTEENTRYA OLEUIPASTEENTRYA;
typedef struct tagOLEUIPASTEENTRYW OLEUIPASTEENTRYW;
typedef int OLE_XSIZE_PIXELS;
typedef int OLE_YSIZE_PIXELS;
typedef struct oligsmwaveformat_tag OLIGSMWAVEFORMAT;
typedef struct olioprwaveformat_tag OLIOPRWAVEFORMAT;
typedef struct olisbcwaveformat_tag OLISBCWAVEFORMAT;
typedef struct _OSVERSIONINFOEXA OSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW OSVERSIONINFOEXW;
typedef struct tACMSTREAMHEADER *PACMSTREAMHEADER;
typedef struct _ads_object_info *PADS_OBJECT_INFO;
typedef struct _AE_RESACCESSREJ *PAE_RESACCESSREJ;
typedef struct _CERT_EXTENSIONS *PCERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE *PCERT_NAME_VALUE;
typedef struct _CHANGER_ELEMENT *PCHANGER_ELEMENT;
typedef struct _CHARDEVQ_INFO_0 *PCHARDEVQ_INFO_0;
typedef struct _CHARDEVQ_INFO_1 *PCHARDEVQ_INFO_1;
typedef struct CLUSPROP_BINARY *PCLUSPROP_BINARY;
typedef union CLUSPROP_SYNTAX *PCLUSPROP_SYNTAX;
typedef struct CLUS_FTSET_INFO *PCLUS_FTSET_INFO;
typedef struct tagCOLORADJUSTMENT *PCOLORADJUSTMENT;
typedef struct tagCOMBOBOXEXITEMA *PCOMBOBOXEXITEMA;
typedef struct tagCOMBOBOXEXITEMW *PCOMBOBOXEXITEMW;
typedef struct tagCOMPOSITIONFORM *PCOMPOSITIONFORM;
typedef IConnectionPoint *PCONNECTIONPOINT;
typedef struct _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;
typedef struct _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;
typedef struct DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
typedef struct _DSKTLSYSTEMTIME *PDSKTLSYSTEMTIME;
typedef struct tagEMRSELECTOBJECT *PEMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN *PEMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL *PEMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL *PEMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT *PEMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;
typedef IEnumConnections *PENUMCONNECTIONS;
typedef struct tagENUMTEXTMETRICA *PENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *PENUMTEXTMETRICW;
typedef struct _PERF_OBJECT_TYPE PERF_OBJECT_TYPE;
typedef IFileSinkFilter2 *PFILESINKFILTER2;
typedef void (*PFN_CPD_MEM_FREE)(void *pvMem2Free);
typedef struct _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;
typedef struct _tagGET_SET_SYMPATH *PGET_SET_SYMPATH;
typedef struct _GROUP_INFO_1002 *PGROUP_INFO_1002;
typedef struct _GROUP_INFO_1005 *PGROUP_INFO_1005;
typedef struct phoneextensionid_tag PHONEEXTENSIONID;
typedef struct _HTTP_FILTER_LOG *PHTTP_FILTER_LOG;
typedef IAMExtTransport *PIAMEXTTRANSPORT;
typedef struct _IMAGEHLP_MODULE *PIMAGEHLP_MODULE;
typedef struct _IMAGEHLP_SYMBOL *PIMAGEHLP_SYMBOL;
typedef struct _IPX_GLOBAL_INFO *PIPX_GLOBAL_INFO;
typedef struct _IPX_NETNUM_DATA *PIPX_NETNUM_DATA;
typedef struct tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;
typedef struct _D0C2582348DF16EE31650672742EA602 *PKSMULTIPLE_ITEM;
typedef struct _92AD7B8CF7589C2FF45E6AC6DF63FADA *PKSSTREAM_HEADER;
typedef union _5F879E5D7F7731C83E6AA76CA640BB1B *PLLC_ADAPTER_LOG;
typedef struct _LLC_XMIT_BUFFER *PLLC_XMIT_BUFFER;
typedef struct tagLOCALESIGNATURE *PLOCALESIGNATURE;
typedef struct tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;
typedef struct tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;
typedef struct _METADATA_RECORD *PMETADATA_RECORD;
typedef struct _MIDL_ES_MESSAGE *PMIDL_ES_MESSAGE;
typedef struct _MONITOR_INFO_1A *PMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *PMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *PMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *PMONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;
typedef struct MS_ADDINFO_BLOB_ *PMS_ADDINFO_BLOB;
typedef struct MS_ADDINFO_FLAT_ *PMS_ADDINFO_FLAT;
typedef struct _NETLOGON_INFO_1 *PNETLOGON_INFO_1;
typedef struct _NETLOGON_INFO_2 *PNETLOGON_INFO_2;
typedef struct _NETLOGON_INFO_3 *PNETLOGON_INFO_3;
typedef struct _NETLOGON_INFO_4 *PNETLOGON_INFO_4;
typedef struct _EAF9C7AE235510435B672EB36E720462 *PNMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D *PNMCBEDRAGBEGINW;
typedef struct _NOTIFYICONDATAA *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW *PNOTIFYICONDATAW;
typedef struct _NTFS_STATISTICS *PNTFS_STATISTICS;
typedef struct tagOLEUIEDITLINKSA *POLEUIEDITLINKSA;
typedef struct tagOLEUIEDITLINKSW *POLEUIEDITLINKSW;
typedef struct tagOLEUIGNRLPROPSA *POLEUIGNRLPROPSA;
typedef struct tagOLEUIGNRLPROPSW *POLEUIGNRLPROPSW;
typedef struct tagOLEUILINKPROPSA *POLEUILINKPROPSA;
typedef struct tagOLEUILINKPROPSW *POLEUILINKPROPSW;
typedef struct tagOLEUIVIEWPROPSA *POLEUIVIEWPROPSA;
typedef struct tagOLEUIVIEWPROPSW *POLEUIVIEWPROPSW;
typedef struct _PACKEDEVENTINFO *PPACKEDEVENTINFO;
typedef struct _PATHNAME_BUFFER *PPATHNAME_BUFFER;
typedef struct _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;
typedef struct _POLICY_EFS_INFO *PPOLICY_EFS_INFO;
typedef struct _PRINTER_INFO_1A *PPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *PPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *PPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *PPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *PPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *PPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *PPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *PPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *PPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *PPRINTER_INFO_7W;
typedef struct _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING *PRECONVERTSTRING;
typedef IReferenceClock2 *PREFERENCECLOCK2;
typedef struct _PRINT_OTHER_INFO PRINT_OTHER_INFO;
typedef struct _RIP_GLOBAL_INFO *PRIP_GLOBAL_INFO;
typedef struct _PROPSHEETHEADERA PROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW PROPSHEETHEADERW;
typedef struct _PROVIDOR_INFO_1A PROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W PROVIDOR_INFO_1W;
typedef struct _PROV_ENUMALGS_EX PROV_ENUMALGS_EX;
typedef struct _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;
typedef struct _SAP_GLOBAL_INFO *PSAP_GLOBAL_INFO;
typedef struct _SECURITY_STRING *PSECURITY_STRING;
typedef struct _SENDCMDINPARAMS *PSENDCMDINPARAMS;
typedef struct _SERVER_INFO_100 *PSERVER_INFO_100;
typedef struct _SERVER_INFO_101 *PSERVER_INFO_101;
typedef struct _SERVER_INFO_102 *PSERVER_INFO_102;
typedef struct _SERVER_INFO_402 *PSERVER_INFO_402;
typedef struct _SERVER_INFO_403 *PSERVER_INFO_403;
typedef struct _SERVER_INFO_502 *PSERVER_INFO_502;
typedef struct _SERVER_INFO_503 *PSERVER_INFO_503;
typedef struct _SERVER_INFO_598 *PSERVER_INFO_598;
typedef struct _SERVER_INFO_599 *PSERVER_INFO_599;
typedef struct _SERVICE_ADDRESS *PSERVICE_ADDRESS;
typedef struct _SESSION_INFO_10 *PSESSION_INFO_10;
typedef struct _SHARE_INFO_1004 *PSHARE_INFO_1004;
typedef struct _SHARE_INFO_1005 *PSHARE_INFO_1005;
typedef struct _SHARE_INFO_1006 *PSHARE_INFO_1006;
typedef struct _SHARE_INFO_1007 *PSHARE_INFO_1007;
typedef struct _SHARE_INFO_1501 *PSHARE_INFO_1501;
typedef struct _SP_DEVINFO_DATA *PSP_DEVINFO_DATA;
typedef struct _TAPE_STATISTICS *PTAPE_STATISTICS;
typedef struct _TRUSTEE_ACCESSA *PTRUSTEE_ACCESSA;
typedef struct _TRUSTEE_ACCESSW *PTRUSTEE_ACCESSW;
typedef struct __MIDL_IH26XEncoderControl_0001 *PTR_ENC_CMP_DATA;
typedef struct __MIDL_IH26XRTPControl_0001 *PTR_ENC_RTP_DATA;
typedef struct _PUBLISHEDAPPINFO PUBLISHEDAPPINFO;
typedef struct tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;
typedef struct _USER_OTHER_INFO *PUSER_OTHER_INFO;
typedef struct _VTableProvStruc *PVTableProvStruc;
typedef struct _WKSTA_INFO_1010 *PWKSTA_INFO_1010;
typedef struct _WKSTA_INFO_1011 *PWKSTA_INFO_1011;
typedef struct _WKSTA_INFO_1012 *PWKSTA_INFO_1012;
typedef struct _WKSTA_INFO_1013 *PWKSTA_INFO_1013;
typedef struct _WKSTA_INFO_1018 *PWKSTA_INFO_1018;
typedef struct _WKSTA_INFO_1023 *PWKSTA_INFO_1023;
typedef struct _WKSTA_INFO_1027 *PWKSTA_INFO_1027;
typedef struct _WKSTA_INFO_1028 *PWKSTA_INFO_1028;
typedef struct _WKSTA_INFO_1032 *PWKSTA_INFO_1032;
typedef struct _WKSTA_INFO_1033 *PWKSTA_INFO_1033;
typedef struct _WKSTA_INFO_1041 *PWKSTA_INFO_1041;
typedef struct _WKSTA_INFO_1042 *PWKSTA_INFO_1042;
typedef struct _WKSTA_INFO_1043 *PWKSTA_INFO_1043;
typedef struct _WKSTA_INFO_1044 *PWKSTA_INFO_1044;
typedef struct _WKSTA_INFO_1045 *PWKSTA_INFO_1045;
typedef struct _WKSTA_INFO_1046 *PWKSTA_INFO_1046;
typedef struct _WKSTA_INFO_1047 *PWKSTA_INFO_1047;
typedef struct _WKSTA_INFO_1048 *PWKSTA_INFO_1048;
typedef struct _WKSTA_INFO_1049 *PWKSTA_INFO_1049;
typedef struct _WKSTA_INFO_1050 *PWKSTA_INFO_1050;
typedef struct _WKSTA_INFO_1051 *PWKSTA_INFO_1051;
typedef struct _WKSTA_INFO_1052 *PWKSTA_INFO_1052;
typedef struct _WKSTA_INFO_1053 *PWKSTA_INFO_1053;
typedef struct _WKSTA_INFO_1054 *PWKSTA_INFO_1054;
typedef struct _WKSTA_INFO_1055 *PWKSTA_INFO_1055;
typedef struct _WKSTA_INFO_1056 *PWKSTA_INFO_1056;
typedef struct _WKSTA_INFO_1057 *PWKSTA_INFO_1057;
typedef struct _WKSTA_INFO_1058 *PWKSTA_INFO_1058;
typedef struct _WKSTA_INFO_1059 *PWKSTA_INFO_1059;
typedef struct _WKSTA_INFO_1060 *PWKSTA_INFO_1060;
typedef struct _WKSTA_INFO_1061 *PWKSTA_INFO_1061;
typedef struct _WKSTA_INFO_1062 *PWKSTA_INFO_1062;
typedef struct _WSANSClassInfoA *PWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *PWSANSCLASSINFOW;
typedef struct _WSH_LOOKUP_NAME *PWSH_LOOKUP_NAME;
typedef struct _X509Certificate *PX509Certificate;
typedef struct _tagREADCONTROLSPACE READCONTROLSPACE;
typedef struct receive_allocate RECEIVE_ALLOCATE;
typedef struct receive_and_post RECEIVE_AND_POST;
typedef struct receive_and_wait RECEIVE_AND_WAIT;
typedef struct receive_log_data RECEIVE_LOG_DATA;
typedef struct _REPL_EDIR_INFO_0 REPL_EDIR_INFO_0;
typedef struct _REPL_EDIR_INFO_1 REPL_EDIR_INFO_1;
typedef struct _REPL_EDIR_INFO_2 REPL_EDIR_INFO_2;
typedef struct _REPL_IDIR_INFO_0 REPL_IDIR_INFO_0;
typedef struct _REPL_IDIR_INFO_1 REPL_IDIR_INFO_1;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _3EC5757393EE7828D79CED73ACE876F0 RPC_IF_ID_VECTOR;
typedef struct _RPC_SECURITY_QOS RPC_SECURITY_QOS;
typedef struct _AD47B7B6770F26FF00FF8EF46A9765CE RPC_STATS_VECTOR;
typedef struct _RSVP_STATUS_INFO RSVP_STATUS_INFO;
enum RecordStatusEnum {adRecOK = 0x0,adRecNew = 0x1,adRecModified = 0x2,adRecDeleted = 0x4,adRecUnmodified = 0x8,adRecInvalid = 0x10,adRecMultipleChanges = 0x40,adRecPendingChanges = 0x80,adRecCanceled = 0x100,adRecCantRelease = 0x400,adRecConcurrencyViolation = 0x800,adRecIntegrityViolation = 0x1000,adRecMaxChangesExceeded = 0x2000,adRecObjectOpen = 0x4000,adRecOutOfMemory = 0x8000,adRecPermissionDenied = 0x10000,adRecSchemaViolation = 0x20000,adRecDBDeleted = 0x40000,};
enum RefreshConstants {REFRESH_NORMAL = 0x0,REFRESH_IFEXPIRED = 0x1,REFRESH_COMPLETELY = 0x3,};
typedef struct tagRemHMETAFILEPICT RemHMETAFILEPICT;
typedef struct _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
typedef struct _SCARD_IO_REQUEST SCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 SCARD_T0_COMMAND;
typedef struct _D26D25374C75FEF3AD181CCFA77BD37F SCARD_T0_REQUEST;
typedef struct _8B9777916333A4B8A3A60FA8F93F002E SCARD_T1_REQUEST;
typedef struct _SECURITY_MESSAGE SECURITY_MESSAGE;
typedef struct _SENDCMDOUTPARAMS SENDCMDOUTPARAMS;
typedef struct _SERVER_INFO_1005 SERVER_INFO_1005;
typedef struct _SERVER_INFO_1010 SERVER_INFO_1010;
typedef struct _SERVER_INFO_1016 SERVER_INFO_1016;
typedef struct _SERVER_INFO_1017 SERVER_INFO_1017;
typedef struct _SERVER_INFO_1018 SERVER_INFO_1018;
typedef struct _SERVER_INFO_1107 SERVER_INFO_1107;
typedef struct _SERVER_INFO_1501 SERVER_INFO_1501;
typedef struct _SERVER_INFO_1502 SERVER_INFO_1502;
typedef struct _SERVER_INFO_1503 SERVER_INFO_1503;
typedef struct _SERVER_INFO_1506 SERVER_INFO_1506;
typedef struct _SERVER_INFO_1509 SERVER_INFO_1509;
typedef struct _SERVER_INFO_1510 SERVER_INFO_1510;
typedef struct _SERVER_INFO_1511 SERVER_INFO_1511;
typedef struct _SERVER_INFO_1512 SERVER_INFO_1512;
typedef struct _SERVER_INFO_1513 SERVER_INFO_1513;
typedef struct _SERVER_INFO_1514 SERVER_INFO_1514;
typedef struct _SERVER_INFO_1515 SERVER_INFO_1515;
typedef struct _SERVER_INFO_1516 SERVER_INFO_1516;
typedef struct _SERVER_INFO_1518 SERVER_INFO_1518;
typedef struct _SERVER_INFO_1520 SERVER_INFO_1520;
typedef struct _SERVER_INFO_1521 SERVER_INFO_1521;
typedef struct _SERVER_INFO_1522 SERVER_INFO_1522;
typedef struct _SERVER_INFO_1523 SERVER_INFO_1523;
typedef struct _SERVER_INFO_1524 SERVER_INFO_1524;
typedef struct _SERVER_INFO_1525 SERVER_INFO_1525;
typedef struct _SERVER_INFO_1528 SERVER_INFO_1528;
typedef struct _SERVER_INFO_1529 SERVER_INFO_1529;
typedef struct _SERVER_INFO_1530 SERVER_INFO_1530;
typedef struct _SERVER_INFO_1533 SERVER_INFO_1533;
typedef struct _SERVER_INFO_1534 SERVER_INFO_1534;
typedef struct _SERVER_INFO_1535 SERVER_INFO_1535;
typedef struct _SERVER_INFO_1536 SERVER_INFO_1536;
typedef struct _SERVER_INFO_1537 SERVER_INFO_1537;
typedef struct _SERVER_INFO_1538 SERVER_INFO_1538;
typedef struct _SERVER_INFO_1539 SERVER_INFO_1539;
typedef struct _SERVER_INFO_1540 SERVER_INFO_1540;
typedef struct _SERVER_INFO_1541 SERVER_INFO_1541;
typedef struct _SERVER_INFO_1542 SERVER_INFO_1542;
typedef struct _SERVER_INFO_1543 SERVER_INFO_1543;
typedef struct _SERVER_INFO_1544 SERVER_INFO_1544;
typedef struct _SERVER_INFO_1545 SERVER_INFO_1545;
typedef struct _SERVER_INFO_1546 SERVER_INFO_1546;
typedef struct _SERVER_INFO_1547 SERVER_INFO_1547;
typedef struct _SERVER_INFO_1548 SERVER_INFO_1548;
typedef struct _SERVER_INFO_1549 SERVER_INFO_1549;
typedef struct _SERVER_INFO_1550 SERVER_INFO_1550;
typedef struct _SERVER_INFO_1552 SERVER_INFO_1552;
typedef struct _SERVER_INFO_1553 SERVER_INFO_1553;
typedef struct _SERVER_INFO_1554 SERVER_INFO_1554;
typedef struct _SERVER_INFO_1555 SERVER_INFO_1555;
typedef struct _SERVER_INFO_1556 SERVER_INFO_1556;
typedef struct _SERVER_INFO_1557 SERVER_INFO_1557;
typedef struct _SERVER_INFO_1560 SERVER_INFO_1560;
typedef struct _SERVER_INFO_1561 SERVER_INFO_1561;
typedef struct _SERVER_INFO_1562 SERVER_INFO_1562;
typedef struct _SERVER_INFO_1563 SERVER_INFO_1563;
typedef struct _SERVER_INFO_1564 SERVER_INFO_1564;
typedef struct _SERVER_INFO_1565 SERVER_INFO_1565;
typedef struct _SERVER_INFO_1566 SERVER_INFO_1566;
typedef struct _SERVER_INFO_1567 SERVER_INFO_1567;
typedef struct _SERVER_INFO_1568 SERVER_INFO_1568;
typedef struct _SERVER_INFO_1569 SERVER_INFO_1569;
typedef struct _SERVER_INFO_1570 SERVER_INFO_1570;
typedef struct _SERVER_INFO_1571 SERVER_INFO_1571;
typedef struct _SERVER_INFO_1572 SERVER_INFO_1572;
typedef struct _SERVER_INFO_1573 SERVER_INFO_1573;
typedef struct _SERVER_INFO_1574 SERVER_INFO_1574;
typedef struct _SERVER_INFO_1575 SERVER_INFO_1575;
typedef struct _SERVER_INFO_1576 SERVER_INFO_1576;
typedef struct _SERVER_INFO_1577 SERVER_INFO_1577;
typedef struct _SERVER_INFO_1578 SERVER_INFO_1578;
typedef struct _SERVER_INFO_1579 SERVER_INFO_1579;
typedef struct _SERVER_INFO_1580 SERVER_INFO_1580;
typedef struct _SERVER_INFO_1581 SERVER_INFO_1581;
typedef struct _SERVER_INFO_1582 SERVER_INFO_1582;
typedef struct _SERVER_INFO_1583 SERVER_INFO_1583;
typedef struct _SERVER_INFO_1584 SERVER_INFO_1584;
typedef struct _SERVER_INFO_1585 SERVER_INFO_1585;
typedef struct _SERVER_INFO_1586 SERVER_INFO_1586;
typedef struct _SERVER_INFO_1587 SERVER_INFO_1587;
typedef struct _SERVER_INFO_1588 SERVER_INFO_1588;
typedef struct _SERVER_INFO_1589 SERVER_INFO_1589;
typedef struct _SERVER_INFO_1590 SERVER_INFO_1590;
typedef struct _SERVER_INFO_1591 SERVER_INFO_1591;
typedef struct _SERVER_INFO_1592 SERVER_INFO_1592;
typedef struct _SERVER_INFO_1593 SERVER_INFO_1593;
typedef struct _SERVER_INFO_1594 SERVER_INFO_1594;
typedef struct _SERVER_INFO_1595 SERVER_INFO_1595;
typedef struct _SERVER_INFO_1596 SERVER_INFO_1596;
typedef struct _SESSION_INFO_502 SESSION_INFO_502;
typedef struct sonarcwaveformat_tag SONARCWAVEFORMAT;
typedef struct srv_login_oldtds SRV_LOGIN_OLDTDS;
typedef struct _SSizeRestriction SSizeRestriction;
typedef struct _tagSubscriptionInfo SUBSCRIPTIONINFO;
enum SUBSCRIPTIONTYPE {SUBSTYPE_URL = 0x0,SUBSTYPE_CHANNEL = 0x1,SUBSTYPE_DESKTOPURL = 0x2,SUBSTYPE_EXTERNAL = 0x3,SUBSTYPE_DESKTOPCHANNEL = 0x4,};
typedef struct _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
typedef struct _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
struct ScriptingContext;
typedef struct _SecurityUserData SecurityUserData;
enum StringFormatEnum {adClipString = 0x2,};
typedef struct _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
typedef struct tagTIMESTAMP_STRUCT TIMESTAMP_STRUCT;
typedef struct _TIME_OF_DAY_INFO TIME_OF_DAY_INFO;
typedef struct _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS TOKEN_STATISTICS;
typedef struct translation_info TRANSLATION_INFO;
typedef struct _E5266EB545CAD3D38D115197841707E4 ThreadEntryFrame;
typedef struct _vidcapinfolist VIDCAP_INFO_LIST;
typedef struct tagVIDEOINFOHEADER2 VIDEOINFOHEADER2;
typedef struct wavefilter_volume_tag VOLUMEWAVEFILTER;
typedef struct tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
typedef struct _WIN32_FIND_DATAA WIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW WIN32_FIND_DATAW;
typedef struct _WLX_PROFILE_V1_0 WLX_PROFILE_V1_0;
typedef struct _WLX_PROFILE_V2_0 WLX_PROFILE_V2_0;
typedef struct _WSANETWORKEVENTS WSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN WSAPROTOCOLCHAIN;
typedef struct _WSH_LOOKUP_ZONES WSH_LOOKUP_ZONES;
typedef int (*_CRT_REPORT_HOOK)(int, char *, int *);
enum _D3DTEXTUREBLEND {D3DTBLEND_DECAL = 0x1,D3DTBLEND_MODULATE = 0x2,D3DTBLEND_DECALALPHA = 0x3,D3DTBLEND_MODULATEALPHA = 0x4,D3DTBLEND_DECALMASK = 0x5,D3DTBLEND_MODULATEMASK = 0x6,D3DTBLEND_COPY = 0x7,D3DTBLEND_ADD = 0x8,D3DTBLEND_FORCE_DWORD = 0x7FFFFFFF,};
enum _DtcLu_Xln_Error {DTCLUXLNERROR_PROTOCOL = 0x1,DTCLUXLNERROR_LOGNAMEMISMATCH = 0x2,DTCLUXLNERROR_COLDWARMMISMATCH = 0x3,};
enum _LLC_FRAME_TYPES {LLC_DIRECT_TRANSMIT = 0x0,LLC_DIRECT_MAC = 0x2,LLC_I_FRAME = 0x4,LLC_UI_FRAME = 0x6,LLC_XID_COMMAND_POLL = 0x8,LLC_XID_COMMAND_NOT_POLL = 0xA,LLC_XID_RESPONSE_FINAL = 0xC,LLC_XID_RESPONSE_NOT_FINAL = 0xE,LLC_TEST_RESPONSE_FINAL = 0x10,LLC_TEST_RESPONSE_NOT_FINAL = 0x12,LLC_DIRECT_8022 = 0x14,LLC_TEST_COMMAND_POLL = 0x16,LLC_DIRECT_ETHERNET_TYPE = 0x18,LLC_LAST_FRAME_TYPE = 0x1A,LLC_FIRST_ETHERNET_TYPE = 0x5DD,};
enum _RPC_ASYNC_EVENT {RpcCallComplete = 0x0,RpcSendComplete = 0x1,RpcReceiveComplete = 0x2,};
struct _SECURITY_STRING {unsigned short Length;unsigned short MaximumLength;unsigned short *Buffer;};
enum _WOW_HANDLE_TYPE {WOW_TYPE_HWND = 0x0,WOW_TYPE_HMENU = 0x1,WOW_TYPE_HDWP = 0x2,WOW_TYPE_HDROP = 0x3,WOW_TYPE_HDC = 0x4,WOW_TYPE_HFONT = 0x5,WOW_TYPE_HMETAFILE = 0x6,WOW_TYPE_HRGN = 0x7,WOW_TYPE_HBITMAP = 0x8,WOW_TYPE_HBRUSH = 0x9,WOW_TYPE_HPALETTE = 0xA,WOW_TYPE_HPEN = 0xB,WOW_TYPE_HACCEL = 0xC,WOW_TYPE_HTASK = 0xD,WOW_TYPE_FULLHWND = 0xE,};
struct link_def_overlay {unsigned int link_def_entry_len;unsigned char link_name[8];unsigned char adj_fq_cp_name[17];unsigned char adj_node_type;unsigned char dlc_name[8];unsigned char adapter_num;unsigned char dest_addr_len;unsigned char dest_addr[32];unsigned char cp_cp_sess_spt;unsigned char preferred_nn_server;unsigned char auto_act_link;unsigned char tg_number;unsigned char lim_res;unsigned char solicit_sscp_session;unsigned char initself;unsigned char bind_support;unsigned char ls_role;unsigned char line_type;unsigned int eff_capacity;unsigned char conn_cost;unsigned char byte_cost;unsigned char propagation_delay;unsigned char user_def_1;unsigned char user_def_2;unsigned char user_def_3;unsigned char security;unsigned char reserv;};
typedef struct _8A6C4411A6AFE08051239E9D0E609899 *lpMapiFileTagExt;
struct lu_0_3_info_sect {unsigned int lu_0_3_init_sect_len;unsigned short num_lu_0_3s;};
struct lu_def_info_sect {unsigned int lu_def_init_sect_len;unsigned short num_lu_def;unsigned short total_lu_def;};
struct mode_def_overlay {unsigned int mode_def_entry_len;unsigned char cos_name[8];unsigned char mode_name[8];unsigned short reserv3;unsigned short rusize_upper;unsigned char rcv_window;unsigned char default_ru_size;unsigned short max_neg_sess_lim;unsigned short curr_sess_lim;unsigned short min_win_lim;};
struct receive_allocate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_name[64];unsigned char tp_id[8];unsigned int conv_id;unsigned char sync_level;unsigned char conv_type;unsigned char user_id[10];unsigned char lu_alias[8];unsigned char plu_alias[8];unsigned char mode_name[8];unsigned char reserv3[2];unsigned int conv_group_id;unsigned char fqplu_name[17];unsigned char reserv4[5];};
struct receive_and_post {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char fill;unsigned char rts_rcvd;unsigned char reserv4;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char *sema;unsigned char reserv5;};
struct receive_and_wait {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short what_rcvd;unsigned char rtn_status;unsigned char fill;unsigned char rts_rcvd;unsigned char reserv4;unsigned short max_len;unsigned short dlen;unsigned char *dptr;unsigned char reserv5[5];};
struct receive_log_data {unsigned short opcode;unsigned char opext;unsigned char reserv1;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short log_dlen;unsigned char *log_dptr;};
enum tagACTIVATEFLAGS {ACTIVATE_WINDOWLESS = 0x1,};
enum tagDOCHOSTUIFLAG {DOCHOSTUIFLAG_DIALOG = 0x1,DOCHOSTUIFLAG_DISABLE_HELP_MENU = 0x2,DOCHOSTUIFLAG_NO3DBORDER = 0x4,DOCHOSTUIFLAG_SCROLL_NO = 0x8,DOCHOSTUIFLAG_DISABLE_SCRIPT_INACTIVE = 0x10,DOCHOSTUIFLAG_OPENNEWWIN = 0x20,DOCHOSTUIFLAG_DISABLE_OFFSCREEN = 0x40,DOCHOSTUIFLAG_FLAT_SCROLLBAR = 0x80,DOCHOSTUIFLAG_DIV_BLOCKDEFAULT = 0x100,DOCHOSTUIFLAG_ACTIVATE_CLIENTHIT_ONLY = 0x200,DOCHOSTUIFLAG_DISABLE_COOKIE = 0x400,};
enum tagDVD_DISC_SIDE {DVD_SIDE_A = 0x1,DVD_SIDE_B = 0x2,};
enum tagDVD_FRAMERATE {DVD_FPS_25 = 0x1,DVD_FPS_30NonDrop = 0x3,};
enum tagIFILTER_FLAGS {IFILTER_FLAGS_OLE_PROPERTIES = 0x1,};
enum tagINSTALLOGMODE {INSTALLLOGMODE_OUTOFMEMORY = 0x1,INSTALLLOGMODE_ERROR = 0x2,INSTALLLOGMODE_WARNING = 0x4,INSTALLLOGMODE_USER = 0x8,INSTALLLOGMODE_INFO = 0x10,INSTALLLOGMODE_DIAGNOSTIC = 0x20,INSTALLLOGMODE_COMMONDATA = 0x40,INSTALLLOGMODE_RESERVED = 0x80,INSTALLLOGMODE_ACTIONSTART = 0x100,INSTALLLOGMODE_ACTIONDATA = 0x200,INSTALLLOGMODE_PROPERTYDUMP = 0x400,};
typedef struct tagPROPVARIANT tagMQPROPVARIANT;
enum tagOLEGETMONIKER {OLEGETMONIKER_ONLYIFTHERE = 0x1,OLEGETMONIKER_FORCEASSIGN = 0x2,OLEGETMONIKER_UNASSIGN = 0x3,OLEGETMONIKER_TEMPFORUSER = 0x4,};
enum tagOLEVERBATTRIB {OLEVERBATTRIB_NEVERDIRTIES = 0x1,OLEVERBATTRIB_ONCONTAINERMENU = 0x2,};
enum tagPROPBAG2_TYPE {PROPBAG2_TYPE_UNDEFINED = 0x0,PROPBAG2_TYPE_DATA = 0x1,PROPBAG2_TYPE_URL = 0x2,PROPBAG2_TYPE_OBJECT = 0x3,PROPBAG2_TYPE_STREAM = 0x4,PROPBAG2_TYPE_STORAGE = 0x5,PROPBAG2_TYPE_MONIKER = 0x6,};
enum tagRASPROJECTION {RASP_Amb = 0x10000,RASP_PppNbf = 0x803F,RASP_PppIpx = 0x802B,RASP_PppIp = 0x8021,RASP_PppLcp = 0xC021,RASP_Slip = 0x20000,};
enum tagREINSTALLMODE {REINSTALLMODE_REPAIR = 0x1,REINSTALLMODE_FILEMISSING = 0x2,REINSTALLMODE_FILEOLDERVERSION = 0x4,REINSTALLMODE_FILEEQUALVERSION = 0x8,REINSTALLMODE_FILEEXACT = 0x10,REINSTALLMODE_FILEVERIFY = 0x20,REINSTALLMODE_FILEREPLACE = 0x40,REINSTALLMODE_MACHINEDATA = 0x80,REINSTALLMODE_USERDATA = 0x100,REINSTALLMODE_SHORTCUT = 0x200,};
enum tagUSERCLASSTYPE {USERCLASSTYPE_FULL = 0x1,USERCLASSTYPE_SHORT = 0x2,USERCLASSTYPE_APPNAME = 0x3,};
enum tagUSERINFOSTATE {USERINFOSTATE_MOREDATA = 0xFFFFFFFD,USERINFOSTATE_INVALIDARG = 0xFFFFFFFE,USERINFOSTATE_UNKNOWN = 0xFFFFFFFF,USERINFOSTATE_ABSENT = 0x0,USERINFOSTATE_PRESENT = 0x1,};
struct transfer_ms_data {unsigned short opcode;unsigned char data_type;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char options;unsigned char reserv3;unsigned char origntr_id[8];unsigned short dlen;unsigned char *dptr;};
typedef struct _userHENHMETAFILE userHENHMETAFILE;
typedef struct _C0E9FF9F6B7B062E990DE9E300C0D00E AAL5_PARAMETERS;
enum ACCESS_MASKENUM {PERM_DESIGN = 0x800,PERM_WITHGRANT = 0x1000,PERM_REFERENCE = 0x2000,PERM_CREATE = 0x4000,PERM_INSERT = 0x8000,PERM_DELETE = 0x10000,PERM_MAXIMUM_ALLOWED = 0x2000000,PERM_ALL = 0x10000000,PERM_EXECUTE = 0x20000000,PERM_READ = 0x80000000,PERM_UPDATE = 0x40000000,};
typedef struct tACMSTREAMHEADER ACMSTREAMHEADER;
typedef struct adapterperfdata ADAPTERPERFDATA;
typedef struct adapter_overlay ADAPTER_OVERLAY;
typedef struct adpcmwaveformat_tag ADPCMWAVEFORMAT;
typedef struct _ads_object_info ADS_OBJECT_INFO;
typedef struct _AE_RESACCESSREJ AE_RESACCESSREJ;
enum AMPlayListFlags {AMPLAYLISTITEM_STARTINSCANMODE = 0x1,};
enum AM_MPEG2Profile {AM_MPEG2Profile_Simple = 0x1,AM_MPEG2Profile_Main = 0x2,AM_MPEG2Profile_SNRScalable = 0x3,AM_MPEG2Profile_SpatiallyScalable = 0x4,AM_MPEG2Profile_High = 0x5,};
typedef struct tagAnalogVideoInfo ANALOGVIDEOINFO;
typedef struct _AUX_RGBImageRec AUX_RGBImageRec;
typedef struct _avistreamheader AVISTREAMHEADER;
typedef struct _FB10B385A80E8C43E2FAF14F8CAB4B13 AVIStreamHeader;
enum CALL_EVENT_TYPE {CET_CALLOWNER = 0x0,CET_CALLMONITOR = 0x1,CET_CALLSTATEEVENT = 0x2,CET_CALLMEDIAEVENT = 0x3,};
struct CCertServerExit;
typedef struct _CERT_CONTEXT_EX CERT_CONTEXT_EX;
typedef struct _CERT_EXTENSIONS CERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE CERT_NAME_VALUE;
typedef struct _CHANGER_ELEMENT CHANGER_ELEMENT;
typedef struct _tagChannelInfo CHANNELENUMINFO;
typedef struct _CHARDEVQ_INFO_0 CHARDEVQ_INFO_0;
typedef struct _CHARDEVQ_INFO_1 CHARDEVQ_INFO_1;
typedef struct _A1A9A244AE7EE0CEFF363F43C752B07C CMC_X_MS_ATTACH;
typedef signed int CM_RECEIVE_TYPE;
typedef struct tagCOLORADJUSTMENT COLORADJUSTMENT;
typedef struct tagCOMBOBOXEXITEMA COMBOBOXEXITEMA;
typedef struct tagCOMBOBOXEXITEMW COMBOBOXEXITEMW;
typedef struct tagCOMPOSITIONFORM COMPOSITIONFORM;
typedef struct _CONTROL_SERVICE CONTROL_SERVICE;
typedef struct _CRYPT_ATTRIBUTE CRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO CRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB CRYPT_UINT_BLOB;
struct ClusGroupOwners {struct ClusGroupOwnersVtbl *lpVtbl;};
enum CommandTypeEnum {adCmdUnspecified = 0xFFFFFFFF,adCmdUnknown = 0x8,adCmdText = 0x1,adCmdTable = 0x2,adCmdStoredProc = 0x4,adCmdFile = 0x100,adCmdTableDirect = 0x200,};
enum ConnectModeEnum {adModeUnknown = 0x0,adModeRead = 0x1,adModeWrite = 0x2,adModeReadWrite = 0x3,adModeShareDenyRead = 0x4,adModeShareDenyWrite = 0x8,adModeShareExclusive = 0xC,adModeShareDenyNone = 0x10,};
typedef struct _D3DLIGHTINGCAPS D3DLIGHTINGCAPS;
typedef struct _D3DRMLOADMEMORY D3DRMLOADMEMORY;
typedef struct _D3DRMQUATERNION D3DRMQUATERNION;
enum DBCOMMANDOPENUM {DBOP_scalar_constant = 0x0,DBOP_DEFAULT = 0x1,DBOP_NULL = 0x2,DBOP_bookmark_name = 0x3,DBOP_catalog_name = 0x4,DBOP_column_name = 0x5,DBOP_schema_name = 0x6,DBOP_outall_name = 0x7,DBOP_qualifier_name = 0x8,DBOP_qualified_column_name = 0x9,DBOP_table_name = 0xA,DBOP_nested_table_name = 0xB,DBOP_nested_column_name = 0xC,DBOP_row = 0xD,DBOP_table = 0xE,DBOP_sort = 0xF,DBOP_distinct = 0x10,DBOP_distinct_order_preserving = 0x11,DBOP_alias = 0x12,DBOP_cross_join = 0x13,DBOP_union_join = 0x14,DBOP_inner_join = 0x15,DBOP_left_semi_join = 0x16,DBOP_right_semi_join = 0x17,DBOP_left_anti_semi_join = 0x18,DBOP_right_anti_semi_join = 0x19,DBOP_left_outer_join = 0x1A,DBOP_right_outer_join = 0x1B,DBOP_full_outer_join = 0x1C,DBOP_natural_join = 0x1D,DBOP_natural_left_outer_join = 0x1E,DBOP_natural_right_outer_join = 0x1F,DBOP_natural_full_outer_join = 0x20,DBOP_set_intersection = 0x21,DBOP_set_union = 0x22,DBOP_set_left_difference = 0x23,DBOP_set_right_difference = 0x24,DBOP_set_anti_difference = 0x25,DBOP_bag_intersection = 0x26,DBOP_bag_union = 0x27,DBOP_bag_left_difference = 0x28,DBOP_bag_right_difference = 0x29,DBOP_bag_anti_difference = 0x2A,DBOP_division = 0x2B,DBOP_relative_sampling = 0x2C,DBOP_absolute_sampling = 0x2D,DBOP_transitive_closure = 0x2E,DBOP_recursive_union = 0x2F,DBOP_aggregate = 0x30,DBOP_remote_table = 0x31,DBOP_select = 0x32,DBOP_order_preserving_select = 0x33,DBOP_project = 0x34,DBOP_project_order_preserving = 0x35,DBOP_top = 0x36,DBOP_top_percent = 0x37,DBOP_top_plus_ties = 0x38,DBOP_top_percent_plus_ties = 0x39,DBOP_rank = 0x3A,DBOP_rank_ties_equally = 0x3B,DBOP_rank_ties_equally_and_skip = 0x3C,DBOP_navigate = 0x3D,DBOP_nesting = 0x3E,DBOP_unnesting = 0x3F,DBOP_nested_apply = 0x40,DBOP_cross_tab = 0x41,DBOP_is_NULL = 0x42,DBOP_is_NOT_NULL = 0x43,DBOP_equal = 0x44,DBOP_not_equal = 0x45,DBOP_less = 0x46,DBOP_less_equal = 0x47,DBOP_greater = 0x48,DBOP_greater_equal = 0x49,DBOP_equal_all = 0x4A,DBOP_not_equal_all = 0x4B,DBOP_less_all = 0x4C,DBOP_less_equal_all = 0x4D,DBOP_greater_all = 0x4E,DBOP_greater_equal_all = 0x4F,DBOP_equal_any = 0x50,DBOP_not_equal_any = 0x51,DBOP_less_any = 0x52,DBOP_less_equal_any = 0x53,DBOP_greater_any = 0x54,DBOP_greater_equal_any = 0x55,DBOP_anybits = 0x56,DBOP_allbits = 0x57,DBOP_anybits_any = 0x58,DBOP_allbits_any = 0x59,DBOP_anybits_all = 0x5A,DBOP_allbits_all = 0x5B,DBOP_between = 0x5C,DBOP_between_unordered = 0x5D,DBOP_match = 0x5E,DBOP_match_unique = 0x5F,DBOP_match_partial = 0x60,DBOP_match_partial_unique = 0x61,DBOP_match_full = 0x62,DBOP_match_full_unique = 0x63,DBOP_scalar_parameter = 0x64,DBOP_scalar_function = 0x65,DBOP_plus = 0x66,DBOP_minus = 0x67,DBOP_times = 0x68,DBOP_over = 0x69,DBOP_div = 0x6A,DBOP_modulo = 0x6B,DBOP_power = 0x6C,DBOP_like = 0x6D,DBOP_sounds_like = 0x6E,DBOP_like_any = 0x6F,DBOP_like_all = 0x70,DBOP_is_INVALID = 0x71,DBOP_is_TRUE = 0x72,DBOP_is_FALSE = 0x73,DBOP_and = 0x74,DBOP_or = 0x75,DBOP_xor = 0x76,DBOP_equivalent = 0x77,DBOP_not = 0x78,DBOP_implies = 0x79,DBOP_overlaps = 0x7A,DBOP_case_condition = 0x7B,DBOP_case_value = 0x7C,DBOP_nullif = 0x7D,DBOP_cast = 0x7E,DBOP_coalesce = 0x7F,DBOP_position = 0x80,DBOP_extract = 0x81,DBOP_char_length = 0x82,DBOP_octet_length = 0x83,DBOP_bit_length = 0x84,DBOP_substring = 0x85,DBOP_upper = 0x86,DBOP_lower = 0x87,DBOP_trim = 0x88,DBOP_translate = 0x89,DBOP_convert = 0x8A,DBOP_string_concat = 0x8B,DBOP_current_date = 0x8C,DBOP_current_time = 0x8D,DBOP_current_timestamp = 0x8E,DBOP_content_select = 0x8F,DBOP_content = 0x90,DBOP_content_freetext = 0x91,DBOP_content_proximity = 0x92,DBOP_content_vector_or = 0x93,DBOP_delete = 0x94,DBOP_update = 0x95,DBOP_insert = 0x96,DBOP_min = 0x97,DBOP_max = 0x98,DBOP_count = 0x99,DBOP_sum = 0x9A,DBOP_avg = 0x9B,DBOP_any_sample = 0x9C,DBOP_stddev = 0x9D,DBOP_stddev_pop = 0x9E,DBOP_var = 0x9F,DBOP_var_pop = 0xA0,DBOP_first = 0xA1,DBOP_last = 0xA2,DBOP_in = 0xA3,DBOP_exists = 0xA4,DBOP_unique = 0xA5,DBOP_subset = 0xA6,DBOP_proper_subset = 0xA7,DBOP_superset = 0xA8,DBOP_proper_superset = 0xA9,DBOP_disjoint = 0xAA,DBOP_pass_through = 0xAB,DBOP_defined_by_GUID = 0xAC,DBOP_text_command = 0xAD,DBOP_SQL_select = 0xAE,DBOP_prior_command_tree = 0xAF,DBOP_add_columns = 0xB0,DBOP_column_list_anchor = 0xB1,DBOP_column_list_element = 0xB2,DBOP_command_list_anchor = 0xB3,DBOP_command_list_element = 0xB4,DBOP_from_list_anchor = 0xB5,DBOP_from_list_element = 0xB6,DBOP_project_list_anchor = 0xB7,DBOP_project_list_element = 0xB8,DBOP_row_list_anchor = 0xB9,DBOP_row_list_element = 0xBA,DBOP_scalar_list_anchor = 0xBB,DBOP_scalar_list_element = 0xBC,DBOP_set_list_anchor = 0xBD,DBOP_set_list_element = 0xBE,DBOP_sort_list_anchor = 0xBF,DBOP_sort_list_element = 0xC0,DBOP_alter_character_set = 0xC1,DBOP_alter_collation = 0xC2,DBOP_alter_domain = 0xC3,DBOP_alter_index = 0xC4,DBOP_alter_procedure = 0xC5,DBOP_alter_schema = 0xC6,DBOP_alter_table = 0xC7,DBOP_alter_trigger = 0xC8,DBOP_alter_view = 0xC9,DBOP_coldef_list_anchor = 0xCA,DBOP_coldef_list_element = 0xCB,DBOP_create_assertion = 0xCC,DBOP_create_character_set = 0xCD,DBOP_create_collation = 0xCE,DBOP_create_domain = 0xCF,DBOP_create_index = 0xD0,DBOP_create_procedure = 0xD1,DBOP_create_schema = 0xD2,DBOP_create_synonym = 0xD3,DBOP_create_table = 0xD4,DBOP_create_temporary_table = 0xD5,DBOP_create_translation = 0xD6,DBOP_create_trigger = 0xD7,DBOP_create_view = 0xD8,DBOP_drop_assertion = 0xD9,DBOP_drop_character_set = 0xDA,DBOP_drop_collation = 0xDB,DBOP_drop_domain = 0xDC,DBOP_drop_index = 0xDD,DBOP_drop_procedure = 0xDE,DBOP_drop_schema = 0xDF,DBOP_drop_synonym = 0xE0,DBOP_drop_table = 0xE1,DBOP_drop_translation = 0xE2,DBOP_drop_trigger = 0xE3,DBOP_drop_view = 0xE4,DBOP_foreign_key = 0xE5,DBOP_grant_privileges = 0xE6,DBOP_index_list_anchor = 0xE7,DBOP_index_list_element = 0xE8,DBOP_primary_key = 0xE9,DBOP_property_list_anchor = 0xEA,DBOP_property_list_element = 0xEB,DBOP_referenced_table = 0xEC,DBOP_rename_object = 0xED,DBOP_revoke_privileges = 0xEE,DBOP_schema_authorization = 0xEF,DBOP_unique_key = 0xF0,};
typedef struct tagDBCONTENTVECTOR DBCONTENTVECTOR;
enum DBLITERALENUM20 {DBLITERAL_CUBE_NAME = 0x15,DBLITERAL_DIMENSION_NAME = 0x16,DBLITERAL_HIERARCHY_NAME = 0x17,DBLITERAL_LEVEL_NAME = 0x18,DBLITERAL_MEMBER_NAME = 0x19,DBLITERAL_PROPERTY_NAME = 0x1A,DBLITERAL_SCHEMA_SEPARATOR = 0x1B,DBLITERAL_QUOTE_SUFFIX = 0x1C,};
typedef struct tagDBPARAMBINDINFO DBPARAMBINDINFO;
enum DBPROPFLAGSENUM {DBPROPFLAGS_NOTSUPPORTED = 0x0,DBPROPFLAGS_COLUMN = 0x1,DBPROPFLAGS_DATASOURCE = 0x2,DBPROPFLAGS_DATASOURCECREATE = 0x4,DBPROPFLAGS_DATASOURCEINFO = 0x8,DBPROPFLAGS_DBINIT = 0x10,DBPROPFLAGS_INDEX = 0x20,DBPROPFLAGS_ROWSET = 0x40,DBPROPFLAGS_TABLE = 0x80,DBPROPFLAGS_COLUMNOK = 0x100,DBPROPFLAGS_READ = 0x200,DBPROPFLAGS_WRITE = 0x400,DBPROPFLAGS_REQUIRED = 0x800,DBPROPFLAGS_SESSION = 0x1000,};
enum DBROWSTATUSENUM {DBROWSTATUS_S_OK = 0x0,DBROWSTATUS_S_MULTIPLECHANGES = 0x2,DBROWSTATUS_S_PENDINGCHANGES = 0x3,DBROWSTATUS_E_CANCELED = 0x4,DBROWSTATUS_E_CANTRELEASE = 0x6,DBROWSTATUS_E_CONCURRENCYVIOLATION = 0x7,DBROWSTATUS_E_DELETED = 0x8,DBROWSTATUS_E_PENDINGINSERT = 0x9,DBROWSTATUS_E_NEWLYINSERTED = 0xA,DBROWSTATUS_E_INTEGRITYVIOLATION = 0xB,DBROWSTATUS_E_INVALID = 0xC,DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 0xD,DBROWSTATUS_E_OBJECTOPEN = 0xE,DBROWSTATUS_E_OUTOFMEMORY = 0xF,DBROWSTATUS_E_PERMISSIONDENIED = 0x10,DBROWSTATUS_E_LIMITREACHED = 0x11,DBROWSTATUS_E_SCHEMAVIOLATION = 0x12,DBROWSTATUS_E_FAIL = 0x13,};
enum DBVALUEKINDENUM {DBVALUEKIND_BYGUID = 0x100,DBVALUEKIND_COLDESC = 0x101,DBVALUEKIND_ID = 0x102,DBVALUEKIND_CONTENT = 0x103,DBVALUEKIND_CONTENTVECTOR = 0x104,DBVALUEKIND_GROUPINFO = 0x105,DBVALUEKIND_PARAMETER = 0x106,DBVALUEKIND_PROPERTY = 0x107,DBVALUEKIND_SETFUNC = 0x108,DBVALUEKIND_SORTINFO = 0x109,DBVALUEKIND_TEXT = 0x10A,DBVALUEKIND_COMMAND = 0x10B,DBVALUEKIND_MONIKER = 0x10C,DBVALUEKIND_ROWSET = 0x10D,DBVALUEKIND_LIKE = 0x10E,DBVALUEKIND_CONTENTPROXIMITY = 0x10F,DBVALUEKIND_IDISPATCH = 0x9,DBVALUEKIND_IUNKNOWN = 0xD,DBVALUEKIND_EMPTY = 0x0,DBVALUEKIND_NULL = 0x1,DBVALUEKIND_I2 = 0x2,DBVALUEKIND_I4 = 0x3,DBVALUEKIND_R4 = 0x4,DBVALUEKIND_R8 = 0x5,DBVALUEKIND_CY = 0x6,DBVALUEKIND_DATE = 0x7,DBVALUEKIND_BSTR = 0x8,DBVALUEKIND_ERROR = 0xA,DBVALUEKIND_BOOL = 0xB,DBVALUEKIND_VARIANT = 0xC,DBVALUEKIND_VECTOR = 0x1000,DBVALUEKIND_ARRAY = 0x2000,DBVALUEKIND_BYREF = 0x4000,DBVALUEKIND_I1 = 0x10,DBVALUEKIND_UI1 = 0x11,DBVALUEKIND_UI2 = 0x12,DBVALUEKIND_UI4 = 0x13,DBVALUEKIND_I8 = 0x14,DBVALUEKIND_UI8 = 0x15,DBVALUEKIND_GUID = 0x48,DBVALUEKIND_BYTES = 0x80,DBVALUEKIND_STR = 0x81,DBVALUEKIND_WSTR = 0x82,DBVALUEKIND_NUMERIC = 0x83,DBVALUEKIND_DBDATE = 0x85,DBVALUEKIND_DBTIME = 0x86,DBVALUEKIND_DBTIMESTAMP = 0x87,};
enum DBWATCHMODEENUM {DBWATCHMODE_ALL = 0x1,DBWATCHMODE_EXTEND = 0x2,DBWATCHMODE_MOVE = 0x4,DBWATCHMODE_COUNT = 0x8,};
typedef struct _DDVIDEOPORTCAPS DDVIDEOPORTCAPS;
typedef struct _DDVIDEOPORTDESC DDVIDEOPORTDESC;
typedef struct _DDVIDEOPORTINFO DDVIDEOPORTINFO;
enum DISCONNECT_CODE {DC_NORMAL = 0x0,DC_NOANSWER = 0x1,DC_REJECTED = 0x2,};
typedef struct _DISPLAY_DEVICEA DISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW DISPLAY_DEVICEW;
typedef struct _947C6FA139885FA2B0DE7F2A3FDD942C DLGITEMTEMPLATE;
typedef struct _6E70C678EEF4FE821533C3EEF387F3E8 DPMSG_ADDPLAYER;
typedef struct _DSKTLSYSTEMTIME DSKTLSYSTEMTIME;
typedef struct _DTBLRADIOBUTTON DTBLRADIOBUTTON;
typedef struct tagEMRSELECTOBJECT EMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN EMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL EMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL EMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT EMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
typedef struct _ensaveclipboard ENSAVECLIPBOARD;
typedef struct tagENUMTEXTMETRICA ENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW ENUMTEXTMETRICW;
enum EpgldrEventList {EPGLDR_STARTING = 0x1,EPGLDR_ACTIVE_COMMIT_STARTING = 0x2,EPGLDR_ACTIVE_COMMIT_ENDING = 0x3,EPGLDR_PASSIVE_COMMIT_STARTING = 0x4,EPGLDR_PASSIVE_COMMIT_ENDING = 0x5,EPGLDR_ENDING = 0x6,EPGLDR_EXCLUSIVE_STARTING = 0x7,EPGLDR_EXCLUSIVE_ENDING = 0x8,EPGLDR_ACTIVE_COMMIT_EPIENHANCE_STARTING = 0x9,EPGLDR_ACTIVE_COMMIT_EPIENHANCE_ENDING = 0xA,};
enum EventReasonEnum {adRsnAddNew = 0x1,adRsnDelete = 0x2,adRsnUpdate = 0x3,adRsnUndoUpdate = 0x4,adRsnUndoAddNew = 0x5,adRsnUndoDelete = 0x6,adRsnRequery = 0x7,adRsnResynch = 0x8,adRsnClose = 0x9,adRsnMove = 0xA,adRsnFirstChange = 0xB,adRsnMoveFirst = 0xC,adRsnMoveNext = 0xD,adRsnMovePrevious = 0xE,adRsnMoveLast = 0xF,};
enum EventStatusEnum {adStatusOK = 0x1,adStatusErrorsOccurred = 0x2,adStatusCantDeny = 0x3,adStatusCancel = 0x4,adStatusUnwantedEvent = 0x5,};
typedef struct _FILEDESCRIPTORA FILEDESCRIPTORA;
typedef struct _FILEDESCRIPTORW FILEDESCRIPTORW;
typedef struct _FMS_GETFILESELA FMS_GETFILESELA;
typedef struct _FMS_GETFILESELW FMS_GETFILESELW;
typedef struct tagFMS_HELPSTRINGA FMS_HELPSTRINGA;
typedef struct tagFMS_HELPSTRINGW FMS_HELPSTRINGW;
typedef struct tagFMS_TOOLBARLOAD FMS_TOOLBARLOAD;
enum FilterGroupEnum {adFilterNone = 0x0,adFilterPendingRecords = 0x1,adFilterAffectedRecords = 0x2,adFilterFetchedRecords = 0x3,adFilterPredicate = 0x4,adFilterConflictingRecords = 0x5,};
struct FolderItemVerbs {struct FolderItemVerbsVtbl *lpVtbl;};
typedef struct _GENERIC_MAPPING GENERIC_MAPPING;
typedef struct _gettextlengthex GETTEXTLENGTHEX;
typedef struct _GET_MEDIA_TYPES GET_MEDIA_TYPES;
typedef struct _tagGET_SET_SYMPATH GET_SET_SYMPATH;
typedef struct _GROUP_INFO_1002 GROUP_INFO_1002;
typedef struct _GROUP_INFO_1005 GROUP_INFO_1005;
struct HTMLAreaElement;
struct HTMLBaseElement;
struct HTMLDivPosition;
struct HTMLFontElement;
struct HTMLFormElement;
struct HTMLLabelEvents {struct HTMLLabelEventsVtbl *lpVtbl;};
struct HTMLLinkElement;
struct HTMLListElement;
struct HTMLMetaElement;
struct HTMLParaElement;
struct HTMLSpanElement;
struct HTMLTableEvents {struct HTMLTableEventsVtbl *lpVtbl;};
struct HTMLTextElement;
struct HTMLWindowProxy;
typedef struct _HTTP_FILTER_LOG HTTP_FILTER_LOG;
struct HWINEVENTHOOK__ {int unused;};
struct IADsFileService {struct IADsFileServiceVtbl *lpVtbl;};
struct IAMExtTransport {struct IAMExtTransportVtbl *lpVtbl;};
struct IAMMediaContent {struct IAMMediaContentVtbl *lpVtbl;};
struct IAMPlayListItem {struct IAMPlayListItemVtbl *lpVtbl;};
struct IAMStreamConfig {struct IAMStreamConfigVtbl *lpVtbl;};
struct IAMStreamSelect {struct IAMStreamSelectVtbl *lpVtbl;};
struct IAMVideoProcAmp {struct IAMVideoProcAmpVtbl *lpVtbl;};
struct IASQLOLEArticle {struct IASQLOLEArticleVtbl *lpVtbl;};
struct IASQLOLEColumns {struct IASQLOLEColumnsVtbl *lpVtbl;};
struct IASQLOLEDefault {struct IASQLOLEDefaultVtbl *lpVtbl;};
struct IASQLOLEDevices {struct IASQLOLEDevicesVtbl *lpVtbl;};
struct IASQLOLEIndexes {struct IASQLOLEIndexesVtbl *lpVtbl;};
struct IASQLOLEServers {struct IASQLOLEServersVtbl *lpVtbl;};
struct IASQLOLETrigger {struct IASQLOLETriggerVtbl *lpVtbl;};
struct IAgentCharacter {struct IAgentCharacterVtbl *lpVtbl;};
struct IAgentUserInput {struct IAgentUserInputVtbl *lpVtbl;};
struct IBPCDeviceEvent {struct IBPCDeviceEventVtbl *lpVtbl;};
struct IBaseVideoMixer {struct IBaseVideoMixerVtbl *lpVtbl;};
typedef struct _195B5ED187AD0EF03C07D6DC4096CC78 ICSETSTATUSPROC;
struct ICatInformation {struct ICatInformationVtbl *lpVtbl;};
struct ICertServerExit {struct ICertServerExitVtbl *lpVtbl;};
struct IClassActivator {struct IClassActivatorVtbl *lpVtbl;};
struct IClientSecurity {struct IClientSecurityVtbl *lpVtbl;};
struct ICommDlgBrowser {struct ICommDlgBrowserVtbl *lpVtbl;};
struct ICommandPersist {struct ICommandPersistVtbl *lpVtbl;};
struct ICommandPrepare {struct ICommandPrepareVtbl *lpVtbl;};
struct ICreateTypeInfo {struct ICreateTypeInfoVtbl *lpVtbl;};
struct ICreateTypeLib2 {struct ICreateTypeLib2Vtbl *lpVtbl;};
struct IDBAsynchNotify {struct IDBAsynchNotifyVtbl *lpVtbl;};
struct IDBAsynchStatus {struct IDBAsynchStatusVtbl *lpVtbl;};
struct IDBSchemaRowset {struct IDBSchemaRowsetVtbl *lpVtbl;};
struct IDataInitialize {struct IDataInitializeVtbl *lpVtbl;};
struct IDirect3DDevice {struct IDirect3DDeviceVtbl *lpVtbl;};
struct IDirect3DRMFace {struct IDirect3DRMFaceVtbl *lpVtbl;};
struct IDirect3DRMMesh {struct IDirect3DRMMeshVtbl *lpVtbl;};
struct IDirect3DRMWrap {struct IDirect3DRMWrapVtbl *lpVtbl;};
struct IDtcLuConfigure {struct IDtcLuConfigureVtbl *lpVtbl;};
struct IEnumMediaTypes {struct IEnumMediaTypesVtbl *lpVtbl;};
struct IEnumRegFilters {struct IEnumRegFiltersVtbl *lpVtbl;};
struct IFileSinkFilter {struct IFileSinkFilterVtbl *lpVtbl;};
struct IFileViewerSite {struct IFileViewerSiteVtbl *lpVtbl;};
struct IFontEventsDisp {struct IFontEventsDispVtbl *lpVtbl;};
struct IH26XRTPControl {struct IH26XRTPControlVtbl *lpVtbl;};
struct IHTMLDivElement {struct IHTMLDivElementVtbl *lpVtbl;};
struct IHTMLImgElement {struct IHTMLImgElementVtbl *lpVtbl;};
struct IHTMLInputImage {struct IHTMLInputImageVtbl *lpVtbl;};
struct IHTMLMapElement {struct IHTMLMapElementVtbl *lpVtbl;};
struct IHTMLOpsProfile {struct IHTMLOpsProfileVtbl *lpVtbl;};
struct IHTMLStyleSheet {struct IHTMLStyleSheetVtbl *lpVtbl;};
typedef struct _IMAGEHLP_MODULE IMAGEHLP_MODULE;
typedef struct _IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL;
struct IMAPIAdviseSink {struct IMAPIAdviseSinkVtbl *lpVtbl;};
struct IMLangCodePages {struct IMLangCodePagesVtbl *lpVtbl;};
struct IMediaEventSink {struct IMediaEventSinkVtbl *lpVtbl;};
struct IMixerPinConfig {struct IMixerPinConfigVtbl *lpVtbl;};
struct IObjectIdentity {struct IObjectIdentityVtbl *lpVtbl;};
struct IObjectWithSite {struct IObjectWithSiteVtbl *lpVtbl;};
struct IOleControlSite {struct IOleControlSiteVtbl *lpVtbl;};
struct IOleInPlaceSite {struct IOleInPlaceSiteVtbl *lpVtbl;};
struct IOleUILinkInfoA {struct IOleUILinkInfoAVtbl *lpVtbl;};
struct IOleUILinkInfoW {struct IOleUILinkInfoWVtbl *lpVtbl;};
struct IOleUndoManager {struct IOleUndoManagerVtbl *lpVtbl;};
typedef struct _IPX_GLOBAL_INFO IPX_GLOBAL_INFO;
typedef struct _IPX_NETNUM_DATA IPX_NETNUM_DATA;
struct IPersistFolder2 {struct IPersistFolder2Vtbl *lpVtbl;};
struct IPersistHistory {struct IPersistHistoryVtbl *lpVtbl;};
struct IPersistMessage {struct IPersistMessageVtbl *lpVtbl;};
struct IPersistMoniker {struct IPersistMonikerVtbl *lpVtbl;};
struct IPersistStorage {struct IPersistStorageVtbl *lpVtbl;};
struct IProgressNotify {struct IProgressNotifyVtbl *lpVtbl;};
struct IProvideMoniker {struct IProvideMonikerVtbl *lpVtbl;};
struct IQualityControl {struct IQualityControlVtbl *lpVtbl;};
struct IRTPDemuxFilter {struct IRTPDemuxFilterVtbl *lpVtbl;};
struct IReferenceClock {struct IReferenceClockVtbl *lpVtbl;};
struct IRowsetCopyRows {struct IRowsetCopyRowsVtbl *lpVtbl;};
struct IRowsetIdentity {struct IRowsetIdentityVtbl *lpVtbl;};
struct IRowsetWatchAll {struct IRowsetWatchAllVtbl *lpVtbl;};
struct IRpcProxyBuffer {struct IRpcProxyBufferVtbl *lpVtbl;};
struct IRunnableObject {struct IRunnableObjectVtbl *lpVtbl;};
struct IServerSecurity {struct IServerSecurityVtbl *lpVtbl;};
struct ISharedProperty {struct ISharedPropertyVtbl *lpVtbl;};
struct IStdMarshalInfo {struct IStdMarshalInfoVtbl *lpVtbl;};
struct ITAttributeList {struct ITAttributeListVtbl *lpVtbl;};
struct ITMediaTerminal {struct ITMediaTerminalVtbl *lpVtbl;};
struct IUrlHistoryStg2 {struct IUrlHistoryStg2Vtbl *lpVtbl;};
struct IWEExtendWizard {struct IWEExtendWizardVtbl *lpVtbl;};
struct IXAObtainRMInfo {struct IXAObtainRMInfoVtbl *lpVtbl;};
typedef struct tagJAVAEXECUTEINFO JAVAEXECUTEINFO;
typedef struct tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
typedef struct _D0C2582348DF16EE31650672742EA602 KSMULTIPLE_ITEM;
typedef struct _92AD7B8CF7589C2FF45E6AC6DF63FADA KSSTREAM_HEADER;
typedef struct lineaddresscaps_tag LINEADDRESSCAPS;
typedef struct lineagentstatus_tag LINEAGENTSTATUS;
typedef struct linecountrylist_tag LINECOUNTRYLIST;
typedef struct lineextensionid_tag LINEEXTENSIONID;
typedef struct lineforwardlist_tag LINEFORWARDLIST;
typedef struct linemonitortone_tag LINEMONITORTONE;
typedef struct linereqmakecall_tag LINEREQMAKECALL;
typedef union _5F879E5D7F7731C83E6AA76CA640BB1B LLC_ADAPTER_LOG;
typedef struct _C1DF3B0F556FA828E59A73099276FD8C LLC_NEXT_BUFFER;
typedef struct _LLC_XMIT_BUFFER LLC_XMIT_BUFFER;
typedef struct tagLOCALESIGNATURE LOCALESIGNATURE;
typedef struct tagACCESSTIMEOUT *LPACCESSTIMEOUT;
typedef struct _ACCESS_INFO_0 *LPACCESS_INFO_0;
typedef struct _ACCESS_INFO_1 *LPACCESS_INFO_1;
typedef IActiveDesktop *LPACTIVEDESKTOP;
typedef struct _AD_GUARANTEED *LPAD_GUARANTEED;
typedef struct _AE_SESSLOGOFF *LPAE_SESSLOGOFF;
typedef struct tagANIMATIONINFO *LPANIMATIONINFO;
typedef struct IASQLOLEAlerts *LPASQLOLEALERTS;
typedef struct IASQLOLEBackup *LPASQLOLEBACKUP;
typedef struct IASQLOLEChecks *LPASQLOLECHECKS;
typedef struct IASQLOLEColumn *LPASQLOLECOLUMN;
typedef struct IASQLOLEDevice *LPASQLOLEDEVICE;
typedef struct IASQLOLEGroups *LPASQLOLEGROUPS;
typedef struct IASQLOLELogins *LPASQLOLELOGINS;
typedef struct IASQLOLEServer *LPASQLOLESERVER;
typedef struct IASQLOLETables *LPASQLOLETABLES;
typedef struct tagCANDIDATEFORM *LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST *LPCANDIDATELIST;
typedef struct tagCapDriverCaps *LPCAPDRIVERCAPS;
typedef  DIPROPHEADER *LPCDIPROPHEADER;
typedef IClassFactory2 *LPCLASSFACTORY2;
typedef struct _CONFFILEINFOA *LPCONFFILEINFOA;
typedef struct _CONFFILEINFOW *LPCONFFILEINFOW;
typedef struct _CONFIG_INFO_0 *LPCONFIG_INFO_0;
typedef struct _CONFUSERINFOA *LPCONFUSERINFOA;
typedef struct _CONFUSERINFOW *LPCONFUSERINFOW;
typedef struct tagCREATESTRUCTA *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW *LPCREATESTRUCTW;
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef struct _D3DCLIPSTATUS *LPD3DCLIPSTATUS;
typedef struct _D3DCOLORVALUE *LPD3DCOLORVALUE;
typedef struct _D3DDeviceDesc *LPD3DDEVICEDESC;
typedef struct _D3DMATRIXLOAD *LPD3DMATRIXLOAD;
typedef struct _D3DPICKRECORD *LPD3DPICKRECORD;
typedef struct _D3DRMPICKDESC *LPD3DRMPICKDESC;
typedef struct _D3DRMVECTOR4D *LPD3DRMVECTOR4D;
typedef struct _DDSURFACEDESC *LPDDSURFACEDESC;
typedef struct tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;
typedef struct DICUSTOMFORCE *LPDICUSTOMFORCE;
typedef struct DIDEVCAPS_DX3 *LPDIDEVCAPS_DX3;
typedef struct DIEFFECTINFOA *LPDIEFFECTINFOA;
typedef struct DIEFFECTINFOW *LPDIEFFECTINFOW;
typedef struct IDirect3DLight *LPDIRECT3DLIGHT;
typedef struct IDirectInput2A *LPDIRECTINPUT2A;
typedef struct IDirectInput2W *LPDIRECTINPUT2W;
typedef struct _176AE562BEBA221D9147C7D653950669 *LPDPACCOUNTDESC;
typedef struct _478FD611D4CFE009DAD748EFF45E08FA *LPDPCREDENTIALS;
typedef struct _71862E795461F7636CC2839B33F62969 *LPDPLCONNECTION;
typedef struct _B2D668220A1566F070E9D4CE9C5B369E *LPDPMSG_GENERIC;
typedef struct _90C95F6D8FBD31365E56BBF2FD97089A *LPDPSESSIONDESC;
typedef struct tagDRVCONFIGINFO *LPDRVCONFIGINFO;
typedef struct _DSCBUFFERDESC *LPDSCBUFFERDESC;
typedef struct _DTBLMVLISTBOX *LPDTBLMVLISTBOX;
typedef struct _EDKEventCount *LPEDKEVENTCOUNT;
typedef struct tagENHMETAHEADER *LPENHMETAHEADER;
typedef struct tagENHMETARECORD *LPENHMETARECORD;
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct _70BF96555A8221A8BC520C987124981D *LPFLATENTRYLIST;
typedef struct _862005EC9EDD7026C51E0C19A67AAE6E *LPFLATMTSIDLIST;
typedef struct tagFONTSIGNATURE *LPFONTSIGNATURE;
typedef struct nodeent_f *( *LPGETNODEBYADDR)( unsigned char *addr, int, int);
typedef struct nodeent_f *( *LPGETNODEBYNAME)( char *);
typedef struct _GRADIENT_RECT *LPGRADIENT_RECT;
typedef struct _HANDLE_INFO_1 *LPHANDLE_INFO_1;
typedef struct tagHARDWAREINPUT *LPHARDWAREINPUT;
typedef struct _HD_HITTESTINFO *LPHDHITTESTINFO;
typedef struct tagHIGHCONTRASTA *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW *LPHIGHCONTRASTW;
typedef IHttpNegotiate *LPHTTPNEGOTIATE;
typedef struct tag_IDFCHANNELHDR *LPIDFCHANNELHDR;
typedef struct IInstallCodecs *LPINSTALLCODECS;
typedef struct tagINTERFACEDATA *LPINTERFACEDATA;
typedef struct tagINTERFACEIMPL *LPINTERFACEIMPL;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct IKsPropertySet *LPKSPROPERTYSET;
typedef struct lineagentcaps_tag *LPLINEAGENTCAPS;
typedef struct linecardentry_tag *LPLINECARDENTRY;
typedef struct linedevstatus_tag *LPLINEDEVSTATUS;
typedef struct IDirect3DRM2 **LPLPDIRECT3DRM2;
typedef struct tagLVHITTESTINFO *LPLVHITTESTINFO;
typedef struct IMAPIContainer *LPMAPICONTAINER;
typedef struct _BDD35E4D6D3904DAB7D4846C261BAE65 *LPMAPIVERBARRAY;
typedef struct tagMCI_SET_PARMS *LPMCI_SET_PARMS;
typedef struct tagMENUITEMINFOA *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW *LPMENUITEMINFOW;
typedef IMessageFilter *LPMESSAGEFILTER;
typedef struct midiproptempo_tag *LPMIDIPROPTEMPO;
typedef struct tagMIXERCONTROLA *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *LPMIXERCONTROLW;
typedef struct _MODEMSETTINGS *LPMODEMSETTINGS;
typedef struct tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *LPMULTIKEYHELPW;
typedef IMultiLanguage *LPMULTILANGUAGE;
typedef struct _NETINFOSTRUCT *LPNETINFOSTRUCT;
typedef struct _NETRESOURCE2A *LPNETRESOURCE2A;
typedef struct _NETRESOURCE2W *LPNETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 *LPNMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B *LPNMCBEENDEDITW;
typedef struct tagNMHDDISPINFOA *LPNMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW *LPNMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT *LPNMLVCACHEHINT;
typedef struct tagLVDISPINFO *LPNMLVDISPINFOA;
typedef struct tagLVDISPINFOW *LPNMLVDISPINFOW;
typedef struct _A4DD02794CFF2FFACE800CDFB553DD44 *LPNMTBDISPINFOA;
typedef struct _B2C1794739E4EE832382C8443FB3E776 *LPNMTBDISPINFOW;
typedef struct tagNMTTDISPIFNOA *LPNMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW *LPNMTTDISPINFOW;
typedef struct tagTVDISPINFOA *LPNMTVDISPINFOA;
typedef struct tagTVDISPINFOW *LPNMTVDISPINFOW;
typedef struct tagOEM_PENPACKET *LPOEM_PENPACKET;
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct tagOLEUICONVERTA *LPOLEUICONVERTA;
typedef struct tagOLEUICONVERTW *LPOLEUICONVERTW;
typedef IOleUIObjInfoA *LPOLEUIOBJINFOA;
typedef IOleUIObjInfoW *LPOLEUIOBJINFOW;
typedef struct tagOFNA *LPOPENFILENAMEA;
typedef struct tagOFNW *LPOPENFILENAMEW;
typedef struct tagPSDA *LPPAGESETUPDLGA;
typedef struct tagPSDW *LPPAGESETUPDLGW;
typedef struct pcmwaveformat_tag *LPPCMWAVEFORMAT;
typedef struct tagPENDATAHEADER *LPPENDATAHEADER;
typedef IPersistFolder *LPPERSISTFOLDER;
typedef IPersistMemory *LPPERSISTMEMORY;
typedef IPersistStream *LPPERSISTSTREAM;
typedef IPropertyPage2 *LPPROPERTYPAGE2;
typedef struct IProviderAdmin *LPPROVIDERADMIN;
typedef IQuickActivate *LPQUICKACTIVATE;
typedef struct _RB_HITTESTINFO *LPRBHITTESTINFO;
typedef struct tagREGISTERWORDA *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW *LPREGISTERWORDW;
typedef IRemoteProcess *LPREMOTEPROCESS;
typedef struct tagSCROLLBARINFO *LPSCROLLBARINFO;
typedef struct _SERVICE_INFOA *LPSERVICE_INFOA;
typedef struct _SERVICE_INFOW *LPSERVICE_INFOW;
typedef struct _SHQUERYRBINFO *LPSHQUERYRBINFO;
typedef struct _SPropTagArray *LPSPropTagArray;
typedef struct _SSortOrderSet *LPSSortOrderSet;
typedef struct _STAT_SERVER_0 *LPSTAT_SERVER_0;
typedef struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 *LPTBBUTTONINFOA;
typedef struct _8688FBDBF9FB8D670D1638B47BFC0FAD *LPTBBUTTONINFOW;
typedef struct tagTBSAVEPARAMSA *LPTBSAVEPARAMSA;
typedef struct tagTCHITTESTINFO *LPTCHITTESTINFO;
typedef struct tagTCITEMHEADERA *LPTCITEMHEADERA;
typedef struct tagTCITEMHEADERW *LPTCITEMHEADERW;
typedef struct tagTVHITTESTINFO *LPTVHITTESTINFO;
typedef IUrlHistoryStg *LPURLHISTORYSTG;
typedef struct _WSAOVERLAPPED *LPWSAOVERLAPPED;
typedef struct _WSPPROC_TABLE *LPWSPPROC_TABLE;
typedef struct _1B9FED13861BA37B232486F1850D8B89 LUA_VERB_RECORD;
enum MACRO_ADMINDATA {ADMINDATA_MAX_NAME_LEN = 256,};
enum MACRO_ALTERNATE {ALTERNATE = 1,WINDING = 2,};
enum MACRO_ATTACH_BY {ATTACH_BY_VALUE = 0x1,ATTACH_BY_REFERENCE = 0x2,ATTACH_BY_REF_RESOLVE = 0x3,ATTACH_BY_REF_ONLY = 0x4,ATTACH_EMBEDDED_MSG = 0x5,ATTACH_OLE = 0x6,};
enum MACRO_AVI_INDEX {AVI_INDEX_OF_INDEXES = 0x0,AVI_INDEX_OF_CHUNKS = 0x1,AVI_INDEX_OF_TIMED_CHUNKS = 0x2,AVI_INDEX_OF_SUB_2FIELD = 0x3,AVI_INDEX_IS_DATA = 0x80,AVI_INDEX_SUB_DEFAULT = 0x0,AVI_INDEX_SUB_2FIELD = 0x1,};
enum MACRO_BIGENDIAN {BIGENDIAN = 0x0,LITTLEENDIAN = 0x1,};
enum MACRO_BITSPIXEL {BITSPIXEL = 12,};
enum MACRO_BLACKNESS {BLACKNESS = 0x42,};
enum MACRO_BLUEPRINT {BLUEPRINT = 12,};
enum MACRO_BPTUpdate {BPTUpdate = 3,};
enum MACRO_BROADCAST {BROADCAST_QUERY_DENY = 0x424D5144,};
enum MACRO_CBR_BLOCK {CBR_BLOCK = 0xFFFFFFFF,};
enum MACRO_CB_MSGMAX {CB_MSGMAX = 0x162,};
enum MACRO_CCHCCDESC {CCHCCDESC = 32,CCHCCTEXT = 256,};
enum MACRO_CCHILDREN {CCHILDREN_TITLEBAR = 5,CCHILDREN_SCROLLBAR = 5,};
enum MACRO_CDBADFILE {CDBADFILE = 7200,};
enum MACRO_CDBADNAME {CDBADNAME = 7700,};
enum MACRO_CDGETNAME {CDGETNAME = 7400,};
enum MACRO_CFSEPCHAR {CFSEPCHAR = 43,};
enum MACRO_CF_ACCEPT {CF_ACCEPT = 0x0,CF_REJECT = 0x1,CF_DEFER = 0x2,};
enum MACRO_CHAR_SBCS {CHAR_SBCS = 0,CHAR_DBCS_LEAD = 1,CHAR_DBCS_TAIL = 2,};
enum MACRO_COMPONENT {COMPONENT_TOP = 0x7FFFFFFF,};
enum MACRO_COMP_ELEM {COMP_ELEM_TYPE = 0x1,COMP_ELEM_CHECKED = 0x2,COMP_ELEM_DIRTY = 0x4,COMP_ELEM_NOSCROLL = 0x8,COMP_ELEM_POS_LEFT = 0x10,COMP_ELEM_POS_TOP = 0x20,COMP_ELEM_SIZE_WIDTH = 0x40,COMP_ELEM_SIZE_HEIGHT = 0x80,COMP_ELEM_POS_ZINDEX = 0x100,COMP_ELEM_SOURCE = 0x200,COMP_ELEM_FRIENDLYNAME = 0x400,COMP_ELEM_SUBSCRIBEDURL = 0x800,};
enum MACRO_CONFERR_0 {CONFERR = 5,};
enum MACRO_CONF_ADDR {CONF_ADDR_UNKNOWN = 0x0,CONF_ADDR_IP = 0x1,CONF_ADDR_MACHINENAME = 0x2,CONF_ADDR_PSTN = 0x3,CONF_DF_BROADCAST = 0x100,CONF_DF_PRIVATE = 0x200,CONF_DF_DATA_SEGMENT_BEGIN = 0x400,CONF_DF_DATA_SEGMENT_END = 0x800,CONF_MT_DATA = 0x1,CONF_MT_AUDIO = 0x2,CONF_MT_VIDEO = 0x4,CONF_MT_ALL = 0xFF,CONF_CS_INVALID = 0x0,CONF_CS_INITIALIZING = 0x1,CONF_CS_ACTIVE = 0x2,CONF_CS_STOPPING = 0x3,CONF_UF_DATA = 0x1,CONF_UF_AUDIO = 0x2,CONF_UF_VIDEO = 0x4,CONF_UF_LOCAL = 0x10000,CONF_GET_CONF = 0x1,CONF_ENUM_CONF = 0x2,CONF_GET_USER = 0x11,CONF_ENUM_USER = 0x12,CONF_ENUM_PEER = 0x18,CONF_GET_RECDIR = 0x20,CONF_GET_FILEINFO = 0x21,CONF_SET_RECDIR = 0x1020,CONF_SET_GUID = 0x1041,CONF_SF_NOWAIT = 0x1,CONF_SF_NOUI = 0x2,CONF_SF_NOCOMPRESS = 0x4,CONF_SW_SHARE = 0x1,CONF_SW_UNSHARE = 0x2,CONF_SW_SHAREABLE = 0x3,CONF_SW_IS_SHARED = 0x4,};
enum MACRO_CONNECT_E {CONNECT_E_FIRST = 0x80040200,CONNECT_E_LAST = 0x8004020F,CONNECT_S_FIRST = 0x40200,CONNECT_S_LAST = 0x4020F,CONNECT_E_NOCONNECTION = 0x80040200,CONNECT_E_ADVISELIMIT = 0x80040201,CONNECT_E_CANNOTCONNECT = 0x80040202,CONNECT_E_OVERRIDDEN = 0x80040203,};
enum MACRO_CONTEXT_E {CONTEXT_E_ABORTED = 0x8004E002,CONTEXT_E_ABORTING = 0x8004E003,CONTEXT_E_NOCONTEXT = 0x8004E004,CONTEXT_E_NOTREGISTERED = 0x8004E005,CONTEXT_E_OLDREF = 0x8004E007,CONTEXT_E_ROLENOTFOUND = 0x8004E00C,CONTEXT_E_NOSECURITY = 0x8004E00D,CONTEXT_E_WRONGTHREAD = 0x8004E00E,CONTEXT_E_TMNOTAVAILABLE = 0x8004E00F,CONTEXT_E_INSUFFICIENTLICENSES = 0x8004E020,};
enum MACRO_CONVERT10 {CONVERT10_E_FIRST = 0x800401C0,CONVERT10_E_LAST = 0x800401CF,CONVERT10_S_FIRST = 0x401C0,CONVERT10_S_LAST = 0x401CF,};
enum MACRO_CREATE_NO {CREATE_NO_CONNECT = 0x1,};
enum MACRO_CRYPT_ASN {CRYPT_ASN_ENCODING = 0x1,CRYPT_NDR_ENCODING = 0x2,};
enum MACRO_CRYPT_KEY {CRYPT_KEY_LEN = 7,CRYPT_TXT_LEN = 8,};
enum MACRO_CRYPT_RC2 {CRYPT_RC2_40BIT_VERSION = 160,CRYPT_RC2_64BIT_VERSION = 120,CRYPT_RC2_128BIT_VERSION = 58,};
enum MACRO_CS_ENABLE {CS_ENABLE = 0x1,CS_DISABLE = 0x2,CS_DELETE_TRANSFORM = 0x3,};
enum MACRO_CURVECAPS {CURVECAPS = 28,};
enum MACRO_D3DRMLOAD {D3DRMLOAD_FROMFILE = 0x0,D3DRMLOAD_FROMRESOURCE = 0x1,D3DRMLOAD_FROMMEMORY = 0x2,D3DRMLOAD_FROMSTREAM = 0x4,D3DRMLOAD_FROMURL = 0x8,D3DRMLOAD_BYNAME = 0x10,D3DRMLOAD_BYPOSITION = 0x20,D3DRMLOAD_BYGUID = 0x40,D3DRMLOAD_FIRST = 0x80,D3DRMLOAD_INSTANCEBYREFERENCE = 0x100,D3DRMLOAD_INSTANCEBYCOPYING = 0x200,D3DRMLOAD_ASYNCHRONOUS = 0x400,};
enum MACRO_D3DSTATUS {D3DSTATUS_CLIPUNIONLEFT = 1,D3DSTATUS_CLIPUNIONRIGHT = 2,D3DSTATUS_CLIPUNIONTOP = 4,D3DSTATUS_CLIPUNIONBOTTOM = 8,D3DSTATUS_CLIPUNIONFRONT = 16,D3DSTATUS_CLIPUNIONBACK = 32,D3DSTATUS_CLIPUNIONGEN0 = 64,D3DSTATUS_CLIPUNIONGEN1 = 128,D3DSTATUS_CLIPUNIONGEN2 = 256,D3DSTATUS_CLIPUNIONGEN3 = 512,D3DSTATUS_CLIPUNIONGEN4 = 1024,D3DSTATUS_CLIPUNIONGEN5 = 2048,D3DSTATUS_CLIPINTERSECTIONLEFT = 4096,D3DSTATUS_CLIPINTERSECTIONRIGHT = 8192,D3DSTATUS_CLIPINTERSECTIONTOP = 16384,D3DSTATUS_CLIPINTERSECTIONBOTTOM = 32768,D3DSTATUS_CLIPINTERSECTIONFRONT = 65536,D3DSTATUS_CLIPINTERSECTIONBACK = 131072,D3DSTATUS_CLIPINTERSECTIONGEN0 = 262144,D3DSTATUS_CLIPINTERSECTIONGEN1 = 524288,D3DSTATUS_CLIPINTERSECTIONGEN2 = 1048576,D3DSTATUS_CLIPINTERSECTIONGEN3 = 2097152,D3DSTATUS_CLIPINTERSECTIONGEN4 = 4194304,D3DSTATUS_CLIPINTERSECTIONGEN5 = 8388608,D3DSTATUS_ZNOTVISIBLE = 16777216,D3DSTATUS_CLIPUNIONALL = 4095,D3DSTATUS_CLIPINTERSECTIONALL = 16773120,D3DSTATUS_DEFAULT = 33550336,};
enum MACRO_DBFINDONE {DBFINDONE = 0x4,DBMORE = 0x10,};
enum MACRO_DBL_RADIX {DBL_RADIX = 2,DBL_ROUNDS = 1,};
enum MACRO_DBMAXCHAR {DBMAXCHAR = 256,};
enum MACRO_DBNOCOUNT {DBNOCOUNT = 9,};
enum MACRO_DBPROPVAL {DBPROPVAL_BMK_NUMERIC = 0x1,DBPROPVAL_BMK_KEY = 0x2,DBPROPVAL_CL_START = 0x1,DBPROPVAL_CL_END = 0x2,DBPROPVAL_CU_DML_STATEMENTS = 0x1,DBPROPVAL_CU_TABLE_DEFINITION = 0x2,DBPROPVAL_CU_INDEX_DEFINITION = 0x4,DBPROPVAL_CU_PRIVILEGE_DEFINITION = 0x8,DBPROPVAL_CD_NOTNULL = 0x1,DBPROPVAL_CB_NULL = 0x1,DBPROPVAL_CB_NON_NULL = 0x2,DBPROPVAL_FU_NOT_SUPPORTED = 0x1,DBPROPVAL_FU_COLUMN = 0x2,DBPROPVAL_FU_TABLE = 0x4,DBPROPVAL_FU_CATALOG = 0x8,DBPROPVAL_GB_NOT_SUPPORTED = 0x1,DBPROPVAL_GB_EQUALS_SELECT = 0x2,DBPROPVAL_GB_CONTAINS_SELECT = 0x4,DBPROPVAL_GB_NO_RELATION = 0x8,DBPROPVAL_HT_DIFFERENT_CATALOGS = 0x1,DBPROPVAL_HT_DIFFERENT_PROVIDERS = 0x2,DBPROPVAL_IC_UPPER = 0x1,DBPROPVAL_IC_LOWER = 0x2,DBPROPVAL_IC_SENSITIVE = 0x4,DBPROPVAL_IC_MIXED = 0x8,DBPROPVAL_NP_OKTODO = 0x1,DBPROPVAL_NP_ABOUTTODO = 0x2,DBPROPVAL_NP_SYNCHAFTER = 0x4,DBPROPVAL_NP_FAILEDTODO = 0x8,DBPROPVAL_NP_DIDEVENT = 0x10,DBPROPVAL_NC_END = 0x1,DBPROPVAL_NC_HIGH = 0x2,DBPROPVAL_NC_LOW = 0x4,DBPROPVAL_NC_START = 0x8,DBPROPVAL_OO_BLOB = 0x1,DBPROPVAL_OO_IPERSIST = 0x2,DBPROPVAL_CB_DELETE = 0x1,DBPROPVAL_CB_PRESERVE = 0x2,DBPROPVAL_SU_DML_STATEMENTS = 0x1,DBPROPVAL_SU_TABLE_DEFINITION = 0x2,DBPROPVAL_SU_INDEX_DEFINITION = 0x4,DBPROPVAL_SU_PRIVILEGE_DEFINITION = 0x8,DBPROPVAL_SQ_CORRELATEDSUBQUERIES = 0x1,DBPROPVAL_SQ_COMPARISON = 0x2,DBPROPVAL_SQ_EXISTS = 0x4,DBPROPVAL_SQ_IN = 0x8,DBPROPVAL_SQ_QUANTIFIED = 0x10,DBPROPVAL_SS_ISEQUENTIALSTREAM = 0x1,DBPROPVAL_SS_ISTREAM = 0x2,DBPROPVAL_SS_ISTORAGE = 0x4,DBPROPVAL_SS_ILOCKBYTES = 0x8,DBPROPVAL_TI_CHAOS = 0x10,DBPROPVAL_TI_READUNCOMMITTED = 0x100,DBPROPVAL_TI_BROWSE = 0x100,DBPROPVAL_TI_CURSORSTABILITY = 0x1000,DBPROPVAL_TI_READCOMMITTED = 0x1000,DBPROPVAL_TI_REPEATABLEREAD = 0x10000,DBPROPVAL_TI_SERIALIZABLE = 0x100000,DBPROPVAL_TI_ISOLATED = 0x100000,DBPROPVAL_TR_COMMIT_DC = 0x1,DBPROPVAL_TR_COMMIT = 0x2,DBPROPVAL_TR_COMMIT_NO = 0x4,DBPROPVAL_TR_ABORT_DC = 0x8,DBPROPVAL_TR_ABORT = 0x10,DBPROPVAL_TR_ABORT_NO = 0x20,DBPROPVAL_TR_DONTCARE = 0x40,DBPROPVAL_TR_BOTH = 0x80,DBPROPVAL_TR_NONE = 0x100,DBPROPVAL_TR_OPTIMISTIC = 0x200,DBPROPVAL_RT_FREETHREAD = 0x1,DBPROPVAL_RT_APTMTTHREAD = 0x2,DBPROPVAL_RT_SINGLETHREAD = 0x4,DBPROPVAL_UP_CHANGE = 0x1,DBPROPVAL_UP_DELETE = 0x2,DBPROPVAL_UP_INSERT = 0x4,DBPROPVAL_SQL_NONE = 0x0,DBPROPVAL_SQL_ODBC_MINIMUM = 0x1,DBPROPVAL_SQL_ODBC_CORE = 0x2,DBPROPVAL_SQL_ODBC_EXTENDED = 0x4,DBPROPVAL_SQL_ANSI89_IEF = 0x8,DBPROPVAL_SQL_ANSI92_ENTRY = 0x10,DBPROPVAL_SQL_FIPS_TRANSITIONAL = 0x20,DBPROPVAL_SQL_ANSI92_INTERMEDIATE = 0x40,DBPROPVAL_SQL_ANSI92_FULL = 0x80,DBPROPVAL_SQL_ESCAPECLAUSES = 0x100,DBPROPVAL_IT_BTREE = 0x1,DBPROPVAL_IT_HASH = 0x2,DBPROPVAL_IT_CONTENT = 0x3,DBPROPVAL_IT_OTHER = 0x4,DBPROPVAL_IN_DISALLOWNULL = 0x1,DBPROPVAL_IN_IGNORENULL = 0x2,DBPROPVAL_IN_IGNOREANYNULL = 0x4,DBPROPVAL_TC_NONE = 0x0,DBPROPVAL_TC_DML = 0x1,DBPROPVAL_TC_DDL_COMMIT = 0x2,DBPROPVAL_TC_DDL_IGNORE = 0x4,DBPROPVAL_TC_ALL = 0x8,DBPROPVAL_OA_NOTSUPPORTED = 0x1,DBPROPVAL_OA_ATEXECUTE = 0x2,DBPROPVAL_OA_ATROWRELEASE = 0x4,DBPROPVAL_MR_NOTSUPPORTED = 0x0,DBPROPVAL_MR_SUPPORTED = 0x1,DBPROPVAL_MR_CONCURRENT = 0x2,DBPROPVAL_PT_GUID_NAME = 0x1,DBPROPVAL_PT_GUID_PROPID = 0x2,DBPROPVAL_PT_NAME = 0x4,DBPROPVAL_PT_GUID = 0x8,DBPROPVAL_PT_PROPID = 0x10,DBPROPVAL_PT_PGUID_NAME = 0x20,DBPROPVAL_PT_PGUID_PROPID = 0x40,DBPROPVAL_NT_SINGLEROW = 0x1,DBPROPVAL_NT_MULTIPLEROWS = 0x2,DBPROPVAL_ASYNCH_INITIALIZE = 0x1,DBPROPVAL_ASYNCH_SEQUENTIALPOPULATION = 0x2,DBPROPVAL_ASYNCH_RANDOMPOPULATION = 0x4,DBPROPVAL_OP_EQUAL = 0x1,DBPROPVAL_OP_RELATIVE = 0x2,DBPROPVAL_OP_STRING = 0x4,DBPROPVAL_CO_EQUALITY = 0x1,DBPROPVAL_CO_STRING = 0x2,DBPROPVAL_CO_CASESENSITIVE = 0x4,DBPROPVAL_CO_CASEINSENSITIVE = 0x8,DBPROPVAL_CO_CONTAINS = 0x10,DBPROPVAL_CO_BEGINSWITH = 0x20,DBPROPVAL_ASYNCH_BACKGROUNDPOPULATION = 0x8,DBPROPVAL_ASYNCH_PREPOPULATE = 0x10,DBPROPVAL_ASYNCH_POPULATEONDEMAND = 0x20,DBPROPVAL_LM_NONE = 0x1,DBPROPVAL_LM_SINGLEROW = 0x2,DBPROPVAL_SQL_SUBMINIMUM = 0x200,DBPROPVAL_DST_TDP = 0x1,DBPROPVAL_DST_MDP = 0x2,DBPROPVAL_DST_TDPANDMDP = 0x3,};
enum MACRO_DBSETFUNC {DBSETFUNC_NONE = 0x0,DBSETFUNC_ALL = 0x1,DBSETFUNC_DISTINCT = 0x2,};
enum MACRO_DBSETHOST {DBSETHOST = 1,DBSETUSER = 2,};
enum MACRO_DBSETLANG {DBSETLANG = 6,};
enum MACRO_DBSETTIME {DBSETTIME = 17,};
enum MACRO_DBTXTSLEN {DBTXTSLEN = 8,DBTXPLEN = 16,};
enum MACRO_DBUNKNOWN {DBUNKNOWN = 2,};
enum MACRO_DC_ACTIVE {DC_ACTIVE = 0x1,DC_SMALLCAP = 0x2,DC_ICON = 0x4,DC_TEXT = 0x8,DC_INBUTTON = 0x10,DC_GRADIENT = 0x20,};
enum MACRO_DDBLTFAST {DDBLTFAST_NOCOLORKEY = 0x0,DDBLTFAST_SRCCOLORKEY = 0x1,DDBLTFAST_DESTCOLORKEY = 0x2,DDBLTFAST_WAIT = 0x10,};
enum MACRO_DDENUMRET {DDENUMRET_CANCEL = 0,DDENUMRET_OK = 1,};
enum MACRO_DDVPBCAPS {DDVPBCAPS_SOURCE = 0x1,DDVPBCAPS_DESTINATION = 0x2,};
enum MACRO_DIDEVTYPE {DIDEVTYPE_DEVICE = 1,DIDEVTYPE_MOUSE = 2,DIDEVTYPE_KEYBOARD = 3,DIDEVTYPE_JOYSTICK = 4,DIDEVTYPE_HID = 65536,};
enum MACRO_DMCOLLATE {DMCOLLATE_FALSE = 0,DMCOLLATE_TRUE = 1,};
enum MACRO_DPGETCAPS {DPGETCAPS_GUARANTEED = 0x1,};
enum MACRO_DPRECEIVE {DPRECEIVE_ALL = 0x1,DPRECEIVE_TOPLAYER = 0x2,DPRECEIVE_FROMPLAYER = 0x4,DPRECEIVE_PEEK = 0x8,};
enum MACRO_DPSESSION {DPSESSION_NEWPLAYERSDISABLED = 0x1,DPSESSION_MIGRATEHOST = 0x4,DPSESSION_NOMESSAGEID = 0x8,DPSESSION_JOINDISABLED = 0x20,DPSESSION_KEEPALIVE = 0x40,DPSESSION_NODATAMESSAGES = 0x80,DPSESSION_SECURESERVER = 0x100,DPSESSION_PRIVATE = 0x200,DPSESSION_PASSWORDREQUIRED = 0x400,DPSESSION_MULTICASTSERVER = 0x800,DPSESSION_CLIENTSERVER = 0x1000,};
enum MACRO_DRAFTMODE {DRAFTMODE = 7,QUERYESCSUPPORT = 8,};
enum MACRO_DSBSTATUS {DSBSTATUS_PLAYING = 0x1,DSBSTATUS_BUFFERLOST = 0x2,DSBSTATUS_LOOPING = 0x4,};
enum MACRO_DSBVOLUME {DSBVOLUME_MIN = -10000,DSBVOLUME_MAX = 0,};
enum MACRO_DSCBSTART {DSCBSTART_LOOPING = 0x1,};
enum MACRO_DSETUPERR {DSETUPERR_SUCCESS_RESTART = 1,DSETUPERR_SUCCESS = 0,DSETUPERR_BADWINDOWSVERSION = -1,DSETUPERR_SOURCEFILENOTFOUND = -2,DSETUPERR_BADSOURCESIZE = -3,DSETUPERR_BADSOURCETIME = -4,DSETUPERR_NOCOPY = -5,DSETUPERR_OUTOFDISKSPACE = -6,DSETUPERR_CANTFINDINF = -7,DSETUPERR_CANTFINDDIR = -8,DSETUPERR_INTERNAL = -9,DSETUPERR_NTWITHNO3D = -10,DSETUPERR_UNKNOWNOS = -11,DSETUPERR_USERHITCANCEL = -12,DSETUPERR_NOTPREINSTALLEDONNT = -13,};
enum MACRO_DSSPEAKER {DSSPEAKER_HEADPHONE = 0x1,DSSPEAKER_MONO = 0x2,DSSPEAKER_QUAD = 0x3,DSSPEAKER_STEREO = 0x4,DSSPEAKER_SURROUND = 0x5,DSSPEAKER_GEOMETRY_MIN = 0x5,DSSPEAKER_GEOMETRY_NARROW = 0xA,DSSPEAKER_GEOMETRY_WIDE = 0x14,DSSPEAKER_GEOMETRY_MAX = 0xB4,};
enum MACRO_DSTINVERT {DSTINVERT = 0x550009,};
enum MACRO_DUPLICATE {DUPLICATE_CLOSE_SOURCE = 0x1,DUPLICATE_SAME_ACCESS = 0x2,};
enum MACRO_DWORDLONG {LOWPART_DWORDLONG = 0xFFFFFFFFFFFFFFFF,HIGHPART_DWORDLONG = 0xFFFFFFFF00000000,};
enum MACRO_EDK_CACHE {EDK_CACHE_READ = 0x1,EDK_CACHE_WRITE = 0x2,};
enum MACRO_EDK_MAJOR {EDK_MAJOR_VERSION = 1,EDK_MINOR_VERSION = 0,EDK_VERSION_NUMBER = 256,};
enum MACRO_ED_DEVCAP {ED_DEVCAP_CAN_RECORD = 4097,ED_DEVCAP_CAN_RECORD_STROBE = 4098,ED_DEVCAP_HAS_AUDIO = 4099,ED_DEVCAP_HAS_VIDEO = 4100,ED_DEVCAP_USES_FILES = 4101,ED_DEVCAP_CAN_SAVE = 4102,ED_DEVCAP_DEVICE_TYPE = 4103,ED_DEVTYPE_VCR = 4104,ED_DEVTYPE_LASERDISK = 4105,ED_DEVTYPE_ATR = 4106,ED_DEVTYPE_DDR = 4107,ED_DEVTYPE_ROUTER = 4108,ED_DEVTYPE_KEYER = 4109,ED_DEVTYPE_MIXER_VIDEO = 4110,ED_DEVTYPE_DVE = 4111,ED_DEVTYPE_WIPEGEN = 4112,ED_DEVTYPE_MIXER_AUDIO = 4113,ED_DEVTYPE_CG = 4114,ED_DEVTYPE_TBC = 4115,ED_DEVTYPE_TCG = 4116,ED_DEVTYPE_GPI = 4117,ED_DEVTYPE_JOYSTICK = 4118,ED_DEVTYPE_KEYBOARD = 4119,ED_DEVCAP_EXTERNAL_DEVICE_ID = 4120,ED_DEVCAP_TIMECODE_READ = 4121,ED_DEVCAP_TIMECODE_WRITE = 4122,ED_DEVCAP_CTLTRK_READ = 4123,ED_DEVCAP_INDEX_READ = 4124,ED_DEVCAP_PREROLL = 4125,ED_DEVCAP_POSTROLL = 4126,ED_DEVCAP_SYNC_ACCURACY = 4127,ED_SYNCACC_PRECISE = 4128,ED_SYNCACC_FRAME = 4129,ED_SYNCACC_ROUGH = 4130,ED_DEVCAP_NORMAL_RATE = 4131,ED_RATE_24 = 4132,ED_RATE_25 = 4133,ED_RATE_2997 = 4134,ED_RATE_30 = 4135,ED_DEVCAP_CAN_PREVIEW = 4136,ED_DEVCAP_CAN_MONITOR_SOURCES = 4137,ED_DEVCAP_CAN_TEST = 4138,ED_DEVCAP_VIDEO_INPUTS = 4139,ED_DEVCAP_AUDIO_INPUTS = 4140,ED_DEVCAP_NEEDS_CALIBRATING = 4141,ED_DEVCAP_SEEK_TYPE = 4142,ED_SEEK_PERFECT = 4143,ED_SEEK_FAST = 4144,ED_SEEK_SLOW = 4145,ED_POWER_ON = 4146,ED_POWER_OFF = 4147,ED_POWER_STANDBY = 4148,ED_ACTIVE = 4149,ED_INACTIVE = 4150,ED_ALL = 4151,ED_TEST = 4152,ED_TRANSCAP_CAN_EJECT = 4196,ED_TRANSCAP_CAN_BUMP_PLAY = 4197,ED_TRANSCAP_CAN_PLAY_BACKWARDS = 4198,ED_TRANSCAP_CAN_SET_EE = 4199,ED_TRANSCAP_CAN_SET_PB = 4200,ED_TRANSCAP_CAN_DELAY_VIDEO_IN = 4201,ED_TRANSCAP_CAN_DELAY_VIDEO_OUT = 4202,ED_TRANSCAP_CAN_DELAY_AUDIO_IN = 4203,ED_TRANSCAP_CAN_DELAY_AUDIO_OUT = 4204,ED_TRANSCAP_FWD_VARIABLE_MAX = 4205,ED_TRANSCAP_REV_VARIABLE_MAX = 4206,ED_TRANSCAP_NUM_AUDIO_TRACKS = 4207,ED_TRANSCAP_LTC_TRACK = 4208,ED_TRANSCAP_NEEDS_TBC = 4209,ED_TRANSCAP_NEEDS_CUEING = 4210,ED_TRANSCAP_CAN_INSERT = 4211,ED_TRANSCAP_CAN_ASSEMBLE = 4212,ED_TRANSCAP_FIELD_STEP = 4213,ED_TRANSCAP_CLOCK_INC_RATE = 4214,ED_TRANSCAP_CAN_DETECT_LENGTH = 4215,ED_TRANSCAP_CAN_FREEZE = 4216,ED_TRANSCAP_HAS_TUNER = 4217,ED_TRANSCAP_HAS_TIMER = 4218,ED_TRANSCAP_HAS_CLOCK = 4219,ED_MEDIA_SPIN_UP = 4226,ED_MEDIA_SPIN_DOWN = 4227,ED_MEDIA_UNLOAD = 4228,ED_MODE_PLAY = 4296,ED_MODE_STOP = 4297,ED_MODE_FREEZE = 4298,ED_MODE_THAW = 4299,ED_MODE_FF = 4300,ED_MODE_REW = 4301,ED_MODE_RECORD = 4302,ED_MODE_RECORD_STROBE = 4303,ED_MODE_STEP = 4304,ED_MODE_SHUTTLE = 4305,ED_MODE_EDIT_CUE = 4306,ED_MODE_VAR_SPEED = 4307,ED_MODE_PERFORM = 4308,ED_MODE_LINK_ON = 4376,ED_MODE_LINK_OFF = 4377,ED_TCG_TIMECODE_TYPE = 4496,ED_TCG_SMPTE_LTC = 4497,ED_TCG_SMPTE_VITC = 4498,ED_TCG_MIDI_QF = 4499,ED_TCG_MIDI_FULL = 4500,ED_TCG_FRAMERATE = 4501,ED_FORMAT_SMPTE_30 = 4502,ED_FORMAT_SMPTE_30DROP = 4503,ED_FORMAT_SMPTE_25 = 4504,ED_FORMAT_SMPTE_24 = 4505,ED_TCG_SYNC_SOURCE = 4506,ED_TCG_VIDEO = 4507,ED_TCG_READER = 4508,ED_TCG_FREE = 4509,ED_TCG_REFERENCE_SOURCE = 4510,ED_TCR_SOURCE = 4512,ED_TCR_LTC = 4513,ED_TCR_VITC = 4514,ED_TCR_CT = 4515,ED_TCD_SOURCE = 4518,ED_TCR = 4519,ED_TCG = 4520,ED_TCD_SIZE = 4521,ED_SMALL = 4522,ED_MED = 4523,ED_LARGE = 4524,ED_TCD_POSITION = 4525,ED_TOP = 1,ED_MIDDLE = 2,ED_BOTTOM = 4,ED_LEFT = 256,ED_CENTER = 512,ED_RIGHT = 1024,ED_TCD_INTENSITY = 4532,ED_HIGH = 4533,ED_LOW = 4534,ED_TCD_TRANSPARENCY = 4535,ED_TCD_INVERT = 4536,ED_MODE = 4596,ED_ERROR = 4597,ED_LOCAL = 4598,ED_RECORD_INHIBIT = 4599,ED_SERVO_LOCK = 4600,ED_MEDIA_PRESENT = 4601,ED_MEDIA_LENGTH = 4602,ED_MEDIA_SIZE = 4603,ED_MEDIA_TRACK_COUNT = 4604,ED_MEDIA_TRACK_LENGTH = 4605,ED_MEDIA_SIDE = 4606,ED_MEDIA_TYPE = 4607,ED_MEDIA_VHS = 4608,ED_MEDIA_SVHS = 4609,ED_MEDIA_HI8 = 4610,ED_MEDIA_UMATIC = 4611,ED_MEDIA_DVC = 4612,ED_MEDIA_1_INCH = 4613,ED_MEDIA_D1 = 4614,ED_MEDIA_D2 = 4615,ED_MEDIA_D3 = 4616,ED_MEDIA_D5 = 4617,ED_MEDIA_DBETA = 4618,ED_MEDIA_BETA = 4619,ED_MEDIA_8MM = 4620,ED_MEDIA_DDR = 4621,ED_MEDIA_OTHER = 4622,ED_MEDIA_CLV = 4623,ED_MEDIA_CAV = 4624,ED_MEDIA_POSITION = 4625,ED_LINK_MODE = 4626,ED_TRANSBASIC_TIME_FORMAT = 4636,ED_FORMAT_MILLISECONDS = 4637,ED_FORMAT_FRAMES = 4638,ED_FORMAT_REFERENCE_TIME = 4639,ED_FORMAT_HMSF = 4643,ED_FORMAT_TMSF = 4644,ED_TRANSBASIC_TIME_REFERENCE = 4645,ED_TIMEREF_TIMECODE = 4646,ED_TIMEREF_CONTROL_TRACK = 4647,ED_TIMEREF_INDEX = 4648,ED_TRANSBASIC_SUPERIMPOSE = 4649,ED_TRANSBASIC_END_STOP_ACTION = 4650,ED_TRANSBASIC_RECORD_FORMAT = 4651,ED_RECORD_FORMAT_SP = 4652,ED_RECORD_FORMAT_LP = 4653,ED_RECORD_FORMAT_EP = 4654,ED_TRANSBASIC_STEP_COUNT = 4655,ED_TRANSBASIC_STEP_UNIT = 4656,ED_STEP_FIELD = 4657,ED_STEP_FRAME = 4658,ED_STEP_3_2 = 4659,ED_TRANSBASIC_PREROLL = 4660,ED_TRANSBASIC_RECPREROLL = 4661,ED_TRANSBASIC_POSTROLL = 4662,ED_TRANSBASIC_EDIT_DELAY = 4663,ED_TRANSBASIC_PLAYTC_DELAY = 4664,ED_TRANSBASIC_RECTC_DELAY = 4665,ED_TRANSBASIC_EDIT_FIELD = 4666,ED_TRANSBASIC_FRAME_SERVO = 4667,ED_TRANSBASIC_CF_SERVO = 4668,ED_TRANSBASIC_SERVO_REF = 4669,ED_REF_EXTERNAL = 4670,ED_REF_INPUT = 4671,ED_REF_INTERNAL = 4672,ED_REF_AUTO = 4673,ED_TRANSBASIC_WARN_GL = 4674,ED_TRANSBASIC_SET_TRACKING = 4675,ED_TRACKING_PLUS = 4676,ED_TRACKING_MINUS = 4677,ED_TRACKING_RESET = 4678,ED_TRANSBASIC_SET_FREEZE_TIMEOUT = 4679,ED_TRANSBASIC_VOLUME_NAME = 4680,ED_TRANSBASIC_BALLISTIC_1 = 4681,ED_TRANSBASIC_BALLISTIC_2 = 4682,ED_TRANSBASIC_BALLISTIC_3 = 4683,ED_TRANSBASIC_BALLISTIC_4 = 4684,ED_TRANSBASIC_BALLISTIC_5 = 4685,ED_TRANSBASIC_BALLISTIC_6 = 4686,ED_TRANSBASIC_BALLISTIC_7 = 4687,ED_TRANSBASIC_BALLISTIC_8 = 4688,ED_TRANSBASIC_BALLISTIC_9 = 4689,ED_TRANSBASIC_BALLISTIC_10 = 4690,ED_TRANSBASIC_BALLISTIC_11 = 4691,ED_TRANSBASIC_BALLISTIC_12 = 4692,ED_TRANSBASIC_BALLISTIC_13 = 4693,ED_TRANSBASIC_BALLISTIC_14 = 4694,ED_TRANSBASIC_BALLISTIC_15 = 4695,ED_TRANSBASIC_BALLISTIC_16 = 4696,ED_TRANSBASIC_BALLISTIC_17 = 4697,ED_TRANSBASIC_BALLISTIC_18 = 4698,ED_TRANSBASIC_BALLISTIC_19 = 4699,ED_TRANSBASIC_BALLISTIC_20 = 4700,ED_TRANSBASIC_SETCLOCK = 4701,ED_TRANSBASIC_SET_COUNTER_FORMAT = 4702,ED_TRANSBASIC_SET_COUNTER_VALUE = 4703,ED_TRANSBASIC_SETTUNER_CH_UP = 4704,ED_TRANSBASIC_SETTUNER_CH_DN = 4705,ED_TRANSBASIC_SETTUNER_SK_UP = 4706,ED_TRANSBASIC_SETTUNER_SK_DN = 4707,ED_TRANSBASIC_SETTUNER_CH = 4708,ED_TRANSBASIC_SETTUNER_NUM = 4709,ED_TRANSBASIC_SETTIMER_EVENT = 4710,ED_TRANSBASIC_SETTIMER_STARTDAY = 4711,ED_TRANSBASIC_SETTIMER_STARTTIME = 4712,ED_TRANSBASIC_SETTIMER_STOPDAY = 4713,ED_TRANSBASIC_SETTIMER_STOPTIME = 4714,ED_TRANSVIDEO_SET_OUTPUT = 4726,ED_E2E = 4727,ED_PLAYBACK = 4728,ED_OFF = 4729,ED_TRANSVIDEO_SET_SOURCE = 4730,ED_TRANSAUDIO_ENABLE_OUTPUT = 4736,ED_AUDIO_ALL = 268435456,ED_AUDIO_1 = 1,ED_AUDIO_2 = 2,ED_AUDIO_3 = 4,ED_AUDIO_4 = 8,ED_AUDIO_5 = 16,ED_AUDIO_6 = 32,ED_AUDIO_7 = 64,ED_AUDIO_8 = 128,ED_AUDIO_9 = 256,ED_AUDIO_10 = 512,ED_AUDIO_11 = 1024,ED_AUDIO_12 = 2048,ED_AUDIO_13 = 4096,ED_AUDIO_14 = 8192,ED_AUDIO_15 = 16384,ED_AUDIO_16 = 32768,ED_AUDIO_17 = 65536,ED_AUDIO_18 = 131072,ED_AUDIO_19 = 262144,ED_AUDIO_20 = 524288,ED_AUDIO_21 = 1048576,ED_AUDIO_22 = 2097152,ED_AUDIO_23 = 4194304,ED_AUDIO_24 = 8388608,ED_VIDEO = 33554432,ED_TRANSAUDIO_ENABLE_RECORD = 4738,ED_TRANSAUDIO_ENABLE_SELSYNC = 4739,ED_TRANSAUDIO_SET_SOURCE = 4740,ED_TRANSAUDIO_SET_MONITOR = 4741,ED_INVALID = 4748,ED_EXECUTING = 4749,ED_REGISTER = 4750,ED_DELETE = 4751,ED_EDIT_HEVENT = 4752,ED_EDIT_TEST = 4753,ED_EDIT_IMMEDIATE = 4754,ED_EDIT_MODE = 4755,ED_EDIT_MODE_ASSEMBLE = 4756,ED_EDIT_MODE_INSERT = 4757,ED_EDIT_MODE_CRASH_RECORD = 4758,ED_EDIT_MODE_BOOKMARK_TIME = 4759,ED_EDIT_MODE_BOOKMARK_CHAPTER = 4760,ED_EDIT_MASTER = 4762,ED_EDIT_TRACK = 4763,ED_EDIT_SRC_INPOINT = 4764,ED_EDIT_SRC_OUTPOINT = 4765,ED_EDIT_REC_INPOINT = 4766,ED_EDIT_REC_OUTPOINT = 4767,ED_EDIT_REHEARSE_MODE = 4768,ED_EDIT_BVB = 4769,ED_EDIT_VBV = 4770,ED_EDIT_VVV = 4771,ED_EDIT_PERFORM = 4772,ED_EDIT_ABORT = 4773,ED_EDIT_TIMEOUT = 4774,ED_EDIT_SEEK = 4775,ED_EDIT_SEEK_MODE = 4776,ED_EDIT_SEEK_EDIT_IN = 4777,ED_EDIT_SEEK_EDIT_OUT = 4778,ED_EDIT_SEEK_PREROLL = 4779,ED_EDIT_SEEK_PREROLL_CT = 4780,ED_EDIT_SEEK_BOOKMARK = 4781,ED_ERR_DEVICE_NOT_READY = 4796,};
enum MACRO_EECONTEXT {EECONTEXT_SESSION = 0x1,EECONTEXT_VIEWER = 0x2,EECONTEXT_REMOTEVIEWER = 0x3,EECONTEXT_SEARCHVIEWER = 0x4,EECONTEXT_ADDRBOOK = 0x5,EECONTEXT_SENDNOTEMESSAGE = 0x6,EECONTEXT_READNOTEMESSAGE = 0x7,EECONTEXT_SENDPOSTMESSAGE = 0x8,EECONTEXT_READPOSTMESSAGE = 0x9,EECONTEXT_READREPORTMESSAGE = 0xA,EECONTEXT_SENDRESENDMESSAGE = 0xB,EECONTEXT_PROPERTYSHEETS = 0xC,EECONTEXT_ADVANCEDCRITERIA = 0xD,EECONTEXT_TASK = 0xE,};
enum MACRO_ENCRYPTED {ENCRYPTED_PWLEN = 16,SESSION_PWLEN = 24,};
enum MACRO_ENUM_TYPE {ENUM_TYPE_VERSION = 0x200,};
enum MACRO_EPHEMERAL {EPHEMERAL = 135,};
enum MACRO_ERCONTEXT {ERCONTEXT_INFO = 0x1,ERCONTEXT_EXEC = 0x2,};
enum MACRO_ERROR_FCB {ERROR_FCB_UNAVAILABLE = 35,ERROR_DUP_FCB = 81,ERROR_NOT_FROZEN = 90,};
enum MACRO_EVENT_MIN {EVENT_MIN = 0x1,EVENT_MAX = 0x7FFFFFFF,EVENT_SYSTEM_SOUND = 0x1,EVENT_SYSTEM_ALERT = 0x2,EVENT_SYSTEM_FOREGROUND = 0x3,EVENT_SYSTEM_MENUSTART = 0x4,EVENT_SYSTEM_MENUEND = 0x5,EVENT_SYSTEM_MENUPOPUPSTART = 0x6,EVENT_SYSTEM_MENUPOPUPEND = 0x7,EVENT_SYSTEM_CAPTURESTART = 0x8,EVENT_SYSTEM_CAPTUREEND = 0x9,EVENT_SYSTEM_MOVESIZESTART = 0xA,EVENT_SYSTEM_MOVESIZEEND = 0xB,EVENT_SYSTEM_CONTEXTHELPSTART = 0xC,EVENT_SYSTEM_CONTEXTHELPEND = 0xD,EVENT_SYSTEM_DRAGDROPSTART = 0xE,EVENT_SYSTEM_DRAGDROPEND = 0xF,EVENT_SYSTEM_DIALOGSTART = 0x10,EVENT_SYSTEM_DIALOGEND = 0x11,EVENT_SYSTEM_SCROLLINGSTART = 0x12,EVENT_SYSTEM_SCROLLINGEND = 0x13,EVENT_SYSTEM_SWITCHSTART = 0x14,EVENT_SYSTEM_SWITCHEND = 0x15,EVENT_SYSTEM_MINIMIZESTART = 0x16,EVENT_SYSTEM_MINIMIZEEND = 0x17,EVENT_OBJECT_CREATE = 0x8000,EVENT_OBJECT_DESTROY = 0x8001,EVENT_OBJECT_SHOW = 0x8002,EVENT_OBJECT_HIDE = 0x8003,EVENT_OBJECT_REORDER = 0x8004,EVENT_OBJECT_FOCUS = 0x8005,EVENT_OBJECT_SELECTION = 0x8006,EVENT_OBJECT_SELECTIONADD = 0x8007,EVENT_OBJECT_SELECTIONREMOVE = 0x8008,EVENT_OBJECT_SELECTIONWITHIN = 0x8009,EVENT_OBJECT_STATECHANGE = 0x800A,EVENT_OBJECT_LOCATIONCHANGE = 0x800B,EVENT_OBJECT_NAMECHANGE = 0x800C,EVENT_OBJECT_DESCRIPTIONCHANGE = 0x800D,EVENT_OBJECT_VALUECHANGE = 0x800E,EVENT_OBJECT_PARENTCHANGE = 0x800F,EVENT_OBJECT_HELPCHANGE = 0x8010,EVENT_OBJECT_DEFACTIONCHANGE = 0x8011,EVENT_OBJECT_ACCELERATORCHANGE = 0x8012,};
enum MACRO_EXCEPTION {EXCEPTION_EXECUTE_HANDLER = 1,EXCEPTION_CONTINUE_SEARCH = 0,EXCEPTION_CONTINUE_EXECUTION = -1,};
enum MACRO_EXCHIVERB {EXCHIVERB_OPEN = 0,EXCHIVERB_RESERVED_COMPOSE = 100,EXCHIVERB_RESERVED_OPEN = 101,EXCHIVERB_REPLYTOSENDER = 102,EXCHIVERB_REPLYTOALL = 103,EXCHIVERB_FORWARD = 104,EXCHIVERB_PRINT = 105,EXCHIVERB_SAVEAS = 106,EXCHIVERB_RESERVED_DELIVERY = 107,EXCHIVERB_REPLYTOFOLDER = 108,};
enum MACRO_EXITEVENT {EXITEVENT_INVALID = 0,EXITEVENT_CERTISSUED = 1,EXITEVENT_CERTPENDING = 2,EXITEVENT_CERTDENIED = 4,EXITEVENT_CERTREVOKED = 8,EXITEVENT_CERTRETRIEVEPENDING = 16,EXITEVENT_CRLISSUED = 32,EXITEVENT_SHUTDOWN = 64,};
enum MACRO_EXPROGRAM {EXPROGRAM = 7,EXRESOURCE = 8,};
enum MACRO_EXTENSION {EXTENSION_CRITICAL_FLAG = 0x1,EXTENSION_DISABLE_FLAG = 0x2,EXTENSION_POLICY_MASK = 0xFFFF,EXTENSION_ORIGIN_REQUEST = 0x10000,EXTENSION_ORIGIN_POLICY = 0x20000,EXTENSION_ORIGIN_ADMIN = 0x30000,EXTENSION_ORIGIN_SERVER = 0x40000,EXTENSION_ORIGIN_MASK = 0xF0000,};
enum MACRO_FILE_CASE {FILE_CASE_SENSITIVE_SEARCH = 0x1,FILE_CASE_PRESERVED_NAMES = 0x2,FILE_UNICODE_ON_DISK = 0x4,FILE_PERSISTENT_ACLS = 0x8,FILE_FILE_COMPRESSION = 0x10,FILE_VOLUME_QUOTAS = 0x20,FILE_SUPPORTS_SPARSE_FILES = 0x40,FILE_SUPPORTS_REPARSE_POINTS = 0x80,FILE_SUPPORTS_REMOTE_STORAGE = 0x100,FILE_VOLUME_IS_COMPRESSED = 0x8000,FILE_SUPPORTS_OBJECT_IDS = 0x10000,FILE_SUPPORTS_ENCRYPTION = 0x20000,};
enum MACRO_FILE_FLAG {FILE_FLAG_WRITE_THROUGH = 0x80000000,FILE_FLAG_OVERLAPPED = 0x40000000,FILE_FLAG_NO_BUFFERING = 0x20000000,FILE_FLAG_RANDOM_ACCESS = 0x10000000,FILE_FLAG_SEQUENTIAL_SCAN = 0x8000000,FILE_FLAG_DELETE_ON_CLOSE = 0x4000000,FILE_FLAG_BACKUP_SEMANTICS = 0x2000000,FILE_FLAG_POSIX_SEMANTICS = 0x1000000,FILE_FLAG_OPEN_REPARSE_POINT = 0x200000,FILE_FLAG_OPEN_NO_RECALL = 0x100000,};
enum MACRO_FILE_TYPE {FILE_TYPE_UNKNOWN = 0x0,FILE_TYPE_DISK = 0x1,FILE_TYPE_CHAR = 0x2,FILE_TYPE_PIPE = 0x3,FILE_TYPE_REMOTE = 0x8000,};
enum MACRO_FLDSTATUS {FLDSTATUS_HIGHLIGHTED = 0x1,FLDSTATUS_TAGGED = 0x2,FLDSTATUS_HIDDEN = 0x4,FLDSTATUS_DELMARKED = 0x8,};
enum MACRO_FS_LATIN1 {FS_LATIN1 = 0x1,FS_LATIN2 = 0x2,FS_CYRILLIC = 0x4,FS_GREEK = 0x8,FS_TURKISH = 0x10,FS_HEBREW = 0x20,FS_ARABIC = 0x40,FS_BALTIC = 0x80,FS_VIETNAMESE = 0x100,FS_THAI = 0x10000,FS_JISJAPAN = 0x20000,FS_CHINESESIMP = 0x40000,FS_WANSUNG = 0x80000,FS_CHINESETRAD = 0x100000,FS_JOHAB = 0x200000,FS_SYMBOL = 0x80000000,};
enum MACRO_GCS_VERBA {GCS_VERBA = 0x0,GCS_HELPTEXTA = 0x1,GCS_VALIDATEA = 0x2,GCS_VERBW = 0x4,GCS_HELPTEXTW = 0x5,GCS_VALIDATEW = 0x6,GCS_UNICODE = 0x4,GCS_VERB = 0x0,GCS_HELPTEXT = 0x1,GCS_VALIDATE = 0x2,};
enum MACRO_GIZMOTYPE {GIZMOTYPE_EDIT = 0x1,GIZMOTYPE_LISTBOX = 0x2,GIZMOTYPE_COMBOBOX = 0x4,GIZMOTYPE_BUTTONNORMAL = 0x8,GIZMOTYPE_TEXT = 0x10,GIZMOTYPE_SEPARATOR = 0x20,GIZMOTYPE_BUTTONATTRIBUTEIN = 0x40,GIZMOTYPE_BUTTONATTRIBUTEEX = 0x80,GIZMOTYPE_BUTTONCOMMAND = 0x100,};
enum MACRO_GROUP_ALL {GROUP_ALL_PARMNUM = 0,GROUP_NAME_PARMNUM = 1,GROUP_COMMENT_PARMNUM = 2,GROUP_ATTRIBUTES_PARMNUM = 3,GROUP_ALL_INFOLEVEL = 1000,GROUP_NAME_INFOLEVEL = 1001,GROUP_COMMENT_INFOLEVEL = 1002,GROUP_ATTRIBUTES_INFOLEVEL = 1003,};
enum MACRO_HINSTANCE {HINSTANCE_ERROR = 32,};
enum MACRO_HINT_MASK {UPPER_HINT_MASK = 0xFF00,LOWER_HINT_MASK = 0xFF,UPPER_GET_HINT_MASK = 0xFF00000,LOWER_GET_HINT_MASK = 0xFF00,};
enum MACRO_HKEY_PERF {HKEY_PERF_ROOT = -2147483646,};
enum MACRO_HTHSCROLL {HTHSCROLL = 6,};
enum MACRO_HTNOWHERE {HTNOWHERE = 0,HTCLIENT = 1,HTCAPTION = 2,};
enum MACRO_HTSYSMENU {HTSYSMENU = 3,HTGROWBOX = 4,};
enum MACRO_HTTOPLEFT {HTTOPLEFT = 13,};
enum MACRO_HTVSCROLL {HTVSCROLL = 7,HTMINBUTTON = 8,};
enum MACRO_ICINSTALL {ICINSTALL_UNICODE = 0x8000,ICINSTALL_FUNCTION = 0x1,ICINSTALL_DRIVER = 0x2,ICINSTALL_HDRV = 0x4,ICINSTALL_DRIVERW = 0x8002,};
enum MACRO_ICQUALITY {ICQUALITY_LOW = 0,ICQUALITY_HIGH = 10000,ICQUALITY_DEFAULT = -1,};
enum MACRO_ICVERSION {ICVERSION = 0x104,};
enum MACRO_IDS_SPACE {IDS_SPACE = 0xF000,IDS_TAB = 0xF001,IDS_CHARACTERS = 0xF002,IDS_OCTETS = 0xF003,};
enum MACRO_ID_BROWSE {ID_BROWSE_CHANGEICON = 1,ID_BROWSE_INSERTFILE = 2,ID_BROWSE_ADDCONTROL = 3,ID_BROWSE_CHANGESOURCE = 4,};
enum MACRO_ID_LENGTH {VENDOR_ID_LENGTH = 8,PRODUCT_ID_LENGTH = 16,REVISION_LENGTH = 4,SERIAL_NUMBER_LENGTH = 32,};
enum MACRO_IIS_MD_VR {IIS_MD_VR_BASE = 3000,};
enum MACRO_IME_CMODE {IME_CMODE_ALPHANUMERIC = 0x0,IME_CMODE_NATIVE = 0x1,IME_CMODE_CHINESE = 0x1,IME_CMODE_HANGEUL = 0x1,IME_CMODE_HANGUL = 0x1,IME_CMODE_JAPANESE = 0x1,IME_CMODE_KATAKANA = 0x2,IME_CMODE_LANGUAGE = 0x3,IME_CMODE_FULLSHAPE = 0x8,IME_CMODE_ROMAN = 0x10,IME_CMODE_CHARCODE = 0x20,IME_CMODE_HANJACONVERT = 0x40,IME_CMODE_SOFTKBD = 0x80,IME_CMODE_NOCONVERSION = 0x100,IME_CMODE_EUDC = 0x200,IME_CMODE_SYMBOL = 0x400,IME_CMODE_FIXED = 0x800,IME_SMODE_NONE = 0x0,IME_SMODE_PLAURALCLAUSE = 0x1,IME_SMODE_SINGLECONVERT = 0x2,IME_SMODE_AUTOMATIC = 0x4,IME_SMODE_PHRASEPREDICT = 0x8,IME_SMODE_CONVERSATION = 0x10,IME_CAND_UNKNOWN = 0x0,IME_CAND_READ = 0x1,IME_CAND_CODE = 0x2,IME_CAND_MEANING = 0x3,IME_CAND_RADICAL = 0x4,IME_CAND_STROKE = 0x5,};
enum MACRO_INFO_TYPE {IPXWAN_INTERFACE_INFO_TYPE = 8,IPX_GLOBAL_INFO_TYPE = 9,IPX_STATIC_NETBIOS_NAME_INFO_TYPE = 10,IPX_IN_TRAFFIC_FILTER_GLOBAL_INFO_TYPE = 11,IPX_OUT_TRAFFIC_FILTER_INFO_TYPE = 12,IPX_OUT_TRAFFIC_FILTER_GLOBAL_INFO_TYPE = 13,};
enum MACRO_INHERITED {INHERITED_ACCESS_ENTRY = 0x10,INHERITED_PARENT = 0x10000000,INHERITED_GRANDPARENT = 0x20000000,};
enum MACRO_INTERFACE {INTERFACE_USES_DISPEX = 0x4,INTERFACE_USES_SECURITY_MANAGER = 0x8,};
enum MACRO_INTRASITE {INTRASITE_CHECK = 0,INTERSITE_CHECK = 1,};
enum MACRO_IPX_PTYPE {IPX_PTYPE = 0x4000,IPX_FILTERPTYPE = 0x4001,IPX_STOPFILTERPTYPE = 0x4003,IPX_DSTYPE = 0x4002,IPX_EXTENDED_ADDRESS = 0x4004,IPX_RECVHDR = 0x4005,IPX_MAXSIZE = 0x4006,IPX_ADDRESS = 0x4007,IPX_GETNETINFO = 0x4008,IPX_GETNETINFO_NORIP = 0x4009,IPX_SPXGETCONNECTIONSTATUS = 0x400B,IPX_ADDRESS_NOTIFY = 0x400C,IPX_MAX_ADAPTER_NUM = 0x400D,IPX_RERIPNETNUMBER = 0x400E,IPX_RECEIVE_BROADCAST = 0x400F,IPX_IMMEDIATESPXACK = 0x4010,};
enum MACRO_IPX_ROUTE {IPX_ROUTE_FILTER_PERMIT = 1,IPX_ROUTE_FILTER_DENY = 2,};
enum MACRO_IPX_SMALL {IPX_SMALL_ROUTING_TABLE_HASH_SIZE = 31,IPX_MEDIUM_ROUTING_TABLE_HASH_SIZE = 257,IPX_LARGE_ROUTING_TABLE_HASH_SIZE = 2047,IPX_DEDICATED_LINK = 1,IPX_DIALED_LINK = 2,};
enum MACRO_JOBCANCEL {JOBCANCEL_DONT_CANCEL = 0,JOBCANCEL_CANCEL = 1,};
enum MACRO_KEYEVENTF {KEYEVENTF_EXTENDEDKEY = 0x1,KEYEVENTF_KEYUP = 0x2,};
enum MACRO_KEY_EVENT {KEY_EVENT = 0x1,MOUSE_EVENT = 0x2,WINDOW_BUFFER_SIZE_EVENT = 0x4,MENU_EVENT = 0x8,FOCUS_EVENT = 0x10,};
enum MACRO_LB_MSGMAX {LB_MSGMAX = 0x1B0,};
enum MACRO_LOGOFF_NO {LOGOFF_NO_WAIT = 0x1,LOGOFF_ORDERLY = 0x2,LOGOFF_PURGE = 0x4,LOGOFF_ABORT = 0x8,LOGOFF_QUIET = 0x10,LOGOFF_COMPLETE = 0x10000,LOGOFF_INBOUND = 0x20000,LOGOFF_OUTBOUND = 0x40000,LOGOFF_OUTBOUND_QUEUE = 0x80000,};
enum MACRO_MAPI_BEST {MAPI_BEST_ACCESS = 0x10,};
enum MACRO_MAPI_MOVE {MAPI_MOVE = 0x1,MAPI_NOREPLACE = 0x2,MAPI_DECLINE_OK = 0x4,MAPI_DIALOG = 0x8,MAPI_USE_DEFAULT = 0x40,MAPI_NO_STRINGS = 0x1,MAPI_NO_IDS = 0x2,};
enum MACRO_MAPI_ORIG {MAPI_ORIG = 0,MAPI_TO = 1,MAPI_CC = 2,MAPI_BCC = 3,MAPI_P1 = 268435456,MAPI_SUBMITTED = -2147483648,MAPI_SHORTTERM = 128,MAPI_NOTRECIP = 64,MAPI_THISSESSION = 32,MAPI_NOW = 16,MAPI_NOTRESERVED = 8,MAPI_COMPOUND = 128,MAPI_ONE_OFF_UNICODE = 32768,MAPI_ONE_OFF_NO_RICH_INFO = 1,MAPI_STORE = 1,MAPI_ADDRBOOK = 2,MAPI_FOLDER = 3,MAPI_ABCONT = 4,MAPI_MESSAGE = 5,MAPI_MAILUSER = 6,MAPI_ATTACH = 7,MAPI_DISTLIST = 8,MAPI_PROFSECT = 9,MAPI_STATUS = 10,MAPI_SESSION = 11,MAPI_FORMINFO = 12,};
enum MACRO_MAXUIDLEN {MAXUIDLEN = 64,};
enum MACRO_MAX_ALIGN {MAX_ALIGN = 16,};
enum MACRO_MAX_COLOR {MAX_COLOR_CHANNELS = 8,};
enum MACRO_MAX_ERROR {MAX_ERROR_TEXT_LEN = 160,};
enum MACRO_MAX_ULONG {MAX_ULONG = 4294967295,};
enum MACRO_MCI_FIRST {MCI_FIRST = 2048,MCI_OPEN = 2051,MCI_CLOSE = 2052,MCI_ESCAPE = 2053,MCI_PLAY = 2054,MCI_SEEK = 2055,MCI_STOP = 2056,MCI_PAUSE = 2057,MCI_INFO = 2058,MCI_GETDEVCAPS = 2059,MCI_SPIN = 2060,MCI_SET = 2061,MCI_STEP = 2062,MCI_RECORD = 2063,MCI_SYSINFO = 2064,MCI_BREAK = 2065,MCI_SAVE = 2067,MCI_STATUS = 2068,MCI_CUE = 2096,MCI_REALIZE = 2112,MCI_WINDOW = 2113,MCI_PUT = 2114,MCI_WHERE = 2115,MCI_FREEZE = 2116,MCI_UNFREEZE = 2117,MCI_LOAD = 2128,MCI_CUT = 2129,MCI_COPY = 2130,MCI_PASTE = 2131,MCI_UPDATE = 2132,MCI_RESUME = 2133,MCI_DELETE = 2134,MCI_USER_MESSAGES = 3072,MCI_LAST = 4095,MCI_ALL_DEVICE_ID = 4294967295,MCI_DEVTYPE_VCR = 513,MCI_DEVTYPE_VIDEODISC = 514,MCI_DEVTYPE_OVERLAY = 515,MCI_DEVTYPE_CD_AUDIO = 516,MCI_DEVTYPE_DAT = 517,MCI_DEVTYPE_SCANNER = 518,MCI_DEVTYPE_ANIMATION = 519,MCI_DEVTYPE_DIGITAL_VIDEO = 520,MCI_DEVTYPE_OTHER = 521,MCI_DEVTYPE_WAVEFORM_AUDIO = 522,MCI_DEVTYPE_SEQUENCER = 523,MCI_DEVTYPE_FIRST = 513,MCI_DEVTYPE_LAST = 523,MCI_DEVTYPE_FIRST_USER = 4096,MCI_MODE_NOT_READY = 524,MCI_MODE_STOP = 525,MCI_MODE_PLAY = 526,MCI_MODE_RECORD = 527,MCI_MODE_SEEK = 528,MCI_MODE_PAUSE = 529,MCI_MODE_OPEN = 530,MCI_FORMAT_MILLISECONDS = 0,MCI_FORMAT_HMS = 1,MCI_FORMAT_MSF = 2,MCI_FORMAT_FRAMES = 3,MCI_FORMAT_SMPTE_24 = 4,MCI_FORMAT_SMPTE_25 = 5,MCI_FORMAT_SMPTE_30 = 6,MCI_FORMAT_SMPTE_30DROP = 7,MCI_FORMAT_BYTES = 8,MCI_FORMAT_SAMPLES = 9,MCI_FORMAT_TMSF = 10,MCI_NOTIFY_SUCCESSFUL = 1,MCI_NOTIFY_SUPERSEDED = 2,MCI_NOTIFY_ABORTED = 4,MCI_NOTIFY_FAILURE = 8,MCI_NOTIFY = 1,MCI_WAIT = 2,MCI_FROM = 4,MCI_TO = 8,MCI_TRACK = 16,MCI_OPEN_SHAREABLE = 256,MCI_OPEN_ELEMENT = 512,MCI_OPEN_ALIAS = 1024,MCI_OPEN_ELEMENT_ID = 2048,MCI_OPEN_TYPE_ID = 4096,MCI_OPEN_TYPE = 8192,MCI_SEEK_TO_START = 256,MCI_SEEK_TO_END = 512,MCI_STATUS_ITEM = 256,MCI_STATUS_START = 512,MCI_STATUS_LENGTH = 1,MCI_STATUS_POSITION = 2,MCI_STATUS_NUMBER_OF_TRACKS = 3,MCI_STATUS_MODE = 4,MCI_STATUS_MEDIA_PRESENT = 5,MCI_STATUS_TIME_FORMAT = 6,MCI_STATUS_READY = 7,MCI_STATUS_CURRENT_TRACK = 8,MCI_INFO_PRODUCT = 256,MCI_INFO_FILE = 512,MCI_INFO_MEDIA_UPC = 1024,MCI_INFO_MEDIA_IDENTITY = 2048,MCI_INFO_NAME = 4096,MCI_INFO_COPYRIGHT = 8192,MCI_GETDEVCAPS_ITEM = 256,MCI_GETDEVCAPS_CAN_RECORD = 1,MCI_GETDEVCAPS_HAS_AUDIO = 2,MCI_GETDEVCAPS_HAS_VIDEO = 3,MCI_GETDEVCAPS_DEVICE_TYPE = 4,MCI_GETDEVCAPS_USES_FILES = 5,MCI_GETDEVCAPS_COMPOUND_DEVICE = 6,MCI_GETDEVCAPS_CAN_EJECT = 7,MCI_GETDEVCAPS_CAN_PLAY = 8,MCI_GETDEVCAPS_CAN_SAVE = 9,MCI_SYSINFO_QUANTITY = 256,MCI_SYSINFO_OPEN = 512,MCI_SYSINFO_NAME = 1024,MCI_SYSINFO_INSTALLNAME = 2048,MCI_SET_DOOR_OPEN = 256,MCI_SET_DOOR_CLOSED = 512,MCI_SET_TIME_FORMAT = 1024,MCI_SET_AUDIO = 2048,MCI_SET_VIDEO = 4096,MCI_SET_ON = 8192,MCI_SET_OFF = 16384,MCI_SET_AUDIO_ALL = 0,MCI_SET_AUDIO_LEFT = 1,MCI_SET_AUDIO_RIGHT = 2,MCI_BREAK_KEY = 256,MCI_BREAK_HWND = 512,MCI_BREAK_OFF = 1024,MCI_RECORD_INSERT = 256,MCI_RECORD_OVERWRITE = 512,MCI_SAVE_FILE = 256,MCI_LOAD_FILE = 256,MCI_VD_MODE_PARK = 1025,MCI_VD_MEDIA_CLV = 1026,MCI_VD_MEDIA_CAV = 1027,MCI_VD_MEDIA_OTHER = 1028,MCI_VD_FORMAT_TRACK = 16385,MCI_VD_PLAY_REVERSE = 65536,MCI_VD_PLAY_FAST = 131072,MCI_VD_PLAY_SPEED = 262144,MCI_VD_PLAY_SCAN = 524288,MCI_VD_PLAY_SLOW = 1048576,MCI_VD_SEEK_REVERSE = 65536,MCI_VD_STATUS_SPEED = 16386,MCI_VD_STATUS_FORWARD = 16387,MCI_VD_STATUS_MEDIA_TYPE = 16388,MCI_VD_STATUS_SIDE = 16389,MCI_VD_STATUS_DISC_SIZE = 16390,MCI_VD_GETDEVCAPS_CLV = 65536,MCI_VD_GETDEVCAPS_CAV = 131072,MCI_VD_SPIN_UP = 65536,MCI_VD_SPIN_DOWN = 131072,MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386,MCI_VD_GETDEVCAPS_FAST_RATE = 16387,MCI_VD_GETDEVCAPS_SLOW_RATE = 16388,MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389,MCI_VD_STEP_FRAMES = 65536,MCI_VD_STEP_REVERSE = 131072,MCI_VD_ESCAPE_STRING = 256,MCI_CDA_STATUS_TYPE_TRACK = 16385,MCI_CDA_TRACK_AUDIO = 1088,MCI_CDA_TRACK_OTHER = 1089,MCI_WAVE_PCM = 1152,MCI_WAVE_MAPPER = 1153,MCI_WAVE_OPEN_BUFFER = 65536,MCI_WAVE_SET_FORMATTAG = 65536,MCI_WAVE_SET_CHANNELS = 131072,MCI_WAVE_SET_SAMPLESPERSEC = 262144,MCI_WAVE_SET_AVGBYTESPERSEC = 524288,MCI_WAVE_SET_BLOCKALIGN = 1048576,MCI_WAVE_SET_BITSPERSAMPLE = 2097152,MCI_WAVE_INPUT = 4194304,MCI_WAVE_OUTPUT = 8388608,MCI_WAVE_STATUS_FORMATTAG = 16385,MCI_WAVE_STATUS_CHANNELS = 16386,MCI_WAVE_STATUS_SAMPLESPERSEC = 16387,MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388,MCI_WAVE_STATUS_BLOCKALIGN = 16389,MCI_WAVE_STATUS_BITSPERSAMPLE = 16390,MCI_WAVE_STATUS_LEVEL = 16391,MCI_WAVE_SET_ANYINPUT = 67108864,MCI_WAVE_SET_ANYOUTPUT = 134217728,MCI_WAVE_GETDEVCAPS_INPUTS = 16385,MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386,MCI_SEQ_DIV_PPQN = 1216,MCI_SEQ_DIV_SMPTE_24 = 1217,MCI_SEQ_DIV_SMPTE_25 = 1218,MCI_SEQ_DIV_SMPTE_30DROP = 1219,MCI_SEQ_DIV_SMPTE_30 = 1220,MCI_SEQ_FORMAT_SONGPTR = 16385,MCI_SEQ_FILE = 16386,MCI_SEQ_MIDI = 16387,MCI_SEQ_SMPTE = 16388,MCI_SEQ_NONE = 65533,MCI_SEQ_MAPPER = 65535,MCI_SEQ_STATUS_TEMPO = 16386,MCI_SEQ_STATUS_PORT = 16387,MCI_SEQ_STATUS_SLAVE = 16391,MCI_SEQ_STATUS_MASTER = 16392,MCI_SEQ_STATUS_OFFSET = 16393,MCI_SEQ_STATUS_DIVTYPE = 16394,MCI_SEQ_STATUS_NAME = 16395,MCI_SEQ_STATUS_COPYRIGHT = 16396,MCI_SEQ_SET_TEMPO = 65536,MCI_SEQ_SET_PORT = 131072,MCI_SEQ_SET_SLAVE = 262144,MCI_SEQ_SET_MASTER = 524288,MCI_SEQ_SET_OFFSET = 16777216,MCI_ANIM_OPEN_WS = 65536,MCI_ANIM_OPEN_PARENT = 131072,MCI_ANIM_OPEN_NOSTATIC = 262144,MCI_ANIM_PLAY_SPEED = 65536,MCI_ANIM_PLAY_REVERSE = 131072,MCI_ANIM_PLAY_FAST = 262144,MCI_ANIM_PLAY_SLOW = 524288,MCI_ANIM_PLAY_SCAN = 1048576,MCI_ANIM_STEP_REVERSE = 65536,MCI_ANIM_STEP_FRAMES = 131072,MCI_ANIM_STATUS_SPEED = 16385,MCI_ANIM_STATUS_FORWARD = 16386,MCI_ANIM_STATUS_HWND = 16387,MCI_ANIM_STATUS_HPAL = 16388,MCI_ANIM_STATUS_STRETCH = 16389,MCI_ANIM_INFO_TEXT = 65536,MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385,MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386,MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387,MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388,MCI_ANIM_GETDEVCAPS_PALETTES = 16390,MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391,MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392,MCI_ANIM_REALIZE_NORM = 65536,MCI_ANIM_REALIZE_BKGD = 131072,MCI_ANIM_WINDOW_HWND = 65536,MCI_ANIM_WINDOW_STATE = 262144,MCI_ANIM_WINDOW_TEXT = 524288,MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576,MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152,MCI_ANIM_WINDOW_DEFAULT = 0,MCI_ANIM_RECT = 65536,MCI_ANIM_PUT_SOURCE = 131072,MCI_ANIM_PUT_DESTINATION = 262144,MCI_ANIM_WHERE_SOURCE = 131072,MCI_ANIM_WHERE_DESTINATION = 262144,MCI_ANIM_UPDATE_HDC = 131072,MCI_OVLY_OPEN_WS = 65536,MCI_OVLY_OPEN_PARENT = 131072,MCI_OVLY_STATUS_HWND = 16385,MCI_OVLY_STATUS_STRETCH = 16386,MCI_OVLY_INFO_TEXT = 65536,MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385,MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386,MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387,MCI_OVLY_WINDOW_HWND = 65536,MCI_OVLY_WINDOW_STATE = 262144,MCI_OVLY_WINDOW_TEXT = 524288,MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576,MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152,MCI_OVLY_WINDOW_DEFAULT = 0,MCI_OVLY_RECT = 65536,MCI_OVLY_PUT_SOURCE = 131072,MCI_OVLY_PUT_DESTINATION = 262144,MCI_OVLY_PUT_FRAME = 524288,MCI_OVLY_PUT_VIDEO = 1048576,MCI_OVLY_WHERE_SOURCE = 131072,MCI_OVLY_WHERE_DESTINATION = 262144,MCI_OVLY_WHERE_FRAME = 524288,MCI_OVLY_WHERE_VIDEO = 1048576,};
enum MACRO_MDMEASURE {MDMEASURE_AGGR_UNKNOWN = 0x0,MDMEASURE_AGGR_SUM = 0x1,MDMEASURE_AGGR_COUNT = 0x2,MDMEASURE_AGGR_MIN = 0x3,MDMEASURE_AGGR_MAX = 0x4,MDMEASURE_AGGR_AVG = 0x5,MDMEASURE_AGGR_VAR = 0x6,MDMEASURE_AGGR_STD = 0x7,MDMEASURE_AGGR_CALCULATED = 0x7F,};
enum MACRO_MDPROPVAL {MDPROPVAL_AU_UNSUPPORTED = 0x0,MDPROPVAL_AU_UNCHANGED = 0x1,MDPROPVAL_AU_UNKNOWN = 0x2,MDPROPVAL_MF_WITH_CALCMEMBERS = 0x1,MDPROPVAL_MF_WITH_NAMEDSETS = 0x2,MDPROPVAL_MF_CREATE_CALCMEMBERS = 0x4,MDPROPVAL_MF_CREATE_NAMEDSETS = 0x8,MDPROPVAL_MF_SCOPE_SESSION = 0x10,MDPROPVAL_MF_SCOPE_GLOBAL = 0x20,MDPROPVAL_MMF_COUSIN = 0x1,MDPROPVAL_MMF_PARALLELPERIOD = 0x2,MDPROPVAL_MMF_OPENINGPERIOD = 0x4,MDPROPVAL_MMF_CLOSINGPERIOD = 0x8,MDPROPVAL_MNF_MEDIAN = 0x1,MDPROPVAL_MNF_VAR = 0x2,MDPROPVAL_MNF_STDDEV = 0x4,MDPROPVAL_MNF_RANK = 0x8,MDPROPVAL_MNF_AGGREGATE = 0x10,MDPROPVAL_MNF_COVARIANCE = 0x20,MDPROPVAL_MNF_CORRELATION = 0x40,MDPROPVAL_MNF_LINREGSLOPE = 0x80,MDPROPVAL_MNF_LINREGVARIANCE = 0x100,MDPROPVAL_MNF_LINREG2 = 0x200,MDPROPVAL_MNF_LINREGPOINT = 0x400,MDPROPVAL_MNF_DRILLDOWNLEVEL = 0x800,MDPROPVAL_MNF_DRILLDOWNMEMBERTOP = 0x1000,MDPROPVAL_MNF_DRILLDOWNMEMBERBOTTOM = 0x2000,MDPROPVAL_MNF_DRILLDOWNLEVELTOP = 0x4000,MDPROPVAL_MNF_DRILLDOWNLEVELBOTTOM = 0x8000,MDPROPVAL_MNF_DRILLUPMEMBER = 0x10000,MDPROPVAL_MNF_DRILLUPLEVEL = 0x20000,MDPROPVAL_MSF_TOPPERCENT = 0x1,MDPROPVAL_MSF_BOTTOMPERCENT = 0x2,MDPROPVAL_MSF_TOPSUM = 0x4,MDPROPVAL_MSF_BOTTOMSUM = 0x8,MDPROPVAL_MSF_PERIODSTODATE = 0x10,MDPROPVAL_MSF_LASTPERIODS = 0x20,MDPROPVAL_MSF_YTD = 0x40,MDPROPVAL_MSF_QTD = 0x80,MDPROPVAL_MSF_MTD = 0x100,MDPROPVAL_MSF_WTD = 0x200,MDPROPVAL_MSF_DRILLDOWNMEMBBER = 0x400,MDPROPVAL_MSF_DRILLDOWNLEVEL = 0x800,MDPROPVAL_MSF_DRILLDOWNMEMBERTOP = 0x1000,MDPROPVAL_MSF_DRILLDOWNMEMBERBOTTOM = 0x2000,MDPROPVAL_MSF_DRILLDOWNLEVELTOP = 0x4000,MDPROPVAL_MSF_DRILLDOWNLEVELBOTTOM = 0x8000,MDPROPVAL_MSF_DRILLUPMEMBER = 0x10000,MDPROPVAL_MSF_DRILLUPLEVEL = 0x20000,MDPROPVAL_MSF_TOGGLEDRILLSTATE = 0x40000,MDPROPVAL_MD_SELF = 0x1,MDPROPVAL_MD_BEFORE = 0x2,MDPROPVAL_MD_AFTER = 0x4,MDPROPVAL_MSC_LESSTHAN = 0x1,MDPROPVAL_MSC_GREATERTHAN = 0x2,MDPROPVAL_MSC_LESSTHANEQUAL = 0x4,MDPROPVAL_MSC_GREATERTHANEQUAL = 0x8,MDPROPVAL_MC_SINGLECASE = 0x1,MDPROPVAL_MC_SEARCHEDCASE = 0x2,MDPROPVAL_MOQ_OUTERREFERENCE = 0x1,MDPROPVAL_MOQ_DATASOURCE_CUBE = 0x1,MDPROPVAL_MOQ_CATALOG_CUBE = 0x2,MDPROPVAL_MOQ_SCHEMA_CUBE = 0x4,MDPROPVAL_MOQ_CUBE_DIM = 0x8,MDPROPVAL_MOQ_DIM_HIER = 0x10,MDPROPVAL_MOQ_DIMHIER_LEVEL = 0x20,MDPROPVAL_MOQ_LEVEL_MEMBER = 0x40,MDPROPVAL_MOQ_MEMBER_MEMBER = 0x80,MDPROPVAL_FS_FULL_SUPPORT = 0x1,MDPROPVAL_FS_GENERATED_COLUMN = 0x2,MDPROPVAL_FS_GENERATED_DIMENSION = 0x3,MDPROPVAL_FS_NO_SUPPORT = 0x4,MDPROPVAL_NL_NAMEDLEVELS = 0x1,MDPROPVAL_NL_NUMBEREDLEVELS = 0x2,MDPROPVAL_MJC_SINGLECUBE = 0x1,MDPROPVAL_MJC_MULTICUBES = 0x2,MDPROPVAL_MJC_IMPLICITCUBE = 0x4,MDPROPVAL_RR_NORANGEROWSET = 0x1,MDPROPVAL_RR_READONLY = 0x2,MDPROPVAL_RR_UPDATE = 0x4,MDPROPVAL_MS_MULTIPLETUPLES = 0x1,MDPROPVAL_MS_SINGLETUPLE = 0x2,};
enum MACRO_MD_BACKUP {MD_BACKUP_OVERWRITE = 0x1,MD_BACKUP_SAVE_FIRST = 0x2,MD_BACKUP_FORCE_BACKUP = 0x4,MD_BACKUP_NEXT_VERSION = 0xFFFFFFFF,MD_BACKUP_HIGHEST_VERSION = 0xFFFFFFFE,MD_BACKUP_MAX_VERSION = 0x270F,MD_BACKUP_MAX_LEN = 0x64,};
enum MACRO_MD_CHANGE {MD_CHANGE_TYPE_DELETE_OBJECT = 0x1,MD_CHANGE_TYPE_ADD_OBJECT = 0x2,MD_CHANGE_TYPE_SET_DATA = 0x4,MD_CHANGE_TYPE_DELETE_DATA = 0x8,MD_CHANGE_TYPE_RENAME_OBJECT = 0x10,MD_MAX_CHANGE_ENTRIES = 0x64,};
enum MACRO_MD_SECURE {MD_SECURE_BINDINGS = 2021,MD_FILTER_LOAD_ORDER = 2040,MD_FILTER_IMAGE_PATH = 2041,MD_FILTER_STATE = 2042,MD_FILTER_ENABLED = 2043,MD_FILTER_FLAGS = 2044,MD_FILTER_DESCRIPTION = 2045,MD_ADV_NOTIFY_PWD_EXP_IN_DAYS = 2063,MD_ADV_CACHE_TTL = 2064,MD_NET_LOGON_WKS = 2065,MD_USE_HOST_NAME = 2066,MD_AUTH_CHANGE_FLAGS = 2068,MD_PROCESS_NTCR_IF_LOGGED_ON = 2070,MD_FRONTPAGE_WEB = 2072,MD_IN_PROCESS_ISAPI_APPS = 2073,MD_ALLOW_PATH_INFO_FOR_SCRIPT_MAPPINGS = 2095,MD_APP_FRIENDLY_NAME = 2102,MD_APP_ROOT = 2103,MD_APP_ISOLATED = 2104,MD_APP_WAM_CLSID = 2105,MD_APP_PACKAGE_ID = 2106,MD_APP_PACKAGE_NAME = 2107,MD_APP_OOP_RECOVER_LIMIT = 2110,MD_ADMIN_INSTANCE = 2115,MD_CUSTOM_ERROR_DESC = 2120,MD_MD_SERVER_SS_AUTH_MAPPING = 2200,MD_CERT_NO_REVOC_CHECK = 1,MD_WIN32_ERROR = 1099,};
enum MACRO_MEM_IMAGE {MEM_IMAGE = 16777216,};
enum MACRO_MERGECOPY {MERGECOPY = 0xC000CA,};
enum MACRO_MESSENGER {MESSENGER_PRESENT = 0x2,};
enum MACRO_MFCOMMENT {MFCOMMENT = 15,GETPENWIDTH = 16,};
enum MACRO_MIXERLINE {MIXERLINE_LINEF_ACTIVE = 0x1,MIXERLINE_LINEF_DISCONNECTED = 0x8000,MIXERLINE_LINEF_SOURCE = 0x80000000,MIXERLINE_COMPONENTTYPE_DST_FIRST = 0x0,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0x0,MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 0x1,MIXERLINE_COMPONENTTYPE_DST_LINE = 0x2,MIXERLINE_COMPONENTTYPE_DST_MONITOR = 0x3,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 0x4,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 0x5,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 0x6,MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 0x7,MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 0x8,MIXERLINE_COMPONENTTYPE_DST_LAST = 0x8,MIXERLINE_COMPONENTTYPE_SRC_FIRST = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 0x1001,MIXERLINE_COMPONENTTYPE_SRC_LINE = 0x1002,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 0x1003,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 0x1004,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 0x1005,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 0x1006,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 0x1007,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 0x1008,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 0x1009,MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 0x100A,MIXERLINE_COMPONENTTYPE_SRC_LAST = 0x100A,MIXERLINE_TARGETTYPE_UNDEFINED = 0x0,MIXERLINE_TARGETTYPE_WAVEOUT = 0x1,MIXERLINE_TARGETTYPE_WAVEIN = 0x2,MIXERLINE_TARGETTYPE_MIDIOUT = 0x3,MIXERLINE_TARGETTYPE_MIDIIN = 0x4,MIXERLINE_TARGETTYPE_AUX = 0x5,};
enum MACRO_MORE_ROWS {MORE_ROWS = -1,NO_MORE_ROWS = -2,};
enum MACRO_MSGSTATUS {MSGSTATUS_HIGHLIGHTED = 0x1,MSGSTATUS_TAGGED = 0x2,MSGSTATUS_HIDDEN = 0x4,MSGSTATUS_DELMARKED = 0x8,MSGSTATUS_REMOTE_DOWNLOAD = 0x1000,MSGSTATUS_REMOTE_DELETE = 0x2000,};
enum MACRO_MSIDBOPEN {MSIDBOPEN_READONLY = 0,MSIDBOPEN_TRANSACT = 1,MSIDBOPEN_DIRECT = 2,MSIDBOPEN_CREATE = 3,};
enum MACRO_MSOCMDERR {MSOCMDERR_E_FIRST = -2147221248,MSOCMDERR_E_NOTSUPPORTED = -2147221248,MSOCMDERR_E_DISABLED = -2147221247,MSOCMDERR_E_NOHELP = -2147221246,MSOCMDERR_E_CANCELED = -2147221245,MSOCMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_MS_ROUTER {MS_ROUTER_VERSION = 0x500,};
enum MACRO_NCBACTION {NCBACTION = 0x77,};
enum MACRO_NCBCANCEL {NCBCANCEL = 0x35,};
enum MACRO_NCBDGRECV {NCBDGRECV = 0x21,};
enum MACRO_NCBHANGUP {NCBHANGUP = 0x12,};
enum MACRO_NCBLISTEN {NCBLISTEN = 0x11,};
enum MACRO_NCBSENDNA {NCBSENDNA = 0x71,};
enum MACRO_NCBUNLINK {NCBUNLINK = 0x70,};
enum MACRO_NETEXPORT {NETEXPORT_WRITE_ERROR = 0xC0000132,};
enum MACRO_NOT_FOUND {WSASERVICE_NOT_FOUND = 10108,WSATYPE_NOT_FOUND = 10109,};
enum MACRO_NUMCOLORS {NUMCOLORS = 24,};
enum MACRO_OBM_CLOSE {OBM_CLOSE = 32754,OBM_UPARROW = 32753,OBM_DNARROW = 32752,OBM_RGARROW = 32751,OBM_LFARROW = 32750,OBM_REDUCE = 32749,OBM_ZOOM = 32748,OBM_RESTORE = 32747,OBM_REDUCED = 32746,OBM_ZOOMD = 32745,OBM_RESTORED = 32744,OBM_UPARROWD = 32743,OBM_DNARROWD = 32742,OBM_RGARROWD = 32741,OBM_LFARROWD = 32740,OBM_MNARROW = 32739,OBM_COMBO = 32738,OBM_UPARROWI = 32737,OBM_DNARROWI = 32736,OBM_RGARROWI = 32735,OBM_LFARROWI = 32734,OBM_OLD_CLOSE = 32767,OBM_SIZE = 32766,OBM_OLD_UPARROW = 32765,OBM_OLD_DNARROW = 32764,OBM_OLD_RGARROW = 32763,OBM_OLD_LFARROW = 32762,OBM_BTSIZE = 32761,OBM_CHECK = 32760,OBM_CHECKBOXES = 32759,OBM_BTNCORNERS = 32758,OBM_OLD_REDUCE = 32757,OBM_OLD_ZOOM = 32756,OBM_OLD_RESTORE = 32755,};
enum MACRO_OLECMDERR {OLECMDERR_E_FIRST = -2147221248,OLECMDERR_E_NOTSUPPORTED = -2147221248,OLECMDERR_E_DISABLED = -2147221247,OLECMDERR_E_NOHELP = -2147221246,OLECMDERR_E_CANCELED = -2147221245,OLECMDERR_E_UNKNOWNGROUP = -2147221244,};
enum MACRO_OLECREATE {OLECREATE_LEAVERUNNING = 0x1,};
enum MACRO_OPENSTORE {OPENSTORE_USE_ADMIN_PRIVILEGE = 1,OPENSTORE_PUBLIC = 2,OPENSTORE_HOME_LOGON = 4,OPENSTORE_TAKE_OWNERSHIP = 8,OPENSTORE_OVERRIDE_HOME_MDB = 16,OPENSTORE_TRANSPORT = 32,OPENSTORE_REMOTE_TRANSPORT = 64,};
enum MACRO_OPEN_TEST {OPEN_TEST = 0,OPEN_FORCE = 1,};
enum MACRO_PARAMFLAG {PARAMFLAG_NONE = 0,PARAMFLAG_FIN = 1,PARAMFLAG_FOUT = 2,PARAMFLAG_FLCID = 4,PARAMFLAG_FRETVAL = 8,PARAMFLAG_FOPT = 16,PARAMFLAG_FHASDEFAULT = 32,PARAMFLAG_FHASCUSTDATA = 64,};
enum MACRO_PARTITION {PARTITION_ENTRY_UNUSED = 0x0,PARTITION_FAT_12 = 0x1,PARTITION_XENIX_1 = 0x2,PARTITION_XENIX_2 = 0x3,PARTITION_FAT_16 = 0x4,PARTITION_EXTENDED = 0x5,PARTITION_HUGE = 0x6,PARTITION_IFS = 0x7,PARTITION_FAT32 = 0xB,PARTITION_FAT32_XINT13 = 0xC,PARTITION_XINT13 = 0xE,PARTITION_XINT13_EXTENDED = 0xF,PARTITION_PREP = 0x41,PARTITION_LDM = 0x42,PARTITION_UNIX = 0x63,};
enum MACRO_PATINVERT {PATINVERT = 0x5A0049,};
enum MACRO_PERMANENT {PERMANENT_ERROR = 0x4000F112,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_IPX = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_VOICEVIEW = 18,PF_FIREFOX = 19,PF_UNKNOWN1 = 20,PF_BAN = 21,PF_ATM = 22,PF_INET6 = 23,PF_MAX = 26,};
enum MACRO_PP_CLIENT {PP_CLIENT_HWND = 1,PP_CONTEXT_INFO = 11,PP_KEYEXCHANGE_KEYSIZE = 12,PP_SIGNATURE_KEYSIZE = 13,PP_KEYEXCHANGE_ALG = 14,PP_SIGNATURE_ALG = 15,PP_DELETEKEY = 24,};
enum MACRO_PRDECIMAL {PRDECIMAL = 40,};
enum MACRO_PRILOWEST {PRILOWEST = -32768,};
enum MACRO_PRIVILEGE {PRIVILEGE_SET_ALL_NECESSARY = 1,};
enum MACRO_PRNUMERIC {PRNUMERIC = 40,};
enum MACRO_PROCESSOR {PROCESSOR_INTEL_386 = 386,PROCESSOR_INTEL_486 = 486,PROCESSOR_INTEL_PENTIUM = 586,PROCESSOR_MIPS_R4000 = 4000,PROCESSOR_ALPHA_21064 = 21064,PROCESSOR_PPC_601 = 601,PROCESSOR_PPC_603 = 603,PROCESSOR_PPC_604 = 604,PROCESSOR_PPC_620 = 620,PROCESSOR_HITACHI_SH3 = 10003,PROCESSOR_HITACHI_SH3E = 10004,PROCESSOR_HITACHI_SH4 = 10005,PROCESSOR_MOTOROLA_821 = 821,PROCESSOR_SHx_SH3 = 103,PROCESSOR_SHx_SH4 = 104,PROCESSOR_STRONGARM = 2577,PROCESSOR_ARM720 = 1824,PROCESSOR_ARM820 = 2080,PROCESSOR_ARM920 = 2336,PROCESSOR_ARM_7TDMI = 70001,PROCESSOR_ARCHITECTURE_INTEL = 0,PROCESSOR_ARCHITECTURE_MIPS = 1,PROCESSOR_ARCHITECTURE_ALPHA = 2,PROCESSOR_ARCHITECTURE_PPC = 3,PROCESSOR_ARCHITECTURE_SHX = 4,PROCESSOR_ARCHITECTURE_ARM = 5,PROCESSOR_ARCHITECTURE_IA64 = 6,PROCESSOR_ARCHITECTURE_ALPHA64 = 7,PROCESSOR_ARCHITECTURE_UNKNOWN = 65535,};
enum MACRO_PROPID_QM {PROPID_QM_BASE = 200,PROPID_QM_SITE_ID = 201,PROPID_QM_MACHINE_ID = 202,PROPID_QM_PATHNAME = 203,PROPID_QM_CONNECTION = 204,PROPID_QM_ENCRYPTION_PK = 205,};
enum MACRO_PROP_TYPE {PROP_TYPE_MASK = 0xFFFF,PROP_ID_NULL = 0x0,PROP_ID_INVALID = 0xFFFF,};
enum MACRO_PROXIMITY {PROXIMITY_UNIT_WORD = 0,PROXIMITY_UNIT_SENTENCE = 1,PROXIMITY_UNIT_PARAGRAPH = 2,PROXIMITY_UNIT_CHAPTER = 3,};
enum MACRO_PR_EMS_AB {PR_EMS_AB_OTHER_RECIPS = 0xF000000D,PR_EMS_AB_DISPLAY_NAME_PRINTABLE = 0x39FF001E,PR_EMS_AB_DISPLAY_NAME_PRINTABLE_A = 0x39FF001E,PR_EMS_AB_DISPLAY_NAME_PRINTABLE_W = 0x39FF001F,PR_EMS_AB_ACCESS_CATEGORY = 0x80440003,PR_EMS_AB_ACTIVATION_SCHEDULE = 0x80450102,PR_EMS_AB_ACTIVATION_STYLE = 0x80460003,PR_EMS_AB_ADDRESS_ENTRY_DISPLAY_TABLE = 0x80170102,PR_EMS_AB_ADDRESS_ENTRY_DISPLAY_TABLE_MSDOS = 0x80470102,PR_EMS_AB_ADDRESS_SYNTAX = 0x80180102,PR_EMS_AB_ADDRESS_TYPE = 0x8048001E,PR_EMS_AB_ADDRESS_TYPE_A = 0x8048001E,PR_EMS_AB_ADDRESS_TYPE_W = 0x8048001F,PR_EMS_AB_ADMD = 0x8049001E,PR_EMS_AB_ADMD_A = 0x8049001E,PR_EMS_AB_ADMD_W = 0x8049001F,PR_EMS_AB_ADMIN_DESCRIPTION = 0x804A001E,PR_EMS_AB_ADMIN_DESCRIPTION_A = 0x804A001E,PR_EMS_AB_ADMIN_DESCRIPTION_W = 0x804A001F,PR_EMS_AB_ADMIN_DISPLAY_NAME = 0x804B001E,PR_EMS_AB_ADMIN_DISPLAY_NAME_A = 0x804B001E,PR_EMS_AB_ADMIN_DISPLAY_NAME_W = 0x804B001F,PR_EMS_AB_ADMIN_EXTENSION_DLL = 0x804C001E,PR_EMS_AB_ADMIN_EXTENSION_DLL_A = 0x804C001E,PR_EMS_AB_ADMIN_EXTENSION_DLL_W = 0x804C001F,PR_EMS_AB_ALIASED_OBJECT_NAME = 0x804D001E,PR_EMS_AB_ALIASED_OBJECT_NAME_A = 0x804D001E,PR_EMS_AB_ALIASED_OBJECT_NAME_W = 0x804D001F,PR_EMS_AB_ALIASED_OBJECT_NAME_O = 0x804D000D,PR_EMS_AB_ALIASED_OBJECT_NAME_T = 0x804D001E,PR_EMS_AB_ALT_RECIPIENT = 0x804E001E,PR_EMS_AB_ALT_RECIPIENT_A = 0x804E001E,PR_EMS_AB_ALT_RECIPIENT_W = 0x804E001F,PR_EMS_AB_ALT_RECIPIENT_O = 0x804E000D,PR_EMS_AB_ALT_RECIPIENT_T = 0x804E001E,PR_EMS_AB_ALT_RECIPIENT_BL = 0x804F101E,PR_EMS_AB_ALT_RECIPIENT_BL_A = 0x804F101E,PR_EMS_AB_ALT_RECIPIENT_BL_W = 0x804F101F,PR_EMS_AB_ALT_RECIPIENT_BL_O = 0x804F000D,PR_EMS_AB_ALT_RECIPIENT_BL_T = 0x804F101E,PR_EMS_AB_ANCESTOR_ID = 0x80500102,PR_EMS_AB_ASSOC_NT_ACCOUNT = 0x80270102,PR_EMS_AB_ASSOC_REMOTE_DXA = 0x8051101E,PR_EMS_AB_ASSOC_REMOTE_DXA_A = 0x8051101E,PR_EMS_AB_ASSOC_REMOTE_DXA_W = 0x8051101F,PR_EMS_AB_ASSOC_REMOTE_DXA_O = 0x8051000D,PR_EMS_AB_ASSOC_REMOTE_DXA_T = 0x8051101E,PR_EMS_AB_ASSOCIATION_LIFETIME = 0x80520003,PR_EMS_AB_AUTH_ORIG_BL = 0x8053101E,PR_EMS_AB_AUTH_ORIG_BL_A = 0x8053101E,PR_EMS_AB_AUTH_ORIG_BL_W = 0x8053101F,PR_EMS_AB_AUTH_ORIG_BL_O = 0x8053000D,PR_EMS_AB_AUTH_ORIG_BL_T = 0x8053101E,PR_EMS_AB_AUTHORITY_REVOCATION_LIST = 0x80261102,PR_EMS_AB_AUTHORIZED_DOMAIN = 0x8054001E,PR_EMS_AB_AUTHORIZED_DOMAIN_A = 0x8054001E,PR_EMS_AB_AUTHORIZED_DOMAIN_W = 0x8054001F,PR_EMS_AB_AUTHORIZED_PASSWORD = 0x80550102,PR_EMS_AB_AUTHORIZED_USER = 0x8056001E,PR_EMS_AB_AUTHORIZED_USER_A = 0x8056001E,PR_EMS_AB_AUTHORIZED_USER_W = 0x8056001F,PR_EMS_AB_AUTOREPLY = 0x800B000B,PR_EMS_AB_AUTOREPLY_MESSAGE = 0x800A001E,PR_EMS_AB_AUTOREPLY_MESSAGE_A = 0x800A001E,PR_EMS_AB_AUTOREPLY_MESSAGE_W = 0x800A001F,PR_EMS_AB_AUTOREPLY_SUBJECT = 0x803E001E,PR_EMS_AB_AUTOREPLY_SUBJECT_A = 0x803E001E,PR_EMS_AB_AUTOREPLY_SUBJECT_W = 0x803E001F,PR_EMS_AB_BRIDGEHEAD_SERVERS = 0x8174101E,PR_EMS_AB_BRIDGEHEAD_SERVERS_A = 0x8174101E,PR_EMS_AB_BRIDGEHEAD_SERVERS_W = 0x8174101F,PR_EMS_AB_BRIDGEHEAD_SERVERS_O = 0x8174000D,PR_EMS_AB_BRIDGEHEAD_SERVERS_T = 0x8174101E,PR_EMS_AB_BUSINESS_CATEGORY = 0x8057101E,PR_EMS_AB_BUSINESS_CATEGORY_A = 0x8057101E,PR_EMS_AB_BUSINESS_CATEGORY_W = 0x8057101F,PR_EMS_AB_BUSINESS_ROLES = 0x80230102,PR_EMS_AB_CA_CERTIFICATE = 0x80031102,PR_EMS_AB_CAN_CREATE_PF = 0x8058101E,PR_EMS_AB_CAN_CREATE_PF_A = 0x8058101E,PR_EMS_AB_CAN_CREATE_PF_W = 0x8058101F,PR_EMS_AB_CAN_CREATE_PF_O = 0x8058000D,PR_EMS_AB_CAN_CREATE_PF_T = 0x8058101E,PR_EMS_AB_CAN_CREATE_PF_BL = 0x8059101E,PR_EMS_AB_CAN_CREATE_PF_BL_A = 0x8059101E,PR_EMS_AB_CAN_CREATE_PF_BL_W = 0x8059101F,PR_EMS_AB_CAN_CREATE_PF_BL_O = 0x8059000D,PR_EMS_AB_CAN_CREATE_PF_BL_T = 0x8059101E,PR_EMS_AB_CAN_CREATE_PF_DL = 0x805A101E,PR_EMS_AB_CAN_CREATE_PF_DL_A = 0x805A101E,PR_EMS_AB_CAN_CREATE_PF_DL_W = 0x805A101F,PR_EMS_AB_CAN_CREATE_PF_DL_O = 0x805A000D,PR_EMS_AB_CAN_CREATE_PF_DL_T = 0x805A101E,PR_EMS_AB_CAN_CREATE_PF_DL_BL = 0x805B101E,PR_EMS_AB_CAN_CREATE_PF_DL_BL_A = 0x805B101E,PR_EMS_AB_CAN_CREATE_PF_DL_BL_W = 0x805B101F,PR_EMS_AB_CAN_CREATE_PF_DL_BL_O = 0x805B000D,PR_EMS_AB_CAN_CREATE_PF_DL_BL_T = 0x805B101E,PR_EMS_AB_CAN_NOT_CREATE_PF = 0x805C101E,PR_EMS_AB_CAN_NOT_CREATE_PF_A = 0x805C101E,PR_EMS_AB_CAN_NOT_CREATE_PF_W = 0x805C101F,PR_EMS_AB_CAN_NOT_CREATE_PF_O = 0x805C000D,PR_EMS_AB_CAN_NOT_CREATE_PF_T = 0x805C101E,PR_EMS_AB_CAN_NOT_CREATE_PF_BL = 0x805D101E,PR_EMS_AB_CAN_NOT_CREATE_PF_BL_A = 0x805D101E,PR_EMS_AB_CAN_NOT_CREATE_PF_BL_W = 0x805D101F,PR_EMS_AB_CAN_NOT_CREATE_PF_BL_O = 0x805D000D,PR_EMS_AB_CAN_NOT_CREATE_PF_BL_T = 0x805D101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL = 0x805E101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_A = 0x805E101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_W = 0x805E101F,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_O = 0x805E000D,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_T = 0x805E101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_BL = 0x805F101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_BL_A = 0x805F101E,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_BL_W = 0x805F101F,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_BL_O = 0x805F000D,PR_EMS_AB_CAN_NOT_CREATE_PF_DL_BL_T = 0x805F101E,PR_EMS_AB_CAN_PRESERVE_DNS = 0x8060000B,PR_EMS_AB_CERTIFICATE_REVOCATION_LIST = 0x80160102,PR_EMS_AB_CLOCK_ALERT_OFFSET = 0x80610003,PR_EMS_AB_CLOCK_ALERT_REPAIR = 0x8062000B,PR_EMS_AB_CLOCK_WARNING_OFFSET = 0x80630003,PR_EMS_AB_CLOCK_WARNING_REPAIR = 0x8064000B,PR_EMS_AB_COMPUTER_NAME = 0x8065001E,PR_EMS_AB_COMPUTER_NAME_A = 0x8065001E,PR_EMS_AB_COMPUTER_NAME_W = 0x8065001F,PR_EMS_AB_CONNECTED_DOMAINS = 0x8066101E,PR_EMS_AB_CONNECTED_DOMAINS_A = 0x8066101E,PR_EMS_AB_CONNECTED_DOMAINS_W = 0x8066101F,PR_EMS_AB_CONTAINER_INFO = 0x80670003,PR_EMS_AB_COST = 0x80680003,PR_EMS_AB_COUNTRY_NAME = 0x8069001E,PR_EMS_AB_COUNTRY_NAME_A = 0x8069001E,PR_EMS_AB_COUNTRY_NAME_W = 0x8069001F,PR_EMS_AB_CROSS_CERTIFICATE_PAIR = 0x80251102,PR_EMS_AB_DELIV_CONT_LENGTH = 0x806A0003,PR_EMS_AB_DELIV_EITS = 0x806B1102,PR_EMS_AB_DELIV_EXT_CONT_TYPES = 0x806C1102,PR_EMS_AB_DELIVER_AND_REDIRECT = 0x806D000B,PR_EMS_AB_DELIVERY_MECHANISM = 0x806E0003,PR_EMS_AB_DESCRIPTION = 0x806F101E,PR_EMS_AB_DESCRIPTION_A = 0x806F101E,PR_EMS_AB_DESCRIPTION_W = 0x806F101F,PR_EMS_AB_DESTINATION_INDICATOR = 0x8070101E,PR_EMS_AB_DESTINATION_INDICATOR_A = 0x8070101E,PR_EMS_AB_DESTINATION_INDICATOR_W = 0x8070101F,PR_EMS_AB_DIAGNOSTIC_REG_KEY = 0x8071001E,PR_EMS_AB_DIAGNOSTIC_REG_KEY_A = 0x8071001E,PR_EMS_AB_DIAGNOSTIC_REG_KEY_W = 0x8071001F,PR_EMS_AB_DISPLAY_NAME_OVERRIDE = 0x8001000B,PR_EMS_AB_DL_MEM_REJECT_PERMS_BL = 0x8072101E,PR_EMS_AB_DL_MEM_REJECT_PERMS_BL_A = 0x8072101E,PR_EMS_AB_DL_MEM_REJECT_PERMS_BL_W = 0x8072101F,PR_EMS_AB_DL_MEM_REJECT_PERMS_BL_O = 0x8072000D,PR_EMS_AB_DL_MEM_REJECT_PERMS_BL_T = 0x8072101E,PR_EMS_AB_DL_MEM_SUBMIT_PERMS_BL = 0x8073101E,PR_EMS_AB_DL_MEM_SUBMIT_PERMS_BL_A = 0x8073101E,PR_EMS_AB_DL_MEM_SUBMIT_PERMS_BL_W = 0x8073101F,PR_EMS_AB_DL_MEM_SUBMIT_PERMS_BL_O = 0x8073000D,PR_EMS_AB_DL_MEM_SUBMIT_PERMS_BL_T = 0x8073101E,PR_EMS_AB_DL_MEMBER_RULE = 0x80741102,PR_EMS_AB_DOMAIN_DEF_ALT_RECIP = 0x8075001E,PR_EMS_AB_DOMAIN_DEF_ALT_RECIP_A = 0x8075001E,PR_EMS_AB_DOMAIN_DEF_ALT_RECIP_W = 0x8075001F,PR_EMS_AB_DOMAIN_DEF_ALT_RECIP_O = 0x8075000D,PR_EMS_AB_DOMAIN_DEF_ALT_RECIP_T = 0x8075001E,PR_EMS_AB_DOMAIN_NAME = 0x8076001E,PR_EMS_AB_DOMAIN_NAME_A = 0x8076001E,PR_EMS_AB_DOMAIN_NAME_W = 0x8076001F,PR_EMS_AB_DSA_SIGNATURE = 0x80770102,PR_EMS_AB_DXA_ADMIN_COPY = 0x8078000B,PR_EMS_AB_DXA_ADMIN_FORWARD = 0x8079000B,PR_EMS_AB_DXA_ADMIN_UPDATE = 0x807A0003,PR_EMS_AB_DXA_APPEND_REQCN = 0x807B000B,PR_EMS_AB_DXA_CONF_CONTAINER_LIST = 0x807C101E,PR_EMS_AB_DXA_CONF_CONTAINER_LIST_A = 0x807C101E,PR_EMS_AB_DXA_CONF_CONTAINER_LIST_W = 0x807C101F,PR_EMS_AB_DXA_CONF_CONTAINER_LIST_O = 0x807C000D,PR_EMS_AB_DXA_CONF_CONTAINER_LIST_T = 0x807C101E,PR_EMS_AB_DXA_CONF_REQ_TIME = 0x807D0040,PR_EMS_AB_DXA_CONF_SEQ = 0x807E001E,PR_EMS_AB_DXA_CONF_SEQ_A = 0x807E001E,PR_EMS_AB_DXA_CONF_SEQ_W = 0x807E001F,PR_EMS_AB_DXA_CONF_SEQ_USN = 0x807F0003,PR_EMS_AB_DXA_EXCHANGE_OPTIONS = 0x80800003,PR_EMS_AB_DXA_EXPORT_NOW = 0x8081000B,PR_EMS_AB_DXA_FLAGS = 0x80820003,PR_EMS_AB_DXA_IMP_SEQ = 0x8083001E,PR_EMS_AB_DXA_IMP_SEQ_A = 0x8083001E,PR_EMS_AB_DXA_IMP_SEQ_W = 0x8083001F,PR_EMS_AB_DXA_IMP_SEQ_TIME = 0x80840040,PR_EMS_AB_DXA_IMP_SEQ_USN = 0x80850003,PR_EMS_AB_DXA_IMPORT_NOW = 0x8086000B,PR_EMS_AB_DXA_IN_TEMPLATE_MAP = 0x8087101E,PR_EMS_AB_DXA_IN_TEMPLATE_MAP_A = 0x8087101E,PR_EMS_AB_DXA_IN_TEMPLATE_MAP_W = 0x8087101F,PR_EMS_AB_DXA_LOCAL_ADMIN = 0x8088001E,PR_EMS_AB_DXA_LOCAL_ADMIN_A = 0x8088001E,PR_EMS_AB_DXA_LOCAL_ADMIN_W = 0x8088001F,PR_EMS_AB_DXA_LOCAL_ADMIN_O = 0x8088000D,PR_EMS_AB_DXA_LOCAL_ADMIN_T = 0x8088001E,PR_EMS_AB_DXA_LOGGING_LEVEL = 0x80890003,PR_EMS_AB_DXA_NATIVE_ADDRESS_TYPE = 0x808A001E,PR_EMS_AB_DXA_NATIVE_ADDRESS_TYPE_A = 0x808A001E,PR_EMS_AB_DXA_NATIVE_ADDRESS_TYPE_W = 0x808A001F,PR_EMS_AB_DXA_OUT_TEMPLATE_MAP = 0x808B101E,PR_EMS_AB_DXA_OUT_TEMPLATE_MAP_A = 0x808B101E,PR_EMS_AB_DXA_OUT_TEMPLATE_MAP_W = 0x808B101F,PR_EMS_AB_DXA_PASSWORD = 0x808C001E,PR_EMS_AB_DXA_PASSWORD_A = 0x808C001E,PR_EMS_AB_DXA_PASSWORD_W = 0x808C001F,PR_EMS_AB_DXA_PREV_EXCHANGE_OPTIONS = 0x808D0003,PR_EMS_AB_DXA_PREV_EXPORT_NATIVE_ONLY = 0x808E000B,PR_EMS_AB_DXA_PREV_IN_EXCHANGE_SENSITIVITY = 0x808F0003,PR_EMS_AB_DXA_PREV_REMOTE_ENTRIES = 0x8090001E,PR_EMS_AB_DXA_PREV_REMOTE_ENTRIES_A = 0x8090001E,PR_EMS_AB_DXA_PREV_REMOTE_ENTRIES_W = 0x8090001F,PR_EMS_AB_DXA_PREV_REMOTE_ENTRIES_O = 0x8090000D,PR_EMS_AB_DXA_PREV_REMOTE_ENTRIES_T = 0x8090001E,PR_EMS_AB_DXA_PREV_REPLICATION_SENSITIVITY = 0x80910003,PR_EMS_AB_DXA_PREV_TEMPLATE_OPTIONS = 0x80920003,PR_EMS_AB_DXA_PREV_TYPES = 0x80930003,PR_EMS_AB_DXA_RECIPIENT_CP = 0x8094001E,PR_EMS_AB_DXA_RECIPIENT_CP_A = 0x8094001E,PR_EMS_AB_DXA_RECIPIENT_CP_W = 0x8094001F,PR_EMS_AB_DXA_REMOTE_CLIENT = 0x8095001E,PR_EMS_AB_DXA_REMOTE_CLIENT_A = 0x8095001E,PR_EMS_AB_DXA_REMOTE_CLIENT_W = 0x8095001F,PR_EMS_AB_DXA_REMOTE_CLIENT_O = 0x8095000D,PR_EMS_AB_DXA_REMOTE_CLIENT_T = 0x8095001E,PR_EMS_AB_DXA_REQ_SEQ = 0x8096001E,PR_EMS_AB_DXA_REQ_SEQ_A = 0x8096001E,PR_EMS_AB_DXA_REQ_SEQ_W = 0x8096001F,PR_EMS_AB_DXA_REQ_SEQ_TIME = 0x80970040,PR_EMS_AB_DXA_REQ_SEQ_USN = 0x80980003,PR_EMS_AB_DXA_REQNAME = 0x8099001E,PR_EMS_AB_DXA_REQNAME_A = 0x8099001E,PR_EMS_AB_DXA_REQNAME_W = 0x8099001F,PR_EMS_AB_DXA_SVR_SEQ = 0x809A001E,PR_EMS_AB_DXA_SVR_SEQ_A = 0x809A001E,PR_EMS_AB_DXA_SVR_SEQ_W = 0x809A001F,PR_EMS_AB_DXA_SVR_SEQ_TIME = 0x809B0040,PR_EMS_AB_DXA_SVR_SEQ_USN = 0x809C0003,PR_EMS_AB_DXA_TASK = 0x809D0003,PR_EMS_AB_DXA_TEMPLATE_OPTIONS = 0x809E0003,PR_EMS_AB_DXA_TEMPLATE_TIMESTAMP = 0x809F0040,PR_EMS_AB_DXA_TYPES = 0x80A00003,PR_EMS_AB_DXA_UNCONF_CONTAINER_LIST = 0x80A1101E,PR_EMS_AB_DXA_UNCONF_CONTAINER_LIST_A = 0x80A1101E,PR_EMS_AB_DXA_UNCONF_CONTAINER_LIST_W = 0x80A1101F,PR_EMS_AB_DXA_UNCONF_CONTAINER_LIST_O = 0x80A1000D,PR_EMS_AB_DXA_UNCONF_CONTAINER_LIST_T = 0x80A1101E,PR_EMS_AB_ENABLED_PROTOCOLS = 0x817F0003,PR_EMS_AB_ENCAPSULATION_METHOD = 0x80A20003,PR_EMS_AB_ENCRYPT = 0x80A3000B,PR_EMS_AB_ENCRYPT_ALG_LIST_NA = 0x8040101E,PR_EMS_AB_ENCRYPT_ALG_LIST_NA_A = 0x8040101E,PR_EMS_AB_ENCRYPT_ALG_LIST_NA_W = 0x8040101F,PR_EMS_AB_ENCRYPT_ALG_LIST_OTHER = 0x8041101E,PR_EMS_AB_ENCRYPT_ALG_LIST_OTHER_A = 0x8041101E,PR_EMS_AB_ENCRYPT_ALG_LIST_OTHER_W = 0x8041101F,PR_EMS_AB_ENCRYPT_ALG_SELECTED_NA = 0x8043001E,PR_EMS_AB_ENCRYPT_ALG_SELECTED_NA_A = 0x8043001E,PR_EMS_AB_ENCRYPT_ALG_SELECTED_NA_W = 0x8043001F,PR_EMS_AB_ENCRYPT_ALG_SELECTED_OTHER = 0x803D001E,PR_EMS_AB_ENCRYPT_ALG_SELECTED_OTHER_A = 0x803D001E,PR_EMS_AB_ENCRYPT_ALG_SELECTED_OTHER_W = 0x803D001F,PR_EMS_AB_EXPAND_DLS_LOCALLY = 0x80A4000B,PR_EMS_AB_EXPIRATION_TIME = 0x80280040,PR_EMS_AB_EXPORT_CONTAINERS = 0x80A5101E,PR_EMS_AB_EXPORT_CONTAINERS_A = 0x80A5101E,PR_EMS_AB_EXPORT_CONTAINERS_W = 0x80A5101F,PR_EMS_AB_EXPORT_CONTAINERS_O = 0x80A5000D,PR_EMS_AB_EXPORT_CONTAINERS_T = 0x80A5101E,PR_EMS_AB_EXPORT_CUSTOM_RECIPIENTS = 0x80A6000B,PR_EMS_AB_EXTENDED_CHARS_ALLOWED = 0x80A7000B,PR_EMS_AB_EXTENSION_ATTRIBUTE_1 = 0x802D001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_1_A = 0x802D001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_1_W = 0x802D001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_10 = 0x8036001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_10_A = 0x8036001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_10_W = 0x8036001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_2 = 0x802E001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_2_A = 0x802E001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_2_W = 0x802E001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_3 = 0x802F001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_3_A = 0x802F001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_3_W = 0x802F001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_4 = 0x8030001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_4_A = 0x8030001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_4_W = 0x8030001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_5 = 0x8031001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_5_A = 0x8031001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_5_W = 0x8031001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_6 = 0x8032001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_6_A = 0x8032001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_6_W = 0x8032001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_7 = 0x8033001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_7_A = 0x8033001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_7_W = 0x8033001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_8 = 0x8034001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_8_A = 0x8034001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_8_W = 0x8034001F,PR_EMS_AB_EXTENSION_ATTRIBUTE_9 = 0x8035001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_9_A = 0x8035001E,PR_EMS_AB_EXTENSION_ATTRIBUTE_9_W = 0x8035001F,PR_EMS_AB_EXTENSION_DATA = 0x80A81102,PR_EMS_AB_EXTENSION_NAME = 0x80A9101E,PR_EMS_AB_EXTENSION_NAME_A = 0x80A9101E,PR_EMS_AB_EXTENSION_NAME_W = 0x80A9101F,PR_EMS_AB_EXTENSION_NAME_INHERITED = 0x80AA101E,PR_EMS_AB_EXTENSION_NAME_INHERITED_A = 0x80AA101E,PR_EMS_AB_EXTENSION_NAME_INHERITED_W = 0x80AA101F,PR_EMS_AB_FACSIMILE_TELEPHONE_NUMBER = 0x80AB1102,PR_EMS_AB_FILE_VERSION = 0x80AC0102,PR_EMS_AB_FILTER_LOCAL_ADDRESSES = 0x80AD000B,PR_EMS_AB_FOLDER_PATHNAME = 0x8004001E,PR_EMS_AB_FOLDER_PATHNAME_A = 0x8004001E,PR_EMS_AB_FOLDER_PATHNAME_W = 0x8004001F,PR_EMS_AB_FOLDERS_CONTAINER = 0x80AE001E,PR_EMS_AB_FOLDERS_CONTAINER_A = 0x80AE001E,PR_EMS_AB_FOLDERS_CONTAINER_W = 0x80AE001F,PR_EMS_AB_FOLDERS_CONTAINER_O = 0x80AE000D,PR_EMS_AB_FOLDERS_CONTAINER_T = 0x80AE001E,PR_EMS_AB_GARBAGE_COLL_PERIOD = 0x80AF0003,PR_EMS_AB_GATEWAY_LOCAL_CRED = 0x80B0001E,PR_EMS_AB_GATEWAY_LOCAL_CRED_A = 0x80B0001E,PR_EMS_AB_GATEWAY_LOCAL_CRED_W = 0x80B0001F,PR_EMS_AB_GATEWAY_LOCAL_DESIG = 0x80B1001E,PR_EMS_AB_GATEWAY_LOCAL_DESIG_A = 0x80B1001E,PR_EMS_AB_GATEWAY_LOCAL_DESIG_W = 0x80B1001F,PR_EMS_AB_GATEWAY_PROXY = 0x80B2101E,PR_EMS_AB_GATEWAY_PROXY_A = 0x80B2101E,PR_EMS_AB_GATEWAY_PROXY_W = 0x80B2101F,PR_EMS_AB_GATEWAY_ROUTING_TREE = 0x80B30102,PR_EMS_AB_GWART_LAST_MODIFIED = 0x80B40040,PR_EMS_AB_HAS_FULL_REPLICA_NCS = 0x80B5101E,PR_EMS_AB_HAS_FULL_REPLICA_NCS_A = 0x80B5101E,PR_EMS_AB_HAS_FULL_REPLICA_NCS_W = 0x80B5101F,PR_EMS_AB_HAS_FULL_REPLICA_NCS_O = 0x80B5000D,PR_EMS_AB_HAS_FULL_REPLICA_NCS_T = 0x80B5101E,PR_EMS_AB_HAS_MASTER_NCS = 0x80B6101E,PR_EMS_AB_HAS_MASTER_NCS_A = 0x80B6101E,PR_EMS_AB_HAS_MASTER_NCS_W = 0x80B6101F,PR_EMS_AB_HAS_MASTER_NCS_O = 0x80B6000D,PR_EMS_AB_HAS_MASTER_NCS_T = 0x80B6101E,PR_EMS_AB_HELP_DATA16 = 0x803A0102,PR_EMS_AB_HELP_DATA32 = 0x80100102,PR_EMS_AB_HELP_FILE_NAME = 0x803B001E,PR_EMS_AB_HELP_FILE_NAME_A = 0x803B001E,PR_EMS_AB_HELP_FILE_NAME_W = 0x803B001F,PR_EMS_AB_HEURISTICS = 0x80B70003,PR_EMS_AB_HIDE_DL_MEMBERSHIP = 0x80B8000B,PR_EMS_AB_HIDE_FROM_ADDRESS_BOOK = 0x80B9000B,PR_EMS_AB_HOME_MDB = 0x8006001E,PR_EMS_AB_HOME_MDB_A = 0x8006001E,PR_EMS_AB_HOME_MDB_W = 0x8006001F,PR_EMS_AB_HOME_MDB_O = 0x8006000D,PR_EMS_AB_HOME_MDB_T = 0x8006001E,PR_EMS_AB_HOME_MDB_BL = 0x8014101E,PR_EMS_AB_HOME_MDB_BL_A = 0x8014101E,PR_EMS_AB_HOME_MDB_BL_W = 0x8014101F,PR_EMS_AB_HOME_MDB_BL_O = 0x8014000D,PR_EMS_AB_HOME_MDB_BL_T = 0x8014101E,PR_EMS_AB_HOME_MTA = 0x8007001E,PR_EMS_AB_HOME_MTA_A = 0x8007001E,PR_EMS_AB_HOME_MTA_W = 0x8007001F,PR_EMS_AB_HOME_MTA_O = 0x8007000D,PR_EMS_AB_HOME_MTA_T = 0x8007001E,PR_EMS_AB_HOME_PUBLIC_SERVER = 0x803F001E,PR_EMS_AB_HOME_PUBLIC_SERVER_A = 0x803F001E,PR_EMS_AB_HOME_PUBLIC_SERVER_W = 0x803F001F,PR_EMS_AB_HOME_PUBLIC_SERVER_O = 0x803F000D,PR_EMS_AB_HOME_PUBLIC_SERVER_T = 0x803F001E,PR_EMS_AB_IMPORT_CONTAINER = 0x80BA001E,PR_EMS_AB_IMPORT_CONTAINER_A = 0x80BA001E,PR_EMS_AB_IMPORT_CONTAINER_W = 0x80BA001F,PR_EMS_AB_IMPORT_CONTAINER_O = 0x80BA000D,PR_EMS_AB_IMPORT_CONTAINER_T = 0x80BA001E,PR_EMS_AB_IMPORT_SENSITIVITY = 0x80BB0003,PR_EMS_AB_IMPORTED_FROM = 0x8042001E,PR_EMS_AB_IMPORTED_FROM_A = 0x8042001E,PR_EMS_AB_IMPORTED_FROM_W = 0x8042001F,PR_EMS_AB_INBOUND_SITES = 0x80BC101E,PR_EMS_AB_INBOUND_SITES_A = 0x80BC101E,PR_EMS_AB_INBOUND_SITES_W = 0x80BC101F,PR_EMS_AB_INBOUND_SITES_O = 0x80BC000D,PR_EMS_AB_INBOUND_SITES_T = 0x80BC101E,PR_EMS_AB_INSTANCE_TYPE = 0x80BD0003,PR_EMS_AB_INTERNATIONAL_ISDN_NUMBER = 0x80BE101E,PR_EMS_AB_INTERNATIONAL_ISDN_NUMBER_A = 0x80BE101E,PR_EMS_AB_INTERNATIONAL_ISDN_NUMBER_W = 0x80BE101F,PR_EMS_AB_INVOCATION_ID = 0x80BF0102,PR_EMS_AB_IS_DELETED = 0x80C0000B,PR_EMS_AB_IS_MEMBER_OF_DL = 0x8008000D,PR_EMS_AB_IS_MEMBER_OF_DL_A = 0x8008101E,PR_EMS_AB_IS_MEMBER_OF_DL_W = 0x8008101F,PR_EMS_AB_IS_MEMBER_OF_DL_O = 0x8008000D,PR_EMS_AB_IS_MEMBER_OF_DL_T = 0x8008101E,PR_EMS_AB_IS_SINGLE_VALUED = 0x80C1000B,PR_EMS_AB_KCC_STATUS = 0x80C21102,PR_EMS_AB_KM_SERVER = 0x800D001E,PR_EMS_AB_KM_SERVER_A = 0x800D001E,PR_EMS_AB_KM_SERVER_W = 0x800D001F,PR_EMS_AB_KM_SERVER_O = 0x800D000D,PR_EMS_AB_KM_SERVER_T = 0x800D001E,PR_EMS_AB_KNOWLEDGE_INFORMATION = 0x80C3101E,PR_EMS_AB_KNOWLEDGE_INFORMATION_A = 0x80C3101E,PR_EMS_AB_KNOWLEDGE_INFORMATION_W = 0x80C3101F,PR_EMS_AB_LANGUAGE = 0x81780003,PR_EMS_AB_LDAP_DISPLAY_NAME = 0x8171101E,PR_EMS_AB_LDAP_DISPLAY_NAME_A = 0x8171101E,PR_EMS_AB_LDAP_DISPLAY_NAME_W = 0x8171101F,PR_EMS_AB_LINE_WRAP = 0x80C40003,PR_EMS_AB_LINK_ID = 0x80C50003,PR_EMS_AB_LOCAL_BRIDGE_HEAD = 0x80C6001E,PR_EMS_AB_LOCAL_BRIDGE_HEAD_A = 0x80C6001E,PR_EMS_AB_LOCAL_BRIDGE_HEAD_W = 0x80C6001F,PR_EMS_AB_LOCAL_BRIDGE_HEAD_ADDRESS = 0x80C7001E,PR_EMS_AB_LOCAL_BRIDGE_HEAD_ADDRESS_A = 0x80C7001E,PR_EMS_AB_LOCAL_BRIDGE_HEAD_ADDRESS_W = 0x80C7001F,PR_EMS_AB_LOCAL_INITIAL_TURN = 0x80C8000B,PR_EMS_AB_LOCAL_SCOPE = 0x80C9101E,PR_EMS_AB_LOCAL_SCOPE_A = 0x80C9101E,PR_EMS_AB_LOCAL_SCOPE_W = 0x80C9101F,PR_EMS_AB_LOCAL_SCOPE_O = 0x80C9000D,PR_EMS_AB_LOCAL_SCOPE_T = 0x80C9101E,PR_EMS_AB_LOG_FILENAME = 0x80CA001E,PR_EMS_AB_LOG_FILENAME_A = 0x80CA001E,PR_EMS_AB_LOG_FILENAME_W = 0x80CA001F,PR_EMS_AB_LOG_ROLLOVER_INTERVAL = 0x80CB0003,PR_EMS_AB_MAINTAIN_AUTOREPLY_HISTORY = 0x80CC000B,PR_EMS_AB_MANAGER = 0x8005000D,PR_EMS_AB_MANAGER_A = 0x8005001E,PR_EMS_AB_MANAGER_W = 0x8005001F,PR_EMS_AB_MANAGER_O = 0x8005000D,PR_EMS_AB_MANAGER_T = 0x8005001E,PR_EMS_AB_MAPI_DISPLAY_TYPE = 0x80CD0003,PR_EMS_AB_MAPI_ID = 0x80CE0003,PR_EMS_AB_MAXIMUM_OBJECT_ID = 0x81690102,PR_EMS_AB_MDB_BACKOFF_INTERVAL = 0x80CF0003,PR_EMS_AB_MDB_MSG_TIME_OUT_PERIOD = 0x80D00003,PR_EMS_AB_MDB_OVER_QUOTA_LIMIT = 0x80D10003,PR_EMS_AB_MDB_STORAGE_QUOTA = 0x80D20003,PR_EMS_AB_MDB_UNREAD_LIMIT = 0x80D30003,PR_EMS_AB_MDB_USE_DEFAULTS = 0x80D4000B,PR_EMS_AB_MEMBER = 0x8009000D,PR_EMS_AB_MEMBER_A = 0x8009101E,PR_EMS_AB_MEMBER_W = 0x8009101F,PR_EMS_AB_MEMBER_O = 0x8009000D,PR_EMS_AB_MEMBER_T = 0x8009101E,PR_EMS_AB_MESSAGE_TRACKING_ENABLED = 0x80D5000B,PR_EMS_AB_MONITOR_CLOCK = 0x80D6000B,PR_EMS_AB_MONITOR_SERVERS = 0x80D7000B,PR_EMS_AB_MONITOR_SERVICES = 0x80D8000B,PR_EMS_AB_MONITORED_CONFIGURATIONS = 0x80D9101E,PR_EMS_AB_MONITORED_CONFIGURATIONS_A = 0x80D9101E,PR_EMS_AB_MONITORED_CONFIGURATIONS_W = 0x80D9101F,PR_EMS_AB_MONITORED_CONFIGURATIONS_O = 0x80D9000D,PR_EMS_AB_MONITORED_CONFIGURATIONS_T = 0x80D9101E,PR_EMS_AB_MONITORED_SERVERS = 0x80DA101E,PR_EMS_AB_MONITORED_SERVERS_A = 0x80DA101E,PR_EMS_AB_MONITORED_SERVERS_W = 0x80DA101F,PR_EMS_AB_MONITORED_SERVERS_O = 0x80DA000D,PR_EMS_AB_MONITORED_SERVERS_T = 0x80DA101E,PR_EMS_AB_MONITORED_SERVICES = 0x80DB101E,PR_EMS_AB_MONITORED_SERVICES_A = 0x80DB101E,PR_EMS_AB_MONITORED_SERVICES_W = 0x80DB101F,PR_EMS_AB_MONITORING_ALERT_DELAY = 0x80DC0003,PR_EMS_AB_MONITORING_ALERT_UNITS = 0x80DD0003,PR_EMS_AB_MONITORING_AVAILABILITY_STYLE = 0x80DE0003,PR_EMS_AB_MONITORING_AVAILABILITY_WINDOW = 0x80DF0102,PR_EMS_AB_MONITORING_CACHED_VIA_MAIL = 0x80E0101E,PR_EMS_AB_MONITORING_CACHED_VIA_MAIL_A = 0x80E0101E,PR_EMS_AB_MONITORING_CACHED_VIA_MAIL_W = 0x80E0101F,PR_EMS_AB_MONITORING_CACHED_VIA_MAIL_O = 0x80E0000D,PR_EMS_AB_MONITORING_CACHED_VIA_MAIL_T = 0x80E0101E,PR_EMS_AB_MONITORING_CACHED_VIA_RPC = 0x80E1101E,PR_EMS_AB_MONITORING_CACHED_VIA_RPC_A = 0x80E1101E,PR_EMS_AB_MONITORING_CACHED_VIA_RPC_W = 0x80E1101F,PR_EMS_AB_MONITORING_CACHED_VIA_RPC_O = 0x80E1000D,PR_EMS_AB_MONITORING_CACHED_VIA_RPC_T = 0x80E1101E,PR_EMS_AB_MONITORING_ESCALATION_PROCEDURE = 0x80E21102,PR_EMS_AB_MONITORING_HOTSITE_POLL_INTERVAL = 0x80E30003,PR_EMS_AB_MONITORING_HOTSITE_POLL_UNITS = 0x80E40003,PR_EMS_AB_MONITORING_MAIL_UPDATE_INTERVAL = 0x80E50003,PR_EMS_AB_MONITORING_MAIL_UPDATE_UNITS = 0x80E60003,PR_EMS_AB_MONITORING_NORMAL_POLL_INTERVAL = 0x80E70003,PR_EMS_AB_MONITORING_NORMAL_POLL_UNITS = 0x80E80003,PR_EMS_AB_MONITORING_RECIPIENTS = 0x80E9101E,PR_EMS_AB_MONITORING_RECIPIENTS_A = 0x80E9101E,PR_EMS_AB_MONITORING_RECIPIENTS_W = 0x80E9101F,PR_EMS_AB_MONITORING_RECIPIENTS_O = 0x80E9000D,PR_EMS_AB_MONITORING_RECIPIENTS_T = 0x80E9101E,PR_EMS_AB_MONITORING_RECIPIENTS_NDR = 0x80EA101E,PR_EMS_AB_MONITORING_RECIPIENTS_NDR_A = 0x80EA101E,PR_EMS_AB_MONITORING_RECIPIENTS_NDR_W = 0x80EA101F,PR_EMS_AB_MONITORING_RECIPIENTS_NDR_O = 0x80EA000D,PR_EMS_AB_MONITORING_RECIPIENTS_NDR_T = 0x80EA101E,PR_EMS_AB_MONITORING_RPC_UPDATE_INTERVAL = 0x80EB0003,PR_EMS_AB_MONITORING_RPC_UPDATE_UNITS = 0x80EC0003,PR_EMS_AB_MONITORING_WARNING_DELAY = 0x80ED0003,PR_EMS_AB_MONITORING_WARNING_UNITS = 0x80EE0003,PR_EMS_AB_MTA_LOCAL_CRED = 0x80EF001E,PR_EMS_AB_MTA_LOCAL_CRED_A = 0x80EF001E,PR_EMS_AB_MTA_LOCAL_CRED_W = 0x80EF001F,PR_EMS_AB_MTA_LOCAL_DESIG = 0x80F0001E,PR_EMS_AB_MTA_LOCAL_DESIG_A = 0x80F0001E,PR_EMS_AB_MTA_LOCAL_DESIG_W = 0x80F0001F,PR_EMS_AB_N_ADDRESS = 0x80F10102,PR_EMS_AB_N_ADDRESS_TYPE = 0x80F20003,PR_EMS_AB_NETWORK_ADDRESS = 0x8170101E,PR_EMS_AB_NETWORK_ADDRESS_A = 0x8170101E,PR_EMS_AB_NETWORK_ADDRESS_W = 0x8170101F,PR_EMS_AB_NNTP_CHARACTER_SET = 0x817D001E,PR_EMS_AB_NNTP_CHARACTER_SET_A = 0x817D001E,PR_EMS_AB_NNTP_CHARACTER_SET_W = 0x817D001F,PR_EMS_AB_NNTP_CONTENT_FORMAT = 0x8176001E,PR_EMS_AB_NNTP_CONTENT_FORMAT_A = 0x8176001E,PR_EMS_AB_NNTP_CONTENT_FORMAT_W = 0x8176001F,PR_EMS_AB_NT_MACHINE_NAME = 0x80F3001E,PR_EMS_AB_NT_MACHINE_NAME_A = 0x80F3001E,PR_EMS_AB_NT_MACHINE_NAME_W = 0x80F3001F,PR_EMS_AB_NT_SECURITY_DESCRIPTOR = 0x80130102,PR_EMS_AB_NUM_OF_OPEN_RETRIES = 0x80F40003,PR_EMS_AB_NUM_OF_TRANSFER_RETRIES = 0x80F50003,PR_EMS_AB_OBJ_DIST_NAME = 0x803C001E,PR_EMS_AB_OBJ_DIST_NAME_A = 0x803C001E,PR_EMS_AB_OBJ_DIST_NAME_W = 0x803C001F,PR_EMS_AB_OBJ_DIST_NAME_O = 0x803C000D,PR_EMS_AB_OBJ_DIST_NAME_T = 0x803C001E,PR_EMS_AB_OBJECT_CLASS_CATEGORY = 0x80F60003,PR_EMS_AB_OBJECT_VERSION = 0x80F70003,PR_EMS_AB_OFF_LINE_AB_CONTAINERS = 0x80F8101E,PR_EMS_AB_OFF_LINE_AB_CONTAINERS_A = 0x80F8101E,PR_EMS_AB_OFF_LINE_AB_CONTAINERS_W = 0x80F8101F,PR_EMS_AB_OFF_LINE_AB_CONTAINERS_O = 0x80F8000D,PR_EMS_AB_OFF_LINE_AB_CONTAINERS_T = 0x80F8101E,PR_EMS_AB_OFF_LINE_AB_SCHEDULE = 0x80F90102,PR_EMS_AB_OFF_LINE_AB_SERVER = 0x80FA001E,PR_EMS_AB_OFF_LINE_AB_SERVER_A = 0x80FA001E,PR_EMS_AB_OFF_LINE_AB_SERVER_W = 0x80FA001F,PR_EMS_AB_OFF_LINE_AB_SERVER_O = 0x80FA000D,PR_EMS_AB_OFF_LINE_AB_SERVER_T = 0x80FA001E,PR_EMS_AB_OFF_LINE_AB_STYLE = 0x80FB0003,PR_EMS_AB_OID_TYPE = 0x80FC0003,PR_EMS_AB_OM_OBJECT_CLASS = 0x80FD0102,PR_EMS_AB_OM_SYNTAX = 0x80FE0003,PR_EMS_AB_OOF_REPLY_TO_ORIGINATOR = 0x80FF000B,PR_EMS_AB_OPEN_RETRY_INTERVAL = 0x81000003,PR_EMS_AB_ORGANIZATION_NAME = 0x8101101E,PR_EMS_AB_ORGANIZATION_NAME_A = 0x8101101E,PR_EMS_AB_ORGANIZATION_NAME_W = 0x8101101F,PR_EMS_AB_ORGANIZATIONAL_UNIT_NAME = 0x8102101E,PR_EMS_AB_ORGANIZATIONAL_UNIT_NAME_A = 0x8102101E,PR_EMS_AB_ORGANIZATIONAL_UNIT_NAME_W = 0x8102101F,PR_EMS_AB_ORIGINAL_DISPLAY_TABLE = 0x81030102,PR_EMS_AB_ORIGINAL_DISPLAY_TABLE_MSDOS = 0x81040102,PR_EMS_AB_OUTBOUND_SITES = 0x8105101E,PR_EMS_AB_OUTBOUND_SITES_A = 0x8105101E,PR_EMS_AB_OUTBOUND_SITES_W = 0x8105101F,PR_EMS_AB_OUTBOUND_SITES_O = 0x8105000D,PR_EMS_AB_OUTBOUND_SITES_T = 0x8105101E,PR_EMS_AB_OWNER = 0x800C001E,PR_EMS_AB_OWNER_A = 0x800C001E,PR_EMS_AB_OWNER_W = 0x800C001F,PR_EMS_AB_OWNER_O = 0x800C000D,PR_EMS_AB_OWNER_T = 0x800C001E,PR_EMS_AB_OWNER_BL = 0x8024001E,PR_EMS_AB_OWNER_BL_A = 0x8024001E,PR_EMS_AB_OWNER_BL_W = 0x8024001F,PR_EMS_AB_OWNER_BL_O = 0x8024000D,PR_EMS_AB_OWNER_BL_T = 0x8024001E,PR_EMS_AB_P_SELECTOR = 0x81060102,PR_EMS_AB_P_SELECTOR_INBOUND = 0x81070102,PR_EMS_AB_PER_MSG_DIALOG_DISPLAY_TABLE = 0x81080102,PR_EMS_AB_PER_RECIP_DIALOG_DISPLAY_TABLE = 0x81090102,PR_EMS_AB_PERIOD_REP_SYNC_TIMES = 0x810A0102,PR_EMS_AB_PERIOD_REPL_STAGGER = 0x810B0003,PR_EMS_AB_PF_CONTACTS = 0x8038101E,PR_EMS_AB_PF_CONTACTS_A = 0x8038101E,PR_EMS_AB_PF_CONTACTS_W = 0x8038101F,PR_EMS_AB_PF_CONTACTS_O = 0x8038000D,PR_EMS_AB_PF_CONTACTS_T = 0x8038101E,PR_EMS_AB_POP_CHARACTER_SET = 0x8179001E,PR_EMS_AB_POP_CHARACTER_SET_A = 0x8179001E,PR_EMS_AB_POP_CHARACTER_SET_W = 0x8179001F,PR_EMS_AB_POP_CONTENT_FORMAT = 0x8177001E,PR_EMS_AB_POP_CONTENT_FORMAT_A = 0x8177001E,PR_EMS_AB_POP_CONTENT_FORMAT_W = 0x8177001F,PR_EMS_AB_POSTAL_ADDRESS = 0x810C1102,PR_EMS_AB_PREFERRED_DELIVERY_METHOD = 0x810D1003,PR_EMS_AB_PRMD = 0x810E001E,PR_EMS_AB_PRMD_A = 0x810E001E,PR_EMS_AB_PRMD_W = 0x810E001F,PR_EMS_AB_PROXY_ADDRESSES = 0x800F101E,PR_EMS_AB_PROXY_ADDRESSES_A = 0x800F101E,PR_EMS_AB_PROXY_ADDRESSES_W = 0x800F101F,PR_EMS_AB_PROXY_GENERATOR_DLL = 0x810F001E,PR_EMS_AB_PROXY_GENERATOR_DLL_A = 0x810F001E,PR_EMS_AB_PROXY_GENERATOR_DLL_W = 0x810F001F,PR_EMS_AB_PUBLIC_DELEGATES = 0x8015000D,PR_EMS_AB_PUBLIC_DELEGATES_A = 0x8015101E,PR_EMS_AB_PUBLIC_DELEGATES_W = 0x8015101F,PR_EMS_AB_PUBLIC_DELEGATES_O = 0x8015000D,PR_EMS_AB_PUBLIC_DELEGATES_T = 0x8015101E,PR_EMS_AB_PUBLIC_DELEGATES_BL = 0x8110101E,PR_EMS_AB_PUBLIC_DELEGATES_BL_A = 0x8110101E,PR_EMS_AB_PUBLIC_DELEGATES_BL_W = 0x8110101F,PR_EMS_AB_PUBLIC_DELEGATES_BL_O = 0x8110000D,PR_EMS_AB_PUBLIC_DELEGATES_BL_T = 0x8110101E,PR_EMS_AB_QUOTA_NOTIFICATION_SCHEDULE = 0x81110102,PR_EMS_AB_QUOTA_NOTIFICATION_STYLE = 0x81120003,PR_EMS_AB_RANGE_LOWER = 0x81130003,PR_EMS_AB_RANGE_UPPER = 0x81140003,PR_EMS_AB_RAS_CALLBACK_NUMBER = 0x8115001E,PR_EMS_AB_RAS_CALLBACK_NUMBER_A = 0x8115001E,PR_EMS_AB_RAS_CALLBACK_NUMBER_W = 0x8115001F,PR_EMS_AB_RAS_PHONE_NUMBER = 0x8116001E,PR_EMS_AB_RAS_PHONE_NUMBER_A = 0x8116001E,PR_EMS_AB_RAS_PHONE_NUMBER_W = 0x8116001F,PR_EMS_AB_RAS_PHONEBOOK_ENTRY_NAME = 0x8117001E,PR_EMS_AB_RAS_PHONEBOOK_ENTRY_NAME_A = 0x8117001E,PR_EMS_AB_RAS_PHONEBOOK_ENTRY_NAME_W = 0x8117001F,PR_EMS_AB_RAS_REMOTE_SRVR_NAME = 0x8118001E,PR_EMS_AB_RAS_REMOTE_SRVR_NAME_A = 0x8118001E,PR_EMS_AB_RAS_REMOTE_SRVR_NAME_W = 0x8118001F,PR_EMS_AB_REGISTERED_ADDRESS = 0x81191102,PR_EMS_AB_REMOTE_BRIDGE_HEAD = 0x811A001E,PR_EMS_AB_REMOTE_BRIDGE_HEAD_A = 0x811A001E,PR_EMS_AB_REMOTE_BRIDGE_HEAD_W = 0x811A001F,PR_EMS_AB_REMOTE_BRIDGE_HEAD_ADDRESS = 0x811B001E,PR_EMS_AB_REMOTE_BRIDGE_HEAD_ADDRESS_A = 0x811B001E,PR_EMS_AB_REMOTE_BRIDGE_HEAD_ADDRESS_W = 0x811B001F,PR_EMS_AB_REMOTE_OUT_BH_SERVER = 0x811C001E,PR_EMS_AB_REMOTE_OUT_BH_SERVER_A = 0x811C001E,PR_EMS_AB_REMOTE_OUT_BH_SERVER_W = 0x811C001F,PR_EMS_AB_REMOTE_OUT_BH_SERVER_O = 0x811C000D,PR_EMS_AB_REMOTE_OUT_BH_SERVER_T = 0x811C001E,PR_EMS_AB_REMOTE_SITE = 0x811D001E,PR_EMS_AB_REMOTE_SITE_A = 0x811D001E,PR_EMS_AB_REMOTE_SITE_W = 0x811D001F,PR_EMS_AB_REMOTE_SITE_O = 0x811D000D,PR_EMS_AB_REMOTE_SITE_T = 0x811D001E,PR_EMS_AB_REPLICATION_MAIL_MSG_SIZE = 0x81680003,PR_EMS_AB_REPLICATION_SENSITIVITY = 0x811E0003,PR_EMS_AB_REPLICATION_STAGGER = 0x811F0003,PR_EMS_AB_REPORT_TO_ORIGINATOR = 0x8120000B,PR_EMS_AB_REPORT_TO_OWNER = 0x8121000B,PR_EMS_AB_REPORTS = 0x800E000D,PR_EMS_AB_REPORTS_A = 0x800E101E,PR_EMS_AB_REPORTS_W = 0x800E101F,PR_EMS_AB_REPORTS_O = 0x800E000D,PR_EMS_AB_REPORTS_T = 0x800E101E,PR_EMS_AB_REQ_SEQ = 0x81220003,PR_EMS_AB_RESPONSIBLE_LOCAL_DXA = 0x8123001E,PR_EMS_AB_RESPONSIBLE_LOCAL_DXA_A = 0x8123001E,PR_EMS_AB_RESPONSIBLE_LOCAL_DXA_W = 0x8123001F,PR_EMS_AB_RESPONSIBLE_LOCAL_DXA_O = 0x8123000D,PR_EMS_AB_RESPONSIBLE_LOCAL_DXA_T = 0x8123001E,PR_EMS_AB_RID_SERVER = 0x8124001E,PR_EMS_AB_RID_SERVER_A = 0x8124001E,PR_EMS_AB_RID_SERVER_W = 0x8124001F,PR_EMS_AB_RID_SERVER_O = 0x8124000D,PR_EMS_AB_RID_SERVER_T = 0x8124001E,PR_EMS_AB_ROLE_OCCUPANT = 0x8125101E,PR_EMS_AB_ROLE_OCCUPANT_A = 0x8125101E,PR_EMS_AB_ROLE_OCCUPANT_W = 0x8125101F,PR_EMS_AB_ROLE_OCCUPANT_O = 0x8125000D,PR_EMS_AB_ROLE_OCCUPANT_T = 0x8125101E,PR_EMS_AB_ROUTING_LIST = 0x8126101E,PR_EMS_AB_ROUTING_LIST_A = 0x8126101E,PR_EMS_AB_ROUTING_LIST_W = 0x8126101F,PR_EMS_AB_RTS_CHECKPOINT_SIZE = 0x81270003,PR_EMS_AB_RTS_RECOVERY_TIMEOUT = 0x81280003,PR_EMS_AB_RTS_WINDOW_SIZE = 0x81290003,PR_EMS_AB_RUNS_ON = 0x812A101E,PR_EMS_AB_RUNS_ON_A = 0x812A101E,PR_EMS_AB_RUNS_ON_W = 0x812A101F,PR_EMS_AB_RUNS_ON_O = 0x812A000D,PR_EMS_AB_RUNS_ON_T = 0x812A101E,PR_EMS_AB_S_SELECTOR = 0x812B0102,PR_EMS_AB_S_SELECTOR_INBOUND = 0x812C0102,PR_EMS_AB_SCHEMA_FLAGS = 0x81730003,PR_EMS_AB_SCHEMA_VERSION = 0x817C1003,PR_EMS_AB_SEARCH_FLAGS = 0x812D0003,PR_EMS_AB_SEARCH_GUIDE = 0x812E1102,PR_EMS_AB_SECURITY_PROTOCOL = 0x80371102,PR_EMS_AB_SEE_ALSO = 0x812F101E,PR_EMS_AB_SEE_ALSO_A = 0x812F101E,PR_EMS_AB_SEE_ALSO_W = 0x812F101F,PR_EMS_AB_SEE_ALSO_O = 0x812F000D,PR_EMS_AB_SEE_ALSO_T = 0x812F101E,PR_EMS_AB_SERIAL_NUMBER = 0x8130101E,PR_EMS_AB_SERIAL_NUMBER_A = 0x8130101E,PR_EMS_AB_SERIAL_NUMBER_W = 0x8130101F,PR_EMS_AB_SERVICE_ACTION_FIRST = 0x81310003,PR_EMS_AB_SERVICE_ACTION_OTHER = 0x81320003,PR_EMS_AB_SERVICE_ACTION_SECOND = 0x81330003,PR_EMS_AB_SERVICE_RESTART_DELAY = 0x81340003,PR_EMS_AB_SERVICE_RESTART_MESSAGE = 0x8135001E,PR_EMS_AB_SERVICE_RESTART_MESSAGE_A = 0x8135001E,PR_EMS_AB_SERVICE_RESTART_MESSAGE_W = 0x8135001F,PR_EMS_AB_SESSION_DISCONNECT_TIMER = 0x81360003,PR_EMS_AB_SITE_AFFINITY = 0x8137101E,PR_EMS_AB_SITE_AFFINITY_A = 0x8137101E,PR_EMS_AB_SITE_AFFINITY_W = 0x8137101F,PR_EMS_AB_SITE_FOLDER_GUID = 0x81660102,PR_EMS_AB_SITE_FOLDER_SERVER = 0x8167001E,PR_EMS_AB_SITE_FOLDER_SERVER_A = 0x8167001E,PR_EMS_AB_SITE_FOLDER_SERVER_W = 0x8167001F,PR_EMS_AB_SITE_FOLDER_SERVER_O = 0x8167000D,PR_EMS_AB_SITE_FOLDER_SERVER_T = 0x8167001E,PR_EMS_AB_SITE_PROXY_SPACE = 0x8138101E,PR_EMS_AB_SITE_PROXY_SPACE_A = 0x8138101E,PR_EMS_AB_SITE_PROXY_SPACE_W = 0x8138101F,PR_EMS_AB_SPACE_LAST_COMPUTED = 0x81390040,PR_EMS_AB_STREET_ADDRESS = 0x813A001E,PR_EMS_AB_STREET_ADDRESS_A = 0x813A001E,PR_EMS_AB_STREET_ADDRESS_W = 0x813A001F,PR_EMS_AB_SUB_REFS = 0x813B101E,PR_EMS_AB_SUB_REFS_A = 0x813B101E,PR_EMS_AB_SUB_REFS_W = 0x813B101F,PR_EMS_AB_SUB_REFS_O = 0x813B000D,PR_EMS_AB_SUB_REFS_T = 0x813B101E,PR_EMS_AB_SUB_SITE = 0x817B001E,PR_EMS_AB_SUB_SITE_A = 0x817B001E,PR_EMS_AB_SUB_SITE_W = 0x817B001F,PR_EMS_AB_SUBMISSION_CONT_LENGTH = 0x813C0003,PR_EMS_AB_SUPPORTED_APPLICATION_CONTEXT = 0x813D1102,PR_EMS_AB_SUPPORTING_STACK = 0x813E101E,PR_EMS_AB_SUPPORTING_STACK_A = 0x813E101E,PR_EMS_AB_SUPPORTING_STACK_W = 0x813E101F,PR_EMS_AB_SUPPORTING_STACK_O = 0x813E000D,PR_EMS_AB_SUPPORTING_STACK_T = 0x813E101E,PR_EMS_AB_SUPPORTING_STACK_BL = 0x813F101E,PR_EMS_AB_SUPPORTING_STACK_BL_A = 0x813F101E,PR_EMS_AB_SUPPORTING_STACK_BL_W = 0x813F101F,PR_EMS_AB_SUPPORTING_STACK_BL_O = 0x813F000D,PR_EMS_AB_SUPPORTING_STACK_BL_T = 0x813F101E,PR_EMS_AB_T_SELECTOR = 0x81400102,PR_EMS_AB_T_SELECTOR_INBOUND = 0x81410102,PR_EMS_AB_TARGET_ADDRESS = 0x8011001E,PR_EMS_AB_TARGET_ADDRESS_A = 0x8011001E,PR_EMS_AB_TARGET_ADDRESS_W = 0x8011001F,PR_EMS_AB_TARGET_MTAS = 0x8142101E,PR_EMS_AB_TARGET_MTAS_A = 0x8142101E,PR_EMS_AB_TARGET_MTAS_W = 0x8142101F,PR_EMS_AB_TELEPHONE_NUMBER = 0x8012101E,PR_EMS_AB_TELEPHONE_NUMBER_A = 0x8012101E,PR_EMS_AB_TELEPHONE_NUMBER_W = 0x8012101F,PR_EMS_AB_TELETEX_TERMINAL_IDENTIFIER = 0x81431102,PR_EMS_AB_TEMP_ASSOC_THRESHOLD = 0x81440003,PR_EMS_AB_TOMBSTONE_LIFETIME = 0x81450003,PR_EMS_AB_TRACKING_LOG_PATH_NAME = 0x8146001E,PR_EMS_AB_TRACKING_LOG_PATH_NAME_A = 0x8146001E,PR_EMS_AB_TRACKING_LOG_PATH_NAME_W = 0x8146001F,PR_EMS_AB_TRANS_RETRY_MINS = 0x81470003,PR_EMS_AB_TRANS_TIMEOUT_MINS = 0x81480003,PR_EMS_AB_TRANSFER_RETRY_INTERVAL = 0x81490003,PR_EMS_AB_TRANSFER_TIMEOUT_NON_URGENT = 0x814A0003,PR_EMS_AB_TRANSFER_TIMEOUT_NORMAL = 0x814B0003,PR_EMS_AB_TRANSFER_TIMEOUT_URGENT = 0x814C0003,PR_EMS_AB_TRANSLATION_TABLE_USED = 0x814D0003,PR_EMS_AB_TRANSPORT_EXPEDITED_DATA = 0x814E000B,PR_EMS_AB_TRUST_LEVEL = 0x814F0003,PR_EMS_AB_TURN_REQUEST_THRESHOLD = 0x81500003,PR_EMS_AB_TWO_WAY_ALTERNATE_FACILITY = 0x8151000B,PR_EMS_AB_UNAUTH_ORIG_BL = 0x8152101E,PR_EMS_AB_UNAUTH_ORIG_BL_A = 0x8152101E,PR_EMS_AB_UNAUTH_ORIG_BL_W = 0x8152101F,PR_EMS_AB_UNAUTH_ORIG_BL_O = 0x8152000D,PR_EMS_AB_UNAUTH_ORIG_BL_T = 0x8152101E,PR_EMS_AB_USE_SERVER_VALUES = 0x817E000B,PR_EMS_AB_USER_PASSWORD = 0x81531102,PR_EMS_AB_USN_CHANGED = 0x80290003,PR_EMS_AB_USN_CREATED = 0x81540003,PR_EMS_AB_USN_DSA_LAST_OBJ_REMOVED = 0x81550003,PR_EMS_AB_USN_INTERSITE = 0x817A0003,PR_EMS_AB_USN_LAST_OBJ_REM = 0x81560003,PR_EMS_AB_USN_SOURCE = 0x81570003,PR_EMS_AB_WWW_HOME_PAGE = 0x8175001E,PR_EMS_AB_WWW_HOME_PAGE_A = 0x8175001E,PR_EMS_AB_WWW_HOME_PAGE_W = 0x8175001F,PR_EMS_AB_X121_ADDRESS = 0x8158101E,PR_EMS_AB_X121_ADDRESS_A = 0x8158101E,PR_EMS_AB_X121_ADDRESS_W = 0x8158101F,PR_EMS_AB_X25_CALL_USER_DATA_INCOMING = 0x81590102,PR_EMS_AB_X25_CALL_USER_DATA_OUTGOING = 0x815A0102,PR_EMS_AB_X25_FACILITIES_DATA_INCOMING = 0x815B0102,PR_EMS_AB_X25_FACILITIES_DATA_OUTGOING = 0x815C0102,PR_EMS_AB_X25_LEASED_LINE_PORT = 0x815D0102,PR_EMS_AB_X25_LEASED_OR_SWITCHED = 0x815E000B,PR_EMS_AB_X25_REMOTE_MTA_PHONE = 0x815F001E,PR_EMS_AB_X25_REMOTE_MTA_PHONE_A = 0x815F001E,PR_EMS_AB_X25_REMOTE_MTA_PHONE_W = 0x815F001F,PR_EMS_AB_X400_ATTACHMENT_TYPE = 0x81600102,PR_EMS_AB_X400_SELECTOR_SYNTAX = 0x81610003,PR_EMS_AB_X500_ACCESS_CONTROL_LIST = 0x81620102,PR_EMS_AB_XMIT_TIMEOUT_NON_URGENT = 0x81630003,PR_EMS_AB_XMIT_TIMEOUT_NORMAL = 0x81640003,PR_EMS_AB_XMIT_TIMEOUT_URGENT = 0x81650003,};
enum MACRO_PR_MEMBER {PR_MEMBER_ID = 1718681620,PR_MEMBER_NAME = 1718747166,PR_MEMBER_ENTRYID = 268370178,PR_MEMBER_RIGHTS = 1718812675,};
enum MACRO_PR_PUBLIC {PR_PUBLIC_FOLDER_ENTRYID = 0x663C0102,PR_HAS_NAMED_PROPERTIES = 0x664A000B,PR_CREATOR_NAME = 0x3FF8001E,PR_CREATOR_ENTRYID = 0x3FF90102,PR_LAST_MODIFIER_NAME = 0x3FFA001E,PR_LAST_MODIFIER_ENTRYID = 0x3FFB0102,PR_HAS_DAMS = 0x3FEA000B,PR_RULE_TRIGGER_HISTORY = 0x3FF20102,PR_MOVE_TO_STORE_ENTRYID = 0x3FF30102,PR_MOVE_TO_FOLDER_ENTRYID = 0x3FF40102,PR_REPLICA_SERVER = 0x6644001E,PR_DEFERRED_SEND_NUMBER = 0x3FEB0003,PR_DEFERRED_SEND_UNITS = 0x3FEC0003,PR_EXPIRY_NUMBER = 0x3FED0003,PR_EXPIRY_UNITS = 0x3FEE0003,PR_DEFERRED_SEND_TIME = 0x3FEF0040,PR_GW_ADMIN_OPERATIONS = 0x66580003,PR_P1_CONTENT = 0x11000102,PR_P1_CONTENT_TYPE = 0x11010102,PR_CLIENT_ACTIONS = 0x66450102,PR_DAM_ORIGINAL_ENTRYID = 0x66460102,PR_DAM_BACK_PATCHED = 0x6647000B,PR_RULE_ERROR = 0x66480003,PR_RULE_ACTION_TYPE = 0x66490003,PR_RULE_ACTION_NUMBER = 0x66500003,PR_RULE_FOLDER_ENTRYID = 0x66510102,PR_CONFLICT_ENTRYID = 0x3FF00102,PR_MESSAGE_LOCALE_ID = 0x3FF10003,PR_STORAGE_QUOTA_LIMIT = 0x3FF50003,PR_EXCESS_STORAGE_USED = 0x3FF60003,PR_SVR_GENERATING_QUOTA_MSG = 0x3FF7001E,PR_DELEGATED_BY_RULE = 0x3FE3000B,};
enum MACRO_PR_SAMPLE {PR_SAMPLE_DISPLAY_NAME = 0x6601001E,PR_SAMPLE_EMAIL_ADDR_TYPE = 0x6602001E,PR_SAMPLE_EMAIL_ADDRESS = 0x6603001E,PR_SAMPLE_INBOUND_DIR = 0x6604001E,PR_SAMPLE_OUTBOUND_DIR = 0x6605001E,PR_SAMPLE_FILENAME = 0x6606001E,PR_SAMPLE_DIRECTORY = 0x6607001E,PR_SAMPLE_FLAGS = 0x66080003,PR_SAMPLE_FLAG_PEER_TO_PEER = 0x1,PR_SAMPLE_FLAG_UI_ALWAYS = 0x2,PR_SAMPLE_FLAG_LOG_EVENTS = 0x4,PR_SAMPLE_FLAG_SAVE_DATA = 0x8,PR_SAMPLE_LOGFILE = 0x6609001E,PR_SAMPLE_LOGHIGHWATER = 0x660A0003,PR_SAMPLE_LOGLOWWATER = 0x660B0003,};
enum MACRO_PR_SOURCE {PR_SOURCE_KEY = 0x65E00102,PR_PARENT_SOURCE_KEY = 0x65E10102,PR_CHANGE_KEY = 0x65E20102,PR_PREDECESSOR_CHANGE_LIST = 0x65E30102,PR_FOLDER_CHILD_COUNT = 0x66380003,PR_RIGHTS = 0x66390003,PR_ACL_TABLE = 0x3FE0000D,PR_RULES_TABLE = 0x3FE1000D,PR_HAS_RULES = 0x663A000B,PR_ADDRESS_BOOK_ENTRYID = 0x663B0102,PR_ACL_DATA = 0x3FE00102,PR_RULES_DATA = 0x3FE10102,PR_FOLDER_DESIGN_FLAGS = 0x3FE20003,PR_DESIGN_IN_PROGRESS = 0x3FE4000B,PR_SECURE_ORIGINATION = 0x3FE5000B,PR_PUBLISH_IN_ADDRESS_BOOK = 0x3FE6000B,PR_RESOLVE_METHOD = 0x3FE70003,PR_ADDRESS_BOOK_DISPLAY_NAME = 0x3FE8001E,PR_EFORMS_LOCALE_ID = 0x3FE90003,PR_REPLICA_LIST = 0x66980102,PR_OVERALL_AGE_LIMIT = 0x66990003,};
enum MACRO_PR_WIZARD {PR_WIZARD_NO_PST_PAGE = 0x6700000B,};
enum MACRO_P_NOWAITO {P_NOWAITO = 3,P_DETACH = 4,};
enum MACRO_RASDDFLAG {RASDDFLAG_PositionDlg = 0x1,RASDDFLAG_LinkFailure = 0x80000000,};
enum MACRO_RASEDFLAG {RASEDFLAG_PositionDlg = 0x1,RASEDFLAG_NewEntry = 0x2,RASEDFLAG_CloneEntry = 0x4,RASEDFLAG_NoRename = 0x8,RASEDFLAG_ShellOwned = 0x40000000,};
enum MACRO_RASMDFLAG {RASMDFLAG_PositionDlg = 0x1,RASMDFLAG_UpdateDefaults = 0x80000000,};
enum MACRO_RASMDPAGE {RASMDPAGE_Status = 0,RASMDPAGE_Summary = 1,RASMDPAGE_Preferences = 2,};
enum MACRO_RAS_MODEM {RAS_MODEM_OPERATIONAL = 1,RAS_MODEM_NOT_RESPONDING = 2,RAS_MODEM_HARDWARE_FAILURE = 3,RAS_MODEM_INCORRECT_RESPONSE = 4,RAS_MODEM_UNKNOWN = 5,RAS_PORT_NON_OPERATIONAL = 1,RAS_PORT_DISCONNECTED = 2,RAS_PORT_CALLING_BACK = 3,RAS_PORT_LISTENING = 4,RAS_PORT_AUTHENTICATING = 5,RAS_PORT_AUTHENTICATED = 6,RAS_PORT_INITIALIZING = 7,};
enum MACRO_RECURSIVE {RECURSIVE_SORT = 0x2,};
enum MACRO_REFERENCE {REFERENCE_WHITE_MIN = 6000,REFERENCE_WHITE_MAX = 10000,REFERENCE_BLACK_MIN = 0,REFERENCE_BLACK_MAX = 4000,};
enum MACRO_REQSTATUS {REQSTATUS_ACTIVE = 1,REQSTATUS_ACCEPTED = 2,REQSTATUS_DENIED = 3,REQSTATUS_PENDING = 4,REQSTATUS_ERROR = 5,};
enum MACRO_ROUTEBASE {ROUTEBASE = 900,};
enum MACRO_RPC_FLAGS {RPC_FLAGS_VALID_BIT = 0x8000,};
enum MACRO_RULE_PAST {RULE_PAST_END = -1,};
enum MACRO_RUNDLGORD {RUNDLGORD = 1545,};
enum MACRO_SAP_FIELD {SAP_FIELD_ABSENT = 0xFFFFFFFE,SAP_FIELD_ANY = 0xFFFFFFFF,SAP_FIELD_ANY_AESA_SEL = 0xFFFFFFFA,SAP_FIELD_ANY_AESA_REST = 0xFFFFFFFB,};
enum MACRO_SCARD_ATR {SCARD_ATR_LENGTH = 33,SCARD_PROTOCOL_UNDEFINED = 0,SCARD_PROTOCOL_T0 = 1,SCARD_PROTOCOL_T1 = 2,SCARD_PROTOCOL_RAW = 65536,SCARD_PROTOCOL_DEFAULT = -2147483648,SCARD_PROTOCOL_OPTIMAL = 0,SCARD_POWER_DOWN = 0,SCARD_COLD_RESET = 1,SCARD_WARM_RESET = 2,};
enum MACRO_SECBUFFER {SECBUFFER_VERSION = 0,SECBUFFER_EMPTY = 0,SECBUFFER_DATA = 1,SECBUFFER_TOKEN = 2,SECBUFFER_PKG_PARAMS = 3,SECBUFFER_MISSING = 4,SECBUFFER_EXTRA = 5,SECBUFFER_STREAM_TRAILER = 6,SECBUFFER_STREAM_HEADER = 7,SECBUFFER_NEGOTIATION_INFO = 8,SECBUFFER_ATTRMASK = -268435456,SECBUFFER_READONLY = -2147483648,SECBUFFER_RESERVED = 1073741824,};
enum MACRO_SEC_WINNT {SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,};
enum MACRO_SELECTDIB {SELECTDIB = 41,};
enum MACRO_SEMAPHORE {SEMAPHORE_MODIFY_STATE = 0x2,SEMAPHORE_ALL_ACCESS = 0x1F0003,};
enum MACRO_SIMULATED {SIMULATED_FONTTYPE = 0x8000,PRINTER_FONTTYPE = 0x4000,SCREEN_FONTTYPE = 0x2000,BOLD_FONTTYPE = 0x100,ITALIC_FONTTYPE = 0x200,REGULAR_FONTTYPE = 0x400,};
enum MACRO_SMART_CYL {SMART_CYL_LOW = 0x4F,SMART_CYL_HI = 0xC2,SMART_NO_ERROR = 0x0,SMART_IDE_ERROR = 0x1,SMART_INVALID_FLAG = 0x2,SMART_INVALID_COMMAND = 0x3,SMART_INVALID_BUFFER = 0x4,SMART_INVALID_DRIVE = 0x5,SMART_INVALID_IOCTL = 0x6,SMART_ERROR_NO_MEM = 0x7,SMART_INVALID_REGISTER = 0x8,SMART_NOT_SUPPORTED = 0x9,SMART_NO_IDE_DEVICE = 0xA,};
enum MACRO_SNMP_TRAP {SNMP_TRAP_COLDSTART = 0,SNMP_TRAP_WARMSTART = 1,SNMP_TRAP_LINKDOWN = 2,SNMP_TRAP_LINKUP = 3,SNMP_TRAP_AUTHFAIL = 4,SNMP_TRAP_EGPNEIGHBORLOSS = 5,SNMP_TRAP_ENTERPRISESPECIFIC = 6,SNMP_ERROR_NOERROR = 0,SNMP_ERROR_TOOBIG = 1,SNMP_ERROR_NOSUCHNAME = 2,SNMP_ERROR_BADVALUE = 3,SNMP_ERROR_READONLY = 4,SNMP_ERROR_GENERR = 5,SNMP_ERROR_NOACCESS = 6,SNMP_ERROR_WRONGTYPE = 7,SNMP_ERROR_WRONGLENGTH = 8,SNMP_ERROR_WRONGENCODING = 9,SNMP_ERROR_WRONGVALUE = 10,SNMP_ERROR_NOCREATION = 11,SNMP_ERROR_INCONSISTENTVALUE = 12,SNMP_ERROR_RESOURCEUNAVAILABLE = 13,SNMP_ERROR_COMMITFAILED = 14,SNMP_ERROR_UNDOFAILED = 15,SNMP_ERROR_AUTHORIZATIONERROR = 16,SNMP_ERROR_NOTWRITABLE = 17,SNMP_ERROR_INCONSISTENTNAME = 18,};
enum MACRO_SOMAXCONN {SOMAXCONN = 0x7FFFFFFF,};
enum MACRO_SPFILELOG {SPFILELOG_SYSTEMLOG = 0x1,SPFILELOG_FORCENEW = 0x2,SPFILELOG_QUERYONLY = 0x4,SPFILELOG_OEMFILE = 0x1,};
enum MACRO_SPSVCINST {SPSVCINST_TAGTOFRONT = 0x1,SPSVCINST_ASSOCSERVICE = 0x2,SPSVCINST_DELETEEVENTLOGENTRY = 0x4,};
enum MACRO_SP_PARITY {SP_PARITY = 0x1,SP_BAUD = 0x2,SP_DATABITS = 0x4,SP_STOPBITS = 0x8,SP_HANDSHAKING = 0x10,SP_PARITY_CHECK = 0x20,SP_RLSD = 0x40,};
enum MACRO_SQLCRSAGR {SQLCRSAGR = 10079,};
enum MACRO_SQLCRSCMD {SQLCRSCMD = 10076,};
enum MACRO_SQLCRSDIS {SQLCRSDIS = 10078,};
enum MACRO_SQLCRSINV {SQLCRSINV = 10075,};
enum MACRO_SQLCRSMEM {SQLCRSMEM = 10081,};
enum MACRO_SQLCRSORD {SQLCRSORD = 10080,};
enum MACRO_SQLCRSOS2 {SQLCRSOS2 = 10096,};
enum MACRO_SQLCRSTAB {SQLCRSTAB = 10091,};
enum MACRO_SQLECNULL {SQLECNULL = 10036,};
enum MACRO_SQLENONET {SQLENONET = 10040,};
enum MACRO_SQLENULLO {SQLENULLO = 10006,};
enum MACRO_SQLEOLDVR {SQLEOLDVR = 10105,};
enum MACRO_SQLNUMVAL {SQLNUMVAL = 10104,};
enum MACRO_SQL_WCHAR {SQL_WCHAR = -8,SQL_WVARCHAR = -9,SQL_WLONGVARCHAR = -10,SQL_C_WCHAR = -8,SQL_C_TCHAR = 1,SQL_SQLSTATE_SIZEW = 10,};
enum MACRO_SRCINVERT {SRCINVERT = 0x660046,};
enum MACRO_SRVBINARY {SRVBINARY = 45,};
enum MACRO_SRVCOLFMT {SRVCOLFMT = 161,};
enum MACRO_SRVMONEY4 {SRVMONEY4 = 122,};
enum MACRO_SRVMONEYN {SRVMONEYN = 110,};
enum MACRO_SRVOFFSET {SRVOFFSET = 120,};
enum MACRO_SRVPROCID {SRVPROCID = 124,};
enum MACRO_STATEBITS {STATEBITS_FLAT = 0x1,};
enum MACRO_STATUSROW {STATUSROW_UPDATE = 0x10000000,};
enum MACRO_STDDISPID {STDDISPID_XOBJ_ONBLUR = -2147418112,STDDISPID_XOBJ_ONFOCUS = -2147418111,STDDISPID_XOBJ_BEFOREUPDATE = -2147418108,STDDISPID_XOBJ_AFTERUPDATE = -2147418107,STDDISPID_XOBJ_ONROWEXIT = -2147418106,STDDISPID_XOBJ_ONROWENTER = -2147418105,STDDISPID_XOBJ_ONMOUSEOVER = -2147418104,STDDISPID_XOBJ_ONMOUSEOUT = -2147418103,STDDISPID_XOBJ_ONHELP = -2147418102,STDDISPID_XOBJ_ONDRAGSTART = -2147418101,STDDISPID_XOBJ_ONSELECTSTART = -2147418100,STDDISPID_XOBJ_ERRORUPDATE = -2147418099,STDDISPID_XOBJ_ONDATASETCHANGED = -2147418098,STDDISPID_XOBJ_ONDATAAVAILABLE = -2147418097,STDDISPID_XOBJ_ONDATASETCOMPLETE = -2147418096,STDDISPID_XOBJ_ONFILTER = -2147418095,};
enum MACRO_STDPROPID {STDPROPID_XOBJ_NAME = 0x80010000,STDPROPID_XOBJ_INDEX = 0x80010001,STDPROPID_XOBJ_BASEHREF = 0x80010002,STDPROPID_XOBJ_LEFT = 0x80010003,STDPROPID_XOBJ_TOP = 0x80010004,STDPROPID_XOBJ_WIDTH = 0x80010005,STDPROPID_XOBJ_HEIGHT = 0x80010006,STDPROPID_XOBJ_VISIBLE = 0x80010007,STDPROPID_XOBJ_PARENT = 0x80010008,STDPROPID_XOBJ_DRAGMODE = 0x80010009,STDPROPID_XOBJ_DRAGICON = 0x8001000A,STDPROPID_XOBJ_TAG = 0x8001000B,STDPROPID_XOBJ_TABSTOP = 0x8001000E,STDPROPID_XOBJ_TABINDEX = 0x8001000F,STDPROPID_XOBJ_HELPCONTEXTID = 0x80010032,STDPROPID_XOBJ_DEFAULT = 0x80010037,STDPROPID_XOBJ_CANCEL = 0x80010038,STDPROPID_XOBJ_LEFTNORUN = 0x80010039,STDPROPID_XOBJ_TOPNORUN = 0x8001003A,STDPROPID_XOBJ_ALIGNPERSIST = 0x8001003C,STDPROPID_XOBJ_LINKTIMEOUT = 0x8001003D,STDPROPID_XOBJ_LINKTOPIC = 0x8001003E,STDPROPID_XOBJ_LINKITEM = 0x8001003F,STDPROPID_XOBJ_LINKMODE = 0x80010040,STDPROPID_XOBJ_DATACHANGED = 0x80010041,STDPROPID_XOBJ_DATAFIELD = 0x80010042,STDPROPID_XOBJ_DATASOURCE = 0x80010043,STDPROPID_XOBJ_WHATSTHISHELPID = 0x80010044,STDPROPID_XOBJ_CONTROLTIPTEXT = 0x80010045,STDPROPID_XOBJ_STATUSBARTEXT = 0x80010046,STDPROPID_XOBJ_APPLICATION = 0x80010047,STDPROPID_XOBJ_BLOCKALIGN = 0x80010048,STDPROPID_XOBJ_CONTROLALIGN = 0x80010049,STDPROPID_XOBJ_STYLE = 0x8001004A,STDPROPID_XOBJ_COUNT = 0x8001004B,STDPROPID_XOBJ_DISABLED = 0x8001004C,};
enum MACRO_STOP_TYPE {STOP_TYPE_PLAY = 0x1,STOP_TYPE_MOVE = 0x2,STOP_TYPE_SPEAK = 0x4,STOP_TYPE_PREPARE = 0x8,STOP_TYPE_NONQUEUEDPREPARE = 0x10,STOP_TYPE_VISIBLE = 0x20,STOP_TYPE_ALL = 0xFFFFFFFF,};
enum MACRO_TB_LINEUP {TB_LINEUP = 0,TB_LINEDOWN = 1,TB_PAGEUP = 2,TB_PAGEDOWN = 3,TB_THUMBPOSITION = 4,TB_THUMBTRACK = 5,TB_TOP = 6,TB_BOTTOM = 7,TB_ENDTRACK = 8,};
enum MACRO_TIME_ZONE {TIME_ZONE_ID_INVALID = 0xFFFFFFFF,};
enum MACRO_TMMIGRATE {TMMIGRATE = 0x100000,};
enum MACRO_TMNOFLAGS {TMNOFLAGS = 0x0,TMREGISTER = 0x1,TMNOMIGRATE = 0x2,TMUSEASYNC = 0x4,TMASYNC = 0x80000000,};
enum MACRO_TMSUCCESS {TMSUCCESS = 0x4000000,};
enum MACRO_TMSUSPEND {TMSUSPEND = 0x2000000,};
enum MACRO_TOKENRING {TOKENRING_HEADER_LENGTH = 14,TOKENRING_SA_ROUTING_INFO = 128,TOKENRING_SA_LOCAL = 64,TOKENRING_DA_LOCAL = 64,TOKENRING_DA_GROUP = 128,TOKENRING_RC_LENGTHMASK = 31,TOKENRING_BC_MASK = 224,TOKENRING_TYPE_MAC = 0,TOKENRING_TYPE_LLC = 64,};
enum MACRO_TOOLIMAGE {TOOLIMAGE_MIN = 0,TOOLIMAGE_EDITCUT = 0,TOOLIMAGE_EDITCOPY = 1,TOOLIMAGE_EDITPASTE = 2,TOOLIMAGE_FILENEW = 3,TOOLIMAGE_FILEOPEN = 4,TOOLIMAGE_FILESAVE = 5,TOOLIMAGE_FILEPRINT = 6,TOOLIMAGE_HELP = 7,TOOLIMAGE_HELPCONTEXT = 8,TOOLIMAGE_MAX = 8,};
enum MACRO_TOOLSBAND {TOOLSBAND = 0x1,ADDRESSBAND = 0x2,LINKSBAND = 0x4,};
enum MACRO_TRANSFORM {TRANSFORM_CTM = 4107,};
enum MACRO_TRANSPORT {TRANSPORT_TYPE_CN = 0x1,TRANSPORT_TYPE_DG = 0x2,TRANSPORT_TYPE_LPC = 0x4,TRANSPORT_TYPE_WMSG = 0x8,};
enum MACRO_TUISPIDLL {TUISPIDLL_OBJECT_LINEID = 1,TUISPIDLL_OBJECT_PHONEID = 2,TUISPIDLL_OBJECT_PROVIDERID = 3,TUISPIDLL_OBJECT_DIALOGINSTANCE = 4,};
enum MACRO_UPDFCACHE {UPDFCACHE_NODATACACHE = 0x1,UPDFCACHE_ONSAVECACHE = 0x2,UPDFCACHE_ONSTOPCACHE = 0x4,UPDFCACHE_NORMALCACHE = 0x8,UPDFCACHE_IFBLANK = 0x10,UPDFCACHE_ONLYIFBLANK = 0x80000000,UPDFCACHE_IFBLANKORONSAVECACHE = 0x12,UPDFCACHE_ALL = 0x7FFFFFFF,UPDFCACHE_ALLBUTNODATACACHE = 0x7FFFFFFE,};
enum MACRO_URLACTION {URLACTION_MIN = 0x1000,URLACTION_DOWNLOAD_MIN = 0x1000,URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 0x1001,URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 0x1004,URLACTION_DOWNLOAD_CURR_MAX = 0x1004,URLACTION_DOWNLOAD_MAX = 0x11FF,URLACTION_ACTIVEX_MIN = 0x1200,URLACTION_ACTIVEX_RUN = 0x1200,URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 0x1201,URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 0x1202,URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 0x1203,URLACTION_SCRIPT_OVERRIDE_SAFETY = 0x1401,URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 0x1204,URLACTION_ACTIVEX_TREATASUNTRUSTED = 0x1205,URLACTION_ACTIVEX_CURR_MAX = 0x1205,URLACTION_ACTIVEX_MAX = 0x13FF,URLACTION_SCRIPT_MIN = 0x1400,URLACTION_SCRIPT_RUN = 0x1400,URLACTION_SCRIPT_JAVA_USE = 0x1402,URLACTION_SCRIPT_SAFE_ACTIVEX = 0x1405,URLACTION_SCRIPT_CURR_MAX = 0x1405,URLACTION_SCRIPT_MAX = 0x15FF,URLACTION_HTML_MIN = 0x1600,URLACTION_HTML_SUBMIT_FORMS = 0x1601,URLACTION_HTML_SUBMIT_FORMS_FROM = 0x1602,URLACTION_HTML_SUBMIT_FORMS_TO = 0x1603,URLACTION_HTML_FONT_DOWNLOAD = 0x1604,URLACTION_HTML_JAVA_RUN = 0x1605,URLACTION_HTML_CURR_MAX = 0x1605,URLACTION_HTML_MAX = 0x17FF,URLACTION_SHELL_MIN = 0x1800,URLACTION_SHELL_INSTALL_DTITEMS = 0x1800,URLACTION_SHELL_MOVE_OR_COPY = 0x1802,URLACTION_SHELL_FILE_DOWNLOAD = 0x1803,URLACTION_SHELL_VERB = 0x1804,URLACTION_SHELL_WEBVIEW_VERB = 0x1805,URLACTION_SHELL_CURR_MAX = 0x1805,URLACTION_SHELL_MAX = 0x19FF,URLACTION_NETWORK_MIN = 0x1A00,URLACTION_CREDENTIALS_USE = 0x1A00,};
enum MACRO_URLPOLICY {URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0x0,URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 0x10000,URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 0x20000,URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 0x30000,};
enum MACRO_USER_NAME {USER_NAME_PARMNUM = 1,USER_PASSWORD_PARMNUM = 3,USER_PASSWORD_AGE_PARMNUM = 4,USER_PRIV_PARMNUM = 5,USER_HOME_DIR_PARMNUM = 6,USER_COMMENT_PARMNUM = 7,USER_FLAGS_PARMNUM = 8,USER_SCRIPT_PATH_PARMNUM = 9,USER_AUTH_FLAGS_PARMNUM = 10,USER_FULL_NAME_PARMNUM = 11,USER_USR_COMMENT_PARMNUM = 12,USER_PARMS_PARMNUM = 13,USER_WORKSTATIONS_PARMNUM = 14,USER_LAST_LOGON_PARMNUM = 15,USER_LAST_LOGOFF_PARMNUM = 16,USER_ACCT_EXPIRES_PARMNUM = 17,USER_MAX_STORAGE_PARMNUM = 18,USER_UNITS_PER_WEEK_PARMNUM = 19,USER_LOGON_HOURS_PARMNUM = 20,USER_PAD_PW_COUNT_PARMNUM = 21,USER_NUM_LOGONS_PARMNUM = 22,USER_LOGON_SERVER_PARMNUM = 23,USER_COUNTRY_CODE_PARMNUM = 24,USER_CODE_PAGE_PARMNUM = 25,USER_PRIMARY_GROUP_PARMNUM = 51,USER_PROFILE = 52,USER_PROFILE_PARMNUM = 52,USER_HOME_DIR_DRIVE_PARMNUM = 53,USER_NAME_INFOLEVEL = 1001,USER_PASSWORD_INFOLEVEL = 1003,USER_PASSWORD_AGE_INFOLEVEL = 1004,USER_PRIV_INFOLEVEL = 1005,USER_HOME_DIR_INFOLEVEL = 1006,USER_COMMENT_INFOLEVEL = 1007,USER_FLAGS_INFOLEVEL = 1008,USER_SCRIPT_PATH_INFOLEVEL = 1009,USER_AUTH_FLAGS_INFOLEVEL = 1010,USER_FULL_NAME_INFOLEVEL = 1011,USER_USR_COMMENT_INFOLEVEL = 1012,USER_PARMS_INFOLEVEL = 1013,USER_WORKSTATIONS_INFOLEVEL = 1014,USER_LAST_LOGON_INFOLEVEL = 1015,USER_LAST_LOGOFF_INFOLEVEL = 1016,USER_ACCT_EXPIRES_INFOLEVEL = 1017,USER_MAX_STORAGE_INFOLEVEL = 1018,USER_UNITS_PER_WEEK_INFOLEVEL = 1019,USER_LOGON_HOURS_INFOLEVEL = 1020,USER_PAD_PW_COUNT_INFOLEVEL = 1021,USER_NUM_LOGONS_INFOLEVEL = 1022,USER_LOGON_SERVER_INFOLEVEL = 1023,USER_COUNTRY_CODE_INFOLEVEL = 1024,USER_CODE_PAGE_INFOLEVEL = 1025,USER_PRIMARY_GROUP_INFOLEVEL = 1051,USER_HOME_DIR_DRIVE_INFOLEVEL = 1053,};
enum MACRO_USER_PRIV {USER_PRIV_MASK = 0x3,USER_PRIV_GUEST = 0x0,USER_PRIV_USER = 0x1,USER_PRIV_ADMIN = 0x2,};
enum MACRO_VALIDATED {VALIDATED_LOGON = 0,};
enum MACRO_WBF_CLASS {WBF_CLASS = 0xF,WBF_ISWHITE = 0x10,WBF_BREAKLINE = 0x20,WBF_BREAKAFTER = 0x40,};
enum MACRO_WHITENESS {WHITENESS = 0xFF0062,};
enum MACRO_WLUAGETLU {WLUAGETLU = 25,};
enum MACRO_WPF_FORCE {WPF_FORCE_BIND = 0x100,};
enum MACRO_WSAEACCES {WSAEACCES = 10013,};
enum MACRO_WSAEDQUOT {WSAEDQUOT = 10069,};
enum MACRO_WSAEFAULT {WSAEFAULT = 10014,};
enum MACRO_WSAEINVAL {WSAEINVAL = 10022,};
enum MACRO_WSAEMFILE {WSAEMFILE = 10024,};
enum MACRO_WSAESTALE {WSAESTALE = 10070,};
enum MACRO_WSAEUSERS {WSAEUSERS = 10068,};
enum MACRO_X509_CERT {X509_CERT = 1,X509_CERT_TO_BE_SIGNED = 2,X509_CERT_CRL_TO_BE_SIGNED = 3,X509_CERT_REQUEST_TO_BE_SIGNED = 4,X509_EXTENSIONS = 5,X509_NAME_VALUE = 6,X509_NAME = 7,X509_PUBLIC_KEY_INFO = 8,X509_AUTHORITY_KEY_ID = 9,X509_KEY_ATTRIBUTES = 10,X509_KEY_USAGE_RESTRICTION = 11,X509_ALTERNATE_NAME = 12,X509_BASIC_CONSTRAINTS = 13,X509_KEY_USAGE = 14,X509_BASIC_CONSTRAINTS2 = 15,X509_CERT_POLICIES = 16,};
enum MACRO_XA_SWITCH {XA_SWITCH_F_DTC = 0x1,XA_FMTID_DTC = 0x445443,};
enum MACRO__OVERFLOW {_OVERFLOW = 3,_UNDERFLOW = 4,};
enum MACRO__RICHEDIT {_RICHEDIT_VER = 0x210,};
enum MACRO_hrBFInUse {hrBFInUse = 0xC80000CA,};
enum MACRO_hrSuccess {hrSuccess = 0,};
enum MACRO_rightsAll {rightsAll = 0x1FB,};
enum MACRO_scNoError {scNoError = 0,scInvalidData = 1,scCannotLogData = 2,};
enum MACRO_trpidNull {trpidNull = 0x0,trpidUnresolved = 0x1,trpidResolvedNSID = 0x2,};
typedef struct tagMCI_BREAK_PARMS MCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA MCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW MCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA MCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW MCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA MCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW MCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA MCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW MCI_SAVE_PARMSW;
typedef struct _MEMORYSTATUSVLM MEMORYSTATUSVLM;
typedef struct _METADATA_RECORD METADATA_RECORD;
typedef struct midiproptimediv_tag MIDIPROPTIMEDIV;
typedef struct midistrmbuffver_tag MIDISTRMBUFFVER;
typedef struct _MIDL_ES_MESSAGE MIDL_ES_MESSAGE;
typedef struct _MONITOR_INFO_1A MONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W MONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A MONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W MONITOR_INFO_2W;
typedef struct _MonSharedMemory MONSHAREDMEMORY;
typedef struct tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
typedef struct mpeg1waveformat_tag MPEG1WAVEFORMAT;
typedef struct MS_ADDINFO_BLOB_ MS_ADDINFO_BLOB;
typedef struct MS_ADDINFO_FLAT_ MS_ADDINFO_FLAT;
typedef struct ms_appl_overlay MS_APPL_OVERLAY;
struct MediaCollection;
typedef struct _NETLOGON_INFO_1 NETLOGON_INFO_1;
typedef struct _NETLOGON_INFO_2 NETLOGON_INFO_2;
typedef struct _NETLOGON_INFO_3 NETLOGON_INFO_3;
typedef struct _NETLOGON_INFO_4 NETLOGON_INFO_4;
typedef struct _EAF9C7AE235510435B672EB36E720462 NMCBEDRAGBEGINA;
typedef struct _8C7301159AF0C1BFC267CBF90877013D NMCBEDRAGBEGINW;
typedef struct tagNMLVGETINFOTIPA NMLVGETINFOTIPA;
typedef struct tagNMLVGETINFOTIPW NMLVGETINFOTIPW;
typedef struct tagNMTBGETINFOTIPA NMTBGETINFOTIPA;
typedef struct tagNMTBGETINFOTIPW NMTBGETINFOTIPW;
typedef struct tagNMTVGETINFOTIPA NMTVGETINFOTIPA;
typedef struct tagNMTVGETINFOTIPW NMTVGETINFOTIPW;
typedef struct _NOTIFYICONDATAA NOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW NOTIFYICONDATAW;
typedef struct tagCANDIDATEFORM *NPCANDIDATEFORM;
typedef struct tagCANDIDATELIST *NPCANDIDATELIST;
typedef struct tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO *NPDRVCONFIGINFO;
typedef struct pcmwaveformat_tag *NPPCMWAVEFORMAT;
typedef struct tagREGISTERWORDA *NPREGISTERWORDA;
typedef struct tagREGISTERWORDW *NPREGISTERWORDW;
typedef struct _NTFS_STATISTICS NTFS_STATISTICS;
enum NtmsLibraryType {NTMS_LIBRARYTYPE_UNKNOWN = 0x0,NTMS_LIBRARYTYPE_OFFLINE = 0x1,NTMS_LIBRARYTYPE_ONLINE = 0x2,NTMS_LIBRARYTYPE_STANDALONE = 0x3,};
enum NtmsLmOperation {NTMS_LM_REMOVE = 0x0,NTMS_LM_DISABLECHANGER = 0x1,NTMS_LM_ENABLECHANGER = 0x2,NTMS_LM_DISABLEDRIVE = 0x3,NTMS_LM_ENABLEDRIVE = 0x4,NTMS_LM_DISABLEMEDIA = 0x5,NTMS_LM_ENABLEMEDIA = 0x6,NTMS_LM_UPDATEOMID = 0x7,NTMS_LM_INVENTORY = 0x8,NTMS_LM_DOORACCESS = 0x9,NTMS_LM_EJECT = 0xA,NTMS_LM_EJECTCLEANER = 0xB,NTMS_LM_INJECT = 0xC,NTMS_LM_INJECTCLEANER = 0xD,NTMS_LM_PROCESSOMID = 0xE,NTMS_LM_CLEANDRIVE = 0xF,NTMS_LM_DISMOUNT = 0x10,NTMS_LM_MOUNT = 0x11,NTMS_LM_WRITESCRATCH = 0x12,NTMS_LM_CLASSIFY = 0x13,NTMS_LM_RESERVECLEANER = 0x14,NTMS_LM_RELEASECLEANER = 0x15,NTMS_LM_MAXWORKITEM = 0x16,};
enum NtmsPortContent {NTMS_PORTCONTENT_UNKNOWN = 0x0,NTMS_PORTCONTENT_FULL = 0x1,NTMS_PORTCONTENT_EMPTY = 0x2,};
typedef struct _objectpositions OBJECTPOSITIONS;
typedef struct tagOLEUIEDITLINKSA OLEUIEDITLINKSA;
typedef struct tagOLEUIEDITLINKSW OLEUIEDITLINKSW;
typedef struct tagOLEUIGNRLPROPSA OLEUIGNRLPROPSA;
typedef struct tagOLEUIGNRLPROPSW OLEUIGNRLPROPSW;
typedef struct tagOLEUILINKPROPSA OLEUILINKPROPSA;
typedef struct tagOLEUILINKPROPSW OLEUILINKPROPSW;
typedef struct tagOLEUIVIEWPROPSA OLEUIVIEWPROPSA;
typedef struct tagOLEUIVIEWPROPSW OLEUIVIEWPROPSW;
typedef int OLE_XPOS_PIXELS;
typedef int OLE_YPOS_PIXELS;
enum ObjectStateEnum {adStateClosed = 0x0,adStateOpen = 0x1,adStateConnecting = 0x2,adStateExecuting = 0x4,adStateFetching = 0x8,};
struct OldHTMLDocument;
typedef struct tagPACKAGEINFOLIST PACKAGEINFOLIST;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO;
typedef struct _ADAPTER_STATUS *PADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A *PADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *PADDJOB_INFO_1W;
typedef struct _AE_SERVICESTAT *PAE_SERVICESTAT;
typedef IAMStreamSelect *PAMSTREAMSELECT;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 *PAM_AC3_DOWNMIX;
typedef struct _PATHNAME_BUFFER PATHNAME_BUFFER;
typedef struct tagBITMAPCOREINFO *PBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *PBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *PBITMAPV5HEADER;
typedef struct _CABINET_INFO_A *PCABINET_INFO_A;
typedef struct _CABINET_INFO_W *PCABINET_INFO_W;
typedef struct _CERT_EXTENSION *PCERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO *PCERT_NAME_INFO;
typedef struct _CERT_POLICY_ID *PCERT_POLICY_ID;
typedef struct _CHARDEV_INFO_0 *PCHARDEV_INFO_0;
typedef struct _CHARDEV_INFO_1 *PCHARDEV_INFO_1;
typedef  ImgDelayDescr *PCImgDelayDescr;
typedef  char *PCInterfaceName;
typedef struct CLUSPROP_DWORD *PCLUSPROP_DWORD;
typedef struct CLUSPROP_VALUE *PCLUSPROP_VALUE;
typedef struct tagCOPYDATASTRUCT *PCOPYDATASTRUCT;
typedef struct _CRL_DIST_POINT *PCRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO *PCRYPT_OID_INFO;
typedef struct _DISK_HISTOGRAM *PDISK_HISTOGRAM;
typedef struct tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;
typedef struct _DRIVER_INFO_1A *PDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *PDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *PDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *PDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *PDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *PDRIVER_INFO_3W;
typedef struct tagABORTPATH *PEMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;
typedef struct tagABORTPATH *PEMRFLATTENPATH;
typedef struct tagEMRPIXELFORMAT *PEMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;
typedef IEnumMediaTypes *PENUMMEDIATYPES;
typedef IEnumRegFilters *PENUMREGFILTERS;
typedef struct _PERF_DATA_BLOCK PERF_DATA_BLOCK;
typedef struct _EVENTLOGRECORD *PEVENTLOGRECORD;
typedef struct _FAT_STATISTICS *PFAT_STATISTICS;
typedef IFileSinkFilter *PFILTERFILESINK;
typedef struct _FLT_PACKET_LOG *PFLT_PACKET_LOG;
typedef struct phonebuttoninfo_tag PHONEBUTTONINFO;
typedef struct tag_IDFCHANNELINFO *PIDFCHANNELINFO;
typedef struct tag_IDFPATCHMAPHDR *PIDFPATCHMAPHDR;
typedef struct _IF_TABLE_INDEX *PIF_TABLE_INDEX;
typedef struct _IPXWAN_IF_INFO *PIPXWAN_IF_INFO;
typedef struct _9CC657B7E0AE245246966219C61A944E *PKSCLOCK_CREATE;
typedef struct _EF98EE567420140E285BF0657F46953F *PKSP_TIMEFORMAT;
typedef struct _8D5240EB4C2C3F8FC45B3D9D0343B483 *PLLC_DIRECT_LOG;
typedef struct _93DD11BEAC2601A6EF0B5FEB14D3B821 *PLLC_READ_PARMS;
typedef struct plu_def_overlay PLU_DEF_OVERLAY;
typedef struct tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;
typedef IMediaEventSink *PMEDIAEVENTSINK;
typedef void *PMIDL_XMIT_TYPE;
typedef IMLangCodePages *PMLANGCODEPAGES;
typedef struct tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA *PMOVE_FILE_DATA;
typedef struct tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA *PNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *PNEWTEXTMETRICW;
typedef struct _POLICY_EFS_INFO POLICY_EFS_INFO;
typedef struct post_on_receipt POST_ON_RECEIPT;
typedef struct _OSVERSIONINFOA *POSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *POSVERSIONINFOW;
typedef struct _PPP_EAP_OUTPUT *PPPP_EAP_OUTPUT;
typedef struct _PPP_EAP_PACKET *PPPP_EAP_PACKET;
typedef struct _PRINTER_INFO_3 *PPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *PPRINTER_INFO_6;
typedef struct _PROTOCOL_INFOA *PPROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW *PPROTOCOL_INFOW;
typedef IQualityControl *PQUALITYCONTROL;
typedef struct _tagREAD_WRITE_MSR *PREAD_WRITE_MSR;
typedef IReferenceClock *PREFERENCECLOCK;
typedef struct _REPL_INFO_1000 *PREPL_INFO_1000;
typedef struct _REPL_INFO_1001 *PREPL_INFO_1001;
typedef struct _REPL_INFO_1002 *PREPL_INFO_1002;
typedef struct _REPL_INFO_1003 *PREPL_INFO_1003;
typedef struct _PRINTER_INFO_1A PRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W PRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A PRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W PRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A PRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W PRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A PRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W PRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A PRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W PRINTER_INFO_7W;
typedef struct _RIP_IF_FILTERS *PRIP_IF_FILTERS;
typedef struct tagPROCESSENTRY32W PROCESSENTRY32W;
typedef struct _RTP_SDES_ITEM *PRTCP_SDES_ITEM;
typedef struct _SAP_IF_FILTERS *PSAP_IF_FILTERS;
typedef struct _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;
typedef struct _SERVICE_INFO_0 *PSERVICE_INFO_0;
typedef struct _SERVICE_INFO_1 *PSERVICE_INFO_1;
typedef struct _SERVICE_INFO_2 *PSERVICE_INFO_2;
typedef struct _SESSION_BUFFER *PSESSION_BUFFER;
typedef struct _SESSION_HEADER *PSESSION_HEADER;
typedef struct _SESSION_INFO_0 *PSESSION_INFO_0;
typedef struct _SESSION_INFO_1 *PSESSION_INFO_1;
typedef struct _SESSION_INFO_2 *PSESSION_INFO_2;
typedef struct _SHARE_INFO_501 *PSHARE_INFO_501;
typedef struct _SHARE_INFO_502 *PSHARE_INFO_502;
typedef struct _SOCKET_ADDRESS *PSOCKET_ADDRESS;
typedef struct _SOURCE_MEDIA_A *PSOURCE_MEDIA_A;
typedef struct _SOURCE_MEDIA_W *PSOURCE_MEDIA_W;
typedef struct _USER_INFO_1003 *PUSER_INFO_1003;
typedef struct _USER_INFO_1005 *PUSER_INFO_1005;
typedef struct _USER_INFO_1006 *PUSER_INFO_1006;
typedef struct _USER_INFO_1007 *PUSER_INFO_1007;
typedef struct _USER_INFO_1008 *PUSER_INFO_1008;
typedef struct _USER_INFO_1009 *PUSER_INFO_1009;
typedef struct _USER_INFO_1010 *PUSER_INFO_1010;
typedef struct _USER_INFO_1011 *PUSER_INFO_1011;
typedef struct _USER_INFO_1012 *PUSER_INFO_1012;
typedef struct _USER_INFO_1013 *PUSER_INFO_1013;
typedef struct _USER_INFO_1014 *PUSER_INFO_1014;
typedef struct _USER_INFO_1017 *PUSER_INFO_1017;
typedef struct _USER_INFO_1018 *PUSER_INFO_1018;
typedef struct _USER_INFO_1020 *PUSER_INFO_1020;
typedef struct _USER_INFO_1023 *PUSER_INFO_1023;
typedef struct _USER_INFO_1024 *PUSER_INFO_1024;
typedef struct _USER_INFO_1025 *PUSER_INFO_1025;
typedef struct _USER_INFO_1051 *PUSER_INFO_1051;
typedef struct _USER_INFO_1052 *PUSER_INFO_1052;
typedef struct _USER_INFO_1053 *PUSER_INFO_1053;
typedef struct _WKSTA_INFO_100 *PWKSTA_INFO_100;
typedef struct _WKSTA_INFO_101 *PWKSTA_INFO_101;
typedef struct _WKSTA_INFO_102 *PWKSTA_INFO_102;
typedef struct _WKSTA_INFO_302 *PWKSTA_INFO_302;
typedef struct _WKSTA_INFO_402 *PWKSTA_INFO_402;
typedef struct _WKSTA_INFO_502 *PWKSTA_INFO_502;
typedef struct _REASSIGN_BLOCKS REASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING RECONVERTSTRING;
typedef struct request_to_send REQUEST_TO_SEND;
typedef struct _RIP_GLOBAL_INFO RIP_GLOBAL_INFO;
typedef struct _RPC_ASYNC_STATE RPC_ASYNC_STATE;
typedef void  RPC_CLIENT_FREE(void *Ptr);
typedef struct _RSVP_FILTERSPEC RSVP_FILTERSPEC;
struct RecordsetEvents {struct RecordsetEventsVtbl *lpVtbl;};
typedef struct tagRemHENHMETAFILE RemHENHMETAFILE;
typedef struct _RemotableHandle RemotableHandle;
typedef struct _wireSAFEARR_BRECORD SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
typedef struct _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_VARIANT SAFEARR_VARIANT;
typedef struct _SAP_GLOBAL_INFO SAP_GLOBAL_INFO;
typedef struct _SAndRestriction SAndRestriction;
typedef struct _SECURITY_STRING SECURITY_STRING;
typedef struct _SENDCMDINPARAMS SENDCMDINPARAMS;
typedef struct _SERVER_INFO_100 SERVER_INFO_100;
typedef struct _SERVER_INFO_101 SERVER_INFO_101;
typedef struct _SERVER_INFO_102 SERVER_INFO_102;
typedef struct _SERVER_INFO_402 SERVER_INFO_402;
typedef struct _SERVER_INFO_403 SERVER_INFO_403;
typedef struct _SERVER_INFO_502 SERVER_INFO_502;
typedef struct _SERVER_INFO_503 SERVER_INFO_503;
typedef struct _SERVER_INFO_598 SERVER_INFO_598;
typedef struct _SERVER_INFO_599 SERVER_INFO_599;
typedef struct _SERVICE_ADDRESS SERVICE_ADDRESS;
typedef struct _SESSION_INFO_10 SESSION_INFO_10;
enum SF_PROPERTY_IIS {SF_PROPERTY_SSL_CTXT = 0x0,SF_PROPERTY_INSTANCE_NUM_ID = 0x1,};
typedef struct _SHARE_INFO_1004 SHARE_INFO_1004;
typedef struct _SHARE_INFO_1005 SHARE_INFO_1005;
typedef struct _SHARE_INFO_1006 SHARE_INFO_1006;
typedef struct _SHARE_INFO_1007 SHARE_INFO_1007;
typedef struct _SHARE_INFO_1501 SHARE_INFO_1501;
typedef struct _SHDESCRIPTIONID SHDESCRIPTIONID;
typedef struct _SHFILEOPSTRUCTA SHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW SHFILEOPSTRUCTW;
typedef struct SIP_SUBJECTINFO_ SIP_SUBJECTINFO;
typedef struct _SNotRestriction SNotRestriction;
typedef struct _SP_DEVINFO_DATA SP_DEVINFO_DATA;
typedef struct srv_comportbuf SRV_COMPORT_BUF;
typedef struct _SSubRestriction SSubRestriction;
struct ShellFolderView;
struct ShellLinkObject;
typedef struct _65212D604C3568820517740B7202AE45 SnmpVarBindList;
struct SubscriptionMgr;
typedef struct _TAPE_STATISTICS TAPE_STATISTICS;
typedef struct _DD2E0983FBF83F36606C69DABA2BC276 TBREPLACEBITMAP;
typedef struct tagTIMECODE_SAMPLE TIMECODE_SAMPLE;
typedef struct tagTOOLDISPLAYDATA TOOLDISPLAYDATA;
typedef struct tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
typedef struct _TRUSTEE_ACCESSA TRUSTEE_ACCESSA;
typedef struct _TRUSTEE_ACCESSW TRUSTEE_ACCESSW;
typedef struct tagTTPOLYGONHEADER TTPOLYGONHEADER;
typedef struct tagTVINSERTSTRUCTA TVINSERTSTRUCTA;
typedef struct tagTVINSERTSTRUCTW TVINSERTSTRUCTW;
typedef struct _BC2FB811D417144E831EE3AEA4A279C8 URL_COMPONENTSA;
typedef struct _2B4FDC4BF487E67F052937EE78FAE255 URL_COMPONENTSW;
typedef struct tagUSEROBJECTFLAGS USEROBJECTFLAGS;
typedef struct _USER_MARSHAL_CB USER_MARSHAL_CB;
typedef struct _USER_OTHER_INFO USER_OTHER_INFO;
typedef struct tagVIDEOINFOHEADER VIDEOINFOHEADER;
typedef struct _VTableProvStruc VTableProvStruc;
typedef struct _WIN32_STREAM_ID WIN32_STREAM_ID;
typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;
typedef struct _WIN_CERTIFICATE WIN_CERTIFICATE;
typedef struct _WKSTA_INFO_1010 WKSTA_INFO_1010;
typedef struct _WKSTA_INFO_1011 WKSTA_INFO_1011;
typedef struct _WKSTA_INFO_1012 WKSTA_INFO_1012;
typedef struct _WKSTA_INFO_1013 WKSTA_INFO_1013;
typedef struct _WKSTA_INFO_1018 WKSTA_INFO_1018;
typedef struct _WKSTA_INFO_1023 WKSTA_INFO_1023;
typedef struct _WKSTA_INFO_1027 WKSTA_INFO_1027;
typedef struct _WKSTA_INFO_1028 WKSTA_INFO_1028;
typedef struct _WKSTA_INFO_1032 WKSTA_INFO_1032;
typedef struct _WKSTA_INFO_1033 WKSTA_INFO_1033;
typedef struct _WKSTA_INFO_1041 WKSTA_INFO_1041;
typedef struct _WKSTA_INFO_1042 WKSTA_INFO_1042;
typedef struct _WKSTA_INFO_1043 WKSTA_INFO_1043;
typedef struct _WKSTA_INFO_1044 WKSTA_INFO_1044;
typedef struct _WKSTA_INFO_1045 WKSTA_INFO_1045;
typedef struct _WKSTA_INFO_1046 WKSTA_INFO_1046;
typedef struct _WKSTA_INFO_1047 WKSTA_INFO_1047;
typedef struct _WKSTA_INFO_1048 WKSTA_INFO_1048;
typedef struct _WKSTA_INFO_1049 WKSTA_INFO_1049;
typedef struct _WKSTA_INFO_1050 WKSTA_INFO_1050;
typedef struct _WKSTA_INFO_1051 WKSTA_INFO_1051;
typedef struct _WKSTA_INFO_1052 WKSTA_INFO_1052;
typedef struct _WKSTA_INFO_1053 WKSTA_INFO_1053;
typedef struct _WKSTA_INFO_1054 WKSTA_INFO_1054;
typedef struct _WKSTA_INFO_1055 WKSTA_INFO_1055;
typedef struct _WKSTA_INFO_1056 WKSTA_INFO_1056;
typedef struct _WKSTA_INFO_1057 WKSTA_INFO_1057;
typedef struct _WKSTA_INFO_1058 WKSTA_INFO_1058;
typedef struct _WKSTA_INFO_1059 WKSTA_INFO_1059;
typedef struct _WKSTA_INFO_1060 WKSTA_INFO_1060;
typedef struct _WKSTA_INFO_1061 WKSTA_INFO_1061;
typedef struct _WKSTA_INFO_1062 WKSTA_INFO_1062;
typedef struct _WSANSClassInfoA WSANSCLASSINFOA;
typedef struct _WSANSClassInfoW WSANSCLASSINFOW;
typedef struct _WSH_LOOKUP_NAME WSH_LOOKUP_NAME;
typedef struct _X509Certificate X509Certificate;
typedef int (*XA_COMPLETE_EPT)(int *, int *, int, int);
typedef signed int XC_TP_NAME_TYPE;
enum _D3DRMLIGHTMODE {D3DRMLIGHT_OFF = 0x0,D3DRMLIGHT_ON = 0x8,D3DRMLIGHT_MASK = 0x38,D3DRMLIGHT_MAX = 0x40,};
enum _D3DRMLIGHTTYPE {D3DRMLIGHT_AMBIENT = 0x0,D3DRMLIGHT_POINT = 0x1,D3DRMLIGHT_SPOT = 0x2,D3DRMLIGHT_DIRECTIONAL = 0x3,D3DRMLIGHT_PARALLELPOINT = 0x4,};
enum _D3DRMSHADEMODE {D3DRMSHADE_FLAT = 0x0,D3DRMSHADE_GOURAUD = 0x1,D3DRMSHADE_PHONG = 0x2,D3DRMSHADE_MASK = 0x7,D3DRMSHADE_MAX = 0x8,};
enum _D3DRMXOFFORMAT {D3DRMXOF_BINARY = 0x0,D3DRMXOF_COMPRESSED = 0x1,D3DRMXOF_TEXT = 0x2,};
struct _DPreviewEvents {struct _DPreviewEventsVtbl *lpVtbl;};
enum _HLSR_NOREDEF10 {HLSR_HOME = 0x0,HLSR_SEARCHPAGE = 0x1,HLSR_HISTORYFOLDER = 0x2,};
struct _HYPER_SIZEDARR {unsigned int clSize;long long *pData;};
enum _PPP_EAP_ACTION {EAPACTION_NoAction = 0x0,EAPACTION_Done = 0x1,EAPACTION_SendAndDone = 0x2,EAPACTION_Send = 0x3,EAPACTION_SendWithTimeout = 0x4,EAPACTION_SendWithTimeoutInteractive = 0x5,};
enum _SC_ACTION_TYPE {SC_ACTION_NONE = 0x0,SC_ACTION_RESTART = 0x1,SC_ACTION_REBOOT = 0x2,SC_ACTION_RUN_COMMAND = 0x3,};
enum _SE_OBJECT_TYPE {SE_UNKNOWN_OBJECT_TYPE = 0x0,SE_FILE_OBJECT = 0x1,SE_SERVICE = 0x2,SE_PRINTER = 0x3,SE_REGISTRY_KEY = 0x4,SE_LMSHARE = 0x5,SE_KERNEL_OBJECT = 0x6,SE_WINDOW_OBJECT = 0x7,SE_DS_OBJECT = 0x8,SE_DS_OBJECT_ALL = 0x9,SE_PROVIDER_DEFINED_OBJECT = 0xA,};
struct _SHORT_SIZEDARR {unsigned int clSize;unsigned short *pData;};
enum _WSAEcomparator {COMP_EQUAL = 0x0,COMP_NOTLESS = 0x1,};
enum _tagDVD_WARNING {DVD_WARNING_InvalidDVD1_0Disc = 0x1,DVD_WARNING_FormatNotSupported = 0x2,};
enum _tagOIBDG_FLAGS {OIBDG_APARTMENTTHREADED = 0x100,};
enum _tagPARSEACTION {PARSE_CANONICALIZE = 0x1,PARSE_FRIENDLY = 0x2,PARSE_SECURITY_URL = 0x3,PARSE_ROOTDOCUMENT = 0x4,PARSE_DOCUMENT = 0x5,PARSE_ANCHOR = 0x6,PARSE_ENCODE = 0x7,PARSE_DECODE = 0x8,PARSE_PATH_FROM_URL = 0x9,PARSE_URL_FROM_PATH = 0xA,PARSE_MIME = 0xB,PARSE_SERVER = 0xC,PARSE_SCHEMA = 0xD,PARSE_SITE = 0xE,PARSE_DOMAIN = 0xF,PARSE_LOCATION = 0x10,PARSE_SECURITY_DOMAIN = 0x11,};
enum _tagQUERYOPTION {QUERY_EXPIRATION_DATE = 0x1,QUERY_TIME_OF_LAST_CHANGE = 0x2,QUERY_CONTENT_ENCODING = 0x3,QUERY_CONTENT_TYPE = 0x4,QUERY_REFRESH = 0x5,QUERY_RECOMBINE = 0x6,QUERY_CAN_NAVIGATE = 0x7,QUERY_USES_NETWORK = 0x8,QUERY_IS_CACHED = 0x9,QUERY_IS_INSTALLEDENTRY = 0xA,QUERY_IS_CACHED_OR_MAPPED = 0xB,QUERY_USES_CACHE = 0xC,};
struct adapter_overlay {unsigned int adapter_entry_len;unsigned char dlc_name[8];unsigned char adapter_number;unsigned char ls_role;unsigned int eff_capacity;unsigned char conn_cost;unsigned char byte_cost;unsigned char propagation_delay;unsigned char user_def_1;unsigned char user_def_2;unsigned char user_def_3;unsigned char security;unsigned char reserv3;unsigned char line_type;unsigned char lim_res;unsigned short lim_res_timeout;unsigned short max_btu_size;unsigned char rcv_window;unsigned char send_window;unsigned short max_ls_used;unsigned char abm_support;unsigned char reserv4;};
typedef struct _CB9F4276D477D4EDC30066925B58EE0F *lpMapiRecipDesc;
struct ms_appl_overlay {unsigned int ms_appl_entry_len;unsigned char ms_appl_name[8];unsigned char ms_category[4];unsigned char q_name[81];unsigned char reserv3;unsigned char reserv4;unsigned char reserv5;};
typedef struct _F6CC20CF8176C211D0C88E599FF300CF *pMediaLabelInfo;
struct plu_def_overlay {unsigned int plu_def_entry_len;unsigned char fqplu_name[17];unsigned char reserv3;unsigned char plu_alias[8];unsigned char plu_uninterpreted_name[8];unsigned short max_mc_ll_ssize;unsigned char conv_security;unsigned char parallel_sess;unsigned char alt_alias_flag;unsigned char num_of_alt_aliases;};
struct post_on_receipt {unsigned short opcode;unsigned char opext;unsigned char reserv1;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned short reserv2;unsigned char fill;unsigned char reserv4;unsigned short max_len;unsigned short reserv5;unsigned char *reserv6;unsigned char reserv7[5];unsigned int sema;};
struct request_to_send {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
typedef struct tag_s_RIFFWAVE_INST s_RIFFWAVE_inst;
enum tagDISCARDCACHE {DISCARDCACHE_SAVEIFDIRTY = 0x0,DISCARDCACHE_NOSAVE = 0x1,};
struct tagDVD_TIMECODE {unsigned int Hours1 : 4;unsigned int Hours10 : 4;unsigned int Minutes1 : 4;unsigned int Minutes10 : 4;unsigned int Seconds1 : 4;unsigned int Seconds10 : 4;unsigned int Frames1 : 4;unsigned int Frames10 : 2;unsigned int FrameRateCode : 2;};
enum tagIFILTER_INIT {IFILTER_INIT_CANON_PARAGRAPHS = 0x1,IFILTER_INIT_HARD_LINE_BREAKS = 0x2,IFILTER_INIT_CANON_HYPHENS = 0x4,IFILTER_INIT_CANON_SPACES = 0x8,IFILTER_INIT_APPLY_INDEX_ATTRIBUTES = 0x10,IFILTER_INIT_APPLY_OTHER_ATTRIBUTES = 0x20,IFILTER_INIT_INDEXING_ONLY = 0x40,IFILTER_INIT_SEARCH_LINKS = 0x80,};
enum tagINSTALLLEVEL {INSTALLLEVEL_DEFAULT = 0x0,INSTALLLEVEL_MINIMUM = 0x1,INSTALLLEVEL_MAXIMUM = 0xFFFF,};
enum tagINSTALLSTATE {INSTALLSTATE_BADCONFIG = 0xFFFFFFFA,INSTALLSTATE_INCOMPLETE = 0xFFFFFFFB,INSTALLSTATE_SOURCEABSENT = 0xFFFFFFFC,INSTALLSTATE_MOREDATA = 0xFFFFFFFD,INSTALLSTATE_INVALIDARG = 0xFFFFFFFE,INSTALLSTATE_UNKNOWN = 0xFFFFFFFF,INSTALLSTATE_BROKEN = 0x0,INSTALLSTATE_ADVERTISED = 0x1,INSTALLSTATE_ABSENT = 0x2,INSTALLSTATE_LOCAL = 0x3,INSTALLSTATE_SOURCE = 0x4,INSTALLSTATE_DEFAULT = 0x5,};
enum tagMSICONDITION {MSICONDITION_FALSE = 0x0,MSICONDITION_TRUE = 0x1,MSICONDITION_NONE = 0x2,MSICONDITION_ERROR = 0x3,};
enum tagRASCONNSTATE {RASCS_OpenPort = 0x0,RASCS_PortOpened = 0x1,RASCS_ConnectDevice = 0x2,RASCS_DeviceConnected = 0x3,RASCS_AllDevicesConnected = 0x4,RASCS_Authenticate = 0x5,RASCS_AuthNotify = 0x6,RASCS_AuthRetry = 0x7,RASCS_AuthCallback = 0x8,RASCS_AuthChangePassword = 0x9,RASCS_AuthProject = 0xA,RASCS_AuthLinkSpeed = 0xB,RASCS_AuthAck = 0xC,RASCS_ReAuthenticate = 0xD,RASCS_Authenticated = 0xE,RASCS_PrepareForCallback = 0xF,RASCS_WaitForModemReset = 0x10,RASCS_WaitForCallback = 0x11,RASCS_Projected = 0x12,RASCS_StartAuthentication = 0x13,RASCS_CallbackComplete = 0x14,RASCS_LogonNetwork = 0x15,RASCS_SubEntryConnected = 0x16,RASCS_SubEntryDisconnected = 0x17,RASCS_Interactive = 0x1000,RASCS_RetryAuthentication = 0x1001,RASCS_CallbackSetByCaller = 0x1002,RASCS_PasswordExpired = 0x1003,RASCS_InvokeEapUI = 0x1004,RASCS_Connected = 0x2000,RASCS_Disconnected = 0x2001,};
enum tagSTDMSHLFLAGS {SMEXF_SERVER = 0x1,SMEXF_HANDLER = 0x2,};
typedef struct adaptercounter ADAPTERCOUNTER;
typedef struct _ADAPTER_STATUS ADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A ADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W ADDJOB_INFO_1W;
typedef struct _AE_SERVICESTAT AE_SERVICESTAT;
typedef struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 AM_AC3_DOWNMIX;
typedef struct __MIDL___MIDL_itf_strmif_0094_0002 AM_STREAM_INFO;
typedef struct aptxwaveformat_tag APTXWAVEFORMAT;
typedef struct _E6EEE8D03854377210BB1626C10183C8 ATM_PVC_PARAMS;
typedef struct _AVISTREAMINFOA AVISTREAMINFOA;
typedef struct _AVISTREAMINFOW AVISTREAMINFOW;
typedef struct _E9EAD05D222C1BBF08E4876BE3047475 AsnOctetString;
typedef struct tagBITMAPCOREINFO BITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 BITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 BITMAPV5HEADER;
typedef struct _BackupListNode BackupListNode;
typedef struct _CABINET_INFO_A CABINET_INFO_A;
typedef struct _CABINET_INFO_W CABINET_INFO_W;
enum CALL_PRIVILEGE {CP_OWNER = 0x0,CP_MONITOR = 0x1,};
typedef struct tagCBT_CREATEWNDA CBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW CBT_CREATEWNDW;
struct CCertGetConfig;
typedef struct _CERT_EXTENSION CERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB CERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO CERT_NAME_INFO;
typedef struct _CERT_POLICY_ID CERT_POLICY_ID;
typedef struct _CHARDEV_INFO_0 CHARDEV_INFO_0;
typedef struct _CHARDEV_INFO_1 CHARDEV_INFO_1;
enum CLUSTER_CHANGE {CLUSTER_CHANGE_NODE_STATE = 0x1,CLUSTER_CHANGE_NODE_DELETED = 0x2,CLUSTER_CHANGE_NODE_ADDED = 0x4,CLUSTER_CHANGE_NODE_PROPERTY = 0x8,CLUSTER_CHANGE_REGISTRY_NAME = 0x10,CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = 0x20,CLUSTER_CHANGE_REGISTRY_VALUE = 0x40,CLUSTER_CHANGE_REGISTRY_SUBTREE = 0x80,CLUSTER_CHANGE_RESOURCE_STATE = 0x100,CLUSTER_CHANGE_RESOURCE_DELETED = 0x200,CLUSTER_CHANGE_RESOURCE_ADDED = 0x400,CLUSTER_CHANGE_RESOURCE_PROPERTY = 0x800,CLUSTER_CHANGE_GROUP_STATE = 0x1000,CLUSTER_CHANGE_GROUP_DELETED = 0x2000,CLUSTER_CHANGE_GROUP_ADDED = 0x4000,CLUSTER_CHANGE_GROUP_PROPERTY = 0x8000,CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = 0x10000,CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = 0x20000,CLUSTER_CHANGE_NETWORK_STATE = 0x100000,CLUSTER_CHANGE_NETWORK_DELETED = 0x200000,CLUSTER_CHANGE_NETWORK_ADDED = 0x400000,CLUSTER_CHANGE_NETWORK_PROPERTY = 0x800000,CLUSTER_CHANGE_NETINTERFACE_STATE = 0x1000000,CLUSTER_CHANGE_NETINTERFACE_DELETED = 0x2000000,CLUSTER_CHANGE_NETINTERFACE_ADDED = 0x4000000,CLUSTER_CHANGE_NETINTERFACE_PROPERTY = 0x8000000,CLUSTER_CHANGE_QUORUM_STATE = 0x10000000,CLUSTER_CHANGE_CLUSTER_STATE = 0x20000000,CLUSTER_CHANGE_CLUSTER_PROPERTY = 0x40000000,CLUSTER_CHANGE_HANDLE_CLOSE = 0x80000000,CLUSTER_CHANGE_ALL = 0xFFF3FFFF,};
typedef struct _197B5A7C8A9A186B55DFC6C456EA8A07 CMC_attachment;
typedef signed int CM_RETURN_CODE;
struct CMultiLanguage;
typedef struct _COAUTHIDENTITY COAUTHIDENTITY;
typedef struct tagCOPYDATASTRUCT COPYDATASTRUCT;
typedef struct _CRL_DIST_POINT CRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB CRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO CRYPT_OID_INFO;
typedef struct tagCStdStubBuffer CStdStubBuffer;
struct ClusProperties {struct ClusPropertiesVtbl *lpVtbl;};
enum CursorTypeEnum {adOpenUnspecified = 0xFFFFFFFF,adOpenForwardOnly = 0x0,adOpenKeyset = 0x1,adOpenDynamic = 0x2,adOpenStatic = 0x3,};
typedef struct _D3DEXECUTEDATA D3DEXECUTEDATA;
typedef struct _D3DINSTRUCTION D3DINSTRUCTION;
typedef struct _D3DLINEPATTERN D3DLINEPATTERN;
typedef struct _D3DRMPICKDESC2 D3DRMPICKDESC2;
typedef struct _D3DTEXTURELOAD D3DTEXTURELOAD;
enum DBASYNCHOPENUM {DBASYNCHOP_OPEN = 0x0,};
enum DBBINDFLAGENUM {DBBINDFLAG_HTML = 0x1,};
enum DBCOSTUNITENUM {DBUNIT_INVALID = 0x0,DBUNIT_WEIGHT = 0x1,DBUNIT_PERCENT = 0x2,DBUNIT_MAXIMUM = 0x4,DBUNIT_MINIMUM = 0x8,DBUNIT_MICRO_SECOND = 0x10,DBUNIT_MILLI_SECOND = 0x20,DBUNIT_SECOND = 0x40,DBUNIT_MINUTE = 0x80,DBUNIT_HOUR = 0x100,DBUNIT_BYTE = 0x200,DBUNIT_KILO_BYTE = 0x400,DBUNIT_MEGA_BYTE = 0x800,DBUNIT_GIGA_BYTE = 0x1000,DBUNIT_NUM_MSGS = 0x2000,DBUNIT_NUM_LOCKS = 0x4000,DBUNIT_NUM_ROWS = 0x8000,DBUNIT_OTHER = 0x10000,};
enum DBMEMOWNERENUM {DBMEMOWNER_CLIENTOWNED = 0x0,DBMEMOWNER_PROVIDEROWNED = 0x1,};
enum DBREASONENUM15 {DBREASON_ROWPOSITION_CHANGED = 0xF,DBREASON_ROWPOSITION_CHAPTERCHANGED = 0x10,DBREASON_ROWPOSITION_CLEARED = 0x11,DBREASON_ROW_ASYNCHINSERT = 0x12,};
enum DBREASONENUM25 {DBREASON_ROWSET_ROWSADDED = 0x13,DBREASON_ROWSET_POPULATIONCOMPLETE = 0x14,DBREASON_ROWSET_POPULATIONSTOPPED = 0x15,};
enum DBSTATUSENUM20 {MDSTATUS_S_CELLEMPTY = 0xE,DBSTATUS_S_IGNORE = 0xF,};
enum DCINFOTYPEENUM {DCINFOTYPE_VERSION = 0x1,};
typedef struct _DDCOLORCONTROL DDCOLORCONTROL;
typedef struct _DISCDLGSTRUCTA DISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW DISCDLGSTRUCTW;
typedef struct _DISK_HISTOGRAM DISK_HISTOGRAM;
typedef struct _DllVersionInfo DLLVERSIONINFO;
typedef struct _DPLMSG_GENERIC DPLMSG_GENERIC;
typedef struct _9CE0644C253DBAB51052D414D7E91AF8 DPMSG_GROUPADD;
typedef struct _CC101A5DC835CA1BB7FB5BD237B40121 DPSECURITYDESC;
typedef struct _65758D9D43B54B363A052B56EC34040F DPSESSIONDESC2;
typedef struct tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS DRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A DRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W DRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A DRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W DRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A DRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W DRIVER_INFO_3W;
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;
typedef struct _LONG_SIZEDARR DWORD_SIZEDARR;
struct DispIHTMLTable {struct DispIHTMLTableVtbl *lpVtbl;};
typedef struct wavefilter_echo_tag ECHOWAVEFILTER;
typedef struct tagABORTPATH EMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
typedef struct tagABORTPATH EMRFLATTENPATH;
typedef struct tagEMRPIXELFORMAT EMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
typedef struct tagENUMLOGFONTEXA ENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW ENUMLOGFONTEXW;
typedef struct _EVENTLOGRECORD EVENTLOGRECORD;
typedef struct tagEXBMINFOHEADER EXBMINFOHEADER;
enum ErrorValueEnum {adErrInvalidArgument = 0x800A0BB9,adErrNoCurrentRecord = 0x800A0BCD,adErrIllegalOperation = 0x800A0C93,adErrInTransaction = 0x800A0CAE,adErrFeatureNotAvailable = 0x800A0CB3,adErrItemNotFound = 0x800A0CC1,adErrObjectInADOCollection = 0x800A0D27,adErrObjectNotSet = 0x800A0D5C,adErrDataConversion = 0x800A0D5D,adErrObjectClosed = 0x800A0E78,adErrObjectOpen = 0x800A0E79,adErrProviderNotFound = 0x800A0E7A,adErrBoundToCommand = 0x800A0E7B,adErrInvalidParamInfo = 0x800A0E7C,adErrInvalidConnection = 0x800A0E7D,adErrNotReentrant = 0x800A0E7E,adErrStillExecuting = 0x800A0E7F,adErrOperationCancelled = 0x800A0E80,adErrStillConnecting = 0x800A0E81,adErrNotExecuting = 0x800A0E83,adErrUnsafeOperation = 0x800A0E84,};
typedef struct _FAT_STATISTICS FAT_STATISTICS;
typedef struct _FLAG_STGMEDIUM FLAG_STGMEDIUM;
typedef struct _FLOWDESCRIPTOR FLOWDESCRIPTOR;
typedef struct _FLT_PACKET_LOG FLT_PACKET_LOG;
typedef struct _58C398469581E4FCDD5ADAF6870FB0ED FOLDERSETTINGS;
typedef struct _E7808ED52D89E2C9F1492EE2222DF379 FORMPRINTSETUP;
typedef struct fqpcid_overlay FQPCID_OVERLAY;
struct FolderItemVerb {struct FolderItemVerbVtbl *lpVtbl;};
typedef struct get_attributes GET_ATTRIBUTES;
typedef void ( *GLUtessEndProc)();
struct HACMDRIVERID__ {int unused;};
typedef void *HCERTSTOREPROV;
struct HENHMETAFILE__ {int unused;};
typedef struct _PSP *HPROPSHEETPAGE;
struct HTMLAreaEvents {struct HTMLAreaEventsVtbl *lpVtbl;};
struct HTMLDivElement;
struct HTMLInputImage;
struct HTMLMapElement;
struct HTMLStyleSheet;
typedef struct _HYPER_SIZEDARR HYPER_SIZEDARR;
struct IADsAggregatee {struct IADsAggregateeVtbl *lpVtbl;};
struct IADsAggregator {struct IADsAggregatorVtbl *lpVtbl;};
struct IADsCollection {struct IADsCollectionVtbl *lpVtbl;};
struct IADsNamespaces {struct IADsNamespacesVtbl *lpVtbl;};
struct IADsPrintQueue {struct IADsPrintQueueVtbl *lpVtbl;};
struct IAMChannelInfo {struct IAMChannelInfoVtbl *lpVtbl;};
struct IAMDirectSound {struct IAMDirectSoundVtbl *lpVtbl;};
struct IAMMediaStream {struct IAMMediaStreamVtbl *lpVtbl;};
struct IASQLOLEAlerts {struct IASQLOLEAlertsVtbl *lpVtbl;};
struct IASQLOLEBackup {struct IASQLOLEBackupVtbl *lpVtbl;};
struct IASQLOLEChecks {struct IASQLOLEChecksVtbl *lpVtbl;};
struct IASQLOLEColumn {struct IASQLOLEColumnVtbl *lpVtbl;};
struct IASQLOLEDevice {struct IASQLOLEDeviceVtbl *lpVtbl;};
struct IASQLOLEGroups {struct IASQLOLEGroupsVtbl *lpVtbl;};
struct IASQLOLELogins {struct IASQLOLELoginsVtbl *lpVtbl;};
struct IASQLOLEServer {struct IASQLOLEServerVtbl *lpVtbl;};
struct IASQLOLETables {struct IASQLOLETablesVtbl *lpVtbl;};
struct IAVIEditStream {struct IAVIEditStreamVtbl *lpVtbl;};
struct IActiveDesktop {struct IActiveDesktopVtbl *lpVtbl;};
struct IAgentCommands {struct IAgentCommandsVtbl *lpVtbl;};
struct IBPCDeviceBase {struct IBPCDeviceBaseVtbl *lpVtbl;};
struct ICDAORecordset {struct ICDAORecordsetVtbl *lpVtbl;};
typedef struct _797ABA875A7F80AEFE23C6BF7D56B10A ICDECOMPRESSEX;
struct ICSSFilterSite {struct ICSSFilterSiteVtbl *lpVtbl;};
struct ICatalogObject {struct ICatalogObjectVtbl *lpVtbl;};
struct ICertGetConfig {struct ICertGetConfigVtbl *lpVtbl;};
struct IClassFactory2 {struct IClassFactory2Vtbl *lpVtbl;};
struct IColumnsRowset {struct IColumnsRowsetVtbl *lpVtbl;};
struct IComponentUtil {struct IComponentUtilVtbl *lpVtbl;};
struct ICreateDevEnum {struct ICreateDevEnumVtbl *lpVtbl;};
struct ICreateTypeLib {struct ICreateTypeLibVtbl *lpVtbl;};
typedef struct tag_IDFCHANNELINFO IDFCHANNELINFO;
typedef struct tag_IDFPATCHMAPHDR IDFPATCHMAPHDR;
struct IDirect3DLight {struct IDirect3DLightVtbl *lpVtbl;};
struct IDirectInput2A {struct IDirectInput2AVtbl *lpVtbl;};
struct IDirectInput2W {struct IDirectInput2WVtbl *lpVtbl;};
struct IDocHostShowUI {struct IDocHostShowUIVtbl *lpVtbl;};
struct IDockingWindow {struct IDockingWindowVtbl *lpVtbl;};
struct IDtcLuRecovery {struct IDtcLuRecoveryVtbl *lpVtbl;};
struct IDtcToXaHelper {struct IDtcToXaHelperVtbl *lpVtbl;};
struct IDtcToXaMapper {struct IDtcToXaMapperVtbl *lpVtbl;};
struct IEnumFORMATETC {struct IEnumFORMATETCVtbl *lpVtbl;};
struct IEnumMediaType {struct IEnumMediaTypeVtbl *lpVtbl;};
struct IEnumWorkItems {struct IEnumWorkItemsVtbl *lpVtbl;};
typedef struct _IF_TABLE_INDEX IF_TABLE_INDEX;
struct IFillLockBytes {struct IFillLockBytesVtbl *lpVtbl;};
struct IFilterMapper2 {struct IFilterMapper2Vtbl *lpVtbl;};
struct IGetDataSource {struct IGetDataSourceVtbl *lpVtbl;};
struct IHTMLBRElement {struct IHTMLBRElementVtbl *lpVtbl;};
struct IHTMLDDElement {struct IHTMLDDElementVtbl *lpVtbl;};
struct IHTMLDTElement {struct IHTMLDTElementVtbl *lpVtbl;};
struct IHTMLDocument2 {struct IHTMLDocument2Vtbl *lpVtbl;};
struct IHTMLFrameBase {struct IHTMLFrameBaseVtbl *lpVtbl;};
struct IHTMLHRElement {struct IHTMLHRElementVtbl *lpVtbl;};
struct IHTMLLIElement {struct IHTMLLIElementVtbl *lpVtbl;};
struct IHTMLRuleStyle {struct IHTMLRuleStyleVtbl *lpVtbl;};
struct IHTMLTableCell {struct IHTMLTableCellVtbl *lpVtbl;};
struct IHttpNegotiate {struct IHttpNegotiateVtbl *lpVtbl;};
struct IInstallCodecs {struct IInstallCodecsVtbl *lpVtbl;};
struct IKsPropertySet {struct IKsPropertySetVtbl *lpVtbl;};
struct ILayoutStorage {struct ILayoutStorageVtbl *lpVtbl;};
struct IMAPIContainer {struct IMAPIContainerVtbl *lpVtbl;};
struct IMDRangeRowset {struct IMDRangeRowsetVtbl *lpVtbl;};
struct IMLangFontLink {struct IMLangFontLinkVtbl *lpVtbl;};
struct IMediaPosition {struct IMediaPositionVtbl *lpVtbl;};
struct IMediaTypeInfo {struct IMediaTypeInfoVtbl *lpVtbl;};
struct IMessageFilter {struct IMessageFilterVtbl *lpVtbl;};
struct IMultiLanguage {struct IMultiLanguageVtbl *lpVtbl;};
typedef struct _INTERFACE_INFO INTERFACE_INFO;
struct INotifyReplica {struct INotifyReplicaVtbl *lpVtbl;};
struct IObjectContext {struct IObjectContextVtbl *lpVtbl;};
struct IObjectControl {struct IObjectControlVtbl *lpVtbl;};
struct IOleClientSite {struct IOleClientSiteVtbl *lpVtbl;};
struct IOleUIObjInfoA {struct IOleUIObjInfoAVtbl *lpVtbl;};
struct IOleUIObjInfoW {struct IOleUIObjInfoWVtbl *lpVtbl;};
struct IOverlayNotify {struct IOverlayNotifyVtbl *lpVtbl;};
typedef struct _IPXWAN_IF_INFO IPXWAN_IF_INFO;
struct IPersistFolder {struct IPersistFolderVtbl *lpVtbl;};
struct IPersistMemory {struct IPersistMemoryVtbl *lpVtbl;};
struct IPersistStream {struct IPersistStreamVtbl *lpVtbl;};
struct IPropertyPage2 {struct IPropertyPage2Vtbl *lpVtbl;};
struct IProviderAdmin {struct IProviderAdminVtbl *lpVtbl;};
struct IQuickActivate {struct IQuickActivateVtbl *lpVtbl;};
struct IRegFilterInfo {struct IRegFilterInfoVtbl *lpVtbl;};
struct IRemoteProcess {struct IRemoteProcessVtbl *lpVtbl;};
struct IRowsetRefresh {struct IRowsetRefreshVtbl *lpVtbl;};
struct IRowsetResynch {struct IRowsetResynchVtbl *lpVtbl;};
struct IRpcStubBuffer {struct IRpcStubBufferVtbl *lpVtbl;};
enum ISOLATIONLEVEL {ISOLATIONLEVEL_UNSPECIFIED = 0xFFFFFFFF,ISOLATIONLEVEL_CHAOS = 0x10,ISOLATIONLEVEL_READUNCOMMITTED = 0x100,ISOLATIONLEVEL_BROWSE = 0x100,ISOLATIONLEVEL_CURSORSTABILITY = 0x1000,ISOLATIONLEVEL_READCOMMITTED = 0x1000,ISOLATIONLEVEL_REPEATABLEREAD = 0x10000,ISOLATIONLEVEL_SERIALIZABLE = 0x100000,ISOLATIONLEVEL_ISOLATED = 0x100000,};
struct ISessionObject {struct ISessionObjectVtbl *lpVtbl;};
struct IShellDispatch {struct IShellDispatchVtbl *lpVtbl;};
struct IShellLinkDual {struct IShellLinkDualVtbl *lpVtbl;};
struct IShellUIHelper {struct IShellUIHelperVtbl *lpVtbl;};
struct ISourcesRowset {struct ISourcesRowsetVtbl *lpVtbl;};
struct IStreamBuilder {struct IStreamBuilderVtbl *lpVtbl;};
struct ITFileTerminal {struct ITFileTerminalVtbl *lpVtbl;};
struct ITMediaSupport {struct ITMediaSupportVtbl *lpVtbl;};
struct ITNotification {struct ITNotificationVtbl *lpVtbl;};
struct ITaskScheduler {struct ITaskSchedulerVtbl *lpVtbl;};
struct IURLSearchHook {struct IURLSearchHookVtbl *lpVtbl;};
struct IUrlHistoryStg {struct IUrlHistoryStgVtbl *lpVtbl;};
struct IWebBrowserApp {struct IWebBrowserAppVtbl *lpVtbl;};
struct IXATransLookup {struct IXATransLookupVtbl *lpVtbl;};
struct IXATransaction {struct IXATransactionVtbl *lpVtbl;};
typedef struct tagJPEGINFOHEADER JPEGINFOHEADER;
typedef struct _9CC657B7E0AE245246966219C61A944E KSCLOCK_CREATE;
typedef struct _EF98EE567420140E285BF0657F46953F KSP_TIMEFORMAT;
typedef struct linecallparams_tag LINECALLPARAMS;
typedef struct linecallstatus_tag LINECALLSTATUS;
typedef struct linedialparams_tag LINEDIALPARAMS;
typedef struct link_info_sect LINK_INFO_SECT;
typedef struct _8D5240EB4C2C3F8FC45B3D9D0343B483 LLC_DIRECT_LOG;
typedef struct _93DD11BEAC2601A6EF0B5FEB14D3B821 LLC_READ_PARMS;
typedef struct tagLOGCOLORSPACEA LOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW LOGCOLORSPACEW;
typedef struct accessdata_dn *LPACCESSDATADN;
typedef struct _AdviseNotify *LPADVISENOTIFY;
typedef IAdviseSinkEx *LPADVISESINKEX;
typedef struct _AE_CLOSEFILE *LPAE_CLOSEFILE;
typedef struct _AE_CONNSTART *LPAE_CONNSTART;
typedef struct _AE_NETLOGOFF *LPAE_NETLOGOFF;
typedef struct _AE_RESACCESS *LPAE_RESACCESS;
typedef struct _AE_SESSLOGON *LPAE_SESSLOGON;
typedef struct _AE_SESSPWERR *LPAE_SESSPWERR;
typedef struct _AE_SRVSTATUS *LPAE_SRVSTATUS;
typedef struct _AMVPDATAINFO *LPAMVPDATAINFO;
typedef struct IASQLOLEAlert *LPASQLOLEALERT;
typedef struct IASQLOLECheck *LPASQLOLECHECK;
typedef struct IASQLOLEGroup *LPASQLOLEGROUP;
typedef struct IASQLOLEIndex *LPASQLOLEINDEX;
typedef struct IASQLOLELogin *LPASQLOLELOGIN;
typedef struct IASQLOLENames *LPASQLOLENAMES;
typedef struct IASQLOLERules *LPASQLOLERULES;
typedef struct IASQLOLETable *LPASQLOLETABLE;
typedef struct IASQLOLETasks *LPASQLOLETASKS;
typedef struct IASQLOLEUsers *LPASQLOLEUSERS;
typedef struct IASQLOLEViews *LPASQLOLEVIEWS;
typedef struct _AVIFILEINFOA *LPAVIFILEINFOA;
typedef struct _AVIFILEINFOW *LPAVIFILEINFOW;
typedef IBindProtocol *LPBINDPROTOCOL;
typedef struct tagCapInfoChunk *LPCAPINFOCHUNK;
typedef struct tagCaptureParms *LPCAPTUREPARMS;
typedef struct tagCATEGORYINFO *LPCATEGORYINFO;
typedef struct tagCCSTYLEFLAGA *LPCCSTYLEFLAGA;
typedef struct tagCCSTYLEFLAGW *LPCCSTYLEFLAGW;
typedef  DICONDITION *LPCDICONDITION;
typedef  DIPROPDWORD *LPCDIPROPDWORD;
typedef  DIPROPRANGE *LPCDIPROPRANGE;
typedef  DIRAMPFORCE *LPCDIRAMPFORCE;
typedef struct channel_caps_tag *LPCHANNEL_CAPS;
typedef struct tagCHOOSECOLORA *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW *LPCHOOSECOLORW;
typedef IClassFactory *LPCLASSFACTORY;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
typedef struct tagCOMBOBOXINFO *LPCOMBOBOXINFO;
typedef struct _COMMTIMEOUTS *LPCOMMTIMEOUTS;
typedef IContextMenu2 *LPCONTEXTMENU2;
typedef IContextMenu3 *LPCONTEXTMENU3;
typedef struct _1960CEC5D16E97BD5D34D82AA1F3F495 *LPCREATEGIZMOA;
typedef struct _2D53B4FD6E19D1977DDA8FD016F55563 *LPCREATEGIZMOW;
typedef struct tagCTLINITBEDIT *LPCTLINITBEDIT;
typedef struct tagCTLINITHEDIT *LPCTLINITHEDIT;
typedef struct tagCTLINITIEDIT *LPCTLINITIEDIT;
typedef struct _currencyfmtA *LPCURRENCYFMTA;
typedef struct _currencyfmtW *LPCURRENCYFMTW;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCWPRETSTRUCT *LPCWPRETSTRUCT;
typedef struct _D3DLIGHTDATA *LPD3DLIGHTDATA;
typedef struct _D3DVIEWPORT2 *LPD3DVIEWPORT2;
typedef struct _6C6AB21879699522A68F36BDADA97F41 *LPDBCURSORINFO;
typedef struct _DDKERNELCAPS *LPDDKERNELCAPS;
typedef struct tagDESIGNVECTOR *LPDESIGNVECTOR;
typedef struct _DFS_INFO_100 *LPDFS_INFO_100;
typedef struct _DFS_INFO_101 *LPDFS_INFO_101;
typedef struct _DIDATAFORMAT *LPDIDATAFORMAT;
typedef struct _DIMOUSESTATE *LPDIMOUSESTATE;
typedef struct DIPROPHEADER *LPDIPROPHEADER;
typedef struct IDirectInput2A *LPDIRECTINPUT2;
typedef struct IDirectInputA *LPDIRECTINPUTA;
typedef struct IDirectInputW *LPDIRECTINPUTW;
typedef struct IDirectPlay2 *LPDIRECTPLAY2A;
typedef struct IDirectPlay3 *LPDIRECTPLAY3A;
typedef char *( *LPDNETGETALIAS)( char *);
typedef struct tagDRAGLISTINFO *LPDRAGLISTINFO;
typedef struct _DRIVERSTATUS *LPDRIVERSTATUS;
typedef struct _DS3DLISTENER *LPDS3DLISTENER;
typedef struct _DSBUFFERDESC *LPDSBUFFERDESC;
typedef struct _DTBLCHECKBOX *LPDTBLCHECKBOX;
typedef struct _DTBLCOMBOBOX *LPDTBLCOMBOBOX;
typedef struct _DTBLGROUPBOX *LPDTBLGROUPBOX;
typedef IEnumCodePage *LPENUMCODEPAGE;
typedef IEnumLINEINFO *LPENUMLINEINFO;
typedef struct tagENUMLOGFONTA *LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW *LPENUMLOGFONTW;
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef IExtractIconA *LPEXTRACTICONA;
typedef IExtractIconW *LPEXTRACTICONW;
typedef struct tagFINDREPLACEA *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW *LPFINDREPLACEW;
typedef struct _FORM_INFO_1A *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W *LPFORM_INFO_1W;
typedef struct tagGCP_RESULTSA *LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW *LPGCP_RESULTSW;
typedef struct _GLYPHMETRICS *LPGLYPHMETRICS;
typedef struct _GROUP_INFO_0 *LPGROUP_INFO_0;
typedef struct _GROUP_INFO_1 *LPGROUP_INFO_1;
typedef struct tagHELPWININFOA *LPHELPWININFOA;
typedef struct tagHELPWININFOW *LPHELPWININFOW;
typedef IHttpSecurity *LPHTTPSECURITY;
typedef struct tagICONMETRICSA *LPICONMETRICSA;
typedef struct tagICONMETRICSW *LPICONMETRICSW;
typedef struct tag_IDFKEYMAPHDR *LPIDFKEYMAPHDR;
typedef union _IN_ADDR_IPV4 *LPIN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 *LPIN_ADDR_IPV6;
typedef IJavaExecute2 *LPJAVAEXECUTE2;
typedef struct _5D5BF4B99560B17B9B110B9D66DCBC97 *LPJAVAPROPERTY;
typedef struct linecallinfo_tag *LPLINECALLINFO;
typedef struct linecalllist_tag *LPLINECALLLIST;
typedef struct linetermcaps_tag *LPLINETERMCAPS;
typedef struct IDirect3DRM **LPLPDIRECT3DRM;
typedef struct IMAPIFormInfo *LPMAPIFORMINFO;
typedef struct _33C4C3464C1F55DF358037E82FD3A381 *LPMAPIFORMPROP;
typedef struct IMAPIProgress *LPMAPIPROGRESS;
typedef struct _MEMORYSTATUS *LPMEMORYSTATUS;
typedef struct tagMETAFILEPICT *LPMETAFILEPICT;
typedef struct tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS *LPMODEMDEVCAPS;
typedef struct _NETRESOURCEA *LPNETRESOURCEA;
typedef struct _NETRESOURCEW *LPNETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO *LPNMCUSTOMDRAW;
typedef struct tagNMLVFINDITEM *LPNMLVFINDITEM;
typedef struct _756B7C543A2D8873FCA38AB7A21F7B82 *LPNMPGCALCSIZE;
typedef struct tagNMRBAUTOSIZE *LPNMRBAUTOSIZE;
typedef struct _NOTIFICATION *LPNOTIFICATION;
typedef IObjectSafety *LPOBJECTSAFETY;
typedef IOleContainer *LPOLECONTAINER;
typedef struct tagPALETTEENTRY *LPPALETTEENTRY;
typedef struct _PARAM_BUFFER *LPPARAM_BUFFER;
typedef struct phonemessage_tag *LPPHONEMESSAGE;
typedef struct _PORT_INFO_1A *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W *LPPORT_INFO_1W;
typedef struct _PORT_INFO_2A *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W *LPPORT_INFO_2W;
typedef struct _PORT_INFO_3A *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W *LPPORT_INFO_3W;
typedef IPropertyBag2 *LPPROPERTYBAG2;
typedef IPropertyPage *LPPROPERTYPAGE;
typedef struct tagPROPPAGEINFO *LPPROPPAGEINFO;
typedef struct _QOS_PRIORITY *LPQOS_PRIORITY;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef IRemoteObject *LPREMOTEOBJECT;
typedef IRemoteThread *LPREMOTETHREAD;
typedef struct IMsgServiceAdmin *LPSERVICEADMIN;
typedef struct _SHARE_INFO_0 *LPSHARE_INFO_0;
typedef struct _SHARE_INFO_1 *LPSHARE_INFO_1;
typedef struct _SHARE_INFO_2 *LPSHARE_INFO_2;
typedef IShellBrowser *LPSHELLBROWSER;
typedef IShellExtInit *LPSHELLEXTINIT;
typedef struct sockaddr_atm *LPSOCKADDR_ATM;
typedef struct sockaddr_in6 *LPSOCKADDR_IN6;
typedef struct sockaddr_ipx *LPSOCKADDR_IPX;
typedef struct sockaddr_vns *LPSOCKADDR_VNS;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
typedef struct tagSOUNDSENTRYA *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW *LPSOUNDSENTRYW;
typedef struct _SPropProblem *LPSPropProblem;
typedef struct _SRestriction *LPSRestriction;
typedef struct _STARTUPINFOA *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW *LPSTARTUPINFOW;
typedef struct _37E4785F055768DB96FB0F6687850E13 *LPTBINSERTMARK;
typedef struct tagTBSAVEPARAMSW *LPTBSAVEPARAMW;
typedef struct tagTITLEBARINFO *LPTITLEBARINFO;
typedef struct _USER_INFO_10 *LPUSER_INFO_10;
typedef struct _USER_INFO_11 *LPUSER_INFO_11;
typedef struct _USER_INFO_20 *LPUSER_INFO_20;
typedef struct _USER_INFO_21 *LPUSER_INFO_21;
typedef struct _USER_INFO_22 *LPUSER_INFO_22;
typedef IViewObjectEx *LPVIEWOBJECTEX;
typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;
typedef struct _WSAQuerySetA *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW *LPWSAQUERYSETW;
typedef unsigned int LS_STATUS_CODE;
typedef struct lu62_info_sect LU62_INFO_SECT;
typedef struct luw_id_overlay LUW_ID_OVERLAY;
typedef struct lu_0_3_overlay LU_0_3_OVERLAY;
typedef struct lu_def_overlay LU_DEF_OVERLAY;
typedef struct _LinkPerfShrHdr LinkPerfShrHdr;
enum MACRO_ABSOLUTE {ABSOLUTE = 1,RELATIVE = 2,};
enum MACRO_ACL_PAST {ACL_PAST_END = -1,ACL_POS_DEFAULT = 0,ACL_POS_CREATOR = 1,};
enum MACRO_ACM_OPEN {ACM_OPEN = 1124,};
enum MACRO_ACTIVATE {ACTIVATE_NOTTOPMOST = 0,ACTIVATE_TOPMOST = 1,ACTIVATE_INPUTACTIVE = 2,};
enum MACRO_ADSIPROP {ADSIPROP_ASYNCHRONOUS = 0x0,ADSIPROP_DEREF_ALIASES = 0x1,ADSIPROP_SIZE_LIMIT = 0x2,ADSIPROP_TIME_LIMIT = 0x3,ADSIPROP_ATTRIBTYPES_ONLY = 0x4,ADSIPROP_SEARCH_SCOPE = 0x5,ADSIPROP_TIMEOUT = 0x6,ADSIPROP_PAGESIZE = 0x7,ADSIPROP_PAGED_TIME_LIMIT = 0x8,ADSIPROP_CHASE_REFERRALS = 0x9,};
enum MACRO_AD_APPLY {AD_APPLY_SAVE = 0x1,AD_APPLY_HTMLGEN = 0x2,AD_APPLY_REFRESH = 0x4,AD_APPLY_ALL = 0x7,AD_APPLY_FORCE = 0x8,AD_APPLY_BUFFERED_REFRESH = 0x10,};
enum MACRO_AGENTERR {AGENTERR_CLIENTINVALID = -2147213311,AGENTERR_CHARACTERINVALID = -2147213310,AGENTERR_ANIMATIONNOTFOUND = -2147213309,AGENTERR_STATENOTFOUND = -2147213308,AGENTERR_AUDIONOTFOUND = -2147213307,AGENTERR_COMMANDNOTFOUND = -2147213306,AGENTERR_COMMANDALREADYINUSE = -2147213305,AGENTERR_MENUNOTFOUND = -2147213304,AGENTERR_LOSTCONNECTION = -2147213303,AGENTERR_CHARACTERNOTVISIBLE = -2147213302,AGENTERR_CHARACTERALREADYLOADED = -2147213301,AGENTERR_NOBALLOON = -2147213300,AGENTERR_NOCOMMANDSWINDOW = -2147213299,AGENTERR_INVALIDPREPARETYPE = -2147213298,AGENTERR_INVALIDANIMATION = -2147213297,AGENTERR_CANTMOVEDURINGDRAG = -2147213296,};
enum MACRO_ALLOCATE {ALLOCATE_RESPONSE = 0x2,};
enum MACRO_AM_VIDEO {AM_VIDEO_FLAG_FIELD_MASK = 0x3,AM_VIDEO_FLAG_INTERLEAVED_FRAME = 0x0,AM_VIDEO_FLAG_FIELD1 = 0x1,AM_VIDEO_FLAG_FIELD2 = 0x2,AM_VIDEO_FLAG_FIELD1FIRST = 0x4,AM_VIDEO_FLAG_WEAVE = 0x8,AM_VIDEO_FLAG_IPB_MASK = 0x30,AM_VIDEO_FLAG_I_SAMPLE = 0x0,AM_VIDEO_FLAG_P_SAMPLE = 0x10,AM_VIDEO_FLAG_B_SAMPLE = 0x20,AM_VIDEO_FLAG_REPEAT_FIELD = 0x40,};
enum MACRO_APPCLASS {APPCLASS_STANDARD = 0x0,APPCLASS_MASK = 0xF,};
enum MACRO_ASPECTXY {ASPECTXY = 44,};
enum MACRO_ATMPROTO {ATMPROTO_AALUSER = 0x0,ATMPROTO_AAL1 = 0x1,ATMPROTO_AAL2 = 0x2,ATMPROTO_AAL34 = 0x3,ATMPROTO_AAL5 = 0x5,};
enum MACRO_AT_START {AT_START = -1,AT_END = -2,};
enum MACRO_AVIIF_NO {AVIIF_NO_TIME = 0x100,AVIIF_COMPRESSOR = 0xFFF0000,};
enum MACRO_BADLNGTH {BADLNGTH = 2,};
enum MACRO_BANDINFO {BANDINFO = 24,};
enum MACRO_BCPABORT {BCPABORT = 6,};
enum MACRO_BITPENUP {BITPENUP = 0x8000,};
enum MACRO_BOOKMARK {BOOKMARK_BEGINNING = 0,BOOKMARK_CURRENT = 1,BOOKMARK_END = 2,};
enum MACRO_CALLBACK {CALLBACK_CHUNK_FINISHED = 0x0,CALLBACK_STREAM_SWITCH = 0x1,};
enum MACRO_CDBADORG {CDBADORG = 7800,};
enum MACRO_CDGETORG {CDGETORG = 7600,};
enum MACRO_CE3MASMX {CE3MASMX = 10,};
enum MACRO_CECALRNA {CECALRNA = 34,};
enum MACRO_CECALRNM {CECALRNM = 52,};
enum MACRO_CECALRPR {CECALRPR = 32,};
enum MACRO_CECCNLEN {CECCNLEN = 15,};
enum MACRO_CECONAME {CECONAME = 8,CESTRLEN = 128,};
enum MACRO_CECWKREM {CECWKREM = 25,};
enum MACRO_CED24CTS {CED24CTS = 0x1,CED24DSR = 0x2,CED24DCD = 0x4,CED24RI = 0x8,};
enum MACRO_CED24RTS {CED24RTS = 0x1,CED24DTR = 0x2,CED24DRS = 0x4,CED24SLS = 0x8,CED24TST = 0x10,};
enum MACRO_CEDCLOCK {CEDCLOCK = 0x8,};
enum MACRO_CEDCSTAT {CEDCSTAT = 0x1,};
enum MACRO_CEDFDPLX {CEDFDPLX = 0x10,};
enum MACRO_CEDNODMA {CEDNODMA = 0xFF80,};
enum MACRO_CEDRSTAT {CEDRSTAT = 0x2,};
enum MACRO_CEDSTCRC {CEDSTCRC = 0,CEDSTOFL = 1,CEDSTUFL = 2,};
enum MACRO_CEDSTDCD {CEDSTDCD = 7,CEDSTCTS = 8,};
enum MACRO_CEDSTDSR {CEDSTDSR = 9,};
enum MACRO_CEDSTHDW {CEDSTHDW = 10,};
enum MACRO_CEDSTMAX {CEDSTMAX = 11,};
enum MACRO_CEDSTRXO {CEDSTRXO = 6,};
enum MACRO_CEDSTSPR {CEDSTSPR = 3,CEDSTABT = 4,};
enum MACRO_CEDSTTXU {CEDSTTXU = 5,};
enum MACRO_CEL4WIRE {CEL4WIRE = 0x80,};
enum MACRO_CELCLOCK {CELCLOCK = 0x8,};
enum MACRO_CELPDPLX {CELPDPLX = 0x20,};
enum MACRO_CELSDPLX {CELSDPLX = 0x10,};
enum MACRO_CELSTNBY {CELSTNBY = 0x2,};
enum MACRO_CERT3270 {CERT3270 = 0x2,CECWKHAC = 0x8,CECWKUNM = 0x14,};
enum MACRO_CERTDIAG {CERTDIAG = 0x1,CECNUMAL = 0x14,};
enum MACRO_CERTMOD2 {CERTMOD2 = 0,CERTMOD3 = 1,CERTMOD4 = 2,};
enum MACRO_CERTMOD5 {CERTMOD5 = 3,CERTPRNT = 4,};
enum MACRO_CERTWRIT {CERTWRIT = 0,CERTUNLK = 1,CERTDIRE = 2,};
enum MACRO_CERT_DSS {CERT_DSS_R_LEN = 20,CERT_DSS_S_LEN = 20,CERT_DSS_SIGNATURE_LEN = 40,CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN = 48,};
enum MACRO_CERT_KEY {CERT_KEY_PROV_HANDLE_PROP_ID = 1,CERT_KEY_PROV_INFO_PROP_ID = 2,CERT_SHA1_HASH_PROP_ID = 3,CERT_MD5_HASH_PROP_ID = 4,CERT_HASH_PROP_ID = 3,CERT_KEY_CONTEXT_PROP_ID = 5,CERT_KEY_SPEC_PROP_ID = 6,CERT_IE30_RESERVED_PROP_ID = 7,CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,CERT_ENHKEY_USAGE_PROP_ID = 9,CERT_CTL_USAGE_PROP_ID = 9,CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,CERT_FRIENDLY_NAME_PROP_ID = 11,CERT_PVK_FILE_PROP_ID = 12,CERT_FIRST_RESERVED_PROP_ID = 13,CERT_LAST_RESERVED_PROP_ID = 32767,CERT_FIRST_USER_PROP_ID = 32768,CERT_LAST_USER_PROP_ID = 65535,CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1,CERT_SET_KEY_CONTEXT_PROP_ID = 1,CERT_STORE_PROV_MSG = 1,CERT_STORE_PROV_MEMORY = 2,CERT_STORE_PROV_FILE = 3,CERT_STORE_PROV_REG = 4,CERT_STORE_PROV_PKCS7 = 5,CERT_STORE_PROV_SERIALIZED = 6,CERT_STORE_PROV_FILENAME_A = 7,CERT_STORE_PROV_FILENAME_W = 8,CERT_STORE_PROV_FILENAME = 8,CERT_STORE_PROV_SYSTEM_A = 9,CERT_STORE_PROV_SYSTEM_W = 10,CERT_STORE_PROV_SYSTEM = 10,CERT_STORE_SIGNATURE_FLAG = 1,CERT_STORE_TIME_VALIDITY_FLAG = 2,CERT_STORE_REVOCATION_FLAG = 4,CERT_STORE_NO_CRL_FLAG = 65536,CERT_STORE_NO_ISSUER_FLAG = 131072,CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1,CERT_STORE_READONLY_FLAG = 32768,CERT_SYSTEM_STORE_LOCATION_MASK = 196608,CERT_SYSTEM_STORE_CURRENT_USER = 65536,CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072,CERT_STORE_PROV_CLOSE_FUNC = 0,CERT_STORE_PROV_READ_CERT_FUNC = 1,CERT_STORE_PROV_WRITE_CERT_FUNC = 2,CERT_STORE_PROV_DELETE_CERT_FUNC = 3,CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4,CERT_STORE_PROV_READ_CRL_FUNC = 5,CERT_STORE_PROV_WRITE_CRL_FUNC = 6,CERT_STORE_PROV_DELETE_CRL_FUNC = 7,CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8,CERT_STORE_PROV_READ_CTL_FUNC = 9,CERT_STORE_PROV_WRITE_CTL_FUNC = 10,CERT_STORE_PROV_DELETE_CTL_FUNC = 11,CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12,CERT_STORE_PROV_WRITE_ADD_FLAG = 1,CERT_STORE_SAVE_AS_STORE = 1,CERT_STORE_SAVE_AS_PKCS7 = 2,CERT_STORE_SAVE_TO_FILE = 1,CERT_STORE_SAVE_TO_MEMORY = 2,CERT_STORE_SAVE_TO_FILENAME_A = 3,CERT_STORE_SAVE_TO_FILENAME_W = 4,CERT_STORE_SAVE_TO_FILENAME = 4,CERT_CLOSE_STORE_FORCE_FLAG = 1,CERT_CLOSE_STORE_CHECK_FLAG = 2,CERT_COMPARE_MASK = 65535,CERT_COMPARE_SHIFT = 16,CERT_COMPARE_ANY = 0,CERT_COMPARE_SHA1_HASH = 1,CERT_COMPARE_NAME = 2,CERT_COMPARE_ATTR = 3,CERT_COMPARE_MD5_HASH = 4,CERT_COMPARE_PROPERTY = 5,CERT_COMPARE_PUBLIC_KEY = 6,CERT_COMPARE_HASH = 1,CERT_COMPARE_NAME_STR_A = 7,CERT_COMPARE_NAME_STR_W = 8,CERT_COMPARE_KEY_SPEC = 9,CERT_COMPARE_ENHKEY_USAGE = 10,CERT_COMPARE_CTL_USAGE = 10,CERT_FIND_ANY = 0,CERT_FIND_SHA1_HASH = 65536,CERT_FIND_MD5_HASH = 262144,CERT_FIND_HASH = 65536,CERT_FIND_PROPERTY = 327680,CERT_FIND_PUBLIC_KEY = 393216,CERT_FIND_SUBJECT_NAME = 131079,CERT_FIND_SUBJECT_ATTR = 196615,CERT_FIND_ISSUER_NAME = 131076,CERT_FIND_ISSUER_ATTR = 196612,CERT_FIND_SUBJECT_STR_A = 458759,CERT_FIND_SUBJECT_STR_W = 524295,CERT_FIND_SUBJECT_STR = 524295,CERT_FIND_ISSUER_STR_A = 458756,CERT_FIND_ISSUER_STR_W = 524292,CERT_FIND_ISSUER_STR = 524292,CERT_FIND_KEY_SPEC = 589824,CERT_FIND_ENHKEY_USAGE = 655360,CERT_FIND_CTL_USAGE = 655360,CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4,CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8,CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4,CERT_FIND_NO_CTL_USAGE_FLAG = 8,CERT_STORE_ADD_NEW = 1,CERT_STORE_ADD_USE_EXISTING = 2,CERT_STORE_ADD_REPLACE_EXISTING = 3,CERT_STORE_ADD_ALWAYS = 4,CERT_STORE_CERTIFICATE_CONTEXT = 1,CERT_STORE_CRL_CONTEXT = 2,CERT_STORE_CTL_CONTEXT = 3,CERT_STORE_ALL_CONTEXT_FLAG = -1,CERT_STORE_CERTIFICATE_CONTEXT_FLAG = 2,CERT_STORE_CRL_CONTEXT_FLAG = 4,CERT_STORE_CTL_CONTEXT_FLAG = 8,};
enum MACRO_CESETHER {CESETHER = 34,};
enum MACRO_CESRELAY {CESRELAY = 31,CESCHANL = 32,};
enum MACRO_CESTCPIP {CESTCPIP = 30,};
enum MACRO_CHARDEVQ {CHARDEVQ_DEV_PARMNUM = 1,CHARDEVQ_PRIORITY_PARMNUM = 2,CHARDEVQ_DEVS_PARMNUM = 3,CHARDEVQ_NUMUSERS_PARMNUM = 4,CHARDEVQ_NUMAHEAD_PARMNUM = 5,CHARDEVQ_PRIORITY_INFOLEVEL = 1002,CHARDEVQ_DEVS_INFOLEVEL = 1003,CHARDEVQ_MAX_PRIORITY = 1,CHARDEVQ_MIN_PRIORITY = 9,CHARDEVQ_DEF_PRIORITY = 5,CHARDEVQ_NO_REQUESTS = -1,};
enum MACRO_CHAR_MIN {CHAR_MIN = 0,CHAR_MAX = 255,};
enum MACRO_CHECKSUM {CHECKSUM_SUCCESS = 0,CHECKSUM_OPEN_FAILURE = 1,CHECKSUM_MAP_FAILURE = 2,CHECKSUM_MAPVIEW_FAILURE = 3,CHECKSUM_UNICODE_FAILURE = 4,};
enum MACRO_CLBFSHRT {CLBFSHRT = 7,CLRCVCHK = 8,};
enum MACRO_CLCFAERR {CLCFAERR = 3,CLPUINAC = 4,};
enum MACRO_CLEAR_RN {CLEAR_RN_PENDING = 0x20,CLEAR_NRN_PENDING = 0x40,};
enum MACRO_CLIPCAPS {CLIPCAPS = 36,};
enum MACRO_CLIP_NOT {CLIP_NOT = 0x0,CLIP_SUS = 0x20,};
enum MACRO_CLLNKERR {CLLNKERR = 6,};
enum MACRO_CLLUINAC {CLLUINAC = 5,};
enum MACRO_CLNORMAL {CLNORMAL = 1,CLBIND = 2,};
enum MACRO_CLRBREAK {CLRBREAK = 9,};
enum MACRO_CLR_NONE {CLR_NONE = 0xFFFFFFFF,CLR_DEFAULT = 0xFF000000,};
enum MACRO_CLSLUTRM {CLSLUTRM = 9,};
enum MACRO_COLORRES {COLORRES = 108,};
enum MACRO_COMMPROP {COMMPROP_INITIALIZED = 0xE73CF52E,};
enum MACRO_CSRECBSH {CSRECBSH = 3,CSREFORM = 4,};
enum MACRO_CSRENOSR {CSRENOSR = 0,CSRESERV = 1,CSRECNFG = 2,};
enum MACRO_CSUNORES {CSUNORES = 0,CSUMSGRT = 1,CSUPTHER = 2,};
enum MACRO_CTLCOLOR {CTLCOLOR_MSGBOX = 0,CTLCOLOR_EDIT = 1,CTLCOLOR_LISTBOX = 2,CTLCOLOR_BTN = 3,CTLCOLOR_DLG = 4,CTLCOLOR_SCROLLBAR = 5,CTLCOLOR_STATIC = 6,CTLCOLOR_MAX = 7,};
enum MACRO_D3DCLEAR {D3DCLEAR_TARGET = 0x1,D3DCLEAR_ZBUFFER = 0x2,};
enum MACRO_D3DCOLOR {D3DCOLOR_MONO = 1,D3DCOLOR_RGB = 2,};
enum MACRO_D3DLIGHT {D3DLIGHT_ACTIVE = 0x1,D3DLIGHT_NO_SPECULAR = 0x2,};
enum MACRO_D3DRMERR {D3DRMERR_BADOBJECT = -2005531891,D3DRMERR_BADTYPE = -2005531890,D3DRMERR_BADALLOC = -2005531889,D3DRMERR_FACEUSED = -2005531888,D3DRMERR_NOTFOUND = -2005531887,D3DRMERR_NOTDONEYET = -2005531886,D3DRMERR_FILENOTFOUND = -2005531885,D3DRMERR_BADFILE = -2005531884,D3DRMERR_BADDEVICE = -2005531883,D3DRMERR_BADVALUE = -2005531882,D3DRMERR_BADMAJORVERSION = -2005531881,D3DRMERR_BADMINORVERSION = -2005531880,D3DRMERR_UNABLETOEXECUTE = -2005531879,D3DRMERR_LIBRARYNOTFOUND = -2005531878,D3DRMERR_INVALIDLIBRARY = -2005531877,D3DRMERR_PENDING = -2005531876,D3DRMERR_NOTENOUGHDATA = -2005531875,D3DRMERR_REQUESTTOOLARGE = -2005531874,D3DRMERR_REQUESTTOOSMALL = -2005531873,D3DRMERR_CONNECTIONLOST = -2005531872,D3DRMERR_LOADABORTED = -2005531871,D3DRMERR_NOINTERNET = -2005531870,D3DRMERR_BADCACHEFILE = -2005531869,D3DRMERR_BOXNOTSET = -2005531868,D3DRMERR_BADPMDATA = -2005531867,};
enum MACRO_D3DSTATE {D3DSTATE_OVERRIDE_BIAS = 256,};
enum MACRO_DAPI_ERR {DAPI_ERR_WRONG_SYNTAX = 0xC000009D,DAPI_E_INVALID_CODEPAGE = 0xC000009E,DAPI_E_OBJECT_NOT_FOUND = 0xC000009F,DAPI_E_NO_OBJECT = 0xC00000A0,DAPI_E_CREATE_FILE = 0xC00000A1,DAPI_W_HIER_RECALC_FAILED = 0x800000A2,DAPI_W_EXP_FILE_OVERWRITTEN = 0x800000A3,DAPI_W_NO_VALUES = 0x800000A4,DAPI_W_RDN_MAPPED = 0x800000A5,DAPI_W_IMP_VALUE_MAPPED = 0x800000A6,DAPI_W_EXP_VALUE_MAPPED = 0x800000A7,DAPI_W_BACKSLASH_DROPPED = 0x800000A8,DAPI_W_STRING_TOO_LONG = 0x800000A9,DAPI_W_NO_DL_OWNER_ACCOUNT = 0x800000AA,DAPI_W_SERVER_SYNCH_IN_PROGRESS = 0x800000AB,};
enum MACRO_DAPI_MSG {DAPI_MSG_ONE_WARNING = 0x14,DAPI_MSG_ONE_WARNING_REPORTED = 0x15,DAPI_MSG_WARNINGS = 0x16,DAPI_MSG_WARNINGS_REPORTED = 0x17,DAPI_MSG_NOERRORS = 0x18,DAPI_MSG_ONE_ERROR = 0x19,DAPI_MSG_ONE_ERROR_REPORTED = 0x1A,DAPI_MSG_ERRORS = 0x1B,DAPI_MSG_ERRORS_REPORTED = 0x1C,DAPI_MSG_ERRORS_COPIED = 0x1D,DAPI_MSG_PASSWORD_FILE = 0x1E,};
enum MACRO_DATABITS {DATABITS_5 = 0x1,DATABITS_6 = 0x2,DATABITS_7 = 0x4,DATABITS_8 = 0x8,DATABITS_16 = 0x10,DATABITS_16X = 0x20,};
enum MACRO_DBBUFFER {DBBUFFER = 0,DBOFFSET = 1,DBROWCOUNT = 2,};
enum MACRO_DBNOEXEC {DBNOEXEC = 10,};
enum MACRO_DBNOSAVE {DBNOSAVE = 0,DBNOERR = -1,};
enum MACRO_DBPROMPT {DBPROMPT_PROMPT = 0x1,DBPROMPT_COMPLETE = 0x2,DBPROMPT_COMPLETEREQUIRED = 0x3,DBPROMPT_NOPROMPT = 0x4,};
enum MACRO_DBSETPWD {DBSETPWD = 3,DBSETAPP = 4,};
enum MACRO_DC_BRUSH {DC_BRUSH = 18,DC_PEN = 19,};
enum MACRO_DDCREATE {DDCREATE_HARDWAREONLY = 0x1,DDCREATE_EMULATIONONLY = 0x2,};
enum MACRO_DDFXCAPS {DDFXCAPS_BLTARITHSTRETCHY = 0x20,DDFXCAPS_BLTARITHSTRETCHYN = 0x10,DDFXCAPS_BLTMIRRORLEFTRIGHT = 0x40,DDFXCAPS_BLTMIRRORUPDOWN = 0x80,DDFXCAPS_BLTROTATION = 0x100,DDFXCAPS_BLTROTATION90 = 0x200,DDFXCAPS_BLTSHRINKX = 0x400,DDFXCAPS_BLTSHRINKXN = 0x800,DDFXCAPS_BLTSHRINKY = 0x1000,DDFXCAPS_BLTSHRINKYN = 0x2000,DDFXCAPS_BLTSTRETCHX = 0x4000,DDFXCAPS_BLTSTRETCHXN = 0x8000,DDFXCAPS_BLTSTRETCHY = 0x10000,DDFXCAPS_BLTSTRETCHYN = 0x20000,DDFXCAPS_OVERLAYARITHSTRETCHY = 0x40000,DDFXCAPS_OVERLAYARITHSTRETCHYN = 0x8,DDFXCAPS_OVERLAYSHRINKX = 0x80000,DDFXCAPS_OVERLAYSHRINKXN = 0x100000,DDFXCAPS_OVERLAYSHRINKY = 0x200000,DDFXCAPS_OVERLAYSHRINKYN = 0x400000,DDFXCAPS_OVERLAYSTRETCHX = 0x800000,DDFXCAPS_OVERLAYSTRETCHXN = 0x1000000,DDFXCAPS_OVERLAYSTRETCHY = 0x2000000,DDFXCAPS_OVERLAYSTRETCHYN = 0x4000000,DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 0x8000000,DDFXCAPS_OVERLAYMIRRORUPDOWN = 0x10000000,};
enum MACRO_DDOVERFX {DDOVERFX_ARITHSTRETCHY = 0x1,DDOVERFX_MIRRORLEFTRIGHT = 0x2,DDOVERFX_MIRRORUPDOWN = 0x4,};
enum MACRO_DDPPROTO {DDPPROTO_RTMP = 16001,DDPPROTO_NBP = 16002,DDPPROTO_ATP = 16003,DDPPROTO_AEP = 16004,DDPPROTO_RTMPRQ = 16005,DDPPROTO_ZIP = 16006,DDPPROTO_ADSP = 16007,DDPPROTO_MAX = 16255,};
enum MACRO_DDSVCAPS {DDSVCAPS_ENIGMA = 0x1,DDSVCAPS_FLICKER = 0x2,DDSVCAPS_REDBLUE = 0x4,DDSVCAPS_SPLIT = 0x8,};
enum MACRO_DDVPCAPS {DDVPCAPS_AUTOFLIP = 0x1,DDVPCAPS_INTERLACED = 0x2,DDVPCAPS_NONINTERLACED = 0x4,DDVPCAPS_READBACKFIELD = 0x8,DDVPCAPS_READBACKLINE = 0x10,DDVPCAPS_SHAREABLE = 0x20,DDVPCAPS_SKIPEVENFIELDS = 0x40,DDVPCAPS_SKIPODDFIELDS = 0x80,DDVPCAPS_SYNCMASTER = 0x100,DDVPCAPS_VBISURFACE = 0x200,DDVPCAPS_COLORCONTROL = 0x400,DDVPCAPS_OVERSAMPLEDVBI = 0x800,DDVPCAPS_SYSTEMMEMORY = 0x1000,DDVPCAPS_VBIANDVIDEOINDEPENDENT = 0x2000,};
enum MACRO_DDVPFLIP {DDVPFLIP_VIDEO = 0x1,DDVPFLIP_VBI = 0x2,};
enum MACRO_DDVPWAIT {DDVPWAIT_BEGIN = 0x1,DDVPWAIT_END = 0x2,DDVPWAIT_LINE = 0x3,};
enum MACRO_DDWAITVB {DDWAITVB_BLOCKBEGIN = 0x1,DDWAITVB_BLOCKBEGINEVENT = 0x2,DDWAITVB_BLOCKEND = 0x4,};
enum MACRO_DENORMAL {_EM_DENORMAL = 0x80000,_SW_DENORMAL = 0x80000,};
enum MACRO_DETACHED {DETACHED_PROCESS = 0x8,};
enum MACRO_DISABLED {APMTIMEOUT_DISABLED = 0,CONFIGFLAG_DISABLED = 1,};
enum MACRO_DISPATCH {DISPATCH_METHOD = 0x1,DISPATCH_PROPERTYGET = 0x2,DISPATCH_PROPERTYPUT = 0x4,DISPATCH_PROPERTYPUTREF = 0x8,};
enum MACRO_DMCFGOPN {DMCFGOPN = 616,};
enum MACRO_DMCFREAD {DMCFREAD = 618,};
enum MACRO_DMCOMDUP {DMCOMDUP = 596,};
enum MACRO_DMDITHER {DMDITHER_NONE = 1,DMDITHER_COARSE = 2,DMDITHER_FINE = 3,DMDITHER_LINEART = 4,DMDITHER_ERRORDIFFUSION = 5,DMDITHER_RESERVED6 = 6,DMDITHER_RESERVED7 = 7,DMDITHER_RESERVED8 = 8,DMDITHER_RESERVED9 = 9,DMDITHER_GRAYSCALE = 10,DMDITHER_USER = 256,};
enum MACRO_DMMAXAPP {DMMAXAPP = 953,};
enum MACRO_DMNOTLOG {DMNOTLOG = 598,};
enum MACRO_DMORIENT {DMORIENT_PORTRAIT = 1,DMORIENT_LANDSCAPE = 2,};
enum MACRO_DNOBJECT {DNOBJECT_FAL = 17,DNOBJECT_NICE = 19,DNOBJECT_DTERM = 23,DNOBJECT_MIRROR = 25,DNOBJECT_EVR = 26,DNOBJECT_MAIL11 = 27,DNOBJECT_PHONE = 29,DNOBJECT_CTERM = 42,DNOBJECT_DTR = 63,};
enum MACRO_DOCKINFO {DOCKINFO_UNDOCKED = 0x1,DOCKINFO_DOCKED = 0x2,DOCKINFO_USER_SUPPLIED = 0x4,DOCKINFO_USER_UNDOCKED = 0x5,DOCKINFO_USER_DOCKED = 0x6,};
enum MACRO_DOMAIN_0 {DOMAIN = 1,SING = 2,};
enum MACRO_DOSOPTGF {DOSOPTGF_DEFCLEAN = 0x1,};
enum MACRO_DPPLAYER {DPPLAYER_SERVERPLAYER = 256,DPPLAYER_SPECTATOR = 512,DPPLAYER_LOCAL = 8,};
enum MACRO_DRAGDROP {DRAGDROP_E_FIRST = 0x80040100,DRAGDROP_E_LAST = 0x8004010F,DRAGDROP_S_FIRST = 0x40100,DRAGDROP_S_LAST = 0x4010F,};
enum MACRO_DS3DMODE {DS3DMODE_NORMAL = 0x0,DS3DMODE_HEADRELATIVE = 0x1,DS3DMODE_DISABLE = 0x2,};
enum MACRO_DSCBCAPS {DSCBCAPS_WAVEMAPPED = 0x80000000,};
enum MACRO_DSCBLOCK {DSCBLOCK_ENTIREBUFFER = 0x1,};
enum MACRO_DVASPECT {DVASPECT_SHORTNAME = 2,};
enum MACRO_EDKEVENT {EDKEVENT_INFORMATION = 0x60000000,EDKEVENT_WARNING = 0xA0000001,EDKEVENT_ERROR = 0xE0000002,};
enum MACRO_EECBGNMS {EECBGNMS_MODAL = 0x1,};
enum MACRO_EISAFLAG {EISAFLAG_NO_IO_MERGE = 0x1,EISAFLAG_SLOT_IO_FIRST = 0x2,};
enum MACRO_ELEMENTS {SESI1_NUM_ELEMENTS = 8,SESI2_NUM_ELEMENTS = 9,};
enum MACRO_ENCODING {ENCODING_INVALID = 0x4000F101,};
enum MACRO_ENHANCED {ENHANCED_KEY = 0x100,};
enum MACRO_ENUM_ALL {ENUM_ALL_CALENDARS = 0xFFFFFFFF,};
enum MACRO_ERRCLASS {ERRCLASS_OUTRES = 1,ERRCLASS_TEMPSIT = 2,ERRCLASS_AUTH = 3,ERRCLASS_INTRN = 4,ERRCLASS_HRDFAIL = 5,ERRCLASS_SYSFAIL = 6,ERRCLASS_APPERR = 7,ERRCLASS_NOTFND = 8,ERRCLASS_BADFMT = 9,ERRCLASS_LOCKED = 10,ERRCLASS_MEDIA = 11,ERRCLASS_ALREADY = 12,ERRCLASS_UNK = 13,ERRCLASS_CANT = 14,ERRCLASS_TIME = 15,};
enum MACRO_ERROR_NO {ERROR_NO_ITEMS = 93,ERROR_INTERRUPT = 95,ERROR_PROTECTION_VIOLATION = 115,ERROR_VIOKBD_REQUEST = 116,ERROR_UNCERTAIN_MEDIA = 163,ERROR_MONITORS_NOT_SUPPORTED = 165,ERROR_INVALID_CALLGATE = 181,ERROR_NO_CHILD_PROCESS = 184,ERROR_CHILD_ALIVE_NOWAIT = 185,ERROR_NOT_CURRENT_CTRY = 204,ERROR_INFO_NOT_AVAIL = 211,ERROR_BAD_DYNALINK = 213,ERROR_USER_DEFINED_BASE = 61440,ERROR_I24_WRITE_PROTECT = 0,ERROR_I24_BAD_UNIT = 1,ERROR_I24_NOT_READY = 2,ERROR_I24_BAD_COMMAND = 3,ERROR_I24_CRC = 4,ERROR_I24_BAD_LENGTH = 5,ERROR_I24_SEEK = 6,ERROR_I24_NOT_DOS_DISK = 7,ERROR_I24_SECTOR_NOT_FOUND = 8,ERROR_I24_OUT_OF_PAPER = 9,ERROR_I24_WRITE_FAULT = 10,ERROR_I24_READ_FAULT = 11,ERROR_I24_GEN_FAILURE = 12,ERROR_I24_DISK_CHANGE = 13,ERROR_I24_WRONG_DISK = 15,ERROR_I24_UNCERTAIN_MEDIA = 16,ERROR_I24_CHAR_CALL_INTERRUPTED = 17,ERROR_I24_NO_MONITOR_SUPPORT = 18,ERROR_I24_INVALID_PARAMETER = 19,};
enum MACRO_ERR_FILE {ERR_FILE_NOT_FOUND = 2,ERR_INVALID_PARAMETER = 87,ERR_BUFFER_OVERFLOW = 111,ERR_MEMORY_ALLOCATE = 150,};
enum MACRO_ETHERNET {ETHERNET_FRAME_TYPE = 0x600,};
enum MACRO_EVENTLOG {EVENTLOG_SEQUENTIAL_READ = 0x1,EVENTLOG_SEEK_READ = 0x2,EVENTLOG_FORWARDS_READ = 0x4,EVENTLOG_BACKWARDS_READ = 0x8,EVENTLOG_SUCCESS = 0x0,EVENTLOG_ERROR_TYPE = 0x1,EVENTLOG_WARNING_TYPE = 0x2,EVENTLOG_INFORMATION_TYPE = 0x4,EVENTLOG_AUDIT_SUCCESS = 0x8,EVENTLOG_AUDIT_FAILURE = 0x10,EVENTLOG_START_PAIRED_EVENT = 0x1,EVENTLOG_END_PAIRED_EVENT = 0x2,EVENTLOG_END_ALL_PAIRED_EVENTS = 0x4,EVENTLOG_PAIRED_EVENT_ACTIVE = 0x8,EVENTLOG_PAIRED_EVENT_INACTIVE = 0x10,};
enum MACRO_EXCHANGE {EXCHANGE_DS = 1,EXCHANGE_IS = 2,EXCHANGE_MTA = 3,EXCHANGE_SA = 4,};
enum MACRO_EXSERVER {EXSERVER = 5,};
enum MACRO_E_FAILED {E_FAILED_TO_LOAD_DLL = 0x8004D201,};
enum MACRO_E_RATING {E_RATING_NOT_FOUND = 0x80000001,};
enum MACRO_FACILITY {FACILITY_WINDOWS = 8,FACILITY_STORAGE = 3,FACILITY_SSPI = 9,FACILITY_SETUPAPI = 15,FACILITY_RPC = 1,FACILITY_WIN32 = 7,FACILITY_CONTROL = 10,FACILITY_NULL = 0,FACILITY_MSMQ = 14,FACILITY_MEDIASERVER = 13,FACILITY_INTERNET = 12,FACILITY_DISPATCH = 2,FACILITY_CERT = 11,};
enum MACRO_FILENAME {FILENAME_MAX = 260,FOPEN_MAX = 20,};
enum MACRO_FILE_ANY {FILE_ANY_ACCESS = 0,FILE_READ_ACCESS = 1,FILE_WRITE_ACCESS = 2,};
enum MACRO_FILE_MAP {FILE_MAP_COPY = 1,FILE_MAP_WRITE = 2,FILE_MAP_READ = 4,FILE_MAP_ALL_ACCESS = 983071,};
enum MACRO_FILE_SET {FILE_SET_ENCRYPTION = 0x1,FILE_CLEAR_ENCRYPTION = 0x2,};
enum MACRO_FILTER_E {FILTER_E_END_OF_CHUNKS = 0x80041700,FILTER_E_NO_MORE_TEXT = 0x80041701,FILTER_E_NO_MORE_VALUES = 0x80041702,FILTER_E_ACCESS = 0x80041703,FILTER_W_MONIKER_CLIPPED = 0x41704,FILTER_E_NO_TEXT = 0x80041705,FILTER_E_NO_VALUES = 0x80041706,FILTER_E_EMBEDDING_UNAVAILABLE = 0x80041707,FILTER_E_LINK_UNAVAILABLE = 0x80041708,FILTER_S_LAST_TEXT = 0x41709,FILTER_S_LAST_VALUES = 0x4170A,FILTER_E_PASSWORD = 0x8004170B,FILTER_E_UNKNOWNFORMAT = 0x8004170C,};
enum MACRO_FIND_DIR {FIND_DIR = 0xF,FIND_NEXT = 0x1,FIND_PREV = 0x4,FIND_FROM_START = 0x8,FIND_TYPE = 0xF0,FIND_KEY = 0x10,FIND_ANY = 0x20,FIND_FORMAT = 0x40,FIND_RET = 0xF000,FIND_POS = 0x0,FIND_LENGTH = 0x1000,FIND_OFFSET = 0x2000,FIND_SIZE = 0x3000,FIND_INDEX = 0x4000,};
enum MACRO_FLT4BIND {FLT4BIND = 14,};
enum MACRO_FLT8BIND {FLT8BIND = 9,};
enum MACRO_FLT_IEEE {FLT_IEEE = 4,FLT_VAXD = 5,};
enum MACRO_FONTTYPE {RASTER_FONTTYPE = 0x1,DEVICE_FONTTYPE = 0x2,TRUETYPE_FONTTYPE = 0x4,};
enum MACRO_FORCE_XP {FORCE_XP_CONNECT = 0x40000,FORCE_XP_DISCONNECT = 0x80000,};
enum MACRO_FUNCTION {FUNCTION_DECLINED = 0x4000F102,FUNCTION_INTERRUPTED = 0x4000F103,};
enum MACRO_FVIRTKEY {FVIRTKEY = 1,FNOINVERT = 2,FSHIFT = 4,FCONTROL = 8,FALT = 16,};
enum MACRO_GCPCLASS {GCPCLASS_LATIN = 1,GCPCLASS_HEBREW = 2,GCPCLASS_ARABIC = 2,GCPCLASS_NEUTRAL = 3,GCPCLASS_LOCALNUMBER = 4,GCPCLASS_LATINNUMBER = 5,GCPCLASS_LATINNUMERICTERMINATOR = 6,GCPCLASS_LATINNUMERICSEPARATOR = 7,GCPCLASS_NUMERICSEPARATOR = 8,GCPCLASS_PREBOUNDLTR = 128,GCPCLASS_PREBOUNDRTL = 64,GCPCLASS_POSTBOUNDLTR = 32,GCPCLASS_POSTBOUNDRTL = 16,};
enum MACRO_GCPGLYPH {GCPGLYPH_LINKBEFORE = 0x8000,GCPGLYPH_LINKAFTER = 0x4000,};
enum MACRO_GENERATE {GENERATE_RECEIPT_ONLY = 0x10,};
enum MACRO_GRADIENT {GRADIENT_FILL_RECT_H = 0x0,GRADIENT_FILL_RECT_V = 0x1,GRADIENT_FILL_TRIANGLE = 0x2,GRADIENT_FILL_OP_FLAG = 0xFF,};
enum MACRO_HELPINFO {HELPINFO_WINDOW = 0x1,HELPINFO_MENUITEM = 0x2,};
enum MACRO_HTBORDER {HTBORDER = 18,};
enum MACRO_HTBOTTOM {HTBOTTOM = 15,HTBOTTOMLEFT = 16,};
enum MACRO_HTOBJECT {HTOBJECT = 19,};
enum MACRO_HTREDUCE {HTREDUCE = 8,};
enum MACRO_HWND_TOP {HWND_TOP = 0,HWND_BOTTOM = 1,HWND_TOPMOST = -1,HWND_NOTOPMOST = -2,};
enum MACRO_ICM_USER {ICM_USER = 0x4000,ICM_RESERVED_LOW = 0x5000,ICM_RESERVED_HIGH = 0x6000,ICM_GETSTATE = 0x5000,ICM_SETSTATE = 0x5001,ICM_GETINFO = 0x5002,ICM_CONFIGURE = 0x500A,ICM_ABOUT = 0x500B,ICM_GETDEFAULTQUALITY = 0x501E,ICM_GETQUALITY = 0x501F,ICM_SETQUALITY = 0x5020,ICM_SET = 0x5028,ICM_GET = 0x5029,ICM_FRAMERATE = 0x526D7246,ICM_KEYFRAMERATE = 0x5279654B,ICM_COMPRESS_GET_FORMAT = 0x4004,ICM_COMPRESS_GET_SIZE = 0x4005,ICM_COMPRESS_QUERY = 0x4006,ICM_COMPRESS_BEGIN = 0x4007,ICM_COMPRESS = 0x4008,ICM_COMPRESS_END = 0x4009,ICM_DECOMPRESS_GET_FORMAT = 0x400A,ICM_DECOMPRESS_QUERY = 0x400B,ICM_DECOMPRESS_BEGIN = 0x400C,ICM_DECOMPRESS = 0x400D,ICM_DECOMPRESS_END = 0x400E,ICM_DECOMPRESS_SET_PALETTE = 0x401D,ICM_DECOMPRESS_GET_PALETTE = 0x401E,ICM_DRAW_QUERY = 0x401F,ICM_DRAW_BEGIN = 0x400F,ICM_DRAW_GET_PALETTE = 0x4010,ICM_DRAW_START = 0x4012,ICM_DRAW_STOP = 0x4013,ICM_DRAW_END = 0x4015,ICM_DRAW_GETTIME = 0x4020,ICM_DRAW = 0x4021,ICM_DRAW_WINDOW = 0x4022,ICM_DRAW_SETTIME = 0x4023,ICM_DRAW_REALIZE = 0x4024,ICM_DRAW_FLUSH = 0x4025,ICM_DRAW_RENDERBUFFER = 0x4026,ICM_DRAW_START_PLAY = 0x4027,ICM_DRAW_STOP_PLAY = 0x4028,ICM_DRAW_SUGGESTFORMAT = 0x4032,ICM_DRAW_CHANGEPALETTE = 0x4033,ICM_GETBUFFERSWANTED = 0x4029,ICM_GETDEFAULTKEYFRAMERATE = 0x402A,ICM_DECOMPRESSEX_BEGIN = 0x403C,ICM_DECOMPRESSEX_QUERY = 0x403D,ICM_DECOMPRESSEX = 0x403E,ICM_DECOMPRESSEX_END = 0x403F,ICM_COMPRESS_FRAMES_INFO = 0x4046,ICM_SET_STATUS_PROC = 0x4048,};
enum MACRO_ICSTATUS {ICSTATUS_START = 0,ICSTATUS_STATUS = 1,ICSTATUS_END = 2,ICSTATUS_ERROR = 3,ICSTATUS_YIELD = 4,};
enum MACRO_IDIGNORE {IDIGNORE = 5,};
enum MACRO_IME_MODE {IME_MODE_ALPHANUMERIC = 0x1,IME_MODE_SBCSCHAR = 0x8,IME_MODE_KATAKANA = 0x2,IME_MODE_HIRAGANA = 0x4,IME_MODE_HANJACONVERT = 0x4,IME_MODE_DBCSCHAR = 0x10,IME_MODE_ROMAN = 0x20,IME_MODE_NOROMAN = 0x40,IME_MODE_CODEINPUT = 0x80,IME_MODE_NOCODEINPUT = 0x100,IME_GETIMECAPS = 0x3,IME_SETOPEN = 0x4,IME_GETOPEN = 0x5,IME_GETVERSION = 0x7,IME_SETCONVERSIONWINDOW = 0x8,IME_MOVEIMEWINDOW = 0x8,IME_SETCONVERSIONMODE = 0x10,IME_GETCONVERSIONMODE = 0x11,IME_SET_MODE = 0x12,IME_SENDVKEY = 0x13,IME_ENTERWORDREGISTERMODE = 0x18,IME_SETCONVERSIONFONTEX = 0x19,IME_BANJAtoJUNJA = 0x13,IME_JUNJAtoBANJA = 0x14,IME_JOHABtoKS = 0x15,IME_KStoJOHAB = 0x16,};
enum MACRO_IME_PROP {IME_PROP_AT_CARET = 0x10000,IME_PROP_SPECIAL_UI = 0x20000,IME_PROP_CANDLIST_START_FROM_1 = 0x40000,IME_PROP_UNICODE = 0x80000,IME_PROP_COMPLETE_ON_UNSELECT = 0x100000,};
enum MACRO_IMGTRANS {IMGTRANS_OPAQUE = 0x20000000,IMGTRANS_MASK = 0x20000000,};
enum MACRO_INKWIDTH {INKWIDTH_MINIMUM = 0,INKWIDTH_MAXIMUM = 15,};
enum MACRO_INTERENT {INTERENT_GOONLINE_REFRESH = 0x1,INTERENT_GOONLINE_MASK = 0x1,};
enum MACRO_INTERNET {INTERNET_INVALID_PORT_NUMBER = 0,INTERNET_DEFAULT_FTP_PORT = 21,INTERNET_DEFAULT_GOPHER_PORT = 70,INTERNET_DEFAULT_HTTP_PORT = 80,INTERNET_DEFAULT_HTTPS_PORT = 443,INTERNET_DEFAULT_SOCKS_PORT = 1080,INTERNET_MAX_HOST_NAME_LENGTH = 256,INTERNET_MAX_USER_NAME_LENGTH = 128,INTERNET_MAX_PASSWORD_LENGTH = 128,INTERNET_MAX_PORT_NUMBER_LENGTH = 5,INTERNET_MAX_PORT_NUMBER_VALUE = 65535,INTERNET_MAX_PATH_LENGTH = 2048,INTERNET_MAX_SCHEME_LENGTH = 32,INTERNET_KEEP_ALIVE_UNKNOWN = 4294967295,INTERNET_KEEP_ALIVE_ENABLED = 1,INTERNET_KEEP_ALIVE_DISABLED = 0,INTERNET_REQFLAG_FROM_CACHE = 1,INTERNET_REQFLAG_ASYNC = 2,INTERNET_REQFLAG_VIA_PROXY = 4,INTERNET_REQFLAG_NO_HEADERS = 8,INTERNET_REQFLAG_PASSIVE = 16,INTERNET_REQFLAG_CACHE_WRITE_DISABLED = 64,INTERNET_FLAG_RELOAD = -2147483648,INTERNET_FLAG_RAW_DATA = 1073741824,INTERNET_FLAG_EXISTING_CONNECT = 536870912,INTERNET_FLAG_ASYNC = 268435456,INTERNET_FLAG_PASSIVE = 134217728,INTERNET_FLAG_NO_CACHE_WRITE = 67108864,INTERNET_FLAG_DONT_CACHE = 67108864,INTERNET_FLAG_MAKE_PERSISTENT = 33554432,INTERNET_FLAG_FROM_CACHE = 16777216,INTERNET_FLAG_OFFLINE = 16777216,INTERNET_FLAG_SECURE = 8388608,INTERNET_FLAG_KEEP_CONNECTION = 4194304,INTERNET_FLAG_NO_AUTO_REDIRECT = 2097152,INTERNET_FLAG_READ_PREFETCH = 1048576,INTERNET_FLAG_NO_COOKIES = 524288,INTERNET_FLAG_NO_AUTH = 262144,INTERNET_FLAG_CACHE_IF_NET_FAIL = 65536,INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP = 32768,INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS = 16384,INTERNET_FLAG_IGNORE_CERT_DATE_INVALID = 8192,INTERNET_FLAG_IGNORE_CERT_CN_INVALID = 4096,INTERNET_FLAG_RESYNCHRONIZE = 2048,INTERNET_FLAG_HYPERLINK = 1024,INTERNET_FLAG_NO_UI = 512,INTERNET_FLAG_PRAGMA_NOCACHE = 256,INTERNET_FLAG_CACHE_ASYNC = 128,INTERNET_FLAG_FORMS_SUBMIT = 64,INTERNET_FLAG_NEED_FILE = 16,INTERNET_FLAG_MUST_CACHE_REQUEST = 16,};
enum MACRO_INT_EXIT {INT_EXIT = 0,INT_CONTINUE = 1,INT_CANCEL = 2,};
enum MACRO_IOC_UNIX {IOC_UNIX = 0x0,IOC_WS2 = 0x8000000,IOC_PROTOCOL = 0x10000000,IOC_VENDOR = 0x18000000,};
enum MACRO_IPX_BASE {IPX_BASE_ENTRY = 0,IPX_INTERFACE_TABLE = 1,IPX_DEST_TABLE = 2,IPX_STATIC_ROUTE_TABLE = 3,IPX_SERV_TABLE = 4,IPX_STATIC_SERV_TABLE = 5,};
enum MACRO_IP_OTHER {IP_OTHER = 1,IP_LOCAL = 2,IP_NETMGMT = 3,IP_ICMP = 4,IP_EGP = 5,IP_GGP = 6,IP_HELLO = 7,IP_RIP = 8,IP_IS_IS = 9,IP_ES_IS = 10,IP_CISCO = 11,IP_BBN = 12,IP_OSPF = 13,IP_BGP = 14,IP_BOOTP = 9999,IP_NT_AUTOSTATIC = 10002,};
enum MACRO_ISOPROTO {ISOPROTO_TP0 = 25,ISOPROTO_TP1 = 26,ISOPROTO_TP2 = 27,ISOPROTO_TP3 = 28,ISOPROTO_TP4 = 29,ISOPROTO_TP = 29,ISOPROTO_CLTP = 30,ISOPROTO_CLNP = 31,ISOPROTO_X25 = 32,ISOPROTO_INACT_NL = 33,ISOPROTO_ESIS = 34,ISOPROTO_INTRAISIS = 35,};
enum MACRO_KERBEROS {KERBEROS_VERSION = 5,KERBEROS_REVISION = 6,};
enum MACRO_KSEVENTF {KSEVENTF_HANDLE = 0x1,};
enum MACRO_KSFILTER {KSFILTER_NODE = 4294967295,};
enum MACRO_KSMEDIUM {KSMEDIUM_TYPE_ANYINSTANCE = 0,KSMEDIUM_TYPE_SPECIFICINSTANCE = 1,KSMEDIUM_STANDARD_DEVIO = 0,};
enum MACRO_KSMETHOD {KSMETHOD_TYPE_NONE = 0x0,KSMETHOD_TYPE_READ = 0x1,KSMETHOD_TYPE_WRITE = 0x2,KSMETHOD_TYPE_MODIFY = 0x3,KSMETHOD_TYPE_SOURCE = 0x4,KSMETHOD_TYPE_SETSUPPORT = 0x100,KSMETHOD_TYPE_BASICSUPPORT = 0x200,};
enum MACRO_KSSTREAM {KSSTREAM_HEADER_OPTIONSF_SPLICEPOINT = 0x1,KSSTREAM_HEADER_OPTIONSF_PREROLL = 0x2,KSSTREAM_HEADER_OPTIONSF_DATADISCONTINUITY = 0x4,KSSTREAM_HEADER_OPTIONSF_TYPECHANGED = 0x8,KSSTREAM_HEADER_OPTIONSF_TIMEVALID = 0x10,KSSTREAM_HEADER_OPTIONSF_TIMEDISCONTINUITY = 0x40,KSSTREAM_HEADER_OPTIONSF_FLUSHONPAUSE = 0x80,KSSTREAM_HEADER_OPTIONSF_DURATIONVALID = 0x100,KSSTREAM_HEADER_OPTIONSF_ENDOFSTREAM = 0x200,KSSTREAM_HEADER_OPTIONSF_EXTENDEDHEADER = 0x10000000,KSSTREAM_HEADER_OPTIONSF_LOOPEDDATA = 0x80000000,};
enum MACRO_LANGUAGE {LANGUAGE_S_LARGE_WORD = 0x41781,};
enum MACRO_LDAP_OPT {LDAP_OPT_REFERRAL_CALLBACK = 0x70,};
enum MACRO_LINECAPS {LINECAPS = 30,POLYGONALCAPS = 32,};
enum MACRO_LOCKFILE {LOCKFILE_FAIL_IMMEDIATELY = 0x1,LOCKFILE_EXCLUSIVE_LOCK = 0x2,};
enum MACRO_LOGFLAGS {LOGFLAGS_FORWARD = 0,LOGFLAGS_BACKWARD = 1,LOGFLAGS_SEEK = 2,};
enum MACRO_LOGON_SP {LOGON_SP_TRANSPORT = 0x1,LOGON_SP_PROMPT = 0x2,LOGON_SP_NEWPW = 0x4,LOGON_CHANGED = 0x8,};
enum MACRO_LONGLONG {LOWPART_LONGLONG = 0xFFFFFFFFFFFFFFFF,HIGHPART_LONGLONG = 0xFFFFFFFF00000000,};
enum MACRO_MAILSLOT {MAILSLOT_NO_MESSAGE = 4294967295,MAILSLOT_WAIT_FOREVER = 4294967295,};
enum MACRO_MAPIFORM {MAPIFORM_SELECT_ALL_REGISTRIES = 0,MAPIFORM_SELECT_FOLDER_REGISTRY_ONLY = 1,MAPIFORM_SELECT_NON_FOLDER_REGISTRY_ONLY = 2,};
enum MACRO_MAPI_NON {MAPI_NON_READ = 0x1,};
enum MACRO_MAPI_OLE {MAPI_OLE = 0x1,MAPI_OLE_STATIC = 0x2,MAPI_UNREAD = 0x1,MAPI_RECEIPT_REQUESTED = 0x2,MAPI_SENT = 0x4,MAPI_UNREAD_ONLY = 0x20,MAPI_GUARANTEE_FIFO = 0x100,MAPI_LONG_MSGID = 0x4000,MAPI_PEEK = 0x80,MAPI_SUPPRESS_ATTACH = 0x800,MAPI_ENVELOPE_ONLY = 0x40,MAPI_BODY_AS_FILE = 0x200,MAPI_AB_NOMODIFY = 0x400,MAPI_USER_ABORT = 0x1,MAPI_E_USER_ABORT = 0x1,MAPI_E_FAILURE = 0x2,MAPI_E_LOGON_FAILURE = 0x3,MAPI_E_LOGIN_FAILURE = 0x3,MAPI_E_DISK_FULL = 0x4,MAPI_E_INSUFFICIENT_MEMORY = 0x5,MAPI_E_ACCESS_DENIED = 0x6,MAPI_E_TOO_MANY_SESSIONS = 0x8,MAPI_E_TOO_MANY_FILES = 0x9,MAPI_E_TOO_MANY_RECIPIENTS = 0xA,MAPI_E_ATTACHMENT_NOT_FOUND = 0xB,MAPI_E_ATTACHMENT_OPEN_FAILURE = 0xC,MAPI_E_ATTACHMENT_WRITE_FAILURE = 0xD,MAPI_E_UNKNOWN_RECIPIENT = 0xE,MAPI_E_BAD_RECIPTYPE = 0xF,MAPI_E_NO_MESSAGES = 0x10,MAPI_E_INVALID_MESSAGE = 0x11,MAPI_E_TEXT_TOO_LARGE = 0x12,MAPI_E_INVALID_SESSION = 0x13,MAPI_E_TYPE_NOT_SUPPORTED = 0x14,MAPI_E_AMBIGUOUS_RECIPIENT = 0x15,MAPI_E_AMBIG_RECIP = 0x15,MAPI_E_MESSAGE_IN_USE = 0x16,MAPI_E_NETWORK_FAILURE = 0x17,MAPI_E_INVALID_EDITFIELDS = 0x18,MAPI_E_INVALID_RECIPS = 0x19,MAPI_E_NOT_SUPPORTED = 0x1A,};
enum MACRO_MAPI_TOP {MAPI_TOP_LEVEL = 0x1,MAPI_ERROR_VERSION = 0x0,};
enum MACRO_MAXDWORD {MAXDWORD = 0xFFFFFFFF,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,MINLONG = 0x80000000,};
enum MACRO_MAX_ADMD {MAX_ADMD_NAME_SIZ = 17,MAX_PRMD_NAME_SIZ = 17,MAX_COUNTRY_NAME_SIZ = 4,MAX_MTA_NAME_SIZ = 33,};
enum MACRO_MAX_LANA {MAX_LANA = 254,};
enum MACRO_MAX_LINK {MAX_LINK_SVCS = 250,};
enum MACRO_MAX_NERR {MAX_NERR = 2999,};
enum MACRO_MAX_PERF {MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = 8,};
enum MACRO_MAX_SIZE {MAX_SIZE_SECURITY_ID = 512,};
enum MACRO_MCI_TEST {MCI_TEST = 0x20,MCI_CAPTURE = 0x870,MCI_MONITOR = 0x871,MCI_RESERVE = 0x872,MCI_SETAUDIO = 0x873,MCI_SIGNAL = 0x875,MCI_SETVIDEO = 0x876,MCI_QUALITY = 0x877,MCI_LIST = 0x878,MCI_UNDO = 0x879,MCI_CONFIGURE = 0x87A,MCI_RESTORE = 0x87B,MCI_ON = 0x1,MCI_OFF = 0x0,MCI_DGV_FILE_MODE_SAVING = 0x1,MCI_DGV_FILE_MODE_LOADING = 0x2,MCI_DGV_FILE_MODE_EDITING = 0x3,MCI_DGV_FILE_MODE_IDLE = 0x4,MCI_ON_S = 0x8000,MCI_OFF_S = 0x8001,MCI_DGV_FILE_S = 0x8002,MCI_DGV_INPUT_S = 0x8003,MCI_DGV_FILE_MODE_SAVING_S = 0x8004,MCI_DGV_FILE_MODE_LOADING_S = 0x8005,MCI_DGV_FILE_MODE_EDITING_S = 0x8006,MCI_DGV_FILE_MODE_IDLE_S = 0x8007,MCI_DGV_SETVIDEO_SRC_NTSC_S = 0x8010,MCI_DGV_SETVIDEO_SRC_RGB_S = 0x8011,MCI_DGV_SETVIDEO_SRC_SVIDEO_S = 0x8012,MCI_DGV_SETVIDEO_SRC_PAL_S = 0x8013,MCI_DGV_SETVIDEO_SRC_SECAM_S = 0x8014,MCI_DGV_SETVIDEO_SRC_GENERIC_S = 0x8015,MCI_DGV_SETAUDIO_SRC_LEFT_S = 0x8020,MCI_DGV_SETAUDIO_SRC_RIGHT_S = 0x8021,MCI_DGV_SETAUDIO_SRC_AVERAGE_S = 0x8022,MCI_DGV_SETAUDIO_SRC_STEREO_S = 0x8023,};
enum MACRO_MDMEMBER {MDMEMBER_TYPE_UNKNOWN = 0x0,MDMEMBER_TYPE_REGULAR = 0x1,MDMEMBER_TYPE_ALL = 0x2,MDMEMBER_TYPE_MEASURE = 0x3,MDMEMBER_TYPE_FORMULA = 0x4,MDMEMBER_TYPE_RESERVE1 = 0x5,MDMEMBER_TYPE_RESERVE2 = 0x6,MDMEMBER_TYPE_RESERVE3 = 0x7,MDMEMBER_TYPE_RESERVE4 = 0x8,};
enum MACRO_MDTREEOP {MDTREEOP_CHILDREN = 0x1,MDTREEOP_SIBLINGS = 0x2,MDTREEOP_PARENT = 0x4,MDTREEOP_SELF = 0x8,MDTREEOP_DESCENDANTS = 0x10,MDTREEOP_ANCESTORS = 0x20,};
enum MACRO_MD_ERROR {MD_ERROR_NOT_INITIALIZED = 0x800CC800,MD_ERROR_DATA_NOT_FOUND = 0x800CC801,MD_ERROR_INVALID_VERSION = 0x800CC802,MD_WARNING_PATH_NOT_FOUND = 0xCC803,MD_WARNING_DUP_NAME = 0xCC804,MD_WARNING_INVALID_DATA = 0xCC805,MD_ERROR_SECURE_CHANNEL_FAILURE = 0x800CC806,MD_WARNING_PATH_NOT_INSERTED = 0xCC807,MD_ERROR_CANNOT_REMOVE_SECURE_ATTRIBUTE = 0x800CC808,MD_WARNING_SAVE_FAILED = 0xCC809,};
enum MACRO_MEMBERID {MEMBERID_NIL = -1,};
enum MACRO_MESGXLAT {MESGXLAT_CNV_CONVERT_FAIL = 0xE0000008,MESGXLAT_CNV_NO_CANDIDATE = 0xE0000009,MESGXLAT_CNV_NO_ACCEPT = 0xE000000A,MESGXLAT_CNV_QUERY_FAIL = 0xE000000B,MESGXLAT_CNV_BAD_SYNTAX = 0xE000000C,};
enum MACRO_METADATA {METADATA_MAX_NAME_LEN = 256,METADATA_PERMISSION_READ = 1,METADATA_PERMISSION_WRITE = 2,METADATA_NO_ATTRIBUTES = 0,METADATA_INHERIT = 1,METADATA_PARTIAL_PATH = 2,METADATA_SECURE = 4,METADATA_REFERENCE = 8,METADATA_VOLATILE = 16,METADATA_ISINHERITED = 32,METADATA_INSERT_PATH = 64,};
enum MACRO_MF_FLAGS {MF_FLAGS_EVEN_IF_NO_RESOURCE = 0x1,MF_FLAGS_NO_CREATE_IF_NO_RESOURCE = 0x2,MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE = 0x4,MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED = 0x8,};
enum MACRO_MIDICAPS {MIDICAPS_VOLUME = 0x1,MIDICAPS_LRVOLUME = 0x2,MIDICAPS_CACHE = 0x4,MIDICAPS_STREAM = 0x8,};
enum MACRO_MIDIPROP {MIDIPROP_SET = 0x80000000,MIDIPROP_GET = 0x40000000,MIDIPROP_TIMEDIV = 0x1,MIDIPROP_TEMPO = 0x2,};
enum MACRO_MIDISTRM {MIDISTRM_ERROR = -2,};
enum MACRO_MIM_OPEN {MIM_OPEN = 961,MIM_CLOSE = 962,MIM_DATA = 963,MIM_LONGDATA = 964,MIM_ERROR = 965,MIM_LONGERROR = 966,};
enum MACRO_MMSYSERR {MMSYSERR_NOERROR = 0,MMSYSERR_ERROR = 1,MMSYSERR_BADDEVICEID = 2,MMSYSERR_NOTENABLED = 3,MMSYSERR_ALLOCATED = 4,MMSYSERR_INVALHANDLE = 5,MMSYSERR_NODRIVER = 6,MMSYSERR_NOMEM = 7,MMSYSERR_NOTSUPPORTED = 8,MMSYSERR_BADERRNUM = 9,MMSYSERR_INVALFLAG = 10,MMSYSERR_INVALPARAM = 11,MMSYSERR_HANDLEBUSY = 12,MMSYSERR_INVALIDALIAS = 13,MMSYSERR_BADDB = 14,MMSYSERR_KEYNOTFOUND = 15,MMSYSERR_READERROR = 16,MMSYSERR_WRITEERROR = 17,MMSYSERR_DELETEERROR = 18,MMSYSERR_VALNOTFOUND = 19,MMSYSERR_NODRIVERCB = 20,MMSYSERR_LASTERROR = 20,};
enum MACRO_MODRECIP {MODRECIP_ADD = 0x2,MODRECIP_MODIFY = 0x4,MODRECIP_REMOVE = 0x8,};
enum MACRO_MOD_LEFT {MOD_LEFT = 0x8000,MOD_RIGHT = 0x4000,MOD_ON_KEYUP = 0x800,MOD_IGNORE_ALL_MODIFIER = 0x400,};
enum MACRO_MOVEFILE {MOVEFILE_REPLACE_EXISTING = 0x1,MOVEFILE_COPY_ALLOWED = 0x2,MOVEFILE_DELAY_UNTIL_REBOOT = 0x4,MOVEFILE_WRITE_THROUGH = 0x8,MOVEFILE_CREATE_HARDLINK = 0x10,MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20,};
enum MACRO_NCBASTAT {NCBASTAT = 0x33,};
enum MACRO_NCBNAMSZ {NCBNAMSZ = 16,};
enum MACRO_NCBRESET {NCBRESET = 0x32,};
enum MACRO_NCBSSTAT {NCBSSTAT = 0x34,};
enum MACRO_NCBTRACE {NCBTRACE = 0x79,ASYNCH = 0x80,};
enum MACRO_NETLOGON {NETLOGON_CONTROL_QUERY = 1,NETLOGON_CONTROL_REPLICATE = 2,NETLOGON_CONTROL_SYNCHRONIZE = 3,NETLOGON_CONTROL_PDC_REPLICATE = 4,NETLOGON_CONTROL_REDISCOVER = 5,NETLOGON_CONTROL_TC_QUERY = 6,NETLOGON_CONTROL_TRANSPORT_NOTIFY = 7,NETLOGON_CONTROL_FIND_USER = 8,NETLOGON_CONTROL_UNLOAD_NETLOGON_DLL = 65531,NETLOGON_CONTROL_BACKUP_CHANGE_LOG = 65532,NETLOGON_CONTROL_TRUNCATE_LOG = 65533,NETLOGON_CONTROL_SET_DBFLAG = 65534,NETLOGON_CONTROL_BREAKPOINT = 65535,NETLOGON_REPLICATION_NEEDED = 1,NETLOGON_REPLICATION_IN_PROGRESS = 2,NETLOGON_FULL_SYNC_REPLICATION = 4,NETLOGON_REDO_NEEDED = 8,};
enum MACRO_NETSCAPE {NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 0x80,NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 0x40,NETSCAPE_SSL_CA_CERT_TYPE = 0x4,};
enum MACRO_NEWFRAME {NEWFRAME = 1,ABORTDOC = 2,};
enum MACRO_NEXTBAND {NEXTBAND = 3,SETCOLORTABLE = 4,};
enum MACRO_NM_FIRST {NM_FIRST = 0,NM_LAST = -99,};
enum MACRO_NOACKREQ {NOACKREQ = 0,ACKREQ = 1,};
enum MACRO_NOCSSRVR {NOCSSRVR = 1,NODGNREC = 2,};
enum MACRO_NODEMSGS {NODEMSGS = 0xF,SNAMSGS = 0x10,NOSNATRC = 0x20,CPICMSGS = 0x40,LUAMSGS = 0x80,HLLMSGS = 0x100,SRPIMSGS = 0x200,CSVMSGS = 0x400,APPCMSGS = 0x800,};
enum MACRO_NOPARITY {NOPARITY = 0,ODDPARITY = 1,EVENPARITY = 2,};
enum MACRO_NOTLOGON {NOTLOGON = 6,};
enum MACRO_NOUSRREC {NOUSRREC = 3,BUF2SMAL = 4,};
enum MACRO_NTEXPORT {NTEXPORT_STARTED = 0x4000002A,NTEXPORT_COMPLETE = 0x4000002B,NTEXPORT_COMPLETE_NOFILE = 0x4000002C,NTEXPORT_CANCELLED = 0x8000002D,NTEXPORT_CANCELLED_NOFILE = 0x8000002E,NTEXPORT_STARTED_NOFILE = 0x4000002F,};
enum MACRO_NUMFONTS {NUMFONTS = 22,};
enum MACRO_NUM_EISA {NUM_EISA_RANGES = 4,};
enum MACRO_NWEXPORT {NWEXPORT_STARTED = 0x40000030,NWEXPORT_COMPLETE = 0x40000031,NWEXPORT_COMPLETE_NOFILE = 0x40000032,NWEXPORT_CANCELLED = 0x80000033,NWEXPORT_CANCELLED_NOFILE = 0x80000034,NWEXPORT_STARTED_NOFILE = 0x40000035,};
enum MACRO_OLEIVERB {OLEIVERB_PRIMARY = 0,OLEIVERB_SHOW = -1,OLEIVERB_OPEN = -2,OLEIVERB_HIDE = -3,OLEIVERB_UIACTIVATE = -4,OLEIVERB_INPLACEACTIVATE = -5,OLEIVERB_DISCARDUNDOSTATE = -6,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_PAL_FUNC {PRIV_PAL_FUNC = 0x0,UNPRIV_PAL_FUNC = 0x80,BPT_FUNC = 0x80,CALLSYS_FUNC = 0x83,IMB_FUNC = 0x86,GENTRAP_FUNC = 0xAA,RDTEB_FUNC = 0xAB,KBPT_FUNC = 0xAC,CALLKD_FUNC = 0xAD,HALT_FUNC = 0x0,RESTART_FUNC = 0x1,DRAINA_FUNC = 0x2,REBOOT_FUNC = 0x3,INITPAL_FUNC = 0x4,WRENTRY_FUNC = 0x5,SWPIRQL_FUNC = 0x6,RDIRQL_FUNC = 0x7,DI_FUNC = 0x8,EI_FUNC = 0x9,SWPPAL_FUNC = 0xA,SSIR_FUNC = 0xC,CSIR_FUNC = 0xD,RFE_FUNC = 0xE,RETSYS_FUNC = 0xF,SWPCTX_FUNC = 0x10,SWPPROCESS_FUNC = 0x11,RDMCES_FUNC = 0x12,WRMCES_FUNC = 0x13,TBIA_FUNC = 0x14,TBIS_FUNC = 0x15,DTBIS_FUNC = 0x16,TBISASN_FUNC = 0x17,RDKSP_FUNC = 0x18,SWPKSP_FUNC = 0x19,RDPSR_FUNC = 0x1A,RDPCR_FUNC = 0x1C,RDTHREAD_FUNC = 0x1E,TBIM_FUNC = 0x20,TBIMASN_FUNC = 0x21,TBIM64_FUNC = 0x22,TBIS64_FUNC = 0x23,RDCOUNTERS_FUNC = 0x30,RDSTATE_FUNC = 0x31,WRPERFMON_FUNC = 0x32,INITPCR_FUNC = 0x38,};
enum MACRO_PASSWORD {PASSWORD_EXPIRED = 2,};
enum MACRO_PATPAINT {PATPAINT = 0xFB0A09,};
enum MACRO_PER_INCH {HIMETRIC_PER_INCH = 2540,PTS_PER_INCH = 72,};
enum MACRO_PHONEERR {PHONEERR_ALLOCATED = 0x90000001,PHONEERR_BADDEVICEID = 0x90000002,PHONEERR_INCOMPATIBLEAPIVERSION = 0x90000003,PHONEERR_INCOMPATIBLEEXTVERSION = 0x90000004,PHONEERR_INIFILECORRUPT = 0x90000005,PHONEERR_INUSE = 0x90000006,PHONEERR_INVALAPPHANDLE = 0x90000007,PHONEERR_INVALAPPNAME = 0x90000008,PHONEERR_INVALBUTTONLAMPID = 0x90000009,PHONEERR_INVALBUTTONMODE = 0x9000000A,PHONEERR_INVALBUTTONSTATE = 0x9000000B,PHONEERR_INVALDATAID = 0x9000000C,PHONEERR_INVALDEVICECLASS = 0x9000000D,PHONEERR_INVALEXTVERSION = 0x9000000E,PHONEERR_INVALHOOKSWITCHDEV = 0x9000000F,PHONEERR_INVALHOOKSWITCHMODE = 0x90000010,PHONEERR_INVALLAMPMODE = 0x90000011,PHONEERR_INVALPARAM = 0x90000012,PHONEERR_INVALPHONEHANDLE = 0x90000013,PHONEERR_INVALPHONESTATE = 0x90000014,PHONEERR_INVALPOINTER = 0x90000015,PHONEERR_INVALPRIVILEGE = 0x90000016,PHONEERR_INVALRINGMODE = 0x90000017,PHONEERR_NODEVICE = 0x90000018,PHONEERR_NODRIVER = 0x90000019,PHONEERR_NOMEM = 0x9000001A,PHONEERR_NOTOWNER = 0x9000001B,PHONEERR_OPERATIONFAILED = 0x9000001C,PHONEERR_OPERATIONUNAVAIL = 0x9000001D,PHONEERR_RESOURCEUNAVAIL = 0x9000001F,PHONEERR_REQUESTOVERRUN = 0x90000020,PHONEERR_STRUCTURETOOSMALL = 0x90000021,PHONEERR_UNINITIALIZED = 0x90000022,PHONEERR_REINIT = 0x90000023,};
enum MACRO_PKCS_CTL {PKCS_CTL = 37,};
enum MACRO_PKCS_RC2 {PKCS_RC2_CBC_PARAMETERS = 41,PKCS_SMIME_CAPABILITIES = 42,};
enum MACRO_PKCS_UTC {PKCS_UTC_TIME = 17,PKCS_TIME_REQUEST = 18,};
enum MACRO_PLATFORM {PLATFORM_ID_DOS = 300,PLATFORM_ID_OS2 = 400,PLATFORM_ID_NT = 500,PLATFORM_ID_OSF = 600,PLATFORM_ID_VMS = 700,};
enum MACRO_POLYFILL {POLYFILL_LAST = 2,};
enum MACRO_POSITIVE {POSITIVE_INFINITY_RATE = 0xFFFFFFFE,};
enum MACRO_PRESERVE {PRESERVE_BLACK = 0x100,PRESERVE_DKGRAY = 0x200,PRESERVE_LTGRAY = 0x400,PRESERVE_WHITE = 0x800,PRESERVE_ALL = 0xF00,PRESERVE_NONE = 0x0,};
enum MACRO_PREVIOUS {DPENUMSESSIONS_PREVIOUS = 0x4,DPENUMPLAYERS_PREVIOUS = 0x4,};
enum MACRO_PRIORITY {NO_PRIORITY = 0,MAX_PRIORITY = 99,MIN_PRIORITY = 1,DEF_PRIORITY = 1,};
enum MACRO_PROGRESS {PROGRESS_CONTINUE = 0,PROGRESS_CANCEL = 1,PROGRESS_STOP = 2,PROGRESS_QUIET = 3,};
enum MACRO_PROPATTR {PROPATTR_MANDATORY = 0x1,PROPATTR_READABLE = 0x2,PROPATTR_WRITEABLE = 0x4,PROPATTR_NOT_PRESENT = 0x8,};
enum MACRO_PROPID_M {PROPID_M_BASE = 0,PROPID_M_CLASS = 1,PROPID_M_MSGID = 2,PROPID_M_CORRELATIONID = 3,PROPID_M_PRIORITY = 4,PROPID_M_DELIVERY = 5,PROPID_M_ACKNOWLEDGE = 6,PROPID_M_JOURNAL = 7,PROPID_M_APPSPECIFIC = 8,PROPID_M_BODY = 9,PROPID_M_BODY_SIZE = 10,PROPID_M_LABEL = 11,PROPID_M_LABEL_LEN = 12,PROPID_M_TIME_TO_REACH_QUEUE = 13,PROPID_M_TIME_TO_BE_RECEIVED = 14,PROPID_M_RESP_QUEUE = 15,PROPID_M_RESP_QUEUE_LEN = 16,PROPID_M_ADMIN_QUEUE = 17,PROPID_M_ADMIN_QUEUE_LEN = 18,PROPID_M_VERSION = 19,PROPID_M_SENDERID = 20,PROPID_M_SENDERID_LEN = 21,PROPID_M_SENDERID_TYPE = 22,PROPID_M_PRIV_LEVEL = 23,PROPID_M_AUTH_LEVEL = 24,PROPID_M_AUTHENTICATED = 25,PROPID_M_HASH_ALG = 26,PROPID_M_ENCRYPTION_ALG = 27,PROPID_M_SENDER_CERT = 28,PROPID_M_SENDER_CERT_LEN = 29,PROPID_M_SRC_MACHINE_ID = 30,PROPID_M_SENTTIME = 31,PROPID_M_ARRIVEDTIME = 32,PROPID_M_DEST_QUEUE = 33,PROPID_M_DEST_QUEUE_LEN = 34,PROPID_M_EXTENSION = 35,PROPID_M_EXTENSION_LEN = 36,PROPID_M_SECURITY_CONTEXT = 37,PROPID_M_CONNECTOR_TYPE = 38,PROPID_M_XACT_STATUS_QUEUE = 39,PROPID_M_XACT_STATUS_QUEUE_LEN = 40,PROPID_M_TRACE = 41,PROPID_M_BODY_TYPE = 42,PROPID_M_DEST_SYMM_KEY = 43,PROPID_M_DEST_SYMM_KEY_LEN = 44,PROPID_M_SIGNATURE = 45,PROPID_M_SIGNATURE_LEN = 46,PROPID_M_PROV_TYPE = 47,PROPID_M_PROV_NAME = 48,PROPID_M_PROV_NAME_LEN = 49,PROPID_M_MSGID_SIZE = 20,PROPID_M_CORRELATIONID_SIZE = 20,};
enum MACRO_PROPID_Q {PROPID_Q_BASE = 100,PROPID_Q_INSTANCE = 101,PROPID_Q_TYPE = 102,PROPID_Q_PATHNAME = 103,PROPID_Q_JOURNAL = 104,PROPID_Q_QUOTA = 105,PROPID_Q_BASEPRIORITY = 106,PROPID_Q_JOURNAL_QUOTA = 107,PROPID_Q_LABEL = 108,PROPID_Q_CREATE_TIME = 109,PROPID_Q_MODIFY_TIME = 110,PROPID_Q_AUTHENTICATE = 111,PROPID_Q_PRIV_LEVEL = 112,PROPID_Q_TRANSACTION = 113,};
enum MACRO_PROPTYPE {PROPTYPE_LONG = 0x1,PROPTYPE_DATE = 0x2,PROPTYPE_BINARY = 0x3,PROPTYPE_STRING = 0x4,};
enum MACRO_PROTOCOL {BASE_PROTOCOL = 1,LAYERED_PROTOCOL = 0,};
enum MACRO_PROVIDER {PROVIDER_KEEPS_VALUE_LENGTH = 0x1,};
enum MACRO_PSINJECT {PSINJECT_APPEND = 0,PSINJECT_REPLACE = 1,PSINJECT_BEGINSTREAM = 0,PSINJECT_PSADOBE = 1,PSINJECT_COMMENTS = 2,PSINJECT_BEGINDEFAULTS = 3,PSINJECT_ENDDEFAULTS = 4,PSINJECT_BEGINPROLOG = 5,PSINJECT_ENDPROLOG = 6,PSINJECT_BEGINSETUP = 7,PSINJECT_ENDSETUP = 8,PSINJECT_ENDPAGECOMMENTS = 9,PSINJECT_BEGINPAGESETUP = 10,PSINJECT_ENDPAGESETUP = 11,PSINJECT_SHOWPAGE = 12,PSINJECT_PAGETRAILER = 13,PSINJECT_TRAILER = 14,PSINJECT_EOF = 15,PSINJECT_ENDSTREAM = 16,PSINJECT_VMSAVE = 17,PSINJECT_VMRESTORE = 18,PSINJECT_DOCNEEDEDRES = 19,PSINJECT_DOCSUPPLIEDRES = 20,PSINJECT_PAGES = 21,PSINJECT_PAGEORDER = 22,PSINJECT_ORIENTATION = 23,PSINJECT_BOUNDINGBOX = 24,PSINJECT_PAGENUMBER = 25,PSINJECT_PAGEBBOX = 26,PSINJECT_MAX = 27,};
enum MACRO_PSTF_INT {PSTF_INT_COMPLEX = 0x10,PSTF_EXT_COMPLEX = 0x20,};
enum MACRO_QUEUEOBJ {QUEUEOBJ = 38,};
enum MACRO_RASADFLG {RASADFLG_PositionDlg = 0x1,};
enum MACRO_RASADMIN {RASADMIN_35 = 35,RASADMIN_CURRENT = 40,};
enum MACRO_RECOVERY {WSANO_RECOVERY = 11003,NO_RECOVERY = 11003,};
enum MACRO_RESERVED {RESERVED = 0x80000000,};
enum MACRO_RESETDEV {RESETDEV = 7,SETBREAK = 8,};
enum MACRO_RESOURCE {RESOURCE_CONNECTED = 0x1,RESOURCE_GLOBALNET = 0x2,RESOURCE_REMEMBERED = 0x3,RESOURCE_RECENT = 0x4,RESOURCE_CONTEXT = 0x5,};
enum MACRO_RES_SOFT {RES_SOFT_SEARCH = 0x1,RES_FIND_MULTIPLE = 0x2,};
enum MACRO_RHASENSE {RHASENSE = 0,DATAONLY = 1,};
enum MACRO_RIFFCPPO {RIFFCPPO = 1330663491,};
enum MACRO_RIFFINFO {RIFFINFO_IARL = 1280459081,RIFFINFO_IART = 1414676809,RIFFINFO_ICMS = 1397572425,RIFFINFO_ICMT = 1414349641,RIFFINFO_ICOP = 1347371849,RIFFINFO_ICRD = 1146241865,RIFFINFO_ICRP = 1347568457,RIFFINFO_IDIM = 1296647241,RIFFINFO_IDPI = 1229997129,RIFFINFO_IENG = 1196311881,RIFFINFO_IGNR = 1380861769,RIFFINFO_IKEY = 1497713481,RIFFINFO_ILGT = 1413958729,RIFFINFO_IMED = 1145392457,RIFFINFO_INAM = 1296125513,RIFFINFO_IPLT = 1414287433,RIFFINFO_IPRD = 1146245193,RIFFINFO_ISBJ = 1245860681,RIFFINFO_ISFT = 1413894985,RIFFINFO_ISHP = 1346917193,RIFFINFO_ISRC = 1129468745,RIFFINFO_ISRF = 1179800393,RIFFINFO_ITCH = 1212372041,RIFFINFO_ISMP = 1347244873,RIFFINFO_IDIT = 1414087753,};
enum MACRO_RIFFWAVE {RIFFWAVE_inst = 1953721961,};
enum MACRO_RMNAMESZ {RMNAMESZ = 32,MAXINFOSIZE = 256,};
enum MACRO_RMPKGJOB {RMPKGJOB_PKGTYPE_WKSTA = 0x1,RMPKGJOB_PKGTYPE_SERVER = 0x2,RMPKGJOB_PKGTYPE_BOTH = 0x3,RMPKGJOB_TASKS_RM_ALL = 0x1,RMPKGJOB_TASKS_RM_SELECTED = 0x2,};
enum MACRO_ROCKWELL {ROCKWELL_WA1_WAVEIN = 100,ROCKWELL_WA1_WAVEOUT = 101,ROCKWELL_WA1_SYNTH = 102,ROCKWELL_WA1_MIXER = 103,ROCKWELL_WA1_MPU401_IN = 104,ROCKWELL_WA1_MPU401_OUT = 105,ROCKWELL_WA2_WAVEIN = 200,ROCKWELL_WA2_WAVEOUT = 201,ROCKWELL_WA2_SYNTH = 202,ROCKWELL_WA2_MIXER = 203,ROCKWELL_WA2_MPU401_IN = 204,ROCKWELL_WA2_MPU401_OUT = 205,};
enum MACRO_ROTFLAGS {ROTFLAGS_REGISTRATIONKEEPSALIVE = 0x1,ROTFLAGS_ALLOWANYCLIENT = 0x2,};
enum MACRO_RPC_C_EP {RPC_C_EP_ALL_ELTS = 0,RPC_C_EP_MATCH_BY_IF = 1,RPC_C_EP_MATCH_BY_OBJ = 2,RPC_C_EP_MATCH_BY_BOTH = 3,RPC_C_VERS_ALL = 1,RPC_C_VERS_COMPATIBLE = 2,RPC_C_VERS_EXACT = 3,RPC_C_VERS_MAJOR_ONLY = 4,RPC_C_VERS_UPTO = 5,RPC_C_MGMT_INQ_IF_IDS = 0,RPC_C_MGMT_INQ_PRINC_NAME = 1,RPC_C_MGMT_INQ_STATS = 2,RPC_C_MGMT_IS_SERVER_LISTEN = 3,RPC_C_MGMT_STOP_SERVER_LISTEN = 4,RPC_C_PARM_MAX_PACKET_LENGTH = 1,RPC_C_PARM_BUFFER_LENGTH = 2,RPC_IF_AUTOLISTEN = 1,RPC_IF_OLE = 2,RPC_NCA_FLAGS_DEFAULT = 0,RPC_NCA_FLAGS_IDEMPOTENT = 1,RPC_NCA_FLAGS_BROADCAST = 2,RPC_NCA_FLAGS_MAYBE = 4,RPC_BUFFER_COMPLETE = 4096,RPC_BUFFER_PARTIAL = 8192,RPC_BUFFER_EXTRA = 16384,RPC_BUFFER_ASYNC = 32768,RPC_BUFFER_NONOTIFY = 65536,};
enum MACRO_RPC_C_NS {RPC_C_NS_SYNTAX_DEFAULT = 0,RPC_C_NS_SYNTAX_DCE = 3,RPC_C_PROFILE_DEFAULT_ELT = 0,RPC_C_PROFILE_ALL_ELT = 1,RPC_C_PROFILE_ALL_ELTS = 1,RPC_C_PROFILE_MATCH_BY_IF = 2,RPC_C_PROFILE_MATCH_BY_MBR = 3,RPC_C_PROFILE_MATCH_BY_BOTH = 4,RPC_C_NS_DEFAULT_EXP_AGE = -1,RPC_S_OK = 0,RPC_S_INVALID_ARG = 87,RPC_S_OUT_OF_MEMORY = 14,RPC_S_OUT_OF_THREADS = 164,RPC_S_INVALID_LEVEL = 87,RPC_S_BUFFER_TOO_SMALL = 122,RPC_S_INVALID_SECURITY_DESC = 1338,RPC_S_ACCESS_DENIED = 5,RPC_S_SERVER_OUT_OF_MEMORY = 1130,RPC_S_ASYNC_CALL_PENDING = 997,RPC_X_NO_MEMORY = 14,RPC_X_INVALID_BOUND = 1734,RPC_X_INVALID_TAG = 1733,RPC_X_ENUM_VALUE_TOO_LARGE = 1781,RPC_X_SS_CONTEXT_MISMATCH = 6,RPC_X_INVALID_BUFFER = 1784,RPC_X_PIPE_APP_MEMORY = 14,RPC_X_INVALID_PIPE_OPERATION = 1831,RPC_C_NOTIFY_ON_SEND_COMPLETE = 1,RPC_C_INFINITE_TIMEOUT = -1,};
enum MACRO_SBCBELT1 {SBCBELT1 = 1,};
enum MACRO_SBCBELT3 {SBCBELT3 = 13,};
enum MACRO_SCHANNEL {SCHANNEL_MAC_KEY = 0x0,SCHANNEL_ENC_KEY = 0x1,};
enum MACRO_SCH_CRED {SCH_CRED_V1 = 0x1,SCH_CRED_V2 = 0x2,SCH_CRED_VERSION = 0x2,};
enum MACRO_SC_GROUP {SC_GROUP_IDENTIFIERW = 43,SC_GROUP_IDENTIFIERA = 43,SC_GROUP_IDENTIFIER = 43,};
enum MACRO_SEARCH_S {SEARCH_S_NOMOREHITS = 0x416A0,SEARCH_E_NOMONIKER = 0x800416A1,SEARCH_E_NOREGION = 0x800416A2,};
enum MACRO_SECURITY {SECURITY_NULL_RID = 0x0,SECURITY_WORLD_RID = 0x0,SECURITY_LOCAL_RID = 0x0,SECURITY_CREATOR_OWNER_RID = 0x0,SECURITY_CREATOR_GROUP_RID = 0x1,SECURITY_CREATOR_OWNER_SERVER_RID = 0x2,SECURITY_CREATOR_GROUP_SERVER_RID = 0x3,SECURITY_DIALUP_RID = 0x1,SECURITY_NETWORK_RID = 0x2,SECURITY_BATCH_RID = 0x3,SECURITY_INTERACTIVE_RID = 0x4,SECURITY_SERVICE_RID = 0x6,SECURITY_ANONYMOUS_LOGON_RID = 0x7,SECURITY_PROXY_RID = 0x8,SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9,SECURITY_SERVER_LOGON_RID = 0x9,SECURITY_PRINCIPAL_SELF_RID = 0xA,SECURITY_AUTHENTICATED_USER_RID = 0xB,SECURITY_RESTRICTED_CODE_RID = 0xC,SECURITY_LOGON_IDS_RID = 0x5,SECURITY_LOGON_IDS_RID_COUNT = 0x3,SECURITY_LOCAL_SYSTEM_RID = 0x12,SECURITY_NT_NON_UNIQUE = 0x15,SECURITY_BUILTIN_DOMAIN_RID = 0x20,};
enum MACRO_SERVICE2 {SERVICE2_BASE = 5600,};
enum MACRO_SERVICES {SERVICES = 0x2,};
enum MACRO_SERVTYPE {SERVTYPE_UNKNOWN = 0,SERVTYPE_MICROSOFT = 1,};
enum MACRO_SETDIRID {SETDIRID_NOT_FULL_PATH = 0x1,SRCINFO_PATH = 0x1,};
enum MACRO_SET_CLIP {SET_CLIP_BOX = 4108,SET_BOUNDS = 4109,SET_MIRROR_MODE = 4110,};
enum MACRO_SEVERITY {SEVERITY_SUCCESS = 0,SEVERITY_ERROR = 1,};
enum MACRO_SE_OWNER {SE_OWNER_DEFAULTED = 0x1,SE_GROUP_DEFAULTED = 0x2,SE_DACL_PRESENT = 0x4,SE_DACL_DEFAULTED = 0x8,SE_SACL_PRESENT = 0x10,SE_SACL_DEFAULTED = 0x20,SE_DACL_AUTO_INHERIT_REQ = 0x100,SE_SACL_AUTO_INHERIT_REQ = 0x200,SE_DACL_AUTO_INHERITED = 0x400,SE_SACL_AUTO_INHERITED = 0x800,SE_DACL_PROTECTED = 0x1000,SE_SACL_PROTECTED = 0x2000,SE_SELF_RELATIVE = 0x8000,};
enum MACRO_SHAREJOB {SHAREJOB_SEND_IF_NOT_SENT = 1,SHAREJOB_SEND_ALWAYS = 2,SHAREJOB_DIST_EXISTING = 1,SHAREJOB_DIST_SPECIFIED = 2,};
enum MACRO_SHREGSET {SHREGSET_HKCU = 0x1,SHREGSET_FORCE_HKCU = 0x2,SHREGSET_HKLM = 0x4,SHREGSET_FORCE_HKLM = 0x8,SHREGSET_DEFAULT = 0x6,};
enum MACRO_SHUTDOWN {SHUTDOWN_NORETRY = 0x1,};
enum MACRO_SNANBEDA {SNANBEDA = 268,};
enum MACRO_SNMP_LOG {SNMP_LOG_SILENT = 0x0,SNMP_LOG_FATAL = 0x1,SNMP_LOG_ERROR = 0x2,SNMP_LOG_WARNING = 0x3,SNMP_LOG_TRACE = 0x4,SNMP_LOG_VERBOSE = 0x5,SNMP_OUTPUT_TO_CONSOLE = 0x1,SNMP_OUTPUT_TO_LOGFILE = 0x2,SNMP_OUTPUT_TO_EVENTLOG = 0x4,SNMP_OUTPUT_TO_DEBUGGER = 0x8,};
enum MACRO_SNMP_MAX {SNMP_MAX_OID_LEN = 128,SNMP_MEM_ALLOC_ERROR = 1,SNMP_BERAPI_INVALID_LENGTH = 10,SNMP_BERAPI_INVALID_TAG = 11,SNMP_BERAPI_OVERFLOW = 12,SNMP_BERAPI_SHORT_BUFFER = 13,SNMP_BERAPI_INVALID_OBJELEM = 14,SNMP_PDUAPI_UNRECOGNIZED_PDU = 20,SNMP_PDUAPI_INVALID_ES = 21,SNMP_PDUAPI_INVALID_GT = 22,SNMP_AUTHAPI_INVALID_VERSION = 30,SNMP_AUTHAPI_INVALID_MSG_TYPE = 31,SNMP_AUTHAPI_TRIV_AUTH_FAILED = 32,};
enum MACRO_SOFTDIST {SOFTDIST_FLAG_USAGE_EMAIL = 0x1,SOFTDIST_FLAG_USAGE_PRECACHE = 0x2,SOFTDIST_FLAG_USAGE_AUTOINSTALL = 0x4,SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 0x8,SOFTDIST_ADSTATE_NONE = 0x0,SOFTDIST_ADSTATE_AVAILABLE = 0x1,SOFTDIST_ADSTATE_DOWNLOADED = 0x2,SOFTDIST_ADSTATE_INSTALLED = 0x3,};
enum MACRO_SPECIFIC {SPECIFIC_RIGHTS_ALL = 0xFFFF,};
enum MACRO_SPLITSYM {SPLITSYM_REMOVE_PRIVATE = 0x1,SPLITSYM_EXTRACT_ALL = 0x2,SPLITSYM_SYMBOLPATH_IS_SRC = 0x4,};
enum MACRO_SQLCRSRO {SQLCRSRO = 10090,};
enum MACRO_SQLEAAMT {SQLEAAMT = 10046,};
enum MACRO_SQLEABMT {SQLEABMT = 10043,};
enum MACRO_SQLEABNC {SQLEABNC = 10042,};
enum MACRO_SQLEABNP {SQLEABNP = 10044,};
enum MACRO_SQLEASEC {SQLEASEC = 10022,};
enum MACRO_SQLEASNL {SQLEASNL = 10031,};
enum MACRO_SQLEASUL {SQLEASUL = 10032,};
enum MACRO_SQLEAUTN {SQLEAUTN = 10014,};
enum MACRO_SQLEBBCI {SQLEBBCI = 10050,};
enum MACRO_SQLEBCBC {SQLEBCBC = 10060,};
enum MACRO_SQLEBCFO {SQLEBCFO = 10061,};
enum MACRO_SQLEBCNE {SQLEBCNE = 10099,};
enum MACRO_SQLEBCNN {SQLEBCNN = 10053,};
enum MACRO_SQLEBCNT {SQLEBCNT = 10072,};
enum MACRO_SQLEBCOR {SQLEBCOR = 10054,};
enum MACRO_SQLEBCPB {SQLEBCPB = 10057,};
enum MACRO_SQLEBCPI {SQLEBCPI = 10055,};
enum MACRO_SQLEBCPN {SQLEBCPN = 10056,};
enum MACRO_SQLEBCPS {SQLEBCPS = 10106,};
enum MACRO_SQLEBCRO {SQLEBCRO = 10098,};
enum MACRO_SQLEBCSA {SQLEBCSA = 10097,};
enum MACRO_SQLEBCSI {SQLEBCSI = 10068,};
enum MACRO_SQLEBCSK {SQLEBCSK = 10100,};
enum MACRO_SQLEBCUO {SQLEBCUO = 10063,};
enum MACRO_SQLEBCVH {SQLEBCVH = 10062,};
enum MACRO_SQLEBCWE {SQLEBCWE = 10052,};
enum MACRO_SQLEBDIO {SQLEBDIO = 10071,};
enum MACRO_SQLEBEOF {SQLEBEOF = 10067,};
enum MACRO_SQLEBIHC {SQLEBIHC = 10102,};
enum MACRO_SQLEBIVI {SQLEBIVI = 10059,};
enum MACRO_SQLEBNCR {SQLEBNCR = 10045,};
enum MACRO_SQLEBTMT {SQLEBTMT = 10066,};
enum MACRO_SQLEBTOK {SQLEBTOK = 10008,};
enum MACRO_SQLEBTYP {SQLEBTYP = 10041,};
enum MACRO_SQLEBUOE {SQLEBUOE = 10064,};
enum MACRO_SQLEBWEF {SQLEBWEF = 10065,};
enum MACRO_SQLEBWFF {SQLEBWFF = 10103,};
enum MACRO_SQLECLOS {SQLECLOS = 10018,};
enum MACRO_SQLECNOR {SQLECNOR = 10011,};
enum MACRO_SQLECOFL {SQLECOFL = 10015,};
enum MACRO_SQLECONN {SQLECONN = 10004,};
enum MACRO_SQLECSYN {SQLECSYN = 10039,};
enum MACRO_SQLEDBOP {SQLEDBOP = 10034,};
enum MACRO_SQLEDBPS {SQLEDBPS = 10029,};
enum MACRO_SQLEDDNE {SQLEDDNE = 10005,};
enum MACRO_SQLEDNTI {SQLEDNTI = 10020,};
enum MACRO_SQLEIFNB {SQLEIFNB = 10048,};
enum MACRO_SQLEIOPT {SQLEIOPT = 10030,};
enum MACRO_SQLEITIM {SQLEITIM = 10028,};
enum MACRO_SQLEKBCI {SQLEKBCI = 10051,};
enum MACRO_SQLEKBCO {SQLEKBCO = 10049,};
enum MACRO_SQLEMDBP {SQLEMDBP = 10073,};
enum MACRO_SQLEMODE {SQLEMODE = 10026,};
enum MACRO_SQLENLOG {SQLENLOG = 10002,};
enum MACRO_SQLENPRM {SQLENPRM = 10033,};
enum MACRO_SQLENSIP {SQLENSIP = 10035,};
enum MACRO_SQLENSPE {SQLENSPE = 10009,};
enum MACRO_SQLENTLL {SQLENTLL = 10023,};
enum MACRO_SQLENTXT {SQLENTXT = 10019,};
enum MACRO_SQLENULL {SQLENULL = 10001,};
enum MACRO_SQLENXID {SQLENXID = 10047,};
enum MACRO_SQLEPARM {SQLEPARM = 10013,};
enum MACRO_SQLEPNUL {SQLEPNUL = 10069,};
enum MACRO_SQLERDCN {SQLERDCN = 10016,};
enum MACRO_SQLEREAD {SQLEREAD = 10010,};
enum MACRO_SQLERPND {SQLERPND = 10038,};
enum MACRO_SQLESEOF {SQLESEOF = 10037,};
enum MACRO_SQLESMSG {SQLESMSG = 10007,};
enum MACRO_SQLETIME {SQLETIME = 10024,};
enum MACRO_SQLETMTD {SQLETMTD = 10021,};
enum MACRO_SQLETSIT {SQLETSIT = 10012,};
enum MACRO_SQLEUVBF {SQLEUVBF = 10101,};
enum MACRO_SQLEVDPT {SQLEVDPT = 10058,};
enum MACRO_SQLEWRIT {SQLEWRIT = 10025,};
enum MACRO_SQL_SPEC {SQL_SPEC_MAJOR = 3,SQL_SPEC_MINOR = 51,SQL_SQLSTATE_SIZE = 5,SQL_MAX_DSN_LENGTH = 32,SQL_MAX_OPTION_STRING_LENGTH = 256,SQL_NO_DATA_FOUND = 100,SQL_HANDLE_SENV = 5,SQL_ATTR_ODBC_VERSION = 200,SQL_ATTR_CONNECTION_POOLING = 201,SQL_ATTR_CP_MATCH = 202,SQL_CP_OFF = 0,SQL_CP_ONE_PER_DRIVER = 1,SQL_CP_ONE_PER_HENV = 2,SQL_CP_DEFAULT = 0,SQL_CP_STRICT_MATCH = 0,SQL_CP_RELAXED_MATCH = 1,SQL_CP_MATCH_DEFAULT = 0,SQL_OV_ODBC2 = 2,SQL_OV_ODBC3 = 3,SQL_ACCESS_MODE = 101,SQL_AUTOCOMMIT = 102,SQL_LOGIN_TIMEOUT = 103,SQL_OPT_TRACE = 104,SQL_OPT_TRACEFILE = 105,SQL_TRANSLATE_DLL = 106,SQL_TRANSLATE_OPTION = 107,SQL_TXN_ISOLATION = 108,SQL_CURRENT_QUALIFIER = 109,SQL_ODBC_CURSORS = 110,SQL_QUIET_MODE = 111,SQL_PACKET_SIZE = 112,SQL_ATTR_ACCESS_MODE = 101,SQL_ATTR_AUTOCOMMIT = 102,SQL_ATTR_CONNECTION_TIMEOUT = 113,SQL_ATTR_CURRENT_CATALOG = 109,SQL_ATTR_DISCONNECT_BEHAVIOR = 114,SQL_ATTR_ENLIST_IN_DTC = 1207,SQL_ATTR_ENLIST_IN_XA = 1208,SQL_ATTR_LOGIN_TIMEOUT = 103,SQL_ATTR_ODBC_CURSORS = 110,SQL_ATTR_PACKET_SIZE = 112,SQL_ATTR_QUIET_MODE = 111,SQL_ATTR_TRACE = 104,SQL_ATTR_TRACEFILE = 105,SQL_ATTR_TRANSLATE_LIB = 106,SQL_ATTR_TRANSLATE_OPTION = 107,SQL_ATTR_TXN_ISOLATION = 108,SQL_ATTR_CONNECTION_DEAD = 1209,SQL_ATTR_ANSI_APP = 115,SQL_MODE_READ_WRITE = 0,SQL_MODE_READ_ONLY = 1,SQL_MODE_DEFAULT = 0,SQL_AUTOCOMMIT_OFF = 0,SQL_AUTOCOMMIT_ON = 1,SQL_AUTOCOMMIT_DEFAULT = 1,SQL_LOGIN_TIMEOUT_DEFAULT = 15,SQL_OPT_TRACE_OFF = 0,SQL_OPT_TRACE_ON = 1,SQL_OPT_TRACE_DEFAULT = 0,SQL_CUR_USE_IF_NEEDED = 0,SQL_CUR_USE_ODBC = 1,SQL_CUR_USE_DRIVER = 2,SQL_CUR_DEFAULT = 2,SQL_DB_RETURN_TO_POOL = 0,SQL_DB_DISCONNECT = 1,SQL_DB_DEFAULT = 0,SQL_DTC_DONE = 0,SQL_CD_TRUE = 1,SQL_CD_FALSE = 0,SQL_AA_TRUE = 1,SQL_AA_FALSE = 0,SQL_QUERY_TIMEOUT = 0,SQL_MAX_ROWS = 1,SQL_NOSCAN = 2,SQL_MAX_LENGTH = 3,SQL_ASYNC_ENABLE = 4,SQL_BIND_TYPE = 5,SQL_CURSOR_TYPE = 6,SQL_CONCURRENCY = 7,SQL_KEYSET_SIZE = 8,SQL_ROWSET_SIZE = 9,SQL_SIMULATE_CURSOR = 10,SQL_RETRIEVE_DATA = 11,SQL_USE_BOOKMARKS = 12,SQL_GET_BOOKMARK = 13,SQL_ROW_NUMBER = 14,SQL_ATTR_ASYNC_ENABLE = 4,SQL_ATTR_CONCURRENCY = 7,SQL_ATTR_CURSOR_TYPE = 6,SQL_ATTR_ENABLE_AUTO_IPD = 15,SQL_ATTR_FETCH_BOOKMARK_PTR = 16,SQL_ATTR_KEYSET_SIZE = 8,SQL_ATTR_MAX_LENGTH = 3,SQL_ATTR_MAX_ROWS = 1,SQL_ATTR_NOSCAN = 2,SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17,SQL_ATTR_PARAM_BIND_TYPE = 18,SQL_ATTR_PARAM_OPERATION_PTR = 19,SQL_ATTR_PARAM_STATUS_PTR = 20,SQL_ATTR_PARAMS_PROCESSED_PTR = 21,SQL_ATTR_PARAMSET_SIZE = 22,SQL_ATTR_QUERY_TIMEOUT = 0,SQL_ATTR_RETRIEVE_DATA = 11,SQL_ATTR_ROW_BIND_OFFSET_PTR = 23,SQL_ATTR_ROW_BIND_TYPE = 5,SQL_ATTR_ROW_NUMBER = 14,SQL_ATTR_ROW_OPERATION_PTR = 24,SQL_ATTR_ROW_STATUS_PTR = 25,SQL_ATTR_ROWS_FETCHED_PTR = 26,SQL_ATTR_ROW_ARRAY_SIZE = 27,SQL_ATTR_SIMULATE_CURSOR = 10,SQL_ATTR_USE_BOOKMARKS = 12,SQL_IS_POINTER = -4,SQL_IS_UINTEGER = -5,SQL_IS_INTEGER = -6,SQL_IS_USMALLINT = -7,SQL_IS_SMALLINT = -8,SQL_PARAM_BIND_BY_COLUMN = 0,SQL_PARAM_BIND_TYPE_DEFAULT = 0,SQL_QUERY_TIMEOUT_DEFAULT = 0,SQL_MAX_ROWS_DEFAULT = 0,SQL_NOSCAN_OFF = 0,SQL_NOSCAN_ON = 1,SQL_NOSCAN_DEFAULT = 0,SQL_MAX_LENGTH_DEFAULT = 0,SQL_ASYNC_ENABLE_OFF = 0,SQL_ASYNC_ENABLE_ON = 1,SQL_ASYNC_ENABLE_DEFAULT = 0,SQL_BIND_BY_COLUMN = 0,SQL_BIND_TYPE_DEFAULT = 0,SQL_CONCUR_READ_ONLY = 1,SQL_CONCUR_LOCK = 2,SQL_CONCUR_ROWVER = 3,SQL_CONCUR_VALUES = 4,SQL_CONCUR_DEFAULT = 1,SQL_CURSOR_FORWARD_ONLY = 0,SQL_CURSOR_KEYSET_DRIVEN = 1,SQL_CURSOR_DYNAMIC = 2,SQL_CURSOR_STATIC = 3,SQL_CURSOR_TYPE_DEFAULT = 0,SQL_ROWSET_SIZE_DEFAULT = 1,SQL_KEYSET_SIZE_DEFAULT = 0,SQL_SC_NON_UNIQUE = 0,SQL_SC_TRY_UNIQUE = 1,SQL_SC_UNIQUE = 2,SQL_RD_OFF = 0,SQL_RD_ON = 1,SQL_RD_DEFAULT = 1,SQL_UB_OFF = 0,SQL_UB_ON = 1,SQL_UB_DEFAULT = 0,SQL_UB_FIXED = 1,SQL_UB_VARIABLE = 2,SQL_DESC_ARRAY_SIZE = 20,SQL_DESC_ARRAY_STATUS_PTR = 21,SQL_DESC_BASE_COLUMN_NAME = 22,SQL_DESC_BASE_TABLE_NAME = 23,SQL_DESC_BIND_OFFSET_PTR = 24,SQL_DESC_BIND_TYPE = 25,SQL_DESC_DATETIME_INTERVAL_PRECISION = 26,SQL_DESC_LITERAL_PREFIX = 27,SQL_DESC_LITERAL_SUFFIX = 28,SQL_DESC_LOCAL_TYPE_NAME = 29,SQL_DESC_MAXIMUM_SCALE = 30,SQL_DESC_MINIMUM_SCALE = 31,SQL_DESC_NUM_PREC_RADIX = 32,SQL_DESC_PARAMETER_TYPE = 33,SQL_DESC_ROWS_PROCESSED_PTR = 34,SQL_DESC_ROWVER = 35,SQL_DIAG_CURSOR_ROW_COUNT = -1249,SQL_DIAG_ROW_NUMBER = -1248,SQL_DIAG_COLUMN_NUMBER = -1247,SQL_DATE = 9,SQL_INTERVAL = 10,SQL_TIME = 10,SQL_TIMESTAMP = 11,SQL_LONGVARCHAR = -1,SQL_BINARY = -2,SQL_VARBINARY = -3,SQL_LONGVARBINARY = -4,SQL_BIGINT = -5,SQL_TINYINT = -6,SQL_BIT = -7,SQL_GUID = -11,SQL_CODE_YEAR = 1,SQL_CODE_MONTH = 2,SQL_CODE_DAY = 3,SQL_CODE_HOUR = 4,SQL_CODE_MINUTE = 5,SQL_CODE_SECOND = 6,SQL_CODE_YEAR_TO_MONTH = 7,SQL_CODE_DAY_TO_HOUR = 8,SQL_CODE_DAY_TO_MINUTE = 9,SQL_CODE_DAY_TO_SECOND = 10,SQL_CODE_HOUR_TO_MINUTE = 11,SQL_CODE_HOUR_TO_SECOND = 12,SQL_CODE_MINUTE_TO_SECOND = 13,SQL_INTERVAL_YEAR = 101,SQL_INTERVAL_MONTH = 102,SQL_INTERVAL_DAY = 103,SQL_INTERVAL_HOUR = 104,SQL_INTERVAL_MINUTE = 105,SQL_INTERVAL_SECOND = 106,SQL_INTERVAL_YEAR_TO_MONTH = 107,SQL_INTERVAL_DAY_TO_HOUR = 108,SQL_INTERVAL_DAY_TO_MINUTE = 109,SQL_INTERVAL_DAY_TO_SECOND = 110,SQL_INTERVAL_HOUR_TO_MINUTE = 111,SQL_INTERVAL_HOUR_TO_SECOND = 112,SQL_INTERVAL_MINUTE_TO_SECOND = 113,SQL_C_CHAR = 1,SQL_C_LONG = 4,SQL_C_SHORT = 5,SQL_C_FLOAT = 7,SQL_C_DOUBLE = 8,SQL_C_NUMERIC = 2,SQL_C_DEFAULT = 99,SQL_SIGNED_OFFSET = -20,SQL_UNSIGNED_OFFSET = -22,SQL_C_DATE = 9,SQL_C_TIME = 10,SQL_C_TIMESTAMP = 11,SQL_C_TYPE_DATE = 91,SQL_C_TYPE_TIME = 92,SQL_C_TYPE_TIMESTAMP = 93,SQL_C_INTERVAL_YEAR = 101,SQL_C_INTERVAL_MONTH = 102,SQL_C_INTERVAL_DAY = 103,SQL_C_INTERVAL_HOUR = 104,SQL_C_INTERVAL_MINUTE = 105,SQL_C_INTERVAL_SECOND = 106,SQL_C_INTERVAL_YEAR_TO_MONTH = 107,SQL_C_INTERVAL_DAY_TO_HOUR = 108,SQL_C_INTERVAL_DAY_TO_MINUTE = 109,SQL_C_INTERVAL_DAY_TO_SECOND = 110,SQL_C_INTERVAL_HOUR_TO_MINUTE = 111,SQL_C_INTERVAL_HOUR_TO_SECOND = 112,SQL_C_INTERVAL_MINUTE_TO_SECOND = 113,SQL_C_BINARY = -2,SQL_C_BIT = -7,SQL_C_SBIGINT = -25,SQL_C_UBIGINT = -27,SQL_C_TINYINT = -6,SQL_C_SLONG = -16,SQL_C_SSHORT = -15,SQL_C_STINYINT = -26,SQL_C_ULONG = -18,SQL_C_USHORT = -17,SQL_C_UTINYINT = -28,SQL_C_BOOKMARK = -18,SQL_C_GUID = -11,SQL_TYPE_NULL = 0,SQL_C_VARBOOKMARK = -2,SQL_NO_ROW_NUMBER = -1,SQL_NO_COLUMN_NUMBER = -1,SQL_ROW_NUMBER_UNKNOWN = -2,SQL_COLUMN_NUMBER_UNKNOWN = -2,SQL_DEFAULT_PARAM = -5,SQL_IGNORE = -6,SQL_COLUMN_IGNORE = -6,SQL_LEN_DATA_AT_EXEC_OFFSET = -100,SQL_LEN_BINARY_ATTR_OFFSET = -100,SQL_SETPARAM_VALUE_MAX = -1,SQL_COLUMN_COUNT = 0,SQL_COLUMN_NAME = 1,SQL_COLUMN_TYPE = 2,SQL_COLUMN_LENGTH = 3,SQL_COLUMN_PRECISION = 4,SQL_COLUMN_SCALE = 5,SQL_COLUMN_DISPLAY_SIZE = 6,SQL_COLUMN_NULLABLE = 7,SQL_COLUMN_UNSIGNED = 8,SQL_COLUMN_MONEY = 9,SQL_COLUMN_UPDATABLE = 10,SQL_COLUMN_AUTO_INCREMENT = 11,SQL_COLUMN_CASE_SENSITIVE = 12,SQL_COLUMN_SEARCHABLE = 13,SQL_COLUMN_TYPE_NAME = 14,SQL_COLUMN_TABLE_NAME = 15,SQL_COLUMN_OWNER_NAME = 16,SQL_COLUMN_QUALIFIER_NAME = 17,SQL_COLUMN_LABEL = 18,SQL_COLATT_OPT_MAX = 18,SQL_COLATT_OPT_MIN = 0,SQL_ATTR_READONLY = 0,SQL_ATTR_WRITE = 1,SQL_ATTR_READWRITE_UNKNOWN = 2,SQL_UNSEARCHABLE = 0,SQL_LIKE_ONLY = 1,SQL_ALL_EXCEPT_LIKE = 2,SQL_SEARCHABLE = 3,SQL_PRED_SEARCHABLE = 3,SQL_NO_TOTAL = -4,SQL_API_SQLALLOCHANDLESTD = 73,SQL_API_SQLBULKOPERATIONS = 24,SQL_API_SQLBINDPARAMETER = 72,SQL_API_SQLBROWSECONNECT = 55,SQL_API_SQLCOLATTRIBUTES = 6,SQL_API_SQLCOLUMNPRIVILEGES = 56,SQL_API_SQLDESCRIBEPARAM = 58,SQL_API_SQLDRIVERCONNECT = 41,SQL_API_SQLDRIVERS = 71,SQL_API_SQLEXTENDEDFETCH = 59,SQL_API_SQLFOREIGNKEYS = 60,SQL_API_SQLMORERESULTS = 61,SQL_API_SQLNATIVESQL = 62,SQL_API_SQLNUMPARAMS = 63,SQL_API_SQLPARAMOPTIONS = 64,SQL_API_SQLPRIMARYKEYS = 65,SQL_API_SQLPROCEDURECOLUMNS = 66,SQL_API_SQLPROCEDURES = 67,SQL_API_SQLSETPOS = 68,SQL_API_SQLSETSCROLLOPTIONS = 69,SQL_API_SQLTABLEPRIVILEGES = 70,SQL_API_ALL_FUNCTIONS = 0,SQL_API_LOADBYORDINAL = 199,SQL_API_ODBC3_ALL_FUNCTIONS = 999,SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250,SQL_INFO_FIRST = 0,SQL_ACTIVE_CONNECTIONS = 0,SQL_ACTIVE_STATEMENTS = 1,SQL_DRIVER_HDBC = 3,SQL_DRIVER_HENV = 4,SQL_DRIVER_HSTMT = 5,SQL_DRIVER_NAME = 6,SQL_DRIVER_VER = 7,SQL_ODBC_API_CONFORMANCE = 9,SQL_ODBC_VER = 10,SQL_ROW_UPDATES = 11,SQL_ODBC_SAG_CLI_CONFORMANCE = 12,SQL_ODBC_SQL_CONFORMANCE = 15,SQL_PROCEDURES = 21,SQL_CONCAT_NULL_BEHAVIOR = 22,SQL_CURSOR_ROLLBACK_BEHAVIOR = 24,SQL_EXPRESSIONS_IN_ORDERBY = 27,SQL_MAX_OWNER_NAME_LEN = 32,SQL_MAX_PROCEDURE_NAME_LEN = 33,SQL_MAX_QUALIFIER_NAME_LEN = 34,SQL_MULT_RESULT_SETS = 36,SQL_MULTIPLE_ACTIVE_TXN = 37,SQL_OUTER_JOINS = 38,SQL_OWNER_TERM = 39,SQL_PROCEDURE_TERM = 40,SQL_QUALIFIER_NAME_SEPARATOR = 41,SQL_QUALIFIER_TERM = 42,SQL_SCROLL_OPTIONS = 44,SQL_TABLE_TERM = 45,SQL_CONVERT_FUNCTIONS = 48,SQL_NUMERIC_FUNCTIONS = 49,SQL_STRING_FUNCTIONS = 50,SQL_SYSTEM_FUNCTIONS = 51,SQL_TIMEDATE_FUNCTIONS = 52,SQL_CONVERT_BIGINT = 53,SQL_CONVERT_BINARY = 54,SQL_CONVERT_BIT = 55,SQL_CONVERT_CHAR = 56,SQL_CONVERT_DATE = 57,SQL_CONVERT_DECIMAL = 58,SQL_CONVERT_DOUBLE = 59,SQL_CONVERT_FLOAT = 60,SQL_CONVERT_INTEGER = 61,SQL_CONVERT_LONGVARCHAR = 62,SQL_CONVERT_NUMERIC = 63,SQL_CONVERT_REAL = 64,SQL_CONVERT_SMALLINT = 65,SQL_CONVERT_TIME = 66,SQL_CONVERT_TIMESTAMP = 67,SQL_CONVERT_TINYINT = 68,SQL_CONVERT_VARBINARY = 69,SQL_CONVERT_VARCHAR = 70,SQL_CONVERT_LONGVARBINARY = 71,SQL_ODBC_SQL_OPT_IEF = 73,SQL_CORRELATION_NAME = 74,SQL_NON_NULLABLE_COLUMNS = 75,SQL_DRIVER_HLIB = 76,SQL_DRIVER_ODBC_VER = 77,SQL_LOCK_TYPES = 78,SQL_POS_OPERATIONS = 79,SQL_POSITIONED_STATEMENTS = 80,SQL_BOOKMARK_PERSISTENCE = 82,SQL_STATIC_SENSITIVITY = 83,SQL_FILE_USAGE = 84,SQL_COLUMN_ALIAS = 87,SQL_GROUP_BY = 88,SQL_KEYWORDS = 89,SQL_OWNER_USAGE = 91,SQL_QUALIFIER_USAGE = 92,SQL_QUOTED_IDENTIFIER_CASE = 93,SQL_SUBQUERIES = 95,SQL_UNION = 96,SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103,SQL_MAX_CHAR_LITERAL_LEN = 108,SQL_TIMEDATE_ADD_INTERVALS = 109,SQL_TIMEDATE_DIFF_INTERVALS = 110,SQL_NEED_LONG_DATA_LEN = 111,SQL_MAX_BINARY_LITERAL_LEN = 112,SQL_LIKE_ESCAPE_CLAUSE = 113,SQL_QUALIFIER_LOCATION = 114,SQL_ACTIVE_ENVIRONMENTS = 116,SQL_ALTER_DOMAIN = 117,SQL_SQL_CONFORMANCE = 118,SQL_DATETIME_LITERALS = 119,SQL_ASYNC_MODE = 10021,SQL_BATCH_ROW_COUNT = 120,SQL_BATCH_SUPPORT = 121,SQL_CATALOG_LOCATION = 114,SQL_CATALOG_NAME_SEPARATOR = 41,SQL_CATALOG_TERM = 42,SQL_CATALOG_USAGE = 92,SQL_CONVERT_WCHAR = 122,SQL_CONVERT_INTERVAL_DAY_TIME = 123,SQL_CONVERT_INTERVAL_YEAR_MONTH = 124,SQL_CONVERT_WLONGVARCHAR = 125,SQL_CONVERT_WVARCHAR = 126,SQL_CREATE_ASSERTION = 127,SQL_CREATE_CHARACTER_SET = 128,SQL_CREATE_COLLATION = 129,SQL_CREATE_DOMAIN = 130,SQL_CREATE_SCHEMA = 131,SQL_CREATE_TABLE = 132,SQL_CREATE_TRANSLATION = 133,SQL_CREATE_VIEW = 134,SQL_DRIVER_HDESC = 135,SQL_DROP_ASSERTION = 136,SQL_DROP_CHARACTER_SET = 137,SQL_DROP_COLLATION = 138,SQL_DROP_DOMAIN = 139,SQL_DROP_SCHEMA = 140,SQL_DROP_TABLE = 141,SQL_DROP_TRANSLATION = 142,SQL_DROP_VIEW = 143,SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144,SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147,SQL_INDEX_KEYWORDS = 148,SQL_INFO_SCHEMA_VIEWS = 149,SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150,SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151,SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022,SQL_ODBC_INTERFACE_CONFORMANCE = 152,SQL_PARAM_ARRAY_ROW_COUNTS = 153,SQL_PARAM_ARRAY_SELECTS = 154,SQL_SCHEMA_TERM = 39,SQL_SCHEMA_USAGE = 91,SQL_SQL92_DATETIME_FUNCTIONS = 155,SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156,SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157,SQL_SQL92_GRANT = 158,SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159,SQL_SQL92_PREDICATES = 160,SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161,SQL_SQL92_REVOKE = 162,SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163,SQL_SQL92_STRING_FUNCTIONS = 164,SQL_SQL92_VALUE_EXPRESSIONS = 165,SQL_STANDARD_CLI_CONFORMANCE = 166,SQL_STATIC_CURSOR_ATTRIBUTES1 = 167,SQL_STATIC_CURSOR_ATTRIBUTES2 = 168,SQL_AGGREGATE_FUNCTIONS = 169,SQL_DDL_INDEX = 170,SQL_DM_VER = 171,SQL_INSERT_STATEMENT = 172,SQL_UNION_STATEMENT = 96,SQL_DTC_TRANSITION_COST = 1750,SQL_AT_ADD_COLUMN_SINGLE = 32,SQL_AT_ADD_COLUMN_DEFAULT = 64,SQL_AT_ADD_COLUMN_COLLATION = 128,SQL_AT_SET_COLUMN_DEFAULT = 256,SQL_AT_DROP_COLUMN_DEFAULT = 512,SQL_AT_DROP_COLUMN_CASCADE = 1024,SQL_AT_DROP_COLUMN_RESTRICT = 2048,SQL_AT_ADD_TABLE_CONSTRAINT = 4096,SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192,SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384,SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768,SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536,SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072,SQL_AT_CONSTRAINT_DEFERRABLE = 262144,SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288,SQL_CVT_CHAR = 1,SQL_CVT_NUMERIC = 2,SQL_CVT_DECIMAL = 4,SQL_CVT_INTEGER = 8,SQL_CVT_SMALLINT = 16,SQL_CVT_FLOAT = 32,SQL_CVT_REAL = 64,SQL_CVT_DOUBLE = 128,SQL_CVT_VARCHAR = 256,SQL_CVT_LONGVARCHAR = 512,SQL_CVT_BINARY = 1024,SQL_CVT_VARBINARY = 2048,SQL_CVT_BIT = 4096,SQL_CVT_TINYINT = 8192,SQL_CVT_BIGINT = 16384,SQL_CVT_DATE = 32768,SQL_CVT_TIME = 65536,SQL_CVT_TIMESTAMP = 131072,SQL_CVT_LONGVARBINARY = 262144,SQL_CVT_INTERVAL_YEAR_MONTH = 524288,SQL_CVT_INTERVAL_DAY_TIME = 1048576,SQL_CVT_WCHAR = 2097152,SQL_CVT_WLONGVARCHAR = 4194304,SQL_CVT_WVARCHAR = 8388608,SQL_FN_CVT_CONVERT = 1,SQL_FN_CVT_CAST = 2,SQL_FN_STR_CONCAT = 1,SQL_FN_STR_INSERT = 2,SQL_FN_STR_LEFT = 4,SQL_FN_STR_LTRIM = 8,SQL_FN_STR_LENGTH = 16,SQL_FN_STR_LOCATE = 32,SQL_FN_STR_LCASE = 64,SQL_FN_STR_REPEAT = 128,SQL_FN_STR_REPLACE = 256,SQL_FN_STR_RIGHT = 512,SQL_FN_STR_RTRIM = 1024,SQL_FN_STR_SUBSTRING = 2048,SQL_FN_STR_UCASE = 4096,SQL_FN_STR_ASCII = 8192,SQL_FN_STR_CHAR = 16384,SQL_FN_STR_DIFFERENCE = 32768,SQL_FN_STR_LOCATE_2 = 65536,SQL_FN_STR_SOUNDEX = 131072,SQL_FN_STR_SPACE = 262144,SQL_FN_STR_BIT_LENGTH = 524288,SQL_FN_STR_CHAR_LENGTH = 1048576,SQL_FN_STR_CHARACTER_LENGTH = 2097152,SQL_FN_STR_OCTET_LENGTH = 4194304,SQL_FN_STR_POSITION = 8388608,SQL_SSF_CONVERT = 1,SQL_SSF_LOWER = 2,SQL_SSF_UPPER = 4,SQL_SSF_SUBSTRING = 8,SQL_SSF_TRANSLATE = 16,SQL_SSF_TRIM_BOTH = 32,SQL_SSF_TRIM_LEADING = 64,SQL_SSF_TRIM_TRAILING = 128,SQL_FN_NUM_ABS = 1,SQL_FN_NUM_ACOS = 2,SQL_FN_NUM_ASIN = 4,SQL_FN_NUM_ATAN = 8,SQL_FN_NUM_ATAN2 = 16,SQL_FN_NUM_CEILING = 32,SQL_FN_NUM_COS = 64,SQL_FN_NUM_COT = 128,SQL_FN_NUM_EXP = 256,SQL_FN_NUM_FLOOR = 512,SQL_FN_NUM_LOG = 1024,SQL_FN_NUM_MOD = 2048,SQL_FN_NUM_SIGN = 4096,SQL_FN_NUM_SIN = 8192,SQL_FN_NUM_SQRT = 16384,SQL_FN_NUM_TAN = 32768,SQL_FN_NUM_PI = 65536,SQL_FN_NUM_RAND = 131072,SQL_FN_NUM_DEGREES = 262144,SQL_FN_NUM_LOG10 = 524288,SQL_FN_NUM_POWER = 1048576,SQL_FN_NUM_RADIANS = 2097152,SQL_FN_NUM_ROUND = 4194304,SQL_FN_NUM_TRUNCATE = 8388608,SQL_SNVF_BIT_LENGTH = 1,SQL_SNVF_CHAR_LENGTH = 2,SQL_SNVF_CHARACTER_LENGTH = 4,SQL_SNVF_EXTRACT = 8,SQL_SNVF_OCTET_LENGTH = 16,SQL_SNVF_POSITION = 32,SQL_FN_TD_NOW = 1,SQL_FN_TD_CURDATE = 2,SQL_FN_TD_DAYOFMONTH = 4,SQL_FN_TD_DAYOFWEEK = 8,SQL_FN_TD_DAYOFYEAR = 16,SQL_FN_TD_MONTH = 32,SQL_FN_TD_QUARTER = 64,SQL_FN_TD_WEEK = 128,SQL_FN_TD_YEAR = 256,SQL_FN_TD_CURTIME = 512,SQL_FN_TD_HOUR = 1024,SQL_FN_TD_MINUTE = 2048,SQL_FN_TD_SECOND = 4096,SQL_FN_TD_TIMESTAMPADD = 8192,SQL_FN_TD_TIMESTAMPDIFF = 16384,SQL_FN_TD_DAYNAME = 32768,SQL_FN_TD_MONTHNAME = 65536,SQL_FN_TD_CURRENT_DATE = 131072,SQL_FN_TD_CURRENT_TIME = 262144,SQL_FN_TD_CURRENT_TIMESTAMP = 524288,SQL_FN_TD_EXTRACT = 1048576,SQL_SDF_CURRENT_DATE = 1,SQL_SDF_CURRENT_TIME = 2,SQL_SDF_CURRENT_TIMESTAMP = 4,SQL_FN_SYS_USERNAME = 1,SQL_FN_SYS_DBNAME = 2,SQL_FN_SYS_IFNULL = 4,SQL_FN_TSI_FRAC_SECOND = 1,SQL_FN_TSI_SECOND = 2,SQL_FN_TSI_MINUTE = 4,SQL_FN_TSI_HOUR = 8,SQL_FN_TSI_DAY = 16,SQL_FN_TSI_WEEK = 32,SQL_FN_TSI_MONTH = 64,SQL_FN_TSI_QUARTER = 128,SQL_FN_TSI_YEAR = 256,SQL_CA1_NEXT = 1,SQL_CA1_ABSOLUTE = 2,SQL_CA1_RELATIVE = 4,SQL_CA1_BOOKMARK = 8,SQL_CA1_LOCK_NO_CHANGE = 64,SQL_CA1_LOCK_EXCLUSIVE = 128,SQL_CA1_LOCK_UNLOCK = 256,SQL_CA1_POS_POSITION = 512,SQL_CA1_POS_UPDATE = 1024,SQL_CA1_POS_DELETE = 2048,SQL_CA1_POS_REFRESH = 4096,SQL_CA1_POSITIONED_UPDATE = 8192,SQL_CA1_POSITIONED_DELETE = 16384,SQL_CA1_SELECT_FOR_UPDATE = 32768,SQL_CA1_BULK_ADD = 65536,SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072,SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144,SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288,SQL_CA2_READ_ONLY_CONCURRENCY = 1,SQL_CA2_LOCK_CONCURRENCY = 2,SQL_CA2_OPT_ROWVER_CONCURRENCY = 4,SQL_CA2_OPT_VALUES_CONCURRENCY = 8,SQL_CA2_SENSITIVITY_ADDITIONS = 16,SQL_CA2_SENSITIVITY_DELETIONS = 32,SQL_CA2_SENSITIVITY_UPDATES = 64,SQL_CA2_MAX_ROWS_SELECT = 128,SQL_CA2_MAX_ROWS_INSERT = 256,SQL_CA2_MAX_ROWS_DELETE = 512,SQL_CA2_MAX_ROWS_UPDATE = 1024,SQL_CA2_MAX_ROWS_CATALOG = 2048,SQL_CA2_MAX_ROWS_AFFECTS_ALL = 3968,SQL_CA2_CRC_EXACT = 4096,SQL_CA2_CRC_APPROXIMATE = 8192,SQL_CA2_SIMULATE_NON_UNIQUE = 16384,SQL_CA2_SIMULATE_TRY_UNIQUE = 32768,SQL_CA2_SIMULATE_UNIQUE = 65536,SQL_OAC_NONE = 0,SQL_OAC_LEVEL1 = 1,SQL_OAC_LEVEL2 = 2,SQL_OSCC_NOT_COMPLIANT = 0,SQL_OSCC_COMPLIANT = 1,SQL_OSC_MINIMUM = 0,SQL_OSC_CORE = 1,SQL_OSC_EXTENDED = 2,SQL_CB_NULL = 0,SQL_CB_NON_NULL = 1,SQL_SO_FORWARD_ONLY = 1,SQL_SO_KEYSET_DRIVEN = 2,SQL_SO_DYNAMIC = 4,SQL_SO_MIXED = 8,SQL_SO_STATIC = 16,SQL_FD_FETCH_BOOKMARK = 128,SQL_CN_NONE = 0,SQL_CN_DIFFERENT = 1,SQL_CN_ANY = 2,SQL_NNC_NULL = 0,SQL_NNC_NON_NULL = 1,SQL_NC_START = 2,SQL_NC_END = 4,SQL_FILE_NOT_SUPPORTED = 0,SQL_FILE_TABLE = 1,SQL_FILE_QUALIFIER = 2,SQL_FILE_CATALOG = 2,SQL_GD_BLOCK = 4,SQL_GD_BOUND = 8,SQL_PS_POSITIONED_DELETE = 1,SQL_PS_POSITIONED_UPDATE = 2,SQL_PS_SELECT_FOR_UPDATE = 4,SQL_GB_NOT_SUPPORTED = 0,SQL_GB_GROUP_BY_EQUALS_SELECT = 1,SQL_GB_GROUP_BY_CONTAINS_SELECT = 2,SQL_GB_NO_RELATION = 3,SQL_GB_COLLATE = 4,SQL_OU_DML_STATEMENTS = 1,SQL_OU_PROCEDURE_INVOCATION = 2,SQL_OU_TABLE_DEFINITION = 4,SQL_OU_INDEX_DEFINITION = 8,SQL_OU_PRIVILEGE_DEFINITION = 16,SQL_SU_DML_STATEMENTS = 1,SQL_SU_PROCEDURE_INVOCATION = 2,SQL_SU_TABLE_DEFINITION = 4,SQL_SU_INDEX_DEFINITION = 8,SQL_SU_PRIVILEGE_DEFINITION = 16,SQL_QU_DML_STATEMENTS = 1,SQL_QU_PROCEDURE_INVOCATION = 2,SQL_QU_TABLE_DEFINITION = 4,SQL_QU_INDEX_DEFINITION = 8,SQL_QU_PRIVILEGE_DEFINITION = 16,SQL_CU_DML_STATEMENTS = 1,SQL_CU_PROCEDURE_INVOCATION = 2,SQL_CU_TABLE_DEFINITION = 4,SQL_CU_INDEX_DEFINITION = 8,SQL_CU_PRIVILEGE_DEFINITION = 16,SQL_SQ_COMPARISON = 1,SQL_SQ_EXISTS = 2,SQL_SQ_IN = 4,SQL_SQ_QUANTIFIED = 8,SQL_SQ_CORRELATED_SUBQUERIES = 16,SQL_U_UNION = 1,SQL_U_UNION_ALL = 2,SQL_BP_CLOSE = 1,SQL_BP_DELETE = 2,SQL_BP_DROP = 4,SQL_BP_TRANSACTION = 8,SQL_BP_UPDATE = 16,SQL_BP_OTHER_HSTMT = 32,SQL_BP_SCROLL = 64,SQL_SS_ADDITIONS = 1,SQL_SS_DELETIONS = 2,SQL_SS_UPDATES = 4,SQL_CV_CREATE_VIEW = 1,SQL_CV_CHECK_OPTION = 2,SQL_CV_CASCADED = 4,SQL_CV_LOCAL = 8,SQL_LCK_NO_CHANGE = 1,SQL_LCK_EXCLUSIVE = 2,SQL_LCK_UNLOCK = 4,SQL_POS_POSITION = 1,SQL_POS_REFRESH = 2,SQL_POS_UPDATE = 4,SQL_POS_DELETE = 8,SQL_POS_ADD = 16,SQL_QL_START = 1,SQL_QL_END = 2,SQL_AF_AVG = 1,SQL_AF_COUNT = 2,SQL_AF_MAX = 4,SQL_AF_MIN = 8,SQL_AF_SUM = 16,SQL_AF_DISTINCT = 32,SQL_AF_ALL = 64,SQL_SC_SQL92_ENTRY = 1,SQL_SC_FIPS127_2_TRANSITIONAL = 2,SQL_SC_SQL92_INTERMEDIATE = 4,SQL_SC_SQL92_FULL = 8,SQL_DL_SQL92_DATE = 1,SQL_DL_SQL92_TIME = 2,SQL_DL_SQL92_TIMESTAMP = 4,SQL_DL_SQL92_INTERVAL_YEAR = 8,SQL_DL_SQL92_INTERVAL_MONTH = 16,SQL_DL_SQL92_INTERVAL_DAY = 32,SQL_DL_SQL92_INTERVAL_HOUR = 64,SQL_DL_SQL92_INTERVAL_MINUTE = 128,SQL_DL_SQL92_INTERVAL_SECOND = 256,SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512,SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024,SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048,SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096,SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192,SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384,SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768,SQL_CL_START = 1,SQL_CL_END = 2,SQL_BRC_PROCEDURES = 1,SQL_BRC_EXPLICIT = 2,SQL_BRC_ROLLED_UP = 4,SQL_BS_SELECT_EXPLICIT = 1,SQL_BS_ROW_COUNT_EXPLICIT = 2,SQL_BS_SELECT_PROC = 4,SQL_BS_ROW_COUNT_PROC = 8,SQL_PARC_BATCH = 1,SQL_PARC_NO_BATCH = 2,SQL_PAS_BATCH = 1,SQL_PAS_NO_BATCH = 2,SQL_PAS_NO_SELECT = 3,SQL_IK_NONE = 0,SQL_IK_ASC = 1,SQL_IK_DESC = 2,SQL_IK_ALL = 3,SQL_ISV_ASSERTIONS = 1,SQL_ISV_CHARACTER_SETS = 2,SQL_ISV_CHECK_CONSTRAINTS = 4,SQL_ISV_COLLATIONS = 8,SQL_ISV_COLUMN_DOMAIN_USAGE = 16,SQL_ISV_COLUMN_PRIVILEGES = 32,SQL_ISV_COLUMNS = 64,SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128,SQL_ISV_CONSTRAINT_TABLE_USAGE = 256,SQL_ISV_DOMAIN_CONSTRAINTS = 512,SQL_ISV_DOMAINS = 1024,SQL_ISV_KEY_COLUMN_USAGE = 2048,SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096,SQL_ISV_SCHEMATA = 8192,SQL_ISV_SQL_LANGUAGES = 16384,SQL_ISV_TABLE_CONSTRAINTS = 32768,SQL_ISV_TABLE_PRIVILEGES = 65536,SQL_ISV_TABLES = 131072,SQL_ISV_TRANSLATIONS = 262144,SQL_ISV_USAGE_PRIVILEGES = 524288,SQL_ISV_VIEW_COLUMN_USAGE = 1048576,SQL_ISV_VIEW_TABLE_USAGE = 2097152,SQL_ISV_VIEWS = 4194304,SQL_AD_CONSTRAINT_NAME_DEFINITION = 1,SQL_AD_ADD_DOMAIN_CONSTRAINT = 2,SQL_AD_DROP_DOMAIN_CONSTRAINT = 4,SQL_AD_ADD_DOMAIN_DEFAULT = 8,SQL_AD_DROP_DOMAIN_DEFAULT = 16,SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128,SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CS_CREATE_SCHEMA = 1,SQL_CS_AUTHORIZATION = 2,SQL_CS_DEFAULT_CHARACTER_SET = 4,SQL_CTR_CREATE_TRANSLATION = 1,SQL_CA_CREATE_ASSERTION = 1,SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16,SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32,SQL_CA_CONSTRAINT_DEFERRABLE = 64,SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128,SQL_CCS_CREATE_CHARACTER_SET = 1,SQL_CCS_COLLATE_CLAUSE = 2,SQL_CCS_LIMITED_COLLATION = 4,SQL_CCOL_CREATE_COLLATION = 1,SQL_CDO_CREATE_DOMAIN = 1,SQL_CDO_DEFAULT = 2,SQL_CDO_CONSTRAINT = 4,SQL_CDO_COLLATION = 8,SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16,SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CDO_CONSTRAINT_DEFERRABLE = 128,SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CT_CREATE_TABLE = 1,SQL_CT_COMMIT_PRESERVE = 2,SQL_CT_COMMIT_DELETE = 4,SQL_CT_GLOBAL_TEMPORARY = 8,SQL_CT_LOCAL_TEMPORARY = 16,SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CT_CONSTRAINT_DEFERRABLE = 128,SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CT_COLUMN_CONSTRAINT = 512,SQL_CT_COLUMN_DEFAULT = 1024,SQL_CT_COLUMN_COLLATION = 2048,SQL_CT_TABLE_CONSTRAINT = 4096,SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192,SQL_DI_CREATE_INDEX = 1,SQL_DI_DROP_INDEX = 2,SQL_DC_DROP_COLLATION = 1,SQL_DD_DROP_DOMAIN = 1,SQL_DD_RESTRICT = 2,SQL_DD_CASCADE = 4,SQL_DS_DROP_SCHEMA = 1,SQL_DS_RESTRICT = 2,SQL_DS_CASCADE = 4,SQL_DCS_DROP_CHARACTER_SET = 1,SQL_DA_DROP_ASSERTION = 1,SQL_DT_DROP_TABLE = 1,SQL_DT_RESTRICT = 2,SQL_DT_CASCADE = 4,SQL_DTR_DROP_TRANSLATION = 1,SQL_DV_DROP_VIEW = 1,SQL_DV_RESTRICT = 2,SQL_DV_CASCADE = 4,SQL_IS_INSERT_LITERALS = 1,SQL_IS_INSERT_SEARCHED = 2,SQL_IS_SELECT_INTO = 4,SQL_OIC_CORE = 1,SQL_OIC_LEVEL1 = 2,SQL_OIC_LEVEL2 = 3,SQL_SFKD_CASCADE = 1,SQL_SFKD_NO_ACTION = 2,SQL_SFKD_SET_DEFAULT = 4,SQL_SFKD_SET_NULL = 8,SQL_SFKU_CASCADE = 1,SQL_SFKU_NO_ACTION = 2,SQL_SFKU_SET_DEFAULT = 4,SQL_SFKU_SET_NULL = 8,SQL_SG_USAGE_ON_DOMAIN = 1,SQL_SG_USAGE_ON_CHARACTER_SET = 2,SQL_SG_USAGE_ON_COLLATION = 4,SQL_SG_USAGE_ON_TRANSLATION = 8,SQL_SG_WITH_GRANT_OPTION = 16,SQL_SG_DELETE_TABLE = 32,SQL_SG_INSERT_TABLE = 64,SQL_SG_INSERT_COLUMN = 128,SQL_SG_REFERENCES_TABLE = 256,SQL_SG_REFERENCES_COLUMN = 512,SQL_SG_SELECT_TABLE = 1024,SQL_SG_UPDATE_TABLE = 2048,SQL_SG_UPDATE_COLUMN = 4096,SQL_SP_EXISTS = 1,SQL_SP_ISNOTNULL = 2,SQL_SP_ISNULL = 4,SQL_SP_MATCH_FULL = 8,SQL_SP_MATCH_PARTIAL = 16,SQL_SP_MATCH_UNIQUE_FULL = 32,SQL_SP_MATCH_UNIQUE_PARTIAL = 64,SQL_SP_OVERLAPS = 128,SQL_SP_UNIQUE = 256,SQL_SP_LIKE = 512,SQL_SP_IN = 1024,SQL_SP_BETWEEN = 2048,SQL_SP_COMPARISON = 4096,SQL_SP_QUANTIFIED_COMPARISON = 8192,SQL_SRJO_CORRESPONDING_CLAUSE = 1,SQL_SRJO_CROSS_JOIN = 2,SQL_SRJO_EXCEPT_JOIN = 4,SQL_SRJO_FULL_OUTER_JOIN = 8,SQL_SRJO_INNER_JOIN = 16,SQL_SRJO_INTERSECT_JOIN = 32,SQL_SRJO_LEFT_OUTER_JOIN = 64,SQL_SRJO_NATURAL_JOIN = 128,SQL_SRJO_RIGHT_OUTER_JOIN = 256,SQL_SRJO_UNION_JOIN = 512,SQL_SR_USAGE_ON_DOMAIN = 1,SQL_SR_USAGE_ON_CHARACTER_SET = 2,SQL_SR_USAGE_ON_COLLATION = 4,SQL_SR_USAGE_ON_TRANSLATION = 8,SQL_SR_GRANT_OPTION_FOR = 16,SQL_SR_CASCADE = 32,SQL_SR_RESTRICT = 64,SQL_SR_DELETE_TABLE = 128,SQL_SR_INSERT_TABLE = 256,SQL_SR_INSERT_COLUMN = 512,SQL_SR_REFERENCES_TABLE = 1024,SQL_SR_REFERENCES_COLUMN = 2048,SQL_SR_SELECT_TABLE = 4096,SQL_SR_UPDATE_TABLE = 8192,SQL_SR_UPDATE_COLUMN = 16384,SQL_SRVC_VALUE_EXPRESSION = 1,SQL_SRVC_NULL = 2,SQL_SRVC_DEFAULT = 4,SQL_SRVC_ROW_SUBQUERY = 8,SQL_SVE_CASE = 1,SQL_SVE_CAST = 2,SQL_SVE_COALESCE = 4,SQL_SVE_NULLIF = 8,SQL_SCC_XOPEN_CLI_VERSION1 = 1,SQL_SCC_ISO92_CLI = 2,SQL_US_UNION = 1,SQL_US_UNION_ALL = 2,SQL_DTC_ENLIST_EXPENSIVE = 1,SQL_DTC_UNENLIST_EXPENSIVE = 2,SQL_FETCH_FIRST_USER = 31,SQL_FETCH_FIRST_SYSTEM = 32,SQL_ENTIRE_ROWSET = 0,SQL_POSITION = 0,SQL_REFRESH = 1,SQL_UPDATE = 2,SQL_DELETE = 3,SQL_ADD = 4,SQL_SETPOS_MAX_OPTION_VALUE = 4,SQL_UPDATE_BY_BOOKMARK = 5,SQL_DELETE_BY_BOOKMARK = 6,SQL_FETCH_BY_BOOKMARK = 7,SQL_LOCK_NO_CHANGE = 0,SQL_LOCK_EXCLUSIVE = 1,SQL_LOCK_UNLOCK = 2,SQL_SETPOS_MAX_LOCK_VALUE = 2,SQL_BEST_ROWID = 1,SQL_ROWVER = 2,SQL_PC_NOT_PSEUDO = 1,SQL_QUICK = 0,SQL_ENSURE = 1,SQL_TABLE_STAT = 0,SQL_DRIVER_NOPROMPT = 0,SQL_DRIVER_COMPLETE = 1,SQL_DRIVER_PROMPT = 2,SQL_DRIVER_COMPLETE_REQUIRED = 3,SQL_FETCH_BOOKMARK = 8,SQL_ROW_SUCCESS = 0,SQL_ROW_DELETED = 1,SQL_ROW_UPDATED = 2,SQL_ROW_NOROW = 3,SQL_ROW_ADDED = 4,SQL_ROW_ERROR = 5,SQL_ROW_SUCCESS_WITH_INFO = 6,SQL_ROW_PROCEED = 0,SQL_ROW_IGNORE = 1,SQL_PARAM_SUCCESS = 0,SQL_PARAM_SUCCESS_WITH_INFO = 6,SQL_PARAM_ERROR = 5,SQL_PARAM_UNUSED = 7,SQL_PARAM_DIAG_UNAVAILABLE = 1,SQL_PARAM_PROCEED = 0,SQL_PARAM_IGNORE = 1,SQL_CASCADE = 0,SQL_RESTRICT = 1,SQL_SET_NULL = 2,SQL_NO_ACTION = 3,SQL_SET_DEFAULT = 4,SQL_INITIALLY_DEFERRED = 5,SQL_INITIALLY_IMMEDIATE = 6,SQL_NOT_DEFERRABLE = 7,SQL_PARAM_TYPE_UNKNOWN = 0,SQL_PARAM_INPUT = 1,SQL_PARAM_INPUT_OUTPUT = 2,SQL_RESULT_COL = 3,SQL_PARAM_OUTPUT = 4,SQL_RETURN_VALUE = 5,SQL_PT_UNKNOWN = 0,SQL_PT_PROCEDURE = 1,SQL_PT_FUNCTION = 2,SQL_DATABASE_NAME = 16,SQL_FD_FETCH_PREV = 8,SQL_FETCH_PREV = 4,SQL_CONCUR_TIMESTAMP = 3,SQL_SCCO_OPT_TIMESTAMP = 4,SQL_CC_DELETE = 0,SQL_CR_DELETE = 0,SQL_CC_CLOSE = 1,SQL_CR_CLOSE = 1,SQL_CC_PRESERVE = 2,SQL_CR_PRESERVE = 2,SQL_SCROLL_FORWARD_ONLY = 0,SQL_SCROLL_KEYSET_DRIVEN = -1,SQL_SCROLL_DYNAMIC = -2,SQL_SCROLL_STATIC = -3,};
enum MACRO_SRCERASE {SRCERASE = 0x440328,};
enum MACRO_SRCPAINT {SRCPAINT = 0xEE0086,};
enum MACRO_SRVERROR {SRVERROR = 170,};
enum MACRO_SRVIMAGE {SRVIMAGE = 34,};
enum MACRO_SRVLOGIN {SRVLOGIN = 173,};
enum MACRO_SRVMONEY {SRVMONEY = 60,};
enum MACRO_SRVORDER {SRVORDER = 169,};
enum MACRO_STANDARD {STANDARD_RIGHTS_REQUIRED = 0xF0000,STANDARD_RIGHTS_READ = 0x20000,STANDARD_RIGHTS_WRITE = 0x20000,STANDARD_RIGHTS_EXECUTE = 0x20000,STANDARD_RIGHTS_ALL = 0x1F0000,};
enum MACRO_STARTDOC {STARTDOC = 10,};
enum MACRO_STATSOPT {STATSOPT_CLR = 1,};
enum MACRO_STLUINAC {STLUINAC = 17,};
enum MACRO_STLUREAC {STLUREAC = 6,};
enum MACRO_STNOSESS {STNOSESS = 1,STLINERR = 2,};
enum MACRO_STOPBITS {STOPBITS_10 = 0x1,STOPBITS_15 = 0x2,STOPBITS_20 = 0x4,};
enum MACRO_STRESRCE {STRESRCE = 4,};
enum MACRO_SUBSINFO {SUBSINFO_ALLFLAGS = 0xEF7F,};
enum MACRO_SUPPORTS {SUPPORTS_REMOTE_ADMIN_PROTOCOL = 0x2,SUPPORTS_RPC = 0x4,SUPPORTS_SAM_PROTOCOL = 0x8,SUPPORTS_UNICODE = 0x10,SUPPORTS_LOCAL = 0x20,SUPPORTS_ANY = 0xFFFFFFFF,};
enum MACRO_SUPPRESS {SUPPRESS_UI = 0x1,};
enum MACRO_S_RATING {S_RATING_ALLOW = 0,S_RATING_DENY = 1,S_RATING_FOUND = 2,};
enum MACRO_TERADATA {TERADATA = 15,INFORMIX = 16,};
enum MACRO_TEXTCAPS {TEXTCAPS = 34,};
enum MACRO_TH_QUERY {TH_QUERY = 0,TH_FORCE = 1,TH_SUGGEST = 2,};
enum MACRO_TIMECODE {TIMECODE_RATE_30DROP = 0,TIMECODE_SMPTE_BINARY_GROUP = 7,TIMECODE_SMPTE_COLOR_FRAME = 8,};
enum MACRO_TINYBIND {TINYBIND = 1,SMALLBIND = 2,};
enum MACRO_TMNOWAIT {TMNOWAIT = 0x10000000,};
enum MACRO_TMRESUME {TMRESUME = 0x8000000,};
enum MACRO_TRANSFER {TRANSFER_COPYTO = 1,TRANSFER_COPYPROPS = 2,TRANSFER_COPYMESSAGES = 3,TRANSFER_COPYFOLDER = 4,};
enum MACRO_TRUNCATE {TRUNCATE_EXISTING = 5,};
enum MACRO_TT_NOIND {TT_NOIND = 0x0,TT_CBR = 0x4,TT_VBR = 0x6,};
enum MACRO_UNDEFINE {UNDEFINE_PRIMARY = 0xC,UNDEFINE_ALTERNATE = 0xD,};
enum MACRO_URLCACHE {URLCACHE_FIND_DEFAULT_FILTER = 3145781,};
enum MACRO_URLOSTRM {URLOSTRM_USECACHEDCOPY_ONLY = 0x1,URLOSTRM_USECACHEDCOPY = 0x2,URLOSTRM_GETNEWESTVERSION = 0x3,};
enum MACRO_V86FLAGS {V86FLAGS_CARRY = 0x1,V86FLAGS_PARITY = 0x4,V86FLAGS_AUXCARRY = 0x10,V86FLAGS_ZERO = 0x40,V86FLAGS_SIGN = 0x80,V86FLAGS_TRACE = 0x100,V86FLAGS_INTERRUPT = 0x200,V86FLAGS_DIRECTION = 0x400,V86FLAGS_OVERFLOW = 0x800,V86FLAGS_IOPL = 0x3000,V86FLAGS_IOPL_BITS = 0x12,V86FLAGS_RESUME = 0x10000,V86FLAGS_V86 = 0x20000,V86FLAGS_ALIGNMENT = 0x40000,};
enum MACRO_VARIABLE {VARIABLE_DIM = 1,};
enum MACRO_VCSTATUS {VCSTATUS_NEXT = 0x1,VCSTATUS_PREV = 0x2,VCSTATUS_MODAL = 0x4,VCSTATUS_INTERACTIVE = 0x8,VCSTATUS_READONLY = 0x10,VCSTATUS_DELETE = 0x10000,VCSTATUS_COPY = 0x20000,VCSTATUS_MOVE = 0x40000,VCSTATUS_SUBMIT = 0x80000,VCSTATUS_DELETE_IS_MOVE = 0x100000,VCSTATUS_SAVE = 0x200000,VCSTATUS_NEW_MESSAGE = 0x400000,};
enum MACRO_VDMEVENT {VDMEVENT_NEEDS_INTERACTIVE = 0x8000,VDMEVENT_VERBOSE = 0x4000,VDMEVENT_PE = 0x2000,VDMEVENT_ALLFLAGS = 0xE000,VDMEVENT_V86 = 0x1,VDMEVENT_PM16 = 0x2,};
enum MACRO_VERTSIZE {VERTSIZE = 6,HORZRES = 8,};
enum MACRO_VNSPROTO {VNSPROTO_IPC = 1,VNSPROTO_RELIABLE_IPC = 2,VNSPROTO_SPP = 3,};
enum MACRO_VREFRESH {VREFRESH = 116,};
enum MACRO_WAVECAPS {WAVECAPS_PITCH = 0x1,WAVECAPS_PLAYBACKRATE = 0x2,WAVECAPS_VOLUME = 0x4,WAVECAPS_LRVOLUME = 0x8,WAVECAPS_SYNC = 0x10,WAVECAPS_SAMPLEACCURATE = 0x20,WAVECAPS_DIRECTSOUND = 0x40,};
enum MACRO_WBREAK_E {WBREAK_E_QUERY_ONLY = 0x80041782,WBREAK_E_BUFFER_TOO_SMALL = 0x80041783,};
enum MACRO_WGL_SWAP {WGL_SWAP_MAIN_PLANE = 0x1,WGL_SWAP_OVERLAY1 = 0x2,WGL_SWAP_OVERLAY2 = 0x4,WGL_SWAP_OVERLAY3 = 0x8,WGL_SWAP_OVERLAY4 = 0x10,WGL_SWAP_OVERLAY5 = 0x20,WGL_SWAP_OVERLAY6 = 0x40,WGL_SWAP_OVERLAY7 = 0x80,WGL_SWAP_OVERLAY8 = 0x100,WGL_SWAP_OVERLAY9 = 0x200,WGL_SWAP_OVERLAY10 = 0x400,WGL_SWAP_OVERLAY11 = 0x800,WGL_SWAP_OVERLAY12 = 0x1000,WGL_SWAP_OVERLAY13 = 0x2000,WGL_SWAP_OVERLAY14 = 0x4000,WGL_SWAP_OVERLAY15 = 0x8000,WGL_SWAP_UNDERLAY1 = 0x10000,WGL_SWAP_UNDERLAY2 = 0x20000,WGL_SWAP_UNDERLAY3 = 0x40000,WGL_SWAP_UNDERLAY4 = 0x80000,WGL_SWAP_UNDERLAY5 = 0x100000,WGL_SWAP_UNDERLAY6 = 0x200000,WGL_SWAP_UNDERLAY7 = 0x400000,WGL_SWAP_UNDERLAY8 = 0x800000,WGL_SWAP_UNDERLAY9 = 0x1000000,WGL_SWAP_UNDERLAY10 = 0x2000000,WGL_SWAP_UNDERLAY11 = 0x4000000,WGL_SWAP_UNDERLAY12 = 0x8000000,WGL_SWAP_UNDERLAY13 = 0x10000000,WGL_SWAP_UNDERLAY14 = 0x20000000,WGL_SWAP_UNDERLAY15 = 0x40000000,WGL_SWAPMULTIPLE_MAX = 0x10,};
enum MACRO_WINEVENT {WINEVENT_OUTOFCONTEXT = 0x0,WINEVENT_SKIPOWNTHREAD = 0x1,WINEVENT_SKIPOWNPROCESS = 0x2,WINEVENT_INCONTEXT = 0x4,};
enum MACRO_WKSTAJOB {WKSTAJOB_TGT_QUERY = 1,WKSTAJOB_TGT_MACHGROUP = 2,WKSTAJOB_TGT_MACHPATH = 3,WKSTAJOB_DIST_EXISTING = 1,WKSTAJOB_DIST_SPECIFIED = 2,WKSTAJOB_SEND_IF_NOT_SENT = 1,WKSTAJOB_SEND_ALWAYS = 2,};
enum MACRO_WSAEBADF {WSAEBADF = 10009,};
enum MACRO_WSAEINTR {WSAEINTR = 10004,};
enum MACRO_WSAELOOP {WSAELOOP = 10062,};
enum MACRO_WSA_FLAG {WSA_FLAG_OVERLAPPED = 0x1,WSA_FLAG_MULTIPOINT_C_ROOT = 0x2,WSA_FLAG_MULTIPOINT_C_LEAF = 0x4,WSA_FLAG_MULTIPOINT_D_ROOT = 0x8,WSA_FLAG_MULTIPOINT_D_LEAF = 0x10,};
enum MACRO__FPCLASS {_FPCLASS_SNAN = 0x1,_FPCLASS_QNAN = 0x2,_FPCLASS_NINF = 0x4,_FPCLASS_NN = 0x8,_FPCLASS_ND = 0x10,_FPCLASS_NZ = 0x20,_FPCLASS_PZ = 0x40,_FPCLASS_PD = 0x80,_FPCLASS_PN = 0x100,_FPCLASS_PINF = 0x200,};
enum MACRO__HEAPEND {_HEAPEND = -5,};
enum MACRO__INFCODE {_INFCODE = 1,_NANCODE = 2,};
enum MACRO__MAX_EXP {_MAX_EXP_DIG = 8,_MAX_INT_DIG = 32,_MAX_SIG_DIG = 36,};
enum MACRO__NSTREAM {_NSTREAM_ = 512,};
enum MACRO___RPCNDR {__RPCNDR_H_VERSION__ = 450,};
enum MACRO_attOwner {attOwner = 0x60000,};
enum MACRO_ckidODML {ckidODML = 1819108463,};
enum MACRO_ctlFirst {ctlFirst = 0x400,};
enum MACRO_hrDiskIO {hrDiskIO = 0xC80003FE,};
enum MACRO_iMAXBITS {iMAXBITS = 8,};
enum MACRO_iSycNull {iSycNull = -1,};
enum MACRO_keNoKeys {keNoKeys = 0x0,keNumKeys = 0x1,keChannelKeys = 0x2,kePageKeys = 0x4,dispidOnIdle = 0xBB9,};
enum MACRO_prioHigh {prioHigh = 1,};
enum MACRO_prioNorm {prioNorm = 2,};
typedef struct tagMCI_PLAY_PARMS MCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS MCI_SEEK_PARMS;
typedef struct _MIDL_STUB_DESC MIDL_STUB_DESC;
typedef struct tagMODULEENTRY32W MODULEENTRY32W;
typedef struct tagMONITORINFOEXA MONITORINFOEXA;
typedef struct tagMONITORINFOEXW MONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT MOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA MOVE_FILE_DATA;
typedef struct tagMPEG1VIDEOINFO MPEG1VIDEOINFO;
typedef struct tagMPEG2VIDEOINFO MPEG2VIDEOINFO;
typedef struct _MPR_PROTOCOL_0 MPR_PROTOCOL_0;
struct MSDAINITIALIZE;
typedef struct tagMSLLHOOKSTRUCT MSLLHOOKSTRUCT;
typedef struct _8A6C4411A6AFE08051239E9D0E609899 MapiFileTagExt;
typedef struct _F6CC20CF8176C211D0C88E599FF300CF MediaLabelInfo;
enum MemberTypeEnum {adMemberUnknown = 0x0,adMemberRegular = 0x1,adMemberAll = 0x2,adMemberMeasure = 0x3,adMemberFormula = 0x4,};
typedef struct tagNEWTEXTMETRICA NEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW NEWTEXTMETRICW;
typedef struct tagNMITEMACTIVATE NMITEMACTIVATE;
typedef struct tagNMLVCUSTOMDRAW NMLVCUSTOMDRAW;
typedef struct tagNMOBJECTNOTIFY NMOBJECTNOTIFY;
typedef struct _NMTBCUSTOMDRAW NMTBCUSTOMDRAW;
typedef struct tagNMTTCUSTOMDRAW NMTTCUSTOMDRAW;
typedef struct tagNMTVCUSTOMDRAW NMTVCUSTOMDRAW;
typedef struct tagCWPRETSTRUCT *NPCWPRETSTRUCT;
typedef struct tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;
typedef struct tWAVEFORMATEX *NPWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;
enum NtmsAccessMask {NTMS_USE_ACCESS = 0x1,NTMS_MODIFY_ACCESS = 0x2,NTMS_CONTROL_ACCESS = 0x4,};
enum NtmsDriveState {NTMS_DRIVESTATE_DISMOUNTED = 0x0,NTMS_DRIVESTATE_MOUNTED = 0x1,NTMS_DRIVESTATE_LOADED = 0x2,NTMS_DRIVESTATE_UNLOADED = 0x5,NTMS_DRIVESTATE_BEING_CLEANED = 0x6,NTMS_DRIVESTATE_DISMOUNTABLE = 0x7,};
enum NtmsMediaState {NTMS_MEDIASTATE_IDLE = 0x0,NTMS_MEDIASTATE_INUSE = 0x1,NTMS_MEDIASTATE_MOUNTED = 0x2,NTMS_MEDIASTATE_LOADED = 0x3,NTMS_MEDIASTATE_UNLOADED = 0x4,NTMS_MEDIASTATE_OPERROR = 0x5,NTMS_MEDIASTATE_OPREQ = 0x6,};
enum NtmsOpreqState {NTMS_OPSTATE_UNKNOWN = 0x0,NTMS_OPSTATE_SUBMITTED = 0x1,NTMS_OPSTATE_ACTIVE = 0x2,NTMS_OPSTATE_INPROGRESS = 0x3,NTMS_OPSTATE_REFUSED = 0x4,NTMS_OPSTATE_COMPLETE = 0x5,};
typedef struct _OSVERSIONINFOA OSVERSIONINFOA;
typedef struct _OSVERSIONINFOW OSVERSIONINFOW;
typedef struct _ACCESS_INFO_0 *PACCESS_INFO_0;
typedef struct _ACCESS_INFO_1 *PACCESS_INFO_1;
typedef struct _ACTION_HEADER *PACTION_HEADER;
typedef struct _ACTRL_ALISTA *PACTRL_ACCESSA;
typedef struct _ACTRL_ALISTW *PACTRL_ACCESSW;
typedef struct _ads_attr_info *PADS_ATTR_INFO;
typedef struct _AE_SESSLOGOFF *PAE_SESSLOGOFF;
typedef IAVIEditStream *PAVIEDITSTREAM;
typedef struct _avifieldindex_chunk *PAVIFIELDINDEX;
typedef struct _BLENDFUNCTION *PBLENDFUNCTION;
typedef struct tagCANDIDATEFORM *PCANDIDATEFORM;
typedef struct tagCANDIDATELIST *PCANDIDATELIST;
typedef struct tagCapDriverCaps *PCAPDRIVERCAPS;
typedef struct _CERT_RDN_ATTR *PCERT_RDN_ATTR;
typedef struct CLUSPROP_LIST *PCLUSPROP_LIST;
typedef struct _CONFIG_INFO_0 *PCONFIG_INFO_0;
typedef struct tagDEBUGHOOKINFO *PDEBUGHOOKINFO;
typedef struct _DISK_GEOMETRY *PDISK_GEOMETRY;
typedef struct tagDRVCONFIGINFO *PDRVCONFIGINFO;
typedef struct DelayLoadInfo *PDelayLoadInfo;
typedef struct tagEMRALPHABLEND *PEMRALPHABLEND;
typedef struct tagEMRGDICOMMENT *PEMRGDICOMMENT;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINE16;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;
typedef struct tagABORTPATH *PEMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT *PEMRSTRETCHBLT;
typedef struct tagEMRFILLPATH *PEMRSTROKEPATH;
typedef struct tagENHMETAHEADER *PENHMETAHEADER;
typedef struct tagENHMETARECORD *PENHMETARECORD;
typedef struct _tagEXTSTACKTRACE *PEXTSTACKTRACE;
typedef struct tagFONTSIGNATURE *PFONTSIGNATURE;
typedef  unsigned char *PFORMAT_STRING;
typedef struct _GRADIENT_RECT *PGRADIENT_RECT;
typedef struct tagGUITHREADINFO *PGUITHREADINFO;
typedef struct _HANDLE_INFO_1 *PHANDLE_INFO_1;
typedef struct tagHARDWAREINPUT *PHARDWAREINPUT;
typedef IActiveScript *PIActiveScript;
typedef struct tag_IDFCHANNELHDR *PIDFCHANNELHDR;
typedef struct _IMAGEHLP_LINE *PIMAGEHLP_LINE;
typedef struct _AAA3FC4CA65A0A79E764CC38F9D92130 *PINTTRACEENTRY;
typedef struct _IPX_INTERFACE *PIPX_INTERFACE;
typedef union _IPX_MIB_INDEX *PIPX_MIB_INDEX;
typedef struct ImgDelayDescr *PImgDelayDescr;
typedef struct _3E8BFD172CC0232DA5E7071EC2A0A89F *PKSNODE_CREATE;
typedef struct _58C2C1BF6568EE28BD9B872E6BA03976 *PKSPIN_CONNECT;
typedef struct tagLASTINPUTINFO *PLASTINPUTINFO;
typedef struct _82F8C43FDAD4693C28E55E9304381917 *PLLC_DLC_PARMS;
typedef struct _30C092ACFDACA2A085242C6994837CA9 *PMCHITTESTINFO;
typedef struct tagMCI_SET_PARMS *PMCI_SET_PARMS;
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE *PMFT_ENUM_DATA;
typedef struct tagMIXERCONTROLA *PMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *PMIXERCONTROLW;
typedef IMLangFontLink *PMLANGFONTLINK;
typedef struct _MODEMSETTINGS *PMODEMSETTINGS;
typedef struct tagMONCONVSTRUCT *PMONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW *PMONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT *PMONLINKSTRUCT;
typedef struct tagMSGBOXPARAMSA *PMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *PMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *PMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *PMULTIKEYHELPW;
typedef struct NDdeShareInfo_tag *PNDDESHAREINFO;
typedef struct _NDR_PIPE_DESC *PNDR_PIPE_DESC;
typedef struct _NETRESOURCE2A *PNETRESOURCE2A;
typedef struct _NETRESOURCE2W *PNETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 *PNMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B *PNMCBEENDEDITW;
typedef struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 *PNMCOMBOBOXEXA;
typedef struct _E76253F876E841F225888AB457FD0286 *PNMCOMBOBOXEXW;
typedef unsigned int POINTER_64_INT;
typedef struct tagOLEUICONVERTA *POLEUICONVERTA;
typedef struct tagOLEUICONVERTW *POLEUICONVERTW;
typedef IOverlayNotify *POVERLAYNOTIFY;
typedef struct pcmwaveformat_tag *PPCMWAVEFORMAT;
typedef struct _PPP_EAP_INPUT *PPPP_EAP_INPUT;
typedef struct _PPP_EAP_OUTPUT PPP_EAP_OUTPUT;
typedef struct _PPP_EAP_PACKET PPP_EAP_PACKET;
typedef struct _PRIVILEGE_SET *PPRIVILEGE_SET;
typedef struct _tagPROCESSORINFO *PPROCESSORINFO;
typedef struct _RECIPIENTINFO *PRECIPIENTINFO;
typedef struct tagREGISTERWORDA *PREGISTERWORDA;
typedef struct tagREGISTERWORDW *PREGISTERWORDW;
typedef struct _RGNDATAHEADER *PRGNDATAHEADER;
typedef struct _PRINTER_INFO_3 PRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 PRINTER_INFO_6;
typedef struct _RIP_IF_CONFIG *PRIP_IF_CONFIG;
typedef struct _RIP_INTERFACE *PRIP_INTERFACE;
typedef struct tagPROCESSENTRY32 PROCESSENTRY32;
typedef struct _PROPSHEETPAGEA PROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW PROPSHEETPAGEW;
typedef struct _PROTOCOL_INFOA PROTOCOL_INFOA;
typedef struct _PROTOCOL_INFOW PROTOCOL_INFOW;
typedef struct _RTM_IPX_ROUTE *PRTM_IPX_ROUTE;
typedef struct _RTR_TOC_ENTRY *PRTR_TOC_ENTRY;
typedef struct _SAP_IF_CONFIG *PSAP_IF_CONFIG;
typedef struct _SAP_INTERFACE *PSAP_INTERFACE;
typedef struct _SCHANNEL_CRED *PSCHANNEL_CRED;
typedef struct tagSCROLLBARINFO *PSCROLLBARINFO;
typedef struct _SERVICE_INFOA *PSERVICE_INFOA;
typedef struct _SERVICE_INFOW *PSERVICE_INFOW;
typedef struct srv_listentry *PSRV_LISTENTRY;
typedef struct srv_queuehead *PSRV_QUEUEHEAD;
typedef struct _STAT_SERVER_0 *PSTAT_SERVER_0;
typedef struct _SecBufferDesc *PSecBufferDesc;
typedef struct _TOKEN_CONTROL *PTOKEN_CONTROL;
typedef struct _PUBLICKEYSTRUC PUBLICKEYSTRUC;
enum PURCHASEACTION {PAGETDETAILS = 0x0,PAPURCHASETOVIEW = 0x1,PAPURCHASETOTAPE = 0x2,PACANCELVIEW = 0x3,PACANCELTAPE = 0x4,PAPREVIEW = 0x5,};
enum PURCHASEREASON {PRSUCCESS = 0x0,PRNOCALLBACK = 0x1,PRNOSUBSCRIBER = 0x2,PRRATING = 0x3,PRSPENDING = 0x4,PRCREDIT = 0x5,PRWRONGCARD = 0x6,PRCARDFULL = 0x7,PRBLOCKED = 0x8,PRBLACKOUT = 0x9,PRTOOLATE = 0xA,PRREDUNDANT = 0xB,PRPPVFAILURE = 0xC,PRBADDATA = 0xD,PRCONTENTION = 0xE,};
enum PURCHASESTATUS {PSVIEWTAKEN = 0x0,PSVIEWCANCELLED = 0x1,PSVIEWREPORTED = 0x2,PSPREVIEWTAKEN = 0x3,PSVIEWAUTHORIZED = 0x4,PSVIEWPURCHASED = 0x5,PSTAPEPURCHASED = 0x6,PSTAPEAUTHORIZED = 0x7,PSTAPETAKEN = 0x8,PSTAPECANCELLED = 0x9,PSTAPEREPORTED = 0xA,PSVIEWAVAILABLE = 0xB,PSTAPEAVAILABLE = 0xC,PSREVIEWAVAILABLE = 0xD,};
typedef struct _WINTRUST_DATA *PWINTRUST_DATA;
typedef struct _8A8B79EBB5E366F38FEADC6BCD47EF14 *PWSH_NBP_TUPLE;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D QOS_OBJECT_HDR;
typedef struct _tagREAD_WRITE_MSR READ_WRITE_MSR;
typedef struct tagREBARBANDINFOA REBARBANDINFOA;
typedef struct tagREBARBANDINFOW REBARBANDINFOW;
typedef struct __MIDL___MIDL_itf_strmif_0074_0005 REGFILTERPINS2;
typedef struct _repastespecial REPASTESPECIAL;
typedef struct _REPL_INFO_1000 REPL_INFO_1000;
typedef struct _REPL_INFO_1001 REPL_INFO_1001;
typedef struct _REPL_INFO_1002 REPL_INFO_1002;
typedef struct _REPL_INFO_1003 REPL_INFO_1003;
typedef struct _RIP_IF_FILTERS RIP_IF_FILTERS;
typedef struct __MIDL_TriggerPublicRPC_0001 RPC_SYSTEMTIME;
typedef struct _RTP_SDES_ITEM RTCP_SDES_ITEM;
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef struct _wireSAFEARRAY_UNION SAFEARRAYUNION;
typedef struct _SAP_IF_FILTERS SAP_IF_FILTERS;
typedef struct _SCONTEXT_QUEUE SCONTEXT_QUEUE;
typedef struct _SCurrencyArray SCurrencyArray;
typedef struct _SDateTimeArray SDateTimeArray;
typedef int ( *SERVER_ROUTINE)();
typedef struct _SERVICE_INFO_0 SERVICE_INFO_0;
typedef struct _SERVICE_INFO_1 SERVICE_INFO_1;
typedef struct _SERVICE_INFO_2 SERVICE_INFO_2;
typedef struct _SERVICE_STATUS SERVICE_STATUS;
typedef struct _SESSION_BUFFER SESSION_BUFFER;
typedef struct _SESSION_HEADER SESSION_HEADER;
typedef struct _SESSION_INFO_0 SESSION_INFO_0;
typedef struct _SESSION_INFO_1 SESSION_INFO_1;
typedef struct _SESSION_INFO_2 SESSION_INFO_2;
typedef struct sess_info_sect SESS_INFO_SECT;
enum SF_STATUS_TYPE {SF_STATUS_REQ_FINISHED = 0x8000000,SF_STATUS_REQ_FINISHED_KEEP_CONN = 0x8000001,SF_STATUS_REQ_NEXT_NOTIFICATION = 0x8000002,SF_STATUS_REQ_HANDLED_NOTIFICATION = 0x8000003,SF_STATUS_REQ_ERROR = 0x8000004,SF_STATUS_REQ_READ_NEXT = 0x8000005,};
typedef struct _SHARE_INFO_501 SHARE_INFO_501;
typedef struct _SHARE_INFO_502 SHARE_INFO_502;
typedef struct _5687B37E6A0F56297A2BB22AF6770AC6 SHELLFLAGSTATE;
typedef struct _SHNAMEMAPPINGA SHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW SHNAMEMAPPINGW;
typedef struct _BDD35E4D6D3904DAB7D4846C261BAE65 SMAPIVerbArray;
typedef struct _SOCKET_ADDRESS SOCKET_ADDRESS;
typedef struct _SOURCE_MEDIA_A SOURCE_MEDIA_A;
typedef struct _SOURCE_MEDIA_W SOURCE_MEDIA_W;
typedef struct _SOrRestriction SOrRestriction;
typedef struct _SPropAttrArray SPropAttrArray;
typedef struct srv_subchannel SRV_SUBCHANNEL;
enum SSExitCodeList {SUCCESS = 0x0,INCOMPLETE_SCAN = 0x1,NO_CHANNELS_FOUND = 0x2,NO_VBI_DATA_FOUND = 0x3,NO_SS_DATA_FOUND = 0x4,NO_GOOD_SS_DATA_FOUND = 0x5,NO_REGION_FOUND = 0x6,INCOMPLETE_DATA = 0x7,};
typedef struct tagSTATPROPSETSTG STATPROPSETSTG;
typedef struct tagSTRINGEXSTRUCT STRINGEXSTRUCT;
typedef struct _SV2CVW2_PARAMS SV2CVW2_PARAMS;
struct SharedProperty;
enum TERMINAL_STATE {TS_INUSE = 0x0,TS_NOTINUSE = 0x1,};
typedef struct _TT_HITTESTINFOA TTHITTESTINFOA;
typedef struct _TT_HITTESTINFOW TTHITTESTINFOW;
struct TimeCollection;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef struct _USER_INFO_1003 USER_INFO_1003;
typedef struct _USER_INFO_1005 USER_INFO_1005;
typedef struct _USER_INFO_1006 USER_INFO_1006;
typedef struct _USER_INFO_1007 USER_INFO_1007;
typedef struct _USER_INFO_1008 USER_INFO_1008;
typedef struct _USER_INFO_1009 USER_INFO_1009;
typedef struct _USER_INFO_1010 USER_INFO_1010;
typedef struct _USER_INFO_1011 USER_INFO_1011;
typedef struct _USER_INFO_1012 USER_INFO_1012;
typedef struct _USER_INFO_1013 USER_INFO_1013;
typedef struct _USER_INFO_1014 USER_INFO_1014;
typedef struct _USER_INFO_1017 USER_INFO_1017;
typedef struct _USER_INFO_1018 USER_INFO_1018;
typedef struct _USER_INFO_1020 USER_INFO_1020;
typedef struct _USER_INFO_1023 USER_INFO_1023;
typedef struct _USER_INFO_1024 USER_INFO_1024;
typedef struct _USER_INFO_1025 USER_INFO_1025;
typedef struct _USER_INFO_1051 USER_INFO_1051;
typedef struct _USER_INFO_1052 USER_INFO_1052;
typedef struct _USER_INFO_1053 USER_INFO_1053;
typedef struct tagVFW_FILTERLIST VFW_FILTERLIST;
typedef struct _WKSTA_INFO_100 WKSTA_INFO_100;
typedef struct _WKSTA_INFO_101 WKSTA_INFO_101;
typedef struct _WKSTA_INFO_102 WKSTA_INFO_102;
typedef struct _WKSTA_INFO_302 WKSTA_INFO_302;
typedef struct _WKSTA_INFO_402 WKSTA_INFO_402;
typedef struct _WKSTA_INFO_502 WKSTA_INFO_502;
typedef struct _WSPUPCALLTABLE WSPUPCALLTABLE;
typedef struct _ZONEATTRIBUTES ZONEATTRIBUTES;
struct _ADOCollection {struct _ADOCollectionVtbl *lpVtbl;};
struct _ADOConnection;
enum _CLASSPATHTYPE {ExeNamePath = 0x0,DllNamePath = 0x1,TlbNamePath = 0x2,CabFilePath = 0x3,InfFilePath = 0x4,DrwFilePath = 0x5,SetupNamePath = 0x6,};
enum _D3DRMFILLMODE {D3DRMFILL_POINTS = 0x0,D3DRMFILL_WIREFRAME = 0x40,D3DRMFILL_SOLID = 0x80,D3DRMFILL_MASK = 0x1C0,D3DRMFILL_MAX = 0x200,};
enum _D3DRMSORTMODE {D3DRMSORT_FROMPARENT = 0x0,D3DRMSORT_NONE = 0x1,D3DRMSORT_FRONTTOBACK = 0x2,D3DRMSORT_BACKTOFRONT = 0x3,};
enum _D3DRMWRAPTYPE {D3DRMWRAP_FLAT = 0x0,D3DRMWRAP_CYLINDER = 0x1,D3DRMWRAP_SPHERE = 0x2,D3DRMWRAP_CHROME = 0x3,};
enum _D3DVERTEXTYPE {D3DVT_VERTEX = 0x1,D3DVT_LVERTEX = 0x2,D3DVT_TLVERTEX = 0x3,D3DVT_FORCE_DWORD = 0x7FFFFFFF,};
struct _DMsepg4Events {struct _DMsepg4EventsVtbl *lpVtbl;};
enum _DirectionType {DIRECTIONTYPE_IN = 0x0,DIRECTIONTYPE_OUT = 0x1,DIRECTIONTYPE_LAST = 0x2,};
typedef struct _271E49C86C8EFA0B647D87A58CF03284 _FPIEEE_RECORD;
struct _LONG_SIZEDARR {unsigned int clSize;unsigned int *pData;};
enum _SecStateDelta {SecStateStatic = 0x0,SecStateChange = 0x1,SecStateComplete = 0x2,SecStateAbort = 0x3,SecStateChanging = 0x4,};
struct _userSTGMEDIUM {IUnknown *pUnkForRelease;};
typedef unsigned int error_status_t;
struct fqpcid_overlay {unsigned char unique_proc_id[8];unsigned char fq_length;unsigned char fq_name[17];};
struct get_attributes {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned char sync_level;unsigned char mode_name[8];unsigned char net_name[8];unsigned char lu_name[8];unsigned char lu_alias[8];unsigned char plu_alias[8];unsigned char plu_un_name[8];unsigned char reserv4[2];unsigned char fqplu_name[17];unsigned char reserv5;unsigned char user_id[10];unsigned int conv_group_id;unsigned char conv_corr_len;unsigned char conv_corr[8];unsigned char reserv6[13];};
struct link_info_sect {unsigned int link_init_sect_len;unsigned short num_links;unsigned short total_links;};
typedef struct _C7C46F6CCBD2CAD1FCFEC4764C87E3D1 *lpMapiFileDesc;
struct lu62_info_sect {unsigned int lu62_init_sect_len;unsigned short num_lu62s;unsigned short total_lu62s;};
struct lu_0_3_overlay {unsigned int lu_0_3_entry_len;unsigned char access_type;unsigned char lu_type;unsigned char lu_daf;unsigned char lu_short_name;unsigned char lu_long_name[8];unsigned char sess_id[8];unsigned char dlc_name[8];unsigned char adapter_num;unsigned char dest_addr_len;unsigned char dest_addr[32];unsigned char sscp_lu_sess_state;unsigned char lu_lu_sess_state;unsigned char link_id[12];};
struct lu_def_overlay {unsigned int lu_def_entry_len;unsigned char lu_name[8];unsigned char lu_alias[8];unsigned char lu_nau_addr;unsigned char reserv3;};
struct luw_id_overlay {unsigned char fqlu_name_len;unsigned char fqlu_name[17];unsigned char instance[6];unsigned char sequence[2];};
struct sess_info_sect {unsigned int sess_init_sect_len;unsigned short num_sessions;unsigned short total_sessions;};
enum tagAPPINFOTYPE {APPINFO_PUBLISHED = 0x1,APPINFO_SHELLNEW = 0x2,APPINFO_INSERTABLE = 0x3,};
enum tagDTI_ADTIWUI {DTI_ADDUI_DEFAULT = 0x0,DTI_ADDUI_DISPSUBWIZARD = 0x1,};
enum tagDVD_MENU_ID {DVD_MENU_Title = 0x2,DVD_MENU_Root = 0x3,DVD_MENU_Subpicture = 0x4,DVD_MENU_Audio = 0x5,DVD_MENU_Angle = 0x6,DVD_MENU_Chapter = 0x7,};
struct tagEDB_RSTMAPA {char *szDatabaseName;char *szNewDatabaseName;};
enum tagMLCONVCHARF {MLCONVCHARF_AUTODETECT = 0x1,MLCONVCHARF_ENTITIZE = 0x2,};
enum tagMLSTR_FLAGS {MLSTR_READ = 0x1,MLSTR_WRITE = 0x2,};
enum tagMSICOSTTREE {MSICOSTTREE_SELFONLY = 0x0,MSICOSTTREE_CHILDREN = 0x1,MSICOSTTREE_PARENTS = 0x2,MSICOSTTREE_PRODUCT = 0x3,};
enum tagOLELINKBIND {OLELINKBIND_EVENIFCLASSDIFF = 0x1,};
enum tagPENDINGTYPE {PENDINGTYPE_TOPLEVEL = 0x1,PENDINGTYPE_NESTED = 0x2,};
enum tagSCRIPTSTATE {SCRIPTSTATE_UNINITIALIZED = 0x0,SCRIPTSTATE_INITIALIZED = 0x5,SCRIPTSTATE_STARTED = 0x1,SCRIPTSTATE_CONNECTED = 0x2,SCRIPTSTATE_DISCONNECTED = 0x3,SCRIPTSTATE_CLOSED = 0x4,};
enum tagSTREAM_SEEK {STREAM_SEEK_SET = 0x0,STREAM_SEEK_CUR = 0x1,STREAM_SEEK_END = 0x2,};
enum tagTVAudioMode {AMTVAUDIO_MODE_MONO = 0x1,AMTVAUDIO_MODE_STEREO = 0x2,AMTVAUDIO_MODE_LANG_A = 0x10,AMTVAUDIO_MODE_LANG_B = 0x20,AMTVAUDIO_MODE_LANG_C = 0x40,};
enum tagURLTEMPLATE {URLTEMPLATE_CUSTOM = 0x0,URLTEMPLATE_PREDEFINED_MIN = 0x10000,URLTEMPLATE_LOW = 0x10000,URLTEMPLATE_MEDIUM = 0x11000,URLTEMPLATE_HIGH = 0x12000,URLTEMPLATE_PREDEFINED_MAX = 0x20000,};
enum tagXFORMCOORDS {XFORMCOORDS_POSITION = 0x1,XFORMCOORDS_SIZE = 0x2,XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,XFORMCOORDS_EVENTCOMPAT = 0x10,};
typedef struct _userCLIPFORMAT userCLIPFORMAT;
typedef struct tagACCESSTIMEOUT ACCESSTIMEOUT;
typedef struct _ACCESS_INFO_0 ACCESS_INFO_0;
typedef struct _ACCESS_INFO_1 ACCESS_INFO_1;
typedef struct _ACTION_HEADER ACTION_HEADER;
typedef struct _ACTRL_ALISTA ACTRL_ACCESSA;
typedef struct _ACTRL_ALISTW ACTRL_ACCESSW;
enum ADDRESS_EVENT {AE_INSERVICE = 0x0,AE_OUTOFSERVICE = 0x1,AE_CLOSED = 0x2,};
enum ADDRESS_STATE {AS_INSERVICE = 0x0,AS_OUTOFSERVICE = 0x1,};
struct ADOConnection;
struct ADOParameters;
struct ADOProperties;
typedef struct _ads_attr_info ADS_ATTR_INFO;
typedef struct _AD_GUARANTEED AD_GUARANTEED;
typedef struct _AE_SESSLOGOFF AE_SESSLOGOFF;
typedef struct _AMMediaType AM_MEDIA_TYPE;
enum AM_MPEG2Level {AM_MPEG2Level_Low = 0x1,AM_MPEG2Level_Main = 0x2,AM_MPEG2Level_High1440 = 0x3,AM_MPEG2Level_High = 0x4,};
typedef struct tagANIMATIONINFO ANIMATIONINFO;
typedef void ( *AUXEXPOSEPROC)(int, int);
typedef struct _avifieldindex_chunk AVIFIELDINDEX;
typedef struct _90E769FB438B6A83B49CA07EC4EB3EFA AVIINDEXENTRY;
typedef struct _avimainheader AVIMAINHEADER;
typedef struct _avisuperindex AVISUPERINDEX;
typedef struct _avitimedindex AVITIMEDINDEX;
typedef struct _BLENDFUNCTION BLENDFUNCTION;
typedef struct _BYTE_SIZEDARR BYTE_SIZEDARR;
typedef struct tagCANDIDATEFORM CANDIDATEFORM;
typedef struct tagCANDIDATELIST CANDIDATELIST;
typedef struct tagCapDriverCaps CAPDRIVERCAPS;
typedef struct tagCAPROPVARIANT CAPROPVARIANT;
typedef struct _CERT_RDN_ATTR CERT_RDN_ATTR;
typedef struct tagCIPROPERTYDEF CIPROPERTYDEF;
typedef struct _4CE3C6CFBB2F191E29A1B4952A0683B3 CMC_extension;
typedef struct _BD5EDE25C0B1E5C449572B377A1B7D7D CMC_recipient;
typedef signed int CM_SYNC_LEVEL;
typedef struct _tagCOMPONENTSOPT COMPONENTSOPT;
typedef struct _CONFFILEINFOA CONFFILEINFOA;
typedef struct _CONFFILEINFOW CONFFILEINFOW;
typedef struct _CONFIG_INFO_0 CONFIG_INFO_0;
typedef struct _CONFUSERINFOA CONFUSERINFOA;
typedef struct _CONFUSERINFOW CONFUSERINFOW;
typedef struct _COSERVERINFO2 COSERVERINFO2;
typedef struct tagCREATESTRUCTA CREATESTRUCTA;
typedef struct tagCREATESTRUCTW CREATESTRUCTW;
struct CatalogObject;
struct ClusRefObject {struct ClusRefObjectVtbl *lpVtbl;};
struct ClusResGroups {struct ClusResGroupsVtbl *lpVtbl;};
struct ClusResOwners {struct ClusResOwnersVtbl *lpVtbl;};
struct ClusResources {struct ClusResourcesVtbl *lpVtbl;};
struct ComponentUtil;
typedef struct _D3DCLIPSTATUS D3DCLIPSTATUS;
typedef struct _D3DCOLORVALUE D3DCOLORVALUE;
typedef struct _D3DDeviceDesc D3DDEVICEDESC;
typedef struct _D3DMATRIXLOAD D3DMATRIXLOAD;
typedef struct _D3DPICKRECORD D3DPICKRECORD;
typedef struct _D3DRMPICKDESC D3DRMPICKDESC;
typedef struct _D3DRMVECTOR4D D3DRMVECTOR4D;
typedef struct tagDBCOMMANDTREE DBCOMMANDTREE;
enum DBCOMPAREENUM {DBCOMPARE_LT = 0x0,DBCOMPARE_EQ = 0x1,DBCOMPARE_GT = 0x2,DBCOMPARE_NE = 0x3,DBCOMPARE_NOTCOMPARABLE = 0x4,};
typedef struct tagDBFAILUREINFO DBFAILUREINFO;
enum DBLITERALENUM {DBLITERAL_INVALID = 0x0,DBLITERAL_BINARY_LITERAL = 0x1,DBLITERAL_CATALOG_NAME = 0x2,DBLITERAL_CATALOG_SEPARATOR = 0x3,DBLITERAL_CHAR_LITERAL = 0x4,DBLITERAL_COLUMN_ALIAS = 0x5,DBLITERAL_COLUMN_NAME = 0x6,DBLITERAL_CORRELATION_NAME = 0x7,DBLITERAL_CURSOR_NAME = 0x8,DBLITERAL_ESCAPE_PERCENT = 0x9,DBLITERAL_ESCAPE_UNDERSCORE = 0xA,DBLITERAL_INDEX_NAME = 0xB,DBLITERAL_LIKE_PERCENT = 0xC,DBLITERAL_LIKE_UNDERSCORE = 0xD,DBLITERAL_PROCEDURE_NAME = 0xE,DBLITERAL_QUOTE = 0xF,DBLITERAL_SCHEMA_NAME = 0x10,DBLITERAL_TABLE_NAME = 0x11,DBLITERAL_TEXT_COMMAND = 0x12,DBLITERAL_USER_NAME = 0x13,DBLITERAL_VIEW_NAME = 0x14,};
typedef struct tagDBLITERALINFO DBLITERALINFO;
enum DBPARAMIOENUM {DBPARAMIO_NOTPARAM = 0x0,DBPARAMIO_INPUT = 0x1,DBPARAMIO_OUTPUT = 0x2,};
struct DBPCVidEvents {struct DBPCVidEventsVtbl *lpVtbl;};
typedef struct tagDBPROPINFOSET DBPROPINFOSET;
enum DBRANGEENUM20 {DBRANGE_MATCH_N_SHIFT = 0x18,DBRANGE_MATCH_N_MASK = 0xFF,};
typedef struct tagDB_VARNUMERIC DB_VARNUMERIC;
typedef struct _DDPIXELFORMAT DDPIXELFORMAT;
typedef struct _DDSURFACEDESC DDSURFACEDESC;
typedef struct tagDEBUGHOOKINFO DEBUGHOOKINFO;
typedef struct _DISK_GEOMETRY DISK_GEOMETRY;
typedef struct _DOCHOSTUIINFO DOCHOSTUIINFO;
typedef struct _176AE562BEBA221D9147C7D653950669 DPACCOUNTDESC;
typedef struct _478FD611D4CFE009DAD748EFF45E08FA DPCREDENTIALS;
typedef struct _71862E795461F7636CC2839B33F62969 DPLCONNECTION;
typedef struct _B2D668220A1566F070E9D4CE9C5B369E DPMSG_GENERIC;
typedef struct _90C95F6D8FBD31365E56BBF2FD97089A DPSESSIONDESC;
typedef struct tagDRVCONFIGINFO DRVCONFIGINFO;
typedef struct _DSCBUFFERDESC DSCBUFFERDESC;
typedef struct _DTBLMVLISTBOX DTBLMVLISTBOX;
typedef struct _EDKEventCount EDKEVENTCOUNT;
typedef struct tagEMRGDICOMMENT EMRGDICOMMENT;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 EMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINE16;
typedef struct tagEMRPOLYLINE EMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH EMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETMAPMODE;
typedef struct tagABORTPATH EMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT EMRSTRETCHBLT;
typedef struct tagEMRFILLPATH EMRSTROKEPATH;
typedef struct _encorrecttext ENCORRECTTEXT;
typedef struct tagENHMETAHEADER ENHMETAHEADER;
typedef struct tagENHMETARECORD ENHMETARECORD;
typedef struct _enoleopfailed ENOLEOPFAILED;
typedef struct _tagEXTSTACKTRACE EXTSTACKTRACE;
typedef struct _70BF96555A8221A8BC520C987124981D FLATENTRYLIST;
typedef struct _862005EC9EDD7026C51E0C19A67AAE6E FLATMTSIDLIST;
typedef struct tagFONTSIGNATURE FONTSIGNATURE;
typedef struct _GDI_NONREMOTE GDI_NONREMOTE;
typedef struct GLUquadric GLUquadricObj;
struct GLUtesselator;
typedef struct _GRADIENT_RECT GRADIENT_RECT;
typedef struct tagGUITHREADINFO GUITHREADINFO;
typedef struct _HANDLE_INFO_1 HANDLE_INFO_1;
typedef struct tagHARDWAREINPUT HARDWAREINPUT;
struct HCOLORSPACE__ {int unused;};
typedef struct _HD_HITTESTINFO HDHITTESTINFO;
typedef struct tagHIGHCONTRASTA HIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW HIGHCONTRASTW;
typedef void *HMETAFILEPICT;
typedef struct _HNETINTERFACE *HNETINTERFACE;
struct HTMLBRElement;
struct HTMLDDElement;
struct HTMLDTElement;
struct HTMLFrameBase;
struct HTMLHRElement;
struct HTMLImgEvents {struct HTMLImgEventsVtbl *lpVtbl;};
struct HTMLLIElement;
struct HTMLMapEvents {struct HTMLMapEventsVtbl *lpVtbl;};
struct HTMLNavigator;
struct HTMLRuleStyle;
struct HTMLTableCell;
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct IADsContainer {struct IADsContainerVtbl *lpVtbl;};
struct IADsFileShare {struct IADsFileShareVtbl *lpVtbl;};
struct IAMCollection {struct IAMCollectionVtbl *lpVtbl;};
struct IASQLOLEAlert {struct IASQLOLEAlertVtbl *lpVtbl;};
struct IASQLOLECheck {struct IASQLOLECheckVtbl *lpVtbl;};
struct IASQLOLEGroup {struct IASQLOLEGroupVtbl *lpVtbl;};
struct IASQLOLEIndex {struct IASQLOLEIndexVtbl *lpVtbl;};
struct IASQLOLELogin {struct IASQLOLELoginVtbl *lpVtbl;};
struct IASQLOLENames {struct IASQLOLENamesVtbl *lpVtbl;};
struct IASQLOLERules {struct IASQLOLERulesVtbl *lpVtbl;};
struct IASQLOLETable {struct IASQLOLETableVtbl *lpVtbl;};
struct IASQLOLETasks {struct IASQLOLETasksVtbl *lpVtbl;};
struct IASQLOLEUsers {struct IASQLOLEUsersVtbl *lpVtbl;};
struct IASQLOLEViews {struct IASQLOLEViewsVtbl *lpVtbl;};
struct IAVIStreaming {struct IAVIStreamingVtbl *lpVtbl;};
struct IActiveScript {struct IActiveScriptVtbl *lpVtbl;};
struct IAdviseSinkEx {struct IAdviseSinkExVtbl *lpVtbl;};
struct IAgentBalloon {struct IAgentBalloonVtbl *lpVtbl;};
struct IAgentCommand {struct IAgentCommandVtbl *lpVtbl;};
struct IAsyncManager {struct IAsyncManagerVtbl *lpVtbl;};
struct IAuthenticate {struct IAuthenticateVtbl *lpVtbl;};
struct IBindProtocol {struct IBindProtocolVtbl *lpVtbl;};
struct IBitmapEffect {struct IBitmapEffectVtbl *lpVtbl;};
typedef struct _76E0DBF45CB9E280DCDAD06E7D8FE87F ICDRAWSUGGEST;
struct IClassFactory {struct IClassFactoryVtbl *lpVtbl;};
struct IClassRefresh {struct IClassRefreshVtbl *lpVtbl;};
struct IConfigAviMux {struct IConfigAviMuxVtbl *lpVtbl;};
struct IContextMenu2 {struct IContextMenu2Vtbl *lpVtbl;};
struct IContextMenu3 {struct IContextMenu3Vtbl *lpVtbl;};
struct IDBInitialize {struct IDBInitializeVtbl *lpVtbl;};
struct IDBProperties {struct IDBPropertiesVtbl *lpVtbl;};
typedef struct tag_IDFCHANNELHDR IDFCHANNELHDR;
struct IDirectInputA {struct IDirectInputAVtbl *lpVtbl;};
struct IDirectInputW {struct IDirectInputWVtbl *lpVtbl;};
typedef struct IDirectPlay2 IDirectPlay2A;
typedef struct IDirectPlay3 IDirectPlay3A;
struct IEPGComponent {struct IEPGComponentVtbl *lpVtbl;};
struct IEnumChannels {struct IEnumChannelsVtbl *lpVtbl;};
struct IEnumCodePage {struct IEnumCodePageVtbl *lpVtbl;};
struct IEnumLINEINFO {struct IEnumLINEINFOVtbl *lpVtbl;};
struct IEnumSTATDATA {struct IEnumSTATDATAVtbl *lpVtbl;};
struct IEnumTerminal {struct IEnumTerminalVtbl *lpVtbl;};
struct IErrorRecords {struct IErrorRecordsVtbl *lpVtbl;};
struct IEventMoniker {struct IEventMonikerVtbl *lpVtbl;};
struct IExtractIconA {struct IExtractIconAVtbl *lpVtbl;};
struct IExtractIconW {struct IExtractIconWVtbl *lpVtbl;};
struct IFilterGraph2 {struct IFilterGraph2Vtbl *lpVtbl;};
struct IFilterMapper {struct IFilterMapperVtbl *lpVtbl;};
struct IFolderViewOC {struct IFolderViewOCVtbl *lpVtbl;};
struct IGetDispenser {struct IGetDispenserVtbl *lpVtbl;};
struct IGraphBuilder {struct IGraphBuilderVtbl *lpVtbl;};
struct IGraphVersion {struct IGraphVersionVtbl *lpVtbl;};
struct IH26XSnapshot {struct IH26XSnapshotVtbl *lpVtbl;};
struct IHTMLDocument {struct IHTMLDocumentVtbl *lpVtbl;};
struct IHTMLEventObj {struct IHTMLEventObjVtbl *lpVtbl;};
struct IHTMLLocation {struct IHTMLLocationVtbl *lpVtbl;};
struct IHTMLSpanFlow {struct IHTMLSpanFlowVtbl *lpVtbl;};
struct IHTMLTableCol {struct IHTMLTableColVtbl *lpVtbl;};
struct IHTMLTableRow {struct IHTMLTableRowVtbl *lpVtbl;};
struct IHTMLTxtRange {struct IHTMLTxtRangeVtbl *lpVtbl;};
struct IHttpSecurity {struct IHttpSecurityVtbl *lpVtbl;};
struct IJavaExecute2 {struct IJavaExecute2Vtbl *lpVtbl;};
typedef struct _IMAGEHLP_LINE IMAGEHLP_LINE;
struct IMAPIFormInfo {struct IMAPIFormInfoVtbl *lpVtbl;};
struct IMAPIProgress {struct IMAPIProgressVtbl *lpVtbl;};
struct IMSAdminBaseW {struct IMSAdminBaseWVtbl *lpVtbl;};
struct IMediaControl {struct IMediaControlVtbl *lpVtbl;};
struct IMediaEventEx {struct IMediaEventExVtbl *lpVtbl;};
struct IMediaSample2 {struct IMediaSample2Vtbl *lpVtbl;};
struct IMediaSeeking {struct IMediaSeekingVtbl *lpVtbl;};
struct IMemAllocator {struct IMemAllocatorVtbl *lpVtbl;};
struct IMtsEventInfo {struct IMtsEventInfoVtbl *lpVtbl;};
struct IMtsUserEvent {struct IMtsUserEventVtbl *lpVtbl;};
typedef struct tagINTERFACEDATA INTERFACEDATA;
typedef struct tagINTERFACEIMPL INTERFACEIMPL;
typedef struct tagINTERFACEINFO INTERFACEINFO;
typedef struct _AAA3FC4CA65A0A79E764CC38F9D92130 INTTRACEENTRY;
struct IObjectSafety {struct IObjectSafetyVtbl *lpVtbl;};
struct IObtainRating {struct IObtainRatingVtbl *lpVtbl;};
struct IOleContainer {struct IOleContainerVtbl *lpVtbl;};
typedef struct _IPX_INTERFACE IPX_INTERFACE;
typedef union _IPX_MIB_INDEX IPX_MIB_INDEX;
struct IParentRowset {struct IParentRowsetVtbl *lpVtbl;};
struct IPropertyBag2 {struct IPropertyBag2Vtbl *lpVtbl;};
struct IPropertyPage {struct IPropertyPageVtbl *lpVtbl;};
struct IQueueCommand {struct IQueueCommandVtbl *lpVtbl;};
struct IRTPRPHFilter {struct IRTPRPHFilterVtbl *lpVtbl;};
struct IRTPSPHFilter {struct IRTPSPHFilterVtbl *lpVtbl;};
struct IRemoteObject {struct IRemoteObjectVtbl *lpVtbl;};
struct IRemoteThread {struct IRemoteThreadVtbl *lpVtbl;};
struct IRowsetAsynch {struct IRowsetAsynchVtbl *lpVtbl;};
struct IRowsetChange {struct IRowsetChangeVtbl *lpVtbl;};
struct IRowsetLocate {struct IRowsetLocateVtbl *lpVtbl;};
struct IRowsetNotify {struct IRowsetNotifyVtbl *lpVtbl;};
struct IRowsetScroll {struct IRowsetScrollVtbl *lpVtbl;};
struct IRowsetUpdate {struct IRowsetUpdateVtbl *lpVtbl;};
struct ISQLErrorInfo {struct ISQLErrorInfoVtbl *lpVtbl;};
struct ISecurityInfo {struct ISecurityInfoVtbl *lpVtbl;};
struct IShellBrowser {struct IShellBrowserVtbl *lpVtbl;};
struct IShellExtInit {struct IShellExtInitVtbl *lpVtbl;};
struct IShellWindows {struct IShellWindowsVtbl *lpVtbl;};
struct IStreamSample {struct IStreamSampleVtbl *lpVtbl;};
struct ITConsultCall {struct ITConsultCallVtbl *lpVtbl;};
struct ITrackStorage {struct ITrackStorageVtbl *lpVtbl;};
struct ITrusteeAdmin {struct ITrusteeAdminVtbl *lpVtbl;};
struct IViewObjectEx {struct IViewObjectExVtbl *lpVtbl;};
struct IWaitMultiple {struct IWaitMultipleVtbl *lpVtbl;};
typedef struct _3E8BFD172CC0232DA5E7071EC2A0A89F KSNODE_CREATE;
typedef struct _58C2C1BF6568EE28BD9B872E6BA03976 KSPIN_CONNECT;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef struct tagLASTINPUTINFO LASTINPUTINFO;
typedef struct lineagentcaps_tag LINEAGENTCAPS;
typedef struct linecardentry_tag LINECARDENTRY;
typedef struct linedevstatus_tag LINEDEVSTATUS;
typedef struct _82F8C43FDAD4693C28E55E9304381917 LLC_DLC_PARMS;
typedef struct _ACCESS_LIST *LPACCESS_LIST;
typedef IAdviseSink2 *LPADVISESINK2;
typedef struct _AE_CONNSTOP *LPAE_CONNSTOP;
typedef struct _AE_NETLOGON *LPAE_NETLOGON;
typedef struct _AFPROTOCOLS *LPAFPROTOCOLS;
typedef struct _AMVPDIMINFO *LPAMVPDIMINFO;
typedef struct tagANIMATEINFO *LPANIMATEINFO;
typedef struct API_VERSION *LPAPI_VERSION;
typedef struct IASQLOLEKeys *LPASQLOLEKEYS;
typedef struct IASQLOLERule *LPASQLOLERULE;
typedef struct IASQLOLETask *LPASQLOLETASK;
typedef struct IASQLOLEUser *LPASQLOLEUSER;
typedef struct IASQLOLEView *LPASQLOLEVIEW;
typedef struct _AUDIT_ENTRY *LPAUDIT_ENTRY;
typedef struct tagBOXEDITINFO *LPBOXEDITINFO;
typedef struct _browseinfoA *LPBROWSEINFOA;
typedef struct _browseinfoW *LPBROWSEINFOW;
typedef ICatRegister *LPCATREGISTER;
typedef  DIENVELOPE *LPCDIENVELOPE;
typedef  DIPERIODIC *LPCDIPERIODIC;
typedef  DPLAPPINFO *LPCDPLAPPINFO;
typedef struct tagCHARSETINFO *LPCHARSETINFO;
typedef struct tagCHOOSEFONTA *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW *LPCHOOSEFONTW;
typedef ICodeInstall *LPCODEINSTALL;
typedef struct tagCOLORSCHEME *LPCOLORSCHEME;
typedef struct _CONFRECDIRA *LPCONFRECDIRA;
typedef struct _CONFRECDIRW *LPCONFRECDIRW;
typedef struct tagCONNECTDATA *LPCONNECTDATA;
typedef IContextMenu *LPCONTEXTMENU;
typedef struct tagCONTROLINFO *LPCONTROLINFO;
typedef struct _CSADDR_INFO *LPCSADDR_INFO;
typedef struct tagCURSORSHAPE *LPCURSORSHAPE;
typedef struct _D3DMATERIAL *LPD3DMATERIAL;
typedef struct _D3DPrimCaps *LPD3DPRIMCAPS;
typedef struct _D3DRMVERTEX *LPD3DRMVERTEX;
typedef struct _D3DTLVERTEX *LPD3DTLVERTEX;
typedef struct _D3DTRIANGLE *LPD3DTRIANGLE;
typedef struct _D3DVIEWPORT *LPD3DVIEWPORT;
typedef struct _DEBUG_EVENT *LPDEBUG_EVENT;
typedef struct DICONDITION *LPDICONDITION;
typedef struct DIEFFESCAPE *LPDIEFFESCAPE;
typedef struct DIJOYSTATE2 *LPDIJOYSTATE2;
typedef struct DIPROPDWORD *LPDIPROPDWORD;
typedef struct DIPROPRANGE *LPDIPROPRANGE;
typedef struct DIRAMPFORCE *LPDIRAMPFORCE;
typedef struct IDirect3DRM2 *LPDIRECT3DRM2;
typedef struct IDirectDraw2 *LPDIRECTDRAW2;
typedef struct IDirectDraw3 *LPDIRECTDRAW3;
typedef struct IDirectInputA *LPDIRECTINPUT;
typedef struct IDirectPlay2 *LPDIRECTPLAY2;
typedef struct IDirectPlay3 *LPDIRECTPLAY3;
typedef struct IDirectSound *LPDIRECTSOUND;
typedef struct _dir_entryid *LPDIR_ENTRYID;
typedef struct _DOC_INFO_1A *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W *LPDOC_INFO_1W;
typedef struct _DOC_INFO_2A *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W *LPDOC_INFO_2W;
typedef struct _CFDE79073F41BFFF7E06FED73F276E8B *LPDRAWDIBTIME;
typedef struct _DTBLMVDDLBX *LPDTBLMVDDLBX;
typedef IEnumMoniker *LPENUMMONIKER;
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef IEnumRfc1766 *LPENUMRFC1766;
typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef IEnumSTATURL *LPENUMSTATURL;
typedef IEnumUnknown *LPENUMUNKNOWN;
typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct tagEVENTMSG *LPEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *LPEXTLOGFONTW;
typedef IFileViewerA *LPFILEVIEWERA;
typedef IFileViewerW *LPFILEVIEWERW;
typedef struct _FILE_INFO_2 *LPFILE_INFO_2;
typedef struct _FILE_INFO_3 *LPFILE_INFO_3;
typedef IExchangeFolderRules *LPFOLDERRULES;
typedef int *LPFXPT16DOT16;
typedef char *( *LPGETNODENAME)();
typedef struct _3E0A08AB4DFF2F80B8E74D39D385CA44 *LPGLOBALENTRY;
typedef struct tagHANDLETABLE *LPHANDLETABLE;
typedef IHlinkTarget *LPHLINKTARGET;
typedef struct _HSE_TF_INFO *LPHSE_TF_INFO;
typedef struct tag_IDFINSTCAPS *LPIDFINSTCAPS;
typedef struct tag_IDFINSTINFO *LPIDFINSTINFO;
typedef IJavaExecute *LPJAVAEXECUTE;
typedef struct _JOB_INFO_1A *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W *LPJOB_INFO_1W;
typedef struct _JOB_INFO_2A *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W *LPJOB_INFO_2W;
typedef struct tagKERNINGPAIR *LPKERNINGPAIR;
typedef struct lineappinfo_tag *LPLINEAPPINFO;
typedef struct linedevcaps_tag *LPLINEDEVCAPS;
typedef struct lineforward_tag *LPLINEFORWARD;
typedef struct linemessage_tag *LPLINEMESSAGE;
typedef struct IMAPIControl *LPMAPICONTROL;
typedef struct IMAPIFormMgr *LPMAPIFORMMGR;
typedef struct IMAPISession *LPMAPISESSION;
typedef struct tagMDINEXTMENU *LPMDINEXTMENU;
typedef struct tagMENUBARINFO *LPMENUBARINFO;
typedef struct tagMIDIINCAPSA *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *LPMIDIINCAPSW;
typedef struct _7E7F9E6E46889EEDB1929991A6A7474A *LPMODULEENTRY;
typedef struct tagMONITORINFO *LPMONITORINFO;
typedef struct tagNEWCPLINFOA *LPNEWCPLINFOA;
typedef struct tagNEWCPLINFOW *LPNEWCPLINFOW;
typedef struct tagNMIPADDRESS *LPNMIPADDRESS;
typedef struct tagLVKEYDOWN *LPNMLVKEYDOWN;
typedef struct tagNMSELCHANGE *LPNMSELCHANGE;
typedef struct tagNMTBHOTITEM *LPNMTBHOTITEM;
typedef struct tagNMTREEVIEWA *LPNMTREEVIEWA;
typedef struct tagNMTREEVIEWW *LPNMTREEVIEWW;
typedef struct tagTVKEYDOWN *LPNMTVKEYDOWN;
typedef struct _NSP_ROUTINE *LPNSP_ROUTINE;
typedef struct tagOCPFIPARAMS *LPOCPFIPARAMS;
typedef struct _OFNOTIFYEXA *LPOFNOTIFYEXA;
typedef struct _OFNOTIFYEXW *LPOFNOTIFYEXW;
typedef IOleDocument *LPOLEDOCUMENT;
typedef IOleUndoUnit *LPOLEUNDOUNIT;
typedef struct tagPAINTSTRUCT *LPPAINTSTRUCT;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef IPersistFile *LPPERSISTFILE;
typedef struct phonestatus_tag *LPPHONESTATUS;
typedef IPictureDisp *LPPICTUREDISP;
typedef IPropertyBag *LPPROPERTYBAG;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct _QOS_SD_MODE *LPQOS_SD_MODE;
typedef IRemoteField *LPREMOTEFIELD;
typedef struct _REPL_INFO_0 *LPREPL_INFO_0;
typedef IRichEditOle *LPRICHEDITOLE;
typedef IRootStorage *LPROOTSTORAGE;
typedef struct _RSVP_ADSPEC *LPRSVP_ADSPEC;
typedef struct _RSVP_POLICY *LPRSVP_POLICY;
typedef struct tagSERIALKEYSA *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW *LPSERIALKEYSW;
typedef IShellFolder *LPSHELLFOLDER;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct sockaddr_nb *LPSOCKADDR_NB;
typedef struct sockaddr_tp *LPSOCKADDR_TP;
typedef struct sockaddr_vv *LPSOCKADDR_VV;
typedef struct ISpoolerHook *LPSPOOLERHOOK;
typedef struct tagSTYLESTRUCT *LPSTYLESTRUCT;
typedef struct _SYSTEM_INFO *LPSYSTEM_INFO;
typedef struct tagTBADDBITMAP *LPTBADDBITMAP;
typedef struct tagTEXTMETRICA *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW *LPTEXTMETRICW;
typedef struct tagTTPOLYCURVE *LPTTPOLYCURVE;
typedef struct tagTOOLINFOA *LPTTTOOLINFOA;
typedef struct tagTOOLINFOW *LPTTTOOLINFOW;
typedef struct _USER_INFO_0 *LPUSER_INFO_0;
typedef struct _USER_INFO_1 *LPUSER_INFO_1;
typedef struct _USER_INFO_2 *LPUSER_INFO_2;
typedef struct _USER_INFO_3 *LPUSER_INFO_3;
typedef struct _usr_entryid *LPUSR_ENTRYID;
typedef IViewObject2 *LPVIEWOBJECT2;
typedef struct tagWAVEINCAPSA *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *LPWAVEINCAPSW;
typedef IWinInetInfo *LPWININETINFO;
typedef struct tagWNDCLASSEXA *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *LPWNDCLASSEXW;
typedef struct tagWPPROVINFOA *LPWPPROVINFOA;
typedef struct tagWPPROVINFOW *LPWPPROVINFOW;
typedef struct tagWPSITEINFOA *LPWPSITEINFOA;
typedef struct tagWPSITEINFOW *LPWPSITEINFOW;
typedef struct _WSATHREADID *LPWSATHREADID;
typedef struct _90D6D0DC7478186808F66339FCD4C48E LS_MSG_DIGEST;
struct LUA_EXT_ENTRY {unsigned char lua_routine_type;unsigned char lua_module_name[9];unsigned char lua_procedure_name[33];};
typedef struct tagLVHITTESTINFO LVHITTESTINFO;
enum MACRO_AB_SHOW {AB_SHOW_PHANTOMS = 2,AB_SHOW_OTHERS = 4,};
enum MACRO_ACKNEG1 {ACKNEG1 = 3,ACKNEG2 = 4,};
enum MACRO_ADDRESS {WSANO_ADDRESS = 11004,NO_ADDRESS = 11004,};
enum MACRO_ADRPARM {ADRPARM_HELP_CTX = 0x0,};
enum MACRO_AD_FLAG {AD_FLAG_BREAK_BIT = 0x1,};
enum MACRO_ALERTSZ {ALERTSZ = 128,};
enum MACRO_ALG_SID {ALG_SID_RC2 = 2,ALG_SID_RC4 = 1,ALG_SID_SEAL = 2,ALG_SID_DH_SANDF = 1,ALG_SID_DH_EPHEM = 2,ALG_SID_AGREED_KEY_ANY = 3,ALG_SID_KEA = 4,ALG_SID_MD2 = 1,ALG_SID_MD4 = 2,ALG_SID_MD5 = 3,ALG_SID_SHA = 4,ALG_SID_SHA1 = 4,ALG_SID_MAC = 5,ALG_SID_RIPEMD = 6,ALG_SID_RIPEMD160 = 7,ALG_SID_SSL3SHAMD5 = 8,ALG_SID_HMAC = 9,ALG_SID_SSL3_MASTER = 1,ALG_SID_SCHANNEL_MASTER_HASH = 2,ALG_SID_SCHANNEL_MAC_KEY = 3,ALG_SID_PCT1_MASTER = 4,ALG_SID_SSL2_MASTER = 5,ALG_SID_TLS1_MASTER = 6,ALG_SID_SCHANNEL_ENC_KEY = 7,ALG_SID_EXAMPLE = 80,};
enum MACRO_ALLOWED {ALLOWED_FAIL = 0x1,ALLOWED_ABORT = 0x2,ALLOWED_RETRY = 0x4,ALLOWED_IGNORE = 0x8,};
enum MACRO_AMMPEG2 {AMMPEG2_DoPanScan = 0x1,AMMPEG2_DVDLine21Field1 = 0x2,AMMPEG2_DVDLine21Field2 = 0x4,AMMPEG2_SourceIsLetterboxed = 0x8,AMMPEG2_FilmCameraMode = 0x10,AMMPEG2_LetterboxAnalogOut = 0x20,};
enum MACRO_AM_MPEG {AM_MPEG_AUDIO_DUAL_MERGE = 0,AM_MPEG_AUDIO_DUAL_LEFT = 1,AM_MPEG_AUDIO_DUAL_RIGHT = 2,};
enum MACRO_ANYSIZE {ANYSIZE_ARRAY = 1,};
enum MACRO_APIMSGS {APIMSGS = 0xFC0,LINKMSGS = 0x1000,NOTRACE = 0x2000,ADSTOP = 0x4000,ADDUMP = 0x8000,};
enum MACRO_AP_CNOS {AP_CNOS_LOCAL_RACE_REJECT = 0x1700,AP_CNOS_PARTNER_LU_REJECT = 0x1800,AP_INVALID_KEY = 0x20F0,AP_ALL_MODE_MUST_RESET = 0x53010000,AP_AUTOACT_EXCEEDS_SESSLIM = 0x52010000,AP_BAD_MODE_NAME = 0x57010000,AP_BAD_SNASVCMG_LIMITS = 0x54010000,AP_CANT_RAISE_LIMITS = 0x51010000,AP_CHANGE_SRC_DRAINS = 0x5D010000,AP_CNOS_ACCEPTED = 0x0,AP_CNOS_COMMAND_RACE_REJECT = 0x5F010000,AP_CNOS_IMPLICIT_PARALLEL = 0x50010000,AP_CNOS_MODE_CLOSED = 0x56010000,AP_CNOS_MODE_NAME_REJECT = 0x57010000,AP_CNOS_NEGOTIATED = 0x7000000,AP_CPSVCMG_MODE_NOT_ALLOWED = 0x19050000,AP_EXCEEDS_MAX_ALLOWED = 0x5C010000,AP_LU_DETACHED = 0x5E010000,AP_MIN_GT_TOTAL = 0x55010000,AP_MODE_CLOSED = 0x56010000,AP_RESET_SNA_DRAINS = 0x59010000,AP_SINGLE_NOT_SRC_RESP = 0x5A010000,AP_SNASVCMG_RESET_NOT_ALLOWED = 0x67010000,AP_DISPLAY_INFO_EXCEEDS_LEN = 0xB4010000,AP_DISPLAY_INVALID_CONSTANT = 0xB5010000,AP_SOURCE = 0x0,AP_TARGET = 0x1,AP_ONE = 0x0,AP_ALL = 0x1,AP_QUEUED_OPERATOR_STARTED = 0x0,AP_QUEUED_AM_STARTED = 0x1,AP_NONQUEUED_AM_STARTED = 0x2,AP_QUEUED_OPERATOR_PRELOADED = 0x3,AP_BACKGROUND = 0x0,AP_FULL_SCREEN = 0x1,AP_PRESENTATION_MANAGER = 0x2,AP_VIO_WINDOWABLE = 0x3,AP_LEARN = 0x0,AP_LEN = 0x1,AP_NN = 0x2,AP_EN = 0x3,AP_SEC_NONSECURE = 0x1,AP_SEC_PUBLIC_SWITCHED_NETWORK = 0x20,AP_SEC_UNDERGROUND_CABLE = 0x40,AP_SEC_SECURE_CONDUIT = 0x60,AP_SEC_GUARDED_CONDUIT = 0x80,AP_SEC_ENCRYPTED = 0xA0,AP_SEC_GUARDED_RADIATION = 0xC0,AP_SEC_MAXIMUM = 0xFF,AP_PROP_DELAY_MINIMUM = 0x0,AP_PROP_DELAY_LAN = 0x4C,AP_PROP_DELAY_TELEPHONE = 0x71,AP_PROP_DELAY_PKT_SWITCHED_NET = 0x91,AP_PROP_DELAY_SATELLITE = 0x99,AP_PROP_DELAY_MAXIMUM = 0xFF,AP_SWITCHED = 0x1,AP_NONSWITCHED = 0x2,AP_SECONDARY = 0x0,AP_PRIMARY = 0x1,AP_NEGOTIABLE = 0x3,AP_OUTBOUND = 0x0,AP_INBOUND = 0x1,AP_NOT_IN_PROGRESS = 0x0,AP_IN_PROGRESS = 0x1,AP_NOT_SUPPORTED = 0x0,AP_SUPPORTED = 0x1,AP_SSCP_PU_SESSION = 0x0,AP_SSCP_LU_SESSION = 0x1,AP_LU_LU_SESSION = 0x2,AP_DEACTIVATED = 0x0,AP_ACTIVATED = 0x80,AP_ACTIVATING = 0x40,AP_DEACTIVATING = 0x20,AP_DETACHING = 0x10,AP_HOST_CONNECTION = 0x1,AP_PEER_CONNECTION = 0x2,AP_BOTH_CONNECTION = 0x3,AP_CONALS_PND = 0x2,AP_XID_PND = 0x3,AP_CONTACT_PND = 0x5,AP_CONTACTED = 0x6,AP_DISC_PND = 0x7,AP_DISC_RQ = 0x8,AP_3270_EMULATION = 0x0,AP_LUA = 0x1,AP_LU0 = 0x0,AP_LU1 = 0x1,AP_LU2 = 0x2,AP_LU3 = 0x3,AP_LU62 = 0x6,AP_UNKNOWN = 0xFF,AP_LEASED_LINE = 0x0,AP_VX32 = 0x1,AP_DISCONNECT = 0x0,AP_CONNECT = 0x1,AP_AUTO_CONNECT = 0x2,AP_FIXED = 0x12,AP_ADAPTIVE = 0x13,AP_NOT_BOUND = 0x0,AP_BOUND = 0x80,AP_BINDING = 0x40,AP_UNBINDING = 0x20,};
enum MACRO_ASPECTX {ASPECTX = 40,};
enum MACRO_ASPECTY {ASPECTY = 42,};
enum MACRO_ATPROTO {ATPROTO_ADSP = 16256,ATPROTO_ATP = 16257,ATPROTO_ASP = 16258,ATPROTO_PAP = 16259,};
enum MACRO_AUXCAPS {AUXCAPS_CDAUDIO = 1,AUXCAPS_AUXIN = 2,AUXCAPS_VOLUME = 1,AUXCAPS_LRVOLUME = 2,};
enum MACRO_AUX_RGB {AUX_RGB = 0,AUX_RGBA = 0,AUX_INDEX = 1,AUX_SINGLE = 0,AUX_DOUBLE = 2,AUX_DIRECT = 0,AUX_INDIRECT = 4,AUX_ACCUM = 8,AUX_ALPHA = 16,AUX_DEPTH24 = 32,AUX_STENCIL = 64,AUX_AUX = 128,AUX_DEPTH16 = 256,AUX_FIXED_332_PAL = 512,AUX_DEPTH = 256,AUX_EXPOSE = 1,AUX_CONFIG = 2,AUX_DRAW = 4,AUX_KEYEVENT = 8,AUX_MOUSEDOWN = 16,AUX_MOUSEUP = 32,AUX_MOUSELOC = 64,AUX_WINDOWX = 0,AUX_WINDOWY = 1,AUX_MOUSEX = 0,AUX_MOUSEY = 1,AUX_MOUSESTATUS = 3,AUX_KEY = 0,AUX_KEYSTATUS = 1,AUX_LEFTBUTTON = 1,AUX_RIGHTBUTTON = 2,AUX_MIDDLEBUTTON = 4,AUX_SHIFT = 1,AUX_CONTROL = 2,AUX_RETURN = 13,AUX_ESCAPE = 27,AUX_SPACE = 32,AUX_LEFT = 37,AUX_UP = 38,AUX_RIGHT = 39,AUX_DOWN = 40,AUX_A = 65,AUX_B = 66,AUX_C = 67,AUX_D = 68,AUX_E = 69,AUX_F = 70,AUX_G = 71,AUX_H = 72,AUX_I = 73,AUX_J = 74,AUX_K = 75,AUX_L = 76,AUX_M = 77,AUX_N = 78,AUX_O = 79,AUX_P = 80,AUX_Q = 81,AUX_R = 82,AUX_S = 83,AUX_T = 84,AUX_U = 85,AUX_V = 86,AUX_W = 87,AUX_X = 88,AUX_Y = 89,AUX_Z = 90,AUX_a = 97,AUX_b = 98,AUX_c = 99,AUX_d = 100,AUX_e = 101,AUX_f = 102,AUX_g = 103,AUX_h = 104,AUX_i = 105,AUX_j = 106,AUX_k = 107,AUX_l = 108,AUX_m = 109,AUX_n = 110,AUX_o = 111,AUX_p = 112,AUX_q = 113,AUX_r = 114,AUX_s = 115,AUX_t = 116,AUX_u = 117,AUX_v = 118,AUX_w = 119,AUX_x = 120,AUX_y = 121,AUX_z = 122,AUX_0 = 48,AUX_1 = 49,AUX_2 = 50,AUX_3 = 51,AUX_4 = 52,AUX_5 = 53,AUX_6 = 54,AUX_7 = 55,AUX_8 = 56,AUX_9 = 57,AUX_FD = 1,AUX_COLORMAP = 3,AUX_GREYSCALEMAP = 4,AUX_FOGMAP = 5,AUX_ONECOLOR = 6,AUX_BLACK = 0,AUX_RED = 13,AUX_GREEN = 14,AUX_YELLOW = 15,AUX_BLUE = 16,AUX_MAGENTA = 17,AUX_CYAN = 18,AUX_WHITE = 19,};
enum MACRO_BASE_ID {BASE_ID = 0x6600,};
enum MACRO_BATTERY {BATTERY_FLAG_HIGH = 0x1,BATTERY_FLAG_LOW = 0x2,BATTERY_FLAG_CRITICAL = 0x4,BATTERY_FLAG_CHARGING = 0x8,BATTERY_FLAG_NO_BATTERY = 0x80,BATTERY_FLAG_UNKNOWN = 0xFF,BATTERY_PERCENTAGE_UNKNOWN = 0xFF,BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_BCPLAST {BCPLAST = 3,BCPBATCH = 4,};
enum MACRO_BEXPORT {BEXPORT_STARTED = 0x40000024,BEXPORT_COMPLETE = 0x40000025,BEXPORT_COMPLETE_NOFILE = 0x40000026,BEXPORT_CANCELLED = 0x80000027,BEXPORT_CANCELLED_NOFILE = 0x80000028,BEXPORT_STARTED_NOFILE = 0x40000029,};
enum MACRO_BIMPMSG {BIMPMSG_INITIALIZING = 0xC,};
enum MACRO_BIMPORT {BIMPORT_STARTED = 0x4000001F,BIMPORT_COMPLETE = 0x40000020,BIMPORT_COMPLETE_NOFILE = 0x40000021,BIMPORT_CANCELLED = 0x80000022,BIMPORT_CANCELLED_NOFILE = 0x80000023,};
enum MACRO_BITBIND {BITBIND = 6,};
enum MACRO_BI_1632 {BI_1632 = 0x32333631,};
enum MACRO_BLLI_L2 {BLLI_L2_MODE_NORMAL = 0x40,BLLI_L2_MODE_EXT = 0x80,BLLI_L3_MODE_NORMAL = 0x40,BLLI_L3_MODE_EXT = 0x80,BLLI_L3_PACKET_16 = 0x4,BLLI_L3_PACKET_32 = 0x5,BLLI_L3_PACKET_64 = 0x6,BLLI_L3_PACKET_128 = 0x7,BLLI_L3_PACKET_256 = 0x8,BLLI_L3_PACKET_512 = 0x9,BLLI_L3_PACKET_1024 = 0xA,BLLI_L3_PACKET_2048 = 0xB,BLLI_L3_PACKET_4096 = 0xC,};
enum MACRO_BRITTON {BRITTON_LEE = 20,};
enum MACRO_BROWSER {BROWSER_ROLE_PDC = 0x1,BROWSER_ROLE_BDC = 0x2,};
enum MACRO_BUFFLEN {BUFFLEN = 255,};
enum MACRO_CA_DISP {CA_DISP_INCOMPLETE = 0,CA_DISP_ERROR = 1,CA_DISP_REVOKED = 2,CA_DISP_VALID = 3,CA_DISP_INVALID = 4,CA_DISP_UNDER_SUBMISSION = 5,};
enum MACRO_CEDHDLC {CEDHDLC = 0x20,};
enum MACRO_CEDNRZI {CEDNRZI = 0x40,};
enum MACRO_CELDSRS {CELDSRS = 0x4,};
enum MACRO_CELNRZI {CELNRZI = 0x40,};
enum MACRO_CERT_PE {CERT_PE_IMAGE_DIGEST_DEBUG_INFO = 0x1,CERT_PE_IMAGE_DIGEST_RESOURCES = 0x2,CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO = 0x4,CERT_PE_IMAGE_DIGEST_NON_PE_INFO = 0x8,CERT_SECTION_TYPE_ANY = 0xFF,};
enum MACRO_CES3270 {CES3270 = 2,};
enum MACRO_CESISDN {CESISDN = 33,};
enum MACRO_CESLINK {CESLINK = 3,CESX25 = 4,CESDFT = 10,};
enum MACRO_CF_NULL {CF_NULL = 0,CFSTR_MIME_NULL = 0,};
enum MACRO_CHANGER {CHANGER_BAR_CODE_SCANNER_INSTALLED = 0x1,CHANGER_INIT_ELEM_STAT_WITH_RANGE = 0x2,CHANGER_CLOSE_IEPORT = 0x4,CHANGER_OPEN_IEPORT = 0x8,CHANGER_STATUS_NON_VOLATILE = 0x10,CHANGER_EXCHANGE_MEDIA = 0x20,CHANGER_CLEANER_SLOT = 0x40,CHANGER_LOCK_UNLOCK = 0x80,CHANGER_CARTRIDGE_MAGAZINE = 0x100,CHANGER_MEDIUM_FLIP = 0x200,CHANGER_POSITION_TO_ELEMENT = 0x400,CHANGER_REPORT_IEPORT_STATE = 0x800,CHANGER_STORAGE_DRIVE = 0x1000,CHANGER_STORAGE_IEPORT = 0x2000,CHANGER_STORAGE_SLOT = 0x4000,CHANGER_STORAGE_TRANSPORT = 0x8000,CHANGER_DRIVE_CLEANING_REQUIRED = 0x10000,CHANGER_PREDISMOUNT_EJECT_REQUIRED = 0x20000,CHANGER_CLEANER_EJECT_REQUIRED = 0x40000,CHANGER_PREMOUNT_EJECT_REQUIRED = 0x80000,CHANGER_VOLUME_IDENTIFICATION = 0x100000,CHANGER_VOLUME_SEARCH = 0x200000,CHANGER_VOLUME_ASSERT = 0x400000,CHANGER_VOLUME_REPLACE = 0x800000,CHANGER_VOLUME_UNDEFINE = 0x1000000,CHANGER_SERIAL_NUMBER_VALID = 0x4000000,CHANGER_DEVICE_REINITIALIZE_CAPABLE = 0x8000000,CHANGER_KEYPAD_ENABLE_DISABLE = 0x10000000,CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 0x20000000,CHANGER_PREDISMOUNT_ALIGN_DRIVE_TO_SLOT = 0x40000000,CHANGER_CLEANER_AUTODISMOUNT = 0x80000000,CHANGER_TO_TRANSPORT = 0x1,CHANGER_TO_SLOT = 0x2,CHANGER_TO_IEPORT = 0x4,CHANGER_TO_DRIVE = 0x8,};
enum MACRO_CHARDEV {CHARDEV_STAT_OPENED = 0x2,CHARDEV_STAT_ERROR = 0x4,CHARDEV_CLOSE = 0x0,};
enum MACRO_CHARSET {ANSI_CHARSET = 0,DEFAULT_CHARSET = 1,SYMBOL_CHARSET = 2,SHIFTJIS_CHARSET = 128,HANGEUL_CHARSET = 129,HANGUL_CHARSET = 129,GB2312_CHARSET = 134,CHINESEBIG5_CHARSET = 136,OEM_CHARSET = 255,JOHAB_CHARSET = 130,HEBREW_CHARSET = 177,ARABIC_CHARSET = 178,GREEK_CHARSET = 161,TURKISH_CHARSET = 162,VIETNAMESE_CHARSET = 163,THAI_CHARSET = 222,EASTEUROPE_CHARSET = 238,RUSSIAN_CHARSET = 204,MAC_CHARSET = 77,BALTIC_CHARSET = 186,};
enum MACRO_CHILDID {CHILDID_SELF = 0,};
enum MACRO_CLIPBRD {CLIPBRD_E_FIRST = 0x800401D0,CLIPBRD_E_LAST = 0x800401DF,CLIPBRD_S_FIRST = 0x401D0,CLIPBRD_S_LAST = 0x401DF,};
enum MACRO_CLUSAPI {CLUSAPI_READ_ACCESS = 0x1,CLUSAPI_CHANGE_ACCESS = 0x2,CLUSAPI_NO_ACCESS = 0x4,CLUSAPI_ALL_ACCESS = 0x3,};
enum MACRO_CLUSCTL {CLUSCTL_ACCESS_SHIFT = 0,CLUSCTL_FUNCTION_SHIFT = 2,};
enum MACRO_CLUSTAT {CLUSTAT = 17,};
enum MACRO_CONFERR {CONFERR_BASE = 0x9000,CONFERR_INVALID_PARAMETER = 0x9001,CONFERR_INVALID_HCONF = 0x9002,CONFERR_INVALID_BUFFER = 0x9003,CONFERR_BUFFER_TOO_SMALL = 0x9004,CONFERR_ENUM_COMPLETE = 0x9005,CONFERR_INVALID_OPERATION = 0x9006,CONFERR_INVALID_ADDRESS = 0x9007,CONFERR_FILE_TRANSFER = 0x900A,CONFERR_FILE_SEND_ABORT = 0x900B,CONFERR_FILE_RECEIVE_ABORT = 0x900C,CONFERR_NO_APP_SHARING = 0x9014,CONFERR_NOT_SHARED = 0x9015,CONFERR_NOT_SHAREABLE = 0x9016,CONFERR_ALREADY_SHARED = 0x9017,CONFERR_OUT_OF_MEMORY = 0x8,CONFERR_FILE_NOT_FOUND = 0x2,CONFERR_PATH_NOT_FOUND = 0x3,CONFERR_ACCESS_DENIED = 0x5,CONFERR_RECEIVE_DIR = 0x70,CONFERR_NOT_IMPLEMENTED = 0x78,CONFERR_INVALID_HWND = 0x578,CONFERR_INTERNAL = 0x9063,CONFERR_SUCCESS = 0x0,};
enum MACRO_CONNDLG {CONNDLG_RO_PATH = 0x1,CONNDLG_CONN_POINT = 0x2,CONNDLG_USE_MRU = 0x4,CONNDLG_HIDE_BOX = 0x8,CONNDLG_PERSIST = 0x10,CONNDLG_NOT_PERSIST = 0x20,};
enum MACRO_CONNECT {CONNECT_UPDATE_PROFILE = 0x1,CONNECT_UPDATE_RECENT = 0x2,CONNECT_TEMPORARY = 0x4,CONNECT_INTERACTIVE = 0x8,CONNECT_PROMPT = 0x10,CONNECT_NEED_DRIVE = 0x20,CONNECT_REFCOUNT = 0x40,CONNECT_REDIRECT = 0x80,CONNECT_LOCALDRIVE = 0x100,CONNECT_CURRENT_MEDIA = 0x200,CONNECT_DEFERRED = 0x400,CONNECT_RESERVED = 0xFF000000,};
enum MACRO_CONSOLE {CONSOLE_TEXTMODE_BUFFER = 1,};
enum MACRO_CONTEXT {CONTEXT_i386 = 0x10000,CONTEXT_i486 = 0x10000,CONTEXT_CONTROL = 0x10001,CONTEXT_INTEGER = 0x10002,CONTEXT_SEGMENTS = 0x10004,CONTEXT_FLOATING_POINT = 0x10008,CONTEXT_DEBUG_REGISTERS = 0x10010,CONTEXT_EXTENDED_REGISTERS = 0x10020,CONTEXT_FULL = 0x10007,};
enum MACRO_CONTROL {CONTROL_C_EXIT = 3221225786,};
enum MACRO_COPYFLG {COPYFLG_WARN_IF_SKIP = 0x1,COPYFLG_NOSKIP = 0x2,COPYFLG_NOVERSIONCHECK = 0x4,COPYFLG_FORCE_FILE_IN_USE = 0x8,COPYFLG_NO_OVERWRITE = 0x10,COPYFLG_NO_VERSION_DIALOG = 0x20,COPYFLG_OVERWRITE_OLDER_ONLY = 0x40,COPYFLG_REPLACEONLY = 0x400,};
enum MACRO_CPLPAGE {CPLPAGE_MOUSE_BUTTONS = 1,CPLPAGE_MOUSE_PTRMOTION = 2,CPLPAGE_KEYBOARD_SPEED = 1,};
enum MACRO_CP_ANSI {CP_ANSI = 1252,};
enum MACRO_CP_HWND {CP_HWND = 0,CP_OPEN = 1,CP_DIRECT = 2,CP_LEVEL = 3,};
enum MACRO_CRSHUTD {CRSHUTD = 19,};
enum MACRO_CRYPT_Y {CRYPT_Y_ONLY = 0x1,CRYPT_SSL2_SLUMMING = 0x2,CRYPT_LITTLE_ENDIAN = 0x1,CRYPT_MACHINE_DEFAULT = 0x1,CRYPT_USER_DEFAULT = 0x2,CRYPT_DELETE_DEFAULT = 0x4,};
enum MACRO_CSIGNAL {CSIGNAL = 18,};
enum MACRO_CSUTERM {CSUTERM = 3,CSUBUFSH = 4,};
enum MACRO_CTLINIT {CTLINIT_HEDIT = 1,CTLINIT_BEDIT = 7,CTLINIT_IEDIT = 9,CTLINIT_MAX = 10,};
enum MACRO_CTLREQU {CTLREQU = 1,};
enum MACRO_CTL_ANY {CTL_ANY_SUBJECT_TYPE = 1,CTL_CERT_SUBJECT_TYPE = 2,CTL_FIND_ANY = 0,CTL_FIND_SHA1_HASH = 1,CTL_FIND_MD5_HASH = 2,CTL_FIND_USAGE = 3,CTL_FIND_SUBJECT = 4,CTL_FIND_NO_LIST_ID_CBDATA = -1,CTL_FIND_NO_SIGNER_PTR = -1,CTL_FIND_SAME_USAGE_FLAG = 1,};
enum MACRO_D3DCLIP {D3DCLIP_LEFT = 0x1,D3DCLIP_RIGHT = 0x2,D3DCLIP_TOP = 0x4,D3DCLIP_BOTTOM = 0x8,D3DCLIP_FRONT = 0x10,D3DCLIP_BACK = 0x20,D3DCLIP_GEN0 = 0x40,D3DCLIP_GEN1 = 0x80,D3DCLIP_GEN2 = 0x100,D3DCLIP_GEN3 = 0x200,D3DCLIP_GEN4 = 0x400,D3DCLIP_GEN5 = 0x800,};
enum MACRO_D3DNEXT {D3DNEXT_NEXT = 0x1,D3DNEXT_HEAD = 0x2,D3DNEXT_TAIL = 0x4,};
enum MACRO_DAPIMSG {DAPIMSG_DISPLAY_CURRENT = 0x6,DAPIMSG_DISPLAY_CREATE = 0x7,DAPIMSG_DISPLAY_MODIFY = 0x8,DAPIMSG_DISPLAY_DELETE = 0x9,DAPIMSG_DISPLAY_EXPORTING = 0xA,DAPIMSG_DISPLAY_EXTRACTING = 0xB,};
enum MACRO_DBSETID {DBSETID = 5,};
enum MACRO_DBVER60 {DBVER60 = 9,};
enum MACRO_DB_NULL {DB_NULL_HCHAPTER = 0x0,DB_INVALID_HCHAPTER = 0x0,};
enum MACRO_DB_PROT {DB_PROT_LEVEL_NONE = 0x0,DB_PROT_LEVEL_CONNECT = 0x1,DB_PROT_LEVEL_CALL = 0x2,DB_PROT_LEVEL_PKT = 0x3,DB_PROT_LEVEL_PKT_INTEGRITY = 0x4,DB_PROT_LEVEL_PKT_PRIVACY = 0x5,DB_MODE_READ = 0x1,DB_MODE_WRITE = 0x2,DB_MODE_READWRITE = 0x3,DB_MODE_SHARE_DENY_READ = 0x4,DB_MODE_SHARE_DENY_WRITE = 0x8,DB_MODE_SHARE_EXCLUSIVE = 0xC,DB_MODE_SHARE_DENY_NONE = 0x10,};
enum MACRO_DDBLTFX {DDBLTFX_ARITHSTRETCHY = 0x1,DDBLTFX_MIRRORLEFTRIGHT = 0x2,DDBLTFX_MIRRORUPDOWN = 0x4,DDBLTFX_NOTEARING = 0x8,DDBLTFX_ROTATE180 = 0x10,DDBLTFX_ROTATE270 = 0x20,DDBLTFX_ROTATE90 = 0x40,DDBLTFX_ZBUFFERRANGE = 0x80,DDBLTFX_ZBUFFERBASEDEST = 0x100,};
enum MACRO_DDCAPS2 {DDCAPS2_CERTIFIED = 0x1,DDCAPS2_NO2DDURING3DSCENE = 0x2,DDCAPS2_VIDEOPORT = 0x4,DDCAPS2_AUTOFLIPOVERLAY = 0x8,DDCAPS2_CANBOBINTERLEAVED = 0x10,DDCAPS2_CANBOBNONINTERLEAVED = 0x20,DDCAPS2_COLORCONTROLOVERLAY = 0x40,DDCAPS2_COLORCONTROLPRIMARY = 0x80,DDCAPS2_CANDROPZ16BIT = 0x100,DDCAPS2_NONLOCALVIDMEM = 0x200,DDCAPS2_NONLOCALVIDMEMCAPS = 0x400,DDCAPS2_NOPAGELOCKREQUIRED = 0x800,DDCAPS2_WIDESURFACES = 0x1000,DDCAPS2_CANFLIPODDEVEN = 0x2000,DDCAPS2_CANBOBHARDWARE = 0x4000,DDCAPS2_COPYFOURCC = 0x8000,};
enum MACRO_DDCOLOR {DDCOLOR_BRIGHTNESS = 0x1,DDCOLOR_CONTRAST = 0x2,DDCOLOR_HUE = 0x4,DDCOLOR_SATURATION = 0x8,DDCOLOR_SHARPNESS = 0x10,DDCOLOR_GAMMA = 0x20,DDCOLOR_COLORENABLE = 0x40,};
enum MACRO_DDOVERZ {DDOVERZ_SENDTOFRONT = 0x0,DDOVERZ_SENDTOBACK = 0x1,DDOVERZ_MOVEFORWARD = 0x2,DDOVERZ_MOVEBACKWARD = 0x3,DDOVERZ_INSERTINFRONTOF = 0x4,DDOVERZ_INSERTINBACKOF = 0x5,};
enum MACRO_DDPCAPS {DDPCAPS_4BIT = 0x1,DDPCAPS_8BITENTRIES = 0x2,DDPCAPS_8BIT = 0x4,DDPCAPS_INITIALIZE = 0x8,DDPCAPS_PRIMARYSURFACE = 0x10,DDPCAPS_PRIMARYSURFACELEFT = 0x20,DDPCAPS_ALLOW256 = 0x40,DDPCAPS_VSYNC = 0x80,DDPCAPS_1BIT = 0x100,DDPCAPS_2BIT = 0x200,};
enum MACRO_DDSCAPS {DDSCAPS_RESERVED1 = 0x1,DDSCAPS_ALPHA = 0x2,DDSCAPS_BACKBUFFER = 0x4,DDSCAPS_COMPLEX = 0x8,DDSCAPS_FLIP = 0x10,DDSCAPS_FRONTBUFFER = 0x20,DDSCAPS_OFFSCREENPLAIN = 0x40,DDSCAPS_OVERLAY = 0x80,DDSCAPS_PALETTE = 0x100,DDSCAPS_PRIMARYSURFACE = 0x200,DDSCAPS_PRIMARYSURFACELEFT = 0x400,DDSCAPS_SYSTEMMEMORY = 0x800,DDSCAPS_TEXTURE = 0x1000,DDSCAPS_3DDEVICE = 0x2000,DDSCAPS_VIDEOMEMORY = 0x4000,DDSCAPS_VISIBLE = 0x8000,DDSCAPS_WRITEONLY = 0x10000,DDSCAPS_ZBUFFER = 0x20000,DDSCAPS_OWNDC = 0x40000,DDSCAPS_LIVEVIDEO = 0x80000,DDSCAPS_HWCODEC = 0x100000,DDSCAPS_MODEX = 0x200000,DDSCAPS_MIPMAP = 0x400000,DDSCAPS_RESERVED2 = 0x800000,DDSCAPS_ALLOCONLOAD = 0x4000000,DDSCAPS_VIDEOPORT = 0x8000000,DDSCAPS_LOCALVIDMEM = 0x10000000,DDSCAPS_NONLOCALVIDMEM = 0x20000000,DDSCAPS_STANDARDVGAMODE = 0x40000000,DDSCAPS_OPTIMIZED = 0x80000000,};
enum MACRO_DECIMAL {DECIMAL_NEG = 0x80,};
enum MACRO_DEFAULT {DEFAULT_PALETTE = 15,};
enum MACRO_DESKTOP {DESKTOP_READOBJECTS = 0x1,DESKTOP_CREATEWINDOW = 0x2,DESKTOP_CREATEMENU = 0x4,DESKTOP_HOOKCONTROL = 0x8,DESKTOP_JOURNALRECORD = 0x10,DESKTOP_JOURNALPLAYBACK = 0x20,DESKTOP_ENUMERATE = 0x40,DESKTOP_WRITEOBJECTS = 0x80,DESKTOP_SWITCHDESKTOP = 0x100,};
enum MACRO_DISPLAY {DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x1,DISPLAY_DEVICE_MULTI_DRIVER = 0x2,DISPLAY_DEVICE_PRIMARY_DEVICE = 0x4,DISPLAY_DEVICE_MIRRORING_DRIVER = 0x8,DISPLAY_DEVICE_VGA_COMPATIBLE = 0x10,};
enum MACRO_DI_MASK {DI_MASK = 0x1,DI_IMAGE = 0x2,DI_NORMAL = 0x3,DI_COMPAT = 0x4,DI_DEFAULTSIZE = 0x8,};
enum MACRO_DMCOLOR {DMCOLOR_MONOCHROME = 1,DMCOLOR_COLOR = 2,};
enum MACRO_DMCOMNM {DMCOMNM = 582,};
enum MACRO_DMDSTFL {DMDSTFL = 563,};
enum MACRO_DMLTABF {DMLTABF = 555,};
enum MACRO_DMMEDIA {DMMEDIA_STANDARD = 1,DMMEDIA_TRANSPARENCY = 2,DMMEDIA_GLOSSY = 3,DMMEDIA_USER = 256,};
enum MACRO_DMMNWGI {DMMNWGI = 562,};
enum MACRO_DMMPIPF {DMMPIPF = 567,};
enum MACRO_DMNONAP {DMNONAP = 625,};
enum MACRO_DMPAPER {DMPAPER_LETTER = 1,DMPAPER_LETTERSMALL = 2,DMPAPER_TABLOID = 3,DMPAPER_LEDGER = 4,DMPAPER_LEGAL = 5,DMPAPER_STATEMENT = 6,DMPAPER_EXECUTIVE = 7,DMPAPER_A3 = 8,DMPAPER_A4 = 9,DMPAPER_A4SMALL = 10,DMPAPER_A5 = 11,DMPAPER_B4 = 12,DMPAPER_B5 = 13,DMPAPER_FOLIO = 14,DMPAPER_QUARTO = 15,DMPAPER_10X14 = 16,DMPAPER_11X17 = 17,DMPAPER_NOTE = 18,DMPAPER_ENV_9 = 19,DMPAPER_ENV_10 = 20,DMPAPER_ENV_11 = 21,DMPAPER_ENV_12 = 22,DMPAPER_ENV_14 = 23,DMPAPER_CSHEET = 24,DMPAPER_DSHEET = 25,DMPAPER_ESHEET = 26,DMPAPER_ENV_DL = 27,DMPAPER_ENV_C5 = 28,DMPAPER_ENV_C3 = 29,DMPAPER_ENV_C4 = 30,DMPAPER_ENV_C6 = 31,DMPAPER_ENV_C65 = 32,DMPAPER_ENV_B4 = 33,DMPAPER_ENV_B5 = 34,DMPAPER_ENV_B6 = 35,DMPAPER_ENV_ITALY = 36,DMPAPER_ENV_MONARCH = 37,DMPAPER_ENV_PERSONAL = 38,DMPAPER_FANFOLD_US = 39,DMPAPER_FANFOLD_STD_GERMAN = 40,DMPAPER_FANFOLD_LGL_GERMAN = 41,DMPAPER_ISO_B4 = 42,DMPAPER_JAPANESE_POSTCARD = 43,DMPAPER_9X11 = 44,DMPAPER_10X11 = 45,DMPAPER_15X11 = 46,DMPAPER_ENV_INVITE = 47,DMPAPER_RESERVED_48 = 48,DMPAPER_RESERVED_49 = 49,DMPAPER_LETTER_EXTRA = 50,DMPAPER_LEGAL_EXTRA = 51,DMPAPER_TABLOID_EXTRA = 52,DMPAPER_A4_EXTRA = 53,DMPAPER_LETTER_TRANSVERSE = 54,DMPAPER_A4_TRANSVERSE = 55,DMPAPER_LETTER_EXTRA_TRANSVERSE = 56,DMPAPER_A_PLUS = 57,DMPAPER_B_PLUS = 58,DMPAPER_LETTER_PLUS = 59,DMPAPER_A4_PLUS = 60,DMPAPER_A5_TRANSVERSE = 61,DMPAPER_B5_TRANSVERSE = 62,DMPAPER_A3_EXTRA = 63,DMPAPER_A5_EXTRA = 64,DMPAPER_B5_EXTRA = 65,DMPAPER_A2 = 66,DMPAPER_A3_TRANSVERSE = 67,DMPAPER_A3_EXTRA_TRANSVERSE = 68,DMPAPER_DBL_JAPANESE_POSTCARD = 69,DMPAPER_A6 = 70,DMPAPER_JENV_KAKU2 = 71,DMPAPER_JENV_KAKU3 = 72,DMPAPER_JENV_CHOU3 = 73,DMPAPER_JENV_CHOU4 = 74,DMPAPER_LETTER_ROTATED = 75,DMPAPER_A3_ROTATED = 76,DMPAPER_A4_ROTATED = 77,DMPAPER_A5_ROTATED = 78,DMPAPER_B4_JIS_ROTATED = 79,DMPAPER_B5_JIS_ROTATED = 80,DMPAPER_JAPANESE_POSTCARD_ROTATED = 81,DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82,DMPAPER_A6_ROTATED = 83,DMPAPER_JENV_KAKU2_ROTATED = 84,DMPAPER_JENV_KAKU3_ROTATED = 85,DMPAPER_JENV_CHOU3_ROTATED = 86,DMPAPER_JENV_CHOU4_ROTATED = 87,DMPAPER_B6_JIS = 88,DMPAPER_B6_JIS_ROTATED = 89,DMPAPER_12X11 = 90,DMPAPER_JENV_YOU4 = 91,DMPAPER_JENV_YOU4_ROTATED = 92,DMPAPER_P16K = 93,DMPAPER_P32K = 94,DMPAPER_P32KBIG = 95,DMPAPER_PENV_1 = 96,DMPAPER_PENV_2 = 97,DMPAPER_PENV_3 = 98,DMPAPER_PENV_4 = 99,DMPAPER_PENV_5 = 100,DMPAPER_PENV_6 = 101,DMPAPER_PENV_7 = 102,DMPAPER_PENV_8 = 103,DMPAPER_PENV_9 = 104,DMPAPER_PENV_10 = 105,DMPAPER_P16K_ROTATED = 106,DMPAPER_P32K_ROTATED = 107,DMPAPER_P32KBIG_ROTATED = 108,DMPAPER_PENV_1_ROTATED = 109,DMPAPER_PENV_2_ROTATED = 110,DMPAPER_PENV_3_ROTATED = 111,DMPAPER_PENV_4_ROTATED = 112,DMPAPER_PENV_5_ROTATED = 113,DMPAPER_PENV_6_ROTATED = 114,DMPAPER_PENV_7_ROTATED = 115,DMPAPER_PENV_8_ROTATED = 116,DMPAPER_PENV_9_ROTATED = 117,DMPAPER_PENV_10_ROTATED = 118,DMPAPER_LAST = 118,DMPAPER_USER = 256,};
enum MACRO_DNPROTO {DNPROTO_NSP = 1,DNPROTO_RAW = 255,};
enum MACRO_DN_NONE {DN_NONE = 0x0,DN_RO = 0x1,DN_WO = 0x2,DN_RW = 0x3,};
enum MACRO_DOSOPTF {DOSOPTF_DEFAULT = 0x1,DOSOPTF_SUPPORTED = 0x2,DOSOPTF_ALWAYSUSE = 0x4,DOSOPTF_USESPMODE = 0x8,DOSOPTF_PROVIDESUMB = 0x10,DOSOPTF_NEEDSETUP = 0x20,DOSOPTF_INDOSSTART = 0x40,DOSOPTF_MULTIPLE = 0x80,};
enum MACRO_DPGROUP {DPGROUP_STAGINGAREA = 2048,DPGROUP_LOCAL = 8,};
enum MACRO_DPROMPT {DPROMPT_SUCCESS = 0,DPROMPT_CANCEL = 1,DPROMPT_SKIPFILE = 2,DPROMPT_BUFFERTOOSMALL = 3,DPROMPT_OUTOFMEMORY = 4,};
enum MACRO_DSBCAPS {DSBCAPS_PRIMARYBUFFER = 0x1,DSBCAPS_STATIC = 0x2,DSBCAPS_LOCHARDWARE = 0x4,DSBCAPS_LOCSOFTWARE = 0x8,DSBCAPS_CTRL3D = 0x10,DSBCAPS_CTRLFREQUENCY = 0x20,DSBCAPS_CTRLPAN = 0x40,DSBCAPS_CTRLVOLUME = 0x80,DSBCAPS_CTRLPOSITIONNOTIFY = 0x100,DSBCAPS_CTRLDEFAULT = 0xE0,DSBCAPS_CTRLALL = 0x1F0,DSBCAPS_STICKYFOCUS = 0x4000,DSBCAPS_GLOBALFOCUS = 0x8000,DSBCAPS_GETCURRENTPOSITION2 = 0x10000,DSBCAPS_MUTE3DATMAXDISTANCE = 0x20000,};
enum MACRO_DSBLOCK {DSBLOCK_FROMWRITECURSOR = 0x1,DSBLOCK_ENTIREBUFFER = 0x2,};
enum MACRO_DSBPLAY {DSBPLAY_LOOPING = 0x1,};
enum MACRO_DSBSIZE {DSBSIZE_MIN = 4,DSBSIZE_MAX = 268435455,};
enum MACRO_DSCCAPS {DSCCAPS_EMULDRIVER = 0x20,};
enum MACRO_DSPRINT {DSPRINT_PUBLISH = 1,DSPRINT_UPDATE = 2,DSPRINT_UNPUBLISH = 3,};
enum MACRO_DYNAWIZ {DYNAWIZ_FLAG_PAGESADDED = 0x1,DYNAWIZ_FLAG_INSTALLDET_NEXT = 0x2,DYNAWIZ_FLAG_INSTALLDET_PREV = 0x4,DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = 0x8,};
enum MACRO_EAPCODE {EAPCODE_Request = 1,EAPCODE_Response = 2,EAPCODE_Success = 3,EAPCODE_Failure = 4,};
enum MACRO_EDK_MAX {EDK_MAX_QUERY_ROWS = 1024,};
enum MACRO_EECBGMP {EECBGMP_RANGE = 0x1,};
enum MACRO_EECMDID {EECMDID_File = 10,EECMDID_FileOpen = 11,EECMDID_FileSend = 12,EECMDID_FileSave = 13,EECMDID_FileSaveAs = 14,EECMDID_FileMove = 16,EECMDID_FileCopy = 17,EECMDID_FilePrint = 25,EECMDID_FileNewEntry = 18,EECMDID_FileNewMessage = 19,EECMDID_FileNewFolder = 20,EECMDID_FileAddToPAB = 29,EECMDID_FileDelete = 21,EECMDID_FileRename = 22,EECMDID_FileProperties = 23,EECMDID_FilePropertiesRecipients = 24,EECMDID_FileClose = 30,EECMDID_FileExit = 32,EECMDID_FileExitAndLogOff = 33,EECMDID_Edit = 40,EECMDID_EditUndo = 41,EECMDID_EditCut = 42,EECMDID_EditCopy = 43,EECMDID_EditPaste = 44,EECMDID_EditPasteSpecial = 45,EECMDID_EditSelectAll = 46,EECMDID_EditMarkAsRead = 49,EECMDID_EditMarkAsUnread = 50,EECMDID_EditMarkToRetrieve = 52,EECMDID_EditMarkToRetrieveACopy = 53,EECMDID_EditMarkToDelete = 54,EECMDID_EditUnmarkAll = 55,EECMDID_EditFind = 56,EECMDID_EditReplace = 57,EECMDID_EditLinks = 59,EECMDID_EditObject = 60,EECMDID_EditObjectConvert = 61,EECMDID_View = 70,EECMDID_ViewFolders = 71,EECMDID_ViewToolbar = 72,EECMDID_ViewFormattingToolbar = 73,EECMDID_ViewStatusBar = 74,EECMDID_ViewNewWindow = 75,EECMDID_ViewColumns = 79,EECMDID_ViewSort = 78,EECMDID_ViewFilter = 80,EECMDID_ViewBccBox = 91,EECMDID_ViewPrevious = 87,EECMDID_ViewNext = 88,EECMDID_Insert = 100,EECMDID_InsertFile = 101,EECMDID_InsertMessage = 102,EECMDID_InsertObject = 103,EECMDID_InsertInkObject = 104,EECMDID_Format = 110,EECMDID_FormatFont = 111,EECMDID_FormatParagraph = 112,EECMDID_Tools = 120,EECMDID_ToolsDeliverNowUsing = 121,EECMDID_ToolsDeliverNow = 122,EECMDID_ToolsSpelling = 131,EECMDID_ToolsAddressBook = 123,EECMDID_ToolsCheckNames = 133,EECMDID_ToolsFind = 124,EECMDID_ToolsConnect = 126,EECMDID_ToolsUpdateHeaders = 127,EECMDID_ToolsTransferMail = 128,EECMDID_ToolsDisconnect = 129,EECMDID_ToolsRemoteMail = 130,EECMDID_ToolsCustomizeToolbar = 134,EECMDID_ToolsServices = 135,EECMDID_ToolsOptions = 136,EECMDID_Compose = 150,EECMDID_ComposeNewMessage = 151,EECMDID_ComposeReplyToSender = 154,EECMDID_ComposeReplyToAll = 155,EECMDID_ComposeForward = 156,EECMDID_Help = 160,EECMDID_HelpMicrosoftExchangeHelpTopics = 161,EECMDID_HelpAboutMicrosoftExchange = 162,EECMDID_CtxHeader = 203,EECMDID_CtxHeaderSortAscending = 204,EECMDID_CtxHeaderSortDescending = 205,EECMDID_CtxInFolder = 206,EECMDID_CtxInFolderChoose = 207,EECMDID_CtxContainer = 208,EECMDID_CtxContainerProperties = 209,EECMDID_Toolbar = 220,EECMDID_ToolbarPrint = 221,EECMDID_ToolbarReadReceipt = 222,EECMDID_ToolbarImportanceHigh = 223,EECMDID_ToolbarImportanceLow = 224,EECMDID_ToolbarFolderList = 225,EECMDID_ToolbarOpenParent = 226,EECMDID_ToolbarInbox = 76,EECMDID_ToolbarOutbox = 77,EECMDID_Formatting = 230,EECMDID_FormattingFont = 231,EECMDID_FormattingSize = 232,EECMDID_FormattingColor = 233,EECMDID_FormattingColorAuto = 234,EECMDID_FormattingColor1 = 235,EECMDID_FormattingColor2 = 236,EECMDID_FormattingColor3 = 237,EECMDID_FormattingColor4 = 238,EECMDID_FormattingColor5 = 239,EECMDID_FormattingColor6 = 240,EECMDID_FormattingColor7 = 241,EECMDID_FormattingColor8 = 242,EECMDID_FormattingColor9 = 243,EECMDID_FormattingColor10 = 244,EECMDID_FormattingColor11 = 245,EECMDID_FormattingColor12 = 246,EECMDID_FormattingColor13 = 247,EECMDID_FormattingColor14 = 248,EECMDID_FormattingColor15 = 249,EECMDID_FormattingColor16 = 250,EECMDID_FormattingBold = 251,EECMDID_FormattingItalic = 252,EECMDID_FormattingUnderline = 253,EECMDID_FormattingBullets = 254,EECMDID_FormattingDecreaseIndent = 255,EECMDID_FormattingIncreaseIndent = 256,EECMDID_FormattingLeft = 257,EECMDID_FormattingCenter = 258,EECMDID_FormattingRight = 259,EECMDID_Accel = 270,EECMDID_AccelFont = 271,EECMDID_AccelSize = 272,EECMDID_AccelSizePlus1 = 273,EECMDID_AccelSizeMinus1 = 274,EECMDID_AccelBold = 275,EECMDID_AccelItalic = 276,EECMDID_AccelUnderline = 277,EECMDID_AccelLeft = 278,EECMDID_AccelCenter = 279,EECMDID_AccelRight = 280,EECMDID_AccelBullets = 281,EECMDID_AccelNoFormatting = 282,EECMDID_AccelRepeatFind = 283,EECMDID_AccelContextHelp = 284,EECMDID_AccelNextWindow = 285,EECMDID_AccelPrevWindow = 286,EECMDID_AccelCtrlTab = 287,EECMDID_AccelUndo = 288,EECMDID_AccelCut = 289,EECMDID_AccelCopy = 290,EECMDID_AccelPaste = 291,EECMDID_AccelSubject = 292,EECMDID_AccelContextHelpOff = 293,EECMDID_AccelDecreaseIndent = 294,EECMDID_AccelIncreaseIndent = 295,EECMDID_AccelColor = 296,EECMDID_ObjectMin = 300,EECMDID_ObjectMax = 399,EECMDID_RemoteMailMin = 600,EECMDID_RemoteMailMax = 699,EECMDID_DeliverNowUsingMin = 700,EECMDID_DeliverNowUsingMax = 799,EECMDID_FormVerbMin = 800,EECMDID_FormVerbMax = 899,EECMDID_ViewInbox = 76,EECMDID_ViewOutbox = 77,EECMDID_ViewItemAbove = 87,EECMDID_ViewItemBelow = 88,EECMDID_ToolsFindItem = 124,EECMDID_HelpUsersGuideContents = 161,EECMDID_HelpAbout = 162,};
enum MACRO_ELEMENT {LOCK_ELEMENT = 0,UNLOCK_ELEMENT = 1,};
enum MACRO_EMBDHLP {EMBDHLP_INPROC_HANDLER = 0x0,EMBDHLP_INPROC_SERVER = 0x1,EMBDHLP_CREATENOW = 0x0,EMBDHLP_DELAYCREATE = 0x10000,};
enum MACRO_ENHMETA {ENHMETA_SIGNATURE = 0x464D4520,ENHMETA_STOCK_OBJECT = 0x80000000,};
enum MACRO_ENUMEXT {ENUMEXT_OBJECTID = 0x1,};
enum MACRO_ERRLOG2 {ERRLOG2_BASE = 5700,};
enum MACRO_ERROR_0 {ERROR = 0,NULLREGION = 1,SIMPLEREGION = 2,};
enum MACRO_ES_LEFT {ES_LEFT = 0x0,ES_CENTER = 0x1,ES_RIGHT = 0x2,ES_MULTILINE = 0x4,ES_UPPERCASE = 0x8,ES_LOWERCASE = 0x10,ES_PASSWORD = 0x20,ES_AUTOVSCROLL = 0x40,ES_AUTOHSCROLL = 0x80,ES_NOHIDESEL = 0x100,ES_OEMCONVERT = 0x400,ES_READONLY = 0x800,ES_WANTRETURN = 0x1000,ES_NUMBER = 0x2000,};
enum MACRO_EXCHEXT {EXCHEXT_S_NOCRITERIA = 262145,EXCHEXT_S_NOCHANGE = 262146,EXCHEXT_UNICODE = -2147483648,};
enum MACRO_EXECUTE {EXECUTE_OFFLINE_DIAGS = 0xD4,};
enum MACRO_EXFATAL {EXFATAL = 10,};
enum MACRO_EXT_API {EXT_API_VERSION_NUMBER = 5,};
enum MACRO_E_FLAGS {E_FLAGS = 0x80041000,};
enum MACRO_E_PARSE {EC_EDK_E_PARSE = 0x6,EDK_E_PARSE = 0x800B0006,};
enum MACRO_FDAEMON {FDAEMON_W_WORDLISTFULL = 0x41680,FDAEMON_E_LOWRESOURCE = 0x80041681,FDAEMON_E_FATALERROR = 0x80041682,FDAEMON_E_PARTITIONDELETED = 0x80041683,FDAEMON_E_CHANGEUPDATEFAILED = 0x80041684,FDAEMON_W_EMPTYWORDLIST = 0x41685,FDAEMON_E_WORDLISTCOMMITFAILED = 0x80041686,FDAEMON_E_NOWORDLIST = 0x80041687,FDAEMON_E_TOOMANYFILTEREDBLOCKS = 0x80041688,};
enum MACRO_FD_READ {FD_READ_BIT = 0,FD_READ = 1,FD_WRITE_BIT = 1,FD_WRITE = 2,FD_OOB_BIT = 2,FD_OOB = 4,FD_ACCEPT_BIT = 3,FD_ACCEPT = 8,FD_CONNECT_BIT = 4,FD_CONNECT = 16,FD_CLOSE_BIT = 5,FD_CLOSE = 32,FD_QOS_BIT = 6,FD_QOS = 64,FD_GROUP_QOS_BIT = 7,FD_GROUP_QOS = 128,FD_ROUTING_INTERFACE_CHANGE_BIT = 8,FD_ROUTING_INTERFACE_CHANGE = 256,FD_ADDRESS_LIST_CHANGE_BIT = 9,FD_ADDRESS_LIST_CHANGE = 512,FD_MAX_EVENTS = 10,FD_ALL_EVENTS = 1023,};
enum MACRO_FMEVENT {FMEVENT_LOAD = 100,FMEVENT_UNLOAD = 101,FMEVENT_INITMENU = 102,FMEVENT_USER_REFRESH = 103,FMEVENT_SELCHANGE = 104,FMEVENT_TOOLBARLOAD = 105,FMEVENT_HELPSTRING = 106,FMEVENT_HELPMENUITEM = 107,};
enum MACRO_FMFOCUS {FMFOCUS_DIR = 1,FMFOCUS_TREE = 2,FMFOCUS_DRIVES = 3,FMFOCUS_SEARCH = 4,};
enum MACRO_FR_DOWN {FR_DOWN = 0x1,FR_WHOLEWORD = 0x2,FR_MATCHCASE = 0x4,FR_FINDNEXT = 0x8,FR_REPLACE = 0x10,FR_REPLACEALL = 0x20,FR_DIALOGTERM = 0x40,FR_SHOWHELP = 0x80,FR_ENABLEHOOK = 0x100,FR_ENABLETEMPLATE = 0x200,FR_NOUPDOWN = 0x400,FR_NOMATCHCASE = 0x800,FR_NOWHOLEWORD = 0x1000,FR_ENABLETEMPLATEHANDLE = 0x2000,FR_HIDEUPDOWN = 0x4000,FR_HIDEMATCHCASE = 0x8000,FR_HIDEWHOLEWORD = 0x10000,};
enum MACRO_FTGNULL {FTGNULL = 0,};
enum MACRO_GATEWAY {GATEWAY_ACTIVE = 0x8,};
enum MACRO_GENERIC {GENERIC_READ = 0x80000000,GENERIC_WRITE = 0x40000000,GENERIC_EXECUTE = 0x20000000,GENERIC_ALL = 0x10000000,};
enum MACRO_HBMMENU {HBMMENU_CALLBACK = -1,HBMMENU_SYSTEM = 1,HBMMENU_MBAR_RESTORE = 2,HBMMENU_MBAR_MINIMIZE = 3,HBMMENU_MBAR_CLOSE = 5,HBMMENU_MBAR_CLOSE_D = 6,HBMMENU_MBAR_MINIMIZE_D = 7,HBMMENU_POPUP_CLOSE = 8,HBMMENU_POPUP_RESTORE = 9,HBMMENU_POPUP_MAXIMIZE = 10,HBMMENU_POPUP_MINIMIZE = 11,};
enum MACRO_HFRMREG {HFRMREG_DEFAULT = 0,HFRMREG_LOCAL = 1,HFRMREG_PERSONAL = 2,HFRMREG_FOLDER = 3,};
enum MACRO_HIST_NO {HIST_NO_OF_BUCKETS = 24,};
enum MACRO_HOSTSEC {HOSTSEC_MDSI_VERSION_1_1 = 0x10001,HOSTSEC_MDSI_VERSION_1_2 = 0x10002,HOSTSEC_MDSI_CURRENT_VERSION = 0x10002,HOSTSEC_SHUTDOWN_NORMAL = 0x1,HOSTSEC_SHUTDOWN_DONE = 0x2,HOSTSEC_SHUTDOWN_ABORT = 0x3,HOSTSEC_PING_LOCAL_CONFIG_ERROR = 0x1,HOSTSEC_PING_REMOTE_TP_UNAVAILABLE_RETRY = 0x2,HOSTSEC_PING_REMOTE_TP_UNAVAILABLE_NORETRY = 0x3,HOSTSEC_PING_REMOTE_UNREACHABLE = 0x4,};
enum MACRO_HOTKEYF {HOTKEYF_SHIFT = 0x1,HOTKEYF_CONTROL = 0x2,HOTKEYF_ALT = 0x4,HOTKEYF_EXT = 0x8,};
enum MACRO_HPIMAGE {HPIMAGE = 19,};
enum MACRO_HRESULT {E_UNEXPECTED = 0x8000FFFF,E_NOTIMPL = 0x80004001,E_OUTOFMEMORY = 0x8007000E,E_INVALIDARG = 0x80070057,E_NOINTERFACE = 0x80004002,E_POINTER = 0x80004003,E_HANDLE = 0x80070006,E_ABORT = 0x80004004,E_FAIL = 0x80004005,E_ACCESSDENIED = 0x80070005,E_PENDING = 0x8000000A,CO_E_INIT_TLS = 0x80004006,CO_E_INIT_SHARED_ALLOCATOR = 0x80004007,CO_E_INIT_MEMORY_ALLOCATOR = 0x80004008,CO_E_INIT_CLASS_CACHE = 0x80004009,CO_E_INIT_RPC_CHANNEL = 0x8000400A,CO_E_INIT_TLS_SET_CHANNEL_CONTROL = 0x8000400B,CO_E_INIT_TLS_CHANNEL_CONTROL = 0x8000400C,CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = 0x8000400D,CO_E_INIT_SCM_MUTEX_EXISTS = 0x8000400E,CO_E_INIT_SCM_FILE_MAPPING_EXISTS = 0x8000400F,CO_E_INIT_SCM_MAP_VIEW_OF_FILE = 0x80004010,CO_E_INIT_SCM_EXEC_FAILURE = 0x80004011,CO_E_INIT_ONLY_SINGLE_THREADED = 0x80004012,CO_E_CANT_REMOTE = 0x80004013,CO_E_BAD_SERVER_NAME = 0x80004014,CO_E_WRONG_SERVER_IDENTITY = 0x80004015,CO_E_OLE1DDE_DISABLED = 0x80004016,CO_E_RUNAS_SYNTAX = 0x80004017,CO_E_CREATEPROCESS_FAILURE = 0x80004018,CO_E_RUNAS_CREATEPROCESS_FAILURE = 0x80004019,CO_E_RUNAS_LOGON_FAILURE = 0x8000401A,CO_E_LAUNCH_PERMSSION_DENIED = 0x8000401B,CO_E_START_SERVICE_FAILURE = 0x8000401C,CO_E_REMOTE_COMMUNICATION_FAILURE = 0x8000401D,CO_E_SERVER_START_TIMEOUT = 0x8000401E,CO_E_CLSREG_INCONSISTENT = 0x8000401F,CO_E_IIDREG_INCONSISTENT = 0x80004020,CO_E_NOT_SUPPORTED = 0x80004021,CO_E_RELOAD_DLL = 0x80004022,CO_E_MSI_ERROR = 0x80004023,OLE_E_OLEVERB = 0x80040000,OLE_E_ADVF = 0x80040001,OLE_E_ENUM_NOMORE = 0x80040002,OLE_E_ADVISENOTSUPPORTED = 0x80040003,OLE_E_NOCONNECTION = 0x80040004,OLE_E_NOTRUNNING = 0x80040005,OLE_E_NOCACHE = 0x80040006,OLE_E_BLANK = 0x80040007,OLE_E_CLASSDIFF = 0x80040008,OLE_E_CANT_GETMONIKER = 0x80040009,OLE_E_CANT_BINDTOSOURCE = 0x8004000A,OLE_E_STATIC = 0x8004000B,OLE_E_PROMPTSAVECANCELLED = 0x8004000C,OLE_E_INVALIDRECT = 0x8004000D,OLE_E_WRONGCOMPOBJ = 0x8004000E,OLE_E_INVALIDHWND = 0x8004000F,OLE_E_NOT_INPLACEACTIVE = 0x80040010,OLE_E_CANTCONVERT = 0x80040011,OLE_E_NOSTORAGE = 0x80040012,DV_E_FORMATETC = 0x80040064,DV_E_DVTARGETDEVICE = 0x80040065,DV_E_STGMEDIUM = 0x80040066,DV_E_STATDATA = 0x80040067,DV_E_LINDEX = 0x80040068,DV_E_TYMED = 0x80040069,DV_E_CLIPFORMAT = 0x8004006A,DV_E_DVASPECT = 0x8004006B,DV_E_DVTARGETDEVICE_SIZE = 0x8004006C,DV_E_NOIVIEWOBJECT = 0x8004006D,DRAGDROP_E_NOTREGISTERED = 0x80040100,DRAGDROP_E_ALREADYREGISTERED = 0x80040101,DRAGDROP_E_INVALIDHWND = 0x80040102,CLASS_E_NOAGGREGATION = 0x80040110,CLASS_E_CLASSNOTAVAILABLE = 0x80040111,CLASS_E_NOTLICENSED = 0x80040112,VIEW_E_DRAW = 0x80040140,REGDB_E_READREGDB = 0x80040150,REGDB_E_WRITEREGDB = 0x80040151,REGDB_E_KEYMISSING = 0x80040152,REGDB_E_INVALIDVALUE = 0x80040153,REGDB_E_CLASSNOTREG = 0x80040154,REGDB_E_IIDNOTREG = 0x80040155,CAT_E_CATIDNOEXIST = 0x80040160,CAT_E_NODESCRIPTION = 0x80040161,CS_E_PACKAGE_NOTFOUND = 0x80040164,CS_E_NOT_DELETABLE = 0x80040165,CS_E_CLASS_NOTFOUND = 0x80040166,CS_E_INVALID_VERSION = 0x80040167,CS_E_NO_CLASSSTORE = 0x80040168,CACHE_E_NOCACHE_UPDATED = 0x80040170,OLEOBJ_E_NOVERBS = 0x80040180,OLEOBJ_E_INVALIDVERB = 0x80040181,INPLACE_E_NOTUNDOABLE = 0x800401A0,INPLACE_E_NOTOOLSPACE = 0x800401A1,CONVERT10_E_OLESTREAM_GET = 0x800401C0,CONVERT10_E_OLESTREAM_PUT = 0x800401C1,CONVERT10_E_OLESTREAM_FMT = 0x800401C2,CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = 0x800401C3,CONVERT10_E_STG_FMT = 0x800401C4,CONVERT10_E_STG_NO_STD_STREAM = 0x800401C5,CONVERT10_E_STG_DIB_TO_BITMAP = 0x800401C6,CLIPBRD_E_CANT_OPEN = 0x800401D0,CLIPBRD_E_CANT_EMPTY = 0x800401D1,CLIPBRD_E_CANT_SET = 0x800401D2,CLIPBRD_E_BAD_DATA = 0x800401D3,CLIPBRD_E_CANT_CLOSE = 0x800401D4,MK_E_CONNECTMANUALLY = 0x800401E0,MK_E_EXCEEDEDDEADLINE = 0x800401E1,MK_E_NEEDGENERIC = 0x800401E2,MK_E_UNAVAILABLE = 0x800401E3,MK_E_SYNTAX = 0x800401E4,MK_E_NOOBJECT = 0x800401E5,MK_E_INVALIDEXTENSION = 0x800401E6,MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 0x800401E7,MK_E_NOTBINDABLE = 0x800401E8,MK_E_NOTBOUND = 0x800401E9,MK_E_CANTOPENFILE = 0x800401EA,MK_E_MUSTBOTHERUSER = 0x800401EB,MK_E_NOINVERSE = 0x800401EC,MK_E_NOSTORAGE = 0x800401ED,MK_E_NOPREFIX = 0x800401EE,MK_E_ENUMERATION_FAILED = 0x800401EF,CO_E_NOTINITIALIZED = 0x800401F0,CO_E_ALREADYINITIALIZED = 0x800401F1,CO_E_CANTDETERMINECLASS = 0x800401F2,CO_E_CLASSSTRING = 0x800401F3,CO_E_IIDSTRING = 0x800401F4,CO_E_APPNOTFOUND = 0x800401F5,CO_E_APPSINGLEUSE = 0x800401F6,CO_E_ERRORINAPP = 0x800401F7,CO_E_DLLNOTFOUND = 0x800401F8,CO_E_ERRORINDLL = 0x800401F9,CO_E_WRONGOSFORAPP = 0x800401FA,CO_E_OBJNOTREG = 0x800401FB,CO_E_OBJISREG = 0x800401FC,CO_E_OBJNOTCONNECTED = 0x800401FD,CO_E_APPDIDNTREG = 0x800401FE,CO_E_RELEASED = 0x800401FF,CO_E_FAILEDTOIMPERSONATE = 0x80040200,CO_E_FAILEDTOGETSECCTX = 0x80040201,CO_E_FAILEDTOOPENTHREADTOKEN = 0x80040202,CO_E_FAILEDTOGETTOKENINFO = 0x80040203,CO_E_TRUSTEEDOESNTMATCHCLIENT = 0x80040204,CO_E_FAILEDTOQUERYCLIENTBLANKET = 0x80040205,CO_E_FAILEDTOSETDACL = 0x80040206,CO_E_ACCESSCHECKFAILED = 0x80040207,CO_E_NETACCESSAPIFAILED = 0x80040208,CO_E_WRONGTRUSTEENAMESYNTAX = 0x80040209,CO_E_INVALIDSID = 0x8004020A,CO_E_CONVERSIONFAILED = 0x8004020B,CO_E_NOMATCHINGSIDFOUND = 0x8004020C,CO_E_LOOKUPACCSIDFAILED = 0x8004020D,CO_E_NOMATCHINGNAMEFOUND = 0x8004020E,CO_E_LOOKUPACCNAMEFAILED = 0x8004020F,CO_E_SETSERLHNDLFAILED = 0x80040210,CO_E_FAILEDTOGETWINDIR = 0x80040211,CO_E_PATHTOOLONG = 0x80040212,CO_E_FAILEDTOGENUUID = 0x80040213,CO_E_FAILEDTOCREATEFILE = 0x80040214,CO_E_FAILEDTOCLOSEHANDLE = 0x80040215,CO_E_EXCEEDSYSACLLIMIT = 0x80040216,CO_E_ACESINWRONGORDER = 0x80040217,CO_E_INCOMPATIBLESTREAMVERSION = 0x80040218,CO_E_FAILEDTOOPENPROCESSTOKEN = 0x80040219,CO_E_DECODEFAILED = 0x8004021A,CO_E_ACNOTINITIALIZED = 0x8004021B,OLE_S_USEREG = 0x40000,OLE_S_STATIC = 0x40001,OLE_S_MAC_CLIPFORMAT = 0x40002,DRAGDROP_S_DROP = 0x40100,DRAGDROP_S_CANCEL = 0x40101,DRAGDROP_S_USEDEFAULTCURSORS = 0x40102,DATA_S_SAMEFORMATETC = 0x40130,VIEW_S_ALREADY_FROZEN = 0x40140,CACHE_S_FORMATETC_NOTSUPPORTED = 0x40170,CACHE_S_SAMECACHE = 0x40171,CACHE_S_SOMECACHES_NOTUPDATED = 0x40172,OLEOBJ_S_INVALIDVERB = 0x40180,OLEOBJ_S_CANNOT_DOVERB_NOW = 0x40181,OLEOBJ_S_INVALIDHWND = 0x40182,INPLACE_S_TRUNCATED = 0x401A0,CONVERT10_S_NO_PRESENTATION = 0x401C0,MK_S_REDUCED_TO_SELF = 0x401E2,MK_S_ME = 0x401E4,MK_S_HIM = 0x401E5,MK_S_US = 0x401E6,MK_S_MONIKERALREADYREGISTERED = 0x401E7,CO_E_CLASS_CREATE_FAILED = 0x80080001,CO_E_SCM_ERROR = 0x80080002,CO_E_SCM_RPC_FAILURE = 0x80080003,CO_E_BAD_PATH = 0x80080004,CO_E_SERVER_EXEC_FAILURE = 0x80080005,CO_E_OBJSRV_RPC_FAILURE = 0x80080006,MK_E_NO_NORMALIZED = 0x80080007,CO_E_SERVER_STOPPING = 0x80080008,MEM_E_INVALID_ROOT = 0x80080009,MEM_E_INVALID_LINK = 0x80080010,MEM_E_INVALID_SIZE = 0x80080011,CO_S_NOTALLINTERFACES = 0x80012,DISP_E_UNKNOWNINTERFACE = 0x80020001,DISP_E_MEMBERNOTFOUND = 0x80020003,DISP_E_PARAMNOTFOUND = 0x80020004,DISP_E_TYPEMISMATCH = 0x80020005,DISP_E_UNKNOWNNAME = 0x80020006,DISP_E_NONAMEDARGS = 0x80020007,DISP_E_BADVARTYPE = 0x80020008,DISP_E_EXCEPTION = 0x80020009,DISP_E_OVERFLOW = 0x8002000A,DISP_E_BADINDEX = 0x8002000B,DISP_E_UNKNOWNLCID = 0x8002000C,DISP_E_ARRAYISLOCKED = 0x8002000D,DISP_E_BADPARAMCOUNT = 0x8002000E,DISP_E_PARAMNOTOPTIONAL = 0x8002000F,DISP_E_BADCALLEE = 0x80020010,DISP_E_NOTACOLLECTION = 0x80020011,DISP_E_DIVBYZERO = 0x80020012,TYPE_E_BUFFERTOOSMALL = 0x80028016,TYPE_E_FIELDNOTFOUND = 0x80028017,TYPE_E_INVDATAREAD = 0x80028018,TYPE_E_UNSUPFORMAT = 0x80028019,TYPE_E_REGISTRYACCESS = 0x8002801C,TYPE_E_LIBNOTREGISTERED = 0x8002801D,TYPE_E_UNDEFINEDTYPE = 0x80028027,TYPE_E_QUALIFIEDNAMEDISALLOWED = 0x80028028,TYPE_E_INVALIDSTATE = 0x80028029,TYPE_E_WRONGTYPEKIND = 0x8002802A,TYPE_E_ELEMENTNOTFOUND = 0x8002802B,TYPE_E_AMBIGUOUSNAME = 0x8002802C,TYPE_E_NAMECONFLICT = 0x8002802D,TYPE_E_UNKNOWNLCID = 0x8002802E,TYPE_E_DLLFUNCTIONNOTFOUND = 0x8002802F,TYPE_E_BADMODULEKIND = 0x800288BD,TYPE_E_SIZETOOBIG = 0x800288C5,TYPE_E_DUPLICATEID = 0x800288C6,TYPE_E_INVALIDID = 0x800288CF,TYPE_E_TYPEMISMATCH = 0x80028CA0,TYPE_E_OUTOFBOUNDS = 0x80028CA1,TYPE_E_IOERROR = 0x80028CA2,TYPE_E_CANTCREATETMPFILE = 0x80028CA3,TYPE_E_CANTLOADLIBRARY = 0x80029C4A,TYPE_E_INCONSISTENTPROPFUNCS = 0x80029C83,TYPE_E_CIRCULARTYPE = 0x80029C84,STG_E_INVALIDFUNCTION = 0x80030001,STG_E_FILENOTFOUND = 0x80030002,STG_E_PATHNOTFOUND = 0x80030003,STG_E_TOOMANYOPENFILES = 0x80030004,STG_E_ACCESSDENIED = 0x80030005,STG_E_INVALIDHANDLE = 0x80030006,STG_E_INSUFFICIENTMEMORY = 0x80030008,STG_E_INVALIDPOINTER = 0x80030009,STG_E_NOMOREFILES = 0x80030012,STG_E_DISKISWRITEPROTECTED = 0x80030013,STG_E_SEEKERROR = 0x80030019,STG_E_WRITEFAULT = 0x8003001D,STG_E_READFAULT = 0x8003001E,STG_E_SHAREVIOLATION = 0x80030020,STG_E_LOCKVIOLATION = 0x80030021,STG_E_FILEALREADYEXISTS = 0x80030050,STG_E_INVALIDPARAMETER = 0x80030057,STG_E_MEDIUMFULL = 0x80030070,STG_E_PROPSETMISMATCHED = 0x800300F0,STG_E_ABNORMALAPIEXIT = 0x800300FA,STG_E_INVALIDHEADER = 0x800300FB,STG_E_INVALIDNAME = 0x800300FC,STG_E_UNKNOWN = 0x800300FD,STG_E_UNIMPLEMENTEDFUNCTION = 0x800300FE,STG_E_INVALIDFLAG = 0x800300FF,STG_E_INUSE = 0x80030100,STG_E_NOTCURRENT = 0x80030101,STG_E_REVERTED = 0x80030102,STG_E_CANTSAVE = 0x80030103,STG_E_OLDFORMAT = 0x80030104,STG_E_OLDDLL = 0x80030105,STG_E_SHAREREQUIRED = 0x80030106,STG_E_NOTFILEBASEDSTORAGE = 0x80030107,STG_E_EXTANTMARSHALLINGS = 0x80030108,STG_E_DOCFILECORRUPT = 0x80030109,STG_E_BADBASEADDRESS = 0x80030110,STG_E_INCOMPLETE = 0x80030201,STG_E_TERMINATED = 0x80030202,STG_S_CONVERTED = 0x30200,STG_S_BLOCK = 0x30201,STG_S_RETRYNOW = 0x30202,STG_S_MONITORING = 0x30203,STG_S_MULTIPLEOPENS = 0x30204,STG_S_CONSOLIDATIONFAILED = 0x30205,STG_S_CANNOTCONSOLIDATE = 0x30206,RPC_E_CALL_REJECTED = 0x80010001,RPC_E_CALL_CANCELED = 0x80010002,RPC_E_CANTPOST_INSENDCALL = 0x80010003,RPC_E_CANTCALLOUT_INASYNCCALL = 0x80010004,RPC_E_CANTCALLOUT_INEXTERNALCALL = 0x80010005,RPC_E_CONNECTION_TERMINATED = 0x80010006,RPC_E_SERVER_DIED = 0x80010007,RPC_E_CLIENT_DIED = 0x80010008,RPC_E_INVALID_DATAPACKET = 0x80010009,RPC_E_CANTTRANSMIT_CALL = 0x8001000A,RPC_E_CLIENT_CANTMARSHAL_DATA = 0x8001000B,RPC_E_CLIENT_CANTUNMARSHAL_DATA = 0x8001000C,RPC_E_SERVER_CANTMARSHAL_DATA = 0x8001000D,RPC_E_SERVER_CANTUNMARSHAL_DATA = 0x8001000E,RPC_E_INVALID_DATA = 0x8001000F,RPC_E_INVALID_PARAMETER = 0x80010010,RPC_E_CANTCALLOUT_AGAIN = 0x80010011,RPC_E_SERVER_DIED_DNE = 0x80010012,RPC_E_SYS_CALL_FAILED = 0x80010100,RPC_E_OUT_OF_RESOURCES = 0x80010101,RPC_E_ATTEMPTED_MULTITHREAD = 0x80010102,RPC_E_NOT_REGISTERED = 0x80010103,RPC_E_FAULT = 0x80010104,RPC_E_SERVERFAULT = 0x80010105,RPC_E_CHANGED_MODE = 0x80010106,RPC_E_INVALIDMETHOD = 0x80010107,RPC_E_DISCONNECTED = 0x80010108,RPC_E_RETRY = 0x80010109,RPC_E_SERVERCALL_RETRYLATER = 0x8001010A,RPC_E_SERVERCALL_REJECTED = 0x8001010B,RPC_E_INVALID_CALLDATA = 0x8001010C,RPC_E_CANTCALLOUT_ININPUTSYNCCALL = 0x8001010D,RPC_E_WRONG_THREAD = 0x8001010E,RPC_E_THREAD_NOT_INIT = 0x8001010F,RPC_E_VERSION_MISMATCH = 0x80010110,RPC_E_INVALID_HEADER = 0x80010111,RPC_E_INVALID_EXTENSION = 0x80010112,RPC_E_INVALID_IPID = 0x80010113,RPC_E_INVALID_OBJECT = 0x80010114,RPC_S_CALLPENDING = 0x80010115,RPC_S_WAITONTIMER = 0x80010116,RPC_E_CALL_COMPLETE = 0x80010117,RPC_E_UNSECURE_CALL = 0x80010118,RPC_E_TOO_LATE = 0x80010119,RPC_E_NO_GOOD_SECURITY_PACKAGES = 0x8001011A,RPC_E_ACCESS_DENIED = 0x8001011B,RPC_E_REMOTE_DISABLED = 0x8001011C,RPC_E_INVALID_OBJREF = 0x8001011D,RPC_E_NO_CONTEXT = 0x8001011E,RPC_E_TIMEOUT = 0x8001011F,RPC_E_NO_SYNC = 0x80010120,RPC_E_UNEXPECTED = 0x8001FFFF,NTE_BAD_UID = 0x80090001,NTE_BAD_HASH = 0x80090002,NTE_BAD_KEY = 0x80090003,NTE_BAD_LEN = 0x80090004,NTE_BAD_DATA = 0x80090005,NTE_BAD_SIGNATURE = 0x80090006,NTE_BAD_VER = 0x80090007,NTE_BAD_ALGID = 0x80090008,NTE_BAD_FLAGS = 0x80090009,NTE_BAD_TYPE = 0x8009000A,NTE_BAD_KEY_STATE = 0x8009000B,NTE_BAD_HASH_STATE = 0x8009000C,NTE_NO_KEY = 0x8009000D,NTE_NO_MEMORY = 0x8009000E,NTE_EXISTS = 0x8009000F,NTE_PERM = 0x80090010,NTE_NOT_FOUND = 0x80090011,NTE_DOUBLE_ENCRYPT = 0x80090012,NTE_BAD_PROVIDER = 0x80090013,NTE_BAD_PROV_TYPE = 0x80090014,NTE_BAD_PUBLIC_KEY = 0x80090015,NTE_BAD_KEYSET = 0x80090016,NTE_PROV_TYPE_NOT_DEF = 0x80090017,NTE_PROV_TYPE_ENTRY_BAD = 0x80090018,NTE_KEYSET_NOT_DEF = 0x80090019,NTE_KEYSET_ENTRY_BAD = 0x8009001A,NTE_PROV_TYPE_NO_MATCH = 0x8009001B,NTE_SIGNATURE_FILE_BAD = 0x8009001C,NTE_PROVIDER_DLL_FAIL = 0x8009001D,NTE_PROV_DLL_NOT_FOUND = 0x8009001E,NTE_BAD_KEYSET_PARAM = 0x8009001F,NTE_FAIL = 0x80090020,NTE_SYS_ERR = 0x80090021,CRYPT_E_MSG_ERROR = 0x80091001,CRYPT_E_UNKNOWN_ALGO = 0x80091002,CRYPT_E_OID_FORMAT = 0x80091003,CRYPT_E_INVALID_MSG_TYPE = 0x80091004,CRYPT_E_UNEXPECTED_ENCODING = 0x80091005,CRYPT_E_AUTH_ATTR_MISSING = 0x80091006,CRYPT_E_HASH_VALUE = 0x80091007,CRYPT_E_INVALID_INDEX = 0x80091008,CRYPT_E_ALREADY_DECRYPTED = 0x80091009,CRYPT_E_NOT_DECRYPTED = 0x8009100A,CRYPT_E_RECIPIENT_NOT_FOUND = 0x8009100B,CRYPT_E_CONTROL_TYPE = 0x8009100C,CRYPT_E_ISSUER_SERIALNUMBER = 0x8009100D,CRYPT_E_SIGNER_NOT_FOUND = 0x8009100E,CRYPT_E_ATTRIBUTES_MISSING = 0x8009100F,CRYPT_E_STREAM_MSG_NOT_READY = 0x80091010,CRYPT_E_STREAM_INSUFFICIENT_DATA = 0x80091011,CRYPT_E_BAD_LEN = 0x80092001,CRYPT_E_BAD_ENCODE = 0x80092002,CRYPT_E_FILE_ERROR = 0x80092003,CRYPT_E_NOT_FOUND = 0x80092004,CRYPT_E_EXISTS = 0x80092005,CRYPT_E_NO_PROVIDER = 0x80092006,CRYPT_E_SELF_SIGNED = 0x80092007,CRYPT_E_DELETED_PREV = 0x80092008,CRYPT_E_NO_MATCH = 0x80092009,CRYPT_E_UNEXPECTED_MSG_TYPE = 0x8009200A,CRYPT_E_NO_KEY_PROPERTY = 0x8009200B,CRYPT_E_NO_DECRYPT_CERT = 0x8009200C,CRYPT_E_BAD_MSG = 0x8009200D,CRYPT_E_NO_SIGNER = 0x8009200E,CRYPT_E_PENDING_CLOSE = 0x8009200F,CRYPT_E_REVOKED = 0x80092010,CRYPT_E_NO_REVOCATION_DLL = 0x80092011,CRYPT_E_NO_REVOCATION_CHECK = 0x80092012,CRYPT_E_REVOCATION_OFFLINE = 0x80092013,CRYPT_E_NOT_IN_REVOCATION_DATABASE = 0x80092014,CRYPT_E_INVALID_NUMERIC_STRING = 0x80092020,CRYPT_E_INVALID_PRINTABLE_STRING = 0x80092021,CRYPT_E_INVALID_IA5_STRING = 0x80092022,CRYPT_E_INVALID_X500_STRING = 0x80092023,CRYPT_E_NOT_CHAR_STRING = 0x80092024,CRYPT_E_FILERESIZED = 0x80092025,CRYPT_E_SECURITY_SETTINGS = 0x80092026,CRYPT_E_NO_VERIFY_USAGE_DLL = 0x80092027,CRYPT_E_NO_VERIFY_USAGE_CHECK = 0x80092028,CRYPT_E_VERIFY_USAGE_OFFLINE = 0x80092029,CRYPT_E_NOT_IN_CTL = 0x8009202A,CRYPT_E_NO_TRUSTED_SIGNER = 0x8009202B,CRYPT_E_OSS_ERROR = 0x80093000,CERTSRV_E_BAD_REQUESTSUBJECT = 0x80094001,CERTSRV_E_NO_REQUEST = 0x80094002,CERTSRV_E_BAD_REQUESTSTATUS = 0x80094003,CERTSRV_E_PROPERTY_EMPTY = 0x80094004,CERTDB_E_JET_ERROR = 0x80095000,TRUST_E_SYSTEM_ERROR = 0x80096001,TRUST_E_NO_SIGNER_CERT = 0x80096002,TRUST_E_COUNTER_SIGNER = 0x80096003,TRUST_E_CERT_SIGNATURE = 0x80096004,TRUST_E_TIME_STAMP = 0x80096005,TRUST_E_BAD_DIGEST = 0x80096010,TRUST_E_BASIC_CONSTRAINTS = 0x80096019,TRUST_E_FINANCIAL_CRITERIA = 0x8009601E,TRUST_E_PROVIDER_UNKNOWN = 0x800B0001,TRUST_E_ACTION_UNKNOWN = 0x800B0002,TRUST_E_SUBJECT_FORM_UNKNOWN = 0x800B0003,TRUST_E_SUBJECT_NOT_TRUSTED = 0x800B0004,DIGSIG_E_ENCODE = 0x800B0005,DIGSIG_E_DECODE = 0x800B0006,DIGSIG_E_EXTENSIBILITY = 0x800B0007,DIGSIG_E_CRYPTO = 0x800B0008,PERSIST_E_SIZEDEFINITE = 0x800B0009,PERSIST_E_SIZEINDEFINITE = 0x800B000A,PERSIST_E_NOTSELFSIZING = 0x800B000B,TRUST_E_NOSIGNATURE = 0x800B0100,CERT_E_EXPIRED = 0x800B0101,CERT_E_VALIDITYPERIODNESTING = 0x800B0102,CERT_E_ROLE = 0x800B0103,CERT_E_PATHLENCONST = 0x800B0104,CERT_E_CRITICAL = 0x800B0105,CERT_E_PURPOSE = 0x800B0106,CERT_E_ISSUERCHAINING = 0x800B0107,CERT_E_MALFORMED = 0x800B0108,CERT_E_UNTRUSTEDROOT = 0x800B0109,CERT_E_CHAINING = 0x800B010A,TRUST_E_FAIL = 0x800B010B,CERT_E_REVOKED = 0x800B010C,CERT_E_UNTRUSTEDTESTROOT = 0x800B010D,CERT_E_REVOCATION_FAILURE = 0x800B010E,CERT_E_CN_NO_MATCH = 0x800B010F,CERT_E_WRONG_USAGE = 0x800B0110,SPAPI_E_EXPECTED_SECTION_NAME = 0x800F0000,SPAPI_E_BAD_SECTION_NAME_LINE = 0x800F0001,SPAPI_E_SECTION_NAME_TOO_LONG = 0x800F0002,SPAPI_E_GENERAL_SYNTAX = 0x800F0003,SPAPI_E_WRONG_INF_STYLE = 0x800F0100,SPAPI_E_SECTION_NOT_FOUND = 0x800F0101,SPAPI_E_LINE_NOT_FOUND = 0x800F0102,SPAPI_E_NO_ASSOCIATED_CLASS = 0x800F0200,SPAPI_E_CLASS_MISMATCH = 0x800F0201,SPAPI_E_DUPLICATE_FOUND = 0x800F0202,SPAPI_E_NO_DRIVER_SELECTED = 0x800F0203,SPAPI_E_KEY_DOES_NOT_EXIST = 0x800F0204,SPAPI_E_INVALID_DEVINST_NAME = 0x800F0205,SPAPI_E_INVALID_CLASS = 0x800F0206,SPAPI_E_DEVINST_ALREADY_EXISTS = 0x800F0207,SPAPI_E_DEVINFO_NOT_REGISTERED = 0x800F0208,SPAPI_E_INVALID_REG_PROPERTY = 0x800F0209,SPAPI_E_NO_INF = 0x800F020A,SPAPI_E_NO_SUCH_DEVINST = 0x800F020B,SPAPI_E_CANT_LOAD_CLASS_ICON = 0x800F020C,SPAPI_E_INVALID_CLASS_INSTALLER = 0x800F020D,SPAPI_E_DI_DO_DEFAULT = 0x800F020E,SPAPI_E_DI_NOFILECOPY = 0x800F020F,SPAPI_E_INVALID_HWPROFILE = 0x800F0210,SPAPI_E_NO_DEVICE_SELECTED = 0x800F0211,SPAPI_E_DEVINFO_LIST_LOCKED = 0x800F0212,SPAPI_E_DEVINFO_DATA_LOCKED = 0x800F0213,SPAPI_E_DI_BAD_PATH = 0x800F0214,SPAPI_E_NO_CLASSINSTALL_PARAMS = 0x800F0215,SPAPI_E_FILEQUEUE_LOCKED = 0x800F0216,SPAPI_E_BAD_SERVICE_INSTALLSECT = 0x800F0217,SPAPI_E_NO_CLASS_DRIVER_LIST = 0x800F0218,SPAPI_E_NO_ASSOCIATED_SERVICE = 0x800F0219,SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = 0x800F021A,SPAPI_E_DEVICE_INTERFACE_ACTIVE = 0x800F021B,SPAPI_E_DEVICE_INTERFACE_REMOVED = 0x800F021C,SPAPI_E_BAD_INTERFACE_INSTALLSECT = 0x800F021D,SPAPI_E_NO_SUCH_INTERFACE_CLASS = 0x800F021E,SPAPI_E_INVALID_REFERENCE_STRING = 0x800F021F,SPAPI_E_INVALID_MACHINENAME = 0x800F0220,SPAPI_E_REMOTE_COMM_FAILURE = 0x800F0221,SPAPI_E_MACHINE_UNAVAILABLE = 0x800F0222,SPAPI_E_NO_CONFIGMGR_SERVICES = 0x800F0223,SPAPI_E_INVALID_PROPPAGE_PROVIDER = 0x800F0224,SPAPI_E_NO_SUCH_DEVICE_INTERFACE = 0x800F0225,SPAPI_E_DI_POSTPROCESSING_REQUIRED = 0x800F0226,SPAPI_E_INVALID_COINSTALLER = 0x800F0227,SPAPI_E_NO_COMPAT_DRIVERS = 0x800F0228,SPAPI_E_NO_DEVICE_ICON = 0x800F0229,SPAPI_E_INVALID_INF_LOGCONFIG = 0x800F022A,SPAPI_E_DI_DONT_INSTALL = 0x800F022B,SPAPI_E_INVALID_FILTER_DRIVER = 0x800F022C,SPAPI_E_ERROR_NOT_INSTALLED = 0x800F1000,MK_S_ASYNCHRONOUS = 0x401E8,INET_E_INVALID_URL = 0x800C0002,INET_E_NO_SESSION = 0x800C0003,INET_E_CANNOT_CONNECT = 0x800C0004,INET_E_RESOURCE_NOT_FOUND = 0x800C0005,INET_E_OBJECT_NOT_FOUND = 0x800C0006,INET_E_DATA_NOT_AVAILABLE = 0x800C0007,INET_E_DOWNLOAD_FAILURE = 0x800C0008,INET_E_AUTHENTICATION_REQUIRED = 0x800C0009,INET_E_NO_VALID_MEDIA = 0x800C000A,INET_E_CONNECTION_TIMEOUT = 0x800C000B,INET_E_INVALID_REQUEST = 0x800C000C,INET_E_UNKNOWN_PROTOCOL = 0x800C000D,INET_E_SECURITY_PROBLEM = 0x800C000E,INET_E_CANNOT_LOAD_DATA = 0x800C000F,INET_E_CANNOT_INSTANTIATE_OBJECT = 0x800C0010,INET_E_REDIRECT_FAILED = 0x800C0014,INET_E_REDIRECT_TO_DIR = 0x800C0015,INET_E_CANNOT_LOCK_REQUEST = 0x800C0016,INET_E_ERROR_FIRST = 0x800C0002,INET_E_USE_DEFAULT_PROTOCOLHANDLER = 0x800C0011,INET_E_USE_DEFAULT_SETTING = 0x800C0012,INET_E_QUERYOPTION_UNKNOWN = 0x800C0013,INET_E_REDIRECTING = 0x800C0014,E_ADS_BAD_PATHNAME = 0x80005000,E_ADS_INVALID_DOMAIN_OBJECT = 0x80005001,E_ADS_INVALID_USER_OBJECT = 0x80005002,E_ADS_INVALID_COMPUTER_OBJECT = 0x80005003,E_ADS_UNKNOWN_OBJECT = 0x80005004,E_ADS_PROPERTY_NOT_SET = 0x80005005,E_ADS_PROPERTY_NOT_SUPPORTED = 0x80005006,E_ADS_PROPERTY_INVALID = 0x80005007,E_ADS_BAD_PARAMETER = 0x80005008,E_ADS_OBJECT_UNBOUND = 0x80005009,E_ADS_PROPERTY_NOT_MODIFIED = 0x8000500A,E_ADS_PROPERTY_MODIFIED = 0x8000500B,E_ADS_CANT_CONVERT_DATATYPE = 0x8000500C,E_ADS_PROPERTY_NOT_FOUND = 0x8000500D,E_ADS_OBJECT_EXISTS = 0x8000500E,E_ADS_SCHEMA_VIOLATION = 0x8000500F,E_ADS_COLUMN_NOT_SET = 0x80005010,S_ADS_ERRORSOCCURRED = 0x5011,S_ADS_NOMORE_ROWS = 0x5012,S_ADS_NOMORE_COLUMNS = 0x5013,E_ADS_INVALID_FILTER = 0x80005014,INET_E_AGENT_MAX_SIZE_EXCEEDED = 0x800C0F80,INET_E_AGENT_CACHE_SIZE_EXCEEDED = 0x800C0F82,INET_E_AGENT_CONNECTION_FAILED = 0x800C0F83,INET_S_AGENT_PART_FAIL = 0xC0F81,};
enum MACRO_HTCLOSE {HTCLOSE = 20,};
enum MACRO_HTERROR {HTERROR = -2,};
enum MACRO_HTRIGHT {HTRIGHT = 11,};
enum MACRO_ICM_OFF {ICM_OFF = 1,ICM_ON = 2,ICM_QUERY = 3,ICM_DONE_OUTSIDEDC = 4,};
enum MACRO_IDABORT {IDABORT = 3,IDRETRY = 4,};
enum MACRO_IDB_STD {IDB_STD_SMALL_COLOR = 0,IDB_STD_LARGE_COLOR = 1,IDB_VIEW_SMALL_COLOR = 4,IDB_VIEW_LARGE_COLOR = 5,IDB_HIST_SMALL_COLOR = 8,IDB_HIST_LARGE_COLOR = 9,};
enum MACRO_IDC_PEN {IDC_PEN = 32631,IDC_ALTSELECT = 32501,};
enum MACRO_IDLFLAG {IDLFLAG_NONE = 0,IDLFLAG_FIN = 1,IDLFLAG_FOUT = 2,IDLFLAG_FLCID = 4,IDLFLAG_FRETVAL = 8,};
enum MACRO_IDS_CAP {IDS_CAP_BEGIN = 300,IDS_CAP_END = 301,IDS_CAP_INFO = 401,IDS_CAP_OUTOFMEM = 402,IDS_CAP_FILEEXISTS = 403,IDS_CAP_ERRORPALOPEN = 404,IDS_CAP_ERRORPALSAVE = 405,IDS_CAP_ERRORDIBSAVE = 406,IDS_CAP_DEFAVIEXT = 407,IDS_CAP_DEFPALEXT = 408,IDS_CAP_CANTOPEN = 409,IDS_CAP_SEQ_MSGSTART = 410,IDS_CAP_SEQ_MSGSTOP = 411,IDS_CAP_VIDEDITERR = 412,IDS_CAP_READONLYFILE = 413,IDS_CAP_WRITEERROR = 414,IDS_CAP_NODISKSPACE = 415,IDS_CAP_SETFILESIZE = 416,IDS_CAP_SAVEASPERCENT = 417,IDS_CAP_DRIVER_ERROR = 418,IDS_CAP_WAVE_OPEN_ERROR = 419,IDS_CAP_WAVE_ALLOC_ERROR = 420,IDS_CAP_WAVE_PREPARE_ERROR = 421,IDS_CAP_WAVE_ADD_ERROR = 422,IDS_CAP_WAVE_SIZE_ERROR = 423,IDS_CAP_VIDEO_OPEN_ERROR = 424,IDS_CAP_VIDEO_ALLOC_ERROR = 425,IDS_CAP_VIDEO_PREPARE_ERROR = 426,IDS_CAP_VIDEO_ADD_ERROR = 427,IDS_CAP_VIDEO_SIZE_ERROR = 428,IDS_CAP_FILE_OPEN_ERROR = 429,IDS_CAP_FILE_WRITE_ERROR = 430,IDS_CAP_RECORDING_ERROR = 431,IDS_CAP_RECORDING_ERROR2 = 432,IDS_CAP_AVI_INIT_ERROR = 433,IDS_CAP_NO_FRAME_CAP_ERROR = 434,IDS_CAP_NO_PALETTE_WARN = 435,IDS_CAP_MCI_CONTROL_ERROR = 436,IDS_CAP_MCI_CANT_STEP_ERROR = 437,IDS_CAP_NO_AUDIO_CAP_ERROR = 438,IDS_CAP_AVI_DRAWDIB_ERROR = 439,IDS_CAP_COMPRESSOR_ERROR = 440,IDS_CAP_AUDIO_DROP_ERROR = 441,IDS_CAP_STAT_LIVE_MODE = 500,IDS_CAP_STAT_OVERLAY_MODE = 501,IDS_CAP_STAT_CAP_INIT = 502,IDS_CAP_STAT_CAP_FINI = 503,IDS_CAP_STAT_PALETTE_BUILD = 504,IDS_CAP_STAT_OPTPAL_BUILD = 505,IDS_CAP_STAT_I_FRAMES = 506,IDS_CAP_STAT_L_FRAMES = 507,IDS_CAP_STAT_CAP_L_FRAMES = 508,IDS_CAP_STAT_CAP_AUDIO = 509,IDS_CAP_STAT_VIDEOCURRENT = 510,IDS_CAP_STAT_VIDEOAUDIO = 511,IDS_CAP_STAT_VIDEOONLY = 512,IDS_CAP_STAT_FRAMESDROPPED = 513,};
enum MACRO_IMGANIM {IMGANIM_ANIMATED = 0x10000000,IMGANIM_MASK = 0x10000000,};
enum MACRO_IMGBITS {IMGBITS_NONE = 0x2000000,IMGBITS_PARTIAL = 0x4000000,IMGBITS_TOTAL = 0x8000000,IMGBITS_MASK = 0xE000000,};
enum MACRO_IMGLOAD {IMGLOAD_NOTLOADED = 0x100000,IMGLOAD_LOADING = 0x200000,IMGLOAD_STOPPED = 0x400000,IMGLOAD_ERROR = 0x800000,IMGLOAD_COMPLETE = 0x1000000,IMGLOAD_MASK = 0x1F00000,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_INDEXID {INDEXID_OBJECT = 0,INDEXID_CONTAINER = 0,};
enum MACRO_INFINFO {INFINFO_INF_SPEC_IS_HINF = 1,INFINFO_INF_NAME_IS_ABSOLUTE = 2,INFINFO_DEFAULT_SEARCH = 3,INFINFO_REVERSE_DEFAULT_SEARCH = 4,INFINFO_INF_PATH_LIST_SEARCH = 5,};
enum MACRO_INHERIT {INHERIT_NO_PROPAGATE = 0x4,INHERIT_ONLY = 0x8,};
enum MACRO_INPLACE {INPLACE_E_FIRST = 0x800401A0,INPLACE_E_LAST = 0x800401AF,INPLACE_S_FIRST = 0x401A0,INPLACE_S_LAST = 0x401AF,};
enum MACRO_INTBIND {INTBIND = 3,CHARBIND = 4,};
enum MACRO_INVALID {INVALID_HANDLE_VALUE = -1,INVALID_FILE_SIZE = 4294967295,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x7F,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_TCP = 6,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_ND = 77,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_IRCNULL {IRCNULL = 0x0,FIRCPFN = 0x1,FIRCPV = 0x2,FIRCPRI = 0x4,FIRCCSEC = 0x8,FIRCIRO = 0x10,};
enum MACRO_IRONULL {IRONULL = 0x0,FIROWAIT = 0x1,FIROINTERVAL = 0x2,FIROPERBLOCK = 0x4,FIRODISABLED = 0x20,FIROONCEONLY = 0x40,};
enum MACRO_ISC_REQ {ISC_REQ_DELEGATE = 0x1,ISC_REQ_MUTUAL_AUTH = 0x2,ISC_REQ_REPLAY_DETECT = 0x4,ISC_REQ_SEQUENCE_DETECT = 0x8,ISC_REQ_CONFIDENTIALITY = 0x10,ISC_REQ_USE_SESSION_KEY = 0x20,ISC_REQ_PROMPT_FOR_CREDS = 0x40,ISC_REQ_USE_SUPPLIED_CREDS = 0x80,ISC_REQ_ALLOCATE_MEMORY = 0x100,ISC_REQ_USE_DCE_STYLE = 0x200,ISC_REQ_DATAGRAM = 0x400,ISC_REQ_CONNECTION = 0x800,ISC_REQ_CALL_LEVEL = 0x1000,ISC_REQ_EXTENDED_ERROR = 0x4000,ISC_REQ_STREAM = 0x8000,ISC_REQ_INTEGRITY = 0x10000,ISC_REQ_IDENTIFY = 0x20000,ISC_REQ_NULL_SESSION = 0x40000,ISC_RET_DELEGATE = 0x1,ISC_RET_MUTUAL_AUTH = 0x2,ISC_RET_REPLAY_DETECT = 0x4,ISC_RET_SEQUENCE_DETECT = 0x8,ISC_RET_CONFIDENTIALITY = 0x10,ISC_RET_USE_SESSION_KEY = 0x20,ISC_RET_USED_COLLECTED_CREDS = 0x40,ISC_RET_USED_SUPPLIED_CREDS = 0x80,ISC_RET_ALLOCATED_MEMORY = 0x100,ISC_RET_USED_DCE_STYLE = 0x200,ISC_RET_DATAGRAM = 0x400,ISC_RET_CONNECTION = 0x800,ISC_RET_INTERMEDIATE_RETURN = 0x1000,ISC_RET_CALL_LEVEL = 0x2000,ISC_RET_EXTENDED_ERROR = 0x4000,ISC_RET_STREAM = 0x8000,ISC_RET_INTEGRITY = 0x10000,ISC_RET_IDENTIFY = 0x20000,ISC_RET_NULL_SESSION = 0x40000,};
enum MACRO_ISO_MAX {ISO_MAX_ADDR_LENGTH = 64,ISO_HIERARCHICAL = 0,ISO_NON_HIERARCHICAL = 1,ISO_EXP_DATA_USE = 0,ISO_EXP_DATA_NUSE = 1,};
enum MACRO_JOBSTAT {JOBSTAT_PENDING = 1,JOBSTAT_ACTIVE = 2,JOBSTAT_CANCELLED = 3,JOBSTAT_COMPLETE = 4,JOBSTAT_FAILED = 5,JOBSTAT_RETRYING = 6,};
enum MACRO_JOB_ALL {JOB_ALL_ACCESS = 983056,JOB_READ = 131088,JOB_WRITE = 131088,JOB_EXECUTE = 131088,};
enum MACRO_JOB_RUN {JOB_RUN_PERIODICALLY = 0x1,JOB_EXEC_ERROR = 0x2,JOB_RUNS_TODAY = 0x4,JOB_ADD_CURRENT_DATE = 0x8,JOB_NONINTERACTIVE = 0x10,JOB_INPUT_FLAGS = 0x19,JOB_OUTPUT_FLAGS = 0x17,};
enum MACRO_JOYCAPS {JOYCAPS_HASZ = 0x1,JOYCAPS_HASR = 0x2,JOYCAPS_HASU = 0x4,JOYCAPS_HASV = 0x8,JOYCAPS_HASPOV = 0x10,JOYCAPS_POV4DIR = 0x20,JOYCAPS_POVCTS = 0x40,};
enum MACRO_KAGPROP {KAGPROP_QUERYBASEDUPDATES = 2,KAGPROP_MARSHALLABLE = 3,KAGPROP_POSITIONONNEWROW = 4,KAGPROP_IRowsetChangeExtInfo = 5,KAGPROP_CURSOR = 6,KAGPROP_CONCURRENCY = 7,KAGPROP_BLOBSONFOCURSOR = 8,KAGPROP_INCLUDENONEXACT = 9,KAGPROP_FORCESSFIREHOSEMODE = 10,KAGPROP_FORCENOPARAMETERREBIND = 11,KAGPROP_FORCENOPREPARE = 12,KAGPROP_FORCENOREEXECUTE = 13,KAGPROP_ACCESSIBLEPROCEDURES = 2,KAGPROP_ACCESSIBLETABLES = 3,KAGPROP_ODBCSQLOPTIEF = 4,KAGPROP_OJCAPABILITY = 5,KAGPROP_PROCEDURES = 6,KAGPROP_DRIVERNAME = 7,KAGPROP_DRIVERVER = 8,KAGPROP_DRIVERODBCVER = 9,KAGPROP_LIKEESCAPECLAUSE = 10,KAGPROP_SPECIALCHARACTERS = 11,KAGPROP_MAXCOLUMNSINGROUPBY = 12,KAGPROP_MAXCOLUMNSININDEX = 13,KAGPROP_MAXCOLUMNSINORDERBY = 14,KAGPROP_MAXCOLUMNSINSELECT = 15,KAGPROP_MAXCOLUMNSINTABLE = 16,KAGPROP_NUMERICFUNCTIONS = 17,KAGPROP_ODBCSQLCONFORMANCE = 18,KAGPROP_OUTERJOINS = 19,KAGPROP_STRINGFUNCTIONS = 20,KAGPROP_SYSTEMFUNCTIONS = 21,KAGPROP_TIMEDATEFUNCTIONS = 22,KAGPROP_FILEUSAGE = 23,KAGPROP_ACTIVESTATEMENTS = 24,KAGPROP_AUTH_TRUSTEDCONNECTION = 2,KAGPROP_AUTH_SERVERINTEGRATED = 3,};
enum MACRO_KSEVENT {KSEVENT_TYPE_ENABLE = 0x1,KSEVENT_TYPE_ONESHOT = 0x2,KSEVENT_TYPE_SETSUPPORT = 0x100,KSEVENT_TYPE_BASICSUPPORT = 0x200,};
enum MACRO_LDEFSQL {LDEFSQL = 0,LXSQL = 1,LSQL = 2,};
enum MACRO_LINEERR {LINEERR_ALLOCATED = 0x80000001,LINEERR_BADDEVICEID = 0x80000002,LINEERR_BEARERMODEUNAVAIL = 0x80000003,LINEERR_CALLUNAVAIL = 0x80000005,LINEERR_COMPLETIONOVERRUN = 0x80000006,LINEERR_CONFERENCEFULL = 0x80000007,LINEERR_DIALBILLING = 0x80000008,LINEERR_DIALDIALTONE = 0x80000009,LINEERR_DIALPROMPT = 0x8000000A,LINEERR_DIALQUIET = 0x8000000B,LINEERR_INCOMPATIBLEAPIVERSION = 0x8000000C,LINEERR_INCOMPATIBLEEXTVERSION = 0x8000000D,LINEERR_INIFILECORRUPT = 0x8000000E,LINEERR_INUSE = 0x8000000F,LINEERR_INVALADDRESS = 0x80000010,LINEERR_INVALADDRESSID = 0x80000011,LINEERR_INVALADDRESSMODE = 0x80000012,LINEERR_INVALADDRESSSTATE = 0x80000013,LINEERR_INVALAPPHANDLE = 0x80000014,LINEERR_INVALAPPNAME = 0x80000015,LINEERR_INVALBEARERMODE = 0x80000016,LINEERR_INVALCALLCOMPLMODE = 0x80000017,LINEERR_INVALCALLHANDLE = 0x80000018,LINEERR_INVALCALLPARAMS = 0x80000019,LINEERR_INVALCALLPRIVILEGE = 0x8000001A,LINEERR_INVALCALLSELECT = 0x8000001B,LINEERR_INVALCALLSTATE = 0x8000001C,LINEERR_INVALCALLSTATELIST = 0x8000001D,LINEERR_INVALCARD = 0x8000001E,LINEERR_INVALCOMPLETIONID = 0x8000001F,LINEERR_INVALCONFCALLHANDLE = 0x80000020,LINEERR_INVALCONSULTCALLHANDLE = 0x80000021,LINEERR_INVALCOUNTRYCODE = 0x80000022,LINEERR_INVALDEVICECLASS = 0x80000023,LINEERR_INVALDEVICEHANDLE = 0x80000024,LINEERR_INVALDIALPARAMS = 0x80000025,LINEERR_INVALDIGITLIST = 0x80000026,LINEERR_INVALDIGITMODE = 0x80000027,LINEERR_INVALDIGITS = 0x80000028,LINEERR_INVALEXTVERSION = 0x80000029,LINEERR_INVALGROUPID = 0x8000002A,LINEERR_INVALLINEHANDLE = 0x8000002B,LINEERR_INVALLINESTATE = 0x8000002C,LINEERR_INVALLOCATION = 0x8000002D,LINEERR_INVALMEDIALIST = 0x8000002E,LINEERR_INVALMEDIAMODE = 0x8000002F,LINEERR_INVALMESSAGEID = 0x80000030,LINEERR_INVALPARAM = 0x80000032,LINEERR_INVALPARKID = 0x80000033,LINEERR_INVALPARKMODE = 0x80000034,LINEERR_INVALPOINTER = 0x80000035,LINEERR_INVALPRIVSELECT = 0x80000036,LINEERR_INVALRATE = 0x80000037,LINEERR_INVALREQUESTMODE = 0x80000038,LINEERR_INVALTERMINALID = 0x80000039,LINEERR_INVALTERMINALMODE = 0x8000003A,LINEERR_INVALTIMEOUT = 0x8000003B,LINEERR_INVALTONE = 0x8000003C,LINEERR_INVALTONELIST = 0x8000003D,LINEERR_INVALTONEMODE = 0x8000003E,LINEERR_INVALTRANSFERMODE = 0x8000003F,LINEERR_LINEMAPPERFAILED = 0x80000040,LINEERR_NOCONFERENCE = 0x80000041,LINEERR_NODEVICE = 0x80000042,LINEERR_NODRIVER = 0x80000043,LINEERR_NOMEM = 0x80000044,LINEERR_NOREQUEST = 0x80000045,LINEERR_NOTOWNER = 0x80000046,LINEERR_NOTREGISTERED = 0x80000047,LINEERR_OPERATIONFAILED = 0x80000048,LINEERR_OPERATIONUNAVAIL = 0x80000049,LINEERR_RATEUNAVAIL = 0x8000004A,LINEERR_RESOURCEUNAVAIL = 0x8000004B,LINEERR_REQUESTOVERRUN = 0x8000004C,LINEERR_STRUCTURETOOSMALL = 0x8000004D,LINEERR_TARGETNOTFOUND = 0x8000004E,LINEERR_TARGETSELF = 0x8000004F,LINEERR_UNINITIALIZED = 0x80000050,LINEERR_USERUSERINFOTOOBIG = 0x80000051,LINEERR_REINIT = 0x80000052,LINEERR_ADDRESSBLOCKED = 0x80000053,LINEERR_BILLINGREJECTED = 0x80000054,LINEERR_INVALFEATURE = 0x80000055,LINEERR_NOMULTIPLEINSTANCE = 0x80000056,LINEERR_INVALAGENTID = 0x80000057,LINEERR_INVALAGENTGROUP = 0x80000058,LINEERR_INVALPASSWORD = 0x80000059,LINEERR_INVALAGENTSTATE = 0x8000005A,LINEERR_INVALAGENTACTIVITY = 0x8000005B,LINEERR_DIALVOICEDETECT = 0x8000005C,};
enum MACRO_LOGON32 {LOGON32_LOGON_INTERACTIVE = 2,LOGON32_LOGON_NETWORK = 3,LOGON32_LOGON_BATCH = 4,LOGON32_LOGON_SERVICE = 5,LOGON32_PROVIDER_DEFAULT = 0,LOGON32_PROVIDER_WINNT35 = 1,LOGON32_PROVIDER_WINNT40 = 2,LOGON32_PROVIDER_WINNT50 = 3,};
enum MACRO_LSERVER {LSERVER = 0x1,LREMUSER = 0x2,LSECURE = 0x8,};
enum MACRO_LVIF_DI {LVIF_DI_SETITEM = 0x1000,};
enum MACRO_LZERROR {LZERROR_BADINHANDLE = -1,LZERROR_BADOUTHANDLE = -2,LZERROR_READ = -3,LZERROR_WRITE = -4,LZERROR_GLOBALLOC = -5,LZERROR_GLOBLOCK = -6,LZERROR_BADVALUE = -7,LZERROR_UNKNOWNALG = -8,};
enum MACRO_MAPI_NO {MAPI_NO_HBAR = 0x1,MAPI_NO_VBAR = 0x2,};
enum MACRO_MAPI_PW {MAPI_PW_FIRST_PROFILE = 0x1,MAPI_PW_LAUNCHED_BY_CONFIG = 0x2,MAPI_PW_ADD_SERVICE_ONLY = 0x4,MAPI_PW_PROVIDER_UI_ONLY = 0x8,MAPI_PW_HIDE_SERVICES_LIST = 0x10,};
enum MACRO_MARSHAL {MARSHAL_E_FIRST = 0x80040120,MARSHAL_E_LAST = 0x8004012F,MARSHAL_S_FIRST = 0x40120,MARSHAL_S_LAST = 0x4012F,};
enum MACRO_MAXBIND {MAXBIND = 20,};
enum MACRO_MAXBYTE {MAXBYTE = 0xFF,};
enum MACRO_MAXCHAR {MAXCHAR = 0x7F,MINSHORT = 0x8000,};
enum MACRO_MAXIMUM {MAXIMUM_WAIT_OBJECTS = 64,MAXIMUM_SUSPEND_COUNT = 127,};
enum MACRO_MAXLONG {MAXLONG = 0x7FFFFFFF,};
enum MACRO_MAXNAME {MAXNAME = 31,};
enum MACRO_MAXWORD {MAXWORD = 0xFFFF,};
enum MACRO_MAX_ACL {MAX_ACL_REVISION = 4,};
enum MACRO_MAX_EDK {MAX_EDK_ERROR_CODE = 10,};
enum MACRO_MAX_INF {MAX_INF_STRING_LENGTH = 4096,MAX_TITLE_LEN = 60,MAX_INSTRUCTION_LEN = 256,MAX_LABEL_LEN = 30,MAX_SERVICE_NAME_LEN = 256,};
enum MACRO_MAX_IPX {MAX_IPX_MIB_TABLES = 6,};
enum MACRO_MAX_PAP {MAX_PAP_STATUS_SIZE = 255,MIN_PAP_READ_BUF_SIZE = 4096,};
enum MACRO_MAX_PIN {MAX_PIN_NAME = 128,MAX_FILTER_NAME = 128,};
enum MACRO_MAX_TAB {MAX_TAB_STOPS = 32,};
enum MACRO_MCIWNDF {MCIWNDF_NOAUTOSIZEWINDOW = 0x1,MCIWNDF_NOPLAYBAR = 0x2,MCIWNDF_NOAUTOSIZEMOVIE = 0x4,MCIWNDF_NOMENU = 0x8,MCIWNDF_SHOWNAME = 0x10,MCIWNDF_SHOWPOS = 0x20,MCIWNDF_SHOWMODE = 0x40,MCIWNDF_SHOWALL = 0x70,MCIWNDF_NOTIFYMODE = 0x100,MCIWNDF_NOTIFYPOS = 0x200,MCIWNDF_NOTIFYSIZE = 0x400,MCIWNDF_NOTIFYERROR = 0x1000,MCIWNDF_NOTIFYALL = 0x1F00,MCIWNDF_NOTIFYANSI = 0x80,MCIWNDF_NOTIFYMEDIAA = 0x880,MCIWNDF_NOTIFYMEDIAW = 0x800,MCIWNDF_NOTIFYMEDIA = 0x880,MCIWNDF_RECORD = 0x2000,MCIWNDF_NOERRORDLG = 0x4000,MCIWNDF_NOOPEN = 0x8000,};
enum MACRO_MCIWNDM {MCIWNDM_SENDSTRING = 1125,MCIWNDM_GETPOSITION = 1126,MCIWNDM_GETMODE = 1130,MCIWNDM_SETTIMEFORMAT = 1143,MCIWNDM_GETTIMEFORMAT = 1144,MCIWNDM_GETFILENAME = 1148,MCIWNDM_GETDEVICE = 1149,MCIWNDM_GETERROR = 1152,MCIWNDM_NEW = 1158,MCIWNDM_RETURNSTRING = 1162,MCIWNDM_OPEN = 1177,};
enum MACRO_MCI_DGV {MCI_DGV_METHOD_PRE = 0xA000,MCI_DGV_METHOD_POST = 0xA001,MCI_DGV_METHOD_DIRECT = 0xA002,MCI_DGV_FF_AVSS = 0x4000,MCI_DGV_FF_AVI = 0x4001,MCI_DGV_FF_DIB = 0x4002,MCI_DGV_FF_RDIB = 0x4003,MCI_DGV_FF_JPEG = 0x4004,MCI_DGV_FF_RJPEG = 0x4005,MCI_DGV_FF_JFIF = 0x4006,MCI_DGV_FF_MPEG = 0x4007,MCI_DGV_GETDEVCAPS_CAN_LOCK = 0x4000,MCI_DGV_GETDEVCAPS_CAN_STRETCH = 0x4001,MCI_DGV_GETDEVCAPS_CAN_FREEZE = 0x4002,MCI_DGV_GETDEVCAPS_MAX_WINDOWS = 0x4003,MCI_DGV_GETDEVCAPS_CAN_REVERSE = 0x4004,MCI_DGV_GETDEVCAPS_HAS_STILL = 0x4005,MCI_DGV_GETDEVCAPS_PALETTES = 0x4006,MCI_DGV_GETDEVCAPS_CAN_STR_IN = 0x4008,MCI_DGV_GETDEVCAPS_CAN_TEST = 0x4009,MCI_DGV_GETDEVCAPS_MAXIMUM_RATE = 0x400A,MCI_DGV_GETDEVCAPS_MINIMUM_RATE = 0x400B,MCI_DGV_CAPTURE_AS = 0x10000,MCI_DGV_CAPTURE_AT = 0x20000,MCI_DGV_COPY_AT = 0x10000,MCI_DGV_COPY_AUDIO_STREAM = 0x20000,MCI_DGV_COPY_VIDEO_STREAM = 0x40000,MCI_DGV_CUE_INPUT = 0x10000,MCI_DGV_CUE_OUTPUT = 0x20000,MCI_DGV_CUE_NOSHOW = 0x40000,MCI_DGV_CUT_AT = 0x10000,MCI_DGV_CUT_AUDIO_STREAM = 0x20000,MCI_DGV_CUT_VIDEO_STREAM = 0x40000,MCI_DGV_DELETE_AT = 0x10000,MCI_DGV_DELETE_AUDIO_STREAM = 0x20000,MCI_DGV_DELETE_VIDEO_STREAM = 0x40000,MCI_DGV_FREEZE_AT = 0x10000,MCI_DGV_FREEZE_OUTSIDE = 0x20000,MCI_DGV_INFO_TEXT = 0x10000,MCI_DGV_INFO_ITEM = 0x20000,MCI_INFO_VERSION = 0x400,MCI_DGV_INFO_USAGE = 0x4000,MCI_DGV_INFO_AUDIO_QUALITY = 0x4001,MCI_DGV_INFO_STILL_QUALITY = 0x4002,MCI_DGV_INFO_VIDEO_QUALITY = 0x4003,MCI_DGV_INFO_AUDIO_ALG = 0x4004,MCI_DGV_INFO_STILL_ALG = 0x4005,MCI_DGV_INFO_VIDEO_ALG = 0x4006,MCI_DGV_LIST_ITEM = 0x10000,MCI_DGV_LIST_COUNT = 0x20000,MCI_DGV_LIST_NUMBER = 0x40000,MCI_DGV_LIST_ALG = 0x80000,MCI_DGV_LIST_AUDIO_ALG = 0x4000,MCI_DGV_LIST_AUDIO_QUALITY = 0x4001,MCI_DGV_LIST_AUDIO_STREAM = 0x4002,MCI_DGV_LIST_STILL_ALG = 0x4003,MCI_DGV_LIST_STILL_QUALITY = 0x4004,MCI_DGV_LIST_VIDEO_ALG = 0x4005,MCI_DGV_LIST_VIDEO_QUALITY = 0x4006,MCI_DGV_LIST_VIDEO_STREAM = 0x4007,MCI_DGV_LIST_VIDEO_SOURCE = 0x4008,MCI_DGV_MONITOR_METHOD = 0x10000,MCI_DGV_MONITOR_SOURCE = 0x20000,MCI_DGV_MONITOR_INPUT = 0x4000,MCI_DGV_MONITOR_FILE = 0x4001,MCI_DGV_OPEN_WS = 0x10000,MCI_DGV_OPEN_PARENT = 0x20000,MCI_DGV_OPEN_NOSTATIC = 0x40000,MCI_DGV_OPEN_16BIT = 0x80000,MCI_DGV_OPEN_32BIT = 0x100000,MCI_DGV_PASTE_AT = 0x10000,MCI_DGV_PASTE_AUDIO_STREAM = 0x20000,MCI_DGV_PASTE_VIDEO_STREAM = 0x40000,MCI_DGV_PASTE_INSERT = 0x80000,MCI_DGV_PASTE_OVERWRITE = 0x100000,MCI_DGV_PLAY_REPEAT = 0x10000,MCI_DGV_PLAY_REVERSE = 0x20000,MCI_DGV_RECT = 0x10000,MCI_DGV_PUT_SOURCE = 0x20000,MCI_DGV_PUT_DESTINATION = 0x40000,MCI_DGV_PUT_FRAME = 0x80000,MCI_DGV_PUT_VIDEO = 0x100000,MCI_DGV_PUT_WINDOW = 0x200000,MCI_DGV_PUT_CLIENT = 0x400000,MCI_QUALITY_ITEM = 0x10000,MCI_QUALITY_NAME = 0x20000,MCI_QUALITY_ALG = 0x40000,MCI_QUALITY_DIALOG = 0x80000,MCI_QUALITY_HANDLE = 0x100000,MCI_QUALITY_ITEM_AUDIO = 0x4000,MCI_QUALITY_ITEM_STILL = 0x4001,MCI_QUALITY_ITEM_VIDEO = 0x4002,MCI_DGV_REALIZE_NORM = 0x10000,MCI_DGV_REALIZE_BKGD = 0x20000,MCI_DGV_RECORD_HOLD = 0x20000,MCI_DGV_RECORD_AUDIO_STREAM = 0x40000,MCI_DGV_RECORD_VIDEO_STREAM = 0x80000,MCI_DGV_RESERVE_IN = 0x10000,MCI_DGV_RESERVE_SIZE = 0x20000,MCI_DGV_RESTORE_FROM = 0x10000,MCI_DGV_RESTORE_AT = 0x20000,MCI_DGV_SAVE_ABORT = 0x20000,MCI_DGV_SAVE_KEEPRESERVE = 0x40000,MCI_DGV_SET_SEEK_EXACTLY = 0x10000,MCI_DGV_SET_SPEED = 0x20000,MCI_DGV_SET_STILL = 0x40000,MCI_DGV_SET_FILEFORMAT = 0x80000,MCI_DGV_SETAUDIO_OVER = 0x10000,MCI_DGV_SETAUDIO_CLOCKTIME = 0x20000,MCI_DGV_SETAUDIO_ALG = 0x40000,MCI_DGV_SETAUDIO_QUALITY = 0x80000,MCI_DGV_SETAUDIO_RECORD = 0x100000,MCI_DGV_SETAUDIO_LEFT = 0x200000,MCI_DGV_SETAUDIO_RIGHT = 0x400000,MCI_DGV_SETAUDIO_ITEM = 0x800000,MCI_DGV_SETAUDIO_VALUE = 0x1000000,MCI_DGV_SETAUDIO_INPUT = 0x2000000,MCI_DGV_SETAUDIO_OUTPUT = 0x4000000,MCI_DGV_SETAUDIO_TREBLE = 0x4000,MCI_DGV_SETAUDIO_BASS = 0x4001,MCI_DGV_SETAUDIO_VOLUME = 0x4002,MCI_DGV_SETAUDIO_STREAM = 0x4003,MCI_DGV_SETAUDIO_SOURCE = 0x4004,MCI_DGV_SETAUDIO_SAMPLESPERSEC = 0x4005,MCI_DGV_SETAUDIO_AVGBYTESPERSEC = 0x4006,MCI_DGV_SETAUDIO_BLOCKALIGN = 0x4007,MCI_DGV_SETAUDIO_BITSPERSAMPLE = 0x4008,MCI_DGV_SETAUDIO_SOURCE_STEREO = 0x0,MCI_DGV_SETAUDIO_SOURCE_LEFT = 0x1,MCI_DGV_SETAUDIO_SOURCE_RIGHT = 0x2,MCI_DGV_SETAUDIO_SOURCE_AVERAGE = 0x4000,MCI_DGV_SETVIDEO_QUALITY = 0x10000,MCI_DGV_SETVIDEO_ALG = 0x20000,MCI_DGV_SETVIDEO_CLOCKTIME = 0x40000,MCI_DGV_SETVIDEO_SRC_NUMBER = 0x80000,MCI_DGV_SETVIDEO_ITEM = 0x100000,MCI_DGV_SETVIDEO_OVER = 0x200000,MCI_DGV_SETVIDEO_RECORD = 0x400000,MCI_DGV_SETVIDEO_STILL = 0x800000,MCI_DGV_SETVIDEO_VALUE = 0x1000000,MCI_DGV_SETVIDEO_INPUT = 0x2000000,MCI_DGV_SETVIDEO_OUTPUT = 0x4000000,MCI_DGV_SETVIDEO_SRC_NTSC = 0x4000,MCI_DGV_SETVIDEO_SRC_RGB = 0x4001,MCI_DGV_SETVIDEO_SRC_SVIDEO = 0x4002,MCI_DGV_SETVIDEO_SRC_PAL = 0x4003,MCI_DGV_SETVIDEO_SRC_SECAM = 0x4004,MCI_DGV_SETVIDEO_SRC_GENERIC = 0x4005,MCI_DGV_SETVIDEO_BRIGHTNESS = 0x4000,MCI_DGV_SETVIDEO_COLOR = 0x4001,MCI_DGV_SETVIDEO_CONTRAST = 0x4002,MCI_DGV_SETVIDEO_TINT = 0x4003,MCI_DGV_SETVIDEO_SHARPNESS = 0x4004,MCI_DGV_SETVIDEO_GAMMA = 0x4005,MCI_DGV_SETVIDEO_STREAM = 0x4006,MCI_DGV_SETVIDEO_PALHANDLE = 0x4007,MCI_DGV_SETVIDEO_FRAME_RATE = 0x4008,MCI_DGV_SETVIDEO_SOURCE = 0x4009,MCI_DGV_SETVIDEO_KEY_INDEX = 0x400A,MCI_DGV_SETVIDEO_KEY_COLOR = 0x400B,MCI_DGV_SETVIDEO_BITSPERPEL = 0x400C,MCI_DGV_SIGNAL_AT = 0x10000,MCI_DGV_SIGNAL_EVERY = 0x20000,MCI_DGV_SIGNAL_USERVAL = 0x40000,MCI_DGV_SIGNAL_CANCEL = 0x80000,MCI_DGV_SIGNAL_POSITION = 0x100000,MCI_DGV_STATUS_NOMINAL = 0x20000,MCI_DGV_STATUS_REFERENCE = 0x40000,MCI_DGV_STATUS_LEFT = 0x80000,MCI_DGV_STATUS_RIGHT = 0x100000,MCI_DGV_STATUS_DISKSPACE = 0x200000,MCI_DGV_STATUS_INPUT = 0x400000,MCI_DGV_STATUS_OUTPUT = 0x800000,MCI_DGV_STATUS_RECORD = 0x1000000,MCI_DGV_STATUS_AUDIO_INPUT = 0x4000,MCI_DGV_STATUS_HWND = 0x4001,MCI_DGV_STATUS_SPEED = 0x4003,MCI_DGV_STATUS_HPAL = 0x4004,MCI_DGV_STATUS_BRIGHTNESS = 0x4005,MCI_DGV_STATUS_COLOR = 0x4006,MCI_DGV_STATUS_CONTRAST = 0x4007,MCI_DGV_STATUS_FILEFORMAT = 0x4008,MCI_DGV_STATUS_AUDIO_SOURCE = 0x4009,MCI_DGV_STATUS_GAMMA = 0x400A,MCI_DGV_STATUS_MONITOR = 0x400B,MCI_DGV_STATUS_MONITOR_METHOD = 0x400C,MCI_DGV_STATUS_FRAME_RATE = 0x400E,MCI_DGV_STATUS_BASS = 0x400F,MCI_DGV_STATUS_SIZE = 0x4010,MCI_DGV_STATUS_SEEK_EXACTLY = 0x4011,MCI_DGV_STATUS_SHARPNESS = 0x4012,MCI_DGV_STATUS_SMPTE = 0x4013,MCI_DGV_STATUS_AUDIO = 0x4014,MCI_DGV_STATUS_TINT = 0x4015,MCI_DGV_STATUS_TREBLE = 0x4016,MCI_DGV_STATUS_UNSAVED = 0x4017,MCI_DGV_STATUS_VIDEO = 0x4018,MCI_DGV_STATUS_VOLUME = 0x4019,MCI_DGV_STATUS_AUDIO_RECORD = 0x401A,MCI_DGV_STATUS_VIDEO_SOURCE = 0x401B,MCI_DGV_STATUS_VIDEO_RECORD = 0x401C,MCI_DGV_STATUS_STILL_FILEFORMAT = 0x401D,MCI_DGV_STATUS_VIDEO_SRC_NUM = 0x401E,MCI_DGV_STATUS_FILE_MODE = 0x401F,MCI_DGV_STATUS_FILE_COMPLETION = 0x4020,MCI_DGV_STATUS_WINDOW_VISIBLE = 0x4021,MCI_DGV_STATUS_WINDOW_MINIMIZED = 0x4022,MCI_DGV_STATUS_WINDOW_MAXIMIZED = 0x4023,MCI_DGV_STATUS_KEY_INDEX = 0x4024,MCI_DGV_STATUS_KEY_COLOR = 0x4025,MCI_DGV_STATUS_PAUSE_MODE = 0x4026,MCI_DGV_STATUS_SAMPLESPERSEC = 0x4027,MCI_DGV_STATUS_AVGBYTESPERSEC = 0x4028,MCI_DGV_STATUS_BLOCKALIGN = 0x4029,MCI_DGV_STATUS_BITSPERSAMPLE = 0x402A,MCI_DGV_STATUS_BITSPERPEL = 0x402B,MCI_DGV_STATUS_FORWARD = 0x402C,MCI_DGV_STATUS_AUDIO_STREAM = 0x402D,MCI_DGV_STATUS_VIDEO_STREAM = 0x402E,MCI_DGV_STEP_REVERSE = 0x10000,MCI_DGV_STEP_FRAMES = 0x20000,MCI_DGV_STOP_HOLD = 0x10000,MCI_DGV_UPDATE_HDC = 0x20000,MCI_DGV_UPDATE_PAINT = 0x40000,MCI_DGV_WHERE_SOURCE = 0x20000,MCI_DGV_WHERE_DESTINATION = 0x40000,MCI_DGV_WHERE_FRAME = 0x80000,MCI_DGV_WHERE_VIDEO = 0x100000,MCI_DGV_WHERE_WINDOW = 0x200000,MCI_DGV_WHERE_MAX = 0x400000,MCI_DGV_WINDOW_HWND = 0x10000,MCI_DGV_WINDOW_STATE = 0x40000,MCI_DGV_WINDOW_TEXT = 0x80000,MCI_DGV_WINDOW_DEFAULT = 0x0,};
enum MACRO_MCI_VCR {MCI_VCR_OFFSET = 1280,MCI_MARK = 3072,MCI_INDEX = 3073,MCI_SETTUNER = 3074,MCI_SETVCR = 3075,MCI_SETTIMECODE = 3076,MCI_VCR_GETDEVCAPS_CAN_DETECT_LENGTH = 16385,MCI_VCR_GETDEVCAPS_SEEK_ACCURACY = 16386,MCI_VCR_GETDEVCAPS_HAS_CLOCK = 16387,MCI_VCR_GETDEVCAPS_CAN_REVERSE = 16388,MCI_VCR_GETDEVCAPS_NUMBER_OF_MARKS = 16389,MCI_VCR_GETDEVCAPS_CAN_TEST = 16390,MCI_VCR_GETDEVCAPS_CAN_PREROLL = 16391,MCI_VCR_GETDEVCAPS_CAN_PREVIEW = 16392,MCI_VCR_GETDEVCAPS_CAN_MONITOR_SOURCES = 16393,MCI_VCR_GETDEVCAPS_HAS_TIMECODE = 16394,MCI_VCR_GETDEVCAPS_CAN_FREEZE = 16411,MCI_VCR_GETDEVCAPS_CLOCK_INCREMENT_RATE = 16412,MCI_VCR_INFO_VERSION = 65536,MCI_VCR_PLAY_REVERSE = 65536,MCI_VCR_PLAY_AT = 131072,MCI_VCR_PLAY_SCAN = 262144,MCI_VCR_RECORD_INITIALIZE = 65536,MCI_VCR_RECORD_AT = 131072,MCI_VCR_RECORD_PREVIEW = 262144,MCI_VCR_CUE_INPUT = 65536,MCI_VCR_CUE_OUTPUT = 131072,MCI_VCR_CUE_PREROLL = 262144,MCI_VCR_CUE_REVERSE = 524288,MCI_VCR_SEEK_REVERSE = 65536,MCI_VCR_SEEK_MARK = 131072,MCI_VCR_SEEK_AT = 262144,MCI_VCR_SETTUNER_CHANNEL = 65536,MCI_VCR_SETTUNER_CHANNEL_UP = 131072,MCI_VCR_SETTUNER_CHANNEL_DOWN = 262144,MCI_VCR_SETTUNER_CHANNEL_SEEK_UP = 524288,MCI_VCR_SETTUNER_CHANNEL_SEEK_DOWN = 1048576,MCI_VCR_SETTUNER_NUMBER = 2097152,MCI_VCR_SET_TIME_MODE = 65536,MCI_VCR_SET_POWER = 131072,MCI_VCR_SET_RECORD_FORMAT = 262144,MCI_VCR_SET_COUNTER_FORMAT = 524288,MCI_VCR_SET_INDEX = 1048576,MCI_VCR_SET_ASSEMBLE_RECORD = 2097152,MCI_VCR_SET_TRACKING = 4194304,MCI_VCR_SET_SPEED = 8388608,MCI_VCR_SET_TAPE_LENGTH = 16777216,MCI_VCR_SET_COUNTER_VALUE = 33554432,MCI_VCR_SET_CLOCK = 67108864,MCI_VCR_SET_PAUSE_TIMEOUT = 134217728,MCI_VCR_SET_PREROLL_DURATION = 268435456,MCI_VCR_SET_POSTROLL_DURATION = 536870912,MCI_VCR_SETTIMECODE_RECORD = 65536,MCI_VCR_STATUS_FRAME_RATE = 16385,MCI_VCR_STATUS_SPEED = 16386,MCI_VCR_STATUS_MEDIA_TYPE = 16387,MCI_VCR_STATUS_RECORD_FORMAT = 16388,MCI_VCR_STATUS_PLAY_FORMAT = 16389,MCI_VCR_STATUS_AUDIO_SOURCE = 16390,MCI_VCR_STATUS_AUDIO_SOURCE_NUMBER = 16391,MCI_VCR_STATUS_VIDEO_SOURCE = 16392,MCI_VCR_STATUS_VIDEO_SOURCE_NUMBER = 16393,MCI_VCR_STATUS_AUDIO_MONITOR = 16394,MCI_VCR_STATUS_AUDIO_MONITOR_NUMBER = 16395,MCI_VCR_STATUS_VIDEO_MONITOR = 16396,MCI_VCR_STATUS_VIDEO_MONITOR_NUMBER = 16397,MCI_VCR_STATUS_INDEX_ON = 16398,MCI_VCR_STATUS_INDEX = 16399,MCI_VCR_STATUS_COUNTER_FORMAT = 16400,MCI_VCR_STATUS_COUNTER_RESOLUTION = 16401,MCI_VCR_STATUS_TIMECODE_TYPE = 16402,MCI_VCR_STATUS_COUNTER_VALUE = 16403,MCI_VCR_STATUS_TUNER_CHANNEL = 16404,MCI_VCR_STATUS_WRITE_PROTECTED = 16405,MCI_VCR_STATUS_TIMECODE_RECORD = 16406,MCI_VCR_STATUS_VIDEO_RECORD = 16407,MCI_VCR_STATUS_AUDIO_RECORD = 16408,MCI_VCR_STATUS_TIME_TYPE = 16409,MCI_VCR_STATUS_TIME_MODE = 16410,MCI_VCR_STATUS_POWER_ON = 16411,MCI_VCR_STATUS_CLOCK = 16412,MCI_VCR_STATUS_ASSEMBLE_RECORD = 16413,MCI_VCR_STATUS_TIMECODE_PRESENT = 16414,MCI_VCR_STATUS_NUMBER_OF_VIDEO_TRACKS = 16415,MCI_VCR_STATUS_NUMBER_OF_AUDIO_TRACKS = 16416,MCI_VCR_STATUS_CLOCK_ID = 16417,MCI_VCR_STATUS_PAUSE_TIMEOUT = 16418,MCI_VCR_STATUS_PREROLL_DURATION = 16419,MCI_VCR_STATUS_POSTROLL_DURATION = 16420,MCI_VCR_STATUS_VIDEO = 16421,MCI_VCR_STATUS_AUDIO = 16422,MCI_VCR_STATUS_NUMBER = 524288,MCI_VCR_ESCAPE_STRING = 256,MCI_VCR_LIST_VIDEO_SOURCE = 65536,MCI_VCR_LIST_AUDIO_SOURCE = 131072,MCI_VCR_LIST_COUNT = 262144,MCI_VCR_LIST_NUMBER = 524288,MCI_VCR_MARK_WRITE = 65536,MCI_VCR_MARK_ERASE = 131072,MCI_VCR_SETAUDIO_RECORD = 65536,MCI_VCR_SETAUDIO_SOURCE = 131072,MCI_VCR_SETAUDIO_MONITOR = 262144,MCI_VCR_SETAUDIO_TO = 2097152,MCI_VCR_SETAUDIO_NUMBER = 4194304,MCI_VCR_SETVIDEO_RECORD = 65536,MCI_VCR_SETVIDEO_SOURCE = 131072,MCI_VCR_SETVIDEO_MONITOR = 262144,MCI_VCR_SETVIDEO_TO = 1048576,MCI_VCR_SETVIDEO_NUMBER = 2097152,MCI_VCR_SIGNAL_AT = 65536,MCI_VCR_SIGNAL_EVERY = 131072,MCI_VCR_SIGNAL_USERVAL = 262144,MCI_VCR_SIGNAL_CANCEL = 524288,MCI_VCR_SIGNAL_POSITION = 1048576,MCI_VCR_STEP_FRAMES = 65536,MCI_VCR_STEP_REVERSE = 131072,MCI_VCR_FREEZE_INPUT = 65536,MCI_VCR_FREEZE_OUTPUT = 131072,MCI_VCR_FREEZE_FIELD = 262144,MCI_VCR_FREEZE_FRAME = 524288,MCI_VCR_UNFREEZE_INPUT = 65536,MCI_VCR_UNFREEZE_OUTPUT = 131072,MCI_VCR_MEDIA_8MM = 1281,MCI_VCR_MEDIA_HI8 = 1282,MCI_VCR_MEDIA_VHS = 1283,MCI_VCR_MEDIA_SVHS = 1284,MCI_VCR_MEDIA_BETA = 1285,MCI_VCR_MEDIA_EDBETA = 1286,MCI_VCR_MEDIA_OTHER = 1287,MCI_VCR_FORMAT_SP = 1288,MCI_VCR_FORMAT_LP = 1289,MCI_VCR_FORMAT_EP = 1290,MCI_VCR_FORMAT_OTHER = 1291,MCI_VCR_TIME_TIMECODE = 1292,MCI_VCR_TIME_COUNTER = 1293,MCI_VCR_TIME_DETECT = 1294,MCI_VCR_SRC_TYPE_TUNER = 1295,MCI_VCR_SRC_TYPE_LINE = 1296,MCI_VCR_SRC_TYPE_SVIDEO = 1297,MCI_VCR_SRC_TYPE_RGB = 1298,MCI_VCR_SRC_TYPE_AUX = 1299,MCI_VCR_SRC_TYPE_GENERIC = 1300,MCI_VCR_SRC_TYPE_MUTE = 1301,MCI_VCR_SRC_TYPE_OUTPUT = 1302,MCI_VCR_INDEX_TIMECODE = 1303,MCI_VCR_INDEX_COUNTER = 1304,MCI_VCR_INDEX_DATE = 1305,MCI_VCR_INDEX_TIME = 1306,MCI_VCR_COUNTER_RES_SECONDS = 1307,MCI_VCR_COUNTER_RES_FRAMES = 1308,MCI_VCR_TIMECODE_TYPE_SMPTE = 1309,MCI_VCR_TIMECODE_TYPE_SMPTE_DROP = 1310,MCI_VCR_TIMECODE_TYPE_OTHER = 1311,MCI_VCR_TIMECODE_TYPE_NONE = 1312,MCI_VCR_PLUS = 1313,MCI_VCR_MINUS = 1314,MCI_VCR_RESET = 1315,};
enum MACRO_MDITILE {MDITILE_VERTICAL = 0x0,MDITILE_HORIZONTAL = 0x1,MDITILE_SKIPDISABLED = 0x2,};
enum MACRO_MDLEVEL {MDLEVEL_TYPE_UNKNOWN = 0x0,MDLEVEL_TYPE_REGULAR = 0x0,MDLEVEL_TYPE_ALL = 0x1,MDLEVEL_TYPE_CALCULATED = 0x2,MDLEVEL_TYPE_TIME = 0x4,MDLEVEL_TYPE_RESERVED1 = 0x8,MDLEVEL_TYPE_TIME_YEARS = 0x14,MDLEVEL_TYPE_TIME_HALF_YEAR = 0x24,MDLEVEL_TYPE_TIME_QUARTERS = 0x44,MDLEVEL_TYPE_TIME_MONTHS = 0x84,MDLEVEL_TYPE_TIME_WEEKS = 0x104,MDLEVEL_TYPE_TIME_DAYS = 0x204,MDLEVEL_TYPE_TIME_HOURS = 0x304,MDLEVEL_TYPE_TIME_MINUTES = 0x404,MDLEVEL_TYPE_TIME_SECONDS = 0x804,MDLEVEL_TYPE_TIME_UNDEFINED = 0x1004,};
enum MACRO_MDMSPKR {MDMSPKR_OFF = 0x0,MDMSPKR_DIAL = 0x1,MDMSPKR_ON = 0x2,MDMSPKR_CALLSETUP = 0x3,};
enum MACRO_MD_EXIT {MD_EXIT_MESSAGE = 5001,MD_GREETING_MESSAGE = 5002,MD_MAX_CLIENTS_MESSAGE = 5003,MD_MSDOS_DIR_OUTPUT = 5004,MD_ALLOW_ANONYMOUS = 5005,MD_ANONYMOUS_ONLY = 5006,MD_LOG_ANONYMOUS = 5007,MD_LOG_NONANONYMOUS = 5008,MD_ALLOW_REPLACE_ON_RENAME = 5009,};
enum MACRO_MENUEXT {MENUEXT_SHOWDIALOG = 0x1,};
enum MACRO_MESSAGE {MESSAGE_RESOURCE_UNICODE = 0x1,};
enum MACRO_METRICS {METRICS_USEDEFAULT = -1,};
enum MACRO_MIDIERR {MIDIERR_UNPREPARED = 64,MIDIERR_STILLPLAYING = 65,MIDIERR_NOMAP = 66,MIDIERR_NOTREADY = 67,MIDIERR_NODEVICE = 68,MIDIERR_INVALIDSETUP = 69,MIDIERR_BADOPENMODE = 70,MIDIERR_DONT_CONTINUE = 71,MIDIERR_LASTERROR = 71,};
enum MACRO_MINCHAR {MINCHAR = 0x80,};
enum MACRO_MIN_EMS {MIN_EMS_AB_CONSTRUCTED_PROP_ID = 0xFFF8,};
enum MACRO_MMIOERR {MMIOERR_BASE = 256,MMIOERR_FILENOTFOUND = 257,MMIOERR_OUTOFMEMORY = 258,MMIOERR_CANNOTOPEN = 259,MMIOERR_CANNOTCLOSE = 260,MMIOERR_CANNOTREAD = 261,MMIOERR_CANNOTWRITE = 262,MMIOERR_CANNOTSEEK = 263,MMIOERR_CANNOTEXPAND = 264,MMIOERR_CHUNKNOTFOUND = 265,MMIOERR_UNBUFFERED = 266,MMIOERR_PATHNOTFOUND = 267,MMIOERR_ACCESSDENIED = 268,MMIOERR_SHARINGVIOLATION = 269,MMIOERR_NETWORKERROR = 270,MMIOERR_TOOMANYOPENFILES = 271,MMIOERR_INVALIDFILE = 272,};
enum MACRO_MONITOR {MONITOR_DEFAULTTONULL = 0x0,MONITOR_DEFAULTTOPRIMARY = 0x1,MONITOR_DEFAULTTONEAREST = 0x2,};
enum MACRO_MSGFLAG {MSGFLAG_READ = 0x1,MSGFLAG_UNMODIFIED = 0x2,MSGFLAG_SUBMIT = 0x4,MSGFLAG_UNSENT = 0x8,MSGFLAG_HASATTACH = 0x10,MSGFLAG_FROMME = 0x20,MSGFLAG_ASSOCIATED = 0x40,MSGFLAG_RESEND = 0x80,MSGFLAG_RN_PENDING = 0x100,MSGFLAG_NRN_PENDING = 0x200,};
enum MACRO_MSGNAME {MSGNAME_NOT_FORWARDED = 0,MSGNAME_FORWARDED_TO = 4,MSGNAME_FORWARDED_FROM = 16,};
enum MACRO_NCBCALL {NCBCALL = 0x10,};
enum MACRO_NCBENUM {NCBENUM = 0x37,};
enum MACRO_NCBRECV {NCBRECV = 0x15,};
enum MACRO_NCBSEND {NCBSEND = 0x14,};
enum MACRO_NETBIOS {NETBIOS_NAME_LEN = 16,};
enum MACRO_NETINFO {NETINFO_DLL16 = 0x1,NETINFO_DISKRED = 0x4,NETINFO_PRINTERRED = 0x8,};
enum MACRO_NETWORK {NETWORK_ERROR = 0x4000F105,};
enum MACRO_NET_NOT {NET_NOT_AVAIL = 0x2,};
enum MACRO_NMPWAIT {NMPWAIT_WAIT_FOREVER = 0xFFFFFFFF,NMPWAIT_NOWAIT = 0x1,NMPWAIT_USE_DEFAULT_WAIT = 0x0,};
enum MACRO_NOERROR {NOERROR = 0,};
enum MACRO_NONSTOP {NONSTOP_SQL = 14,};
enum MACRO_NO_MORE {NO_MORE_RESULTS = 2,NO_MORE_RPC_RESULTS = 3,};
enum MACRO_NO_SUCH {NO_SUCH_CLASS = 0x4000F106,NO_SUCH_EXCLUSION = 0x4000F107,NO_SUCH_MODIFICATION = 0x4000F108,NO_SUCH_RULES = 0x4000F109,NO_SUCH_SYNTAX = 0x4000F10A,NO_SUCH_TYPE = 0x4000F10B,NO_SUCH_WORKSPACE = 0x4000F10C,};
enum MACRO_NSPROTO {NSPROTO_IPX = 1000,NSPROTO_SPX = 1256,NSPROTO_SPXII = 1257,};
enum MACRO_NTMSMLI {NTMSMLI_MAXTYPE = 64,NTMSMLI_MAXIDSIZE = 256,NTMSMLI_MAXAPPDESCR = 256,};
enum MACRO_NULLBER {NULLBER = 0,};
enum MACRO_NUMPENS {NUMPENS = 18,};
enum MACRO_ODBCVER {ODBCVER = 0x351,};
enum MACRO_ODBC_VS {ODBC_VS_FLAG_UNICODE_ARG = 0x1,ODBC_VS_FLAG_UNICODE_COR = 0x2,ODBC_VS_FLAG_RETCODE = 0x4,ODBC_VS_FLAG_STOP = 0x8,};
enum MACRO_ONE_DAY {ONE_DAY = 0x15180,};
enum MACRO_OPENMSG {OPENMSG = 1,CLOSEMSG = 2,DATAFMI = 32,};
enum MACRO_OPEN_IF {OPEN_IF_EXISTS = 0x1,};
enum MACRO_PACKAGE {PACKAGE_USER_READ = 0x1,PACKAGE_USER_WRITE = 0x2,PACKAGE_GUEST_READ = 0x4,PACKAGE_GUEST_WRITE = 0x8,};
enum MACRO_PADDING {PKCS5_PADDING = 1,RANDOM_PADDING = 2,ZERO_PADDING = 3,};
enum MACRO_PAGESET {PAGESET_TOLASTPAGE = 65535,};
enum MACRO_PARMNUM {PARMNUM_ALL = 0,};
enum MACRO_PATCOPY {PATCOPY = 0xF00021,};
enum MACRO_PATHLEN {PATHLEN = 256,};
enum MACRO_PC_NONE {PC_NONE = 0,PC_POLYGON = 1,PC_RECTANGLE = 2,PC_WINDPOLYGON = 4,PC_TRAPEZOID = 4,PC_SCANLINE = 8,PC_WIDE = 16,PC_STYLED = 32,PC_WIDESTYLED = 64,PC_INTERIORS = 128,PC_POLYPOLYGON = 256,PC_PATHS = 512,};
enum MACRO_PENDING {PENDING = 600,};
enum MACRO_PERPROP {PERPROP_E_FIRST = 0x80040200,PERPROP_E_LAST = 0x8004020F,PERPROP_S_FIRST = 0x40200,PERPROP_S_LAST = 0x4020F,PERPROP_E_NOPAGEAVAILABLE = 0x80040200,};
enum MACRO_PICTYPE {PICTYPE_UNINITIALIZED = -1,PICTYPE_NONE = 0,PICTYPE_BITMAP = 1,PICTYPE_METAFILE = 2,PICTYPE_ICON = 3,PICTYPE_ENHMETAFILE = 4,};
enum MACRO_PID_STG {PID_STG_DIRECTORY = 0x2,PID_STG_CLASSID = 0x3,PID_STG_STORAGETYPE = 0x4,PID_STG_VOLUME_ID = 0x5,PID_STG_PARENT_WORKID = 0x6,PID_STG_FILEINDEX = 0x8,PID_STG_LASTCHANGEUSN = 0x9,PID_STG_NAME = 0xA,PID_STG_PATH = 0xB,PID_STG_SIZE = 0xC,PID_STG_ATTRIBUTES = 0xD,PID_STG_WRITETIME = 0xE,PID_STG_CREATETIME = 0xF,PID_STG_ACCESSTIME = 0x10,PID_STG_ALLOCSIZE = 0x12,PID_STG_CONTENTS = 0x13,PID_STG_SHORTNAME = 0x14,PID_STG_MAX = 0x14,};
enum MACRO_POINTER {POINTER_INVALID = 0x4000F113,};
enum MACRO_PREPARE {PREPARE_ANIMATION = 0,PREPARE_STATE = 1,PREPARE_WAVE = 2,};
enum MACRO_PRESSED {RIGHT_ALT_PRESSED = 0x1,LEFT_ALT_PRESSED = 0x2,RIGHT_CTRL_PRESSED = 0x4,LEFT_CTRL_PRESSED = 0x8,SHIFT_PRESSED = 0x10,};
enum MACRO_PRINTER {PRINTER_CONTROL_PAUSE = 1,PRINTER_CONTROL_RESUME = 2,PRINTER_CONTROL_PURGE = 3,PRINTER_CONTROL_SET_STATUS = 4,PRINTER_STATUS_PAUSED = 1,PRINTER_STATUS_ERROR = 2,PRINTER_STATUS_PENDING_DELETION = 4,PRINTER_STATUS_PAPER_JAM = 8,PRINTER_STATUS_PAPER_OUT = 16,PRINTER_STATUS_MANUAL_FEED = 32,PRINTER_STATUS_PAPER_PROBLEM = 64,PRINTER_STATUS_OFFLINE = 128,PRINTER_STATUS_IO_ACTIVE = 256,PRINTER_STATUS_BUSY = 512,PRINTER_STATUS_PRINTING = 1024,PRINTER_STATUS_OUTPUT_BIN_FULL = 2048,PRINTER_STATUS_NOT_AVAILABLE = 4096,PRINTER_STATUS_WAITING = 8192,PRINTER_STATUS_PROCESSING = 16384,PRINTER_STATUS_INITIALIZING = 32768,PRINTER_STATUS_WARMING_UP = 65536,PRINTER_STATUS_TONER_LOW = 131072,PRINTER_STATUS_NO_TONER = 262144,PRINTER_STATUS_PAGE_PUNT = 524288,PRINTER_STATUS_USER_INTERVENTION = 1048576,PRINTER_STATUS_OUT_OF_MEMORY = 2097152,PRINTER_STATUS_DOOR_OPEN = 4194304,PRINTER_STATUS_SERVER_UNKNOWN = 8388608,PRINTER_STATUS_POWER_SAVE = 16777216,PRINTER_ATTRIBUTE_QUEUED = 1,PRINTER_ATTRIBUTE_DIRECT = 2,PRINTER_ATTRIBUTE_DEFAULT = 4,PRINTER_ATTRIBUTE_SHARED = 8,PRINTER_ATTRIBUTE_NETWORK = 16,PRINTER_ATTRIBUTE_HIDDEN = 32,PRINTER_ATTRIBUTE_LOCAL = 64,PRINTER_ATTRIBUTE_ENABLE_DEVQ = 128,PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 256,PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 512,PRINTER_ATTRIBUTE_WORK_OFFLINE = 1024,PRINTER_ATTRIBUTE_ENABLE_BIDI = 2048,PRINTER_ATTRIBUTE_RAW_ONLY = 4096,PRINTER_ATTRIBUTE_PUBLISHED = 8192,};
enum MACRO_PRIUSER {PRIUSER = 0,};
enum MACRO_PRMONEY {PRMONEY = 26,};
enum MACRO_PROCESS {PROCESS_TERMINATE = 0x1,PROCESS_CREATE_THREAD = 0x2,PROCESS_SET_SESSIONID = 0x4,PROCESS_VM_OPERATION = 0x8,PROCESS_VM_READ = 0x10,PROCESS_VM_WRITE = 0x20,PROCESS_DUP_HANDLE = 0x40,PROCESS_CREATE_PROCESS = 0x80,PROCESS_SET_QUOTA = 0x100,PROCESS_SET_INFORMATION = 0x200,PROCESS_QUERY_INFORMATION = 0x400,PROCESS_ALL_ACCESS = 0x1F0FFF,};
enum MACRO_PROFILE {PROFILE_USER = 0x10000000,PROFILE_KERNEL = 0x20000000,PROFILE_SERVER = 0x40000000,};
enum MACRO_PROP_ID {PROP_ID_SECURE_MIN = 0x67F0,PROP_ID_SECURE_MAX = 0x67FF,};
enum MACRO_PR_NULL {PR_NULL = 1,};
enum MACRO_PR_RULE {PR_RULE_ID = 1718878228,PR_RULE_IDS = 1718944002,PR_RULE_SEQUENCE = 1719009283,PR_RULE_STATE = 1719074819,PR_RULE_USER_FLAGS = 1719140355,PR_RULE_CONDITION = 1719206141,PR_RULE_ACTIONS = 1719664894,PR_RULE_PROVIDER = 1719730206,PR_RULE_NAME = 1719795742,PR_RULE_LEVEL = 1719861251,PR_RULE_PROVIDER_DATA = 1719927042,};
enum MACRO_PR_USER {PR_USER_ENTRYID = 0x66190102,PR_USER_NAME = 0x661A001E,PR_MAILBOX_OWNER_ENTRYID = 0x661B0102,PR_MAILBOX_OWNER_NAME = 0x661C001E,PR_OOF_STATE = 0x661D000B,PR_HIERARCHY_SERVER = 0x6633001E,PR_SCHEDULE_FOLDER_ENTRYID = 0x661E0102,PR_IPM_DAF_ENTRYID = 0x661F0102,PR_NON_IPM_SUBTREE_ENTRYID = 0x66200102,PR_EFORMS_REGISTRY_ENTRYID = 0x66210102,PR_SPLUS_FREE_BUSY_ENTRYID = 0x66220102,PR_OFFLINE_ADDRBOOK_ENTRYID = 0x66230102,PR_EFORMS_FOR_LOCALE_ENTRYID = 0x66240102,PR_FREE_BUSY_FOR_LOCAL_SITE_ENTRYID = 0x66250102,PR_ADDRBOOK_FOR_LOCAL_SITE_ENTRYID = 0x66260102,PR_OFFLINE_MESSAGE_ENTRYID = 0x66270102,PR_IPM_FAVORITES_ENTRYID = 0x66300102,PR_IPM_PUBLIC_FOLDERS_ENTRYID = 0x66310102,PR_GW_MTSIN_ENTRYID = 0x66280102,PR_GW_MTSOUT_ENTRYID = 0x66290102,PR_TRANSFER_ENABLED = 0x662A000B,PR_TEST_LINE_SPEED = 0x662B0102,PR_HIERARCHY_SYNCHRONIZER = 0x662C000D,PR_CONTENTS_SYNCHRONIZER = 0x662D000D,PR_COLLECTOR = 0x662E000D,PR_FAST_TRANSFER = 0x662F000D,PR_STORE_OFFLINE = 0x6632000B,PR_IN_TRANSIT = 0x6618000B,PR_REPLICATION_STYLE = 0x66900003,PR_REPLICATION_SCHEDULE = 0x66910102,PR_REPLICATION_MESSAGE_PRIORITY = 0x66920003,PR_OVERALL_MSG_AGE_LIMIT = 0x66930003,PR_REPLICATION_ALWAYS_INTERVAL = 0x66940003,PR_REPLICATION_MSG_SIZE = 0x66950003,};
enum MACRO_PSIDENT {PSIDENT_GDICENTRIC = 0,PSIDENT_PSCENTRIC = 1,};
enum MACRO_QUALITY {DEFAULT_QUALITY = 0,DRAFT_QUALITY = 1,PROOF_QUALITY = 2,NONANTIALIASED_QUALITY = 3,ANTIALIASED_QUALITY = 4,};
enum MACRO_RASBASE {RASBASE = 600,};
enum MACRO_RASPRIV {RASPRIV_NoCallback = 0x1,RASPRIV_AdminSetCallback = 0x2,RASPRIV_CallerSetCallback = 0x4,RASPRIV_DialinPrivilege = 0x8,RASPRIV_CallbackType = 0x7,};
enum MACRO_RASSAPI {RASSAPI_MAX_PHONENUMBER_SIZE = 128,RASSAPI_MAX_MEDIA_NAME = 16,RASSAPI_MAX_PORT_NAME = 16,RASSAPI_MAX_DEVICE_NAME = 128,RASSAPI_MAX_DEVICETYPE_NAME = 16,RASSAPI_MAX_PARAM_KEY_SIZE = 32,};
enum MACRO_RC_CHOP {RC_CHOP = 768,RC_UP = 512,RC_DOWN = 256,RC_NEAR = 0,};
enum MACRO_READERR {READERR = 7,NONAP = 8,};
enum MACRO_REG_ROW {REG_ROW = -1,};
enum MACRO_REPLACE {REPLACE_PRIMARY = 0xA,REPLACE_ALTERANTE = 0xB,};
enum MACRO_RESOLVE {RESOLVE_METHOD_DEFAULT = 0,RESOLVE_METHOD_LAST_WRITER_WINS = 1,RESOLVE_METHOD_NO_CONFLICT_NOTIFICATION = 2,};
enum MACRO_RES_AND {RES_AND = 0x0,RES_OR = 0x1,RES_NOT = 0x2,RES_CONTENT = 0x3,RES_PROPERTY = 0x4,RES_COMPAREPROPS = 0x5,RES_BITMASK = 0x6,RES_SIZE = 0x7,RES_EXIST = 0x8,RES_SUBRESTRICTION = 0x9,RES_COMMENT = 0xA,};
enum MACRO_ROUTING {ROUTING = 0x1,};
enum MACRO_ROWLIST {ROWLIST_REPLACE = 1,};
enum MACRO_RUNCMDS {RUNCMDS_QUIET = 0x1,RUNCMDS_NOWAIT = 0x2,RUNCMDS_DELAYPOSTCMD = 0x4,};
enum MACRO_SBPUSEC {SBPUSEC = 3,};
enum MACRO_SB_HORZ {SB_HORZ = 0,SB_VERT = 1,SB_CTL = 2,SB_BOTH = 3,SB_LINEUP = 0,SB_LINELEFT = 0,SB_LINEDOWN = 1,SB_LINERIGHT = 1,SB_PAGEUP = 2,SB_PAGELEFT = 2,SB_PAGEDOWN = 3,SB_PAGERIGHT = 3,SB_THUMBPOSITION = 4,SB_THUMBTRACK = 5,SB_TOP = 6,SB_LEFT = 6,SB_BOTTOM = 7,SB_RIGHT = 7,SB_ENDSCROLL = 8,};
enum MACRO_SCARD_F {SCARD_F_INTERNAL_ERROR = 0x80100001,SCARD_E_CANCELLED = 0x80100002,SCARD_E_INVALID_HANDLE = 0x80100003,SCARD_E_INVALID_PARAMETER = 0x80100004,SCARD_E_INVALID_TARGET = 0x80100005,SCARD_E_NO_MEMORY = 0x80100006,SCARD_F_WAITED_TOO_LONG = 0x80100007,SCARD_E_INSUFFICIENT_BUFFER = 0x80100008,SCARD_E_UNKNOWN_READER = 0x80100009,SCARD_E_TIMEOUT = 0x8010000A,SCARD_E_SHARING_VIOLATION = 0x8010000B,SCARD_E_NO_SMARTCARD = 0x8010000C,SCARD_E_UNKNOWN_CARD = 0x8010000D,SCARD_E_CANT_DISPOSE = 0x8010000E,SCARD_E_PROTO_MISMATCH = 0x8010000F,SCARD_E_NOT_READY = 0x80100010,SCARD_E_INVALID_VALUE = 0x80100011,SCARD_E_SYSTEM_CANCELLED = 0x80100012,SCARD_F_COMM_ERROR = 0x80100013,SCARD_F_UNKNOWN_ERROR = 0x80100014,SCARD_E_INVALID_ATR = 0x80100015,SCARD_E_NOT_TRANSACTED = 0x80100016,SCARD_E_READER_UNAVAILABLE = 0x80100017,SCARD_P_SHUTDOWN = 0x80100018,SCARD_E_PCI_TOO_SMALL = 0x80100019,SCARD_E_READER_UNSUPPORTED = 0x8010001A,SCARD_E_DUPLICATE_READER = 0x8010001B,SCARD_E_CARD_UNSUPPORTED = 0x8010001C,SCARD_E_NO_SERVICE = 0x8010001D,SCARD_E_SERVICE_STOPPED = 0x8010001E,SCARD_W_UNSUPPORTED_CARD = 0x80100065,SCARD_W_UNRESPONSIVE_CARD = 0x80100066,SCARD_W_UNPOWERED_CARD = 0x80100067,SCARD_W_RESET_CARD = 0x80100068,SCARD_W_REMOVED_CARD = 0x80100069,};
enum MACRO_SCS_CAP {SCS_CAP_COMPSTR = 0x1,SCS_CAP_MAKEREAD = 0x2,SCS_CAP_SETRECONVERTSTRING = 0x4,};
enum MACRO_SECTION {SECTION_QUERY = 0x1,SECTION_MAP_WRITE = 0x2,SECTION_MAP_READ = 0x4,SECTION_MAP_EXECUTE = 0x8,SECTION_EXTEND_SIZE = 0x10,SECTION_ALL_ACCESS = 0xF001F,};
enum MACRO_SELFLAG {SELFLAG_NONE = 0x0,SELFLAG_TAKEFOCUS = 0x1,SELFLAG_TAKESELECTION = 0x2,SELFLAG_EXTENDSELECTION = 0x4,SELFLAG_ADDSELECTION = 0x8,SELFLAG_REMOVESELECTION = 0x10,SELFLAG_VALID = 0x1F,};
enum MACRO_SELFREG {SELFREG_E_FIRST = 0x80040200,SELFREG_E_LAST = 0x8004020F,SELFREG_S_FIRST = 0x40200,SELFREG_S_LAST = 0x4020F,SELFREG_E_TYPELIB = 0x80040200,SELFREG_E_CLASS = 0x80040201,};
enum MACRO_SERVICE {SERVICE_KERNEL_DRIVER = 0x1,SERVICE_FILE_SYSTEM_DRIVER = 0x2,SERVICE_ADAPTER = 0x4,SERVICE_RECOGNIZER_DRIVER = 0x8,SERVICE_DRIVER = 0xB,SERVICE_WIN32_OWN_PROCESS = 0x10,SERVICE_WIN32_SHARE_PROCESS = 0x20,SERVICE_WIN32 = 0x30,SERVICE_INTERACTIVE_PROCESS = 0x100,SERVICE_TYPE_ALL = 0x13F,SERVICE_BOOT_START = 0x0,SERVICE_SYSTEM_START = 0x1,SERVICE_AUTO_START = 0x2,SERVICE_DEMAND_START = 0x3,SERVICE_DISABLED = 0x4,SERVICE_ERROR_IGNORE = 0x0,SERVICE_ERROR_NORMAL = 0x1,SERVICE_ERROR_SEVERE = 0x2,SERVICE_ERROR_CRITICAL = 0x3,};
enum MACRO_SESSION {SESSION_ESTABLISHED = 0x3,};
enum MACRO_SETXOFF {SETXOFF = 1,SETXON = 2,};
enum MACRO_SET_ARC {SET_ARC_DIRECTION = 4102,SET_BACKGROUND_COLOR = 4103,SET_POLY_MODE = 4104,SET_SCREEN_ANGLE = 4105,SET_SPREAD = 4106,};
enum MACRO_SF_TEXT {SF_TEXT = 0x1,SF_RTF = 0x2,SF_RTFNOOBJS = 0x3,SF_TEXTIZED = 0x4,SF_UNICODE = 0x10,};
enum MACRO_SHGDFIL {SHGDFIL_FINDDATA = 1,SHGDFIL_NETRESOURCE = 2,SHGDFIL_DESCRIPTIONID = 3,};
enum MACRO_SHI1005 {SHI1005_FLAGS_DFS = 0x1,SHI1005_FLAGS_DFS_ROOT = 0x2,};
enum MACRO_SHOW_XP {SHOW_XP_SESSION_UI = 0x400000,};
enum MACRO_SHPWLEN {SHPWLEN = 8,};
enum MACRO_SIO_GET {SIO_GET_NUMBER_OF_ATM_DEVICES = 0x50160001,SIO_GET_ATM_ADDRESS = 0xD0160002,SIO_ASSOCIATE_PVC = 0x90160003,SIO_GET_ATM_CONNECTION_ID = 0x50160004,};
enum MACRO_SNMPAPI {SNMPAPI_NOERROR = 1,SNMPAPI_ERROR = 0,};
enum MACRO_SPFILEQ {SPFILEQ_FILE_IN_USE = 0x1,SPFILEQ_REBOOT_RECOMMENDED = 0x2,SPFILEQ_REBOOT_IN_PROGRESS = 0x4,};
enum MACRO_SP_COPY {SP_COPY_DELETESOURCE = 0x1,SP_COPY_REPLACEONLY = 0x2,SP_COPY_NEWER = 0x4,SP_COPY_NEWER_OR_SAME = 0x4,SP_COPY_NOOVERWRITE = 0x8,SP_COPY_NODECOMP = 0x10,SP_COPY_LANGUAGEAWARE = 0x20,SP_COPY_SOURCE_ABSOLUTE = 0x40,SP_COPY_SOURCEPATH_ABSOLUTE = 0x80,SP_COPY_IN_USE_NEEDS_REBOOT = 0x100,SP_COPY_FORCE_IN_USE = 0x200,SP_COPY_NOSKIP = 0x400,SP_FLAG_CABINETCONTINUATION = 0x800,SP_COPY_FORCE_NOOVERWRITE = 0x1000,SP_COPY_FORCE_NEWER = 0x2000,SP_COPY_WARNIFSKIP = 0x4000,SP_COPY_NOBROWSE = 0x8000,SP_COPY_NEWER_ONLY = 0x10000,};
enum MACRO_SP_PROT {SP_PROT_PCT1_SERVER = 0x1,SP_PROT_PCT1_CLIENT = 0x2,SP_PROT_PCT1 = 0x3,SP_PROT_SSL2_SERVER = 0x4,SP_PROT_SSL2_CLIENT = 0x8,SP_PROT_SSL2 = 0xC,SP_PROT_SSL3_SERVER = 0x10,SP_PROT_SSL3_CLIENT = 0x20,SP_PROT_SSL3 = 0x30,SP_PROT_TLS1_SERVER = 0x40,SP_PROT_TLS1_CLIENT = 0x80,SP_PROT_TLS1 = 0xC0,SP_PROT_SSL3TLS1_CLIENTS = 0xA0,SP_PROT_SSL3TLS1_SERVERS = 0x50,SP_PROT_SSL3TLS1 = 0xF0,SP_PROT_UNI_SERVER = 0x40000000,SP_PROT_UNI_CLIENT = 0x80000000,SP_PROT_UNI = 0xC0000000,SP_PROT_ALL = 0xFFFFFFFF,SP_PROT_ALL_NOT_TLS = 0x3F,SP_PROT_NONE = 0x0,SP_PROT_CLIENTS = 0x800000AA,SP_PROT_SERVERS = 0x40000055,};
enum MACRO_SQLEDTC {SQLEDTC = 10107,};
enum MACRO_SQLEICN {SQLEICN = 10017,};
enum MACRO_SQLEMEM {SQLEMEM = 10000,};
enum MACRO_SQLEOOB {SQLEOOB = 10027,};
enum MACRO_SQLEPWD {SQLEPWD = 10003,};
enum MACRO_SQLINIT {SQLINIT = 10074,};
enum MACRO_SRCCOPY {SRCCOPY = 0xCC0020,};
enum MACRO_SRCINFO {SRCINFO_TAGFILE = 2,SRCINFO_DESCRIPTION = 3,};
enum MACRO_SRCLIST {SRCLIST_TEMPORARY = 0x1,SRCLIST_NOBROWSE = 0x2,SRCLIST_SYSTEM = 0x10,SRCLIST_USER = 0x20,SRCLIST_SYSIFADMIN = 0x40,SRCLIST_SUBDIRS = 0x100,SRCLIST_APPEND = 0x200,SRCLIST_NOSTRIPPLATFORM = 0x400,};
enum MACRO_SRVCHAR {SRVCHAR = 47,};
enum MACRO_SRVDONE {SRVDONE = 253,};
enum MACRO_SRVFLT4 {SRVFLT4 = 59,};
enum MACRO_SRVFLT8 {SRVFLT8 = 62,};
enum MACRO_SRVFLTN {SRVFLTN = 109,};
enum MACRO_SRVINFO {SRVINFO = 171,};
enum MACRO_SRVINT1 {SRVINT1 = 48,};
enum MACRO_SRVINT2 {SRVINT2 = 52,};
enum MACRO_SRVINT4 {SRVINT4 = 56,};
enum MACRO_SRVINTN {SRVINTN = 38,};
enum MACRO_SRVNULL {SRVNULL = 31,};
enum MACRO_SRVTEXT {SRVTEXT = 35,};
enum MACRO_SSCPSEC {SSCPSEC = 1,LUSEC = 2,};
enum MACRO_STATFMI {STATFMI = 33,};
enum MACRO_STATURL {STATURL_QUERYFLAG_ISCACHED = 0x10000,STATURL_QUERYFLAG_NOURL = 0x20000,STATURL_QUERYFLAG_NOTITLE = 0x40000,};
enum MACRO_STCNTRL {STCNTRL = 2,};
enum MACRO_STDEXIT {STDEXIT = 0,ERREXIT = -1,};
enum MACRO_STDOLE2 {STDOLE2_MAJORVERNUM = 0x2,STDOLE2_MINORVERNUM = 0x0,STDOLE2_LCID = 0x0,};
enum MACRO_STD_CUT {STD_CUT = 0,STD_COPY = 1,STD_PASTE = 2,STD_UNDO = 3,STD_REDOW = 4,STD_DELETE = 5,STD_FILENEW = 6,STD_FILEOPEN = 7,STD_FILESAVE = 8,STD_PRINTPRE = 9,STD_PROPERTIES = 10,STD_HELP = 11,STD_FIND = 12,STD_REPLACE = 13,STD_PRINT = 14,};
enum MACRO_STERROR {STERROR = 3,};
enum MACRO_STGSTRM {STGSTRM_RESET = 0x0,STGSTRM_CURRENT = 0x10000000,STGSTRM_MODIFY = 0x2,STGSTRM_CREATE = 0x1000,};
enum MACRO_STLUACT {STLUACT = 5,};
enum MACRO_STPUACT {STPUACT = 3,STPUREAC = 4,};
enum MACRO_STRETCH {STRETCH_ANDSCANS = 1,STRETCH_ORSCANS = 2,STRETCH_DELETESCANS = 3,STRETCH_HALFTONE = 4,};
enum MACRO_STSESSN {STSESSN = 5,};
enum MACRO_STXTLEN {STXTLEN = 256,};
enum MACRO_SUBLANG {SUBLANG_NEUTRAL = 0x0,SUBLANG_DEFAULT = 0x1,SUBLANG_SYS_DEFAULT = 0x2,SUBLANG_ARABIC_SAUDI_ARABIA = 0x1,SUBLANG_ARABIC_IRAQ = 0x2,SUBLANG_ARABIC_EGYPT = 0x3,SUBLANG_ARABIC_LIBYA = 0x4,SUBLANG_ARABIC_ALGERIA = 0x5,SUBLANG_ARABIC_MOROCCO = 0x6,SUBLANG_ARABIC_TUNISIA = 0x7,SUBLANG_ARABIC_OMAN = 0x8,SUBLANG_ARABIC_YEMEN = 0x9,SUBLANG_ARABIC_SYRIA = 0xA,SUBLANG_ARABIC_JORDAN = 0xB,SUBLANG_ARABIC_LEBANON = 0xC,SUBLANG_ARABIC_KUWAIT = 0xD,SUBLANG_ARABIC_UAE = 0xE,SUBLANG_ARABIC_BAHRAIN = 0xF,SUBLANG_ARABIC_QATAR = 0x10,SUBLANG_AZERI_LATIN = 0x1,SUBLANG_AZERI_CYRILLIC = 0x2,SUBLANG_CHINESE_TRADITIONAL = 0x1,SUBLANG_CHINESE_SIMPLIFIED = 0x2,SUBLANG_CHINESE_HONGKONG = 0x3,SUBLANG_CHINESE_SINGAPORE = 0x4,SUBLANG_CHINESE_MACAU = 0x5,SUBLANG_DUTCH = 0x1,SUBLANG_DUTCH_BELGIAN = 0x2,SUBLANG_ENGLISH_US = 0x1,SUBLANG_ENGLISH_UK = 0x2,SUBLANG_ENGLISH_AUS = 0x3,SUBLANG_ENGLISH_CAN = 0x4,SUBLANG_ENGLISH_NZ = 0x5,SUBLANG_ENGLISH_EIRE = 0x6,SUBLANG_ENGLISH_SOUTH_AFRICA = 0x7,SUBLANG_ENGLISH_JAMAICA = 0x8,SUBLANG_ENGLISH_CARIBBEAN = 0x9,SUBLANG_ENGLISH_BELIZE = 0xA,SUBLANG_ENGLISH_TRINIDAD = 0xB,SUBLANG_ENGLISH_ZIMBABWE = 0xC,SUBLANG_ENGLISH_PHILIPPINES = 0xD,SUBLANG_FRENCH = 0x1,SUBLANG_FRENCH_BELGIAN = 0x2,SUBLANG_FRENCH_CANADIAN = 0x3,SUBLANG_FRENCH_SWISS = 0x4,SUBLANG_FRENCH_LUXEMBOURG = 0x5,SUBLANG_FRENCH_MONACO = 0x6,SUBLANG_GERMAN = 0x1,SUBLANG_GERMAN_SWISS = 0x2,SUBLANG_GERMAN_AUSTRIAN = 0x3,SUBLANG_GERMAN_LUXEMBOURG = 0x4,SUBLANG_GERMAN_LIECHTENSTEIN = 0x5,SUBLANG_ITALIAN = 0x1,SUBLANG_ITALIAN_SWISS = 0x2,SUBLANG_KASHMIRI_INDIA = 0x2,SUBLANG_KOREAN = 0x1,SUBLANG_LITHUANIAN = 0x1,SUBLANG_LITHUANIAN_CLASSIC = 0x2,SUBLANG_MALAY_MALAYSIA = 0x1,SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x2,SUBLANG_NEPALI_INDIA = 0x2,SUBLANG_NORWEGIAN_BOKMAL = 0x1,SUBLANG_NORWEGIAN_NYNORSK = 0x2,SUBLANG_PORTUGUESE = 0x2,SUBLANG_PORTUGUESE_BRAZILIAN = 0x1,SUBLANG_SERBIAN_LATIN = 0x2,SUBLANG_SERBIAN_CYRILLIC = 0x3,SUBLANG_SPANISH = 0x1,SUBLANG_SPANISH_MEXICAN = 0x2,SUBLANG_SPANISH_MODERN = 0x3,SUBLANG_SPANISH_GUATEMALA = 0x4,SUBLANG_SPANISH_COSTA_RICA = 0x5,SUBLANG_SPANISH_PANAMA = 0x6,SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x7,SUBLANG_SPANISH_VENEZUELA = 0x8,SUBLANG_SPANISH_COLOMBIA = 0x9,SUBLANG_SPANISH_PERU = 0xA,SUBLANG_SPANISH_ARGENTINA = 0xB,SUBLANG_SPANISH_ECUADOR = 0xC,SUBLANG_SPANISH_CHILE = 0xD,SUBLANG_SPANISH_URUGUAY = 0xE,SUBLANG_SPANISH_PARAGUAY = 0xF,SUBLANG_SPANISH_BOLIVIA = 0x10,SUBLANG_SPANISH_EL_SALVADOR = 0x11,SUBLANG_SPANISH_HONDURAS = 0x12,SUBLANG_SPANISH_NICARAGUA = 0x13,SUBLANG_SPANISH_PUERTO_RICO = 0x14,SUBLANG_SWEDISH = 0x1,SUBLANG_SWEDISH_FINLAND = 0x2,SUBLANG_URDU_PAKISTAN = 0x1,SUBLANG_URDU_INDIA = 0x2,SUBLANG_UZBEK_LATIN = 0x1,SUBLANG_UZBEK_CYRILLIC = 0x2,};
enum MACRO_SUCCEED {SUCCEED = 1,};
enum MACRO_SUCCESS {SUCCESS_SUCCESS = 0,};
enum MACRO_SV_TYPE {SV_TYPE_WORKSTATION = 0x1,SV_TYPE_SERVER = 0x2,SV_TYPE_SQLSERVER = 0x4,SV_TYPE_DOMAIN_CTRL = 0x8,SV_TYPE_DOMAIN_BAKCTRL = 0x10,SV_TYPE_TIME_SOURCE = 0x20,SV_TYPE_AFP = 0x40,SV_TYPE_NOVELL = 0x80,SV_TYPE_DOMAIN_MEMBER = 0x100,SV_TYPE_PRINTQ_SERVER = 0x200,SV_TYPE_DIALIN_SERVER = 0x400,SV_TYPE_XENIX_SERVER = 0x800,SV_TYPE_SERVER_UNIX = 0x800,SV_TYPE_NT = 0x1000,SV_TYPE_WFW = 0x2000,SV_TYPE_SERVER_MFPN = 0x4000,SV_TYPE_SERVER_NT = 0x8000,SV_TYPE_POTENTIAL_BROWSER = 0x10000,SV_TYPE_BACKUP_BROWSER = 0x20000,SV_TYPE_MASTER_BROWSER = 0x40000,SV_TYPE_DOMAIN_MASTER = 0x80000,SV_TYPE_SERVER_OSF = 0x100000,SV_TYPE_SERVER_VMS = 0x200000,SV_TYPE_WINDOWS = 0x400000,SV_TYPE_DFS = 0x800000,SV_TYPE_CLUSTER_NT = 0x1000000,SV_TYPE_DCE = 0x10000000,SV_TYPE_ALTERNATE_XPORT = 0x20000000,SV_TYPE_LOCAL_LIST_ONLY = 0x40000000,SV_TYPE_DOMAIN_ENUM = 0x80000000,SV_TYPE_ALL = 0xFFFFFFFF,SV_NODISC = 0xFFFFFFFF,SV_USERSECURITY = 0x1,SV_SHARESECURITY = 0x0,SV_HIDDEN = 0x1,SV_VISIBLE = 0x0,SV_PLATFORM_ID_PARMNUM = 0x65,SV_NAME_PARMNUM = 0x66,SV_VERSION_MAJOR_PARMNUM = 0x67,SV_VERSION_MINOR_PARMNUM = 0x68,SV_TYPE_PARMNUM = 0x69,SV_COMMENT_PARMNUM = 0x5,SV_USERS_PARMNUM = 0x6B,SV_DISC_PARMNUM = 0xA,SV_HIDDEN_PARMNUM = 0x10,SV_ANNOUNCE_PARMNUM = 0x11,SV_ANNDELTA_PARMNUM = 0x12,SV_USERPATH_PARMNUM = 0x70,SV_ULIST_MTIME_PARMNUM = 0x191,SV_GLIST_MTIME_PARMNUM = 0x192,SV_ALIST_MTIME_PARMNUM = 0x193,SV_ALERTS_PARMNUM = 0xB,SV_SECURITY_PARMNUM = 0x195,SV_NUMADMIN_PARMNUM = 0x196,SV_LANMASK_PARMNUM = 0x197,SV_GUESTACC_PARMNUM = 0x198,SV_CHDEVQ_PARMNUM = 0x19A,SV_CHDEVJOBS_PARMNUM = 0x19B,SV_CONNECTIONS_PARMNUM = 0x19C,SV_SHARES_PARMNUM = 0x19D,SV_OPENFILES_PARMNUM = 0x19E,SV_SESSREQS_PARMNUM = 0x1A1,SV_ACTIVELOCKS_PARMNUM = 0x1A3,SV_NUMREQBUF_PARMNUM = 0x1A4,SV_NUMBIGBUF_PARMNUM = 0x1A6,SV_NUMFILETASKS_PARMNUM = 0x1A7,SV_ALERTSCHED_PARMNUM = 0x25,SV_ERRORALERT_PARMNUM = 0x26,SV_LOGONALERT_PARMNUM = 0x27,SV_ACCESSALERT_PARMNUM = 0x28,SV_DISKALERT_PARMNUM = 0x29,SV_NETIOALERT_PARMNUM = 0x2A,SV_MAXAUDITSZ_PARMNUM = 0x2B,SV_SRVHEURISTICS_PARMNUM = 0x1AF,SV_SESSOPENS_PARMNUM = 0x1F5,SV_SESSVCS_PARMNUM = 0x1F6,SV_OPENSEARCH_PARMNUM = 0x1F7,SV_SIZREQBUF_PARMNUM = 0x1F8,SV_INITWORKITEMS_PARMNUM = 0x1F9,SV_MAXWORKITEMS_PARMNUM = 0x1FA,SV_RAWWORKITEMS_PARMNUM = 0x1FB,SV_IRPSTACKSIZE_PARMNUM = 0x1FC,SV_MAXRAWBUFLEN_PARMNUM = 0x1FD,SV_SESSUSERS_PARMNUM = 0x1FE,SV_SESSCONNS_PARMNUM = 0x1FF,SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM = 0x200,SV_MAXPAGEDMEMORYUSAGE_PARMNUM = 0x201,SV_ENABLESOFTCOMPAT_PARMNUM = 0x202,SV_ENABLEFORCEDLOGOFF_PARMNUM = 0x203,SV_TIMESOURCE_PARMNUM = 0x204,SV_ACCEPTDOWNLEVELAPIS_PARMNUM = 0x205,SV_LMANNOUNCE_PARMNUM = 0x206,SV_DOMAIN_PARMNUM = 0x207,SV_MAXCOPYREADLEN_PARMNUM = 0x208,SV_MAXCOPYWRITELEN_PARMNUM = 0x209,SV_MINKEEPSEARCH_PARMNUM = 0x20A,SV_MAXKEEPSEARCH_PARMNUM = 0x20B,SV_MINKEEPCOMPLSEARCH_PARMNUM = 0x20C,SV_MAXKEEPCOMPLSEARCH_PARMNUM = 0x20D,SV_THREADCOUNTADD_PARMNUM = 0x20E,SV_NUMBLOCKTHREADS_PARMNUM = 0x20F,SV_SCAVTIMEOUT_PARMNUM = 0x210,SV_MINRCVQUEUE_PARMNUM = 0x211,SV_MINFREEWORKITEMS_PARMNUM = 0x212,SV_XACTMEMSIZE_PARMNUM = 0x213,SV_THREADPRIORITY_PARMNUM = 0x214,SV_MAXMPXCT_PARMNUM = 0x215,SV_OPLOCKBREAKWAIT_PARMNUM = 0x216,SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM = 0x217,SV_ENABLEOPLOCKS_PARMNUM = 0x218,SV_ENABLEOPLOCKFORCECLOSE_PARMNUM = 0x219,SV_ENABLEFCBOPENS_PARMNUM = 0x21A,SV_ENABLERAW_PARMNUM = 0x21B,SV_ENABLESHAREDNETDRIVES_PARMNUM = 0x21C,SV_MINFREECONNECTIONS_PARMNUM = 0x21D,SV_MAXFREECONNECTIONS_PARMNUM = 0x21E,SV_INITSESSTABLE_PARMNUM = 0x21F,SV_INITCONNTABLE_PARMNUM = 0x220,SV_INITFILETABLE_PARMNUM = 0x221,SV_INITSEARCHTABLE_PARMNUM = 0x222,SV_ALERTSCHEDULE_PARMNUM = 0x223,SV_ERRORTHRESHOLD_PARMNUM = 0x224,SV_NETWORKERRORTHRESHOLD_PARMNUM = 0x225,SV_DISKSPACETHRESHOLD_PARMNUM = 0x226,SV_MAXLINKDELAY_PARMNUM = 0x228,SV_MINLINKTHROUGHPUT_PARMNUM = 0x229,SV_LINKINFOVALIDTIME_PARMNUM = 0x22A,SV_SCAVQOSINFOUPDATETIME_PARMNUM = 0x22B,SV_MAXWORKITEMIDLETIME_PARMNUM = 0x22C,SV_MAXRAWWORKITEMS_PARMNUM = 0x22D,SV_PRODUCTTYPE_PARMNUM = 0x230,SV_SERVERSIZE_PARMNUM = 0x231,SV_CONNECTIONLESSAUTODISC_PARMNUM = 0x232,SV_SHARINGVIOLATIONRETRIES_PARMNUM = 0x233,SV_SHARINGVIOLATIONDELAY_PARMNUM = 0x234,SV_MAXGLOBALOPENSEARCH_PARMNUM = 0x235,SV_REMOVEDUPLICATESEARCHES_PARMNUM = 0x236,SV_LOCKVIOLATIONRETRIES_PARMNUM = 0x237,SV_LOCKVIOLATIONOFFSET_PARMNUM = 0x238,SV_LOCKVIOLATIONDELAY_PARMNUM = 0x239,SV_MDLREADSWITCHOVER_PARMNUM = 0x23A,SV_CACHEDOPENLIMIT_PARMNUM = 0x23B,SV_CRITICALTHREADS_PARMNUM = 0x23C,SV_RESTRICTNULLSESSACCESS_PARMNUM = 0x23D,SV_ENABLEWFW311DIRECTIPX_PARMNUM = 0x23E,SV_OTHERQUEUEAFFINITY_PARMNUM = 0x23F,SV_QUEUESAMPLESECS_PARMNUM = 0x240,SV_BALANCECOUNT_PARMNUM = 0x241,SV_PREFERREDAFFINITY_PARMNUM = 0x242,SV_MAXFREERFCBS_PARMNUM = 0x243,SV_MAXFREEMFCBS_PARMNUM = 0x244,SV_MAXFREELFCBS_PARMNUM = 0x245,SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM = 0x246,SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM = 0x247,SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM = 0x248,SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM = 0x249,SV_MAXTHREADSPERQUEUE_PARMNUM = 0x24A,SV_CACHEDDIRECTORYLIMIT_PARMNUM = 0x24B,SV_MAXCOPYLENGTH_PARMNUM = 0x24C,SV_ENABLEBULKTRANSFER_PARMNUM = 0x24D,SV_ENABLECOMPRESSION_PARMNUM = 0x24E,SV_AUTOSHAREWKS_PARMNUM = 0x24F,SV_AUTOSHARESERVER_PARMNUM = 0x250,SV_ENABLESECURITYSIGNATURE_PARMNUM = 0x251,SV_REQUIRESECURITYSIGNATURE_PARMNUM = 0x252,SV_MINCLIENTBUFFERSIZE_PARMNUM = 0x253,SV_CONNECTIONNOSESSIONSTIMEOUT_PARMNUM = 0x254,SV_COMMENT_INFOLEVEL = 0x3ED,SV_USERS_INFOLEVEL = 0x453,SV_DISC_INFOLEVEL = 0x3F2,SV_HIDDEN_INFOLEVEL = 0x3F8,SV_ANNOUNCE_INFOLEVEL = 0x3F9,SV_ANNDELTA_INFOLEVEL = 0x3FA,SV_SESSOPENS_INFOLEVEL = 0x5DD,SV_SESSVCS_INFOLEVEL = 0x5DE,SV_OPENSEARCH_INFOLEVEL = 0x5DF,SV_MAXWORKITEMS_INFOLEVEL = 0x5E2,SV_MAXRAWBUFLEN_INFOLEVEL = 0x5E5,SV_SESSUSERS_INFOLEVEL = 0x5E6,SV_SESSCONNS_INFOLEVEL = 0x5E7,SV_MAXNONPAGEDMEMORYUSAGE_INFOLEVEL = 0x5E8,SV_MAXPAGEDMEMORYUSAGE_INFOLEVEL = 0x5E9,SV_ENABLESOFTCOMPAT_INFOLEVEL = 0x5EA,SV_ENABLEFORCEDLOGOFF_INFOLEVEL = 0x5EB,SV_TIMESOURCE_INFOLEVEL = 0x5EC,SV_LMANNOUNCE_INFOLEVEL = 0x5EE,SV_MAXCOPYREADLEN_INFOLEVEL = 0x5F0,SV_MAXCOPYWRITELEN_INFOLEVEL = 0x5F1,SV_MINKEEPSEARCH_INFOLEVEL = 0x5F2,SV_MAXKEEPSEARCH_INFOLEVEL = 0x5F3,SV_MINKEEPCOMPLSEARCH_INFOLEVEL = 0x5F4,SV_MAXKEEPCOMPLSEARCH_INFOLEVEL = 0x5F5,SV_SCAVTIMEOUT_INFOLEVEL = 0x5F8,SV_MINRCVQUEUE_INFOLEVEL = 0x5F9,SV_MINFREEWORKITEMS_INFOLEVEL = 0x5FA,SV_MAXMPXCT_INFOLEVEL = 0x5FD,SV_OPLOCKBREAKWAIT_INFOLEVEL = 0x5FE,SV_OPLOCKBREAKRESPONSEWAIT_INFOLEVEL = 0x5FF,SV_ENABLEOPLOCKS_INFOLEVEL = 0x600,SV_ENABLEOPLOCKFORCECLOSE_INFOLEVEL = 0x601,SV_ENABLEFCBOPENS_INFOLEVEL = 0x602,SV_ENABLERAW_INFOLEVEL = 0x603,SV_ENABLESHAREDNETDRIVES_INFOLEVEL = 0x604,SV_MINFREECONNECTIONS_INFOLEVEL = 0x605,SV_MAXFREECONNECTIONS_INFOLEVEL = 0x606,SV_INITSESSTABLE_INFOLEVEL = 0x607,SV_INITCONNTABLE_INFOLEVEL = 0x608,SV_INITFILETABLE_INFOLEVEL = 0x609,SV_INITSEARCHTABLE_INFOLEVEL = 0x60A,SV_ALERTSCHEDULE_INFOLEVEL = 0x60B,SV_ERRORTHRESHOLD_INFOLEVEL = 0x60C,SV_NETWORKERRORTHRESHOLD_INFOLEVEL = 0x60D,SV_DISKSPACETHRESHOLD_INFOLEVEL = 0x60E,SV_MAXLINKDELAY_INFOLEVEL = 0x610,SV_MINLINKTHROUGHPUT_INFOLEVEL = 0x611,SV_LINKINFOVALIDTIME_INFOLEVEL = 0x612,SV_SCAVQOSINFOUPDATETIME_INFOLEVEL = 0x613,SV_MAXWORKITEMIDLETIME_INFOLEVEL = 0x614,SV_MAXRAWWORKITEMS_INFOLOEVEL = 0x615,SV_PRODUCTTYPE_INFOLOEVEL = 0x618,SV_SERVERSIZE_INFOLOEVEL = 0x619,SV_CONNECTIONLESSAUTODISC_INFOLOEVEL = 0x61A,SV_SHARINGVIOLATIONRETRIES_INFOLOEVEL = 0x61B,SV_SHARINGVIOLATIONDELAY_INFOLOEVEL = 0x61C,SV_MAXGLOBALOPENSEARCH_INFOLOEVEL = 0x61D,SV_REMOVEDUPLICATESEARCHES_INFOLOEVEL = 0x61E,SV_LOCKVIOLATIONRETRIES_INFOLOEVEL = 0x61F,SV_LOCKVIOLATIONOFFSET_INFOLOEVEL = 0x620,SV_LOCKVIOLATIONDELAY_INFOLOEVEL = 0x621,SV_MDLREADSWITCHOVER_INFOLOEVEL = 0x622,SV_CACHEDOPENLIMIT_INFOLOEVEL = 0x623,SV_CRITICALTHREADS_INFOLOEVEL = 0x624,SV_RESTRICTNULLSESSACCESS_INFOLOEVEL = 0x625,SV_ENABLEWFW311DIRECTIPX_INFOLOEVEL = 0x626,SV_OTHERQUEUEAFFINITY_INFOLEVEL = 0x627,SV_QUEUESAMPLESECS_INFOLEVEL = 0x628,SV_BALANCECOUNT_INFOLEVEL = 0x629,SV_PREFERREDAFFINITY_INFOLEVEL = 0x62A,SV_MAXFREERFCBS_INFOLEVEL = 0x62B,SV_MAXFREEMFCBS_INFOLEVEL = 0x62C,SV_MAXFREELFCBS_INFOLEVEL = 0x62D,SV_MAXFREEPAGEDPOOLCHUNKS_INFOLEVEL = 0x62E,SV_MINPAGEDPOOLCHUNKSIZE_INFOLEVEL = 0x62F,SV_MAXPAGEDPOOLCHUNKSIZE_INFOLEVEL = 0x630,SV_SENDSFROMPREFERREDPROCESSOR_INFOLEVEL = 0x631,SV_MAXTHREADSPERQUEUE_INFOLEVEL = 0x632,SV_CACHEDDIRECTORYLIMIT_INFOLEVEL = 0x633,SV_MAXCOPYLENGTH_INFOLEVEL = 0x634,SV_ENABLEBULKTRANSFER_INFOLEVEL = 0x635,SV_ENABLECOMPRESSION_INFOLEVEL = 0x636,SV_AUTOSHAREWKS_INFOLEVEL = 0x637,SV_AUTOSHARESERVER_INFOLEVEL = 0x638,SV_ENABLESECURITYSIGNATURE_INFOLEVEL = 0x639,SV_REQUIRESECURITYSIGNATURE_INFOLEVEL = 0x63A,SV_MINCLIENTBUFFERSIZE_INFOLEVEL = 0x63B,SV_CONNECTIONNOSESSIONSTIMEOUT_INFOLEVEL = 0x63C,};
enum MACRO_TAPIERR {TAPIERR_CONNECTED = 0,TAPIERR_DROPPED = -1,TAPIERR_NOREQUESTRECIPIENT = -2,TAPIERR_REQUESTQUEUEFULL = -3,TAPIERR_INVALDESTADDRESS = -4,TAPIERR_INVALWINDOWHANDLE = -5,TAPIERR_INVALDEVICECLASS = -6,TAPIERR_INVALDEVICEID = -7,TAPIERR_DEVICECLASSUNAVAIL = -8,TAPIERR_DEVICEIDUNAVAIL = -9,TAPIERR_DEVICEINUSE = -10,TAPIERR_DESTBUSY = -11,TAPIERR_DESTNOANSWER = -12,TAPIERR_DESTUNAVAIL = -13,TAPIERR_UNKNOWNWINHANDLE = -14,TAPIERR_UNKNOWNREQUESTID = -15,TAPIERR_REQUESTFAILED = -16,TAPIERR_REQUESTCANCELLED = -17,TAPIERR_INVALPOINTER = -18,};
enum MACRO_TBDDRET {TBDDRET_DEFAULT = 0,TBDDRET_NODEFAULT = 1,TBDDRET_TREATPRESSED = 2,};
enum MACRO_TBLSTAT {TBLSTAT_COMPLETE = 0,TBLSTAT_QCHANGED = 7,TBLSTAT_SORTING = 9,TBLSTAT_SORT_ERROR = 10,TBLSTAT_SETTING_COLS = 11,TBLSTAT_SETCOL_ERROR = 13,TBLSTAT_RESTRICTING = 14,TBLSTAT_RESTRICT_ERROR = 15,};
enum MACRO_TBLTYPE {TBLTYPE_SNAPSHOT = 0,TBLTYPE_KEYSET = 1,TBLTYPE_DYNAMIC = 2,};
enum MACRO_TBSTATE {TBSTATE_CHECKED = 0x1,TBSTATE_PRESSED = 0x2,TBSTATE_ENABLED = 0x4,TBSTATE_HIDDEN = 0x8,TBSTATE_INDETERMINATE = 0x10,TBSTATE_WRAP = 0x20,TBSTATE_ELLIPSES = 0x40,TBSTATE_MARKED = 0x80,};
enum MACRO_TBSTYLE {TBSTYLE_BUTTON = 0x0,TBSTYLE_SEP = 0x1,TBSTYLE_CHECK = 0x2,TBSTYLE_GROUP = 0x4,TBSTYLE_CHECKGROUP = 0x6,TBSTYLE_DROPDOWN = 0x8,TBSTYLE_AUTOSIZE = 0x10,TBSTYLE_NOPREFIX = 0x20,TBSTYLE_TOOLTIPS = 0x100,TBSTYLE_WRAPABLE = 0x200,TBSTYLE_ALTDRAG = 0x400,TBSTYLE_FLAT = 0x800,TBSTYLE_LIST = 0x1000,TBSTYLE_CUSTOMERASE = 0x2000,TBSTYLE_REGISTERDROP = 0x4000,TBSTYLE_TRANSPARENT = 0x8000,TBSTYLE_EX_DRAWDDARROWS = 0x1,};
enum MACRO_THREADS {NUM_ALERTABLE_THREADS = 2,MAX_WORKER_THREADS = 10,};
enum MACRO_TIFLAGS {TIFLAGS_EXTENDDISPATCHONLY = 0x1,};
enum MACRO_TIMEOUT {TIMEOUT_ASYNC = 0xFFFFFFFF,};
enum MACRO_TIME_MS {TIME_MS = 0x1,TIME_SAMPLES = 0x2,TIME_BYTES = 0x4,TIME_SMPTE = 0x8,TIME_MIDI = 0x10,TIME_TICKS = 0x20,};
enum MACRO_TLS_OUT {TLS_OUT_OF_INDEXES = 0xFFFFFFFF,};
enum MACRO_TRUSTEE {TRUSTEE_ACCESS_ALLOWED = 0x1,TRUSTEE_ACCESS_READ = 0x2,TRUSTEE_ACCESS_WRITE = 0x4,TRUSTEE_ACCESS_EXPLICIT = 0x1,TRUSTEE_ACCESS_READ_WRITE = 0x6,TRUSTEE_ACCESS_ALL = 0xFFFFFFFF,};
enum MACRO_TVIF_DI {TVIF_DI_SETITEM = 0x1000,};
enum MACRO_UNDNAME {UNDNAME_COMPLETE = 0x0,UNDNAME_NO_LEADING_UNDERSCORES = 0x1,UNDNAME_NO_MS_KEYWORDS = 0x2,UNDNAME_NO_FUNCTION_RETURNS = 0x4,UNDNAME_NO_ALLOCATION_MODEL = 0x8,UNDNAME_NO_ALLOCATION_LANGUAGE = 0x10,UNDNAME_NO_MS_THISTYPE = 0x20,UNDNAME_NO_CV_THISTYPE = 0x40,UNDNAME_NO_THISTYPE = 0x60,UNDNAME_NO_ACCESS_SPECIFIERS = 0x80,UNDNAME_NO_THROW_SIGNATURES = 0x100,UNDNAME_NO_MEMBER_TYPE = 0x200,UNDNAME_NO_RETURN_UDT_MODEL = 0x400,UNDNAME_32_BIT_DECODE = 0x800,UNDNAME_NAME_ONLY = 0x1000,UNDNAME_NO_ARGUMENTS = 0x2000,UNDNAME_NO_SPECIAL_SYMS = 0x4000,};
enum MACRO_VARIANT {VARIANT_TRUE = 0xFFFFFFFF,VARIANT_FALSE = 0x0,};
enum MACRO_VDMADDR {VDMADDR_V86 = 2,VDMADDR_PM16 = 4,VDMADDR_PM32 = 16,};
enum MACRO_VERSION {EMS_VERSION = 0x1,NEW_OBJ_EID_VERSION = 0x2,};
enum MACRO_VERTRES {VERTRES = 10,};
enum MACRO_WARNING {WARNING_MSG_ALIAS_NOT_ADDED = 644,};
enum MACRO_WAVEOUT {WAVEOUT_MAPPER_STATUS_DEVICE = 0,WAVEOUT_MAPPER_STATUS_MAPPED = 1,WAVEOUT_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WEBPOST {WEBPOST_ERROR_FIRST = 0x40042100,WEBPOST_ERROR_UNKNOWN = 0xC0042101,WEBPOST_ERROR_PROVCLSID_UNKNOWN = 0xC0042102,WEBPOST_ERROR_SITE_CORRUPT = 0xC0042103,WEBPOST_ERROR_PROV_CORRUPT = 0xC0042104,WEBPOST_ERROR_PROV_DLL = 0xC0042105,WEBPOST_ERROR_PROV_EP = 0xC0042106,WEBPOST_ERROR_INIT_FAILED = 0xC0042107,WEBPOST_ERROR_LIST_SITES = 0xC0042108,WEBPOST_ERROR_SITE_EXISTS = 0xC0042109,WEBPOST_ERROR_CREATE_SITE = 0xC004210A,WEBPOST_ERROR_SITE_DOESNOTEXIST = 0xC004210B,WEBPOST_ERROR_DELETE_SITE = 0xC004210C,WEBPOST_ERROR_ENUM_PROVS = 0xC004210D,WEBPOST_ERROR_PROV_QI = 0xC004210E,WEBPOST_ERROR_POST_FILES = 0xC004210F,WEBPOST_ERROR_COCREATE_WIZARD = 0xC0042110,WEBPOST_ERROR_POSTINFO_REQUIRED = 0xC0042111,WEBPOST_ERROR_AUTOBIND_FAILED = 0xC0042112,WEBPOST_ERROR_BAD_PROV_PTR = 0xC0042113,WEBPOST_ERROR_PROV_NOT_IN_POSTINFO = 0x80042114,WEBPOST_ERROR_EXTENDED_ERROR = 0xC0042116,WEBPOST_ERROR_NO_EXT_ERR_INFO = 0xC0042117,WEBPOST_ERROR_INVALID_POSTINFO = 0x40042118,WEBPOST_ERROR_NO_POSTINFO = 0x40042119,WEBPOST_ERROR_HTTP_GET_FAILED = 0x4004211A,WEBPOST_ERROR_LAST = 0x400421FF,};
enum MACRO_WINBASE {WINBASE = 950,};
enum MACRO_WINHELP {WINHELP_INDEX = 0x10,};
enum MACRO_WININET {WININET_API_FLAG_ASYNC = 0x1,WININET_API_FLAG_SYNC = 0x4,WININET_API_FLAG_USE_CONTEXT = 0x8,};
enum MACRO_WINSOCK {WINSOCK_VERSION = 514,};
enum MACRO_WINWRAP {WINWRAP_SERVICE_STARTING = 0x60000003,WINWRAP_SERVICE_STARTED = 0x60000004,WINWRAP_SERVICE_STOPPING = 0x60000005,WINWRAP_SERVICE_STOPPED = 0x60000006,};
enum MACRO_WPSTYLE {WPSTYLE_CENTER = 0,WPSTYLE_TILE = 1,WPSTYLE_STRETCH = 2,WPSTYLE_MAX = 3,};
enum MACRO_WSA_QOS {WSA_QOS_RECEIVERS = 11005,WSA_QOS_SENDERS = 11006,WSA_QOS_NO_SENDERS = 11007,WSA_QOS_NO_RECEIVERS = 11008,WSA_QOS_REQUEST_CONFIRMED = 11009,WSA_QOS_ADMISSION_FAILURE = 11010,WSA_QOS_POLICY_FAILURE = 11011,WSA_QOS_BAD_STYLE = 11012,WSA_QOS_BAD_OBJECT = 11013,WSA_QOS_TRAFFIC_CTRL_ERROR = 11014,WSA_QOS_GENERIC_ERROR = 11015,WSA_IO_PENDING = 10035,WSA_IO_INCOMPLETE = 10035,WSA_INVALID_HANDLE = 10038,WSA_INVALID_PARAMETER = 10022,WSA_NOT_ENOUGH_MEMORY = 10055,WSA_OPERATION_ABORTED = 10004,WSA_INVALID_EVENT = 0,WSA_MAXIMUM_WAIT_EVENTS = 64,WSA_WAIT_FAILED = 4294967295,WSA_WAIT_EVENT_0 = 0,WSA_WAIT_TIMEOUT = 258,WSA_INFINITE = 4294967295,};
enum MACRO__CRTDBG {_CRTDBG_MODE_FILE = 0x1,_CRTDBG_MODE_DEBUG = 0x2,_CRTDBG_MODE_WNDW = 0x4,_CRTDBG_REPORT_MODE = 0xFFFFFFFF,_CRTDBG_INVALID_HFILE = 0xFFFFFFFF,_CRTDBG_HFILE_ERROR = 0xFFFFFFFE,_CRTDBG_FILE_STDOUT = 0xFFFFFFFC,_CRTDBG_FILE_STDERR = 0xFFFFFFFB,_CRTDBG_REPORT_FILE = 0xFFFFFFFA,};
enum MACRO__DOMAIN {_DOMAIN = 1,_SING = 2,};
enum MACRO__FINITE {_FINITE = -1,};
enum MACRO__HEAPOK {_HEAPOK = -2,};
enum MACRO__IOREAD {_IOREAD = 0x1,_IOWRT = 0x2,};
enum MACRO__MCW_DN {_MCW_DN = 0x3000000,};
enum MACRO__MCW_IC {_MCW_IC = 0x40000,};
enum MACRO__MCW_PC {_MCW_PC = 0x30000,};
enum MACRO__MCW_RC {_MCW_RC = 0x300,};
enum MACRO__REPORT {_REPORT_ERRMODE = 3,};
enum MACRO_atpByte {atpByte = 0x6,};
enum MACRO_atpDate {atpDate = 0x3,atpShort = 0x4,};
enum MACRO_atpLong {atpLong = 0x5,};
enum MACRO_atpWord {atpWord = 0x7,atpDword = 0x8,};
enum MACRO_attBody {attBody = 0x2800C,};
enum MACRO_attNull {attNull = 0,attFrom = 32768,};
enum MACRO_ctlLast {ctlLast = 0x4FF,};
enum MACRO_fmsNull {fmsNull = 0x0,fmsModified = 0x1,fmsLocal = 0x2,fmsSubmitted = 0x4,fmsRead = 0x20,fmsHasAttach = 0x80,};
enum MACRO_hrError {hrError = 0xC7FF0002,};
enum MACRO_prioLow {prioLow = 3,};
enum MACRO_pshHelp {pshHelp = 1038,};
enum MACRO_wPntAll {wPntAll = 0xFFFF,};
typedef struct _30C092ACFDACA2A085242C6994837CA9 MCHITTESTINFO;
typedef struct tagMCI_SET_PARMS MCI_SET_PARMS;
typedef struct mc_deallocate MC_DEALLOCATE;
typedef struct mc_send_error MC_SEND_ERROR;
struct MD_Collection {struct MD_CollectionVtbl *lpVtbl;};
typedef struct tagMENUITEMINFOA MENUITEMINFOA;
typedef struct tagMENUITEMINFOW MENUITEMINFOW;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
enum METADATATYPES {ALL_METADATA = 0x0,DWORD_METADATA = 0x1,STRING_METADATA = 0x2,BINARY_METADATA = 0x3,EXPANDSZ_METADATA = 0x4,MULTISZ_METADATA = 0x5,INVALID_END_METADATA = 0x6,};
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE MFT_ENUM_DATA;
typedef struct midiproptempo_tag MIDIPROPTEMPO;
typedef void ( *MIDL_ES_ALLOC)(void *state, char **pbuffer, unsigned int *psize);
typedef void ( *MIDL_ES_WRITE)(void *state, char *buffer, unsigned int size);
typedef struct tagMIXERCONTROLA MIXERCONTROLA;
typedef struct tagMIXERCONTROLW MIXERCONTROLW;
typedef struct _MODEMSETTINGS MODEMSETTINGS;
typedef struct tagMODULEENTRY32 MODULEENTRY32;
typedef struct tagMONCONVSTRUCT MONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA MONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW MONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT MONLINKSTRUCT;
typedef struct tagMQRESTRICTION MQRESTRICTION;
typedef struct tagMSGBOXPARAMSA MSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW MSGBOXPARAMSW;
typedef struct ms_fp_overlay MS_FP_OVERLAY;
typedef struct tagMULTIKEYHELPA MULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW MULTIKEYHELPW;
typedef struct _5DBE423D59383EF3676E2D6AC9F8E7EA MainAVIHeader;
typedef struct _CB9F4276D477D4EDC30066925B58EE0F MapiRecipDesc;
typedef struct NDdeShareInfo_tag NDDESHAREINFO;
typedef struct _NETINFOSTRUCT NETINFOSTRUCT;
typedef struct _NETRESOURCE2A NETRESOURCE2A;
typedef struct _NETRESOURCE2W NETRESOURCE2W;
typedef struct _BEA4C6939D98A17C28446F73864087A3 NMCBEENDEDITA;
typedef struct _2E2AA9F03C861A9A9D27DBF19670D54B NMCBEENDEDITW;
typedef struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 NMCOMBOBOXEXA;
typedef struct _E76253F876E841F225888AB457FD0286 NMCOMBOBOXEXW;
typedef struct tagNMHDDISPINFOA NMHDDISPINFOA;
typedef struct tagNMHDDISPINFOW NMHDDISPINFOW;
typedef struct tagNMLVCACHEHINT NMLVCACHEHINT;
typedef struct tagLVDISPINFO NMLVDISPINFOA;
typedef struct tagLVDISPINFOW NMLVDISPINFOW;
typedef struct _A4DD02794CFF2FFACE800CDFB553DD44 NMTBDISPINFOA;
typedef struct _B2C1794739E4EE832382C8443FB3E776 NMTBDISPINFOW;
typedef struct tagNMTTDISPIFNOA NMTTDISPINFOA;
typedef struct tagNMTTDISPINFOW NMTTDISPINFOW;
typedef struct tagTVDISPINFOA NMTVDISPINFOA;
typedef struct tagTVDISPINFOW NMTVDISPINFOW;
typedef struct tagCHARSETINFO *NPCHARSETINFO;
typedef struct tagEVENTMSG *NPEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *NPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *NPEXTLOGFONTW;
typedef struct tagMIDIINCAPSA *NPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *NPMIDIINCAPSW;
typedef struct tagPAINTSTRUCT *NPPAINTSTRUCT;
typedef struct tagTEXTMETRICA *NPTEXTMETRICA;
typedef struct tagTEXTMETRICW *NPTEXTMETRICW;
typedef struct tagWAVEINCAPSA *NPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *NPWAVEINCAPSW;
typedef struct tagWNDCLASSEXA *NPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *NPWNDCLASSEXW;
enum NtmsDoorState {NTMS_DOORSTATE_UNKNOWN = 0x0,NTMS_DOORSTATE_CLOSED = 0x1,NTMS_DOORSTATE_OPEN = 0x2,};
enum NtmsDriveType {NTMS_UNKNOWN_DRIVE = 0x0,};
enum NtmsSlotState {NTMS_SLOTSTATE_UNKNOWN = 0x0,NTMS_SLOTSTATE_FULL = 0x1,NTMS_SLOTSTATE_EMPTY = 0x2,NTMS_SLOTSTATE_NOTPRESENT = 0x3,NTMS_SLOTSTATE_NEEDSINVENTORY = 0x4,};
typedef int OAFilterState;
typedef struct _OBJDESCRIPTOR OBJDESCRIPTOR;
typedef struct ods_callbacks ODS_CALLBACKS;
typedef struct tagOEM_PENPACKET OEM_PENPACKET;
enum OLECMDEXECOPT {OLECMDEXECOPT_DODEFAULT = 0x0,OLECMDEXECOPT_PROMPTUSER = 0x1,OLECMDEXECOPT_DONTPROMPTUSER = 0x2,OLECMDEXECOPT_SHOWHELP = 0x3,};
typedef struct _OLESTREAMVTBL OLESTREAMVTBL;
typedef struct tagOLEUICONVERTA OLEUICONVERTA;
typedef struct tagOLEUICONVERTW OLEUICONVERTW;
typedef struct tagOFNA OPENFILENAMEA;
typedef struct tagOFNW OPENFILENAMEW;
typedef struct tagPACKAGEDETAIL PACKAGEDETAIL;
typedef struct _ACTRL_ALISTA *PACTRL_AUDITA;
typedef struct _ACTRL_ALISTW *PACTRL_AUDITW;
typedef struct _ads_attr_def *PADS_ATTR_DEF;
typedef struct _AE_CLOSEFILE *PAE_CLOSEFILE;
typedef struct _AE_CONNSTART *PAE_CONNSTART;
typedef struct _AE_NETLOGOFF *PAE_NETLOGOFF;
typedef struct _AE_RESACCESS *PAE_RESACCESS;
typedef struct _AE_SESSLOGON *PAE_SESSLOGON;
typedef struct _AE_SESSPWERR *PAE_SESSPWERR;
typedef struct _AE_SRVSTATUS *PAE_SRVSTATUS;
typedef struct tagPSDA PAGESETUPDLGA;
typedef struct tagPSDW PAGESETUPDLGW;
typedef IAVIStreaming *PAVISTREAMING;
typedef struct tagCapInfoChunk *PCAPINFOCHUNK;
typedef struct tagCaptureParms *PCAPTUREPARMS;
typedef struct _CERT_CONTEXT *PCERT_CONTEXT;
typedef struct channel_caps_tag *PCHANNEL_CAPS;
typedef struct pcmwaveformat_tag PCMWAVEFORMAT;
typedef struct tagCOMBOBOXINFO *PCOMBOBOXINFO;
typedef struct tagCWPRETSTRUCT *PCWPRETSTRUCT;
typedef struct tagDESIGNVECTOR *PDESIGNVECTOR;
typedef struct _DFS_INFO_100 *PDFS_INFO_100;
typedef struct _DFS_INFO_101 *PDFS_INFO_101;
typedef struct _DISK_LOGGING *PDISK_LOGGING;
typedef struct _EFE0F4933F551C6F216DF753EC3D85D4 *PDLC_LINK_LOG;
typedef struct _DRIVERSTATUS *PDRIVERSTATUS;
typedef struct tagABORTPATH *PEMRABORTPATH;
typedef struct tagABORTPATH *PEMRBEGINPATH;
typedef struct tagEMRCREATEPEN *PEMRCREATEPEN;
typedef struct tagEMRGLSRECORD *PEMRGLSRECORD;
typedef struct tagEMRINVERTRGN *PEMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYGON16;
typedef struct tagEMRELLIPSE *PEMRRECTANGLE;
typedef struct tagEMRRESTOREDC *PEMRRESTOREDC;
typedef struct tagEMRROUNDRECT *PEMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETBKMODE;
typedef struct tagEMRSETPIXELV *PEMRSETPIXELV;
typedef struct tagABORTPATH *PEMRWIDENPATH;
typedef struct tagPENDATAHEADER PENDATAHEADER;
typedef struct _FORM_INFO_1A *PFORM_INFO_1A;
typedef struct _FORM_INFO_1W *PFORM_INFO_1W;
typedef struct _GROUP_INFO_0 *PGROUP_INFO_0;
typedef struct _GROUP_INFO_1 *PGROUP_INFO_1;
typedef struct _GROUP_INFO_2 *PGROUP_INFO_2;
typedef struct tagHELPWININFOA *PHELPWININFOA;
typedef struct tagHELPWININFOW *PHELPWININFOW;
typedef struct tagICONMETRICSA *PICONMETRICSA;
typedef struct tagICONMETRICSW *PICONMETRICSW;
typedef struct tag_IDFKEYMAPHDR *PIDFKEYMAPHDR;
typedef struct _INPUT_RECORD *PINPUT_RECORD;
typedef struct _B90EAB9AC8B4BF0F295F7B6D198ACEA2 *PINTTRACEINFO;
typedef struct _IPX_IF_STATS *PIPX_IF_STATS;
typedef union _5AC28848A8A0188E71C0B88AB8CF796B *PKSDATAFORMAT;
typedef union _CEB0288F8947EE21048823F466ABF866 *PKSIDENTIFIER;
typedef struct _204C6CB5B1CC0D35B371E5C594718A83 *PKSRESOLUTION;
typedef struct ldapcontrolA *PLDAPControlA;
typedef struct ldapcontrolW *PLDAPControlW;
typedef struct ldapsortkeyA *PLDAPSortKeyA;
typedef struct ldapsortkeyW *PLDAPSortKeyW;
typedef struct l_timeval *PLDAP_TIMEVAL;
typedef struct _LOADED_IMAGE *PLOADED_IMAGE;
typedef struct plu62_overlay PLU62_OVERLAY;
typedef IMediaSample2 *PMEDIASAMPLE2;
typedef IMediaSeeking *PMEDIASEEKING;
typedef IMemAllocator *PMEMALLOCATOR;
typedef struct tagMIDIOUTCAPSA *PMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *PMIDIOUTCAPSW;
typedef struct tagMIMECSETINFO *PMIMECSETINFO;
typedef struct _MODEMDEVCAPS *PMODEMDEVCAPS;
typedef struct tagMONERRSTRUCT *PMONERRSTRUCT;
typedef struct tagMONMSGSTRUCT *PMONMSGSTRUCT;
typedef struct tagODBC_VS_ARGS *PODBC_VS_ARGS;
typedef struct tagPALETTEENTRY *PPALETTEENTRY;
typedef struct _PORT_INFO_1A *PPORT_INFO_1A;
typedef struct _PORT_INFO_1W *PPORT_INFO_1W;
typedef struct _PORT_INFO_2A *PPORT_INFO_2A;
typedef struct _PORT_INFO_2W *PPORT_INFO_2W;
typedef struct _PORT_INFO_3A *PPORT_INFO_3A;
typedef struct _PORT_INFO_3W *PPORT_INFO_3W;
typedef struct _PPP_EAP_INFO *PPPP_EAP_INFO;
typedef struct _PPP_EAP_INPUT PPP_EAP_INPUT;
typedef struct _PSINJECTDATA *PPSINJECTDATA;
typedef struct _QWordAddress *PQWordAddress;
typedef struct _RAS_SERVER_0 *PRAS_SERVER_0;
typedef struct _RIP_IF_STATS *PRIP_IF_STATS;
typedef struct _PRIVILEGE_SET PRIVILEGE_SET;
typedef struct _tagPROCESSORINFO PROCESSORINFO;
typedef struct tagPROFILEHEADER PROFILEHEADER;
typedef struct _PROV_ENUMALGS PROV_ENUMALGS;
typedef struct _RTM_IP_ROUTE *PRTM_IP_ROUTE;
typedef struct _RTP_HEADER_X *PRTP_HEADER_X;
typedef struct _SAP_IF_STATS *PSAP_IF_STATS;
typedef struct _SAP_MIB_BASE *PSAP_MIB_BASE;
typedef struct _SCHANNEL_ALG *PSCHANNEL_ALG;
typedef struct _SHARE_INFO_0 *PSHARE_INFO_0;
typedef struct _SHARE_INFO_1 *PSHARE_INFO_1;
typedef struct _SHARE_INFO_2 *PSHARE_INFO_2;
typedef struct sockaddr_atm *PSOCKADDR_ATM;
typedef struct sockaddr_in6 *PSOCKADDR_IN6;
typedef struct sockaddr_ipx *PSOCKADDR_IPX;
typedef struct sockaddr_vns *PSOCKADDR_VNS;
typedef struct srv_listhead *PSRV_LISTHEAD;
typedef struct _TAPE_PREPARE *PTAPE_PREPARE;
typedef struct _TASK_TRIGGER *PTASK_TRIGGER;
typedef struct tagTITLEBARINFO *PTITLEBARINFO;
typedef struct _TOKEN_GROUPS *PTOKEN_GROUPS;
typedef struct _TOKEN_SOURCE *PTOKEN_SOURCE;
typedef struct _USER_INFO_10 *PUSER_INFO_10;
typedef struct _USER_INFO_11 *PUSER_INFO_11;
typedef struct _USER_INFO_20 *PUSER_INFO_20;
typedef struct _USER_INFO_21 *PUSER_INFO_21;
typedef struct _USER_INFO_22 *PUSER_INFO_22;
typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *PWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *PWAVEOUTCAPSW;
typedef struct _WSAQuerySetA *PWSAQUERYSETA;
typedef struct _WSAQuerySetW *PWSAQUERYSETW;
typedef struct _8C6ACB55671DB169C8FCCCD9E0DAFA1D *PWSH_NBP_NAME;
typedef struct tagProxyFileInfo ProxyFileInfo;
typedef struct _RB_HITTESTINFO RBHITTESTINFO;
typedef struct _RECIPIENTINFO RECIPIENTINFO;
typedef struct __MIDL___MIDL_itf_strmif_0074_0002 REGFILTERPINS;
typedef struct tagREGISTERWORDA REGISTERWORDA;
typedef struct tagREGISTERWORDW REGISTERWORDW;
typedef struct _RGNDATAHEADER RGNDATAHEADER;
typedef struct _RIP_IF_CONFIG RIP_IF_CONFIG;
typedef struct _RIP_INTERFACE RIP_INTERFACE;
typedef unsigned int RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE RPCOLEMESSAGE;
typedef void *RPC_IF_HANDLE;
typedef void *RPC_NS_HANDLE;
typedef struct _RTM_IPX_ROUTE RTM_IPX_ROUTE;
typedef struct _RTR_TOC_ENTRY RTR_TOC_ENTRY;
typedef struct _SAP_IF_CONFIG SAP_IF_CONFIG;
typedef struct _SAP_INTERFACE SAP_INTERFACE;
typedef struct _SAppTimeArray SAppTimeArray;
typedef struct _SCHANNEL_CRED SCHANNEL_CRED;
typedef struct tagSCROLLBARINFO SCROLLBARINFO;
typedef struct _SERVICE_INFOA SERVICE_INFOA;
typedef struct _SERVICE_INFOW SERVICE_INFOW;
typedef struct _SHQUERYRBINFO SHQUERYRBINFO;
typedef struct _33C4C3464C1F55DF358037E82FD3A381 SMAPIFormProp;
typedef struct _SPropTagArray SPropTagArray;
typedef struct srv_listentry SRV_LISTENTRY;
typedef struct srv_queuehead SRV_QUEUEHEAD;
typedef struct _SSortOrderSet SSortOrderSet;
typedef struct _STAT_SERVER_0 STAT_SERVER_0;
typedef struct _SWStringArray SWStringArray;
typedef struct _SecBufferDesc SecBufferDesc;
struct ShellUIHelper;
typedef struct tagStorageLayout StorageLayout;
typedef struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 TBBUTTONINFOA;
typedef struct _8688FBDBF9FB8D670D1638B47BFC0FAD TBBUTTONINFOW;
typedef struct tagTBSAVEPARAMSA TBSAVEPARAMSA;
typedef struct tagTBSAVEPARAMSW TBSAVEPARAMSW;
typedef struct tagTCHITTESTINFO TCHITTESTINFO;
typedef struct tagTCITEMHEADERA TCITEMHEADERA;
typedef struct tagTCITEMHEADERW TCITEMHEADERW;
enum TERMINAL_TYPE {TT_STATIC = 0x0,TT_DYNAMIC = 0x1,};
typedef struct tagTHREADENTRY32 THREADENTRY32;
typedef struct _TOKEN_CONTROL TOKEN_CONTROL;
typedef struct tag_TRUECOLORINFO TRUECOLORINFO;
typedef struct tagTVHITTESTINFO TVHITTESTINFO;
typedef struct _WINTRUST_DATA WINTRUST_DATA;
typedef struct _SHORT_SIZEDARR WORD_SIZEDARR;
typedef struct _WSAOVERLAPPED WSAOVERLAPPED;
typedef struct _8A8B79EBB5E366F38FEADC6BCD47EF14 WSH_NBP_TUPLE;
typedef struct _WSPPROC_TABLE WSPPROC_TABLE;
struct WebBrowser_V1;
enum XACTHEURISTIC {XACTHEURISTIC_ABORT = 0x1,XACTHEURISTIC_COMMIT = 0x2,XACTHEURISTIC_DAMAGE = 0x3,XACTHEURISTIC_DANGER = 0x4,};
struct _ADOParameter;
struct _ADORecordset;
struct _Connection15 {struct _Connection15Vtbl *lpVtbl;};
enum _D3DLIGHTTYPE {D3DLIGHT_POINT = 0x1,D3DLIGHT_SPOT = 0x2,D3DLIGHT_DIRECTIONAL = 0x3,D3DLIGHT_PARALLELPOINT = 0x4,D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DRMFOGMODE {D3DRMFOG_LINEAR = 0x0,D3DRMFOG_EXPONENTIAL = 0x1,D3DRMFOG_EXPONENTIALSQUARED = 0x2,};
enum _D3DSHADEMODE {D3DSHADE_FLAT = 0x1,D3DSHADE_GOURAUD = 0x2,D3DSHADE_PHONG = 0x3,D3DSHADE_FORCE_DWORD = 0x7FFFFFFF,};
struct _DADV_CONTROL {struct _DADV_CONTROLVtbl *lpVtbl;};
enum _ELEMENT_TYPE {AllElements = 0x0,ChangerTransport = 0x1,ChangerSlot = 0x2,ChangerIEPort = 0x3,ChangerDrive = 0x4,ChangerDoor = 0x5,ChangerKeypad = 0x6,ChangerMaxElement = 0x7,};
typedef struct _9624B207E0A914870924A3D14631D94B _FPIEEE_VALUE;
enum _PinDirection {PINDIR_INPUT = 0x0,PINDIR_OUTPUT = 0x1,};
enum _SID_NAME_USE {SidTypeUser = 0x1,SidTypeGroup = 0x2,SidTypeDomain = 0x3,SidTypeAlias = 0x4,SidTypeWellKnownGroup = 0x5,SidTypeDeletedAccount = 0x6,SidTypeInvalid = 0x7,SidTypeUnknown = 0x8,SidTypeComputer = 0x9,};
enum _TRUSTEE_FORM {TRUSTEE_IS_SID = 0x0,TRUSTEE_IS_NAME = 0x1,TRUSTEE_BAD_FORM = 0x2,};
enum _TRUSTEE_TYPE {TRUSTEE_IS_UNKNOWN = 0x0,TRUSTEE_IS_USER = 0x1,TRUSTEE_IS_GROUP = 0x2,TRUSTEE_IS_DOMAIN = 0x3,TRUSTEE_IS_ALIAS = 0x4,TRUSTEE_IS_WELL_KNOWN_GROUP = 0x5,TRUSTEE_IS_DELETED = 0x6,TRUSTEE_IS_INVALID = 0x7,};
struct __JUMP_BUFFER {unsigned int Ebp;unsigned int Ebx;unsigned int Edi;unsigned int Esi;unsigned int Esp;unsigned int Eip;unsigned int Registration;unsigned int TryLevel;unsigned int Cookie;unsigned int UnwindFunc;unsigned int UnwindData[6];};
enum _jswindowtype {JSWINDOW_MIN = 0x0,JSWINDOW_MAX = 0x1,JSWINDOW_AVERAGE = 0x2,JSWINDOW_TOTAL_RATE = 0x3,JSWINDOW_LAST = 0x4,};
enum _tagDVD_ERROR {DVD_ERROR_Unexpected = 0x1,DVD_ERROR_CopyProtectFail = 0x2,DVD_ERROR_InvalidDVD1_0Disc = 0x3,DVD_ERROR_InvalidDiscRegion = 0x4,DVD_ERROR_LowParentalLevel = 0x5,};
enum _tagPSUACTION {PSU_DEFAULT = 0x1,PSU_SECURITY_URL_ONLY = 0x2,};
struct accessdata_dn {unsigned short acc_accl;unsigned char acc_acc[40];unsigned short acc_passl;unsigned char acc_pass[40];unsigned short acc_userl;unsigned char acc_user[40];};
struct adpcmcoef_tag {short iCoef1;short iCoef2;};
typedef struct _42792D5BBA08C54B20EEEC50F78E7D08 *lpMapiMessage;
struct mc_deallocate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned char dealloc_type;unsigned char reserv4[2];unsigned char reserv5[4];};
struct mc_send_error {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;unsigned char reserv3;unsigned char err_dir;unsigned char reserv4;unsigned short log_dlen;unsigned char *log_dptr;};
struct ms_fp_overlay {unsigned int ms_fp_entry_len;unsigned char ms_appl_name[8];unsigned char ms_category[4];unsigned char fp_fq_cp_name[17];unsigned char bkup_appl_name[8];unsigned char bkup_fp_fq_cp_name[17];unsigned char reserv1;unsigned char fp_type;unsigned char fp_status;unsigned char fp_routing;};
struct ods_callbacks {int (*sql_getbindtoken)(void *, char *);void (*sql_getdtcxact)(void *, void **);int (*sql_startinexec)(void *);void (*sql_stopinexec)(void *);};
struct perf_server_0 {unsigned int psrv0_Level;unsigned int psrv0_Flags;char *psrv0_pszServerName;char *psrv0_pszServerNodeName;void *psrv0_pControlFunc;};
struct plu62_overlay {unsigned int plu62_entry_len;unsigned int plu62_overlay_len;unsigned char plu_alias[8];unsigned short num_modes;unsigned char plu_un_name[8];unsigned char fqplu_name[17];unsigned char reserv3;unsigned short plu_sess_lim;unsigned char dlc_name[8];unsigned char adapter_num;unsigned char dest_addr_len;unsigned char dest_addr[32];unsigned int par_sess_supp : 1;unsigned int reserv4 : 7;unsigned int def_already_ver : 1;unsigned int def_conv_sec : 1;unsigned int def_sess_sec : 1;unsigned int reserv5 : 5;unsigned int act_already_ver : 1;unsigned int act_conv_sec : 1;unsigned int reserv6 : 6;unsigned int implicit_part : 1;unsigned int reserv7 : 7;};
typedef struct tagrpcLOGPALETTE rpcLOGPALETTE;
struct srv_listentry {struct srv_listentry *Flink;struct srv_listentry *Blink;struct srv_proc *pSrvProc;};
struct srv_queuehead {struct srv_queuehead *Flink;struct srv_queuehead *Blink;struct srv_listhead *ListHead;};
enum tagBINDSTATUS {BINDSTATUS_FINDINGRESOURCE = 0x1,BINDSTATUS_CONNECTING = 0x2,BINDSTATUS_REDIRECTING = 0x3,BINDSTATUS_BEGINDOWNLOADDATA = 0x4,BINDSTATUS_DOWNLOADINGDATA = 0x5,BINDSTATUS_ENDDOWNLOADDATA = 0x6,BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,BINDSTATUS_USINGCACHEDCOPY = 0xA,BINDSTATUS_SENDINGREQUEST = 0xB,BINDSTATUS_CLASSIDAVAILABLE = 0xC,BINDSTATUS_MIMETYPEAVAILABLE = 0xD,BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,BINDSTATUS_BEGINSYNCOPERATION = 0xF,BINDSTATUS_ENDSYNCOPERATION = 0x10,BINDSTATUS_BEGINUPLOADDATA = 0x11,BINDSTATUS_UPLOADINGDATA = 0x12,BINDSTATUS_ENDUPLOADDATA = 0x13,BINDSTATUS_PROTOCOLCLASSID = 0x14,BINDSTATUS_ENCODING = 0x15,BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,BINDSTATUS_CLASSINSTALLLOCATION = 0x17,BINDSTATUS_DECODING = 0x18,BINDSTATUS_LOADINGMIMEHANDLER = 0x19,};
enum tagBINDSTRING {BINDSTRING_HEADERS = 0x1,BINDSTRING_ACCEPT_MIMES = 0x2,BINDSTRING_EXTRA_URL = 0x3,BINDSTRING_LANGUAGE = 0x4,BINDSTRING_USERNAME = 0x5,BINDSTRING_PASSWORD = 0x6,BINDSTRING_UA_PIXELS = 0x7,BINDSTRING_UA_COLOR = 0x8,BINDSTRING_OS = 0x9,BINDSTRING_USER_AGENT = 0xA,BINDSTRING_ACCEPT_ENCODINGS = 0xB,BINDSTRING_POST_COOKIE = 0xC,BINDSTRING_POST_DATA_MIME = 0xD,BINDSTRING_URL = 0xE,};
enum tagBIND_FLAGS {BIND_MAYBOTHERUSER = 0x1,BIND_JUSTTESTEXISTENCE = 0x2,};
struct tagCALBSTRUCT {int wOffsetX;int wOffsetY;int wDistinctWidth;int wDistinctHeight;};
enum tagCHANGEKIND {CHANGEKIND_ADDMEMBER = 0x0,CHANGEKIND_DELETEMEMBER = 0x1,CHANGEKIND_SETNAMES = 0x2,CHANGEKIND_SETDOCUMENTATION = 0x3,CHANGEKIND_GENERAL = 0x4,CHANGEKIND_INVALIDATE = 0x5,CHANGEKIND_CHANGEFAILED = 0x6,CHANGEKIND_MAX = 0x7,};
enum tagCHUNKSTATE {CHUNK_TEXT = 0x1,CHUNK_VALUE = 0x2,};
enum tagDBBOOKMARK {DBBMK_INVALID = 0x0,DBBMK_FIRST = 0x1,DBBMK_LAST = 0x2,};
enum tagDVD_DOMAIN {DVD_DOMAIN_FirstPlay = 0x1,DVD_DOMAIN_VideoManagerMenu = 0x2,DVD_DOMAIN_VideoTitleSetMenu = 0x3,DVD_DOMAIN_Title = 0x4,DVD_DOMAIN_Stop = 0x5,};
enum tagExtentMode {DVEXTENT_CONTENT = 0x0,DVEXTENT_INTEGRAL = 0x1,};
enum tagINVOKEKIND {INVOKE_FUNC = 0x1,INVOKE_PROPERTYGET = 0x2,INVOKE_PROPERTYPUT = 0x4,INVOKE_PROPERTYPUTREF = 0x8,};
enum tagMSICOLINFO {MSICOLINFO_NAMES = 0x0,MSICOLINFO_TYPES = 0x1,};
enum tagMSIDBERROR {MSIDBERROR_INVALIDARG = 0xFFFFFFFD,MSIDBERROR_MOREDATA = 0xFFFFFFFE,MSIDBERROR_FUNCTIONERROR = 0xFFFFFFFF,MSIDBERROR_NOERROR = 0x0,MSIDBERROR_DUPLICATEKEY = 0x1,MSIDBERROR_REQUIRED = 0x2,MSIDBERROR_BADLINK = 0x3,MSIDBERROR_OVERFLOW = 0x4,MSIDBERROR_UNDERFLOW = 0x5,MSIDBERROR_NOTINSET = 0x6,MSIDBERROR_BADVERSION = 0x7,MSIDBERROR_BADCASE = 0x8,MSIDBERROR_BADGUID = 0x9,MSIDBERROR_BADWILDCARD = 0xA,MSIDBERROR_BADIDENTIFIER = 0xB,MSIDBERROR_BADLANGUAGE = 0xC,MSIDBERROR_BADFILENAME = 0xD,MSIDBERROR_BADPATH = 0xE,MSIDBERROR_BADCONDITION = 0xF,MSIDBERROR_BADFORMATTED = 0x10,MSIDBERROR_BADTEMPLATE = 0x11,MSIDBERROR_BADDEFAULTDIR = 0x12,MSIDBERROR_BADREGPATH = 0x13,MSIDBERROR_BADCUSTOMSOURCE = 0x14,MSIDBERROR_BADPROPERTY = 0x15,MSIDBERROR_MISSINGDATA = 0x16,MSIDBERROR_BADCATEGORY = 0x17,MSIDBERROR_BADKEYTABLE = 0x18,MSIDBERROR_BADMAXMINVALUES = 0x19,MSIDBERROR_BADCABINET = 0x1A,MSIDBERROR_BADSHORTCUT = 0x1B,MSIDBERROR_STRINGOVERFLOW = 0x1C,MSIDBERROR_BADLOCALIZEATTRIB = 0x1D,};
enum tagMSIDBSTATE {MSIDBSTATE_ERROR = 0xFFFFFFFF,MSIDBSTATE_READ = 0x0,MSIDBSTATE_WRITE = 0x1,};
enum tagMSIMESSAGE {MSIMESSAGE_OutOfMemory = 0x0,MSIMESSAGE_Error = 0x1000000,MSIMESSAGE_Warning = 0x2000000,MSIMESSAGE_User = 0x3000000,MSIMESSAGE_Info = 0x4000000,MSIMESSAGE_Diagnostic = 0x5000000,MSIMESSAGE_CommonData = 0x6000000,MSIMESSAGE_Reserved = 0x7000000,MSIMESSAGE_ActionStart = 0x8000000,MSIMESSAGE_ActionData = 0x9000000,MSIMESSAGE_Progress = 0xA000000,MSIMESSAGE_ActionDone = 0xB000000,};
enum tagMSIRUNMODE {MSIRUNMODE_ADMIN = 0x0,MSIRUNMODE_ADVERTISE = 0x1,MSIRUNMODE_MAINTENANCE = 0x2,MSIRUNMODE_ROLLBACKENABLED = 0x3,MSIRUNMODE_LOGENABLED = 0x4,MSIRUNMODE_OPERATIONS = 0x5,MSIRUNMODE_REBOOTATEND = 0x6,MSIRUNMODE_REBOOTNOW = 0x7,MSIRUNMODE_CABINET = 0x8,MSIRUNMODE_SOURCESHORTNAMES = 0x9,MSIRUNMODE_TARGETSHORTNAMES = 0xA,MSIRUNMODE_RESERVED11 = 0xB,MSIRUNMODE_WINDOWS9X = 0xC,MSIRUNMODE_ZAWENABLED = 0xD,MSIRUNMODE_RESERVED14 = 0xE,MSIRUNMODE_RESERVED15 = 0xF,};
enum tagOLEDCFLAGS {OLEDC_NODRAW = 0x1,OLEDC_PAINTBKGND = 0x2,OLEDC_OFFSCREEN = 0x4,};
enum tagOLEWHICHMK {OLEWHICHMK_CONTAINER = 0x1,OLEWHICHMK_OBJREL = 0x2,OLEWHICHMK_OBJFULL = 0x3,};
enum tagPENDINGMSG {PENDINGMSG_CANCELCALL = 0x0,PENDINGMSG_WAITNOPROCESS = 0x1,PENDINGMSG_WAITDEFPROCESS = 0x2,};
enum tagREADYSTATE {READYSTATE_UNINITIALIZED = 0x0,READYSTATE_LOADING = 0x1,READYSTATE_LOADED = 0x2,READYSTATE_INTERACTIVE = 0x3,READYSTATE_COMPLETE = 0x4,};
enum tagSERVERCALL {SERVERCALL_ISHANDLED = 0x0,SERVERCALL_REJECTED = 0x1,SERVERCALL_RETRYLATER = 0x2,};
enum tagVIEWSTATUS {VIEWSTATUS_OPAQUE = 0x1,VIEWSTATUS_SOLIDBKGND = 0x2,VIEWSTATUS_DVASPECTOPAQUE = 0x4,VIEWSTATUS_DVASPECTTRANSPARENT = 0x8,VIEWSTATUS_SURFACE = 0x10,VIEWSTATUS_3DSURFACE = 0x20,};
typedef struct _userHMETAFILE userHMETAFILE;
typedef struct _userSTGMEDIUM userSTGMEDIUM;
typedef struct _wireSAFEARRAY *wireSAFEARRAY;
typedef struct accessdata_dn ACCESSDATADN;
typedef struct _ACTRL_ALISTA ACTRL_AUDITA;
typedef struct _ACTRL_ALISTW ACTRL_AUDITW;
struct ADOParameter;
struct ADORecordset;
typedef struct adpcmcoef_tag ADPCMCOEFSET;
typedef struct _ads_attr_def ADS_ATTR_DEF;
typedef struct _AdviseNotify ADVISENOTIFY;
typedef struct _AE_CLOSEFILE AE_CLOSEFILE;
typedef struct _AE_CONNSTART AE_CONNSTART;
typedef struct _AE_NETLOGOFF AE_NETLOGOFF;
typedef struct _AE_RESACCESS AE_RESACCESS;
typedef struct _AE_SESSLOGON AE_SESSLOGON;
typedef struct _AE_SESSPWERR AE_SESSPWERR;
typedef struct _AE_SRVSTATUS AE_SRVSTATUS;
typedef struct _AMVPDATAINFO AMVPDATAINFO;
typedef struct am_info_sect AM_INFO_SECT;
typedef struct _A615A68A66448D8BF4E7E81F3C279570 ATM_CAUSE_IE;
typedef struct _AUX_EVENTREC AUX_EVENTREC;
typedef struct _aviextheader AVIEXTHEADER;
typedef struct _AVIFILEINFOA AVIFILEINFOA;
typedef struct _AVIFILEINFOW AVIFILEINFOW;
typedef struct _avimetaindex AVIMETAINDEX;
typedef struct _0302F8A06E19F526F6B7CE33122C2128 AVIPALCHANGE;
typedef struct _avitcdlindex AVITCDLINDEX;
enum BPC_PRIORITY {BPCPRI_MAX_PRI = 0x7FFFFFFF,BPCPRI_EXCLUSIVE = 0x7FFFFFFF,BPCPRI_PPV_INT_ALL = 0x2AF8,BPCPRI_VIEW_INT_RECORD = 0x2710,BPCPRI_RECORD = 0x2328,BPCPRI_PPV_DETAILS_INT_VIEW = 0x1F40,BPCPRI_VIEW = 0x1B58,BPCPRI_PPV_DETAILS = 0x1770,BPCPRI_EPG_LOADER = 0x1388,BPCPRI_DATA_RECV = 0xFA0,BPCPRI_ANNOUNCE = 0xBB8,BPCPRI_POWER_OFF = 0x7D0,BPCPRI_IDLE = 0x3E8,BPCPRI_NONE = 0x0,BPCPRI_MIN = 0x0,};
enum BookmarkEnum {adBookmarkCurrent = 0x0,adBookmarkFirst = 0x1,adBookmarkLast = 0x2,};
typedef struct tagCapInfoChunk CAPINFOCHUNK;
typedef struct tagCaptureParms CAPTUREPARMS;
typedef struct tagCATEGORYINFO CATEGORYINFO;
typedef struct tagCCSTYLEFLAGA CCSTYLEFLAGA;
typedef struct tagCCSTYLEFLAGW CCSTYLEFLAGW;
struct CCertRequest;
typedef struct _CERT_CONTEXT CERT_CONTEXT;
typedef struct channel_caps_tag CHANNEL_CAPS;
typedef struct tagCHANNEL_INFO CHANNEL_INFO;
typedef struct _charformat2a CHARFORMAT2A;
typedef struct _charformat2w CHARFORMAT2W;
typedef struct tagCHOOSECOLORA CHOOSECOLORA;
typedef struct tagCHOOSECOLORW CHOOSECOLORW;
typedef struct tagICEXYZTRIPLE CIEXYZTRIPLE;
enum CLUSTER_ENUM {CLUSTER_ENUM_NODE = 0x1,CLUSTER_ENUM_RESTYPE = 0x2,CLUSTER_ENUM_RESOURCE = 0x4,CLUSTER_ENUM_GROUP = 0x8,CLUSTER_ENUM_NETWORK = 0x10,CLUSTER_ENUM_NETINTERFACE = 0x20,CLUSTER_ENUM_INTERNAL_NETWORK = 0x80000000,CLUSTER_ENUM_ALL = 0x3F,};
struct CMLangString;
typedef signed int CM_SEND_TYPE;
typedef struct _tagCODEBASEHOLD CODEBASEHOLD;
typedef struct tagCOMBOBOXINFO COMBOBOXINFO;
typedef struct _COMMTIMEOUTS COMMTIMEOUTS;
typedef struct _CONV_OPTIONS CONV_OPTIONS;
typedef struct conv_overlay CONV_OVERLAY;
typedef struct _COSERVERINFO COSERVERINFO;
typedef struct _1960CEC5D16E97BD5D34D82AA1F3F495 CREATEGIZMOA;
typedef struct _2D53B4FD6E19D1977DDA8FD016F55563 CREATEGIZMOW;
typedef struct tagCTLINITBEDIT CTLINITBEDIT;
typedef struct tagCTLINITHEDIT CTLINITHEDIT;
typedef struct tagCTLINITIEDIT CTLINITIEDIT;
typedef struct _currencyfmtA CURRENCYFMTA;
typedef struct _currencyfmtW CURRENCYFMTW;
typedef struct tagCUSTDATAITEM CUSTDATAITEM;
typedef struct tagCWPRETSTRUCT CWPRETSTRUCT;
struct ClusNetworks {struct ClusNetworksVtbl *lpVtbl;};
struct ClusProperty {struct ClusPropertyVtbl *lpVtbl;};
struct ClusResGroup {struct ClusResGroupVtbl *lpVtbl;};
struct ClusResTypes {struct ClusResTypesVtbl *lpVtbl;};
struct ClusResource {struct ClusResourceVtbl *lpVtbl;};
struct ClusterNames {struct ClusterNamesVtbl *lpVtbl;};
struct CoMTSLocater;
typedef struct _D3DLIGHTDATA D3DLIGHTDATA;
typedef struct _D3DVIEWPORT2 D3DVIEWPORT2;
typedef struct _20D2774EFCA5A66C7957E72E344FDD43 DAOFETCHROWS;
typedef struct tagDBCOLUMNDESC DBCOLUMNDESC;
typedef struct tagDBCOLUMNINFO DBCOLUMNINFO;
typedef struct _6C6AB21879699522A68F36BDADA97F41 DBCURSORINFO;
enum DBPROPENUM15 {DBPROP_FILTEROPS = 0xD0,DBPROP_FILTERCOMPAREOPS = 0xD1,DBPROP_FINDCOMPAREOPS = 0xD2,DBPROP_IChapteredRowset = 0xCA,DBPROP_IDBAsynchStatus = 0xCB,DBPROP_IRowsetFind = 0xCC,DBPROP_IRowsetView = 0xD4,DBPROP_IViewChapter = 0xD5,DBPROP_IViewFilter = 0xD6,DBPROP_IViewRowset = 0xD7,DBPROP_IViewSort = 0xD8,DBPROP_INIT_ASYNCH = 0xC8,DBPROP_MAXOPENCHAPTERS = 0xC7,DBPROP_MAXORSINFILTER = 0xCD,DBPROP_MAXSORTCOLUMNS = 0xCE,DBPROP_ROWSET_ASYNCH = 0xC9,DBPROP_SORTONINDEX = 0xCF,};
enum DBPROPENUM20 {DBPROP_IMultipleResults = 0xD9,DBPROP_DATASOURCE_TYPE = 0xFB,MDPROP_AXES = 0xFC,MDPROP_FLATTENING_SUPPORT = 0xFD,MDPROP_MDX_JOINCUBES = 0xFE,MDPROP_NAMED_LEVELS = 0xFF,MDPROP_RANGEROWSET = 0x100,MDPROP_MDX_SLICER = 0xDA,MDPROP_MDX_CUBEQUALIFICATION = 0xDB,MDPROP_MDX_OUTERREFERENCE = 0xDC,MDPROP_MDX_QUERYBYPROPERTY = 0xDD,MDPROP_MDX_CASESUPPORT = 0xDE,MDPROP_MDX_STRING_COMPOP = 0xE0,MDPROP_MDX_DESCFLAGS = 0xE1,MDPROP_MDX_SET_FUNCTIONS = 0xE2,MDPROP_MDX_MEMBER_FUNCTIONS = 0xE3,MDPROP_MDX_NUMERIC_FUNCTIONS = 0xE4,MDPROP_MDX_FORMULAS = 0xE5,MDPROP_MDX_AGGREGATECELL_UPDATE = 0xE6,DBPROP_ACCESSORDER = 0xE7,DBPROP_BOOKMARKINFO = 0xE8,DBPROP_INIT_CATALOG = 0xE9,DBPROP_ROW_BULKOPS = 0xEA,DBPROP_PROVIDERFRIENDLYNAME = 0xEB,DBPROP_LOCKMODE = 0xEC,DBPROP_MULTIPLECONNECTIONS = 0xED,DBPROP_UNIQUEROWS = 0xEE,DBPROP_SERVERDATAONINSERT = 0xEF,DBPROP_STORAGEFLAGS = 0xF0,DBPROP_CONNECTIONSTATUS = 0xF4,DBPROP_ALTERCOLUMN = 0xF5,DBPROP_COLUMNLCID = 0xF6,DBPROP_RESETDATASOURCE = 0xF7,DBPROP_INIT_OLEDBSERVICES = 0xF8,DBPROP_IRowsetRefresh = 0xF9,DBPROP_SERVERNAME = 0xFA,DBPROP_IParentRowset = 0x101,DBPROP_HIDDENCOLUMNS = 0x102,DBPROP_PROVIDERMEMORY = 0x103,DBPROP_CLIENTCURSOR = 0x104,};
enum DBPROPENUM21 {DBPROP_TRUSTEE_USERNAME = 0xF1,DBPROP_TRUSTEE_AUTHENTICATION = 0xF2,DBPROP_TRUSTEE_NEWAUTHENTICATION = 0xF3,};
enum DBPROPENUM25 {DBPROP_ICommandCost = 0x8D,DBPROP_ICommandTree = 0x8E,DBPROP_ICommandValidate = 0x8F,DBPROP_IDBSchemaCommand = 0x90,DBPROP_IProvideMoniker = 0x7D,DBPROP_IQuery = 0x92,DBPROP_IReadData = 0x93,DBPROP_IRowsetAsynch = 0x94,DBPROP_IRowsetCopyRows = 0x95,DBPROP_IRowsetKeys = 0x97,DBPROP_IRowsetNewRowAfter = 0x98,DBPROP_IRowsetNextRowset = 0x99,DBPROP_IRowsetWatchAll = 0x9B,DBPROP_IRowsetWatchNotify = 0x9C,DBPROP_IRowsetWatchRegion = 0x9D,DBPROP_IRowsetWithParameters = 0x9E,};
enum DBREASONENUM {DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0x0,DBREASON_ROWSET_RELEASE = 0x1,DBREASON_COLUMN_SET = 0x2,DBREASON_COLUMN_RECALCULATED = 0x3,DBREASON_ROW_ACTIVATE = 0x4,DBREASON_ROW_RELEASE = 0x5,DBREASON_ROW_DELETE = 0x6,DBREASON_ROW_FIRSTCHANGE = 0x7,DBREASON_ROW_INSERT = 0x8,DBREASON_ROW_RESYNCH = 0x9,DBREASON_ROW_UNDOCHANGE = 0xA,DBREASON_ROW_UNDOINSERT = 0xB,DBREASON_ROW_UNDODELETE = 0xC,DBREASON_ROW_UPDATE = 0xD,DBREASON_ROWSET_CHANGED = 0xE,};
enum DBSTATUSENUM {DBSTATUS_S_OK = 0x0,DBSTATUS_E_BADACCESSOR = 0x1,DBSTATUS_E_CANTCONVERTVALUE = 0x2,DBSTATUS_S_ISNULL = 0x3,DBSTATUS_S_TRUNCATED = 0x4,DBSTATUS_E_SIGNMISMATCH = 0x5,DBSTATUS_E_DATAOVERFLOW = 0x6,DBSTATUS_E_CANTCREATE = 0x7,DBSTATUS_E_UNAVAILABLE = 0x8,DBSTATUS_E_PERMISSIONDENIED = 0x9,DBSTATUS_E_INTEGRITYVIOLATION = 0xA,DBSTATUS_E_SCHEMAVIOLATION = 0xB,DBSTATUS_E_BADSTATUS = 0xC,DBSTATUS_S_DEFAULT = 0xD,};
enum DBTYPEENUM15 {DBTYPE_HCHAPTER = 0x88,};
enum DBTYPEENUM20 {DBTYPE_FILETIME = 0x40,DBTYPE_DBFILETIME = 0x89,DBTYPE_PROPVARIANT = 0x8A,DBTYPE_VARNUMERIC = 0x8B,};
typedef struct _DDKERNELCAPS DDKERNELCAPS;
typedef struct tagDESIGNVECTOR DESIGNVECTOR;
typedef struct _03D431463D1B1B07D135EFD405717ACF DESKBANDINFO;
typedef struct _DFS_INFO_100 DFS_INFO_100;
typedef struct _DFS_INFO_101 DFS_INFO_101;
typedef struct _DIDATAFORMAT DIDATAFORMAT;
typedef DIEFFECTINFOA DIEFFECTINFO;
typedef struct _DIMOUSESTATE DIMOUSESTATE;
typedef struct _DISK_LOGGING DISK_LOGGING;
typedef struct _EFE0F4933F551C6F216DF753EC3D85D4 DLC_LINK_LOG;
typedef struct tagDRAGLISTINFO DRAGLISTINFO;
typedef struct _DRIVERSTATUS DRIVERSTATUS;
typedef struct _DS3DLISTENER DS3DLISTENER;
typedef struct _DSBUFFERDESC DSBUFFERDESC;
typedef struct _DTBLCHECKBOX DTBLCHECKBOX;
typedef struct _DTBLCOMBOBOX DTBLCOMBOBOX;
typedef struct _DTBLGROUPBOX DTBLGROUPBOX;
typedef struct tagAspectInfo DVASPECTINFO;
typedef struct tagDVD_TIMECODE DVD_TIMECODE;
typedef struct tagExtentInfo DVEXTENTINFO;
enum DataTypeEnum {adEmpty = 0x0,adTinyInt = 0x10,adSmallInt = 0x2,adInteger = 0x3,adBigInt = 0x14,adUnsignedTinyInt = 0x11,adUnsignedSmallInt = 0x12,adUnsignedInt = 0x13,adUnsignedBigInt = 0x15,adSingle = 0x4,adDouble = 0x5,adCurrency = 0x6,adDecimal = 0xE,adNumeric = 0x83,adBoolean = 0xB,adError = 0xA,adUserDefined = 0x84,adVariant = 0xC,adIDispatch = 0x9,adIUnknown = 0xD,adGUID = 0x48,adDate = 0x7,adDBDate = 0x85,adDBTime = 0x86,adDBTimeStamp = 0x87,adBSTR = 0x8,adChar = 0x81,adVarChar = 0xC8,adLongVarChar = 0xC9,adWChar = 0x82,adVarWChar = 0xCA,adLongVarWChar = 0xCB,adBinary = 0x80,adVarBinary = 0xCC,adLongVarBinary = 0xCD,adChapter = 0x88,adFileTime = 0x40,adDBFileTime = 0x89,adPropVariant = 0x8A,adVarNumeric = 0x8B,};
typedef struct tagABORTPATH EMRABORTPATH;
typedef struct tagABORTPATH EMRBEGINPATH;
typedef struct tagEMRCREATEPEN EMRCREATEPEN;
typedef struct tagEMRGLSRECORD EMRGLSRECORD;
typedef struct tagEMRINVERTRGN EMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 EMRPOLYGON16;
typedef struct tagEMRELLIPSE EMRRECTANGLE;
typedef struct tagEMRRESTOREDC EMRRESTOREDC;
typedef struct tagEMRROUNDRECT EMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETBKMODE;
typedef struct tagEMRSETPIXELV EMRSETPIXELV;
typedef struct tagABORTPATH EMRWIDENPATH;
typedef struct __MIDL_IH26XEncoderControl_0001 ENC_CMP_DATA;
typedef struct __MIDL_IH26XRTPControl_0001 ENC_RTP_DATA;
typedef struct tagENUMLOGFONTA ENUMLOGFONTA;
typedef struct tagENUMLOGFONTW ENUMLOGFONTW;
enum EditModeEnum {adEditNone = 0x0,adEditInProgress = 0x1,adEditAdd = 0x2,adEditDelete = 0x4,};
struct EventMoniker;
enum ExitCodeList {EXIT_OK = 0x0,EXIT_FIRST_CODE = 0x0,EXIT_INCOMPLETE = 0x1,EXIT_LAST_LOADER_SUCCESS = 0x1,EXIT_ABORT = 0x2,EXIT_FAIL = 0x4,EXIT_MISSINGDLL = 0x5,EXIT_DB = 0x6,EXIT_USAGE = 0x7,EXIT_BUSY = 0xF9,EXIT_COMPACT = 0x12C,EXIT_REPAIR = 0x12D,EXIT_FAIL_CEXCEPTION = 0x12E,EXIT_FAIL_DBEXCEPTION = 0x12F,EXIT_FAIL_GETTIMEZONE = 0x130,EXIT_FAIL_GETTUNINGSPACE = 0x131,EXIT_FAIL_BADTUNINGSPACE = 0x132,EXIT_FAIL_BADSTARTTIME = 0x133,EXIT_FAIL_BADENDTIME = 0x134,EXIT_FAIL_GETLOADERREADFILE = 0x135,EXIT_FAIL_LOADERREADFILE = 0x136,EXIT_FAIL_GETREGIONID = 0x190,EXIT_FIRST_LOADER_DEF = 0x190,EXIT_FAIL_NULLPGDR = 0x1F4,EXIT_FAIL_NULLPGM = 0x1F5,EXIT_FAIL_PGMHEADER = 0x1F6,EXIT_FAIL_PGMSIZE = 0x1F7,EXIT_FAIL_PIVHEADER = 0x1F8,EXIT_FAIL_PIVSPGNUM = 0x1F9,EXIT_FAIL_VIEWLISTSPRINTF = 0x1FA,EXIT_FAIL_VIEWLISTMASK = 0x1FB,EXIT_FAIL_NULLAPGD = 0x1FC,EXIT_FAIL_APGDSYNC = 0x1FD,EXIT_FAIL_APGDHEADER = 0x1FE,EXIT_FAIL_APGDCHECKSUM = 0x1FF,EXIT_FAIL_SPIGTV = 0x200,EXIT_FAIL_SPILTV = 0x201,EXIT_FAIL_SPIGTV_CD = 0x202,EXIT_FAIL_SPILTV_CD = 0x203,EXIT_FAIL_SPIGTV_SD = 0x204,EXIT_FAIL_SPILTV_SD = 0x205,EXIT_FAIL_SPIGTV_DAVIS = 0x206,EXIT_FAIL_SPIGTV_R9_DAVIS = 0x207,EXIT_FAIL_SPIGTV_R9 = 0x208,EXIT_FAIL_SPILTV_R9 = 0x209,EXIT_FAIL_SPILTV_DAVIS = 0x20A,EXIT_FAIL_SPIGA = 0x20B,EXIT_FAIL_SPICD = 0x20C,EXIT_FAIL_SPISD = 0x20D,EXIT_FAIL_SPIHSD = 0x20E,EXIT_FAIL_EXPLICITSCID = 0x20F,EXIT_FAIL_SPI = 0x210,EXIT_FAIL_EXPLICITHEAP = 0x211,EXIT_FAIL_SCIDSIZE = 0x212,EXIT_FAIL_DIPXSPONDER = 0x213,EXIT_FAIL_DIPFLAG = 0x214,EXIT_FAIL_LABELEN = 0x215,EXIT_FAIL_NOLABEL = 0x216,EXIT_FAIL_PIPXSPONDER = 0x217,EXIT_FAIL_CSSMNULL = 0x218,EXIT_FAIL_CSSMSYNC = 0x219,EXIT_FAIL_CSSMHEADER = 0x21A,EXIT_FAIL_CSSMCHECKSUM = 0x21B,EXIT_FAIL_SEGMENTNUM = 0x21C,EXIT_FAIL_CIREC = 0x21D,EXIT_FAIL_DIPPROCESSBUFFER = 0x21E,EXIT_FAIL_DSSDATE = 0x21F,EXIT_FAIL_APPLIEDTIME = 0x220,EXIT_FAIL_NULLSEGM = 0x221,EXIT_FAIL_SEGMSYNC = 0x222,EXIT_FAIL_SEGMHEADER = 0x223,EXIT_FAIL_SEGMCHECKSUM = 0x224,EXIT_FAIL_SEGMSEGMENTS = 0x225,EXIT_FAIL_SEGMPACKETSIZE = 0x226,EXIT_FAIL_STARTDAY = 0x227,EXIT_FAIL_STARTINFO = 0x228,EXIT_FAIL_STARTTIME = 0x229,EXIT_FAIL_RATING = 0x22A,EXIT_FAIL_PI2CHAN = 0x22B,EXIT_FAIL_CHAN2PIP = 0x22C,EXIT_FAIL_CHAN2DIP = 0x22D,EXIT_FAIL_CHAN2NUM = 0x22E,EXIT_FAIL_PIAHEADER = 0x22F,EXIT_FAIL_STARTSLOT = 0x230,EXIT_FAIL_ENDTIME = 0x231,EXIT_FAIL_NULLPISM = 0x232,EXIT_FAIL_PISMSYNC = 0x233,EXIT_FAIL_PISMHEADER = 0x234,EXIT_FAIL_PISMCHECKSUM = 0x235,EXIT_FAIL_LISTGUIDESLOTS = 0x236,EXIT_FAIL_ES = 0x237,EXIT_FAIL_ARRIVALTIME = 0x238,EXIT_FAIL_MPGPROCESSBUFFER = 0x239,EXIT_FAIL_SPGPROCESSBUFFER = 0x23A,EXIT_FAIL_PIPFLAG = 0x23B,EXIT_FAIL_CHAN2PIPMSGNUM = 0x23C,EXIT_FAIL_PARSE = 0x23D,EXIT_FAIL_LOADERREADNET = 0x23E,EXIT_FAIL_DBE_INIT = 0x23F,EXIT_FAIL_DBE_IMPORT_BLOB = 0x240,EXIT_FAIL_DBE_EXPORT_BLOB = 0x241,EXIT_FAIL_AUTHORIZE = 0x242,EXIT_LAST_CODE = 0x242,};
typedef struct tagFILTERREGION FILTERREGION;
typedef struct tagFINDREPLACEA FINDREPLACEA;
typedef struct tagFINDREPLACEW FINDREPLACEW;
typedef struct _FORM_INFO_1A FORM_INFO_1A;
typedef struct _FORM_INFO_1W FORM_INFO_1W;
typedef struct tagFULLPROPSPEC FULLPROPSPEC;
typedef struct tagGCP_RESULTSA GCP_RESULTSA;
typedef struct tagGCP_RESULTSW GCP_RESULTSW;
typedef struct _GLYPHMETRICS GLYPHMETRICS;
typedef struct _GROUP_INFO_0 GROUP_INFO_0;
typedef struct _GROUP_INFO_1 GROUP_INFO_1;
typedef struct _GROUP_INFO_2 GROUP_INFO_2;
typedef struct gw_info_sect GW_INFO_SECT;
typedef struct HACMDRIVERID__ *HACMDRIVERID;
struct HACMDRIVER__ {int unused;};
struct HACMSTREAM__ {int unused;};
typedef struct tagHELPWININFOA HELPWININFOA;
typedef struct tagHELPWININFOW HELPWININFOW;
typedef struct HENHMETAFILE__ *HENHMETAFILE;
typedef struct _HNETWORKENUM *HNETWORKENUM;
struct HTAPIPHONE__ {int unused;};
struct HTMLDocument;
struct HTMLLocation;
struct HTMLSpanFlow;
struct HTMLTableCol;
struct HTMLTableRow;
struct IABContainer {struct IABContainerVtbl *lpVtbl;};
struct IADsAttrInfo {struct IADsAttrInfoVtbl *lpVtbl;};
struct IADsComputer {struct IADsComputerVtbl *lpVtbl;};
struct IADsLocality {struct IADsLocalityVtbl *lpVtbl;};
struct IADsPathname {struct IADsPathnameVtbl *lpVtbl;};
struct IADsPrintJob {struct IADsPrintJobVtbl *lpVtbl;};
struct IADsProperty {struct IADsPropertyVtbl *lpVtbl;};
struct IADsResource {struct IADsResourceVtbl *lpVtbl;};
struct IAMExtDevice {struct IAMExtDeviceVtbl *lpVtbl;};
struct IAMovieSetup {struct IAMovieSetupVtbl *lpVtbl;};
struct IASQLOLEKeys {struct IASQLOLEKeysVtbl *lpVtbl;};
struct IASQLOLERule {struct IASQLOLERuleVtbl *lpVtbl;};
struct IASQLOLETask {struct IASQLOLETaskVtbl *lpVtbl;};
struct IASQLOLEUser {struct IASQLOLEUserVtbl *lpVtbl;};
struct IASQLOLEView {struct IASQLOLEViewVtbl *lpVtbl;};
struct IAdviseSink2 {struct IAdviseSink2Vtbl *lpVtbl;};
struct IAsyncReader {struct IAsyncReaderVtbl *lpVtbl;};
struct IBPCPurchase {struct IBPCPurchaseVtbl *lpVtbl;};
typedef struct _6D499679CD08099A5FDFDFD45568A323 ICDECOMPRESS;
typedef struct tagICONMETRICSA ICONMETRICSA;
typedef struct tagICONMETRICSW ICONMETRICSW;
struct ICatRegister {struct ICatRegisterVtbl *lpVtbl;};
struct ICertRequest {struct ICertRequestVtbl *lpVtbl;};
struct IChannelHook {struct IChannelHookVtbl *lpVtbl;};
struct IClassAccess {struct IClassAccessVtbl *lpVtbl;};
struct ICodeInstall {struct ICodeInstallVtbl *lpVtbl;};
struct IColumnsInfo {struct IColumnsInfoVtbl *lpVtbl;};
struct ICommandCost {struct ICommandCostVtbl *lpVtbl;};
struct ICommandText {struct ICommandTextVtbl *lpVtbl;};
struct ICommandTree {struct ICommandTreeVtbl *lpVtbl;};
struct IContextMenu {struct IContextMenuVtbl *lpVtbl;};
struct IConvertType {struct IConvertTypeVtbl *lpVtbl;};
typedef struct tag_IDFKEYMAPHDR IDFKEYMAPHDR;
struct IDataConvert {struct IDataConvertVtbl *lpVtbl;};
struct IDirect3DRM2 {struct IDirect3DRM2Vtbl *lpVtbl;};
struct IDirectDraw2 {struct IDirectDraw2Vtbl *lpVtbl;};
struct IDirectDraw3 {struct IDirectDraw3Vtbl *lpVtbl;};
struct IDirectPlay2 {struct IDirectPlay2Vtbl *lpVtbl;};
struct IDirectPlay3 {struct IDirectPlay3Vtbl *lpVtbl;};
struct IDirectSound {struct IDirectSoundVtbl *lpVtbl;};
struct IEnumAddress {struct IEnumAddressVtbl *lpVtbl;};
struct IEnumChannel {struct IEnumChannelVtbl *lpVtbl;};
struct IEnumFilters {struct IEnumFiltersVtbl *lpVtbl;};
struct IEnumMoniker {struct IEnumMonikerVtbl *lpVtbl;};
struct IEnumOLEVERB {struct IEnumOLEVERBVtbl *lpVtbl;};
struct IEnumPackage {struct IEnumPackageVtbl *lpVtbl;};
struct IEnumRfc1766 {struct IEnumRfc1766Vtbl *lpVtbl;};
struct IEnumSTATSTG {struct IEnumSTATSTGVtbl *lpVtbl;};
struct IEnumSTATURL {struct IEnumSTATURLVtbl *lpVtbl;};
struct IEnumUnknown {struct IEnumUnknownVtbl *lpVtbl;};
struct IEnumVARIANT {struct IEnumVARIANTVtbl *lpVtbl;};
struct IErrorLookup {struct IErrorLookupVtbl *lpVtbl;};
struct IFileAsyncIO {struct IFileAsyncIOVtbl *lpVtbl;};
struct IFileViewerA {struct IFileViewerAVtbl *lpVtbl;};
struct IFileViewerW {struct IFileViewerWVtbl *lpVtbl;};
struct IFilterGraph {struct IFilterGraphVtbl *lpVtbl;};
struct IHTMLBGsound {struct IHTMLBGsoundVtbl *lpVtbl;};
struct IHTMLElement {struct IHTMLElementVtbl *lpVtbl;};
struct IHTMLWindow2 {struct IHTMLWindow2Vtbl *lpVtbl;};
struct IHlinkTarget {struct IHlinkTargetVtbl *lpVtbl;};
struct IInputObject {struct IInputObjectVtbl *lpVtbl;};
struct IJavaExecute {struct IJavaExecuteVtbl *lpVtbl;};
typedef struct _IMAGE_SYMBOL IMAGE_SYMBOL;
struct IMAPIControl {struct IMAPIControlVtbl *lpVtbl;};
struct IMAPIFormMgr {struct IMAPIFormMgrVtbl *lpVtbl;};
struct IMAPISession {struct IMAPISessionVtbl *lpVtbl;};
struct IMAPISupport {struct IMAPISupportVtbl *lpVtbl;};
struct IMLangString {struct IMLangStringVtbl *lpVtbl;};
struct IMediaFilter {struct IMediaFilterVtbl *lpVtbl;};
struct IMediaSample {struct IMediaSampleVtbl *lpVtbl;};
struct IMediaStream {struct IMediaStreamVtbl *lpVtbl;};
struct IMemInputPin {struct IMemInputPinVtbl *lpVtbl;};
struct IMprUIPlugin {struct IMprUIPluginVtbl *lpVtbl;};
typedef struct _INPUT_RECORD INPUT_RECORD;
typedef struct _B90EAB9AC8B4BF0F295F7B6D198ACEA2 INTTRACEINFO;
typedef union _IN_ADDR_IPV4 IN_ADDR_IPV4;
typedef struct _IN_ADDR_IPV6 IN_ADDR_IPV6;
struct IOleDocument {struct IOleDocumentVtbl *lpVtbl;};
struct IOleUndoUnit {struct IOleUndoUnitVtbl *lpVtbl;};
struct IOmNavigator {struct IOmNavigatorVtbl *lpVtbl;};
typedef struct _IPX_IF_STATS IPX_IF_STATS;
struct IPackageUtil {struct IPackageUtilVtbl *lpVtbl;};
struct IPersistFile {struct IPersistFileVtbl *lpVtbl;};
struct IPictureDisp {struct IPictureDispVtbl *lpVtbl;};
struct IPrepareInfo {struct IPrepareInfoVtbl *lpVtbl;};
struct IPropertyBag {struct IPropertyBagVtbl *lpVtbl;};
struct IRemoteField {struct IRemoteFieldVtbl *lpVtbl;};
struct IRichEditOle {struct IRichEditOleVtbl *lpVtbl;};
struct IRootStorage {struct IRootStorageVtbl *lpVtbl;};
struct IRowPosition {struct IRowPositionVtbl *lpVtbl;};
struct IRowsetIndex {struct IRowsetIndexVtbl *lpVtbl;};
struct IShellFolder {struct IShellFolderVtbl *lpVtbl;};
struct ISoftDistExt {struct ISoftDistExtVtbl *lpVtbl;};
struct ISpoolerHook {struct ISpoolerHookVtbl *lpVtbl;};
struct ISynchronize {struct ISynchronizeVtbl *lpVtbl;};
struct ITAMTerminal {struct ITAMTerminalVtbl *lpVtbl;};
struct ITCollection {struct ITCollectionVtbl *lpVtbl;};
struct ITConference {struct ITConferenceVtbl *lpVtbl;};
struct ITConnection {struct ITConnectionVtbl *lpVtbl;};
struct ITableRename {struct ITableRenameVtbl *lpVtbl;};
struct ITaskTrigger {struct ITaskTriggerVtbl *lpVtbl;};
struct ITransaction {struct ITransactionVtbl *lpVtbl;};
struct ITypeFactory {struct ITypeFactoryVtbl *lpVtbl;};
struct ITypeMarshal {struct ITypeMarshalVtbl *lpVtbl;};
struct IVideoWindow {struct IVideoWindowVtbl *lpVtbl;};
struct IViewChapter {struct IViewChapterVtbl *lpVtbl;};
struct IViewObject2 {struct IViewObject2Vtbl *lpVtbl;};
struct IWebBrowser2 {struct IWebBrowser2Vtbl *lpVtbl;};
struct IWinInetInfo {struct IWinInetInfoVtbl *lpVtbl;};
struct IWriteCookie {struct IWriteCookieVtbl *lpVtbl;};
struct IXMLDocument {struct IXMLDocumentVtbl *lpVtbl;};
typedef void *I_RPC_HANDLE;
typedef struct _5D5BF4B99560B17B9B110B9D66DCBC97 JAVAPROPERTY;
typedef union _5AC28848A8A0188E71C0B88AB8CF796B KSDATAFORMAT;
typedef union _CEB0288F8947EE21048823F466ABF866 KSIDENTIFIER;
typedef struct _204C6CB5B1CC0D35B371E5C594718A83 KSRESOLUTION;
typedef struct ldapcontrolA LDAPControlA;
typedef struct ldapcontrolW LDAPControlW;
typedef struct ldapsortkeyA LDAPSortKeyA;
typedef struct ldapsortkeyW LDAPSortKeyW;
typedef struct l_timeval LDAP_TIMEVAL;
typedef struct linecallinfo_tag LINECALLINFO;
typedef struct linecalllist_tag LINECALLLIST;
typedef struct linetermcaps_tag LINETERMCAPS;
typedef struct link_overlay LINK_OVERLAY;
typedef struct _LOADED_IMAGE LOADED_IMAGE;
typedef struct IABProvider *LPABPROVIDER;
typedef IAccessible *LPACCESSIBLE;
typedef IAdviseSink *LPADVISESINK;
typedef struct _AE_CONNREJ *LPAE_CONNREJ;
typedef struct _AE_GENERIC *LPAE_GENERIC;
typedef struct _AE_LOCKOUT *LPAE_LOCKOUT;
typedef struct tagALTTABINFO *LPALTTABINFO;
typedef struct IASQLOLEKey *LPASQLOLEKEY;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBITMAPINFO *LPBITMAPINFO;
typedef struct tagBOXRESULTS *LPBOXRESULTS;
typedef struct tagCALBSTRUCT *LPCALBSTRUCT;
typedef struct calldata_dn *LPCALLDATADN;
typedef struct tagCALPOLESTR *LPCALPOLESTR;
typedef  DIPROPCAL *LPCDIPROPCAL;
typedef struct _COMMCONFIG *LPCOMMCONFIG;
typedef struct _CounterDef *LPCOUNTERDEF;
typedef struct tagCURSORINFO *LPCURSORINFO;
typedef struct _D3DHVERTEX *LPD3DHVERTEX;
typedef struct _D3DLVERTEX *LPD3DLVERTEX;
typedef struct _D3DRMIMAGE *LPD3DRMIMAGE;
typedef IDataFilter *LPDATAFILTER;
typedef IDataObject *LPDATAOBJECT;
typedef struct _98BEB28C79E54824F19FEAA43CA20E4E *LPDBPROCINFO;
typedef struct _DFS_INFO_1 *LPDFS_INFO_1;
typedef struct _DFS_INFO_2 *LPDFS_INFO_2;
typedef struct _DFS_INFO_3 *LPDFS_INFO_3;
typedef struct tagDIBSECTION *LPDIBSECTION;
typedef struct DIENVELOPE *LPDIENVELOPE;
typedef struct DIJOYSTATE *LPDIJOYSTATE;
typedef struct DIPERIODIC *LPDIPERIODIC;
typedef struct IDirect3DRM *LPDIRECT3DRM;
typedef struct IDirectDraw *LPDIRECTDRAW;
typedef struct IDirectPlay *LPDIRECTPLAY;
typedef struct dnet_accent *LPDNETACCENT;
typedef struct dnet_accent *( *LPDNETGETACC)( struct dnet_accent *);
typedef struct DPLAPPINFO *LPDPLAPPINFO;
typedef struct _66EE77830E735B4EF58A5F76D8ADF8E5 *LPDPMSG_CHAT;
typedef IDropSource *LPDROPSOURCE;
typedef struct tagDROPSTRUCT *LPDROPSTRUCT;
typedef IDropTarget *LPDROPTARGET;
typedef struct _DS3DBUFFER *LPDS3DBUFFER;
typedef struct _DTBLBUTTON *LPDTBLBUTTON;
typedef IEnumHLITEM *LPENUMHLITEM;
typedef struct IEnumIDList *LPENUMIDLIST;
typedef IEnumString *LPENUMSTRING;
typedef struct tagEXT_BUTTON *LPEXT_BUTTON;
typedef struct tagFILTERKEYS *LPFILTERKEYS;
typedef IExchangeFolderACLs *LPFOLDERACLS;
typedef int *LPFONTEVENTS;
typedef struct _F4E2A3B3EF6C4FAA4EC9C87B4A54D83E *LPFVSHOWINFO;
typedef int *LPFXPT2DOT30;
typedef struct _A796FD32A2A58348CC7057E9D7EB520D *LPGBGETTEXTA;
typedef struct _2DFBDCCDB67179C152E4440B255C036F *LPGBGETTEXTW;
typedef struct dn_naddr *( *LPGETNODEADD)();
typedef IHlinkFrame *LPHLINKFRAME;
typedef struct tagINKINGINFO *LPINKINGINFO;
typedef struct _JOB_INFO_3 *LPJOB_INFO_3;
typedef struct tagKEYBDINPUT *LPKEYBDINPUT;
typedef struct linkinfo_dn *LPLINKINFODN;
typedef struct tagLOGPALETTE *LPLOGPALETTE;
typedef struct tagLVBKIMAGEA *LPLVBKIMAGEA;
typedef struct tagLVBKIMAGEW *LPLVBKIMAGEW;
typedef struct IMAPIFolder *LPMAPIFOLDER;
typedef struct _00C90F9554CD018C8A08AD8BDB9761D9 *LPMAPIINIT_0;
typedef struct _MAPINAMEID *LPMAPINAMEID;
typedef struct IMAPIStatus *LPMAPISTATUS;
typedef struct tagMETAHEADER *LPMETAHEADER;
typedef struct tagMETARECORD *LPMETARECORD;
typedef struct tagMETHODDATA *LPMETHODDATA;
typedef struct tagMINMAXINFO *LPMINMAXINFO;
typedef struct tagMIXERCAPSA *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW *LPMIXERCAPSW;
typedef struct tagMIXERLINEA *LPMIXERLINEA;
typedef struct tagMIXERLINEW *LPMIXERLINEW;
typedef struct tagMOUSEINPUT *LPMOUSEINPUT;
typedef struct _MSG_INFO_0 *LPMSG_INFO_0;
typedef struct _MSG_INFO_1 *LPMSG_INFO_1;
typedef struct IMSProvider *LPMSPROVIDER;
typedef struct tagNMDAYSTATE *LPNMDAYSTATE;
typedef struct tagNMLISTVIEW *LPNMLISTVIEW;
typedef struct _EAA2A559B48BCBAE81109D6C3EFDA87C *LPNMPGSCROLL;
typedef struct tagNMTOOLBARA *LPNMTOOLBARA;
typedef struct tagNMTOOLBARW *LPNMTOOLBARW;
typedef struct _numberfmtA *LPNUMBERFMTA;
typedef struct _numberfmtW *LPNUMBERFMTW;
typedef struct tagOEMPENINFO *LPOEMPENINFO;
typedef IOleControl *LPOLECONTROL;
typedef struct tagOLEUIBUSYA *LPOLEUIBUSYA;
typedef struct tagOLEUIBUSYW *LPOLEUIBUSYW;
typedef struct _OPTIONDATA *LPOPTIONDATA;
typedef struct _OVERLAPPED *LPOVERLAPPED;
typedef IRecordInfo *LPRECORDINFO;
typedef struct tagSCROLLINFO *LPSCROLLINFO;
typedef struct sockaddr_dn *LPSOCKADDRDN;
typedef struct _SPropValue *LPSPropValue;
typedef struct _SSortOrder *LPSSortOrder;
typedef struct _tagSTACKFRAME *LPSTACKFRAME;
typedef struct tagSTICKYKEYS *LPSTICKYKEYS;
typedef struct tagSTROKEINFO *LPSTROKEINFO;
typedef struct _SYSTEMTIME *LPSYSTEMTIME;
typedef struct tagTOGGLEKEYS *LPTOGGLEKEYS;
typedef struct _511A31EFEAABA2548CBC69D58C296B4A *LPTRACEENTRY;
typedef struct _USE_INFO_0 *LPUSE_INFO_0;
typedef struct _USE_INFO_1 *LPUSE_INFO_1;
typedef struct _USE_INFO_2 *LPUSE_INFO_2;
typedef struct _USE_INFO_3 *LPUSE_INFO_3;
typedef struct _usr_permid *LPUSR_PERMID;
typedef IViewObject *LPVIEWOBJECT;
typedef struct waveformat_tag *LPWAVEFORMAT;
typedef struct tagWINDOWINFO *LPWINDOWINFO;
typedef struct _WSAVersion *LPWSAVERSION;
typedef struct IXPProvider *LPXPPROVIDER;
typedef struct _8BB509EE23B3AF5C934691E6EB52B09A LS_CHALLDATA;
typedef struct _4952B9873E48B84CD6F4372AC683C647 LS_CHALLENGE;
typedef struct lu62_overlay LU62_OVERLAY;
enum LockTypeEnum {adLockUnspecified = 0xFFFFFFFF,adLockReadOnly = 0x1,adLockPessimistic = 0x2,adLockOptimistic = 0x3,adLockBatchOptimistic = 0x4,};
enum MACRO_ACCESS {ACCESS_SYSTEM_SECURITY = 0x1000000,};
enum MACRO_ACMERR {ACMERR_BASE = 512,ACMERR_NOTPOSSIBLE = 512,ACMERR_BUSY = 513,ACMERR_UNPREPARED = 514,ACMERR_CANCELED = 515,};
enum MACRO_ACTFLG {ACTFLG_RunLocally = 1,ACTFLG_RunOnce = 2,ACTFLG_SystemWide = 4,ACTFLG_Published = 8,ACTFLG_Assigned = 16,ACTFLG_UserInstall = 32,};
enum MACRO_ACTION {ACTION_LOCKOUT = 0x0,ACTION_ADMINUNLOCK = 0x1,};
enum MACRO_AC_SRC {AC_SRC_OVER = 0x0,AC_SRC_NO_PREMULT_ALPHA = 0x1,AC_SRC_NO_ALPHA = 0x2,AC_DST_NO_PREMULT_ALPHA = 0x10,AC_DST_NO_ALPHA = 0x20,};
enum MACRO_ADDURL {ADDURL_SILENT = 0x1,};
enum MACRO_AF_FMH {AF_FMH = 0x80,AF_BC = 0x40,AF_EC = 0x20,AF_COMM = 0x10,AF_BB = 0x8,AF_EB = 0x4,AF_CD = 0x2,AF_SD = 0x1,AF_CODE = 0x80,AF_ENCR = 0x40,AF_ENPD = 0x20,AF_QRI = 0x10,AF_CEI = 0x8,AF_BBIU = 0x4,AF_EBIU = 0x2,AF_RBI = 0x1,};
enum MACRO_AM_AC3 {AM_AC3_ALTERNATE_AUDIO_1 = 1,AM_AC3_ALTERNATE_AUDIO_2 = 2,AM_AC3_ALTERNATE_AUDIO_BOTH = 3,AM_AC3_SERVICE_MAIN_AUDIO = 0,AM_AC3_SERVICE_NO_DIALOG = 1,AM_AC3_SERVICE_VISUALLY_IMPAIRED = 2,AM_AC3_SERVICE_HEARING_IMPAIRED = 3,AM_AC3_SERVICE_DIALOG_ONLY = 4,AM_AC3_SERVICE_COMMENTARY = 5,AM_AC3_SERVICE_EMERGENCY_FLASH = 6,AM_AC3_SERVICE_VOICE_OVER = 7,AM_UseNewCSSKey = 1,AM_DVD_CGMS_RESERVED_MASK = 120,AM_DVD_CGMS_COPY_PROTECT_MASK = 24,AM_DVD_CGMS_COPY_PERMITTED = 0,AM_DVD_CGMS_COPY_ONCE = 16,AM_DVD_CGMS_NO_COPY = 24,AM_DVD_COPYRIGHT_MASK = 64,AM_DVD_NOT_COPYRIGHTED = 0,AM_DVD_COPYRIGHTED = 64,AM_DVD_SECTOR_PROTECT_MASK = 32,AM_DVD_SECTOR_NOT_PROTECTED = 0,AM_DVD_SECTOR_PROTECTED = 32,};
enum MACRO_APPCMD {APPCMD_CLIENTONLY = 0x10,APPCMD_FILTERINITS = 0x20,APPCMD_MASK = 0xFF0,};
enum MACRO_ASPECT {ASPECT_FILTERING = 0x1,};
enum MACRO_ASP_MD {ASP_MD_ID_BEGIN_RESERVED = 0x7000,ASP_MD_ID_END_RESERVED = 0x74FF,};
enum MACRO_ASSERT {ASSERT_PRIMARY = 0x8,ASSERT_ALTERNATE = 0x9,};
enum MACRO_ATADDR {ATADDR_ANY = 0,ATADDR_BROADCAST = 255,};
enum MACRO_ATTACH {ATTACH_DIALOG = 0x1,};
enum MACRO_ATTRIB {ATTRIB_TRANSPARENCY = 0x1,ATTRIB_MATTE = 0x2,};
enum MACRO_AVIERR {AVIERR_OK = 0,AVIERR_UNSUPPORTED = -2147205019,AVIERR_BADFORMAT = -2147205018,AVIERR_MEMORY = -2147205017,AVIERR_INTERNAL = -2147205016,AVIERR_BADFLAGS = -2147205015,AVIERR_BADPARAM = -2147205014,AVIERR_BADSIZE = -2147205013,AVIERR_BADHANDLE = -2147205012,AVIERR_FILEREAD = -2147205011,AVIERR_FILEWRITE = -2147205010,AVIERR_FILEOPEN = -2147205009,AVIERR_COMPRESSOR = -2147205008,AVIERR_NOCOMPRESSOR = -2147205007,AVIERR_READONLY = -2147205006,AVIERR_NODATA = -2147205005,AVIERR_BUFFERTOOSMALL = -2147205004,AVIERR_CANTCOMPRESS = -2147205003,AVIERR_USERABORT = -2147204922,AVIERR_ERROR = -2147204921,};
enum MACRO_BACKUP {BACKUP_INVALID = 0x0,BACKUP_DATA = 0x1,BACKUP_EA_DATA = 0x2,BACKUP_SECURITY_DATA = 0x3,BACKUP_ALTERNATE_DATA = 0x4,BACKUP_LINK = 0x5,BACKUP_PROPERTY_DATA = 0x6,BACKUP_OBJECT_ID = 0x7,BACKUP_REPARSE_DATA = 0x8,BACKUP_SPARSE_BLOCK = 0x9,};
enum MACRO_BEYOND {BEYOND_LAST_OM_ERROR = 0x4000F11E,};
enum MACRO_BICOMP {BICOMP_IBMULTIMOTION = 1230261333,BICOMP_IBMPHOTOMOTION = 1330464848,BICOMP_CREATIVEYUV = 1987410275,};
enum MACRO_BITMAP {BITMAP_EFFECT_INPLACE = 0x1,BITMAP_EFFECT_REALTIME = 0x2,BITMAP_EFFECT_DIRECTDRAW = 0x4,BITMAP_EFFECT_SUPPORTS_INVALIDATE = 0x8,};
enum MACRO_BKMODE {BKMODE_LAST = 2,};
enum MACRO_BOUNCE {BOUNCE_MESSAGE_SIZE_TOO_LARGE = 13,BOUNCE_FORMS_MISMATCH = 31,BOUNCE_ACCESS_DENIED = 38,};
enum MACRO_BPTAdd {BPTAdd = 1,BPTRemove = 2,};
enum MACRO_BRIDGE {BRIDGE_E_INVALID_OUTPUT_ID = 0xC0040001,BRIDGE_E_INVALID_RESV_ID = 0xC0040002,BRIDGE_E_INVALID_ROUTE = 0xC0040003,BRIDGE_E_INVALID_STATE = 0xC0040004,BRIDGE_E_ROUTE_EXISTS = 0xC0040005,BRIDGE_E_INSUFFICIENT_BANDWIDTH = 0xC0040006,BRIDGE_E_OUTPUT_MAX_REACHED = 0xC0040007,BRIDGE_E_INTERNAL_ERROR = 0xC0040008,BRIDGE_E_OUTPUT_VALUE_ERROR = 0xC0040009,BRIDGE_E_INVALID_OUTPUT_VALUE = 0xC004000A,BRIDGE_E_OUTPUT_VALUE_REJECTED = 0xC004000B,BRIDGE_E_OUTPUT_VALUE_NOT_SUPPORTED = 0xC004000C,BRIDGE_E_OUTPUT_SET_STATE_ERROR = 0xC004000D,BRIDGE_E_OUTPUT_DLL_LOAD_FAILED = 0xC004000E,BRIDGE_E_OUTPUT_DLL_INCOMPATABLE = 0xC004000F,BRIDGE_E_REGISTRY_ERROR = 0xC0040010,BRIDGE_E_WINSOCK_ERROR = 0xC0040011,BRIDGE_E_OUTPUT_NOT_LOADED = 0xC0040012,BRIDGE_E_OUTPUT_STARTUP_FAILED = 0xC0040013,BRIDGE_E_OUTPUT_SHUTDOWN_PENDING = 0xC0040014,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_CALERT {CALERT_SYSTEM = 6,};
enum MACRO_CB_OID {CB_OID_1 = 9,CB_OID_2 = 10,CB_OID_3 = 11,CB_OID_4 = 12,};
enum MACRO_CCHASE {CCHASE = 21,};
enum MACRO_CCLEAR {CCLEAR = 1,CSDT = 2,};
enum MACRO_CDBOSC {CDBOSC_SETFOCUS = 0x0,CDBOSC_KILLFOCUS = 0x1,CDBOSC_SELCHANGE = 0x2,CDBOSC_RENAME = 0x3,};
enum MACRO_CEDDMA {CEDDMA = 0x4,};
enum MACRO_CELDMA {CELDMA = 0x1,CED4WIRE = 0x80,};
enum MACRO_CFG_SS {CFG_SS_MAX = 16,CFG_SS_BASE_ID = 26368,CFG_SS_MAX_ID = 26383,};
enum MACRO_CLIENT {CLIENT = 2,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000,};
enum MACRO_CLRDTR {CLRDTR = 6,};
enum MACRO_CLTYPE {CLTYPE_LEN = 12,};
enum MACRO_CMC_XS {CMC_XS_MS = 512,CMC_X_MS_SESSION_FLAGS = 528,CMC_X_MS_NEW_SESSION = 1,CMC_X_MS_FORCE_DOWNLOAD = 4,CMC_X_MS_FUNCTION_FLAGS = 529,CMC_X_MS_READ_ENV_ONLY = 1,CMC_X_MS_READ_BODY_AS_FILE = 2,CMC_X_MS_LIST_GUARANTEE_FIFO = 4,CMC_X_MS_AB_NO_MODIFY = 8,CMC_X_MS_ADDRESS_UI = 530,CMC_X_MS_ATTACH_DATA = 640,CMC_X_MS_ATTACH_OLE = 1,CMC_X_MS_ATTACH_OLE_STATIC = 2,CMC_X_MS_MESSAGE_DATA = 641,CMC_X_MS_MSG_RECEIPT_REQ = 1,CMC_X_MS_ATTACH_MESSAGE = 4,};
enum MACRO_COLORS {iPALETTE_COLORS = 256,iEGA_COLORS = 16,iMASK_COLORS = 3,};
enum MACRO_COMMON {COMMON_LVB_LEADING_BYTE = 0x100,COMMON_LVB_TRAILING_BYTE = 0x200,COMMON_LVB_GRID_HORIZONTAL = 0x400,COMMON_LVB_GRID_LVERTICAL = 0x800,COMMON_LVB_GRID_RVERTICAL = 0x1000,COMMON_LVB_REVERSE_VIDEO = 0x4000,COMMON_LVB_UNDERSCORE = 0x8000,COMMON_LVB_SBCSDBCS = 0x300,};
enum MACRO_CONFIG {CONFIG_CHANGED = 0x100000,};
enum MACRO_CP_ACP {CP_ACP = 0,CP_OEMCP = 1,CP_MACCP = 2,CP_THREAD_ACP = 3,CP_SYMBOL = 42,CP_UTF7 = 65000,CP_UTF8 = 65001,};
enum MACRO_CREATE {CREATE_NEW = 1,CREATE_ALWAYS = 2,};
enum MACRO_CRSWPP {CRSWPP_ERROR_FIRST = 0x40042200,CRSWPP_INVALID_POSTINFO_FILE = 0xC0042201,CRSWPP_NO_MATCHING_MAPURL = 0xC0042202,CRSWPP_SECURITY_PACKAGE = 0xC0042203,CRSWPP_SECURITY_PACKAGE_NOT_FOUND = 0xC0042204,CRSWPP_PROJECT_BINDING_INCOMPLETE = 0xC0042205,CRSWPP_SERVER_BINDING_INCOMPLETE = 0xC0042206,CRSWPP_SERVER_NOT_RESPONDING = 0xC0042207,CRSWPP_FAILED_AUTH = 0xC0042208,CRSWPP_POSTINFO_NEEDED = 0x40042209,CRSWPP_BIND_FAILED = 0xC004220A,};
enum MACRO_CSHUTC {CSHUTC = 22,};
enum MACRO_CSHUTD {CSHUTD = 23,};
enum MACRO_CSOUND {CSOUND_SYSTEM = 16,};
enum MACRO_CURSOR {CURSOR_SHOWING = 0x1,};
enum MACRO_D3DDEB {D3DDEB_BUFSIZE = 0x1,D3DDEB_CAPS = 0x2,D3DDEB_LPDATA = 0x4,};
enum MACRO_D3DERR {D3DERR_BADMAJORVERSION = -2005531972,D3DERR_BADMINORVERSION = -2005531971,D3DERR_INVALID_DEVICE = -2005531967,D3DERR_INITFAILED = -2005531966,D3DERR_DEVICEAGGREGATED = -2005531965,D3DERR_EXECUTE_CREATE_FAILED = -2005531962,D3DERR_EXECUTE_DESTROY_FAILED = -2005531961,D3DERR_EXECUTE_LOCK_FAILED = -2005531960,D3DERR_EXECUTE_UNLOCK_FAILED = -2005531959,D3DERR_EXECUTE_LOCKED = -2005531958,D3DERR_EXECUTE_NOT_LOCKED = -2005531957,D3DERR_EXECUTE_FAILED = -2005531956,D3DERR_EXECUTE_CLIPPED_FAILED = -2005531955,D3DERR_TEXTURE_NO_SUPPORT = -2005531952,D3DERR_TEXTURE_CREATE_FAILED = -2005531951,D3DERR_TEXTURE_DESTROY_FAILED = -2005531950,D3DERR_TEXTURE_LOCK_FAILED = -2005531949,D3DERR_TEXTURE_UNLOCK_FAILED = -2005531948,D3DERR_TEXTURE_LOAD_FAILED = -2005531947,D3DERR_TEXTURE_SWAP_FAILED = -2005531946,D3DERR_TEXTURE_LOCKED = -2005531945,D3DERR_TEXTURE_NOT_LOCKED = -2005531944,D3DERR_TEXTURE_GETSURF_FAILED = -2005531943,D3DERR_MATRIX_CREATE_FAILED = -2005531942,D3DERR_MATRIX_DESTROY_FAILED = -2005531941,D3DERR_MATRIX_SETDATA_FAILED = -2005531940,D3DERR_MATRIX_GETDATA_FAILED = -2005531939,D3DERR_SETVIEWPORTDATA_FAILED = -2005531938,D3DERR_INVALIDCURRENTVIEWPORT = -2005531937,D3DERR_INVALIDPRIMITIVETYPE = -2005531936,D3DERR_INVALIDVERTEXTYPE = -2005531935,D3DERR_TEXTURE_BADSIZE = -2005531934,D3DERR_INVALIDRAMPTEXTURE = -2005531933,D3DERR_MATERIAL_CREATE_FAILED = -2005531932,D3DERR_MATERIAL_DESTROY_FAILED = -2005531931,D3DERR_MATERIAL_SETDATA_FAILED = -2005531930,D3DERR_MATERIAL_GETDATA_FAILED = -2005531929,D3DERR_INVALIDPALETTE = -2005531928,D3DERR_ZBUFF_NEEDS_SYSTEMMEMORY = -2005531927,D3DERR_ZBUFF_NEEDS_VIDEOMEMORY = -2005531926,D3DERR_SURFACENOTINVIDMEM = -2005531925,D3DERR_LIGHT_SET_FAILED = -2005531922,D3DERR_LIGHTHASVIEWPORT = -2005531921,D3DERR_LIGHTNOTINTHISVIEWPORT = -2005531920,D3DERR_SCENE_IN_SCENE = -2005531912,D3DERR_SCENE_NOT_IN_SCENE = -2005531911,D3DERR_SCENE_BEGIN_FAILED = -2005531910,D3DERR_SCENE_END_FAILED = -2005531909,D3DERR_INBEGIN = -2005531902,D3DERR_NOTINBEGIN = -2005531901,D3DERR_NOVIEWPORTS = -2005531900,D3DERR_VIEWPORTDATANOTSET = -2005531899,D3DERR_VIEWPORTHASNODEVICE = -2005531898,D3DERR_NOCURRENTVIEWPORT = -2005531897,};
enum MACRO_D3DFDS {D3DFDS_COLORMODEL = 0x1,D3DFDS_GUID = 0x2,D3DFDS_HARDWARE = 0x4,D3DFDS_TRIANGLES = 0x8,D3DFDS_LINES = 0x10,D3DFDS_MISCCAPS = 0x20,D3DFDS_RASTERCAPS = 0x40,D3DFDS_ZCMPCAPS = 0x80,D3DFDS_ALPHACMPCAPS = 0x100,D3DFDS_SRCBLENDCAPS = 0x200,D3DFDS_DSTBLENDCAPS = 0x400,D3DFDS_SHADECAPS = 0x800,D3DFDS_TEXTURECAPS = 0x1000,D3DFDS_TEXTUREFILTERCAPS = 0x2000,D3DFDS_TEXTUREBLENDCAPS = 0x4000,D3DFDS_TEXTUREADDRESSCAPS = 0x8000,};
enum MACRO_D3DPAL {D3DPAL_FREE = 0x0,D3DPAL_READONLY = 0x40,D3DPAL_RESERVED = 0x80,};
enum MACRO_DAPI_E {DAPI_E_BAD_HANDLE = 0xC0000081,DAPI_E_HEADER_MUST_BE_TEXT = 0xC0000082,};
enum MACRO_DATA_E {DATA_E_FORMATETC = -2147221404,};
enum MACRO_DBMORE {DBMORE_ROWS = 0x20,};
enum MACRO_DBPROP {DBPROP_CI_CATALOG_NAME = 2,DBPROP_CI_INCLUDE_SCOPES = 3,DBPROP_CI_DEPTHS = 4,DBPROP_CI_SCOPE_FLAGS = 4,DBPROP_CI_EXCLUDE_SCOPES = 5,DBPROP_CI_SECURITY_ID = 6,DBPROP_CI_QUERY_TYPE = 7,DBPROP_USECONTENTINDEX = 2,DBPROP_DEFERNONINDEXEDTRIMMING = 3,DBPROP_USEEXTENDEDDBTYPES = 4,DBPROP_MACHINE = 2,DBPROP_CLIENT_CLSID = 3,};
enum MACRO_DBSAVE {DBSAVE = 1,};
enum MACRO_DBSTAT {DBSTAT = 3,DBTEXTLIMIT = 4,};
enum MACRO_DBT_NO {DBT_NO_DISK_SPACE = 0x47,DBT_LOW_DISK_SPACE = 0x48,DBT_CONFIGMGPRIVATE = 0x7FFF,DBT_DEVICEARRIVAL = 0x8000,DBT_DEVICEQUERYREMOVE = 0x8001,DBT_DEVICEQUERYREMOVEFAILED = 0x8002,DBT_DEVICEREMOVEPENDING = 0x8003,DBT_DEVICEREMOVECOMPLETE = 0x8004,DBT_DEVICETYPESPECIFIC = 0x8005,DBT_CUSTOMEVENT = 0x8006,DBT_DEVTYP_OEM = 0x0,DBT_DEVTYP_DEVNODE = 0x1,DBT_DEVTYP_VOLUME = 0x2,DBT_DEVTYP_PORT = 0x3,DBT_DEVTYP_NET = 0x4,DBT_DEVTYP_DEVICEINTERFACE = 0x5,DBT_DEVTYP_HANDLE = 0x6,};
enum MACRO_DB_IMP {DB_IMP_LEVEL_ANONYMOUS = 0x0,DB_IMP_LEVEL_IDENTIFY = 0x1,DB_IMP_LEVEL_IMPERSONATE = 0x2,DB_IMP_LEVEL_DELEGATE = 0x3,};
enum MACRO_DDCAPS {DDCAPS_3D = 0x1,DDCAPS_ALIGNBOUNDARYDEST = 0x2,DDCAPS_ALIGNSIZEDEST = 0x4,DDCAPS_ALIGNBOUNDARYSRC = 0x8,DDCAPS_ALIGNSIZESRC = 0x10,DDCAPS_ALIGNSTRIDE = 0x20,DDCAPS_BLT = 0x40,DDCAPS_BLTQUEUE = 0x80,DDCAPS_BLTFOURCC = 0x100,DDCAPS_BLTSTRETCH = 0x200,DDCAPS_GDI = 0x400,DDCAPS_OVERLAY = 0x800,DDCAPS_OVERLAYCANTCLIP = 0x1000,DDCAPS_OVERLAYFOURCC = 0x2000,DDCAPS_OVERLAYSTRETCH = 0x4000,DDCAPS_PALETTE = 0x8000,DDCAPS_PALETTEVSYNC = 0x10000,DDCAPS_READSCANLINE = 0x20000,DDCAPS_STEREOVIEW = 0x40000,DDCAPS_VBI = 0x80000,DDCAPS_ZBLTS = 0x100000,DDCAPS_ZOVERLAYS = 0x200000,DDCAPS_COLORKEY = 0x400000,DDCAPS_ALPHA = 0x800000,DDCAPS_COLORKEYHWASSIST = 0x1000000,DDCAPS_NOHARDWARE = 0x2000000,DDCAPS_BLTCOLORFILL = 0x4000000,DDCAPS_BANKSWITCHED = 0x8000000,DDCAPS_BLTDEPTHFILL = 0x10000000,DDCAPS_CANCLIP = 0x20000000,DDCAPS_CANCLIPSTRETCHED = 0x40000000,DDCAPS_CANBLTSYSMEM = 0x80000000,};
enum MACRO_DDCKEY {DDCKEY_COLORSPACE = 0x1,DDCKEY_DESTBLT = 0x2,DDCKEY_DESTOVERLAY = 0x4,DDCKEY_SRCBLT = 0x8,DDCKEY_SRCOVERLAY = 0x10,};
enum MACRO_DDENUM {DDENUM_ATTACHEDSECONDARYDEVICES = 0x1,DDENUM_DETACHEDSECONDARYDEVICES = 0x2,DDENUM_NONDISPLAYDEVICES = 0x4,};
enum MACRO_DDFLIP {DDFLIP_WAIT = 0x1,DDFLIP_EVEN = 0x2,DDFLIP_ODD = 0x4,};
enum MACRO_DDLOCK {DDLOCK_SURFACEMEMORYPTR = 0x0,DDLOCK_WAIT = 0x1,DDLOCK_EVENT = 0x2,DDLOCK_READONLY = 0x10,DDLOCK_WRITEONLY = 0x20,DDLOCK_NOSYSLOCK = 0x800,};
enum MACRO_DDOVER {DDOVER_ALPHADEST = 0x1,DDOVER_ALPHADESTCONSTOVERRIDE = 0x2,DDOVER_ALPHADESTNEG = 0x4,DDOVER_ALPHADESTSURFACEOVERRIDE = 0x8,DDOVER_ALPHAEDGEBLEND = 0x10,DDOVER_ALPHASRC = 0x20,DDOVER_ALPHASRCCONSTOVERRIDE = 0x40,DDOVER_ALPHASRCNEG = 0x80,DDOVER_ALPHASRCSURFACEOVERRIDE = 0x100,DDOVER_HIDE = 0x200,DDOVER_KEYDEST = 0x400,DDOVER_KEYDESTOVERRIDE = 0x800,DDOVER_KEYSRC = 0x1000,DDOVER_KEYSRCOVERRIDE = 0x2000,DDOVER_SHOW = 0x4000,DDOVER_ADDDIRTYRECT = 0x8000,DDOVER_REFRESHDIRTYRECTS = 0x10000,DDOVER_REFRESHALL = 0x20000,DDOVER_DDFX = 0x80000,DDOVER_AUTOFLIP = 0x100000,DDOVER_BOB = 0x200000,DDOVER_OVERRIDEBOBWEAVE = 0x400000,DDOVER_INTERLEAVED = 0x800000,DDOVER_BOBHARDWARE = 0x1000000,};
enum MACRO_DDVPFX {DDVPFX_CROPTOPDATA = 0x1,DDVPFX_CROPX = 0x2,DDVPFX_CROPY = 0x4,DDVPFX_INTERLEAVE = 0x8,DDVPFX_MIRRORLEFTRIGHT = 0x10,DDVPFX_MIRRORUPDOWN = 0x20,DDVPFX_PRESHRINKX = 0x40,DDVPFX_PRESHRINKY = 0x80,DDVPFX_PRESHRINKXB = 0x100,DDVPFX_PRESHRINKYB = 0x200,DDVPFX_PRESHRINKXS = 0x400,DDVPFX_PRESHRINKYS = 0x800,DDVPFX_PRESTRETCHX = 0x1000,DDVPFX_PRESTRETCHY = 0x2000,DDVPFX_PRESTRETCHXN = 0x4000,DDVPFX_PRESTRETCHYN = 0x8000,DDVPFX_VBICONVERT = 0x10000,DDVPFX_VBINOSCALE = 0x20000,DDVPFX_IGNOREVBIXCROP = 0x40000,DDVPFX_VBINOINTERLEAVE = 0x80000,};
enum MACRO_DDVPSQ {DDVPSQ_NOSIGNAL = 0x1,DDVPSQ_SIGNALOK = 0x2,};
enum MACRO_DD_ROP {DD_ROP_SPACE = 8,};
enum MACRO_DEINIT {DEINIT_NORMAL = 0x1,DEINIT_HURRY = 0x80000000,};
enum MACRO_DELETE {DELETE = 0x10000,};
enum MACRO_DELFLG {DELFLG_IN_USE = 0x1,DELFLG_IN_USE1 = 0x10000,};
enum MACRO_DEMAND {DEMAND_UPDATE_SERVICES = 0x8,};
enum MACRO_DEVICE {DEVICE_NOTIFY_WINDOW_HANDLE = 0x0,};
enum MACRO_DEVLEN {DEVLEN = 80,};
enum MACRO_DIALOG {DIALOG_MODAL = 0x1,DIALOG_SDI = 0x2,DIALOG_OPTIONS = 0x4,};
enum MACRO_DIEDFL {DIEDFL_ALLDEVICES = 0x0,DIEDFL_ATTACHEDONLY = 0x1,DIEDFL_FORCEFEEDBACK = 0x100,};
enum MACRO_DIEGES {DIEGES_PLAYING = 0x1,DIEGES_EMULATED = 0x2,};
enum MACRO_DIENUM {DIENUM_STOP = 0,DIENUM_CONTINUE = 1,};
enum MACRO_DIGCDP {DIGCDP_FLAG_BASIC = 0x1,DIGCDP_FLAG_ADVANCED = 0x2,};
enum MACRO_DIGFFS {DIGFFS_EMPTY = 0x1,DIGFFS_STOPPED = 0x2,DIGFFS_PAUSED = 0x4,DIGFFS_ACTUATORSON = 0x10,DIGFFS_ACTUATORSOFF = 0x20,DIGFFS_POWERON = 0x40,DIGFFS_POWEROFF = 0x80,DIGFFS_SAFETYSWITCHON = 0x100,DIGFFS_SAFETYSWITCHOFF = 0x200,DIGFFS_USERFFSWITCHON = 0x400,DIGFFS_USERFFSWITCHOFF = 0x800,DIGFFS_DEVICELOST = 0x80000000,};
enum MACRO_DIPROP {DIPROP_BUFFERSIZE = 1,DIPROP_AXISMODE = 2,};
enum MACRO_DISFFC {DISFFC_RESET = 0x1,DISFFC_STOPALL = 0x2,DISFFC_PAUSE = 0x4,DISFFC_CONTINUE = 0x8,DISFFC_SETACTUATORSON = 0x10,DISFFC_SETACTUATORSOFF = 0x20,};
enum MACRO_DISPID {DISPID_UNKNOWN = -1,DISPID_VALUE = 0,DISPID_PROPERTYPUT = -3,DISPID_NEWENUM = -4,DISPID_EVALUATE = -5,DISPID_CONSTRUCTOR = -6,DISPID_DESTRUCTOR = -7,DISPID_COLLECT = -8,};
enum MACRO_DLLVER {DLLVER_PLATFORM_WINDOWS = 0x1,DLLVER_PLATFORM_NT = 0x2,};
enum MACRO_DMBASE {DMBASE = 550,};
enum MACRO_DMLERR {DMLERR_NO_ERROR = 0,DMLERR_FIRST = 16384,DMLERR_ADVACKTIMEOUT = 16384,DMLERR_BUSY = 16385,DMLERR_DATAACKTIMEOUT = 16386,DMLERR_DLL_NOT_INITIALIZED = 16387,DMLERR_DLL_USAGE = 16388,DMLERR_EXECACKTIMEOUT = 16389,DMLERR_INVALIDPARAMETER = 16390,DMLERR_LOW_MEMORY = 16391,DMLERR_MEMORY_ERROR = 16392,DMLERR_NOTPROCESSED = 16393,DMLERR_NO_CONV_ESTABLISHED = 16394,DMLERR_POKEACKTIMEOUT = 16395,DMLERR_POSTMSG_FAILED = 16396,DMLERR_REENTRANCY = 16397,DMLERR_SERVER_DIED = 16398,DMLERR_SYS_ERROR = 16399,DMLERR_UNADVACKTIMEOUT = 16400,DMLERR_UNFOUND_QUEUE_ID = 16401,DMLERR_LAST = 16401,};
enum MACRO_DOMAIN {DOMAIN_USER_RID_ADMIN = 0x1F4,DOMAIN_USER_RID_GUEST = 0x1F5,DOMAIN_USER_RID_KRBTGT = 0x1F6,DOMAIN_GROUP_RID_ADMINS = 0x200,DOMAIN_GROUP_RID_USERS = 0x201,DOMAIN_GROUP_RID_GUESTS = 0x202,DOMAIN_GROUP_RID_COMPUTERS = 0x203,DOMAIN_GROUP_RID_CONTROLLERS = 0x204,DOMAIN_GROUP_RID_CERT_ADMINS = 0x205,DOMAIN_GROUP_RID_SCHEMA_ADMINS = 0x206,DOMAIN_ALIAS_RID_ADMINS = 0x220,DOMAIN_ALIAS_RID_USERS = 0x221,DOMAIN_ALIAS_RID_GUESTS = 0x222,DOMAIN_ALIAS_RID_POWER_USERS = 0x223,DOMAIN_ALIAS_RID_ACCOUNT_OPS = 0x224,DOMAIN_ALIAS_RID_SYSTEM_OPS = 0x225,DOMAIN_ALIAS_RID_PRINT_OPS = 0x226,DOMAIN_ALIAS_RID_BACKUP_OPS = 0x227,DOMAIN_ALIAS_RID_REPLICATOR = 0x228,};
enum MACRO_DOUBLE {DOUBLE_CLICK = 0x2,};
enum MACRO_DO_NOT {DO_NOT_SEND_TO_ORIGINATOR = 1,};
enum MACRO_DPCAPS {DPCAPS_ISHOST = 0x2,DPCAPS_GROUPOPTIMIZED = 0x8,DPCAPS_KEEPALIVEOPTIMIZED = 0x10,DPCAPS_GUARANTEEDOPTIMIZED = 0x20,DPCAPS_GUARANTEEDSUPPORTED = 0x40,DPCAPS_SIGNINGSUPPORTED = 0x80,DPCAPS_ENCRYPTIONSUPPORTED = 0x100,};
enum MACRO_DPLMSG {DPLMSG_SYSTEM = 0x1,DPLMSG_STANDARD = 0x2,};
enum MACRO_DPLSYS {DPLSYS_CONNECTIONSETTINGSREAD = 0x1,DPLSYS_DPLAYCONNECTFAILED = 0x2,DPLSYS_DPLAYCONNECTSUCCEEDED = 0x3,DPLSYS_APPTERMINATED = 0x4,DPLSYS_SETPROPERTY = 0x5,DPLSYS_SETPROPERTYRESPONSE = 0x6,DPLSYS_GETPROPERTY = 0x7,DPLSYS_GETPROPERTYRESPONSE = 0x8,};
enum MACRO_DPOPEN {DPOPEN_JOIN = 0x1,DPOPEN_CREATE = 0x2,DPOPEN_RETURNSTATUS = 0x80,};
enum MACRO_DPSEND {DPSEND_GUARANTEED = 0x1,DPSEND_HIGHPRIORITY = 0x2,DPSEND_OPENSTREAM = 0x8,DPSEND_CLOSESTREAM = 0x10,DPSEND_SIGNED = 0x20,DPSEND_ENCRYPTED = 0x40,DPSEND_ASYNC = 0x200,};
enum MACRO_DRVCNF {DRVCNF_CANCEL = 0x0,DRVCNF_OK = 0x1,DRVCNF_RESTART = 0x2,};
enum MACRO_DSBPAN {DSBPAN_LEFT = -10000,DSBPAN_CENTER = 0,DSBPAN_RIGHT = 10000,};
enum MACRO_DSCAPS {DSCAPS_PRIMARYMONO = 0x1,DSCAPS_PRIMARYSTEREO = 0x2,DSCAPS_PRIMARY8BIT = 0x4,DSCAPS_PRIMARY16BIT = 0x8,DSCAPS_CONTINUOUSRATE = 0x10,DSCAPS_EMULDRIVER = 0x20,DSCAPS_CERTIFIED = 0x40,DSCAPS_SECONDARYMONO = 0x100,DSCAPS_SECONDARYSTEREO = 0x200,DSCAPS_SECONDARY8BIT = 0x400,DSCAPS_SECONDARY16BIT = 0x800,};
enum MACRO_DSETUP {DSETUP_DDRAWDRV = 0x8,DSETUP_DSOUNDDRV = 0x10,DSETUP_DXCORE = 0x10000,DSETUP_DIRECTX = 0x10018,DSETUP_TESTINSTALL = 0x20000,DSETUP_DDRAW = 0x1,DSETUP_DSOUND = 0x2,DSETUP_DPLAY = 0x4,DSETUP_DPLAYSP = 0x20,DSETUP_DVIDEO = 0x40,DSETUP_D3D = 0x200,DSETUP_DINPUT = 0x800,DSETUP_DIRECTXSETUP = 0x1000,DSETUP_NOUI = 0x2000,DSETUP_PROMPTFORDRIVERS = 0x10000000,DSETUP_RESTOREDRIVERS = 0x20000000,DSETUP_CB_MSG_NOMESSAGE = 0x0,DSETUP_CB_MSG_CANTINSTALL_UNKNOWNOS = 0x1,DSETUP_CB_MSG_CANTINSTALL_NT = 0x2,DSETUP_CB_MSG_CANTINSTALL_BETA = 0x3,DSETUP_CB_MSG_CANTINSTALL_NOTWIN32 = 0x4,DSETUP_CB_MSG_CANTINSTALL_WRONGLANGUAGE = 0x5,DSETUP_CB_MSG_CANTINSTALL_WRONGPLATFORM = 0x6,DSETUP_CB_MSG_PREINSTALL_NT = 0x7,DSETUP_CB_MSG_NOTPREINSTALLEDONNT = 0x8,DSETUP_CB_MSG_SETUP_INIT_FAILED = 0x9,DSETUP_CB_MSG_INTERNAL_ERROR = 0xA,DSETUP_CB_MSG_CHECK_DRIVER_UPGRADE = 0xB,DSETUP_CB_MSG_OUTOFDISKSPACE = 0xC,DSETUP_CB_MSG_BEGIN_INSTALL = 0xD,DSETUP_CB_MSG_BEGIN_INSTALL_RUNTIME = 0xE,DSETUP_CB_MSG_BEGIN_INSTALL_DRIVERS = 0xF,DSETUP_CB_MSG_BEGIN_RESTORE_DRIVERS = 0x10,DSETUP_CB_MSG_FILECOPYERROR = 0x11,DSETUP_CB_UPGRADE_TYPE_MASK = 0xF,DSETUP_CB_UPGRADE_KEEP = 0x1,DSETUP_CB_UPGRADE_SAFE = 0x2,DSETUP_CB_UPGRADE_FORCE = 0x4,DSETUP_CB_UPGRADE_UNKNOWN = 0x8,DSETUP_CB_UPGRADE_HASWARNINGS = 0x100,DSETUP_CB_UPGRADE_CANTBACKUP = 0x200,DSETUP_CB_UPGRADE_DEVICE_ACTIVE = 0x800,DSETUP_CB_UPGRADE_DEVICE_DISPLAY = 0x1000,DSETUP_CB_UPGRADE_DEVICE_MEDIA = 0x2000,};
enum MACRO_DT_TOP {DT_TOP = 0x0,DT_LEFT = 0x0,DT_CENTER = 0x1,DT_RIGHT = 0x2,DT_VCENTER = 0x4,DT_BOTTOM = 0x8,DT_WORDBREAK = 0x10,DT_SINGLELINE = 0x20,DT_EXPANDTABS = 0x40,DT_TABSTOP = 0x80,DT_NOCLIP = 0x100,DT_EXTERNALLEADING = 0x200,DT_CALCRECT = 0x400,DT_NOPREFIX = 0x800,DT_INTERNAL = 0x1000,DT_EDITCONTROL = 0x2000,DT_PATH_ELLIPSIS = 0x4000,DT_END_ELLIPSIS = 0x8000,DT_MODIFYSTRING = 0x10000,DT_RTLREADING = 0x20000,DT_WORD_ELLIPSIS = 0x40000,};
enum MACRO_DV_ERR {DV_ERR_OK = 0,DV_ERR_BASE = 1,DV_ERR_NONSPECIFIC = 1,DV_ERR_BADFORMAT = 2,DV_ERR_STILLPLAYING = 3,DV_ERR_UNPREPARED = 4,DV_ERR_SYNC = 5,DV_ERR_TOOMANYCHANNELS = 6,DV_ERR_NOTDETECTED = 7,DV_ERR_BADINSTALL = 8,DV_ERR_CREATEPALETTE = 9,DV_ERR_SIZEFIELD = 10,DV_ERR_PARAM1 = 11,DV_ERR_PARAM2 = 12,DV_ERR_CONFIG1 = 13,DV_ERR_CONFIG2 = 14,DV_ERR_FLAGS = 15,DV_ERR_13 = 16,DV_ERR_NOTSUPPORTED = 17,DV_ERR_NOMEM = 18,DV_ERR_ALLOCATED = 19,DV_ERR_BADDEVICEID = 20,DV_ERR_INVALHANDLE = 21,DV_ERR_BADERRNUM = 22,DV_ERR_NO_BUFFERS = 23,DV_ERR_MEM_CONFLICT = 24,DV_ERR_IO_CONFLICT = 25,DV_ERR_DMA_CONFLICT = 26,DV_ERR_INT_CONFLICT = 27,DV_ERR_PROTECT_ONLY = 28,DV_ERR_LASTERROR = 28,DV_ERR_USER_MSG = 1001,DV_VM_OPEN = 976,DV_VM_CLOSE = 977,DV_VM_DATA = 978,DV_VM_ERROR = 979,};
enum MACRO_EC_EDK {EC_EDK_E_FAIL = 11,EC_EDK_E_OUTOFMEMORY = 12,EC_EDK_E_INVALIDARG = 13,EC_EDK_E_NOTIMPL = 14,EC_EDK_E_NOINTERFACE = 15,EC_EDK_E_ACCESSDENIED = 16,EC_EDK_E_UNKNOWN = 20,};
enum MACRO_EECBCF {EECBCF_GETNAME = 0x1,EECBCF_HIDENEW = 0x2,EECBCF_PREVENTROOT = 0x4,};
enum MACRO_EECBGV {EECBGV_GETBUILDVERSION = 0x1,EECBGV_GETACTUALVERSION = 0x2,EECBGV_GETVIRTUALVERSION = 0x4,EECBGV_BUILDVERSION_MAJOR = 0xD0000,EECBGV_BUILDVERSION_MAJOR_MASK = 0xFFFF0000,EECBGV_BUILDVERSION_MINOR_MASK = 0xFFFF,EECBGV_MSEXCHANGE_WIN31 = 0x1010000,EECBGV_MSEXCHANGE_WIN95 = 0x1020000,EECBGV_MSEXCHANGE_WINNT = 0x1030000,EECBGV_MSEXCHANGE_MAC = 0x1040000,EECBGV_VERSION_PRODUCT_MASK = 0xFF000000,EECBGV_VERSION_PLATFORM_MASK = 0xFF0000,EECBGV_VERSION_MAJOR_MASK = 0xFF00,EECBGV_VERSION_MINOR_MASK = 0xFF,};
enum MACRO_EECQHT {EECQHT_STATUS = 0x1,EECQHT_TOOLTIP = 0x2,};
enum MACRO_EETBID {EETBID_STANDARD = 0x1,};
enum MACRO_ENABLE {ENABLE_PROCESSED_INPUT = 0x1,ENABLE_LINE_INPUT = 0x2,ENABLE_ECHO_INPUT = 0x4,ENABLE_WINDOW_INPUT = 0x8,ENABLE_MOUSE_INPUT = 0x10,ENABLE_PROCESSED_OUTPUT = 0x1,ENABLE_WRAP_AT_EOL_OUTPUT = 0x2,};
enum MACRO_ENDDOC {ENDDOC = 11,};
enum MACRO_ERRACT {ERRACT_RETRY = 1,ERRACT_DLYRET = 2,ERRACT_USER = 3,ERRACT_ABORT = 4,ERRACT_PANIC = 5,ERRACT_IGNORE = 6,ERRACT_INTRET = 7,};
enum MACRO_ERRDOM {ERRDOM_DB = 0x10000,ERRDOM_FILE = 0x20000,ERRDOM_MEMORY = 0x40000,ERRDOM_TIMING = 0x80000,ERRDOM_STATE = 0xF0000,ERRDOM_INSTALL = 0x100000,ERRDOM_OTHER = 0xFF0000,};
enum MACRO_ERRLOC {ERRLOC_UNK = 1,ERRLOC_DISK = 2,ERRLOC_NET = 3,ERRLOC_SERDEV = 4,ERRLOC_MEM = 5,};
enum MACRO_ERRLOG {ERRLOG_BASE = 3100,};
enum MACRO_ERR_NO {ERR_NO_DISK_SPACE = 0xE0000001,ERR_DISK_CREATE_ERROR = 0xE0000002,ERR_DISK_OPEN_ERROR = 0xE0000003,ERR_DISK_READ_ERROR = 0xE0000004,ERR_DISK_WRITE_ERROR = 0xE0000005,ERR_SYSTEM_ERROR = 0xE0000006,ERR_ABORT_SEARCH = 0xE0000007,ERR_INVALID_TIMESTAMP = 0xE0000008,ERR_INVALID_SOURCE_NAME = 0xE0000009,ERR_FILE_MAP_FAILED = 0xE000000A,ERR_INVALID_FILE_TYPE = 0xE000000B,ERR_DAMAGED_FILE = 0xE000000C,ERR_FUTURE_VERSION = 0xE000000D,};
enum MACRO_EXCOMM {EXCOMM = 9,};
enum MACRO_EXINFO {EXINFO = 1,EXUSER = 2,};
enum MACRO_EXTIME {EXTIME = 6,};
enum MACRO_E_PROP {E_PROP_SET_UNSUPPORTED = 0x80070492,E_PROP_ID_UNSUPPORTED = 0x80070490,};
enum MACRO_FILEOP {FILEOP_COPY = 0,FILEOP_RENAME = 1,FILEOP_DELETE = 2,FILEOP_ABORT = 0,FILEOP_DOIT = 1,FILEOP_SKIP = 2,FILEOP_RETRY = 1,FILEOP_NEWPATH = 4,};
enum MACRO_FILTER {FILTER_E_TOO_BIG = 0x80041730,FILTER_S_PARTIAL_CONTENTSCAN_IMMEDIATE = 0x41731,FILTER_S_FULL_CONTENTSCAN_IMMEDIATE = 0x41732,FILTER_S_CONTENTSCAN_DELAYED = 0x41733,FILTER_E_CONTENTINDEXCORRUPT = 0xC0041734,FILTER_S_DISK_FULL = 0x41735,FILTER_E_ALREADY_OPEN = 0x80041736,FILTER_E_UNREACHABLE = 0x80041737,FILTER_E_IN_USE = 0x80041738,FILTER_E_NOT_OPEN = 0x80041739,FILTER_S_NO_PROPSETS = 0x4173A,FILTER_E_NO_SUCH_PROPERTY = 0x8004173B,FILTER_S_NO_SECURITY_DESCRIPTOR = 0x4173C,};
enum MACRO_FLASHW {FLASHW_STOP = 0,FLASHW_CAPTION = 1,FLASHW_TRAY = 2,FLASHW_ALL = 3,FLASHW_TIMER = 4,FLASHW_TIMERNOFG = 12,};
enum MACRO_FMMENU {FMMENU_FIRST = 1,FMMENU_LAST = 99,};
enum MACRO_FOLDER {FOLDER_ROOT = 0x0,FOLDER_GENERIC = 0x1,FOLDER_SEARCH = 0x2,};
enum MACRO_FORMAT {FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100,FORMAT_MESSAGE_IGNORE_INSERTS = 0x200,FORMAT_MESSAGE_FROM_STRING = 0x400,FORMAT_MESSAGE_FROM_HMODULE = 0x800,FORMAT_MESSAGE_FROM_SYSTEM = 0x1000,FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x2000,FORMAT_MESSAGE_MAX_WIDTH_MASK = 0xFF,};
enum MACRO_FOURCC {FOURCC_RDSP = 1347634258,};
enum MACRO_FTPWPP {FTPWPP_ERROR_FIRST = 0x40042300,FTPWPP_ERROR_INETOPEN_FAILED = 0xC0042301,FTPWPP_ERROR_AUTHENTICATION_FAILED = 0xC0042302,FTPWPP_ERROR_LAST = 0x400423FF,};
enum MACRO_F_SITE {F_SITE = 1,F_MACHINE = 2,F_GROUP = 3,F_DOMAIN = 4,F_SYSTEMJOB = 5,F_INSTALLJOB = 7,F_SRVINSTALLJOB = 8,F_REMPKGJOB = 9,F_PACKAGE = 10,F_WCL = 11,F_PROGITEM = 12,F_INVENTORY = 13,F_MACHINEGROUP = 14,F_SITEGROUP = 15,};
enum MACRO_GLOBAL {GLOBAL_ALL = 0,GLOBAL_LRU = 1,GLOBAL_FREE = 2,};
enum MACRO_GOPHER {GOPHER_TYPE_TEXT_FILE = 0x1,GOPHER_TYPE_DIRECTORY = 0x2,GOPHER_TYPE_CSO = 0x4,GOPHER_TYPE_ERROR = 0x8,GOPHER_TYPE_MAC_BINHEX = 0x10,GOPHER_TYPE_DOS_ARCHIVE = 0x20,GOPHER_TYPE_UNIX_UUENCODED = 0x40,GOPHER_TYPE_INDEX_SERVER = 0x80,GOPHER_TYPE_TELNET = 0x100,GOPHER_TYPE_BINARY = 0x200,GOPHER_TYPE_REDUNDANT = 0x400,GOPHER_TYPE_TN3270 = 0x800,GOPHER_TYPE_GIF = 0x1000,GOPHER_TYPE_IMAGE = 0x2000,GOPHER_TYPE_BITMAP = 0x4000,GOPHER_TYPE_MOVIE = 0x8000,GOPHER_TYPE_SOUND = 0x10000,GOPHER_TYPE_HTML = 0x20000,GOPHER_TYPE_PDF = 0x40000,GOPHER_TYPE_CALENDAR = 0x80000,GOPHER_TYPE_INLINE = 0x100000,GOPHER_TYPE_UNKNOWN = 0x20000000,GOPHER_TYPE_ASK = 0x40000000,GOPHER_TYPE_GOPHER_PLUS = 0x80000000,GOPHER_TYPE_FILE_MASK = 0x1FF271,};
enum MACRO_HANDLE {HANDLE_FLAG_INHERIT = 0x1,HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x2,};
enum MACRO_HANGUP {HANGUP_PENDING = 0x4,HANGUP_COMPLETE = 0x5,};
enum MACRO_HKCOMB {HKCOMB_NONE = 0x1,HKCOMB_S = 0x2,HKCOMB_C = 0x4,HKCOMB_A = 0x8,HKCOMB_SC = 0x10,HKCOMB_SA = 0x20,HKCOMB_CA = 0x40,HKCOMB_SCA = 0x80,};
enum MACRO_HSHELL {HSHELL_WINDOWCREATED = 1,HSHELL_WINDOWDESTROYED = 2,HSHELL_ACTIVATESHELLWINDOW = 3,HSHELL_WINDOWACTIVATED = 4,HSHELL_GETMINRECT = 5,HSHELL_REDRAW = 6,HSHELL_TASKMAN = 7,HSHELL_LANGUAGE = 8,HSHELL_ACCESSIBILITYSTATE = 11,};
enum MACRO_HTHELP {HTHELP = 21,};
enum MACRO_HTLEFT {HTLEFT = 10,};
enum MACRO_HTMENU {HTMENU = 5,};
enum MACRO_HTSIZE {HTSIZE = 4,};
enum MACRO_HTZOOM {HTZOOM = 9,};
enum MACRO_ICDRAW {ICDRAW_QUERY = 0x1,ICDRAW_FULLSCREEN = 0x2,ICDRAW_HDC = 0x4,ICDRAW_ANIMATE = 0x8,ICDRAW_CONTINUE = 0x10,ICDRAW_MEMORYDC = 0x20,ICDRAW_UPDATING = 0x40,ICDRAW_RENDER = 0x80,ICDRAW_BUFFER = 0x100,ICDRAW_HURRYUP = 0x80000000,ICDRAW_UPDATE = 0x40000000,ICDRAW_PREROLL = 0x20000000,ICDRAW_NULLFRAME = 0x10000000,ICDRAW_NOTKEYFRAME = 0x8000000,};
enum MACRO_ICMODE {ICMODE_COMPRESS = 1,ICMODE_DECOMPRESS = 2,ICMODE_FASTDECOMPRESS = 3,ICMODE_QUERY = 4,ICMODE_FASTCOMPRESS = 5,ICMODE_DRAW = 8,};
enum MACRO_ICTYPE {ICTYPE_VIDEO = 1667524982,ICTYPE_AUDIO = 1667528033,};
enum MACRO_IDFEXT {IDFEXT_ExchangeResolvesConflict = 0,};
enum MACRO_IDHELP {IDHELP = 9,};
enum MACRO_ID_APP {ID_APP = 100,};
enum MACRO_IEMODE {IEMODE_READY = 0,IEMODE_ERASE = 1,IEMODE_LASSO = 2,};
enum MACRO_IEPORT {EXTEND_IEPORT = 2,RETRACT_IEPORT = 3,};
enum MACRO_IGIMIF {IGIMIF_RIGHTMENU = 0x1,};
enum MACRO_IGIMII {IGIMII_CMODE = 0x1,IGIMII_SMODE = 0x2,IGIMII_CONFIGURE = 0x4,IGIMII_TOOLS = 0x8,IGIMII_HELP = 0x10,IGIMII_OTHER = 0x20,IGIMII_INPUTTOOLS = 0x40,};
enum MACRO_IGNORE {IGNORE = 0,INFINITE = -1,};
enum MACRO_IIS_MD {IIS_MD_UT_END_RESERVED = 2000,IIS_MD_ID_BEGIN_RESERVED = 1,IIS_MD_ID_END_RESERVED = 32767,};
enum MACRO_IMEVER {IMEVER_0310 = 0x3000A,IMEVER_0400 = 0x40000,};
enum MACRO_IME_RS {IME_RS_ERROR = 0x1,IME_RS_NOIME = 0x2,IME_RS_TOOLONG = 0x5,IME_RS_ILLEGAL = 0x6,IME_RS_NOTFOUND = 0x7,IME_RS_NOROOM = 0xA,IME_RS_DISKERROR = 0xE,IME_RS_INVALID = 0x11,IME_RS_NEST = 0x12,IME_RS_SYSTEMMODAL = 0x13,};
enum MACRO_IMGCHG {IMGCHG_SIZE = 0x1,IMGCHG_VIEW = 0x2,IMGCHG_COMPLETE = 0x4,IMGCHG_ANIMATE = 0x8,IMGCHG_MASK = 0xF,};
enum MACRO_IMPORT {IMPORT_OBJECT_HDR_SIG2 = 0xFFFF,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_INET_E {INET_E_DEFAULT_ACTION = -2146697199,};
enum MACRO_INGRES {INGRES = 10,};
enum MACRO_INTENT {INTENT_PERCEPTUAL = 0,INTENT_RELATIVE_COLORIMETRIC = 1,INTENT_SATURATION = 2,INTENT_ABSOLUTE_COLORIMETRIC = 3,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,};
enum MACRO_JOBPRI {JOBPRI_HIGH = 1,JOBPRI_MEDIUM = 2,JOBPRI_LOW = 3,};
enum MACRO_JOBRPT {JOBRPT_NEVER = 1,JOBRPT_DAILY = 2,JOBRPT_WEEKLY = 3,JOBRPT_BIWEEKLY = 4,JOBRPT_MONTHLY = 5,};
enum MACRO_JOBTGT {JOBTGT_NOSITELIMIT = 0,JOBTGT_SITEGROUP = 1,JOBTGT_SITE = 2,JOBTGT_NOSUBSITES = 0,JOBTGT_INCLUDESUBSITES = 1,};
enum MACRO_JOYERR {JOYERR_NOERROR = 0,JOYERR_PARMS = 165,JOYERR_NOCANDO = 166,JOYERR_UNPLUGGED = 167,};
enum MACRO_JPEG_Y {JPEG_Y = 1,JPEG_YCbCr = 2,JPEG_RGB = 3,};
enum MACRO_KSRATE {KSRATE_NOPRESENTATIONSTART = 0x1,KSRATE_NOPRESENTATIONDURATION = 0x2,};
enum MACRO_LC_ALL {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MIN = 0,LC_MAX = 5,};
enum MACRO_LENGTH {MAX_ADDR_LENGTH = 6,ETHERNET_HEADER_LENGTH = 14,ETHERNET_DATA_LENGTH = 1500,ETHERNET_FRAME_LENGTH = 1514,};
enum MACRO_LISTEN {LISTEN_OUTSTANDING = 0x1,};
enum MACRO_LOCALE {LOCALE_SYSTEM_DEFAULT = 2048,LOCALE_USER_DEFAULT = 1024,LOCALE_NEUTRAL = 0,};
enum MACRO_LOGOFF {ENDSESSION_LOGOFF = 0x80000000,EWX_LOGOFF = 0x0,};
enum MACRO_LVBKIF {LVBKIF_SOURCE_NONE = 0x0,LVBKIF_SOURCE_HBITMAP = 0x1,LVBKIF_SOURCE_URL = 0x2,LVBKIF_SOURCE_MASK = 0x3,LVBKIF_STYLE_NORMAL = 0x0,LVBKIF_STYLE_TILE = 0x10,LVBKIF_STYLE_MASK = 0x10,};
enum MACRO_LVCFMT {LVCFMT_LEFT = 0x0,LVCFMT_RIGHT = 0x1,LVCFMT_CENTER = 0x2,LVCFMT_JUSTIFYMASK = 0x3,LVCFMT_IMAGE = 0x800,LVCFMT_BITMAP_ON_RIGHT = 0x1000,LVCFMT_COL_HAS_IMAGES = 0x8000,};
enum MACRO_LVSICF {LVSICF_NOINVALIDATEALL = 0x1,LVSICF_NOSCROLL = 0x2,};
enum MACRO_LVS_EX {LVS_EX_GRIDLINES = 0x1,LVS_EX_SUBITEMIMAGES = 0x2,LVS_EX_CHECKBOXES = 0x4,LVS_EX_TRACKSELECT = 0x8,LVS_EX_HEADERDRAGDROP = 0x10,LVS_EX_FULLROWSELECT = 0x20,LVS_EX_ONECLICKACTIVATE = 0x40,LVS_EX_TWOCLICKACTIVATE = 0x80,LVS_EX_FLATSB = 0x100,LVS_EX_REGIONAL = 0x200,LVS_EX_INFOTIP = 0x400,LVS_EX_UNDERLINEHOT = 0x800,LVS_EX_UNDERLINECOLD = 0x1000,LVS_EX_MULTIWORKAREAS = 0x2000,};
enum MACRO_MAPI_E {MAPI_E_CALL_FAILED = -2147467259,MAPI_E_NOT_ENOUGH_MEMORY = -2147024882,MAPI_E_INVALID_PARAMETER = -2147024809,MAPI_E_INTERFACE_NOT_SUPPORTED = -2147467262,MAPI_E_NO_ACCESS = -2147024891,MAPI_E_NO_SUPPORT = -2147221246,MAPI_E_BAD_CHARWIDTH = -2147221245,MAPI_E_STRING_TOO_LONG = -2147221243,MAPI_E_UNKNOWN_FLAGS = -2147221242,MAPI_E_INVALID_ENTRYID = -2147221241,MAPI_E_INVALID_OBJECT = -2147221240,MAPI_E_OBJECT_CHANGED = -2147221239,MAPI_E_OBJECT_DELETED = -2147221238,MAPI_E_BUSY = -2147221237,MAPI_E_NOT_ENOUGH_DISK = -2147221235,MAPI_E_NOT_ENOUGH_RESOURCES = -2147221234,MAPI_E_NOT_FOUND = -2147221233,MAPI_E_VERSION = -2147221232,MAPI_E_LOGON_FAILED = -2147221231,MAPI_E_SESSION_LIMIT = -2147221230,MAPI_E_USER_CANCEL = -2147221229,MAPI_E_UNABLE_TO_ABORT = -2147221228,MAPI_E_NETWORK_ERROR = -2147221227,MAPI_E_DISK_ERROR = -2147221226,MAPI_E_TOO_COMPLEX = -2147221225,MAPI_E_BAD_COLUMN = -2147221224,MAPI_E_EXTENDED_ERROR = -2147221223,MAPI_E_COMPUTED = -2147221222,MAPI_E_CORRUPT_DATA = -2147221221,MAPI_E_UNCONFIGURED = -2147221220,MAPI_E_FAILONEPROVIDER = -2147221219,MAPI_E_UNKNOWN_CPID = -2147221218,MAPI_E_UNKNOWN_LCID = -2147221217,MAPI_E_PASSWORD_CHANGE_REQUIRED = -2147221216,MAPI_E_PASSWORD_EXPIRED = -2147221215,MAPI_E_INVALID_WORKSTATION_ACCOUNT = -2147221214,MAPI_E_INVALID_ACCESS_TIME = -2147221213,MAPI_E_ACCOUNT_DISABLED = -2147221212,MAPI_E_END_OF_SESSION = -2147220992,MAPI_E_UNKNOWN_ENTRYID = -2147220991,MAPI_E_MISSING_REQUIRED_COLUMN = -2147220990,MAPI_W_NO_SERVICE = 262659,MAPI_E_BAD_VALUE = -2147220735,MAPI_E_INVALID_TYPE = -2147220734,MAPI_E_TYPE_NO_SUPPORT = -2147220733,MAPI_E_UNEXPECTED_TYPE = -2147220732,MAPI_E_TOO_BIG = -2147220731,MAPI_E_DECLINE_COPY = -2147220730,MAPI_E_UNEXPECTED_ID = -2147220729,MAPI_W_ERRORS_RETURNED = 263040,MAPI_E_UNABLE_TO_COMPLETE = -2147220480,MAPI_E_TIMEOUT = -2147220479,MAPI_E_TABLE_EMPTY = -2147220478,MAPI_E_TABLE_TOO_BIG = -2147220477,MAPI_E_INVALID_BOOKMARK = -2147220475,MAPI_W_POSITION_CHANGED = 263297,MAPI_W_APPROX_COUNT = 263298,MAPI_E_WAIT = -2147220224,MAPI_E_CANCEL = -2147220223,MAPI_E_NOT_ME = -2147220222,MAPI_W_CANCEL_MESSAGE = 263552,MAPI_E_CORRUPT_STORE = -2147219968,MAPI_E_NOT_IN_QUEUE = -2147219967,MAPI_E_NO_SUPPRESS = -2147219966,MAPI_E_COLLISION = -2147219964,MAPI_E_NOT_INITIALIZED = -2147219963,MAPI_E_NON_STANDARD = -2147219962,MAPI_E_NO_RECIPIENTS = -2147219961,MAPI_E_SUBMITTED = -2147219960,MAPI_E_HAS_FOLDERS = -2147219959,MAPI_E_HAS_MESSAGES = -2147219958,MAPI_E_FOLDER_CYCLE = -2147219957,MAPI_W_PARTIAL_COMPLETION = 263808,MAPI_E_AMBIGUOUS_RECIP = -2147219712,};
enum MACRO_MAXAPP {MAXAPP = 9,};
enum MACRO_MB_LEN {MB_LEN_MAX = 2,};
enum MACRO_MCIERR {MCIERR_INVALID_DEVICE_ID = 257,MCIERR_UNRECOGNIZED_KEYWORD = 259,MCIERR_UNRECOGNIZED_COMMAND = 261,MCIERR_HARDWARE = 262,MCIERR_INVALID_DEVICE_NAME = 263,MCIERR_OUT_OF_MEMORY = 264,MCIERR_DEVICE_OPEN = 265,MCIERR_CANNOT_LOAD_DRIVER = 266,MCIERR_MISSING_COMMAND_STRING = 267,MCIERR_PARAM_OVERFLOW = 268,MCIERR_MISSING_STRING_ARGUMENT = 269,MCIERR_BAD_INTEGER = 270,MCIERR_PARSER_INTERNAL = 271,MCIERR_DRIVER_INTERNAL = 272,MCIERR_MISSING_PARAMETER = 273,MCIERR_UNSUPPORTED_FUNCTION = 274,MCIERR_FILE_NOT_FOUND = 275,MCIERR_DEVICE_NOT_READY = 276,MCIERR_INTERNAL = 277,MCIERR_DRIVER = 278,MCIERR_CANNOT_USE_ALL = 279,MCIERR_MULTIPLE = 280,MCIERR_EXTENSION_NOT_FOUND = 281,MCIERR_OUTOFRANGE = 282,MCIERR_FLAGS_NOT_COMPATIBLE = 284,MCIERR_FILE_NOT_SAVED = 286,MCIERR_DEVICE_TYPE_REQUIRED = 287,MCIERR_DEVICE_LOCKED = 288,MCIERR_DUPLICATE_ALIAS = 289,MCIERR_BAD_CONSTANT = 290,MCIERR_MUST_USE_SHAREABLE = 291,MCIERR_MISSING_DEVICE_NAME = 292,MCIERR_BAD_TIME_FORMAT = 293,MCIERR_NO_CLOSING_QUOTE = 294,MCIERR_DUPLICATE_FLAGS = 295,MCIERR_INVALID_FILE = 296,MCIERR_NULL_PARAMETER_BLOCK = 297,MCIERR_UNNAMED_RESOURCE = 298,MCIERR_NEW_REQUIRES_ALIAS = 299,MCIERR_NOTIFY_ON_AUTO_OPEN = 300,MCIERR_NO_ELEMENT_ALLOWED = 301,MCIERR_NONAPPLICABLE_FUNCTION = 302,MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303,MCIERR_FILENAME_REQUIRED = 304,MCIERR_EXTRA_CHARACTERS = 305,MCIERR_DEVICE_NOT_INSTALLED = 306,MCIERR_GET_CD = 307,MCIERR_SET_CD = 308,MCIERR_SET_DRIVE = 309,MCIERR_DEVICE_LENGTH = 310,MCIERR_DEVICE_ORD_LENGTH = 311,MCIERR_NO_INTEGER = 312,MCIERR_WAVE_OUTPUTSINUSE = 320,MCIERR_WAVE_SETOUTPUTINUSE = 321,MCIERR_WAVE_INPUTSINUSE = 322,MCIERR_WAVE_SETINPUTINUSE = 323,MCIERR_WAVE_OUTPUTUNSPECIFIED = 324,MCIERR_WAVE_INPUTUNSPECIFIED = 325,MCIERR_WAVE_OUTPUTSUNSUITABLE = 326,MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327,MCIERR_WAVE_INPUTSUNSUITABLE = 328,MCIERR_WAVE_SETINPUTUNSUITABLE = 329,MCIERR_SEQ_DIV_INCOMPATIBLE = 336,MCIERR_SEQ_PORT_INUSE = 337,MCIERR_SEQ_PORT_NONEXISTENT = 338,MCIERR_SEQ_PORT_MAPNODEVICE = 339,MCIERR_SEQ_PORT_MISCERROR = 340,MCIERR_SEQ_TIMER = 341,MCIERR_SEQ_PORTUNSPECIFIED = 342,MCIERR_SEQ_NOMIDIPRESENT = 343,MCIERR_NO_WINDOW = 346,MCIERR_CREATEWINDOW = 347,MCIERR_FILE_READ = 348,MCIERR_FILE_WRITE = 349,MCIERR_NO_IDENTITY = 350,MCIERR_CUSTOM_DRIVER_BASE = 512,};
enum MACRO_MCIWND {MCIWND_START = -1,MCIWND_END = -2,};
enum MACRO_MCW_IC {MCW_IC = 262144,};
enum MACRO_MCW_PC {MCW_PC = 196608,};
enum MACRO_MCW_RC {MCW_RC = 768,};
enum MACRO_MDAXIS {MDAXIS_COLUMNS = 0x0,MDAXIS_ROWS = 0x1,MDAXIS_PAGES = 0x2,MDAXIS_SECTIONS = 0x3,MDAXIS_CHAPTERS = 0x4,MDAXIS_SLICERS = 0xFFFFFFFF,};
enum MACRO_MDMVOL {MDMVOL_LOW = 0x0,MDMVOL_MEDIUM = 0x1,MDMVOL_HIGH = 0x2,};
enum MACRO_MDPROP {MDPROP_MEMBER = 0x1,MDPROP_CELL = 0x2,};
enum MACRO_MD_ASP {MD_ASP_BUFFERINGON = 7000,MD_ASP_LOGERRORREQUESTS = 7001,MD_ASP_SCRIPTERRORSSENTTOBROWSER = 7002,MD_ASP_SCRIPTERRORMESSAGE = 7003,MD_ASP_SCRIPTFILECACHESIZE = 7004,MD_ASP_SCRIPTENGINECACHEMAX = 7005,MD_ASP_SCRIPTTIMEOUT = 7006,MD_ASP_SESSIONTIMEOUT = 7007,MD_ASP_ENABLEPARENTPATHS = 7008,MD_ASP_MEMFREEFACTOR = 7009,MD_ASP_MINUSEDBLOCKS = 7010,MD_ASP_ALLOWSESSIONSTATE = 7011,MD_ASP_SCRIPTLANGUAGE = 7012,MD_ASP_QUEUETIMEOUT = 7013,MD_ASP_ALLOWOUTOFPROCCOMPONENTS = 7014,MD_ASP_ALLOWOUTOFPROCCMPNTS = 7014,MD_ASP_EXCEPTIONCATCHENABLE = 7015,MD_ASP_CODEPAGE = 7016,MD_ASP_SCRIPTLANGUAGELIST = 7017,MD_ASP_ENABLESERVERDEBUG = 7018,MD_ASP_ENABLECLIENTDEBUG = 7019,MD_ASP_TRACKTHREADINGMODEL = 7020,MD_ASP_ID_LAST = 7020,};
enum MACRO_MD_LOG {MD_LOG_TYPE = 4000,MD_LOGFILE_DIRECTORY = 4001,MD_LOG_UNUSED1 = 4002,MD_LOGFILE_PERIOD = 4003,MD_LOGFILE_TRUNCATE_SIZE = 4004,MD_LOG_PLUGIN_MOD_ID = 4005,MD_LOG_PLUGIN_UI_ID = 4006,MD_LOGSQL_DATA_SOURCES = 4007,MD_LOGSQL_TABLE_NAME = 4008,MD_LOGSQL_USER_NAME = 4009,MD_LOGSQL_PASSWORD = 4010,MD_LOG_PLUGIN_ORDER = 4011,MD_LOG_PLUGINS_AVAILABLE = 4012,MD_LOGEXT_FIELD_MASK = 4013,MD_LOGEXT_FIELD_MASK2 = 4014,};
enum MACRO_MD_MAX {MD_MAX_BANDWIDTH = 1000,MD_KEY_TYPE = 1002,MD_MAX_BANDWIDTH_BLOCKED = 1003,MD_SERVER_COMMAND = 1012,MD_CONNECTION_TIMEOUT = 1013,MD_MAX_CONNECTIONS = 1014,MD_SERVER_COMMENT = 1015,MD_SERVER_STATE = 1016,MD_SERVER_AUTOSTART = 1017,MD_SERVER_SIZE = 1018,MD_SERVER_LISTEN_BACKLOG = 1019,MD_SERVER_LISTEN_TIMEOUT = 1020,MD_DOWNLEVEL_ADMIN_INSTANCE = 1021,MD_LEVELS_TO_SCAN = 1022,MD_SERVER_BINDINGS = 1023,MD_MAX_ENDPOINT_CONNECTIONS = 1024,MD_SERVER_CONFIGURATION_INFO = 1027,MD_IISADMIN_EXTENSIONS = 1028,};
enum MACRO_MD_SSL {MD_SSL_PUBLIC_KEY = 5500,MD_SSL_PRIVATE_KEY = 5501,MD_SSL_KEY_PASSWORD = 5502,MD_SSL_KEY_REQUEST = 5503,};
enum MACRO_MD_WAM {MD_WAM_USER_NAME = 7501,MD_WAM_PWD = 7502,MD_AUTH_ANONYMOUS = 1,MD_AUTH_BASIC = 2,MD_AUTH_NT = 4,MD_AUTH_SINGLEREQUEST = 64,MD_AUTH_SINGLEREQUESTIFPROXY = 128,MD_AUTH_SINGLEREQUESTALWAYSIFPROXY = 256,MD_ACCESS_READ = 1,MD_ACCESS_WRITE = 2,MD_ACCESS_EXECUTE = 4,MD_ACCESS_SCRIPT = 512,MD_ACCESS_NO_REMOTE_WRITE = 1024,MD_ACCESS_NO_REMOTE_READ = 4096,MD_ACCESS_NO_REMOTE_EXECUTE = 8192,MD_ACCESS_NO_REMOTE_SCRIPT = 16384,MD_NONSLL_ACCESS_MASK = 30215,MD_ACCESS_SSL = 8,MD_ACCESS_NEGO_CERT = 32,MD_ACCESS_REQUIRE_CERT = 64,MD_ACCESS_MAP_CERT = 128,MD_ACCESS_SSL128 = 256,MD_SSL_ACCESS_MASK = 488,MD_ACCESS_MASK = 32767,MD_DIRBROW_SHOW_DATE = 2,MD_DIRBROW_SHOW_TIME = 4,MD_DIRBROW_SHOW_SIZE = 8,MD_DIRBROW_SHOW_EXTENSION = 16,MD_DIRBROW_LONG_DATE = 32,MD_DIRBROW_ENABLED = -2147483648,MD_DIRBROW_LOADDEFAULT = 1073741824,MD_DIRBROW_MASK = -1073741762,MD_LOGON_INTERACTIVE = 0,MD_LOGON_BATCH = 1,MD_LOGON_NETWORK = 2,MD_NOTIFEXAUTH_NTLMSSL = 1,MD_FILTER_STATE_LOADED = 1,MD_FILTER_STATE_UNLOADED = 4,MD_SERVER_STATE_STARTING = 1,MD_SERVER_STATE_STARTED = 2,MD_SERVER_STATE_STOPPING = 3,MD_SERVER_STATE_STOPPED = 4,MD_SERVER_STATE_PAUSING = 5,MD_SERVER_STATE_PAUSED = 6,MD_SERVER_STATE_CONTINUING = 7,MD_SERVER_COMMAND_START = 1,MD_SERVER_COMMAND_STOP = 2,MD_SERVER_COMMAND_PAUSE = 3,MD_SERVER_COMMAND_CONTINUE = 4,MD_SERVER_SIZE_SMALL = 0,MD_SERVER_SIZE_MEDIUM = 1,MD_SERVER_SIZE_LARGE = 2,MD_SERVER_CONFIG_SSL_40 = 1,MD_SERVER_CONFIG_SSL_128 = 2,MD_SERVER_CONFIG_ALLOW_ENCRYPT = 4,MD_SERVER_CONFIG_AUTO_PW_SYNC = 8,MD_SCRIPTMAPFLAG_SCRIPT = 1,MD_SCRIPTMAPFLAG_CHECK_PATH_INFO = 4,MD_SCRIPTMAPFLAG_ALLOWED_ON_READ_DIR = 1,MD_AUTH_CHANGE_UNSECURE = 1,MD_AUTH_CHANGE_DISABLE = 2,MD_AUTH_ADVNOTIFY_DISABLE = 4,MD_NETLOGON_WKS_NONE = 0,MD_NETLOGON_WKS_IP = 1,MD_NETLOGON_WKS_DNS = 2,MD_ERROR_SUB401_LOGON = 1,MD_ERROR_SUB401_LOGON_CONFIG = 2,MD_ERROR_SUB401_LOGON_ACL = 3,MD_ERROR_SUB401_FILTER = 4,MD_ERROR_SUB401_APPLICATION = 5,MD_ERROR_SUB403_EXECUTE_ACCESS_DENIED = 1,MD_ERROR_SUB403_READ_ACCESS_DENIED = 2,MD_ERROR_SUB403_WRITE_ACCESS_DENIED = 3,MD_ERROR_SUB403_SSL_REQUIRED = 4,MD_ERROR_SUB403_SSL128_REQUIRED = 5,MD_ERROR_SUB403_ADDR_REJECT = 6,MD_ERROR_SUB403_CERT_REQUIRED = 7,MD_ERROR_SUB403_SITE_ACCESS_DENIED = 8,MD_ERROR_SUB403_TOO_MANY_USERS = 9,MD_ERROR_SUB403_INVALID_CNFG = 10,MD_ERROR_SUB403_PWD_CHANGE = 11,MD_ERROR_SUB403_MAPPER_DENY_ACCESS = 12,MD_ERROR_SUB403_CA_NOT_ALLOWED = 13,MD_ERROR_SUB403_DIR_LIST_DENIED = 14,MD_ERROR_SUB502_TIMEOUT = 1,MD_ERROR_SUB502_PREMATURE_EXIT = 2,MD_ACR_READ = 1,MD_ACR_WRITE = 2,MD_ACR_RESTRICTED_WRITE = 32,MD_ACR_UNSECURE_PROPS_READ = 128,MD_ACR_ENUM_KEYS = 8,MD_ACR_WRITE_DAC = 262144,};
enum MACRO_MEMORY {MEMORY_INSUFFICIENT = 0x4000F104,};
enum MACRO_METHOD {METHOD_BUFFERED = 0,METHOD_IN_DIRECT = 1,METHOD_OUT_DIRECT = 2,METHOD_NEITHER = 3,};
enum MACRO_MF_HSZ {MF_HSZ_INFO = 0x1000000,MF_SENDMSGS = 0x2000000,MF_POSTMSGS = 0x4000000,MF_CALLBACKS = 0x8000000,MF_ERRORS = 0x10000000,MF_LINKS = 0x20000000,MF_CONV = 0x40000000,MF_MASK = 0xFF000000,};
enum MACRO_MIXERR {MIXERR_INVALLINE = 1024,MIXERR_INVALCONTROL = 1025,MIXERR_INVALVALUE = 1026,MIXERR_LASTERROR = 1026,};
enum MACRO_MK_ALT {MK_ALT = 0x20,};
enum MACRO_MM_ACM {MM_ACM_OPEN = 980,MM_ACM_CLOSE = 981,MM_ACM_DONE = 982,};
enum MACRO_MM_MAX {MM_MAX_NUMAXES = 16,};
enum MACRO_MODALS {MODALS_MIN_PASSWD_LEN_PARMNUM = 1,MODALS_MAX_PASSWD_AGE_PARMNUM = 2,MODALS_MIN_PASSWD_AGE_PARMNUM = 3,MODALS_FORCE_LOGOFF_PARMNUM = 4,MODALS_PASSWD_HIST_LEN_PARMNUM = 5,MODALS_ROLE_PARMNUM = 6,MODALS_PRIMARY_PARMNUM = 7,MODALS_DOMAIN_NAME_PARMNUM = 8,MODALS_DOMAIN_ID_PARMNUM = 9,MODALS_LOCKOUT_DURATION_PARMNUM = 10,MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM = 11,MODALS_LOCKOUT_THRESHOLD_PARMNUM = 12,MODALS_MIN_PASSWD_LEN_INFOLEVEL = 1001,MODALS_MAX_PASSWD_AGE_INFOLEVEL = 1002,MODALS_MIN_PASSWD_AGE_INFOLEVEL = 1003,MODALS_FORCE_LOGOFF_INFOLEVEL = 1004,MODALS_PASSWD_HIST_LEN_INFOLEVEL = 1005,MODALS_ROLE_INFOLEVEL = 1006,MODALS_PRIMARY_INFOLEVEL = 1007,MODALS_DOMAIN_NAME_INFOLEVEL = 1008,MODALS_DOMAIN_ID_INFOLEVEL = 1009,};
enum MACRO_MSG_VV {MSG_VV_REQUESTREPLY = 4,};
enum MACRO_MSK_FP {MSK_FP_FLAGS = 0x7C0,C_FLAGS = 0x0,M_FLAGS = 0x40,NONE_FLAGS = 0x80,D_FLAGS = 0xC0,UC_FLAGS = 0x100,VC_FLAGS = 0x100,UM_FLAGS = 0x140,VM_FLAGS = 0x140,U_FLAGS = 0x180,V_FLAGS = 0x180,UD_FLAGS = 0x1C0,VD_FLAGS = 0x1C0,SC_FLAGS = 0x400,S_FLAGS = 0x480,SUC_FLAGS = 0x500,SVC_FLAGS = 0x500,SUM_FLAGS = 0x540,SVM_FLAGS = 0x540,SU_FLAGS = 0x580,SV_FLAGS = 0x580,SUD_FLAGS = 0x5C0,SVD_FLAGS = 0x5C0,SUIC_FLAGS = 0x700,SVIC_FLAGS = 0x700,SUIM_FLAGS = 0x740,SVIM_FLAGS = 0x740,SUI_FLAGS = 0x780,SVI_FLAGS = 0x780,SUID_FLAGS = 0x7C0,SVID_FLAGS = 0x7C0,};
enum MACRO_MS_EXT {MS_EXT_SET_ID = 512,};
enum MACRO_MUTANT {MUTANT_QUERY_STATE = 0x1,MUTANT_ALL_ACCESS = 0x1F0001,};
enum MACRO_NAVDIR {NAVDIR_MIN = 0x0,NAVDIR_UP = 0x1,NAVDIR_DOWN = 0x2,NAVDIR_LEFT = 0x3,NAVDIR_RIGHT = 0x4,NAVDIR_NEXT = 0x5,NAVDIR_PREVIOUS = 0x6,NAVDIR_FIRSTCHILD = 0x7,NAVDIR_LASTCHILD = 0x8,NAVDIR_MAX = 0x9,};
enum MACRO_NETERR {NETERR_RING_STATUS_SIGNAL_LOST = 0x8000,NETERR_RING_STATUS_HARD_ERROR = 0x4000,NETERR_RING_STATUS_SOFT_ERROR = 0x2000,NETERR_RING_STATUS_TRANSMIT_BEACON = 0x1000,NETERR_RING_STATUS_LOBE_WIRE_FAULT = 0x800,NETERR_RING_STATUS_AUTO_REMOVAL_ERROR = 0x400,NETERR_RING_STATUS_REMOTE_RECEIVED = 0x200,NETERR_RING_STATUS_COUNTER_OVERFLOW = 0x100,NETERR_RING_STATUS_SIGNAL_STATION = 0x80,NETERR_RING_STATUS_RECOVERY = 0x40,NETERR_RING_STOP_CAPTURE = 0x8E00,};
enum MACRO_NOBIND {NOBIND = -2,};
enum MACRO_NOTIFY {NOTIFY_SYNC = 0x40000000,NOTIFY_CANCELED = 0x80000000,};
enum MACRO_NO_DMA {NO_DMA = 0x10,};
enum MACRO_NO_ERR {NO_ERR = 0,};
enum MACRO_NO_IRQ {NO_IRQ_GENERATED = 0xFF,};
enum MACRO_NSTYPE {NSTYPE_HIERARCHICAL = 0x1,NSTYPE_DYNAMIC = 0x2,NSTYPE_ENUMERABLE = 0x4,NSTYPE_WORKGROUP = 0x8,};
enum MACRO_NUMPRS {NUMPRS_LEADING_WHITE = 0x1,NUMPRS_TRAILING_WHITE = 0x2,NUMPRS_LEADING_PLUS = 0x4,NUMPRS_TRAILING_PLUS = 0x8,NUMPRS_LEADING_MINUS = 0x10,NUMPRS_TRAILING_MINUS = 0x20,NUMPRS_HEX_OCT = 0x40,NUMPRS_PARENS = 0x80,NUMPRS_DECIMAL = 0x100,NUMPRS_THOUSANDS = 0x200,NUMPRS_CURRENCY = 0x400,NUMPRS_EXPONENT = 0x800,NUMPRS_USE_ALL = 0x1000,NUMPRS_STD = 0x1FFF,NUMPRS_NEG = 0x10000,NUMPRS_INEXACT = 0x20000,};
enum MACRO_OLEOBJ {OLEOBJ_E_FIRST = 0x80040180,OLEOBJ_E_LAST = 0x8004018F,OLEOBJ_S_FIRST = 0x40180,OLEOBJ_S_LAST = 0x4018F,};
enum MACRO_OPTION {OPTION_TYPE_RECIPIENT = 0x1,OPTION_TYPE_MESSAGE = 0x2,};
enum MACRO_ORACLE {ORACLE = 9,};
enum MACRO_OUT_OF {OUT_OF_MEMORY = 0x4,};
enum MACRO_PACKET {PACKET_ADDRESS_MAX = 16,PACKET_COMPLETE_SUCCESS = 0,PACKET_COMPLETE_FAILURE = 1,PACKET_COMPLETE_OVERFLOW = 2,PACKET_COMPLETE_NO_ROUTE = 3,PACKET_BUFFER_PROTOCOL_IP = 0,PACKET_BUFFER_PROTOCOL_VBI_RAW = 1,PACKET_BUFFER_PROTOCOL_DSS_ARP = 2,PACKET_BUFFER_PROTOCOL_DSS_RAW = 3,PACKET_BUFFER_PROTOCOL_DSS_MPT = 4,};
enum MACRO_PANOSE {PANOSE_COUNT = 10,};
enum MACRO_PARITY {PARITY_NONE = 0x100,PARITY_ODD = 0x200,PARITY_EVEN = 0x400,PARITY_MARK = 0x800,PARITY_SPACE = 0x1000,};
enum MACRO_PCMCIA {PCMCIA_OPT_HAVE_SOCKET = 0x1,PCMCIA_OPT_AUTOMEM = 0x4,PCMCIA_OPT_NO_SOUND = 0x8,PCMCIA_OPT_NO_AUDIO = 0x10,PCMCIA_OPT_NO_APMREMOVE = 0x20,PCMCIA_DEF_MEMBEGIN = 0xC0000,PCMCIA_DEF_MEMEND = 0xFFFFFF,PCMCIA_DEF_MEMLEN = 0x1000,PCMCIA_DEF_MIN_REGION = 0x10000,};
enum MACRO_PD_CAN {PD_CAN_DRAW_DIB = 0x1,PD_CAN_STRETCHDIB = 0x2,PD_STRETCHDIB_1_1_OK = 0x4,PD_STRETCHDIB_1_2_OK = 0x8,PD_STRETCHDIB_1_N_OK = 0x10,};
enum MACRO_PENREG {PENREG_DEFAULT = 0x2,PENREG_WILLHANDLEMOUSE = 0x1,};
enum MACRO_PENTIP {PENTIP_NIBDEFAULT = 0,PENTIP_HEIGHTDEFAULT = 0,PENTIP_OPAQUE = 255,PENTIP_HILITE = 128,PENTIP_TRANSPARENT = 0,};
enum MACRO_PENVER {PENVER = 0x200,};
enum MACRO_PHRASE {PHRASE_FEEDBACK = 0x4,};
enum MACRO_PIDISF {PIDISF_RECENTLYCHANGED = 0x1,PIDISF_CACHEDSTICKY = 0x2,PIDISF_CACHEIMAGES = 0x10,PIDISF_FOLLOWALLLINKS = 0x20,};
enum MACRO_PIDISM {PIDISM_GLOBAL = 0,PIDISM_WATCH = 1,PIDISM_DONTWATCH = 2,};
enum MACRO_PID_IS {PID_IS_URL = 2,PID_IS_NAME = 4,PID_IS_WORKINGDIR = 5,PID_IS_HOTKEY = 6,PID_IS_SHOWCMD = 7,PID_IS_ICONINDEX = 8,PID_IS_ICONFILE = 9,PID_IS_WHATSNEW = 10,PID_IS_AUTHOR = 11,PID_IS_DESCRIPTION = 12,PID_IS_COMMENT = 13,PID_INTSITE_WHATSNEW = 2,PID_INTSITE_AUTHOR = 3,PID_INTSITE_LASTVISIT = 4,PID_INTSITE_LASTMOD = 5,PID_INTSITE_VISITCOUNT = 6,PID_INTSITE_DESCRIPTION = 7,PID_INTSITE_COMMENT = 8,PID_INTSITE_FLAGS = 9,PID_INTSITE_CONTENTLEN = 10,PID_INTSITE_CONTENTCODE = 11,PID_INTSITE_RECURSE = 12,PID_INTSITE_WATCH = 13,PID_INTSITE_SUBSCRIPTION = 14,PID_INTSITE_URL = 15,PID_INTSITE_TITLE = 16,PID_INTSITE_CODEPAGE = 18,PID_INTSITE_TRACKING = 19,};
enum MACRO_PLANES {PLANES = 14,NUMBRUSHES = 16,};
enum MACRO_PLTFRM {PLTFRM_WIN16 = 0x1,PLTFRM_WIN32_X86 = 0x2,PLTFRM_WIN32_MIPS = 0x4,PLTFRM_WIN32_ALPHA = 0x8,PLTFRM_DOS5 = 0x10,PLTFRM_DOS6 = 0x20,PLTFRM_MACINTOSH = 0x40,PLTFRM_WIN95 = 0x80,PLTFRM_MSDOS = 0x30,};
enum MACRO_POLICY {POLICY_AUDIT_EVENT_UNCHANGED = 0x0,POLICY_AUDIT_EVENT_SUCCESS = 0x1,POLICY_AUDIT_EVENT_FAILURE = 0x2,POLICY_AUDIT_EVENT_NONE = 0x4,POLICY_AUDIT_EVENT_MASK = 0x7,POLICY_MACHINE_POLICY_LOCAL = 0x0,POLICY_MACHINE_POLICY_DEFAULTED = 0x1,POLICY_MACHINE_POLICY_EXPLICIT = 0x2,POLICY_MACHINE_POLICY_UNKNOWN = 0xFFFFFFFF,POLICY_VIEW_LOCAL_INFORMATION = 0x1,POLICY_VIEW_AUDIT_INFORMATION = 0x2,POLICY_GET_PRIVATE_INFORMATION = 0x4,POLICY_TRUST_ADMIN = 0x8,POLICY_CREATE_ACCOUNT = 0x10,POLICY_CREATE_SECRET = 0x20,POLICY_CREATE_PRIVILEGE = 0x40,POLICY_SET_DEFAULT_QUOTA_LIMITS = 0x80,POLICY_SET_AUDIT_REQUIREMENTS = 0x100,POLICY_AUDIT_LOG_ADMIN = 0x200,POLICY_SERVER_ADMIN = 0x400,POLICY_LOOKUP_NAMES = 0x800,POLICY_ALL_ACCESS = 0xF0FFF,POLICY_READ = 0x20006,POLICY_WRITE = 0x207F8,POLICY_EXECUTE = 0x20801,POLICY_LOCATION_LOCAL = 0x1,POLICY_LOCATION_DS = 0x2,POLICY_QOS_SCHANEL_REQUIRED = 0x1,POLICY_QOS_OUTBOUND_INTEGRITY = 0x2,POLICY_QOS_OUTBOUND_CONFIDENTIALITY = 0x4,POLICY_QOS_INBOUND_INTEGREITY = 0x8,POLICY_QOS_INBOUND_CONFIDENTIALITY = 0x10,POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE = 0x20,POLICY_QOS_RAS_SERVER_ALLOWED = 0x40,POLICY_QOS_DHCP_SERVER_ALLOWD = 0x80,POLICY_KERBEROS_FORWARDABLE = 0x1,POLICY_KERBEROS_PROXYABLE = 0x2,POLICY_KERBEROS_RENEWABLE = 0x4,POLICY_KERBEROS_POSTDATEABLE = 0x8,};
enum MACRO_PRINT1 {PRINT1 = 3,PRFLT8 = 20,};
enum MACRO_PRINT2 {PRINT2 = 6,};
enum MACRO_PRINT4 {PRINT4 = 11,};
enum MACRO_PROPID {PROPID_QUERY_RANKVECTOR = 0x2,PROPID_QUERY_RANK = 0x3,PROPID_QUERY_HITCOUNT = 0x4,PROPID_QUERY_ALL = 0x6,PROPID_STG_CONTENTS = 0x13,};
enum MACRO_PRSPEC {PRSPEC_INVALID = 0xFFFFFFFF,PRSPEC_LPWSTR = 0x0,PRSPEC_PROPID = 0x1,};
enum MACRO_PR_CFG {PR_CFG_SERVER_PATH = 1711276062,PR_CFG_MAILBOX = 1711341598,PR_CFG_PASSWORD = 1743781918,PR_CFG_CONN_TYPE = 1711472643,};
enum MACRO_PR_EMS {PR_EMS_AB_SERVER = 0xFFFE001E,PR_EMS_AB_SERVER_A = 0xFFFE001E,PR_EMS_AB_SERVER_W = 0xFFFE001F,PR_EMS_AB_CONTAINERID = 0xFFFD0003,PR_EMS_AB_DOS_ENTRYID = 0xFFFD0003,PR_EMS_AB_PARENT_ENTRYID = 0xFFFC0102,PR_EMS_AB_IS_MASTER = 0xFFFB000B,PR_EMS_AB_OBJECT_OID = 0xFFFA0102,PR_EMS_AB_HIERARCHY_PATH = 0xFFF9001E,PR_EMS_AB_HIERARCHY_PATH_A = 0xFFF9001E,PR_EMS_AB_HIERARCHY_PATH_W = 0xFFF9001F,PR_EMS_AB_CHILD_RDNS = 0xFFF8101E,};
enum MACRO_PR_PAB {PR_PAB_PATH = 0x6600001E,PR_PAB_PATH_W = 0x6600001F,PR_PAB_PATH_A = 0x6600001E,PR_PAB_DET_DIR_VIEW_BY = 0x66010003,};
enum MACRO_PR_PST {PR_PST_PATH = 1728053278,PR_PST_REMEMBER_PW = 1728118795,PR_PST_ENCRYPTION = 1728184323,PR_PST_PW_SZ_OLD = 1728249886,PR_PST_PW_SZ_NEW = 1728315422,};
enum MACRO_PR_SAB {PR_SAB_FILE = 1711538206,PR_SAB_UID = 1711341826,};
enum MACRO_PR_SMS {PR_SMS_PATH = 1728053278,PR_SMS_PASSWORD = 1728118814,PR_SMS_REMEMBER_PW = 1728184331,PR_SMS_CREATE = 1728249867,};
enum MACRO_PSNRET {PSNRET_NOERROR = 0,PSNRET_INVALID = 1,PSNRET_INVALID_NOCHANGEPAGE = 2,};
enum MACRO_PSWIZB {PSWIZB_BACK = 0x1,PSWIZB_NEXT = 0x2,PSWIZB_FINISH = 0x4,PSWIZB_DISABLEDFINISH = 0x8,};
enum MACRO_PWPROP {PWPROP_OSPVALUE = 2,};
enum MACRO_RASADP {RASADP_DisableConnectionQuery = 0,RASADP_LoginSessionDisable = 1,RASADP_SavedAddressesLimit = 2,RASADP_FailedConnectionTimeout = 3,RASADP_ConnectionQueryTimeout = 4,};
enum MACRO_RASEDM {RASEDM_DialAll = 1,RASEDM_DialAsNeeded = 2,};
enum MACRO_RASIDS {RASIDS_Disabled = 0xFFFFFFFF,RASIDS_UseGlobalValue = 0x0,};
enum MACRO_RATING {RATING_ORDER_REMOTESITE = 0x80000000,RATING_ORDER_LOCALLIST = 0xC0000000,};
enum MACRO_RDEOPT {RDEOPT_UsePrefixSuffix = 0x1,RDEOPT_PausedStates = 0x2,RDEOPT_IgnoreModemSpeaker = 0x4,RDEOPT_SetModemSpeaker = 0x8,RDEOPT_IgnoreSoftwareCompression = 0x10,RDEOPT_SetSoftwareCompression = 0x20,RDEOPT_DisableConnectedUI = 0x40,RDEOPT_DisableReconnectUI = 0x80,RDEOPT_DisableReconnect = 0x100,RDEOPT_NoUser = 0x200,RDEOPT_PauseOnScript = 0x400,RDEOPT_Router = 0x800,};
enum MACRO_REGSTR {REGSTR_VAL_SMOOTHSCROLL_DEF = 1,REGSTR_VAL_USESTYLESHEETS_TYPE = 1,REGSTR_VAL_USEICM_DEF = 0,REGSTR_VAL_SHOWFOCUS_TYPE = 1,REGSTR_VAL_PAGETRANSITIONS_DEF = 1,REGSTR_VAL_IE_CUSTOMCOLORS_TYPE = 3,REGSTR_VAL_CODEDOWNLOAD_TYPE = 1,REGSTR_VAL_DIRECTORY_TYPE = 2,REGSTR_VAL_NEWDIRECTORY_TYPE = 2,REGSTR_VAL_CACHEPREFIX_TYPE = 1,};
enum MACRO_REMIND {REMIND_NONE = 0,REMIND_ONCE = 1,REMIND_DAILY = 2,REMIND_WEEKLY = 3,REMIND_WEEKDAYS = 4,REMIND_MAX = 4,};
enum MACRO_REMOTE {DPENUMPLAYERS_REMOTE = 0x10,DPENUMGROUPS_REMOTE = 0x10,};
enum MACRO_RESULT {RESULT_IS_ALIAS = 0x1,};
enum MACRO_RETURN {RETURN_SMART_STATUS = 0xDA,};
enum MACRO_RPCFLG {RPCFLG_MESSAGE = 0x1000000,RPCFLG_AUTO_COMPLETE = 0x8000000,RPCFLG_LOCAL_CALL = 0x10000000,RPCFLG_INPUT_SYNCHRONOUS = 0x20000000,RPCFLG_ASYNCHRONOUS = 0x40000000,RPCFLG_NON_NDR = 0x80000000,};
enum MACRO_RPC_ID {SSL2SP_RPC_ID = 12,PCT1SP_RPC_ID = 13,SSL3SP_RPC_ID = 14,UNISP_RPC_ID = 15,TLS1SP_RPC_ID = 16,};
enum MACRO_RSPERR {RSPERR = 3,CONFOK = 4,};
enum MACRO_RTM_NO {RTM_NO_CHANGE = 0,RTM_ROUTE_ADDED = 1,RTM_ROUTE_DELETED = 2,RTM_ROUTE_CHANGED = 3,RTM_ONLY_THIS_NETWORK = 1,RTM_ONLY_THIS_INTERFACE = 2,RTM_ONLY_THIS_PROTOCOL = 4,RTM_ONLY_BEST_ROUTES = 8,RTM_PROTOCOL_SINGLE_ROUTE = 1,};
enum MACRO_S3PROD {S3PROD = 18,};
enum MACRO_SDPBLB {SDPBLB_CONF_BLOB_DESTROYED = 0xE0000300,};
enum MACRO_SEARCH {SEARCH_RUNNING = 0x1,SEARCH_REBUILD = 0x2,SEARCH_RECURSIVE = 0x4,SEARCH_FOREGROUND = 0x8,};
enum MACRO_SECPKG {SECPKG_FLAG_INTEGRITY = 0x1,SECPKG_FLAG_PRIVACY = 0x2,SECPKG_FLAG_TOKEN_ONLY = 0x4,SECPKG_FLAG_DATAGRAM = 0x8,SECPKG_FLAG_CONNECTION = 0x10,SECPKG_FLAG_MULTI_REQUIRED = 0x20,SECPKG_FLAG_CLIENT_ONLY = 0x40,SECPKG_FLAG_EXTENDED_ERROR = 0x80,SECPKG_FLAG_IMPERSONATION = 0x100,SECPKG_FLAG_ACCEPT_WIN32_NAME = 0x200,SECPKG_FLAG_STREAM = 0x400,SECPKG_FLAG_NEGOTIABLE = 0x800,SECPKG_FLAG_GSS_COMPATIBLE = 0x1000,SECPKG_FLAG_LOGON = 0x2000,SECPKG_ID_NONE = 0xFFFF,};
enum MACRO_SELECT {SELECT_CAP_CONVERSION = 0x1,SELECT_CAP_SENTENCE = 0x2,};
enum MACRO_SERIAL {SERIAL_LSRMST_ESCAPE = 0x0,SERIAL_LSRMST_LSR_DATA = 0x1,SERIAL_LSRMST_LSR_NODATA = 0x2,SERIAL_LSRMST_MST = 0x3,};
enum MACRO_SERVER {SERVER_ACCESS_ADMINISTER = 0x1,SERVER_ACCESS_ENUMERATE = 0x2,};
enum MACRO_SETDTR {SETDTR = 5,};
enum MACRO_SETRTS {SETRTS = 3,CLRRTS = 4,};
enum MACRO_SE_ERR {SE_ERR_FNF = 2,SE_ERR_PNF = 3,SE_ERR_ACCESSDENIED = 5,SE_ERR_OOM = 8,SE_ERR_DLLNOTFOUND = 32,SE_ERR_SHARE = 26,SE_ERR_ASSOCINCOMPLETE = 27,SE_ERR_DDETIMEOUT = 28,SE_ERR_DDEFAIL = 29,SE_ERR_DDEBUSY = 30,SE_ERR_NOASSOC = 31,};
enum MACRO_SF_MAX {SF_MAX_USERNAME = 257,SF_MAX_PASSWORD = 257,SF_MAX_AUTH_TYPE = 33,SF_MAX_FILTER_DESC_LEN = 257,SF_DENIED_LOGON = 1,SF_DENIED_RESOURCE = 2,SF_DENIED_FILTER = 4,SF_DENIED_APPLICATION = 8,SF_DENIED_BY_CONFIG = 65536,SF_NOTIFY_SECURE_PORT = 1,SF_NOTIFY_NONSECURE_PORT = 2,SF_NOTIFY_READ_RAW_DATA = 32768,SF_NOTIFY_PREPROC_HEADERS = 16384,SF_NOTIFY_AUTHENTICATION = 8192,SF_NOTIFY_URL_MAP = 4096,SF_NOTIFY_ACCESS_DENIED = 2048,SF_NOTIFY_SEND_RESPONSE = 64,SF_NOTIFY_SEND_RAW_DATA = 1024,SF_NOTIFY_LOG = 512,SF_NOTIFY_END_OF_REQUEST = 128,SF_NOTIFY_END_OF_NET_SESSION = 256,SF_NOTIFY_ORDER_HIGH = 524288,SF_NOTIFY_ORDER_MEDIUM = 262144,SF_NOTIFY_ORDER_LOW = 131072,SF_NOTIFY_ORDER_DEFAULT = 131072,SF_NOTIFY_ORDER_MASK = 917504,};
enum MACRO_SHCNEE {SHCNEE_ORDERCHANGED = 0x2,};
enum MACRO_SHGNLI {SHGNLI_PIDL = 0x1,SHGNLI_PREFIXNAME = 0x2,SHGNLI_NOUNIQUE = 0x4,};
enum MACRO_SIGNAL {SIGINT = 2,SIGILL = 4,SIGFPE = 8,SIGSEGV = 11,SIGTERM = 15,SIGBREAK = 21,SIGABRT = 22,};
enum MACRO_SINGLE {SINGLE_MAXIMUM_EXPONENT = 255,SINGLE_MINIMUM_EXPONENT = 0,SINGLE_EXPONENT_BIAS = 127,};
enum MACRO_SIZEOF {SIZEOF_RFPO_DATA = 16,};
enum MACRO_SMS_OK {SMS_OK = 0,SMS_MORE_DATA = 1,SMS_NO_MORE_DATA = 2,SMS_FOLDER_NO_UPDATE = 3,SMS_DUPLICATE_CONTAINER_ID = 4,SMS_DUPLICATE_FOLDER_ID = 5,SMS_DUPLICATE_FILTER_ID = 6,SMS_DUPLICATE_FILTER = 21,SMS_SCALAR_NO_UPDATE = 7,SMS_SCALAR_WRONG_TYPE = 8,SMS_INVALID_CONTAINER_ID = 9,SMS_INVALID_FOLDER_ID = 10,SMS_INVALID_FILTER_ID = 11,SMS_CONTAINER_NO_UPDATE = 12,SMS_PARAMETER_ERROR = 13,SMS_UNSUPPORTED = 14,SMS_NOT_FOUND = 15,SMS_PARENT_NOT_FOUND = 16,SMS_CANT_DELETE = 17,SMS_NEW_FOLDER = 18,SMS_FOLDER_LINKED = 19,SMS_RANGE_ERROR = 20,SMS_CONTAINER_NOT_POPULATED = 22,SMS_CONTAINER_POPULATED = 23,SMS_FILTER_NOT_PERSISTENT = 24,SMS_INVALID_CONNECTION_HANDLE = 25,SMS_INVALID_FILTER_TYPE = 26,SMS_IN_USE_BY_OTHER = 27,SMS_ERROR = 51,SMS_SQL_ERROR = 52,SMS_INVALID_DATASOURCE = 53,SMS_INVALID_HANDLE = 54,SMS_INVALID_FOLDER_TYPE = 56,SMS_CONNECT_FAILED = 57,SMS_NO_CREATE = 58,SMS_FOLDER_NOT_MODIFIED = 59,SMS_INCORRECT_FOLDER_TYPE = 60,SMS_INVALID_PARAMETER = 61,SMS_EMPTY = 62,SMS_PARENT_NEEDS_COMMIT = 63,SMS_PARENT_ALREADY_COMMITTED = 64,SMS_NOT_READY = 65,SMS_FILTER_NO_MODIFY = 66,SMS_FOLDER_ALREADY_DELETED = 67,SMS_ALREADY_CONNECTED = 68,SMS_COMMIT_FAILED = 69,SMS_DUPLICATE_FOLDER = 70,SMS_DATA_BUFF_SIZE = 255,};
enum MACRO_SOCKET {SOCKET_ERROR = -1,};
enum MACRO_SPINST {SPINST_LOGCONFIG = 0x1,SPINST_INIFILES = 0x2,SPINST_REGISTRY = 0x4,SPINST_INI2REG = 0x8,SPINST_FILES = 0x10,SPINST_ALL = 0x1F,SPINST_SINGLESECTION = 0x10000,SPINST_LOGCONFIG_IS_FORCED = 0x20000,SPINST_LOGCONFIGS_ARE_OVERRIDES = 0x40000,};
enum MACRO_SP_MAX {SP_MAX_MACHINENAME_LENGTH = 18,};
enum MACRO_SRCAND {SRCAND = 0x8800C6,};
enum MACRO_SRVBIT {SRVBIT = 50,};
enum MACRO_SRVROW {SRVROW = 209,};
enum MACRO_STARTF {STARTF_USESHOWWINDOW = 0x1,STARTF_USESIZE = 0x2,STARTF_USEPOSITION = 0x4,STARTF_USECOUNTCHARS = 0x8,STARTF_USEFILLATTRIBUTE = 0x10,STARTF_RUNFULLSCREEN = 0x20,STARTF_FORCEONFEEDBACK = 0x40,STARTF_FORCEOFFFEEDBACK = 0x80,STARTF_USESTDHANDLES = 0x100,STARTF_USEHOTKEY = 0x200,};
enum MACRO_STATUS {STATUS_WAIT_0 = 0x0,STATUS_ABANDONED_WAIT_0 = 0x80,STATUS_USER_APC = 0xC0,STATUS_TIMEOUT = 0x102,STATUS_PENDING = 0x103,STATUS_SEGMENT_NOTIFICATION = 0x40000005,STATUS_GUARD_PAGE_VIOLATION = 0x80000001,STATUS_DATATYPE_MISALIGNMENT = 0x80000002,STATUS_BREAKPOINT = 0x80000003,STATUS_SINGLE_STEP = 0x80000004,STATUS_ACCESS_VIOLATION = 0xC0000005,STATUS_IN_PAGE_ERROR = 0xC0000006,STATUS_INVALID_HANDLE = 0xC0000008,STATUS_NO_MEMORY = 0xC0000017,STATUS_ILLEGAL_INSTRUCTION = 0xC000001D,STATUS_NONCONTINUABLE_EXCEPTION = 0xC0000025,STATUS_INVALID_DISPOSITION = 0xC0000026,STATUS_ARRAY_BOUNDS_EXCEEDED = 0xC000008C,STATUS_FLOAT_DENORMAL_OPERAND = 0xC000008D,STATUS_FLOAT_DIVIDE_BY_ZERO = 0xC000008E,STATUS_FLOAT_INEXACT_RESULT = 0xC000008F,STATUS_FLOAT_INVALID_OPERATION = 0xC0000090,STATUS_FLOAT_OVERFLOW = 0xC0000091,STATUS_FLOAT_STACK_CHECK = 0xC0000092,STATUS_FLOAT_UNDERFLOW = 0xC0000093,STATUS_INTEGER_DIVIDE_BY_ZERO = 0xC0000094,STATUS_INTEGER_OVERFLOW = 0xC0000095,STATUS_PRIVILEGED_INSTRUCTION = 0xC0000096,STATUS_STACK_OVERFLOW = 0xC00000FD,STATUS_CONTROL_C_EXIT = 0xC000013A,STATUS_FLOAT_MULTIPLE_FAULTS = 0xC00002B4,STATUS_FLOAT_MULTIPLE_TRAPS = 0xC00002B5,STATUS_ILLEGAL_VLM_REFERENCE = 0xC00002C0,};
enum MACRO_STBETB {STBETB = 7,STPUINAC = 16,};
enum MACRO_STDOLE {STDOLE_MAJORVERNUM = 0x1,STDOLE_MINORVERNUM = 0x0,STDOLE_LCID = 0x0,};
enum MACRO_STGFMT {STGFMT_STORAGE = 0,STGFMT_NATIVE = 1,STGFMT_FILE = 3,STGFMT_ANY = 4,STGFMT_DOCFILE = 5,STGFMT_DOCUMENT = 0,};
enum MACRO_STREAM {STREAM_NORMAL_ATTRIBUTE = 0x0,STREAM_MODIFIED_WHEN_READ = 0x1,STREAM_CONTAINS_SECURITY = 0x2,STREAM_CONTAINS_PROPERTIES = 0x4,STREAM_SPARSE_ATTRIBUTE = 0x8,};
enum MACRO_STRICT {STRICT = 1,};
enum MACRO_STRRET {STRRET_WSTR = 0x0,STRRET_OFFSET = 0x1,STRRET_CSTR = 0x2,};
enum MACRO_SV_MAX {SV_MAX_CMD_LEN = 256,};
enum MACRO_SYMOPT {SYMOPT_CASE_INSENSITIVE = 0x1,SYMOPT_UNDNAME = 0x2,SYMOPT_DEFERRED_LOADS = 0x4,SYMOPT_NO_CPP = 0x8,SYMOPT_LOAD_LINES = 0x10,SYMOPT_OMAP_FIND_NEAREST = 0x20,};
enum MACRO_SYSPAL {SYSPAL_ERROR = 0,SYSPAL_STATIC = 1,SYSPAL_NOSTATIC = 2,SYSPAL_NOSTATIC256 = 3,};
enum MACRO_SYSTEM {SYSTEM_AUDIT_ACE_TYPE = 0x2,SYSTEM_ALARM_ACE_TYPE = 0x3,};
enum MACRO_S_IFMT {S_IFMT = 61440,S_IFDIR = 16384,S_IFCHR = 8192,S_IFREG = 32768,S_IREAD = 256,S_IWRITE = 128,S_IEXEC = 64,};
enum MACRO_TARGET {TARGET_IS_NT50_OR_LATER = 1,TARGET_IS_NT40_OR_LATER = 1,TARGET_IS_NT351_OR_WIN95_OR_LATER = 1,};
enum MACRO_TBCDRF {TBCDRF_NOEDGES = 0x10000,TBCDRF_HILITEHOTTRACK = 0x20000,TBCDRF_NOOFFSET = 0x40000,TBCDRF_NOMARK = 0x80000,TBCDRF_NOETCHEDEFFECT = 0x100000,};
enum MACRO_TBIMHT {TBIMHT_AFTER = 0x1,TBIMHT_BACKGROUND = 0x2,};
enum MACRO_TH32CS {TH32CS_SNAPHEAPLIST = 0x1,TH32CS_SNAPPROCESS = 0x2,TH32CS_SNAPTHREAD = 0x4,TH32CS_SNAPMODULE = 0x8,TH32CS_SNAPALL = 0xF,TH32CS_INHERIT = 0x80000000,};
enum MACRO_THREAD {THREAD_TERMINATE = 0x1,THREAD_SUSPEND_RESUME = 0x2,THREAD_GET_CONTEXT = 0x8,THREAD_SET_CONTEXT = 0x10,THREAD_SET_INFORMATION = 0x20,THREAD_QUERY_INFORMATION = 0x40,THREAD_SET_THREAD_TOKEN = 0x80,THREAD_IMPERSONATE = 0x100,THREAD_DIRECT_IMPERSONATION = 0x200,THREAD_ALL_ACCESS = 0x1F03FF,};
enum MACRO_TIMERR {TIMERR_NOERROR = 0,TIMERR_NOCANDO = 97,TIMERR_STRUCT = 129,};
enum MACRO_TMFAIL {TMFAIL = 0x20000000,};
enum MACRO_TMJOIN {TMJOIN = 0x200000,};
enum MACRO_TRCLVL {TRCLVL = 0,DLCMSGS = 1,PVIMSGS = 2,FMIMSGS = 4,OTHMSGS = 8,};
enum MACRO_TUNING {TUNING_DEFAULT = 0,};
enum MACRO_TVCDRF {TVCDRF_NOIMAGES = 0x10000,};
enum MACRO_TWO_I2 {TWO_I2_LSB_HI = 16,TWO_I2_LSB_LO = 17,};
enum MACRO_UNABLE {UNABLE_TO_FREE_BSTR = -536869864,};
enum MACRO_UNCLEN {UNCLEN = 17,};
enum MACRO_URLMON {URLMON_OPTION_USERAGENT = 0x10000001,URLMON_OPTION_USERAGENT_REFRESH = 0x10000002,};
enum MACRO_VALUES {VALUES_NOT_ADJACENT = 0x4000F117,};
enum MACRO_VARCMP {VARCMP_LT = 0,VARCMP_EQ = 1,VARCMP_GT = 2,VARCMP_NULL = 3,};
enum MACRO_VDMDBG {VDMDBG_BREAK_DOSTASK = 0x1,VDMDBG_BREAK_WOWTASK = 0x2,VDMDBG_BREAK_LOADDLL = 0x4,VDMDBG_BREAK_EXCEPTIONS = 0x8,VDMDBG_BREAK_DEBUGGER = 0x10,VDMDBG_TRACE_HISTORY = 0x80,};
enum MACRO_VECTOR {VECTOR_RANK_MIN = 0,VECTOR_RANK_MAX = 1,VECTOR_RANK_INNER = 2,VECTOR_RANK_DICE = 3,VECTOR_RANK_JACCARD = 4,};
enum MACRO_VK_DBE {VK_DBE_ALPHANUMERIC = 0xF0,VK_DBE_KATAKANA = 0xF1,VK_DBE_HIRAGANA = 0xF2,VK_DBE_SBCSCHAR = 0xF3,VK_DBE_DBCSCHAR = 0xF4,VK_DBE_ROMAN = 0xF5,VK_DBE_NOROMAN = 0xF6,VK_DBE_ENTERWORDREGISTERMODE = 0xF7,VK_DBE_ENTERIMECONFIGMODE = 0xF8,VK_DBE_FLUSHSTRING = 0xF9,VK_DBE_CODEINPUT = 0xFA,VK_DBE_NOCODEINPUT = 0xFB,VK_DBE_DETERMINESTRING = 0xFC,VK_DBE_ENTERDLGCONVERSIONMODE = 0xFD,};
enum MACRO_VOLUME {VOLUME_IS_DIRTY = 0x1,VOLUME_UPGRADE_SCHEDULED = 0x2,};
enum MACRO_WAM_MD {WAM_MD_SERVER_BASE = 7500,};
enum MACRO_WAVEIN {WAVEIN_MAPPER_STATUS_DEVICE = 0,WAVEIN_MAPPER_STATUS_MAPPED = 1,WAVEIN_MAPPER_STATUS_FORMAT = 2,};
enum MACRO_WAVERR {WAVERR_BADFORMAT = 32,WAVERR_STILLPLAYING = 33,WAVERR_UNPREPARED = 34,WAVERR_SYNC = 35,WAVERR_LASTERROR = 35,};
enum MACRO_WBREAK {WBREAK_E_END_OF_TEXT = 0x80041780,};
enum MACRO_WINDOW {INTERIM_WINDOW = 0x0,MODE_WINDOW = 0x1,HANJA_WINDOW = 0x2,};
enum MACRO_WINSTA {WINSTA_ENUMDESKTOPS = 0x1,WINSTA_READATTRIBUTES = 0x2,WINSTA_ACCESSCLIPBOARD = 0x4,WINSTA_CREATEDESKTOP = 0x8,WINSTA_WRITEATTRIBUTES = 0x10,WINSTA_ACCESSGLOBALATOMS = 0x20,WINSTA_EXITWINDOWS = 0x40,WINSTA_ENUMERATE = 0x100,WINSTA_READSCREEN = 0x200,};
enum MACRO_WM_CAP {WM_CAP_SET_CALLBACK_ERROR = 1026,WM_CAP_SET_CALLBACK_STATUS = 1027,WM_CAP_DRIVER_GET_NAME = 1036,WM_CAP_DRIVER_GET_VERSION = 1037,WM_CAP_FILE_SET_CAPTURE_FILE = 1044,WM_CAP_FILE_GET_CAPTURE_FILE = 1045,WM_CAP_FILE_SAVEAS = 1047,WM_CAP_FILE_SAVEDIB = 1049,WM_CAP_SET_MCI_DEVICE = 1090,WM_CAP_GET_MCI_DEVICE = 1091,WM_CAP_PAL_OPEN = 1104,WM_CAP_PAL_SAVE = 1105,};
enum MACRO_WPF_NO {WPF_NO_RECURSIVE_POST = 0x1,WPF_NO_WIZARD = 0x2,WPF_MINIMAL_UI = 0x4,WPF_FIRST_FILE_AS_DEFAULT = 0x8,WPF_NO_DIRECT_LOOKUP = 0x10,WPF_NO_URL_LOOKUP = 0x20,WPF_USE_PROVIDER_PASSED = 0x40,WPF_NO_VERIFY_POST = 0x80,WPF_NO_PROGRESS_DLGS = 0x200,WPF_SHOWPAGE_WELCOME = 0x10000,WPF_SHOWPAGE_SRCFILE = 0x20000,WPF_SHOWPAGE_DESTSITE = 0x40000,WPF_SHOWPAGE_PROVIDER = 0x80000,WPF_ENABLE_LOCAL_BASE_DIR = 0x100000,WPF_NO_UI = 0x202,WPF_SHOWPAGE_ALL = 0xF0000,};
enum MACRO_WS2API {WS2API_DECNET_dnet_addr = 1,WS2API_DECNET_dnet_eof = 2,WS2API_DECNET_dnet_getacc = 3,WS2API_DECNET_dnet_getalias = 4,WS2API_DECNET_dnet_htoa = 5,WS2API_DECNET_dnet_ntoa = 6,WS2API_DECNET_getnodeadd = 7,WS2API_DECNET_getnodebyaddr = 8,WS2API_DECNET_getnodebyname = 9,WS2API_DECNET_getnodename = 10,WS2API_DECNET_MAX = 10,};
enum MACRO_XCLASS {XCLASS_MASK = 0xFC00,XCLASS_BOOL = 0x1000,XCLASS_DATA = 0x2000,XCLASS_FLAGS = 0x4000,XCLASS_NOTIFICATION = 0x8000,};
enum MACRO__ALPHA {_ALPHA = 0x103,};
enum MACRO__FACDD {_FACDD = 0x876,};
enum MACRO__FACDP {_FACDP = 0x877,};
enum MACRO__FACDS {_FACDS = 0x878,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOLBF = 0x40,};
enum MACRO__IONBF {_IONBF = 0x4,_IOMYBUF = 0x8,_IOEOF = 0x10,_IOERR = 0x20,_IOSTRG = 0x40,_IORW = 0x80,};
enum MACRO__JBLEN {_JBLEN = 16,};
enum MACRO__KANJI {_KANJI_CP = 932,};
enum MACRO__PLOSS {_PLOSS = 6,};
enum MACRO__TLOSS {_TLOSS = 5,};
enum MACRO__UPPER {_UPPER = 0x1,_LOWER = 0x2,_DIGIT = 0x4,_SPACE = 0x8,_PUNCT = 0x10,_CONTROL = 0x20,_BLANK = 0x40,_HEX = 0x80,_LEADBYTE = 0x8000,};
enum MACRO__WIN32 {_WIN32_IE = 0x400,};
enum MACRO_atpMax {atpMax = 0x9,};
enum MACRO_hrNone {hrNone = 0x0,hrNyi = 0xC0000001,};
typedef struct mc_confirmed MC_CONFIRMED;
typedef struct mc_send_data MC_SEND_DATA;
typedef struct _MEMORYSTATUS MEMORYSTATUS;
typedef struct tagMETAFILEPICT METAFILEPICT;
typedef struct tagMIDIOUTCAPSA MIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW MIDIOUTCAPSW;
typedef void ( *MIDL_ES_READ)(void *state, char **pbuffer, unsigned int *psize);
typedef struct tagMIMECSETINFO MIMECSETINFO;
typedef struct _MODEMDEVCAPS MODEMDEVCAPS;
typedef struct mode_overlay MODE_OVERLAY;
typedef struct tagMONERRSTRUCT MONERRSTRUCT;
typedef struct tagMONMSGSTRUCT MONMSGSTRUCT;
typedef struct tagMQQUEUEPROPS MQQUEUEPROPS;
typedef struct ms_info_sect MS_INFO_SECT;
typedef struct _C7C46F6CCBD2CAD1FCFEC4764C87E3D1 MapiFileDesc;
typedef void *NDR_CCONTEXT;
typedef struct _3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;
typedef struct _NETRESOURCEA NETRESOURCEA;
typedef struct _NETRESOURCEW NETRESOURCEW;
typedef struct tagNMCUSTOMDRAWINFO NMCUSTOMDRAW;
typedef struct tagNMLVFINDITEM NMLVFINDITEM;
typedef struct _756B7C543A2D8873FCA38AB7A21F7B82 NMPGCALCSIZE;
typedef struct tagNMRBAUTOSIZE NMRBAUTOSIZE;
typedef struct _NOTIFICATION NOTIFICATION;
typedef struct tagLOGPALETTE *NPLOGPALETTE;
typedef struct waveformat_tag *NPWAVEFORMAT;
enum NtmsPoolType {NTMS_POOLTYPE_UNKNOWN = 0x0,NTMS_POOLTYPE_SCRATCH = 0x1,NTMS_POOLTYPE_FOREIGN = 0x2,NTMS_POOLTYPE_IMPORT = 0x3,NTMS_POOLTYPE_APPLICATION = 0x3E8,};
typedef struct tagODBC_VS_ARGS ODBC_VS_ARGS;
typedef struct _ACCESS_LIST *PACCESS_LIST;
typedef struct _ads_sortkey *PADS_SORTKEY;
typedef struct _AE_CONNSTOP *PAE_CONNSTOP;
typedef struct _AE_NETLOGON *PAE_NETLOGON;
typedef struct _AFPROTOCOLS *PAFPROTOCOLS;
typedef struct tagPALETTEENTRY PALETTEENTRY;
typedef IAMovieSetup *PAMOVIESETUP;
typedef struct _PARAM_BUFFER PARAM_BUFFER;
typedef struct BasicAudCapInfo *PAUDCAP_INFO;
typedef struct _AUDIT_ENTRY *PAUDIT_ENTRY;
typedef struct _BIN_RESULTS *PBIN_RESULTS;
typedef struct _browseinfoA *PBROWSEINFOA;
typedef struct _browseinfoW *PBROWSEINFOW;
typedef struct tagCHARSETINFO *PCHARSETINFO;
typedef struct CLUSPROP_SZ *PCLUSPROP_SZ;
typedef struct tagCONNECTDATA *PCONNECTDATA;
typedef struct _CRL_CONTEXT *PCRL_CONTEXT;
typedef struct _CSADDR_INFO *PCSADDR_INFO;
typedef struct _CTL_CONTEXT *PCTL_CONTEXT;
typedef void (*PDECRYPTFUNC)(char *pszBuffer, char *pszDecryptMe, char *pszKey);
typedef struct _DISK_RECORD *PDISK_RECORD;
typedef struct _8D5240EB4C2C3F8FC45B3D9D0343B483 *PDLC_SAP_LOG;
typedef struct _DOC_INFO_1A *PDOC_INFO_1A;
typedef struct _DOC_INFO_1W *PDOC_INFO_1W;
typedef struct _DOC_INFO_2A *PDOC_INFO_2A;
typedef struct _DOC_INFO_2W *PDOC_INFO_2W;
typedef struct _DRAWPATRECT *PDRAWPATRECT;
typedef struct tagEDB_RSTMAPA *PEDB_RSTMAPA;
typedef struct tagEDB_RSTMAPW *PEDB_RSTMAPW;
typedef struct tagEMRANGLEARC *PEMRANGLEARC;
typedef struct tagEMRFILLPATH *PEMRFILLPATH;
typedef struct tagEMRFRAMERGN *PEMRFRAMERGN;
typedef struct tagEMRLINETO *PEMRMOVETOEX;
typedef struct tagEMRINVERTRGN *PEMRPAINTRGN;
typedef struct tagEMRPOLYDRAW *PEMRPOLYDRAW;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINE;
typedef IEnumFilters *PENUMFILTERS;
typedef struct tagEVENTMSG *PEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *PEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *PEXTLOGFONTW;
typedef IFileAsyncIO *PFILEASYNCIO;
typedef struct _FILEPATHS_A *PFILEPATHS_A;
typedef struct _FILEPATHS_W *PFILEPATHS_W;
typedef struct _FILE_INFO_2 *PFILE_INFO_2;
typedef struct _FILE_INFO_3 *PFILE_INFO_3;
typedef IFilterGraph *PFILTERGRAPH;
typedef struct tagHANDLETABLE *PHANDLETABLE;
typedef struct phonemessage_tag PHONEMESSAGE;
typedef struct tag_IDFINSTCAPS *PIDFINSTCAPS;
typedef struct _IPXMIB_BASE *PIPXMIB_BASE;
typedef struct _IPX_IF_INFO *PIPX_IF_INFO;
typedef union _IPX_MIB_ROW *PIPX_MIB_ROW;
typedef struct _IPX_NETWORK *PIPX_NETWORK;
typedef struct _IPX_SERVICE *PIPX_SERVICE;
typedef struct _JOB_INFO_1A *PJOB_INFO_1A;
typedef struct _JOB_INFO_1W *PJOB_INFO_1W;
typedef struct _JOB_INFO_2A *PJOB_INFO_2A;
typedef struct _JOB_INFO_2W *PJOB_INFO_2W;
typedef union _5AC28848A8A0188E71C0B88AB8CF796B *PKSDATARANGE;
typedef struct _KSEVENTDATA *PKSEVENTDATA;
typedef struct _52BD71AC0F61B53F3E44045ED088295E *PKSFRAMETIME;
typedef struct ldapmsg *PLDAPMessage;
typedef struct berval *PLDAP_BERVAL;
typedef struct tagMDINEXTMENU *PMDINEXTMENU;
typedef IMediaFilter *PMEDIAFILTER;
typedef IMediaSample *PMEDIASAMPLE;
typedef IMemInputPin *PMEMINPUTPIN;
typedef struct tagMENUBARINFO *PMENUBARINFO;
typedef struct tagMIDIINCAPSA *PMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *PMIDIINCAPSW;
typedef struct tagMONCBSTRUCT *PMONCBSTRUCT;
typedef struct _NAME_BUFFER *PNAME_BUFFER;
typedef struct _PORT_INFO_1A PORT_INFO_1A;
typedef struct _PORT_INFO_1W PORT_INFO_1W;
typedef struct _PORT_INFO_2A PORT_INFO_2A;
typedef struct _PORT_INFO_2W PORT_INFO_2W;
typedef struct _PORT_INFO_3A PORT_INFO_3A;
typedef struct _PORT_INFO_3W PORT_INFO_3W;
typedef struct tagPAINTSTRUCT *PPAINTSTRUCT;
typedef struct _PPP_EAP_INFO PPP_EAP_INFO;
typedef struct _REPL_INFO_0 *PREPL_INFO_0;
typedef struct tagRFC1766INFO *PRFC1766INFO;
typedef struct _RIPMIB_BASE *PRIPMIB_BASE;
typedef struct _RIP_IF_INFO *PRIP_IF_INFO;
typedef struct _LIST_ENTRY *PRLIST_ENTRY;
typedef struct tagPROPPAGEINFO PROPPAGEINFO;
typedef struct _tagPROTOCOLDATA PROTOCOLDATA;
typedef struct _RPCBINDINFO *PRPCBINDINFO;
typedef struct _RPC_MESSAGE *PRPC_MESSAGE;
typedef void ( *PRPC_RUNDOWN)(void *AssociationContext);
typedef struct _SAP_IF_INFO *PSAP_IF_INFO;
typedef struct _PSINJECTDATA PSINJECTDATA;
typedef struct sockaddr_at *PSOCKADDR_AT;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_nb *PSOCKADDR_NB;
typedef struct sockaddr_tp *PSOCKADDR_TP;
typedef struct sockaddr_vv *PSOCKADDR_VV;
typedef struct _SecPkgInfoA *PSecPkgInfoA;
typedef struct _SecPkgInfoW *PSecPkgInfoW;
typedef struct tagTEXTMETRICA *PTEXTMETRICA;
typedef struct tagTEXTMETRICW *PTEXTMETRICW;
typedef struct _TOKEN_OWNER *PTOKEN_OWNER;
typedef struct _USER_INFO_0 *PUSER_INFO_0;
typedef struct _USER_INFO_1 *PUSER_INFO_1;
typedef struct _USER_INFO_2 *PUSER_INFO_2;
typedef struct _USER_INFO_3 *PUSER_INFO_3;
typedef struct BasicVidCapInfo *PVIDCAP_INFO;
typedef struct tagWAVEINCAPSA *PWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *PWAVEINCAPSW;
typedef struct _WLX_DESKTOP *PWLX_DESKTOP;
typedef struct tagWNDCLASSEXA *PWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *PWNDCLASSEXW;
typedef struct _PctPublicKey PctPublicKey;
enum PositionEnum {adPosUnknown = 0xFFFFFFFF,adPosBOF = 0xFFFFFFFE,adPosEOF = 0xFFFFFFFD,};
typedef struct _QOS_PRIORITY QOS_PRIORITY;
typedef struct tagQUERYCONTEXT QUERYCONTEXT;
typedef struct _QUOTA_LIMITS QUOTA_LIMITS;
typedef struct _QWordAddress QWordAddress;
typedef struct _RAS_SERVER_0 RAS_SERVER_0;
typedef struct __MIDL___MIDL_itf_strmif_0074_0003 REGPINMEDIUM;
typedef struct provider_info REG_PROVIDER;
typedef struct _RIP_IF_STATS RIP_IF_STATS;
typedef struct _RTM_IP_ROUTE RTM_IP_ROUTE;
typedef struct _RTP_HEADER_X RTP_HEADER_X;
typedef struct tagRemFORMATETC RemFORMATETC;
typedef struct tagRemSTGMEDIUM RemSTGMEDIUM;
typedef struct _wireSAFEARR_BSTR SAFEARR_BSTR;
typedef struct _SAP_IF_STATS SAP_IF_STATS;
typedef struct _SAP_MIB_BASE SAP_MIB_BASE;
typedef struct _SBinaryArray SBinaryArray;
typedef struct _SCHANNEL_ALG SCHANNEL_ALG;
typedef struct _SDoubleArray SDoubleArray;
typedef struct _SEGMENT_NOTE SEGMENT_NOTE;
typedef struct sess_overlay SESS_OVERLAY;
typedef struct _SHARE_INFO_0 SHARE_INFO_0;
typedef struct _SHARE_INFO_1 SHARE_INFO_1;
typedef struct _SHARE_INFO_2 SHARE_INFO_2;
typedef struct sockaddr_atm SOCKADDR_ATM;
typedef struct sockaddr_in6 SOCKADDR_IN6;
typedef struct sockaddr_ipx SOCKADDR_IPX;
typedef struct sockaddr_vns SOCKADDR_VNS;
typedef struct _tagSOFTDISTINFO SOFTDISTINFO;
typedef struct tagSOUNDSENTRYA SOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW SOUNDSENTRYW;
typedef struct _SPropProblem SPropProblem;
typedef unsigned char SQLTIMESTAMP;
typedef unsigned short SQLUSMALLINT;
typedef struct srv_inputbuf SRV_INPUTBUF;
typedef struct srv_listhead SRV_LISTHEAD;
typedef struct srv_loginrec SRV_LOGINREC;
typedef struct _SRestriction SRestriction;
typedef struct _STARTUPINFOA STARTUPINFOA;
typedef struct _STARTUPINFOW STARTUPINFOW;
typedef struct _STnefProblem STnefProblem;
struct ShellWindows;
typedef struct _TAPE_PREPARE TAPE_PREPARE;
typedef struct _TASK_TRIGGER TASK_TRIGGER;
typedef struct _37E4785F055768DB96FB0F6687850E13 TBINSERTMARK;
typedef struct _TEMP_BP_NOTE TEMP_BP_NOTE;
typedef struct _timecodedata TIMECODEDATA;
typedef struct tagTITLEBARINFO TITLEBARINFO;
typedef struct _TOKEN_GROUPS TOKEN_GROUPS;
typedef struct _TOKEN_SOURCE TOKEN_SOURCE;
typedef struct tp_info_sect TP_INFO_SECT;
typedef struct _USER_INFO_10 USER_INFO_10;
typedef struct _USER_INFO_11 USER_INFO_11;
typedef struct _USER_INFO_20 USER_INFO_20;
typedef struct _USER_INFO_21 USER_INFO_21;
typedef struct _USER_INFO_22 USER_INFO_22;
typedef short VARIANT_BOOL;
typedef struct _LDT_ENTRY VDMLDT_ENTRY;
typedef struct _tagWALLPAPEROPT WALLPAPEROPT;
typedef struct tWAVEFORMATEX WAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA WAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW WAVEOUTCAPSW;
typedef struct _WSAQuerySetA WSAQUERYSETA;
typedef struct _WSAQuerySetW WSAQUERYSETW;
typedef struct _8C6ACB55671DB169C8FCCCD9E0DAFA1D WSH_NBP_NAME;
typedef int (*XA_CLOSE_EPT)(char *, int, int);
enum _ACCESS_MODE {NOT_USED_ACCESS = 0x0,GRANT_ACCESS = 0x1,SET_ACCESS = 0x2,DENY_ACCESS = 0x3,REVOKE_ACCESS = 0x4,SET_AUDIT_SUCCESS = 0x5,SET_AUDIT_FAILURE = 0x6,};
struct _AgentEvents {struct _AgentEventsVtbl *lpVtbl;};
enum _CounterType {COUNTERTYPE_MESSAGES_IN_FOLDER = 0x0,COUNTERTYPE_BYTES_IN_FOLDER = 0x1,COUNTERTYPE_MESSAGES_ENTERING_FOLDER = 0x2,COUNTERTYPE_BYTES_ENTERING_FOLDER = 0x3,COUNTERTYPE_MESSAGES_LEAVING_FOLDER = 0x4,COUNTERTYPE_BYTES_LEAVING_FOLDER = 0x5,COUNTERTYPE_MESSAGES_TRANSFERRED_IN = 0x6,COUNTERTYPE_BYTES_TRANSFERRED_IN = 0x7,COUNTERTYPE_MESSAGES_TRANSFERRED_OUT = 0x8,COUNTERTYPE_BYTES_TRANSFERRED_OUT = 0x9,COUNTERTYPE_NDRS_IN = 0xA,COUNTERTYPE_NDRS_OUT = 0xB,COUNTERTYPE_ASSOCIATIONS = 0xC,COUNTERTYPE_USER_DEFINED = 0xD,COUNTERTYPE_LAST = 0xE,};
struct _CrtMemState {struct _CrtMemBlockHeader *pBlockHeader;unsigned int lCounts[5];unsigned int lSizes[5];unsigned int lHighWaterCount;unsigned int lTotalCount;};
enum _D3DFILLMODE {D3DFILL_POINT = 0x1,D3DFILL_WIREFRAME = 0x2,D3DFILL_SOLID = 0x3,D3DFILL_FORCE_DWORD = 0x7FFFFFFF,};
enum _FilterState {State_Stopped = 0x0,State_Paused = 0x1,State_Running = 0x2,};
typedef struct __JUMP_BUFFER _JUMP_BUFFER;
struct _RPC_VERSION {unsigned short MajorVersion;unsigned short MinorVersion;};
struct _Recordset15 {struct _Recordset15Vtbl *lpVtbl;};
enum __DEBUGLEVEL {D_PUBLIC = 0x0,D_PRIVATE = 0x1,D_ERROR = 0x2,D_WARNING = 0x3,D_STATUS = 0x4,D_ACTION = 0x5,D_OTHER = 0x6,D_LAST = 0x7,};
enum _tagPI_FLAGS {PI_PARSE_URL = 0x1,PI_FILTER_MODE = 0x2,PI_FORCE_ASYNC = 0x4,PI_USE_WORKERTHREAD = 0x8,PI_MIMEVERIFICATION = 0x10,PI_CLSIDLOOKUP = 0x20,PI_DATAPROGRESS = 0x40,PI_SYNCHRONOUS = 0x80,PI_APARTMENTTHREADED = 0x100,PI_CLASSINSTALL = 0x200,PD_FORCE_SWITCH = 0x10000,};
struct am_info_sect {unsigned int am_init_sect_len;unsigned char am_active;unsigned char reserv4;unsigned short num_tps;};
struct conv_overlay {unsigned int conv_entry_len;unsigned int conv_id;unsigned char reserv3[9];unsigned char state;unsigned char sess_id[8];unsigned char sync_level;unsigned char conv_type;unsigned int conv_group_id;};
struct define_trace {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char reserv3[8];unsigned char dt_set;unsigned char appc;unsigned char reserv4;unsigned char srpi;unsigned char sdlc;unsigned char tkn_rng_dlc;unsigned char pcnet_dlc;unsigned char dft;unsigned char acdi;unsigned char reserv5;unsigned char comm_serv;unsigned char ehllapi;unsigned char x25_api;unsigned char x25_dlc;unsigned char twinax;unsigned char reserv6;unsigned char lua_api;unsigned char etherand;unsigned char subsym;unsigned char reserv7[8];unsigned char reset_trc;unsigned short trunc;unsigned short strg_size;unsigned char reserv8[1];unsigned char phys_link[8];unsigned char reserv9[56];};
struct gw_info_sect {unsigned int gw_init_sect_len;unsigned short num_gw_lus;};
struct link_overlay {unsigned int link_entry_len;unsigned char link_id[12];unsigned char dlc_name[8];unsigned char adapter_num;unsigned char dest_addr_len;unsigned char dest_addr[32];unsigned char inbound_outbound;unsigned char state;unsigned char deact_link_flag;unsigned char reserv3;unsigned short num_sessions;unsigned short ru_size;unsigned short reserv4;unsigned char adj_fq_cp_name[17];unsigned char reserv5;unsigned char adj_node_type;unsigned char cp_cp_sess_spt;unsigned char conn_type;unsigned char ls_role;unsigned char line_type;unsigned char tg_number;unsigned int eff_capacity;unsigned char conn_cost;unsigned char byte_cost;unsigned char propagation_delay;unsigned char user_def_1;unsigned char user_def_2;unsigned char user_def_3;unsigned char security;unsigned char reserv6;};
struct lu62_overlay {unsigned int lu62_entry_len;unsigned int lu62_overlay_len;unsigned char lu_name[8];unsigned char lu_alias[8];unsigned short num_plus;unsigned char fqlu_name[17];unsigned char default_lu;unsigned char reserv3;unsigned char lu_local_addr;unsigned short lu_sess_lim;unsigned char max_tps;unsigned char lu_type;};
struct mc_confirmed {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
struct mc_send_data {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;unsigned char reserv3;unsigned short dlen;unsigned char *dptr;unsigned char type;unsigned char reserv4;};
struct mode_overlay {unsigned int mode_entry_len;unsigned char mode_name[8];unsigned short max_ru_size_upp;unsigned short max_ru_size_low;unsigned short max_neg_sess_lim;unsigned short curr_sess_lim;unsigned short min_win_lim;unsigned short min_lose_lim;unsigned short act_sess_count;unsigned short pend_sess_count;unsigned short auto_act_sess_count;unsigned short act_win_lim;unsigned short act_lose_lim;unsigned short term_count;unsigned int drain_target : 1;unsigned int drain_source : 1;unsigned int reserv3 : 6;unsigned int pacing_size : 8;unsigned int implicit_mode : 1;unsigned int reserv4 : 7;unsigned int reserv5 : 8;};
struct ms_info_sect {unsigned int ms_init_sect_len;unsigned char held_mds_mu_alerts;unsigned char held_nmvt_alerts;unsigned short num_fps;unsigned short total_fps;unsigned short num_ms_appls;unsigned short total_ms_appls;unsigned short num_act_trans;unsigned short total_act_trans;};
typedef int sig_atomic_t;
struct sockaddr_ipx {short sa_family;char sa_netnum[4];char sa_nodenum[6];unsigned short sa_socket;};
enum tagBINDSPEED {BINDSPEED_INDEFINITE = 0x1,BINDSPEED_MODERATE = 0x2,BINDSPEED_IMMEDIATE = 0x3,};
enum tagDVASPECT2 {DVASPECT_OPAQUE = 0x10,DVASPECT_TRANSPARENT = 0x20,};
enum tagFUNCFLAGS {FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,FUNCFLAG_FUSESGETLASTERROR = 0x80,FUNCFLAG_FDEFAULTCOLLELEM = 0x100,FUNCFLAG_FUIDEFAULT = 0x200,FUNCFLAG_FNONBROWSABLE = 0x400,FUNCFLAG_FREPLACEABLE = 0x800,FUNCFLAG_FIMMEDIATEBIND = 0x1000,};
enum tagHITRESULT {HITRESULT_OUTSIDE = 0x0,HITRESULT_TRANSPARENT = 0x1,HITRESULT_CLOSE = 0x2,HITRESULT_HIT = 0x3,};
enum tagMIMECONTF {MIMECONTF_MAILNEWS = 0x1,MIMECONTF_BROWSER = 0x2,MIMECONTF_MINIMAL = 0x4,MIMECONTF_SAVABLE_MAILNEWS = 0x100,MIMECONTF_SAVABLE_BROWSER = 0x200,MIMECONTF_PRIVCONVERTER = 0x10000,MIMECONTF_VALID = 0x20000,};
enum tagMSHLFLAGS {MSHLFLAGS_NORMAL = 0x0,MSHLFLAGS_TABLESTRONG = 0x1,MSHLFLAGS_TABLEWEAK = 0x2,MSHLFLAGS_NOPING = 0x4,};
enum tagMSIMODIFY {MSIMODIFY_REFRESH = 0x0,MSIMODIFY_INSERT = 0x1,MSIMODIFY_UPDATE = 0x2,MSIMODIFY_ASSIGN = 0x3,MSIMODIFY_REPLACE = 0x4,MSIMODIFY_MERGE = 0x5,MSIMODIFY_DELETE = 0x6,MSIMODIFY_INSERT_TEMPORARY = 0x7,MSIMODIFY_VALIDATE = 0x8,MSIMODIFY_VALIDATE_NEW = 0x9,MSIMODIFY_VALIDATE_FIELD = 0xA,MSIMODIFY_VALIDATE_DELETE = 0xB,};
enum tagOLERENDER {OLERENDER_NONE = 0x0,OLERENDER_DRAW = 0x1,OLERENDER_FORMAT = 0x2,OLERENDER_ASIS = 0x3,};
enum tagOLEUPDATE {OLEUPDATE_ALWAYS = 0x1,OLEUPDATE_ONCALL = 0x3,};
enum tagTYPEFLAGS {TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,TYPEFLAG_FOLEAUTOMATION = 0x100,TYPEFLAG_FRESTRICTED = 0x200,TYPEFLAG_FAGGREGATABLE = 0x400,TYPEFLAG_FREPLACEABLE = 0x800,TYPEFLAG_FDISPATCHABLE = 0x1000,TYPEFLAG_FREVERSEBIND = 0x2000,};
struct tp_info_sect {unsigned int tp_init_sect_len;unsigned short num_tps;unsigned short total_tps;};
typedef struct _userHPALETTE userHPALETTE;
typedef struct _ACCESS_LIST ACCESS_LIST;
struct ADOProperty;
typedef struct _ads_sortkey ADS_SORTKEY;
typedef struct _AE_CONNSTOP AE_CONNSTOP;
typedef struct _AE_NETLOGON AE_NETLOGON;
typedef struct _AFPROTOCOLS AFPROTOCOLS;
typedef struct _AMVPDIMINFO AMVPDIMINFO;
typedef struct tagANIMATEINFO ANIMATEINFO;
typedef struct _B6822E6B2532C41BAC9FA8CDDAB44A4D ATM_ADDRESS;
typedef struct _3EB284A884AA968851CCD5BE7E4B68CB ATM_BLLI_IE;
typedef struct BasicAudCapInfo AUDCAP_INFO;
typedef struct _AUDIT_ENTRY AUDIT_ENTRY;
typedef void ( *AUXIDLEPROC)();
typedef void ( *AUXMAINPROC)();
typedef struct _avioldindex AVIOLDINDEX;
typedef struct _avistdindex AVISTDINDEX;
struct AgentServer;
struct Application;
typedef struct _bidioptions BIDIOPTIONS;
typedef struct _BIN_RESULTS BIN_RESULTS;
typedef struct tagBOXEDITINFO BOXEDITINFO;
typedef struct _browseinfoA BROWSEINFOA;
typedef struct _browseinfoW BROWSEINFOW;
struct CCertConfig;
struct CCertPolicy;
typedef struct _charformat CHARFORMATA;
typedef struct _charformatw CHARFORMATW;
typedef struct tagCHARSETINFO CHARSETINFO;
typedef struct tagCHOOSEFONTA CHOOSEFONTA;
typedef struct tagCHOOSEFONTW CHOOSEFONTW;
typedef struct tagCLASSDETAIL CLASSDETAIL;
enum CLCTL_CODES {CLCTL_UNKNOWN = 0x0,CLCTL_GET_CHARACTERISTICS = 0x5,CLCTL_GET_FLAGS = 0x9,CLCTL_GET_CLASS_INFO = 0xD,CLCTL_GET_REQUIRED_DEPENDENCIES = 0x11,CLCTL_GET_NAME = 0x29,CLCTL_GET_RESOURCE_TYPE = 0x2D,CLCTL_GET_NODE = 0x31,CLCTL_GET_NETWORK = 0x35,CLCTL_GET_ID = 0x39,CLCTL_ENUM_COMMON_PROPERTIES = 0x51,CLCTL_GET_RO_COMMON_PROPERTIES = 0x55,CLCTL_GET_COMMON_PROPERTIES = 0x59,CLCTL_SET_COMMON_PROPERTIES = 0x40005E,CLCTL_VALIDATE_COMMON_PROPERTIES = 0x61,CLCTL_ENUM_PRIVATE_PROPERTIES = 0x79,CLCTL_GET_RO_PRIVATE_PROPERTIES = 0x7D,CLCTL_GET_PRIVATE_PROPERTIES = 0x81,CLCTL_SET_PRIVATE_PROPERTIES = 0x400086,CLCTL_VALIDATE_PRIVATE_PROPERTIES = 0x89,CLCTL_ADD_REGISTRY_CHECKPOINT = 0x4000A2,CLCTL_DELETE_REGISTRY_CHECKPOINT = 0x4000A6,CLCTL_GET_REGISTRY_CHECKPOINTS = 0xA9,CLCTL_GET_LOADBAL_PROCESS_LIST = 0xC9,CLCTL_STORAGE_GET_DISK_INFO = 0x191,CLCTL_STORAGE_GET_AVAILABLE_DISKS = 0x195,CLCTL_STORAGE_IS_PATH_VALID = 0x199,CLCTL_STORAGE_GET_ALL_AVAILABLE_DISKS = 0x80019D,CLCTL_DELETE = 0x500006,CLCTL_INSTALL_NODE = 0x50000A,CLCTL_EVICT_NODE = 0x50000E,CLCTL_ADD_DEPENDENCY = 0x500012,CLCTL_REMOVE_DEPENDENCY = 0x500016,CLCTL_ADD_OWNER = 0x50001A,CLCTL_REMOVE_OWNER = 0x50001E,CLCTL_SET_NAME = 0x500026,CLCTL_CLUSTER_NAME_CHANGED = 0x50002A,};
typedef struct _C588D60136F5233389A280E70F7EA459 CMC_message;
typedef signed int CM_END_TYPE;
typedef struct tagCOLORSCHEME COLORSCHEME;
typedef struct _CONFRECDIRA CONFRECDIRA;
typedef struct _CONFRECDIRW CONFRECDIRW;
typedef struct tagCONNECTDATA CONNECTDATA;
typedef struct tagCONTROLINFO CONTROLINFO;
typedef struct tagCONVCONTEXT CONVCONTEXT;
typedef struct _CONVDLLVECT CONVDLLVECT;
struct COpsProfile;
typedef struct _CRL_CONTEXT CRL_CONTEXT;
typedef struct _CSADDR_INFO CSADDR_INFO;
typedef struct _CTL_CONTEXT CTL_CONTEXT;
typedef struct tagCURSORSHAPE CURSORSHAPE;
struct ClusNetwork {struct ClusNetworkVtbl *lpVtbl;};
struct ClusResType {struct ClusResTypeVtbl *lpVtbl;};
struct CoMTSEvents;
enum CompareEnum {adCompareLessThan = 0x0,adCompareEqual = 0x1,adCompareGreaterThan = 0x2,adCompareNotEqual = 0x3,adCompareNotComparable = 0x4,};
typedef struct _D3DMATERIAL D3DMATERIAL;
typedef struct _D3DPrimCaps D3DPRIMCAPS;
typedef struct _D3DRMVERTEX D3DRMVERTEX;
typedef struct _D3DTLVERTEX D3DTLVERTEX;
typedef struct _D3DTRIANGLE D3DTRIANGLE;
typedef struct _D3DVIEWPORT D3DVIEWPORT;
typedef struct _94FF0DCDFF19E9D844EB9057038515A4 DAOCOLUMNID;
typedef struct tagDATE_STRUCT DATE_STRUCT;
typedef struct tagDBGROUPINFO DBGROUPINFO;
typedef struct tagDBPARAMETER DBPARAMETER;
typedef struct tagDBPARAMINFO DBPARAMINFO;
typedef struct tagDBPROPIDSET DBPROPIDSET;
enum DBRANGEENUM {DBRANGE_INCLUSIVESTART = 0x0,DBRANGE_INCLUSIVEEND = 0x0,DBRANGE_EXCLUSIVESTART = 0x1,DBRANGE_EXCLUSIVEEND = 0x2,DBRANGE_EXCLUDENULLS = 0x4,DBRANGE_PREFIX = 0x8,DBRANGE_MATCH = 0x10,};
typedef struct tagDBTIMESTAMP DBTIMESTAMP;
typedef unsigned short DBUSMALLINT;
typedef struct _DDOVERLAYFX DDOVERLAYFX;
typedef struct _DEBUG_EVENT DEBUG_EVENT;
typedef struct _dir_entryid DIR_ENTRYID;
typedef struct _DISK_RECORD DISK_RECORD;
typedef struct _8D5240EB4C2C3F8FC45B3D9D0343B483 DLC_SAP_LOG;
typedef struct _1C9ED8E2FE494C714F8336D090291E50 DLGTEMPLATE;
typedef struct _DOC_INFO_1A DOC_INFO_1A;
typedef struct _DOC_INFO_1W DOC_INFO_1W;
typedef struct _DOC_INFO_2A DOC_INFO_2A;
typedef struct _DOC_INFO_2W DOC_INFO_2W;
typedef struct _CFDE79073F41BFFF7E06FED73F276E8B DRAWDIBTIME;
typedef struct _DRAWPATRECT DRAWPATRECT;
typedef struct _DTBLMVDDLBX DTBLMVDDLBX;
struct DomainNames {struct DomainNamesVtbl *lpVtbl;};
typedef struct tagEDB_RSTMAPA EDB_RSTMAPA;
typedef struct tagEDB_RSTMAPW EDB_RSTMAPW;
typedef struct tagEMRALPHABLEND EMRALPHABLE;
typedef struct tagEMRANGLEARC EMRANGLEARC;
typedef struct tagEMRFILLPATH EMRFILLPATH;
typedef struct tagEMRFRAMERGN EMRFRAMERGN;
typedef struct tagEMRLINETO EMRMOVETOEX;
typedef struct tagEMRINVERTRGN EMRPAINTRGN;
typedef struct tagEMRPOLYDRAW EMRPOLYDRAW;
typedef struct tagEMRPOLYLINE EMRPOLYLINE;
typedef struct _endropfiles ENDROPFILES;
typedef struct _enprotected ENPROTECTED;
typedef struct tagEXTLOGFONTA EXTLOGFONTA;
typedef struct tagEXTLOGFONTW EXTLOGFONTW;
typedef struct _FILEPATHS_A FILEPATHS_A;
typedef struct _FILEPATHS_W FILEPATHS_W;
typedef struct _FILE_INFO_2 FILE_INFO_2;
typedef struct _FILE_INFO_3 FILE_INFO_3;
typedef struct _FILTER_INFO FILTER_INFO;
typedef struct _findtextexa FINDTEXTEXA;
typedef struct _findtextexw FINDTEXTEXW;
typedef struct _FOLDER_INFO FOLDER_INFO;
typedef struct _formatrange FORMATRANGE;
typedef int FXPT16DOT16;
struct FolderItems {struct FolderItemsVtbl *lpVtbl;};
typedef struct _3E0A08AB4DFF2F80B8E74D39D385CA44 GLOBALENTRY;
typedef struct GLUnurbs GLUnurbsObj;
typedef struct tagHANDLETABLE HANDLETABLE;
typedef struct BDN_SERVICE *HBDNSERVICE;
typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HCONVLIST__ {int unused;};
struct HDRVPHONE__ {int unused;};
typedef struct tagHEAPENTRY32 HEAPENTRY32;
struct HINSTANCE__ {int unused;};
struct HMETAFILE__ {int unused;};
struct HMIDISTRM__ {int unused;};
struct HMIXEROBJ__ {int unused;};
struct HPHONEAPP__ {int unused;};
struct HPROVIDER__ {int unused;};
struct HRCRESULT__ {int unused;};
typedef struct _HSE_TF_INFO HSE_TF_INFO;
struct HTAPICALL__ {int unused;};
struct HTAPILINE__ {int unused;};
struct HTERMINAL__ {int unused;};
struct HTMLBGsound;
struct HTMLHistory;
struct HTMLWindow2;
struct Hierarchies {struct HierarchiesVtbl *lpVtbl;};
struct IABProvider {struct IABProviderVtbl *lpVtbl;};
struct IADsMembers {struct IADsMembersVtbl *lpVtbl;};
struct IADsService {struct IADsServiceVtbl *lpVtbl;};
struct IADsSession {struct IADsSessionVtbl *lpVtbl;};
struct IAMCrossbar {struct IAMCrossbarVtbl *lpVtbl;};
struct IAMPlayList {struct IAMPlayListVtbl *lpVtbl;};
struct IASQLOLEKey {struct IASQLOLEKeyVtbl *lpVtbl;};
struct IAccessible {struct IAccessibleVtbl *lpVtbl;};
struct IAdviseSink {struct IAdviseSinkVtbl *lpVtbl;};
struct IAlterIndex {struct IAlterIndexVtbl *lpVtbl;};
struct IAlterTable {struct IAlterTableVtbl *lpVtbl;};
struct IAsyncSetup {struct IAsyncSetupVtbl *lpVtbl;};
struct IBPCDevices {struct IBPCDevicesVtbl *lpVtbl;};
struct IBPCMessage {struct IBPCMessageVtbl *lpVtbl;};
struct IBPCSuspend {struct IBPCSuspendVtbl *lpVtbl;};
struct IBaseFilter {struct IBaseFilterVtbl *lpVtbl;};
struct IBasicAudio {struct IBasicAudioVtbl *lpVtbl;};
struct IBasicVideo {struct IBasicVideoVtbl *lpVtbl;};
typedef struct _5C25098378D11CF2DF13A353B46EE415 ICDRAWBEGIN;
struct ICertConfig {struct ICertConfigVtbl *lpVtbl;};
struct ICertPolicy {struct ICertPolicyVtbl *lpVtbl;};
struct IChannelMgr {struct IChannelMgrVtbl *lpVtbl;};
struct IClassAdmin {struct IClassAdminVtbl *lpVtbl;};
struct IComBinding {struct IComBindingVtbl *lpVtbl;};
typedef struct tag_IDFINSTCAPS IDFINSTCAPS;
typedef struct tag_IDFINSTINFO IDFINSTINFO;
struct IDSAttrMgmt {struct IDSAttrMgmtVtbl *lpVtbl;};
struct IDataFilter {struct IDataFilterVtbl *lpVtbl;};
struct IDataObject {struct IDataObjectVtbl *lpVtbl;};
struct IDirect3DRM {struct IDirect3DRMVtbl *lpVtbl;};
struct IDirectDraw {struct IDirectDrawVtbl *lpVtbl;};
struct IDirectPlay {struct IDirectPlayVtbl *lpVtbl;};
struct IDispatchEx {struct IDispatchExVtbl *lpVtbl;};
struct IDropSource {struct IDropSourceVtbl *lpVtbl;};
struct IDropTarget {struct IDropTargetVtbl *lpVtbl;};
struct IDvdControl {struct IDvdControlVtbl *lpVtbl;};
struct IEnumHLITEM {struct IEnumHLITEMVtbl *lpVtbl;};
struct IEnumIDList {struct IEnumIDListVtbl *lpVtbl;};
struct IEnumString {struct IEnumStringVtbl *lpVtbl;};
struct IFilterInfo {struct IFilterInfoVtbl *lpVtbl;};
struct IHTMLDialog {struct IHTMLDialogVtbl *lpVtbl;};
struct IHTMLScreen {struct IHTMLScreenVtbl *lpVtbl;};
struct IHlinkFrame {struct IHlinkFrameVtbl *lpVtbl;};
struct IMAPIFolder {struct IMAPIFolderVtbl *lpVtbl;};
struct IMAPIStatus {struct IMAPIStatusVtbl *lpVtbl;};
struct IMSProvider {struct IMSProviderVtbl *lpVtbl;};
struct IMTSLocater {struct IMTSLocaterVtbl *lpVtbl;};
struct IMediaEvent {struct IMediaEventVtbl *lpVtbl;};
struct IMemoryData {struct IMemoryDataVtbl *lpVtbl;};
struct IOleControl {struct IOleControlVtbl *lpVtbl;};
struct IOpenRowset {struct IOpenRowsetVtbl *lpVtbl;};
typedef struct _IPXMIB_BASE IPXMIB_BASE;
typedef struct _IPX_IF_INFO IPX_IF_INFO;
typedef union _IPX_MIB_ROW IPX_MIB_ROW;
typedef struct _IPX_NETWORK IPX_NETWORK;
typedef struct _IPX_SERVICE IPX_SERVICE;
struct IReadCookie {struct IReadCookieVtbl *lpVtbl;};
struct IRecordInfo {struct IRecordInfoVtbl *lpVtbl;};
struct IRowsetFind {struct IRowsetFindVtbl *lpVtbl;};
struct IRowsetInfo {struct IRowsetInfoVtbl *lpVtbl;};
struct IRowsetKeys {struct IRowsetKeysVtbl *lpVtbl;};
struct IRowsetView {struct IRowsetViewVtbl *lpVtbl;};
struct IRpcOptions {struct IRpcOptionsVtbl *lpVtbl;};
struct IShellLinkA {struct IShellLinkAVtbl *lpVtbl;};
struct IShellLinkW {struct IShellLinkWVtbl *lpVtbl;};
struct IShellView2 {struct IShellView2Vtbl *lpVtbl;};
struct IStringList {struct IStringListVtbl *lpVtbl;};
struct ITCallTones {struct ITCallTonesVtbl *lpVtbl;};
struct IViewFilter {struct IViewFilterVtbl *lpVtbl;};
struct IViewObject {struct IViewObjectVtbl *lpVtbl;};
struct IViewRowset {struct IViewRowsetVtbl *lpVtbl;};
struct IWebBrowser {struct IWebBrowserVtbl *lpVtbl;};
struct IXMLElement {struct IXMLElementVtbl *lpVtbl;};
struct IXPProvider {struct IXPProviderVtbl *lpVtbl;};
typedef void *I_RPC_MUTEX;
typedef double JAVA_DOUBLE;
typedef struct _JOB_INFO_1A JOB_INFO_1A;
typedef struct _JOB_INFO_1W JOB_INFO_1W;
typedef struct _JOB_INFO_2A JOB_INFO_2A;
typedef struct _JOB_INFO_2W JOB_INFO_2W;
typedef struct tagKERNINGPAIR KERNINGPAIR;
typedef union _5AC28848A8A0188E71C0B88AB8CF796B KSDATARANGE;
typedef struct _KSEVENTDATA KSEVENTDATA;
typedef struct _52BD71AC0F61B53F3E44045ED088295E KSFRAMETIME;
typedef struct ldapmsg LDAPMessage;
typedef struct berval LDAP_BERVAL;
typedef struct lineappinfo_tag LINEAPPINFO;
typedef struct linedevcaps_tag LINEDEVCAPS;
typedef struct lineforward_tag LINEFORWARD;
typedef struct linemessage_tag LINEMESSAGE;
typedef struct _ADDR_ALIAS *LPADDRALIAS;
typedef struct _78DD00BDF4D9248AAFB252631B04B74F *LPADVISEOBJ;
typedef struct _AE_ACCLIM *LPAE_ACCLIM;
typedef struct _AE_ACLMOD *LPAE_ACLMOD;
typedef struct _AE_UASMOD *LPAE_UASMOD;
typedef struct tagAXESLISTA *LPAXESLISTA;
typedef struct tagAXESLISTW *LPAXESLISTW;
typedef struct tagAXISINFOA *LPAXISINFOA;
typedef struct tagAXISINFOW *LPAXISINFOW;
typedef struct BDN_VALUE *LPBDN_VALUE;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct tagBOXLAYOUT *LPBOXLAYOUT;
typedef struct tagCapStatus *LPCAPSTATUS;
typedef  DIEFFECT *LPCDIEFFECT;
typedef struct _CONFADDRA *LPCONFADDRA;
typedef struct _CONFADDRW *LPCONFADDRW;
typedef struct _CONFGUIDA *LPCONFGUIDA;
typedef struct _CONFGUIDW *LPCONFGUIDW;
typedef struct _CONFINFOA *LPCONFINFOA;
typedef struct _CONFINFOW *LPCONFINFOW;
typedef ICopyHookA *LPCOPYHOOKA;
typedef ICopyHookW *LPCOPYHOOKW;
typedef struct _cpinfoexA *LPCPINFOEXA;
typedef struct _cpinfoexW *LPCPINFOEXW;
typedef struct tagCWPSTRUCT *LPCWPSTRUCT;
typedef struct _D3DBRANCH *LPD3DBRANCH;
typedef struct _D3DLIGHT2 *LPD3DLIGHT2;
typedef struct _D3DMATRIX *LPD3DMATRIX;
typedef struct _D3DSTATUS *LPD3DSTATUS;
typedef struct _D3DVECTOR *LPD3DVECTOR;
typedef struct _D3DVERTEX *LPD3DVERTEX;
typedef struct DIDEVCAPS *LPDIDEVCAPS;
typedef struct DIPROPCAL *LPDIPROPCAL;
typedef struct IDirect3D2 *LPDIRECT3D2;
typedef struct _DRAGINFOA *LPDRAGINFOA;
typedef struct _DRAGINFOW *LPDRAGINFOW;
typedef struct _DROPFILES *LPDROPFILES;
typedef struct _DTBLDDLBX *LPDTBLDDLBX;
typedef struct _DTBLLABEL *LPDTBLLABEL;
typedef struct tagENUMTYPEA *LPENUMTYPEA;
typedef struct tagENUMTYPEW *LPENUMTYPEW;
typedef IErrorInfo *LPERRORINFO;
typedef struct _ERROR_LOG *LPERROR_LOG;
typedef struct tagEXCEPINFO *LPEXCEPINFO;
typedef struct tagEXTLOGPEN *LPEXTLOGPEN;
typedef struct tagLVFINDINFOA *LPFINDINFOA;
typedef struct tagLVFINDINFOW *LPFINDINFOW;
typedef struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 *LPFLATENTRY;
typedef struct _FMS_LOADA *LPFMS_LOADA;
typedef struct _FMS_LOADW *LPFMS_LOADW;
typedef struct tagFORMATETC *LPFORMATETC;
typedef IHlinkSite *LPHLINKSITE;
typedef struct tag_IDFHEADER *LPIDFHEADER;
typedef struct tag_IDFKEYMAP *LPIDFKEYMAP;
typedef IInternet *LPIINTERNET;
typedef struct _IMAGEINFO *LPIMAGEINFO;
typedef struct tagIMECOLORS *LPIMECOLORS;
typedef struct tagIMESTRUCT *LPIMESTRUCT;
typedef struct tagINPPARAMS *LPINPPARAMS;
typedef struct joyinfoex_tag *LPJOYINFOEX;
typedef ILockBytes *LPLOCKBYTES;
typedef struct tagLVCOLUMNA *LPLVCOLUMNA;
typedef struct tagLVCOLUMNW *LPLVCOLUMNW;
typedef IMallocSpy *LPMALLOCSPY;
typedef struct _MAPIERROR *LPMAPIERROR;
typedef struct IMAPITable *LPMAPITABLE;
typedef struct tagMOUSEKEYS *LPMOUSEKEYS;
typedef struct BDN_RSVP *LPMSBDNRSVP;
typedef struct tagNMHEADERA *LPNMHEADERA;
typedef struct tagNMHEADERW *LPNMHEADERW;
typedef struct _NRESARRAY *LPNRESARRAY;
typedef struct _OFNOTIFYA *LPOFNOTIFYA;
typedef struct _OFNOTIFYW *LPOFNOTIFYW;
typedef IOleCache2 *LPOLECACHE2;
typedef IOleObject *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef IOleWindow *LPOLEWINDOW;
typedef struct optdata_dn *LPOPTDATADN;
typedef struct tagPARAMDATA *LPPARAMDATA;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagPENPACKET *LPPENPACKET;
typedef struct phonecaps_tag *LPPHONECAPS;
typedef struct tagPOLYTEXTA *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW *LPPOLYTEXTW;
typedef struct tagPDA *LPPRINTDLGA;
typedef struct tagPDW *LPPRINTDLGW;
typedef struct IProfAdmin *LPPROFADMIN;
typedef struct _PSHNOTIFY *LPPSHNOTIFY;
typedef struct _ReadState *LPREADSTATE;
typedef struct tagREBARINFO *LPREBARINFO;
typedef struct _riffchunk *LPRIFFCHUNK;
typedef struct SchedSess *LPSCHEDSESS;
typedef struct _SC_ACTION *LPSC_ACTION;
typedef IShellIcon *LPSHELLICON;
typedef IShellView *LPSHELLVIEW;
typedef struct _STD_ALERT *LPSTD_ALERT;
typedef struct tagSTYLEBUFA *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW *LPSTYLEBUFW;
typedef ISurrogate *LPSURROGATE;
typedef struct ITableData *LPTABLEDATA;
typedef struct _F77B4E368325CF7BDE015CEDC90789C7 *LPTRACEINFO;
typedef struct _TRIVERTEX *LPTRIVERTEX;
typedef struct tagTVITEMEXA *LPTVITEMEXA;
typedef struct tagTVITEMEXW *LPTVITEMEXW;
typedef ITypeInfo2 *LPTYPEINFO2;
typedef struct varstring_tag *LPVARSTRING;
typedef struct tagWAPPCDATA *LPWAPPCDATA;
typedef struct tagWCPICDATA *LPWCPICDATA;
typedef struct tagWINDOWPOS *LPWINDOWPOS;
typedef struct tagWNDCLASSA *LPWNDCLASSA;
typedef struct tagWNDCLASSW *LPWNDCLASSW;
typedef struct tagLVFINDINFOA LVFINDINFOA;
typedef struct tagLVFINDINFOW LVFINDINFOW;
enum MACRO_AADBE {AADBE_ADD_ENTRY = 0x1,AADBE_DEL_ENTRY = 0x2,};
enum MACRO_ABORT {ABORT_XP_HEADER_OPERATION = 0x200000,};
enum MACRO_AB_DT {AB_DT_CONTAINER = 0x100,AB_DT_TEMPLATE = 0x101,AB_DT_OOUSER = 0x102,AB_DT_SEARCH = 0x200,};
enum MACRO_AB_NO {AB_NO_DIALOG = 0x1,};
enum MACRO_ACMDM {ACMDM_USER = 0x4000,ACMDM_RESERVED_LOW = 0x6000,ACMDM_RESERVED_HIGH = 0x6FFF,ACMDM_BASE = 0x6000,ACMDM_DRIVER_ABOUT = 0x600B,};
enum MACRO_ACTRL {ACTRL_RESERVED = 0x0,ACTRL_PERM_1 = 0x1,ACTRL_PERM_2 = 0x2,ACTRL_PERM_3 = 0x4,ACTRL_PERM_4 = 0x8,ACTRL_PERM_5 = 0x10,ACTRL_PERM_6 = 0x20,ACTRL_PERM_7 = 0x40,ACTRL_PERM_8 = 0x80,ACTRL_PERM_9 = 0x100,ACTRL_PERM_10 = 0x200,ACTRL_PERM_11 = 0x400,ACTRL_PERM_12 = 0x800,ACTRL_PERM_13 = 0x1000,ACTRL_PERM_14 = 0x2000,ACTRL_PERM_15 = 0x4000,ACTRL_PERM_16 = 0x8000,ACTRL_PERM_17 = 0x10000,ACTRL_PERM_18 = 0x20000,ACTRL_PERM_19 = 0x40000,ACTRL_PERM_20 = 0x80000,ACTRL_ACCESS_ALLOWED = 0x1,ACTRL_ACCESS_DENIED = 0x2,ACTRL_AUDIT_SUCCESS = 0x4,ACTRL_AUDIT_FAILURE = 0x8,ACTRL_ACCESS_PROTECTED = 0x1,ACTRL_SYSTEM_ACCESS = 0x4000000,ACTRL_DELETE = 0x8000000,ACTRL_READ_CONTROL = 0x10000000,ACTRL_CHANGE_ACCESS = 0x20000000,ACTRL_CHANGE_OWNER = 0x40000000,ACTRL_SYNCHRONIZE = 0x80000000,ACTRL_STD_RIGHTS_ALL = 0xF8000000,ACTRL_DS_OPEN = 0x0,ACTRL_DS_CREATE_CHILD = 0x1,ACTRL_DS_DELETE_CHILD = 0x2,ACTRL_DS_LIST = 0x4,ACTRL_DS_SELF = 0x8,ACTRL_DS_READ_PROP = 0x10,ACTRL_DS_WRITE_PROP = 0x20,ACTRL_FILE_READ = 0x1,ACTRL_FILE_WRITE = 0x2,ACTRL_FILE_APPEND = 0x4,ACTRL_FILE_READ_PROP = 0x8,ACTRL_FILE_WRITE_PROP = 0x10,ACTRL_FILE_EXECUTE = 0x20,ACTRL_FILE_READ_ATTRIB = 0x40,ACTRL_FILE_WRITE_ATTRIB = 0x80,ACTRL_DIR_LIST = 0x1,ACTRL_DIR_CREATE_OBJECT = 0x2,ACTRL_DIR_CREATE_CHILD = 0x4,ACTRL_DIR_DELETE_CHILD = 0x8,ACTRL_DIR_TRAVERSE = 0x20,ACTRL_KERNEL_TERMINATE = 0x1,ACTRL_KERNEL_THREAD = 0x2,ACTRL_KERNEL_VM = 0x4,ACTRL_KERNEL_VM_READ = 0x8,ACTRL_KERNEL_VM_WRITE = 0x10,ACTRL_KERNEL_DUP_HANDLE = 0x20,ACTRL_KERNEL_PROCESS = 0x40,ACTRL_KERNEL_SET_INFO = 0x80,ACTRL_KERNEL_GET_INFO = 0x100,ACTRL_KERNEL_CONTROL = 0x200,ACTRL_KERNEL_ALERT = 0x400,ACTRL_KERNEL_GET_CONTEXT = 0x800,ACTRL_KERNEL_SET_CONTEXT = 0x1000,ACTRL_KERNEL_TOKEN = 0x2000,ACTRL_KERNEL_IMPERSONATE = 0x4000,ACTRL_KERNEL_DIMPERSONATE = 0x8000,ACTRL_PRINT_SADMIN = 0x1,ACTRL_PRINT_SLIST = 0x2,ACTRL_PRINT_PADMIN = 0x4,ACTRL_PRINT_PUSE = 0x8,ACTRL_PRINT_JADMIN = 0x10,ACTRL_SVC_GET_INFO = 0x1,ACTRL_SVC_SET_INFO = 0x2,ACTRL_SVC_STATUS = 0x4,ACTRL_SVC_LIST = 0x8,ACTRL_SVC_START = 0x10,ACTRL_SVC_STOP = 0x20,ACTRL_SVC_PAUSE = 0x40,ACTRL_SVC_INTERROGATE = 0x80,ACTRL_SVC_UCONTROL = 0x100,ACTRL_REG_QUERY = 0x1,ACTRL_REG_SET = 0x2,ACTRL_REG_CREATE_CHILD = 0x4,ACTRL_REG_LIST = 0x8,ACTRL_REG_NOTIFY = 0x10,ACTRL_REG_LINK = 0x20,ACTRL_WIN_CLIPBRD = 0x1,ACTRL_WIN_GLOBAL_ATOMS = 0x2,ACTRL_WIN_CREATE = 0x4,ACTRL_WIN_LIST_DESK = 0x8,ACTRL_WIN_LIST = 0x10,ACTRL_WIN_READ_ATTRIBS = 0x20,ACTRL_WIN_WRITE_ATTRIBS = 0x40,ACTRL_WIN_SCREEN = 0x80,ACTRL_WIN_EXIT = 0x100,ACTRL_ACCESS_NO_OPTIONS = 0x0,ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES = 0x1,};
enum MACRO_ADMIN {ADMIN_STATE_DISABLED = 1,ADMIN_STATE_ENABLED = 2,ADMIN_STATE_ENABLED_ONLY_FOR_NETBIOS_STATIC_ROUTING = 3,ADMIN_STATE_ENABLED_ONLY_FOR_OPER_STATE_UP = 4,};
enum MACRO_AF_OP {AF_OP_PRINT = 0x1,AF_OP_COMM = 0x2,AF_OP_SERVER = 0x4,AF_OP_ACCOUNTS = 0x8,AF_SETTABLE_BITS = 0xF,};
enum MACRO_AGAIN {WSATRY_AGAIN = 11002,TRY_AGAIN = 11002,};
enum MACRO_AGENT {AGENT_VERSION_MAJOR = 1,AGENT_VERSION_MINOR = 5,};
enum MACRO_ALERT {ALERT_SYSTEM_INFORMATIONAL = 1,ALERT_SYSTEM_WARNING = 2,ALERT_SYSTEM_ERROR = 3,ALERT_SYSTEM_QUERY = 4,ALERT_SYSTEM_CRITICAL = 5,};
enum MACRO_ALIGN {ALIGN_SIZE = 0x8,ALIGN_SHIFT = 0x7,ALIGN_MASK = 0xFFFFFFF8,};
enum MACRO_ALINF {ALINF_QUIET = 4,ALINF_NGCONV = 8,ALINF_UPDHLPDLLS = 16,ALINF_BKINSTALL = 32,ALINF_ROLLBACK = 64,ALINF_CHECKBKDATA = 128,ALINF_ROLLBKDOALL = 256,ALINF_DELAYREGISTEROCX = 512,};
enum MACRO_ALPHA {ALPHA_UNKNOWN = 0,ALPHA_MEMORY = 1,ALPHA_FP_MEMORY = 2,ALPHA_MEMSPC = 3,ALPHA_JUMP = 4,ALPHA_BRANCH = 5,ALPHA_FP_BRANCH = 6,ALPHA_OPERATE = 7,ALPHA_LITERAL = 8,ALPHA_FP_OPERATE = 9,ALPHA_FP_CONVERT = 10,ALPHA_CALLPAL = 11,ALPHA_EV4_PR = 12,ALPHA_EV4_MEM = 13,ALPHA_EV4_REI = 14,};
enum MACRO_AMDDS {AMDDS_NONE = 0x0,AMDDS_DCIPS = 0x1,AMDDS_PS = 0x2,AMDDS_RGBOVR = 0x4,AMDDS_YUVOVR = 0x8,AMDDS_RGBOFF = 0x10,AMDDS_YUVOFF = 0x20,AMDDS_RGBFLP = 0x40,AMDDS_YUVFLP = 0x80,AMDDS_ALL = 0xFF,AMDDS_DEFAULT = 0xFF,AMDDS_YUV = 0xA8,AMDDS_RGB = 0x54,AMDDS_PRIMARY = 0x3,};
enum MACRO_AS400 {AS400 = 7,SQLBASE = 8,};
enum MACRO_ASYNC {ASYNC_MODE_COMPATIBILITY = 0x1,ASYNC_MODE_DEFAULT = 0x0,};
enum MACRO_ATAPI {ATAPI_ID_CMD = 0xA1,ID_CMD = 0xEC,SMART_CMD = 0xB0,};
enum MACRO_AUDIT {AUDIT_ALLOW_NO_PRIVILEGE = 0x1,};
enum MACRO_AVIIF {AVIIF_CONTROLFRAME = 0x200,};
enum MACRO_AVISF {AVISF_DISABLED = 0x1,AVISF_VIDEO_PALCHANGES = 0x10000,};
enum MACRO_BEGIN {BEGIN_DEFERRED = 0x1,};
enum MACRO_BLOCK {_FREE_BLOCK = 0,_NORMAL_BLOCK = 1,_CRT_BLOCK = 2,_IGNORE_BLOCK = 3,_CLIENT_BLOCK = 4,};
enum MACRO_BRUSH {WHITE_BRUSH = 0,LTGRAY_BRUSH = 1,GRAY_BRUSH = 2,DKGRAY_BRUSH = 3,BLACK_BRUSH = 4,NULL_BRUSH = 5,HOLLOW_BRUSH = 5,};
enum MACRO_BWARN {BWARN_ACCNT_EXISTS = 0x80000088,BWARN_OVERRIDE_PDC_NOT_FOUND = 0x80000089,BWARN_DELETE_TARGET_DOES_NOT_EXIST = 0x8000008A,BWARN_DELETE_ACCOUNT_NOT_FOUND = 0x8000008B,BWARN_DELETE_DOMAIN_NOT_FOUND = 0x8000008C,BWARN_ASSOC_ACCOUNT_NOT_FOUND = 0x8000008D,BWARN_NO_OBJ_PERM_ADMIN_ACCOUNT = 0x8000008E,BWARN_NO_OBJ_ADMIN_ACCOUNT = 0x8000008F,BWARN_NO_OBJ_USER_ACCOUNT = 0x80000090,BWARN_NO_DEFAULT_ACCOUNT = 0x80000091,BWARN_COULD_NOT_CREATE_SD = 0x80000092,};
enum MACRO_CACHE {CACHE_E_FIRST = 0x80040170,CACHE_E_LAST = 0x8004017F,CACHE_S_FIRST = 0x40170,CACHE_S_LAST = 0x4017F,};
enum MACRO_CAUSE {CAUSE_LOC_USER = 0x0,CAUSE_LOC_PRIVATE_LOCAL = 0x1,CAUSE_LOC_PUBLIC_LOCAL = 0x2,CAUSE_LOC_TRANSIT_NETWORK = 0x3,CAUSE_LOC_PUBLIC_REMOTE = 0x4,CAUSE_LOC_PRIVATE_REMOTE = 0x5,CAUSE_LOC_INTERNATIONAL_NETWORK = 0x6,CAUSE_LOC_BEYOND_INTERWORKING = 0xA,CAUSE_UNALLOCATED_NUMBER = 0x1,CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK = 0x2,CAUSE_NO_ROUTE_TO_DESTINATION = 0x3,CAUSE_VPI_VCI_UNACCEPTABLE = 0xA,CAUSE_NORMAL_CALL_CLEARING = 0x10,CAUSE_USER_BUSY = 0x11,CAUSE_NO_USER_RESPONDING = 0x12,CAUSE_CALL_REJECTED = 0x15,CAUSE_NUMBER_CHANGED = 0x16,CAUSE_USER_REJECTS_CLIR = 0x17,CAUSE_DESTINATION_OUT_OF_ORDER = 0x1B,CAUSE_INVALID_NUMBER_FORMAT = 0x1C,CAUSE_STATUS_ENQUIRY_RESPONSE = 0x1E,CAUSE_NORMAL_UNSPECIFIED = 0x1F,CAUSE_VPI_VCI_UNAVAILABLE = 0x23,CAUSE_NETWORK_OUT_OF_ORDER = 0x26,CAUSE_TEMPORARY_FAILURE = 0x29,CAUSE_ACCESS_INFORMAION_DISCARDED = 0x2B,CAUSE_NO_VPI_VCI_AVAILABLE = 0x2D,CAUSE_RESOURCE_UNAVAILABLE = 0x2F,CAUSE_QOS_UNAVAILABLE = 0x31,CAUSE_USER_CELL_RATE_UNAVAILABLE = 0x33,CAUSE_BEARER_CAPABILITY_UNAUTHORIZED = 0x39,CAUSE_BEARER_CAPABILITY_UNAVAILABLE = 0x3A,CAUSE_OPTION_UNAVAILABLE = 0x3F,CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED = 0x41,CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS = 0x49,CAUSE_INVALID_CALL_REFERENCE = 0x51,CAUSE_CHANNEL_NONEXISTENT = 0x52,CAUSE_INCOMPATIBLE_DESTINATION = 0x58,CAUSE_INVALID_ENDPOINT_REFERENCE = 0x59,CAUSE_INVALID_TRANSIT_NETWORK_SELECTION = 0x5B,CAUSE_TOO_MANY_PENDING_ADD_PARTY = 0x5C,CAUSE_AAL_PARAMETERS_UNSUPPORTED = 0x5D,CAUSE_MANDATORY_IE_MISSING = 0x60,CAUSE_UNIMPLEMENTED_MESSAGE_TYPE = 0x61,CAUSE_UNIMPLEMENTED_IE = 0x63,CAUSE_INVALID_IE_CONTENTS = 0x64,CAUSE_INVALID_STATE_FOR_MESSAGE = 0x65,CAUSE_RECOVERY_ON_TIMEOUT = 0x66,CAUSE_INCORRECT_MESSAGE_LENGTH = 0x68,CAUSE_PROTOCOL_ERROR = 0x6F,CAUSE_COND_UNKNOWN = 0x0,CAUSE_COND_PERMANENT = 0x1,CAUSE_COND_TRANSIENT = 0x2,CAUSE_REASON_USER = 0x0,CAUSE_REASON_IE_MISSING = 0x4,CAUSE_REASON_IE_INSUFFICIENT = 0x8,CAUSE_PU_PROVIDER = 0x0,CAUSE_PU_USER = 0x8,CAUSE_NA_NORMAL = 0x0,CAUSE_NA_ABNORMAL = 0x4,};
enum MACRO_CBEIF {CBEIF_TEXT = 0x1,CBEIF_IMAGE = 0x2,CBEIF_SELECTEDIMAGE = 0x4,CBEIF_OVERLAY = 0x8,CBEIF_INDENT = 0x10,CBEIF_LPARAM = 0x20,CBEIF_DI_SETITEM = 0x10000000,};
enum MACRO_CBENF {CBENF_KILLFOCUS = 1,CBENF_RETURN = 2,CBENF_ESCAPE = 3,CBENF_DROPDOWN = 4,};
enum MACRO_CCERR {CCERR_CHOOSECOLORCODES = 0x5000,};
enum MACRO_CDERR {CDERR_DIALOGFAILURE = 0xFFFF,CDERR_GENERALCODES = 0x0,CDERR_STRUCTSIZE = 0x1,CDERR_INITIALIZATION = 0x2,CDERR_NOTEMPLATE = 0x3,CDERR_NOHINSTANCE = 0x4,CDERR_LOADSTRFAILURE = 0x5,CDERR_FINDRESFAILURE = 0x6,CDERR_LOADRESFAILURE = 0x7,CDERR_LOCKRESFAILURE = 0x8,CDERR_MEMALLOCFAILURE = 0x9,CDERR_MEMLOCKFAILURE = 0xA,CDERR_NOHOOK = 0xB,CDERR_REGISTERMSGFAIL = 0xC,};
enum MACRO_CESTR {CESTR = 11,};
enum MACRO_CFERR {CFERR_CHOOSEFONTCODES = 0x2000,CFERR_NOFONTS = 0x2001,CFERR_MAXLESSTHANMIN = 0x2002,};
enum MACRO_CHARS {CHARS_IN_GUID = 39,};
enum MACRO_CHECK {CHECK_SENDER = 0x1,};
enum MACRO_CLASS {CLASS_MONITOR = 1835955314,CLASS_PRINTER = 1886549106,CLASS_SCANNER = 1935896178,CLASS_LINK = 1818848875,CLASS_ABSTRACT = 1633842036,CLASS_COLORSPACE = 1936744803,CLASS_NAMED = 1852662636,};
enum MACRO_CLCTL {CLCTL_INTERNAL_SHIFT = 20,CLCTL_USER_SHIFT = 21,CLCTL_MODIFY_SHIFT = 22,CLCTL_GLOBAL_SHIFT = 23,};
enum MACRO_CLEAR {CLEAR_READ_FLAG = 0x4,};
enum MACRO_CNLEN {CNLEN = 15,};
enum MACRO_COLOR {COLOR_ADJ_MIN = -100,COLOR_ADJ_MAX = 100,};
enum MACRO_CONFN {CONFN_CONFERENCE_INIT = 0x1,CONFN_CONFERENCE_START = 0x2,CONFN_CONFERENCE_STOP = 0x3,CONFN_CONFERENCE_ERROR = 0x4,CONFN_USER_ADDED = 0x11,CONFN_USER_REMOVED = 0x12,CONFN_USER_UPDATE = 0x13,CONFN_PEER_ADDED = 0x21,CONFN_PEER_REMOVED = 0x22,CONFN_WINDOW_SHARED = 0x41,CONFN_WINDOW_UNSHARED = 0x42,CONFN_DATA_SENT = 0x101,CONFN_DATA_RECEIVED = 0x102,CONFN_FILESEND_START = 0x111,CONFN_FILESEND_PROGRESS = 0x112,CONFN_FILESEND_COMPLETE = 0x113,CONFN_FILESEND_ERROR = 0x114,CONFN_FILERECEIVE_START = 0x121,CONFN_FILERECEIVE_PROGRESS = 0x122,CONFN_FILERECEIVE_COMPLETE = 0x123,CONFN_FILERECEIVE_ERROR = 0x124,};
enum MACRO_CP_37 {CP_37 = 37,CP_273 = 273,CP_277 = 277,CP_278 = 278,CP_280 = 280,CP_284 = 284,CP_285 = 285,CP_290 = 290,CP_297 = 297,CP_423 = 423,CP_500 = 500,CP_875 = 875,CP_930 = 930,CP_931 = 931,CP_932 = 932,CP_933 = 933,CP_935 = 935,CP_936 = 936,CP_937 = 937,CP_939 = 939,CP_949 = 949,CP_950 = 950,CP_1027 = 1027,};
enum MACRO_CRELQ {CRELQ = 34,};
enum MACRO_CRYPT {CRYPT_MODE_CBCI = 6,CRYPT_MODE_CFBP = 7,CRYPT_MODE_OFBP = 8,CRYPT_MODE_CBCOFM = 9,CRYPT_MODE_CBCOFMI = 10,};
enum MACRO_CSIDL {CSIDL_DESKTOP = 0x0,CSIDL_INTERNET = 0x1,CSIDL_PROGRAMS = 0x2,CSIDL_CONTROLS = 0x3,CSIDL_PRINTERS = 0x4,CSIDL_PERSONAL = 0x5,CSIDL_FAVORITES = 0x6,CSIDL_STARTUP = 0x7,CSIDL_RECENT = 0x8,CSIDL_SENDTO = 0x9,CSIDL_BITBUCKET = 0xA,CSIDL_STARTMENU = 0xB,CSIDL_DESKTOPDIRECTORY = 0x10,CSIDL_DRIVES = 0x11,CSIDL_NETWORK = 0x12,CSIDL_NETHOOD = 0x13,CSIDL_FONTS = 0x14,CSIDL_TEMPLATES = 0x15,CSIDL_COMMON_STARTMENU = 0x16,CSIDL_COMMON_PROGRAMS = 0x17,CSIDL_COMMON_STARTUP = 0x18,CSIDL_COMMON_DESKTOPDIRECTORY = 0x19,CSIDL_APPDATA = 0x1A,CSIDL_PRINTHOOD = 0x1B,CSIDL_ALTSTARTUP = 0x1D,CSIDL_COMMON_ALTSTARTUP = 0x1E,CSIDL_COMMON_FAVORITES = 0x1F,CSIDL_INTERNET_CACHE = 0x20,CSIDL_COOKIES = 0x21,CSIDL_HISTORY = 0x22,};
enum MACRO_CTL3D {CTL3D_SUBCLASS_DYNCREATE = 0x1,CTL3D_NOSUBCLASS_DYNCREATE = 0x2,CTL3D_BUTTON_CTL = 0x0,CTL3D_LISTBOX_CTL = 0x1,CTL3D_EDIT_CTL = 0x2,CTL3D_COMBO_CTL = 0x3,CTL3D_STATIC_CTL = 0x4,CTL3D_BUTTONS = 0x1,CTL3D_LISTBOXES = 0x2,CTL3D_EDITS = 0x4,CTL3D_COMBOS = 0x8,CTL3D_STATICTEXTS = 0x10,CTL3D_STATICFRAMES = 0x20,CTL3D_NODLGWINDOW = 0x10000,CTL3D_ALL = 0xFFFF,CTL3D_NOBORDER = 0x0,CTL3D_BORDER = 0x1,CTL3D_NOSUBCLASS = 0x0,CTL3D_SUBCLASS = 0x1,};
enum MACRO_CTL_E {CTL_E_ILLEGALFUNCTIONCALL = -2146828283,CTL_E_OVERFLOW = -2146828282,CTL_E_OUTOFMEMORY = -2146828281,CTL_E_DIVISIONBYZERO = -2146828277,CTL_E_OUTOFSTRINGSPACE = -2146828274,CTL_E_OUTOFSTACKSPACE = -2146828260,CTL_E_BADFILENAMEORNUMBER = -2146828236,CTL_E_FILENOTFOUND = -2146828235,CTL_E_BADFILEMODE = -2146828234,CTL_E_FILEALREADYOPEN = -2146828233,CTL_E_DEVICEIOERROR = -2146828231,CTL_E_FILEALREADYEXISTS = -2146828230,CTL_E_BADRECORDLENGTH = -2146828229,CTL_E_DISKFULL = -2146828227,CTL_E_BADRECORDNUMBER = -2146828225,CTL_E_BADFILENAME = -2146828224,CTL_E_TOOMANYFILES = -2146828221,CTL_E_DEVICEUNAVAILABLE = -2146828220,CTL_E_PERMISSIONDENIED = -2146828218,CTL_E_DISKNOTREADY = -2146828217,CTL_E_PATHFILEACCESSERROR = -2146828213,CTL_E_PATHNOTFOUND = -2146828212,CTL_E_INVALIDPATTERNSTRING = -2146828195,CTL_E_INVALIDUSEOFNULL = -2146828194,CTL_E_INVALIDFILEFORMAT = -2146827967,CTL_E_INVALIDPROPERTYVALUE = -2146827908,CTL_E_INVALIDPROPERTYARRAYINDEX = -2146827907,CTL_E_SETNOTSUPPORTEDATRUNTIME = -2146827906,CTL_E_SETNOTSUPPORTED = -2146827905,CTL_E_NEEDPROPERTYARRAYINDEX = -2146827903,CTL_E_SETNOTPERMITTED = -2146827901,CTL_E_GETNOTSUPPORTEDATRUNTIME = -2146827895,CTL_E_GETNOTSUPPORTED = -2146827894,CTL_E_PROPERTYNOTFOUND = -2146827866,CTL_E_INVALIDCLIPBOARDFORMAT = -2146827828,CTL_E_INVALIDPICTURE = -2146827807,CTL_E_PRINTERERROR = -2146827806,CTL_E_CANTSAVEFILETOTEMP = -2146827553,CTL_E_SEARCHTEXTNOTFOUND = -2146827544,CTL_E_REPLACEMENTSTOOLONG = -2146827542,CTL_E_CUSTOM_FIRST = -2146827688,};
enum MACRO_D3DDD {D3DDD_COLORMODEL = 0x1,D3DDD_DEVCAPS = 0x2,D3DDD_TRANSFORMCAPS = 0x4,D3DDD_LIGHTINGCAPS = 0x8,D3DDD_BCLIPPING = 0x10,D3DDD_LINECAPS = 0x20,D3DDD_TRICAPS = 0x40,D3DDD_DEVICERENDERBITDEPTH = 0x80,D3DDD_DEVICEZBUFFERBITDEPTH = 0x100,D3DDD_MAXBUFFERSIZE = 0x200,D3DDD_MAXVERTEXCOUNT = 0x400,};
enum MACRO_D3DDP {D3DDP_WAIT = 0x1,D3DDP_DONOTCLIP = 0x4,D3DDP_DONOTUPDATEEXTENTS = 0x8,};
enum MACRO_D3DRM {D3DRM_OK = 0,};
enum MACRO_DBASE {DBASE = 4,};
enum MACRO_DBIMF {DBIMF_NORMAL = 0x0,DBIMF_VARIABLEHEIGHT = 0x8,DBIMF_DEBOSSED = 0x20,DBIMF_BKCOLOR = 0x40,};
enum MACRO_DB_IN {DB_IN = 1,DB_OUT = 2,};
enum MACRO_DB_PT {DB_PT_UNKNOWN = 0x1,DB_PT_PROCEDURE = 0x2,DB_PT_FUNCTION = 0x3,DB_REMOTE = 0x1,DB_LOCAL_SHARED = 0x2,DB_LOCAL_EXCLUSIVE = 0x3,DB_COLLATION_ASC = 0x1,DB_COLLATION_DESC = 0x2,DB_UNSEARCHABLE = 0x1,DB_LIKE_ONLY = 0x2,DB_ALL_EXCEPT_LIKE = 0x3,DB_SEARCHABLE = 0x4,};
enum MACRO_DDBLT {DDBLT_ALPHADEST = 0x1,DDBLT_ALPHADESTCONSTOVERRIDE = 0x2,DDBLT_ALPHADESTNEG = 0x4,DDBLT_ALPHADESTSURFACEOVERRIDE = 0x8,DDBLT_ALPHAEDGEBLEND = 0x10,DDBLT_ALPHASRC = 0x20,DDBLT_ALPHASRCCONSTOVERRIDE = 0x40,DDBLT_ALPHASRCNEG = 0x80,DDBLT_ALPHASRCSURFACEOVERRIDE = 0x100,DDBLT_ASYNC = 0x200,DDBLT_COLORFILL = 0x400,DDBLT_DDFX = 0x800,DDBLT_DDROPS = 0x1000,DDBLT_KEYDEST = 0x2000,DDBLT_KEYDESTOVERRIDE = 0x4000,DDBLT_KEYSRC = 0x8000,DDBLT_KEYSRCOVERRIDE = 0x10000,DDBLT_ROP = 0x20000,DDBLT_ROTATIONANGLE = 0x40000,DDBLT_ZBUFFER = 0x80000,DDBLT_ZBUFFERDESTCONSTOVERRIDE = 0x100000,DDBLT_ZBUFFERDESTOVERRIDE = 0x200000,DDBLT_ZBUFFERSRCCONSTOVERRIDE = 0x400000,DDBLT_ZBUFFERSRCOVERRIDE = 0x800000,DDBLT_WAIT = 0x1000000,DDBLT_DEPTHFILL = 0x2000000,};
enum MACRO_DDEDM {DDEDM_REFRESHRATES = 0x1,DDEDM_STANDARDVGAMODES = 0x2,};
enum MACRO_DDERR {DDERR_ALREADYINITIALIZED = -2005532667,DDERR_CANNOTATTACHSURFACE = -2005532662,DDERR_CANNOTDETACHSURFACE = -2005532652,DDERR_CURRENTLYNOTAVAIL = -2005532632,DDERR_EXCEPTION = -2005532617,DDERR_GENERIC = -2147467259,DDERR_HEIGHTALIGN = -2005532582,DDERR_INCOMPATIBLEPRIMARY = -2005532577,DDERR_INVALIDCAPS = -2005532572,DDERR_INVALIDCLIPLIST = -2005532562,DDERR_INVALIDMODE = -2005532552,DDERR_INVALIDOBJECT = -2005532542,DDERR_INVALIDPARAMS = -2147024809,DDERR_INVALIDPIXELFORMAT = -2005532527,DDERR_INVALIDRECT = -2005532522,DDERR_LOCKEDSURFACES = -2005532512,DDERR_NO3D = -2005532502,DDERR_NOALPHAHW = -2005532492,DDERR_NOCLIPLIST = -2005532467,DDERR_NOCOLORCONVHW = -2005532462,DDERR_NOCOOPERATIVELEVELSET = -2005532460,DDERR_NOCOLORKEY = -2005532457,DDERR_NOCOLORKEYHW = -2005532452,DDERR_NODIRECTDRAWSUPPORT = -2005532450,DDERR_NOEXCLUSIVEMODE = -2005532447,DDERR_NOFLIPHW = -2005532442,DDERR_NOGDI = -2005532432,DDERR_NOMIRRORHW = -2005532422,DDERR_NOTFOUND = -2005532417,DDERR_NOOVERLAYHW = -2005532412,DDERR_NORASTEROPHW = -2005532392,DDERR_NOROTATIONHW = -2005532382,DDERR_NOSTRETCHHW = -2005532362,DDERR_NOT4BITCOLOR = -2005532356,DDERR_NOT4BITCOLORINDEX = -2005532355,DDERR_NOT8BITCOLOR = -2005532352,DDERR_NOTEXTUREHW = -2005532342,DDERR_NOVSYNCHW = -2005532337,DDERR_NOZBUFFERHW = -2005532332,DDERR_NOZOVERLAYHW = -2005532322,DDERR_OUTOFCAPS = -2005532312,DDERR_OUTOFMEMORY = -2147024882,DDERR_OUTOFVIDEOMEMORY = -2005532292,DDERR_OVERLAYCANTCLIP = -2005532290,DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,DDERR_PALETTEBUSY = -2005532285,DDERR_COLORKEYNOTSET = -2005532272,DDERR_SURFACEALREADYATTACHED = -2005532262,DDERR_SURFACEALREADYDEPENDENT = -2005532252,DDERR_SURFACEBUSY = -2005532242,DDERR_CANTLOCKSURFACE = -2005532237,DDERR_SURFACEISOBSCURED = -2005532232,DDERR_SURFACELOST = -2005532222,DDERR_SURFACENOTATTACHED = -2005532212,DDERR_TOOBIGHEIGHT = -2005532202,DDERR_TOOBIGSIZE = -2005532192,DDERR_TOOBIGWIDTH = -2005532182,DDERR_UNSUPPORTED = -2147467263,DDERR_UNSUPPORTEDFORMAT = -2005532162,DDERR_UNSUPPORTEDMASK = -2005532152,DDERR_VERTICALBLANKINPROGRESS = -2005532135,DDERR_WASSTILLDRAWING = -2005532132,DDERR_XALIGN = -2005532112,DDERR_INVALIDDIRECTDRAWGUID = -2005532111,DDERR_DIRECTDRAWALREADYCREATED = -2005532110,DDERR_NODIRECTDRAWHW = -2005532109,DDERR_PRIMARYSURFACEALREADYEXISTS = -2005532108,DDERR_NOEMULATION = -2005532107,DDERR_REGIONTOOSMALL = -2005532106,DDERR_CLIPPERISUSINGHWND = -2005532105,DDERR_NOCLIPPERATTACHED = -2005532104,DDERR_NOHWND = -2005532103,DDERR_HWNDSUBCLASSED = -2005532102,DDERR_HWNDALREADYSET = -2005532101,DDERR_NOPALETTEATTACHED = -2005532100,DDERR_NOPALETTEHW = -2005532099,DDERR_BLTFASTCANTCLIP = -2005532098,DDERR_NOBLTHW = -2005532097,DDERR_NODDROPSHW = -2005532096,DDERR_OVERLAYNOTVISIBLE = -2005532095,DDERR_NOOVERLAYDEST = -2005532094,DDERR_INVALIDPOSITION = -2005532093,DDERR_NOTAOVERLAYSURFACE = -2005532092,DDERR_EXCLUSIVEMODEALREADYSET = -2005532091,DDERR_NOTFLIPPABLE = -2005532090,DDERR_CANTDUPLICATE = -2005532089,DDERR_NOTLOCKED = -2005532088,DDERR_CANTCREATEDC = -2005532087,DDERR_NODC = -2005532086,DDERR_WRONGMODE = -2005532085,DDERR_IMPLICITLYCREATED = -2005532084,DDERR_NOTPALETTIZED = -2005532083,DDERR_UNSUPPORTEDMODE = -2005532082,DDERR_NOMIPMAPHW = -2005532081,DDERR_INVALIDSURFACETYPE = -2005532080,DDERR_NOOPTIMIZEHW = -2005532072,DDERR_NOTLOADED = -2005532071,DDERR_NOFOCUSWINDOW = -2005532070,DDERR_DCALREADYCREATED = -2005532052,DDERR_NONONLOCALVIDMEM = -2005532042,DDERR_CANTPAGELOCK = -2005532032,DDERR_CANTPAGEUNLOCK = -2005532012,DDERR_NOTPAGELOCKED = -2005531992,DDERR_MOREDATA = -2005531982,DDERR_VIDEONOTACTIVE = -2005531977,DDERR_DEVICEDOESNTOWNSURFACE = -2005531973,DDERR_NOTINITIALIZED = -2147221008,};
enum MACRO_DDGBS {DDGBS_CANBLT = 0x1,DDGBS_ISBLTDONE = 0x2,};
enum MACRO_DDGFS {DDGFS_CANFLIP = 0x1,DDGFS_ISFLIPDONE = 0x2,};
enum MACRO_DDIRQ {DDIRQ_DISPLAY_VSYNC = 0x1,DDIRQ_RESERVED1 = 0x2,DDIRQ_VPORT0_VSYNC = 0x4,DDIRQ_VPORT0_LINE = 0x8,DDIRQ_VPORT1_VSYNC = 0x10,DDIRQ_VPORT1_LINE = 0x20,DDIRQ_VPORT2_VSYNC = 0x40,DDIRQ_VPORT2_LINE = 0x80,DDIRQ_VPORT3_VSYNC = 0x100,DDIRQ_VPORT3_LINE = 0x200,DDIRQ_VPORT4_VSYNC = 0x400,DDIRQ_VPORT4_LINE = 0x800,DDIRQ_VPORT5_VSYNC = 0x1000,DDIRQ_VPORT5_LINE = 0x2000,DDIRQ_VPORT6_VSYNC = 0x4000,DDIRQ_VPORT6_LINE = 0x8000,DDIRQ_VPORT7_VSYNC = 0x10000,DDIRQ_VPORT7_LINE = 0x20000,DDIRQ_VPORT8_VSYNC = 0x40000,DDIRQ_VPORT8_LINE = 0x80000,DDIRQ_VPORT9_VSYNC = 0x10000,DDIRQ_VPORT9_LINE = 0x20000,};
enum MACRO_DDSCL {DDSCL_FULLSCREEN = 0x1,DDSCL_ALLOWREBOOT = 0x2,DDSCL_NOWINDOWCHANGES = 0x4,DDSCL_NORMAL = 0x8,DDSCL_EXCLUSIVE = 0x10,DDSCL_ALLOWMODEX = 0x40,DDSCL_SETFOCUSWINDOW = 0x80,DDSCL_SETDEVICEWINDOW = 0x100,DDSCL_CREATEDEVICEWINDOW = 0x200,};
enum MACRO_DDSDM {DDSDM_STANDARDVGAMODE = 0x1,};
enum MACRO_DDVPB {DDVPB_VIDEOPORT = 0x1,DDVPB_OVERLAY = 0x2,DDVPB_TYPE = 0x4,};
enum MACRO_DDVPD {DDVPD_WIDTH = 0x1,DDVPD_HEIGHT = 0x2,DDVPD_ID = 0x4,DDVPD_CAPS = 0x8,DDVPD_FX = 0x10,DDVPD_AUTOFLIP = 0x20,DDVPD_ALIGN = 0x40,};
enum MACRO_DD_OK {DD_OK = 0,};
enum MACRO_DEBUG {DEBUG_PROCESS = 0x1,DEBUG_ONLY_THIS_PROCESS = 0x2,};
enum MACRO_DIBCI {DIBCI_NOINSTALLCLASS = 0x1,DIBCI_NODISPLAYCLASS = 0x2,};
enum MACRO_DIDFT {DIDFT_ALL = 0x0,DIDFT_RELAXIS = 0x1,DIDFT_ABSAXIS = 0x2,DIDFT_AXIS = 0x3,DIDFT_PSHBUTTON = 0x4,DIDFT_TGLBUTTON = 0x8,DIDFT_BUTTON = 0xC,DIDFT_POV = 0x10,DIDFT_COLLECTION = 0x40,DIDFT_NODATA = 0x80,DIDFT_ANYINSTANCE = 0xFFFF00,DIDFT_INSTANCEMASK = 0xFFFF00,DIDFT_FFACTUATOR = 0x1000000,DIDFT_FFEFFECTTRIGGER = 0x2000000,DIDFT_OUTPUT = 0x10000000,DIDFT_NOCOLLECTION = 0xFFFF00,};
enum MACRO_DIDOI {DIDOI_FFACTUATOR = 0x1,DIDOI_FFEFFECTTRIGGER = 0x2,DIDOI_POLLED = 0x8000,DIDOI_ASPECTPOSITION = 0x100,DIDOI_ASPECTVELOCITY = 0x200,DIDOI_ASPECTACCEL = 0x300,DIDOI_ASPECTFORCE = 0x400,DIDOI_ASPECTMASK = 0xF00,};
enum MACRO_DIEFF {DIEFF_OBJECTIDS = 0x1,DIEFF_OBJECTOFFSETS = 0x2,DIEFF_CARTESIAN = 0x10,DIEFF_POLAR = 0x20,DIEFF_SPHERICAL = 0x40,};
enum MACRO_DIEFT {DIEFT_ALL = 0x0,DIEFT_CONSTANTFORCE = 0x1,DIEFT_RAMPFORCE = 0x2,DIEFT_PERIODIC = 0x3,DIEFT_CONDITION = 0x4,DIEFT_CUSTOMFORCE = 0x5,DIEFT_HARDWARE = 0xFF,DIEFT_FFATTACK = 0x200,DIEFT_FFFADE = 0x400,DIEFT_SATURATION = 0x800,DIEFT_POSNEGCOEFFICIENTS = 0x1000,DIEFT_POSNEGSATURATION = 0x2000,DIEFT_DEADBAND = 0x4000,};
enum MACRO_DIERR {DIERR_OLDDIRECTINPUTVERSION = -2147023746,DIERR_BETADIRECTINPUTVERSION = -2147023743,DIERR_BADDRIVERVER = -2147024777,DIERR_DEVICENOTREG = -2147221164,DIERR_NOTFOUND = -2147024894,DIERR_OBJECTNOTFOUND = -2147024894,DIERR_INVALIDPARAM = -2147024809,DIERR_NOINTERFACE = -2147467262,DIERR_GENERIC = -2147467259,DIERR_OUTOFMEMORY = -2147024882,DIERR_UNSUPPORTED = -2147467263,DIERR_NOTINITIALIZED = -2147024875,DIERR_ALREADYINITIALIZED = -2147023649,DIERR_NOAGGREGATION = -2147221232,DIERR_OTHERAPPHASPRIO = -2147024891,DIERR_INPUTLOST = -2147024866,DIERR_ACQUIRED = -2147024726,DIERR_NOTACQUIRED = -2147024884,DIERR_READONLY = -2147024891,DIERR_HANDLEEXISTS = -2147024891,DIERR_INSUFFICIENTPRIVS = -2147220992,DIERR_DEVICEFULL = -2147220991,DIERR_MOREDATA = -2147220990,DIERR_NOTDOWNLOADED = -2147220989,DIERR_HASEFFECTS = -2147220988,DIERR_NOTEXCLUSIVEACQUIRED = -2147220987,DIERR_INCOMPLETEEFFECT = -2147220986,DIERR_NOTBUFFERED = -2147220985,DIERR_EFFECTPLAYING = -2147220984,DIERR_UNPLUGGED = -2147220983,DIERR_REPORTFULL = -2147220982,};
enum MACRO_DIGCF {DIGCF_DEFAULT = 0x1,DIGCF_PRESENT = 0x2,DIGCF_ALLCLASSES = 0x4,DIGCF_PROFILE = 0x8,DIGCF_DEVICEINTERFACE = 0x10,DIGCF_INTERFACEDEVICE = 0x10,};
enum MACRO_DIGDD {DIGDD_PEEK = 0x1,};
enum MACRO_DIOCR {DIOCR_INSTALLER = 0x1,DIOCR_INTERFACE = 0x2,};
enum MACRO_DIREG {DIREG_DEV = 0x1,DIREG_DRV = 0x2,DIREG_BOTH = 0x4,};
enum MACRO_DIRID {DIRID_ABSOLUTE = -1,DIRID_ABSOLUTE_16BIT = 65535,DIRID_NULL = 0,DIRID_SRCPATH = 1,DIRID_WINDOWS = 10,DIRID_SYSTEM = 11,DIRID_DRIVERS = 12,DIRID_IOSUBSYS = 12,DIRID_INF = 17,DIRID_HELP = 18,DIRID_FONTS = 20,DIRID_VIEWERS = 21,DIRID_COLOR = 23,DIRID_APPS = 24,DIRID_SHARED = 25,DIRID_BOOT = 30,DIRID_SYSTEM16 = 50,DIRID_SPOOL = 51,DIRID_SPOOLDRIVERS = 52,DIRID_USERPROFILE = 53,DIRID_LOADER = 54,DIRID_PRINTPROCESSOR = 55,DIRID_DEFAULT = 11,DIRID_USER = 32768,};
enum MACRO_DISCL {DISCL_EXCLUSIVE = 0x1,DISCL_NONEXCLUSIVE = 0x2,DISCL_FOREGROUND = 0x4,DISCL_BACKGROUND = 0x8,};
enum MACRO_DISDD {DISDD_CONTINUE = 0x1,};
enum MACRO_DI_OK {DI_OK = 0,DI_NOTATTACHED = 1,DI_BUFFEROVERFLOW = 1,DI_PROPNOEFFECT = 1,DI_NOEFFECT = 1,DI_POLLEDDEVICE = 2,DI_DOWNLOADSKIPPED = 3,DI_EFFECTRESTARTED = 4,DI_TRUNCATED = 8,DI_TRUNCATEDANDRESTARTED = 12,};
enum MACRO_DLCTL {DLCTL_DLIMAGES = 0x10,DLCTL_VIDEOS = 0x20,DLCTL_BGSOUNDS = 0x40,DLCTL_NO_SCRIPTS = 0x80,DLCTL_NO_JAVA = 0x100,DLCTL_NO_RUNACTIVEXCTLS = 0x200,DLCTL_NO_DLACTIVEXCTLS = 0x400,DLCTL_DOWNLOADONLY = 0x800,DLCTL_NO_FRAMEDOWNLOAD = 0x1000,DLCTL_RESYNCHRONIZE = 0x2000,DLCTL_PRAGMA_NO_CACHE = 0x4000,DLCTL_FORCEOFFLINE = 0x10000000,DLCTL_NO_CLIENTPULL = 0x20000000,DLCTL_SILENT = 0x40000000,DLCTL_OFFLINEIFNOTCONNECTED = 0x80000000,DLCTL_OFFLINE = 0x80000000,};
enum MACRO_DMBIN {DMBIN_UPPER = 1,DMBIN_ONLYONE = 1,DMBIN_LOWER = 2,DMBIN_MIDDLE = 3,DMBIN_MANUAL = 4,DMBIN_ENVELOPE = 5,DMBIN_ENVMANUAL = 6,DMBIN_AUTO = 7,DMBIN_TRACTOR = 8,DMBIN_SMALLFMT = 9,DMBIN_LARGEFMT = 10,DMBIN_LARGECAPACITY = 11,DMBIN_CASSETTE = 14,DMBIN_FORMSOURCE = 15,DMBIN_LAST = 15,DMBIN_USER = 256,};
enum MACRO_DMDUP {DMDUP_SIMPLEX = 1,DMDUP_VERTICAL = 2,DMDUP_HORIZONTAL = 3,};
enum MACRO_DMICM {DMICM_SATURATE = 1,DMICM_CONTRAST = 2,DMICM_COLORIMETRIC = 3,DMICM_ABS_COLORIMETRIC = 4,DMICM_USER = 256,};
enum MACRO_DMRES {DMRES_DRAFT = -1,DMRES_LOW = -2,DMRES_MEDIUM = -3,DMRES_HIGH = -4,};
enum MACRO_DNLEN {DNLEN = 15,};
enum MACRO_DPCPA {DPCPA_NOFLOW = 0,DPCPA_XONXOFFFLOW = 1,DPCPA_RTSFLOW = 2,DPCPA_DTRFLOW = 3,DPCPA_RTSDTRFLOW = 4,};
enum MACRO_DPERR {DPERR_ALREADYINITIALIZED = -2005467131,DPERR_ACCESSDENIED = -2005467126,DPERR_ACTIVEPLAYERS = -2005467116,DPERR_BUFFERTOOSMALL = -2005467106,DPERR_CANTADDPLAYER = -2005467096,DPERR_CANTCREATEGROUP = -2005467086,DPERR_CANTCREATEPLAYER = -2005467076,DPERR_CANTCREATESESSION = -2005467066,DPERR_CAPSNOTAVAILABLEYET = -2005467056,DPERR_EXCEPTION = -2005467046,DPERR_GENERIC = -2147467259,DPERR_INVALIDFLAGS = -2005467016,DPERR_INVALIDOBJECT = -2005467006,DPERR_INVALIDPARAM = -2147024809,DPERR_INVALIDPARAMS = -2147024809,DPERR_INVALIDPLAYER = -2005466986,DPERR_INVALIDGROUP = -2005466981,DPERR_NOCAPS = -2005466976,DPERR_NOCONNECTION = -2005466966,DPERR_NOMEMORY = -2147024882,DPERR_OUTOFMEMORY = -2147024882,DPERR_NOMESSAGES = -2005466946,DPERR_NONAMESERVERFOUND = -2005466936,DPERR_NOPLAYERS = -2005466926,DPERR_NOSESSIONS = -2005466916,DPERR_PENDING = -2147483638,DPERR_SENDTOOBIG = -2005466906,DPERR_TIMEOUT = -2005466896,DPERR_UNAVAILABLE = -2005466886,DPERR_UNSUPPORTED = -2147467263,DPERR_BUSY = -2005466866,DPERR_USERCANCEL = -2005466856,DPERR_NOINTERFACE = -2147467262,DPERR_CANNOTCREATESERVER = -2005466846,DPERR_PLAYERLOST = -2005466836,DPERR_SESSIONLOST = -2005466826,DPERR_UNINITIALIZED = -2005466816,DPERR_NONEWPLAYERS = -2005466806,DPERR_INVALIDPASSWORD = -2005466796,DPERR_CONNECTING = -2005466786,DPERR_BUFFERTOOLARGE = -2005466136,DPERR_CANTCREATEPROCESS = -2005466126,DPERR_APPNOTSTARTED = -2005466116,DPERR_INVALIDINTERFACE = -2005466106,DPERR_NOSERVICEPROVIDER = -2005466096,DPERR_UNKNOWNAPPLICATION = -2005466086,DPERR_NOTLOBBIED = -2005466066,DPERR_SERVICEPROVIDERLOADED = -2005466056,DPERR_ALREADYREGISTERED = -2005466046,DPERR_NOTREGISTERED = -2005466036,DPERR_AUTHENTICATIONFAILED = -2005465136,DPERR_CANTLOADSSPI = -2005465126,DPERR_ENCRYPTIONFAILED = -2005465116,DPERR_SIGNFAILED = -2005465106,DPERR_CANTLOADSECURITYPACKAGE = -2005465096,DPERR_ENCRYPTIONNOTSUPPORTED = -2005465086,DPERR_CANTLOADCAPI = -2005465076,DPERR_NOTLOGGEDIN = -2005465066,DPERR_LOGONDENIED = -2005465056,};
enum MACRO_DPESC {DPESC_TIMEDOUT = 0x1,};
enum MACRO_DPGET {DPGET_REMOTE = 0x0,DPGET_LOCAL = 0x1,};
enum MACRO_DPLAD {DPLAD_SYSTEM = 1,};
enum MACRO_DPSET {DPSET_REMOTE = 0x0,DPSET_LOCAL = 0x1,DPSET_GUARANTEED = 0x2,};
enum MACRO_DPSYS {DPSYS_CREATEPLAYERORGROUP = 0x3,DPSYS_DESTROYPLAYERORGROUP = 0x5,DPSYS_ADDPLAYERTOGROUP = 0x7,DPSYS_DELETEPLAYERFROMGROUP = 0x21,DPSYS_SESSIONLOST = 0x31,DPSYS_HOST = 0x101,DPSYS_SETPLAYERORGROUPDATA = 0x102,DPSYS_SETPLAYERORGROUPNAME = 0x103,DPSYS_SETSESSIONDESC = 0x104,DPSYS_ADDGROUPTOGROUP = 0x105,DPSYS_DELETEGROUPFROMGROUP = 0x106,DPSYS_SECUREMESSAGE = 0x107,DPSYS_STARTSESSION = 0x108,DPSYS_CHAT = 0x109,};
enum MACRO_DRIVE {DRIVE_UNKNOWN = 0,DRIVE_NO_ROOT_DIR = 1,DRIVE_REMOVABLE = 2,DRIVE_FIXED = 3,DRIVE_REMOTE = 4,DRIVE_CDROM = 5,DRIVE_RAMDISK = 6,};
enum MACRO_DSBPN {DSBPN_OFFSETSTOP = 0xFFFFFFFF,};
enum MACRO_DSERR {DSERR_ALLOCATED = -2005401590,DSERR_CONTROLUNAVAIL = -2005401570,DSERR_INVALIDPARAM = -2147024809,DSERR_INVALIDCALL = -2005401550,DSERR_GENERIC = -2147467259,DSERR_PRIOLEVELNEEDED = -2005401530,DSERR_OUTOFMEMORY = -2147024882,DSERR_BADFORMAT = -2005401500,DSERR_UNSUPPORTED = -2147467263,DSERR_NODRIVER = -2005401480,DSERR_ALREADYINITIALIZED = -2005401470,DSERR_NOAGGREGATION = -2147221232,DSERR_BUFFERLOST = -2005401450,DSERR_OTHERAPPHASPRIO = -2005401440,DSERR_UNINITIALIZED = -2005401430,DSERR_NOINTERFACE = -2147467262,};
enum MACRO_DSOBJ {DSOBJ = 48,};
enum MACRO_DSSCL {DSSCL_NORMAL = 0x1,DSSCL_PRIORITY = 0x2,DSSCL_EXCLUSIVE = 0x3,DSSCL_WRITEPRIMARY = 0x4,};
enum MACRO_DS_OK {DS_OK = 0,};
enum MACRO_DWFAF {DWFAF_HIDDEN = 0x1,};
enum MACRO_DWFRF {DWFRF_NORMAL = 0x0,DWFRF_DELETECONFIGDATA = 0x1,};
enum MACRO_ECOOP {ECOOP_SET = 0x1,ECOOP_OR = 0x2,ECOOP_AND = 0x3,ECOOP_XOR = 0x4,};
enum MACRO_EEAFE {EEAFE_OPEN = 0x1,EEAFE_PRINT = 0x2,EEAFE_QUICKVIEW = 0x3,};
enum MACRO_EIMES {EIMES_GETCOMPSTRATONCE = 0x1,EIMES_CANCELCOMPSTRINFOCUS = 0x2,EIMES_COMPLETECOMPSTRKILLFOCUS = 0x4,};
enum MACRO_EMSIS {EMSIS_COMPOSITIONSTRING = 0x1,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EDEADLK = 36,ENAMETOOLONG = 38,ENOLCK = 39,ENOSYS = 40,ENOTEMPTY = 41,EILSEQ = 42,EDEADLOCK = 36,};
enum MACRO_ERROR {ERROR_SEVERITY_SUCCESS = 0x0,ERROR_SEVERITY_INFORMATIONAL = 0x40000000,ERROR_SEVERITY_WARNING = 0x80000000,ERROR_SEVERITY_ERROR = 0xC0000000,ERROR_SUCCESS = 0x0,NO_ERROR = 0x0,ERROR_INVALID_FUNCTION = 0x1,ERROR_FILE_NOT_FOUND = 0x2,ERROR_PATH_NOT_FOUND = 0x3,ERROR_TOO_MANY_OPEN_FILES = 0x4,ERROR_ACCESS_DENIED = 0x5,ERROR_INVALID_HANDLE = 0x6,ERROR_ARENA_TRASHED = 0x7,ERROR_NOT_ENOUGH_MEMORY = 0x8,ERROR_INVALID_BLOCK = 0x9,ERROR_BAD_ENVIRONMENT = 0xA,ERROR_BAD_FORMAT = 0xB,ERROR_INVALID_ACCESS = 0xC,ERROR_INVALID_DATA = 0xD,ERROR_OUTOFMEMORY = 0xE,ERROR_INVALID_DRIVE = 0xF,ERROR_CURRENT_DIRECTORY = 0x10,ERROR_NOT_SAME_DEVICE = 0x11,ERROR_NO_MORE_FILES = 0x12,ERROR_WRITE_PROTECT = 0x13,ERROR_BAD_UNIT = 0x14,ERROR_NOT_READY = 0x15,ERROR_BAD_COMMAND = 0x16,ERROR_CRC = 0x17,ERROR_BAD_LENGTH = 0x18,ERROR_SEEK = 0x19,ERROR_NOT_DOS_DISK = 0x1A,ERROR_SECTOR_NOT_FOUND = 0x1B,ERROR_OUT_OF_PAPER = 0x1C,ERROR_WRITE_FAULT = 0x1D,ERROR_READ_FAULT = 0x1E,ERROR_GEN_FAILURE = 0x1F,ERROR_SHARING_VIOLATION = 0x20,ERROR_LOCK_VIOLATION = 0x21,ERROR_WRONG_DISK = 0x22,ERROR_SHARING_BUFFER_EXCEEDED = 0x24,ERROR_HANDLE_EOF = 0x26,ERROR_HANDLE_DISK_FULL = 0x27,ERROR_NOT_SUPPORTED = 0x32,ERROR_REM_NOT_LIST = 0x33,ERROR_DUP_NAME = 0x34,ERROR_BAD_NETPATH = 0x35,ERROR_NETWORK_BUSY = 0x36,ERROR_DEV_NOT_EXIST = 0x37,ERROR_TOO_MANY_CMDS = 0x38,ERROR_ADAP_HDW_ERR = 0x39,ERROR_BAD_NET_RESP = 0x3A,ERROR_UNEXP_NET_ERR = 0x3B,ERROR_BAD_REM_ADAP = 0x3C,ERROR_PRINTQ_FULL = 0x3D,ERROR_NO_SPOOL_SPACE = 0x3E,ERROR_PRINT_CANCELLED = 0x3F,ERROR_NETNAME_DELETED = 0x40,ERROR_NETWORK_ACCESS_DENIED = 0x41,ERROR_BAD_DEV_TYPE = 0x42,ERROR_BAD_NET_NAME = 0x43,ERROR_TOO_MANY_NAMES = 0x44,ERROR_TOO_MANY_SESS = 0x45,ERROR_SHARING_PAUSED = 0x46,ERROR_REQ_NOT_ACCEP = 0x47,ERROR_REDIR_PAUSED = 0x48,ERROR_FILE_EXISTS = 0x50,ERROR_CANNOT_MAKE = 0x52,ERROR_FAIL_I24 = 0x53,ERROR_OUT_OF_STRUCTURES = 0x54,ERROR_ALREADY_ASSIGNED = 0x55,ERROR_INVALID_PASSWORD = 0x56,ERROR_INVALID_PARAMETER = 0x57,ERROR_NET_WRITE_FAULT = 0x58,ERROR_NO_PROC_SLOTS = 0x59,ERROR_TOO_MANY_SEMAPHORES = 0x64,ERROR_EXCL_SEM_ALREADY_OWNED = 0x65,ERROR_SEM_IS_SET = 0x66,ERROR_TOO_MANY_SEM_REQUESTS = 0x67,ERROR_INVALID_AT_INTERRUPT_TIME = 0x68,ERROR_SEM_OWNER_DIED = 0x69,ERROR_SEM_USER_LIMIT = 0x6A,ERROR_DISK_CHANGE = 0x6B,ERROR_DRIVE_LOCKED = 0x6C,ERROR_BROKEN_PIPE = 0x6D,ERROR_OPEN_FAILED = 0x6E,ERROR_BUFFER_OVERFLOW = 0x6F,ERROR_DISK_FULL = 0x70,ERROR_NO_MORE_SEARCH_HANDLES = 0x71,ERROR_INVALID_TARGET_HANDLE = 0x72,ERROR_INVALID_CATEGORY = 0x75,ERROR_INVALID_VERIFY_SWITCH = 0x76,ERROR_BAD_DRIVER_LEVEL = 0x77,ERROR_CALL_NOT_IMPLEMENTED = 0x78,ERROR_SEM_TIMEOUT = 0x79,ERROR_INSUFFICIENT_BUFFER = 0x7A,ERROR_INVALID_NAME = 0x7B,ERROR_INVALID_LEVEL = 0x7C,ERROR_NO_VOLUME_LABEL = 0x7D,ERROR_MOD_NOT_FOUND = 0x7E,ERROR_PROC_NOT_FOUND = 0x7F,ERROR_WAIT_NO_CHILDREN = 0x80,ERROR_CHILD_NOT_COMPLETE = 0x81,ERROR_DIRECT_ACCESS_HANDLE = 0x82,ERROR_NEGATIVE_SEEK = 0x83,ERROR_SEEK_ON_DEVICE = 0x84,ERROR_IS_JOIN_TARGET = 0x85,ERROR_IS_JOINED = 0x86,ERROR_IS_SUBSTED = 0x87,ERROR_NOT_JOINED = 0x88,ERROR_NOT_SUBSTED = 0x89,ERROR_JOIN_TO_JOIN = 0x8A,ERROR_SUBST_TO_SUBST = 0x8B,ERROR_JOIN_TO_SUBST = 0x8C,ERROR_SUBST_TO_JOIN = 0x8D,ERROR_BUSY_DRIVE = 0x8E,ERROR_SAME_DRIVE = 0x8F,ERROR_DIR_NOT_ROOT = 0x90,ERROR_DIR_NOT_EMPTY = 0x91,ERROR_IS_SUBST_PATH = 0x92,ERROR_IS_JOIN_PATH = 0x93,ERROR_PATH_BUSY = 0x94,ERROR_IS_SUBST_TARGET = 0x95,ERROR_SYSTEM_TRACE = 0x96,ERROR_INVALID_EVENT_COUNT = 0x97,ERROR_TOO_MANY_MUXWAITERS = 0x98,ERROR_INVALID_LIST_FORMAT = 0x99,ERROR_LABEL_TOO_LONG = 0x9A,ERROR_TOO_MANY_TCBS = 0x9B,ERROR_SIGNAL_REFUSED = 0x9C,ERROR_DISCARDED = 0x9D,ERROR_NOT_LOCKED = 0x9E,ERROR_BAD_THREADID_ADDR = 0x9F,ERROR_BAD_ARGUMENTS = 0xA0,ERROR_BAD_PATHNAME = 0xA1,ERROR_SIGNAL_PENDING = 0xA2,ERROR_MAX_THRDS_REACHED = 0xA4,ERROR_LOCK_FAILED = 0xA7,ERROR_BUSY = 0xAA,ERROR_CANCEL_VIOLATION = 0xAD,ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 0xAE,ERROR_INVALID_SEGMENT_NUMBER = 0xB4,ERROR_INVALID_ORDINAL = 0xB6,ERROR_ALREADY_EXISTS = 0xB7,ERROR_INVALID_FLAG_NUMBER = 0xBA,ERROR_SEM_NOT_FOUND = 0xBB,ERROR_INVALID_STARTING_CODESEG = 0xBC,ERROR_INVALID_STACKSEG = 0xBD,ERROR_INVALID_MODULETYPE = 0xBE,ERROR_INVALID_EXE_SIGNATURE = 0xBF,ERROR_EXE_MARKED_INVALID = 0xC0,ERROR_BAD_EXE_FORMAT = 0xC1,ERROR_ITERATED_DATA_EXCEEDS_64k = 0xC2,ERROR_INVALID_MINALLOCSIZE = 0xC3,ERROR_DYNLINK_FROM_INVALID_RING = 0xC4,ERROR_IOPL_NOT_ENABLED = 0xC5,ERROR_INVALID_SEGDPL = 0xC6,ERROR_AUTODATASEG_EXCEEDS_64k = 0xC7,ERROR_RING2SEG_MUST_BE_MOVABLE = 0xC8,ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 0xC9,ERROR_INFLOOP_IN_RELOC_CHAIN = 0xCA,ERROR_ENVVAR_NOT_FOUND = 0xCB,ERROR_NO_SIGNAL_SENT = 0xCD,ERROR_FILENAME_EXCED_RANGE = 0xCE,ERROR_RING2_STACK_IN_USE = 0xCF,ERROR_META_EXPANSION_TOO_LONG = 0xD0,ERROR_INVALID_SIGNAL_NUMBER = 0xD1,ERROR_THREAD_1_INACTIVE = 0xD2,ERROR_LOCKED = 0xD4,ERROR_TOO_MANY_MODULES = 0xD6,ERROR_NESTING_NOT_ALLOWED = 0xD7,ERROR_EXE_MACHINE_TYPE_MISMATCH = 0xD8,ERROR_BAD_PIPE = 0xE6,ERROR_PIPE_BUSY = 0xE7,ERROR_NO_DATA = 0xE8,ERROR_PIPE_NOT_CONNECTED = 0xE9,ERROR_MORE_DATA = 0xEA,ERROR_VC_DISCONNECTED = 0xF0,ERROR_INVALID_EA_NAME = 0xFE,ERROR_EA_LIST_INCONSISTENT = 0xFF,ERROR_NO_MORE_ITEMS = 0x103,ERROR_CANNOT_COPY = 0x10A,ERROR_DIRECTORY = 0x10B,ERROR_EAS_DIDNT_FIT = 0x113,ERROR_EA_FILE_CORRUPT = 0x114,ERROR_EA_TABLE_FULL = 0x115,ERROR_INVALID_EA_HANDLE = 0x116,ERROR_EAS_NOT_SUPPORTED = 0x11A,ERROR_NOT_OWNER = 0x120,ERROR_TOO_MANY_POSTS = 0x12A,ERROR_PARTIAL_COPY = 0x12B,ERROR_OPLOCK_NOT_GRANTED = 0x12C,ERROR_INVALID_OPLOCK_PROTOCOL = 0x12D,ERROR_MR_MID_NOT_FOUND = 0x13D,ERROR_INVALID_ADDRESS = 0x1E7,ERROR_ARITHMETIC_OVERFLOW = 0x216,ERROR_PIPE_CONNECTED = 0x217,ERROR_PIPE_LISTENING = 0x218,ERROR_EA_ACCESS_DENIED = 0x3E2,ERROR_OPERATION_ABORTED = 0x3E3,ERROR_IO_INCOMPLETE = 0x3E4,ERROR_IO_PENDING = 0x3E5,ERROR_NOACCESS = 0x3E6,ERROR_SWAPERROR = 0x3E7,ERROR_STACK_OVERFLOW = 0x3E9,ERROR_INVALID_MESSAGE = 0x3EA,ERROR_CAN_NOT_COMPLETE = 0x3EB,ERROR_INVALID_FLAGS = 0x3EC,ERROR_UNRECOGNIZED_VOLUME = 0x3ED,ERROR_FILE_INVALID = 0x3EE,ERROR_FULLSCREEN_MODE = 0x3EF,ERROR_NO_TOKEN = 0x3F0,ERROR_BADDB = 0x3F1,ERROR_BADKEY = 0x3F2,ERROR_CANTOPEN = 0x3F3,ERROR_CANTREAD = 0x3F4,ERROR_CANTWRITE = 0x3F5,ERROR_REGISTRY_RECOVERED = 0x3F6,ERROR_REGISTRY_CORRUPT = 0x3F7,ERROR_REGISTRY_IO_FAILED = 0x3F8,ERROR_NOT_REGISTRY_FILE = 0x3F9,ERROR_KEY_DELETED = 0x3FA,ERROR_NO_LOG_SPACE = 0x3FB,ERROR_KEY_HAS_CHILDREN = 0x3FC,ERROR_CHILD_MUST_BE_VOLATILE = 0x3FD,ERROR_NOTIFY_ENUM_DIR = 0x3FE,ERROR_DEPENDENT_SERVICES_RUNNING = 0x41B,ERROR_INVALID_SERVICE_CONTROL = 0x41C,ERROR_SERVICE_REQUEST_TIMEOUT = 0x41D,ERROR_SERVICE_NO_THREAD = 0x41E,ERROR_SERVICE_DATABASE_LOCKED = 0x41F,ERROR_SERVICE_ALREADY_RUNNING = 0x420,ERROR_INVALID_SERVICE_ACCOUNT = 0x421,ERROR_SERVICE_DISABLED = 0x422,ERROR_CIRCULAR_DEPENDENCY = 0x423,ERROR_SERVICE_DOES_NOT_EXIST = 0x424,ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 0x425,ERROR_SERVICE_NOT_ACTIVE = 0x426,ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 0x427,ERROR_EXCEPTION_IN_SERVICE = 0x428,ERROR_DATABASE_DOES_NOT_EXIST = 0x429,ERROR_SERVICE_SPECIFIC_ERROR = 0x42A,ERROR_PROCESS_ABORTED = 0x42B,ERROR_SERVICE_DEPENDENCY_FAIL = 0x42C,ERROR_SERVICE_LOGON_FAILED = 0x42D,ERROR_SERVICE_START_HANG = 0x42E,ERROR_INVALID_SERVICE_LOCK = 0x42F,ERROR_SERVICE_MARKED_FOR_DELETE = 0x430,ERROR_SERVICE_EXISTS = 0x431,ERROR_ALREADY_RUNNING_LKG = 0x432,ERROR_SERVICE_DEPENDENCY_DELETED = 0x433,ERROR_BOOT_ALREADY_ACCEPTED = 0x434,ERROR_SERVICE_NEVER_STARTED = 0x435,ERROR_DUPLICATE_SERVICE_NAME = 0x436,ERROR_DIFFERENT_SERVICE_ACCOUNT = 0x437,ERROR_CANNOT_DETECT_DRIVER_FAILURE = 0x438,ERROR_CANNOT_DETECT_PROCESS_ABORT = 0x439,ERROR_NO_RECOVERY_PROGRAM = 0x43A,ERROR_END_OF_MEDIA = 0x44C,ERROR_FILEMARK_DETECTED = 0x44D,ERROR_BEGINNING_OF_MEDIA = 0x44E,ERROR_SETMARK_DETECTED = 0x44F,ERROR_NO_DATA_DETECTED = 0x450,ERROR_PARTITION_FAILURE = 0x451,ERROR_INVALID_BLOCK_LENGTH = 0x452,ERROR_DEVICE_NOT_PARTITIONED = 0x453,ERROR_UNABLE_TO_LOCK_MEDIA = 0x454,ERROR_UNABLE_TO_UNLOAD_MEDIA = 0x455,ERROR_MEDIA_CHANGED = 0x456,ERROR_BUS_RESET = 0x457,ERROR_NO_MEDIA_IN_DRIVE = 0x458,ERROR_NO_UNICODE_TRANSLATION = 0x459,ERROR_DLL_INIT_FAILED = 0x45A,ERROR_SHUTDOWN_IN_PROGRESS = 0x45B,ERROR_NO_SHUTDOWN_IN_PROGRESS = 0x45C,ERROR_IO_DEVICE = 0x45D,ERROR_SERIAL_NO_DEVICE = 0x45E,ERROR_IRQ_BUSY = 0x45F,ERROR_MORE_WRITES = 0x460,ERROR_COUNTER_TIMEOUT = 0x461,ERROR_FLOPPY_ID_MARK_NOT_FOUND = 0x462,ERROR_FLOPPY_WRONG_CYLINDER = 0x463,ERROR_FLOPPY_UNKNOWN_ERROR = 0x464,ERROR_FLOPPY_BAD_REGISTERS = 0x465,ERROR_DISK_RECALIBRATE_FAILED = 0x466,ERROR_DISK_OPERATION_FAILED = 0x467,ERROR_DISK_RESET_FAILED = 0x468,ERROR_EOM_OVERFLOW = 0x469,ERROR_NOT_ENOUGH_SERVER_MEMORY = 0x46A,ERROR_POSSIBLE_DEADLOCK = 0x46B,ERROR_MAPPED_ALIGNMENT = 0x46C,ERROR_SET_POWER_STATE_VETOED = 0x474,ERROR_SET_POWER_STATE_FAILED = 0x475,ERROR_TOO_MANY_LINKS = 0x476,ERROR_OLD_WIN_VERSION = 0x47E,ERROR_APP_WRONG_OS = 0x47F,ERROR_SINGLE_INSTANCE_APP = 0x480,ERROR_RMODE_APP = 0x481,ERROR_INVALID_DLL = 0x482,ERROR_NO_ASSOCIATION = 0x483,ERROR_DDE_FAIL = 0x484,ERROR_DLL_NOT_FOUND = 0x485,ERROR_NO_MORE_USER_HANDLES = 0x486,ERROR_MESSAGE_SYNC_ONLY = 0x487,ERROR_SOURCE_ELEMENT_EMPTY = 0x488,ERROR_DESTINATION_ELEMENT_FULL = 0x489,ERROR_ILLEGAL_ELEMENT_ADDRESS = 0x48A,ERROR_MAGAZINE_NOT_PRESENT = 0x48B,ERROR_DEVICE_REINITIALIZATION_NEEDED = 0x48C,ERROR_DEVICE_REQUIRES_CLEANING = 0x48D,ERROR_DEVICE_DOOR_OPEN = 0x48E,ERROR_DEVICE_NOT_CONNECTED = 0x48F,ERROR_NOT_FOUND = 0x490,ERROR_NO_MATCH = 0x491,ERROR_SET_NOT_FOUND = 0x492,ERROR_POINT_NOT_FOUND = 0x493,ERROR_NO_TRACKING_SERVICE = 0x494,ERROR_NO_VOLUME_ID = 0x495,ERROR_CONNECTED_OTHER_PASSWORD = 0x83C,ERROR_BAD_USERNAME = 0x89A,ERROR_NOT_CONNECTED = 0x8CA,ERROR_OPEN_FILES = 0x961,ERROR_ACTIVE_CONNECTIONS = 0x962,ERROR_DEVICE_IN_USE = 0x964,ERROR_BAD_DEVICE = 0x4B0,ERROR_CONNECTION_UNAVAIL = 0x4B1,ERROR_DEVICE_ALREADY_REMEMBERED = 0x4B2,ERROR_NO_NET_OR_BAD_PATH = 0x4B3,ERROR_BAD_PROVIDER = 0x4B4,ERROR_CANNOT_OPEN_PROFILE = 0x4B5,ERROR_BAD_PROFILE = 0x4B6,ERROR_NOT_CONTAINER = 0x4B7,ERROR_EXTENDED_ERROR = 0x4B8,ERROR_INVALID_GROUPNAME = 0x4B9,ERROR_INVALID_COMPUTERNAME = 0x4BA,ERROR_INVALID_EVENTNAME = 0x4BB,ERROR_INVALID_DOMAINNAME = 0x4BC,ERROR_INVALID_SERVICENAME = 0x4BD,ERROR_INVALID_NETNAME = 0x4BE,ERROR_INVALID_SHARENAME = 0x4BF,ERROR_INVALID_PASSWORDNAME = 0x4C0,ERROR_INVALID_MESSAGENAME = 0x4C1,ERROR_INVALID_MESSAGEDEST = 0x4C2,ERROR_SESSION_CREDENTIAL_CONFLICT = 0x4C3,ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 0x4C4,ERROR_DUP_DOMAINNAME = 0x4C5,ERROR_NO_NETWORK = 0x4C6,ERROR_CANCELLED = 0x4C7,ERROR_USER_MAPPED_FILE = 0x4C8,ERROR_CONNECTION_REFUSED = 0x4C9,ERROR_GRACEFUL_DISCONNECT = 0x4CA,ERROR_ADDRESS_ALREADY_ASSOCIATED = 0x4CB,ERROR_ADDRESS_NOT_ASSOCIATED = 0x4CC,ERROR_CONNECTION_INVALID = 0x4CD,ERROR_CONNECTION_ACTIVE = 0x4CE,ERROR_NETWORK_UNREACHABLE = 0x4CF,ERROR_HOST_UNREACHABLE = 0x4D0,ERROR_PROTOCOL_UNREACHABLE = 0x4D1,ERROR_PORT_UNREACHABLE = 0x4D2,ERROR_REQUEST_ABORTED = 0x4D3,ERROR_CONNECTION_ABORTED = 0x4D4,ERROR_RETRY = 0x4D5,ERROR_CONNECTION_COUNT_LIMIT = 0x4D6,ERROR_LOGIN_TIME_RESTRICTION = 0x4D7,ERROR_LOGIN_WKSTA_RESTRICTION = 0x4D8,ERROR_INCORRECT_ADDRESS = 0x4D9,ERROR_ALREADY_REGISTERED = 0x4DA,ERROR_SERVICE_NOT_FOUND = 0x4DB,ERROR_NOT_AUTHENTICATED = 0x4DC,ERROR_NOT_LOGGED_ON = 0x4DD,ERROR_CONTINUE = 0x4DE,ERROR_ALREADY_INITIALIZED = 0x4DF,ERROR_NO_MORE_DEVICES = 0x4E0,ERROR_NO_SUCH_SITE = 0x4E1,ERROR_DOMAIN_CONTROLLER_EXISTS = 0x4E2,ERROR_DS_NOT_INSTALLED = 0x4E3,ERROR_NOT_ALL_ASSIGNED = 0x514,ERROR_SOME_NOT_MAPPED = 0x515,ERROR_NO_QUOTAS_FOR_ACCOUNT = 0x516,ERROR_LOCAL_USER_SESSION_KEY = 0x517,ERROR_NULL_LM_PASSWORD = 0x518,ERROR_UNKNOWN_REVISION = 0x519,ERROR_REVISION_MISMATCH = 0x51A,ERROR_INVALID_OWNER = 0x51B,ERROR_INVALID_PRIMARY_GROUP = 0x51C,ERROR_NO_IMPERSONATION_TOKEN = 0x51D,ERROR_CANT_DISABLE_MANDATORY = 0x51E,ERROR_NO_LOGON_SERVERS = 0x51F,ERROR_NO_SUCH_LOGON_SESSION = 0x520,ERROR_NO_SUCH_PRIVILEGE = 0x521,ERROR_PRIVILEGE_NOT_HELD = 0x522,ERROR_INVALID_ACCOUNT_NAME = 0x523,ERROR_USER_EXISTS = 0x524,ERROR_NO_SUCH_USER = 0x525,ERROR_GROUP_EXISTS = 0x526,ERROR_NO_SUCH_GROUP = 0x527,ERROR_MEMBER_IN_GROUP = 0x528,ERROR_MEMBER_NOT_IN_GROUP = 0x529,ERROR_LAST_ADMIN = 0x52A,ERROR_WRONG_PASSWORD = 0x52B,ERROR_ILL_FORMED_PASSWORD = 0x52C,ERROR_PASSWORD_RESTRICTION = 0x52D,ERROR_LOGON_FAILURE = 0x52E,ERROR_ACCOUNT_RESTRICTION = 0x52F,ERROR_INVALID_LOGON_HOURS = 0x530,ERROR_INVALID_WORKSTATION = 0x531,ERROR_PASSWORD_EXPIRED = 0x532,ERROR_ACCOUNT_DISABLED = 0x533,ERROR_NONE_MAPPED = 0x534,ERROR_TOO_MANY_LUIDS_REQUESTED = 0x535,ERROR_LUIDS_EXHAUSTED = 0x536,ERROR_INVALID_SUB_AUTHORITY = 0x537,ERROR_INVALID_ACL = 0x538,ERROR_INVALID_SID = 0x539,ERROR_INVALID_SECURITY_DESCR = 0x53A,ERROR_BAD_INHERITANCE_ACL = 0x53C,ERROR_SERVER_DISABLED = 0x53D,ERROR_SERVER_NOT_DISABLED = 0x53E,ERROR_INVALID_ID_AUTHORITY = 0x53F,ERROR_ALLOTTED_SPACE_EXCEEDED = 0x540,ERROR_INVALID_GROUP_ATTRIBUTES = 0x541,ERROR_BAD_IMPERSONATION_LEVEL = 0x542,ERROR_CANT_OPEN_ANONYMOUS = 0x543,ERROR_BAD_VALIDATION_CLASS = 0x544,ERROR_BAD_TOKEN_TYPE = 0x545,ERROR_NO_SECURITY_ON_OBJECT = 0x546,ERROR_CANT_ACCESS_DOMAIN_INFO = 0x547,ERROR_INVALID_SERVER_STATE = 0x548,ERROR_INVALID_DOMAIN_STATE = 0x549,ERROR_INVALID_DOMAIN_ROLE = 0x54A,ERROR_NO_SUCH_DOMAIN = 0x54B,ERROR_DOMAIN_EXISTS = 0x54C,ERROR_DOMAIN_LIMIT_EXCEEDED = 0x54D,ERROR_INTERNAL_DB_CORRUPTION = 0x54E,ERROR_INTERNAL_ERROR = 0x54F,ERROR_GENERIC_NOT_MAPPED = 0x550,ERROR_BAD_DESCRIPTOR_FORMAT = 0x551,ERROR_NOT_LOGON_PROCESS = 0x552,ERROR_LOGON_SESSION_EXISTS = 0x553,ERROR_NO_SUCH_PACKAGE = 0x554,ERROR_BAD_LOGON_SESSION_STATE = 0x555,ERROR_LOGON_SESSION_COLLISION = 0x556,ERROR_INVALID_LOGON_TYPE = 0x557,ERROR_CANNOT_IMPERSONATE = 0x558,ERROR_RXACT_INVALID_STATE = 0x559,ERROR_RXACT_COMMIT_FAILURE = 0x55A,ERROR_SPECIAL_ACCOUNT = 0x55B,ERROR_SPECIAL_GROUP = 0x55C,ERROR_SPECIAL_USER = 0x55D,ERROR_MEMBERS_PRIMARY_GROUP = 0x55E,ERROR_TOKEN_ALREADY_IN_USE = 0x55F,ERROR_NO_SUCH_ALIAS = 0x560,ERROR_MEMBER_NOT_IN_ALIAS = 0x561,ERROR_MEMBER_IN_ALIAS = 0x562,ERROR_ALIAS_EXISTS = 0x563,ERROR_LOGON_NOT_GRANTED = 0x564,ERROR_TOO_MANY_SECRETS = 0x565,ERROR_SECRET_TOO_LONG = 0x566,ERROR_INTERNAL_DB_ERROR = 0x567,ERROR_TOO_MANY_CONTEXT_IDS = 0x568,ERROR_LOGON_TYPE_NOT_GRANTED = 0x569,ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 0x56A,ERROR_NO_SUCH_MEMBER = 0x56B,ERROR_INVALID_MEMBER = 0x56C,ERROR_TOO_MANY_SIDS = 0x56D,ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 0x56E,ERROR_NO_INHERITANCE = 0x56F,ERROR_FILE_CORRUPT = 0x570,ERROR_DISK_CORRUPT = 0x571,ERROR_NO_USER_SESSION_KEY = 0x572,ERROR_LICENSE_QUOTA_EXCEEDED = 0x573,ERROR_INVALID_WINDOW_HANDLE = 0x578,ERROR_INVALID_MENU_HANDLE = 0x579,ERROR_INVALID_CURSOR_HANDLE = 0x57A,ERROR_INVALID_ACCEL_HANDLE = 0x57B,ERROR_INVALID_HOOK_HANDLE = 0x57C,ERROR_INVALID_DWP_HANDLE = 0x57D,ERROR_TLW_WITH_WSCHILD = 0x57E,ERROR_CANNOT_FIND_WND_CLASS = 0x57F,ERROR_WINDOW_OF_OTHER_THREAD = 0x580,ERROR_HOTKEY_ALREADY_REGISTERED = 0x581,ERROR_CLASS_ALREADY_EXISTS = 0x582,ERROR_CLASS_DOES_NOT_EXIST = 0x583,ERROR_CLASS_HAS_WINDOWS = 0x584,ERROR_INVALID_INDEX = 0x585,ERROR_INVALID_ICON_HANDLE = 0x586,ERROR_PRIVATE_DIALOG_INDEX = 0x587,ERROR_LISTBOX_ID_NOT_FOUND = 0x588,ERROR_NO_WILDCARD_CHARACTERS = 0x589,ERROR_CLIPBOARD_NOT_OPEN = 0x58A,ERROR_HOTKEY_NOT_REGISTERED = 0x58B,ERROR_WINDOW_NOT_DIALOG = 0x58C,ERROR_CONTROL_ID_NOT_FOUND = 0x58D,ERROR_INVALID_COMBOBOX_MESSAGE = 0x58E,ERROR_WINDOW_NOT_COMBOBOX = 0x58F,ERROR_INVALID_EDIT_HEIGHT = 0x590,ERROR_DC_NOT_FOUND = 0x591,ERROR_INVALID_HOOK_FILTER = 0x592,ERROR_INVALID_FILTER_PROC = 0x593,ERROR_HOOK_NEEDS_HMOD = 0x594,ERROR_GLOBAL_ONLY_HOOK = 0x595,ERROR_JOURNAL_HOOK_SET = 0x596,ERROR_HOOK_NOT_INSTALLED = 0x597,ERROR_INVALID_LB_MESSAGE = 0x598,ERROR_SETCOUNT_ON_BAD_LB = 0x599,ERROR_LB_WITHOUT_TABSTOPS = 0x59A,ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 0x59B,ERROR_CHILD_WINDOW_MENU = 0x59C,ERROR_NO_SYSTEM_MENU = 0x59D,ERROR_INVALID_MSGBOX_STYLE = 0x59E,ERROR_INVALID_SPI_VALUE = 0x59F,ERROR_SCREEN_ALREADY_LOCKED = 0x5A0,ERROR_HWNDS_HAVE_DIFF_PARENT = 0x5A1,ERROR_NOT_CHILD_WINDOW = 0x5A2,ERROR_INVALID_GW_COMMAND = 0x5A3,ERROR_INVALID_THREAD_ID = 0x5A4,ERROR_NON_MDICHILD_WINDOW = 0x5A5,ERROR_POPUP_ALREADY_ACTIVE = 0x5A6,ERROR_NO_SCROLLBARS = 0x5A7,ERROR_INVALID_SCROLLBAR_RANGE = 0x5A8,ERROR_INVALID_SHOWWIN_COMMAND = 0x5A9,ERROR_NO_SYSTEM_RESOURCES = 0x5AA,ERROR_NONPAGED_SYSTEM_RESOURCES = 0x5AB,ERROR_PAGED_SYSTEM_RESOURCES = 0x5AC,ERROR_WORKING_SET_QUOTA = 0x5AD,ERROR_PAGEFILE_QUOTA = 0x5AE,ERROR_COMMITMENT_LIMIT = 0x5AF,ERROR_MENU_ITEM_NOT_FOUND = 0x5B0,ERROR_INVALID_KEYBOARD_HANDLE = 0x5B1,ERROR_HOOK_TYPE_NOT_ALLOWED = 0x5B2,ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 0x5B3,ERROR_TIMEOUT = 0x5B4,ERROR_INVALID_MONITOR_HANDLE = 0x5B5,ERROR_EVENTLOG_FILE_CORRUPT = 0x5DC,ERROR_EVENTLOG_CANT_START = 0x5DD,ERROR_LOG_FILE_FULL = 0x5DE,ERROR_EVENTLOG_FILE_CHANGED = 0x5DF,ERROR_INSTALL_SERVICE = 0x641,ERROR_INSTALL_USEREXIT = 0x642,ERROR_INSTALL_FAILURE = 0x643,ERROR_INSTALL_SUSPEND = 0x644,ERROR_UNKNOWN_PRODUCT = 0x645,ERROR_UNKNOWN_FEATURE = 0x646,ERROR_UNKNOWN_COMPONENT = 0x647,ERROR_UNKNOWN_PROPERTY = 0x648,ERROR_INVALID_HANDLE_STATE = 0x649,ERROR_BAD_CONFIGURATION = 0x64A,ERROR_INDEX_ABSENT = 0x64B,ERROR_INSTALL_SOURCE_ABSENT = 0x64C,ERROR_BAD_DATABASE_VERSION = 0x64D,ERROR_PRODUCT_UNINSTALLED = 0x64E,ERROR_BAD_QUERY_SYNTAX = 0x64F,ERROR_INVALID_FIELD = 0x650,RPC_S_INVALID_STRING_BINDING = 0x6A4,RPC_S_WRONG_KIND_OF_BINDING = 0x6A5,RPC_S_INVALID_BINDING = 0x6A6,RPC_S_PROTSEQ_NOT_SUPPORTED = 0x6A7,RPC_S_INVALID_RPC_PROTSEQ = 0x6A8,RPC_S_INVALID_STRING_UUID = 0x6A9,RPC_S_INVALID_ENDPOINT_FORMAT = 0x6AA,RPC_S_INVALID_NET_ADDR = 0x6AB,RPC_S_NO_ENDPOINT_FOUND = 0x6AC,RPC_S_INVALID_TIMEOUT = 0x6AD,RPC_S_OBJECT_NOT_FOUND = 0x6AE,RPC_S_ALREADY_REGISTERED = 0x6AF,RPC_S_TYPE_ALREADY_REGISTERED = 0x6B0,RPC_S_ALREADY_LISTENING = 0x6B1,RPC_S_NO_PROTSEQS_REGISTERED = 0x6B2,RPC_S_NOT_LISTENING = 0x6B3,RPC_S_UNKNOWN_MGR_TYPE = 0x6B4,RPC_S_UNKNOWN_IF = 0x6B5,RPC_S_NO_BINDINGS = 0x6B6,RPC_S_NO_PROTSEQS = 0x6B7,RPC_S_CANT_CREATE_ENDPOINT = 0x6B8,RPC_S_OUT_OF_RESOURCES = 0x6B9,RPC_S_SERVER_UNAVAILABLE = 0x6BA,RPC_S_SERVER_TOO_BUSY = 0x6BB,RPC_S_INVALID_NETWORK_OPTIONS = 0x6BC,RPC_S_NO_CALL_ACTIVE = 0x6BD,RPC_S_CALL_FAILED = 0x6BE,RPC_S_CALL_FAILED_DNE = 0x6BF,RPC_S_PROTOCOL_ERROR = 0x6C0,RPC_S_UNSUPPORTED_TRANS_SYN = 0x6C2,RPC_S_UNSUPPORTED_TYPE = 0x6C4,RPC_S_INVALID_TAG = 0x6C5,RPC_S_INVALID_BOUND = 0x6C6,RPC_S_NO_ENTRY_NAME = 0x6C7,RPC_S_INVALID_NAME_SYNTAX = 0x6C8,RPC_S_UNSUPPORTED_NAME_SYNTAX = 0x6C9,RPC_S_UUID_NO_ADDRESS = 0x6CB,RPC_S_DUPLICATE_ENDPOINT = 0x6CC,RPC_S_UNKNOWN_AUTHN_TYPE = 0x6CD,RPC_S_MAX_CALLS_TOO_SMALL = 0x6CE,RPC_S_STRING_TOO_LONG = 0x6CF,RPC_S_PROTSEQ_NOT_FOUND = 0x6D0,RPC_S_PROCNUM_OUT_OF_RANGE = 0x6D1,RPC_S_BINDING_HAS_NO_AUTH = 0x6D2,RPC_S_UNKNOWN_AUTHN_SERVICE = 0x6D3,RPC_S_UNKNOWN_AUTHN_LEVEL = 0x6D4,RPC_S_INVALID_AUTH_IDENTITY = 0x6D5,RPC_S_UNKNOWN_AUTHZ_SERVICE = 0x6D6,EPT_S_INVALID_ENTRY = 0x6D7,EPT_S_CANT_PERFORM_OP = 0x6D8,EPT_S_NOT_REGISTERED = 0x6D9,RPC_S_NOTHING_TO_EXPORT = 0x6DA,RPC_S_INCOMPLETE_NAME = 0x6DB,RPC_S_INVALID_VERS_OPTION = 0x6DC,RPC_S_NO_MORE_MEMBERS = 0x6DD,RPC_S_NOT_ALL_OBJS_UNEXPORTED = 0x6DE,RPC_S_INTERFACE_NOT_FOUND = 0x6DF,RPC_S_ENTRY_ALREADY_EXISTS = 0x6E0,RPC_S_ENTRY_NOT_FOUND = 0x6E1,RPC_S_NAME_SERVICE_UNAVAILABLE = 0x6E2,RPC_S_INVALID_NAF_ID = 0x6E3,RPC_S_CANNOT_SUPPORT = 0x6E4,RPC_S_NO_CONTEXT_AVAILABLE = 0x6E5,RPC_S_INTERNAL_ERROR = 0x6E6,RPC_S_ZERO_DIVIDE = 0x6E7,RPC_S_ADDRESS_ERROR = 0x6E8,RPC_S_FP_DIV_ZERO = 0x6E9,RPC_S_FP_UNDERFLOW = 0x6EA,RPC_S_FP_OVERFLOW = 0x6EB,RPC_X_NO_MORE_ENTRIES = 0x6EC,RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 0x6ED,RPC_X_SS_CHAR_TRANS_SHORT_FILE = 0x6EE,RPC_X_SS_IN_NULL_CONTEXT = 0x6EF,RPC_X_SS_CONTEXT_DAMAGED = 0x6F1,RPC_X_SS_HANDLES_MISMATCH = 0x6F2,RPC_X_SS_CANNOT_GET_CALL_HANDLE = 0x6F3,RPC_X_NULL_REF_POINTER = 0x6F4,RPC_X_ENUM_VALUE_OUT_OF_RANGE = 0x6F5,RPC_X_BYTE_COUNT_TOO_SMALL = 0x6F6,RPC_X_BAD_STUB_DATA = 0x6F7,ERROR_INVALID_USER_BUFFER = 0x6F8,ERROR_UNRECOGNIZED_MEDIA = 0x6F9,ERROR_NO_TRUST_LSA_SECRET = 0x6FA,ERROR_NO_TRUST_SAM_ACCOUNT = 0x6FB,ERROR_TRUSTED_DOMAIN_FAILURE = 0x6FC,ERROR_TRUSTED_RELATIONSHIP_FAILURE = 0x6FD,ERROR_TRUST_FAILURE = 0x6FE,RPC_S_CALL_IN_PROGRESS = 0x6FF,ERROR_NETLOGON_NOT_STARTED = 0x700,ERROR_ACCOUNT_EXPIRED = 0x701,ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 0x702,ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 0x703,ERROR_UNKNOWN_PORT = 0x704,ERROR_UNKNOWN_PRINTER_DRIVER = 0x705,ERROR_UNKNOWN_PRINTPROCESSOR = 0x706,ERROR_INVALID_SEPARATOR_FILE = 0x707,ERROR_INVALID_PRIORITY = 0x708,ERROR_INVALID_PRINTER_NAME = 0x709,ERROR_PRINTER_ALREADY_EXISTS = 0x70A,ERROR_INVALID_PRINTER_COMMAND = 0x70B,ERROR_INVALID_DATATYPE = 0x70C,ERROR_INVALID_ENVIRONMENT = 0x70D,RPC_S_NO_MORE_BINDINGS = 0x70E,ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0x70F,ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0x710,ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 0x711,ERROR_DOMAIN_TRUST_INCONSISTENT = 0x712,ERROR_SERVER_HAS_OPEN_HANDLES = 0x713,ERROR_RESOURCE_DATA_NOT_FOUND = 0x714,ERROR_RESOURCE_TYPE_NOT_FOUND = 0x715,ERROR_RESOURCE_NAME_NOT_FOUND = 0x716,ERROR_RESOURCE_LANG_NOT_FOUND = 0x717,ERROR_NOT_ENOUGH_QUOTA = 0x718,RPC_S_NO_INTERFACES = 0x719,RPC_S_CALL_CANCELLED = 0x71A,RPC_S_BINDING_INCOMPLETE = 0x71B,RPC_S_COMM_FAILURE = 0x71C,RPC_S_UNSUPPORTED_AUTHN_LEVEL = 0x71D,RPC_S_NO_PRINC_NAME = 0x71E,RPC_S_NOT_RPC_ERROR = 0x71F,RPC_S_UUID_LOCAL_ONLY = 0x720,RPC_S_SEC_PKG_ERROR = 0x721,RPC_S_NOT_CANCELLED = 0x722,RPC_X_INVALID_ES_ACTION = 0x723,RPC_X_WRONG_ES_VERSION = 0x724,RPC_X_WRONG_STUB_VERSION = 0x725,RPC_X_INVALID_PIPE_OBJECT = 0x726,RPC_X_WRONG_PIPE_ORDER = 0x727,RPC_X_WRONG_PIPE_VERSION = 0x728,RPC_S_GROUP_MEMBER_NOT_FOUND = 0x76A,EPT_S_CANT_CREATE = 0x76B,RPC_S_INVALID_OBJECT = 0x76C,ERROR_INVALID_TIME = 0x76D,ERROR_INVALID_FORM_NAME = 0x76E,ERROR_INVALID_FORM_SIZE = 0x76F,ERROR_ALREADY_WAITING = 0x770,ERROR_PRINTER_DELETED = 0x771,ERROR_INVALID_PRINTER_STATE = 0x772,ERROR_PASSWORD_MUST_CHANGE = 0x773,ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 0x774,ERROR_ACCOUNT_LOCKED_OUT = 0x775,OR_INVALID_OXID = 0x776,OR_INVALID_OID = 0x777,OR_INVALID_SET = 0x778,RPC_S_SEND_INCOMPLETE = 0x779,RPC_S_INVALID_ASYNC_HANDLE = 0x77A,RPC_S_INVALID_ASYNC_CALL = 0x77B,RPC_X_PIPE_CLOSED = 0x77C,RPC_X_PIPE_DISCIPLINE_ERROR = 0x77D,RPC_X_PIPE_EMPTY = 0x77E,ERROR_NO_SITENAME = 0x77F,ERROR_CANT_ACCESS_FILE = 0x780,ERROR_CANT_RESOLVE_FILENAME = 0x781,ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x782,ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 0x783,ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 0x784,ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 0x785,ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0x786,ERROR_DS_BUSY = 0x787,ERROR_DS_UNAVAILABLE = 0x788,ERROR_DS_NO_RIDS_ALLOCATED = 0x789,ERROR_DS_NO_MORE_RIDS = 0x78A,ERROR_DS_INCORRECT_ROLE_OWNER = 0x78B,ERROR_DS_RIDMGR_INIT_ERROR = 0x78C,ERROR_DS_OBJ_CLASS_VIOLATION = 0x78D,ERROR_DS_CANT_ON_NON_LEAF = 0x78E,ERROR_DS_CANT_ON_RDN = 0x78F,ERROR_DS_CANT_MOD_OBJ_CLASS = 0x790,ERROR_DS_CROSS_DOM_MOVE_ERROR = 0x791,ERROR_DS_GC_NOT_AVAILABLE = 0x792,ERROR_NO_BROWSER_SERVERS_FOUND = 0x17E6,ERROR_INVALID_PIXEL_FORMAT = 0x7D0,ERROR_BAD_DRIVER = 0x7D1,ERROR_INVALID_WINDOW_STYLE = 0x7D2,ERROR_METAFILE_NOT_SUPPORTED = 0x7D3,ERROR_TRANSFORM_NOT_SUPPORTED = 0x7D4,ERROR_CLIPPING_NOT_SUPPORTED = 0x7D5,ERROR_INVALID_CMM = 0x8FC,ERROR_INVALID_PROFILE = 0x8FD,ERROR_TAG_NOT_FOUND = 0x8FE,ERROR_TAG_NOT_PRESENT = 0x8FF,ERROR_DUPLICATE_TAG = 0x900,ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 0x901,ERROR_PROFILE_NOT_FOUND = 0x902,ERROR_INVALID_COLORSPACE = 0x903,ERROR_ICM_NOT_ENABLED = 0x904,ERROR_DELETING_ICM_XFORM = 0x905,ERROR_INVALID_TRANSFORM = 0x906,ERROR_UNKNOWN_PRINT_MONITOR = 0xBB8,ERROR_PRINTER_DRIVER_IN_USE = 0xBB9,ERROR_SPOOL_FILE_NOT_FOUND = 0xBBA,ERROR_SPL_NO_STARTDOC = 0xBBB,ERROR_SPL_NO_ADDJOB = 0xBBC,ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 0xBBD,ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 0xBBE,ERROR_INVALID_PRINT_MONITOR = 0xBBF,ERROR_PRINT_MONITOR_IN_USE = 0xBC0,ERROR_PRINTER_HAS_JOBS_QUEUED = 0xBC1,ERROR_SUCCESS_REBOOT_REQUIRED = 0xBC2,ERROR_SUCCESS_RESTART_REQUIRED = 0xBC3,ERROR_WINS_INTERNAL = 0xFA0,ERROR_CAN_NOT_DEL_LOCAL_WINS = 0xFA1,ERROR_STATIC_INIT = 0xFA2,ERROR_INC_BACKUP = 0xFA3,ERROR_FULL_BACKUP = 0xFA4,ERROR_REC_NON_EXISTENT = 0xFA5,ERROR_RPL_NOT_ALLOWED = 0xFA6,ERROR_DHCP_ADDRESS_CONFLICT = 0x1004,ERROR_WMI_GUID_NOT_FOUND = 0x1068,ERROR_WMI_INSTANCE_NOT_FOUND = 0x1069,ERROR_WMI_ITEMID_NOT_FOUND = 0x106A,ERROR_WMI_TRY_AGAIN = 0x106B,ERROR_WMI_DP_NOT_FOUND = 0x106C,ERROR_WMI_UNRESOLVED_INSTANCE_REF = 0x106D,ERROR_WMI_ALREADY_ENABLED = 0x106E,ERROR_WMI_GUID_DISCONNECTED = 0x106F,ERROR_WMI_SERVER_UNAVAILABLE = 0x1070,ERROR_WMI_DP_FAILED = 0x1071,ERROR_WMI_INVALID_MOF = 0x1072,ERROR_WMI_INVALID_REGINFO = 0x1073,ERROR_INVALID_MEDIA = 0x10CC,ERROR_INVALID_LIBRARY = 0x10CD,ERROR_INVALID_MEDIA_POOL = 0x10CE,ERROR_DRIVE_MEDIA_MISMATCH = 0x10CF,ERROR_MEDIA_OFFLINE = 0x10D0,ERROR_LIBRARY_OFFLINE = 0x10D1,ERROR_EMPTY = 0x10D2,ERROR_NOT_EMPTY = 0x10D3,ERROR_MEDIA_UNAVAILABLE = 0x10D4,ERROR_RESOURCE_DISABLED = 0x10D5,ERROR_INVALID_CLEANER = 0x10D6,ERROR_UNABLE_TO_CLEAN = 0x10D7,ERROR_OBJECT_NOT_FOUND = 0x10D8,ERROR_DATABASE_FAILURE = 0x10D9,ERROR_DATABASE_FULL = 0x10DA,ERROR_MEDIA_INCOMPATIBLE = 0x10DB,ERROR_RESOURCE_NOT_PRESENT = 0x10DC,ERROR_INVALID_OPERATION = 0x10DD,ERROR_MEDIA_NOT_AVAILABLE = 0x10DE,ERROR_DEVICE_NOT_AVAILABLE = 0x10DF,ERROR_REQUEST_REFUSED = 0x10E0,ERROR_FILE_OFFLINE = 0x10FE,ERROR_REMOTE_STORAGE_NOT_ACTIVE = 0x10FF,ERROR_REMOTE_STORAGE_MEDIA_ERROR = 0x1100,ERROR_NOT_A_REPARSE_POINT = 0x1126,ERROR_REPARSE_ATTRIBUTE_CONFLICT = 0x1127,ERROR_DEPENDENT_RESOURCE_EXISTS = 0x1389,ERROR_DEPENDENCY_NOT_FOUND = 0x138A,ERROR_DEPENDENCY_ALREADY_EXISTS = 0x138B,ERROR_RESOURCE_NOT_ONLINE = 0x138C,ERROR_HOST_NODE_NOT_AVAILABLE = 0x138D,ERROR_RESOURCE_NOT_AVAILABLE = 0x138E,ERROR_RESOURCE_NOT_FOUND = 0x138F,ERROR_SHUTDOWN_CLUSTER = 0x1390,ERROR_CANT_EVICT_ACTIVE_NODE = 0x1391,ERROR_OBJECT_ALREADY_EXISTS = 0x1392,ERROR_OBJECT_IN_LIST = 0x1393,ERROR_GROUP_NOT_AVAILABLE = 0x1394,ERROR_GROUP_NOT_FOUND = 0x1395,ERROR_GROUP_NOT_ONLINE = 0x1396,ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 0x1397,ERROR_HOST_NODE_NOT_GROUP_OWNER = 0x1398,ERROR_RESMON_CREATE_FAILED = 0x1399,ERROR_RESMON_ONLINE_FAILED = 0x139A,ERROR_RESOURCE_ONLINE = 0x139B,ERROR_QUORUM_RESOURCE = 0x139C,ERROR_NOT_QUORUM_CAPABLE = 0x139D,ERROR_CLUSTER_SHUTTING_DOWN = 0x139E,ERROR_INVALID_STATE = 0x139F,ERROR_RESOURCE_PROPERTIES_STORED = 0x13A0,ERROR_NOT_QUORUM_CLASS = 0x13A1,ERROR_CORE_RESOURCE = 0x13A2,ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 0x13A3,ERROR_QUORUMLOG_OPEN_FAILED = 0x13A4,ERROR_CLUSTERLOG_CORRUPT = 0x13A5,ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 0x13A6,ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 0x13A7,ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 0x13A8,ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 0x13A9,ERROR_ENCRYPTION_FAILED = 0x1770,ERROR_DECRYPTION_FAILED = 0x1771,ERROR_FILE_ENCRYPTED = 0x1772,ERROR_NO_RECOVERY_POLICY = 0x1773,ERROR_NO_EFS = 0x1774,ERROR_WRONG_EFS = 0x1775,ERROR_NO_USER_KEYS = 0x1776,ERROR_FILE_NOT_ENCRYPTED = 0x1777,ERROR_NOT_EXPORT_FORMAT = 0x1778,};
enum MACRO_EVENT {EVENT_MODIFY_STATE = 0x2,EVENT_ALL_ACCESS = 0x1F0003,};
enum MACRO_EVLEN {EVLEN = 16,UNLEN = 256,};
enum MACRO_FCIDM {FCIDM_SHVIEWFIRST = 0x0,FCIDM_SHVIEWLAST = 0x7FFF,FCIDM_BROWSERFIRST = 0xA000,FCIDM_BROWSERLAST = 0xBF00,FCIDM_GLOBALFIRST = 0x8000,FCIDM_GLOBALLAST = 0x9FFF,FCIDM_MENU_FILE = 0x8000,FCIDM_MENU_EDIT = 0x8040,FCIDM_MENU_VIEW = 0x8080,FCIDM_MENU_VIEW_SEP_OPTIONS = 0x8081,FCIDM_MENU_TOOLS = 0x80C0,FCIDM_MENU_TOOLS_SEP_GOTO = 0x80C1,FCIDM_MENU_HELP = 0x8100,FCIDM_MENU_FIND = 0x8140,FCIDM_MENU_EXPLORE = 0x8150,FCIDM_MENU_FAVORITES = 0x8170,FCIDM_TOOLBAR = 0xA000,FCIDM_STATUS = 0xA001,};
enum MACRO_FETCH {FETCH_FIRST = 1,FETCH_NEXT = 2,FETCH_PREV = 3,FETCH_RANDOM = 4,FETCH_RELATIVE = 5,FETCH_LAST = 6,};
enum MACRO_FIRST {TV_FIRST = 0x1100,HDM_FIRST = 0x1200,TCM_FIRST = 0x1300,PGM_FIRST = 0x1400,CCM_FIRST = 0x2000,};
enum MACRO_FLAGS {FLAGS_ERROR_UI_FILTER_FOR_ERRORS = 0x1,FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS = 0x2,FLAGS_ERROR_UI_FLAGS_GENERATE_DATA = 0x4,FLAGS_ERROR_UI_FLAGS_NO_UI = 0x8,FLAGS_ERROR_UI_SERIALIZE_DIALOGS = 0x10,};
enum MACRO_FLUSH {FLUSH_UPLOAD = 0x2,FLUSH_DOWNLOAD = 0x4,FLUSH_FORCE = 0x8,FLUSH_NO_UI = 0x10,FLUSH_ASYNC_OK = 0x20,};
enum MACRO_FNERR {FNERR_FILENAMECODES = 0x3000,FNERR_SUBCLASSFAILURE = 0x3001,FNERR_INVALIDFILENAME = 0x3002,FNERR_BUFFERTOOSMALL = 0x3003,};
enum MACRO_FORCE {FORCE_SAVE = 0x4,};
enum MACRO_FOUND {WSAHOST_NOT_FOUND = 11001,HOST_NOT_FOUND = 11001,};
enum MACRO_FP_MD {FP_MD_ID_BEGIN_RESERVED = 0x8000,FP_MD_ID_END_RESERVED = 0x8FFF,};
enum MACRO_FRAME {FRAME_FPO = 0,FRAME_TRAP = 1,FRAME_TSS = 2,FRAME_NONFPO = 3,};
enum MACRO_FRERR {FRERR_FINDREPLACECODES = 0x4000,FRERR_BUFFERLENGTHZERO = 0x4001,};
enum MACRO_FSCTL {FSCTL_REQUEST_OPLOCK_LEVEL_1 = 589824,FSCTL_REQUEST_OPLOCK_LEVEL_2 = 589828,FSCTL_REQUEST_BATCH_OPLOCK = 589832,FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = 589836,FSCTL_OPBATCH_ACK_CLOSE_PENDING = 589840,FSCTL_OPLOCK_BREAK_NOTIFY = 589844,FSCTL_LOCK_VOLUME = 589848,FSCTL_UNLOCK_VOLUME = 589852,FSCTL_DISMOUNT_VOLUME = 589856,FSCTL_IS_VOLUME_MOUNTED = 589864,FSCTL_IS_PATHNAME_VALID = 589868,FSCTL_MARK_VOLUME_DIRTY = 589872,FSCTL_QUERY_RETRIEVAL_POINTERS = 589883,FSCTL_GET_COMPRESSION = 589884,FSCTL_SET_COMPRESSION = 639040,FSCTL_MARK_AS_SYSTEM_HIVE = 589903,FSCTL_OPLOCK_BREAK_ACK_NO_2 = 589904,FSCTL_INVALIDATE_VOLUMES = 589908,FSCTL_QUERY_FAT_BPB = 589912,FSCTL_REQUEST_FILTER_OPLOCK = 589916,FSCTL_FILESYSTEM_GET_STATISTICS = 589920,FSCTL_GET_NTFS_VOLUME_DATA = 589924,FSCTL_GET_NTFS_FILE_RECORD = 589928,FSCTL_GET_VOLUME_BITMAP = 589935,FSCTL_GET_RETRIEVAL_POINTERS = 589939,FSCTL_MOVE_FILE = 589940,FSCTL_IS_VOLUME_DIRTY = 589944,FSCTL_GET_HFS_INFORMATION = 589948,FSCTL_ALLOW_EXTENDED_DASD_IO = 589955,FSCTL_READ_PROPERTY_DATA = 589959,FSCTL_WRITE_PROPERTY_DATA = 589963,FSCTL_FIND_FILES_BY_SID = 589967,FSCTL_DUMP_PROPERTY_DATA = 589975,FSCTL_SET_OBJECT_ID = 622744,FSCTL_GET_OBJECT_ID = 589980,FSCTL_DELETE_OBJECT_ID = 622752,FSCTL_SET_REPARSE_POINT = 622756,FSCTL_GET_REPARSE_POINT = 589992,FSCTL_DELETE_REPARSE_POINT = 622764,FSCTL_ENUM_USN_DATA = 606387,FSCTL_SECURITY_ID_CHECK = 606391,FSCTL_READ_USN_JOURNAL = 606395,FSCTL_SET_OBJECT_ID_EXTENDED = 622780,FSCTL_CREATE_OR_GET_OBJECT_ID = 590016,FSCTL_SET_SPARSE = 622788,FSCTL_SET_ZERO_DATA = 622792,FSCTL_QUERY_ALLOCATED_RANGES = 606415,FSCTL_ENABLE_UPGRADE = 622800,FSCTL_SET_ENCRYPTION = 590036,FSCTL_ENCRYPTION_FSCTL_IO = 590043,FSCTL_WRITE_RAW_ENCRYPTED = 590047,FSCTL_READ_RAW_ENCRYPTED = 590051,FSCTL_CREATE_USN_JOURNAL = 606439,FSCTL_READ_FILE_USN_DATA = 606443,FSCTL_WRITE_USN_CLOSE_RECORD = 606447,FSCTL_EXTEND_VOLUME = 590064,};
enum MACRO_FVSIF {FVSIF_RECT = 0x1,FVSIF_PINNED = 0x2,FVSIF_NEWFAILED = 0x8000000,FVSIF_NEWFILE = 0x80000000,FVSIF_CANVIEWIT = 0x40000000,};
enum MACRO_GIZMO {GIZMO_NORMAL = 2,GIZMO_DISABLED = 4,};
enum MACRO_GNLEN {GNLEN = 256,};
enum MACRO_GROUP {GROUP_NAME = 0x80,UNIQUE_NAME = 0x0,};
enum MACRO_HDATA {HDATA_APPOWNED = 0x1,};
enum MACRO_HEKKR {HEKKR_PRECONVERT = 1,HEKKR_CONVERT = 2,HEKKR_TEMPCONFIRM = 3,};
enum MACRO_HFILE {HFILE_ERROR = -1,};
enum MACRO_HINST {HINST_COMMCTRL = -1,};
enum MACRO_HLINK {HLINK_E_FIRST = -2147221248,HLINK_S_FIRST = 262400,HLINK_S_DONTHIDE = 262400,};
enum MACRO_HOVER {HOVER_DEFAULT = 0xFFFFFFFF,};
enum MACRO_HTTOP {HTTOP = 12,};
enum MACRO_ICERR {ICERR_OK = 0,ICERR_DONTDRAW = 1,ICERR_NEWPALETTE = 2,ICERR_GOTOKEYFRAME = 3,ICERR_STOPDRAWING = 4,ICERR_UNSUPPORTED = -1,ICERR_BADFORMAT = -2,ICERR_MEMORY = -3,ICERR_INTERNAL = -4,ICERR_BADFLAGS = -5,ICERR_BADPARAM = -6,ICERR_BADSIZE = -7,ICERR_BADHANDLE = -8,ICERR_CANTUPDATE = -9,ICERR_ABORT = -10,ICERR_ERROR = -100,ICERR_BADBITDEPTH = -200,ICERR_BADIMAGESIZE = -201,ICERR_CUSTOM = -400,};
enum MACRO_IDANI {IDANI_OPEN = 1,IDANI_CLOSE = 2,IDANI_CAPTION = 3,};
enum MACRO_IDHOT {IDHOT_SNAPWINDOW = -1,IDHOT_SNAPDESKTOP = -2,};
enum MACRO_IDYES {IDYES = 6,};
enum MACRO_ID_EL {ID_EL_CHANGESOURCE = 201,ID_EL_AUTOMATIC = 202,ID_EL_CLOSE = 208,ID_EL_CANCELLINK = 209,ID_EL_UPDATENOW = 210,ID_EL_OPENSOURCE = 211,ID_EL_MANUAL = 212,ID_EL_LINKSOURCE = 216,ID_EL_LINKTYPE = 217,ID_EL_UPDATE = 218,ID_EL_NULL = -1,ID_EL_LINKSLISTBOX = 206,ID_EL_COL1 = 220,ID_EL_COL2 = 221,ID_EL_COL3 = 222,ID_GROUP = 120,ID_CURRENT = 121,ID_CURRENTICON = 122,ID_DEFAULT = 123,ID_DEFAULTICON = 124,ID_FROMFILE = 125,ID_FROMFILEEDIT = 126,ID_ICONLIST = 127,ID_LABEL = 128,ID_LABELEDIT = 129,ID_BROWSE = 130,ID_RESULTICON = 132,ID_RESULTLABEL = 133,};
enum MACRO_ID_IO {ID_IO_CREATENEW = 2100,ID_IO_CREATEFROMFILE = 2101,ID_IO_LINKFILE = 2102,ID_IO_OBJECTTYPELIST = 2103,ID_IO_DISPLAYASICON = 2104,ID_IO_CHANGEICON = 2105,ID_IO_FILE = 2106,ID_IO_FILEDISPLAY = 2107,ID_IO_RESULTIMAGE = 2108,ID_IO_RESULTTEXT = 2109,ID_IO_ICONDISPLAY = 2110,ID_IO_OBJECTTYPETEXT = 2111,ID_IO_FILETEXT = 2112,ID_IO_FILETYPE = 2113,};
enum MACRO_ID_PS {ID_PS_PASTE = 500,ID_PS_PASTELINK = 501,ID_PS_SOURCETEXT = 502,ID_PS_PASTELIST = 503,ID_PS_PASTELINKLIST = 504,ID_PS_DISPLAYLIST = 505,ID_PS_DISPLAYASICON = 506,ID_PS_ICONDISPLAY = 507,ID_PS_CHANGEICON = 508,ID_PS_RESULTIMAGE = 509,ID_PS_RESULTTEXT = 510,ID_PS_RESULTGROUP = 511,ID_PS_STXSOURCE = 512,ID_PS_STXAS = 513,};
enum MACRO_ID_PU {ID_PU_LINKS = 900,ID_PU_TEXT = 901,ID_PU_CONVERT = 902,ID_PU_BROWSE = 904,ID_PU_METER = 905,ID_PU_PERCENT = 906,ID_PU_STOP = 907,ID_DUMMY = 999,};
enum MACRO_IEREC {IEREC_NONE = 0x0,IEREC_GESTURE = 0x1,IEREC_ALL = 0x1,IEREC_RESERVED = 0xFFFE,};
enum MACRO_IESEC {IESEC_NOCOPY = 0x1,IESEC_NOCUT = 0x2,IESEC_NOPASTE = 0x4,IESEC_NOUNDO = 0x8,IESEC_NOINK = 0x10,IESEC_NOERASE = 0x20,IESEC_NOGET = 0x40,IESEC_NOSET = 0x80,IESEC_RESERVED = 0xFF00,};
enum MACRO_IMAGE {IMAGE_DOS_SIGNATURE = 0x5A4D,IMAGE_OS2_SIGNATURE = 0x454E,IMAGE_OS2_SIGNATURE_LE = 0x454C,IMAGE_VXD_SIGNATURE = 0x454C,IMAGE_NT_SIGNATURE = 0x4550,IMAGE_SIZEOF_FILE_HEADER = 0x14,IMAGE_FILE_RELOCS_STRIPPED = 0x1,IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,IMAGE_FILE_BYTES_REVERSED_LO = 0x80,IMAGE_FILE_32BIT_MACHINE = 0x100,IMAGE_FILE_DEBUG_STRIPPED = 0x200,IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,IMAGE_FILE_SYSTEM = 0x1000,IMAGE_FILE_DLL = 0x2000,IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,IMAGE_FILE_MACHINE_UNKNOWN = 0x0,IMAGE_FILE_MACHINE_I386 = 0x14C,IMAGE_FILE_MACHINE_R3000 = 0x162,IMAGE_FILE_MACHINE_R4000 = 0x166,IMAGE_FILE_MACHINE_R10000 = 0x168,IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169,IMAGE_FILE_MACHINE_ALPHA = 0x184,IMAGE_FILE_MACHINE_POWERPC = 0x1F0,IMAGE_FILE_MACHINE_SH3 = 0x1A2,IMAGE_FILE_MACHINE_SH3E = 0x1A4,IMAGE_FILE_MACHINE_SH4 = 0x1A6,IMAGE_FILE_MACHINE_ARM = 0x1C0,IMAGE_FILE_MACHINE_THUMB = 0x1C2,IMAGE_FILE_MACHINE_IA64 = 0x200,IMAGE_FILE_MACHINE_MIPS16 = 0x266,IMAGE_FILE_MACHINE_MIPSFPU = 0x366,IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,IMAGE_FILE_MACHINE_ALPHA64 = 0x284,IMAGE_FILE_MACHINE_AXP64 = 0x284,IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 0x10,IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 0x38,IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 0x1C,IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 0xE0,IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 0xF0,IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10B,IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20B,IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 0xE0,IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10B,IMAGE_SUBSYSTEM_UNKNOWN = 0x0,IMAGE_SUBSYSTEM_NATIVE = 0x1,IMAGE_SUBSYSTEM_WINDOWS_GUI = 0x2,IMAGE_SUBSYSTEM_WINDOWS_CUI = 0x3,IMAGE_SUBSYSTEM_OS2_CUI = 0x5,IMAGE_SUBSYSTEM_POSIX_CUI = 0x7,IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 0x8,IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 0x9,IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,IMAGE_DIRECTORY_ENTRY_EXPORT = 0x0,IMAGE_DIRECTORY_ENTRY_IMPORT = 0x1,IMAGE_DIRECTORY_ENTRY_RESOURCE = 0x2,IMAGE_DIRECTORY_ENTRY_EXCEPTION = 0x3,IMAGE_DIRECTORY_ENTRY_SECURITY = 0x4,IMAGE_DIRECTORY_ENTRY_BASERELOC = 0x5,IMAGE_DIRECTORY_ENTRY_DEBUG = 0x6,IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 0x7,IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 0x8,IMAGE_DIRECTORY_ENTRY_TLS = 0x9,IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 0xA,IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 0xB,IMAGE_DIRECTORY_ENTRY_IAT = 0xC,IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 0xD,IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 0xE,IMAGE_SIZEOF_SHORT_NAME = 0x8,IMAGE_SIZEOF_SECTION_HEADER = 0x28,IMAGE_SCN_TYPE_NO_PAD = 0x8,IMAGE_SCN_CNT_CODE = 0x20,IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,IMAGE_SCN_LNK_OTHER = 0x100,IMAGE_SCN_LNK_INFO = 0x200,IMAGE_SCN_LNK_REMOVE = 0x800,IMAGE_SCN_LNK_COMDAT = 0x1000,IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x4000,IMAGE_SCN_GPREL = 0x8000,IMAGE_SCN_MEM_FARDATA = 0x8000,IMAGE_SCN_MEM_PURGEABLE = 0x20000,IMAGE_SCN_MEM_16BIT = 0x20000,IMAGE_SCN_MEM_LOCKED = 0x40000,IMAGE_SCN_MEM_PRELOAD = 0x80000,IMAGE_SCN_ALIGN_1BYTES = 0x100000,IMAGE_SCN_ALIGN_2BYTES = 0x200000,IMAGE_SCN_ALIGN_4BYTES = 0x300000,IMAGE_SCN_ALIGN_8BYTES = 0x400000,IMAGE_SCN_ALIGN_16BYTES = 0x500000,IMAGE_SCN_ALIGN_32BYTES = 0x600000,IMAGE_SCN_ALIGN_64BYTES = 0x700000,IMAGE_SCN_ALIGN_128BYTES = 0x800000,IMAGE_SCN_ALIGN_256BYTES = 0x900000,IMAGE_SCN_ALIGN_512BYTES = 0xA00000,IMAGE_SCN_ALIGN_1024BYTES = 0xB00000,IMAGE_SCN_ALIGN_2048BYTES = 0xC00000,IMAGE_SCN_ALIGN_4096BYTES = 0xD00000,IMAGE_SCN_ALIGN_8192BYTES = 0xE00000,IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,IMAGE_SCN_MEM_SHARED = 0x10000000,IMAGE_SCN_MEM_EXECUTE = 0x20000000,IMAGE_SCN_MEM_READ = 0x40000000,IMAGE_SCN_MEM_WRITE = 0x80000000,IMAGE_SCN_SCALE_INDEX = 0x1,IMAGE_SIZEOF_SYMBOL = 0x12,IMAGE_SYM_UNDEFINED = 0x0,IMAGE_SYM_ABSOLUTE = 0xFFFFFFFF,IMAGE_SYM_DEBUG = 0xFFFFFFFE,IMAGE_SYM_TYPE_NULL = 0x0,IMAGE_SYM_TYPE_VOID = 0x1,IMAGE_SYM_TYPE_CHAR = 0x2,IMAGE_SYM_TYPE_SHORT = 0x3,IMAGE_SYM_TYPE_INT = 0x4,IMAGE_SYM_TYPE_LONG = 0x5,IMAGE_SYM_TYPE_FLOAT = 0x6,IMAGE_SYM_TYPE_DOUBLE = 0x7,IMAGE_SYM_TYPE_STRUCT = 0x8,IMAGE_SYM_TYPE_UNION = 0x9,IMAGE_SYM_TYPE_ENUM = 0xA,IMAGE_SYM_TYPE_MOE = 0xB,IMAGE_SYM_TYPE_BYTE = 0xC,IMAGE_SYM_TYPE_WORD = 0xD,IMAGE_SYM_TYPE_UINT = 0xE,IMAGE_SYM_TYPE_DWORD = 0xF,IMAGE_SYM_TYPE_PCODE = 0x8000,IMAGE_SYM_DTYPE_NULL = 0x0,IMAGE_SYM_DTYPE_POINTER = 0x1,IMAGE_SYM_DTYPE_FUNCTION = 0x2,IMAGE_SYM_DTYPE_ARRAY = 0x3,IMAGE_SYM_CLASS_END_OF_FUNCTION = 0xFF,IMAGE_SYM_CLASS_NULL = 0x0,IMAGE_SYM_CLASS_AUTOMATIC = 0x1,IMAGE_SYM_CLASS_EXTERNAL = 0x2,IMAGE_SYM_CLASS_STATIC = 0x3,IMAGE_SYM_CLASS_REGISTER = 0x4,IMAGE_SYM_CLASS_EXTERNAL_DEF = 0x5,IMAGE_SYM_CLASS_LABEL = 0x6,IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x7,IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x8,IMAGE_SYM_CLASS_ARGUMENT = 0x9,IMAGE_SYM_CLASS_STRUCT_TAG = 0xA,IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0xB,IMAGE_SYM_CLASS_UNION_TAG = 0xC,IMAGE_SYM_CLASS_TYPE_DEFINITION = 0xD,IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0xE,IMAGE_SYM_CLASS_ENUM_TAG = 0xF,IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x10,IMAGE_SYM_CLASS_REGISTER_PARAM = 0x11,IMAGE_SYM_CLASS_BIT_FIELD = 0x12,IMAGE_SYM_CLASS_FAR_EXTERNAL = 0x44,IMAGE_SYM_CLASS_BLOCK = 0x64,IMAGE_SYM_CLASS_FUNCTION = 0x65,IMAGE_SYM_CLASS_END_OF_STRUCT = 0x66,IMAGE_SYM_CLASS_FILE = 0x67,IMAGE_SYM_CLASS_SECTION = 0x68,IMAGE_SYM_CLASS_WEAK_EXTERNAL = 0x69,};
enum MACRO_INDEX {INDEX_DONT_CARE = 0,};
enum MACRO_INPUT {INPUT_MOUSE = 0,INPUT_KEYBOARD = 1,INPUT_HARDWARE = 2,};
enum MACRO_IOCTL {IOCTL_PERF_GET_STATS = 0x10,IOCTL_PERF_START_STAT = 0x11,IOCTL_PERF_STOP_STAT = 0x12,};
enum MACRO_IPROP {IPROP_READONLY = 0x1,IPROP_READWRITE = 0x2,IPROP_CLEAN = 0x10000,IPROP_DIRTY = 0x20000,};
enum MACRO_IP_MF {IP_MF = 0x2000,IP_HEADER_MINIMUM_LEN = 0x14,};
enum MACRO_ISIOI {ISIOI_ICONFILE = 0x1,ISIOI_ICONINDEX = 0x2,ISIOI_SYSIMAGELISTINDEX = 0x4,};
enum MACRO_ISMEX {ISMEX_NOSEND = 0x0,ISMEX_SEND = 0x1,ISMEX_NOTIFY = 0x2,ISMEX_CALLBACK = 0x4,ISMEX_REPLIED = 0x8,};
enum MACRO_JIFMK {JIFMK_SOF0 = 0xFFC0,JIFMK_SOF1 = 0xFFC1,JIFMK_SOF2 = 0xFFC2,JIFMK_SOF3 = 0xFFC3,JIFMK_SOF5 = 0xFFC5,JIFMK_SOF6 = 0xFFC6,JIFMK_SOF7 = 0xFFC7,JIFMK_JPG = 0xFFC8,JIFMK_SOF9 = 0xFFC9,JIFMK_SOF10 = 0xFFCA,JIFMK_SOF11 = 0xFFCB,JIFMK_SOF13 = 0xFFCD,JIFMK_SOF14 = 0xFFCE,JIFMK_SOF15 = 0xFFCF,JIFMK_DHT = 0xFFC4,JIFMK_DAC = 0xFFCC,JIFMK_RST0 = 0xFFD0,JIFMK_RST1 = 0xFFD1,JIFMK_RST2 = 0xFFD2,JIFMK_RST3 = 0xFFD3,JIFMK_RST4 = 0xFFD4,JIFMK_RST5 = 0xFFD5,JIFMK_RST6 = 0xFFD6,JIFMK_RST7 = 0xFFD7,JIFMK_SOI = 0xFFD8,JIFMK_EOI = 0xFFD9,JIFMK_SOS = 0xFFDA,JIFMK_DQT = 0xFFDB,JIFMK_DNL = 0xFFDC,JIFMK_DRI = 0xFFDD,JIFMK_DHP = 0xFFDE,JIFMK_EXP = 0xFFDF,JIFMK_APP0 = 0xFFE0,JIFMK_APP1 = 0xFFE1,JIFMK_APP2 = 0xFFE2,JIFMK_APP3 = 0xFFE3,JIFMK_APP4 = 0xFFE4,JIFMK_APP5 = 0xFFE5,JIFMK_APP6 = 0xFFE6,JIFMK_APP7 = 0xFFE7,JIFMK_JPG0 = 0xFFF0,JIFMK_JPG1 = 0xFFF1,JIFMK_JPG2 = 0xFFF2,JIFMK_JPG3 = 0xFFF3,JIFMK_JPG4 = 0xFFF4,JIFMK_JPG5 = 0xFFF5,JIFMK_JPG6 = 0xFFF6,JIFMK_JPG7 = 0xFFF7,JIFMK_JPG8 = 0xFFF8,JIFMK_JPG9 = 0xFFF9,JIFMK_JPG10 = 0xFFFA,JIFMK_JPG11 = 0xFFFB,JIFMK_JPG12 = 0xFFFC,JIFMK_JPG13 = 0xFFFD,JIFMK_COM = 0xFFFE,JIFMK_TEM = 0xFF01,JIFMK_RES = 0xFF02,JIFMK_00 = 0xFF00,JIFMK_FF = 0xFFFF,};
enum MACRO_LCMAP {LCMAP_LOWERCASE = 0x100,LCMAP_UPPERCASE = 0x200,LCMAP_SORTKEY = 0x400,LCMAP_BYTEREV = 0x800,LCMAP_HIRAGANA = 0x100000,LCMAP_KATAKANA = 0x200000,LCMAP_HALFWIDTH = 0x400000,LCMAP_FULLWIDTH = 0x800000,LCMAP_LINGUISTIC_CASING = 0x1000000,LCMAP_SIMPLIFIED_CHINESE = 0x2000000,LCMAP_TRADITIONAL_CHINESE = 0x4000000,};
enum MACRO_LCRED {LCRED_STATUS_NOCRED = 0x0,LCRED_CRED_EXISTS = 0x1,LCRED_STATUS_UNKNOWN_ISSUER = 0x2,};
enum MACRO_LLKHF {LLKHF_EXTENDED = 0x1,LLKHF_INJECTED = 0x10,LLKHF_ALTDOWN = 0x20,LLKHF_UP = 0x80,};
enum MACRO_LLMHF {LLMHF_INJECTED = 0x1,};
enum MACRO_LOCAL {DPENUMPLAYERS_LOCAL = 0x8,DPENUMGROUPS_LOCAL = 0x8,};
enum MACRO_LOCKF {LOCKF_LOGICAL_LOCK = 0x0,LOCKF_PHYSICAL_LOCK = 0x1,};
enum MACRO_LOCKP {LOCKP_ALLOW_WRITES = 0x1,LOCKP_FAIL_WRITES = 0x0,LOCKP_FAIL_MEM_MAPPING = 0x2,LOCKP_ALLOW_MEM_MAPPING = 0x0,LOCKP_USER_MASK = 0x3,LOCKP_LOCK_FOR_FORMAT = 0x4,};
enum MACRO_LOGON {LOGON_NO_DIALOG = 0x1,LOGON_NO_CONNECT = 0x4,LOGON_NO_INBOUND = 0x8,LOGON_NO_OUTBOUND = 0x10,LOGON_SP_IDLE = 0x10000,LOGON_SP_POLL = 0x20000,LOGON_SP_RESOLVE = 0x40000,};
enum MACRO_LPSTR {LPSTR_TEXTCALLBACKW = -1,LPSTR_TEXTCALLBACKA = -1,LPSTR_TEXTCALLBACK = -1,};
enum MACRO_LSQL2 {LSQL2_1 = 3,LSQL2_2 = 4,};
enum MACRO_LVGIT {LVGIT_UNFOLDED = 0x1,};
enum MACRO_LVSCW {LVSCW_AUTOSIZE = -1,LVSCW_AUTOSIZE_USEHEADER = -2,};
enum MACRO_LVSIL {LVSIL_NORMAL = 0,LVSIL_SMALL = 1,LVSIL_STATE = 2,};
enum MACRO_MAJOR {MAJOR_VERSION_MASK = 0xF,};
enum MACRO_MD_VR {MD_VR_PATH = 3001,MD_VR_USERNAME = 3002,MD_VR_PASSWORD = 3003,MD_VR_PASSTHROUGH = 3006,};
enum MACRO_MEDIA {MEDIA_UNKNOWN = 0,MEDIA_SERIAL = 1,MEDIA_RAS10_SERIAL = 2,MEDIA_X25 = 3,MEDIA_ISDN = 4,};
enum MACRO_MIXER {MIXER_SHORT_NAME_CHARS = 16,MIXER_LONG_NAME_CHARS = 64,};
enum MACRO_MKSYS {MKSYS_URLMONIKER = 6,};
enum MACRO_MMIOM {MMIOM_READ = 0,MMIOM_WRITE = 1,MMIOM_SEEK = 2,MMIOM_OPEN = 3,MMIOM_CLOSE = 4,MMIOM_WRITEFLUSH = 5,MMIOM_RENAME = 6,MMIOM_USER = 32768,};
enum MACRO_MM_S3 {MM_S3_WAVEOUT = 0x1,MM_S3_WAVEIN = 0x2,MM_S3_MIDIOUT = 0x3,MM_S3_MIDIIN = 0x4,MM_S3_FMSYNTH = 0x5,MM_S3_MIXER = 0x6,MM_S3_AUX = 0x7,MM_SEERSYS_SEERSYNTH = 0x1,MM_SEERSYS_SEERWAVE = 0x2,MM_SEERSYS_SEERMIX = 0x3,MM_SOFTSOUND_CODEC = 0x1,MM_SOUNDESIGNS_WAVEIN = 0x1,MM_SOUNDESIGNS_WAVEOUT = 0x2,MM_SSP_SNDFESWAVEIN = 0x1,MM_SSP_SNDFESWAVEOUT = 0x2,MM_SSP_SNDFESMIDIIN = 0x3,MM_SSP_SNDFESMIDIOUT = 0x4,MM_SSP_SNDFESSYNTH = 0x5,MM_SSP_SNDFESMIX = 0x6,MM_SSP_SNDFESAUX = 0x7,MM_TDK_MW_MIDI_SYNTH = 0x1,MM_TDK_MW_MIDI_IN = 0x2,MM_TDK_MW_MIDI_OUT = 0x3,MM_TDK_MW_WAVE_IN = 0x4,MM_TDK_MW_WAVE_OUT = 0x5,MM_TDK_MW_AUX = 0x6,MM_TDK_MW_MIXER = 0xA,MM_TDK_MW_AUX_MASTER = 0x64,MM_TDK_MW_AUX_BASS = 0x65,MM_TDK_MW_AUX_TREBLE = 0x66,MM_TDK_MW_AUX_MIDI_VOL = 0x67,MM_TDK_MW_AUX_WAVE_VOL = 0x68,MM_TDK_MW_AUX_WAVE_RVB = 0x69,MM_TDK_MW_AUX_WAVE_CHR = 0x6A,MM_TDK_MW_AUX_VOL = 0x6B,MM_TDK_MW_AUX_RVB = 0x6C,MM_TDK_MW_AUX_CHR = 0x6D,MM_TBS_TROPEZ_WAVEIN = 0x25,MM_TBS_TROPEZ_WAVEOUT = 0x26,MM_TBS_TROPEZ_AUX1 = 0x27,MM_TBS_TROPEZ_AUX2 = 0x28,MM_TBS_TROPEZ_LINE = 0x29,MM_VIENNASYS_TSP_WAVE_DRIVER = 0x1,MM_VIONA_QVINPCI_MIXER = 0x1,MM_VIONA_QVINPCI_WAVEIN = 0x2,MM_VIONAQVINPCI_WAVEOUT = 0x3,MM_VIONA_BUSTER_MIXER = 0x4,MM_VIONA_CINEMASTER_MIXER = 0x5,MM_VIONA_CONCERTO_MIXER = 0x6,MM_WILDCAT_AUTOSCOREMIDIIN = 0x1,MM_WILLOWPOND_FMSYNTH_STEREO = 0x14,MM_WILLOWPOND_SNDPORT_WAVEIN = 0x64,MM_WILLOWPOND_SNDPORT_WAVEOUT = 0x65,MM_WILLOWPOND_SNDPORT_MIXER = 0x66,MM_WILLOWPOND_SNDPORT_AUX = 0x67,MM_WILLOWPOND_PH_WAVEIN = 0x68,MM_WILLOWPOND_PH_WAVEOUT = 0x69,MM_WILLOWPOND_PH_MIXER = 0x6A,MM_WILLOWPOND_PH_AUX = 0x6B,MM_WORKBIT_MIXER = 0x1,MM_WORKBIT_WAVEOUT = 0x2,MM_WORKBIT_WAVEIN = 0x3,MM_WORKBIT_MIDIIN = 0x4,MM_WORKBIT_MIDIOUT = 0x5,MM_WORKBIT_FMSYNTH = 0x6,MM_WORKBIT_AUX = 0x7,MM_WORKBIT_JOYSTICK = 0x8,MM_FHGIIS_MPEGLAYER3 = 0xA,};
enum MACRO_MNGOF {MNGOF_GAP = 0x3,};
enum MACRO_MOUSE {MOUSE_MOVED = 0x1,};
enum MACRO_MQMSG {MQMSG_CLASS_NORMAL = 0,MQMSG_CLASS_REPORT = 1,MQMSG_CLASS_ACK_REACH_QUEUE = 2,MQMSG_CLASS_ACK_RECEIVE = 16384,MQMSG_CLASS_NACK_BAD_DST_Q = 32768,MQMSG_CLASS_NACK_PURGED = 32769,MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT = 32770,MQMSG_CLASS_NACK_Q_EXCEED_QUOTA = 32771,MQMSG_CLASS_NACK_ACCESS_DENIED = 32772,MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED = 32773,MQMSG_CLASS_NACK_BAD_SIGNATURE = 32774,MQMSG_CLASS_NACK_BAD_ENCRYPTION = 32775,MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT = 32776,MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q = 32777,MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG = 32778,MQMSG_CLASS_NACK_Q_DELETED = 49152,MQMSG_CLASS_NACK_Q_PURGED = 49153,MQMSG_CLASS_NACK_RECEIVE_TIMEOUT = 49154,MQMSG_ACKNOWLEDGMENT_NONE = 0,MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL = 1,MQMSG_ACKNOWLEDGMENT_POS_RECEIVE = 2,MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL = 4,MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE = 8,MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE = 4,MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE = 5,MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE = 12,MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE = 14,MQMSG_DELIVERY_EXPRESS = 0,MQMSG_DELIVERY_RECOVERABLE = 1,MQMSG_JOURNAL_NONE = 0,MQMSG_DEADLETTER = 1,MQMSG_JOURNAL = 2,MQMSG_TRACE_NONE = 0,MQMSG_SEND_ROUTE_TO_REPORT_QUEUE = 1,MQMSG_SENDERID_TYPE_NONE = 0,MQMSG_SENDERID_TYPE_SID = 1,MQMSG_PRIV_LEVEL_NONE = 0,MQMSG_PRIV_LEVEL_BODY = 1,MQMSG_AUTH_LEVEL_NONE = 0,MQMSG_AUTH_LEVEL_ALWAYS = 1,};
enum MACRO_MQSEC {MQSEC_DELETE_MESSAGE = 0x1,MQSEC_PEEK_MESSAGE = 0x2,MQSEC_WRITE_MESSAGE = 0x4,MQSEC_DELETE_JOURNAL_MESSAGE = 0x8,MQSEC_SET_QUEUE_PROPERTIES = 0x10,MQSEC_GET_QUEUE_PROPERTIES = 0x20,MQSEC_DELETE_QUEUE = 0x10000,MQSEC_GET_QUEUE_PERMISSIONS = 0x20000,MQSEC_CHANGE_QUEUE_PERMISSIONS = 0x40000,MQSEC_TAKE_QUEUE_OWNERSHIP = 0x80000,MQSEC_RECEIVE_MESSAGE = 0x3,MQSEC_RECEIVE_JOURNAL_MESSAGE = 0xA,MQSEC_QUEUE_GENERIC_READ = 0x2002B,MQSEC_QUEUE_GENERIC_WRITE = 0x20024,MQSEC_QUEUE_GENERIC_EXECUTE = 0x0,MQSEC_QUEUE_GENERIC_ALL = 0xF003F,};
enum MACRO_MQ_OK {MQ_OK = 0,MQ_ERROR = -1072824319,MQ_ERROR_PROPERTY = -1072824318,MQ_ERROR_QUEUE_NOT_FOUND = -1072824317,MQ_ERROR_QUEUE_EXISTS = -1072824315,MQ_ERROR_INVALID_PARAMETER = -1072824314,MQ_ERROR_INVALID_HANDLE = -1072824313,MQ_ERROR_OPERATION_CANCELLED = -1072824312,MQ_ERROR_SHARING_VIOLATION = -1072824311,MQ_ERROR_SERVICE_NOT_AVAILABLE = -1072824309,MQ_ERROR_MACHINE_NOT_FOUND = -1072824307,MQ_ERROR_ILLEGAL_SORT = -1072824304,MQ_ERROR_ILLEGAL_USER = -1072824303,MQ_ERROR_NO_DS = -1072824301,MQ_ERROR_ILLEGAL_QUEUE_PATHNAME = -1072824300,MQ_ERROR_ILLEGAL_PROPERTY_VALUE = -1072824296,MQ_ERROR_ILLEGAL_PROPERTY_VT = -1072824295,MQ_ERROR_BUFFER_OVERFLOW = -1072824294,MQ_ERROR_IO_TIMEOUT = -1072824293,MQ_ERROR_ILLEGAL_CURSOR_ACTION = -1072824292,MQ_ERROR_MESSAGE_ALREADY_RECEIVED = -1072824291,MQ_ERROR_ILLEGAL_FORMATNAME = -1072824290,MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL = -1072824289,MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION = -1072824288,MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR = -1072824287,MQ_ERROR_SENDERID_BUFFER_TOO_SMALL = -1072824286,MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL = -1072824285,MQ_ERROR_CANNOT_IMPERSONATE_CLIENT = -1072824284,MQ_ERROR_ACCESS_DENIED = -1072824283,MQ_ERROR_PRIVILEGE_NOT_HELD = -1072824282,MQ_ERROR_INSUFFICIENT_RESOURCES = -1072824281,MQ_ERROR_USER_BUFFER_TOO_SMALL = -1072824280,MQ_ERROR_MESSAGE_STORAGE_FAILED = -1072824278,MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL = -1072824277,MQ_ERROR_INVALID_CERTIFICATE = -1072824276,MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE = -1072824275,MQ_ERROR_NO_INTERNAL_USER_CERT = -1072824273,MQ_ERROR_CORRUPTED_SECURITY_DATA = -1072824272,MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE = -1072824271,MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION = -1072824269,MQ_ERROR_BAD_SECURITY_CONTEXT = -1072824267,MQ_ERROR_COULD_NOT_GET_USER_SID = -1072824266,MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO = -1072824265,MQ_ERROR_ILLEGAL_MQCOLUMNS = -1072824264,MQ_ERROR_ILLEGAL_PROPID = -1072824263,MQ_ERROR_ILLEGAL_RELATION = -1072824262,MQ_ERROR_ILLEGAL_PROPERTY_SIZE = -1072824261,MQ_ERROR_ILLEGAL_RESTRICTION_PROPID = -1072824260,MQ_ERROR_ILLEGAL_MQQUEUEPROPS = -1072824259,MQ_ERROR_PROPERTY_NOTALLOWED = -1072824258,MQ_ERROR_INSUFFICIENT_PROPERTIES = -1072824257,MQ_ERROR_MACHINE_EXISTS = -1072824256,MQ_ERROR_ILLEGAL_MQQMPROPS = -1072824255,MQ_ERROR_DS_IS_FULL = -1072824254,MQ_ERROR_DS_ERROR = -1072824253,MQ_ERROR_INVALID_OWNER = -1072824252,MQ_ERROR_UNSUPPORTED_ACCESS_MODE = -1072824251,MQ_ERROR_RESULT_BUFFER_TOO_SMALL = -1072824250,MQ_ERROR_DELETE_CN_IN_USE = -1072824248,MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER = -1072824247,MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE = -1072824246,MQ_ERROR_QUEUE_NOT_AVAILABLE = -1072824245,MQ_ERROR_DTC_CONNECT = -1072824244,MQ_ERROR_TRANSACTION_IMPORT = -1072824242,MQ_ERROR_TRANSACTION_USAGE = -1072824240,MQ_ERROR_TRANSACTION_SEQUENCE = -1072824239,MQ_ERROR_MISSING_CONNECTOR_TYPE = -1072824235,MQ_ERROR_STALE_HANDLE = -1072824234,MQ_ERROR_TRANSACTION_ENLIST = -1072824232,MQ_ERROR_QUEUE_DELETED = -1072824230,MQ_ERROR_ILLEGAL_CONTEXT = -1072824229,MQ_ERROR_ILLEGAL_SORT_PROPID = -1072824228,MQ_ERROR_LABEL_TOO_LONG = -1072824227,MQ_ERROR_LABEL_BUFFER_TOO_SMALL = -1072824226,MQ_ERROR_MQIS_SERVER_EMPTY = -1072824225,MQ_ERROR_MQIS_READONLY_MODE = -1072824224,MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL = -1072824223,MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL = -1072824222,MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL = -1072824221,MQ_ERROR_ILLEGAL_OPERATION = -1072824220,MQ_ERROR_WRITE_NOT_ALLOWED = -1072824219,MQ_ERROR_WKS_CANT_SERVE_CLIENT = -1072824218,MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW = -1072824217,MQ_CORRUPTED_QUEUE_WAS_DELETED = -1072824216,MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE = -1072824215,MQ_INFORMATION_PROPERTY = 1074659329,MQ_INFORMATION_ILLEGAL_PROPERTY = 1074659330,MQ_INFORMATION_PROPERTY_IGNORED = 1074659331,MQ_INFORMATION_UNSUPPORTED_PROPERTY = 1074659332,MQ_INFORMATION_DUPLICATE_PROPERTY = 1074659333,MQ_INFORMATION_OPERATION_PENDING = 1074659334,MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL = 1074659337,};
enum MACRO_MSBDN {MSBDN_INET_EXISTING = 0x100,MSBDN_INET_GLOBAL = 0x1,MSBDN_INET_NETWORK = 0x2,MSBDN_INET_SUBNET = 0x3,};
enum MACRO_MSSIP {MSSIP_FLAGS_PROHIBIT_RESIZE_ON_CREATE = 0x10000,MSSIP_FLAGS_USE_CATALOG = 0x20000,};
enum MACRO_MTXDM {MTXDM_E_ENLISTRESOURCEFAILED = 0x8004E100,};
enum MACRO_MUTEX {MUTEX_MODIFY_STATE = 1,MUTEX_ALL_ACCESS = 2031617,};
enum MACRO_NDDEF {NDDEF_NOPASSWORDPROMPT = 0x1,NDDEF_NOCACHELOOKUP = 0x2,NDDEF_STRIP_NDDE = 0x4,};
enum MACRO_NEEDS {NEEDS_PREPROCESSING = 0x1,NEEDS_SPOOLER = 0x2,};
enum MACRO_NELOG {NELOG_Internal_Error = 3100,NELOG_Resource_Shortage = 3101,NELOG_Unable_To_Lock_Segment = 3102,NELOG_Unable_To_Unlock_Segment = 3103,NELOG_Uninstall_Service = 3104,NELOG_Init_Exec_Fail = 3105,NELOG_Ncb_Error = 3106,NELOG_Net_Not_Started = 3107,NELOG_Ioctl_Error = 3108,NELOG_System_Semaphore = 3109,NELOG_Init_OpenCreate_Err = 3110,NELOG_NetBios = 3111,NELOG_SMB_Illegal = 3112,NELOG_Service_Fail = 3113,NELOG_Entries_Lost = 3114,NELOG_Init_Seg_Overflow = 3120,NELOG_Srv_No_Mem_Grow = 3121,NELOG_Access_File_Bad = 3122,NELOG_Srvnet_Not_Started = 3123,NELOG_Init_Chardev_Err = 3124,NELOG_Remote_API = 3125,NELOG_Ncb_TooManyErr = 3126,NELOG_Mailslot_err = 3127,NELOG_ReleaseMem_Alert = 3128,NELOG_AT_cannot_write = 3129,NELOG_Cant_Make_Msg_File = 3130,NELOG_Exec_Netservr_NoMem = 3131,NELOG_Server_Lock_Failure = 3132,NELOG_Msg_Shutdown = 3140,NELOG_Msg_Sem_Shutdown = 3141,NELOG_Msg_Log_Err = 3150,NELOG_VIO_POPUP_ERR = 3151,NELOG_Msg_Unexpected_SMB_Type = 3152,NELOG_Wksta_Infoseg = 3160,NELOG_Wksta_Compname = 3161,NELOG_Wksta_BiosThreadFailure = 3162,NELOG_Wksta_IniSeg = 3163,NELOG_Wksta_HostTab_Full = 3164,NELOG_Wksta_Bad_Mailslot_SMB = 3165,NELOG_Wksta_UASInit = 3166,NELOG_Wksta_SSIRelogon = 3167,NELOG_Build_Name = 3170,NELOG_Name_Expansion = 3171,NELOG_Message_Send = 3172,NELOG_Mail_Slt_Err = 3173,NELOG_AT_cannot_read = 3174,NELOG_AT_sched_err = 3175,NELOG_AT_schedule_file_created = 3176,NELOG_Srvnet_NB_Open = 3177,NELOG_AT_Exec_Err = 3178,NELOG_Lazy_Write_Err = 3180,NELOG_HotFix = 3181,NELOG_HardErr_From_Server = 3182,NELOG_LocalSecFail1 = 3183,NELOG_LocalSecFail2 = 3184,NELOG_LocalSecFail3 = 3185,NELOG_LocalSecGeneralFail = 3186,NELOG_NetWkSta_Internal_Error = 3190,NELOG_NetWkSta_No_Resource = 3191,NELOG_NetWkSta_SMB_Err = 3192,NELOG_NetWkSta_VC_Err = 3193,NELOG_NetWkSta_Stuck_VC_Err = 3194,NELOG_NetWkSta_NCB_Err = 3195,NELOG_NetWkSta_Write_Behind_Err = 3196,NELOG_NetWkSta_Reset_Err = 3197,NELOG_NetWkSta_Too_Many = 3198,NELOG_Srv_Thread_Failure = 3204,NELOG_Srv_Close_Failure = 3205,NELOG_ReplUserCurDir = 3206,NELOG_ReplCannotMasterDir = 3207,NELOG_ReplUpdateError = 3208,NELOG_ReplLostMaster = 3209,NELOG_NetlogonAuthDCFail = 3210,NELOG_ReplLogonFailed = 3211,NELOG_ReplNetErr = 3212,NELOG_ReplMaxFiles = 3213,NELOG_ReplMaxTreeDepth = 3214,NELOG_ReplBadMsg = 3215,NELOG_ReplSysErr = 3216,NELOG_ReplUserLoged = 3217,NELOG_ReplBadImport = 3218,NELOG_ReplBadExport = 3219,NELOG_ReplSignalFileErr = 3220,NELOG_DiskFT = 3221,NELOG_ReplAccessDenied = 3222,NELOG_NetlogonFailedPrimary = 3223,NELOG_NetlogonPasswdSetFailed = 3224,NELOG_NetlogonTrackingError = 3225,NELOG_NetlogonSyncError = 3226,NELOG_UPS_PowerOut = 3230,NELOG_UPS_Shutdown = 3231,NELOG_UPS_CmdFileError = 3232,NELOG_UPS_CannotOpenDriver = 3233,NELOG_UPS_PowerBack = 3234,NELOG_UPS_CmdFileConfig = 3235,NELOG_UPS_CmdFileExec = 3236,NELOG_Missing_Parameter = 3250,NELOG_Invalid_Config_Line = 3251,NELOG_Invalid_Config_File = 3252,NELOG_File_Changed = 3253,NELOG_Files_Dont_Fit = 3254,NELOG_Wrong_DLL_Version = 3255,NELOG_Error_in_DLL = 3256,NELOG_System_Error = 3257,NELOG_FT_ErrLog_Too_Large = 3258,NELOG_FT_Update_In_Progress = 3259,NELOG_OEM_Code = 3299,};
enum MACRO_NNLEN {NNLEN = 80,};
enum MACRO_NONOS {NONOS = 5,};
enum MACRO_NT351 {NT351_INTERFACE_SIZE = 0x40,};
enum MACRO_NTSEC {NTSEC_ERROR_UNABLE_TO_PROCESS_REQUEST = 0xE90005E1,NTSEC_ERROR_REMOTE_UNREACHABLE = 0xE90005E2,NTSEC_ERROR_INVALID_USERNAME = 0xE90005E3,NTSEC_ERROR_INVALID_OLD_PASSWORD = 0xE90005E4,NTSEC_ERROR_NOT_IMPLEMENTED = 0xE90005E5,};
enum MACRO_OBJID {OBJID_WINDOW = 0x0,OBJID_SYSMENU = 0xFFFFFFFF,OBJID_TITLEBAR = 0xFFFFFFFE,OBJID_MENU = 0xFFFFFFFD,OBJID_CLIENT = 0xFFFFFFFC,OBJID_VSCROLL = 0xFFFFFFFB,OBJID_HSCROLL = 0xFFFFFFFA,OBJID_SIZEGRIP = 0xFFFFFFF9,OBJID_CARET = 0xFFFFFFF8,OBJID_CURSOR = 0xFFFFFFF7,OBJID_ALERT = 0xFFFFFFF6,OBJID_SOUND = 0xFFFFFFF5,};
enum MACRO_OLEOP {OLEOP_DOVERB = 1,};
enum MACRO_OLEUI {OLEUI_FALSE = 0,OLEUI_SUCCESS = 1,OLEUI_OK = 1,OLEUI_CANCEL = 2,OLEUI_ERR_STANDARDMIN = 100,OLEUI_ERR_OLEMEMALLOC = 100,OLEUI_ERR_STRUCTURENULL = 101,OLEUI_ERR_STRUCTUREINVALID = 102,OLEUI_ERR_CBSTRUCTINCORRECT = 103,OLEUI_ERR_HWNDOWNERINVALID = 104,OLEUI_ERR_LPSZCAPTIONINVALID = 105,OLEUI_ERR_LPFNHOOKINVALID = 106,OLEUI_ERR_HINSTANCEINVALID = 107,OLEUI_ERR_LPSZTEMPLATEINVALID = 108,OLEUI_ERR_HRESOURCEINVALID = 109,OLEUI_ERR_FINDTEMPLATEFAILURE = 110,OLEUI_ERR_LOADTEMPLATEFAILURE = 111,OLEUI_ERR_DIALOGFAILURE = 112,OLEUI_ERR_LOCALMEMALLOC = 113,OLEUI_ERR_GLOBALMEMALLOC = 114,OLEUI_ERR_LOADSTRING = 115,OLEUI_ERR_STANDARDMAX = 116,};
enum MACRO_PC_24 {PC_24 = 131072,PC_53 = 65536,PC_64 = 0,};
enum MACRO_PDERR {PDERR_PRINTERCODES = 0x1000,PDERR_SETUPFAILURE = 0x1001,PDERR_PARSEFAILURE = 0x1002,PDERR_RETDEFFAILURE = 0x1003,PDERR_LOADDRVFAILURE = 0x1004,PDERR_GETDEVMODEFAIL = 0x1005,PDERR_INITFAILURE = 0x1006,PDERR_NODEVICES = 0x1007,PDERR_NODEFAULTPRN = 0x1008,PDERR_DNDMMISMATCH = 0x1009,PDERR_CREATEICFAILURE = 0x100A,PDERR_PRINTERNOTFOUND = 0x100B,PDERR_DEFAULTDIFFERENT = 0x100C,};
enum MACRO_PHONE {PHONE_BUTTON = 14,PHONE_CLOSE = 15,PHONE_DEVSPECIFIC = 16,PHONE_REPLY = 17,PHONE_STATE = 18,};
enum MACRO_PIDSI {PIDSI_TITLE = 0x2,PIDSI_SUBJECT = 0x3,PIDSI_AUTHOR = 0x4,PIDSI_KEYWORDS = 0x5,PIDSI_COMMENTS = 0x6,PIDSI_TEMPLATE = 0x7,PIDSI_LASTAUTHOR = 0x8,PIDSI_REVNUMBER = 0x9,PIDSI_EDITTIME = 0xA,PIDSI_LASTPRINTED = 0xB,PIDSI_CREATE_DTM = 0xC,PIDSI_LASTSAVE_DTM = 0xD,PIDSI_PAGECOUNT = 0xE,PIDSI_WORDCOUNT = 0xF,PIDSI_CHARCOUNT = 0x10,PIDSI_THUMBNAIL = 0x11,PIDSI_APPNAME = 0x12,PIDSI_DOC_SECURITY = 0x13,};
enum MACRO_PITCH {DEFAULT_PITCH = 0,FIXED_PITCH = 1,VARIABLE_PITCH = 2,};
enum MACRO_PKCS7 {PKCS7_SIGNER_INFO = 500,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_PMSCL {PMSCL_UNLOADED = 0,PMSCL_LOADED = 1,PMSCL_UNLOADING = 2,};
enum MACRO_PRBIT {PRBIT = 3,};
enum MACRO_PRJOB {PRJOB_QSTATUS = 0x3,PRJOB_DEVSTATUS = 0x1FC,PRJOB_COMPLETE = 0x4,PRJOB_INTERV = 0x8,PRJOB_ERROR = 0x10,PRJOB_DESTOFFLINE = 0x20,PRJOB_DESTPAUSED = 0x40,PRJOB_NOTIFY = 0x80,PRJOB_DESTNOPAPER = 0x100,PRJOB_DELETED = 0x8000,PRJOB_QS_QUEUED = 0x0,PRJOB_QS_PAUSED = 0x1,PRJOB_QS_SPOOLING = 0x2,PRJOB_QS_PRINTING = 0x3,};
enum MACRO_PROTO {PROTO_TYPE_UNICAST = 0,PROTO_TYPE_MCAST = 1,PROTO_VENDOR_MJ_IETF = 0,PROTO_VENDOR_MN_IETF = 0,PROTO_VENDOR_MJ_MS = 15,};
enum MACRO_PROXY {PROXY_SUBST_GENERAL_FAILURE = 0x4000F080,PROXY_SUBST_FAILURES = 0x4000F081,PROXY_SUBST_TARGET_INVALID = 0x4000F082,PROXY_SUBST_TARGET_NOT_UNIQUE = 0x4000F083,PROXY_SUBST_DLL_NOT_IMPLEMENTED = 0x4000F084,PROXY_SUBST_OOM = 0x4000F085,PROXY_SUBST_DLL_ERROR = 0x4000F086,PROXY_SUBST_DLL_PROTOCOL = 0x4000F087,PROXY_SUBST_SYNTAX = 0x4000F088,PROXY_SUBST_EOF = 0x4000F089,PROXY_SUBST_SOFTWARE = 0x4000F08A,PROXY_SUBST_CONFIGURATION = 0x4000F08B,PROXY_SUBST_CONTENTION = 0x4000F08C,PROXY_SUBST_NOT_FOUND = 0x4000F08D,PROXY_SUBST_ = 0x4000F08E,PROXY_SUBST_EXCEPTION = 0x4000F08F,PROXY_SUBST_DEFAULT = 0x4000F090,PROXY_SUBST_INVALID = 0x4000F091,PROXY_SUBST_NOT_UNIQUE = 0x4000F092,PROXY_SUBST_DUPLICATE = 0x4000F093,};
enum MACRO_PR_NT {PR_NT_USER_NAME = 0x66A0001E,PR_LOCALE_ID = 0x66A10003,PR_LAST_LOGON_TIME = 0x66A20040,PR_LAST_LOGOFF_TIME = 0x66A30040,PR_STORAGE_LIMIT_INFORMATION = 0x66A40003,PR_FOLDER_FLAGS = 0x66A80003,PR_LAST_ACCESS_TIME = 0x66A90040,PR_RESTRICTION_COUNT = 0x66AA0003,PR_CATEG_COUNT = 0x66AB0003,PR_CACHED_COLUMN_COUNT = 0x66AC0003,PR_NORMAL_MSG_W_ATTACH_COUNT = 0x66AD0003,PR_ASSOC_MSG_W_ATTACH_COUNT = 0x66AE0003,PR_RECIPIENT_ON_NORMAL_MSG_COUNT = 0x66AF0003,PR_RECIPIENT_ON_ASSOC_MSG_COUNT = 0x66B00003,PR_ATTACH_ON_NORMAL_MSG_COUNT = 0x66B10003,PR_ATTACH_ON_ASSOC_MSG_COUNT = 0x66B20003,PR_NORMAL_MESSAGE_SIZE = 0x66B30003,PR_NORMAL_MESSAGE_SIZE_EXTENDED = 0x66B30014,PR_ASSOC_MESSAGE_SIZE = 0x66B40003,PR_ASSOC_MESSAGE_SIZE_EXTENDED = 0x66B40014,PR_FOLDER_PATHNAME = 0x66B5001E,PR_OWNER_COUNT = 0x66B60003,PR_CONTACT_COUNT = 0x66B70003,};
enum MACRO_PSBTN {PSBTN_BACK = 0,PSBTN_NEXT = 1,PSBTN_FINISH = 2,PSBTN_OK = 3,PSBTN_APPLYNOW = 4,PSBTN_CANCEL = 5,PSBTN_HELP = 6,PSBTN_MAX = 6,};
enum MACRO_PSINK {PSINK_E_QUERY_ONLY = 0x80041790,PSINK_E_INDEX_ONLY = 0x80041791,PSINK_E_LARGE_ATTACHMENT = 0x80041792,PSINK_S_LARGE_WORD = 0x41793,};
enum MACRO_PSPCB {PSPCB_RELEASE = 1,PSPCB_CREATE = 2,};
enum MACRO_PT_MV {PT_MV_I2 = 4098,PT_MV_LONG = 4099,PT_MV_R4 = 4100,PT_MV_DOUBLE = 4101,PT_MV_CURRENCY = 4102,PT_MV_APPTIME = 4103,PT_MV_SYSTIME = 4160,PT_MV_STRING8 = 4126,PT_MV_BINARY = 4354,PT_MV_UNICODE = 4127,PT_MV_CLSID = 4168,PT_MV_I8 = 4116,PT_MV_SHORT = 4098,PT_MV_I4 = 4099,PT_MV_FLOAT = 4100,PT_MV_R8 = 4101,PT_MV_LONGLONG = 4116,};
enum MACRO_PURGE {PURGE_TXABORT = 0x1,PURGE_RXABORT = 0x2,PURGE_TXCLEAR = 0x4,PURGE_RXCLEAR = 0x8,};
enum MACRO_PWLEN {PWLEN = 256,};
enum MACRO_QMOBJ {QMOBJ = 0,NUMSESSIONS = 2,NUMIPSESSIONS = 4,};
enum MACRO_QNLEN {QNLEN = 80,};
enum MACRO_QUERY {QUERY_E_FAILED = 0x80041600,QUERY_E_INVALIDQUERY = 0x80041601,QUERY_E_INVALIDRESTRICTION = 0x80041602,QUERY_E_INVALIDSORT = 0x80041603,QUERY_E_INVALIDCATEGORIZE = 0x80041604,QUERY_E_ALLNOISE = 0x80041605,QUERY_E_TOOCOMPLEX = 0x80041606,QUERY_E_TIMEDOUT = 0x80041607,QUERY_E_DUPLICATE_OUTPUT_COLUMN = 0x80041608,QUERY_E_INVALID_OUTPUT_COLUMN = 0x80041609,};
enum MACRO_RASCM {RASCM_UserName = 0x1,RASCM_Password = 0x2,RASCM_Domain = 0x4,};
enum MACRO_RASCN {RASCN_Connection = 0x1,RASCN_Disconnection = 0x2,RASCN_BandwidthAdded = 0x4,RASCN_BandwidthRemoved = 0x8,};
enum MACRO_RASCS {RASCS_PAUSED = 0x1000,RASCS_DONE = 0x2000,};
enum MACRO_RASEO {RASEO_UseCountryAndAreaCodes = 0x1,RASEO_SpecificIpAddr = 0x2,RASEO_SpecificNameServers = 0x4,RASEO_IpHeaderCompression = 0x8,RASEO_RemoteDefaultGateway = 0x10,RASEO_DisableLcpExtensions = 0x20,RASEO_TerminalBeforeDial = 0x40,RASEO_TerminalAfterDial = 0x80,RASEO_ModemLights = 0x100,RASEO_SwCompression = 0x200,RASEO_RequireEncryptedPw = 0x400,RASEO_RequireMsEncryptedPw = 0x800,RASEO_RequireDataEncryption = 0x1000,RASEO_NetworkLogon = 0x2000,RASEO_UseLogonCredentials = 0x4000,RASEO_PromoteAlternates = 0x8000,RASEO_SecureLocalFiles = 0x10000,};
enum MACRO_RASFP {RASFP_Ppp = 0x1,RASFP_Slip = 0x2,RASFP_Ras = 0x4,};
enum MACRO_RASNP {RASNP_NetBEUI = 0x1,RASNP_Ipx = 0x2,RASNP_Ip = 0x4,};
enum MACRO_RBBIM {RBBIM_STYLE = 0x1,RBBIM_COLORS = 0x2,RBBIM_TEXT = 0x4,RBBIM_IMAGE = 0x8,RBBIM_CHILD = 0x10,RBBIM_CHILDSIZE = 0x20,RBBIM_SIZE = 0x40,RBBIM_BACKGROUND = 0x80,RBBIM_ID = 0x100,RBBIM_IDEALSIZE = 0x200,RBBIM_LPARAM = 0x400,RBBIM_HEADERSIZE = 0x800,};
enum MACRO_RCRED {RCRED_STATUS_NOCRED = 0x0,RCRED_CRED_EXISTS = 0x1,RCRED_STATUS_UNKNOWN_ISSUER = 0x2,};
enum MACRO_REC_S {REC_S_IDIDTHEUPDATES = 0x41000,REC_S_NOTCOMPLETE = 0x41001,REC_S_NOTCOMPLETEBUTPROPAGATE = 0x41002,REC_E_ABORTED = 0x80041000,REC_E_NOCALLBACK = 0x80041001,REC_E_NORESIDUES = 0x80041002,REC_E_TOODIFFERENT = 0x80041003,REC_E_INEEDTODOTHEUPDATES = 0x80041004,};
enum MACRO_REGDB {REGDB_E_FIRST = 0x80040150,REGDB_E_LAST = 0x8004015F,REGDB_S_FIRST = 0x40150,REGDB_S_LAST = 0x4015F,};
enum MACRO_REGDF {REGDF_NOTDETIO = 0x1,REGDF_NOTDETMEM = 0x2,REGDF_NOTDETIRQ = 0x4,REGDF_NOTDETDMA = 0x8,REGDF_NOTDETALL = 0xF,REGDF_NEEDFULLCONFIG = 0x10,REGDF_GENFORCEDCONFIG = 0x20,REGDF_NODETCONFIG = 0x8000,REGDF_CONFLICTIO = 0x10000,REGDF_CONFLICTMEM = 0x20000,REGDF_CONFLICTIRQ = 0x40000,REGDF_CONFLICTDMA = 0x80000,REGDF_CONFLICTALL = 0xF0000,REGDF_MAPIRQ2TO9 = 0x100000,REGDF_NOTVERIFIED = 0x80000000,};
enum MACRO_RELOP {RELOP_LT = 0,RELOP_LE = 1,RELOP_GT = 2,RELOP_GE = 3,RELOP_EQ = 4,RELOP_NE = 5,RELOP_RE = 6,};
enum MACRO_RMLEN {RMLEN = 98,};
enum MACRO_ROUND {ROUND_TO_ZERO = 0,ROUND_TO_MINUS_INFINITY = 1,ROUND_TO_NEAREST = 2,ROUND_TO_PLUS_INFINITY = 3,};
enum MACRO_ROUTE {GLOBAL_WAN_ROUTE = 0x1,DO_NOT_ADVERTISE_ROUTE = 0x2,};
enum MACRO_RPC_C {RPC_C_AUTHZ_NONE = 0,RPC_C_AUTHZ_NAME = 1,RPC_C_AUTHZ_DCE = 2,};
enum MACRO_SBARS {SBARS_SIZEGRIP = 0x100,};
enum MACRO_SCARD {SCARD_S_SUCCESS = 0,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SCHED {SCHED_S_TASK_READY = 0x41300,SCHED_S_TASK_RUNNING = 0x41301,SCHED_S_TASK_DISABLED = 0x41302,SCHED_S_TASK_HAS_NOT_RUN = 0x41303,SCHED_S_TASK_NO_MORE_RUNS = 0x41304,SCHED_S_TASK_NOT_SCHEDULED = 0x41305,SCHED_S_TASK_TERMINATED = 0x41306,SCHED_S_TASK_NO_VALID_TRIGGERS = 0x41307,SCHED_S_EVENT_TRIGGER = 0x41308,SCHED_E_TRIGGER_NOT_FOUND = 0x80041309,SCHED_E_TASK_NOT_READY = 0x8004130A,SCHED_E_TASK_NOT_RUNNING = 0x8004130B,SCHED_E_SERVICE_NOT_INSTALLED = 0x8004130C,SCHED_E_CANNOT_OPEN_TASK = 0x8004130D,SCHED_E_INVALID_TASK = 0x8004130E,SCHED_E_ACCOUNT_INFORMATION_NOT_SET = 0x8004130F,SCHED_E_ACCOUNT_NAME_NOT_FOUND = 0x80041310,SCHED_E_ACCOUNT_DBASE_CORRUPT = 0x80041311,SCHED_E_NO_SECURITY_SERVICES = 0x80041312,SCHED_E_UNKNOWN_OBJECT_VERSION = 0x80041313,};
enum MACRO_SEC_E {SEC_E_INSUFFICIENT_MEMORY = 0x1300,SEC_E_INVALID_HANDLE = 0x1301,SEC_E_UNSUPPORTED_FUNCTION = 0x1302,SEC_E_NOT_SUPPORTED = 0x1302,SEC_E_TARGET_UNKNOWN = 0x1303,SEC_E_INTERNAL_ERROR = 0x1304,SEC_E_NO_SPM = 0x1304,SEC_E_SECPKG_NOT_FOUND = 0x1305,SEC_E_BAD_PKGID = 0x1305,SEC_E_NOT_OWNER = 0x1306,SEC_E_CANNOT_INSTALL = 0x1307,SEC_E_INVALID_TOKEN = 0x1308,SEC_E_CANNOT_PACK = 0x1309,SEC_E_QOP_NOT_SUPPORTED = 0x130A,SEC_E_NO_IMPERSONATION = 0x130B,SEC_E_LOGON_DENIED = 0x130C,SEC_E_UNKNOWN_CREDENTIALS = 0x130D,SEC_E_NO_CREDENTIALS = 0x130E,SEC_E_MESSAGE_ALTERED = 0x130F,SEC_E_OUT_OF_SEQUENCE = 0x1310,SEC_E_NO_AUTHENTICATING_AUTHORITY = 0x1311,SEC_E_CONTEXT_EXPIRED = 0x1312,SEC_E_INCOMPLETE_MESSAGE = 0x1313,SEC_I_CONTINUE_NEEDED = 0x1012,SEC_I_COMPLETE_NEEDED = 0x1013,SEC_I_COMPLETE_AND_CONTINUE = 0x1014,SEC_I_LOCAL_LOGON = 0x1015,SEC_E_OK = 0x0,};
enum MACRO_SEC_I {SEC_I_INCOMPLETE_CREDENTIALS = 0x90320,SEC_E_INCOMPLETE_CREDENTIALS = 0x80090320,SEC_I_RENEGOTIATE = 0x90321,};
enum MACRO_SERKF {SERKF_SERIALKEYSON = 0x1,SERKF_AVAILABLE = 0x2,SERKF_INDICATOR = 0x4,};
enum MACRO_SFGAO {SFGAO_CANCOPY = 1,SFGAO_CANMOVE = 2,SFGAO_CANLINK = 4,SFGAO_CANRENAME = 16,SFGAO_CANDELETE = 32,SFGAO_HASPROPSHEET = 64,SFGAO_DROPTARGET = 256,SFGAO_CAPABILITYMASK = 375,SFGAO_LINK = 65536,SFGAO_SHARE = 131072,SFGAO_READONLY = 262144,SFGAO_GHOSTED = 524288,SFGAO_HIDDEN = 524288,SFGAO_DISPLAYATTRMASK = 983040,SFGAO_FILESYSANCESTOR = 268435456,SFGAO_FOLDER = 536870912,SFGAO_FILESYSTEM = 1073741824,SFGAO_HASSUBFOLDER = -2147483648,SFGAO_CONTENTSMASK = -2147483648,SFGAO_VALIDATE = 16777216,SFGAO_REMOVABLE = 33554432,SFGAO_COMPRESSED = 67108864,SFGAO_BROWSABLE = 134217728,SFGAO_NONENUMERATED = 1048576,SFGAO_NEWCONTENT = 2097152,};
enum MACRO_SHARD {SHARD_PIDL = 0x1,SHARD_PATHA = 0x2,SHARD_PATHW = 0x3,SHARD_PATH = 0x2,};
enum MACRO_SHARE {SHARE_NETNAME_PARMNUM = 1,SHARE_TYPE_PARMNUM = 3,SHARE_REMARK_PARMNUM = 4,SHARE_PERMISSIONS_PARMNUM = 5,SHARE_MAX_USES_PARMNUM = 6,SHARE_CURRENT_USES_PARMNUM = 7,SHARE_PATH_PARMNUM = 8,SHARE_PASSWD_PARMNUM = 9,SHARE_FILE_SD_PARMNUM = 501,SHARE_REMARK_INFOLEVEL = 1004,SHARE_MAX_USES_INFOLEVEL = 1006,SHARE_FILE_SD_INFOLEVEL = 1501,};
enum MACRO_SHCNE {SHCNE_RENAMEITEM = 0x1,SHCNE_CREATE = 0x2,SHCNE_DELETE = 0x4,SHCNE_MKDIR = 0x8,SHCNE_RMDIR = 0x10,SHCNE_MEDIAINSERTED = 0x20,SHCNE_MEDIAREMOVED = 0x40,SHCNE_DRIVEREMOVED = 0x80,SHCNE_DRIVEADD = 0x100,SHCNE_NETSHARE = 0x200,SHCNE_NETUNSHARE = 0x400,SHCNE_ATTRIBUTES = 0x800,SHCNE_UPDATEDIR = 0x1000,SHCNE_UPDATEITEM = 0x2000,SHCNE_SERVERDISCONNECT = 0x4000,SHCNE_UPDATEIMAGE = 0x8000,SHCNE_DRIVEADDGUI = 0x10000,SHCNE_RENAMEFOLDER = 0x20000,SHCNE_FREESPACE = 0x40000,SHCNE_EXTENDED_EVENT = 0x4000000,SHCNE_ASSOCCHANGED = 0x8000000,SHCNE_DISKEVENTS = 0x2381F,SHCNE_GLOBALEVENTS = 0xC0581E0,SHCNE_ALLEVENTS = 0x7FFFFFFF,SHCNE_INTERRUPT = 0x80000000,};
enum MACRO_SHCNF {SHCNF_IDLIST = 0x0,SHCNF_PATHA = 0x1,SHCNF_PRINTERA = 0x2,SHCNF_DWORD = 0x3,SHCNF_PATHW = 0x5,SHCNF_PRINTERW = 0x6,SHCNF_TYPE = 0xFF,SHCNF_FLUSH = 0x1000,SHCNF_FLUSHNOWAIT = 0x2000,SHCNF_PATH = 0x1,SHCNF_PRINTER = 0x2,};
enum MACRO_SHDID {SHDID_ROOT_REGITEM = 1,SHDID_FS_FILE = 2,SHDID_FS_DIRECTORY = 3,SHDID_FS_OTHER = 4,SHDID_COMPUTER_DRIVE35 = 5,SHDID_COMPUTER_DRIVE525 = 6,SHDID_COMPUTER_REMOVABLE = 7,SHDID_COMPUTER_FIXED = 8,SHDID_COMPUTER_NETDRIVE = 9,SHDID_COMPUTER_CDROM = 10,SHDID_COMPUTER_RAMDISK = 11,SHDID_COMPUTER_OTHER = 12,SHDID_NET_DOMAIN = 13,SHDID_NET_SERVER = 14,SHDID_NET_SHARE = 15,SHDID_NET_RESTOFNET = 16,SHDID_NET_OTHER = 17,};
enum MACRO_SHERB {SHERB_NOCONFIRMATION = 0x1,SHERB_NOPROGRESSUI = 0x2,SHERB_NOSOUND = 0x4,};
enum MACRO_SHGFI {SHGFI_ICON = 0x100,SHGFI_DISPLAYNAME = 0x200,SHGFI_TYPENAME = 0x400,SHGFI_ATTRIBUTES = 0x800,SHGFI_ICONLOCATION = 0x1000,SHGFI_EXETYPE = 0x2000,SHGFI_SYSICONINDEX = 0x4000,SHGFI_LINKOVERLAY = 0x8000,SHGFI_SELECTED = 0x10000,SHGFI_ATTR_SPECIFIED = 0x20000,SHGFI_LARGEICON = 0x0,SHGFI_SMALLICON = 0x1,SHGFI_OPENICON = 0x2,SHGFI_SHELLICONSIZE = 0x4,SHGFI_PIDL = 0x8,SHGFI_USEFILEATTRIBUTES = 0x10,};
enum MACRO_SMART {SMART_GET_VERSION = 0x74080,SMART_SEND_DRIVE_COMMAND = 0x7C084,SMART_RCV_DRIVE_DATA = 0x7C088,};
enum MACRO_SNLEN {SNLEN = 80,};
enum MACRO_SOUND {SOUND_SYSTEM_STARTUP = 1,SOUND_SYSTEM_SHUTDOWN = 2,SOUND_SYSTEM_BEEP = 3,SOUND_SYSTEM_ERROR = 4,SOUND_SYSTEM_QUESTION = 5,SOUND_SYSTEM_WARNING = 6,SOUND_SYSTEM_INFORMATION = 7,SOUND_SYSTEM_MAXIMIZE = 8,SOUND_SYSTEM_MINIMIZE = 9,SOUND_SYSTEM_RESTOREUP = 10,SOUND_SYSTEM_RESTOREDOWN = 11,SOUND_SYSTEM_APPSTART = 12,SOUND_SYSTEM_FAULT = 13,SOUND_SYSTEM_APPEND = 14,SOUND_SYSTEM_MENUCOMMAND = 15,SOUND_SYSTEM_MENUPOPUP = 16,};
enum MACRO_SPACE {SPACE_XYZ = 1482250784,SPACE_Lab = 1281450528,SPACE_Luv = 1282766368,SPACE_YCbCr = 1497588338,SPACE_Yxy = 1501067552,SPACE_RGB = 1380401696,SPACE_GRAY = 1196573017,SPACE_HSV = 1213421088,SPACE_HLS = 1212961568,SPACE_CMYK = 1129142603,SPACE_CMY = 1129142560,};
enum MACRO_SPDIT {SPDIT_NODRIVER = 0x0,SPDIT_CLASSDRIVER = 0x1,SPDIT_COMPATDRIVER = 0x2,};
enum MACRO_SPDRP {SPDRP_DEVICEDESC = 0x0,SPDRP_HARDWAREID = 0x1,SPDRP_COMPATIBLEIDS = 0x2,SPDRP_NTDEVICEPATHS = 0x3,SPDRP_SERVICE = 0x4,SPDRP_CONFIGURATION = 0x5,SPDRP_CONFIGURATIONVECTOR = 0x6,SPDRP_CLASS = 0x7,SPDRP_CLASSGUID = 0x8,SPDRP_DRIVER = 0x9,SPDRP_CONFIGFLAGS = 0xA,SPDRP_MFG = 0xB,SPDRP_FRIENDLYNAME = 0xC,SPDRP_LOCATION_INFORMATION = 0xD,SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = 0xE,SPDRP_CAPABILITIES = 0xF,SPDRP_UI_NUMBER = 0x10,SPDRP_UPPERFILTERS = 0x11,SPDRP_LOWERFILTERS = 0x12,SPDRP_MAXIMUM_PROPERTY = 0x13,};
enum MACRO_SPDSL {SPDSL_IGNORE_DISK = 0x1,SPDSL_DISALLOW_NEGATIVE_ADJUST = 0x2,};
enum MACRO_SPINT {SPINT_ACTIVE = 0x1,SPINT_DEFAULT = 0x2,SPINT_REMOVED = 0x4,};
enum MACRO_SPOST {SPOST_NONE = 0,SPOST_PATH = 1,SPOST_URL = 2,SPOST_MAX = 3,};
enum MACRO_SPPSR {SPPSR_SELECT_DEVICE_RESOURCES = 1,SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = 2,SPPSR_ENUM_ADV_DEVICE_PROPERTIES = 3,};
enum MACRO_SPRDI {SPRDI_FIND_DUPS = 0x1,};
enum MACRO_SPWPT {SPWPT_SELECTDEVICE = 0x1,};
enum MACRO_SQLDS {SQLDS = 5,};
enum MACRO_STAMP {STAMP_DESIGNVECTOR = 0x8007664,STAMP_AXESLIST = 0x8006C61,};
enum MACRO_STATE {STATE_SYSTEM_UNAVAILABLE = 0x1,STATE_SYSTEM_SELECTED = 0x2,STATE_SYSTEM_FOCUSED = 0x4,STATE_SYSTEM_PRESSED = 0x8,STATE_SYSTEM_CHECKED = 0x10,STATE_SYSTEM_MIXED = 0x20,STATE_SYSTEM_READONLY = 0x40,STATE_SYSTEM_HOTTRACKED = 0x80,STATE_SYSTEM_DEFAULT = 0x100,STATE_SYSTEM_EXPANDED = 0x200,STATE_SYSTEM_COLLAPSED = 0x400,STATE_SYSTEM_BUSY = 0x800,STATE_SYSTEM_FLOATING = 0x1000,STATE_SYSTEM_MARQUEED = 0x2000,STATE_SYSTEM_ANIMATED = 0x4000,STATE_SYSTEM_INVISIBLE = 0x8000,STATE_SYSTEM_OFFSCREEN = 0x10000,STATE_SYSTEM_SIZEABLE = 0x20000,STATE_SYSTEM_MOVEABLE = 0x40000,STATE_SYSTEM_SELFVOICING = 0x80000,STATE_SYSTEM_FOCUSABLE = 0x100000,STATE_SYSTEM_SELECTABLE = 0x200000,STATE_SYSTEM_LINKED = 0x400000,STATE_SYSTEM_TRAVERSED = 0x800000,STATE_SYSTEM_MULTISELECTABLE = 0x1000000,STATE_SYSTEM_EXTSELECTABLE = 0x2000000,STATE_SYSTEM_ALERT_LOW = 0x4000000,STATE_SYSTEM_ALERT_MEDIUM = 0x8000000,STATE_SYSTEM_ALERT_HIGH = 0x10000000,STATE_SYSTEM_VALID = 0x1FFFFFFF,};
enum MACRO_STATS {STATS_NO_VALUE = 4294967295,STATS_OVERFLOW = 4294967294,};
enum MACRO_STGTY {STGTY_REPEAT = 0x100,};
enum MACRO_STILL {STILL_ACTIVE = 259,};
enum MACRO_STOCK {STOCK_LAST = 19,};
enum MACRO_STORE {STORE_ENTRYID_UNIQUE = 0x1,STORE_READONLY = 0x2,STORE_SEARCH_OK = 0x4,STORE_MODIFY_OK = 0x8,STORE_CREATE_OK = 0x10,STORE_ATTACH_OK = 0x20,STORE_OLE_OK = 0x40,STORE_SUBMIT_OK = 0x80,STORE_NOTIFY_OK = 0x100,STORE_MV_PROPS_OK = 0x200,STORE_CATEGORIZE_OK = 0x400,STORE_RTF_OK = 0x800,STORE_RESTRICTION_OK = 0x1000,STORE_SORT_OK = 0x2000,STORE_PUBLIC_FOLDERS = 0x4000,STORE_UNCOMPRESSED_RTF = 0x8000,STORE_HAS_SEARCHES = 0x1000000,};
enum MACRO_STRTM {STRTM = 6,};
enum MACRO_STYLE {STYLE_DESCRIPTION_SIZE = 32,IMEMENUITEM_STRING_SIZE = 80,};
enum MACRO_STYPE {STYPE_DISKTREE = 0,STYPE_PRINTQ = 1,STYPE_DEVICE = 2,STYPE_IPC = 3,STYPE_SPECIAL = -2147483648,};
enum MACRO_SV2GV {SV2GV_CURRENTVIEW = 4294967295,SV2GV_DEFAULTVIEW = 4294967294,};
enum MACRO_SVAUD {SVAUD_SERVICE = 0x1,SVAUD_GOODSESSLOGON = 0x6,SVAUD_BADSESSLOGON = 0x18,SVAUD_SESSLOGON = 0x1E,SVAUD_GOODNETLOGON = 0x60,SVAUD_BADNETLOGON = 0x180,SVAUD_NETLOGON = 0x1E0,SVAUD_LOGON = 0x1FE,SVAUD_GOODUSE = 0x600,SVAUD_BADUSE = 0x1800,SVAUD_USE = 0x1E00,SVAUD_USERLIST = 0x2000,SVAUD_PERMISSIONS = 0x4000,SVAUD_RESOURCE = 0x8000,SVAUD_LOGONLIM = 0x10000,};
enum MACRO_SVGIO {SVGIO_BACKGROUND = 0x0,SVGIO_SELECTION = 0x1,SVGIO_ALLVIEW = 0x2,};
enum MACRO_SVTI2 {SVTI2_REMAP_PIPE_NAMES = 0x2,};
enum MACRO_SYVHI {SYVHI_SPECIAL = 0,SYVHI_ANSI = 1,SYVHI_GESTURE = 2,SYVHI_KANJI = 3,SYVHI_SHAPE = 4,SYVHI_UNICODE = 5,SYVHI_VKEY = 6,};
enum MACRO_TABLE {TABLE_CHANGED = 1,TABLE_ERROR = 2,TABLE_ROW_ADDED = 3,TABLE_ROW_DELETED = 4,TABLE_ROW_MODIFIED = 5,TABLE_SORT_DONE = 6,TABLE_RESTRICT_DONE = 7,TABLE_SETCOL_DONE = 8,TABLE_RELOAD = 9,};
enum MACRO_TC_OP {TC_OP_CHARACTER = 0x1,TC_OP_STROKE = 0x2,TC_CP_STROKE = 0x4,TC_CR_90 = 0x8,TC_CR_ANY = 0x10,TC_SF_X_YINDEP = 0x20,TC_SA_DOUBLE = 0x40,TC_SA_INTEGER = 0x80,TC_SA_CONTIN = 0x100,TC_EA_DOUBLE = 0x200,TC_IA_ABLE = 0x400,TC_UA_ABLE = 0x800,TC_SO_ABLE = 0x1000,TC_RA_ABLE = 0x2000,TC_VA_ABLE = 0x4000,TC_RESERVED = 0x8000,TC_SCROLLBLT = 0x10000,};
enum MACRO_TIMEQ {TIMEQ_FOREVER = 4294967295,};
enum MACRO_TIMER {TIMER_QUERY_STATE = 0x1,TIMER_MODIFY_STATE = 0x2,TIMER_ALL_ACCESS = 0x1F0003,};
enum MACRO_TITLE {BIMPMSG_PROGRESS_TITLE = 0xF,BEXPMSG_PROGRESS_TITLE = 0x10,NTEXPMSG_PROGRESS_TITLE = 0x11,NWEXPMSG_PROGRESS_TITLE = 0x12,DAPI_MSG_COMPLETE_TITLE = 0x13,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TOKEN {TOKEN_ASSIGN_PRIMARY = 0x1,TOKEN_DUPLICATE = 0x2,TOKEN_IMPERSONATE = 0x4,TOKEN_QUERY = 0x8,TOKEN_QUERY_SOURCE = 0x10,TOKEN_ADJUST_PRIVILEGES = 0x20,TOKEN_ADJUST_GROUPS = 0x40,TOKEN_ADJUST_DEFAULT = 0x80,TOKEN_ADJUST_SESSIONID = 0x100,TOKEN_ALL_ACCESS = 0xF01FF,TOKEN_READ = 0x20008,TOKEN_WRITE = 0x200E0,TOKEN_EXECUTE = 0x20000,TOKEN_SOURCE_LENGTH = 0x8,};
enum MACRO_TOPIC {TOPIC_SEARCH = 0x1,PHRASE_SEARCH = 0x2,};
enum MACRO_TRACE {TRACE_USE_FILE = 0x1,TRACE_USE_CONSOLE = 0x2,TRACE_NO_SYNCH = 0x4,TRACE_NO_STDINFO = 0x1,TRACE_USE_MASK = 0x2,TRACE_USE_MSEC = 0x4,};
enum MACRO_TRAIN {TRAIN_NONE = 0x0,TRAIN_DEFAULT = 0x1,TRAIN_CUSTOM = 0x2,TRAIN_BOTH = 0x3,TRAIN_SAVE = 0x0,TRAIN_REVERT = 0x1,TRAIN_RESET = 0x2,};
enum MACRO_TRUST {TRUST_DIRECTION_DISABLED = 0x0,TRUST_DIRECTION_INBOUND = 0x1,TRUST_DIRECTION_OUTBOUND = 0x2,TRUST_DIRECTION_BIDIRECTIONAL = 0x3,TRUST_TYPE_DOWNLEVEL = 0x1,TRUST_TYPE_UPLEVEL = 0x2,TRUST_TYPE_MIT = 0x3,TRUST_TYPE_DCE = 0x4,TRUST_ATTRIBUTE_NON_TRANSITIVE = 0x1,TRUST_ATTRIBUTE_UPLEVEL_ONLY = 0x2,TRUST_ATTRIBUTE_TREE_PARENT = 0x400000,TRUST_ATTRIBUTES_VALID = 0xFF02FFFF,TRUST_AUTH_TYPE_NONE = 0x0,TRUST_AUTH_TYPE_NT4OWF = 0x1,TRUST_AUTH_TYPE_CLEAR = 0x2,};
enum MACRO_TVSIL {TVSIL_NORMAL = 0,TVSIL_STATE = 2,};
enum MACRO_UCHAR {UCHAR_MAX = 0xFF,};
enum MACRO_ULONG {ULONG_MAX = 0xFFFFFFFF,};
enum MACRO_UNITS {UNITS_PER_DAY = 24,UNITS_PER_WEEK = 168,};
enum MACRO_USHRT {USHRT_MAX = 0xFFFF,};
enum MACRO_VALID {VALID_INHERIT_FLAGS = 0x1F,};
enum MACRO_VCAPS {VCAPS_OVERLAY = 0x1,VCAPS_SRC_CAN_CLIP = 0x2,VCAPS_DST_CAN_CLIP = 0x4,VCAPS_CAN_SCALE = 0x8,};
enum MACRO_VCDIR {VCDIR_NEXT = 1,VCDIR_PREV = 2,VCDIR_DELETE = 65536,VCDIR_MOVE = 262144,};
enum MACRO_VFW_E {VFW_E_INVALIDMEDIATYPE = 0x80040200,VFW_E_INVALIDSUBTYPE = 0x80040201,VFW_E_NEED_OWNER = 0x80040202,VFW_E_ENUM_OUT_OF_SYNC = 0x80040203,VFW_E_ALREADY_CONNECTED = 0x80040204,VFW_E_FILTER_ACTIVE = 0x80040205,VFW_E_NO_TYPES = 0x80040206,VFW_E_NO_ACCEPTABLE_TYPES = 0x80040207,VFW_E_INVALID_DIRECTION = 0x80040208,VFW_E_NOT_CONNECTED = 0x80040209,VFW_E_NO_ALLOCATOR = 0x8004020A,VFW_E_RUNTIME_ERROR = 0x8004020B,VFW_E_BUFFER_NOTSET = 0x8004020C,VFW_E_BUFFER_OVERFLOW = 0x8004020D,VFW_E_BADALIGN = 0x8004020E,VFW_E_ALREADY_COMMITTED = 0x8004020F,VFW_E_BUFFERS_OUTSTANDING = 0x80040210,VFW_E_NOT_COMMITTED = 0x80040211,VFW_E_SIZENOTSET = 0x80040212,VFW_E_NO_CLOCK = 0x80040213,VFW_E_NO_SINK = 0x80040214,VFW_E_NO_INTERFACE = 0x80040215,VFW_E_NOT_FOUND = 0x80040216,VFW_E_CANNOT_CONNECT = 0x80040217,VFW_E_CANNOT_RENDER = 0x80040218,VFW_E_CHANGING_FORMAT = 0x80040219,VFW_E_NO_COLOR_KEY_SET = 0x8004021A,VFW_E_NOT_OVERLAY_CONNECTION = 0x8004021B,VFW_E_NOT_SAMPLE_CONNECTION = 0x8004021C,VFW_E_PALETTE_SET = 0x8004021D,VFW_E_COLOR_KEY_SET = 0x8004021E,VFW_E_NO_COLOR_KEY_FOUND = 0x8004021F,VFW_E_NO_PALETTE_AVAILABLE = 0x80040220,VFW_E_NO_DISPLAY_PALETTE = 0x80040221,VFW_E_TOO_MANY_COLORS = 0x80040222,VFW_E_STATE_CHANGED = 0x80040223,VFW_E_NOT_STOPPED = 0x80040224,VFW_E_NOT_PAUSED = 0x80040225,VFW_E_NOT_RUNNING = 0x80040226,VFW_E_WRONG_STATE = 0x80040227,VFW_E_START_TIME_AFTER_END = 0x80040228,VFW_E_INVALID_RECT = 0x80040229,VFW_E_TYPE_NOT_ACCEPTED = 0x8004022A,VFW_E_SAMPLE_REJECTED = 0x8004022B,VFW_E_SAMPLE_REJECTED_EOS = 0x8004022C,VFW_E_DUPLICATE_NAME = 0x8004022D,VFW_S_DUPLICATE_NAME = 0x4022D,VFW_E_TIMEOUT = 0x8004022E,VFW_E_INVALID_FILE_FORMAT = 0x8004022F,VFW_E_ENUM_OUT_OF_RANGE = 0x80040230,VFW_E_CIRCULAR_GRAPH = 0x80040231,VFW_E_NOT_ALLOWED_TO_SAVE = 0x80040232,VFW_E_TIME_ALREADY_PASSED = 0x80040233,VFW_E_ALREADY_CANCELLED = 0x80040234,VFW_E_CORRUPT_GRAPH_FILE = 0x80040235,VFW_E_ADVISE_ALREADY_SET = 0x80040236,VFW_S_STATE_INTERMEDIATE = 0x40237,VFW_E_NO_MODEX_AVAILABLE = 0x80040238,VFW_E_NO_ADVISE_SET = 0x80040239,VFW_E_NO_FULLSCREEN = 0x8004023A,VFW_E_IN_FULLSCREEN_MODE = 0x8004023B,VFW_E_UNKNOWN_FILE_TYPE = 0x80040240,VFW_E_CANNOT_LOAD_SOURCE_FILTER = 0x80040241,VFW_S_PARTIAL_RENDER = 0x40242,VFW_E_FILE_TOO_SHORT = 0x80040243,VFW_E_INVALID_FILE_VERSION = 0x80040244,VFW_S_SOME_DATA_IGNORED = 0x40245,VFW_S_CONNECTIONS_DEFERRED = 0x40246,VFW_E_INVALID_CLSID = 0x80040247,VFW_E_INVALID_MEDIA_TYPE = 0x80040248,VFW_E_BAD_KEY = 0x800403F2,VFW_S_NO_MORE_ITEMS = 0x40103,VFW_E_SAMPLE_TIME_NOT_SET = 0x80040249,VFW_S_RESOURCE_NOT_NEEDED = 0x40250,VFW_E_MEDIA_TIME_NOT_SET = 0x80040251,VFW_E_NO_TIME_FORMAT_SET = 0x80040252,VFW_E_MONO_AUDIO_HW = 0x80040253,VFW_S_MEDIA_TYPE_IGNORED = 0x40254,VFW_E_NO_DECOMPRESSOR = 0x80040255,VFW_E_NO_AUDIO_HARDWARE = 0x80040256,VFW_S_VIDEO_NOT_RENDERED = 0x40257,VFW_S_AUDIO_NOT_RENDERED = 0x40258,VFW_E_RPZA = 0x80040259,VFW_S_RPZA = 0x4025A,VFW_E_PROCESSOR_NOT_SUITABLE = 0x8004025B,VFW_E_UNSUPPORTED_AUDIO = 0x8004025C,VFW_E_UNSUPPORTED_VIDEO = 0x8004025D,VFW_E_MPEG_NOT_CONSTRAINED = 0x8004025E,VFW_E_NOT_IN_GRAPH = 0x8004025F,VFW_S_ESTIMATED = 0x40260,VFW_E_NO_TIME_FORMAT = 0x80040261,VFW_E_READ_ONLY = 0x80040262,VFW_S_RESERVED = 0x40263,VFW_E_BUFFER_UNDERFLOW = 0x80040264,VFW_E_UNSUPPORTED_STREAM = 0x80040265,VFW_E_NO_TRANSPORT = 0x80040266,VFW_S_STREAM_OFF = 0x40267,VFW_S_CANT_CUE = 0x40268,VFW_E_BAD_VIDEOCD = 0x80040269,VFW_S_NO_STOP_TIME = 0x40270,VFW_E_OUT_OF_VIDEO_MEMORY = 0x80040271,VFW_E_VP_NEGOTIATION_FAILED = 0x80040272,VFW_E_DDRAW_CAPS_NOT_SUITABLE = 0x80040273,VFW_E_NO_VP_HARDWARE = 0x80040274,VFW_E_NO_CAPTURE_HARDWARE = 0x80040275,VFW_E_DVD_OPERATION_INHIBITED = 0x80040276,VFW_E_DVD_INVALIDDOMAIN = 0x80040277,VFW_E_DVD_NO_BUTTON = 0x80040278,VFW_E_DVD_GRAPHNOTREADY = 0x80040279,VFW_E_DVD_RENDERFAIL = 0x8004027A,VFW_E_DVD_DECNOTENOUGH = 0x8004027B,VFW_E_DDRAW_VERSION_NOT_SUITABLE = 0x8004027C,};
enum MACRO_VIDCF {VIDCF_QUALITY = 0x1,VIDCF_CRUNCH = 0x2,VIDCF_TEMPORAL = 0x4,VIDCF_COMPRESSFRAMES = 0x8,VIDCF_DRAW = 0x10,VIDCF_FASTTEMPORALC = 0x20,VIDCF_FASTTEMPORALD = 0x80,};
enum MACRO_VIDEO {VIDEO_EXTERNALIN = 0x1,VIDEO_EXTERNALOUT = 0x2,VIDEO_IN = 0x4,VIDEO_OUT = 0x8,VIDEO_DLG_QUERY = 0x10,VIDEO_CONFIGURE_QUERY = 0x8000,VIDEO_CONFIGURE_SET = 0x1000,VIDEO_CONFIGURE_GET = 0x2000,VIDEO_CONFIGURE_QUERYSIZE = 0x1,VIDEO_CONFIGURE_CURRENT = 0x10,VIDEO_CONFIGURE_NOMINAL = 0x20,VIDEO_CONFIGURE_MIN = 0x40,VIDEO_CONFIGURE_MAX = 0x80,};
enum MACRO_WCB16 {WCB16_MAX_CBARGS = 16,WCB16_PASCAL = 0,WCB16_CDECL = 1,};
enum MACRO_WCHAR {WCHAR_MIN = 0,WCHAR_MAX = 65535,};
enum MACRO_WHEEL {WHEEL_DELTA = 120,};
enum MACRO_WIN31 {WIN31_CLASS = 0,};
enum MACRO_WIN32 {WIN32 = 100,};
enum MACRO_WKSTA {WKSTA_PLATFORM_ID_PARMNUM = 100,WKSTA_COMPUTERNAME_PARMNUM = 1,WKSTA_LANGROUP_PARMNUM = 2,WKSTA_VER_MAJOR_PARMNUM = 4,WKSTA_VER_MINOR_PARMNUM = 5,WKSTA_LOGGED_ON_USERS_PARMNUM = 6,WKSTA_LANROOT_PARMNUM = 7,WKSTA_LOGON_DOMAIN_PARMNUM = 8,WKSTA_LOGON_SERVER_PARMNUM = 9,WKSTA_CHARWAIT_PARMNUM = 10,WKSTA_CHARTIME_PARMNUM = 11,WKSTA_CHARCOUNT_PARMNUM = 12,WKSTA_KEEPCONN_PARMNUM = 13,WKSTA_KEEPSEARCH_PARMNUM = 14,WKSTA_MAXCMDS_PARMNUM = 15,WKSTA_NUMWORKBUF_PARMNUM = 16,WKSTA_MAXWRKCACHE_PARMNUM = 17,WKSTA_SESSTIMEOUT_PARMNUM = 18,WKSTA_SIZERROR_PARMNUM = 19,WKSTA_NUMALERTS_PARMNUM = 20,WKSTA_NUMSERVICES_PARMNUM = 21,WKSTA_NUMCHARBUF_PARMNUM = 22,WKSTA_SIZCHARBUF_PARMNUM = 23,WKSTA_ERRLOGSZ_PARMNUM = 27,WKSTA_PRINTBUFTIME_PARMNUM = 28,WKSTA_SIZWORKBUF_PARMNUM = 29,WKSTA_MAILSLOTS_PARMNUM = 30,WKSTA_NUMDGRAMBUF_PARMNUM = 31,WKSTA_WRKHEURISTICS_PARMNUM = 32,WKSTA_MAXTHREADS_PARMNUM = 33,WKSTA_LOCKQUOTA_PARMNUM = 41,WKSTA_LOCKINCREMENT_PARMNUM = 42,WKSTA_LOCKMAXIMUM_PARMNUM = 43,WKSTA_PIPEINCREMENT_PARMNUM = 44,WKSTA_PIPEMAXIMUM_PARMNUM = 45,WKSTA_DORMANTFILELIMIT_PARMNUM = 46,WKSTA_CACHEFILETIMEOUT_PARMNUM = 47,WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM = 48,WKSTA_USEUNLOCKBEHIND_PARMNUM = 49,WKSTA_USECLOSEBEHIND_PARMNUM = 50,WKSTA_BUFFERNAMEDPIPES_PARMNUM = 51,WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM = 52,WKSTA_UTILIZENTCACHING_PARMNUM = 53,WKSTA_USERAWREAD_PARMNUM = 54,WKSTA_USERAWWRITE_PARMNUM = 55,WKSTA_USEWRITERAWWITHDATA_PARMNUM = 56,WKSTA_USEENCRYPTION_PARMNUM = 57,WKSTA_BUFFILESWITHDENYWRITE_PARMNUM = 58,WKSTA_BUFFERREADONLYFILES_PARMNUM = 59,WKSTA_FORCECORECREATEMODE_PARMNUM = 60,WKSTA_USE512BYTESMAXTRANSFER_PARMNUM = 61,WKSTA_READAHEADTHRUPUT_PARMNUM = 62,WKSTA_OTH_DOMAINS_PARMNUM = 101,};
enum MACRO_WNCON {WNCON_FORNETCARD = 0x1,WNCON_NOTROUTED = 0x2,WNCON_SLOWLINK = 0x4,WNCON_DYNAMIC = 0x8,};
enum MACRO_WNFMT {WNFMT_MULTILINE = 0x1,WNFMT_ABBREVIATED = 0x2,WNFMT_INENUM = 0x10,WNFMT_CONNECTION = 0x20,};
enum MACRO_WPWIZ {WPWIZ_ERROR_FIRST = 0x40042000,WPWIZ_ERROR_UNKNOWN = 0xC0042001,WPWIZ_ERROR_PROV_QI = 0xC0042002,WPWIZ_ERROR_INIT_FAILED = 0xC0042003,WPWIZ_ERROR_COCREATE_WEBPOST = 0xC0042004,WPWIZ_ERROR_NO_PROVIDERS = 0xC0042005,WPWIZ_ERROR_STATE_PTR = 0xC0042006,WPWIZ_ERROR_WEBPOST_PTR = 0xC0042007,WPWIZ_ERROR_FILE_NOT_FOUND = 0xC0042008,WPWIZ_ERROR_PROPSHEET_ERROR = 0xC0042009,WPWIZ_ERROR_OUTOFMEMORY = 0xC004200A,WPWIZ_ERROR_LAST = 0x400420FF,};
enum MACRO_WRITE {WRITE_DAC = 0x40000,WRITE_OWNER = 0x80000,};
enum MACRO_WRONG {WRONG_VALUE_LENGTH = 0x4000F118,WRONG_VALUE_MAKEUP = 0x4000F119,WRONG_VALUE_NUMBER = 0x4000F11A,WRONG_VALUE_POSITION = 0x4000F11B,WRONG_VALUE_SYNTAX = 0x4000F11C,WRONG_VALUE_TYPE = 0x4000F11D,};
enum MACRO_WSANO {WSANO_DATA = 11004,NO_DATA = 11004,};
enum MACRO_WS_GT {WS_GT = 196608,};
enum MACRO_XTYPF {XTYPF_NOBLOCK = 0x2,XTYPF_NODATA = 0x4,XTYPF_ACKREQ = 0x8,};
enum MACRO__HEAP {_HEAP_MAXREQ = 0xFFFFFFE0,};
enum MACRO__HOOK {_HOOK_ALLOC = 1,_HOOK_REALLOC = 2,_HOOK_FREE = 3,};
enum MACRO__NCAT {_NCAT = 7,};
enum MACRO__UI32 {_UI32_MAX = 0xFFFFFFFF,};
enum MACRO__UI64 {_UI64_MAX = 0xFFFFFFFF,};
enum MACRO__WAIT {_WAIT_CHILD = 0,_WAIT_GRANDCHILD = 1,};
enum MACRO_chx10 {chx10 = 0x419,};
enum MACRO_chx11 {chx11 = 0x41A,};
enum MACRO_chx12 {chx12 = 0x41B,};
enum MACRO_chx13 {chx13 = 0x41C,};
enum MACRO_chx14 {chx14 = 0x41D,};
enum MACRO_chx15 {chx15 = 0x41E,};
enum MACRO_chx16 {chx16 = 0x41F,};
enum MACRO_cmb10 {cmb10 = 0x479,};
enum MACRO_cmb11 {cmb11 = 0x47A,};
enum MACRO_cmb12 {cmb12 = 0x47B,};
enum MACRO_cmb13 {cmb13 = 0x47C,};
enum MACRO_cmb14 {cmb14 = 0x47D,};
enum MACRO_cmb15 {cmb15 = 0x47E,};
enum MACRO_cmb16 {cmb16 = 0x47F,};
enum MACRO_edt10 {edt10 = 0x489,};
enum MACRO_edt11 {edt11 = 0x48A,};
enum MACRO_edt12 {edt12 = 0x48B,};
enum MACRO_edt13 {edt13 = 0x48C,};
enum MACRO_edt14 {edt14 = 0x48D,};
enum MACRO_edt15 {edt15 = 0x48E,};
enum MACRO_edt16 {edt16 = 0x48F,};
enum MACRO_lst10 {lst10 = 0x469,};
enum MACRO_lst11 {lst11 = 0x46A,};
enum MACRO_lst12 {lst12 = 0x46B,};
enum MACRO_lst13 {lst13 = 0x46C,};
enum MACRO_lst14 {lst14 = 0x46D,};
enum MACRO_lst15 {lst15 = 0x46E,};
enum MACRO_lst16 {lst16 = 0x46F,};
enum MACRO_psh10 {psh10 = 0x409,};
enum MACRO_psh11 {psh11 = 0x40A,};
enum MACRO_psh12 {psh12 = 0x40B,};
enum MACRO_psh13 {psh13 = 0x40C,};
enum MACRO_psh14 {psh14 = 0x40D,};
enum MACRO_psh15 {psh15 = 0x40E,};
enum MACRO_psh16 {psh16 = 0x40F,};
enum MACRO_rad10 {rad10 = 0x429,};
enum MACRO_rad11 {rad11 = 0x42A,};
enum MACRO_rad12 {rad12 = 0x42B,};
enum MACRO_rad13 {rad13 = 0x42C,};
enum MACRO_rad14 {rad14 = 0x42D,};
enum MACRO_rad15 {rad15 = 0x42E,};
enum MACRO_rad16 {rad16 = 0x42F,};
enum MACRO_stc10 {stc10 = 0x449,};
enum MACRO_stc11 {stc11 = 0x44A,};
enum MACRO_stc12 {stc12 = 0x44B,};
enum MACRO_stc13 {stc13 = 0x44C,};
enum MACRO_stc14 {stc14 = 0x44D,};
enum MACRO_stc15 {stc15 = 0x44E,};
enum MACRO_stc16 {stc16 = 0x44F,};
enum MACRO_stc17 {stc17 = 0x450,};
enum MACRO_stc18 {stc18 = 0x451,};
enum MACRO_stc19 {stc19 = 0x452,};
enum MACRO_stc20 {stc20 = 0x453,};
enum MACRO_stc21 {stc21 = 0x454,};
enum MACRO_stc22 {stc22 = 0x455,};
enum MACRO_stc23 {stc23 = 0x456,};
enum MACRO_stc24 {stc24 = 0x457,};
enum MACRO_stc25 {stc25 = 0x458,};
enum MACRO_stc26 {stc26 = 0x459,};
enum MACRO_stc27 {stc27 = 0x45A,};
enum MACRO_stc28 {stc28 = 0x45B,};
enum MACRO_stc29 {stc29 = 0x45C,};
enum MACRO_stc30 {stc30 = 0x45D,};
enum MACRO_stc31 {stc31 = 0x45E,};
enum MACRO_stc32 {stc32 = 0x45F,};
typedef struct mc_allocate MC_ALLOCATE;
typedef struct mc_test_rts MC_TEST_RTS;
typedef struct tagMDINEXTMENU MDINEXTMENU;
typedef struct tagMENUBARINFO MENUBARINFO;
typedef struct tagMIDIINCAPSA MIDIINCAPSA;
typedef struct tagMIDIINCAPSW MIDIINCAPSW;
typedef struct _7E7F9E6E46889EEDB1929991A6A7474A MODULEENTRY;
typedef struct tagMONCBSTRUCT MONCBSTRUCT;
typedef struct tagMONITORINFO MONITORINFO;
typedef struct _MONTHLYDATE MONTHLYDATE;
typedef struct tagMQCOLUMNSET MQCOLUMNSET;
typedef struct _42792D5BBA08C54B20EEEC50F78E7D08 MapiMessage;
typedef struct _NAME_BUFFER NAME_BUFFER;
typedef void ( *NDR_RUNDOWN)(void *context);
typedef struct tagNEWCPLINFOA NEWCPLINFOA;
typedef struct tagNEWCPLINFOW NEWCPLINFOW;
typedef struct tagNMIPADDRESS NMIPADDRESS;
typedef struct tagLVKEYDOWN NMLVKEYDOWN;
typedef struct tagNMSELCHANGE NMSELCHANGE;
typedef struct tagNMTBHOTITEM NMTBHOTITEM;
typedef struct tagTCKEYDOWN NMTCKEYDOWN;
typedef struct tagNMTREEVIEWA NMTREEVIEWA;
typedef struct tagNMTREEVIEWW NMTREEVIEWW;
typedef struct tagTVKEYDOWN NMTVKEYDOWN;
typedef struct tagCWPSTRUCT *NPCWPSTRUCT;
typedef struct tagEXTLOGPEN *NPEXTLOGPEN;
typedef struct tagIMESTRUCT *NPIMESTRUCT;
typedef struct joyinfoex_tag *NPJOYINFOEX;
typedef struct tagPOLYTEXTA *NPPOLYTEXTA;
typedef struct tagPOLYTEXTW *NPPOLYTEXTW;
typedef struct tagSTYLEBUFA *NPSTYLEBUFA;
typedef struct tagSTYLEBUFW *NPSTYLEBUFW;
typedef struct tagWNDCLASSA *NPWNDCLASSA;
typedef struct tagWNDCLASSW *NPWNDCLASSW;
typedef struct _NSP_ROUTINE NSP_ROUTINE;
enum NtmsLmState {NTMS_LM_QUEUED = 0x0,NTMS_LM_INPROCESS = 0x1,NTMS_LM_PASSED = 0x2,NTMS_LM_FAILED = 0x3,NTMS_LM_INVALID = 0x4,NTMS_LM_WAITING = 0x5,NTMS_LM_DEFFERED = 0x6,NTMS_LM_CANCELLED = 0x7,NTMS_LM_STOPPED = 0x8,};
typedef struct tagOCPFIPARAMS OCPFIPARAMS;
typedef struct _OFNOTIFYEXA OFNOTIFYEXA;
typedef struct _OFNOTIFYEXW OFNOTIFYEXW;
enum OLECMDTEXTF {OLECMDTEXTF_NONE = 0x0,OLECMDTEXTF_NAME = 0x1,OLECMDTEXTF_STATUS = 0x2,};
typedef struct tagPACKAGEINFO PACKAGEINFO;
typedef struct _AE_CONNREJ *PAE_CONNREJ;
typedef struct _AE_GENERIC *PAE_GENERIC;
typedef struct _AE_LOCKOUT *PAE_LOCKOUT;
typedef struct tagPAINTSTRUCT PAINTSTRUCT;
typedef struct tagALTTABINFO *PALTTABINFO;
typedef struct _AM_DVD_YUV *PAM_DVD_YUV;
typedef struct _AppBarData *PAPPBARDATA;
typedef struct _paraformat2 PARAFORMAT2;
typedef struct tagPARAMDESCEX PARAMDESCEX;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA *PARRAY_INFO;
typedef struct tagBITMAPINFO *PBITMAPINFO;
typedef struct _CERT_CHAIN *PCERT_CHAIN;
typedef struct tagCURSORINFO *PCURSORINFO;
typedef struct _DFS_INFO_1 *PDFS_INFO_1;
typedef struct _DFS_INFO_2 *PDFS_INFO_2;
typedef struct _DFS_INFO_3 *PDFS_INFO_3;
typedef struct tagDIBSECTION *PDIBSECTION;
typedef struct tagDROPSTRUCT *PDROPSTRUCT;
typedef struct _DVD_REGION *PDVD_REGION;
typedef struct tagEMRELLIPSE *PEMRELLIPSE;
typedef struct tagABORTPATH *PEMRENDPATH;
typedef struct tagEMRFILLRGN *PEMRFILLRGN;
typedef struct tagEMRMASKBLT *PEMRMASKBLT;
typedef struct tagEMRPOLYLINE *PEMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETROP2;
typedef struct phonestatus_tag PHONESTATUS;
typedef struct _INFCONTEXT *PINFCONTEXT;
typedef struct _tagIOSPACE_EX *PIOSPACE_EX;
typedef struct _IP_NETWORK *PIP_NETWORK;
typedef struct _JOB_INFO_3 *PJOB_INFO_3;
typedef struct tagKEYBDINPUT *PKEYBDINPUT;
typedef struct _CA0DACF90AABDE33CADDF7416F0C17F2 *PKSINTERVAL;
typedef struct _D611436986C6FEF0F654B123D787805F *PKSPRIORITY;
typedef struct _BC43068C8DCBA7D8F8979D82055549DE *PKSTOPOLOGY;
typedef struct ldapsearch *PLDAPSearch;
typedef struct _LIST_ENTRY *PLIST_ENTRY;
typedef union _LLC_BUFFER *PLLC_BUFFER;
typedef struct tagLOGPALETTE *PLOGPALETTE;
typedef struct _LSA_STRING *PLSA_STRING;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMIMECPINFO *PMIMECPINFO;
typedef struct tagMINMAXINFO *PMINMAXINFO;
typedef struct tagMIXERCAPSA *PMIXERCAPSA;
typedef struct tagMIXERCAPSW *PMIXERCAPSW;
typedef struct tagMIXERLINEA *PMIXERLINEA;
typedef struct tagMIXERLINEW *PMIXERLINEW;
typedef struct tagMOUSEINPUT *PMOUSEINPUT;
typedef struct _MSG_INFO_0 *PMSG_INFO_0;
typedef struct _MSG_INFO_1 *PMSG_INFO_1;
typedef struct tagOLEUIBUSYA *POLEUIBUSYA;
typedef struct tagOLEUIBUSYW *POLEUIBUSYW;
typedef struct _POINTFLOAT *PPOINTFLOAT;
typedef struct _RAS_PORT_0 *PRAS_PORT_0;
typedef struct _RAS_PORT_1 *PRAS_PORT_1;
typedef struct _RAS_USER_0 *PRAS_USER_0;
typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct _RPC_POLICY *PRPC_POLICY;
typedef struct _RTP_HEADER *PRTP_HEADER;
typedef struct _SMALL_RECT *PSMALL_RECT;
typedef struct _SYSTEMTIME *PSYSTEMTIME;
typedef struct _TAPE_ERASE *PTAPE_ERASE;
typedef struct _TOKEN_USER *PTOKEN_USER;
typedef struct _punctuation PUNCTUATION;
typedef struct _USE_INFO_0 *PUSE_INFO_0;
typedef struct _USE_INFO_1 *PUSE_INFO_1;
typedef struct _USE_INFO_2 *PUSE_INFO_2;
typedef struct _USE_INFO_3 *PUSE_INFO_3;
typedef struct _033FDDF8C92E552042E0320A022B0EBA *PUSN_RECORD;
typedef struct UnloadInfo *PUnloadInfo;
typedef struct val_context *PVALCONTEXT;
typedef struct waveformat_tag *PWAVEFORMAT;
typedef struct tagWINDOWINFO *PWINDOWINFO;
typedef struct _WSAVersion *PWSAVERSION;
struct PackageUtil;
typedef struct tagQACONTAINER QACONTAINER;
typedef struct _QOS_SD_MODE QOS_SD_MODE;
typedef struct __MIDL___MIDL_itf_strmif_0074_0001 REGPINTYPES;
typedef struct _REPL_INFO_0 REPL_INFO_0;
typedef struct tagRFC1766INFO RFC1766INFO;
typedef struct _RIPMIB_BASE RIPMIB_BASE;
typedef struct _RIP_IF_INFO RIP_IF_INFO;
typedef struct _RPCBINDINFO RPCBINDINFO;
typedef struct _RPC_MESSAGE RPC_MESSAGE;
typedef struct _RPC_VERSION RPC_VERSION;
typedef struct _RSVP_ADSPEC RSVP_ADSPEC;
typedef struct _RSVP_POLICY RSVP_POLICY;
typedef struct _RTFSYNCINFO RTFSYNCINFO;
typedef struct _tagRemBINDINFO RemBINDINFO;
typedef struct tagRemHPALETTE RemHPALETTE;
typedef struct _SAP_IF_INFO SAP_IF_INFO;
typedef struct _SCALAR_INFO SCALAR_INFO;
typedef struct tagSERIALKEYSA SERIALKEYSA;
typedef struct tagSERIALKEYSW SERIALKEYSW;
enum SF_REQ_TYPE {SF_REQ_SEND_RESPONSE_HEADER = 0x0,SF_REQ_ADD_HEADERS_ON_DENIAL = 0x1,SF_REQ_SET_NEXT_READ_SIZE = 0x2,SF_REQ_SET_PROXY_INFO = 0x3,SF_REQ_GET_CONNID = 0x4,SF_REQ_SET_CERTIFICATE_INFO = 0x5,SF_REQ_GET_PROPERTY = 0x6,SF_REQ_NORMALIZE_URL = 0x7,SF_REQ_DISABLE_NOTIFICATIONS = 0x8,};
typedef struct _SHFILEINFOA SHFILEINFOA;
typedef struct _SHFILEINFOW SHFILEINFOW;
typedef struct _SLPSTRArray SLPSTRArray;
typedef struct sockaddr_at SOCKADDR_AT;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_nb SOCKADDR_NB;
typedef struct sockaddr_tp SOCKADDR_TP;
typedef struct sockaddr_vv SOCKADDR_VV;
typedef short SQLSMALLINT;
typedef unsigned int SQLUINTEGER;
typedef struct srv_coldesc SRV_COLDESC;
typedef struct srv_comport SRV_COMPORT;
typedef struct srv_control SRV_CONTROL;
typedef struct srv_handler SRV_HANDLER;
typedef struct srv_pevents SRV_PEVENTS;
typedef struct _SShortArray SShortArray;
typedef struct tagSTATPROPSTG STATPROPSTG;
typedef struct tagSTYLESTRUCT STYLESTRUCT;
typedef struct _SYSTEM_INFO SYSTEM_INFO;
typedef struct _SecPkgInfoA SecPkgInfoA;
typedef struct _SecPkgInfoW SecPkgInfoW;
typedef struct _EA96C5F0D9445AECD5022D472819168D SnmpVarBind;
typedef struct tagTBADDBITMAP TBADDBITMAP;
typedef struct tagTEXTMETRICA TEXTMETRICA;
typedef struct tagTEXTMETRICW TEXTMETRICW;
typedef struct tagTIME_STRUCT TIME_STRUCT;
typedef struct _TOKEN_OWNER TOKEN_OWNER;
typedef struct tagTTPOLYCURVE TTPOLYCURVE;
typedef struct tagTOOLINFOA TTTOOLINFOA;
typedef struct tagTOOLINFOW TTTOOLINFOW;
typedef struct tagTUNING_INFO TUNING_INFO;
typedef struct _USER_INFO_0 USER_INFO_0;
typedef struct _USER_INFO_1 USER_INFO_1;
typedef struct _USER_INFO_2 USER_INFO_2;
typedef struct _USER_INFO_3 USER_INFO_3;
typedef struct _usr_entryid USR_ENTRYID;
typedef struct _UUID_VECTOR UUID_VECTOR;
typedef struct _VDM_SEGINFO VDM_SEGINFO;
typedef struct BasicVidCapInfo VIDCAP_INFO;
typedef struct tagWAVEINCAPSA WAVEINCAPSA;
typedef struct tagWAVEINCAPSW WAVEINCAPSW;
typedef struct _WLX_DESKTOP WLX_DESKTOP;
typedef struct tagWNDCLASSEXA WNDCLASSEXA;
typedef struct tagWNDCLASSEXW WNDCLASSEXW;
typedef struct tagWPPROVINFOA WPPROVINFOA;
typedef struct tagWPPROVINFOW WPPROVINFOW;
typedef struct tagWPSITEINFOA WPSITEINFOA;
typedef struct tagWPSITEINFOW WPSITEINFOW;
typedef struct _WSATHREADID WSATHREADID;
typedef struct x25_overlay X25_OVERLAY;
typedef int (*XA_OPEN_EPT)(char *, int, int);
struct XMLDocument;
struct _ADOCommand;
struct _Connection {struct _ConnectionVtbl *lpVtbl;};
enum _D3DCMPFUNC {D3DCMP_NEVER = 0x1,D3DCMP_LESS = 0x2,D3DCMP_EQUAL = 0x3,D3DCMP_LESSEQUAL = 0x4,D3DCMP_GREATER = 0x5,D3DCMP_NOTEQUAL = 0x6,D3DCMP_GREATEREQUAL = 0x7,D3DCMP_ALWAYS = 0x8,D3DCMP_FORCE_DWORD = 0x7FFFFFFF,};
enum _D3DFOGMODE {D3DFOG_NONE = 0x0,D3DFOG_EXP = 0x1,D3DFOG_EXP2 = 0x2,D3DFOG_LINEAR = 0x3,D3DFOG_FORCE_DWORD = 0x7FFFFFFF,};
struct _DBanEvents {struct _DBanEventsVtbl *lpVtbl;};
struct _DEPGEvents {struct _DEPGEventsVtbl *lpVtbl;};
struct _DPOPEvents {struct _DPOPEventsVtbl *lpVtbl;};
struct _DPSPEvents {struct _DPSPEventsVtbl *lpVtbl;};
struct _DWORD_BLOB {unsigned int clSize;unsigned int alData[1];};
struct _LIST_ENTRY {struct _LIST_ENTRY *Flink;struct _LIST_ENTRY *Blink;};
enum _LLC_STATUS {LLC_STATUS_SUCCESS = 0x0,LLC_STATUS_INVALID_COMMAND = 0x1,LLC_STATUS_DUPLICATE_COMMAND = 0x2,LLC_STATUS_ADAPTER_OPEN = 0x3,LLC_STATUS_ADAPTER_CLOSED = 0x4,LLC_STATUS_PARAMETER_MISSING = 0x5,LLC_STATUS_INVALID_OPTION = 0x6,LLC_STATUS_COMMAND_CANCELLED_FAILURE = 0x7,LLC_STATUS_ACCESS_DENIED = 0x8,LLC_STATUS_ADAPTER_NOT_INITIALIZED = 0x9,LLC_STATUS_CANCELLED_BY_USER = 0xA,LLC_STATUS_COMMAND_CANCELLED_CLOSED = 0xB,LLC_STATUS_SUCCESS_NOT_OPEN = 0xC,LLC_STATUS_TIMER_ERROR = 0x11,LLC_STATUS_NO_MEMORY = 0x12,LLC_STATUS_INVALID_LOG_ID = 0x13,LLC_STATUS_LOST_LOG_DATA = 0x15,LLC_STATUS_BUFFER_SIZE_EXCEEDED = 0x16,LLC_STATUS_INVALID_BUFFER_LENGTH = 0x18,LLC_STATUS_INADEQUATE_BUFFERS = 0x19,LLC_STATUS_USER_LENGTH_TOO_LARGE = 0x1A,LLC_STATUS_INVALID_PARAMETER_TABLE = 0x1B,LLC_STATUS_INVALID_POINTER_IN_CCB = 0x1C,LLC_STATUS_INVALID_ADAPTER = 0x1D,LLC_STATUS_LOST_DATA_NO_BUFFERS = 0x20,LLC_STATUS_LOST_DATA_INADEQUATE_SPACE = 0x21,LLC_STATUS_TRANSMIT_ERROR_FS = 0x22,LLC_STATUS_TRANSMIT_ERROR = 0x23,LLC_STATUS_UNAUTHORIZED_MAC = 0x24,LLC_STATUS_MAX_COMMANDS_EXCEEDED = 0x25,LLC_STATUS_LINK_NOT_TRANSMITTING = 0x27,LLC_STATUS_INVALID_FRAME_LENGTH = 0x28,LLC_STATUS_INADEQUATE_RECEIVE = 0x30,LLC_STATUS_INVALID_NODE_ADDRESS = 0x32,LLC_STATUS_INVALID_RCV_BUFFER_LENGTH = 0x33,LLC_STATUS_INVALID_XMIT_BUFFER_LENGTH = 0x34,LLC_STATUS_INVALID_STATION_ID = 0x40,LLC_STATUS_LINK_PROTOCOL_ERROR = 0x41,LLC_STATUS_PARMETERS_EXCEEDED_MAX = 0x42,LLC_STATUS_INVALID_SAP_VALUE = 0x43,LLC_STATUS_INVALID_ROUTING_INFO = 0x44,LLC_STATUS_RESOURCES_NOT_AVAILABLE = 0x46,LLC_STATUS_LINK_STATIONS_OPEN = 0x47,LLC_STATUS_INCOMPATIBLE_COMMANDS = 0x4A,LLC_STATUS_OUTSTANDING_COMMANDS = 0x4C,LLC_STATUS_CONNECT_FAILED = 0x4D,LLC_STATUS_INVALID_REMOTE_ADDRESS = 0x4F,LLC_STATUS_CCB_POINTER_FIELD = 0x50,LLC_STATUS_INVALID_APPLICATION_ID = 0x52,LLC_STATUS_NO_SYSTEM_PROCESS = 0x56,LLC_STATUS_INADEQUATE_LINKS = 0x57,LLC_STATUS_INVALID_PARAMETER_1 = 0x58,LLC_STATUS_DIRECT_STATIONS_NOT_ASSIGNED = 0x5C,LLC_STATUS_DEVICE_DRIVER_NOT_INSTALLED = 0x5D,LLC_STATUS_ADAPTER_NOT_INSTALLED = 0x5E,LLC_STATUS_CHAINED_DIFFERENT_ADAPTERS = 0x5F,LLC_STATUS_INIT_COMMAND_STARTED = 0x60,LLC_STATUS_TOO_MANY_USERS = 0x61,LLC_STATUS_CANCELLED_BY_SYSTEM_ACTION = 0x62,LLC_STATUS_DIR_STATIONS_NOT_AVAILABLE = 0x63,LLC_STATUS_NO_GDT_SELECTORS = 0x65,LLC_STATUS_MEMORY_LOCK_FAILED = 0x69,LLC_STATUS_INVALID_BUFFER_ADDRESS = 0x80,LLC_STATUS_BUFFER_ALREADY_RELEASED = 0x81,LLC_STATUS_BIND_ERROR = 0xA0,LLC_STATUS_INVALID_VERSION = 0xA1,LLC_STATUS_NT_ERROR_STATUS = 0xA2,LLC_STATUS_PENDING = 0xFF,};
enum _MEDIA_TYPE {Unknown = 0x0,F5_1Pt2_512 = 0x1,F3_1Pt44_512 = 0x2,F3_2Pt88_512 = 0x3,F3_20Pt8_512 = 0x4,F3_720_512 = 0x5,F5_360_512 = 0x6,F5_320_512 = 0x7,F5_320_1024 = 0x8,F5_180_512 = 0x9,F5_160_512 = 0xA,RemovableMedia = 0xB,FixedMedia = 0xC,F3_120M_512 = 0xD,F3_640_512 = 0xE,F5_640_512 = 0xF,F5_720_512 = 0x10,F3_1Pt2_512 = 0x11,F3_1Pt23_1024 = 0x12,F5_1Pt23_1024 = 0x13,F3_128Mb_512 = 0x14,F3_230Mb_512 = 0x15,F8_256_128 = 0x16,};
enum _PeriodType {PERIODTYPE_NONE = 0x0,PERIODTYPE_CONTINUOUS = 0x1,PERIODTYPE_LAST_N_MINUTES = 0x2,PERIODTYPE_TOTAL = 0x3,PERIODTYPE_LAST = 0x4,};
struct _RPC_POLICY {unsigned int Length;unsigned int EndpointFlags;unsigned int NICFlags;};
enum _TOKEN_TYPE {TokenPrimary = 0x1,TokenImpersonation = 0x2,};
enum _URLZONEREG {URLZONEREG_DEFAULT = 0x0,URLZONEREG_HKLM = 0x1,URLZONEREG_HKCU = 0x2,};
enum _XactStatus {XACT_STATUS_NONE = 0x0,XACT_STATUS_ABORTED = 0x1,XACT_STATUS_COMMITTED = 0x2,XACT_STATUS_NOT_MY_TRANSACTION = 0x3,XACT_STATUS_TIMEOUT = 0x4,};
struct _diskfree_t {unsigned int total_clusters;unsigned int avail_clusters;unsigned int sectors_per_cluster;unsigned int bytes_per_sector;};
enum _reconcilef {RECONCILEF_MAYBOTHERUSER = 0x1,RECONCILEF_FEEDBACKWINDOWVALID = 0x2,RECONCILEF_NORESIDUESOK = 0x4,RECONCILEF_OMITSELFRESIDUE = 0x8,RECONCILEF_RESUMERECONCILIATION = 0x10,RECONCILEF_YOUMAYDOTHEUPDATES = 0x20,RECONCILEF_ONLYYOUWERECHANGED = 0x40,ALL_RECONCILE_FLAGS = 0x7F,};
enum _tagMethods {IUnknown_QueryInterface = 0x0,IUnknown_AddRef = 0x1,IUnknown_Release = 0x2,IMAPIProp_GetLastError = 0x3,IMAPIProp_SaveChanges = 0x4,IMAPIProp_GetProps = 0x5,IMAPIProp_GetPropList = 0x6,IMAPIProp_OpenProperty = 0x7,IMAPIProp_SetProps = 0x8,IMAPIProp_DeleteProps = 0x9,IMAPIProp_CopyTo = 0xA,IMAPIProp_CopyProps = 0xB,IMAPIProp_GetNamesFromIDs = 0xC,IMAPIProp_GetIDsFromNames = 0xD,IMAPITable_GetLastError = 0xE,IMAPITable_Advise = 0xF,IMAPITable_Unadvise = 0x10,IMAPITable_GetStatus = 0x11,IMAPITable_SetColumns = 0x12,IMAPITable_QueryColumns = 0x13,IMAPITable_GetRowCount = 0x14,IMAPITable_SeekRow = 0x15,IMAPITable_SeekRowApprox = 0x16,IMAPITable_QueryPosition = 0x17,IMAPITable_FindRow = 0x18,IMAPITable_Restrict = 0x19,IMAPITable_CreateBookmark = 0x1A,IMAPITable_FreeBookmark = 0x1B,IMAPITable_SortTable = 0x1C,IMAPITable_QuerySortOrder = 0x1D,IMAPITable_QueryRows = 0x1E,IMAPITable_Abort = 0x1F,IMAPITable_ExpandRow = 0x20,IMAPITable_CollapseRow = 0x21,IMAPITable_WaitForCompletion = 0x22,IMAPITable_GetCollapseState = 0x23,IMAPITable_SetCollapseState = 0x24,IMAPIContainer_GetContentsTable = 0x25,IMAPIContainer_GetHierarchyTable = 0x26,IMAPIContainer_OpenEntry = 0x27,IMAPIContainer_SetSearchCriteria = 0x28,IMAPIContainer_GetSearchCriteria = 0x29,IABContainer_CreateEntry = 0x2A,IABContainer_CopyEntries = 0x2B,IABContainer_DeleteEntries = 0x2C,IABContainer_ResolveNames = 0x2D,IDistList_CreateEntry = 0x2E,IDistList_CopyEntries = 0x2F,IDistList_DeleteEntries = 0x30,IDistList_ResolveNames = 0x31,IMAPIFolder_CreateMessage = 0x32,IMAPIFolder_CopyMessages = 0x33,IMAPIFolder_DeleteMessages = 0x34,IMAPIFolder_CreateFolder = 0x35,IMAPIFolder_CopyFolder = 0x36,IMAPIFolder_DeleteFolder = 0x37,IMAPIFolder_SetReadFlags = 0x38,IMAPIFolder_GetMessageStatus = 0x39,IMAPIFolder_SetMessageStatus = 0x3A,IMAPIFolder_SaveContentsSort = 0x3B,IMAPIFolder_EmptyFolder = 0x3C,IMsgStore_Advise = 0x3D,IMsgStore_Unadvise = 0x3E,IMsgStore_CompareEntryIDs = 0x3F,IMsgStore_OpenEntry = 0x40,IMsgStore_SetReceiveFolder = 0x41,IMsgStore_GetReceiveFolder = 0x42,IMsgStore_GetReceiveFolderTable = 0x43,IMsgStore_StoreLogoff = 0x44,IMsgStore_AbortSubmit = 0x45,IMsgStore_GetOutgoingQueue = 0x46,IMsgStore_SetLockState = 0x47,IMsgStore_FinishedMsg = 0x48,IMsgStore_NotifyNewMail = 0x49,IMessage_GetAttachmentTable = 0x4A,IMessage_OpenAttach = 0x4B,IMessage_CreateAttach = 0x4C,IMessage_DeleteAttach = 0x4D,IMessage_GetRecipientTable = 0x4E,IMessage_ModifyRecipients = 0x4F,IMessage_SubmitMessage = 0x50,IMessage_SetReadFlag = 0x51,IABProvider_Shutdown = 0x52,IABProvider_Logon = 0x53,IABLogon_GetLastError = 0x54,IABLogon_Logoff = 0x55,IABLogon_OpenEntry = 0x56,IABLogon_CompareEntryIDs = 0x57,IABLogon_Advise = 0x58,IABLogon_Unadvise = 0x59,IABLogon_OpenStatusEntry = 0x5A,IABLogon_OpenTemplateID = 0x5B,IABLogon_GetOneOffTable = 0x5C,IABLogon_PrepareRecips = 0x5D,IXPProvider_Shutdown = 0x5E,IXPProvider_TransportLogon = 0x5F,IXPLogon_AddressTypes = 0x60,IXPLogon_RegisterOptions = 0x61,IXPLogon_TransportNotify = 0x62,IXPLogon_Idle = 0x63,IXPLogon_TransportLogoff = 0x64,IXPLogon_SubmitMessage = 0x65,IXPLogon_EndMessage = 0x66,IXPLogon_Poll = 0x67,IXPLogon_StartMessage = 0x68,IXPLogon_OpenStatusEntry = 0x69,IXPLogon_ValidateState = 0x6A,IXPLogon_FlushQueues = 0x6B,IMSProvider_Shutdown = 0x6C,IMSProvider_Logon = 0x6D,IMSProvider_SpoolerLogon = 0x6E,IMSProvider_CompareStoreIDs = 0x6F,IMSLogon_GetLastError = 0x70,IMSLogon_Logoff = 0x71,IMSLogon_OpenEntry = 0x72,IMSLogon_CompareEntryIDs = 0x73,IMSLogon_Advise = 0x74,IMSLogon_Unadvise = 0x75,IMSLogon_OpenStatusEntry = 0x76,IMAPIControl_GetLastError = 0x77,IMAPIControl_Activate = 0x78,IMAPIControl_GetState = 0x79,IMAPIStatus_ValidateState = 0x7A,IMAPIStatus_SettingsDialog = 0x7B,IMAPIStatus_ChangePassword = 0x7C,IMAPIStatus_FlushQueues = 0x7D,IStream_Read = 0x7E,IStream_Write = 0x7F,IStream_Seek = 0x80,IStream_SetSize = 0x81,IStream_CopyTo = 0x82,IStream_Commit = 0x83,IStream_Revert = 0x84,IStream_LockRegion = 0x85,IStream_UnlockRegion = 0x86,IStream_Stat = 0x87,IStream_Clone = 0x88,IMAPIAdviseSink_OnNotify = 0x89,};
enum _undonameid {UID_UNKNOWN = 0x0,UID_TYPING = 0x1,UID_DELETE = 0x2,UID_DRAGDROP = 0x3,UID_CUT = 0x4,UID_PASTE = 0x5,};
struct dnet_accent {unsigned char dac_status;unsigned char dac_type;char dac_username[40];char dac_password[40];};
struct linkinfo_dn {unsigned short idn_segsize;unsigned char idn_linkstate;};
struct log_message {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned short msg_num;unsigned char origntr_id[8];unsigned char msg_file_name[3];unsigned char msg_act;unsigned short msg_ins_len;unsigned char *msg_ins_ptr;};
struct mc_test_rts {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;};
struct perf_stat_0 {unsigned int pst0_Level;unsigned int pst0_Flags;char *pst0_pszStatName;char *pst0_pszStatNodeName;char *pst0_pszStatUnitName;char *pst0_pszStatDescription;void *pst0_pStatFunc;};
struct psid_struct {unsigned char machine_type[4];unsigned char machine_mod_num[3];unsigned char plant_of_mfg[2];unsigned char machine_seq_num[7];};
typedef struct _7CD0DE64846C1F4E244BDF2230E7B4C4 *smiLPCNTR64;
typedef struct _7DF8531BA86889E182D5E2B59DD739DF *smiLPOCTETS;
typedef unsigned int *smiLPUINT32;
struct srv_handler {struct srv_handler *previous;struct srv_handler *next;struct srv_handler *last;int (*handler)(void *);};
enum tagCALLCONV {CC_FASTCALL = 0x0,CC_CDECL = 0x1,CC_MSCPASCAL = 0x2,CC_PASCAL = 0x2,CC_MACPASCAL = 0x3,CC_STDCALL = 0x4,CC_FPFASTCALL = 0x5,CC_SYSCALL = 0x6,CC_MPWCDECL = 0x7,CC_MPWPASCAL = 0x8,CC_MAX = 0x9,};
enum tagCALLTYPE {CALLTYPE_TOPLEVEL = 0x1,CALLTYPE_NESTED = 0x2,CALLTYPE_ASYNC = 0x3,CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,CALLTYPE_ASYNC_CALLPENDING = 0x5,};
enum tagCTRLINFO {CTRLINFO_EATS_RETURN = 0x1,CTRLINFO_EATS_ESCAPE = 0x2,};
enum tagDESCKIND {DESCKIND_NONE = 0x0,DESCKIND_FUNCDESC = 0x1,DESCKIND_VARDESC = 0x2,DESCKIND_TYPECOMP = 0x3,DESCKIND_IMPLICITAPPOBJ = 0x4,DESCKIND_MAX = 0x5,};
enum tagDVASPECT {DVASPECT_CONTENT = 0x1,DVASPECT_THUMBNAIL = 0x2,DVASPECT_ICON = 0x4,DVASPECT_DOCPRINT = 0x8,};
enum tagFUNCKIND {FUNC_VIRTUAL = 0x0,FUNC_PUREVIRTUAL = 0x1,FUNC_NONVIRTUAL = 0x2,FUNC_STATIC = 0x3,FUNC_DISPATCH = 0x4,};
enum tagGUIDKIND {GUIDKIND_DEFAULT_SOURCE_DISP_IID = 0x1,};
enum tagLIBFLAGS {LIBFLAG_FRESTRICTED = 0x1,LIBFLAG_FCONTROL = 0x2,LIBFLAG_FHIDDEN = 0x4,LIBFLAG_FHASDISKIMAGE = 0x8,};
enum tagLOCKTYPE {LOCK_WRITE = 0x1,LOCK_EXCLUSIVE = 0x2,LOCK_ONLYONCE = 0x4,};
enum tagMKREDUCE {MKRREDUCE_ONE = 0x30000,MKRREDUCE_TOUSER = 0x20000,MKRREDUCE_THROUGHUSER = 0x10000,MKRREDUCE_ALL = 0x0,};
enum tagOLECLOSE {OLECLOSE_SAVEIFDIRTY = 0x0,OLECLOSE_NOSAVE = 0x1,OLECLOSE_PROMPTSAVE = 0x2,};
enum tagOLECONTF {OLECONTF_EMBEDDINGS = 0x1,OLECONTF_LINKS = 0x2,OLECONTF_OTHERS = 0x4,OLECONTF_ONLYUSER = 0x8,OLECONTF_ONLYIFRUNNING = 0x10,};
enum tagSAVEOPTS {SAVEOPTS_SAVEIFDIRTY = 0x0,SAVEOPTS_NOSAVE = 0x1,SAVEOPTS_PROMPTSAVE = 0x2,};
enum tagSTATFLAG {STATFLAG_DEFAULT = 0x0,STATFLAG_NONAME = 0x1,STATFLAG_NOOPEN = 0x2,};
enum tagTYPEKIND {TKIND_ENUM = 0x0,TKIND_RECORD = 0x1,TKIND_MODULE = 0x2,TKIND_INTERFACE = 0x3,TKIND_DISPATCH = 0x4,TKIND_COCLASS = 0x5,TKIND_ALIAS = 0x6,TKIND_UNION = 0x7,TKIND_MAX = 0x8,};
enum tagTextMode {TM_PLAINTEXT = 0x1,TM_RICHTEXT = 0x2,TM_SINGLELEVELUNDO = 0x4,TM_MULTILEVELUNDO = 0x8,TM_SINGLECODEPAGE = 0x10,TM_MULTICODEPAGE = 0x20,};
enum tagUASFLAGS {UAS_NORMAL = 0x0,UAS_BLOCKED = 0x1,UAS_NOPARENTENABLE = 0x2,UAS_MASK = 0x3,};
enum tagVARFLAGS {VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,VARFLAG_FRESTRICTED = 0x80,VARFLAG_FDEFAULTCOLLELEM = 0x100,VARFLAG_FUIDEFAULT = 0x200,VARFLAG_FNONBROWSABLE = 0x400,VARFLAG_FREPLACEABLE = 0x800,VARFLAG_FIMMEDIATEBIND = 0x1000,};
typedef struct _userHBITMAP userHBITMAP;
typedef struct _userHGLOBAL userHGLOBAL;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireVARIANT *wireVARIANT;
struct x25_overlay {unsigned int x25_entry_len;unsigned char link_name[8];unsigned char link_comments[60];unsigned short adapter_slot_num;unsigned char link_type;unsigned char link_mode;unsigned char link_state;unsigned char link_direction;unsigned short num_act_pvcs;unsigned short total_num_pvcs;unsigned short num_act_svcs;unsigned short num_incoming_svcs;unsigned short num_2_way_svcs;unsigned short num_outgoing_svcs;};
enum xmlelemTYPE {XMLELEMTYPE_ELEMENT = 0x0,XMLELEMTYPE_TEXT = 0x1,XMLELEMTYPE_COMMENT = 0x2,XMLELEMTYPE_DOCUMENT = 0x3,XMLELEMTYPE_DTD = 0x4,XMLELEMTYPE_PI = 0x5,XMLELEMTYPE_OTHER = 0x6,};
typedef struct _ACE_HEADER ACE_HEADER;
struct ADOCommand;
typedef struct _AE_CONNREJ AE_CONNREJ;
typedef struct _AE_GENERIC AE_GENERIC;
typedef struct _AE_LOCKOUT AE_LOCKOUT;
typedef struct tagALTTABINFO ALTTABINFO;
typedef struct _AM_DVD_YUV AM_DVD_YUV;
typedef struct am_overlay AM_OVERLAY;
typedef struct _AppBarData APPBARDATA;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA ARRAY_INFO;
typedef void ( *AUXKEYPROC)();
enum AffectEnum {adAffectCurrent = 0x1,adAffectGroup = 0x2,adAffectAll = 0x3,adAffectAllChapters = 0x4,};
typedef struct _AsyncIOReq AsyncIOReq;
typedef struct tagBIND_OPTS2 BIND_OPTS2;
typedef struct tagBITMAPINFO BITMAPINFO;
typedef struct _PUBLICKEYSTRUC BLOBHEADER;
typedef struct tagBOXRESULTS BOXRESULTS;
typedef struct berelement BerElement;
typedef struct tagCABSTRBLOB CABSTRBLOB;
typedef struct tagCACLIPDATA CACLIPDATA;
typedef struct tagCAFILETIME CAFILETIME;
typedef struct tagCALBSTRUCT CALBSTRUCT;
typedef struct calldata_dn CALLDATADN;
enum CALL_STATE {CS_IDLE = 0x0,CS_INPROGRESS = 0x1,CS_CONNECTED = 0x2,CS_DISCONNECTED = 0x3,CS_OFFERING = 0x4,CS_HOLD = 0x5,CS_QUEUED = 0x6,};
typedef struct tagCALPOLESTR CALPOLESTR;
struct CCertAdmin;
typedef struct _CERT_CHAIN CERT_CHAIN;
enum CLUS_FLAGS {CLUS_FLAG_CORE = 0x1,};
typedef void *CMC_buffer;
typedef short CMC_sint16;
typedef int CMC_sint32;
typedef char *CMC_string;
typedef unsigned short CMC_uint16;
typedef unsigned int CMC_uint32;
struct CMimeTypes;
typedef struct _COAUTHINFO COAUTHINFO;
typedef char COLOR_NAME[32];
typedef struct _COMMCONFIG COMMCONFIG;
typedef struct _CONFNOTIFY CONFNOTIFY;
typedef struct _CounterDef COUNTERDEF;
typedef struct tagCSPLATFORM CSPLATFORM;
typedef struct tagCURSORINFO CURSORINFO;
struct ChannelMgr;
struct Conference;
typedef struct ADOConnection Connection;
typedef struct _D3DHVERTEX D3DHVERTEX;
typedef struct _D3DLVERTEX D3DLVERTEX;
typedef struct _D3DRMIMAGE D3DRMIMAGE;
typedef union _7BE17F41E2ABE62BCFC5B0B03F418DA3 DATASOURCE;
typedef struct dbdatetime4 DBDATETIM4;
typedef struct dbdatetime DBDATETIME;
typedef struct tagDBFILETIME DBFILETIME;
enum DBKINDENUM {DBKIND_GUID_NAME = 0x0,DBKIND_GUID_PROPID = 0x1,DBKIND_NAME = 0x2,DBKIND_PGUID_NAME = 0x3,DBKIND_PGUID_PROPID = 0x4,DBKIND_PROPID = 0x5,DBKIND_GUID = 0x6,};
enum DBPARTENUM {DBPART_INVALID = 0x0,DBPART_VALUE = 0x1,DBPART_LENGTH = 0x2,DBPART_STATUS = 0x4,};
typedef struct _98BEB28C79E54824F19FEAA43CA20E4E DBPROCINFO;
enum DBPROPENUM {DBPROP_ABORTPRESERVE = 0x2,DBPROP_ACTIVESESSIONS = 0x3,DBPROP_APPENDONLY = 0xBB,DBPROP_ASYNCTXNABORT = 0xA8,DBPROP_ASYNCTXNCOMMIT = 0x4,DBPROP_AUTH_CACHE_AUTHINFO = 0x5,DBPROP_AUTH_ENCRYPT_PASSWORD = 0x6,DBPROP_AUTH_INTEGRATED = 0x7,DBPROP_AUTH_MASK_PASSWORD = 0x8,DBPROP_AUTH_PASSWORD = 0x9,DBPROP_AUTH_PERSIST_ENCRYPTED = 0xA,DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 0xB,DBPROP_AUTH_USERID = 0xC,DBPROP_BLOCKINGSTORAGEOBJECTS = 0xD,DBPROP_BOOKMARKS = 0xE,DBPROP_BOOKMARKSKIPPED = 0xF,DBPROP_BOOKMARKTYPE = 0x10,DBPROP_BYREFACCESSORS = 0x78,DBPROP_CACHEDEFERRED = 0x11,DBPROP_CANFETCHBACKWARDS = 0x12,DBPROP_CANHOLDROWS = 0x13,DBPROP_CANSCROLLBACKWARDS = 0x15,DBPROP_CATALOGLOCATION = 0x16,DBPROP_CATALOGTERM = 0x17,DBPROP_CATALOGUSAGE = 0x18,DBPROP_CHANGEINSERTEDROWS = 0xBC,DBPROP_COL_AUTOINCREMENT = 0x1A,DBPROP_COL_DEFAULT = 0x1B,DBPROP_COL_DESCRIPTION = 0x1C,DBPROP_COL_FIXEDLENGTH = 0xA7,DBPROP_COL_NULLABLE = 0x1D,DBPROP_COL_PRIMARYKEY = 0x1E,DBPROP_COL_UNIQUE = 0x1F,DBPROP_COLUMNDEFINITION = 0x20,DBPROP_COLUMNRESTRICT = 0x21,DBPROP_COMMANDTIMEOUT = 0x22,DBPROP_COMMITPRESERVE = 0x23,DBPROP_CONCATNULLBEHAVIOR = 0x24,DBPROP_CURRENTCATALOG = 0x25,DBPROP_DATASOURCENAME = 0x26,DBPROP_DATASOURCEREADONLY = 0x27,DBPROP_DBMSNAME = 0x28,DBPROP_DBMSVER = 0x29,DBPROP_DEFERRED = 0x2A,DBPROP_DELAYSTORAGEOBJECTS = 0x2B,DBPROP_DSOTHREADMODEL = 0xA9,DBPROP_GROUPBY = 0x2C,DBPROP_HETEROGENEOUSTABLES = 0x2D,DBPROP_IAccessor = 0x79,DBPROP_IColumnsInfo = 0x7A,DBPROP_IColumnsRowset = 0x7B,DBPROP_IConnectionPointContainer = 0x7C,DBPROP_IConvertType = 0xC2,DBPROP_IRowset = 0x7E,DBPROP_IRowsetChange = 0x7F,DBPROP_IRowsetIdentity = 0x80,DBPROP_IRowsetIndex = 0x9F,DBPROP_IRowsetInfo = 0x81,DBPROP_IRowsetLocate = 0x82,DBPROP_IRowsetResynch = 0x84,DBPROP_IRowsetScroll = 0x85,DBPROP_IRowsetUpdate = 0x86,DBPROP_ISupportErrorInfo = 0x87,DBPROP_ILockBytes = 0x88,DBPROP_ISequentialStream = 0x89,DBPROP_IStorage = 0x8A,DBPROP_IStream = 0x8B,DBPROP_IDENTIFIERCASE = 0x2E,DBPROP_IMMOBILEROWS = 0x2F,DBPROP_INDEX_AUTOUPDATE = 0x30,DBPROP_INDEX_CLUSTERED = 0x31,DBPROP_INDEX_FILLFACTOR = 0x32,DBPROP_INDEX_INITIALSIZE = 0x33,DBPROP_INDEX_NULLCOLLATION = 0x34,DBPROP_INDEX_NULLS = 0x35,DBPROP_INDEX_PRIMARYKEY = 0x36,DBPROP_INDEX_SORTBOOKMARKS = 0x37,DBPROP_INDEX_TEMPINDEX = 0xA3,DBPROP_INDEX_TYPE = 0x38,DBPROP_INDEX_UNIQUE = 0x39,DBPROP_INIT_DATASOURCE = 0x3B,DBPROP_INIT_HWND = 0x3C,DBPROP_INIT_IMPERSONATION_LEVEL = 0x3D,DBPROP_INIT_LCID = 0xBA,DBPROP_INIT_LOCATION = 0x3E,DBPROP_INIT_MODE = 0x3F,DBPROP_INIT_PROMPT = 0x40,DBPROP_INIT_PROTECTION_LEVEL = 0x41,DBPROP_INIT_PROVIDERSTRING = 0xA0,DBPROP_INIT_TIMEOUT = 0x42,DBPROP_LITERALBOOKMARKS = 0x43,DBPROP_LITERALIDENTITY = 0x44,DBPROP_MARSHALLABLE = 0xC5,DBPROP_MAXINDEXSIZE = 0x46,DBPROP_MAXOPENROWS = 0x47,DBPROP_MAXPENDINGROWS = 0x48,DBPROP_MAXROWS = 0x49,DBPROP_MAXROWSIZE = 0x4A,DBPROP_MAXROWSIZEINCLUDESBLOB = 0x4B,DBPROP_MAXTABLESINSELECT = 0x4C,DBPROP_MAYWRITECOLUMN = 0x4D,DBPROP_MEMORYUSAGE = 0x4E,DBPROP_MULTIPLEPARAMSETS = 0xBF,DBPROP_MULTIPLERESULTS = 0xC4,DBPROP_MULTIPLESTORAGEOBJECTS = 0x50,DBPROP_MULTITABLEUPDATE = 0x51,DBPROP_NOTIFICATIONGRANULARITY = 0xC6,DBPROP_NOTIFICATIONPHASES = 0x52,DBPROP_NOTIFYCOLUMNSET = 0xAB,DBPROP_NOTIFYROWDELETE = 0xAD,DBPROP_NOTIFYROWFIRSTCHANGE = 0xAE,DBPROP_NOTIFYROWINSERT = 0xAF,DBPROP_NOTIFYROWRESYNCH = 0xB1,DBPROP_NOTIFYROWSETCHANGED = 0xD3,DBPROP_NOTIFYROWSETRELEASE = 0xB2,DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 0xB3,DBPROP_NOTIFYROWUNDOCHANGE = 0xB4,DBPROP_NOTIFYROWUNDODELETE = 0xB5,DBPROP_NOTIFYROWUNDOINSERT = 0xB6,DBPROP_NOTIFYROWUPDATE = 0xB7,DBPROP_NULLCOLLATION = 0x53,DBPROP_OLEOBJECTS = 0x54,DBPROP_ORDERBYCOLUMNSINSELECT = 0x55,DBPROP_ORDEREDBOOKMARKS = 0x56,DBPROP_OTHERINSERT = 0x57,DBPROP_OTHERUPDATEDELETE = 0x58,DBPROP_OUTPUTPARAMETERAVAILABILITY = 0xB8,DBPROP_OWNINSERT = 0x59,DBPROP_OWNUPDATEDELETE = 0x5A,DBPROP_PERSISTENTIDTYPE = 0xB9,DBPROP_PREPAREABORTBEHAVIOR = 0x5B,DBPROP_PREPARECOMMITBEHAVIOR = 0x5C,DBPROP_PROCEDURETERM = 0x5D,DBPROP_PROVIDERNAME = 0x60,DBPROP_PROVIDEROLEDBVER = 0x61,DBPROP_PROVIDERVER = 0x62,DBPROP_QUICKRESTART = 0x63,DBPROP_QUOTEDIDENTIFIERCASE = 0x64,DBPROP_REENTRANTEVENTS = 0x65,DBPROP_REMOVEDELETED = 0x66,DBPROP_REPORTMULTIPLECHANGES = 0x67,DBPROP_RETURNPENDINGINSERTS = 0xBD,DBPROP_ROWRESTRICT = 0x68,DBPROP_ROWSETCONVERSIONSONCOMMAND = 0xC0,DBPROP_ROWTHREADMODEL = 0x69,DBPROP_SCHEMATERM = 0x6A,DBPROP_SCHEMAUSAGE = 0x6B,DBPROP_SERVERCURSOR = 0x6C,DBPROP_SESS_AUTOCOMMITISOLEVELS = 0xBE,DBPROP_SQLSUPPORT = 0x6D,DBPROP_STRONGIDENTITY = 0x77,DBPROP_STRUCTUREDSTORAGE = 0x6F,DBPROP_SUBQUERIES = 0x70,DBPROP_SUPPORTEDTXNDDL = 0xA1,DBPROP_SUPPORTEDTXNISOLEVELS = 0x71,DBPROP_SUPPORTEDTXNISORETAIN = 0x72,DBPROP_TABLETERM = 0x73,DBPROP_TBL_TEMPTABLE = 0x8C,DBPROP_TRANSACTEDOBJECT = 0x74,DBPROP_UPDATABILITY = 0x75,DBPROP_USERNAME = 0x76,};
typedef struct tagDBPROPINFO DBPROPINFO;
enum DBSEEKENUM {DBSEEK_INVALID = 0x0,DBSEEK_FIRSTEQ = 0x1,DBSEEK_LASTEQ = 0x2,DBSEEK_GE = 0x4,DBSEEK_GT = 0x8,DBSEEK_LE = 0x10,DBSEEK_LT = 0x20,};
typedef short DBSMALLINT;
enum DBSORTENUM {DBSORT_ASCENDING = 0x0,DBSORT_DESCENDING = 0x1,};
typedef struct tagDBSORTINFO DBSORTINFO;
enum DBTYPEENUM {DBTYPE_EMPTY = 0x0,DBTYPE_NULL = 0x1,DBTYPE_I2 = 0x2,DBTYPE_I4 = 0x3,DBTYPE_R4 = 0x4,DBTYPE_R8 = 0x5,DBTYPE_CY = 0x6,DBTYPE_DATE = 0x7,DBTYPE_BSTR = 0x8,DBTYPE_IDISPATCH = 0x9,DBTYPE_ERROR = 0xA,DBTYPE_BOOL = 0xB,DBTYPE_VARIANT = 0xC,DBTYPE_IUNKNOWN = 0xD,DBTYPE_DECIMAL = 0xE,DBTYPE_UI1 = 0x11,DBTYPE_ARRAY = 0x2000,DBTYPE_BYREF = 0x4000,DBTYPE_I1 = 0x10,DBTYPE_UI2 = 0x12,DBTYPE_UI4 = 0x13,DBTYPE_I8 = 0x14,DBTYPE_UI8 = 0x15,DBTYPE_GUID = 0x48,DBTYPE_VECTOR = 0x1000,DBTYPE_RESERVED = 0x8000,DBTYPE_BYTES = 0x80,DBTYPE_STR = 0x81,DBTYPE_WSTR = 0x82,DBTYPE_NUMERIC = 0x83,DBTYPE_UDT = 0x84,DBTYPE_DBDATE = 0x85,DBTYPE_DBTIME = 0x86,DBTYPE_DBTIMESTAMP = 0x87,};
typedef struct dbvarychar DBVARYCHAR;
typedef struct tagDB_NUMERIC DB_NUMERIC;
typedef struct _DDBLTBATCH DDBLTBATCH;
typedef struct _DDCAPS_DX3 DDCAPS_DX3;
typedef struct _DDCOLORKEY DDCOLORKEY;
typedef struct deallocate DEALLOCATE;
typedef struct _DFS_INFO_1 DFS_INFO_1;
typedef struct _DFS_INFO_2 DFS_INFO_2;
typedef struct _DFS_INFO_3 DFS_INFO_3;
typedef struct tagDIBSECTION DIBSECTION;
typedef struct tagDISPPARAMS DISPPARAMS;
typedef struct dnet_accent DNETACCENT;
typedef struct _66EE77830E735B4EF58A5F76D8ADF8E5 DPMSG_CHAT;
typedef struct tagDROPSTRUCT DROPSTRUCT;
typedef struct _DS3DBUFFER DS3DBUFFER;
typedef struct _DTBLBUTTON DTBLBUTTON;
typedef struct _DVD_REGION DVD_REGION;
typedef struct _DWORD_BLOB DWORD_BLOB;
struct DataSource {struct DataSourceVtbl *lpVtbl;};
struct Dimensions {struct DimensionsVtbl *lpVtbl;};
typedef struct _editstream EDITSTREAM;
typedef struct tagEMRELLIPSE EMRELLIPSE;
typedef struct tagABORTPATH EMRENDPATH;
typedef struct tagEMRFILLRGN EMRFILLRGN;
typedef struct tagEMRMASKBLT EMRMASKBLT;
typedef struct tagEMRPOLYLINE EMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH EMRSETROP2;
typedef struct tagEXT_BUTTON EXT_BUTTON;
typedef struct tagFILTERKEYS FILTERKEYS;
typedef struct _F4E2A3B3EF6C4FAA4EC9C87B4A54D83E FVSHOWINFO;
typedef int FXPT2DOT30;
struct FolderItem {struct FolderItemVtbl *lpVtbl;};
typedef struct _A796FD32A2A58348CC7057E9D7EB520D GBGETTEXTA;
typedef struct _2DFBDCCDB67179C152E4440B255C036F GBGETTEXTW;
typedef struct _GDI_OBJECT GDI_OBJECT;
struct GLUquadric;
typedef unsigned int GLbitfield;
typedef struct gw_overlay GW_OVERLAY;
typedef struct HACMDRIVER__ *HACMDRIVER;
typedef struct HACMSTREAM__ *HACMSTREAM;
typedef void *HCERTSTORE;
typedef unsigned int HCRYPTHASH;
typedef unsigned int HCRYPTPROV;
struct HDDEDATA__ {int unused;};
struct HDRVCALL__ {int unused;};
struct HDRVLINE__ {int unused;};
typedef struct tagHEAPLIST32 HEAPLIST32;
typedef struct _HGROUPENUM *HGROUPENUM;
typedef struct _IMAGELIST *HIMAGELIST;
struct HLINEAPP__ {int unused;};
struct HMIDIOUT__ {int unused;};
struct HMONITOR__ {int unused;};
struct HPALETTE__ {int unused;};
struct HPENDATA__ {int unused;};
struct HRASCONN__ {int unused;};
struct HRECHOOK__ {int unused;};
typedef unsigned int HSEMAPHORE;
typedef  struct HTAPIPHONE__ *HTAPIPHONE;
struct HTMLDialog;
struct HTMLIFrame;
struct HTMLScreen;
struct HWAVEOUT__ {int unused;};
struct IADsDomain {struct IADsDomainVtbl *lpVtbl;};
struct IADsSyntax {struct IADsSyntaxVtbl *lpVtbl;};
struct IAMTVAudio {struct IAMTVAudioVtbl *lpVtbl;};
struct IAMTVTuner {struct IAMTVTunerVtbl *lpVtbl;};
struct IAVIStream {struct IAVIStreamVtbl *lpVtbl;};
struct IAudioData {struct IAudioDataVtbl *lpVtbl;};
typedef struct _9223FF9C4398B5998F8B0B2319A44BF2 ICCOMPRESS;
struct ICSSFilter {struct ICSSFilterVtbl *lpVtbl;};
struct ICertAdmin {struct ICertAdminVtbl *lpVtbl;};
struct ICopyHookA {struct ICopyHookAVtbl *lpVtbl;};
struct ICopyHookW {struct ICopyHookWVtbl *lpVtbl;};
struct ICustomDoc {struct ICustomDocVtbl *lpVtbl;};
struct IDirect3D2 {struct IDirect3D2Vtbl *lpVtbl;};
struct IDispError {struct IDispErrorVtbl *lpVtbl;};
struct IEnumClass {struct IEnumClassVtbl *lpVtbl;};
struct IEnumNames {struct IEnumNamesVtbl *lpVtbl;};
struct IEnumSSRCs {struct IEnumSSRCsVtbl *lpVtbl;};
struct IErrorInfo {struct IErrorInfoVtbl *lpVtbl;};
struct IHTMLStyle {struct IHTMLStyleVtbl *lpVtbl;};
struct IHTMLTable {struct IHTMLTableVtbl *lpVtbl;};
struct IHlinkSite {struct IHlinkSiteVtbl *lpVtbl;};
struct ILockBytes {struct ILockBytesVtbl *lpVtbl;};
typedef struct _IMAGE_NOTE IMAGE_NOTE;
struct IMAPITable {struct IMAPITableVtbl *lpVtbl;};
struct IMDDataset {struct IMDDatasetVtbl *lpVtbl;};
struct IMallocSpy {struct IMallocSpyVtbl *lpVtbl;};
struct IMprUIHost {struct IMprUIHostVtbl *lpVtbl;};
struct IMtsEvents {struct IMtsEventsVtbl *lpVtbl;};
typedef struct _INFCONTEXT INFCONTEXT;
typedef struct tagINKINGINFO INKINGINFO;
typedef struct _tagIOSPACE_EX IOSPACE_EX;
struct IOleCache2 {struct IOleCache2Vtbl *lpVtbl;};
struct IOleObject {struct IOleObjectVtbl *lpVtbl;};
struct IOleWindow {struct IOleWindowVtbl *lpVtbl;};
struct IOmHistory {struct IOmHistoryVtbl *lpVtbl;};
typedef struct _IP_NETWORK IP_NETWORK;
struct IProfAdmin {struct IProfAdminVtbl *lpVtbl;};
struct IQueryInfo {struct IQueryInfoVtbl *lpVtbl;};
struct IRTPStream {struct IRTPStreamVtbl *lpVtbl;};
struct IShellIcon {struct IShellIconVtbl *lpVtbl;};
struct IShellView {struct IShellViewVtbl *lpVtbl;};
struct ISurrogate {struct ISurrogateVtbl *lpVtbl;};
struct ITCallInfo {struct ITCallInfoVtbl *lpVtbl;};
typedef struct _ITEMIDLIST ITEMIDLIST;
struct ITTerminal {struct ITTerminalVtbl *lpVtbl;};
struct ITableData {struct ITableDataVtbl *lpVtbl;};
struct ITrackFile {struct ITrackFileVtbl *lpVtbl;};
struct ITypeInfo2 {struct ITypeInfo2Vtbl *lpVtbl;};
typedef float JAVA_FLOAT;
typedef struct _JOB_INFO_3 JOB_INFO_3;
typedef struct tagKAGGETDIAG KAGGETDIAG;
typedef struct tagKAGREQDIAG KAGREQDIAG;
typedef struct tagKEYBDINPUT KEYBDINPUT;
typedef struct _CA0DACF90AABDE33CADDF7416F0C17F2 KSINTERVAL;
typedef struct _D611436986C6FEF0F654B123D787805F KSPRIORITY;
typedef struct _BC43068C8DCBA7D8F8979D82055549DE KSTOPOLOGY;
typedef struct ldapsearch LDAPSearch;
typedef struct linkinfo_dn LINKINFODN;
typedef struct _LIST_ENTRY LIST_ENTRY;
typedef union _LLC_BUFFER LLC_BUFFER;
typedef struct tagLOGPALETTE LOGPALETTE;
typedef struct _ABCFLOAT *LPABCFLOAT;
typedef struct _ADRENTRY *LPADRENTRY;
typedef struct _adsvalue *LPADSVALUE;
typedef struct _AMVPSIZE *LPAMVPSIZE;
typedef struct tagAUXCAPSA *LPAUXCAPSA;
typedef struct tagAUXCAPSW *LPAUXCAPSW;
typedef struct BDN_RSVP *LPBDN_RSVP;
typedef IBindHost *LPBINDHOST;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct tagCCSTYLEA *LPCCSTYLEA;
typedef struct tagCCSTYLEW *LPCCSTYLEW;
typedef struct _COLORMAP *LPCOLORMAP;
typedef struct _COMMPROP *LPCOMMPROP;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef struct _D3DLIGHT *LPD3DLIGHT;
typedef struct _D3DPOINT *LPD3DPOINT;
typedef struct _D3DRMBOX *LPD3DRMBOX;
typedef struct _D3DRMRAY *LPD3DRMRAY;
typedef struct _D3DSTATE *LPD3DSTATE;
typedef struct _D3DSTATS *LPD3DSTATS;
typedef float *LPD3DVALUE;
typedef struct _devicemodeA *LPDEVMODEA;
typedef struct _devicemodeW *LPDEVMODEW;
typedef struct DIEFFECT *LPDIEFFECT;
typedef struct IDirect3D *LPDIRECT3D;
typedef IDispatch *LPDISPATCH;
typedef struct IDistList *LPDISTLIST;
typedef struct dn_naddr *( *LPDNETADDR)( char *);
typedef char *( *LPDNETHTOA)( struct dn_naddr *);
typedef char *( *LPDNETNTOA)( struct dn_naddr *);
typedef struct _DOCINFOA *LPDOCINFOA;
typedef struct _DOCINFOW *LPDOCINFOW;
typedef struct _DSCBCAPS *LPDSCBCAPS;
typedef struct _DTBLEDIT *LPDTBLEDIT;
typedef struct _DTBLPAGE *LPDTBLPAGE;
typedef struct tagELEMDESC *LPELEMDESC;
typedef IEnumGUID *LPENUMGUID;
typedef IErrorLog *LPERRORLOG;
typedef struct tagEVENTMSG *LPEVENTMSG;
typedef struct _FILETIME *LPFILETIME;
typedef struct _flowspec *LPFLOWSPEC;
typedef struct tagFONTDESC *LPFONTDESC;
typedef IFontDisp *LPFONTDISP;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef struct _flaglist *LPFlagList;
typedef struct _27EED8F145487CB1BEE00199BFE0C5C4 *LPGBGETINT;
typedef struct _D421F65DCC699F7A3DD5C4DC8797164D *LPGBSETINT;
typedef struct tagGLYPHSET *LPGLYPHSET;
typedef struct _HD_LAYOUT *LPHDLAYOUT;
typedef struct tagHELPINFO *LPHELPINFO;
typedef struct in_addr6 *LPIN6_ADDR;
typedef struct tagINTERVAL *LPINTERVAL;
typedef IP_HEADER *LPIPHEADER;
typedef struct tagJOYCAPSA *LPJOYCAPSA;
typedef struct tagJOYCAPSW *LPJOYCAPSW;
typedef struct tagLINEINFO *LPLINEINFO;
typedef struct tagLOGBRUSH *LPLOGBRUSH;
typedef struct tagLOGFONTA *LPLOGFONTA;
typedef struct tagLOGFONTW *LPLOGFONTW;
typedef struct IMailUser *LPMAILUSER;
typedef struct IMAPIForm *LPMAPIFORM;
typedef struct IMAPIProp *LPMAPIPROP;
typedef struct _4F60ECD4258FF26BBA8BD131C8AAF615 *LPMAPIVERB;
typedef struct tagMENUINFO *LPMENUINFO;
typedef IMimeInfo *LPMIMEINFO;
typedef struct _MMCKINFO *LPMMCKINFO;
typedef struct _MMIOINFO *LPMMIOINFO;
typedef struct _NM_UPDOWN *LPNMUPDOWN;
typedef struct nodeent_f *LPNODEENTF;
typedef struct _328060AA9F47934214406E09F9D6352A *LPNOTIFKEY;
typedef struct _NS_INFOA *LPNS_INFOA;
typedef struct _NS_INFOW *LPNS_INFOW;
typedef struct _OFSTRUCT *LPOFSTRUCT;
typedef IOleCache *LPOLECACHE;
typedef struct tagPELARRAY *LPPELARRAY;
typedef struct tagPICTDESC *LPPICTDESC;
typedef struct IProfSect *LPPROFSECT;
typedef struct IPropData *LPPROPDATA;
typedef struct protoent *LPPROTOENT;
typedef struct _rifflist *LPRIFFLIST;
typedef struct _RIP_INFO *LPRIP_INFO;
typedef struct _ROWENTRY *LPROWENTRY;
typedef struct sockaddr *LPSOCKADDR;
typedef struct _StrEntry *LPSTRENTRY;
typedef struct _StrTable *LPSTRTABLE;
typedef struct tagTARGINFO *LPTARGINFO;
typedef struct _TBBUTTON *LPTBBUTTON;
typedef struct timecaps_tag *LPTIMECAPS;
typedef struct tagTLIBATTR *LPTLIBATTR;
typedef struct tagTVSORTCB *LPTVSORTCB;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef ITypeComp *LPTYPECOMP;
typedef ITypeInfo *LPTYPEINFO;
typedef ITypeLib2 *LPTYPELIB2;
typedef struct videohdr_tag *LPVIDEOHDR;
typedef struct tagWCSVDATA *LPWCSVDATA;
typedef struct _LSA_STRING LSA_STRING;
typedef struct tagLVBKIMAGEA LVBKIMAGEA;
typedef struct tagLVBKIMAGEW LVBKIMAGEW;
enum MACRO_AAL5 {AAL5_MODE_MESSAGE = 0x1,AAL5_MODE_STREAMING = 0x2,AAL5_SSCS_NULL = 0x0,AAL5_SSCS_SSCOP_ASSURED = 0x1,AAL5_SSCS_SSCOP_NON_ASSURED = 0x2,AAL5_SSCS_FRAME_RELAY = 0x4,};
enum MACRO_ADDL {ADDL_FUNC = 0x0,ADDLV_FUNC = 0x40,S4ADDL_FUNC = 0x2,S8ADDL_FUNC = 0x12,ADDQ_FUNC = 0x20,ADDQV_FUNC = 0x60,S4ADDQ_FUNC = 0x22,S8ADDQ_FUNC = 0x32,SUBL_FUNC = 0x9,SUBLV_FUNC = 0x49,S4SUBL_FUNC = 0xB,S8SUBL_FUNC = 0x1B,SUBQ_FUNC = 0x29,SUBQV_FUNC = 0x69,S4SUBQ_FUNC = 0x2B,S8SUBQ_FUNC = 0x3B,CMPEQ_FUNC = 0x2D,CMPLT_FUNC = 0x4D,CMPLE_FUNC = 0x6D,CMPULT_FUNC = 0x1D,CMPULE_FUNC = 0x3D,CMPBGE_FUNC = 0xF,AND_FUNC = 0x0,BIC_FUNC = 0x8,BIS_FUNC = 0x20,EQV_FUNC = 0x48,ORNOT_FUNC = 0x28,XOR_FUNC = 0x40,CMOVEQ_FUNC = 0x24,CMOVGE_FUNC = 0x46,CMOVGT_FUNC = 0x66,CMOVLBC_FUNC = 0x16,CMOVLBS_FUNC = 0x14,CMOVLE_FUNC = 0x64,CMOVLT_FUNC = 0x44,CMOVNE_FUNC = 0x26,SLL_FUNC = 0x39,SRL_FUNC = 0x34,SRA_FUNC = 0x3C,EXTBL_FUNC = 0x6,EXTWL_FUNC = 0x16,EXTLL_FUNC = 0x26,EXTQL_FUNC = 0x36,EXTWH_FUNC = 0x5A,EXTLH_FUNC = 0x6A,EXTQH_FUNC = 0x7A,INSBL_FUNC = 0xB,INSWL_FUNC = 0x1B,INSLL_FUNC = 0x2B,INSQL_FUNC = 0x3B,INSWH_FUNC = 0x57,INSLH_FUNC = 0x67,INSQH_FUNC = 0x77,MSKBL_FUNC = 0x2,MSKWL_FUNC = 0x12,MSKLL_FUNC = 0x22,MSKQL_FUNC = 0x32,MSKWH_FUNC = 0x52,MSKLH_FUNC = 0x62,MSKQH_FUNC = 0x72,ZAP_FUNC = 0x30,ZAPNOT_FUNC = 0x31,MULL_FUNC = 0x0,MULLV_FUNC = 0x40,MULQ_FUNC = 0x20,MULQV_FUNC = 0x60,UMULH_FUNC = 0x30,SEXTB_FUNC = 0x0,SEXTW_FUNC = 0x1,CVTLQ_FUNC = 0x10,CPYS_FUNC = 0x20,CPYSN_FUNC = 0x21,CPYSE_FUNC = 0x22,MT_FPCR_FUNC = 0x24,MF_FPCR_FUNC = 0x25,FCMOVEQ_FUNC = 0x2A,FCMOVNE_FUNC = 0x2B,FCMOVLT_FUNC = 0x2C,FCMOVGE_FUNC = 0x2D,FCMOVLE_FUNC = 0x2E,FCMOVGT_FUNC = 0x2F,CVTQL_FUNC = 0x30,CVTQLV_FUNC = 0x130,CVTQLSV_FUNC = 0x530,};
enum MACRO_ADDR {ADDR_ANY = 0,};
enum MACRO_ADDS {ADDS_FUNC = 0x0,SUBS_FUNC = 0x1,MULS_FUNC = 0x2,DIVS_FUNC = 0x3,ADDT_FUNC = 0x20,SUBT_FUNC = 0x21,MULT_FUNC = 0x22,DIVT_FUNC = 0x23,CMPTUN_FUNC = 0x24,CMPTEQ_FUNC = 0x25,CMPTLT_FUNC = 0x26,CMPTLE_FUNC = 0x27,CVTTS_FUNC = 0x2C,CVTTQ_FUNC = 0x2F,CVTQS_FUNC = 0x3C,CVTQT_FUNC = 0x3E,CVTST_FUNC = 0x2AC,CVTST_S_FUNC = 0x6AC,ADDF_FUNC = 0x0,CVTDG_FUNC = 0x1E,ADDG_FUNC = 0x20,CMPGEQ_FUNC = 0x25,CMPGLT_FUNC = 0x26,CMPGLE_FUNC = 0x27,CVTGF_FUNC = 0x2C,CVTGD_FUNC = 0x2D,CVTQF_FUNC = 0x3C,CVTQG_FUNC = 0x3E,DIVF_FUNC = 0x3,DIVG_FUNC = 0x23,MULF_FUNC = 0x2,MULG_FUNC = 0x22,SUBF_FUNC = 0x1,SUBG_FUNC = 0x21,CVTGQ_FUNC = 0xAF,};
enum MACRO_ADSI {ADSI_DIALECT_LDAP = 0x0,ADSI_DIALECT_SQL = 0x1,};
enum MACRO_AFSR {AFSR_RESTORE = 1,AFSR_BACKNEW = 2,AFSR_NODELETENEW = 4,AFSR_NOMESSAGES = 8,AFSR_NOPROGRESS = 16,AFSR_UPDREFCNT = 512,AFSR_USEREFCNT = 1024,AFSR_EXTRAINCREFCNT = 2048,};
enum MACRO_AFTP {AFTP_ASCII = 0,AFTP_BINARY = 1,AFTP_EBCDIC = 2,AFTP_DEFAULT_DATA_TYPE = 3,AFTP_OLDDATE = 0,AFTP_NEWDATE = 1,AFTP_DETAIL_RC = 1,AFTP_DETAIL_SECOND = 2,AFTP_DETAIL_LOG = 4,AFTP_DETAIL_INFO = 8,AFTP_DETAIL_ALL = 15,AFTP_FILE = 1,AFTP_DIRECTORY = 2,AFTP_ALL_FILES = 3,AFTP_NATIVE_FILENAMES = 0,AFTP_NATIVE_ATTRIBUTES = 1,AFTP_RC_OK = 0,AFTP_RC_COMM_FAIL_NO_RETRY = 1,AFTP_RC_COMM_FAIL_RETRY = 2,AFTP_RC_COMM_CONFIG_LOCAL = 3,AFTP_RC_COMM_CONFIG_REMOTE = 4,AFTP_RC_SECURITY_NOT_VALID = 5,AFTP_RC_FAIL_INPUT_ERROR = 6,AFTP_RC_FAIL_RETRY = 7,AFTP_RC_FAIL_NO_RETRY = 8,AFTP_RC_FAIL_FATAL = 9,AFTP_RC_PROGRAM_INTERNAL_ERROR = 10,AFTP_RC_PARAMETER_CHECK = 11,AFTP_RC_HANDLE_NOT_VALID = 12,AFTP_RC_STATE_CHECK = 13,AFTP_RC_BUFFER_TOO_SMALL = 14,AFTP_DEFAULT_RECORD_FORMAT = 0,AFTP_V = 1,AFTP_VA = 2,AFTP_VB = 3,AFTP_VM = 4,AFTP_VS = 5,AFTP_VBA = 6,AFTP_VBM = 7,AFTP_VBS = 8,AFTP_VSA = 9,AFTP_VSM = 10,AFTP_VBSA = 11,AFTP_VBSM = 12,AFTP_F = 13,AFTP_FA = 14,AFTP_FB = 15,AFTP_FM = 16,AFTP_FBA = 17,AFTP_FBM = 18,AFTP_FBS = 19,AFTP_FBSM = 20,AFTP_FBSA = 21,AFTP_U = 22,AFTP_UA = 23,AFTP_UM = 24,AFTP_SECURITY_NONE = 0,AFTP_SECURITY_SAME = 1,AFTP_SECURITY_PROGRAM = 2,AFTP_LVL_NO_TRACING = 0,AFTP_LVL_FAILURES = 10,AFTP_LVL_API = 20,AFTP_LVL_MODULE = 30,AFTP_LVL_FUNCTION = 40,AFTP_LVL_IO_OPEN_CLOSE = 50,AFTP_LVL_LINE_FLOW = 100,AFTP_LVL_IO_READ_WRITE = 110,AFTP_LVL_STATUS_DUMP = 120,AFTP_LVL_VARIABLE = 130,AFTP_LVL_LOCATION = 140,AFTP_LVL_DATA_TRACE = 170,AFTP_LVL_LOOPLOC = 200,AFTP_MAX_TRACE_LVL = 200,AFTP_REPLACE = 0,AFTP_APPEND = 1,AFTP_NOREPLACE = 2,AFTP_STOREUNIQUE = 3,AFTP_FILE_NAME_SIZE = 512,AFTP_FQLU_NAME_SIZE = 64,AFTP_MODE_NAME_SIZE = 8,AFTP_PASSWORD_SIZE = 10,AFTP_TP_NAME_SIZE = 64,AFTP_USERID_SIZE = 10,AFTP_MESSAGE_SIZE = 2048,AFTP_DATA_TYPE_SIZE = 64,AFTP_DATE_MODE_SIZE = 64,AFTP_RECORD_FORMAT_SIZE = 64,AFTP_WRITE_MODE_SIZE = 64,AFTP_SYSTEM_INFO_SIZE = 512,};
enum MACRO_ANSI {ANSI_NULL = 0,UNICODE_NULL = 0,};
enum MACRO_APPC {APPC_CFG_SUCCESS = 0x1000,APPC_CFG_ERROR = 0x2000,APPC_CFG_PENDING = 0xFFFF,APPC_CFG_SUCCESS_NO_DEFAULT_REMOTE = 0x1001,APPC_CFG_SUCCESS_DEFAULT_REMOTE = 0x1002,APPC_CFG_ERROR_NO_DEFAULT_LOCAL_LU = 0x2001,APPC_CFG_ERROR_BAD_LOCAL_LU = 0x2002,APPC_CFG_ERROR_GENERAL_FAILURE = 0x2003,APPC_CFG_ERROR_INVALID_HWND = 0x2004,APPC_CFG_ERROR_BAD_POINTER = 0x2005,APPC_CFG_ERROR_TOO_MANY_REQUESTS = 0x2006,APPC_CFG_ERROR_NO_APPC_INIT = 0x2007,APPC_CFG_ERROR_UNCLEAR_COMPLETION_MODE = 0x2008,};
enum MACRO_ARSR {ARSR_RESTORE = 1,ARSR_NOMESSAGES = 8,ARSR_REGSECTION = 128,};
enum MACRO_ATTR {ATTR_INPUT = 0x0,ATTR_TARGET_CONVERTED = 0x1,ATTR_CONVERTED = 0x2,ATTR_TARGET_NOTCONVERTED = 0x3,ATTR_INPUT_ERROR = 0x4,ATTR_FIXEDCONVERTED = 0x5,};
enum MACRO_AUTH {AUTH_REQ_ALLOW_FORWARDABLE = 0x1,AUTH_REQ_ALLOW_PROXIABLE = 0x2,AUTH_REQ_ALLOW_POSTDATE = 0x4,AUTH_REQ_ALLOW_RENEWABLE = 0x8,AUTH_REQ_ALLOW_NOADDRESS = 0x10,AUTH_REQ_ALLOW_ENC_TKT_IN_SKEY = 0x20,AUTH_REQ_ALLOW_VALIDATE = 0x40,AUTH_REQ_VALIDATE_CLIENT = 0x80,AUTH_REQ_OK_AS_DELEGATE = 0x100,};
enum MACRO_AUTO {AUTO_DETECT_PACKET_TYPE = 0xFFFFFFFF,};
enum MACRO_AVIF {AVIF_HASINDEX = 0x10,AVIF_MUSTUSEINDEX = 0x20,AVIF_ISINTERLEAVED = 0x100,AVIF_TRUSTCKTYPE = 0x800,AVIF_WASCAPTUREFILE = 0x10000,AVIF_COPYRIGHTED = 0x20000,};
enum MACRO_BASE {MMSYSERR_BASE = 0,WAVERR_BASE = 32,MIDIERR_BASE = 64,TIMERR_BASE = 96,JOYERR_BASE = 160,MCIERR_BASE = 256,MIXERR_BASE = 1024,};
enum MACRO_BAUD {BAUD_075 = 0x1,BAUD_110 = 0x2,BAUD_134_5 = 0x4,BAUD_150 = 0x8,BAUD_300 = 0x10,BAUD_600 = 0x20,BAUD_1200 = 0x40,BAUD_1800 = 0x80,BAUD_2400 = 0x100,BAUD_4800 = 0x200,BAUD_7200 = 0x400,BAUD_9600 = 0x800,BAUD_14400 = 0x1000,BAUD_19200 = 0x2000,BAUD_38400 = 0x4000,BAUD_56K = 0x8000,BAUD_128K = 0x10000,BAUD_115200 = 0x20000,BAUD_57600 = 0x40000,BAUD_USER = 0x10000000,};
enum MACRO_BCOB {BCOB_A = 0x1,BCOB_C = 0x3,BCOB_X = 0x10,};
enum MACRO_BEIF {BEIF_BOXCROSS = 0x1,};
enum MACRO_BERR {BERR_SUCCESS = 0x0,};
enum MACRO_BESC {BESC_DEFAULT = 0,BESC_ROMANFIXED = 1,BESC_KANJIFIXED = 2,BESC_USERDEFINED = 3,};
enum MACRO_BFFM {BFFM_INITIALIZED = 1,BFFM_SELCHANGED = 2,BFFM_VALIDATEFAILEDA = 3,BFFM_VALIDATEFAILEDW = 4,BFFM_SETSTATUSTEXT = 1124,BFFM_SETSELECTION = 1126,BFFM_VALIDATEFAILED = 3,};
enum MACRO_BHLI {BHLI_ISO = 0x0,BHLI_UserSpecific = 0x1,BHLI_HighLayerProfile = 0x2,BHLI_VendorSpecificAppId = 0x3,};
enum MACRO_BIND {BIND_NO_BOUND_IMPORTS = 0x1,BIND_NO_UPDATE = 0x2,BIND_ALL_IMAGES = 0x4,BIND_CACHE_IMPORT_DLLS = 0x8,};
enum MACRO_BLLI {BLLI_L2_ISO_1745 = 0x1,BLLI_L2_Q921 = 0x2,BLLI_L2_X25L = 0x6,BLLI_L2_X25M = 0x7,BLLI_L2_ELAPB = 0x8,BLLI_L2_HDLC_NRM = 0x9,BLLI_L2_HDLC_ABM = 0xA,BLLI_L2_HDLC_ARM = 0xB,BLLI_L2_LLC = 0xC,BLLI_L2_X75 = 0xD,BLLI_L2_Q922 = 0xE,BLLI_L2_USER_SPECIFIED = 0x10,BLLI_L2_ISO_7776 = 0x11,BLLI_L3_X25 = 0x6,BLLI_L3_ISO_8208 = 0x7,BLLI_L3_X223 = 0x8,BLLI_L3_SIO_8473 = 0x9,BLLI_L3_T70 = 0xA,BLLI_L3_ISO_TR9577 = 0xB,BLLI_L3_USER_SPECIFIED = 0x10,BLLI_L3_IPI_SNAP = 0x80,BLLI_L3_IPI_IP = 0xCC,};
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_BUFF {BUFF_SIZE = 256,TOKEN_STRING_SIZE = 4608,NAME_SIZE = 52,};
enum MACRO_BXDK {BXDK_CELLWIDTH = 32,BXDK_CELLHEIGHT = 32,BXDK_BASEHEIGHT = 28,BXDK_BASEHORZ = 0,BXDK_MIDFROMBASE = 0,BXDK_CUSPHEIGHT = 28,BXDK_ENDCUSPHEIGHT = 10,};
enum MACRO_CADV {CADV_LATEACK = 0xFFFF,};
enum MACRO_CALG {CALG_MD2 = 32769,CALG_MD4 = 32770,CALG_MD5 = 32771,CALG_SHA = 32772,CALG_SHA1 = 32772,CALG_MAC = 32773,CALG_RSA_SIGN = 9216,CALG_DSS_SIGN = 8704,CALG_RSA_KEYX = 41984,CALG_DES = 26113,CALG_3DES_112 = 26121,CALG_3DES = 26115,CALG_RC2 = 26114,CALG_RC4 = 26625,CALG_SEAL = 26626,CALG_DH_SF = 43521,CALG_DH_EPHEM = 43522,CALG_AGREEDKEY_ANY = 43523,CALG_KEA_KEYX = 43524,CALG_HUGHES_MD5 = 40963,CALG_SKIPJACK = 26122,CALG_TEK = 26123,CALG_CYLINK_MEK = 26124,CALG_SSL3_SHAMD5 = 32776,CALG_SSL3_MASTER = 19457,CALG_SCHANNEL_MASTER_HASH = 19458,CALG_SCHANNEL_MAC_KEY = 19459,CALG_SCHANNEL_ENC_KEY = 19463,CALG_PCT1_MASTER = 19460,CALG_SSL2_MASTER = 19461,CALG_TLS1_MASTER = 19462,CALG_RC5 = 26125,CALG_HMAC = 32777,};
enum MACRO_CALL {CALL_PENDING = 0x2,};
enum MACRO_CBEM {CBEM_INSERTITEM = 1025,CBEM_SETITEM = 1029,CBEM_GETITEM = 1028,};
enum MACRO_CBEN {CBEN_FIRST = -800,CBEN_LAST = -830,};
enum MACRO_CBES {CBES_EX_NOEDITIMAGE = 0x1,CBES_EX_NOEDITIMAGEINDENT = 0x2,CBES_EX_PATHWORDBREAKPROC = 0x4,CBES_EX_NOSIZELIMIT = 0x8,CBES_EX_CASESENSITIVE = 0x10,};
enum MACRO_CBID {CBID = 20,};
enum MACRO_CDDS {CDDS_PREPAINT = 0x1,CDDS_POSTPAINT = 0x2,CDDS_PREERASE = 0x3,CDDS_POSTERASE = 0x4,CDDS_ITEM = 0x10000,CDDS_ITEMPREPAINT = 0x10001,CDDS_ITEMPOSTPAINT = 0x10002,CDDS_ITEMPREERASE = 0x10003,CDDS_ITEMPOSTERASE = 0x10004,CDDS_SUBITEM = 0x20000,};
enum MACRO_CDEF {CDEF_CLASS_DEFAULT = 0x1,CDEF_BYPASS_CLASS_MANAGER = 0x2,};
enum MACRO_CDIS {CDIS_SELECTED = 0x1,CDIS_GRAYED = 0x2,CDIS_DISABLED = 0x4,CDIS_CHECKED = 0x8,CDIS_FOCUS = 0x10,CDIS_DEFAULT = 0x20,CDIS_HOT = 0x40,CDIS_MARKED = 0x80,CDIS_INDETERMINATE = 0x100,};
enum MACRO_CDRF {CDRF_DODEFAULT = 0x0,CDRF_NEWFONT = 0x2,CDRF_SKIPDEFAULT = 0x4,CDRF_NOTIFYPOSTPAINT = 0x10,CDRF_NOTIFYITEMDRAW = 0x20,CDRF_NOTIFYSUBITEMDRAW = 0x20,CDRF_NOTIFYPOSTERASE = 0x40,};
enum MACRO_CERT {CERT_RDN_ANY_TYPE = 0,CERT_RDN_ENCODED_BLOB = 1,CERT_RDN_OCTET_STRING = 2,CERT_RDN_NUMERIC_STRING = 3,CERT_RDN_PRINTABLE_STRING = 4,CERT_RDN_TELETEX_STRING = 5,CERT_RDN_T61_STRING = 5,CERT_RDN_VIDEOTEX_STRING = 6,CERT_RDN_IA5_STRING = 7,CERT_RDN_GRAPHIC_STRING = 8,CERT_RDN_VISIBLE_STRING = 9,CERT_RDN_ISO646_STRING = 9,CERT_RDN_GENERAL_STRING = 10,CERT_RDN_UNIVERSAL_STRING = 11,CERT_RDN_INT4_STRING = 11,CERT_RDN_BMP_STRING = 12,CERT_RDN_UNICODE_STRING = 12,CERT_V1 = 0,CERT_V2 = 1,CERT_V3 = 2,CERT_INFO_VERSION_FLAG = 1,CERT_INFO_SERIAL_NUMBER_FLAG = 2,CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3,CERT_INFO_ISSUER_FLAG = 4,CERT_INFO_NOT_BEFORE_FLAG = 5,CERT_INFO_NOT_AFTER_FLAG = 6,CERT_INFO_SUBJECT_FLAG = 7,CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8,CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9,CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10,CERT_INFO_EXTENSION_FLAG = 11,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CLIP {CLIP_DEFAULT_PRECIS = 0,CLIP_CHARACTER_PRECIS = 1,CLIP_STROKE_PRECIS = 2,CLIP_MASK = 15,CLIP_LH_ANGLES = 16,CLIP_TT_ALWAYS = 32,CLIP_EMBEDDED = 128,};
enum MACRO_CLUS {CLUS_ACCESS_ANY = 0,CLUS_ACCESS_READ = 1,CLUS_ACCESS_WRITE = 2,CLUS_NO_MODIFY = 0,CLUS_MODIFY = 1,CLUS_NOT_GLOBAL = 0,CLUS_GLOBAL = 1,};
enum MACRO_CMIC {CMIC_MASK_HOTKEY = 32,CMIC_MASK_ICON = 16,CMIC_MASK_FLAG_NO_UI = 1024,CMIC_MASK_UNICODE = 16384,CMIC_MASK_NO_CONSOLE = 32768,CMIC_MASK_ASYNCOK = 1048576,CMIC_MASK_PTINVOKE = 536870912,};
enum MACRO_CMPD {CMPD_COMPRESS = 0x1,CMPD_DECOMPRESS = 0x2,};
enum MACRO_CMSG {CMSG_DATA = 1,CMSG_SIGNED = 2,CMSG_ENVELOPED = 3,CMSG_SIGNED_AND_ENVELOPED = 4,CMSG_HASHED = 5,CMSG_ENCRYPTED = 6,CMSG_ALL_FLAGS = -1,CMSG_DATA_FLAG = 2,CMSG_SIGNED_FLAG = 4,CMSG_ENVELOPED_FLAG = 8,CMSG_SIGNED_AND_ENVELOPED_FLAG = 16,CMSG_HASHED_FLAG = 32,CMSG_ENCRYPTED_FLAG = 64,CMSG_INDEFINITE_LENGTH = -1,CMSG_BARE_CONTENT_FLAG = 1,CMSG_LENGTH_ONLY_FLAG = 2,CMSG_DETACHED_FLAG = 4,CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8,CMSG_CONTENTS_OCTETS_FLAG = 16,CMSG_MAX_LENGTH_FLAG = 32,CMSG_CTRL_VERIFY_SIGNATURE = 1,CMSG_CTRL_DECRYPT = 2,CMSG_CTRL_VERIFY_HASH = 5,CMSG_CTRL_ADD_SIGNER = 6,CMSG_CTRL_DEL_SIGNER = 7,CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8,CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9,CMSG_CTRL_ADD_CERT = 10,CMSG_CTRL_DEL_CERT = 11,CMSG_CTRL_ADD_CRL = 12,CMSG_CTRL_DEL_CRL = 13,CMSG_TYPE_PARAM = 1,CMSG_CONTENT_PARAM = 2,CMSG_BARE_CONTENT_PARAM = 3,CMSG_INNER_CONTENT_TYPE_PARAM = 4,CMSG_SIGNER_COUNT_PARAM = 5,CMSG_SIGNER_INFO_PARAM = 6,CMSG_SIGNER_CERT_INFO_PARAM = 7,CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8,CMSG_SIGNER_AUTH_ATTR_PARAM = 9,CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10,CMSG_CERT_COUNT_PARAM = 11,CMSG_CERT_PARAM = 12,CMSG_CRL_COUNT_PARAM = 13,CMSG_CRL_PARAM = 14,CMSG_ENVELOPE_ALGORITHM_PARAM = 15,CMSG_RECIPIENT_COUNT_PARAM = 17,CMSG_RECIPIENT_INDEX_PARAM = 18,CMSG_RECIPIENT_INFO_PARAM = 19,CMSG_HASH_ALGORITHM_PARAM = 20,CMSG_HASH_DATA_PARAM = 21,CMSG_COMPUTED_HASH_PARAM = 22,CMSG_ENCRYPT_PARAM = 26,CMSG_ENCRYPTED_DIGEST = 27,CMSG_ENCODED_SIGNER = 28,CMSG_ENCODED_MESSAGE = 29,};
enum MACRO_COMP {COMP_TYPE_HTMLDOC = 0,COMP_TYPE_PICTURE = 1,COMP_TYPE_WEBSITE = 2,COMP_TYPE_CONTROL = 3,COMP_TYPE_CFHTML = 4,COMP_TYPE_MAX = 4,};
enum MACRO_CONF {CONF_VERSION = 0x2,CONF_MAX_USERNAME = 0x80,CONF_MAX_CONFERENCENAME = 0x80,};
enum MACRO_COPY {COPY_FILE_FAIL_IF_EXISTS = 0x1,COPY_FILE_RESTARTABLE = 0x2,COPY_FILE_OPEN_SOURCE_FOR_WRITE = 0x4,};
enum MACRO_CPDR {CPDR_BOX = 1,CPDR_LASSO = 2,};
enum MACRO_CPEX {CPEX_DEST_STDCALL = 0x0,CPEX_DEST_CDECL = 0x80000000,};
enum MACRO_CQEC {CQEC = 33,};
enum MACRO_CRQR {CRQR = 3,CSTSN = 4,CCANCEL = 16,};
enum MACRO_CRTR {CRTR = 24,CQC = 32,};
enum MACRO_CRUC {CRUC_NOTIFY = 0,CRUC_REMOVE = 1,};
enum MACRO_CSTR {CSTR_LESS_THAN = 1,CSTR_EQUAL = 2,CSTR_GREATER_THAN = 3,};
enum MACRO_CTRL {CTRL_C_EVENT = 0,CTRL_BREAK_EVENT = 1,CTRL_CLOSE_EVENT = 2,CTRL_LOGOFF_EVENT = 5,CTRL_SHUTDOWN_EVENT = 6,};
enum MACRO_CTRY {CTRY_DEFAULT = 0,CTRY_ALBANIA = 355,CTRY_ALGERIA = 213,CTRY_ARGENTINA = 54,CTRY_AUSTRALIA = 61,CTRY_AUSTRIA = 43,CTRY_BAHRAIN = 973,CTRY_BELARUS = 375,CTRY_BELGIUM = 32,CTRY_BELIZE = 501,CTRY_BOLIVIA = 591,CTRY_BRAZIL = 55,CTRY_BRUNEI_DARUSSALAM = 673,CTRY_BULGARIA = 359,CTRY_CANADA = 2,CTRY_CARIBBEAN = 1,CTRY_CHILE = 56,CTRY_COLOMBIA = 57,CTRY_COSTA_RICA = 506,CTRY_CROATIA = 385,CTRY_CZECH = 420,CTRY_DENMARK = 45,CTRY_DOMINICAN_REPUBLIC = 1,CTRY_ECUADOR = 593,CTRY_EGYPT = 20,CTRY_EL_SALVADOR = 503,CTRY_ESTONIA = 372,CTRY_FAEROE_ISLANDS = 298,CTRY_FINLAND = 358,CTRY_FRANCE = 33,CTRY_GERMANY = 49,CTRY_GREECE = 30,CTRY_GUATEMALA = 502,CTRY_HONDURAS = 504,CTRY_HONG_KONG = 852,CTRY_HUNGARY = 36,CTRY_ICELAND = 354,CTRY_INDIA = 91,CTRY_INDONESIA = 62,CTRY_IRAN = 981,CTRY_IRAQ = 964,CTRY_IRELAND = 353,CTRY_ISRAEL = 972,CTRY_ITALY = 39,CTRY_JAMAICA = 1,CTRY_JAPAN = 81,CTRY_JORDAN = 962,CTRY_KENYA = 254,CTRY_KUWAIT = 965,CTRY_LATVIA = 371,CTRY_LEBANON = 961,CTRY_LIBYA = 218,CTRY_LIECHTENSTEIN = 41,CTRY_LITHUANIA = 370,CTRY_LUXEMBOURG = 352,CTRY_MACAU = 853,CTRY_MACEDONIA = 389,CTRY_MALAYSIA = 60,CTRY_MEXICO = 52,CTRY_MONACO = 33,CTRY_MOROCCO = 212,CTRY_NETHERLANDS = 31,CTRY_NEW_ZEALAND = 64,CTRY_NICARAGUA = 505,CTRY_NORWAY = 47,CTRY_OMAN = 968,CTRY_PAKISTAN = 92,CTRY_PANAMA = 507,CTRY_PARAGUAY = 595,CTRY_PERU = 51,CTRY_PHILIPPINES = 63,CTRY_POLAND = 48,CTRY_PORTUGAL = 351,CTRY_PRCHINA = 86,CTRY_PUERTO_RICO = 1,CTRY_QATAR = 974,CTRY_ROMANIA = 40,CTRY_RUSSIA = 7,CTRY_SAUDI_ARABIA = 966,CTRY_SERBIA = 381,CTRY_SINGAPORE = 65,CTRY_SLOVAK = 421,CTRY_SLOVENIA = 386,CTRY_SOUTH_AFRICA = 27,CTRY_SOUTH_KOREA = 82,CTRY_SPAIN = 34,CTRY_SWEDEN = 46,CTRY_SWITZERLAND = 41,CTRY_SYRIA = 963,CTRY_TAIWAN = 886,CTRY_THAILAND = 66,CTRY_TRINIDAD_Y_TOBAGO = 1,CTRY_TUNISIA = 216,CTRY_TURKEY = 90,CTRY_UAE = 971,CTRY_UKRAINE = 380,CTRY_UNITED_KINGDOM = 44,CTRY_UNITED_STATES = 1,CTRY_URUGUAY = 598,CTRY_VENEZUELA = 58,CTRY_VIET_NAM = 84,CTRY_YEMEN = 967,CTRY_ZIMBABWE = 263,};
enum MACRO_CUDR {CUDR_NORMAL = 0x0,CUDR_NOSNAPTOGRID = 0x1,CUDR_NORESOLVEPOSITIONS = 0x2,CUDR_NOCLOSEGAPS = 0x4,CUDR_NEGATIVECOORDS = 0x8,CUDR_NOPRIMARY = 0x10,};
enum MACRO_CWRK {CWRK_DEFAULT = 0,CWRK_BASIC = 1,CWRK_FULL = 2,CWRK_NUMPAD = 3,CWRK_TELPAD = 4,};
enum MACRO_DAPI {DAPI_FUNCTION_DAPI = 0x1,DAPI_FUNCTION_BIMPORT = 0x2,DAPI_FUNCTION_BEXPORT = 0x3,DAPI_FUNCTION_NTEXPORT = 0x4,DAPI_FUNCTION_NWEXPORT = 0x5,};
enum MACRO_DATA {DATA_E_FIRST = 0x80040130,DATA_E_LAST = 0x8004013F,DATA_S_FIRST = 0x40130,DATA_S_LAST = 0x4013F,};
enum MACRO_DATE {DATE_SHORTDATE = 0x1,DATE_LONGDATE = 0x2,DATE_USE_ALT_CALENDAR = 0x4,DATE_YEARMONTH = 0x8,DATE_LTRREADING = 0x10,DATE_RTLREADING = 0x20,};
enum MACRO_DBIF {DBIF_VIEWMODE_NORMAL = 0x0,DBIF_VIEWMODE_VERTICAL = 0x1,DBIF_VIEWMODE_FLOATING = 0x2,DBIF_VIEWMODE_TRANSPARENT = 0x4,};
enum MACRO_DBIM {DBIM_MINSIZE = 0x1,DBIM_MAXSIZE = 0x2,DBIM_INTEGRAL = 0x4,DBIM_ACTUAL = 0x8,DBIM_TITLE = 0x10,DBIM_MODEFLAGS = 0x20,DBIM_BKCOLOR = 0x40,};
enum MACRO_DBTF {DBTF_MEDIA = 0x1,DBTF_NET = 0x2,DBTF_RESOURCE = 0x1,DBTF_XPORT = 0x2,DBTF_SLOWNET = 0x4,};
enum MACRO_DB_E {DB_E_BADACCESSORHANDLE = 0x80040E00,DB_E_ROWLIMITEXCEEDED = 0x80040E01,DB_E_READONLYACCESSOR = 0x80040E02,DB_E_SCHEMAVIOLATION = 0x80040E03,DB_E_BADROWHANDLE = 0x80040E04,DB_E_OBJECTOPEN = 0x80040E05,DB_E_BADCHAPTER = 0x80040E06,DB_E_CANTCONVERTVALUE = 0x80040E07,DB_E_BADBINDINFO = 0x80040E08,DB_SEC_E_PERMISSIONDENIED = 0x80040E09,DB_E_NOTAREFERENCECOLUMN = 0x80040E0A,DB_E_LIMITREJECTED = 0x80040E0B,DB_E_NOCOMMAND = 0x80040E0C,DB_E_COSTLIMIT = 0x80040E0D,DB_E_BADBOOKMARK = 0x80040E0E,DB_E_BADLOCKMODE = 0x80040E0F,DB_E_PARAMNOTOPTIONAL = 0x80040E10,DB_E_BADCOLUMNID = 0x80040E11,DB_E_BADRATIO = 0x80040E12,DB_E_BADVALUES = 0x80040E13,DB_E_ERRORSINCOMMAND = 0x80040E14,DB_E_CANTCANCEL = 0x80040E15,DB_E_DIALECTNOTSUPPORTED = 0x80040E16,DB_E_DUPLICATEDATASOURCE = 0x80040E17,DB_E_CANNOTRESTART = 0x80040E18,DB_E_NOTFOUND = 0x80040E19,DB_E_NEWLYINSERTED = 0x80040E1B,DB_E_CANNOTFREE = 0x80040E1A,DB_E_GOALREJECTED = 0x80040E1C,DB_E_UNSUPPORTEDCONVERSION = 0x80040E1D,DB_E_BADSTARTPOSITION = 0x80040E1E,DB_E_NOQUERY = 0x80040E1F,DB_E_NOTREENTRANT = 0x80040E20,DB_E_ERRORSOCCURRED = 0x80040E21,DB_E_NOAGGREGATION = 0x80040E22,DB_E_DELETEDROW = 0x80040E23,DB_E_CANTFETCHBACKWARDS = 0x80040E24,DB_E_ROWSNOTRELEASED = 0x80040E25,DB_E_BADSTORAGEFLAG = 0x80040E26,DB_E_BADCOMPAREOP = 0x80040E27,DB_E_BADSTATUSVALUE = 0x80040E28,DB_E_CANTSCROLLBACKWARDS = 0x80040E29,DB_E_BADREGIONHANDLE = 0x80040E2A,DB_E_NONCONTIGUOUSRANGE = 0x80040E2B,DB_E_INVALIDTRANSITION = 0x80040E2C,DB_E_NOTASUBREGION = 0x80040E2D,DB_E_MULTIPLESTATEMENTS = 0x80040E2E,DB_E_INTEGRITYVIOLATION = 0x80040E2F,DB_E_BADTYPENAME = 0x80040E30,DB_E_ABORTLIMITREACHED = 0x80040E31,DB_E_ROWSETINCOMMAND = 0x80040E32,DB_E_CANTTRANSLATE = 0x80040E33,DB_E_DUPLICATEINDEXID = 0x80040E34,DB_E_NOINDEX = 0x80040E35,DB_E_INDEXINUSE = 0x80040E36,DB_E_NOTABLE = 0x80040E37,DB_E_CONCURRENCYVIOLATION = 0x80040E38,DB_E_BADCOPY = 0x80040E39,DB_E_BADPRECISION = 0x80040E3A,DB_E_BADSCALE = 0x80040E3B,DB_E_BADTABLEID = 0x80040E3C,DB_E_BADID = 0x80040E3C,DB_E_BADTYPE = 0x80040E3D,DB_E_DUPLICATECOLUMNID = 0x80040E3E,DB_E_DUPLICATETABLEID = 0x80040E3F,DB_E_TABLEINUSE = 0x80040E40,DB_E_NOLOCALE = 0x80040E41,DB_E_BADRECORDNUM = 0x80040E42,DB_E_BOOKMARKSKIPPED = 0x80040E43,DB_E_BADPROPERTYVALUE = 0x80040E44,DB_E_INVALID = 0x80040E45,DB_E_BADACCESSORFLAGS = 0x80040E46,DB_E_BADSTORAGEFLAGS = 0x80040E47,DB_E_BYREFACCESSORNOTSUPPORTED = 0x80040E48,DB_E_NULLACCESSORNOTSUPPORTED = 0x80040E49,DB_E_NOTPREPARED = 0x80040E4A,DB_E_BADACCESSORTYPE = 0x80040E4B,DB_E_WRITEONLYACCESSOR = 0x80040E4C,DB_SEC_E_AUTH_FAILED = 0x80040E4D,DB_E_CANCELED = 0x80040E4E,DB_E_CHAPTERNOTRELEASED = 0x80040E4F,DB_E_BADSOURCEHANDLE = 0x80040E50,DB_E_PARAMUNAVAILABLE = 0x80040E51,DB_E_ALREADYINITIALIZED = 0x80040E52,DB_E_NOTSUPPORTED = 0x80040E53,DB_E_MAXPENDCHANGESEXCEEDED = 0x80040E54,DB_E_BADORDINAL = 0x80040E55,DB_E_PENDINGCHANGES = 0x80040E56,DB_E_DATAOVERFLOW = 0x80040E57,DB_E_BADHRESULT = 0x80040E58,DB_E_BADLOOKUPID = 0x80040E59,DB_E_BADDYNAMICERRORID = 0x80040E5A,DB_E_PENDINGINSERT = 0x80040E5B,DB_E_BADCONVERTFLAG = 0x80040E5C,DB_E_BADPARAMETERNAME = 0x80040E5D,DB_E_MULTIPLESTORAGE = 0x80040E5E,DB_E_CANTFILTER = 0x80040E5F,DB_E_CANTORDER = 0x80040E60,};
enum MACRO_DB_S {DB_S_ROWLIMITEXCEEDED = 0x40EC0,DB_S_COLUMNTYPEMISMATCH = 0x40EC1,DB_S_TYPEINFOOVERRIDDEN = 0x40EC2,DB_S_BOOKMARKSKIPPED = 0x40EC3,DB_S_NONEXTROWSET = 0x40EC5,DB_S_ENDOFROWSET = 0x40EC6,DB_S_COMMANDREEXECUTED = 0x40EC7,DB_S_BUFFERFULL = 0x40EC8,DB_S_NORESULT = 0x40EC9,DB_S_CANTRELEASE = 0x40ECA,DB_S_GOALCHANGED = 0x40ECB,DB_S_UNWANTEDOPERATION = 0x40ECC,DB_S_DIALECTIGNORED = 0x40ECD,DB_S_UNWANTEDPHASE = 0x40ECE,DB_S_UNWANTEDREASON = 0x40ECF,DB_S_ASYNCHRONOUS = 0x40ED0,DB_S_COLUMNSCHANGED = 0x40ED1,DB_S_ERRORSRETURNED = 0x40ED2,DB_S_BADROWHANDLE = 0x40ED3,DB_S_DELETEDROW = 0x40ED4,DB_S_TOOMANYCHANGES = 0x40ED5,DB_S_STOPLIMITREACHED = 0x40ED6,DB_S_LOCKUPGRADED = 0x40ED8,DB_S_PROPERTIESCHANGED = 0x40ED9,DB_S_ERRORSOCCURRED = 0x40EDA,DB_S_PARAMUNAVAILABLE = 0x40EDB,DB_S_MULTIPLECHANGES = 0x40EDC,};
enum MACRO_DCBA {DCBA_FACEUPNONE = 0x0,DCBA_FACEUPCENTER = 0x1,DCBA_FACEUPLEFT = 0x2,DCBA_FACEUPRIGHT = 0x3,DCBA_FACEDOWNNONE = 0x100,DCBA_FACEDOWNCENTER = 0x101,DCBA_FACEDOWNLEFT = 0x102,DCBA_FACEDOWNRIGHT = 0x103,};
enum MACRO_DCTT {DCTT_BITMAP = 0x1,DCTT_DOWNLOAD = 0x2,DCTT_SUBDEV = 0x4,DCTT_DOWNLOAD_OUTLINE = 0x8,};
enum MACRO_DDBD {DDBD_1 = 0x4000,DDBD_2 = 0x2000,DDBD_4 = 0x1000,DDBD_8 = 0x800,DDBD_16 = 0x400,DDBD_24 = 0x200,DDBD_32 = 0x100,};
enum MACRO_DDPF {DDPF_ALPHAPIXELS = 0x1,DDPF_ALPHA = 0x2,DDPF_FOURCC = 0x4,DDPF_PALETTEINDEXED4 = 0x8,DDPF_PALETTEINDEXEDTO8 = 0x10,DDPF_PALETTEINDEXED8 = 0x20,DDPF_RGB = 0x40,DDPF_COMPRESSED = 0x80,DDPF_RGBTOYUV = 0x100,DDPF_YUV = 0x200,DDPF_ZBUFFER = 0x400,DDPF_PALETTEINDEXED1 = 0x800,DDPF_PALETTEINDEXED2 = 0x1000,DDPF_ZPIXELS = 0x2000,};
enum MACRO_DDSD {DDSD_CAPS = 0x1,DDSD_HEIGHT = 0x2,DDSD_WIDTH = 0x4,DDSD_PITCH = 0x8,DDSD_BACKBUFFERCOUNT = 0x20,DDSD_ZBUFFERBITDEPTH = 0x40,DDSD_ALPHABITDEPTH = 0x80,DDSD_LPSURFACE = 0x800,DDSD_PIXELFORMAT = 0x1000,DDSD_CKDESTOVERLAY = 0x2000,DDSD_CKDESTBLT = 0x4000,DDSD_CKSRCOVERLAY = 0x8000,DDSD_CKSRCBLT = 0x10000,DDSD_MIPMAPCOUNT = 0x20000,DDSD_REFRESHRATE = 0x40000,DDSD_LINEARSIZE = 0x80000,DDSD_ALL = 0xFF9EE,};
enum MACRO_DDVP {DDVP_AUTOFLIP = 0x1,DDVP_CONVERT = 0x2,DDVP_CROP = 0x4,DDVP_INTERLEAVE = 0x8,DDVP_MIRRORLEFTRIGHT = 0x10,DDVP_MIRRORUPDOWN = 0x20,DDVP_PRESCALE = 0x40,DDVP_SKIPEVENFIELDS = 0x80,DDVP_SKIPODDFIELDS = 0x100,DDVP_SYNCMASTER = 0x200,DDVP_VBICONVERT = 0x400,DDVP_VBINOSCALE = 0x800,DDVP_OVERRIDEBOBWEAVE = 0x1000,DDVP_IGNOREVBIXCROP = 0x2000,DDVP_VBINOINTERLEAVE = 0x4000,};
enum MACRO_DFCS {DFCS_CAPTIONCLOSE = 0x0,DFCS_CAPTIONMIN = 0x1,DFCS_CAPTIONMAX = 0x2,DFCS_CAPTIONRESTORE = 0x3,DFCS_CAPTIONHELP = 0x4,DFCS_MENUARROW = 0x0,DFCS_MENUCHECK = 0x1,DFCS_MENUBULLET = 0x2,DFCS_MENUARROWRIGHT = 0x4,DFCS_SCROLLUP = 0x0,DFCS_SCROLLDOWN = 0x1,DFCS_SCROLLLEFT = 0x2,DFCS_SCROLLRIGHT = 0x3,DFCS_SCROLLCOMBOBOX = 0x5,DFCS_SCROLLSIZEGRIP = 0x8,DFCS_SCROLLSIZEGRIPRIGHT = 0x10,DFCS_BUTTONCHECK = 0x0,DFCS_BUTTONRADIOIMAGE = 0x1,DFCS_BUTTONRADIOMASK = 0x2,DFCS_BUTTONRADIO = 0x4,DFCS_BUTTON3STATE = 0x8,DFCS_BUTTONPUSH = 0x10,DFCS_INACTIVE = 0x100,DFCS_PUSHED = 0x200,DFCS_CHECKED = 0x400,DFCS_TRANSPARENT = 0x800,DFCS_HOT = 0x1000,DFCS_ADJUSTRECT = 0x2000,DFCS_FLAT = 0x4000,DFCS_MONO = 0x8000,};
enum MACRO_DICD {DICD_GENERATE_ID = 0x1,DICD_INHERIT_CLASSDRVS = 0x2,};
enum MACRO_DICS {DICS_ENABLE = 0x1,DICS_DISABLE = 0x2,DICS_PROPCHANGE = 0x3,DICS_START = 0x4,DICS_STOP = 0x5,DICS_FLAG_GLOBAL = 0x1,DICS_FLAG_CONFIGSPECIFIC = 0x2,DICS_FLAG_CONFIGGENERAL = 0x4,};
enum MACRO_DIDC {DIDC_ATTACHED = 0x1,DIDC_POLLEDDEVICE = 0x2,DIDC_EMULATED = 0x4,DIDC_POLLEDDATAFORMAT = 0x8,DIDC_FORCEFEEDBACK = 0x100,DIDC_FFATTACK = 0x200,DIDC_FFFADE = 0x400,DIDC_SATURATION = 0x800,DIDC_POSNEGCOEFFICIENTS = 0x1000,DIDC_POSNEGSATURATION = 0x2000,DIDC_DEADBAND = 0x4000,};
enum MACRO_DIDF {DIDF_ABSAXIS = 0x1,DIDF_RELAXIS = 0x2,};
enum MACRO_DIEB {DIEB_NOTRIGGER = 0xFFFFFFFF,};
enum MACRO_DIEP {DIEP_DURATION = 0x1,DIEP_SAMPLEPERIOD = 0x2,DIEP_GAIN = 0x4,DIEP_TRIGGERBUTTON = 0x8,DIEP_TRIGGERREPEATINTERVAL = 0x10,DIEP_AXES = 0x20,DIEP_DIRECTION = 0x40,DIEP_ENVELOPE = 0x80,DIEP_TYPESPECIFICPARAMS = 0x100,DIEP_ALLPARAMS = 0x1FF,DIEP_START = 0x20000000,DIEP_NORESTART = 0x40000000,DIEP_NODOWNLOAD = 0x80000000,};
enum MACRO_DIES {DIES_SOLO = 0x1,DIES_NODOWNLOAD = 0x80000000,};
enum MACRO_DIOD {DIOD_INHERIT_CLASSDRVS = 0x2,DIOD_CANCEL_REMOVE = 0x4,};
enum MACRO_DIPH {DIPH_DEVICE = 0,DIPH_BYOFFSET = 1,DIPH_BYID = 2,DIPH_BYUSAGE = 3,};
enum MACRO_DISC {DISC_UPDATE_PROFILE = 0x1,DISC_NO_FORCE = 0x40,};
enum MACRO_DISK {DISK_LOGGING_START = 0,DISK_LOGGING_STOP = 1,DISK_LOGGING_DUMP = 2,DISK_BINNING = 3,};
enum MACRO_DISP {DISP_CHANGE_SUCCESSFUL = 0,DISP_CHANGE_RESTART = 1,DISP_CHANGE_FAILED = -1,DISP_CHANGE_BADMODE = -2,DISP_CHANGE_NOTUPDATED = -3,DISP_CHANGE_BADFLAGS = -4,DISP_CHANGE_BADPARAM = -5,};
enum MACRO_DLGC {DLGC_WANTARROWS = 0x1,DLGC_WANTTAB = 0x2,DLGC_WANTALLKEYS = 0x4,DLGC_WANTMESSAGE = 0x4,DLGC_HASSETSEL = 0x8,DLGC_DEFPUSHBUTTON = 0x10,DLGC_UNDEFPUSHBUTTON = 0x20,DLGC_RADIOBUTTON = 0x40,DLGC_WANTCHARS = 0x80,DLGC_STATIC = 0x100,DLGC_BUTTON = 0x2000,};
enum MACRO_DMTT {DMTT_BITMAP = 1,DMTT_DOWNLOAD = 2,DMTT_SUBDEV = 3,DMTT_DOWNLOAD_OUTLINE = 4,};
enum MACRO_DONT {DONT_RESOLVE_DLL_REFERENCES = 0x1,};
enum MACRO_DPID {DPID_SYSMSG = 0,DPID_ALLPLAYERS = 0,DPID_SERVERPLAYER = 1,DPID_UNKNOWN = -1,};
enum MACRO_DS3D {DS3D_IMMEDIATE = 0x0,DS3D_DEFERRED = 0x1,DS3D_MINCONEANGLE = 0x0,DS3D_MAXCONEANGLE = 0x168,DS3D_DEFAULTCONEANGLE = 0x168,DS3D_DEFAULTCONEOUTSIDEVOLUME = 0x0,};
enum MACRO_DTCT {DTCT_LABEL = 0x0,DTCT_EDIT = 0x1,DTCT_LBX = 0x2,DTCT_COMBOBOX = 0x3,DTCT_DDLBX = 0x4,DTCT_CHECKBOX = 0x5,DTCT_GROUPBOX = 0x6,DTCT_BUTTON = 0x7,DTCT_PAGE = 0x8,DTCT_RADIOBUTTON = 0x9,DTCT_MVLISTBOX = 0xB,DTCT_MVDDLBX = 0xC,};
enum MACRO_EDGE {EDGE_RAISED = 5,EDGE_SUNKEN = 10,EDGE_ETCHED = 6,EDGE_BUMP = 9,};
enum MACRO_EEAC {EEAC_INCLUDESUBFOLDERS = 0x1,};
enum MACRO_EEDM {EEDM = 6,};
enum MACRO_EEME {EEME_FAILED = 0x1,EEME_COMPLETE_FAILED = 0x2,};
enum MACRO_EEPS {EEPS_MESSAGE = 0x1,EEPS_FOLDER = 0x2,EEPS_STORE = 0x3,EEPS_TOOLSOPTIONS = 0x4,};
enum MACRO_EISA {EISA_NO_MAX_FUNCTION = 0xFF,};
enum MACRO_ENUM {ENUM_E_FIRST = 0x800401B0,ENUM_E_LAST = 0x800401BF,ENUM_S_FIRST = 0x401B0,ENUM_S_LAST = 0x401BF,};
enum MACRO_EPDP {EPDP_REMOVE = 0x1,};
enum MACRO_EPDS {EPDS_SELECT = 1,EPDS_STROKEINDEX = 2,EPDS_USER = 3,EPDS_PENTIP = 4,EPDS_TIPCOLOR = 5,EPDS_TIPWIDTH = 6,EPDS_TIPNIB = 7,EPDS_INKSET = 8,EPDS_EQ = 0,EPDS_LT = 16,EPDS_GT = 32,EPDS_NOT = 64,EPDS_NE = 64,EPDS_GTE = 80,EPDS_LTE = 96,EPDS_REMOVE = 32768,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FADF {FADF_AUTO = 0x1,FADF_STATIC = 0x2,FADF_EMBEDDED = 0x4,FADF_FIXEDSIZE = 0x10,FADF_RECORD = 0x20,FADF_HAVEIID = 0x40,FADF_HAVEVARTYPE = 0x80,FADF_BSTR = 0x100,FADF_UNKNOWN = 0x200,FADF_DISPATCH = 0x400,FADF_VARIANT = 0x800,FADF_RESERVED = 0xF008,};
enum MACRO_FAIL {FAIL = 0,};
enum MACRO_FAST {FAST_TRANSLATE = 0x40000,};
enum MACRO_FDDI {FDDI_HEADER_LENGTH = 13,FDDI_TYPE_MAC = 0,FDDI_TYPE_LLC = 16,FDDI_TYPE_LONG_ADDRESS = 64,};
enum MACRO_FILE {FILE_READ_DATA = 0x1,FILE_LIST_DIRECTORY = 0x1,FILE_WRITE_DATA = 0x2,FILE_ADD_FILE = 0x2,FILE_APPEND_DATA = 0x4,FILE_ADD_SUBDIRECTORY = 0x4,FILE_CREATE_PIPE_INSTANCE = 0x4,FILE_READ_EA = 0x8,FILE_WRITE_EA = 0x10,FILE_EXECUTE = 0x20,FILE_TRAVERSE = 0x20,FILE_DELETE_CHILD = 0x40,FILE_READ_ATTRIBUTES = 0x80,FILE_WRITE_ATTRIBUTES = 0x100,FILE_ALL_ACCESS = 0x1F03FF,FILE_GENERIC_READ = 0x120089,FILE_GENERIC_WRITE = 0x120116,FILE_GENERIC_EXECUTE = 0x1200A0,FILE_SHARE_READ = 0x1,FILE_SHARE_WRITE = 0x2,FILE_SHARE_DELETE = 0x4,FILE_ATTRIBUTE_READONLY = 0x1,FILE_ATTRIBUTE_HIDDEN = 0x2,FILE_ATTRIBUTE_SYSTEM = 0x4,FILE_ATTRIBUTE_DIRECTORY = 0x10,FILE_ATTRIBUTE_ARCHIVE = 0x20,FILE_ATTRIBUTE_ENCRYPTED = 0x40,FILE_ATTRIBUTE_NORMAL = 0x80,FILE_ATTRIBUTE_TEMPORARY = 0x100,FILE_ATTRIBUTE_SPARSE_FILE = 0x200,FILE_ATTRIBUTE_REPARSE_POINT = 0x400,FILE_ATTRIBUTE_COMPRESSED = 0x800,FILE_ATTRIBUTE_OFFLINE = 0x1000,FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000,FILE_NOTIFY_CHANGE_FILE_NAME = 0x1,FILE_NOTIFY_CHANGE_DIR_NAME = 0x2,FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x4,FILE_NOTIFY_CHANGE_SIZE = 0x8,FILE_NOTIFY_CHANGE_LAST_WRITE = 0x10,FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x20,FILE_NOTIFY_CHANGE_CREATION = 0x40,FILE_NOTIFY_CHANGE_SECURITY = 0x100,FILE_ACTION_ADDED = 0x1,FILE_ACTION_REMOVED = 0x2,FILE_ACTION_MODIFIED = 0x3,FILE_ACTION_RENAMED_OLD_NAME = 0x4,FILE_ACTION_RENAMED_NEW_NAME = 0x5,};
enum MACRO_FILL {FILL_ENTRY = 0x1,};
enum MACRO_FIND {FIND_FIRST_EX_CASE_SENSITIVE = 0x1,};
enum MACRO_FLAG {FLAG_ICC_FORCE_CONNECTION = 0x1,};
enum MACRO_FLT4 {FLT4_IEEE_HI = 12,FLT4_IEEE_LO = 13,FLT4_VAXF = 14,FLT4_ND50004 = 15,};
enum MACRO_FONT {OEM_FIXED_FONT = 10,ANSI_FIXED_FONT = 11,ANSI_VAR_FONT = 12,SYSTEM_FONT = 13,DEVICE_DEFAULT_FONT = 14,};
enum MACRO_FORM {FORM_USER = 0x0,FORM_BUILTIN = 0x1,FORM_PRINTER = 0x2,};
enum MACRO_FPST {FPST_VANILLA = 0,FPST_ENUM_PROP = 1,};
enum MACRO_FROM {FROM_PROTOCOL_INFO = -1,};
enum MACRO_FUNC {TRAPB_FUNC = 0x0,EXCB_FUNC = 0x400,MB_FUNC = 0x4000,WMB_FUNC = 0x4400,MB2_FUNC = 0x4800,MB3_FUNC = 0x4C00,FETCH_FUNC = 0x8000,FETCH_M_FUNC = 0xA000,RPCC_FUNC = 0xC000,RC_FUNC = 0xE000,RS_FUNC = 0xF000,JMP_FUNC = 0x0,JSR_FUNC = 0x1,RET_FUNC = 0x2,JSR_CO_FUNC = 0x3,};
enum MACRO_GDTR {GDTR_MIN = 0x1,GDTR_MAX = 0x2,};
enum MACRO_GHND {GHND = 66,};
enum MACRO_GMDI {GMDI_USEDISABLED = 0x1,GMDI_GOINTOPOPUPS = 0x2,};
enum MACRO_GMEM {GMEM_FIXED = 0x0,GMEM_MOVEABLE = 0x2,GMEM_NOCOMPACT = 0x10,GMEM_NODISCARD = 0x20,GMEM_ZEROINIT = 0x40,GMEM_MODIFY = 0x80,GMEM_DISCARDABLE = 0x100,GMEM_NOT_BANKED = 0x1000,GMEM_SHARE = 0x2000,GMEM_DDESHARE = 0x2000,GMEM_NOTIFY = 0x4000,GMEM_LOWER = 0x1000,GMEM_VALID_FLAGS = 0x7F72,GMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_GMMP {GMMP_USE_DISPLAY_POINTS = 1,GMMP_USE_DRIVER_POINTS = 2,};
enum MACRO_GPTR {GPTR = 64,};
enum MACRO_HCBT {HCBT_MOVESIZE = 0,HCBT_MINMAX = 1,HCBT_QS = 2,HCBT_CREATEWND = 3,HCBT_DESTROYWND = 4,HCBT_ACTIVATE = 5,HCBT_CLICKSKIPPED = 6,HCBT_KEYSKIPPED = 7,HCBT_SYSCOMMAND = 8,HCBT_SETFOCUS = 9,};
enum MACRO_HEAL {HEAL_DEFAULT = -1,};
enum MACRO_HEAP {HEAP_NO_SERIALIZE = 0x1,HEAP_GROWABLE = 0x2,HEAP_GENERATE_EXCEPTIONS = 0x4,HEAP_ZERO_MEMORY = 0x8,HEAP_REALLOC_IN_PLACE_ONLY = 0x10,HEAP_TAIL_CHECKING_ENABLED = 0x20,HEAP_FREE_CHECKING_ENABLED = 0x40,HEAP_DISABLE_COALESCE_ON_FREE = 0x80,HEAP_CREATE_ALIGN_16 = 0x10000,HEAP_CREATE_ENABLE_TRACING = 0x20000,HEAP_MAXIMUM_TAG = 0xFFF,HEAP_PSEUDO_TAG_FLAG = 0x8000,HEAP_TAG_SHIFT = 0x12,};
enum MACRO_HEKK {HEKK_DEFAULT = 0,HEKK_CONVERT = 1,HEKK_CANDIDATE = 2,HEKK_DBCSCHAR = 3,HEKK_SBCSCHAR = 4,HEKK_HIRAGANA = 5,HEKK_KATAKANA = 6,};
enum MACRO_HELP {HELP_CONTEXT = 0x1,HELP_QUIT = 0x2,HELP_INDEX = 0x3,HELP_CONTENTS = 0x3,HELP_HELPONHELP = 0x4,HELP_SETINDEX = 0x5,HELP_SETCONTENTS = 0x5,HELP_CONTEXTPOPUP = 0x8,HELP_FORCEFILE = 0x9,HELP_KEY = 0x101,HELP_COMMAND = 0x102,HELP_PARTIALKEY = 0x105,HELP_MULTIKEY = 0x201,HELP_SETWINPOS = 0x203,HELP_CONTEXTMENU = 0xA,HELP_FINDER = 0xB,HELP_WM_HELP = 0xC,HELP_SETPOPUP_POS = 0xD,HELP_TCARD = 0x8000,HELP_TCARD_DATA = 0x10,HELP_TCARD_OTHER_CALLER = 0x11,};
enum MACRO_HF32 {HF32_DEFAULT = 1,HF32_SHARED = 2,};
enum MACRO_HICF {HICF_OTHER = 0x0,HICF_MOUSE = 0x1,HICF_ARROWKEYS = 0x2,HICF_ACCELERATOR = 0x4,HICF_DUPACCEL = 0x8,HICF_ENTERING = 0x10,HICF_LEAVING = 0x20,HICF_RESELECT = 0x40,};
enum MACRO_HIDE {HIDE_WINDOW = 0,};
enum MACRO_HIST {HIST_BACK = 0,HIST_FORWARD = 1,HIST_FAVORITES = 2,HIST_ADDTOFAVORITES = 3,HIST_VIEWTREE = 4,};
enum MACRO_HKEY {HKEY_CLASSES_ROOT = 0x80000000,HKEY_CURRENT_USER = 0x80000001,HKEY_LOCAL_MACHINE = 0x80000002,HKEY_USERS = 0x80000003,HKEY_PERFORMANCE_DATA = 0x80000004,HKEY_CURRENT_CONFIG = 0x80000005,HKEY_DYN_DATA = 0x80000006,};
enum MACRO_HOOK {HOOK_DELETE = 0x1,HOOK_CANCEL = 0x2,HOOK_INBOUND = 0x200,HOOK_OUTBOUND = 0x400,};
enum MACRO_HRCR {HRCR_NORESULTS = 4,HRCR_COMPLETE = 3,HRCR_GESTURE = 2,HRCR_OK = 1,HRCR_INCOMPLETE = 0,HRCR_ERROR = -1,HRCR_MEMERR = -2,HRCR_INVALIDGUIDE = -3,HRCR_INVALIDPNDT = -4,HRCR_UNSUPPORTED = -5,HRCR_CONFLICT = -6,HRCR_HOOKED = -8,};
enum MACRO_HTTP {HTTP_MAJOR_VERSION = 1,HTTP_MINOR_VERSION = 0,HTTP_QUERY_MIME_VERSION = 0,HTTP_QUERY_CONTENT_TYPE = 1,HTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2,HTTP_QUERY_CONTENT_ID = 3,HTTP_QUERY_CONTENT_DESCRIPTION = 4,HTTP_QUERY_CONTENT_LENGTH = 5,HTTP_QUERY_CONTENT_LANGUAGE = 6,HTTP_QUERY_ALLOW = 7,HTTP_QUERY_PUBLIC = 8,HTTP_QUERY_DATE = 9,HTTP_QUERY_EXPIRES = 10,HTTP_QUERY_LAST_MODIFIED = 11,HTTP_QUERY_MESSAGE_ID = 12,HTTP_QUERY_URI = 13,HTTP_QUERY_DERIVED_FROM = 14,HTTP_QUERY_COST = 15,HTTP_QUERY_LINK = 16,HTTP_QUERY_PRAGMA = 17,HTTP_QUERY_VERSION = 18,HTTP_QUERY_STATUS_CODE = 19,HTTP_QUERY_STATUS_TEXT = 20,HTTP_QUERY_RAW_HEADERS = 21,HTTP_QUERY_RAW_HEADERS_CRLF = 22,HTTP_QUERY_CONNECTION = 23,HTTP_QUERY_ACCEPT = 24,HTTP_QUERY_ACCEPT_CHARSET = 25,HTTP_QUERY_ACCEPT_ENCODING = 26,HTTP_QUERY_ACCEPT_LANGUAGE = 27,HTTP_QUERY_AUTHORIZATION = 28,HTTP_QUERY_CONTENT_ENCODING = 29,HTTP_QUERY_FORWARDED = 30,HTTP_QUERY_FROM = 31,HTTP_QUERY_IF_MODIFIED_SINCE = 32,HTTP_QUERY_LOCATION = 33,HTTP_QUERY_ORIG_URI = 34,HTTP_QUERY_REFERER = 35,HTTP_QUERY_RETRY_AFTER = 36,HTTP_QUERY_SERVER = 37,HTTP_QUERY_TITLE = 38,HTTP_QUERY_USER_AGENT = 39,HTTP_QUERY_WWW_AUTHENTICATE = 40,HTTP_QUERY_PROXY_AUTHENTICATE = 41,HTTP_QUERY_ACCEPT_RANGES = 42,HTTP_QUERY_SET_COOKIE = 43,HTTP_QUERY_COOKIE = 44,HTTP_QUERY_REQUEST_METHOD = 45,HTTP_QUERY_REFRESH = 46,HTTP_QUERY_CONTENT_DISPOSITION = 47,HTTP_QUERY_AGE = 48,HTTP_QUERY_CACHE_CONTROL = 49,HTTP_QUERY_CONTENT_BASE = 50,HTTP_QUERY_CONTENT_LOCATION = 51,HTTP_QUERY_CONTENT_MD5 = 52,HTTP_QUERY_CONTENT_RANGE = 53,HTTP_QUERY_ETAG = 54,HTTP_QUERY_HOST = 55,HTTP_QUERY_IF_MATCH = 56,HTTP_QUERY_IF_NONE_MATCH = 57,HTTP_QUERY_IF_RANGE = 58,HTTP_QUERY_IF_UNMODIFIED_SINCE = 59,HTTP_QUERY_MAX_FORWARDS = 60,HTTP_QUERY_PROXY_AUTHORIZATION = 61,HTTP_QUERY_RANGE = 62,HTTP_QUERY_TRANSFER_ENCODING = 63,HTTP_QUERY_UPGRADE = 64,HTTP_QUERY_VARY = 65,HTTP_QUERY_VIA = 66,HTTP_QUERY_WARNING = 67,HTTP_QUERY_MAX = 67,HTTP_QUERY_CUSTOM = 65535,HTTP_QUERY_FLAG_REQUEST_HEADERS = -2147483648,HTTP_QUERY_FLAG_SYSTEMTIME = 1073741824,HTTP_QUERY_FLAG_NUMBER = 536870912,HTTP_QUERY_FLAG_COALESCE = 268435456,HTTP_QUERY_MODIFIER_FLAGS_MASK = -268435456,HTTP_QUERY_HEADER_MASK = 268435455,HTTP_STATUS_CONTINUE = 100,HTTP_STATUS_SWITCH_PROTOCOLS = 101,HTTP_STATUS_OK = 200,HTTP_STATUS_CREATED = 201,HTTP_STATUS_ACCEPTED = 202,HTTP_STATUS_PARTIAL = 203,HTTP_STATUS_NO_CONTENT = 204,HTTP_STATUS_RESET_CONTENT = 205,HTTP_STATUS_PARTIAL_CONTENT = 206,HTTP_STATUS_AMBIGUOUS = 300,HTTP_STATUS_MOVED = 301,HTTP_STATUS_REDIRECT = 302,HTTP_STATUS_REDIRECT_METHOD = 303,HTTP_STATUS_NOT_MODIFIED = 304,HTTP_STATUS_USE_PROXY = 305,HTTP_STATUS_REDIRECT_KEEP_VERB = 307,HTTP_STATUS_BAD_REQUEST = 400,HTTP_STATUS_DENIED = 401,HTTP_STATUS_PAYMENT_REQ = 402,HTTP_STATUS_FORBIDDEN = 403,HTTP_STATUS_NOT_FOUND = 404,HTTP_STATUS_BAD_METHOD = 405,HTTP_STATUS_NONE_ACCEPTABLE = 406,HTTP_STATUS_PROXY_AUTH_REQ = 407,HTTP_STATUS_REQUEST_TIMEOUT = 408,HTTP_STATUS_CONFLICT = 409,HTTP_STATUS_GONE = 410,HTTP_STATUS_LENGTH_REQUIRED = 411,HTTP_STATUS_PRECOND_FAILED = 412,HTTP_STATUS_REQUEST_TOO_LARGE = 413,HTTP_STATUS_URI_TOO_LONG = 414,HTTP_STATUS_UNSUPPORTED_MEDIA = 415,HTTP_STATUS_SERVER_ERROR = 500,HTTP_STATUS_NOT_SUPPORTED = 501,HTTP_STATUS_BAD_GATEWAY = 502,HTTP_STATUS_SERVICE_UNAVAIL = 503,HTTP_STATUS_GATEWAY_TIMEOUT = 504,HTTP_STATUS_VERSION_NOT_SUP = 505,HTTP_STATUS_FIRST = 100,HTTP_STATUS_LAST = 505,HTTP_ADDREQ_INDEX_MASK = 65535,HTTP_ADDREQ_FLAGS_MASK = -65536,HTTP_ADDREQ_FLAG_ADD_IF_NEW = 268435456,HTTP_ADDREQ_FLAG_ADD = 536870912,HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 1073741824,HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 16777216,HTTP_ADDREQ_FLAG_COALESCE = 1073741824,HTTP_ADDREQ_FLAG_REPLACE = -2147483648,};
enum MACRO_HWND {HWND_BROADCAST = 0xFFFF,HWND_MESSAGE = 0xFFFFFFFD,};
enum MACRO_IACE {IACE_CHILDREN = 0x1,IACE_DEFAULT = 0x10,IACE_IGNORENOCONTEXT = 0x20,};
enum MACRO_ICMF {ICMF_CONFIGURE_QUERY = 0x1,ICMF_ABOUT_QUERY = 0x1,ICMF_COMPVARS_VALID = 0x1,ICMF_CHOOSE_KEYFRAME = 0x1,ICMF_CHOOSE_DATARATE = 0x2,ICMF_CHOOSE_PREVIEW = 0x4,ICMF_CHOOSE_ALLCOMPRESSORS = 0x8,};
enum MACRO_ICON {ICON_SMALL = 0,ICON_BIG = 1,};
enum MACRO_IC_E {IC_E_CAPS_INSTANTIATION_FAILURE = 0x83010001,IC_E_CAPS_INITIALIZATION_FAILURE = 0x83010002,IC_E_NO_FORMATS = 0x83010003,IC_E_NO_SUCH_FORMAT = 0x83010005,IC_E_INTERNAL_ERROR = 0x83010006,};
enum MACRO_IDBZ {IDBZ_RETRY = 600,IDBZ_ICON = 601,IDBZ_MESSAGE1 = 602,IDBZ_SWITCHTO = 604,};
enum MACRO_IDCV {IDCV_OBJECTTYPE = 150,IDCV_DISPLAYASICON = 152,IDCV_CHANGEICON = 153,IDCV_ACTIVATELIST = 154,IDCV_CONVERTTO = 155,IDCV_ACTIVATEAS = 156,IDCV_RESULTTEXT = 157,IDCV_CONVERTLIST = 158,IDCV_ICON = 159,IDCV_ICONLABEL1 = 160,IDCV_ICONLABEL2 = 161,IDCV_STXCURTYPE = 162,IDCV_GRPRESULT = 163,IDCV_STXCONVERTTO = 164,};
enum MACRO_IDMS {IDMS_R = 18,};
enum MACRO_IDNO {IDNO = 7,IDCLOSE = 8,};
enum MACRO_IDOK {IDOK = 1,IDCANCEL = 2,};
enum MACRO_IEDO {IEDO_NONE = 0x0,IEDO_FAST = 0x1,IEDO_SAVEUPSTROKES = 0x2,IEDO_RESERVED = 0xFFFC,};
enum MACRO_IEGI {IEGI_ALL = 0x0,IEGI_SELECTION = 0x1,};
enum MACRO_IESF {IESF_ALL = 0x1,IESF_SELECTION = 0x2,IESF_STROKE = 0x4,IESF_TIPCOLOR = 0x8,IESF_TIPWIDTH = 0x10,IESF_PENTIP = 0x18,};
enum MACRO_IESI {IESI_REPLACE = 0x0,IESI_APPEND = 0x1,};
enum MACRO_ILCF {ILCF_MOVE = 0x0,ILCF_SWAP = 0x1,};
enum MACRO_IMAP {IMAP_MD_ID_BEGIN_RESERVED = 0xC000,IMAP_MD_ID_END_RESERVED = 0xCFFF,};
enum MACRO_IMEA {IMEA_INIT = 0x1,IMEA_NEXT = 0x2,IMEA_PREV = 0x3,};
enum MACRO_IMFS {IMFS_GRAYED = 3,IMFS_DISABLED = 3,IMFS_CHECKED = 8,IMFS_HILITE = 128,IMFS_ENABLED = 0,IMFS_UNCHECKED = 0,IMFS_UNHILITE = 0,IMFS_DEFAULT = 4096,};
enum MACRO_IMFT {IMFT_RADIOCHECK = 0x1,IMFT_SEPARATOR = 0x2,IMFT_SUBMENU = 0x4,};
enum MACRO_IMSG {IMSG_NO_ISTG_COMMIT = 0x1,};
enum MACRO_INCL {INCL_WINSOCK_API_PROTOTYPES = 1,INCL_WINSOCK_API_TYPEDEFS = 0,};
enum MACRO_INET {INET_E_ERROR_LAST = -2146697195,};
enum MACRO_INFO {INFO_NO_ENCRYPTED_STREAMS = 0x1,};
enum MACRO_INIT {INIT = 0,REQUEST = 1,RESPONSE = 2,};
enum MACRO_INT2 {INT2_LSB_HI = 2,INT2_LSB_LO = 3,};
enum MACRO_INT4 {INT4_LSB_HI = 0,INT4_LSB_LO = 1,};
enum MACRO_ISSP {ISSP_LEVEL = 32,ISSP_MODE = 1,};
enum MACRO_IS_E {IS_E_EXEC_FAILED = 0x80042002,};
enum MACRO_JEIF {JEIF_VERIFYCLASSES = 0x2,JEIF_ACTIVEXDEBUG = 0x4,JEIF_NATIVECODEINMODULE = 0x8,JEIF_NAMESPACE_SPECIFIED = 0x10,JEIF_INSTALLSTANDARDSECURITY = 0x20,};
enum MACRO_JPEG {JPEG_DIB = 1195724874,MJPG_DIB = 1196444237,};
enum MACRO_KEEP {KEEP_OPEN_READONLY = 0x1,KEEP_OPEN_READWRITE = 0x2,};
enum MACRO_KERB {KERB_ETYPE_NULL = 0,KERB_ETYPE_DES_CBC_CRC = 1,KERB_ETYPE_DES_CBC_MD4 = 2,KERB_ETYPE_DES_CBC_MD5 = 3,KERB_ETYPE_OLD_RC4_MD4 = 128,KERB_ETYPE_OLD_RC4_PLAIN = 129,KERB_ETYPE_OLD_RC4_LM = 130,KERB_ETYPE_OLD_RC4_SHA = 131,KERB_ETYPE_OLD_DES_PLAIN = 132,KERB_ETYPE_RC4_MD4 = -128,KERB_ETYPE_RC4_PLAIN = -129,KERB_ETYPE_RC4_LM = -130,KERB_ETYPE_RC4_SHA = -131,KERB_ETYPE_DES_PLAIN = -132,KERB_CHECKSUM_NONE = 0,KERB_CHECKSUM_CRC32 = 1,KERB_CHECKSUM_MD4 = 2,KERB_CHECKSUM_KRB_DES_MAC = 4,KERB_CHECKSUM_MD5 = 7,KERB_CHECKSUM_MD5_DES = 8,KERB_CHECKSUM_OLD_LM = 130,KERB_CHECKSUM_OLD_SHA1 = 131,KERB_CHECKSUM_OLD_REAL_CRC32 = 132,KERB_CHECKSUM_OLD_DES_MAC = 133,KERB_CHECKSUM_OLD_DES_MAC_MD5 = 134,KERB_CHECKSUM_OLD_MD25 = 135,KERB_CHECKSUM_OLD_RC4_MD5 = 136,KERB_CHECKSUM_LM = -130,KERB_CHECKSUM_SHA1 = -131,KERB_CHECKSUM_REAL_CRC32 = -132,KERB_CHECKSUM_DES_MAC = -133,KERB_CHECKSUM_DES_MAC_MD5 = -134,KERB_CHECKSUM_MD25 = -135,KERB_CHECKSUM_RC4_MD5 = -136,};
enum MACRO_LANG {LANG_NEUTRAL = 0x0,LANG_AFRIKAANS = 0x36,LANG_ALBANIAN = 0x1C,LANG_ARABIC = 0x1,LANG_ARMENIAN = 0x2B,LANG_ASSAMESE = 0x4D,LANG_AZERI = 0x2C,LANG_BASQUE = 0x2D,LANG_BELARUSIAN = 0x23,LANG_BENGALI = 0x45,LANG_BULGARIAN = 0x2,LANG_CATALAN = 0x3,LANG_CHINESE = 0x4,LANG_CROATIAN = 0x1A,LANG_CZECH = 0x5,LANG_DANISH = 0x6,LANG_DUTCH = 0x13,LANG_ENGLISH = 0x9,LANG_ESTONIAN = 0x25,LANG_FAEROESE = 0x38,LANG_FARSI = 0x29,LANG_FINNISH = 0xB,LANG_FRENCH = 0xC,LANG_GEORGIAN = 0x37,LANG_GERMAN = 0x7,LANG_GREEK = 0x8,LANG_GUJARATI = 0x47,LANG_HEBREW = 0xD,LANG_HINDI = 0x39,LANG_HUNGARIAN = 0xE,LANG_ICELANDIC = 0xF,LANG_INDONESIAN = 0x21,LANG_ITALIAN = 0x10,LANG_JAPANESE = 0x11,LANG_KANNADA = 0x4B,LANG_KASHMIRI = 0x60,LANG_KAZAK = 0x3F,LANG_KONKANI = 0x57,LANG_KOREAN = 0x12,LANG_LATVIAN = 0x26,LANG_LITHUANIAN = 0x27,LANG_MACEDONIAN = 0x2F,LANG_MALAY = 0x3E,LANG_MALAYALAM = 0x4C,LANG_MANIPURI = 0x58,LANG_MARATHI = 0x4E,LANG_NEPALI = 0x61,LANG_NORWEGIAN = 0x14,LANG_ORIYA = 0x48,LANG_POLISH = 0x15,LANG_PORTUGUESE = 0x16,LANG_PUNJABI = 0x46,LANG_ROMANIAN = 0x18,LANG_RUSSIAN = 0x19,LANG_SANSKRIT = 0x4F,LANG_SERBIAN = 0x1A,LANG_SINDHI = 0x59,LANG_SLOVAK = 0x1B,LANG_SLOVENIAN = 0x24,LANG_SPANISH = 0xA,LANG_SWAHILI = 0x41,LANG_SWEDISH = 0x1D,LANG_TAMIL = 0x49,LANG_TATAR = 0x44,LANG_TELUGU = 0x4A,LANG_THAI = 0x1E,LANG_TURKISH = 0x1F,LANG_UKRAINIAN = 0x22,LANG_URDU = 0x20,LANG_UZBEK = 0x43,LANG_VIETNAMESE = 0x2A,};
enum MACRO_LAPI {LAPI_MAJOR_VER1 = 1,LAPI_MINOR_VER1 = 1,};
enum MACRO_LAST {LAST_LINEMEDIAMODE = 0x8000,};
enum MACRO_LBER {LBER_USE_DER = 0x1,LBER_USE_INDEFINITE_LEN = 0x2,LBER_TRANSLATE_STRINGS = 0x4,};
enum MACRO_LCID {LCID_INSTALLED = 0x1,LCID_SUPPORTED = 0x2,LCID_ALTERNATE_SORTS = 0x4,};
enum MACRO_LDAP {LDAP_UNICODE = 0,LDAP_PORT = 389,LDAP_SSL_PORT = 636,LDAP_VERSION1 = 1,LDAP_VERSION2 = 2,LDAP_VERSION3 = 3,LDAP_VERSION = 2,LDAP_BIND_CMD = 96,LDAP_UNBIND_CMD = 66,LDAP_SEARCH_CMD = 99,LDAP_MODIFY_CMD = 102,LDAP_ADD_CMD = 104,LDAP_DELETE_CMD = 74,LDAP_MODRDN_CMD = 108,LDAP_COMPARE_CMD = 110,LDAP_ABANDON_CMD = 80,LDAP_SESSION_CMD = 113,LDAP_EXTENDED_CMD = 119,LDAP_RES_BIND = 97,LDAP_RES_SEARCH_ENTRY = 100,LDAP_RES_SEARCH_RESULT = 101,LDAP_RES_MODIFY = 103,LDAP_RES_ADD = 105,LDAP_RES_DELETE = 107,LDAP_RES_MODRDN = 109,LDAP_RES_COMPARE = 111,LDAP_RES_SESSION = 114,LDAP_RES_REFERRAL = 115,LDAP_RES_EXTENDED = 120,LDAP_RES_ANY = -1,LDAP_INVALID_CMD = 255,LDAP_INVALID_RES = 255,LDAP_AUTH_SIMPLE = 128,LDAP_AUTH_SASL = 131,LDAP_AUTH_OTHERKIND = 134,LDAP_AUTH_SICILY = 646,LDAP_AUTH_MSN = 2182,LDAP_AUTH_NTLM = 4230,LDAP_AUTH_DPA = 8326,LDAP_AUTH_NEGOTIATE = 1158,LDAP_AUTH_SSPI = 1158,LDAP_FILTER_AND = 160,LDAP_FILTER_OR = 161,LDAP_FILTER_NOT = 162,LDAP_FILTER_EQUALITY = 163,LDAP_FILTER_SUBSTRINGS = 164,LDAP_FILTER_GE = 165,LDAP_FILTER_LE = 166,LDAP_FILTER_PRESENT = 135,LDAP_FILTER_APPROX = 168,LDAP_SUBSTRING_INITIAL = 128,LDAP_SUBSTRING_ANY = 129,LDAP_SUBSTRING_FINAL = 130,LDAP_DEREF_NEVER = 0,LDAP_DEREF_SEARCHING = 1,LDAP_DEREF_FINDING = 2,LDAP_DEREF_ALWAYS = 3,LDAP_NO_LIMIT = 0,LDAP_OPT_DNS = 1,LDAP_OPT_CHASE_REFERRALS = 2,LDAP_OPT_RETURN_REFS = 4,LDAP_MOD_ADD = 0,LDAP_MOD_DELETE = 1,LDAP_MOD_REPLACE = 2,LDAP_MOD_BVALUES = 128,LDAP_OPT_DESC = 1,LDAP_OPT_DEREF = 2,LDAP_OPT_SIZELIMIT = 3,LDAP_OPT_TIMELIMIT = 4,LDAP_OPT_THREAD_FN_PTRS = 5,LDAP_OPT_REBIND_FN = 6,LDAP_OPT_REBIND_ARG = 7,LDAP_OPT_REFERRALS = 8,LDAP_OPT_RESTART = 9,LDAP_OPT_SSL = 10,LDAP_OPT_IO_FN_PTRS = 11,LDAP_OPT_CACHE_FN_PTRS = 13,LDAP_OPT_CACHE_STRATEGY = 14,LDAP_OPT_CACHE_ENABLE = 15,LDAP_OPT_REFERRAL_HOP_LIMIT = 16,LDAP_OPT_PROTOCOL_VERSION = 17,LDAP_OPT_VERSION = 17,LDAP_OPT_HOST_NAME = 48,LDAP_OPT_ERROR_NUMBER = 49,LDAP_OPT_ERROR_STRING = 50,LDAP_OPT_HOST_REACHABLE = 62,LDAP_OPT_PING_KEEP_ALIVE = 54,LDAP_OPT_PING_WAIT_TIME = 55,LDAP_OPT_PING_LIMIT = 56,LDAP_OPT_DNSDOMAIN_NAME = 59,LDAP_OPT_GETDSNAME_FLAGS = 61,LDAP_OPT_PROMPT_CREDENTIALS = 63,LDAP_OPT_ON = 1,LDAP_OPT_OFF = 0,LDAP_CHASE_SUBORDINATE_REFERRALS = 32,LDAP_CHASE_EXTERNAL_REFERRALS = 64,LDAP_SCOPE_BASE = 0,LDAP_SCOPE_ONELEVEL = 1,LDAP_SCOPE_SUBTREE = 2,LDAP_MSG_ONE = 0,LDAP_MSG_ALL = 1,LDAP_MSG_RECEIVED = 2,};
enum MACRO_LDBL {LDBL_DIG = 15,LDBL_MANT_DIG = 53,LDBL_MAX_10_EXP = 308,LDBL_MAX_EXP = 1024,LDBL_MIN_10_EXP = -307,LDBL_MIN_EXP = -1021,};
enum MACRO_LF32 {LF32_FIXED = 0x1,LF32_FREE = 0x2,LF32_MOVEABLE = 0x4,};
enum MACRO_LHND {LHND = 66,};
enum MACRO_LINE {LINE_LEN = 256,};
enum MACRO_LM20 {LM20_CNLEN = 15,};
enum MACRO_LMEM {LMEM_FIXED = 0x0,LMEM_MOVEABLE = 0x2,LMEM_NOCOMPACT = 0x10,LMEM_NODISCARD = 0x20,LMEM_ZEROINIT = 0x40,LMEM_MODIFY = 0x80,LMEM_DISCARDABLE = 0xF00,LMEM_VALID_FLAGS = 0xF72,LMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_LOAD {LOAD_LIBRARY_AS_DATAFILE = 0x2,LOAD_WITH_ALTERED_SEARCH_PATH = 0x8,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_LPTR {LPTR = 64,};
enum MACRO_LPTx {LPTx = 0x80,};
enum MACRO_LRET {LRET_DONE = 1,LRET_ABORT = -1,LRET_HRC = -2,LRET_HPENDATA = -3,LRET_PRIVATE = -4,};
enum MACRO_LVCF {LVCF_FMT = 0x1,LVCF_WIDTH = 0x2,LVCF_TEXT = 0x4,LVCF_SUBITEM = 0x8,LVCF_IMAGE = 0x10,LVCF_ORDER = 0x20,};
enum MACRO_LVFI {LVFI_PARAM = 0x1,LVFI_STRING = 0x2,LVFI_PARTIAL = 0x8,LVFI_WRAP = 0x20,LVFI_NEARESTXY = 0x40,};
enum MACRO_LVHT {LVHT_NOWHERE = 0x1,LVHT_ONITEMICON = 0x2,LVHT_ONITEMLABEL = 0x4,LVHT_ONITEMSTATEICON = 0x8,LVHT_ONITEM = 0xE,LVHT_ABOVE = 0x8,LVHT_BELOW = 0x10,LVHT_TORIGHT = 0x20,LVHT_TOLEFT = 0x40,};
enum MACRO_LVIF {LVIF_TEXT = 0x1,LVIF_IMAGE = 0x2,LVIF_PARAM = 0x4,LVIF_STATE = 0x8,LVIF_INDENT = 0x10,LVIF_NORECOMPUTE = 0x800,};
enum MACRO_LVIR {LVIR_BOUNDS = 0,LVIR_ICON = 1,LVIR_LABEL = 2,LVIR_SELECTBOUNDS = 3,};
enum MACRO_LVIS {LVIS_FOCUSED = 0x1,LVIS_SELECTED = 0x2,LVIS_CUT = 0x4,LVIS_DROPHILITED = 0x8,LVIS_ACTIVATING = 0x20,LVIS_OVERLAYMASK = 0xF00,LVIS_STATEIMAGEMASK = 0xF000,};
enum MACRO_LVKF {LVKF_ALT = 0x1,LVKF_CONTROL = 0x2,LVKF_SHIFT = 0x4,};
enum MACRO_LVNI {LVNI_ALL = 0x0,LVNI_FOCUSED = 0x1,LVNI_SELECTED = 0x2,LVNI_CUT = 0x4,LVNI_DROPHILITED = 0x8,LVNI_ABOVE = 0x100,LVNI_BELOW = 0x200,LVNI_TOLEFT = 0x400,LVNI_TORIGHT = 0x800,};
enum MACRO_MAPI {MAPI_DIM = 1,MAPI_NT_SERVICE = 65536,MAPI_MODIFY = 1,MAPI_ACCESS_MODIFY = 1,MAPI_ACCESS_READ = 2,MAPI_ACCESS_DELETE = 4,MAPI_ACCESS_CREATE_HIERARCHY = 8,MAPI_ACCESS_CREATE_CONTENTS = 16,MAPI_ACCESS_CREATE_ASSOCIATED = 32,MAPI_UNICODE = 2147483648,};
enum MACRO_MCHT {MCHT_TITLE = 0x10000,MCHT_CALENDAR = 0x20000,MCHT_TODAYLINK = 0x30000,MCHT_NEXT = 0x1000000,MCHT_PREV = 0x2000000,MCHT_NOWHERE = 0x0,MCHT_TITLEBK = 0x10000,MCHT_TITLEMONTH = 0x10001,MCHT_TITLEYEAR = 0x10002,MCHT_TITLEBTNNEXT = 0x1010003,MCHT_TITLEBTNPREV = 0x2010003,MCHT_CALENDARBK = 0x20000,MCHT_CALENDARDATE = 0x20001,MCHT_CALENDARDATENEXT = 0x1020001,MCHT_CALENDARDATEPREV = 0x2020001,MCHT_CALENDARDAY = 0x20002,MCHT_CALENDARWEEKNUM = 0x20003,};
enum MACRO_MCSC {MCSC_BACKGROUND = 0,MCSC_TEXT = 1,MCSC_TITLEBK = 2,MCSC_TITLETEXT = 3,MCSC_MONTHBK = 4,MCSC_TRAILINGTEXT = 5,};
enum MACRO_MDFF {MDFF_BOLD = 0x1,MDFF_ITALIC = 0x2,MDFF_UNDERLINE = 0x4,MDFF_STRIKEOUT = 0x8,};
enum MACRO_MDIS {MDIS_ALLCHILDSTYLES = 0x1,};
enum MACRO_MD_E {MD_E_BADTUPLE = 0x80040E61,MD_E_BADCOORDINATE = 0x80040E62,MD_E_INVALIDAXIS = 0x80040E63,MD_E_INVALIDCELLRANGE = 0x80040E64,};
enum MACRO_MENU {MENU_TEXT_LEN = 40,};
enum MACRO_META {META_SETBKCOLOR = 0x201,META_SETBKMODE = 0x102,META_SETMAPMODE = 0x103,META_SETROP2 = 0x104,META_SETRELABS = 0x105,META_SETPOLYFILLMODE = 0x106,META_SETSTRETCHBLTMODE = 0x107,META_SETTEXTCHAREXTRA = 0x108,META_SETTEXTCOLOR = 0x209,META_SETTEXTJUSTIFICATION = 0x20A,META_SETWINDOWORG = 0x20B,META_SETWINDOWEXT = 0x20C,META_SETVIEWPORTORG = 0x20D,META_SETVIEWPORTEXT = 0x20E,META_OFFSETWINDOWORG = 0x20F,META_SCALEWINDOWEXT = 0x410,META_OFFSETVIEWPORTORG = 0x211,META_SCALEVIEWPORTEXT = 0x412,META_LINETO = 0x213,META_MOVETO = 0x214,META_EXCLUDECLIPRECT = 0x415,META_INTERSECTCLIPRECT = 0x416,META_ARC = 0x817,META_ELLIPSE = 0x418,META_FLOODFILL = 0x419,META_PIE = 0x81A,META_RECTANGLE = 0x41B,META_ROUNDRECT = 0x61C,META_PATBLT = 0x61D,META_SAVEDC = 0x1E,META_SETPIXEL = 0x41F,META_OFFSETCLIPRGN = 0x220,META_TEXTOUT = 0x521,META_BITBLT = 0x922,META_STRETCHBLT = 0xB23,META_POLYGON = 0x324,META_POLYLINE = 0x325,META_ESCAPE = 0x626,META_RESTOREDC = 0x127,META_FILLREGION = 0x228,META_FRAMEREGION = 0x429,META_INVERTREGION = 0x12A,META_PAINTREGION = 0x12B,META_SELECTCLIPREGION = 0x12C,META_SELECTOBJECT = 0x12D,META_SETTEXTALIGN = 0x12E,META_CHORD = 0x830,META_SETMAPPERFLAGS = 0x231,META_EXTTEXTOUT = 0xA32,META_SETDIBTODEV = 0xD33,META_SELECTPALETTE = 0x234,META_REALIZEPALETTE = 0x35,META_ANIMATEPALETTE = 0x436,META_SETPALENTRIES = 0x37,META_POLYPOLYGON = 0x538,META_RESIZEPALETTE = 0x139,META_DIBBITBLT = 0x940,META_DIBSTRETCHBLT = 0xB41,META_DIBCREATEPATTERNBRUSH = 0x142,META_STRETCHDIB = 0xF43,META_EXTFLOODFILL = 0x548,META_DELETEOBJECT = 0x1F0,META_CREATEPALETTE = 0xF7,META_CREATEPATTERNBRUSH = 0x1F9,META_CREATEPENINDIRECT = 0x2FA,META_CREATEFONTINDIRECT = 0x2FB,META_CREATEBRUSHINDIRECT = 0x2FC,META_CREATEREGION = 0x6FF,};
enum MACRO_MEVT {MEVT_F_SHORT = 0x0,MEVT_F_LONG = 0x80000000,MEVT_F_CALLBACK = 0x40000000,MEVT_SHORTMSG = 0x0,MEVT_TEMPO = 0x1,MEVT_NOP = 0x2,MEVT_LONGMSG = 0x80,MEVT_COMMENT = 0x82,MEVT_VERSION = 0x84,};
enum MACRO_MHDR {MHDR_DONE = 0x1,MHDR_PREPARED = 0x2,MHDR_INQUEUE = 0x4,MHDR_ISSTRM = 0x8,};
enum MACRO_MIDI {MIDI_MAPPER = 4294967295,MIDI_IO_STATUS = 32,MIDI_CACHE_ALL = 1,MIDI_CACHE_BESTFIT = 2,MIDI_CACHE_QUERY = 3,MIDI_UNCACHE = 4,};
enum MACRO_MIIM {MIIM_STATE = 0x1,MIIM_ID = 0x2,MIIM_SUBMENU = 0x4,MIIM_CHECKMARKS = 0x8,MIIM_TYPE = 0x10,MIIM_DATA = 0x20,MIIM_STRING = 0x40,MIIM_BITMAP = 0x80,MIIM_FTYPE = 0x100,};
enum MACRO_MMIO {MMIO_RWMODE = 0x3,MMIO_SHAREMODE = 0x70,MMIO_CREATE = 0x1000,MMIO_PARSE = 0x100,MMIO_DELETE = 0x200,MMIO_EXIST = 0x4000,MMIO_ALLOCBUF = 0x10000,MMIO_GETTEMP = 0x20000,MMIO_DIRTY = 0x10000000,MMIO_READ = 0x0,MMIO_WRITE = 0x1,MMIO_READWRITE = 0x2,MMIO_COMPAT = 0x0,MMIO_EXCLUSIVE = 0x10,MMIO_DENYWRITE = 0x20,MMIO_DENYREAD = 0x30,MMIO_DENYNONE = 0x40,MMIO_FHOPEN = 0x10,MMIO_EMPTYBUF = 0x10,MMIO_TOUPPER = 0x10,MMIO_INSTALLPROC = 0x10000,MMIO_GLOBALPROC = 0x10000000,MMIO_REMOVEPROC = 0x20000,MMIO_UNICODEPROC = 0x1000000,MMIO_FINDPROC = 0x40000,MMIO_FINDCHUNK = 0x10,MMIO_FINDRIFF = 0x20,MMIO_FINDLIST = 0x40,MMIO_CREATERIFF = 0x20,MMIO_CREATELIST = 0x40,};
enum MACRO_MNGO {MNGO_NOINTERFACE = 0x0,MNGO_NOERROR = 0x1,};
enum MACRO_MNID {MNID_ID = 0,MNID_STRING = 1,};
enum MACRO_MODE {PROOF_MODE = 0x1,NORMAL_MODE = 0x2,BEST_MODE = 0x3,};
enum MACRO_MONO {MONO_FONT = 8,};
enum MACRO_MORE {MORE_DATA = 0x1,};
enum MACRO_MSCS {MSCS_MD_ID_BEGIN_RESERVED = 0xD000,MSCS_MD_ID_END_RESERVED = 0xDFFF,};
enum MACRO_MSGF {MSGF_DIALOGBOX = 0,MSGF_MESSAGEBOX = 1,MSGF_MENU = 2,MSGF_SCROLLBAR = 5,MSGF_NEXTWINDOW = 6,MSGF_MAX = 8,MSGF_USER = 4096,};
enum MACRO_MS_S {MS_S_PENDING = 262145,MS_S_NOUPDATE = 262146,MS_S_ENDOFSTREAM = 262147,MS_E_SAMPLEALLOC = -2147220479,MS_E_PURPOSEID = -2147220478,MS_E_NOSTREAM = -2147220477,MS_E_NOSEEKING = -2147220476,MS_E_INCOMPATIBLE = -2147220475,MS_E_BUSY = -2147220474,MS_E_NOTINIT = -2147220473,MS_E_SOURCEALREADYDEFINED = -2147220472,MS_E_INVALIDSTREAMTYPE = -2147220471,MS_E_NOTRUNNING = -2147220470,};
enum MACRO_MTPR {MTPR_OP = 0x1D,MFPR_OP = 0x19,HWLD_OP = 0x1B,HWST_OP = 0x1F,REI_OP = 0x1E,};
enum MACRO_MWMO {MWMO_WAITALL = 0x1,MWMO_ALERTABLE = 0x2,MWMO_INPUTAVAILABLE = 0x4,};
enum MACRO_NAME {NAME_FLAGS_MASK = 0x87,};
enum MACRO_NDDE {NDDE_NO_ERROR = 0,NDDE_ACCESS_DENIED = 1,NDDE_BUF_TOO_SMALL = 2,NDDE_ERROR_MORE_DATA = 3,NDDE_INVALID_SERVER = 4,NDDE_INVALID_SHARE = 5,NDDE_INVALID_PARAMETER = 6,NDDE_INVALID_LEVEL = 7,NDDE_INVALID_PASSWORD = 8,NDDE_INVALID_ITEMNAME = 9,NDDE_INVALID_TOPIC = 10,NDDE_INTERNAL_ERROR = 11,NDDE_OUT_OF_MEMORY = 12,NDDE_INVALID_APPNAME = 13,NDDE_NOT_IMPLEMENTED = 14,NDDE_SHARE_ALREADY_EXIST = 15,NDDE_SHARE_NOT_EXIST = 16,NDDE_INVALID_FILENAME = 17,NDDE_NOT_RUNNING = 18,NDDE_INVALID_WINDOW = 19,NDDE_INVALID_SESSION = 20,NDDE_INVALID_ITEM_LIST = 21,NDDE_SHARE_DATA_CORRUPTED = 22,NDDE_REGISTRY_ERROR = 23,NDDE_CANT_ACCESS_SERVER = 24,NDDE_INVALID_SPECIAL_COMMAND = 25,NDDE_INVALID_SECURITY_DESC = 26,NDDE_TRUST_SHARE_FAIL = 27,};
enum MACRO_NERR {NERR_Success = 0,NERR_BASE = 2100,NERR_NetNotStarted = 2102,NERR_UnknownServer = 2103,NERR_ShareMem = 2104,NERR_NoNetworkResource = 2105,NERR_RemoteOnly = 2106,NERR_DevNotRedirected = 2107,NERR_ServerNotStarted = 2114,NERR_ItemNotFound = 2115,NERR_UnknownDevDir = 2116,NERR_RedirectedPath = 2117,NERR_DuplicateShare = 2118,NERR_NoRoom = 2119,NERR_TooManyItems = 2121,NERR_InvalidMaxUsers = 2122,NERR_BufTooSmall = 2123,NERR_RemoteErr = 2127,NERR_LanmanIniError = 2131,NERR_NetworkError = 2136,NERR_WkstaInconsistentState = 2137,NERR_WkstaNotStarted = 2138,NERR_BrowserNotStarted = 2139,NERR_InternalError = 2140,NERR_BadTransactConfig = 2141,NERR_InvalidAPI = 2142,NERR_BadEventName = 2143,NERR_DupNameReboot = 2144,NERR_CfgCompNotFound = 2146,NERR_CfgParamNotFound = 2147,NERR_LineTooLong = 2149,NERR_QNotFound = 2150,NERR_JobNotFound = 2151,NERR_DestNotFound = 2152,NERR_DestExists = 2153,NERR_QExists = 2154,NERR_QNoRoom = 2155,NERR_JobNoRoom = 2156,NERR_DestNoRoom = 2157,NERR_DestIdle = 2158,NERR_DestInvalidOp = 2159,NERR_ProcNoRespond = 2160,NERR_SpoolerNotLoaded = 2161,NERR_DestInvalidState = 2162,NERR_QInvalidState = 2163,NERR_JobInvalidState = 2164,NERR_SpoolNoMemory = 2165,NERR_DriverNotFound = 2166,NERR_DataTypeInvalid = 2167,NERR_ProcNotFound = 2168,NERR_ServiceTableLocked = 2180,NERR_ServiceTableFull = 2181,NERR_ServiceInstalled = 2182,NERR_ServiceEntryLocked = 2183,NERR_ServiceNotInstalled = 2184,NERR_BadServiceName = 2185,NERR_ServiceCtlTimeout = 2186,NERR_ServiceCtlBusy = 2187,NERR_BadServiceProgName = 2188,NERR_ServiceNotCtrl = 2189,NERR_ServiceKillProc = 2190,NERR_ServiceCtlNotValid = 2191,NERR_NotInDispatchTbl = 2192,NERR_BadControlRecv = 2193,NERR_ServiceNotStarting = 2194,NERR_AlreadyLoggedOn = 2200,NERR_NotLoggedOn = 2201,NERR_BadUsername = 2202,NERR_BadPassword = 2203,NERR_UnableToAddName_W = 2204,NERR_UnableToAddName_F = 2205,NERR_UnableToDelName_W = 2206,NERR_UnableToDelName_F = 2207,NERR_LogonsPaused = 2209,NERR_LogonServerConflict = 2210,NERR_LogonNoUserPath = 2211,NERR_LogonScriptError = 2212,NERR_StandaloneLogon = 2214,NERR_LogonServerNotFound = 2215,NERR_LogonDomainExists = 2216,NERR_NonValidatedLogon = 2217,NERR_ACFNotFound = 2219,NERR_GroupNotFound = 2220,NERR_UserNotFound = 2221,NERR_ResourceNotFound = 2222,NERR_GroupExists = 2223,NERR_UserExists = 2224,NERR_ResourceExists = 2225,NERR_NotPrimary = 2226,NERR_ACFNotLoaded = 2227,NERR_ACFNoRoom = 2228,NERR_ACFFileIOFail = 2229,NERR_ACFTooManyLists = 2230,NERR_UserLogon = 2231,NERR_ACFNoParent = 2232,NERR_CanNotGrowSegment = 2233,NERR_SpeGroupOp = 2234,NERR_NotInCache = 2235,NERR_UserInGroup = 2236,NERR_UserNotInGroup = 2237,NERR_AccountUndefined = 2238,NERR_AccountExpired = 2239,NERR_InvalidWorkstation = 2240,NERR_InvalidLogonHours = 2241,NERR_PasswordExpired = 2242,NERR_PasswordCantChange = 2243,NERR_PasswordHistConflict = 2244,NERR_PasswordTooShort = 2245,NERR_PasswordTooRecent = 2246,NERR_InvalidDatabase = 2247,NERR_DatabaseUpToDate = 2248,NERR_SyncRequired = 2249,NERR_UseNotFound = 2250,NERR_BadAsgType = 2251,NERR_DeviceIsShared = 2252,NERR_NoComputerName = 2270,NERR_MsgAlreadyStarted = 2271,NERR_MsgInitFailed = 2272,NERR_NameNotFound = 2273,NERR_AlreadyForwarded = 2274,NERR_AddForwarded = 2275,NERR_AlreadyExists = 2276,NERR_TooManyNames = 2277,NERR_DelComputerName = 2278,NERR_LocalForward = 2279,NERR_GrpMsgProcessor = 2280,NERR_PausedRemote = 2281,NERR_BadReceive = 2282,NERR_NameInUse = 2283,NERR_MsgNotStarted = 2284,NERR_NotLocalName = 2285,NERR_NoForwardName = 2286,NERR_RemoteFull = 2287,NERR_NameNotForwarded = 2288,NERR_TruncatedBroadcast = 2289,NERR_InvalidDevice = 2294,NERR_WriteFault = 2295,NERR_DuplicateName = 2297,NERR_DeleteLater = 2298,NERR_IncompleteDel = 2299,NERR_MultipleNets = 2300,NERR_NetNameNotFound = 2310,NERR_DeviceNotShared = 2311,NERR_ClientNameNotFound = 2312,NERR_FileIdNotFound = 2314,NERR_ExecFailure = 2315,NERR_TmpFile = 2316,NERR_TooMuchData = 2317,NERR_DeviceShareConflict = 2318,NERR_BrowserTableIncomplete = 2319,NERR_NotLocalDomain = 2320,NERR_IsDfsShare = 2321,NERR_DevInvalidOpCode = 2331,NERR_DevNotFound = 2332,NERR_DevNotOpen = 2333,NERR_BadQueueDevString = 2334,NERR_BadQueuePriority = 2335,NERR_NoCommDevs = 2337,NERR_QueueNotFound = 2338,NERR_BadDevString = 2340,NERR_BadDev = 2341,NERR_InUseBySpooler = 2342,NERR_CommDevInUse = 2343,NERR_InvalidComputer = 2351,NERR_MaxLenExceeded = 2354,NERR_BadComponent = 2356,NERR_CantType = 2357,NERR_TooManyEntries = 2362,NERR_ProfileFileTooBig = 2370,NERR_ProfileOffset = 2371,NERR_ProfileCleanup = 2372,NERR_ProfileUnknownCmd = 2373,NERR_ProfileLoadErr = 2374,NERR_ProfileSaveErr = 2375,NERR_LogOverflow = 2377,NERR_LogFileChanged = 2378,NERR_LogFileCorrupt = 2379,NERR_SourceIsDir = 2380,NERR_BadSource = 2381,NERR_BadDest = 2382,NERR_DifferentServers = 2383,NERR_RunSrvPaused = 2385,NERR_ErrCommRunSrv = 2389,NERR_ErrorExecingGhost = 2391,NERR_ShareNotFound = 2392,NERR_InvalidLana = 2400,NERR_OpenFiles = 2401,NERR_ActiveConns = 2402,NERR_BadPasswordCore = 2403,NERR_DevInUse = 2404,NERR_LocalDrive = 2405,NERR_AlertExists = 2430,NERR_TooManyAlerts = 2431,NERR_NoSuchAlert = 2432,NERR_BadRecipient = 2433,NERR_AcctLimitExceeded = 2434,NERR_InvalidLogSeek = 2440,NERR_BadUasConfig = 2450,NERR_InvalidUASOp = 2451,NERR_LastAdmin = 2452,NERR_DCNotFound = 2453,NERR_LogonTrackingError = 2454,NERR_NetlogonNotStarted = 2455,NERR_CanNotGrowUASFile = 2456,NERR_TimeDiffAtDC = 2457,NERR_PasswordMismatch = 2458,NERR_NoSuchServer = 2460,NERR_NoSuchSession = 2461,NERR_NoSuchConnection = 2462,NERR_TooManyServers = 2463,NERR_TooManySessions = 2464,NERR_TooManyConnections = 2465,NERR_TooManyFiles = 2466,NERR_NoAlternateServers = 2467,NERR_TryDownLevel = 2470,NERR_UPSDriverNotStarted = 2480,NERR_UPSInvalidConfig = 2481,NERR_UPSInvalidCommPort = 2482,NERR_UPSSignalAsserted = 2483,NERR_UPSShutdownFailed = 2484,NERR_BadDosRetCode = 2500,NERR_ProgNeedsExtraMem = 2501,NERR_BadDosFunction = 2502,NERR_RemoteBootFailed = 2503,NERR_BadFileCheckSum = 2504,NERR_NoRplBootSystem = 2505,NERR_RplLoadrNetBiosErr = 2506,NERR_RplLoadrDiskErr = 2507,NERR_ImageParamErr = 2508,NERR_TooManyImageParams = 2509,NERR_NonDosFloppyUsed = 2510,NERR_RplBootRestart = 2511,NERR_RplSrvrCallFailed = 2512,NERR_CantConnectRplSrvr = 2513,NERR_CantOpenImageFile = 2514,NERR_CallingRplSrvr = 2515,NERR_StartingRplBoot = 2516,NERR_RplBootServiceTerm = 2517,NERR_RplBootStartFailed = 2518,NERR_RPL_CONNECTED = 2519,NERR_BrowserConfiguredToNotRun = 2550,NERR_RplNoAdaptersStarted = 2610,NERR_RplBadRegistry = 2611,NERR_RplBadDatabase = 2612,NERR_RplRplfilesShare = 2613,NERR_RplNotRplServer = 2614,NERR_RplCannotEnum = 2615,NERR_RplWkstaInfoCorrupted = 2616,NERR_RplWkstaNotFound = 2617,NERR_RplWkstaNameUnavailable = 2618,NERR_RplProfileInfoCorrupted = 2619,NERR_RplProfileNotFound = 2620,NERR_RplProfileNameUnavailable = 2621,NERR_RplProfileNotEmpty = 2622,NERR_RplConfigInfoCorrupted = 2623,NERR_RplConfigNotFound = 2624,NERR_RplAdapterInfoCorrupted = 2625,NERR_RplInternal = 2626,NERR_RplVendorInfoCorrupted = 2627,NERR_RplBootInfoCorrupted = 2628,NERR_RplWkstaNeedsUserAcct = 2629,NERR_RplNeedsRPLUSERAcct = 2630,NERR_RplBootNotFound = 2631,NERR_RplIncompatibleProfile = 2632,NERR_RplAdapterNameUnavailable = 2633,NERR_RplConfigNotEmpty = 2634,NERR_RplBootInUse = 2635,NERR_RplBackupDatabase = 2636,NERR_RplAdapterNotFound = 2637,NERR_RplVendorNotFound = 2638,NERR_RplVendorNameUnavailable = 2639,NERR_RplBootNameUnavailable = 2640,NERR_RplConfigNameUnavailable = 2641,NERR_DfsInternalCorruption = 2660,NERR_DfsVolumeDataCorrupt = 2661,NERR_DfsNoSuchVolume = 2662,NERR_DfsVolumeAlreadyExists = 2663,NERR_DfsAlreadyShared = 2664,NERR_DfsNoSuchShare = 2665,NERR_DfsNotALeafVolume = 2666,NERR_DfsLeafVolume = 2667,NERR_DfsVolumeHasMultipleServers = 2668,NERR_DfsCantCreateJunctionPoint = 2669,NERR_DfsServerNotDfsAware = 2670,NERR_DfsBadRenamePath = 2671,NERR_DfsVolumeIsOffline = 2672,NERR_DfsNoSuchServer = 2673,NERR_DfsCyclicalName = 2674,NERR_DfsNotSupportedInServerDfs = 2675,NERR_DfsInternalError = 2690,NERR_SetupAlreadyJoined = 2691,NERR_SetupNotJoined = 2692,NERR_SetupDomainController = 2693,};
enum MACRO_NNTP {NNTP_MD_ID_BEGIN_RESERVED = 0xB000,NNTP_MD_ID_END_RESERVED = 0xBFFF,};
enum MACRO_NORM {NORM_IGNORECASE = 0x1,NORM_IGNORENONSPACE = 0x2,NORM_IGNORESYMBOLS = 0x4,NORM_IGNOREKANATYPE = 0x10000,NORM_IGNOREWIDTH = 0x20000,};
enum MACRO_NSIG {NSIG = 23,};
enum MACRO_NTFT {VALID_NTFT = 0xC0,PARTITION_NTFT = 0x80,};
enum MACRO_NTMS {NTMS_DEVICENAME_LENGTH = 64,NTMS_SERIALNUMBER_LENGTH = 32,NTMS_REVISION_LENGTH = 32,NTMS_BARCODE_LENGTH = 64,NTMS_SEQUENCE_LENGTH = 32,NTMS_VENDORNAME_LENGTH = 32,NTMS_PRODUCTNAME_LENGTH = 32,NTMS_USERNAME_LENGTH = 64,NTMS_APPLICATIONNAME_LENGTH = 64,NTMS_COMPUTERNAME_LENGTH = 64,NTMS_MESSAGE_LENGTH = 127,NTMS_OBJECTNAME_LENGTH = 64,NTMS_DESCRIPTION_LENGTH = 127,NTMS_OMID_TYPE_RAW_LABEL = 1,NTMS_OMID_TYPE_FILESYSTEM_INFO = 2,NTMS_MAXATTR_LENGTH = 65536,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_ODBC {ODBC_ADD_DSN = 1,ODBC_CONFIG_DSN = 2,ODBC_REMOVE_DSN = 3,ODBC_ADD_SYS_DSN = 4,ODBC_CONFIG_SYS_DSN = 5,ODBC_REMOVE_SYS_DSN = 6,ODBC_REMOVE_DEFAULT_DSN = 7,ODBC_INSTALL_INQUIRY = 1,ODBC_INSTALL_COMPLETE = 2,ODBC_INSTALL_DRIVER = 1,ODBC_REMOVE_DRIVER = 2,ODBC_CONFIG_DRIVER = 3,ODBC_CONFIG_DRIVER_MAX = 100,ODBC_BOTH_DSN = 0,ODBC_USER_DSN = 1,ODBC_SYSTEM_DSN = 2,ODBC_ERROR_GENERAL_ERR = 1,ODBC_ERROR_INVALID_BUFF_LEN = 2,ODBC_ERROR_INVALID_HWND = 3,ODBC_ERROR_INVALID_STR = 4,ODBC_ERROR_INVALID_REQUEST_TYPE = 5,ODBC_ERROR_COMPONENT_NOT_FOUND = 6,ODBC_ERROR_INVALID_NAME = 7,ODBC_ERROR_INVALID_KEYWORD_VALUE = 8,ODBC_ERROR_INVALID_DSN = 9,ODBC_ERROR_INVALID_INF = 10,ODBC_ERROR_REQUEST_FAILED = 11,ODBC_ERROR_INVALID_PATH = 12,ODBC_ERROR_LOAD_LIB_FAILED = 13,ODBC_ERROR_INVALID_PARAM_SEQUENCE = 14,ODBC_ERROR_INVALID_LOG_FILE = 15,ODBC_ERROR_USER_CANCELED = 16,ODBC_ERROR_USAGE_UPDATE_FAILED = 17,ODBC_ERROR_CREATE_DSN_FAILED = 18,ODBC_ERROR_WRITING_SYSINFO_FAILED = 19,ODBC_ERROR_REMOVE_DSN_FAILED = 20,ODBC_ERROR_OUT_OF_MEM = 21,ODBC_ERROR_OUTPUT_STRING_TRUNCATED = 22,};
enum MACRO_OPEN {OPEN_EXISTING = 3,OPEN_ALWAYS = 4,};
enum MACRO_OPER {OPER_STATE_DOWN = 1,OPER_STATE_UP = 2,OPER_STATE_SLEEPING = 3,OPER_STATE_STARTING = 4,OPER_STATE_STOPPING = 5,};
enum MACRO_OSTF {OSTF_NO_ENCRYPTION = 0x80000000,OSTF_COMPRESSABLE_ENCRYPTION = 0x40000000,OSTF_BEST_ENCRYPTION = 0x20000000,};
enum MACRO_PAGE {PAGE_NOACCESS = 0x1,PAGE_READONLY = 0x2,PAGE_READWRITE = 0x4,PAGE_WRITECOPY = 0x8,PAGE_EXECUTE = 0x10,PAGE_EXECUTE_READ = 0x20,PAGE_EXECUTE_READWRITE = 0x40,PAGE_EXECUTE_WRITECOPY = 0x80,PAGE_GUARD = 0x100,PAGE_NOCACHE = 0x200,PAGE_WRITECOMBINE = 0x400,};
enum MACRO_PARM {PARM_ERROR_UNKNOWN = 4294967295,PARM_ERROR_NONE = 0,};
enum MACRO_PATH {BEGIN_PATH = 4096,CLIP_TO_PATH = 4097,END_PATH = 4098,};
enum MACRO_PBTF {PBTF_APMRESUMEFROMFAILURE = 0x1,};
enum MACRO_PCIC {PCIC_DEFAULT_IRQMASK = 0x4EB8,PCIC_DEFAULT_NUMSOCKETS = 0x0,};
enum MACRO_PCMR {PCMR_OK = 0,PCMR_ALREADYCOLLECTING = -1,PCMR_INVALIDCOLLECTION = -2,PCMR_EVENTLOCK = -3,PCMR_INVALID_PACKETID = -4,PCMR_TERMTIMEOUT = -5,PCMR_TERMRANGE = -6,PCMR_TERMPENUP = -7,PCMR_TERMEX = -8,PCMR_TERMBOUND = -9,PCMR_APPTERMINATED = -10,PCMR_TAP = -11,PCMR_SELECT = -12,PCMR_OVERFLOW = -13,PCMR_ERROR = -14,PCMR_DISPLAYERR = -15,PCMR_TERMINVERT = -16,};
enum MACRO_PDTS {PDTS_LOMETRIC = 0,PDTS_HIMETRIC = 1,PDTS_HIENGLISH = 2,PDTS_STANDARDSCALE = 2,PDTS_DISPLAY = 3,PDTS_ARBITRARY = 4,PDTS_SCALEMASK = 15,};
enum MACRO_PDTT {PDTT_DEFAULT = 0x0,PDTT_PENINFO = 0x100,PDTT_UPPOINTS = 0x200,PDTT_OEMDATA = 0x400,PDTT_COLLINEAR = 0x800,PDTT_COLINEAR = 0x800,PDTT_DECOMPRESS = 0x4000,PDTT_COMPRESS = 0x8000,PDTT_ALL = 0xF00,};
enum MACRO_PERF {PERF_DATA_VERSION = 1,PERF_DATA_REVISION = 1,PERF_NO_INSTANCES = -1,PERF_SIZE_DWORD = 0,PERF_SIZE_LARGE = 256,PERF_SIZE_ZERO = 512,PERF_SIZE_VARIABLE_LEN = 768,PERF_TYPE_NUMBER = 0,PERF_TYPE_COUNTER = 1024,PERF_TYPE_TEXT = 2048,PERF_TYPE_ZERO = 3072,PERF_NUMBER_HEX = 0,PERF_NUMBER_DECIMAL = 65536,PERF_NUMBER_DEC_1000 = 131072,PERF_COUNTER_VALUE = 0,PERF_COUNTER_RATE = 65536,PERF_COUNTER_FRACTION = 131072,PERF_COUNTER_BASE = 196608,PERF_COUNTER_ELAPSED = 262144,PERF_COUNTER_QUEUELEN = 327680,PERF_COUNTER_HISTOGRAM = 393216,PERF_TEXT_UNICODE = 0,PERF_TEXT_ASCII = 65536,PERF_TIMER_TICK = 0,PERF_TIMER_100NS = 1048576,PERF_OBJECT_TIMER = 2097152,PERF_DELTA_COUNTER = 4194304,PERF_DELTA_BASE = 8388608,PERF_INVERSE_COUNTER = 16777216,PERF_MULTI_COUNTER = 33554432,PERF_DISPLAY_NO_SUFFIX = 0,PERF_DISPLAY_PER_SEC = 268435456,PERF_DISPLAY_PERCENT = 536870912,PERF_DISPLAY_SECONDS = 805306368,PERF_DISPLAY_NOSHOW = 1073741824,PERF_COUNTER_COUNTER = 272696320,PERF_COUNTER_TIMER = 541132032,PERF_COUNTER_QUEUELEN_TYPE = 4523008,PERF_COUNTER_LARGE_QUEUELEN_TYPE = 4523264,PERF_COUNTER_BULK_COUNT = 272696576,PERF_COUNTER_TEXT = 2816,PERF_COUNTER_RAWCOUNT = 65536,PERF_COUNTER_LARGE_RAWCOUNT = 65792,PERF_COUNTER_RAWCOUNT_HEX = 0,PERF_COUNTER_LARGE_RAWCOUNT_HEX = 256,PERF_SAMPLE_FRACTION = 549585920,PERF_SAMPLE_COUNTER = 4260864,PERF_COUNTER_NODATA = 1073742336,PERF_COUNTER_TIMER_INV = 557909248,PERF_SAMPLE_BASE = 1073939457,PERF_AVERAGE_TIMER = 805438464,PERF_AVERAGE_BASE = 1073939458,PERF_AVERAGE_BULK = 1073874176,PERF_100NSEC_TIMER = 542180608,PERF_100NSEC_TIMER_INV = 558957824,PERF_COUNTER_MULTI_TIMER = 574686464,PERF_COUNTER_MULTI_TIMER_INV = 591463680,PERF_COUNTER_MULTI_BASE = 1107494144,PERF_100NSEC_MULTI_TIMER = 575735040,PERF_100NSEC_MULTI_TIMER_INV = 592512256,PERF_RAW_FRACTION = 537003008,PERF_RAW_BASE = 1073939459,PERF_ELAPSED_TIME = 807666944,PERF_COUNTER_HISTOGRAM_TYPE = -2147483648,PERF_COUNTER_DELTA = 4195328,PERF_COUNTER_LARGE_DELTA = 4195584,PERF_DETAIL_NOVICE = 100,PERF_DETAIL_ADVANCED = 200,PERF_DETAIL_EXPERT = 300,PERF_DETAIL_WIZARD = 400,PERF_NO_UNIQUE_ID = -1,PERF_QUERY_OBJECTS = -2147483648,PERF_QUERY_GLOBAL = -2147483647,PERF_QUERY_COSTLY = -2147483646,};
enum MACRO_PERM {PERM_FILE_READ = 0x1,PERM_FILE_WRITE = 0x2,PERM_FILE_CREATE = 0x4,};
enum MACRO_PIPE {PIPE_ACCESS_INBOUND = 0x1,PIPE_ACCESS_OUTBOUND = 0x2,PIPE_ACCESS_DUPLEX = 0x3,PIPE_CLIENT_END = 0x0,PIPE_SERVER_END = 0x1,PIPE_WAIT = 0x0,PIPE_NOWAIT = 0x1,PIPE_READMODE_BYTE = 0x0,PIPE_READMODE_MESSAGE = 0x2,PIPE_TYPE_BYTE = 0x0,PIPE_TYPE_MESSAGE = 0x4,PIPE_UNLIMITED_INSTANCES = 0xFF,};
enum MACRO_PKCS {PKCS_7_ASN_ENCODING = 0x10000,PKCS_7_NDR_ENCODING = 0x20000,};
enum MACRO_PLAY {PLAY_VERSION_10_DATA = 0,PLAY_VERSION_20_DATA = 1,};
enum MACRO_PMIR {PMIR_OK = 0,PMIR_INDEX = -1,PMIR_VALUE = -2,PMIR_INVALIDBOXEDITINFO = -3,PMIR_INIERROR = -4,PMIR_ERROR = -5,PMIR_NA = -6,};
enum MACRO_PMSC {PMSC_BEDITCHANGE = 1,PMSC_GETPCMINFO = 5,PMSC_SETPCMINFO = 6,PMSC_GETINKINGINFO = 7,PMSC_SETINKINGINFO = 8,PMSC_GETHRC = 9,PMSC_SETHRC = 10,PMSC_GETSYMBOLCOUNT = 11,PMSC_GETSYMBOLS = 12,PMSC_SETSYMBOLS = 13,PMSC_LOADPW = 15,PMSC_INKSTOP = 16,};
enum MACRO_PMSG {PMSG_START_STAT = 0x11,PMSG_STOP_STAT = 0x12,};
enum MACRO_POP3 {POP3_MD_ID_BEGIN_RESERVED = 0xA000,POP3_MD_ID_END_RESERVED = 0xAFFF,};
enum MACRO_PORT {PORT_TYPE_WRITE = 0x1,PORT_TYPE_READ = 0x2,PORT_TYPE_REDIRECTED = 0x4,PORT_TYPE_NET_ATTACHED = 0x8,PORT_STATUS_TYPE_ERROR = 0x1,PORT_STATUS_TYPE_WARNING = 0x2,PORT_STATUS_TYPE_INFO = 0x3,PORT_STATUS_OFFLINE = 0x1,PORT_STATUS_PAPER_JAM = 0x2,PORT_STATUS_PAPER_OUT = 0x3,PORT_STATUS_OUTPUT_BIN_FULL = 0x4,PORT_STATUS_PAPER_PROBLEM = 0x5,PORT_STATUS_NO_TONER = 0x6,PORT_STATUS_DOOR_OPEN = 0x7,PORT_STATUS_USER_INTERVENTION = 0x8,PORT_STATUS_OUT_OF_MEMORY = 0x9,PORT_STATUS_TONER_LOW = 0xA,PORT_STATUS_WARMING_UP = 0xB,PORT_STATUS_POWER_SAVE = 0xC,};
enum MACRO_POST {POST = 3,};
enum MACRO_PRGE {PRGE = 3,PREQ = 4,};
enum MACRO_PRIO {PRIO_URGENT = 1,PRIO_NORMAL = 0,PRIO_NONURGENT = -1,};
enum MACRO_PRLT {PRLT = 0,PRLE = 1,PRGT = 2,};
enum MACRO_PRNE {PRNE = 5,};
enum MACRO_PROP {PROP_SM_CXDLG = 212,PROP_SM_CYDLG = 188,PROP_MED_CXDLG = 227,PROP_MED_CYDLG = 215,PROP_LG_CXDLG = 252,PROP_LG_CYDLG = 218,};
enum MACRO_PROV {PROV_RSA_FULL = 1,PROV_RSA_SIG = 2,PROV_DSS = 3,PROV_FORTEZZA = 4,PROV_MS_EXCHANGE = 5,PROV_SSL = 6,PROV_RSA_SCHANNEL = 12,PROV_DSS_DH = 13,PROV_EC_ECDSA_SIG = 14,PROV_EC_ECNRA_SIG = 15,PROV_EC_ECDSA_FULL = 16,PROV_EC_ECNRA_FULL = 17,PROV_SPYRUS_LYNKS = 20,PROV_STT_MER = 7,PROV_STT_ACQ = 8,PROV_STT_BRND = 9,PROV_STT_ROOT = 10,PROV_STT_ISS = 11,};
enum MACRO_PSCB {PSCB_INITIALIZED = 1,PSCB_PRECREATE = 2,};
enum MACRO_PSTF {PSTF_NO_ENCRYPTION = 0x80000000,PSTF_COMPRESSABLE_ENCRYPTION = 0x40000000,PSTF_BEST_ENCRYPTION = 0x20000000,};
enum MACRO_RAND {RAND_MAX = 0x7FFF,};
enum MACRO_RBBS {RBBS_BREAK = 0x1,RBBS_FIXEDSIZE = 0x2,RBBS_CHILDEDGE = 0x4,RBBS_HIDDEN = 0x8,RBBS_NOVERT = 0x10,RBBS_FIXEDBMP = 0x20,RBBS_VARIABLEHEIGHT = 0x40,RBBS_GRIPPERALWAYS = 0x80,RBBS_NOGRIPPER = 0x100,};
enum MACRO_RBHT {RBHT_NOWHERE = 0x1,RBHT_CAPTION = 0x2,RBHT_CLIENT = 0x3,RBHT_GRABBER = 0x4,};
enum MACRO_RBIM {RBIM_IMAGELIST = 0x1,};
enum MACRO_RBNM {RBNM_ID = 0x1,RBNM_STYLE = 0x2,RBNM_LPARAM = 0x4,};
enum MACRO_READ {READ_CONTROL = 0x20000,};
enum MACRO_RECO {RECO_PASTE = 0x0,RECO_DROP = 0x1,RECO_COPY = 0x2,RECO_CUT = 0x3,RECO_DRAG = 0x4,};
enum MACRO_REPL {REPL_ROLE_EXPORT = 1,REPL_ROLE_IMPORT = 2,REPL_ROLE_BOTH = 3,REPL_INTERVAL_INFOLEVEL = 1000,REPL_PULSE_INFOLEVEL = 1001,REPL_GUARDTIME_INFOLEVEL = 1002,REPL_RANDOM_INFOLEVEL = 1003,REPL_INTEGRITY_FILE = 1,REPL_INTEGRITY_TREE = 2,REPL_EXTENT_FILE = 1,REPL_EXTENT_TREE = 2,REPL_EXPORT_INTEGRITY_INFOLEVEL = 1000,REPL_EXPORT_EXTENT_INFOLEVEL = 1001,REPL_UNLOCK_NOFORCE = 0,REPL_UNLOCK_FORCE = 1,REPL_STATE_OK = 0,REPL_STATE_NO_MASTER = 1,REPL_STATE_NO_SYNC = 2,REPL_STATE_NEVER_REPLICATED = 3,};
enum MACRO_REQU {REQU = 1,RSPOK = 2,};
enum MACRO_ROLE {ROLE_SYSTEM_TITLEBAR = 0x1,ROLE_SYSTEM_MENUBAR = 0x2,ROLE_SYSTEM_SCROLLBAR = 0x3,ROLE_SYSTEM_GRIP = 0x4,ROLE_SYSTEM_SOUND = 0x5,ROLE_SYSTEM_CURSOR = 0x6,ROLE_SYSTEM_CARET = 0x7,ROLE_SYSTEM_ALERT = 0x8,ROLE_SYSTEM_WINDOW = 0x9,ROLE_SYSTEM_CLIENT = 0xA,ROLE_SYSTEM_MENUPOPUP = 0xB,ROLE_SYSTEM_MENUITEM = 0xC,ROLE_SYSTEM_TOOLTIP = 0xD,ROLE_SYSTEM_APPLICATION = 0xE,ROLE_SYSTEM_DOCUMENT = 0xF,ROLE_SYSTEM_PANE = 0x10,ROLE_SYSTEM_CHART = 0x11,ROLE_SYSTEM_DIALOG = 0x12,ROLE_SYSTEM_BORDER = 0x13,ROLE_SYSTEM_GROUPING = 0x14,ROLE_SYSTEM_SEPARATOR = 0x15,ROLE_SYSTEM_TOOLBAR = 0x16,ROLE_SYSTEM_STATUSBAR = 0x17,ROLE_SYSTEM_TABLE = 0x18,ROLE_SYSTEM_COLUMNHEADER = 0x19,ROLE_SYSTEM_ROWHEADER = 0x1A,ROLE_SYSTEM_COLUMN = 0x1B,ROLE_SYSTEM_ROW = 0x1C,ROLE_SYSTEM_CELL = 0x1D,ROLE_SYSTEM_LINK = 0x1E,ROLE_SYSTEM_HELPBALLOON = 0x1F,ROLE_SYSTEM_CHARACTER = 0x20,ROLE_SYSTEM_LIST = 0x21,ROLE_SYSTEM_LISTITEM = 0x22,ROLE_SYSTEM_OUTLINE = 0x23,ROLE_SYSTEM_OUTLINEITEM = 0x24,ROLE_SYSTEM_PAGETAB = 0x25,ROLE_SYSTEM_PROPERTYPAGE = 0x26,ROLE_SYSTEM_INDICATOR = 0x27,ROLE_SYSTEM_GRAPHIC = 0x28,ROLE_SYSTEM_STATICTEXT = 0x29,ROLE_SYSTEM_TEXT = 0x2A,ROLE_SYSTEM_PUSHBUTTON = 0x2B,ROLE_SYSTEM_CHECKBUTTON = 0x2C,ROLE_SYSTEM_RADIOBUTTON = 0x2D,ROLE_SYSTEM_COMBOBOX = 0x2E,ROLE_SYSTEM_DROPLIST = 0x2F,ROLE_SYSTEM_PROGRESSBAR = 0x30,ROLE_SYSTEM_DIAL = 0x31,ROLE_SYSTEM_HOTKEYFIELD = 0x32,ROLE_SYSTEM_SLIDER = 0x33,ROLE_SYSTEM_SPINBUTTON = 0x34,ROLE_SYSTEM_DIAGRAM = 0x35,ROLE_SYSTEM_ANIMATION = 0x36,ROLE_SYSTEM_EQUATION = 0x37,ROLE_SYSTEM_BUTTONDROPDOWN = 0x38,ROLE_SYSTEM_BUTTONMENU = 0x39,ROLE_SYSTEM_BUTTONDROPDOWNGRID = 0x3A,ROLE_SYSTEM_WHITESPACE = 0x3B,ROLE_SYSTEM_PAGETABLIST = 0x3C,ROLE_SYSTEM_CLOCK = 0x3D,};
enum MACRO_RSVP {RSVP_OBJECT_ID_BASE = 1000,RSVP_OBJECT_STATUS_INFO = 1000,RSVP_OBJECT_RESERVE_INFO = 1001,RSVP_OBJECT_ADSPEC = 1002,};
enum MACRO_RULE {RULE_ERR_UNKNOWN = 1,RULE_ERR_LOAD = 2,RULE_ERR_DELIVERY = 3,RULE_ERR_PARSING = 4,RULE_ERR_CREATE_DAE = 5,RULE_ERR_NO_FOLDER = 6,RULE_ERR_NO_RIGHTS = 7,RULE_ERR_CREATE_DAM = 8,RULE_ERR_NO_SENDAS = 9,RULE_ERR_NO_TEMPLATE = 10,RULE_ERR_EXECUTION = 11,RULE_ERR_QUOTA_EXCEEDED = 12,RULE_ERR_FIRST = 1,RULE_ERR_LAST = 12,};
enum MACRO_SAVE {SAVE_FORMAT_TEXT = 1,SAVE_FORMAT_RICHTEXT = 2,};
enum MACRO_SBSP {SBSP_DEFBROWSER = 0x0,SBSP_SAMEBROWSER = 0x1,SBSP_NEWBROWSER = 0x2,SBSP_DEFMODE = 0x0,SBSP_OPENMODE = 0x10,SBSP_EXPLOREMODE = 0x20,SBSP_ABSOLUTE = 0x0,SBSP_RELATIVE = 0x1000,SBSP_PARENT = 0x2000,SBSP_NAVIGATEBACK = 0x4000,SBSP_NAVIGATEFORWARD = 0x8000,SBSP_ALLOW_AUTONAVIGATE = 0x10000,SBSP_INITIATEDBYHLINKFRAME = 0x80000000,SBSP_REDIRECT = 0x40000000,SBSP_WRITENOHISTORY = 0x8000000,SBSP_NOAUTOSELECT = 0x4000000,};
enum MACRO_SCIM {SCIM_INSERT = 0,SCIM_OVERWRITE = 1,};
enum MACRO_SCRM {SCRM_VERIFYPW = 32768,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SESS {SESS_GUEST = 0x1,SESS_NOENCRYPTION = 0x2,};
enum MACRO_SFSP {SFSP_ACCESS_OWNER = 0x8000,};
enum MACRO_SGNR {SGNR_TYPE_TIMESTAMP = 0x10,};
enum MACRO_SHOW {SHOW_OPENWINDOW = 1,SHOW_ICONWINDOW = 2,SHOW_FULLSCREEN = 3,SHOW_OPENNOACTIVATE = 4,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SITE {SITE_FILTER = 1,MACHINE_FILTER = 2,GROUP_FILTER = 3,JOB_FILTER = 4,ARCHITECTURE_FILTER = 5,PACKAGE_FILTER = 6,ATTRIBUTE_FILTER = 7,SITELIMIT_FILTER = 8,};
enum MACRO_SIZE {SIZE_OF_80387_REGISTERS = 80,};
enum MACRO_SMTO {SMTO_NORMAL = 0x0,SMTO_BLOCK = 0x1,SMTO_ABORTIFHUNG = 0x2,SMTO_NOTIMEOUTIFNOTHUNG = 0x8,};
enum MACRO_SMTP {SMTP_MD_ID_BEGIN_RESERVED = 0x9000,SMTP_MD_ID_END_RESERVED = 0x9FFF,};
enum MACRO_SNMP {SNMP_PDU_GET = 0xA0,SNMP_PDU_GETNEXT = 0xA1,SNMP_PDU_RESPONSE = 0xA2,SNMP_PDU_SET = 0xA3,SNMP_PDU_V1TRAP = 0xA4,SNMP_PDU_GETBULK = 0xA5,SNMP_PDU_INFORM = 0xA6,SNMP_PDU_TRAP = 0xA7,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SORT {SORT_DEFAULT = 0x0,SORT_JAPANESE_XJIS = 0x0,SORT_JAPANESE_UNICODE = 0x1,SORT_CHINESE_BIG5 = 0x0,SORT_CHINESE_PRCP = 0x0,SORT_CHINESE_UNICODE = 0x1,SORT_CHINESE_PRC = 0x2,SORT_CHINESE_BOPOMOFO = 0x3,SORT_KOREAN_KSC = 0x0,SORT_KOREAN_UNICODE = 0x1,SORT_GERMAN_PHONE_BOOK = 0x1,SORT_HUNGARIAN_DEFAULT = 0x0,SORT_HUNGARIAN_TECHNICAL = 0x1,SORT_GEORGIAN_TRADITIONAL = 0x0,SORT_GEORGIAN_MODERN = 0x1,};
enum MACRO_SPID {SPID_ACTIVE = 1,SPID_DEFAULT = 2,SPID_REMOVED = 4,};
enum MACRO_SPIF {SPIF_UPDATEINIFILE = 0x1,SPIF_SENDWININICHANGE = 0x2,SPIF_SENDCHANGE = 0x2,};
enum MACRO_SPWP {SPWP_USE_DEVINFO_DATA = 0x1,};
enum MACRO_SSGF {SSGF_NONE = 0,SSGF_DISPLAY = 3,};
enum MACRO_SSTF {SSTF_NONE = 0,SSTF_CHARS = 1,SSTF_BORDER = 2,SSTF_DISPLAY = 3,};
enum MACRO_SSWF {SSWF_NONE = 0,SSWF_TITLE = 1,SSWF_WINDOW = 2,SSWF_DISPLAY = 3,SSWF_CUSTOM = 4,};
enum MACRO_STAT {STAT_FRAME_SIZE = 1024,};
enum MACRO_STGM {STGM_DIRECT = 0x0,STGM_TRANSACTED = 0x10000,STGM_SIMPLE = 0x8000000,STGM_READ = 0x0,STGM_WRITE = 0x1,STGM_READWRITE = 0x2,STGM_SHARE_DENY_NONE = 0x40,STGM_SHARE_DENY_READ = 0x30,STGM_SHARE_DENY_WRITE = 0x20,STGM_SHARE_EXCLUSIVE = 0x10,STGM_PRIORITY = 0x40000,STGM_DELETEONRELEASE = 0x4000000,STGM_NOSCRATCH = 0x100000,STGM_CREATE = 0x1000,STGM_CONVERT = 0x20000,STGM_FAILIFTHERE = 0x0,STGM_NOSNAPSHOT = 0x200000,};
enum MACRO_STIF {STIF_DEFAULT = 0x0,STIF_SUPPORT_HEX = 0x1,};
enum MACRO_STOP {STOP_SEARCH = 0x1,RESTART_SEARCH = 0x2,RECURSIVE_SEARCH = 0x4,SHALLOW_SEARCH = 0x8,FOREGROUND_SEARCH = 0x10,BACKGROUND_SEARCH = 0x20,};
enum MACRO_SVI1 {SVI1_NUM_ELEMENTS = 5,SVI2_NUM_ELEMENTS = 40,SVI3_NUM_ELEMENTS = 44,};
enum MACRO_SVSI {SVSI_DESELECT = 0x0,SVSI_SELECT = 0x1,SVSI_EDIT = 0x3,SVSI_DESELECTOTHERS = 0x4,SVSI_ENSUREVISIBLE = 0x8,SVSI_FOCUSED = 0x10,SVSI_TRANSLATEPT = 0x20,};
enum MACRO_SYMF {SYMF_OMAP_GENERATED = 0x1,SYMF_OMAP_MODIFIED = 0x2,};
enum MACRO_SYNC {SYNC_E_UNKNOWN_FLAGS = -2147221242,SYNC_E_INVALID_PARAMETER = -2147024809,SYNC_E_ERROR = -2147467259,SYNC_E_OBJECT_DELETED = -2147219456,SYNC_E_IGNORE = -2147219455,SYNC_E_CONFLICT = -2147219454,SYNC_E_NO_PARENT = -2147219453,SYNC_E_INCEST = -2147219452,SYNC_E_UNSYNCHRONIZED = -2147219451,SYNC_W_PROGRESS = 264224,SYNC_W_CLIENT_CHANGE_NEWER = 264225,SYNC_UNICODE = 1,SYNC_NO_DELETIONS = 2,SYNC_NO_SOFT_DELETIONS = 4,SYNC_READ_STATE = 8,SYNC_ASSOCIATED = 16,SYNC_NORMAL = 32,SYNC_NO_CONFLICTS = 64,SYNC_ONLY_SPECIFIED_PROPS = 128,SYNC_NO_FOREIGN_KEYS = 256,SYNC_LIMITED_IMESSAGE = 512,SYNC_SOFT_DELETE = 1,SYNC_EXPIRY = 2,SYNC_READ = 1,};
enum MACRO_S_OK {S_OK = 0x0,S_FALSE = 0x1,};
enum MACRO_TAPE {TAPE_ERASE_SHORT = 0,TAPE_ERASE_LONG = 1,TAPE_LOAD = 0,TAPE_UNLOAD = 1,TAPE_TENSION = 2,TAPE_LOCK = 3,TAPE_UNLOCK = 4,TAPE_FORMAT = 5,TAPE_SETMARKS = 0,TAPE_FILEMARKS = 1,TAPE_SHORT_FILEMARKS = 2,TAPE_LONG_FILEMARKS = 3,TAPE_ABSOLUTE_POSITION = 0,TAPE_LOGICAL_POSITION = 1,TAPE_PSEUDO_LOGICAL_POSITION = 2,TAPE_REWIND = 0,TAPE_ABSOLUTE_BLOCK = 1,TAPE_LOGICAL_BLOCK = 2,TAPE_PSEUDO_LOGICAL_BLOCK = 3,TAPE_SPACE_END_OF_DATA = 4,TAPE_SPACE_RELATIVE_BLOCKS = 5,TAPE_SPACE_FILEMARKS = 6,TAPE_SPACE_SEQUENTIAL_FMKS = 7,TAPE_SPACE_SETMARKS = 8,TAPE_SPACE_SEQUENTIAL_SMKS = 9,TAPE_DRIVE_FIXED = 1,TAPE_DRIVE_SELECT = 2,TAPE_DRIVE_INITIATOR = 4,TAPE_DRIVE_ERASE_SHORT = 16,TAPE_DRIVE_ERASE_LONG = 32,TAPE_DRIVE_ERASE_BOP_ONLY = 64,TAPE_DRIVE_ERASE_IMMEDIATE = 128,TAPE_DRIVE_TAPE_CAPACITY = 256,TAPE_DRIVE_TAPE_REMAINING = 512,TAPE_DRIVE_FIXED_BLOCK = 1024,TAPE_DRIVE_VARIABLE_BLOCK = 2048,TAPE_DRIVE_WRITE_PROTECT = 4096,TAPE_DRIVE_EOT_WZ_SIZE = 8192,TAPE_DRIVE_ECC = 65536,TAPE_DRIVE_COMPRESSION = 131072,TAPE_DRIVE_PADDING = 262144,TAPE_DRIVE_REPORT_SMKS = 524288,TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576,TAPE_DRIVE_GET_LOGICAL_BLK = 2097152,TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304,TAPE_DRIVE_EJECT_MEDIA = 16777216,TAPE_DRIVE_CLEAN_REQUESTS = 33554432,TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864,TAPE_DRIVE_RESERVED_BIT = -2147483648,TAPE_DRIVE_LOAD_UNLOAD = -2147483647,TAPE_DRIVE_TENSION = -2147483646,TAPE_DRIVE_LOCK_UNLOCK = -2147483644,TAPE_DRIVE_REWIND_IMMEDIATE = -2147483640,TAPE_DRIVE_SET_BLOCK_SIZE = -2147483632,TAPE_DRIVE_LOAD_UNLD_IMMED = -2147483616,TAPE_DRIVE_TENSION_IMMED = -2147483584,TAPE_DRIVE_LOCK_UNLK_IMMED = -2147483520,TAPE_DRIVE_SET_ECC = -2147483392,TAPE_DRIVE_SET_COMPRESSION = -2147483136,TAPE_DRIVE_SET_PADDING = -2147482624,TAPE_DRIVE_SET_REPORT_SMKS = -2147481600,TAPE_DRIVE_ABSOLUTE_BLK = -2147479552,TAPE_DRIVE_ABS_BLK_IMMED = -2147475456,TAPE_DRIVE_LOGICAL_BLK = -2147467264,TAPE_DRIVE_LOG_BLK_IMMED = -2147450880,TAPE_DRIVE_END_OF_DATA = -2147418112,TAPE_DRIVE_RELATIVE_BLKS = -2147352576,TAPE_DRIVE_FILEMARKS = -2147221504,TAPE_DRIVE_SEQUENTIAL_FMKS = -2146959360,TAPE_DRIVE_SETMARKS = -2146435072,TAPE_DRIVE_SEQUENTIAL_SMKS = -2145386496,TAPE_DRIVE_REVERSE_POSITION = -2143289344,TAPE_DRIVE_SPACE_IMMEDIATE = -2139095040,TAPE_DRIVE_WRITE_SETMARKS = -2130706432,TAPE_DRIVE_WRITE_FILEMARKS = -2113929216,TAPE_DRIVE_WRITE_SHORT_FMKS = -2080374784,TAPE_DRIVE_WRITE_LONG_FMKS = -2013265920,TAPE_DRIVE_WRITE_MARK_IMMED = -1879048192,TAPE_DRIVE_FORMAT = -1610612736,TAPE_DRIVE_FORMAT_IMMEDIATE = -1073741824,TAPE_DRIVE_HIGH_FEATURES = -2147483648,TAPE_FIXED_PARTITIONS = 0,TAPE_SELECT_PARTITIONS = 1,TAPE_INITIATOR_PARTITIONS = 2,};
enum MACRO_TAPI {TAPI_CURRENT_VERSION = 0x20002,};
enum MACRO_TASK {TASK_SUNDAY = 0x1,TASK_MONDAY = 0x2,TASK_TUESDAY = 0x4,TASK_WEDNESDAY = 0x8,TASK_THURSDAY = 0x10,TASK_FRIDAY = 0x20,TASK_SATURDAY = 0x40,TASK_FIRST_WEEK = 0x1,TASK_SECOND_WEEK = 0x2,TASK_THIRD_WEEK = 0x3,TASK_FOURTH_WEEK = 0x4,TASK_LAST_WEEK = 0x5,TASK_JANUARY = 0x1,TASK_FEBRUARY = 0x2,TASK_MARCH = 0x4,TASK_APRIL = 0x8,TASK_MAY = 0x10,TASK_JUNE = 0x20,TASK_JULY = 0x40,TASK_AUGUST = 0x80,TASK_SEPTEMBER = 0x100,TASK_OCTOBER = 0x200,TASK_NOVEMBER = 0x400,TASK_DECEMBER = 0x800,TASK_FLAG_INTERACTIVE = 0x1,TASK_FLAG_DELETE_WHEN_DONE = 0x2,TASK_FLAG_DISABLED = 0x4,TASK_FLAG_START_ONLY_IF_IDLE = 0x10,TASK_FLAG_KILL_ON_IDLE_END = 0x20,TASK_FLAG_DONT_START_IF_ON_BATTERIES = 0x40,TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = 0x80,TASK_FLAG_RUN_ONLY_IF_DOCKED = 0x100,TASK_FLAG_HIDDEN = 0x200,TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = 0x400,TASK_FLAG_RESTART_ON_IDLE_RESUME = 0x800,TASK_FLAG_SYSTEM_REQUIRED = 0x1000,TASK_TRIGGER_FLAG_HAS_END_DATE = 0x1,TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = 0x2,TASK_TRIGGER_FLAG_DISABLED = 0x4,TASK_MAX_RUN_TIMES = 0x5A0,};
enum MACRO_TBBF {TBBF_LARGE = 0x1,};
enum MACRO_TBCD {TBCD_TICS = 0x1,TBCD_THUMB = 0x2,TBCD_CHANNEL = 0x3,};
enum MACRO_TBIF {TBIF_IMAGE = 0x1,TBIF_TEXT = 0x2,TBIF_STATE = 0x4,TBIF_STYLE = 0x8,TBIF_LPARAM = 0x10,TBIF_COMMAND = 0x20,TBIF_SIZE = 0x40,};
enum MACRO_TBNF {TBNF_IMAGE = 0x1,TBNF_TEXT = 0x2,TBNF_DI_SETITEM = 0x10000000,};
enum MACRO_TBTS {TBTS_TOP = 0,TBTS_LEFT = 1,TBTS_BOTTOM = 2,TBTS_RIGHT = 3,};
enum MACRO_TCHT {TCHT_NOWHERE = 0x1,TCHT_ONITEMICON = 0x2,TCHT_ONITEMLABEL = 0x4,TCHT_ONITEM = 0x6,};
enum MACRO_TCIF {TCIF_TEXT = 0x1,TCIF_IMAGE = 0x2,TCIF_RTLREADING = 0x4,TCIF_PARAM = 0x8,TCIF_STATE = 0x10,};
enum MACRO_TCIS {TCIS_BUTTONPRESSED = 0x1,TCIS_HIGHLIGHTED = 0x2,};
enum MACRO_TIME {TIME_ZONE_ID_UNKNOWN = 0,TIME_ZONE_ID_STANDARD = 1,TIME_ZONE_ID_DAYLIGHT = 2,};
enum MACRO_TMER {TMER_TMERR = -1,TMER_INVAL = -2,TMER_PROTO = -3,};
enum MACRO_TMPF {TMPF_FIXED_PITCH = 0x1,TMPF_VECTOR = 0x2,TMPF_DEVICE = 0x8,TMPF_TRUETYPE = 0x4,};
enum MACRO_TNEF {TNEF_DECODE = 0,TNEF_ENCODE = 2,TNEF_PURE = 65536,TNEF_COMPATIBILITY = 131072,TNEF_BEST_DATA = 262144,TNEF_COMPONENT_ENCODING = 2147483648,TNEF_PROP_INCLUDE = 1,TNEF_PROP_EXCLUDE = 2,TNEF_PROP_CONTAINED = 4,TNEF_PROP_MESSAGE_ONLY = 8,TNEF_PROP_ATTACHMENTS_ONLY = 16,TNEF_PROP_CONTAINED_TNEF = 64,TNEF_COMPONENT_MESSAGE = 4096,TNEF_COMPONENT_ATTACHMENT = 8192,TNEF_SIGNATURE = 574529400,TNEF_VERSION = 65536,};
enum MACRO_TSPI {TSPI_MESSAGE_BASE = 500,};
enum MACRO_TTDT {TTDT_AUTOMATIC = 0,TTDT_RESHOW = 1,TTDT_AUTOPOP = 2,TTDT_INITIAL = 3,};
enum MACRO_TVGN {TVGN_ROOT = 0x0,TVGN_NEXT = 0x1,TVGN_PREVIOUS = 0x2,TVGN_PARENT = 0x3,TVGN_CHILD = 0x4,TVGN_FIRSTVISIBLE = 0x5,TVGN_NEXTVISIBLE = 0x6,TVGN_PREVIOUSVISIBLE = 0x7,TVGN_DROPHILITE = 0x8,TVGN_CARET = 0x9,TVGN_LASTVISIBLE = 0xA,};
enum MACRO_TVHT {TVHT_NOWHERE = 0x1,TVHT_ONITEMICON = 0x2,TVHT_ONITEMLABEL = 0x4,TVHT_ONITEMINDENT = 0x8,TVHT_ONITEMBUTTON = 0x10,TVHT_ONITEMRIGHT = 0x20,TVHT_ONITEMSTATEICON = 0x40,TVHT_ABOVE = 0x100,TVHT_BELOW = 0x200,TVHT_TORIGHT = 0x400,TVHT_TOLEFT = 0x800,};
enum MACRO_TVIF {TVIF_TEXT = 0x1,TVIF_IMAGE = 0x2,TVIF_PARAM = 0x4,TVIF_STATE = 0x8,TVIF_HANDLE = 0x10,TVIF_SELECTEDIMAGE = 0x20,TVIF_CHILDREN = 0x40,TVIF_INTEGRAL = 0x80,};
enum MACRO_TVIS {TVIS_SELECTED = 0x2,TVIS_CUT = 0x4,TVIS_DROPHILITED = 0x8,TVIS_BOLD = 0x10,TVIS_EXPANDED = 0x20,TVIS_EXPANDEDONCE = 0x40,TVIS_EXPANDPARTIAL = 0x80,TVIS_OVERLAYMASK = 0xF00,TVIS_STATEIMAGEMASK = 0xF000,TVIS_USERMASK = 0xF000,};
enum MACRO_UINT {UINT_MAX = 0xFFFFFFFF,};
enum MACRO_USER {USER_CALL_IS_ASYNC = 0x100,USER_MARSHAL_FC_BYTE = 0x1,USER_MARSHAL_FC_CHAR = 0x2,USER_MARSHAL_FC_SMALL = 0x3,USER_MARSHAL_FC_USMALL = 0x4,USER_MARSHAL_FC_WCHAR = 0x5,USER_MARSHAL_FC_SHORT = 0x6,USER_MARSHAL_FC_USHORT = 0x7,USER_MARSHAL_FC_LONG = 0x8,USER_MARSHAL_FC_ULONG = 0x9,USER_MARSHAL_FC_FLOAT = 0xA,USER_MARSHAL_FC_HYPER = 0xB,USER_MARSHAL_FC_DOUBLE = 0xC,};
enum MACRO_VFFF {VFFF_ISSHAREDFILE = 0x1,};
enum MACRO_VFT2 {VFT2_UNKNOWN = 0x0,VFT2_DRV_PRINTER = 0x1,VFT2_DRV_KEYBOARD = 0x2,VFT2_DRV_LANGUAGE = 0x3,VFT2_DRV_DISPLAY = 0x4,VFT2_DRV_MOUSE = 0x5,VFT2_DRV_NETWORK = 0x6,VFT2_DRV_SYSTEM = 0x7,VFT2_DRV_INSTALLABLE = 0x8,VFT2_DRV_SOUND = 0x9,VFT2_DRV_COMM = 0xA,VFT2_DRV_INPUTMETHOD = 0xB,VFT2_FONT_RASTER = 0x1,VFT2_FONT_VECTOR = 0x2,VFT2_FONT_TRUETYPE = 0x3,};
enum MACRO_VHDR {VHDR_DONE = 0x1,VHDR_PREPARED = 0x2,VHDR_INQUEUE = 0x4,VHDR_KEYFRAME = 0x8,};
enum MACRO_VIEW {VIEW_E_FIRST = 0x80040140,VIEW_E_LAST = 0x8004014F,VIEW_S_FIRST = 0x40140,VIEW_S_LAST = 0x4014F,};
enum MACRO_VIFF {VIFF_FORCEINSTALL = 0x1,VIFF_DONTDELETEOLD = 0x2,};
enum MACRO_VPDF {VPDF_DISABLEPWRMGMT = 0x1,VPDF_FORCEAPM10MODE = 0x2,VPDF_SKIPINTELSLCHECK = 0x4,VPDF_DISABLEPWRSTATUSPOLL = 0x8,VPDF_DISABLERINGRESUME = 0x10,VPDF_SHOWMULTIBATT = 0x20,};
enum MACRO_VSAM {VSAM = 21,};
enum MACRO_VSOF {VSOF_CLONEABLE = 0x40000000,VSOF_UNIQUEFILENAME = 0x80000000,};
enum MACRO_VVSO {VVSO_MODE = 0x7001,VVSO_BYTESPENDING = 0x7002,};
enum MACRO_WAIT {WAIT_FAILED = 0xFFFFFFFF,WAIT_OBJECT_0 = 0x0,WAIT_ABANDONED = 0x80,WAIT_ABANDONED_0 = 0x80,WAIT_TIMEOUT = 0x102,WAIT_IO_COMPLETION = 0xC0,};
enum MACRO_WAVE {WAVE_MAPPER = 4294967295,WAVE_FORMAT_QUERY = 1,WAVE_ALLOWSYNC = 2,WAVE_MAPPED = 4,WAVE_FORMAT_DIRECT = 8,WAVE_FORMAT_DIRECT_QUERY = 9,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WHDR {WHDR_DONE = 0x1,WHDR_PREPARED = 0x2,WHDR_BEGINLOOP = 0x4,WHDR_ENDLOOP = 0x8,WHDR_INQUEUE = 0x10,};
enum MACRO_WLUA {WLUA_NTFY_EVENT = 1,WLUA_NTFY_MSG_CORRELATOR = 2,WLUA_NTFY_MSG_SID = 3,};
enum MACRO_WMSZ {WMSZ_LEFT = 1,WMSZ_RIGHT = 2,WMSZ_TOP = 3,WMSZ_TOPLEFT = 4,WMSZ_TOPRIGHT = 5,WMSZ_BOTTOM = 6,WMSZ_BOTTOMLEFT = 7,WMSZ_BOTTOMRIGHT = 8,};
enum MACRO_WNNC {WNNC_NET_MSNET = 0x10000,WNNC_NET_LANMAN = 0x20000,WNNC_NET_NETWARE = 0x30000,WNNC_NET_VINES = 0x40000,WNNC_NET_10NET = 0x50000,WNNC_NET_LOCUS = 0x60000,WNNC_NET_SUN_PC_NFS = 0x70000,WNNC_NET_LANSTEP = 0x80000,WNNC_NET_9TILES = 0x90000,WNNC_NET_LANTASTIC = 0xA0000,WNNC_NET_AS400 = 0xB0000,WNNC_NET_FTP_NFS = 0xC0000,WNNC_NET_PATHWORKS = 0xD0000,WNNC_NET_LIFENET = 0xE0000,WNNC_NET_POWERLAN = 0xF0000,WNNC_NET_BWNFS = 0x100000,WNNC_NET_COGENT = 0x110000,WNNC_NET_FARALLON = 0x120000,WNNC_NET_APPLETALK = 0x130000,WNNC_NET_INTERGRAPH = 0x140000,WNNC_NET_SYMFONET = 0x150000,WNNC_NET_CLEARCASE = 0x160000,WNNC_NET_FRONTIER = 0x170000,WNNC_NET_BMC = 0x180000,WNNC_NET_DCE = 0x190000,WNNC_NET_DECORB = 0x200000,WNNC_NET_PROTSTOR = 0x210000,WNNC_NET_FJ_REDIR = 0x220000,WNNC_NET_DISTINCT = 0x230000,WNNC_NET_TWINS = 0x240000,WNNC_NET_RDR2SAMPLE = 0x250000,};
enum MACRO_WODM {WODM_MAPPER_STATUS = 8192,};
enum MACRO_WORK {WORK_QUEUE_TIMEOUT = 1,THREAD_IDLE_TIMEOUT = 10,};
enum MACRO_WTPF {WTPF_TRUSTTEST = 0x20,WTPF_TESTCANBEVALID = 0x80,WTPF_IGNOREEXPIRATION = 0x100,WTPF_IGNOREREVOKATION = 0x200,WTPF_OFFLINEOK_IND = 0x400,WTPF_OFFLINEOK_COM = 0x800,WTPF_OFFLINEOKNBU_IND = 0x1000,WTPF_OFFLINEOKNBU_COM = 0x2000,WTPF_TIMESTAMP_IND = 0x4000,WTPF_TIMESTAMP_COM = 0x8000,WTPF_VERIFY_V1_OFF = 0x10000,WTPF_IGNOREREVOCATIONONTS = 0x20000,};
enum MACRO_X509 {X509_ASN_ENCODING = 0x1,X509_NDR_ENCODING = 0x2,};
enum MACRO_XAER {XAER_ASYNC = -2,XAER_RMERR = -3,XAER_NOTA = -4,XAER_INVAL = -5,XAER_PROTO = -6,XAER_RMFAIL = -7,XAER_DUPID = -8,XAER_OUTSIDE = -9,};
enum MACRO_XTYP {XTYP_ERROR = 0x8002,XTYP_ADVDATA = 0x4010,XTYP_ADVREQ = 0x2022,XTYP_ADVSTART = 0x1030,XTYP_ADVSTOP = 0x8040,XTYP_EXECUTE = 0x4050,XTYP_CONNECT = 0x1062,XTYP_CONNECT_CONFIRM = 0x8072,XTYP_XACT_COMPLETE = 0x8080,XTYP_POKE = 0x4090,XTYP_REGISTER = 0x80A2,XTYP_REQUEST = 0x20B0,XTYP_DISCONNECT = 0x80C2,XTYP_UNREGISTER = 0x80D2,XTYP_WILDCONNECT = 0x20E2,XTYP_MASK = 0xF0,XTYP_SHIFT = 0x4,};
enum MACRO__CRT {_CRT_WARN = 0,_CRT_ERROR = 1,_CRT_ASSERT = 2,_CRT_ERRCNT = 3,};
enum MACRO__DBL {_DBL_RADIX = 2,_DBL_ROUNDS = 1,};
enum MACRO__FPE {_FPE_INVALID = 0x81,_FPE_DENORMAL = 0x82,_FPE_ZERODIVIDE = 0x83,_FPE_OVERFLOW = 0x84,_FPE_UNDERFLOW = 0x85,_FPE_INEXACT = 0x86,_FPE_UNEMULATED = 0x87,_FPE_SQRTNEG = 0x88,_FPE_STACKOVERFLOW = 0x8A,_FPE_STACKUNDERFLOW = 0x8B,_FPE_EXPLICITGEN = 0x8C,};
enum MACRO__I32 {_I32_MIN = -2147483648,_I32_MAX = 2147483647,};
enum MACRO__I64 {_I64_MIN = -9223372036854775808,_I64_MAX = 9223372036854775807,};
enum MACRO__INC {_INC_MMREG = 146,};
enum MACRO__IOB {_IOB_ENTRIES = 20,};
enum MACRO__MAX {_MAX_PATH = 260,_MAX_DRIVE = 3,_MAX_DIR = 256,_MAX_FNAME = 256,_MAX_EXT = 256,};
enum MACRO__MBC {_MBC_SINGLE = 0,_MBC_LEAD = 1,_MBC_TRAIL = 2,_MBC_ILLEGAL = -1,};
enum MACRO__MCW {_MCW_EM = 0x8001F,};
enum MACRO__OLD {_OLD_P_OVERLAY = 2,};
enum MACRO__OUT {_OUT_TO_DEFAULT = 0,_OUT_TO_STDERR = 1,_OUT_TO_MSGBOX = 2,};
enum MACRO__SYS {_SYS_OPEN = 20,};
enum MACRO_chx1 {chx1 = 0x410,};
enum MACRO_chx2 {chx2 = 0x411,};
enum MACRO_chx3 {chx3 = 0x412,};
enum MACRO_chx4 {chx4 = 0x413,};
enum MACRO_chx5 {chx5 = 0x414,};
enum MACRO_chx6 {chx6 = 0x415,};
enum MACRO_chx7 {chx7 = 0x416,};
enum MACRO_chx8 {chx8 = 0x417,};
enum MACRO_chx9 {chx9 = 0x418,};
enum MACRO_cmb1 {cmb1 = 0x470,};
enum MACRO_cmb2 {cmb2 = 0x471,};
enum MACRO_cmb3 {cmb3 = 0x472,};
enum MACRO_cmb4 {cmb4 = 0x473,};
enum MACRO_cmb5 {cmb5 = 0x474,};
enum MACRO_cmb6 {cmb6 = 0x475,};
enum MACRO_cmb7 {cmb7 = 0x476,};
enum MACRO_cmb8 {cmb8 = 0x477,};
enum MACRO_cmb9 {cmb9 = 0x478,};
enum MACRO_ecOK {ecOK = 0,ecGeneralFailure = 50001,};
enum MACRO_edt1 {edt1 = 0x480,};
enum MACRO_edt2 {edt2 = 0x481,};
enum MACRO_edt3 {edt3 = 0x482,};
enum MACRO_edt4 {edt4 = 0x483,};
enum MACRO_edt5 {edt5 = 0x484,};
enum MACRO_edt6 {edt6 = 0x485,};
enum MACRO_edt7 {edt7 = 0x486,};
enum MACRO_edt8 {edt8 = 0x487,};
enum MACRO_edt9 {edt9 = 0x488,};
enum MACRO_frm1 {frm1 = 0x434,};
enum MACRO_frm2 {frm2 = 0x435,};
enum MACRO_frm3 {frm3 = 0x436,};
enum MACRO_frm4 {frm4 = 0x437,};
enum MACRO_grp1 {grp1 = 0x430,};
enum MACRO_grp2 {grp2 = 0x431,};
enum MACRO_grp3 {grp3 = 0x432,};
enum MACRO_grp4 {grp4 = 0x433,};
enum MACRO_iRED {iRED = 0,iGREEN = 1,iBLUE = 2,iPALETTE = 8,};
enum MACRO_ico1 {ico1 = 0x43C,};
enum MACRO_ico2 {ico2 = 0x43D,};
enum MACRO_ico3 {ico3 = 0x43E,};
enum MACRO_ico4 {ico4 = 0x43F,};
enum MACRO_lst1 {lst1 = 0x460,};
enum MACRO_lst2 {lst2 = 0x461,};
enum MACRO_lst3 {lst3 = 0x462,};
enum MACRO_lst4 {lst4 = 0x463,};
enum MACRO_lst5 {lst5 = 0x464,};
enum MACRO_lst6 {lst6 = 0x465,};
enum MACRO_lst7 {lst7 = 0x466,};
enum MACRO_lst8 {lst8 = 0x467,};
enum MACRO_lst9 {lst9 = 0x468,};
enum MACRO_psh1 {psh1 = 0x400,};
enum MACRO_psh2 {psh2 = 0x401,};
enum MACRO_psh3 {psh3 = 0x402,};
enum MACRO_psh4 {psh4 = 0x403,};
enum MACRO_psh5 {psh5 = 0x404,};
enum MACRO_psh6 {psh6 = 0x405,};
enum MACRO_psh7 {psh7 = 0x406,};
enum MACRO_psh8 {psh8 = 0x407,};
enum MACRO_psh9 {psh9 = 0x408,};
enum MACRO_rad1 {rad1 = 0x420,};
enum MACRO_rad2 {rad2 = 0x421,};
enum MACRO_rad3 {rad3 = 0x422,};
enum MACRO_rad4 {rad4 = 0x423,};
enum MACRO_rad5 {rad5 = 0x424,};
enum MACRO_rad6 {rad6 = 0x425,};
enum MACRO_rad7 {rad7 = 0x426,};
enum MACRO_rad8 {rad8 = 0x427,};
enum MACRO_rad9 {rad9 = 0x428,};
enum MACRO_rct1 {rct1 = 0x438,};
enum MACRO_rct2 {rct2 = 0x439,};
enum MACRO_rct3 {rct3 = 0x43A,};
enum MACRO_rct4 {rct4 = 0x43B,};
enum MACRO_scr1 {scr1 = 0x490,};
enum MACRO_scr2 {scr2 = 0x491,};
enum MACRO_scr3 {scr3 = 0x492,};
enum MACRO_scr4 {scr4 = 0x493,};
enum MACRO_scr5 {scr5 = 0x494,};
enum MACRO_scr6 {scr6 = 0x495,};
enum MACRO_scr7 {scr7 = 0x496,};
enum MACRO_scr8 {scr8 = 0x497,};
enum MACRO_stc1 {stc1 = 0x440,};
enum MACRO_stc2 {stc2 = 0x441,};
enum MACRO_stc3 {stc3 = 0x442,};
enum MACRO_stc4 {stc4 = 0x443,};
enum MACRO_stc5 {stc5 = 0x444,};
enum MACRO_stc6 {stc6 = 0x445,};
enum MACRO_stc7 {stc7 = 0x446,};
enum MACRO_stc8 {stc8 = 0x447,};
enum MACRO_stc9 {stc9 = 0x448,};
typedef struct _00C90F9554CD018C8A08AD8BDB9761D9 MAPIINIT_0;
typedef struct _MAPINAMEID MAPINAMEID;
typedef struct mc_confirm MC_CONFIRM;
typedef struct tagMDAXISINFO MDAXISINFO;
typedef struct tagMETAHEADER METAHEADER;
typedef struct tagMETARECORD METARECORD;
typedef struct tagMETHODDATA METHODDATA;
typedef struct tagMIMECPINFO MIMECPINFO;
typedef struct tagMINMAXINFO MINMAXINFO;
typedef struct tagMIXERCAPSA MIXERCAPSA;
typedef struct tagMIXERCAPSW MIXERCAPSW;
typedef struct tagMIXERLINEA MIXERLINEA;
typedef struct tagMIXERLINEW MIXERLINEW;
typedef struct _MONTHLYDOW MONTHLYDOW;
typedef struct tagMOUSEINPUT MOUSEINPUT;
typedef struct tagMQMSGPROPS MQMSGPROPS;
typedef struct _MSG_INFO_0 MSG_INFO_0;
typedef struct _MSG_INFO_1 MSG_INFO_1;
typedef struct tagNMDAYSTATE NMDAYSTATE;
typedef struct tagNMLISTVIEW NMLISTVIEW;
typedef struct _EAA2A559B48BCBAE81109D6C3EFDA87C NMPGSCROLL;
typedef struct tagNMTOOLBARA NMTOOLBARA;
typedef struct tagNMTOOLBARW NMTOOLBARW;
typedef struct _ABCFLOAT *NPABCFLOAT;
typedef struct tagAUXCAPSA *NPAUXCAPSA;
typedef struct tagAUXCAPSW *NPAUXCAPSW;
typedef struct _devicemodeA *NPDEVMODEA;
typedef struct _devicemodeW *NPDEVMODEW;
typedef struct tagEVENTMSG *NPEVENTMSG;
typedef struct tagJOYCAPSA *NPJOYCAPSA;
typedef struct tagJOYCAPSW *NPJOYCAPSW;
typedef struct tagLOGBRUSH *NPLOGBRUSH;
typedef struct tagLOGFONTA *NPLOGFONTA;
typedef struct tagLOGFONTW *NPLOGFONTW;
typedef struct _MMCKINFO *NPMMCKINFO;
typedef struct _MMIOINFO *NPMMIOINFO;
typedef struct tagPELARRAY *NPPELARRAY;
typedef struct timecaps_tag *NPTIMECAPS;
typedef struct _numberfmtA NUMBERFMTA;
typedef struct _numberfmtW NUMBERFMTW;
typedef struct tagOEMPENINFO OEMPENINFO;
typedef struct _tagOLECMDTEXT OLECMDTEXT;
typedef struct tagOLEUIBUSYA OLEUIBUSYA;
typedef struct tagOLEUIBUSYW OLEUIBUSYW;
typedef struct _OPTIONDATA OPTIONDATA;
typedef struct _OVERLAPPED OVERLAPPED;
typedef struct _AE_ACCLIM *PAE_ACCLIM;
typedef struct _AE_ACLMOD *PAE_ACLMOD;
typedef struct _AE_UASMOD *PAE_UASMOD;
typedef struct _AM_COLCON *PAM_COLCON;
typedef struct _paraformat PARAFORMAT;
typedef struct tagPassParm PASSSTRUCT;
typedef IAVIStream *PAVISTREAM;
typedef struct tagAXESLISTA *PAXESLISTA;
typedef struct tagAXESLISTW *PAXESLISTW;
typedef struct tagAXISINFOA *PAXISINFOA;
typedef struct tagAXISINFOW *PAXISINFOW;
typedef struct _BIN_COUNT *PBIN_COUNT;
typedef struct _BIN_RANGE *PBIN_RANGE;
typedef struct tagCapStatus *PCAPSTATUS;
typedef struct _CRYPTOAPI_BLOB *PCERT_BLOB;
typedef struct _CERT_INFO *PCERT_INFO;
typedef struct _CHAR_INFO *PCHAR_INFO;
typedef struct _CRL_ENTRY *PCRL_ENTRY;
typedef struct _CTL_ENTRY *PCTL_ENTRY;
typedef struct _CTL_USAGE *PCTL_USAGE;
typedef struct tagCWPSTRUCT *PCWPSTRUCT;
typedef struct _CRYPTOAPI_BLOB *PDATA_BLOB;
typedef void *PDBPROCESS;
typedef struct tagEMRBITBLT *PEMRBITBLT;
typedef struct tagEMRFORMAT *PEMRFORMAT;
typedef struct tagEMRLINETO *PEMRLINETO;
typedef struct tagEMRPLGBLT *PEMRPLGBLT;
typedef struct tagABORTPATH *PEMRSAVEDC;
typedef struct tagENUMTYPEA *PENUMTYPEA;
typedef struct tagENUMTYPEW *PENUMTYPEW;
typedef struct _ERROR_LOG *PERROR_LOG;
typedef IAMExtDevice *PEXTDEVICE;
typedef struct tagEXTLOGPEN *PEXTLOGPEN;
typedef struct _HMAC_Info *PHMAC_INFO;
typedef struct tag_IDFHEADER *PIDFHEADER;
typedef struct tag_IDFKEYMAP *PIDFKEYMAP;
typedef struct tagIMESTRUCT *PIMESTRUCT;
typedef struct _IPX_ROUTE *PIPX_ROUTE;
typedef struct joyinfoex_tag *PJOYINFOEX;
typedef struct _A227968E8D32EBA0D259BD466BD0F746 *PKSQUALITY;
typedef struct _LANA_ENUM *PLANA_ENUM;
typedef struct _LDT_ENTRY *PLDT_ENTRY;
typedef union _LLC_PARMS *PLLC_PARMS;
typedef struct BDN_RSVP *PMSBDNRSVP;
typedef struct _POINTFLOAT POINTFLOAT;
typedef struct tagPOLYTEXTA *PPOLYTEXTA;
typedef struct tagPOLYTEXTW *PPOLYTEXTW;
typedef struct _PROXYINFO *PPROXYINFO;
typedef struct _PROXYLIST *PPROXYLIST;
typedef struct _PROXYNODE *PPROXYNODE;
typedef struct _STD_ALERT *PSTD_ALERT;
typedef struct tagSTYLEBUFA *PSTYLEBUFA;
typedef struct tagSTYLEBUFW *PSTYLEBUFW;
typedef struct _SYNC_CARD *PSYNC_CARD;
typedef struct _SecBuffer *PSecBuffer;
typedef struct _SecHandle *PSecHandle;
typedef struct tagTOOLINFOA *PTOOLINFOA;
typedef struct tagTOOLINFOW *PTOOLINFOW;
typedef struct _TRIVERTEX *PTRIVERTEX;
typedef struct _TRUSTEE_A *PTRUSTEE_A;
typedef struct _TRUSTEE_W *PTRUSTEE_W;
typedef unsigned short *PUHALF_PTR;
typedef struct tagWAPPCDATA *PWAPPCDATA;
typedef struct tagWCPICDATA *PWCPICDATA;
typedef struct tagWINDOWPOS *PWINDOWPOS;
typedef struct tagWNDCLASSA *PWNDCLASSA;
typedef struct tagWNDCLASSW *PWNDCLASSW;
struct Parameters {struct ParametersVtbl *lpVtbl;};
struct Properties {struct PropertiesVtbl *lpVtbl;};
typedef struct _RAS_PORT_0 RAS_PORT_0;
typedef struct _RAS_PORT_1 RAS_PORT_1;
typedef struct _RAS_USER_0 RAS_USER_0;
typedef struct __MIDL___MIDL_itf_strmif_0074_0006 REGFILTER2;
typedef unsigned char *RPC_BUFPTR;
typedef unsigned int RPC_LENGTH;
typedef struct _RPC_POLICY RPC_POLICY;
typedef int RPC_STATUS;
typedef struct _RTP_HEADER RTP_HEADER;
typedef struct tagRemHBITMAP RemHBITMAP;
typedef struct tagRemHGLOBAL RemHGLOBAL;
enum ResyncEnum {adResyncUnderlyingValues = 0x1,adResyncAllValues = 0x2,};
typedef struct tagSCROLLINFO SCROLLINFO;
typedef struct _SEC_OBJECT SEC_OBJECT;
typedef struct send_error SEND_ERROR;
typedef struct _SGuidArray SGuidArray;
typedef struct _SLongArray SLongArray;
typedef struct _SMALL_RECT SMALL_RECT;
typedef struct sockaddr_dn SOCKADDRDN;
typedef struct _SPropValue SPropValue;
typedef unsigned char SQLDECIMAL;
typedef int (*SQLFARPROC)();
typedef int SQLINTEGER;
typedef unsigned char SQLNUMERIC;
typedef void *SQLPOINTER;
typedef unsigned long long SQLUBIGINT;
typedef unsigned char SQLVARCHAR;
typedef int SRVRETCODE;
typedef struct srv_config SRV_CONFIG;
typedef struct srv_events SRV_EVENTS;
typedef struct srv_params SRV_PARAMS;
typedef struct srv_server SRV_SERVER;
typedef struct srv_tdshdr SRV_TDSHDR;
typedef struct _SRealArray SRealArray;
typedef struct _SSortOrder SSortOrder;
typedef struct _tagSTACKFRAME STACKFRAME;
typedef struct tagSTAT_CHUNK STAT_CHUNK;
typedef struct tagSTICKYKEYS STICKYKEYS;
typedef struct tagSTROKEINFO STROKEINFO;
typedef struct _SYSTEMTIME SYSTEMTIME;
enum SchemaEnum {adSchemaProviderSpecific = 0xFFFFFFFF,adSchemaAsserts = 0x0,adSchemaCatalogs = 0x1,adSchemaCharacterSets = 0x2,adSchemaCollations = 0x3,adSchemaColumns = 0x4,adSchemaCheckConstraints = 0x5,adSchemaConstraintColumnUsage = 0x6,adSchemaConstraintTableUsage = 0x7,adSchemaKeyColumnUsage = 0x8,adSchemaReferentialContraints = 0x9,adSchemaTableConstraints = 0xA,adSchemaColumnsDomainUsage = 0xB,adSchemaIndexes = 0xC,adSchemaColumnPrivileges = 0xD,adSchemaTablePrivileges = 0xE,adSchemaUsagePrivileges = 0xF,adSchemaProcedures = 0x10,adSchemaSchemata = 0x11,adSchemaSQLLanguages = 0x12,adSchemaStatistics = 0x13,adSchemaTables = 0x14,adSchemaTranslations = 0x15,adSchemaProviderTypes = 0x16,adSchemaViews = 0x17,adSchemaViewColumnUsage = 0x18,adSchemaViewTableUsage = 0x19,adSchemaProcedureParameters = 0x1A,adSchemaForeignKeys = 0x1B,adSchemaPrimaryKeys = 0x1C,adSchemaProcedureColumns = 0x1D,adSchemaDBInfoKeywords = 0x1E,adSchemaDBInfoLiterals = 0x1F,adSchemaCubes = 0x20,adSchemaDimensions = 0x21,adSchemaHierarchies = 0x22,adSchemaLevels = 0x23,adSchemaMeasures = 0x24,adSchemaProperties = 0x25,adSchemaMembers = 0x26,};
typedef struct _TAPE_ERASE TAPE_ERASE;
enum TAPI_EVENT {TE_REINITIALIZE = 0x0,TE_NEWADDRESS = 0x1,};
typedef struct _textrange TEXTRANGEA;
typedef struct _textrangew TEXTRANGEW;
typedef int TIMEINSECS;
typedef struct tagTOGGLEKEYS TOGGLEKEYS;
typedef struct _TOKEN_USER TOKEN_USER;
typedef struct tp_overlay TP_OVERLAY;
typedef struct tp_started TP_STARTED;
typedef struct _511A31EFEAABA2548CBC69D58C296B4A TRACEENTRY;
typedef struct _USE_INFO_0 USE_INFO_0;
typedef struct _USE_INFO_1 USE_INFO_1;
typedef struct _USE_INFO_2 USE_INFO_2;
typedef struct _USE_INFO_3 USE_INFO_3;
typedef struct _033FDDF8C92E552042E0320A022B0EBA USN_RECORD;
typedef struct _usr_permid USR_PERMID;
typedef struct _CONTEXT VDMCONTEXT;
typedef struct wavefilter_tag WAVEFILTER;
typedef struct waveformat_tag WAVEFORMAT;
typedef struct tagWINDOWINFO WINDOWINFO;
typedef struct _WSAVersion WSAVERSION;
struct WebBrowser;
enum _AMVP_MODE {AMVP_MODE_WEAVE = 0x0,AMVP_MODE_BOBINTERLEAVED = 0x1,AMVP_MODE_BOBNONINTERLEAVED = 0x2,AMVP_MODE_SKIPEVEN = 0x3,AMVP_MODE_SKIPODD = 0x4,};
struct _AM_COLCON {unsigned char emph1col : 4;unsigned char emph2col : 4;unsigned char backcol : 4;unsigned char patcol : 4;unsigned char emph1con : 4;unsigned char emph2con : 4;unsigned char backcon : 4;unsigned char patcon : 4;};
enum _BIN_TYPES {RequestSize = 0x0,RequestLocation = 0x1,};
struct _Command15 {struct _Command15Vtbl *lpVtbl;};
enum _D3DOPCODE {D3DOP_POINT = 0x1,D3DOP_LINE = 0x2,D3DOP_TRIANGLE = 0x3,D3DOP_MATRIXLOAD = 0x4,D3DOP_MATRIXMULTIPLY = 0x5,D3DOP_STATETRANSFORM = 0x6,D3DOP_STATELIGHT = 0x7,D3DOP_STATERENDER = 0x8,D3DOP_PROCESSVERTICES = 0x9,D3DOP_TEXTURELOAD = 0xA,D3DOP_EXIT = 0xB,D3DOP_BRANCHFORWARD = 0xC,D3DOP_SPAN = 0xD,D3DOP_SETSTATUS = 0xE,D3DOP_FORCE_DWORD = 0x7FFFFFFF,};
enum _DtcLu_Xln {DTCLUXLN_COLD = 0x1,DTCLUXLN_WARM = 0x2,};
enum _EDKCNVRES {GCR_OK = 0x0,GCR_CANNOT_CONVERT = 0x1,GCR_CANNOT_LOAD = 0x2,GCR_NO_CANDIDATE = 0x3,GCR_CONVERSION_FAILED = 0x4,};
struct _IMAGELIST;
struct _Parameter {struct _ParameterVtbl *lpVtbl;};
struct _Recordset {struct _RecordsetVtbl *lpVtbl;};
struct _SecBuffer {unsigned int cbBuffer;unsigned int BufferType;void *pvBuffer;};
struct _SecHandle {unsigned int dwLower;unsigned int dwUpper;};
struct _WORD_BLOB {unsigned int clSize;unsigned short asData[1];};
struct _exception {int type;char *name;double arg1;double arg2;double retval;};
enum _md_action {MD_AC_EXPANDED = 0xFFFFFFFE,MD_AC_REDIRECTED = 0xFFFFFFFF,MD_AC_RELAYED = 0x0,MD_AC_REROUTED = 0x1,MD_AC_LAST = 0x2,};
struct am_overlay {unsigned int am_entry_len;unsigned char tp_name[64];unsigned char filespec[64];unsigned int reserv3 : 1;unsigned int sync_level_conf : 1;unsigned int sync_level_none : 1;unsigned int reserv4 : 5;unsigned int conv_type : 8;unsigned short in_all_qdpth_lim;unsigned short in_all_qdpth;short in_all_timeout;unsigned short num_rcv_all_pend;short rcv_all_timeout;unsigned char tp_type;unsigned char pgm_state;unsigned char conv_sec;unsigned char reserv5;unsigned short process_id;unsigned char parm_string[32];unsigned char program_type;unsigned char reserv5a;unsigned char tp_initiated;unsigned char reserv6;unsigned char icon_filespec[80];};
struct deallocate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned char dealloc_type;unsigned short log_dlen;unsigned char *log_dptr;};
struct gw_overlay {unsigned int gw_entry_len;unsigned char ws_lu_name[8];unsigned char ws_pu_name[8];unsigned char ws_pool_class;unsigned char ws_local_addr;unsigned char host_local_addr;unsigned char ws_lu_type;unsigned char host_lu_name[17];unsigned char reserv3;unsigned char ws_dlc_name[8];unsigned char ws_adapter_num;unsigned char ws_dest_addr_len;unsigned char ws_dest_addr[32];unsigned int ws_link_act : 1;unsigned int lu_lu_pend_term : 1;unsigned int lu_lu_pend_init : 1;unsigned int lu_lu_act : 1;unsigned int lu_cp_pend_term : 1;unsigned int lu_cp_pend_init : 1;unsigned int lu_cp_act_offline : 1;unsigned int lu_cp_act_online : 1;unsigned int reserv4 : 8;};
struct ldapsearch;
struct mc_confirm {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;};
struct optdata_dn {unsigned short opt_status;unsigned short opt_optl;unsigned char opt_data[16];};
struct send_error {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;unsigned char err_type;unsigned char err_dir;unsigned char reserv3;unsigned short log_dlen;unsigned char *log_dptr;};
typedef struct _7CE74CE74CF979B93E9F8A54217A4B92 *smiLPVALUE;
struct srv_events {int (*srv_hndl_attention)(void *);int (*srv_hndl_connect)(void *);int (*srv_hndl_disconnect)(void *);int (*srv_hndl_restart)(void *);int (*srv_hndl_rpc)(void *);int (*srv_hndl_sleep)(void *);int (*srv_hndl_language)(void *);int (*srv_hndl_start)(void *);int (*srv_hndl_stop)(void *);int (*srv_hndl_attention_ack)(void *);int (*srv_hndl_transmgr)(void *);int (*srv_hndl_insertexec)(void *);int (*srv_hndl_oledb)(void *);};
enum statustype {STATUS_PLAY = 0x2,STATUS_PAUSED = 0x8,STATUS_ACTIVE = 0x80,};
enum tagDATADIR {DATADIR_GET = 0x1,DATADIR_SET = 0x2,};
enum tagEXTCONN {EXTCONN_STRONG = 0x1,EXTCONN_WEAK = 0x2,EXTCONN_CALLABLE = 0x4,};
enum tagOLEMISC {OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,OLEMISC_INVISIBLEATRUNTIME = 0x400,OLEMISC_ALWAYSRUN = 0x800,OLEMISC_ACTSLIKEBUTTON = 0x1000,OLEMISC_ACTSLIKELABEL = 0x2000,OLEMISC_NOUIACTIVATE = 0x4000,OLEMISC_ALIGNABLE = 0x8000,OLEMISC_SIMPLEFRAME = 0x10000,OLEMISC_SETCLIENTSITEFIRST = 0x20000,OLEMISC_IMEMODE = 0x40000,OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,OLEMISC_WANTSTOMENUMERGE = 0x100000,OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,};
struct tagRECTOFS {int dLeft;int dTop;int dRight;int dBottom;};
enum tagREGKIND {REGKIND_DEFAULT = 0x0,REGKIND_REGISTER = 0x1,REGKIND_NONE = 0x2,};
enum tagSF_TYPE {SF_ERROR = 0xA,SF_I1 = 0x10,SF_I2 = 0x2,SF_I4 = 0x3,SF_I8 = 0x14,SF_BSTR = 0x8,SF_UNKNOWN = 0xD,SF_DISPATCH = 0x9,SF_VARIANT = 0xC,SF_RECORD = 0x24,SF_HAVEIID = 0x800D,};
enum tagSHCONTF {SHCONTF_FOLDERS = 0x20,SHCONTF_NONFOLDERS = 0x40,SHCONTF_INCLUDEHIDDEN = 0x80,};
enum tagSTGMOVE {STGMOVE_MOVE = 0x0,STGMOVE_COPY = 0x1,STGMOVE_SHALLOWCOPY = 0x2,};
enum tagSYSKIND {SYS_WIN16 = 0x0,SYS_WIN32 = 0x1,SYS_MAC = 0x2,};
enum tagURLZONE {URLZONE_PREDEFINED_MIN = 0x0,URLZONE_LOCAL_MACHINE = 0x0,URLZONE_INTRANET = 0x1,URLZONE_TRUSTED = 0x2,URLZONE_INTERNET = 0x3,URLZONE_UNTRUSTED = 0x4,URLZONE_PREDEFINED_MAX = 0x3E7,URLZONE_USER_MIN = 0x3E8,URLZONE_USER_MAX = 0x2710,};
enum tagVARKIND {VAR_PERINSTANCE = 0x0,VAR_STATIC = 0x1,VAR_CONST = 0x2,VAR_DISPATCH = 0x3,};
struct tp_started {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char lu_alias[8];unsigned char tp_id[8];unsigned char tp_name[64];};
typedef struct tagSTGMEDIUM uSTGMEDIUM;
typedef struct _userBITMAP userBITMAP;
typedef struct _ADDR_ALIAS ADDRALIAS;
struct ADOErrors;
struct ADOFields;
typedef struct _78DD00BDF4D9248AAFB252631B04B74F ADVISEOBJ;
typedef struct _AE_ACCLIM AE_ACCLIM;
typedef struct _AE_ACLMOD AE_ACLMOD;
typedef struct _AE_UASMOD AE_UASMOD;
typedef struct _AM_COLCON AM_COLCON;
typedef struct tagAPPDETAIL APPDETAIL;
typedef struct tagARRAYDESC ARRAYDESC;
typedef struct tagAXESLISTA AXESLISTA;
typedef struct tagAXESLISTW AXESLISTW;
typedef struct tagAXISINFOA AXISINFOA;
typedef struct tagAXISINFOW AXISINFOW;
typedef struct tagBIND_OPTS BIND_OPTS;
typedef struct _BIN_COUNT BIN_COUNT;
typedef struct _BIN_RANGE BIN_RANGE;
typedef struct tagBOXLAYOUT BOXLAYOUT;
typedef struct _BYTE_BLOB BYTE_BLOB;
typedef struct tagCapStatus CAPSTATUS;
typedef union _85601F4DDA405B3A8D51460B5AB09A10 CCB_PARMS;
struct CCertExit;
typedef struct _CRYPTOAPI_BLOB CERT_BLOB;
typedef struct _CERT_INFO CERT_INFO;
typedef struct _charrange CHARRANGE;
typedef struct _CHAR_INFO CHAR_INFO;
typedef char CMC_sint8;
typedef struct _compcolor COMPCOLOR;
typedef struct _tagCOMPONENT COMPONENT;
typedef struct _CONFADDRA CONFADDRA;
typedef struct _CONFADDRW CONFADDRW;
typedef struct _CONFGUIDA CONFGUIDA;
typedef struct _CONFGUIDW CONFGUIDW;
typedef struct _CONFINFOA CONFINFOA;
typedef struct _CONFINFOW CONFINFOW;
typedef struct confirmed CONFIRMED;
typedef struct _cpinfoexA CPINFOEXA;
typedef struct _cpinfoexW CPINFOEXW;
typedef struct _CRL_ENTRY CRL_ENTRY;
typedef struct cscritsec CSCRITSEC;
typedef struct _CTL_ENTRY CTL_ENTRY;
typedef struct _CTL_USAGE CTL_USAGE;
typedef struct tagCWPSTRUCT CWPSTRUCT;
struct ClusNodes {struct ClusNodesVtbl *lpVtbl;};
typedef struct _D3DBRANCH D3DBRANCH;
typedef struct _D3DLIGHT2 D3DLIGHT2;
typedef struct _D3DMATRIX D3DMATRIX;
typedef struct _D3DSTATUS D3DSTATUS;
typedef struct _D3DVECTOR D3DVECTOR;
typedef struct _D3DVERTEX D3DVERTEX;
typedef struct _CRYPTOAPI_BLOB DATA_BLOB;
typedef struct tagDBBINDEXT DBBINDEXT;
typedef struct tagDBBINDING DBBINDING;
typedef struct tagDBCONTENT DBCONTENT;
typedef struct dbdaterec DBDATEREC;
typedef struct dbnumeric DBNUMERIC;
typedef struct tagDBPROPSET DBPROPSET;
typedef struct tagDBSETFUNC DBSETFUNC;
typedef unsigned char DBTINYINT;
typedef struct dbvarybin DBVARYBIN;
typedef struct _61B889227CECAFED4E8A477D21B34BC9 DDEADVISE;
enum DIRECTION {D_CAPTURE = 0x0,D_RENDER = 0x1,};
typedef struct _DPADDRESS DPADDRESS;
typedef struct _DRAGINFOA DRAGINFOA;
typedef struct _DRAGINFOW DRAGINFOW;
typedef struct _DROPFILES DROPFILES;
typedef struct _PUBKEY DSSPUBKEY;
typedef struct _DTBLDDLBX DTBLDDLBX;
typedef struct _DTBLLABEL DTBLLABEL;
typedef struct Tag_DVAudInfo DVAudInfo;
struct DataLinks;
struct Dimension {struct DimensionVtbl *lpVtbl;};
typedef struct _EDKCNVENV EDKCNVENV;
typedef struct tagEMRBITBLT EMRBITBLT;
typedef struct tagEMRFORMAT EMRFORMAT;
typedef struct tagEMRLINETO EMRLINETO;
typedef struct tagEMRPLGBLT EMRPLGBLT;
typedef struct tagABORTPATH EMRSAVEDC;
typedef struct tagENUMTYPEA ENUMTYPEA;
typedef struct tagENUMTYPEW ENUMTYPEW;
typedef struct tagERRORINFO ERRORINFO;
typedef struct _ERROR_LOG ERROR_LOG;
typedef struct tagEXCEPINFO EXCEPINFO;
typedef void ( *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef struct tagEXTLOGPEN EXTLOGPEN;
typedef struct _findtext FINDTEXTA;
typedef struct _findtextw FINDTEXTW;
typedef struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 FLATENTRY;
typedef struct _FMS_LOADA FMS_LOADA;
typedef struct _FMS_LOADW FMS_LOADW;
typedef struct tagFORMATETC FORMATETC;
typedef struct _gettextex GETTEXTEX;
typedef unsigned char GLboolean;
struct HACMOBJ__ {int unused;};
struct HBITMAP__ {int unused;};
typedef struct _HCLUSENUM *HCLUSENUM;
typedef struct HCONVLIST__ *HCONVLIST;
typedef unsigned int HCRYPTKEY;
typedef void *HCRYPTMSG;
typedef  struct HDRVPHONE__ *HDRVPHONE;
struct HINKSET__ {int unused;};
typedef struct HINSTANCE__ *HINSTANCE;
typedef struct _HMAC_Info HMAC_INFO;
typedef struct HMETAFILE__ *HMETAFILE;
struct HMIDIIN__ {int unused;};
typedef struct HMIDISTRM__ *HMIDISTRM;
typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef struct _HNODEENUM *HNODEENUM;
typedef  struct HPHONEAPP__ *HPHONEAPP;
typedef  struct HPROVIDER__ *HPROVIDER;
typedef struct HRCRESULT__ *HRCRESULT;
typedef struct _HRESOURCE *HRESOURCE;
typedef  struct HTAPICALL__ *HTAPICALL;
typedef  struct HTAPILINE__ *HTAPILINE;
typedef struct HTERMINAL__ *HTERMINAL;
struct HTMLEmbed;
struct HTMLStyle;
struct HTMLTable;
typedef struct _TREEITEM *HTREEITEM;
struct HWAVEIN__ {int unused;};
struct HWINSTA__ {int unused;};
struct Hierarchy {struct HierarchyVtbl *lpVtbl;};
struct IADsClass {struct IADsClassVtbl *lpVtbl;};
struct IADsGroup {struct IADsGroupVtbl *lpVtbl;};
struct IADsValue {struct IADsValueVtbl *lpVtbl;};
struct IAccessor {struct IAccessorVtbl *lpVtbl;};
struct IAddrBook {struct IAddrBookVtbl *lpVtbl;};
struct IAgentCtl {struct IAgentCtlVtbl *lpVtbl;};
struct IBindHost {struct IBindHostVtbl *lpVtbl;};
typedef struct _83A144ADE81B1E4C267934DC64843ED5 ICPALETTE;
struct ICertExit {struct ICertExitVtbl *lpVtbl;};
struct IContinue {struct IContinueVtbl *lpVtbl;};
typedef struct tag_IDFHEADER IDFHEADER;
typedef struct tag_IDFKEYMAP IDFKEYMAP;
struct IDSObject {struct IDSObjectVtbl *lpVtbl;};
struct IDSSearch {struct IDSSearchVtbl *lpVtbl;};
struct IDeskBand {struct IDeskBandVtbl *lpVtbl;};
struct IDirect3D {struct IDirect3DVtbl *lpVtbl;};
struct IDispatch {struct IDispatchVtbl *lpVtbl;};
struct IDistList {struct IDistListVtbl *lpVtbl;};
struct IEnumCall {struct IEnumCallVtbl *lpVtbl;};
struct IEnumGUID {struct IEnumGUIDVtbl *lpVtbl;};
struct IEnumPins {struct IEnumPinsVtbl *lpVtbl;};
struct IErrorLog {struct IErrorLogVtbl *lpVtbl;};
struct IFontDisp {struct IFontDispVtbl *lpVtbl;};
struct IGetFrame {struct IGetFrameVtbl *lpVtbl;};
struct IInternet {struct IInternetVtbl *lpVtbl;};
typedef struct _IMAGEINFO IMAGEINFO;
struct IMAPIForm {struct IMAPIFormVtbl *lpVtbl;};
struct IMAPIProp {struct IMAPIPropVtbl *lpVtbl;};
typedef struct tagIMECOLORS IMECOLORS;
typedef struct tagIMESTRUCT IMESTRUCT;
struct IMailUser {struct IMailUserVtbl *lpVtbl;};
struct IMimeInfo {struct IMimeInfoVtbl *lpVtbl;};
struct IMsgStore {struct IMsgStoreVtbl *lpVtbl;};
typedef struct tagINPPARAMS INPPARAMS;
struct IOleCache {struct IOleCacheVtbl *lpVtbl;};
typedef struct _IPX_ROUTE IPX_ROUTE;
struct IProfSect {struct IProfSectVtbl *lpVtbl;};
struct IPropData {struct IPropDataVtbl *lpVtbl;};
struct IQualProp {struct IQualPropVtbl *lpVtbl;};
struct IRMHelper {struct IRMHelperVtbl *lpVtbl;};
struct IReadData {struct IReadDataVtbl *lpVtbl;};
struct IResponse {struct IResponseVtbl *lpVtbl;};
struct ITAddress {struct ITAddressVtbl *lpVtbl;};
struct ITChannel {struct ITChannelVtbl *lpVtbl;};
struct ITypeComp {struct ITypeCompVtbl *lpVtbl;};
struct ITypeInfo {struct ITypeInfoVtbl *lpVtbl;};
struct ITypeLib2 {struct ITypeLib2Vtbl *lpVtbl;};
struct IViewSort {struct IViewSortVtbl *lpVtbl;};
struct IXAConfig {struct IXAConfigVtbl *lpVtbl;};
struct IXMLError {struct IXMLErrorVtbl *lpVtbl;};
typedef signed char JAVA_BYTE;
typedef struct joyinfoex_tag JOYINFOEX;
typedef struct _PUBKEY KEAPUBKEY;
typedef struct _A227968E8D32EBA0D259BD466BD0F746 KSQUALITY;
typedef struct _LANA_ENUM LANA_ENUM;
typedef struct _LDT_ENTRY LDT_ENTRY;
typedef int (*LGFARPROC)();
typedef union _LLC_PARMS LLC_PARMS;
typedef struct IABLogon *LPABLOGON;
typedef struct tagABSTIME *LPABSTIME;
typedef struct _tagADDRESS *LPADDRESS;
typedef struct IAddrBook *LPADRBOOK;
typedef struct _ADRLIST *LPADRLIST;
typedef struct _ADRPARM *LPADRPARM;
typedef struct _AT_ENUM *LPAT_ENUM;
typedef struct _AT_INFO *LPAT_INFO;
typedef IBindCtx *LPBINDCTX;
typedef IBinding *LPBINDING;
typedef union tagBINDPTR *LPBINDPTR;
typedef struct tagCADWORD *LPCADWORD;
typedef struct tagCCINFOA *LPCCINFOA;
typedef struct tagCCINFOW *LPCCINFOW;
typedef struct _COMSTAT *LPCOMSTAT;
typedef struct tagCPLINFO *LPCPLINFO;
typedef struct _D3DLINE *LPD3DLINE;
typedef struct _D3DRECT *LPD3DRECT;
typedef struct _D3DSPAN *LPD3DSPAN;
typedef struct _DDFXROP *LPDDFXROP;
typedef struct dn_naddr *LPDNNADDR;
typedef struct _DSBCAPS *LPDSBCAPS;
typedef struct _DSCCAPS *LPDSCCAPS;
typedef struct _DTBLLBX *LPDTBLLBX;
typedef struct _7684FB82DC2359E8867448D749E28870 *LPENTRYID;
typedef IExchExt *LPEXCHEXT;
typedef struct _HD_ITEMA *LPHDITEMA;
typedef struct _HD_ITEMW *LPHDITEMW;
typedef struct hostent *LPHOSTENT;
typedef struct _IDEREGS *LPIDEREGS;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct _tagIMEPROA *LPIMEPROA;
typedef struct _tagIMEPROW *LPIMEPROW;
typedef struct in_addr *LPIN_ADDR;
typedef struct joyinfo_tag *LPJOYINFO;
typedef unsigned int *LPLHANDLE;
typedef struct tagLICINFO *LPLICINFO;
typedef struct tagLVITEMA *LPLVITEMA;
typedef struct tagLVITEMW *LPLVITEMW;
typedef struct IMAPISupport *LPMAPISUP;
typedef struct _MAPIUID *LPMAPIUID;
typedef IMarshal *LPMARSHAL;
typedef struct IMessage *LPMESSAGE;
typedef struct midihdr_tag *LPMIDIHDR;
typedef IMoniker *LPMONIKER;
typedef struct _MSGSESS *LPMSGSESS;
typedef struct IMSLogon *LPMSLOGON;
typedef IMultiQI *LPMULTIQI;
typedef struct tagNMMOUSE *LPNMMOUSE;
typedef struct tagNMREBAR *LPNMREBAR;
typedef IOleLink *LPOLELINK;
typedef struct tagOLEVERB *LPOLEVERB;
typedef struct tagPCMINFO *LPPCMINFO;
typedef struct tagPDEVENT *LPPDEVENT;
typedef struct tagPENDATAHEADER *LPPENDATA;
typedef struct tagPENINFO *LPPENINFO;
typedef IPersist *LPPERSIST;
typedef IPicture *LPPICTURE;
typedef struct tagPOINTFX *LPPOINTFX;
typedef struct tagRECTOFS *LPRECTOFS;
typedef struct _RGNDATA *LPRGNDATA;
typedef struct _ROWLIST *LPROWLIST;
typedef struct _SBinary *LPSBinary;
typedef struct servent *LPSERVENT;
typedef struct _SRowSet *LPSRowSet;
typedef struct _STATURL *LPSTATURL;
typedef IStorage *LPSTORAGE;
typedef struct tagSTRKFMT *LPSTRKFMT;
typedef struct _7E4D4F669364F297B2F59C7E54290CAF *LPTBENTRY;
typedef struct tagTCITEMA *LPTCITEMA;
typedef struct tagTCITEMW *LPTCITEMW;
typedef struct timeval *LPTIMEVAL;
typedef struct tagTVITEMA *LPTVITEMA;
typedef struct tagTVITEMW *LPTVITEMW;
typedef ITypeLib *LPTYPELIB;
typedef struct _UDACCEL *LPUDACCEL;
typedef IUnknown *LPUNKNOWN;
typedef struct tagVARDESC *LPVARDESC;
typedef struct wavehdr_tag *LPWAVEHDR;
typedef struct tagWCRANGE *LPWCRANGE;
typedef struct _WGLSWAP *LPWGLSWAP;
typedef struct WSAData *LPWSADATA;
typedef struct WSPData *LPWSPDATA;
typedef struct IXPLogon *LPXPLOGON;
typedef unsigned int LS_HANDLE;
struct LUA_FLAG1 {unsigned char lu_norm : 1;unsigned char lu_exp : 1;unsigned char sscp_norm : 1;unsigned char sscp_exp : 1;unsigned char nowait : 1;unsigned char close_abend : 1;unsigned char reserv1 : 1;unsigned char bid_enable : 1;};
struct LUA_FLAG2 {unsigned char lu_norm : 1;unsigned char lu_exp : 1;unsigned char sscp_norm : 1;unsigned char sscp_exp : 1;unsigned char : 2;unsigned char async : 1;unsigned char bid_enable : 1;};
typedef struct tagLVCOLUMNA LVCOLUMNA;
typedef struct tagLVCOLUMNW LVCOLUMNW;
enum MACRO_ABE {ABE_LEFT = 0,ABE_TOP = 1,ABE_RIGHT = 2,ABE_BOTTOM = 3,};
enum MACRO_ABM {ABM_NEW = 0x0,ABM_REMOVE = 0x1,ABM_QUERYPOS = 0x2,ABM_SETPOS = 0x3,ABM_GETSTATE = 0x4,ABM_GETTASKBARPOS = 0x5,ABM_ACTIVATE = 0x6,ABM_GETAUTOHIDEBAR = 0x7,ABM_SETAUTOHIDEBAR = 0x8,ABM_WINDOWPOSCHANGED = 0x9,};
enum MACRO_ABN {ABN_STATECHANGE = 0x0,ABN_POSCHANGED = 0x1,ABN_FULLSCREENAPP = 0x2,ABN_WINDOWARRANGE = 0x3,};
enum MACRO_ABS {ABS_AUTOHIDE = 0x1,ABS_ALWAYSONTOP = 0x2,};
enum MACRO_ACC {ACC_PUBLIC = 0x1,ACC_PRIVATE = 0x2,ACC_PROTECTED = 0x4,ACC_STATIC = 0x8,ACC_FINAL = 0x10,ACC_SYNCH = 0x20,ACC_SUPER = 0x20,ACC_THREADSAFE = 0x40,ACC_VOLATILE = 0x40,ACC_TRANSIENT = 0x80,ACC_NATIVE = 0x100,ACC_INTERFACE = 0x200,ACC_ABSTRACT = 0x400,};
enum MACRO_ACE {OBJECT_INHERIT_ACE = 0x1,CONTAINER_INHERIT_ACE = 0x2,NO_PROPAGATE_INHERIT_ACE = 0x4,INHERIT_ONLY_ACE = 0x8,INHERITED_ACE = 0x10,};
enum MACRO_ACK {ACK = 1,ACKPOS = 2,};
enum MACRO_ACL {ACL_REVISION = 2,ACL_REVISION_DS = 4,ACL_REVISION1 = 1,ACL_REVISION2 = 2,ACL_REVISION3 = 3,ACL_REVISION4 = 4,};
enum MACRO_ACM {ACM_MPEG_LAYER1 = 0x1,ACM_MPEG_LAYER2 = 0x2,ACM_MPEG_LAYER3 = 0x4,ACM_MPEG_STEREO = 0x1,ACM_MPEG_JOINTSTEREO = 0x2,ACM_MPEG_DUALCHANNEL = 0x4,ACM_MPEG_SINGLECHANNEL = 0x8,ACM_MPEG_PRIVATEBIT = 0x1,ACM_MPEG_COPYRIGHT = 0x2,ACM_MPEG_ORIGINALHOME = 0x4,ACM_MPEG_PROTECTIONBIT = 0x8,ACM_MPEG_ID_MPEG1 = 0x10,};
enum MACRO_ACN {ACN_START = 1,ACN_STOP = 2,};
enum MACRO_ACS {ACS_CENTER = 0x1,ACS_TRANSPARENT = 0x2,ACS_AUTOPLAY = 0x4,ACS_TIMER = 0x8,};
enum MACRO_ADN {ADN_DEL_IF_EMPTY = 0x1,ADN_DONT_DEL_SUBDIRS = 0x2,ADN_DONT_DEL_DIR = 0x4,};
enum MACRO_ADO {ADO_MAJOR = 2,};
enum MACRO_ADS {ADS_SECURE_AUTHENTICATION = 0x1,ADS_USE_ENCRYPTION = 0x2,ADS_READONLY_SERVER = 0x4,ADS_PROMPT_CREDENTIALS = 0x8,ADS_ATTR_CLEAR = 0x1,ADS_ATTR_UPDATE = 0x2,ADS_ATTR_APPEND = 0x3,ADS_ATTR_DELETE = 0x4,ADS_CHASE_REFERRALS_NEVER = 0x0,ADS_CHASE_REFERRALS_SUBORDINATE = 0x20,ADS_CHASE_REFERRALS_EXTERNAL = 0x40,ADS_CHASE_REFERRALS_ALWAYS = 0x60,ADS_PRINTER_PAUSED = 0x1,ADS_PRINTER_PENDING_DELETION = 0x2,ADS_PRINTER_ERROR = 0x3,ADS_PRINTER_PAPER_JAM = 0x4,ADS_PRINTER_PAPER_OUT = 0x5,ADS_PRINTER_MANUAL_FEED = 0x6,ADS_PRINTER_PAPER_PROBLEM = 0x7,ADS_PRINTER_OFFLINE = 0x8,ADS_PRINTER_IO_ACTIVE = 0x100,ADS_PRINTER_BUSY = 0x200,ADS_PRINTER_PRINTING = 0x400,ADS_PRINTER_OUTPUT_BIN_FULL = 0x800,ADS_PRINTER_NOT_AVAILABLE = 0x1000,ADS_PRINTER_WAITING = 0x2000,ADS_PRINTER_PROCESSING = 0x4000,ADS_PRINTER_INITIALIZING = 0x8000,ADS_PRINTER_WARMING_UP = 0x10000,ADS_PRINTER_TONER_LOW = 0x20000,ADS_PRINTER_NO_TONER = 0x40000,ADS_PRINTER_PAGE_PUNT = 0x80000,ADS_PRINTER_USER_INTERVENTION = 0x100000,ADS_PRINTER_OUT_OF_MEMORY = 0x200000,ADS_PRINTER_DOOR_OPEN = 0x400000,ADS_PRINTER_SERVER_UNKNOWN = 0x800000,ADS_PRINTER_POWER_SAVE = 0x1000000,ADS_JOB_PAUSED = 0x1,ADS_JOB_ERROR = 0x2,ADS_JOB_DELETING = 0x4,ADS_JOB_SPOOLING = 0x8,ADS_JOB_PRINTING = 0x10,ADS_JOB_OFFLINE = 0x20,ADS_JOB_PAPEROUT = 0x40,ADS_JOB_PRINTED = 0x80,ADS_JOB_DELETED = 0x100,ADS_SERVICE_STOPPED = 0x1,ADS_SERVICE_START_PENDING = 0x2,ADS_SERVICE_STOP_PENDING = 0x3,ADS_SERVICE_RUNNING = 0x4,ADS_SERVICE_CONTINUE_PENDING = 0x5,ADS_SERVICE_PAUSE_PENDING = 0x6,ADS_SERVICE_PAUSED = 0x7,ADS_SERVICE_ERROR = 0x8,ADS_SERVICE_OWN_PROCESS = 0x10,ADS_SERVICE_SHARE_PROCESS = 0x20,ADS_SERVICE_KERNEL_DRIVER = 0x1,ADS_SERVICE_FILE_SYSTEM_DRIVER = 0x2,ADS_SERVICE_BOOT_START = 0x0,ADS_SERVICE_SYSTEM_START = 0x1,ADS_SERVICE_AUTO_START = 0x2,ADS_SERVICE_DEMAND_START = 0x3,ADS_SERVICE_DISABLED = 0x4,ADS_SERVICE_ERROR_IGNORE = 0x0,ADS_SERVICE_ERROR_NORMAL = 0x1,ADS_SERVICE_ERROR_SEVERE = 0x2,ADS_SERVICE_ERROR_CRITICAL = 0x3,};
enum MACRO_AIF {AIF_WARNIFSKIP = 0x1,AIF_NOSKIP = 0x2,AIF_NOVERSIONCHECK = 0x4,AIF_FORCE_FILE_IN_USE = 0x8,AIF_NOOVERWRITE = 0x10,AIF_NO_VERSION_DIALOG = 0x20,AIF_REPLACEONLY = 0x400,AIF_NOLANGUAGECHECK = 0x10000000,AIF_QUIET = 0x20000000,};
enum MACRO_ALC {ALC_DEFAULT = 0x0,ALC_LCALPHA = 0x1,ALC_UCALPHA = 0x2,ALC_NUMERIC = 0x4,ALC_PUNC = 0x8,ALC_MATH = 0x10,ALC_MONETARY = 0x20,ALC_OTHER = 0x40,ALC_ASCII = 0x80,ALC_WHITE = 0x100,ALC_NONPRINT = 0x200,ALC_DBCS = 0x400,ALC_JIS1 = 0x800,ALC_GESTURE = 0x4000,ALC_USEBITMAP = 0x8000,ALC_HIRAGANA = 0x10000,ALC_KATAKANA = 0x20000,ALC_KANJI = 0x40000,ALC_GLOBALPRIORITY = 0x10000000,ALC_OEM = 0xFF80000,ALC_RESERVED = 0xE0003000,ALC_NOPRIORITY = 0x0,ALC_ALPHA = 0x3,ALC_ALPHANUMERIC = 0x7,ALC_SYSMINIMUM = 0x410F,ALC_ALL = 0x437F,ALC_KANJISYSMINIMUM = 0x3490F,ALC_KANJIALL = 0x7437F,};
enum MACRO_ALG {ALG_CLASS_ANY = 0,ALG_CLASS_SIGNATURE = 8192,ALG_CLASS_MSG_ENCRYPT = 16384,ALG_CLASS_DATA_ENCRYPT = 24576,ALG_CLASS_HASH = 32768,ALG_CLASS_KEY_EXCHANGE = 40960,ALG_TYPE_ANY = 0,ALG_TYPE_DSS = 512,ALG_TYPE_RSA = 1024,ALG_TYPE_BLOCK = 1536,ALG_TYPE_STREAM = 2048,ALG_TYPE_DH = 2560,ALG_TYPE_SECURECHANNEL = 3072,ALG_SID_ANY = 0,ALG_SID_RSA_ANY = 0,ALG_SID_RSA_PKCS = 1,ALG_SID_RSA_MSATWORK = 2,ALG_SID_RSA_ENTRUST = 3,ALG_SID_RSA_PGP = 4,ALG_SID_DSS_ANY = 0,ALG_SID_DSS_PKCS = 1,ALG_SID_DSS_DMS = 2,ALG_SID_DES = 1,ALG_SID_3DES = 3,ALG_SID_DESX = 4,ALG_SID_IDEA = 5,ALG_SID_CAST = 6,ALG_SID_SAFERSK64 = 7,ALG_SID_SAFERSK128 = 8,ALG_SID_3DES_112 = 9,ALG_SID_CYLINK_MEK = 12,ALG_SID_RC5 = 13,ALG_SID_SKIPJACK = 10,ALG_SID_TEK = 11,};
enum MACRO_ALL {DPENUMPLAYERS_ALL = 0x0,DPENUMGROUPS_ALL = 0x0,};
enum MACRO_APD {APD_STRICT_UPGRADE = 0x1,APD_STRICT_DOWNGRADE = 0x2,APD_COPY_ALL_FILES = 0x4,APD_COPY_NEW_FILES = 0x8,};
enum MACRO_API {API_VERSION_NUMBER = 7,};
enum MACRO_ARW {ARW_BOTTOMLEFT = 0x0,ARW_BOTTOMRIGHT = 0x1,ARW_TOPLEFT = 0x2,ARW_TOPRIGHT = 0x3,ARW_STARTMASK = 0x3,ARW_STARTRIGHT = 0x1,ARW_STARTTOP = 0x2,ARW_LEFT = 0x0,ARW_RIGHT = 0x0,ARW_UP = 0x4,ARW_DOWN = 0x4,ARW_HIDE = 0x8,};
enum MACRO_ASC {ASC_REQ_DELEGATE = 0x1,ASC_REQ_MUTUAL_AUTH = 0x2,ASC_REQ_REPLAY_DETECT = 0x4,ASC_REQ_SEQUENCE_DETECT = 0x8,ASC_REQ_CONFIDENTIALITY = 0x10,ASC_REQ_USE_SESSION_KEY = 0x20,ASC_REQ_ALLOCATE_MEMORY = 0x100,ASC_REQ_USE_DCE_STYLE = 0x200,ASC_REQ_DATAGRAM = 0x400,ASC_REQ_CONNECTION = 0x800,ASC_REQ_CALL_LEVEL = 0x1000,ASC_REQ_EXTENDED_ERROR = 0x8000,ASC_REQ_STREAM = 0x10000,ASC_REQ_INTEGRITY = 0x20000,ASC_REQ_LICENSING = 0x40000,ASC_REQ_IDENTIFY = 0x80000,ASC_REQ_ALLOW_NULL_SESSION = 0x100000,ASC_RET_DELEGATE = 0x1,ASC_RET_MUTUAL_AUTH = 0x2,ASC_RET_REPLAY_DETECT = 0x4,ASC_RET_SEQUENCE_DETECT = 0x8,ASC_RET_CONFIDENTIALITY = 0x10,ASC_RET_USE_SESSION_KEY = 0x20,ASC_RET_ALLOCATED_MEMORY = 0x100,ASC_RET_USED_DCE_STYLE = 0x200,ASC_RET_DATAGRAM = 0x400,ASC_RET_CONNECTION = 0x800,ASC_RET_CALL_LEVEL = 0x2000,ASC_RET_THIRD_LEG_FAILED = 0x4000,ASC_RET_EXTENDED_ERROR = 0x8000,ASC_RET_STREAM = 0x10000,ASC_RET_INTEGRITY = 0x20000,ASC_RET_LICENSING = 0x40000,ASC_RET_IDENTIFY = 0x80000,ASC_RET_NULL_SESSION = 0x100000,};
enum MACRO_ASN {ASN_UNIVERSAL = 0x0,ASN_APPLICATION = 0x40,ASN_CONTEXT = 0x80,ASN_PRIVATE = 0xC0,ASN_PRIMITIVE = 0x0,ASN_CONSTRUCTOR = 0x20,};
enum MACRO_ASP {ASP_MD_UT_APP = 101,};
enum MACRO_ATF {ATF_TIMEOUTON = 0x1,ATF_ONOFFFEEDBACK = 0x2,};
enum MACRO_ATM {ATM_E164 = 0x1,ATM_NSAP = 0x2,ATM_AESA = 0x2,ATM_ADDR_SIZE = 0x14,};
enum MACRO_AUX {AUX_MAPPER = 4294967295,};
enum MACRO_AVI {AVI_HEADERSIZE = 2048,};
enum MACRO_BDN {BDN_TIME_UNBOUND = 0,BDN_SLOT_NONE = -1,BDN_RSVP_VERSION = 256,BDN_HARDWARE_TYPE_IEEE8023 = 1,BDN_HARDWARE_TYPE_ATM = 2,BDN_VALUE_ANSI_STRING = 1,BDN_VALUE_UNICODE_STRING = 2,BDN_VALUE_DWORD = 3,BDN_VALUE_SOCKADDR = 4,BDN_VALUE_STRING = 1,BDN_SERVICE_BRIDGE = 1,BDN_SERVICE_ARS = 2,BDN_SERVICE_BRS = 3,BDN_SERVICE_GLOBAL_ADDR = 4,BDN_SERVICE_LOCAL_ADDR = 5,BDN_SERVICE_APPLICATION = 6,BDN_SERVICE_CONTENT_SERVICE = 7,};
enum MACRO_BDR {BDR_RAISEDOUTER = 0x1,BDR_SUNKENOUTER = 0x2,BDR_RAISEDINNER = 0x4,BDR_SUNKENINNER = 0x8,BDR_OUTER = 0x3,BDR_INNER = 0xC,};
enum MACRO_BEI {BEI_FACESIZE = 32,};
enum MACRO_BFT {BFT_DIRECTORY = 0x80,BFT_DATABASE_DIRECTORY = 0x40,BFT_LOG_DIRECTORY = 0x20,BFT_LOG = 0x21,BFT_LOG_DIR = 0x82,BFT_CHECKPOINT_DIR = 0x83,BFT_MDB_PRIVATE_DATABASE = 0x45,BFT_MDB_PUBLIC_DATABASE = 0x46,BFT_DSA_DATABASE = 0x47,BFT_PATCH_FILE = 0x28,BFT_UNKNOWN = 0xF,};
enum MACRO_BIF {BIF_RETURNONLYFSDIRS = 0x1,BIF_DONTGOBELOWDOMAIN = 0x2,BIF_STATUSTEXT = 0x4,BIF_RETURNFSANCESTORS = 0x8,BIF_EDITBOX = 0x10,BIF_VALIDATE = 0x20,BIF_BROWSEFORCOMPUTER = 0x1000,BIF_BROWSEFORPRINTER = 0x2000,BIF_BROWSEINCLUDEFILES = 0x4000,};
enum MACRO_BMK {BMK_DURABILITY_ROWSET = 0,BMK_DURABILITY_INTRANSACTION = 1,BMK_DURABILITY_XTRANSACTION = 2,BMK_DURABILITY_REORGANIZATION = 3,};
enum MACRO_BMR {BMR_EQZ = 0,BMR_NEZ = 1,};
enum MACRO_BOE {BOE_CONTEXTREADING = 0x8,BOE_CONTEXTALIGNMENT = 0x10,};
enum MACRO_BOM {BOM_CONTEXTREADING = 0x8,BOM_CONTEXTALIGNMENT = 0x10,};
enum MACRO_BSF {BSF_QUERY = 0x1,BSF_IGNORECURRENTTASK = 0x2,BSF_FLUSHDISK = 0x4,BSF_NOHANG = 0x8,BSF_POSTMESSAGE = 0x10,BSF_FORCEIFHUNG = 0x20,BSF_NOTIMEOUTIFNOTHUNG = 0x40,};
enum MACRO_BSM {BSM_ALLCOMPONENTS = 0x0,BSM_VXDS = 0x1,BSM_NETDRIVER = 0x2,BSM_INSTALLABLEDRIVERS = 0x4,BSM_APPLICATIONS = 0x8,BSM_ALLDESKTOPS = 0x10,};
enum MACRO_BST {BST_UNCHECKED = 0x0,BST_CHECKED = 0x1,BST_INDETERMINATE = 0x2,BST_PUSHED = 0x4,BST_FOCUS = 0x8,};
enum MACRO_BUF {BUF_FULL = -3,};
enum MACRO_BXD {BXD_CELLWIDTH = 12,BXD_CELLHEIGHT = 16,BXD_BASEHEIGHT = 13,BXD_BASEHORZ = 0,BXD_MIDFROMBASE = 0,BXD_CUSPHEIGHT = 2,BXD_ENDCUSPHEIGHT = 4,};
enum MACRO_BXS {BXS_NONE = 0x0,BXS_RECT = 0x1,BXS_BOXCROSS = 0x4,BXS_MASK = 0x7,};
enum MACRO_CAL {CAL_ICALINTVALUE = 0x1,CAL_SCALNAME = 0x2,CAL_IYEAROFFSETRANGE = 0x3,CAL_SERASTRING = 0x4,CAL_SSHORTDATE = 0x5,CAL_SLONGDATE = 0x6,CAL_SDAYNAME1 = 0x7,CAL_SDAYNAME2 = 0x8,CAL_SDAYNAME3 = 0x9,CAL_SDAYNAME4 = 0xA,CAL_SDAYNAME5 = 0xB,CAL_SDAYNAME6 = 0xC,CAL_SDAYNAME7 = 0xD,CAL_SABBREVDAYNAME1 = 0xE,CAL_SABBREVDAYNAME2 = 0xF,CAL_SABBREVDAYNAME3 = 0x10,CAL_SABBREVDAYNAME4 = 0x11,CAL_SABBREVDAYNAME5 = 0x12,CAL_SABBREVDAYNAME6 = 0x13,CAL_SABBREVDAYNAME7 = 0x14,CAL_SMONTHNAME1 = 0x15,CAL_SMONTHNAME2 = 0x16,CAL_SMONTHNAME3 = 0x17,CAL_SMONTHNAME4 = 0x18,CAL_SMONTHNAME5 = 0x19,CAL_SMONTHNAME6 = 0x1A,CAL_SMONTHNAME7 = 0x1B,CAL_SMONTHNAME8 = 0x1C,CAL_SMONTHNAME9 = 0x1D,CAL_SMONTHNAME10 = 0x1E,CAL_SMONTHNAME11 = 0x1F,CAL_SMONTHNAME12 = 0x20,CAL_SMONTHNAME13 = 0x21,CAL_SABBREVMONTHNAME1 = 0x22,CAL_SABBREVMONTHNAME2 = 0x23,CAL_SABBREVMONTHNAME3 = 0x24,CAL_SABBREVMONTHNAME4 = 0x25,CAL_SABBREVMONTHNAME5 = 0x26,CAL_SABBREVMONTHNAME6 = 0x27,CAL_SABBREVMONTHNAME7 = 0x28,CAL_SABBREVMONTHNAME8 = 0x29,CAL_SABBREVMONTHNAME9 = 0x2A,CAL_SABBREVMONTHNAME10 = 0x2B,CAL_SABBREVMONTHNAME11 = 0x2C,CAL_SABBREVMONTHNAME12 = 0x2D,CAL_SABBREVMONTHNAME13 = 0x2E,CAL_SYEARMONTH = 0x2F,};
enum MACRO_CAP {CAP_ATA_ID_CMD = 1,CAP_ATAPI_ID_CMD = 2,CAP_SMART_CMD = 4,};
enum MACRO_CAT {CAT_E_FIRST = 0x80040160,CAT_E_LAST = 0x80040161,};
enum MACRO_CBA {CBA_DEFERRED_SYMBOL_LOAD_START = 0x1,CBA_DEFERRED_SYMBOL_LOAD_COMPLETE = 0x2,CBA_DEFERRED_SYMBOL_LOAD_FAILURE = 0x3,CBA_SYMBOLS_UNLOADED = 0x4,CBA_DUPLICATE_SYMBOL = 0x5,};
enum MACRO_CBF {CBF_FAIL_SELFCONNECTIONS = 0x1000,CBF_FAIL_CONNECTIONS = 0x2000,CBF_FAIL_ADVISES = 0x4000,CBF_FAIL_EXECUTES = 0x8000,CBF_FAIL_POKES = 0x10000,CBF_FAIL_REQUESTS = 0x20000,CBF_FAIL_ALLSVRXACTIONS = 0x3F000,CBF_SKIP_CONNECT_CONFIRMS = 0x40000,CBF_SKIP_REGISTRATIONS = 0x80000,CBF_SKIP_UNREGISTRATIONS = 0x100000,CBF_SKIP_DISCONNECTS = 0x200000,CBF_SKIP_ALLNOTIFICATIONS = 0x3C0000,};
enum MACRO_CBM {CBM_INIT = 0x4,};
enum MACRO_CBN {CBN_ERRSPACE = -1,CBN_SELCHANGE = 1,CBN_DBLCLK = 2,CBN_SETFOCUS = 3,CBN_KILLFOCUS = 4,CBN_EDITCHANGE = 5,CBN_EDITUPDATE = 6,CBN_DROPDOWN = 7,CBN_CLOSEUP = 8,CBN_SELENDOK = 9,CBN_SELENDCANCEL = 10,};
enum MACRO_CBR {CBR_110 = 110,CBR_300 = 300,CBR_600 = 600,CBR_1200 = 1200,CBR_2400 = 2400,CBR_4800 = 4800,CBR_9600 = 9600,CBR_14400 = 14400,CBR_19200 = 19200,CBR_38400 = 38400,CBR_56000 = 56000,CBR_57600 = 57600,CBR_115200 = 115200,CBR_128000 = 128000,CBR_256000 = 256000,};
enum MACRO_CBS {CBS_SIMPLE = 0x1,CBS_DROPDOWN = 0x2,CBS_DROPDOWNLIST = 0x3,CBS_OWNERDRAWFIXED = 0x10,CBS_OWNERDRAWVARIABLE = 0x20,CBS_AUTOHSCROLL = 0x40,CBS_OEMCONVERT = 0x80,CBS_SORT = 0x100,CBS_HASSTRINGS = 0x200,CBS_NOINTEGRALHEIGHT = 0x400,CBS_DISABLENOSCROLL = 0x800,CBS_UPPERCASE = 0x2000,CBS_LOWERCASE = 0x4000,};
enum MACRO_CCF {CCF_NOTEXT = 0x1,};
enum MACRO_CCH {CCH_MAX_PROPSTG_NAME = 31,};
enum MACRO_CCM {CCM_SETBKCOLOR = 8193,CCM_SETCOLORSCHEME = 8194,CCM_GETCOLORSCHEME = 8195,CCM_GETDROPTARGET = 8196,CCM_SETUNICODEFORMAT = 8197,CCM_GETUNICODEFORMAT = 8198,};
enum MACRO_CCS {CCS_TOP = 0x1,CCS_NOMOVEY = 0x2,CCS_BOTTOM = 0x3,CCS_NORESIZE = 0x4,CCS_NOPARENTALIGN = 0x8,CCS_ADJUSTABLE = 0x20,CCS_NODIVIDER = 0x40,CCS_VERT = 0x80,CCS_LEFT = 0x81,CCS_RIGHT = 0x83,CCS_NOMOVEX = 0x82,};
enum MACRO_CDN {CDN_FIRST = -601,CDN_LAST = -699,CDN_INITDONE = -601,CDN_SELCHANGE = -602,CDN_FOLDERCHANGE = -603,CDN_SHAREVIOLATION = -604,CDN_HELP = -605,CDN_FILEOK = -606,CDN_TYPECHANGE = -607,CDN_INCLUDEITEM = -608,};
enum MACRO_CDS {CDS_UPDATEREGISTRY = 0x1,CDS_TEST = 0x2,CDS_FULLSCREEN = 0x4,CDS_GLOBAL = 0x8,CDS_SET_PRIMARY = 0x10,CDS_RESET = 0x40000000,CDS_SETRECT = 0x20000000,CDS_NORESET = 0x10000000,};
enum MACRO_CFE {CFE_BOLD = 0x1,CFE_ITALIC = 0x2,CFE_UNDERLINE = 0x4,CFE_STRIKEOUT = 0x8,CFE_PROTECTED = 0x10,CFE_LINK = 0x20,CFE_AUTOCOLOR = 0x40000000,};
enum MACRO_CFG {CFG_CONN_LAN = 0,CFG_CONN_REMOTE = 1,CFG_CONN_OFFLINE = 2,CFG_CONN_AUTO = 3,};
enum MACRO_CFM {CFM_BOLD = 0x1,CFM_ITALIC = 0x2,CFM_UNDERLINE = 0x4,CFM_STRIKEOUT = 0x8,CFM_PROTECTED = 0x10,CFM_LINK = 0x20,CFM_SIZE = 0x80000000,CFM_COLOR = 0x40000000,CFM_FACE = 0x20000000,CFM_OFFSET = 0x10000000,CFM_CHARSET = 0x8000000,};
enum MACRO_CFS {CFS_DEFAULT = 0x0,CFS_RECT = 0x1,CFS_POINT = 0x2,CFS_FORCE_POSITION = 0x20,CFS_CANDIDATEPOS = 0x40,CFS_EXCLUDE = 0x80,};
enum MACRO_CFU {CFU_CF1UNDERLINE = 0xFF,CFU_INVERT = 0xFE,CFU_UNDERLINEDOTTED = 0x4,CFU_UNDERLINEDOUBLE = 0x3,CFU_UNDERLINEWORD = 0x2,CFU_UNDERLINE = 0x1,CFU_UNDERLINENONE = 0x0,};
enum MACRO_CIB {CIB_NOGDMSG = 0x1,CIB_NOACTIONHANDLE = 0x2,CIB_NOFLASHCURSOR = 0x4,};
enum MACRO_CIF {CIF_SHOWHELP = 0x1,CIF_SELECTCURRENT = 0x2,CIF_SELECTDEFAULT = 0x4,CIF_SELECTFROMFILE = 0x8,CIF_USEICONEXE = 0x10,};
enum MACRO_CIH {CIH_NOGDMSG = 0x1,CIH_NOACTIONHANDLE = 0x2,CIH_NOEDITTEXT = 0x4,CIH_NOFLASHCURSOR = 0x8,};
enum MACRO_CL1 {CL1 = 11,};
enum MACRO_CLK {CLK_TCK = 1000,};
enum MACRO_CLR {CLR_INVALID = 0xFFFFFFFF,};
enum MACRO_CMB {CMB_MASKED = 0x2,};
enum MACRO_CMC {CMC_FALSE = 0,CMC_TRUE = 1,CMC_NO_TIMEZONE = -32768,CMC_EXT_REQUIRED = 65536,CMC_EXT_OUTPUT = 131072,CMC_EXT_LAST_ELEMENT = 2147483648,CMC_EXT_RSV_FLAG_MASK = 4294901760,CMC_EXT_ITEM_FLAG_MASK = 65535,CMC_ATT_APP_OWNS_FILE = 1,CMC_ATT_LAST_ELEMENT = 2147483648,CMC_TYPE_UNKNOWN = 0,CMC_TYPE_INDIVIDUAL = 1,CMC_TYPE_GROUP = 2,CMC_ROLE_TO = 0,CMC_ROLE_CC = 1,CMC_ROLE_BCC = 2,CMC_ROLE_ORIGINATOR = 3,CMC_ROLE_AUTHORIZING_USER = 4,CMC_RECIP_IGNORE = 1,CMC_RECIP_LIST_TRUNCATED = 2,CMC_RECIP_LAST_ELEMENT = 2147483648,CMC_MSG_READ = 1,CMC_MSG_TEXT_NOTE_AS_FILE = 2,CMC_MSG_UNSENT = 4,CMC_MSG_LAST_ELEMENT = 2147483648,CMC_SUM_READ = 1,CMC_SUM_UNSENT = 2,CMC_SUM_LAST_ELEMENT = 2147483648,CMC_ERROR_UI_ALLOWED = 16777216,CMC_LOGON_UI_ALLOWED = 33554432,CMC_COUNTED_STRING_TYPE = 67108864,CMC_SEND_UI_REQUESTED = 1,CMC_FIRST_ATTACH_AS_TEXT_NOTE = 2,CMC_ACT_ON_EXTENDED = 0,CMC_ACT_ON_DELETE = 1,CMC_LIST_UNREAD_ONLY = 1,CMC_LIST_MSG_REFS_ONLY = 2,CMC_LIST_COUNT_ONLY = 4,CMC_LENGTH_UNKNOWN = -1,CMC_DO_NOT_MARK_AS_READ = 1,CMC_MSG_AND_ATT_HDRS_ONLY = 2,CMC_READ_FIRST_UNREAD_MESSAGE = 4,CMC_LOOKUP_RESOLVE_PREFIX_SEARCH = 1,CMC_LOOKUP_RESOLVE_IDENTITY = 2,CMC_LOOKUP_RESOLVE_UI = 4,CMC_LOOKUP_DETAILS_UI = 8,CMC_LOOKUP_ADDRESSING_UI = 16,CMC_LOGOFF_UI_ALLOWED = 1,CMC_VERSION = 100,CMC_CONFIG_CHARACTER_SET = 1,CMC_CONFIG_LINE_TERM = 2,CMC_CONFIG_DEFAULT_SERVICE = 3,CMC_CONFIG_DEFAULT_USER = 4,CMC_CONFIG_REQ_PASSWORD = 5,CMC_CONFIG_REQ_SERVICE = 6,CMC_CONFIG_REQ_USER = 7,CMC_CONFIG_UI_AVAIL = 8,CMC_CONFIG_SUP_NOMKMSGREAD = 9,CMC_CONFIG_SUP_COUNTED_STR = 10,CMC_CONFIG_VER_IMPLEM = 11,CMC_CONFIG_VER_SPEC = 12,CMC_LINE_TERM_CRLF = 0,CMC_LINE_TERM_CR = 1,CMC_LINE_TERM_LF = 2,CMC_REQUIRED_NO = 0,CMC_REQUIRED_YES = 1,CMC_REQUIRED_OPT = 2,CMC_ERROR_DISPLAYED = 32768,CMC_ERROR_RSV_MASK = 65535,CMC_ERROR_IMPL_MASK = 4294901760,CMC_SUCCESS = 0,CMC_E_AMBIGUOUS_RECIPIENT = 1,CMC_E_ATTACHMENT_NOT_FOUND = 2,CMC_E_ATTACHMENT_OPEN_FAILURE = 3,CMC_E_ATTACHMENT_READ_FAILURE = 4,CMC_E_ATTACHMENT_WRITE_FAILURE = 5,CMC_E_COUNTED_STRING_UNSUPPORTED = 6,CMC_E_DISK_FULL = 7,CMC_E_FAILURE = 8,CMC_E_INSUFFICIENT_MEMORY = 9,CMC_E_INVALID_CONFIGURATION = 10,CMC_E_INVALID_ENUM = 11,CMC_E_INVALID_FLAG = 12,CMC_E_INVALID_MEMORY = 13,CMC_E_INVALID_MESSAGE_PARAMETER = 14,CMC_E_INVALID_MESSAGE_REFERENCE = 15,CMC_E_INVALID_PARAMETER = 16,CMC_E_INVALID_SESSION_ID = 17,CMC_E_INVALID_UI_ID = 18,CMC_E_LOGON_FAILURE = 19,CMC_E_MESSAGE_IN_USE = 20,CMC_E_NOT_SUPPORTED = 21,CMC_E_PASSWORD_REQUIRED = 22,CMC_E_RECIPIENT_NOT_FOUND = 23,CMC_E_SERVICE_UNAVAILABLE = 24,CMC_E_TEXT_TOO_LARGE = 25,CMC_E_TOO_MANY_FILES = 26,CMC_E_TOO_MANY_RECIPIENTS = 27,CMC_E_UNABLE_TO_NOT_MARK_AS_READ = 28,CMC_E_UNRECOGNIZED_MESSAGE_TYPE = 29,CMC_E_UNSUPPORTED_ACTION = 30,CMC_E_UNSUPPORTED_CHARACTER_SET = 31,CMC_E_UNSUPPORTED_DATA_EXT = 32,CMC_E_UNSUPPORTED_FLAG = 33,CMC_E_UNSUPPORTED_FUNCTION_EXT = 34,CMC_E_UNSUPPORTED_VERSION = 35,CMC_E_USER_CANCEL = 36,CMC_E_USER_NOT_LOGGED_ON = 37,CMC_XS_COM = 0,CMC_X_COM_SUPPORT_EXT = 16,CMC_X_COM_SUPPORTED = 1,CMC_X_COM_NOT_SUPPORTED = 2,CMC_X_COM_DATA_EXT_SUPPORTED = 4,CMC_X_COM_FUNC_EXT_SUPPORTED = 8,CMC_X_COM_SUP_EXCLUDE = 16,CMC_X_COM_CONFIG_DATA = 17,CMC_X_COM_CAN_SEND_RECIP = 18,CMC_X_COM_READY = 0,CMC_X_COM_NOT_READY = 1,CMC_X_COM_DEFER = 2,CMC_X_COM_SAVE_MESSAGE = 19,CMC_X_COM_SENT_MESSAGE = 20,CMC_X_COM_TIME_RECEIVED = 128,CMC_X_COM_RECIP_ID = 129,CMC_X_COM_ATTACH_CHARPOS = 130,CMC_X_COM_PRIORITY = 131,CMC_X_COM_NORMAL = 0,CMC_X_COM_URGENT = 1,CMC_X_COM_LOW = 2,};
enum MACRO_CMD {CMD_ZOOM_PAGEWIDTH = -1,CMD_ZOOM_ONEPAGE = -2,CMD_ZOOM_TWOPAGES = -3,CMD_ZOOM_SELECTION = -4,CMD_ZOOM_FIT = -5,};
enum MACRO_CMF {CMF_NORMAL = 0x0,CMF_DEFAULTONLY = 0x1,CMF_VERBSONLY = 0x2,CMF_EXPLORE = 0x4,CMF_NOVERBS = 0x8,CMF_CANRENAME = 0x10,CMF_NODEFAULT = 0x20,CMF_INCLUDESTATIC = 0x40,CMF_RESERVED = 0xFFFF0000,};
enum MACRO_CMM {CMM_WIN_VERSION = 0,CMM_IDENT = 1,CMM_DRIVER_VERSION = 2,CMM_DLL_VERSION = 3,CMM_VERSION = 4,CMM_DESCRIPTION = 5,CMM_LOGOICON = 6,};
enum MACRO_CMS {CMS_FORWARD = 0,CMS_BACKWARD = 1,};
enum MACRO_COM {COM_RIGHTS_EXECUTE = 1,};
enum MACRO_COW {COW_PERMACHINE = 0x4,COW_PERUSER = 0x8,};
enum MACRO_CPD {CPD_DEFAULT = 0x47F,CPD_USERBYTE = 0x100,CPD_USERWORD = 0x200,CPD_USERDWORD = 0x300,CPD_TIME = 0x400,};
enum MACRO_CPL {CPL_DYNAMIC_RES = 0,CPL_INIT = 1,CPL_GETCOUNT = 2,CPL_INQUIRE = 3,CPL_SELECT = 4,CPL_DBLCLK = 5,CPL_STOP = 6,CPL_EXIT = 7,CPL_NEWINQUIRE = 8,CPL_STARTWPARMSA = 9,CPL_STARTWPARMSW = 10,CPL_STARTWPARMS = 9,CPL_SETUP = 200,};
enum MACRO_CPS {CPS_COMPLETE = 0x1,CPS_CONVERT = 0x2,CPS_REVERT = 0x3,CPS_CANCEL = 0x4,};
enum MACRO_CPU {MS_G723_CPU = 70,CCITT_A_CPU = 24,CCITT_U_CPU = 25,};
enum MACRO_CRL {CRL_V1 = 0,CRL_V2 = 1,};
enum MACRO_CRS {CRS_UPDATE = 1,CRS_DELETE = 2,CRS_INSERT = 3,CRS_REFRESH = 4,CRS_LOCKCC = 5,};
enum MACRO_CSA {CSA_A = 1,CSA_ABC = 2,CSA_DEF = 3,CSA_DEFG = 4,CSA_GRAY = 5,CSA_RGB = 6,CSA_CMYK = 7,CSA_Lab = 8,};
enum MACRO_CSC {CSC_CACHEABLE = 0x10,CSC_NOFLOWOPS = 0x20,CSC_AUTO_INWARD = 0x40,CSC_AUTO_OUTWARD = 0x80,};
enum MACRO_CSF {CSF_SHOWHELP = 0x1,CSF_VALIDSOURCE = 0x2,CSF_ONLYGETSOURCE = 0x4,CSF_EXPLORER = 0x8,};
enum MACRO_CTL {CTL_V1 = 0,};
enum MACRO_CTM {RESTORE_CTM = 4100,SAVE_CTM = 4101,};
enum MACRO_CUR {CUR_BLOB_VERSION = 2,};
enum MACRO_CWP {CWP_ALL = 0x0,CWP_SKIPINVISIBLE = 0x1,CWP_SKIPDISABLED = 0x2,CWP_SKIPTRANSPARENT = 0x4,};
enum MACRO_CWR {CWR_REPLACECR = 0x1,CWR_STRIPCR = 0x1,CWR_STRIPLF = 0x2,CWR_REPLACETAB = 0x4,CWR_STRIPTAB = 0x4,CWR_SINGLELINEEDIT = 0x7,CWR_INSERT = 0x8,CWR_TITLE = 0x10,CWR_KKCONVERT = 0x20,CWR_SIMPLE = 0x40,CWR_HEDIT = 0x80,CWR_KEYBOARD = 0x100,CWR_BOXES = 0x200,};
enum MACRO_D3D {D3D_OK = 0,};
enum MACRO_DAO {DAO_NOINDICATOR = 0xFFFFFFFF,DAO_NULL = 0xFFFFFFFF,DAO_CANTCOERCE = 0xFFFFFFFC,DAO_NOMAXLENGTH = 0x0,};
enum MACRO_DB2 {DB2 = 1,};
enum MACRO_DBG {DBG_CONTINUE = 0x10002,DBG_TERMINATE_THREAD = 0x40010003,DBG_TERMINATE_PROCESS = 0x40010004,DBG_CONTROL_C = 0x40010005,DBG_CONTROL_BREAK = 0x40010008,DBG_EXCEPTION_NOT_HANDLED = 0x80010001,};
enum MACRO_DBL {DBL_DIG = 15,DBL_MANT_DIG = 53,DBL_MAX_10_EXP = 308,DBL_MAX_EXP = 1024,DBL_MIN_10_EXP = -307,DBL_MIN_EXP = -1021,};
enum MACRO_DBT {DBT_APPYBEGIN = 0x0,DBT_APPYEND = 0x1,DBT_DEVNODES_CHANGED = 0x7,DBT_QUERYCHANGECONFIG = 0x17,DBT_CONFIGCHANGED = 0x18,DBT_CONFIGCHANGECANCELED = 0x19,DBT_MONITORCHANGE = 0x1B,DBT_SHELLLOGGEDON = 0x20,DBT_CONFIGMGAPI32 = 0x22,DBT_VXDINITCOMPLETE = 0x23,DBT_VOLLOCKQUERYLOCK = 0x8041,DBT_VOLLOCKLOCKTAKEN = 0x8042,DBT_VOLLOCKLOCKFAILED = 0x8043,DBT_VOLLOCKQUERYUNLOCK = 0x8044,DBT_VOLLOCKLOCKRELEASED = 0x8045,DBT_VOLLOCKUNLOCKFAILED = 0x8046,};
enum MACRO_DCB {DCB_RESET = 0x1,DCB_ACCUMULATE = 0x2,DCB_DIRTY = 0x2,DCB_SET = 0x3,DCB_ENABLE = 0x4,DCB_DISABLE = 0x8,};
enum MACRO_DCE {DCE_C_ERROR_STRING_LEN = 256,};
enum MACRO_DCX {DCX_WINDOW = 0x1,DCX_CACHE = 0x2,DCX_NORESETATTRS = 0x4,DCX_CLIPCHILDREN = 0x8,DCX_CLIPSIBLINGS = 0x10,DCX_PARENTCLIP = 0x20,DCX_EXCLUDERGN = 0x40,DCX_INTERSECTRGN = 0x80,DCX_EXCLUDEUPDATE = 0x100,DCX_INTERSECTUPDATE = 0x200,DCX_LOCKWINDOWUPDATE = 0x400,DCX_VALIDATE = 0x200000,};
enum MACRO_DDD {DDD_RAW_TARGET_PATH = 0x1,DDD_REMOVE_DEFINITION = 0x2,DDD_EXACT_MATCH_ON_REMOVE = 0x4,DDD_NO_BROADCAST_SYSTEM = 0x8,};
enum MACRO_DDE {DDE_FACK = 0x8000,DDE_FBUSY = 0x4000,DDE_FDEFERUPD = 0x4000,DDE_FACKREQ = 0x8000,DDE_FRELEASE = 0x2000,DDE_FREQUESTED = 0x1000,DDE_FAPPSTATUS = 0xFF,DDE_FNOTPROCESSED = 0x0,DDE_FACKRESERVED = 0xFFFF3F00,DDE_FADVRESERVED = 0xFFFF3FFF,DDE_FDATRESERVED = 0xFFFF4FFF,DDE_FPOKRESERVED = 0xFFFFDFFF,};
enum MACRO_DDF {DDF_UPDATE = 0x2,DDF_SAME_HDC = 0x4,DDF_SAME_DRAW = 0x8,DDF_DONTDRAW = 0x10,DDF_ANIMATE = 0x20,DDF_BUFFER = 0x40,DDF_JUSTDRAWIT = 0x80,DDF_FULLSCREEN = 0x100,DDF_BACKGROUNDPAL = 0x200,DDF_NOTKEYFRAME = 0x400,DDF_HURRYUP = 0x800,DDF_HALFTONE = 0x1000,DDF_PREROLL = 0x10,DDF_SAME_DIB = 0x8,DDF_SAME_SIZE = 0x8,};
enum MACRO_DDL {DDL_READWRITE = 0x0,DDL_READONLY = 0x1,DDL_HIDDEN = 0x2,DDL_SYSTEM = 0x4,DDL_DIRECTORY = 0x10,DDL_ARCHIVE = 0x20,DDL_POSTMSGS = 0x2000,DDL_DRIVES = 0x4000,DDL_EXCLUSIVE = 0x8000,};
enum MACRO_DEF {DEF_MIN_PWLEN = 6,DEF_PWUNIQUENESS = 5,DEF_MAX_PWHIST = 8,DEF_MAX_PWAGE = 4294967295,DEF_MIN_PWAGE = 0,DEF_FORCE_LOGOFF = 4294967295,DEF_MAX_BADPW = 0,};
enum MACRO_DEL {DEL_MESSAGES = 0x1,};
enum MACRO_DEV {DEV_PORT_SIM = 1,DEV_PORT_COM1 = 2,DEV_PORT_COM2 = 3,DEV_PORT_COM3 = 4,DEV_PORT_COM4 = 5,DEV_PORT_DIAQ = 6,DEV_PORT_ARTI = 7,DEV_PORT_1394 = 8,DEV_PORT_USB = 9,DEV_PORT_MIN = 1,DEV_PORT_MAX = 9,};
enum MACRO_DFC {DFC_CAPTION = 1,DFC_MENU = 2,DFC_SCROLL = 3,DFC_BUTTON = 4,DFC_POPUPMENU = 5,};
enum MACRO_DFS {DFS_VOLUME_STATE_OK = 1,DFS_VOLUME_STATE_INCONSISTENT = 2,DFS_VOLUME_STATE_OFFLINE = 3,DFS_VOLUME_STATE_ONLINE = 4,DFS_STORAGE_STATE_OFFLINE = 1,DFS_STORAGE_STATE_ONLINE = 2,DFS_ADD_VOLUME = 1,DFS_RESTORE_VOLUME = 2,};
enum MACRO_DIB {DIB_RGB_COLORS = 0,DIB_PAL_COLORS = 1,};
enum MACRO_DIF {DIF_SELECTDEVICE = 0x1,DIF_INSTALLDEVICE = 0x2,DIF_ASSIGNRESOURCES = 0x3,DIF_PROPERTIES = 0x4,DIF_REMOVE = 0x5,DIF_FIRSTTIMESETUP = 0x6,DIF_FOUNDDEVICE = 0x7,DIF_SELECTCLASSDRIVERS = 0x8,DIF_VALIDATECLASSDRIVERS = 0x9,DIF_INSTALLCLASSDRIVERS = 0xA,DIF_CALCDISKSPACE = 0xB,DIF_DESTROYPRIVATEDATA = 0xC,DIF_VALIDATEDRIVER = 0xD,DIF_MOVEDEVICE = 0xE,DIF_DETECT = 0xF,DIF_INSTALLWIZARD = 0x10,DIF_DESTROYWIZARDDATA = 0x11,DIF_PROPERTYCHANGE = 0x12,DIF_ENABLECLASS = 0x13,DIF_DETECTVERIFY = 0x14,DIF_INSTALLDEVICEFILES = 0x15,DIF_UNREMOVE = 0x16,DIF_SELECTBESTCOMPATDRV = 0x17,DIF_ALLOW_INSTALL = 0x18,DIF_REGISTERDEVICE = 0x19,DIF_INSTALLINTERFACES = 0x20,DIF_DETECTCANCEL = 0x21,DIF_REGISTER_COINSTALLERS = 0x22,};
enum MACRO_DIK {DIK_ESCAPE = 0x1,DIK_1 = 0x2,DIK_2 = 0x3,DIK_3 = 0x4,DIK_4 = 0x5,DIK_5 = 0x6,DIK_6 = 0x7,DIK_7 = 0x8,DIK_8 = 0x9,DIK_9 = 0xA,DIK_0 = 0xB,DIK_MINUS = 0xC,DIK_EQUALS = 0xD,DIK_BACK = 0xE,DIK_TAB = 0xF,DIK_Q = 0x10,DIK_W = 0x11,DIK_E = 0x12,DIK_R = 0x13,DIK_T = 0x14,DIK_Y = 0x15,DIK_U = 0x16,DIK_I = 0x17,DIK_O = 0x18,DIK_P = 0x19,DIK_LBRACKET = 0x1A,DIK_RBRACKET = 0x1B,DIK_RETURN = 0x1C,DIK_LCONTROL = 0x1D,DIK_A = 0x1E,DIK_S = 0x1F,DIK_D = 0x20,DIK_F = 0x21,DIK_G = 0x22,DIK_H = 0x23,DIK_J = 0x24,DIK_K = 0x25,DIK_L = 0x26,DIK_SEMICOLON = 0x27,DIK_APOSTROPHE = 0x28,DIK_GRAVE = 0x29,DIK_LSHIFT = 0x2A,DIK_BACKSLASH = 0x2B,DIK_Z = 0x2C,DIK_X = 0x2D,DIK_C = 0x2E,DIK_V = 0x2F,DIK_B = 0x30,DIK_N = 0x31,DIK_M = 0x32,DIK_COMMA = 0x33,DIK_PERIOD = 0x34,DIK_SLASH = 0x35,DIK_RSHIFT = 0x36,DIK_MULTIPLY = 0x37,DIK_LMENU = 0x38,DIK_SPACE = 0x39,DIK_CAPITAL = 0x3A,DIK_F1 = 0x3B,DIK_F2 = 0x3C,DIK_F3 = 0x3D,DIK_F4 = 0x3E,DIK_F5 = 0x3F,DIK_F6 = 0x40,DIK_F7 = 0x41,DIK_F8 = 0x42,DIK_F9 = 0x43,DIK_F10 = 0x44,DIK_NUMLOCK = 0x45,DIK_SCROLL = 0x46,DIK_NUMPAD7 = 0x47,DIK_NUMPAD8 = 0x48,DIK_NUMPAD9 = 0x49,DIK_SUBTRACT = 0x4A,DIK_NUMPAD4 = 0x4B,DIK_NUMPAD5 = 0x4C,DIK_NUMPAD6 = 0x4D,DIK_ADD = 0x4E,DIK_NUMPAD1 = 0x4F,DIK_NUMPAD2 = 0x50,DIK_NUMPAD3 = 0x51,DIK_NUMPAD0 = 0x52,DIK_DECIMAL = 0x53,DIK_F11 = 0x57,DIK_F12 = 0x58,DIK_F13 = 0x64,DIK_F14 = 0x65,DIK_F15 = 0x66,DIK_KANA = 0x70,DIK_CONVERT = 0x79,DIK_NOCONVERT = 0x7B,DIK_YEN = 0x7D,DIK_NUMPADEQUALS = 0x8D,DIK_CIRCUMFLEX = 0x90,DIK_AT = 0x91,DIK_COLON = 0x92,DIK_UNDERLINE = 0x93,DIK_KANJI = 0x94,DIK_STOP = 0x95,DIK_AX = 0x96,DIK_UNLABELED = 0x97,DIK_NUMPADENTER = 0x9C,DIK_RCONTROL = 0x9D,DIK_NUMPADCOMMA = 0xB3,DIK_DIVIDE = 0xB5,DIK_SYSRQ = 0xB7,DIK_RMENU = 0xB8,DIK_PAUSE = 0xC5,DIK_HOME = 0xC7,DIK_UP = 0xC8,DIK_PRIOR = 0xC9,DIK_LEFT = 0xCB,DIK_RIGHT = 0xCD,DIK_END = 0xCF,DIK_DOWN = 0xD0,DIK_NEXT = 0xD1,DIK_INSERT = 0xD2,DIK_DELETE = 0xD3,DIK_LWIN = 0xDB,DIK_RWIN = 0xDC,DIK_APPS = 0xDD,DIK_POWER = 0xDE,DIK_SLEEP = 0xDF,DIK_BACKSPACE = 0xE,DIK_NUMPADSTAR = 0x37,DIK_LALT = 0x38,DIK_CAPSLOCK = 0x3A,DIK_NUMPADMINUS = 0x4A,DIK_NUMPADPLUS = 0x4E,DIK_NUMPADPERIOD = 0x53,DIK_NUMPADSLASH = 0xB5,DIK_RALT = 0xB8,DIK_UPARROW = 0xC8,DIK_PGUP = 0xC9,DIK_LEFTARROW = 0xCB,DIK_RIGHTARROW = 0xCD,DIK_DOWNARROW = 0xD0,DIK_PGDN = 0xD1,};
enum MACRO_DIR {DIR_BACKWARD = 0x1,};
enum MACRO_DLG {DLG_COLOR = 10,};
enum MACRO_DLL {DLL_PROCESS_ATTACH = 1,DLL_THREAD_ATTACH = 2,DLL_THREAD_DETACH = 3,DLL_PROCESS_DETACH = 0,};
enum MACRO_DLR {DLR_NO_WAIT = 0x1,};
enum MACRO_DMA {DMA_CANT_BE_DETECTED = 0xFF,};
enum MACRO_DMI {DMI_MASK = 0x1,DMI_BKCOLOR = 0x2,DMI_USERECT = 0x4,};
enum MACRO_DNF {DNF_DUPDESC = 0x1,DNF_OLDDRIVER = 0x2,DNF_EXCLUDEFROMLIST = 0x4,DNF_NODRIVER = 0x8,DNF_LEGACYINF = 0x10,};
enum MACRO_DNS {DNS_REGISTER = 0x1,DNS_UNREGISTER = 0x2,DNS_FILTERON = 0x4,DNS_FILTEROFF = 0x8,};
enum MACRO_DOF {DOF_EXECUTABLE = 0x8001,DOF_DOCUMENT = 0x8002,DOF_DIRECTORY = 0x8003,DOF_MULTIPLE = 0x8004,DOF_PROGMAN = 0x1,DOF_SHELLDATA = 0x2,};
enum MACRO_DPD {DPD_DELETE_UNUSED_FILES = 0x1,DPD_DELETE_SPECIFIC_VERSION = 0x2,DPD_DELETE_ALL_FILES = 0x4,};
enum MACRO_DPL {DPL_NOCONFIRMATION = 0,};
enum MACRO_DRV {DRV_LOAD = 0x1,DRV_ENABLE = 0x2,DRV_OPEN = 0x3,DRV_CLOSE = 0x4,DRV_DISABLE = 0x5,DRV_FREE = 0x6,DRV_CONFIGURE = 0x7,DRV_QUERYCONFIGURE = 0x8,DRV_INSTALL = 0x9,DRV_REMOVE = 0xA,DRV_EXITSESSION = 0xB,DRV_POWER = 0xF,DRV_RESERVED = 0x800,DRV_USER = 0x4000,};
enum MACRO_DSS {DSS_NORMAL = 0x0,DSS_UNION = 0x10,DSS_DISABLED = 0x20,DSS_MONO = 0x80,DSS_RIGHT = 0x8000,};
enum MACRO_DST {DST_COMPLEX = 0x0,DST_TEXT = 0x1,DST_PREFIXTEXT = 0x2,DST_ICON = 0x3,DST_BITMAP = 0x4,};
enum MACRO_DTM {DTM_FIRST = 0x1000,DTM_GETSYSTEMTIME = 0x1001,DTM_SETSYSTEMTIME = 0x1002,DTM_GETRANGE = 0x1003,DTM_SETRANGE = 0x1004,DTM_SETFORMATA = 0x1005,DTM_SETFORMATW = 0x1032,DTM_SETFORMAT = 0x1005,DTM_SETMCCOLOR = 0x1006,DTM_GETMCCOLOR = 0x1007,DTM_GETMONTHCAL = 0x1008,DTM_SETMCFONT = 0x1009,DTM_GETMCFONT = 0x100A,};
enum MACRO_DTN {DTN_FIRST = -760,DTN_LAST = -799,};
enum MACRO_DTR {DTR_CONTROL_DISABLE = 0x0,DTR_CONTROL_ENABLE = 0x1,DTR_CONTROL_HANDSHAKE = 0x2,};
enum MACRO_DTS {DTS_UPDOWN = 0x1,DTS_SHOWNONE = 0x2,DTS_SHORTDATEFORMAT = 0x0,DTS_LONGDATEFORMAT = 0x4,DTS_TIMEFORMAT = 0x9,DTS_APPCANPARSE = 0x10,DTS_RIGHTALIGN = 0x20,};
enum MACRO_DVD {DVD_PARENTAL_LEVEL_8 = 0x8000,DVD_PARENTAL_LEVEL_7 = 0x4000,DVD_PARENTAL_LEVEL_6 = 0x2000,DVD_PARENTAL_LEVEL_5 = 0x1000,DVD_PARENTAL_LEVEL_4 = 0x800,DVD_PARENTAL_LEVEL_3 = 0x400,DVD_PARENTAL_LEVEL_2 = 0x200,DVD_PARENTAL_LEVEL_1 = 0x100,};
enum MACRO_DVM {DVM_USER = 0x4000,DVM_CONFIGURE_START = 0x1000,DVM_CONFIGURE_END = 0x1FFF,DVM_PALETTE = 0x1001,DVM_FORMAT = 0x1002,DVM_PALETTERGB555 = 0x1003,DVM_SRC_RECT = 0x1004,DVM_DST_RECT = 0x1005,};
enum MACRO_DWL {DWL_MSGRESULT = 0,DWL_DLGPROC = 4,DWL_USER = 8,};
enum MACRO_DWN {DWN_COLORMODE = 0x3F,DWN_DOWNLOADONLY = 0x40,DWN_FORCEDITHER = 0x80,DWN_RAWIMAGE = 0x100,};
enum MACRO_ECO {ECO_AUTOWORDSELECTION = 0x1,ECO_AUTOVSCROLL = 0x40,ECO_AUTOHSCROLL = 0x80,ECO_NOHIDESEL = 0x100,ECO_READONLY = 0x800,ECO_WANTRETURN = 0x1000,ECO_SAVESEL = 0x8000,ECO_SELECTIONBAR = 0x1000000,ECO_VERTICAL = 0x400000,};
enum MACRO_EDK {EDK_RULES_VERSION = 1,};
enum MACRO_EFS {EFS_USE_RECOVERY_KEYS = 0x1,};
enum MACRO_ELF {ELF_VENDOR_SIZE = 4,ELF_VERSION = 0,ELF_CULTURE_LATIN = 0,};
enum MACRO_EMR {EMR_HEADER = 1,EMR_POLYBEZIER = 2,EMR_POLYGON = 3,EMR_POLYLINE = 4,EMR_POLYBEZIERTO = 5,EMR_POLYLINETO = 6,EMR_POLYPOLYLINE = 7,EMR_POLYPOLYGON = 8,EMR_SETWINDOWEXTEX = 9,EMR_SETWINDOWORGEX = 10,EMR_SETVIEWPORTEXTEX = 11,EMR_SETVIEWPORTORGEX = 12,EMR_SETBRUSHORGEX = 13,EMR_EOF = 14,EMR_SETPIXELV = 15,EMR_SETMAPPERFLAGS = 16,EMR_SETMAPMODE = 17,EMR_SETBKMODE = 18,EMR_SETPOLYFILLMODE = 19,EMR_SETROP2 = 20,EMR_SETSTRETCHBLTMODE = 21,EMR_SETTEXTALIGN = 22,EMR_SETCOLORADJUSTMENT = 23,EMR_SETTEXTCOLOR = 24,EMR_SETBKCOLOR = 25,EMR_OFFSETCLIPRGN = 26,EMR_MOVETOEX = 27,EMR_SETMETARGN = 28,EMR_EXCLUDECLIPRECT = 29,EMR_INTERSECTCLIPRECT = 30,EMR_SCALEVIEWPORTEXTEX = 31,EMR_SCALEWINDOWEXTEX = 32,EMR_SAVEDC = 33,EMR_RESTOREDC = 34,EMR_SETWORLDTRANSFORM = 35,EMR_MODIFYWORLDTRANSFORM = 36,EMR_SELECTOBJECT = 37,EMR_CREATEPEN = 38,EMR_CREATEBRUSHINDIRECT = 39,EMR_DELETEOBJECT = 40,EMR_ANGLEARC = 41,EMR_ELLIPSE = 42,EMR_RECTANGLE = 43,EMR_ROUNDRECT = 44,EMR_ARC = 45,EMR_CHORD = 46,EMR_PIE = 47,EMR_SELECTPALETTE = 48,EMR_CREATEPALETTE = 49,EMR_SETPALETTEENTRIES = 50,EMR_RESIZEPALETTE = 51,EMR_REALIZEPALETTE = 52,EMR_EXTFLOODFILL = 53,EMR_LINETO = 54,EMR_ARCTO = 55,EMR_POLYDRAW = 56,EMR_SETARCDIRECTION = 57,EMR_SETMITERLIMIT = 58,EMR_BEGINPATH = 59,EMR_ENDPATH = 60,EMR_CLOSEFIGURE = 61,EMR_FILLPATH = 62,EMR_STROKEANDFILLPATH = 63,EMR_STROKEPATH = 64,EMR_FLATTENPATH = 65,EMR_WIDENPATH = 66,EMR_SELECTCLIPPATH = 67,EMR_ABORTPATH = 68,EMR_GDICOMMENT = 70,EMR_FILLRGN = 71,EMR_FRAMERGN = 72,EMR_INVERTRGN = 73,EMR_PAINTRGN = 74,EMR_EXTSELECTCLIPRGN = 75,EMR_BITBLT = 76,EMR_STRETCHBLT = 77,EMR_MASKBLT = 78,EMR_PLGBLT = 79,EMR_SETDIBITSTODEVICE = 80,EMR_STRETCHDIBITS = 81,EMR_EXTCREATEFONTINDIRECTW = 82,EMR_EXTTEXTOUTA = 83,EMR_EXTTEXTOUTW = 84,EMR_POLYBEZIER16 = 85,EMR_POLYGON16 = 86,EMR_POLYLINE16 = 87,EMR_POLYBEZIERTO16 = 88,EMR_POLYLINETO16 = 89,EMR_POLYPOLYLINE16 = 90,EMR_POLYPOLYGON16 = 91,EMR_POLYDRAW16 = 92,EMR_CREATEMONOBRUSH = 93,EMR_CREATEDIBPATTERNBRUSHPT = 94,EMR_EXTCREATEPEN = 95,EMR_POLYTEXTOUTA = 96,EMR_POLYTEXTOUTW = 97,EMR_SETICMMODE = 98,EMR_CREATECOLORSPACE = 99,EMR_SETCOLORSPACE = 100,EMR_DELETECOLORSPACE = 101,EMR_GLSRECORD = 102,EMR_GLSBOUNDEDRECORD = 103,EMR_PIXELFORMAT = 104,EMR_DRAWESCAPE = 105,EMR_EXTESCAPE = 106,EMR_STARTDOC = 107,EMR_SMALLTEXTOUT = 108,EMR_FORCEUFIMAPPING = 109,EMR_NAMEDESCAPE = 110,EMR_COLORCORRECTPALETTE = 111,EMR_SETICMPROFILEA = 112,EMR_SETICMPROFILEW = 113,EMR_ALPHABLEND = 114,EMR_ALPHADIBBLEND = 115,EMR_TRANSPARENTBLT = 116,EMR_TRANSPARENTDIB = 117,EMR_GRADIENTFILL = 118,EMR_SETLINKEDUFIS = 119,EMR_SETTEXTJUSTIFICATION = 120,EMR_MIN = 1,EMR_MAX = 120,};
enum MACRO_EMS {EMS_AB_ADDRESS_LOOKUP = 0x1,};
enum MACRO_ENC {ENC_SAMPLE1_REQUEST_STRUCT = 3000,ENC_SAMPLE2_REQUEST_STRUCT = 3001,};
enum MACRO_END {END_RESEND_NOW = 0x10000,END_RESEND_LATER = 0x20000,END_DONT_RESEND = 0x40000,};
enum MACRO_ENM {ENM_NONE = 0x0,ENM_CHANGE = 0x1,ENM_UPDATE = 0x2,ENM_SCROLL = 0x4,ENM_KEYEVENTS = 0x10000,ENM_MOUSEEVENTS = 0x20000,ENM_REQUESTRESIZE = 0x40000,ENM_SELCHANGE = 0x80000,ENM_DROPFILES = 0x100000,ENM_PROTECTED = 0x200000,ENM_CORRECTTEXT = 0x400000,ENM_SCROLLEVENTS = 0x8,ENM_DRAGDROPDONE = 0x10,ENM_IMECHANGE = 0x800000,ENM_LANGCHANGE = 0x1000000,ENM_OBJECTPOSITIONS = 0x2000000,ENM_LINK = 0x4000000,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EPS {EPS_SIGNATURE = 0x46535045,};
enum MACRO_ERR {ERR_TSTOVFL = 91,ERR_TSTDUP = 92,};
enum MACRO_ESB {ESB_ENABLE_BOTH = 0x0,ESB_DISABLE_BOTH = 0x3,ESB_DISABLE_LEFT = 0x1,ESB_DISABLE_RIGHT = 0x2,ESB_DISABLE_UP = 0x1,ESB_DISABLE_DOWN = 0x2,ESB_DISABLE_LTUP = 0x1,ESB_DISABLE_RTDN = 0x2,};
enum MACRO_ETO {ETO_OPAQUE = 0x2,ETO_CLIPPED = 0x4,ETO_GLYPH_INDEX = 0x10,ETO_RTLREADING = 0x80,ETO_NUMERICSLOCAL = 0x400,ETO_NUMERICSLATIN = 0x800,ETO_IGNORELANGUAGE = 0x1000,ETO_PDY = 0x2000,};
enum MACRO_EWX {EWX_SHUTDOWN = 0x1,EWX_REBOOT = 0x2,EWX_FORCE = 0x4,EWX_POWEROFF = 0x8,EWX_FORCEIFHUNG = 0x10,};
enum MACRO_EXT {EXT_DEVICE_CAPS = 4099,};
enum MACRO_FCT {FCT_MERGE = 0x1,FCT_CONFIGABLE = 0x2,FCT_ADDTOEND = 0x4,};
enum MACRO_FCW {FCW_STATUS = 0x1,FCW_TOOLBAR = 0x2,FCW_TREE = 0x3,FCW_INTERNETBAR = 0x6,FCW_PROGRESS = 0x8,};
enum MACRO_FKF {FKF_FILTERKEYSON = 0x1,FKF_AVAILABLE = 0x2,FKF_HOTKEYACTIVE = 0x4,FKF_CONFIRMHOTKEY = 0x8,FKF_HOTKEYSOUND = 0x10,FKF_INDICATOR = 0x20,FKF_CLICKON = 0x40,};
enum MACRO_FLG {FLG_ADDREG_BINVALUETYPE = 0x1,FLG_ADDREG_NOCLOBBER = 0x2,FLG_ADDREG_DELVAL = 0x4,FLG_ADDREG_APPEND = 0x8,FLG_ADDREG_KEYONLY = 0x10,FLG_ADDREG_OVERWRITEONLY = 0x20,FLG_ADDREG_TYPE_MASK = 0xFFFF0001,FLG_ADDREG_TYPE_SZ = 0x0,FLG_ADDREG_TYPE_MULTI_SZ = 0x10000,FLG_ADDREG_TYPE_EXPAND_SZ = 0x20000,FLG_ADDREG_TYPE_BINARY = 0x1,FLG_ADDREG_TYPE_DWORD = 0x10001,FLG_ADDREG_TYPE_NONE = 0x20001,};
enum MACRO_FLI {FLI_MASK = 0x103B,};
enum MACRO_FLT {FLT_DIG = 6,FLT_GUARD = 0,FLT_MANT_DIG = 24,FLT_MAX_10_EXP = 38,FLT_MAX_EXP = 128,FLT_MIN_10_EXP = -37,FLT_MIN_EXP = -125,FLT_NORMALIZE = 0,FLT_RADIX = 2,FLT_ROUNDS = 1,};
enum MACRO_FOF {FOF_MULTIDESTFILES = 0x1,FOF_CONFIRMMOUSE = 0x2,FOF_SILENT = 0x4,FOF_RENAMEONCOLLISION = 0x8,FOF_NOCONFIRMATION = 0x10,FOF_WANTMAPPINGHANDLE = 0x20,FOF_ALLOWUNDO = 0x40,FOF_FILESONLY = 0x80,FOF_SIMPLEPROGRESS = 0x100,FOF_NOCONFIRMMKDIR = 0x200,FOF_NOERRORUI = 0x400,FOF_NOCOPYSECURITYATTRIBS = 0x800,};
enum MACRO_FPE {FPE_INVALID = 129,FPE_DENORMAL = 130,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_UNEMULATED = 135,FPE_SQRTNEG = 136,FPE_STACKOVERFLOW = 138,FPE_STACKUNDERFLOW = 139,FPE_EXPLICITGEN = 140,};
enum MACRO_FSB {FSB_FLAT_MODE = 2,FSB_ENCARTA_MODE = 1,FSB_REGULAR_MODE = 0,};
enum MACRO_FTC {FTC_EMPTY = 0x0,FTC_SUCCEED = 0x1,FTC_MISSING = 0x2,FTC_ENDOFKEYSET = 0x4,FTC_ENDOFRESULTS = 0x8,};
enum MACRO_FTP {FTP_TRANSFER_TYPE_UNKNOWN = 0x0,FTP_TRANSFER_TYPE_ASCII = 0x1,FTP_TRANSFER_TYPE_BINARY = 0x2,FTP_TRANSFER_TYPE_MASK = 0x3,};
enum MACRO_GBM {GBM_HWNDASSOCIATESET = 1024,GBM_HWNDASSOCIATEGET = 1025,GBM_GIZMOADDW = 1026,GBM_GIZMOADDA = 1027,GBM_GIZMOREMOVE = 1028,GBM_GIZMOSENDMESSAGE = 1029,GBM_GIZMOSHOW = 1030,GBM_GIZMOENABLE = 1031,GBM_GIZMOCHECK = 1032,GBM_GIZMOFOCUSSET = 1033,GBM_GIZMOEXIST = 1034,GBM_GIZMOTYPEGET = 1035,GBM_GIZMODATASET = 1036,GBM_GIZMODATAGET = 1037,GBM_GIZMONOTIFYSET = 1038,GBM_GIZMONOTIFYGET = 1039,GBM_GIZMOTEXTGETA = 1040,GBM_GIZMOTEXTGETW = 1041,GBM_GIZMOTEXTSETA = 1042,GBM_GIZMOTEXTSETW = 1043,GBM_GIZMOINTGET = 1044,GBM_GIZMOINTSET = 1045,GBM_GIZMOTEXTGET = 1040,GBM_GIZMOTEXTSET = 1042,GBM_GIZMOADD = 1027,};
enum MACRO_GBN {GBN_ASSOCIATEGAIN = 1,GBN_ASSOCIATELOSS = 2,GBN_GIZMOADDED = 3,GBN_GIZMOREMOVED = 4,};
enum MACRO_GCL {GCL_MENUNAME = -8,GCL_HBRBACKGROUND = -10,GCL_HCURSOR = -12,GCL_HICON = -14,GCL_HMODULE = -16,GCL_CBWNDEXTRA = -18,GCL_CBCLSEXTRA = -20,GCL_WNDPROC = -24,GCL_STYLE = -26,};
enum MACRO_GCM {GCM_RIGHTMOUSEDROP = 0x8000,};
enum MACRO_GCP {GCP_DBCS = 0x1,GCP_REORDER = 0x2,GCP_USEKERNING = 0x8,GCP_GLYPHSHAPE = 0x10,GCP_LIGATE = 0x20,GCP_DIACRITIC = 0x100,GCP_KASHIDA = 0x400,GCP_ERROR = 0x8000,};
enum MACRO_GCS {GCS_COMPREADSTR = 0x1,GCS_COMPREADATTR = 0x2,GCS_COMPREADCLAUSE = 0x4,GCS_COMPSTR = 0x8,GCS_COMPATTR = 0x10,GCS_COMPCLAUSE = 0x20,GCS_CURSORPOS = 0x80,GCS_DELTASTART = 0x100,GCS_RESULTREADSTR = 0x200,GCS_RESULTREADCLAUSE = 0x400,GCS_RESULTSTR = 0x800,GCS_RESULTCLAUSE = 0x1000,};
enum MACRO_GCT {GCT_INVALID = 0x0,GCT_LFNCHAR = 0x1,GCT_SHORTCHAR = 0x2,GCT_WILD = 0x4,GCT_SEPARATOR = 0x8,};
enum MACRO_GCW {GCW_ATOM = -32,};
enum MACRO_GDI {GDI_ERROR = 0xFFFFFFFF,HGDI_ERROR = 0xFFFFFFFF,};
enum MACRO_GDT {GDT_ERROR = -1,GDT_VALID = 0,GDT_NONE = 1,};
enum MACRO_GET {GET_TAPE_MEDIA_INFORMATION = 0,GET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_GGI {GGI_MARK_NONEXISTING_GLYPHS = 0x1,};
enum MACRO_GGL {GGL_LEVEL = 0x1,GGL_INDEX = 0x2,GGL_STRING = 0x3,GGL_PRIVATE = 0x4,};
enum MACRO_GGO {GGO_METRICS = 0,GGO_BITMAP = 1,GGO_NATIVE = 2,GGO_BEZIER = 3,GGO_GRAY2_BITMAP = 4,GGO_GRAY4_BITMAP = 5,GGO_GRAY8_BITMAP = 6,GGO_GLYPH_INDEX = 128,};
enum MACRO_GIL {GIL_OPENICON = 0x1,GIL_FORSHELL = 0x2,GIL_ASYNC = 0x20,GIL_SIMULATEDOC = 0x1,GIL_PERINSTANCE = 0x2,GIL_PERCLASS = 0x4,GIL_NOTFILENAME = 0x8,GIL_DONTCACHE = 0x10,};
enum MACRO_GLU {GLU_VERSION_1_1 = 1,GLU_VERSION_1_2 = 1,GLU_INVALID_ENUM = 100900,GLU_INVALID_VALUE = 100901,GLU_OUT_OF_MEMORY = 100902,GLU_INCOMPATIBLE_GL_VERSION = 100903,GLU_VERSION = 100800,GLU_EXTENSIONS = 100801,GLU_TRUE = 1,GLU_FALSE = 0,GLU_SMOOTH = 100000,GLU_FLAT = 100001,GLU_NONE = 100002,GLU_POINT = 100010,GLU_LINE = 100011,GLU_FILL = 100012,GLU_SILHOUETTE = 100013,GLU_OUTSIDE = 100020,GLU_INSIDE = 100021,GLU_TESS_WINDING_RULE = 100140,GLU_TESS_BOUNDARY_ONLY = 100141,GLU_TESS_TOLERANCE = 100142,GLU_TESS_WINDING_ODD = 100130,GLU_TESS_WINDING_NONZERO = 100131,GLU_TESS_WINDING_POSITIVE = 100132,GLU_TESS_WINDING_NEGATIVE = 100133,GLU_TESS_WINDING_ABS_GEQ_TWO = 100134,GLU_TESS_BEGIN = 100100,GLU_TESS_VERTEX = 100101,GLU_TESS_END = 100102,GLU_TESS_ERROR = 100103,GLU_TESS_EDGE_FLAG = 100104,GLU_TESS_COMBINE = 100105,GLU_TESS_BEGIN_DATA = 100106,GLU_TESS_VERTEX_DATA = 100107,GLU_TESS_END_DATA = 100108,GLU_TESS_ERROR_DATA = 100109,GLU_TESS_EDGE_FLAG_DATA = 100110,GLU_TESS_COMBINE_DATA = 100111,GLU_TESS_ERROR1 = 100151,GLU_TESS_ERROR2 = 100152,GLU_TESS_ERROR3 = 100153,GLU_TESS_ERROR4 = 100154,GLU_TESS_ERROR5 = 100155,GLU_TESS_ERROR6 = 100156,GLU_TESS_ERROR7 = 100157,GLU_TESS_ERROR8 = 100158,GLU_TESS_MISSING_BEGIN_POLYGON = 100151,GLU_TESS_MISSING_BEGIN_CONTOUR = 100152,GLU_TESS_MISSING_END_POLYGON = 100153,GLU_TESS_MISSING_END_CONTOUR = 100154,GLU_TESS_COORD_TOO_LARGE = 100155,GLU_TESS_NEED_COMBINE_CALLBACK = 100156,GLU_AUTO_LOAD_MATRIX = 100200,GLU_CULLING = 100201,GLU_SAMPLING_TOLERANCE = 100203,GLU_DISPLAY_MODE = 100204,GLU_PARAMETRIC_TOLERANCE = 100202,GLU_SAMPLING_METHOD = 100205,GLU_U_STEP = 100206,GLU_V_STEP = 100207,GLU_PATH_LENGTH = 100215,GLU_PARAMETRIC_ERROR = 100216,GLU_DOMAIN_DISTANCE = 100217,GLU_MAP1_TRIM_2 = 100210,GLU_MAP1_TRIM_3 = 100211,GLU_OUTLINE_POLYGON = 100240,GLU_OUTLINE_PATCH = 100241,GLU_NURBS_ERROR1 = 100251,GLU_NURBS_ERROR2 = 100252,GLU_NURBS_ERROR3 = 100253,GLU_NURBS_ERROR4 = 100254,GLU_NURBS_ERROR5 = 100255,GLU_NURBS_ERROR6 = 100256,GLU_NURBS_ERROR7 = 100257,GLU_NURBS_ERROR8 = 100258,GLU_NURBS_ERROR9 = 100259,GLU_NURBS_ERROR10 = 100260,GLU_NURBS_ERROR11 = 100261,GLU_NURBS_ERROR12 = 100262,GLU_NURBS_ERROR13 = 100263,GLU_NURBS_ERROR14 = 100264,GLU_NURBS_ERROR15 = 100265,GLU_NURBS_ERROR16 = 100266,GLU_NURBS_ERROR17 = 100267,GLU_NURBS_ERROR18 = 100268,GLU_NURBS_ERROR19 = 100269,GLU_NURBS_ERROR20 = 100270,GLU_NURBS_ERROR21 = 100271,GLU_NURBS_ERROR22 = 100272,GLU_NURBS_ERROR23 = 100273,GLU_NURBS_ERROR24 = 100274,GLU_NURBS_ERROR25 = 100275,GLU_NURBS_ERROR26 = 100276,GLU_NURBS_ERROR27 = 100277,GLU_NURBS_ERROR28 = 100278,GLU_NURBS_ERROR29 = 100279,GLU_NURBS_ERROR30 = 100280,GLU_NURBS_ERROR31 = 100281,GLU_NURBS_ERROR32 = 100282,GLU_NURBS_ERROR33 = 100283,GLU_NURBS_ERROR34 = 100284,GLU_NURBS_ERROR35 = 100285,GLU_NURBS_ERROR36 = 100286,GLU_NURBS_ERROR37 = 100287,GLU_CW = 100120,GLU_CCW = 100121,GLU_INTERIOR = 100122,GLU_EXTERIOR = 100123,GLU_UNKNOWN = 100124,GLU_BEGIN = 100100,GLU_VERTEX = 100101,GLU_END = 100102,GLU_ERROR = 100103,GLU_EDGE_FLAG = 100104,};
enum MACRO_GMR {GMR_VISIBLE = 0,GMR_DAYSTATE = 1,};
enum MACRO_GPA {GPA_MAXLEN = 1,GPA_POINTS = 2,GPA_PDTS = 3,GPA_RATE = 4,GPA_RECTBOUND = 5,GPA_RECTBOUNDINK = 6,GPA_SIZE = 7,GPA_STROKES = 8,GPA_TIME = 9,GPA_USER = 10,GPA_VERSION = 11,};
enum MACRO_GRC {GRC_API_FAILED = 104,};
enum MACRO_GRH {GRH_ALL = 0,GRH_GESTURE = 1,GRH_NONGESTURE = 2,};
enum MACRO_GSA {GSA_PENTIP = 1,GSA_PENTIPCLASS = 2,GSA_USER = 3,GSA_USERCLASS = 4,GSA_TIME = 5,GSA_SIZE = 6,GSA_SELECT = 7,GSA_DOWN = 8,GSA_RECTBOUND = 9,GSA_PENTIPTABLE = 10,GSA_SIZETABLE = 11,GSA_USERTABLE = 12,};
enum MACRO_GST {GST_SEL = 0x1,GST_CLIP = 0x2,GST_WHITE = 0x4,GST_KKCONVERT = 0x8,GST_EDIT = 0x10,GST_SYS = 0x17,GST_CIRCLELO = 0x100,GST_CIRCLEUP = 0x200,GST_CIRCLE = 0x300,GST_ALL = 0x317,};
enum MACRO_GTL {GTL_DEFAULT = 0,GTL_USECRLF = 1,GTL_PRECISE = 2,GTL_CLOSE = 4,GTL_NUMCHARS = 8,GTL_NUMBYTES = 16,};
enum MACRO_GUI {GUI_CARETBLINKING = 0x1,GUI_INMOVESIZE = 0x2,GUI_INMENUMODE = 0x4,GUI_SYSTEMMENUMODE = 0x8,GUI_POPUPMENUMODE = 0x10,};
enum MACRO_GWL {GWL_WNDPROC = -4,GWL_HINSTANCE = -6,GWL_HWNDPARENT = -8,GWL_STYLE = -16,GWL_EXSTYLE = -20,GWL_USERDATA = -21,GWL_ID = -12,};
enum MACRO_HCF {HCF_HIGHCONTRASTON = 0x1,HCF_AVAILABLE = 0x2,HCF_HOTKEYACTIVE = 0x4,HCF_CONFIRMHOTKEY = 0x8,HCF_HOTKEYSOUND = 0x10,HCF_INDICATOR = 0x20,HCF_HOTKEYAVAILABLE = 0x40,};
enum MACRO_HDF {HDF_LEFT = 0,HDF_RIGHT = 1,HDF_CENTER = 2,HDF_JUSTIFYMASK = 3,HDF_RTLREADING = 4,HDF_OWNERDRAW = 32768,HDF_STRING = 16384,HDF_BITMAP = 8192,HDF_BITMAP_ON_RIGHT = 4096,HDF_IMAGE = 2048,};
enum MACRO_HDI {HDI_WIDTH = 0x1,HDI_HEIGHT = 0x1,HDI_TEXT = 0x2,HDI_FORMAT = 0x4,HDI_LPARAM = 0x8,HDI_BITMAP = 0x10,HDI_IMAGE = 0x20,HDI_DI_SETITEM = 0x40,HDI_ORDER = 0x80,};
enum MACRO_HDM {HDM_GETITEMCOUNT = 4608,HDM_INSERTITEMA = 4609,HDM_INSERTITEMW = 4618,HDM_INSERTITEM = 4609,HDM_DELETEITEM = 4610,HDM_GETITEMA = 4611,HDM_GETITEMW = 4619,HDM_GETITEM = 4611,HDM_SETITEMA = 4612,HDM_SETITEMW = 4620,HDM_SETITEM = 4612,HDM_LAYOUT = 4613,};
enum MACRO_HDN {HDN_FIRST = -300,HDN_LAST = -399,};
enum MACRO_HDS {HDS_HORZ = 0x0,HDS_BUTTONS = 0x2,HDS_HOTTRACK = 0x4,HDS_HIDDEN = 0x8,HDS_DRAGDROP = 0x40,HDS_FULLDRAG = 0x80,};
enum MACRO_HEP {HEP_NORECOG = 0,HEP_RECOG = 1,HEP_WAITFORTAP = 2,};
enum MACRO_HHT {HHT_NOWHERE = 0x1,HHT_ONHEADER = 0x2,HHT_ONDIVIDER = 0x4,HHT_ONDIVOPEN = 0x8,HHT_ABOVE = 0x100,HHT_BELOW = 0x200,HHT_TORIGHT = 0x400,HHT_TOLEFT = 0x800,};
enum MACRO_HKL {HKL_PREV = 0,HKL_NEXT = 1,};
enum MACRO_HKP {HKP_SETHOOK = 0,HKP_UNHOOK = 65535,};
enum MACRO_HSE {HSE_VERSION_MAJOR = 4,HSE_VERSION_MINOR = 0,HSE_LOG_BUFFER_LEN = 80,HSE_MAX_EXT_DLL_NAME_LEN = 256,HSE_VERSION = 262144,HSE_STATUS_SUCCESS = 1,HSE_STATUS_SUCCESS_AND_KEEP_CONN = 2,HSE_STATUS_PENDING = 3,HSE_STATUS_ERROR = 4,HSE_REQ_BASE = 0,HSE_REQ_SEND_URL_REDIRECT_RESP = 1,HSE_REQ_SEND_URL = 2,HSE_REQ_SEND_RESPONSE_HEADER = 3,HSE_REQ_DONE_WITH_SESSION = 4,HSE_REQ_END_RESERVED = 1000,HSE_REQ_MAP_URL_TO_PATH = 1001,HSE_REQ_GET_SSPI_INFO = 1002,HSE_APPEND_LOG_PARAMETER = 1003,HSE_REQ_IO_COMPLETION = 1005,HSE_REQ_TRANSMIT_FILE = 1006,HSE_REQ_REFRESH_ISAPI_ACL = 1007,HSE_REQ_IS_KEEP_CONN = 1008,HSE_REQ_ASYNC_READ_CLIENT = 1010,HSE_REQ_GET_IMPERSONATION_TOKEN = 1011,HSE_REQ_MAP_URL_TO_PATH_EX = 1012,HSE_REQ_ABORTIVE_CLOSE = 1014,HSE_REQ_GET_CERT_INFO_EX = 1015,HSE_REQ_SEND_RESPONSE_HEADER_EX = 1016,HSE_TERM_ADVISORY_UNLOAD = 1,HSE_TERM_MUST_UNLOAD = 2,HSE_IO_SYNC = 1,HSE_IO_ASYNC = 2,HSE_IO_DISCONNECT_AFTER_SEND = 4,HSE_IO_SEND_HEADERS = 8,HSE_URL_FLAGS_READ = 1,HSE_URL_FLAGS_WRITE = 2,HSE_URL_FLAGS_EXECUTE = 4,HSE_URL_FLAGS_SSL = 8,HSE_URL_FLAGS_DONT_CACHE = 16,HSE_URL_FLAGS_NEGO_CERT = 32,HSE_URL_FLAGS_REQUIRE_CERT = 64,HSE_URL_FLAGS_MAP_CERT = 128,HSE_URL_FLAGS_SSL128 = 256,HSE_URL_FLAGS_SCRIPT = 512,HSE_URL_FLAGS_MASK = 1023,};
enum MACRO_HSR {HSR_ASYNC = 1,HSR_SYNC = 4,HSR_USE_CONTEXT = 8,HSR_INITIATE = 8,HSR_DOWNLOAD = 16,HSR_CHUNKED = 32,};
enum MACRO_HWR {HWR_RESULTS = 0,HWR_APPWIDE = 1,};
enum MACRO_I24 {I24_OPERATION = 0x1,I24_AREA = 0x6,I24_CLASS = 0x80,};
enum MACRO_ICC {ICC_LISTVIEW_CLASSES = 0x1,ICC_TREEVIEW_CLASSES = 0x2,ICC_BAR_CLASSES = 0x4,ICC_TAB_CLASSES = 0x8,ICC_UPDOWN_CLASS = 0x10,ICC_PROGRESS_CLASS = 0x20,ICC_HOTKEY_CLASS = 0x40,ICC_ANIMATE_CLASS = 0x80,ICC_WIN95_CLASSES = 0xFF,ICC_DATE_CLASSES = 0x100,ICC_USEREX_CLASSES = 0x200,ICC_COOL_CLASSES = 0x400,ICC_INTERNET_CLASSES = 0x800,ICC_PAGESCROLLER_CLASS = 0x1000,ICC_NATIVEFNTCTL_CLASS = 0x2000,};
enum MACRO_ICM {ICM_ADDPROFILE = 1,ICM_DELETEPROFILE = 2,ICM_QUERYPROFILE = 3,ICM_SETDEFAULTPROFILE = 4,ICM_REGISTERICMATCHER = 5,ICM_UNREGISTERICMATCHER = 6,ICM_QUERYMATCH = 7,};
enum MACRO_ICU {ICU_ESCAPE = 0x80000000,ICU_USERNAME = 0x40000000,ICU_NO_ENCODE = 0x20000000,ICU_DECODE = 0x10000000,ICU_NO_META = 0x8000000,ICU_ENCODE_SPACES_ONLY = 0x4000000,ICU_BROWSER_MODE = 0x2000000,};
enum MACRO_IDB {IDB_RESULTSEGA = 32325,IDB_RESULTSVGA = 32326,IDB_RESULTSHIRESVGA = 32327,};
enum MACRO_IDC {IDC_ARROW = 32512,IDC_IBEAM = 32513,IDC_WAIT = 32514,IDC_CROSS = 32515,IDC_UPARROW = 32516,IDC_SIZE = 32640,IDC_ICON = 32641,IDC_SIZENWSE = 32642,IDC_SIZENESW = 32643,IDC_SIZEWE = 32644,IDC_SIZENS = 32645,IDC_SIZEALL = 32646,IDC_NO = 32648,IDC_HAND = 32649,IDC_APPSTARTING = 32650,IDC_HELP = 32651,};
enum MACRO_IDD {IDD_INSERTOBJECT = 1000,IDD_CHANGEICON = 1001,IDD_CONVERT = 1002,IDD_PASTESPECIAL = 1003,IDD_EDITLINKS = 1004,IDD_BUSY = 1006,IDD_UPDATELINKS = 1007,IDD_CHANGESOURCE = 1009,IDD_INSERTFILEBROWSE = 1010,IDD_CHANGEICONBROWSE = 1011,IDD_CONVERTONLY = 1012,IDD_CHANGESOURCE4 = 1013,IDD_GNRLPROPS = 1100,IDD_VIEWPROPS = 1101,IDD_LINKPROPS = 1102,IDD_CONVERT4 = 1103,IDD_CONVERTONLY4 = 1104,IDD_EDITLINKS4 = 1105,IDD_GNRLPROPS4 = 1106,IDD_LINKPROPS4 = 1107,IDD_PASTESPECIAL4 = 1108,IDD_CANNOTUPDATELINK = 1008,IDD_LINKSOURCEUNAVAILABLE = 1020,IDD_SERVERNOTFOUND = 1023,IDD_OUTOFMEMORY = 1024,IDD_SERVERNOTREGW = 1021,IDD_LINKTYPECHANGEDW = 1022,IDD_SERVERNOTREGA = 1025,IDD_LINKTYPECHANGEDA = 1026,IDD_SERVERNOTREG = 1025,IDD_LINKTYPECHANGED = 1026,};
enum MACRO_IDF {IDF_NOBROWSE = 0x1,IDF_NOSKIP = 0x2,IDF_NODETAILS = 0x4,IDF_NOCOMPRESSED = 0x8,IDF_CHECKFIRST = 0x100,IDF_NOBEEP = 0x200,IDF_NOFOREGROUND = 0x400,IDF_WARNIFSKIP = 0x800,IDF_OEMDISK = 0x80000000,};
enum MACRO_IDH {IDH_NO_HELP = 28440,IDH_MISSING_CONTEXT = 28441,IDH_GENERIC_HELP_BUTTON = 28442,IDH_OK = 28443,IDH_CANCEL = 28444,IDH_HELP = 28445,};
enum MACRO_IDI {IDI_APPLICATION = 32512,IDI_HAND = 32513,IDI_QUESTION = 32514,IDI_EXCLAMATION = 32515,IDI_ASTERISK = 32516,IDI_WINLOGO = 32517,IDI_WARNING = 32515,IDI_ERROR = 32513,IDI_INFORMATION = 32516,};
enum MACRO_IDM {IDM_HOTKEY_INSERT = 1024,IDM_HOTKEY_DELETE = 1025,IDM_HOTKEY_RETURN = 1026,};
enum MACRO_IDS {IDS_OLESTDNOCREATEFILE = 700,IDS_OLESTDNOOPENFILE = 701,IDS_OLESTDDISKFULL = 702,};
enum MACRO_IE4 {IE4_RESTORE = 0x1,IE4_BACKNEW = 0x2,IE4_NODELETENEW = 0x4,IE4_NOMESSAGES = 0x8,IE4_NOPROGRESS = 0x10,IE4_NOENUMKEY = 0x20,IE4_NO_CRC_MAPPING = 0x40,IE4_REGSECTION = 0x80,IE4_FRDOALL = 0x100,IE4_UPDREFCNT = 0x200,IE4_USEREFCNT = 0x400,IE4_EXTRAINCREFCNT = 0x800,};
enum MACRO_IEB {IEB_DEFAULT = 0,IEB_BRUSH = 1,IEB_BIT_UL = 2,IEB_BIT_CENTER = 3,IEB_BIT_TILE = 4,IEB_BIT_STRETCH = 5,IEB_OWNERDRAW = 6,};
enum MACRO_IEI {IEI_MOVE = 0x1,IEI_RESIZE = 0x2,IEI_CROP = 0x4,IEI_DISCARD = 0x8,IEI_RESERVED = 0xFFF0,};
enum MACRO_IEM {IEM_UNDO = 1,IEM_CUT = 2,IEM_COPY = 3,IEM_PASTE = 4,IEM_CLEAR = 5,IEM_SELECTALL = 6,IEM_ERASE = 7,IEM_PROPERTIES = 8,IEM_LASSO = 9,IEM_RESIZE = 10,IEM_USER = 100,};
enum MACRO_IEN {IEN_NULL = 0x0,IEN_PDEVENT = 0x1,IEN_PAINT = 0x2,IEN_FOCUS = 0x4,IEN_SCROLL = 0x8,IEN_EDIT = 0x10,IEN_PROPERTIES = 0x20,IEN_RESERVED = 0xFF80,};
enum MACRO_IER {IER_OK = 0,IER_NO = 0,IER_YES = 1,IER_ERROR = -1,IER_PARAMERR = -2,IER_OWNERDRAW = -3,IER_SECURITY = -4,IER_SELECTION = -5,IER_SCALE = -6,IER_MEMERR = -7,IER_NOCOMMAND = -8,IER_NOGESTURE = -9,IER_NOPDEVENT = -10,IER_NOTINPAINT = -11,IER_PENDATA = -12,};
enum MACRO_IES {IES_BORDER = 0x1,IES_HSCROLL = 0x2,IES_VSCROLL = 0x4,IES_OWNERDRAW = 0x8,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_LOOPBACK = 0x4,IFF_POINTTOPOINT = 0x8,IFF_MULTICAST = 0x10,};
enum MACRO_IGP {IGP_GETIMEVERSION = 4294967292,IGP_PROPERTY = 4,IGP_CONVERSION = 8,IGP_SENTENCE = 12,IGP_UI = 16,IGP_SETCOMPSTR = 20,IGP_SELECT = 24,};
enum MACRO_IIS {IIS_MD_UT_SERVER = 1,IIS_MD_UT_FILE = 2,IIS_MD_UT_WAM = 100,};
enum MACRO_ILC {ILC_MASK = 0x1,ILC_COLOR = 0x0,ILC_COLORDDB = 0xFE,ILC_COLOR4 = 0x4,ILC_COLOR8 = 0x8,ILC_COLOR16 = 0x10,ILC_COLOR24 = 0x18,ILC_COLOR32 = 0x20,ILC_PALETTE = 0x800,};
enum MACRO_ILD {ILD_NORMAL = 0x0,ILD_TRANSPARENT = 0x1,ILD_MASK = 0x10,ILD_IMAGE = 0x20,ILD_ROP = 0x40,ILD_BLEND25 = 0x2,ILD_BLEND50 = 0x4,ILD_OVERLAYMASK = 0xF00,ILD_SELECTED = 0x4,ILD_FOCUS = 0x2,ILD_BLEND = 0x4,};
enum MACRO_IMC {IMC_GETCANDIDATEPOS = 0x7,IMC_SETCANDIDATEPOS = 0x8,IMC_GETCOMPOSITIONFONT = 0x9,IMC_SETCOMPOSITIONFONT = 0xA,IMC_GETCOMPOSITIONWINDOW = 0xB,IMC_SETCOMPOSITIONWINDOW = 0xC,IMC_GETSTATUSWINDOWPOS = 0xF,IMC_SETSTATUSWINDOWPOS = 0x10,IMC_CLOSESTATUSWINDOW = 0x21,IMC_OPENSTATUSWINDOW = 0x22,};
enum MACRO_IME {IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10,IME_CHOTKEY_SHAPE_TOGGLE = 0x11,IME_CHOTKEY_SYMBOL_TOGGLE = 0x12,IME_JHOTKEY_CLOSE_OPEN = 0x30,IME_KHOTKEY_SHAPE_TOGGLE = 0x50,IME_KHOTKEY_HANJACONVERT = 0x51,IME_KHOTKEY_ENGLISH = 0x52,IME_THOTKEY_IME_NONIME_TOGGLE = 0x70,IME_THOTKEY_SHAPE_TOGGLE = 0x71,IME_THOTKEY_SYMBOL_TOGGLE = 0x72,IME_HOTKEY_DSWITCH_FIRST = 0x100,IME_HOTKEY_DSWITCH_LAST = 0x11F,IME_HOTKEY_PRIVATE_FIRST = 0x200,IME_ITHOTKEY_RESEND_RESULTSTR = 0x200,IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201,IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202,IME_ITHOTKEY_RECONVERTSTRING = 0x203,IME_HOTKEY_PRIVATE_LAST = 0x21F,};
enum MACRO_IMF {IMF_AUTOKEYBOARD = 0x1,IMF_AUTOFONT = 0x2,IMF_IMECANCELCOMPLETE = 0x4,IMF_IMEALWAYSSENDNOTIFY = 0x8,};
enum MACRO_IMM {IMM_ERROR_NODATA = -1,IMM_ERROR_GENERAL = -2,};
enum MACRO_IMN {IMN_CLOSESTATUSWINDOW = 0x1,IMN_OPENSTATUSWINDOW = 0x2,IMN_CHANGECANDIDATE = 0x3,IMN_CLOSECANDIDATE = 0x4,IMN_OPENCANDIDATE = 0x5,IMN_SETCONVERSIONMODE = 0x6,IMN_SETSENTENCEMODE = 0x7,IMN_SETOPENSTATUS = 0x8,IMN_SETCANDIDATEPOS = 0x9,IMN_SETCOMPOSITIONFONT = 0xA,IMN_SETCOMPOSITIONWINDOW = 0xB,IMN_SETSTATUSWINDOWPOS = 0xC,IMN_GUIDELINE = 0xD,IMN_PRIVATE = 0xE,};
enum MACRO_IMR {IMR_COMPOSITIONWINDOW = 0x1,IMR_CANDIDATEWINDOW = 0x2,IMR_COMPOSITIONFONT = 0x3,IMR_RECONVERTSTRING = 0x4,IMR_CONFIRMRECONVERTSTRING = 0x5,};
enum MACRO_INF {INF_STYLE_NONE = 0,INF_STYLE_OLDNT = 1,INF_STYLE_WIN4 = 2,};
enum MACRO_INT {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_IOC {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,};
enum MACRO_IOF {IOF_SHOWHELP = 0x1,IOF_SELECTCREATENEW = 0x2,IOF_SELECTCREATEFROMFILE = 0x4,IOF_CHECKLINK = 0x8,IOF_CHECKDISPLAYASICON = 0x10,IOF_CREATENEWOBJECT = 0x20,IOF_CREATEFILEOBJECT = 0x40,IOF_CREATELINKOBJECT = 0x80,IOF_DISABLELINK = 0x100,IOF_VERIFYSERVERSEXIST = 0x200,IOF_DISABLEDISPLAYASICON = 0x400,IOF_HIDECHANGEICON = 0x800,IOF_SHOWINSERTCONTROL = 0x1000,IOF_SELECTCREATECONTROL = 0x2000,};
enum MACRO_IPN {IPN_FIRST = -860,IPN_LAST = -879,};
enum MACRO_IPX {IPX_STANDARD_UPDATE = 1,IPX_NO_UPDATE = 2,IPX_AUTO_STATIC_UPDATE = 3,IPX_STANDARD_PACKET_TYPE = 1,IPX_RELIABLE_DELIVERY_PACKET_TYPE = 2,IPX_PACE_DEFVAL = 18,IPX_UPDATE_INTERVAL_DEFVAL = 60,};
enum MACRO_IRF {IRF_ASYNC = 1,IRF_SYNC = 4,IRF_USE_CONTEXT = 8,IRF_NO_WAIT = 8,};
enum MACRO_ISC {ISC_SHOWUICANDIDATEWINDOW = 0x1,ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000,ISC_SHOWUIGUIDELINE = 0x40000000,ISC_SHOWUIALLCANDIDATEWINDOW = 0xF,ISC_SHOWUIALL = 0xC000000F,};
enum MACRO_ISO {ISO_FORCE_DISCONNECTED = 0x1,};
enum MACRO_ISR {ISR_ERROR = -1,ISR_BADINKSET = -2,ISR_BADINDEX = -3,};
enum MACRO_JOB {JOB_OBJECT_ASSIGN_PROCESS = 0x1,JOB_OBJECT_SET_ATTRIBUTES = 0x2,JOB_OBJECT_QUERY = 0x4,JOB_OBJECT_TERMINATE = 0x8,JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 0x10,JOB_OBJECT_ALL_ACCESS = 0x1F001F,};
enum MACRO_JOY {JOY_BUTTON1 = 0x1,JOY_BUTTON2 = 0x2,JOY_BUTTON3 = 0x4,JOY_BUTTON4 = 0x8,JOY_BUTTON1CHG = 0x100,JOY_BUTTON2CHG = 0x200,JOY_BUTTON3CHG = 0x400,JOY_BUTTON4CHG = 0x800,JOY_BUTTON5 = 0x10,JOY_BUTTON6 = 0x20,JOY_BUTTON7 = 0x40,JOY_BUTTON8 = 0x80,JOY_BUTTON9 = 0x100,JOY_BUTTON10 = 0x200,JOY_BUTTON11 = 0x400,JOY_BUTTON12 = 0x800,JOY_BUTTON13 = 0x1000,JOY_BUTTON14 = 0x2000,JOY_BUTTON15 = 0x4000,JOY_BUTTON16 = 0x8000,JOY_BUTTON17 = 0x10000,JOY_BUTTON18 = 0x20000,JOY_BUTTON19 = 0x40000,JOY_BUTTON20 = 0x80000,JOY_BUTTON21 = 0x100000,JOY_BUTTON22 = 0x200000,JOY_BUTTON23 = 0x400000,JOY_BUTTON24 = 0x800000,JOY_BUTTON25 = 0x1000000,JOY_BUTTON26 = 0x2000000,JOY_BUTTON27 = 0x4000000,JOY_BUTTON28 = 0x8000000,JOY_BUTTON29 = 0x10000000,JOY_BUTTON30 = 0x20000000,JOY_BUTTON31 = 0x40000000,JOY_BUTTON32 = 0x80000000,JOY_POVCENTERED = 0xFFFF,JOY_POVFORWARD = 0x0,JOY_POVRIGHT = 0x2328,JOY_POVBACKWARD = 0x4650,JOY_POVLEFT = 0x6978,JOY_RETURNX = 0x1,JOY_RETURNY = 0x2,JOY_RETURNZ = 0x4,JOY_RETURNR = 0x8,JOY_RETURNU = 0x10,JOY_RETURNV = 0x20,JOY_RETURNPOV = 0x40,JOY_RETURNBUTTONS = 0x80,JOY_RETURNRAWDATA = 0x100,JOY_RETURNPOVCTS = 0x200,JOY_RETURNCENTERED = 0x400,JOY_USEDEADZONE = 0x800,JOY_RETURNALL = 0xFF,JOY_CAL_READALWAYS = 0x10000,JOY_CAL_READXYONLY = 0x20000,JOY_CAL_READ3 = 0x40000,JOY_CAL_READ4 = 0x80000,JOY_CAL_READXONLY = 0x100000,JOY_CAL_READYONLY = 0x200000,JOY_CAL_READ5 = 0x400000,JOY_CAL_READ6 = 0x800000,JOY_CAL_READZONLY = 0x1000000,JOY_CAL_READRONLY = 0x2000000,JOY_CAL_READUONLY = 0x4000000,JOY_CAL_READVONLY = 0x8000000,};
enum MACRO_KDC {KDC_AUDIT_AS_SUCCESS = 0x1,KDC_AUDIT_AS_FAILURE = 0x2,KDC_AUDIT_TGS_SUCCESS = 0x4,KDC_AUDIT_TGS_FAILURE = 0x8,};
enum MACRO_KEY {KEY_QUERY_VALUE = 0x1,KEY_SET_VALUE = 0x2,KEY_CREATE_SUB_KEY = 0x4,KEY_ENUMERATE_SUB_KEYS = 0x8,KEY_NOTIFY = 0x10,KEY_CREATE_LINK = 0x20,KEY_READ = 0x20019,KEY_WRITE = 0x20006,KEY_EXECUTE = 0x20019,KEY_ALL_ACCESS = 0xF003F,};
enum MACRO_KLF {KLF_ACTIVATE = 0x1,KLF_SUBSTITUTE_OK = 0x2,KLF_UNLOADPREVIOUS = 0x4,KLF_REORDER = 0x8,KLF_REPLACELANG = 0x10,KLF_NOTELLSHELL = 0x80,KLF_SETFORPROCESS = 0x100,};
enum MACRO_LBN {LBN_ERRSPACE = -2,LBN_SELCHANGE = 1,LBN_DBLCLK = 2,LBN_SELCANCEL = 3,LBN_SETFOCUS = 4,LBN_KILLFOCUS = 5,};
enum MACRO_LBS {LBS_NOTIFY = 0x1,LBS_SORT = 0x2,LBS_NOREDRAW = 0x4,LBS_MULTIPLESEL = 0x8,LBS_OWNERDRAWFIXED = 0x10,LBS_OWNERDRAWVARIABLE = 0x20,LBS_HASSTRINGS = 0x40,LBS_USETABSTOPS = 0x80,LBS_NOINTEGRALHEIGHT = 0x100,LBS_MULTICOLUMN = 0x200,LBS_WANTKEYBOARDINPUT = 0x400,LBS_EXTENDEDSEL = 0x800,LBS_DISABLENOSCROLL = 0x1000,LBS_NODATA = 0x2000,LBS_NOSEL = 0x4000,LBS_STANDARD = 0xA00003,};
enum MACRO_LCS {LCS_SIGNATURE = 1347637059,LCS_sRGB = 1934772034,LCS_WINDOWS_COLOR_SPACE = 1466527264,LCS_CALIBRATED_RGB = 0,LCS_DEVICE_RGB = 1,LCS_DEVICE_CMYK = 2,LCS_GM_BUSINESS = 1,LCS_GM_GRAPHICS = 2,LCS_GM_IMAGES = 4,LCS_GM_ABS_COLORIMETRIC = 8,};
enum MACRO_LEN {WSADESCRIPTION_LEN = 256,WSASYS_STATUS_LEN = 128,};
enum MACRO_LIS {LIS_QUIET = 0x1,LIS_NOGRPCONV = 0x2,};
enum MACRO_LLC {LLC_DIR_INTERRUPT = 0x0,LLC_DIR_OPEN_ADAPTER = 0x3,LLC_DIR_CLOSE_ADAPTER = 0x4,LLC_DIR_SET_MULTICAST_ADDRESS = 0x5,LLC_DIR_SET_GROUP_ADDRESS = 0x6,LLC_DIR_SET_FUNCTIONAL_ADDRESS = 0x7,LLC_DIR_READ_LOG = 0x8,LLC_TRANSMIT_FRAMES = 0x9,LLC_TRANSMIT_DIR_FRAME = 0xA,LLC_TRANSMIT_I_FRAME = 0xB,LLC_TRANSMIT_UI_FRAME = 0xD,LLC_TRANSMIT_XID_CMD = 0xE,LLC_TRANSMIT_XID_RESP_FINAL = 0xF,LLC_TRANSMIT_XID_RESP_NOT_FINAL = 0x10,LLC_TRANSMIT_TEST_CMD = 0x11,LLC_DLC_RESET = 0x14,LLC_DLC_OPEN_SAP = 0x15,LLC_DLC_CLOSE_SAP = 0x16,LLC_DLC_REALLOCATE_STATIONS = 0x17,LLC_DLC_OPEN_STATION = 0x19,LLC_DLC_CLOSE_STATION = 0x1A,LLC_DLC_CONNECT_STATION = 0x1B,LLC_DLC_MODIFY = 0x1C,LLC_DLC_FLOW_CONTROL = 0x1D,LLC_DLC_STATISTICS = 0x1E,LLC_DIR_INITIALIZE = 0x20,LLC_DIR_STATUS = 0x21,LLC_DIR_TIMER_SET = 0x22,LLC_DIR_TIMER_CANCEL = 0x23,LLC_BUFFER_GET = 0x26,LLC_BUFFER_FREE = 0x27,LLC_RECEIVE = 0x28,LLC_RECEIVE_CANCEL = 0x29,LLC_RECEIVE_MODIFY = 0x2A,LLC_DIR_TIMER_CANCEL_GROUP = 0x2C,LLC_DIR_SET_EXCEPTION_FLAGS = 0x2D,LLC_BUFFER_CREATE = 0x30,LLC_READ = 0x31,LLC_READ_CANCEL = 0x32,LLC_DLC_SET_THRESHOLD = 0x33,LLC_DIR_CLOSE_DIRECT = 0x34,LLC_DIR_OPEN_DIRECT = 0x35,LLC_MAX_DLC_COMMAND = 0x37,LLC_RESET_LOCAL_BUSY_USER = 0x80,LLC_RESET_LOCAL_BUSY_BUFFER = 0xC0,LLC_SET_LOCAL_BUSY_USER = 0x0,LLC_XID_HANDLING_IN_APPLICATION = 0x8,LLC_XID_HANDLING_IN_DLC = 0x0,LLC_INDIVIDUAL_SAP = 0x4,LLC_GROUP_SAP = 0x2,LLC_MEMBER_OF_GROUP_SAP = 0x1,LLC_INCREASE_LINK_STATIONS = 0x0,LLC_DECREASE_LINK_STATIONS = 0x80,LLC_DLC_RESET_STATISTICS = 0x80,LLC_DLC_READ_STATISTICS = 0x0,LLC_DIRECT_OPTIONS_ALL_MACS = 0x1880,LLC_DIR_READ_LOG_ADAPTER = 0x0,LLC_DIR_READ_LOG_DIRECT = 0x1,LLC_DIR_READ_LOG_BOTH = 0x2,LLC_ADAPTER_ETHERNET = 0x10,LLC_ADAPTER_TOKEN_RING = 0x40,LLC_OPTION_READ_STATION = 0x0,LLC_OPTION_READ_SAP = 0x1,LLC_OPTION_READ_ALL = 0x2,LLC_EVENT_SYSTEM_ACTION = 0x40,LLC_EVENT_NETWORK_STATUS = 0x20,LLC_EVENT_CRITICAL_EXCEPTION = 0x10,LLC_EVENT_STATUS_CHANGE = 0x8,LLC_EVENT_RECEIVE_DATA = 0x4,LLC_EVENT_TRANSMIT_COMPLETION = 0x2,LLC_EVENT_COMMAND_COMPLETION = 0x1,LLC_READ_ALL_EVENTS = 0x7F,LLC_INDICATE_LINK_LOST = 0x8000,LLC_INDICATE_DM_DISC_RECEIVED = 0x4000,LLC_INDICATE_FRMR_RECEIVED = 0x2000,LLC_INDICATE_FRMR_SENT = 0x1000,LLC_INDICATE_RESET = 0x800,LLC_INDICATE_CONNECT_REQUEST = 0x400,LLC_INDICATE_REMOTE_BUSY = 0x200,LLC_INDICATE_REMOTE_READY = 0x100,LLC_INDICATE_TI_TIMER_EXPIRED = 0x80,LLC_INDICATE_DLC_COUNTER_OVERFLOW = 0x40,LLC_INDICATE_ACCESS_PRTY_LOWERED = 0x20,LLC_INDICATE_LOCAL_STATION_BUSY = 0x1,LLC_DIR_RCV_ALL_TR_FRAMES = 0x0,LLC_DIR_RCV_ALL_MAC_FRAMES = 0x1,LLC_DIR_RCV_ALL_8022_FRAMES = 0x2,LLC_DIR_RCV_ALL_FRAMES = 0x4,LLC_DIR_RCV_ALL_ETHERNET_TYPES = 0x5,LLC_CONTIGUOUS_MAC = 0x80,LLC_CONTIGUOUS_DATA = 0x40,LLC_NOT_CONTIGUOUS_DATA = 0x0,LLC_RCV_READ_INDIVIDUAL_FRAMES = 0x0,LLC_RCV_CHAIN_FRAMES_ON_LINK = 0x1,LLC_RCV_CHAIN_FRAMES_ON_SAP = 0x2,LLC_CHAIN_XMIT_COMMANDS_ON_LINK = 0x0,LLC_COMPLETE_SINGLE_XMIT_FRAME = 0x1,LLC_CHAIN_XMIT_COMMANDS_ON_SAP = 0x2,LLC_FIRST_DATA_SEGMENT = 0x1,LLC_NEXT_DATA_SEGMENT = 0x2,LLC_STATUS_MAX_ERROR = 0xFF,};
enum MACRO_LNH {LNH_48_CPU = 97,LNH_8_CPU = 47,LNH_12_CPU = 48,LNH_16_CPU = 49,};
enum MACRO_LOG {LOG_ALERT_REJ = 392,LOG_SESS_START = 442,LOG_SESS_END = 443,LOG_SESS_FAIL = 444,LOG_EMUL_START = 445,LOG_EMUL_END = 446,};
enum MACRO_LPD {LPD_DOUBLEBUFFER = 0x1,LPD_STEREO = 0x2,LPD_SUPPORT_GDI = 0x10,LPD_SUPPORT_OPENGL = 0x20,LPD_SHARE_DEPTH = 0x40,LPD_SHARE_STENCIL = 0x80,LPD_SHARE_ACCUM = 0x100,LPD_SWAP_EXCHANGE = 0x200,LPD_SWAP_COPY = 0x400,LPD_TRANSPARENT = 0x1000,LPD_TYPE_RGBA = 0x0,LPD_TYPE_COLORINDEX = 0x1,};
enum MACRO_LSA {LSA_MODE_PASSWORD_PROTECTED = 0x1,LSA_MODE_INDIVIDUAL_ACCOUNTS = 0x2,LSA_MODE_MANDATORY_ACCESS = 0x4,LSA_MODE_LOG_FULL = 0x8,};
enum MACRO_LUA {LUA_VERB_RUI = 0x52,LUA_VERB_SLI = 0x52,LUA_OPCODE_RUI_INIT = 0x8001,LUA_OPCODE_RUI_TERM = 0x8002,LUA_OPCODE_RUI_READ = 0x8003,LUA_OPCODE_RUI_WRITE = 0x8004,LUA_OPCODE_RUI_PURGE = 0x8005,LUA_OPCODE_RUI_BID = 0x8006,LUA_OPCODE_SLI_OPEN = 0x1,LUA_OPCODE_SLI_CLOSE = 0x2,LUA_OPCODE_SLI_RECEIVE = 0x3,LUA_OPCODE_SLI_SEND = 0x4,LUA_OPCODE_SLI_PURGE = 0x5,LUA_OPCODE_SLI_BID = 0x6,LUA_OPCODE_SLI_BIND_ROUTINE = 0x11,LUA_OPCODE_SLI_STSN_ROUTINE = 0x12,LUA_OPCODE_SLI_CRV_ROUTINE = 0x13,LUA_OK = 0x0,LUA_PARAMETER_CHECK = 0x100,LUA_STATE_CHECK = 0x200,LUA_SESSION_FAILURE = 0xF00,LUA_UNSUCCESSFUL = 0x1400,LUA_NEGATIVE_RSP = 0x1800,LUA_CANCELLED = 0x2100,LUA_IN_PROGRESS = 0x3000,LUA_STATUS = 0x4000,LUA_COMM_SUBSYSTEM_ABENDED = 0x3F0,LUA_COMM_SUBSYSTEM_NOT_LOADED = 0x4F0,LUA_INVALID_VERB_SEGMENT = 0x8F0,LUA_UNEXPECTED_DOS_ERROR = 0x11F0,LUA_STACK_TOO_SMALL = 0x15F0,LUA_INVALID_VERB = 0xFFFF,LUA_SEC_RC_OK = 0x0,LUA_INVALID_LUNAME = 0x1000000,LUA_BAD_SESSION_ID = 0x2000000,LUA_DATA_TRUNCATED = 0x3000000,LUA_BAD_DATA_PTR = 0x4000000,LUA_DATA_SEG_LENGTH_ERROR = 0x5000000,LUA_RESERVED_FIELD_NOT_ZERO = 0x6000000,LUA_INVALID_POST_HANDLE = 0x7000000,LUA_PURGED = 0xC000000,LUA_BID_VERB_SEG_ERROR = 0xF000000,LUA_NO_PREVIOUS_BID_ENABLED = 0x10000000,LUA_NO_DATA = 0x11000000,LUA_BID_ALREADY_ENABLED = 0x12000000,LUA_VERB_RECORD_SPANS_SEGMENTS = 0x13000000,LUA_INVALID_FLOW = 0x14000000,LUA_NOT_ACTIVE = 0x15000000,LUA_VERB_LENGTH_INVALID = 0x16000000,LUA_REQUIRED_FIELD_MISSING = 0x19000000,LUA_READY = 0x30000000,LUA_NOT_READY = 0x31000000,LUA_INIT_COMPLETE = 0x32000000,LUA_SESSION_END_REQUESTED = 0x33000000,LUA_NO_SLI_SESSION = 0x34000000,LUA_SESSION_ALREADY_OPEN = 0x35000000,LUA_INVALID_OPEN_INIT_TYPE = 0x36000000,LUA_INVALID_OPEN_DATA = 0x37000000,LUA_UNEXPECTED_SNA_SEQUENCE = 0x38000000,LUA_NEG_RSP_FROM_BIND_ROUTINE = 0x39000000,LUA_NEG_RSP_FROM_CRV_ROUTINE = 0x3A000000,LUA_NEG_RSP_FROM_STSN_ROUTINE = 0x3B000000,LUA_CRV_ROUTINE_REQUIRED = 0x3C000000,LUA_STSN_ROUTINE_REQUIRED = 0x3D000000,LUA_INVALID_OPEN_ROUTINE_TYPE = 0x3E000000,LUA_MAX_NUMBER_OF_SENDS = 0x3F000000,LUA_SEND_ON_FLOW_PENDING = 0x40000000,LUA_INVALID_MESSAGE_TYPE = 0x41000000,LUA_RECEIVE_ON_FLOW_PENDING = 0x42000000,LUA_DATA_LENGTH_ERROR = 0x43000000,LUA_CLOSE_PENDING = 0x44000000,LUA_NEGATIVE_RSP_CHASE = 0x46000000,LUA_NEGATIVE_RSP_SHUTC = 0x47000000,LUA_NEGATIVE_RSP_RSHUTD = 0x48000000,LUA_NO_RECEIVE_TO_PURGE = 0x4A000000,LUA_CANCEL_COMMAND_RECEIVED = 0x4D000000,LUA_RUI_WRITE_FAILURE = 0x4E000000,LUA_SLI_BID_PENDING = 0x51000000,LUA_SLI_PURGE_PENDING = 0x52000000,LUA_PROCEDURE_ERROR = 0x53000000,LUA_INVALID_SLI_ENCR_OPTION = 0x54000000,LUA_RECEIVED_UNBIND = 0x55000000,LUA_DATA_INCOMPLETE = 0x60000000,LUA_SLI_LOGIC_ERROR = 0x7F000000,LUA_TERMINATED = 0x80000000,LUA_NO_RUI_SESSION = 0x81000000,LUA_DUPLICATE_RUI_INIT = 0x82000000,LUA_INVALID_PROCESS = 0x83000000,LUA_API_MODE_CHANGE = 0x85000000,LUA_COMMAND_COUNT_ERROR = 0x87000000,LUA_NO_READ_TO_PURGE = 0x88000000,LUA_MULTIPLE_WRITE_FLOWS = 0x89000000,LUA_DUPLICATE_READ_FLOW = 0x8A000000,LUA_DUPLICATE_WRITE_FLOW = 0x8B000000,LUA_LINK_NOT_STARTED = 0x8C000000,LUA_INVALID_ADAPTER = 0x8D000000,LUA_ENCR_DECR_LOAD_ERROR = 0x8E000000,LUA_ENCR_DECR_PROC_ERROR = 0x8F000000,LUA_NEG_NOTIFY_RSP = 0xBE000000,LUA_RUI_LOGIC_ERROR = 0xBF000000,LUA_LU_INOPERATIVE = 0xFF000000,LUA_NON_UNIQ_ID = 0x11000C0,LUA_NON_UNIQ_NAU_AD = 0x21000C0,LUA_INV_NAU_ADDR = 0x12000C0,LUA_INV_ADPT_NUM = 0x22000C0,LUA_RESOURCE_NOT_AVAILABLE = 0x108,LUA_SESSION_LIMIT_EXCEEDED = 0x508,LUA_SLU_SESSION_LIMIT_EXCEEDED = 0xA000508,LUA_MODE_INCONSISTENCY = 0x908,LUA_BRACKET_RACE_ERROR = 0xB08,LUA_INSUFFICIENT_RESOURCES = 0x1208,LUA_BB_REJECT_NO_RTR = 0x1308,LUA_BB_REJECT_RTR = 0x1408,LUA_RECEIVER_IN_TRANSMIT_MODE = 0x1B08,LUA_REQUEST_NOT_EXECUTABLE = 0x1C08,LUA_INVALID_SESSION_PARAMETERS = 0x2108,LUA_UNIT_OF_WORK_ABORTED = 0x2408,LUA_FM_FUNCTION_NOT_SUPPORTED = 0x2608,LUA_LU_COMPONENT_DISCONNECTED = 0x3108,LUA_INVALID_PARAMETER_FLAGS = 0x3308,LUA_INVALID_PARAMETER = 0x3508,LUA_NEGOTIABLE_BIND_ERROR = 0x1003508,LUA_BIND_FM_PROFILE_ERROR = 0x2003508,LUA_BIND_TS_PROFILE_ERROR = 0x3003508,LUA_BIND_LU_TYPE_ERROR = 0xE003508,LUA_CRYPTOGRAPHY_INOPERATIVE = 0x4808,LUA_REQ_RESOURCES_NOT_AVAIL = 0x4B08,LUA_SSCP_LU_SESSION_NOT_ACTIVE = 0x5708,LUA_SYNC_EVENT_RESPONSE = 0x6708,LUA_REC_CORR_TABLE_FULL = 0x1007808,LUA_SEND_CORR_TABLE_FULL = 0x2007808,LUA_SESSION_SERVICE_PATH_ERROR = 0x7D08,LUA_RU_DATA_ERROR = 0x110,LUA_RU_LENGTH_ERROR = 0x210,LUA_FUNCTION_NOT_SUPPORTED = 0x310,LUA_HDX_BRACKET_STATE_ERROR = 0x21010510,LUA_RESPONSE_ALREADY_SENT = 0x22010510,LUA_EXR_SENSE_INCORRECT = 0x23010510,LUA_RESPONSE_OUT_OF_ORDER = 0x24010510,LUA_CHASE_RESPONSE_REQUIRED = 0x25010510,LUA_CATEGORY_NOT_SUPPORTED = 0x710,LUA_INCORRECT_SEQUENCE_NUMBER = 0x120,LUA_CHAINING_ERROR = 0x220,LUA_BRACKET = 0x320,LUA_DIRECTION = 0x420,LUA_DATA_TRAFFIC_RESET = 0x520,LUA_DATA_TRAFFIC_QUIESCED = 0x620,LUA_DATA_TRAFFIC_NOT_RESET = 0x720,LUA_NO_BEGIN_BRACKET = 0x820,LUA_SC_PROTOCOL_VIOLATION = 0x920,LUA_IMMEDIATE_REQ_MODE_ERROR = 0xA20,LUA_QUEUED_RESPONSE_ERROR = 0xB20,LUA_ERP_SYNC_EVENT_ERROR = 0xC20,LUA_RSP_BEFORE_SENDING_REQ = 0xD20,LUA_RSP_CORRELATION_ERROR = 0xE20,LUA_RSP_PROTOCOL_ERROR = 0xF20,LUA_INVALID_SC_OR_NC_RH = 0x140,LUA_BB_NOT_ALLOWED = 0x340,LUA_EB_NOT_ALLOWED = 0x440,LUA_EXCEPTION_RSP_NOT_ALLOWED = 0x640,LUA_DEFINITE_RSP_NOT_ALLOWED = 0x740,LUA_PACING_NOT_SUPPORTED = 0x840,LUA_CD_NOT_ALLOWED = 0x940,LUA_NO_RESPONSE_NOT_ALLOWED = 0xA40,LUA_CHAINING_NOT_SUPPORTED = 0xB40,LUA_BRACKETS_NOT_SUPPORTED = 0xC40,LUA_CD_NOT_SUPPORTED = 0xD40,LUA_INCORRECT_USE_OF_FI = 0xF40,LUA_ALTERNATE_CODE_NOT_SUPPORT = 0x1040,LUA_INCORRECT_RU_CATEGORY = 0x1140,LUA_INCORRECT_REQUEST_CODE = 0x1240,LUA_INCORRECT_SPEC_OF_SDI_RTI = 0x1340,LUA_INCORRECT_DR1I_DR2I_ERI = 0x1440,LUA_INCORRECT_USE_OF_QRI = 0x1540,LUA_INCORRECT_USE_OF_EDI = 0x1640,LUA_INCORRECT_USE_OF_PDI = 0x1740,LUA_NAU_INOPERATIVE = 0x380,LUA_NO_SESSION = 0x580,LUA_RH_FMD = 0x0,LUA_RH_NC = 0x1,LUA_RH_DFC = 0x2,LUA_RH_SC = 0x3,LUA_MESSAGE_TYPE_LU_DATA = 0x1,LUA_MESSAGE_TYPE_SSCP_DATA = 0x11,LUA_MESSAGE_TYPE_RSP = 0x2,LUA_MESSAGE_TYPE_BID = 0xC8,LUA_MESSAGE_TYPE_BIND = 0x31,LUA_MESSAGE_TYPE_BIS = 0x70,LUA_MESSAGE_TYPE_CANCEL = 0x83,LUA_MESSAGE_TYPE_CHASE = 0x84,LUA_MESSAGE_TYPE_CLEAR = 0xA1,LUA_MESSAGE_TYPE_CRV = 0xD0,LUA_MESSAGE_TYPE_LUSTAT_LU = 0x4,LUA_MESSAGE_TYPE_LUSTAT_SSCP = 0x14,LUA_MESSAGE_TYPE_QC = 0x81,LUA_MESSAGE_TYPE_QEC = 0x80,LUA_MESSAGE_TYPE_RELQ = 0x82,LUA_MESSAGE_TYPE_RQR = 0xA3,LUA_MESSAGE_TYPE_RTR = 0x5,LUA_MESSAGE_TYPE_SBI = 0x71,LUA_MESSAGE_TYPE_SHUTD = 0xC0,LUA_MESSAGE_TYPE_SIGNAL = 0xC9,LUA_MESSAGE_TYPE_SDT = 0xA0,LUA_MESSAGE_TYPE_STSN = 0xA2,LUA_MESSAGE_TYPE_UNBIND = 0x32,LUA_INIT_TYPE_SEC_IS = 0x1,LUA_INIT_TYPE_SEC_LOG = 0x2,LUA_INIT_TYPE_PRIM = 0x3,LUA_INIT_TYPE_PRIM_SSCP = 0x4,LUA_ROUTINE_TYPE_BIND = 0x1,LUA_ROUTINE_TYPE_CRV = 0x2,LUA_ROUTINE_TYPE_STSN = 0x3,LUA_ROUTINE_TYPE_END = 0x0,};
enum MACRO_LUP {LUP_DEEP = 0x1,LUP_CONTAINERS = 0x2,LUP_NOCONTAINERS = 0x4,LUP_NEAREST = 0x8,LUP_RETURN_NAME = 0x10,LUP_RETURN_TYPE = 0x20,LUP_RETURN_VERSION = 0x40,LUP_RETURN_COMMENT = 0x80,LUP_RETURN_ADDR = 0x100,LUP_RETURN_BLOB = 0x200,LUP_RETURN_ALIASES = 0x400,LUP_RETURN_QUERY_STRING = 0x800,LUP_RETURN_ALL = 0xFF0,LUP_RES_SERVICE = 0x8000,LUP_FLUSHCACHE = 0x1000,LUP_FLUSHPREVIOUS = 0x2000,};
enum MACRO_LVA {LVA_DEFAULT = 0x0,LVA_ALIGNLEFT = 0x1,LVA_ALIGNTOP = 0x2,LVA_SNAPTOGRID = 0x5,};
enum MACRO_LVL {LVL_MESSAGE = 0x1,LVL_ATTACHMENT = 0x2,};
enum MACRO_LVM {LVM_GETITEM = 4101,LVM_SETITEM = 4102,LVM_INSERTITEM = 4103,};
enum MACRO_LVN {LVN_FIRST = -100,LVN_LAST = -199,};
enum MACRO_LVS {LVS_ICON = 0x0,LVS_REPORT = 0x1,LVS_SMALLICON = 0x2,LVS_LIST = 0x3,LVS_TYPEMASK = 0x3,LVS_SINGLESEL = 0x4,LVS_SHOWSELALWAYS = 0x8,LVS_SORTASCENDING = 0x10,LVS_SORTDESCENDING = 0x20,LVS_SHAREIMAGELISTS = 0x40,LVS_NOLABELWRAP = 0x80,LVS_AUTOARRANGE = 0x100,LVS_EDITLABELS = 0x200,LVS_OWNERDATA = 0x1000,LVS_NOSCROLL = 0x2000,LVS_TYPESTYLEMASK = 0xFC00,LVS_ALIGNTOP = 0x0,LVS_ALIGNLEFT = 0x800,LVS_ALIGNMASK = 0xC00,LVS_OWNERDRAWFIXED = 0x400,LVS_NOCOLUMNHEADER = 0x4000,LVS_NOSORTHEADER = 0x8000,};
enum MACRO_MAC {MAC_BINARY = 0x1,};
enum MACRO_MAP {MAP_FOLDCZONE = 0x10,MAP_PRECOMPOSED = 0x20,MAP_COMPOSITE = 0x40,MAP_FOLDDIGITS = 0x80,MAP_EXPAND_LIGATURES = 0x2000,};
enum MACRO_MAX {MAX_PATH = 260,};
enum MACRO_MCI {MCI_STRING_OFFSET = 512,MCI_VD_OFFSET = 1024,MCI_CD_OFFSET = 1088,MCI_WAVE_OFFSET = 1152,MCI_SEQ_OFFSET = 1216,};
enum MACRO_MCM {MCM_FIRST = 0x1000,MCM_GETCURSEL = 0x1001,MCM_SETCURSEL = 0x1002,MCM_GETMAXSELCOUNT = 0x1003,MCM_SETMAXSELCOUNT = 0x1004,MCM_GETSELRANGE = 0x1005,MCM_SETSELRANGE = 0x1006,MCM_GETMONTHRANGE = 0x1007,MCM_SETDAYSTATE = 0x1008,MCM_GETMINREQRECT = 0x1009,MCM_SETCOLOR = 0x100A,MCM_GETCOLOR = 0x100B,};
enum MACRO_MCN {MCN_FIRST = -750,MCN_LAST = -759,};
enum MACRO_MCS {MCS_DAYSTATE = 0x1,MCS_MULTISELECT = 0x2,MCS_WEEKNUMBERS = 0x4,MCS_NOTODAYCIRCLE = 0x8,MCS_NOTODAY = 0x10,};
enum MACRO_MCW {MCW_EM = 524319,};
enum MACRO_MDB {MDB_NO_DIALOG = 0x1,MDB_WRITE = 0x4,MDB_TEMPORARY = 0x20,MDB_NO_MAIL = 0x80,};
enum MACRO_MDM {MDM_COMPRESSION = 0x1,MDM_ERROR_CONTROL = 0x2,MDM_FORCED_EC = 0x4,MDM_CELLULAR = 0x8,MDM_FLOWCONTROL_HARD = 0x10,MDM_FLOWCONTROL_SOFT = 0x20,MDM_CCITT_OVERRIDE = 0x40,MDM_SPEED_ADJUST = 0x80,MDM_TONE_DIAL = 0x100,MDM_BLIND_DIAL = 0x200,MDM_V23_OVERRIDE = 0x400,};
enum MACRO_MEM {MEM_COMMIT = 0x1000,MEM_RESERVE = 0x2000,MEM_DECOMMIT = 0x4000,MEM_RELEASE = 0x8000,MEM_FREE = 0x10000,MEM_PRIVATE = 0x20000,MEM_MAPPED = 0x40000,MEM_RESET = 0x80000,MEM_TOP_DOWN = 0x100000,MEM_4MB_PAGES = 0x80000000,};
enum MACRO_MFS {MFS_GRAYED = 0x3,MFS_DISABLED = 0x3,MFS_CHECKED = 0x8,MFS_HILITE = 0x80,MFS_ENABLED = 0x0,MFS_UNCHECKED = 0x0,MFS_UNHILITE = 0x0,MFS_DEFAULT = 0x1000,MFS_MASK = 0x108B,MFS_HOTTRACKDRAWN = 0x10000000,MFS_CACHEDBMP = 0x20000000,MFS_BOTTOMGAPDROP = 0x40000000,MFS_TOPGAPDROP = 0x80000000,MFS_GAPDROP = 0xC0000000,};
enum MACRO_MFT {MFT_STRING = 0,MFT_BITMAP = 4,MFT_MENUBARBREAK = 32,MFT_MENUBREAK = 64,MFT_OWNERDRAW = 256,MFT_RADIOCHECK = 512,MFT_SEPARATOR = 2048,MFT_RIGHTORDER = 8192,MFT_RIGHTJUSTIFY = 16384,};
enum MACRO_MIB {MIB_IF_TYPE_OTHER = 1,MIB_IF_TYPE_ETHERNET = 6,MIB_IF_TYPE_TOKENRING = 9,MIB_IF_TYPE_FDDI = 15,MIB_IF_TYPE_PPP = 23,MIB_IF_TYPE_LOOPBACK = 24,MIB_IF_TYPE_SLIP = 28,MIB_IF_ADMIN_STATUS_UP = 1,MIB_IF_ADMIN_STATUS_DOWN = 2,MIB_IF_ADMIN_STATUS_TESTING = 3,MIB_IF_OPER_STATUS_NON_OPERATIONAL = 0,MIB_IF_OPER_STATUS_UNREACHABLE = 1,MIB_IF_OPER_STATUS_DISCONNECTED = 2,MIB_IF_OPER_STATUS_CONNECTING = 3,MIB_IF_OPER_STATUS_CONNECTED = 4,MIB_IF_OPER_STATUS_OPERATIONAL = 5,};
enum MACRO_MIM {MIM_MAXHEIGHT = 0x1,MIM_BACKGROUND = 0x2,MIM_HELPID = 0x4,MIM_MENUDATA = 0x8,MIM_STYLE = 0x10,MIM_APPLYTOSUBMENUS = 0x80000000,};
enum MACRO_MIN {MIN_GOPHER_ATTRIBUTE_LENGTH = 256,};
enum MACRO_MKF {MKF_MOUSEKEYSON = 0x1,MKF_AVAILABLE = 0x2,MKF_HOTKEYACTIVE = 0x4,MKF_CONFIRMHOTKEY = 0x8,MKF_HOTKEYSOUND = 0x10,MKF_INDICATOR = 0x20,MKF_MODIFIERS = 0x40,MKF_REPLACENUMBERS = 0x80,MKF_LEFTBUTTONSEL = 0x10000000,MKF_RIGHTBUTTONSEL = 0x20000000,MKF_LEFTBUTTONDOWN = 0x1000000,MKF_RIGHTBUTTONDOWN = 0x2000000,MKF_MOUSEMODE = 0x80000000,};
enum MACRO_MNC {MNC_IGNORE = 0,MNC_CLOSE = 1,MNC_EXECUTE = 2,MNC_SELECT = 3,};
enum MACRO_MND {MND_CONTINUE = 0,MND_ENDMENU = 1,};
enum MACRO_MNS {MNS_NOCHECK = 0x80000000,MNS_MODELESS = 0x40000000,MNS_DRAGDROP = 0x20000000,MNS_AUTODISMISS = 0x10000000,MNS_NOTIFYBYPOS = 0x8000000,MNS_CHECKORBMP = 0x4000000,};
enum MACRO_MOD {MOD_ALT = 0x1,MOD_CONTROL = 0x2,MOD_SHIFT = 0x4,MOD_WIN = 0x8,};
enum MACRO_MOM {MOM_OPEN = 967,MOM_CLOSE = 968,MOM_DONE = 969,};
enum MACRO_MON {MON_SHARED_MEMORY_SIGNATURE = 0x47575011,MON_DATA_BLOCK_SIZE = 0xFA0,MON_MUTEX_TIMEOUT = 0x493E0,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_PARTIAL = 0x8000,MSG_INTERRUPT = 0x10,MSG_MAXIOVLEN = 0x10,};
enum MACRO_MSI {MSI_NULL_INTEGER = 0x80000000,};
enum MACRO_MSK {MSK_FP_OP = 0x3F,};
enum MACRO_MVI {MVI_FLAG = 12288,};
enum MACRO_MWT {MWT_IDENTITY = 1,MWT_LEFTMULTIPLY = 2,MWT_RIGHTMULTIPLY = 3,MWT_MIN = 1,MWT_MAX = 3,};
enum MACRO_NDR {NDR_CHAR_REP_MASK = 0xF,NDR_INT_REP_MASK = 0xF0,NDR_FLOAT_REP_MASK = 0xFF00,NDR_LITTLE_ENDIAN = 0x10,NDR_BIG_ENDIAN = 0x0,NDR_IEEE_FLOAT = 0x0,NDR_VAX_FLOAT = 0x100,NDR_ASCII_CHAR = 0x0,NDR_EBCDIC_CHAR = 0x1,NDR_LOCAL_DATA_REPRESENTATION = 0x10,NDR_LOCAL_ENDIAN = 0x10,};
enum MACRO_NDW {NDW_INSTALLFLAG_DIDFACTDEFS = 0x1,NDW_INSTALLFLAG_HARDWAREALLREADYIN = 0x2,NDW_INSTALLFLAG_NEEDRESTART = 0x80,NDW_INSTALLFLAG_NEEDREBOOT = 0x100,NDW_INSTALLFLAG_NEEDSHUTDOWN = 0x200,NDW_INSTALLFLAG_EXPRESSINTRO = 0x400,NDW_INSTALLFLAG_SKIPISDEVINSTALLED = 0x800,NDW_INSTALLFLAG_NODETECTEDDEVS = 0x1000,NDW_INSTALLFLAG_INSTALLSPECIFIC = 0x2000,NDW_INSTALLFLAG_SKIPCLASSLIST = 0x4000,NDW_INSTALLFLAG_CI_PICKED_OEM = 0x8000,NDW_INSTALLFLAG_PCMCIAMODE = 0x10000,NDW_INSTALLFLAG_PCMCIADEVICE = 0x20000,NDW_INSTALLFLAG_USERCANCEL = 0x40000,NDW_INSTALLFLAG_KNOWNCLASS = 0x80000,};
enum MACRO_NET {NET_SEARCH = 0x1,LOC_SEARCH = 0x2,};
enum MACRO_NFR {NFR_ANSI = 1,NFR_UNICODE = 2,};
enum MACRO_NFS {NFS_EDIT = 0x1,NFS_STATIC = 0x2,NFS_LISTCOMBO = 0x4,NFS_BUTTON = 0x8,NFS_ALL = 0x10,};
enum MACRO_NIF {NIF_MESSAGE = 0x1,NIF_ICON = 0x2,NIF_TIP = 0x4,};
enum MACRO_NIM {NIM_ADD = 0x0,NIM_MODIFY = 0x1,NIM_DELETE = 0x2,};
enum MACRO_NLS {NLS_VALID_LOCALE_MASK = 0xFFFFF,};
enum MACRO_NON {NON_STANDARD = 0x10000,};
enum MACRO_NOT {NOT_AN_ENCODING = 0x4000F10D,NOT_CONCRETE = 0x4000F10E,NOT_PRESENT = 0x4000F10F,NOT_PRIVATE = 0x4000F110,NOT_THE_SERVICES = 0x4000F111,};
enum MACRO_NRC {NRC_GOODRET = 0x0,NRC_BUFLEN = 0x1,NRC_ILLCMD = 0x3,NRC_CMDTMO = 0x5,NRC_INCOMP = 0x6,NRC_BADDR = 0x7,NRC_SNUMOUT = 0x8,NRC_NORES = 0x9,NRC_SCLOSED = 0xA,NRC_CMDCAN = 0xB,NRC_DUPNAME = 0xD,NRC_NAMTFUL = 0xE,NRC_ACTSES = 0xF,NRC_LOCTFUL = 0x11,NRC_REMTFUL = 0x12,NRC_ILLNN = 0x13,NRC_NOCALL = 0x14,NRC_NOWILD = 0x15,NRC_INUSE = 0x16,NRC_NAMERR = 0x17,NRC_SABORT = 0x18,NRC_NAMCONF = 0x19,NRC_IFBUSY = 0x21,NRC_TOOMANY = 0x22,NRC_BRIDGE = 0x23,NRC_CANOCCR = 0x24,NRC_CANCEL = 0x26,NRC_DUPENV = 0x30,NRC_ENVNOTDEF = 0x34,NRC_OSRESNOTAV = 0x35,NRC_MAXAPPS = 0x36,NRC_NOSAPS = 0x37,NRC_NORESOURCES = 0x38,NRC_INVADDRESS = 0x39,NRC_INVDDID = 0x3B,NRC_LOCKFAIL = 0x3C,NRC_OPENERR = 0x3F,NRC_SYSTEM = 0x40,NRC_PENDING = 0xFF,};
enum MACRO_NTE {NTE_OP_OK = 0,};
enum MACRO_NTM {NTM_REGULAR = 0x40,NTM_BOLD = 0x20,NTM_ITALIC = 0x1,NTM_NONNEGATIVE_AC = 0x10000,NTM_OPENTYPE = 0x20000,NTM_MULTIPLEMASTER = 0x40000,NTM_MM_INSTANCE = 0x80000,NTM_TYPE1 = 0x100000,NTM_DSIG = 0x200000,};
enum MACRO_NUM {NUM_BASIC_COLORS = 48,NUM_CUSTOM_COLORS = 16,};
enum MACRO_OBJ {OBJ_PEN = 1,OBJ_BRUSH = 2,OBJ_DC = 3,OBJ_METADC = 4,OBJ_PAL = 5,OBJ_FONT = 6,OBJ_BITMAP = 7,OBJ_REGION = 8,OBJ_METAFILE = 9,OBJ_MEMDC = 10,OBJ_EXTPEN = 11,OBJ_ENHMETADC = 12,OBJ_ENHMETAFILE = 13,};
enum MACRO_OBM {OBM_SKBBTNUP = 32767,OBM_SKBBTNDOWN = 32766,OBM_SKBBTNDISABLED = 32765,OBM_ZENBTNUP = 32764,OBM_ZENBTNDOWN = 32763,OBM_ZENBTNDISABLED = 32762,OBM_HANBTNUP = 32761,OBM_HANBTNDOWN = 32760,OBM_HANBTNDISABLED = 32759,OBM_KKCBTNUP = 32758,OBM_KKCBTNDOWN = 32757,OBM_KKCBTNDISABLED = 32756,OBM_SIPBTNUP = 32755,OBM_SIPBTNDOWN = 32754,OBM_SIPBTNDISABLED = 32753,OBM_PTYBTNUP = 32752,OBM_PTYBTNDOWN = 32751,OBM_PTYBTNDISABLED = 32750,};
enum MACRO_OCR {OCR_NORMAL = 32512,OCR_IBEAM = 32513,OCR_WAIT = 32514,OCR_CROSS = 32515,OCR_UP = 32516,OCR_SIZE = 32640,OCR_ICON = 32641,OCR_SIZENWSE = 32642,OCR_SIZENESW = 32643,OCR_SIZEWE = 32644,OCR_SIZENS = 32645,OCR_SIZEALL = 32646,OCR_ICOCUR = 32647,OCR_NO = 32648,OCR_HAND = 32649,OCR_APPSTARTING = 32650,};
enum MACRO_ODA {ODA_DRAWENTIRE = 0x1,ODA_SELECT = 0x2,ODA_FOCUS = 0x4,};
enum MACRO_ODS {ODS_SELECTED = 0x1,ODS_GRAYED = 0x2,ODS_DISABLED = 0x4,ODS_CHECKED = 0x8,ODS_FOCUS = 0x10,ODS_DEFAULT = 0x20,ODS_COMBOBOXEDIT = 0x1000,ODS_HOTLIGHT = 0x40,ODS_INACTIVE = 0x80,};
enum MACRO_ODT {ODT_MENU = 1,ODT_LISTBOX = 2,ODT_COMBOBOX = 3,ODT_BUTTON = 4,ODT_STATIC = 5,};
enum MACRO_OFF {OFF_SELECT = 0x16D,OFF_FROM = 0x14F,OFF_ORDER = 0x165,OFF_COMPUTE = 0x139,OFF_TABLE = 0x173,OFF_PROCEDURE = 0x16A,OFF_STATEMENT = 0x1CB,OFF_PARAM = 0x1C4,OFF_EXEC = 0x12C,};
enum MACRO_OFN {OFN_READONLY = 0x1,OFN_OVERWRITEPROMPT = 0x2,OFN_HIDEREADONLY = 0x4,OFN_NOCHANGEDIR = 0x8,OFN_SHOWHELP = 0x10,OFN_ENABLEHOOK = 0x20,OFN_ENABLETEMPLATE = 0x40,OFN_ENABLETEMPLATEHANDLE = 0x80,OFN_NOVALIDATE = 0x100,OFN_ALLOWMULTISELECT = 0x200,OFN_EXTENSIONDIFFERENT = 0x400,OFN_PATHMUSTEXIST = 0x800,OFN_FILEMUSTEXIST = 0x1000,OFN_CREATEPROMPT = 0x2000,OFN_SHAREAWARE = 0x4000,OFN_NOREADONLYRETURN = 0x8000,OFN_NOTESTFILECREATE = 0x10000,OFN_NONETWORKBUTTON = 0x20000,OFN_NOLONGNAMES = 0x40000,OFN_EXPLORER = 0x80000,OFN_NODEREFERENCELINKS = 0x100000,OFN_LONGNAMES = 0x200000,OFN_ENABLEINCLUDENOTIFY = 0x400000,OFN_ENABLESIZING = 0x800000,OFN_SHAREFALLTHROUGH = 0x2,OFN_SHARENOWARN = 0x1,OFN_SHAREWARN = 0x0,};
enum MACRO_OFS {OFS_MAXPATHNAME = 128,};
enum MACRO_OIC {OIC_SAMPLE = 32512,OIC_HAND = 32513,OIC_QUES = 32514,OIC_BANG = 32515,OIC_NOTE = 32516,OIC_WINLOGO = 32517,OIC_WARNING = 32515,OIC_ERROR = 32513,OIC_INFORMATION = 32516,};
enum MACRO_OID {OID_TAG = 0xA,OID_ENCODING = 0xB,};
enum MACRO_OLD {OLD_P_OVERLAY = 2,};
enum MACRO_OLE {OLE_E_FIRST = 0x80040000,OLE_E_LAST = 0x800400FF,OLE_S_FIRST = 0x40000,OLE_S_LAST = 0x400FF,};
enum MACRO_ONE {ONE_MEG = 32,ONE_HALF_MEG = 16,};
enum MACRO_OPF {OPF_OBJECTISLINK = 0x1,OPF_NOFILLDEFAULT = 0x2,OPF_SHOWHELP = 0x4,OPF_DISABLECONVERT = 0x8,};
enum MACRO_ORD {ORD_LANGDRIVER = 1,};
enum MACRO_OSP {OSP_IndexLabel = 0,OSP_IndexAll = -1,OSP_IndexUnknown = -1,};
enum MACRO_OTT {OTT_AT_START = -1,OTT_AT_END = -2,OTT_OK = 0,OTT_MORE_DATA = 1,OTT_NO_MORE_DATA = 2,OTT_FOLDER_NO_UPDATE = 3,OTT_DUPLICATE_CONTAINER_ID = 4,OTT_DUPLICATE_FOLDER_ID = 5,OTT_DUPLICATE_FILTER_ID = 6,OTT_SCALAR_NO_UPDATE = 7,OTT_SCALAR_WRONG_TYPE = 8,OTT_INVALID_CONTAINER_ID = 9,OTT_INVALID_FOLDER_ID = 10,OTT_INVALID_FILTER_ID = 11,OTT_CONTAINER_NO_UPDATE = 12,OTT_PARAMETER_ERROR = 13,OTT_UNSUPPORTED = 14,OTT_NOT_FOUND = 15,OTT_PARENT_NOT_FOUND = 16,OTT_CANT_DELETE = 17,OTT_NEW_FOLDER = 18,OTT_FOLDER_LINKED = 19,OTT_RANGE_ERROR = 20,OTT_DUPLICATE_FILTER = 21,OTT_CONTAINER_NOT_POPULATED = 22,OTT_CONTAINER_POPULATED = 23,OTT_FILTER_NOT_PERSISTENT = 24,OTT_INVALID_CONNECTION_HANDLE = 25,OTT_INVALID_FILTER_TYPE = 26,OTT_IN_USE_BY_OTHER = 27,OTT_END = 50,};
enum MACRO_OUT {OUT_DEFAULT_PRECIS = 0,OUT_STRING_PRECIS = 1,OUT_CHARACTER_PRECIS = 2,OUT_STROKE_PRECIS = 3,OUT_TT_PRECIS = 4,OUT_DEVICE_PRECIS = 5,OUT_RASTER_PRECIS = 6,OUT_TT_ONLY_PRECIS = 7,OUT_OUTLINE_PRECIS = 8,OUT_SCREEN_OUTLINE_PRECIS = 9,};
enum MACRO_PAB {PAB_DIR_VIEW_FIRST_THEN_LAST = 0,PAB_DIR_VIEW_LAST_THEN_FIRST = 1,};
enum MACRO_PAD {ADMN_PAD = 3,PRMD_PAD = 3,COUNTRY_PAD = 0,MTA_PAD = 3,};
enum MACRO_PAN {PAN_FAMILYTYPE_INDEX = 0,PAN_SERIFSTYLE_INDEX = 1,PAN_WEIGHT_INDEX = 2,PAN_PROPORTION_INDEX = 3,PAN_CONTRAST_INDEX = 4,PAN_STROKEVARIATION_INDEX = 5,PAN_ARMSTYLE_INDEX = 6,PAN_LETTERFORM_INDEX = 7,PAN_MIDLINE_INDEX = 8,PAN_XHEIGHT_INDEX = 9,PAN_CULTURE_LATIN = 0,PAN_ANY = 0,PAN_NO_FIT = 1,PAN_FAMILY_TEXT_DISPLAY = 2,PAN_FAMILY_SCRIPT = 3,PAN_FAMILY_DECORATIVE = 4,PAN_FAMILY_PICTORIAL = 5,PAN_SERIF_COVE = 2,PAN_SERIF_OBTUSE_COVE = 3,PAN_SERIF_SQUARE_COVE = 4,PAN_SERIF_OBTUSE_SQUARE_COVE = 5,PAN_SERIF_SQUARE = 6,PAN_SERIF_THIN = 7,PAN_SERIF_BONE = 8,PAN_SERIF_EXAGGERATED = 9,PAN_SERIF_TRIANGLE = 10,PAN_SERIF_NORMAL_SANS = 11,PAN_SERIF_OBTUSE_SANS = 12,PAN_SERIF_PERP_SANS = 13,PAN_SERIF_FLARED = 14,PAN_SERIF_ROUNDED = 15,PAN_WEIGHT_VERY_LIGHT = 2,PAN_WEIGHT_LIGHT = 3,PAN_WEIGHT_THIN = 4,PAN_WEIGHT_BOOK = 5,PAN_WEIGHT_MEDIUM = 6,PAN_WEIGHT_DEMI = 7,PAN_WEIGHT_BOLD = 8,PAN_WEIGHT_HEAVY = 9,PAN_WEIGHT_BLACK = 10,PAN_WEIGHT_NORD = 11,PAN_PROP_OLD_STYLE = 2,PAN_PROP_MODERN = 3,PAN_PROP_EVEN_WIDTH = 4,PAN_PROP_EXPANDED = 5,PAN_PROP_CONDENSED = 6,PAN_PROP_VERY_EXPANDED = 7,PAN_PROP_VERY_CONDENSED = 8,PAN_PROP_MONOSPACED = 9,PAN_CONTRAST_NONE = 2,PAN_CONTRAST_VERY_LOW = 3,PAN_CONTRAST_LOW = 4,PAN_CONTRAST_MEDIUM_LOW = 5,PAN_CONTRAST_MEDIUM = 6,PAN_CONTRAST_MEDIUM_HIGH = 7,PAN_CONTRAST_HIGH = 8,PAN_CONTRAST_VERY_HIGH = 9,PAN_STROKE_GRADUAL_DIAG = 2,PAN_STROKE_GRADUAL_TRAN = 3,PAN_STROKE_GRADUAL_VERT = 4,PAN_STROKE_GRADUAL_HORZ = 5,PAN_STROKE_RAPID_VERT = 6,PAN_STROKE_RAPID_HORZ = 7,PAN_STROKE_INSTANT_VERT = 8,PAN_STRAIGHT_ARMS_HORZ = 2,PAN_STRAIGHT_ARMS_WEDGE = 3,PAN_STRAIGHT_ARMS_VERT = 4,PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5,PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6,PAN_BENT_ARMS_HORZ = 7,PAN_BENT_ARMS_WEDGE = 8,PAN_BENT_ARMS_VERT = 9,PAN_BENT_ARMS_SINGLE_SERIF = 10,PAN_BENT_ARMS_DOUBLE_SERIF = 11,PAN_LETT_NORMAL_CONTACT = 2,PAN_LETT_NORMAL_WEIGHTED = 3,PAN_LETT_NORMAL_BOXED = 4,PAN_LETT_NORMAL_FLATTENED = 5,PAN_LETT_NORMAL_ROUNDED = 6,PAN_LETT_NORMAL_OFF_CENTER = 7,PAN_LETT_NORMAL_SQUARE = 8,PAN_LETT_OBLIQUE_CONTACT = 9,PAN_LETT_OBLIQUE_WEIGHTED = 10,PAN_LETT_OBLIQUE_BOXED = 11,PAN_LETT_OBLIQUE_FLATTENED = 12,PAN_LETT_OBLIQUE_ROUNDED = 13,PAN_LETT_OBLIQUE_OFF_CENTER = 14,PAN_LETT_OBLIQUE_SQUARE = 15,PAN_MIDLINE_STANDARD_TRIMMED = 2,PAN_MIDLINE_STANDARD_POINTED = 3,PAN_MIDLINE_STANDARD_SERIFED = 4,PAN_MIDLINE_HIGH_TRIMMED = 5,PAN_MIDLINE_HIGH_POINTED = 6,PAN_MIDLINE_HIGH_SERIFED = 7,PAN_MIDLINE_CONSTANT_TRIMMED = 8,PAN_MIDLINE_CONSTANT_POINTED = 9,PAN_MIDLINE_CONSTANT_SERIFED = 10,PAN_MIDLINE_LOW_TRIMMED = 11,PAN_MIDLINE_LOW_POINTED = 12,PAN_MIDLINE_LOW_SERIFED = 13,PAN_XHEIGHT_CONSTANT_SMALL = 2,PAN_XHEIGHT_CONSTANT_STD = 3,PAN_XHEIGHT_CONSTANT_LARGE = 4,PAN_XHEIGHT_DUCKING_SMALL = 5,PAN_XHEIGHT_DUCKING_STD = 6,PAN_XHEIGHT_DUCKING_LARGE = 7,};
enum MACRO_PAP {PAP_UNUSED_STATUS_BYTES = 4,};
enum MACRO_PBS {PBS_SMOOTH = 0x1,PBS_VERTICAL = 0x4,};
enum MACRO_PBT {PBT_APMQUERYSUSPEND = 0x0,PBT_APMQUERYSTANDBY = 0x1,PBT_APMQUERYSUSPENDFAILED = 0x2,PBT_APMQUERYSTANDBYFAILED = 0x3,PBT_APMSUSPEND = 0x4,PBT_APMSTANDBY = 0x5,PBT_APMRESUMECRITICAL = 0x6,PBT_APMRESUMESUSPEND = 0x7,PBT_APMRESUMESTANDBY = 0x8,};
enum MACRO_PCF {PCF_DTRDSR = 0x1,PCF_RTSCTS = 0x2,PCF_RLSD = 0x4,PCF_PARITY_CHECK = 0x8,PCF_XONXOFF = 0x10,PCF_SETXCHAR = 0x20,PCF_TOTALTIMEOUTS = 0x40,PCF_INTTIMEOUTS = 0x80,PCF_SPECIALCHARS = 0x100,PCF_16BITMODE = 0x200,};
enum MACRO_PCI {PCI_OPTIONS_USE_BIOS = 0x1,PCI_OPTIONS_USE_IRQ_STEERING = 0x2,PCI_FLAG_NO_VIDEO_IRQ = 0x1,PCI_FLAG_PCMCIA_WANT_IRQ = 0x2,PCI_FLAG_DUAL_IDE = 0x4,PCI_FLAG_NO_ENUM_AT_ALL = 0x8,PCI_FLAG_ENUM_NO_RESOURCE = 0x10,PCI_FLAG_NEED_DWORD_ACCESS = 0x20,PCI_FLAG_SINGLE_FUNCTION = 0x40,PCI_FLAG_ALWAYS_ENABLED = 0x80,PCI_FLAG_IS_IDE = 0x100,PCI_FLAG_IS_VIDEO = 0x200,PCI_FLAG_FAIL_START = 0x400,PCI_FLAG_GHOST = 0x800,PCI_FLAG_DOUBLE_DECKER = 0x1000,PCI_FLAG_ONE_CHILD = 0x2000,PCI_FLAG_PRESERVE_COMMAND = 0x4000,PCI_FLAG_IS_VGA = 0x8000,PCI_FLAG_CB_SHARE_CMD_BITS = 0x10000,PCI_FLAG_STRAIGHT_IRQ_ROUTING = 0x20000,PCI_FLAG_SUBTRACTIVE_DECODE = 0x40000,PCI_FLAG_FDMA_ISA = 0x80000,PCI_FLAG_EXCLUSIVE = 0x100000,PCI_FLAG_EDGE = 0x200000,};
enum MACRO_PCM {PCM_PENUP = 0x1,PCM_RANGE = 0x2,PCM_INVERT = 0x20,PCM_RECTEXCLUDE = 0x2000,PCM_RECTBOUND = 0x4000,PCM_TIMEOUT = 0x8000,PCM_RGNBOUND = 0x10000,PCM_RGNEXCLUDE = 0x20000,PCM_DOPOLLING = 0x40000,PCM_TAPNHOLD = 0x80000,};
enum MACRO_PDC {PDC_NOT_FOUND = 0xC0000083,PDC_NOT_RESPONDING = 0xC0000084,};
enum MACRO_PDH {PDH_CSTATUS_VALID_DATA = 0x0,PDH_CSTATUS_NEW_DATA = 0x1,PDH_CSTATUS_NO_MACHINE = 0x800007D0,PDH_CSTATUS_NO_INSTANCE = 0x800007D1,PDH_MORE_DATA = 0x800007D2,PDH_CSTATUS_ITEM_NOT_VALIDATED = 0x800007D3,PDH_RETRY = 0x800007D4,PDH_NO_DATA = 0x800007D5,PDH_CALC_NEGATIVE_DENOMINATOR = 0x800007D6,PDH_CALC_NEGATIVE_TIMEBASE = 0x800007D7,PDH_CALC_NEGATIVE_VALUE = 0x800007D8,PDH_DIALOG_CANCELLED = 0x800007D9,PDH_END_OF_LOG_FILE = 0x800007DA,PDH_CSTATUS_NO_OBJECT = 0xC0000BB8,PDH_CSTATUS_NO_COUNTER = 0xC0000BB9,PDH_CSTATUS_INVALID_DATA = 0xC0000BBA,PDH_MEMORY_ALLOCATION_FAILURE = 0xC0000BBB,PDH_INVALID_HANDLE = 0xC0000BBC,PDH_INVALID_ARGUMENT = 0xC0000BBD,PDH_FUNCTION_NOT_FOUND = 0xC0000BBE,PDH_CSTATUS_NO_COUNTERNAME = 0xC0000BBF,PDH_CSTATUS_BAD_COUNTERNAME = 0xC0000BC0,PDH_INVALID_BUFFER = 0xC0000BC1,PDH_INSUFFICIENT_BUFFER = 0xC0000BC2,PDH_CANNOT_CONNECT_MACHINE = 0xC0000BC3,PDH_INVALID_PATH = 0xC0000BC4,PDH_INVALID_INSTANCE = 0xC0000BC5,PDH_INVALID_DATA = 0xC0000BC6,PDH_NO_DIALOG_DATA = 0xC0000BC7,PDH_CANNOT_READ_NAME_STRINGS = 0xC0000BC8,PDH_LOG_FILE_CREATE_ERROR = 0xC0000BC9,PDH_LOG_FILE_OPEN_ERROR = 0xC0000BCA,PDH_LOG_TYPE_NOT_FOUND = 0xC0000BCB,PDH_NO_MORE_DATA = 0xC0000BCC,PDH_ENTRY_NOT_IN_LOG_FILE = 0xC0000BCD,PDH_DATA_SOURCE_IS_LOG_FILE = 0xC0000BCE,PDH_DATA_SOURCE_IS_REAL_TIME = 0xC0000BCF,PDH_UNABLE_READ_LOG_HEADER = 0xC0000BD0,PDH_FILE_NOT_FOUND = 0xC0000BD1,PDH_FILE_ALREADY_EXISTS = 0xC0000BD2,PDH_NOT_IMPLEMENTED = 0xC0000BD3,PDH_STRING_NOT_FOUND = 0xC0000BD4,PDH_UNABLE_MAP_NAME_FILES = 0x80000BD5,PDH_UNKNOWN_LOG_FORMAT = 0xC0000BD6,PDH_UNKNOWN_LOGSVC_COMMAND = 0xC0000BD7,PDH_LOGSVC_QUERY_NOT_FOUND = 0xC0000BD8,PDH_LOGSVC_NOT_OPENED = 0xC0000BD9,};
enum MACRO_PDK {PDK_NULL = 0x0,PDK_UP = 0x0,PDK_DOWN = 0x1,PDK_BARREL1 = 0x2,PDK_BARREL2 = 0x4,PDK_BARREL3 = 0x8,PDK_SWITCHES = 0xF,PDK_TRANSITION = 0x10,PDK_UNUSED10 = 0x20,PDK_UNUSED20 = 0x40,PDK_INVERTED = 0x80,PDK_PENIDMASK = 0xF00,PDK_UNUSED1000 = 0x1000,PDK_INKSTOPPED = 0x2000,PDK_OUTOFRANGE = 0x4000,PDK_DRIVER = 0x8000,PDK_TIPMASK = 0x1,};
enum MACRO_PDR {PDR_NOHIT = 3,PDR_HIT = 2,PDR_OK = 1,PDR_CANCEL = 0,PDR_ERROR = -1,PDR_PNDTERR = -2,PDR_VERSIONERR = -3,PDR_COMPRESSED = -4,PDR_STRKINDEXERR = -5,PDR_PNTINDEXERR = -6,PDR_MEMERR = -7,PDR_INKSETERR = -8,PDR_ABORT = -9,PDR_NA = -10,PDR_USERDATAERR = -16,PDR_SCALINGERR = -17,PDR_TIMESTAMPERR = -18,PDR_OEMDATAERR = -19,PDR_SCTERR = -20,};
enum MACRO_PDT {PDT_NULL = 0,PDT_PRESSURE = 1,PDT_HEIGHT = 2,PDT_ANGLEXY = 3,PDT_ANGLEZ = 4,PDT_BARRELROTATION = 5,PDT_OEMSPECIFIC = 16,};
enum MACRO_PEN {WHITE_PEN = 6,BLACK_PEN = 7,NULL_PEN = 8,};
enum MACRO_PFA {PFA_LEFT = 0x1,PFA_RIGHT = 0x2,PFA_CENTER = 0x3,};
enum MACRO_PFD {PFD_TYPE_RGBA = 0,PFD_TYPE_COLORINDEX = 1,PFD_MAIN_PLANE = 0,PFD_OVERLAY_PLANE = 1,PFD_UNDERLAY_PLANE = -1,PFD_DOUBLEBUFFER = 1,PFD_STEREO = 2,PFD_DRAW_TO_WINDOW = 4,PFD_DRAW_TO_BITMAP = 8,PFD_SUPPORT_GDI = 16,PFD_SUPPORT_OPENGL = 32,PFD_GENERIC_FORMAT = 64,PFD_NEED_PALETTE = 128,PFD_NEED_SYSTEM_PALETTE = 256,PFD_SWAP_EXCHANGE = 512,PFD_SWAP_COPY = 1024,PFD_SWAP_LAYER_BUFFERS = 2048,PFD_GENERIC_ACCELERATED = 4096,PFD_SUPPORT_DIRECTDRAW = 8192,PFD_DEPTH_DONTCARE = 536870912,PFD_DOUBLEBUFFER_DONTCARE = 1073741824,PFD_STEREO_DONTCARE = -2147483648,};
enum MACRO_PFE {PFE_RTLPARA = 1,PFE_RTLPAR = 1,PFE_KEEP = 2,PFE_KEEPNEXT = 4,PFE_PAGEBREAKBEFORE = 8,PFE_NOLINENUMBER = 16,PFE_NOWIDOWCONTROL = 32,PFE_DONOTHYPHEN = 64,PFE_SIDEBYSIDE = 128,PFE_TABLEROW = 49152,PFE_TABLECELLEND = 32768,PFE_TABLECELL = 16384,};
enum MACRO_PFL {PFL_MULTIPLE_PROTO_ENTRIES = 0x1,PFL_RECOMMENDED_PROTO_ENTRY = 0x2,PFL_HIDDEN = 0x4,PFL_MATCHES_PROTOCOL_ZERO = 0x8,};
enum MACRO_PFM {PFM_STARTINDENT = 0x1,PFM_RIGHTINDENT = 0x2,PFM_OFFSET = 0x4,PFM_ALIGNMENT = 0x8,PFM_TABSTOPS = 0x10,PFM_NUMBERING = 0x20,PFM_OFFSETINDENT = 0x80000000,};
enum MACRO_PFN {PFN_BULLET = 0x1,};
enum MACRO_PGB {PGB_TOPORLEFT = 0,PGB_BOTTOMORRIGHT = 1,};
enum MACRO_PGF {PGF_INVISIBLE = 0,PGF_NORMAL = 1,PGF_GRAYED = 2,PGF_DEPRESSED = 4,PGF_HOT = 8,};
enum MACRO_PGK {PGK_SHIFT = 1,PGK_CONTROL = 2,PGK_MENU = 4,};
enum MACRO_PGM {PGM_SETCHILD = 5121,PGM_RECALCSIZE = 5122,PGM_FORWARDMOUSE = 5123,PGM_SETBKCOLOR = 5124,PGM_GETBKCOLOR = 5125,PGM_SETBORDER = 5126,PGM_GETBORDER = 5127,PGM_SETPOS = 5128,PGM_GETPOS = 5129,PGM_SETBUTTONSIZE = 5130,PGM_GETBUTTONSIZE = 5131,PGM_GETBUTTONSTATE = 5132,PGM_GETDROPTARGET = 8196,};
enum MACRO_PGN {PGN_FIRST = -900,PGN_LAST = -950,};
enum MACRO_PGS {PGS_VERT = 0x0,PGS_HORZ = 0x1,PGS_AUTOSCROLL = 0x2,PGS_DRAGNDROP = 0x4,};
enum MACRO_PHW {PHW_NONE = 0x0,PHW_PRESSURE = 0x1,PHW_HEIGHT = 0x2,PHW_ANGLEXY = 0x4,PHW_ANGLEZ = 0x8,PHW_BARRELROTATION = 0x10,PHW_OEMSPECIFIC = 0x20,PHW_PDK = 0x40,PHW_ALL = 0x7F,};
enum MACRO_PID {PID_DICTIONARY = 0,PID_CODEPAGE = 1,PID_FIRST_USABLE = 2,PID_FIRST_NAME_DEFAULT = 4095,PID_LOCALE = -2147483648,PID_MODIFY_TIME = -2147483647,PID_SECURITY = -2147483646,PID_ILLEGAL = -1,};
enum MACRO_PII {PII_INKCLIPRECT = 0x1,PII_INKSTOPRECT = 0x2,PII_INKCLIPRGN = 0x4,PII_INKSTOPRGN = 0x8,PII_INKPENTIP = 0x10,PII_SAVEBACKGROUND = 0x20,PII_CLIPSTOP = 0x40,};
enum MACRO_PIT {PIT_RGNBOUND = 0x1,PIT_RGNEXCLUDE = 0x2,PIT_TIMEOUT = 0x4,PIT_TAPNHOLD = 0x8,};
enum MACRO_PMI {PMI_RCCHANGE = 0,PMI_BEDIT = 1,PMI_IMECOLOR = 2,PMI_CXTABLET = 3,PMI_CYTABLET = 4,PMI_PENTIP = 6,PMI_ENABLEFLAGS = 7,PMI_TIMEOUT = 8,PMI_TIMEOUTGEST = 9,PMI_TIMEOUTSEL = 10,PMI_SYSFLAGS = 11,PMI_INDEXFROMRGB = 12,PMI_RGBFROMINDEX = 13,PMI_SYSREC = 14,PMI_TICKREF = 15,PMI_SAVE = 4096,};
enum MACRO_POP {POP_SYNC = 0x0,POP_ASYNC = 0x1,POP_EVENT = 0x10,POP_WINDOW = 0x20,};
enum MACRO_PPP {PPP_CLIENT = 0x4,};
enum MACRO_PRF {PRF_CHECKVISIBLE = 0x1,PRF_NONCLIENT = 0x2,PRF_CLIENT = 0x4,PRF_ERASEBKGND = 0x8,PRF_CHILDREN = 0x10,PRF_OWNED = 0x20,};
enum MACRO_PSD {PSD_DEFAULTMINMARGINS = 0x0,PSD_INWININIINTLMEASURE = 0x0,PSD_MINMARGINS = 0x1,PSD_MARGINS = 0x2,PSD_INTHOUSANDTHSOFINCHES = 0x4,PSD_INHUNDREDTHSOFMILLIMETERS = 0x8,PSD_DISABLEMARGINS = 0x10,PSD_DISABLEPRINTER = 0x20,PSD_NOWARNING = 0x80,PSD_DISABLEORIENTATION = 0x100,PSD_RETURNDEFAULT = 0x400,PSD_DISABLEPAPER = 0x200,PSD_SHOWHELP = 0x800,PSD_ENABLEPAGESETUPHOOK = 0x2000,PSD_ENABLEPAGESETUPTEMPLATE = 0x8000,PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x20000,PSD_ENABLEPAGEPAINTHOOK = 0x40000,PSD_DISABLEPAGEPAINTING = 0x80000,PSD_NONETWORKBUTTON = 0x200000,};
enum MACRO_PSF {PSF_SHOWHELP = 0x1,PSF_SELECTPASTE = 0x2,PSF_SELECTPASTELINK = 0x4,PSF_CHECKDISPLAYASICON = 0x8,PSF_DISABLEDISPLAYASICON = 0x10,PSF_HIDECHANGEICON = 0x20,PSF_STAYONCLIPBOARDCHANGE = 0x40,PSF_NOREFRESHDATAOBJECT = 0x80,};
enum MACRO_PSH {PSH_DEFAULT = 0x0,PSH_PROPTITLE = 0x1,PSH_USEHICON = 0x2,PSH_USEICONID = 0x4,PSH_PROPSHEETPAGE = 0x8,PSH_WIZARDHASFINISH = 0x10,PSH_WIZARD = 0x20,PSH_USEPSTARTPAGE = 0x40,PSH_NOAPPLYNOW = 0x80,PSH_USECALLBACK = 0x100,PSH_HASHELP = 0x200,PSH_MODELESS = 0x400,PSH_RTLREADING = 0x800,PSH_WIZARDCONTEXTHELP = 0x1000,PSH_WIZARD97 = 0x2000,PSH_WATERMARK = 0x8000,PSH_USEHBMWATERMARK = 0x10000,PSH_USEHPLWATERMARK = 0x20000,PSH_STRETCHWATERMARK = 0x40000,PSH_HEADER = 0x80000,PSH_USEHBMHEADER = 0x100000,PSH_USEPAGELANG = 0x200000,};
enum MACRO_PSM {PSM_SETTITLE = 1135,};
enum MACRO_PSN {PSN_FIRST = -200,PSN_LAST = -299,PSN_SETACTIVE = -200,PSN_KILLACTIVE = -201,PSN_APPLY = -202,PSN_RESET = -203,PSN_HELP = -205,PSN_WIZBACK = -206,PSN_WIZNEXT = -207,PSN_WIZFINISH = -208,PSN_QUERYCANCEL = -209,PSN_GETOBJECT = -210,};
enum MACRO_PSP {PSP_DEFAULT = 0x0,PSP_DLGINDIRECT = 0x1,PSP_USEHICON = 0x2,PSP_USEICONID = 0x4,PSP_USETITLE = 0x8,PSP_RTLREADING = 0x10,PSP_HASHELP = 0x20,PSP_USEREFPARENT = 0x40,PSP_USECALLBACK = 0x80,PSP_PREMATURE = 0x400,PSP_HIDEHEADER = 0x800,PSP_USEHEADERTITLE = 0x1000,PSP_USEHEADERSUBTITLE = 0x2000,};
enum MACRO_PST {PST_UNSPECIFIED = 0x0,PST_RS232 = 0x1,PST_PARALLELPORT = 0x2,PST_RS422 = 0x3,PST_RS423 = 0x4,PST_RS449 = 0x5,PST_MODEM = 0x6,PST_FAX = 0x21,PST_SCANNER = 0x22,PST_NETWORK_BRIDGE = 0x100,PST_LAT = 0x101,PST_TCPIP_TELNET = 0x102,PST_X25 = 0x103,};
enum MACRO_PTR {MAXINT_PTR = 0x7FFFFFFF,MININT_PTR = 0x80000000,MAXUINT_PTR = 0xFFFFFFFF,MAXUHALF_PTR = 0xFFFF,MAXHALF_PTR = 0x7FFF,MINHALF_PTR = 0x8000,};
enum MACRO_PVD {PVD_CONFIG = 0x3001,};
enum MACRO_PWE {PWE_AUTOWRITE = 0x1,PWE_ACTIONHANDLES = 0x2,PWE_INPUTCURSOR = 0x4,PWE_LENS = 0x8,};
enum MACRO_PWF {PWF_RC1 = 0x1,PWF_PEN = 0x4,PWF_INKDISPLAY = 0x8,PWF_RECOGNIZER = 0x10,PWF_BEDIT = 0x100,PWF_HEDIT = 0x200,PWF_IEDIT = 0x400,PWF_ENHANCED = 0x1000,PWF_FULL = 0x171D,};
enum MACRO_PWR {PWR_OK = 1,PWR_FAIL = -1,PWR_SUSPENDREQUEST = 1,PWR_SUSPENDRESUME = 2,PWR_CRITICALRESUME = 3,};
enum MACRO_QDI {QDI_SETDIBITS = 1,QDI_GETDIBITS = 2,QDI_DIBTOSCREEN = 4,QDI_STRETCHDIB = 8,};
enum MACRO_QID {QID_SYNC = 0xFFFFFFFF,};
enum MACRO_QIF {QIF_CACHED = 0x1,QIF_DONTEXPANDFOLDER = 0x2,};
enum MACRO_QOP {QOP_NOOP = 0,QOP_BOOL_EQ = 1,QOP_BOOL_NEQ = 2,QOP_BOOL_FIRST = 1,QOP_BOOL_LAST = 2,QOP_NUMERIC_EQ = 3,QOP_NUMERIC_NEQ = 4,QOP_NUMERIC_GT = 5,QOP_NUMERIC_LT = 6,QOP_NUMERIC_GTE = 7,QOP_NUMERIC_LTE = 8,QOP_NUMERIC_FIRST = 3,QOP_NUMERIC_LAST = 8,QOP_STR_EQ = 9,QOP_STR_NEQ = 10,QOP_STR_GT = 11,QOP_STR_LT = 12,QOP_STR_GTE = 13,QOP_STR_LTE = 14,QOP_STR_LIKE = 15,QOP_STR_NOTLIKE = 16,QOP_STR_FIRST = 9,QOP_STR_LAST = 16,QOP_UPCASE_EQ = 17,QOP_UPCASE_NEQ = 18,QOP_UPCASE_GT = 19,QOP_UPCASE_LT = 20,QOP_UPCASE_GTE = 21,QOP_UPCASE_LTE = 22,QOP_UPCASE_LIKE = 23,QOP_UPCASE_NOTLIKE = 24,QOP_UPCASE_FIRST = 17,QOP_UPCASE_LAST = 24,QOP_DATETIME_EQ = 25,QOP_DATETIME_NEQ = 26,QOP_DATETIME_GT = 27,QOP_DATETIME_LT = 28,QOP_DATETIME_GTE = 29,QOP_DATETIME_LTE = 30,QOP_DATETIME_FIRST = 25,QOP_DATETIME_LAST = 30,QOP_DATE_EQ = 31,QOP_DATE_NEQ = 32,QOP_DATE_GT = 33,QOP_DATE_LT = 34,QOP_DATE_GTE = 35,QOP_DATE_LTE = 36,QOP_DATE_FIRST = 31,QOP_DATE_LAST = 36,QOP_TIME_EQ = 37,QOP_TIME_NEQ = 38,QOP_TIME_GT = 39,QOP_TIME_LT = 40,QOP_TIME_GTE = 41,QOP_TIME_LTE = 42,QOP_TIME_FIRST = 37,QOP_TIME_LAST = 42,QOP_YEAR_EQ = 43,QOP_YEAR_NEQ = 44,QOP_YEAR_GT = 45,QOP_YEAR_LT = 46,QOP_YEAR_GTE = 47,QOP_YEAR_LTE = 48,QOP_YEAR_FIRST = 43,QOP_YEAR_LAST = 48,QOP_MONTH_EQ = 49,QOP_MONTH_NEQ = 50,QOP_MONTH_GT = 51,QOP_MONTH_LT = 52,QOP_MONTH_GTE = 53,QOP_MONTH_LTE = 54,QOP_MONTH_FIRST = 49,QOP_MONTH_LAST = 54,QOP_DAY_EQ = 55,QOP_DAY_NEQ = 56,QOP_DAY_GT = 57,QOP_DAY_LT = 58,QOP_DAY_GTE = 59,QOP_DAY_LTE = 60,QOP_DAY_FIRST = 55,QOP_DAY_LAST = 60,QOP_HOUR_EQ = 61,QOP_HOUR_NEQ = 62,QOP_HOUR_GT = 63,QOP_HOUR_LT = 64,QOP_HOUR_GTE = 65,QOP_HOUR_LTE = 66,QOP_HOUR_FIRST = 61,QOP_HOUR_LAST = 66,QOP_MINUTE_EQ = 67,QOP_MINUTE_NEQ = 68,QOP_MINUTE_GT = 69,QOP_MINUTE_LT = 70,QOP_MINUTE_GTE = 71,QOP_MINUTE_LTE = 72,QOP_MINUTE_FIRST = 67,QOP_MINUTE_LAST = 72,QOP_SECOND_EQ = 73,QOP_SECOND_NEQ = 74,QOP_SECOND_GT = 75,QOP_SECOND_LT = 76,QOP_SECOND_GTE = 77,QOP_SECOND_LTE = 78,QOP_SECOND_FIRST = 73,QOP_SECOND_LAST = 78,QOP_LAST = 78,};
enum MACRO_QOS {QOS_GENERAL_ID_BASE = 2000,QOS_OBJECT_PRIORITY = 2000,QOS_OBJECT_END_OF_LIST = 2001,QOS_OBJECT_SD_MODE = 2002,QOS_OBJECT_TRAFFIC_CLASS = 2003,QOS_NOT_SPECIFIED = -1,};
enum MACRO_RAS {RAS_MaxDeviceType = 16,RAS_MaxPhoneNumber = 128,RAS_MaxIpAddress = 15,RAS_MaxIpxAddress = 21,RAS_MaxEntryName = 256,RAS_MaxDeviceName = 128,RAS_MaxCallbackNumber = 128,RAS_MaxAreaCode = 10,RAS_MaxPadType = 32,RAS_MaxX25Address = 200,RAS_MaxFacilities = 200,RAS_MaxUserData = 200,};
enum MACRO_RBN {RBN_FIRST = -831,RBN_LAST = -859,};
enum MACRO_RBS {RBS_TOOLTIPS = 0x100,RBS_VARHEIGHT = 0x200,RBS_BANDBORDERS = 0x400,RBS_FIXEDORDER = 0x800,RBS_REGISTERDROP = 0x1000,RBS_AUTOSIZE = 0x2000,RBS_VERTICALGRIPPER = 0x4000,RBS_DBLCLKTOGGLE = 0x8000,};
enum MACRO_RBV {RBV_REGISTER_FORMAT = 0,RBV_LITERAL_FORMAT = 1,};
enum MACRO_RDB {RDB = 13,};
enum MACRO_RDH {RDH_RECTANGLES = 1,};
enum MACRO_RDW {RDW_INVALIDATE = 0x1,RDW_INTERNALPAINT = 0x2,RDW_ERASE = 0x4,RDW_VALIDATE = 0x8,RDW_NOINTERNALPAINT = 0x10,RDW_NOERASE = 0x20,RDW_NOCHILDREN = 0x40,RDW_ALLCHILDREN = 0x80,RDW_UPDATENOW = 0x100,RDW_ERASENOW = 0x200,RDW_FRAME = 0x400,RDW_NOFRAME = 0x800,};
enum MACRO_REC {REC_OEM = -1024,REC_LANGUAGE = -48,REC_GUIDE = -47,REC_PARAMERROR = -46,REC_INVALIDREF = -45,REC_RECTEXCLUDE = -44,REC_RECTBOUND = -43,REC_PCM = -42,REC_RESULTMODE = -41,REC_HWND = -40,REC_ALC = -39,REC_ERRORLEVEL = -38,REC_CLVERIFY = -37,REC_DICT = -36,REC_HREC = -35,REC_BADEVENTREF = -33,REC_NOCOLLECTION = -32,REC_DEBUG = -32,REC_POINTEREVENT = -31,REC_BADHPENDATA = -9,REC_OOM = -8,REC_NOINPUT = -7,REC_NOTABLET = -6,REC_BUSY = -5,REC_BUFFERTOOSMALL = -4,REC_ABORT = -3,REC_NA = -2,REC_OVERFLOW = -1,REC_OK = 0,REC_TERMBOUND = 1,REC_TERMEX = 2,REC_TERMPENUP = 3,REC_TERMRANGE = 4,REC_TERMTIMEOUT = 5,REC_DONE = 6,REC_TERMOEM = 512,};
enum MACRO_REG {REG_OPTION_RESERVED = 0x0,REG_OPTION_NON_VOLATILE = 0x0,REG_OPTION_VOLATILE = 0x1,REG_OPTION_CREATE_LINK = 0x2,REG_OPTION_BACKUP_RESTORE = 0x4,REG_OPTION_OPEN_LINK = 0x8,REG_LEGAL_OPTION = 0xF,REG_CREATED_NEW_KEY = 0x1,REG_OPENED_EXISTING_KEY = 0x2,REG_WHOLE_HIVE_VOLATILE = 0x1,REG_REFRESH_HIVE = 0x2,REG_NO_LAZY_FLUSH = 0x4,REG_NOTIFY_CHANGE_NAME = 0x1,REG_NOTIFY_CHANGE_ATTRIBUTES = 0x2,REG_NOTIFY_CHANGE_LAST_SET = 0x4,REG_NOTIFY_CHANGE_SECURITY = 0x8,REG_LEGAL_CHANGE_FILTER = 0xF,REG_NONE = 0x0,REG_SZ = 0x1,REG_EXPAND_SZ = 0x2,REG_BINARY = 0x3,REG_DWORD = 0x4,REG_DWORD_LITTLE_ENDIAN = 0x4,REG_DWORD_BIG_ENDIAN = 0x5,REG_LINK = 0x6,REG_MULTI_SZ = 0x7,REG_RESOURCE_LIST = 0x8,REG_FULL_RESOURCE_DESCRIPTOR = 0x9,REG_RESOURCE_REQUIREMENTS_LIST = 0xA,};
enum MACRO_REO {REO_GETOBJ_NO_INTERFACES = 0x0,REO_GETOBJ_POLEOBJ = 0x1,REO_GETOBJ_PSTG = 0x2,REO_GETOBJ_POLESITE = 0x4,REO_GETOBJ_ALL_INTERFACES = 0x7,REO_CP_SELECTION = 0xFFFFFFFF,REO_IOB_SELECTION = 0xFFFFFFFF,REO_IOB_USE_CP = 0xFFFFFFFE,REO_NULL = 0x0,REO_READWRITEMASK = 0x3F,REO_DONTNEEDPALETTE = 0x20,REO_BLANK = 0x10,REO_DYNAMICSIZE = 0x8,REO_INVERTEDSELECT = 0x4,REO_BELOWBASELINE = 0x2,REO_RESIZABLE = 0x1,REO_LINK = 0xFFFFFFFF80000000,REO_STATIC = 0x40000000,REO_SELECTED = 0x8000000,REO_OPEN = 0x4000000,REO_INPLACEACTIVE = 0x2000000,REO_HILITED = 0x1000000,REO_LINKAVAILABLE = 0x800000,REO_GETMETAFILE = 0x400000,};
enum MACRO_RES {RES_ICON = 1,RES_CURSOR = 2,};
enum MACRO_RGB {RGB_GAMMA_MIN = 0x540,RGB_GAMMA_MAX = 0xFDE8,};
enum MACRO_RGN {RGN_ERROR = 0,RGN_AND = 1,RGN_OR = 2,RGN_XOR = 3,RGN_DIFF = 4,RGN_COPY = 5,RGN_MIN = 1,RGN_MAX = 5,};
enum MACRO_RHH {RHH_STD = 0,RHH_BOX = 1,};
enum MACRO_RIP {RIP_BASE_ENTRY = 0,RIP_INTERFACE_TABLE = 1,};
enum MACRO_RND {RND_INVALID_TIME = 0xE0000200,};
enum MACRO_ROT {ROT_COMPARE_MAX = 2048,};
enum MACRO_ROW {ROW_ADD = 1,ROW_MODIFY = 2,ROW_REMOVE = 4,ROW_EMPTY = 5,};
enum MACRO_RPA {RPA_DEFAULT = 0x1,RPA_HEDIT = 0x1,RPA_KANJIFIXEDBEDIT = 0x2,RPA_DBCSPRIORITY = 0x4,};
enum MACRO_RPC {RPC_C_BINDING_INFINITE_TIMEOUT = 10,RPC_C_BINDING_MIN_TIMEOUT = 0,RPC_C_BINDING_DEFAULT_TIMEOUT = 5,RPC_C_BINDING_MAX_TIMEOUT = 9,RPC_C_CANCEL_INFINITE_TIMEOUT = -1,RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234,RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10,RPC_C_BIND_TO_ALL_NICS = 1,RPC_C_USE_INTERNET_PORT = 1,RPC_C_USE_INTRANET_PORT = 2,RPC_C_MQ_TEMPORARY = 0,RPC_C_MQ_PERMANENT = 1,RPC_C_MQ_CLEAR_ON_OPEN = 2,RPC_C_MQ_USE_EXISTING_SECURITY = 4,RPC_C_MQ_AUTHN_LEVEL_NONE = 0,RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = 8,RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = 16,RPC_C_OPT_MQ_DELIVERY = 1,RPC_C_OPT_MQ_PRIORITY = 2,RPC_C_OPT_MQ_JOURNAL = 3,RPC_C_OPT_MQ_ACKNOWLEDGE = 4,RPC_C_OPT_MQ_AUTHN_SERVICE = 5,RPC_C_OPT_MQ_AUTHN_LEVEL = 6,RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7,RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8,RPC_C_OPT_BINDING_NONCAUSAL = 9,RPC_C_OPT_MAX_OPTIONS = 10,RPC_C_MQ_EXPRESS = 0,RPC_C_MQ_RECOVERABLE = 1,RPC_C_MQ_JOURNAL_NONE = 0,RPC_C_MQ_JOURNAL_DEADLETTER = 1,RPC_C_MQ_JOURNAL_ALWAYS = 2,RPC_C_STATS_CALLS_IN = 0,RPC_C_STATS_CALLS_OUT = 1,RPC_C_STATS_PKTS_IN = 2,RPC_C_STATS_PKTS_OUT = 3,RPC_C_AUTHN_LEVEL_DEFAULT = 0,RPC_C_AUTHN_LEVEL_NONE = 1,RPC_C_AUTHN_LEVEL_CONNECT = 2,RPC_C_AUTHN_LEVEL_CALL = 3,RPC_C_AUTHN_LEVEL_PKT = 4,RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5,RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6,RPC_C_IMP_LEVEL_ANONYMOUS = 1,RPC_C_IMP_LEVEL_IDENTIFY = 2,RPC_C_IMP_LEVEL_IMPERSONATE = 3,RPC_C_IMP_LEVEL_DELEGATE = 4,RPC_C_QOS_IDENTITY_STATIC = 0,RPC_C_QOS_IDENTITY_DYNAMIC = 1,RPC_C_QOS_CAPABILITIES_DEFAULT = 0,RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1,RPC_C_PROTECT_LEVEL_DEFAULT = 0,RPC_C_PROTECT_LEVEL_NONE = 1,RPC_C_PROTECT_LEVEL_CONNECT = 2,RPC_C_PROTECT_LEVEL_CALL = 3,RPC_C_PROTECT_LEVEL_PKT = 4,RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = 5,RPC_C_PROTECT_LEVEL_PKT_PRIVACY = 6,RPC_C_AUTHN_NONE = 0,RPC_C_AUTHN_DCE_PRIVATE = 1,RPC_C_AUTHN_DCE_PUBLIC = 2,RPC_C_AUTHN_DEC_PUBLIC = 4,RPC_C_AUTHN_WINNT = 10,RPC_C_AUTHN_DPA = 16,RPC_C_AUTHN_MSN = 17,RPC_C_AUTHN_GSS_KERBEROS = 18,RPC_C_AUTHN_MQ = 100,RPC_C_AUTHN_DEFAULT = -1,RPC_C_SECURITY_QOS_VERSION = 1,};
enum MACRO_RSA {RSA_CSP_PUBLICKEYBLOB = 19,};
enum MACRO_RSC {RSC_FLAG_INF = 1,RSC_FLAG_SKIPDISKSPACECHECK = 2,RSC_FLAG_QUIET = 4,RSC_FLAG_NGCONV = 8,RSC_FLAG_UPDHLPDLLS = 16,RSC_FLAG_DELAYREGISTEROCX = 512,RSC_FLAG_SETUPAPI = 1024,};
enum MACRO_RTF {RTF_SYNC_RTF_CHANGED = 0x1,RTF_SYNC_BODY_CHANGED = 0x2,};
enum MACRO_RTL {RTL_CRITSECT_TYPE = 0,RTL_RESOURCE_TYPE = 1,};
enum MACRO_RTM {RTM_PROTOCOL_FAMILY_IPX = 0,RTM_PROTOCOL_FAMILY_IP = 1,};
enum MACRO_RTP {RTP_TYPE = 2,RTP_MAX_SDES = 256,RTP_MAX_EKEY = 32,};
enum MACRO_RTR {RTR_INFO_BLOCK_VERSION = 1,};
enum MACRO_RTS {RTS_CONTROL_DISABLE = 0x0,RTS_CONTROL_ENABLE = 0x1,RTS_CONTROL_HANDSHAKE = 0x2,RTS_CONTROL_TOGGLE = 0x3,};
enum MACRO_SAP {SAP_BASE_ENTRY = 0,SAP_INTERFACE_TABLE = 1,};
enum MACRO_SBN {SBN_FIRST = -880,SBN_LAST = -899,};
enum MACRO_SBS {SBS_HORZ = 0x0,SBS_VERT = 0x1,SBS_TOPALIGN = 0x2,SBS_LEFTALIGN = 0x2,SBS_BOTTOMALIGN = 0x4,SBS_RIGHTALIGN = 0x4,SBS_SIZEBOXTOPLEFTALIGN = 0x2,SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x4,SBS_SIZEBOX = 0x8,SBS_SIZEGRIP = 0x10,};
enum MACRO_SBT {SBT_OWNERDRAW = 0x1000,SBT_NOBORDERS = 0x100,SBT_POPOUT = 0x200,SBT_RTLREADING = 0x400,SBT_TOOLTIPS = 0x800,};
enum MACRO_SCF {SCF_SELECTION = 0x1,SCF_WORD = 0x2,SCF_DEFAULT = 0x0,SCF_ALL = 0x4,SCF_USEUIRULES = 0x8,};
enum MACRO_SCH {SCH_NONE = 0,SCH_ADVISE = 1,SCH_FORCE = 2,};
enum MACRO_SCS {SCS_32BIT_BINARY = 0,SCS_DOS_BINARY = 1,SCS_WOW_BINARY = 2,SCS_PIF_BINARY = 3,SCS_POSIX_BINARY = 4,SCS_OS216_BINARY = 5,};
enum MACRO_SDP {SDP_INVALID_FORMAT = 0xE0000400,SDP_INVALID_CHARACTER_SET_FORMAT = 0xE0000401,SDP_INVALID_CHARACTER_SET = 0xE0000402,SDP_INVALID_NUMERICAL_VALUE = 0xE0000403,SDP_INVALID_VERSION_FIELD = 0xE0000404,SDP_INVALID_ORIGIN_FIELD = 0xE0000405,SDP_INVALID_SESSION_NAME = 0xE0000406,SDP_INVALID_SESSION_TITLE = 0xE0000407,SDP_INVALID_URI = 0xE0000408,SDP_INVALID_EMAIL_FIELD = 0xE0000409,SDP_INVALID_PHONE_FIELD = 0xE000040A,SDP_INVALID_CONNECTION_FIELD = 0xE000040B,SDP_INVALID_BANDWIDTH_FIELD = 0xE000040C,SDP_INVALID_ADDRESS = 0xE000040D,SDP_INVALID_TIME_PERIOD = 0xE000040E,SDP_INVALID_TIME_FIELD = 0xE000040F,SDP_INVALID_REPEAT_FIELD = 0xE0000410,SDP_INVALID_ADJUSTMENT_FIELD = 0xE0000411,SDP_INVALID_ENCRYPTION_KEY_FIELD = 0xE0000412,SDP_INVALID_ATTRIBUTE = 0xE0000413,SDP_INVALID_MEDIA_FIELD = 0xE0000414,SDP_INVALID_MEDIA_NAME = 0xE0000415,SDP_INVALID_MEDIA_TITLE = 0xE0000416,SDP_INTERNAL_ERROR = 0xE0000417,};
enum MACRO_SEC {SEC_FILE = 0x800000,SEC_IMAGE = 0x1000000,SEC_VLM = 0x2000000,SEC_RESERVE = 0x4000000,SEC_COMMIT = 0x8000000,SEC_NOCACHE = 0x10000000,};
enum MACRO_SEE {SEE_MASK_CLASSNAME = 0x1,SEE_MASK_CLASSKEY = 0x3,SEE_MASK_IDLIST = 0x4,SEE_MASK_INVOKEIDLIST = 0xC,SEE_MASK_ICON = 0x10,SEE_MASK_HOTKEY = 0x20,SEE_MASK_NOCLOSEPROCESS = 0x40,SEE_MASK_CONNECTNETDRV = 0x80,SEE_MASK_FLAG_DDEWAIT = 0x100,SEE_MASK_DOENVSUBST = 0x200,SEE_MASK_FLAG_NO_UI = 0x400,SEE_MASK_UNICODE = 0x4000,SEE_MASK_NO_CONSOLE = 0x8000,SEE_MASK_ASYNCOK = 0x100000,SEE_MASK_HMONITOR = 0x200000,};
enum MACRO_SEF {SEF_DACL_AUTO_INHERIT = 0x1,SEF_SACL_AUTO_INHERIT = 0x2,SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x4,SEF_AVOID_PRIVILEGE_CHECK = 0x8,};
enum MACRO_SEL {SEL_EMPTY = 0x0,SEL_TEXT = 0x1,SEL_OBJECT = 0x2,SEL_MULTICHAR = 0x4,SEL_MULTIOBJECT = 0x8,};
enum MACRO_SEM {SEM_FAILCRITICALERRORS = 0x1,SEM_NOGPFAULTERRORBOX = 0x2,SEM_NOALIGNMENTFAULTEXCEPT = 0x4,SEM_NOOPENFILEERRORBOX = 0x8000,};
enum MACRO_SEP {SEP_CHAR = 44,SEP_WCHAR = 44,};
enum MACRO_SET {SET_TAPE_MEDIA_INFORMATION = 0,SET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_SFF {SFF_SELECTION = 0x8000,SFF_PLAINRTF = 0x4000,};
enum MACRO_SHI {SHI_USES_UNLIMITED = 4294967295,};
enum MACRO_SID {SID_REVISION = 1,SID_MAX_SUB_AUTHORITIES = 15,SID_RECOMMENDED_SUB_AUTHORITIES = 1,};
enum MACRO_SIF {SIF_RANGE = 0x1,SIF_PAGE = 0x2,SIF_POS = 0x4,SIF_DISABLENOSCROLL = 0x8,SIF_TRACKPOS = 0x10,SIF_ALL = 0x17,};
enum MACRO_SIH {SIH_ALLANSICHAR = 1,};
enum MACRO_SIO {SIO_ASSOCIATE_HANDLE = -2013265919,SIO_ENABLE_CIRCULAR_QUEUEING = 671088642,SIO_FIND_ROUTE = 1207959555,SIO_FLUSH = 671088644,SIO_GET_BROADCAST_ADDRESS = 1207959557,SIO_GET_EXTENSION_FUNCTION_POINTER = -939524090,SIO_GET_QOS = -939524089,SIO_GET_GROUP_QOS = -939524088,SIO_MULTIPOINT_LOOPBACK = -2013265911,SIO_MULTICAST_SCOPE = -2013265910,SIO_SET_QOS = -2013265909,SIO_SET_GROUP_QOS = -2013265908,SIO_TRANSLATE_HANDLE = -939524083,SIO_ROUTING_INTERFACE_QUERY = -939524076,SIO_ROUTING_INTERFACE_CHANGE = -2013265899,SIO_ADDRESS_LIST_QUERY = 1207959574,SIO_ADDRESS_LIST_CHANGE = 671088663,};
enum MACRO_SIP {SIP_MAX_MAGIC_NUMBER = 4,};
enum MACRO_SKF {SKF_STICKYKEYSON = 0x1,SKF_AVAILABLE = 0x2,SKF_HOTKEYACTIVE = 0x4,SKF_CONFIRMHOTKEY = 0x8,SKF_HOTKEYSOUND = 0x10,SKF_INDICATOR = 0x20,SKF_AUDIBLEFEEDBACK = 0x40,SKF_TRISTATE = 0x80,SKF_TWOKEYSOFF = 0x100,SKF_LALTLATCHED = 0x10000000,SKF_LCTLLATCHED = 0x4000000,SKF_LSHIFTLATCHED = 0x1000000,SKF_RALTLATCHED = 0x20000000,SKF_RCTLLATCHED = 0x8000000,SKF_RSHIFTLATCHED = 0x2000000,SKF_LWINLATCHED = 0x40000000,SKF_RWINLATCHED = 0x80000000,SKF_LALTLOCKED = 0x100000,SKF_LCTLLOCKED = 0x40000,SKF_LSHIFTLOCKED = 0x10000,SKF_RALTLOCKED = 0x200000,SKF_RCTLLOCKED = 0x80000,SKF_RSHIFTLOCKED = 0x20000,SKF_LWINLOCKED = 0x400000,SKF_RWINLOCKED = 0x800000,};
enum MACRO_SLE {SLE_ERROR = 0x1,SLE_MINORERROR = 0x2,SLE_WARNING = 0x3,};
enum MACRO_SMS {SMS_EXTERN_PROPID_BASE = 0x6700,};
enum MACRO_SNA {SNA_UNICODE = 1,SNA_MULTIBYTE = 2,};
enum MACRO_SND {SND_SYNC = 0x0,SND_ASYNC = 0x1,SND_NODEFAULT = 0x2,SND_MEMORY = 0x4,SND_LOOP = 0x8,SND_NOSTOP = 0x10,SND_NOWAIT = 0x2000,SND_ALIAS = 0x10000,SND_ALIAS_ID = 0x110000,SND_FILENAME = 0x20000,SND_RESOURCE = 0x40004,SND_PURGE = 0x40,SND_APPLICATION = 0x80,SND_ALIAS_START = 0x0,SND_ALIAS_SYSTEMASTERISK = 0x2A53,SND_ALIAS_SYSTEMQUESTION = 0x3F53,SND_ALIAS_SYSTEMHAND = 0x4853,SND_ALIAS_SYSTEMEXIT = 0x4553,SND_ALIAS_SYSTEMSTART = 0x5353,SND_ALIAS_SYSTEMWELCOME = 0x5753,SND_ALIAS_SYSTEMEXCLAMATION = 0x2153,SND_ALIAS_SYSTEMDEFAULT = 0x4453,};
enum MACRO_SOF {SOF_UNIQUEFILENAME = 0x80000000,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SPC {SPC_INC_PE_RESOURCES_FLAG = 0x80,SPC_INC_PE_DEBUG_INFO_FLAG = 0x40,SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG = 0x20,};
enum MACRO_SPI {SPI_GETBEEP = 1,SPI_SETBEEP = 2,SPI_GETMOUSE = 3,SPI_SETMOUSE = 4,SPI_GETBORDER = 5,SPI_SETBORDER = 6,SPI_GETKEYBOARDSPEED = 10,SPI_SETKEYBOARDSPEED = 11,SPI_LANGDRIVER = 12,SPI_ICONHORIZONTALSPACING = 13,SPI_GETSCREENSAVETIMEOUT = 14,SPI_SETSCREENSAVETIMEOUT = 15,SPI_GETSCREENSAVEACTIVE = 16,SPI_SETSCREENSAVEACTIVE = 17,SPI_GETGRIDGRANULARITY = 18,SPI_SETGRIDGRANULARITY = 19,SPI_SETDESKWALLPAPER = 20,SPI_SETDESKPATTERN = 21,SPI_GETKEYBOARDDELAY = 22,SPI_SETKEYBOARDDELAY = 23,SPI_ICONVERTICALSPACING = 24,SPI_GETICONTITLEWRAP = 25,SPI_SETICONTITLEWRAP = 26,SPI_GETMENUDROPALIGNMENT = 27,SPI_SETMENUDROPALIGNMENT = 28,SPI_SETDOUBLECLKWIDTH = 29,SPI_SETDOUBLECLKHEIGHT = 30,SPI_GETICONTITLELOGFONT = 31,SPI_SETDOUBLECLICKTIME = 32,SPI_SETMOUSEBUTTONSWAP = 33,SPI_SETICONTITLELOGFONT = 34,SPI_GETFASTTASKSWITCH = 35,SPI_SETFASTTASKSWITCH = 36,SPI_SETDRAGFULLWINDOWS = 37,SPI_GETDRAGFULLWINDOWS = 38,SPI_GETNONCLIENTMETRICS = 41,SPI_SETNONCLIENTMETRICS = 42,SPI_GETMINIMIZEDMETRICS = 43,SPI_SETMINIMIZEDMETRICS = 44,SPI_GETICONMETRICS = 45,SPI_SETICONMETRICS = 46,SPI_SETWORKAREA = 47,SPI_GETWORKAREA = 48,SPI_SETPENWINDOWS = 49,SPI_GETHIGHCONTRAST = 66,SPI_SETHIGHCONTRAST = 67,SPI_GETKEYBOARDPREF = 68,SPI_SETKEYBOARDPREF = 69,SPI_GETSCREENREADER = 70,SPI_SETSCREENREADER = 71,SPI_GETANIMATION = 72,SPI_SETANIMATION = 73,SPI_GETFONTSMOOTHING = 74,SPI_SETFONTSMOOTHING = 75,SPI_SETDRAGWIDTH = 76,SPI_SETDRAGHEIGHT = 77,SPI_SETHANDHELD = 78,SPI_GETLOWPOWERTIMEOUT = 79,SPI_GETPOWEROFFTIMEOUT = 80,SPI_SETLOWPOWERTIMEOUT = 81,SPI_SETPOWEROFFTIMEOUT = 82,SPI_GETLOWPOWERACTIVE = 83,SPI_GETPOWEROFFACTIVE = 84,SPI_SETLOWPOWERACTIVE = 85,SPI_SETPOWEROFFACTIVE = 86,SPI_SETCURSORS = 87,SPI_SETICONS = 88,SPI_GETDEFAULTINPUTLANG = 89,SPI_SETDEFAULTINPUTLANG = 90,SPI_SETLANGTOGGLE = 91,SPI_GETWINDOWSEXTENSION = 92,SPI_SETMOUSETRAILS = 93,SPI_GETMOUSETRAILS = 94,SPI_SETSCREENSAVERRUNNING = 97,SPI_SCREENSAVERRUNNING = 97,SPI_GETFILTERKEYS = 50,SPI_SETFILTERKEYS = 51,SPI_GETTOGGLEKEYS = 52,SPI_SETTOGGLEKEYS = 53,SPI_GETMOUSEKEYS = 54,SPI_SETMOUSEKEYS = 55,SPI_GETSHOWSOUNDS = 56,SPI_SETSHOWSOUNDS = 57,SPI_GETSTICKYKEYS = 58,SPI_SETSTICKYKEYS = 59,SPI_GETACCESSTIMEOUT = 60,SPI_SETACCESSTIMEOUT = 61,SPI_GETSERIALKEYS = 62,SPI_SETSERIALKEYS = 63,SPI_GETSOUNDSENTRY = 64,SPI_SETSOUNDSENTRY = 65,SPI_GETMOUSEHOVERWIDTH = 98,SPI_SETMOUSEHOVERWIDTH = 99,SPI_GETMOUSEHOVERHEIGHT = 100,SPI_SETMOUSEHOVERHEIGHT = 101,SPI_GETMOUSEHOVERTIME = 102,SPI_SETMOUSEHOVERTIME = 103,SPI_GETWHEELSCROLLLINES = 104,SPI_SETWHEELSCROLLLINES = 105,SPI_GETSHOWIMEUI = 110,SPI_SETSHOWIMEUI = 111,SPI_GETMOUSESPEED = 112,SPI_SETMOUSESPEED = 113,SPI_GETSCREENSAVERRUNNING = 114,SPI_GETACTIVEWINDOWTRACKING = 4096,SPI_SETACTIVEWINDOWTRACKING = 4097,SPI_GETMENUANIMATION = 4098,SPI_SETMENUANIMATION = 4099,SPI_GETCOMBOBOXANIMATION = 4100,SPI_SETCOMBOBOXANIMATION = 4101,SPI_GETLISTBOXSMOOTHSCROLLING = 4102,SPI_SETLISTBOXSMOOTHSCROLLING = 4103,SPI_GETGRADIENTCAPTIONS = 4104,SPI_SETGRADIENTCAPTIONS = 4105,SPI_GETMENUUNDERLINES = 4106,SPI_SETMENUUNDERLINES = 4107,SPI_GETACTIVEWNDTRKZORDER = 4108,SPI_SETACTIVEWNDTRKZORDER = 4109,SPI_GETHOTTRACKING = 4110,SPI_SETHOTTRACKING = 4111,SPI_GETFOREGROUNDLOCKTIMEOUT = 8192,SPI_SETFOREGROUNDLOCKTIMEOUT = 8193,SPI_GETACTIVEWNDTRKTIMEOUT = 8194,SPI_SETACTIVEWNDTRKTIMEOUT = 8195,SPI_GETFOREGROUNDFLASHCOUNT = 8196,SPI_SETFOREGROUNDFLASHCOUNT = 8197,};
enum MACRO_SPQ {SPQ_SCAN_FILE_PRESENCE = 0x1,SPQ_SCAN_FILE_VALIDITY = 0x2,SPQ_SCAN_USE_CALLBACK = 0x4,SPQ_SCAN_INFORM_USER = 0x10,SPQ_DELAYED_COPY = 0x1,};
enum MACRO_SQL {SQL_MAX_NUMERIC_LEN = 16,SQL_NULL_DATA = -1,SQL_DATA_AT_EXEC = -2,SQL_SUCCESS = 0,SQL_SUCCESS_WITH_INFO = 1,SQL_NO_DATA = 100,SQL_ERROR = -1,SQL_INVALID_HANDLE = -2,SQL_STILL_EXECUTING = 2,SQL_NEED_DATA = 99,SQL_NTS = -3,SQL_NTSL = -3,SQL_MAX_MESSAGE_LENGTH = 512,SQL_DATE_LEN = 10,SQL_TIME_LEN = 8,SQL_TIMESTAMP_LEN = 19,SQL_HANDLE_ENV = 1,SQL_HANDLE_DBC = 2,SQL_HANDLE_STMT = 3,SQL_HANDLE_DESC = 4,SQL_ATTR_OUTPUT_NTS = 10001,SQL_ATTR_AUTO_IPD = 10001,SQL_ATTR_METADATA_ID = 10014,SQL_ATTR_APP_ROW_DESC = 10010,SQL_ATTR_APP_PARAM_DESC = 10011,SQL_ATTR_IMP_ROW_DESC = 10012,SQL_ATTR_IMP_PARAM_DESC = 10013,SQL_ATTR_CURSOR_SCROLLABLE = -1,SQL_ATTR_CURSOR_SENSITIVITY = -2,SQL_NONSCROLLABLE = 0,SQL_SCROLLABLE = 1,SQL_DESC_COUNT = 1001,SQL_DESC_TYPE = 1002,SQL_DESC_LENGTH = 1003,SQL_DESC_OCTET_LENGTH_PTR = 1004,SQL_DESC_PRECISION = 1005,SQL_DESC_SCALE = 1006,SQL_DESC_DATETIME_INTERVAL_CODE = 1007,SQL_DESC_NULLABLE = 1008,SQL_DESC_INDICATOR_PTR = 1009,SQL_DESC_DATA_PTR = 1010,SQL_DESC_NAME = 1011,SQL_DESC_UNNAMED = 1012,SQL_DESC_OCTET_LENGTH = 1013,SQL_DESC_ALLOC_TYPE = 1099,SQL_DIAG_RETURNCODE = 1,SQL_DIAG_NUMBER = 2,SQL_DIAG_ROW_COUNT = 3,SQL_DIAG_SQLSTATE = 4,SQL_DIAG_NATIVE = 5,SQL_DIAG_MESSAGE_TEXT = 6,SQL_DIAG_DYNAMIC_FUNCTION = 7,SQL_DIAG_CLASS_ORIGIN = 8,SQL_DIAG_SUBCLASS_ORIGIN = 9,SQL_DIAG_CONNECTION_NAME = 10,SQL_DIAG_SERVER_NAME = 11,SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12,SQL_DIAG_ALTER_DOMAIN = 3,SQL_DIAG_ALTER_TABLE = 4,SQL_DIAG_CALL = 7,SQL_DIAG_CREATE_ASSERTION = 6,SQL_DIAG_CREATE_CHARACTER_SET = 8,SQL_DIAG_CREATE_COLLATION = 10,SQL_DIAG_CREATE_DOMAIN = 23,SQL_DIAG_CREATE_INDEX = -1,SQL_DIAG_CREATE_SCHEMA = 64,SQL_DIAG_CREATE_TABLE = 77,SQL_DIAG_CREATE_TRANSLATION = 79,SQL_DIAG_CREATE_VIEW = 84,SQL_DIAG_DELETE_WHERE = 19,SQL_DIAG_DROP_ASSERTION = 24,SQL_DIAG_DROP_CHARACTER_SET = 25,SQL_DIAG_DROP_COLLATION = 26,SQL_DIAG_DROP_DOMAIN = 27,SQL_DIAG_DROP_INDEX = -2,SQL_DIAG_DROP_SCHEMA = 31,SQL_DIAG_DROP_TABLE = 32,SQL_DIAG_DROP_TRANSLATION = 33,SQL_DIAG_DROP_VIEW = 36,SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38,SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81,SQL_DIAG_GRANT = 48,SQL_DIAG_INSERT = 50,SQL_DIAG_REVOKE = 59,SQL_DIAG_SELECT_CURSOR = 85,SQL_DIAG_UNKNOWN_STATEMENT = 0,SQL_DIAG_UPDATE_WHERE = 82,SQL_UNKNOWN_TYPE = 0,SQL_CHAR = 1,SQL_NUMERIC = 2,SQL_DECIMAL = 3,SQL_INTEGER = 4,SQL_SMALLINT = 5,SQL_FLOAT = 6,SQL_REAL = 7,SQL_DOUBLE = 8,SQL_DATETIME = 9,SQL_VARCHAR = 12,SQL_TYPE_DATE = 91,SQL_TYPE_TIME = 92,SQL_TYPE_TIMESTAMP = 93,SQL_UNSPECIFIED = 0,SQL_INSENSITIVE = 1,SQL_SENSITIVE = 2,SQL_ALL_TYPES = 0,SQL_DEFAULT = 99,SQL_ARD_TYPE = -99,SQL_CODE_DATE = 1,SQL_CODE_TIME = 2,SQL_CODE_TIMESTAMP = 3,SQL_FALSE = 0,SQL_TRUE = 1,SQL_NO_NULLS = 0,SQL_NULLABLE = 1,SQL_NULLABLE_UNKNOWN = 2,SQL_PRED_NONE = 0,SQL_PRED_CHAR = 1,SQL_PRED_BASIC = 2,SQL_NAMED = 0,SQL_UNNAMED = 1,SQL_DESC_ALLOC_AUTO = 1,SQL_DESC_ALLOC_USER = 2,SQL_CLOSE = 0,SQL_DROP = 1,SQL_UNBIND = 2,SQL_RESET_PARAMS = 3,SQL_FETCH_NEXT = 1,SQL_FETCH_FIRST = 2,SQL_FETCH_LAST = 3,SQL_FETCH_PRIOR = 4,SQL_FETCH_ABSOLUTE = 5,SQL_FETCH_RELATIVE = 6,SQL_COMMIT = 0,SQL_ROLLBACK = 1,SQL_NULL_HENV = 0,SQL_NULL_HDBC = 0,SQL_NULL_HSTMT = 0,SQL_NULL_HDESC = 0,SQL_NULL_HANDLE = 0,SQL_SCOPE_CURROW = 0,SQL_SCOPE_TRANSACTION = 1,SQL_SCOPE_SESSION = 2,SQL_PC_UNKNOWN = 0,SQL_PC_NON_PSEUDO = 1,SQL_PC_PSEUDO = 2,SQL_ROW_IDENTIFIER = 1,SQL_INDEX_UNIQUE = 0,SQL_INDEX_ALL = 1,SQL_INDEX_CLUSTERED = 1,SQL_INDEX_HASHED = 2,SQL_INDEX_OTHER = 3,SQL_API_SQLALLOCCONNECT = 1,SQL_API_SQLALLOCENV = 2,SQL_API_SQLALLOCHANDLE = 1001,SQL_API_SQLALLOCSTMT = 3,SQL_API_SQLBINDCOL = 4,SQL_API_SQLBINDPARAM = 1002,SQL_API_SQLCANCEL = 5,SQL_API_SQLCLOSECURSOR = 1003,SQL_API_SQLCOLATTRIBUTE = 6,SQL_API_SQLCOLUMNS = 40,SQL_API_SQLCONNECT = 7,SQL_API_SQLCOPYDESC = 1004,SQL_API_SQLDATASOURCES = 57,SQL_API_SQLDESCRIBECOL = 8,SQL_API_SQLDISCONNECT = 9,SQL_API_SQLENDTRAN = 1005,SQL_API_SQLERROR = 10,SQL_API_SQLEXECDIRECT = 11,SQL_API_SQLEXECUTE = 12,SQL_API_SQLFETCH = 13,SQL_API_SQLFETCHSCROLL = 1021,SQL_API_SQLFREECONNECT = 14,SQL_API_SQLFREEENV = 15,SQL_API_SQLFREEHANDLE = 1006,SQL_API_SQLFREESTMT = 16,SQL_API_SQLGETCONNECTATTR = 1007,SQL_API_SQLGETCONNECTOPTION = 42,SQL_API_SQLGETCURSORNAME = 17,SQL_API_SQLGETDATA = 43,SQL_API_SQLGETDESCFIELD = 1008,SQL_API_SQLGETDESCREC = 1009,SQL_API_SQLGETDIAGFIELD = 1010,SQL_API_SQLGETDIAGREC = 1011,SQL_API_SQLGETENVATTR = 1012,SQL_API_SQLGETFUNCTIONS = 44,SQL_API_SQLGETINFO = 45,SQL_API_SQLGETSTMTATTR = 1014,SQL_API_SQLGETSTMTOPTION = 46,SQL_API_SQLGETTYPEINFO = 47,SQL_API_SQLNUMRESULTCOLS = 18,SQL_API_SQLPARAMDATA = 48,SQL_API_SQLPREPARE = 19,SQL_API_SQLPUTDATA = 49,SQL_API_SQLROWCOUNT = 20,SQL_API_SQLSETCONNECTATTR = 1016,SQL_API_SQLSETCONNECTOPTION = 50,SQL_API_SQLSETCURSORNAME = 21,SQL_API_SQLSETDESCFIELD = 1017,SQL_API_SQLSETDESCREC = 1018,SQL_API_SQLSETENVATTR = 1019,SQL_API_SQLSETPARAM = 22,SQL_API_SQLSETSTMTATTR = 1020,SQL_API_SQLSETSTMTOPTION = 51,SQL_API_SQLSPECIALCOLUMNS = 52,SQL_API_SQLSTATISTICS = 53,SQL_API_SQLTABLES = 54,SQL_API_SQLTRANSACT = 23,SQL_MAX_DRIVER_CONNECTIONS = 0,SQL_MAXIMUM_DRIVER_CONNECTIONS = 0,SQL_MAX_CONCURRENT_ACTIVITIES = 1,SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1,SQL_DATA_SOURCE_NAME = 2,SQL_FETCH_DIRECTION = 8,SQL_SERVER_NAME = 13,SQL_SEARCH_PATTERN_ESCAPE = 14,SQL_DBMS_NAME = 17,SQL_DBMS_VER = 18,SQL_ACCESSIBLE_TABLES = 19,SQL_ACCESSIBLE_PROCEDURES = 20,SQL_CURSOR_COMMIT_BEHAVIOR = 23,SQL_DATA_SOURCE_READ_ONLY = 25,SQL_DEFAULT_TXN_ISOLATION = 26,SQL_IDENTIFIER_CASE = 28,SQL_IDENTIFIER_QUOTE_CHAR = 29,SQL_MAX_COLUMN_NAME_LEN = 30,SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30,SQL_MAX_CURSOR_NAME_LEN = 31,SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31,SQL_MAX_SCHEMA_NAME_LEN = 32,SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32,SQL_MAX_CATALOG_NAME_LEN = 34,SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34,SQL_MAX_TABLE_NAME_LEN = 35,SQL_SCROLL_CONCURRENCY = 43,SQL_TXN_CAPABLE = 46,SQL_TRANSACTION_CAPABLE = 46,SQL_USER_NAME = 47,SQL_TXN_ISOLATION_OPTION = 72,SQL_TRANSACTION_ISOLATION_OPTION = 72,SQL_INTEGRITY = 73,SQL_GETDATA_EXTENSIONS = 81,SQL_NULL_COLLATION = 85,SQL_ALTER_TABLE = 86,SQL_ORDER_BY_COLUMNS_IN_SELECT = 90,SQL_SPECIAL_CHARACTERS = 94,SQL_MAX_COLUMNS_IN_GROUP_BY = 97,SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97,SQL_MAX_COLUMNS_IN_INDEX = 98,SQL_MAXIMUM_COLUMNS_IN_INDEX = 98,SQL_MAX_COLUMNS_IN_ORDER_BY = 99,SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99,SQL_MAX_COLUMNS_IN_SELECT = 100,SQL_MAXIMUM_COLUMNS_IN_SELECT = 100,SQL_MAX_COLUMNS_IN_TABLE = 101,SQL_MAX_INDEX_SIZE = 102,SQL_MAXIMUM_INDEX_SIZE = 102,SQL_MAX_ROW_SIZE = 104,SQL_MAXIMUM_ROW_SIZE = 104,SQL_MAX_STATEMENT_LEN = 105,SQL_MAXIMUM_STATEMENT_LENGTH = 105,SQL_MAX_TABLES_IN_SELECT = 106,SQL_MAXIMUM_TABLES_IN_SELECT = 106,SQL_MAX_USER_NAME_LEN = 107,SQL_MAXIMUM_USER_NAME_LENGTH = 107,SQL_OJ_CAPABILITIES = 115,SQL_OUTER_JOIN_CAPABILITIES = 115,SQL_XOPEN_CLI_YEAR = 10000,SQL_CURSOR_SENSITIVITY = 10001,SQL_DESCRIBE_PARAMETER = 10002,SQL_CATALOG_NAME = 10003,SQL_COLLATION_SEQ = 10004,SQL_MAX_IDENTIFIER_LEN = 10005,SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005,SQL_AT_ADD_COLUMN = 1,SQL_AT_DROP_COLUMN = 2,SQL_AT_ADD_CONSTRAINT = 8,SQL_AM_NONE = 0,SQL_AM_CONNECTION = 1,SQL_AM_STATEMENT = 2,SQL_CB_DELETE = 0,SQL_CB_CLOSE = 1,SQL_CB_PRESERVE = 2,SQL_FD_FETCH_NEXT = 1,SQL_FD_FETCH_FIRST = 2,SQL_FD_FETCH_LAST = 4,SQL_FD_FETCH_PRIOR = 8,SQL_FD_FETCH_ABSOLUTE = 16,SQL_FD_FETCH_RELATIVE = 32,SQL_GD_ANY_COLUMN = 1,SQL_GD_ANY_ORDER = 2,SQL_IC_UPPER = 1,SQL_IC_LOWER = 2,SQL_IC_SENSITIVE = 3,SQL_IC_MIXED = 4,SQL_OJ_LEFT = 1,SQL_OJ_RIGHT = 2,SQL_OJ_FULL = 4,SQL_OJ_NESTED = 8,SQL_OJ_NOT_ORDERED = 16,SQL_OJ_INNER = 32,SQL_OJ_ALL_COMPARISON_OPS = 64,SQL_SCCO_READ_ONLY = 1,SQL_SCCO_LOCK = 2,SQL_SCCO_OPT_ROWVER = 4,SQL_SCCO_OPT_VALUES = 8,SQL_TC_NONE = 0,SQL_TC_DML = 1,SQL_TC_ALL = 2,SQL_TC_DDL_COMMIT = 3,SQL_TC_DDL_IGNORE = 4,SQL_TXN_READ_UNCOMMITTED = 1,SQL_TRANSACTION_READ_UNCOMMITTED = 1,SQL_TXN_READ_COMMITTED = 2,SQL_TRANSACTION_READ_COMMITTED = 2,SQL_TXN_REPEATABLE_READ = 4,SQL_TRANSACTION_REPEATABLE_READ = 4,SQL_TXN_SERIALIZABLE = 8,SQL_TRANSACTION_SERIALIZABLE = 8,SQL_NC_HIGH = 0,SQL_NC_LOW = 1,};
enum MACRO_SRV {SRV_INDEFINITE_WAIT = -1,SRV_TDSV1 = 4,SRV_TDSV2 = 2,SRV_TDSV3 = 0,SRV_TDSV4 = 0,SRV_SRVV1 = 0,SRV_SRVV2 = 6,SRV_SRVV3 = 0,SRV_SRVV4 = 0,SRV_MAXNAME = 30,SRV_MAXREM = 255,SRV_MAXFILENAME = 64,SRV_PKTLEN = 6,SRV_HOSTIDLEN = 8,};
enum MACRO_SSA {SSA_PENTIP = 1,SSA_PENTIPCLASS = 2,SSA_USER = 3,SSA_USERCLASS = 4,SSA_TIME = 5,SSA_SELECT = 6,SSA_DOWN = 7,SSA_PENTIPTABLE = 8,SSA_USERTABLE = 9,};
enum MACRO_SSF {SSF_SOUNDSENTRYON = 0x1,SSF_AVAILABLE = 0x2,SSF_INDICATOR = 0x4,};
enum MACRO_SSH {SSH_RD = 1,SSH_RU = 2,SSH_LD = 3,SSH_LU = 4,SSH_DL = 5,SSH_DR = 6,SSH_UL = 7,SSH_UR = 8,};
enum MACRO_STD {STD_INPUT_HANDLE = 4294967286,STD_OUTPUT_HANDLE = 4294967285,STD_ERROR_HANDLE = 4294967284,};
enum MACRO_STG {STG_TOEND = 0xFFFFFFFF,STG_LAYOUT_SEQUENTIAL = 0x0,STG_LAYOUT_INTERLEAVED = 0x1,};
enum MACRO_STM {STM_ONLY_THIS_INTERFACE = 0x1,STM_ONLY_THIS_PROTOCOL = 0x2,STM_ONLY_THIS_TYPE = 0x4,STM_ONLY_THIS_NAME = 0x8,STM_ORDER_BY_TYPE_AND_NAME = 0x0,STM_ORDER_BY_INTERFACE_TYPE_NAME = 0x1,};
enum MACRO_STN {STN_CLICKED = 0,STN_DBLCLK = 1,STN_ENABLE = 2,STN_DISABLE = 3,};
enum MACRO_SUB {SUB_OBJECTS_ONLY_INHERIT = 0x1,SUB_CONTAINERS_ONLY_INHERIT = 0x2,SUB_CONTAINERS_AND_OBJECTS_INHERIT = 0x3,};
enum MACRO_SUF {SUF_FIRSTTIME = 0x1,SUF_EXPRESS = 0x2,SUF_BATCHINF = 0x4,SUF_CLEAN = 0x8,SUF_INSETUP = 0x10,SUF_NETSETUP = 0x20,SUF_NETHDBOOT = 0x40,SUF_NETRPLBOOT = 0x80,SUF_SBSCOPYOK = 0x100,};
enum MACRO_SWP {SWP_NOSIZE = 0x1,SWP_NOMOVE = 0x2,SWP_NOZORDER = 0x4,SWP_NOREDRAW = 0x8,SWP_NOACTIVATE = 0x10,SWP_FRAMECHANGED = 0x20,SWP_SHOWWINDOW = 0x40,SWP_HIDEWINDOW = 0x80,SWP_NOCOPYBITS = 0x100,SWP_NOOWNERZORDER = 0x200,SWP_NOSENDCHANGING = 0x400,SWP_DRAWFRAME = 0x20,SWP_NOREPOSITION = 0x200,SWP_DEFERERASE = 0x2000,SWP_ASYNCWINDOWPOS = 0x4000,};
enum MACRO_SYS {SYS_OPEN = 20,};
enum MACRO_SYV {SYV_NULL = 0x0,SYV_UNKNOWN = 0x1,SYV_EMPTY = 0x3,SYV_BEGINOR = 0x10,SYV_ENDOR = 0x11,SYV_OR = 0x12,SYV_SOFTNEWLINE = 0x20,SYV_SPACENULL = 0x10000,SYV_SELECTFIRST = 0x2FFC0,SYV_LASSO = 0x2FFC1,SYV_SELECTLEFT = 0x2FFC2,SYV_SELECTRIGHT = 0x2FFC3,SYV_SELECTLAST = 0x2FFCF,SYV_CLEARCHAR = 0x2FFD2,SYV_HELP = 0x2FFD3,SYV_KKCONVERT = 0x2FFD4,SYV_CLEAR = 0x2FFD5,SYV_INSERT = 0x2FFD6,SYV_CONTEXT = 0x2FFD7,SYV_EXTENDSELECT = 0x2FFD8,SYV_UNDO = 0x2FFD9,SYV_COPY = 0x2FFDA,SYV_CUT = 0x2FFDB,SYV_PASTE = 0x2FFDC,SYV_CLEARWORD = 0x2FFDD,SYV_USER = 0x2FFDE,SYV_CORRECT = 0x2FFDF,SYV_BACKSPACE = 0x20008,SYV_TAB = 0x20009,SYV_RETURN = 0x2000D,SYV_SPACE = 0x20020,SYV_APPGESTUREMASK = 0x20000,SYV_CIRCLEUPA = 0x224B6,SYV_CIRCLEUPZ = 0x224CF,SYV_CIRCLELOA = 0x224D0,SYV_CIRCLELOZ = 0x224E9,SYV_SHAPELINE = 0x40001,SYV_SHAPEELLIPSE = 0x40002,SYV_SHAPERECT = 0x40003,SYV_SHAPEMIN = 0x40001,SYV_SHAPEMAX = 0x40003,};
enum MACRO_TAD {TAD_ALL_ROWS = 1,};
enum MACRO_TBL {TBL_ALL_COLUMNS = 0x1,TBL_LEAF_ROW = 0x1,TBL_EMPTY_CATEGORY = 0x2,TBL_EXPANDED_CATEGORY = 0x3,TBL_COLLAPSED_CATEGORY = 0x4,TBL_NOWAIT = 0x1,TBL_ASYNC = 0x1,TBL_BATCH = 0x2,};
enum MACRO_TBN {TBN_FIRST = -700,TBN_LAST = -720,};
enum MACRO_TBS {TBS_AUTOTICKS = 0x1,TBS_VERT = 0x2,TBS_HORZ = 0x0,TBS_TOP = 0x4,TBS_BOTTOM = 0x0,TBS_LEFT = 0x4,TBS_RIGHT = 0x0,TBS_BOTH = 0x8,TBS_NOTICKS = 0x10,TBS_ENABLESELRANGE = 0x20,TBS_FIXEDLENGTH = 0x40,TBS_NOTHUMB = 0x80,TBS_TOOLTIPS = 0x100,};
enum MACRO_TCI {TCI_SRCCHARSET = 1,TCI_SRCCODEPAGE = 2,TCI_SRCFONTSIG = 3,};
enum MACRO_TCM {TCM_GETIMAGELIST = 4866,TCM_SETIMAGELIST = 4867,TCM_GETITEMCOUNT = 4868,};
enum MACRO_TCN {TCN_FIRST = -550,TCN_LAST = -580,};
enum MACRO_TCP {TCP_NODELAY = 0x1,};
enum MACRO_TCS {TCS_SCROLLOPPOSITE = 0x1,TCS_BOTTOM = 0x2,TCS_RIGHT = 0x2,TCS_MULTISELECT = 0x4,TCS_FLATBUTTONS = 0x8,TCS_FORCEICONLEFT = 0x10,TCS_FORCELABELLEFT = 0x20,TCS_HOTTRACK = 0x40,TCS_VERTICAL = 0x80,TCS_TABS = 0x0,TCS_BUTTONS = 0x100,TCS_SINGLELINE = 0x0,TCS_MULTILINE = 0x200,TCS_RIGHTJUSTIFY = 0x0,TCS_FIXEDWIDTH = 0x400,TCS_RAGGEDRIGHT = 0x800,TCS_FOCUSONBUTTONDOWN = 0x1000,TCS_OWNERDRAWFIXED = 0x2000,TCS_TOOLTIPS = 0x4000,TCS_FOCUSNEVER = 0x8000,TCS_EX_FLATSEPARATORS = 0x1,TCS_EX_REGISTERDROP = 0x2,};
enum MACRO_TIP {TIP_ERASECOLOR = 1,};
enum MACRO_TKF {TKF_TOGGLEKEYSON = 0x1,TKF_AVAILABLE = 0x2,TKF_HOTKEYACTIVE = 0x4,TKF_CONFIRMHOTKEY = 0x8,TKF_HOTKEYSOUND = 0x10,TKF_INDICATOR = 0x20,};
enum MACRO_TLS {TLS_MINIMUM_AVAILABLE = 64,};
enum MACRO_TME {TME_HOVER = 0x1,TME_LEAVE = 0x2,TME_QUERY = 0x40000000,TME_CANCEL = 0x80000000,};
enum MACRO_TMP {TMP_MAX = 32767,};
enum MACRO_TNS {TNS_TYPE_NATIONAL = 0x40,TNS_PLAN_CARRIER_ID_CODE = 0x1,};
enum MACRO_TOK {TOK_GROUP = 1,TOK_UNGROUP = 2,TOK_DELETE = 3,TOK_GROUP_NOT = 4,};
enum MACRO_TOO {TOO_MANY_VALUES = 0x4000F116,};
enum MACRO_TPD {TPD_RECALCSIZE = 0x0,TPD_USER = 0x80,TPD_TIME = 0x100,TPD_UPPOINTS = 0x200,TPD_COLLINEAR = 0x400,TPD_COLINEAR = 0x400,TPD_PENINFO = 0x800,TPD_PHW = 0x1000,TPD_OEMDATA = 0x1000,TPD_EMPTYSTROKES = 0x2000,TPD_EVERYTHING = 0x3FFF,};
enum MACRO_TPM {TPM_LEFTBUTTON = 0x0,TPM_RIGHTBUTTON = 0x2,TPM_LEFTALIGN = 0x0,TPM_CENTERALIGN = 0x4,TPM_RIGHTALIGN = 0x8,TPM_TOPALIGN = 0x0,TPM_VCENTERALIGN = 0x10,TPM_BOTTOMALIGN = 0x20,TPM_HORIZONTAL = 0x0,TPM_VERTICAL = 0x40,TPM_NONOTIFY = 0x80,TPM_RETURNCMD = 0x100,TPM_RECURSE = 0x1,};
enum MACRO_TPT {TPT_CLOSEST = 0x1,TPT_INTERSECTINK = 0x2,TPT_TEXTUAL = 0x4,TPT_DEFAULT = 0x7,};
enum MACRO_TTF {TTF_IDISHWND = 0x1,TTF_CENTERTIP = 0x2,TTF_RTLREADING = 0x4,TTF_SUBCLASS = 0x10,TTF_TRACK = 0x20,TTF_ABSOLUTE = 0x80,TTF_TRANSPARENT = 0x100,TTF_DI_SETITEM = 0x8000,};
enum MACRO_TTM {TTM_ADDTOOL = 1028,TTM_DELTOOL = 1029,TTM_NEWTOOLRECT = 1030,TTM_GETTOOLINFO = 1032,TTM_SETTOOLINFO = 1033,TTM_HITTEST = 1034,TTM_GETTEXT = 1035,TTM_UPDATETIPTEXT = 1036,TTM_ENUMTOOLS = 1038,TTM_GETCURRENTTOOL = 1039,};
enum MACRO_TTN {TTN_FIRST = -520,TTN_LAST = -549,};
enum MACRO_TTS {TTS_ALWAYSTIP = 0x1,TTS_NOPREFIX = 0x2,};
enum MACRO_TVC {TVC_UNKNOWN = 0x0,TVC_BYMOUSE = 0x1,TVC_BYKEYBOARD = 0x2,};
enum MACRO_TVE {TVE_COLLAPSE = 0x1,TVE_EXPAND = 0x2,TVE_TOGGLE = 0x3,TVE_EXPANDPARTIAL = 0x4000,TVE_COLLAPSERESET = 0x8000,};
enum MACRO_TVI {TVI_ROOT = 0xFFFF0000,TVI_FIRST = 0xFFFF0001,TVI_LAST = 0xFFFF0002,TVI_SORT = 0xFFFF0003,};
enum MACRO_TVM {TVM_INSERTITEMA = 4352,TVM_INSERTITEMW = 4402,TVM_INSERTITEM = 4352,TVM_DELETEITEM = 4353,TVM_EXPAND = 4354,};
enum MACRO_TVN {TVN_FIRST = -400,TVN_LAST = -499,};
enum MACRO_TVS {TVS_HASBUTTONS = 0x1,TVS_HASLINES = 0x2,TVS_LINESATROOT = 0x4,TVS_EDITLABELS = 0x8,TVS_DISABLEDRAGDROP = 0x10,TVS_SHOWSELALWAYS = 0x20,TVS_RTLREADING = 0x40,TVS_NOTOOLTIPS = 0x80,TVS_CHECKBOXES = 0x100,TVS_TRACKSELECT = 0x200,TVS_SINGLEEXPAND = 0x400,TVS_INFOTIP = 0x800,TVS_FULLROWSELECT = 0x1000,TVS_NOSCROLL = 0x2000,TVS_NONEVENHEIGHT = 0x4000,};
enum MACRO_TWO {TWO_I4_LSB_HI = 8,TWO_I4_LSB_LO = 9,};
enum MACRO_UAS {UAS_ROLE_STANDALONE = 0,UAS_ROLE_MEMBER = 1,UAS_ROLE_BACKUP = 2,UAS_ROLE_PRIMARY = 3,};
enum MACRO_UDN {UDN_FIRST = -721,UDN_LAST = -740,};
enum MACRO_UDP {UDP_HEADER_LEN = 8,};
enum MACRO_UDS {UDS_WRAP = 0x1,UDS_SETBUDDYINT = 0x2,UDS_ALIGNRIGHT = 0x4,UDS_ALIGNLEFT = 0x8,UDS_AUTOBUDDY = 0x10,UDS_ARROWKEYS = 0x20,UDS_HORZ = 0x40,UDS_NOTHOUSANDS = 0x80,UDS_HOTTRACK = 0x100,};
enum MACRO_UOI {UOI_FLAGS = 1,UOI_NAME = 2,UOI_TYPE = 3,UOI_USER_SID = 4,};
enum MACRO_URL {URL_E_INVALID_SYNTAX = 0x80041001,URL_E_UNREGISTERED_PROTOCOL = 0x80041002,};
enum MACRO_USE {USE_VA_ADDR = 0x20,USE_QWORD_JUMP = 0x40,};
enum MACRO_USN {USN_PAGE_SIZE = 0x1000,USN_REASON_DATA_OVERWRITE = 0x1,USN_REASON_DATA_EXTEND = 0x2,USN_REASON_DATA_TRUNCATION = 0x4,USN_REASON_NAMED_DATA_OVERWRITE = 0x10,USN_REASON_NAMED_DATA_EXTEND = 0x20,USN_REASON_NAMED_DATA_TRUNCATION = 0x40,USN_REASON_FILE_CREATE = 0x100,USN_REASON_FILE_DELETE = 0x200,USN_REASON_PROPERTY_CHANGE = 0x400,USN_REASON_SECURITY_CHANGE = 0x800,USN_REASON_RENAME_OLD_NAME = 0x1000,USN_REASON_RENAME_NEW_NAME = 0x2000,USN_REASON_INDEXABLE_CHANGE = 0x4000,USN_REASON_BASIC_INFO_CHANGE = 0x8000,USN_REASON_HARD_LINK_CHANGE = 0x10000,USN_REASON_COMPRESSION_CHANGE = 0x20000,USN_REASON_ENCRYPTION_CHANGE = 0x40000,USN_REASON_OBJECT_ID_CHANGE = 0x80000,USN_REASON_REPARSE_POINT_CHANGE = 0x100000,USN_REASON_MOUNT_TABLE_CHANGE = 0x200000,USN_REASON_CLOSE = 0x80000000,};
enum MACRO_VAR {VAR_TIMEVALUEONLY = 0x1,VAR_DATEVALUEONLY = 0x2,VAR_VALIDDATE = 0x4,VAR_CALENDAR_HIJRI = 0x8,VAR_LOCALBOOL = 0x10,VAR_FORMAT_NOSUBSTITUTE = 0x20,VAR_FOURDIGITYEARS = 0x40,};
enum MACRO_VER {VER_PLATFORM_WIN32s = 0,VER_PLATFORM_WIN32_WINDOWS = 1,VER_PLATFORM_WIN32_NT = 2,};
enum MACRO_VFF {VFF_CURNEDEST = 0x1,VFF_FILEINUSE = 0x2,VFF_BUFFTOOSMALL = 0x4,};
enum MACRO_VFT {VFT_UNKNOWN = 0x0,VFT_APP = 0x1,VFT_DLL = 0x2,VFT_DRV = 0x3,VFT_FONT = 0x4,VFT_VXD = 0x5,VFT_STATIC_LIB = 0x7,};
enum MACRO_VFW {VFW_FIRST_CODE = 0x200,};
enum MACRO_VIF {VIF_TEMPFILE = 0x1,VIF_MISMATCH = 0x2,VIF_SRCOLD = 0x4,VIF_DIFFLANG = 0x8,VIF_DIFFCODEPG = 0x10,VIF_DIFFTYPE = 0x20,VIF_WRITEPROT = 0x40,VIF_FILEINUSE = 0x80,VIF_OUTOFSPACE = 0x100,VIF_ACCESSVIOLATION = 0x200,VIF_SHARINGVIOLATION = 0x400,VIF_CANNOTCREATE = 0x800,VIF_CANNOTDELETE = 0x1000,VIF_CANNOTRENAME = 0x2000,VIF_CANNOTDELETECUR = 0x4000,VIF_OUTOFMEMORY = 0x8000,VIF_CANNOTREADSRC = 0x10000,VIF_CANNOTREADDST = 0x20000,VIF_BUFFTOOSMALL = 0x40000,};
enum MACRO_VOS {VOS_UNKNOWN = 0x0,VOS_DOS = 0x10000,VOS_OS216 = 0x20000,VOS_OS232 = 0x30000,VOS_NT = 0x40000,VOS__BASE = 0x0,VOS__WINDOWS16 = 0x1,VOS__PM16 = 0x2,VOS__PM32 = 0x3,VOS__WINDOWS32 = 0x4,VOS_DOS_WINDOWS16 = 0x10001,VOS_DOS_WINDOWS32 = 0x10004,VOS_OS216_PM16 = 0x20002,VOS_OS232_PM32 = 0x30003,VOS_NT_WINDOWS32 = 0x40004,};
enum MACRO_VPF {VPF_SELECTRELATIVE = 0x1,VPF_DISABLERELATIVE = 0x2,VPF_DISABLESCALE = 0x4,};
enum MACRO_VTA {VTA_BASELINE = 24,VTA_LEFT = 8,VTA_RIGHT = 0,VTA_CENTER = 6,VTA_BOTTOM = 2,VTA_TOP = 0,};
enum MACRO_VVM {VVM_VOICE = 0x1,VVM_DATA = 0x2,VVM_SEND = 0x4,VVM_RECV = 0x8,};
enum MACRO_WAM {WAM_MD_ID_BEGIN_RESERVED = 0x7500,WAM_MD_ID_END_RESERVED = 0x7FFF,};
enum MACRO_WBF {WBF_WORDWRAP = 0x10,WBF_WORDBREAK = 0x20,WBF_OVERFLOW = 0x40,WBF_LEVEL1 = 0x80,WBF_LEVEL2 = 0x100,WBF_CUSTOM = 0x200,};
enum MACRO_WCH {WCH_EMBEDDING = 0xFFFC,};
enum MACRO_WCL {WCL_AUTOMATED_COMMAND_LINE = 0x1,WCL_BACKGROUND_TASK = 0x3,};
enum MACRO_WCR {WCR_RECOGNAME = 0,WCR_QUERY = 1,WCR_CONFIGDIALOG = 2,WCR_DEFAULT = 3,WCR_RCCHANGE = 4,WCR_VERSION = 5,WCR_TRAIN = 6,WCR_TRAINSAVE = 7,WCR_TRAINMAX = 8,WCR_TRAINDIRTY = 9,WCR_TRAINCUSTOM = 10,WCR_QUERYLANGUAGE = 11,WCR_USERCHANGE = 12,WCR_PWVERSION = 13,WCR_GETALCPRIORITY = 14,WCR_SETALCPRIORITY = 15,WCR_GETANSISTATE = 16,WCR_SETANSISTATE = 17,WCR_GETHAND = 18,WCR_SETHAND = 19,WCR_GETDIRECTION = 20,WCR_SETDIRECTION = 21,WCR_INITRECOGNIZER = 22,WCR_CLOSERECOGNIZER = 23,WCR_PRIVATE = 1024,};
enum MACRO_WDT {WDT_INPROC_CALL = 0x48746457,WDT_REMOTE_CALL = 0x52746457,};
enum MACRO_WGL {WGL_FONT_LINES = 0,WGL_FONT_POLYGONS = 1,};
enum MACRO_WIM {WIM_OPEN = 958,WIM_CLOSE = 959,WIM_DATA = 960,};
enum MACRO_WIN {WIN_CERT_REVISION_1_0 = 0x100,WIN_CERT_REVISION_2_0 = 0x200,WIN_CERT_TYPE_X509 = 0x1,WIN_CERT_TYPE_PKCS_SIGNED_DATA = 0x2,WIN_CERT_TYPE_RESERVED_1 = 0x3,};
enum MACRO_WIZ {WIZ_CXDLG = 276,WIZ_CYDLG = 140,WIZ_CXBMP = 80,WIZ_BODYX = 92,WIZ_BODYCX = 184,};
enum MACRO_WLT {WLT_STRING = 0,WLT_STRINGTABLE = 1,WLT_EMPTY = 2,WLT_WORDLIST = 3,};
enum MACRO_WLX {WLX_VERSION_1_0 = 0x10000,WLX_VERSION_1_1 = 0x10001,WLX_CURRENT_VERSION = 0x10001,WLX_SAS_TYPE_TIMEOUT = 0x0,WLX_SAS_TYPE_CTRL_ALT_DEL = 0x1,WLX_SAS_TYPE_SCRNSVR_TIMEOUT = 0x2,WLX_SAS_TYPE_SCRNSVR_ACTIVITY = 0x3,WLX_SAS_TYPE_USER_LOGOFF = 0x4,WLX_SAS_TYPE_MAX_MSFT_VALUE = 0x7F,WLX_LOGON_OPT_NO_PROFILE = 0x1,WLX_LOGON_OPT_USE_GROUPPOLICY = 0x2,WLX_PROFILE_TYPE_V1_0 = 0x1,WLX_PROFILE_TYPE_V2_0 = 0x2,WLX_SAS_ACTION_LOGON = 0x1,WLX_SAS_ACTION_NONE = 0x2,WLX_SAS_ACTION_LOCK_WKSTA = 0x3,WLX_SAS_ACTION_LOGOFF = 0x4,WLX_SAS_ACTION_SHUTDOWN = 0x5,WLX_SAS_ACTION_PWD_CHANGED = 0x6,WLX_SAS_ACTION_TASKLIST = 0x7,WLX_SAS_ACTION_UNLOCK_WKSTA = 0x8,WLX_SAS_ACTION_FORCE_LOGOFF = 0x9,WLX_SAS_ACTION_SHUTDOWN_POWER_OFF = 0xA,WLX_SAS_ACTION_SHUTDOWN_REBOOT = 0xB,WLX_SAS_ACTION_SHUTDOWN_SLEEP = 0xC,WLX_SAS_ACTION_SHUTDOWN_SLEEP2 = 0xD,WLX_SAS_ACTION_SHUTDOWN_HIBERNATE = 0xE,WLX_DLG_SAS = 0x65,WLX_DLG_INPUT_TIMEOUT = 0x66,WLX_DLG_SCREEN_SAVER_TIMEOUT = 0x67,WLX_DLG_USER_LOGOFF = 0x68,WLX_DESKTOP_NAME = 0x1,WLX_DESKTOP_HANDLE = 0x2,WLX_CREATE_INSTANCE_ONLY = 0x1,WLX_CREATE_USER = 0x2,};
enum MACRO_WOM {WOM_OPEN = 955,WOM_CLOSE = 956,WOM_DONE = 957,};
enum MACRO_WOW {WOW_SYSTEM = 0x1,};
enum MACRO_WPF {WPF_SETMINPOSITION = 0x1,WPF_RESTORETOMAXIMIZED = 0x2,};
enum MACRO_WPP {WPP_ERROR_FIRST = 0x40042380,WPP_POST_POSTING_URL_ERROR = 0xC0042381,WPP_POST_POSTING_SERVER_ERROR = 0xC0042382,WPP_POST_POSTING_NO_RESPONSE_ERROR = 0xC0042383,WPP_ERROR_LAST = 0x400423FF,};
enum MACRO_WSA {WSA_E_NO_MORE = 10110,WSA_E_CANCELLED = 10111,};
enum MACRO_WSB {WSB_PROP_CYVSCROLL = 0x1,WSB_PROP_CXHSCROLL = 0x2,WSB_PROP_CYHSCROLL = 0x4,WSB_PROP_CXVSCROLL = 0x8,WSB_PROP_CXHTHUMB = 0x10,WSB_PROP_CYVTHUMB = 0x20,WSB_PROP_VBKGCOLOR = 0x40,WSB_PROP_HBKGCOLOR = 0x80,WSB_PROP_VSTYLE = 0x100,WSB_PROP_HSTYLE = 0x200,WSB_PROP_WINSTYLE = 0x400,WSB_PROP_PALETTE = 0x800,WSB_PROP_MASK = 0xFFF,};
enum MACRO_WSF {WSF_VISIBLE = 0x1,};
enum MACRO_WSS {WSS_OPERATION_IN_PROGRESS = 0x103,};
enum MACRO_WTD {WTD_UI_ALL = 1,WTD_UI_NONE = 2,WTD_UI_NOBAD = 3,WTD_UI_NOGOOD = 4,WTD_REVOKE_NONE = 0,WTD_REVOKE_WHOLECHAIN = 1,WTD_CHOICE_FILE = 1,WTD_CHOICE_CATALOG = 2,WTD_CHOICE_BLOB = 3,WTD_CHOICE_SIGNER = 4,WTD_CHOICE_CERT = 5,WTD_STATEACTION_OPEN = 1,WTD_STATEACTION_VERIFY = 2,WTD_STATEACTION_CLOSE = 3,};
enum MACRO_WVR {WVR_ALIGNTOP = 0x10,WVR_ALIGNLEFT = 0x20,WVR_ALIGNBOTTOM = 0x40,WVR_ALIGNRIGHT = 0x80,WVR_HREDRAW = 0x100,WVR_VREDRAW = 0x200,WVR_REDRAW = 0x300,WVR_VALIDRECTS = 0x400,};
enum MACRO_XDB {XDB = 17,};
enum MACRO_XDS {XDS_PROBLEMS = 0x4000F200,};
enum MACRO_XOM {XOM_ERRORS = 0x4000F100,};
enum MACRO_XP1 {XP1_CONNECTIONLESS = 0x1,XP1_GUARANTEED_DELIVERY = 0x2,XP1_GUARANTEED_ORDER = 0x4,XP1_MESSAGE_ORIENTED = 0x8,XP1_PSEUDO_STREAM = 0x10,XP1_GRACEFUL_CLOSE = 0x20,XP1_EXPEDITED_DATA = 0x40,XP1_CONNECT_DATA = 0x80,XP1_DISCONNECT_DATA = 0x100,XP1_SUPPORT_BROADCAST = 0x200,XP1_SUPPORT_MULTIPOINT = 0x400,XP1_MULTIPOINT_CONTROL_PLANE = 0x800,XP1_MULTIPOINT_DATA_PLANE = 0x1000,XP1_QOS_SUPPORTED = 0x2000,XP1_INTERRUPT = 0x4000,XP1_UNI_SEND = 0x8000,XP1_UNI_RECV = 0x10000,XP1_IFS_HANDLES = 0x20000,XP1_PARTIAL_MESSAGE = 0x40000,};
enum MACRO_XST {XST_NULL = 0,XST_INCOMPLETE = 1,XST_CONNECTED = 2,XST_INIT1 = 3,XST_INIT2 = 4,XST_REQSENT = 5,XST_DATARCVD = 6,XST_POKESENT = 7,XST_POKEACKRCVD = 8,XST_EXECSENT = 9,XST_EXECACKRCVD = 10,XST_ADVSENT = 11,XST_UNADVSENT = 12,XST_ADVACKRCVD = 13,XST_UNADVACKRCVD = 14,XST_ADVDATASENT = 15,XST_ADVDATAACKRCVD = 16,};
enum MACRO__CN {_CN = 8,};
enum MACRO__CW {_CW_DEFAULT = 589855,};
enum MACRO__DI {_DI = 4,};
enum MACRO__DN {_DN_SAVE = 0x0,_DN_FLUSH = 0x1000000,_DN_FLUSH_OPERANDS_SAVE_RESULTS = 0x2000000,_DN_SAVE_OPERANDS_FLUSH_RESULTS = 0x3000000,};
enum MACRO__EM {_EM_INEXACT = 0x1,_EM_UNDERFLOW = 0x2,_EM_OVERFLOW = 0x4,_EM_ZERODIVIDE = 0x8,_EM_INVALID = 0x10,};
enum MACRO__IC {_IC_AFFINE = 0x40000,_IC_PROJECTIVE = 0x0,};
enum MACRO__LC {_LC_ALL = 0,_LC_COLLATE = 1,_LC_CTYPE = 2,_LC_MONETARY = 3,_LC_NUMERIC = 4,_LC_TIME = 5,_LC_MAX = 5,_LC_MESSAGE = 6,};
enum MACRO__LK {_LK_UNLCK = 0,_LK_LOCK = 1,_LK_NBLCK = 2,_LK_RLCK = 3,_LK_NBRLCK = 4,};
enum MACRO__LO {_LO = 2,_PU = 16,_SP = 64,};
enum MACRO__MB {_MB_CP_SBCS = 0,_MB_CP_OEM = -2,_MB_CP_ANSI = -3,_MB_CP_LOCALE = -4,};
enum MACRO__MS {_MS = 0x1,_MP = 0x2,_M1 = 0x4,_M2 = 0x8,_SBUP = 0x10,_SBLOW = 0x20,};
enum MACRO__PC {_PC_64 = 0x0,_PC_53 = 0x10000,_PC_24 = 0x20000,};
enum MACRO__RC {_RC_NEAR = 0x0,_RC_DOWN = 0x100,_RC_UP = 0x200,_RC_CHOP = 0x300,};
enum MACRO__SH {_SH_DENYRW = 0x10,_SH_DENYWR = 0x20,_SH_DENYRD = 0x30,_SH_DENYNO = 0x40,};
enum MACRO__SW {_SW_INEXACT = 0x1,_SW_UNDERFLOW = 0x2,_SW_OVERFLOW = 0x4,_SW_ZERODIVIDE = 0x8,_SW_INVALID = 0x10,};
enum MACRO__UP {_UP = 1,_XD = 128,};
enum MACRO__XA {_XA = 0x100,};
enum MACRO__XS {_XS = 0x0,_BB = 0x20,};
enum MACRO_rmj {rmj = 4,};
enum MACRO_rmm {rmm = 23,};
enum MACRO_rup {rup = 639,};
typedef struct _MAPIERROR MAPIERROR;
typedef struct midievent_tag MIDIEVENT;
typedef struct tagMOUSEKEYS MOUSEKEYS;
typedef struct tagMQQMPROPS MQQMPROPS;
typedef struct tagMQSORTKEY MQSORTKEY;
typedef struct tagMQSORTSET MQSORTSET;
typedef struct BDN_RSVP MSBDNRSVP;
typedef struct _msgfilter MSGFILTER;
typedef unsigned int MSIHANDLE;
typedef struct tagNMHEADERA NMHEADERA;
typedef struct tagNMHEADERW NMHEADERW;
typedef struct _tagIMEPROA *NPIMEPROA;
typedef struct _tagIMEPROW *NPIMEPROW;
typedef struct joyinfo_tag *NPJOYINFO;
typedef struct midihdr_tag *NPMIDIHDR;
typedef struct _RGNDATA *NPRGNDATA;
typedef struct wavehdr_tag *NPWAVEHDR;
typedef struct _NRESARRAY NRESARRAY;
typedef struct _OFNOTIFYA OFNOTIFYA;
typedef struct _OFNOTIFYW OFNOTIFYW;
typedef struct _OLESTREAM OLESTREAM;
typedef struct optdata_dn OPTDATADN;
enum OSPFORMAT {OSPFORMAT_RAW = 0x0,OSPFORMAT_DEFAULT = 0x0,OSPFORMAT_FORMATTED = 0x1,OSPFORMAT_HTML = 0x2,};
typedef struct _ABCFLOAT *PABCFLOAT;
typedef struct _adsvalue *PADSVALUE;
typedef struct tagPAGERANGE PAGERANGE;
typedef struct tagPARAMDATA PARAMDATA;
typedef struct tagPARAMDESC PARAMDESC;
typedef struct tagAUXCAPSA *PAUXCAPSA;
typedef struct tagAUXCAPSW *PAUXCAPSW;
typedef struct _CERT_RDN *PCERT_RDN;
typedef struct _F2AFD13852ACA75C0D1B7913E08A9A3F *PCOMPVARS;
typedef struct _CRYPTOAPI_BLOB *PCRL_BLOB;
typedef struct _CRL_INFO *PCRL_INFO;
typedef struct _CTL_INFO *PCTL_INFO;
typedef void *PDBCURSOR;
typedef void *PDBHANDLE;
typedef struct _devicemodeA *PDEVMODEA;
typedef struct _devicemodeW *PDEVMODEW;
typedef struct tagEMRARC *PEMRARCTO;
typedef struct tagEMRARC *PEMRCHORD;
typedef struct tagPENPACKET PENPACKET;
typedef IEnumPins *PENUMPINS;
typedef struct tagEVENTMSG *PEVENTMSG;
typedef struct _FILETIME *PFILETIME;
typedef struct _flowspec *PFLOWSPEC;
typedef struct _FPO_DATA *PFPO_DATA;
typedef IGetFrame *PGETFRAME;
typedef struct tagGLYPHSET *PGLYPHSET;
typedef short *PHALF_PTR;
typedef struct phonecaps_tag PHONECAPS;
typedef struct in_addr6 *PIN6_ADDR;
typedef struct tagJOYCAPSA *PJOYCAPSA;
typedef struct tagJOYCAPSW *PJOYCAPSW;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E *PKSP_NODE;
typedef struct ldapmodA *PLDAPModA;
typedef struct ldapmodW *PLDAPModW;
typedef struct tagLOGBRUSH *PLOGBRUSH;
typedef struct tagLOGFONTA *PLOGFONTA;
typedef struct tagLOGFONTW *PLOGFONTW;
typedef void *PLOGINREC;
typedef struct _MMCKINFO *PMMCKINFO;
typedef struct _MMIOINFO *PMMIOINFO;
typedef struct _NS_INFOA *PNS_INFOA;
typedef struct _NS_INFOW *PNS_INFOW;
typedef struct _OFSTRUCT *POFSTRUCT;
typedef struct tagPOLYTEXTA POLYTEXTA;
typedef struct tagPOLYTEXTW POLYTEXTW;
typedef struct tagPELARRAY *PPELARRAY;
typedef struct _PERF_BIN *PPERF_BIN;
typedef struct _tagPHYSICAL *PPHYSICAL;
typedef struct protoent *PPROTOENT;
typedef struct provider_info *PPROVIDER;
typedef struct _renddata *PRENDDATA;
typedef struct tagPDA PRINTDLGA;
typedef struct tagPDW PRINTDLGW;
typedef struct _PROXYINFO PROXYINFO;
typedef struct _PROXYLIST PROXYLIST;
typedef struct _PROXYNODE PROXYNODE;
typedef struct _SCH_CRED *PSCH_CRED;
typedef struct _PSHNOTIFY PSHNOTIFY;
typedef struct sockaddr *PSOCKADDR;
typedef struct _SYNC_CFG *PSYNC_CFG;
typedef struct _TBBUTTON *PTBBUTTON;
typedef struct timecaps_tag *PTIMECAPS;
typedef struct _TRUSTEE_A *PTRUSTEEA;
typedef struct _TRUSTEE_W *PTRUSTEEW;
typedef unsigned int *PUINT_PTR;
typedef struct videohdr_tag *PVIDEOHDR;
typedef struct tagWCSVDATA *PWCSVDATA;
typedef struct ADOParameter Parameter;
struct Positions {struct PositionsVtbl *lpVtbl;};
typedef struct tagQACONTROL QACONTROL;
typedef struct _ReadState READSTATE;
typedef struct tagREBARINFO REBARINFO;
typedef struct __MIDL___MIDL_itf_strmif_0070_0001 REGFILTER;
typedef struct _reqresize REQRESIZE;
typedef struct tagRGBTRIPLE RGBTRIPLE;
typedef struct _riffchunk RIFFCHUNK;
typedef int RPC_DWORD;
typedef struct _RPC_IF_ID RPC_IF_ID;
typedef struct _RSAPUBKEY RSAPUBKEY;
typedef struct ADORecordset Recordset;
typedef struct tagRemBRUSH RemHBRUSH;
typedef struct tagSAFEARRAY SAFEARRAY;
typedef struct SchedSess SCHEDSESS;
typedef struct _SC_ACTION SC_ACTION;
typedef struct _selchange SELCHANGE;
typedef struct send_data SEND_DATA;
typedef struct side_info_entry SIDE_INFO;
typedef struct _4F60ECD4258FF26BBA8BD131C8AAF615 SMAPIVerb;
typedef long long SQLBIGINT;
typedef double SQLDOUBLE;
typedef void *SQLHANDLE;
typedef struct srv_stats SRV_STATS;
typedef struct _STD_ALERT STD_ALERT;
typedef struct tagSTYLEBUFA STYLEBUFA;
typedef struct tagSTYLEBUFW STYLEBUFW;
typedef struct _SYNC_CARD SYNC_CARD;
typedef struct _SecBuffer SecBuffer;
typedef struct _SecHandle SecHandle;
typedef struct _PUBKEY TEKPUBKEY;
typedef struct _TOKENRING TOKENRING;
typedef struct tagTPMPARAMS TPMPARAMS;
typedef struct _F77B4E368325CF7BDE015CEDC90789C7 TRACEINFO;
typedef struct _TRIVERTEX TRIVERTEX;
typedef struct _TRUSTEE_A TRUSTEE_A;
typedef struct _TRUSTEE_W TRUSTEE_W;
typedef struct tagTVITEMEXA TVITEMEXA;
typedef struct tagTVITEMEXW TVITEMEXW;
typedef unsigned short UHALF_PTR;
typedef unsigned long long ULONGLONG;
typedef struct varstring_tag VARSTRING;
typedef struct tagVIDEOINFO VIDEOINFO;
typedef struct tagWAPPCDATA WAPPCDATA;
typedef struct tagWCPICDATA WCPICDATA;
typedef struct tagWINDOWPOS WINDOWPOS;
typedef struct tagWNDCLASSA WNDCLASSA;
typedef struct tagWNDCLASSW WNDCLASSW;
typedef struct _WORD_BLOB WORD_BLOB;
enum XACTCONST {XACTCONST_TIMEOUTINFINITE = 0x0,};
typedef struct _xml_error XML_ERROR;
struct _Ctypevec {unsigned int _Hand;unsigned int _Page; short *_Table;int _Delfl;};
enum _D3DBLEND {D3DBLEND_ZERO = 0x1,D3DBLEND_ONE = 0x2,D3DBLEND_SRCCOLOR = 0x3,D3DBLEND_INVSRCCOLOR = 0x4,D3DBLEND_SRCALPHA = 0x5,D3DBLEND_INVSRCALPHA = 0x6,D3DBLEND_DESTALPHA = 0x7,D3DBLEND_INVDESTALPHA = 0x8,D3DBLEND_DESTCOLOR = 0x9,D3DBLEND_INVDESTCOLOR = 0xA,D3DBLEND_SRCALPHASAT = 0xB,D3DBLEND_BOTHSRCALPHA = 0xC,D3DBLEND_BOTHINVSRCALPHA = 0xD,D3DBLEND_FORCE_DWORD = 0x7FFFFFFF,};
struct _DPreview {struct _DPreviewVtbl *lpVtbl;};
struct _FLOAT128 {long long LowPart;long long HighPart;};
typedef struct _heapinfo _HEAPINFO;
enum _SecState {SecStateStandalone = 0x0,SecStateDisconnected = 0x1,SecStateJoined = 0x2,SecStateDC = 0x3,};
enum _TASKPAGE {TASKPAGE_TASK = 0x0,TASKPAGE_SCHEDULE = 0x1,TASKPAGE_SETTINGS = 0x2,};
typedef int (*_onexit_t)();
struct confirmed {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
struct get_state {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char conv_state;};
typedef int mbstate_t;
struct nodeent_f {char *n_name;unsigned short n_addrtype;unsigned short n_length;unsigned char *n_addr;unsigned char *n_params;unsigned char n_reserved[16];};
typedef int ptrdiff_t;
struct send_data {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;unsigned char reserv3;unsigned short dlen;unsigned char *dptr;unsigned char type;unsigned char reserv4;};
typedef struct _7CD0DE64846C1F4E244BDF2230E7B4C4 smiCNTR64;
typedef unsigned char *smiLPBYTE;
typedef struct _7DF8531BA86889E182D5E2B59DD739DF smiOCTETS;
typedef unsigned int smiUINT32;
struct srv_stats {int NumReads;int NumWrites;};
enum tagCLSCTX {CLSCTX_INPROC_SERVER = 0x1,CLSCTX_INPROC_HANDLER = 0x2,CLSCTX_LOCAL_SERVER = 0x4,CLSCTX_INPROC_SERVER16 = 0x8,CLSCTX_REMOTE_SERVER = 0x10,CLSCTX_INPROC_HANDLER16 = 0x20,CLSCTX_INPROC_SERVERX86 = 0x40,CLSCTX_INPROC_HANDLERX86 = 0x80,CLSCTX_ESERVER_HANDLER = 0x100,};
enum tagCOINIT {COINIT_APARTMENTTHREADED = 0x2,COINIT_MULTITHREADED = 0x0,COINIT_DISABLE_OLE1DDE = 0x4,COINIT_SPEED_OVER_MEMORY = 0x8,};
enum tagMEMCTX {MEMCTX_TASK = 0x1,MEMCTX_SHARED = 0x2,MEMCTX_MACSYSTEM = 0x3,MEMCTX_UNKNOWN = 0xFFFFFFFF,MEMCTX_SAME = 0xFFFFFFFE,};
enum tagMSHCTX {MSHCTX_LOCAL = 0x0,MSHCTX_NOSHAREDMEM = 0x1,MSHCTX_DIFFERENTMACHINE = 0x2,MSHCTX_INPROC = 0x3,};
enum tagREGCLS {REGCLS_SINGLEUSE = 0x0,REGCLS_MULTIPLEUSE = 0x1,REGCLS_MULTI_SEPARATE = 0x2,REGCLS_SUSPENDED = 0x4,REGCLS_SURROGATE = 0x8,};
enum tagTYSPEC {TYSPEC_CLSID = 0x0,TYSPEC_FILEEXT = 0x1,TYSPEC_MIMETYPE = 0x2,TYSPEC_PROGID = 0x3,TYSPEC_IID = 0x4,TYSPEC_TYPELIB = 0x5,TYSPEC_FILENAME = 0x6,TYSPEC_JAVACLASS = 0x7,TYSPEC_PACKAGENAME = 0x8,};
typedef struct _ABCFLOAT ABCFLOAT;
struct ADOError;
struct ADOField;
typedef struct _ADRENTRY ADRENTRY;
typedef struct _adsvalue ADSVALUE;
typedef struct allocate ALLOCATE;
typedef struct _AMVPSIZE AMVPSIZE;
typedef void ( *ANIMATOR)();
typedef struct _F0080E258AF97822278D302FBC4D344F ATM_BHLI;
typedef struct _459629BAC169663B96C3B85C5F4E781B ATM_BLLI;
typedef struct tagAUXCAPSA AUXCAPSA;
typedef struct tagAUXCAPSW AUXCAPSW;
typedef struct _tagBINDINFO BINDINFO;
typedef struct tagBSTRBLOB BSTRBLOB;
typedef struct tagCALPWSTR CALPWSTR;
typedef struct tagCCSTYLEA CCSTYLEA;
typedef struct tagCCSTYLEW CCSTYLEW;
typedef struct _CERT_RDN CERT_RDN;
enum CI_TYPES {CI_REGULAR = 0x1,CI_ALTERNATE = 0x2,CI_CURSOR = 0x3,};
typedef struct tagCLIPDATA CLIPDATA;
typedef struct _44F6892C3B9E49E721808137885C3B18 CMC_time;
typedef struct tagCOLORKEY COLORKEY;
typedef struct _COLORMAP COLORMAP;
typedef struct _COMMPROP COMMPROP;
typedef struct _F2AFD13852ACA75C0D1B7913E08A9A3F COMPVARS;
typedef struct tagConfDest CONFDEST;
typedef struct tagCONVINFO CONVINFO;
struct CPlugins;
typedef struct _CRYPTOAPI_BLOB CRL_BLOB;
typedef struct _CRL_INFO CRL_INFO;
typedef struct _CTL_INFO CTL_INFO;
typedef struct tagCUSTDATA CUSTDATA;
struct ClusNode {struct ClusNodeVtbl *lpVtbl;};
struct CubeDefs {struct CubeDefsVtbl *lpVtbl;};
typedef struct _D3DLIGHT D3DLIGHT;
typedef struct _D3DPOINT D3DPOINT;
typedef struct _D3DRMBOX D3DRMBOX;
typedef struct _D3DRMRAY D3DRMRAY;
typedef struct _D3DSTATE D3DSTATE;
typedef struct _D3DSTATS D3DSTATS;
typedef float D3DVALUE;
typedef struct _tagDATAINFO DATAINFO;
typedef struct _tagDATETIME DATETIME;
typedef unsigned char DBBINARY;
typedef struct tagDBBYGUID DBBYGUID;
typedef int DBMONEY4;
typedef struct tagDBOBJECT DBOBJECT;
typedef struct tagDBPARAMS DBPARAMS;
typedef struct tagDBVECTOR DBVECTOR;
typedef struct _devicemodeA DEVMODEA;
typedef struct _devicemodeW DEVMODEW;
typedef struct tagDEVNAMES DEVNAMES;
typedef struct _PUBKEY DHPUBKEY;
typedef struct _DOCINFOA DOCINFOA;
typedef struct _DOCINFOW DOCINFOW;
typedef struct _DSCBCAPS DSCBCAPS;
typedef struct _DTBLEDIT DTBLEDIT;
typedef struct _DTBLPAGE DTBLPAGE;
typedef struct tagELEMDESC ELEMDESC;
typedef signed char ELTDATAT;
typedef struct tagEMRARC EMRARCTO;
typedef struct tagEMRARC EMRCHORD;
typedef struct _ETHERNET ETHERNET;
typedef struct tagEVENTMSG EVENTMSG;
typedef struct _FILETIME FILETIME;
typedef struct _FLOAT128 FLOAT128;
typedef struct _flowspec FLOWSPEC;
typedef struct tagFONTDESC FONTDESC;
typedef struct _FPO_DATA FPO_DATA;
typedef struct tagFUNCDESC FUNCDESC;
struct Fields15 {struct Fields15Vtbl *lpVtbl;};
typedef struct _flaglist FlagList;
typedef struct _27EED8F145487CB1BEE00199BFE0C5C4 GBGETINT;
typedef struct _D421F65DCC699F7A3DD5C4DC8797164D GBSETINT;
typedef struct get_type GET_TYPE;
struct GLUnurbs;
typedef struct tagGLYPHSET GLYPHSET;
typedef double GLclampd;
typedef float GLclampf;
typedef double GLdouble;
typedef unsigned short GLushort;
struct HACCEL__ {int unused;};
typedef short HALF_PTR;
typedef struct BDN_CONN *HBDNCONN;
struct HBRUSH__ {int unused;};
typedef struct _HCLUSTER *HCLUSTER;
typedef void *HCONTEXT;
typedef struct HDDEDATA__ *HDDEDATA;
typedef struct _HD_LAYOUT HDLAYOUT;
typedef  struct HDRVCALL__ *HDRVCALL;
typedef  struct HDRVLINE__ *HDRVLINE;
typedef struct tagHELPINFO HELPINFO;
typedef struct _tagHLBWINFO HLBWINFO;
typedef  struct HLINEAPP__ *HLINEAPP;
typedef struct _tagHLTBINFO HLTBINFO;
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIXER__ {int unused;};
typedef struct HMONITOR__ *HMONITOR;
typedef struct _HNETWORK *HNETWORK;
typedef struct HPALETTE__ *HPALETTE;
typedef struct HPENDATA__ *HPENDATA;
struct HPHONE__ {int unused;};
typedef struct HRASCONN__ *HRASCONN;
typedef struct HRECHOOK__ *HRECHOOK;
typedef struct _HRESENUM *HRESENUM;
typedef struct _HRESTYPE *HRESTYPE;
struct HTMLBody;
struct HVIDEO__ {int unused;};
typedef struct HWAVEOUT__ *HWAVEOUT;
struct IABLogon {struct IABLogonVtbl *lpVtbl;};
struct IADsUser {struct IADsUserVtbl *lpVtbl;};
struct IAMTuner {struct IAMTunerVtbl *lpVtbl;};
struct IAVIFile {struct IAVIFileVtbl *lpVtbl;};
struct IBindCtx {struct IBindCtxVtbl *lpVtbl;};
struct IBinding {struct IBindingVtbl *lpVtbl;};
typedef struct _ICONINFO ICONINFO;
struct ICatalog {struct ICatalogVtbl *lpVtbl;};
struct ICellset {struct ICellsetVtbl *lpVtbl;};
struct ICluster {struct IClusterVtbl *lpVtbl;};
struct ICommand {struct ICommandVtbl *lpVtbl;};
struct IDvdInfo {struct IDvdInfoVtbl *lpVtbl;};
struct IExchExt {struct IExchExtVtbl *lpVtbl;};
struct IMSLogon {struct IMSLogonVtbl *lpVtbl;};
struct IMarshal {struct IMarshalVtbl *lpVtbl;};
struct IMessage {struct IMessageVtbl *lpVtbl;};
struct IMoniker {struct IMonikerVtbl *lpVtbl;};
struct IMultiQI {struct IMultiQIVtbl *lpVtbl;};
typedef struct in_addr6 IN6_ADDR;
typedef struct tagINTERVAL INTERVAL;
struct IOleLink {struct IOleLinkVtbl *lpVtbl;};
struct IOverlay {struct IOverlayVtbl *lpVtbl;};
struct IPersist {struct IPersistVtbl *lpVtbl;};
struct IPicture {struct IPictureVtbl *lpVtbl;};
struct IPinInfo {struct IPinInfoVtbl *lpVtbl;};
struct IROTData {struct IROTDataVtbl *lpVtbl;};
struct IRequest {struct IRequestVtbl *lpVtbl;};
struct IService {struct IServiceVtbl *lpVtbl;};
struct IStorage {struct IStorageVtbl *lpVtbl;};
struct ITypeLib {struct ITypeLibVtbl *lpVtbl;};
struct IUnknown {struct IUnknownVtbl *lpVtbl;};
struct IXPLogon {struct IXPLogonVtbl *lpVtbl;};
typedef struct tagJOYCAPSA JOYCAPSA;
typedef struct tagJOYCAPSW JOYCAPSW;
typedef struct _A4CC0F087DE00420119DAAB092DFFA3E KSP_NODE;
typedef struct ldapmodA LDAPModA;
typedef struct ldapmodW LDAPModW;
typedef struct tagLINEINFO LINEINFO;
typedef struct tagLOGBRUSH LOGBRUSH;
typedef struct tagLOGFONTA LOGFONTA;
typedef struct tagLOGFONTW LOGFONTW;
typedef long long LONGLONG;
typedef struct IABContainer *LPABCONT;
typedef struct _action *LPACTION;
typedef struct IAttach *LPATTACH;
typedef struct tagBITMAP *LPBITMAP;
typedef struct tagCAUUID *LPCAUUID;
typedef struct _cpinfo *LPCPINFO;
typedef double *LPDOUBLE;
typedef struct _0AEE12B045F8657F1D84907C62993E1D *LPDPCAPS;
typedef struct _A3ABF0E8F12B01D8CF792B8266628F14 *LPDPCHAT;
typedef struct _DEC76BDFA461320EB33154E3BA44F85F *LPDPNAME;
typedef struct _DSCAPS *LPDSCAPS;
typedef struct _EF67D941BFA119366B947DED69649A3B *LPDTPAGE;
typedef struct fd_set *LPFD_SET;
typedef struct linger *LPLINGER;
typedef struct tagLOGPEN *LPLOGPEN;
typedef IMalloc *LPMALLOC;
typedef struct mmtime_tag *LPMMTIME;
typedef struct tagNMCHAR *LPNMCHAR;
typedef struct tagPANOSE *LPPANOSE;
typedef struct tagPENTIP *LPPENTIP;
typedef struct tagPOINTF *LPPOINTF;
typedef struct tagPOINTS *LPPOINTS;
typedef IStream *LPSTREAM;
typedef struct _STRRET *LPSTRRET;
typedef struct tagTARGET *LPTARGET;
typedef struct _WSABUF *LPWSABUF;
typedef unsigned int LS_ULONG;
enum MACRO_AA {AA_AUDIT_ALL = 0x1,AA_A_OWNER = 0x4,AA_CLOSE = 0x8,AA_S_OPEN = 0x10,AA_S_WRITE = 0x20,AA_S_CREATE = 0x20,AA_S_DELETE = 0x40,AA_S_ACL = 0x80,AA_S_ALL = 0xF0,AA_F_OPEN = 0x100,AA_F_WRITE = 0x200,AA_F_CREATE = 0x200,AA_F_DELETE = 0x400,AA_F_ACL = 0x800,AA_F_ALL = 0xF00,AA_A_OPEN = 0x1000,AA_A_WRITE = 0x2000,AA_A_CREATE = 0x2000,AA_A_DELETE = 0x4000,AA_A_ACL = 0x8000,AA_A_ALL = 0xF00,};
enum MACRO_AB {AB_RECIPIENTS = 0x1,AB_SUBCONTAINERS = 0x2,AB_MODIFIABLE = 0x4,AB_UNMODIFIABLE = 0x8,AB_FIND_ON_OPEN = 0x10,AB_NOT_DEFAULT = 0x20,};
enum MACRO_AC {AC_LINE_OFFLINE = 0x0,AC_LINE_ONLINE = 0x1,AC_LINE_BACKUP_POWER = 0x2,AC_LINE_UNKNOWN = 0xFF,};
enum MACRO_AD {AD_COUNTERCLOCKWISE = 1,AD_CLOCKWISE = 2,};
enum MACRO_AE {AE_SRVSTATUS = 0,AE_SESSLOGON = 1,AE_SESSLOGOFF = 2,AE_SESSPWERR = 3,AE_CONNSTART = 4,AE_CONNSTOP = 5,AE_CONNREJ = 6,AE_RESACCESS = 7,AE_RESACCESSREJ = 8,AE_CLOSEFILE = 9,AE_SERVICESTAT = 11,AE_ACLMOD = 12,AE_UASMOD = 13,AE_NETLOGON = 14,AE_NETLOGOFF = 15,AE_NETLOGDENIED = 16,AE_ACCLIMITEXCD = 17,AE_RESACCESS2 = 18,AE_ACLMODFAIL = 19,AE_LOCKOUT = 20,AE_GENERIC_TYPE = 21,AE_SRVSTART = 0,AE_SRVPAUSED = 1,AE_SRVCONT = 2,AE_SRVSTOP = 3,AE_GUEST = 0,AE_USER = 1,AE_ADMIN = 2,AE_NORMAL = 0,AE_USERLIMIT = 0,AE_GENERAL = 0,AE_ERROR = 1,AE_SESSDIS = 1,AE_BADPW = 1,AE_AUTODIS = 2,AE_UNSHARE = 2,AE_ADMINPRIVREQD = 2,AE_ADMINDIS = 3,AE_NOACCESSPERM = 3,AE_ACCRESTRICT = 4,AE_NORMAL_CLOSE = 0,AE_SES_CLOSE = 1,AE_ADMIN_CLOSE = 2,AE_LIM_UNKNOWN = 0,AE_LIM_LOGONHOURS = 1,AE_LIM_EXPIRED = 2,AE_LIM_INVAL_WKSTA = 3,AE_LIM_DISABLED = 4,AE_LIM_DELETED = 5,AE_MOD = 0,AE_DELETE = 1,AE_ADD = 2,AE_UAS_USER = 0,AE_UAS_GROUP = 1,AE_UAS_MODALS = 2,};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_IPX = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NETBIOS = 17,AF_VOICEVIEW = 18,AF_FIREFOX = 19,AF_UNKNOWN1 = 20,AF_BAN = 21,AF_ATM = 22,AF_INET6 = 23,AF_CLUSTER = 24,AF_12844 = 25,AF_MAX = 26,};
enum MACRO_AI {AI_CBSTROKE = 0xFFFF,AI_SKIPUPSTROKES = 0x1,};
enum MACRO_AM {AM_GBF_PREVFRAMESKIPPED = 1,AM_GBF_NOTASYNCPOINT = 2,AM_GBF_NOWAIT = 4,};
enum MACRO_AP {AP_TP_STARTED = 0x14,AP_RECEIVE_ALLOCATE = 0x16,AP_TP_ENDED = 0x13,AP_RECEIVE_ALLOCATE_X = 0x96,AP_CNOS = 0x15,AP_DISPLAY = 0x1B,AP_M_ALLOCATE = 0x1,AP_M_CONFIRM = 0x3,AP_M_CONFIRMED = 0x4,AP_M_DEALLOCATE = 0x5,AP_M_FLUSH = 0x6,AP_M_GET_ATTRIBUTES = 0x7,AP_M_PREPARE_TO_RECEIVE = 0xA,AP_M_RECEIVE_AND_POST = 0xD,AP_M_RECEIVE_AND_WAIT = 0xB,AP_M_RECEIVE_IMMEDIATE = 0xC,AP_M_REQUEST_TO_SEND = 0xE,AP_M_SEND_CONVERSATION = 0x18,AP_M_SEND_DATA = 0xF,AP_M_SEND_ERROR = 0x10,AP_M_TEST_RTS = 0x12,AP_M_TEST_RTS_AND_POST = 0x81,AP_M_POST_ON_RECEIPT = 0x82,AP_M_RECEIVE_LOG_DATA = 0x83,AP_B_ALLOCATE = 0x1,AP_B_CONFIRM = 0x3,AP_B_CONFIRMED = 0x4,AP_B_DEALLOCATE = 0x5,AP_B_FLUSH = 0x6,AP_B_GET_ATTRIBUTES = 0x7,AP_B_PREPARE_TO_RECEIVE = 0xA,AP_B_RECEIVE_AND_POST = 0xD,AP_B_RECEIVE_AND_WAIT = 0xB,AP_B_RECEIVE_IMMEDIATE = 0xC,AP_B_REQUEST_TO_SEND = 0xE,AP_B_SEND_CONVERSATION = 0x18,AP_B_SEND_DATA = 0xF,AP_B_SEND_ERROR = 0x10,AP_B_TEST_RTS = 0x12,AP_B_TEST_RTS_AND_POST = 0x81,AP_B_POST_ON_RECEIPT = 0x82,AP_B_RECEIVE_LOG_DATA = 0x83,AP_GET_TP_PROPERTIES = 0x17,AP_GET_TYPE = 0x8,AP_GET_STATE = 0x9,AP_OK = 0x0,AP_PARAMETER_CHECK = 0x100,AP_BAD_TP_ID = 0x1000000,AP_BAD_CONV_ID = 0x2000000,AP_BAD_LU_ALIAS = 0x3000000,AP_INVALID_DATA_SEGMENT = 0x6000000,AP_BAD_CONV_TYPE = 0x11000000,AP_BAD_SYNC_LEVEL = 0x12000000,AP_BAD_SECURITY = 0x13000000,AP_BAD_RETURN_CONTROL = 0x14000000,AP_PIP_LEN_INCORRECT = 0x16000000,AP_NO_USE_OF_SNASVCMG = 0x17000000,AP_UNKNOWN_PARTNER_MODE = 0x18000000,AP_CONFIRM_ON_SYNC_LEVEL_NONE = 0x31000000,AP_DEALLOC_BAD_TYPE = 0x51000000,AP_DEALLOC_LOG_LL_WRONG = 0x57000000,AP_P_TO_R_INVALID_TYPE = 0xA1000000,AP_RCV_AND_WAIT_BAD_FILL = 0xB5000000,AP_RCV_IMMD_BAD_FILL = 0xC4000000,AP_RCV_AND_POST_BAD_FILL = 0xD5000000,AP_INVALID_SEMAPHORE_HANDLE = 0xD6000000,AP_BAD_RETURN_STATUS_WITH_DATA = 0xD7000000,AP_BAD_LL = 0xF1000000,AP_SEND_DATA_INVALID_TYPE = 0xF4000000,AP_INVALID_SESSION_ID = 0x12050000,AP_SEND_DATA_CONFIRM_SYNC_NONE = 0xF5000000,AP_BAD_PARTNER_LU_ALIAS = 0x5B010000,AP_SEND_ERROR_LOG_LL_WRONG = 0x2010000,AP_SEND_ERROR_BAD_TYPE = 0x3010000,AP_BAD_ERROR_DIRECTION = 0x5010000,AP_TOO_MANY_TPS = 0x43020000,AP_BAD_TYPE = 0x50020000,AP_UNDEFINED_TP_NAME = 0x6050000,AP_INVALID_SET_PROT = 0x70000,AP_INVALID_NEW_PROT = 0x1070000,AP_INVALID_SET_UNPROT = 0x2070000,AP_INVALID_NEW_UNPROT = 0x3070000,AP_INVALID_SET_USER = 0x4070000,AP_INVALID_DATA_TYPE = 0x5070000,AP_BAD_LOCAL_LU_ALIAS = 0x3000001,AP_BAD_REMOTE_LU_ALIAS = 0x3000002,AP_POST_ON_RECEIPT_BAD_FILL = 0x3000003,AP_STATE_CHECK = 0x200,AP_CONFIRM_BAD_STATE = 0x32000000,AP_CONFIRM_NOT_LL_BDY = 0x33000000,AP_CONFIRMED_BAD_STATE = 0x41000000,AP_DEALLOC_FLUSH_BAD_STATE = 0x52000000,AP_DEALLOC_CONFIRM_BAD_STATE = 0x53000000,AP_DEALLOC_NOT_LL_BDY = 0x55000000,AP_FLUSH_NOT_SEND_STATE = 0x61000000,AP_P_TO_R_NOT_LL_BDY = 0xA2000000,AP_P_TO_R_NOT_SEND_STATE = 0xA3000000,AP_RCV_AND_WAIT_BAD_STATE = 0xB1000000,AP_RCV_AND_WAIT_NOT_LL_BDY = 0xB2000000,AP_RCV_IMMD_BAD_STATE = 0xC1000000,AP_RCV_AND_POST_BAD_STATE = 0xD1000000,AP_RCV_AND_POST_NOT_LL_BDY = 0xD2000000,AP_R_T_S_BAD_STATE = 0xE1000000,AP_SEND_DATA_NOT_SEND_STATE = 0xF2000000,AP_SEND_DATA_NOT_LL_BDY = 0xF6000000,AP_ATTACH_MANAGER_INACTIVE = 0x8050000,AP_ALLOCATE_NOT_PENDING = 0x9050000,AP_INVALID_PROCESS = 0x25050000,AP_ALLOCATION_ERROR = 0x300,AP_ALLOCATION_FAILURE_NO_RETRY = 0x4000000,AP_ALLOCATION_FAILURE_RETRY = 0x5000000,AP_SECURITY_NOT_VALID = 0x51600F08,AP_TRANS_PGM_NOT_AVAIL_RETRY = 0x31604B08,AP_TRANS_PGM_NOT_AVAIL_NO_RETRY = 0x4C08,AP_TP_NAME_NOT_RECOGNIZED = 0x21600810,AP_PIP_NOT_ALLOWED = 0x31600810,AP_PIP_NOT_SPECIFIED_CORRECTLY = 0x32600810,AP_CONVERSATION_TYPE_MISMATCH = 0x34600810,AP_SYNC_LEVEL_NOT_SUPPORTED = 0x41600810,AP_DEALLOC_ABEND = 0x500,AP_DEALLOC_ABEND_PROG = 0x600,AP_DEALLOC_ABEND_SVC = 0x700,AP_DEALLOC_ABEND_TIMER = 0x800,AP_DEALLOC_NORMAL = 0x900,AP_PROG_ERROR_NO_TRUNC = 0xC00,AP_PROG_ERROR_TRUNC = 0xD00,AP_PROG_ERROR_PURGING = 0xE00,AP_CONV_FAILURE_RETRY = 0xF00,AP_CONV_FAILURE_NO_RETRY = 0x1000,AP_SVC_ERROR_NO_TRUNC = 0x1100,AP_SVC_ERROR_TRUNC = 0x1200,AP_SVC_ERROR_PURGING = 0x1300,AP_UNSUCCESSFUL = 0x1400,AP_CONVERSATION_TYPE_MIXED = 0x1900,AP_CANCELLED = 0x2100,AP_SECURITY_REQUESTED_NOT_SUPPORTED = 0x2200,AP_TP_BUSY = 0x2F0,AP_COMM_SUBSYSTEM_ABENDED = 0x3F0,AP_COMM_SUBSYSTEM_NOT_LOADED = 0x4F0,AP_CONV_BUSY = 0x5F0,AP_THREAD_BLOCKING = 0x6F0,AP_INVALID_VERB_SEGMENT = 0x8F0,AP_UNEXPECTED_DOS_ERROR = 0x11F0,AP_STACK_TOO_SMALL = 0x15F0,AP_INVALID_VERB = 0xFFFF,AP_BASIC_CONVERSATION = 0x0,AP_BASIC = 0x0,AP_MAPPED_CONVERSATION = 0x1,AP_MAPPED = 0x1,AP_NO = 0x0,AP_YES = 0x1,AP_NONE = 0x0,AP_CONFIRM_SYNC_LEVEL = 0x1,AP_CONFIRM = 0x1,AP_SAME = 0x1,AP_PGM = 0x2,AP_STRONG = 0x3,AP_PROXY = 0x80,AP_PROXY_SAME = 0x81,AP_PROXY_PGM = 0x82,AP_PROXY_STRONG = 0x83,AP_SYNC_LEVEL = 0x0,AP_FLUSH = 0x1,AP_ABEND_PROG = 0x2,AP_ABEND_SVC = 0x3,AP_ABEND_TIMER = 0x4,AP_ABEND = 0x5,AP_SHORT = 0x0,AP_LONG = 0x1,AP_DATA = 0x100,AP_DATA_COMPLETE = 0x200,AP_NOT_DATA = 0x300,AP_DATA_INCOMPLETE = 0x400,AP_SEND = 0x1,AP_CONFIRM_WHAT_RECEIVED = 0x2,AP_CONFIRM_SEND = 0x3,AP_CONFIRM_DEALLOCATE = 0x4,AP_DATA_COMPLETE_SEND = 0x201,AP_DATA_COMPLETE_CONFIRM = 0x202,AP_DATA_COMPLETE_CONFIRM_SEND = 0x203,AP_DATA_COMPLETE_CONFIRM_DEALL = 0x204,AP_DATA_SEND = 0x101,AP_DATA_CONFIRM = 0x102,AP_DATA_CONFIRM_SEND = 0x103,AP_DATA_CONFIRM_DEALLOCATE = 0x104,AP_BUFFER = 0x0,AP_LL = 0x1,AP_WHEN_SESSION_ALLOCATED = 0x0,AP_IMMEDIATE = 0x1,AP_WHEN_SESSION_FREE = 0x2,AP_WHEN_CONWINNER_ALLOCATED = 0x3,AP_WHEN_CONV_GROUP_ALLOCATED = 0x4,AP_PROG = 0x0,AP_SVC = 0x1,AP_SEND_DATA_FLUSH = 0x1,AP_SEND_DATA_CONFIRM = 0x2,AP_SEND_DATA_P_TO_R_FLUSH = 0x3,AP_SEND_DATA_P_TO_R_SYNC_LEVEL = 0x4,AP_SEND_DATA_DEALLOC_FLUSH = 0x5,AP_SEND_DATA_DEALLOC_SYNC_LEVEL = 0x6,AP_SEND_DATA_DEALLOC_ABEND = 0x7,AP_RCV_DIR_ERROR = 0x0,AP_SEND_DIR_ERROR = 0x1,AP_SOFT = 0x0,AP_HARD = 0x1,AP_RESET_STATE = 0x1,AP_SEND_STATE = 0x2,AP_RECEIVE_STATE = 0x3,AP_CONFIRM_STATE = 0x4,AP_CONFIRM_SEND_STATE = 0x5,AP_CONFIRM_DEALL_STATE = 0x6,AP_PEND_POST_STATE = 0x7,AP_PEND_DEALL_STATE = 0x8,AP_END_CONV_STATE = 0x9,AP_SEND_PENDING_STATE = 0xA,AP_EXTD_VCB = 0x80,};
enum MACRO_AT {AT_KEYEXCHANGE = 1,AT_SIGNATURE = 2,};
enum MACRO_AW {AW_HOR_POSITIVE = 0x1,AW_HOR_NEGATIVE = 0x2,AW_VER_POSITIVE = 0x4,AW_VER_NEGATIVE = 0x8,AW_CENTER = 0x10,AW_HIDE = 0x10000,AW_ACTIVATE = 0x20000,AW_SLIDE = 0x40000,AW_BLEND = 0x80000,};
enum MACRO_BF {BF_LEFT = 0x1,BF_TOP = 0x2,BF_RIGHT = 0x4,BF_BOTTOM = 0x8,BF_TOPLEFT = 0x3,BF_TOPRIGHT = 0x6,BF_BOTTOMLEFT = 0x9,BF_BOTTOMRIGHT = 0xC,BF_RECT = 0xF,BF_DIAGONAL = 0x10,BF_DIAGONAL_ENDTOPRIGHT = 0x16,BF_DIAGONAL_ENDTOPLEFT = 0x13,BF_DIAGONAL_ENDBOTTOMLEFT = 0x19,BF_DIAGONAL_ENDBOTTOMRIGHT = 0x1C,BF_MIDDLE = 0x800,BF_SOFT = 0x1000,BF_ADJUST = 0x2000,BF_FLAT = 0x4000,BF_MONO = 0x8000,};
enum MACRO_BI {BI_RGB = 0,BI_RLE8 = 1,BI_RLE4 = 2,BI_BITFIELDS = 3,};
enum MACRO_BN {BN_CLICKED = 0,BN_PAINT = 1,BN_HILITE = 2,BN_UNHILITE = 3,BN_DISABLE = 4,BN_DOUBLECLICKED = 5,BN_PUSHED = 2,BN_UNPUSHED = 3,BN_DBLCLK = 5,BN_SETFOCUS = 6,BN_KILLFOCUS = 7,};
enum MACRO_BS {BS_SOLID = 0,BS_NULL = 1,BS_HOLLOW = 1,BS_HATCHED = 2,BS_PATTERN = 3,BS_INDEXED = 4,BS_DIBPATTERN = 5,BS_DIBPATTERNPT = 6,BS_PATTERN8X8 = 7,BS_DIBPATTERN8X8 = 8,BS_MONOPATTERN = 9,};
enum MACRO_BZ {BZ_DISABLECANCELBUTTON = 0x1,BZ_DISABLESWITCHTOBUTTON = 0x2,BZ_DISABLERETRYBUTTON = 0x4,BZ_NOTRESPONDINGDIALOG = 0x8,};
enum MACRO_C1 {C1_UPPER = 0x1,C1_LOWER = 0x2,C1_DIGIT = 0x4,C1_SPACE = 0x8,C1_PUNCT = 0x10,C1_CNTRL = 0x20,C1_BLANK = 0x40,C1_XDIGIT = 0x80,C1_ALPHA = 0x100,};
enum MACRO_C2 {C2_LEFTTORIGHT = 0x1,C2_RIGHTTOLEFT = 0x2,C2_EUROPENUMBER = 0x3,C2_EUROPESEPARATOR = 0x4,C2_EUROPETERMINATOR = 0x5,C2_ARABICNUMBER = 0x6,C2_COMMONSEPARATOR = 0x7,C2_BLOCKSEPARATOR = 0x8,C2_SEGMENTSEPARATOR = 0x9,C2_WHITESPACE = 0xA,C2_OTHERNEUTRAL = 0xB,C2_NOTAPPLICABLE = 0x0,};
enum MACRO_C3 {C3_NONSPACING = 0x1,C3_DIACRITIC = 0x2,C3_VOWELMARK = 0x4,C3_SYMBOL = 0x8,C3_KATAKANA = 0x10,C3_HIRAGANA = 0x20,C3_HALFWIDTH = 0x40,C3_FULLWIDTH = 0x80,C3_IDEOGRAPH = 0x100,C3_KASHIDA = 0x200,C3_LEXICAL = 0x400,C3_ALPHA = 0x8000,C3_NOTAPPLICABLE = 0x0,};
enum MACRO_CA {CA_NEGATIVE = 0x1,CA_LOG_FILTER = 0x2,};
enum MACRO_CB {CB_OKAY = 0,CB_ERR = -1,CB_ERRSPACE = -2,};
enum MACRO_CC {CC_NONE = 0,CC_CIRCLES = 1,CC_PIE = 2,CC_CHORD = 4,CC_ELLIPSES = 8,CC_WIDE = 16,CC_STYLED = 32,CC_WIDESTYLED = 64,CC_INTERIORS = 128,CC_ROUNDRECT = 256,};
enum MACRO_CD {CD_LBSELNOITEMS = -1,CD_LBSELCHANGE = 0,CD_LBSELSUB = 1,CD_LBSELADD = 2,};
enum MACRO_CE {CE_RXOVER = 0x1,CE_OVERRUN = 0x2,CE_RXPARITY = 0x4,CE_FRAME = 0x8,CE_BREAK = 0x10,CE_TXFULL = 0x100,CE_PTO = 0x200,CE_IOE = 0x400,CE_DNS = 0x800,CE_OOP = 0x1000,CE_MODE = 0x8000,};
enum MACRO_CF {CF_TEXT = 1,CF_BITMAP = 2,CF_METAFILEPICT = 3,CF_SYLK = 4,CF_DIF = 5,CF_TIFF = 6,CF_OEMTEXT = 7,CF_DIB = 8,CF_PALETTE = 9,CF_PENDATA = 10,CF_RIFF = 11,CF_WAVE = 12,CF_UNICODETEXT = 13,CF_ENHMETAFILE = 14,CF_HDROP = 15,CF_LOCALE = 16,CF_MAX = 17,CF_OWNERDISPLAY = 128,CF_DSPTEXT = 129,CF_DSPBITMAP = 130,CF_DSPMETAFILEPICT = 131,CF_DSPENHMETAFILE = 142,CF_PRIVATEFIRST = 512,CF_PRIVATELAST = 767,CF_GDIOBJFIRST = 768,CF_GDIOBJLAST = 1023,};
enum MACRO_CI {CI_CORRUPT_DATABASE = 0xC0041800,CI_CORRUPT_CATALOG = 0xC0041801,CI_INVALID_PARTITION = 0xC0041802,CI_INVALID_PRIORITY = 0xC0041803,CI_NO_STARTING_KEY = 0xC0041804,CI_OUT_OF_INDEX_IDS = 0xC0041805,CI_NO_CATALOG = 0xC0041806,CI_CORRUPT_FILTER_BUFFER = 0xC0041807,CI_INVALID_INDEX = 0xC0041808,CI_PROPSTORE_INCONSISTENCY = 0xC0041809,CI_E_ALREADY_INITIALIZED = 0x8004180A,CI_E_NOT_INITIALIZED = 0x8004180B,CI_E_BUFFERTOOSMALL = 0x8004180C,CI_E_PROPERTY_NOT_CACHED = 0x8004180D,CI_S_WORKID_DELETED = 0x4180E,CI_E_INVALID_STATE = 0x8004180F,CI_E_FILTERING_DISABLED = 0x80041810,CI_E_DISK_FULL = 0x80041811,CI_E_SHUTDOWN = 0x80041812,CI_E_WORKID_NOTVALID = 0x80041813,CI_S_END_OF_ENUMERATION = 0x41814,CI_E_NOT_FOUND = 0x80041815,CI_E_USE_DEFAULT_PID = 0x80041816,CI_E_DUPLICATE_NOTIFICATION = 0x80041817,CI_E_UPDATES_DISABLED = 0x80041818,CI_E_INVALID_FLAGS_COMBINATION = 0x80041819,CI_E_OUTOFSEQ_INCREMENT_DATA = 0x8004181A,CI_E_SHARING_VIOLATION = 0x8004181B,CI_E_LOGON_FAILURE = 0x8004181C,CI_E_NO_CATALOG = 0x8004181D,CI_E_STRANGE_PAGEORSECTOR_SIZE = 0x8004181E,CI_E_TIMEOUT = 0x8004181F,CI_E_NOT_RUNNING = 0x80041820,CI_INCORRECT_VERSION = 0xC0041821,};
enum MACRO_CL {CL_NULL = 0,CL_MINIMUM = 1,CL_MAXIMUM = 100,};
enum MACRO_CM {CM_OUT_OF_GAMUT = 255,CM_IN_GAMUT = 0,};
enum MACRO_CO {CO_E_FIRST = 0x800401F0,CO_E_LAST = 0x800401FF,CO_S_FIRST = 0x401F0,CO_S_LAST = 0x401FF,};
enum MACRO_CP {CP_NONE = 0,CP_RECTANGLE = 1,CP_REGION = 2,};
enum MACRO_CR {CR_IN_BASE64HEADER = 0,CR_IN_BASE64 = 1,CR_IN_BINARY = 2,CR_IN_ENCODEMASK = 255,CR_IN_PKCS10 = 256,CR_IN_KEYGEN = 512,CR_IN_FORMATMASK = 65280,CR_IN_ENCRYPTED_REQUEST = 65536,CR_IN_ENCRYPTED_ATTRIBUTES = 131072,CR_DISP_INCOMPLETE = 0,CR_DISP_ERROR = 1,CR_DISP_DENIED = 2,CR_DISP_ISSUED = 3,CR_DISP_ISSUED_OUT_OF_BAND = 4,CR_DISP_UNDER_SUBMISSION = 5,CR_OUT_BASE64HEADER = 0,CR_OUT_BASE64 = 1,CR_OUT_BINARY = 2,CR_OUT_ENCODEMASK = 255,CR_OUT_CHAIN = 256,};
enum MACRO_CS {CS_E_FIRST = 0x80040164,CS_E_LAST = 0x80040168,};
enum MACRO_CT {CT_CTYPE1 = 0x1,CT_CTYPE2 = 0x2,CT_CTYPE3 = 0x4,};
enum MACRO_CU {CU_CLIENT = 0x1,CU_SERVER = 0x2,CU_KEYSET = 0x4,CU_MIXED = 0x8,CU_DYNAMIC = 0x10,CU_FORWARD = 0x20,CU_INSENSITIVE = 0x40,CU_READONLY = 0x80,CU_LOCKCC = 0x100,CU_OPTCC = 0x200,CU_OPTCCVAL = 0x400,CU_FILLING = 0x1,CU_FILLED = 0x2,};
enum MACRO_CW {CW_USEDEFAULT = 0x80000000,};
enum MACRO_DB {DB_NULL_HACCESSOR = 0x0,DB_INVALID_HACCESSOR = 0x0,DB_NULL_HROW = 0x0,};
enum MACRO_DC {DC_FIELDS = 1,DC_PAPERS = 2,DC_PAPERSIZE = 3,DC_MINEXTENT = 4,DC_MAXEXTENT = 5,DC_BINS = 6,DC_DUPLEX = 7,DC_SIZE = 8,DC_EXTRA = 9,DC_VERSION = 10,DC_DRIVER = 11,DC_BINNAMES = 12,DC_ENUMRESOLUTIONS = 13,DC_FILEDEPENDENCIES = 14,DC_TRUETYPE = 15,DC_PAPERNAMES = 16,DC_ORIENTATION = 17,DC_COPIES = 18,};
enum MACRO_DD {DD_DEFSCROLLINSET = 11,DD_DEFSCROLLDELAY = 50,DD_DEFSCROLLINTERVAL = 50,DD_DEFDRAGDELAY = 200,DD_DEFDRAGMINDIST = 2,};
enum MACRO_DF {DF_ALLOWOTHERACCOUNTHOOK = 0x1,};
enum MACRO_DI {DI_APPBANDING = 0x1,DI_ROPS_READ_DESTINATION = 0x2,};
enum MACRO_DL {DL_CURSORSET = 0,DL_STOPCURSOR = 1,DL_COPYCURSOR = 2,DL_MOVECURSOR = 3,};
enum MACRO_DM {DM_UPDATE = 1,DM_COPY = 2,DM_PROMPT = 4,DM_MODIFY = 8,DM_IN_BUFFER = 8,DM_IN_PROMPT = 4,DM_OUT_BUFFER = 2,DM_OUT_DEFAULT = 1,};
enum MACRO_DN {DN_DEFAULTPRN = 0x1,};
enum MACRO_DO {DO_DROPFILE = 0x454C4946,DO_PRINTFILE = 0x544E5250,};
enum MACRO_DP {DP_OK = 0,};
enum MACRO_DS {DS_ABSALIGN = 0x1,DS_SYSMODAL = 0x2,DS_LOCALEDIT = 0x20,DS_SETFONT = 0x40,DS_MODALFRAME = 0x80,DS_NOIDLEMSG = 0x100,DS_SETFOREGROUND = 0x200,DS_3DLOOK = 0x4,DS_FIXEDSYS = 0x8,DS_NOFAILCREATE = 0x10,DS_CONTROL = 0x400,DS_CENTER = 0x800,DS_CENTERMOUSE = 0x1000,DS_CONTEXTHELP = 0x2000,};
enum MACRO_DT {DT_PLOTTER = 0,DT_RASDISPLAY = 1,DT_RASPRINTER = 2,DT_RASCAMERA = 3,DT_CHARSTREAM = 4,DT_METAFILE = 5,DT_DISPFILE = 6,};
enum MACRO_DV {DV_SMCHN = 0xE000,DV_AUDIOMODE = 0xF00,DV_AUDIO5060 = 0x200000,DV_AUDIOSMP = 0x38000000,DV_AUDIOQU = 0x7000000,DV_NTSC525_60 = 0x0,DV_PAL625_50 = 0x1,DV_SD = 0x0,DV_HD = 0x1,DV_SL = 0x2,};
enum MACRO_EC {EC_LEFTMARGIN = 0x1,EC_RIGHTMARGIN = 0x2,EC_USEFONTINFO = 0xFFFF,};
enum MACRO_ED {ED_BASE = 0x1000,};
enum MACRO_EE {EE_MODAL = 0x1,};
enum MACRO_EM {EM_INVALID = 16,EM_DENORMAL = 524288,EM_ZERODIVIDE = 8,EM_OVERFLOW = 4,EM_UNDERFLOW = 2,EM_INEXACT = 1,};
enum MACRO_EN {EN_SETFOCUS = 0x100,EN_KILLFOCUS = 0x200,EN_CHANGE = 0x300,EN_UPDATE = 0x400,EN_ERRSPACE = 0x500,EN_MAXTEXT = 0x501,EN_HSCROLL = 0x601,EN_VSCROLL = 0x602,};
enum MACRO_ES {ES_SYSTEM_REQUIRED = 0x1,ES_DISPLAY_REQUIRED = 0x2,ES_USER_PRESENT = 0x4,ES_CONTINUOUS = 0x80000000,};
enum MACRO_ET {ET_DEVICENAME = 0x1,ET_MEDIATYPE = 0x2,ET_DITHERMODE = 0x4,ET_RESOLUTION = 0x8,ET_CMMTYPE = 0x10,ET_CLASS = 0x20,ET_DATACOLORSPACE = 0x40,ET_CONNECTIONSPACE = 0x80,ET_SIGNATURE = 0x100,ET_PLATFORM = 0x200,ET_PROFILEFLAGS = 0x400,ET_MANUFACTURER = 0x800,ET_MODEL = 0x1000,ET_ATTRIBUTES = 0x2000,ET_RENDERINGINTENT = 0x4000,ET_CREATOR = 0x8000,};
enum MACRO_EV {EV_RXCHAR = 0x1,EV_RXFLAG = 0x2,EV_TXEMPTY = 0x4,EV_CTS = 0x8,EV_DSR = 0x10,EV_RLSD = 0x20,EV_BREAK = 0x40,EV_ERR = 0x80,EV_RING = 0x100,EV_PERR = 0x200,EV_RX80FULL = 0x400,EV_EVENT1 = 0x800,EV_EVENT2 = 0x1000,};
enum MACRO_FD {FD_SETSIZE = 64,};
enum MACRO_FF {FF_DONTCARE = 0,FF_ROMAN = 16,FF_SWISS = 32,FF_MODERN = 48,FF_SCRIPT = 64,FF_DECORATIVE = 80,};
enum MACRO_FL {FL_FULLSTRING = 0x0,FL_SUBSTRING = 0x1,FL_PREFIX = 0x2,FL_IGNORECASE = 0x10000,FL_IGNORENONSPACE = 0x20000,FL_LOOSE = 0x40000,};
enum MACRO_FM {FM_CMESSAGES = 0x1,FM_LONGEST_WAIT = 0x2,FM_TOTAL_WAIT = 0x4,};
enum MACRO_FO {FO_MOVE = 0x1,FO_COPY = 0x2,FO_DELETE = 0x3,FO_RENAME = 0x4,};
enum MACRO_FP {FP_FUNCTION_MASK = 0x3F,FP_FORMAT_MASK = 0x30,FP_FORMAT_S = 0x0,FP_FORMAT_X = 0x10,FP_FORMAT_T = 0x20,FP_FORMAT_Q = 0x30,FP_FORMAT_SHIFT = 0x4,FP_ROUND_MASK = 0xC0,FP_ROUND_C = 0x0,FP_ROUND_M = 0x40,FP_ROUND_N = 0x80,FP_ROUND_D = 0xC0,FP_ROUND_SHIFT = 0x6,FP_TRAP_ENABLE_MASK = 0x700,FP_TRAP_ENABLE_NONE = 0x0,FP_TRAP_ENABLE_U = 0x100,FP_TRAP_ENABLE_I = 0x200,FP_TRAP_ENABLE_S = 0x400,FP_TRAP_ENABLE_SU = 0x500,FP_TRAP_ENABLE_SUI = 0x700,FP_TRAP_ENABLE_V = 0x100,FP_TRAP_ENABLE_SV = 0x500,FP_TRAP_ENABLE_SVI = 0x700,FP_TRAP_ENABLE_SHIFT = 0x8,};
enum MACRO_FR {FR_PRIVATE = 0x10,FR_NOT_ENUM = 0x20,};
enum MACRO_FS {FS_CASE_IS_PRESERVED = 2,FS_CASE_SENSITIVE = 1,FS_UNICODE_STORED_ON_DISK = 4,FS_PERSISTENT_ACLS = 8,FS_VOL_IS_COMPRESSED = 32768,FS_FILE_COMPRESSION = 16,};
enum MACRO_FW {FW_DONTCARE = 0,FW_THIN = 100,FW_EXTRALIGHT = 200,FW_LIGHT = 300,FW_NORMAL = 400,FW_MEDIUM = 500,FW_SEMIBOLD = 600,FW_BOLD = 700,FW_EXTRABOLD = 800,FW_HEAVY = 900,FW_ULTRALIGHT = 200,FW_REGULAR = 400,FW_DEMIBOLD = 600,FW_ULTRABOLD = 800,FW_BLACK = 900,};
enum MACRO_GA {GA_MIC = 1,GA_PARENT = 1,GA_ROOT = 2,GA_ROOTOWNER = 3,GA_MAC = 4,};
enum MACRO_GD {GD_USERDEFINED = 0,GD_CURSORCOMPONENT = 1,GD_BITMAP = 2,GD_ICONCOMPONENT = 3,GD_MENU = 4,GD_DIALOG = 5,GD_STRING = 6,GD_FONTDIR = 7,GD_FONT = 8,GD_ACCELERATORS = 9,GD_RCDATA = 10,GD_ERRTABLE = 11,GD_CURSOR = 12,GD_ICON = 14,GD_NAMETABLE = 15,GD_MAX_RESOURCE = 15,};
enum MACRO_GL {GL_LEVEL_NOGUIDELINE = 0x0,GL_LEVEL_FATAL = 0x1,GL_LEVEL_ERROR = 0x2,GL_LEVEL_WARNING = 0x3,GL_LEVEL_INFORMATION = 0x4,GL_ID_UNKNOWN = 0x0,GL_ID_NOMODULE = 0x1,GL_ID_NODICTIONARY = 0x10,GL_ID_CANNOTSAVE = 0x11,GL_ID_NOCONVERT = 0x20,GL_ID_TYPINGERROR = 0x21,GL_ID_TOOMANYSTROKE = 0x22,GL_ID_READINGCONFLICT = 0x23,GL_ID_INPUTREADING = 0x24,GL_ID_INPUTRADICAL = 0x25,GL_ID_INPUTCODE = 0x26,GL_ID_INPUTSYMBOL = 0x27,GL_ID_CHOOSECANDIDATE = 0x28,GL_ID_REVERSECONVERSION = 0x29,GL_ID_PRIVATE_FIRST = 0x8000,GL_ID_PRIVATE_LAST = 0xFFFF,};
enum MACRO_GM {GM_COMPATIBLE = 1,GM_ADVANCED = 2,GM_LAST = 2,};
enum MACRO_GR {GR_GDIOBJECTS = 0,GR_USEROBJECTS = 1,};
enum MACRO_GS {GS_8BIT_INDICES = 0x1,};
enum MACRO_GT {GT_DEFAULT = 0,GT_USECRLF = 1,};
enum MACRO_GW {GW_HWNDFIRST = 0,GW_HWNDLAST = 1,GW_HWNDNEXT = 2,GW_HWNDPREV = 3,GW_OWNER = 4,GW_CHILD = 5,GW_ENABLEDPOPUP = 6,GW_MAX = 6,};
enum MACRO_HC {HC_ACTION = 0,HC_GETNEXT = 1,HC_SKIP = 2,HC_NOREMOVE = 3,HC_NOREM = 3,HC_SYSMODALON = 4,HC_SYSMODALOFF = 5,};
enum MACRO_HE {HE_GETUNDERLINE = 7,HE_SETUNDERLINE = 8,HE_GETINKHANDLE = 9,HE_SETINKMODE = 10,HE_STOPINKMODE = 11,HE_DEFAULTFONT = 13,HE_CHARPOSITION = 14,HE_CHAROFFSET = 15,HE_GETBOXLAYOUT = 20,HE_SETBOXLAYOUT = 21,HE_ENABLEALTLIST = 40,HE_SHOWALTLIST = 41,HE_HIDEALTLIST = 42,HE_GETLENSTYPE = 43,HE_SETLENSTYPE = 44,};
enum MACRO_HN {HN_ENDREC = 4,HN_DELAYEDRECOGFAIL = 5,HN_RESULT = 20,HN_ENDKKCONVERT = 30,HN_BEGINDIALOG = 40,HN_ENDDIALOG = 41,};
enum MACRO_HP {HP_ALGID = 0x1,HP_HASHVAL = 0x2,HP_HASHSIZE = 0x4,HP_HMAC_INFO = 0x5,};
enum MACRO_HS {HS_HORIZONTAL = 0,HS_VERTICAL = 1,HS_FDIAGONAL = 2,HS_BDIAGONAL = 3,HS_CROSS = 4,HS_DIAGCROSS = 5,};
enum MACRO_HW {HW_PROFILE_GUIDLEN = 39,};
enum MACRO_IC {IC_AFFINE = 262144,IC_PROJECTIVE = 0,};
enum MACRO_ID {ID_PSRESTARTWINDOWS = 0x2,ID_PSREBOOTSYSTEM = 0x3,};
enum MACRO_IE {IE_BADID = -1,IE_OPEN = -2,IE_NOPEN = -3,IE_MEMORY = -4,IE_DEFAULT = -5,IE_HARDWARE = -10,IE_BYTESIZE = -11,IE_BAUDRATE = -12,};
enum MACRO_IF {IF_TYPE_OTHER = 1,IF_TYPE_LAN = 2,IF_TYPE_WAN_ROUTER = 3,IF_TYPE_WAN_WORKSTATION = 4,IF_TYPE_INTERNAL = 5,IF_TYPE_PERSONAL_WAN_ROUTER = 6,IF_TYPE_ROUTER_WORKSTATION_DIALOUT = 7,IF_TYPE_STANDALONE_WORKSTATION_DIALOUT = 8,};
enum MACRO_IG {IG_KD_CONTEXT = 1,IG_READ_CONTROL_SPACE = 2,IG_WRITE_CONTROL_SPACE = 3,IG_READ_IO_SPACE = 4,IG_WRITE_IO_SPACE = 5,IG_READ_PHYSICAL = 6,IG_WRITE_PHYSICAL = 7,IG_READ_IO_SPACE_EX = 8,IG_WRITE_IO_SPACE_EX = 9,IG_KSTACK_HELP = 10,IG_SET_THREAD = 11,IG_READ_MSR = 12,IG_WRITE_MSR = 13,IG_GET_DEBUGGER_DATA = 14,IG_GET_KERNEL_VERSION = 15,IG_RELOAD_SYMBOLS = 16,IG_GET_SET_SYMPATH = 17,IG_GET_EXCEPTION_RECORD = 18,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IO {IO_REPARSE_TAG_RESERVED_ZERO = 0,IO_REPARSE_TAG_RESERVED_ONE = 1,IO_REPARSE_TAG_RESERVED_RANGE = 1,IO_REPARSE_TAG_VALID_VALUES = -536805377,IO_REPARSE_TAG_SYMBOLIC_LINK = 0,IO_REPARSE_TAG_MOUNT_POINT = -1610612733,IO_REPARSE_TAG_HSM = -1073741820,IO_REPARSE_TAG_NSS = -2147483643,IO_REPARSE_TAG_NSSRECOVER = -2147483642,IO_REPARSE_TAG_SIS = -2147483641,IO_REPARSE_TAG_DFS = -2147483640,IO_COMPLETION_MODIFY_STATE = 2,IO_COMPLETION_ALL_ACCESS = 2031619,};
enum MACRO_IP {IP_ROUTER_MANAGER_VERSION = 1,IP_GENERAL_INFO_BASE = -65536,IP_IN_FILTER_INFO = -65535,IP_OUT_FILTER_INFO = -65534,IP_GLOBAL_INFO = -65533,IP_INTERFACE_STATUS_INFO = -65532,IP_ROUTE_INFO = -65531,IP_PROT_PRIORITY_INFO = -65530,IP_ROUTER_DISC_INFO = -65529,};
enum MACRO_IR {IR_STRINGSTART = 0x100,IR_STRINGEND = 0x101,IR_OPENCONVERT = 0x120,IR_CHANGECONVERT = 0x121,IR_CLOSECONVERT = 0x122,IR_FULLCONVERT = 0x123,IR_IMESELECT = 0x130,IR_STRING = 0x140,IR_DBCSCHAR = 0x160,IR_UNDETERMINE = 0x170,IR_STRINGEX = 0x180,IR_MODEINFO = 0x190,};
enum MACRO_IS {IS_TEXT_UNICODE_ASCII16 = 0x1,IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x10,IS_TEXT_UNICODE_STATISTICS = 0x2,IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x20,IS_TEXT_UNICODE_CONTROLS = 0x4,IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x40,IS_TEXT_UNICODE_SIGNATURE = 0x8,IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x80,IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x100,IS_TEXT_UNICODE_ODD_LENGTH = 0x200,IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x400,IS_TEXT_UNICODE_NULL_BYTES = 0x1000,IS_TEXT_UNICODE_UNICODE_MASK = 0xF,IS_TEXT_UNICODE_REVERSE_MASK = 0xF0,IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0xF00,IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000,};
enum MACRO_IT {IT_COMPACT = 0x0,IT_TYPICAL = 0x1,IT_PORTABLE = 0x2,IT_CUSTOM = 0x3,};
enum MACRO_IX {IX_END = 0xFFFF,};
enum MACRO_JL {JL_SENDER_ONLY = 0x1,JL_RECEIVER_ONLY = 0x2,JL_BOTH = 0x4,};
enum MACRO_KF {KF_EXTENDED = 0x100,KF_DLGMODE = 0x800,KF_MENUMODE = 0x1000,KF_ALTDOWN = 0x2000,KF_REPEAT = 0x4000,KF_UP = 0x8000,};
enum MACRO_KL {KL_NAMELENGTH = 9,};
enum MACRO_KP {KP_IV = 1,KP_SALT = 2,KP_PADDING = 3,KP_MODE = 4,KP_MODE_BITS = 5,KP_PERMISSIONS = 6,KP_ALGID = 7,KP_BLOCKLEN = 8,KP_KEYLEN = 9,KP_SALT_EX = 10,KP_P = 11,KP_G = 12,KP_Q = 13,KP_X = 14,KP_Y = 15,KP_RA = 16,KP_RB = 17,KP_INFO = 18,KP_EFFECTIVE_KEYLEN = 19,KP_SCHANNEL_ALG = 20,KP_CLIENT_RANDOM = 21,KP_SERVER_RANDOM = 22,KP_RP = 23,KP_PRECOMP_MD5 = 24,KP_PRECOMP_SHA = 25,KP_CERTIFICATE = 26,KP_CLEAR_KEY = 27,KP_PUB_EX_LEN = 28,KP_PUB_EX_VAL = 29,};
enum MACRO_LB {LB_CTLCODE = 0,LB_OKAY = 0,LB_ERR = -1,LB_ERRSPACE = -2,};
enum MACRO_LC {LC_NONE = 0,LC_POLYLINE = 2,LC_MARKER = 4,LC_POLYMARKER = 8,LC_WIDE = 16,LC_STYLED = 32,LC_WIDESTYLED = 64,LC_INTERIORS = 128,};
enum MACRO_LF {LF_FACESIZE = 32,LF_FULLFACESIZE = 64,};
enum MACRO_LG {LG_INCLUDE_INDIRECT = 0x1,};
enum MACRO_LK {LK_UNLCK = 0,LK_LOCK = 1,LK_NBLCK = 2,LK_RLCK = 3,LK_NBRLCK = 4,};
enum MACRO_LL {LL_INACTIVE = 0,LL_CONNECTING = 1,LL_RUNNING = 2,LL_DISCONNECTING = 3,};
enum MACRO_LP {LP_DEFAULT = 0x0,LP_MONOCHROME = 0x1,LP_VGACOLOR = 0x2,LP_COLOR = 0x4,};
enum MACRO_LR {LR_DEFAULTCOLOR = 0x0,LR_MONOCHROME = 0x1,LR_COLOR = 0x2,LR_COPYRETURNORG = 0x4,LR_COPYDELETEORG = 0x8,LR_LOADFROMFILE = 0x10,LR_LOADTRANSPARENT = 0x20,LR_DEFAULTSIZE = 0x40,LR_VGACOLOR = 0x80,LR_LOADMAP3DCOLORS = 0x1000,LR_CREATEDIBSECTION = 0x2000,LR_COPYFROMRESOURCE = 0x4000,LR_SHARED = 0x8000,};
enum MACRO_LS {LS_DEFAULT_UNITS = 0xFFFFFFFF,LS_USE_LAST = 0x800FFFF,LS_INFO_NONE = 0x0,LS_INFO_SYSTEM = 0x1,LS_INFO_DATA = 0x2,LS_UPDATE_PERIOD = 0x3,LS_LICENSE_CONTEXT = 0x4,LS_BASIC_PROTOCOL = 0x1,LS_SQRT_PROTOCOL = 0x2,LS_OUT_OF_BAND_PROTOCOL = 0xFFFFFFFF,LS_NULL = 0x0,LS_MAX_PROVIDER_NAME = 0xFF,LS_NO_RECOMMENDATION = 0xFFFFFFFF,LS_LICENSE_TYPE_NODE = 0x0,LS_LICENSE_TYPE_USER = 0x1,LS_LICENSE_TYPE_SERVER = 0x2,};
enum MACRO_LV {LV_MAX_WORKAREAS = 16,};
enum MACRO_MA {MA_ACTIVATE = 1,MA_ACTIVATEANDEAT = 2,MA_NOACTIVATE = 3,MA_NOACTIVATEANDEAT = 4,};
enum MACRO_MB {MB_OK = 0x0,MB_OKCANCEL = 0x1,MB_ABORTRETRYIGNORE = 0x2,MB_YESNOCANCEL = 0x3,MB_YESNO = 0x4,MB_RETRYCANCEL = 0x5,MB_ICONHAND = 0x10,MB_ICONQUESTION = 0x20,MB_ICONEXCLAMATION = 0x30,MB_ICONASTERISK = 0x40,MB_USERICON = 0x80,MB_ICONWARNING = 0x30,MB_ICONERROR = 0x10,MB_ICONINFORMATION = 0x40,MB_ICONSTOP = 0x10,MB_DEFBUTTON1 = 0x0,MB_DEFBUTTON2 = 0x100,MB_DEFBUTTON3 = 0x200,MB_DEFBUTTON4 = 0x300,MB_APPLMODAL = 0x0,MB_SYSTEMMODAL = 0x1000,MB_TASKMODAL = 0x2000,MB_HELP = 0x4000,MB_NOFOCUS = 0x8000,MB_SETFOREGROUND = 0x10000,MB_DEFAULT_DESKTOP_ONLY = 0x20000,MB_TOPMOST = 0x40000,MB_RIGHT = 0x80000,MB_RTLREADING = 0x100000,MB_SERVICE_NOTIFICATION = 0x200000,MB_SERVICE_NOTIFICATION_NT3X = 0x40000,MB_TYPEMASK = 0xF,MB_ICONMASK = 0xF0,MB_DEFMASK = 0xF00,MB_MODEMASK = 0x3000,MB_MISCMASK = 0xC000,};
enum MACRO_MD {MD_DIMTYPE_UNKNOWN = 0x0,MD_DIMTYPE_TIME = 0x1,MD_DIMTYPE_MEASURE = 0x2,MD_DIMTYPE_OTHER = 0x3,};
enum MACRO_MF {MF_INSERT = 0x0,MF_CHANGE = 0x80,MF_APPEND = 0x100,MF_DELETE = 0x200,MF_REMOVE = 0x1000,MF_BYCOMMAND = 0x0,MF_BYPOSITION = 0x400,MF_SEPARATOR = 0x800,MF_ENABLED = 0x0,MF_GRAYED = 0x1,MF_DISABLED = 0x2,MF_UNCHECKED = 0x0,MF_CHECKED = 0x8,MF_USECHECKBITMAPS = 0x200,MF_STRING = 0x0,MF_BITMAP = 0x4,MF_OWNERDRAW = 0x100,MF_POPUP = 0x10,MF_MENUBARBREAK = 0x20,MF_MENUBREAK = 0x40,MF_UNHILITE = 0x0,MF_HILITE = 0x80,MF_DEFAULT = 0x1000,MF_SYSMENU = 0x2000,MF_HELP = 0x4000,MF_RIGHTJUSTIFY = 0x4000,MF_MOUSESELECT = 0x8000,MF_END = 0x80,};
enum MACRO_MH {MH_CREATE = 1,MH_KEEP = 2,MH_DELETE = 3,MH_CLEANUP = 4,};
enum MACRO_MK {MK_E_FIRST = 0x800401E0,MK_E_LAST = 0x800401EF,MK_S_FIRST = 0x401E0,MK_S_LAST = 0x401EF,};
enum MACRO_MM {MM_TEXT = 1,MM_LOMETRIC = 2,MM_HIMETRIC = 3,MM_LOENGLISH = 4,MM_HIENGLISH = 5,MM_TWIPS = 6,MM_ISOTROPIC = 7,MM_ANISOTROPIC = 8,MM_MIN = 1,MM_MAX = 8,MM_MAX_FIXEDSCALE = 6,};
enum MACRO_MQ {MQ_MAX_Q_NAME_LEN = 124,MQ_MAX_Q_LABEL_LEN = 124,MQ_MAX_MSG_LABEL_LEN = 250,MQ_RECEIVE_ACCESS = 1,MQ_SEND_ACCESS = 2,MQ_PEEK_ACCESS = 32,MQ_DENY_NONE = 0,MQ_DENY_RECEIVE_SHARE = 1,MQ_ACTION_RECEIVE = 0,MQ_ACTION_PEEK_CURRENT = -2147483648,MQ_ACTION_PEEK_NEXT = -2147483647,MQ_NO_TRANSACTION = 0,MQ_MTS_TRANSACTION = 1,MQ_XA_TRANSACTION = 2,MQ_SINGLE_MESSAGE = 3,MQ_MIN_PRIORITY = 0,MQ_MAX_PRIORITY = 7,};
enum MACRO_MS {MS_CTS_ON = 0x10,MS_DSR_ON = 0x20,MS_RING_ON = 0x40,MS_RLSD_ON = 0x80,};
enum MACRO_MV {MV_FLAG = 0x1000,};
enum MACRO_NE {NE_E_NOMAP = 0,NE_E_NOMEMORY = 1,NE_E_NOACCESS = 2,NE_E_CONNBUSY = 3,NE_E_CONNBROKEN = 4,NE_E_TOOMANYCONN = 5,NE_E_SERVERNOTFOUND = 6,NE_E_NETNOTSTARTED = 7,NE_E_NORESOURCE = 8,NE_E_NETBUSY = 9,NE_E_NONETACCESS = 10,NE_E_GENERAL = 11,NE_E_CONNMODE = 12,NE_E_NAMENOTFOUND = 13,NE_E_INVALIDCONN = 14,NE_E_NETDATAERR = 15,NE_E_TOOMANYFILES = 16,NE_E_CANTCONNECT = 17,NE_MAX_NETERROR = 17,};
enum MACRO_NF {NF_QUERY = 3,NF_REQUERY = 4,};
enum MACRO_NI {NI_OPENCANDIDATE = 0x10,NI_CLOSECANDIDATE = 0x11,NI_SELECTCANDIDATESTR = 0x12,NI_CHANGECANDIDATELIST = 0x13,NI_FINALIZECONVERSIONRESULT = 0x14,NI_COMPOSITIONSTR = 0x15,NI_SETCANDIDATE_PAGESTART = 0x16,NI_SETCANDIDATE_PAGESIZE = 0x17,NI_IMEMENUSELECTED = 0x18,};
enum MACRO_NM {NM_ACCESS_CATEGORY = 0x1000C,NM_ACTIVATION_SCHEDULE = 0x25581,NM_ACTIVATION_STYLE = 0x10049,NM_ADDRESS = 0x20082,NM_ADDRESS_ENTRY_DISPLAY_TABLE = 0x24482,NM_ADDRESS_ENTRY_DISPLAY_TABLE_MSDOS = 0x21083,NM_ADDRESS_SYNTAX = 0x27F81,NM_ADDRESS_TYPE = 0x25E82,NM_ADMD = 0x26881,NM_ADMIN_DESCRIPTION = 0x26281,NM_ADMIN_DISPLAY_NAME = 0x24281,NM_ADMIN_EXTENSION_DLL = 0x1005F,NM_ALT_RECIPIENT = 0x1007E,NM_ALT_RECIPIENT_BL = 0x22682,NM_ANCESTOR_ID = 0x20582,NM_ASSISTANT_NAME = 0x23C83,NM_ASSOC_NT_ACCOUNT = 0x25481,NM_ASSOC_REMOTE_DXA = 0x22B82,NM_ASSOCIATION_LIFETIME = 0x21581,NM_ATTRIBUTE_ID = 0x1001E,NM_ATTRIBUTE_SYNTAX = 0x10020,NM_AUTH_ORIG = 0x20181,NM_AUTH_ORIG_BL = 0x22282,NM_AUTHORIZED_DOMAIN = 0x24A81,NM_AUTHORIZED_PASSWORD = 0x24181,NM_AUTHORIZED_USER = 0x21482,NM_AUTOREPLY = 0x21E82,NM_AUTOREPLY_MESSAGE = 0x21F82,NM_AUTOREPLY_SUBJECT = 0x23A83,NM_AUXILIARY_CLASS = 0x25F82,NM_BRIDGEHEAD_SERVERS = 0x24F83,NM_BUSINESS_ROLES = 0x10069,NM_CAN_CREATE_PF = 0x1000B,NM_CAN_CREATE_PF_BL = 0x25382,NM_CAN_CREATE_PF_DL = 0x1003E,NM_CAN_CREATE_PF_DL_BL = 0x25482,NM_CAN_NOT_CREATE_PF = 0x1003F,NM_CAN_NOT_CREATE_PF_BL = 0x25582,NM_CAN_NOT_CREATE_PF_DL = 0x22C82,NM_CAN_NOT_CREATE_PF_DL_BL = 0x25682,NM_CAN_PRESERVE_DNS = 0x24783,NM_CLOCK_ALERT_OFFSET = 0x22581,NM_CLOCK_ALERT_REPAIR = 0x22481,NM_CLOCK_WARNING_OFFSET = 0x23181,NM_CLOCK_WARNING_REPAIR = 0x22681,NM_COMMENT = 0x10051,NM_COMPANY = 0x21281,NM_COMPUTER_NAME = 0x10014,NM_CONNECTED_DOMAINS = 0x25381,NM_CONTAINER_INFO = 0x22882,NM_COST = 0x20781,NM_DELIV_CONT_LENGTH = 0x20A81,NM_DELIV_EITS = 0x20B81,NM_DELIV_EXT_CONT_TYPES = 0x20C81,NM_DELIVER_AND_REDIRECT = 0x23E81,NM_DELIVERY_MECHANISM = 0x27181,NM_DEPARTMENT = 0x20D81,NM_DIAGNOSTIC_REG_KEY = 0x23D81,NM_DISPLAY_NAME = 0x1000D,NM_DISPLAY_NAME_OVERRIDE = 0x24082,NM_DISPLAY_NAME_PRINTABLE = 0x26182,NM_DL_MEM_REJECT_PERMS = 0x1002F,NM_DL_MEM_REJECT_PERMS_BL = 0x22582,NM_DL_MEM_SUBMIT_PERMS = 0x21081,NM_DL_MEM_SUBMIT_PERMS_BL = 0x22382,NM_DL_MEMBER_RULE = 0x24A82,NM_DMD_LOCATION = 0x10024,NM_DOMAIN_DEF_ALT_RECIP = 0x21181,NM_DOMAIN_NAME = 0x21381,NM_DSA_SIGNATURE = 0x1004A,NM_DXA_ADMIN_COPY = 0x27A82,NM_DXA_ADMIN_FORWARD = 0x27B82,NM_DXA_ADMIN_UPDATE = 0x27D82,NM_DXA_APPEND_REQCN = 0x22E81,NM_DXA_CONF_CONTAINER_LIST = 0x23481,NM_DXA_CONF_REQ_TIME = 0x1007A,NM_DXA_CONF_SEQ = 0x23881,NM_DXA_CONF_SEQ_USN = 0x1002D,NM_DXA_EXCHANGE_OPTIONS = 0x26782,NM_DXA_EXPORT_NOW = 0x27982,NM_DXA_FLAGS = 0x1006A,NM_DXA_IMP_SEQ = 0x10074,NM_DXA_IMP_SEQ_TIME = 0x10075,NM_DXA_IMP_SEQ_USN = 0x10056,NM_DXA_IMPORT_NOW = 0x27882,NM_DXA_IN_TEMPLATE_MAP = 0x26B82,NM_DXA_LOCAL_ADMIN = 0x10071,NM_DXA_LOGGING_LEVEL = 0x27E82,NM_DXA_NATIVE_ADDRESS_TYPE = 0x24B82,NM_DXA_OUT_TEMPLATE_MAP = 0x26C82,NM_DXA_PASSWORD = 0x23182,NM_DXA_PREV_EXCHANGE_OPTIONS = 0x25881,NM_DXA_PREV_EXPORT_NATIVE_ONLY = 0x24B81,NM_DXA_PREV_IN_EXCHANGE_SENSITIVITY = 0x1005A,NM_DXA_PREV_REMOTE_ENTRIES = 0x20982,NM_DXA_PREV_REPLICATION_SENSITIVITY = 0x25781,NM_DXA_PREV_TEMPLATE_OPTIONS = 0x20B83,NM_DXA_PREV_TYPES = 0x25981,NM_DXA_RECIPIENT_CP = 0x20083,NM_DXA_REMOTE_CLIENT = 0x10070,NM_DXA_REQ_SEQ = 0x10065,NM_DXA_REQ_SEQ_TIME = 0x10072,NM_DXA_REQ_SEQ_USN = 0x23681,NM_DXA_REQNAME = 0x23E83,NM_DXA_SVR_SEQ = 0x26882,NM_DXA_SVR_SEQ_TIME = 0x26982,NM_DXA_SVR_SEQ_USN = 0x1007C,NM_DXA_TASK = 0x10064,NM_DXA_TEMPLATE_OPTIONS = 0x26682,NM_DXA_TEMPLATE_TIMESTAMP = 0x26D82,NM_DXA_TYPES = 0x10077,NM_DXA_UNCONF_CONTAINER_LIST = 0x23581,NM_ENABLED_PROTOCOLS = 0x25A83,NM_ENCAPSULATION_METHOD = 0x24083,NM_ENCRYPT = 0x26C81,NM_ENCRYPT_ALG_LIST_NA = 0x20281,NM_ENCRYPT_ALG_LIST_OTHER = 0x20F83,NM_ENCRYPT_ALG_SELECTED_NA = 0x21183,NM_ENCRYPT_ALG_SELECTED_OTHER = 0x20D83,NM_EXPAND_DLS_LOCALLY = 0x24981,NM_EXPIRATION_TIME = 0x20A83,NM_EXPORT_CONTAINERS = 0x1006F,NM_EXPORT_CUSTOM_RECIPIENTS = 0x23382,NM_EXTENDED_CHARS_ALLOWED = 0x27C82,NM_EXTENSION_ATTRIBUTE_1 = 0x22783,NM_EXTENSION_ATTRIBUTE_10 = 0x23083,NM_EXTENSION_ATTRIBUTE_2 = 0x22883,NM_EXTENSION_ATTRIBUTE_3 = 0x22983,NM_EXTENSION_ATTRIBUTE_4 = 0x22A83,NM_EXTENSION_ATTRIBUTE_5 = 0x22B83,NM_EXTENSION_ATTRIBUTE_6 = 0x22C83,NM_EXTENSION_ATTRIBUTE_7 = 0x22D83,NM_EXTENSION_ATTRIBUTE_8 = 0x22E83,NM_EXTENSION_ATTRIBUTE_9 = 0x22F83,NM_EXTENSION_DATA = 0x26481,NM_EXTENSION_NAME = 0x26381,NM_EXTENSION_NAME_INHERITED = 0x10061,NM_FILE_VERSION = 0x23281,NM_FILTER_LOCAL_ADDRESSES = 0x1002C,NM_FOLDER_PATHNAME = 0x25182,NM_FOLDERS_CONTAINER = 0x26B81,NM_FOREIGN_DSAS = 0x10044,NM_GARBAGE_COLL_PERIOD = 0x22D82,NM_GATEWAY_LOCAL_CRED = 0x10025,NM_GATEWAY_LOCAL_DESIG = 0x1001D,NM_GATEWAY_PROXY = 0x22E82,NM_GATEWAY_ROUTING_TREE = 0x22781,NM_GIVEN_NAME = 0x10029,NM_GOVERNS_ID = 0x10016,NM_GWART_LAST_MODIFIED = 0x20482,NM_HAS_FULL_REPLICA_NCS = 0x1000F,NM_HAS_MASTER_NCS = 0x1000E,NM_HELP_DATA16 = 0x21283,NM_HELP_DATA32 = 0x10009,NM_HELP_FILE_NAME = 0x24782,NM_HEURISTICS = 0x24483,NM_HIDE_DL_MEMBERSHIP = 0x22982,NM_HIDE_FROM_ADDRESS_BOOK = 0x22981,NM_HOME_MDB = 0x27481,NM_HOME_MDB_BL = 0x20983,NM_HOME_MTA = 0x22B81,NM_HOME_PUBLIC_SERVER = 0x23983,NM_IMPORT_CONTAINER = 0x1006E,NM_IMPORT_SENSITIVITY = 0x27F82,NM_IMPORTED_FROM = 0x20782,NM_INBOUND_SITES = 0x10047,NM_INITIALS = 0x20E83,NM_INSTANCE_TYPE = 0x10001,NM_INVOCATION_ID = 0x10073,NM_IS_DELETED = 0x10030,NM_IS_MEMBER_OF_DL = 0x10066,NM_IS_SINGLE_VALUED = 0x10021,NM_KCC_STATUS = 0x26D81,NM_KM_SERVER = 0x23883,NM_LANGUAGE = 0x25383,NM_LDAP_DISPLAY_NAME = 0x24C83,NM_LINE_WRAP = 0x24183,NM_LINK_ID = 0x10032,NM_LOCAL_BRIDGE_HEAD = 0x23782,NM_LOCAL_BRIDGE_HEAD_ADDRESS = 0x26181,NM_LOCAL_INITIAL_TURN = 0x10027,NM_LOCAL_SCOPE = 0x10011,NM_LOG_FILENAME = 0x24081,NM_LOG_ROLLOVER_INTERVAL = 0x25C82,NM_MAIL_NICKNAME = 0x23F83,NM_MAINTAIN_AUTOREPLY_HISTORY = 0x25181,NM_MANAGER = 0x24F82,NM_MAPI_DISPLAY_TYPE = 0x10037,NM_MAPI_ID = 0x10031,NM_MAPI_RECIPIENT = 0x27382,NM_MASTER_DSA = 0x10006,NM_MAXIMUM_OBJECT_ID = 0x24A83,NM_MAY_CONTAIN = 0x10019,NM_MDB_BACKOFF_INTERVAL = 0x10048,NM_MDB_MSG_TIME_OUT_PERIOD = 0x10040,NM_MDB_OVER_QUOTA_LIMIT = 0x21082,NM_MDB_STORAGE_QUOTA = 0x20A82,NM_MDB_UNREAD_LIMIT = 0x10045,NM_MDB_USE_DEFAULTS = 0x23582,NM_MESSAGE_TRACKING_ENABLED = 0x24583,NM_MONITOR_CLOCK = 0x22381,NM_MONITOR_SERVERS = 0x21C81,NM_MONITOR_SERVICES = 0x22081,NM_MONITORED_CONFIGURATIONS = 0x24681,NM_MONITORED_SERVERS = 0x23381,NM_MONITORED_SERVICES = 0x24781,NM_MONITORING_ALERT_DELAY = 0x21E81,NM_MONITORING_ALERT_UNITS = 0x10039,NM_MONITORING_AVAILABILITY_STYLE = 0x24283,NM_MONITORING_AVAILABILITY_WINDOW = 0x24881,NM_MONITORING_CACHED_VIA_MAIL = 0x24481,NM_MONITORING_CACHED_VIA_RPC = 0x24581,NM_MONITORING_ESCALATION_PROCEDURE = 0x23C81,NM_MONITORING_HOTSITE_POLL_INTERVAL = 0x23A81,NM_MONITORING_HOTSITE_POLL_UNITS = 0x10057,NM_MONITORING_MAIL_UPDATE_INTERVAL = 0x24381,NM_MONITORING_MAIL_UPDATE_UNITS = 0x1005D,NM_MONITORING_NORMAL_POLL_INTERVAL = 0x23B81,NM_MONITORING_NORMAL_POLL_UNITS = 0x10058,NM_MONITORING_RECIPIENTS = 0x21F81,NM_MONITORING_RECIPIENTS_NDR = 0x20383,NM_MONITORING_RPC_UPDATE_INTERVAL = 0x1005C,NM_MONITORING_RPC_UPDATE_UNITS = 0x10059,NM_MONITORING_WARNING_DELAY = 0x21D81,NM_MONITORING_WARNING_UNITS = 0x10038,NM_MTA_LOCAL_CRED = 0x20E82,NM_MTA_LOCAL_DESIG = 0x20F82,NM_MUST_CONTAIN = 0x10018,NM_N_ADDRESS = 0x21A82,NM_N_ADDRESS_TYPE = 0x25E81,NM_NETWORK_ADDRESS = 0x24B83,NM_NNTP_CHARACTER_SET = 0x25883,NM_NNTP_CONTENT_FORMAT = 0x25183,NM_NT_MACHINE_NAME = 0x24683,NM_NT_SECURITY_DESCRIPTOR = 0x21982,NM_NUM_OF_OPEN_RETRIES = 0x21481,NM_NUM_OF_TRANSFER_RETRIES = 0x20681,NM_OBJ_DIST_NAME = 0x10033,NM_OBJECT_CLASS_CATEGORY = 0x27282,NM_OBJECT_VERSION = 0x1004C,NM_OFF_LINE_AB_CONTAINERS = 0x20783,NM_OFF_LINE_AB_SCHEDULE = 0x20583,NM_OFF_LINE_AB_SERVER = 0x20883,NM_OFF_LINE_AB_STYLE = 0x20683,NM_OID_TYPE = 0x24282,NM_OM_OBJECT_CLASS = 0x25A81,NM_OM_SYNTAX = 0x26781,NM_OOF_REPLY_TO_ORIGINATOR = 0x23683,NM_OPEN_RETRY_INTERVAL = 0x20F81,NM_ORIGINAL_DISPLAY_TABLE = 0x23D83,NM_ORIGINAL_DISPLAY_TABLE_MSDOS = 0x25681,NM_OUTBOUND_SITES = 0x10000,NM_OWNER_BL = 0x10068,NM_P_SELECTOR = 0x21D82,NM_P_SELECTOR_INBOUND = 0x10034,NM_PER_MSG_DIALOG_DISPLAY_TABLE = 0x24582,NM_PER_RECIP_DIALOG_DISPLAY_TABLE = 0x24682,NM_PERIOD_REP_SYNC_TIMES = 0x20C82,NM_PERIOD_REPL_STAGGER = 0x20882,NM_PF_CONTACTS = 0x1004B,NM_POP_CHARACTER_SET = 0x25483,NM_POP_CONTENT_FORMAT = 0x25283,NM_POSS_SUPERIORS = 0x10008,NM_PRMD = 0x26081,NM_PROXY_ADDRESSES = 0x25281,NM_PROXY_GENERATOR_DLL = 0x24882,NM_PUBLIC_DELEGATES = 0x26E81,NM_PUBLIC_DELEGATES_BL = 0x22782,NM_QUOTA_NOTIFICATION_SCHEDULE = 0x10062,NM_QUOTA_NOTIFICATION_STYLE = 0x20483,NM_RANGE_LOWER = 0x10022,NM_RANGE_UPPER = 0x10023,NM_RAS_CALLBACK_NUMBER = 0x23B82,NM_RAS_PHONE_NUMBER = 0x23A82,NM_RAS_PHONEBOOK_ENTRY_NAME = 0x23982,NM_RAS_REMOTE_SRVR_NAME = 0x1004E,NM_RDN_ATT_ID = 0x1001A,NM_REF_FULL_REPLICAS = 0x10041,NM_REF_MASTER_DSA = 0x10042,NM_REMOTE_BRIDGE_HEAD = 0x23F81,NM_REMOTE_BRIDGE_HEAD_ADDRESS = 0x1005E,NM_REMOTE_OUT_BH_SERVER = 0x23682,NM_REMOTE_SITE = 0x1001B,NM_REPLICATION_MAIL_MSG_SIZE = 0x10067,NM_REPLICATION_SENSITIVITY = 0x25F81,NM_REPLICATION_STAGGER = 0x25D82,NM_REPORT_TO_ORIGINATOR = 0x24E81,NM_REPORT_TO_OWNER = 0x24F81,NM_REPORTS = 0x23483,NM_REPS_FROM = 0x1005B,NM_REPS_TO = 0x10053,NM_REPS_TO_EXT = 0x1002B,NM_REQ_SEQ = 0x22D81,NM_RESPONSIBLE_LOCAL_DXA = 0x22A82,NM_RID_SERVER = 0x25A82,NM_ROUTING_LIST = 0x26282,NM_RTS_CHECKPOINT_SIZE = 0x21881,NM_RTS_RECOVERY_TIMEOUT = 0x21781,NM_RTS_WINDOW_SIZE = 0x21981,NM_RUNS_ON = 0x23981,NM_S_SELECTOR = 0x21C82,NM_S_SELECTOR_INBOUND = 0x1002E,NM_SCHEMA_FLAGS = 0x24E83,NM_SCHEMA_VERSION = 0x25783,NM_SEARCH_FLAGS = 0x24E82,NM_SECURITY_PROTOCOL = 0x10052,NM_SERVICE_ACTION_FIRST = 0x22181,NM_SERVICE_ACTION_OTHER = 0x1003B,NM_SERVICE_ACTION_SECOND = 0x1003C,NM_SERVICE_RESTART_DELAY = 0x22281,NM_SERVICE_RESTART_MESSAGE = 0x1003A,NM_SESSION_DISCONNECT_TIMER = 0x21A81,NM_SITE_AFFINITY = 0x23283,NM_SITE_FOLDER_GUID = 0x24883,NM_SITE_FOLDER_SERVER = 0x24983,NM_SITE_PROXY_SPACE = 0x20183,NM_SPACE_LAST_COMPUTED = 0x20283,NM_SUB_CLASS_OF = 0x10015,NM_SUB_REFS = 0x10007,NM_SUB_SITE = 0x25683,NM_SUBMISSION_CONT_LENGTH = 0x21882,NM_SUPPORTING_STACK = 0x1001C,NM_SUPPORTING_STACK_BL = 0x26582,NM_T_SELECTOR = 0x21B82,NM_T_SELECTOR_INBOUND = 0x10005,NM_TARGET_ADDRESS = 0x26082,NM_TARGET_MTAS = 0x20382,NM_TELEPHONE_ASSISTANT = 0x1004F,NM_TELEPHONE_FAX = 0x1002A,NM_TELEPHONE_HOME = 0x1004D,NM_TELEPHONE_HOME2 = 0x21582,NM_TELEPHONE_MOBILE = 0x10004,NM_TELEPHONE_OFFICE1 = 0x10076,NM_TELEPHONE_OFFICE2 = 0x10012,NM_TELEPHONE_PAGER = 0x20682,NM_TEMP_ASSOC_THRESHOLD = 0x24982,NM_TEXT_COUNTRY = 0x20381,NM_TOMBSTONE_LIFETIME = 0x10036,NM_TRACKING_LOG_PATH_NAME = 0x25B82,NM_TRANS_RETRY_MINS = 0x25B81,NM_TRANS_TIMEOUT_MINS = 0x25C81,NM_TRANSFER_RETRY_INTERVAL = 0x20581,NM_TRANSFER_TIMEOUT_NON_URGENT = 0x20881,NM_TRANSFER_TIMEOUT_NORMAL = 0x20981,NM_TRANSFER_TIMEOUT_URGENT = 0x20E81,NM_TRANSLATION_TABLE_USED = 0x20C83,NM_TRANSPORT_EXPEDITED_DATA = 0x21681,NM_TRUST_LEVEL = 0x10046,NM_TURN_REQUEST_THRESHOLD = 0x10026,NM_TWO_WAY_ALTERNATE_FACILITY = 0x10028,NM_UNAUTH_ORIG = 0x25D81,NM_UNAUTH_ORIG_BL = 0x22482,NM_USE_SERVER_VALUES = 0x25983,NM_USN_CHANGED = 0x10078,NM_USN_CREATED = 0x10013,NM_USN_DSA_LAST_OBJ_REMOVED = 0x20B82,NM_USN_INTERSITE = 0x25583,NM_USN_LAST_OBJ_REM = 0x10079,NM_USN_SOURCE = 0x27682,NM_WHEN_CHANGED = 0x10003,NM_WHEN_CREATED = 0x10002,NM_WWW_HOME_PAGE = 0x25083,NM_X25_CALL_USER_DATA_INCOMING = 0x23C82,NM_X25_CALL_USER_DATA_OUTGOING = 0x23D82,NM_X25_FACILITIES_DATA_INCOMING = 0x23E82,NM_X25_FACILITIES_DATA_OUTGOING = 0x23F82,NM_X25_LEASED_LINE_PORT = 0x24182,NM_X25_LEASED_OR_SWITCHED = 0x27482,NM_X25_REMOTE_MTA_PHONE = 0x27582,NM_X400_ATTACHMENT_TYPE = 0x10063,NM_X400_SELECTOR_SYNTAX = 0x23B83,NM_X500_ACCESS_CONTROL_LIST = 0x23183,NM_X509_CERT = 0x24D83,NM_XMIT_TIMEOUT_NON_URGENT = 0x10054,NM_XMIT_TIMEOUT_NORMAL = 0x10043,NM_XMIT_TIMEOUT_URGENT = 0x10035,NM_ALIASED_OBJECT_NAME = 0x10001,NM_BUSINESS_CATEGORY = 0x1000F,NM_COMMON_NAME = 0x10003,NM_COUNTRY_NAME = 0x10006,NM_DESCRIPTION = 0x1000D,NM_DEST_INDICATOR = 0x1001B,NM_FACSIMILE_PHONE_NBR = 0x10017,NM_INTERNAT_ISDN_NBR = 0x10019,NM_KNOWLEDGE_INFO = 0x10002,NM_LOCALITY_NAME = 0x10007,NM_MEMBER = 0x1001F,NM_OBJECT_CLASS = 0x10000,NM_ORG_NAME = 0x1000A,NM_ORG_UNIT_NAME = 0x1000B,NM_OWNER = 0x10020,NM_PHYS_DELIV_OFF_NAME = 0x10013,NM_POST_OFFICE_BOX = 0x10012,NM_POSTAL_ADDRESS = 0x10010,NM_POSTAL_CODE = 0x10011,NM_PREF_DELIV_METHOD = 0x1001C,NM_PRESENTATION_ADDRESS = 0x1001D,NM_REGISTERED_ADDRESS = 0x1001A,NM_ROLE_OCCUPANT = 0x10021,NM_SEARCH_GUIDE = 0x1000E,NM_SEE_ALSO = 0x10022,NM_SERIAL_NBR = 0x10005,NM_STATE_OR_PROV_NAME = 0x10008,NM_STREET_ADDRESS = 0x10009,NM_SUPPORT_APPL_CONTEXT = 0x1001E,NM_SURNAME = 0x10004,NM_PHONE_NBR = 0x10014,NM_TELETEX_TERM_IDENT = 0x10016,NM_TELEX_NBR = 0x10015,NM_TITLE = 0x1000C,NM_USER_PASSWORD = 0x10023,NM_X121_ADDRESS = 0x10018,NM_AUTHORITY_REVOC_LIST = 0x10026,NM_CA_CERT = 0x10025,NM_CERT_REVOC_LIST = 0x10027,NM_CROSS_CERT_PAIR = 0x10028,NM_USER_CERT = 0x10024,};
enum MACRO_NO {NO_ATTACHMENT = 0x0,};
enum MACRO_NS {NS_ALL = 0,NS_SAP = 1,NS_NDS = 2,NS_PEER_BROWSE = 3,NS_TCPIP_LOCAL = 10,NS_TCPIP_HOSTS = 11,NS_DNS = 12,NS_NETBT = 13,NS_WINS = 14,NS_NBP = 20,NS_MS = 30,NS_STDA = 31,NS_NTDS = 32,NS_X500 = 40,NS_NIS = 41,NS_NISPLUS = 42,NS_WRQ = 50,};
enum MACRO_OF {OF_READ = 0x0,OF_WRITE = 0x1,OF_READWRITE = 0x2,OF_SHARE_COMPAT = 0x0,OF_SHARE_EXCLUSIVE = 0x10,OF_SHARE_DENY_WRITE = 0x20,OF_SHARE_DENY_READ = 0x30,OF_SHARE_DENY_NONE = 0x40,OF_PARSE = 0x100,OF_DELETE = 0x200,OF_VERIFY = 0x400,OF_CANCEL = 0x800,OF_CREATE = 0x1000,OF_PROMPT = 0x2000,OF_EXIST = 0x4000,OF_REOPEN = 0x8000,};
enum MACRO_ON {NUMLOCK_ON = 0x20,SCROLLLOCK_ON = 0x40,CAPSLOCK_ON = 0x80,};
enum MACRO_OP {CALLPAL_OP = 0x0,_01_OP = 0x1,_02_OP = 0x2,_03_OP = 0x3,_04_OP = 0x4,_05_OP = 0x5,_06_OP = 0x6,_07_OP = 0x7,_0A_OP = 0xA,_0C_OP = 0xC,_0D_OP = 0xD,_0E_OP = 0xE,_1C_OP = 0x1C,LDA_OP = 0x8,LDAH_OP = 0x9,LDBU_OP = 0xA,LDQ_U_OP = 0xB,LDWU_OP = 0xC,STW_OP = 0xD,STB_OP = 0xE,STQ_U_OP = 0xF,ARITH_OP = 0x10,BIT_OP = 0x11,BYTE_OP = 0x12,MUL_OP = 0x13,_14_OP = 0x14,VAXFP_OP = 0x15,IEEEFP_OP = 0x16,FPOP_OP = 0x17,MEMSPC_OP = 0x18,PAL19_OP = 0x19,JMP_OP = 0x1A,PAL1B_OP = 0x1B,SEXT_OP = 0x1C,PAL1D_OP = 0x1D,PAL1E_OP = 0x1E,PAL1F_OP = 0x1F,LDF_OP = 0x20,LDG_OP = 0x21,LDS_OP = 0x22,LDT_OP = 0x23,STF_OP = 0x24,STG_OP = 0x25,STS_OP = 0x26,STT_OP = 0x27,LDL_OP = 0x28,LDQ_OP = 0x29,LDL_L_OP = 0x2A,LDQ_L_OP = 0x2B,STL_OP = 0x2C,STQ_OP = 0x2D,STL_C_OP = 0x2E,STQ_C_OP = 0x2F,BR_OP = 0x30,FBEQ_OP = 0x31,FBLT_OP = 0x32,FBLE_OP = 0x33,BSR_OP = 0x34,FBNE_OP = 0x35,FBGE_OP = 0x36,FBGT_OP = 0x37,BLBC_OP = 0x38,BEQ_OP = 0x39,BLT_OP = 0x3A,BLE_OP = 0x3B,BLBS_OP = 0x3C,BNE_OP = 0x3D,BGE_OP = 0x3E,BGT_OP = 0x3F,};
enum MACRO_OT {OT_ARCHLIST = 1,OT_ARCH = 2,OT_GROUP = 3,OT_ATTRIBUTE = 4,OT_PLATFORMS = 5,OT_PLATFORM_PDF = 6,OT_PLATFORM_WINST = 7,OT_PLATFORM_NAD = 8,OT_UNKNOWN = 100,};
enum MACRO_PC {PC_RESERVED = 0x1,PC_EXPLICIT = 0x2,PC_NOCOLLAPSE = 0x4,};
enum MACRO_PD {PD_ALLPAGES = 0x0,PD_SELECTION = 0x1,PD_PAGENUMS = 0x2,PD_NOSELECTION = 0x4,PD_NOPAGENUMS = 0x8,PD_COLLATE = 0x10,PD_PRINTTOFILE = 0x20,PD_PRINTSETUP = 0x40,PD_NOWARNING = 0x80,PD_RETURNDC = 0x100,PD_RETURNIC = 0x200,PD_RETURNDEFAULT = 0x400,PD_SHOWHELP = 0x800,PD_ENABLEPRINTHOOK = 0x1000,PD_ENABLESETUPHOOK = 0x2000,PD_ENABLEPRINTTEMPLATE = 0x4000,PD_ENABLESETUPTEMPLATE = 0x8000,PD_ENABLEPRINTTEMPLATEHANDLE = 0x10000,PD_ENABLESETUPTEMPLATEHANDLE = 0x20000,PD_USEDEVMODECOPIES = 0x40000,PD_USEDEVMODECOPIESANDCOLLATE = 0x40000,PD_DISABLEPRINTTOFILE = 0x80000,PD_HIDEPRINTTOFILE = 0x100000,PD_NONETWORKBUTTON = 0x200000,};
enum MACRO_PE {PE_PENDOWN = 1,PE_PENUP = 2,PE_PENMOVE = 3,PE_TERMINATING = 4,PE_TERMINATED = 5,PE_BUFFERWARNING = 6,PE_BEGININPUT = 7,PE_SETTARGETS = 8,PE_BEGINDATA = 9,PE_MOREDATA = 10,PE_ENDDATA = 11,PE_GETPCMINFO = 12,PE_GETINKINGINFO = 13,PE_ENDINPUT = 14,PE_RESULT = 15,};
enum MACRO_PF {PF_FLOATING_POINT_PRECISION_ERRATA = 0,PF_FLOATING_POINT_EMULATED = 1,PF_COMPARE_EXCHANGE_DOUBLE = 2,PF_MMX_INSTRUCTIONS_AVAILABLE = 3,PF_PPC_MOVEMEM_64BIT_OK = 4,PF_ALPHA_BYTE_INSTRUCTIONS = 5,PF_XMMI_INSTRUCTIONS_AVAILABLE = 6,PF_AMD3D_INSTRUCTIONS_AVAILABLE = 7,};
enum MACRO_PH {PH_MAX = 0xFFFFFFFF,PH_DEFAULT = 0xFFFFFFFE,PH_MIN = 0xFFFFFFFD,};
enum MACRO_PI {PI_DRIVEMODE_UNC = 1,PI_DRIVEMODE_ANY_LETTER = 2,PI_DRIVEMODE_SPECIFIC_LETTER = 3,};
enum MACRO_PM {PM_NOREMOVE = 0x0,PM_REMOVE = 0x1,PM_NOYIELD = 0x2,};
enum MACRO_PO {PO_DELETE = 0x13,PO_RENAME = 0x14,PO_PORTCHANGE = 0x20,PO_REN_PORT = 0x34,};
enum MACRO_PP {PP_DISPLAYERRORS = 0x1,};
enum MACRO_PR {PR_JOBSTATUS = 0x0,};
enum MACRO_PS {PS_SOLID = 0,PS_DASH = 1,PS_DOT = 2,PS_DASHDOT = 3,PS_DASHDOTDOT = 4,PS_NULL = 5,PS_INSIDEFRAME = 6,PS_USERSTYLE = 7,PS_ALTERNATE = 8,PS_STYLE_MASK = 15,PS_ENDCAP_ROUND = 0,PS_ENDCAP_SQUARE = 256,PS_ENDCAP_FLAT = 512,PS_ENDCAP_MASK = 3840,PS_JOIN_ROUND = 0,PS_JOIN_BEVEL = 4096,PS_JOIN_MITER = 8192,PS_JOIN_MASK = 61440,PS_COSMETIC = 0,PS_GEOMETRIC = 65536,PS_TYPE_MASK = 983040,};
enum MACRO_PT {PT_CLOSEFIGURE = 0x1,PT_LINETO = 0x2,PT_BEZIERTO = 0x4,PT_MOVETO = 0x6,};
enum MACRO_QS {QS_KEY = 0x1,QS_MOUSEMOVE = 0x2,QS_MOUSEBUTTON = 0x4,QS_POSTMESSAGE = 0x8,QS_TIMER = 0x10,QS_PAINT = 0x20,QS_SENDMESSAGE = 0x40,QS_HOTKEY = 0x80,QS_ALLPOSTMESSAGE = 0x100,QS_MOUSE = 0x6,QS_INPUT = 0x7,QS_ALLEVENTS = 0xBF,QS_ALLINPUT = 0xFF,};
enum MACRO_R2 {R2_BLACK = 1,R2_NOTMERGEPEN = 2,R2_MASKNOTPEN = 3,R2_NOTCOPYPEN = 4,R2_MASKPENNOT = 5,R2_NOT = 6,R2_XORPEN = 7,R2_NOTMASKPEN = 8,R2_MASKPEN = 9,R2_NOTXORPEN = 10,R2_NOP = 11,R2_MERGENOTPEN = 12,R2_COPYPEN = 13,R2_MERGEPENNOT = 14,R2_MERGEPEN = 15,R2_WHITE = 16,R2_LAST = 16,};
enum MACRO_RB {RB_INSERTBAND = 1025,RB_SETBANDINFO = 1030,RB_GETBANDINFO = 1053,};
enum MACRO_RC {RC_BITBLT = 1,RC_BANDING = 2,RC_SCALING = 4,RC_BITMAP64 = 8,RC_GDI20_OUTPUT = 16,RC_GDI20_STATE = 32,RC_SAVEBITMAP = 64,RC_DI_BITMAP = 128,RC_PALETTE = 256,RC_DIBTODEV = 512,RC_BIGFONT = 1024,RC_STRETCHBLT = 2048,RC_FLOODFILL = 4096,RC_STRETCHDIB = 8192,RC_OP_DX_OUTPUT = 16384,RC_DEVBITS = 32768,};
enum MACRO_RP {RP_LOGON = 0x1,RP_INIFILE = 0x2,};
enum MACRO_RT {RT_CURSOR = 1,RT_BITMAP = 2,RT_ICON = 3,RT_MENU = 4,RT_DIALOG = 5,RT_STRING = 6,RT_FONTDIR = 7,RT_FONT = 8,RT_ACCELERATOR = 9,RT_RCDATA = 10,RT_MESSAGETABLE = 11,};
enum MACRO_RW {RW_FOLDER = 0x80000000,RW_SCALAR = 0x40000000,RW_ALL = 0xC0000000,};
enum MACRO_SA {SA_CRC_Error = 0,SA_RxFrameTooBig = 1,SA_RxFrameTooShort = 2,SA_Spare = 3,SA_RxAbort = 4,SA_TxUnderrun = 5,SA_RxOverrun = 6,SA_DCDDrop = 7,SA_CTSDrop = 8,SA_DSRDrop = 9,SA_HardwareError = 10,SA_Max_Stat = 11,};
enum MACRO_SB {SB_NONE = 0x0,SB_CONST_ALPHA = 0x1,SB_PIXEL_ALPHA = 0x2,SB_PREMULT_ALPHA = 0x4,SB_GRAD_RECT = 0x10,SB_GRAD_TRI = 0x20,};
enum MACRO_SC {SC_SIZE = 0xF000,SC_MOVE = 0xF010,SC_MINIMIZE = 0xF020,SC_MAXIMIZE = 0xF030,SC_NEXTWINDOW = 0xF040,SC_PREVWINDOW = 0xF050,SC_CLOSE = 0xF060,SC_VSCROLL = 0xF070,SC_HSCROLL = 0xF080,SC_MOUSEMENU = 0xF090,SC_KEYMENU = 0xF100,SC_ARRANGE = 0xF110,SC_RESTORE = 0xF120,SC_TASKLIST = 0xF130,SC_SCREENSAVE = 0xF140,SC_HOTKEY = 0xF150,SC_DEFAULT = 0xF160,SC_MONITORPOWER = 0xF170,SC_CONTEXTHELP = 0xF180,SC_SEPARATOR = 0xF00F,SC_ICON = 0xF020,SC_ZOOM = 0xF030,};
enum MACRO_SD {SD_RECEIVE = 0x0,SD_SEND = 0x1,SD_BOTH = 0x2,};
enum MACRO_SE {SE_GROUP_MANDATORY = 0x1,SE_GROUP_ENABLED_BY_DEFAULT = 0x2,SE_GROUP_ENABLED = 0x4,SE_GROUP_OWNER = 0x8,SE_GROUP_USE_FOR_DENY_ONLY = 0x10,SE_GROUP_LOGON_ID = 0xC0000000,};
enum MACRO_SF {SF_DISABLE_STARTUP_SYNC = 0x1,};
enum MACRO_SG {SG_UNCONSTRAINED_GROUP = 0x1,SG_CONSTRAINED_GROUP = 0x2,};
enum MACRO_SH {SH_DENYRW = 16,SH_DENYWR = 32,SH_DENYRD = 48,SH_DENYNO = 64,};
enum MACRO_SI {SI_USER_NOT_SCREENED = 0x0,SI_USER_PASSED = 0x1,SI_USER_FAILED = 0x2,SI_NETWORK = 0x3,};
enum MACRO_SM {SM_CXSCREEN = 0,SM_CYSCREEN = 1,SM_CXVSCROLL = 2,SM_CYHSCROLL = 3,SM_CYCAPTION = 4,SM_CXBORDER = 5,SM_CYBORDER = 6,SM_CXDLGFRAME = 7,SM_CYDLGFRAME = 8,SM_CYVTHUMB = 9,SM_CXHTHUMB = 10,SM_CXICON = 11,SM_CYICON = 12,SM_CXCURSOR = 13,SM_CYCURSOR = 14,SM_CYMENU = 15,SM_CXFULLSCREEN = 16,SM_CYFULLSCREEN = 17,SM_CYKANJIWINDOW = 18,SM_MOUSEPRESENT = 19,SM_CYVSCROLL = 20,SM_CXHSCROLL = 21,SM_DEBUG = 22,SM_SWAPBUTTON = 23,SM_RESERVED1 = 24,SM_RESERVED2 = 25,SM_RESERVED3 = 26,SM_RESERVED4 = 27,SM_CXMIN = 28,SM_CYMIN = 29,SM_CXSIZE = 30,SM_CYSIZE = 31,SM_CXFRAME = 32,SM_CYFRAME = 33,SM_CXMINTRACK = 34,SM_CYMINTRACK = 35,SM_CXDOUBLECLK = 36,SM_CYDOUBLECLK = 37,SM_CXICONSPACING = 38,SM_CYICONSPACING = 39,SM_MENUDROPALIGNMENT = 40,SM_PENWINDOWS = 41,SM_DBCSENABLED = 42,SM_CMOUSEBUTTONS = 43,SM_CXFIXEDFRAME = 7,SM_CYFIXEDFRAME = 8,SM_CXSIZEFRAME = 32,SM_CYSIZEFRAME = 33,SM_SECURE = 44,SM_CXEDGE = 45,SM_CYEDGE = 46,SM_CXMINSPACING = 47,SM_CYMINSPACING = 48,SM_CXSMICON = 49,SM_CYSMICON = 50,SM_CYSMCAPTION = 51,SM_CXSMSIZE = 52,SM_CYSMSIZE = 53,SM_CXMENUSIZE = 54,SM_CYMENUSIZE = 55,SM_ARRANGE = 56,SM_CXMINIMIZED = 57,SM_CYMINIMIZED = 58,SM_CXMAXTRACK = 59,SM_CYMAXTRACK = 60,SM_CXMAXIMIZED = 61,SM_CYMAXIMIZED = 62,SM_NETWORK = 63,SM_CLEANBOOT = 67,SM_CXDRAG = 68,SM_CYDRAG = 69,SM_SHOWSOUNDS = 70,SM_CXMENUCHECK = 71,SM_CYMENUCHECK = 72,SM_SLOWMACHINE = 73,SM_MIDEASTENABLED = 74,SM_MOUSEWHEELPRESENT = 75,SM_XVIRTUALSCREEN = 76,SM_YVIRTUALSCREEN = 77,SM_CXVIRTUALSCREEN = 78,SM_CYVIRTUALSCREEN = 79,SM_CMONITORS = 80,SM_SAMEDISPLAYFORMAT = 81,SM_CMETRICS = 83,};
enum MACRO_SN {SN_CODE = 0,SN_DATA = 1,SN_V86 = 2,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DONTLINGER = 0xFFFFFF7F,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_GROUP_ID = 0x2001,SO_GROUP_PRIORITY = 0x2002,SO_MAX_MSG_SIZE = 0x2003,SO_PROTOCOL_INFOA = 0x2004,SO_PROTOCOL_INFOW = 0x2005,SO_PROTOCOL_INFO = 0x2004,};
enum MACRO_SP {SP_SERIALCOMM = 0x1,};
enum MACRO_SS {SS_LEFT = 0x0,SS_CENTER = 0x1,SS_RIGHT = 0x2,SS_ICON = 0x3,SS_BLACKRECT = 0x4,SS_GRAYRECT = 0x5,SS_WHITERECT = 0x6,SS_BLACKFRAME = 0x7,SS_GRAYFRAME = 0x8,SS_WHITEFRAME = 0x9,SS_USERITEM = 0xA,SS_SIMPLE = 0xB,SS_LEFTNOWORDWRAP = 0xC,SS_OWNERDRAW = 0xD,SS_BITMAP = 0xE,SS_ENHMETAFILE = 0xF,SS_ETCHEDHORZ = 0x10,SS_ETCHEDVERT = 0x11,SS_ETCHEDFRAME = 0x12,SS_TYPEMASK = 0x1F,SS_NOPREFIX = 0x80,SS_NOTIFY = 0x100,SS_CENTERIMAGE = 0x200,SS_RIGHTJUST = 0x400,SS_REALSIZEIMAGE = 0x800,SS_SUNKEN = 0x1000,SS_ENDELLIPSIS = 0x4000,SS_PATHELLIPSIS = 0x8000,SS_WORDELLIPSIS = 0xC000,SS_ELLIPSISMASK = 0xC000,};
enum MACRO_ST {ST_CONNECTED = 0x1,ST_ADVISE = 0x2,ST_ISLOCAL = 0x4,ST_BLOCKED = 0x8,ST_CLIENT = 0x10,ST_TERMINATED = 0x20,ST_INLIST = 0x40,ST_BLOCKNEXT = 0x80,ST_ISSELF = 0x100,};
enum MACRO_SV {SV_CONVERT = 0x1A,SV_DEFINE_TRACE = 0x1D,SV_GET_CP_CONVERT_TABLE = 0x19,SV_LOG_MESSAGE = 0x1F,SV_TRANSFER_MS_DATA = 0x1C,SV_SET_USER_LOG_QUEUE = 0x4B,SV_COPY_TRACE_TO_FILE = 0x4C,SV_DEFINE_DUMP = 0x4D,SV_ADD = 0x0,SV_CHANGE = 0x1,SV_IGNORE = 0x0,SV_NO_ADD = 0x1,SV_NO_SEND = 0x1,SV_SEND = 0x0,SV_A = 0x1,SV_AE = 0x0,SV_ALL = 0x1,SV_ALERT_SUBVECTORS = 0x2,SV_ASCII_TO_EBCDIC = 0x0,SV_EBCDIC_TO_ASCII = 0x1,SV_FORWARD = 0x2,SV_INTRV = 0x0,SV_G = 0x2,SV_LOG = 0x0,SV_LOGS = 0x0,SV_NMVT = 0x1,SV_NO = 0x0,SV_NO_INTRV = 0x1,SV_NO_LOG = 0x1,SV_NONE = 0x0,SV_OFF = 0x0,SV_ON = 0x1,SV_PDSTATS_SUBVECTORS = 0x3,SV_ROUND_TRIP = 0x1,SV_SOME = 0x0,SV_SUBSTITUTE = 0x0,SV_SYSTEM_MESSAGES = 0x1,SV_USER_DEFINED = 0x0,SV_USER_MESSAGES = 0x2,SV_YES = 0x1,SV_BIT0 = 0x80,SV_BIT1 = 0x40,SV_BIT2 = 0x20,SV_BIT3 = 0x10,SV_BIT4 = 0x8,SV_BIT5 = 0x4,SV_BIT6 = 0x2,SV_BIT7 = 0x1,SV_COMM_SUBSYSTEM_NOT_LOADED = 0x12F0,SV_CONFIG_FILE_ERROR = 0x3200,SV_INVALID_VERB = 0xFFFF,SV_INVALID_VERB_SEGMENT = 0x8F0,SV_OK = 0x0,SV_PARAMETER_CHECK = 0x100,SV_STATE_CHECK = 0x200,SV_UNEXPECTED_DOS_ERROR = 0x11F0,SV_CANCELLED = 0x2100,SV_SERVER_RESOURCE_NOT_FOUND = 0x24F0,SV_SERVER_RESOURCES_LOST = 0x26F0,SV_THREAD_BLOCKING = 0x6F0,SV_CONVERSION_ERROR = 0x6040000,SV_DATA_EXCEEDS_RU_SIZE = 0x2030000,SV_INVALID_CHARACTER_SET = 0x2040000,SV_INVALID_CHAR_NOT_FOUND = 0x30060000,SV_INVALID_DATA_SEGMENT = 0x6000000,SV_INVALID_DATA_TYPE = 0x3030000,SV_INVALID_DIRECTION = 0x1040000,SV_INVALID_FIRST_CHARACTER = 0x4040000,SV_INVALID_FORWARD = 0x70000,SV_INVALID_MESSAGE_ACTION = 0x21060000,SV_INVALID_NMVT_ERROR = 0x4030000,SV_INVALID_QUEUE = 0x4070000,SV_INVALID_RESET_TRACE = 0x2F060000,SV_INVALID_SELECTION = 0x2070000,SV_INVALID_SET = 0x24060000,SV_INVALID_SOURCE_CODE_PAGE = 0x31060000,SV_INVALID_STORAGE_SIZE = 0x27060000,SV_INVALID_SUPPRESS = 0x1070000,SV_INVALID_TARGET_CODE_PAGE = 0x32060000,SV_PD_MENUS_IN_PROGRESS = 0x2E060000,SV_QUEUE_ALREADY_IN_EFFECT = 0x5070000,SV_SSCP_PU_SESSION_NOT_ACTIVE = 0x1030000,SV_TABLE_ERROR = 0x5040000,SV_TOO_HIGH_A_NUMBER = 0x3070000,SV_SERVER_CONN_FAILURE = 0xAB000003,SV_NEW = 0x0,SV_OVERWRITE = 0x1,SV_OUTPUT_DEVICE_FULL = 0x3100,SV_FILE_ALREADY_EXISTS = 0x3000,SV_TRACE_NOT_STOPPED = 0x2A060000,SV_INVALID_FILE_OPTION = 0x2B060000,SV_TRACE_BUFFER_EMPTY = 0x2C060000,};
enum MACRO_SW {SW_HIDE = 0,SW_SHOWNORMAL = 1,SW_NORMAL = 1,SW_SHOWMINIMIZED = 2,SW_SHOWMAXIMIZED = 3,SW_MAXIMIZE = 3,SW_SHOWNOACTIVATE = 4,SW_SHOW = 5,SW_MINIMIZE = 6,SW_SHOWMINNOACTIVE = 7,SW_SHOWNA = 8,SW_RESTORE = 9,SW_SHOWDEFAULT = 10,SW_FORCEMINIMIZE = 11,SW_MAX = 11,};
enum MACRO_T3 {T3_ADDRESSTYPE_CONFERENCENAME = 0x1,T3_ADDRESSTYPE_EMAILNAME = 0x2,T3_ADDRESSTYPE_DOMAINNAME = 0x4,T3_ADDRESSTYPE_PHONENUMBER = 0x8,T3_ADDRESSTYPE_IPADDRESS = 0x10,};
enum MACRO_TA {TA_NOUPDATECP = 0,TA_UPDATECP = 1,TA_LEFT = 0,TA_RIGHT = 2,TA_CENTER = 6,TA_TOP = 0,TA_BOTTOM = 8,TA_BASELINE = 24,TA_RTLREADING = 256,TA_MASK = 287,};
enum MACRO_TB {TB_GETBUTTONTEXT = 1069,TB_SAVERESTORE = 1050,TB_ADDSTRING = 1052,};
enum MACRO_TC {TC_NORMAL = 0,TC_HARDERR = 1,TC_GP_TRAP = 2,TC_SIGNAL = 3,};
enum MACRO_TF {TF_DISCONNECT = 0x1,TF_REUSE_SOCKET = 0x2,TF_WRITE_BEHIND = 0x4,};
enum MACRO_TH {TH_NETDEV = 0x1,TH_TAPI = 0x2,};
enum MACRO_TM {TM_JOIN = 2,TM_RESUME = 1,TM_OK = 0,};
enum MACRO_TR {TR_NOIND = 0x0,TR_END_TO_END = 0x1,TR_NO_END_TO_END = 0x2,};
enum MACRO_TT {TT_POLYGON_TYPE = 24,TT_PRIM_LINE = 1,TT_PRIM_QSPLINE = 2,TT_PRIM_CSPLINE = 3,};
enum MACRO_UD {UD_MAXVAL = 0x7FFF,UD_MINVAL = 0xFFFF8001,};
enum MACRO_UF {UF_SCRIPT = 0x1,UF_ACCOUNTDISABLE = 0x2,UF_HOMEDIR_REQUIRED = 0x8,UF_LOCKOUT = 0x10,UF_PASSWD_NOTREQD = 0x20,UF_PASSWD_CANT_CHANGE = 0x40,UF_TEMP_DUPLICATE_ACCOUNT = 0x100,UF_NORMAL_ACCOUNT = 0x200,UF_INTERDOMAIN_TRUST_ACCOUNT = 0x800,UF_WORKSTATION_TRUST_ACCOUNT = 0x1000,UF_SERVER_TRUST_ACCOUNT = 0x2000,UF_MACHINE_ACCOUNT_MASK = 0x3800,UF_ACCOUNT_TYPE_MASK = 0x3B00,UF_DONT_EXPIRE_PASSWD = 0x10000,UF_MNS_LOGON_ACCOUNT = 0x20000,UF_SETTABLE_BITS = 0x33B7B,};
enum MACRO_UI {UI_CAP_2700 = 0x1,UI_CAP_ROT90 = 0x2,UI_CAP_ROTANY = 0x4,};
enum MACRO_UP {UP_P2P = 0x0,UP_P2MP = 0x1,};
enum MACRO_UT {UT_TEXTPTR = 0x1,UT_TEXT = 0x2,UT_MORETEXT = 0x4,UT_DELETEONLY = 0x8,UT_LOG = 0x10,};
enum MACRO_V0 {V0_REG = 0,T0_REG = 1,T1_REG = 2,T2_REG = 3,T3_REG = 4,T4_REG = 5,T5_REG = 6,T6_REG = 7,T7_REG = 8,S0_REG = 9,S1_REG = 10,S2_REG = 11,S3_REG = 12,S4_REG = 13,S5_REG = 14,S6_REG = 15,FP_REG = 15,A0_REG = 16,A1_REG = 17,A2_REG = 18,A3_REG = 19,A4_REG = 20,A5_REG = 21,T8_REG = 22,T9_REG = 23,T10_REG = 24,T11_REG = 25,RA_REG = 26,T12_REG = 27,AT_REG = 28,GP_REG = 29,SP_REG = 30,ZERO_REG = 31,F0_REG = 0,F1_REG = 1,F16_REG = 16,FZERO_REG = 31,};
enum MACRO_VK {VK_LBUTTON = 0x1,VK_RBUTTON = 0x2,VK_CANCEL = 0x3,VK_MBUTTON = 0x4,VK_BACK = 0x8,VK_TAB = 0x9,VK_CLEAR = 0xC,VK_RETURN = 0xD,VK_SHIFT = 0x10,VK_CONTROL = 0x11,VK_MENU = 0x12,VK_PAUSE = 0x13,VK_CAPITAL = 0x14,VK_KANA = 0x15,VK_HANGEUL = 0x15,VK_HANGUL = 0x15,VK_JUNJA = 0x17,VK_FINAL = 0x18,VK_HANJA = 0x19,VK_KANJI = 0x19,VK_ESCAPE = 0x1B,VK_CONVERT = 0x1C,VK_NONCONVERT = 0x1D,VK_ACCEPT = 0x1E,VK_MODECHANGE = 0x1F,VK_SPACE = 0x20,VK_PRIOR = 0x21,VK_NEXT = 0x22,VK_END = 0x23,VK_HOME = 0x24,VK_LEFT = 0x25,VK_UP = 0x26,VK_RIGHT = 0x27,VK_DOWN = 0x28,VK_SELECT = 0x29,VK_PRINT = 0x2A,VK_EXECUTE = 0x2B,VK_SNAPSHOT = 0x2C,VK_INSERT = 0x2D,VK_DELETE = 0x2E,VK_HELP = 0x2F,VK_LWIN = 0x5B,VK_RWIN = 0x5C,VK_APPS = 0x5D,VK_NUMPAD0 = 0x60,VK_NUMPAD1 = 0x61,VK_NUMPAD2 = 0x62,VK_NUMPAD3 = 0x63,VK_NUMPAD4 = 0x64,VK_NUMPAD5 = 0x65,VK_NUMPAD6 = 0x66,VK_NUMPAD7 = 0x67,VK_NUMPAD8 = 0x68,VK_NUMPAD9 = 0x69,VK_MULTIPLY = 0x6A,VK_ADD = 0x6B,VK_SEPARATOR = 0x6C,VK_SUBTRACT = 0x6D,VK_DECIMAL = 0x6E,VK_DIVIDE = 0x6F,VK_F1 = 0x70,VK_F2 = 0x71,VK_F3 = 0x72,VK_F4 = 0x73,VK_F5 = 0x74,VK_F6 = 0x75,VK_F7 = 0x76,VK_F8 = 0x77,VK_F9 = 0x78,VK_F10 = 0x79,VK_F11 = 0x7A,VK_F12 = 0x7B,VK_F13 = 0x7C,VK_F14 = 0x7D,VK_F15 = 0x7E,VK_F16 = 0x7F,VK_F17 = 0x80,VK_F18 = 0x81,VK_F19 = 0x82,VK_F20 = 0x83,VK_F21 = 0x84,VK_F22 = 0x85,VK_F23 = 0x86,VK_F24 = 0x87,VK_NUMLOCK = 0x90,VK_SCROLL = 0x91,VK_LSHIFT = 0xA0,VK_RSHIFT = 0xA1,VK_LCONTROL = 0xA2,VK_RCONTROL = 0xA3,VK_LMENU = 0xA4,VK_RMENU = 0xA5,VK_PROCESSKEY = 0xE5,VK_ATTN = 0xF6,VK_CRSEL = 0xF7,VK_EXSEL = 0xF8,VK_EREOF = 0xF9,VK_PLAY = 0xFA,VK_ZOOM = 0xFB,VK_NONAME = 0xFC,VK_PA1 = 0xFD,VK_OEM_CLEAR = 0xFE,};
enum MACRO_VR {VR_PENDING = 0,VR_INSTANT_OK = 1,VR_INSTANT_BAD = 2,};
enum MACRO_VS {VS_FILE_INFO = 16,VS_VERSION_INFO = 1,VS_USER_DEFINED = 100,VS_FFI_SIGNATURE = -17890115,VS_FFI_STRUCVERSION = 65536,VS_FFI_FILEFLAGSMASK = 63,VS_FF_DEBUG = 1,VS_FF_PRERELEASE = 2,VS_FF_PATCHED = 4,VS_FF_PRIVATEBUILD = 8,VS_FF_INFOINFERRED = 16,VS_FF_SPECIALBUILD = 32,};
enum MACRO_VT {VT_STREAMED_PROPSET = 73,VT_STORED_PROPSET = 74,VT_BLOB_PROPSET = 75,VT_VERBOSE_ENUM = 76,};
enum MACRO_WA {WA_INACTIVE = 0,WA_ACTIVE = 1,WA_CLICKACTIVE = 2,};
enum MACRO_WB {WB_LEFT = 0,WB_RIGHT = 1,WB_ISDELIMITER = 2,};
enum MACRO_WC {WC_DIALOG = 0x8002,};
enum MACRO_WH {WH_MIN = -1,WH_MSGFILTER = -1,WH_JOURNALRECORD = 0,WH_JOURNALPLAYBACK = 1,WH_KEYBOARD = 2,WH_GETMESSAGE = 3,WH_CALLWNDPROC = 4,WH_CBT = 5,WH_SYSMSGFILTER = 6,WH_MOUSE = 7,WH_HARDWARE = 8,WH_DEBUG = 9,WH_SHELL = 10,WH_FOREGROUNDIDLE = 11,WH_CALLWNDPROCRET = 12,WH_KEYBOARD_LL = 13,WH_MOUSE_LL = 14,WH_MAX = 14,WH_MINHOOK = -1,WH_MAXHOOK = 14,};
enum MACRO_WM {WM_NULL = 0x0,WM_CREATE = 0x1,WM_DESTROY = 0x2,WM_MOVE = 0x3,WM_SIZEWAIT = 0x4,WM_SIZE = 0x5,WM_ACTIVATE = 0x6,WM_SETFOCUS = 0x7,WM_KILLFOCUS = 0x8,WM_SETVISIBLE = 0x9,WM_ENABLE = 0xA,WM_SETREDRAW = 0xB,WM_SETTEXT = 0xC,WM_GETTEXT = 0xD,WM_GETTEXTLENGTH = 0xE,WM_PAINT = 0xF,WM_CLOSE = 0x10,WM_QUERYENDSESSION = 0x11,WM_QUIT = 0x12,WM_QUERYOPEN = 0x13,WM_ERASEBKGND = 0x14,WM_SYSCOLORCHANGE = 0x15,WM_ENDSESSION = 0x16,WM_SYSTEMERROR = 0x17,WM_SHOWWINDOW = 0x18,WM_CTLCOLOR = 0x19,WM_SETTINGCHANGE = 0x1A,WM_WININICHANGE = 0x1A,WM_DEVMODECHANGE = 0x1B,WM_ACTIVATEAPP = 0x1C,WM_FONTCHANGE = 0x1D,WM_TIMECHANGE = 0x1E,WM_CANCELMODE = 0x1F,WM_SETCURSOR = 0x20,WM_MOUSEACTIVATE = 0x21,WM_CHILDACTIVATE = 0x22,WM_QUEUESYNC = 0x23,WM_GETMINMAXINFO = 0x24,WM_LOGOFF = 0x25,WM_PAINTICON = 0x26,WM_ICONERASEBKGND = 0x27,WM_NEXTDLGCTL = 0x28,WM_ALTTABACTIVE = 0x29,WM_SPOOLERSTATUS = 0x2A,WM_DRAWITEM = 0x2B,WM_MEASUREITEM = 0x2C,WM_DELETEITEM = 0x2D,WM_VKEYTOITEM = 0x2E,WM_CHARTOITEM = 0x2F,WM_SETFONT = 0x30,WM_GETFONT = 0x31,WM_SETHOTKEY = 0x32,WM_GETHOTKEY = 0x33,WM_FILESYSCHANGE = 0x34,WM_ISACTIVEICON = 0x35,WM_QUERYPARKICON = 0x36,WM_QUERYDRAGICON = 0x37,WM_WINHELP = 0x38,WM_COMPAREITEM = 0x39,WM_FULLSCREEN = 0x3A,WM_CLIENTSHUTDOWN = 0x3B,WM_DDEMLEVENT = 0x3C,WM_GETOBJECT = 0x3D,MM_CALCSCROLL = 0x3F,WM_TESTING = 0x40,WM_COMPACTING = 0x41,WM_OTHERWINDOWCREATED = 0x42,WM_OTHERWINDOWDESTROYED = 0x43,WM_COMMNOTIFY = 0x44,WM_MEDIASTATUSCHANGE = 0x45,WM_WINDOWPOSCHANGING = 0x46,WM_WINDOWPOSCHANGED = 0x47,WM_POWER = 0x48,WM_COPYGLOBALDATA = 0x49,WM_COPYDATA = 0x4A,WM_CANCELJOURNAL = 0x4B,WM_LOGONNOTIFY = 0x4C,WM_KEYF1 = 0x4D,WM_NOTIFY = 0x4E,WM_ACCESS_WINDOW = 0x4F,WM_INPUTLANGCHANGEREQUEST = 0x50,WM_INPUTLANGCHANGE = 0x51,WM_TCARD = 0x52,WM_HELP = 0x53,WM_USERCHANGED = 0x54,WM_NOTIFYFORMAT = 0x55,WM_QM_ACTIVATE = 0x60,WM_HOOK_DO_CALLBACK = 0x61,WM_SYSCOPYDATA = 0x62,WM_FINALDESTROY = 0x70,WM_MEASUREITEM_CLIENTDATA = 0x71,WM_CONTEXTMENU = 0x7B,WM_STYLECHANGING = 0x7C,WM_STYLECHANGED = 0x7D,WM_DISPLAYCHANGE = 0x7E,WM_GETICON = 0x7F,WM_SETICON = 0x80,WM_NCCREATE = 0x81,WM_NCDESTROY = 0x82,WM_NCCALCSIZE = 0x83,WM_NCHITTEST = 0x84,WM_NCPAINT = 0x85,WM_NCACTIVATE = 0x86,WM_GETDLGCODE = 0x87,WM_SYNCPAINT = 0x88,WM_SYNCTASK = 0x89,WM_NCMOUSEMOVE = 0xA0,WM_NCLBUTTONDOWN = 0xA1,WM_NCLBUTTONUP = 0xA2,WM_NCLBUTTONDBLCLK = 0xA3,WM_NCRBUTTONDOWN = 0xA4,WM_NCRBUTTONUP = 0xA5,WM_NCRBUTTONDBLCLK = 0xA6,WM_NCMBUTTONDOWN = 0xA7,WM_NCMBUTTONUP = 0xA8,WM_NCMBUTTONDBLCLK = 0xA9,WM_NCXBUTTONDOWN = 0xAB,WM_NCXBUTTONUP = 0xAC,WM_NCXBUTTONDBLCLK = 0xAD,EM_GETSEL = 0xB0,EM_SETSEL = 0xB1,EM_GETRECT = 0xB2,EM_SETRECT = 0xB3,EM_SETRECTNP = 0xB4,EM_SCROLL = 0xB5,EM_LINESCROLL = 0xB6,EM_SCROLLCARET = 0xB7,EM_GETMODIFY = 0xB8,EM_SETMODIFY = 0xB9,EM_GETLINECOUNT = 0xBA,EM_LINEINDEX = 0xBB,EM_SETHANDLE = 0xBC,EM_GETHANDLE = 0xBD,EM_GETTHUMB = 0xBE,EM_LINELENGTH = 0xC1,EM_REPLACESEL = 0xC2,EM_SETFONT = 0xC3,EM_GETLINE = 0xC4,EM_LIMITTEXT = 0xC5,EM_SETLIMITTEXT = 0xC5,EM_CANUNDO = 0xC6,EM_UNDO = 0xC7,EM_FMTLINES = 0xC8,EM_LINEFROMCHAR = 0xC9,EM_SETWORDBREAK = 0xCA,EM_SETTABSTOPS = 0xCB,EM_SETPASSWORDCHAR = 0xCC,EM_EMPTYUNDOBUFFER = 0xCD,EM_GETFIRSTVISIBLELINE = 0xCE,EM_SETREADONLY = 0xCF,EM_SETWORDBREAKPROC = 0xD0,EM_GETWORDBREAKPROC = 0xD1,EM_GETPASSWORDCHAR = 0xD2,EM_SETMARGINS = 0xD3,EM_GETMARGINS = 0xD4,EM_GETLIMITTEXT = 0xD5,EM_POSFROMCHAR = 0xD6,EM_CHARFROMPOS = 0xD7,EM_SETIMESTATUS = 0xD8,EM_GETIMESTATUS = 0xD9,SBM_SETPOS = 0xE0,SBM_GETPOS = 0xE1,SBM_SETRANGE = 0xE2,SBM_GETRANGE = 0xE3,SBM_ENABLE_ARROWS = 0xE4,SBM_SETRANGEREDRAW = 0xE6,SBM_SETSCROLLINFO = 0xE9,SBM_GETSCROLLINFO = 0xEA,SBM_GETSCROLLBARINFO = 0xEB,BM_GETCHECK = 0xF0,BM_SETCHECK = 0xF1,BM_GETSTATE = 0xF2,BM_SETSTATE = 0xF3,BM_SETSTYLE = 0xF4,BM_CLICK = 0xF5,BM_GETIMAGE = 0xF6,BM_SETIMAGE = 0xF7,BM_SETDONTCLICK = 0xF8,WM_INPUT = 0xFF,WM_KEYDOWN = 0x100,WM_KEYFIRST = 0x100,WM_KEYUP = 0x101,WM_CHAR = 0x102,WM_DEADCHAR = 0x103,WM_SYSKEYDOWN = 0x104,WM_SYSKEYUP = 0x105,WM_SYSCHAR = 0x106,WM_SYSDEADCHAR = 0x107,WM_KEYLAST = 0x108,WM_YOMICHAR = 0x108,WM_UNICHAR = 0x109,WM_WNT_CONVERTREQUESTEX = 0x109,WM_CONVERTREQUEST = 0x10A,WM_CONVERTRESULT = 0x10B,WM_INTERIM = 0x10C,WM_IM_INFO = 0x10C,WM_IME_STARTCOMPOSITION = 0x10D,WM_IME_ENDCOMPOSITION = 0x10E,WM_IME_COMPOSITION = 0x10F,WM_IME_KEYLAST = 0x10F,WM_INITDIALOG = 0x110,WM_COMMAND = 0x111,WM_SYSCOMMAND = 0x112,WM_TIMER = 0x113,WM_HSCROLL = 0x114,WM_VSCROLL = 0x115,WM_INITMENU = 0x116,WM_INITMENUPOPUP = 0x117,WM_SYSTIMER = 0x118,WM_MENUSELECT = 0x11F,WM_MENUCHAR = 0x120,WM_ENTERIDLE = 0x121,WM_MENURBUTTONUP = 0x122,WM_MENUDRAG = 0x123,WM_MENUGETOBJECT = 0x124,WM_UNINITMENUPOPUP = 0x125,WM_MENUCOMMAND = 0x126,WM_CHANGEUISTATE = 0x127,WM_UPDATEUISTATE = 0x128,WM_QUERYUISTATE = 0x129,WM_LBTRACKPOINT = 0x131,WM_CTLCOLORMSGBOX = 0x132,WM_CTLCOLOREDIT = 0x133,WM_CTLCOLORLISTBOX = 0x134,WM_CTLCOLORBTN = 0x135,WM_CTLCOLORDLG = 0x136,WM_CTLCOLORSCROLLBAR = 0x137,WM_CTLCOLORSTATIC = 0x138,CB_GETEDITSEL = 0x140,CB_LIMITTEXT = 0x141,CB_SETEDITSEL = 0x142,CB_ADDSTRING = 0x143,CB_DELETESTRING = 0x144,CB_DIR = 0x145,CB_GETCOUNT = 0x146,CB_GETCURSEL = 0x147,CB_GETLBTEXT = 0x148,CB_GETLBTEXTLEN = 0x149,CB_INSERTSTRING = 0x14A,CB_RESETCONTENT = 0x14B,CB_FINDSTRING = 0x14C,CB_SELECTSTRING = 0x14D,CB_SETCURSEL = 0x14E,CB_SHOWDROPDOWN = 0x14F,CB_GETITEMDATA = 0x150,CB_SETITEMDATA = 0x151,CB_GETDROPPEDCONTROLRECT = 0x152,CB_SETITEMHEIGHT = 0x153,CB_GETITEMHEIGHT = 0x154,CB_SETEXTENDEDUI = 0x155,CB_GETEXTENDEDUI = 0x156,CB_GETDROPPEDSTATE = 0x157,CB_FINDSTRINGEXACT = 0x158,CB_SETLOCALE = 0x159,CB_GETLOCALE = 0x15A,CB_GETTOPINDEX = 0x15B,CB_SETTOPINDEX = 0x15C,CB_GETHORIZONTALEXTENT = 0x15D,CB_SETHORIZONTALEXTENT = 0x15E,CB_GETDROPPEDWIDTH = 0x15F,CB_SETDROPPEDWIDTH = 0x160,CB_INITSTORAGE = 0x161,CB_MULTIPLEADDSTRING = 0x163,CB_GETCOMBOBOXINFO = 0x164,CB_SETMINVISIBLE = 0x1701,CB_GETMINVISIBLE = 0x1702,CB_SETCUEBANNER = 0x1703,CB_GETCUEBANNER = 0x1704,STM_SETICON = 0x170,STM_GETICON = 0x171,STM_SETIMAGE = 0x172,STM_GETIMAGE = 0x173,LB_ADDSTRING = 0x180,LB_INSERTSTRING = 0x181,LB_DELETESTRING = 0x182,LB_SELITEMRANGEEX = 0x183,LB_RESETCONTENT = 0x184,LB_SETSEL = 0x185,LB_SETCURSEL = 0x186,LB_GETSEL = 0x187,LB_GETCURSEL = 0x188,LB_GETTEXT = 0x189,LB_GETTEXTLEN = 0x18A,LB_GETCOUNT = 0x18B,LB_SELECTSTRING = 0x18C,LB_DIR = 0x18D,LB_GETTOPINDEX = 0x18E,LB_FINDSTRING = 0x18F,LB_GETSELCOUNT = 0x190,LB_GETSELITEMS = 0x191,LB_SETTABSTOPS = 0x192,LB_GETHORIZONTALEXTENT = 0x193,LB_SETHORIZONTALEXTENT = 0x194,LB_SETCOLUMNWIDTH = 0x195,LB_ADDFILE = 0x196,LB_SETTOPINDEX = 0x197,LB_GETITEMRECT = 0x198,LB_GETITEMDATA = 0x199,LB_SETITEMDATA = 0x19A,LB_SELITEMRANGE = 0x19B,LB_SETANCHORINDEX = 0x19C,LB_GETANCHORINDEX = 0x19D,LB_SETCARETINDEX = 0x19E,LB_GETCARETINDEX = 0x19F,LB_SETITEMHEIGHT = 0x1A0,LB_GETITEMHEIGHT = 0x1A1,LB_FINDSTRINGEXACT = 0x1A2,LBCB_CARETON = 0x1A3,LBCB_CARETOFF = 0x1A4,LB_SETLOCALE = 0x1A5,LB_GETLOCALE = 0x1A6,LB_SETCOUNT = 0x1A7,LB_INITSTORAGE = 0x1A8,LB_ITEMFROMPOINT = 0x1A9,LB_INSERTSTRINGUPPER = 0x1AA,LB_INSERTSTRINGLOWER = 0x1AB,LB_ADDSTRINGUPPER = 0x1AC,LB_ADDSTRINGLOWER = 0x1AD,LB_MULTIPLEADDSTRING = 0x1B1,LB_GETLISTBOXINFO = 0x1B2,MN_SETHMENU = 0x1E0,MN_GETHMENU = 0x1E1,MN_SIZEWINDOW = 0x1E2,MN_OPENHIERARCHY = 0x1E3,MN_CLOSEHIERARCHY = 0x1E4,MN_SELECTITEM = 0x1E5,MN_CANCELMENUS = 0x1E6,MN_SELECTFIRSTVALIDITEM = 0x1E7,MN_GETPPOPUPMENU = 0x1EA,MN_FINDMENUWINDOWFROMPOINT = 0x1EB,MN_SHOWPOPUPWINDOW = 0x1EC,MN_BUTTONDOWN = 0x1ED,MN_MOUSEMOVE = 0x1EE,MN_BUTTONUP = 0x1EF,MN_SETTIMERTOOPENHIERARCHY = 0x1F0,MN_DBLCLK = 0x1F1,WM_MOUSEFIRST = 0x200,WM_MOUSEMOVE = 0x200,WM_LBUTTONDOWN = 0x201,WM_LBUTTONUP = 0x202,WM_LBUTTONDBLCLK = 0x203,WM_RBUTTONDOWN = 0x204,WM_RBUTTONUP = 0x205,WM_RBUTTONDBLCLK = 0x206,WM_MBUTTONDOWN = 0x207,WM_MBUTTONUP = 0x208,WM_MBUTTONDBLCLK = 0x209,WM_MOUSELAST = 0x20A,WM_MOUSEWHEEL = 0x20A,WM_XBUTTONDOWN = 0x20B,WM_XBUTTONUP = 0x20C,WM_XBUTTONDBLCLK = 0x20D,WM_PARENTNOTIFY = 0x210,WM_ENTERMENULOOP = 0x211,WM_EXITMENULOOP = 0x212,WM_NEXTMENU = 0x213,WM_SIZING = 0x214,WM_CAPTURECHANGED = 0x215,WM_MOVING = 0x216,WM_POWERBROADCAST = 0x218,WM_DEVICECHANGE = 0x219,WM_MDICREATE = 0x220,WM_MDIDESTROY = 0x221,WM_MDIACTIVATE = 0x222,WM_MDIRESTORE = 0x223,WM_MDINEXT = 0x224,WM_MDIMAXIMIZE = 0x225,WM_MDITILE = 0x226,WM_MDICASCADE = 0x227,WM_MDIICONARRANGE = 0x228,WM_MDIGETACTIVE = 0x229,WM_DROPOBJECT = 0x22A,WM_QUERYDROPOBJECT = 0x22B,WM_BEGINDRAG = 0x22C,WM_DRAGLOOP = 0x22D,WM_DRAGSELECT = 0x22E,WM_DRAGMOVE = 0x22F,WM_MDISETMENU = 0x230,WM_ENTERSIZEMOVE = 0x231,WM_EXITSIZEMOVE = 0x232,WM_DROPFILES = 0x233,WM_MDIREFRESHMENU = 0x234,WM_IME_REPORT = 0x280,WM_HANGEULFIRST = 0x280,WM_KANJIFIRST = 0x280,WM_IME_SETCONTEXT = 0x281,WM_IME_NOTIFY = 0x282,WM_IME_CONTROL = 0x283,WM_IME_COMPOSITIONFULL = 0x284,WM_IME_SELECT = 0x285,WM_IME_CHAR = 0x286,WM_IME_SYSTEM = 0x287,WM_IME_REQUEST = 0x288,WM_IMEKEYDOWN = 0x290,WM_IME_KEYDOWN = 0x290,WM_IMEKEYUP = 0x291,WM_IME_KEYUP = 0x291,WM_HANGEULLAST = 0x29F,WM_KANJILAST = 0x29F,WM_NCMOUSEHOVER = 0x2A0,WM_MOUSEHOVER = 0x2A1,WM_NCMOUSELEAVE = 0x2A2,WM_MOUSELEAVE = 0x2A3,WM_TRACKMOUSEEVENT_LAST = 0x2AF,WM_WTSSESSION_CHANGE = 0x2B1,WM_TABLET_FIRST = 0x2C0,WM_TABLET_LAST = 0x2DF,WM_CUT = 0x300,WM_COPY = 0x301,WM_PASTE = 0x302,WM_CLEAR = 0x303,WM_UNDO = 0x304,WM_RENDERFORMAT = 0x305,WM_RENDERALLFORMATS = 0x306,WM_DESTROYCLIPBOARD = 0x307,WM_DRAWCLIPBOARD = 0x308,WM_PAINTCLIPBOARD = 0x309,WM_VSCROLLCLIPBOARD = 0x30A,WM_SIZECLIPBOARD = 0x30B,WM_ASKCBFORMATNAME = 0x30C,WM_CHANGECBCHAIN = 0x30D,WM_HSCROLLCLIPBOARD = 0x30E,WM_QUERYNEWPALETTE = 0x30F,WM_PALETTEISCHANGING = 0x310,WM_PALETTECHANGED = 0x311,WM_HOTKEY = 0x312,WM_SYSMENU = 0x313,WM_HOOKMSG = 0x314,WM_EXITPROCESS = 0x315,WM_WAKETHREAD = 0x316,WM_PRINT = 0x317,WM_PRINTCLIENT = 0x318,WM_APPCOMMAND = 0x319,WM_THEMECHANGED = 0x31A,WM_HANDHELDFIRST = 0x358,WM_HANDHELDLAST = 0x35F,WM_AFXFIRST = 0x360,WM_AFXLAST = 0x37F,WM_PENWINFIRST = 0x380,WM_RCRESULT = 0x381,WM_HOOKRCRESULT = 0x382,WM_GLOBALRCCHANGE = 0x383,WM_PENMISCINFO = 0x383,WM_SKB = 0x384,WM_HEDITCTL = 0x385,WM_PENCTL = 0x385,WM_PENMISC = 0x386,WM_CTLINIT = 0x387,WM_PENEVENT = 0x388,WM_PENWINLAST = 0x38F,WM_INTERNAL_COALESCE_FIRST = 0x390,WM_COALESCE_FIRST = 0x390,WM_COALESCE_LAST = 0x39F,WM_MM_RESERVED_FIRST = 0x3A0,WM_INTERNAL_COALESCE_LAST = 0x3B0,WM_MM_RESERVED_LAST = 0x3DF,WM_DDE_INITIATE = 0x3E0,WM_DDE_TERMINATE = 0x3E1,WM_DDE_ADVISE = 0x3E2,WM_DDE_UNADVISE = 0x3E3,WM_DDE_ACK = 0x3E4,WM_DDE_DATA = 0x3E5,WM_DDE_REQUEST = 0x3E6,WM_DDE_POKE = 0x3E7,WM_DDE_EXECUTE = 0x3E8,WM_DBNOTIFICATION = 0x3FD,WM_NETCONNECT = 0x3FE,WM_HIBERNATE = 0x3FF,WM_USER = 0x400,DDM_SETFMT = 0x400,DDM_DRAW = 0x401,DDM_CLOSE = 0x402,DDM_BEGIN = 0x403,DDM_END = 0x404,DM_GETDEFID = 0x400,DM_SETDEFID = 0x401,DM_REPOSITION = 0x402,NIN_SELECT = 0x400,NIN_KEYSELECT = 0x401,NIN_BALLOONSHOW = 0x402,NIN_BALLOONHIDE = 0x403,NIN_BALLOONTIMEOUT = 0x404,NIN_BALLOONUSERCLICK = 0x405,NIN_POPUPOPEN = 0x406,NIN_POPUPCLOSE = 0x407,TBM_GETPOS = 0x400,TBM_GETRANGEMIN = 0x401,TBM_GETRANGEMAX = 0x402,TBM_GETTIC = 0x403,TBM_SETTIC = 0x404,TBM_SETPOS = 0x405,TBM_SETRANGE = 0x406,TBM_SETRANGEMIN = 0x407,TBM_SETRANGEMAX = 0x408,TBM_CLEARTICS = 0x409,TBM_SETSEL = 0x40A,TBM_SETSELSTART = 0x40B,TBM_SETSELEND = 0x40C,TBM_GETPTICS = 0x40E,TBM_GETTICPOS = 0x40F,TBM_GETNUMTICS = 0x410,TBM_GETSELSTART = 0x411,TBM_GETSELEND = 0x412,TBM_CLEARSEL = 0x413,TBM_SETTICFREQ = 0x414,TBM_SETPAGESIZE = 0x415,TBM_GETPAGESIZE = 0x416,TBM_SETLINESIZE = 0x417,TBM_GETLINESIZE = 0x418,TBM_GETTHUMBRECT = 0x419,TBM_GETCHANNELRECT = 0x41A,TBM_SETTHUMBLENGTH = 0x41B,TBM_GETTHUMBLENGTH = 0x41C,TBM_SETTOOLTIPS = 0x41D,TBM_GETTOOLTIPS = 0x41E,TBM_SETTIPSIDE = 0x41F,TBM_SETBUDDY = 0x420,TBM_GETBUDDY = 0x421,TBM_SETPOSNOTIFY = 0x422,WM_PSD_PAGESETUPDLG = 0x400,WM_PSD_FULLPAGERECT = 0x401,WM_PSD_MINMARGINRECT = 0x402,WM_PSD_MARGINRECT = 0x403,WM_PSD_GREEKTEXTRECT = 0x404,WM_PSD_ENVSTAMPRECT = 0x405,WM_PSD_YAFULLPAGERECT = 0x406,WM_CHOOSEFONT_GETLOGFONT = 0x401,WM_CHOOSEFONT_SETLOGFONT = 0x465,WM_CHOOSEFONT_SETFLAGS = 0x466,HKM_SETHOTKEY = 0x401,HKM_GETHOTKEY = 0x402,HKM_SETRULES = 0x403,PBM_SETRANGE = 0x401,PBM_SETPOS = 0x402,PBM_DELTAPOS = 0x403,PBM_SETSTEP = 0x404,PBM_STEPIT = 0x405,PBM_SETRANGE32 = 0x406,PBM_GETRANGE = 0x407,PBM_GETPOS = 0x408,PBM_SETBARCOLOR = 0x409,PBM_SETMARQUEE = 0x40A,PBM_GETSTEP = 0x40D,PBM_GETBKCOLOR = 0x40E,PBM_GETBARCOLOR = 0x40F,PBM_SETSTATE = 0x410,PBM_GETSTATE = 0x411,RB_INSERTBANDA = 0x401,RB_DELETEBAND = 0x402,RB_GETBARINFO = 0x403,RB_SETBARINFO = 0x404,RB_SETBANDINFOA = 0x406,RB_SETPARENT = 0x407,RB_HITTEST = 0x408,RB_GETRECT = 0x409,RB_INSERTBANDW = 0x40A,RB_SETBANDINFOW = 0x40B,RB_GETBANDCOUNT = 0x40C,RB_GETROWCOUNT = 0x40D,RB_GETROWHEIGHT = 0x40E,RB_IDTOINDEX = 0x410,RB_GETTOOLTIPS = 0x411,RB_SETTOOLTIPS = 0x412,RB_SETBKCOLOR = 0x413,RB_GETBKCOLOR = 0x414,RB_SETTEXTCOLOR = 0x415,RB_GETTEXTCOLOR = 0x416,RB_SIZETORECT = 0x417,RB_BEGINDRAG = 0x418,RB_ENDDRAG = 0x419,RB_DRAGMOVE = 0x41A,RB_GETBARHEIGHT = 0x41B,RB_GETBANDINFOW = 0x41C,RB_GETBANDINFOA = 0x41D,RB_MINIMIZEBAND = 0x41E,RB_MAXIMIZEBAND = 0x41F,RB_GETBANDBORDERS = 0x422,RB_SHOWBAND = 0x423,RB_SETPALETTE = 0x425,RB_GETPALETTE = 0x426,RB_MOVEBAND = 0x427,RB_PUSHCHEVRON = 0x42B,RB_GETBANDMARGINS = 0x428,RB_SETEXTENDEDSTYLE = 0x429,RB_GETEXTENDEDSTYLE = 0x42A,RB_SETBANDWIDTH = 0x42C,RB_SETWINDOWTHEME = 0x200B,CBEM_INSERTITEMA = 0x401,CBEM_SETIMAGELIST = 0x402,CBEM_GETIMAGELIST = 0x403,CBEM_GETITEMA = 0x404,CBEM_SETITEMA = 0x405,CBEM_GETCOMBOCONTROL = 0x406,CBEM_GETEDITCONTROL = 0x407,CBEM_SETEXSTYLE = 0x408,CBEM_GETEXSTYLE = 0x409,CBEM_GETEXTENDEDSTYLE = 0x409,CBEM_HASEDITCHANGED = 0x40A,CBEM_INSERTITEMW = 0x40B,CBEM_SETITEMW = 0x40C,CBEM_GETITEMW = 0x40D,CBEM_SETEXTENDEDSTYLE = 0x40E,SB_SETTEXTA = 0x401,SB_GETTEXTA = 0x402,SB_GETTEXTLENGTHA = 0x403,SB_SETPARTS = 0x404,SB_GETPARTS = 0x406,SB_GETBORDERS = 0x407,SB_SETMINHEIGHT = 0x408,SB_SIMPLE = 0x409,SB_GETRECT = 0x40A,SB_SETTEXTW = 0x40B,SB_GETTEXTLENGTHW = 0x40C,SB_GETTEXTW = 0x40D,SB_ISSIMPLE = 0x40E,SB_SETICON = 0x40F,SB_SETTIPTEXTA = 0x410,SB_SETTIPTEXTW = 0x411,SB_GETTIPTEXTA = 0x412,SB_GETTIPTEXTW = 0x413,SB_GETICON = 0x414,TTM_ACTIVATE = 0x401,TTM_SETDELAYTIME = 0x403,TTM_ADDTOOLA = 0x404,TTM_DELTOOLA = 0x405,TTM_NEWTOOLRECTA = 0x406,TTM_RELAYEVENT = 0x407,TTM_GETTOOLINFOA = 0x408,TTM_SETTOOLINFOA = 0x409,TTM_HITTESTA = 0x40A,TTM_GETTEXTA = 0x40B,TTM_UPDATETIPTEXTA = 0x40C,TTM_GETTOOLCOUNT = 0x40D,TTM_ENUMTOOLSA = 0x40E,TTM_GETCURRENTTOOLA = 0x40F,TTM_WINDOWFROMPOINT = 0x410,TTM_TRACKACTIVATE = 0x411,TTM_TRACKPOSITION = 0x412,TTM_SETTIPBKCOLOR = 0x413,TTM_SETTIPTEXTCOLOR = 0x414,TTM_GETDELAYTIME = 0x415,TTM_GETTIPBKCOLOR = 0x416,TTM_GETTIPTEXTCOLOR = 0x417,TTM_SETMAXTIPWIDTH = 0x418,TTM_GETMAXTIPWIDTH = 0x419,TTM_SETMARGIN = 0x41A,TTM_GETMARGIN = 0x41B,TTM_POP = 0x41C,TTM_UPDATE = 0x41D,TTM_GETBUBBLESIZE = 0x41E,TTM_ADJUSTRECT = 0x41F,TTM_SETTITLEA = 0x420,TTM_SETTITLEW = 0x421,TTM_ADDTOOLW = 0x432,TTM_DELTOOLW = 0x433,TTM_NEWTOOLRECTW = 0x434,TTM_GETTOOLINFOW = 0x435,TTM_SETTOOLINFOW = 0x436,TTM_HITTESTW = 0x437,TTM_GETTEXTW = 0x438,TTM_UPDATETIPTEXTW = 0x439,TTM_ENUMTOOLSW = 0x43A,TTM_GETCURRENTTOOLW = 0x43B,WIZ_QUERYNUMPAGES = 0x40A,WIZ_NEXT = 0x40B,WIZ_PREV = 0x40C,MSG_FTS_JUMP_VA = 0x421,MSG_FTS_JUMP_QWORD = 0x423,MSG_REINDEX_REQUEST = 0x424,MSG_FTS_WHERE_IS_IT = 0x425,MSG_GET_DEFFONT = 0x42D,TB_ENABLEBUTTON = 0x401,TB_CHECKBUTTON = 0x402,TB_PRESSBUTTON = 0x403,TB_HIDEBUTTON = 0x404,TB_INDETERMINATE = 0x405,TB_MARKBUTTON = 0x406,TB_ISBUTTONENABLED = 0x409,TB_ISBUTTONCHECKED = 0x40A,TB_ISBUTTONPRESSED = 0x40B,TB_ISBUTTONHIDDEN = 0x40C,TB_ISBUTTONINDETERMINATE = 0x40D,TB_ISBUTTONHIGHLIGHTED = 0x40E,TB_SETSTATE = 0x411,TB_GETSTATE = 0x412,TB_ADDBITMAP = 0x413,TB_ADDBUTTONSA = 0x414,TB_INSERTBUTTONA = 0x415,TB_DELETEBUTTON = 0x416,TB_GETBUTTON = 0x417,TB_BUTTONCOUNT = 0x418,TB_COMMANDTOINDEX = 0x419,TB_SAVERESTOREA = 0x41A,TB_CUSTOMIZE = 0x41B,TB_ADDSTRINGA = 0x41C,TB_GETITEMRECT = 0x41D,TB_BUTTONSTRUCTSIZE = 0x41E,TB_SETBUTTONSIZE = 0x41F,TB_SETBITMAPSIZE = 0x420,TB_AUTOSIZE = 0x421,TB_GETTOOLTIPS = 0x423,TB_SETTOOLTIPS = 0x424,TB_SETPARENT = 0x425,TB_SETROWS = 0x427,TB_GETROWS = 0x428,TB_GETBITMAPFLAGS = 0x429,TB_SETCMDID = 0x42A,TB_CHANGEBITMAP = 0x42B,TB_GETBITMAP = 0x42C,TB_GETBUTTONTEXTA = 0x42D,TB_REPLACEBITMAP = 0x42E,TB_SETINDENT = 0x42F,TB_SETIMAGELIST = 0x430,TB_GETIMAGELIST = 0x431,TB_LOADIMAGES = 0x432,TB_GETRECT = 0x433,TB_SETHOTIMAGELIST = 0x434,TB_GETHOTIMAGELIST = 0x435,TB_SETDISABLEDIMAGELIST = 0x436,TB_GETDISABLEDIMAGELIST = 0x437,TB_SETSTYLE = 0x438,TB_GETSTYLE = 0x439,TB_GETBUTTONSIZE = 0x43A,TB_SETBUTTONWIDTH = 0x43B,TB_SETMAXTEXTROWS = 0x43C,TB_GETTEXTROWS = 0x43D,TB_GETOBJECT = 0x43E,TB_GETBUTTONINFOW = 0x43F,TB_SETBUTTONINFOW = 0x440,TB_GETBUTTONINFOA = 0x441,TB_SETBUTTONINFOA = 0x442,TB_INSERTBUTTONW = 0x443,TB_ADDBUTTONSW = 0x444,TB_HITTEST = 0x445,TB_SETDRAWTEXTFLAGS = 0x446,TB_GETHOTITEM = 0x447,TB_SETHOTITEM = 0x448,TB_SETANCHORHIGHLIGHT = 0x449,TB_GETANCHORHIGHLIGHT = 0x44A,TB_GETBUTTONTEXTW = 0x44B,TB_SAVERESTOREW = 0x44C,TB_ADDSTRINGW = 0x44D,TB_MAPACCELERATORA = 0x44E,TB_GETINSERTMARK = 0x44F,TB_SETINSERTMARK = 0x450,TB_INSERTMARKHITTEST = 0x451,TB_MOVEBUTTON = 0x452,TB_GETMAXSIZE = 0x453,TB_SETEXTENDEDSTYLE = 0x454,TB_GETEXTENDEDSTYLE = 0x455,TB_GETPADDING = 0x456,TB_SETPADDING = 0x457,TB_SETINSERTMARKCOLOR = 0x458,TB_GETINSERTMARKCOLOR = 0x459,TB_MAPACCELERATORW = 0x45A,TB_GETSTRINGW = 0x45B,TB_GETSTRINGA = 0x45C,TB_SETBOUNDINGSIZE = 0x45D,TB_SETHOTITEM2 = 0x45E,TB_HASACCELERATOR = 0x45F,TB_SETLISTGAP = 0x460,TB_GETIMAGELISTCOUNT = 0x462,TB_GETIDEALSIZE = 0x463,TB_GETMETRICS = 0x465,TB_SETMETRICS = 0x466,TB_GETITEMDROPDOWNRECT = 0x467,TB_SETPRESSEDIMAGELIST = 0x468,TB_GETPRESSEDIMAGELIST = 0x469,TB_SETWINDOWTHEME = 0x200B,EM_CANPASTE = 0x432,EM_DISPLAYBAND = 0x433,EM_EXGETSEL = 0x434,EM_EXLIMITTEXT = 0x435,EM_EXLINEFROMCHAR = 0x436,EM_EXSETSEL = 0x437,EM_FINDTEXT = 0x438,EM_FORMATRANGE = 0x439,EM_GETCHARFORMAT = 0x43A,EM_GETEVENTMASK = 0x43B,EM_GETOLEINTERFACE = 0x43C,EM_GETPARAFORMAT = 0x43D,EM_GETSELTEXT = 0x43E,EM_HIDESELECTION = 0x43F,EM_PASTESPECIAL = 0x440,EM_REQUESTRESIZE = 0x441,EM_SELECTIONTYPE = 0x442,EM_SETBKGNDCOLOR = 0x443,EM_SETCHARFORMAT = 0x444,EM_SETEVENTMASK = 0x445,EM_SETOLECALLBACK = 0x446,EM_SETPARAFORMAT = 0x447,EM_SETTARGETDEVICE = 0x448,EM_STREAMIN = 0x449,EM_STREAMOUT = 0x44A,EM_GETTEXTRANGE = 0x44B,EM_FINDWORDBREAK = 0x44C,EM_SETOPTIONS = 0x44D,EM_GETOPTIONS = 0x44E,EM_FINDTEXTEX = 0x44F,EM_GETWORDBREAKPROCEX = 0x450,EM_SETWORDBREAKPROCEX = 0x451,EM_SETUNDOLIMIT = 0x452,EM_REDO = 0x454,EM_CANREDO = 0x455,EM_GETUNDONAME = 0x456,EM_GETREDONAME = 0x457,EM_STOPGROUPTYPING = 0x458,EM_SETTEXTMODE = 0x459,EM_GETTEXTMODE = 0x45A,EM_AUTOURLDETECT = 0x45B,EM_GETAUTOURLDETECT = 0x45C,EM_SETPALETTE = 0x45D,EM_GETTEXTEX = 0x45E,EM_GETTEXTLENGTHEX = 0x45F,EM_SHOWSCROLLBAR = 0x460,EM_SETTEXTEX = 0x461,EM_SETPUNCTUATION = 0x464,EM_GETPUNCTUATION = 0x465,EM_SETWORDWRAPMODE = 0x466,EM_GETWORDWRAPMODE = 0x467,EM_SETIMECOLOR = 0x468,EM_GETIMECOLOR = 0x469,EM_SETIMEOPTIONS = 0x46A,EM_GETIMEOPTIONS = 0x46B,EM_CONVPOSITION = 0x46C,EM_SETLANGOPTIONS = 0x478,EM_GETLANGOPTIONS = 0x479,EM_GETIMECOMPMODE = 0x47A,EM_FINDTEXTW = 0x47B,EM_FINDTEXTEXW = 0x47C,EM_RECONVERSION = 0x47D,EM_SETIMEMODEBIAS = 0x47E,EM_GETIMEMODEBIAS = 0x47F,EM_SETBIDIOPTIONS = 0x4C8,EM_GETBIDIOPTIONS = 0x4C9,EM_SETTYPOGRAPHYOPTIONS = 0x4CA,EM_GETTYPOGRAPHYOPTIONS = 0x4CB,EM_SETEDITSTYLE = 0x4CC,EM_GETEDITSTYLE = 0x4CD,EM_OUTLINE = 0x4DC,EM_GETSCROLLPOS = 0x4DD,EM_SETSCROLLPOS = 0x4DE,EM_SETFONTSIZE = 0x4DF,EM_GETZOOM = 0x4E0,EM_SETZOOM = 0x4E1,EM_GETVIEWKIND = 0x4E2,EM_SETVIEWKIND = 0x4E3,EM_GETPAGE = 0x4E4,EM_SETPAGE = 0x4E5,EM_GETHYPHENATEINFO = 0x4E6,EM_SETHYPHENATEINFO = 0x4E7,EM_INSERTTABLE = 0x4E8,EM_GETAUTOCORRECTPROC = 0x4E9,EM_SETAUTOCORRECTPROC = 0x4EA,EM_GETPAGEROTATE = 0x4EB,EM_SETPAGEROTATE = 0x4EC,EM_GETCTFMODEBIAS = 0x4ED,EM_SETCTFMODEBIAS = 0x4EE,EM_GETCTFOPENSTATUS = 0x4F0,EM_SETCTFOPENSTATUS = 0x4F1,EM_GETIMECOMPTEXT = 0x4F2,EM_ISIME = 0x4F3,EM_GETIMEPROPERTY = 0x4F4,EM_CALLAUTOCORRECTPROC = 0x4FF,EM_GETTABLEPARMS = 0x509,EM_GETQUERYRTFOBJ = 0x50D,EM_SETQUERYRTFOBJ = 0x50E,EM_SETEDITSTYLEEX = 0x513,EM_GETEDITSTYLEEX = 0x514,EM_GETSTORYTYPE = 0x522,EM_SETSTORYTYPE = 0x523,EM_GETELLIPSISMODE = 0x531,EM_SETELLIPSISMODE = 0x532,EM_SETTABLEPARMS = 0x533,EM_GETTOUCHOPTIONS = 0x536,EM_SETTOUCHOPTIONS = 0x537,EM_INSERTIMAGE = 0x53A,EM_SETUIANAME = 0x540,EM_GETELLIPSISSTATE = 0x542,TAPI_REPLY = 0x463,IPM_CLEARADDRESS = 0x464,IPM_SETADDRESS = 0x465,IPM_GETADDRESS = 0x466,IPM_SETRANGE = 0x467,IPM_SETFOCUS = 0x468,IPM_ISBLANK = 0x469,CDM_FIRST = 0x464,CDM_GETSPEC = 0x464,CDM_GETFILEPATH = 0x465,CDM_GETFOLDERPATH = 0x466,CDM_GETFOLDERIDLIST = 0x467,CDM_SETCONTROLTEXT = 0x468,CDM_HIDECONTROL = 0x469,CDM_SETDEFEXT = 0x46A,CDM_LAST = 0x4C8,BFFM_SETSTATUSTEXTA = 0x464,BFFM_ENABLEOK = 0x465,BFFM_SETSELECTIONA = 0x466,BFFM_SETSELECTIONW = 0x467,BFFM_SETSTATUSTEXTW = 0x468,BFFM_SETOKTEXT = 0x469,BFFM_SETEXPANDED = 0x46A,ACM_OPENA = 0x464,ACM_PLAY = 0x465,ACM_STOP = 0x466,ACM_OPENW = 0x467,ACM_ISPLAYING = 0x468,WM_CAP_UNICODE_START = 0x464,WM_CAP_SET_CALLBACK_ERRORW = 0x466,WM_CAP_SET_CALLBACK_STATUSW = 0x467,WM_CAP_DRIVER_GET_NAMEW = 0x470,WM_CAP_DRIVER_GET_VERSIONW = 0x471,WM_CAP_FILE_SET_CAPTURE_FILEW = 0x478,WM_CAP_FILE_GET_CAPTURE_FILEW = 0x479,WM_CAP_FILE_SAVEASW = 0x47B,WM_CAP_FILE_SAVEDIBW = 0x47D,WM_CAP_SET_MCI_DEVICEW = 0x4A6,WM_CAP_GET_MCI_DEVICEW = 0x4A7,WM_CAP_PAL_OPENW = 0x4B4,WM_CAP_PAL_SAVEW = 0x4B5,PSM_SETCURSEL = 0x465,PSM_REMOVEPAGE = 0x466,PSM_ADDPAGE = 0x467,PSM_CHANGED = 0x468,PSM_RESTARTWINDOWS = 0x469,PSM_REBOOTSYSTEM = 0x46A,PSM_CANCELTOCLOSE = 0x46B,PSM_QUERYSIBLINGS = 0x46C,PSM_UNCHANGED = 0x46D,PSM_APPLY = 0x46E,PSM_SETTITLEA = 0x46F,PSM_SETWIZBUTTONS = 0x470,PSM_PRESSBUTTON = 0x471,PSM_SETCURSELID = 0x472,PSM_SETFINISHTEXTA = 0x473,PSM_GETTABCONTROL = 0x474,PSM_ISDIALOGMESSAGE = 0x475,PSM_GETCURRENTPAGEHWND = 0x476,PSM_INSERTPAGE = 0x477,PSM_SETTITLEW = 0x478,PSM_SETFINISHTEXTW = 0x479,PSM_SETHEADERTITLEA = 0x47D,PSM_SETHEADERTITLEW = 0x47E,PSM_SETHEADERSUBTITLEA = 0x47F,PSM_SETHEADERSUBTITLEW = 0x480,PSM_HWNDTOINDEX = 0x481,PSM_INDEXTOHWND = 0x482,PSM_PAGETOINDEX = 0x483,PSM_INDEXTOPAGE = 0x484,PSM_IDTOINDEX = 0x485,PSM_INDEXTOID = 0x486,PSM_GETRESULT = 0x487,PSM_RECALCPAGESIZES = 0x488,PSM_SETNEXTTEXTW = 0x489,PSM_SHOWWIZBUTTONS = 0x48A,PSM_ENABLEWIZBUTTONS = 0x48B,PSM_SETBUTTONTEXTW = 0x48C,UDM_SETRANGE = 0x465,UDM_GETRANGE = 0x466,UDM_SETPOS = 0x467,UDM_GETPOS = 0x468,UDM_SETBUDDY = 0x469,UDM_GETBUDDY = 0x46A,UDM_SETACCEL = 0x46B,UDM_GETACCEL = 0x46C,UDM_SETBASE = 0x46D,UDM_GETBASE = 0x46E,UDM_SETRANGE32 = 0x46F,UDM_GETRANGE32 = 0x470,UDM_SETPOS32 = 0x471,UDM_GETPOS32 = 0x472,MCIWNDM_GETZOOM = 0x46D,MCIWNDM_REALIZE = 0x476,MCIWNDM_SETTIMEFORMATA = 0x477,MCIWNDM_GETTIMEFORMATA = 0x478,MCIWNDM_VALIDATEMEDIA = 0x479,MCIWNDM_PLAYTO = 0x47B,MCIWNDM_GETFILENAMEA = 0x47C,MCIWNDM_GETDEVICEA = 0x47D,MCIWNDM_GETPALETTE = 0x47E,MCIWNDM_SETPALETTE = 0x47F,MCIWNDM_GETERRORA = 0x480,MCIWNDM_SETINACTIVETIMER = 0x483,MCIWNDM_GETINACTIVETIMER = 0x485,MCIWNDM_GET_SOURCE = 0x48C,MCIWNDM_PUT_SOURCE = 0x48D,MCIWNDM_GET_DEST = 0x48E,MCIWNDM_PUT_DEST = 0x48F,MCIWNDM_CAN_PLAY = 0x490,MCIWNDM_CAN_WINDOW = 0x491,MCIWNDM_CAN_RECORD = 0x492,MCIWNDM_CAN_SAVE = 0x493,MCIWNDM_CAN_EJECT = 0x494,MCIWNDM_CAN_CONFIG = 0x495,MCIWNDM_PALETTEKICK = 0x496,MCIWNDM_NOTIFYMODE = 0x4C8,MCIWNDM_NOTIFYMEDIA = 0x4CB,MCIWNDM_NOTIFYERROR = 0x4CD,MCIWNDM_SETTIMEFORMATW = 0x4DB,MCIWNDM_GETTIMEFORMATW = 0x4DC,MCIWNDM_GETFILENAMEW = 0x4E0,MCIWNDM_GETDEVICEW = 0x4E1,MCIWNDM_GETERRORW = 0x4E4,DL_BEGINDRAG = 0x485,DL_DRAGGING = 0x486,DL_DROPPED = 0x487,DL_CANCELDRAG = 0x488,IE_GETINK = 0x496,IE_MSGFIRST = 0x496,IE_SETINK = 0x497,IE_GETPENTIP = 0x498,IE_SETPENTIP = 0x499,IE_GETERASERTIP = 0x49A,IE_SETERASERTIP = 0x49B,IE_GETBKGND = 0x49C,IE_SETBKGND = 0x49D,IE_GETGRIDORIGIN = 0x49E,IE_SETGRIDORIGIN = 0x49F,IE_GETGRIDPEN = 0x4A0,IE_SETGRIDPEN = 0x4A1,IE_GETGRIDSIZE = 0x4A2,IE_SETGRIDSIZE = 0x4A3,IE_GETMODE = 0x4A4,IE_SETMODE = 0x4A5,IE_GETINKRECT = 0x4A6,IE_GETAPPDATA = 0x4B8,IE_SETAPPDATA = 0x4B9,IE_GETDRAWOPTS = 0x4BA,IE_SETDRAWOPTS = 0x4BB,IE_GETFORMAT = 0x4BC,IE_SETFORMAT = 0x4BD,IE_GETINKINPUT = 0x4BE,IE_SETINKINPUT = 0x4BF,IE_GETNOTIFY = 0x4C0,IE_SETNOTIFY = 0x4C1,IE_GETRECOG = 0x4C2,IE_SETRECOG = 0x4C3,IE_GETSECURITY = 0x4C4,IE_SETSECURITY = 0x4C5,IE_GETSEL = 0x4C6,IE_SETSEL = 0x4C7,IE_DOCOMMAND = 0x4C8,IE_GETCOMMAND = 0x4C9,IE_GETCOUNT = 0x4CA,IE_GETGESTURE = 0x4CB,IE_GETMENU = 0x4CC,IE_GETPAINTDC = 0x4CD,IE_GETPDEVENT = 0x4CE,IE_GETSELCOUNT = 0x4CF,IE_GETSELITEMS = 0x4D0,IE_GETSTYLE = 0x4D1,FM_GETFOCUS = 0x600,FM_GETDRIVEINFOA = 0x601,FM_GETSELCOUNT = 0x602,FM_GETSELCOUNTLFN = 0x603,FM_GETFILESELA = 0x604,FM_GETFILESELLFNA = 0x605,FM_REFRESH_WINDOWS = 0x606,FM_RELOAD_EXTENSIONS = 0x607,FM_GETDRIVEINFOW = 0x611,FM_GETFILESELW = 0x614,FM_GETFILESELLFNW = 0x615,WLX_WM_SAS = 0x659,SM_GETSELCOUNT = 0x7E8,SM_GETSERVERSELA = 0x7E9,SM_GETSERVERSELW = 0x7EA,SM_GETCURFOCUSA = 0x7EB,SM_GETCURFOCUSW = 0x7EC,SM_GETOPTIONS = 0x7ED,WM_CPL_LAUNCH = 0x7E8,WM_CPL_LAUNCHED = 0x7E9,UM_GETSELCOUNT = 0x7E8,UM_GETUSERSELA = 0x7E9,UM_GETUSERSELW = 0x7EA,UM_GETGROUPSELA = 0x7EB,UM_GETGROUPSELW = 0x7EC,UM_GETCURFOCUSA = 0x7ED,UM_GETCURFOCUSW = 0x7EE,UM_GETOPTIONS = 0x7EF,UM_GETOPTIONS2 = 0x7F0,LVM_FIRST = 0x1000,LVM_GETBKCOLOR = 0x1000,LVM_SETBKCOLOR = 0x1001,LVM_GETIMAGELIST = 0x1002,LVM_SETIMAGELIST = 0x1003,LVM_GETITEMCOUNT = 0x1004,LVM_GETITEMA = 0x1005,LVM_SETITEMA = 0x1006,LVM_INSERTITEMA = 0x1007,LVM_DELETEITEM = 0x1008,LVM_DELETEALLITEMS = 0x1009,LVM_GETCALLBACKMASK = 0x100A,LVM_SETCALLBACKMASK = 0x100B,LVM_GETNEXTITEM = 0x100C,LVM_FINDITEMA = 0x100D,LVM_GETITEMRECT = 0x100E,LVM_SETITEMPOSITION = 0x100F,LVM_GETITEMPOSITION = 0x1010,LVM_GETSTRINGWIDTHA = 0x1011,LVM_HITTEST = 0x1012,LVM_ENSUREVISIBLE = 0x1013,LVM_SCROLL = 0x1014,LVM_REDRAWITEMS = 0x1015,LVM_ARRANGE = 0x1016,LVM_EDITLABELA = 0x1017,LVM_GETEDITCONTROL = 0x1018,LVM_GETCOLUMNA = 0x1019,LVM_SETCOLUMNA = 0x101A,LVM_INSERTCOLUMNA = 0x101B,LVM_DELETECOLUMN = 0x101C,LVM_GETCOLUMNWIDTH = 0x101D,LVM_SETCOLUMNWIDTH = 0x101E,LVM_GETHEADER = 0x101F,LVM_CREATEDRAGIMAGE = 0x1021,LVM_GETVIEWRECT = 0x1022,LVM_GETTEXTCOLOR = 0x1023,LVM_SETTEXTCOLOR = 0x1024,LVM_GETTEXTBKCOLOR = 0x1025,LVM_SETTEXTBKCOLOR = 0x1026,LVM_GETTOPINDEX = 0x1027,LVM_GETCOUNTPERPAGE = 0x1028,LVM_GETORIGIN = 0x1029,LVM_UPDATE = 0x102A,LVM_SETITEMSTATE = 0x102B,LVM_GETITEMSTATE = 0x102C,LVM_GETITEMTEXTA = 0x102D,LVM_SETITEMTEXTA = 0x102E,LVM_SETITEMCOUNT = 0x102F,LVM_SORTITEMS = 0x1030,LVM_SETITEMPOSITION32 = 0x1031,LVM_GETSELECTEDCOUNT = 0x1032,LVM_GETITEMSPACING = 0x1033,LVM_GETISEARCHSTRINGA = 0x1034,LVM_SETICONSPACING = 0x1035,LVM_SETEXTENDEDLISTVIEWSTYLE = 0x1036,LVM_GETEXTENDEDLISTVIEWSTYLE = 0x1037,LVM_GETSUBITEMRECT = 0x1038,LVM_SUBITEMHITTEST = 0x1039,LVM_SETCOLUMNORDERARRAY = 0x103A,LVM_GETCOLUMNORDERARRAY = 0x103B,LVM_SETHOTITEM = 0x103C,LVM_GETHOTITEM = 0x103D,LVM_SETHOTCURSOR = 0x103E,LVM_GETHOTCURSOR = 0x103F,LVM_APPROXIMATEVIEWRECT = 0x1040,LVM_SETWORKAREAS = 0x1041,LVM_GETSELECTIONMARK = 0x1042,LVM_SETSELECTIONMARK = 0x1043,LVM_SETBKIMAGEA = 0x1044,LVM_GETBKIMAGEA = 0x1045,LVM_GETWORKAREAS = 0x1046,LVM_SETHOVERTIME = 0x1047,LVM_GETHOVERTIME = 0x1048,LVM_GETNUMBEROFWORKAREAS = 0x1049,LVM_SETTOOLTIPS = 0x104A,LVM_GETITEMW = 0x104B,LVM_SETITEMW = 0x104C,LVM_INSERTITEMW = 0x104D,LVM_GETTOOLTIPS = 0x104E,LVM_SORTITEMSEX = 0x1051,LVM_FINDITEMW = 0x1053,LVM_GETSTRINGWIDTHW = 0x1057,LVM_GETGROUPSTATE = 0x105C,LVM_GETFOCUSEDGROUP = 0x105D,LVM_GETCOLUMNW = 0x105F,LVM_SETCOLUMNW = 0x1060,LVM_INSERTCOLUMNW = 0x1061,LVM_GETGROUPRECT = 0x1062,LVM_GETITEMTEXTW = 0x1073,LVM_SETITEMTEXTW = 0x1074,LVM_GETISEARCHSTRINGW = 0x1075,LVM_EDITLABELW = 0x1076,LVM_GETBKIMAGEW = 0x108B,LVM_SETSELECTEDCOLUMN = 0x108C,LVM_SETTILEWIDTH = 0x108D,LVM_SETVIEW = 0x108E,LVM_GETVIEW = 0x108F,LVM_INSERTGROUP = 0x1091,LVM_SETGROUPINFO = 0x1093,LVM_GETGROUPINFO = 0x1095,LVM_REMOVEGROUP = 0x1096,LVM_MOVEGROUP = 0x1097,LVM_GETGROUPCOUNT = 0x1098,LVM_GETGROUPINFOBYINDEX = 0x1099,LVM_MOVEITEMTOGROUP = 0x109A,LVM_SETGROUPMETRICS = 0x109B,LVM_GETGROUPMETRICS = 0x109C,LVM_ENABLEGROUPVIEW = 0x109D,LVM_SORTGROUPS = 0x109E,LVM_INSERTGROUPSORTED = 0x109F,LVM_REMOVEALLGROUPS = 0x10A0,LVM_HASGROUP = 0x10A1,LVM_SETTILEVIEWINFO = 0x10A2,LVM_GETTILEVIEWINFO = 0x10A3,LVM_SETTILEINFO = 0x10A4,LVM_GETTILEINFO = 0x10A5,LVM_SETINSERTMARK = 0x10A6,LVM_GETINSERTMARK = 0x10A7,LVM_INSERTMARKHITTEST = 0x10A8,LVM_GETINSERTMARKRECT = 0x10A9,LVM_SETINSERTMARKCOLOR = 0x10AA,LVM_GETINSERTMARKCOLOR = 0x10AB,LVM_SETINFOTIP = 0x10AD,LVM_GETSELECTEDCOLUMN = 0x10AE,LVM_ISGROUPVIEWENABLED = 0x10AF,LVM_GETOUTLINECOLOR = 0x10B0,LVM_SETOUTLINECOLOR = 0x10B1,LVM_CANCELEDITLABEL = 0x10B3,LVM_MAPINDEXTOID = 0x10B4,LVM_MAPIDTOINDEX = 0x10B5,LVM_ISITEMVISIBLE = 0x10B6,LVM_GETEMPTYTEXT = 0x10CC,LVM_GETFOOTERRECT = 0x10CD,LVM_GETFOOTERINFO = 0x10CE,LVM_GETFOOTERITEMRECT = 0x10CF,LVM_GETFOOTERITEM = 0x10D0,LVM_GETITEMINDEXRECT = 0x10D1,LVM_SETITEMINDEXSTATE = 0x10D2,LVM_GETNEXTITEMINDEX = 0x10D3,LVM_SETUNICODEFORMAT = 0x2005,LVM_GETUNICODEFORMAT = 0x2006,OCM__BASE = 0x2000,OCM_CTLCOLOR = 0x2019,OCM_DRAWITEM = 0x202B,OCM_MEASUREITEM = 0x202C,OCM_DELETEITEM = 0x202D,OCM_VKEYTOITEM = 0x202E,OCM_CHARTOITEM = 0x202F,OCM_COMPAREITEM = 0x2039,OCM_NOTIFY = 0x204E,OCM_COMMAND = 0x2111,OCM_HSCROLL = 0x2114,OCM_VSCROLL = 0x2115,OCM_CTLCOLORMSGBOX = 0x2132,OCM_CTLCOLOREDIT = 0x2133,OCM_CTLCOLORLISTBOX = 0x2134,OCM_CTLCOLORBTN = 0x2135,OCM_CTLCOLORDLG = 0x2136,OCM_CTLCOLORSCROLLBAR = 0x2137,OCM_CTLCOLORSTATIC = 0x2138,OCM_PARENTNOTIFY = 0x2210,WM_APP = 0x8000,WM_RASDIALEVENT = 0xCCCD,CBEM_DELETEITEM = 0x144,CBEM_SETUNICODEFORMAT = 0x2005,CBEM_GETUNICODEFORMAT = 0x2006,IE_GETMODIFY = 0xB8,IE_SETMODIFY = 0xB9,IE_CANUNDO = 0xC6,IE_UNDO = 0xC7,IE_EMPTYUNDOBUFFER = 0xCD,LVM_SETBKIMAGEW = 0x108A,MCIWNDM_GETDEVICEID = 0x464,MCIWNDM_GETSTART = 0x467,MCIWNDM_GETLENGTH = 0x468,MCIWNDM_GETEND = 0x469,MCIWNDM_EJECT = 0x46B,MCIWNDM_SETZOOM = 0x46C,MCIWNDM_SETVOLUME = 0x46E,MCIWNDM_GETVOLUME = 0x46F,MCIWNDM_SETSPEED = 0x470,MCIWNDM_GETSPEED = 0x471,MCIWNDM_SETREPEAT = 0x472,MCIWNDM_GETREPEAT = 0x473,MCIWNDM_PLAYFROM = 0x47A,MCIWNDM_SETTIMERS = 0x481,MCIWNDM_SETACTIVETIMER = 0x482,MCIWNDM_GETACTIVETIMER = 0x484,MCIWNDM_CHANGESTYLES = 0x487,MCIWNDM_GETSTYLES = 0x488,MCIWNDM_GETALIAS = 0x489,MCIWNDM_PLAYREVERSE = 0x48B,MCIWNDM_OPENINTERFACE = 0x497,MCIWNDM_SETOWNER = 0x498,MCIWNDM_SENDSTRINGA = 0x465,MCIWNDM_GETPOSITIONA = 0x466,MCIWNDM_GETMODEA = 0x46A,MCIWNDM_NEWA = 0x486,MCIWNDM_RETURNSTRINGA = 0x48A,MCIWNDM_OPENA = 0x499,MCIWNDM_SENDSTRINGW = 0x4C9,MCIWNDM_GETPOSITIONW = 0x4CA,MCIWNDM_GETMODEW = 0x4CE,MCIWNDM_NEWW = 0x4EA,MCIWNDM_RETURNSTRINGW = 0x4EE,MCIWNDM_OPENW = 0x4FC,MCIWNDM_NOTIFYPOS = 0x4C9,MCIWNDM_NOTIFYSIZE = 0x4CA,MSG_FTS_JUMP_HASH = 0x420,MSG_FTS_GET_TITLE = 0x422,PBM_SETBKCOLOR = 0x2001,RB_SETCOLORSCHEME = 0x2002,RB_GETCOLORSCHEME = 0x2003,RB_GETDROPTARGET = 0x2004,RB_SETUNICODEFORMAT = 0x2005,RB_GETUNICODEFORMAT = 0x2006,SB_SETUNICODEFORMAT = 0x2005,SB_GETUNICODEFORMAT = 0x2006,SB_SETBKCOLOR = 0x2001,STM_MSGMAX = 0x174,TBM_SETUNICODEFORMAT = 0x2005,TBM_GETUNICODEFORMAT = 0x2006,TB_SETCOLORSCHEME = 0x2002,TB_GETCOLORSCHEME = 0x2003,TB_SETUNICODEFORMAT = 0x2005,TB_GETUNICODEFORMAT = 0x2006,UDM_SETUNICODEFORMAT = 0x2005,UDM_GETUNICODEFORMAT = 0x2006,WM_CAP_START = 0x400,WM_CAP_GET_CAPSTREAMPTR = 0x401,WM_CAP_SET_CALLBACK_ERRORA = 0x402,WM_CAP_SET_CALLBACK_STATUSA = 0x403,WM_CAP_SET_CALLBACK_YIELD = 0x404,WM_CAP_SET_CALLBACK_FRAME = 0x405,WM_CAP_SET_CALLBACK_VIDEOSTREAM = 0x406,WM_CAP_SET_CALLBACK_WAVESTREAM = 0x407,WM_CAP_GET_USER_DATA = 0x408,WM_CAP_SET_USER_DATA = 0x409,WM_CAP_DRIVER_CONNECT = 0x40A,WM_CAP_DRIVER_DISCONNECT = 0x40B,WM_CAP_DRIVER_GET_NAMEA = 0x40C,WM_CAP_DRIVER_GET_VERSIONA = 0x40D,WM_CAP_DRIVER_GET_CAPS = 0x40E,WM_CAP_FILE_SET_CAPTURE_FILEA = 0x414,WM_CAP_FILE_GET_CAPTURE_FILEA = 0x415,WM_CAP_FILE_SAVEASA = 0x417,WM_CAP_FILE_SAVEDIBA = 0x419,WM_CAP_FILE_ALLOCATE = 0x416,WM_CAP_FILE_SET_INFOCHUNK = 0x418,WM_CAP_EDIT_COPY = 0x41E,WM_CAP_SET_AUDIOFORMAT = 0x423,WM_CAP_GET_AUDIOFORMAT = 0x424,WM_CAP_DLG_VIDEOFORMAT = 0x429,WM_CAP_DLG_VIDEOSOURCE = 0x42A,WM_CAP_DLG_VIDEODISPLAY = 0x42B,WM_CAP_GET_VIDEOFORMAT = 0x42C,WM_CAP_SET_VIDEOFORMAT = 0x42D,WM_CAP_DLG_VIDEOCOMPRESSION = 0x42E,WM_CAP_SET_PREVIEW = 0x432,WM_CAP_SET_OVERLAY = 0x433,WM_CAP_SET_PREVIEWRATE = 0x434,WM_CAP_SET_SCALE = 0x435,WM_CAP_GET_STATUS = 0x436,WM_CAP_SET_SCROLL = 0x437,WM_CAP_GRAB_FRAME = 0x43C,WM_CAP_GRAB_FRAME_NOSTOP = 0x43D,WM_CAP_SEQUENCE = 0x43E,WM_CAP_SEQUENCE_NOFILE = 0x43F,WM_CAP_SET_SEQUENCE_SETUP = 0x440,WM_CAP_GET_SEQUENCE_SETUP = 0x441,WM_CAP_SET_MCI_DEVICEA = 0x442,WM_CAP_GET_MCI_DEVICEA = 0x443,WM_CAP_STOP = 0x444,WM_CAP_ABORT = 0x445,WM_CAP_SINGLE_FRAME_OPEN = 0x446,WM_CAP_SINGLE_FRAME_CLOSE = 0x447,WM_CAP_SINGLE_FRAME = 0x448,WM_CAP_PAL_OPENA = 0x450,WM_CAP_PAL_SAVEA = 0x451,WM_CAP_PAL_PASTE = 0x452,WM_CAP_PAL_AUTOCREATE = 0x453,WM_CAP_PAL_MANUALCREATE = 0x454,WM_CAP_SET_CALLBACK_CAPCONTROL = 0x455,WM_CAP_UNICODE_END = 0x4B5,WM_CAP_END = 0x4B5,WM_DDE_FIRST = 0x3E0,WM_DDE_LAST = 0x3E8,WM_DLGBORDER = 0x11EF,WM_DLGSUBCLASS = 0x11F0,WM_ADSPROP_NOTIFY_PAGEINIT = 0x84D,WM_ADSPROP_NOTIFY_PAGEHWND = 0x84E,WM_ADSPROP_NOTIFY_CHANGE = 0x84F,WM_ADSPROP_NOTIFY_APPLY = 0x850,WM_ADSPROP_NOTIFY_SETFOCUS = 0x851,WM_ADSPROP_NOTIFY_FOREGROUND = 0x852,WM_ADSPROP_NOTIFY_EXIT = 0x853,WM_ADSPROP_NOTIFY_ERROR = 0x856,WM_TOUCH = 0x240,WM_TOUCHHITTESTING = 0x24D,WM_DPICHANGED = 0x2E0,WM_DPICHANGED_BEFOREPARENT = 0x2E2,WM_DPICHANGED_AFTERPARENT = 0x2E3,WM_CLIPBOARDUPDATE = 0x31D,WM_DWMCOMPOSITIONCHANGED = 0x31E,WM_DWMNCRENDERINGCHANGED = 0x31F,WM_DWMCOLORIZATIONCOLORCHANGED = 0x320,WM_DWMWINDOWMAXIMIZEDCHANGE = 0x321,WM_DWMSENDICONICTHUMBNAIL = 0x323,WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x326,WM_INPUT_DEVICE_CHANGE = 0xFE,WM_GESTURE = 0x119,WM_GESTURENOTIFY = 0x11A,WM_MOUSEHWHEEL = 0x20E,WM_POINTERDEVICECHANGE = 0x238,WM_POINTERDEVICEINRANGE = 0x239,WM_POINTERDEVICEOUTOFRANGE = 0x23A,WM_NCPOINTERUPDATE = 0x241,WM_NCPOINTERDOWN = 0x242,WM_NCPOINTERUP = 0x243,WM_POINTERUPDATE = 0x245,WM_POINTERDOWN = 0x246,WM_POINTERUP = 0x247,WM_POINTERENTER = 0x249,WM_POINTERLEAVE = 0x24A,WM_POINTERACTIVATE = 0x24B,WM_POINTERCAPTURECHANGED = 0x24C,WM_POINTERWHEEL = 0x24E,WM_POINTERHWHEEL = 0x24F,WM_POINTERROUTEDTO = 0x251,WM_POINTERROUTEDAWAY = 0x252,WM_POINTERROUTEDRELEASED = 0x253,WM_TABLET_ADDED = 0x2C8,WM_TABLET_DELETED = 0x2C9,WM_TABLET_FLICK = 0x2CB,WM_TABLET_QUERYSYSTEMGESTURESTATUS = 0x2CC,WM_GETDPISCALEDSIZE = 0x2E4,WM_GETTITLEBARINFOEX = 0x33F,};
enum MACRO_WN {WN_SUCCESS = 0,WN_NO_ERROR = 0,WN_NOT_SUPPORTED = 50,WN_CANCEL = 1223,WN_RETRY = 1237,WN_NET_ERROR = 59,WN_MORE_DATA = 234,WN_BAD_POINTER = 487,WN_BAD_VALUE = 87,WN_BAD_USER = 2202,WN_BAD_PASSWORD = 86,WN_ACCESS_DENIED = 5,WN_FUNCTION_BUSY = 170,WN_WINDOWS_ERROR = 59,WN_OUT_OF_MEMORY = 8,WN_NO_NETWORK = 1222,WN_EXTENDED_ERROR = 1208,WN_BAD_LEVEL = 124,WN_BAD_HANDLE = 6,WN_NOT_INITIALIZING = 1247,WN_NO_MORE_DEVICES = 1248,WN_NOT_CONNECTED = 2250,WN_OPEN_FILES = 2401,WN_DEVICE_IN_USE = 2404,WN_BAD_NETNAME = 67,WN_BAD_LOCALNAME = 1200,WN_ALREADY_CONNECTED = 85,WN_DEVICE_ERROR = 31,WN_CONNECTION_CLOSED = 1201,WN_NO_NET_OR_BAD_PATH = 1203,WN_BAD_PROVIDER = 1204,WN_CANNOT_OPEN_PROFILE = 1205,WN_BAD_PROFILE = 1206,WN_BAD_DEV_TYPE = 66,WN_DEVICE_ALREADY_REMEMBERED = 1202,WN_CONNECTED_OTHER_PASSWORD = 2108,WN_NO_MORE_ENTRIES = 259,WN_NOT_CONTAINER = 1207,WN_NOT_AUTHENTICATED = 1244,WN_NOT_LOGGED_ON = 1245,WN_NOT_VALIDATED = 1311,};
enum MACRO_WS {WS_OVERLAPPED = 0x0,WS_POPUP = 0x80000000,WS_CHILD = 0x40000000,WS_MINIMIZE = 0x20000000,WS_VISIBLE = 0x10000000,WS_DISABLED = 0x8000000,WS_CLIPSIBLINGS = 0x4000000,WS_CLIPCHILDREN = 0x2000000,WS_MAXIMIZE = 0x1000000,WS_CAPTION = 0xC00000,WS_BORDER = 0x800000,WS_DLGFRAME = 0x400000,WS_VSCROLL = 0x200000,WS_HSCROLL = 0x100000,WS_SYSMENU = 0x80000,WS_THICKFRAME = 0x40000,WS_GROUP = 0x20000,WS_TABSTOP = 0x10000,WS_MINIMIZEBOX = 0x20000,WS_MAXIMIZEBOX = 0x10000,WS_TILED = 0x0,WS_ICONIC = 0x20000000,WS_SIZEBOX = 0x40000,WS_OVERLAPPEDWINDOW = 0xCF0000,WS_POPUPWINDOW = 0x80880000,WS_CHILDWINDOW = 0x40000000,WS_EX_DLGMODALFRAME = 0x1,WS_EX_NOPARENTNOTIFY = 0x4,WS_EX_TOPMOST = 0x8,WS_EX_ACCEPTFILES = 0x10,WS_EX_TRANSPARENT = 0x20,WS_EX_MDICHILD = 0x40,WS_EX_TOOLWINDOW = 0x80,WS_EX_WINDOWEDGE = 0x100,WS_EX_CLIENTEDGE = 0x200,WS_EX_CONTEXTHELP = 0x400,WS_EX_RIGHT = 0x1000,WS_EX_LEFT = 0x0,WS_EX_RTLREADING = 0x2000,WS_EX_LTRREADING = 0x0,WS_EX_LEFTSCROLLBAR = 0x4000,WS_EX_RIGHTSCROLLBAR = 0x0,WS_EX_CONTROLPARENT = 0x10000,WS_EX_STATICEDGE = 0x20000,WS_EX_APPWINDOW = 0x40000,WS_EX_OVERLAPPEDWINDOW = 0x300,WS_EX_PALETTEWINDOW = 0x188,};
enum MACRO_WT {WT_EXECUTEDEFAULT = 0x0,WT_EXECUTEINIOTHREAD = 0x1,WT_EXECUTEINUITHREAD = 0x2,WT_EXECUTEINWAITTHREAD = 0x4,WT_EXECUTEDELETEWAIT = 0x8,WT_EXECUTEINLONGTHREAD = 0x10,};
enum MACRO_XA {XA_RBBASE = 100,XA_RBROLLBACK = 100,XA_RBCOMMFAIL = 101,XA_RBDEADLOCK = 102,XA_RBINTEGRITY = 103,XA_RBOTHER = 104,XA_RBPROTO = 105,XA_RBTIMEOUT = 106,XA_RBTRANSIENT = 107,XA_RBEND = 107,XA_NOMIGRATE = 9,XA_HEURHAZ = 8,XA_HEURCOM = 7,XA_HEURRB = 6,XA_HEURMIX = 5,XA_RETRY = 4,XA_RDONLY = 3,XA_OK = 0,};
enum MACRO_XC {XC_SECURITY_NONE = 0,XC_SECURITY_SAME = 1,XC_SECURITY_PROGRAM = 2,XC_APPLICATION_TP = 0,XC_SNA_SERVICE_TP = 1,};
enum MACRO_XP {XP_CONNECTIONLESS = 0x1,XP_GUARANTEED_DELIVERY = 0x2,XP_GUARANTEED_ORDER = 0x4,XP_MESSAGE_ORIENTED = 0x8,XP_PSEUDO_STREAM = 0x10,XP_GRACEFUL_CLOSE = 0x20,XP_EXPEDITED_DATA = 0x40,XP_CONNECT_DATA = 0x80,XP_DISCONNECT_DATA = 0x100,XP_SUPPORTS_BROADCAST = 0x200,XP_SUPPORTS_MULTICAST = 0x400,XP_BANDWIDTH_ALLOCATION = 0x800,XP_FRAGMENTATION = 0x1000,XP_ENCRYPTS = 0x2000,};
enum MACRO__A {_A_NORMAL = 0x0,_A_RDONLY = 0x1,_A_HIDDEN = 0x2,_A_SYSTEM = 0x4,_A_SUBDIR = 0x10,_A_ARCH = 0x20,};
enum MACRO__M {_M_COLLATE = 1,_M_CTYPE = 2,_M_MONETARY = 4,_M_NUMERIC = 8,_M_TIME = 16,_M_MESSAGE = 32,_M_ALL = 63,};
enum MACRO__O {_O_RDONLY = 0x0,_O_WRONLY = 0x1,_O_RDWR = 0x2,_O_APPEND = 0x8,_O_CREAT = 0x100,_O_TRUNC = 0x200,_O_EXCL = 0x400,_O_TEXT = 0x4000,_O_BINARY = 0x8000,_O_RAW = 0x8000,_O_NOINHERIT = 0x80,_O_TEMPORARY = 0x40,_O_SHORT_LIVED = 0x1000,_O_SEQUENTIAL = 0x20,_O_RANDOM = 0x10,};
enum MACRO__P {_P_WAIT = 0,_P_NOWAIT = 1,};
enum MACRO__S {_S_IFMT = 0xF000,_S_IFDIR = 0x4000,_S_IFCHR = 0x2000,_S_IFIFO = 0x1000,_S_IFREG = 0x8000,_S_IREAD = 0x100,_S_IWRITE = 0x80,_S_IEXEC = 0x40,};
typedef struct mc_flush MC_FLUSH;
typedef struct tagMENUINFO MENUINFO;
typedef struct _MMCKINFO MMCKINFO;
typedef struct _MMIOINFO MMIOINFO;
typedef struct tagMULTI_QI MULTI_QI;
typedef int ( *NEARPROC)();
typedef struct _NM_UPDOWN NMUPDOWN;
typedef struct nodeent_f NODEENTF;
typedef struct _328060AA9F47934214406E09F9D6352A NOTIFKEY;
typedef struct tagBITMAP *NPBITMAP;
typedef struct tagLOGPEN *NPLOGPEN;
typedef struct mmtime_tag *NPMMTIME;
typedef struct _NS_INFOA NS_INFOA;
typedef struct _NS_INFOW NS_INFOW;
typedef struct _13B347001B2B96C65D01839EEA37C971 NUMPARSE;
typedef struct _OBJECTID OBJECTID;
typedef struct _OFSTRUCT OFSTRUCT;
enum OLECMDID {OLECMDID_OPEN = 0x1,OLECMDID_NEW = 0x2,OLECMDID_SAVE = 0x3,OLECMDID_SAVEAS = 0x4,OLECMDID_SAVECOPYAS = 0x5,OLECMDID_PRINT = 0x6,OLECMDID_PRINTPREVIEW = 0x7,OLECMDID_PAGESETUP = 0x8,OLECMDID_SPELL = 0x9,OLECMDID_PROPERTIES = 0xA,OLECMDID_CUT = 0xB,OLECMDID_COPY = 0xC,OLECMDID_PASTE = 0xD,OLECMDID_PASTESPECIAL = 0xE,OLECMDID_UNDO = 0xF,OLECMDID_REDO = 0x10,OLECMDID_SELECTALL = 0x11,OLECMDID_CLEARSELECTION = 0x12,OLECMDID_ZOOM = 0x13,OLECMDID_GETZOOMRANGE = 0x14,OLECMDID_UPDATECOMMANDS = 0x15,OLECMDID_REFRESH = 0x16,OLECMDID_STOP = 0x17,OLECMDID_HIDETOOLBARS = 0x18,OLECMDID_SETPROGRESSMAX = 0x19,OLECMDID_SETPROGRESSPOS = 0x1A,OLECMDID_SETPROGRESSTEXT = 0x1B,OLECMDID_SETTITLE = 0x1C,OLECMDID_SETDOWNLOADSTATE = 0x1D,OLECMDID_STOPDOWNLOAD = 0x1E,OLECMDID_ONTOOLBARACTIVATED = 0x1F,OLECMDID_FIND = 0x20,OLECMDID_DELETE = 0x21,OLECMDID_HTTPEQUIV = 0x22,OLECMDID_HTTPEQUIV_DONE = 0x23,OLECMDID_ENABLE_INTERACTION = 0x24,OLECMDID_ONUNLOAD = 0x25,OLECMDID_PROPERTYBAG2 = 0x26,OLECMDID_PREREFRESH = 0x27,};
typedef struct _AT_ENUM *PAT_ENUM;
typedef struct _AT_INFO *PAT_INFO;
typedef IAVIFile *PAVIFILE;
typedef struct _CabInfo *PCABINFO;
typedef unsigned int *PDWORD32;
typedef unsigned long long *PDWORD64;
typedef struct tagPELARRAY PELARRAY;
typedef struct tagEMRTEXT *PEMRTEXT;
typedef struct _PERF_BIN PERF_BIN;
typedef struct hostent *PHOSTENT;
typedef struct _tagPHYSICAL PHYSICAL;
typedef struct tagPICTDESC PICTDESC;
typedef struct _IDEREGS *PIDEREGS;
typedef struct _tagIMEPROA *PIMEPROA;
typedef struct _tagIMEPROW *PIMEPROW;
typedef int *PINT_PTR;
typedef struct in_addr *PIN_ADDR;
typedef struct _PinInfo PIN_INFO;
typedef struct _tagIOSPACE *PIOSPACE;
typedef struct joyinfo_tag *PJOYINFO;
typedef struct _69DAD432D0597BAB6A67398C913F94DB *PKSP_PIN;
typedef struct _LLC_CCB *PLLC_CCB;
typedef union _MESSAGE *PMESSAGE;
typedef struct midihdr_tag *PMIDIHDR;
typedef struct _PORT_DEF PORT_DEF;
typedef IOverlay *POVERLAY;
typedef struct _18FEA12C471CE0A4515515C42723EF45 *PPBRANGE;
typedef struct pvalueA *PPVALUEA;
typedef struct pvalueW *PPVALUEW;
typedef struct _RGNDATA *PRGNDATA;
typedef struct tagPROPBAG2 PROPBAG2;
typedef struct tagPROPSPEC PROPSPEC;
typedef struct protoent PROTOENT;
typedef struct servent *PSERVENT;
typedef struct timeval *PTIMEVAL;
typedef unsigned int *PULONG32;
typedef unsigned long long *PULONG64;
typedef struct value_entA *PVALENTA;
typedef struct value_entW *PVALENTW;
typedef struct wavehdr_tag *PWAVEHDR;
typedef struct tagWCRANGE *PWCRANGE;
typedef struct _WGLSWAP *PWGLSWAP;
struct Position {struct PositionVtbl *lpVtbl;};
struct Property {struct PropertyVtbl *lpVtbl;};
typedef struct _D333B2CEDD563FFBEB75B63E07F81E15 Q2931_IE;
typedef struct _renddata RENDDATA;
typedef struct _reobject REOBJECT;
typedef struct _rifflist RIFFLIST;
typedef struct _RIP_INFO RIP_INFO;
typedef struct _ROWENTRY ROWENTRY;
typedef int RPC_BOOL;
typedef char RPC_BYTE;
struct Response;
typedef struct _SCH_CRED SCH_CRED;
typedef struct _SHITEMID SHITEMID;
typedef struct sockaddr SOCKADDR;
typedef double SQLFLOAT;
typedef signed char SQLSCHAR;
typedef struct srv_proc SRV_PROC;
typedef struct srv_rpcp SRV_RPCp;
typedef struct tagSTATDATA STATDATA;
typedef struct _StrEntry STRENTRY;
typedef struct _StrTable STRTABLE;
typedef struct _SYNC_CFG SYNC_CFG;
typedef struct tagTARGINFO TARGINFO;
typedef struct _TBBUTTON TBBUTTON;
typedef struct tecwrksd TECWRKSD;
typedef struct tecwrkus TECWRKUS;
typedef struct tedalert TEDALERT;
typedef struct tediagns TEDIAGNS;
typedef struct test_rts TEST_RTS;
typedef struct timecaps_tag TIMECAPS;
typedef union _timecode TIMECODE;
typedef struct tagTLIBATTR TLIBATTR;
typedef struct tpfmihdr TPFMIHDR;
typedef struct _tp_start_entry TPSENTRY;
typedef struct tpstahdr TPSTAHDR;
typedef struct tpstchdr TPSTCHDR;
typedef struct tpstehdr TPSTEHDR;
typedef struct tpstmhdr TPSTMHDR;
typedef struct tpstrhdr TPSTRHDR;
typedef struct tpstshdr TPSTSHDR;
typedef struct tp_ended TP_ENDED;
typedef struct _TRUSTEE_A TRUSTEEA;
typedef struct _TRUSTEE_W TRUSTEEW;
typedef struct tagTVSORTCB TVSORTCB;
typedef struct tagTYPEATTR TYPEATTR;
typedef struct tagTYPEDESC TYPEDESC;
struct Terminal;
typedef unsigned int UINT_PTR;
typedef struct videohdr_tag VIDEOHDR;
typedef struct tagWCSVDATA WCSVDATA;
enum XACTSTAT {XACTSTAT_NONE = 0x0,XACTSTAT_OPENNORMAL = 0x1,XACTSTAT_OPENREFUSED = 0x2,XACTSTAT_PREPARING = 0x4,XACTSTAT_PREPARED = 0x8,XACTSTAT_PREPARERETAINING = 0x10,XACTSTAT_PREPARERETAINED = 0x20,XACTSTAT_COMMITTING = 0x40,XACTSTAT_COMMITRETAINING = 0x80,XACTSTAT_ABORTING = 0x100,XACTSTAT_ABORTED = 0x200,XACTSTAT_COMMITTED = 0x400,XACTSTAT_HEURISTIC_ABORT = 0x800,XACTSTAT_HEURISTIC_COMMIT = 0x1000,XACTSTAT_HEURISTIC_DAMAGE = 0x2000,XACTSTAT_HEURISTIC_DANGER = 0x4000,XACTSTAT_FORCED_ABORT = 0x8000,XACTSTAT_FORCED_COMMIT = 0x10000,XACTSTAT_INDOUBT = 0x20000,XACTSTAT_CLOSED = 0x40000,XACTSTAT_OPEN = 0x3,XACTSTAT_NOTPREPARED = 0x7FFC3,XACTSTAT_ALL = 0x7FFFF,};
struct _Collvec {unsigned int _Hand;unsigned int _Page;};
struct _Command {struct _CommandVtbl *lpVtbl;};
enum _D3DCULL {D3DCULL_NONE = 0x1,D3DCULL_CW = 0x2,D3DCULL_CCW = 0x3,D3DCULL_FORCE_DWORD = 0x7FFFFFFF,};
struct _DMsepg4 {struct _DMsepg4Vtbl *lpVtbl;};
struct _HMAPPER;
enum _SRVINFO {SRVINFO_F_COSERVERINFO = 0x0,SRVINFO_F_COSERVERINFO2 = 0x1,};
struct _complex {double x;double y;};
typedef unsigned int _fsize_t;
struct appc_hdr {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;};
struct dn_naddr {unsigned short a_len;unsigned char a_addr[20];};
struct get_type {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char conv_type;};
struct mc_flush {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
struct protoent {char *p_name;char **p_aliases;short p_proto;};
typedef signed int *smiLPINT;
typedef struct _76984A67E2D58AA25A49E08E8F9C1198 *smiLPOID;
typedef struct _7CE74CE74CF979B93E9F8A54217A4B92 smiVALUE;
struct tagGUIDE {int xOrigin;int yOrigin;int cxBox;int cyBox;int cxBase;int cyBase;int cHorzBox;int cVertBox;int cyMid;};
enum tagMKSYS {MKSYS_NONE = 0x0,MKSYS_GENERICCOMPOSITE = 0x1,MKSYS_FILEMONIKER = 0x2,MKSYS_ANTIMONIKER = 0x3,MKSYS_ITEMMONIKER = 0x4,MKSYS_POINTERMONIKER = 0x5,MKSYS_CLASSMONIKER = 0x7,};
enum tagSHGDN {SHGDN_NORMAL = 0x0,SHGDN_INFOLDER = 0x1,SHGDN_INCLUDE_NONFILESYS = 0x2000,SHGDN_FORADDRESSBAR = 0x4000,SHGDN_FORPARSING = 0x8000,};
enum tagSTGTY {STGTY_STORAGE = 0x1,STGTY_STREAM = 0x2,STGTY_LOCKBYTES = 0x3,STGTY_PROPERTY = 0x4,};
enum tagTYMED {TYMED_HGLOBAL = 0x1,TYMED_FILE = 0x2,TYMED_ISTREAM = 0x4,TYMED_ISTORAGE = 0x8,TYMED_GDI = 0x10,TYMED_MFPICT = 0x20,TYMED_ENHMF = 0x40,TYMED_NULL = 0x0,};
struct test_rts {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;};
struct tp_ended {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned char type;};
typedef struct __MIDL___MIDL_itf_wtypes_0001_0001 uCLSSPEC;
typedef struct tagABSTIME ABSTIME;
typedef struct _actions ACTIONS;
typedef struct _tagADDRESS ADDRESS;
typedef struct _ADRLIST ADRLIST;
typedef struct _ADRPARM ADRPARM;
typedef struct _AT_ENUM AT_ENUM;
typedef struct _AT_INFO AT_INFO;
struct Address;
typedef union tagBINDPTR BINDPTR;
typedef struct _CabInfo CABINFO;
typedef struct tagCACLSID CACLSID;
typedef struct tagCADWORD CADWORD;
typedef struct tagCALPSTR CALPSTR;
typedef struct tagCASCODE CASCODE;
typedef struct tagCCINFOA CCINFOA;
typedef struct tagCCINFOW CCINFOW;
typedef signed int CM_FILL;
typedef struct _tagCOMPPOS COMPPOS;
typedef struct _COMSTAT COMSTAT;
typedef struct confirm CONFIRM;
typedef struct _CONTEXT CONTEXT;
typedef struct tagCPLINFO CPLINFO;
typedef struct cs_info CS_INFO;
struct Catalog;
struct Cellset;
struct ClusObj {struct ClusObjVtbl *lpVtbl;};
typedef struct ADOCommand Command;
struct CubeDef {struct CubeDefVtbl *lpVtbl;};
typedef struct _D3DLINE D3DLINE;
typedef struct _D3DRECT D3DRECT;
typedef struct _D3DSPAN D3DSPAN;
typedef struct dbmoney DBMONEY;
typedef struct _DDBLTFX DDBLTFX;
typedef struct _30CDF2DE7DC7B55457111E3E79D8AE18 DDEDATA;
typedef struct _A2F74AF90EE3AACE3322F4FF0CBF4977 DDEPOKE;
typedef struct _DDSCAPS DDSCAPS;
typedef struct tagDEC DECIMAL;
typedef struct display DISPLAY;
typedef struct dn_naddr DNNADDR;
typedef struct _DSBCAPS DSBCAPS;
typedef struct _DSCCAPS DSCCAPS;
typedef struct _DSSSEED DSSSEED;
typedef struct _DTBLLBX DTBLLBX;
typedef struct tagDVD_ATR DVD_ATR;
typedef unsigned int DWORD32;
typedef unsigned long long DWORD64;
typedef struct tagEMRTEXT EMRTEXT;
typedef struct _7684FB82DC2359E8867448D749E28870 ENTRYID;
typedef void ExecEnv;
typedef int ( *FARPROC)();
struct Field15 {struct Field15Vtbl *lpVtbl;};
typedef struct _E5266EB545CAD3D38D115197841707E4 GCFrame;
typedef struct _GENERIC GENERIC;
typedef float GLfloat;
typedef short GLshort;
typedef int GLsizei;
typedef unsigned char GLubyte;
typedef struct HACMOBJ__ *HACMOBJ;
typedef struct HBITMAP__ *HBITMAP;
struct HCALL__ {int unused;};
typedef struct _HCHANGE *HCHANGE;
struct HCONV__ {int unused;};
struct HDESK__ {int unused;};
typedef struct _HD_ITEMA HDITEMA;
typedef struct _HD_ITEMW HDITEMW;
struct HDROP__ {int unused;};
struct HDRVR__ {int unused;};
struct HFONT__ {int unused;};
typedef void *HGDIOBJ;
struct HGLRC__ {int unused;};
struct HHOOK__ {int unused;};
struct HICON__ {int unused;};
struct HIMCC__ {int unused;};
typedef struct HINKSET__ *HINKSET;
struct HLINE__ {int unused;};
struct HMENU__ {int unused;};
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDI__ {int unused;};
struct HMMIO__ {int unused;};
typedef struct hostent HOSTENT;
typedef PACKET_BUFFER *HPACKET;
struct HRSRC__ {int unused;};
typedef struct tagHSZPAIR HSZPAIR;
typedef struct Classjava_lang_String HString;
struct HTASK__ {int unused;};
struct HTMLImg;
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVE__ {int unused;};
typedef struct HWINSTA__ *HWINSTA;
struct IAMovie {struct IAMovieVtbl *lpVtbl;};
struct IAttach {struct IAttachVtbl *lpVtbl;};
struct IBPCVid {struct IBPCVidVtbl *lpVtbl;};
struct IDBInfo {struct IDBInfoVtbl *lpVtbl;};
struct IDCInfo {struct IDCInfoVtbl *lpVtbl;};
typedef struct _IDEREGS IDEREGS;
typedef struct tagIDLDESC IDLDESC;
struct IFilter {struct IFilterVtbl *lpVtbl;};
struct IHolder {struct IHolderVtbl *lpVtbl;};
struct IImgCtx {struct IImgCtxVtbl *lpVtbl;};
struct IMDFind {struct IMDFindVtbl *lpVtbl;};
typedef struct _tagIMEPROA IMEPROA;
typedef struct _tagIMEPROW IMEPROW;
struct IMalloc {struct IMallocVtbl *lpVtbl;};
struct IMtsGrp {struct IMtsGrpVtbl *lpVtbl;};
typedef signed short INTEGER;
typedef int INT_PTR;
typedef struct in_addr IN_ADDR;
typedef struct _tagIOSPACE IOSPACE;
struct IRowset {struct IRowsetVtbl *lpVtbl;};
enum ISOFLAG {ISOFLAG_RETAIN_COMMIT_DC = 0x1,ISOFLAG_RETAIN_COMMIT = 0x2,ISOFLAG_RETAIN_COMMIT_NO = 0x3,ISOFLAG_RETAIN_ABORT_DC = 0x4,ISOFLAG_RETAIN_ABORT = 0x8,ISOFLAG_RETAIN_ABORT_NO = 0xC,ISOFLAG_RETAIN_DONTCARE = 0x5,ISOFLAG_RETAIN_BOTH = 0xA,ISOFLAG_RETAIN_NONE = 0xF,ISOFLAG_OPTIMISTIC = 0x10,ISOFLAG_READONLY = 0x20,};
struct IServer {struct IServerVtbl *lpVtbl;};
struct IStream {struct IStreamVtbl *lpVtbl;};
struct ITMedia {struct ITMediaVtbl *lpVtbl;};
struct IUrlMon {struct IUrlMonVtbl *lpVtbl;};
typedef struct joyinfo_tag JOYINFO;
typedef struct _69DAD432D0597BAB6A67398C913F94DB KSP_PIN;
typedef double LDOUBLE;
typedef unsigned int LHANDLE;
typedef struct tagLICINFO LICINFO;
typedef struct _LLC_CCB LLC_CCB;
typedef struct tagACCEL *LPACCEL;
typedef  void *LPCVOID;
typedef struct _C149548EC2AEEA8856E6DF2E99B3AF78 *LPDBCOL;
typedef struct _DA63D2C084DFF8EF53A1633F272A983E *LPDTCTL;
typedef float *LPFLOAT;
typedef struct _F42371D36A819E0C8DFBAA8BF3769AB0 *LPGBMSG;
typedef struct tagGUIDE *LPGUIDE;
typedef IHlink *LPHLINK;
typedef struct tagINPUT *LPINPUT;
typedef struct ITnef *LPITNEF;
typedef struct _328060AA9F47934214406E09F9D6352A *LPMTSID;
typedef struct tagNMKEY *LPNMKEY;
typedef  char **LPPCSTR;
typedef struct tagPOINT *LPPOINT;
typedef IPrint *LPPRINT;
typedef struct _RECTL *LPRECTL;
typedef struct tagXFORM *LPXFORM;
typedef int LS_LONG;
typedef void LS_VOID;
typedef struct _C122A470DBEA2CDC41A37BACF6A49BCA LUADATA;
typedef struct tagLVITEMA LVITEMA;
typedef struct tagLVITEMW LVITEMW;
typedef struct _lzfuhdr LZFUHDR;
enum MACRO_C {C_SITE = 1,C_JOB = 2,C_MACHINE = 3,C_PACKAGE = 4,C_MACHINEGROUP = 5,C_SITEGROUP = 6,};
enum MACRO_E {E_DRAW = -2147221184,};
enum MACRO_F {F_ANY = 0,};
enum MACRO_I {I_INDENTCALLBACK = -1,};
enum MACRO_N {N_BTMASK = 0xF,N_TMASK = 0x30,N_TMASK1 = 0xC0,N_TMASK2 = 0xF0,N_BTSHFT = 0x4,N_TSHIFT = 0x2,};
enum MACRO_O {O_RDONLY = 0,O_WRONLY = 1,O_RDWR = 2,O_APPEND = 8,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,O_TEXT = 16384,O_BINARY = 32768,O_RAW = 32768,O_TEMPORARY = 64,O_NOINHERIT = 128,O_SEQUENTIAL = 32,O_RANDOM = 16,};
enum MACRO_P {P_WAIT = 0,P_NOWAIT = 1,};
enum MACRO_S {S_QUEUEEMPTY = 0,S_THRESHOLD = 1,S_ALLTHRESHOLD = 2,S_NORMAL = 0,S_LEGATO = 1,S_STACCATO = 2,S_PERIOD512 = 0,S_PERIOD1024 = 1,S_PERIOD2048 = 2,S_PERIODVOICE = 3,S_WHITE512 = 4,S_WHITE1024 = 5,S_WHITE2048 = 6,S_WHITEVOICE = 7,S_SERDVNA = -1,S_SEROFM = -2,S_SERMACT = -3,S_SERQFUL = -4,S_SERBDNT = -5,S_SERDLN = -6,S_SERDCC = -7,S_SERDTP = -8,S_SERDVL = -9,S_SERDMD = -10,S_SERDSH = -11,S_SERDPT = -12,S_SERDFQ = -13,S_SERDDR = -14,S_SERDSR = -15,S_SERDST = -16,};
enum MACRO_T {T_TMASK = 0x1C,T_LMASK = 0x3,T_CLASS = 0x2,T_FLOATING = 0x4,T_CHAR = 0x5,T_INTEGER = 0x8,T_BOOLEAN = 0x4,T_FLOAT = 0x6,T_DOUBLE = 0x7,T_BYTE = 0x8,T_SHORT = 0x9,T_INT = 0xA,T_LONG = 0xB,};
typedef struct _MAPIUID MAPIUID;
typedef union _MESSAGE MESSAGE;
typedef struct midihdr_tag MIDIHDR;
struct Members {struct MembersVtbl *lpVtbl;};
typedef struct tagNMMOUSE NMMOUSE;
typedef struct tagNMREBAR NMREBAR;
typedef struct tagPOINT *NPPOINT;
typedef int OAEVENT;
enum OLECMDF {OLECMDF_SUPPORTED = 0x1,OLECMDF_ENABLED = 0x2,OLECMDF_LATCHED = 0x4,OLECMDF_NINCHED = 0x8,};
typedef struct tagOLEVERB OLEVERB;
enum OSPCOMP {OSPCOMP_EQ = 0x1,OSPCOMP_DEFAULT = 0x1,OSPCOMP_LT = 0x2,OSPCOMP_LE = 0x3,OSPCOMP_GE = 0x4,OSPCOMP_GT = 0x5,OSPCOMP_NE = 0x6,};
enum OSPFIND {OSPFIND_DEFAULT = 0x0,OSPFIND_UP = 0x1,OSPFIND_CASESENSITIVE = 0x2,};
enum OSPXFER {OSPXFER_COMPLETE = 0x0,OSPXFER_ABORT = 0x1,OSPXFER_ERROR = 0x2,};
typedef struct tagPAGESET PAGESET;
typedef struct tagBITMAP *PBITMAP;
typedef struct _18FEA12C471CE0A4515515C42723EF45 PBRANGE;
typedef struct tagPCMINFO PCMINFO;
typedef struct tagPDEVENT PDEVENT;
typedef struct tag_DVINFO *PDVINFO;
typedef struct tagEMRARC *PEMRARC;
typedef struct tagEMREOF *PEMREOF;
typedef struct tagEMRARC *PEMRPIE;
typedef struct tagPENINFO PENINFO;
typedef struct fd_set *PFD_SET;
typedef IBaseFilter *PFILTER;
typedef struct _KDHELP *PKDHELP;
typedef struct _7DB559BE1DE343E17A8A94B6F2E38031 *PKSRATE;
typedef struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 *PKSTIME;
typedef struct linger *PLINGER;
typedef struct tagLOGPEN *PLOGPEN;
typedef int *PLONG32;
typedef long long *PLONG64;
typedef struct mmtime_tag *PMMTIME;
typedef struct tagPOINTFX POINTFX;
typedef struct _POINTL *PPOINTL;
typedef struct tagPOINTS *PPOINTS;
typedef struct tagPROFILE PROFILE;
typedef unsigned int *PUINT32;
typedef unsigned long long *PUINT64;
typedef struct pvalueA PVALUEA;
typedef struct pvalueW PVALUEW;
typedef void *PVOID64;
typedef struct tagQuality Quality;
typedef struct tagRECTOFS RECTOFS;
typedef double REFTIME;
typedef signed short RETCODE;
typedef struct tagRGBQUAD RGBQUAD;
typedef struct _RGNDATA RGNDATA;
typedef struct _ROWLIST ROWLIST;
typedef int RPC_INT;
struct Request;
typedef struct _SBinary SBinary;
typedef double SDOUBLE;
typedef struct servent SERVENT;
typedef struct _SLPARMS SLPARMS;
typedef char SMSBUFF[256];
typedef unsigned char SQLCHAR;
typedef unsigned char SQLDATE;
typedef float SQLREAL;
typedef unsigned char SQLTIME;
typedef struct _SRowSet SRowSet;
typedef struct tagSTATSTG STATSTG;
typedef struct _STATURL STATURL;
typedef struct tagSTRKFMT STRKFMT;
struct Session;
typedef struct _7E4D4F669364F297B2F59C7E54290CAF TBENTRY;
typedef struct tagTCITEMA TCITEMA;
typedef struct tagTCITEMW TCITEMW;
typedef struct timeval TIMEVAL;
typedef struct tpashdr TPASHDR;
typedef struct tpclhdr TPCLHDR;
typedef struct tpophdr TPOPHDR;
typedef struct tagTVITEMA TVITEMA;
typedef struct tagTVITEMW TVITEMW;
typedef struct _UDACCEL UDACCEL;
typedef unsigned int ULONG32;
typedef unsigned long long ULONG64;
typedef struct value_entA VALENTA;
typedef struct value_entW VALENTW;
typedef struct tagVARDESC VARDESC;
enum VARENUM {VT_EMPTY = 0x0,VT_NULL = 0x1,VT_I2 = 0x2,VT_I4 = 0x3,VT_R4 = 0x4,VT_R8 = 0x5,VT_CY = 0x6,VT_DATE = 0x7,VT_BSTR = 0x8,VT_DISPATCH = 0x9,VT_ERROR = 0xA,VT_BOOL = 0xB,VT_VARIANT = 0xC,VT_UNKNOWN = 0xD,VT_DECIMAL = 0xE,VT_I1 = 0x10,VT_UI1 = 0x11,VT_UI2 = 0x12,VT_UI4 = 0x13,VT_I8 = 0x14,VT_UI8 = 0x15,VT_INT = 0x16,VT_UINT = 0x17,VT_VOID = 0x18,VT_HRESULT = 0x19,VT_PTR = 0x1A,VT_SAFEARRAY = 0x1B,VT_CARRAY = 0x1C,VT_USERDEFINED = 0x1D,VT_LPSTR = 0x1E,VT_LPWSTR = 0x1F,VT_RECORD = 0x24,VT_FILETIME = 0x40,VT_BLOB = 0x41,VT_STREAM = 0x42,VT_STORAGE = 0x43,VT_STREAMED_OBJECT = 0x44,VT_STORED_OBJECT = 0x45,VT_BLOB_OBJECT = 0x46,VT_CF = 0x47,VT_CLSID = 0x48,VT_BSTR_BLOB = 0xFFF,VT_VECTOR = 0x1000,VT_ARRAY = 0x2000,VT_BYREF = 0x4000,VT_RESERVED = 0x8000,VT_ILLEGAL = 0xFFFF,VT_ILLEGALMASKED = 0xFFF,VT_TYPEMASK = 0xFFF,};
typedef struct tagVARIANT VARIANT;
typedef unsigned short VARTYPE;
typedef struct wavehdr_tag WAVEHDR;
typedef struct tagWCRANGE WCRANGE;
typedef struct _WGLSWAP WGLSWAP;
typedef struct WSAData WSADATA;
typedef struct WSPData WSPDATA;
typedef BOID XACTUOW;
struct _Cvtvec {unsigned int _Hand;unsigned int _Page;};
typedef union _57C85DECF0FD0199FAFF37B7119884AE _Dconst;
typedef signed char _TSCHAR;
typedef unsigned char _TUCHAR;
typedef char _TXCHAR;
struct _ldiv_t {int quot;int rem;};
typedef unsigned char boolean;
typedef int clock_t;
struct confirm {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char rts_rcvd;};
struct convert {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char direction;unsigned char char_set;unsigned short len;unsigned char *source;unsigned char *target;};
struct cs_info {unsigned short length;unsigned char major_ver;unsigned char minor_ver;unsigned char config_share[80];unsigned short nos;};
struct display {unsigned short opcode;unsigned char reserv2[2];unsigned short primary_rc;unsigned int secondary_rc;unsigned int init_sect_len;unsigned int buffer_len;unsigned char *buffer_ptr;unsigned int num_sections;unsigned int display_len;unsigned int area_needed;unsigned char sna_global_info;unsigned char lu62_info;unsigned char am_info;unsigned char tp_info;unsigned char sess_info;unsigned char link_info;unsigned char lu_0_3_info;unsigned char gw_info;unsigned char x25_physical_link_info;unsigned char sys_def_info;unsigned char adapter_info;unsigned char lu_def_info;unsigned char plu_def_info;unsigned char mode_def_info;unsigned char link_def_info;unsigned char ms_info;struct sna_global_info_sect *sna_global_info_ptr;struct lu62_info_sect *lu62_info_ptr;struct am_info_sect *am_info_ptr;struct tp_info_sect *tp_info_ptr;struct sess_info_sect *sess_info_ptr;struct link_info_sect *link_info_ptr;struct lu_0_3_info_sect *lu_0_3_info_ptr;struct gw_info_sect *gw_info_ptr;struct x25_physical_link_info_sect *x25_physical_link_info_ptr;struct sys_def_info_sect *sys_def_info_ptr;struct adapter_info_sect *adapter_info_ptr;struct lu_def_info_sect *lu_def_info_ptr;struct plu_def_info_sect *plu_def_info_ptr;struct mode_def_info_sect *mode_def_info_ptr;struct link_def_info_sect *link_def_info_ptr;struct ms_info_sect *ms_info_ptr;};
enum epgview {EPG_GRID_VIEW = 0x0,EPG_CATEGORY_VIEW = 0x1,EPG_DSS_VIEW = 0x2,EPG_MAX_VIEW = 0x3,};
struct hostent {char *h_name;char **h_aliases;short h_addrtype;short h_length;char **h_addr_list;};
typedef int int32_t;
typedef long long int64_t;
typedef int jmp_buf[16];
struct servent {char *s_name;char **s_aliases;short s_port;char *s_proto;};
typedef unsigned char smiBYTE;
struct svc_hdr {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;};
enum tagADVF {ADVF_NODATA = 0x1,ADVF_PRIMEFIRST = 0x2,ADVF_ONLYONCE = 0x4,ADVF_DATAONSTOP = 0x40,ADVFCACHE_NOHANDLER = 0x8,ADVFCACHE_FORCEBUILTIN = 0x10,ADVFCACHE_ONSAVE = 0x20,};
enum tagSTGC {STGC_DEFAULT = 0x0,STGC_OVERWRITE = 0x1,STGC_ONLYIFCURRENT = 0x2,STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,STGC_CONSOLIDATE = 0x8,};
struct timeval {int tv_sec;int tv_usec;};
typedef unsigned short u_short;
typedef unsigned short unicode;
/// #define wchar_t  unsigned __int16 ===DEFINED
typedef struct _action ACTION;
typedef unsigned int ALG_ID;
typedef struct _C60E957D81AACC99A9C8D1688EAC55F2 ATM_TD;
typedef struct _5738CA44FE4A305B347403BC29DEBFB1 AsnAny;
typedef struct tagBITMAP BITMAP;
typedef struct bufelt BUFELT;
typedef struct _BUFFER BUFFER;
typedef struct bufhdr BUFHDR;
typedef struct tagCABOOL CABOOL;
typedef struct tagCABSTR CABSTR;
typedef struct tagCADATE CADATE;
typedef struct tagCAUUID CAUUID;
typedef struct tagCIEXYZ CIEXYZ;
typedef struct _cpinfo CPINFO;
typedef unsigned char DBBOOL;
typedef char DBCHAR;
typedef struct tagDBCOST DBCOST;
typedef struct tagDBDATE DBDATE;
typedef float DBFLT4;
typedef double DBFLT8;
typedef struct tagDBLIKE DBLIKE;
typedef struct tagDBPROP DBPROP;
typedef struct tagDBTEXT DBTEXT;
typedef struct tagDBTIME DBTIME;
typedef struct tagDCINFO DCINFO;
typedef struct _DDCAPS DDCAPS;
typedef struct _923DA7BE11DCB482D02B0566D8DB27AB DDEACK;
typedef double DOUBLE;
typedef struct _0AEE12B045F8657F1D84907C62993E1D DPCAPS;
typedef struct _A3ABF0E8F12B01D8CF792B8266628F14 DPCHAT;
typedef struct _DEC76BDFA461320EB33154E3BA44F85F DPNAME;
typedef struct _DSCAPS DSCAPS;
typedef struct _EF67D941BFA119366B947DED69649A3B DTPAGE;
typedef struct tag_DVINFO DVINFO;
typedef struct tagEMRARC EMRARC;
typedef struct tagEMREOF EMREOF;
typedef struct tagEMRARC EMRPIE;
typedef struct _enlink ENLINK;
struct Errors {struct ErrorsVtbl *lpVtbl;};
typedef struct fd_set FD_SET;
struct Fields {struct FieldsVtbl *lpVtbl;};
struct Folder {struct FolderVtbl *lpVtbl;};
typedef signed char GLbyte;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef void GLvoid;
typedef struct HACCEL__ *HACCEL;
typedef void *HANDLE;
typedef struct HBRUSH__ *HBRUSH;
typedef unsigned int HEVENT;
typedef struct _HGROUP *HGROUP;
typedef struct _32D5F4ECB3520837EC43A0FF60CF3E0A HILITE;
struct HIMC__ {int unused;};
struct HKEY__ {int unused;};
typedef struct tagHLITEM HLITEM;
typedef struct HMIXER__ *HMIXER;
struct HPCM__ {int unused;};
struct HPEN__ {int unused;};
typedef  struct HPHONE__ *HPHONE;
struct HREC__ {int unused;};
struct HRGN__ {int unused;};
struct HSTR__ {int unused;};
struct HTRG__ {int unused;};
typedef struct HVIDEO__ *HVIDEO;
struct HWND__ {int unused;};
struct IADsOU {struct IADsOUVtbl *lpVtbl;};
struct IAgent {struct IAgentVtbl *lpVtbl;};
typedef struct _3A21E11B68C434F2F5E8C2B6B2DCB409 ICDRAW;
typedef struct _DC731844EB8703AC39E0F1B64989CDCD ICINFO;
typedef struct _478EBBB1B521D3328EC986A2D868B910 ICOPEN;
struct IHlink {struct IHlinkVtbl *lpVtbl;};
struct IPrint {struct IPrintVtbl *lpVtbl;};
struct IQuery {struct IQueryVtbl *lpVtbl;};
struct ITTAPI {struct ITTAPIVtbl *lpVtbl;};
struct ITTime {struct ITTimeVtbl *lpVtbl;};
struct IWPObj {struct IWPObjVtbl *lpVtbl;};
typedef struct _KDHELP KDHELP;
typedef struct _7DB559BE1DE343E17A8A94B6F2E38031 KSRATE;
typedef struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 KSTIME;
typedef struct linger LINGER;
typedef struct tagLOGPEN LOGPEN;
typedef int LONG32;
typedef long long LONG64;
typedef struct _BLOB *LPBLOB;
typedef IFont *LPFONT;
typedef struct _HLOG *LPHLOG;
typedef struct _LINK *LPLINK;
typedef int *LPLONG;
typedef struct _MAT2 *LPMAT2;
typedef struct _NSID *LPNSID;
typedef struct tagRECT *LPRECT;
typedef struct tagSIZE *LPSIZE;
typedef struct _SRow *LPSRow;
typedef void *LPVOID;
typedef char LS_STR;
struct LUA_RH {unsigned char eci : 1;unsigned char bci : 1;unsigned char sdi : 1;unsigned char fi : 1;unsigned char : 1;unsigned char ruc : 2;unsigned char rri : 1;unsigned char pi : 1;unsigned char qri : 1;unsigned char : 2;unsigned char ri : 1;unsigned char dr2i : 1;unsigned char : 1;unsigned char dr1i : 1;unsigned char : 1;unsigned char pdi : 1;unsigned char edi : 1;unsigned char csi : 1;unsigned char : 1;unsigned char cdi : 1;unsigned char ebi : 1;unsigned char bbi : 1;};
struct LUA_TH {unsigned char flags_efi : 1;unsigned char flags_odai : 1;unsigned char flags_mpf : 2;unsigned char flags_fid : 4;unsigned char : 8;unsigned char daf;unsigned char oaf;unsigned char snf[2];};
struct Levels {struct LevelsVtbl *lpVtbl;};
typedef struct mmtime_tag MMTIME;
struct Member {struct MemberVtbl *lpVtbl;};
struct MtsGrp;
typedef struct tagNMCHAR NMCHAR;
typedef struct _NOTIFY NOTIFY;
typedef struct tagRECT *NPRECT;
typedef struct _NT_TIB NT_TIB;
typedef int OAHWND;
typedef int OBJECT;
typedef struct _tagOLECMD OLECMD;
typedef struct tagPANOSE PANOSE;
typedef struct _COORD *PCOORD;
typedef struct tagPENTIP PENTIP;
typedef struct _trp *PGRTRP;
typedef struct tagINPUT *PINPUT;
typedef int *PINT32;
typedef long long *PINT64;
typedef struct tagPOINTF POINTF;
typedef struct _POINTL POINTL;
typedef struct tagPOINTS POINTS;
typedef struct tagPOINT *PPOINT;
typedef struct _RECTL *PRECTL;
typedef unsigned char *PTBYTE;
typedef char *PTCHAR;
typedef struct tagXFORM *PXFORM;
typedef int RPC_EC;
typedef int RPC_SC;
typedef struct tagRemSNB RemSNB;
typedef struct _SCALAR SCALAR;
typedef int SDWORD;
typedef float SFLOAT;
typedef struct srv_io SRV_IO;
typedef signed short SSHORT;
typedef struct _STRRET STRRET;
struct Server;
typedef struct tagTARGET TARGET;
typedef struct _tp_start_hdr TPSHDR;
typedef unsigned int UDWORD;
typedef unsigned int UINT32;
typedef unsigned long long UINT64;
typedef unsigned short USHORT;
typedef struct _WEEKLY WEEKLY;
typedef struct _WSABUF WSABUF;
enum XACTRM {XACTRM_OPTIMISTICLASTWINS = 0x1,XACTRM_NOREADONLYPREPARES = 0x2,};
enum XACTTC {XACTTC_SYNC_PHASEONE = 0x1,XACTTC_SYNC_PHASETWO = 0x2,XACTTC_SYNC = 0x2,XACTTC_ASYNC_PHASEONE = 0x4,XACTTC_ASYNC = 0x4,};
enum XACT_E {XACT_E_FIRST = 0x8004D000,XACT_E_LAST = 0x8004D01E,XACT_S_FIRST = 0x4D000,XACT_S_LAST = 0x4D009,XACT_E_ALREADYOTHERSINGLEPHASE = 0x8004D000,XACT_E_CANTRETAIN = 0x8004D001,XACT_E_COMMITFAILED = 0x8004D002,XACT_E_COMMITPREVENTED = 0x8004D003,XACT_E_HEURISTICABORT = 0x8004D004,XACT_E_HEURISTICCOMMIT = 0x8004D005,XACT_E_HEURISTICDAMAGE = 0x8004D006,XACT_E_HEURISTICDANGER = 0x8004D007,XACT_E_ISOLATIONLEVEL = 0x8004D008,XACT_E_NOASYNC = 0x8004D009,XACT_E_NOENLIST = 0x8004D00A,XACT_E_NOISORETAIN = 0x8004D00B,XACT_E_NORESOURCE = 0x8004D00C,XACT_E_NOTCURRENT = 0x8004D00D,XACT_E_NOTRANSACTION = 0x8004D00E,XACT_E_NOTSUPPORTED = 0x8004D00F,XACT_E_UNKNOWNRMGRID = 0x8004D010,XACT_E_WRONGSTATE = 0x8004D011,XACT_E_WRONGUOW = 0x8004D012,XACT_E_XTIONEXISTS = 0x8004D013,XACT_E_NOIMPORTOBJECT = 0x8004D014,XACT_E_INVALIDCOOKIE = 0x8004D015,XACT_E_INDOUBT = 0x8004D016,XACT_E_NOTIMEOUT = 0x8004D017,XACT_E_ALREADYINPROGRESS = 0x8004D018,XACT_E_ABORTED = 0x8004D019,XACT_E_LOGFULL = 0x8004D01A,XACT_E_TMNOTAVAILABLE = 0x8004D01B,XACT_E_CONNECTION_DOWN = 0x8004D01C,XACT_E_CONNECTION_DENIED = 0x8004D01D,XACT_E_REENLISTTIMEOUT = 0x8004D01E,XACT_S_ASYNC = 0x4D000,XACT_S_DEFECT = 0x4D001,XACT_S_READONLY = 0x4D002,XACT_S_SOMENORETAIN = 0x4D003,XACT_S_OKINFORM = 0x4D004,XACT_S_MADECHANGESCONTENT = 0x4D005,XACT_S_MADECHANGESINFORM = 0x4D006,XACT_S_ALLNORETAIN = 0x4D007,XACT_S_ABORTING = 0x4D008,XACT_S_SINGLEPHASE = 0x4D009,};
typedef struct _72295A7541EC936D47FC3642EE72298B _BCD80;
typedef struct _683A376D3D72D8A4C1C01AE0B36D8AA2 _FP128;
typedef void *_HFILE;
struct _STATS {int StatusCount;int StatusArray[11];};
typedef char _TCHAR;
typedef unsigned int _dev_t;
struct _div_t {int quot;int rem;};
typedef unsigned short _ino_t;
struct _iobuf {char *_ptr;int _cnt;char *_base;int _flag;int _file;int _charbuf;int _bufsiz;char *_tmpfname;};
typedef int _off_t;
typedef long long fpos_t;
typedef struct _ldiv_t ldiv_t;
typedef unsigned int size_t;
typedef signed int smiINT;
typedef struct _76984A67E2D58AA25A49E08E8F9C1198 smiOID;
typedef int time_t;
typedef unsigned char u_char;
typedef unsigned int u_long;
typedef struct tagACCEL ACCEL;
struct Agent;
typedef char *BSTRA;
typedef struct tagCADBL CADBL;
typedef struct tagCAFLT CAFLT;
typedef char CCHAR;
typedef union tagCOLOR COLOR;
typedef struct _COORD COORD;
typedef struct _DAILY DAILY;
typedef unsigned char DBBIT;
typedef struct _C149548EC2AEEA8856E6DF2E99B3AF78 DBCOL;
typedef int DBINT;
typedef struct _7ADE47B00230EF5EBD78FEDFCEB95499 DDELN;
typedef struct _12220BD7577024BDCE09342FCD2824E0 DDEUP;
typedef struct _DA63D2C084DFF8EF53A1633F272A983E DTCTL;
typedef unsigned int DWORD;
struct Error {struct ErrorVtbl *lpVtbl;};
typedef struct _FIXED FIXED;
typedef float FLOAT;
typedef struct flush FLUSH;
typedef struct _FRAME FRAME;
struct Field {struct FieldVtbl *lpVtbl;};
typedef struct _F42371D36A819E0C8DFBAA8BF3769AB0 GBMSG;
typedef int GLint;
typedef unsigned int GROUP;
typedef struct tagGUIDE GUIDE;
typedef  struct HCALL__ *HCALL;
typedef struct HCONV__ *HCONV;
struct HDC__ {int unused;};
typedef struct HDESK__ *HDESK;
typedef struct HDROP__ *HDROP;
typedef struct HDRVR__ *HDRVR;
typedef int HFILE;
typedef struct HFONT__ *HFONT;
typedef struct HGLRC__ *HGLRC;
typedef struct HHOOK__ *HHOOK;
typedef struct HICON__ *HICON;
struct HIC__ {int unused;};
typedef struct HIMCC__ *HIMCC;
struct HKL__ {int unused;};
typedef  struct HLINE__ *HLINE;
typedef struct HMENU__ *HMENU;
typedef struct HMIDI__ *HMIDI;
typedef struct HMMIO__ *HMMIO;
typedef struct _HNODE *HNODE;
typedef char *HPSTR;
struct HRC__ {int unused;};
typedef struct HRSRC__ *HRSRC;
typedef void *HSTMT;
struct HSZ__ {int unused;};
typedef struct HTASK__ *HTASK;
typedef struct HWAVE__ *HWAVE;
struct HWL__ {int unused;};
struct IADsO {struct IADsOVtbl *lpVtbl;};
struct IFont {struct IFontVtbl *lpVtbl;};
typedef struct tagINPUT INPUT;
typedef int INT32;
typedef long long INT64;
struct ITSdp {struct ITSdpVtbl *lpVtbl;};
struct ITask {struct ITaskVtbl *lpVtbl;};
struct ITnef {struct ITnefVtbl *lpVtbl;};
typedef struct _ABC *LPABC;
typedef struct _BTE *LPBTE;
typedef struct _DCB *LPDCB;
typedef struct _IDA *LPIDA;
typedef int *LPINT;
typedef struct IMsgStore *LPMDB;
typedef struct tagMSG *LPMSG;
typedef struct _QualityOfService *LPQOS;
typedef struct _trp *LPTRP;
struct Level {struct LevelVtbl *lpVtbl;};
typedef struct _328060AA9F47934214406E09F9D6352A MTSID;
struct Media;
typedef struct tagNMHDR NMHDR;
typedef struct tagNMKEY NMKEY;
typedef struct _ABC *NPABC;
typedef struct tagMSG *NPMSG;
enum OSPRW {OSPRW_DEFAULT = 0x1,OSPRW_READONLY = 0x0,OSPRW_READWRITE = 0x1,OSPRW_MIXED = 0x2,};
typedef struct _HLOG *PHLOG;
typedef struct _SID *PISID;
typedef struct ldap *PLDAP;
typedef struct _LUID *PLUID;
typedef struct tagPOINT POINT;
typedef struct tagRECT *PRECT;
typedef struct tagSIZE *PSIZE;
typedef unsigned int *PUINT;
typedef void *PVOID;
typedef struct _RECTL RECTL;
typedef signed char SBYTE;
typedef signed char SCHAR;
typedef short SHORT;
typedef signed int SLONG;
typedef struct _STATS STATS;
typedef short SWORD;
struct Shell;
typedef unsigned char TBYTE;
typedef char TCHAR;
typedef struct _TOKEN TOKEN;
typedef unsigned char UCHAR;
typedef struct _7545F1A067A9FBB43FDF50E78E6B08BD UDATE;
typedef unsigned int ULONG;
typedef unsigned short UWORD;
typedef struct tagXFORM XFORM;
struct _DBan {struct _DBanVtbl *lpVtbl;};
struct _DEPG {struct _DEPGVtbl *lpVtbl;};
struct _DPOP {struct _DPOPVtbl *lpVtbl;};
struct _DPSP {struct _DPSPVtbl *lpVtbl;};
typedef float _FP32;
typedef double _FP64;
typedef struct _72295A7541EC936D47FC3642EE72298B _FP80;
typedef int _TINT;
typedef union _PV __UPV;
typedef unsigned int dev_t;
typedef struct _div_t div_t;
struct flush {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;};
typedef unsigned short ino_t;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef int off_t;
typedef unsigned int u_int;
struct xid_t {int formatID;int gtrid_length;int bqual_length;char data[128];};
struct Axes {struct AxesVtbl *lpVtbl;};
struct Axis {struct AxisVtbl *lpVtbl;};
typedef struct _BLOB BLOB;
typedef int BOOL;
typedef unsigned char BYTE;
typedef struct tagCACY CACY;
typedef struct tagCAUB CAUB;
typedef struct tagCAUH CAUH;
typedef struct tagCAUI CAUI;
typedef struct tagCAUL CAUL;
typedef char CHAR;
typedef struct _IDA CIDA;
typedef struct cnos CNOS;
typedef struct tagCRGB CRGB;
struct Cell {struct CellVtbl *lpVtbl;};
typedef double DATE;
typedef struct tagDBID DBID;
typedef struct _FDDI FDDI;
typedef struct _iobuf FILE;
typedef struct _GUID GUID;
typedef void *HDBC;
typedef void *HENV;
typedef struct HIMC__ *HIMC;
typedef struct HKEY__ *HKEY;
typedef struct _HLOG HLOG;
typedef struct HPCM__ *HPCM;
typedef struct HPEN__ *HPEN;
typedef struct HREC__ *HREC;
typedef struct HRGN__ *HRGN;
typedef struct HSTR__ *HSTR;
typedef struct HTRG__ *HTRG;
typedef struct HWND__ *HWND;
struct IADs {struct IADsVtbl *lpVtbl;};
struct IEPG {struct IEPGVtbl *lpVtbl;};
struct IPin {struct IPinVtbl *lpVtbl;};
typedef struct ldap LDAP;
typedef struct _LINK LINK;
typedef struct _LIST LIST;
typedef int LONG;
typedef IBindCtx *LPBC;
typedef struct _LUID LUID;
typedef struct _MAT2 MAT2;
typedef struct _NSID NSID;
typedef struct _ABC *PABC;
struct PDPO;
typedef struct tagEMR *PEMR;
typedef int *PINT;
typedef struct tagMSG *PMSG;
typedef struct _NCB *PNCB;
typedef IPin *PPIN;
typedef int ( *PROC)();
typedef struct _trp *PTRP;
typedef struct tagRECT RECT;
typedef struct tagSIZE SIZE;
typedef struct _SRow SRow;
struct TAPI;
struct Time;
typedef unsigned int UINT;
typedef unsigned short WORD;
struct _ADO {struct _ADOVtbl *lpVtbl;};
typedef short _I16;
typedef int _I32;
typedef struct _97DDCABA8DED8140EC93664CC20AFA42 _I64;
struct _PSP;
typedef unsigned short _U16;
typedef unsigned int _U32;
typedef struct _97DDCABA8DED8140EC93664CC20AFA42 _U64;
enum _msg {MSG_ENVELOPE = 0x0,MSG_CONTENT = 0x1,MSG_LAST = 0x2,};
typedef unsigned char byte;
struct cnos {unsigned short opcode;unsigned char reserv2[2];unsigned short primary_rc;unsigned int secondary_rc;unsigned char key[8];unsigned char lu_alias[8];unsigned char plu_alias[8];unsigned char fqplu_name[17];unsigned char reserv3;unsigned char mode_name[8];unsigned int mode_name_select : 1;unsigned int set_negotiable : 1;unsigned int reserv4 : 6;unsigned int reserv5 : 8;unsigned short plu_mode_sess_lim;unsigned short min_conwinners_source;unsigned short min_conwinners_target;unsigned short auto_act;unsigned int drain_target : 1;unsigned int drain_source : 1;unsigned int responsible : 1;unsigned int reserv6 : 5;unsigned int reserv7 : 8;};
typedef struct _ABC ABC;
typedef struct _ACL ACL;
typedef struct _BTE BTE;
typedef struct tagCAH CAH;
typedef struct tagCAI CAI;
typedef struct tagCAL CAL;
typedef struct _DCB DCB;
typedef struct _dtr DTR;
typedef struct tagEMR EMR;
typedef void *FTG;
typedef void *HBC;
typedef struct HDC__ *HDC;
typedef struct HIC__ *HIC;
typedef struct HKL__ *HKL;
typedef struct HRC__ *HRC;
typedef struct HSZ__ *HSZ;
typedef struct HWL__ *HWL;
typedef int INT;
typedef struct _LLC LLC;
typedef struct tagMSG MSG;
typedef struct _NCB NCB;
typedef struct _INTERFACE_RECORD *PIR;
typedef char *PSZ;
typedef void *PTR;
typedef struct _QualityOfService QOS;
typedef int REC;
typedef struct _SID SID;
typedef struct trc TRC;
typedef struct _trp TRP;
typedef struct xid_t XID;
enum _ec {EC_SUCCESS = 0x0,EC_ERROR = 0x1,EC_LAST = 0x2,};
enum _rc {RC_SUCCESS = 0x0,RC_ERROR = 0x1,RC_PROTOCOL = 0x2,RC_SYNTAX = 0x3,RC_EOF = 0x4,RC_IMPLEMENTATION = 0x5,RC_SOFTWARE = 0x6,RC_CONFIG = 0x7,RC_MEMORY = 0x8,RC_CONTENTION = 0x9,RC_NOTFOUND = 0xA,RC_DISKSPACE = 0xB,RC_SHUTDOWN = 0xC,RC_EXPIRED = 0xD,RC_TIMEOUT = 0xE,RC_INVALID_PARAMETER = 0xF,RC_LAST = 0x10,};
typedef int CL;
typedef union tagCY CY;
typedef struct _INTERFACE_RECORD IR;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 {BYTE BirthVolumeId[16];BYTE BirthObjectId[16];BYTE DomainId[16];};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 {DWORD PointerToLinenumber;DWORD PointerToNextFunction;};
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 {WORD Linenumber;WORD Size;};
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___B77FC36072AAC97468D5DBEF9C8DEA1B {DWORD dwAddressID;DWORD dwAgentState;DWORD dwNextAgentState;};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___FEF65DEF9E8D3E402C8E4CBE8FFE0BEF {DWORD dwAddressID;DWORD dwActivityID;};
struct CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09___857958BF799C2928E4122E1E6ECCA6A2 {UCHAR PortNumber;UCHAR PathId;UCHAR TargetId;UCHAR Lun;};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578 {PVOID pvRecord;IRecordInfo *pRecInfo;};
struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B {DWORD Short;DWORD Long;};
struct _KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D___F32151EA73C45A0B912EECB7D87258C2 {ULONG NotificationType;ULONG Reserved;};
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 {WORD wProcessorArchitecture;WORD wReserved;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 {HMETAFILE hmeta;int xExt;int yExt;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 {HICON hicon;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 {HENHMETAFILE hemf;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE {BYTE BaseMid;BYTE Flags1;BYTE Flags2;BYTE BaseHi;};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB {BYTE hour;BYTE min;BYTE sec;BYTE frame;BYTE fps;BYTE dummy;BYTE pad[2];};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D {DWORD songptrpos;};
struct tpstahdr___A6D8E33AC39759CFC20E94B336D7745F___603949C2B9C451F7A302AB722CDAFB11 {CHAR XXXXX02;CHAR XXXXX03;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 {u_char s_b1;u_char s_b2;u_char s_b3;u_char s_b4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 {u_short s_w1;u_short s_w2;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___028BC7EA7492FE4A8CE916CF8CE81F9F {TPSTEHDR B0K;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___0C84567BC15175E871F7BC59643BADDE {TPSTCHDR B0I;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___4B76563A33A04C2B484E004C44890E3C {TPSTSHDR B0O;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___68B743954C8238C4EC931D8D0416CEBE {TPSTMHDR X1E;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___768A8DAD4940E326AEC35D738F467B21 {TPSTAHDR B0G;};
struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___90D28FF8396C2E5717E88A87F7FA367B {TPSTRHDR B0M;};
struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___AC659166113B5A242CBE56A6BFAA57EE {INTEGER B08;INTEGER B09;};
struct bufelt___8899DE19478DD9A30897A768D03DABCC___4EC57D389E9FF5992BC5C98350285BAE {unsigned char rhpad[8];signed int BBUFF0V;INTEGER BBUFF0W;INTEGER BBUFF0X;};
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___04482C8E927EEEC92939AAD340FA2F33 {TPFMIHDR B1K;};
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___3CBDD733A7F82DAE20B81DF65415100F {TPOPHDR B1C;};
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___88C53FC97706F7F4B3328D695F8A1E29 {TPCLHDR B1E;};
struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___F52E1212EA13844F586727D2C5AAB393 {TPASHDR B1M;};
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B {BYTE scale;BYTE sign;};
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 {ULONG Lo32;ULONG Mid32;};
union _LLC___BD8DAC351D2955BFEDB8952A36AC5422___02D548A99EB2D2C428FE49EA73D40A48 {BYTE NextRecv;BYTE Data[1];};
union _LLC___BD8DAC351D2955BFEDB8952A36AC5422___633B2AA9B79D6734E97CE0D21746D833 {BYTE Command;BYTE NextSend;};
union _7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669 {ULONG OptionsFlags;ULONG RequirementsFlags;};
struct _85601F4DDA405B3A8D51460B5AB09A10___D976F8EFFE6D1361093B26837C23B240 {USHORT usParameter0;USHORT usParameter1;};
struct _85601F4DDA405B3A8D51460B5AB09A10___E13E322415CFCBFB6D3FEC2B29CD0749 {USHORT usStationId;USHORT usParameter;};
struct _87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8 {LONGLONG SignedMinimum;LONGLONG SignedMaximum;};
struct _C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6 {LONG SignedMinimum;LONG SignedMaximum;};
struct _C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992 {ULONG UnsignedMinimum;ULONG UnsignedMaximum;};
union _INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C {DWORD dwReserved;DWORD dwExemptDelta;};
union _INTERNET_CACHE_ENTRY_INFOW___9E8845A706AB4DF9270F3009F082917C {DWORD dwReserved;DWORD dwExemptDelta;};
union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F {HANDLE hEvent;HANDLE hCompletionPort;};
union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F {HANDLE hEvent;HANDLE hCompletionPort;};
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 {LARGE_INTEGER NextVcn;LARGE_INTEGER Lcn;};
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 {DWORD Characteristics;DWORD OriginalFirstThunk;};
union _METADATA_GETALL_RECORD___74D6405487D82570D3F0F9DA713B78B0 {DWORD dwMDDataOffset;unsigned char *pbMDData;};
struct lineagentgroupentry_tag___3B15045ED2134A72ECDB79D8EFF28E30 {DWORD dwGroupID1;DWORD dwGroupID2;DWORD dwGroupID3;DWORD dwGroupID4;};
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D {PFULL_PTR_TO_REFID_ELEMENT *XlatTable;unsigned int NumberOfBuckets;unsigned int HashMask;};
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C {DWORD PhysicalAddress;DWORD VirtualSize;};
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 {WORD Ordinal;WORD Hint;};
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 {CERT_ALT_NAME_INFO FullName;};
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 {BYTE Name[18];};
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 {DWORD SymbolTableIndex;DWORD VirtualAddress;};
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED {DWORD VirtualAddress;DWORD RelocCount;};
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B {WORD Write;WORD Create;WORD SetInfo;WORD Flush;};
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 {DWORD Calls;DWORD Clusters;DWORD Hints;DWORD RunsReturned;DWORD HintsHonored;DWORD HintsClusters;DWORD Cache;DWORD CacheClusters;DWORD CacheMiss;DWORD CacheMissClusters;};
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 {WORD Write;WORD Create;WORD SetInfo;};
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
struct CLUSPROP_SYNTAX___AAE71ADAC41F2CC60275D879B9ACCE7A {WORD wFormat;WORD wType;};
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC {DWORD LowPart;DWORD HighPart;};
union _D3DCOLORVALUE___1870E08CD1297AF1183F2104CF0E68BB {D3DVALUE g;D3DVALUE dvG;};
union _D3DCOLORVALUE___5FBE30F4B5EDEA02F5A8FF631684CD5C {D3DVALUE a;D3DVALUE dvA;};
union _D3DCOLORVALUE___79F58B462609A8478E0156545A48EE38 {D3DVALUE r;D3DVALUE dvR;};
union _D3DCOLORVALUE___89D0C02BD3EDF7E42F4E64602AB90C16 {D3DVALUE b;D3DVALUE dvB;};
union _DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157 {DWORD dwRBitMask;DWORD dwYBitMask;};
union _DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013 {DWORD dwRGBBitCount;DWORD dwYUVBitCount;DWORD dwZBufferBitDepth;DWORD dwAlphaBitDepth;};
union _DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968 {DWORD dwRGBAlphaBitMask;DWORD dwYUVAlphaBitMask;DWORD dwRGBZBitMask;DWORD dwYUVZBitMask;};
union _DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4 {DWORD dwBBitMask;DWORD dwVBitMask;};
union _DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5 {DWORD dwGBitMask;DWORD dwUBitMask;};
union _DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B {DWORD dwMipMapCount;DWORD dwZBufferBitDepth;DWORD dwRefreshRate;};
union _D3DMATERIAL___0E29CCD1ABCFA56B0343B217BB93547E {D3DVALUE power;D3DVALUE dvPower;};
union _D3DMATERIAL___48A7D73869B8DD97079A7DB0052C867A {D3DCOLORVALUE specular;D3DCOLORVALUE dcvSpecular;};
union _D3DMATERIAL___4E89CE7B3871A99DAB3B73BC63770FCE {D3DCOLORVALUE emissive;D3DCOLORVALUE dcvEmissive;};
union _D3DMATERIAL___B545799AB1B094EA7448ADA6B118C0D5 {D3DCOLORVALUE ambient;D3DCOLORVALUE dcvAmbient;};
union _D3DMATERIAL___F37024B6A2A7DA8F8161E452127F778F {D3DCOLORVALUE diffuse;D3DCOLORVALUE dcvDiffuse;};
union _D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691 {D3DVALUE sx;D3DVALUE dvSX;};
union _D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703 {D3DVALUE sy;D3DVALUE dvSY;};
union _D3DTLVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111 {D3DVALUE sz;D3DVALUE dvSZ;};
union _D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3 {D3DVALUE rhw;D3DVALUE dvRHW;};
union _D3DTLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _D3DTRIANGLE___5E81141D7147E4DA50A203FBA8012470 {WORD v2;WORD wV2;};
union _D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA {WORD v3;WORD wV3;};
union _D3DTRIANGLE___C167AD525C2A16158535093655B0BE27 {WORD v1;WORD wV1;};
union _D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165 {D3DVALUE hz;D3DVALUE dvHZ;};
union _D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D {D3DVALUE hx;D3DVALUE dvHX;};
union _D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD {D3DVALUE hy;D3DVALUE dvHY;};
union _D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA {D3DVALUE y;D3DVALUE dvY;};
union _D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 {D3DVALUE z;D3DVALUE dvZ;};
union _D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 {D3DVALUE x;D3DVALUE dvX;};
union _D3DLVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _D3DVECTOR___2970DA2ECFB38188FCB670891BDDBDFA {D3DVALUE y;D3DVALUE dvY;};
union _D3DVECTOR___3781A3F6A2280FF9BE972B852E87FD21 {D3DVALUE z;D3DVALUE dvZ;};
union _D3DVECTOR___681612F8DC6DDCA79CBEF9228C3A67A0 {D3DVALUE x;D3DVALUE dvX;};
union _D3DVERTEX___2970DA2ECFB38188FCB670891BDDBDFA {D3DVALUE y;D3DVALUE dvY;};
union _D3DVERTEX___3781A3F6A2280FF9BE972B852E87FD21 {D3DVALUE z;D3DVALUE dvZ;};
union _D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A {D3DVALUE ny;D3DVALUE dvNY;};
union _D3DVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 {D3DVALUE x;D3DVALUE dvX;};
union _D3DVERTEX___7013070F7992C3CB148910863AB1E659 {D3DVALUE tv;D3DVALUE dvTV;};
union _D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631 {D3DVALUE nx;D3DVALUE dvNX;};
union _D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699 {D3DVALUE nz;D3DVALUE dvNZ;};
union _D3DVERTEX___F5EA273054A07BEACA92D8100BBF37A6 {D3DVALUE tu;D3DVALUE dvTU;};
union _ETHERNET___FBF8A93E0AC2563FB57148D5C1660BB7 {WORD Length;WORD Type;};
union _D3DLINE___5E81141D7147E4DA50A203FBA8012470 {WORD v2;WORD wV2;};
union _D3DLINE___C167AD525C2A16158535093655B0BE27 {WORD v1;WORD wV1;};
union _D3DRECT___5C92D98B6486E2D73C75D371A41BD7BA {LONG x2;LONG lX2;};
union _D3DRECT___5FA8995385DC59DE62F772EF39CB3CD0 {LONG y1;LONG lY1;};
union _D3DRECT___A06CC334F0A72C7C08028D8694B5ECC1 {LONG y2;LONG lY2;};
union _D3DRECT___AB8E8EA9B71D458E94A6241D094F864D {LONG x1;LONG lX1;};
struct _avifieldindex_chunk___avifieldindex_entry {DWORD dwOffset;DWORD dwSize;DWORD dwOffsetField2;};
union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D {GUID guid;GUID *pguid;};
union _userHMETAFILEPICT____MIDL_IWinTypes_0005 {int hInproc;remoteMETAFILEPICT *hRemote;int hGlobal;};
union _NSID___19E630ABC4E67F8A7A8368ED53A9D1DA {ADDRALIAS alias;char rgchInterNet[1];};
union _userHENHMETAFILE____MIDL_IWinTypes_0006 {int hInproc;BYTE_BLOB *hRemote;int hGlobal;};
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;DWORD dwUnauthAttrIndex;};
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {DWORD EndOfJobTimeAction;};
union _GDI_NONREMOTE____MIDL_IWinTypes_0002 {int hInproc;DWORD_BLOB *hRemote;};
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {ULONGLONG BeginAddress;ULONGLONG EndAddress;ULONGLONG ExceptionHandler;ULONGLONG HandlerData;ULONGLONG PrologEndAddress;};
struct _POLICY_LOCAL_QUALITY_OF_SERVICE_INFO {ULONG QualityOfService;};
union _userHMETAFILE____MIDL_IWinTypes_0004 {int hInproc;BYTE_BLOB *hRemote;int hGlobal;};
union _userHPALETTE____MIDL_IWinTypes_0008 {int hInproc;rpcLOGPALETTE *hRemote;int hGlobal;};
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef SecPkgContext_RemoteCredentialInfo *PSecPkgContext_RemoteCredenitalInfo;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD ExceptionHandler;DWORD HandlerData;DWORD PrologEndAddress;};
struct _POLICY_LOCAL_MACHINE_PASSWORD_INFO {LARGE_INTEGER PasswordChangeInterval;};
union _userHBITMAP____MIDL_IWinTypes_0007 {int hInproc;userBITMAP *hRemote;int hGlobal;};
union _userHGLOBAL____MIDL_IWinTypes_0003 {int hInproc;FLAGGED_BYTE_BLOB *hRemote;int hGlobal;};
typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA_A;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_W PSP_INTERFACE_DEVICE_DETAIL_DATA_W;
typedef SecPkgContext_LocalCredentialInfo *PSecPkgContext_LocalCredenitalInfo;
typedef SecPkgContext_RemoteCredentialInfo SecPkgContext_RemoteCredenitalInfo;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD UnwindInfoAddress;};
struct _POLICY_LOCAL_IPSEC_REFERENCE_INFO {LSA_UNICODE_STRING ObjectPath;};
struct _POLICY_LOCAL_POLICY_LOCATION_INFO {ULONG PolicyLocation;};
struct _00C90F9554CD018C8A08AD8BDB9761D9 {ULONG ulVersion;ULONG ulFlags;};
struct _01091B9DEBEBC2354EBF1594EEF6BE89 {ULONG PossibleCount;ULONG CurrentCount;};
struct _060D6FD956D3EBF205D64C3CA4764571 {LARGE_INTEGER StartingLcn;};
struct _0704266397680A28280F4A6885C4C35C {UCHAR TypeOfNetworkId;UCHAR NetworkIdPlan;UCHAR NetworkIdLength;UCHAR NetworkId[1];};
struct _0AEE12B045F8657F1D84907C62993E1D {DWORD dwSize;DWORD dwFlags;DWORD dwMaxBufferSize;DWORD dwMaxQueueSize;DWORD dwMaxPlayers;DWORD dwHundredBaud;DWORD dwLatency;DWORD dwMaxLocalPlayers;DWORD dwHeaderLength;DWORD dwTimeout;};
struct _12065485545C98CF3EA596DDCCDF0ED5 {BOOL fLargeRoom;};
struct _12220BD7577024BDCE09342FCD2824E0 {unsigned short unused : 12;unsigned short fAck : 1;unsigned short fRelease : 1;unsigned short fReserved : 1;unsigned short fAckReq : 1;short cfFormat;BYTE rgb[1];};
struct _1A2DA8A1FB7718738B15D949BE0009F3 {UCHAR auchMulticastAddress[6];};
struct _1B524A7EE9DF0D2D7407CE43B258BBC8 {DWORD dwConnectedState;DWORD dwFlags;};
struct _204C6CB5B1CC0D35B371E5C594718A83 {LONGLONG Granularity;LONGLONG Error;};
struct _2217024DFB55A6F4C8452C0D2E818FB7 {DWORD dwResult;DWORD dwError;};
struct _27EED8F145487CB1BEE00199BFE0C5C4 {BOOL fSigned;BOOL fSuccess;};
struct _290BC7C79F72D28CCB42E0D04B0B8F8F {DWORD dwCallback;DWORD dwPosition;DWORD dwPeriod;DWORD dwUserParm;};
struct _299134A1587F81C88B1AF91D3DBFCA39 {ULONG DialogueLevel;};
struct _2FCB7B16F35A994219C907239F9496DC {BOOL fRepeatPreviousBlock;BOOL fErrorInCurrentBlock;};
struct _30CDF2DE7DC7B55457111E3E79D8AE18 {unsigned short unused : 12;unsigned short fResponse : 1;unsigned short fRelease : 1;unsigned short reserved : 1;unsigned short fAckReq : 1;short cfFormat;BYTE Value[1];};
struct _362ECF3E0DC92881BF24984B329406EC {DWORD DeviceNumber;DWORD VPI;DWORD VCI;};
struct _37E4785F055768DB96FB0F6687850E13 {int iButton;DWORD dwFlags;};
struct _3E8BFD172CC0232DA5E7071EC2A0A89F {ULONG CreateFlags;ULONG Node;};
struct _3EC5757393EE7828D79CED73ACE876F0 {unsigned int Count;RPC_IF_ID *IfId[1];};
struct _3FBC325AC5E1830BAC7DB9619C6C90C8 {INT Score;};
struct _463E06C868FD59B527DBF787F8EA20AA {ULONG UserDefined;};
struct _50092E5B8D5585E25A36D2D7AA7D11CF {LARGE_INTEGER FileReferenceNumber;};
struct _58C398469581E4FCDD5ADAF6870FB0ED {UINT ViewMode;UINT fFlags;};
struct _58E0F274DC6232A5BB94C8FA4256266B {DWORD dwCallback;DWORD dwFrames;};
struct _5C484BA576E4B3479DA7CECC9170D175 {BYTE FinderInfo[32];};
struct _5DBE423D59383EF3676E2D6AC9F8E7EA {DWORD dwMicroSecPerFrame;DWORD dwMaxBytesPerSec;DWORD dwPaddingGranularity;DWORD dwFlags;DWORD dwTotalFrames;DWORD dwInitialFrames;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwReserved[4];};
struct _61992E1E6DA7B91ECC7FA4A74B115A04 {LONGLONG Earliest;LONGLONG Latest;};
struct _6354F15A6C1C612C283F299C530B649A {CMC_uint32 length;char string[1];};
struct _6652B21352113B30C39F76850DA69899 {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwFileFormat;DWORD dwSpeed;};
struct _6D2254E53597AC8CE26BF57895A6DFF7 {BYTE bCla;BYTE bIns;BYTE bP1;BYTE bP2;BYTE bP3;};
struct _6F312F6C8B75A1ED7F97F8719E9B642A {DWORD dwCallback;DWORD dwSource;DWORD dwMethod;};
struct _70FE3ED39A29D5613E00A3E72F8FD4C3 {UCHAR QOSClassForward;UCHAR QOSClassBackward;};
struct _7684FB82DC2359E8867448D749E28870 {BYTE abFlags[4];BYTE ab[1];};
struct _7909BF26B031C365F3B32F82E7366E93 {INT LowerBound;INT UpperBound;};
struct _793203A904263AF632B64217160A3CD4 {BOOL TreeWalk;};
struct _7CD0DE64846C1F4E244BDF2230E7B4C4 {smiUINT32 hipart;smiUINT32 lopart;};
struct _7F09F6AD7173E0292471C155D2885AEF {FILETIME DateAndTime;};
struct _80E50DFA284ED4BC838B08AAD8EA99BA {LARGE_INTEGER StartingVcn;};
struct _82F8C43FDAD4693C28E55E9304381917 {UCHAR uchDlcMaxSaps;UCHAR uchDlcMaxStations;UCHAR uchDlcMaxGroupSaps;UCHAR uchDlcMaxGroupMembers;UCHAR uchT1_TickOne;UCHAR uchT2_TickOne;UCHAR uchTi_TickOne;UCHAR uchT1_TickTwo;UCHAR uchT2_TickTwo;UCHAR uchTi_TickTwo;};
struct _8B637E45ECF54E3AF9C38EA7F99EC0BD {UCHAR cLineError;UCHAR cInternalError;UCHAR cBurstError;UCHAR cAC_Error;UCHAR cAbortDelimiter;UCHAR uchReserved1;UCHAR cLostFrame;UCHAR cReceiveCongestion;UCHAR cFrameCopiedError;UCHAR cFrequencyError;UCHAR cTokenError;UCHAR uchReserved2;UCHAR uchReserved3;UCHAR uchReserved4;};
struct _8B9777916333A4B8A3A60FA8F93F002E {SCARD_IO_REQUEST ioRequest;};
struct _8C6ACB55671DB169C8FCCCD9E0DAFA1D {CHAR ObjectNameLen;CHAR ObjectName[32];CHAR TypeNameLen;CHAR TypeName[32];CHAR ZoneNameLen;CHAR ZoneName[32];};
struct _8F30CF6E010BF118E26738C5B9E0B40D {UCHAR cCRC_Error;UCHAR uchReserved1;UCHAR cAlignmentError;UCHAR uchReserved2;UCHAR cTransmitError;UCHAR uchReserved3;UCHAR cCollisionError;UCHAR cReceiveCongestion;UCHAR uchReserved[6];};
struct _90D6D0DC7478186808F66339FCD4C48E {LS_STR MessageDigest[16];};
struct _90E769FB438B6A83B49CA07EC4EB3EFA {DWORD ckid;DWORD dwFlags;DWORD dwChunkOffset;DWORD dwChunkLength;};
struct _9ADD4811563784E97592213CBF8060F3 {LONG BitStreamMode;};
struct _9CC657B7E0AE245246966219C61A944E {ULONG CreateFlags;};
struct _A2F74AF90EE3AACE3322F4FF0CBF4977 {unsigned short unused : 13;unsigned short fRelease : 1;unsigned short fReserved : 2;short cfFormat;BYTE Value[1];};
struct _A615A68A66448D8BF4E7E81F3C279570 {UCHAR Location;UCHAR Cause;UCHAR DiagnosticsLength;UCHAR Diagnostics[4];};
struct _B0BC4AADD5C9FF12157D028DEF0CCD6A {ULONG FromNode;ULONG FromNodePin;ULONG ToNode;ULONG ToNodePin;};
struct _B2D668220A1566F070E9D4CE9C5B369E {DWORD dwType;};
struct _BC7A094E99B893F962A170A802EFE988 {ULONG MembersFlags;ULONG MembersSize;ULONG MembersCount;ULONG Flags;};
struct _C0A2C8317C92AEC6C65405BB0D08D817 {INT Zone;};
struct _C122A470DBEA2CDC41A37BACF6A49BCA {WORD wVersion;char szDescription[41];};
struct _C568E0E755FFC2BCAF75367048F0EAC6 {int32_t MSReserved;unsigned int length;};
struct _CA0DACF90AABDE33CADDF7416F0C17F2 {LONGLONG TimeBase;LONGLONG Interval;};
struct _CD3C127D93F7C951E1306B8CE5D16670 {ULONG ulAdapterCheckFlag;ULONG ulNetworkStatusFlag;ULONG ulPcErrorFlag;ULONG ulSystemActionFlag;};
struct _CFDE79073F41BFFF7E06FED73F276E8B {LONG timeCount;LONG timeDraw;LONG timeDecompress;LONG timeDither;LONG timeStretch;LONG timeBlt;LONG timeSetDIBits;};
struct _D0C2582348DF16EE31650672742EA602 {ULONG Size;ULONG Count;};
struct _D611436986C6FEF0F654B123D787805F {ULONG PriorityClass;ULONG PrioritySubClass;};
struct _D692CA7460863103343173F071E8F66B {DWORD dwMajorVersion;DWORD dwMinorVersion;};
struct _DC1848BC535E57FD034836B06DEEA43E {UINT idLength;UINT *ids;};
struct _DCCCDBDB2D2AC461237A75FB18C0449E {LONGLONG Time;LONGLONG SystemTime;};
struct _E1FC672EFA0154DDDEED24E20FAA5FC7 {WORD versionNumber;WORD offset;};
struct _E3900F4E8C66B34C84E740787FDB0DE9 {INT DegreesNorth;INT MinutesNorth;INT SecondsNorth;INT DegreesEast;INT MinutesEast;INT SecondsEast;};
struct _E4F7CAB5B6B7D45C514D7552CCE8FB09 {BOOL fDownMix;BOOL fDolbySurround;};
struct _E5266EB545CAD3D38D115197841707E4 {DWORD reserved[6];};
struct _EAF9C7AE235510435B672EB36E720462 {NMHDR hdr;int iItemid;char szText[260];};
struct _EB59546A6B00F9787175E0D2790469DD {UCHAR BearerClass;UCHAR TrafficType;UCHAR TimingRequirements;UCHAR ClippingSusceptability;UCHAR UserPlaneConnectionConfig;};
struct _EC8EE2E9AF7D4EC32726A7FD632A186D {ULONG ObjectType;ULONG ObjectLength;};
struct _FDC653A8F1B81D585EA1877B866731F7 {DWORD dwCallback;DWORD dwTo;};
struct _FEF45AADF86B3C581868F0239CC1F2BD {DWORD Ttl;};
typedef PLSA_TRUST_INFORMATION *PTRUSTED_DOMAIN_INFORMATION_BASIC;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA_A;
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_W SP_INTERFACE_DEVICE_DETAIL_DATA_W;
typedef SecPkgContext_LocalCredentialInfo SecPkgContext_LocalCredenitalInfo;
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
typedef HOSTSEC_DISPATCH_VERSION_1_2 HOSTSEC_DISPATCH_CURRENT_VERSION;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *LPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *NPCREATIVEFASTSPEECH10WAVEFORMAT;
typedef enum _POLICY_DOMAIN_INFORMATION_CLASS *PPOLICY_DOMAIN_INFORMATION_CLASS;
typedef PSP_DEVICE_INTERFACE_DETAIL_DATA_A PSP_DEVICE_INTERFACE_DETAIL_DATA;
typedef PSP_INTERFACE_DEVICE_DETAIL_DATA_A PSP_INTERFACE_DEVICE_DETAIL_DATA;
typedef LSA_TRUST_INFORMATION TRUSTED_DOMAIN_INFORMATION_BASIC;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {DWORD FuncStart;unsigned int PrologLen : 8;unsigned int FuncLen : 22;unsigned int ThirtyTwoBit : 1;unsigned int ExceptionFlag : 1;};
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {DWORD UIRestrictionsClass;};
struct _avioldindex___avioldindex_entry {DWORD dwChunkId;DWORD dwFlags;DWORD dwOffset;DWORD dwSize;};
typedef enum AM_SEEKING_SeekingCapabilities AM_SEEKING_SEEKING_CAPABILITIES;
typedef ATM_ADDRESS ATM_CALLING_PARTY_SUBADDRESS_IE;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *LPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *NPCREATIVEFASTSPEECH8WAVEFORMAT;
typedef CREATIVEFASTSPEECH10WAVEFORMAT *PCREATIVEFASTSPEECH10WAVEFORMAT;
typedef enum _POLICY_DOMAIN_INFORMATION_CLASS POLICY_DOMAIN_INFORMATION_CLASS;
typedef enum _POLICY_LOCAL_INFORMATION_CLASS *PPOLICY_LOCAL_INFORMATION_CLASS;
typedef int ( *PWLX_SWITCH_DESKTOP_TO_WINLOGON)(HANDLE hWlx);
typedef SP_DEVICE_INTERFACE_DETAIL_DATA_A SP_DEVICE_INTERFACE_DETAIL_DATA;
typedef SP_INTERFACE_DEVICE_DETAIL_DATA_A SP_INTERFACE_DEVICE_DETAIL_DATA;
struct _IPX_TRAFFIC_FILTER_GLOBAL_INFO {ULONG FilterAction;};
typedef ATM_ADDRESS ATM_CALLED_PARTY_SUBADDRESS_IE;
typedef enum _DtcLu_CompareStates_Confirmation DTCLUCOMPARESTATESCONFIRMATION;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
typedef enum mimeassociationdialog_in_flags MIMEASSOCIATIONDIALOG_IN_FLAGS;
typedef NTSEC_DISPATCH_VERSION_1_2 NTSEC_DISPATCH_CURRENT_VERSION;
typedef CREATIVEFASTSPEECH8WAVEFORMAT *PCREATIVEFASTSPEECH8WAVEFORMAT;
typedef PDEV_BROADCAST_DEVICEINTERFACE_A PDEV_BROADCAST_DEVICEINTERFACE;
typedef enum _POLICY_LOCAL_INFORMATION_CLASS POLICY_LOCAL_INFORMATION_CLASS;
struct _SecPkgCred_SupportedProtocols {DWORD grbitProtocol;};
typedef enum _09BE76804438A6C75E84C7C383FD9ECA AMExtendedSeekingCapabilities;
typedef DEV_BROADCAST_DEVICEINTERFACE_A DEV_BROADCAST_DEVICEINTERFACE;
typedef  DIDEVICEOBJECTINSTANCE_DX3 *LPCDIDEVICEOBJECTINSTANCE_DX3;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef enum _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
typedef LPEXT_API_VERSION ( *PWINDBG_EXTENSION_API_VERSION)();
typedef enum urlassociationdialog_in_flags URLASSOCIATIONDIALOG_IN_FLAGS;
struct _WSH_LOOKUP_NETDEF_ON_ADAPTER {USHORT NetworkRangeLowerEnd;USHORT NetworkRangeUpperEnd;};
struct creative_fastspeechformat_tag {WAVEFORMATEX ewf;};
struct linemediacontrolcallstate_tag {DWORD dwCallStates;DWORD dwMediaControl;};
struct tMIXERCONTROLDETAILS_UNSIGNED {DWORD dwValue;};
typedef IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef DIALOGICOKIADPCMWAVEFORMAT *LPDIALOGICOKIADPCMWAVEFORMAT;
typedef LPDIDEVICEOBJECTINSTANCE_DX3A LPDIDEVICEOBJECTINSTANCE_DX3;
typedef LPDIRECTSOUNDCAPTUREBUFFER *LPLPDIRECTSOUNDCAPTUREBUFFER;
typedef LPRECOVERY_AGENT_INFORMATIONA LPRECOVERY_AGENT_INFORMATION;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef DIALOGICOKIADPCMWAVEFORMAT *NPDIALOGICOKIADPCMWAVEFORMAT;
typedef WORD *PSECURITY_DESCRIPTOR_CONTROL;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef PSP_DEVINFO_LIST_DETAIL_DATA_A PSP_DEVINFO_LIST_DETAIL_DATA;
typedef int ( *PWLX_ASSIGN_SHELL_PROTECTION)(HANDLE hWlx, HANDLE hToken, HANDLE hProcess, HANDLE hThread);
typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
struct _FILE_ALLOCATED_RANGE_BUFFER {LARGE_INTEGER FileOffset;LARGE_INTEGER Length;};
struct _IMAGE_ARCHIVE_MEMBER_HEADER {BYTE Name[16];BYTE Date[12];BYTE UserID[6];BYTE GroupID[6];BYTE Mode[8];BYTE Size[10];BYTE EndHeader[2];};
struct __MIDL_TriggerPublicRPC_0002 {RPC_BYTE rgbTzi[172];};
struct audiofile_af10waveformat_tag {WAVEFORMATEX wfx;};
struct audiofile_af36waveformat_tag {WAVEFORMATEX wfx;};
struct tMIXERCONTROLDETAILS_BOOLEAN {LONG fValue;};
typedef DPMSG_ADDPLAYERTOGROUP DPMSG_DELETEPLAYERFROMGROUP;
typedef LPINTERNET_CACHE_ENTRY_INFOA LPINTERNET_CACHE_ENTRY_INFO;
typedef MEDIASPACEADPCMWAVEFORMAT *LPMEDIASPACEADPCMWAVEFORMAT;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
typedef MPR50_ROUTING_CHARACTERISTICS MPR_ROUTING_CHARACTERISTICS;
typedef MPR50_SERVICE_CHARACTERISTICS MPR_SERVICE_CHARACTERISTICS;
typedef MEDIASPACEADPCMWAVEFORMAT *NPMEDIASPACEADPCMWAVEFORMAT;
typedef DIALOGICOKIADPCMWAVEFORMAT *PDIALOGICOKIADPCMWAVEFORMAT;
typedef ULONG *PPOLICY_AUDIT_EVENT_OPTIONS;
typedef enum _POLICY_SERVER_ENABLE_STATE *PPOLICY_SERVER_ENABLE_STATE;
typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
typedef int ( *PWLX_SWITCH_DESKTOP_TO_USER)(HANDLE hWlx);
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
typedef SP_DEVINFO_LIST_DETAIL_DATA_A SP_DEVINFO_LIST_DETAIL_DATA;
typedef DWORD VALID_UOP_SOMTHING_OR_OTHER;
struct _FILE_ZERO_DATA_INFORMATION {LARGE_INTEGER FileOffset;LARGE_INTEGER BeyondFinalZero;};
struct _FSCTL_QUERY_FAT_BPB_BUFFER {BYTE First0x24BytesOfBootSector[36];};
struct _POLICY_REPLICA_SOURCE_INFO {LSA_UNICODE_STRING ReplicaSource;LSA_UNICODE_STRING ReplicaAccountName;};
struct _SecPkgContext_PackageInfoA {PSecPkgInfoA PackageInfo;};
struct _SecPkgContext_PackageInfoW {PSecPkgInfoW PackageInfo;};
struct _SecPkgCred_CipherStrengths {DWORD dwMinimumCipherStrength;DWORD dwMaximumCipherStrength;};
struct tMIXERCONTROLDETAILS_SIGNED {LONG lValue;};
typedef enum _A505905B9019AA97D205795F9CD1DA04 AM_PROPERTY_TS_RATE_CHANGE;
typedef ATM_ADDRESS ATM_CALLED_PARTY_NUMBER_IE;
typedef DPMSG_ADDGROUPTOGROUP DPMSG_DELETEGROUPFROMGROUP;
typedef enum _DtcLu_CompareStates_Response DTCLUCOMPARESTATESRESPONSE;
typedef enum tagDVD_PREFERRED_DISPLAY_MODE DVD_PREFERRED_DISPLAY_MODE;
typedef enum _E429D5BCA10BC7F1E46CF67F9B793820 KSPROPERTY_STREAMINTERFACE;
typedef AUDIOFILE_AF10WAVEFORMAT *LPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *LPAUDIOFILE_AF36WAVEFORMAT;
typedef enum _MULTIPLE_TRUSTEE_OPERATION MULTIPLE_TRUSTEE_OPERATION;
typedef AUDIOFILE_AF10WAVEFORMAT *NPAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *NPAUDIOFILE_AF36WAVEFORMAT;
typedef enum _BF99222CF03DF5552123F5B194CFC8CC *PAM_COPY_MACROVISION_LEVEL;
typedef HTTP_FILTER_PREPROC_HEADERS *PHTTP_FILTER_SEND_RESPONSE;
typedef MEDIASPACEADPCMWAVEFORMAT *PMEDIASPACEADPCMWAVEFORMAT;
typedef ULONG POLICY_AUDIT_EVENT_OPTIONS;
typedef enum _POLICY_SERVER_ENABLE_STATE POLICY_SERVER_ENABLE_STATE;
typedef enum _TRUSTED_INFORMATION_CLASS *PTRUSTED_INFORMATION_CLASS;
typedef RECOVERY_AGENT_INFORMATIONA RECOVERY_AGENT_INFORMATION;
typedef enum _6D73FF0D610B6630DEA088FE300A9A76 SQLOLE_SRVUSERPROFILE_TYPE;
typedef enum _2D5ABFA93E7EBCA3032380217130FA91 SQLOLE_SUBSCRIBERINFO_TYPE;
struct _CERT_PRIVATE_KEY_VALIDITY {FILETIME NotBefore;FILETIME NotAfter;};
struct _IMAGE_COFF_SYMBOLS_HEADER {DWORD NumberOfSymbols;DWORD LvaToFirstSymbol;DWORD NumberOfLinenumbers;DWORD LvaToFirstLinenumber;DWORD RvaToFirstByteOfCode;DWORD RvaToLastByteOfCode;DWORD RvaToFirstByteOfData;DWORD RvaToLastByteOfData;};
struct _IMAGE_RESOURCE_DATA_ENTRY {DWORD OffsetToData;DWORD Size;DWORD CodePage;DWORD Reserved;};
struct _NTMS_MEDIATYPEINFORMATION {DWORD MediaType;DWORD NumberOfSides;DWORD ReadWriteCharacteristics;DWORD DeviceType;};
struct _POLICY_DEFAULT_QUOTA_INFO {QUOTA_LIMITS QuotaLimits;};
struct _REPARSE_POINT_INFORMATION {WORD ReparseDataLength;WORD UnparsedNameLength;};
struct _SET_PARTITION_INFORMATION {BYTE PartitionType;};
struct _STORAGE_BUS_RESET_REQUEST {BYTE PathId;};
struct _TAPE_SET_MEDIA_PARAMETERS {DWORD BlockSize;};
struct _TRUSTED_POSIX_OFFSET_INFO {ULONG Offset;};
struct _WINDOW_BUFFER_SIZE_RECORD {COORD dwSize;};
struct lineagentactivityentry_tag {DWORD dwID;DWORD dwNameSize;DWORD dwNameOffset;};
struct linecalltreatmententry_tag {DWORD dwCallTreatmentID;DWORD dwCallTreatmentNameSize;DWORD dwCallTreatmentNameOffset;};
struct yamaha_adpmcwaveformat_tag {WAVEFORMATEX wfx;};
typedef enum _BF99222CF03DF5552123F5B194CFC8CC AM_COPY_MACROVISION_LEVEL;
struct AM_DVDCOPY_SET_COPY_STATE {ULONG DVDCopyState;};
typedef DWORD D3DRMINTERPOLATIONOPTIONS;
typedef HTTP_FILTER_PREPROC_HEADERS HTTP_FILTER_SEND_RESPONSE;
typedef PSecurityFunctionTableA ( *INIT_SECURITY_INTERFACE_A)();
typedef PSecurityFunctionTableW ( *INIT_SECURITY_INTERFACE_W)();
typedef INTERNET_CACHE_ENTRY_INFOA INTERNET_CACHE_ENTRY_INFO;
typedef  DIDEVICEOBJECTINSTANCE *LPCDIDEVICEOBJECTINSTANCE;
typedef CREATIVEADPCMWAVEFORMAT *LPCREATIVEADPCMWAVEFORMAT;
typedef LPDIRECTSOUND3DLISTENER *LPLPDIRECTSOUND3DLISTENER;
typedef MCI_DGV_SETAUDIO_PARMSA *LPMCI_DGV_SETAUDIO_PARMSA;
typedef MCI_DGV_SETAUDIO_PARMSW *LPMCI_DGV_SETAUDIO_PARMSW;
typedef MCI_DGV_SETVIDEO_PARMSA *LPMCI_DGV_SETVIDEO_PARMSA;
typedef MCI_DGV_SETVIDEO_PARMSW *LPMCI_DGV_SETVIDEO_PARMSW;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
struct MS_ADDINFO_CATALOGMEMBER_ {DWORD cbStruct;struct CRYPTCATSTORE_ *pStore;struct CRYPTCATMEMBER_ *pMember;};
typedef CREATIVEADPCMWAVEFORMAT *NPCREATIVEADPCMWAVEFORMAT;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
typedef AUDIOFILE_AF10WAVEFORMAT *PAUDIOFILE_AF10WAVEFORMAT;
typedef AUDIOFILE_AF36WAVEFORMAT *PAUDIOFILE_AF36WAVEFORMAT;
typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef enum _POLICY_INFORMATION_CLASS *PPOLICY_INFORMATION_CLASS;
typedef PSP_DEVICE_INTERFACE_DATA PSP_INTERFACE_DEVICE_DATA;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg, unsigned short *ServerPrincName, unsigned int KeyVer, void **Key, RPC_STATUS *Status);
typedef enum _E370912A73A0394600136E88281E4FAF SQLOLE_DBUSERPROFILE_TYPE;
typedef enum _519AA8129C8FE434C8B6333B794FFBBA SQLOLE_XFRSCRIPTMODE_TYPE;
typedef enum _TRUSTED_INFORMATION_CLASS TRUSTED_INFORMATION_CLASS;
struct _ACL_REVISION_INFORMATION {DWORD AclRevision;};
struct _POLICY_MODIFICATION_INFO {LARGE_INTEGER ModifiedId;LARGE_INTEGER DatabaseCreationTime;};
struct _SComparePropsRestriction {ULONG relop;ULONG ulPropTag1;ULONG ulPropTag2;};
struct _SID_IDENTIFIER_AUTHORITY {BYTE Value[6];};
struct _TRUSTED_DOMAIN_NAME_INFO {LSA_UNICODE_STRING Name;};
struct lineagentactivitylist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumEntries;DWORD dwListSize;DWORD dwListOffset;};
struct linemediacontroldigit_tag {DWORD dwDigit;DWORD dwDigitModes;DWORD dwMediaControl;};
struct linemediacontrolmedia_tag {DWORD dwMediaModes;DWORD dwDuration;DWORD dwMediaControl;};
struct tagMCI_VCR_SETAUDIO_PARMS {DWORD dwCallback;DWORD dwTrack;DWORD dwTo;DWORD dwNumber;};
struct tagMCI_VCR_SETTUNER_PARMS {DWORD dwCallback;DWORD dwChannel;DWORD dwNumber;};
struct tagMCI_VCR_SETVIDEO_PARMS {DWORD dwCallback;DWORD dwTrack;DWORD dwTo;DWORD dwNumber;};
typedef enum AM_SEEKING_SeekingFlags AM_SEEKING_SEEKING_FLAGS;
typedef enum _DtcLu_LocalRecovery_Work DTCINITIATEDRECOVERYWORK;
typedef enum iurl_invokecommand_flags IURL_INVOKECOMMAND_FLAGS;
typedef enum _6DAD80B3977302E5EA3CDCFB6538A59F KSMETHOD_STREAMALLOCATOR;
typedef CONTRESVQLPCWAVEFORMAT *LPCONTRESVQLPCWAVEFORMAT;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef LPDIDEVICEOBJECTINSTANCEA LPDIDEVICEOBJECTINSTANCE;
typedef FMTOWNS_SND_WAVEFORMAT *LPFMTOWNS_SND_WAVEFORMAT;
typedef LPUNKNOWN ( *LPFNEXCHANGERULEEXTENTRY)();
typedef MCI_DGV_CAPTURE_PARMSA *LPMCI_DGV_CAPTURE_PARMSA;
typedef MCI_DGV_CAPTURE_PARMSW *LPMCI_DGV_CAPTURE_PARMSW;
typedef MCI_DGV_QUALITY_PARMSA *LPMCI_DGV_QUALITY_PARMSA;
typedef MCI_DGV_QUALITY_PARMSW *LPMCI_DGV_QUALITY_PARMSW;
typedef MCI_DGV_RESERVE_PARMSA *LPMCI_DGV_RESERVE_PARMSA;
typedef MCI_DGV_RESERVE_PARMSW *LPMCI_DGV_RESERVE_PARMSW;
typedef MCI_DGV_RESTORE_PARMSA *LPMCI_DGV_RESTORE_PARMSA;
typedef MCI_DGV_RESTORE_PARMSW *LPMCI_DGV_RESTORE_PARMSW;
typedef LPMCI_DGV_SETAUDIO_PARMSA LPMCI_DGV_SETAUDIO_PARMS;
typedef LPMCI_DGV_SETVIDEO_PARMSA LPMCI_DGV_SETVIDEO_PARMS;
typedef MCI_VCR_SETAUDIO_PARMS *LPMCI_VCR_SETAUDIO_PARMS;
typedef MCI_VCR_SETTUNER_PARMS *LPMCI_VCR_SETTUNER_PARMS;
typedef MCI_VCR_SETVIDEO_PARMS *LPMCI_VCR_SETVIDEO_PARMS;
typedef NMS_VBXADPCMWAVEFORMAT *LPNMS_VBXADPCMWAVEFORMAT;
typedef LPSERVICE_TYPE_VALUE_ABSA LPSERVICE_TYPE_VALUE_ABS;
typedef YAMAHA_ADPCMWAVEFORMAT *LPYAMAHA_ADPCMWAVEFORMAT;
typedef enum __MIDL___MIDL_itf_mtxadmin_0107_0001 MTSPackageInstallOptions;
typedef CONTRESVQLPCWAVEFORMAT *NPCONTRESVQLPCWAVEFORMAT;
typedef FMTOWNS_SND_WAVEFORMAT *NPFMTOWNS_SND_WAVEFORMAT;
typedef NMS_VBXADPCMWAVEFORMAT *NPNMS_VBXADPCMWAVEFORMAT;
typedef YAMAHA_ADPCMWAVEFORMAT *NPYAMAHA_ADPCMWAVEFORMAT;
typedef PACTRL_ACCESS_ENTRY_LISTA PACTRL_ACCESS_ENTRY_LIST;
typedef BOOL *PAM_PROPERTY_COMPOSIT_ON;
typedef CREATIVEADPCMWAVEFORMAT *PCREATIVEADPCMWAVEFORMAT;
typedef void ( *PFNGLARRAYELEMENTEXTPROC)(GLint i);
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
typedef IPX_SERVER_ENTRY *PIPX_STATIC_SERVICE_INFO;
typedef enum _POLICY_INFORMATION_CLASS POLICY_INFORMATION_CLASS;
typedef enum _POLICY_AUDIT_EVENT_TYPE *PPOLICY_AUDIT_EVENT_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SP_DEVICE_INTERFACE_DATA SP_INTERFACE_DEVICE_DATA;
typedef enum _74C8A70E38C6290854EB8681903412E2 SQLOLE_FREQRELATIVE_TYPE;
struct _DSETUP_CB_FILECOPYERROR {DWORD dwError;};
struct _EXIT_PROCESS_DEBUG_INFO {DWORD dwExitCode;};
struct _UPDATE_COMPLETE_MESSAGE {ULONG InterfaceIndex;ULONG UpdateType;ULONG UpdateStatus;};
struct csimaadpcmwaveformat_tag {WAVEFORMATEX wfx;};
struct linemediacontroltone_tag {DWORD dwAppSpecific;DWORD dwDuration;DWORD dwFrequency1;DWORD dwFrequency2;DWORD dwFrequency3;DWORD dwMediaControl;};
struct tagDVD_PLAYBACK_LOCATION {ULONG TitleNum;ULONG ChapterNum;ULONG TimeCode;};
struct tagMCI_WAVE_DELETE_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
typedef ACTRL_ACCESS_ENTRY_LISTA ACTRL_ACCESS_ENTRY_LIST;
typedef BOOL AM_PROPERTY_COMPOSIT_ON;
typedef enum _04ED89F01C0FDF2BC464E7F71D566769 AM_PROPERTY_DVDCOPYPROT;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0003 COMPLETION_STATUS_FLAGS;
typedef enum _DtcLu_CompareStates_Error DTCLUCOMPARESTATESERROR;
typedef void ( *GLUtessEdgeFlagDataProc)(GLboolean, void *);
typedef enum tagINSTALLFEATUREATTRIBUTE INSTALLFEATUREATTRIBUTE;
typedef IPX_SERVER_ENTRY IPX_STATIC_SERVICE_INFO;
typedef enum _861DD39FC4CEDEF9FD3B0ECFEB4EA61F KSEVENT_STREAMALLOCATOR;
typedef enum _0A77555B03865B677ABEDAD45C36FB86 KSPROPERTY_MEDIASEEKING;
typedef enum _32421077C2010E274338AC2C523E1512 KS_SEEKING_CAPABILITIES;
typedef  DIDEVICEINSTANCE_DX3 *LPCDIDEVICEINSTANCE_DX3;
typedef CONTRESCR10WAVEFORMAT *LPCONTRESCR10WAVEFORMAT;
typedef enum _D3DRMUSERVISUALREASON *LPD3DRMUSERVISUALREASON;
typedef LPDIRECTSOUND3DBUFFER *LPLPDIRECTSOUND3DBUFFER;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_DGV_CAPTURE_PARMSA LPMCI_DGV_CAPTURE_PARMS;
typedef MCI_DGV_MONITOR_PARMS *LPMCI_DGV_MONITOR_PARMS;
typedef LPMCI_DGV_QUALITY_PARMSA LPMCI_DGV_QUALITY_PARMS;
typedef LPMCI_DGV_RESERVE_PARMSA LPMCI_DGV_RESERVE_PARMS;
typedef LPMCI_DGV_RESTORE_PARMSA LPMCI_DGV_RESTORE_PARMS;
typedef MCI_DGV_STATUS_PARMSA *LPMCI_DGV_STATUS_PARMSA;
typedef MCI_DGV_STATUS_PARMSW *LPMCI_DGV_STATUS_PARMSW;
typedef MCI_DGV_WINDOW_PARMSA *LPMCI_DGV_WINDOW_PARMSA;
typedef MCI_DGV_WINDOW_PARMSW *LPMCI_DGV_WINDOW_PARMSW;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
typedef LPSERVICE_TYPE_INFO_ABSA LPSERVICE_TYPE_INFO_ABS;
typedef SIERRAADPCMWAVEFORMAT *LPSIERRAADPCMWAVEFORMAT;
typedef int ( *LPWSPCANCELBLOCKINGCALL)(LPINT lpErrno);
typedef enum __MIDL___MIDL_itf_mtxadmin_0107_0002 MTSPackageExportOptions;
typedef CONTRESCR10WAVEFORMAT *NPCONTRESCR10WAVEFORMAT;
typedef SIERRAADPCMWAVEFORMAT *NPSIERRAADPCMWAVEFORMAT;
typedef CONTRESVQLPCWAVEFORMAT *PCONTRESVQLPCWAVEFORMAT;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef  URLINVOKECOMMANDINFOA *PCURLINVOKECOMMANDINFOA;
typedef  URLINVOKECOMMANDINFOW *PCURLINVOKECOMMANDINFOW;
typedef FMTOWNS_SND_WAVEFORMAT *PFMTOWNS_SND_WAVEFORMAT;
typedef ULONG *PLSA_ENUMERATION_HANDLE;
typedef NMS_VBXADPCMWAVEFORMAT *PNMS_VBXADPCMWAVEFORMAT;
typedef enum _POLICY_AUDIT_EVENT_TYPE POLICY_AUDIT_EVENT_TYPE;
typedef enum _POLICY_LSA_SERVER_ROLE *PPOLICY_LSA_SERVER_ROLE;
typedef PSERVICE_TYPE_VALUE_ABSA PSERVICE_TYPE_VALUE_ABS;
typedef PSP_DRVINFO_DETAIL_DATA_A PSP_DRVINFO_DETAIL_DATA;
typedef PSP_SELECTDEVICE_PARAMS_A PSP_SELECTDEVICE_PARAMS;
typedef ULONG ( *PWINDBG_CHECK_CONTROL_C)();
typedef YAMAHA_ADPCMWAVEFORMAT *PYAMAHA_ADPCMWAVEFORMAT;
typedef enum _RAS_AUTH_ATTRIBUTE_TYPE_ RAS_AUTH_ATTRIBUTE_TYPE;
typedef enum _ROUTING_PROTOCOL_EVENTS ROUTING_PROTOCOL_EVENTS;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef enum _552B465EEBBBB55F99060CD3683EE0BB SQLOLE_CONFIGVALUE_TYPE;
typedef enum _FC200439F7F0269D790F85D85E2347C8 SQLOLE_INITIALSYNC_TYPE;
typedef enum _FAAC8C047B8D946A570AE38DE6A4C568 SQLOLE_INTSECLOGIN_TYPE;
typedef enum _5BB8D3BA9D9883BD9C02B252C232FB44 SQLOLE_REPLICATION_TYPE;
typedef enum _38A529004179A583405242EBFE3B9E0D SQLOLE_RUNPRIORITY_TYPE;
typedef void ( *SSL_FREE_CERTIFICATE_FN)(PX509Certificate pCertificate);
typedef enum _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
typedef enum __MIDL___MIDL_itf_strmif_0107_0001 VideoCopyProtectionType;
struct _CERT_REVOCATION_STATUS {DWORD cbSize;DWORD dwIndex;DWORD dwError;DWORD dwReason;};
struct _DISK_CONTROLLER_NUMBER {DWORD ControllerNumber;DWORD DiskNumber;};
struct _EXIT_THREAD_DEBUG_INFO {DWORD dwExitCode;};
struct _IMAGE_FUNCTION_ENTRY64 {ULONGLONG StartingAddress;ULONGLONG EndingAddress;ULONGLONG EndOfPrologue;};
struct _ImageArchitectureEntry {DWORD FixupInstRVA;DWORD NewInst;};
struct _MESSAGE_RESOURCE_BLOCK {DWORD LowId;DWORD HighId;DWORD OffsetToEntries;};
struct _POLICY_PD_ACCOUNT_INFO {LSA_UNICODE_STRING Name;};
struct _PROTOCOL_SPECIFIC_DATA {DWORD PSD_Data[4];};
struct _RIP_MIB_GET_INPUT_DATA {ULONG TableId;ULONG InterfaceIndex;};
struct _SAP_MIB_GET_INPUT_DATA {ULONG TableId;ULONG InterfaceIndex;};
struct linetranslateoutput_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwDialableStringSize;DWORD dwDialableStringOffset;DWORD dwDisplayableStringSize;DWORD dwDisplayableStringOffset;DWORD dwCurrentCountry;DWORD dwDestCountry;DWORD dwTranslateResults;};
struct tagINITCOMMONCONTROLSEX {DWORD dwSize;DWORD dwICC;};
struct tagMCI_GETDEVCAPS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;};
struct tagMCI_VCR_RECORD_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwAt;};
struct tagMCI_VCR_SIGNAL_PARMS {DWORD dwCallback;DWORD dwPosition;DWORD dwPeriod;DWORD dwUserParm;};
struct tagMCI_VCR_STATUS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;DWORD dwNumber;};
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef  URLINVOKECOMMANDINFOA CURLINVOKECOMMANDINFOA;
typedef  URLINVOKECOMMANDINFOW CURLINVOKECOMMANDINFOW;
typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef enum _IMAGEHLP_STATUS_REASON IMAGEHLP_STATUS_REASON;
typedef enum _6D08AF020E88675B59174822EC55B914 KSEVENT_CLOCK_POSITION;
typedef CSIMAADPCMWAVEFORMAT *LPCSIMAADPCMWAVEFORMAT;
typedef enum _D3DRMFRAMECONSTRAINT *LPD3DRMFRAMECONSTRAINT;
typedef LPDIDEVICEINSTANCE_DX3A LPDIDEVICEINSTANCE_DX3;
typedef G721_ADPCMWAVEFORMAT *LPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *LPG723_ADPCMWAVEFORMAT;
typedef LPDIRECTSOUNDCAPTURE *LPLPDIRECTSOUNDCAPTURE;
typedef MCI_DGV_DELETE_PARMS *LPMCI_DGV_DELETE_PARMS;
typedef MCI_DGV_RECORD_PARMS *LPMCI_DGV_RECORD_PARMS;
typedef MCI_DGV_SIGNAL_PARMS *LPMCI_DGV_SIGNAL_PARMS;
typedef LPMCI_DGV_STATUS_PARMSA LPMCI_DGV_STATUS_PARMS;
typedef MCI_DGV_UPDATE_PARMS *LPMCI_DGV_UPDATE_PARMS;
typedef LPMCI_DGV_WINDOW_PARMSA LPMCI_DGV_WINDOW_PARMS;
typedef MCI_VCR_ESCAPE_PARMS *LPMCI_VCR_ESCAPE_PARMS;
typedef MCI_VCR_RECORD_PARMS *LPMCI_VCR_RECORD_PARMS;
typedef MCI_VCR_SIGNAL_PARMS *LPMCI_VCR_SIGNAL_PARMS;
typedef MCI_VCR_STATUS_PARMS *LPMCI_VCR_STATUS_PARMS;
typedef MPEGLAYER3WAVEFORMAT *LPMPEGLAYER3WAVEFORMAT;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
typedef TRUESPEECHWAVEFORMAT *LPTRUESPEECHWAVEFORMAT;
typedef ULONG LSA_ENUMERATION_HANDLE;
typedef MCI_DGV_SETAUDIO_PARMSA MCI_DGV_SETAUDIO_PARMS;
typedef MCI_DGV_SETVIDEO_PARMSA MCI_DGV_SETVIDEO_PARMS;
typedef MCI_DGV_RECT_PARMS MCI_DGV_UNFREEZE_PARMS;
typedef CSIMAADPCMWAVEFORMAT *NPCSIMAADPCMWAVEFORMAT;
typedef G721_ADPCMWAVEFORMAT *NPG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *NPG723_ADPCMWAVEFORMAT;
typedef MPEGLAYER3WAVEFORMAT *NPMPEGLAYER3WAVEFORMAT;
typedef TRUESPEECHWAVEFORMAT *NPTRUESPEECHWAVEFORMAT;
typedef void (*PACKET_COMPLETION_FUNC)(struct PACKET_BUFFER *, DWORD);
typedef CONTRESCR10WAVEFORMAT *PCONTRESCR10WAVEFORMAT;
typedef DEV_BROADCAST_DEVNODE *PDEV_BROADCAST_DEVNODE;
typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef enum _POLICY_LSA_SERVER_ROLE POLICY_LSA_SERVER_ROLE;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef PSERVICE_TYPE_INFO_ABSA PSERVICE_TYPE_INFO_ABS;
typedef SIERRAADPCMWAVEFORMAT *PSIERRAADPCMWAVEFORMAT;
typedef URLINVOKECOMMANDINFOA *PURLINVOKECOMMANDINFOA;
typedef URLINVOKECOMMANDINFOW *PURLINVOKECOMMANDINFOW;
typedef enum _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
typedef SERVICE_TYPE_VALUE_ABSA SERVICE_TYPE_VALUE_ABS;
typedef SP_DRVINFO_DETAIL_DATA_A SP_DRVINFO_DETAIL_DATA;
typedef SP_SELECTDEVICE_PARAMS_A SP_SELECTDEVICE_PARAMS;
typedef enum _8AF783F14E88CD65246D8216CEBAA459 SQLOLE_COMPLETION_TYPE;
typedef enum _803011E51B5E478693461E1C7C3C8425 SQLOLE_DEPENDENCY_TYPE;
typedef enum _D80439DB4E69C19C2A267CE458236C0A SQLOLE_ENUMNOTIFY_TYPE;
typedef enum _2936DD3E54A60C83E0CA563A059B9B5A SQLOLE_PREARTICLE_TYPE;
typedef enum _F43DA53C7A5EEAF50F7640DB6027D0C0 SQLOLE_STATUSINFO_TYPE;
typedef enum _71DB154D1671C30C9D80722DE394F922 SQLOLE_VERIFYCONN_TYPE;
struct _DEV_BROADCAST_DEVNODE {DWORD dbcd_size;DWORD dbcd_devicetype;DWORD dbcd_reserved;DWORD dbcd_devnode;};
struct _DSETUP_CB_UPGRADEINFO {DWORD UpgradeFlags;};
typedef enum _0C0D8E877CDAA32B9F529E7264818D98 _FPIEEE_COMPARE_RESULT;
struct _IMAGE_BASE_RELOCATION {DWORD VirtualAddress;DWORD SizeOfBlock;};
struct _POWER_DEVICE_TIMEOUTS {DWORD ConservationIdleTime;DWORD PerformanceIdleTime;};
struct _PRINTPROCESSOR_CAPS_1 {DWORD dwLevel;DWORD dwNupOptions;DWORD dwPageOrderFlags;DWORD dwNumberOfCopies;};
struct _RIP_ROUTE_FILTER_INFO {UCHAR Network[4];UCHAR Mask[4];};
struct _STORAGE_DEVICE_NUMBER {DWORD DeviceType;DWORD DeviceNumber;DWORD PartitionNumber;};
struct _TAPE_CREATE_PARTITION {DWORD Method;DWORD Count;DWORD Size;};
struct _TRUSTED_PASSWORD_INFO {LSA_UNICODE_STRING Password;LSA_UNICODE_STRING OldPassword;};
struct _UNLOAD_DLL_DEBUG_INFO {LPVOID lpBaseOfDll;};
struct _USER_MODALS_INFO_1001 {DWORD usrmod1001_min_passwd_len;};
struct _USER_MODALS_INFO_1002 {DWORD usrmod1002_max_passwd_age;};
struct _USER_MODALS_INFO_1003 {DWORD usrmod1003_min_passwd_age;};
struct _USER_MODALS_INFO_1004 {DWORD usrmod1004_force_logoff;};
struct _USER_MODALS_INFO_1005 {DWORD usrmod1005_password_hist_len;};
struct _USER_MODALS_INFO_1006 {DWORD usrmod1006_role;};
struct _tagPROTOCOLFILTERDATA {DWORD cbSize;IInternetProtocolSink *pProtocolSink;IInternetProtocol *pProtocol;IUnknown *pUnk;DWORD dwFilterFlags;};
struct lineagentgrouplist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumEntries;DWORD dwListSize;DWORD dwListOffset;};
struct oliadpcmwaveformat_tag {WAVEFORMATEX wfx;};
struct tagCInterfaceProxyVtbl {CInterfaceProxyHeader header;void *Vtbl[];};
struct tagCStdPSFactoryBuffer { IPSFactoryBufferVtbl *lpVtbl;int RefCount; ProxyFileInfo **pProxyFileList;int Filler1;};
struct tagMCI_ANIM_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_ANIM_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef enum _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
typedef enum tagAMTunerSignalStrength AMTunerSignalStrength;
typedef enum _AMVP_SELECT_FORMAT_BY AMVP_SELECT_FORMAT_BY;
typedef enum _9EF127759E207CC5B87425543DA97D1F AM_PROPERTY_DVDSUBPIC;
typedef CMC_counted_string CMC_message_reference;
typedef CMC_string CMC_object_identifier;
typedef enum tagCameraControlProperty CameraControlProperty;
typedef OBJECT Classjava_lang_Object;
typedef DWORD D3DRMANIMATIONOPTIONS;
typedef enum _D3DRMUSERVISUALREASON D3DRMUSERVISUALREASON;
typedef enum _D3DTRANSFORMSTATETYPE D3DTRANSFORMSTATETYPE;
typedef enum _EDKServiceControl_T EDK_SERVICE_CONTROL_T;
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef ProxyFileInfo ExtendedProxyFileInfo;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef enum _50D74A66A516C54C82561A091172DF5E KSPROPERTY_CONNECTION;
typedef  DIOBJECTDATAFORMAT *LPCDIOBJECTDATAFORMAT;
typedef enum _D3DRMPROJECTIONTYPE *LPD3DRMPROJECTIONTYPE;
typedef enum _D3DRMTEXTUREQUALITY *LPD3DRMTEXTUREQUALITY;
typedef DIGIADPCMWAVEFORMAT *LPDIGIADPCMWAVEFORMAT;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef HTAPIDIALOGINSTANCE *LPHTAPIDIALOGINSTANCE;
typedef LPDIRECTSOUNDBUFFER *LPLPDIRECTSOUNDBUFFER;
typedef LPDIRECTSOUNDNOTIFY *LPLPDIRECTSOUNDNOTIFY;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
typedef MCI_DGV_INFO_PARMSA *LPMCI_DGV_INFO_PARMSA;
typedef MCI_DGV_INFO_PARMSW *LPMCI_DGV_INFO_PARMSW;
typedef MCI_DGV_LIST_PARMSA *LPMCI_DGV_LIST_PARMSA;
typedef MCI_DGV_LIST_PARMSW *LPMCI_DGV_LIST_PARMSW;
typedef MCI_DGV_OPEN_PARMSA *LPMCI_DGV_OPEN_PARMSA;
typedef MCI_DGV_OPEN_PARMSW *LPMCI_DGV_OPEN_PARMSW;
typedef MCI_DGV_PASTE_PARMS *LPMCI_DGV_PASTE_PARMS;
typedef MCI_DGV_SAVE_PARMSA *LPMCI_DGV_SAVE_PARMSA;
typedef MCI_DGV_SAVE_PARMSW *LPMCI_DGV_SAVE_PARMSW;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef MCI_DGV_CAPTURE_PARMSA MCI_DGV_CAPTURE_PARMS;
typedef MCI_DGV_QUALITY_PARMSA MCI_DGV_QUALITY_PARMS;
typedef MCI_DGV_RESERVE_PARMSA MCI_DGV_RESERVE_PARMS;
typedef MCI_DGV_RESTORE_PARMSA MCI_DGV_RESTORE_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef DIGIADPCMWAVEFORMAT *NPDIGIADPCMWAVEFORMAT;
typedef VARIANT_BOOL OLE_ENABLEDEFAULTBOOL;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
typedef PACTRL_PROPERTY_ENTRYA PACTRL_PROPERTY_ENTRY;
typedef CSIMAADPCMWAVEFORMAT *PCSIMAADPCMWAVEFORMAT;
typedef DEV_BROADCAST_VOLUME *PDEV_BROADCAST_VOLUME;
typedef enum _949C6DE7E35D61EB41F69899473EA56C *PEXTENDED_NAME_FORMAT;
typedef PFILE_IN_CABINET_INFO_A PFILE_IN_CABINET_INFO;
typedef G721_ADPCMWAVEFORMAT *PG721_ADPCMWAVEFORMAT;
typedef G723_ADPCMWAVEFORMAT *PG723_ADPCMWAVEFORMAT;
typedef ULONG *PLSA_OPERATIONAL_MODE;
typedef MPEGLAYER3WAVEFORMAT *PMPEGLAYER3WAVEFORMAT;
typedef BOOL (*PNTSD_CHECK_CONTROL_C)(void);
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef DWORD *PSECURITY_INFORMATION;
typedef PSP_DEVINSTALL_PARAMS_A PSP_DEVINSTALL_PARAMS;
typedef TRUESPEECHWAVEFORMAT *PTRUESPEECHWAVEFORMAT;
typedef ULONG ( *PWINDBG_CHECK_VERSION)();
typedef void ( *PWLX_USE_CTRL_ALT_DEL)(HANDLE hWlx);
typedef enum tagPhysicalConnectorType PhysicalConnectorType;
typedef void ( *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
typedef DWORD SERVICE_STATUS_HANDLE;
typedef SERVICE_TYPE_INFO_ABSA SERVICE_TYPE_INFO_ABS;
typedef enum _E03D370E3F3619BCD661B8E2F3ACDA6B SQLOLE_CONSTANTS_TYPE;
typedef enum _F3E0A1FCB14049C2450A549C6FC2CE26 SQLOLE_FREQUENCY_TYPE;
typedef enum _AFC6697302246711AAC432C95CBEA10F SQLOLE_PRIVILEGE_TYPE;
typedef enum _F26E917C7ED159ADFEC283CA634D0FC0 SQLOLE_PROCEDURE_TYPE;
typedef enum _FFD469A34A0225161FC30EFD32614023 SQLOLE_QUERY_DATATYPE;
typedef enum _90913C78F6CA6F56CF6907A05EF6F9B8 SQLOLE_SRVOPTION_TYPE;
typedef enum _A3BE4B05CF77562F14E76615CA0A7487 SQLOLE_SUBSTATUS_TYPE;
typedef enum _A4ED03FE42A9AAABABA9C82DE4BC07BA SQLOLE_SVCSTATUS_TYPE;
typedef enum translateurl_in_flags TRANSLATEURL_IN_FLAGS;
struct _ACL_SIZE_INFORMATION {DWORD AceCount;DWORD AclBytesInUse;DWORD AclBytesFree;};
struct _CHANGER_PRODUCT_DATA {BYTE VendorId[8];BYTE ProductId[16];BYTE Revision[4];BYTE SerialNumber[32];BYTE DeviceType;};
struct _DDVIDEOPORTBANDWIDTH {DWORD dwSize;DWORD dwCaps;DWORD dwOverlay;DWORD dwColorkey;DWORD dwYInterpolate;DWORD dwYInterpAndColorkey;DWORD dwReserved1;DWORD dwReserved2;};
struct _DEV_BROADCAST_HEADER {DWORD dbcd_size;DWORD dbcd_devicetype;DWORD dbcd_reserved;};
struct _DEV_BROADCAST_PORT_A {DWORD dbcp_size;DWORD dbcp_devicetype;DWORD dbcp_reserved;char dbcp_name[1];};
typedef enum _0CDD13AED9949118DD70163834A3A235 _FPIEEE_ROUNDING_MODE;
struct _IMAGE_DATA_DIRECTORY {DWORD VirtualAddress;DWORD Size;};
struct _IMAGE_FUNCTION_ENTRY {DWORD StartingAddress;DWORD EndingAddress;DWORD EndOfPrologue;};
struct _IPX_NEXT_HOP_ADDRESS {BYTE NHA_Mac[6];};
struct _METADATA_HANDLE_INFO {DWORD dwMDPermissions;DWORD dwMDSystemChangeNumber;};
struct _NETCONNECTINFOSTRUCT {DWORD cbStructure;DWORD dwFlags;DWORD dwSpeed;DWORD dwDelay;DWORD dwOptDataSize;};
struct _RTCP_RECEIVER_REPORT {unsigned int FractionLost : 8;unsigned int TotalLostPackets : 24;DWORD HighestSequenceNum;DWORD InterarrivalJitter;DWORD LastSRTimestamp;DWORD DelaySinceLastSR;};
struct _SP_DRVINSTALL_PARAMS {DWORD cbSize;DWORD Rank;DWORD Flags;DWORD PrivateData;DWORD Reserved;};
struct _wireSAFEARR_DISPATCH {ULONG Size;IDispatch **apDispatch;};
struct digifixwaveformat_tag {WAVEFORMATEX wfx;};
struct digistdwaveformat_tag {WAVEFORMATEX wfx;};
struct echosc1waveformat_tag {WAVEFORMATEX wfx;};
struct lineaddressstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumInUse;DWORD dwNumActiveCalls;DWORD dwNumOnHoldCalls;DWORD dwNumOnHoldPendCalls;DWORD dwAddressFeatures;DWORD dwNumRingsNoAnswer;DWORD dwForwardNumEntries;DWORD dwForwardSize;DWORD dwForwardOffset;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;};
struct linelocationentry_tag {DWORD dwPermanentLocationID;DWORD dwLocationNameSize;DWORD dwLocationNameOffset;DWORD dwCountryCode;DWORD dwCityCodeSize;DWORD dwCityCodeOffset;DWORD dwPreferredCardID;DWORD dwLocalAccessCodeSize;DWORD dwLocalAccessCodeOffset;DWORD dwLongDistanceAccessCodeSize;DWORD dwLongDistanceAccessCodeOffset;DWORD dwTollPrefixListSize;DWORD dwTollPrefixListOffset;DWORD dwCountryID;DWORD dwOptions;DWORD dwCancelCallWaitingSize;DWORD dwCancelCallWaitingOffset;};
struct lineproviderentry_tag {DWORD dwPermanentProviderID;DWORD dwProviderFilenameSize;DWORD dwProviderFilenameOffset;};
struct linetranslatecaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumLocations;DWORD dwLocationListSize;DWORD dwLocationListOffset;DWORD dwCurrentLocationID;DWORD dwNumCards;DWORD dwCardListSize;DWORD dwCardListOffset;DWORD dwCurrentPreferredCardID;};
struct olicelpwaveformat_tag {WAVEFORMATEX wfx;};
struct tACMFILTERTAGDETAILSA {DWORD cbStruct;DWORD dwFilterTagIndex;DWORD dwFilterTag;DWORD cbFilterSize;DWORD fdwSupport;DWORD cStandardFilters;char szFilterTag[48];};
struct tACMFORMATTAGDETAILSA {DWORD cbStruct;DWORD dwFormatTagIndex;DWORD dwFormatTag;DWORD cbFormatSize;DWORD fdwSupport;DWORD cStandardFormats;char szFormatTag[48];};
struct tagMCI_VCR_LIST_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwNumber;};
struct tagMCI_VCR_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwAt;};
struct tagMCI_VCR_SEEK_PARMS {DWORD dwCallback;DWORD dwTo;DWORD dwMark;DWORD dwAt;};
struct tagMCI_VCR_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
struct tagOleMenuGroupWidths {LONG width[6];};
typedef ACTRL_PROPERTY_ENTRYA ACTRL_PROPERTY_ENTRY;
typedef enum _AM_ASPECT_RATIO_MODE AM_ASPECT_RATIO_MODE;
typedef enum __MIDL___MIDL_itf_strmif_0094_0001 AM_STREAM_INFO_FLAGS;
typedef enum _CLUADMEX_OBJECT_TYPE CLUADMEX_OBJECT_TYPE;
typedef enum _D3DRMFRAMECONSTRAINT D3DRMFRAMECONSTRAINT;
typedef DWORD DBCOMMANDPERSISTFLAG;
typedef enum _DtcLu_Xln_Confirmation DTCLUXLNCONFIRMATION;
typedef enum _949C6DE7E35D61EB41F69899473EA56C EXTENDED_NAME_FORMAT;
typedef FILE_IN_CABINET_INFO_A FILE_IN_CABINET_INFO;
typedef void ( *GLUtessBeginDataProc)(GLenum, void *);
typedef void ( *GLUtessErrorDataProc)(GLenum, void *);
typedef enum _ADC633718E981BBAA2F59FA41E3EE0B2 KSINTERFACE_STANDARD;
typedef  DSBPOSITIONNOTIFY *LPCDSBPOSITIONNOTIFY;
typedef  RSVP_RESERVE_INFO *LPCRSVP_RESERVE_INFO;
typedef DWORD *LPD3DRMRENDERQUALITY;
typedef DIGIREALWAVEFORMAT *LPDIGIREALWAVEFORMAT;
typedef LPDIRECTXREGISTERAPPA LPDIRECTXREGISTERAPP;
typedef DVIADPCMWAVEFORMAT *LPDVIADPCMWAVEFORMAT;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef HDRVDIALOGINSTANCE *LPHDRVDIALOGINSTANCE;
typedef IMAADPCMWAVEFORMAT *LPIMAADPCMWAVEFORMAT;
typedef MCI_DGV_COPY_PARMS *LPMCI_DGV_COPY_PARMS;
typedef LPMCI_DGV_INFO_PARMSA LPMCI_DGV_INFO_PARMS;
typedef LPMCI_DGV_LIST_PARMSA LPMCI_DGV_LIST_PARMS;
typedef LPMCI_DGV_OPEN_PARMSA LPMCI_DGV_OPEN_PARMS;
typedef MCI_DGV_RECT_PARMS *LPMCI_DGV_RECT_PARMS;
typedef LPMCI_DGV_SAVE_PARMSA LPMCI_DGV_SAVE_PARMS;
typedef MCI_DGV_STEP_PARMS *LPMCI_DGV_STEP_PARMS;
typedef MCI_VCR_LIST_PARMS *LPMCI_VCR_LIST_PARMS;
typedef MCI_VCR_PLAY_PARMS *LPMCI_VCR_PLAY_PARMS;
typedef MCI_VCR_SEEK_PARMS *LPMCI_VCR_SEEK_PARMS;
typedef MCI_VCR_STEP_PARMS *LPMCI_VCR_STEP_PARMS;
typedef NAMED_PROFILE_INFO *LPNAMED_PROFILE_INFO;
typedef OLIADPCMWAVEFORMAT *LPOLIADPCMWAVEFORMAT;
typedef ULONG LSA_OPERATIONAL_MODE;
typedef MCI_DGV_RECT_PARMS MCI_DGV_FREEZE_PARMS;
typedef MCI_GENERIC_PARMS MCI_DGV_RESUME_PARMS;
typedef MCI_DGV_STATUS_PARMSA MCI_DGV_STATUS_PARMS;
typedef MCI_DGV_WINDOW_PARMSA MCI_DGV_WINDOW_PARMS;
typedef enum _18A957B6E01C1C99DD9440B9AA09B38E MIDL_ES_HANDLE_STYLE;
typedef DIGIREALWAVEFORMAT *NPDIGIREALWAVEFORMAT;
typedef DVIADPCMWAVEFORMAT *NPDVIADPCMWAVEFORMAT;
typedef IMAADPCMWAVEFORMAT *NPIMAADPCMWAVEFORMAT;
typedef OLIADPCMWAVEFORMAT *NPOLIADPCMWAVEFORMAT;
typedef enum _E653B2203B724337CC464B3CE50B781E OLECMDID_REFRESHFLAG;
typedef DIGIADPCMWAVEFORMAT *PDIGIADPCMWAVEFORMAT;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;
typedef void ( *PFIBER_START_ROUTINE)(LPVOID lpFiberParameter);
typedef BOOL (*PFN_CPD_ADD_PRIVDATA)(struct _CRYPT_PROVIDER_DATA *pProvData, struct _CRYPT_PROVIDER_PRIVDATA *pPrivData2Add);
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
typedef IP_NETWORK *PIP_NEXT_HOP_ADDRESS;
typedef enum _99797C396B1D447BBE63E5346EF4FE3A *PKSPIN_COMMUNICATION;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef DWORD (*PNTSD_GET_EXPRESSION)(char *);
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef enum _SECURITY_LOGON_TYPE *PSECURITY_LOGON_TYPE;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef WSH_NBP_NAME *PWSH_DEREGISTER_NAME;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef DWORD SECURITY_INFORMATION;
typedef SP_DEVINSTALL_PARAMS_A SP_DEVINSTALL_PARAMS;
typedef enum _C58BD8FF5CD371D6CCE85BA5CD9B414E SQLOLE_COPYDATA_TYPE;
typedef enum _D90EEA7593E95EFD96C9D40F4B183355 SQLOLE_DATAFILE_TYPE;
typedef enum _67718A78AE86034E0FDA9E159B7F39CF SQLOLE_DBSTATUS_TYPE;
typedef enum _F9F43F4D68578F6DEA1B957C4A505B7D SQLOLE_MONTHDAY_TYPE;
typedef enum _44F87F8F2E1997D7283E1DB2EBD1089A SQLOLE_SECURITY_TYPE;
typedef enum _1CFACC66F05DAE103E3F945B1517C0DE SQLOLE_STARTSRV_TYPE;
typedef enum _CDE9529195AAB83176AF2EC10292DC84 SQLOLE_TABLEATT_TYPE;
typedef TIMESTAMP_STRUCT SQL_TIMESTAMP_STRUCT;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef enum tagVideoProcAmpProperty VideoProcAmpProperty;
struct _AM_COPY_MACROVISION {ULONG MACROVISIONLevel;};
struct _CERT_DSS_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB g;};
struct _RAS_PORT_STATISTICS {DWORD dwBytesXmited;DWORD dwBytesRcved;DWORD dwFramesXmited;DWORD dwFramesRcved;DWORD dwCrcErr;DWORD dwTimeoutErr;DWORD dwAlignmentErr;DWORD dwHardwareOverrunErr;DWORD dwFramingErr;DWORD dwBufferOverrunErr;DWORD dwBytesXmitedUncompressed;DWORD dwBytesRcvedUncompressed;DWORD dwBytesXmitedCompressed;DWORD dwBytesRcvedCompressed;DWORD dwPortBytesXmited;DWORD dwPortBytesRcved;DWORD dwPortFramesXmited;DWORD dwPortFramesRcved;DWORD dwPortCrcErr;DWORD dwPortTimeoutErr;DWORD dwPortAlignmentErr;DWORD dwPortHardwareOverrunErr;DWORD dwPortFramingErr;DWORD dwPortBufferOverrunErr;DWORD dwPortBytesXmitedUncompressed;DWORD dwPortBytesRcvedUncompressed;DWORD dwPortBytesXmitedCompressed;DWORD dwPortBytesRcvedCompressed;};
struct _REPL_EDIR_INFO_1000 {DWORD rped1000_integrity;};
struct _REPL_EDIR_INFO_1001 {DWORD rped1001_extent;};
struct _ROUTING_TABLE_INDEX {UCHAR Network[4];};
struct _RTP_ENCRYPTION_INFO {DWORD Scheme;DWORD Key[32];};
struct _SBitMaskRestriction {ULONG relBMR;ULONG ulPropTag;ULONG ulMask;};
struct _TAPE_GET_STATISTICS {DWORD Operation;};
struct _avitimedindex_entry {DWORD dwOffset;DWORD dwSize;DWORD dwDuration;};
struct _wireSAFEARR_UNKNOWN {ULONG Size;IUnknown **apUnknown;};
struct linecountryentry_tag {DWORD dwCountryID;DWORD dwCountryCode;DWORD dwNextCountryID;DWORD dwCountryNameSize;DWORD dwCountryNameOffset;DWORD dwSameAreaRuleSize;DWORD dwSameAreaRuleOffset;DWORD dwLongDistanceRuleSize;DWORD dwLongDistanceRuleOffset;DWORD dwInternationalRuleSize;DWORD dwInternationalRuleOffset;};
struct linegeneratetone_tag {DWORD dwFrequency;DWORD dwCadenceOn;DWORD dwCadenceOff;DWORD dwVolume;};
struct lineproviderlist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumProviders;DWORD dwProviderListSize;DWORD dwProviderListOffset;};
struct oligsmwaveformat_tag {WAVEFORMATEX wfx;};
struct olioprwaveformat_tag {WAVEFORMATEX wfx;};
struct olisbcwaveformat_tag {WAVEFORMATEX wfx;};
struct phoneextensionid_tag {DWORD dwExtensionID0;DWORD dwExtensionID1;DWORD dwExtensionID2;DWORD dwExtensionID3;};
struct sna_global_info_sect {unsigned char version;unsigned char release;unsigned char net_name[8];unsigned char pu_name[8];unsigned char node_id[4];type_product_set_id product_set_id;unsigned char alias_cp_name[8];unsigned char node_type;unsigned char cp_nau_addr;unsigned char corr_serv_disk;unsigned char reserved;unsigned char appc_version;unsigned char appc_release;unsigned short appc_fixlevel;};
struct tagMCI_GENERIC_PARMS {DWORD dwCallback;};
struct tagMCI_SEQ_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwTempo;DWORD dwPort;DWORD dwSlave;DWORD dwMaster;DWORD dwOffset;};
struct tagMCI_VCR_CUE_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_VCR_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwTimeMode;DWORD dwRecordFormat;DWORD dwCounterFormat;DWORD dwIndex;DWORD dwTracking;DWORD dwSpeed;DWORD dwLength;DWORD dwCounter;DWORD dwClock;DWORD dwPauseTimeout;DWORD dwPrerollDuration;DWORD dwPostrollDuration;};
struct tagMCI_VD_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_VD_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef enum __MIDL___MIDL__intf_0000_0008 ADS_SEARCHPREF_ENUM;
typedef enum _AM_DVD_STREAM_FLAGS AM_DVD_STREAM_FLAGS;
typedef enum tagAnalogVideoStandard AnalogVideoStandard;
typedef AsnOctetString AsnImplicitSequence;
typedef enum _D3DRMPROJECTIONTYPE D3DRMPROJECTIONTYPE;
typedef enum _D3DRMTEXTUREQUALITY D3DRMTEXTUREQUALITY;
typedef enum tagDBPROMPTOPTIONSENUM DBPROMPTOPTIONSENUM;
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef ULONG FORMPROPSPECIALTYPE;
typedef void ( *GLUquadricErrorProc)(GLenum);
typedef void ( *GLUtessEdgeFlagProc)(GLboolean);
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef enum tagINSTALLSOURCEACTION INSTALLSOURCEACTION;
typedef IP_NETWORK IP_NEXT_HOP_ADDRESS;
typedef enum _99797C396B1D447BBE63E5346EF4FE3A KSPIN_COMMUNICATION;
typedef enum _729DCE355D7523E6CA017E6077BAB356 KSPROPERTY_TOPOLOGY;
typedef  DIDEVICEINSTANCE *LPCDIDEVICEINSTANCE;
typedef  PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
typedef  PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
typedef  RSVP_STATUS_INFO *LPCRSVP_STATUS_INFO;
typedef  SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
typedef DWORD *LPD3DMATERIALHANDLE;
typedef enum _D3DRMMATERIALMODE *LPD3DRMMATERIALMODE;
typedef enum _D3DRMPALETTEFLAGS *LPD3DRMPALETTEFLAGS;
typedef DIGIFIXWAVEFORMAT *LPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *LPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *LPECHOSC1WAVEFORMAT;
typedef MCI_DGV_CUE_PARMS *LPMCI_DGV_CUE_PARMS;
typedef MCI_DGV_CUT_PARMS *LPMCI_DGV_CUT_PARMS;
typedef MCI_DGV_SET_PARMS *LPMCI_DGV_SET_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
typedef MCI_VCR_CUE_PARMS *LPMCI_VCR_CUE_PARMS;
typedef MCI_VCR_SET_PARMS *LPMCI_VCR_SET_PARMS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
typedef OLICELPWAVEFORMAT *LPOLICELPWAVEFORMAT;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef MCI_GENERIC_PARMS MCI_DGV_PAUSE_PARMS;
typedef MCI_DGV_RECT_PARMS MCI_DGV_WHERE_PARMS;
typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef DIGIFIXWAVEFORMAT *NPDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *NPDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *NPECHOSC1WAVEFORMAT;
typedef OLICELPWAVEFORMAT *NPOLICELPWAVEFORMAT;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef PACTRL_ACCESS_ENTRYA PACTRL_ACCESS_ENTRY;
typedef PACTRL_CONTROL_INFOA PACTRL_CONTROL_INFO;
typedef PDEV_BROADCAST_PORT_A PDEV_BROADCAST_PORT;
typedef DIGIREALWAVEFORMAT *PDIGIREALWAVEFORMAT;
typedef PDIRECTXREGISTERAPPA PDIRECTXREGISTERAPP;
typedef DVIADPCMWAVEFORMAT *PDVIADPCMWAVEFORMAT;
typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
typedef IMAADPCMWAVEFORMAT *PIMAADPCMWAVEFORMAT;
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
typedef NAMED_PROFILE_INFO *PNAMED_PROFILE_INFO;
typedef OLIADPCMWAVEFORMAT *POLIADPCMWAVEFORMAT;
typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef enum _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;
typedef enum _SECURITY_LOGON_TYPE SECURITY_LOGON_TYPE;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef enum _7FBDC45E152D142A058D5B6E187D632B SQLOLE_FREQSUB_TYPE;
typedef enum _68C893AC38C567F76FBEA67C49572CB7 SQLOLE_OBJSORT_TYPE;
typedef enum _7B52FA00EE202F4C4B756F96ECB31DD6 SQLOLE_PERFMON_TYPE;
typedef enum _360EF92493B7E421425DE3A11B88ED7C SQLOLE_REPFREQ_TYPE;
typedef enum _6DB5DE90781BF57D609B50B4D29B6B8B SQLOLE_SUBSYNC_TYPE;
typedef enum _F536DD99CDA3AEF7F8C14D1AF7912B02 SQLOLE_TRIGGER_TYPE;
typedef enum _0098F46D2464D30143688EA3FCC60E02 SQLOLE_WEEKDAY_TYPE;
typedef enum _TrkMendRestrictions TrkMendRestrictions;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef WSH_NBP_NAME WSH_DEREGISTER_NAME;
typedef void ( *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
struct _AM_DVDCOPY_CHLGKEY {BYTE ChlgKey[10];BYTE Reserved[2];};
struct _AM_DVDCOPY_DISCKEY {BYTE DiscKey[2048];};
struct _CHARDEVQ_INFO_1002 {DWORD cq1002_priority;};
struct _D3DLIGHTINGELEMENT {D3DVECTOR dvPosition;D3DVECTOR dvNormal;};
struct _FOCUS_EVENT_RECORD {BOOL bSetFocus;};
struct _MALLOC_FREE_STRUCT {void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);};
struct _PERF_COUNTER_BLOCK {DWORD ByteLength;};
struct _RTCP_SENDER_REPORT {DWORD NtpTimestampSec;DWORD NtpTimestampFrac;DWORD RtpTimestamp;DWORD TotalPackets;DWORD TotalOctets;};
struct _SERVICE_TYPE_VALUE {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;DWORD dwValueNameOffset;DWORD dwValueOffset;};
struct _USER_MODALS_INFO_0 {DWORD usrmod0_min_passwd_len;DWORD usrmod0_max_passwd_age;DWORD usrmod0_min_passwd_age;DWORD usrmod0_force_logoff;DWORD usrmod0_password_hist_len;};
struct _USER_MODALS_INFO_3 {DWORD usrmod3_lockout_duration;DWORD usrmod3_lockout_observation_window;DWORD usrmod3_lockout_threshold;};
struct _remoteMETAFILEPICT {int mm;int xExt;int yExt;userHMETAFILE *hMF;};
struct _userFLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;userSTGMEDIUM Stgmed;};
struct lineaddresscaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwLineDeviceID;DWORD dwAddressSize;DWORD dwAddressOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwAddressSharing;DWORD dwAddressStates;DWORD dwCallInfoStates;DWORD dwCallerIDFlags;DWORD dwCalledIDFlags;DWORD dwConnectedIDFlags;DWORD dwRedirectionIDFlags;DWORD dwRedirectingIDFlags;DWORD dwCallStates;DWORD dwDialToneModes;DWORD dwBusyModes;DWORD dwSpecialInfo;DWORD dwDisconnectModes;DWORD dwMaxNumActiveCalls;DWORD dwMaxNumOnHoldCalls;DWORD dwMaxNumOnHoldPendingCalls;DWORD dwMaxNumConference;DWORD dwMaxNumTransConf;DWORD dwAddrCapFlags;DWORD dwCallFeatures;DWORD dwRemoveFromConfCaps;DWORD dwRemoveFromConfState;DWORD dwTransferModes;DWORD dwParkModes;DWORD dwForwardModes;DWORD dwMaxForwardEntries;DWORD dwMaxSpecificEntries;DWORD dwMinFwdNumRings;DWORD dwMaxFwdNumRings;DWORD dwMaxCallCompletions;DWORD dwCallCompletionConds;DWORD dwCallCompletionModes;DWORD dwNumCompletionMessages;DWORD dwCompletionMsgTextEntrySize;DWORD dwCompletionMsgTextSize;DWORD dwCompletionMsgTextOffset;DWORD dwAddressFeatures;DWORD dwPredictiveAutoTransferStates;DWORD dwNumCallTreatments;DWORD dwCallTreatmentListSize;DWORD dwCallTreatmentListOffset;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;DWORD dwMaxCallDataSize;DWORD dwCallFeatures2;DWORD dwMaxNoAnswerTimeout;DWORD dwConnectedModes;DWORD dwOfferingModes;DWORD dwAvailableMediaModes;};
struct lineagentstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumEntries;DWORD dwGroupListSize;DWORD dwGroupListOffset;DWORD dwState;DWORD dwNextState;DWORD dwActivityID;DWORD dwActivitySize;DWORD dwActivityOffset;DWORD dwAgentFeatures;DWORD dwValidStates;DWORD dwValidNextStates;};
struct linecountrylist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumCountries;DWORD dwCountryListSize;DWORD dwCountryListOffset;};
struct lineextensionid_tag {DWORD dwExtensionID0;DWORD dwExtensionID1;DWORD dwExtensionID2;DWORD dwExtensionID3;};
struct linemonitortone_tag {DWORD dwAppSpecific;DWORD dwDuration;DWORD dwFrequency1;DWORD dwFrequency2;DWORD dwFrequency3;};
struct midiproptimediv_tag {DWORD cbStruct;DWORD dwTimeDiv;};
struct midistrmbuffver_tag {DWORD dwVersion;DWORD dwMid;DWORD dwOEMVersion;};
struct phonebuttoninfo_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwButtonMode;DWORD dwButtonFunction;DWORD dwButtonTextSize;DWORD dwButtonTextOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwButtonState;};
struct tagMCI_RECORD_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_STATUS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;};
struct tagMINIMIZEDMETRICS {UINT cbSize;int iWidth;int iHorzGap;int iVertGap;int iArrange;};
struct tagRemHMETAFILEPICT {int mm;int xExt;int yExt;unsigned int cbData;byte data[1];};
struct tagVS_FIXEDFILEINFO {DWORD dwSignature;DWORD dwStrucVersion;DWORD dwFileVersionMS;DWORD dwFileVersionLS;DWORD dwProductVersionMS;DWORD dwProductVersionLS;DWORD dwFileFlagsMask;DWORD dwFileFlags;DWORD dwFileOS;DWORD dwFileType;DWORD dwFileSubtype;DWORD dwFileDateMS;DWORD dwFileDateLS;};
struct tag_s_RIFFWAVE_inst {BYTE bUnshiftedNote;char chFineTune;char chGain;BYTE bLowNote;BYTE bHighNote;BYTE bLowVelocity;BYTE bHighVelocity;};
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef ACTRL_ACCESS_ENTRYA ACTRL_ACCESS_ENTRY;
typedef ACTRL_CONTROL_INFOA ACTRL_CONTROL_INFO;
typedef enum tagAMTVAudioEventType AMTVAudioEventType;
typedef enum _AM_DVD_GRAPH_FLAGS AM_DVD_GRAPH_FLAGS;
typedef LONG AM_MaxFullDataRate;
typedef enum tagCameraControlFlags CameraControlFlags;
struct ClassArrayOfDouble {int32_t MSReserved;unsigned int length;double body[1];};
typedef enum _D3DRENDERSTATETYPE D3DRENDERSTATETYPE;
typedef DWORD D3DRMRENDERQUALITY;
typedef DEV_BROADCAST_PORT_A DEV_BROADCAST_PORT;
struct DIDEVICEOBJECTDATA {DWORD dwOfs;DWORD dwData;DWORD dwTimeStamp;DWORD dwSequence;};
typedef DIRECTXREGISTERAPPA DIRECTXREGISTERAPP;
typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef enum _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
typedef enum _4359A6DF66D6C0A2E03091CE4CF62226 KSDEGRADE_STANDARD;
typedef enum _CB3435FABEA0A3C4DEC3DC8A5EBD37B4 KSEVENT_CONNECTION;
typedef enum _5E1E73E39030074B9246C87C124F2111 KSPROPERTY_QUALITY;
typedef ADPCMEWAVEFORMAT *LPADPCMEWAVEFORMAT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef enum _D3DRMCOLORSOURCE *LPD3DRMCOLORSOURCE;
typedef enum _D3DRMCOMBINETYPE *LPD3DRMCOMBINETYPE;
typedef enum _D3DRMZBUFFERMODE *LPD3DRMZBUFFERMODE;
typedef DWORD *LPD3DTEXTUREHANDLE;
typedef DAOCOLUMNBINDING *LPDAOCOLUMNBINDING;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
typedef LPDIDEVICEINSTANCEA LPDIDEVICEINSTANCE;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef DPCOMPORTADDRESS *LPDPCOMPORTADDRESS;
typedef LPGOPHER_FIND_DATAA LPGOPHER_FIND_DATA;
typedef GSM610WAVEFORMAT *LPGSM610WAVEFORMAT;
typedef void ( *LPHANDLER_FUNCTION)(DWORD dwControl);
typedef LPINTERNET_BUFFERSA LPINTERNET_BUFFERS;
typedef MAPIUNINITIALIZE *LPMAPIUNINITIALIZE;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
typedef OLIGSMWAVEFORMAT *LPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *LPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *LPOLISBCWAVEFORMAT;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
typedef PVOID LPSNMP_MGR_SESSION;
typedef SONARCWAVEFORMAT *LPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *LPVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *LPWSAESETSERVICEOP;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef MCI_DGV_INFO_PARMSA MCI_DGV_INFO_PARMS;
typedef MCI_DGV_LIST_PARMSA MCI_DGV_LIST_PARMS;
typedef MCI_DGV_OPEN_PARMSA MCI_DGV_OPEN_PARMS;
typedef MCI_PLAY_PARMS MCI_DGV_PLAY_PARMS;
typedef MCI_DGV_SAVE_PARMSA MCI_DGV_SAVE_PARMS;
typedef MCI_GENERIC_PARMS MCI_DGV_STOP_PARMS;
typedef DWORD MSBDN_SUBSYSTEM_ID;
typedef enum __MIDL___MIDL_itf_mtxadmin_0107_0003 MTSAdminErrorCodes;
typedef enum _E987151DB23D835B5546EE21DFD8C6E5 MovieWindowSetting;
typedef enum _NET_INTERFACE_TYPE NET_INTERFACE_TYPE;
typedef ADPCMEWAVEFORMAT *NPADPCMEWAVEFORMAT;
typedef GSM610WAVEFORMAT *NPGSM610WAVEFORMAT;
typedef OLIGSMWAVEFORMAT *NPOLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *NPOLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *NPOLISBCWAVEFORMAT;
typedef SONARCWAVEFORMAT *NPSONARCWAVEFORMAT;
typedef VOLUMEWAVEFILTER *NPVOLUMEWAVEFILTER;
typedef LONG OLE_XSIZE_HIMETRIC;
typedef LONG OLE_YSIZE_HIMETRIC;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef PACTRL_ACCESS_INFOA PACTRL_ACCESS_INFO;
typedef LARGE_INTEGER *PADS_LARGE_INTEGER;
typedef HANDLE *PADS_SEARCH_HANDLE;
typedef DEV_BROADCAST_HDR *PDEV_BROADCAST_HDR;
typedef DEV_BROADCAST_NET *PDEV_BROADCAST_NET;
typedef DEV_BROADCAST_OEM *PDEV_BROADCAST_OEM;
typedef DIGIFIXWAVEFORMAT *PDIGIFIXWAVEFORMAT;
typedef DIGISTDWAVEFORMAT *PDIGISTDWAVEFORMAT;
typedef ECHOSC1WAVEFORMAT *PECHOSC1WAVEFORMAT;
typedef ULONG ( *PGET_SERVICE_COUNT)();
typedef enum _C2B6FCF4766265D794587D5BC4C4F6BB *PLLC_ETHERNET_TYPE;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef OLICELPWAVEFORMAT *POLICELPWAVEFORMAT;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef enum _SecDelegationType *PSecDelegationType;
typedef enum _TASK_TRIGGER_TYPE *PTASK_TRIGGER_TYPE;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef WSH_NBP_NAME *PWSH_REGISTER_NAME;
typedef enum tagQualityMessageType QualityMessageType;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef enum _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
typedef enum _0E92F63A5A78F3D3A0BA83AEB1AA18A7 SQLOLE_DEVICE_TYPE;
typedef enum _936C2FE519B675B2E022D90168411006 SQLOLE_MIRROR_TYPE;
typedef enum _2144C7962DF9F3D2D57FF310327A22F0 SQLOLE_NOTIFY_TYPE;
typedef enum _7D6175C22EDABD4AD0E004E4A00D671E SQLOLE_OBJECT_TYPE;
typedef enum _7664F704ABC67D45E5B7F4DA451346F1 SQLOLE_SCRIPT_TYPE;
typedef enum _STORAGE_MEDIA_TYPE STORAGE_MEDIA_TYPE;
typedef enum __MIDL___MIDL_itf_strmif_0102_0002 VfwCompressDialogs;
typedef void ( *WORKERCALLBACKFUNC)(PVOID);
struct _AD_GENERAL_PARAMS {ULONG IntServAwareHopCount;ULONG PathBandwidthEstimate;ULONG MinimumLatency;ULONG PathMTU;ULONG Flags;};
struct _AM_DVDCOPY_BUSKEY {BYTE BusKey[5];BYTE Reserved[1];};
struct _AM_PROPERTY_SPPAL {AM_DVD_YUV sppal[16];};
struct _CONNECTION_INFO_0 {DWORD coni0_id;};
struct _DEV_BROADCAST_HDR {DWORD dbch_size;DWORD dbch_devicetype;DWORD dbch_reserved;};
struct _DEV_BROADCAST_NET {DWORD dbcn_size;DWORD dbcn_devicetype;DWORD dbcn_reserved;DWORD dbcn_resource;DWORD dbcn_flags;};
struct _DEV_BROADCAST_OEM {DWORD dbco_size;DWORD dbco_devicetype;DWORD dbco_reserved;DWORD dbco_identifier;DWORD dbco_suppfunc;};
struct _ERRLOG_OTHER_INFO {DWORD alrter_errcode;DWORD alrter_offset;};
struct _FLAGGED_BYTE_BLOB {unsigned int fFlags;unsigned int clSize;byte abData[1];};
struct _FLT_IF_GET_PARAMS {ULONG FilterAction;ULONG FilterSize;ULONG TotalSize;};
struct _FLT_IF_SET_PARAMS {ULONG InterfaceIndex;ULONG FilterAction;ULONG FilterSize;};
typedef enum _B5C4BFDF5647DD76A5A7DC88A24121ED _FP_OPERATION_CODE;
struct _GRADIENT_TRIANGLE {ULONG Vertex1;ULONG Vertex2;ULONG Vertex3;};
struct _MENU_EVENT_RECORD {UINT dwCommandId;};
struct _ProxyConfigParams {WORD wcThreadsMax;};
struct _SExistRestriction {ULONG ulReserved1;ULONG ulPropTag;ULONG ulReserved2;};
struct _avistdindex_entry {DWORD dwOffset;DWORD dwSize;};
struct _userHMETAFILEPICT {int fContext;union _userHMETAFILEPICT____MIDL_IWinTypes_0005 u;};
struct aptxwaveformat_tag {WAVEFORMATEX wfx;};
struct linedialparams_tag {DWORD dwDialPause;DWORD dwDialSpeed;DWORD dwDigitDuration;DWORD dwWaitForDialtone;};
struct tagKBDLLHOOKSTRUCT {DWORD vkCode;DWORD scanCode;DWORD flags;DWORD time;DWORD dwExtraInfo;};
struct tagLOCALESIGNATURE {DWORD lsUsb[4];DWORD lsCsbDefault[2];DWORD lsCsbSupported[2];};
struct tagRECONVERTSTRING {DWORD dwSize;DWORD dwVersion;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwTargetStrLen;DWORD dwTargetStrOffset;};
struct tagRemHENHMETAFILE {unsigned int cbData;byte data[1];};
struct tagTOOLDISPLAYDATA {UINT uDPI;UINT cyBar;UINT cxButton;UINT cyButton;UINT cxImage;UINT cyImage;UINT uIDImages;};
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef ACTRL_ACCESS_INFOA ACTRL_ACCESS_INFO;
typedef LARGE_INTEGER ADS_LARGE_INTEGER;
typedef HANDLE ADS_SEARCH_HANDLE;
typedef enum tagAMTunerSubChannel AMTunerSubChannel;
typedef enum __MIDL___MIDL_itf_strmif_0083_0001 AM_FILESINK_FLAGS;
typedef AsnOctetString AsnNetworkAddress;
typedef CRYPT_HASH_BLOB CRYPT_DIGEST_DATA;
struct ClassArrayOfFloat {int32_t MSReserved;unsigned int length;float body[1];};
struct ClassArrayOfShort {int32_t MSReserved;unsigned int length;short body[1];};
typedef enum _D3DLIGHTSTATETYPE D3DLIGHTSTATETYPE;
typedef DWORD D3DMATERIALHANDLE;
typedef enum _D3DRMMATERIALMODE D3DRMMATERIALMODE;
typedef enum _D3DRMPALETTEFLAGS D3DRMPALETTEFLAGS;
typedef enum _D3DTEXTUREADDRESS D3DTEXTUREADDRESS;
typedef DWORD DBCOLUMNDESCFLAGS;
typedef DWORD DBINDEX_COL_ORDER;
typedef DPMSG_GROUPADD DPMSG_GROUPDELETE;
typedef DPMSG_GENERIC DPMSG_SESSIONLOST;
typedef enum _DtcLu_CompareState DTCLUCOMPARESTATE;
typedef BYTE DVD_SubpictureATR[6];
typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef void ( *GLUnurbsErrorProc)(GLenum);
typedef enum __MIDL_IH26XVideoEffects_0001 H26X_VIDEO_EFFECT;
typedef OBJECT Hjava_lang_Object;
typedef enum iurl_seturl_flags IURL_SETURL_FLAGS;
typedef enum _BAED4F588FE0DC8D2F85793B08F7ABBB KSPROPERTY_STREAM;
typedef enum _C2B6FCF4766265D794587D5BC4C4F6BB LLC_ETHERNET_TYPE;
typedef ADPCMWAVEFORMAT *LPADPCMWAVEFORMAT;
typedef  DPSECURITYDESC *LPCDPSECURITYDESC;
typedef  DPSESSIONDESC2 *LPCDPSESSIONDESC2;
typedef  FOLDERSETTINGS *LPCFOLDERSETTINGS;
typedef  PROPSHEETPAGEA *LPCPROPSHEETPAGEA;
typedef  PROPSHEETPAGEW *LPCPROPSHEETPAGEW;
typedef  REBARBANDINFOA *LPCREBARBANDINFOA;
typedef  REBARBANDINFOW *LPCREBARBANDINFOW;
typedef DWORD *LPD3DMATRIXHANDLE;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef enum _92E343B9497C79C1DA0A7F8171886153 *LPINTERNET_SCHEME;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
typedef MPEG1WAVEFORMAT *LPMPEG1WAVEFORMAT;
typedef LPNS_SERVICE_INFOA LPNS_SERVICE_INFO;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
typedef PROCESSENTRY32W *LPPROCESSENTRY32W;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *LPWINDOWPLACEMENT;
typedef MCI_DGV_RECT_PARMS MCI_DGV_PUT_PARMS;
typedef MCI_GENERIC_PARMS MCI_REALIZE_PARMS;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef ADPCMWAVEFORMAT *NPADPCMWAVEFORMAT;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef MPEG1WAVEFORMAT *NPMPEG1WAVEFORMAT;
typedef LONG OLE_XPOS_HIMETRIC;
typedef LONG OLE_YPOS_HIMETRIC;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef ADPCMEWAVEFORMAT *PADPCMEWAVEFORMAT;
typedef enum _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;
typedef WORD *PBAD_TRACK_NUMBER;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
typedef PEXPLICIT_ACCESS_A PEXPLICIT_ACCESS_;
typedef void *(*PFN_CPD_MEM_ALLOC)(DWORD cbSize);
typedef GSM610WAVEFORMAT *PGSM610WAVEFORMAT;
typedef enum tagPictureAttributes PICTUREATTRIBUTES;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef OLIGSMWAVEFORMAT *POLIGSMWAVEFORMAT;
typedef OLIOPRWAVEFORMAT *POLIOPRWAVEFORMAT;
typedef OLISBCWAVEFORMAT *POLISBCWAVEFORMAT;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;
typedef LARGE_INTEGER *PSECURITY_INTEGER;
typedef SONARCWAVEFORMAT *PSONARCWAVEFORMAT;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef VOLUMEWAVEFILTER *PVOLUMEWAVEFILTER;
typedef enum _WSAESETSERVICEOP *PWSAESETSERVICEOP;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef enum tagSCRIPTTHREADSTATE SCRIPTTHREADSTATE;
typedef enum _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
typedef enum _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
typedef enum _180907713B49757DA176019EC73BD97C SQLOLE_AUDIT_TYPE;
typedef enum _819CCC2F5A6039AE91021E07B1C0B9A0 SQLOLE_ERROR_TYPE;
typedef enum _233AE091E6F51587616C839325431F7C SQLOLE_EVENT_TYPE;
typedef enum _95C7AEA25925C6A7B486469C0CA30401 SQLOLE_INDEX_TYPE;
typedef enum _053EB6A1E433FFB0C0E77AB4917E32C9 SQLOLE_MEDIA_TYPE;
typedef enum _tagSubcriptionState SUBSCRIPTIONSTATE;
typedef enum _SecDelegationType SecDelegationType;
typedef enum _TASK_TRIGGER_TYPE TASK_TRIGGER_TYPE;
typedef enum _810103D2840B7FD967840B86193DEF94 TVX_CONTROL_TYPES;
typedef enum __MIDL___MIDL_itf_strmif_0102_0001 VfwCaptureDialogs;
typedef enum tagVideoProcAmpFlags VideoProcAmpFlags;
typedef LPVOID WIN_TRUST_SUBJECT;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
typedef WSH_NBP_NAME WSH_REGISTER_NAME;
struct _ACCESS_INFO_1002 {DWORD acc1002_attr;};
struct _ADDRESS_RESERVED {UCHAR Reserved[28];};
struct _ADMIN_OTHER_INFO {DWORD alrtad_errcode;DWORD alrtad_numstrings;};
struct _D3DTRANSFORMCAPS {DWORD dwSize;DWORD dwCaps;};
struct _DPCOMPORTADDRESS {DWORD dwComPort;DWORD dwBaudRate;DWORD dwStopBits;DWORD dwParity;DWORD dwFlowControl;};
struct _FIND_NAME_BUFFER {UCHAR length;UCHAR access_control;UCHAR frame_control;UCHAR destination_addr[6];UCHAR source_addr[6];UCHAR routing_info[18];};
typedef enum _EBF8251B43E7412EBBCF0A9FFEA6D7A7 _FPIEEE_PRECISION;
struct _HISTOGRAM_BUCKET {DWORD Reads;DWORD Writes;};
struct _INTERFACE_RECORD {int RxFrameCount;int TxMaxFrSizeNow;int StatusCount;UCHAR V24In;UCHAR V24Out;int StatusArray[11];};
struct _IP_SPECIFIC_DATA {DWORD FSD_Type;DWORD FSD_Policy;DWORD FSD_NextHopAS;DWORD FSD_Priority;DWORD FSD_Metric;DWORD FSD_Metric1;DWORD FSD_Metric2;DWORD FSD_Metric3;DWORD FSD_Metric4;DWORD FSD_Metric5;DWORD FSD_Flags;};
struct _PRINT_OTHER_INFO {DWORD alrtpr_jobid;DWORD alrtpr_status;DWORD alrtpr_submitted;DWORD alrtpr_size;};
struct _SCARD_IO_REQUEST {DWORD dwProtocol;DWORD cbPciLength;};
typedef LARGE_INTEGER _SECURITY_INTEGER;
struct _SERVER_INFO_1010 {LONG sv1010_disc;};
struct _SERVER_INFO_1016 {BOOL sv1016_hidden;};
struct _SERVER_INFO_1017 {DWORD sv1017_announce;};
struct _SERVER_INFO_1018 {DWORD sv1018_anndelta;};
struct _SERVER_INFO_1107 {DWORD sv1107_users;};
struct _SERVER_INFO_1501 {DWORD sv1501_sessopens;};
struct _SERVER_INFO_1502 {DWORD sv1502_sessvcs;};
struct _SERVER_INFO_1503 {DWORD sv1503_opensearch;};
struct _SERVER_INFO_1506 {DWORD sv1506_maxworkitems;};
struct _SERVER_INFO_1509 {DWORD sv1509_maxrawbuflen;};
struct _SERVER_INFO_1510 {DWORD sv1510_sessusers;};
struct _SERVER_INFO_1511 {DWORD sv1511_sessconns;};
struct _SERVER_INFO_1512 {DWORD sv1512_maxnonpagedmemoryusage;};
struct _SERVER_INFO_1513 {DWORD sv1513_maxpagedmemoryusage;};
struct _SERVER_INFO_1514 {BOOL sv1514_enablesoftcompat;};
struct _SERVER_INFO_1515 {BOOL sv1515_enableforcedlogoff;};
struct _SERVER_INFO_1516 {BOOL sv1516_timesource;};
struct _SERVER_INFO_1518 {BOOL sv1518_lmannounce;};
struct _SERVER_INFO_1520 {DWORD sv1520_maxcopyreadlen;};
struct _SERVER_INFO_1521 {DWORD sv1521_maxcopywritelen;};
struct _SERVER_INFO_1522 {DWORD sv1522_minkeepsearch;};
struct _SERVER_INFO_1523 {DWORD sv1523_maxkeepsearch;};
struct _SERVER_INFO_1524 {DWORD sv1524_minkeepcomplsearch;};
struct _SERVER_INFO_1525 {DWORD sv1525_maxkeepcomplsearch;};
struct _SERVER_INFO_1528 {DWORD sv1528_scavtimeout;};
struct _SERVER_INFO_1529 {DWORD sv1529_minrcvqueue;};
struct _SERVER_INFO_1530 {DWORD sv1530_minfreeworkitems;};
struct _SERVER_INFO_1533 {DWORD sv1533_maxmpxct;};
struct _SERVER_INFO_1534 {DWORD sv1534_oplockbreakwait;};
struct _SERVER_INFO_1535 {DWORD sv1535_oplockbreakresponsewait;};
struct _SERVER_INFO_1536 {BOOL sv1536_enableoplocks;};
struct _SERVER_INFO_1537 {BOOL sv1537_enableoplockforceclose;};
struct _SERVER_INFO_1538 {BOOL sv1538_enablefcbopens;};
struct _SERVER_INFO_1539 {BOOL sv1539_enableraw;};
struct _SERVER_INFO_1540 {BOOL sv1540_enablesharednetdrives;};
struct _SERVER_INFO_1541 {BOOL sv1541_minfreeconnections;};
struct _SERVER_INFO_1542 {BOOL sv1542_maxfreeconnections;};
struct _SERVER_INFO_1543 {DWORD sv1543_initsesstable;};
struct _SERVER_INFO_1544 {DWORD sv1544_initconntable;};
struct _SERVER_INFO_1545 {DWORD sv1545_initfiletable;};
struct _SERVER_INFO_1546 {DWORD sv1546_initsearchtable;};
struct _SERVER_INFO_1547 {DWORD sv1547_alertschedule;};
struct _SERVER_INFO_1548 {DWORD sv1548_errorthreshold;};
struct _SERVER_INFO_1549 {DWORD sv1549_networkerrorthreshold;};
struct _SERVER_INFO_1550 {DWORD sv1550_diskspacethreshold;};
struct _SERVER_INFO_1552 {DWORD sv1552_maxlinkdelay;};
struct _SERVER_INFO_1553 {DWORD sv1553_minlinkthroughput;};
struct _SERVER_INFO_1554 {DWORD sv1554_linkinfovalidtime;};
struct _SERVER_INFO_1555 {DWORD sv1555_scavqosinfoupdatetime;};
struct _SERVER_INFO_1556 {DWORD sv1556_maxworkitemidletime;};
struct _SERVER_INFO_1557 {DWORD sv1557_maxrawworkitems;};
struct _SERVER_INFO_1560 {DWORD sv1560_producttype;};
struct _SERVER_INFO_1561 {DWORD sv1561_serversize;};
struct _SERVER_INFO_1562 {DWORD sv1562_connectionlessautodisc;};
struct _SERVER_INFO_1563 {DWORD sv1563_sharingviolationretries;};
struct _SERVER_INFO_1564 {DWORD sv1564_sharingviolationdelay;};
struct _SERVER_INFO_1565 {DWORD sv1565_maxglobalopensearch;};
struct _SERVER_INFO_1566 {BOOL sv1566_removeduplicatesearches;};
struct _SERVER_INFO_1567 {DWORD sv1567_lockviolationretries;};
struct _SERVER_INFO_1568 {DWORD sv1568_lockviolationoffset;};
struct _SERVER_INFO_1569 {DWORD sv1569_lockviolationdelay;};
struct _SERVER_INFO_1570 {DWORD sv1570_mdlreadswitchover;};
struct _SERVER_INFO_1571 {DWORD sv1571_cachedopenlimit;};
struct _SERVER_INFO_1572 {DWORD sv1572_criticalthreads;};
struct _SERVER_INFO_1573 {DWORD sv1573_restrictnullsessaccess;};
struct _SERVER_INFO_1574 {DWORD sv1574_enablewfw311directipx;};
struct _SERVER_INFO_1575 {DWORD sv1575_otherqueueaffinity;};
struct _SERVER_INFO_1576 {DWORD sv1576_queuesamplesecs;};
struct _SERVER_INFO_1577 {DWORD sv1577_balancecount;};
struct _SERVER_INFO_1578 {DWORD sv1578_preferredaffinity;};
struct _SERVER_INFO_1579 {DWORD sv1579_maxfreerfcbs;};
struct _SERVER_INFO_1580 {DWORD sv1580_maxfreemfcbs;};
struct _SERVER_INFO_1581 {DWORD sv1581_maxfreemlcbs;};
struct _SERVER_INFO_1582 {DWORD sv1582_maxfreepagedpoolchunks;};
struct _SERVER_INFO_1583 {DWORD sv1583_minpagedpoolchunksize;};
struct _SERVER_INFO_1584 {DWORD sv1584_maxpagedpoolchunksize;};
struct _SERVER_INFO_1585 {BOOL sv1585_sendsfrompreferredprocessor;};
struct _SERVER_INFO_1586 {DWORD sv1586_maxthreadsperqueue;};
struct _SERVER_INFO_1587 {DWORD sv1587_cacheddirectorylimit;};
struct _SERVER_INFO_1588 {DWORD sv1588_maxcopylength;};
struct _SERVER_INFO_1589 {DWORD sv1589_enablebulktransfer;};
struct _SERVER_INFO_1590 {DWORD sv1590_enablecompression;};
struct _SERVER_INFO_1591 {DWORD sv1591_autosharewks;};
struct _SERVER_INFO_1592 {DWORD sv1592_autosharewks;};
struct _SERVER_INFO_1593 {DWORD sv1593_enablesecuritysignature;};
struct _SERVER_INFO_1594 {DWORD sv1594_requiresecuritysignature;};
struct _SERVER_INFO_1595 {DWORD sv1595_minclientbuffersize;};
struct _SERVER_INFO_1596 {DWORD sv1596_ConnectionNoSessionsTimeout;};
struct _SSizeRestriction {ULONG relop;ULONG ulPropTag;ULONG cb;};
struct _WSAPROTOCOLCHAIN {int ChainLen;DWORD ChainEntries[7];};
struct _WSH_LOOKUP_ZONES {ULONG NoZones;};
struct _tagEXTSTACKTRACE {ULONG FramePointer;ULONG ProgramCounter;ULONG ReturnAddress;ULONG Args[4];};
struct _tagPROCESSORINFO {USHORT Processor;USHORT NumberProcessors;};
struct _userHENHMETAFILE {int fContext;union _userHENHMETAFILE____MIDL_IWinTypes_0006 u;};
struct ldap_version_info {ULONG lv_size;ULONG lv_major;ULONG lv_minor;};
struct lineagentcaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwAgentHandlerInfoSize;DWORD dwAgentHandlerInfoOffset;DWORD dwCapsVersion;DWORD dwFeatures;DWORD dwStates;DWORD dwNextStates;DWORD dwMaxNumGroupEntries;DWORD dwAgentStatusMessages;DWORD dwNumAgentExtensionIDs;DWORD dwAgentExtensionIDListSize;DWORD dwAgentExtensionIDListOffset;};
struct linecardentry_tag {DWORD dwPermanentCardID;DWORD dwCardNameSize;DWORD dwCardNameOffset;DWORD dwCardNumberDigits;DWORD dwSameAreaRuleSize;DWORD dwSameAreaRuleOffset;DWORD dwLongDistanceRuleSize;DWORD dwLongDistanceRuleOffset;DWORD dwInternationalRuleSize;DWORD dwInternationalRuleOffset;DWORD dwOptions;};
struct linedevstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwNumOpens;DWORD dwOpenMediaModes;DWORD dwNumActiveCalls;DWORD dwNumOnHoldCalls;DWORD dwNumOnHoldPendCalls;DWORD dwLineFeatures;DWORD dwNumCallCompletions;DWORD dwRingMode;DWORD dwSignalLevel;DWORD dwBatteryLevel;DWORD dwRoamMode;DWORD dwDevStatusFlags;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwAvailableMediaModes;DWORD dwAppInfoSize;DWORD dwAppInfoOffset;};
struct midiproptempo_tag {DWORD cbStruct;DWORD dwTempo;};
struct tagCBT_CREATEWNDA {struct tagCREATESTRUCTA *lpcs;HWND hwndInsertAfter;};
struct tagCBT_CREATEWNDW {struct tagCREATESTRUCTW *lpcs;HWND hwndInsertAfter;};
struct tagDRAWTEXTPARAMS {UINT cbSize;int iTabLength;int iLeftMargin;int iRightMargin;UINT uiLengthDrawn;};
struct tagJPEGINFOHEADER {DWORD JPEGSize;DWORD JPEGProcess;DWORD JPEGColorSpaceID;DWORD JPEGBitsPerSample;DWORD JPEGHSubSampling;DWORD JPEGVSubSampling;};
struct tagMCI_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_SEEK_PARMS {DWORD dwCallback;DWORD dwTo;};
struct tagMOUSEMOVEPOINT {int x;int y;DWORD time;DWORD dwExtraInfo;};
struct tagSQL_DAY_SECOND {SQLUINTEGER day;SQLUINTEGER hour;SQLUINTEGER minute;SQLUINTEGER second;SQLUINTEGER fraction;};
struct tagSQL_YEAR_MONTH {SQLUINTEGER year;SQLUINTEGER month;};
struct tag_IDFCHANNELHDR {DWORD cbStruct;DWORD dwGeneralMask;DWORD dwDrumMask;DWORD dwReserved;DWORD fdwFlags;};
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef enum tagAMTunerEventType AMTunerEventType;
typedef enum _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
typedef AsnOctetString AsnDisplayString;
typedef WORD BAD_TRACK_NUMBER;
typedef enum _tagChannelEnumFlags CHANNELENUMFLAGS;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
struct ClassArrayOfByte {int32_t MSReserved;unsigned int length;char body[1];};
struct ClassArrayOfChar {int32_t MSReserved;unsigned int length;unsigned short body[1];};
struct ClassArrayOfLong {int32_t MSReserved;unsigned int length;long long body[1];};
typedef enum _D3DANTIALIASMODE D3DANTIALIASMODE;
typedef enum _D3DPRIMITIVETYPE D3DPRIMITIVETYPE;
typedef enum _D3DRMCOLORSOURCE D3DRMCOLORSOURCE;
typedef enum _D3DRMCOMBINETYPE D3DRMCOMBINETYPE;
typedef DWORD D3DRMLOADOPTIONS;
typedef DWORD D3DRMMAPPINGFLAG;
typedef DWORD D3DRMSAVEOPTIONS;
typedef enum _D3DRMZBUFFERMODE D3DRMZBUFFERMODE;
typedef enum _D3DTEXTUREFILTER D3DTEXTUREFILTER;
typedef DWORD D3DTEXTUREHANDLE;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef enum _DtcLu_Xln_Response DTCLUXLNRESPONSE;
typedef enum tagAspectInfoFlag DVASPECTINFOFLAG;
typedef BYTE ETHERNET_ADDRESS[6];
typedef EXPLICIT_ACCESS_A EXPLICIT_ACCESS_;
typedef void ( *GLUtessBeginProc)(GLenum);
typedef void ( *GLUtessErrorProc)(GLenum);
typedef GOPHER_FIND_DATAA GOPHER_FIND_DATA;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef INTERNET_BUFFERSA INTERNET_BUFFERS;
struct IP_LOCAL_BINDING {DWORD IPAddress;DWORD Mask;};
typedef enum __MIDL_IConfigInterleaving_0001 InterleavingMode;
typedef enum _D5A9BE53F5312CC59A8B037E92CC2DF0 KSPROPERTY_CLOCK;
typedef enum _6F9F41060DD80647953DB726CA7F25E7 KS_SEEKING_FLAGS;
typedef APTXWAVEFORMAT *LPAPTXWAVEFORMAT;
typedef  COMPONENTSOPT *LPCCOMPONENTSOPT;
typedef  DPACCOUNTDESC *LPCDPACCOUNTDESC;
typedef  DPCREDENTIALS *LPCDPCREDENTIALS;
typedef  DPLCONNECTION *LPCDPLCONNECTION;
typedef  DSCBUFFERDESC *LPCDSCBUFFERDESC;
typedef  MENUITEMINFOA *LPCMENUITEMINFOA;
typedef  MENUITEMINFOW *LPCMENUITEMINFOW;
typedef enum _D3DRMLIGHTMODE *LPD3DRMLIGHTMODE;
typedef enum _D3DRMLIGHTTYPE *LPD3DRMLIGHTTYPE;
typedef enum _D3DRMSHADEMODE *LPD3DRMSHADEMODE;
typedef enum _D3DRMXOFFORMAT *LPD3DRMXOFFORMAT;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
typedef ECHOWAVEFILTER *LPECHOWAVEFILTER;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
typedef LPEXCHEXT ( *LPFNEXCHEXTENTRY)();
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
typedef MODULEENTRY32W *LPMODULEENTRY32W;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
typedef PROCESSENTRY32 *LPPROCESSENTRY32;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
typedef SV2CVW2_PARAMS *LPSV2CVW2_PARAMS;
typedef LPURL_COMPONENTSA LPURL_COMPONENTS;
typedef enum _WSAEcomparator *LPWSAECOMPARATOR;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
struct MS_ADDINFO_FLAT_ {DWORD cbStruct;struct SIP_INDIRECT_DATA_ *pIndirectData;};
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef APTXWAVEFORMAT *NPAPTXWAVEFORMAT;
typedef ECHOWAVEFILTER *NPECHOWAVEFILTER;
typedef VARIANT_BOOL OLE_OPTEXCLUSIVE;
typedef ADPCMWAVEFORMAT *PADPCMWAVEFORMAT;
typedef  CRYPT_OID_INFO *PCCRYPT_OID_INFO;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef PEXPLICIT_ACCESSA PEXPLICIT_ACCESS;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef KSIDENTIFIER *PKSPIN_INTERFACE;
typedef DWORD *PMETADATA_HANDLE;
typedef MPEG1WAVEFORMAT *PMPEG1WAVEFORMAT;
typedef PNS_SERVICE_INFOA PNS_SERVICE_INFO;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef PROCESSENTRY32W *PPROCESSENTRY32W;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PSP_DRVINFO_DATA_A PSP_DRVINFO_DATA;
typedef TIMECODE_SAMPLE *PTIMECODE_SAMPLE;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT;
typedef WSH_NBP_NAME *PWSH_REMOVE_NAME;
typedef enum tagQACONTAINERFLAGS QACONTAINERFLAGS;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef void * RPC_CLIENT_ALLOC(size_t Size);
typedef enum _SC_RETURN_VALUES SC_RETURN_VALUES;
typedef LARGE_INTEGER SECURITY_INTEGER;
typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef enum _FCAF746DC32E40D81D76F02A4B81A88C SQLOLE_EXEC_TYPE;
typedef enum _5BA8699F8741A720A1AB2749ED431340 SetupFileLogInfo;
typedef BOOL ( *VDMDETECTWOWPROC)();
typedef enum _WSAESETSERVICEOP WSAESETSERVICEOP;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
struct _AE_RESACCESSREJ {DWORD ae_rr_compname;DWORD ae_rr_username;DWORD ae_rr_resname;DWORD ae_rr_operation;};
struct _AUX_RGBImageRec {GLint sizeX;GLint sizeY;unsigned char *data;};
typedef void (*_CRT_DUMP_CLIENT)(void *, size_t);
struct _D3DLIGHTINGCAPS {DWORD dwSize;DWORD dwCaps;DWORD dwLightingModel;DWORD dwNumLights;};
struct _DDVIDEOPORTCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMaxWidth;DWORD dwMaxVBIWidth;DWORD dwMaxHeight;DWORD dwVideoPortID;DWORD dwCaps;DWORD dwFX;DWORD dwNumAutoFlipSurfaces;DWORD dwAlignVideoPortBoundary;DWORD dwAlignVideoPortPrescaleWidth;DWORD dwAlignVideoPortCropBoundary;DWORD dwAlignVideoPortCropWidth;DWORD dwPreshrinkXStep;DWORD dwPreshrinkYStep;DWORD dwNumVBIAutoFlipSurfaces;DWORD dwReserved1;DWORD dwReserved2;};
struct _DSKTLSYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;WORD wResult;};
struct _DTBLRADIOBUTTON {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulcButtons;ULONG ulPropTag;int lReturnValue;};
struct _GROUP_INFO_1005 {DWORD grpi1005_attributes;};
struct _IPX_GLOBAL_INFO {ULONG RoutingTableHashSize;ULONG EventLogMask;};
struct _METADATA_RECORD {DWORD dwMDIdentifier;DWORD dwMDAttributes;DWORD dwMDUserType;DWORD dwMDDataType;DWORD dwMDDataLen;unsigned char *pbMDData;DWORD dwMDDataTag;};
struct _NETLOGON_INFO_1 {DWORD netlog1_flags;DWORD netlog1_pdc_connection_status;};
struct _NETLOGON_INFO_3 {DWORD netlog3_flags;DWORD netlog3_logon_attempts;DWORD netlog3_reserved1;DWORD netlog3_reserved2;DWORD netlog3_reserved3;DWORD netlog3_reserved4;DWORD netlog3_reserved5;};
struct _PACKEDEVENTINFO {DWORD ulSize;DWORD ulNumEventsForLogFile;DWORD ulOffsets[];};
struct _RIP_GLOBAL_INFO {DWORD EventLogMask;};
struct _RemotableHandle {int fContext;union _RemotableHandle____MIDL_IWinTypes_0009 u;};
struct _SAP_GLOBAL_INFO {DWORD EventLogMask;};
struct _SHARE_INFO_1005 {DWORD shi1005_flags;};
struct _SHARE_INFO_1006 {DWORD shi1006_max_uses;};
struct _USER_OTHER_INFO {DWORD alrtus_errcode;DWORD alrtus_numstrings;};
struct _WKSTA_INFO_1010 {DWORD wki1010_char_wait;};
struct _WKSTA_INFO_1011 {DWORD wki1011_collection_time;};
struct _WKSTA_INFO_1012 {DWORD wki1012_maximum_collection_count;};
struct _WKSTA_INFO_1013 {DWORD wki1013_keep_conn;};
struct _WKSTA_INFO_1018 {DWORD wki1018_sess_timeout;};
struct _WKSTA_INFO_1023 {DWORD wki1023_siz_char_buf;};
struct _WKSTA_INFO_1027 {DWORD wki1027_errlog_sz;};
struct _WKSTA_INFO_1028 {DWORD wki1028_print_buf_time;};
struct _WKSTA_INFO_1032 {DWORD wki1032_wrk_heuristics;};
struct _WKSTA_INFO_1033 {DWORD wki1033_max_threads;};
struct _WKSTA_INFO_1041 {DWORD wki1041_lock_quota;};
struct _WKSTA_INFO_1042 {DWORD wki1042_lock_increment;};
struct _WKSTA_INFO_1043 {DWORD wki1043_lock_maximum;};
struct _WKSTA_INFO_1044 {DWORD wki1044_pipe_increment;};
struct _WKSTA_INFO_1045 {DWORD wki1045_pipe_maximum;};
struct _WKSTA_INFO_1046 {DWORD wki1046_dormant_file_limit;};
struct _WKSTA_INFO_1047 {DWORD wki1047_cache_file_timeout;};
struct _WKSTA_INFO_1048 {BOOL wki1048_use_opportunistic_locking;};
struct _WKSTA_INFO_1049 {BOOL wki1049_use_unlock_behind;};
struct _WKSTA_INFO_1050 {BOOL wki1050_use_close_behind;};
struct _WKSTA_INFO_1051 {BOOL wki1051_buf_named_pipes;};
struct _WKSTA_INFO_1052 {BOOL wki1052_use_lock_read_unlock;};
struct _WKSTA_INFO_1053 {BOOL wki1053_utilize_nt_caching;};
struct _WKSTA_INFO_1054 {BOOL wki1054_use_raw_read;};
struct _WKSTA_INFO_1055 {BOOL wki1055_use_raw_write;};
struct _WKSTA_INFO_1056 {BOOL wki1056_use_write_raw_data;};
struct _WKSTA_INFO_1057 {BOOL wki1057_use_encryption;};
struct _WKSTA_INFO_1058 {BOOL wki1058_buf_files_deny_write;};
struct _WKSTA_INFO_1059 {BOOL wki1059_buf_read_only_files;};
struct _WKSTA_INFO_1060 {BOOL wki1060_force_core_create_mode;};
struct _WKSTA_INFO_1061 {BOOL wki1061_use_512_byte_max_transfer;};
struct _WKSTA_INFO_1062 {DWORD wki1062_read_ahead_throughput;};
struct _tagWALLPAPEROPT {DWORD dwSize;DWORD dwStyle;};
struct channel_caps_tag {DWORD dwFlags;DWORD dwSrcRectXMod;DWORD dwSrcRectYMod;DWORD dwSrcRectWidthMod;DWORD dwSrcRectHeightMod;DWORD dwDstRectXMod;DWORD dwDstRectYMod;DWORD dwDstRectWidthMod;DWORD dwDstRectHeightMod;};
struct linecalllist_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwCallsNumEntries;DWORD dwCallsSize;DWORD dwCallsOffset;};
struct linetermcaps_tag {DWORD dwTermDev;DWORD dwTermModes;DWORD dwTermSharing;};
struct phonemessage_tag {DWORD hDevice;DWORD dwMessageID;DWORD dwCallbackInstance;DWORD dwParam1;DWORD dwParam2;DWORD dwParam3;};
struct srv_login_oldtds {BYTE lhostname[30];BYTE lhostnlen;BYTE lusername[30];BYTE lusernlen;BYTE lpw[30];BYTE lpwnlen;BYTE lhostproc[30];BYTE lhplen;BYTE lint2;BYTE lint4;BYTE lchar;BYTE lflt;BYTE ldate;BYTE lusedb;BYTE ldmpld;BYTE linterface;BYTE spare[8];BYTE lappname[30];BYTE lappnlen;BYTE ldummy;};
struct tagANIMATIONINFO {UINT cbSize;int iMinAnimate;};
struct tagCANDIDATELIST {DWORD dwSize;DWORD dwStyle;DWORD dwCount;DWORD dwSelection;DWORD dwPageStart;DWORD dwPageSize;DWORD dwOffset[1];};
struct tagENHMETARECORD {DWORD iType;DWORD nSize;DWORD dParm[1];};
struct tagFONTSIGNATURE {DWORD fsUsb[4];DWORD fsCsb[2];};
struct tagINTERFACEIMPL {IUnknownVtbl *lpVtbl;LPVOID lpBack;int cRef;};
struct tagMCI_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;};
struct tagNMLVCACHEHINT {NMHDR hdr;int iFrom;int iTo;};
struct tag_IDFKEYMAPHDR {DWORD cbStruct;DWORD cNumKeyMaps;DWORD cbKeyMap;};
struct translation_info {BOOL flag;void (*int2)(short *);void (*int4)(int *);void (*recvflt)(float *);void (*sendflt)(float *);void (*recvflt4)(float *);void (*sendflt4)(float *);void (*recvchar)(char *, int);void (*sendchar)(char *, int);void (*twoint4)(char *);void (*twoint2)(char *);};
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef enum tagAMTunerModeType AMTunerModeType;
typedef enum _B3BBE9873D99521DD98BD039DB6D363A AM_DVDCOPYSTATE;
typedef enum _7A041642E677561B10EFDE79481847F2 AM_PROPERTY_AC3;
typedef DWORD AUDIO_FORMAT_ID;
typedef BOOL ( *AVISAVECALLBACK)(int);
typedef AsnAny AsnObjectSyntax;
typedef  CRYPT_OID_INFO CCRYPT_OID_INFO;
typedef enum tagCHUNK_BREAKTYPE CHUNK_BREAKTYPE;
struct CLUS_FTSET_INFO {DWORD dwRootSignature;DWORD dwFtType;};
typedef CMC_uint32 CMC_return_code;
struct ClassArrayOfInt {int32_t MSReserved;unsigned int length;int body[1];};
typedef enum __MIDL___MIDL_itf_strmif_0101_0001 CompressionCaps;
typedef DWORD D3DMATRIXHANDLE;
typedef LONG D3DRMGROUPINDEX;
typedef enum _D3DTEXTUREBLEND D3DTEXTUREBLEND;
typedef enum _FC7397F06F001F7890189E8DF0977CBC DATASOURCE_TYPE;
typedef DWORD DBACCESSORFLAGS;
typedef DWORD DBPENDINGSTATUS;
typedef DWORD DBPOSITIONFLAGS;
typedef DWORD DBPROMPTOPTIONS;
typedef DWORD DBROWCHANGEKIND;
typedef enum tagDCOM_CALL_STATE DCOM_CALL_STATE;
struct DICONSTANTFORCE {LONG lMagnitude;};
typedef enum tagDOCHOSTUIDBLCLK DOCHOSTUIDBLCLK;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef DWORD EXECUTION_STATE;
typedef EXPLICIT_ACCESSA EXPLICIT_ACCESS;
struct EXT_API_VERSION {USHORT MajorVersion;USHORT MinorVersion;USHORT Revision;USHORT Reserved;};
struct GENERIC3CHANNEL {WORD ch1;WORD ch2;WORD ch3;};
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef enum _92E343B9497C79C1DA0A7F8171886153 INTERNET_SCHEME;
typedef KSIDENTIFIER KSPIN_INTERFACE;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef  DIDATAFORMAT *LPCDIDATAFORMAT;
typedef  DIEFFECTINFO *LPCDIEFFECTINFO;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef  DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef  DS3DLISTENER *LPCDS3DLISTENER;
typedef  DSBUFFERDESC *LPCDSBUFFERDESC;
typedef  IN_ADDR_IPV6 *LPCIN_ADDR_IPV6;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef COMPONENTSOPT *LPCOMPONENTSOPT;
typedef  WALLPAPEROPT *LPCWALLPAPEROPT;
typedef  WAVEFORMATEX *LPCWAVEFORMATEX;
typedef enum _D3DRMFILLMODE *LPD3DRMFILLMODE;
typedef enum _D3DRMSORTMODE *LPD3DRMSORTMODE;
typedef enum _D3DRMWRAPTYPE *LPD3DRMWRAPTYPE;
typedef DDPIXELFORMAT *LPDDPIXELFORMAT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
typedef HANDLE *LPHSNMP_CONTEXT;
typedef HANDLE *LPHSNMP_SESSION;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef LPDIRECTSOUND *LPLPDIRECTSOUND;
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef MODULEENTRY32 *LPMODULEENTRY32;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
typedef DWORD *LPMONTHDAYSTATE;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef LPMAPIFORMINFO *LPPMAPIFORMINFO;
typedef PROFILEHEADER *LPPROFILEHEADER;
typedef LPPROTOCOL_INFOA LPPROTOCOL_INFO;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
typedef THREADENTRY32 *LPTHREADENTRY32;
typedef DWORD LS_LICENSE_TYPE;
typedef MCI_GENERIC_PARMS MCI_CLOSE_PARMS;
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef DWORD MEDIA_FORMAT_ID;
typedef DWORD METADATA_HANDLE;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef NS_SERVICE_INFOA NS_SERVICE_INFO;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef APTXWAVEFORMAT *PAPTXWAVEFORMAT;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef ECHOWAVEFILTER *PECHOWAVEFILTER;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef enum _E5E05FC88E8385A5216FCD37A95BAA87 *PKSPIN_DATAFLOW;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef  MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef MODULEENTRY32W *PMODULEENTRY32W;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
typedef enum tagPOINTERINACTIVE POINTERINACTIVE;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef PROCESSENTRY32 *PPROCESSENTRY32;
typedef WORD PRINTEROP_FLAGS;
typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PTRUSTEE_ACCESSA PTRUSTEE_ACCESS;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef LSA_UNICODE_STRING *PUNICODE_STRING;
typedef enum _WSAEcomparator *PWSAECOMPARATOR;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef DWORD ( *RASSECURITYPROC)();
typedef enum _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
typedef RPC_STATUS (*RPC_BLOCKING_FN)(void *hWnd, void *Context, void *hSyncEvent);
typedef LONG SECURITY_STATUS;
typedef enum _4218CD2CD980A290FF820393F4F33E3B SHREGENUM_FLAGS;
typedef SP_DRVINFO_DATA_A SP_DRVINFO_DATA;
typedef enum _3D20E5AD71FB7B2EAEA904DDDD144215 SQLOLE_KEY_TYPE;
typedef DATE_STRUCT SQL_DATE_STRUCT;
typedef TIME_STRUCT SQL_TIME_STRUCT;
typedef SearchDirectionEnum SearchDirection;
typedef DWORD VIDEO_FORMAT_ID;
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef enum _WOW_HANDLE_TYPE WOW_HANDLE_TYPE;
typedef WSH_NBP_NAME WSH_REMOVE_NAME;
typedef int (*XA_ROLLBACK_EPT)(XID *, int, int);
typedef DWORD XA_SWITCH_FLAGS;
struct _AE_SERVICESTAT {DWORD ae_ss_compname;DWORD ae_ss_username;DWORD ae_ss_svcname;DWORD ae_ss_status;DWORD ae_ss_code;DWORD ae_ss_text;DWORD ae_ss_returnval;};
typedef int (*_CRT_ALLOC_HOOK)(int, void *, size_t, int, int,  unsigned char *, int);
struct _D3DLINEPATTERN {WORD wRepeatFactor;WORD wLinePattern;};
struct _D3DTEXTURELOAD {D3DTEXTUREHANDLE hDestTexture;D3DTEXTUREHANDLE hSrcTexture;};
struct _DPLMSG_GENERIC {DWORD dwType;};
struct _DllVersionInfo {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformID;};
struct _FAT_STATISTICS {DWORD CreateHits;DWORD SuccessfulCreates;DWORD FailedCreates;DWORD NonCachedReads;DWORD NonCachedReadBytes;DWORD NonCachedWrites;DWORD NonCachedWriteBytes;DWORD NonCachedDiskReads;DWORD NonCachedDiskWrites;};
struct _IF_TABLE_INDEX {ULONG InterfaceIndex;};
struct _IPXWAN_IF_INFO {ULONG AdminState;};
struct _LinkPerfShrHdr {ULONG NumberOfLinkServices;};
struct _PPP_EAP_PACKET {BYTE Code;BYTE Id;BYTE Length[2];BYTE Data[1];};
struct _PRINTER_INFO_3 {PSECURITY_DESCRIPTOR pSecurityDescriptor;};
struct _PRINTER_INFO_6 {DWORD dwStatus;};
struct _REPL_INFO_1000 {DWORD rp1000_interval;};
struct _REPL_INFO_1001 {DWORD rp1001_pulse;};
struct _REPL_INFO_1002 {DWORD rp1002_guardtime;};
struct _REPL_INFO_1003 {DWORD rp1003_random;};
struct _SCONTEXT_QUEUE {unsigned int NumberOfObjects;NDR_SCONTEXT *ArrayOfObjects;};
struct _SERVICE_STATUS {DWORD dwServiceType;DWORD dwCurrentState;DWORD dwControlsAccepted;DWORD dwWin32ExitCode;DWORD dwServiceSpecificExitCode;DWORD dwCheckPoint;DWORD dwWaitHint;};
struct _SESSION_BUFFER {UCHAR lsn;UCHAR state;UCHAR local_name[16];UCHAR remote_name[16];UCHAR rcvs_outstanding;UCHAR sends_outstanding;};
struct _SESSION_HEADER {UCHAR sess_name;UCHAR num_sess;UCHAR rcv_dg_outstanding;UCHAR rcv_any_outstanding;};
struct _SPropAttrArray {ULONG cValues;ULONG aPropAttr[1];};
struct _USER_INFO_1005 {DWORD usri1005_priv;};
struct _USER_INFO_1008 {DWORD usri1008_flags;};
struct _USER_INFO_1010 {DWORD usri1010_auth_flags;};
struct _USER_INFO_1017 {DWORD usri1017_acct_expires;};
struct _USER_INFO_1018 {DWORD usri1018_max_storage;};
struct _USER_INFO_1024 {DWORD usri1024_country_code;};
struct _USER_INFO_1025 {DWORD usri1025_code_page;};
struct _USER_INFO_1051 {DWORD usri1051_primary_group_id;};
struct _repastespecial {DWORD dwAspect;DWORD dwParam;};
struct lineappinfo_tag {DWORD dwMachineNameSize;DWORD dwMachineNameOffset;DWORD dwUserNameSize;DWORD dwUserNameOffset;DWORD dwModuleFilenameSize;DWORD dwModuleFilenameOffset;DWORD dwFriendlyNameSize;DWORD dwFriendlyNameOffset;DWORD dwMediaModes;DWORD dwAddressID;};
struct lineforward_tag {DWORD dwForwardMode;DWORD dwCallerAddressSize;DWORD dwCallerAddressOffset;DWORD dwDestCountryCode;DWORD dwDestAddressSize;DWORD dwDestAddressOffset;};
struct linemessage_tag {DWORD hDevice;DWORD dwMessageID;DWORD dwCallbackInstance;DWORD dwParam1;DWORD dwParam2;DWORD dwParam3;};
struct phonestatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwStatusFlags;DWORD dwNumOwners;DWORD dwNumMonitors;DWORD dwRingMode;DWORD dwRingVolume;DWORD dwHandsetHookSwitchMode;DWORD dwHandsetVolume;DWORD dwHandsetGain;DWORD dwSpeakerHookSwitchMode;DWORD dwSpeakerVolume;DWORD dwSpeakerGain;DWORD dwHeadsetHookSwitchMode;DWORD dwHeadsetVolume;DWORD dwHeadsetGain;DWORD dwDisplaySize;DWORD dwDisplayOffset;DWORD dwLampModesSize;DWORD dwLampModesOffset;DWORD dwOwnerNameSize;DWORD dwOwnerNameOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwPhoneFeatures;};
struct tagFILTERREGION {ULONG idChunk;ULONG cwcStart;ULONG cwcExtent;};
struct tagHELPWININFOA {int wStructSize;int x;int y;int dx;int dy;int wMax;CHAR rgchMember[2];};
struct tagICEXYZTRIPLE {CIEXYZ ciexyzRed;CIEXYZ ciexyzGreen;CIEXYZ ciexyzBlue;};
struct tagPALETTEENTRY {BYTE peRed;BYTE peGreen;BYTE peBlue;BYTE peFlags;};
struct tag_IDFINSTCAPS {DWORD cbStruct;DWORD fdwFlags;DWORD dwBasicChannel;DWORD cNumChannels;DWORD cInstrumentPolyphony;DWORD cChannelPolyphony;};
typedef ADS_SEARCHPREF_ENUM ADS_SEARCHPREF;
typedef enum __MIDL___MIDL__intf_0000_0005 ADS_STATUSENUM;
typedef enum __MIDL___MIDL_itf_strmif_0118_0001 AMPROPERTY_PIN;
typedef void ( *AUXRESHAPEPROC)(GLsizei, GLsizei);
typedef CMC_uint32 CMC_session_id;
typedef enum _D3DRMLIGHTMODE D3DRMLIGHTMODE;
typedef enum _D3DRMLIGHTTYPE D3DRMLIGHTTYPE;
typedef enum _D3DRMSHADEMODE D3DRMSHADEMODE;
typedef enum _D3DRMXOFFORMAT D3DRMXOFFORMAT;
typedef DWORD DBCOMMANDREUSE;
typedef DWORD DBCONVERTFLAGS;
typedef DWORD DBRESOURCEKIND;
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef DPMSG_ADDPLAYER DPMSG_ADDGROUP;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef ULONG FIELDMODIFIERS;
typedef enum _BF0F4415E1602A9FE3AFCAFCA10811A9 FOLDERVIEWMODE;
typedef enum tagINSTALLOGMODE INSTALLLOGMODE;
typedef enum tagINSTALLMESSAGE INSTALLMESSAGE;
typedef enum tagINSTALLUILEVEL INSTALLUILEVEL;
typedef enum _E5E05FC88E8385A5216FCD37A95BAA87 KSPIN_DATAFLOW;
typedef enum _973D6FE86EA20EE140FCFE92BAEE2448 KSPROPERTY_PIN;
typedef ADPCMCOEFSET *LPADPCMCOEFSET;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
typedef LPCONFFILEINFOA LPCONFFILEINFO;
typedef LPCONFUSERINFOA LPCONFUSERINFO;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef  RSVP_POLICY *LPCRSVP_POLICY;
typedef enum _D3DRMFOGMODE *LPD3DRMFOGMODE;
typedef DWORD *LPD3DRMMAPPING;
typedef DAOFETCHROWS *LPDAOFETCHROWS;
typedef LPDIEFFECTINFOA LPDIEFFECTINFO;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef HACMDRIVERID *LPHACMDRIVERID;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
typedef HANDLE *LPHSNMP_ENTITY;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
typedef LPNETRESOURCE2A LPNETRESOURCE2;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
typedef LPREGISTERWORDA LPREGISTERWORD;
typedef LPSERVICE_INFOA LPSERVICE_INFO;
typedef VDMLDT_ENTRY *LPVDMLDT_ENTRY;
typedef WALLPAPEROPT *LPWALLPAPEROPT;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMIDL_ES_MESSAGE MIDL_ES_HANDLE;
typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef void ( *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef DWORD ( *NEEDREBOOTINIT)();
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef ADPCMCOEFSET *NPADPCMCOEFSET;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef enum tagOLEUIPASTEFLAG OLEUIPASTEFLAG;
typedef VARIANT_BOOL OLE_CANCELBOOL;
typedef ULONG *PACCESS_RIGHTS;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef  CERT_CONTEXT *PCCERT_CONTEXT;
typedef  COMBOBOXEXITEMA *PCCOMBOEXITEMA;
typedef  COMBOBOXEXITEMW *PCCOMBOEXITEMW;
typedef  IMAGE_THUNK_DATA *PCImgThunkData;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef ULONG *PINHERIT_FLAGS;
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef MODULEENTRY32 *PMODULEENTRY32;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef enum _PPP_EAP_ACTION PPP_EAP_ACTION;
typedef PROFILEHEADER *PPROFILEHEADER;
typedef PPROTOCOL_INFOA PPROTOCOL_INFO;
typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef enum tagPROPPAGESTATUS PROPPAGESTATUS;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
typedef DWORD ( *PSTOP_PROTOCOL)();
typedef enum _SecStateDelta *PSecStateDelta;
typedef enum _SecState *PSecurityState;
typedef THREADENTRY32 *PTHREADENTRY32;
typedef LONGLONG REFERENCE_TIME;
typedef DWORD RESOURCERATING;
typedef DWORD SCRIPTTHREADID;
typedef enum _SC_ACTION_TYPE SC_ACTION_TYPE;
typedef void ( *SEC_GET_KEY_FN)(void *Arg, void *Principal, unsigned int KeyVer, void **Key, SECURITY_STATUS *Status);
typedef enum _SE_OBJECT_TYPE SE_OBJECT_TYPE;
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef enum _6FB945646DCDC979B45A0864DF90F90A SHREGDEL_FLAGS;
typedef smiUINT32 SNMPAPI_STATUS;
typedef TRUSTEE_ACCESSA TRUSTEE_ACCESS;
typedef enum tagTunerInputType TunerInputType;
typedef LSA_UNICODE_STRING UNICODE_STRING;
typedef URL_COMPONENTSA URL_COMPONENTS;
typedef BOOL ( *VDMKILLWOWPROC)();
typedef void ( *WORKERFUNCTION)(PVOID);
typedef enum _WSAEcomparator WSAECOMPARATOR;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
typedef int (*XA_PREPARE_EPT)(XID *, int, int);
typedef int (*XA_RECOVER_EPT)(XID *, int, int, int);
struct _AD_GUARANTEED {ULONG CTotal;ULONG DTotal;ULONG CSum;ULONG DSum;};
struct _AE_SESSLOGOFF {DWORD ae_sf_compname;DWORD ae_sf_username;DWORD ae_sf_reason;};
struct _BLENDFUNCTION {BYTE BlendOp;BYTE BlendFlags;BYTE SourceConstantAlpha;BYTE AlphaFormat;};
struct _BYTE_SIZEDARR {unsigned int clSize;byte *pData;};
struct _D3DCLIPSTATUS {DWORD dwFlags;DWORD dwStatus;float minx;float maxx;float miny;float maxy;float minz;float maxz;};
struct _D3DMATRIXLOAD {D3DMATRIXHANDLE hDestMatrix;D3DMATRIXHANDLE hSrcMatrix;};
struct _D3DRMVECTOR4D {D3DVALUE x;D3DVALUE y;D3DVALUE z;D3DVALUE w;};
struct _DTBLMVLISTBOX {ULONG ulFlags;ULONG ulMVPropTag;};
struct _EDKEventCount {DWORD cError;DWORD cWarning;DWORD cInformation;};
typedef enum _239F13ABFE0DEB25C9BEF2C1826A55A5 _FPIEEE_FORMAT;
struct _GDI_NONREMOTE {int fContext;union _GDI_NONREMOTE____MIDL_IWinTypes_0002 u;};
struct _GRADIENT_RECT {ULONG UpperLeft;ULONG LowerRight;};
struct _HANDLE_INFO_1 {DWORD hdli1_chartime;DWORD hdli1_charcount;};
struct _RTP_SDES_ITEM {BYTE Type;BYTE TextLength;BYTE Text[256];};
struct _RTR_TOC_ENTRY {ULONG InfoType;ULONG InfoSize;ULONG Count;ULONG Offset;};
struct _SAppTimeArray {ULONG cValues;double *lpat;};
struct _SHQUERYRBINFO {DWORD cbSize;long long i64Size;long long i64NumItems;};
struct _SPropTagArray {ULONG cValues;ULONG aulPropTag[1];};
struct _STAT_SERVER_0 {DWORD sts0_start;DWORD sts0_fopens;DWORD sts0_devopens;DWORD sts0_jobsqueued;DWORD sts0_sopens;DWORD sts0_stimedout;DWORD sts0_serrorout;DWORD sts0_pwerrors;DWORD sts0_permerrors;DWORD sts0_syserrors;DWORD sts0_bytessent_low;DWORD sts0_bytessent_high;DWORD sts0_bytesrcvd_low;DWORD sts0_bytesrcvd_high;DWORD sts0_avresponse;DWORD sts0_reqbufneed;DWORD sts0_bigbufneed;};
struct _SecBufferDesc {unsigned int ulVersion;unsigned int cBuffers;PSecBuffer pBuffers;};
struct _finddatai64_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;long long size;char name[260];};
struct _tagIOSPACE_EX {ULONG Address;ULONG Length;ULONG Data;ULONG InterfaceType;ULONG BusNumber;ULONG AddressSpace;};
struct _userHMETAFILE {int fContext;union _userHMETAFILE____MIDL_IWinTypes_0004 u;};
typedef smiUINT32 *smiLPTIMETICKS;
struct tagCONNECTDATA {IUnknown *pUnk;DWORD dwCookie;};
struct tagCURSORSHAPE {int xHotSpot;int yHotSpot;int cx;int cy;int cbWidth;BYTE Planes;BYTE BitsPixel;};
struct tagHANDLETABLE {HGDIOBJ objectHandle[1];};
struct tagKERNINGPAIR {WORD wFirst;WORD wSecond;int iKernAmount;};
struct tagNMIPADDRESS {NMHDR hdr;int iField;int iValue;};
struct tagRemHPALETTE {unsigned int cbData;byte data[1];};
struct tagSTYLESTRUCT {DWORD styleOld;DWORD styleNew;};
struct tagTIME_STRUCT {SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;};
struct wavefilter_tag {DWORD cbStruct;DWORD dwFilterTag;DWORD fdwFilter;DWORD dwReserved[5];};
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef ULONG ACCESS_RIGHTS;
typedef enum _6DC56AAB304957BC9D3606A0F1B62D39 ACSLAN_STATUS;
typedef enum tagACTIVATEFLAGS ACTIVATEFLAGS;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef enum __MIDL___MIDL__intf_0000_0006 ADS_DEREFENUM;
typedef enum __MIDL___MIDL__intf_0000_0007 ADS_SCOPEENUM;
typedef AsnObjectIdentifier AsnObjectName;
typedef ULONG AsnUnsigned32;
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef enum _CLASSPATHTYPE CLASSPATHTYPE;
typedef DWORD D3DCOLORMODEL;
typedef enum _D3DRMFILLMODE D3DRMFILLMODE;
typedef D3DVALUE D3DRMMATRIX4D[4][4];
typedef enum _D3DRMSORTMODE D3DRMSORTMODE;
typedef enum _D3DRMWRAPTYPE D3DRMWRAPTYPE;
typedef enum _D3DVERTEXTYPE D3DVERTEXTYPE;
typedef DWORD DBASYNCHPHASE;
typedef DWORD DBCOLUMNFLAGS;
typedef DWORD DBDATACONVERT;
typedef DWORD DBPROPOPTIONS;
typedef DWORD DBWATCHNOTIFY;
struct DIDEVCAPS_DX3 {DWORD dwSize;DWORD dwFlags;DWORD dwDevType;DWORD dwAxes;DWORD dwButtons;DWORD dwPOVs;};
typedef PVOID DIGEST_HANDLE;
typedef enum _DirectionType DIRECTIONTYPE;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef enum tagDOCHOSTUIFLAG DOCHOSTUIFLAG;
typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef DWORD DRV_REQUESTID;
typedef enum _DtcLu_Xln_Error DTCLUXLNERROR;
typedef enum tagDVD_DISC_SIDE DVD_DISC_SIDE;
typedef enum tagDVD_FRAMERATE DVD_FRAMERATE;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef ULONG EXCEPTIONKIND;
typedef HANDLE HSNMP_CONTEXT;
typedef HANDLE HSNMP_SESSION;
typedef enum tagIFILTER_FLAGS IFILTER_FLAGS;
typedef ULONG INHERIT_FLAGS;
typedef WORD INTERNET_PORT;
typedef LONG LCSGAMUTMATCH;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef  DS3DBUFFER *LPCDS3DBUFFER;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
typedef  ITEMIDLIST *LPCITEMIDLIST;
typedef LPCREATEGIZMOA LPCREATEGIZMO;
typedef  SCROLLINFO *LPCSCROLLINFO;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef DAOCOLUMNID *LPDAOCOLUMNID;
typedef DDOVERLAYFX *LPDDOVERLAYFX;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef LPFINDREPLACEA LPFINDREPLACE;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef HEAPENTRY32 *LPHEAPENTRY32;
typedef LPHELPWININFOA LPHELPWININFO;
typedef LPICONMETRICSA LPICONMETRICS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
typedef DWORD *LPNDS_BOOLEAN;
typedef LPNETRESOURCEA LPNETRESOURCE;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef MONITORINFOEXA MONITORINFOEX;
typedef DWORD MONTHDAYSTATE;
typedef tagMQPROPVARIANT MQPROPVARIANT;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef enum tagOLEGETMONIKER OLEGETMONIKER;
typedef enum tagOLEVERBATTRIB OLEVERBATTRIB;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef PVOID PACCESS_TOKEN;
typedef PACTRL_ACCESSA PACTRL_ACCESS;
typedef ADPCMCOEFSET *PADPCMCOEFSET;
typedef SYSTEMTIME *PADS_UTC_TIME;
typedef PCABINET_INFO_A PCABINET_INFO;
typedef  CRL_CONTEXT *PCCRL_CONTEXT;
typedef  CTL_CONTEXT *PCCTL_CONTEXT;
typedef enum _ELEMENT_TYPE *PELEMENT_TYPE;
typedef HACMDRIVERID *PHACMDRIVERID;
typedef void ( *PHONECALLBACK)(DWORD hDevice, DWORD dwMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
typedef enum _PinDirection PIN_DIRECTION;
typedef IMAGE_THUNK_DATA *PImgThunkData;
typedef KSIDENTIFIER *PKSPIN_MEDIUM;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef DWORD  PM_CLOSE_PROC();
typedef PNETRESOURCE2A PNETRESOURCE2;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;
typedef PREGISTERWORDA PREGISTERWORD;
typedef enum tagPROPBAG2_TYPE PROPBAG2_TYPE;
typedef PROTOCOL_INFOA PROTOCOL_INFO;
typedef PSERVICE_INFOA PSERVICE_INFO;
typedef enum _SID_NAME_USE *PSID_NAME_USE;
typedef PSOURCE_MEDIA_A PSOURCE_MEDIA;
typedef enum _2E4D6E69AC5B406EE64EF4CFE7610CC3 Q2931_IE_TYPE;
typedef enum tagREINSTALLMODE REINSTALLMODE;
typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef enum _SecStateDelta SecStateDelta;
typedef enum _SecState SecurityState;
typedef TEXTMETRICW TEXTMETRICOLE;
typedef DWORD_BLOB *UP_DWORD_BLOB;
typedef enum tagUSERCLASSTYPE USERCLASSTYPE;
typedef enum tagUSERINFOSTATE USERINFOSTATE;
typedef int (*XA_COMMIT_EPT)(XID *, int, int);
typedef int (*XA_FORGET_EPT)(XID *, int, int);
struct _AE_CLOSEFILE {DWORD ae_cf_compname;DWORD ae_cf_username;DWORD ae_cf_resname;DWORD ae_cf_fileid;DWORD ae_cf_duration;DWORD ae_cf_reason;};
struct _AE_CONNSTART {DWORD ae_ct_compname;DWORD ae_ct_username;DWORD ae_ct_netname;DWORD ae_ct_connid;};
struct _AE_NETLOGOFF {DWORD ae_nf_compname;DWORD ae_nf_username;DWORD ae_nf_reserved1;DWORD ae_nf_reserved2;};
struct _AE_RESACCESS {DWORD ae_ra_compname;DWORD ae_ra_username;DWORD ae_ra_resname;DWORD ae_ra_operation;DWORD ae_ra_returncode;DWORD ae_ra_restype;DWORD ae_ra_fileid;};
struct _AE_SESSLOGON {DWORD ae_so_compname;DWORD ae_so_username;DWORD ae_so_privilege;};
struct _AE_SESSPWERR {DWORD ae_sp_compname;DWORD ae_sp_username;};
struct _AE_SRVSTATUS {DWORD ae_sv_status;};
struct _AUX_EVENTREC {GLint event;GLint data[4];};
struct _AVIFILEINFOA {DWORD dwMaxBytesPerSec;DWORD dwFlags;DWORD dwCaps;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwScale;DWORD dwRate;DWORD dwLength;DWORD dwEditCount;char szFileType[64];};
struct _COMMTIMEOUTS {DWORD ReadIntervalTimeout;DWORD ReadTotalTimeoutMultiplier;DWORD ReadTotalTimeoutConstant;DWORD WriteTotalTimeoutMultiplier;DWORD WriteTotalTimeoutConstant;};
struct _DDKERNELCAPS {DWORD dwSize;DWORD dwCaps;DWORD dwIRQCaps;};
struct _DFS_INFO_101 {DWORD State;};
struct _DTBLCHECKBOX {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulPRPropertyName;};
struct _DTBLCOMBOBOX {ULONG ulbLpszCharsAllowed;ULONG ulFlags;ULONG ulNumCharsAllowed;ULONG ulPRPropertyName;ULONG ulPRTableName;};
struct _DTBLGROUPBOX {ULONG ulbLpszLabel;ULONG ulFlags;};
struct _IN_ADDR_IPV6 {UCHAR Addr[16];};
struct _IPX_IF_STATS {ULONG IfOperState;ULONG MaxPacketSize;ULONG InHdrErrors;ULONG InFiltered;ULONG InNoRoutes;ULONG InDiscards;ULONG InDelivers;ULONG OutFiltered;ULONG OutDiscards;ULONG OutDelivers;ULONG NetbiosReceived;ULONG NetbiosSent;};
struct _MEMORYSTATUS {DWORD dwLength;DWORD dwMemoryLoad;DWORD dwTotalPhys;DWORD dwAvailPhys;DWORD dwTotalPageFile;DWORD dwAvailPageFile;DWORD dwTotalVirtual;DWORD dwAvailVirtual;};
struct _PSINJECTDATA {DWORD DataBytes;DWORD InjectionPoint;DWORD Flags;DWORD Reserved;};
struct _RIP_IF_STATS {ULONG RipIfOperState;ULONG RipIfInputPackets;ULONG RipIfOutputPackets;};
struct _SAP_IF_STATS {ULONG SapIfOperState;ULONG SapIfInputPackets;ULONG SapIfOutputPackets;};
struct _SAP_MIB_BASE {ULONG SapOperState;};
struct _SDoubleArray {ULONG cValues;double *lpdbl;};
struct _USER_INFO_21 {BYTE usri21_password[16];};
struct _userHPALETTE {int fContext;union _userHPALETTE____MIDL_IWinTypes_0008 u;};
struct joyinfoex_tag {DWORD dwSize;DWORD dwFlags;DWORD dwXpos;DWORD dwYpos;DWORD dwZpos;DWORD dwRpos;DWORD dwUpos;DWORD dwVpos;DWORD dwButtons;DWORD dwButtonNumber;DWORD dwPOV;DWORD dwReserved1;DWORD dwReserved2;};
struct midievent_tag {DWORD dwDeltaTime;DWORD dwStreamID;DWORD dwEvent;DWORD dwParms[1];};
struct phonecaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwProviderInfoSize;DWORD dwProviderInfoOffset;DWORD dwPhoneInfoSize;DWORD dwPhoneInfoOffset;DWORD dwPermanentPhoneID;DWORD dwPhoneNameSize;DWORD dwPhoneNameOffset;DWORD dwStringFormat;DWORD dwPhoneStates;DWORD dwHookSwitchDevs;DWORD dwHandsetHookSwitchModes;DWORD dwSpeakerHookSwitchModes;DWORD dwHeadsetHookSwitchModes;DWORD dwVolumeFlags;DWORD dwGainFlags;DWORD dwDisplayNumRows;DWORD dwDisplayNumColumns;DWORD dwNumRingModes;DWORD dwNumButtonLamps;DWORD dwButtonModesSize;DWORD dwButtonModesOffset;DWORD dwButtonFunctionsSize;DWORD dwButtonFunctionsOffset;DWORD dwLampModesSize;DWORD dwLampModesOffset;DWORD dwNumSetData;DWORD dwSetDataSize;DWORD dwSetDataOffset;DWORD dwNumGetData;DWORD dwGetDataSize;DWORD dwGetDataOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;DWORD dwPhoneFeatures;DWORD dwSettableHandsetHookSwitchModes;DWORD dwSettableSpeakerHookSwitchModes;DWORD dwSettableHeadsetHookSwitchModes;DWORD dwMonitoredHandsetHookSwitchModes;DWORD dwMonitoredSpeakerHookSwitchModes;DWORD dwMonitoredHeadsetHookSwitchModes;};
typedef smiOCTETS *smiLPNSAPADDR;
struct tagCSPLATFORM {DWORD dwPlatformId;DWORD dwVersionHi;DWORD dwVersionLo;DWORD dwProcessorArch;};
struct tagDBFILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
struct tagDB_NUMERIC {BYTE precision;BYTE scale;BYTE sign;BYTE val[16];};
struct tagEXT_BUTTON {WORD idCommand;WORD idsHelp;WORD fsStyle;};
struct tagHEAPLIST32 {DWORD dwSize;DWORD th32ProcessID;DWORD th32HeapID;DWORD dwFlags;};
struct tagMINMAXINFO {POINT ptReserved;POINT ptMaxSize;POINT ptMaxPosition;POINT ptMinTrackSize;POINT ptMaxTrackSize;};
struct tagOEMPENINFO {UINT wPdt;UINT wValueMax;UINT wDistinct;};
struct tagRemHBITMAP {unsigned int cbData;byte data[1];};
struct tagRemHGLOBAL {int fNullHGlobal;unsigned int cbData;byte data[1];};
struct tagSCROLLINFO {UINT cbSize;UINT fMask;int nMin;int nMax;UINT nPage;int nPos;int nTrackPos;};
struct varstring_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwStringFormat;DWORD dwStringSize;DWORD dwStringOffset;};
typedef userHMETAFILE *wireHMETAFILE;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef ACTRL_ACCESSA ACTRL_ACCESS;
typedef enum _8C57D1DDA788D6050A7C554DBD1EB1AC ADDRESS_MODE;
typedef SYSTEMTIME ADS_UTC_TIME;
typedef void ( *AUXMOUSEPROC)(AUX_EVENTREC *);
typedef AsnUnsigned32 AsnCounter32;
typedef ULARGE_INTEGER AsnCounter64;
typedef AsnOctetString AsnIPAddress;
typedef LONG AsnInteger32;
typedef AsnUnsigned32 AsnTimeticks;
typedef RECT BORDERWIDTHS;
typedef CABINET_INFO_A CABINET_INFO;
typedef CONFFILEINFOA CONFFILEINFO;
typedef CONFUSERINFOA CONFUSERINFO;
typedef CREATESTRUCTA CREATESTRUCT;
typedef enum _D3DLIGHTTYPE D3DLIGHTTYPE;
typedef enum _D3DRMFOGMODE D3DRMFOGMODE;
typedef DWORD D3DRMMAPPING;
typedef enum _D3DSHADEMODE D3DSHADEMODE;
typedef DWORD DBBINDSTATUS;
typedef DWORD DBEVENTPHASE;
typedef DWORD DBEXECLIMITS;
typedef DWORD DBPARAMFLAGS;
typedef DWORD DBPROPSTATUS;
typedef DWORD DBROWOPTIONS;
typedef DWORD DBSOURCETYPE;
struct DIPROPHEADER {DWORD dwSize;DWORD dwHeaderSize;DWORD dwObj;DWORD dwHow;};
typedef enum tagDISCARDCACHE DISCARDCACHE;
typedef BYTE DVD_AudioATR[8];
typedef WORD DVD_REGISTER;
typedef BYTE DVD_VideoATR[2];
typedef enum tagExtentMode DVEXTENTMODE;
typedef enum _ELEMENT_TYPE ELEMENT_TYPE;
typedef WORD FILEOP_FLAGS;
typedef enum _FilterState FILTER_STATE;
typedef HANDLE GLOBALHANDLE;
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef enum __MIDL_IHlinkSite_0001 HLINKWHICHMK;
typedef enum _HLTRANSLATEF_NOREDEF10 HLTRANSLATEF;
typedef HANDLE HSNMP_ENTITY;
typedef ULONG HWATCHREGION;
typedef enum tagIFILTER_INIT IFILTER_INIT;
typedef enum tagINSTALLLEVEL INSTALLLEVEL;
typedef enum tagINSTALLSTATE INSTALLSTATE;
typedef BYTE JAVA_BOOLEAN;
typedef enum _jswindowtype JSWINDOWTYPE;
typedef KSIDENTIFIER KSPIN_MEDIUM;
typedef enum _C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;
typedef enum _55BF08B00F142B6EC708C95723E2EDB1 LDAP_RETCODE;
typedef void ( *LINECALLBACK)(DWORD hDevice, DWORD dwMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef  COMPONENT *LPCCOMPONENT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
typedef COLOR_NAME *LPCOLOR_NAME;
typedef CONFNOTIFY *LPCONFNOTIFY;
typedef LPCONFRECDIRA LPCONFRECDIR;
typedef DBDATETIME *LPDBDATETIME;
typedef DDBLTBATCH *LPDDBLTBATCH;
typedef DDCAPS_DX3 *LPDDCAPS_DX3;
typedef DDCOLORKEY *LPDDCOLORKEY;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
typedef HACMDRIVER *LPHACMDRIVER;
typedef HACMSTREAM *LPHACMSTREAM;
typedef HEAPLIST32 *LPHEAPLIST32;
typedef HTAPIPHONE *LPHTAPIPHONE;
typedef ITEMIDLIST *LPITEMIDLIST;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
typedef LPNEWCPLINFOA LPNEWCPLINFO;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
typedef WORD *LPPATCHARRAY;
typedef LPSERIALKEYSA LPSERIALKEYS;
typedef LPTEXTMETRICA LPTEXTMETRIC;
typedef VARIANT *LPVARIANTARG;
typedef VDMCONTEXT *LPVDMCONTEXT;
typedef WAVEFILTER *LPWAVEFILTER;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
typedef void ( *LPWSAUSERAPC)(DWORD dwContext);
typedef int ( *LPWSPCLEANUP)(LPINT lpErrno);
typedef MENUITEMINFOA MENUITEMINFO;
typedef MENUTEMPLATEA MENUTEMPLATE;
typedef enum _810BCDBA5BCB17F35A1EBA0E4BF76392 MIDL_ES_CODE;
typedef MIXERCONTROLA MIXERCONTROL;
typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef enum tagMSICONDITION MSICONDITION;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef NETRESOURCE2A NETRESOURCE2;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef WAVEFILTER *NPWAVEFILTER;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef enum _72442BC1633A72B4A848039868482DB7 OLE_TRISTATE;
typedef OPENFILENAMEA OPENFILENAME;
typedef enum __MIDL___MIDL_itf_amstream_0000_0004 OUTPUT_STATE;
typedef PACTRL_AUDITA PACTRL_AUDIT;
typedef DWORD *PADS_INTEGER;
typedef PAGESETUPDLGA PAGESETUPDLG;
typedef CONVCONTEXT *PCONVCONTEXT;
typedef CONVDLLVECT *PCONVDLLVECT;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef HEAPENTRY32 *PHEAPENTRY32;
typedef PHELPWININFOA PHELPWININFO;
typedef PICONMETRICSA PICONMETRICS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef REGISTERWORDA REGISTERWORD;
typedef enum __MIDL___MIDL_itf_mtxspm_0098_0002 ReleaseModes;
typedef SERVICE_INFOA SERVICE_INFO;
typedef enum _SID_NAME_USE SID_NAME_USE;
typedef SOURCE_MEDIA_A SOURCE_MEDIA;
typedef enum tagSTDMSHLFLAGS STDMSHLFLAGS;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0002 STREAM_STATE;
typedef enum _25D95637D5496764A31AF6B682C31248 SVUIA_STATUS;
typedef enum _TRUSTEE_FORM TRUSTEE_FORM;
typedef enum _TRUSTEE_TYPE TRUSTEE_TYPE;
typedef TOKENRING *ULPTOKENRING;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef WORD_BLOB *UP_WORD_BLOB;
typedef int (*XA_START_EPT)(XID *, int, int);
typedef enum xmlelemTYPE XMLELEM_TYPE;
struct _AE_CONNSTOP {DWORD ae_cp_compname;DWORD ae_cp_username;DWORD ae_cp_netname;DWORD ae_cp_connid;DWORD ae_cp_reason;};
struct _AE_NETLOGON {DWORD ae_no_compname;DWORD ae_no_username;DWORD ae_no_privilege;DWORD ae_no_authflags;};
struct _AFPROTOCOLS {INT iAddressFamily;INT iProtocol;};
struct _AUDIT_ENTRY {DWORD ae_len;DWORD ae_reserved;DWORD ae_time;DWORD ae_type;DWORD ae_data_offset;DWORD ae_data_size;};
struct _D3DPrimCaps {DWORD dwSize;DWORD dwMiscCaps;DWORD dwRasterCaps;DWORD dwZCmpCaps;DWORD dwSrcBlendCaps;DWORD dwDestBlendCaps;DWORD dwAlphaCmpCaps;DWORD dwShadeCaps;DWORD dwTextureCaps;DWORD dwTextureFilterCaps;DWORD dwTextureBlendCaps;DWORD dwTextureAddressCaps;DWORD dwStippleWidth;DWORD dwStippleHeight;};
struct _DTBLMVDDLBX {ULONG ulFlags;ULONG ulMVPropTag;};
struct _FILE_INFO_2 {DWORD fi2_id;};
struct _FILTER_INFO {char szTag[52];DWORD filterType;char szName[52];char szValue[52];char szOperator[52];char szArchitecture[52];char szGroupClass[52];char szAttributeName[52];};
struct _IPX_IF_INFO {ULONG AdminState;ULONG NetbiosAccept;ULONG NetbiosDeliver;};
struct _IPX_NETWORK {DWORD N_NetNumber;};
struct _NAME_BUFFER {UCHAR name[16];UCHAR name_num;UCHAR name_flags;};
struct _RIPMIB_BASE {ULONG RIPOperState;};
struct _RIP_IF_INFO {ULONG AdminState;ULONG UpdateMode;ULONG PacketType;ULONG Supply;ULONG Listen;ULONG PeriodicUpdateInterval;ULONG AgeIntervalMultiplier;};
struct _RSVP_POLICY {HANDLE Type;};
struct _RTFSYNCINFO {LONG lBodyCRC;LONG lBodyCount;LONG lPrefixCount;LONG lTrailingCount;char szBodyTag[102];};
struct _SAP_IF_INFO {ULONG AdminState;ULONG UpdateMode;ULONG PacketType;ULONG Supply;ULONG Listen;ULONG GetNearestServerReply;ULONG PeriodicUpdateInterval;ULONG AgeIntervalMultiplier;};
struct _SShortArray {ULONG cValues;short *lpi;};
struct _tagDATAINFO {ULONG ulTotalSize;ULONG ulavrPacketSize;ULONG ulConnectSpeed;ULONG ulProcessorSpeed;};
struct _tagDATETIME {WORD year;WORD month;WORD day;WORD hour;WORD min;WORD sec;};
struct _userHBITMAP {int fContext;union _userHBITMAP____MIDL_IWinTypes_0007 u;};
struct _userHGLOBAL {int fContext;union _userHGLOBAL____MIDL_IWinTypes_0003 u;};
struct sess_overlay {unsigned int sess_entry_len;unsigned int reserv3;unsigned char sess_id[8];unsigned int conv_id;unsigned char lu_alias[8];unsigned char plu_alias[8];unsigned char mode_name[8];unsigned short send_ru_size;unsigned short rcv_ru_size;unsigned char send_pacing_size;unsigned char rcv_pacing_size;unsigned char link_id[12];unsigned char daf;unsigned char oaf;unsigned char odai;unsigned char sess_type;unsigned char conn_type;unsigned char reserv4;FQPCID_OVERLAY fqpcid;unsigned char cgid[4];unsigned char fqlu_name[17];unsigned char fqplu_name[17];unsigned char pacing_type;unsigned char reserv5;};
typedef  smiOCTETS *smiLPCOCTETS;
typedef smiUINT32 *smiLPGAUGE32;
typedef smiUINT32 smiTIMETICKS;
struct srv_listhead {struct srv_listentry *Flink;struct srv_listentry *Blink;int NumListEntries;int NumReadRequest;int MaxQueueLength;int ListLock;HANDLE ListEvent;};
struct srv_loginrec {BYTE lhostname[30];BYTE lhostnlen;BYTE lusername[30];BYTE lusernlen;BYTE lpw[30];BYTE lpwnlen;BYTE lhostproc[8];BYTE lunused[16];BYTE lapptype[6];BYTE lhplen;BYTE lint2;BYTE lint4;BYTE lchar;BYTE lflt;BYTE ldate;BYTE lusedb;BYTE ldmpld;BYTE linterface;BYTE ltype;BYTE spare[7];BYTE lappname[30];BYTE lappnlen;BYTE lservname[30];BYTE lservnlen;BYTE lrempw[255];BYTE lrempwlen;BYTE ltds[4];BYTE lprogname[10];BYTE lprognlen;BYTE lprogvers[4];BYTE lnoshort;BYTE lflt4;BYTE ldate4;BYTE llanguage[30];BYTE llanglen;BYTE lsetlang;short slhier;BYTE slcomp[8];short slspare;BYTE slrole;BYTE lcharset[30];BYTE lcharsetlen;BYTE lsetcharset;BYTE lpacketsize[6];BYTE lpacketsizelen;BYTE ldummy[3];};
struct tagABORTPATH {EMR emr;};
struct tagBIND_OPTS {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;};
struct tagDBSETFUNC {DWORD dwSetQuantifier;};
struct tagEMRFORMAT {DWORD dSignature;DWORD nVersion;DWORD cbData;DWORD offData;};
struct tagPAGERANGE {LONG nFromPage;LONG nToPage;};
struct tagPENPACKET {UINT wTabletX;UINT wTabletY;UINT wPDK;UINT rgwOemData[6];};
struct tagRGBTRIPLE {BYTE rgbtBlue;BYTE rgbtGreen;BYTE rgbtRed;};
struct tagWAPPCDATA {WORD wVersion;char szDescription[128];};
struct tagWCPICDATA {WORD wVersion;char szDescription[128];};
struct timecaps_tag {UINT wPeriodMin;UINT wPeriodMax;};
typedef userHPALETTE *wireHPALETTE;
typedef DWORD ACCESS_MASK;
typedef enum _ACCESS_MODE ACCESS_MODE;
typedef ACTRL_AUDITA ACTRL_AUDIT;
typedef enum __MIDL___MIDL__intf_0000_0001 ADSTYPEENUM;
typedef DWORD ADS_BOOLEAN;
typedef DWORD ADS_INTEGER;
struct API_VERSION {USHORT MajorVersion;USHORT MinorVersion;USHORT Revision;USHORT Reserved;};
typedef enum tagAPPINFOTYPE APPINFOTYPE;
typedef ATM_BHLI ATM_BHLI_IE;
typedef AsnOctetString AsnSequence;
typedef CHOOSECOLORA CHOOSECOLOR;
typedef CMC_uint16 CMC_boolean;
typedef enum _CounterType COUNTERTYPE;
typedef CREATEGIZMOA CREATEGIZMO;
typedef CURRENCYFMTA CURRENCYFMT;
typedef OBJECT ClassObject;
typedef enum _D3DFILLMODE D3DFILLMODE;
typedef enum _2D3643867FFB1094BAAE5460C0765888 DAODATATYPE;
typedef WORD DBCOMMANDOP;
typedef DWORD DBCOMPAREOP;
typedef DWORD DBPROPFLAGS;
typedef DWORD DBROWSTATUS;
typedef DWORD DBVALUEKIND;
typedef DWORD DBWATCHMODE;
struct DIRAMPFORCE {LONG lStart;LONG lEnd;};
typedef UINT DI_FUNCTION;
typedef enum tagDTI_ADTIWUI DTI_ADTIWUI;
typedef enum tagDVD_MENU_ID DVD_MENU_ID;
typedef enum _tagDVD_WARNING DVD_WARNING;
typedef enum _9C39054F312540C7FE42E020DEAACE0C DisplayMode;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef FINDREPLACEA FINDREPLACE;
typedef enum _4491740396E631478E0BF9925CACA2B7 FOLDERFLAGS;
typedef FORM_INFO_1A FORM_INFO_1;
typedef GCP_RESULTSA GCP_RESULTS;
typedef HANDLE HCOMPRESSOR;
typedef HANDLE HCONFNOTIFY;
typedef HELPWININFOA HELPWININFO;
typedef enum __MIDL_IHlink_0002 HLINKGETREF;
typedef enum _HLSHORTCUTF__NOREDEF10 HLSHORTCUTF;
typedef ICONMETRICSA ICONMETRICS;
typedef HANDLE LOCALHANDLE;
typedef  DSCBCAPS *LPCDSCBCAPS;
typedef  MENUINFO *LPCMENUINFO;
typedef  MMCKINFO *LPCMMCKINFO;
typedef  MMIOINFO *LPCMMIOINFO;
typedef COMPONENT *LPCOMPONENT;
typedef  SHITEMID *LPCSHITEMID;
typedef  TBBUTTON *LPCTBBUTTON;
typedef DBDATEREC *LPDBDATEREC;
typedef DPADDRESS *LPDPADDRESS;
typedef SBinaryArray *LPENTRYLIST;
typedef DWORD (*LPFN_NSPAPI)(void);
typedef LPGBGETTEXTA LPGBGETTEXT;
typedef HDRVPHONE *LPHDRVPHONE;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef HPHONEAPP *LPHPHONEAPP;
typedef HPROVIDER *LPHPROVIDER;
typedef HRCRESULT *LPHRCRESULT;
typedef HANDLE *LPHSNMP_PDU;
typedef HANDLE *LPHSNMP_VBL;
typedef HTAPICALL *LPHTAPICALL;
typedef HTAPILINE *LPHTAPILINE;
typedef PLDT_ENTRY LPLDT_ENTRY;
typedef LPMIXERCAPSA LPMIXERCAPS;
typedef LPMIXERLINEA LPMIXERLINE;
typedef GUID *LPNTMS_GUID;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef SAFEARRAY *LPSAFEARRAY;
typedef TOKENRING *LPTOKENRING;
typedef TPMPARAMS *LPTPMPARAMS;
typedef int ( *LPWSPSELECT)(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,  struct timeval *timeout, LPINT lpErrno);
typedef enum _AE317B1E244CA87819BCECF193C2CCE0 LogSeverity;
typedef UINT MCIDEVICEID;
typedef enum _md_action MD_ACTION_T;
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef enum tagMLSTR_FLAGS MLSTR_FLAGS;
typedef enum tagMSICOSTTREE MSICOSTTREE;
typedef NETRESOURCEA NETRESOURCE;
typedef enum _tagOIBDG_FLAGS OIBDG_FLAGS;
typedef enum tagOLELINKBIND OLELINKBIND;
typedef ACE_HEADER *PACE_HEADER;
typedef ADS_STATUSENUM *PADS_STATUS;
typedef enum _tagPARSEACTION PARSEACTION;
typedef COLOR_NAME *PCOLOR_NAME;
typedef PSecHandle PCredHandle;
typedef PSecHandle PCtxtHandle;
typedef DBPROPINFO *PDBPROPINFO;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef enum tagPENDINGTYPE PENDINGTYPE;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef HACMDRIVER *PHACMDRIVER;
typedef HACMSTREAM *PHACMSTREAM;
typedef HEAPLIST32 *PHEAPLIST32;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef KSIDENTIFIER *PKSPROPERTY;
typedef PVOID *PLSA_HANDLE;
typedef enum _MEDIA_TYPE *PMEDIA_TYPE;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef PORT_INFO_1A PORT_INFO_1;
typedef PORT_INFO_2A PORT_INFO_2;
typedef PORT_INFO_3A PORT_INFO_3;
typedef enum _0AEECC1A63E1B2F73D11FBA74082B60B PROXY_PHASE;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef WAVEFILTER *PWAVEFILTER;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef enum _tagQUERYOPTION QUERYOPTION;
typedef HANDLE QUEUEHANDLE;
struct RASCTRYINFO {DWORD dwSize;DWORD dwCountryID;DWORD dwNextCountryID;DWORD dwCountryCode;DWORD dwCountryNameOffset;};
typedef BOOL ( *RCYIELDPROC)();
typedef enum tagSCRIPTSTATE SCRIPTSTATE;
typedef ULONG SERVICETYPE;
typedef GUID SHELLVIEWID;
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef enum _AAF7D8B1D740C4801D49F07692D1E0A1 SQLINTERVAL;
typedef STARTUPINFOA STARTUPINFO;
typedef enum tagSTREAM_SEEK STREAM_SEEK;
typedef LONGLONG STREAM_TIME;
typedef enum __MIDL___MIDL_itf_mmstream_0000_0001 STREAM_TYPE;
typedef enum tagTVAudioMode TVAudioMode;
typedef ETHERNET *ULPETHERNET;
typedef enum tagURLTEMPLATE URLTEMPLATE;
typedef enum _A80082A4D5E6371C89CADA5F555E3D72 VIDEO_SIZES;
typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef WSAQUERYSETA WSAQUERYSET;
typedef enum _XactStatus XACT_STATUS;
typedef enum tagXFORMCOORDS XFORMCOORDS;
struct _AE_CONNREJ {DWORD ae_cr_compname;DWORD ae_cr_username;DWORD ae_cr_netname;DWORD ae_cr_reason;};
struct _AE_GENERIC {DWORD ae_ge_msgfile;DWORD ae_ge_msgnum;DWORD ae_ge_params;DWORD ae_ge_param1;DWORD ae_ge_param2;DWORD ae_ge_param3;DWORD ae_ge_param4;DWORD ae_ge_param5;DWORD ae_ge_param6;DWORD ae_ge_param7;DWORD ae_ge_param8;DWORD ae_ge_param9;};
struct _AE_LOCKOUT {DWORD ae_lk_compname;DWORD ae_lk_username;DWORD ae_lk_action;DWORD ae_lk_bad_pw_count;};
struct _AM_DVD_YUV {UCHAR Reserved;UCHAR Y;UCHAR U;UCHAR V;};
struct _D3DRMIMAGE {int width;int height;int aspectx;int aspecty;int depth;int rgb;int bytes_per_line;void *buffer1;void *buffer2;unsigned int red_mask;unsigned int green_mask;unsigned int blue_mask;unsigned int alpha_mask;int palette_size;D3DRMPALETTEENTRY *palette;};
struct _DDCOLORKEY {DWORD dwColorSpaceLowValue;DWORD dwColorSpaceHighValue;};
struct _DTBLBUTTON {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulPRControl;};
struct _DVD_REGION {UCHAR CopySystem;UCHAR RegionData;UCHAR SystemRegion;UCHAR Reserved;};
struct _IP_NETWORK {DWORD N_NetNumber;DWORD N_NetMask;};
struct _ITEMIDLIST {SHITEMID mkid;};
struct _JOB_INFO_3 {DWORD JobId;DWORD NextJobId;DWORD Reserved;};
struct _MONTHLYDOW {WORD wWhichWeek;WORD rgfDaysOfTheWeek;WORD rgfMonths;};
struct _POINTFLOAT {FLOAT x;FLOAT y;};
struct _SMALL_RECT {SHORT Left;SHORT Top;SHORT Right;SHORT Bottom;};
struct _SRealArray {ULONG cValues;float *lpflt;};
struct _SSortOrder {ULONG ulPropTag;ULONG ulOrder;};
struct _SYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;};
struct _TOKEN_USER {SID_AND_ATTRIBUTES User;};
struct _tagIOSPACE {ULONG Address;ULONG Length;ULONG Data;};
struct dbdatetime4 {USHORT numdays;USHORT nummins;};
struct joyinfo_tag {UINT wXpos;UINT wYpos;UINT wZpos;UINT wButtons;};
typedef smiUINT32 *smiLPCNTR32;
typedef  smiVALUE *smiLPCVALUE;
typedef smiOCTETS *smiLPIPADDR;
typedef smiOCTETS *smiLPOPAQUE;
typedef smiOCTETS smiNSAPADDR;
struct sockaddr_dn {unsigned short sdn_family;unsigned char sdn_flags;unsigned char sdn_objnum;unsigned short sdn_objnamel;char sdn_objname[16];struct dn_naddr sdn_add;};
struct sockaddr_nb {short snb_family;u_short snb_type;char snb_name[16];};
struct srv_pevents {SRV_HANDLER *srv_attention;SRV_HANDLER *srv_connect;SRV_HANDLER *srv_disconnect;SRV_HANDLER *srv_rpc;SRV_HANDLER *srv_language;SRV_HANDLER *srv_start;SRV_HANDLER *srv_stop;SRV_HANDLER *srv_sleep;SRV_HANDLER *srv_restart;SRV_HANDLER *srv_transmgr;SRV_HANDLER *srv_oledb;};
struct tagDBVECTOR {ULONG size;void *ptr;};
struct tagDEVNAMES {WORD wDriverOffset;WORD wDeviceOffset;WORD wOutputOffset;WORD wDefault;};
struct tagINTERVAL {ABSTIME atBegin;ABSTIME atEnd;};
struct tagLINEINFO {USHORT offPC;USHORT iLine;};
struct tagRemBRUSH {unsigned int cbData;byte data[1];};
struct tagWCSVDATA {WORD wVersion;char szDescription[128];};
struct val_context {int valuelen;LPVOID value_context;LPVOID val_buff_ptr;};
typedef userHBITMAP *wireHBITMAP;
typedef userHGLOBAL *wireHGLOBAL;
struct xa_switch_t {char name[32];int flags;int version;int (*xa_open_entry)(char *, int, int);int (*xa_close_entry)(char *, int, int);int (*xa_start_entry)(XID *, int, int);int (*xa_end_entry)(XID *, int, int);int (*xa_rollback_entry)(XID *, int, int);int (*xa_prepare_entry)(XID *, int, int);int (*xa_commit_entry)(XID *, int, int);int (*xa_recover_entry)(XID *, int, int, int);int (*xa_forget_entry)(XID *, int, int);int (*xa_complete_entry)(int *, int *, int, int);};
typedef ADS_STATUSENUM ADS_STATUS;
typedef AsnUnsigned32 AsnGauge32;
typedef enum tagBINDSTATUS BINDSTATUS;
typedef enum tagBINDSTRING BINDSTRING;
typedef enum tagBIND_FLAGS BIND_FLAGS;
typedef enum tagCHANGEKIND CHANGEKIND;
typedef CHOOSEFONTA CHOOSEFONT;
typedef enum tagCHUNKSTATE CHUNKSTATE;
typedef enum __MIDL_ICodeInstall_0001 CIP_STATUS;
typedef WORD CLIPFORMAT;
typedef CONFRECDIRA CONFRECDIR;
typedef PVOID ClassClass;
typedef SecHandle CredHandle;
typedef SecHandle CtxtHandle;
typedef enum _D3DCMPFUNC D3DCMPFUNC;
typedef enum _D3DFOGMODE D3DFOGMODE;
typedef enum _C2DA7626A49A9D2948C6887CBF356963 DAOCOLKIND;
typedef DWORD DBASYNCHOP;
typedef DWORD DBBINDFLAG;
typedef enum tagDBBOOKMARK DBBOOKMARK;
typedef DWORD DBCOSTUNIT;
typedef DWORD DBMEMOWNER;
typedef DWORD DCINFOTYPE;
typedef enum __DEBUGLEVEL DEBUGLEVEL;
struct DIENVELOPE {DWORD dwSize;DWORD dwAttackLevel;DWORD dwAttackTime;DWORD dwFadeLevel;DWORD dwFadeTime;};
typedef DOC_INFO_1A DOC_INFO_1;
typedef DOC_INFO_2A DOC_INFO_2;
typedef DPMSG_GENERIC DPMSG_HOST;
typedef enum tagDVD_DOMAIN DVD_DOMAIN;
typedef EXTLOGFONTA EXTLOGFONT;
typedef enum _632B66A9D7130349A03EF30A1CC9533A FilterType;
typedef PVOID HDEVNOTIFY;
typedef PVOID HSPFILELOG;
typedef HANDLE HTRANSFORM;
typedef enum tagINVOKEKIND INVOKEKIND;
typedef SHORT JAVA_SHORT;
typedef JOB_INFO_1A JOB_INFO_1;
typedef JOB_INFO_2A JOB_INFO_2;
typedef UINT_PTR KSPIN_LOCK;
typedef KSIDENTIFIER KSPROPERTY;
typedef enum _LLC_STATUS LLC_STATUS;
typedef LPAXESLISTA LPAXESLIST;
typedef LPAXISINFOA LPAXISINFO;
typedef  COMPPOS *LPCCOMPPOS;
typedef  DSBCAPS *LPCDSBCAPS;
typedef  DSCCAPS *LPCDSCCAPS;
typedef DWORD *LPCOLORREF;
typedef LPCONFADDRA LPCONFADDR;
typedef CONFDEST *LPCONFDEST;
typedef LPCONFGUIDA LPCONFGUID;
typedef LPCONFINFOA LPCONFINFO;
typedef LPCPINFOEXA LPCPINFOEX;
typedef DWORD *LPD3DCOLOR;
typedef DBBINARY *LPDBBINARY;
typedef DEVNAMES *LPDEVNAMES;
typedef LPDRAGINFOA LPDRAGINFO;
typedef ETHERNET *LPETHERNET;
typedef HDRVCALL *LPHDRVCALL;
typedef HDRVLINE *LPHDRVLINE;
typedef HLBWINFO *LPHLBWINFO;
typedef HLINEAPP *LPHLINEAPP;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HPENDATA *LPHPENDATA;
typedef HWAVEOUT *LPHWAVEOUT;
typedef WORD *LPKEYARRAY;
typedef NMSELCHANGE *LPNMSELECT;
typedef LPOFNOTIFYA LPOFNOTIFY;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef LPPRINTDLGA LPPRINTDLG;
typedef SHITEMID *LPSHITEMID;
typedef STATDATA *LPSTATDATA;
typedef LPSTYLEBUFA LPSTYLEBUF;
typedef LPTVITEMEXA LPTVITEMEX;
typedef LPWNDCLASSA LPWNDCLASS;
typedef DWORD *LPWSAEVENT;
typedef PVOID LSA_HANDLE;
typedef enum _MEDIA_TYPE MEDIA_TYPE;
typedef MIDIINCAPSA MIDIINCAPS;
typedef enum tagMLCONVCHARF MLCONVCHAR;
typedef enum tagMSICOLINFO MSICOLINFO;
typedef enum tagMSIDBERROR MSIDBERROR;
typedef enum tagMSIDBSTATE MSIDBSTATE;
typedef enum tagMSIMESSAGE MSIMESSAGE;
typedef enum tagMSIRUNMODE MSIRUNMODE;
struct NAMEDCOLOR {DWORD dwIndex;};
typedef NEWCPLINFOA NEWCPLINFO;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef NPWNDCLASSA NPWNDCLASS;
typedef OFNOTIFYEXA OFNOTIFYEX;
typedef enum tagOLEDCFLAGS OLEDCFLAGS;
typedef enum tagOLEWHICHMK OLEWHICHMK;
typedef UINT OLE_HANDLE;
typedef WORD PATCHARRAY[128];
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef EDKCNVENV *PEDKCNVENV;
typedef enum tagPENDINGMSG PENDINGMSG;
typedef enum _PeriodType PERIODTYPE;
typedef PFILEPATHS_A PFILEPATHS;
typedef int ( *PGETFMISTR)(UINT, UINT, UINT, char *);
typedef KSIDENTIFIER *PKSDEGRADE;
typedef PMIXERCAPSA PMIXERCAPS;
typedef PMIXERLINEA PMIXERLINE;
typedef SECURITY_INTEGER *PTimeStamp;
typedef ULONGLONG *PULONGLONG;
typedef enum tagREADYSTATE READYSTATE;
typedef enum _reconcilef RECONCILEF;
typedef enum _05FE3C528592B9EC24F3019FCB2598A5 SCALARTYPE;
typedef SERIALKEYSA SERIALKEYS;
typedef enum tagSERVERCALL SERVERCALL;
typedef SHFILEINFOA SHFILEINFO;
typedef enum _53EEC439051CDCA8BFC07626FF271DBE SLGP_FLAGS;
typedef DWORD SMS_STATUS;
typedef enum statustype STATUSTYPE;
typedef enum _B2CD58BB5E151C37D855099D3E2FDD5A STUB_PHASE;
typedef void ( *STUB_THUNK)(PMIDL_STUB_MESSAGE);
typedef TEXTMETRICA TEXTMETRIC;
typedef enum _TOKEN_TYPE TOKEN_TYPE;
struct UDP_HEADER {WORD src_port;WORD dest_port;WORD length;WORD checksum;};
typedef enum _undonameid UNDONAMEID;
typedef enum _URLZONEREG URLZONEREG;
typedef VARIANT VARIANTARG;
typedef enum tagVIEWSTATUS VIEWSTATUS;
typedef WAVEINCAPSA WAVEINCAPS;
typedef WNDCLASSEXA WNDCLASSEX;
typedef int (*XA_END_EPT)(XID *, int, int);
struct _AE_ACCLIM {DWORD ae_al_compname;DWORD ae_al_username;DWORD ae_al_resname;DWORD ae_al_limit;};
struct _AE_ACLMOD {DWORD ae_am_compname;DWORD ae_am_username;DWORD ae_am_resname;DWORD ae_am_action;DWORD ae_am_datalen;};
struct _AE_UASMOD {DWORD ae_um_compname;DWORD ae_um_username;DWORD ae_um_resname;DWORD ae_um_rectype;DWORD ae_um_action;DWORD ae_um_datalen;};
struct _BIN_RANGE {LARGE_INTEGER StartValue;LARGE_INTEGER Length;};
struct _BYTE_BLOB {unsigned int clSize;byte abData[1];};
struct _D3DMATRIX {D3DVALUE _11;D3DVALUE _12;D3DVALUE _13;D3DVALUE _14;D3DVALUE _21;D3DVALUE _22;D3DVALUE _23;D3DVALUE _24;D3DVALUE _31;D3DVALUE _32;D3DVALUE _33;D3DVALUE _34;D3DVALUE _41;D3DVALUE _42;D3DVALUE _43;D3DVALUE _44;};
struct _DTBLDDLBX {ULONG ulFlags;ULONG ulPRDisplayProperty;ULONG ulPRSetProperty;ULONG ulPRTableName;};
struct _DTBLLABEL {ULONG ulbLpszLabelName;ULONG ulFlags;};
struct _LANA_ENUM {UCHAR length;UCHAR lana[255];};
struct _NM_UPDOWN {NMHDR hdr;int iPos;int iDelta;};
struct _OLESTREAM {LPOLESTREAMVTBL lpstbl;};
struct _PROXYLIST {PROXYNODE **ppPNProxy;PROXYNODE **ppPNFailedProxyType;};
struct _RSAPUBKEY {DWORD magic;DWORD bitlen;DWORD pubexp;};
struct _charrange {LONG cpMin;LONG cpMax;};
typedef smiUINT32 smiGAUGE32;
typedef smiINT *smiLPINT32;
struct tagCPLINFO {int idIcon;int idName;int idInfo;LONG lData;};
struct tagHSZPAIR {HSZ hszSvc;HSZ hszTopic;};
struct tagPOINTFX {FIXED x;FIXED y;};
struct tagRGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
struct tag_DVINFO {DWORD dwDVAAuxSrc;DWORD dwDVAAuxCtl;DWORD dwDVAAuxSrc1;DWORD dwDVAAuxCtl1;DWORD dwDVVAuxSrc;DWORD dwDVVAuxCtl;DWORD dwDVReserved[2];};
struct tp_overlay {unsigned int tp_entry_len;unsigned int tp_overlay_len;unsigned short num_conv;unsigned char tp_id[8];unsigned char tp_name[64];unsigned char user_id[10];unsigned int reserv3 : 7;unsigned int loc_or_rem : 1;unsigned int reserv4 : 8;unsigned char lu_alias[8];LUW_ID_OVERLAY luw_id;};
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef enum _AMVP_MODE AMVP_MODE;
typedef AsnOctetString AsnOpaque;
typedef enum __MIDL_IBindStatusCallback_0002 BINDINFOF;
typedef enum tagBINDSPEED BINDSPEED;
typedef enum _BIN_TYPES BIN_TYPES;
typedef CMC_uint32 CMC_flags;
typedef CMC_uint32 CMC_ui_id;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
struct CMYKCOLOR {WORD cyan;WORD magenta;WORD yellow;WORD black;};
typedef enum _B02EA45DA9249FCB81A2A79124C480DE COLORTYPE;
typedef  STRENTRY CSTRENTRY;
typedef  STRTABLE CSTRTABLE;
typedef enum _D3DOPCODE D3DOPCODE;
typedef DWORD DBCOMPARE;
typedef DBNUMERIC DBDECIMAL;
typedef DWORD DBLITERAL;
typedef DWORD DBPARAMIO;
typedef CHAR DESC_CHAR;
struct DIDEVCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwDevType;DWORD dwAxes;DWORD dwButtons;DWORD dwPOVs;DWORD dwFFSamplePeriod;DWORD dwFFMinTimeResolution;DWORD dwFirmwareRevision;DWORD dwHardwareRevision;DWORD dwFFDriverVersion;};
typedef enum tagDVASPECT2 DVASPECT2;
typedef enum _tagDVD_ERROR DVD_ERROR;
typedef ULONGLONG DWORDLONG;
typedef enum _EDKCNVRES EDKCNVRES;
typedef SBinaryArray ENTRYLIST;
typedef INT ERRORCODE;
typedef ULONG FIELDKIND;
typedef FILEPATHS_A FILEPATHS;
typedef ULONG FRAMEKIND;
typedef enum tagFUNCFLAGS FUNCFLAGS;
typedef GBGETTEXTA GBGETTEXT;
typedef DVD_REGISTER GPRMARRAY[16];
struct GRAYCOLOR {WORD gray;};
typedef ULONG HACCESSOR;
typedef LPVOID HFASTFILE;
typedef LPVOID HINTERNET;
typedef enum tagHITRESULT HITRESULT;
typedef HANDLE HJSWINDOW;
typedef enum __MIDL_IHlink_0004 HLINKMISC;
typedef enum __MIDL_IHlink_0005 HLINKSETF;
typedef HANDLE HSEARCHER;
typedef HANDLE HSNMP_PDU;
typedef HANDLE HSNMP_VBL;
struct HiFiCOLOR {BYTE channel[8];};
typedef USHORT JAVA_CHAR;
typedef LONGLONG JAVA_LONG;
typedef KSIDENTIFIER KSDEGRADE;
typedef LONG LCSCSTYPE;
typedef ACTIONS *LPACTIONS;
typedef LPAUXCAPSA LPAUXCAPS;
typedef  DPNAME *LPCDPNAME;
typedef  DSCAPS *LPCDSCAPS;
typedef COMPPOS *LPCOMPPOS;
typedef DWORD *LPCOUNTER;
typedef DDBLTFX *LPDDBLTFX;
typedef DDSCAPS *LPDDSCAPS;
typedef DECIMAL *LPDECIMAL;
typedef LPDEVMODEA LPDEVMODE;
typedef LPDOCINFOA LPDOCINFO;
typedef HACMOBJ *LPHACMOBJ;
typedef HINKSET *LPHINKSET;
typedef HMIDIIN *LPHMIDIIN;
typedef HWAVEIN *LPHWAVEIN;
typedef LPJOYCAPSA LPJOYCAPS;
typedef LPLOGFONTA LPLOGFONT;
typedef LPNMMOUSE LPNMCLICK;
typedef LPNS_INFOA LPNS_INFO;
typedef PROFILE *LPPROFILE;
typedef RGBQUAD *LPRGBQUAD;
typedef VARIANT *LPVARIANT;
typedef enum __MIDL___MIDL_itf_mtxspm_0098_0001 LockModes;
typedef enum tagMIMECONTF MIMECONTF;
typedef MIXERCAPSA MIXERCAPS;
typedef MIXERLINEA MIXERLINE;
typedef enum tagMKREDUCE MKRREDUCE;
typedef UINT MMVERSION;
typedef enum tagMSHLFLAGS MSHLFLAGS;
typedef enum tagMSIMODIFY MSIMODIFY;
typedef ULONG MTS_OBJID;
typedef ULONG MTS_RESID;
typedef NPAUXCAPSA NPAUXCAPS;
typedef NPDEVMODEA NPDEVMODE;
typedef NPJOYCAPSA NPJOYCAPS;
typedef NPLOGFONTA NPLOGFONT;
typedef GUID NTMS_GUID;
typedef NUMBERFMTA NUMBERFMT;
typedef enum tagOLERENDER OLERENDER;
typedef enum tagOLEUPDATE OLEUPDATE;
typedef DWORD OLE_COLOR;
typedef PAXESLISTA PAXESLIST;
typedef PAXISINFOA PAXISINFO;
typedef CONVINFO *PCONVINFO;
typedef FLOAT128 *PFLOAT128;
typedef ICONINFO *PICONINFO;
typedef KSIDENTIFIER *PKSMETHOD;
typedef LONGLONG *PLONGLONG;
typedef LONG *PNTSTATUS;
typedef PPOLYTEXTA PPOLYTEXT;
typedef enum __MIDL_IPrint_0001 PRINTFLAG;
typedef PSTYLEBUFA PSTYLEBUF;
typedef enum _tagPSUACTION PSUACTION;
typedef TIMECODE *PTIMECODE;
typedef PTRUSTEE_A PTRUSTEE_;
typedef PWNDCLASSA PWNDCLASS;
typedef enum _96F7A58B68CC258820CDC3DFD29FE008 PropIndex;
struct RASIPADDR {BYTE a;BYTE b;BYTE c;BYTE d;};
typedef HANDLE SC_HANDLE;
typedef enum _310FDAB998881B9ADB132AD59C696495 SLR_FLAGS;
typedef DVD_REGISTER SPRMARRAY[24];
typedef SQLSMALLINT SQLRETURN;
typedef uSTGMEDIUM STGMEDIUM;
typedef enum __MIDL_IInternetSecurityManager_0002 SZM_FLAGS;
typedef enum tagTYPEFLAGS TYPEFLAGS;
typedef SECURITY_INTEGER TimeStamp;
typedef enum _2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;
struct _ABCFLOAT {FLOAT abcfA;FLOAT abcfB;FLOAT abcfC;};
struct _AMVPSIZE {DWORD dwWidth;DWORD dwHeight;};
struct _D3DPOINT {WORD wCount;WORD wFirst;};
struct _D3DRMBOX {D3DVECTOR min;D3DVECTOR max;};
struct _D3DRMRAY {D3DVECTOR dvDir;D3DVECTOR dvPos;};
struct _D3DSTATS {DWORD dwSize;DWORD dwTrianglesDrawn;DWORD dwLinesDrawn;DWORD dwPointsDrawn;DWORD dwSpansDrawn;DWORD dwVerticesProcessed;};
struct _DSCBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;};
struct _DTBLEDIT {ULONG ulbLpszCharsAllowed;ULONG ulFlags;ULONG ulNumCharsAllowed;ULONG ulPropTag;};
struct _DTBLPAGE {ULONG ulbLpszLabel;ULONG ulFlags;ULONG ulbLpszComponent;ULONG ulContext;};
struct _FILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
struct _PORT_DEF {ULONG Addr;ULONG Len;};
struct _RIP_INFO {DWORD dwError;DWORD dwType;};
struct _flaglist {ULONG cFlags;ULONG ulFlag[1];};
struct _heapinfo {int *_pentry;size_t _size;int _useflag;};
struct dbdaterec {INT year;INT quarter;INT month;INT dayofyear;INT day;INT week;INT weekday;INT hour;INT minute;INT second;INT millisecond;};
struct dbnumeric {BYTE precision;BYTE scale;BYTE sign;BYTE val[16];};
struct l_timeval {LONG tv_sec;LONG tv_usec;};
typedef smiUINT32 smiCNTR32;
typedef smiOCTETS smiIPADDR;
typedef smiOCTETS *smiLPBITS;
typedef  smiOID *smiLPCOID;
typedef smiOCTETS smiOPAQUE;
struct sockproto {u_short sp_family;u_short sp_protocol;};
struct tagCIEXYZ {FXPT2DOT30 ciexyzX;FXPT2DOT30 ciexyzY;FXPT2DOT30 ciexyzZ;};
struct tagDBTIME {USHORT hour;USHORT minute;USHORT second;};
struct tagPANOSE {BYTE bFamilyType;BYTE bSerifStyle;BYTE bWeight;BYTE bProportion;BYTE bContrast;BYTE bStrokeVariation;BYTE bArmStyle;BYTE bLetterform;BYTE bMidline;BYTE bXHeight;};
struct tagPOINTF {FLOAT x;FLOAT y;};
struct tagPOINTS {SHORT x;SHORT y;};
typedef unsigned short wctrans_t;
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef enum _29DA7B98C2E2CB34CDBF24D85A286AD2 AAL_TYPE;
typedef AXESLISTA AXESLIST;
typedef AXISINFOA AXISINFO;
typedef enum _9F310CE5EA53A2C70140B86ECB915AA4 BASETYPE;
typedef enum __MIDL_IBindStatusCallback_0001 BINDVERB;
typedef enum _205964628A8ECFF8E361C7538BE987D4 BMFORMAT;
typedef ULONG BOOKMARK;
typedef enum tagCALLCONV CALLCONV;
typedef enum tagCALLTYPE CALLTYPE;
typedef CMC_sint32 CMC_enum;
typedef DWORD COLORREF;
typedef CONFADDRA CONFADDR;
typedef CONFGUIDA CONFGUID;
typedef CONFINFOA CONFINFO;
typedef CPINFOEXA CPINFOEX;
typedef enum tagCTRLINFO CTRLINFO;
typedef CY CURRENCY;
typedef enum _D3DBLEND D3DBLEND;
typedef DWORD D3DCOLOR;
typedef LONG D3DFIXED;
typedef DWORD DBPROPID;
typedef DWORD DBREASON;
typedef DWORD DBSTATUS;
typedef enum tagDESCKIND DESCKIND;
typedef DRAGINFOA DRAGINFO;
typedef enum _DtcLu_Xln DTCLUXLN;
typedef enum tagDVASPECT DVASPECT;
typedef enum _A53018422640A123E20F3CC4D8AD31A0 FD_FLAGS;
typedef enum tagFUNCKIND FUNCKIND;
typedef enum tagGUIDKIND GUIDKIND;
typedef ULONG HCHAPTER;
typedef PVOID HDEVINFO;
typedef HANDLE HDRAWDIB;
typedef DWORD HELPPOLY;
typedef HANDLE HFLDMTRC;
typedef HANDLE HHILITER;
typedef enum __MIDL_IHlink_0003 HLFNAMEF;
typedef HANDLE HPROFILE;
typedef DWORD HREFTYPE;
typedef PVOID HSPFILEQ;
typedef LONG ISOLEVEL;
typedef LONG JAVA_INT;
typedef WORD KEYARRAY[128];
typedef KSIDENTIFIER KSMETHOD;
typedef enum tagLIBFLAGS LIBFLAGS;
typedef enum tagLOCKTYPE LOCKTYPE;
typedef CIEXYZ *LPCIEXYZ;
typedef  RECTL *LPCRECTL;
typedef DDCAPS *LPDDCAPS;
typedef HANDLE *LPHANDLE;
typedef HLITEM *LPHLITEM;
typedef HMIXER *LPHMIXER;
typedef HPHONE *LPHPHONE;
typedef HVIDEO *LPHVIDEO;
typedef LPIMEPROA LPIMEPRO;
typedef LPVOID *LPLPVOID;
typedef USHORT *LPUSHORT;
struct LabCOLOR {WORD L;WORD a;WORD b;};
typedef MAPIINIT_0 MAPIINIT;
typedef DWORD MCIERROR;
typedef UINT MMRESULT;
typedef NMSELCHANGE NMSELECT;
typedef NPIMEPROA NPIMEPRO;
typedef LONG NTSTATUS;
typedef OFNOTIFYA OFNOTIFY;
typedef enum tagOLECLOSE OLECLOSE;
typedef enum tagOLECONTF OLECONTF;
typedef void ( *PAPCFUNC)(DWORD dwParam);
typedef PAUXCAPSA PAUXCAPS;
typedef CONTEXT *PCONTEXT;
typedef PDEVMODEA PDEVMODE;
typedef HACMOBJ *PHACMOBJ;
typedef HSZPAIR *PHSZPAIR;
typedef enum _tagPI_FLAGS PI_FLAGS;
typedef PJOYCAPSA PJOYCAPS;
typedef KSIDENTIFIER *PKSEVENT;
typedef enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A *PKSSTATE;
typedef PLOGFONTA PLOGFONT;
typedef PNS_INFOA PNS_INFO;
typedef POLYTEXTA POLYTEXT;
typedef PROFILE *PPROFILE;
typedef PRINTDLGA PRINTDLG;
typedef INT_PTR *PSSIZE_T;
typedef PTRUSTEEA PTRUSTEE;
typedef  GUID * REFCATID;
typedef  GUID * REFMSPID;
typedef DWORD RESTYPID;
struct RGBCOLOR {WORD red;WORD green;WORD blue;};
typedef unsigned short RPC_CHAR;
typedef enum tagSAVEOPTS SAVEOPTS;
typedef CHAR SEC_CHAR;
struct SLI_OPEN {unsigned char lua_init_type;unsigned char lua_resv65;unsigned short lua_wait;struct LUA_EXT_ENTRY lua_open_extension[3];unsigned char lua_ending_delim;};
typedef CHAR SNCHARRU[268];
typedef HANDLE *SPHANDLE;
typedef SQLHANDLE SQLHDESC;
typedef SQLHANDLE SQLHSTMT;
typedef SQLCHAR SQLTCHAR;
typedef unsigned short SQLWCHAR;
typedef enum tagSTATFLAG STATFLAG;
typedef STYLEBUFA STYLEBUF;
typedef enum _B7D1CDF80B7CC72DADF079F75B7264FC SYM_TYPE;
typedef enum _TASKPAGE TASKPAGE;
typedef enum tagTextMode TEXTMODE;
typedef TRUSTEE_A TRUSTEE_;
typedef TVITEMEXA TVITEMEX;
typedef enum tagTYPEKIND TYPEKIND;
typedef enum tagUASFLAGS UASFLAGS;
typedef FRAME *ULPFRAME;
typedef enum tagVARFLAGS VARFLAGS;
typedef WNDCLASSA WNDCLASS;
typedef DWORD WSAEVENT;
struct XYZCOLOR {WORD X;WORD Y;WORD Z;};
struct YxyCOLOR {WORD Y;WORD x;WORD y;};
struct _COMSTAT {unsigned int fCtsHold : 1;unsigned int fDsrHold : 1;unsigned int fRlsdHold : 1;unsigned int fXoffHold : 1;unsigned int fXoffSent : 1;unsigned int fEof : 1;unsigned int fTxim : 1;unsigned int fReserved : 25;DWORD cbInQue;DWORD cbOutQue;};
struct _D3DSPAN {WORD wCount;WORD wFirst;};
struct _DDSCAPS {DWORD dwCaps;};
struct _DSBCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwUnlockTransferRate;DWORD dwPlayCpuOverhead;};
struct _DSCCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwFormats;DWORD dwChannels;};
struct _DTBLLBX {ULONG ulFlags;ULONG ulPRSetProperty;ULONG ulPRTableName;};
struct _GENERIC {DATASOURCE_TYPE ds;};
struct _IDEREGS {BYTE bFeaturesReg;BYTE bSectorCountReg;BYTE bSectorNumberReg;BYTE bCylLowReg;BYTE bCylHighReg;BYTE bDriveHeadReg;BYTE bCommandReg;BYTE bReserved;};
struct _MAPIUID {BYTE ab[16];};
struct _RGNDATA {RGNDATAHEADER rdh;char Buffer[1];};
struct _UDACCEL {UINT nSec;UINT nInc;};
struct _utimbuf {time_t actime;time_t modtime;};
typedef RPC_BINDING_HANDLE handle_t;
struct in_addr6 {u_char s6_addr[16];};
typedef smiINT smiINT32;
struct sockaddr {u_short sa_family;char sa_data[14];};
struct srv_rpcp {BYTE len;BYTE *rpc_name;BYTE status;unsigned int user_type;BYTE type;unsigned int maxlen;unsigned int actual_len;void *value;};
struct tagCADBL {ULONG cElems;double *pElems;};
struct tagCAFLT {ULONG cElems;float *pElems;};
struct tagPOINT {LONG x;LONG y;};
struct tagXFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;};
struct tedalert {UCHAR dalrtnam[53];UCHAR daparam1[33];UCHAR daparam2[33];UCHAR daparam3[33];};
struct tpstmhdr {CHAR rtmstat;CHAR strbndry;CHAR strcount;CHAR strtmdef;CHAR strtmact;CHAR strtmdsp;};
typedef unsigned short wctype_t;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef RemotableHandle *wireHWND;
typedef enum _DE28C8B50B885D0E6AD38427B3595C81 ACTTYPE;
typedef ADSTYPEENUM ADSTYPE;
typedef DWORD AM_Step;
typedef AUXCAPSA AUXCAPS;
typedef AsnOctetString AsnBits;
typedef BYTE BOOLEAN;
typedef DWORD CALTYPE;
typedef USHORT COLOR16;
typedef DWORD CONFERR;
typedef DWORD COUNTER;
typedef enum _D3DCULL D3DCULL;
typedef enum tagDATADIR DATADIR;
typedef DWORD DBRANGE;
typedef UINT DBUBOOL;
typedef DEVMODEA DEVMODE;
typedef DOCINFOA DOCINFO;
typedef enum __MIDL_IOleDocument_0001 DOCMISC;
typedef enum epgview EPGVIEW;
typedef enum tagEXTCONN EXTCONN;
typedef LONGLONG GROUPID;
typedef BUFFER *HBUFFER;
typedef HICON HCURSOR;
typedef PVOID HDSKSPC;
typedef ULONG HFRMREG;
typedef HANDLE HGLOBAL;
typedef HINSTANCE HMODULE;
typedef Hjava_lang_Object HObject;
typedef LONG HRESULT;
typedef WORD HSOURCE;
typedef Hjava_lang_Object *JAVAARG;
typedef Hjava_lang_Object JHandle;
typedef JOYCAPSA JOYCAPS;
typedef KSIDENTIFIER KSEVENT;
typedef enum _D64CEF8F52066C406CD4BA6573420261 KSRESET;
typedef enum _B4EFCEC8C68CF8B596CEF68A8AD15C1A KSSTATE;
typedef LOGFONTA LOGFONT;
typedef BSTRA *LPBSTRA;
typedef  GUID *LPCGUID;
typedef COLOR *LPCOLOR;
typedef  RECT *LPCRECT;
typedef DBINT *LPDBINT;
typedef DWORD *LPDWORD;
typedef FRAME *LPFRAME;
typedef HCALL *LPHCALL;
typedef HICON *LPHICON;
typedef HLINE *LPHLINE;
typedef HMIDI *LPHMIDI;
typedef NMHDR *LPNMHDR;
typedef SIZE *LPSIZEL;
typedef ULONG *LPULONG;
typedef LONG LRESULT;
typedef enum _tagMethods METHODS;
typedef NMMOUSE NMCLICK;
typedef NS_INFOA NS_INFO;
typedef enum tagOLEMISC OLEMISC;
typedef LOGBRUSH PATTERN;
typedef HANDLE *PHANDLE;
typedef PIMEPROA PIMEPRO;
typedef NT_TIB *PNT_TIB;
typedef PPVALUEA PPVALUE;
typedef UINT_PTR *PSIZE_T;
typedef USHORT *PUSHORT;
typedef PVALENTA PVALENT;
typedef enum tagREGKIND REGKIND;
typedef LPVOID SC_LOCK;
typedef enum tagSF_TYPE SF_TYPE;
typedef enum tagSHCONTF SHCONTF;
typedef GUID SQLGUID;
typedef SQLHANDLE SQLHDBC;
typedef SQLHANDLE SQLHENV;
typedef HWND SQLHWND;
typedef enum _SRVINFO SRVINFO;
typedef INT_PTR SSIZE_T;
typedef enum tagSTGMOVE STGMOVE;
typedef enum tagSYSKIND SYSKIND;
typedef DWORD TAGTYPE;
typedef DWORD TRANSID;
typedef TRUSTEEA TRUSTEE;
typedef FDDI *ULPFDDI;
typedef enum tagURLZONE URLZONE;
typedef enum tagVARKIND VARKIND;
struct WSAData {WORD wVersion;WORD wHighVersion;char szDescription[257];char szSystemStatus[129];unsigned short iMaxSockets;unsigned short iMaxUdpDg;char *lpVendorInfo;};
struct XACTOPT {ULONG ulTimeout;unsigned char szDescription[40];};
typedef enum __MIDL_IInternetZoneManager_0002 ZAFLAGS;
struct _DSCAPS {DWORD dwSize;DWORD dwFlags;DWORD dwMinSecondarySampleRate;DWORD dwMaxSecondarySampleRate;DWORD dwPrimaryBuffers;DWORD dwMaxHwMixingAllBuffers;DWORD dwMaxHwMixingStaticBuffers;DWORD dwMaxHwMixingStreamingBuffers;DWORD dwFreeHwMixingAllBuffers;DWORD dwFreeHwMixingStaticBuffers;DWORD dwFreeHwMixingStreamingBuffers;DWORD dwMaxHw3DAllBuffers;DWORD dwMaxHw3DStaticBuffers;DWORD dwMaxHw3DStreamingBuffers;DWORD dwFreeHw3DAllBuffers;DWORD dwFreeHw3DStaticBuffers;DWORD dwFreeHw3DStreamingBuffers;DWORD dwTotalHwMemBytes;DWORD dwFreeHwMemBytes;DWORD dwMaxContigFreeHwMemBytes;DWORD dwUnlockTransferRateHwBuffers;DWORD dwPlayCpuOverheadSwBuffers;DWORD dwReserved1;DWORD dwReserved2;};
struct _KDHELP {DWORD Thread;DWORD ThCallbackStack;DWORD NextCallback;DWORD FramePointer;DWORD KiCallUserMode;DWORD KeUserCallbackDispatcher;DWORD SystemRangeStart;};
struct _POINTL {LONG x;LONG y;};
struct _PUBKEY {DWORD magic;DWORD bitlen;};
struct _WEEKLY {WORD WeeksInterval;WORD rgfDaysOfTheWeek;};
struct _WSABUF {u_long len;char *buf;};
typedef unsigned short _Wint_t;
typedef smiOCTETS smiBITS;
struct tagCAUB {ULONG cElems;unsigned char *pElems;};
struct tagCAUL {ULONG cElems;ULONG *pElems;};
struct tagCRGB {BYTE bRed;BYTE bGreen;BYTE bBlue;BYTE bExtra;};
struct tagRECT {LONG left;LONG top;LONG right;LONG bottom;};
struct tagSIZE {LONG cx;LONG cy;};
struct utimbuf {time_t actime;time_t modtime;};
typedef RemotableHandle *wireHDC;
typedef RemSNB *wireSNB;
typedef enum tagCLSCTX CLSCTX;
typedef enum tagCOINIT COINIT;
typedef DWORD DBKIND;
typedef DWORD DBPART;
typedef DBFLT4 DBREAL;
typedef DWORD DBSEEK;
typedef DWORD DBSORT;
typedef WORD DBTYPE;
typedef LONG DISPID;
typedef DWORD FOURCC;
typedef WORD FSHORT;
typedef HANDLE HINDEX;
typedef HANDLE HLOCAL;
typedef HANDLE HUSKEY;
typedef IMEPROA IMEPRO;
typedef DWORD INSTID;
typedef ULONG IPADDR;
typedef WORD LANGID;
typedef DWORD LCTYPE;
typedef LONG LPARAM;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef  LPINT LPCINT;
typedef  CHAR *LPCSTR;
typedef DESC_CHAR *LPDESC;
typedef DWORD *LPDPID;
typedef FDDI *LPFDDI;
typedef GUID *LPGUID;
typedef LIST *LPLIST;
typedef UINT *LPUINT;
typedef WORD *LPWORD;
typedef enum tagMEMCTX MEMCTX;
typedef enum tagMSHCTX MSHCTX;
typedef COLOR *PCOLOR;
typedef DWORD *PDWORD;
typedef FLOAT *PFLOAT;
typedef ULONG PROPID;
typedef SHORT *PSHORT;
typedef SIZE *PSIZEL;
typedef UCHAR *PUCHAR;
typedef ULONG *PULONG;
typedef PVALUEA PVALUE;
typedef enum tagREGCLS REGCLS;
typedef ACCESS_MASK REGSAM;
typedef DWORD RIGHTS;
typedef RPC_CHAR *RPC_SZ;
typedef UINT_PTR SIZE_T;
typedef u_int SOCKET;
typedef DWORD THREAD;
typedef enum tagTYSPEC TYSPEC;
typedef LLC *ULPLLC;
typedef VALENTA VALENT;
typedef UINT WPARAM;
struct _COORD {SHORT X;SHORT Y;};
struct _DAILY {WORD DaysInterval;};
struct _FIXED {WORD fract;short value;};
struct _RECTL {LONG left;LONG top;LONG right;LONG bottom;};
struct _timeb {time_t time;unsigned short millitm;short timezone;short dstflag;};
typedef BOOL bool_t;
struct linger {u_short l_onoff;u_short l_linger;};
struct netent {char *n_name;char **n_aliases;short n_addrtype;u_long n_net;};
struct tagCAI {ULONG cElems;short *pElems;};
struct tagCAL {ULONG cElems;int *pElems;};
struct tagEMR {DWORD iType;DWORD nSize;};
typedef unsigned short wint_t;
typedef enum _8F00D86C453A25D588E012916CBB9FA9 ANDOR;
typedef GUID APPID;
typedef BYTE BCHAR;
typedef enum __MIDL_IBindStatusCallback_0003 BINDF;
typedef DWORD CALID;
typedef GUID CATID;
typedef enum CLUSTER_GROUP_AUTOFAILBACK_TYPE CGAFT;
typedef GUID CLSID;
typedef BYTE FCHAR;
typedef ULONG FLAGS;
typedef DWORD FLONG;
typedef GUID FMTID;
typedef HANDLE HCONF;
typedef LPVOID HCONN;
typedef DWORD HPORT;
typedef  CHAR *LPCCH;
typedef HKL *LPHKL;
typedef HRC *LPHRC;
typedef HWL *LPHWL;
typedef LLC *LPLLC;
typedef LPVOID LPOEM;
typedef CHAR *LPSTR;
typedef LPSTR LPTCH;
typedef enum tagMKSYS MKSYS;
typedef enum _msg MSG_T;
typedef GUID MSPID;
typedef CHAR *NPSTR;
typedef BOOL *PBOOL;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef  CHAR *PCSTR;
typedef HKEY *PHKEY;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LPSTR PTSTR;
typedef WORD *PWORD;
typedef LIST QUEUE;
typedef DWORD RESID;
typedef LONG SCODE;
typedef enum tagSHGDN SHGNO;
typedef SIZE SIZEL;
typedef enum tagSTGTY STGTY;
typedef enum _3D835074FED48FDAAF4B1ED4A0224C0A State;
typedef WORD TWOCC;
typedef enum tagTYMED TYMED;
typedef unsigned short WCHAR;
typedef DWORD XTYPE;
struct _FDDI {BYTE FrameCtrl;BYTE DstAddr[6];BYTE SrcAddr[6];BYTE Info[];};
struct _HLOG {DWORD time;DWORD last_flags;DWORD offset;DWORD rec_offset;};
struct _LINK {LPLINK PrevLink;LPLINK NextLink;};
struct _MAT2 {FIXED eM11;FIXED eM12;FIXED eM21;FIXED eM22;};
struct _msEH {DWORD unk;void ( *FilterProc)();void ( *ExitProc)();};
struct timeb {time_t time;unsigned short millitm;short timezone;short dstflag;};
typedef enum tagADVF ADVF;
typedef WORD ATOM;
typedef WORD ATYP;
struct BOID {byte rgb[16];};
typedef enum __MIDL_IBindStatusCallback_0004 BSCF;
typedef enum CLUSTER_RESOURCE_RESTART_ACTION CRRA;
typedef DWORD DPID;
typedef HANDLE HDWP;
typedef PVOID HINF;
typedef enum __MIDL_IHlink_0001 HLNF;
typedef enum _HLSR_NOREDEF10 HLSR;
typedef ULONG HROW;
typedef DWORD LCID;
typedef CHAR *LPCH;
typedef CY *LPCY;
typedef ACL *PACL;
typedef  CHAR *PCCH;
typedef FTG *PFTG;
typedef PVOID PSID;
typedef CHAR *PSTR;
typedef LPSTR PTCH;
typedef enum __MIDL_IInternetSecurityManager_0001 PUAF;
typedef WCHAR *PWCH;
typedef enum tagSTGC STGC;
typedef GUID UUID;
struct _ABC {int abcA;UINT abcB;int abcC;};
struct _IDA {UINT cidl;UINT aoffset[1];};
struct _dtr {WORD wYear;WORD wMonth;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wDayOfWeek;};
struct _trp {WORD trpid;WORD cbgrtrp;WORD cch;WORD cbRgb;};
typedef LONG ALC;
typedef TCHAR BFT;
typedef DWORD ERR;
typedef UINT HKP;
typedef GUID IID;
typedef CHAR *PCH;
typedef LONG SYV;
typedef LONGLONG USN;
typedef enum _ec EC;
typedef enum _rc RC;
typedef LONG C;
struct __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___209C0FF5F0640AAD819CD18287CEBBF4 {ULONG cPins; REGFILTERPINS *rgPins;};
struct __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___69BA54E60E080FF0D431A75B0D38E6E2 {ULONG cPins2; REGFILTERPINS2 *rgPins2;};
union CLUS_RESOURCE_CLASS_INFO______40830167533866F3F54C93CEFD5163C1___80588CB7E6A8241175BA3655013B14BD {DWORD dw;CLUSTER_RESOURCE_CLASS rc;};
union _FILESYSTEM_STATISTICS______AE95DDE6C9C27FBF24E5C6B187468200___C3FF8AB90952EAB5EEBF3A16E3DE958E {NTFS_STATISTICS Ntfs;FAT_STATISTICS Fat;};
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 {DWORD cbBuf;LPVOID pBuf;};
struct CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F___40830167533866F3F54C93CEFD5163C1 {CLUS_RESOURCE_CLASS_INFO______40830167533866F3F54C93CEFD5163C1___80588CB7E6A8241175BA3655013B14BD __anonymous0;DWORD SubClass;};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 {WORD Dimension[4];};
struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 {WORD SubstituteNameOffset;WORD SubstituteNameLength;WORD PrintNameOffset;WORD PrintNameLength;WCHAR PathBuffer[1];};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___29E668CDF699B04E5534A451C956F19F {DWORD dwAddressID;LINEAGENTSTATUS AgentStatus;};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___2AC1A0508EF9BCBABE5AC960F9ACD9BD {DWORD dwAddressID;LINEAGENTCAPS AgentCaps;};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___89D0EED50E7EB6AF2A3CF195F6B324D9 {DWORD dwAddressID;LINEAGENTACTIVITYLIST ActivityList;};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___AC895D76FEB8AD7CCBA57D090D995565 {DWORD dwAddressID;LINEAGENTGROUPLIST GroupList;};
struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___EE8F0E8E6B4392040B096A0A18F796A4 {DWORD dwAddressID;DWORD dwAgentExtensionIDIndex;DWORD dwSize;BYTE Params[1];};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 {HANDLE hMem;DWORD dwReserved[3];};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F {DWORD dwCommittedSize;DWORD dwUnCommittedSize;LPVOID lpFirstBlock;LPVOID lpLastBlock;};
struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___3CE44E73086180F89031D1BB35ED5A26 {STORAGE_MEDIA_TYPE MediaType;DWORD MediaCharacteristics;DWORD CurrentBlockSize;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 {struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 Function;struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 Array;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 {struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 LnSz;DWORD TotalSize;};
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456 {HWND hWnd;UINT Msg;};
struct _KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67___699DD847B0F9C515D4C82B3BB6B28060 {HANDLE Event;ULONG Reserved;};
struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 {HBITMAP hbitmap;HPALETTE hpal;};
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___4E360FE05B55FC1B7DE1F318AE520C50 {ULONG cbStoreEntryId;LPENTRYID lpStoreEntryId;ULONG cbFldEntryId;LPENTRYID lpFldEntryId;};
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___6D0E5E48C7AAB79E1BA653B8A7C28F8A {ULONG cbData;BYTE *pbData;};
struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___2186F38D6E36B45FD2D7B53ADC765B0A {INTEGER B03;INTEGER B04;CHAR B05;CHAR B06;};
struct ____446F191665B55C76FC203DCA446CB75E___CED17800A94116C6709D31E7721A19C6 {USHORT usStationId;USHORT usDlcStatusCode;UCHAR uchFrmrData[5];UCHAR uchAccessPritority;UCHAR uchRemoteNodeAddress[6];UCHAR uchRemoteSap;UCHAR uchReserved;USHORT usUserStatusValue;};
union __MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899 {__MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___209C0FF5F0640AAD819CD18287CEBBF4 __anonymous0;__MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899___69BA54E60E080FF0D431A75B0D38E6E2 __anonymous1;};
struct _5AC28848A8A0188E71C0B88AB8CF796B___33A5881EA3D20175AF6F6CBC82269B7B {ULONG FormatSize;ULONG Flags;ULONG SampleSize;ULONG Reserved;GUID MajorFormat;GUID SubFormat;GUID Specifier;};
struct _644E466E06576D194C6182F3C91B6C45___A8864017B88463FEDB093277956EAB61 {USHORT Network;UCHAR Node;UCHAR Socket;};
union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344 {AAL5_PARAMETERS AAL5Parameters;AALUSER_PARAMETERS AALUserParameters;};
struct _AABF73CB38EC495F6AFFF3108991DB2A___2194BC531F59466BE42B702B8A5EF68B {LLC_ADAPTER_LOG Adapter;LLC_DIRECT_LOG Dir;};
struct _CEB0288F8947EE21048823F466ABF866___8DB12206A787E12F5CB68E9C5F8D04FA {GUID Set;ULONG Id;ULONG Flags;};
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F {SCARD_T0_COMMAND CmdBytes;BYTE rgbHeader[5];};
union _F10EAF12E46EBA994735C587F3E497C7___3711B978F6157F59598EFB5D0B22300D {HRESULT resHR;DWORD resDWORD;double resDouble;};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29 {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous0;};
union _IPX_STATIC_NETBIOS_NAME_INFO___78CE80410E7D5482A942DBDEECB6BC55 {ULONG DwordAlign;UCHAR Name[16];};
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B {PVOID64 AllocationBase;ULONGLONG AllocationBaseAsUlongLong;};
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 {PVOID64 BaseAddress;ULONGLONG BaseAddressAsUlongLong;};
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 {DWORD adwData[2];struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 Data;};
union CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F {CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F___40830167533866F3F54C93CEFD5163C1 __anonymous0;ULARGE_INTEGER li;};
union _SAP_SERVICE_FILTER_INFO___C22F3CB86C059B621E49F8C990C080A4 {USHORT ServiceType;ULONG ServiceType_align;};
union _IPX_STATIC_ROUTE_INFO___55A506EDD8AAD14FACDD6C3120B03F69 {ULONG DwordAlign;UCHAR Network[4];};
union tagSQL_INTERVAL_STRUCT___E0CBF60BBC76AAAF9CF29F3CBADF463C {SQL_YEAR_MONTH_STRUCT year_month;SQL_DAY_SECOND_STRUCT day_second;};
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A {_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 __anonymous0;BYTE ExtendedInfo[48];};
union _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45 {struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 SymbolicLinkReparseBuffer;struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7CB387C99F4666818691833AAAAC9E81 MountPointReparseBuffer;struct _REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F {HWND hwndOwner;DWORD cMultipleItems;};
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 {struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 Block;struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F Region;};
union tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E {TVITEMEXA itemex;TVITEMA item;};
union tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872 {TVITEMEXW itemex;TVITEMW item;};
union CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09 {CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09___857958BF799C2928E4122E1E6ECCA6A2 __anonymous0;DWORD dw;};
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C {HBITMAP hbmWatermark;LPCSTR pszbmWatermark;};
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 {HBITMAP hbmHeader;LPCSTR pszbmHeader;};
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 {UINT nStartPage;LPCSTR pStartPage;};
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 {LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE *phpage;};
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 {LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE *phpage;};
struct RAS_PARAMS_VALUE___3E41164A919764C5D03D915E312E931F {DWORD Length;PCHAR Data;};
union _CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E {AD_GUARANTEED Guaranteed;PARAM_BUFFER ParamBuffer[1];};
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 {DWORD dwValue;ALG_ID Algid;DWORD dwLength;};
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 {handle_t *pAutoHandle;handle_t *pPrimitiveHandle;PGENERIC_BINDING_INFO pGenericBindingInfo;};
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 {LPCSTR pszTemplate;LPCDLGTEMPLATE pResource;};
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union tagODBC_VS_ARGS___0C8F0D999772A4985FC9E94A4859820E {WCHAR *wszArg;CHAR *szArg;};
union tagODBC_VS_ARGS___8B886DFCDC4562487DC12D65EA88126B {WCHAR *wszCorrelation;CHAR *szCorrelation;};
union _DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B {LONG lPitch;DWORD dwLinearSize;};
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E {DWORD LowPart;LONG HighPart;};
union _RTM_IPX_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7 {FILETIME RR_TimeStamp;DWORD RR_TimeStampAlign;};
union _RTM_IPX_ROUTE___699C5E920C4F94118D3CA0585219D565 {PROTOCOL_SPECIFIC_DATA RR_ProtocolSpecificData;DWORD RR_ProtocolSpecificDataAlign;};
union _RTM_IPX_ROUTE___84BE75615039A1B539474E75E854ADAC {IPX_SPECIFIC_DATA RR_FamilySpecificData;DWORD RR_FamilySpecificDataAlign;};
union _RTM_IPX_ROUTE___85E7B8B11946BA927F63B847A2BF5F33 {IPX_NEXT_HOP_ADDRESS RR_NextHopAddress;DWORD RR_NextHopAddressAlign;};
union _RTM_IPX_ROUTE___95FE7FC4F53A272F19648AD0B352E2FC {IPX_NETWORK RR_Network;DWORD RR_NetworkAlign;};
union DelayLoadProc___6C742A419700A36D4C6A0BE2A92A6405 {LPCSTR szProcName;DWORD dwOrdinal;};
union _RTM_IP_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7 {FILETIME RR_TimeStamp;DWORD RR_TimeStampAlign;};
union _RTM_IP_ROUTE___699C5E920C4F94118D3CA0585219D565 {PROTOCOL_SPECIFIC_DATA RR_ProtocolSpecificData;DWORD RR_ProtocolSpecificDataAlign;};
union _RTM_IP_ROUTE___B65F32E54A7D132F22C0F4ED7A007718 {IP_NETWORK RR_Network;DWORD RR_NetworkAlign;};
union _RTM_IP_ROUTE___D7E34B8E0CF8F922B22A9A1306909A02 {IP_SPECIFIC_DATA RR_FamilySpecificData;DWORD RR_FamilySpecificDataAlign;};
union _RTM_IP_ROUTE___DFE08586EF63A6DAB2B8E734DD72B954 {IP_NEXT_HOP_ADDRESS RR_NextHopAddress;DWORD RR_NextHopAddressAlign;};
union _DDOVERLAYFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDOVERLAYFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
union _KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D {_KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D___F32151EA73C45A0B912EECB7D87258C2 __anonymous0;DWORDLONG Alignment;};
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F {DWORD dwOemId;_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 __anonymous0;};
union _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 {_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 __anonymous0;POINTL dmPosition;};
union _devicemodeW___8704E1B782D57C585145E63F7510EBEA {_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 __anonymous0;POINTL dmPosition;};
struct _LLC_BUFFER___2D0AC769B473AF70044942827F91E8BC {LLC_NOT_CONTIGUOUS_BUFFER Header;UCHAR auchData[];};
struct _LLC_BUFFER___E568244FB8030BE4C3EFA72F3DEF7F57 {LLC_CONTIGUOUS_BUFFER Header;UCHAR auchData[];};
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D {IDLDESC idldesc;PARAMDESC paramdesc;};
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _CONFADDRA___6189D175D0D80E2BA877E8501BB5D2E1 {DWORD dwIp;LPCSTR psz;};
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 {struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE Bytes;struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E Bits;};
union _TOKENRING___D5A0CFD0485969A31AA970E0E4F75009 {BYTE Info[];WORD RoutingInfo[];};
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B {ULONG oInst;VARIANT *lpvarValue;};
union _D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589 {DWORD dwArg[1];D3DVALUE dvArg[1];};
struct _timecode___6889D7C8638655C86F211076F8C624CB {WORD wFrameRate;WORD wFrameFract;DWORD dwFrames;};
union _DDBLTFX___3639C047B3E88B857708792B1F3FEC83 {DWORD dwAlphaDestConst;LPDIRECTDRAWSURFACE lpDDSAlphaDest;};
union _DDBLTFX___4C109671A06E28B8127C40041AB5795C {DWORD dwFillColor;DWORD dwFillDepth;DWORD dwFillPixel;LPDIRECTDRAWSURFACE lpDDSPattern;};
union _DDBLTFX___702C52B3655764E63C007A6B73D01C19 {DWORD dwZSrcConst;LPDIRECTDRAWSURFACE lpDDSZBufferSrc;};
union _DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 {DWORD dwAlphaSrcConst;LPDIRECTDRAWSURFACE lpDDSAlphaSrc;};
union _DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 {DWORD dwZDestConst;LPDIRECTDRAWSURFACE lpDDSZBufferDest;};
union tpstahdr___A6D8E33AC39759CFC20E94B336D7745F {INTEGER XXXXX01;struct tpstahdr___A6D8E33AC39759CFC20E94B336D7745F___603949C2B9C451F7A302AB722CDAFB11 XXXXX04;};
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA {PVOID FiberData;DWORD Version;};
union tpophdr___095F276FF5EBABB63F94067ADE8FD2C4 {struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___2186F38D6E36B45FD2D7B53ADC765B0A B02;struct tpophdr___095F276FF5EBABB63F94067ADE8FD2C4___AC659166113B5A242CBE56A6BFAA57EE B07;};
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34 {tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B __anonymous0;USHORT signscale;};
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301 {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous0;ULONGLONG Lo64;};
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {LARGE_INTEGER TotalUserTime;LARGE_INTEGER TotalKernelTime;LARGE_INTEGER ThisPeriodTotalUserTime;LARGE_INTEGER ThisPeriodTotalKernelTime;DWORD TotalPageFaultCount;DWORD TotalProcesses;DWORD ActiveProcesses;DWORD TotalTerminatedProcesses;};
struct _LLC___BD8DAC351D2955BFEDB8952A36AC5422 {_LLC___BD8DAC351D2955BFEDB8952A36AC5422___633B2AA9B79D6734E97CE0D21746D833 __anonymous0;_LLC___BD8DAC351D2955BFEDB8952A36AC5422___02D548A99EB2D2C428FE49EA73D40A48 __anonymous1;};
struct ldap___C24F30664623ED2C5300C291F5E91248 {ULONG sb_sd;UCHAR Reserved1[41];ULONG sb_naddr;UCHAR Reserved2[24];};
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;CRYPT_DATA_BLOB blob;};
union _userCLIPFORMAT____MIDL_IWinTypes_0001 {DWORD dwValue;unsigned short *pwszName;};
typedef void ( *PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void ( *PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)(GLenum target, GLenum pname, GLint *params);
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {PVOID CompletionKey;HANDLE CompletionPort;};
struct _avisuperindex___avisuperindex_entry {DWORDLONG qwOffset;DWORD dwSize;DWORD dwDuration;};
struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO {ULONG AuthenticationOptions;LARGE_INTEGER MinTicketAge;LARGE_INTEGER MaxTicketAge;LARGE_INTEGER MaxRenewAge;LARGE_INTEGER ProxyLifetime;LARGE_INTEGER ForceLogoff;};
struct _SecPkgContext_RemoteCredentialInfo {DWORD cbCertificateChain;PBYTE pbCertificateChain;DWORD cCertificates;DWORD fFlags;DWORD dwBits;};
typedef void ( *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags);
typedef ULONG ( *PWINDBG_GET_THREAD_CONTEXT_ROUTINE)(ULONG Processor, PCONTEXT lpContext, ULONG cbSizeOfContext);
typedef ULONG ( *PWINDBG_SET_THREAD_CONTEXT_ROUTINE)(ULONG Processor, PCONTEXT lpContext, ULONG cbSizeOfContext);
struct _CHANGER_INITIALIZE_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN BarCodeScan;};
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {LARGE_INTEGER PerProcessUserTimeLimit;LARGE_INTEGER PerJobUserTimeLimit;DWORD LimitFlags;DWORD MinimumWorkingSetSize;DWORD MaximumWorkingSetSize;DWORD ActiveProcessLimit;DWORD Affinity;DWORD PriorityClass;};
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_A {DWORD cbSize;CHAR DevicePath[1];};
struct _SP_DEVICE_INTERFACE_DETAIL_DATA_W {DWORD cbSize;WCHAR DevicePath[1];};
struct _SecPkgContext_LocalCredentialInfo {DWORD cbCertificateChain;PBYTE pbCertificateChain;DWORD cCertificates;DWORD fFlags;DWORD dwBits;};
struct __MIDL___MIDL_itf_strmif_0074_0003 {CLSID clsMedium;DWORD dw1;DWORD dw2;};
struct __MIDL___MIDL_itf_strmif_0074_0006 {DWORD dwVersion;DWORD dwMerit;__MIDL___MIDL_itf_strmif_0074_0006___3F0C45040666063DE5AB465B23810899 __anonymous0;};
struct __MIDL___MIDL_itf_strmif_0094_0002 {REFERENCE_TIME tStart;REFERENCE_TIME tStop;DWORD dwStartCookie;DWORD dwStopCookie;DWORD dwFlags;};
struct _0E076CBD8F5A7ED08B697C5009EDFCFF {KSIDENTIFIER PropTypeSet;ULONG Id;ULONG PropertyLength;};
struct _13B347001B2B96C65D01839EEA37C971 {INT cDig;ULONG dwInFlags;ULONG dwOutFlags;INT cchUsed;INT nBaseShift;INT nPwr10;};
struct _1548BBD1D24884F45375B762909DAFED {PVOID hBufferPool;PVOID pSecurityDescriptor;LLC_ETHERNET_TYPE LlcEthernetType;};
struct _155DA1A439C400442DF8DC3CA0B009F1 {ULONG AccessFlags;ULONG DescriptionSize;KSIDENTIFIER PropTypeSet;ULONG MembersListCount;ULONG Reserved;};
struct _15CCEDC8B607AED044732B1CC203D4F1 {USHORT Reserved[4];USHORT usOpenOptions;USHORT usEthernetType;ULONG ulProtocolTypeMask;ULONG ulProtocolTypeMatch;USHORT usProtocolTypeOffset;};
struct _1889F3BAB83DF1AC38A4E0627115688D {ULONG Size;ULONG Pin;WCHAR SymbolicLinkName[1];};
struct _1C9ED8E2FE494C714F8336D090291E50 {DWORD style;DWORD dwExtendedStyle;WORD cdit;short x;short y;short cx;short cy;};
struct _21BC78F9FD7040767E91D83497A8A62C {USHORT usStationId;UCHAR uchOption;UCHAR uchStationCount;UCHAR uchStationsAvailOnAdapter;UCHAR uchStationsAvailOnSap;UCHAR uchTotalStationsOnAdapter;UCHAR uchTotalStationsOnSap;};
struct _2646B588B97D9461B888B3A6B0F533BF {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwLength;DWORD dwNumber;DWORD dwItem;LPSTR lpstrAlgorithm;};
struct _26873349DB0A36B1F3161FA857CA70AC {KSPROPERTY Property;KSRATE Rate;};
struct _271E49C86C8EFA0B647D87A58CF03284 {unsigned int RoundingMode : 2;unsigned int Precision : 3;unsigned int Operation : 12;_FPIEEE_EXCEPTION_FLAGS Cause;_FPIEEE_EXCEPTION_FLAGS Enable;_FPIEEE_EXCEPTION_FLAGS Status;_FPIEEE_VALUE Operand1;_FPIEEE_VALUE Operand2;_FPIEEE_VALUE Result;};
struct _29CD99F8CA239F4FFB76FBF32B00C866 {ULONG cProps;ULONG ulPad;SMAPIFormProp aFormProp[1];};
struct _2F1E0242A20BC17A87F654C54F0A4255 {DWORD dwType;LPDPLCONNECTION lpConn;};
struct _328060AA9F47934214406E09F9D6352A {ULONG cb;BYTE ab[1];};
struct _39A7E4ECA0CDD25B70D9543F73C0D523 {DWORDLONG SteppingDelta;KSPROPERTY_BOUNDS_LONGLONG Bounds;};
struct _3A744348A6C9F73853F568E19FD6B4F7 {REFERENCE_TIME StartTime;LONG Rate;};
struct _3D26434F5A7D20980B51C6D4C88FA6DE {DWORDLONG StartFileReferenceNumber;USN LowUsn;USN HighUsn;};
struct _3EB284A884AA968851CCD5BE7E4B68CB {DWORD Layer2Protocol;UCHAR Layer2Mode;UCHAR Layer2WindowSize;DWORD Layer2UserSpecifiedProtocol;DWORD Layer3Protocol;UCHAR Layer3Mode;UCHAR Layer3DefaultPacketSize;UCHAR Layer3PacketWindowSize;DWORD Layer3UserSpecifiedProtocol;DWORD Layer3IPI;UCHAR SnapID[5];};
struct _434864393F5F5FC8FD08DA4EC836A36F {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;RECT rc;DWORD dwAudioStream;DWORD dwVideoStream;};
struct _44F6892C3B9E49E721808137885C3B18 {CMC_sint8 second;CMC_sint8 minute;CMC_sint8 hour;CMC_sint8 day;CMC_sint8 month;CMC_sint8 year;CMC_sint8 isdst;CMC_sint8 unused1;CMC_sint16 tmzone;CMC_sint16 unused2;};
struct _455481A63A960E136730B1239333B9FD {DWORD fccType;DWORD fccHandler;DWORD dwKeyFrameEvery;DWORD dwQuality;DWORD dwBytesPerSecond;DWORD dwFlags;LPVOID lpFormat;DWORD cbFormat;LPVOID lpParms;DWORD cbParms;DWORD dwInterleaveEvery;};
struct _459629BAC169663B96C3B85C5F4E781B {DWORD Layer2Protocol;DWORD Layer2UserSpecifiedProtocol;DWORD Layer3Protocol;DWORD Layer3UserSpecifiedProtocol;DWORD Layer3IPI;UCHAR SnapID[5];};
struct _46B8CD9DF897759D0306203A2121EA8B {WORD mtOption;WORD mtID;WCHAR mtString[1];};
struct _4874CB709CB649921F75355CBB4A6CDD {CMC_uint32 item_code;CMC_flags flags;};
struct _4952B9873E48B84CD6F4372AC683C647 {LS_ULONG Protocol;LS_ULONG Size;LS_CHALLDATA ChallengeData;};
struct _4CB5F1D22D24BCD6B7D6BFD3A1C83A38 {NMHDR hdr;COMBOBOXEXITEMA ceItem;};
struct _511A31EFEAABA2548CBC69D58C296B4A {LONG lAction;FILETIME ftArrivalTime;FILETIME ftDeferredTime;char rgchADMDName[20];char rgchCountryName[4];char rgchPRMDId[20];char rgchAttADMDName[20];char rgchAttCountryName[4];char rgchAttPRMDId[20];};
struct _52BD71AC0F61B53F3E44045ED088295E {LONGLONG Duration;ULONG FrameFlags;ULONG Reserved;};
union _52E42AF55B98D6DF1D491C96B8589219 {DLC_SAP_LOG Sap;DLC_LINK_LOG Link;};
struct _588C2BE90DB58BC312EC5D0109822B62 {WCHAR FileSystemType[64];WCHAR VolumeName[256];DWORD SerialNumber;};
struct _59D180E16117F59D65359090B51374E6 {DWORD dwCallback;DWORD dwItem;DWORD dwValue;DWORD dwOver;LPSTR lpstrAlgorithm;LPSTR lpstrQuality;};
union _5AC28848A8A0188E71C0B88AB8CF796B {_5AC28848A8A0188E71C0B88AB8CF796B___33A5881EA3D20175AF6F6CBC82269B7B __anonymous0;DWORDLONG Alignment;};
struct _5C0C72291B37B22FE700A61795928759 {ACCESS_MASK DesiredAccess;DWORD SecurityIds[1];};
union _5F879E5D7F7731C83E6AA76CA640BB1B {LLC_ADAPTER_LOG_TR Tr;LLC_ADAPTER_LOG_ETH Eth;};
union _644E466E06576D194C6182F3C91B6C45 {_644E466E06576D194C6182F3C91B6C45___A8864017B88463FEDB093277956EAB61 __anonymous0;ULONG Address;};
struct _65212D604C3568820517740B7202AE45 {SnmpVarBind *list;UINT len;};
struct _683A07C7E5B3B29A9EBE9FB3AE677E07 {AAL_TYPE AALType;union _683A07C7E5B3B29A9EBE9FB3AE677E07___343D768A9A9F90C5EB82AE216E4AE344 AALSpecificParameters;};
struct _69DAD432D0597BAB6A67398C913F94DB {KSPROPERTY Property;ULONG PinId;ULONG Reserved;};
struct _6C6AB21879699522A68F36BDADA97F41 {DBINT SizeOfStruct;ULONG TotCols;ULONG TotRows;ULONG CurRow;ULONG TotRowsFetched;ULONG Type;ULONG Status;};
struct _6E70C678EEF4FE821533C3EEF387F3E8 {DWORD dwType;DWORD dwPlayerType;DPID dpId;char szLongName[52];char szShortName[20];DWORD dwCurrentPlayers;};
struct _705BCFC90ADC6A58B0FDE7ED53396BD1 {DWORD dwCallback;DWORD dwTo;RECT rc;DWORD dwAudioStream;DWORD dwVideoStream;};
struct _70BF96555A8221A8BC520C987124981D {ULONG cEntries;ULONG cbEntries;BYTE abEntries[1];};
struct _70EF98671D92E01A751E5EFF82E819E9 {ATM_ADDRESS ATM_Number;UCHAR Presentation_Indication;UCHAR Screening_Indicator;};
struct _70FDF56272F5970FD1BEEDD1849B3C69 {USHORT usStationId;USHORT usReserved;PUCHAR pRoutingInfo;};
struct _74061E8FA51BA29473CFAA122BBAB1AC {ULONG cValues;LPCSTR aMessageClass[1];};
struct _7545F1A067A9FBB43FDF50E78E6B08BD {SYSTEMTIME st;USHORT wDayOfYear;};
struct _756B7C543A2D8873FCA38AB7A21F7B82 {NMHDR hdr;DWORD dwFlag;int iWidth;int iHeight;};
struct _76984A67E2D58AA25A49E08E8F9C1198 {smiUINT32 len;smiLPUINT32 ptr;};
struct _76E0DBF45CB9E280DCDAD06E7D8FE87F {LPBITMAPINFOHEADER lpbiIn;LPBITMAPINFOHEADER lpbiSuggest;int dxSrc;int dySrc;int dxDst;int dyDst;HIC hicDecompressor;};
struct _7A6011D9BCD953C4A60C0773422E3F2A {DWORD dwType;DPID dpId;};
struct _7D6AD1D4C0599A70ED2A75DF53A62D54 {LONGLONG Current;LONGLONG Stop;KS_SEEKING_FLAGS CurrentFlags;KS_SEEKING_FLAGS StopFlags;};
struct _7DEDD44825251A4EAA915BE1158FDB4F {_7DEDD44825251A4EAA915BE1158FDB4F___DA7EE1E32CD45FB8635BE676609FC669 __anonymous0;ULONG PoolType;ULONG Frames;ULONG FrameSize;ULONG FileAlignment;ULONG Reserved;};
struct _7DF8531BA86889E182D5E2B59DD739DF {smiUINT32 len;smiLPBYTE ptr;};
struct _81F87192090A4BA4742125C4E2A912AF {DWORD dwCallback;RECT rc;};
struct _83A144ADE81B1E4C267934DC64843ED5 {DWORD dwFlags;int iStart;int iLen;LPPALETTEENTRY lppe;};
struct _8597D300EC808C32B843E8106ABB2EC1 {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;DWORD dwItem;};
struct _862005EC9EDD7026C51E0C19A67AAE6E {ULONG cMTSIDs;ULONG cbMTSIDs;BYTE abMTSIDs[1];};
struct _89421D30547F23217914C1D2E90C706A {DWORD cbSize;IUnknown *punk; JAVAARG *pJavaArgs;};
struct _89CF5CC4DDEE16BF1FDCA78B7BAB1123 {PVOID TraceBuffer;ULONG TraceBufferSize;ULONG TraceFlags;};
struct _8A6C4411A6AFE08051239E9D0E609899 {ULONG ulReserved;ULONG cbTag;LPBYTE lpTag;ULONG cbEncoding;LPBYTE lpEncoding;};
struct _8BB509EE23B3AF5C934691E6EB52B09A {LS_ULONG SecretIndex;LS_ULONG Random;LS_MSG_DIGEST MsgDigest;};
struct _8C3F85A0EA2F93E5FB549BFC1FBD2808 {ULONG cb;BYTE abEntry[1];};
struct _8C7301159AF0C1BFC267CBF90877013D {NMHDR hdr;int iItemid;WCHAR szText[260];};
struct _8C804DA91EAA1D72F3F02F1E499057D7 {USHORT usReserved1;USHORT cBuffersLeft;USHORT cBuffersToGet;USHORT cbBufferSize;PLLC_XMIT_BUFFER pFirstBuffer;};
struct _8D5240EB4C2C3F8FC45B3D9D0343B483 {ULONG cTransmittedFrames;ULONG cReceivedFrames;ULONG cDiscardedFrames;ULONG cDataLost;USHORT cBuffersAvailable;};
struct _90C95F6D8FBD31365E56BBF2FD97089A {DWORD dwSize;GUID guidSession;DWORD dwSession;DWORD dwMaxPlayers;DWORD dwCurrentPlayers;DWORD dwFlags;char szSessionName[32];char szUserField[16];DWORD dwReserved1;char szPassword[16];DWORD dwReserved2;DWORD dwUser1;DWORD dwUser2;DWORD dwUser3;DWORD dwUser4;};
struct _91BF47EF3F45CCDAE56826EECF9B1EE8 {HANDLE QualityManager;ULONG Context;};
struct _9324B80A405C3638A757CE3525837AFF {DWORD dwCallback;DWORD dwItem;LPSTR lpstrName;DWORD lpstrAlgorithm;DWORD dwHandle;};
struct _947C6FA139885FA2B0DE7F2A3FDD942C {DWORD style;DWORD dwExtendedStyle;short x;short y;short cx;short cy;WORD id;};
struct _94A9993CAD7BD5ABD1D57B70615D1866 {USHORT usOpenErrorCode;USHORT usOpenOptions;UCHAR auchNodeAddress[6];UCHAR auchGroupAddress[4];UCHAR auchFunctionalAddress[4];USHORT usReserved1;USHORT usReserved2;USHORT usMaxFrameSize;USHORT usReserved3[4];USHORT usBringUps;USHORT InitWarnings;USHORT usReserved4[3];};
struct _9CE0644C253DBAB51052D414D7E91AF8 {DWORD dwType;DPID dpIdGroup;DPID dpIdPlayer;};
struct _A07373D2A5755254DCD028456AB4EC3B {KSEVENTDATA EventData;LONGLONG MarkTime;};
struct _A227968E8D32EBA0D259BD466BD0F746 {ULONG Context;ULONG Proportion;LONGLONG DeltaTime;};
struct _A22BA5DB39A448CA61FD0153A48F18FB {DWORD dwCallback;DWORD dwItem;DWORD dwValue;DWORD dwOver;LPSTR lpstrAlgorithm;LPSTR lpstrQuality;DWORD dwSourceNumber;};
struct _A4CC0F087DE00420119DAAB092DFFA3E {KSPROPERTY Property;ULONG NodeId;ULONG Reserved;};
struct _A77A9FF834B5EBD4EC6B664E82547FE4 {LLC_CCB Ccb;LLC_READ_PARMS Parms;};
struct _A796FD32A2A58348CC7057E9D7EB520D {LPSTR psz;UINT cch;};
struct _AAA3FC4CA65A0A79E764CC38F9D92130 {LONG lAction;FILETIME ftArrivalTime;FILETIME ftDeferredTime;char rgchADMDName[20];char rgchCountryName[4];char rgchPRMDId[20];char rgchAttADMDName[20];char rgchAttCountryName[4];char rgchAttPRMDId[20];char rgchMTAName[36];char rgchAttMTAName[36];};
struct _ACEAE6F707210F0DF226FE321F0C4CF6 {HMODULE hModule;DWORD dwResourceID;};
struct _B6822E6B2532C41BAC9FA8CDDAB44A4D {DWORD AddressType;DWORD NumofDigits;UCHAR Addr[20];};
struct _B90EAB9AC8B4BF0F295F7B6D198ACEA2 {ULONG cEntries;INTTRACEENTRY rgIntTraceEntry[1];};
struct _BA718A362089753A7EB60B21429558A7 {ULONG SteppingDelta;ULONG Reserved;KSPROPERTY_BOUNDS_LONG Bounds;};
struct _BDD35E4D6D3904DAB7D4846C261BAE65 {ULONG cMAPIVerb;SMAPIVerb aMAPIVerb[1];};
struct _BDE91A4D4766441856A2EB7036E539BD {KSEVENTDATA EventData;LONGLONG TimeBase;LONGLONG Interval;};
struct _BEA4C6939D98A17C28446F73864087A3 {NMHDR hdr;BOOL fChanged;int iNewSelection;char szText[260];int iWhy;};
struct _C0E9FF9F6B7B062E990DE9E300C0D00E {ULONG ForwardMaxCPCSSDUSize;ULONG BackwardMaxCPCSSDUSize;UCHAR Mode;UCHAR SSCSType;};
struct _C1DF3B0F556FA828E59A73099276FD8C {PLLC_BUFFER pNextBuffer;USHORT cbFrame;USHORT cbBuffer;USHORT offUserData;USHORT cbUserData;};
struct _C2DEA1EC9E907F11F9CFE09E5953DA8B {USHORT usBringUps;UCHAR Reserved[30];};
struct _C5C9E4429F4E5976A7E6A04308F34D53 {DWORD dwType;DPSESSIONDESC2 dpDesc;};
struct _C60E957D81AACC99A9C8D1688EAC55F2 {ULONG PeakCellRate_CLP0;ULONG PeakCellRate_CLP01;ULONG SustainableCellRate_CLP0;ULONG SustainableCellRate_CLP01;ULONG MaxBurstSize_CLP0;ULONG MaxBurstSize_CLP01;BOOL Tagging;};
union _C9F2A16A1B5FC998B91DA494984E0FDB {_C9F2A16A1B5FC998B91DA494984E0FDB___0559678CAE7576A37561112FDF9C20E6 __anonymous0;_C9F2A16A1B5FC998B91DA494984E0FDB___F7C05C0C56E55CB044DFD46C70BB2992 __anonymous1;};
union _CEB0288F8947EE21048823F466ABF866 {_CEB0288F8947EE21048823F466ABF866___8DB12206A787E12F5CB68E9C5F8D04FA __anonymous0;DWORDLONG Alignment;};
struct _D421F65DCC699F7A3DD5C4DC8797164D {UINT uValue;BOOL fSigned;};
struct _D63E714A239F9C0D1FE2D222C2E0E7D5 {REFERENCE_TIME OutputZeroTime;LONG Rate;};
struct _D74CC9719E317AD446E2F62991DAE0C8 {DWORD dwType;DPID dpIdParentGroup;DPID dpIdGroup;};
struct _D78DF0A6BFF0F3E53FB1F17463D2E937 {USHORT usTypeId;USHORT cbLogBuffer;PLLC_DIR_READ_LOG_BUFFER pLogBuffer;USHORT cbActualLength;};
struct _D890D4C8B96B04D8C981ECF31CD55F01 {LARGE_INTEGER StartingLcn;LARGE_INTEGER BitmapSize;BYTE Buffer[1];};
struct _DB6DF50B4F389C31260AEE4712B8E725 {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;LPSTR lpstrDrive;DWORD dwReference;};
struct _DC731844EB8703AC39E0F1B64989CDCD {DWORD dwSize;DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwVersion;DWORD dwVersionICM;WCHAR szName[16];WCHAR szDescription[128];WCHAR szDriver[128];};
struct _DCD76CF5A248684E95EEC87F56AA655C {LARGE_INTEGER VolumeSerialNumber;LARGE_INTEGER NumberSectors;LARGE_INTEGER TotalClusters;LARGE_INTEGER FreeClusters;LARGE_INTEGER TotalReserved;DWORD BytesPerSector;DWORD BytesPerCluster;DWORD BytesPerFileRecordSegment;DWORD ClustersPerFileRecordSegment;LARGE_INTEGER MftValidDataLength;LARGE_INTEGER MftStartLcn;LARGE_INTEGER Mft2StartLcn;LARGE_INTEGER MftZoneStart;LARGE_INTEGER MftZoneEnd;};
struct _DD2E0983FBF83F36606C69DABA2BC276 {HINSTANCE hInstOld;UINT nIDOld;HINSTANCE hInstNew;UINT nIDNew;int nButtons;};
struct _DF483159CAAEA82745063FD51FDE02D7 {ULONG cForms;LPMAPIFORMINFO aFormInfo[1];};
struct _E21F85AFDEE9EAF37885ADBF8938BB0C {KSALLOCATOR_FRAMING Framing;ULONG AllocatedFrames;ULONG Reserved;};
struct _E3EDD7A8EB9A8A8EC907A9BA28720893 {ATM_TD Forward;ATM_TD Backward;BOOL BestEffort;};
struct _E6EEE8D03854377210BB1626C10183C8 {ATM_CONNECTION_ID PvcConnectionId;QOS PvcQos;};
struct _E76253F876E841F225888AB457FD0286 {NMHDR hdr;COMBOBOXEXITEMW ceItem;};
struct _E7808ED52D89E2C9F1492EE2222DF379 {ULONG ulFlags;HGLOBAL hDevMode;HGLOBAL hDevNames;ULONG ulFirstPageNumber;ULONG fPrintAttachments;};
struct _E7BDCECB0924BC4C6E03B7EEA1B31BA1 {LONGLONG Time;ULONG Numerator;ULONG Denominator;};
struct _EA831C4C2E16EF6F2B7E490157D80D27 {DWORD Restart;SID Sid;};
struct _EA96C5F0D9445AECD5022D472819168D {AsnObjectName name;AsnObjectSyntax value;};
struct _EADE59A3AB4D211471738C1C0A1C48E6 {DWORD dwCallback;LPSTR lpstrPath;DWORD dwSize;};
struct _EFE0F4933F551C6F216DF753EC3D85D4 {USHORT cI_FramesTransmitted;USHORT cI_FramesReceived;UCHAR cI_FrameReceiveErrors;UCHAR cI_FrameTransmissionErrors;USHORT cT1_ExpirationCount;UCHAR uchLastCmdRespReceived;UCHAR uchLastCmdRespTransmitted;UCHAR uchPrimaryState;UCHAR uchSecondaryState;UCHAR uchSendStateVariable;UCHAR uchReceiveStateVariable;UCHAR uchLastNr;UCHAR cbLanHeader;UCHAR auchLanHeader[32];};
struct _F0080E258AF97822278D302FBC4D344F {DWORD HighLayerInfoType;DWORD HighLayerInfoLength;UCHAR HighLayerInfo[8];};
struct _F1FF9EB17A5B0DC512AB60E4FE6215DC {GUID PropertySet;ULONG Count;};
struct _F4219B4F960B4E0EA54950CBBE2CC12A {USHORT usStationId;USHORT cBufferThreshold;PVOID AlertEvent;};
struct _F77B4E368325CF7BDE015CEDC90789C7 {ULONG cEntries;TRACEENTRY rgtraceentry[1];};
struct _FBE7179BAB40555F1A13AD3C5BC3BB71 {BOOL fStereo;ULONG DualMode;};
typedef DWORD ( *PBLOCK_CONVERT_SERVICES_TO_STATIC)(ULONG InterfaceIndex);
typedef DWORD ( *PCLOSE_SERVICE_ENUMERATION_HANDLE)(HANDLE EnumerationHandle);
typedef SECURITY_STATUS ( *QUERY_CREDENTIALS_ATTRIBUTES_FN_A)(PCredHandle, unsigned int, void *);
typedef SECURITY_STATUS ( *QUERY_CREDENTIALS_ATTRIBUTES_FN_W)(PCredHandle, unsigned int, void *);
typedef SECURITY_STATUS ( *ENUMERATE_SECURITY_PACKAGES_FN_A)(unsigned int *, PSecPkgInfoA *);
typedef SECURITY_STATUS ( *ENUMERATE_SECURITY_PACKAGES_FN_W)(unsigned int *, PSecPkgInfoW *);
struct _DEV_BROADCAST_DEVICEINTERFACE_A {DWORD dbcc_size;DWORD dbcc_devicetype;DWORD dbcc_reserved;GUID dbcc_classguid;char dbcc_name[1];};
struct _IMAGE_RESOURCE_DIRECTORY_STRING {WORD Length;CHAR NameString[1];};
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {DWORD NumberOfAssignedProcesses;DWORD NumberOfProcessIdsInList;UINT_PTR ProcessIdList[1];};
struct _TRUSTED_DOMAIN_AUTH_INFORMATION {ULONG IncomingAuthInfos;PLSA_AUTH_INFORMATION IncomingAuthenticationInformation;PLSA_AUTH_INFORMATION IncomingPreviousAuthenticationInformation;ULONG OutgoingAuthInfos;PLSA_AUTH_INFORMATION OutgoingAuthenticationInformation;PLSA_AUTH_INFORMATION OutgoingPreviousAuthenticationInformation;};
struct _WIN_SPUB_TRUSTED_PUBLISHER_DATA {HANDLE hClientToken;LPWIN_CERTIFICATE lpCertificate;};
struct tagMIXERCONTROLDETAILS_LISTTEXTA {DWORD dwParam1;DWORD dwParam2;CHAR szName[64];};
struct tagMIXERCONTROLDETAILS_LISTTEXTW {DWORD dwParam1;DWORD dwParam2;WCHAR szName[64];};
typedef SECURITY_STATUS ( *IMPERSONATE_SECURITY_CONTEXT_FN)(PCtxtHandle);
typedef void ( *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);
typedef BOOL (*PFN_PROVIDER_CERTCHKPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSignerChain, DWORD idxCounterSigner);
typedef SECURITY_STATUS ( *QUERY_SECURITY_CONTEXT_TOKEN_FN)(PCtxtHandle, void **);
struct _SecPkgContext_IssuerListInfoEx {PCERT_NAME_BLOB aIssuers;DWORD cIssuers;};
struct _WIN_TRUST_ACTDATA_SUBJECT_ONLY {GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
struct __MIDL_IH26XEncoderControl_0001 {DWORD dwTargetFrameSize;BOOL bFrameSizeBRC;BOOL bSendKey;DWORD dwQuality;DWORD dwFrameRate;DWORD dwDataRate;DWORD dwScale;DWORD dwWidth;DWORD dwKeyFrameInterval;};
struct creative_fastspeech10format_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;};
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {DWORD TimeDateStamp;WORD OffsetModuleName;WORD NumberOfModuleForwarderRefs;};
struct _POLICY_DOMAIN_PUBLIC_KEY_INFO {ULONG InfoLength;PUCHAR PublicKeyInfo;};
struct creative_fastspeech8format_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct mediaspace_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef DWORD ( *PBLOCK_DELETE_STATIC_SERVICES)(ULONG InterfaceIndex);
typedef SECURITY_STATUS ( *QUERY_CONTEXT_ATTRIBUTES_FN_A)(PCtxtHandle, unsigned int, void *);
typedef SECURITY_STATUS ( *QUERY_CONTEXT_ATTRIBUTES_FN_W)(PCtxtHandle, unsigned int, void *);
struct _CERT_BASIC_CONSTRAINTS2_INFO {BOOL fCA;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;};
struct _GENERIC_BINDING_ROUTINE_PAIR {GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct _NTMS_CHANGERTYPEINFORMATIONA {CHAR szVendor[32];CHAR szProduct[32];DWORD DeviceType;};
struct _NTMS_CHANGERTYPEINFORMATIONW {WCHAR szVendor[32];WCHAR szProduct[32];DWORD DeviceType;};
struct _NTMS_NOTIFICATIONINFORMATION {DWORD dwOperation;NTMS_GUID ObjectId;};
struct _SQL_CONNECT_CONNECTED_PARAMS {DATASOURCE_TYPE ds;HANDLE hDataSource; char *pszAccessType;};
struct _SecPkgContext_ConnectionInfo {DWORD dwProtocol;ALG_ID aiCipher;DWORD dwCipherStrength;ALG_ID aiHash;DWORD dwHashStrength;ALG_ID aiExch;DWORD dwExchStrength;};
struct _SecPkgContext_IssuerListInfo {DWORD cbIssuerList;PBYTE pIssuerList;};
struct __MIDL___MIDL__intf_0000_0002 {DWORD dwLength;LPBYTE lpValue;};
struct __MIDL___MIDL__intf_0000_0003 {DWORD dwLength;LPBYTE lpValue;};
struct tagEMRCREATEDIBPATTERNBRUSHPT {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
typedef BOOLEAN (*PSAM_PASSWORD_FILTER_ROUTINE)(PUNICODE_STRING AccountName, PUNICODE_STRING FullName, PUNICODE_STRING Password, BOOLEAN SetOperation);
struct _CHANGER_READ_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN VolumeTagInfo;};
struct _IMAGE_RESOURCE_DIR_STRING_U {WORD Length;WCHAR NameString[1];};
struct _IMAGE_SEPARATE_DEBUG_HEADER {WORD Signature;WORD Flags;WORD Machine;WORD Characteristics;DWORD TimeDateStamp;DWORD CheckSum;DWORD ImageBase;DWORD SizeOfImage;DWORD NumberOfSections;DWORD ExportedNamesSize;DWORD DebugDirectorySize;DWORD SectionAlignment;DWORD Reserved[2];};
struct _NTMS_STORAGESLOTINFORMATION {DWORD Number;DWORD State;NTMS_GUID Library;};
struct _POLICY_PRIVILEGE_DEFINITION {LSA_UNICODE_STRING Name;LUID LocalValue;};
struct _RECOVERY_AGENT_INFORMATIONA {DWORD NextEntryOffset;DWORD AgentNameLength;CHAR AgentInformation[1];};
struct _RECOVERY_AGENT_INFORMATIONW {DWORD NextEntryOffset;DWORD AgentNameLength;WCHAR AgentInformation[1];};
struct creative_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef void ( *PFNGLADDSWAPHINTRECTWINPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void ( *PFNGLEDGEFLAGPOINTEREXTPROC)(GLsizei stride, GLsizei count,  GLboolean *pointer);
struct _BY_HANDLE_FILE_INFORMATION {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD dwVolumeSerialNumber;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD nNumberOfLinks;DWORD nFileIndexHigh;DWORD nFileIndexLow;};
struct _CERT_POLICY_QUALIFIER_INFO {LPSTR pszPolicyQualifierId;CRYPT_OBJID_BLOB Qualifier;};
struct _CMSG_ENCRYPTED_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;};
struct _CRYPT_ALGORITHM_IDENTIFIER {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _CRYPT_ATTRIBUTE_TYPE_VALUE {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CRYPT_DECRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD cCertStore;HCERTSTORE *rghCertStore;};
struct _LSA_REFERENCED_DOMAIN_LIST {ULONG Entries;PLSA_TRUST_INFORMATION Domains;};
struct _NTMS_DRIVETYPEINFORMATIONA {CHAR szVendor[32];CHAR szProduct[32];DWORD NumberOfHeads;DWORD DeviceType;};
struct _NTMS_DRIVETYPEINFORMATIONW {WCHAR szVendor[32];WCHAR szProduct[32];DWORD NumberOfHeads;DWORD DeviceType;};
struct _POLICY_ACCOUNT_DOMAIN_INFO {LSA_UNICODE_STRING DomainName;PSID DomainSid;};
struct _POLICY_DOMAIN_LOCKOUT_INFO {LARGE_INTEGER LockoutDuration;LARGE_INTEGER LockoutObservationWindow;USHORT LockoutThreshold;};
struct _POLICY_PRIMARY_DOMAIN_INFO {LSA_UNICODE_STRING Name;PSID Sid;};
struct _QUERY_SERVICE_LOCK_STATUSA {DWORD fIsLocked;LPSTR lpLockOwner;DWORD dwLockDuration;};
struct _REQUEST_RAW_ENCRYPTED_DATA {LONGLONG FileOffset;DWORD Length;};
struct __MIDL_IH26XRTPControl_0001 {BOOL bRTPHeader;DWORD dwPacketSize;DWORD dwPacketLoss;};
struct contres_vqlpcwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct nms_vbxadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct phoneinitializeexparams_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwOptions;union phoneinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F Handles;DWORD dwCompletionKey;};
typedef SECURITY_STATUS ( *DELETE_SECURITY_CONTEXT_FN)(PCtxtHandle);
typedef SECURITY_STATUS ( *FREE_CREDENTIALS_HANDLE_FN)(PCredHandle);
typedef DWORD ( *PGET_FIRST_ORDERED_SERVICE)(DWORD OrderingMethod, DWORD ExclusionFlags, PIPX_SERVICE Service);
typedef HRESULT (*PMSBDNOUTPUTSETROUTINGINFO)(MSBDN_OUTPUT_SUBSYSTEM *, LPVOID);
typedef void ( *PWINDBG_EXTENSION_DLL_INIT)(PWINDBG_EXTENSION_APIS lpExtensionApis, USHORT MajorVersion, USHORT MinorVersion);
typedef ULONG (*PWINDBG_STACKTRACE_ROUTINE)(ULONG FramePointer, ULONG StackPointer, ULONG ProgramCounter, PEXTSTACKTRACE StackFrames, ULONG Frames);
typedef SECURITY_STATUS ( *REVERT_SECURITY_CONTEXT_FN)(PCtxtHandle);
struct _HTTP_FILTER_ACCESS_DENIED { CHAR *pszURL; CHAR *pszPhysicalPath;DWORD dwReason;};
struct _IMAGE_BOUND_FORWARDER_REF {DWORD TimeDateStamp;WORD OffsetModuleName;WORD Reserved;};
struct _LLC_BUFFER__LlcNextBuffer {LLC_NEXT_BUFFER Header;UCHAR auchData[];};
struct _NTMS_MEDIAPOOLINFORMATION {DWORD PoolType;NTMS_GUID MediaType;NTMS_GUID Parent;DWORD AllocationPolicy;DWORD DeallocationPolicy;DWORD dwMaxAllocates;DWORD dwNumberOfPhysicalMedia;DWORD dwNumberOfLogicalMedia;DWORD dwNumberOfMediaPools;};
struct _READ_ELEMENT_ADDRESS_INFO {DWORD NumberOfElements;CHANGER_ELEMENT_STATUS ElementStatus[1];};
struct _SCH_CRED_PUBLIC_CERTCHAIN {DWORD dwType;DWORD cbCertChain;PBYTE pCertChain;};
struct _STATIC_ROUTES_TABLE_INDEX {ULONG InterfaceIndex;UCHAR Network[4];};
struct _TAPE_GET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD DefaultBlockSize;DWORD MaximumBlockSize;DWORD MinimumBlockSize;DWORD MaximumPartitionCount;DWORD FeaturesLow;DWORD FeaturesHigh;DWORD EOTWarningZoneSize;};
struct _TAPE_SET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD EOTWarningZoneSize;};
struct _WIN32_FILE_ATTRIBUTE_DATA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;};
struct _WSH_PAP_GET_SERVER_STATUS {SOCKADDR_AT ServerAddr;UCHAR Reserved[4];UCHAR ServerStatus[256];};
struct contres_cr10waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct fmtowns_snd_waveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
struct lineinitializeexparams_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwOptions;union lineinitializeexparams_tag___EBD2D59682736EA97446074DEE97593F Handles;DWORD dwCompletionKey;};
struct sierra_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;};
typedef void ( *PFNGLGETCOLORTABLEEXTPROC)(GLenum target, GLenum format, GLenum type, GLvoid *data);
typedef void ( *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv, DWORD dwFlags);
typedef DWORD ( *PGET_NEXT_ORDERED_SERVICE)(DWORD OrderingMethod, DWORD ExclusionFlags, PIPX_SERVICE Service);
typedef HRESULT (*PMSBDNOUTPUTGETVALUECOUNT)(MSBDN_OUTPUT_SUBSYSTEM *, DWORD *);
typedef int ( *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding, unsigned int RequestedMgmtOperation, RPC_STATUS *Status);
struct _ACTRL_ACCESS_ENTRY_LISTA {ULONG cEntries;ACTRL_ACCESS_ENTRYA *pAccessList;};
struct _ACTRL_ACCESS_ENTRY_LISTW {ULONG cEntries;ACTRL_ACCESS_ENTRYW *pAccessList;};
struct _AUDIO_STREAM_CONFIG_CAPS {GUID guid;ULONG MinimumChannels;ULONG MaximumChannels;ULONG ChannelsGranularity;ULONG MinimumBitsPerSample;ULONG MaximumBitsPerSample;ULONG BitsPerSampleGranularity;ULONG MinimumSampleFrequency;ULONG MaximumSampleFrequency;ULONG SampleFrequencyGranularity;};
struct _CRYPT_SMIME_CAPABILITIES {DWORD cCapability;PCRYPT_SMIME_CAPABILITY rgCapability;};
struct _DRIVE_LAYOUT_INFORMATION {DWORD PartitionCount;DWORD Signature;PARTITION_INFORMATION PartitionEntry[1];};
struct _IMAGE_RESOURCE_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;WORD NumberOfNamedEntries;WORD NumberOfIdEntries;};
struct _MIDL_STUBLESS_PROXY_INFO {PMIDL_STUB_DESC pStubDesc;PFORMAT_STRING ProcFormatString; unsigned short *FormatStringOffset;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString; unsigned short *LocalFmtStringOffset;};
struct _OUTPUT_DEBUG_STRING_INFO {LPSTR lpDebugStringData;WORD fUnicode;WORD nDebugStringLength;};
struct _PERF_INSTANCE_DEFINITION {DWORD ByteLength;DWORD ParentObjectTitleIndex;DWORD ParentObjectInstance;LONG UniqueID;DWORD NameOffset;DWORD NameLength;};
struct _SP_DEVICE_INTERFACE_DATA {DWORD cbSize;GUID InterfaceClassGuid;DWORD Flags;DWORD Reserved;};
struct _SP_SELECTDEVICE_PARAMS_W {SP_CLASSINSTALL_HEADER ClassInstallHeader;WCHAR Title[60];WCHAR Instructions[256];WCHAR ListLabel[30];};
struct _SP_UNREMOVEDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Scope;DWORD HwProfile;};
struct _SecPkgCred_SupportedAlgs {DWORD cSupportedAlgs;ALG_ID *palgSupportedAlgs;};
struct _TRUSTED_CONTROLLERS_INFO {ULONG Entries;PLSA_UNICODE_STRING Names;};
typedef HRESULT (*D3DRMLOADTEXTURECALLBACK)(char *tex_name, void *arg, LPDIRECT3DRMTEXTURE *);
struct IPX_ADAPTER_BINDING_INFO {ULONG AdapterIndex;UCHAR Network[4];UCHAR LocalNode[6];UCHAR RemoteNode[6];ULONG MaxPacketSize;ULONG LinkSpeed;};
typedef void ( *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors);
typedef DWORD ( *PGET_MODULE_BASE_ROUTINE)(HANDLE hProcess, DWORD ReturnAddress);
typedef HRESULT (*PMSBDNOUTPUTSETBANDWIDTH)(MSBDN_OUTPUT_SUBSYSTEM *, DWORD);
typedef DWORD ( *PNTSEC_SHUTDOWN_COMPLETE)(HANDLE);
typedef void ( *PWLX_SET_CONTEXT_POINTER)(HANDLE hWlx, PVOID pWlxContext);
struct _CHANGER_EXCHANGE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination1;CHANGER_ELEMENT Destination2;BOOLEAN Flip1;BOOLEAN Flip2;};
struct _CRYPT_PROVIDER_PRIVDATA {DWORD cbStruct;GUID gProviderID;DWORD cbProvData;void *pvProvData;};
struct _CRYPT_REGISTER_ACTIONID {DWORD cbStruct;CRYPT_TRUST_REG_ENTRY sInitProvider;CRYPT_TRUST_REG_ENTRY sObjectProvider;CRYPT_TRUST_REG_ENTRY sSignatureProvider;CRYPT_TRUST_REG_ENTRY sCertificateProvider;CRYPT_TRUST_REG_ENTRY sCertificatePolicyProvider;CRYPT_TRUST_REG_ENTRY sFinalPolicyProvider;CRYPT_TRUST_REG_ENTRY sTestPolicyProvider;};
struct _FILE_NOTIFY_INFORMATION {DWORD NextEntryOffset;DWORD Action;DWORD FileNameLength;WCHAR FileName[1];};
struct _IMAGE_IMPORT_DESCRIPTOR {_IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 __anonymous0;DWORD TimeDateStamp;DWORD ForwarderChain;DWORD Name;DWORD FirstThunk;};
struct _IPX_TRAFFIC_FILTER_INFO {ULONG FilterDefinition;UCHAR DestinationNetwork[4];UCHAR DestinationNetworkMask[4];UCHAR DestinationNode[6];UCHAR DestinationSocket[2];UCHAR SourceNetwork[4];UCHAR SourceNetworkMask[4];UCHAR SourceNode[6];UCHAR SourceSocket[2];UCHAR PacketType;};
struct _RSVP_FILTERSPEC_V6_FLOW {IN_ADDR_IPV6 Address;UCHAR UnUsed;UCHAR FlowLabel[3];};
struct _SAP_SERVICE_FILTER_INFO {_SAP_SERVICE_FILTER_INFO___C22F3CB86C059B621E49F8C990C080A4 __anonymous0;UCHAR ServiceName[48];};
struct digiadpcmmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct g721_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD nAuxBlockSize;};
struct g723_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD cbExtraSize;WORD nAuxBlockSize;};
struct tagEMRSCALEVIEWPORTEXTEX {EMR emr;LONG xNum;LONG xDenom;LONG yNum;LONG yDenom;};
struct tagEMRSETCOLORADJUSTMENT {EMR emr;COLORADJUSTMENT ColorAdjustment;};
typedef INT ( *LPNSPREMOVESERVICECLASS)(LPGUID lpProviderId, LPGUID lpServiceClassId);
typedef void (*LPSERVICE_CALLBACK_PROC)(LPARAM lParam, HANDLE hAsyncTaskHandle);
typedef INT ( *LPWSCUNINSTALLNAMESPACE)(LPGUID lpProviderId);
typedef void ( *PFNGLGETPOINTERVEXTPROC)(GLenum pname, GLvoid **params);
typedef BOOL ( *PFN_GETEXTENSIONVERSION)(HSE_VERSION_INFO *pVer);
typedef BOOL ( *VDMPROCESSEXCEPTIONPROC)(LPDEBUG_EVENT);
typedef void ( *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
struct _BROWSER_STATISTICS_100 {LARGE_INTEGER StartTime;LARGE_INTEGER NumberOfServerAnnouncements;LARGE_INTEGER NumberOfDomainAnnouncements;ULONG NumberOfElectionPackets;ULONG NumberOfMailslotWrites;ULONG NumberOfGetBrowserServerListRequests;LARGE_INTEGER NumberOfIllegalDatagrams;};
struct _BROWSER_STATISTICS_101 {LARGE_INTEGER StartTime;LARGE_INTEGER NumberOfServerAnnouncements;LARGE_INTEGER NumberOfDomainAnnouncements;ULONG NumberOfElectionPackets;ULONG NumberOfMailslotWrites;ULONG NumberOfGetBrowserServerListRequests;LARGE_INTEGER NumberOfIllegalDatagrams;ULONG NumberOfMissedServerAnnouncements;ULONG NumberOfMissedMailslotDatagrams;ULONG NumberOfMissedGetBrowserServerListRequests;ULONG NumberOfFailedServerAnnounceAllocations;ULONG NumberOfFailedMailslotAllocations;ULONG NumberOfFailedMailslotReceives;ULONG NumberOfFailedMailslotWrites;ULONG NumberOfFailedMailslotOpens;ULONG NumberOfDuplicateMasterAnnouncements;};
struct _CMSG_CTRL_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwRecipientIndex;};
struct _CRYPT_SMIME_CAPABILITY {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _IMAGE_EXPORT_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Name;DWORD Base;DWORD NumberOfFunctions;DWORD NumberOfNames;DWORD AddressOfFunctions;DWORD AddressOfNames;DWORD AddressOfNameOrdinals;};
struct _IPX_MIB_GET_INPUT_DATA {ULONG TableId;IPX_MIB_INDEX MibIndex;};
struct _IPX_MIB_SET_INPUT_DATA {ULONG TableId;IPX_MIB_ROW MibRow;};
struct _IPX_SPXCONNSTATUS_DATA {UCHAR ConnectionState;UCHAR WatchDogActive;USHORT LocalConnectionId;USHORT RemoteConnectionId;USHORT LocalSequenceNumber;USHORT LocalAckNumber;USHORT LocalAllocNumber;USHORT RemoteAckNumber;USHORT RemoteAllocNumber;USHORT LocalSocket;UCHAR ImmediateAddress[6];UCHAR RemoteNetwork[4];UCHAR RemoteNode[6];USHORT RemoteSocket;USHORT RetransmissionCount;USHORT EstimatedRoundTripDelay;USHORT RetransmittedPackets;USHORT SuppressedPacket;};
struct _MESSAGE_RESOURCE_ENTRY {WORD Length;WORD Flags;BYTE Text[1];};
struct _METADATA_GETALL_RECORD {DWORD dwMDIdentifier;DWORD dwMDAttributes;DWORD dwMDUserType;DWORD dwMDDataType;DWORD dwMDDataLen;_METADATA_GETALL_RECORD___74D6405487D82570D3F0F9DA713B78B0 __anonymous0;DWORD dwMDDataTag;};
struct _PRINTER_NOTIFY_OPTIONS {DWORD Version;DWORD Flags;DWORD Count;PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;};
struct _REMSECURITY_ATTRIBUTES {DWORD nLength;DWORD lpSecurityDescriptor;BOOL bInheritHandle;};
struct _RIP_MIB_SET_INPUT_DATA {ULONG TableId;RIP_INTERFACE RipInterface;};
struct _RSVP_FILTERSPEC_V4_GPI {IN_ADDR_IPV4 Address;ULONG GeneralPortId;};
struct _RSVP_FILTERSPEC_V6_GPI {IN_ADDR_IPV6 Address;ULONG GeneralPortId;};
struct _SAP_MIB_SET_INPUT_DATA {ULONG TableId;SAP_INTERFACE SapInterface;};
struct _SP_CLASSIMAGELIST_DATA {DWORD cbSize;HIMAGELIST ImageList;DWORD Reserved;};
struct _SP_CLASSINSTALL_HEADER {DWORD cbSize;DI_FUNCTION InstallFunction;};
struct _SP_REMOVEDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Scope;DWORD HwProfile;};
struct dvi_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct ima_adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct lineagentgroupentry_tag {struct lineagentgroupentry_tag___3B15045ED2134A72ECDB79D8EFF28E30 GroupID;DWORD dwNameSize;DWORD dwNameOffset;};
struct tagEMRSETWORLDTRANSFORM {EMR emr;XFORM xform;};
struct tagMCI_VCR_ESCAPE_PARMS {DWORD dwCallback;LPCSTR lpstrCommand;};
struct tagMCI_VD_ESCAPE_PARMSA {DWORD dwCallback;LPCSTR lpstrCommand;};
typedef void ( *GLUtessCombineDataProc)(GLdouble *       , void * *       , GLfloat *       , void **, void *);
typedef int ( *LPWPUCLOSESOCKETHANDLE)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWPUOPENCURRENTTHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSCDEINSTALLPROVIDER)(LPGUID lpProviderId, LPINT lpErrno);
typedef HRESULT ( *PFNCREATEINSTALLCODECS)(IUnknown *punkOuter,  IID * riid, void **ppv);
typedef BOOL ( *PFNSNMPEXTENSIONINITEX)(AsnObjectIdentifier *pNextSupportedRegion);
typedef BOOL ( *PFN_TERMINATEEXTENSION)(DWORD dwFlags);
typedef HRESULT (*PMSBDNOUTPUTFREEBUFFER)(MSBDN_OUTPUT_SUBSYSTEM *, LPVOID);
typedef ULONG ( *PWINDBG_GET_EXPRESSION)(PCSTR lpExpression);
struct _CRYPT_SEQUENCE_OF_ANY {DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct _CRYPT_TRUST_REG_ENTRY {DWORD cbStruct;WCHAR *pwszDLLName;WCHAR *pwszFunctionName;};
struct _CTL_FIND_SUBJECT_PARA {DWORD cbSize;PCTL_FIND_USAGE_PARA pUsagePara;DWORD dwSubjectType;void *pvSubject;};
struct _EXTENDED_NOTIFICATION {ULONG ulEvent;ULONG cb;LPBYTE pbEventParameters;};
struct _IMAGE_DEBUG_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Type;DWORD SizeOfData;DWORD AddressOfRawData;DWORD PointerToRawData;};
struct _LSA_TRUST_INFORMATION {LSA_UNICODE_STRING Name;PSID Sid;};
struct _MESSAGE_RESOURCE_DATA {DWORD NumberOfBlocks;MESSAGE_RESOURCE_BLOCK Blocks[1];};
struct _QUERY_SERVICE_CONFIGA {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPSTR lpBinaryPathName;LPSTR lpLoadOrderGroup;DWORD dwTagId;LPSTR lpDependencies;LPSTR lpServiceStartName;LPSTR lpDisplayName;};
struct _RPC_SYNTAX_IDENTIFIER {GUID SyntaxGUID;RPC_VERSION SyntaxVersion;};
struct _RTR_INFO_BLOCK_HEADER {ULONG Version;ULONG Size;ULONG TocEntriesCount;RTR_TOC_ENTRY TocEntry[1];};
struct _TRANSMIT_FILE_BUFFERS {LPVOID Head;DWORD HeadLength;LPVOID Tail;DWORD TailLength;};
struct __GENERIC_BINDING_INFO {void *pObj;unsigned int Size;GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct digirealwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct dolbyac2waveformat_tag {WAVEFORMATEX wfx;WORD nAuxBitsCode;};
struct tagDDEML_MSG_HOOK_DATA {UINT uiLo;UINT uiHi;DWORD cbData;DWORD Data[8];};
struct tagEMRSELECTCOLORSPACE {EMR emr;DWORD ihCS;};
struct tagEMRSETVIEWPORTEXTEX {EMR emr;SIZEL szlExtent;};
struct tagEMRSETVIEWPORTORGEX {EMR emr;POINTL ptlOrigin;};
struct tagMCI_ANIM_RECT_PARMS {DWORD dwCallback;RECT rc;};
struct tagMCI_OVLY_RECT_PARMS {DWORD dwCallback;RECT rc;};
typedef ULONG DEREFERENCECONNECTION(PLDAP PrimaryConnection, PLDAP ConnectionToDereference);
typedef HRESULT  DISPATCHNOTIFICATIONS(ULONG ulFlags);
struct IMpegAudioDecoderVtbl {HRESULT ( *get_FrequencyDivider)(ISpoolerHook *This, unsigned int *pDivider);HRESULT ( *put_FrequencyDivider)(ISpoolerHook *This, unsigned int Divider);HRESULT ( *get_DecoderAccuracy)(ISpoolerHook *This, unsigned int *pAccuracy);HRESULT ( *put_DecoderAccuracy)(ISpoolerHook *This, unsigned int Accuracy);HRESULT ( *get_Stereo)(ISpoolerHook *This, unsigned int *pStereo);HRESULT ( *put_Stereo)(ISpoolerHook *This, unsigned int Stereo);HRESULT ( *get_DecoderWordSize)(ISpoolerHook *This, unsigned int *pWordSize);HRESULT ( *put_DecoderWordSize)(ISpoolerHook *This, unsigned int WordSize);HRESULT ( *get_IntegerDecode)(ISpoolerHook *This, unsigned int *pIntDecode);HRESULT ( *put_IntegerDecode)(ISpoolerHook *This, unsigned int IntDecode);HRESULT ( *get_DualMode)(ISpoolerHook *This, unsigned int *pIntDecode);HRESULT ( *put_DualMode)(ISpoolerHook *This, unsigned int IntDecode);HRESULT ( *get_AudioFormat)(ISpoolerHook *This, MPEG1WAVEFORMAT *lpFmt);};
typedef INT ( *LPNSPLOOKUPSERVICEEND)(HANDLE hLookup);
typedef DWORD ( *PFN_HTTPEXTENSIONPROC)(EXTENSION_CONTROL_BLOCK *pECB);
typedef DWORD ( *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter);
typedef BOOL ( *VDMISMODULELOADEDPROC)(LPSTR);
struct _CERT_PUBLIC_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_BIT_BLOB PublicKey;};
struct _CERT_STORE_PROV_INFO {DWORD cbSize;DWORD cStoreProvFunc;void **rgpvStoreProvFunc;HCERTSTOREPROV hStoreProv;DWORD dwStoreProvFlags;};
struct _CHANGER_ELEMENT_LIST {CHANGER_ELEMENT Element;DWORD NumberOfElements;};
struct _CHANGER_SET_POSITION {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CRL_DIST_POINTS_INFO {DWORD cDistPoint;PCRL_DIST_POINT rgDistPoint;};
struct _CRYPT_KEY_PROV_PARAM {DWORD dwParam;BYTE *pbData;DWORD cbData;DWORD dwFlags;};
struct _CTL_ANY_SUBJECT_INFO {CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;CRYPT_DATA_BLOB SubjectIdentifier;};
struct _D3DExecuteBufferDesc {DWORD dwSize;DWORD dwFlags;DWORD dwCaps;DWORD dwBufferSize;LPVOID lpData;};
struct _D3DRMPMESHLOADSTATUS {DWORD dwSize;DWORD dwPMeshSize;DWORD dwBaseMeshSize;DWORD dwBytesLoaded;DWORD dwVerticesLoaded;DWORD dwFacesLoaded;HRESULT dwLoadResult;DWORD dwFlags;};
struct _DEV_BROADCAST_PORT_W {DWORD dbcp_size;DWORD dbcp_devicetype;DWORD dbcp_reserved;unsigned short dbcp_name[1];};
struct _DEV_BROADCAST_VOLUME {DWORD dbcv_size;DWORD dbcv_devicetype;DWORD dbcv_reserved;DWORD dbcv_unitmask;WORD dbcv_flags;};
struct _DistributedLockOwner {RPC_CHAR rgchComputer[17];RPC_DWORD dwPID;RPC_DWORD dwTID;};
struct _DistributedLockReply {RPC_BOOL fGranted;DistributedLockOwner dlo;};
struct _ENUM_SERVICE_STATUSA {LPSTR lpServiceName;LPSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _EXCEPTION_DEBUG_INFO {EXCEPTION_RECORD ExceptionRecord;DWORD dwFirstChance;};
struct _FILEGROUPDESCRIPTORA {UINT cItems;FILEDESCRIPTORA fgd[1];};
struct _FILEGROUPDESCRIPTORW {UINT cItems;FILEDESCRIPTORW fgd[1];};
struct _FILE_OBJECTID_BUFFER {BYTE ObjectId[16];_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A __anonymous0;};
union _FILE_SEGMENT_ELEMENT {PVOID64 Buffer;ULONGLONG Alignment;};
struct _HTTP_FILTER_RAW_DATA {PVOID pvInData;DWORD cbInData;DWORD cbInBuffer;DWORD dwReserved;};
struct _IMAGE_IMPORT_BY_NAME {WORD Hint;BYTE Name[1];};
struct _NTMS_LMIDINFORMATION {NTMS_GUID MediaPool;DWORD dwNumberOfPartitions;};
struct _RAS_PPP_IPXCP_RESULT {DWORD dwError;WCHAR wszAddress[23];};
struct _SCH_CRED_PUBLIC_CAPI {DWORD dwType;HCRYPTPROV hProv;};
struct _SCH_CRED_SECRET_CAPI {DWORD dwType;HCRYPTPROV hProv;};
struct _SERVICES_TABLE_INDEX {USHORT ServiceType;UCHAR ServiceName[48];};
struct _SERVICE_TABLE_ENTRYA {LPSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONA lpServiceProc;};
struct _SP_PROPCHANGE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD StateChange;DWORD Scope;DWORD HwProfile;};
struct _SPropertyRestriction {ULONG relop;ULONG ulPropTag;LPSPropValue lpProp;};
struct tACMFILTERTAGDETAILSW {DWORD cbStruct;DWORD dwFilterTagIndex;DWORD dwFilterTag;DWORD cbFilterSize;DWORD fdwSupport;DWORD cStandardFilters;WCHAR szFilterTag[48];};
struct tACMFORMATTAGDETAILSW {DWORD cbStruct;DWORD dwFormatTagIndex;DWORD dwFormatTag;DWORD cbFormatSize;DWORD fdwSupport;DWORD cStandardFormats;WCHAR szFormatTag[48];};
struct tagCLIENTCREATESTRUCT {HANDLE hWindowMenu;UINT idFirstChild;};
struct tagEMRCREATEMONOBRUSH {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
struct tagEMREXCLUDECLIPRECT {EMR emr;RECTL rclClip;};
struct tagEMRSETARCDIRECTION {EMR emr;DWORD iArcDirection;};
struct tagNAMED_PROFILE_INFO {DWORD dwFlags;DWORD dwCount;DWORD dwCountDevCoordinates;COLOR_NAME szPrefix;COLOR_NAME szSuffix;};
struct tagSQL_NUMERIC_STRUCT {SQLCHAR precision;SQLSCHAR scale;SQLCHAR sign;SQLCHAR val[16];};
struct wavefilter_volume_tag {WAVEFILTER wfltr;DWORD dwVolume;};
typedef HRESULT ( *FILESAVEMARKNOTEXIST)(LPSTR lpFileList, LPSTR lpDir, LPSTR lpBaseName);
typedef HRESULT  REMOVEPREPROCESSINFO(LPMESSAGE lpMessage);
struct _CHANGER_MOVE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CONSOLE_CURSOR_INFO {DWORD dwSize;BOOL bVisible;};
struct _CRL_DIST_POINT_NAME {DWORD dwDistPointNameChoice;_CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 __anonymous0;};
struct _DPLDATA_PLAYERSCORE {DWORD dwScoreCount;LONG Score[1];};
struct _HTTP_FILTER_AUTHENT {CHAR *pszUser;DWORD cbUserBuff;CHAR *pszPassword;DWORD cbPasswordBuff;};
struct _HTTP_FILTER_URL_MAP { CHAR *pszURL;CHAR *pszPhysicalPath;DWORD cbPathBuff;};
struct _HTTP_FILTER_VERSION {DWORD dwServerFilterVersion;DWORD dwFilterVersion;CHAR lpszFilterDesc[257];DWORD dwFlags;};
struct _LUID_AND_ATTRIBUTES {LUID Luid;DWORD Attributes;};
struct _PRINTER_NOTIFY_INFO {DWORD Version;DWORD Flags;DWORD Count;PRINTER_NOTIFY_INFO_DATA aData[1];};
struct _PROCESS_INFORMATION {HANDLE hProcess;HANDLE hThread;DWORD dwProcessId;DWORD dwThreadId;};
struct _RAS_PPP_ATCP_RESULT {DWORD dwError;WCHAR wszAddress[33];};
struct _RAS_PPP_IPCP_RESULT {DWORD dwError;WCHAR wszAddress[16];};
struct _SContentRestriction {ULONG ulFuzzyLevel;ULONG ulPropTag;LPSPropValue lpProp;};
struct _SYSTEM_POWER_STATUS {BYTE ACLineStatus;BYTE BatteryFlag;BYTE BatteryLifePercent;BYTE Reserved1;DWORD BatteryLifeTime;DWORD BatteryFullLifeTime;};
struct _wireSAFEARR_BRECORD {ULONG Size;wireBRECORD *aRecord;};
struct _wireSAFEARR_HAVEIID {ULONG Size;IUnknown **apUnknown;IID iid;};
struct _wireSAFEARR_VARIANT {ULONG Size;wireVARIANT *aVariant;};
struct adpcmewaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct gsm610waveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;};
struct sonarcwaveformat_tag {WAVEFORMATEX wfx;WORD wCompType;};
struct tagAM_MPEGSYSTEMTYPE {DWORD dwBitRate;DWORD cStreams;AM_MPEGSTREAMTYPE Streams[1];};
struct tagBDN_HARDWARE_ADDR {WORD Type;LPVOID Address;WORD AddressLength;};
struct tagCBTACTIVATESTRUCT {BOOL fMouse;HWND hWndActive;};
struct tagCLEANLOCALSTORAGE {IUnknown *pInterface;PVOID pStorage;DWORD flags;};
struct tagDBINDEXCOLUMNDESC {DBID *pColumnID;DBINDEX_COL_ORDER eIndexColOrder;};
struct tagEMRSELECTCLIPPATH {EMR emr;DWORD iMode;};
struct tagEMRSETMAPPERFLAGS {EMR emr;DWORD dwFlags;};
struct tagMEASUREITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemWidth;UINT itemHeight;DWORD itemData;};
struct tagNCCALCSIZE_PARAMS {RECT rgrc[3];PWINDOWPOS lppos;};
struct tagNMLVODSTATECHANGE {NMHDR hdr;int iFrom;int iTo;UINT uNewState;UINT uOldState;};
struct tagNONCLIENTMETRICSA {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTA lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTA lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTA lfMenuFont;LOGFONTA lfStatusFont;LOGFONTA lfMessageFont;};
struct tagNONCLIENTMETRICSW {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTW lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTW lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTW lfMenuFont;LOGFONTW lfStatusFont;LOGFONTW lfMessageFont;};
struct tagPUBLISHEDINFOLIST {DWORD cPublApps;PUBLISHEDAPPINFO *pPublAppInfo;};
struct tagRASAUTODIALENTRYA {DWORD dwSize;DWORD dwFlags;DWORD dwDialingLocation;CHAR szEntry[257];};
struct tagRASAUTODIALENTRYW {DWORD dwSize;DWORD dwFlags;DWORD dwDialingLocation;WCHAR szEntry[257];};
struct tagRASDIALEXTENSIONS {DWORD dwSize;DWORD dwfOptions;HWND hwndParent;DWORD reserved;DWORD reserved1;};
struct tagUNDETERMINESTRUCT {DWORD dwSize;UINT uDefIMESize;UINT uDefIMEPos;UINT uUndetTextLen;UINT uUndetTextPos;UINT uUndetAttrPos;UINT uCursorPos;UINT uDeltaStart;UINT uDetermineTextLen;UINT uDetermineTextPos;UINT uDetermineDelimPos;UINT uYomiTextLen;UINT uYomiTextPos;UINT uYomiDelimPos;};
struct AM_DVDCOPY_TITLEKEY {ULONG KeyFlags;ULONG Reserved1[2];UCHAR TitleKey[6];UCHAR Reserved2[2];};
struct CLUS_PARTITION_INFO {DWORD dwFlags;WCHAR szDeviceName[260];WCHAR szVolumeLabel[260];DWORD dwSerialNumber;DWORD rgdwMaximumComponentLength;DWORD dwFileSystemFlags;WCHAR szFileSystem[32];};
typedef void (*D3DRMOBJECTCALLBACK)(LPDIRECT3DRMOBJECT obj, LPVOID arg);
typedef DWORD ( *PDO_UPDATE_SERVICES)(ULONG InterfaceIndex);
typedef void ( *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved);
typedef UINT ( *PSP_FILE_CALLBACK_A)(PVOID Context, UINT Notification, UINT Param1, UINT Param2);
typedef UINT ( *PSP_FILE_CALLBACK_W)(PVOID Context, UINT Notification, UINT Param1, UINT Param2);
struct _ACTRL_ACCESS_INFOA {ULONG fAccessPermission;LPSTR lpAccessPermissionName;};
struct _BROWSER_STATISTICS {LARGE_INTEGER StatisticsStartTime;LARGE_INTEGER NumberOfServerAnnouncements;LARGE_INTEGER NumberOfDomainAnnouncements;ULONG NumberOfElectionPackets;ULONG NumberOfMailslotWrites;ULONG NumberOfGetBrowserServerListRequests;ULONG NumberOfServerEnumerations;ULONG NumberOfDomainEnumerations;ULONG NumberOfOtherEnumerations;ULONG NumberOfMissedServerAnnouncements;ULONG NumberOfMissedMailslotDatagrams;ULONG NumberOfMissedGetBrowserServerListRequests;ULONG NumberOfFailedServerAnnounceAllocations;ULONG NumberOfFailedMailslotAllocations;ULONG NumberOfFailedMailslotReceives;ULONG NumberOfFailedMailslotWrites;ULONG NumberOfFailedMailslotOpens;ULONG NumberOfDuplicateMasterAnnouncements;LARGE_INTEGER NumberOfIllegalDatagrams;};
struct _CERT_ALT_NAME_INFO {DWORD cAltEntry;PCERT_ALT_NAME_ENTRY rgAltEntry;};
struct _CERT_POLICIES_INFO {DWORD cPolicyInfo;CERT_POLICY_INFO *rgPolicyInfo;};
struct _CHANGER_SET_ACCESS {CHANGER_ELEMENT Element;DWORD Control;};
struct _CRYPT_CONTENT_INFO {LPSTR pszObjId;CRYPT_DER_BLOB Content;};
struct _D3DPROCESSVERTICES {DWORD dwFlags;WORD wStart;WORD wDest;DWORD dwCount;DWORD dwReserved;};
struct _DDVIDEOPORTCONNECT {DWORD dwSize;DWORD dwPortWidth;GUID guidTypeID;DWORD dwFlags;DWORD dwReserved1;};
struct _DIOBJECTDATAFORMAT { GUID *pguid;DWORD dwOfs;DWORD dwType;DWORD dwFlags;};
struct _DPLDATA_PLAYERGUID {GUID guidPlayer;DWORD dwPlayerFlags;};
struct _DPLMSG_GETPROPERTY {DWORD dwType;DWORD dwRequestID;GUID guidPlayer;GUID guidPropertyTag;};
struct _DPLMSG_SETPROPERTY {DWORD dwType;DWORD dwRequestID;GUID guidPlayer;GUID guidPropertyTag;DWORD dwDataSize;DWORD dwPropertyData[1];};
struct _EXCEPTION_POINTERS {PEXCEPTION_RECORD ExceptionRecord;PCONTEXT ContextRecord;};
struct _FLOATING_SAVE_AREA {DWORD ControlWord;DWORD StatusWord;DWORD TagWord;DWORD ErrorOffset;DWORD ErrorSelector;DWORD DataOffset;DWORD DataSelector;BYTE RegisterArea[80];DWORD Cr0NpxState;};
struct _GETVERSIONINPARAMS {BYTE bVersion;BYTE bRevision;BYTE bReserved;BYTE bIDEDeviceMap;DWORD fCapabilities;DWORD dwReserved[4];};
struct _HSE_URL_MAPEX_INFO {CHAR lpszPath[260];DWORD dwFlags;DWORD cchMatchingPath;DWORD cchMatchingURL;DWORD dwReserved1;DWORD dwReserved2;};
struct _MOUSE_EVENT_RECORD {COORD dwMousePosition;DWORD dwButtonState;DWORD dwControlKeyState;DWORD dwEventFlags;};
struct _RSVP_FILTERSPEC_V4 {IN_ADDR_IPV4 Address;USHORT Unused;USHORT Port;};
struct _RSVP_FILTERSPEC_V6 {IN_ADDR_IPV6 Address;USHORT UnUsed;USHORT Port;};
struct _SEC_OBJECT_ELEMENT {GUID guidObjectType;DBID ObjectID;};
struct _SID_AND_ATTRIBUTES {PSID Sid;DWORD Attributes;};
struct _SLargeIntegerArray {ULONG cValues;LARGE_INTEGER *lpli;};
struct _SP_INF_INFORMATION {DWORD InfStyle;DWORD InfCount;BYTE VersionData[1];};
struct _SQL_CONNECT_PARAMS {DATASOURCE_TYPE ds;char *pszServer;char *pszUserName;char *pszPasswd;char *pszDbName;char *pszKey;PDECRYPTFUNC pFunc;};
struct _STAT_WORKSTATION_0 {LARGE_INTEGER StatisticsStartTime;LARGE_INTEGER BytesReceived;LARGE_INTEGER SmbsReceived;LARGE_INTEGER PagingReadBytesRequested;LARGE_INTEGER NonPagingReadBytesRequested;LARGE_INTEGER CacheReadBytesRequested;LARGE_INTEGER NetworkReadBytesRequested;LARGE_INTEGER BytesTransmitted;LARGE_INTEGER SmbsTransmitted;LARGE_INTEGER PagingWriteBytesRequested;LARGE_INTEGER NonPagingWriteBytesRequested;LARGE_INTEGER CacheWriteBytesRequested;LARGE_INTEGER NetworkWriteBytesRequested;DWORD InitiallyFailedOperations;DWORD FailedCompletionOperations;DWORD ReadOperations;DWORD RandomReadOperations;DWORD ReadSmbs;DWORD LargeReadSmbs;DWORD SmallReadSmbs;DWORD WriteOperations;DWORD RandomWriteOperations;DWORD WriteSmbs;DWORD LargeWriteSmbs;DWORD SmallWriteSmbs;DWORD RawReadsDenied;DWORD RawWritesDenied;DWORD NetworkErrors;DWORD Sessions;DWORD FailedSessions;DWORD Reconnects;DWORD CoreConnects;DWORD Lanman20Connects;DWORD Lanman21Connects;DWORD LanmanNtConnects;DWORD ServerDisconnects;DWORD HungSessions;DWORD UseCount;DWORD FailedUseCount;DWORD CurrentCommands;};
struct _VERIFY_INFORMATION {LARGE_INTEGER StartingOffset;DWORD Length;};
struct _tagGET_SET_SYMPATH {PCSTR Args;PSTR Result;int Length;};
struct lineforwardlist_tag {DWORD dwTotalSize;DWORD dwNumEntries;LINEFORWARD ForwardList[1];};
struct tagBITMAPCOREHEADER {DWORD bcSize;WORD bcWidth;WORD bcHeight;WORD bcPlanes;WORD bcBitCount;};
struct tagBITMAPFILEHEADER {WORD bfType;DWORD bfSize;WORD bfReserved1;WORD bfReserved2;DWORD bfOffBits;};
struct tagDELETEITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;HWND hwndItem;UINT itemData;};
struct tagEMROFFSETCLIPRGN {EMR emr;POINTL ptlOffset;};
struct tagEMRRESIZEPALETTE {EMR emr;DWORD ihPal;DWORD cEntries;};
struct tagEMRSELECTPALETTE {EMR emr;DWORD ihPal;};
struct tagEMRSETMITERLIMIT {EMR emr;FLOAT eMiterLimit;};
struct tagENUMLOGFONTEXDVA {ENUMLOGFONTEXA elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagENUMLOGFONTEXDVW {ENUMLOGFONTEXW elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagHW_PROFILE_INFOA {DWORD dwDockInfo;CHAR szHwProfileGuid[39];CHAR szHwProfileName[80];};
struct tagHW_PROFILE_INFOW {DWORD dwDockInfo;WCHAR szHwProfileGuid[39];WCHAR szHwProfileName[80];};
struct tagNEWTEXTMETRICEXA {NEWTEXTMETRICA ntmTm;FONTSIGNATURE ntmFontSig;};
struct tagNEWTEXTMETRICEXW {NEWTEXTMETRICW ntmTm;FONTSIGNATURE ntmFontSig;};
struct wavefilter_echo_tag {WAVEFILTER wfltr;DWORD dwVolume;DWORD dwDelay;};
typedef LRESULT ( *CAPCONTROLCALLBACK)(HWND hWnd, int nState);
typedef BOOL ( *CODEPAGE_ENUMPROCA)(LPSTR);
struct ClassArrayOfObject {int32_t MSReserved;unsigned int length;HObject *body[1];};
struct ClassArrayOfString {int32_t MSReserved;unsigned int length;HString *body[1];};
typedef void ( *GLUtessCombineProc)(GLdouble *       , void * *       , GLfloat *       , void **);
typedef BOOL ( *LPBLOCKINGCALLBACK)(DWORD dwContext);
typedef DWORD ( *PDISABLE_INTERFACE)(ULONG InterfaceIndex);
typedef HRESULT ( *PFN_WPPDELETESITEA)(LPCSTR sSiteName);
typedef HRESULT (*PMSBDNOUTPUTCREATE)(MSBDN_OUTPUT_SUBSYSTEM *, DWORD);
typedef void ( *PRPC_STUB_FUNCTION)(IRpcStubBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer, PRPC_MESSAGE pRpcMessage, DWORD *pdwStubPhase);
typedef RPC_STATUS  RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid, void *Context);
typedef BOOL ( *VDMBREAKTHREADPROC)(HANDLE);
typedef DWORD ( *VDMGETDBGFLAGSPROC)(HANDLE);
struct _CRYPT_OBJID_TABLE {DWORD dwAlgId;LPCSTR pszObjId;};
struct _DSBPOSITIONNOTIFY {DWORD dwOffset;HANDLE hEventNotify;};
struct _ENCRYPTION_BUFFER {DWORD EncryptionOperation;BYTE Private[1];};
struct _FMS_GETDRIVEINFOA {DWORD dwTotalSpace;DWORD dwFreeSpace;CHAR szPath[260];CHAR szVolume[14];CHAR szShare[128];};
struct _FMS_GETDRIVEINFOW {DWORD dwTotalSpace;DWORD dwFreeSpace;WCHAR szPath[260];WCHAR szVolume[14];WCHAR szShare[128];};
struct _FORMAT_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;};
struct _GLYPHMETRICSFLOAT {FLOAT gmfBlackBoxX;FLOAT gmfBlackBoxY;POINTFLOAT gmfptGlyphOrigin;FLOAT gmfCellIncX;FLOAT gmfCellIncY;};
struct _IMAGE_FILE_HEADER {WORD Machine;WORD NumberOfSections;DWORD TimeDateStamp;DWORD PointerToSymbolTable;DWORD NumberOfSymbols;WORD SizeOfOptionalHeader;WORD Characteristics;};
struct _IMAGE_ROM_HEADERS {IMAGE_FILE_HEADER FileHeader;IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;};
struct _IPX_SPECIFIC_DATA {DWORD FSD_Flags;USHORT FSD_TickCount;USHORT FSD_HopCount;};
struct _QOS_TRAFFIC_CLASS {QOS_OBJECT_HDR ObjectHdr;ULONG TrafficClass;};
struct _RAS_SECURITY_INFO {DWORD LastError;DWORD BytesReceived;CHAR DeviceName[129];};
struct _SERVICE_ADDRESSES {DWORD dwAddressCount;SERVICE_ADDRESS Addresses[1];};
struct _SERVICE_TYPE_INFO {DWORD dwTypeNameOffset;DWORD dwValueCount;SERVICE_TYPE_VALUE Values[1];};
struct _SP_DRVINFO_DATA_A {DWORD cbSize;DWORD DriverType;DWORD Reserved;CHAR Description[256];CHAR MfgName[256];CHAR ProviderName[256];};
struct _SP_DRVINFO_DATA_W {DWORD cbSize;DWORD DriverType;DWORD Reserved;WCHAR Description[256];WCHAR MfgName[256];WCHAR ProviderName[256];};
struct _SP_MOVEDEV_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;SP_DEVINFO_DATA SourceDeviceInfoData;};
struct _SPropProblemArray {ULONG cProblem;SPropProblem aProblem[1];};
struct _STnefProblemArray {ULONG cProblem;STnefProblem aProblem[1];};
struct _TAPE_GET_POSITION {DWORD Type;DWORD Partition;LARGE_INTEGER Offset;};
struct _tagREAD_WRITE_MSR {ULONG Msr;LONGLONG Value;};
struct linecallparams_tag {DWORD dwTotalSize;DWORD dwBearerMode;DWORD dwMinRate;DWORD dwMaxRate;DWORD dwMediaMode;DWORD dwCallParamFlags;DWORD dwAddressMode;DWORD dwAddressID;LINEDIALPARAMS DialParams;DWORD dwOrigAddressSize;DWORD dwOrigAddressOffset;DWORD dwDisplayableAddressSize;DWORD dwDisplayableAddressOffset;DWORD dwCalledPartySize;DWORD dwCalledPartyOffset;DWORD dwCommentSize;DWORD dwCommentOffset;DWORD dwUserUserInfoSize;DWORD dwUserUserInfoOffset;DWORD dwHighLevelCompSize;DWORD dwHighLevelCompOffset;DWORD dwLowLevelCompSize;DWORD dwLowLevelCompOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwPredictiveAutoTransferStates;DWORD dwTargetAddressSize;DWORD dwTargetAddressOffset;DWORD dwSendingFlowspecSize;DWORD dwSendingFlowspecOffset;DWORD dwReceivingFlowspecSize;DWORD dwReceivingFlowspecOffset;DWORD dwDeviceClassSize;DWORD dwDeviceClassOffset;DWORD dwDeviceConfigSize;DWORD dwDeviceConfigOffset;DWORD dwCallDataSize;DWORD dwCallDataOffset;DWORD dwNoAnswerTimeout;DWORD dwCallingPartyIDSize;DWORD dwCallingPartyIDOffset;};
struct linecallstatus_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwCallState;DWORD dwCallStateMode;DWORD dwCallPrivilege;DWORD dwCallFeatures;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwCallFeatures2;SYSTEMTIME tStateEntryTime;};
struct tACMFILTERDETAILSA {DWORD cbStruct;DWORD dwFilterIndex;DWORD dwFilterTag;DWORD fdwSupport;LPWAVEFILTER pwfltr;DWORD cbwfltr;char szFilter[128];};
struct tACMFORMATDETAILSA {DWORD cbStruct;DWORD dwFormatIndex;DWORD dwFormatTag;DWORD fdwSupport;LPWAVEFORMATEX pwfx;DWORD cbwfx;char szFormat[128];};
struct tagCOLORADJUSTMENT {WORD caSize;WORD caFlags;WORD caIlluminantIndex;WORD caRedGamma;WORD caGreenGamma;WORD caBlueGamma;WORD caReferenceBlack;WORD caReferenceWhite;SHORT caContrast;SHORT caBrightness;SHORT caColorfulness;SHORT caRedGreenTint;};
struct tagDBCONTENTVECTOR {LONG lWeight;DWORD dwRankingMethod;};
struct tagEMRSELECTOBJECT {EMR emr;DWORD ihObject;};
struct tagEMRSETTEXTCOLOR {EMR emr;COLORREF crColor;};
struct tagENUMTEXTMETRICA {NEWTEXTMETRICEXA etmNewTextMetricEx;AXESLISTA etmAxesList;};
struct tagENUMTEXTMETRICW {NEWTEXTMETRICEXW etmNewTextMetricEx;AXESLISTW etmAxesList;};
struct tagMCI_BREAK_PARMS {DWORD dwCallback;int nVirtKey;HWND hwndBreak;};
struct tagMCI_INFO_PARMSA {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_LOAD_PARMSA {DWORD dwCallback;LPCSTR lpfilename;};
struct tagMCI_SAVE_PARMSA {DWORD dwCallback;LPCSTR lpfilename;};
struct tagPACKAGEINFOLIST {DWORD cPackInfo;PACKAGEINFO *pPackageInfo;};
struct tagRASCREDENTIALSA {DWORD dwSize;DWORD dwMask;CHAR szUserName[257];CHAR szPassword[257];CHAR szDomain[16];};
struct tagRASCREDENTIALSW {DWORD dwSize;DWORD dwMask;WCHAR szUserName[257];WCHAR szPassword[257];WCHAR szDomain[16];};
struct tagTRACKMOUSEEVENT {DWORD cbSize;DWORD dwFlags;HWND hwndTrack;DWORD dwHoverTime;};
struct tagTTPOLYGONHEADER {DWORD cb;DWORD dwType;POINTFX pfxStart;};
struct tagTVINSERTSTRUCTA {HTREEITEM hParent;HTREEITEM hInsertAfter;tagTVINSERTSTRUCTA___2E49B666B82A4FD641FAFC76A3D29C8E __anonymous0;};
struct tagTVINSERTSTRUCTW {HTREEITEM hParent;HTREEITEM hInsertAfter;tagTVINSERTSTRUCTW___3D7B1E305294EDBA05E56815A0E14872 __anonymous0;};
struct tagUSEROBJECTFLAGS {BOOL fInherit;BOOL fReserved;DWORD dwFlags;};
struct tag_IDFCHANNELINFO {DWORD cbStruct;DWORD dwChannel;DWORD cbInitData;BYTE abData[];};
struct tag_IDFPATCHMAPHDR {DWORD cbStruct;BYTE abPatchMap[128];};
typedef BOOL ( *CALINFO_ENUMPROCA)(LPSTR);
struct ClassArrayOfArray {int32_t MSReserved;unsigned int length;JHandle *body[1];};
typedef void (*D3DRMWRAPCALLBACK)(LPD3DVECTOR, int *u, int *v, LPD3DVECTOR a, LPD3DVECTOR b, LPVOID);
typedef BOOL ( *DATEFMT_ENUMPROCA)(LPSTR);
typedef HRESULT ( *DLLGETVERSIONPROC)(DLLVERSIONINFO *);
typedef ULONG  MAPISENDDOCUMENTS(ULONG ulUIParam, LPSTR lpszDelimChar, LPSTR lpszFilePaths, LPSTR lpszFileNames, ULONG ulReserved);
typedef DWORD ( *PDELETE_INTERFACE)(ULONG InterfaceIndex);
typedef DWORD ( *PDO_UPDATE_ROUTES)(ULONG InterfaceIndex);
typedef DWORD ( *PENABLE_INTERFACE)(ULONG InterfaceIndex);
typedef BOOL (*PFN_CPD_ADD_STORE)(struct _CRYPT_PROVIDER_DATA *pProvData, HCERTSTORE hStore2Add);
typedef DWORD ( *PHOSTSEC_SHUTDOWN)(PVOID, DWORD);
typedef DWORD ( *PUNBIND_INTERFACE)(ULONG InterfaceIndex);
typedef void  RPC_OBJECT_INQ_FN(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status);
typedef BOOL ( *TIMEFMT_ENUMPROCA)(LPSTR);
struct _ACTRL_OVERLAPPED {ULONG Reserved1;ULONG Reserved2;HANDLE hEvent;};
struct _CERT_KEY_CONTEXT {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;};
struct _CRYPT_ATTRIBUTES {DWORD cAttr;PCRYPT_ATTRIBUTE rgAttr;};
struct _DISK_PERFORMANCE {LARGE_INTEGER BytesRead;LARGE_INTEGER BytesWritten;LARGE_INTEGER ReadTime;LARGE_INTEGER WriteTime;DWORD ReadCount;DWORD WriteCount;DWORD QueueDepth;};
struct _FIND_NAME_HEADER {WORD node_count;UCHAR reserved;UCHAR unique_group;};
struct _HSE_VERSION_INFO {DWORD dwExtensionVersion;CHAR lpszExtensionDesc[256];};
struct _IMAGE_DOS_HEADER {WORD e_magic;WORD e_cblp;WORD e_cp;WORD e_crlc;WORD e_cparhdr;WORD e_minalloc;WORD e_maxalloc;WORD e_ss;WORD e_sp;WORD e_csum;WORD e_ip;WORD e_cs;WORD e_lfarlc;WORD e_ovno;WORD e_res[4];WORD e_oemid;WORD e_oeminfo;WORD e_res2[10];LONG e_lfanew;};
struct _IMAGE_LINENUMBER {union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 Type;WORD Linenumber;};
struct _IPX_ADAPTER_INFO {ULONG PacketType;WCHAR AdapterName[48];};
struct _IPX_SERVER_ENTRY {USHORT Type;UCHAR Name[48];UCHAR Network[4];UCHAR Node[6];UCHAR Socket[2];USHORT HopCount;};
struct _KEY_TYPE_SUBTYPE {DWORD dwKeySpec;GUID Type;GUID Subtype;};
struct _NS_SERVICE_INFOA {DWORD dwNameSpace;SERVICE_INFOA ServiceInfo;};
struct _NS_SERVICE_INFOW {DWORD dwNameSpace;SERVICE_INFOW ServiceInfo;};
struct _OBJECT_TYPE_LIST {WORD Level;WORD Sbz;GUID *ObjectType;};
struct _QualityOfService {FLOWSPEC SendingFlowspec;FLOWSPEC ReceivingFlowspec;WSABUF ProviderSpecific;};
struct _RSVP_STATUS_INFO {QOS_OBJECT_HDR ObjectHdr;ULONG StatusCode;ULONG ExtendedStatus1;ULONG ExtendedStatus2;};
struct _SecurityUserData {SECURITY_STRING UserName;SECURITY_STRING LogonDomainName;SECURITY_STRING LogonServer;PSID pSid;};
struct _TAPE_WRITE_MARKS {DWORD Type;DWORD Count;BOOLEAN Immediate;};
struct _TIME_OF_DAY_INFO {DWORD tod_elapsedt;DWORD tod_msecs;DWORD tod_hours;DWORD tod_mins;DWORD tod_secs;DWORD tod_hunds;LONG tod_timezone;DWORD tod_tinterval;DWORD tod_day;DWORD tod_month;DWORD tod_year;DWORD tod_weekday;};
struct _TOKEN_PRIVILEGES {DWORD PrivilegeCount;LUID_AND_ATTRIBUTES Privileges[1];};
struct _tagCOMPONENTSOPT {DWORD dwSize;BOOL fEnableComponents;BOOL fActiveDesktop;};
struct _wireSAFEARR_BSTR {ULONG Size;wireBSTR *aBstr;};
struct pcmwaveformat_tag {WAVEFORMAT wf;WORD wBitsPerSample;};
struct tagBITMAPCOREINFO {BITMAPCOREHEADER bmciHeader;RGBTRIPLE bmciColors[1];};
struct tagCOPYDATASTRUCT {DWORD dwData;DWORD cbData;PVOID lpData;};
struct tagEMRPIXELFORMAT {EMR emr;PIXELFORMATDESCRIPTOR pfd;};
struct tagENUMLOGFONTEXA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];BYTE elfScript[32];};
struct tagENUMLOGFONTEXW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];WCHAR elfScript[32];};
struct tagEXBMINFOHEADER {BITMAPINFOHEADER bmi;DWORD biExtDataOffset;};
struct tagMPEG2VIDEOINFO {VIDEOINFOHEADER2 hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;DWORD dwProfile;DWORD dwLevel;DWORD dwFlags;DWORD dwSequenceHeader[1];};
struct tagMSLLHOOKSTRUCT {POINT pt;DWORD mouseData;DWORD flags;DWORD time;DWORD dwExtraInfo;};
struct tagNMLVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;int iSubItem;};
struct tagNMTTCUSTOMDRAW {NMCUSTOMDRAW nmcd;UINT uDrawFlags;};
struct tagNMTVCUSTOMDRAW {NMCUSTOMDRAW nmcd;COLORREF clrText;COLORREF clrTextBk;int iLevel;};
struct tagRASDIALPARAMSA {DWORD dwSize;CHAR szEntryName[257];CHAR szPhoneNumber[129];CHAR szCallbackNumber[129];CHAR szUserName[257];CHAR szPassword[257];CHAR szDomain[16];DWORD dwSubEntry;DWORD dwCallbackId;};
struct tagRASDIALPARAMSW {DWORD dwSize;WCHAR szEntryName[257];WCHAR szPhoneNumber[129];WCHAR szCallbackNumber[129];WCHAR szUserName[257];WCHAR szPassword[257];WCHAR szDomain[16];DWORD dwSubEntry;DWORD dwCallbackId;};
struct tagSAFEARRAYBOUND {ULONG cElements;LONG lLbound;};
struct tagSTRINGEXSTRUCT {DWORD dwSize;UINT uDeterminePos;UINT uDetermineDelimPos;UINT uYomiPos;UINT uYomiDelimPos;};
struct tagVFW_FILTERLIST {UINT cFilters;CLSID aClsId[1];};
struct tag_TRUECOLORINFO {DWORD dwBitMasks[3];RGBQUAD bmiColors[256];};
typedef void ( *ASYNC_COMPLETION)(DRV_REQUESTID dwRequestID, LONG lResult);
typedef LRESULT ( *CAPYIELDCALLBACK)(HWND hWnd);
typedef BOOL ( *LOCALE_ENUMPROCA)(LPSTR);
typedef UINT ( *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT ( *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
typedef int ( *LPWPUCLOSETHREAD)(LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef WSAEVENT ( *LPWPUCREATEEVENT)(LPINT lpErrno);
typedef int ( *LPWSPCLOSESOCKET)(SOCKET s, LPINT lpErrno);
typedef int ( *LPWSPGETPEERNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
typedef int ( *LPWSPGETSOCKNAME)(SOCKET s, struct sockaddr *name, LPINT namelen, LPINT lpErrno);
struct MS_ADDINFO_BLOB_ {DWORD cbStruct;DWORD cbMemObject;BYTE *pbMemObject;DWORD cbMemSignedMsg;BYTE *pbMemSignedMsg;};
typedef BOOL (*PFN_CPD_ADD_SGNR)(struct _CRYPT_PROVIDER_DATA *pProvData, BOOL fCounterSigner, DWORD idxSigner, struct _CRYPT_PROVIDER_SGNR *pSgnr2Add);
typedef BOOL ( *PHANDLER_ROUTINE)(DWORD CtrlType);
typedef DWORD ( *PSET_GLOBAL_INFO)(PVOID GlobalInfo);
typedef void ( *PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);
union RAS_PARAMS_VALUE {DWORD Number;struct RAS_PARAMS_VALUE___3E41164A919764C5D03D915E312E931F String;};
struct _CERT_CONTEXT_EX {CERT_CONTEXT CertContext;DWORD cbAllocated;DWORD dwCertificateFlags;};
struct _CERT_EXTENSIONS {DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CERT_NAME_VALUE {DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _CHANGER_ELEMENT {ELEMENT_TYPE ElementType;DWORD ElementAddress;};
struct _CRYPT_HASH_INFO {CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_HASH_BLOB Hash;};
struct _D3DRMLOADMEMORY {LPVOID lpMemory;DWORD dSize;};
struct _D3DRMQUATERNION {D3DVALUE s;D3DVECTOR v;};
struct _DDVIDEOPORTDESC {DWORD dwSize;DWORD dwFieldWidth;DWORD dwVBIWidth;DWORD dwFieldHeight;DWORD dwMicrosecondsPerField;DWORD dwMaxPixelsPerSecond;DWORD dwVideoPortID;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;DWORD dwReserved2;DWORD dwReserved3;};
struct _DISPLAY_DEVICEA {DWORD cb;BYTE DeviceName[32];BYTE DeviceString[128];DWORD StateFlags;};
struct _DISPLAY_DEVICEW {DWORD cb;WCHAR DeviceName[32];WCHAR DeviceString[128];DWORD StateFlags;};
struct _GET_MEDIA_TYPES {DWORD DeviceType;DWORD MediaInfoCount;DEVICE_MEDIA_INFO MediaInfo[1];};
struct _HTTP_FILTER_LOG { CHAR *pszClientHostName; CHAR *pszClientUserName; CHAR *pszServerName; CHAR *pszOperation; CHAR *pszTarget; CHAR *pszParameters;DWORD dwHttpStatus;DWORD dwWin32Status;DWORD dwBytesSent;DWORD dwBytesRecvd;DWORD msTimeForProcessing;};
struct _IMAGEHLP_SYMBOL {DWORD SizeOfStruct;DWORD Address;DWORD Size;DWORD Flags;DWORD MaxNameLength;CHAR Name[1];};
struct _MEMORYSTATUSVLM {DWORD dwLength;DWORD dwMemoryLoad;DWORDLONG ullTotalPhys;DWORDLONG ullAvailPhys;DWORDLONG ullTotalPageFile;DWORDLONG ullAvailPageFile;DWORDLONG ullTotalVirtual;DWORDLONG ullAvailVirtual;DWORDLONG ullAvailExtendedVirtual;};
struct _MonSharedMemory {DWORD dwSignature;DWORD fDataIsValid;DWORD ibHeaderOffset;DWORD cbHeaderSize;DWORD ibInstanceOffset;DWORD cbInstanceSize;BYTE rgbDataBlock[4000];};
struct _PATHNAME_BUFFER {DWORD PathNameLength;WCHAR Name[1];};
struct _POLICY_EFS_INFO {ULONG InfoLength;PUCHAR EfsBlob;};
struct _PRINTER_INFO_1A {DWORD Flags;LPSTR pDescription;LPSTR pName;LPSTR pComment;};
struct _PRINTER_INFO_4A {LPSTR pPrinterName;LPSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5A {LPSTR pPrinterName;LPSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7A {LPSTR pszObjectGUID;DWORD dwAction;};
struct _REASSIGN_BLOCKS {WORD Reserved;WORD Count;DWORD BlockNumber[1];};
struct _SAndRestriction {ULONG cRes;LPSRestriction lpRes;};
struct _SERVER_INFO_502 {DWORD sv502_sessopens;DWORD sv502_sessvcs;DWORD sv502_opensearch;DWORD sv502_sizreqbuf;DWORD sv502_initworkitems;DWORD sv502_maxworkitems;DWORD sv502_rawworkitems;DWORD sv502_irpstacksize;DWORD sv502_maxrawbuflen;DWORD sv502_sessusers;DWORD sv502_sessconns;DWORD sv502_maxpagedmemoryusage;DWORD sv502_maxnonpagedmemoryusage;BOOL sv502_enablesoftcompat;BOOL sv502_enableforcedlogoff;BOOL sv502_timesource;BOOL sv502_acceptdownlevelapis;BOOL sv502_lmannounce;};
struct _SERVICE_ADDRESS {DWORD dwAddressType;DWORD dwAddressFlags;DWORD dwAddressLength;DWORD dwPrincipalLength;BYTE *lpAddress;BYTE *lpPrincipal;};
struct _SHARE_INFO_1501 {DWORD shi1501_reserved;PSECURITY_DESCRIPTOR shi1501_security_descriptor;};
struct _SHDESCRIPTIONID {DWORD dwDescriptionId;CLSID clsid;};
struct _SNotRestriction {ULONG ulReserved;LPSRestriction lpRes;};
struct _SP_DEVINFO_DATA {DWORD cbSize;GUID ClassGuid;DWORD DevInst;DWORD Reserved;};
struct _SSubRestriction {ULONG ulSubObject;LPSRestriction lpRes;};
struct _USER_MARSHAL_CB {unsigned int Flags;PMIDL_STUB_MESSAGE pStubMsg;PFORMAT_STRING pReserve;};
struct _WSH_LOOKUP_NAME {WSH_NBP_TUPLE LookupTuple;ULONG NoTuples;};
struct _ensaveclipboard {NMHDR nmhdr;LONG cObjectCount;LONG cch;};
struct _gettextlengthex {DWORD flags;UINT codepage;};
struct _objectpositions {NMHDR nmhdr;LONG cObjectCount;LONG *pcpPositions;};
struct tACMSTREAMHEADER {DWORD cbStruct;DWORD fdwStatus;DWORD dwUser;LPBYTE pbSrc;DWORD cbSrcLength;DWORD cbSrcLengthUsed;DWORD dwSrcUser;LPBYTE pbDst;DWORD cbDstLength;DWORD cbDstLengthUsed;DWORD dwDstUser;DWORD dwReservedDriver[10];};
struct tagACCESSTIMEOUT {UINT cbSize;DWORD dwFlags;DWORD iTimeOutMSec;};
struct tagCAPROPVARIANT {ULONG cElems;PROPVARIANT *pElems;};
struct tagDB_VARNUMERIC {BYTE precision;SBYTE scale;BYTE sign;BYTE val[1];};
struct tagHARDWAREINPUT {DWORD uMsg;WORD wParamL;WORD wParamH;};
struct tagINTERFACEDATA {METHODDATA *pmethdata;UINT cMembers;};
struct tagINTERFACEINFO {IUnknown *pUnk;IID iid;WORD wMethod;};
struct tagLASTINPUTINFO {UINT cbSize;DWORD dwTime;};
struct tagLVHITTESTINFO {POINT pt;UINT flags;int iItem;int iSubItem;};
struct tagMQRESTRICTION {ULONG cRes;MQPROPERTYRESTRICTION *paPropRes;};
struct tagMULTIKEYHELPA {DWORD mkSize;CHAR mkKeylist;CHAR szKeyphrase[1];};
struct tagMULTIKEYHELPW {DWORD mkSize;WCHAR mkKeylist;WCHAR szKeyphrase[1];};
struct tagOEM_PENPACKET {UINT wTabletX;UINT wTabletY;UINT wPDK;UINT rgwOemData[6];DWORD dwTime;};
struct tagRASENTRYNAMEA {DWORD dwSize;CHAR szEntryName[257];};
struct tagRASENTRYNAMEW {DWORD dwSize;WCHAR szEntryName[257];};
struct tagRPCOLEMESSAGE {void *reserved1;RPCOLEDATAREP dataRepresentation;void *Buffer;ULONG cbBuffer;ULONG iMethod;void *reserved2[5];ULONG rpcFlags;};
struct tagSCROLLBARINFO {DWORD cbSize;RECT rcScrollBar;int dxyLineButton;int xyThumbTop;int xyThumbBottom;int bogus;DWORD rgstate[6];};
struct tagTBSAVEPARAMSA {HKEY hkr;LPCSTR pszSubKey;LPCSTR pszValueName;};
struct tagTCHITTESTINFO {POINT pt;UINT flags;};
struct tagTCITEMHEADERA {UINT mask;UINT lpReserved1;UINT lpReserved2;LPSTR pszText;int cchTextMax;int iImage;};
struct tagTHREADENTRY32 {DWORD dwSize;DWORD cntUsage;DWORD th32ThreadID;DWORD th32OwnerProcessID;LONG tpBasePri;LONG tpDeltaPri;DWORD dwFlags;};
struct tagrpcLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
union CLUSPROP_SYNTAX {DWORD dw;CLUSPROP_SYNTAX___AAE71ADAC41F2CC60275D879B9ACCE7A __anonymous0;};
typedef void  DISMISSMODELESS(ULONG ulUIParam, LPVOID lpvContext);
typedef DWORD ( *DSETUP_CALLBACK)(DWORD Reason, DWORD MsgType, LPSTR szMessage, LPSTR szName, void *pInfo);
typedef int ( *LPWSPGETSOCKOPT)(SOCKET s, int level, int optname, char *optval, LPINT optlen, LPINT lpErrno);
typedef int ( *LPWSPSETSOCKOPT)(SOCKET s, int level, int optname,  char *optval, int optlen, LPINT lpErrno);
typedef DWORD ( *PFN_AUTH_NOTIFY)(DWORD, DWORD, LPVOID);
typedef void ( *PWLX_SAS_NOTIFY)(HANDLE hWlx, DWORD dwSasType);
struct _ADDJOB_INFO_1A {LPSTR Path;DWORD JobId;};
struct _CABINET_INFO_A {PCSTR CabinetPath;PCSTR CabinetFile;PCSTR DiskName;USHORT SetId;USHORT CabinetNumber;};
struct _CERT_NAME_INFO {DWORD cRDN;PCERT_RDN rgRDN;};
struct _CERT_POLICY_ID {DWORD cCertPolicyElementId;LPSTR *rgpszCertPolicyElementId;};
struct _COAUTHIDENTITY {USHORT *User;ULONG UserLength;USHORT *Domain;ULONG DomainLength;USHORT *Password;ULONG PasswordLength;ULONG Flags;};
struct _CRYPTOAPI_BLOB {DWORD cbData;BYTE *pbData;};
struct _CRYPT_BIT_BLOB {DWORD cbData;BYTE *pbData;DWORD cUnusedBits;};
struct _D3DEXECUTEDATA {DWORD dwSize;DWORD dwVertexOffset;DWORD dwVertexCount;DWORD dwInstructionOffset;DWORD dwInstructionLength;DWORD dwHVertexOffset;D3DSTATUS dsStatus;};
struct _D3DINSTRUCTION {BYTE bOpcode;BYTE bSize;WORD wCount;};
struct _DDCOLORCONTROL {DWORD dwSize;DWORD dwFlags;LONG lBrightness;LONG lContrast;LONG lHue;LONG lSaturation;LONG lSharpness;LONG lGamma;LONG lColorEnable;DWORD dwReserved1;};
struct _DRIVER_INFO_2A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;};
struct _DRIVER_INFO_3A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;};
struct _EVENTLOGRECORD {DWORD Length;DWORD Reserved;DWORD RecordNumber;DWORD TimeGenerated;DWORD TimeWritten;DWORD EventID;WORD EventType;WORD NumStrings;WORD EventCategory;WORD ReservedFlags;DWORD ClosingRecordNumber;DWORD StringOffset;DWORD UserSidLength;DWORD UserSidOffset;DWORD DataLength;DWORD DataOffset;};
struct _HD_HITTESTINFO {POINT pt;UINT flags;int iItem;};
struct _MPR_PROTOCOL_0 {DWORD dwProtocolId;WCHAR wszProtocol[41];WCHAR wszDLLName[49];};
struct _OSVERSIONINFOA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];};
struct _OSVERSIONINFOW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];};
struct _RB_HITTESTINFO {POINT pt;UINT flags;int iBand;};
struct _RIP_IF_FILTERS {ULONG SupplyFilterAction;ULONG SupplyFilterCount;ULONG ListenFilterAction;ULONG ListenFilterCount;RIP_ROUTE_FILTER_INFO RouteFilter[1];};
struct _SAP_IF_FILTERS {ULONG SupplyFilterAction;ULONG SupplyFilterCount;ULONG ListenFilterAction;ULONG ListenFilterCount;SAP_SERVICE_FILTER_INFO ServiceFilter[1];};
struct _SCurrencyArray {ULONG cValues;CURRENCY *lpcur;};
struct _SDateTimeArray {ULONG cValues;FILETIME *lpft;};
struct _SOCKET_ADDRESS {LPSOCKADDR lpSockaddr;INT iSockaddrLength;};
struct _SOURCE_MEDIA_A {PCSTR Reserved;PCSTR Tagfile;PCSTR Description;PCSTR SourcePath;PCSTR SourceFile;DWORD Flags;};
struct _SOrRestriction {ULONG cRes;LPSRestriction lpRes;};
union _ULARGE_INTEGER {_ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC __anonymous0;struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC u;ULONGLONG QuadPart;};
struct _USER_INFO_1020 {DWORD usri1020_units_per_week;LPBYTE usri1020_logon_hours;};
struct _WKSTA_INFO_502 {DWORD wki502_char_wait;DWORD wki502_collection_time;DWORD wki502_maximum_collection_count;DWORD wki502_keep_conn;DWORD wki502_max_cmds;DWORD wki502_sess_timeout;DWORD wki502_siz_char_buf;DWORD wki502_max_threads;DWORD wki502_lock_quota;DWORD wki502_lock_increment;DWORD wki502_lock_maximum;DWORD wki502_pipe_increment;DWORD wki502_pipe_maximum;DWORD wki502_cache_file_timeout;DWORD wki502_dormant_file_limit;DWORD wki502_read_ahead_throughput;DWORD wki502_num_mailslot_buffers;DWORD wki502_num_srv_announce_buffers;DWORD wki502_max_illegal_datagram_events;DWORD wki502_illegal_datagram_event_reset_frequency;BOOL wki502_log_election_packets;BOOL wki502_use_opportunistic_locking;BOOL wki502_use_unlock_behind;BOOL wki502_use_close_behind;BOOL wki502_buf_named_pipes;BOOL wki502_use_lock_read_unlock;BOOL wki502_utilize_nt_caching;BOOL wki502_use_raw_read;BOOL wki502_use_raw_write;BOOL wki502_use_write_raw_data;BOOL wki502_use_encryption;BOOL wki502_buf_files_deny_write;BOOL wki502_buf_read_only_files;BOOL wki502_force_core_create_mode;BOOL wki502_use_512_byte_max_transfer;};
struct _audcapinfolist {ULONG cFormats;AUDCAP_INFO aFormats[1];};
struct _tp_start_entry {DWORD bpNext;UCHAR szRegKey[128];};
struct _vidcapinfolist {ULONG cFormats;VIDCAP_INFO aFormats[1];};
struct _wfinddatai64_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;long long size;unsigned short name[260];};
struct adapterperfdata {ULONG inuse;ULONG ServiceNameIndex;ULONG FirstCounterIndex;ADAPTERCOUNTER TotalBytesReceived;ADAPTERCOUNTER TotalBytesTransmitted;ADAPTERCOUNTER TotalFramesReceived;ADAPTERCOUNTER TotalFramesTransmitted;ADAPTERCOUNTER SuccessfulConnects;ADAPTERCOUNTER ConnectionFailures;ADAPTERCOUNTER TotalBytesThroughput;ADAPTERCOUNTER TotalFramesThroughput;ADAPTERCOUNTER AdapterFailures;ADAPTERCOUNTER reserved[11];ULONG pad;};
struct linedevcaps_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;DWORD dwProviderInfoSize;DWORD dwProviderInfoOffset;DWORD dwSwitchInfoSize;DWORD dwSwitchInfoOffset;DWORD dwPermanentLineID;DWORD dwLineNameSize;DWORD dwLineNameOffset;DWORD dwStringFormat;DWORD dwAddressModes;DWORD dwNumAddresses;DWORD dwBearerModes;DWORD dwMaxRate;DWORD dwMediaModes;DWORD dwGenerateToneModes;DWORD dwGenerateToneMaxNumFreq;DWORD dwGenerateDigitModes;DWORD dwMonitorToneMaxNumFreq;DWORD dwMonitorToneMaxNumEntries;DWORD dwMonitorDigitModes;DWORD dwGatherDigitsMinTimeout;DWORD dwGatherDigitsMaxTimeout;DWORD dwMedCtlDigitMaxListSize;DWORD dwMedCtlMediaMaxListSize;DWORD dwMedCtlToneMaxListSize;DWORD dwMedCtlCallStateMaxListSize;DWORD dwDevCapFlags;DWORD dwMaxNumActiveCalls;DWORD dwAnswerMode;DWORD dwRingModes;DWORD dwLineStates;DWORD dwUUIAcceptSize;DWORD dwUUIAnswerSize;DWORD dwUUIMakeCallSize;DWORD dwUUIDropSize;DWORD dwUUISendUserUserInfoSize;DWORD dwUUICallInfoSize;LINEDIALPARAMS MinDialParams;LINEDIALPARAMS MaxDialParams;LINEDIALPARAMS DefaultDialParams;DWORD dwNumTerminals;DWORD dwTerminalCapsSize;DWORD dwTerminalCapsOffset;DWORD dwTerminalTextEntrySize;DWORD dwTerminalTextSize;DWORD dwTerminalTextOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwLineFeatures;DWORD dwSettableDevStatus;DWORD dwDeviceClassesSize;DWORD dwDeviceClassesOffset;};
struct side_info_entry {unsigned char sym_dest_name[8];unsigned char partner_LU_name[17];unsigned char reserved[3];XC_TP_NAME_TYPE TP_name_type;unsigned char TP_name[64];unsigned char mode_name[8];XC_CONVERSATION_SECURITY_TYPE conversation_security_type;unsigned char security_user_ID[8];unsigned char security_password[8];};
struct tagCCSTYLEFLAGA {DWORD flStyle;DWORD flStyleMask;LPSTR pszStyle;};
struct tagCTLINITHEDIT {DWORD cbSize;HWND hwnd;int id;DWORD dwFlags;DWORD dwReserved;};
struct tagCUSTDATAITEM {GUID guid;VARIANTARG varValue;};
struct tagDESIGNVECTOR {DWORD dvReserved;DWORD dvNumAxes;LONG dvValues[16];};
struct tagEMRRESTOREDC {EMR emr;LONG iRelative;};
struct tagENUMLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];};
struct tagENUMLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];};
struct tagFULLPROPSPEC {GUID guidPropSet;PROPSPEC psProperty;};
struct tagICONMETRICSA {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTA lfFont;};
struct tagICONMETRICSW {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTW lfFont;};
struct tagMETAFILEPICT {LONG mm;LONG xExt;LONG yExt;HMETAFILE hMF;};
struct tagMIMECSETINFO {UINT uiCodePage;UINT uiInternetEncoding;WCHAR wszCharset[50];};
struct tagNMLVFINDITEM {NMHDR hdr;int iStart;LVFINDINFOA lvfi;};
struct tagRASSUBENTRYA {DWORD dwSize;DWORD dwfFlags;CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;CHAR szPortName[129];};
struct tagRASSUBENTRYW {DWORD dwSize;DWORD dwfFlags;WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;WCHAR szPortName[129];};
struct tagRemFORMATETC {DWORD cfFormat;DWORD ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagRemSTGMEDIUM {DWORD tymed;DWORD dwHandleType;unsigned int pData;unsigned int pUnkForRelease;unsigned int cbData;byte data[1];};
struct tagTITLEBARINFO {DWORD cbSize;RECT rcTitleBar;DWORD rgstate[6];};
struct tag_IDFINSTINFO {DWORD cbStruct;DWORD dwManufactID;DWORD dwProductID;DWORD dwRevision;DWORD cbManufactASCII;DWORD cbManufactUNICODE;DWORD cbProductASCII;DWORD cbProductUNICODE;BYTE abData[1];};
struct CLUSPROP_VALUE {CLUSPROP_SYNTAX Syntax;DWORD cbLength;};
struct ETHERNET_FRAME {ETHERNET_ADDRESS Destination;ETHERNET_ADDRESS Source;WORD FrameType;};
typedef ULONG  MAPIFREEBUFFER(LPVOID lpBuffer);
typedef HRESULT  MAPIINITIALIZE(LPVOID lpMapiInit);
typedef void  MSGCALLRELEASE(ULONG ulCallerData, LPMESSAGE lpMessage);
typedef BOOL ( *MSGPENDINGPROC)(MSG *);
struct _ACTION_HEADER {ULONG transport_id;USHORT action_code;USHORT reserved;};
struct _CONFUSERINFOA {DWORD dwSize;DWORD dwUserId;DWORD dwFlags;DWORD dwReserved;CHAR szUserName[128];};
struct _CONFUSERINFOW {DWORD dwSize;DWORD dwUserId;DWORD dwFlags;DWORD dwReserved;WCHAR szUserName[128];};
struct _DOCHOSTUIINFO {ULONG cbSize;DWORD dwFlags;DWORD dwDoubleClick;};
struct _DSCBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _IMAGEHLP_LINE {DWORD SizeOfStruct;DWORD Key;DWORD LineNumber;PCHAR FileName;DWORD Address;};
union _LARGE_INTEGER {_LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E __anonymous0;struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E u;LONGLONG QuadPart;};
struct _MODEMSETTINGS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwPreferredModemOptions;DWORD dwNegotiatedModemOptions;DWORD dwNegotiatedDCERate;BYTE abVariablePortion[1];};
struct _NETINFOSTRUCT {DWORD cbStructure;DWORD dwProviderVersion;DWORD dwStatus;DWORD dwCharacteristics;DWORD dwHandle;WORD wNetType;DWORD dwPrinters;DWORD dwDrives;};
struct _OLESTREAMVTBL {DWORD ( *Get)(LPOLESTREAM, void *, DWORD);DWORD ( *Put)(LPOLESTREAM,  void *, DWORD);};
struct _PRIVILEGE_SET {DWORD PrivilegeCount;DWORD Control;LUID_AND_ATTRIBUTES Privilege[1];};
struct _RGNDATAHEADER {DWORD dwSize;DWORD iType;DWORD nCount;DWORD nRgnSize;RECT rcBound;};
struct _RIP_IF_CONFIG {RIP_IF_INFO RipIfInfo;RIP_IF_FILTERS RipIfFilters;};
struct _SAP_IF_CONFIG {SAP_IF_INFO SapIfInfo;SAP_IF_FILTERS SapIfFilters;};
struct _SSortOrderSet {ULONG cSorts;ULONG cCategories;ULONG cExpanded;SSortOrder aSort[1];};
struct _TOKEN_CONTROL {LUID TokenId;LUID AuthenticationId;LUID ModifiedId;TOKEN_SOURCE TokenSource;};
struct _WSAOVERLAPPED {DWORD Internal;DWORD InternalHigh;DWORD Offset;DWORD OffsetHigh;WSAEVENT hEvent;};
struct _avimainheader {FOURCC fcc;DWORD cb;DWORD dwMicroSecPerFrame;DWORD dwMaxBytesPerSec;DWORD dwPaddingGranularity;DWORD dwFlags;DWORD dwTotalFrames;DWORD dwInitialFrames;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwReserved[4];};
struct adaptercounter {ULONG count;ULONG type;LONG scale;};
struct tagCHARSETINFO {UINT ciCharset;UINT ciACP;FONTSIGNATURE fs;};
struct tagCOLORSCHEME {DWORD dwSize;COLORREF clrBtnHighlight;COLORREF clrBtnShadow;};
struct tagDATE_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;};
struct tagEMRFILLPATH {EMR emr;RECTL rclBounds;};
struct tagHEAPENTRY32 {DWORD dwSize;HANDLE hHandle;DWORD dwAddress;DWORD dwBlockSize;DWORD dwFlags;DWORD dwLockCount;DWORD dwResvd;DWORD th32ProcessID;DWORD th32HeapID;};
struct tagLVDISPINFOW {NMHDR hdr;LVITEMW item;};
struct tagMDINEXTMENU {HMENU hmenuIn;HMENU hmenuNext;HWND hwndNext;};
struct tagMONITORINFO {DWORD cbSize;RECT rcMonitor;RECT rcWork;DWORD dwFlags;};
struct tagMQCOLUMNSET {ULONG cCol;PROPID *aCol;};
struct tagNMSELCHANGE {NMHDR nmhdr;SYSTEMTIME stSelStart;SYSTEMTIME stSelEnd;};
struct tagNMTBHOTITEM {NMHDR hdr;int idOld;int idNew;DWORD dwFlags;};
struct tagPARAMDESCEX {ULONG cBytes;VARIANTARG varDefaultValue;};
struct tagRASDEVINFOA {DWORD dwSize;CHAR szDeviceType[17];CHAR szDeviceName[129];};
struct tagRASDEVINFOW {DWORD dwSize;WCHAR szDeviceType[17];WCHAR szDeviceName[129];};
struct tagRFC1766INFO {LCID lcid;WCHAR wszRfc1766[6];WCHAR wszLocaleName[32];};
struct tagTBADDBITMAP {HINSTANCE hInst;UINT nID;};
struct tagTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct tagTTPOLYCURVE {WORD wType;WORD cpfx;POINTFX apfx[1];};
struct tagTVDISPINFOA {NMHDR hdr;TVITEMA item;};
struct tagTVDISPINFOW {NMHDR hdr;TVITEMW item;};
struct tagWPPROVINFOA {DWORD dwSize;DWORD dwFlags;DWORD dwPriority;LPSTR lpszProviderName;LPSTR lpszProviderCLSID;LPSTR lpszDllPath;};
struct tagWPSITEINFOA {DWORD dwSize;DWORD dwFlags;LPSTR lpszSiteName;LPSTR lpszSiteURL;};
struct waveformat_tag {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;};
struct CLUSPROP_LIST {DWORD nPropertyCount;CLUSPROP_PROPERTY_NAME PropertyName;};
struct DICUSTOMFORCE {DWORD cChannels;DWORD dwSamplePeriod;DWORD cSamples;LPLONG rglForceData;};
struct DelayLoadProc {BOOL fImportByName;DelayLoadProc___6C742A419700A36D4C6A0BE2A92A6405 __anonymous0;};
typedef int ( *LPWSPSHUTDOWN)(SOCKET s, int how, LPINT lpErrno);
typedef BOOL ( *PBMCALLBACKFN)(ULONG, ULONG, ULONG);
typedef BOOL ( *PCMSCALLBACKA)(struct _tagCOLORMATCHSETUPA *, LPARAM);
typedef BOOL ( *PCMSCALLBACKW)(struct _tagCOLORMATCHSETUPW *, LPARAM);
struct Tag_DVAudInfo {BYTE bAudStyle[2];BYTE bAudQu[2];BYTE bNumAudPin;WORD wAvgSamplesPerPinPerFrm[2];WORD wBlkMode;WORD wDIFMode;WORD wBlkDiv;};
struct _ACTRL_ALISTA {ULONG cEntries;PACTRL_PROPERTY_ENTRYA pPropertyAccessList;};
struct _ACTRL_ALISTW {ULONG cEntries;PACTRL_PROPERTY_ENTRYW pPropertyAccessList;};
struct _AVIFILEINFOW {DWORD dwMaxBytesPerSec;DWORD dwFlags;DWORD dwCaps;DWORD dwStreams;DWORD dwSuggestedBufferSize;DWORD dwWidth;DWORD dwHeight;DWORD dwScale;DWORD dwRate;DWORD dwLength;DWORD dwEditCount;WCHAR szFileType[64];};
struct _CONV_OPTIONS {BOOL fTnefEncode;LPCSTR lpszAddressType;};
struct _D3DVIEWPORT2 {DWORD dwSize;DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;D3DVALUE dvClipX;D3DVALUE dvClipY;D3DVALUE dvClipWidth;D3DVALUE dvClipHeight;D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _DIDATAFORMAT {DWORD dwSize;DWORD dwObjSize;DWORD dwFlags;DWORD dwDataSize;DWORD dwNumObjs;LPDIOBJECTDATAFORMAT rgodf;};
struct _DIMOUSESTATE {LONG lX;LONG lY;LONG lZ;BYTE rgbButtons[4];};
struct _DRIVERSTATUS {BYTE bDriverError;BYTE bIDEError;BYTE bReserved[2];DWORD dwReserved[2];};
struct _DSBUFFERDESC {DWORD dwSize;DWORD dwFlags;DWORD dwBufferBytes;DWORD dwReserved;LPWAVEFORMATEX lpwfxFormat;};
struct _GLYPHMETRICS {UINT gmBlackBoxX;UINT gmBlackBoxY;POINT gmptGlyphOrigin;short gmCellIncX;short gmCellIncY;};
union _IN_ADDR_IPV4 {ULONG Addr;UCHAR AddrBytes[4];};
struct _MODEMDEVCAPS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwModemProviderVersion;DWORD dwModemManufacturerOffset;DWORD dwModemManufacturerSize;DWORD dwModemModelOffset;DWORD dwModemModelSize;DWORD dwModemVersionOffset;DWORD dwModemVersionSize;DWORD dwDialOptions;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwModemOptions;DWORD dwMaxDTERate;DWORD dwMaxDCERate;BYTE abVariablePortion[1];};
struct _NETRESOURCEA {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;LPSTR lpProvider;};
struct _PARAM_BUFFER {ULONG ParameterId;ULONG Length;UCHAR Buffer[1];};
struct _PORT_INFO_2A {LPSTR pPortName;LPSTR pMonitorName;LPSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3A {DWORD dwStatus;LPSTR pszStatus;DWORD dwSeverity;};
struct _PctPublicKey {DWORD Type;DWORD cbKey;UCHAR pKey[1];};
struct _QOS_PRIORITY {QOS_OBJECT_HDR ObjectHdr;UCHAR SendPriority;UCHAR SendFlags;UCHAR ReceivePriority;UCHAR Unused;};
struct _QWordAddress {UINT iSerial;HANDLE hTopic;};
struct _RAS_SERVER_0 {WORD TotalPorts;WORD PortsInUse;DWORD RasVersion;};
struct _RTP_HEADER_X {WORD Identifier;WORD DataLength;DWORD Data[1];};
struct _SBinaryArray {ULONG cValues;SBinary *lpbin;};
struct _SCHANNEL_ALG {DWORD dwUse;ALG_ID Algid;DWORD cBits;};
struct _SPropProblem {ULONG ulIndex;ULONG ulPropTag;SCODE scode;};
struct _STnefProblem {ULONG ulComponent;ULONG ulAttribute;ULONG ulPropTag;SCODE scode;};
struct _TAPE_PREPARE {DWORD Operation;BOOLEAN Immediate;};
struct _TOKEN_GROUPS {DWORD GroupCount;SID_AND_ATTRIBUTES Groups[1];};
struct _TOKEN_SOURCE {CHAR SourceName[8];LUID SourceIdentifier;};
struct _aviextheader {FOURCC fcc;DWORD cb;DWORD dwGrandFrames;DWORD dwFuture[61];};
struct _currencyfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPSTR lpCurrencySymbol;};
struct _timecodedata {TIMECODE time;DWORD dwSMPTEflags;DWORD dwUser;};
struct _tp_start_hdr {BOOL bLoaderRunning;DWORD dwQSize;DWORD bpFreeList;DWORD bpStartHead;DWORD bpStartTail;};
struct tWAVEFORMATEX {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wBitsPerSample;WORD cbSize;};
struct tagALTTABINFO {DWORD cbSize;int cItems;int cColumns;int cRows;int iColFocus;int iRowFocus;int cxItem;int cyItem;POINT ptStart;};
struct tagAspectInfo {ULONG cb;DWORD dwFlags;};
struct tagBITMAPINFO {BITMAPINFOHEADER bmiHeader;RGBQUAD bmiColors[1];};
struct tagCABSTRBLOB {ULONG cElems;BSTRBLOB *pElems;};
struct tagCACLIPDATA {ULONG cElems;CLIPDATA *pElems;};
struct tagCAFILETIME {ULONG cElems;FILETIME *pElems;};
struct tagDBSORTINFO {BOOL fDesc;LCID lcid;};
struct tagEMRELLIPSE {EMR emr;RECTL rclBox;};
struct tagFILTERKEYS {UINT cbSize;DWORD dwFlags;DWORD iWaitMSec;DWORD iDelayMSec;DWORD iRepeatMSec;DWORD iBounceMSec;};
struct tagKEYBDINPUT {WORD wVk;WORD wScan;DWORD dwFlags;DWORD time;DWORD dwExtraInfo;};
struct tagLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
struct tagLVDISPINFO {NMHDR hdr;LVITEMA item;};
struct tagMETAHEADER {WORD mtType;WORD mtHeaderSize;WORD mtVersion;DWORD mtSize;WORD mtNoObjects;DWORD mtMaxRecord;WORD mtNoParameters;};
struct tagMETARECORD {DWORD rdSize;WORD rdFunction;WORD rdParm[1];};
struct tagMOUSEINPUT {LONG dx;LONG dy;DWORD mouseData;DWORD dwFlags;DWORD time;DWORD dwExtraInfo;};
struct tagRASNOUSERA {DWORD dwSize;DWORD dwFlags;DWORD dwTimeoutMs;CHAR szUserName[257];CHAR szPassword[257];CHAR szDomain[16];};
struct tagRASNOUSERW {DWORD dwSize;DWORD dwFlags;DWORD dwTimeoutMs;WCHAR szUserName[257];WCHAR szPassword[257];WCHAR szDomain[16];};
struct tagRASPPPIPXA {DWORD dwSize;DWORD dwError;CHAR szIpxAddress[22];};
struct tagSTICKYKEYS {UINT cbSize;DWORD dwFlags;};
struct tagSTROKEINFO {UINT cPnt;UINT cbPnts;UINT wPdk;DWORD dwTick;};
struct tagTOGGLEKEYS {UINT cbSize;DWORD dwFlags;};
struct tag_IDFHEADER {DWORD cbStruct;DWORD dwVersion;DWORD dwCreator;DWORD cbInstID;BYTE abInstID[1];};
struct tag_IDFKEYMAP {DWORD cbStruct;BYTE abKeyMap[128];};
typedef int ( *GOBJENUMPROC)(LPVOID, LPARAM);
typedef int ( *ICMENUMPROCA)(LPSTR, LPARAM);
typedef INT ( *LPNSPCLEANUP)(LPGUID lpProviderId);
typedef void  TIMECALLBACK(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct _AMVPDIMINFO {DWORD dwFieldWidth;DWORD dwFieldHeight;DWORD dwVBIWidth;DWORD dwVBIHeight;RECT rcValidRegion;};
struct _BIN_RESULTS {DWORD NumberOfBins;BIN_COUNT BinCounts[1];};
struct _CONFRECDIRA {DWORD dwSize;CHAR szRecDir[260];};
struct _CONFRECDIRW {DWORD dwSize;WCHAR szRecDir[260];};
struct _CSADDR_INFO {SOCKET_ADDRESS LocalAddr;SOCKET_ADDRESS RemoteAddr;INT iSocketType;INT iProtocol;};
struct _D3DVIEWPORT {DWORD dwSize;DWORD dwX;DWORD dwY;DWORD dwWidth;DWORD dwHeight;D3DVALUE dvScaleX;D3DVALUE dvScaleY;D3DVALUE dvMaxX;D3DVALUE dvMaxY;D3DVALUE dvMinZ;D3DVALUE dvMaxZ;};
struct _DOC_INFO_2A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _DRAWPATRECT {POINT ptPosition;POINT ptSize;WORD wStyle;WORD wPattern;};
struct _IPXMIB_BASE {ULONG OperState;UCHAR PrimaryNetNumber[4];UCHAR Node[6];UCHAR SysName[48];ULONG MaxPathSplits;ULONG IfCount;ULONG DestCount;ULONG ServCount;};
struct _IPX_SERVICE {ULONG InterfaceIndex;ULONG Protocol;IPX_SERVER_ENTRY Server;};
struct _MONTHLYDATE {DWORD rgfDays;WORD rgfMonths;};
struct _QOS_SD_MODE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapeDiscardMode;};
struct _RPC_MESSAGE {RPC_BINDING_HANDLE Handle;unsigned int DataRepresentation;void *Buffer;unsigned int BufferLength;unsigned int ProcNum;PRPC_SYNTAX_IDENTIFIER TransferSyntax;void *RpcInterfaceInformation;void *ReservedForRuntime;void *ManagerEpv;void *ImportContext;unsigned int RpcFlags;};
struct _SCALAR_INFO {char szName[256];SCALARTYPE scType;DWORD fAccess;};
struct _SLPSTRArray {ULONG cValues;LPSTR *lppszA;};
struct _WSATHREADID {HANDLE ThreadHandle;DWORD Reserved;};
struct _bidioptions {UINT cbSize;WORD wMask;WORD wEffects;};
struct _findtextexa {CHARRANGE chrg;LPSTR lpstrText;CHARRANGE chrgText;};
struct _punctuation {UINT iSize;LPSTR szPunctuation;};
struct _tagHLTBINFO {ULONG uDockType;RECT rcTbPos;};
struct _wireBRECORD {ULONG fFlags;ULONG clSize;IRecordInfo *pRecInfo;byte *pRecord;};
struct ldapsortkeyA {PCHAR sk_attrtype;PCHAR sk_matchruleoid;BOOLEAN sk_reverseorder;};
struct sockaddr_vns {u_short sin_family;u_char net_address[4];u_char subnet_addr[2];u_char port[2];u_char hops;u_char filler[5];};
struct srv_inputbuf {BYTE *pBuffer;DWORD ioStatus;DWORD ioRecvCnt;struct srv_inputbuf *pNext;};
struct tagAXESLISTA {DWORD axlReserved;DWORD axlNumAxes;AXISINFOA axlAxisInfo[16];};
struct tagAXESLISTW {DWORD axlReserved;DWORD axlNumAxes;AXISINFOW axlAxisInfo[16];};
struct tagAXISINFOA {LONG axMinValue;LONG axMaxValue;BYTE axAxisName[16];};
struct tagAXISINFOW {LONG axMinValue;LONG axMaxValue;WCHAR axAxisName[16];};
struct tagBOXLAYOUT {int cyCusp;int cyEndCusp;UINT style;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;};
struct tagDBBINDEXT {BYTE *pExtension;ULONG ulExtension;};
struct tagEMRLINETO {EMR emr;POINTL ptl;};
struct tagENUMTYPEA {DWORD dwSize;DWORD dwVersion;DWORD dwFields;PCSTR pDeviceName;DWORD dwMediaType;DWORD dwDitheringMode;DWORD dwResolution[2];DWORD dwCMMType;DWORD dwClass;DWORD dwDataColorSpace;DWORD dwConnectionSpace;DWORD dwSignature;DWORD dwPlatform;DWORD dwProfileFlags;DWORD dwManufacturer;DWORD dwModel;DWORD dwAttributes[2];DWORD dwRenderingIntent;DWORD dwCreator;};
struct tagIMECOLORS {int cColors;LPINT lpnElem;COLORREF *lprgbIme;};
struct tagLVCOLUMNA {UINT mask;int fmt;int cx;LPSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagMOUSEKEYS {UINT cbSize;DWORD dwFlags;DWORD iMaxSpeed;DWORD iTimeToMaxSpeed;DWORD iCtrlSpeed;DWORD dwReserved1;DWORD dwReserved2;};
struct tagMQSORTKEY {PROPID propColumn;ULONG dwOrder;};
struct tagMQSORTSET {ULONG cCol;MQSORTKEY *aCol;};
struct tagNMHEADERA {NMHDR hdr;int iItem;int iButton;HDITEMA *pitem;};
struct tagNMHEADERW {NMHDR hdr;int iItem;int iButton;HDITEMW *pitem;};
struct tagPARAMDESC {LPPARAMDESCEX pparamdescex;USHORT wParamFlags;};
struct tagQACONTROL {ULONG cbSize;DWORD dwMiscStatus;DWORD dwViewStatus;DWORD dwEventCookie;DWORD dwPropNotifyCookie;DWORD dwPointerActivationPolicy;};
struct tagRASPPPIPA {DWORD dwSize;DWORD dwError;CHAR szIpAddress[16];CHAR szServerIpAddress[16];};
struct tagRASPPPIPW {DWORD dwSize;DWORD dwError;WCHAR szIpAddress[16];WCHAR szServerIpAddress[16];};
struct tagRASPPPLCP {DWORD dwSize;BOOL fBundled;};
struct tagREBARINFO {UINT cbSize;UINT fMask;HIMAGELIST himl;};
struct tagSTYLEBUFA {DWORD dwStyle;CHAR szDescription[32];};
struct tagSTYLEBUFW {DWORD dwStyle;WCHAR szDescription[32];};
struct tagTPMPARAMS {UINT cbSize;RECT rcExclude;};
struct tagWINDOWPOS {HWND hwnd;HWND hwndInsertAfter;int x;int y;int cx;int cy;UINT flags;};
struct videohdr_tag {LPBYTE lpData;DWORD dwBufferLength;DWORD dwBytesUsed;DWORD dwTimeCaptured;DWORD dwUser;DWORD dwFlags;DWORD dwReserved[4];};
struct DICONDITION {LONG lOffset;LONG lPositiveCoefficient;LONG lNegativeCoefficient;DWORD dwPositiveSaturation;DWORD dwNegativeSaturation;LONG lDeadBand;};
struct DIEFFESCAPE {DWORD dwSize;DWORD dwCommand;LPVOID lpvInBuffer;DWORD cbInBuffer;LPVOID lpvOutBuffer;DWORD cbOutBuffer;};
struct DIPROPDWORD {DIPROPHEADER diph;DWORD dwData;};
struct DIPROPRANGE {DIPROPHEADER diph;LONG lMin;LONG lMax;};
typedef UINT ( *LPFNCCINFOA)(LPCCINFOA acci);
typedef UINT ( *LPFNCCINFOW)(LPCCINFOW acci);
typedef BOOL ( *LPFNRAWHOOK)(LPPENPACKET);
typedef int ( *LPWSPLISTEN)(SOCKET s, int backlog, LPINT lpErrno);
struct _ACE_HEADER {BYTE AceType;BYTE AceFlags;WORD AceSize;};
struct _ADDR_ALIAS {char rgchName[41];char rgchEName[11];char rgchSrvr[12];ULONG dibDetail;WORD type;};
struct _DDCAPS_DX3 {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwReserved4;DWORD dwReserved5;DWORD dwReserved6;};
struct _IMAGE_NOTE {CHAR Module[10];CHAR FileName[256];WORD hModule;WORD hTask;};
struct _INFCONTEXT {PVOID Inf;PVOID CurrentInf;UINT Section;UINT Line;};
struct _LSA_STRING {USHORT Length;USHORT MaximumLength;PCHAR Buffer;};
struct _OVERLAPPED {DWORD Internal;DWORD InternalHigh;DWORD Offset;DWORD OffsetHigh;HANDLE hEvent;};
struct _RAS_USER_0 {BYTE bfPrivilege;WCHAR szPhoneNumber[129];};
struct _RTP_HEADER {unsigned short NumCSRC : 4;unsigned short fExtHeader : 1;unsigned short fPadding : 1;unsigned short Version : 2;unsigned short PayloadType : 7;unsigned short fMarker : 1;WORD SequenceNum;DWORD Timestamp;DWORD SSRC;};
struct _SEC_OBJECT {DWORD cObjects;SEC_OBJECT_ELEMENT *prgObjects;};
struct _SGuidArray {ULONG cValues;GUID *lpguid;};
struct _SLongArray {ULONG cValues;LONG *lpl;};
struct _TAPE_ERASE {DWORD Type;BOOLEAN Immediate;};
struct _USE_INFO_3 {USE_INFO_2 ui3_ui2;ULONG ui3_flags;};
struct _WSAVersion {DWORD dwVersion;WSAECOMPARATOR ecHow;};
struct _finddata_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;_fsize_t size;char name[260];};
struct _numberfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;};
struct _tagCOMPPOS {DWORD dwSize;int iLeft;int iTop;DWORD dwWidth;DWORD dwHeight;int izIndex;BOOL fCanResize;BOOL fCanResizeX;BOOL fCanResizeY;int iPreferredLeftPercent;int iPreferredTopPercent;};
struct calldata_dn {struct optdata_dn optdata_dn;struct accessdata_dn accessdata_dn;};
struct midihdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;struct midihdr_tag *lpNext;DWORD reserved;DWORD dwOffset;DWORD dwReserved[8];};
struct sockaddr_at {USHORT sat_family;USHORT sat_net;UCHAR sat_node;UCHAR sat_socket;};
struct sockaddr_tp {u_short tp_family;u_short tp_addr_type;u_short tp_taddr_len;u_short tp_tsel_len;u_char tp_addr[64];};
struct srv_coldesc {unsigned int otype;unsigned int olen;unsigned int itype;unsigned int ilen;BYTE *data;DBINT user_type;BYTE precision;BYTE scale;};
struct srv_comport {HANDLE hdl;DWORD cpu;};
struct tagBSTRBLOB {ULONG cbSize;BYTE *pData;};
struct tagCLIPDATA {ULONG cbSize;int ulClipFmt;BYTE *pClipData;};
struct tagCOLORKEY {DWORD KeyType;DWORD PaletteIndex;COLORREF LowColorValue;COLORREF HighColorValue;};
struct tagCUSTDATA {DWORD cCustData;LPCUSTDATAITEM prgCustData;};
struct tagConfDest {DWORD dwSize;DWORD dwFlags;DWORD dwUserId;DWORD dwReserved;GUID guid;};
struct tagDBOBJECT {DWORD dwFlags;IID iid;};
struct tagDBPARAMS {void *pData;ULONG cParamSets;HACCESSOR hAccessor;};
struct tagELEMDESC {TYPEDESC tdesc;tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D __anonymous0;};
struct tagGLYPHSET {DWORD cbThis;DWORD flAccel;DWORD cGlyphsSupported;DWORD cRanges;WCRANGE ranges[1];};
struct tagMULTI_QI { IID *pIID;IUnknown *pItf;HRESULT hr;};
struct tagPELARRAY {LONG paXCount;LONG paYCount;LONG paXExt;LONG paYExt;BYTE paRGBs;};
struct tagPassParm {WORD parm_length;WORD exit_code;WORD in_length;LPBYTE in_addr;WORD out_length;LPBYTE out_addr;WORD trns_id;WORD in_page;WORD out_page;WORD option;};
struct tagRASSLIPA {DWORD dwSize;DWORD dwError;CHAR szIpAddress[16];};
struct tagRASSLIPW {DWORD dwSize;DWORD dwError;WCHAR szIpAddress[16];};
struct tagSTATDATA {FORMATETC formatetc;DWORD advf;IAdviseSink *pAdvSink;DWORD dwConnection;};
struct wavehdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;DWORD dwLoops;struct wavehdr_tag *lpNext;DWORD reserved;};
struct DIPERIODIC {DWORD dwMagnitude;LONG lOffset;DWORD dwPhase;DWORD dwPeriod;};
typedef ULONG  FREEBUFFER(LPVOID lpBuffer);
typedef BOOL ( *NEEDREBOOT)(DWORD dwRebootCheck);
typedef void ( *PHONEEVENT)(HTAPIPHONE htPhone, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef FARPROC ( *PfnDliHook)(unsigned int dliNotify, PDelayLoadInfo pdli);
struct UnloadInfo {PUnloadInfo puiNext;PCImgDelayDescr pidd;};
struct _BIN_COUNT {BIN_RANGE BinRange;DWORD BinCount;};
struct _CHAR_INFO {union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC Char;WORD Attributes;};
struct _CONFADDRA {DWORD dwSize;DWORD dwAddrType;_CONFADDRA___6189D175D0D80E2BA877E8501BB5D2E1 __anonymous0;};
struct _CTL_USAGE {DWORD cUsageIdentifier;LPSTR *rgpszUsageIdentifier;};
struct _D3DBRANCH {DWORD dwMask;DWORD dwValue;BOOL bNegate;DWORD dwOffset;};
struct _D3DSTATUS {DWORD dwFlags;DWORD dwStatus;D3DRECT drExtent;};
struct _DPADDRESS {GUID guidDataType;DWORD dwDataSize;};
struct _HD_LAYOUT {RECT *prc;WINDOWPOS *pwpos;};
struct _IMAGEINFO {HBITMAP hbmImage;HBITMAP hbmMask;int Unused1;int Unused2;RECT rcImage;};
struct _LDT_ENTRY {WORD LimitLow;WORD BaseLow;union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 HighWord;};
struct _NRESARRAY {UINT cItems;NETRESOURCE nr[1];};
struct _PROXYNODE {struct _PROXYNODE *pnodeNext;RPC_SZ wszProxy;RPC_EC ec;RPC_SZ wszDN;};
struct _PSHNOTIFY {NMHDR hdr;LPARAM lParam;};
struct _ReadState {ULONG cbSourceKey;BYTE *pbSourceKey;ULONG ulFlags;};
struct _SC_ACTION {SC_ACTION_TYPE Type;DWORD Delay;};
struct _STD_ALERT {DWORD alrt_timestamp;WCHAR alrt_eventname[17];WCHAR alrt_servicename[81];};
struct _SYNC_CARD {ULONG IdandUseCount;UCHAR DisplayName[50];};
struct _TOKENRING {BYTE AccessCtrl;BYTE FrameCtrl;BYTE DstAddr[6];BYTE SrcAddr[6];_TOKENRING___D5A0CFD0485969A31AA970E0E4F75009 __anonymous0;};
struct _TRIVERTEX {LONG x;LONG y;COLOR16 Red;COLOR16 Green;COLOR16 Blue;COLOR16 Alpha;};
struct _compcolor {COLORREF crText;COLORREF crBackground;DWORD dwEffects;};
struct _reqresize {NMHDR nmhdr;RECT rc;};
struct _riffchunk {FOURCC fcc;DWORD cb;};
struct _tagOLECMD {ULONG cmdID;DWORD cmdf;};
struct _textrange {CHARRANGE chrg;LPSTR lpstrText;};
struct dbdatetime {DBINT dtdays;ULONG dttime;};
struct dbvarychar {DBSMALLINT len;DBCHAR str[256];};
struct srv_params {struct srv_server *server;struct srv_proc *srvproc;struct srv_queuehead *queuehead;struct srv_comport *comport;THREAD threadID;HANDLE threadHDL;};
struct srv_tdshdr {BYTE type;BYTE status;DBUSMALLINT length;DBUSMALLINT channel;BYTE packet;BYTE window;};
struct tagABSTIME {DWORD sec;UINT ms;};
union tagBINDPTR {FUNCDESC *lpfuncdesc;VARDESC *lpvardesc;ITypeComp *lptcomp;};
struct tagCACLSID {ULONG cElems;CLSID *pElems;};
struct tagCADWORD {ULONG cElems;DWORD *pElems;};
struct tagCALPSTR {ULONG cElems;LPSTR *pElems;};
struct tagCASCODE {ULONG cElems;SCODE *pElems;};
struct tagDVD_ATR {ULONG ulCAT;BYTE pbATRI[768];};
struct tagIDLDESC {ULONG dwReserved;USHORT wIDLFlags;};
struct tagLICINFO {LONG cbLicInfo;BOOL fRuntimeKeyAvail;BOOL fLicVerified;};
struct tagPROFILE {DWORD dwType;PVOID pProfileData;DWORD cbDataSize;};
struct tagQuality {QualityMessageType Type;int Proportion;REFERENCE_TIME Late;REFERENCE_TIME TimeStamp;};
struct tagRASIPXW {DWORD dwSize;DWORD dwError;WCHAR szIpxAddress[22];};
struct tagWCRANGE {WCHAR wcLow;USHORT cGlyphs;};
struct value_entA {LPSTR ve_valuename;DWORD ve_valuelen;DWORD ve_valueptr;DWORD ve_type;};
typedef BOOL ( *ABORTPROC)(HDC, int);
struct DIPROPCAL {DIPROPHEADER diph;LONG lMin;LONG lCenter;LONG lMax;};
typedef BOOL ( *ISNTADMIN)(DWORD, DWORD *);
typedef int ( *LPWSPBIND)(SOCKET s,  struct sockaddr *name, int namelen, LPINT lpErrno);
struct XACTSTATS {ULONG cOpen;ULONG cCommitting;ULONG cCommitted;ULONG cAborting;ULONG cAborted;ULONG cInDoubt;ULONG cHeuristicDecision;FILETIME timeTransactionsUp;};
struct _ADRENTRY {ULONG ulReserved1;ULONG cValues;LPSPropValue rgPropVals;};
struct _CERT_RDN {DWORD cRDNAttr;PCERT_RDN_ATTR rgRDNAttr;};
struct _DOCINFOA {int cbSize;LPCSTR lpszDocName;LPCSTR lpszOutput;LPCSTR lpszDatatype;DWORD fwType;};
struct _ETHERNET {BYTE DstAddr[6];BYTE SrcAddr[6];_ETHERNET___FBF8A93E0AC2563FB57148D5C1660BB7 __anonymous0;BYTE Info[];};
struct _FPO_DATA {DWORD ulOffStart;DWORD cbProcSize;DWORD cdwLocals;WORD cdwParams;unsigned short cbProlog : 8;unsigned short cbRegs : 3;unsigned short fHasSEH : 1;unsigned short fUseBP : 1;unsigned short reserved : 1;unsigned short cbFrame : 2;};
struct _MMCKINFO {FOURCC ckid;DWORD cksize;FOURCC fccType;DWORD dwDataOffset;DWORD dwFlags;};
struct _NS_INFOA {DWORD dwNameSpace;DWORD dwNameSpaceFlags;LPSTR lpNameSpace;};
struct _OBJECTID {GUID Lineage;DWORD Uniquifier;};
struct _PERF_BIN {DWORD NumberOfBins;DWORD TypeOfBin;BIN_RANGE BinsRanges[1];};
struct _ROWENTRY {ULONG ulRowFlags;ULONG cValues;LPSPropValue rgPropVals;};
struct _SCH_CRED {DWORD dwVersion;DWORD cCreds;PVOID *paSecret;PVOID *paPublic;DWORD cMappers;struct _HMAPPER **aphMappers;};
struct _SHITEMID {USHORT cb;BYTE abID[1];};
struct _StrTable {DWORD cEntries;LPSTRENTRY pse;};
struct _TBBUTTON {int iBitmap;int idCommand;BYTE fsState;BYTE fsStyle;BYTE bReserved[2];DWORD dwData;int iString;};
struct _findtext {CHARRANGE chrg;LPSTR lpstrText;};
struct _flowspec {ULONG TokenRate;ULONG TokenBucketSize;ULONG PeakBandwidth;ULONG Latency;ULONG DelayVariation;SERVICETYPE ServiceType;ULONG MaxSduSize;ULONG MinimumPolicedSize;};
struct _rifflist {FOURCC fcc;DWORD cb;FOURCC fccListType;};
union _timecode {_timecode___6889D7C8638655C86F211076F8C624CB __anonymous0;DWORDLONG qw;};
struct cscritsec {BOOL Inited;CRITICAL_SECTION CritSec;};
struct dbvarybin {DBSMALLINT len;BYTE array[256];};
struct tagCABOOL {ULONG cElems;VARIANT_BOOL *pElems;};
struct tagCADATE {ULONG cElems;DATE *pElems;};
struct tagCAUUID {ULONG cElems;GUID *pElems;};
struct tagDBDATE {SHORT year;USHORT month;USHORT day;};
struct tagDBLIKE {LONG lWeight;GUID guidDialect;};
struct tagDCINFO {DCINFOTYPE eInfoType;VARIANT vData;};
struct tagEMREOF {EMR emr;DWORD nPalEntries;DWORD offPalEntries;DWORD nSizeLast;};
typedef ULONG (*DBGPRINT)(PCH Format, ...);
typedef DWORD ( *UT32PROC)(LPVOID lpBuff, DWORD dwUserDefined, LPVOID *lpTranslationList);
struct _ADRLIST {ULONG cEntries;ADRENTRY aEntries[1];};
struct _CabInfo {PSTR pszCab;PSTR pszInf;PSTR pszSection;char szSrcPath[260];DWORD dwFlags;};
struct _D3DLINE {_D3DLINE___C167AD525C2A16158535093655B0BE27 __anonymous0;_D3DLINE___5E81141D7147E4DA50A203FBA8012470 __anonymous2;};
struct _DSSSEED {DWORD counter;BYTE seed[20];};
union _MESSAGE {UPDATE_COMPLETE_MESSAGE UpdateCompleteMessage;DWORD InterfaceIndex;};
struct _PinInfo {IBaseFilter *pFilter;PIN_DIRECTION dir;WCHAR achName[128];};
struct _ROWLIST {ULONG cEntries;ROWENTRY aEntries[1];};
struct _SBinary {ULONG cb;LPBYTE lpb;};
struct _SLPARMS {int SLFrameSize;LONG SLDataRate;UCHAR SLOurAddress1;UCHAR SLOurAddress2;UCHAR SLLinkOptionsByte;UCHAR SLSpare1;};
struct _SRowSet {ULONG cRows;SRow aRow[1];};
struct _WGLSWAP {HDC hdc;UINT uiFlags;};
struct _lzfuhdr {ULONG cbSize;ULONG cbRawSize;DWORD dwMagic;DWORD dwCRC;};
struct tagACCEL {BYTE fVirt;WORD key;WORD cmd;};
struct tagNMHDR {HWND hwndFrom;UINT idFrom;UINT code;};
struct tagNMKEY {NMHDR hdr;UINT nVKey;UINT uFlags;};
struct tecwrksd {UCHAR cwshost[9];USHORT cwsestyp;USHORT cwsmodov;USHORT cwspad;};
struct tpfmihdr {CHAR fhackrqd;CHAR fhpad1;INTEGER fhmsgkey;CHAR fhflags1;CHAR fhflags2;INTEGER fhpad2;INTEGER fhpad3;INTEGER fhseqno;};
struct tpstchdr {CHAR ctlstat;CHAR ctlqual;CHAR ctltype;CHAR ctlack;CHAR ctlflag1;CHAR ctlflag2;INTEGER ctlnumb1;INTEGER ctlnumb2;INTEGER ctlmsgk;};
struct tpstehdr {CHAR errstat;CHAR errpad1;INTEGER errpad2;INTEGER errpad3;INTEGER errcode1;INTEGER errcode2;};
struct tpstrhdr {CHAR resstat;CHAR respad;INTEGER rescred;};
struct tpstshdr {CHAR sessstat;CHAR sesspad;INTEGER sesscode;INTEGER sessqual;};
struct WSPData {WORD wVersion;WORD wHighVersion;WCHAR szDescription[256];};
struct _DDCAPS {DWORD dwSize;DWORD dwCaps;DWORD dwCaps2;DWORD dwCKeyCaps;DWORD dwFXCaps;DWORD dwFXAlphaCaps;DWORD dwPalCaps;DWORD dwSVCaps;DWORD dwAlphaBltConstBitDepths;DWORD dwAlphaBltPixelBitDepths;DWORD dwAlphaBltSurfaceBitDepths;DWORD dwAlphaOverlayConstBitDepths;DWORD dwAlphaOverlayPixelBitDepths;DWORD dwAlphaOverlaySurfaceBitDepths;DWORD dwZBufferBitDepths;DWORD dwVidMemTotal;DWORD dwVidMemFree;DWORD dwMaxVisibleOverlays;DWORD dwCurrVisibleOverlays;DWORD dwNumFourCCCodes;DWORD dwAlignBoundarySrc;DWORD dwAlignSizeSrc;DWORD dwAlignBoundaryDest;DWORD dwAlignSizeDest;DWORD dwAlignStrideAlign;DWORD dwRops[8];DDSCAPS ddsCaps;DWORD dwMinOverlayStretch;DWORD dwMaxOverlayStretch;DWORD dwMinLiveVideoStretch;DWORD dwMaxLiveVideoStretch;DWORD dwMinHwCodecStretch;DWORD dwMaxHwCodecStretch;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;DWORD dwSVBCaps;DWORD dwSVBCKeyCaps;DWORD dwSVBFXCaps;DWORD dwSVBRops[8];DWORD dwVSBCaps;DWORD dwVSBCKeyCaps;DWORD dwVSBFXCaps;DWORD dwVSBRops[8];DWORD dwSSBCaps;DWORD dwSSBCKeyCaps;DWORD dwSSBFXCaps;DWORD dwSSBRops[8];DWORD dwMaxVideoPorts;DWORD dwCurrVideoPorts;DWORD dwSVBCaps2;DWORD dwNLVBCaps;DWORD dwNLVBCaps2;DWORD dwNLVBCKeyCaps;DWORD dwNLVBFXCaps;DWORD dwNLVBRops[8];};
struct _NT_TIB {struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;PVOID StackBase;PVOID StackLimit;PVOID SubSystemTib;_NT_TIB___0349ADB4452EC09BEC08E2292695FBBA __anonymous0;PVOID ArbitraryUserPointer;struct _NT_TIB *Self;};
struct _cpinfo {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];};
struct dbmoney {DBINT mnyhigh;ULONG mnylow;};
struct tagCACY {ULONG cElems;CY *pElems;};
struct tagCAUH {ULONG cElems;ULARGE_INTEGER *pElems;};
struct tagCAUI {ULONG cElems;USHORT *pElems;};
struct tpclhdr {CHAR closqual;CHAR clstype;CHAR clsctl;CHAR clspad1;INTEGER clspad2;INTEGER clserr1;INTEGER clserr2;};
typedef BOOL  FNIDLE(LPVOID);
struct berval {ULONG bv_len;PCHAR bv_val;};
struct fd_set {u_int fd_count;SOCKET fd_array[64];};
struct tagCAH {ULONG cElems;LARGE_INTEGER *pElems;};
struct _BLOB {ULONG cbSize;BYTE *pBlobData;};
struct _LIST {LPLINK Tail;LPLINK Head;DWORD Length;};
struct _LUID {DWORD LowPart;LONG HighPart;};
struct _SRow {ULONG ulAdrEntryPad;ULONG cValues;LPSPropValue lpProps;};
union tagCY {tagCY___983F061E0B702DD8AE0B4B955735A6A3 __anonymous0;LONGLONG int64;};
typedef int ( *LPDF)(int, LPVOID, LPVOID, int, DWORD, DWORD);
struct _ACL {BYTE AclRevision;BYTE Sbz1;WORD AclSize;WORD AceCount;WORD Sbz2;};
struct _LLC {BYTE dsap;BYTE ssap;struct _LLC___BD8DAC351D2955BFEDB8952A36AC5422 ControlField;};
struct _FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC___AE95DDE6C9C27FBF24E5C6B187468200 {WORD FileSystemType;WORD Version;DWORD UserFileReads;DWORD UserFileReadBytes;DWORD UserDiskReads;DWORD UserFileWrites;DWORD UserFileWriteBytes;DWORD UserDiskWrites;DWORD MetaDataReads;DWORD MetaDataReadBytes;DWORD MetaDataDiskReads;DWORD MetaDataWrites;DWORD MetaDataWriteBytes;DWORD MetaDataDiskWrites;_FILESYSTEM_STATISTICS______AE95DDE6C9C27FBF24E5C6B187468200___C3FF8AB90952EAB5EEBF3A16E3DE958E __anonymous0;};
struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___B282398C81B6FF20F165753A3DA70A52 {LARGE_INTEGER Cylinders;STORAGE_MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;DWORD NumberMediaSides;DWORD MediaCharacteristics;};
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359 {HANDLE hIOPort;DWORD dwNumberOfBytesTransferred;DWORD dwCompletionKey;LPOVERLAPPED lpOverlapped;};
struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___5B8C33BBDA1E90A3135660F6C2060421 {ULONG cbEntryId;LPENTRYID lpEntryId;GUID guidReplyTemplate;};
struct ____446F191665B55C76FC203DCA446CB75E___11D7E2EEDC905229D05BF81DCE1ACA56 {USHORT usCcbCount;PLLC_CCB pCcbCompletionList;USHORT usBufferCount;PLLC_BUFFER pFirstBuffer;USHORT usReceivedFrameCount;PLLC_BUFFER pReceivedFrame;USHORT usEventErrorCode;USHORT usEventErrorData[3];};
struct ____543FA3AE02DFE9E044D92CF6A451C814___17DF1E99E4527329F6C5B633745778B6 {MAPINAMEID nmidIdx;ULONG cfpevAvailable;LPMAPIFORMPROPENUMVAL pfpevAvailable;};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A __anonymous0;DWORD Name;WORD Id;};
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4 {BYTE ShortName[8];struct _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4___DE8E098676ACAC74F2956A2D7B83DF3B Name;PBYTE LongName[2];};
union tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A {RGBQUAD bmiColors[256];DWORD dwBitMasks[3];TRUECOLORINFO TrueColorInfo;};
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 {DWORD ms;DWORD sample;DWORD cb;DWORD ticks;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB smpte;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D midi;};
union _D3DSTATE___F2EA3FEE0507817BD9C946BFDA84F9EF {D3DTRANSFORMSTATETYPE dtstTransformStateType;D3DLIGHTSTATETYPE dlstLightStateType;D3DRENDERSTATETYPE drstRenderStateType;};
union tagINPUT___72687D791E298366090936F57062F9D6 {MOUSEINPUT mi;KEYBDINPUT ki;HARDWAREINPUT hi;};
union in_addr___C13EC994467D6E67044F092615EC7EA9 {struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 S_un_b;struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 S_un_w;u_long S_addr;};
struct _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {HANDLE hClientToken;GUID *SubjectType;WIN_TRUST_SUBJECT Subject;};
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {DWORD cbSize;CMSG_SIGNED_ENCODE_INFO SignedInfo;CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;};
typedef BOOL ( *LPDIENUMCREATEDEFFECTOBJECTSCALLBACK)(LPDIRECTINPUTEFFECT, LPVOID);
typedef ULONG ( *PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE)(ULONG offset, LPCVOID lpBuffer, ULONG cb, PULONG lpcbBytesWritten);
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {CHANGER_ELEMENT StartingElement;DWORD ActionCode;BYTE VolumeIDTemplate[40];};
union _GDI_OBJECT____MIDL_IAdviseSink_0002 {wireHBITMAP hBitmap;wireHPALETTE hPalette;wireHGLOBAL hGeneric;};
struct IDirectDrawMediaSampleAllocatorVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaSampleAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaSampleAllocator *This);ULONG ( *Release)(IDirectDrawMediaSampleAllocator *This);HRESULT ( *GetDirectDraw)(IDirectDrawMediaSampleAllocator *This, IDirectDraw **ppDirectDraw);};
typedef ULONG ( *PWINDBG_READ_PROCESS_MEMORY_ROUTINE)(ULONG offset, PVOID lpBuffer, ULONG cb, PULONG lpcbBytesRead);
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {LPSTR pszObjId;DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct IActiveScriptSiteInterruptPollVtbl {HRESULT ( *QueryInterface)(IActiveScriptSiteInterruptPoll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSiteInterruptPoll *This);ULONG ( *Release)(IActiveScriptSiteInterruptPoll *This);HRESULT ( *QueryContinue)(IActiveScriptSiteInterruptPoll *This);};
struct ITransactionTransmitterFactoryVtbl {HRESULT ( *QueryInterface)(ITransactionTransmitterFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionTransmitterFactory *This);ULONG ( *Release)(ITransactionTransmitterFactory *This);HRESULT ( *Create)(ITransactionTransmitterFactory *This, ITransactionTransmitter **ppTransmitter);};
typedef HANDLE ( *PCREATE_SERVICE_ENUMERATION_HANDLE)(DWORD ExclusionFlags, PIPX_SERVICE CriteriaService);
typedef NTSTATUS (*PSAM_PASSWORD_NOTIFICATION_ROUTINE)(PUNICODE_STRING UserName, ULONG RelativeId, PUNICODE_STRING NewPassword);
struct __MIDL___MIDL_itf_strmif_0223_0001 {HRESULT hrVPEStatus;BOOL bDvdVolInvalid;BOOL bDvdVolUnknown;BOOL bNoLine21In;BOOL bNoLine21Out;int iNumStreams;int iNumStreamsFailed;DWORD dwFailedStreamsFlag;};
struct _0302F8A06E19F526F6B7CE33122C2128 {BYTE bFirstEntry;BYTE bNumEntries;WORD wFlags;PALETTEENTRY peNew[];};
struct _13AC4D5D0927D2C6C16DF20D64ACBBB3 {USN StartUsn;DWORD ReasonMask;DWORD ReturnOnlyOnClose;DWORDLONG Timeout;DWORDLONG BytesToWaitFor;};
struct _17CA7839736B8F73357CD165DBE52F18 {WCHAR DisplayString[129];DWORD GopherType;DWORD SizeLow;DWORD SizeHigh;FILETIME LastModificationTime;WCHAR Locator[654];};
struct _20D2774EFCA5A66C7957E72E344FDD43 {ULONG cRowsRequested;DWORD dwFlags;LPVOID pData;LPVOID pVarData;ULONG cbVarData;ULONG cRowsReturned;};
struct _2E2AA9F03C861A9A9D27DBF19670D54B {NMHDR hdr;BOOL fChanged;int iNewSelection;WCHAR szText[260];int iWhy;};
struct _30C092ACFDACA2A085242C6994837CA9 {UINT cbSize;POINT pt;UINT uHit;SYSTEMTIME st;};
struct _3A21E11B68C434F2F5E8C2B6B2DCB409 {DWORD dwFlags;LPVOID lpFormat;LPVOID lpData;DWORD cbData;LONG lTime;};
struct _478EBBB1B521D3328EC986A2D868B910 {DWORD dwSize;DWORD fccType;DWORD fccHandler;DWORD dwVersion;DWORD dwFlags;LRESULT dwError;LPVOID pV1Reserved;LPVOID pV2Reserved;DWORD dnDevNode;};
struct _49CD7323AA35D3C00204BB7AA8563FFA {HANDLE FileHandle;LARGE_INTEGER StartingVcn;LARGE_INTEGER StartingLcn;DWORD ClusterCount;};
struct _4CE3C6CFBB2F191E29A1B4952A0683B3 {CMC_uint32 item_code;CMC_uint32 item_data;CMC_buffer item_reference;CMC_flags extension_flags;};
struct _5960E7280C1CD3895029C6009DE30C9A {DWORD dwType;DWORD dwFlags;DPID dpIdFrom;LPVOID lpData;DWORD dwDataSize;};
struct _66EE77830E735B4EF58A5F76D8ADF8E5 {DWORD dwType;DWORD dwFlags;DPID idFromPlayer;DPID idToPlayer;DPID idToGroup;LPDPCHAT lpChat;};
struct _6AFAE163AB7E9AE51B9FB2136B2CBA4E {DWORD dwCallback;RECT rc;HDC hDC;};
struct _6D499679CD08099A5FDFDFD45568A323 {DWORD dwFlags;LPBITMAPINFOHEADER lpbiInput;LPVOID lpInput;LPBITMAPINFOHEADER lpbiOutput;LPVOID lpOutput;DWORD ckid;};
struct _72F2A3C647F25D7F0ECCF03C491B3ECA {UCHAR eSegmentType;UCHAR boolFreeBuffer;USHORT cbBuffer;PVOID pBuffer;};
struct _7300D6D0160F27FB0DC605F404D9E579 {DWORD dwCallback;LPSTR lpstrFileName;RECT rc;};
struct _7644B9603AEA08EBF4DF4A983BB6B237 {CHAR DisplayString[129];DWORD GopherType;DWORD SizeLow;DWORD SizeHigh;FILETIME LastModificationTime;CHAR Locator[654];};
struct _797ABA875A7F80AEFE23C6BF7D56B10A {DWORD dwFlags;LPBITMAPINFOHEADER lpbiSrc;LPVOID lpSrc;LPBITMAPINFOHEADER lpbiDst;LPVOID lpDst;int xDst;int yDst;int dxDst;int dyDst;int xSrc;int ySrc;int dxSrc;int dySrc;};
union _7BE17F41E2ABE62BCFC5B0B03F418DA3 {GENERIC type;SQL_CONNECT_PARAMS sqlParams;SQL_CONNECT_CONNECTED_PARAMS sqlConnectedParams;};
struct _7E4D4F669364F297B2F59C7E54290CAF {HWND hwnd;ULONG tbid;ULONG ulFlags;UINT itbbBase;};
struct _7E7F9E6E46889EEDB1929991A6A7474A {DWORD dwSize;char szModule[10];HANDLE hModule;WORD wcUsage;char szExePath[256];WORD wNext;};
struct _7F42DEB2BB5D0DE64733A8884285C23D {RPC_NS_HANDLE LookupContext;RPC_BINDING_HANDLE ProposedHandle;RPC_BINDING_VECTOR *Bindings;};
struct _87B38C5BC85AA4DC076D4608CF4D41BB {DWORD dwType;DWORD dwPlayerType;DPID dpId;LPVOID lpData;DWORD dwDataSize;};
struct _8A8B79EBB5E366F38FEADC6BCD47EF14 {WSH_ATALK_ADDRESS Address;USHORT Enumerator;WSH_NBP_NAME NbpName;};
struct _9094404ECC54B56F86821B4C6C888B0E {USHORT usStationId;USHORT cbLogBufSize;PLLC_DLC_LOG_BUFFER pLogBuf;USHORT usActLogLength;UCHAR uchOptions;};
struct _9186133EF552B6DB84C666EDEF474133 {DWORD dwType;DWORD dwPlayerType;DPID dpId;DPNAME dpnName;};
struct _A1A9A244AE7EE0CEFF363F43C752B07C {CMC_message_reference *message;CMC_uint32 id;CMC_buffer object;};
struct _A1AF5D8F2011341D578B8F744C42EE44 {PLLC_BUFFER pNextBuffer;USHORT cbFrame;USHORT cbBuffer;USHORT offUserData;USHORT cbUserData;USHORT usStationId;UCHAR uchOptions;UCHAR uchMsgType;USHORT cBuffersLeft;UCHAR uchRcvFS;UCHAR uchAdapterNumber;PLLC_BUFFER pNextFrame;UCHAR cbLanHeader;UCHAR cbDlcHeader;UCHAR auchLanHeader[32];UCHAR auchDlcHeader[4];USHORT usPadding;};
struct _A45289B030366F6A209F1D22B819A49A {LARGE_INTEGER FileReferenceNumber;DWORD FileRecordLength;BYTE FileRecordBuffer[1];};
struct _A4DD02794CFF2FFACE800CDFB553DD44 {NMHDR hdr;DWORD dwMask;int idCommand;DWORD lParam;int iImage;LPSTR pszText;int cchText;};
struct _A89BDE8BB34616876C69A26DB46B7136 {DAOCOLUMNID columnID;ULONG cbDataOffset;ULONG cbMaxLen;ULONG cbInfoOffset;DWORD dwBinding;DWORD dwDataType;DWORD dwUser;};
union _AABF73CB38EC495F6AFFF3108991DB2A {LLC_ADAPTER_LOG Adapter;LLC_DIRECT_LOG Dir;struct _AABF73CB38EC495F6AFFF3108991DB2A___2194BC531F59466BE42B702B8A5EF68B both;};
struct _AB97F029BC7AD90C3813597C038C5112 {UCHAR auchPermanentAddress[6];UCHAR auchNodeAddress[6];UCHAR auchGroupAddress[4];UCHAR auchFunctAddr[4];UCHAR uchMaxSap;UCHAR uchOpenSaps;UCHAR uchMaxStations;UCHAR uchOpenStation;UCHAR uchAvailStations;UCHAR uchAdapterConfig;UCHAR auchReserved1[10];ULONG ulReserved1;ULONG ulReserved2;ULONG ulMaxFrameLength;USHORT usLastNetworkStatus;USHORT usAdapterType;};
struct _ADB447A89171D7A348B94130055F93A9 {USHORT usReserved1;USHORT cBuffersLeft;ULONG ulReserved;PLLC_XMIT_BUFFER pFirstBuffer;};
struct _BC43068C8DCBA7D8F8979D82055549DE {ULONG CategoriesCount;GUID *Categories;ULONG TopologyNodesCount;GUID *TopologyNodes;ULONG TopologyConnectionsCount; KSTOPOLOGY_CONNECTION *TopologyConnections;GUID *TopologyNodesNames;ULONG Reserved;};
struct _C7C46F6CCBD2CAD1FCFEC4764C87E3D1 {ULONG ulReserved;ULONG flFlags;ULONG nPosition;LPSTR lpszPathName;LPSTR lpszFileName;LPVOID lpFileType;};
struct _CB9F4276D477D4EDC30066925B58EE0F {ULONG ulReserved;ULONG ulRecipClass;LPSTR lpszName;LPSTR lpszAddress;ULONG ulEIDSize;LPVOID lpEntryID;};
struct _D26D25374C75FEF3AD181CCFA77BD37F {SCARD_IO_REQUEST ioRequest;BYTE bSw1;BYTE bSw2;_D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F __anonymous0;};
struct _D27293EA07A9AE13A5F9D796DF4562B3 {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG cValues;LPSPropValue lpPropVals;};
struct _D333B2CEDD563FFBEB75B63E07F81E15 {Q2931_IE_TYPE IEType;ULONG IELength;UCHAR IE[1];};
struct _D4B41BFB0D7ACAABEF7B64D0EE03F789 {USHORT usRes;USHORT usStationId;UCHAR uchT1;UCHAR uchT2;UCHAR uchTi;UCHAR uchMaxOut;UCHAR uchMaxIn;UCHAR uchMaxOutIncr;UCHAR uchMaxRetryCnt;UCHAR uchReserved1;USHORT usMaxInfoFieldLength;UCHAR uchAccessPriority;UCHAR auchReserved3[4];UCHAR cGroupCount;PUCHAR pGroupList;};
struct _D916DB49F0BCC31D2F37C460432A7C94 {USHORT usSapStationId;USHORT usLinkStationId;UCHAR uchT1;UCHAR uchT2;UCHAR uchTi;UCHAR uchMaxOut;UCHAR uchMaxIn;UCHAR uchMaxOutIncr;UCHAR uchMaxRetryCnt;UCHAR uchRemoteSap;USHORT usMaxI_Field;UCHAR uchAccessPriority;PVOID pRemoteNodeAddress;};
struct _E9EAD05D222C1BBF08E4876BE3047475 {BYTE *stream;UINT length;BOOL dynamic;};
struct _EAA2A559B48BCBAE81109D6C3EFDA87C {NMHDR hdr;WORD fwKeys;RECT rcParent;int iDir;int iXpos;int iYpos;int iScroll;};
struct _EF98EE567420140E285BF0657F46953F {KSPROPERTY Property;GUID SourceFormat;GUID TargetFormat;LONGLONG Time;};
struct _F40F1746FC5A0A350E7B6DA8E0494300 {HANDLE hBufferPool;PVOID pBuffer;ULONG cbBufferSize;ULONG cbMinimumSizeThreshold;};
struct _F42371D36A819E0C8DFBAA8BF3769AB0 {UINT iMsg;WPARAM wParam;LPARAM lParam;};
struct _F6CC20CF8176C211D0C88E599FF300CF {WCHAR LabelType[64];DWORD LabelIDSize;BYTE LabelID[256];WCHAR LabelAppDescr[256];};
struct _F867B4C5F172AA4F41F7BD1464BC5D23 {PLLC_BUFFER pNextBuffer;USHORT cbFrame;USHORT cbBuffer;USHORT offUserData;USHORT cbUserData;USHORT usStationId;UCHAR uchOptions;UCHAR uchMsgType;USHORT cBuffersLeft;UCHAR uchRcvFS;UCHAR uchAdapterNumber;PLLC_BUFFER pNextFrame;};
struct ITransactionVoterBallotAsyncVtbl {HRESULT ( *QueryInterface)(ITransactionVoterBallotAsync *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionVoterBallotAsync *This);ULONG ( *Release)(ITransactionVoterBallotAsync *This);HRESULT ( *VoteRequestDone)(ITransactionVoterBallotAsync *This, HRESULT hr, BOID *pboidReason);};
typedef SECURITY_STATUS ( *QUERY_SECURITY_PACKAGE_INFO_FN_A)(SEC_CHAR *, PSecPkgInfoA *);
struct _CERT_KEY_USAGE_RESTRICTION_INFO {DWORD cCertPolicyId;PCERT_POLICY_ID rgCertPolicyId;CRYPT_BIT_BLOB RestrictedKeyUsage;};
struct _DEV_BROADCAST_DEVICEINTERFACE_W {DWORD dbcc_size;DWORD dbcc_devicetype;DWORD dbcc_reserved;GUID dbcc_classguid;unsigned short dbcc_name[1];};
struct _TRUSTED_DOMAIN_FULL_INFORMATION {TRUSTED_DOMAIN_INFORMATION_EX Information;TRUSTED_POSIX_OFFSET_INFO PosixOffset;TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;};
struct ADOConnectionConstruction15Vtbl {HRESULT ( *QueryInterface)(ADOConnectionConstruction15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOConnectionConstruction15 *This);ULONG ( *Release)(ADOConnectionConstruction15 *This);HRESULT ( *get_DSO)(ADOConnectionConstruction15 *This, IUnknown **ppDSO);HRESULT ( *get_Session)(ADOConnectionConstruction15 *This, IUnknown **ppSession);HRESULT ( *WrapDSOandSession)(ADOConnectionConstruction15 *This, IUnknown *pDSO, IUnknown *pSession);};
struct IDtcLuRecoveryInitiatedByLuVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryInitiatedByLu *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryInitiatedByLu *This);ULONG ( *Release)(IDtcLuRecoveryInitiatedByLu *This);HRESULT ( *GetObjectToHandleWorkFromLu)(IDtcLuRecoveryInitiatedByLu *This, IDtcLuRecoveryInitiatedByLuWork **ppWork);};
struct IRemoteDebugManagerCallbackVtbl {HRESULT ( *QueryInterface)(IRemoteDebugManagerCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteDebugManagerCallback *This);ULONG ( *Release)(IRemoteDebugManagerCallback *This);HRESULT ( *ProcessCreateEvent)(IRemoteDebugManagerCallback *This, IRemoteProcess *pProcessNew, IRemoteProcess *pProcessParent);};
struct ITransactionEnlistmentAsyncVtbl {HRESULT ( *QueryInterface)(ITransactionEnlistmentAsync *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionEnlistmentAsync *This);ULONG ( *Release)(ITransactionEnlistmentAsync *This);HRESULT ( *PrepareRequestDone)(ITransactionEnlistmentAsync *This, HRESULT hr, IMoniker *pmk, BOID *pboidReason);HRESULT ( *CommitRequestDone)(ITransactionEnlistmentAsync *This, HRESULT hr);HRESULT ( *AbortRequestDone)(ITransactionEnlistmentAsync *This, HRESULT hr);};
struct ITransactionReceiverFactoryVtbl {HRESULT ( *QueryInterface)(ITransactionReceiverFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionReceiverFactory *This);ULONG ( *Release)(ITransactionReceiverFactory *This);HRESULT ( *Create)(ITransactionReceiverFactory *This, ITransactionReceiver **ppReceiver);};
typedef HRESULT ( *LPD3DENUMTEXTUREFORMATSCALLBACK)(LPDDSURFACEDESC lpDdsd, LPVOID lpContext);
typedef void ( *PWINDBG_OLDKD_EXTENSION_ROUTINE)(ULONG dwCurrentPc, PWINDBG_OLDKD_EXTENSION_APIS lpExtensionApis, PCSTR lpArgumentString);
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 __anonymous0;union {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous1;};};
struct IAMCopyCaptureFileProgressVtbl {HRESULT ( *QueryInterface)(IAMCopyCaptureFileProgress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCopyCaptureFileProgress *This);ULONG ( *Release)(IAMCopyCaptureFileProgress *This);HRESULT ( *Progress)(IAMCopyCaptureFileProgress *This, int iProgress);};
struct IJavaEnumRemoteThreadGroupVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteThreadGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteThreadGroup *This);ULONG ( *Release)(IJavaEnumRemoteThreadGroup *This);HRESULT ( *Next)(IJavaEnumRemoteThreadGroup *This, ULONG celt, IRemoteThreadGroup * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumRemoteThreadGroup *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteThreadGroup *This);HRESULT ( *Clone)(IJavaEnumRemoteThreadGroup *This, IJavaEnumRemoteThreadGroup **ppEnum);HRESULT ( *GetNext)(IJavaEnumRemoteThreadGroup *This, IRemoteThreadGroup **ppirtg);};
typedef BOOL ( *LPDIENUMDEVICEOBJECTSCALLBACKA)(LPCDIDEVICEOBJECTINSTANCEA, LPVOID);
typedef BOOL ( *LPDIENUMDEVICEOBJECTSCALLBACKW)(LPCDIDEVICEOBJECTINSTANCEW, LPVOID);
typedef LPVOID ( *PFUNCTION_TABLE_ACCESS_ROUTINE)(HANDLE hProcess, DWORD AddrBase);
struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD {DWORD SizeOfStruct;DWORD BaseOfImage;DWORD CheckSum;DWORD TimeDateStamp;CHAR FileName[260];BOOLEAN Reparse;};
struct _TRUSTED_DOMAIN_INFORMATION_EX {LSA_UNICODE_STRING Name;LSA_UNICODE_STRING FlatName;PSID Sid;ULONG TrustDirection;ULONG TrustType;ULONG TrustAttributes;};
struct ADOConnectionConstructionVtbl {HRESULT ( *QueryInterface)(ADOConnectionConstruction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOConnectionConstruction *This);ULONG ( *Release)(ADOConnectionConstruction *This);HRESULT ( *get_DSO)(ADOConnectionConstruction *This, IUnknown **ppDSO);HRESULT ( *get_Session)(ADOConnectionConstruction *This, IUnknown **ppSession);HRESULT ( *WrapDSOandSession)(ADOConnectionConstruction *This, IUnknown *pDSO, IUnknown *pSession);};
struct IConnectionPointContainerVtbl {HRESULT ( *QueryInterface)(IConnectionPointContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPointContainer *This);ULONG ( *Release)(IConnectionPointContainer *This);HRESULT ( *EnumConnectionPoints)(IConnectionPointContainer *This, IEnumConnectionPoints **ppEnum);HRESULT ( *FindConnectionPoint)(IConnectionPointContainer *This,  IID * riid, IConnectionPoint **ppCP);};
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMPOINT)(POINT ptScreen, IAccessible **ppacc, VARIANT *pvarChild);
typedef int ( *LPWPUQUERYSOCKETHANDLECONTEXT)(SOCKET s, LPDWORD lpContext, LPINT lpErrno);
typedef void ( *PFNGLARRAYELEMENTARRAYEXTPROC)(GLenum mode, GLsizei count,  GLvoid *pi);
struct _SECURITY_DESCRIPTOR_RELATIVE {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;DWORD Owner;DWORD Group;DWORD Sacl;DWORD Dacl;};
struct IDtcLuSubordinateDtcSinkVtbl {HRESULT ( *QueryInterface)(IDtcLuSubordinateDtcSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuSubordinateDtcSink *This);ULONG ( *Release)(IDtcLuSubordinateDtcSink *This);HRESULT ( *AckUnplug)(IDtcLuSubordinateDtcSink *This);HRESULT ( *TmDown)(IDtcLuSubordinateDtcSink *This);HRESULT ( *SessionLost)(IDtcLuSubordinateDtcSink *This);HRESULT ( *BackedOut)(IDtcLuSubordinateDtcSink *This);HRESULT ( *BackOut)(IDtcLuSubordinateDtcSink *This);HRESULT ( *Committed)(IDtcLuSubordinateDtcSink *This);HRESULT ( *Forget)(IDtcLuSubordinateDtcSink *This);HRESULT ( *RequestCommit)(IDtcLuSubordinateDtcSink *This);};
struct ITransactionVoterFactoryVtbl {HRESULT ( *QueryInterface)(ITransactionVoterFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionVoterFactory *This);ULONG ( *Release)(ITransactionVoterFactory *This);HRESULT ( *Create)(ITransactionVoterFactory *This, ITransaction *pTransaction, ITransactionVoterNotifyAsync *pVoterNotify, ITransactionVoterBallotAsync **ppVoterBallot);};
typedef INT ( *LPDIRECTXREGISTERAPPLICATION)(HWND, LPDIRECTXREGISTERAPPA);
struct _CERT_AUTHORITY_KEY_ID2_INFO {CRYPT_DATA_BLOB KeyId;CERT_ALT_NAME_INFO AuthorityCertIssuer;CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;};
struct _CRYPT_KEY_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;};
struct _IMAGE_LOAD_CONFIG_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;PVOID LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;PVOID EditList;DWORD Reserved[1];};
struct _POLICY_DOMAIN_PASSWORD_INFO {USHORT MinPasswordLength;USHORT PasswordHistoryLength;ULONG PasswordProperties;LARGE_INTEGER MaxPasswordAge;LARGE_INTEGER MinPasswordAge;};
struct _PRINTER_NOTIFY_OPTIONS_TYPE {WORD Type;WORD Reserved0;DWORD Reserved1;DWORD Reserved2;DWORD Count;PWORD pFields;};
struct _STATIC_SERVICES_TABLE_INDEX {ULONG InterfaceIndex;USHORT ServiceType;UCHAR ServiceName[48];};
struct __MIDL_TriggerPublicRPC_0004 {RPC_SYSTEMTIME st;RPC_TIME_ZONE_INFORMATION tzi;RPC_DWORD dwReturn;};
struct __MIDL_TriggerPublicRPC_0005 {RPC_INT nEventType;RPC_SYSTEMTIME stEvent;RPC_SZ szGatewayName;RPC_SZ szPartner;RPC_SZ szMTSID;RPC_SZ szRemoteID;RPC_SZ szOriginator;RPC_INT nPriority;RPC_INT nLength;RPC_INT nSeconds;RPC_INT nCost;RPC_SZ szSubjectID;};
typedef BOOL (*pCryptSIPRemoveSignedDataMsg)(SIP_SUBJECTINFO *pSubjectInfo, DWORD dwIndex);
struct tagEMREXTCREATEFONTINDIRECTW {EMR emr;DWORD ihFont;EXTLOGFONTW elfw;};
struct DIDEVICEOBJECTINSTANCE_DX3A {DWORD dwSize;GUID guidType;DWORD dwOfs;DWORD dwType;DWORD dwFlags;CHAR tszName[260];};
struct DIDEVICEOBJECTINSTANCE_DX3W {DWORD dwSize;GUID guidType;DWORD dwOfs;DWORD dwType;DWORD dwFlags;WCHAR tszName[260];};
typedef BOOL ( *GOPHER_ATTRIBUTE_ENUMERATOR)(LPGOPHER_ATTRIBUTE_TYPE lpAttributeInfo, DWORD dwError);
struct IAgentPrivateNotifySinkVtbl {HRESULT ( *QueryInterface)(IAgentPrivateNotifySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentPrivateNotifySink *This);ULONG ( *Release)(IAgentPrivateNotifySink *This);HRESULT ( *ReleaseAll)(IAgentPrivateNotifySink *This);HRESULT ( *ReleaseOne)(IAgentPrivateNotifySink *This, void *pnNotify);};
typedef DWORD ( *PENUMERATE_GET_NEXT_SERVICE)(HANDLE EnumerationHandle, PIPX_SERVICE Service);
typedef BOOL ( *PNTSEC_TRANSACTION_COMPLETE)(HANDLE, HANDLE, DWORD);
typedef int ( *PWLX_CHANGE_PASSWORD_NOTIFY)(HANDLE hWlx, PWLX_MPR_NOTIFY_INFO pMprInfo, DWORD dwChangeInfo);
struct _CERT_AUTHORITY_KEY_ID_INFO {CRYPT_DATA_BLOB KeyId;CERT_NAME_BLOB CertIssuer;CRYPT_INTEGER_BLOB CertSerialNumber;};
struct _CONSOLE_SCREEN_BUFFER_INFO {COORD dwSize;COORD dwCursorPosition;WORD wAttributes;SMALL_RECT srWindow;COORD dwMaximumWindowSize;};
struct _CRYPT_ENCRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD dwFlags;DWORD dwInnerContentType;};
struct _DPLMSG_GETPROPERTYRESPONSE {DWORD dwType;DWORD dwRequestID;GUID guidPlayer;GUID guidPropertyTag;HRESULT hr;DWORD dwDataSize;DWORD dwPropertyData[1];};
struct _DPLMSG_SETPROPERTYRESPONSE {DWORD dwType;DWORD dwRequestID;GUID guidPlayer;GUID guidPropertyTag;HRESULT hr;};
struct _RTL_CRITICAL_SECTION_DEBUG {WORD Type;WORD CreatorBackTraceIndex;struct _RTL_CRITICAL_SECTION *CriticalSection;LIST_ENTRY ProcessLocksList;DWORD EntryCount;DWORD ContentionCount;DWORD Spare[2];};
struct _SSL_CREDENTIAL_CERTIFICATE {DWORD cbPrivateKey;PBYTE pPrivateKey;DWORD cbCertificate;PBYTE pCertificate;PSTR pszPassword;};
typedef BOOL (*pCryptSIPVerifyIndirectData)(SIP_SUBJECTINFO *pSubjectInfo, SIP_INDIRECT_DATA *pIndirectData);
struct ADOCommandConstructionVtbl {HRESULT ( *QueryInterface)(ADOCommandConstruction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOCommandConstruction *This);ULONG ( *Release)(ADOCommandConstruction *This);HRESULT ( *get_OLEDBCommand)(ADOCommandConstruction *This, IUnknown **ppOLEDBCommand);HRESULT ( *put_OLEDBCommand)(ADOCommandConstruction *This, IUnknown *pOLEDBCommand);};
typedef DWORD ( *HANDLEINCOMINGCALLBACKPROC)(DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);
struct IDtcLuRmEnlistmentSinkVtbl {HRESULT ( *QueryInterface)(IDtcLuRmEnlistmentSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRmEnlistmentSink *This);ULONG ( *Release)(IDtcLuRmEnlistmentSink *This);HRESULT ( *AckUnplug)(IDtcLuRmEnlistmentSink *This);HRESULT ( *TmDown)(IDtcLuRmEnlistmentSink *This);HRESULT ( *SessionLost)(IDtcLuRmEnlistmentSink *This);HRESULT ( *BackedOut)(IDtcLuRmEnlistmentSink *This);HRESULT ( *BackOut)(IDtcLuRmEnlistmentSink *This);HRESULT ( *Committed)(IDtcLuRmEnlistmentSink *This);HRESULT ( *Forget)(IDtcLuRmEnlistmentSink *This);HRESULT ( *Prepare)(IDtcLuRmEnlistmentSink *This);HRESULT ( *RequestCommit)(IDtcLuRmEnlistmentSink *This);};
struct IEnumRemoteThreadGroupVtbl {HRESULT ( *QueryInterface)(IEnumRemoteThreadGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteThreadGroup *This);ULONG ( *Release)(IEnumRemoteThreadGroup *This);HRESULT ( *Next)(IEnumRemoteThreadGroup *This, ULONG celt, IRemoteThreadGroup * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumRemoteThreadGroup *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteThreadGroup *This);HRESULT ( *Clone)(IEnumRemoteThreadGroup *This, IJavaEnumRemoteThreadGroup **ppEnum);};
struct IJavaEnumRemoteProcessVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteProcess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteProcess *This);ULONG ( *Release)(IJavaEnumRemoteProcess *This);HRESULT ( *Next)(IJavaEnumRemoteProcess *This, ULONG celt, IRemoteProcess * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumRemoteProcess *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteProcess *This);HRESULT ( *Clone)(IJavaEnumRemoteProcess *This, IJavaEnumRemoteProcess **ppEnum);HRESULT ( *GetNext)(IJavaEnumRemoteProcess *This, IRemoteProcess **ppirp);};
struct IRemoteContainerObjectVtbl {HRESULT ( *QueryInterface)(IRemoteContainerObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteContainerObject *This);ULONG ( *Release)(IRemoteContainerObject *This);HRESULT ( *GetType)(IRemoteContainerObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteContainerObject *This);HRESULT ( *ClearBreakpoint)(IRemoteContainerObject *This);HRESULT ( *GetFieldObject)(IRemoteContainerObject *This, IRemoteField *pField, IRemoteObject **ppFieldObject);};
struct IWEExtendPropertySheetVtbl {HRESULT ( *QueryInterface)(IWEExtendPropertySheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWEExtendPropertySheet *This);ULONG ( *Release)(IWEExtendPropertySheet *This);HRESULT ( *CreatePropertySheetPages)(IWEExtendPropertySheet *This, IUnknown *piData, IWCPropertySheetCallback *piCallback);};
typedef DWORD ( *PTRANSLATE_ADDRESS_ROUTINE)(HANDLE hProcess, HANDLE hThread, LPADDRESS lpaddr);
struct _IMAGEHLP_DUPLICATE_SYMBOL {DWORD SizeOfStruct;DWORD NumberOfDups;PIMAGEHLP_SYMBOL Symbol;ULONG SelectedSymbol;};
struct _IMAGE_ROM_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD BaseOfBss;DWORD GprMask;DWORD CprMask[4];DWORD GpValue;};
struct _SPC_INDIRECT_DATA_CONTENT {CRYPT_ATTRIBUTE_TYPE_VALUE Data;CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;CRYPT_HASH_BLOB Digest;};
struct _TAPE_GET_MEDIA_PARAMETERS {LARGE_INTEGER Capacity;LARGE_INTEGER Remaining;DWORD BlockSize;DWORD PartitionCount;BOOLEAN WriteProtected;};
struct tagEMRMODIFYWORLDTRANSFORM {EMR emr;XFORM xform;DWORD iMode;};
struct IAMAnalogVideoDecoderVtbl {HRESULT ( *QueryInterface)(IAMAnalogVideoDecoder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMAnalogVideoDecoder *This);ULONG ( *Release)(IAMAnalogVideoDecoder *This);HRESULT ( *get_AvailableTVFormats)(IAMAnalogVideoDecoder *This, int *lAnalogVideoStandard);HRESULT ( *put_TVFormat)(IAMAnalogVideoDecoder *This, int lAnalogVideoStandard);HRESULT ( *get_TVFormat)(IAMAnalogVideoDecoder *This, int *plAnalogVideoStandard);HRESULT ( *get_HorizontalLocked)(IAMAnalogVideoDecoder *This, int *plLocked);HRESULT ( *put_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This, int lVCRHorizontalLocking);HRESULT ( *get_VCRHorizontalLocking)(IAMAnalogVideoDecoder *This, int *plVCRHorizontalLocking);HRESULT ( *get_NumberOfLines)(IAMAnalogVideoDecoder *This, int *plNumberOfLines);HRESULT ( *put_OutputEnable)(IAMAnalogVideoDecoder *This, int lOutputEnable);HRESULT ( *get_OutputEnable)(IAMAnalogVideoDecoder *This, int *plOutputEnable);};
struct IAMAnalogVideoEncoderVtbl {HRESULT ( *QueryInterface)(IAMAnalogVideoEncoder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMAnalogVideoEncoder *This);ULONG ( *Release)(IAMAnalogVideoEncoder *This);HRESULT ( *get_AvailableTVFormats)(IAMAnalogVideoEncoder *This, int *lAnalogVideoStandard);HRESULT ( *put_TVFormat)(IAMAnalogVideoEncoder *This, int lAnalogVideoStandard);HRESULT ( *get_TVFormat)(IAMAnalogVideoEncoder *This, int *plAnalogVideoStandard);HRESULT ( *put_CopyProtection)(IAMAnalogVideoEncoder *This, int lVideoCopyProtection);HRESULT ( *get_CopyProtection)(IAMAnalogVideoEncoder *This, int *lVideoCopyProtection);HRESULT ( *put_CCEnable)(IAMAnalogVideoEncoder *This, int lCCEnable);HRESULT ( *get_CCEnable)(IAMAnalogVideoEncoder *This, int *lCCEnable);};
struct IEnumOleDocumentViewsVtbl {HRESULT ( *QueryInterface)(IEnumOleDocumentViews *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleDocumentViews *This);ULONG ( *Release)(IEnumOleDocumentViews *This);HRESULT ( *Next)(IEnumOleDocumentViews *This, ULONG cViews, IOleDocumentView **rgpView, ULONG *pcFetched);HRESULT ( *Skip)(IEnumOleDocumentViews *This, ULONG cViews);HRESULT ( *Reset)(IEnumOleDocumentViews *This);HRESULT ( *Clone)(IEnumOleDocumentViews *This, IEnumOleDocumentViews **ppEnum);};
struct IInternetThreadSwitchVtbl {HRESULT ( *QueryInterface)(IInternetThreadSwitch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetThreadSwitch *This);ULONG ( *Release)(IInternetThreadSwitch *This);HRESULT ( *Prepare)(IInternetThreadSwitch *This);HRESULT ( *Continue)(IInternetThreadSwitch *This);};
struct IJavaEnumRemoteObjectVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteObject *This);ULONG ( *Release)(IJavaEnumRemoteObject *This);HRESULT ( *Next)(IJavaEnumRemoteObject *This, ULONG celt, IRemoteObject * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumRemoteObject *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteObject *This);HRESULT ( *Clone)(IJavaEnumRemoteObject *This, IJavaEnumRemoteObject **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteObject *This, ULONG *pcelt);HRESULT ( *GetNext)(IJavaEnumRemoteObject *This, IRemoteObject **ppiro);};
struct IJavaEnumRemoteThreadVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteThread *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteThread *This);ULONG ( *Release)(IJavaEnumRemoteThread *This);HRESULT ( *Next)(IJavaEnumRemoteThread *This, ULONG celt, IRemoteThread * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumRemoteThread *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteThread *This);HRESULT ( *Clone)(IJavaEnumRemoteThread *This, IJavaEnumRemoteThread **ppEnum);HRESULT ( *GetNext)(IJavaEnumRemoteThread *This, IRemoteThread **ppt);};
typedef void ( *LPFN_GETACCEPTEXSOCKADDRS)(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength);
typedef void ( *PFNGLCOLORSUBTABLEEXTPROC)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type,  GLvoid *data);
typedef void ( *PFNGLNORMALPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef void ( *PWINDBG_EXTENSION_ROUTINE)(HANDLE hCurrentProcess, HANDLE hCurrentThread, ULONG dwCurrentPc, ULONG dwProcessor, PCSTR lpArgumentString);
struct RETRIEVAL_POINTERS_BUFFER {DWORD ExtentCount;LARGE_INTEGER StartingVcn;struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 Extents[1];};
typedef BOOL ( *VDMTERMINATETASKINWOWPROC)(DWORD, WORD);
struct _CERT_KEY_ATTRIBUTES_INFO {CRYPT_DATA_BLOB KeyId;CRYPT_BIT_BLOB IntendedKeyUsage;PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;};
struct _CERT_SIGNED_CONTENT_INFO {CRYPT_DER_BLOB ToBeSigned;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CRYPT_BIT_BLOB Signature;};
struct _COINSTALLER_CONTEXT_DATA {BOOL PostProcessing;DWORD InstallResult;PVOID PrivateData;};
struct _CRYPT_RC2_CBC_PARAMETERS {DWORD dwVersion;BOOL fIV;BYTE rgbIV[8];};
struct _MEMORY_BASIC_INFORMATION {PVOID BaseAddress;PVOID AllocationBase;DWORD AllocationProtect;SIZE_T RegionSize;DWORD State;DWORD Protect;DWORD Type;};
struct _POLICY_AUDIT_EVENTS_INFO {BOOLEAN AuditingMode;PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;ULONG MaximumAuditEventCount;};
struct _PRINTER_NOTIFY_INFO_DATA {WORD Type;WORD Field;DWORD Reserved;DWORD Id;union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 NotifyData;};
struct _SERVICE_FAILURE_ACTIONSA {DWORD dwResetPeriod;LPSTR lpRebootMsg;LPSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct _SP_DRVINFO_DETAIL_DATA_A {DWORD cbSize;FILETIME InfDate;DWORD CompatIDsOffset;DWORD CompatIDsLength;DWORD Reserved;CHAR SectionName[256];CHAR InfFileName[260];CHAR DrvDescription[256];CHAR HardwareID[1];};
struct _SP_DRVINFO_DETAIL_DATA_W {DWORD cbSize;FILETIME InfDate;DWORD CompatIDsOffset;DWORD CompatIDsLength;DWORD Reserved;WCHAR SectionName[256];WCHAR InfFileName[260];WCHAR DrvDescription[256];WCHAR HardwareID[1];};
struct _SP_PROPSHEETPAGE_REQUEST {DWORD cbSize;DWORD PageRequested;HDEVINFO DeviceInfoSet;PSP_DEVINFO_DATA DeviceInfoData;};
struct _SP_SELECTDEVICE_PARAMS_A {SP_CLASSINSTALL_HEADER ClassInstallHeader;CHAR Title[60];CHAR Instructions[256];CHAR ListLabel[30];BYTE Reserved[2];};
struct tagEMRCREATEBRUSHINDIRECT {EMR emr;DWORD ihBrush;LOGBRUSH lb;};
struct tagNMDATETIMEFORMATQUERYA {NMHDR nmhdr;LPCSTR pszFormat;SIZE szMax;};
struct CLUS_RESOURCE_CLASS_INFO {union {struct {CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F __anonymous0;DWORD SubClass;};ULARGE_INTEGER li;};};
struct DPCOMPOUNDADDRESSELEMENT {GUID guidDataType;DWORD dwDataSize;LPVOID lpData;};
struct IEnumParticipantInfoVtbl {HRESULT ( *QueryInterface)(IEnumParticipantInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumParticipantInfo *This);ULONG ( *Release)(IEnumParticipantInfo *This);HRESULT ( *Next)(IEnumParticipantInfo *This, ULONG celt, ITParticipantInfo **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumParticipantInfo *This);HRESULT ( *Skip)(IEnumParticipantInfo *This, ULONG celt);HRESULT ( *Clone)(IEnumParticipantInfo *This, IEnumParticipantInfo **ppEnum);};
struct IJavaEnumRemoteFieldVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteField *This);ULONG ( *Release)(IJavaEnumRemoteField *This);HRESULT ( *Next)(IJavaEnumRemoteField *This, ULONG celt, IRemoteField * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumRemoteField *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteField *This);HRESULT ( *Clone)(IJavaEnumRemoteField *This, IJavaEnumRemoteField **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteField *This, ULONG *pcelt);HRESULT ( *GetNext)(IJavaEnumRemoteField *This, IRemoteField **ppirf);};
typedef void ( *INTERNET_STATUS_CALLBACK)(HINTERNET hInternet, DWORD dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength);
struct IResourceManagerSinkVtbl {HRESULT ( *QueryInterface)(IResourceManagerSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceManagerSink *This);ULONG ( *Release)(IResourceManagerSink *This);HRESULT ( *TMDown)(IResourceManagerSink *This);};
struct IWEExtendContextMenuVtbl {HRESULT ( *QueryInterface)(IWEExtendContextMenu *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWEExtendContextMenu *This);ULONG ( *Release)(IWEExtendContextMenu *This);HRESULT ( *AddContextMenuItems)(IWEExtendContextMenu *This, IUnknown *piData, IWCContextMenuCallback *piCallback);};
typedef BOOL ( *LPDIENUMDEVICESCALLBACKA)(LPCDIDEVICEINSTANCEA, LPVOID);
typedef BOOL ( *LPDIENUMDEVICESCALLBACKW)(LPCDIDEVICEINSTANCEW, LPVOID);
typedef BOOL ( *LPDIENUMEFFECTSCALLBACKA)(LPCDIEFFECTINFOA, LPVOID);
typedef BOOL ( *LPDIENUMEFFECTSCALLBACKW)(LPCDIEFFECTINFOW, LPVOID);
typedef INT ( *LPNSPINSTALLSERVICECLASS)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo);
typedef void ( *PFNGLINDEXPOINTEREXTPROC)(GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
struct _CMSG_HASHED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_HASH_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CTL_VERIFY_USAGE_STATUS {DWORD cbSize;DWORD dwError;DWORD dwFlags;PCCTL_CONTEXT *ppCtl;DWORD dwCtlEntryIndex;PCCERT_CONTEXT *ppSigner;DWORD dwSignerIndex;};
struct _HSE_SEND_HEADER_EX_INFO {LPCSTR pszStatus;LPCSTR pszHeader;DWORD cchStatus;DWORD cchHeader;BOOL fKeepConn;};
struct _RTCP_PARTICIPANT_REPORT {DWORD SSRC;RTCP_SENDER_REPORT LastSR;RTCP_RECEIVER_REPORT LastIncomingRR;RTCP_RECEIVER_REPORT LastOutgoingRR;};
struct _RemoteMaintenanceStatus {RPC_DWORD dwStatus;RPC_SYSTEMTIME st;RPC_SZ szUser;};
struct _SCH_CRED_SECRET_PRIVKEY {DWORD dwType;PBYTE pPrivateKey;DWORD cbPrivateKey;PSTR pszPassword;};
struct _SERVICE_TYPE_VALUE_ABSA {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPSTR lpValueName;PVOID lpValue;};
struct mpeglayer3waveformat_tag {WAVEFORMATEX wfx;WORD wID;DWORD fdwFlags;WORD nBlockSize;WORD nFramesPerBlock;WORD nCodecDelay;};
struct tagMCI_ANIM_UPDATE_PARMS {DWORD dwCallback;RECT rc;HDC hDC;};
struct tagMQPROPERTYRESTRICTION {ULONG rel;PROPID prop;MQPROPVARIANT prval;};
struct tagPIXELFORMATDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerType;BYTE bReserved;DWORD dwLayerMask;DWORD dwVisibleMask;DWORD dwDamageMask;};
struct truespeechwaveformat_tag {WAVEFORMATEX wfx;WORD wRevision;WORD nSamplesPerBlock;BYTE abReserved[28];};
typedef SCODE  CREATECONVERSATIONINDEX(ULONG cbParent, LPBYTE lpbParent, ULONG *lpcbConvIndex, LPBYTE *lppbConvIndex);
struct IEnumMediaTerminalsVtbl {HRESULT ( *QueryInterface)(IEnumMediaTerminals *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMediaTerminals *This);ULONG ( *Release)(IEnumMediaTerminals *This);HRESULT ( *Next)(IEnumMediaTerminals *This, ULONG celt, ITMediaTerminal **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumMediaTerminals *This);HRESULT ( *Skip)(IEnumMediaTerminals *This, ULONG celt);HRESULT ( *Clone)(IEnumMediaTerminals *This, IEnumMediaTerminals **ppEnum);};
struct IP_ADAPTER_BINDING_INFO {DWORD NumAddresses;DWORD RemoteAddress;IP_LOCAL_BINDING Address[1];};
struct ITransactionOptionsVtbl {HRESULT ( *QueryInterface)(ITransactionOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionOptions *This);ULONG ( *Release)(ITransactionOptions *This);HRESULT ( *SetOptions)(ITransactionOptions *This, XACTOPT *pOptions);HRESULT ( *GetOptions)(ITransactionOptions *This, XACTOPT *pOptions);};
typedef HRESULT ( *LPGETTNEFSTREAMCODEPAGE)(LPSTREAM lpStream, ULONG *lpulCodepage, ULONG *lpulSubCodepage);
typedef SOCKET ( *LPWPUCREATESOCKETHANDLE)(DWORD dwCatalogEntryId, DWORD dwContext, LPINT lpErrno);
typedef BOOL ( *PDETECT_PROGRESS_NOTIFY)(PVOID ProgressNotifyParam, DWORD DetectComplete);
typedef BOOL ( *PWLX_GET_SOURCE_DESKTOP)(HANDLE hWlx, PWLX_DESKTOP *ppDesktop);
typedef BOOL ( *PWLX_SET_RETURN_DESKTOP)(HANDLE hWlx, PWLX_DESKTOP pDesktop);
typedef BOOL ( *WSC_REMOVE_QOS_TEMPLATE)( LPGUID Guid, LPWSABUF QosName);
struct _DistributedLockRequest {RPC_CHAR rgchLockName[17];RPC_DWORD dwFlags;DistributedLockOwner dlo;};
struct _GET_CHANGER_PARAMETERS {DWORD Size;WORD NumberTransportElements;WORD NumberStorageElements;WORD NumberCleanerSlots;WORD NumberIEElements;WORD NumberDataTransferElements;WORD NumberOfDoors;WORD FirstSlotNumber;WORD FirstDriveNumber;WORD FirstTransportNumber;WORD FirstIEPortNumber;WORD FirstCleanerSlotAddress;WORD MagazineSize;DWORD DriveCleanTimeout;DWORD Features0;DWORD Reserved;BYTE MoveFromTransport;BYTE MoveFromSlot;BYTE MoveFromIePort;BYTE MoveFromDrive;BYTE ExchangeFromTransport;BYTE ExchangeFromSlot;BYTE ExchangeFromIePort;BYTE ExchangeFromDrive;};
struct _NTMS_IEDOORINFORMATION {DWORD Number;DWORD State;WORD MaxOpenSecs;NTMS_GUID Library;};
struct _NTMS_IEPORTINFORMATION {DWORD Number;DWORD Content;DWORD Position;WORD MaxExtendSecs;NTMS_GUID Library;};
struct _POLICY_DNS_DOMAIN_INFO {LSA_UNICODE_STRING Name;LSA_UNICODE_STRING DnsDomainName;LSA_UNICODE_STRING DnsTreeName;GUID DomainGuid;PSID Sid;};
struct _SERVICE_TYPE_INFO_ABSA {LPSTR lpTypeName;DWORD dwValueCount;SERVICE_TYPE_VALUE_ABSA Values[1];};
struct _SE_IMPERSONATION_STATE {PACCESS_TOKEN Token;BOOLEAN CopyOnOpen;BOOLEAN EffectiveOnly;SECURITY_IMPERSONATION_LEVEL Level;};
struct _SP_DETECTDEVICE_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;PDETECT_PROGRESS_NOTIFY DetectProgressNotify;PVOID ProgressNotifyParam;};
struct tagCInterfaceStubHeader { IID *piid; MIDL_SERVER_INFO *pServerInfo;unsigned int DispatchTableCount; PRPC_STUB_FUNCTION *pDispatchTable;};
struct tagEMRSETPALETTEENTRIES {EMR emr;DWORD ihPal;DWORD iStart;DWORD cEntries;PALETTEENTRY aPalEntries[1];};
struct tagMCI_OVLY_LOAD_PARMSA {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSA {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_WAVE_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwBufferSeconds;};
struct tagNMDATETIMEWMKEYDOWNA {NMHDR nmhdr;int nVirtKey;LPCSTR pszFormat;SYSTEMTIME st;};
typedef SECURITY_STATUS ( *APPLY_CONTROL_TOKEN_FN)(PCtxtHandle, PSecBufferDesc);
typedef SECURITY_STATUS ( *COMPLETE_AUTH_TOKEN_FN)(PCtxtHandle, PSecBufferDesc);
typedef void (*D3DRMFRAMEMOVECALLBACK)(LPDIRECT3DRMFRAME obj, LPVOID arg, D3DVALUE delta);
struct ICancelMethodCallsVtbl {HRESULT ( *QueryInterface)(ICancelMethodCalls *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICancelMethodCalls *This);ULONG ( *Release)(ICancelMethodCalls *This);HRESULT ( *Cancel)(ICancelMethodCalls *This);HRESULT ( *TestCancel)(ICancelMethodCalls *This);HRESULT ( *SetCancelTimeout)(ICancelMethodCalls *This, ULONG ulSeconds);};
struct IEnumRemoteProcessVtbl {HRESULT ( *QueryInterface)(IEnumRemoteProcess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteProcess *This);ULONG ( *Release)(IEnumRemoteProcess *This);HRESULT ( *Next)(IEnumRemoteProcess *This, ULONG celt, IRemoteProcess * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumRemoteProcess *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteProcess *This);HRESULT ( *Clone)(IEnumRemoteProcess *This, IJavaEnumRemoteProcess **ppEnum);};
struct IRemoteArrayObjectVtbl {HRESULT ( *QueryInterface)(IRemoteArrayObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteArrayObject *This);ULONG ( *Release)(IRemoteArrayObject *This);HRESULT ( *GetType)(IRemoteArrayObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteArrayObject *This);HRESULT ( *ClearBreakpoint)(IRemoteArrayObject *This);HRESULT ( *GetElementObjects)(IRemoteArrayObject *This, IJavaEnumRemoteObject **ppEnum);HRESULT ( *GetSize)(IRemoteArrayObject *This, ULONG *pcElements);HRESULT ( *GetElementValues)(IRemoteArrayObject *This, IEnumRemoteValue **ppEnum);};
struct IRemoteClassObjectVtbl {HRESULT ( *QueryInterface)(IRemoteClassObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteClassObject *This);ULONG ( *Release)(IRemoteClassObject *This);HRESULT ( *GetType)(IRemoteClassObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteClassObject *This);HRESULT ( *ClearBreakpoint)(IRemoteClassObject *This);HRESULT ( *GetFieldObject)(IRemoteClassObject *This, IRemoteField *pField, IRemoteObject **ppFieldObject);HRESULT ( *GetDerivedMostType)(IRemoteClassObject *This, IRemoteClassField **ppDerivedMostField);};
struct ITransactionObjectVtbl {HRESULT ( *QueryInterface)(ITransactionObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionObject *This);ULONG ( *Release)(ITransactionObject *This);HRESULT ( *GetTransactionObject)(ITransactionObject *This, ULONG ulTransactionLevel, ITransaction **ppTransactionObject);};
struct IXAResourceManagerVtbl {HRESULT ( *QueryInterface)(IXAResourceManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXAResourceManager *This);ULONG ( *Release)(IXAResourceManager *This);};
typedef HRESULT ( *LPFNACCESSIBLECHILDREN)(IAccessible *paccContainer, LONG iChildStart, LONG cChildren, VARIANT *rgvarChildren, LONG *pcObtained);
typedef DWORD ( *PCREATE_STATIC_SERVICE)(ULONG InterfaceIndex, PIPX_SERVER_ENTRY ServerEntry);
typedef DWORD ( *PDELETE_STATIC_SERVICE)(ULONG InterfaceIndex, PIPX_SERVER_ENTRY ServerEntry);
typedef void ( *PFNGLCOLORTABLEEXTPROC)(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type,  GLvoid *data);
typedef void ( *PFNGLDRAWARRAYSEXTPROC)(GLenum mode, GLint first, GLsizei count);
typedef BOOL ( *PFN_CMSG_STREAM_OUTPUT)( void *pvArg, BYTE *pbData, DWORD cbData, BOOL fFinal);
struct _ACTRL_PROPERTY_ENTRYA {LPSTR lpProperty;PACTRL_ACCESS_ENTRY_LISTA pAccessEntryList;ULONG fListFlags;};
struct _CTL_VERIFY_USAGE_PARA {DWORD cbSize;CRYPT_DATA_BLOB ListIdentifier;DWORD cCtlStore;HCERTSTORE *rghCtlStore;DWORD cSignerStore;HCERTSTORE *rghSignerStore;};
struct _IMAGE_TLS_DIRECTORY32 {DWORD StartAddressOfRawData;DWORD EndAddressOfRawData;PDWORD AddressOfIndex;PIMAGE_TLS_CALLBACK *AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _IPX_STATIC_ROUTE_INFO {_IPX_STATIC_ROUTE_INFO___55A506EDD8AAD14FACDD6C3120B03F69 __anonymous0;USHORT TickCount;USHORT HopCount;UCHAR NextHopMacAddress[6];};
struct _NTMS_PMIDINFORMATIONA {NTMS_GUID CurrentLibrary;NTMS_GUID MediaPool;NTMS_GUID Location;DWORD LocationType;NTMS_GUID MediaType;NTMS_GUID HomeSlot;CHAR szBarCode[64];DWORD BarCodeState;CHAR szSequenceNumber[32];DWORD MediaState;DWORD dwNumberOfPartitions;};
struct _NTMS_PMIDINFORMATIONW {NTMS_GUID CurrentLibrary;NTMS_GUID MediaPool;NTMS_GUID Location;DWORD LocationType;NTMS_GUID MediaType;NTMS_GUID HomeSlot;WCHAR szBarCode[64];DWORD BarCodeState;WCHAR szSequenceNumber[32];DWORD MediaState;DWORD dwNumberOfPartitions;};
struct _POLICY_AUDIT_LOG_INFO {ULONG AuditLogPercentFull;ULONG MaximumLogSize;LARGE_INTEGER AuditRetentionPeriod;BOOLEAN AuditLogFullShutdownInProgress;LARGE_INTEGER TimeToShutdown;ULONG NextAuditRecordId;};
struct _SP_ENABLECLASS_PARAMS {SP_CLASSINSTALL_HEADER ClassInstallHeader;GUID ClassGuid;DWORD EnableMessage;};
struct _TIME_ZONE_INFORMATION {LONG Bias;WCHAR StandardName[32];SYSTEMTIME StandardDate;LONG StandardBias;WCHAR DaylightName[32];SYSTEMTIME DaylightDate;LONG DaylightBias;};
typedef BOOL (*pfnIsFileSupportedName)(WCHAR *pwszFileName, GUID *pgSubject);
struct tagEMRCREATECOLORSPACE {EMR emr;DWORD ihCS;LOGCOLORSPACEW lcs;};
struct tagEMREXTSELECTCLIPRGN {EMR emr;DWORD cbRgnData;DWORD iMode;BYTE RgnData[1];};
struct tagSQL_INTERVAL_STRUCT {SQLINTERVAL interval_type;SQLSMALLINT interval_sign;union tagSQL_INTERVAL_STRUCT___E0CBF60BBC76AAAF9CF29F3CBADF463C intval;};
struct DIDEVICEINSTANCE_DX3A {DWORD dwSize;GUID guidInstance;GUID guidProduct;DWORD dwDevType;CHAR tszInstanceName[260];CHAR tszProductName[260];};
struct DIDEVICEINSTANCE_DX3W {DWORD dwSize;GUID guidInstance;GUID guidProduct;DWORD dwDevType;WCHAR tszInstanceName[260];WCHAR tszProductName[260];};
struct IEnumOleUndoUnitsVtbl {HRESULT ( *QueryInterface)(IEnumOleUndoUnits *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOleUndoUnits *This);ULONG ( *Release)(IEnumOleUndoUnits *This);HRESULT ( *Next)(IEnumOleUndoUnits *This, ULONG cElt, IOleUndoUnit **rgElt, ULONG *pcEltFetched);HRESULT ( *Skip)(IEnumOleUndoUnits *This, ULONG cElt);HRESULT ( *Reset)(IEnumOleUndoUnits *This);HRESULT ( *Clone)(IEnumOleUndoUnits *This, IEnumOleUndoUnits **ppEnum);};
struct IEnumRemoteObjectVtbl {HRESULT ( *QueryInterface)(IEnumRemoteObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteObject *This);ULONG ( *Release)(IEnumRemoteObject *This);HRESULT ( *Next)(IEnumRemoteObject *This, ULONG celt, IRemoteObject * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumRemoteObject *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteObject *This);HRESULT ( *Clone)(IEnumRemoteObject *This, IJavaEnumRemoteObject **ppEnum);HRESULT ( *GetCount)(IEnumRemoteObject *This, ULONG *pcelt);};
struct IEnumRemoteThreadVtbl {HRESULT ( *QueryInterface)(IEnumRemoteThread *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteThread *This);ULONG ( *Release)(IEnumRemoteThread *This);HRESULT ( *Next)(IEnumRemoteThread *This, ULONG celt, IRemoteThread * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumRemoteThread *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteThread *This);HRESULT ( *Clone)(IEnumRemoteThread *This, IJavaEnumRemoteThread **ppEnum);};
struct IProvideClassInfoVtbl {HRESULT ( *QueryInterface)(IProvideClassInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo *This);ULONG ( *Release)(IProvideClassInfo *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo *This, ITypeInfo **ppTI);};
struct IRowsetNextRowsetVtbl {HRESULT ( *QueryInterface)(IRowsetNextRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNextRowset *This);ULONG ( *Release)(IRowsetNextRowset *This);HRESULT ( *GetNextRowset)(IRowsetNextRowset *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppNextRowset);};
struct ISequentialStreamVtbl {HRESULT ( *QueryInterface)(ISequentialStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISequentialStream *This);ULONG ( *Release)(ISequentialStream *This);HRESULT ( *Read)(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(ISequentialStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);};
struct ISupportErrorInfoVtbl {HRESULT ( *QueryInterface)(ISupportErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISupportErrorInfo *This);ULONG ( *Release)(ISupportErrorInfo *This);HRESULT ( *InterfaceSupportsErrorInfo)(ISupportErrorInfo *This,  IID * riid);};
typedef HRESULT ( *LPD3DVALIDATECALLBACK)(LPVOID lpUserArg, DWORD dwOffset);
typedef HRESULT ( *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);
typedef HRESULT ( *LPDDENUMVIDEOCALLBACK)(LPDDVIDEOPORTCAPS, LPVOID);
typedef INT ( *LPWSCENABLENSPROVIDER)(LPGUID lpProviderId, BOOL fEnable);
typedef void ( *PFN_HSE_IO_COMPLETION)(EXTENSION_CONTROL_BLOCK *pECB, PVOID pContext, DWORD cbIO, DWORD dwError);
typedef HRESULT (*PMSBDNOUTPUTSETHWADDR)(MSBDN_OUTPUT_SUBSYSTEM *, LPBYTE, LPBYTE, LPWORD);
typedef ULONG ( *PWINDBG_IOCTL_ROUTINE)(USHORT IoctlType, PVOID lpvData, ULONG cbSize);
typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
struct _CERT_REVOCATION_PARA {DWORD cbSize;PCCERT_CONTEXT pIssuerCert;DWORD cCertStore;HCERTSTORE *rgCertStore;};
struct _FORMAT_EX_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;WORD FormatGapLength;WORD SectorsPerTrack;WORD SectorNumber[1];};
struct _FULL_PTR_XLAT_TABLES {struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 RefIdToPointer;struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D PointerToRefId;unsigned int NextRefId;XLAT_SIDE XlatSide;};
struct _LSA_AUTH_INFORMATION {LARGE_INTEGER LastUpdateTime;ULONG AuthType;ULONG AuthInfoLength;PUCHAR AuthInfo;};
struct _PRINTER_ENUM_VALUESA {LPSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
struct _RAS_PPP_NBFCP_RESULT {DWORD dwError;DWORD dwNetBiosError;CHAR szName[17];WCHAR wszWksta[17];};
struct _RPC_CLIENT_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;unsigned int Reserved; void *InterpreterInfo;unsigned int Flags;};
struct _RPC_SERVER_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;void *DefaultManagerEpv; void *InterpreterInfo;unsigned int Flags;};
struct tagDBCONTENTPROXIMITY {DWORD dwProximityUnit;ULONG ulProximityDistance;LONG lWeight;};
struct tagMCI_SYSINFO_PARMSA {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
struct tagMCI_WAVE_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;UINT wInput;UINT wOutput;WORD wFormatTag;WORD wReserved2;WORD nChannels;WORD wReserved3;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wReserved4;WORD wBitsPerSample;WORD wReserved5;};
struct tagMIXERLINECONTROLSA {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLA pamxctrl;};
struct tagMIXERLINECONTROLSW {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLW pamxctrl;};
struct urlinvokecommandinfoA {DWORD dwcbSize;DWORD dwFlags;HWND hwndParent;LPCSTR pcszVerb;};
struct IAMDroppedFramesVtbl {HRESULT ( *QueryInterface)(IAMDroppedFrames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDroppedFrames *This);ULONG ( *Release)(IAMDroppedFrames *This);HRESULT ( *GetNumDropped)(IAMDroppedFrames *This, int *plDropped);HRESULT ( *GetNumNotDropped)(IAMDroppedFrames *This, int *plNotDropped);HRESULT ( *GetDroppedInfo)(IAMDroppedFrames *This, int lSize, int *plArray, int *plNumCopied);HRESULT ( *GetAverageFrameSize)(IAMDroppedFrames *This, int *plAverageSize);};
struct ICommandValidateVtbl {HRESULT ( *QueryInterface)(ICommandValidate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandValidate *This);ULONG ( *Release)(ICommandValidate *This);HRESULT ( *ValidateCompletely)(ICommandValidate *This);HRESULT ( *ValidateSyntax)(ICommandValidate *This);};
struct IDBCreateCommandVtbl {HRESULT ( *QueryInterface)(IDBCreateCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBCreateCommand *This);ULONG ( *Release)(IDBCreateCommand *This);HRESULT ( *CreateCommand)(IDBCreateCommand *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppCommand);};
struct IDBCreateSessionVtbl {HRESULT ( *QueryInterface)(IDBCreateSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBCreateSession *This);ULONG ( *Release)(IDBCreateSession *This);HRESULT ( *CreateSession)(IDBCreateSession *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppDBSession);};
struct IEnumRemoteFieldVtbl {HRESULT ( *QueryInterface)(IEnumRemoteField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteField *This);ULONG ( *Release)(IEnumRemoteField *This);HRESULT ( *Next)(IEnumRemoteField *This, ULONG celt, IRemoteField * *    rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumRemoteField *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteField *This);HRESULT ( *Clone)(IEnumRemoteField *This, IJavaEnumRemoteField **ppEnum);HRESULT ( *GetCount)(IEnumRemoteField *This, ULONG *pcelt);};
struct IEnumRemoteValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteValue *This);ULONG ( *Release)(IEnumRemoteValue *This);HRESULT ( *Skip)(IEnumRemoteValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteValue *This);HRESULT ( *Clone)(IEnumRemoteValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteValue *This, ULONG *pcelt);};
struct IMPORT_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;DWORD SizeOfData;IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 __anonymous0;unsigned short Type : 2;unsigned short NameType : 3;unsigned short Reserved : 11;};
struct IOleDocumentSiteVtbl {HRESULT ( *QueryInterface)(IOleDocumentSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentSite *This);ULONG ( *Release)(IOleDocumentSite *This);HRESULT ( *ActivateMe)(IOleDocumentSite *This, IOleDocumentView *pViewToActivate);};
struct IPSFactoryBufferVtbl {HRESULT ( *QueryInterface)(IPSFactoryBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPSFactoryBuffer *This);ULONG ( *Release)(IPSFactoryBuffer *This);HRESULT ( *CreateProxy)(IPSFactoryBuffer *This, IUnknown *pUnkOuter,  IID * riid, IRpcProxyBuffer **ppProxy, void **ppv);HRESULT ( *CreateStub)(IPSFactoryBuffer *This,  IID * riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);};
struct IWEInvokeCommandVtbl {HRESULT ( *QueryInterface)(IWEInvokeCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWEInvokeCommand *This);ULONG ( *Release)(IWEInvokeCommand *This);HRESULT ( *InvokeCommand)(IWEInvokeCommand *This, ULONG nCommandID, IUnknown *piData);};
typedef BOOL ( *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef int ( *LPWPUGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef SOCKET ( *LPWPUMODIFYIFSHANDLE)(DWORD dwCatalogEntryId, SOCKET ProposedHandle, LPINT lpErrno);
typedef int ( *LPWSCGETPROVIDERPATH)(LPGUID lpProviderId, WCHAR *lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno);
typedef int ( *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef UINT ( *PFNRECONCILEPROFILEA)(LPCSTR pszCentralFile, LPCSTR pszLocalFile, DWORD dwFlags);
typedef BOOL ( *PGET_SERVICE_FROM_ID)(ULONG ServiceID, PIPX_SERVICE Service);
typedef RPC_STATUS  RPC_FORWARD_FUNCTION(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned char *Rpcpro, void **ppDestEndpoint);
struct SChannelHookCallInfo {IID iid;DWORD cbSize;GUID uCausality;DWORD dwServerPid;DWORD iMethod;void *pObject;};
struct SIP_ADD_NEWPROVIDER_ {DWORD cbStruct;GUID *pgSubject;WCHAR *pwszDLLFileName;WCHAR *pwszMagicNumber;WCHAR *pwszIsFunctionName;WCHAR *pwszGetFuncName;WCHAR *pwszPutFuncName;WCHAR *pwszCreateFuncName;WCHAR *pwszVerifyFuncName;WCHAR *pwszRemoveFuncName;WCHAR *pwszIsFunctionNameFmt2;};
struct _CRYPT_PROVIDER_CERT {DWORD cbStruct;PCCERT_CONTEXT pCert;BOOL fCommercial;BOOL fTrustedRoot;BOOL fSelfSigned;BOOL fTestCert;DWORD dwRevokedReason;DWORD dwConfidence;DWORD dwError;};
struct _D3DFINDDEVICERESULT {DWORD dwSize;GUID guid;D3DDEVICEDESC ddHwDesc;D3DDEVICEDESC ddSwDesc;};
struct _DIRECTXREGISTERAPPA {DWORD dwSize;DWORD dwFlags;LPSTR lpszApplicationName;LPGUID lpGUID;LPSTR lpszFilename;LPSTR lpszCommandLine;LPSTR lpszPath;LPSTR lpszCurrentDirectory;};
struct _LSA_TRANSLATED_NAME {SID_NAME_USE Use;LSA_UNICODE_STRING Name;LONG DomainIndex;};
struct _OBJECT_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG ulObjType;ULONG cbParentID;LPENTRYID lpParentID;ULONG cbOldID;LPENTRYID lpOldID;ULONG cbOldParentID;LPENTRYID lpOldParentID;LPSPropTagArray lpPropTagArray;};
struct _REPARSE_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;_REPARSE_DATA_BUFFER___5E4005DCE6D6682388C24B209063EC45 __anonymous0;};
struct _RemoteServiceStatus {RPC_SC sc;RPC_SZ szShortName;RPC_SZ szDisplayName;RPC_SZ szVersion;RPC_SERVICE_STATUS ss;struct _RemoteServiceStatus *prssNext;};
struct _SCommentRestriction {ULONG cValues;LPSRestriction lpRes;LPSPropValue lpProp;};
struct _SECURITY_ATTRIBUTES {DWORD nLength;LPVOID lpSecurityDescriptor;BOOL bInheritHandle;};
struct _SOCKET_ADDRESS_LIST {INT iAddressCount;SOCKET_ADDRESS Address[1];};
struct _tagHIT_LOGGING_INFO {DWORD dwStructSize;LPSTR lpszLoggedUrlName;SYSTEMTIME StartTime;SYSTEMTIME EndTime;LPSTR lpszExtendedInfo;};
struct _tagREADCONTROLSPACE {USHORT Processor;ULONG Address;ULONG BufLen;UCHAR Buf[1];};
struct linereqmediacall_tag {HWND hWnd;WPARAM wRequestID;char szDeviceClass[40];unsigned char ucDeviceID[40];DWORD dwSize;DWORD dwSecure;char szDestAddress[80];char szAppName[40];char szCalledParty[40];char szComment[80];};
struct tMIXERCONTROLDETAILS {DWORD cbStruct;DWORD dwControlID;DWORD cChannels;tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F __anonymous0;DWORD cbDetails;LPVOID paDetails;};
struct tagAM_MPEGSTREAMTYPE {DWORD dwStreamId;DWORD dwReserved;AM_MEDIA_TYPE mt;BYTE bFormat[1];};
struct tagCOMPAREITEMSTRUCT {UINT CtlType;UINT CtlID;HWND hwndItem;UINT itemID1;DWORD itemData1;UINT itemID2;DWORD itemData2;DWORD dwLocaleId;};
typedef BOOL ( *AMGETERRORTEXTPROCA)(HRESULT, char *, DWORD);
typedef BOOL ( *CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef void (*D3DRMUPDATECALLBACK)(LPDIRECT3DRMDEVICE obj, LPVOID arg, int, LPD3DRECT);
typedef BOOL ( *DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef LONG (*EDITWORDBREAKPROCEX)(char *pchText, LONG cchText, BYTE bCharSet, INT action);
struct ICommandPrepareVtbl {HRESULT ( *QueryInterface)(ICommandPrepare *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandPrepare *This);ULONG ( *Release)(ICommandPrepare *This);HRESULT ( *Prepare)(ICommandPrepare *This, ULONG cExpectedRuns);HRESULT ( *Unprepare)(ICommandPrepare *This);};
struct IMediaEventSinkVtbl {HRESULT ( *QueryInterface)(IMediaEventSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaEventSink *This);ULONG ( *Release)(IMediaEventSink *This);HRESULT ( *Notify)(IMediaEventSink *This, int EventCode, int EventParam1, int EventParam2);};
struct IObjectIdentityVtbl {HRESULT ( *QueryInterface)(IObjectIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectIdentity *This);ULONG ( *Release)(IObjectIdentity *This);HRESULT ( *IsEqualObject)(IObjectIdentity *This, IUnknown *punk);};
struct IObjectWithSiteVtbl {HRESULT ( *QueryInterface)(IObjectWithSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectWithSite *This);ULONG ( *Release)(IObjectWithSite *This);HRESULT ( *SetSite)(IObjectWithSite *This, IUnknown *pUnkSite);HRESULT ( *GetSite)(IObjectWithSite *This,  IID * riid, void **ppvSite);};
struct IProvideMonikerVtbl {HRESULT ( *QueryInterface)(IProvideMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideMoniker *This);ULONG ( *Release)(IProvideMoniker *This);HRESULT ( *GetMoniker)(IProvideMoniker *This, IMoniker **ppIMoniker);};
struct IRowsetWatchAllVtbl {HRESULT ( *QueryInterface)(IRowsetWatchAll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchAll *This);ULONG ( *Release)(IRowsetWatchAll *This);HRESULT ( *Acknowledge)(IRowsetWatchAll *This);HRESULT ( *Start)(IRowsetWatchAll *This);HRESULT ( *StopWatching)(IRowsetWatchAll *This);};
struct IRpcProxyBufferVtbl {HRESULT ( *QueryInterface)(IRpcProxyBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcProxyBuffer *This);ULONG ( *Release)(IRpcProxyBuffer *This);HRESULT ( *Connect)(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer);void ( *Disconnect)(IRpcProxyBuffer *This);};
struct IWEExtendWizardVtbl {HRESULT ( *QueryInterface)(IWEExtendWizard *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWEExtendWizard *This);ULONG ( *Release)(IWEExtendWizard *This);HRESULT ( *CreateWizardPages)(IWEExtendWizard *This, IUnknown *piData, IWCWizardCallback *piCallback);};
struct IXAObtainRMInfoVtbl {HRESULT ( *QueryInterface)(IXAObtainRMInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXAObtainRMInfo *This);ULONG ( *Release)(IXAObtainRMInfo *This);HRESULT ( *ObtainRMInfo)(IXAObtainRMInfo *This, IRMHelper *pIRMHelper);};
typedef int ( *LPWSPRECVDISCONNECT)(SOCKET s, LPWSABUF lpInboundDisconnectData, LPINT lpErrno);
typedef int ( *LPWSPSENDDISCONNECT)(SOCKET s, LPWSABUF lpOutboundDisconnectData, LPINT lpErrno);
typedef DWORD ( *PSET_INTERFACE_INFO)(ULONG InterfaceIndex, PVOID InterfaceInfo);
typedef SECURITY_STATUS ( *VERIFY_SIGNATURE_FN)(PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int *);
struct _ACCESS_ALLOWED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _IMAGE_NT_HEADERS64 {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER64 OptionalHeader;};
struct _LSA_TRANSLATED_SID {SID_NAME_USE Use;ULONG RelativeId;LONG DomainIndex;};
struct _RAS_AUTH_ATTRIBUTE {RAS_AUTH_ATTRIBUTE_TYPE raaType;DWORD dwLength;PVOID Value;};
struct _SERVICE_ASYNC_INFO {LPSERVICE_CALLBACK_PROC lpServiceCallbackProc;LPARAM lParam;HANDLE hAsyncTaskHandle;};
struct _avitcdlindex_entry {DWORD dwTick;TIMECODE time;DWORD dwSMPTEflags;DWORD dwUser;TCHAR szReelId[12];};
struct adpcmwaveformat_tag {WAVEFORMATEX wfx;WORD wSamplesPerBlock;WORD wNumCoef;ADPCMCOEFSET aCoef[];};
struct ads_searchpref_info {ADS_SEARCHPREF dwSearchPref;ADSVALUE vValue;ADS_STATUS dwStatus;};
struct mpeg1waveformat_tag {WAVEFORMATEX wfx;WORD fwHeadLayer;DWORD dwHeadBitrate;WORD fwHeadMode;WORD fwHeadModeExt;WORD wHeadEmphasis;WORD fwHeadFlags;DWORD dwPTSLow;DWORD dwPTSHigh;};
struct tagBITMAPINFOHEADER {DWORD biSize;LONG biWidth;LONG biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;LONG biXPelsPerMeter;LONG biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagEMRCREATEPALETTE {EMR emr;DWORD ihPal;LOGPALETTE lgpl;};
struct tagEMRSETICMPROFILE {EMR emr;DWORD dwFlags;DWORD cbName;DWORD cbData;BYTE Data[1];};
struct tagNMDATETIMECHANGE {NMHDR nmhdr;DWORD dwFlags;SYSTEMTIME st;};
struct tagNMREBARCHILDSIZE {NMHDR hdr;UINT uBand;UINT wID;RECT rcChild;RECT rcBand;};
struct tagOLEUIPASTEENTRYA {FORMATETC fmtetc;LPCSTR lpstrFormatName;LPCSTR lpstrResultText;DWORD dwFlags;DWORD dwScratchSpace;};
struct tagTIMESTAMP_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;SQLUINTEGER fraction;};
typedef LRESULT ( *CAPSTATUSCALLBACKA)(HWND hWnd, int nID, LPCSTR lpsz);
struct CLUSTERVERSIONINFO {DWORD dwVersionInfoSize;WORD MajorVersion;WORD MinorVersion;WORD BuildNumber;WCHAR szVendorId[64];WCHAR szCSDVersion[64];};
typedef SECURITY_STATUS ( *DECRYPT_MESSAGE_FN)(PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int *);
typedef DWORD ( *EDITSTREAMCALLBACK)(DWORD dwCookie, LPBYTE pbBuff, LONG cb, LONG *pcb);
typedef SECURITY_STATUS ( *ENCRYPT_MESSAGE_FN)(PCtxtHandle, unsigned int, PSecBufferDesc, unsigned int);
struct IADsAggregateeVtbl {HRESULT ( *QueryInterface)(IADsAggregatee *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsAggregatee *This);ULONG ( *Release)(IADsAggregatee *This);HRESULT ( *ConnectAsAggregatee)(IADsAggregatee *This, IUnknown *pOuterUnknown);HRESULT ( *DisconnectAsAggregatee)(IADsAggregatee *This);HRESULT ( *RelinquishInterface)(IADsAggregatee *This,  IID * riid);HRESULT ( *RestoreInterface)(IADsAggregatee *This,  IID * riid);};
struct IADsAggregatorVtbl {HRESULT ( *QueryInterface)(IADsAggregator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsAggregator *This);ULONG ( *Release)(IADsAggregator *This);HRESULT ( *ConnectAsAggregator)(IADsAggregator *This, IUnknown *pAggregatee);HRESULT ( *DisconnectAsAggregator)(IADsAggregator *This);};
struct ICSSFilterSiteVtbl {HRESULT ( *QueryInterface)(ICSSFilterSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICSSFilterSite *This);ULONG ( *Release)(ICSSFilterSite *This);HRESULT ( *GetElement)(ICSSFilterSite *This, IHTMLElement **ppElem);HRESULT ( *FireOnFilterChangeEvent)(ICSSFilterSite *This);};
struct IDtcLuRecoveryVtbl {HRESULT ( *QueryInterface)(IDtcLuRecovery *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecovery *This);ULONG ( *Release)(IDtcLuRecovery *This);};
struct IGetDataSourceVtbl {HRESULT ( *QueryInterface)(IGetDataSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetDataSource *This);ULONG ( *Release)(IGetDataSource *This);HRESULT ( *GetDataSource)(IGetDataSource *This,  IID * riid, IUnknown **ppDataSource);};
typedef int (*INSTALLUI_HANDLERA)(LPVOID pvContext, UINT iMessageType, LPCSTR szMessage);
struct IStreamBuilderVtbl {HRESULT ( *QueryInterface)(IStreamBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStreamBuilder *This);ULONG ( *Release)(IStreamBuilder *This);HRESULT ( *Render)(IStreamBuilder *This, IPin *ppinOut, IGraphBuilder *pGraph);HRESULT ( *Backout)(IStreamBuilder *This, IPin *ppinOut, IGraphBuilder *pGraph);};
struct IXATransLookupVtbl {HRESULT ( *QueryInterface)(IXATransLookup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXATransLookup *This);ULONG ( *Release)(IXATransLookup *This);HRESULT ( *Lookup)(IXATransLookup *This, ITransaction **ppTransaction);};
typedef int ( *LPWSCENUMPROTOCOLS)(LPINT lpiProtocols, LPWSAPROTOCOL_INFOW lpProtocolBuffer, LPDWORD lpdwBufferLength, LPINT lpErrno);
typedef SCODE  MAPIALLOCATEBUFFER(ULONG cbSize, LPVOID *lppBuffer);
typedef UINT ( *PFNGETPROFILEPATHA)(LPCSTR pszUsername, LPSTR pszBuffer, UINT cbBuffer);
typedef DWORD ( *PGET_EVENT_MESSAGE)(ROUTING_PROTOCOL_EVENTS *Event, MESSAGE *Result);
typedef DWORD ( *PHOSTSEC_HOST_PING)(PVOID, PDWORD);
typedef BOOL ( *PHOSTSEC_NEGOTIATE)(DWORD, PDWORD);
typedef void ( *PWINDBG_GET_SYMBOL)(PVOID offset, PUCHAR pchBuffer, PULONG pDisplacement);
struct SIP_INDIRECT_DATA_ {CRYPT_ATTRIBUTE_TYPE_VALUE Data;CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;CRYPT_HASH_BLOB Digest;};
typedef BOOL ( *VDMSETDBGFLAGSPROC)(HANDLE, DWORD);
struct _ACCESS_DENIED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _AM_PROPERTY_SPHLI {USHORT HLISS;USHORT Reserved;ULONG StartPTM;ULONG EndPTM;USHORT StartX;USHORT StartY;USHORT StopX;USHORT StopY;AM_COLCON ColCon;};
struct _CONNECTDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEA lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CONNECTDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEW lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _DDVIDEOPORTSTATUS {DWORD dwSize;BOOL bInUse;DWORD dwFlags;DWORD dwReserved1;DDVIDEOPORTCONNECT VideoPortType;DWORD dwReserved2;DWORD dwReserved3;};
struct _EXPLICIT_ACCESS_A {DWORD grfAccessPermissions;ACCESS_MODE grfAccessMode;DWORD grfInheritance;TRUSTEE_A Trustee;};
struct _EXPLICIT_ACCESS_W {DWORD grfAccessPermissions;ACCESS_MODE grfAccessMode;DWORD grfInheritance;TRUSTEE_W Trustee;};
struct _INTERNET_BUFFERSA {DWORD dwStructSize;struct _INTERNET_BUFFERSA *Next;LPCSTR lpcszHeader;DWORD dwHeadersLength;DWORD dwHeadersTotal;LPVOID lpvBuffer;DWORD dwBufferLength;DWORD dwBufferTotal;DWORD dwOffsetLow;DWORD dwOffsetHigh;};
struct _PRINTER_DEFAULTSA {LPSTR pDatatype;LPDEVMODEA pDevMode;ACCESS_MASK DesiredAccess;};
struct _SUPPORT_FUNCTIONS {DWORD ( *DemandDialRequest)(DWORD ProtocolId, DWORD InterfaceIndex);DWORD ( *MIBEntryCreate)(DWORD dwRoutingPid, DWORD dwEntrySize, LPVOID lpEntry);DWORD ( *MIBEntryDelete)(DWORD dwRoutingPid, DWORD dwEntrySize, LPVOID lpEntry);DWORD ( *MIBEntrySet)(DWORD dwRoutingPid, DWORD dwEntrySize, LPVOID lpEntry);DWORD ( *MIBEntryGet)(DWORD dwRoutingPid, DWORD dwInEntrySize, LPVOID lpInEntry, LPDWORD lpOutEntrySize, LPVOID lpOutEntry);DWORD ( *MIBEntryGetFirst)(DWORD dwRoutingPid, DWORD dwInEntrySize, LPVOID lpInEntry, LPDWORD lpOutEntrySize, LPVOID lpOutEntry);DWORD ( *MIBEntryGetNext)(DWORD dwRoutingPid, DWORD dwInEntrySize, LPVOID lpInEntry, LPDWORD lpOutEntrySize, LPVOID lpOutEntry);};
struct _TAPE_SET_POSITION {DWORD Method;DWORD Partition;LARGE_INTEGER Offset;BOOLEAN Immediate;};
typedef BOOL (*pfnIsFileSupported)(HANDLE hFile, GUID *pgSubject);
struct tACMFILTERDETAILSW {DWORD cbStruct;DWORD dwFilterIndex;DWORD dwFilterTag;DWORD fdwSupport;LPWAVEFILTER pwfltr;DWORD cbwfltr;WCHAR szFilter[128];};
struct tACMFORMATDETAILSW {DWORD cbStruct;DWORD dwFormatIndex;DWORD dwFormatTag;DWORD fdwSupport;LPWAVEFORMATEX pwfx;DWORD cbwfx;WCHAR szFormat[128];};
struct tagAnalogVideoInfo {RECT rcSource;RECT rcTarget;DWORD dwActiveWidth;DWORD dwActiveHeight;REFERENCE_TIME AvgTimePerFrame;};
struct tagCOMBOBOXEXITEMA {UINT mask;int iItem;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int iOverlay;int iIndent;LPARAM lParam;};
struct tagCOMPOSITIONFORM {DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagEMREXTCREATEPEN {EMR emr;DWORD ihPen;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;EXTLOGPEN elp;};
struct tagFMS_HELPSTRINGA {INT idCommand;HMENU hMenu;CHAR szHelp[128];};
struct tagFMS_HELPSTRINGW {INT idCommand;HMENU hMenu;WCHAR szHelp[128];};
struct tagMCI_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;};
struct tagNMTBGETINFOTIPA {NMHDR hdr;LPSTR pszText;int cchTextMax;int iItem;LPARAM lParam;};
struct tagPROCESSENTRY32W {DWORD dwSize;DWORD cntUsage;DWORD th32ProcessID;DWORD th32DefaultHeapID;DWORD th32ModuleID;DWORD cntThreads;DWORD th32ParentProcessID;LONG pcPriClassBase;DWORD dwFlags;WCHAR szExeFile[260];};
struct tagTIMECODE_SAMPLE {LONGLONG qwTick;TIMECODE timecode;DWORD dwUser;DWORD dwFlags;};
struct tagWINDOWPLACEMENT {UINT length;UINT flags;UINT showCmd;POINT ptMinPosition;POINT ptMaxPosition;RECT rcNormalPosition;};
typedef HRESULT ( *ADDDELBACKUPENTRY)(LPCSTR lpcszFileList, LPCSTR lpcszBackupDir, LPCSTR lpcszBaseName, DWORD dwFlags);
typedef LRESULT ( *CAPERRORCALLBACKA)(HWND hWnd, int nID, LPCSTR lpsz);
typedef void (*D3DRMLOADCALLBACK)(LPDIRECT3DRMOBJECT object,  IID * objectguid, LPVOID arg);
struct DIPROPGUIDANDPATH {DIPROPHEADER diph;GUID guidClass;WCHAR wszPath[260];};
struct IAsyncManagerVtbl {HRESULT ( *QueryInterface)(IAsyncManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncManager *This);ULONG ( *Release)(IAsyncManager *This);HRESULT ( *CompleteCall)(IAsyncManager *This, HRESULT Result);HRESULT ( *GetCallContext)(IAsyncManager *This,  IID * riid, void **pInterface);HRESULT ( *GetState)(IAsyncManager *This, ULONG *pulStateFlags);};
struct IDBInitializeVtbl {HRESULT ( *QueryInterface)(IDBInitialize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBInitialize *This);ULONG ( *Release)(IDBInitialize *This);HRESULT ( *Initialize)(IDBInitialize *This);HRESULT ( *Uninitialize)(IDBInitialize *This);};
struct IEnumTerminalVtbl {HRESULT ( *QueryInterface)(IEnumTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumTerminal *This);ULONG ( *Release)(IEnumTerminal *This);HRESULT ( *Next)(IEnumTerminal *This, ULONG celt, ITTerminal **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumTerminal *This);HRESULT ( *Skip)(IEnumTerminal *This, ULONG celt);HRESULT ( *Clone)(IEnumTerminal *This, IEnumTerminal **ppEnum);};
struct IGetDispenserVtbl {HRESULT ( *QueryInterface)(IGetDispenser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetDispenser *This);ULONG ( *Release)(IGetDispenser *This);HRESULT ( *GetDispenser)(IGetDispenser *This,  IID * iid, void **ppvObject);};
struct IParentRowsetVtbl {HRESULT ( *QueryInterface)(IParentRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParentRowset *This);ULONG ( *Release)(IParentRowset *This);HRESULT ( *GetChildRowset)(IParentRowset *This, IUnknown *pUnkOuter, ULONG iOrdinal,  IID * riid, IUnknown **ppRowset);};
struct IRemoteObjectVtbl {HRESULT ( *QueryInterface)(IRemoteObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteObject *This);ULONG ( *Release)(IRemoteObject *This);HRESULT ( *GetType)(IRemoteObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteObject *This);HRESULT ( *ClearBreakpoint)(IRemoteObject *This);};
typedef SECURITY_STATUS ( *MAKE_SIGNATURE_FN)(PCtxtHandle, unsigned int, PSecBufferDesc, unsigned int);
typedef HRESULT  MAPIADMINPROFILES(ULONG ulFlags, LPPROFADMIN *lppProfAdmin);
typedef HRESULT ( *PFN_WPPLISTSITESA)(LPDWORD pdwSitesBufLen, LPWPSITEINFOA pSitesBuffer, LPDWORD pdwNumSites);
typedef HRESULT ( *PFN_WPPLISTSITESW)(LPDWORD pdwSitesBufLen, LPWPSITEINFOW pSitesBuffer, LPDWORD pdwNumSites);
typedef LONG ( *TUISPIDLLCALLBACK)(DWORD dwObjectID, DWORD dwObjectType, LPVOID lpParams, DWORD dwSize);
typedef BOOL ( *VDMGETCONTEXTPROC)(HANDLE, HANDLE, LPVDMCONTEXT);
typedef BOOL ( *VDMSETCONTEXTPROC)(HANDLE, HANDLE, LPVDMCONTEXT);
struct _CERT_POLICY_INFO {LPSTR pszPolicyIdentifier;DWORD cPolicyQualifier;CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;};
struct _EVENTSFORLOGFILE {DWORD ulSize;WCHAR szLogicalLogFile[256];DWORD ulNumRecords;EVENTLOGRECORD pEventLogRecords[];};
struct _EXCEPTION_RECORD {DWORD ExceptionCode;DWORD ExceptionFlags;struct _EXCEPTION_RECORD *ExceptionRecord;PVOID ExceptionAddress;DWORD NumberParameters;UINT_PTR ExceptionInformation[15];};
struct _IMAGE_DEBUG_MISC {DWORD DataType;DWORD Length;BOOLEAN Unicode;BYTE Reserved[3];BYTE Data[1];};
struct _IMAGE_NT_HEADERS {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER32 OptionalHeader;};
struct _IMAGE_RELOCATION {_IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED __anonymous0;DWORD SymbolTableIndex;WORD Type;};
struct _IMAGE_VXD_HEADER {WORD e32_magic;BYTE e32_border;BYTE e32_worder;DWORD e32_level;WORD e32_cpu;WORD e32_os;DWORD e32_ver;DWORD e32_mflags;DWORD e32_mpages;DWORD e32_startobj;DWORD e32_eip;DWORD e32_stackobj;DWORD e32_esp;DWORD e32_pagesize;DWORD e32_lastpagesize;DWORD e32_fixupsize;DWORD e32_fixupsum;DWORD e32_ldrsize;DWORD e32_ldrsum;DWORD e32_objtab;DWORD e32_objcnt;DWORD e32_objmap;DWORD e32_itermap;DWORD e32_rsrctab;DWORD e32_rsrccnt;DWORD e32_restab;DWORD e32_enttab;DWORD e32_dirtab;DWORD e32_dircnt;DWORD e32_fpagetab;DWORD e32_frectab;DWORD e32_impmod;DWORD e32_impmodcnt;DWORD e32_impproc;DWORD e32_pagesum;DWORD e32_datapage;DWORD e32_preload;DWORD e32_nrestab;DWORD e32_cbnrestab;DWORD e32_nressum;DWORD e32_autodata;DWORD e32_debuginfo;DWORD e32_debuglen;DWORD e32_instpreload;DWORD e32_instdemand;DWORD e32_heapsize;BYTE e32_res3[12];DWORD e32_winresoff;DWORD e32_winreslen;WORD e32_devid;WORD e32_ddkver;};
struct _OSVERSIONINFOEXA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wReserved[2];};
struct _OSVERSIONINFOEXW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wReserved[2];};
struct _PROV_ENUMALGS_EX {ALG_ID aiAlgid;DWORD dwDefaultLen;DWORD dwMinLen;DWORD dwMaxLen;DWORD dwProtocols;DWORD dwNameLen;CHAR szName[20];DWORD dwLongNameLen;CHAR szLongName[40];};
struct _SECURITY_MESSAGE {DWORD dwMsgId;HPORT hPort;DWORD dwError;CHAR UserName[257];CHAR Domain[16];};
struct _SENDCMDOUTPARAMS {DWORD cBufferSize;DRIVERSTATUS DriverStatus;BYTE bBuffer[1];};
struct _SYSTEM_ALARM_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _SYSTEM_AUDIT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _WIN32_FIND_DATAA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;CHAR cFileName[260];CHAR cAlternateFileName[14];};
struct _WIN32_FIND_DATAW {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;WCHAR cFileName[260];WCHAR cAlternateFileName[14];};
struct tagDVTARGETDEVICE {DWORD tdSize;WORD tdDriverNameOffset;WORD tdDeviceNameOffset;WORD tdPortNameOffset;WORD tdExtDevmodeOffset;BYTE tdData[1];};
struct tagMPEG1VIDEOINFO {VIDEOINFOHEADER hdr;DWORD dwStartTimeCode;DWORD cbSequenceHeader;BYTE bSequenceHeader[1];};
struct tagPROCESSENTRY32 {DWORD dwSize;DWORD cntUsage;DWORD th32ProcessID;DWORD th32DefaultHeapID;DWORD th32ModuleID;DWORD cntThreads;DWORD th32ParentProcessID;LONG pcPriClassBase;DWORD dwFlags;CHAR szExeFile[260];};
struct tagRASCONNSTATUSA {DWORD dwSize;enum tagRASCONNSTATE rasconnstate;DWORD dwError;CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szPhoneNumber[129];};
struct tagRASCONNSTATUSW {DWORD dwSize;enum tagRASCONNSTATE rasconnstate;DWORD dwError;WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szPhoneNumber[129];};
typedef LRESULT ( *CAPVIDEOCALLBACK)(HWND hWnd, LPVIDEOHDR lpVHdr);
typedef INT (*DBERRHANDLE_PROC)(PDBPROCESS, INT, INT, INT, LPCSTR, LPCSTR);
struct IAMovieSetupVtbl {HRESULT ( *QueryInterface)(IAMovieSetup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMovieSetup *This);ULONG ( *Release)(IAMovieSetup *This);HRESULT ( *Register)(IAMovieSetup *This);HRESULT ( *Unregister)(IAMovieSetup *This);};
struct IEnumAddressVtbl {HRESULT ( *QueryInterface)(IEnumAddress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumAddress *This);ULONG ( *Release)(IEnumAddress *This);HRESULT ( *Next)(IEnumAddress *This, ULONG celt, ITAddress **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumAddress *This);HRESULT ( *Skip)(IEnumAddress *This, ULONG celt);HRESULT ( *Clone)(IEnumAddress *This, IEnumAddress **ppEnum);};
struct IEnumChannelVtbl {HRESULT ( *QueryInterface)(IEnumChannel *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumChannel *This);ULONG ( *Release)(IEnumChannel *This);HRESULT ( *Next)(IEnumChannel *This, ULONG celt, ITChannel **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumChannel *This);HRESULT ( *Skip)(IEnumChannel *This, ULONG celt);HRESULT ( *Clone)(IEnumChannel *This, IEnumChannel **ppEnum);};
struct IEnumFiltersVtbl {HRESULT ( *QueryInterface)(IEnumFilters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumFilters *This);ULONG ( *Release)(IEnumFilters *This);HRESULT ( *Next)(IEnumFilters *This, ULONG cFilters, IBaseFilter **ppFilter, ULONG *pcFetched);HRESULT ( *Skip)(IEnumFilters *This, ULONG cFilters);HRESULT ( *Reset)(IEnumFilters *This);HRESULT ( *Clone)(IEnumFilters *This, IEnumFilters **ppEnum);};
struct IEnumMonikerVtbl {HRESULT ( *QueryInterface)(IEnumMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMoniker *This);ULONG ( *Release)(IEnumMoniker *This);HRESULT ( *Next)(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumMoniker *This, ULONG celt);HRESULT ( *Reset)(IEnumMoniker *This);HRESULT ( *Clone)(IEnumMoniker *This, IEnumMoniker **ppenum);};
struct IEnumUnknownVtbl {HRESULT ( *QueryInterface)(IEnumUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumUnknown *This);ULONG ( *Release)(IEnumUnknown *This);HRESULT ( *Next)(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumUnknown *This, ULONG celt);HRESULT ( *Reset)(IEnumUnknown *This);HRESULT ( *Clone)(IEnumUnknown *This, IEnumUnknown **ppenum);};
struct ITypeFactoryVtbl {HRESULT ( *QueryInterface)(ITypeFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeFactory *This);ULONG ( *Release)(ITypeFactory *This);HRESULT ( *CreateFromTypeInfo)(ITypeFactory *This, ITypeInfo *pTypeInfo,  IID * riid, IUnknown **ppv);};
typedef int ( *LPWSPASYNCSELECT)(SOCKET s, HWND hWnd, unsigned int wMsg, int lEvent, LPINT lpErrno);
typedef int ( *LPWSPEVENTSELECT)(SOCKET s, WSAEVENT hEventObject, int lNetworkEvents, LPINT lpErrno);
typedef SCODE  MAPIALLOCATEMORE(ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
typedef BOOL (*PFN_CPD_ADD_CERT)(struct _CRYPT_PROVIDER_DATA *pProvData, DWORD idxSigner, BOOL fCounterSigner, DWORD idxCounterSigner, PCCERT_CONTEXT pCert2Add);
typedef DWORD ( *PGET_GLOBAL_INFO)(PVOID GlobalInfo, PULONG GlobalInfoSize);
typedef void (*PNTSD_GET_SYMBOL)(LPVOID offset, PUCHAR pchBuffer, LPDWORD pDisplacement);
typedef BOOL ( *PWLX_SET_TIMEOUT)(HANDLE hWlx, DWORD Timeout);
struct VolLockBroadcast {struct _DEV_BROADCAST_HDR vlb_dbh;DWORD vlb_owner;BYTE vlb_perms;BYTE vlb_lockType;BYTE vlb_drive;BYTE vlb_flags;};
struct _CRYPT_ATTRIBUTE {LPSTR pszObjId;DWORD cValue;PCRYPT_ATTR_BLOB rgValue;};
struct _DDVIDEOPORTINFO {DWORD dwSize;DWORD dwOriginX;DWORD dwOriginY;DWORD dwVPFlags;RECT rCrop;DWORD dwPrescaleWidth;DWORD dwPrescaleHeight;LPDDPIXELFORMAT lpddpfInputFormat;LPDDPIXELFORMAT lpddpfVBIInputFormat;LPDDPIXELFORMAT lpddpfVBIOutputFormat;DWORD dwVBIHeight;DWORD dwReserved1;DWORD dwReserved2;};
struct _IMAGEHLP_MODULE {DWORD SizeOfStruct;DWORD BaseOfImage;DWORD ImageSize;DWORD TimeDateStamp;DWORD CheckSum;DWORD NumSyms;SYM_TYPE SymType;CHAR ModuleName[32];CHAR ImageName[256];CHAR LoadedImageName[256];};
struct _IPX_NETNUM_DATA {UCHAR netnum[4];USHORT hopcount;USHORT netdelay;INT cardnum;UCHAR router[6];};
struct _LLC_XMIT_BUFFER {PLLC_XMIT_BUFFER pNext;USHORT usReserved1;USHORT cbBuffer;USHORT usReserved2;USHORT cbUserData;UCHAR auchData[];};
struct _SENDCMDINPARAMS {DWORD cBufferSize;IDEREGS irDriveRegs;BYTE bDriveNumber;BYTE bReserved[3];DWORD dwReserved[4];BYTE bBuffer[1];};
struct _SERVER_INFO_598 {DWORD sv598_maxrawworkitems;DWORD sv598_maxthreadsperqueue;DWORD sv598_producttype;DWORD sv598_serversize;DWORD sv598_connectionlessautodisc;DWORD sv598_sharingviolationretries;DWORD sv598_sharingviolationdelay;DWORD sv598_maxglobalopensearch;DWORD sv598_removeduplicatesearches;DWORD sv598_lockviolationoffset;DWORD sv598_lockviolationdelay;DWORD sv598_mdlreadswitchover;DWORD sv598_cachedopenlimit;DWORD sv598_otherqueueaffinity;BOOL sv598_restrictnullsessaccess;BOOL sv598_enablewfw311directipx;DWORD sv598_queuesamplesecs;DWORD sv598_balancecount;DWORD sv598_preferredaffinity;DWORD sv598_maxfreerfcbs;DWORD sv598_maxfreemfcbs;DWORD sv598_maxfreelfcbs;DWORD sv598_maxfreepagedpoolchunks;DWORD sv598_minpagedpoolchunksize;DWORD sv598_maxpagedpoolchunksize;BOOL sv598_sendsfrompreferredprocessor;DWORD sv598_cacheddirectorylimit;DWORD sv598_maxcopylength;BOOL sv598_enablebulktransfer;BOOL sv598_enablecompression;BOOL sv598_autosharewks;BOOL sv598_autoshareserver;BOOL sv598_enablesecuritysignature;BOOL sv598_requiresecuritysignature;DWORD sv598_minclientbuffersize;GUID sv598_serverguid;DWORD sv598_ConnectionNoSessionsTimeout;};
struct _TAPE_STATISTICS {DWORD Version;DWORD Flags;LARGE_INTEGER RecoveredWrites;LARGE_INTEGER UnrecoveredWrites;LARGE_INTEGER RecoveredReads;LARGE_INTEGER UnrecoveredReads;BYTE CompressionRatioReads;BYTE CompressionRatioWrites;};
struct _TRUSTEE_ACCESSA {LPSTR lpProperty;ACCESS_RIGHTS Access;ULONG fAccessFlags;ULONG fReturnedAccess;};
struct _TT_HITTESTINFOA {HWND hwnd;POINT pt;TTTOOLINFOA ti;};
struct _TT_HITTESTINFOW {HWND hwnd;POINT pt;TTTOOLINFOW ti;};
struct _VTableProvStruc {DWORD Version;FARPROC FuncVerifyImage;FARPROC FuncReturnhWnd;DWORD dwProvType;BYTE *pbContextInfo;DWORD cbContextInfo;};
struct _WIN32_STREAM_ID {DWORD dwStreamId;DWORD dwStreamAttributes;LARGE_INTEGER Size;DWORD dwStreamNameSize;WCHAR cStreamName[1];};
struct _WIN_CERTIFICATE {DWORD dwLength;WORD wRevision;WORD wCertificateType;BYTE bCertificate[1];};
struct _WSANSClassInfoA {LPSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagPROTOCOLDATA {DWORD grfFlags;DWORD dwState;LPVOID pData;ULONG cbData;};
struct linecallinfo_tag {DWORD dwTotalSize;DWORD dwNeededSize;DWORD dwUsedSize;HLINE hLine;DWORD dwLineDeviceID;DWORD dwAddressID;DWORD dwBearerMode;DWORD dwRate;DWORD dwMediaMode;DWORD dwAppSpecific;DWORD dwCallID;DWORD dwRelatedCallID;DWORD dwCallParamFlags;DWORD dwCallStates;DWORD dwMonitorDigitModes;DWORD dwMonitorMediaModes;LINEDIALPARAMS DialParams;DWORD dwOrigin;DWORD dwReason;DWORD dwCompletionID;DWORD dwNumOwners;DWORD dwNumMonitors;DWORD dwCountryCode;DWORD dwTrunk;DWORD dwCallerIDFlags;DWORD dwCallerIDSize;DWORD dwCallerIDOffset;DWORD dwCallerIDNameSize;DWORD dwCallerIDNameOffset;DWORD dwCalledIDFlags;DWORD dwCalledIDSize;DWORD dwCalledIDOffset;DWORD dwCalledIDNameSize;DWORD dwCalledIDNameOffset;DWORD dwConnectedIDFlags;DWORD dwConnectedIDSize;DWORD dwConnectedIDOffset;DWORD dwConnectedIDNameSize;DWORD dwConnectedIDNameOffset;DWORD dwRedirectionIDFlags;DWORD dwRedirectionIDSize;DWORD dwRedirectionIDOffset;DWORD dwRedirectionIDNameSize;DWORD dwRedirectionIDNameOffset;DWORD dwRedirectingIDFlags;DWORD dwRedirectingIDSize;DWORD dwRedirectingIDOffset;DWORD dwRedirectingIDNameSize;DWORD dwRedirectingIDNameOffset;DWORD dwAppNameSize;DWORD dwAppNameOffset;DWORD dwDisplayableAddressSize;DWORD dwDisplayableAddressOffset;DWORD dwCalledPartySize;DWORD dwCalledPartyOffset;DWORD dwCommentSize;DWORD dwCommentOffset;DWORD dwDisplaySize;DWORD dwDisplayOffset;DWORD dwUserUserInfoSize;DWORD dwUserUserInfoOffset;DWORD dwHighLevelCompSize;DWORD dwHighLevelCompOffset;DWORD dwLowLevelCompSize;DWORD dwLowLevelCompOffset;DWORD dwChargingInfoSize;DWORD dwChargingInfoOffset;DWORD dwTerminalModesSize;DWORD dwTerminalModesOffset;DWORD dwDevSpecificSize;DWORD dwDevSpecificOffset;DWORD dwCallTreatment;DWORD dwCallDataSize;DWORD dwCallDataOffset;DWORD dwSendingFlowspecSize;DWORD dwSendingFlowspecOffset;DWORD dwReceivingFlowspecSize;DWORD dwReceivingFlowspecOffset;};
struct tagCANDIDATEFORM {DWORD dwIndex;DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagCapDriverCaps {UINT wDeviceIndex;BOOL fHasOverlay;BOOL fHasDlgVideoSource;BOOL fHasDlgVideoFormat;BOOL fHasDlgVideoDisplay;BOOL fCaptureInitialized;BOOL fDriverSuppliesPalettes;HANDLE hVideoIn;HANDLE hVideoOut;HANDLE hVideoExtIn;HANDLE hVideoExtOut;};
struct tagDBFAILUREINFO {HROW hRow;ULONG iColumn;HRESULT failure;};
struct tagDBPROPINFOSET {PDBPROPINFO rgPropertyInfos;ULONG cPropertyInfos;GUID guidPropertySet;};
struct tagDEBUGHOOKINFO {DWORD idThread;DWORD idThreadInstaller;LPARAM lParam;WPARAM wParam;int code;};
struct tagEMRGDICOMMENT {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagGUITHREADINFO {DWORD cbSize;DWORD flags;HWND hwndActive;HWND hwndFocus;HWND hwndCapture;HWND hwndMenuOwner;HWND hwndMoveSize;HWND hwndCaret;RECT rcCaret;};
struct tagHIGHCONTRASTA {UINT cbSize;DWORD dwFlags;LPSTR lpszDefaultScheme;};
struct tagMODULEENTRY32 {DWORD dwSize;DWORD th32ModuleID;DWORD th32ProcessID;DWORD GlblcntUsage;DWORD ProccntUsage;BYTE *modBaseAddr;DWORD modBaseSize;HMODULE hModule;char szModule[256];char szExePath[260];};
struct tagPENDATAHEADER {UINT wVersion;UINT cbSizeUsed;UINT cStrokes;UINT cPnt;UINT cPntStrokeMax;RECT rectBound;UINT wPndts;int nInkWidth;DWORD rgbInk;};
struct tagPROFILEHEADER {DWORD phSize;DWORD phCMMType;DWORD phVersion;DWORD phClass;DWORD phDataColorSpace;DWORD phConnectionSpace;DWORD phDateTime[3];DWORD phSignature;DWORD phPlatform;DWORD phProfileFlags;DWORD phManufacturer;DWORD phModel;DWORD phAttributes[2];DWORD phRenderingIntent;CIEXYZ phIlluminant;DWORD phCreator;BYTE phReserved[44];};
struct tagRASMONITORDLG {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;DWORD dwStartPage;LONG xDlg;LONG yDlg;DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagTVHITTESTINFO {POINT pt;UINT flags;HTREEITEM hItem;};
typedef BOOL  ACCELERATEABSDI(ULONG ulUIParam, LPVOID lpvmsg);
typedef BOOL ( *ACMDRIVERENUMCB)(HACMDRIVERID hadid, DWORD dwInstance, DWORD fdwSupport);
typedef LRESULT ( *CAPWAVECALLBACK)(HWND hWnd, LPWAVEHDR lpWHdr);
struct IRowsetKeysVtbl {HRESULT ( *QueryInterface)(IRowsetKeys *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetKeys *This);ULONG ( *Release)(IRowsetKeys *This);HRESULT ( *ListKeys)(IRowsetKeys *This, ULONG *pcColumns, ULONG **prgColumns);};
struct IViewRowsetVtbl {HRESULT ( *QueryInterface)(IViewRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewRowset *This);ULONG ( *Release)(IViewRowset *This);HRESULT ( *GetSpecification)(IViewRowset *This,  IID * riid, IUnknown **ppObject);HRESULT ( *OpenViewRowset)(IViewRowset *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppRowset);};
typedef BOOL ( *LPWPUCLOSEEVENT)(WSAEVENT hEvent, LPINT lpErrno);
typedef BOOL ( *LPWPURESETEVENT)(WSAEVENT hEvent, LPINT lpErrno);
typedef DWORD ( *PBIND_INTERFACE)(ULONG InterfaceIndex, PVOID BindingInfo);
typedef HRESULT (*PCONVDLLENTRYFN)(DWORD, PCONVDLLVECT *);
typedef BOOL ( *PROCESSENUMPROC)(DWORD dwProcessId, DWORD dwAttributes, LPARAM lpUserDefined);
struct _ADAPTER_STATUS {UCHAR adapter_address[6];UCHAR rev_major;UCHAR reserved0;UCHAR adapter_type;UCHAR rev_minor;WORD duration;WORD frmr_recv;WORD frmr_xmit;WORD iframe_recv_err;WORD xmit_aborts;DWORD xmit_success;DWORD recv_success;WORD iframe_xmit_err;WORD recv_buff_unavail;WORD t1_timeouts;WORD ti_timeouts;DWORD reserved1;WORD free_ncbs;WORD max_cfg_ncbs;WORD max_ncbs;WORD xmit_buf_unavail;WORD max_dgram_size;WORD pending_sess;WORD max_cfg_sess;WORD max_sess;WORD max_sess_pkt_size;WORD name_count;};
struct _AVISTREAMINFOA {DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwCaps;WORD wPriority;WORD wLanguage;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwInitialFrames;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;DWORD dwEditCount;DWORD dwFormatChangeCount;char szName[64];};
struct _CERT_EXTENSION {LPSTR pszObjId;BOOL fCritical;CRYPT_OBJID_BLOB Value;};
struct _CRL_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;CRYPT_BIT_BLOB ReasonFlags;CERT_ALT_NAME_INFO CRLIssuer;};
struct _DISCDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPSTR lpLocalName;LPSTR lpRemoteName;DWORD dwFlags;};
struct _DISK_HISTOGRAM {LARGE_INTEGER DiskSize;LARGE_INTEGER Start;LARGE_INTEGER End;LARGE_INTEGER Average;LARGE_INTEGER AverageRead;LARGE_INTEGER AverageWrite;DWORD Granularity;DWORD Size;DWORD ReadCount;DWORD WriteCount;PHISTOGRAM_BUCKET Histogram;};
struct _FLOWDESCRIPTOR {FLOWSPEC FlowSpec;ULONG NumFilters;LPRSVP_FILTERSPEC FilterList;};
struct _FLT_PACKET_LOG {ULONG SrcIfIdx;ULONG DstIfIdx;USHORT DataSize;USHORT SeqNum;UCHAR Header[30];};
struct _PROTOCOL_INFOA {DWORD dwServiceFlags;INT iAddressFamily;INT iMaxSockAddr;INT iMinSockAddr;INT iSocketType;INT iProtocol;DWORD dwMessageSize;LPSTR lpProtocol;};
struct _PUBLICKEYSTRUC {BYTE bType;BYTE bVersion;WORD reserved;ALG_ID aiKeyAlg;};
struct _ZONEATTRIBUTES {ULONG cbSize;WCHAR szDisplayName[260];WCHAR szDescription[200];WCHAR szIconPath[260];DWORD dwTemplateMinLevel;DWORD dwTemplateRecommended;DWORD dwTemplateCurrentLevel;DWORD dwFlags;};
struct tagCOMBOBOXINFO {DWORD cbSize;RECT rcItem;RECT rcButton;DWORD stateButton;HWND hwndCombo;HWND hwndItem;HWND hwndList;};
struct tagCTLINITBEDIT {DWORD cbSize;HWND hwnd;int id;WORD wSizeCategory;WORD wFlags;DWORD dwReserved;};
struct tagCapInfoChunk {FOURCC fccInfoID;LPVOID lpData;LONG cbData;};
struct tagCaptureParms {DWORD dwRequestMicroSecPerFrame;BOOL fMakeUserHitOKToCapture;UINT wPercentDropForError;BOOL fYield;DWORD dwIndexSize;UINT wChunkGranularity;BOOL fUsingDOSMemory;UINT wNumVideoRequested;BOOL fCaptureAudio;UINT wNumAudioRequested;UINT vKeyAbort;BOOL fAbortLeftMouse;BOOL fAbortRightMouse;BOOL fLimitEnabled;UINT wTimeLimit;BOOL fMCIControl;BOOL fStepMCIDevice;DWORD dwMCIStartTime;DWORD dwMCIStopTime;BOOL fStepCaptureAt2x;UINT wStepCaptureAverageFrames;DWORD dwAudioBufferSize;BOOL fDisableWriteCache;UINT AVStreamMaster;};
struct tagDRAGLISTINFO {UINT uNotification;HWND hWnd;POINT ptCursor;};
struct tagEMRCREATEPEN {EMR emr;DWORD ihPen;LOGPEN lopn;};
struct tagEMRGLSRECORD {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagEMRROUNDRECT {EMR emr;RECTL rclBox;SIZEL szlCorner;};
struct tagEMRSETPIXELV {EMR emr;POINTL ptlPixel;COLORREF crColor;};
struct tagMONERRSTRUCT {UINT cb;UINT wLastError;DWORD dwTime;HANDLE hTask;};
struct tagNMRBAUTOSIZE {NMHDR hdr;BOOL fChanged;RECT rcTarget;RECT rcActual;};
struct tagQUERYCONTEXT {DWORD dwContext;CSPLATFORM Platform;LCID Locale;DWORD dwVersionHi;DWORD dwVersionLo;};
struct tagSOUNDSENTRYA {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
typedef SCODE  ALLOCATEBUFFER(ULONG cbSize, LPVOID *lppBuffer);
typedef DWORD ( *DEBUGEVENTPROC)(LPDEBUG_EVENT, LPVOID);
typedef BOOL ( *GRAYSTRINGPROC)(HDC, LPARAM, int);
struct IAMTVAudioVtbl {HRESULT ( *QueryInterface)(IAMTVAudio *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTVAudio *This);ULONG ( *Release)(IAMTVAudio *This);HRESULT ( *GetHardwareSupportedTVAudioModes)(IAMTVAudio *This, int *plModes);HRESULT ( *GetAvailableTVAudioModes)(IAMTVAudio *This, int *plModes);HRESULT ( *get_TVAudioMode)(IAMTVAudio *This, int *plMode);HRESULT ( *put_TVAudioMode)(IAMTVAudio *This, int lMode);HRESULT ( *RegisterNotificationCallBack)(IAMTVAudio *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IAMTVAudio *This, IAMTunerNotification *pNotify);};
struct ICustomDocVtbl {HRESULT ( *QueryInterface)(ICustomDoc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICustomDoc *This);ULONG ( *Release)(ICustomDoc *This);HRESULT ( *SetUIHandler)(ICustomDoc *This, IDocHostUIHandler *pUIHandler);};
typedef ULONG ( *PWINDBG_DISASM)(PULONG lpOffset, PCSTR lpBuffer, ULONG fShowEffectiveAddress);
struct _CERT_RDN_ATTR {LPSTR pszObjId;DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _CONFFILEINFOA {DWORD dwSize;DWORD dwFileId;DWORD dwReserved1;DWORD dwFileSize;DWORD dwReserved2;DWORD dwBytesTransferred;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;CHAR szFileNameSrc[260];CHAR szFileNameDest[260];};
struct _CONFFILEINFOW {DWORD dwSize;DWORD dwFileId;DWORD dwReserved1;DWORD dwFileSize;DWORD dwReserved2;DWORD dwBytesTransferred;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;WCHAR szFileNameSrc[260];WCHAR szFileNameDest[260];};
struct _D3DPICKRECORD {BYTE bOpcode;BYTE bPad;DWORD dwOffset;D3DVALUE dvZ;};
struct _D3DRMPICKDESC {ULONG ulFaceIdx;LONG lGroupIdx;D3DVECTOR vPosition;};
struct _DISK_GEOMETRY {LARGE_INTEGER Cylinders;MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;};
struct _IPX_INTERFACE {ULONG InterfaceIndex;ULONG AdminState;ULONG AdapterIndex;UCHAR InterfaceName[48];ULONG InterfaceType;ULONG MediaType;UCHAR NetNumber[4];UCHAR MacAddress[6];ULONG Delay;ULONG Throughput;ULONG NetbiosAccept;ULONG NetbiosDeliver;ULONG EnableIpxWanNegotiation;IPX_IF_STATS IfStats;};
struct _OBJDESCRIPTOR {DWORD objType;SMSBUFF szName;SMSBUFF szFriendlyName;BOOL bGotFriendlyName;DWORD dwRelopMin;DWORD dwRelopMax;BOOL bGotRelops;};
struct _PROV_ENUMALGS {ALG_ID aiAlgid;DWORD dwBitLen;DWORD dwNameLen;CHAR szName[20];};
struct _RIP_INTERFACE {ULONG InterfaceIndex;RIP_IF_INFO RipIfInfo;RIP_IF_STATS RipIfStats;};
struct _SAP_INTERFACE {ULONG InterfaceIndex;SAP_IF_INFO SapIfInfo;SAP_IF_STATS SapIfStats;};
struct _encorrecttext {NMHDR nmhdr;CHARRANGE chrg;WORD seltyp;};
struct _enoleopfailed {NMHDR nmhdr;LONG iob;LONG lOper;HRESULT hr;};
struct _tagOLECMDTEXT {DWORD cmdtextf;ULONG cwActual;ULONG cwBuf;unsigned short rgwz[1];};
struct tagANIMATEINFO {DWORD cbSize;UINT uSpeedPct;UINT uPeriodCB;UINT fuFlags;LPARAM lParam;DWORD dwReserved;};
struct tagBOXEDITINFO {int cxBox;int cyBox;int cxBase;int cyBase;int cyMid;BOXLAYOUT boxlayout;UINT wFlags;BYTE szFaceName[32];UINT wFontHeight;UINT rgwReserved[8];};
struct tagCONVCONTEXT {UINT cb;UINT wFlags;UINT wCountryID;int iCodePage;DWORD dwLangID;DWORD dwSecurity;SECURITY_QUALITY_OF_SERVICE qos;};
struct tagDBPROPIDSET {DBPROPID *rgPropertyIDs;ULONG cPropertyIDs;GUID guidPropertySet;};
struct tagDBTIMESTAMP {SHORT year;USHORT month;USHORT day;USHORT hour;USHORT minute;USHORT second;ULONG fraction;};
struct tagRASADPARAMS {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;};
struct tagSERIALKEYSA {UINT cbSize;DWORD dwFlags;LPSTR lpszActivePort;LPSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
struct tagTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
typedef void  CALLERRELEASE(ULONG ulCallerData, LPTABLEDATA lpTblData, LPMAPITABLE lpVue);
struct DIEFFECTINFOA {DWORD dwSize;GUID guid;DWORD dwEffType;DWORD dwStaticParams;DWORD dwDynamicParams;CHAR tszName[260];};
struct DIEFFECTINFOW {DWORD dwSize;GUID guid;DWORD dwEffType;DWORD dwStaticParams;DWORD dwDynamicParams;WCHAR tszName[260];};
struct IContinueVtbl {HRESULT ( *QueryInterface)(IContinue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinue *This);ULONG ( *Release)(IContinue *This);HRESULT ( *FContinue)(IContinue *This);};
struct IEnumCallVtbl {HRESULT ( *QueryInterface)(IEnumCall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCall *This);ULONG ( *Release)(IEnumCall *This);HRESULT ( *Next)(IEnumCall *This, ULONG celt, ITCallInfo **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumCall *This);HRESULT ( *Skip)(IEnumCall *This, ULONG celt);HRESULT ( *Clone)(IEnumCall *This, IEnumCall **ppEnum);};
struct IEnumPinsVtbl {HRESULT ( *QueryInterface)(IEnumPins *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPins *This);ULONG ( *Release)(IEnumPins *This);HRESULT ( *Next)(IEnumPins *This, ULONG cPins, IPin **ppPins, ULONG *pcFetched);HRESULT ( *Skip)(IEnumPins *This, ULONG cPins);HRESULT ( *Reset)(IEnumPins *This);HRESULT ( *Clone)(IEnumPins *This, IEnumPins **ppEnum);};
struct IInternetVtbl {HRESULT ( *QueryInterface)(IInternet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternet *This);ULONG ( *Release)(IInternet *This);};
typedef BOOL ( *LPWPUSETEVENT)(WSAEVENT hEvent, LPINT lpErrno);
typedef BOOL ( *NAMEENUMPROCA)(LPSTR, LPARAM);
typedef int  NOTIFCALLBACK(LPVOID lpvContext, ULONG cNotification, LPNOTIFICATION lpNotifications);
typedef DWORD  PM_QUERY_PROC(LPDWORD, LPVOID *, LPDWORD, LPDWORD);
typedef void ( *RASPBDLGFUNCA)(DWORD, DWORD, LPSTR, LPVOID);
struct _D3DLIGHTDATA {DWORD dwSize;LPD3DLIGHTINGELEMENT lpIn;DWORD dwInSize;LPD3DTLVERTEX lpOut;DWORD dwOutSize;};
struct _DISK_LOGGING {BYTE Function;PVOID BufferAddress;DWORD BufferSize;};
struct _DS3DLISTENER {DWORD dwSize;D3DVECTOR vPosition;D3DVECTOR vVelocity;D3DVECTOR vOrientFront;D3DVECTOR vOrientTop;D3DVALUE flDistanceFactor;D3DVALUE flRolloffFactor;D3DVALUE flDopplerFactor;};
struct _QUOTA_LIMITS {SIZE_T PagedPoolLimit;SIZE_T NonPagedPoolLimit;DWORD MinimumWorkingSetSize;DWORD MaximumWorkingSetSize;SIZE_T PagefileLimit;LARGE_INTEGER TimeLimit;};
struct _SEGMENT_NOTE {WORD Selector1;WORD Selector2;WORD Segment;CHAR Module[10];CHAR FileName[256];WORD Type;DWORD Length;};
struct _TEMP_BP_NOTE {WORD Seg;DWORD Offset;BOOL bPM;};
struct tagBIND_OPTS2 {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;DWORD dwTrackFlags;DWORD dwClassContext;LCID locale;COSERVERINFO *pServerInfo;};
struct tagBOXRESULTS {UINT indxBox;HINKSET hinksetBox;SYV rgSyv[1];};
struct tagCURSORINFO {DWORD cbSize;DWORD flags;HCURSOR hCursor;POINT ptScreenPos;};
struct tagDISPPARAMS {VARIANTARG *rgvarg;DISPID *rgdispidNamedArgs;UINT cArgs;UINT cNamedArgs;};
struct tagDROPSTRUCT {HWND hwndSource;HWND hwndSink;DWORD wFmt;DWORD dwData;POINT ptDrop;DWORD dwControlData;};
struct tagExtentInfo {ULONG cb;DWORD dwExtentMode;SIZEL sizelProposed;};
struct tagKAGGETDIAG {ULONG ulSize;VARIANTARG vDiagInfo;SHORT sDiagField;};
struct tagKAGREQDIAG {ULONG ulDiagFlags;VARTYPE vt;SHORT sDiagField;};
struct tagNMDAYSTATE {NMHDR nmhdr;SYSTEMTIME stStart;int cDayState;LPMONTHDAYSTATE prgDayState;};
struct tagNMTOOLBARA {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPSTR pszText;};
struct tagRASDIALDLG {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;DWORD dwSubEntry;DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagRASPPPNBFA {DWORD dwSize;DWORD dwError;DWORD dwNetBiosError;CHAR szNetBiosError[17];CHAR szWorkstationName[17];BYTE bLana;};
struct tagRASPPPNBFW {DWORD dwSize;DWORD dwError;DWORD dwNetBiosError;WCHAR szNetBiosError[17];WCHAR szWorkstationName[17];BYTE bLana;};
typedef SCODE  ALLOCATEMORE(ULONG cbSize, LPVOID lpObject, LPVOID *lppBuffer);
struct CPPEH_RECORD {DWORD old_esp;EXCEPTION_POINTERS *exc_ptr;EXCEPTION_RECORD *prev_er;int ( *handler)(int code);_msEH *msEH_ptr;DWORD disabled;};
struct IServiceVtbl {HRESULT ( *QueryInterface)(IService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IService *This);ULONG ( *Release)(IService *This);HRESULT ( *InvokeService)(IService *This, IUnknown *pUnkInner);};
struct IUnknownVtbl {HRESULT ( *QueryInterface)(IUnknown *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUnknown *This);ULONG ( *Release)(IUnknown *This);};
typedef BOOL ( *LPFNCCSTYLEA)(HWND hwndParent, LPCCSTYLEA pccs);
typedef BOOL ( *LPFNCCSTYLEW)(HWND hwndParent, LPCCSTYLEW pccs);
typedef INT ( *LPNSPSTARTUP)(LPGUID lpProviderId, LPNSP_ROUTINE lpnspRoutines);
typedef DWORD QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);
struct _D3DRMVERTEX {D3DVECTOR position;D3DVECTOR normal;D3DVALUE tu;D3DVALUE tv;D3DCOLOR color;};
struct _FILEPATHS_A {PCSTR Target;PCSTR Source;UINT Win32Error;DWORD Flags;};
struct _FOLDER_INFO {BASETYPE tObjectity;char *pszTag;DWORD dwTag;DWORD ctFolders;DWORD *pFolderTags;DWORD ctFilters;DWORD *pFilterTags;DWORD ctScalars;SCALAR_INFO *pScalars;void *pNewFunc;};
union _IPX_MIB_ROW {IPX_INTERFACE Interface;IPX_ROUTE Route;IPX_SERVICE Service;};
struct _JOB_INFO_1A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pDatatype;LPSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _OFNOTIFYEXA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPVOID psf;LPVOID pidl;};
struct _OFNOTIFYEXW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPVOID psf;LPVOID pidl;};
struct _RPCBINDINFO {handle_t h;WCHAR wszServer[16];RPC_IF_HANDLE hClientIfHandle;};
struct _SHFILEINFOA {HICON hIcon;int iIcon;DWORD dwAttributes;CHAR szDisplayName[260];CHAR szTypeName[80];};
struct _SHFILEINFOW {HICON hIcon;int iIcon;DWORD dwAttributes;WCHAR szDisplayName[260];WCHAR szTypeName[80];};
struct _VDM_SEGINFO {WORD Selector;WORD SegNumber;DWORD Length;WORD Type;CHAR ModuleName[9];CHAR FileName[255];};
struct _avioldindex {FOURCC fcc;DWORD cb;struct _avioldindex___avioldindex_entry aIndex[];};
struct _dir_entryid {BYTE abFlags[4];MAPIUID muid;ULONG ulVersion;ULONG ulType;};
struct _formatrange {HDC hdc;HDC hdcTarget;RECT rc;RECT rcPage;CHARRANGE chrg;};
struct _tagPHYSICAL {LARGE_INTEGER Address;ULONG BufLen;UCHAR Buf[1];};
struct _wfinddata_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;_fsize_t size;unsigned short name[260];};
struct ldapcontrolA {PCHAR ldctl_oid;struct berval ldctl_value;BOOLEAN ldctl_iscritical;};
struct sockaddr_in6 {short sin6_family;u_short sin6_port;u_long sin6_flowinfo;struct in_addr6 sin6_addr;};
struct tagARRAYDESC {TYPEDESC tdescElem;USHORT cDims;SAFEARRAYBOUND rgbounds[1];};
struct tagDBPROPSET {DBPROP *rgProperties;ULONG cProperties;GUID guidPropertySet;};
struct tagIMESTRUCT {UINT fnc;WPARAM wParam;UINT wCount;UINT dchSource;UINT dchDest;LPARAM lParam1;LPARAM lParam2;LPARAM lParam3;};
struct tagINPPARAMS {DWORD cbSize;DWORD dwFlags;HPENDATA hpndt;TARGET target;};
struct tagLVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagPOLYTEXTA {int x;int y;UINT n;LPCSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
struct tagRASENTRYA {DWORD dwSize;DWORD dwfOptions;DWORD dwCountryID;DWORD dwCountryCode;CHAR szAreaCode[11];CHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;struct RASIPADDR ipaddr;struct RASIPADDR ipaddrDns;struct RASIPADDR ipaddrDnsAlt;struct RASIPADDR ipaddrWins;struct RASIPADDR ipaddrWinsAlt;DWORD dwFrameSize;DWORD dwfNetProtocols;DWORD dwFramingProtocol;CHAR szScript[260];CHAR szAutodialDll[260];CHAR szAutodialFunc[260];CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szX25PadType[33];CHAR szX25Address[201];CHAR szX25Facilities[201];CHAR szX25UserData[201];DWORD dwChannels;DWORD dwReserved1;DWORD dwReserved2;DWORD dwSubEntries;DWORD dwDialMode;DWORD dwDialExtraPercent;DWORD dwDialExtraSampleSeconds;DWORD dwHangUpExtraPercent;DWORD dwHangUpExtraSampleSeconds;DWORD dwIdleDisconnectSeconds;CHAR szPortName[129];};
struct tagRASENTRYW {DWORD dwSize;DWORD dwfOptions;DWORD dwCountryID;DWORD dwCountryCode;WCHAR szAreaCode[11];WCHAR szLocalPhoneNumber[129];DWORD dwAlternateOffset;struct RASIPADDR ipaddr;struct RASIPADDR ipaddrDns;struct RASIPADDR ipaddrDnsAlt;struct RASIPADDR ipaddrWins;struct RASIPADDR ipaddrWinsAlt;DWORD dwFrameSize;DWORD dwfNetProtocols;DWORD dwFramingProtocol;WCHAR szScript[260];WCHAR szAutodialDll[260];WCHAR szAutodialFunc[260];WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szX25PadType[33];WCHAR szX25Address[201];WCHAR szX25Facilities[201];WCHAR szX25UserData[201];DWORD dwChannels;DWORD dwReserved1;DWORD dwReserved2;DWORD dwSubEntries;DWORD dwDialMode;DWORD dwDialExtraPercent;DWORD dwDialExtraSampleSeconds;DWORD dwHangUpExtraPercent;DWORD dwHangUpExtraSampleSeconds;DWORD dwIdleDisconnectSeconds;WCHAR szPortName[129];};
struct tagTCKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
struct tagTVKEYDOWN {NMHDR hdr;WORD wVKey;UINT flags;};
typedef LONG ( *APPLET_PROC)(HWND hwndCpl, UINT msg, LONG lParam1, LONG lParam2);
typedef int ( *BFFCALLBACK)(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);
struct DIJOYSTATE2 {LONG lX;LONG lY;LONG lZ;LONG lRx;LONG lRy;LONG lRz;LONG rglSlider[2];DWORD rgdwPOV[4];BYTE rgbButtons[128];LONG lVX;LONG lVY;LONG lVZ;LONG lVRx;LONG lVRy;LONG lVRz;LONG rglVSlider[2];LONG lAX;LONG lAY;LONG lAZ;LONG lARx;LONG lARy;LONG lARz;LONG rglASlider[2];LONG lFX;LONG lFY;LONG lFZ;LONG lFRx;LONG lFRy;LONG lFRz;LONG rglFSlider[2];};
typedef void  DRVCALLBACK(HDRVR hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct IMallocVtbl {HRESULT ( *QueryInterface)(IMalloc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMalloc *This);ULONG ( *Release)(IMalloc *This);void *( *Alloc)(IMalloc *This, ULONG cb);void *( *Realloc)(IMalloc *This, void *pv, ULONG cb);void ( *Free)(IMalloc *This, void *pv);ULONG ( *GetSize)(IMalloc *This, void *pv);int ( *DidAlloc)(IMalloc *This, void *pv);void ( *HeapMinimize)(IMalloc *This);};
typedef DWORD ( *PMIB_CREATE)(ULONG InputDataSize, PVOID InputData);
typedef DWORD ( *PMIB_DELETE)(ULONG InputDataSize, PVOID InputData);
typedef void ( *RASDIALFUNC)(UINT, enum tagRASCONNSTATE, DWORD);
typedef BOOL ( *WNDENUMPROC)(HWND, LPARAM);
struct _AsyncIOReq {DWORD engine[4];BYTE *lpv;DWORD cb;DWORD dwError;DWORD cbDone;LARGE_INTEGER liPos;DWORD hEvent;DWORD dwUser;};
struct _CERT_CHAIN {DWORD cCerts;PCERT_BLOB certs;CRYPT_KEY_PROV_INFO keyLocatorInfo;};
struct _RAS_PORT_0 {WCHAR wszPortName[16];WCHAR wszDeviceType[16];WCHAR wszDeviceName[128];WCHAR wszMediaName[16];DWORD reserved;DWORD Flags;WCHAR wszUserName[257];WCHAR wszComputer[16];DWORD dwStartSessionTime;WCHAR wszLogonDomain[16];BOOL fAdvancedServer;};
struct _tagADDRESS {DWORD Offset;WORD Segment;ADDRESS_MODE Mode;};
struct _usr_permid {BYTE abFlags[4];MAPIUID muid;ULONG ulVersion;ULONG ulType;char szAddr[];};
struct sockaddr_vv {u_short sa_family;u_short wFlags;DWORD dwDeviceId;u_char uuidProtocol[16];};
struct tagDBBYGUID {BYTE *pbInfo;ULONG cbInfo;GUID guid;};
struct tagEVENTMSG {UINT message;UINT paramL;UINT paramH;DWORD time;HWND hwnd;};
struct tagJOYCAPSA {WORD wMid;WORD wPid;CHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;CHAR szRegKey[32];CHAR szOEMVxD[260];};
struct tagJOYCAPSW {WORD wMid;WORD wPid;WCHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;WCHAR szRegKey[32];WCHAR szOEMVxD[260];};
struct tagLOGBRUSH {UINT lbStyle;COLORREF lbColor;LONG lbHatch;};
struct tagLOGFONTA {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;CHAR lfFaceName[32];};
struct tagLOGFONTW {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;WCHAR lfFaceName[32];};
struct tagMENUINFO {DWORD cbSize;DWORD fMask;DWORD dwStyle;UINT cyMax;HBRUSH hbrBack;DWORD dwContextHelpID;DWORD dwMenuData;};
struct tagRASCONNA {DWORD dwSize;HRASCONN hrasconn;CHAR szEntryName[257];CHAR szDeviceType[17];CHAR szDeviceName[129];CHAR szPhonebook[260];DWORD dwSubEntry;};
struct tagRASCONNW {DWORD dwSize;HRASCONN hrasconn;WCHAR szEntryName[257];WCHAR szDeviceType[17];WCHAR szDeviceName[129];WCHAR szPhonebook[260];DWORD dwSubEntry;};
struct DIJOYSTATE {LONG lX;LONG lY;LONG lZ;LONG lRx;LONG lRy;LONG lRz;LONG rglSlider[2];DWORD rgdwPOV[4];BYTE rgbButtons[32];};
typedef ULONG  MAPILOGOFF(LHANDLE lhSession, ULONG ulUIParam, FLAGS flFlags, ULONG ulReserved);
typedef BOOL ( *RASADFUNCA)(LPSTR, LPSTR, struct tagRASADPARAMS *, LPDWORD);
struct _CONFGUIDA {DWORD dwSize;GUID guid;LPCSTR pszApplication;LPCSTR pszCommandLine;LPCSTR pszDirectory;};
struct _CONFINFOA {DWORD dwSize;HCONF hConf;DWORD dwMediaType;DWORD dwState;DWORD cUsers;DWORD dwGCCID;CHAR szConferenceName[128];};
struct _CONFINFOW {DWORD dwSize;HCONF hConf;DWORD dwMediaType;DWORD dwState;DWORD cUsers;DWORD dwGCCID;WCHAR szConferenceName[128];};
struct _CTL_ENTRY {CRYPT_DATA_BLOB SubjectIdentifier;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _D3DVECTOR {_D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 __anonymous0;_D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA __anonymous3;_D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 __anonymous6;};
struct _DROPFILES {DWORD pFiles;POINT pt;BOOL fNC;BOOL fWide;};
struct _HMAC_Info {ALG_ID HashAlgid;BYTE *pbInnerString;DWORD cbInnerString;BYTE *pbOuterString;DWORD cbOuterString;};
struct _IPX_ROUTE {ULONG InterfaceIndex;ULONG Protocol;UCHAR Network[4];USHORT TickCount;USHORT HopCount;UCHAR NextHopMacAddress[6];ULONG Flags;};
struct _OFNOTIFYA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPSTR pszFile;};
struct _PROXYINFO {RPC_BOOL fContinueOnError;RPC_BOOL fIgnoreOldSecondaries;RPC_SZ wszDN;RPC_SZ wszNickName;RPC_SZ wszCommonName;RPC_SZ wszDisplayName;RPC_SZ wszSurName;RPC_SZ wszGivenName;RPC_SZ wszInitials;RPC_SZ wszTargetAddress;PROXYNODE *pPNVerifyProxy;PROXYNODE *pPNExcludeProxy;};
struct _cpinfoexW {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;WCHAR CodePageName[260];};
struct _selchange {NMHDR nmhdr;CHARRANGE chrg;WORD seltyp;};
struct tagEMRTEXT {POINTL ptlReference;DWORD nChars;DWORD offString;DWORD fOptions;RECTL rcl;DWORD offDx;};
struct tagLVITEMA {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;};
struct tagNMMOUSE {NMHDR hdr;DWORD dwItemSpec;DWORD dwItemData;POINT pt;DWORD dwHitInfo;};
struct tagPAGESET {ULONG cbStruct;BOOL fOddPages;BOOL fEvenPages;ULONG cPageRange;PAGERANGE rgPages[1];};
struct tagPCMINFO {DWORD cbSize;DWORD dwPcm;RECT rectBound;RECT rectExclude;HRGN hrgnBound;HRGN hrgnExclude;DWORD dwTimeout;};
struct tagPENINFO {UINT cxRawWidth;UINT cyRawHeight;UINT wDistinctWidth;UINT wDistinctHeight;int nSamplingRate;int nSamplingDist;LONG lPdc;int cPens;int cbOemData;OEMPENINFO rgoempeninfo[6];UINT rgwReserved[7];UINT fuOEM;};
struct tagRASAMBA {DWORD dwSize;DWORD dwError;CHAR szNetBiosError[17];BYTE bLana;};
struct tagRASAMBW {DWORD dwSize;DWORD dwError;WCHAR szNetBiosError[17];BYTE bLana;};
struct tagSTRKFMT {DWORD cbSize;UINT iesf;UINT iStrk;PENTIP tip;DWORD dwUser;DWORD dwReserved;};
struct IP_HEADER {BYTE x;BYTE tos;WORD length;WORD identifier;WORD fragment;BYTE ttl;BYTE protocol;WORD cksum;DWORD src;DWORD dest;};
typedef void ( *LINEEVENT)(HTAPILINE htLine, HTAPICALL htCall, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3);
typedef void ( *TIMERPROC)(HWND, UINT, UINT, DWORD);
typedef UINT ( *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);
struct _COMMPROP {WORD wPacketLength;WORD wPacketVersion;DWORD dwServiceMask;DWORD dwReserved1;DWORD dwMaxTxQueue;DWORD dwMaxRxQueue;DWORD dwMaxBaud;DWORD dwProvSubType;DWORD dwProvCapabilities;DWORD dwSettableParams;DWORD dwSettableBaud;WORD wSettableData;WORD wSettableStopParity;DWORD dwCurrentTxQueue;DWORD dwCurrentRxQueue;DWORD dwProvSpec1;DWORD dwProvSpec2;WCHAR wcProvChar[1];};
struct _ICONINFO {BOOL fIcon;DWORD xHotspot;DWORD yHotspot;HBITMAP hbmMask;HBITMAP hbmColor;};
struct _OFSTRUCT {BYTE cBytes;BYTE fFixedDisk;WORD nErrCode;WORD Reserved1;WORD Reserved2;CHAR szPathName[128];};
struct tagBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;LPVOID bmBits;};
struct tagDBCOST {DBRESOURCEKIND eKind;DBCOSTUNIT dwUnits;LONG lValue;};
struct tagEMRARC {EMR emr;RECTL rclBox;POINTL ptlStart;POINTL ptlEnd;};
struct tagLOGPEN {UINT lopnStyle;POINT lopnWidth;COLORREF lopnColor;};
struct tagNMCHAR {NMHDR hdr;UINT ch;DWORD dwItemPrev;DWORD dwItemNext;};
struct tagPENTIP {DWORD cbSize;BYTE btype;BYTE bwidth;BYTE bheight;BYTE bOpacity;COLORREF rgb;DWORD dwFlags;DWORD dwReserved;};
struct tagTARGET {DWORD dwFlags;DWORD idTarget;HTRG htrgTarget;RECTL rectBound;DWORD dwData;RECTL rectBoundInk;RECTL rectBoundLastInk;};
struct BDN_RSVP {DWORD Version;DWORD Size;DWORD ReservationID;FLOWSPEC Flowspec;time_t StartTime;time_t EndTime;};
typedef LRESULT ( *HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef DWORD ( *PMIB_SET)(ULONG InputDataSize, PVOID InputData);
struct _CONTEXT {DWORD ContextFlags;DWORD Dr0;DWORD Dr1;DWORD Dr2;DWORD Dr3;DWORD Dr6;DWORD Dr7;FLOATING_SAVE_AREA FloatSave;DWORD SegGs;DWORD SegFs;DWORD SegEs;DWORD SegDs;DWORD Edi;DWORD Esi;DWORD Ebx;DWORD Edx;DWORD Ecx;DWORD Eax;DWORD Ebp;DWORD Eip;DWORD SegCs;DWORD EFlags;DWORD Esp;DWORD SegSs;BYTE ExtendedRegisters[512];};
struct _actions {ULONG ulVersion;UINT cActions;LPACTION lpAction;};
struct _stati64 {_dev_t st_dev;_ino_t st_ino;unsigned short st_mode;short st_nlink;short st_uid;short st_gid;_dev_t st_rdev;long long st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
struct tecwrkus {USHORT cwlen;USHORT cwtype;UCHAR cwname[21];UCHAR cwremark[26];UCHAR cwstylef[9];USHORT cwvewrtm;USHORT cwalert;USHORT cwchghan;USHORT cwmaxses;USHORT cwnumrec;TECWRKSD cwsesdat[10];USHORT cwmodisf;USHORT cwpad;USHORT cwnumrmp;TECWRKSD cwremap[1];};
struct tediagns {USHORT dilen;USHORT ditype;UCHAR dinetmgt[9];USHORT disrtmco;USHORT disrtmub;USHORT diwruldr;USHORT dirtmth1;USHORT dirtmth2;USHORT dirtmth3;USHORT dirtmth4;TEDALERT dialerts[20];UCHAR diaudit[128];UCHAR dierror[128];USHORT diaudlev;UCHAR dipad[16];};
struct tpstahdr {CHAR akstat;CHAR akqual;INTEGER akmsgkey;union tpstahdr___A6D8E33AC39759CFC20E94B336D7745F XXXXX05;INTEGER aknumb1;INTEGER aknumb2;INTEGER akseqno;};
typedef HRESULT ( *DELNODE)(LPCSTR pszFileOrDirName, DWORD dwFlags);
struct pvalueA {LPSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
struct tpophdr {CHAR openqual;CHAR opentype;CHAR appltype;CHAR opluno;INTEGER opresid;union tpophdr___095F276FF5EBABB63F94067ADE8FD2C4 B01;};
struct _FRAME {DWORD TimeStamp;WORD FrameLength;WORD nBytesAvail;BYTE MacFrame[];};
struct _TOKEN {INT tokenType;char szName[256];char szValue[256];DWORD dwOp;char szArchitecture[256];char szGroupClass[256];char szAttributeName[256];char szTokenString[4608];BOOL bIndent;};
struct _GUID {DWORD Data1;WORD Data2;WORD Data3;BYTE Data4[8];};
struct _DCB {DWORD DCBlength;DWORD BaudRate;unsigned int fBinary : 1;unsigned int fParity : 1;unsigned int fOutxCtsFlow : 1;unsigned int fOutxDsrFlow : 1;unsigned int fDtrControl : 2;unsigned int fDsrSensitivity : 1;unsigned int fTXContinueOnXoff : 1;unsigned int fOutX : 1;unsigned int fInX : 1;unsigned int fErrorChar : 1;unsigned int fNull : 1;unsigned int fRtsControl : 2;unsigned int fAbortOnError : 1;unsigned int fDummy2 : 17;WORD wReserved;WORD XonLim;WORD XoffLim;BYTE ByteSize;BYTE Parity;BYTE StopBits;char XonChar;char XoffChar;char ErrorChar;char EofChar;char EvtChar;WORD wReserved1;};
struct _SID {BYTE Revision;BYTE SubAuthorityCount;SID_IDENTIFIER_AUTHORITY IdentifierAuthority;DWORD SubAuthority[1];};
struct trc {USHORT flags;UCHAR audlvl;USHORT control;USHORT intlvl;USHORT nocat;USHORT apiinit;USHORT asyinit;USHORT errinit;USHORT intinit;USHORT snainit;HANDLE apihand1;HANDLE apihand2;HANDLE audhand;HANDLE errhand;HANDLE inthand1;HANDLE inthand2;HANDLE snahand1;HANDLE snahand2;};
union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D {PBYTE ForwarderString;PDWORD Function;DWORD Ordinal;PIMAGE_IMPORT_BY_NAME AddressOfData;};
union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF {PBYTE ForwarderString;PDWORD Function;ULONGLONG Ordinal;PIMAGE_IMPORT_BY_NAME AddressOfData;};
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 {DWORD Length;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD CheckSum;SHORT Number;BYTE Selection;};
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C {DWORD TagIndex;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 Misc;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 FcnAry;WORD TvIndex;};
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];};
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];};
union tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D {struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___309D668730615BAF74518D141CF67858 bmp;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___02D247D6A486D56C73DBF439481983E7 wmf;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___0715B07ED6754B0F0C1844052E8836F8 icon;struct tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D___425444B63999EAF57D64386882606692 emf;};
struct IDtcLuRecoveryInitiatedByDtcStatusWorkVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryInitiatedByDtcStatusWork *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryInitiatedByDtcStatusWork *This);ULONG ( *Release)(IDtcLuRecoveryInitiatedByDtcStatusWork *This);HRESULT ( *HandleCheckLuStatus)(IDtcLuRecoveryInitiatedByDtcStatusWork *This, LONG lRecoverySeqNum);};
union bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D {struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___3CBDD733A7F82DAE20B81DF65415100F B1B;struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___88C53FC97706F7F4B3328D695F8A1E29 B1D;struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___04482C8E927EEEC92939AAD340FA2F33 B1J;struct bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D___F52E1212EA13844F586727D2C5AAB393 B1L;};
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {DWORD SecurityLimitFlags;HANDLE JobToken;PTOKEN_GROUPS SidsToDisable;PTOKEN_PRIVILEGES PrivilegesToDelete;PTOKEN_GROUPS RestrictedSids;};
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef BOOL ( *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags,  void *pvData);
typedef ULONG ( *PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY)(LARGE_INTEGER address, PVOID buffer, ULONG length, PULONG byteswritten);
typedef BOOL ( *LPDPLENUMLOCALAPPLICATIONSCALLBACK)(LPCDPLAPPINFO lpAppInfo, LPVOID lpContext, DWORD dwFlags);
typedef ULONG ( *PWINDBG_OLDKD_READ_PHYSICAL_MEMORY)(LARGE_INTEGER address, PVOID buffer, ULONG count, PULONG bytesread);
struct _03D431463D1B1B07D135EFD405717ACF {DWORD dwMask;POINTL ptMinSize;POINTL ptMaxSize;POINTL ptIntegral;POINTL ptActual;WCHAR wszTitle[256];DWORD dwModeFlags;COLORREF crBkgnd;};
struct _047A9D6DB9EB3B65E20B29F40C814688 {DWORD dwType;DWORD dwPlayerType;DPID dpId;LPVOID lpLocalData;DWORD dwLocalDataSize;LPVOID lpRemoteData;DWORD dwRemoteDataSize;DPNAME dpnName;DPID dpIdParent;DWORD dwFlags;};
struct _114DC3E6372E97B43E837C0EA892420F {DWORD dwCallback;UINT wDeviceID;LPSTR lpstrDeviceType;LPSTR lpstrElementName;LPSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct _195B5ED187AD0EF03C07D6DC4096CC78 {DWORD dwFlags;LPARAM lParam;LONG ( *Status)(LPARAM lParam, UINT message, LONG l);};
struct _1960CEC5D16E97BD5D34D82AA1F3F495 {HWND hWndParent;UINT iType;UINT iGizmo;UINT uID;UINT dx;UINT dy;LPSTR pszText;HBITMAP hBmp;UINT iImage;UINT uState;};
struct _197B5A7C8A9A186B55DFC6C456EA8A07 {CMC_string attach_title;CMC_object_identifier attach_type;CMC_string attach_filename;CMC_flags attach_flags;CMC_extension *attach_extensions;};
struct _22BDD2D628B0B561C5A9CA42290FE551 {DWORD bV4Size;LONG bV4Width;LONG bV4Height;WORD bV4Planes;WORD bV4BitCount;DWORD bV4V4Compression;DWORD bV4SizeImage;LONG bV4XPelsPerMeter;LONG bV4YPelsPerMeter;DWORD bV4ClrUsed;DWORD bV4ClrImportant;DWORD bV4RedMask;DWORD bV4GreenMask;DWORD bV4BlueMask;DWORD bV4AlphaMask;DWORD bV4CSType;CIEXYZTRIPLE bV4Endpoints;DWORD bV4GammaRed;DWORD bV4GammaGreen;DWORD bV4GammaBlue;};
struct _2B6042393D1A02E0AE9B16B44F784AC7 {DWORD bV5Size;LONG bV5Width;LONG bV5Height;WORD bV5Planes;WORD bV5BitCount;DWORD bV5Compression;DWORD bV5SizeImage;LONG bV5XPelsPerMeter;LONG bV5YPelsPerMeter;DWORD bV5ClrUsed;DWORD bV5ClrImportant;DWORD bV5RedMask;DWORD bV5GreenMask;DWORD bV5BlueMask;DWORD bV5AlphaMask;DWORD bV5CSType;CIEXYZTRIPLE bV5Endpoints;DWORD bV5GammaRed;DWORD bV5GammaGreen;DWORD bV5GammaBlue;DWORD bV5Intent;DWORD bV5ProfileData;DWORD bV5ProfileSize;DWORD bV5Reserved;};
struct _3E0A08AB4DFF2F80B8E74D39D385CA44 {DWORD dwSize;DWORD dwAddress;DWORD dwBlockSize;HANDLE hBlock;WORD wcLock;WORD wcPageLock;WORD wFlags;BOOL wHeapPresent;HANDLE hOwner;WORD wType;WORD wData;DWORD dwNext;DWORD dwNextAlt;};
struct _3E43CC221FCFDCE5A8A514736F12696C {USHORT usStationId;USHORT usUserLength;ULONG ulReceiveFlag;PLLC_BUFFER pFirstBuffer;UCHAR uchOptions;UCHAR auchReserved1[3];UCHAR uchRcvReadOption;};
struct _5DC41656C27EA70C267F54907B5957CB {USHORT usStationId;USHORT usUserStatValue;UCHAR uchT1;UCHAR uchT2;UCHAR uchTi;UCHAR uchMaxOut;UCHAR uchMaxIn;UCHAR uchMaxOutIncr;UCHAR uchMaxRetryCnt;UCHAR uchMaxMembers;USHORT usMaxI_Field;UCHAR uchSapValue;UCHAR uchOptionsPriority;UCHAR uchcStationCount;UCHAR uchReserved2[2];UCHAR cGroupCount;PUCHAR pGroupList;ULONG DlcStatusFlags;UCHAR uchReserved3[8];UCHAR cLinkStationsAvail;};
struct _782F046A0E8041278EBDE36B024DE05B {PLLC_ADAPTER_OPEN_PARMS pAdapterParms;PLLC_EXTENDED_ADAPTER_PARMS pExtendedParms;PLLC_DLC_PARMS pDlcParms;PVOID pReserved1;};
struct _7D8FD30789366CCEA8FE3DB6E0740A33 {DWORD dwType;DWORD dwPlayerType;DPID dpId;DWORD dwCurrentPlayers;LPVOID lpData;DWORD dwDataSize;DPNAME dpnName;DPID dpIdParent;DWORD dwFlags;};
struct _7DB559BE1DE343E17A8A94B6F2E38031 {LONGLONG PresentationStart;LONGLONG Duration;KSPIN_INTERFACE Interface;LONG Rate;ULONG Flags;};
struct _8E3D5C816F45029DFC3A1E2FB5D03F2C {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPSTR lpstrText;};
struct _92AD7B8CF7589C2FF45E6AC6DF63FADA {KSTIME PresentationTime;LONGLONG Duration;ULONG FrameExtent;ULONG DataUsed;PVOID Data;ULONG OptionsFlags;};
struct _98BEB28C79E54824F19FEAA43CA20E4E {DBINT SizeOfStruct;BYTE ServerType;USHORT ServerMajor;USHORT ServerMinor;USHORT ServerRevision;CHAR ServerName[31];CHAR NetLibName[256];CHAR NetLibConnStr[256];};
struct _9CDBCEE1F465C05E6C1B2E3C0329570E {USHORT usStationId;UCHAR uchTransmitFs;UCHAR uchRemoteSap;PLLC_XMIT_BUFFER pXmitQueue1;PLLC_XMIT_BUFFER pXmitQueue2;USHORT cbBuffer1;USHORT cbBuffer2;PVOID pBuffer1;PVOID pBuffer2;UCHAR uchXmitReadOption;};
struct _BC2FB811D417144E831EE3AEA4A279C8 {DWORD dwStructSize;LPSTR lpszScheme;DWORD dwSchemeLength;INTERNET_SCHEME nScheme;LPSTR lpszHostName;DWORD dwHostNameLength;INTERNET_PORT nPort;LPSTR lpszUserName;DWORD dwUserNameLength;LPSTR lpszPassword;DWORD dwPasswordLength;LPSTR lpszUrlPath;DWORD dwUrlPathLength;LPSTR lpszExtraInfo;DWORD dwExtraInfoLength;};
struct _BD5EDE25C0B1E5C449572B377A1B7D7D {CMC_string name;CMC_enum name_type;CMC_string address;CMC_enum role;CMC_flags recip_flags;CMC_extension *recip_extensions;};
struct _F10EAF12E46EBA994735C587F3E497C7 {DWORD cbSize;struct methodblock *javaMethod;LPVOID pComArgs; JAVAARG *ppThis;_F10EAF12E46EBA994735C587F3E497C7___3711B978F6157F59598EFB5D0B22300D __anonymous0;};
struct _FB10B385A80E8C43E2FAF14F8CAB4B13 {FOURCC fccType;FOURCC fccHandler;DWORD dwFlags;WORD wPriority;WORD wLanguage;DWORD dwInitialFrames;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;};
struct ITransactionImportWhereaboutsVtbl {HRESULT ( *QueryInterface)(ITransactionImportWhereabouts *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionImportWhereabouts *This);ULONG ( *Release)(ITransactionImportWhereabouts *This);HRESULT ( *GetWhereaboutsSize)(ITransactionImportWhereabouts *This, ULONG *pcbWhereabouts);HRESULT ( *GetWhereabouts)(ITransactionImportWhereabouts *This, ULONG cbWhereabouts, BYTE *rgbWhereabouts, ULONG *pcbUsed);};
struct IDtcLuRecoveryInitiatedByDtcVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryInitiatedByDtc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryInitiatedByDtc *This);ULONG ( *Release)(IDtcLuRecoveryInitiatedByDtc *This);HRESULT ( *GetWork)(IDtcLuRecoveryInitiatedByDtc *This, DTCINITIATEDRECOVERYWORK *pWork, void **ppv);};
typedef PCCERT_CONTEXT ( *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);
struct IJavaEnumRemoteBooleanValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteBooleanValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteBooleanValue *This);ULONG ( *Release)(IJavaEnumRemoteBooleanValue *This);HRESULT ( *Skip)(IJavaEnumRemoteBooleanValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteBooleanValue *This);HRESULT ( *Clone)(IJavaEnumRemoteBooleanValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteBooleanValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteBooleanValue *This, ULONG celt, JAVA_BOOLEAN  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteBooleanValue *This, JAVA_BOOLEAN *pjb);};
struct OLEDBSimpleProviderListenerVtbl {HRESULT ( *QueryInterface)(OLEDBSimpleProviderListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(OLEDBSimpleProviderListener *This);ULONG ( *Release)(OLEDBSimpleProviderListener *This);HRESULT ( *aboutToChangeCell)(OLEDBSimpleProviderListener *This, int iRow, int iColumn);HRESULT ( *cellChanged)(OLEDBSimpleProviderListener *This, int iRow, int iColumn);HRESULT ( *aboutToDeleteRows)(OLEDBSimpleProviderListener *This, int iRow, int cRows);HRESULT ( *deletedRows)(OLEDBSimpleProviderListener *This, int iRow, int cRows);HRESULT ( *aboutToInsertRows)(OLEDBSimpleProviderListener *This, int iRow, int cRows);HRESULT ( *insertedRows)(OLEDBSimpleProviderListener *This, int iRow, int cRows);HRESULT ( *rowsAvailable)(OLEDBSimpleProviderListener *This, int iRow, int cRows);HRESULT ( *transferComplete)(OLEDBSimpleProviderListener *This, OSPXFER xfer);};
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _USER_MARSHAL_ROUTINE_QUADRUPLE {USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;USER_MARSHAL_FREEING_ROUTINE pfnFree;};
struct IJavaEnumRemoteDoubleValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteDoubleValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteDoubleValue *This);ULONG ( *Release)(IJavaEnumRemoteDoubleValue *This);HRESULT ( *Skip)(IJavaEnumRemoteDoubleValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteDoubleValue *This);HRESULT ( *Clone)(IJavaEnumRemoteDoubleValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteDoubleValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteDoubleValue *This, ULONG celt, JAVA_DOUBLE  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteDoubleValue *This, JAVA_DOUBLE *pjdbl);};
typedef HRESULT ( *LPFNACCESSIBLEOBJECTFROMWINDOW)(HWND hwnd, DWORD dwId,  IID * riid, void **ppvObject);
typedef int ( *LPWPUCOMPLETEOVERLAPPEDREQUEST)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, DWORD dwError, DWORD cbTransferred, LPINT lpErrno);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CRYPT_TIME_STAMP_REQUEST_INFO {LPSTR pszTimeStampAlgorithm;LPSTR pszContentType;CRYPT_OBJID_BLOB Content;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _SP_DEVINFO_LIST_DETAIL_DATA_A {DWORD cbSize;GUID ClassGuid;HANDLE RemoteMachineHandle;CHAR RemoteMachineName[18];};
struct _SP_DEVINFO_LIST_DETAIL_DATA_W {DWORD cbSize;GUID ClassGuid;HANDLE RemoteMachineHandle;WCHAR RemoteMachineName[18];};
struct IDtcLuRmEnlistmentFactoryVtbl {HRESULT ( *QueryInterface)(IDtcLuRmEnlistmentFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRmEnlistmentFactory *This);ULONG ( *Release)(IDtcLuRmEnlistmentFactory *This);HRESULT ( *Create)(IDtcLuRmEnlistmentFactory *This, unsigned char *pucLuPair, DWORD cbLuPair, ITransaction *pITransaction, unsigned char *pTransId, DWORD cbTransId, IDtcLuRmEnlistmentSink *pRmEnlistmentSink, IDtcLuRmEnlistment **ppRmEnlistment);};
struct IJavaEnumRemoteFloatValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteFloatValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteFloatValue *This);ULONG ( *Release)(IJavaEnumRemoteFloatValue *This);HRESULT ( *Skip)(IJavaEnumRemoteFloatValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteFloatValue *This);HRESULT ( *Clone)(IJavaEnumRemoteFloatValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteFloatValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteFloatValue *This, ULONG celt, JAVA_FLOAT  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteFloatValue *This, JAVA_FLOAT *pjflt);};
struct IJavaEnumRemoteShortValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteShortValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteShortValue *This);ULONG ( *Release)(IJavaEnumRemoteShortValue *This);HRESULT ( *Skip)(IJavaEnumRemoteShortValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteShortValue *This);HRESULT ( *Clone)(IJavaEnumRemoteShortValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteShortValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteShortValue *This, ULONG celt, JAVA_SHORT  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteShortValue *This, JAVA_SHORT *pjsh);};
struct IXAResourceManagerFactoryVtbl {HRESULT ( *QueryInterface)(IXAResourceManagerFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXAResourceManagerFactory *This);ULONG ( *Release)(IXAResourceManagerFactory *This);HRESULT ( *Create)(IXAResourceManagerFactory *This, char *pszDSN, CLSID clsidRMHelper, IXAResourceManager **ppIXaResMgr);};
typedef BOOL ( *LPDPLENUMADDRESSTYPESCALLBACK)( GUID * guidDataType, LPVOID lpContext, DWORD dwFlags);
typedef HRESULT ( *LPFNCREATESTDACCESSIBLEOBJECT)(HWND hwnd, LONG idObject,  IID * riid, void **ppvObject);
typedef void ( *PFNGLDRAWRANGEELEMENTSWINPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type,  GLvoid *indices);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL ( *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL ( *PHOSTSEC_TRANSACTION_COMPLETE)(PVOID, HANDLE, DWORD);
typedef void ( *PWINDBG_OLD_EXTENSION_ROUTINE)(HANDLE hCurrentProcess, HANDLE hCurrentThread, ULONG dwCurrentPc, PWINDBG_EXTENSION_APIS lpExtensionApis, PCSTR lpArgumentString);
typedef BOOL ( *VDMGETTHREADSELECTORENTRYPROC)(HANDLE, HANDLE, DWORD, LPVDMLDT_ENTRY);
struct _MEMORY_BASIC_INFORMATION_VLM {_MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 __anonymous0;_MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B __anonymous1;ULONGLONG RegionSize;DWORD AllocationProtect;DWORD State;DWORD Protect;DWORD Type;};
struct IJavaEnumRemoteByteValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteByteValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteByteValue *This);ULONG ( *Release)(IJavaEnumRemoteByteValue *This);HRESULT ( *Skip)(IJavaEnumRemoteByteValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteByteValue *This);HRESULT ( *Clone)(IJavaEnumRemoteByteValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteByteValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteByteValue *This, ULONG celt, JAVA_BYTE  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteByteValue *This, JAVA_BYTE *pjbyte);};
struct IJavaEnumRemoteCharValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteCharValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteCharValue *This);ULONG ( *Release)(IJavaEnumRemoteCharValue *This);HRESULT ( *Skip)(IJavaEnumRemoteCharValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteCharValue *This);HRESULT ( *Clone)(IJavaEnumRemoteCharValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteCharValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteCharValue *This, ULONG celt, JAVA_CHAR  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteCharValue *This, JAVA_CHAR *pjch);};
struct IJavaEnumRemoteLongValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteLongValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteLongValue *This);ULONG ( *Release)(IJavaEnumRemoteLongValue *This);HRESULT ( *Skip)(IJavaEnumRemoteLongValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteLongValue *This);HRESULT ( *Clone)(IJavaEnumRemoteLongValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteLongValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteLongValue *This, ULONG celt, JAVA_LONG  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteLongValue *This, JAVA_LONG *pjl);};
typedef SECURITY_STATUS ( *IMPORT_SECURITY_CONTEXT_FN_A)(SEC_CHAR *, PSecBuffer, void *, PCtxtHandle);
struct IWCPropertySheetCallbackVtbl {HRESULT ( *QueryInterface)(IWCPropertySheetCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWCPropertySheetCallback *This);ULONG ( *Release)(IWCPropertySheetCallback *This);HRESULT ( *AddPropertySheetPage)(IWCPropertySheetCallback *This, LONG *hpage);};
typedef BOOL ( *PENUMLOADED_MODULES_CALLBACK)(LPSTR ModuleName, ULONG ModuleBase, ULONG ModuleSize, PVOID UserContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL ( *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext);
struct _CERT_BASIC_CONSTRAINTS_INFO {CRYPT_BIT_BLOB SubjectType;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;DWORD cSubtreesConstraint;CERT_NAME_BLOB *rgSubtreesConstraint;};
struct _CERT_SAMPLE_STRUCTURE2_INFO {DWORD dwVersion;LONG lField1;WCHAR *pwszField2;FILETIME dateField3;};
struct _NTMS_LIBREQUESTINFORMATIONA {DWORD OperationCode;DWORD OperationOption;DWORD State;NTMS_GUID PartitionId;NTMS_GUID DriveId;NTMS_GUID PhysMediaId;NTMS_GUID Library;NTMS_GUID SlotId;SYSTEMTIME TimeQueued;SYSTEMTIME TimeCompleted;CHAR szApplication[64];CHAR szUser[64];CHAR szComputer[64];};
struct _NTMS_LIBREQUESTINFORMATIONW {DWORD OperationCode;DWORD OperationOption;DWORD State;NTMS_GUID PartitionId;NTMS_GUID DriveId;NTMS_GUID PhysMediaId;NTMS_GUID Library;NTMS_GUID SlotId;SYSTEMTIME TimeQueued;SYSTEMTIME TimeCompleted;WCHAR szApplication[64];WCHAR szUser[64];WCHAR szComputer[64];};
struct IEnumRemoteBooleanValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteBooleanValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteBooleanValue *This);ULONG ( *Release)(IEnumRemoteBooleanValue *This);HRESULT ( *Skip)(IEnumRemoteBooleanValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteBooleanValue *This);HRESULT ( *Clone)(IEnumRemoteBooleanValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteBooleanValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteBooleanValue *This, ULONG celt, JAVA_BOOLEAN  *    rgelt, ULONG *pceltFetched);};
struct IJavaEnumRemoteIntValueVtbl {HRESULT ( *QueryInterface)(IJavaEnumRemoteIntValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumRemoteIntValue *This);ULONG ( *Release)(IJavaEnumRemoteIntValue *This);HRESULT ( *Skip)(IJavaEnumRemoteIntValue *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumRemoteIntValue *This);HRESULT ( *Clone)(IJavaEnumRemoteIntValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IJavaEnumRemoteIntValue *This, ULONG *pcelt);HRESULT ( *Next)(IJavaEnumRemoteIntValue *This, ULONG celt, JAVA_INT  *    rgelt, ULONG *pceltFetched);HRESULT ( *GetNext)(IJavaEnumRemoteIntValue *This, JAVA_INT *pjn);};
struct ITransactionTransmitterVtbl {HRESULT ( *QueryInterface)(ITransactionTransmitter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionTransmitter *This);ULONG ( *Release)(ITransactionTransmitter *This);HRESULT ( *Set)(ITransactionTransmitter *This, ITransaction *pTransaction);HRESULT ( *GetPropagationTokenSize)(ITransactionTransmitter *This, ULONG *pcbToken);HRESULT ( *MarshalPropagationToken)(ITransactionTransmitter *This, ULONG cbToken, BYTE *rgbToken, ULONG *pcbUsed);HRESULT ( *UnmarshalReturnToken)(ITransactionTransmitter *This, ULONG cbReturnToken, BYTE *rgbReturnToken);HRESULT ( *Reset)(ITransactionTransmitter *This);};
typedef void ( *PFNGLTEXCOORDPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef BOOL ( *PSYMBOL_REGISTERED_CALLBACK)(HANDLE hProcess, ULONG ActionCode, PVOID CallbackData, PVOID UserContext);
struct _CMSG_ENVELOPED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCERT_INFO *rgpRecipients;};
struct _NTMS_OPREQUESTINFORMATIONA {DWORD Request;SYSTEMTIME Submitted;DWORD State;CHAR szMessage[127];DWORD Arg1Type;NTMS_GUID Arg1;DWORD Arg2Type;NTMS_GUID Arg2;CHAR szApplication[64];CHAR szUser[64];CHAR szComputer[64];};
struct _NTMS_OPREQUESTINFORMATIONW {DWORD Request;SYSTEMTIME Submitted;DWORD State;WCHAR szMessage[127];DWORD Arg1Type;NTMS_GUID Arg1;DWORD Arg2Type;NTMS_GUID Arg2;WCHAR szApplication[64];WCHAR szUser[64];WCHAR szComputer[64];};
typedef BOOL (*pCryptSIPCreateIndirectData)(SIP_SUBJECTINFO *pSubjectInfo, DWORD *pcbIndirectData, SIP_INDIRECT_DATA *pIndirectData);
typedef SECURITY_STATUS ( *EXPORT_SECURITY_CONTEXT_FN)(PCtxtHandle, ULONG, PSecBuffer, void **);
struct IAMTVAudioNotificationVtbl {HRESULT ( *QueryInterface)(IAMTVAudioNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTVAudioNotification *This);ULONG ( *Release)(IAMTVAudioNotification *This);HRESULT ( *OnEvent)(IAMTVAudioNotification *This, AMTVAudioEventType Event);};
struct IDirectDrawMediaSampleVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaSample *This);ULONG ( *Release)(IDirectDrawMediaSample *This);HRESULT ( *GetSurfaceAndReleaseLock)(IDirectDrawMediaSample *This, IDirectDrawSurface **ppDirectDrawSurface, RECT *pRect);HRESULT ( *LockMediaSamplePointer)(IDirectDrawMediaSample *This);};
struct IEnumRemoteDoubleValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteDoubleValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteDoubleValue *This);ULONG ( *Release)(IEnumRemoteDoubleValue *This);HRESULT ( *Skip)(IEnumRemoteDoubleValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteDoubleValue *This);HRESULT ( *Clone)(IEnumRemoteDoubleValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteDoubleValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteDoubleValue *This, ULONG celt, JAVA_DOUBLE  *    rgelt, ULONG *pceltFetched);};
struct IObjectContextActivityVtbl {HRESULT ( *QueryInterface)(IObjectContextActivity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectContextActivity *This);ULONG ( *Release)(IObjectContextActivity *This);HRESULT ( *GetActivityId)(IObjectContextActivity *This, GUID *pGUID);};
typedef INT ( *LPDIRECTXDEVICEDRIVERSETUP)(HWND, LPSTR, LPSTR, DWORD);
typedef int ( *LPWPUQUERYBLOCKINGCALLBACK)(DWORD dwCatalogEntryId, LPBLOCKINGCALLBACK *lplpfnCallback, LPDWORD lpdwContext, LPINT lpErrno);
struct _ACCESS_ALLOWED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _RAS_PPP_PROJECTION_RESULT {RAS_PPP_NBFCP_RESULT nbf;RAS_PPP_IPCP_RESULT ip;RAS_PPP_IPXCP_RESULT ipx;RAS_PPP_ATCP_RESULT at;};
struct IDtcLuRecoveryFactoryVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryFactory *This);ULONG ( *Release)(IDtcLuRecoveryFactory *This);HRESULT ( *Create)(IDtcLuRecoveryFactory *This, unsigned char *pucLuPair, DWORD cbLuPair, IDtcLuRecovery **ppRecovery);};
struct IDtcToXaHelperFactoryVtbl {HRESULT ( *QueryInterface)(IDtcToXaHelperFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcToXaHelperFactory *This);ULONG ( *Release)(IDtcToXaHelperFactory *This);HRESULT ( *Create)(IDtcToXaHelperFactory *This, char *pszDSN, char *pszClientDllName, GUID *pguidRm, IDtcToXaHelper **ppXaHelper);};
struct IEnumConnectionPointsVtbl {HRESULT ( *QueryInterface)(IEnumConnectionPoints *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnectionPoints *This);ULONG ( *Release)(IEnumConnectionPoints *This);HRESULT ( *Next)(IEnumConnectionPoints *This, ULONG cConnections, LPCONNECTIONPOINT *ppCP, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnectionPoints *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnectionPoints *This);HRESULT ( *Clone)(IEnumConnectionPoints *This, IEnumConnectionPoints **ppEnum);};
struct IEnumRemoteFloatValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteFloatValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteFloatValue *This);ULONG ( *Release)(IEnumRemoteFloatValue *This);HRESULT ( *Skip)(IEnumRemoteFloatValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteFloatValue *This);HRESULT ( *Clone)(IEnumRemoteFloatValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteFloatValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteFloatValue *This, ULONG celt, JAVA_FLOAT  *    rgelt, ULONG *pceltFetched);};
struct IEnumRemoteShortValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteShortValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteShortValue *This);ULONG ( *Release)(IEnumRemoteShortValue *This);HRESULT ( *Skip)(IEnumRemoteShortValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteShortValue *This);HRESULT ( *Clone)(IEnumRemoteShortValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteShortValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteShortValue *This, ULONG celt, JAVA_SHORT  *    rgelt, ULONG *pceltFetched);};
struct IGlobalInterfaceTableVtbl {HRESULT ( *QueryInterface)(IGlobalInterfaceTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGlobalInterfaceTable *This);ULONG ( *Release)(IGlobalInterfaceTable *This);HRESULT ( *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *This, IUnknown *pUnk,  IID * riid, DWORD *pdwCookie);HRESULT ( *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie);HRESULT ( *GetInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie,  IID * riid, void **ppv);};
struct ISQLRequestDiagFieldsVtbl {HRESULT ( *QueryInterface)(ISQLRequestDiagFields *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISQLRequestDiagFields *This);ULONG ( *Release)(ISQLRequestDiagFields *This);HRESULT ( *RequestDiagFields)(ISQLRequestDiagFields *This, ULONG cDiagFields, KAGREQDIAG  *    rgDiagFields);};
struct ISpecifyPropertyPagesVtbl {HRESULT ( *QueryInterface)(ISpecifyPropertyPages *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISpecifyPropertyPages *This);ULONG ( *Release)(ISpecifyPropertyPages *This);HRESULT ( *GetPages)(ISpecifyPropertyPages *This, CAUUID *pPages);};
struct ITransactionContextExVtbl {HRESULT ( *QueryInterface)(ITransactionContextEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionContextEx *This);ULONG ( *Release)(ITransactionContextEx *This);HRESULT ( *CreateInstance)(ITransactionContextEx *This,  CLSID * cid,  IID * rid, void **pObject);HRESULT ( *Commit)(ITransactionContextEx *This);HRESULT ( *Abort)(ITransactionContextEx *This);};
struct ITransactionDispenserVtbl {HRESULT ( *QueryInterface)(ITransactionDispenser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionDispenser *This);ULONG ( *Release)(ITransactionDispenser *This);HRESULT ( *GetOptionsObject)(ITransactionDispenser *This, ITransactionOptions **ppOptions);HRESULT ( *BeginTransaction)(ITransactionDispenser *This, IUnknown *punkOuter, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOptions, ITransaction **ppTransaction);};
typedef void ( *PFNGLVERTEXPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef DWORD ( *PGET_NEXT_SERVICE_FROM_ID)(ULONG ServiceID, PIPX_SERVICE NextService, PULONG NextServiceID);
typedef BOOL ( *PSYM_ENUMMODULES_CALLBACK)(LPSTR ModuleName, ULONG BaseOfDll, PVOID UserContext);
typedef BOOL ( *PSYM_ENUMSYMBOLS_CALLBACK)(LPSTR SymbolName, ULONG SymbolAddress, ULONG SymbolSize, PVOID UserContext);
struct _ACCESS_DENIED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _NTMS_CHANGERINFORMATIONA {DWORD Number;NTMS_GUID ChangerType;CHAR szSerialNumber[32];CHAR szRevision[32];CHAR szDeviceName[64];WORD ScsiPort;WORD ScsiBus;WORD ScsiTarget;WORD ScsiLun;NTMS_GUID Library;};
struct _NTMS_CHANGERINFORMATIONW {DWORD Number;NTMS_GUID ChangerType;WCHAR szSerialNumber[32];WCHAR szRevision[32];WCHAR szDeviceName[64];WORD ScsiPort;WORD ScsiBus;WORD ScsiTarget;WORD ScsiLun;NTMS_GUID Library;};
struct _REPARSE_GUID_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;GUID ReparseGuid;struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
typedef BOOL (*pCryptSIPGetSignedDataMsg)(SIP_SUBJECTINFO *pSubjectInfo, DWORD *pdwEncodingType, DWORD dwIndex, DWORD *pcbSignedDataMsg, BYTE *pbSignedDataMsg);
typedef BOOL (*pCryptSIPPutSignedDataMsg)(SIP_SUBJECTINFO *pSubjectInfo, DWORD dwEncodingType, DWORD *pdwIndex, DWORD cbSignedDataMsg, BYTE *pbSignedDataMsg);
struct tagMCI_ANIM_WINDOW_PARMSA {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSA {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
typedef UINT ( *ACMFILTERCHOOSEHOOKPROCA)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFILTERCHOOSEHOOKPROCW)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFORMATCHOOSEHOOKPROCA)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
typedef UINT ( *ACMFORMATCHOOSEHOOKPROCW)(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
struct IAMBufferNegotiationVtbl {HRESULT ( *QueryInterface)(IAMBufferNegotiation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMBufferNegotiation *This);ULONG ( *Release)(IAMBufferNegotiation *This);HRESULT ( *SuggestAllocatorProperties)(IAMBufferNegotiation *This,  ALLOCATOR_PROPERTIES *pprop);HRESULT ( *GetAllocatorProperties)(IAMBufferNegotiation *This, ALLOCATOR_PROPERTIES *pprop);};
struct IAMTimecodeGeneratorVtbl {HRESULT ( *QueryInterface)(IAMTimecodeGenerator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeGenerator *This);ULONG ( *Release)(IAMTimecodeGenerator *This);HRESULT ( *GetTCGMode)(IAMTimecodeGenerator *This, int Param, int *pValue);HRESULT ( *SetTCGMode)(IAMTimecodeGenerator *This, int Param, int Value);HRESULT ( *put_VITCLine)(IAMTimecodeGenerator *This, int Line);HRESULT ( *get_VITCLine)(IAMTimecodeGenerator *This, int *pLine);HRESULT ( *SetTimecode)(IAMTimecodeGenerator *This, PTIMECODE_SAMPLE pTimecodeSample);HRESULT ( *GetTimecode)(IAMTimecodeGenerator *This, PTIMECODE_SAMPLE pTimecodeSample);};
struct IAMTunerNotificationVtbl {HRESULT ( *QueryInterface)(IAMTunerNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTunerNotification *This);ULONG ( *Release)(IAMTunerNotification *This);HRESULT ( *OnEvent)(IAMTunerNotification *This, AMTunerEventType Event);};
struct IAMVfwCaptureDialogsVtbl {HRESULT ( *QueryInterface)(IAMVfwCaptureDialogs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVfwCaptureDialogs *This);ULONG ( *Release)(IAMVfwCaptureDialogs *This);HRESULT ( *HasDialog)(IAMVfwCaptureDialogs *This, int iDialog);HRESULT ( *ShowDialog)(IAMVfwCaptureDialogs *This, int iDialog, HWND hwnd);HRESULT ( *SendDriverMessage)(IAMVfwCaptureDialogs *This, int iDialog, int uMsg, int dw1, int dw2);};
struct IDtcLuSubordinateDtcVtbl {HRESULT ( *QueryInterface)(IDtcLuSubordinateDtc *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuSubordinateDtc *This);ULONG ( *Release)(IDtcLuSubordinateDtc *This);HRESULT ( *Unplug)(IDtcLuSubordinateDtc *This, BOOL fConversationLost);HRESULT ( *BackedOut)(IDtcLuSubordinateDtc *This);HRESULT ( *BackOut)(IDtcLuSubordinateDtc *This);HRESULT ( *Committed)(IDtcLuSubordinateDtc *This);HRESULT ( *Forget)(IDtcLuSubordinateDtc *This);HRESULT ( *Prepare)(IDtcLuSubordinateDtc *This);HRESULT ( *RequestCommit)(IDtcLuSubordinateDtc *This);};
struct IEnumRemoteByteValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteByteValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteByteValue *This);ULONG ( *Release)(IEnumRemoteByteValue *This);HRESULT ( *Skip)(IEnumRemoteByteValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteByteValue *This);HRESULT ( *Clone)(IEnumRemoteByteValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteByteValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteByteValue *This, ULONG celt, JAVA_BYTE  *    rgelt, ULONG *pceltFetched);};
struct IEnumRemoteCharValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteCharValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteCharValue *This);ULONG ( *Release)(IEnumRemoteCharValue *This);HRESULT ( *Skip)(IEnumRemoteCharValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteCharValue *This);HRESULT ( *Clone)(IEnumRemoteCharValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteCharValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteCharValue *This, ULONG celt, JAVA_CHAR  *    rgelt, ULONG *pceltFetched);};
struct IEnumRemoteLongValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteLongValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteLongValue *This);ULONG ( *Release)(IEnumRemoteLongValue *This);HRESULT ( *Skip)(IEnumRemoteLongValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteLongValue *This);HRESULT ( *Clone)(IEnumRemoteLongValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteLongValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteLongValue *This, ULONG celt, JAVA_LONG  *    rgelt, ULONG *pceltFetched);};
struct IEnumTerminalClassesVtbl {HRESULT ( *QueryInterface)(IEnumTerminalClasses *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumTerminalClasses *This);ULONG ( *Release)(IEnumTerminalClasses *This);HRESULT ( *Next)(IEnumTerminalClasses *This, ULONG celt, GUID **ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumTerminalClasses *This);HRESULT ( *Skip)(IEnumTerminalClasses *This, ULONG celt);HRESULT ( *Clone)(IEnumTerminalClasses *This, IEnumTerminalClasses **ppEnum);};
struct IRemoteBooleanObjectVtbl {HRESULT ( *QueryInterface)(IRemoteBooleanObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteBooleanObject *This);ULONG ( *Release)(IRemoteBooleanObject *This);HRESULT ( *GetType)(IRemoteBooleanObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteBooleanObject *This);HRESULT ( *ClearBreakpoint)(IRemoteBooleanObject *This);HRESULT ( *GetValue)(IRemoteBooleanObject *This, JAVA_BOOLEAN *pvalue);HRESULT ( *SetValue)(IRemoteBooleanObject *This, JAVA_BOOLEAN value);};
struct ITransactionReceiverVtbl {HRESULT ( *QueryInterface)(ITransactionReceiver *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionReceiver *This);ULONG ( *Release)(ITransactionReceiver *This);HRESULT ( *UnmarshalPropagationToken)(ITransactionReceiver *This, ULONG cbToken, BYTE *rgbToken, ITransaction **ppTransaction);HRESULT ( *GetReturnTokenSize)(ITransactionReceiver *This, ULONG *pcbReturnToken);HRESULT ( *MarshalReturnToken)(ITransactionReceiver *This, ULONG cbReturnToken, BYTE *rgbReturnToken, ULONG *pcbUsed);HRESULT ( *Reset)(ITransactionReceiver *This);};
typedef HRESULT ( *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);
typedef INT ( *LPNSPGETSERVICECLASSINFO)(LPGUID lpProviderId, LPDWORD lpdwBufSize, LPWSASERVICECLASSINFOW lpServiceClassInfo);
typedef void ( *PFNGLCOLORPOINTEREXTPROC)(GLint size, GLenum type, GLsizei stride, GLsizei count,  GLvoid *pointer);
typedef HRESULT (*PMSBDNOUTPUTSTREAMSTATUS)(MSBDN_OUTPUT_SUBSYSTEM *, WORD, LPBYTE, BOOL);
typedef BOOL ( *SSL_CRACK_CERTIFICATE_FN)(PUCHAR pbCertificate, DWORD cbCertificate, BOOL VerifySignature, PX509Certificate *ppCertificate);
typedef BOOL ( *VDMGETADDREXPRESSIONPROC)(LPSTR, LPSTR, PWORD, PDWORD, PWORD);
typedef BOOL ( *WSC_INSTALL_QOS_TEMPLATE)( LPGUID Guid, LPWSABUF QosName, LPQOS Qos);
struct _CMSG_SIGNED_ENCODE_INFO {DWORD cbSize;DWORD cSigners;PCMSG_SIGNER_ENCODE_INFO rgSigners;DWORD cCertEncoded;PCERT_BLOB rgCertEncoded;DWORD cCrlEncoded;PCRL_BLOB rgCrlEncoded;};
struct _NTMS_LIBRARYINFORMATION {DWORD LibraryType;NTMS_GUID CleanerSlot;NTMS_GUID CleanerSlotDefault;BOOL LibrarySupportsDriveCleaning;BOOL BarCodeReaderInstalled;DWORD InventoryMethod;DWORD dwCleanerUsesRemaining;DWORD FirstDriveNumber;DWORD dwNumberOfDrives;DWORD FirstSlotNumber;DWORD dwNumberOfSlots;DWORD FirstDoorNumber;DWORD dwNumberOfDoors;DWORD FirstPortNumber;DWORD dwNumberOfPorts;DWORD FirstChangerNumber;DWORD dwNumberOfChangers;DWORD dwNumberOfMedia;DWORD dwNumberOfMediaTypes;DWORD dwNumberOfLibRequests;GUID Reserved;};
struct _SYSTEM_ALARM_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _SYSTEM_AUDIT_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct DIDEVICEOBJECTINSTANCEA {DWORD dwSize;GUID guidType;DWORD dwOfs;DWORD dwType;DWORD dwFlags;CHAR tszName[260];DWORD dwFFMaxForce;DWORD dwFFForceResolution;WORD wCollectionNumber;WORD wDesignatorIndex;WORD wUsagePage;WORD wUsage;DWORD dwDimension;WORD wExponent;WORD wReserved;};
struct DIDEVICEOBJECTINSTANCEW {DWORD dwSize;GUID guidType;DWORD dwOfs;DWORD dwType;DWORD dwFlags;WCHAR tszName[260];DWORD dwFFMaxForce;DWORD dwFFForceResolution;WORD wCollectionNumber;WORD wDesignatorIndex;WORD wUsagePage;WORD wUsage;DWORD dwDimension;WORD wExponent;WORD wReserved;};
struct IAMDevMemoryControlVtbl {HRESULT ( *QueryInterface)(IAMDevMemoryControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDevMemoryControl *This);ULONG ( *Release)(IAMDevMemoryControl *This);HRESULT ( *QueryWriteSync)(IAMDevMemoryControl *This);HRESULT ( *WriteSync)(IAMDevMemoryControl *This);HRESULT ( *GetDevId)(IAMDevMemoryControl *This, DWORD *pdwDevId);};
struct IBriefcaseInitiatorVtbl {HRESULT ( *QueryInterface)(IBriefcaseInitiator *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(IBriefcaseInitiator *This);ULONG ( *Release)(IBriefcaseInitiator *This);HRESULT ( *IsMonikerInBriefcase)(IBriefcaseInitiator *This, IMoniker *pmk);};
struct IEnumRemoteIntValueVtbl {HRESULT ( *QueryInterface)(IEnumRemoteIntValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRemoteIntValue *This);ULONG ( *Release)(IEnumRemoteIntValue *This);HRESULT ( *Skip)(IEnumRemoteIntValue *This, ULONG celt);HRESULT ( *Reset)(IEnumRemoteIntValue *This);HRESULT ( *Clone)(IEnumRemoteIntValue *This, IEnumRemoteValue **ppEnum);HRESULT ( *GetCount)(IEnumRemoteIntValue *This, ULONG *pcelt);HRESULT ( *Next)(IEnumRemoteIntValue *This, ULONG celt, JAVA_INT  *    rgelt, ULONG *pceltFetched);};
struct IEnumSTATPROPSETSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSETSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSETSTG *This);ULONG ( *Release)(IEnumSTATPROPSETSTG *This);HRESULT ( *Next)(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSETSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSETSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum);};
struct IH26XEncoderControlVtbl {HRESULT ( *QueryInterface)(IH26XEncoderControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IH26XEncoderControl *This);ULONG ( *Release)(IH26XEncoderControl *This);HRESULT ( *get_EncodeCompression)(IH26XEncoderControl *This, PTR_ENC_CMP_DATA pData);HRESULT ( *get_EncodeCompressionDefault)(IH26XEncoderControl *This, PTR_ENC_CMP_DATA pData);HRESULT ( *set_EncodeCompression)(IH26XEncoderControl *This, PTR_ENC_CMP_DATA pData);};
struct IMAPIViewAdviseSinkVtbl {HRESULT ( *QueryInterface)(IMAPIViewAdviseSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIViewAdviseSink *This);ULONG ( *Release)(IMAPIViewAdviseSink *This);HRESULT ( *OnShutdown)(IMAPIViewAdviseSink *This);HRESULT ( *OnNewMessage)(IMAPIViewAdviseSink *This);HRESULT ( *OnPrint)(IMAPIViewAdviseSink *This, ULONG dwPageNumber, HRESULT hrStatus);HRESULT ( *OnSubmitted)(IMAPIViewAdviseSink *This);HRESULT ( *OnSaved)(IMAPIViewAdviseSink *This);};
struct IMSAdminReplicationVtbl {HRESULT ( *QueryInterface)(IMSAdminReplication *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMSAdminReplication *This);ULONG ( *Release)(IMSAdminReplication *This);HRESULT ( *GetSignature)(IMSAdminReplication *This, DWORD dwBufferSize, unsigned char *pbBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *Propagate)(IMSAdminReplication *This, DWORD dwBufferSize, unsigned char *pszBuffer);HRESULT ( *Propagate2)(IMSAdminReplication *This, DWORD dwBufferSize, unsigned char *pszBuffer, DWORD dwSignatureMismatch);HRESULT ( *Serialize)(IMSAdminReplication *This, DWORD dwBufferSize, unsigned char *pbBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *DeSerialize)(IMSAdminReplication *This, DWORD dwBufferSize, unsigned char *pbBuffer);};
struct IProcessDestroyHackVtbl {HRESULT ( *QueryInterface)(IProcessDestroyHack *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProcessDestroyHack *This);ULONG ( *Release)(IProcessDestroyHack *This);HRESULT ( *RegisterProcessDestroyHack)(IProcessDestroyHack *This, IRemoteProcessCallback *pirpcb, DWORD hevtEnd, DWORD *pdwDebugMgrProcessID, DWORD *phevtStart);HRESULT ( *DetachProcessDestroyHack)(IProcessDestroyHack *This);};
struct IPropertyNotifySinkVtbl {HRESULT ( *QueryInterface)(IPropertyNotifySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyNotifySink *This);ULONG ( *Release)(IPropertyNotifySink *This);HRESULT ( *OnChanged)(IPropertyNotifySink *This, DISPID dispID);HRESULT ( *OnRequestEdit)(IPropertyNotifySink *This, DISPID dispID);};
struct IReconcileInitiatorVtbl {HRESULT ( *QueryInterface)(IReconcileInitiator *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(IReconcileInitiator *This);ULONG ( *Release)(IReconcileInitiator *This);HRESULT ( *SetAbortCallback)(IReconcileInitiator *This, IUnknown *punkForAbort);HRESULT ( *SetProgressFeedback)(IReconcileInitiator *This, ULONG ulProgress, ULONG ulProgressMax);};
struct IRemoteDoubleObjectVtbl {HRESULT ( *QueryInterface)(IRemoteDoubleObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteDoubleObject *This);ULONG ( *Release)(IRemoteDoubleObject *This);HRESULT ( *GetType)(IRemoteDoubleObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteDoubleObject *This);HRESULT ( *ClearBreakpoint)(IRemoteDoubleObject *This);HRESULT ( *GetValue)(IRemoteDoubleObject *This, JAVA_DOUBLE *pvalue);HRESULT ( *SetValue)(IRemoteDoubleObject *This, JAVA_DOUBLE *pvalue);};
typedef void (*PNTSD_EXTENSION_ROUTINE)(HANDLE hCurrentProcess, HANDLE hCurrentThread, DWORD dwCurrentPc, PNTSD_EXTENSION_APIS lpExtensionApis, LPSTR lpArgumentString);
struct _CHANGER_ELEMENT_STATUS {CHANGER_ELEMENT Element;CHANGER_ELEMENT SrcElementAddress;DWORD Flags;DWORD ExceptionCode;BYTE TargetId;BYTE Lun;WORD Reserved;BYTE PrimaryVolumeID[36];BYTE AlternateVolumeID[36];};
struct _FILE_IN_CABINET_INFO_A {PCSTR NameInCabinet;DWORD FileSize;DWORD Win32Error;WORD DosDate;WORD DosTime;WORD DosAttribs;CHAR FullTargetName[260];};
struct tagEMRSETDIBITSTODEVICE {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD iStartScan;DWORD cScans;};
struct tagLAYERPLANEDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerPlane;BYTE bReserved;COLORREF crTransparent;};
struct tagMCI_ANIM_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct IAMTimecodeDisplayVtbl {HRESULT ( *QueryInterface)(IAMTimecodeDisplay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeDisplay *This);ULONG ( *Release)(IAMTimecodeDisplay *This);HRESULT ( *GetTCDisplayEnable)(IAMTimecodeDisplay *This, int *pState);HRESULT ( *SetTCDisplayEnable)(IAMTimecodeDisplay *This, int State);HRESULT ( *GetTCDisplay)(IAMTimecodeDisplay *This, int Param, int *pValue);HRESULT ( *SetTCDisplay)(IAMTimecodeDisplay *This, int Param, int Value);};
struct IDistributorNotifyVtbl {HRESULT ( *QueryInterface)(IDistributorNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDistributorNotify *This);ULONG ( *Release)(IDistributorNotify *This);HRESULT ( *Stop)(IDistributorNotify *This);HRESULT ( *Pause)(IDistributorNotify *This);HRESULT ( *Run)(IDistributorNotify *This, REFERENCE_TIME tStart);HRESULT ( *SetSyncSource)(IDistributorNotify *This, IReferenceClock *pClock);HRESULT ( *NotifyGraphChange)(IDistributorNotify *This);};
struct IDtcLuRmEnlistmentVtbl {HRESULT ( *QueryInterface)(IDtcLuRmEnlistment *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRmEnlistment *This);ULONG ( *Release)(IDtcLuRmEnlistment *This);HRESULT ( *Unplug)(IDtcLuRmEnlistment *This, BOOL fConversationLost);HRESULT ( *BackedOut)(IDtcLuRmEnlistment *This);HRESULT ( *BackOut)(IDtcLuRmEnlistment *This);HRESULT ( *Committed)(IDtcLuRmEnlistment *This);HRESULT ( *Forget)(IDtcLuRmEnlistment *This);HRESULT ( *RequestCommit)(IDtcLuRmEnlistment *This);};
struct IH26XEncodeOptionsVtbl {HRESULT ( *QueryInterface)(IH26XEncodeOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IH26XEncodeOptions *This);ULONG ( *Release)(IH26XEncodeOptions *This);HRESULT ( *get_EncodeOptions)(IH26XEncodeOptions *This, PTR_ENCODE_OPTIONS_VALUES pOptionValues);HRESULT ( *get_EncodeOptionsDefault)(IH26XEncodeOptions *This, PTR_ENCODE_OPTIONS_VALUES pOptionValues);HRESULT ( *set_EncodeOptions)(IH26XEncodeOptions *This, PTR_ENCODE_OPTIONS_VALUES pOptionValues);};
struct IRemoteFloatObjectVtbl {HRESULT ( *QueryInterface)(IRemoteFloatObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteFloatObject *This);ULONG ( *Release)(IRemoteFloatObject *This);HRESULT ( *GetType)(IRemoteFloatObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteFloatObject *This);HRESULT ( *ClearBreakpoint)(IRemoteFloatObject *This);HRESULT ( *GetValue)(IRemoteFloatObject *This, JAVA_FLOAT *pvalue);HRESULT ( *SetValue)(IRemoteFloatObject *This, JAVA_FLOAT *pvalue);};
struct IRemoteShortObjectVtbl {HRESULT ( *QueryInterface)(IRemoteShortObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteShortObject *This);ULONG ( *Release)(IRemoteShortObject *This);HRESULT ( *GetType)(IRemoteShortObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteShortObject *This);HRESULT ( *ClearBreakpoint)(IRemoteShortObject *This);HRESULT ( *GetValue)(IRemoteShortObject *This, JAVA_SHORT *pvalue);HRESULT ( *SetValue)(IRemoteShortObject *This, JAVA_SHORT value);};
struct IRowsetWatchNotifyVtbl {HRESULT ( *QueryInterface)(IRowsetWatchNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchNotify *This);ULONG ( *Release)(IRowsetWatchNotify *This);HRESULT ( *OnChange)(IRowsetWatchNotify *This, IRowset *pRowset, DBWATCHNOTIFY eChangeReason);};
struct ITCallNotificationVtbl {HRESULT ( *QueryInterface)(ITCallNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallNotification *This);ULONG ( *Release)(ITCallNotification *This);HRESULT ( *CallEventNotification)(ITCallNotification *This, ITAddress *pAddress, CALL_EVENT_TYPE CallEventType, IDispatch *pEvent);};
struct ITransactionExportVtbl {HRESULT ( *QueryInterface)(ITransactionExport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionExport *This);ULONG ( *Release)(ITransactionExport *This);HRESULT ( *Export)(ITransactionExport *This, IUnknown *punkTransaction, ULONG *pcbTransactionCookie);HRESULT ( *GetTransactionCookie)(ITransactionExport *This, IUnknown *punkTransaction, ULONG cbTransactionCookie, BYTE *rgbTransactionCookie, ULONG *pcbUsed);};
struct ITransactionImportVtbl {HRESULT ( *QueryInterface)(ITransactionImport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionImport *This);ULONG ( *Release)(ITransactionImport *This);HRESULT ( *Import)(ITransactionImport *This, ULONG cbTransactionCookie, BYTE *rgbTransactionCookie, IID *piid, void **ppvTransaction);};
typedef int ( *LPWSPENUMNETWORKEVENTS)(SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents, LPINT lpErrno);
struct _IMAGE_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;DWORD SizeOfStackReserve;DWORD SizeOfStackCommit;DWORD SizeOfHeapReserve;DWORD SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct _IMAGE_TLS_DIRECTORY64 {ULONGLONG StartAddressOfRawData;ULONGLONG EndAddressOfRawData;PDWORD AddressOfIndex;PIMAGE_TLS_CALLBACK *AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _LSA_OBJECT_ATTRIBUTES {ULONG Length;HANDLE RootDirectory;PLSA_UNICODE_STRING ObjectName;ULONG Attributes;PVOID SecurityDescriptor;PVOID SecurityQualityOfService;};
struct _PARTITION_INFORMATION {LARGE_INTEGER StartingOffset;LARGE_INTEGER PartitionLength;DWORD HiddenSectors;DWORD PartitionNumber;BYTE PartitionType;BOOLEAN BootIndicator;BOOLEAN RecognizedPartition;BOOLEAN RewritePartition;};
struct tagEMRGLSBOUNDEDRECORD {EMR emr;RECTL rclBounds;DWORD cbData;BYTE Data[1];};
struct IAMTimecodeReaderVtbl {HRESULT ( *QueryInterface)(IAMTimecodeReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTimecodeReader *This);ULONG ( *Release)(IAMTimecodeReader *This);HRESULT ( *GetTCRMode)(IAMTimecodeReader *This, int Param, int *pValue);HRESULT ( *SetTCRMode)(IAMTimecodeReader *This, int Param, int Value);HRESULT ( *put_VITCLine)(IAMTimecodeReader *This, int Line);HRESULT ( *get_VITCLine)(IAMTimecodeReader *This, int *pLine);HRESULT ( *GetTimecode)(IAMTimecodeReader *This, PTIMECODE_SAMPLE pTimecodeSample);};
struct IDirectWriterLockVtbl {HRESULT ( *QueryInterface)(IDirectWriterLock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectWriterLock *This);ULONG ( *Release)(IDirectWriterLock *This);HRESULT ( *WaitForWriteAccess)(IDirectWriterLock *This, DWORD dwTimeout);HRESULT ( *ReleaseWriteAccess)(IDirectWriterLock *This);HRESULT ( *HaveWriteAccess)(IDirectWriterLock *This);};
struct IEnumCATEGORYINFOVtbl {HRESULT ( *QueryInterface)(IEnumCATEGORYINFO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCATEGORYINFO *This);ULONG ( *Release)(IEnumCATEGORYINFO *This);HRESULT ( *Next)(IEnumCATEGORYINFO *This, ULONG celt, CATEGORYINFO *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumCATEGORYINFO *This, ULONG celt);HRESULT ( *Reset)(IEnumCATEGORYINFO *This);HRESULT ( *Clone)(IEnumCATEGORYINFO *This, IEnumCATEGORYINFO **ppenum);};
struct IH26XVideoEffectsVtbl {HRESULT ( *QueryInterface)(IH26XVideoEffects *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IH26XVideoEffects *This);ULONG ( *Release)(IH26XVideoEffects *This);HRESULT ( *getFactoryDefault)(IH26XVideoEffects *This, H26X_VIDEO_EFFECT veVideoEffect, int *pinDefault);HRESULT ( *getFactoryLimits)(IH26XVideoEffects *This, H26X_VIDEO_EFFECT veVideoEffect, int *pinLower, int *pinUpper);HRESULT ( *getCurrent)(IH26XVideoEffects *This, H26X_VIDEO_EFFECT veVideoEffect, int *pinValue);HRESULT ( *setCurrent)(IH26XVideoEffects *This, H26X_VIDEO_EFFECT veVideoEffect, int inValue);HRESULT ( *resetCurrent)(IH26XVideoEffects *This, H26X_VIDEO_EFFECT veVideoEffect);};
struct IInternetPriorityVtbl {HRESULT ( *QueryInterface)(IInternetPriority *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetPriority *This);ULONG ( *Release)(IInternetPriority *This);HRESULT ( *SetPriority)(IInternetPriority *This, LONG nPriority);HRESULT ( *GetPriority)(IInternetPriority *This, LONG *pnPriority);};
struct IJavaDebugManagerVtbl {HRESULT ( *QueryInterface)(IJavaDebugManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaDebugManager *This);ULONG ( *Release)(IJavaDebugManager *This);HRESULT ( *RegisterRemoteDebugManager)(IJavaDebugManager *This, IRemoteDebugManager *pirdm, DWORD dwProcessID);HRESULT ( *Detach)(IJavaDebugManager *This);};
struct IRemoteByteObjectVtbl {HRESULT ( *QueryInterface)(IRemoteByteObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteByteObject *This);ULONG ( *Release)(IRemoteByteObject *This);HRESULT ( *GetType)(IRemoteByteObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteByteObject *This);HRESULT ( *ClearBreakpoint)(IRemoteByteObject *This);HRESULT ( *GetValue)(IRemoteByteObject *This, JAVA_BYTE *pvalue);HRESULT ( *SetValue)(IRemoteByteObject *This, JAVA_BYTE value);};
struct IRemoteCharObjectVtbl {HRESULT ( *QueryInterface)(IRemoteCharObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteCharObject *This);ULONG ( *Release)(IRemoteCharObject *This);HRESULT ( *GetType)(IRemoteCharObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteCharObject *This);HRESULT ( *ClearBreakpoint)(IRemoteCharObject *This);HRESULT ( *GetValue)(IRemoteCharObject *This, JAVA_CHAR *pvalue);HRESULT ( *SetValue)(IRemoteCharObject *This, JAVA_CHAR value);};
struct IRemoteLongObjectVtbl {HRESULT ( *QueryInterface)(IRemoteLongObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteLongObject *This);ULONG ( *Release)(IRemoteLongObject *This);HRESULT ( *GetType)(IRemoteLongObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteLongObject *This);HRESULT ( *ClearBreakpoint)(IRemoteLongObject *This);HRESULT ( *GetValue)(IRemoteLongObject *This, JAVA_LONG *pvalue);HRESULT ( *SetValue)(IRemoteLongObject *This, JAVA_LONG value);};
struct IRemoteStackFrameVtbl {HRESULT ( *QueryInterface)(IRemoteStackFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteStackFrame *This);ULONG ( *Release)(IRemoteStackFrame *This);HRESULT ( *GetCallingFrame)(IRemoteStackFrame *This, IRemoteStackFrame **ppCallingFrame);HRESULT ( *GetMethodObject)(IRemoteStackFrame *This, IRemoteContainerObject **ppMethodObject);HRESULT ( *GetPC)(IRemoteStackFrame *This, ULONG *offPC);HRESULT ( *SetPC)(IRemoteStackFrame *This, ULONG offPC);HRESULT ( *GetKind)(IRemoteStackFrame *This, FRAMEKIND *pfk);};
struct IResourceConsumerVtbl {HRESULT ( *QueryInterface)(IResourceConsumer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceConsumer *This);ULONG ( *Release)(IResourceConsumer *This);HRESULT ( *AcquireResource)(IResourceConsumer *This, LONG idResource);HRESULT ( *ReleaseResource)(IResourceConsumer *This, LONG idResource);};
struct ISecurityPropertyVtbl {HRESULT ( *QueryInterface)(ISecurityProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISecurityProperty *This);ULONG ( *Release)(ISecurityProperty *This);HRESULT ( *GetDirectCreatorSID)(ISecurityProperty *This, PSID *pSID);HRESULT ( *GetOriginalCreatorSID)(ISecurityProperty *This, PSID *pSID);HRESULT ( *GetDirectCallerSID)(ISecurityProperty *This, PSID *pSID);HRESULT ( *GetOriginalCallerSID)(ISecurityProperty *This, PSID *pSID);HRESULT ( *ReleaseSID)(ISecurityProperty *This, PSID pSID);};
struct ISynchronizeEventVtbl {HRESULT ( *QueryInterface)(ISynchronizeEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeEvent *This);ULONG ( *Release)(ISynchronizeEvent *This);HRESULT ( *GetEvent)(ISynchronizeEvent *This, HANDLE *pEvent);};
struct ISynchronizeMutexVtbl {HRESULT ( *QueryInterface)(ISynchronizeMutex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronizeMutex *This);ULONG ( *Release)(ISynchronizeMutex *This);HRESULT ( *Wait)(ISynchronizeMutex *This, DWORD dwMilliseconds);HRESULT ( *Signal)(ISynchronizeMutex *This);HRESULT ( *Reset)(ISynchronizeMutex *This);HRESULT ( *ReleaseMutex)(ISynchronizeMutex *This);};
struct ITTerminalManagerVtbl {HRESULT ( *QueryInterface)(ITTerminalManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTerminalManager *This);ULONG ( *Release)(ITTerminalManager *This);HRESULT ( *ConnectPinsToTerminals)(ITTerminalManager *This, IGraphBuilder *pGraphBuilder, DWORD dwPinCount, IPin * *    ppPins, DWORD dwTerminalCount, ITTerminal * *    ppTerminal);};
typedef BOOL ( *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
typedef LRESULT ( *LPFNLRESULTFROMOBJECT)( IID * riid, WPARAM wParam, LPUNKNOWN punk);
typedef HRESULT ( *LPFNOBJECTFROMLRESULT)(LRESULT lResult,  IID * riid, WPARAM wParam, void **ppvObject);
typedef BOOL ( *PFNSNMPEXTENSIONQUERY)(BYTE bPduType, SnmpVarBindList *pVarBindList, AsnInteger32 *pErrorStatus, AsnInteger32 *pErrorIndex);
typedef BOOL ( *VDMGETSEGMENTINFOPROC)(WORD, ULONG, BOOL, VDM_SEGINFO);
typedef BOOL ( *VDMSTARTTASKINWOWPROC)(DWORD, LPSTR, WORD);
struct _IMAGE_SECTION_HEADER {BYTE Name[8];union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C Misc;DWORD VirtualAddress;DWORD SizeOfRawData;DWORD PointerToRawData;DWORD PointerToRelocations;DWORD PointerToLinenumbers;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD Characteristics;};
struct _RTL_CRITICAL_SECTION {PRTL_CRITICAL_SECTION_DEBUG DebugInfo;LONG LockCount;LONG RecursionCount;HANDLE OwningThread;HANDLE LockSemaphore;DWORD SpinCount;};
struct _WSAServiceClassInfoA {LPGUID lpServiceClassId;LPSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOA lpClassInfos;};
struct linereqmediacallW_tag {HWND hWnd;WPARAM wRequestID;WCHAR szDeviceClass[40];unsigned char ucDeviceID[40];DWORD dwSize;DWORD dwSecure;WCHAR szDestAddress[80];WCHAR szAppName[40];WCHAR szCalledParty[40];WCHAR szComment[80];};
struct tagHARDWAREHOOKSTRUCT {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;};
typedef HRESULT ( *FILESAVERESTOREONINF)(HWND hDlg, PCSTR pszTitle, PCSTR pszINF, PCSTR pszSection, PCSTR pszBackupDir, PCSTR pszBaseBackFile, DWORD dwFlags);
struct IAMCameraControlVtbl {HRESULT ( *QueryInterface)(IAMCameraControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCameraControl *This);ULONG ( *Release)(IAMCameraControl *This);HRESULT ( *GetRange)(IAMCameraControl *This, int Property, int *pMin, int *pMax, int *pSteppingDelta, int *pDefault, int *pCapsFlags);HRESULT ( *Set)(IAMCameraControl *This, int Property, int lValue, int Flags);HRESULT ( *Get)(IAMCameraControl *This, int Property, int *lValue, int *Flags);};
struct IChapteredRowsetVtbl {HRESULT ( *QueryInterface)(IChapteredRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChapteredRowset *This);ULONG ( *Release)(IChapteredRowset *This);HRESULT ( *AddRefChapter)(IChapteredRowset *This, HCHAPTER hChapter, ULONG *pcRefCount);HRESULT ( *ReleaseChapter)(IChapteredRowset *This, HCHAPTER hChapter, ULONG *pcRefCount);};
struct IConnectionPointVtbl {HRESULT ( *QueryInterface)(IConnectionPoint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConnectionPoint *This);ULONG ( *Release)(IConnectionPoint *This);HRESULT ( *GetConnectionInterface)(IConnectionPoint *This, IID *pIID);HRESULT ( *GetConnectionPointContainer)(IConnectionPoint *This, IConnectionPointContainer **ppCPC);HRESULT ( *Advise)(IConnectionPoint *This, IUnknown *pUnkSink, DWORD *pdwCookie);HRESULT ( *Unadvise)(IConnectionPoint *This, DWORD dwCookie);HRESULT ( *EnumConnections)(IConnectionPoint *This, IEnumConnections **ppEnum);};
struct IDBSchemaCommandVtbl {HRESULT ( *QueryInterface)(IDBSchemaCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBSchemaCommand *This);ULONG ( *Release)(IDBSchemaCommand *This);HRESULT ( *GetCommand)(IDBSchemaCommand *This, IUnknown *pUnkOuter,  GUID * rguidSchema, ICommand **ppCommand);HRESULT ( *GetSchemas)(IDBSchemaCommand *This, ULONG *pcSchemas, GUID **prgSchemas);};
struct IEnumAddressTypeVtbl {HRESULT ( *QueryInterface)(IEnumAddressType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumAddressType *This);ULONG ( *Release)(IEnumAddressType *This);HRESULT ( *Next)(IEnumAddressType *This, ULONG celt, DWORD *pAddressTypes, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumAddressType *This);HRESULT ( *Skip)(IEnumAddressType *This, ULONG celt);HRESULT ( *Clone)(IEnumAddressType *This, IEnumAddressType **ppEnum);};
struct IEnumConnectionsVtbl {HRESULT ( *QueryInterface)(IEnumConnections *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumConnections *This);ULONG ( *Release)(IEnumConnections *This);HRESULT ( *Next)(IEnumConnections *This, ULONG cConnections, LPCONNECTDATA rgcd, ULONG *pcFetched);HRESULT ( *Skip)(IEnumConnections *This, ULONG cConnections);HRESULT ( *Reset)(IEnumConnections *This);HRESULT ( *Clone)(IEnumConnections *This, IEnumConnections **ppEnum);};
struct IEnumSTATPROPSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATPROPSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATPROPSTG *This);ULONG ( *Release)(IEnumSTATPROPSTG *This);HRESULT ( *Next)(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATPROPSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATPROPSTG *This);HRESULT ( *Clone)(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum);};
struct IMLangStringBufAVtbl {HRESULT ( *QueryInterface)(IMLangStringBufA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringBufA *This);ULONG ( *Release)(IMLangStringBufA *This);HRESULT ( *GetStatus)(IMLangStringBufA *This, int *plFlags, int *pcchBuf);HRESULT ( *LockBuf)(IMLangStringBufA *This, int cchOffset, int cchMaxLock, CHAR **ppszBuf, int *pcchBuf);HRESULT ( *UnlockBuf)(IMLangStringBufA *This,  CHAR *pszBuf, int cchOffset, int cchWrite);HRESULT ( *Insert)(IMLangStringBufA *This, int cchOffset, int cchMaxInsert, int *pcchActual);HRESULT ( *Delete)(IMLangStringBufA *This, int cchOffset, int cchDelete);};
struct IMLangStringBufWVtbl {HRESULT ( *QueryInterface)(IMLangStringBufW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringBufW *This);ULONG ( *Release)(IMLangStringBufW *This);HRESULT ( *GetStatus)(IMLangStringBufW *This, int *plFlags, int *pcchBuf);HRESULT ( *LockBuf)(IMLangStringBufW *This, int cchOffset, int cchMaxLock, WCHAR **ppszBuf, int *pcchBuf);HRESULT ( *UnlockBuf)(IMLangStringBufW *This,  WCHAR *pszBuf, int cchOffset, int cchWrite);HRESULT ( *Insert)(IMLangStringBufW *This, int cchOffset, int cchMaxInsert, int *pcchActual);HRESULT ( *Delete)(IMLangStringBufW *This, int cchOffset, int cchDelete);};
struct IMultipleResultsVtbl {HRESULT ( *QueryInterface)(IMultipleResults *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultipleResults *This);ULONG ( *Release)(IMultipleResults *This);HRESULT ( *GetResult)(IMultipleResults *This, IUnknown *pUnkOuter, LONG reserved,  IID * riid, LONG *pcRowsAffected, IUnknown **ppRowset);};
struct IOleAdviseHolderVtbl {HRESULT ( *QueryInterface)(IOleAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleAdviseHolder *This);ULONG ( *Release)(IOleAdviseHolder *This);HRESULT ( *Advise)(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnRename)(IOleAdviseHolder *This, IMoniker *pmk);HRESULT ( *SendOnSave)(IOleAdviseHolder *This);HRESULT ( *SendOnClose)(IOleAdviseHolder *This);};
struct IOleCacheControlVtbl {HRESULT ( *QueryInterface)(IOleCacheControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCacheControl *This);ULONG ( *Release)(IOleCacheControl *This);HRESULT ( *OnRun)(IOleCacheControl *This, LPDATAOBJECT pDataObject);HRESULT ( *OnStop)(IOleCacheControl *This);};
struct IRPHH26XSettingsVtbl {HRESULT ( *QueryInterface)(IRPHH26XSettings *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRPHH26XSettings *This);ULONG ( *Release)(IRPHH26XSettings *This);HRESULT ( *SetCIF)(IRPHH26XSettings *This, BOOL bCIF);HRESULT ( *GetCIF)(IRPHH26XSettings *This, BOOL *lpbCIF);};
struct IRemoteIntObjectVtbl {HRESULT ( *QueryInterface)(IRemoteIntObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteIntObject *This);ULONG ( *Release)(IRemoteIntObject *This);HRESULT ( *GetType)(IRemoteIntObject *This, IRemoteField **ppType);HRESULT ( *SetBreakpoint)(IRemoteIntObject *This);HRESULT ( *ClearBreakpoint)(IRemoteIntObject *This);HRESULT ( *GetValue)(IRemoteIntObject *This, JAVA_INT *pvalue);HRESULT ( *SetValue)(IRemoteIntObject *This, JAVA_INT value);};
struct ISQLGetDiagFieldVtbl {HRESULT ( *QueryInterface)(ISQLGetDiagField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISQLGetDiagField *This);ULONG ( *Release)(ISQLGetDiagField *This);HRESULT ( *GetDiagField)(ISQLGetDiagField *This, KAGGETDIAG *pDiagInfo);};
struct ISeekingPassThruVtbl {HRESULT ( *QueryInterface)(ISeekingPassThru *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISeekingPassThru *This);ULONG ( *Release)(ISeekingPassThru *This);HRESULT ( *Init)(ISeekingPassThru *This, BOOL bSupportRendering, IPin *pPin);};
struct IServiceProviderVtbl {HRESULT ( *QueryInterface)(IServiceProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServiceProvider *This);ULONG ( *Release)(IServiceProvider *This);HRESULT ( *QueryService)(IServiceProvider *This,  GUID * guidService,  IID * riid, void **ppvObject);};
struct ITransactionJoinVtbl {HRESULT ( *QueryInterface)(ITransactionJoin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionJoin *This);ULONG ( *Release)(ITransactionJoin *This);HRESULT ( *GetOptionsObject)(ITransactionJoin *This, ITransactionOptions **ppOptions);HRESULT ( *JoinTransaction)(ITransactionJoin *This, IUnknown *punkTransactionCoord, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOtherOptions);};
typedef int ( *LPWSPDUPLICATESOCKET)(SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPINT lpErrno);
typedef BOOL ( *PFNSNMPEXTENSIONINIT)(DWORD dwUpTimeReference, HANDLE *phSubagentTrapEvent, AsnObjectIdentifier *pFirstSupportedRegion);
typedef HRESULT ( *REBOOTCHECKONINSTALL)(HWND, PCSTR, PCSTR, DWORD);
typedef BOOL ( *WPU_GET_QOS_TEMPLATE)( LPGUID Guid, LPWSABUF QosName, LPQOS Qos);
struct _CMINVOKECOMMANDINFO {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;};
struct _CRYPT_PROVIDER_SGNR {DWORD cbStruct;FILETIME sftVerifyAsOf;DWORD csCertChain;CRYPT_PROVIDER_CERT *pasCertChain;DWORD dwSignerType;CMSG_SIGNER_INFO *psSigner;DWORD dwError;DWORD csCounterSigners;struct _CRYPT_PROVIDER_SGNR *pasCounterSigners;};
struct _CTL_FIND_USAGE_PARA {DWORD cbSize;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;PCERT_INFO pSigner;};
struct _ENCRYPTED_DATA_INFO {DWORDLONG StartingFileOffset;DWORD OutputBufferOffset;DWORD BytesWithinFileSize;DWORD BytesWithinValidDataLength;WORD CompressionFormat;BYTE DataUnitShift;BYTE ChunkShift;BYTE ClusterShift;BYTE EncryptionFormat;WORD NumberOfDataBlocks;DWORD DataBlockSize[1];};
struct _LOAD_DLL_DEBUG_INFO {HANDLE hFile;LPVOID lpBaseOfDll;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpImageName;WORD fUnicode;};
struct _SECURITY_DESCRIPTOR {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;PSID Owner;PSID Group;PACL Sacl;PACL Dacl;};
struct tagEMRPOLYPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cpts;DWORD aPolyCounts[1];POINTS apts[1];};
struct tagMENUGETOBJECTINFO {DWORD dwFlags;UINT uPos;HMENU hmenu;PVOID riid;PVOID pvObj;};
struct tagNMDATETIMEFORMATA {NMHDR nmhdr;LPCSTR pszFormat;SYSTEMTIME st;LPCSTR pszDisplay;CHAR szDisplay[64];};
struct tagNMDATETIMESTRINGA {NMHDR nmhdr;LPCSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
typedef BOOL ( *ACMFILTERTAGENUMCBA)(HACMDRIVERID hadid, LPACMFILTERTAGDETAILSA paftd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFILTERTAGENUMCBW)(HACMDRIVERID hadid, LPACMFILTERTAGDETAILSW paftd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATTAGENUMCBA)(HACMDRIVERID hadid, LPACMFORMATTAGDETAILSA paftd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATTAGENUMCBW)(HACMDRIVERID hadid, LPACMFORMATTAGDETAILSW paftd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *AMGETERRORTEXTPROCW)(HRESULT, WCHAR *, DWORD);
struct IAMVideoProcAmpVtbl {HRESULT ( *QueryInterface)(IAMVideoProcAmp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVideoProcAmp *This);ULONG ( *Release)(IAMVideoProcAmp *This);HRESULT ( *GetRange)(IAMVideoProcAmp *This, int Property, int *pMin, int *pMax, int *pSteppingDelta, int *pDefault, int *pCapsFlags);HRESULT ( *Set)(IAMVideoProcAmp *This, int Property, int lValue, int Flags);HRESULT ( *Get)(IAMVideoProcAmp *This, int Property, int *lValue, int *Flags);};
struct IDtcLuConfigureVtbl {HRESULT ( *QueryInterface)(IDtcLuConfigure *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuConfigure *This);ULONG ( *Release)(IDtcLuConfigure *This);HRESULT ( *Add)(IDtcLuConfigure *This, unsigned char *pucLuPair, DWORD cbLuPair);HRESULT ( *Delete)(IDtcLuConfigure *This, unsigned char *pucLuPair, DWORD cbLuPair);};
struct IEnumMediaTypesVtbl {HRESULT ( *QueryInterface)(IEnumMediaTypes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMediaTypes *This);ULONG ( *Release)(IEnumMediaTypes *This);HRESULT ( *Next)(IEnumMediaTypes *This, ULONG cMediaTypes, AM_MEDIA_TYPE **ppMediaTypes, ULONG *pcFetched);HRESULT ( *Skip)(IEnumMediaTypes *This, ULONG cMediaTypes);HRESULT ( *Reset)(IEnumMediaTypes *This);HRESULT ( *Clone)(IEnumMediaTypes *This, IEnumMediaTypes **ppEnum);};
struct IEnumRegFiltersVtbl {HRESULT ( *QueryInterface)(IEnumRegFilters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRegFilters *This);ULONG ( *Release)(IEnumRegFilters *This);HRESULT ( *Next)(IEnumRegFilters *This, ULONG cFilters, REGFILTER **apRegFilter, ULONG *pcFetched);HRESULT ( *Skip)(IEnumRegFilters *This, ULONG cFilters);HRESULT ( *Reset)(IEnumRegFilters *This);HRESULT ( *Clone)(IEnumRegFilters *This, IEnumRegFilters **ppEnum);};
struct IH26XRTPControlVtbl {HRESULT ( *QueryInterface)(IH26XRTPControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IH26XRTPControl *This);ULONG ( *Release)(IH26XRTPControl *This);HRESULT ( *get_RTPCompression)(IH26XRTPControl *This, PTR_ENC_RTP_DATA pData);HRESULT ( *get_RTPCompressionDefault)(IH26XRTPControl *This, PTR_ENC_RTP_DATA pData);HRESULT ( *set_RTPCompression)(IH26XRTPControl *This, PTR_ENC_RTP_DATA pData);};
struct IQualityControlVtbl {HRESULT ( *QueryInterface)(IQualityControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQualityControl *This);ULONG ( *Release)(IQualityControl *This);HRESULT ( *Notify)(IQualityControl *This, IBaseFilter *pSelf, Quality q);HRESULT ( *SetSink)(IQualityControl *This, IQualityControl *piqc);};
struct IRowsetIdentityVtbl {HRESULT ( *QueryInterface)(IRowsetIdentity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetIdentity *This);ULONG ( *Release)(IRowsetIdentity *This);HRESULT ( *IsSameRow)(IRowsetIdentity *This, HROW hThisRow, HROW hThatRow);};
typedef BOOL ( *PFNPROCESSPOLICIESA)(HWND hwnd, LPCSTR pszPath, LPCSTR pszUsername, LPCSTR pszComputerName, DWORD dwFlags);
typedef DWORD ( *PGET_INTERFACE_INFO)(ULONG InterfaceIndex, PVOID InterfaceInfo, PULONG InterfaceInfoSize);
struct _ERROR_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;SCODE scode;ULONG ulFlags;LPMAPIERROR lpMAPIError;};
struct _TABLE_NOTIFICATION {ULONG ulTableEvent;HRESULT hResult;SPropValue propIndex;SPropValue propPrior;SRow row;ULONG ulPad;};
union _TRIGGER_TYPE_UNION {DAILY Daily;WEEKLY Weekly;MONTHLYDATE MonthlyDate;MONTHLYDOW MonthlyDOW;};
struct _WSANAMESPACE_INFOA {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPSTR lpszIdentifier;};
struct tagEMRSTRETCHDIBITS {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD dwRop;LONG cxDest;LONG cyDest;};
struct tagIMEMENUITEMINFOA {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;CHAR szString[80];HBITMAP hbmpItem;};
struct tagIMEMENUITEMINFOW {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;WCHAR szString[80];HBITMAP hbmpItem;};
struct tagMDICREATESTRUCTA {LPCSTR szClass;LPCSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct tagVIDEOINFOHEADER2 {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;DWORD dwInterlaceFlags;DWORD dwCopyProtectFlags;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;DWORD dwReserved1;DWORD dwReserved2;BITMAPINFOHEADER bmiHeader;};
typedef HRESULT ( *GETVERSIONFROMFILE)(LPSTR lpszFilename, LPDWORD pdwMSVer, LPDWORD pdwLSVer, BOOL bVersion);
struct IEnumFORMATETCVtbl {HRESULT ( *QueryInterface)(IEnumFORMATETC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumFORMATETC *This);ULONG ( *Release)(IEnumFORMATETC *This);HRESULT ( *Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumFORMATETC *This, ULONG celt);HRESULT ( *Reset)(IEnumFORMATETC *This);HRESULT ( *Clone)(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);};
struct IInstallCodecsVtbl {HRESULT ( *QueryInterface)(IInstallCodecs *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallCodecs *This);ULONG ( *Release)(IInstallCodecs *This);};
struct IMDRangeRowsetVtbl {HRESULT ( *QueryInterface)(IMDRangeRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDRangeRowset *This);ULONG ( *Release)(IMDRangeRowset *This);HRESULT ( *GetRangeRowset)(IMDRangeRowset *This, IUnknown *pUnkOuter, ULONG ulStartCell, ULONG ulEndCell,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);};
struct INotifyReplicaVtbl {HRESULT ( *QueryInterface)(INotifyReplica *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(INotifyReplica *This);ULONG ( *Release)(INotifyReplica *This);HRESULT ( *YouAreAReplica)(INotifyReplica *This, ULONG ulcOtherReplicas, IMoniker **rgpmkOtherReplicas);};
struct IObjectControlVtbl {HRESULT ( *QueryInterface)(IObjectControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectControl *This);ULONG ( *Release)(IObjectControl *This);HRESULT ( *Activate)(IObjectControl *This);void ( *Deactivate)(IObjectControl *This);BOOL ( *CanBePooled)(IObjectControl *This);};
struct IRpcStubBufferVtbl {HRESULT ( *QueryInterface)(IRpcStubBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcStubBuffer *This);ULONG ( *Release)(IRpcStubBuffer *This);HRESULT ( *Connect)(IRpcStubBuffer *This, IUnknown *pUnkServer);void ( *Disconnect)(IRpcStubBuffer *This);HRESULT ( *Invoke)(IRpcStubBuffer *This, RPCOLEMESSAGE *prpcmsg, IRpcChannelBuffer *pRpcChannelBuffer);IRpcStubBuffer *( *IsIIDSupported)(IRpcStubBuffer *This,  IID * riid);ULONG ( *CountRefs)(IRpcStubBuffer *This);HRESULT ( *DebugServerQueryInterface)(IRpcStubBuffer *This, void **ppv);void ( *DebugServerRelease)(IRpcStubBuffer *This, void *pv);};
struct ISourcesRowsetVtbl {HRESULT ( *QueryInterface)(ISourcesRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISourcesRowset *This);ULONG ( *Release)(ISourcesRowset *This);HRESULT ( *GetSourcesRowset)(ISourcesRowset *This, IUnknown *pUnkOuter,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgProperties, IUnknown **ppSourcesRowset);};
typedef HRESULT ( *LPFNGETCLASSOBJECT)( CLSID *,  IID *, LPVOID *);
typedef DWORD ( *LPPROGRESS_ROUTINE)(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);
typedef DWORD ( *PMIB_GET_TRAP_INFO)(ULONG InputDataSize, PVOID InputData, PULONG OutputDataSize, PVOID OutputData);
typedef DWORD ( *PSP_DETSIG_CMPPROC)(HDEVINFO DeviceInfoSet, PSP_DEVINFO_DATA NewDeviceData, PSP_DEVINFO_DATA ExistingDeviceData, PVOID CompareContext);
struct _CERT_REQUEST_INFO {DWORD dwVersion;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _MIDL_SERVER_INFO_ {PMIDL_STUB_DESC pStubDesc; SERVER_ROUTINE *DispatchTable;PFORMAT_STRING ProcString; unsigned short *FmtStringOffset; STUB_THUNK *ThunkTable;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString; unsigned short *LocalFmtStringOffset;};
struct _RSVP_RESERVE_INFO {QOS_OBJECT_HDR ObjectHdr;ULONG Style;ULONG ConfirmRequest;LPRSVP_POLICY Policy;ULONG NumFlowDesc;LPFLOWDESCRIPTOR FlowDescList;};
struct _WSAPROTOCOL_INFOA {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;CHAR szProtocol[256];};
struct _WSAPROTOCOL_INFOW {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;WCHAR szProtocol[256];};
struct tACMDRIVERDETAILSA {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;WORD wMid;WORD wPid;DWORD vdwACM;DWORD vdwDriver;DWORD fdwSupport;DWORD cFormatTags;DWORD cFilterTags;HICON hicon;char szShortName[32];char szLongName[128];char szCopyright[80];char szLicensing[128];char szFeatures[512];};
struct tagDBROWWATCHRANGE {HWATCHREGION hRegion;DBROWCHANGEKIND eChangeKind;HROW hRow;ULONG iRow;};
struct tagEMREXTFLOODFILL {EMR emr;POINTL ptlStart;COLORREF crColor;DWORD iMode;};
struct tagEMRPOLYPOLYLINE {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cptl;DWORD aPolyCounts[1];POINTL aptl[1];};
struct tagFMS_TOOLBARLOAD {DWORD dwSize;LPEXT_BUTTON lpButtons;WORD cButtons;WORD cBitmaps;WORD idBitmap;HBITMAP hBitmap;};
struct tagMOUSEHOOKSTRUCT {POINT pt;HWND hwnd;UINT wHitTestCode;DWORD dwExtraInfo;};
struct tagNMLVGETINFOTIPA {NMHDR hdr;DWORD dwFlags;LPSTR pszText;int cchTextMax;int iItem;int iSubItem;LPARAM lParam;};
struct tagNMTVGETINFOTIPA {NMHDR hdr;LPSTR pszText;int cchTextMax;HTREEITEM hItem;LPARAM lParam;};
struct tagVIDEOINFOHEADER {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;BITMAPINFOHEADER bmiHeader;};
struct DIDEVICEINSTANCEA {DWORD dwSize;GUID guidInstance;GUID guidProduct;DWORD dwDevType;CHAR tszInstanceName[260];CHAR tszProductName[260];GUID guidFFDriver;WORD wUsagePage;WORD wUsage;};
struct DIDEVICEINSTANCEW {DWORD dwSize;GUID guidInstance;GUID guidProduct;DWORD dwDevType;WCHAR tszInstanceName[260];WCHAR tszProductName[260];GUID guidFFDriver;WORD wUsagePage;WORD wUsage;};
struct IClassFactoryVtbl {HRESULT ( *QueryInterface)(IClassFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory *This);ULONG ( *Release)(IClassFactory *This);HRESULT ( *CreateInstance)(IClassFactory *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory *This, BOOL fLock);};
struct IEnumChannelsVtbl {HRESULT ( *QueryInterface)(IEnumChannels *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumChannels *This);ULONG ( *Release)(IEnumChannels *This);HRESULT ( *Next)(IEnumChannels *This, ULONG celt, CHANNELENUMINFO *rgChanInf, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumChannels *This, ULONG celt);HRESULT ( *Reset)(IEnumChannels *This);HRESULT ( *Clone)(IEnumChannels *This, IEnumChannels **ppenum);};
struct IEnumCodePageVtbl {HRESULT ( *QueryInterface)(IEnumCodePage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumCodePage *This);ULONG ( *Release)(IEnumCodePage *This);HRESULT ( *Clone)(IEnumCodePage *This, IEnumCodePage **ppEnum);HRESULT ( *Next)(IEnumCodePage *This, ULONG celt, PMIMECPINFO rgelt, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumCodePage *This);HRESULT ( *Skip)(IEnumCodePage *This, ULONG celt);};
struct IEnumLINEINFOVtbl {HRESULT ( *QueryInterface)(IEnumLINEINFO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumLINEINFO *This);ULONG ( *Release)(IEnumLINEINFO *This);HRESULT ( *Next)(IEnumLINEINFO *This, ULONG celt, LPLINEINFO rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumLINEINFO *This, ULONG celt);HRESULT ( *Reset)(IEnumLINEINFO *This);HRESULT ( *Clone)(IEnumLINEINFO *This, IJavaEnumLINEINFO **ppEnum);HRESULT ( *GetCount)(IEnumLINEINFO *This, ULONG *pcelt);};
struct IEnumSTATDATAVtbl {HRESULT ( *QueryInterface)(IEnumSTATDATA *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATDATA *This);ULONG ( *Release)(IEnumSTATDATA *This);HRESULT ( *Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATDATA *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATDATA *This);HRESULT ( *Clone)(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);};
struct IGraphVersionVtbl {HRESULT ( *QueryInterface)(IGraphVersion *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGraphVersion *This);ULONG ( *Release)(IGraphVersion *This);HRESULT ( *QueryVersion)(IGraphVersion *This, LONG *pVersion);};
struct IObjectSafetyVtbl {HRESULT ( *QueryInterface)(IObjectSafety *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectSafety *This);ULONG ( *Release)(IObjectSafety *This);HRESULT ( *GetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD *pdwSupportedOptions, DWORD *pdwEnabledOptions);HRESULT ( *SetInterfaceSafetyOptions)(IObjectSafety *This,  IID * riid, DWORD dwOptionSetMask, DWORD dwEnabledOptions);};
struct IRowsetAsynchVtbl {HRESULT ( *QueryInterface)(IRowsetAsynch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetAsynch *This);ULONG ( *Release)(IRowsetAsynch *This);HRESULT ( *RatioFinished)(IRowsetAsynch *This, ULONG *pulDenominator, ULONG *pulNumerator, ULONG *pcRows, BOOL *pfNewRows);HRESULT ( *Stop)(IRowsetAsynch *This);};
struct IWaitMultipleVtbl {HRESULT ( *QueryInterface)(IWaitMultiple *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWaitMultiple *This);ULONG ( *Release)(IWaitMultiple *This);HRESULT ( *WaitMultiple)(IWaitMultiple *This, DWORD timeout, ISynchronize **pSync);HRESULT ( *AddSynchronize)(IWaitMultiple *This, ISynchronize *pSync);};
typedef DWORD ( *LPCLIPPERCALLBACK)(LPDIRECTDRAWCLIPPER lpDDClipper, HWND hWnd, DWORD code, LPVOID lpContext);
typedef BOOL ( *LPDDENUMCALLBACKA)(GUID *, LPSTR, LPSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKA)(LPGUID, LPCSTR, LPCSTR, LPVOID);
typedef INT ( *LPFNCCSIZETOTEXTA)(DWORD flStyle, DWORD flExtStyle, HFONT hfont, LPSTR pszText);
struct _D3DTRANSFORMDATA {DWORD dwSize;LPVOID lpIn;DWORD dwInSize;LPVOID lpOut;DWORD dwOutSize;LPD3DHVERTEX lpHOut;DWORD dwClip;DWORD dwClipIntersection;DWORD dwClipUnion;D3DRECT drExtent;};
struct _IMAGE_OS2_HEADER {WORD ne_magic;CHAR ne_ver;CHAR ne_rev;WORD ne_enttab;WORD ne_cbenttab;LONG ne_crc;WORD ne_flags;WORD ne_autodata;WORD ne_heap;WORD ne_stack;LONG ne_csip;LONG ne_sssp;WORD ne_cseg;WORD ne_cmod;WORD ne_cbnrestab;WORD ne_segtab;WORD ne_rsrctab;WORD ne_restab;WORD ne_modtab;WORD ne_imptab;LONG ne_nrestab;WORD ne_cmovent;WORD ne_align;WORD ne_cres;BYTE ne_exetyp;BYTE ne_flagsothers;WORD ne_pretthunks;WORD ne_psegrefbytes;WORD ne_swaparea;WORD ne_expver;};
struct _IPX_ADDRESS_DATA {INT adapternum;UCHAR netnum[4];UCHAR nodenum[6];BOOLEAN wan;BOOLEAN status;INT maxpkt;ULONG linkspeed;};
struct _KEY_EVENT_RECORD {BOOL bKeyDown;WORD wRepeatCount;WORD wVirtualKeyCode;WORD wVirtualScanCode;union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC uChar;DWORD dwControlKeyState;};
struct tagMODULEENTRY32W {DWORD dwSize;DWORD th32ModuleID;DWORD th32ProcessID;DWORD GlblcntUsage;DWORD ProccntUsage;BYTE *modBaseAddr;DWORD modBaseSize;HMODULE hModule;WCHAR szModule[256];WCHAR szExePath[260];};
struct tagNEWTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagNMITEMACTIVATE {NMHDR hdr;int iItem;int iSubItem;UINT uNewState;UINT uOldState;UINT uChanged;POINT ptAction;LPARAM lParam;UINT uKeyFlags;};
struct tagNMOBJECTNOTIFY {NMHDR hdr;int iItem; IID *piid;void *pObject;HRESULT hResult;DWORD dwFlags;};
struct tagSTATPROPSETSTG {FMTID fmtid;CLSID clsid;DWORD grfFlags;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD dwOSVersion;};
typedef BOOL ( *ACMFILTERENUMCBA)(HACMDRIVERID hadid, LPACMFILTERDETAILSA pafd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFILTERENUMCBW)(HACMDRIVERID hadid, LPACMFILTERDETAILSW pafd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATENUMCBA)(HACMDRIVERID hadid, LPACMFORMATDETAILSA pafd, DWORD dwInstance, DWORD fdwSupport);
typedef BOOL ( *ACMFORMATENUMCBW)(HACMDRIVERID hadid, LPACMFORMATDETAILSW pafd, DWORD dwInstance, DWORD fdwSupport);
struct IADsAttrInfoVtbl {HRESULT ( *QueryInterface)(IADsAttrInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsAttrInfo *This);ULONG ( *Release)(IADsAttrInfo *This);HRESULT ( *ConvertAttrInfoToPropertyEntry)(IADsAttrInfo *This, PADS_ATTR_INFO pAttrInfo);HRESULT ( *ConvertPropertyEntryToAttrInfo)(IADsAttrInfo *This, PADS_ATTR_INFO *ppAttrInfo);};
struct IEnumOLEVERBVtbl {HRESULT ( *QueryInterface)(IEnumOLEVERB *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumOLEVERB *This);ULONG ( *Release)(IEnumOLEVERB *This);HRESULT ( *Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumOLEVERB *This, ULONG celt);HRESULT ( *Reset)(IEnumOLEVERB *This);HRESULT ( *Clone)(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);};
struct IEnumPackageVtbl {HRESULT ( *QueryInterface)(IEnumPackage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumPackage *This);ULONG ( *Release)(IEnumPackage *This);HRESULT ( *Next)(IEnumPackage *This, ULONG celt, PACKAGEDETAIL *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumPackage *This, ULONG celt);HRESULT ( *Reset)(IEnumPackage *This);HRESULT ( *Clone)(IEnumPackage *This, IEnumPackage **ppenum);};
struct IEnumRfc1766Vtbl {HRESULT ( *QueryInterface)(IEnumRfc1766 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumRfc1766 *This);ULONG ( *Release)(IEnumRfc1766 *This);HRESULT ( *Clone)(IEnumRfc1766 *This, IEnumRfc1766 **ppEnum);HRESULT ( *Next)(IEnumRfc1766 *This, ULONG celt, PRFC1766INFO rgelt, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumRfc1766 *This);HRESULT ( *Skip)(IEnumRfc1766 *This, ULONG celt);};
struct IEnumSTATSTGVtbl {HRESULT ( *QueryInterface)(IEnumSTATSTG *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATSTG *This);ULONG ( *Release)(IEnumSTATSTG *This);HRESULT ( *Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATSTG *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATSTG *This);HRESULT ( *Clone)(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);};
struct IEnumVARIANTVtbl {HRESULT ( *QueryInterface)(IEnumVARIANT *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumVARIANT *This);ULONG ( *Release)(IEnumVARIANT *This);HRESULT ( *Next)(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);HRESULT ( *Skip)(IEnumVARIANT *This, ULONG celt);HRESULT ( *Reset)(IEnumVARIANT *This);HRESULT ( *Clone)(IEnumVARIANT *This, IEnumVARIANT **ppEnum);};
struct IOleDocumentVtbl {HRESULT ( *QueryInterface)(IOleDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocument *This);ULONG ( *Release)(IOleDocument *This);HRESULT ( *CreateView)(IOleDocument *This, IOleInPlaceSite *pIPSite, IStream *pstm, DWORD dwReserved, IOleDocumentView **ppView);HRESULT ( *GetDocMiscStatus)(IOleDocument *This, DWORD *pdwStatus);HRESULT ( *EnumViews)(IOleDocument *This, IEnumOleDocumentViews **ppEnum, IOleDocumentView **ppView);};
struct IPrepareInfoVtbl {HRESULT ( *QueryInterface)(IPrepareInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrepareInfo *This);ULONG ( *Release)(IPrepareInfo *This);HRESULT ( *GetPrepareInfoSize)(IPrepareInfo *This, ULONG *pcbPrepInfo);HRESULT ( *GetPrepareInfo)(IPrepareInfo *This, BYTE *pPrepInfo);};
struct ISynchronizeVtbl {HRESULT ( *QueryInterface)(ISynchronize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISynchronize *This);ULONG ( *Release)(ISynchronize *This);HRESULT ( *Wait)(ISynchronize *This, DWORD dwMilliseconds);HRESULT ( *Signal)(ISynchronize *This);HRESULT ( *Reset)(ISynchronize *This);};
struct ITableRenameVtbl {HRESULT ( *QueryInterface)(ITableRename *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableRename *This);ULONG ( *Release)(ITableRename *This);HRESULT ( *RenameColumn)(ITableRename *This, DBID *pTableId, DBID *pOldColumnId, DBID *pNewColumnId);HRESULT ( *RenameTable)(ITableRename *This, DBID *pOldTableId, DBID *pOldIndexId, DBID *pNewTableId, DBID *pNewIndexId);};
struct IViewChapterVtbl {HRESULT ( *QueryInterface)(IViewChapter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewChapter *This);ULONG ( *Release)(IViewChapter *This);HRESULT ( *GetSpecification)(IViewChapter *This,  IID * riid, IUnknown **ppRowset);HRESULT ( *OpenViewChapter)(IViewChapter *This, HCHAPTER hSource, HCHAPTER *phViewChapter);};
typedef int ( *OLDFONTENUMPROCA)( LOGFONTA *,  TEXTMETRICA *, DWORD, LPARAM);
typedef int ( *OLDFONTENUMPROCW)( LOGFONTW *,  TEXTMETRICW *, DWORD, LPARAM);
typedef DWORD ( *PFN_DIAL_HANDLER)(HWND, LPCSTR, DWORD, LPDWORD);
typedef HRESULT  SHOWHTMLDIALOGFN(HWND hwndParent, IMoniker *pmk, VARIANT *pvarArgIn, TCHAR *pchOptions, VARIANT *pvArgOut);
struct _CONTROL_SERVICE {ULONG Length;SERVICETYPE Service;AD_GENERAL_PARAMS Overrides;_CONTROL_SERVICE___3FB44F62F5D12D5D44B4562DCCF9333E __anonymous0;};
struct _FMS_GETFILESELA {FILETIME ftTime;DWORD dwSize;BYTE bAttr;CHAR szName[260];};
struct _FMS_GETFILESELW {FILETIME ftTime;DWORD dwSize;BYTE bAttr;WCHAR szName[260];};
struct _PRINTER_INFO_2A {LPSTR pServerName;LPSTR pPrinterName;LPSTR pShareName;LPSTR pPortName;LPSTR pDriverName;LPSTR pComment;LPSTR pLocation;LPDEVMODEA pDevMode;LPSTR pSepFile;LPSTR pPrintProcessor;LPSTR pDatatype;LPSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
struct _avistreamheader {FOURCC fcc;DWORD cb;FOURCC fccType;FOURCC fccHandler;DWORD dwFlags;WORD wPriority;WORD wLanguage;DWORD dwInitialFrames;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;struct _avistreamheader___B628C6371957B6BAFE4339C32F4B917E rcFrame;};
struct tagEMRPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];};
struct tagENHMETAHEADER {DWORD iType;DWORD nSize;RECTL rclBounds;RECTL rclFrame;DWORD dSignature;DWORD nVersion;DWORD nBytes;DWORD nRecords;WORD nHandles;WORD sReserved;DWORD nDescription;DWORD offDescription;DWORD nPalEntries;SIZEL szlDevice;SIZEL szlMillimeters;DWORD cbPixelFormat;DWORD offPixelFormat;DWORD bOpenGL;};
struct tagMIXERCONTROLA {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;CHAR szShortName[16];CHAR szName[64];union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 Bounds;union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagMIXERCONTROLW {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;WCHAR szShortName[16];WCHAR szName[64];union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 Bounds;union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagNMHDDISPINFOA {NMHDR hdr;int iItem;UINT mask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct BasicAudCapInfo {WORD wFormatTag;AUDIO_FORMAT_ID Id;char szFormat[128];UINT uMaxBitrate;UINT uAvgBitrate;WORD wCPUUtilizationEncode;WORD wCPUUtilizationDecode;BOOL bSendEnabled;BOOL bRecvEnabled;WORD wSortIndex;};
typedef BOOL ( *DIGEST_FUNCTION)(DIGEST_HANDLE refdata, PBYTE pData, DWORD dwLength);
typedef HRESULT ( *FILESAVERESTORE)(HWND hDlg, LPSTR lpFileList, LPSTR lpDir, LPSTR lpBaseName, DWORD dwFlags);
struct IAMCrossbarVtbl {HRESULT ( *QueryInterface)(IAMCrossbar *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMCrossbar *This);ULONG ( *Release)(IAMCrossbar *This);HRESULT ( *get_PinCounts)(IAMCrossbar *This, int *OutputPinCount, int *InputPinCount);HRESULT ( *CanRoute)(IAMCrossbar *This, int OutputPinIndex, int InputPinIndex);HRESULT ( *Route)(IAMCrossbar *This, int OutputPinIndex, int InputPinIndex);HRESULT ( *get_IsRoutedTo)(IAMCrossbar *This, int OutputPinIndex, int *InputPinIndex);HRESULT ( *get_CrossbarPinInfo)(IAMCrossbar *This, BOOL IsInputPin, int PinIndex, int *PinIndexRelated, int *PhysicalType);};
struct IAsyncSetupVtbl {HRESULT ( *QueryInterface)(IAsyncSetup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncSetup *This);ULONG ( *Release)(IAsyncSetup *This);HRESULT ( *GetAsyncManager)(IAsyncSetup *This,  IID * riid, IUnknown *pOuter, DWORD dwFlags, IUnknown **ppInner, IAsyncManager **ppAsyncMgr);};
struct IEnumHLITEMVtbl {HRESULT ( *QueryInterface)(IEnumHLITEM *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumHLITEM *This);ULONG ( *Release)(IEnumHLITEM *This);HRESULT ( *Next)(IEnumHLITEM *This, ULONG celt, HLITEM *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumHLITEM *This, ULONG celt);HRESULT ( *Reset)(IEnumHLITEM *This);HRESULT ( *Clone)(IEnumHLITEM *This, IEnumHLITEM **ppienumhlitem);};
struct IRowsetViewVtbl {HRESULT ( *QueryInterface)(IRowsetView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetView *This);ULONG ( *Release)(IRowsetView *This);HRESULT ( *CreateView)(IRowsetView *This, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppView);HRESULT ( *GetView)(IRowsetView *This, HCHAPTER hChapter,  IID * riid, HCHAPTER *phChapterSource, IUnknown **ppView);};
struct IRpcOptionsVtbl {HRESULT ( *QueryInterface)(IRpcOptions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcOptions *This);ULONG ( *Release)(IRpcOptions *This);HRESULT ( *Set)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, DWORD dwValue);HRESULT ( *Query)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, DWORD *pdwValue);HRESULT ( *CopyProxy)(IRpcOptions *This, IUnknown *punkProxy, IUnknown **ppunkCopy);};
typedef int ( *LPCONDITIONPROC)(LPWSABUF lpCallerId, LPWSABUF lpCallerData, LPQOS lpSQOS, LPQOS lpGQOS, LPWSABUF lpCalleeId, LPWSABUF lpCalleeData, GROUP *g, DWORD dwCallbackData);
typedef UINT ( *LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef DWORD (*PFE_EXPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
typedef DWORD (*PFE_IMPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);
typedef BOOL ( *PGET_SERVICE_ID)(USHORT Type, PUCHAR Name, PULONG ServiceID);
typedef DWORD ( *PSTART_PROTOCOL)(HANDLE NotificationEvent, PSUPPORT_FUNCTIONS SupportFunctions, LPVOID GlobalInfo);
struct _AVISTREAMINFOW {DWORD fccType;DWORD fccHandler;DWORD dwFlags;DWORD dwCaps;WORD wPriority;WORD wLanguage;DWORD dwScale;DWORD dwRate;DWORD dwStart;DWORD dwLength;DWORD dwInitialFrames;DWORD dwSuggestedBufferSize;DWORD dwQuality;DWORD dwSampleSize;RECT rcFrame;DWORD dwEditCount;DWORD dwFormatChangeCount;WCHAR szName[64];};
struct tagCHANNEL_INFO {LONG lChannelID;LONG lTuningSpace;LONG lChannelNumber;LONG lNetworkID;LONG lRatingID;LONG lDisplayMask;LONG lPaymentAddress;LONG lPaymentToken;LONG lLength;DATE StartTime;DATE EndTime;DATE LastUpdate;TCHAR szCallLetters[10];TCHAR szDescription[1024];TCHAR szNetworkName[10];TCHAR szNetworkLogoMoniker[1024];BOOL fTunable;};
struct tagEMRINVERTRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;BYTE RgnData[1];};
struct tagMIDIOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMIDIOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagRASENTRYDLGA {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;CHAR szEntry[257];DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagRASENTRYDLGW {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;WCHAR szEntry[257];DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagWAVEOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct tagWAVEOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
typedef HRESULT ( *ADVINSTALLFILE)(HWND hwnd, LPCSTR lpszSourceDir, LPCSTR lpszSourceFile, LPCSTR lpszDestDir, LPCSTR lpszDestFile, DWORD dwFlags, DWORD dwReserved);
typedef LONG ( *CONFNOTIFYPROC)(HCONF, DWORD, DWORD, LPVOID, LPVOID, DWORD);
struct ICSSFilterVtbl {HRESULT ( *QueryInterface)(ICSSFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICSSFilter *This);ULONG ( *Release)(ICSSFilter *This);HRESULT ( *SetSite)(ICSSFilter *This, ICSSFilterSite *pSink);HRESULT ( *OnAmbientPropertyChange)(ICSSFilter *This, LONG dispid);};
struct IEnumClassVtbl {HRESULT ( *QueryInterface)(IEnumClass *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumClass *This);ULONG ( *Release)(IEnumClass *This);HRESULT ( *Next)(IEnumClass *This, ULONG celt, CLASSDETAIL *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumClass *This, ULONG celt);HRESULT ( *Reset)(IEnumClass *This);HRESULT ( *Clone)(IEnumClass *This, IEnumClass **ppenum);};
struct IEnumSSRCsVtbl {HRESULT ( *QueryInterface)(IEnumSSRCs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSSRCs *This);ULONG ( *Release)(IEnumSSRCs *This);HRESULT ( *Next)(IEnumSSRCs *This, ULONG cSSRCs, DWORD *pdwSSRCs, ULONG *pcFetched);HRESULT ( *Skip)(IEnumSSRCs *This, ULONG cSSRCs);HRESULT ( *Reset)(IEnumSSRCs *This);HRESULT ( *Clone)(IEnumSSRCs *This, IEnumSSRCs **ppEnum);};
struct IMallocSpyVtbl {HRESULT ( *QueryInterface)(IMallocSpy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMallocSpy *This);ULONG ( *Release)(IMallocSpy *This);ULONG ( *PreAlloc)(IMallocSpy *This, ULONG cbRequest);void *( *PostAlloc)(IMallocSpy *This, void *pActual);void *( *PreFree)(IMallocSpy *This, void *pRequest, BOOL fSpyed);void ( *PostFree)(IMallocSpy *This, BOOL fSpyed);ULONG ( *PreRealloc)(IMallocSpy *This, void *pRequest, ULONG cbRequest, void **ppNewRequest, BOOL fSpyed);void *( *PostRealloc)(IMallocSpy *This, void *pActual, BOOL fSpyed);void *( *PreGetSize)(IMallocSpy *This, void *pRequest, BOOL fSpyed);ULONG ( *PostGetSize)(IMallocSpy *This, ULONG cbActual, BOOL fSpyed);void *( *PreDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed);int ( *PostDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed, int fActual);void ( *PreHeapMinimize)(IMallocSpy *This);void ( *PostHeapMinimize)(IMallocSpy *This);};
struct ISurrogateVtbl {HRESULT ( *QueryInterface)(ISurrogate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISurrogate *This);ULONG ( *Release)(ISurrogate *This);HRESULT ( *LoadDllServer)(ISurrogate *This,  CLSID * Clsid);HRESULT ( *FreeSurrogate)(ISurrogate *This);};
typedef INT ( *LPDIRECTXSETUP)(HWND, LPSTR, DWORD);
typedef UINT ( *LPEECFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef ULONG  MAPIDELETEMAIL(LHANDLE lhSession, ULONG ulUIParam, LPSTR lpszMessageID, FLAGS flFlags, ULONG ulReserved);
typedef DWORD ( *PMIB_GET_FIRST)(ULONG InputDataSize, PVOID InputData, PULONG OutputDataSize, PVOID OutputData);
struct RAS_PARAMETERS {CHAR P_Key[32];RAS_PARAMS_FORMAT P_Type;BYTE P_Attributes;RAS_PARAMS_VALUE P_Value;};
struct _D3DCOLORVALUE {_D3DCOLORVALUE___79F58B462609A8478E0156545A48EE38 __anonymous0;_D3DCOLORVALUE___1870E08CD1297AF1183F2104CF0E68BB __anonymous1;_D3DCOLORVALUE___89D0C02BD3EDF7E42F4E64602AB90C16 __anonymous2;_D3DCOLORVALUE___5FBE30F4B5EDEA02F5A8FF631684CD5C __anonymous3;};
struct _WINTRUST_DATA {DWORD cbStruct;LPVOID pPolicyCallbackData;DWORD dwUIChoice;DWORD fdwRevocationChecks;DWORD dwUnionChoice;_WINTRUST_DATA___9C313098B423B88E9B68ACAEADF971EB __anonymous0;DWORD dwStateAction;HANDLE hWVTStateData;};
struct _wireSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;SAFEARRAYUNION uArrayStructs;SAFEARRAYBOUND rgsabound[1];};
struct srv_comportbuf {SRV_COMPORT_QUEUE queue;OVERLAPPED overlapped;DWORD message_size;BYTE message[1];};
struct srv_subchannel {struct srv_proc *srvproc;HANDLE threadHDL;THREAD threadID;HANDLE ss_handle;HANDLE cs_handle;HANDLE hEvent;BOOL status;struct srv_proc *site_srvproc;DWORD index;struct srv_proc **master_list;};
struct tagCONTROLINFO {ULONG cb;HACCEL hAccel;USHORT cAccel;DWORD dwFlags;};
struct tagEMRANGLEARC {EMR emr;POINTL ptlCenter;DWORD nRadius;FLOAT eStartAngle;FLOAT eSweepAngle;};
struct tagEMRPOLYLINE {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];};
struct tagEXTLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct tagLVFINDINFOA {UINT flags;LPCSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
struct tagMENUBARINFO {DWORD cbSize;RECT rcBar;HMENU hMenu;HWND hwndMenu;int fBarFocused : 1;int fFocused : 1;};
struct tagMIDIINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwSupport;};
struct tagMIDIINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwSupport;};
struct tagNEWCPLINFOA {DWORD dwSize;DWORD dwFlags;DWORD dwHelpContext;LONG lData;HICON hIcon;CHAR szName[32];CHAR szInfo[64];CHAR szHelpFile[128];};
struct tagNEWCPLINFOW {DWORD dwSize;DWORD dwFlags;DWORD dwHelpContext;LONG lData;HICON hIcon;WCHAR szName[32];WCHAR szInfo[64];WCHAR szHelpFile[128];};
struct tagNMTREEVIEWA {NMHDR hdr;UINT action;TVITEMA itemOld;TVITEMA itemNew;POINT ptDrag;};
struct tagNMTREEVIEWW {NMHDR hdr;UINT action;TVITEMW itemOld;TVITEMW itemNew;POINT ptDrag;};
struct tagPAINTSTRUCT {HDC hdc;BOOL fErase;RECT rcPaint;BOOL fRestore;BOOL fIncUpdate;BYTE rgbReserved[32];};
struct tagWAVEINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
struct tagWAVEINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
typedef BOOL ( *DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef int ( *ENHMFENUMPROC)(HDC, HANDLETABLE *,  ENHMETARECORD *, int, LPARAM);
struct IADsValueVtbl {HRESULT ( *QueryInterface)(IADsValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsValue *This);ULONG ( *Release)(IADsValue *This);HRESULT ( *ConvertADsValueToPropertyValue)(IADsValue *This, PADSVALUE pADsValue);HRESULT ( *ConvertPropertyValueToADsValue)(IADsValue *This, PADSVALUE pADsValue);};
struct IEnumGUIDVtbl {HRESULT ( *QueryInterface)(IEnumGUID *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumGUID *This);ULONG ( *Release)(IEnumGUID *This);HRESULT ( *Next)(IEnumGUID *This, ULONG celt, GUID *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumGUID *This, ULONG celt);HRESULT ( *Reset)(IEnumGUID *This);HRESULT ( *Clone)(IEnumGUID *This, IEnumGUID **ppenum);};
struct IQualPropVtbl {HRESULT ( *QueryInterface)(IQualProp *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQualProp *This);ULONG ( *Release)(IQualProp *This);HRESULT ( *get_FramesDroppedInRenderer)(IQualProp *This, int *pcFrames);HRESULT ( *get_FramesDrawn)(IQualProp *This, int *pcFramesDrawn);HRESULT ( *get_AvgFrameRate)(IQualProp *This, int *piAvgFrameRate);HRESULT ( *get_Jitter)(IQualProp *This, int *iJitter);HRESULT ( *get_AvgSyncOffset)(IQualProp *This, int *piAvg);HRESULT ( *get_DevSyncOffset)(IQualProp *This, int *piDev);};
struct IViewSortVtbl {HRESULT ( *QueryInterface)(IViewSort *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewSort *This);ULONG ( *Release)(IViewSort *This);HRESULT ( *GetSortOrder)(IViewSort *This, ULONG *pcValues, ULONG * *    prgColumns, DBSORT * *    prgOrders);HRESULT ( *SetSortOrder)(IViewSort *This, ULONG cValues,  ULONG  *    rgColumns,  DBSORT  *    rgOrders);};
struct IXAConfigVtbl {HRESULT ( *QueryInterface)(IXAConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXAConfig *This);ULONG ( *Release)(IXAConfig *This);HRESULT ( *Initialize)(IXAConfig *This, GUID clsidHelperDll);HRESULT ( *Terminate)(IXAConfig *This);};
struct IXMLErrorVtbl {HRESULT ( *QueryInterface)(IXMLError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLError *This);ULONG ( *Release)(IXMLError *This);HRESULT ( *GetErrorInfo)(IXMLError *This, XML_ERROR *pErrorReturn);};
typedef HRESULT ( *LPDAOBINDFUNC)(ULONG cb, DWORD dwUser, LPVOID *ppData);
typedef UINT ( *LPFNOLEUIHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef int ( *LPWPUQUEUEAPC)(LPWSATHREADID lpThreadId, LPWSAUSERAPC lpfnUserApc, DWORD dwContext, LPINT lpErrno);
typedef DWORD ( *PMIB_GET_NEXT)(ULONG InputDataSize, PVOID InputData, PULONG OutputDataSize, PVOID OutputData);
typedef BOOL ( *PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef HRESULT ( *REGRESTOREALL)(HWND hWnd, PSTR pszTitleString, HKEY hkBckupKey);
typedef void ( *SENDASYNCPROC)(HWND, UINT, DWORD, LRESULT);
struct XACTTRANSINFO {XACTUOW uow;ISOLEVEL isoLevel;ULONG isoFlags;DWORD grfTCSupported;DWORD grfRMSupported;DWORD grfTCSupportedRetaining;DWORD grfRMSupportedRetaining;};
struct _AMVPDATAINFO {DWORD dwSize;DWORD dwMicrosecondsPerField;AMVPDIMINFO amvpDimInfo;DWORD dwPictAspectRatioX;DWORD dwPictAspectRatioY;BOOL bEnableDoubleClock;BOOL bEnableVACT;BOOL bDataIsInterlaced;LONG lHalfLinesOdd;BOOL bFieldPolarityInverted;DWORD dwNumLinesInVREF;LONG lHalfLinesEven;DWORD dwReserved1;};
struct _CERT_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCertEncoded;DWORD cbCertEncoded;PCERT_INFO pCertInfo;HCERTSTORE hCertStore;};
struct _FORM_INFO_1A {DWORD Flags;LPSTR pName;SIZEL Size;RECTL ImageableArea;};
struct _PPP_EAP_INFO {DWORD dwSizeInBytes;DWORD dwEapTypeId;DWORD ( *RasEapBegin)(void **ppWorkBuffer, PPP_EAP_INPUT *pPppEapInput);DWORD ( *RasEapEnd)(void *pWorkBuffer);DWORD ( *RasEapMakeMessage)(void *pWorkBuf, PPP_EAP_PACKET *pReceivePacket, PPP_EAP_PACKET *pSendPacket, DWORD cbSendPacket, PPP_EAP_OUTPUT *pEapOutput, PPP_EAP_INPUT *pEapInput);};
struct _TASK_TRIGGER {WORD cbTriggerSize;WORD Reserved1;WORD wBeginYear;WORD wBeginMonth;WORD wBeginDay;WORD wEndYear;WORD wEndMonth;WORD wEndDay;WORD wStartHour;WORD wStartMinute;DWORD MinutesDuration;DWORD MinutesInterval;DWORD rgFlags;TASK_TRIGGER_TYPE TriggerType;TRIGGER_TYPE_UNION Type;WORD Reserved2;WORD wRandomMinutesInterval;};
struct _tagCOMPONENT {DWORD dwSize;DWORD dwID;int iComponentType;BOOL fChecked;BOOL fDirty;BOOL fNoScroll;COMPPOS cpPos;WCHAR wszFriendlyName[260];WCHAR wszSource[2084];WCHAR wszSubscribedURL[2084];};
struct tagDIBSECTION {BITMAP dsBm;BITMAPINFOHEADER dsBmih;DWORD dsBitfields[3];HANDLE dshSection;DWORD dsOffset;};
struct tagEMRFILLRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;BYTE RgnData[1];};
struct tagLVBKIMAGEA {ULONG ulFlags;HBITMAP hbm;LPSTR pszImage;UINT cchImageMax;int xOffsetPercent;int yOffsetPercent;};
struct tagMIMECPINFO {DWORD dwFlags;UINT uiCodePage;UINT uiFamilyCodePage;WCHAR wszDescription[64];WCHAR wszWebCharset[50];WCHAR wszHeaderCharset[50];WCHAR wszBodyCharset[50];WCHAR wszFixedWidthFont[32];WCHAR wszProportionalFont[32];BYTE bGDICharset;};
struct tagMIXERCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagMIXERCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagNMLISTVIEW {NMHDR hdr;int iItem;int iSubItem;UINT uNewState;UINT uOldState;UINT uChanged;POINT ptAction;LPARAM lParam;};
struct IMultiQIVtbl {HRESULT ( *QueryInterface)(IMultiQI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiQI *This);ULONG ( *Release)(IMultiQI *This);HRESULT ( *QueryMultipleInterfaces)(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);};
struct IPersistVtbl {HRESULT ( *QueryInterface)(IPersist *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersist *This);ULONG ( *Release)(IPersist *This);HRESULT ( *GetClassID)(IPersist *This, CLSID *pClassID);};
struct IROTDataVtbl {HRESULT ( *QueryInterface)(IROTData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IROTData *This);ULONG ( *Release)(IROTData *This);HRESULT ( *GetComparisonData)(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData);};
typedef UINT ( *LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT ( *LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef int ( *LPWSPCONNECT)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, LPINT lpErrno);
typedef ULONG  MAPIFINDNEXT(LHANDLE lhSession, ULONG ulUIParam, LPSTR lpszMessageType, LPSTR lpszSeedMessageID, FLAGS flFlags, ULONG ulReserved, LPSTR lpszMessageID);
typedef ULONG  MAPISENDMAIL(LHANDLE lhSession, ULONG ulUIParam, lpMapiMessage lpMessage, FLAGS flFlags, ULONG ulReserved);
typedef DWORD (*PNTSD_DISASM)(LPDWORD lpOffset, LPSTR lpBuffer, BOOL fShowEfeectiveAddress);
typedef void ( *RASDIALFUNC1)(HRASCONN, UINT, enum tagRASCONNSTATE, DWORD, DWORD);
typedef DWORD ( *RASDIALFUNC2)(DWORD, DWORD, HRASCONN, UINT, enum tagRASCONNSTATE, DWORD, DWORD);
typedef BOOL ( *TASKENUMPROC)(DWORD dwThreadId, WORD hMod16, WORD hTask16, LPARAM lpUserDefined);
typedef void ( *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime);
struct _AMMediaType {GUID majortype;GUID subtype;BOOL bFixedSizeSamples;BOOL bTemporalCompression;ULONG lSampleSize;GUID formattype;IUnknown *pUnk;ULONG cbFormat;BYTE *pbFormat;};
struct _CRL_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCrlEncoded;DWORD cbCrlEncoded;PCRL_INFO pCrlInfo;HCERTSTORE hCertStore;};
struct _D3DTRIANGLE {_D3DLINE___C167AD525C2A16158535093655B0BE27 __anonymous0;_D3DLINE___5E81141D7147E4DA50A203FBA8012470 __anonymous2;_D3DTRIANGLE___B37211E5FB9C3E78EB744E72121563AA __anonymous4;WORD wFlags;};
struct _DDOVERLAYFX {DWORD dwSize;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous0;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous2;DDCOLORKEY dckDestColorkey;DDCOLORKEY dckSrcColorkey;DWORD dwDDFX;DWORD dwFlags;};
struct _RSVP_ADSPEC {QOS_OBJECT_HDR ObjectHdr;AD_GENERAL_PARAMS GeneralParams;ULONG NumberOfServices;CONTROL_SERVICE Services[1];};
struct _SYSTEM_INFO {_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F __anonymous0;DWORD dwPageSize;LPVOID lpMinimumApplicationAddress;LPVOID lpMaximumApplicationAddress;DWORD dwActiveProcessorMask;DWORD dwNumberOfProcessors;DWORD dwProcessorType;DWORD dwAllocationGranularity;WORD wProcessorLevel;WORD wProcessorRevision;};
struct _devicemodeA {BYTE dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 __anonymous0;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;BYTE dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;DWORD dmDisplayFlags;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
struct _devicemodeW {WCHAR dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 __anonymous0;short dmScale;short dmCopies;short dmDefaultSource;short dmPrintQuality;short dmColor;short dmDuplex;short dmYResolution;short dmTTOption;short dmCollate;WCHAR dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;DWORD dmDisplayFlags;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
struct _endropfiles {NMHDR nmhdr;HANDLE hDrop;LONG cp;BOOL fProtected;};
struct _tagHLBWINFO {ULONG cbSize;DWORD grfHLBWIF;RECT rcFramePos;RECT rcDocPos;HLTBINFO hltbinfo;};
struct _usr_entryid {BYTE abFlags[4];MAPIUID muid;ULONG ulVersion;ULONG ulType;DWORD dwEph;};
struct sockaddr_atm {u_short satm_family;ATM_ADDRESS satm_number;ATM_BLLI satm_blli;ATM_BHLI satm_bhli;};
struct tagCWPSTRUCT {LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct tagEXTLOGPEN {DWORD elpPenStyle;DWORD elpWidth;UINT elpBrushStyle;COLORREF elpColor;LONG elpHatch;DWORD elpNumEntries;DWORD elpStyleEntry[1];};
struct tagFORMATETC {CLIPFORMAT cfFormat;DVTARGETDEVICE *ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagRASPBDLGA {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;DWORD dwCallbackId;RASPBDLGFUNCA pCallback;DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;PVOID pvData;SAFEARRAYBOUND rgsabound[1];};
struct tagTVITEMEXA {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;int iIntegral;};
typedef BOOL ( *ANIMATEPROC)(HPENDATA, UINT, UINT, UINT *, LPARAM);
typedef DWORD ( *FM_EXT_PROC)(HWND, WORD, LONG);
typedef DWORD ( *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
typedef SOCKET ( *LPWSPACCEPT)(SOCKET s, struct sockaddr *addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD dwCallbackData, LPINT lpErrno);
typedef ULONG  MAPIDETAILS(LHANDLE lhSession, ULONG ulUIParam, lpMapiRecipDesc lpRecip, FLAGS flFlags, ULONG ulReserved);
typedef BOOL ( *PIS_SERVICE)(USHORT Type, PUCHAR Name, PIPX_SERVICE Service);
struct _COMMCONFIG {DWORD dwSize;WORD wVersion;WORD wReserved;DCB dcb;DWORD dwProviderSubType;DWORD dwProviderOffset;DWORD dwProviderSize;WCHAR wcProviderData[1];};
struct _D3DHVERTEX {DWORD dwFlags;_D3DHVERTEX___81DEDA9DF6ACB3C44C422FDD657F648D __anonymous0;_D3DHVERTEX___D02C4950DEF26FBAA94C7BFFD90117CD __anonymous1;_D3DHVERTEX___422DE5A9C9FEBBB756750EDCDEE4D165 __anonymous2;};
struct _DDBLTBATCH {LPRECT lprDest;LPDIRECTDRAWSURFACE lpDDSSrc;LPRECT lprSrc;DWORD dwFlags;LPDDBLTFX lpDDBltFx;};
struct _DS3DBUFFER {DWORD dwSize;D3DVECTOR vPosition;D3DVECTOR vVelocity;DWORD dwInsideConeAngle;DWORD dwOutsideConeAngle;D3DVECTOR vConeOrientation;LONG lConeOutsideVolume;D3DVALUE flMinDistance;D3DVALUE flMaxDistance;DWORD dwMode;};
struct _RAS_PORT_1 {RAS_PORT_0 rasport0;DWORD LineCondition;DWORD HardwareCondition;DWORD LineSpeed;WORD NumStatistics;WORD NumMediaParms;DWORD SizeMediaParms;RAS_PPP_PROJECTION_RESULT ProjResult;};
struct _tagIMEPROA {HWND hWnd;DATETIME InstDate;UINT wVersion;BYTE szDescription[50];BYTE szName[80];BYTE szOptions[30];};
struct _tagIMEPROW {HWND hWnd;DATETIME InstDate;UINT wVersion;WCHAR szDescription[50];WCHAR szName[80];WCHAR szOptions[30];};
struct _userBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;ULONG cbSize;byte pBuffer[1];};
struct tagAUXCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagAUXCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagCCSTYLEA {DWORD flStyle;DWORD flExtStyle;CHAR szText[256];LANGID lgid;WORD wReserved1;};
struct tagCCSTYLEW {DWORD flStyle;DWORD flExtStyle;WCHAR szText[256];LANGID lgid;WORD wReserved1;};
struct tagHELPINFO {UINT cbSize;int iContextType;int iCtrlId;HANDLE hItemHandle;DWORD dwContextId;POINT MousePos;};
struct tagTARGINFO {DWORD cbSize;DWORD dwFlags;HTRG htrgOwner;WORD cTargets;WORD iTargetLast;TARGET rgTarget[1];};
struct tagTLIBATTR {GUID guid;LCID lcid;SYSKIND syskind;WORD wMajorVerNum;WORD wMinorVerNum;WORD wLibFlags;};
typedef HRESULT ( *EXECUTECAB)(HWND hwnd, PCABINFO pCab, LPVOID pReserved);
typedef SCODE ( *LPFNBUTTON)(ULONG ulUIParam, LPVOID lpvContext, ULONG cbEntryID, LPENTRYID lpSelection, ULONG ulFlags);
struct LUA_COMMON {unsigned short lua_verb;unsigned short lua_verb_length;unsigned short lua_prim_rc;unsigned int lua_sec_rc;unsigned short lua_opcode;unsigned int lua_correlator;unsigned char lua_luname[8];unsigned short lua_extension_list_offset;unsigned short lua_cobol_offset;unsigned int lua_sid;unsigned short lua_max_length;unsigned short lua_data_length;char *lua_data_ptr;unsigned int lua_post_handle;struct LUA_TH lua_th;struct LUA_RH lua_rh;struct LUA_FLAG1 lua_flag1;unsigned char lua_message_type;struct LUA_FLAG2 lua_flag2;unsigned char lua_resv56[7];unsigned char lua_encr_decr_option;};
typedef int ( *MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
struct _CRL_ENTRY {CRYPT_INTEGER_BLOB SerialNumber;FILETIME RevocationDate;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _FMS_LOADA {DWORD dwSize;CHAR szMenuName[40];HMENU hMenu;UINT wMenuDelta;};
struct _FMS_LOADW {DWORD dwSize;WCHAR szMenuName[40];HMENU hMenu;UINT wMenuDelta;};
struct _TRUSTEE_A {struct _TRUSTEE_A *pMultipleTrustee;MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;TRUSTEE_FORM TrusteeForm;TRUSTEE_TYPE TrusteeType;LPSTR ptstrName;};
struct _cpinfoexA {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;CHAR CodePageName[260];};
struct _gettextex {DWORD cb;DWORD flags;UINT codepage;LPCSTR lpDefaultChar;LPBOOL lpUsedDefChar;};
struct _msgfilter {NMHDR nmhdr;UINT msg;WPARAM wParam;LPARAM lParam;};
struct tagNMREBAR {NMHDR hdr;DWORD dwMask;UINT uBand;UINT fStyle;UINT wID;LPARAM lParam;};
struct tagTCITEMA {UINT mask;DWORD dwState;DWORD dwStateMask;LPSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMA {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
typedef ULONG  MAPILOGON(ULONG ulUIParam, LPSTR lpszProfileName, LPSTR lpszPassword, FLAGS flFlags, ULONG ulReserved, LPLHANDLE lplhSession);
struct SchedSess {USHORT sSessType;USHORT sDayMask;FILETIME ftTime;FILETIME ftStart;ULONG ulFlags;TCHAR szPhoneEntry[257];};
struct _HD_ITEMA {UINT mask;int cxy;LPSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;};
struct _SYNC_CFG {SYNC_CARD Card;UCHAR DeviceName[25];PORT_DEF AdapterBase;UCHAR Irq;UCHAR DmaChannel;USHORT McaId;UCHAR McaSlot;PORT_DEF MpcaModePort;UCHAR MpcaModeValue;};
struct _renddata {ATYP atyp;ULONG ulPosition;WORD dxWidth;WORD dyHeight;DWORD dwFlags;};
typedef LRESULT  MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
typedef DWORD ( *PMIB_GET)(ULONG InputDataSize, PVOID InputData, PULONG OutputDataSize, PVOID OutputData);
struct _D3DRECT {_D3DRECT___AB8E8EA9B71D458E94A6241D094F864D __anonymous0;_D3DRECT___5FA8995385DC59DE62F772EF39CB3CD0 __anonymous1;_D3DRECT___5C92D98B6486E2D73C75D371A41BD7BA __anonymous2;_D3DRECT___A06CC334F0A72C7C08028D8694B5ECC1 __anonymous3;};
struct _NOTIFY {DWORD dwFreq;HANDLE hEvent;HWND hwnd;UINT uiMsg;};
struct _SCALAR {SCALARTYPE scType;char *pszName;char *pszValue;DWORD dwValue;time_t tValue;void *pValue;DWORD dwLen;BOOL bStringEquivalence;DWORD fAccess;};
struct tagOIFI {UINT cb;BOOL fMDIApp;HWND hwndFrame;HACCEL haccel;UINT cAccelEntries;};
struct _NSID {DWORD dwSize;unsigned char uchType[16];XTYPE xtype;LONG lTime;union _NSID___19E630ABC4E67F8A7A8368ED53A9D1DA address;};
struct _stat {_dev_t st_dev;_ino_t st_ino;unsigned short st_mode;short st_nlink;short st_uid;short st_gid;_dev_t st_rdev;_off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
struct _NCB {UCHAR ncb_command;UCHAR ncb_retcode;UCHAR ncb_lsn;UCHAR ncb_num;PUCHAR ncb_buffer;WORD ncb_length;UCHAR ncb_callname[16];UCHAR ncb_name[16];UCHAR ncb_rto;UCHAR ncb_sto;void ( *ncb_post)(struct _NCB *);UCHAR ncb_lana_num;UCHAR ncb_cmd_cplt;UCHAR ncb_reserve[10];HANDLE ncb_event;};
struct ldap {struct ldap___C24F30664623ED2C5300C291F5E91248 ld_sb;PCHAR ld_host;ULONG ld_version;UCHAR ld_lberoptions;ULONG ld_deref;ULONG ld_timelimit;ULONG ld_sizelimit;ULONG ld_errno;PCHAR ld_matched;PCHAR ld_error;ULONG ld_msgid;UCHAR Reserved3[25];ULONG ld_cldaptries;ULONG ld_cldaptimeout;ULONG ld_refhoplimit;ULONG ld_options;};
struct stat {_dev_t st_dev;_ino_t st_ino;unsigned short st_mode;short st_nlink;short st_uid;short st_gid;_dev_t st_rdev;_off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
union _RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F {RSVP_FILTERSPEC_V4 FilterSpecV4;RSVP_FILTERSPEC_V6 FilterSpecV6;RSVP_FILTERSPEC_V6_FLOW FilterSpecV6Flow;RSVP_FILTERSPEC_V4_GPI FilterSpecV4Gpi;RSVP_FILTERSPEC_V6_GPI FilterSpecV6Gpi;};
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 {KEY_EVENT_RECORD KeyEvent;MOUSE_EVENT_RECORD MouseEvent;WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;MENU_EVENT_RECORD MenuEvent;FOCUS_EVENT_RECORD FocusEvent;};
struct __MIDL___MIDL_itf_strmif_0074_0005 {DWORD dwFlags;UINT cInstances;UINT nMediaTypes; REGPINTYPES *lpMediaType;UINT nMediums; REGPINMEDIUM *lpMedium; CLSID *clsPinCategory;};
struct _20E271452B0D17C3D7527FFA40499DEB {LLC_CCB Ccb;USHORT usStationId;USHORT usFrameType;UCHAR uchRemoteSap;UCHAR uchXmitReadOption;UCHAR Reserved2[2];ULONG cXmitBufferCount;LLC_TRANSMIT_DESCRIPTOR aXmitBuffer[1];};
struct _42792D5BBA08C54B20EEEC50F78E7D08 {ULONG ulReserved;LPSTR lpszSubject;LPSTR lpszNoteText;LPSTR lpszMessageType;LPSTR lpszDateReceived;LPSTR lpszConversationID;FLAGS flFlags;lpMapiRecipDesc lpOriginator;ULONG nRecipCount;lpMapiRecipDesc lpRecips;ULONG nFileCount;lpMapiFileDesc lpFiles;};
struct _58C2C1BF6568EE28BD9B872E6BA03976 {KSPIN_INTERFACE Interface;KSPIN_MEDIUM Medium;ULONG PinId;HANDLE PinToHandle;KSPRIORITY Priority;};
struct _5C25098378D11CF2DF13A353B46EE415 {DWORD dwFlags;HPALETTE hpal;HWND hwnd;HDC hdc;int xDst;int yDst;int dxDst;int dyDst;LPBITMAPINFOHEADER lpbi;int xSrc;int ySrc;int dxSrc;int dySrc;DWORD dwRate;DWORD dwScale;};
struct _6283893B713888864804C588D87395BB {DWORD dwFlags;LPBITMAPINFOHEADER lpbiOutput;LPARAM lOutput;LPBITMAPINFOHEADER lpbiInput;LPARAM lInput;LONG lStartFrame;LONG lFrameCount;LONG lQuality;LONG lDataRate;LONG lKeyRate;DWORD dwRate;DWORD dwScale;DWORD dwOverheadPerFrame;DWORD dwReserved2;LONG ( *GetData)(LPARAM lInput, LONG lFrame, LPVOID lpBits, LONG len);LONG ( *PutData)(LPARAM lOutput, LONG lFrame, LPVOID lpBits, LONG len);};
struct _71862E795461F7636CC2839B33F62969 {DWORD dwSize;DWORD dwFlags;LPDPSESSIONDESC2 lpSessionDesc;LPDPNAME lpPlayerName;GUID guidSP;LPVOID lpAddress;DWORD dwAddressSize;};
union _85601F4DDA405B3A8D51460B5AB09A10 {PLLC_PARMS pParameterTable;struct _85601F4DDA405B3A8D51460B5AB09A10___E13E322415CFCBFB6D3FEC2B29CD0749 dlc;struct _85601F4DDA405B3A8D51460B5AB09A10___D976F8EFFE6D1361093B26837C23B240 dir;UCHAR auchBuffer[4];ULONG ulParameter;};
struct _9223FF9C4398B5998F8B0B2319A44BF2 {DWORD dwFlags;LPBITMAPINFOHEADER lpbiOutput;LPVOID lpOutput;LPBITMAPINFOHEADER lpbiInput;LPVOID lpInput;LPDWORD lpckid;LPDWORD lpdwFlags;LONG lFrameNum;DWORD dwFrameSize;DWORD dwQuality;LPBITMAPINFOHEADER lpbiPrev;LPVOID lpPrev;};
struct _C149548EC2AEEA8856E6DF2E99B3AF78 {DBINT SizeOfStruct;CHAR Name[31];CHAR ActualName[31];CHAR TableName[31];SHORT Type;DBINT UserType;DBINT MaxLength;BYTE Precision;BYTE Scale;BOOL VarLength;BYTE Null;BYTE CaseSensitive;BYTE Updatable;BOOL Identity;};
struct _E2C7760653C2B7B798640D9B30FB3CE4 {CMC_uint16 ver_spec;CMC_uint16 ver_implem;CMC_object_identifier *character_set;CMC_enum line_term;CMC_string default_service;CMC_string default_user;CMC_enum req_password;CMC_enum req_service;CMC_enum req_user;CMC_boolean ui_avail;CMC_boolean sup_nomkmsgread;CMC_boolean sup_counted_str;};
struct _F10D036DAB5DBA0B4D269BB7AEDCBE71 {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD lParam;LPSTR pszText;int cchText;};
struct _F2AFD13852ACA75C0D1B7913E08A9A3F {LONG cbSize;DWORD dwFlags;HIC hic;DWORD fccType;DWORD fccHandler;LPBITMAPINFO lpbiIn;LPBITMAPINFO lpbiOut;LPVOID lpBitsOut;LPVOID lpBitsPrev;LONG lFrame;LONG lKey;LONG lDataRate;LONG lQ;LONG lKeyCount;LPVOID lpState;LONG cbState;};
typedef SECURITY_STATUS ( *ACQUIRE_CREDENTIALS_HANDLE_FN_A)(SEC_CHAR *, SEC_CHAR *, unsigned int, void *, void *, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
struct IDtcLuSubordinateDtcFactoryVtbl {HRESULT ( *QueryInterface)(IDtcLuSubordinateDtcFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuSubordinateDtcFactory *This);ULONG ( *Release)(IDtcLuSubordinateDtcFactory *This);HRESULT ( *Create)(IDtcLuSubordinateDtcFactory *This, unsigned char *pucLuPair, DWORD cbLuPair, IUnknown *punkTransactionOuter, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOptions, ITransaction **ppTransaction, unsigned char *pTransId, DWORD cbTransId, IDtcLuSubordinateDtcSink *pSubordinateDtcSink, IDtcLuSubordinateDtc **ppSubordinateDtc);};
struct IGetClusterNetInterfaceInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterNetInterfaceInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterNetInterfaceInfo *This);ULONG ( *Release)(IGetClusterNetInterfaceInfo *This);HNETINTERFACE ( *GetNetInterfaceHandle)(IGetClusterNetInterfaceInfo *This, LONG lObjIndex);};
struct IID_IResourceManagerClientVtbl {HRESULT ( *QueryInterface)(IID_IResourceManagerClient *This,  IID * riid, LPVOID *ppv);ULONG ( *AddRef)(IID_IResourceManagerClient *This);ULONG ( *Release)(IID_IResourceManagerClient *This);HRESULT ( *DoRecovery)(DWORD dwRMCookie, char *pszDSN);};
struct IMSAdminCryptoCapabilitiesVtbl {HRESULT ( *QueryInterface)(IMSAdminCryptoCapabilities *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMSAdminCryptoCapabilities *This);ULONG ( *Release)(IMSAdminCryptoCapabilities *This);HRESULT ( *GetProtocols)(IMSAdminCryptoCapabilities *This, DWORD dwBufferSize, unsigned char *pbBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *GetMaximumCipherStrength)(IMSAdminCryptoCapabilities *This, LPDWORD pdwMaximumCipherStrength);HRESULT ( *GetRootCertificates)(IMSAdminCryptoCapabilities *This, DWORD dwBufferSize, unsigned char *pbBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *GetSupportedAlgs)(IMSAdminCryptoCapabilities *This, DWORD dwBufferSize, DWORD *pbBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *SetCAList)(IMSAdminCryptoCapabilities *This, DWORD dwBufferSize, unsigned char *pbBuffer);};
struct IProvideMultipleClassInfoVtbl {HRESULT ( *QueryInterface)(IProvideMultipleClassInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideMultipleClassInfo *This);ULONG ( *Release)(IProvideMultipleClassInfo *This);HRESULT ( *GetClassInfoA)(IProvideMultipleClassInfo *This, ITypeInfo **ppTI);HRESULT ( *GetGUID)(IProvideMultipleClassInfo *This, DWORD dwGuidKind, GUID *pGUID);HRESULT ( *GetMultiTypeInfoCount)(IProvideMultipleClassInfo *This, ULONG *pcti);HRESULT ( *GetInfoOfIndex)(IProvideMultipleClassInfo *This, ULONG iti, DWORD dwFlags, ITypeInfo **pptiCoClass, DWORD *pdwTIFlags, ULONG *pcdispidReserved, IID *piidPrimary, IID *piidSource);};
struct ITransactionExportFactoryVtbl {HRESULT ( *QueryInterface)(ITransactionExportFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionExportFactory *This);ULONG ( *Release)(ITransactionExportFactory *This);HRESULT ( *GetRemoteClassId)(ITransactionExportFactory *This, CLSID *pclsid);HRESULT ( *Create)(ITransactionExportFactory *This, ULONG cbWhereabouts, BYTE *rgbWhereabouts, ITransactionExport **ppExport);};
struct IDirectDrawSurfaceKernelVtbl {HRESULT ( *QueryInterface)(IDirectDrawSurfaceKernel *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurfaceKernel *This);ULONG ( *Release)(IDirectDrawSurfaceKernel *This);HRESULT ( *GetKernelHandle)(IDirectDrawSurfaceKernel *This, LPDWORD);HRESULT ( *ReleaseKernelHandle)(IDirectDrawSurfaceKernel *This);};
struct IInternetSecurityMgrSiteVtbl {HRESULT ( *QueryInterface)(IInternetSecurityMgrSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityMgrSite *This);ULONG ( *Release)(IInternetSecurityMgrSite *This);HRESULT ( *GetWindow)(IInternetSecurityMgrSite *This, HWND *phwnd);HRESULT ( *EnableModeless)(IInternetSecurityMgrSite *This, BOOL fEnable);};
struct IPersistMediaPropertyBagVtbl {HRESULT ( *QueryInterface)(IPersistMediaPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMediaPropertyBag *This);ULONG ( *Release)(IPersistMediaPropertyBag *This);HRESULT ( *GetClassID)(IPersistMediaPropertyBag *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistMediaPropertyBag *This);HRESULT ( *Load)(IPersistMediaPropertyBag *This, IMediaPropertyBag *pPropBag, IErrorLog *pErrorLog);HRESULT ( *Save)(IPersistMediaPropertyBag *This, IMediaPropertyBag *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);};
struct _CERT_SAMPLE_STRUCTURE1_INFO {DWORD dwVersion;WCHAR *pwszField1;WCHAR *pwszField2;LONG lField3;CRYPT_DATA_BLOB blobField4;FILETIME dateField5;};
struct _HTTP_FILTER_PREPROC_HEADERS {BOOL ( *GetHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *SetHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPSTR lpszValue);BOOL ( *AddHeader)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszName, LPSTR lpszValue);DWORD HttpStatus;DWORD dwReserved;};
struct IActiveScriptSiteWindowVtbl {HRESULT ( *QueryInterface)(IActiveScriptSiteWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSiteWindow *This);ULONG ( *Release)(IActiveScriptSiteWindow *This);HRESULT ( *GetWindow)(IActiveScriptSiteWindow *This, HWND *phwnd);HRESULT ( *EnableModeless)(IActiveScriptSiteWindow *This, BOOL fEnable);};
struct IDirectDrawColorControlVtbl {HRESULT ( *QueryInterface)(IDirectDrawColorControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawColorControl *This);ULONG ( *Release)(IDirectDrawColorControl *This);HRESULT ( *GetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);HRESULT ( *SetColorControls)(IDirectDrawColorControl *This, LPDDCOLORCONTROL);};
struct IResourceManagerFactoryVtbl {HRESULT ( *QueryInterface)(IResourceManagerFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceManagerFactory *This);ULONG ( *Release)(IResourceManagerFactory *This);HRESULT ( *Create)(IResourceManagerFactory *This, GUID *pguidRM, CHAR *pszRMName, IResourceManagerSink *pIResMgrSink, IResourceManager **ppResMgr);};
typedef BOOL ( *LPDPENUMCONNECTIONSCALLBACK)(LPCGUID lpguidSP, LPVOID lpConnection, DWORD dwConnectionSize, LPCDPNAME lpName, DWORD dwFlags, LPVOID lpContext);
struct _INTERNET_CACHE_ENTRY_INFOA {DWORD dwStructSize;LPSTR lpszSourceUrlName;LPSTR lpszLocalFileName;DWORD CacheEntryType;DWORD dwUseCount;DWORD dwHitRate;DWORD dwSizeLow;DWORD dwSizeHigh;FILETIME LastModifiedTime;FILETIME ExpireTime;FILETIME LastAccessTime;FILETIME LastSyncTime;LPBYTE lpHeaderInfo;DWORD dwHeaderInfoSize;LPSTR lpszFileExtension;_INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C __anonymous0;};
struct _NTMS_PARTITIONINFORMATIONA {NTMS_GUID PhysicalMedia;NTMS_GUID LogicalMedia;DWORD State;WORD Side;DWORD dwOmidLabelIdLength;BYTE OmidLabelId[255];CHAR szOmidLabelType[64];CHAR szOmidLabelInfo[256];DWORD dwMountCount;DWORD dwAllocateCount;};
struct _NTMS_PARTITIONINFORMATIONW {NTMS_GUID PhysicalMedia;NTMS_GUID LogicalMedia;DWORD State;WORD Side;DWORD dwOmidLabelIdLength;BYTE OmidLabelId[255];WCHAR szOmidLabelType[64];WCHAR szOmidLabelInfo[256];DWORD dwMountCount;DWORD dwAllocateCount;};
typedef SECURITY_STATUS ( *ACCEPT_SECURITY_CONTEXT_FN)(PCredHandle, PCtxtHandle, PSecBufferDesc, unsigned int, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct IGetClusterNetworkInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterNetworkInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterNetworkInfo *This);ULONG ( *Release)(IGetClusterNetworkInfo *This);HNETWORK ( *GetNetworkHandle)(IGetClusterNetworkInfo *This, LONG lObjIndex);};
struct IAMDevMemoryAllocatorVtbl {HRESULT ( *QueryInterface)(IAMDevMemoryAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMDevMemoryAllocator *This);ULONG ( *Release)(IAMDevMemoryAllocator *This);HRESULT ( *GetInfo)(IAMDevMemoryAllocator *This, DWORD *pdwcbTotalFree, DWORD *pdwcbLargestFree, DWORD *pdwcbTotalMemory, DWORD *pdwcbMinimumChunk);HRESULT ( *CheckMemory)(IAMDevMemoryAllocator *This,  BYTE *pBuffer);HRESULT ( *Alloc)(IAMDevMemoryAllocator *This, BYTE **ppBuffer, DWORD *pdwcbBuffer);HRESULT ( *Free)(IAMDevMemoryAllocator *This, BYTE *pBuffer);HRESULT ( *GetDevMemoryObject)(IAMDevMemoryAllocator *This, IUnknown **ppUnkInnner, IUnknown *pUnkOuter);};
struct IAMVfwCompressDialogsVtbl {HRESULT ( *QueryInterface)(IAMVfwCompressDialogs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVfwCompressDialogs *This);ULONG ( *Release)(IAMVfwCompressDialogs *This);HRESULT ( *ShowDialog)(IAMVfwCompressDialogs *This, int iDialog, HWND hwnd);HRESULT ( *GetState)(IAMVfwCompressDialogs *This, LPVOID pState, int *pcbState);HRESULT ( *SetState)(IAMVfwCompressDialogs *This, LPVOID pState, int cbState);HRESULT ( *SendDriverMessage)(IAMVfwCompressDialogs *This, int uMsg, int dw1, int dw2);};
struct IExchExtMessageEventsVtbl {HRESULT ( *QueryInterface)(IExchExtMessageEvents *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtMessageEvents *This);ULONG ( *Release)(IExchExtMessageEvents *This);HRESULT ( *OnRead)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb);HRESULT ( *OnReadComplete)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb, ULONG ulFlags);HRESULT ( *OnWrite)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb);HRESULT ( *OnWriteComplete)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb, ULONG ulFlags);HRESULT ( *OnCheckNames)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb);HRESULT ( *OnCheckNamesComplete)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb, ULONG ulFlags);HRESULT ( *OnSubmit)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb);void ( *OnSubmitComplete)(IExchExtMessageEvents *This, LPEXCHEXTCALLBACK lpeecb, ULONG ulFlags);};
struct IExchExtSessionEventsVtbl {HRESULT ( *QueryInterface)(IExchExtSessionEvents *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtSessionEvents *This);ULONG ( *Release)(IExchExtSessionEvents *This);HRESULT ( *OnDelivery)(IExchExtSessionEvents *This, LPEXCHEXTCALLBACK lpeecb);};
typedef BOOL ( *LPDPENUMSESSIONSCALLBACK2)(LPCDPSESSIONDESC2 lpThisSD, LPDWORD lpdwTimeOut, DWORD dwFlags, LPVOID lpContext);
struct _VIDEO_STREAM_CONFIG_CAPS {GUID guid;ULONG VideoStandard;SIZE InputSize;SIZE MinCroppingSize;SIZE MaxCroppingSize;int CropGranularityX;int CropGranularityY;int CropAlignX;int CropAlignY;SIZE MinOutputSize;SIZE MaxOutputSize;int OutputGranularityX;int OutputGranularityY;int StretchTapsX;int StretchTapsY;int ShrinkTapsX;int ShrinkTapsY;LONGLONG MinFrameInterval;LONGLONG MaxFrameInterval;LONG MinBitsPerSecond;LONG MaxBitsPerSecond;};
struct IASQLOLEBulkCopySinkVtbl {HRESULT ( *QueryInterface)(IASQLOLEBulkCopySink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEBulkCopySink *This);ULONG ( *Release)(IASQLOLEBulkCopySink *This);HRESULT ( *RowsCopied)(IASQLOLEBulkCopySink *This, LPCSTR Message, int Rows);HRESULT ( *BatchImported)(IASQLOLEBulkCopySink *This, LPCSTR Message);};
struct IASQLOLETransferSinkVtbl {HRESULT ( *QueryInterface)(IASQLOLETransferSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETransferSink *This);ULONG ( *Release)(IASQLOLETransferSink *This);HRESULT ( *StatusMessage)(IASQLOLETransferSink *This, LPCSTR szMessage);HRESULT ( *PercentCompleteAtStep)(IASQLOLETransferSink *This, LPCSTR szMessage, int Percent);HRESULT ( *ScriptTransferPercentComplete)(IASQLOLETransferSink *This, LPCSTR szMessage, int Percent);HRESULT ( *TransferPercentComplete)(IASQLOLETransferSink *This, LPCSTR szMessage, int Percent);};
struct IGetClusterGroupInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterGroupInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterGroupInfo *This);ULONG ( *Release)(IGetClusterGroupInfo *This);HGROUP ( *GetGroupHandle)(IGetClusterGroupInfo *This, LONG lObjIndex);};
struct IPersistPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag2 *This);ULONG ( *Release)(IPersistPropertyBag2 *This);HRESULT ( *GetClassID)(IPersistPropertyBag2 *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag2 *This);HRESULT ( *Load)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, IErrorLog *pErrLog);HRESULT ( *Save)(IPersistPropertyBag2 *This, IPropertyBag2 *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);HRESULT ( *IsDirty)(IPersistPropertyBag2 *This);};
struct IRowsetChapterMemberVtbl {HRESULT ( *QueryInterface)(IRowsetChapterMember *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetChapterMember *This);ULONG ( *Release)(IRowsetChapterMember *This);HRESULT ( *IsRowInChapter)(IRowsetChapterMember *This, HCHAPTER hChapter, HROW hRow);};
typedef HRESULT ( *LPD3DENUMDEVICESCALLBACK)(LPGUID lpGuid, LPSTR lpDeviceDescription, LPSTR lpDeviceName, LPD3DDEVICEDESC, LPD3DDEVICEDESC, LPVOID);
typedef BOOL ( *LPDPENUMPLAYERSCALLBACK2)(DPID dpId, DWORD dwPlayerType, LPCDPNAME lpName, DWORD dwFlags, LPVOID lpContext);
typedef BOOL ( *LPDPENUMSESSIONSCALLBACK)(LPDPSESSIONDESC lpDPSessionDesc, LPVOID lpContext, LPDWORD lpdwTimeOut, DWORD dwFlags);
typedef BOOL ( *LPWSPGETOVERLAPPEDRESULT)(SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags, LPINT lpErrno);
typedef BOOL ( *PIMAGEHLP_STATUS_ROUTINE)(IMAGEHLP_STATUS_REASON Reason, LPSTR ImageName, LPSTR DllName, ULONG Va, ULONG Parameter);
typedef BOOL ( *VDMGETMODULESELECTORPROC)(HANDLE, HANDLE, UINT, LPSTR, LPWORD);
struct _CMSG_SIGNER_ENCODE_INFO {DWORD cbSize;PCERT_INFO pCertInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;};
struct _CRYPT_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;PCCERT_CONTEXT pSigningCert;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cMsgCert;PCCERT_CONTEXT *rgpMsgCert;DWORD cMsgCrl;PCCRL_CONTEXT *rgpMsgCrl;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;DWORD dwFlags;DWORD dwInnerContentType;};
struct _IMAGE_OPTIONAL_HEADER64 {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;ULONGLONG ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;ULONGLONG SizeOfStackReserve;ULONGLONG SizeOfStackCommit;ULONGLONG SizeOfHeapReserve;ULONGLONG SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct tagAM_SAMPLE2_PROPERTIES {DWORD cbData;DWORD dwTypeSpecificFlags;DWORD dwSampleFlags;LONG lActual;REFERENCE_TIME tStart;REFERENCE_TIME tStop;DWORD dwStreamId;AM_MEDIA_TYPE *pMediaType;BYTE *pbBuffer;LONG cbBuffer;};
typedef int (*D3DRMUSERVISUALCALLBACK)(LPDIRECT3DRMUSERVISUAL obj, LPVOID arg, D3DRMUSERVISUALREASON reason, LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMVIEWPORT view);
struct IConfigInterleavingVtbl {HRESULT ( *QueryInterface)(IConfigInterleaving *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConfigInterleaving *This);ULONG ( *Release)(IConfigInterleaving *This);HRESULT ( *put_Mode)(IConfigInterleaving *This, InterleavingMode mode);HRESULT ( *get_Mode)(IConfigInterleaving *This, InterleavingMode *pMode);HRESULT ( *put_Interleaving)(IConfigInterleaving *This,  REFERENCE_TIME *prtInterleave,  REFERENCE_TIME *prtPreroll);HRESULT ( *get_Interleaving)(IConfigInterleaving *This, REFERENCE_TIME *prtInterleave, REFERENCE_TIME *prtPreroll);};
struct IExternalConnectionVtbl {HRESULT ( *QueryInterface)(IExternalConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExternalConnection *This);ULONG ( *Release)(IExternalConnection *This);DWORD ( *AddConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved);DWORD ( *ReleaseConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);};
struct IGetClusterNodeInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterNodeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterNodeInfo *This);ULONG ( *Release)(IGetClusterNodeInfo *This);HNODE ( *GetNodeHandle)(IGetClusterNodeInfo *This, LONG lObjIndex);};
struct IPersistPropertyBagVtbl {HRESULT ( *QueryInterface)(IPersistPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistPropertyBag *This);ULONG ( *Release)(IPersistPropertyBag *This);HRESULT ( *GetClassID)(IPersistPropertyBag *This, CLSID *pClassID);HRESULT ( *InitNew)(IPersistPropertyBag *This);HRESULT ( *Load)(IPersistPropertyBag *This, IPropertyBag *pPropBag, IErrorLog *pErrorLog);HRESULT ( *Save)(IPersistPropertyBag *This, IPropertyBag *pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);};
struct IRunningObjectTableVtbl {HRESULT ( *QueryInterface)(IRunningObjectTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunningObjectTable *This);ULONG ( *Release)(IRunningObjectTable *This);HRESULT ( *Register)(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);HRESULT ( *Revoke)(IRunningObjectTable *This, DWORD dwRegister);HRESULT ( *IsRunning)(IRunningObjectTable *This, IMoniker *pmkObjectName);HRESULT ( *GetObjectA)(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);HRESULT ( *NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);HRESULT ( *GetTimeOfLastChange)(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);HRESULT ( *EnumRunning)(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);};
struct IWindowForBindingUIVtbl {HRESULT ( *QueryInterface)(IWindowForBindingUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWindowForBindingUI *This);ULONG ( *Release)(IWindowForBindingUI *This);HRESULT ( *GetWindow)(IWindowForBindingUI *This,  GUID * rguidReason, HWND *phwnd);};
typedef BOOL ( *LPDPENUMADDRESSCALLBACK)( GUID * guidDataType, DWORD dwDataSize, LPCVOID lpData, LPVOID lpContext);
typedef BOOL ( *LPDPENUMPLAYERSCALLBACK)(DPID dpId, LPSTR lpFriendlyName, LPSTR lpFormalName, DWORD dwFlags, LPVOID lpContext);
typedef BOOL ( *PFNSNMPEXTENSIONQUERYEX)(UINT nRequestType, UINT nTransactionId, SnmpVarBindList *pVarBindList, AsnOctetString *pContextInfo, AsnInteger32 *pErrorStatus, AsnInteger32 *pErrorIndex);
struct IAMAudioInputMixerVtbl {HRESULT ( *QueryInterface)(IAMAudioInputMixer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMAudioInputMixer *This);ULONG ( *Release)(IAMAudioInputMixer *This);HRESULT ( *put_Enable)(IAMAudioInputMixer *This, BOOL fEnable);HRESULT ( *get_Enable)(IAMAudioInputMixer *This, BOOL *pfEnable);HRESULT ( *put_Mono)(IAMAudioInputMixer *This, BOOL fMono);HRESULT ( *get_Mono)(IAMAudioInputMixer *This, BOOL *pfMono);HRESULT ( *put_MixLevel)(IAMAudioInputMixer *This, double Level);HRESULT ( *get_MixLevel)(IAMAudioInputMixer *This, double *pLevel);HRESULT ( *put_Pan)(IAMAudioInputMixer *This, double Pan);HRESULT ( *get_Pan)(IAMAudioInputMixer *This, double *pPan);HRESULT ( *put_Loudness)(IAMAudioInputMixer *This, BOOL fLoudness);HRESULT ( *get_Loudness)(IAMAudioInputMixer *This, BOOL *pfLoudness);HRESULT ( *put_Treble)(IAMAudioInputMixer *This, double Treble);HRESULT ( *get_Treble)(IAMAudioInputMixer *This, double *pTreble);HRESULT ( *get_TrebleRange)(IAMAudioInputMixer *This, double *pRange);HRESULT ( *put_Bass)(IAMAudioInputMixer *This, double Bass);HRESULT ( *get_Bass)(IAMAudioInputMixer *This, double *pBass);HRESULT ( *get_BassRange)(IAMAudioInputMixer *This, double *pRange);};
struct IASQLOLEBackupSinkVtbl {HRESULT ( *QueryInterface)(IASQLOLEBackupSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEBackupSink *This);ULONG ( *Release)(IASQLOLEBackupSink *This);HRESULT ( *PercentComplete)(IASQLOLEBackupSink *This, LPCSTR Message, int Percent);HRESULT ( *NextVolume)(IASQLOLEBackupSink *This, LPCSTR Message);HRESULT ( *DumpComplete)(IASQLOLEBackupSink *This, LPCSTR Message);};
struct IActiveScriptStatsVtbl {HRESULT ( *QueryInterface)(IActiveScriptStats *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptStats *This);ULONG ( *Release)(IActiveScriptStats *This);HRESULT ( *GetStat)(IActiveScriptStats *This, DWORD stid, ULONG *pluHi, ULONG *pluLo);HRESULT ( *GetStatEx)(IActiveScriptStats *This,  GUID * guid, ULONG *pluHi, ULONG *pluLo);HRESULT ( *ResetStats)(IActiveScriptStats *This);};
struct IBPCSatelliteTunerVtbl {HRESULT ( *QueryInterface)(IBPCSatelliteTuner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBPCSatelliteTuner *This);ULONG ( *Release)(IBPCSatelliteTuner *This);HRESULT ( *put_Channel)(IBPCSatelliteTuner *This, int lChannel, int lVideoSubChannel, int lAudioSubChannel);HRESULT ( *get_Channel)(IBPCSatelliteTuner *This, int *plChannel, int *plVideoSubChannel, int *plAudioSubChannel);HRESULT ( *ChannelMinMax)(IBPCSatelliteTuner *This, int *lChannelMin, int *lChannelMax);HRESULT ( *put_CountryCode)(IBPCSatelliteTuner *This, int lCountryCode);HRESULT ( *get_CountryCode)(IBPCSatelliteTuner *This, int *plCountryCode);HRESULT ( *put_TuningSpace)(IBPCSatelliteTuner *This, int lTuningSpace);HRESULT ( *get_TuningSpace)(IBPCSatelliteTuner *This, int *plTuningSpace);HRESULT ( *Logon)(IBPCSatelliteTuner *This, HANDLE hCurrentUser);HRESULT ( *Logout)(IBPCSatelliteTuner *This);HRESULT ( *SignalPresent)(IBPCSatelliteTuner *This, int *plSignalStrength);HRESULT ( *put_Mode)(IBPCSatelliteTuner *This, AMTunerModeType lMode);HRESULT ( *get_Mode)(IBPCSatelliteTuner *This, AMTunerModeType *plMode);HRESULT ( *GetAvailableModes)(IBPCSatelliteTuner *This, int *plModes);HRESULT ( *RegisterNotificationCallBack)(IBPCSatelliteTuner *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IBPCSatelliteTuner *This, IAMTunerNotification *pNotify);HRESULT ( *get_DefaultSubChannelTypes)(IBPCSatelliteTuner *This, int *plDefaultVideoType, int *plDefaultAudioType);HRESULT ( *put_DefaultSubChannelTypes)(IBPCSatelliteTuner *This, int lDefaultVideoType, int lDefaultAudioType);HRESULT ( *IsTapingPermitted)(IBPCSatelliteTuner *This);};
struct ICommandPropertiesVtbl {HRESULT ( *QueryInterface)(ICommandProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandProperties *This);ULONG ( *Release)(ICommandProperties *This);HRESULT ( *GetProperties)(ICommandProperties *This,  ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *SetProperties)(ICommandProperties *This, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);};
struct IExchExtUserEventsVtbl {HRESULT ( *QueryInterface)(IExchExtUserEvents *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtUserEvents *This);ULONG ( *Release)(IExchExtUserEvents *This);void ( *OnSelectionChange)(IExchExtUserEvents *This, LPEXCHEXTCALLBACK lpeecb);void ( *OnObjectChange)(IExchExtUserEvents *This, LPEXCHEXTCALLBACK lpeecb);};
struct IProvideClassInfo2Vtbl {HRESULT ( *QueryInterface)(IProvideClassInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideClassInfo2 *This);ULONG ( *Release)(IProvideClassInfo2 *This);HRESULT ( *GetClassInfoA)(IProvideClassInfo2 *This, ITypeInfo **ppTI);HRESULT ( *GetGUID)(IProvideClassInfo2 *This, DWORD dwGuidKind, GUID *pGUID);};
struct IRpcChannelBuffer2Vtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer2 *This);ULONG ( *Release)(IRpcChannelBuffer2 *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer2 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer2 *This);HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer2 *This, DWORD *pdwVersion);};
struct IRpcChannelBuffer3Vtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer3 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer3 *This);ULONG ( *Release)(IRpcChannelBuffer3 *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer3 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer3 *This);HRESULT ( *GetProtocolVersion)(IRpcChannelBuffer3 *This, DWORD *pdwVersion);HRESULT ( *Send)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);HRESULT ( *Receive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus);HRESULT ( *Cancel)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg);HRESULT ( *GetCallContext)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg,  IID * riid, void **pInterface);HRESULT ( *GetDestCtxEx)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *GetState)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pState);HRESULT ( *RegisterAsync)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr);};
struct ISessionPropertiesVtbl {HRESULT ( *QueryInterface)(ISessionProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISessionProperties *This);ULONG ( *Release)(ISessionProperties *This);HRESULT ( *GetProperties)(ISessionProperties *This, ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *SetProperties)(ISessionProperties *This, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);};
struct IShellExecuteHookAVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellExecuteHookA *This);ULONG ( *Release)(IShellExecuteHookA *This);HRESULT ( *Execute)(IShellExecuteHookA *This, LPSHELLEXECUTEINFOA pei);};
struct IShellExecuteHookWVtbl {HRESULT ( *QueryInterface)(IShellExecuteHookW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellExecuteHookW *This);ULONG ( *Release)(IShellExecuteHookW *This);HRESULT ( *Execute)(IShellExecuteHookW *This, LPSHELLEXECUTEINFOW pei);};
struct ITrusteeGroupAdminVtbl {HRESULT ( *QueryInterface)(ITrusteeGroupAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrusteeGroupAdmin *This);ULONG ( *Release)(ITrusteeGroupAdmin *This);HRESULT ( *AddMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee);HRESULT ( *DeleteMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee);HRESULT ( *IsMember)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, TRUSTEE_W *pMemberTrustee, BOOL *pfStatus);HRESULT ( *GetMembers)(ITrusteeGroupAdmin *This, TRUSTEE_W *pMembershipTrustee, ULONG *pcMembers, TRUSTEE_W **prgMembers);HRESULT ( *GetMemberships)(ITrusteeGroupAdmin *This, TRUSTEE_W *pTrustee, ULONG *pcMemberships, TRUSTEE_W **prgMemberships);};
typedef INT ( *LPNSPLOOKUPSERVICENEXT)(HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSETW lpqsResults);
struct _SP_INSTALLWIZARD_DATA {SP_CLASSINSTALL_HEADER ClassInstallHeader;DWORD Flags;HPROPSHEETPAGE DynamicPages[20];DWORD NumDynamicPages;DWORD DynamicPageFlags;DWORD PrivateFlags;LPARAM PrivateData;HWND hwndWizardDlg;};
struct IContinueCallbackVtbl {HRESULT ( *QueryInterface)(IContinueCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IContinueCallback *This);ULONG ( *Release)(IContinueCallback *This);HRESULT ( *FContinue)(IContinueCallback *This);HRESULT ( *FContinuePrinting)(IContinueCallback *This, LONG nCntPrinted, LONG nCurPage, unsigned short *pwszPrintStatus);};
struct IDataAdviseHolderVtbl {HRESULT ( *QueryInterface)(IDataAdviseHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataAdviseHolder *This);ULONG ( *Release)(IDataAdviseHolder *This);HRESULT ( *Advise)(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT ( *Unadvise)(IDataAdviseHolder *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *SendOnDataChange)(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);};
struct IJavaEnumLINEINFOVtbl {HRESULT ( *QueryInterface)(IJavaEnumLINEINFO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IJavaEnumLINEINFO *This);ULONG ( *Release)(IJavaEnumLINEINFO *This);HRESULT ( *Next)(IJavaEnumLINEINFO *This, ULONG celt, LPLINEINFO rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IJavaEnumLINEINFO *This, ULONG celt);HRESULT ( *Reset)(IJavaEnumLINEINFO *This);HRESULT ( *Clone)(IJavaEnumLINEINFO *This, IJavaEnumLINEINFO **ppEnum);HRESULT ( *GetCount)(IJavaEnumLINEINFO *This, ULONG *pcelt);HRESULT ( *GetNext)(IJavaEnumLINEINFO *This, LINEINFO *pli);};
struct IMSAdminBaseSinkWVtbl {HRESULT ( *QueryInterface)(IMSAdminBaseSinkW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMSAdminBaseSinkW *This);ULONG ( *Release)(IMSAdminBaseSinkW *This);HRESULT ( *SinkNotify)(IMSAdminBaseSinkW *This, DWORD dwMDNumElements, MD_CHANGE_OBJECT_W  *    pcoChangeList);HRESULT ( *ShutdownNotify)(IMSAdminBaseSinkW *This);};
struct IRpcChannelBufferVtbl {HRESULT ( *QueryInterface)(IRpcChannelBuffer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRpcChannelBuffer *This);ULONG ( *Release)(IRpcChannelBuffer *This);HRESULT ( *GetBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage,  IID * riid);HRESULT ( *SendReceive)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT ( *FreeBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT ( *GetDestCtx)(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT ( *IsConnected)(IRpcChannelBuffer *This);};
struct IShellIconOverlayVtbl {HRESULT ( *QueryInterface)(IShellIconOverlay *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellIconOverlay *This);ULONG ( *Release)(IShellIconOverlay *This);HRESULT ( *GetOverlayIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIndex);HRESULT ( *GetOverlayIconIndex)(IShellIconOverlay *This, LPCITEMIDLIST pidl, int *pIconIndex);};
struct IWCWizardCallbackVtbl {HRESULT ( *QueryInterface)(IWCWizardCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWCWizardCallback *This);ULONG ( *Release)(IWCWizardCallback *This);HRESULT ( *AddWizardPage)(IWCWizardCallback *This, LONG *hpage);HRESULT ( *EnableNext)(IWCWizardCallback *This, LONG *hpage, BOOL bEnable);};
struct _DEV_BROADCAST_HANDLE {DWORD dbch_size;DWORD dbch_devicetype;DWORD dbch_reserved;HANDLE dbch_handle;DWORD dbch_hdevnotify;GUID dbch_eventguid;LONG dbch_nameoffset;BYTE dbch_data[1];};
struct IDeferredCommandVtbl {HRESULT ( *QueryInterface)(IDeferredCommand *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDeferredCommand *This);ULONG ( *Release)(IDeferredCommand *This);HRESULT ( *Cancel)(IDeferredCommand *This);HRESULT ( *Confidence)(IDeferredCommand *This, int *pConfidence);HRESULT ( *Postpone)(IDeferredCommand *This, REFTIME newtime);HRESULT ( *GetHResult)(IDeferredCommand *This, HRESULT *phrResult);};
struct IDirect3DRMArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMArray *This);ULONG ( *Release)(IDirect3DRMArray *This);DWORD ( *GetSize)(IDirect3DRMArray *This);};
struct IInputObjectSiteVtbl {HRESULT ( *QueryInterface)(IInputObjectSite *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInputObjectSite *This);ULONG ( *Release)(IInputObjectSite *This);HRESULT ( *OnFocusChangeIS)(IInputObjectSite *This, IUnknown *punkObj, BOOL fSetFocus);};
struct IMtsObjectEventsVtbl {HRESULT ( *QueryInterface)(IMtsObjectEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsObjectEvents *This);ULONG ( *Release)(IMtsObjectEvents *This);HRESULT ( *OnObjectActivate)(IMtsObjectEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);HRESULT ( *OnObjectDeactivate)(IMtsObjectEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);HRESULT ( *OnDisableCommit)(IMtsObjectEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);HRESULT ( *OnEnableCommit)(IMtsObjectEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);HRESULT ( *OnSetComplete)(IMtsObjectEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);};
struct IMtsThreadEventsVtbl {HRESULT ( *QueryInterface)(IMtsThreadEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsThreadEvents *This);ULONG ( *Release)(IMtsThreadEvents *This);HRESULT ( *OnThreadStart)(IMtsThreadEvents *This, LONGLONG perfCount, ULONG ThreadID);HRESULT ( *OnThreadTerminate)(IMtsThreadEvents *This, LONGLONG perfCount, ULONG ThreadID);HRESULT ( *OnThreadAssignToActivity)(IMtsThreadEvents *This, LONGLONG perfCount,  GUID * guidActivity, ULONG ThreadID);HRESULT ( *OnThreadUnassignFromActivity)(IMtsThreadEvents *This, LONGLONG perfCount,  GUID * guidActivity, ULONG ThreadID);};
struct IWinInetHttpInfoVtbl {HRESULT ( *QueryInterface)(IWinInetHttpInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetHttpInfo *This);ULONG ( *Release)(IWinInetHttpInfo *This);HRESULT ( *QueryOption)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);HRESULT ( *QueryInfo)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);};
typedef int ( *LPWSCINSTALLPROVIDER)(LPGUID lpProviderId,  WCHAR *lpszProviderDllPath,  LPWSAPROTOCOL_INFOW lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno);
typedef BOOL ( *PFNSNMPEXTENSIONTRAP)(AsnObjectIdentifier *pEnterpriseOid, AsnInteger32 *pGenericTrapId, AsnInteger32 *pSpecificTrapId, AsnTimeticks *pTimeStamp, SnmpVarBindList *pVarBindList);
typedef BOOL  SERVICEWIZARDDLGPROC(HWND hDlg, UINT wMsgID, WPARAM wParam, LPARAM lParam);
struct _ACTRL_ACCESS_ENTRYA {TRUSTEE_A Trustee;ULONG fAccessFlags;ACCESS_RIGHTS Access;ACCESS_RIGHTS ProvSpecificAccess;INHERIT_FLAGS Inheritance;LPSTR lpInheritProperty;};
struct _D3DFINDDEVICESEARCH {DWORD dwSize;DWORD dwFlags;BOOL bHardware;D3DCOLORMODEL dcmColorModel;GUID guid;DWORD dwCaps;D3DPRIMCAPS dpcPrimCaps;};
struct _IMAGELISTDRAWPARAMS {DWORD cbSize;HIMAGELIST himl;int i;HDC hdcDst;int x;int y;int cx;int cy;int xBitmap;int yBitmap;COLORREF rgbBk;COLORREF rgbFg;UINT fStyle;DWORD dwRop;};
struct IAMStreamConfigVtbl {HRESULT ( *QueryInterface)(IAMStreamConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamConfig *This);ULONG ( *Release)(IAMStreamConfig *This);HRESULT ( *SetFormat)(IAMStreamConfig *This, AM_MEDIA_TYPE *pmt);HRESULT ( *GetFormat)(IAMStreamConfig *This, AM_MEDIA_TYPE **ppmt);HRESULT ( *GetNumberOfCapabilities)(IAMStreamConfig *This, int *piCount, int *piSize);HRESULT ( *GetStreamCaps)(IAMStreamConfig *This, int iIndex, AM_MEDIA_TYPE **ppmt, BYTE *pSCC);};
struct ICommDlgBrowserVtbl {HRESULT ( *QueryInterface)(ICommDlgBrowser *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICommDlgBrowser *This);ULONG ( *Release)(ICommDlgBrowser *This);HRESULT ( *OnDefaultCommand)(ICommDlgBrowser *This, struct IShellView *ppshv);HRESULT ( *OnStateChange)(ICommDlgBrowser *This, struct IShellView *ppshv, ULONG uChange);HRESULT ( *IncludeObject)(ICommDlgBrowser *This, struct IShellView *ppshv, LPCITEMIDLIST pidl);};
struct ICommandPersistVtbl {HRESULT ( *QueryInterface)(ICommandPersist *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandPersist *This);ULONG ( *Release)(ICommandPersist *This);HRESULT ( *DeleteCommand)(ICommandPersist *This, DBID *pCommandID);HRESULT ( *GetCurrentCommand)(ICommandPersist *This, DBID **ppCommandID);HRESULT ( *LoadCommand)(ICommandPersist *This, DBID *pCommandID, DWORD dwFlags);HRESULT ( *SaveCommand)(ICommandPersist *This, DBID *pCommandID, DWORD dwFlags);};
struct IFileViewerSiteVtbl {HRESULT ( *QueryInterface)(IFileViewerSite *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFileViewerSite *This);ULONG ( *Release)(IFileViewerSite *This);HRESULT ( *SetPinnedWindow)(IFileViewerSite *This, HWND hwnd);HRESULT ( *GetPinnedWindow)(IFileViewerSite *This, HWND *phwnd);};
struct IMAPIAdviseSinkVtbl {HRESULT ( *QueryInterface)(IMAPIAdviseSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIAdviseSink *This);ULONG ( *Release)(IMAPIAdviseSink *This);ULONG ( *OnNotify)(IMAPIAdviseSink *This, ULONG cNotif, LPNOTIFICATION lpNotifications);};
struct IMixerPinConfigVtbl {HRESULT ( *SetRelativePosition)(ISpoolerHook *This, DWORD dwLeft, DWORD dwTop, DWORD dwRight, DWORD dwBottom);HRESULT ( *GetRelativePosition)(ISpoolerHook *This, DWORD *pdwLeft, DWORD *pdwTop, DWORD *pdwRight, DWORD *pdwBottom);HRESULT ( *SetZOrder)(ISpoolerHook *This, DWORD dwZOrder);HRESULT ( *GetZOrder)(ISpoolerHook *This, DWORD *pdwZOrder);HRESULT ( *SetColorKey)(ISpoolerHook *This, COLORKEY *pColorKey);HRESULT ( *GetColorKey)(ISpoolerHook *This, COLORKEY *pColorKey, DWORD *pColor);HRESULT ( *SetBlendingParameter)(ISpoolerHook *This, DWORD dwBlendingParameter);HRESULT ( *GetBlendingParameter)(ISpoolerHook *This, DWORD *pdwBlendingParameter);HRESULT ( *SetAspectRatioMode)(ISpoolerHook *This, AM_ASPECT_RATIO_MODE amAspectRatioMode);HRESULT ( *GetAspectRatioMode)(ISpoolerHook *This, AM_ASPECT_RATIO_MODE *pamAspectRatioMode);HRESULT ( *SetStreamTransparent)(ISpoolerHook *This, BOOL bStreamTransparent);HRESULT ( *GetStreamTransparent)(ISpoolerHook *This, BOOL *pbStreamTransparent);};
struct IPersistHistoryVtbl {HRESULT ( *QueryInterface)(IPersistHistory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistHistory *This);ULONG ( *Release)(IPersistHistory *This);HRESULT ( *GetClassID)(IPersistHistory *This, CLSID *pClassID);HRESULT ( *LoadHistory)(IPersistHistory *This, IStream *pStream, IBindCtx *pbc);HRESULT ( *SaveHistory)(IPersistHistory *This, IStream *pStream);HRESULT ( *SetPositionCookie)(IPersistHistory *This, DWORD dwPositioncookie);HRESULT ( *GetPositionCookie)(IPersistHistory *This, DWORD *pdwPositioncookie);};
struct IPersistStorageVtbl {HRESULT ( *QueryInterface)(IPersistStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStorage *This);ULONG ( *Release)(IPersistStorage *This);HRESULT ( *GetClassID)(IPersistStorage *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStorage *This);HRESULT ( *InitNew)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Load)(IPersistStorage *This, IStorage *pStg);HRESULT ( *Save)(IPersistStorage *This, IStorage *pStgSave, BOOL fSameAsLoad);HRESULT ( *SaveCompleted)(IPersistStorage *This, IStorage *pStgNew);HRESULT ( *HandsOffStorage)(IPersistStorage *This);};
struct IProgressNotifyVtbl {HRESULT ( *QueryInterface)(IProgressNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProgressNotify *This);ULONG ( *Release)(IProgressNotify *This);HRESULT ( *OnProgress)(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, BOOL fAccurate, BOOL fOwner);};
struct IStdMarshalInfoVtbl {HRESULT ( *QueryInterface)(IStdMarshalInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStdMarshalInfo *This);ULONG ( *Release)(IStdMarshalInfo *This);HRESULT ( *GetClassForHandler)(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);};
typedef BOOL ( *LPDDENUMCALLBACKEXA)(GUID *, LPSTR, LPSTR, LPVOID, HMONITOR);
typedef BOOL ( *LPDPENUMDPCALLBACKA)(LPGUID lpguidSP, LPSTR lpSPName, DWORD dwMajorVersion, DWORD dwMinorVersion, LPVOID lpContext);
typedef HRESULT ( *REGSAVERESTOREONINF)(HWND hWnd, PCSTR pszTitle, PCSTR pszINF, PCSTR pszSection, HKEY hHKLMBackKey, HKEY hHKCUBackKey, DWORD dwFlags);
struct _PROCESS_HEAP_ENTRY {PVOID lpData;DWORD cbData;BYTE cbOverhead;BYTE iRegionIndex;WORD wFlags;_PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 __anonymous0;};
struct tagOBJECTDESCRIPTOR {ULONG cbSize;CLSID clsid;DWORD dwDrawAspect;SIZEL sizel;POINTL pointl;DWORD dwStatus;DWORD dwFullUserTypeName;DWORD dwSrcOfCopy;};
struct IColumnsRowsetVtbl {HRESULT ( *QueryInterface)(IColumnsRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnsRowset *This);ULONG ( *Release)(IColumnsRowset *This);HRESULT ( *GetAvailableColumns)(IColumnsRowset *This, ULONG *pcOptColumns, DBID **prgOptColumns);HRESULT ( *GetColumnsRowset)(IColumnsRowset *This, IUnknown *pUnkOuter, ULONG cOptColumns,  DBID  *    rgOptColumns,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown **ppColRowset);};
struct ICreateDevEnumVtbl {HRESULT ( *QueryInterface)(ICreateDevEnum *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateDevEnum *This);ULONG ( *Release)(ICreateDevEnum *This);HRESULT ( *CreateClassEnumerator)(ICreateDevEnum *This,  CLSID * clsidDeviceClass, IEnumMoniker **ppEnumMoniker, DWORD dwFlags);};
struct IDtcToXaMapperVtbl {HRESULT ( *QueryInterface)(IDtcToXaMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcToXaMapper *This);ULONG ( *Release)(IDtcToXaMapper *This);HRESULT ( *RequestNewResourceManager)(IDtcToXaMapper *This, char *pszDSN, char *pszClientDllName, DWORD *pdwRMCookie);HRESULT ( *TranslateTridToXid)(IDtcToXaMapper *This, DWORD *pdwITransaction, DWORD dwRMCookie, XID *pXid);HRESULT ( *EnlistResourceManager)(IDtcToXaMapper *This, DWORD dwRMCookie, DWORD *pdwITransaction);HRESULT ( *ReleaseResourceManager)(IDtcToXaMapper *This, DWORD dwRMCookie);};
struct IFillLockBytesVtbl {HRESULT ( *QueryInterface)(IFillLockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFillLockBytes *This);ULONG ( *Release)(IFillLockBytes *This);HRESULT ( *FillAppend)(IFillLockBytes *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *FillAt)(IFillLockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *SetFillSize)(IFillLockBytes *This, ULARGE_INTEGER ulSize);HRESULT ( *Terminate)(IFillLockBytes *This, BOOL bCanceled);};
struct IOleClientSiteVtbl {HRESULT ( *QueryInterface)(IOleClientSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleClientSite *This);ULONG ( *Release)(IOleClientSite *This);HRESULT ( *SaveObject)(IOleClientSite *This);HRESULT ( *GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *GetContainer)(IOleClientSite *This, IOleContainer **ppContainer);HRESULT ( *ShowObject)(IOleClientSite *This);HRESULT ( *OnShowWindow)(IOleClientSite *This, BOOL fShow);HRESULT ( *RequestNewObjectLayout)(IOleClientSite *This);};
struct IXATransactionVtbl {HRESULT ( *QueryInterface)(IXATransaction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXATransaction *This);ULONG ( *Release)(IXATransaction *This);HRESULT ( *Commit)(IXATransaction *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(IXATransaction *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(IXATransaction *This, XACTTRANSINFO *pinfo);HRESULT ( *Join)(IXATransaction *This, IXAResourceManager *pIXAResourceManager);HRESULT ( *UnJoin)(IXATransaction *This);};
typedef HRESULT ( *LAUNCHINFSECTIONEX)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
typedef DWORD ( *PMIB_SET_TRAP_INFO)(HANDLE Event, ULONG InputDataSize, PVOID InputData, PULONG OutputDataSize, PVOID OutputData);
typedef BOOL ( *VDMMODULEFIRSTPROC)(HANDLE, HANDLE, LPMODULEENTRY, DEBUGEVENTPROC, LPVOID);
struct tACMDRIVERDETAILSW {DWORD cbStruct;FOURCC fccType;FOURCC fccComp;WORD wMid;WORD wPid;DWORD vdwACM;DWORD vdwDriver;DWORD fdwSupport;DWORD cFormatTags;DWORD cFilterTags;HICON hicon;WCHAR szShortName[32];WCHAR szLongName[128];WCHAR szCopyright[80];WCHAR szLicensing[128];WCHAR szFeatures[512];};
struct tagEMRGRADIENTFILL {EMR emr;RECTL rclBounds;DWORD nVer;DWORD nTri;ULONG ulMode;TRIVERTEX Ver[1];};
typedef BOOL ( *HRCRESULTHOOKPROC)(HREC, HRC, UINT, UINT, UINT, LPVOID);
struct IAVIStreamingVtbl {HRESULT ( *QueryInterface)(IAVIStreaming *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIStreaming *This);ULONG ( *Release)(IAVIStreaming *This);HRESULT ( *Begin)(IAVIStreaming *This, LONG lStart, LONG lEnd, LONG lRate);HRESULT ( *End)(IAVIStreaming *This);};
struct IBitmapEffectVtbl {HRESULT ( *SetSite)(LPUNKNOWN pUnk);HRESULT ( *GetMiscStatusBits)(DWORD *pdwFlags);HRESULT ( *GetSupportedFormatsCount)(unsigned int *pcFormats);HRESULT ( *GetSupportedFormats)(unsigned int cFormats, DWORD *pdwColorDepths);HRESULT ( *Begin)(DWORD dwColorDepth, SIZE *psizeEffect);HRESULT ( *End)();HRESULT ( *DoEffect)(IDirectDrawSurface *pbsIn, IDirectDrawSurface *pbsOut, RECT *prcFull, RECT *prcInvalid);};
struct IConfigAviMuxVtbl {HRESULT ( *QueryInterface)(IConfigAviMux *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConfigAviMux *This);ULONG ( *Release)(IConfigAviMux *This);HRESULT ( *SetMasterStream)(IConfigAviMux *This, LONG iStream);HRESULT ( *GetMasterStream)(IConfigAviMux *This, LONG *pStream);HRESULT ( *SetOutputCompatibilityIndex)(IConfigAviMux *This, BOOL fOldIndex);HRESULT ( *GetOutputCompatibilityIndex)(IConfigAviMux *This, BOOL *pfOldIndex);};
struct IH26XSnapshotVtbl {HRESULT ( *QueryInterface)(IH26XSnapshot *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IH26XSnapshot *This);ULONG ( *Release)(IH26XSnapshot *This);HRESULT ( *getBitmapInfoHeader)(IH26XSnapshot *This, LPBITMAPINFOHEADER lpBmi);HRESULT ( *getSnapshot)(IH26XSnapshot *This, LPBITMAPINFOHEADER lpBmi, unsigned char *pvBuffer, DWORD dwTimeout);};
struct IMAPIProgressVtbl {HRESULT ( *QueryInterface)(IMAPIProgress *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIProgress *This);ULONG ( *Release)(IMAPIProgress *This);HRESULT ( *Progress)(IMAPIProgress *This, ULONG ulValue, ULONG ulCount, ULONG ulTotal);HRESULT ( *GetFlags)(IMAPIProgress *This, ULONG *lpulFlags);HRESULT ( *GetMax)(IMAPIProgress *This, ULONG *lpulMax);HRESULT ( *GetMin)(IMAPIProgress *This, ULONG *lpulMin);HRESULT ( *SetLimits)(IMAPIProgress *This, LPULONG lpulMin, LPULONG lpulMax, LPULONG lpulFlags);};
struct IMtsUserEventVtbl {HRESULT ( *QueryInterface)(IMtsUserEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsUserEvent *This);ULONG ( *Release)(IMtsUserEvent *This);HRESULT ( *OnUserEvent)(IMtsUserEvent *This, LONGLONG perfCount, VARIANT *pvarEvent);};
typedef BOOL ( *LPWSPGETQOSBYNAME)(SOCKET s, LPWSABUF lpQOSName, LPQOS lpQOS, LPINT lpErrno);
typedef ULONG ( *VDMGETPOINTERPROC)(HANDLE, HANDLE, WORD, DWORD, BOOL);
typedef BOOL ( *VDMMODULENEXTPROC)(HANDLE, HANDLE, LPMODULEENTRY, DEBUGEVENTPROC, LPVOID);
struct _TOKEN_STATISTICS {LUID TokenId;LUID AuthenticationId;LARGE_INTEGER ExpirationTime;TOKEN_TYPE TokenType;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;DWORD DynamicCharged;DWORD DynamicAvailable;DWORD GroupCount;DWORD PrivilegeCount;LUID ModifiedId;};
struct tagDRAWITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemAction;UINT itemState;HWND hwndItem;HDC hDC;RECT rcItem;DWORD itemData;};
struct tagEMREXTTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;EMRTEXT emrtext;};
struct tagLOGCOLORSPACEA {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;CHAR lcsFilename[260];};
struct tagLOGCOLORSPACEW {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;WCHAR lcsFilename[260];};
struct tagNEWTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
typedef INT (*DBMSGHANDLE_PROC)(PDBPROCESS, DBINT, INT, INT, LPCSTR, LPCSTR, LPCSTR, DBUSMALLINT);
struct IChannelHookVtbl {HRESULT ( *QueryInterface)(IChannelHook *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChannelHook *This);ULONG ( *Release)(IChannelHook *This);void ( *ClientGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize);void ( *ClientFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer);void ( *ClientNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);void ( *ServerNotify)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);void ( *ServerGetSize)(IChannelHook *This,  GUID * uExtent,  IID * riid, HRESULT hrFault, ULONG *pDataSize);void ( *ServerFillBuffer)(IChannelHook *This,  GUID * uExtent,  IID * riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);};
struct IConvertTypeVtbl {HRESULT ( *QueryInterface)(IConvertType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IConvertType *This);ULONG ( *Release)(IConvertType *This);HRESULT ( *CanConvert)(IConvertType *This, DBTYPE wFromType, DBTYPE wToType, DBCONVERTFLAGS dwConvertFlags);};
struct IMAPIControlVtbl {HRESULT ( *QueryInterface)(IMAPIControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIControl *This);ULONG ( *Release)(IMAPIControl *This);HRESULT ( *GetLastError)(IMAPIControl *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Activate)(IMAPIControl *This, ULONG ulFlags, ULONG ulUIParam);HRESULT ( *GetState)(IMAPIControl *This, ULONG ulFlags, ULONG *lpulState);};
struct IMLangStringVtbl {HRESULT ( *QueryInterface)(IMLangString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangString *This);ULONG ( *Release)(IMLangString *This);HRESULT ( *Sync)(IMLangString *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangString *This, int *plLen);HRESULT ( *SetMLStr)(IMLangString *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangString *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);};
struct IMemInputPinVtbl {HRESULT ( *QueryInterface)(IMemInputPin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemInputPin *This);ULONG ( *Release)(IMemInputPin *This);HRESULT ( *GetAllocator)(IMemInputPin *This, IMemAllocator **ppAllocator);HRESULT ( *NotifyAllocator)(IMemInputPin *This, IMemAllocator *pAllocator, BOOL bReadOnly);HRESULT ( *GetAllocatorRequirements)(IMemInputPin *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *Receive)(IMemInputPin *This, IMediaSample *pSample);HRESULT ( *ReceiveMultiple)(IMemInputPin *This, IMediaSample **pSamples, int nSamples, int *nSamplesProcessed);HRESULT ( *ReceiveCanBlock)(IMemInputPin *This);};
struct ITAMTerminalVtbl {HRESULT ( *QueryInterface)(ITAMTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITAMTerminal *This);ULONG ( *Release)(ITAMTerminal *This);HRESULT ( *ConnectPin)(ITAMTerminal *This, IGraphBuilder *pGraph, IPin *pPin);HRESULT ( *DisconnectPin)(ITAMTerminal *This, IPin *pPin);HRESULT ( *DisconnectTerminal)(ITAMTerminal *This);HRESULT ( *get_AMTAddress)(ITAMTerminal *This, ITAddress **pVal);HRESULT ( *put_AMTAddress)(ITAMTerminal *This, ITAddress *newVal);HRESULT ( *get_MediaFormat)(ITAMTerminal *This, AM_MEDIA_TYPE **pmt);HRESULT ( *put_MediaFormat)(ITAMTerminal *This, AM_MEDIA_TYPE *pmt);HRESULT ( *get_AllocatorProperties)(ITAMTerminal *This, ALLOCATOR_PROPERTIES *pProperties);HRESULT ( *put_AllocatorProperties)(ITAMTerminal *This, ALLOCATOR_PROPERTIES *pProperties);};
struct ITransactionVtbl {HRESULT ( *QueryInterface)(ITransaction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransaction *This);ULONG ( *Release)(ITransaction *This);HRESULT ( *Commit)(ITransaction *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransaction *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransaction *This, XACTTRANSINFO *pinfo);};
struct IWinInetInfoVtbl {HRESULT ( *QueryInterface)(IWinInetInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWinInetInfo *This);ULONG ( *Release)(IWinInetInfo *This);HRESULT ( *QueryOption)(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);};
typedef BOOL ( *LPWPUPOSTMESSAGE)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
typedef BOOL ( *VDMGETSYMBOLPROC)(LPSTR, WORD, DWORD, BOOL, BOOL, LPSTR, PDWORD);
struct _NOTIFYICONDATAA {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;CHAR szTip[64];};
struct _NOTIFYICONDATAW {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;WCHAR szTip[64];};
struct _NTFS_STATISTICS {DWORD LogFileFullExceptions;DWORD OtherExceptions;DWORD MftReads;DWORD MftReadBytes;DWORD MftWrites;DWORD MftWriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftWritesUserLevel;WORD MftWritesFlushForLogFileFull;WORD MftWritesLazyWriter;WORD MftWritesUserRequest;DWORD Mft2Writes;DWORD Mft2WriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B Mft2WritesUserLevel;WORD Mft2WritesFlushForLogFileFull;WORD Mft2WritesLazyWriter;WORD Mft2WritesUserRequest;DWORD RootIndexReads;DWORD RootIndexReadBytes;DWORD RootIndexWrites;DWORD RootIndexWriteBytes;DWORD BitmapReads;DWORD BitmapReadBytes;DWORD BitmapWrites;DWORD BitmapWriteBytes;WORD BitmapWritesFlushForLogFileFull;WORD BitmapWritesLazyWriter;WORD BitmapWritesUserRequest;struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 BitmapWritesUserLevel;DWORD MftBitmapReads;DWORD MftBitmapReadBytes;DWORD MftBitmapWrites;DWORD MftBitmapWriteBytes;WORD MftBitmapWritesFlushForLogFileFull;WORD MftBitmapWritesLazyWriter;WORD MftBitmapWritesUserRequest;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftBitmapWritesUserLevel;DWORD UserIndexReads;DWORD UserIndexReadBytes;DWORD UserIndexWrites;DWORD UserIndexWriteBytes;DWORD LogFileReads;DWORD LogFileReadBytes;DWORD LogFileWrites;DWORD LogFileWriteBytes;struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 Allocate;};
struct _PERF_DATA_BLOCK {WCHAR Signature[4];DWORD LittleEndian;DWORD Version;DWORD Revision;DWORD TotalByteLength;DWORD HeaderLength;DWORD NumObjectTypes;LONG DefaultObject;SYSTEMTIME SystemTime;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;LARGE_INTEGER PerfTime100nSec;DWORD SystemNameLength;DWORD SystemNameOffset;};
struct _X509Certificate {DWORD Version;DWORD SerialNumber[4];ALG_ID SignatureAlgorithm;FILETIME ValidFrom;FILETIME ValidUntil;PSTR pszIssuer;PSTR pszSubject;PctPublicKey *pPublicKey;};
struct tagEMRPOLYDRAW16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];BYTE abTypes[1];};
struct tagMENUITEMINFOA {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;LPSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
struct tagNMTTDISPIFNOA {NMHDR hdr;LPSTR lpszText;char szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
typedef HRESULT ( *DELNODERUNDLL32)(HWND hwnd, HINSTANCE hInst, PSTR pszParams, INT nShow);
struct IAMPlayListVtbl {HRESULT ( *QueryInterface)(IAMPlayList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPlayList *This);ULONG ( *Release)(IAMPlayList *This);HRESULT ( *GetFlags)(IAMPlayList *This, DWORD *pdwFlags);HRESULT ( *GetItemCount)(IAMPlayList *This, DWORD *pdwItems);HRESULT ( *GetItem)(IAMPlayList *This, DWORD dwItemIndex, IAMPlayListItem **ppItem);HRESULT ( *GetRepeatInfo)(IAMPlayList *This, DWORD *pdwRepeatCount, DWORD *pdwRepeatStart, DWORD *pdwRepeatEnd);HRESULT ( *GetScanDuration)(IAMPlayList *This, REFERENCE_TIME *prtScanDuration);};
struct IAlterIndexVtbl {HRESULT ( *QueryInterface)(IAlterIndex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAlterIndex *This);ULONG ( *Release)(IAlterIndex *This);HRESULT ( *AlterIndex)(IAlterIndex *This, DBID *pTableId, DBID *pIndexId, DBID *pNewIndexId, ULONG cPropertySets, DBPROPSET  *    rgPropertySet);};
struct IDropSourceVtbl {HRESULT ( *QueryInterface)(IDropSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropSource *This);ULONG ( *Release)(IDropSource *This);HRESULT ( *QueryContinueDrag)(IDropSource *This, BOOL fEscapePressed, DWORD grfKeyState);HRESULT ( *GiveFeedback)(IDropSource *This, DWORD dwEffect);};
struct IDropTargetVtbl {HRESULT ( *QueryInterface)(IDropTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDropTarget *This);ULONG ( *Release)(IDropTarget *This);HRESULT ( *DragEnter)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragOver)(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT ( *DragLeave)(IDropTarget *This);HRESULT ( *Drop)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);};
struct IEnumIDListVtbl {HRESULT ( *QueryInterface)(IEnumIDList *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IEnumIDList *This);ULONG ( *Release)(IEnumIDList *This);HRESULT ( *Next)(IEnumIDList *This, ULONG celt, LPITEMIDLIST *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumIDList *This, ULONG celt);HRESULT ( *Reset)(IEnumIDList *This);HRESULT ( *Clone)(IEnumIDList *This, IEnumIDList **ppenum);};
struct IMemoryDataVtbl {HRESULT ( *QueryInterface)(IMemoryData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemoryData *This);ULONG ( *Release)(IMemoryData *This);HRESULT ( *SetBuffer)(IMemoryData *This, DWORD cbSize, BYTE *pbData, DWORD dwFlags);HRESULT ( *GetInfo)(IMemoryData *This, DWORD *pdwLength, BYTE **ppbData, DWORD *pcbActualData);HRESULT ( *SetActual)(IMemoryData *This, DWORD cbDataValid);};
struct IOpenRowsetVtbl {HRESULT ( *QueryInterface)(IOpenRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOpenRowset *This);ULONG ( *Release)(IOpenRowset *This);HRESULT ( *OpenRowset)(IOpenRowset *This, IUnknown *pUnkOuter, DBID *pTableID, DBID *pIndexID,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);};
struct IRowsetInfoVtbl {HRESULT ( *QueryInterface)(IRowsetInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetInfo *This);ULONG ( *Release)(IRowsetInfo *This);HRESULT ( *GetProperties)(IRowsetInfo *This,  ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *GetReferencedRowset)(IRowsetInfo *This, ULONG iOrdinal,  IID * riid, IUnknown **ppReferencedRowset);HRESULT ( *GetSpecification)(IRowsetInfo *This,  IID * riid, IUnknown **ppSpecification);};
typedef ULONG  MAPIRESOLVENAME(LHANDLE lhSession, ULONG ulUIParam, LPSTR lpszName, FLAGS flFlags, ULONG ulReserved, lpMapiRecipDesc *lppRecip);
typedef BOOL ( *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);
typedef BOOL ( *PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, DWORD);
struct _D3DRMPICKDESC2 {ULONG ulFaceIdx;LONG lGroupIdx;D3DVECTOR dvPosition;D3DVALUE tu;D3DVALUE tv;D3DVECTOR dvNormal;D3DCOLOR dcColor;};
struct _NMTBCUSTOMDRAW {NMCUSTOMDRAW nmcd;HBRUSH hbrMonoDither;HBRUSH hbrLines;HPEN hpenLines;COLORREF clrText;COLORREF clrMark;COLORREF clrTextHighlight;COLORREF clrBtnFace;COLORREF clrBtnHighlight;COLORREF clrHighlightHotTrack;RECT rcText;int nStringBkMode;int nHLStringBkMode;};
struct _SV2CVW2_PARAMS {DWORD cbSize;IShellView *psvPrev; FOLDERSETTINGS *pfs;IShellBrowser *psbOwner;RECT *prcView; SHELLVIEWID *pvid;HWND hwndView;};
struct tagCWPRETSTRUCT {LRESULT lResult;LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct tagODBC_VS_ARGS { GUID *pguidEvent;DWORD dwFlags;tagODBC_VS_ARGS___0C8F0D999772A4985FC9E94A4859820E __anonymous0;tagODBC_VS_ARGS___8B886DFCDC4562487DC12D65EA88126B __anonymous1;INT RetCode;};
struct IOleWindowVtbl {HRESULT ( *QueryInterface)(IOleWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleWindow *This);ULONG ( *Release)(IOleWindow *This);HRESULT ( *GetWindow)(IOleWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleWindow *This, BOOL fEnterMode);};
struct IRTPStreamVtbl {HRESULT ( *GetAddress)(IAMDirectSound *This, LPBYTE pRtpAddr, LPDWORD pdwRtpAddrLen);HRESULT ( *SetAddress)(IAMDirectSound *This, LPBYTE pRtpAddr, DWORD dwRtpAddrLen);HRESULT ( *GetMulticastScope)(IAMDirectSound *This, LPDWORD pdwMulticastScope);HRESULT ( *SetMulticastScope)(IAMDirectSound *This, DWORD dwMulticastScope);HRESULT ( *SetQualityOfService)(IAMDirectSound *This, QOS *pQOS);HRESULT ( *GetQOSstate)(IAMDirectSound *This, DWORD *pdwQOSstate);HRESULT ( *SetQOSstate)(IAMDirectSound *This, DWORD dwQOSstate);HRESULT ( *GetMulticastLoopBack)(IAMDirectSound *This, DWORD *pdwMulticastLoopBack);HRESULT ( *SetMulticastLoopBack)(IAMDirectSound *This, DWORD dwMulticastLoopBack);};
typedef HRESULT ( *REGSAVERESTORE)(HWND hWnd, PCSTR pszTitleString, HKEY hkBckupKey, PCSTR pcszRootKey, PCSTR pcszSubKey, PCSTR pcszValueName, DWORD dwFlags);
typedef BOOL ( *TASKENUMPROCEX)(DWORD dwThreadId, WORD hMod16, WORD hTask16, PSZ pszModName, PSZ pszFileName, LPARAM lpUserDefined);
union _IPX_MIB_INDEX {IF_TABLE_INDEX InterfaceTableIndex;ROUTING_TABLE_INDEX RoutingTableIndex;STATIC_ROUTES_TABLE_INDEX StaticRoutesTableIndex;SERVICES_TABLE_INDEX ServicesTableIndex;STATIC_SERVICES_TABLE_INDEX StaticServicesTableIndex;};
struct _NETRESOURCE2A {DWORD dwScope;DWORD dwType;DWORD dwUsage;DWORD dwDisplayType;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;NS_INFO ns_info;GUID ServiceType;DWORD dwProtocols;LPINT lpiProtocols;};
struct _SERVICE_INFOA {LPGUID lpServiceType;LPSTR lpServiceName;LPSTR lpComment;LPSTR lpLocale;DWORD dwDisplayHint;DWORD dwVersion;DWORD dwTime;LPSTR lpMachineName;LPSERVICE_ADDRESSES lpServiceAddress;BLOB ServiceSpecificInfo;};
struct _tagSTACKFRAME {ADDRESS AddrPC;ADDRESS AddrReturn;ADDRESS AddrFrame;ADDRESS AddrStack;LPVOID FuncTableEntry;DWORD Params[4];BOOL Far;BOOL Virtual;DWORD Reserved[3];KDHELP KdHelp;};
struct tagEMRFRAMERGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;SIZEL szlStroke;BYTE RgnData[1];};
struct tagEMRPOLYDRAW {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];BYTE abTypes[1];};
struct tagEXTLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct tagQACONTAINER {ULONG cbSize;IOleClientSite *pClientSite;IAdviseSinkEx *pAdviseSink;IPropertyNotifySink *pPropertyNotifySink;IUnknown *pUnkEventSink;DWORD dwAmbientFlags;OLE_COLOR colorFore;OLE_COLOR colorBack;IFont *pFont;IOleUndoManager *pUndoMgr;DWORD dwAppearance;LONG lcid;HPALETTE hpal;IBindHost *pBindHost;IOleControlSite *pOleControlSite;IServiceProvider *pServiceProvider;};
typedef LRESULT ( *ACMDRIVERPROC)(DWORD, HACMDRIVERID, UINT, LPARAM, LPARAM);
struct ImgDelayDescr {DWORD grAttrs;LPCSTR szName;HMODULE *phmod;PImgThunkData pIAT;PCImgThunkData pINT;PCImgThunkData pBoundIAT;PCImgThunkData pUnloadIAT;DWORD dwTimeStamp;};
typedef SOCKET ( *LPWSPJOINLEAF)(SOCKET s,  struct sockaddr *name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, DWORD dwFlags, LPINT lpErrno);
struct _IMAGE_SYMBOL {union _IMAGE_SYMBOL___D31D1BC08928B4879C9F93D88486FFF4 N;DWORD Value;SHORT SectionNumber;WORD Type;BYTE StorageClass;BYTE NumberOfAuxSymbols;};
struct _STARTUPINFOA {DWORD cb;LPSTR lpReserved;LPSTR lpDesktop;LPSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct _avimetaindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];DWORD adwIndex[];};
struct tagINKINGINFO {DWORD cbSize;UINT wFlags;PENTIP tip;RECT rectClip;RECT rectInkStop;HRGN hrgnClip;HRGN hrgnInkStop;};
struct tagSTAT_CHUNK {ULONG idChunk;CHUNK_BREAKTYPE breakType;CHUNKSTATE flags;LCID locale;FULLPROPSPEC attribute;ULONG idChunkSource;ULONG cwcStartSource;ULONG cwcLenSource;};
struct tagWINDOWINFO {DWORD cbSize;RECT rcWindow;RECT rcClient;DWORD dwStyle;DWORD dwExStyle;DWORD dwOtherStuff;UINT cxWindowBorders;UINT cyWindowBorders;ATOM atomWindowType;WORD wCreatorVersion;};
struct IAMTunerVtbl {HRESULT ( *QueryInterface)(IAMTuner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTuner *This);ULONG ( *Release)(IAMTuner *This);HRESULT ( *put_Channel)(IAMTuner *This, int lChannel, int lVideoSubChannel, int lAudioSubChannel);HRESULT ( *get_Channel)(IAMTuner *This, int *plChannel, int *plVideoSubChannel, int *plAudioSubChannel);HRESULT ( *ChannelMinMax)(IAMTuner *This, int *lChannelMin, int *lChannelMax);HRESULT ( *put_CountryCode)(IAMTuner *This, int lCountryCode);HRESULT ( *get_CountryCode)(IAMTuner *This, int *plCountryCode);HRESULT ( *put_TuningSpace)(IAMTuner *This, int lTuningSpace);HRESULT ( *get_TuningSpace)(IAMTuner *This, int *plTuningSpace);HRESULT ( *Logon)(IAMTuner *This, HANDLE hCurrentUser);HRESULT ( *Logout)(IAMTuner *This);HRESULT ( *SignalPresent)(IAMTuner *This, int *plSignalStrength);HRESULT ( *put_Mode)(IAMTuner *This, AMTunerModeType lMode);HRESULT ( *get_Mode)(IAMTuner *This, AMTunerModeType *plMode);HRESULT ( *GetAvailableModes)(IAMTuner *This, int *plModes);HRESULT ( *RegisterNotificationCallBack)(IAMTuner *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IAMTuner *This, IAMTunerNotification *pNotify);};
struct ICommandVtbl {HRESULT ( *QueryInterface)(ICommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommand *This);ULONG ( *Release)(ICommand *This);HRESULT ( *Cancel)(ICommand *This);HRESULT ( *Execute)(ICommand *This, IUnknown *pUnkOuter,  IID * riid, DBPARAMS *pParams, LONG *pcRowsAffected, IUnknown **ppRowset);HRESULT ( *GetDBSession)(ICommand *This,  IID * riid, IUnknown **ppSession);};
struct IExchExtVtbl {HRESULT ( *QueryInterface)(IExchExt *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExt *This);ULONG ( *Release)(IExchExt *This);HRESULT ( *Install)(IExchExt *This, LPEXCHEXTCALLBACK lpeecb, ULONG mecontext, ULONG ulFlags);};
struct IMarshalVtbl {HRESULT ( *QueryInterface)(IMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMarshal *This);ULONG ( *Release)(IMarshal *This);HRESULT ( *GetUnmarshalClass)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT ( *GetMarshalSizeMax)(IMarshal *This,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT ( *MarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT ( *UnmarshalInterface)(IMarshal *This, IStream *pStm,  IID * riid, void **ppv);HRESULT ( *ReleaseMarshalData)(IMarshal *This, IStream *pStm);HRESULT ( *DisconnectObject)(IMarshal *This, DWORD dwReserved);};
typedef int ( *LPWSPSTARTUP)(WORD wVersionRequested, LPWSPDATA lpWSPData, LPWSAPROTOCOL_INFOW lpProtocolInfo, WSPUPCALLTABLE UpcallTable, LPWSPPROC_TABLE lpProcTable);
typedef ULONG  MAPIREADMAIL(LHANDLE lhSession, ULONG ulUIParam, LPSTR lpszMessageID, FLAGS flFlags, ULONG ulReserved, lpMapiMessage *lppMessage);
typedef ULONG  MAPISAVEMAIL(LHANDLE lhSession, ULONG ulUIParam, lpMapiMessage lpMessage, FLAGS flFlags, ULONG ulReserved, LPSTR lpszMessageID);
struct _CTL_CONTEXT {DWORD dwMsgAndCertEncodingType;BYTE *pbCtlEncoded;DWORD cbCtlEncoded;PCTL_INFO pCtlInfo;HCERTSTORE hCertStore;HCRYPTMSG hCryptMsg;BYTE *pbCtlContent;DWORD cbCtlContent;};
struct _DISK_RECORD {LARGE_INTEGER ByteOffset;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;PVOID VirtualAddress;DWORD NumberOfBytes;BYTE DeviceNumber;BOOLEAN ReadRequest;};
struct _HSE_TF_INFO {PFN_HSE_IO_COMPLETION pfnHseIO;PVOID pContext;HANDLE hFile;LPCSTR pszStatusCode;DWORD BytesToWrite;DWORD Offset;PVOID pHead;DWORD HeadLength;PVOID pTail;DWORD TailLength;DWORD dwFlags;};
struct _JOB_INFO_2A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pNotifyName;LPSTR pDatatype;LPSTR pPrintProcessor;LPSTR pParameters;LPSTR pDriverName;LPDEVMODEA pDevMode;LPSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct _enprotected {NMHDR nmhdr;UINT msg;WPARAM wParam;LPARAM lParam;CHARRANGE chrg;};
struct tagCapStatus {UINT uiImageWidth;UINT uiImageHeight;BOOL fLiveWindow;BOOL fOverlayWindow;BOOL fScale;POINT ptScroll;BOOL fUsingDefaultPalette;BOOL fAudioHardware;BOOL fCapFileExists;DWORD dwCurrentVideoFrame;DWORD dwCurrentVideoFramesDropped;DWORD dwCurrentWaveSamples;DWORD dwCurrentTimeElapsedMS;HPALETTE hPalCurrent;BOOL fCapturingNow;DWORD dwReturn;UINT wNumVideoAllocated;UINT wNumAudioAllocated;};
struct tagERRORINFO {HRESULT hrError;DWORD dwMinor;CLSID clsid;IID iid;DISPID dispid;};
struct tagVIDEOINFO {RECT rcSource;RECT rcTarget;DWORD dwBitRate;DWORD dwBitErrorRate;REFERENCE_TIME AvgTimePerFrame;BITMAPINFOHEADER bmiHeader;tagVIDEOINFO___196810F3CC10C5DC0D5071702E91BD7A __anonymous0;};
struct IDCInfoVtbl {HRESULT ( *QueryInterface)(IDCInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDCInfo *This);ULONG ( *Release)(IDCInfo *This);HRESULT ( *GetInfo)(IDCInfo *This, ULONG cInfo, DCINFOTYPE  *    rgeInfoType, DCINFO **prgInfo);HRESULT ( *SetInfo)(IDCInfo *This, ULONG cInfo, DCINFO  *    rgInfo);};
typedef UINT ( *LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef SOCKET ( *LPWSPSOCKET)(int af, int type, int protocol, LPWSAPROTOCOL_INFOW lpProtocolInfo, GROUP g, DWORD dwFlags, LPINT lpErrno);
typedef HDDEDATA ( *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);
struct _AppBarData {DWORD cbSize;HWND hWnd;UINT uCallbackMessage;UINT uEdge;RECT rc;LPARAM lParam;};
struct _CounterDef {DWORD iCounterTitleOffset;COUNTERTYPE ctStatistic;LPMAPIFOLDER lpFolder;PERIODTYPE perPeriod;DWORD cMinutes;LPCOUNTER *lppcntUserCounter;DWORD dwUserCounterType;DWORD dwDetailLevel;DWORD dwDefaultScale;};
struct _charformat {UINT cbSize;DWORD dwMask;DWORD dwEffects;LONG yHeight;LONG yOffset;COLORREF crTextColor;BYTE bCharSet;BYTE bPitchAndFamily;char szFaceName[32];};
struct _paraformat {UINT cbSize;DWORD dwMask;WORD wNumbering;WORD wEffects;LONG dxStartIndent;LONG dxRightIndent;LONG dxOffset;WORD wAlignment;SHORT cTabCount;LONG rgxTabs[32];};
typedef LRESULT ( *DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);
typedef HDDEDATA  FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2);
typedef BOOL ( *ORASADFUNC)(HWND, LPSTR, DWORD, LPDWORD);
struct _D3DLIGHT2 {DWORD dwSize;D3DLIGHTTYPE dltType;D3DCOLORVALUE dcvColor;D3DVECTOR dvPosition;D3DVECTOR dvDirection;D3DVALUE dvRange;D3DVALUE dvFalloff;D3DVALUE dvAttenuation0;D3DVALUE dvAttenuation1;D3DVALUE dvAttenuation2;D3DVALUE dvTheta;D3DVALUE dvPhi;DWORD dwFlags;};
struct _DRAGINFOA {UINT uSize;POINT pt;BOOL fNC;LPSTR lpFileList;DWORD grfKeyState;};
struct _D3DLIGHT {DWORD dwSize;D3DLIGHTTYPE dltType;D3DCOLORVALUE dcvColor;D3DVECTOR dvPosition;D3DVECTOR dvDirection;D3DVALUE dvRange;D3DVALUE dvFalloff;D3DVALUE dvAttenuation0;D3DVALUE dvAttenuation1;D3DVALUE dvAttenuation2;D3DVALUE dvTheta;D3DVALUE dvPhi;};
struct tagDBPROP {DBPROPID dwPropertyID;DBPROPOPTIONS dwOptions;DBPROPSTATUS dwStatus;DBID colid;VARIANT vValue;};
struct DIEFFECT {DWORD dwSize;DWORD dwFlags;DWORD dwDuration;DWORD dwSamplePeriod;DWORD dwGain;DWORD dwTriggerButton;DWORD dwTriggerRepeatInterval;DWORD cAxes;LPDWORD rgdwAxes;LPLONG rglDirection;LPDIENVELOPE lpEnvelope;DWORD cbTypeSpecificParams;LPVOID lpvTypeSpecificParams;};
struct _LLC_CCB {UCHAR uchAdapterNumber;UCHAR uchDlcCommand;UCHAR uchDlcStatus;UCHAR uchReserved1;struct _LLC_CCB *pNext;ULONG ulCompletionFlag;CCB_PARMS u;HANDLE hCompletionEvent;UCHAR uchReserved2;UCHAR uchReadFlag;USHORT usReserved3;};
typedef BOOL ( *DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef LRESULT ( *WNDPROC)(HWND, UINT, WPARAM, LPARAM);
struct _BUFFER {DWORD ObjectType;DWORD NetworkID;DWORD BufferSize;DWORD TotalBytes;DWORD TotalFrames;LPVOID hNetwork;SYSTEMTIME TimeOfCapture;LPBTE StatFrameBTE;DWORD Reserved[5];DWORD HeadBTEIndex;DWORD TailBTEIndex;DWORD NumberOfBuffers;DWORD NumberOfBuffersUsed;DWORD Pad[4];BTE bte[];};
struct _enlink {NMHDR nmhdr;UINT msg;WPARAM wParam;LPARAM lParam;CHARRANGE chrg;};
struct ldapmsg {ULONG lm_msgid;ULONG lm_msgtype;PVOID lm_ber;struct ldapmsg *lm_chain;struct ldapmsg *lm_next;ULONG lm_time;PLDAP Connection;PVOID Request;ULONG lm_returncode;USHORT lm_referral;BOOLEAN lm_chased;BOOLEAN lm_eom;};
struct tagDEC {USHORT wReserved;tagDEC___64EC678C49E7BE49873AFBFB7A849D34 __anonymous0;ULONG Hi32;union {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous1;ULONGLONG Lo64;};};
struct _BTE {DWORD ObjectType;DWORD Flags;LPBTE KrnlModeNext;LPBTE Next;LPFRAME UserModeBuffer;LPVOID KrnlModeBuffer;DWORD Length;DWORD ByteCount;DWORD FrameCount;WORD DropCount;WORD TransfersPended;};
union _7CE74CE74CF979B93E9F8A54217A4B92___E492AAD3BDB014670AF7883727C49B32 {smiINT sNumber;smiUINT32 uNumber;smiCNTR64 hNumber;smiOCTETS string;smiOID oid;smiBYTE empty;};
union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4 {ERROR_NOTIFICATION err;NEWMAIL_NOTIFICATION newmail;OBJECT_NOTIFICATION obj;TABLE_NOTIFICATION tab;EXTENDED_NOTIFICATION ext;STATUS_OBJECT_NOTIFICATION statobj;};
union _action___4F51FE4D2EA0AB41DD903A61846FC72C {struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___4E360FE05B55FC1B7DE1F318AE520C50 actMoveCopy;struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___5B8C33BBDA1E90A3135660F6C2060421 actReply;struct _action___4F51FE4D2EA0AB41DD903A61846FC72C___6D0E5E48C7AAB79E1BA653B8A7C28F8A actDeferAction;SCODE scBounceCode;LPADRLIST lpadrlist;SPropValue propTag;};
union tpashdr___DE5CBA54BA8BE874C4E36EB888298902 {struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___768A8DAD4940E326AEC35D738F467B21 B0F;struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___0C84567BC15175E871F7BC59643BADDE B0H;struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___028BC7EA7492FE4A8CE916CF8CE81F9F B0J;struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___90D28FF8396C2E5717E88A87F7FA367B B0L;struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___4B76563A33A04C2B484E004C44890E3C B0N;struct tpashdr___DE5CBA54BA8BE874C4E36EB888298902___68B743954C8238C4EC931D8D0416CEBE X1D;};
struct _033FDDF8C92E552042E0320A022B0EBA {DWORD RecordLength;WORD MajorVersion;WORD MinorVersion;DWORDLONG FileReferenceNumber;DWORDLONG ParentFileReferenceNumber;USN Usn;LARGE_INTEGER TimeStamp;DWORD Reason;DWORD SecurityId;DWORD FileAttributes;WORD FileNameLength;WCHAR FileName[1];};
typedef BOOL ( *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags,  void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);
struct IInternetHostSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetHostSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetHostSecurityManager *This);ULONG ( *Release)(IInternetHostSecurityManager *This);HRESULT ( *GetSecurityId)(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD dwReserved);HRESULT ( *ProcessUrlAction)(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetHostSecurityManager *This,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);};
typedef SECURITY_STATUS ( *INITIALIZE_SECURITY_CONTEXT_FN_A)(PCredHandle, PCtxtHandle, SEC_CHAR *, unsigned int, unsigned int, unsigned int, PSecBufferDesc, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct ITransactionVoterNotifyAsyncVtbl {HRESULT ( *QueryInterface)(ITransactionVoterNotifyAsync *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionVoterNotifyAsync *This);ULONG ( *Release)(ITransactionVoterNotifyAsync *This);HRESULT ( *Committed)(ITransactionVoterNotifyAsync *This, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *Aborted)(ITransactionVoterNotifyAsync *This, BOID *pboidReason, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *HeuristicDecision)(ITransactionVoterNotifyAsync *This, DWORD dwDecision, BOID *pboidReason, HRESULT hr);HRESULT ( *Indoubt)(ITransactionVoterNotifyAsync *This);HRESULT ( *VoteRequest)(ITransactionVoterNotifyAsync *This, ITransactionVoterBallotAsync *pVoterBallot);};
struct ITransactionOutcomeEventsVtbl {HRESULT ( *QueryInterface)(ITransactionOutcomeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionOutcomeEvents *This);ULONG ( *Release)(ITransactionOutcomeEvents *This);HRESULT ( *Committed)(ITransactionOutcomeEvents *This, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *Aborted)(ITransactionOutcomeEvents *This, BOID *pboidReason, BOOL fRetaining, XACTUOW *pNewUOW, HRESULT hr);HRESULT ( *HeuristicDecision)(ITransactionOutcomeEvents *This, DWORD dwDecision, BOID *pboidReason, HRESULT hr);HRESULT ( *Indoubt)(ITransactionOutcomeEvents *This);};
struct ITransactionResourceAsyncVtbl {HRESULT ( *QueryInterface)(ITransactionResourceAsync *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionResourceAsync *This);ULONG ( *Release)(ITransactionResourceAsync *This);HRESULT ( *PrepareRequest)(ITransactionResourceAsync *This, BOOL fRetaining, DWORD grfRM, BOOL fWantMoniker, BOOL fSinglePhase);HRESULT ( *CommitRequest)(ITransactionResourceAsync *This, DWORD grfRM, XACTUOW *pNewUOW);HRESULT ( *AbortRequest)(ITransactionResourceAsync *This, BOID *pboidReason, BOOL fRetaining, XACTUOW *pNewUOW);HRESULT ( *TMDown)(ITransactionResourceAsync *This);};
struct IDirect3DRMViewportArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMViewportArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMViewportArray *This);ULONG ( *Release)(IDirect3DRMViewportArray *This);DWORD ( *GetSize)(IDirect3DRMViewportArray *This);HRESULT ( *GetElement)(IDirect3DRMViewportArray *This, DWORD index, LPDIRECT3DRMVIEWPORT *);};
struct IExchExtModelessCallbackVtbl {HRESULT ( *QueryInterface)(IExchExtModelessCallback *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtModelessCallback *This);ULONG ( *Release)(IExchExtModelessCallback *This);HRESULT ( *EnableModeless)(IExchExtModelessCallback *This, HWND hwnd, BOOL fEnable);HRESULT ( *AddWindow)(IExchExtModelessCallback *This);HRESULT ( *ReleaseWindow)(IExchExtModelessCallback *This);};
struct IExchangeRuleExtCallbackVtbl {HRESULT ( *QueryInterface)(IExchangeRuleExtCallback *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchangeRuleExtCallback *This);ULONG ( *Release)(IExchangeRuleExtCallback *This);HRESULT ( *GetVersion)(IExchangeRuleExtCallback *This, ULONG *pulVersion, ULONG ulFlags);HRESULT ( *GetWindow)(IExchangeRuleExtCallback *This, HWND *phwnd);HRESULT ( *GetSession)(IExchangeRuleExtCallback *This, LPMAPISESSION *ppses);};
typedef BOOL ( *PREAD_PROCESS_MEMORY_ROUTINE)(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, DWORD nSize, LPDWORD lpNumberOfBytesRead);
typedef BOOL ( *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
typedef BOOL ( *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey);
struct IDirect3DRMDeviceArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMDeviceArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMDeviceArray *This);ULONG ( *Release)(IDirect3DRMDeviceArray *This);DWORD ( *GetSize)(IDirect3DRMDeviceArray *This);HRESULT ( *GetElement)(IDirect3DRMDeviceArray *This, DWORD index, LPDIRECT3DRMDEVICE *);};
struct IDirect3DRMObjectArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMObjectArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMObjectArray *This);ULONG ( *Release)(IDirect3DRMObjectArray *This);DWORD ( *GetSize)(IDirect3DRMObjectArray *This);HRESULT ( *GetElement)(IDirect3DRMObjectArray *This, DWORD index, LPDIRECT3DRMOBJECT *);};
struct IDirect3DRMVisualArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMVisualArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMVisualArray *This);ULONG ( *Release)(IDirect3DRMVisualArray *This);DWORD ( *GetSize)(IDirect3DRMVisualArray *This);HRESULT ( *GetElement)(IDirect3DRMVisualArray *This, DWORD index, LPDIRECT3DRMVISUAL *);};
struct IExchExtPropertySheetsVtbl {HRESULT ( *QueryInterface)(IExchExtPropertySheets *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtPropertySheets *This);ULONG ( *Release)(IExchExtPropertySheets *This);ULONG ( *GetMaxPageCount)(IExchExtPropertySheets *This, ULONG ulFlags);HRESULT ( *GetPages)(IExchExtPropertySheets *This, LPEXCHEXTCALLBACK lpeecb, ULONG ulFlags, LPPROPSHEETPAGEA lppsp, ULONG *lpcpsp);void ( *FreePages)(IExchExtPropertySheets *This, LPPROPSHEETPAGEA lppsp, ULONG ulFlags, ULONG cpsp);};
struct IDirect3DRMFrameArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMFrameArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMFrameArray *This);ULONG ( *Release)(IDirect3DRMFrameArray *This);DWORD ( *GetSize)(IDirect3DRMFrameArray *This);HRESULT ( *GetElement)(IDirect3DRMFrameArray *This, DWORD index, LPDIRECT3DRMFRAME *);};
struct IDirect3DRMLightArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMLightArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMLightArray *This);ULONG ( *Release)(IDirect3DRMLightArray *This);DWORD ( *GetSize)(IDirect3DRMLightArray *This);HRESULT ( *GetElement)(IDirect3DRMLightArray *This, DWORD index, LPDIRECT3DRMLIGHT *);};
struct IMtsTransactionEventsVtbl {HRESULT ( *QueryInterface)(IMtsTransactionEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsTransactionEvents *This);ULONG ( *Release)(IMtsTransactionEvents *This);HRESULT ( *OnTransactionStart)(IMtsTransactionEvents *This, LONGLONG perfCount,  GUID * guidTx,  GUID * tsid, BOOL fRoot);HRESULT ( *OnTransactionPrepared)(IMtsTransactionEvents *This, LONGLONG perfCount,  GUID * guidTx, BOOL fVoteYes);HRESULT ( *OnTransactionAborted)(IMtsTransactionEvents *This, LONGLONG perfCount,  GUID * guidTx);};
struct IDirect3DRMFaceArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMFaceArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMFaceArray *This);ULONG ( *Release)(IDirect3DRMFaceArray *This);DWORD ( *GetSize)(IDirect3DRMFaceArray *This);HRESULT ( *GetElement)(IDirect3DRMFaceArray *This, DWORD index, LPDIRECT3DRMFACE *);};
struct IRowsetChangeExtInfoVtbl {HRESULT ( *QueryInterface)(IRowsetChangeExtInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetChangeExtInfo *This);ULONG ( *Release)(IRowsetChangeExtInfo *This);HRESULT ( *GetOriginalRow)(IRowsetChangeExtInfo *This, HCHAPTER hReserved, HROW hRow, HROW *phRowOriginal);HRESULT ( *GetPendingColumns)(IRowsetChangeExtInfo *This, HCHAPTER hReserved, HROW hRow, ULONG cColumnOrdinals,  ULONG  *    rgiOrdinals, DBPENDINGSTATUS  *    rgColumnStatus);};
struct ITransactionResourceVtbl {HRESULT ( *QueryInterface)(ITransactionResource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionResource *This);ULONG ( *Release)(ITransactionResource *This);HRESULT ( *PrepareRequest)(ITransactionResource *This, BOOL fRetaining, DWORD grfRM, BOOL fWantMoniker, BOOL fSinglePhase);HRESULT ( *CommitRequest)(ITransactionResource *This, DWORD grfRM, XACTUOW *pNewUOW);HRESULT ( *AbortRequest)(ITransactionResource *This, BOID *pboidReason, BOOL fRetaining, XACTUOW *pNewUOW);HRESULT ( *TMDown)(ITransactionResource *This);};
typedef BOOL ( *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, HCRYPTKEY *phEncryptKey);
typedef BOOL ( *VDMGETSELECTORMODULEPROC)(HANDLE, HANDLE, WORD, PUINT, LPSTR, UINT, LPSTR, UINT);
struct IExchangeRuleActionVtbl {HRESULT ( *QueryInterface)(IExchangeRuleAction *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeRuleAction *This);ULONG ( *Release)(IExchangeRuleAction *This);HRESULT ( *ActionCount)(IExchangeRuleAction *This, ULONG *lpcActions);HRESULT ( *GetAction)(IExchangeRuleAction *This, ULONG ulActionNumber, LARGE_INTEGER *lpruleid, LPACTION *lppAction);};
struct IInstallVideoCodecsVtbl {HRESULT ( *QueryInterface)(IInstallVideoCodecs *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallVideoCodecs *This);ULONG ( *Release)(IInstallVideoCodecs *This);HRESULT ( *AddVCMFormat)(IInstallVideoCodecs *This, PVIDCAP_INFO pVidCapInfo);HRESULT ( *RemoveVCMFormat)(IInstallVideoCodecs *This, PVIDCAP_INFO pVidCapInfo);HRESULT ( *ReorderFormats)(IInstallVideoCodecs *This, PVIDCAP_INFO_LIST pVidCapInfoList);HRESULT ( *EnumFormats)(IInstallVideoCodecs *This, PVIDCAP_INFO_LIST *ppVidCapInfoList);HRESULT ( *FreeBuffer)(IInstallVideoCodecs *This, LPVOID lpBuffer);};
struct IMAPIFormAdviseSinkVtbl {HRESULT ( *QueryInterface)(IMAPIFormAdviseSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFormAdviseSink *This);ULONG ( *Release)(IMAPIFormAdviseSink *This);HRESULT ( *OnChange)(IMAPIFormAdviseSink *This, ULONG ulDir);HRESULT ( *OnActivateNext)(IMAPIFormAdviseSink *This, LPCSTR lpszMessageClass, ULONG ulMessageStatus, ULONG ulMessageFlags, LPPERSISTMESSAGE *ppPersistMessage);};
struct IPropertySetStorageVtbl {HRESULT ( *QueryInterface)(IPropertySetStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertySetStorage *This);ULONG ( *Release)(IPropertySetStorage *This);HRESULT ( *Create)(IPropertySetStorage *This,  FMTID * rfmtid,  CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Open)(IPropertySetStorage *This,  FMTID * rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT ( *Delete)(IPropertySetStorage *This,  FMTID * rfmtid);HRESULT ( *Enum)(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum);};
typedef INT ( *LPNSPLOOKUPSERVICEBEGIN)(LPGUID lpProviderId, LPWSAQUERYSETW lpqsRestrictions, LPWSASERVICECLASSINFOW lpServiceClassInfo, DWORD dwControlFlags, LPHANDLE lphLookup);
struct _NTMS_DRIVEINFORMATIONA {DWORD Number;DWORD State;NTMS_GUID DriveType;CHAR szDeviceName[64];CHAR szSerialNumber[32];CHAR szRevision[32];WORD ScsiPort;WORD ScsiBus;WORD ScsiTarget;WORD ScsiLun;DWORD dwMountCount;SYSTEMTIME LastCleanedTs;NTMS_GUID SavedPartitionId;NTMS_GUID Library;GUID Reserved;DWORD dwDeferDismountDelay;};
struct _NTMS_DRIVEINFORMATIONW {DWORD Number;DWORD State;NTMS_GUID DriveType;WCHAR szDeviceName[64];WCHAR szSerialNumber[32];WCHAR szRevision[32];WORD ScsiPort;WORD ScsiBus;WORD ScsiTarget;WORD ScsiLun;DWORD dwMountCount;SYSTEMTIME LastCleanedTs;NTMS_GUID SavedPartitionId;NTMS_GUID Library;GUID Reserved;DWORD dwDeferDismountDelay;};
struct _SP_DEVINSTALL_PARAMS_A {DWORD cbSize;DWORD Flags;DWORD FlagsEx;HWND hwndParent;PSP_FILE_CALLBACK_A InstallMsgHandler;PVOID InstallMsgHandlerContext;HSPFILEQ FileQueue;DWORD ClassInstallReserved;DWORD Reserved;CHAR DriverPath[260];};
struct _SP_DEVINSTALL_PARAMS_W {DWORD cbSize;DWORD Flags;DWORD FlagsEx;HWND hwndParent;PSP_FILE_CALLBACK_A InstallMsgHandler;PVOID InstallMsgHandlerContext;HSPFILEQ FileQueue;DWORD ClassInstallReserved;DWORD Reserved;WCHAR DriverPath[260];};
struct IASQLOLEServerSinkVtbl {HRESULT ( *QueryInterface)(IASQLOLEServerSink *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEServerSink *This);ULONG ( *Release)(IASQLOLEServerSink *This);HRESULT ( *QueryTimeout)(IASQLOLEServerSink *This, LPCSTR Message, LPBOOL Continue);HRESULT ( *ServerMessage)(IASQLOLEServerSink *This, int Severity, int MessageNumber, int MessageState, LPCSTR Message);HRESULT ( *ConnectionBroken)(IASQLOLEServerSink *This, LPCSTR Message, LPBOOL Retry);HRESULT ( *RemoteLoginFailed)(IASQLOLEServerSink *This, int Severity, int MessageNumber, int MessageState, LPCSTR Message);HRESULT ( *CommandSent)(IASQLOLEServerSink *This, LPCSTR szSQL);};
struct IDirectSoundNotifyVtbl {HRESULT ( *QueryInterface)(IDirectSoundNotify *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundNotify *This);ULONG ( *Release)(IDirectSoundNotify *This);HRESULT ( *SetNotificationPositions)(IDirectSoundNotify *This, DWORD, LPCDSBPOSITIONNOTIFY);};
struct IExchangeFavoritesVtbl {HRESULT ( *QueryInterface)(IExchangeFavorites *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeFavorites *This);ULONG ( *Release)(IExchangeFavorites *This);HRESULT ( *GetLastError)(IExchangeFavorites *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *AddFavorites)(IExchangeFavorites *This, LPENTRYLIST lpEntryList);HRESULT ( *DelFavorites)(IExchangeFavorites *This, LPENTRYLIST lpEntryList);};
struct IRowPositionChangeVtbl {HRESULT ( *QueryInterface)(IRowPositionChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowPositionChange *This);ULONG ( *Release)(IRowPositionChange *This);HRESULT ( *OnRowPositionChange)(IRowPositionChange *This, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);};
struct IShellChangeNotifyVtbl {HRESULT ( *QueryInterface)(IShellChangeNotify *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellChangeNotify *This);ULONG ( *Release)(IShellChangeNotify *This);HRESULT ( *OnChange)(IShellChangeNotify *This, LONG lEvent, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);};
struct ISilenceSuppressorVtbl {HRESULT ( *QueryInterface)(ISilenceSuppressor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISilenceSuppressor *This);ULONG ( *Release)(ISilenceSuppressor *This);HRESULT ( *GetPreplayBufferTime)(ISilenceSuppressor *This, LPDWORD lpdwPreplayBufferTime);HRESULT ( *SetPreplayBufferTime)(ISilenceSuppressor *This, DWORD dwPreplayBufferTime);HRESULT ( *GetPostplayBufferTime)(ISilenceSuppressor *This, LPDWORD lpdwPostplayBufferTime);HRESULT ( *SetPostplayBufferTime)(ISilenceSuppressor *This, DWORD dwPostplayBufferTime);HRESULT ( *GetRunningAverageTime)(ISilenceSuppressor *This, LPDWORD lpdwRunningAverageTime);HRESULT ( *SetRunningAverageTime)(ISilenceSuppressor *This, DWORD dwRunningAverageTime);HRESULT ( *GetAverageIncrementor)(ISilenceSuppressor *This, LPDWORD lpdwAverageIncrementor);HRESULT ( *SetAverageIncrementor)(ISilenceSuppressor *This, DWORD dwAverageIncrementor);HRESULT ( *GetEchoThreshold)(ISilenceSuppressor *This, LPDWORD lpdwEchoThreshold);HRESULT ( *SetEchoThreshold)(ISilenceSuppressor *This, DWORD dwEchoThreshold);HRESULT ( *GetUseAverageEnergyFunction)(ISilenceSuppressor *This, BOOL *lpfUseAverageEnergyFunction);HRESULT ( *SetUseAverageEnergyFunction)(ISilenceSuppressor *This, BOOL fUseAverageEnergyFunction);};
struct IVariantChangeTypeVtbl {HRESULT ( *QueryInterface)(IVariantChangeType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVariantChangeType *This);ULONG ( *Release)(IVariantChangeType *This);HRESULT ( *ChangeType)(IVariantChangeType *This, VARIANT *pvarDst, VARIANT *pvarSrc, LCID lcid, VARTYPE vtNew);};
struct IDirectDrawKernelVtbl {HRESULT ( *QueryInterface)(IDirectDrawKernel *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawKernel *This);ULONG ( *Release)(IDirectDrawKernel *This);HRESULT ( *GetCaps)(IDirectDrawKernel *This, LPDDKERNELCAPS);HRESULT ( *GetKernelHandle)(IDirectDrawKernel *This, LPDWORD);HRESULT ( *ReleaseKernelHandle)(IDirectDrawKernel *This);};
struct IEnumJAVAPROPERTYVtbl {HRESULT ( *QueryInterface)(IEnumJAVAPROPERTY *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IEnumJAVAPROPERTY *This);ULONG ( *Release)(IEnumJAVAPROPERTY *This);HRESULT ( *Next)(IEnumJAVAPROPERTY *This, ULONG celt, LPJAVAPROPERTY rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumJAVAPROPERTY *This, ULONG celt);HRESULT ( *Reset)(IEnumJAVAPROPERTY *This);HRESULT ( *Clone)(IEnumJAVAPROPERTY *This, LPENUMJAVAPROPERTY *ppenum);};
struct IOleInPlaceObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObject *This);ULONG ( *Release)(IOleInPlaceObject *This);HRESULT ( *GetWindow)(IOleInPlaceObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObject *This);HRESULT ( *UIDeactivate)(IOleInPlaceObject *This);HRESULT ( *SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObject *This);};
struct IPropertyPageSiteVtbl {HRESULT ( *QueryInterface)(IPropertyPageSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPageSite *This);ULONG ( *Release)(IPropertyPageSite *This);HRESULT ( *OnStatusChange)(IPropertyPageSite *This, DWORD dwFlags);HRESULT ( *GetLocaleID)(IPropertyPageSite *This, LCID *pLocaleID);HRESULT ( *GetPageContainer)(IPropertyPageSite *This, IUnknown **ppUnk);HRESULT ( *TranslateAcceleratorA)(IPropertyPageSite *This, MSG *pMsg);};
struct ITransactionLocalVtbl {HRESULT ( *QueryInterface)(ITransactionLocal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionLocal *This);ULONG ( *Release)(ITransactionLocal *This);HRESULT ( *Commit)(ITransactionLocal *This, BOOL fRetaining, DWORD grfTC, DWORD grfRM);HRESULT ( *Abort)(ITransactionLocal *This, BOID *pboidReason, BOOL fRetaining, BOOL fAsync);HRESULT ( *GetTransactionInfo)(ITransactionLocal *This, XACTTRANSINFO *pinfo);HRESULT ( *GetOptionsObject)(ITransactionLocal *This, ITransactionOptions **ppOptions);HRESULT ( *StartTransaction)(ITransactionLocal *This, ISOLEVEL isoLevel, ULONG isoFlags, ITransactionOptions *pOtherOptions, ULONG *pulTransactionLevel);};
struct IExchExtModelessVtbl {HRESULT ( *QueryInterface)(IExchExtModeless *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtModeless *This);ULONG ( *Release)(IExchExtModeless *This);HRESULT ( *TranslateAcceleratorA)(IExchExtModeless *This, LPMSG pmsg);HRESULT ( *EnableModeless)(IExchExtModeless *This, BOOL fEnable);};
struct IIndexDefinitionVtbl {HRESULT ( *QueryInterface)(IIndexDefinition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IIndexDefinition *This);ULONG ( *Release)(IIndexDefinition *This);HRESULT ( *CreateIndex)(IIndexDefinition *This, DBID *pTableID, DBID *pIndexID, ULONG cIndexColumnDescs,  DBINDEXCOLUMNDESC  *    rgIndexColumnDescs, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, DBID **ppIndexID);HRESULT ( *DropIndex)(IIndexDefinition *This, DBID *pTableID, DBID *pIndexID);};
struct IMtsMethodEventsVtbl {HRESULT ( *QueryInterface)(IMtsMethodEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsMethodEvents *This);ULONG ( *Release)(IMtsMethodEvents *This);HRESULT ( *OnMethodCall)(IMtsMethodEvents *This, LONGLONG perfCount, MTS_OBJID oid,  CLSID * guidCid,  IID * guidRid, ULONG iMeth);HRESULT ( *OnMethodReturn)(IMtsMethodEvents *This, LONGLONG perfCount, MTS_OBJID oid,  CLSID * guidCid,  IID * guidRid, ULONG iMeth, HRESULT hresult);HRESULT ( *OnMethodException)(IMtsMethodEvents *This, LONGLONG perfCount, MTS_OBJID oid,  CLSID * guidCid,  IID * guidRid, ULONG iMeth);};
struct IProvideTaskPageVtbl {HRESULT ( *QueryInterface)(IProvideTaskPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IProvideTaskPage *This);ULONG ( *Release)(IProvideTaskPage *This);HRESULT ( *GetPage)(IProvideTaskPage *This, TASKPAGE tpType, BOOL fPersistChanges, HPROPSHEETPAGE *phPage);};
struct ITableDefinitionVtbl {HRESULT ( *QueryInterface)(ITableDefinition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITableDefinition *This);ULONG ( *Release)(ITableDefinition *This);HRESULT ( *CreateTable)(ITableDefinition *This, IUnknown *pUnkOuter, DBID *pTableID, ULONG cColumnDescs,  DBCOLUMNDESC  *    rgColumnDescs,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, DBID **ppTableID, IUnknown **ppRowset);HRESULT ( *DropTable)(ITableDefinition *This, DBID *pTableID);HRESULT ( *AddColumn)(ITableDefinition *This, DBID *pTableID, DBCOLUMNDESC *pColumnDesc, DBID **ppColumnID);HRESULT ( *DropColumn)(ITableDefinition *This, DBID *pTableID, DBID *pColumnID);};
struct _NTSD_EXTENSION_APIS {DWORD nSize;PNTSD_OUTPUT_ROUTINE lpOutputRoutine;PNTSD_GET_EXPRESSION lpGetExpressionRoutine;PNTSD_GET_SYMBOL lpGetSymbolRoutine;PNTSD_DISASM lpDisasmRoutine;PNTSD_CHECK_CONTROL_C lpCheckControlCRoutine;};
struct _avifieldindex_chunk {FOURCC fcc;DWORD cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved3;struct _avifieldindex_chunk___avifieldindex_entry aIndex[];};
struct tagEMRTRANSPARENTBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct IClassActivatorVtbl {HRESULT ( *QueryInterface)(IClassActivator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassActivator *This);ULONG ( *Release)(IClassActivator *This);HRESULT ( *GetClassObject)(IClassActivator *This,  CLSID * rclsid, DWORD dwClassContext, LCID locale,  IID * riid, void **ppv);};
struct IDBSchemaRowsetVtbl {HRESULT ( *QueryInterface)(IDBSchemaRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBSchemaRowset *This);ULONG ( *Release)(IDBSchemaRowset *This);HRESULT ( *GetRowset)(IDBSchemaRowset *This, IUnknown *pUnkOuter,  GUID * rguidSchema, ULONG cRestrictions,  VARIANT  *    rgRestrictions,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);HRESULT ( *GetSchemas)(IDBSchemaRowset *This, ULONG *pcSchemas, GUID **prgSchemas, ULONG **prgRestrictionSupport);};
struct IMLangCodePagesVtbl {HRESULT ( *QueryInterface)(IMLangCodePages *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangCodePages *This);ULONG ( *Release)(IMLangCodePages *This);HRESULT ( *GetCharCodePages)(IMLangCodePages *This, WCHAR chSrc, DWORD *pdwCodePages);HRESULT ( *GetStrCodePages)(IMLangCodePages *This,  WCHAR *pszSrc, int cchSrc, DWORD dwPriorityCodePages, DWORD *pdwCodePages, int *pcchCodePages);HRESULT ( *CodePageToCodePages)(IMLangCodePages *This, UINT uCodePage, DWORD *pdwCodePages);HRESULT ( *CodePagesToCodePage)(IMLangCodePages *This, DWORD dwCodePages, UINT uDefaultCodePage, UINT *puCodePage);};
struct tagNMCUSTOMDRAWINFO {NMHDR hdr;DWORD dwDrawStage;HDC hdc;RECT rc;DWORD dwItemSpec;UINT uItemState;LPARAM lItemlParam;};
struct IDirect3DLightVtbl {HRESULT ( *QueryInterface)(IDirect3DLight *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DLight *This);ULONG ( *Release)(IDirect3DLight *This);HRESULT ( *Initialize)(IDirect3DLight *This, LPDIRECT3D);HRESULT ( *SetLight)(IDirect3DLight *This, LPD3DLIGHT);HRESULT ( *GetLight)(IDirect3DLight *This, LPD3DLIGHT);};
struct IDtcToXaHelperVtbl {HRESULT ( *QueryInterface)(IDtcToXaHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcToXaHelper *This);ULONG ( *Release)(IDtcToXaHelper *This);HRESULT ( *Close)(IDtcToXaHelper *This, BOOL i_fDoRecovery);HRESULT ( *TranslateTridToXid)(IDtcToXaHelper *This, ITransaction *pITransaction, GUID *pguidBqual, XID *pXid);};
struct IKsPropertySetVtbl {HRESULT ( *QueryInterface)(IKsPropertySet *This,  IID *, LPVOID *);ULONG ( *AddRef)(IKsPropertySet *This);ULONG ( *Release)(IKsPropertySet *This);HRESULT ( *Get)(IKsPropertySet *This,  GUID *, ULONG, LPVOID, ULONG, LPVOID, ULONG, PULONG);HRESULT ( *Set)(IKsPropertySet *This,  GUID *, ULONG, LPVOID, ULONG, LPVOID, ULONG);HRESULT ( *QuerySupport)(IKsPropertySet *This,  GUID *, ULONG, PULONG);};
struct IMessageFilterVtbl {HRESULT ( *QueryInterface)(IMessageFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMessageFilter *This);ULONG ( *Release)(IMessageFilter *This);DWORD ( *HandleInComingCall)(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);DWORD ( *RetryRejectedCall)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);DWORD ( *MessagePending)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);};
struct IPersistMemoryVtbl {HRESULT ( *QueryInterface)(IPersistMemory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMemory *This);ULONG ( *Release)(IPersistMemory *This);HRESULT ( *GetClassID)(IPersistMemory *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMemory *This);HRESULT ( *Load)(IPersistMemory *This, LPVOID pMem, ULONG cbSize);HRESULT ( *Save)(IPersistMemory *This, LPVOID pMem, BOOL fClearDirty, ULONG cbSize);HRESULT ( *GetSizeMax)(IPersistMemory *This, ULONG *pCbSize);HRESULT ( *InitNew)(IPersistMemory *This);};
struct IPersistStreamVtbl {HRESULT ( *QueryInterface)(IPersistStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStream *This);ULONG ( *Release)(IPersistStream *This);HRESULT ( *GetClassID)(IPersistStream *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStream *This);HRESULT ( *Load)(IPersistStream *This, IStream *pStm);HRESULT ( *Save)(IPersistStream *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStream *This, ULARGE_INTEGER *pcbSize);};
struct IQuickActivateVtbl {HRESULT ( *QueryInterface)(IQuickActivate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQuickActivate *This);ULONG ( *Release)(IQuickActivate *This);HRESULT ( *QuickActivate)(IQuickActivate *This, QACONTAINER *pQaContainer, QACONTROL *pQaControl);HRESULT ( *SetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);HRESULT ( *GetContentExtent)(IQuickActivate *This, LPSIZEL pSizel);};
struct IRowsetResynchVtbl {HRESULT ( *QueryInterface)(IRowsetResynch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetResynch *This);ULONG ( *Release)(IRowsetResynch *This);HRESULT ( *GetVisibleData)(IRowsetResynch *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *ResynchRows)(IRowsetResynch *This, ULONG cRows,  HROW  *    rghRows, ULONG *pcRowsResynched, HROW **prghRowsResynched, DBROWSTATUS **prgRowStatus);};
typedef HRESULT ( *PFN_WPPBINDTOSITEA)(HWND hwnd, LPCSTR sSiteName, LPCSTR sURL,  IID * riid, DWORD dwFlag, DWORD dwReserved, PVOID *ppvUnk);
typedef void ( *PMQRECEIVECALLBACK)(HRESULT hrStatus, QUEUEHANDLE hSource, DWORD dwTimeout, DWORD dwAction, MQMSGPROPS *pMessageProps, LPOVERLAPPED lpOverlapped, HANDLE hCursor);
typedef HRESULT ( *TRANSLATEINFSTRING)(PCSTR pszInfFilename, PCSTR pszInstallSection, PCSTR pszTranslateSection, PCSTR pszTranslateKey, PSTR pszBuffer, DWORD dwBufferSize, PDWORD pdwRequiredSize, PVOID pvReserved);
typedef BOOL ( *VDMGLOBALFIRSTPROC)(HANDLE, HANDLE, LPGLOBALENTRY, WORD, DEBUGEVENTPROC, LPVOID);
struct tagEMRPOLYTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;LONG cStrings;EMRTEXT aemrtext[1];};
struct IHttpSecurityVtbl {HRESULT ( *QueryInterface)(IHttpSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpSecurity *This);ULONG ( *Release)(IHttpSecurity *This);HRESULT ( *GetWindow)(IHttpSecurity *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnSecurityProblem)(IHttpSecurity *This, DWORD dwProblem);};
struct IMediaSeekingVtbl {HRESULT ( *QueryInterface)(IMediaSeeking *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSeeking *This);ULONG ( *Release)(IMediaSeeking *This);HRESULT ( *GetCapabilities)(IMediaSeeking *This, DWORD *pCapabilities);HRESULT ( *CheckCapabilities)(IMediaSeeking *This, DWORD *pCapabilities);HRESULT ( *IsFormatSupported)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *QueryPreferredFormat)(IMediaSeeking *This, GUID *pFormat);HRESULT ( *GetTimeFormatA)(IMediaSeeking *This, GUID *pFormat);HRESULT ( *IsUsingTimeFormat)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *SetTimeFormat)(IMediaSeeking *This,  GUID *pFormat);HRESULT ( *GetDuration)(IMediaSeeking *This, LONGLONG *pDuration);HRESULT ( *GetStopPosition)(IMediaSeeking *This, LONGLONG *pStop);HRESULT ( *GetCurrentPosition)(IMediaSeeking *This, LONGLONG *pCurrent);HRESULT ( *ConvertTimeFormat)(IMediaSeeking *This, LONGLONG *pTarget,  GUID *pTargetFormat, LONGLONG Source,  GUID *pSourceFormat);HRESULT ( *SetPositions)(IMediaSeeking *This, LONGLONG *pCurrent, DWORD dwCurrentFlags, LONGLONG *pStop, DWORD dwStopFlags);HRESULT ( *GetPositions)(IMediaSeeking *This, LONGLONG *pCurrent, LONGLONG *pStop);HRESULT ( *GetAvailable)(IMediaSeeking *This, LONGLONG *pEarliest, LONGLONG *pLatest);HRESULT ( *SetRate)(IMediaSeeking *This, double dRate);HRESULT ( *GetRate)(IMediaSeeking *This, double *pdRate);HRESULT ( *GetPreroll)(IMediaSeeking *This, LONGLONG *pllPreroll);};
struct IMemAllocatorVtbl {HRESULT ( *QueryInterface)(IMemAllocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMemAllocator *This);ULONG ( *Release)(IMemAllocator *This);HRESULT ( *SetProperties)(IMemAllocator *This, ALLOCATOR_PROPERTIES *pRequest, ALLOCATOR_PROPERTIES *pActual);HRESULT ( *GetProperties)(IMemAllocator *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *Commit)(IMemAllocator *This);HRESULT ( *Decommit)(IMemAllocator *This);HRESULT ( *GetBuffer)(IMemAllocator *This, IMediaSample **ppBuffer, REFERENCE_TIME *pStartTime, REFERENCE_TIME *pEndTime, DWORD dwFlags);HRESULT ( *ReleaseBuffer)(IMemAllocator *This, IMediaSample *pBuffer);};
struct ISecurityInfoVtbl {HRESULT ( *QueryInterface)(ISecurityInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISecurityInfo *This);ULONG ( *Release)(ISecurityInfo *This);HRESULT ( *GetCurrentTrustee)(ISecurityInfo *This, TRUSTEE_W **ppTrustee);HRESULT ( *GetObjectTypes)(ISecurityInfo *This, ULONG *cObjectTypes, GUID **rgObjectTypes);HRESULT ( *GetPermissions)(ISecurityInfo *This, GUID ObjectType, ACCESS_MASK *pPermissions);};
struct ITrusteeAdminVtbl {HRESULT ( *QueryInterface)(ITrusteeAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrusteeAdmin *This);ULONG ( *Release)(ITrusteeAdmin *This);HRESULT ( *CompareTrustees)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee1, TRUSTEE_W *pTrustee2);HRESULT ( *CreateTrustee)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);HRESULT ( *DeleteTrustee)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee);HRESULT ( *SetTrusteeProperties)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);HRESULT ( *GetTrusteeProperties)(ITrusteeAdmin *This, TRUSTEE_W *pTrustee,  ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);};
typedef BOOL ( *LPFN_TRANSMITFILE)(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved);
typedef BOOL ( *VDMGLOBALNEXTPROC)(HANDLE, HANDLE, LPGLOBALENTRY, WORD, DEBUGEVENTPROC, LPVOID);
struct _CMSG_SIGNER_INFO {DWORD dwVersion;CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct _avitimecodeindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];TIMECODEDATA aIndex[1022];};
struct tagREBARBANDINFOA {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;UINT cxHeader;};
struct ICatRegisterVtbl {HRESULT ( *QueryInterface)(ICatRegister *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatRegister *This);ULONG ( *Release)(ICatRegister *This);HRESULT ( *RegisterCategories)(ICatRegister *This, ULONG cCategories, CATEGORYINFO  *    rgCategoryInfo);HRESULT ( *UnRegisterCategories)(ICatRegister *This, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *RegisterClassImplCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *UnRegisterClassImplCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *RegisterClassReqCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories, CATID  *    rgcatid);HRESULT ( *UnRegisterClassReqCategories)(ICatRegister *This,  CLSID * rclsid, ULONG cCategories, CATID  *    rgcatid);};
struct ICommandTreeVtbl {HRESULT ( *QueryInterface)(ICommandTree *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandTree *This);ULONG ( *Release)(ICommandTree *This);HRESULT ( *FindErrorNodes)(ICommandTree *This,  DBCOMMANDTREE *pRoot, ULONG *pcErrorNodes, DBCOMMANDTREE ***prgErrorNodes);HRESULT ( *FreeCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot);HRESULT ( *GetCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot);HRESULT ( *SetCommandTree)(ICommandTree *This, DBCOMMANDTREE **ppRoot, DBCOMMANDREUSE dwCommandReuse, BOOL fCopy);};
struct IFileAsyncIOVtbl {HRESULT ( *QueryInterface)(IFileAsyncIO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileAsyncIO *This);ULONG ( *Release)(IFileAsyncIO *This);HRESULT ( *QueryAlignment)(IFileAsyncIO *This, LPDWORD pdwAlign);HRESULT ( *Read)(IFileAsyncIO *This, AsyncIOReq *pReq);HRESULT ( *Write)(IFileAsyncIO *This, AsyncIOReq *pReq);HRESULT ( *WaitForNext)(IFileAsyncIO *This, AsyncIOReq **ppReq, DWORD dwTimeout);HRESULT ( *WaitForSpecific)(IFileAsyncIO *This, AsyncIOReq *pReq, DWORD dwTimeout);HRESULT ( *DiscardPending)(IFileAsyncIO *This);HRESULT ( *Flush)(IFileAsyncIO *This);};
struct IInputObjectVtbl {HRESULT ( *QueryInterface)(IInputObject *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInputObject *This);ULONG ( *Release)(IInputObject *This);HRESULT ( *UIActivateIO)(IInputObject *This, BOOL fActivate, LPMSG lpMsg);HRESULT ( *HasFocusIO)(IInputObject *This);HRESULT ( *TranslateAcceleratorIO)(IInputObject *This, LPMSG lpMsg);};
struct IMediaStreamVtbl {HRESULT ( *QueryInterface)(IMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaStream *This);ULONG ( *Release)(IMediaStream *This);HRESULT ( *GetMultiMediaStream)(IMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IMediaStream *This, DWORD dwFlags);};
struct IRowPositionVtbl {HRESULT ( *QueryInterface)(IRowPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowPosition *This);ULONG ( *Release)(IRowPosition *This);HRESULT ( *ClearRowPosition)(IRowPosition *This);HRESULT ( *GetRowPosition)(IRowPosition *This, HCHAPTER *phChapter, HROW *phRow, DBPOSITIONFLAGS *pdwPositionFlags);HRESULT ( *GetRowset)(IRowPosition *This,  IID * riid, IUnknown **ppRowset);HRESULT ( *Initialize)(IRowPosition *This, IUnknown *pRowset);HRESULT ( *SetRowPosition)(IRowPosition *This, HCHAPTER hChapter, HROW hRow, DBPOSITIONFLAGS dwPositionFlags);};
struct ITypeMarshalVtbl {HRESULT ( *QueryInterface)(ITypeMarshal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeMarshal *This);ULONG ( *Release)(ITypeMarshal *This);HRESULT ( *Size)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);HRESULT ( *Marshal)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);HRESULT ( *Unmarshal)(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);HRESULT ( *Free)(ITypeMarshal *This, PVOID pvType);};
struct _FILEDESCRIPTORA {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;CHAR cFileName[260];};
struct _FILEDESCRIPTORW {DWORD dwFlags;CLSID clsid;SIZEL sizel;POINTL pointl;DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;WCHAR cFileName[260];};
struct _MIDL_ES_MESSAGE {MIDL_STUB_MESSAGE StubMsg;MIDL_ES_CODE Operation;void *UserState;unsigned int MesVersion : 8;unsigned int HandleStyle : 8;unsigned int HandleFlags : 8;unsigned int Reserve : 8;MIDL_ES_ALLOC Alloc;MIDL_ES_WRITE Write;MIDL_ES_READ Read;unsigned char *Buffer;unsigned int BufferSize;unsigned char **pDynBuffer;unsigned int *pEncodedSize;RPC_SYNTAX_IDENTIFIER InterfaceId;unsigned int ProcNumber;unsigned int AlienDataRep;unsigned int IncrDataSize;unsigned int ByteCount;};
struct _SHFILEOPSTRUCTA {HWND hwnd;UINT wFunc;LPCSTR pFrom;LPCSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCSTR lpszProgressTitle;};
struct tagEMRALPHABLEND {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagEMRSTRETCHBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagMONCONVSTRUCT {UINT cb;BOOL fConnect;DWORD dwTime;HANDLE hTask;HSZ hszSvc;HSZ hszTopic;HCONV hConvClient;HCONV hConvServer;};
struct tagMONHSZSTRUCTA {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;CHAR str[1];};
struct tagMONHSZSTRUCTW {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;WCHAR str[1];};
struct tagMONLINKSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;BOOL fEstablished;BOOL fNoData;HSZ hszSvc;HSZ hszTopic;HSZ hszItem;UINT wFmt;BOOL fServer;HCONV hConvServer;HCONV hConvClient;};
struct tagMSGBOXPARAMSA {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpszText;LPCSTR lpszCaption;DWORD dwStyle;LPCSTR lpszIcon;DWORD dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct IDataFilterVtbl {HRESULT ( *QueryInterface)(IDataFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataFilter *This);ULONG ( *Release)(IDataFilter *This);HRESULT ( *DoEncode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *DoDecode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT ( *SetEncodingLevel)(IDataFilter *This, DWORD dwEncLevel);};
struct IViewFilterVtbl {HRESULT ( *QueryInterface)(IViewFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewFilter *This);ULONG ( *Release)(IViewFilter *This);HRESULT ( *GetFilter)(IViewFilter *This, HACCESSOR hAccessor, ULONG *pcRows, DBCOMPAREOP * *    pCompareOps, void *pCriteriaData);HRESULT ( *GetFilterBindings)(IViewFilter *This, ULONG *pcBindings, DBBINDING **prgBindings);HRESULT ( *SetFilter)(IViewFilter *This, HACCESSOR hAccessor, ULONG cRows, DBCOMPAREOP  *    CompareOps, void *pCriteriaData);};
typedef INT ( *LPNSPSETSERVICE)(LPGUID lpProviderId, LPWSASERVICECLASSINFOW lpServiceClassInfo, LPWSAQUERYSETW lpqsRegInfo, WSAESETSERVICEOP essOperation, DWORD dwControlFlags);
typedef HRESULT ( *RUNSETUPCOMMAND)(HWND hWnd, LPCSTR szCmdName, LPCSTR szInfSection, LPCSTR szDir, LPCSTR szTitle, HANDLE *phEXE, DWORD dwFlags, LPVOID pvReserved);
struct _PPP_EAP_OUTPUT {DWORD dwSizeInBytes;PPP_EAP_ACTION Action;DWORD dwIdExpected;DWORD dwAuthResultCode;CHAR szIdentity[257];RAS_AUTH_ATTRIBUTE *pAuthenticatedUserAttributes;BOOL fInvokeInteractiveUI;PBYTE pUIContextData;DWORD dwSizeOfUIContextData;};
struct tagCHOOSECOLORA {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct IAMTVTunerVtbl {HRESULT ( *QueryInterface)(IAMTVTuner *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMTVTuner *This);ULONG ( *Release)(IAMTVTuner *This);HRESULT ( *put_Channel)(IAMTVTuner *This, int lChannel, int lVideoSubChannel, int lAudioSubChannel);HRESULT ( *get_Channel)(IAMTVTuner *This, int *plChannel, int *plVideoSubChannel, int *plAudioSubChannel);HRESULT ( *ChannelMinMax)(IAMTVTuner *This, int *lChannelMin, int *lChannelMax);HRESULT ( *put_CountryCode)(IAMTVTuner *This, int lCountryCode);HRESULT ( *get_CountryCode)(IAMTVTuner *This, int *plCountryCode);HRESULT ( *put_TuningSpace)(IAMTVTuner *This, int lTuningSpace);HRESULT ( *get_TuningSpace)(IAMTVTuner *This, int *plTuningSpace);HRESULT ( *Logon)(IAMTVTuner *This, HANDLE hCurrentUser);HRESULT ( *Logout)(IAMTVTuner *This);HRESULT ( *SignalPresent)(IAMTVTuner *This, int *plSignalStrength);HRESULT ( *put_Mode)(IAMTVTuner *This, AMTunerModeType lMode);HRESULT ( *get_Mode)(IAMTVTuner *This, AMTunerModeType *plMode);HRESULT ( *GetAvailableModes)(IAMTVTuner *This, int *plModes);HRESULT ( *RegisterNotificationCallBack)(IAMTVTuner *This, IAMTunerNotification *pNotify, int lEvents);HRESULT ( *UnRegisterNotificationCallBack)(IAMTVTuner *This, IAMTunerNotification *pNotify);HRESULT ( *get_AvailableTVFormats)(IAMTVTuner *This, int *lAnalogVideoStandard);HRESULT ( *get_TVFormat)(IAMTVTuner *This, int *plAnalogVideoStandard);HRESULT ( *AutoTune)(IAMTVTuner *This, int lChannel, int *plFoundSignal);HRESULT ( *StoreAutoTune)(IAMTVTuner *This);HRESULT ( *get_NumInputConnections)(IAMTVTuner *This, int *plNumInputConnections);HRESULT ( *put_InputType)(IAMTVTuner *This, int lIndex, TunerInputType InputType);HRESULT ( *get_InputType)(IAMTVTuner *This, int lIndex, TunerInputType *pInputType);HRESULT ( *put_ConnectInput)(IAMTVTuner *This, int lIndex);HRESULT ( *get_ConnectInput)(IAMTVTuner *This, int *plIndex);HRESULT ( *get_VideoFrequency)(IAMTVTuner *This, int *lFreq);HRESULT ( *get_AudioFrequency)(IAMTVTuner *This, int *lFreq);};
struct IAudioDataVtbl {HRESULT ( *QueryInterface)(IAudioData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioData *This);ULONG ( *Release)(IAudioData *This);HRESULT ( *SetBuffer)(IAudioData *This, DWORD cbSize, BYTE *pbData, DWORD dwFlags);HRESULT ( *GetInfo)(IAudioData *This, DWORD *pdwLength, BYTE **ppbData, DWORD *pcbActualData);HRESULT ( *SetActual)(IAudioData *This, DWORD cbDataValid);HRESULT ( *GetFormat)(IAudioData *This, WAVEFORMATEX *pWaveFormatCurrent);HRESULT ( *SetFormat)(IAudioData *This,  WAVEFORMATEX *lpWaveFormat);};
struct ILockBytesVtbl {HRESULT ( *QueryInterface)(ILockBytes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILockBytes *This);ULONG ( *Release)(ILockBytes *This);HRESULT ( *ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Flush)(ILockBytes *This);HRESULT ( *SetSize)(ILockBytes *This, ULARGE_INTEGER cb);HRESULT ( *LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IMDDatasetVtbl {HRESULT ( *QueryInterface)(IMDDataset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDDataset *This);ULONG ( *Release)(IMDDataset *This);HRESULT ( *FreeAxisInfo)(IMDDataset *This, ULONG cAxes, MDAXISINFO *rgAxisInfo);HRESULT ( *GetAxisInfo)(IMDDataset *This, ULONG *pcAxes, MDAXISINFO **prgAxisInfo);HRESULT ( *GetAxisRowset)(IMDDataset *This, IUnknown *pUnkOuter, ULONG iAxis,  IID * riid, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown **ppRowset);HRESULT ( *GetCellData)(IMDDataset *This, HACCESSOR hAccessor, ULONG ulStartCell, ULONG ulEndCell, void *pData);HRESULT ( *GetSpecification)(IMDDataset *This,  IID * riid, IUnknown **ppSpecification);};
struct IQueryInfoVtbl {HRESULT ( *QueryInterface)(IQueryInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQueryInfo *This);ULONG ( *Release)(IQueryInfo *This);HRESULT ( *GetInfoTip)(IQueryInfo *This, DWORD dwFlags, WCHAR **ppwszTip);HRESULT ( *GetInfoFlags)(IQueryInfo *This, DWORD *pdwFlags);};
struct _D3DDeviceDesc {DWORD dwSize;DWORD dwFlags;D3DCOLORMODEL dcmColorModel;DWORD dwDevCaps;D3DTRANSFORMCAPS dtcTransformCaps;BOOL bClipping;D3DLIGHTINGCAPS dlcLightingCaps;D3DPRIMCAPS dpcLineCaps;D3DPRIMCAPS dpcTriCaps;DWORD dwDeviceRenderBitDepth;DWORD dwDeviceZBufferBitDepth;DWORD dwMaxBufferSize;DWORD dwMaxVertexCount;DWORD dwMinTextureWidth;DWORD dwMinTextureHeight;DWORD dwMaxTextureWidth;DWORD dwMaxTextureHeight;DWORD dwMinStippleWidth;DWORD dwMaxStippleWidth;DWORD dwMinStippleHeight;DWORD dwMaxStippleHeight;};
struct _DDPIXELFORMAT {DWORD dwSize;DWORD dwFlags;DWORD dwFourCC;_DDPIXELFORMAT___10AA641B3215541DB69A48A361AE0013 __anonymous0;_DDPIXELFORMAT___0E0BD8DB15B3F2A790C062F781315157 __anonymous1;_DDPIXELFORMAT___DB4BDA43012B420E1DC9AEEACAA267A5 __anonymous2;_DDPIXELFORMAT___4C5EBD389D88C4C046794501FFF390F4 __anonymous3;_DDPIXELFORMAT___3ED4EC923A768B2489A9D1155BD11968 __anonymous4;};
struct _PPP_EAP_INPUT {DWORD dwSizeInBytes;HANDLE hPort;BOOL fAuthenticator;CHAR *pszIdentity;CHAR *pszPassword;RAS_AUTH_ATTRIBUTE *pUserAttributes;DWORD ( *RasAuthenticateClient)(HANDLE hPort, RAS_AUTH_ATTRIBUTE *pInAttributes);BOOL fAuthenticationComplete;DWORD dwAuthError;DWORD dwAuthResultCode;RAS_AUTH_ATTRIBUTE *pAttributesFromAuthenticator;HANDLE hTokenImpersonateUser;DWORD fSuccessPacketReceived;DWORD fDataReceivedFromInteractiveUI;PBYTE pDataFromInteractiveUI;DWORD dwSizeOfDataFromInteractiveUI;PBYTE pDataFromConfigUI;DWORD dwSizeOfDataFromConfigUI;};
struct _RTM_IPX_ROUTE {_RTM_IPX_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7 __anonymous0;DWORD RR_RoutingProtocol;DWORD RR_InterfaceID;_RTM_IPX_ROUTE___699C5E920C4F94118D3CA0585219D565 __anonymous2;_RTM_IPX_ROUTE___95FE7FC4F53A272F19648AD0B352E2FC __anonymous4;_RTM_IPX_ROUTE___85E7B8B11946BA927F63B847A2BF5F33 __anonymous5;_RTM_IPX_ROUTE___84BE75615039A1B539474E75E854ADAC __anonymous6;};
struct _avisuperindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];struct _avisuperindex___avisuperindex_entry aIndex[1022];};
struct DelayLoadInfo {DWORD cb;PCImgDelayDescr pidd;FARPROC *ppfn;LPCSTR szDll;DelayLoadProc dlp;HMODULE hmodCur;FARPROC pfnCur;DWORD dwLastError;};
struct IGetFrameVtbl {HRESULT ( *QueryInterface)(IGetFrame *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IGetFrame *This);ULONG ( *Release)(IGetFrame *This);LPVOID ( *GetFrame)(IGetFrame *This, LONG lPos);HRESULT ( *Begin)(IGetFrame *This, LONG lStart, LONG lEnd, LONG lRate);HRESULT ( *End)(IGetFrame *This);HRESULT ( *SetFormat)(IGetFrame *This, LPBITMAPINFOHEADER lpbi, LPVOID lpBits, int x, int y, int dx, int dy);};
struct IMimeInfoVtbl {HRESULT ( *QueryInterface)(IMimeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMimeInfo *This);ULONG ( *Release)(IMimeInfo *This);HRESULT ( *GetMimeCLSIDMapping)(IMimeInfo *This, UINT *pcTypes, LPCSTR **ppszTypes, CLSID **ppclsID);};
struct IRMHelperVtbl {HRESULT ( *QueryInterface)(IRMHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRMHelper *This);ULONG ( *Release)(IRMHelper *This);HRESULT ( *RMCount)(IRMHelper *This, DWORD dwcTotalNumberOfRMs);HRESULT ( *RMInfo)(IRMHelper *This, xa_switch_t *pXa_Switch, BOOL fCDeclCallingConv, char *pszOpenString, char *pszCloseString, GUID guidRMRecovery);};
typedef BOOL ( *LPFN_ACCEPTEX)(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped);
struct PACKET_BUFFER {LPBYTE Data;DWORD Start;DWORD End;DWORD Max;DWORD Context;WORD Protocol;WORD AddressLength;BYTE Address[16];PACKET_COMPLETION_FUNC CompletionFunc;};
struct _RTM_IP_ROUTE {_RTM_IPX_ROUTE___383DBD2153B5740F3D68AAD18C5EECC7 __anonymous0;DWORD RR_RoutingProtocol;DWORD RR_InterfaceID;_RTM_IPX_ROUTE___699C5E920C4F94118D3CA0585219D565 __anonymous2;_RTM_IP_ROUTE___B65F32E54A7D132F22C0F4ED7A007718 __anonymous4;_RTM_IP_ROUTE___DFE08586EF63A6DAB2B8E734DD72B954 __anonymous5;_RTM_IP_ROUTE___D7E34B8E0CF8F922B22A9A1306909A02 __anonymous6;};
struct _avitcdlindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORD dwReserved[3];AVITCDLINDEX_ENTRY aIndex[584];DWORD adwTrailingFill[3512];};
struct tagEMRMASKBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct _charformatw {UINT cbSize;DWORD dwMask;DWORD dwEffects;LONG yHeight;LONG yOffset;COLORREF crTextColor;BYTE bCharSet;BYTE bPitchAndFamily;WCHAR szFaceName[32];};
struct _paraformat2 {UINT cbSize;DWORD dwMask;WORD wNumbering;WORD wEffects;LONG dxStartIndent;LONG dxRightIndent;LONG dxOffset;WORD wAlignment;SHORT cTabCount;LONG rgxTabs[32];LONG dySpaceBefore;LONG dySpaceAfter;LONG dyLineSpacing;SHORT sStyle;BYTE bLineSpacingRule;BYTE bCRC;WORD wShadingWeight;WORD wShadingStyle;WORD wNumberingStart;WORD wNumberingStyle;WORD wNumberingTab;WORD wBorderSpace;WORD wBorderWidth;WORD wBorders;};
struct tagEMRBITBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;};
struct tagTOOLINFOA {UINT cbSize;UINT uFlags;HWND hwnd;UINT uId;RECT rect;HINSTANCE hinst;LPSTR lpszText;LPARAM lParam;};
typedef ULONG  MAPIADDRESS(LHANDLE lhSession, ULONG ulUIParam, LPSTR lpszCaption, ULONG nEditFields, LPSTR lpszLabels, ULONG nRecips, lpMapiRecipDesc lpRecips, FLAGS flFlags, ULONG ulReserved, LPULONG lpnNewRecips, lpMapiRecipDesc *lppNewRecips);
struct IQueryVtbl {HRESULT ( *QueryInterface)(IQuery *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IQuery *This);ULONG ( *Release)(IQuery *This);HRESULT ( *FindErrorNodes)(IQuery *This,  DBCOMMANDTREE *pRoot, ULONG *pcErrorNodes, DBCOMMANDTREE ***prgErrorNodes);HRESULT ( *FreeCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot);HRESULT ( *GetCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot);HRESULT ( *SetCommandTree)(IQuery *This, DBCOMMANDTREE **ppRoot, DBCOMMANDREUSE dwCommandReuse, BOOL fCopy);HRESULT ( *AddPostProcessing)(IQuery *This, DBCOMMANDTREE **ppRoot, BOOL fCopy);HRESULT ( *GetCardinalityEstimate)(IQuery *This, ULONG *pulCardinality);};
struct srv_config {unsigned int connections;unsigned int stacksize;BOOL log_file_open;HANDLE log_handle;char log_file_name[64];BOOL print_recv;BOOL print_send;BOOL remote_access;unsigned int max_remote_sites;unsigned int max_remote_connections;WORD numConnectsPerThread;WORD MaxWorkingThreads;WORD MinWorkingThreads;WORD ConcurrentThreads;DWORD WorkingThreadTimeout;unsigned int max_packets;WORD numNetLibs;WORD spare;LGFARPROC SSNetLibs[16][11];HANDLE SSModules[16];char connect_names[16][64];char connect_dlls[16][64];char connect_versions[16][64];char server_name[64];BOOL local_only;BOOL unpack_rpc;unsigned int max_packetsize;unsigned int dflt_packetsize;int ThreadPriority;BOOL ansi;BYTE tdsversion[4];BYTE progversion[4];DWORD threadaffinity;};
struct _CRL_INFO {DWORD dwVersion;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME ThisUpdate;FILETIME NextUpdate;DWORD cCRLEntry;PCRL_ENTRY rgCRLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct srv_io {void *server_ep;HANDLE cs_sub_handle;BYTE *outbuff;BYTE *p_outbuff;WORD n_outbuff;BYTE *inbuff;BYTE *p_inbuff;WORD n_inbuff;int SQLspanned;int cbflag;DBUSMALLINT channel;BYTE packet;BYTE window;HANDLE ioEvent;OVERLAPPED ioOverlapped;SRV_INPUTBUF *pNextInBuf;SRV_INPUTBUF ioInputBuffers[2];HANDLE ss_sub_handle;WORD packetsize;};
struct tagMSG {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;POINT pt;};
union lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F {struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___AC895D76FEB8AD7CCBA57D090D995565 SetAgentGroup;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___B77FC36072AAC97468D5DBEF9C8DEA1B SetAgentState;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___FEF65DEF9E8D3E402C8E4CBE8FFE0BEF SetAgentActivity;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___2AC1A0508EF9BCBABE5AC960F9ACD9BD GetAgentCaps;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___29E668CDF699B04E5534A451C956F19F GetAgentStatus;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___EE8F0E8E6B4392040B096A0A18F796A4 AgentSpecific;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___89D0EED50E7EB6AF2A3CF195F6B324D9 GetAgentActivityList;struct lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F___AC895D76FEB8AD7CCBA57D090D995565 GetAgentGroupList;};
struct _78DD00BDF4D9248AAFB252631B04B74F {LPMAPISESSION lpSession;LPMAPIPROP lpCurrentObject;ULONG nPollInterval;ULONG ulUSNChangedPropTag;ULONG ulExtensionDataPropTag;CRITICAL_SECTION csCriticalSection;HANDLE hPollThreadStop;HANDLE hPollThread;ULONG ulPollThreadID;ULONG ulUSNChanged;LPSPropValue lpExtensionData;LPADVISENOTIFY lpNotifyList;};
struct _A820875CF544015241589462689E9AE4 {CMC_message_reference *message_reference;CMC_string message_type;CMC_string subject;CMC_time time_sent;CMC_uint32 byte_length;CMC_recipient *originator;CMC_flags summary_flags;CMC_extension *message_summary_extensions;};
struct _C588D60136F5233389A280E70F7EA459 {CMC_message_reference *message_reference;CMC_string message_type;CMC_string subject;CMC_time time_sent;CMC_string text_note;CMC_recipient *recipients;CMC_attachment *attachments;CMC_flags message_flags;CMC_extension *message_extensions;};
struct IOleInPlaceActiveObjectVtbl {HRESULT ( *QueryInterface)(IOleInPlaceActiveObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceActiveObject *This);ULONG ( *Release)(IOleInPlaceActiveObject *This);HRESULT ( *GetWindow)(IOleInPlaceActiveObject *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceActiveObject *This, LPMSG lpmsg);HRESULT ( *OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);HRESULT ( *EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);};
struct IMLangLineBreakConsoleVtbl {HRESULT ( *QueryInterface)(IMLangLineBreakConsole *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangLineBreakConsole *This);ULONG ( *Release)(IMLangLineBreakConsole *This);HRESULT ( *BreakLineML)(IMLangLineBreakConsole *This, IMLangString *pSrcMLStr, int lSrcPos, int lSrcLen, int cMinColumns, int cMaxColumns, int *plLineLen, int *plSkipLen);HRESULT ( *BreakLineW)(IMLangLineBreakConsole *This, LCID locale,  WCHAR *pszSrc, int cchSrc, int cMaxColumns, int *pcchLine, int *pcchSkip);HRESULT ( *BreakLineA)(IMLangLineBreakConsole *This, LCID locale, UINT uCodePage,  CHAR *pszSrc, int cchSrc, int cMaxColumns, int *pcchLine, int *pcchSkip);};
struct IResourceManagerFacadeVtbl {HRESULT ( *QueryInterface)(IResourceManagerFacade *This,  IID * riid, LPVOID *ppv);ULONG ( *AddRef)(IResourceManagerFacade *This);ULONG ( *Release)(IResourceManagerFacade *This);HRESULT ( *CreateNewResourceManager)(char *pszDSN, char *pszClientDllName, DWORD *pdwRMCookie);HRESULT ( *EnlistOnTransaction)(DWORD dwRMCookie, ITransaction *pITransaction, XID *pxid, ITransactionResource *pITransRes);HRESULT ( *FindTransactionOutcome)(DWORD dwRMCookie, XID *pxid, XACT_STATUS *pXactStatus);HRESULT ( *RecoveryComplete)(DWORD dwRMCookie);};
struct IExchangeFastTransferVtbl {HRESULT ( *QueryInterface)(IExchangeFastTransfer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeFastTransfer *This);ULONG ( *Release)(IExchangeFastTransfer *This);HRESULT ( *Config)(IExchangeFastTransfer *This, ULONG ulFlags, ULONG ulTransferMethod);HRESULT ( *TransferBuffer)(IExchangeFastTransfer *This, ULONG cb, LPBYTE lpb, ULONG *lpcbProcessed);BOOL ( *IsInterfaceOk)(IExchangeFastTransfer *This, ULONG ulTransferMethod,  IID * refiid, LPSPropTagArray lpptagList, ULONG ulFlags);};
struct IExchangeModifyTableVtbl {HRESULT ( *QueryInterface)(IExchangeModifyTable *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeModifyTable *This);ULONG ( *Release)(IExchangeModifyTable *This);HRESULT ( *GetLastError)(IExchangeModifyTable *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetTable)(IExchangeModifyTable *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *ModifyTable)(IExchangeModifyTable *This, ULONG ulFlags, LPROWLIST lpMods);};
struct IObjectAccessControlVtbl {HRESULT ( *QueryInterface)(IObjectAccessControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectAccessControl *This);ULONG ( *Release)(IObjectAccessControl *This);HRESULT ( *GetObjectAccessRights)(IObjectAccessControl *This, SEC_OBJECT *pObject, ULONG *pcAccessEntries, EXPLICIT_ACCESS_W **prgAccessEntries);HRESULT ( *GetObjectOwner)(IObjectAccessControl *This, SEC_OBJECT *pObject, TRUSTEE_W **ppOwner);HRESULT ( *IsObjectAccessAllowed)(IObjectAccessControl *This, SEC_OBJECT *pObject, EXPLICIT_ACCESS_W *pAccessEntry, BOOL *pfResult);HRESULT ( *SetObjectAccessRights)(IObjectAccessControl *This, SEC_OBJECT *pObject, ULONG cAccessEntries, EXPLICIT_ACCESS_W *prgAccessEntries);HRESULT ( *SetObjectOwner)(IObjectAccessControl *This, SEC_OBJECT *pObject, TRUSTEE_W *pOwner);};
struct IOleUILinkContainerAVtbl {HRESULT ( *QueryInterface)(IOleUILinkContainerA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUILinkContainerA *This);ULONG ( *Release)(IOleUILinkContainerA *This);DWORD ( *GetNextLink)(IOleUILinkContainerA *This, DWORD dwLink);HRESULT ( *SetLinkUpdateOptions)(IOleUILinkContainerA *This, DWORD dwLink, DWORD dwUpdateOpt);HRESULT ( *GetLinkUpdateOptions)(IOleUILinkContainerA *This, DWORD dwLink, DWORD *lpdwUpdateOpt);HRESULT ( *SetLinkSource)(IOleUILinkContainerA *This, DWORD dwLink, LPSTR lpszDisplayName, ULONG lenFileName, ULONG *pchEaten, BOOL fValidateSource);HRESULT ( *GetLinkSource)(IOleUILinkContainerA *This, DWORD dwLink, LPSTR *lplpszDisplayName, ULONG *lplenFileName, LPSTR *lplpszFullLinkType, LPSTR *lplpszShortLinkType, BOOL *lpfSourceAvailable, BOOL *lpfIsSelected);HRESULT ( *OpenLinkSource)(IOleUILinkContainerA *This, DWORD dwLink);HRESULT ( *UpdateLink)(IOleUILinkContainerA *This, DWORD dwLink, BOOL fErrorMessage, BOOL fReserved);HRESULT ( *CancelLink)(IOleUILinkContainerA *This, DWORD dwLink);};
struct IInstallAudioCodecsVtbl {HRESULT ( *QueryInterface)(IInstallAudioCodecs *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IInstallAudioCodecs *This);ULONG ( *Release)(IInstallAudioCodecs *This);HRESULT ( *AddACMFormat)(IInstallAudioCodecs *This, LPWAVEFORMATEX lpwfx, PAUDCAP_INFO pAudCapInfo);HRESULT ( *RemoveACMFormat)(IInstallAudioCodecs *This, LPWAVEFORMATEX lpwfx);HRESULT ( *ReorderFormats)(IInstallAudioCodecs *This, PAUDCAP_INFO_LIST pAudCapInfoList);HRESULT ( *EnumFormats)(IInstallAudioCodecs *This, PAUDCAP_INFO_LIST *ppAudCapInfoList);HRESULT ( *FreeBuffer)(IInstallAudioCodecs *This, LPVOID lpBuffer);};
struct IAudioStreamSampleVtbl {HRESULT ( *QueryInterface)(IAudioStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioStreamSample *This);ULONG ( *Release)(IAudioStreamSample *This);HRESULT ( *GetMediaStream)(IAudioStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IAudioStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IAudioStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IAudioStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IAudioStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *GetAudioData)(IAudioStreamSample *This, IAudioData **ppAudio);};
struct IDirect3DMaterial2Vtbl {HRESULT ( *QueryInterface)(IDirect3DMaterial2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DMaterial2 *This);ULONG ( *Release)(IDirect3DMaterial2 *This);HRESULT ( *SetMaterial)(IDirect3DMaterial2 *This, LPD3DMATERIAL);HRESULT ( *GetMaterial)(IDirect3DMaterial2 *This, LPD3DMATERIAL);HRESULT ( *GetHandle)(IDirect3DMaterial2 *This, LPDIRECT3DDEVICE2, LPD3DMATERIALHANDLE);};
struct IMtsInstanceEventsVtbl {HRESULT ( *QueryInterface)(IMtsInstanceEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsInstanceEvents *This);ULONG ( *Release)(IMtsInstanceEvents *This);HRESULT ( *OnObjectCreate)(IMtsInstanceEvents *This, LONGLONG perfCount,  GUID * guidActivity,  CLSID * clsid,  GUID * tsid, MTS_OBJID ObjectID);HRESULT ( *OnObjectRelease)(IMtsInstanceEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID);};
struct IMtsSecurityEventsVtbl {HRESULT ( *QueryInterface)(IMtsSecurityEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsSecurityEvents *This);ULONG ( *Release)(IMtsSecurityEvents *This);HRESULT ( *OnAuthenticate)(IMtsSecurityEvents *This, LONGLONG perfCount,  GUID * guidActivity, ULONG cbByteOrig, BYTE *pSidOriginalUser, ULONG cbByteCur, BYTE *pSidCurrentUser, BOOL bCurrentUserInpersonatingInProc);};
struct IPersistStreamInitVtbl {HRESULT ( *QueryInterface)(IPersistStreamInit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistStreamInit *This);ULONG ( *Release)(IPersistStreamInit *This);HRESULT ( *GetClassID)(IPersistStreamInit *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistStreamInit *This);HRESULT ( *Load)(IPersistStreamInit *This, LPSTREAM pStm);HRESULT ( *Save)(IPersistStreamInit *This, LPSTREAM pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IPersistStreamInit *This, ULARGE_INTEGER *pCbSize);HRESULT ( *InitNew)(IPersistStreamInit *This);};
struct IRowsetNewRowAfterVtbl {HRESULT ( *QueryInterface)(IRowsetNewRowAfter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNewRowAfter *This);ULONG ( *Release)(IRowsetNewRowAfter *This);HRESULT ( *SetNewDataAfter)(IRowsetNewRowAfter *This, HCHAPTER hChapter, ULONG cbbmPrevious,  BYTE *pbmPrevious, HACCESSOR hAccessor, BYTE *pData, HROW *phRow);};
struct IShellPropSheetExtVtbl {HRESULT ( *QueryInterface)(IShellPropSheetExt *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellPropSheetExt *This);ULONG ( *Release)(IShellPropSheetExt *This);HRESULT ( *AddPages)(IShellPropSheetExt *This, LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam);HRESULT ( *ReplacePage)(IShellPropSheetExt *This, UINT uPageID, LPFNADDPROPSHEETPAGE lpfnReplaceWith, LPARAM lParam);};
struct IASQLOLEStdObjectVtbl {HRESULT ( *QueryInterface)(IASQLOLEStdObject *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEStdObject *This);ULONG ( *Release)(IASQLOLEStdObject *This);HRESULT ( *GetApplication)(IASQLOLEStdObject *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEStdObject *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEStdObject *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEStdObject *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEStdObject *This, LPVOID lpvNewValue);};
struct IAudioMediaStreamVtbl {HRESULT ( *QueryInterface)(IAudioMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAudioMediaStream *This);ULONG ( *Release)(IAudioMediaStream *This);HRESULT ( *GetMultiMediaStream)(IAudioMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAudioMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAudioMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAudioMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAudioMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAudioMediaStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IAudioMediaStream *This, WAVEFORMATEX *pWaveFormatCurrent);HRESULT ( *SetFormat)(IAudioMediaStream *This,  WAVEFORMATEX *lpWaveFormat);HRESULT ( *CreateSample)(IAudioMediaStream *This, IAudioData *pAudioData, DWORD dwFlags, IAudioStreamSample **ppSample);};
struct INewShortcutHookAVtbl {HRESULT ( *QueryInterface)(INewShortcutHookA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(INewShortcutHookA *This);ULONG ( *Release)(INewShortcutHookA *This);HRESULT ( *SetReferent)(INewShortcutHookA *This, LPCSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookA *This, LPSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookA *This, LPCSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookA *This, LPSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookA *This, LPSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookA *This, LPSTR pszExtension, int cchExtension);};
struct IAMStreamControlVtbl {HRESULT ( *QueryInterface)(IAMStreamControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamControl *This);ULONG ( *Release)(IAMStreamControl *This);HRESULT ( *StartAt)(IAMStreamControl *This,  REFERENCE_TIME *ptStart, DWORD dwCookie);HRESULT ( *StopAt)(IAMStreamControl *This,  REFERENCE_TIME *ptStop, BOOL bSendExtra, DWORD dwCookie);HRESULT ( *GetInfo)(IAMStreamControl *This, AM_STREAM_INFO *pInfo);};
struct IMAPIFormFactoryVtbl {HRESULT ( *QueryInterface)(IMAPIFormFactory *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFormFactory *This);ULONG ( *Release)(IMAPIFormFactory *This);HRESULT ( *GetLastError)(IMAPIFormFactory *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *CreateClassFactory)(IMAPIFormFactory *This,  CLSID * clsidForm, ULONG ulFlags, LPCLASSFACTORY *lppClassFactory);HRESULT ( *LockServer)(IMAPIFormFactory *This, ULONG ulFlags, ULONG fLockServer);};
struct IMLangStringWStrVtbl {HRESULT ( *QueryInterface)(IMLangStringWStr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringWStr *This);ULONG ( *Release)(IMLangStringWStr *This);HRESULT ( *Sync)(IMLangStringWStr *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangStringWStr *This, int *plLen);HRESULT ( *SetMLStr)(IMLangStringWStr *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);HRESULT ( *SetWStr)(IMLangStringWStr *This, int lDestPos, int lDestLen,  WCHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetStrBufW)(IMLangStringWStr *This, int lDestPos, int lDestLen, IMLangStringBufW *pSrcBuf, int *pcchActual, int *plActualLen);HRESULT ( *GetWStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, WCHAR *pszDest, int cchDest, int *pcchActual, int *plActualLen);HRESULT ( *GetStrBufW)(IMLangStringWStr *This, int lSrcPos, int lSrcMaxLen, IMLangStringBufW **ppDestBuf, int *plDestLen);HRESULT ( *LockWStr)(IMLangStringWStr *This, int lSrcPos, int lSrcLen, int lFlags, int cchRequest, WCHAR **ppszDest, int *pcchDest, int *plDestLen);HRESULT ( *UnlockWStr)(IMLangStringWStr *This,  WCHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetLocale)(IMLangStringWStr *This, int lDestPos, int lDestLen, LCID locale);HRESULT ( *GetLocale)(IMLangStringWStr *This, int lSrcPos, int lSrcMaxLen, LCID *plocale, int *plLocalePos, int *plLocaleLen);};
struct IOleDocumentViewVtbl {HRESULT ( *QueryInterface)(IOleDocumentView *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleDocumentView *This);ULONG ( *Release)(IOleDocumentView *This);HRESULT ( *SetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite *pIPSite);HRESULT ( *GetInPlaceSite)(IOleDocumentView *This, IOleInPlaceSite **ppIPSite);HRESULT ( *GetDocument)(IOleDocumentView *This, IUnknown **ppunk);HRESULT ( *SetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *GetRect)(IOleDocumentView *This, LPRECT prcView);HRESULT ( *SetRectComplex)(IOleDocumentView *This, LPRECT prcView, LPRECT prcHScroll, LPRECT prcVScroll, LPRECT prcSizeBox);HRESULT ( *Show)(IOleDocumentView *This, BOOL fShow);HRESULT ( *UIActivate)(IOleDocumentView *This, BOOL fUIActivate);HRESULT ( *Open)(IOleDocumentView *This);HRESULT ( *CloseView)(IOleDocumentView *This, DWORD dwReserved);HRESULT ( *SaveViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *ApplyViewState)(IOleDocumentView *This, LPSTREAM pstm);HRESULT ( *Clone)(IOleDocumentView *This, IOleInPlaceSite *pIPSiteNew, IOleDocumentView **ppViewNew);};
struct IPointerInactiveVtbl {HRESULT ( *QueryInterface)(IPointerInactive *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPointerInactive *This);ULONG ( *Release)(IPointerInactive *This);HRESULT ( *GetActivationPolicy)(IPointerInactive *This, DWORD *pdwPolicy);HRESULT ( *OnInactiveMouseMove)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD grfKeyState);HRESULT ( *OnInactiveSetCursor)(IPointerInactive *This, LPCRECT pRectBounds, LONG x, LONG y, DWORD dwMouseMsg, BOOL fSetAlways);};
struct IReferenceClock2Vtbl {HRESULT ( *QueryInterface)(IReferenceClock2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReferenceClock2 *This);ULONG ( *Release)(IReferenceClock2 *This);HRESULT ( *GetTime)(IReferenceClock2 *This, REFERENCE_TIME *pTime);HRESULT ( *AdviseTime)(IReferenceClock2 *This, REFERENCE_TIME baseTime, REFERENCE_TIME streamTime, HEVENT hEvent, DWORD *pdwAdviseCookie);HRESULT ( *AdvisePeriodic)(IReferenceClock2 *This, REFERENCE_TIME startTime, REFERENCE_TIME periodTime, HSEMAPHORE hSemaphore, DWORD *pdwAdviseCookie);HRESULT ( *Unadvise)(IReferenceClock2 *This, DWORD dwAdviseCookie);};
struct _HTTP_FILTER_CONTEXT {DWORD cbSize;DWORD Revision;PVOID ServerContext;DWORD ulReserved;BOOL fIsSecurePort;PVOID pFilterContext;BOOL ( *GetServerVariable)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszVariableName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *AddResponseHeaders)(struct _HTTP_FILTER_CONTEXT *pfc, LPSTR lpszHeaders, DWORD dwReserved);BOOL ( *WriteClient)(struct _HTTP_FILTER_CONTEXT *pfc, LPVOID Buffer, LPDWORD lpdwBytes, DWORD dwReserved);void *( *AllocMem)(struct _HTTP_FILTER_CONTEXT *pfc, DWORD cbSize, DWORD dwReserved);BOOL ( *ServerSupportFunction)(struct _HTTP_FILTER_CONTEXT *pfc, enum SF_REQ_TYPE sfReq, PVOID pData, DWORD ul1, DWORD ul2);};
struct _tagCOLORMATCHSETUPA {DWORD dwSize;DWORD dwVersion;DWORD dwFlags;HWND hwndOwner;PCSTR pSourceName;PCSTR pDisplayName;PCSTR pPrinterName;DWORD dwRenderIntent;DWORD dwProofingIntent;PSTR pMonitorProfile;DWORD ccMonitorProfile;PSTR pPrinterProfile;DWORD ccPrinterProfile;PSTR pTargetProfile;DWORD ccTargetProfile;DLGPROC lpfnHook;LPARAM lParam;PCMSCALLBACKA lpfnApplyCallback;LPARAM lParamApplyCallback;};
struct tagOLEUIOBJECTPROPSA {DWORD cbStruct;DWORD dwFlags;LPPROPSHEETHEADERA lpPS;DWORD dwObject;LPOLEUIOBJINFOA lpObjInfo;DWORD dwLink;LPOLEUILINKINFOA lpLinkInfo;LPOLEUIGNRLPROPSA lpGP;LPOLEUIVIEWPROPSA lpVP;LPOLEUILINKPROPSA lpLP;};
struct tagOLEUIOBJECTPROPSW {DWORD cbStruct;DWORD dwFlags;LPPROPSHEETHEADERW lpPS;DWORD dwObject;LPOLEUIOBJINFOW lpObjInfo;DWORD dwLink;LPOLEUILINKINFOW lpLinkInfo;LPOLEUIGNRLPROPSW lpGP;LPOLEUIVIEWPROPSW lpVP;LPOLEUILINKPROPSW lpLP;};
struct IAMStreamSelectVtbl {HRESULT ( *QueryInterface)(IAMStreamSelect *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMStreamSelect *This);ULONG ( *Release)(IAMStreamSelect *This);HRESULT ( *Count)(IAMStreamSelect *This, DWORD *pcStreams);HRESULT ( *Info)(IAMStreamSelect *This, int lIndex, AM_MEDIA_TYPE **ppmt, DWORD *pdwFlags, LCID *plcid, DWORD *pdwGroup, WCHAR **ppszName, IUnknown **ppObject, IUnknown **ppUnk);HRESULT ( *Enable)(IAMStreamSelect *This, int lIndex, DWORD dwFlags);};
struct IPersistMonikerVtbl {HRESULT ( *QueryInterface)(IPersistMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistMoniker *This);ULONG ( *Release)(IPersistMoniker *This);HRESULT ( *GetClassID)(IPersistMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistMoniker *This);HRESULT ( *Load)(IPersistMoniker *This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);HRESULT ( *Save)(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc);HRESULT ( *GetCurMoniker)(IPersistMoniker *This, IMoniker **ppimkName);};
struct IRTPDemuxFilterVtbl {HRESULT ( *QueryInterface)(IRTPDemuxFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTPDemuxFilter *This);ULONG ( *Release)(IRTPDemuxFilter *This);HRESULT ( *EnumSSRCs)(IRTPDemuxFilter *This, IEnumSSRCs **ppIEnumSSRCs);HRESULT ( *GetPinInfo)(IRTPDemuxFilter *This, IPin *pIPin, DWORD *pdwSSRC, BYTE *pbPT, BOOL *pbAutoMapping, DWORD *pdwTimeout);HRESULT ( *GetSSRCInfo)(IRTPDemuxFilter *This, DWORD dwSSRC, BYTE *pbPT, IPin **ppIPin);HRESULT ( *MapSSRCToPin)(IRTPDemuxFilter *This, DWORD dwSSRC, IPin *pIPin);HRESULT ( *SetPinCount)(IRTPDemuxFilter *This, DWORD dwPinCount);HRESULT ( *SetPinTypeInfo)(IRTPDemuxFilter *This, IPin *pIPin, BYTE bPT, GUID gMinorType);HRESULT ( *SetPinMode)(IRTPDemuxFilter *This, IPin *pIPin, BOOL bAutomatic);HRESULT ( *SetPinSourceTimeout)(IRTPDemuxFilter *This, IPin *pIPin, DWORD dwMilliseconds);HRESULT ( *UnmapPin)(IRTPDemuxFilter *This, IPin *pIPin, DWORD *pdwSSRC);HRESULT ( *UnmapSSRC)(IRTPDemuxFilter *This, DWORD dwSSRC, IPin **ppIPin);};
struct IReferenceClockVtbl {HRESULT ( *QueryInterface)(IReferenceClock *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReferenceClock *This);ULONG ( *Release)(IReferenceClock *This);HRESULT ( *GetTime)(IReferenceClock *This, REFERENCE_TIME *pTime);HRESULT ( *AdviseTime)(IReferenceClock *This, REFERENCE_TIME baseTime, REFERENCE_TIME streamTime, HEVENT hEvent, DWORD *pdwAdviseCookie);HRESULT ( *AdvisePeriodic)(IReferenceClock *This, REFERENCE_TIME startTime, REFERENCE_TIME periodTime, HSEMAPHORE hSemaphore, DWORD *pdwAdviseCookie);HRESULT ( *Unadvise)(IReferenceClock *This, DWORD dwAdviseCookie);};
struct IRowsetCopyRowsVtbl {HRESULT ( *QueryInterface)(IRowsetCopyRows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetCopyRows *This);ULONG ( *Release)(IRowsetCopyRows *This);HRESULT ( *CloseSource)(IRowsetCopyRows *This, HSOURCE hSourceID);HRESULT ( *CopyByHROWS)(IRowsetCopyRows *This, HSOURCE hSourceID, HCHAPTER hReserved, LONG cRows,  HROW  *    rghRows, ULONG bFlags);HRESULT ( *CopyRows)(IRowsetCopyRows *This, HSOURCE hSourceID, HCHAPTER hReserved, LONG cRows, ULONG bFlags, ULONG *pcRowsCopied);HRESULT ( *DefineSource)(IRowsetCopyRows *This,  IRowset *pRowsetSource,  ULONG cColIds,  LONG  *    rgSourceColumns,  LONG  *    rgTargetColumns, HSOURCE *phSourceID);};
struct _OUTLINETEXTMETRICA {UINT otmSize;TEXTMETRICA otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct _OUTLINETEXTMETRICW {UINT otmSize;TEXTMETRICW otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct IAVIEditStreamVtbl {HRESULT ( *QueryInterface)(IAVIEditStream *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIEditStream *This);ULONG ( *Release)(IAVIEditStream *This);HRESULT ( *Cut)(IAVIEditStream *This, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult);HRESULT ( *Copy)(IAVIEditStream *This, LONG *plStart, LONG *plLength, PAVISTREAM *ppResult);HRESULT ( *Paste)(IAVIEditStream *This, LONG *plPos, LONG *plLength, PAVISTREAM pstream, LONG lStart, LONG lEnd);HRESULT ( *Clone)(IAVIEditStream *This, PAVISTREAM *ppResult);HRESULT ( *SetInfo)(IAVIEditStream *This, AVISTREAMINFOW *lpInfo, LONG cbInfo);};
struct SIP_DISPATCH_INFO_ {DWORD cbSize;HANDLE hSIP;pCryptSIPGetSignedDataMsg pfGet;pCryptSIPPutSignedDataMsg pfPut;pCryptSIPCreateIndirectData pfCreate;pCryptSIPVerifyIndirectData pfVerify;pCryptSIPRemoveSignedDataMsg pfRemove;};
struct _MIDL_STUB_MESSAGE {PRPC_MESSAGE RpcMsg;unsigned char *Buffer;unsigned char *BufferStart;unsigned char *BufferEnd;unsigned char *BufferMark;unsigned int BufferLength;unsigned int MemorySize;unsigned char *Memory;int IsClient;int ReuseBuffer;unsigned char *AllocAllNodesMemory;unsigned char *AllocAllNodesMemoryEnd;int IgnoreEmbeddedPointers;unsigned char *PointerBufferMark;unsigned char fBufferValid;unsigned char Unused;unsigned int MaxCount;unsigned int Offset;unsigned int ActualCount;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);unsigned char *StackTop;unsigned char *pPresentedType;unsigned char *pTransmitType;handle_t SavedHandle; struct _MIDL_STUB_DESC *StubDesc;struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;unsigned int FullPtrRefId;int fCheckBounds;int fInDontFree : 1;int fDontCallFreeInst : 1;int fInOnlyParam : 1;int fHasReturn : 1;unsigned int dwDestContext;void *pvDestContext;NDR_SCONTEXT *SavedContextHandles;int ParamNumber;struct IRpcChannelBuffer *pRpcChannelBuffer;PARRAY_INFO pArrayInfo;unsigned int *SizePtrCountArray;unsigned int *SizePtrOffsetArray;unsigned int *SizePtrLengthArray;void *pArgQueue;unsigned int dwStubPhase;PNDR_PIPE_DESC pPipeDesc;PNDR_ASYNC_MESSAGE pAsyncMsg;unsigned int Reserved[3];};
struct IAdviseSinkExVtbl {HRESULT ( *QueryInterface)(IAdviseSinkEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSinkEx *This);ULONG ( *Release)(IAdviseSinkEx *This);void ( *OnDataChange)(IAdviseSinkEx *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSinkEx *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSinkEx *This, IMoniker *pmk);void ( *OnSave)(IAdviseSinkEx *This);void ( *OnClose)(IAdviseSinkEx *This);void ( *OnViewStatusChange)(IAdviseSinkEx *This, DWORD dwViewStatus);};
struct IClassRefreshVtbl {HRESULT ( *QueryInterface)(IClassRefresh *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassRefresh *This);ULONG ( *Release)(IClassRefresh *This);HRESULT ( *GetUpgrades)(IClassRefresh *This, ULONG cClasses, CLSID *pClassList, CSPLATFORM Platform, LCID Locale, PACKAGEINFOLIST *pPackageInfoList);HRESULT ( *CommitUpgrades)(IClassRefresh *This);};
struct IErrorRecordsVtbl {HRESULT ( *QueryInterface)(IErrorRecords *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorRecords *This);ULONG ( *Release)(IErrorRecords *This);HRESULT ( *AddErrorRecord)(IErrorRecords *This, ERRORINFO *pErrorInfo, DWORD dwLookupID, DISPPARAMS *pdispparams, IUnknown *punkCustomError, DWORD dwDynamicErrorID);HRESULT ( *GetBasicErrorInfo)(IErrorRecords *This, ULONG ulRecordNum, ERRORINFO *pErrorInfo);HRESULT ( *GetCustomErrorObject)(IErrorRecords *This, ULONG ulRecordNum,  IID * riid, IUnknown **ppObject);HRESULT ( *GetErrorInfo)(IErrorRecords *This, ULONG ulRecordNum, LCID lcid, IErrorInfo **ppErrorInfo);HRESULT ( *GetErrorParameters)(IErrorRecords *This, ULONG ulRecordNum, DISPPARAMS *pdispparams);HRESULT ( *GetRecordCount)(IErrorRecords *This, ULONG *pcRecords);};
struct IQueueCommandVtbl {HRESULT ( *QueryInterface)(IQueueCommand *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IQueueCommand *This);ULONG ( *Release)(IQueueCommand *This);HRESULT ( *InvokeAtStreamTime)(IQueueCommand *This, IDeferredCommand **pCmd, REFTIME time, GUID *iid, int dispidMethod, short wFlags, int cArgs, VARIANT *pDispParams, VARIANT *pvarResult, short *puArgErr);HRESULT ( *InvokeAtPresentationTime)(IQueueCommand *This, IDeferredCommand **pCmd, REFTIME time, GUID *iid, int dispidMethod, short wFlags, int cArgs, VARIANT *pDispParams, VARIANT *pvarResult, short *puArgErr);};
struct IRTPRPHFilterVtbl {HRESULT ( *QueryInterface)(IRTPRPHFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTPRPHFilter *This);ULONG ( *Release)(IRTPRPHFilter *This);HRESULT ( *OverridePayloadType)(IRTPRPHFilter *This, BYTE bPayloadType);HRESULT ( *GetPayloadType)(IRTPRPHFilter *This, BYTE *lpbPayloadType);HRESULT ( *SetMediaBufferSize)(IRTPRPHFilter *This, DWORD dwMaxMediaBufferSize);HRESULT ( *GetMediaBufferSize)(IRTPRPHFilter *This, LPDWORD lpdwMaxMediaBufferSize);HRESULT ( *SetOutputPinMediaType)(IRTPRPHFilter *This, AM_MEDIA_TYPE *lpMediaPinType);HRESULT ( *GetOutputPinMediaType)(IRTPRPHFilter *This, AM_MEDIA_TYPE **ppMediaPinType);HRESULT ( *SetTimeoutDuration)(IRTPRPHFilter *This, DWORD dwDejitterTime, DWORD dwLostPacketTime);HRESULT ( *GetTimeoutDuration)(IRTPRPHFilter *This, LPDWORD lpdwDejitterTime, LPDWORD lpdwLostPacketTime);};
struct IRowsetChangeVtbl {HRESULT ( *QueryInterface)(IRowsetChange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetChange *This);ULONG ( *Release)(IRowsetChange *This);HRESULT ( *DeleteRows)(IRowsetChange *This, HCHAPTER hReserved, ULONG cRows,  HROW  *    rghRows, DBROWSTATUS  *    rgRowStatus);HRESULT ( *SetData)(IRowsetChange *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *InsertRow)(IRowsetChange *This, HCHAPTER hReserved, HACCESSOR hAccessor, void *pData, HROW *phRow);};
struct IRowsetNotifyVtbl {HRESULT ( *QueryInterface)(IRowsetNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetNotify *This);ULONG ( *Release)(IRowsetNotify *This);HRESULT ( *OnFieldChange)(IRowsetNotify *This, IRowset *pRowset, HROW hRow, ULONG cColumns, ULONG  *    rgColumns, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);HRESULT ( *OnRowChange)(IRowsetNotify *This, IRowset *pRowset, ULONG cRows,  HROW  *    rghRows, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);HRESULT ( *OnRowsetChange)(IRowsetNotify *This, IRowset *pRowset, DBREASON eReason, DBEVENTPHASE ePhase, BOOL fCantDeny);};
struct IShellExtInitVtbl {HRESULT ( *QueryInterface)(IShellExtInit *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellExtInit *This);ULONG ( *Release)(IShellExtInit *This);HRESULT ( *Initialize)(IShellExtInit *This, LPCITEMIDLIST pidlFolder, LPDATAOBJECT lpdobj, HKEY hkeyProgID);};
struct IStreamSampleVtbl {HRESULT ( *QueryInterface)(IStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStreamSample *This);ULONG ( *Release)(IStreamSample *This);HRESULT ( *GetMediaStream)(IStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);};
struct IAdviseSink2Vtbl {HRESULT ( *QueryInterface)(IAdviseSink2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink2 *This);ULONG ( *Release)(IAdviseSink2 *This);void ( *OnDataChange)(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink2 *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink2 *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink2 *This);void ( *OnClose)(IAdviseSink2 *This);void ( *OnLinkSrcChange)(IAdviseSink2 *This, IMoniker *pmk);};
struct IDataConvertVtbl {HRESULT ( *QueryInterface)(IDataConvert *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataConvert *This);ULONG ( *Release)(IDataConvert *This);HRESULT ( *DataConvert)(IDataConvert *This, DBTYPE wSrcType, DBTYPE wDstType, ULONG cbSrcLength, ULONG *pcbDstLength, void *pSrc, void *pDst, ULONG cbDstMaxLength, DBSTATUS dbsSrcStatus, DBSTATUS *pdbsStatus, BYTE bPrecision, BYTE bScale, DBDATACONVERT dwFlags);HRESULT ( *CanConvert)(IDataConvert *This, DBTYPE wSrcType, DBTYPE wDstType);HRESULT ( *GetConversionSize)(IDataConvert *This, DBTYPE wSrcType, DBTYPE wDstType, ULONG *pcbSrcLength, ULONG *pcbDstLength, void *pSrc);};
typedef SNMPAPI_STATUS ( *SNMPAPI_CALLBACK)(HSNMP_SESSION hSession, HWND hWnd, UINT wMsg, WPARAM wParam, LPARAM lParam, LPVOID lClientpData);
struct tagCREATESTRUCTA {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;};
struct BasicVidCapInfo {DWORD dwFormatTag;VIDEO_FORMAT_ID Id;char szFormat[128];WORD wCPUUtilizationEncode;WORD wCPUUtilizationDecode;BOOL bSendEnabled;BOOL bRecvEnabled;WORD wSortIndex;VIDEO_SIZES enumVideoSize;BITMAPINFOHEADER bih;UINT uFrameRate;DWORD dwBitsPerSample;UINT uAvgBitrate;UINT uMaxBitrate;};
struct IAdviseSinkVtbl {HRESULT ( *QueryInterface)(IAdviseSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAdviseSink *This);ULONG ( *Release)(IAdviseSink *This);void ( *OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void ( *OnViewChange)(IAdviseSink *This, DWORD dwAspect, LONG lindex);void ( *OnRename)(IAdviseSink *This, IMoniker *pmk);void ( *OnSave)(IAdviseSink *This);void ( *OnClose)(IAdviseSink *This);};
struct IAlterTableVtbl {HRESULT ( *QueryInterface)(IAlterTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAlterTable *This);ULONG ( *Release)(IAlterTable *This);HRESULT ( *AlterColumn)(IAlterTable *This, DBID *pTableId, DBID *pColumnId, DBCOLUMNDESCFLAGS ColumnDescFlags, DBCOLUMNDESC *pColumnDesc);HRESULT ( *AlterTable)(IAlterTable *This, DBID *pTableId, DBID *pNewTableId, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);};
struct IDataObjectVtbl {HRESULT ( *QueryInterface)(IDataObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataObject *This);ULONG ( *Release)(IDataObject *This);HRESULT ( *GetData)(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);HRESULT ( *GetDataHere)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);HRESULT ( *QueryGetData)(IDataObject *This, FORMATETC *pformatetc);HRESULT ( *GetCanonicalFormatEtc)(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);HRESULT ( *SetData)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *EnumFormatEtc)(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);HRESULT ( *DAdvise)(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *DUnadvise)(IDataObject *This, DWORD dwConnection);HRESULT ( *EnumDAdvise)(IDataObject *This, IEnumSTATDATA **ppenumAdvise);};
struct IOleControlVtbl {HRESULT ( *QueryInterface)(IOleControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControl *This);ULONG ( *Release)(IOleControl *This);HRESULT ( *GetControlInfo)(IOleControl *This, CONTROLINFO *pCI);HRESULT ( *OnMnemonic)(IOleControl *This, MSG *pMsg);HRESULT ( *OnAmbientPropertyChange)(IOleControl *This, DISPID dispID);HRESULT ( *FreezeEvents)(IOleControl *This, BOOL bFreeze);};
struct tagCTLINITIEDIT {DWORD cbSize;HWND hwnd;int id;WORD ieb;WORD iedo;WORD iei;WORD ien;WORD ierec;WORD ies;WORD iesec;WORD pdts;HPENDATA hpndt;HGDIOBJ hgdiobj;HPEN hpenGrid;POINT ptOrgGrid;WORD wVGrid;WORD wHGrid;DWORD dwApp;DWORD dwReserved;};
struct tagMONMSGSTRUCT {UINT cb;HWND hwndTo;DWORD dwTime;HANDLE hTask;UINT wMsg;WPARAM wParam;LPARAM lParam;DDEML_MSG_HOOK_DATA dmhd;};
struct IShellIconVtbl {HRESULT ( *QueryInterface)(IShellIcon *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellIcon *This);ULONG ( *Release)(IShellIcon *This);HRESULT ( *GetIconOf)(IShellIcon *This, LPCITEMIDLIST pidl, UINT flags, LPINT lpIconIndex);};
struct _DDSURFACEDESC {DWORD dwSize;DWORD dwFlags;DWORD dwHeight;DWORD dwWidth;_DDSURFACEDESC___091DBF7D405BE25E65B16620C008128B __anonymous0;DWORD dwBackBufferCount;_DDSURFACEDESC___9AB659F8D6A45F8C7834A76B9C40973B __anonymous1;DWORD dwAlphaBitDepth;DWORD dwReserved;LPVOID lpSurface;DDCOLORKEY ddckCKDestOverlay;DDCOLORKEY ddckCKDestBlt;DDCOLORKEY ddckCKSrcOverlay;DDCOLORKEY ddckCKSrcBlt;DDPIXELFORMAT ddpfPixelFormat;DDSCAPS ddsCaps;};
struct _avitimedindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved_3;AVITIMEDINDEX_ENTRY aIndex[1362];DWORD adwTrailingFill[2734];};
struct tagMONCBSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;DWORD dwRet;UINT wType;UINT wFmt;HCONV hConv;HSZ hsz1;HSZ hsz2;HDDEDATA hData;DWORD dwData1;DWORD dwData2;CONVCONTEXT cc;DWORD cbData;DWORD Data[8];};
struct tagWNDCLASSEXA {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;HICON hIconSm;};
struct IAccessorVtbl {HRESULT ( *QueryInterface)(IAccessor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAccessor *This);ULONG ( *Release)(IAccessor *This);HRESULT ( *AddRefAccessor)(IAccessor *This, HACCESSOR hAccessor, ULONG *pcRefCount);HRESULT ( *CreateAccessor)(IAccessor *This, DBACCESSORFLAGS dwAccessorFlags, ULONG cBindings,  DBBINDING  *    rgBindings, ULONG cbRowSize, HACCESSOR *phAccessor, DBBINDSTATUS  *    rgStatus);HRESULT ( *GetBindings)(IAccessor *This, HACCESSOR hAccessor, DBACCESSORFLAGS *pdwAccessorFlags, ULONG *pcBindings, DBBINDING **prgBindings);HRESULT ( *ReleaseAccessor)(IAccessor *This, HACCESSOR hAccessor, ULONG *pcRefCount);};
struct IOleCacheVtbl {HRESULT ( *QueryInterface)(IOleCache *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache *This);ULONG ( *Release)(IOleCache *This);HRESULT ( *Cache)(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);};
struct IReadDataVtbl {HRESULT ( *QueryInterface)(IReadData *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReadData *This);ULONG ( *Release)(IReadData *This);HRESULT ( *ReadData)(IReadData *This, HCHAPTER hChapter, ULONG cbBookmark,  BYTE *pBookmark, LONG lRowsOffset, HACCESSOR hAccessor, LONG cRows, ULONG *pcRowsObtained, BYTE **ppFixedData, ULONG *pcbVariableTotal, BYTE **ppVariableData);HRESULT ( *ReleaseChapter)(IReadData *This, HCHAPTER hChapter);};
struct _WSAQuerySetA {DWORD dwSize;LPSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct _D3DMATERIAL {DWORD dwSize;_D3DMATERIAL___F37024B6A2A7DA8F8161E452127F778F __anonymous0;_D3DMATERIAL___B545799AB1B094EA7448ADA6B118C0D5 __anonymous1;_D3DMATERIAL___48A7D73869B8DD97079A7DB0052C867A __anonymous2;_D3DMATERIAL___4E89CE7B3871A99DAB3B73BC63770FCE __anonymous3;_D3DMATERIAL___0E29CCD1ABCFA56B0343B217BB93547E __anonymous4;D3DTEXTUREHANDLE hTexture;DWORD dwRampSize;};
struct _avistdindex {FOURCC fcc;UINT cb;WORD wLongsPerEntry;BYTE bIndexSubType;BYTE bIndexType;DWORD nEntriesInUse;DWORD dwChunkId;DWORDLONG qwBaseOffset;DWORD dwReserved_3;AVISTDINDEX_ENTRY aIndex[2044];};
struct _browseinfoA {HWND hwndOwner;LPCITEMIDLIST pidlRoot;LPSTR pszDisplayName;LPCSTR lpszTitle;UINT ulFlags;BFFCALLBACK lpfn;LPARAM lParam;int iImage;};
struct tagEMRPLGBLT {EMR emr;RECTL rclBounds;POINTL aptlDest[3];LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct tagWNDCLASSA {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;};
struct IStreamVtbl {HRESULT ( *QueryInterface)(IStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStream *This);ULONG ( *Release)(IStream *This);HRESULT ( *Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Write)(IStream *This,  void *pv, ULONG cb, ULONG *pcbWritten);HRESULT ( *Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *SetSize)(IStream *This, ULARGE_INTEGER libNewSize);HRESULT ( *CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT ( *Commit)(IStream *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStream *This);HRESULT ( *LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT ( *Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT ( *Clone)(IStream *This, IStream **ppstm);};
union _LLC_BUFFER {PLLC_BUFFER pNext;LLC_NEXT_BUFFER Next;struct _LLC_BUFFER__LlcNextBuffer Buffer;LLC_NOT_CONTIGUOUS_BUFFER NotContiguous;struct _LLC_BUFFER___2D0AC769B473AF70044942827F91E8BC NotCont;LLC_CONTIGUOUS_BUFFER Contiguous;struct _LLC_BUFFER___E568244FB8030BE4C3EFA72F3DEF7F57 Cont;};
struct tagCONVINFO {DWORD cb;DWORD hUser;HCONV hConvPartner;HSZ hszSvcPartner;HSZ hszServiceReq;HSZ hszTopic;HSZ hszItem;UINT wFmt;UINT wType;UINT wStatus;UINT wConvst;UINT wLastError;HCONVLIST hConvList;CONVCONTEXT ConvCtxt;HWND hwnd;HWND hwndPartner;};
struct tagCCINFOA {CHAR szClass[32];DWORD flOptions;CHAR szDesc[32];UINT cxDefault;UINT cyDefault;DWORD flStyleDefault;DWORD flExtStyleDefault;DWORD flCtrlTypeMask;CHAR szTextDefault[256];INT cStyleFlags;LPCCSTYLEFLAGA aStyleFlags;LPFNCCSTYLEA lpfnStyle;LPFNCCSIZETOTEXTA lpfnSizeToText;DWORD dwReserved1;DWORD dwReserved2;};
struct _reobject {DWORD cbStruct;LONG cp;CLSID clsid;LPOLEOBJECT poleobj;LPSTORAGE pstg;LPOLECLIENTSITE polesite;SIZEL sizel;DWORD dvaspect;DWORD dwFlags;DWORD dwUser;};
struct _DDBLTFX {DWORD dwSize;DWORD dwDDFX;DWORD dwROP;DWORD dwDDROP;DWORD dwRotationAngle;DWORD dwZBufferOpCode;DWORD dwZBufferLow;DWORD dwZBufferHigh;DWORD dwZBufferBaseDest;DWORD dwZDestConstBitDepth;_DDBLTFX___EA6EC20695B0AA8ECF92A441DE55A935 __anonymous0;DWORD dwZSrcConstBitDepth;_DDBLTFX___702C52B3655764E63C007A6B73D01C19 __anonymous1;DWORD dwAlphaEdgeBlendBitDepth;DWORD dwAlphaEdgeBlend;DWORD dwReserved;DWORD dwAlphaDestConstBitDepth;_DDBLTFX___3639C047B3E88B857708792B1F3FEC83 __anonymous2;DWORD dwAlphaSrcConstBitDepth;_DDBLTFX___C0828DA952883A43DEF8D462ACC90C87 __anonymous4;_DDBLTFX___4C109671A06E28B8127C40041AB5795C __anonymous6;DDCOLORKEY ddckDestColorkey;DDCOLORKEY ddckSrcColorkey;};
struct IExchangeImportHierarchyChangesVtbl {HRESULT ( *QueryInterface)(IExchangeImportHierarchyChanges *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeImportHierarchyChanges *This);ULONG ( *Release)(IExchangeImportHierarchyChanges *This);HRESULT ( *GetLastError)(IExchangeImportHierarchyChanges *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Config)(IExchangeImportHierarchyChanges *This, LPSTREAM lpStream, ULONG ulFlags);HRESULT ( *UpdateState)(IExchangeImportHierarchyChanges *This, LPSTREAM lpStream);HRESULT ( *ImportFolderChange)(IExchangeImportHierarchyChanges *This, ULONG cpvalChanges, LPSPropValue ppvalChanges);HRESULT ( *ImportFolderDeletion)(IExchangeImportHierarchyChanges *This, ULONG ulFlags, LPENTRYLIST lpSrcEntryList);};
struct IUniformResourceLocatorAVtbl {HRESULT ( *QueryInterface)(IUniformResourceLocatorA *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(IUniformResourceLocatorA *This);ULONG ( *Release)(IUniformResourceLocatorA *This);HRESULT ( *SetURL)(IUniformResourceLocatorA *This, LPCSTR pcszURL, DWORD dwInFlags);HRESULT ( *GetURL)(IUniformResourceLocatorA *This, LPSTR *ppszURL);HRESULT ( *InvokeCommand)(IUniformResourceLocatorA *This, PURLINVOKECOMMANDINFOA purlici);};
struct IDirect3DRMPicked2ArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMPicked2Array *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMPicked2Array *This);ULONG ( *Release)(IDirect3DRMPicked2Array *This);DWORD ( *GetSize)(IDirect3DRMPicked2Array *This);HRESULT ( *GetPick)(IDirect3DRMPicked2Array *This, DWORD index, LPDIRECT3DRMVISUAL *, LPDIRECT3DRMFRAMEARRAY *, LPD3DRMPICKDESC2);};
struct IDirectDrawStreamSampleVtbl {HRESULT ( *QueryInterface)(IDirectDrawStreamSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawStreamSample *This);ULONG ( *Release)(IDirectDrawStreamSample *This);HRESULT ( *GetMediaStream)(IDirectDrawStreamSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IDirectDrawStreamSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IDirectDrawStreamSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IDirectDrawStreamSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IDirectDrawStreamSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *GetSurface)(IDirectDrawStreamSample *This, IDirectDrawSurface **ppDirectDrawSurface, RECT *pRect);HRESULT ( *SetRect)(IDirectDrawStreamSample *This,  RECT *pRect);};
struct IDirect3DRMPickedArrayVtbl {HRESULT ( *QueryInterface)(IDirect3DRMPickedArray *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMPickedArray *This);ULONG ( *Release)(IDirect3DRMPickedArray *This);DWORD ( *GetSize)(IDirect3DRMPickedArray *This);HRESULT ( *GetPick)(IDirect3DRMPickedArray *This, DWORD index, LPDIRECT3DRMVISUAL *, LPDIRECT3DRMFRAMEARRAY *, LPD3DRMPICKDESC);};
struct IExchangeManageStoreVtbl {HRESULT ( *QueryInterface)(IExchangeManageStore *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeManageStore *This);ULONG ( *Release)(IExchangeManageStore *This);HRESULT ( *CreateStoreEntryID)(IExchangeManageStore *This, LPSTR lpszMsgStoreDN, LPSTR lpszMailboxDN, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *EntryIDFromSourceKey)(IExchangeManageStore *This, ULONG cFolderKeySize, BYTE *lpFolderSourceKey, ULONG cMessageKeySize, BYTE *lpMessageSourceKey, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *GetRights)(IExchangeManageStore *This, ULONG cbUserEntryID, LPENTRYID lpUserEntryID, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG *lpulRights);HRESULT ( *GetMailboxTable)(IExchangeManageStore *This, LPSTR lpszServerName, LPMAPITABLE *lppTable, ULONG ulFlags);HRESULT ( *GetPublicFolderTable)(IExchangeManageStore *This, LPSTR lpszServerName, LPMAPITABLE *lppTable, ULONG ulFlags);};
struct IMLangConvertCharsetVtbl {HRESULT ( *QueryInterface)(IMLangConvertCharset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangConvertCharset *This);ULONG ( *Release)(IMLangConvertCharset *This);HRESULT ( *Initialize)(IMLangConvertCharset *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty);HRESULT ( *GetSourceCodePage)(IMLangConvertCharset *This, UINT *puiSrcCodePage);HRESULT ( *GetDestinationCodePage)(IMLangConvertCharset *This, UINT *puiDstCodePage);HRESULT ( *GetProperty)(IMLangConvertCharset *This, DWORD *pdwProperty);HRESULT ( *DoConversion)(IMLangConvertCharset *This, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *DoConversionToUnicode)(IMLangConvertCharset *This, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *DoConversionFromUnicode)(IMLangConvertCharset *This, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);};
struct _EXTENSION_CONTROL_BLOCK {DWORD cbSize;DWORD dwVersion;HCONN ConnID;DWORD dwHttpStatusCode;CHAR lpszLogData[80];LPSTR lpszMethod;LPSTR lpszQueryString;LPSTR lpszPathInfo;LPSTR lpszPathTranslated;DWORD cbTotalBytes;DWORD cbAvailable;LPBYTE lpbData;LPSTR lpszContentType;BOOL ( *GetServerVariable)(HCONN hConn, LPSTR lpszVariableName, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *WriteClient)(HCONN ConnID, LPVOID Buffer, LPDWORD lpdwBytes, DWORD dwReserved);BOOL ( *ReadClient)(HCONN ConnID, LPVOID lpvBuffer, LPDWORD lpdwSize);BOOL ( *ServerSupportFunction)(HCONN hConn, DWORD dwHSERequest, LPVOID lpvBuffer, LPDWORD lpdwSize, LPDWORD lpdwDataType);};
struct IExchangeFolderACLsVtbl {HRESULT ( *QueryInterface)(IExchangeFolderACLs *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeFolderACLs *This);ULONG ( *Release)(IExchangeFolderACLs *This);HRESULT ( *HrDelete)(IExchangeFolderACLs *This);HRESULT ( *HrGet)(IExchangeFolderACLs *This, LPLONG lplRights, LPSTR *lppszDisplayName, ULONG *lpcbentryid, LPENTRYID *lppentryid);HRESULT ( *HrInsert)(IExchangeFolderACLs *This, LONG lRights, LPSTR lpszDisplayName, ULONG cbentryid, LPENTRYID lpentryid, LPLONG lplRights);HRESULT ( *HrModify)(IExchangeFolderACLs *This, LONG lRights, LPLONG lplRights);HRESULT ( *HrSeek)(IExchangeFolderACLs *This, LONG lPos);HRESULT ( *HrTell)(IExchangeFolderACLs *This, LPLONG lplPos);};
struct IReconcilableObjectVtbl {HRESULT ( *QueryInterface)(IReconcilableObject *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(IReconcilableObject *This);ULONG ( *Release)(IReconcilableObject *This);HRESULT ( *Reconcile)(IReconcilableObject *This, IReconcileInitiator *pInitiator, DWORD dwFlags, HWND hwndOwner, HWND hwndProgressFeedback, ULONG ulcInput, IMoniker **rgpmkOtherInput, PLONG plOutIndex, IStorage *pstgNewResidues, PVOID pvReserved);HRESULT ( *GetProgressFeedbackMaxEstimate)(IReconcilableObject *This, PULONG pulProgressMax);};
struct IDirectDrawPaletteVtbl {HRESULT ( *QueryInterface)(IDirectDrawPalette *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawPalette *This);ULONG ( *Release)(IDirectDrawPalette *This);HRESULT ( *GetCaps)(IDirectDrawPalette *This, LPDWORD);HRESULT ( *GetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);HRESULT ( *Initialize)(IDirectDrawPalette *This, LPDIRECTDRAW, DWORD, LPPALETTEENTRY);HRESULT ( *SetEntries)(IDirectDrawPalette *This, DWORD, DWORD, DWORD, LPPALETTEENTRY);};
struct IDirect3DMaterialVtbl {HRESULT ( *QueryInterface)(IDirect3DMaterial *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DMaterial *This);ULONG ( *Release)(IDirect3DMaterial *This);HRESULT ( *Initialize)(IDirect3DMaterial *This, LPDIRECT3D);HRESULT ( *SetMaterial)(IDirect3DMaterial *This, LPD3DMATERIAL);HRESULT ( *GetMaterial)(IDirect3DMaterial *This, LPD3DMATERIAL);HRESULT ( *GetHandle)(IDirect3DMaterial *This, LPDIRECT3DDEVICE, LPD3DMATERIALHANDLE);HRESULT ( *Reserve)(IDirect3DMaterial *This);HRESULT ( *Unreserve)(IDirect3DMaterial *This);};
struct IDirect3DTexture2Vtbl {HRESULT ( *QueryInterface)(IDirect3DTexture2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DTexture2 *This);ULONG ( *Release)(IDirect3DTexture2 *This);HRESULT ( *GetHandle)(IDirect3DTexture2 *This, LPDIRECT3DDEVICE2, LPD3DTEXTUREHANDLE);HRESULT ( *PaletteChanged)(IDirect3DTexture2 *This, DWORD, DWORD);HRESULT ( *Load)(IDirect3DTexture2 *This, LPDIRECT3DTEXTURE2);};
struct IOleCommandTargetVtbl {HRESULT ( *QueryInterface)(IOleCommandTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCommandTarget *This);ULONG ( *Release)(IOleCommandTarget *This);HRESULT ( *QueryStatus)(IOleCommandTarget *This,  GUID *pguidCmdGroup, ULONG cCmds, OLECMD  *    prgCmds, OLECMDTEXT *pCmdText);HRESULT ( *Exec)(IOleCommandTarget *This,  GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);};
struct IUrlHistoryNotifyVtbl {HRESULT ( *QueryInterface)(IUrlHistoryNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryNotify *This);ULONG ( *Release)(IUrlHistoryNotify *This);HRESULT ( *QueryStatus)(IUrlHistoryNotify *This,  GUID *pguidCmdGroup, ULONG cCmds, OLECMD  *    prgCmds, OLECMDTEXT *pCmdText);HRESULT ( *Exec)(IUrlHistoryNotify *This,  GUID *pguidCmdGroup, DWORD nCmdID, DWORD nCmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);};
struct IDirectDrawVideoVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideo *This);ULONG ( *Release)(IDirectDrawVideo *This);HRESULT ( *GetSwitches)(IDirectDrawVideo *This, DWORD *pSwitches);HRESULT ( *SetSwitches)(IDirectDrawVideo *This, DWORD Switches);HRESULT ( *GetCaps)(IDirectDrawVideo *This, DDCAPS *pCaps);HRESULT ( *GetEmulatedCaps)(IDirectDrawVideo *This, DDCAPS *pCaps);HRESULT ( *GetSurfaceDesc)(IDirectDrawVideo *This, DDSURFACEDESC *pSurfaceDesc);HRESULT ( *GetFourCCCodes)(IDirectDrawVideo *This, DWORD *pCount, DWORD *pCodes);HRESULT ( *SetDirectDraw)(IDirectDrawVideo *This, LPDIRECTDRAW pDirectDraw);HRESULT ( *GetDirectDraw)(IDirectDrawVideo *This, LPDIRECTDRAW *ppDirectDraw);HRESULT ( *GetSurfaceType)(IDirectDrawVideo *This, DWORD *pSurfaceType);HRESULT ( *SetDefault)(IDirectDrawVideo *This);HRESULT ( *UseScanLine)(IDirectDrawVideo *This, int UseScanLine);HRESULT ( *CanUseScanLine)(IDirectDrawVideo *This, int *UseScanLine);HRESULT ( *UseOverlayStretch)(IDirectDrawVideo *This, int UseOverlayStretch);HRESULT ( *CanUseOverlayStretch)(IDirectDrawVideo *This, int *UseOverlayStretch);HRESULT ( *UseWhenFullScreen)(IDirectDrawVideo *This, int UseWhenFullScreen);HRESULT ( *WillUseFullScreen)(IDirectDrawVideo *This, int *UseWhenFullScreen);};
struct IMLangStringAStrVtbl {HRESULT ( *QueryInterface)(IMLangStringAStr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangStringAStr *This);ULONG ( *Release)(IMLangStringAStr *This);HRESULT ( *Sync)(IMLangStringAStr *This, BOOL fNoAccess);HRESULT ( *GetLength)(IMLangStringAStr *This, int *plLen);HRESULT ( *SetMLStr)(IMLangStringAStr *This, int lDestPos, int lDestLen, IUnknown *pSrcMLStr, int lSrcPos, int lSrcLen);HRESULT ( *GetMLStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, IUnknown *pUnkOuter, DWORD dwClsContext,  IID *piid, IUnknown **ppDestMLStr, int *plDestPos, int *plDestLen);HRESULT ( *SetAStr)(IMLangStringAStr *This, int lDestPos, int lDestLen, UINT uCodePage,  CHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetStrBufA)(IMLangStringAStr *This, int lDestPos, int lDestLen, UINT uCodePage, IMLangStringBufA *pSrcBuf, int *pcchActual, int *plActualLen);HRESULT ( *GetAStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, UINT uCodePageIn, UINT *puCodePageOut, CHAR *pszDest, int cchDest, int *pcchActual, int *plActualLen);HRESULT ( *GetStrBufA)(IMLangStringAStr *This, int lSrcPos, int lSrcMaxLen, UINT *puDestCodePage, IMLangStringBufA **ppDestBuf, int *plDestLen);HRESULT ( *LockAStr)(IMLangStringAStr *This, int lSrcPos, int lSrcLen, int lFlags, UINT uCodePageIn, int cchRequest, UINT *puCodePageOut, CHAR **ppszDest, int *pcchDest, int *plDestLen);HRESULT ( *UnlockAStr)(IMLangStringAStr *This,  CHAR *pszSrc, int cchSrc, int *pcchActual, int *plActualLen);HRESULT ( *SetLocale)(IMLangStringAStr *This, int lDestPos, int lDestLen, LCID locale);HRESULT ( *GetLocale)(IMLangStringAStr *This, int lSrcPos, int lSrcMaxLen, LCID *plocale, int *plLocalePos, int *plLocaleLen);};
struct IOleControlSiteVtbl {HRESULT ( *QueryInterface)(IOleControlSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleControlSite *This);ULONG ( *Release)(IOleControlSite *This);HRESULT ( *OnControlInfoChanged)(IOleControlSite *This);HRESULT ( *LockInPlaceActive)(IOleControlSite *This, BOOL fLock);HRESULT ( *GetExtendedControl)(IOleControlSite *This, IDispatch **ppDisp);HRESULT ( *TransformCoords)(IOleControlSite *This, POINTL *pPtlHimetric, POINTF *pPtfContainer, DWORD dwFlags);HRESULT ( *TranslateAcceleratorA)(IOleControlSite *This, MSG *pMsg, DWORD grfModifiers);HRESULT ( *OnFocus)(IOleControlSite *This, BOOL fGotFocus);HRESULT ( *ShowPropertyFrame)(IOleControlSite *This);};
struct IOleUILinkInfoAVtbl {HRESULT ( *QueryInterface)(IOleUILinkInfoA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUILinkInfoA *This);ULONG ( *Release)(IOleUILinkInfoA *This);DWORD ( *GetNextLink)(IOleUILinkInfoA *This, DWORD dwLink);HRESULT ( *SetLinkUpdateOptions)(IOleUILinkInfoA *This, DWORD dwLink, DWORD dwUpdateOpt);HRESULT ( *GetLinkUpdateOptions)(IOleUILinkInfoA *This, DWORD dwLink, DWORD *lpdwUpdateOpt);HRESULT ( *SetLinkSource)(IOleUILinkInfoA *This, DWORD dwLink, LPSTR lpszDisplayName, ULONG lenFileName, ULONG *pchEaten, BOOL fValidateSource);HRESULT ( *GetLinkSource)(IOleUILinkInfoA *This, DWORD dwLink, LPSTR *lplpszDisplayName, ULONG *lplenFileName, LPSTR *lplpszFullLinkType, LPSTR *lplpszShortLinkType, BOOL *lpfSourceAvailable, BOOL *lpfIsSelected);HRESULT ( *OpenLinkSource)(IOleUILinkInfoA *This, DWORD dwLink);HRESULT ( *UpdateLink)(IOleUILinkInfoA *This, DWORD dwLink, BOOL fErrorMessage, BOOL fReserved);HRESULT ( *CancelLink)(IOleUILinkInfoA *This, DWORD dwLink);HRESULT ( *GetLastUpdate)(IOleUILinkInfoA *This, DWORD dwLink, FILETIME *lpLastUpdate);};
struct IAMDirectSoundVtbl {HRESULT ( *QueryInterface)(IAMDirectSound *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMDirectSound *This);ULONG ( *Release)(IAMDirectSound *This);HRESULT ( *GetDirectSoundInterface)(IAMDirectSound *This, LPDIRECTSOUND *lplpds);HRESULT ( *GetPrimaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER *lplpdsb);HRESULT ( *GetSecondaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER *lplpdsb);HRESULT ( *ReleaseDirectSoundInterface)(IAMDirectSound *This, LPDIRECTSOUND lpds);HRESULT ( *ReleasePrimaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER lpdsb);HRESULT ( *ReleaseSecondaryBufferInterface)(IAMDirectSound *This, LPDIRECTSOUNDBUFFER lpdsb);HRESULT ( *SetFocusWindow)(IAMDirectSound *This, HWND, BOOL);HRESULT ( *GetFocusWindow)(IAMDirectSound *This, HWND *, BOOL *);};
struct IDockingWindowVtbl {HRESULT ( *QueryInterface)(IDockingWindow *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDockingWindow *This);ULONG ( *Release)(IDockingWindow *This);HRESULT ( *GetWindow)(IDockingWindow *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindow *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDockingWindow *This, BOOL fShow);HRESULT ( *CloseDW)(IDockingWindow *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDockingWindow *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);};
struct IMLangFontLinkVtbl {HRESULT ( *QueryInterface)(IMLangFontLink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMLangFontLink *This);ULONG ( *Release)(IMLangFontLink *This);HRESULT ( *GetCharCodePages)(IMLangFontLink *This, WCHAR chSrc, DWORD *pdwCodePages);HRESULT ( *GetStrCodePages)(IMLangFontLink *This,  WCHAR *pszSrc, int cchSrc, DWORD dwPriorityCodePages, DWORD *pdwCodePages, int *pcchCodePages);HRESULT ( *CodePageToCodePages)(IMLangFontLink *This, UINT uCodePage, DWORD *pdwCodePages);HRESULT ( *CodePagesToCodePage)(IMLangFontLink *This, DWORD dwCodePages, UINT uDefaultCodePage, UINT *puCodePage);HRESULT ( *GetFontCodePages)(IMLangFontLink *This, HDC hDC, HFONT hFont, DWORD *pdwCodePages);HRESULT ( *MapFont)(IMLangFontLink *This, HDC hDC, DWORD dwCodePages, HFONT hSrcFont, HFONT *phDestFont);HRESULT ( *ReleaseFont)(IMLangFontLink *This, HFONT hFont);HRESULT ( *ResetFontMapping)(IMLangFontLink *This);};
struct IOverlayNotifyVtbl {HRESULT ( *QueryInterface)(IOverlayNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlayNotify *This);ULONG ( *Release)(IOverlayNotify *This);HRESULT ( *OnPaletteChange)(IOverlayNotify *This, DWORD dwColors,  PALETTEENTRY *pPalette);HRESULT ( *OnClipChange)(IOverlayNotify *This,  RECT *pSourceRect,  RECT *pDestinationRect,  RGNDATA *pRgnData);HRESULT ( *OnColorKeyChange)(IOverlayNotify *This,  COLORKEY *pColorKey);HRESULT ( *OnPositionChange)(IOverlayNotify *This,  RECT *pSourceRect,  RECT *pDestinationRect);};
struct IRowsetRefreshVtbl {HRESULT ( *QueryInterface)(IRowsetRefresh *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetRefresh *This);ULONG ( *Release)(IRowsetRefresh *This);HRESULT ( *RefreshVisibleData)(IRowsetRefresh *This, HCHAPTER hChapter, ULONG cRows,  HROW  *    rghRows, BOOL fOverWrite, ULONG *pcRowsRefreshed, HROW **prghRowsRefreshed, DBROWSTATUS **prgRowStatus);HRESULT ( *GetLastVisibleData)(IRowsetRefresh *This, HROW hRow, HACCESSOR hAccessor, void *pData);};
struct tagOLEUIEDITLINKSA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;LPOLEUILINKCONTAINERA lpOleUILinkContainer;};
struct IExtractIconAVtbl {HRESULT ( *QueryInterface)(IExtractIconA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExtractIconA *This);ULONG ( *Release)(IExtractIconA *This);HRESULT ( *GetIconLocation)(IExtractIconA *This, UINT uFlags, LPSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconA *This, LPCSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct IRTPSPHFilterVtbl {HRESULT ( *QueryInterface)(IRTPSPHFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRTPSPHFilter *This);ULONG ( *Release)(IRTPSPHFilter *This);HRESULT ( *OverridePayloadType)(IRTPSPHFilter *This, BYTE bPayloadType);HRESULT ( *GetPayloadType)(IRTPSPHFilter *This, BYTE *lpbPayloadType);HRESULT ( *SetMaxPacketSize)(IRTPSPHFilter *This, DWORD dwMaxPacketSize);HRESULT ( *GetMaxPacketSize)(IRTPSPHFilter *This, LPDWORD lpdwMaxPacketSize);HRESULT ( *SetOutputPinMinorType)(IRTPSPHFilter *This, GUID gMinorType);HRESULT ( *GetOutputPinMinorType)(IRTPSPHFilter *This, GUID *lpgMinorType);HRESULT ( *SetInputPinMediaType)(IRTPSPHFilter *This, AM_MEDIA_TYPE *lpMediaPinType);HRESULT ( *GetInputPinMediaType)(IRTPSPHFilter *This, AM_MEDIA_TYPE **ppMediaPinType);};
struct IRowsetUpdateVtbl {HRESULT ( *QueryInterface)(IRowsetUpdate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetUpdate *This);ULONG ( *Release)(IRowsetUpdate *This);HRESULT ( *DeleteRows)(IRowsetUpdate *This, HCHAPTER hReserved, ULONG cRows,  HROW  *    rghRows, DBROWSTATUS  *    rgRowStatus);HRESULT ( *SetData)(IRowsetUpdate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *InsertRow)(IRowsetUpdate *This, HCHAPTER hReserved, HACCESSOR hAccessor, void *pData, HROW *phRow);HRESULT ( *GetOriginalData)(IRowsetUpdate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetPendingRows)(IRowsetUpdate *This, HCHAPTER hReserved, DBPENDINGSTATUS dwRowStatus, ULONG *pcPendingRows, HROW **prgPendingRows, DBPENDINGSTATUS **prgPendingStatus);HRESULT ( *GetRowStatus)(IRowsetUpdate *This, HCHAPTER hReserved, ULONG cRows,  HROW  *    rghRows, DBPENDINGSTATUS  *    rgPendingStatus);HRESULT ( *Undo)(IRowsetUpdate *This, HCHAPTER hReserved, ULONG cRows,  HROW  *    rghRows, ULONG *pcRowsUndone, HROW **prgRowsUndone, DBROWSTATUS **prgRowStatus);HRESULT ( *Update)(IRowsetUpdate *This, HCHAPTER hReserved, ULONG cRows,  HROW  *    rghRows, ULONG *pcRows, HROW **prgRows, DBROWSTATUS **prgRowStatus);};
struct tACMFILTERCHOOSEA {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFILTER pwfltr;DWORD cbwfltr;LPCSTR pszTitle;char szFilterTag[48];char szFilter[128];LPSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFILTER pwfltrEnum;HINSTANCE hInstance;LPCSTR pszTemplateName;LPARAM lCustData;ACMFILTERCHOOSEHOOKPROCA pfnHook;};
struct tACMFORMATCHOOSEA {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFORMATEX pwfx;DWORD cbwfx;LPCSTR pszTitle;char szFormatTag[48];char szFormat[128];LPSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFORMATEX pwfxEnum;HINSTANCE hInstance;LPCSTR pszTemplateName;LPARAM lCustData;ACMFORMATCHOOSEHOOKPROCA pfnHook;};
struct IContextMenuVtbl {HRESULT ( *QueryInterface)(IContextMenu *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IContextMenu *This);ULONG ( *Release)(IContextMenu *This);HRESULT ( *QueryContextMenu)(IContextMenu *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu *This, UINT idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);};
struct IFileViewerAVtbl {HRESULT ( *QueryInterface)(IFileViewerA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFileViewerA *This);ULONG ( *Release)(IFileViewerA *This);HRESULT ( *ShowInitialize)(IFileViewerA *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerA *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerA *This, LPSTR pszDriver, BOOL fSuppressUI);};
struct IMediaFilterVtbl {HRESULT ( *QueryInterface)(IMediaFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaFilter *This);ULONG ( *Release)(IMediaFilter *This);HRESULT ( *GetClassID)(IMediaFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IMediaFilter *This);HRESULT ( *Pause)(IMediaFilter *This);HRESULT ( *Run)(IMediaFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IMediaFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IMediaFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IMediaFilter *This, IReferenceClock **pClock);};
struct IMediaSampleVtbl {HRESULT ( *QueryInterface)(IMediaSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSample *This);ULONG ( *Release)(IMediaSample *This);HRESULT ( *GetPointer)(IMediaSample *This, BYTE **ppBuffer);int ( *GetSize)(IMediaSample *This);HRESULT ( *GetTime)(IMediaSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IMediaSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IMediaSample *This);HRESULT ( *SetSyncPoint)(IMediaSample *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IMediaSample *This);HRESULT ( *SetPreroll)(IMediaSample *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IMediaSample *This);HRESULT ( *SetActualDataLength)(IMediaSample *This, int MIDL_0008);HRESULT ( *GetMediaType)(IMediaSample *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IMediaSample *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IMediaSample *This);HRESULT ( *SetDiscontinuity)(IMediaSample *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IMediaSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IMediaSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);};
struct IRowsetIndexVtbl {HRESULT ( *QueryInterface)(IRowsetIndex *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetIndex *This);ULONG ( *Release)(IRowsetIndex *This);HRESULT ( *GetIndexInfo)(IRowsetIndex *This, ULONG *pcKeyColumns, DBINDEXCOLUMNDESC **prgIndexColumnDesc, ULONG *pcIndexProperties, DBPROPSET **prgIndexProperties);HRESULT ( *Seek)(IRowsetIndex *This, HACCESSOR hAccessor, ULONG cKeyValues, void *pData, DBSEEK dwSeekOptions);HRESULT ( *SetRange)(IRowsetIndex *This, HACCESSOR hAccessor, ULONG cStartKeyColumns, void *pStartData, ULONG cEndKeyColumns, void *pEndData, DBRANGE dwRangeOptions);};
struct ISpoolerHookVtbl {HRESULT ( *QueryInterface)(ISpoolerHook *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ISpoolerHook *This);ULONG ( *Release)(ISpoolerHook *This);HRESULT ( *InboundMsgHook)(ISpoolerHook *This, LPMESSAGE lpMessage, LPMAPIFOLDER lpFolder, LPMDB lpMDB, ULONG *lpulFlags, ULONG *lpcbEntryID, LPBYTE *lppEntryID);HRESULT ( *OutboundMsgHook)(ISpoolerHook *This, LPMESSAGE lpMessage, LPMAPIFOLDER lpFolder, LPMDB lpMDB, ULONG *lpulFlags, ULONG *lpcbEntryID, LPBYTE *lppEntryID);};
typedef HRESULT  MSGSERVICEENTRY(HINSTANCE hInstance, LPMALLOC lpMalloc, LPMAPISUP lpMAPISup, ULONG ulUIParam, ULONG ulFlags, ULONG ulContext, ULONG cValues, LPSPropValue lpProps, LPPROVIDERADMIN lpProviderAdmin, LPMAPIERROR *lppMapiError);
struct tagFINDREPLACEA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPSTR lpstrFindWhat;LPSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct IAVIStreamVtbl {HRESULT ( *QueryInterface)(IAVIStream *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIStream *This);ULONG ( *Release)(IAVIStream *This);HRESULT ( *Create)(IAVIStream *This, LPARAM lParam1, LPARAM lParam2);HRESULT ( *Info)(IAVIStream *This, AVISTREAMINFOW *psi, LONG lSize);LONG ( *FindSample)(IAVIStream *This, LONG lPos, LONG lFlags);HRESULT ( *ReadFormat)(IAVIStream *This, LONG lPos, LPVOID lpFormat, LONG *lpcbFormat);HRESULT ( *SetFormat)(IAVIStream *This, LONG lPos, LPVOID lpFormat, LONG cbFormat);HRESULT ( *Read)(IAVIStream *This, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, LONG *plBytes, LONG *plSamples);HRESULT ( *Write)(IAVIStream *This, LONG lStart, LONG lSamples, LPVOID lpBuffer, LONG cbBuffer, DWORD dwFlags, LONG *plSampWritten, LONG *plBytesWritten);HRESULT ( *Delete)(IAVIStream *This, LONG lStart, LONG lSamples);HRESULT ( *ReadData)(IAVIStream *This, DWORD fcc, LPVOID lp, LONG *lpcb);HRESULT ( *WriteData)(IAVIStream *This, DWORD fcc, LPVOID lp, LONG cb);HRESULT ( *SetInfo)(IAVIStream *This, AVISTREAMINFOW *lpInfo, LONG cbInfo);};
struct ICopyHookAVtbl {HRESULT ( *QueryInterface)(ICopyHookA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICopyHookA *This);ULONG ( *Release)(ICopyHookA *This);UINT ( *CopyCallback)(ICopyHookA *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCSTR pszSrcFile, DWORD dwSrcAttribs, LPCSTR pszDestFile, DWORD dwDestAttribs);};
typedef SCODE OPTIONCALLBACK(HINSTANCE hInst, LPMALLOC lpMalloc, ULONG ulFlags, ULONG cbOptionData, LPBYTE lpbOptionData, LPMAPISUP lpMAPISup, LPMAPIPROP lpDataSource, LPMAPIPROP *lppWrappedSource, LPMAPIERROR *lppMAPIError);
typedef int ( *LPWSPRECVFROM)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, struct sockaddr *lpFrom, LPINT lpFromlen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _LOADED_IMAGE {LPSTR ModuleName;HANDLE hFile;PUCHAR MappedAddress;PIMAGE_NT_HEADERS FileHeader;PIMAGE_SECTION_HEADER LastRvaSection;ULONG NumberOfSections;PIMAGE_SECTION_HEADER Sections;ULONG Characteristics;BOOLEAN fSystemImage;BOOLEAN fDOSImage;LIST_ENTRY Links;ULONG SizeOfImage;};
struct _charformat2a {UINT cbSize;DWORD dwMask;DWORD dwEffects;LONG yHeight;LONG yOffset;COLORREF crTextColor;BYTE bCharSet;BYTE bPitchAndFamily;char szFaceName[32];WORD wWeight;SHORT sSpacing;COLORREF crBackColor;LCID lcid;DWORD dwReserved;SHORT sStyle;WORD wKerning;BYTE bUnderlineType;BYTE bAnimation;BYTE bRevAuthor;};
struct tagOLEUIBUSYA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;HTASK hTask;HWND *lphWndDialog;};
typedef int ( *LPWSPSENDTO)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags,  struct sockaddr *lpTo, int iTolen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct srv_control {unsigned int status;unsigned int connects;SRV_PROC **srvprocs;HANDLE connects_sem;HANDLE start_sem;HANDLE event_sem;HANDLE log_sem;int ShutDownCrit;int NetQueueCrit;int ThreadPoolCrit;int ScrnPrnt;unsigned int remote_sites;unsigned int remote_connects;HANDLE remote_sites_sem;HANDLE remote_connects_sem;SRV_QUEUEHEAD netQueueList;int numNetQueueEntries;int maxNetQueueEntries;PSRV_LISTHEAD CommandQueueHead;SRV_STATS Stats;DWORD *pSharedCounter;HANDLE srvproc_mutex;DWORD dwWorkingThreadCnt;DWORD maxWorkingThreadCnt;SRV_COMPORT *comport;BYTE num_comports;BYTE ProcessorCnt;};
struct IPrintVtbl {HRESULT ( *QueryInterface)(IPrint *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPrint *This);ULONG ( *Release)(IPrint *This);HRESULT ( *SetInitialPageNum)(IPrint *This, LONG nFirstPage);HRESULT ( *GetPageInfo)(IPrint *This, LONG *pnFirstPage, LONG *pcPages);HRESULT ( *Print)(IPrint *This, DWORD grfFlags, DVTARGETDEVICE **pptd, PAGESET **ppPageSet, STGMEDIUM *pstgmOptions, IContinueCallback *pcallback, LONG nFirstPage, LONG *pcPagesPrinted, LONG *pnLastPage);};
typedef int ( *LPWSPIOCTL)(SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _CERT_INFO {DWORD dwVersion;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME NotBefore;FILETIME NotAfter;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;CRYPT_BIT_BLOB IssuerUniqueId;CRYPT_BIT_BLOB SubjectUniqueId;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _D3DVERTEX {_D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 __anonymous0;_D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA __anonymous3;_D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 __anonymous6;_D3DVERTEX___83AC1A1E23B9ECFE234B7286E62DB631 __anonymous9;_D3DVERTEX___3782FED7D702BF3DE1FC57BD6CFA9C0A __anonymous10;_D3DVERTEX___D6B931185C6B831ED9D2BDE28EC5A699 __anonymous11;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous12;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous15;};
struct srv_server {LGFARPROC SSNetLib[11];HANDLE SSModule;DWORD ep_size;void *listen_ep;THREAD net_threadID;HANDLE net_threadHDL;char connect_name[64];char connect_dll[64];char connect_version[64];char temp_buffer[100];SRV_CONFIG config;SRV_CONTROL *control;SRV_EVENTS *events;SRV_PEVENTS *pre_events;SRV_PEVENTS *post_events;HANDLE hPreHandlerMutex;HANDLE hPostHandlerMutex;HANDLE hPreHandlerSem;HANDLE hPostHandlerSem;};
struct tagPDEVENT {DWORD cbSize;HWND hwnd;UINT wm;WPARAM wParam;LPARAM lParam;POINT pt;BOOL fPen;LONG lExInfo;DWORD dwReserved;};
typedef int ( *LPWSPRECV)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
typedef int ( *LPWSPSEND)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine, LPWSATHREADID lpThreadId, LPINT lpErrno);
struct _CTL_INFO {DWORD dwVersion;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;CRYPT_INTEGER_BLOB SequenceNumber;FILETIME ThisUpdate;FILETIME NextUpdate;CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;DWORD cCTLEntry;PCTL_ENTRY rgCTLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct tagOFNA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 {EXCEPTION_DEBUG_INFO Exception;CREATE_THREAD_DEBUG_INFO CreateThread;CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;EXIT_THREAD_DEBUG_INFO ExitThread;EXIT_PROCESS_DEBUG_INFO ExitProcess;LOAD_DLL_DEBUG_INFO LoadDll;UNLOAD_DLL_DEBUG_INFO UnloadDll;OUTPUT_DEBUG_STRING_INFO DebugString;RIP_INFO RipInfo;};
struct IEDKVirtualStreamOnPropertyVtbl {HRESULT ( *QueryInterface)(IEDKVirtualStreamOnProperty *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IEDKVirtualStreamOnProperty *This);ULONG ( *Release)(IEDKVirtualStreamOnProperty *This);HRESULT ( *Read)(IEDKVirtualStreamOnProperty *This, LPVOID pv, ULONG cb, ULONG *pcb);HRESULT ( *Write)(IEDKVirtualStreamOnProperty *This,  void *pv, ULONG cb, ULONG *pcb);HRESULT ( *Seek)(IEDKVirtualStreamOnProperty *This, LARGE_INTEGER cbOffset, DWORD dwOrigin, ULARGE_INTEGER *pcbPos);HRESULT ( *SetSize)(IEDKVirtualStreamOnProperty *This, ULARGE_INTEGER nSize);HRESULT ( *CopyTo)(IEDKVirtualStreamOnProperty *This, LPSTREAM pStrm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT ( *Commit)(IEDKVirtualStreamOnProperty *This, DWORD dwFlags);HRESULT ( *Revert)(IEDKVirtualStreamOnProperty *This);HRESULT ( *LockRegion)(IEDKVirtualStreamOnProperty *This, ULARGE_INTEGER cbOffset, ULARGE_INTEGER cbLength, DWORD dwFlags);HRESULT ( *UnlockRegion)(IEDKVirtualStreamOnProperty *This, ULARGE_INTEGER cbOffset, ULARGE_INTEGER cbLength, DWORD dwFlags);HRESULT ( *Stat)(IEDKVirtualStreamOnProperty *This, STATSTG *pStatStg, DWORD dwFlags);HRESULT ( *Clone)(IEDKVirtualStreamOnProperty *This, LPSTREAM *ppStrm);};
struct IDirectDrawMediaStreamVtbl {HRESULT ( *QueryInterface)(IDirectDrawMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectDrawMediaStream *This);ULONG ( *Release)(IDirectDrawMediaStream *This);HRESULT ( *GetMultiMediaStream)(IDirectDrawMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IDirectDrawMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IDirectDrawMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IDirectDrawMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IDirectDrawMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IDirectDrawMediaStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IDirectDrawMediaStream *This, DDSURFACEDESC *pDDSDCurrent, IDirectDrawPalette **ppDirectDrawPalette, DDSURFACEDESC *pDDSDDesired, DWORD *pdwFlags);HRESULT ( *SetFormat)(IDirectDrawMediaStream *This,  DDSURFACEDESC *pDDSurfaceDesc, IDirectDrawPalette *pDirectDrawPalette);HRESULT ( *GetDirectDraw)(IDirectDrawMediaStream *This, IDirectDraw **ppDirectDraw);HRESULT ( *SetDirectDraw)(IDirectDrawMediaStream *This, IDirectDraw *pDirectDraw);HRESULT ( *CreateSample)(IDirectDrawMediaStream *This, IDirectDrawSurface *pSurface,  RECT *pRect, DWORD dwFlags, IDirectDrawStreamSample **ppSample);HRESULT ( *GetTimePerFrame)(IDirectDrawMediaStream *This, STREAM_TIME *pFrameTime);};
struct IExchangeExportChangesVtbl {HRESULT ( *QueryInterface)(IExchangeExportChanges *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeExportChanges *This);ULONG ( *Release)(IExchangeExportChanges *This);HRESULT ( *GetLastError)(IExchangeExportChanges *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Config)(IExchangeExportChanges *This, LPSTREAM lpStream, ULONG ulFlags, LPUNKNOWN lpUnk, LPSRestriction lpRestriction, LPSPropTagArray lpIncludeProps, LPSPropTagArray lpExcludeProps, ULONG ulBufferSize);HRESULT ( *Synchronize)(IExchangeExportChanges *This, ULONG *lpulSteps, ULONG *lpulProgress);HRESULT ( *UpdateState)(IExchangeExportChanges *This, LPSTREAM lpStream);};
struct IExchangeFolderRulesVtbl {HRESULT ( *QueryInterface)(IExchangeFolderRules *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeFolderRules *This);ULONG ( *Release)(IExchangeFolderRules *This);HRESULT ( *HrDelete)(IExchangeFolderRules *This);HRESULT ( *HrDisable)(IExchangeFolderRules *This);HRESULT ( *HrEnable)(IExchangeFolderRules *This);HRESULT ( *HrGet)(IExchangeFolderRules *This, LPLONG lplState, LPSRestriction *lppRestriction, LPACTIONS *lppActions, LPLONG lplLevel, LPSTR *lppszName);HRESULT ( *HrInsert)(IExchangeFolderRules *This, LONG lState, LPSRestriction lpRestriction, LPACTIONS lpActions, LONG lLevel, LPSTR lpszName);HRESULT ( *HrSeek)(IExchangeFolderRules *This, LONG lPos);HRESULT ( *HrTell)(IExchangeFolderRules *This, LPLONG lplPos);};
struct IDirectSoundCaptureVtbl {HRESULT ( *QueryInterface)(IDirectSoundCapture *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCapture *This);ULONG ( *Release)(IDirectSoundCapture *This);HRESULT ( *CreateCaptureBuffer)(IDirectSoundCapture *This, LPCDSCBUFFERDESC, LPDIRECTSOUNDCAPTUREBUFFER *, LPUNKNOWN);HRESULT ( *GetCaps)(IDirectSoundCapture *This, LPDSCCAPS);HRESULT ( *Initialize)(IDirectSoundCapture *This, LPGUID);};
struct IAMMediaTypeStreamVtbl {HRESULT ( *QueryInterface)(IAMMediaTypeStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaTypeStream *This);ULONG ( *Release)(IAMMediaTypeStream *This);HRESULT ( *GetMultiMediaStream)(IAMMediaTypeStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAMMediaTypeStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAMMediaTypeStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAMMediaTypeStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAMMediaTypeStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAMMediaTypeStream *This, DWORD dwFlags);HRESULT ( *GetFormat)(IAMMediaTypeStream *This, AM_MEDIA_TYPE *pMediaType, DWORD dwFlags);HRESULT ( *SetFormat)(IAMMediaTypeStream *This, AM_MEDIA_TYPE *pMediaType, DWORD dwFlags);HRESULT ( *CreateSample)(IAMMediaTypeStream *This, int lSampleSize, BYTE *pbBuffer, DWORD dwFlags, IUnknown *pUnkOuter, IAMMediaTypeSample **ppAMMediaTypeSample);HRESULT ( *GetStreamAllocatorRequirements)(IAMMediaTypeStream *This, ALLOCATOR_PROPERTIES *pProps);HRESULT ( *SetStreamAllocatorRequirements)(IAMMediaTypeStream *This, ALLOCATOR_PROPERTIES *pProps);};
struct IASQLOLEObjectListVtbl {HRESULT ( *QueryInterface)(IASQLOLEObjectList *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEObjectList *This);ULONG ( *Release)(IASQLOLEObjectList *This);HRESULT ( *GetApplication)(IASQLOLEObjectList *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEObjectList *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEObjectList *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEObjectList *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEObjectList *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEObjectList *This, int lOrdinal, LPASQLOLESTDOBJECT *ppObject);HRESULT ( *GetItemByName)(IASQLOLEObjectList *This, LPCSTR szName, LPASQLOLESTDOBJECT *ppObject);HRESULT ( *GetCount)(IASQLOLEObjectList *This, LPLONG plCount);HRESULT ( *Refresh)(IASQLOLEObjectList *This);};
struct IRowsetWatchRegionVtbl {HRESULT ( *QueryInterface)(IRowsetWatchRegion *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWatchRegion *This);ULONG ( *Release)(IRowsetWatchRegion *This);HRESULT ( *Acknowledge)(IRowsetWatchRegion *This);HRESULT ( *Start)(IRowsetWatchRegion *This);HRESULT ( *StopWatching)(IRowsetWatchRegion *This);HRESULT ( *CreateWatchRegion)(IRowsetWatchRegion *This, DBWATCHMODE dwWatchMode, HWATCHREGION *phRegion);HRESULT ( *ChangeWatchMode)(IRowsetWatchRegion *This, HWATCHREGION hRegion, DBWATCHMODE dwWatchMode);HRESULT ( *DeleteWatchRegion)(IRowsetWatchRegion *This, HWATCHREGION hRegion);HRESULT ( *GetWatchRegionInfo)(IRowsetWatchRegion *This, HWATCHREGION hRegion, DBWATCHMODE *pdwWatchMode, HCHAPTER *phChapter, ULONG *pcbBookmark, BYTE **ppBookmark, LONG *pcRows);HRESULT ( *Refresh)(IRowsetWatchRegion *This, ULONG *pcChangesObtained, DBROWWATCHCHANGE **prgChanges);HRESULT ( *ShrinkWatchRegion)(IRowsetWatchRegion *This, HWATCHREGION hRegion, HCHAPTER hChapter, ULONG cbBookmark, BYTE *pBookmark, LONG cRows);};
struct IMultiMediaStreamVtbl {HRESULT ( *QueryInterface)(IMultiMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiMediaStream *This);ULONG ( *Release)(IMultiMediaStream *This);HRESULT ( *GetInformation)(IMultiMediaStream *This, DWORD *pdwFlags, STREAM_TYPE *pStreamType);HRESULT ( *GetMediaStream)(IMultiMediaStream *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IMultiMediaStream *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *GetState)(IMultiMediaStream *This, STREAM_STATE *pCurrentState);HRESULT ( *SetState)(IMultiMediaStream *This, STREAM_STATE NewState);HRESULT ( *GetTime)(IMultiMediaStream *This, STREAM_TIME *pCurrentTime);HRESULT ( *GetDuration)(IMultiMediaStream *This, STREAM_TIME *pDuration);HRESULT ( *Seek)(IMultiMediaStream *This, STREAM_TIME SeekTime);HRESULT ( *GetEndOfStreamEventHandle)(IMultiMediaStream *This, HANDLE *phEOS);};
struct RecordsetEventsVtVtbl {HRESULT ( *QueryInterface)(RecordsetEventsVt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(RecordsetEventsVt *This);ULONG ( *Release)(RecordsetEventsVt *This);HRESULT ( *WillChangeADOField)(RecordsetEventsVt *This, LONG cFields, VARIANT Fields, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *FieldChangeComplete)(RecordsetEventsVt *This, LONG cFields, VARIANT Fields, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *WillChangeRecord)(RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *RecordChangeComplete)(RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *WillChangeADORecordset)(RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *RecordsetChangeComplete)(RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *WillMove)(RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *MoveComplete)(RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *EndOfADORecordset)(RecordsetEventsVt *This, VARIANT_BOOL *fMoreData, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *FetchProgress)(RecordsetEventsVt *This, int Progress, int MaxProgress, EventStatusEnum *adStatus, _ADORecordset *pRecordset);HRESULT ( *FetchComplete)(RecordsetEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);};
struct IASQLOLEDBOptionVtbl {HRESULT ( *QueryInterface)(IASQLOLEDBOption *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDBOption *This);ULONG ( *Release)(IASQLOLEDBOption *This);HRESULT ( *GetApplication)(IASQLOLEDBOption *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDBOption *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDBOption *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDBOption *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDBOption *This, LPVOID lpvNewValue);HRESULT ( *GetSelectIntoBulkCopy)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetSelectIntoBulkCopy)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetDBOUseOnly)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetDBOUseOnly)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetNoCheckpointOnRecovery)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetNoCheckpointOnRecovery)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetReadOnly)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetReadOnly)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetSingleUser)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetSingleUser)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetTruncateLogOnCheckpoint)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetTruncateLogOnCheckpoint)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetEnablePublishing)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetEnablePublishing)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetEnableSubscribing)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetEnableSubscribing)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetColumnsNullByDefault)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetColumnsNullByDefault)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *GetOffline)(IASQLOLEDBOption *This, LPBOOL pRetVal);HRESULT ( *SetOffline)(IASQLOLEDBOption *This, BOOL NewValue);HRESULT ( *Refresh)(IASQLOLEDBOption *This);};
struct IDirect3DTextureVtbl {HRESULT ( *QueryInterface)(IDirect3DTexture *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DTexture *This);ULONG ( *Release)(IDirect3DTexture *This);HRESULT ( *Initialize)(IDirect3DTexture *This, LPDIRECT3DDEVICE, LPDIRECTDRAWSURFACE);HRESULT ( *GetHandle)(IDirect3DTexture *This, LPDIRECT3DDEVICE, LPD3DTEXTUREHANDLE);HRESULT ( *PaletteChanged)(IDirect3DTexture *This, DWORD, DWORD);HRESULT ( *Load)(IDirect3DTexture *This, LPDIRECT3DTEXTURE);HRESULT ( *Unload)(IDirect3DTexture *This);};
struct ISimpleFrameSiteVtbl {HRESULT ( *QueryInterface)(ISimpleFrameSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISimpleFrameSite *This);ULONG ( *Release)(ISimpleFrameSite *This);HRESULT ( *PreMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD *pdwCookie);HRESULT ( *PostMessageFilter)(ISimpleFrameSite *This, HWND hWnd, UINT msg, WPARAM wp, LPARAM lp, LRESULT *plResult, DWORD dwCookie);};
struct IOleInPlaceSiteVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSite *This);ULONG ( *Release)(IOleInPlaceSite *This);HRESULT ( *GetWindow)(IOleInPlaceSite *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSite *This);HRESULT ( *OnUIActivate)(IOleInPlaceSite *This);HRESULT ( *GetWindowContext)(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSite *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSite *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSite *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSite *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);};
struct IAMMediaStreamVtbl {HRESULT ( *QueryInterface)(IAMMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaStream *This);ULONG ( *Release)(IAMMediaStream *This);HRESULT ( *GetMultiMediaStream)(IAMMediaStream *This, IMultiMediaStream **ppMultiMediaStream);HRESULT ( *GetInformation)(IAMMediaStream *This, MSPID *pPurposeId, STREAM_TYPE *pType);HRESULT ( *SetSameFormat)(IAMMediaStream *This, IMediaStream *pStreamThatHasDesiredFormat, DWORD dwFlags);HRESULT ( *AllocateSample)(IAMMediaStream *This, DWORD dwFlags, IStreamSample **ppSample);HRESULT ( *CreateSharedSample)(IAMMediaStream *This, IStreamSample *pExistingSample, DWORD dwFlags, IStreamSample **ppNewSample);HRESULT ( *SendEndOfStream)(IAMMediaStream *This, DWORD dwFlags);HRESULT ( *Initialize)(IAMMediaStream *This, IUnknown *pSourceObject, DWORD dwFlags, REFMSPID PurposeId,  STREAM_TYPE StreamType);HRESULT ( *SetState)(IAMMediaStream *This, FILTER_STATE State);HRESULT ( *JoinAMMultiMediaStream)(IAMMediaStream *This, IAMMultiMediaStream *pAMMultiMediaStream);HRESULT ( *JoinFilter)(IAMMediaStream *This, IMediaStreamFilter *pMediaStreamFilter);HRESULT ( *JoinFilterGraph)(IAMMediaStream *This, IFilterGraph *pFilterGraph);};
struct ICDAORecordsetVtbl {HRESULT ( *GetRows)(ICDAORecordset *This, LONG cRowsToSkip, LONG cCol, LPDAOCOLUMNBINDING prgBndCol, ULONG cbRowLen, LPDAOFETCHROWS pFetchRows);HRESULT ( *SetNotify)(ICDAORecordset *This,  IID * riid, BOOL fNotify);HRESULT ( *GetNotify)(ICDAORecordset *This,  IID * riid, BOOL *fNotify);HRESULT ( *OnBeforeNotify)(ICDAORecordset *This,  IID * riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2);HRESULT ( *OnAfterNotify)(ICDAORecordset *This,  IID * riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2, HRESULT hr);HRESULT ( *PutLock)(ICDAORecordset *This, BOOL f);HRESULT ( *GetLock)(ICDAORecordset *This, BOOL *f);HRESULT ( *AddGetRowsErr)(ICDAORecordset *This, HRESULT hr);};
struct _SHELLEXECUTEINFOA {DWORD cbSize;ULONG fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpFile;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;_SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 __anonymous0;HANDLE hProcess;};
struct IMediaSample2Vtbl {HRESULT ( *QueryInterface)(IMediaSample2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaSample2 *This);ULONG ( *Release)(IMediaSample2 *This);HRESULT ( *GetPointer)(IMediaSample2 *This, BYTE **ppBuffer);int ( *GetSize)(IMediaSample2 *This);HRESULT ( *GetTime)(IMediaSample2 *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IMediaSample2 *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IMediaSample2 *This);HRESULT ( *SetSyncPoint)(IMediaSample2 *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IMediaSample2 *This);HRESULT ( *SetPreroll)(IMediaSample2 *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IMediaSample2 *This);HRESULT ( *SetActualDataLength)(IMediaSample2 *This, int MIDL_0008);HRESULT ( *GetMediaType)(IMediaSample2 *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IMediaSample2 *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IMediaSample2 *This);HRESULT ( *SetDiscontinuity)(IMediaSample2 *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IMediaSample2 *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IMediaSample2 *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *GetProperties)(IMediaSample2 *This, DWORD cbProperties, BYTE *pbProperties);HRESULT ( *SetProperties)(IMediaSample2 *This, DWORD cbProperties,  BYTE *pbProperties);};
struct IAsyncReaderVtbl {HRESULT ( *QueryInterface)(IAsyncReader *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAsyncReader *This);ULONG ( *Release)(IAsyncReader *This);HRESULT ( *RequestAllocator)(IAsyncReader *This, IMemAllocator *pPreferred, ALLOCATOR_PROPERTIES *pProps, IMemAllocator **ppActual);HRESULT ( *Request)(IAsyncReader *This, IMediaSample *pSample, DWORD dwUser);HRESULT ( *WaitForNext)(IAsyncReader *This, DWORD dwTimeout, IMediaSample **ppSample, DWORD *pdwUser);HRESULT ( *SyncReadAligned)(IAsyncReader *This, IMediaSample *pSample);HRESULT ( *SyncRead)(IAsyncReader *This, LONGLONG llPosition, LONG lLength, BYTE *pBuffer);HRESULT ( *Length)(IAsyncReader *This, LONGLONG *pTotal, LONGLONG *pAvailable);HRESULT ( *BeginFlush)(IAsyncReader *This);HRESULT ( *EndFlush)(IAsyncReader *This);};
struct IClassAccessVtbl {HRESULT ( *QueryInterface)(IClassAccess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassAccess *This);ULONG ( *Release)(IClassAccess *This);HRESULT ( *GetClassInfoA)(IClassAccess *This,  CLSID * clsid, QUERYCONTEXT QryContext, PACKAGEINFO *pPackageInfo);HRESULT ( *GetClassSpecInfo)(IClassAccess *This, uCLSSPEC *pClassSpec, QUERYCONTEXT QryContext, PACKAGEINFO *pPackageInfo);HRESULT ( *GetInstallablePackages)(IClassAccess *This, DWORD Count, PUBLISHEDINFOLIST *pInfoList);};
struct IRowsetFindVtbl {HRESULT ( *QueryInterface)(IRowsetFind *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetFind *This);ULONG ( *Release)(IRowsetFind *This);HRESULT ( *FindNextRow)(IRowsetFind *This, HCHAPTER hChapter, HACCESSOR hAccessor, void *pFindValue, DBCOMPAREOP CompareOp, ULONG cbBookmark,  BYTE *pBookmark, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);};
struct _MIDL_STUB_DESC {void *RpcInterfaceInformation;void *( *pfnAllocate)(size_t);void ( *pfnFree)(void *);union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO; NDR_RUNDOWN *apfnNdrRundownRoutines; GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs; EXPR_EVAL *apfnExprEval; XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple; unsigned char *pFormatTypes;int fCheckBounds;unsigned int Version;MALLOC_FREE_STRUCT *pMallocFreeStruct;int MIDLVersion; COMM_FAULT_OFFSETS *CommFaultOffsets; USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;int Reserved1;int Reserved2;int Reserved3;int Reserved4;int Reserved5;};
struct _PROPSHEETPAGEA {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 __anonymous0;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous1;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;LPCSTR pszHeaderTitle;LPCSTR pszHeaderSubTitle;};
struct IOleCache2Vtbl {HRESULT ( *QueryInterface)(IOleCache2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleCache2 *This);ULONG ( *Release)(IOleCache2 *This);HRESULT ( *Cache)(IOleCache2 *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT ( *Uncache)(IOleCache2 *This, DWORD dwConnection);HRESULT ( *EnumCache)(IOleCache2 *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT ( *InitCache)(IOleCache2 *This, IDataObject *pDataObject);HRESULT ( *SetData)(IOleCache2 *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT ( *UpdateCache)(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);HRESULT ( *DiscardCache)(IOleCache2 *This, DWORD dwDiscardOptions);};
struct IDeskBandVtbl {HRESULT ( *QueryInterface)(IDeskBand *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDeskBand *This);ULONG ( *Release)(IDeskBand *This);HRESULT ( *GetWindow)(IDeskBand *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDeskBand *This, BOOL fEnterMode);HRESULT ( *ShowDW)(IDeskBand *This, BOOL fShow);HRESULT ( *CloseDW)(IDeskBand *This, DWORD dwReserved);HRESULT ( *ResizeBorderDW)(IDeskBand *This, LPCRECT prcBorder, IUnknown *punkToolbarSite, BOOL fReserved);HRESULT ( *GetBandInfo)(IDeskBand *This, DWORD dwBandID, DWORD dwViewMode, DESKBANDINFO *pdbi);};
struct IMAPIFormVtbl {HRESULT ( *QueryInterface)(IMAPIForm *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIForm *This);ULONG ( *Release)(IMAPIForm *This);HRESULT ( *GetLastError)(IMAPIForm *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SetViewContext)(IMAPIForm *This, LPMAPIVIEWCONTEXT pViewContext);HRESULT ( *GetViewContext)(IMAPIForm *This, LPMAPIVIEWCONTEXT *ppViewContext);HRESULT ( *ShutdownForm)(IMAPIForm *This, ULONG ulSaveOptions);HRESULT ( *DoVerb)(IMAPIForm *This, LONG iVerb, LPMAPIVIEWCONTEXT lpViewContext, ULONG hwndParent, LPCRECT lprcPosRect);HRESULT ( *Advise)(IMAPIForm *This, LPMAPIVIEWADVISESINK pAdvise, ULONG *pdwStatus);HRESULT ( *Unadvise)(IMAPIForm *This, ULONG ulConnection);};
struct _charformat2w {UINT cbSize;DWORD dwMask;DWORD dwEffects;LONG yHeight;LONG yOffset;COLORREF crTextColor;BYTE bCharSet;BYTE bPitchAndFamily;WCHAR szFaceName[32];WORD wWeight;SHORT sSpacing;COLORREF crBackColor;LCID lcid;DWORD dwReserved;SHORT sStyle;WORD wKerning;BYTE bUnderlineType;BYTE bAnimation;BYTE bRevAuthor;BYTE bReserved1;};
struct IAVIFileVtbl {HRESULT ( *QueryInterface)(IAVIFile *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAVIFile *This);ULONG ( *Release)(IAVIFile *This);HRESULT ( *Info)(IAVIFile *This, AVIFILEINFOW *pfi, LONG lSize);HRESULT ( *GetStream)(IAVIFile *This, PAVISTREAM *ppStream, DWORD fccType, LONG lParam);HRESULT ( *CreateStream)(IAVIFile *This, PAVISTREAM *ppStream, AVISTREAMINFOW *psi);HRESULT ( *WriteData)(IAVIFile *This, DWORD ckid, LPVOID lpData, LONG cbData);HRESULT ( *ReadData)(IAVIFile *This, DWORD ckid, LPVOID lpData, LONG *lpcbData);HRESULT ( *EndRecord)(IAVIFile *This);HRESULT ( *DeleteStream)(IAVIFile *This, DWORD fccType, LONG lParam);};
struct IOverlayVtbl {HRESULT ( *QueryInterface)(IOverlay *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOverlay *This);ULONG ( *Release)(IOverlay *This);HRESULT ( *GetPalette)(IOverlay *This, DWORD *pdwColors, PALETTEENTRY **ppPalette);HRESULT ( *SetPalette)(IOverlay *This, DWORD dwColors, PALETTEENTRY *pPalette);HRESULT ( *GetDefaultColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *GetColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *SetColorKey)(IOverlay *This, COLORKEY *pColorKey);HRESULT ( *GetWindowHandle)(IOverlay *This, HWND *pHwnd);HRESULT ( *GetClipList)(IOverlay *This, RECT *pSourceRect, RECT *pDestinationRect, RGNDATA **ppRgnData);HRESULT ( *GetVideoPosition)(IOverlay *This, RECT *pSourceRect, RECT *pDestinationRect);HRESULT ( *Advise)(IOverlay *This, IOverlayNotify *pOverlayNotify, DWORD dwInterests);HRESULT ( *Unadvise)(IOverlay *This);};
struct _NSP_ROUTINE {DWORD cbSize;DWORD dwMajorVersion;DWORD dwMinorVersion;LPNSPCLEANUP NSPCleanup;LPNSPLOOKUPSERVICEBEGIN NSPLookupServiceBegin;LPNSPLOOKUPSERVICENEXT NSPLookupServiceNext;LPNSPLOOKUPSERVICEEND NSPLookupServiceEnd;LPNSPSETSERVICE NSPSetService;LPNSPINSTALLSERVICECLASS NSPInstallServiceClass;LPNSPREMOVESERVICECLASS NSPRemoveServiceClass;LPNSPGETSERVICECLASSINFO NSPGetServiceClassInfo;};
struct tagDBBINDING {ULONG iOrdinal;ULONG obValue;ULONG obLength;ULONG obStatus;ITypeInfo *pTypeInfo;DBOBJECT *pObject;DBBINDEXT *pBindExt;DBPART dwPart;DBMEMOWNER dwMemOwner;DBPARAMIO eParamIO;ULONG cbMaxLen;DWORD dwFlags;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct IFilterVtbl {HRESULT ( *QueryInterface)(IFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilter *This);ULONG ( *Release)(IFilter *This);SCODE ( *Init)(IFilter *This, ULONG grfFlags, ULONG cAttributes,  FULLPROPSPEC *aAttributes, ULONG *pFlags);SCODE ( *GetChunk)(IFilter *This, STAT_CHUNK *pStat);SCODE ( *GetText)(IFilter *This, ULONG *pcwcBuffer, WCHAR *awcBuffer);SCODE ( *GetValue)(IFilter *This, PROPVARIANT **ppPropValue);SCODE ( *BindRegion)(IFilter *This, FILTERREGION origPos,  IID * riid, void **ppunk);};
struct IRowsetVtbl {HRESULT ( *QueryInterface)(IRowset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowset *This);ULONG ( *Release)(IRowset *This);HRESULT ( *AddRefRows)(IRowset *This, ULONG cRows,  HROW  *    rghRows, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowset *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowset *This, HCHAPTER hReserved, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowset *This, ULONG cRows,  HROW  *    rghRows, DBROWOPTIONS  *    rgRowOptions, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *RestartPosition)(IRowset *This, HCHAPTER hReserved);};
union tagCOLOR {struct GRAYCOLOR gray;struct RGBCOLOR rgb;struct CMYKCOLOR cmyk;struct XYZCOLOR XYZ;struct YxyCOLOR Yxy;struct LabCOLOR Lab;struct GENERIC3CHANNEL gen3ch;struct NAMEDCOLOR named;struct HiFiCOLOR hifi;};
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 {SAFEARR_BSTR BstrStr;SAFEARR_UNKNOWN UnknownStr;SAFEARR_DISPATCH DispatchStr;SAFEARR_VARIANT VariantStr;SAFEARR_BRECORD RecordStr;SAFEARR_HAVEIID HaveIidStr;BYTE_SIZEDARR ByteStr;WORD_SIZEDARR WordStr;DWORD_SIZEDARR LongStr;HYPER_SIZEDARR HyperStr;};
struct IOleInPlaceObjectWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceObjectWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceObjectWindowless *This);ULONG ( *Release)(IOleInPlaceObjectWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceObjectWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceObjectWindowless *This, BOOL fEnterMode);HRESULT ( *InPlaceDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *UIDeactivate)(IOleInPlaceObjectWindowless *This);HRESULT ( *SetObjectRects)(IOleInPlaceObjectWindowless *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT ( *ReactivateAndUndo)(IOleInPlaceObjectWindowless *This);HRESULT ( *OnWindowMessage)(IOleInPlaceObjectWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);HRESULT ( *GetDropTarget)(IOleInPlaceObjectWindowless *This, IDropTarget **ppDropTarget);};
struct IDirectSoundCaptureBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundCaptureBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundCaptureBuffer *This);ULONG ( *Release)(IDirectSoundCaptureBuffer *This);HRESULT ( *GetCaps)(IDirectSoundCaptureBuffer *This, LPDSCBCAPS);HRESULT ( *GetCurrentPosition)(IDirectSoundCaptureBuffer *This, LPDWORD, LPDWORD);HRESULT ( *GetFormat)(IDirectSoundCaptureBuffer *This, LPWAVEFORMATEX, DWORD, LPDWORD);HRESULT ( *GetStatus)(IDirectSoundCaptureBuffer *This, LPDWORD);HRESULT ( *Initialize)(IDirectSoundCaptureBuffer *This, LPDIRECTSOUNDCAPTURE, LPCDSCBUFFERDESC);HRESULT ( *Lock)(IDirectSoundCaptureBuffer *This, DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD, DWORD);HRESULT ( *Start)(IDirectSoundCaptureBuffer *This, DWORD);HRESULT ( *Stop)(IDirectSoundCaptureBuffer *This);HRESULT ( *Unlock)(IDirectSoundCaptureBuffer *This, LPVOID, DWORD, LPVOID, DWORD);};
struct IASQLOLESystemDatatypesVtbl {HRESULT ( *QueryInterface)(IASQLOLESystemDatatypes *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLESystemDatatypes *This);ULONG ( *Release)(IASQLOLESystemDatatypes *This);HRESULT ( *GetApplication)(IASQLOLESystemDatatypes *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLESystemDatatypes *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLESystemDatatypes *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLESystemDatatypes *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLESystemDatatypes *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLESystemDatatypes *This, int lOrdinal, LPASQLOLESYSTEMDATATYPE *ppObj);HRESULT ( *GetItemByName)(IASQLOLESystemDatatypes *This, LPCSTR szName, LPASQLOLESYSTEMDATATYPE *ppObj);HRESULT ( *GetCount)(IASQLOLESystemDatatypes *This, LPLONG plCount);};
struct IASQLOLESystemDatatypeVtbl {HRESULT ( *QueryInterface)(IASQLOLESystemDatatype *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLESystemDatatype *This);ULONG ( *Release)(IASQLOLESystemDatatype *This);HRESULT ( *GetApplication)(IASQLOLESystemDatatype *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLESystemDatatype *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLESystemDatatype *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLESystemDatatype *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLESystemDatatype *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLESystemDatatype *This, LPBSTRA pRetVal);HRESULT ( *GetMaximumLength)(IASQLOLESystemDatatype *This, LPLONG pRetVal);HRESULT ( *GetAllowNulls)(IASQLOLESystemDatatype *This, LPBOOL pRetVal);HRESULT ( *GetIsNumeric)(IASQLOLESystemDatatype *This, LPBOOL pRetVal);HRESULT ( *GetAllowIdentity)(IASQLOLESystemDatatype *This, LPBOOL pRetVal);};
struct IDirect3DExecuteBufferVtbl {HRESULT ( *QueryInterface)(IDirect3DExecuteBuffer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DExecuteBuffer *This);ULONG ( *Release)(IDirect3DExecuteBuffer *This);HRESULT ( *Initialize)(IDirect3DExecuteBuffer *This, LPDIRECT3DDEVICE, LPD3DEXECUTEBUFFERDESC);HRESULT ( *Lock)(IDirect3DExecuteBuffer *This, LPD3DEXECUTEBUFFERDESC);HRESULT ( *Unlock)(IDirect3DExecuteBuffer *This);HRESULT ( *SetExecuteData)(IDirect3DExecuteBuffer *This, LPD3DEXECUTEDATA);HRESULT ( *GetExecuteData)(IDirect3DExecuteBuffer *This, LPD3DEXECUTEDATA);HRESULT ( *Validate)(IDirect3DExecuteBuffer *This, LPDWORD, LPD3DVALIDATECALLBACK, LPVOID, DWORD);HRESULT ( *Optimize)(IDirect3DExecuteBuffer *This, DWORD);};
struct IDirectSound3DListenerVtbl {HRESULT ( *QueryInterface)(IDirectSound3DListener *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound3DListener *This);ULONG ( *Release)(IDirectSound3DListener *This);HRESULT ( *GetAllParameters)(IDirectSound3DListener *This, LPDS3DLISTENER);HRESULT ( *GetDistanceFactor)(IDirectSound3DListener *This, LPD3DVALUE);HRESULT ( *GetDopplerFactor)(IDirectSound3DListener *This, LPD3DVALUE);HRESULT ( *GetOrientation)(IDirectSound3DListener *This, LPD3DVECTOR, LPD3DVECTOR);HRESULT ( *GetPosition)(IDirectSound3DListener *This, LPD3DVECTOR);HRESULT ( *GetRolloffFactor)(IDirectSound3DListener *This, LPD3DVALUE);HRESULT ( *GetVelocity)(IDirectSound3DListener *This, LPD3DVECTOR);HRESULT ( *SetAllParameters)(IDirectSound3DListener *This, LPCDS3DLISTENER, DWORD);HRESULT ( *SetDistanceFactor)(IDirectSound3DListener *This, D3DVALUE, DWORD);HRESULT ( *SetDopplerFactor)(IDirectSound3DListener *This, D3DVALUE, DWORD);HRESULT ( *SetOrientation)(IDirectSound3DListener *This, D3DVALUE, D3DVALUE, D3DVALUE, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);HRESULT ( *SetPosition)(IDirectSound3DListener *This, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);HRESULT ( *SetRolloffFactor)(IDirectSound3DListener *This, D3DVALUE, DWORD);HRESULT ( *SetVelocity)(IDirectSound3DListener *This, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);HRESULT ( *CommitDeferredSettings)(IDirectSound3DListener *This);};
struct IASQLOLEConfigValuesVtbl {HRESULT ( *QueryInterface)(IASQLOLEConfigValues *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEConfigValues *This);ULONG ( *Release)(IASQLOLEConfigValues *This);HRESULT ( *GetApplication)(IASQLOLEConfigValues *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEConfigValues *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEConfigValues *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEConfigValues *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEConfigValues *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEConfigValues *This, int lOrdinal, LPASQLOLECONFIGVALUE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEConfigValues *This, LPCSTR szName, LPASQLOLECONFIGVALUE *ppObj);HRESULT ( *GetItemByID)(IASQLOLEConfigValues *This, int lID, LPASQLOLECONFIGVALUE *ppObj);HRESULT ( *GetCount)(IASQLOLEConfigValues *This, LPLONG plCount);HRESULT ( *Refresh)(IASQLOLEConfigValues *This);};
struct IASQLOLEDRIDefaultVtbl {HRESULT ( *QueryInterface)(IASQLOLEDRIDefault *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDRIDefault *This);ULONG ( *Release)(IASQLOLEDRIDefault *This);HRESULT ( *GetApplication)(IASQLOLEDRIDefault *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDRIDefault *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDRIDefault *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDRIDefault *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDRIDefault *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEDRIDefault *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEDRIDefault *This, LPCSTR NewValue);HRESULT ( *GetText)(IASQLOLEDRIDefault *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLEDRIDefault *This, LPCSTR NewValue);HRESULT ( *Remove)(IASQLOLEDRIDefault *This);HRESULT ( *Script)(IASQLOLEDRIDefault *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);};
struct IDirect3DRMObjectVtbl {HRESULT ( *QueryInterface)(IDirect3DRMObject *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMObject *This);ULONG ( *Release)(IDirect3DRMObject *This);HRESULT ( *Clone)(IDirect3DRMObject *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMObject *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMObject *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMObject *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMObject *This);HRESULT ( *SetName)(IDirect3DRMObject *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMObject *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMObject *This, LPDWORD lpdwSize, LPSTR lpName);};
struct IDirect3DRMVisualVtbl {HRESULT ( *QueryInterface)(IDirect3DRMVisual *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMVisual *This);ULONG ( *Release)(IDirect3DRMVisual *This);HRESULT ( *Clone)(IDirect3DRMVisual *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMVisual *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMVisual *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMVisual *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMVisual *This);HRESULT ( *SetName)(IDirect3DRMVisual *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMVisual *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMVisual *This, LPDWORD lpdwSize, LPSTR lpName);};
struct IOleInPlaceSiteExVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteEx *This);ULONG ( *Release)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindow)(IOleInPlaceSiteEx *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteEx *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteEx *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteEx *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteEx *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteEx *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteEx *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteEx *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteEx *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteEx *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteEx *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteEx *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteEx *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteEx *This);};
struct IASQLOLENameListVtbl {HRESULT ( *QueryInterface)(IASQLOLENameList *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLENameList *This);ULONG ( *Release)(IASQLOLENameList *This);HRESULT ( *GetApplication)(IASQLOLENameList *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLENameList *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLENameList *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLENameList *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLENameList *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLENameList *This, int lOrdinal, LPBSTRA pRetVal);HRESULT ( *GetCount)(IASQLOLENameList *This, LPLONG plCount);HRESULT ( *Refresh)(IASQLOLENameList *This);HRESULT ( *FindName)(IASQLOLENameList *This, LPCSTR szName, LPLONG pRetVal);};
struct IMAPIViewContextVtbl {HRESULT ( *QueryInterface)(IMAPIViewContext *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIViewContext *This);ULONG ( *Release)(IMAPIViewContext *This);HRESULT ( *GetLastError)(IMAPIViewContext *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SetAdviseSink)(IMAPIViewContext *This, LPMAPIFORMADVISESINK pmvns);HRESULT ( *ActivateNext)(IMAPIViewContext *This, ULONG ulDir, LPCRECT prcPosRect);HRESULT ( *GetPrintSetup)(IMAPIViewContext *This, ULONG ulFlags, LPFORMPRINTSETUP *lppFormPrintSetup);HRESULT ( *GetSaveStream)(IMAPIViewContext *This, ULONG *pulFlags, ULONG *pulFormat, LPSTREAM *ppstm);HRESULT ( *GetViewStatus)(IMAPIViewContext *This, LPULONG lpulStatus);};
struct IASQLOLEServersVtbl {HRESULT ( *QueryInterface)(IASQLOLEServers *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEServers *This);ULONG ( *Release)(IASQLOLEServers *This);HRESULT ( *GetApplication)(IASQLOLEServers *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEServers *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEServers *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEServers *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEServers *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEServers *This, int lOrdinal, LPASQLOLESERVER *ppObj);HRESULT ( *GetItemByName)(IASQLOLEServers *This, LPCSTR szName, LPASQLOLESERVER *ppObj);HRESULT ( *GetItemByID)(IASQLOLEServers *This, int lID, LPASQLOLESERVER *ppObj);HRESULT ( *GetCount)(IASQLOLEServers *This, LPLONG plCount);};
struct tagOLEUICHANGEICONA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;HGLOBAL hMetaPict;CLSID clsid;CHAR szIconExe[260];int cchIconExe;};
struct IASQLOLENamesVtbl {HRESULT ( *QueryInterface)(IASQLOLENames *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLENames *This);ULONG ( *Release)(IASQLOLENames *This);HRESULT ( *GetApplication)(IASQLOLENames *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLENames *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLENames *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLENames *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLENames *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLENames *This, int lOrdinal, LPBSTRA pRetVal);HRESULT ( *GetCount)(IASQLOLENames *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLENames *This, LPCSTR szName);HRESULT ( *RemoveByOrd)(IASQLOLENames *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLENames *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLENames *This);HRESULT ( *InsertByOrd)(IASQLOLENames *This, LPCSTR szName, int lOrdinal);HRESULT ( *InsertByName)(IASQLOLENames *This, LPCSTR szName, LPCSTR szBeforeName);HRESULT ( *ReplaceByOrd)(IASQLOLENames *This, LPCSTR szName, int lOrdinal);HRESULT ( *ReplaceByName)(IASQLOLENames *This, LPCSTR szName, LPCSTR szReplaceName);HRESULT ( *FindName)(IASQLOLENames *This, LPCSTR szName, LPLONG pRetVal);};
struct IContextMenu2Vtbl {HRESULT ( *QueryInterface)(IContextMenu2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IContextMenu2 *This);ULONG ( *Release)(IContextMenu2 *This);HRESULT ( *QueryContextMenu)(IContextMenu2 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu2 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu2 *This, UINT idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu2 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);};
struct IViewObjectVtbl {HRESULT ( *QueryInterface)(IViewObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject *This);ULONG ( *Release)(IViewObject *This);HRESULT ( *Draw)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);};
struct ITableDataVtbl {HRESULT ( *QueryInterface)(ITableData *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ITableData *This);ULONG ( *Release)(ITableData *This);HRESULT ( *HrGetView)(ITableData *This, LPSSortOrderSet lpSSortOrderSet, CALLERRELEASE *lpfCallerRelease, ULONG ulCallerData, LPMAPITABLE *lppMAPITable);HRESULT ( *HrModifyRow)(ITableData *This, LPSRow);HRESULT ( *HrDeleteRow)(ITableData *This, LPSPropValue lpSPropValue);HRESULT ( *HrQueryRow)(ITableData *This, LPSPropValue lpsPropValue, LPSRow *lppSRow, ULONG *lpuliRow);HRESULT ( *HrEnumRow)(ITableData *This, ULONG ulRowNumber, LPSRow *lppSRow);HRESULT ( *HrNotify)(ITableData *This, ULONG ulFlags, ULONG cValues, LPSPropValue lpSPropValue);HRESULT ( *HrInsertRow)(ITableData *This, ULONG uliRow, LPSRow lpSRow);HRESULT ( *HrModifyRows)(ITableData *This, ULONG ulFlags, LPSRowSet lpSRowSet);HRESULT ( *HrDeleteRows)(ITableData *This, ULONG ulFlags, LPSRowSet lprowsetToDelete, ULONG *cRowsDeleted);};
struct IDirect3DVtbl {HRESULT ( *QueryInterface)(IDirect3D *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3D *This);ULONG ( *Release)(IDirect3D *This);HRESULT ( *Initialize)(IDirect3D *This,  IID *);HRESULT ( *EnumDevices)(IDirect3D *This, LPD3DENUMDEVICESCALLBACK, LPVOID);HRESULT ( *CreateLight)(IDirect3D *This, LPDIRECT3DLIGHT *, IUnknown *);HRESULT ( *CreateMaterial)(IDirect3D *This, LPDIRECT3DMATERIAL *, IUnknown *);HRESULT ( *CreateViewport)(IDirect3D *This, LPDIRECT3DVIEWPORT *, IUnknown *);HRESULT ( *FindDevice)(IDirect3D *This, LPD3DFINDDEVICESEARCH, LPD3DFINDDEVICERESULT);};
struct tagPSDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCSTR lpPrintTemplateName;LPCSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
union _9624B207E0A914870924A3D14631D94B___5E4550463BAFEE6E8C703CAEAD9B5F63 {_FP32 Fp32Value;_FP64 Fp64Value;_FP80 Fp80Value;_FP128 Fp128Value;_I16 I16Value;_I32 I32Value;_I64 I64Value;_U16 U16Value;_U32 U32Value;_U64 U64Value;_BCD80 Bcd80Value;char *StringValue;int CompareValue;};
union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6 {SComparePropsRestriction resCompareProps;SAndRestriction resAnd;SOrRestriction resOr;SNotRestriction resNot;SContentRestriction resContent;SPropertyRestriction resProperty;SBitMaskRestriction resBitMask;SSizeRestriction resSize;SExistRestriction resExist;SSubRestriction resSub;SCommentRestriction resComment;};
struct IExchangeImportContentsChangesVtbl {HRESULT ( *QueryInterface)(IExchangeImportContentsChanges *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExchangeImportContentsChanges *This);ULONG ( *Release)(IExchangeImportContentsChanges *This);HRESULT ( *GetLastError)(IExchangeImportContentsChanges *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Config)(IExchangeImportContentsChanges *This, LPSTREAM lpStream, ULONG ulFlags);HRESULT ( *UpdateState)(IExchangeImportContentsChanges *This, LPSTREAM lpStream);HRESULT ( *ImportMessageChange)(IExchangeImportContentsChanges *This, ULONG cpvalChanges, LPSPropValue ppvalChanges, ULONG ulFlags, LPMESSAGE *lppmessage);HRESULT ( *ImportMessageDeletion)(IExchangeImportContentsChanges *This, ULONG ulFlags, LPENTRYLIST lpSrcEntryList);HRESULT ( *ImportPerUserReadStateChange)(IExchangeImportContentsChanges *This, ULONG cElements, LPREADSTATE lpReadState);HRESULT ( *ImportMessageMove)(IExchangeImportContentsChanges *This, ULONG cbSourceKeySrcFolder, BYTE *pbSourceKeySrcFolder, ULONG cbSourceKeySrcMessage, BYTE *pbSourceKeySrcMessage, ULONG cbPCLMessage, BYTE *pbPCLMessage, ULONG cbSourceKeyDestMessage, BYTE *pbSourceKeyDestMessage, ULONG cbChangeNumDestMessage, BYTE *pbChangeNumDestMessage);};
struct IASQLOLEUserDefinedDatatypesVtbl {HRESULT ( *QueryInterface)(IASQLOLEUserDefinedDatatypes *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEUserDefinedDatatypes *This);ULONG ( *Release)(IASQLOLEUserDefinedDatatypes *This);HRESULT ( *GetApplication)(IASQLOLEUserDefinedDatatypes *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEUserDefinedDatatypes *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEUserDefinedDatatypes *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEUserDefinedDatatypes *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEUserDefinedDatatypes *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEUserDefinedDatatypes *This, int lOrdinal, LPASQLOLEUSERDEFINEDDATATYPE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEUserDefinedDatatypes *This, LPCSTR szName, LPASQLOLEUSERDEFINEDDATATYPE *ppObj);HRESULT ( *GetItemByID)(IASQLOLEUserDefinedDatatypes *This, int lID, LPASQLOLEUSERDEFINEDDATATYPE *ppObj);HRESULT ( *GetCount)(IASQLOLEUserDefinedDatatypes *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEUserDefinedDatatypes *This, LPASQLOLEUSERDEFINEDDATATYPE Object);HRESULT ( *RemoveByOrd)(IASQLOLEUserDefinedDatatypes *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEUserDefinedDatatypes *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEUserDefinedDatatypes *This, BOOL bReleaseMemberObjects);};
struct IASQLOLERegisteredServersVtbl {HRESULT ( *QueryInterface)(IASQLOLERegisteredServers *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERegisteredServers *This);ULONG ( *Release)(IASQLOLERegisteredServers *This);HRESULT ( *GetApplication)(IASQLOLERegisteredServers *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERegisteredServers *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERegisteredServers *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERegisteredServers *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERegisteredServers *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLERegisteredServers *This, int lOrdinal, LPASQLOLEREGISTEREDSERVER *ppObj);HRESULT ( *GetItemByName)(IASQLOLERegisteredServers *This, LPCSTR szName, LPASQLOLEREGISTEREDSERVER *ppObj);HRESULT ( *GetCount)(IASQLOLERegisteredServers *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLERegisteredServers *This, LPASQLOLEREGISTEREDSERVER Object);HRESULT ( *RemoveByOrd)(IASQLOLERegisteredServers *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLERegisteredServers *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLERegisteredServers *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEStoredProceduresVtbl {HRESULT ( *QueryInterface)(IASQLOLEStoredProcedures *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEStoredProcedures *This);ULONG ( *Release)(IASQLOLEStoredProcedures *This);HRESULT ( *GetApplication)(IASQLOLEStoredProcedures *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEStoredProcedures *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEStoredProcedures *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEStoredProcedures *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEStoredProcedures *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEStoredProcedures *This, int lOrdinal, LPASQLOLESTOREDPROCEDURE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEStoredProcedures *This, LPCSTR szName, LPASQLOLESTOREDPROCEDURE *ppObj);HRESULT ( *GetItemByID)(IASQLOLEStoredProcedures *This, int lID, LPASQLOLESTOREDPROCEDURE *ppObj);HRESULT ( *GetCount)(IASQLOLEStoredProcedures *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEStoredProcedures *This, LPASQLOLESTOREDPROCEDURE Object);HRESULT ( *RemoveByOrd)(IASQLOLEStoredProcedures *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEStoredProcedures *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEStoredProcedures *This, BOOL bReleaseMemberObjects);};
struct IASQLOLERemoteServersVtbl {HRESULT ( *QueryInterface)(IASQLOLERemoteServers *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERemoteServers *This);ULONG ( *Release)(IASQLOLERemoteServers *This);HRESULT ( *GetApplication)(IASQLOLERemoteServers *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERemoteServers *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERemoteServers *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERemoteServers *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERemoteServers *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLERemoteServers *This, int lOrdinal, LPASQLOLEREMOTESERVER *ppObj);HRESULT ( *GetItemByName)(IASQLOLERemoteServers *This, LPCSTR szName, LPASQLOLEREMOTESERVER *ppObj);HRESULT ( *GetItemByID)(IASQLOLERemoteServers *This, int lID, LPASQLOLEREMOTESERVER *ppObj);HRESULT ( *GetCount)(IASQLOLERemoteServers *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLERemoteServers *This, LPASQLOLEREMOTESERVER Object);HRESULT ( *RemoveByOrd)(IASQLOLERemoteServers *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLERemoteServers *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLERemoteServers *This, BOOL bReleaseMemberObjects);};
struct IASQLOLESubscriptionsVtbl {HRESULT ( *QueryInterface)(IASQLOLESubscriptions *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLESubscriptions *This);ULONG ( *Release)(IASQLOLESubscriptions *This);HRESULT ( *GetApplication)(IASQLOLESubscriptions *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLESubscriptions *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLESubscriptions *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLESubscriptions *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLESubscriptions *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLESubscriptions *This, int lOrdinal, LPASQLOLESUBSCRIPTION *ppObj);HRESULT ( *GetItemByName)(IASQLOLESubscriptions *This, LPCSTR szName, LPASQLOLESUBSCRIPTION *ppObj);HRESULT ( *GetCount)(IASQLOLESubscriptions *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLESubscriptions *This, LPASQLOLESUBSCRIPTION Object);HRESULT ( *RemoveByOrd)(IASQLOLESubscriptions *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLESubscriptions *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLESubscriptions *This, BOOL bReleaseMemberObjects);};
struct IDirect3DRMUserVisualVtbl {HRESULT ( *QueryInterface)(IDirect3DRMUserVisual *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMUserVisual *This);ULONG ( *Release)(IDirect3DRMUserVisual *This);HRESULT ( *Clone)(IDirect3DRMUserVisual *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMUserVisual *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMUserVisual *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMUserVisual *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMUserVisual *This);HRESULT ( *SetName)(IDirect3DRMUserVisual *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMUserVisual *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMUserVisual *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMUserVisual *This, D3DRMUSERVISUALCALLBACK fn, void *arg);};
struct IASQLOLEPublicationsVtbl {HRESULT ( *QueryInterface)(IASQLOLEPublications *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEPublications *This);ULONG ( *Release)(IASQLOLEPublications *This);HRESULT ( *GetApplication)(IASQLOLEPublications *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEPublications *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEPublications *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEPublications *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEPublications *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEPublications *This, int lOrdinal, LPASQLOLEPUBLICATION *ppObj);HRESULT ( *GetItemByName)(IASQLOLEPublications *This, LPCSTR szName, LPASQLOLEPUBLICATION *ppObj);HRESULT ( *GetItemByID)(IASQLOLEPublications *This, int lID, LPASQLOLEPUBLICATION *ppObj);HRESULT ( *GetCount)(IASQLOLEPublications *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEPublications *This, LPASQLOLEPUBLICATION Object);HRESULT ( *RemoveByOrd)(IASQLOLEPublications *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEPublications *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEPublications *This, BOOL bReleaseMemberObjects);};
struct IASQLOLERemoteLoginsVtbl {HRESULT ( *QueryInterface)(IASQLOLERemoteLogins *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERemoteLogins *This);ULONG ( *Release)(IASQLOLERemoteLogins *This);HRESULT ( *GetApplication)(IASQLOLERemoteLogins *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERemoteLogins *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERemoteLogins *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERemoteLogins *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERemoteLogins *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLERemoteLogins *This, int lOrdinal, LPASQLOLEREMOTELOGIN *ppObj);HRESULT ( *GetItemByName)(IASQLOLERemoteLogins *This, LPCSTR szName, LPASQLOLEREMOTELOGIN *ppObj);HRESULT ( *GetCount)(IASQLOLERemoteLogins *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLERemoteLogins *This, LPASQLOLEREMOTELOGIN Object);HRESULT ( *RemoveByOrd)(IASQLOLERemoteLogins *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLERemoteLogins *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLERemoteLogins *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEServerGroupsVtbl {HRESULT ( *QueryInterface)(IASQLOLEServerGroups *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEServerGroups *This);ULONG ( *Release)(IASQLOLEServerGroups *This);HRESULT ( *GetApplication)(IASQLOLEServerGroups *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEServerGroups *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEServerGroups *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEServerGroups *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEServerGroups *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEServerGroups *This, int lOrdinal, LPASQLOLESERVERGROUP *ppObj);HRESULT ( *GetItemByName)(IASQLOLEServerGroups *This, LPCSTR szName, LPASQLOLESERVERGROUP *ppObj);HRESULT ( *GetCount)(IASQLOLEServerGroups *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEServerGroups *This, LPASQLOLESERVERGROUP Object);HRESULT ( *RemoveByOrd)(IASQLOLEServerGroups *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEServerGroups *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEServerGroups *This, BOOL bReleaseMemberObjects);};
struct IASQLOLESubscriptionVtbl {HRESULT ( *QueryInterface)(IASQLOLESubscription *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLESubscription *This);ULONG ( *Release)(IASQLOLESubscription *This);HRESULT ( *GetApplication)(IASQLOLESubscription *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLESubscription *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLESubscription *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLESubscription *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLESubscription *This, LPVOID lpvNewValue);HRESULT ( *GetServerName)(IASQLOLESubscription *This, LPBSTRA pRetVal);HRESULT ( *SetServerName)(IASQLOLESubscription *This, LPCSTR NewValue);HRESULT ( *GetDestinationDatabase)(IASQLOLESubscription *This, LPBSTRA pRetVal);HRESULT ( *SetDestinationDatabase)(IASQLOLESubscription *This, LPCSTR NewValue);HRESULT ( *GetInitialSyncType)(IASQLOLESubscription *This, SQLOLE_SUBSYNC_TYPE *pRetVal);HRESULT ( *SetInitialSyncType)(IASQLOLESubscription *This, SQLOLE_SUBSYNC_TYPE NewValue);HRESULT ( *GetStatus)(IASQLOLESubscription *This, SQLOLE_SUBSTATUS_TYPE *pRetVal);HRESULT ( *SetStatus)(IASQLOLESubscription *This, SQLOLE_SUBSTATUS_TYPE NewValue);HRESULT ( *Remove)(IASQLOLESubscription *This);HRESULT ( *BeginAlter)(IASQLOLESubscription *This);HRESULT ( *DoAlter)(IASQLOLESubscription *This);HRESULT ( *CancelAlter)(IASQLOLESubscription *This);};
struct _IMAGE_DEBUG_INFORMATION {LIST_ENTRY List;DWORD Size;PVOID MappedBase;USHORT Machine;USHORT Characteristics;DWORD CheckSum;DWORD ImageBase;DWORD SizeOfImage;DWORD NumberOfSections;PIMAGE_SECTION_HEADER Sections;DWORD ExportedNamesSize;LPSTR ExportedNames;DWORD NumberOfFunctionTableEntries;PIMAGE_FUNCTION_ENTRY FunctionTableEntries;DWORD LowestFunctionStartingAddress;DWORD HighestFunctionEndingAddress;DWORD NumberOfFpoTableEntries;PFPO_DATA FpoTableEntries;DWORD SizeOfCoffSymbols;PIMAGE_COFF_SYMBOLS_HEADER CoffSymbols;DWORD SizeOfCodeViewSymbols;PVOID CodeViewSymbols;LPSTR ImageFilePath;LPSTR ImageFileName;LPSTR DebugFilePath;DWORD TimeDateStamp;BOOL RomImage;PIMAGE_DEBUG_DIRECTORY DebugDirectory;DWORD NumberOfDebugDirectories;DWORD Reserved[3];};
struct IASQLOLEConfigValueVtbl {HRESULT ( *QueryInterface)(IASQLOLEConfigValue *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEConfigValue *This);ULONG ( *Release)(IASQLOLEConfigValue *This);HRESULT ( *GetApplication)(IASQLOLEConfigValue *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEConfigValue *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEConfigValue *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEConfigValue *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEConfigValue *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEConfigValue *This, LPBSTRA pRetVal);HRESULT ( *GetMinimumValue)(IASQLOLEConfigValue *This, LPLONG pRetVal);HRESULT ( *GetMaximumValue)(IASQLOLEConfigValue *This, LPLONG pRetVal);HRESULT ( *GetDynamicReconfigure)(IASQLOLEConfigValue *This, LPBOOL pRetVal);HRESULT ( *GetCurrentValue)(IASQLOLEConfigValue *This, LPLONG pRetVal);HRESULT ( *SetCurrentValue)(IASQLOLEConfigValue *This, int NewValue);HRESULT ( *GetRunningValue)(IASQLOLEConfigValue *This, LPLONG pRetVal);HRESULT ( *GetDescription)(IASQLOLEConfigValue *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLEConfigValue *This, SQLOLE_CONFIGVALUE_TYPE *pRetVal);};
struct IASQLOLERemoteLoginVtbl {HRESULT ( *QueryInterface)(IASQLOLERemoteLogin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERemoteLogin *This);ULONG ( *Release)(IASQLOLERemoteLogin *This);HRESULT ( *GetApplication)(IASQLOLERemoteLogin *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERemoteLogin *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERemoteLogin *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERemoteLogin *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERemoteLogin *This, LPVOID lpvNewValue);HRESULT ( *GetLocalName)(IASQLOLERemoteLogin *This, LPBSTRA pRetVal);HRESULT ( *SetLocalName)(IASQLOLERemoteLogin *This, LPCSTR NewValue);HRESULT ( *GetRemoteName)(IASQLOLERemoteLogin *This, LPBSTRA pRetVal);HRESULT ( *SetRemoteName)(IASQLOLERemoteLogin *This, LPCSTR NewValue);HRESULT ( *GetTrusted)(IASQLOLERemoteLogin *This, LPBOOL pRetVal);HRESULT ( *SetTrusted)(IASQLOLERemoteLogin *This, BOOL NewValue);HRESULT ( *Remove)(IASQLOLERemoteLogin *This);};
struct IDirect3DRMMaterialVtbl {HRESULT ( *QueryInterface)(IDirect3DRMMaterial *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMMaterial *This);ULONG ( *Release)(IDirect3DRMMaterial *This);HRESULT ( *Clone)(IDirect3DRMMaterial *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMMaterial *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMMaterial *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMMaterial *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMMaterial *This);HRESULT ( *SetName)(IDirect3DRMMaterial *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMMaterial *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMMaterial *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *SetPower)(IDirect3DRMMaterial *This, D3DVALUE power);HRESULT ( *SetSpecular)(IDirect3DRMMaterial *This, D3DVALUE r, D3DVALUE g, D3DVALUE b);HRESULT ( *SetEmissive)(IDirect3DRMMaterial *This, D3DVALUE r, D3DVALUE g, D3DVALUE b);D3DVALUE ( *GetPower)(IDirect3DRMMaterial *This);HRESULT ( *GetSpecular)(IDirect3DRMMaterial *This, D3DVALUE *r, D3DVALUE *g, D3DVALUE *b);HRESULT ( *GetEmissive)(IDirect3DRMMaterial *This, D3DVALUE *r, D3DVALUE *g, D3DVALUE *b);};
struct IDirectDrawClipperVtbl {HRESULT ( *QueryInterface)(IDirectDrawClipper *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawClipper *This);ULONG ( *Release)(IDirectDrawClipper *This);HRESULT ( *GetClipList)(IDirectDrawClipper *This, LPRECT, LPRGNDATA, LPDWORD);HRESULT ( *GetHWnd)(IDirectDrawClipper *This, HWND *);HRESULT ( *Initialize)(IDirectDrawClipper *This, LPDIRECTDRAW, DWORD);HRESULT ( *IsClipListChanged)(IDirectDrawClipper *This, BOOL *);HRESULT ( *SetClipList)(IDirectDrawClipper *This, LPRGNDATA, DWORD);HRESULT ( *SetHWnd)(IDirectDrawClipper *This, DWORD, HWND);};
struct IASQLOLEDatabasesVtbl {HRESULT ( *QueryInterface)(IASQLOLEDatabases *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDatabases *This);ULONG ( *Release)(IASQLOLEDatabases *This);HRESULT ( *GetApplication)(IASQLOLEDatabases *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDatabases *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDatabases *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDatabases *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDatabases *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEDatabases *This, int lOrdinal, LPASQLOLEDATABASE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEDatabases *This, LPCSTR szName, LPASQLOLEDATABASE *ppObj);HRESULT ( *GetItemByID)(IASQLOLEDatabases *This, int lID, LPASQLOLEDATABASE *ppObj);HRESULT ( *GetCount)(IASQLOLEDatabases *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEDatabases *This, LPASQLOLEDATABASE Object);HRESULT ( *RemoveByOrd)(IASQLOLEDatabases *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEDatabases *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEDatabases *This, BOOL bReleaseMemberObjects);};
struct IASQLOLELanguagesVtbl {HRESULT ( *QueryInterface)(IASQLOLELanguages *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLELanguages *This);ULONG ( *Release)(IASQLOLELanguages *This);HRESULT ( *GetApplication)(IASQLOLELanguages *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLELanguages *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLELanguages *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLELanguages *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLELanguages *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLELanguages *This, int lOrdinal, LPASQLOLELANGUAGE *ppObj);HRESULT ( *GetItemByName)(IASQLOLELanguages *This, LPCSTR szName, LPASQLOLELANGUAGE *ppObj);HRESULT ( *GetItemByID)(IASQLOLELanguages *This, int lID, LPASQLOLELANGUAGE *ppObj);HRESULT ( *GetCount)(IASQLOLELanguages *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLELanguages *This, LPASQLOLELANGUAGE Object);HRESULT ( *RemoveByOrd)(IASQLOLELanguages *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLELanguages *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLELanguages *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEOperatorsVtbl {HRESULT ( *QueryInterface)(IASQLOLEOperators *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEOperators *This);ULONG ( *Release)(IASQLOLEOperators *This);HRESULT ( *GetApplication)(IASQLOLEOperators *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEOperators *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEOperators *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEOperators *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEOperators *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEOperators *This, int lOrdinal, LPASQLOLEOPERATOR *ppObj);HRESULT ( *GetItemByName)(IASQLOLEOperators *This, LPCSTR szName, LPASQLOLEOPERATOR *ppObj);HRESULT ( *GetItemByID)(IASQLOLEOperators *This, int lID, LPASQLOLEOPERATOR *ppObj);HRESULT ( *GetCount)(IASQLOLEOperators *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEOperators *This, LPASQLOLEOPERATOR Object);HRESULT ( *RemoveByOrd)(IASQLOLEOperators *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEOperators *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEOperators *This, BOOL bReleaseMemberObjects);};
struct tagOLEUICHANGESOURCEA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;OPENFILENAMEA *lpOFN;DWORD dwReserved1[4];LPOLEUILINKCONTAINERA lpOleUILinkContainer;DWORD dwLink;LPSTR lpszDisplayName;ULONG nFileLength;LPSTR lpszFrom;LPSTR lpszTo;};
struct IASQLOLEArticlesVtbl {HRESULT ( *QueryInterface)(IASQLOLEArticles *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEArticles *This);ULONG ( *Release)(IASQLOLEArticles *This);HRESULT ( *GetApplication)(IASQLOLEArticles *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEArticles *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEArticles *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEArticles *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEArticles *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEArticles *This, int lOrdinal, LPASQLOLEARTICLE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEArticles *This, LPCSTR szName, LPASQLOLEARTICLE *ppObj);HRESULT ( *GetItemByID)(IASQLOLEArticles *This, int lID, LPASQLOLEARTICLE *ppObj);HRESULT ( *GetCount)(IASQLOLEArticles *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEArticles *This, LPASQLOLEARTICLE Object);HRESULT ( *RemoveByOrd)(IASQLOLEArticles *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEArticles *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEArticles *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEDefaultsVtbl {HRESULT ( *QueryInterface)(IASQLOLEDefaults *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDefaults *This);ULONG ( *Release)(IASQLOLEDefaults *This);HRESULT ( *GetApplication)(IASQLOLEDefaults *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDefaults *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDefaults *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDefaults *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDefaults *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEDefaults *This, int lOrdinal, LPASQLOLEDEFAULT *ppObj);HRESULT ( *GetItemByName)(IASQLOLEDefaults *This, LPCSTR szName, LPASQLOLEDEFAULT *ppObj);HRESULT ( *GetItemByID)(IASQLOLEDefaults *This, int lID, LPASQLOLEDEFAULT *ppObj);HRESULT ( *GetCount)(IASQLOLEDefaults *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEDefaults *This, LPASQLOLEDEFAULT Object);HRESULT ( *RemoveByOrd)(IASQLOLEDefaults *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEDefaults *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEDefaults *This, BOOL bReleaseMemberObjects);};
struct IASQLOLELanguageVtbl {HRESULT ( *QueryInterface)(IASQLOLELanguage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLELanguage *This);ULONG ( *Release)(IASQLOLELanguage *This);HRESULT ( *GetApplication)(IASQLOLELanguage *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLELanguage *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLELanguage *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLELanguage *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLELanguage *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLELanguage *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLELanguage *This, LPLONG plID);HRESULT ( *GetUpgrade)(IASQLOLELanguage *This, LPLONG pRetVal);HRESULT ( *GetAlias)(IASQLOLELanguage *This, LPBSTRA pRetVal);HRESULT ( *SetAlias)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetMonths)(IASQLOLELanguage *This, LPBSTRA pRetVal);HRESULT ( *SetMonths)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetShortMonths)(IASQLOLELanguage *This, LPBSTRA pRetVal);HRESULT ( *SetShortMonths)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetDays)(IASQLOLELanguage *This, LPBSTRA pRetVal);HRESULT ( *SetDays)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetDateFormatA)(IASQLOLELanguage *This, LPBSTRA pRetVal);HRESULT ( *SetDateFormat)(IASQLOLELanguage *This, LPCSTR NewValue);HRESULT ( *GetFirstDayOfWeek)(IASQLOLELanguage *This, LPINT pRetVal);HRESULT ( *SetFirstDayOfWeek)(IASQLOLELanguage *This, int NewValue);HRESULT ( *GetMonth)(IASQLOLELanguage *This, int iMonth, LPBSTRA pRetVal);HRESULT ( *GetShortMonth)(IASQLOLELanguage *This, int iMonth, LPBSTRA pRetVal);HRESULT ( *GetDay)(IASQLOLELanguage *This, int iDay, LPBSTRA pRetVal);HRESULT ( *Remove)(IASQLOLELanguage *This);};
struct IASQLOLETriggersVtbl {HRESULT ( *QueryInterface)(IASQLOLETriggers *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETriggers *This);ULONG ( *Release)(IASQLOLETriggers *This);HRESULT ( *GetApplication)(IASQLOLETriggers *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETriggers *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETriggers *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETriggers *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETriggers *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLETriggers *This, int lOrdinal, LPASQLOLETRIGGER *ppObj);HRESULT ( *GetItemByName)(IASQLOLETriggers *This, LPCSTR szName, LPASQLOLETRIGGER *ppObj);HRESULT ( *GetItemByID)(IASQLOLETriggers *This, int lID, LPASQLOLETRIGGER *ppObj);HRESULT ( *GetCount)(IASQLOLETriggers *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLETriggers *This, LPASQLOLETRIGGER Object);HRESULT ( *RemoveByOrd)(IASQLOLETriggers *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLETriggers *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLETriggers *This, BOOL bReleaseMemberObjects);};
struct _CRYPT_PROVIDER_DATA {DWORD cbStruct;WINTRUST_DATA *pWintrustData;BOOL fOpenedFile;HWND hWndParent;GUID *pgActionID;HCRYPTPROV hProv;DWORD dwError;DWORD dwRegSecuritySettings;DWORD dwRegPolicySettings;CRYPT_PROVIDER_FUNCTIONS sPfns;DWORD cdwTrustStepErrors;DWORD *padwTrustStepErrors;DWORD chStores;HCERTSTORE *pahStores;DWORD dwEncoding;HCRYPTMSG hMsg;GUID gSubject;struct SIP_DISPATCH_INFO_ *pSip;struct SIP_DISPATCH_INFO_ *pCATSip;struct SIP_SUBJECTINFO_ *psSipSubjectInfo;struct SIP_SUBJECTINFO_ *psSipCATSubjectInfo;struct SIP_INDIRECT_DATA_ *psIndirectData;DWORD csSigners;CRYPT_PROVIDER_SGNR *pasSigners;DWORD csProvPrivData;CRYPT_PROVIDER_PRIVDATA *pasProvPrivData;};
struct IASQLOLEColumnsVtbl {HRESULT ( *QueryInterface)(IASQLOLEColumns *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEColumns *This);ULONG ( *Release)(IASQLOLEColumns *This);HRESULT ( *GetApplication)(IASQLOLEColumns *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEColumns *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEColumns *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEColumns *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEColumns *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEColumns *This, int lOrdinal, LPASQLOLECOLUMN *ppObj);HRESULT ( *GetItemByName)(IASQLOLEColumns *This, LPCSTR szName, LPASQLOLECOLUMN *ppObj);HRESULT ( *GetItemByID)(IASQLOLEColumns *This, int lID, LPASQLOLECOLUMN *ppObj);HRESULT ( *GetCount)(IASQLOLEColumns *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEColumns *This, LPASQLOLECOLUMN Object);HRESULT ( *RemoveByOrd)(IASQLOLEColumns *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEColumns *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEColumns *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEDevicesVtbl {HRESULT ( *QueryInterface)(IASQLOLEDevices *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDevices *This);ULONG ( *Release)(IASQLOLEDevices *This);HRESULT ( *GetApplication)(IASQLOLEDevices *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDevices *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDevices *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDevices *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDevices *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEDevices *This, int lOrdinal, LPASQLOLEDEVICE *ppObj);HRESULT ( *GetItemByName)(IASQLOLEDevices *This, LPCSTR szName, LPASQLOLEDEVICE *ppObj);HRESULT ( *GetCount)(IASQLOLEDevices *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEDevices *This, LPASQLOLEDEVICE Object);HRESULT ( *RemoveByOrd)(IASQLOLEDevices *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEDevices *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEDevices *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEIndexesVtbl {HRESULT ( *QueryInterface)(IASQLOLEIndexes *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEIndexes *This);ULONG ( *Release)(IASQLOLEIndexes *This);HRESULT ( *GetApplication)(IASQLOLEIndexes *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEIndexes *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEIndexes *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEIndexes *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEIndexes *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEIndexes *This, int lOrdinal, LPASQLOLEINDEX *ppObj);HRESULT ( *GetItemByName)(IASQLOLEIndexes *This, LPCSTR szName, LPASQLOLEINDEX *ppObj);HRESULT ( *GetItemByID)(IASQLOLEIndexes *This, int lID, LPASQLOLEINDEX *ppObj);HRESULT ( *GetCount)(IASQLOLEIndexes *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEIndexes *This, LPASQLOLEINDEX Object);HRESULT ( *RemoveByOrd)(IASQLOLEIndexes *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEIndexes *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEIndexes *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEAlertsVtbl {HRESULT ( *QueryInterface)(IASQLOLEAlerts *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEAlerts *This);ULONG ( *Release)(IASQLOLEAlerts *This);HRESULT ( *GetApplication)(IASQLOLEAlerts *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEAlerts *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEAlerts *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEAlerts *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEAlerts *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEAlerts *This, int lOrdinal, LPASQLOLEALERT *ppObj);HRESULT ( *GetItemByName)(IASQLOLEAlerts *This, LPCSTR szName, LPASQLOLEALERT *ppObj);HRESULT ( *GetItemByID)(IASQLOLEAlerts *This, int lID, LPASQLOLEALERT *ppObj);HRESULT ( *GetCount)(IASQLOLEAlerts *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEAlerts *This, LPASQLOLEALERT Object);HRESULT ( *RemoveByOrd)(IASQLOLEAlerts *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEAlerts *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEAlerts *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEChecksVtbl {HRESULT ( *QueryInterface)(IASQLOLEChecks *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEChecks *This);ULONG ( *Release)(IASQLOLEChecks *This);HRESULT ( *GetApplication)(IASQLOLEChecks *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEChecks *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEChecks *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEChecks *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEChecks *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEChecks *This, int lOrdinal, LPASQLOLECHECK *ppObj);HRESULT ( *GetItemByName)(IASQLOLEChecks *This, LPCSTR szName, LPASQLOLECHECK *ppObj);HRESULT ( *GetCount)(IASQLOLEChecks *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEChecks *This, LPASQLOLECHECK Object);HRESULT ( *RemoveByOrd)(IASQLOLEChecks *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEChecks *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEChecks *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEGroupsVtbl {HRESULT ( *QueryInterface)(IASQLOLEGroups *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEGroups *This);ULONG ( *Release)(IASQLOLEGroups *This);HRESULT ( *GetApplication)(IASQLOLEGroups *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEGroups *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEGroups *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEGroups *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEGroups *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEGroups *This, int lOrdinal, LPASQLOLEGROUP *ppObj);HRESULT ( *GetItemByName)(IASQLOLEGroups *This, LPCSTR szName, LPASQLOLEGROUP *ppObj);HRESULT ( *GetItemByID)(IASQLOLEGroups *This, int lID, LPASQLOLEGROUP *ppObj);HRESULT ( *GetCount)(IASQLOLEGroups *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEGroups *This, LPASQLOLEGROUP Object);HRESULT ( *RemoveByOrd)(IASQLOLEGroups *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEGroups *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEGroups *This, BOOL bReleaseMemberObjects);};
struct IASQLOLELoginsVtbl {HRESULT ( *QueryInterface)(IASQLOLELogins *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLELogins *This);ULONG ( *Release)(IASQLOLELogins *This);HRESULT ( *GetApplication)(IASQLOLELogins *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLELogins *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLELogins *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLELogins *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLELogins *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLELogins *This, int lOrdinal, LPASQLOLELOGIN *ppObj);HRESULT ( *GetItemByName)(IASQLOLELogins *This, LPCSTR szName, LPASQLOLELOGIN *ppObj);HRESULT ( *GetItemByID)(IASQLOLELogins *This, int lID, LPASQLOLELOGIN *ppObj);HRESULT ( *GetCount)(IASQLOLELogins *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLELogins *This, LPASQLOLELOGIN Object);HRESULT ( *RemoveByOrd)(IASQLOLELogins *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLELogins *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLELogins *This, BOOL bReleaseMemberObjects);};
struct IASQLOLETablesVtbl {HRESULT ( *QueryInterface)(IASQLOLETables *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETables *This);ULONG ( *Release)(IASQLOLETables *This);HRESULT ( *GetApplication)(IASQLOLETables *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETables *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETables *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETables *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETables *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLETables *This, int lOrdinal, LPASQLOLETABLE *ppObj);HRESULT ( *GetItemByName)(IASQLOLETables *This, LPCSTR szName, LPASQLOLETABLE *ppObj);HRESULT ( *GetItemByID)(IASQLOLETables *This, int lID, LPASQLOLETABLE *ppObj);HRESULT ( *GetCount)(IASQLOLETables *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLETables *This, LPASQLOLETABLE Object);HRESULT ( *RemoveByOrd)(IASQLOLETables *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLETables *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLETables *This, BOOL bReleaseMemberObjects);};
struct IASQLOLERulesVtbl {HRESULT ( *QueryInterface)(IASQLOLERules *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERules *This);ULONG ( *Release)(IASQLOLERules *This);HRESULT ( *GetApplication)(IASQLOLERules *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERules *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERules *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERules *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERules *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLERules *This, int lOrdinal, LPASQLOLERULE *ppObj);HRESULT ( *GetItemByName)(IASQLOLERules *This, LPCSTR szName, LPASQLOLERULE *ppObj);HRESULT ( *GetItemByID)(IASQLOLERules *This, int lID, LPASQLOLERULE *ppObj);HRESULT ( *GetCount)(IASQLOLERules *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLERules *This, LPASQLOLERULE Object);HRESULT ( *RemoveByOrd)(IASQLOLERules *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLERules *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLERules *This, BOOL bReleaseMemberObjects);};
struct IASQLOLETasksVtbl {HRESULT ( *QueryInterface)(IASQLOLETasks *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETasks *This);ULONG ( *Release)(IASQLOLETasks *This);HRESULT ( *GetApplication)(IASQLOLETasks *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETasks *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETasks *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETasks *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETasks *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLETasks *This, int lOrdinal, LPASQLOLETASK *ppObj);HRESULT ( *GetItemByName)(IASQLOLETasks *This, LPCSTR szName, LPASQLOLETASK *ppObj);HRESULT ( *GetItemByID)(IASQLOLETasks *This, int lID, LPASQLOLETASK *ppObj);HRESULT ( *GetCount)(IASQLOLETasks *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLETasks *This, LPASQLOLETASK Object);HRESULT ( *RemoveByOrd)(IASQLOLETasks *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLETasks *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLETasks *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEUsersVtbl {HRESULT ( *QueryInterface)(IASQLOLEUsers *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEUsers *This);ULONG ( *Release)(IASQLOLEUsers *This);HRESULT ( *GetApplication)(IASQLOLEUsers *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEUsers *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEUsers *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEUsers *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEUsers *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEUsers *This, int lOrdinal, LPASQLOLEUSER *ppObj);HRESULT ( *GetItemByName)(IASQLOLEUsers *This, LPCSTR szName, LPASQLOLEUSER *ppObj);HRESULT ( *GetItemByID)(IASQLOLEUsers *This, int lID, LPASQLOLEUSER *ppObj);HRESULT ( *GetCount)(IASQLOLEUsers *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEUsers *This, LPASQLOLEUSER Object);HRESULT ( *RemoveByOrd)(IASQLOLEUsers *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEUsers *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEUsers *This, BOOL bReleaseMemberObjects);};
struct IASQLOLEViewsVtbl {HRESULT ( *QueryInterface)(IASQLOLEViews *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEViews *This);ULONG ( *Release)(IASQLOLEViews *This);HRESULT ( *GetApplication)(IASQLOLEViews *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEViews *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEViews *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEViews *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEViews *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEViews *This, int lOrdinal, LPASQLOLEVIEW *ppObj);HRESULT ( *GetItemByName)(IASQLOLEViews *This, LPCSTR szName, LPASQLOLEVIEW *ppObj);HRESULT ( *GetItemByID)(IASQLOLEViews *This, int lID, LPASQLOLEVIEW *ppObj);HRESULT ( *GetCount)(IASQLOLEViews *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEViews *This, LPASQLOLEVIEW Object);HRESULT ( *RemoveByOrd)(IASQLOLEViews *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEViews *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEViews *This, BOOL bReleaseMemberObjects);};
struct IContextMenu3Vtbl {HRESULT ( *QueryInterface)(IContextMenu3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IContextMenu3 *This);ULONG ( *Release)(IContextMenu3 *This);HRESULT ( *QueryContextMenu)(IContextMenu3 *This, HMENU hmenu, UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags);HRESULT ( *InvokeCommand)(IContextMenu3 *This, LPCMINVOKECOMMANDINFO lpici);HRESULT ( *GetCommandString)(IContextMenu3 *This, UINT idCmd, UINT uType, UINT *pwReserved, LPSTR pszName, UINT cchMax);HRESULT ( *HandleMenuMsg)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam);HRESULT ( *HandleMenuMsg2)(IContextMenu3 *This, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct IDirectInputAVtbl {HRESULT ( *QueryInterface)(IDirectInputA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputA *This);ULONG ( *Release)(IDirectInputA *This);HRESULT ( *CreateDevice)(IDirectInputA *This,  GUID *, LPDIRECTINPUTDEVICEA *, LPUNKNOWN);HRESULT ( *EnumDevices)(IDirectInputA *This, DWORD, LPDIENUMDEVICESCALLBACKA, LPVOID, DWORD);HRESULT ( *GetDeviceStatus)(IDirectInputA *This,  GUID *);HRESULT ( *RunControlPanel)(IDirectInputA *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputA *This, HINSTANCE, DWORD);};
struct IDirectInputWVtbl {HRESULT ( *QueryInterface)(IDirectInputW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputW *This);ULONG ( *Release)(IDirectInputW *This);HRESULT ( *CreateDevice)(IDirectInputW *This,  GUID *, LPDIRECTINPUTDEVICEW *, LPUNKNOWN);HRESULT ( *EnumDevices)(IDirectInputW *This, DWORD, LPDIENUMDEVICESCALLBACKW, LPVOID, DWORD);HRESULT ( *GetDeviceStatus)(IDirectInputW *This,  GUID *);HRESULT ( *RunControlPanel)(IDirectInputW *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputW *This, HINSTANCE, DWORD);};
struct IASQLOLEKeysVtbl {HRESULT ( *QueryInterface)(IASQLOLEKeys *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEKeys *This);ULONG ( *Release)(IASQLOLEKeys *This);HRESULT ( *GetApplication)(IASQLOLEKeys *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEKeys *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEKeys *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEKeys *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEKeys *This, LPVOID lpvNewValue);HRESULT ( *GetItemByOrd)(IASQLOLEKeys *This, int lOrdinal, LPASQLOLEKEY *ppObj);HRESULT ( *GetItemByName)(IASQLOLEKeys *This, LPCSTR szName, LPASQLOLEKEY *ppObj);HRESULT ( *GetCount)(IASQLOLEKeys *This, LPLONG plCount);HRESULT ( *Add)(IASQLOLEKeys *This, LPASQLOLEKEY Object);HRESULT ( *RemoveByOrd)(IASQLOLEKeys *This, int lOrdinal);HRESULT ( *RemoveByName)(IASQLOLEKeys *This, LPCSTR szName);HRESULT ( *Refresh)(IASQLOLEKeys *This, BOOL bReleaseMemberObjects);};
struct IViewObject2Vtbl {HRESULT ( *QueryInterface)(IViewObject2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObject2 *This);ULONG ( *Release)(IViewObject2 *This);HRESULT ( *Draw)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObject2 *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObject2 *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);};
struct ITnefVtbl {HRESULT ( *QueryInterface)(ITnef *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ITnef *This);ULONG ( *Release)(ITnef *This);HRESULT ( *AddProps)(ITnef *This, ULONG ulFlags, ULONG ulElemID, LPVOID lpvData, LPSPropTagArray lpPropList);HRESULT ( *ExtractProps)(ITnef *This, ULONG ulFlags, LPSPropTagArray lpPropList, LPSTnefProblemArray *lpProblems);HRESULT ( *Finish)(ITnef *This, ULONG ulFlags, WORD *lpKey, LPSTnefProblemArray *lpProblems);HRESULT ( *OpenTaggedBody)(ITnef *This, LPMESSAGE lpMessage, ULONG ulFlags, LPSTREAM *lppStream);HRESULT ( *SetProps)(ITnef *This, ULONG ulFlags, ULONG ulElemID, ULONG cValues, LPSPropValue lpProps);HRESULT ( *EncodeRecips)(ITnef *This, ULONG ulFlags, LPMAPITABLE lpRecipientTable);HRESULT ( *FinishComponent)(ITnef *This, ULONG ulFlags, ULONG ulComponentID, LPSPropTagArray lpCustomPropList, LPSPropValue lpCustomProps, LPSPropTagArray lpPropList, LPSTnefProblemArray *lpProblems);};
union _5738CA44FE4A305B347403BC29DEBFB1___1E086DA97258E44C2D8AD7C7CCE8E386 {AsnInteger32 number;AsnUnsigned32 unsigned32;AsnCounter64 counter64;AsnOctetString string;AsnBits bits;AsnObjectIdentifier object;AsnSequence sequence;AsnIPAddress address;AsnCounter32 counter;AsnGauge32 gauge;AsnTimeticks ticks;AsnOpaque arbitrary;};
struct IDDVideoPortContainerVtbl {HRESULT ( *QueryInterface)(IDDVideoPortContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDDVideoPortContainer *This);ULONG ( *Release)(IDDVideoPortContainer *This);HRESULT ( *CreateVideoPort)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTDESC, LPDIRECTDRAWVIDEOPORT *, IUnknown *);HRESULT ( *EnumVideoPorts)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTCAPS, LPVOID, LPDDENUMVIDEOCALLBACK);HRESULT ( *GetVideoPortConnectInfo)(IDDVideoPortContainer *This, DWORD, LPDWORD, LPDDVIDEOPORTCONNECT);HRESULT ( *QueryVideoPortStatus)(IDDVideoPortContainer *This, DWORD, LPDDVIDEOPORTSTATUS);};
struct IDirect3DRMWinDeviceVtbl {HRESULT ( *QueryInterface)(IDirect3DRMWinDevice *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMWinDevice *This);ULONG ( *Release)(IDirect3DRMWinDevice *This);HRESULT ( *Clone)(IDirect3DRMWinDevice *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMWinDevice *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMWinDevice *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMWinDevice *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMWinDevice *This);HRESULT ( *SetName)(IDirect3DRMWinDevice *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMWinDevice *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMWinDevice *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *HandlePaint)(IDirect3DRMWinDevice *This, HDC hdc);HRESULT ( *HandleActivate)(IDirect3DRMWinDevice *This, WORD wparam);};
struct IDirectDrawVideoPortVtbl {HRESULT ( *QueryInterface)(IDirectDrawVideoPort *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawVideoPort *This);ULONG ( *Release)(IDirectDrawVideoPort *This);HRESULT ( *Flip)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetBandwidthInfo)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, DWORD, DWORD, DWORD, LPDDVIDEOPORTBANDWIDTH);HRESULT ( *GetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *GetInputFormats)(IDirectDrawVideoPort *This, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetOutputFormats)(IDirectDrawVideoPort *This, LPDDPIXELFORMAT, LPDWORD, LPDDPIXELFORMAT, DWORD);HRESULT ( *GetFieldPolarity)(IDirectDrawVideoPort *This, LPBOOL);HRESULT ( *GetVideoLine)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *GetVideoSignalStatus)(IDirectDrawVideoPort *This, LPDWORD);HRESULT ( *SetColorControls)(IDirectDrawVideoPort *This, LPDDCOLORCONTROL);HRESULT ( *SetTargetSurface)(IDirectDrawVideoPort *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *StartVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *StopVideo)(IDirectDrawVideoPort *This);HRESULT ( *UpdateVideo)(IDirectDrawVideoPort *This, LPDDVIDEOPORTINFO);HRESULT ( *WaitForSync)(IDirectDrawVideoPort *This, DWORD, DWORD, DWORD);};
struct IASQLOLEServerGroupVtbl {HRESULT ( *QueryInterface)(IASQLOLEServerGroup *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEServerGroup *This);ULONG ( *Release)(IASQLOLEServerGroup *This);HRESULT ( *GetApplication)(IASQLOLEServerGroup *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEServerGroup *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEServerGroup *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEServerGroup *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEServerGroup *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEServerGroup *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEServerGroup *This, LPCSTR NewValue);HRESULT ( *GetRegisteredServers)(IASQLOLEServerGroup *This, LPASQLOLEREGISTEREDSERVERS *ppRegisteredServers);HRESULT ( *GetRegisteredServerByName)(IASQLOLEServerGroup *This, LPCSTR szName, LPASQLOLEREGISTEREDSERVER *ppRegisteredServer);HRESULT ( *GetRegisteredServerByOrd)(IASQLOLEServerGroup *This, int lOrdinal, LPASQLOLEREGISTEREDSERVER *ppRegisteredServer);HRESULT ( *RemoveRegisteredServerByName)(IASQLOLEServerGroup *This, LPCSTR szName);HRESULT ( *RemoveRegisteredServerByOrd)(IASQLOLEServerGroup *This, int lOrdinal);HRESULT ( *AddRegisteredServer)(IASQLOLEServerGroup *This, LPASQLOLEREGISTEREDSERVER pRegisteredServer);HRESULT ( *GetRegisteredServerCount)(IASQLOLEServerGroup *This, LPLONG plCount);HRESULT ( *Remove)(IASQLOLEServerGroup *This);};
struct IAMMediaTypeSampleVtbl {HRESULT ( *QueryInterface)(IAMMediaTypeSample *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMediaTypeSample *This);ULONG ( *Release)(IAMMediaTypeSample *This);HRESULT ( *GetMediaStream)(IAMMediaTypeSample *This, IMediaStream **ppMediaStream);HRESULT ( *GetSampleTimes)(IAMMediaTypeSample *This, STREAM_TIME *pStartTime, STREAM_TIME *pEndTime, STREAM_TIME *pCurrentTime);HRESULT ( *SetSampleTimes)(IAMMediaTypeSample *This,  STREAM_TIME *pStartTime,  STREAM_TIME *pEndTime);HRESULT ( *Update)(IAMMediaTypeSample *This, DWORD dwFlags, HANDLE hEvent, PAPCFUNC pfnAPC, DWORD dwAPCData);HRESULT ( *CompletionStatus)(IAMMediaTypeSample *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT ( *SetPointer)(IAMMediaTypeSample *This, BYTE *pBuffer, int lSize);HRESULT ( *GetPointer)(IAMMediaTypeSample *This, BYTE **ppBuffer);int ( *GetSize)(IAMMediaTypeSample *This);HRESULT ( *GetTime)(IAMMediaTypeSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *SetTime)(IAMMediaTypeSample *This, REFERENCE_TIME *pTimeStart, REFERENCE_TIME *pTimeEnd);HRESULT ( *IsSyncPoint)(IAMMediaTypeSample *This);HRESULT ( *SetSyncPoint)(IAMMediaTypeSample *This, BOOL bIsSyncPoint);HRESULT ( *IsPreroll)(IAMMediaTypeSample *This);HRESULT ( *SetPreroll)(IAMMediaTypeSample *This, BOOL bIsPreroll);int ( *GetActualDataLength)(IAMMediaTypeSample *This);HRESULT ( *SetActualDataLength)(IAMMediaTypeSample *This, int MIDL_0022);HRESULT ( *GetMediaType)(IAMMediaTypeSample *This, AM_MEDIA_TYPE **ppMediaType);HRESULT ( *SetMediaType)(IAMMediaTypeSample *This, AM_MEDIA_TYPE *pMediaType);HRESULT ( *IsDiscontinuity)(IAMMediaTypeSample *This);HRESULT ( *SetDiscontinuity)(IAMMediaTypeSample *This, BOOL bDiscontinuity);HRESULT ( *GetMediaTime)(IAMMediaTypeSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);HRESULT ( *SetMediaTime)(IAMMediaTypeSample *This, LONGLONG *pTimeStart, LONGLONG *pTimeEnd);};
struct IASQLOLEPermissionVtbl {HRESULT ( *QueryInterface)(IASQLOLEPermission *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEPermission *This);ULONG ( *Release)(IASQLOLEPermission *This);HRESULT ( *GetApplication)(IASQLOLEPermission *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEPermission *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEPermission *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEPermission *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEPermission *This, LPVOID lpvNewValue);HRESULT ( *GetPrivilegeTypeName)(IASQLOLEPermission *This, LPBSTRA pRetVal);HRESULT ( *GetPrivilegeType)(IASQLOLEPermission *This, SQLOLE_PRIVILEGE_TYPE *pRetVal);HRESULT ( *GetObjectName)(IASQLOLEPermission *This, LPBSTRA pRetVal);HRESULT ( *GetObjectOwner)(IASQLOLEPermission *This, LPBSTRA pRetVal);HRESULT ( *GetObjectTypeName)(IASQLOLEPermission *This, LPBSTRA pRetVal);HRESULT ( *GetObjectType)(IASQLOLEPermission *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetObjectID)(IASQLOLEPermission *This, LPLONG pRetVal);HRESULT ( *GetGrantee)(IASQLOLEPermission *This, LPBSTRA pRetVal);HRESULT ( *GetGranted)(IASQLOLEPermission *This, LPBOOL pRetVal);HRESULT ( *ListPrivilegeColumns)(IASQLOLEPermission *This, LPASQLOLEOBJECTLIST *ppList);};
struct IDirectInputEffectVtbl {HRESULT ( *QueryInterface)(IDirectInputEffect *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputEffect *This);ULONG ( *Release)(IDirectInputEffect *This);HRESULT ( *Initialize)(IDirectInputEffect *This, HINSTANCE, DWORD,  GUID *);HRESULT ( *GetEffectGuid)(IDirectInputEffect *This, LPGUID);HRESULT ( *GetParameters)(IDirectInputEffect *This, LPDIEFFECT, DWORD);HRESULT ( *SetParameters)(IDirectInputEffect *This, LPCDIEFFECT, DWORD);HRESULT ( *Start)(IDirectInputEffect *This, DWORD, DWORD);HRESULT ( *Stop)(IDirectInputEffect *This);HRESULT ( *GetEffectStatus)(IDirectInputEffect *This, LPDWORD);HRESULT ( *Download)(IDirectInputEffect *This);HRESULT ( *Unload)(IDirectInputEffect *This);HRESULT ( *Escape)(IDirectInputEffect *This, LPDIEFFESCAPE);};
struct IASQLOLEBackupVtbl {HRESULT ( *QueryInterface)(IASQLOLEBackup *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEBackup *This);ULONG ( *Release)(IASQLOLEBackup *This);HRESULT ( *GetApplication)(IASQLOLEBackup *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEBackup *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEBackup *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEBackup *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEBackup *This, LPVOID lpvNewValue);HRESULT ( *GetDumpDevices)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetDumpDevices)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetDiskDevices)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetDiskDevices)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetTapeDevices)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetTapeDevices)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetFloppyDevices)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetFloppyDevices)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetUnloadTapeAfter)(IASQLOLEBackup *This, LPBOOL pRetVal);HRESULT ( *SetUnloadTapeAfter)(IASQLOLEBackup *This, BOOL NewValue);HRESULT ( *GetDumpInitDeviceBefore)(IASQLOLEBackup *This, LPBOOL pRetVal);HRESULT ( *SetDumpInitDeviceBefore)(IASQLOLEBackup *This, BOOL NewValue);HRESULT ( *GetDumpExpirationDate)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetDumpExpirationDate)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetDumpRetainDays)(IASQLOLEBackup *This, LPLONG pRetVal);HRESULT ( *SetDumpRetainDays)(IASQLOLEBackup *This, int NewValue);HRESULT ( *GetSkipTapeHeader)(IASQLOLEBackup *This, LPBOOL pRetVal);HRESULT ( *SetSkipTapeHeader)(IASQLOLEBackup *This, BOOL NewValue);HRESULT ( *GetLoadTableBatchPages)(IASQLOLEBackup *This, LPLONG pRetVal);HRESULT ( *SetLoadTableBatchPages)(IASQLOLEBackup *This, int NewValue);HRESULT ( *GetLoadFileNumber)(IASQLOLEBackup *This, LPLONG pRetVal);HRESULT ( *SetLoadFileNumber)(IASQLOLEBackup *This, int NewValue);HRESULT ( *GetTableName)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetTableName)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetLoadStopDate)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetLoadStopDate)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetPipeDevices)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetPipeDevices)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetLoadFromSourceTableName)(IASQLOLEBackup *This, LPBSTRA pRetVal);HRESULT ( *SetLoadFromSourceTableName)(IASQLOLEBackup *This, LPCSTR NewValue);HRESULT ( *GetLoadAppendToTableData)(IASQLOLEBackup *This, LPBOOL pRetVal);HRESULT ( *SetLoadAppendToTableData)(IASQLOLEBackup *This, BOOL NewValue);HRESULT ( *GetPercentCompleteNotification)(IASQLOLEBackup *This, LPLONG pRetVal);HRESULT ( *SetPercentCompleteNotification)(IASQLOLEBackup *This, int NewValue);HRESULT ( *Abort)(IASQLOLEBackup *This);};
struct IASQLOLECheckVtbl {HRESULT ( *QueryInterface)(IASQLOLECheck *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLECheck *This);ULONG ( *Release)(IASQLOLECheck *This);HRESULT ( *GetApplication)(IASQLOLECheck *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLECheck *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLECheck *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLECheck *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLECheck *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLECheck *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLECheck *This, LPCSTR NewValue);HRESULT ( *GetText)(IASQLOLECheck *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLECheck *This, LPCSTR NewValue);HRESULT ( *GetExcludeReplication)(IASQLOLECheck *This, LPBOOL pRetVal);HRESULT ( *SetExcludeReplication)(IASQLOLECheck *This, BOOL NewValue);HRESULT ( *Remove)(IASQLOLECheck *This);HRESULT ( *Script)(IASQLOLECheck *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);};
struct _PROPSHEETHEADERA {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D __anonymous0;LPCSTR pszCaption;UINT nPages;_PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 __anonymous2;_PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 __anonymous3;PFNPROPSHEETCALLBACK pfnCallback;_PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C __anonymous4;HPALETTE hplWatermark;_PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 __anonymous5;};
struct IDirectSoundVtbl {HRESULT ( *QueryInterface)(IDirectSound *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound *This);ULONG ( *Release)(IDirectSound *This);HRESULT ( *CreateSoundBuffer)(IDirectSound *This, LPCDSBUFFERDESC, LPDIRECTSOUNDBUFFER *, LPUNKNOWN);HRESULT ( *GetCaps)(IDirectSound *This, LPDSCAPS);HRESULT ( *DuplicateSoundBuffer)(IDirectSound *This, LPDIRECTSOUNDBUFFER, LPDIRECTSOUNDBUFFER *);HRESULT ( *SetCooperativeLevel)(IDirectSound *This, HWND, DWORD);HRESULT ( *Compact)(IDirectSound *This);HRESULT ( *GetSpeakerConfig)(IDirectSound *This, LPDWORD);HRESULT ( *SetSpeakerConfig)(IDirectSound *This, DWORD);HRESULT ( *Initialize)(IDirectSound *This, LPGUID);};
struct IShellLinkAVtbl {HRESULT ( *QueryInterface)(IShellLinkA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellLinkA *This);ULONG ( *Release)(IShellLinkA *This);HRESULT ( *GetPath)(IShellLinkA *This, LPSTR pszFile, int cchMaxPath, WIN32_FIND_DATAA *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkA *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkA *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkA *This, LPSTR pszName, int cchMaxName);HRESULT ( *SetDescription)(IShellLinkA *This, LPCSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkA *This, LPSTR pszDir, int cchMaxPath);HRESULT ( *SetWorkingDirectory)(IShellLinkA *This, LPCSTR pszDir);HRESULT ( *GetArguments)(IShellLinkA *This, LPSTR pszArgs, int cchMaxPath);HRESULT ( *SetArguments)(IShellLinkA *This, LPCSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkA *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkA *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkA *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkA *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkA *This, LPSTR pszIconPath, int cchIconPath, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkA *This, LPCSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkA *This, LPCSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkA *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkA *This, LPCSTR pszFile);};
struct tagCHOOSEFONTA {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTA lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCSTR lpTemplateName;HINSTANCE hInstance;LPSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF {LPVOID lpv;LPDTBLLABEL lplabel;LPDTBLEDIT lpedit;LPDTBLLBX lplbx;LPDTBLCOMBOBOX lpcombobox;LPDTBLDDLBX lpddlbx;LPDTBLCHECKBOX lpcheckbox;LPDTBLGROUPBOX lpgroupbox;LPDTBLBUTTON lpbutton;LPDTBLRADIOBUTTON lpradiobutton;LPDTBLMVLISTBOX lpmvlbx;LPDTBLMVDDLBX lpmvddlbx;LPDTBLPAGE lppage;};
struct IDtcLuRecoveryInitiatedByDtcTransWorkVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryInitiatedByDtcTransWork *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryInitiatedByDtcTransWork *This);ULONG ( *Release)(IDtcLuRecoveryInitiatedByDtcTransWork *This);HRESULT ( *GetLogNameSizes)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DWORD *pcbOurLogName, DWORD *pcbRemoteLogName);HRESULT ( *GetOurXln)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUXLN *pXln, unsigned char *pOurLogName, unsigned char *pRemoteLogName, DWORD *pdwProtocol);HRESULT ( *HandleConfirmationFromOurXln)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUXLNCONFIRMATION Confirmation);HRESULT ( *HandleTheirXlnResponse)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUXLN Xln, unsigned char *pRemoteLogName, DWORD cbRemoteLogName, DWORD dwProtocol, DTCLUXLNCONFIRMATION *pConfirmation);HRESULT ( *HandleErrorFromOurXln)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUXLNERROR Error);HRESULT ( *CheckForCompareStates)(IDtcLuRecoveryInitiatedByDtcTransWork *This, BOOL *fCompareStates);HRESULT ( *GetOurTransIdSize)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DWORD *pcbOurTransId);HRESULT ( *GetOurCompareStates)(IDtcLuRecoveryInitiatedByDtcTransWork *This, unsigned char *pOurTransId, DTCLUCOMPARESTATE *pCompareState);HRESULT ( *HandleTheirCompareStatesResponse)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUCOMPARESTATE CompareState, DTCLUCOMPARESTATESCONFIRMATION *pConfirmation);HRESULT ( *HandleErrorFromOurCompareStates)(IDtcLuRecoveryInitiatedByDtcTransWork *This, DTCLUCOMPARESTATESERROR Error);HRESULT ( *ConversationLost)(IDtcLuRecoveryInitiatedByDtcTransWork *This);HRESULT ( *GetRecoverySeqNum)(IDtcLuRecoveryInitiatedByDtcTransWork *This, LONG *plRecoverySeqNum);HRESULT ( *ObsoleteRecoverySeqNum)(IDtcLuRecoveryInitiatedByDtcTransWork *This, LONG lNewRecoverySeqNum);};
struct IDtcLuRecoveryInitiatedByLuWorkVtbl {HRESULT ( *QueryInterface)(IDtcLuRecoveryInitiatedByLuWork *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDtcLuRecoveryInitiatedByLuWork *This);ULONG ( *Release)(IDtcLuRecoveryInitiatedByLuWork *This);HRESULT ( *HandleTheirXln)(IDtcLuRecoveryInitiatedByLuWork *This, LONG lRecoverySeqNum, DTCLUXLN Xln, unsigned char *pRemoteLogName, DWORD cbRemoteLogName, unsigned char *pOurLogName, DWORD cbOurLogName, DWORD dwProtocol, DTCLUXLNRESPONSE *pResponse);HRESULT ( *GetOurLogNameSize)(IDtcLuRecoveryInitiatedByLuWork *This, DWORD *pcbOurLogName);HRESULT ( *GetOurXln)(IDtcLuRecoveryInitiatedByLuWork *This, DTCLUXLN *pXln, unsigned char *pOurLogName, DWORD *pdwProtocol);HRESULT ( *HandleConfirmationOfOurXln)(IDtcLuRecoveryInitiatedByLuWork *This, DTCLUXLNCONFIRMATION Confirmation);HRESULT ( *HandleTheirCompareStates)(IDtcLuRecoveryInitiatedByLuWork *This, unsigned char *pRemoteTransId, DWORD cbRemoteTransId, DTCLUCOMPARESTATE CompareState, DTCLUCOMPARESTATESRESPONSE *pResponse, DTCLUCOMPARESTATE *pCompareState);HRESULT ( *HandleConfirmationOfOurCompareStates)(IDtcLuRecoveryInitiatedByLuWork *This, DTCLUCOMPARESTATESCONFIRMATION Confirmation);HRESULT ( *HandleErrorFromOurCompareStates)(IDtcLuRecoveryInitiatedByLuWork *This, DTCLUCOMPARESTATESERROR Error);HRESULT ( *ConversationLost)(IDtcLuRecoveryInitiatedByLuWork *This);};
struct _MPR40_SERVICE_CHARACTERISTICS {DWORD dwVersion;DWORD dwProtocolId;DWORD fSupportedFunctionality;PIS_SERVICE pfnIsService;PDO_UPDATE_SERVICES pfnUpdateServices;PCREATE_SERVICE_ENUMERATION_HANDLE pfnCreateServiceEnumerationHandle;PENUMERATE_GET_NEXT_SERVICE pfnEnumerateGetNextService;PCLOSE_SERVICE_ENUMERATION_HANDLE pfnCloseServiceEnumerationHandle;PGET_SERVICE_COUNT pfnGetServiceCount;PCREATE_STATIC_SERVICE pfnCreateStaticService;PDELETE_STATIC_SERVICE pfnDeleteStaticService;PBLOCK_CONVERT_SERVICES_TO_STATIC pfnBlockConvertServicesToStatic;PBLOCK_DELETE_STATIC_SERVICES pfnBlockDeleteStaticServices;PGET_FIRST_ORDERED_SERVICE pfnGetFirstOrderedService;PGET_NEXT_ORDERED_SERVICE pfnGetNextOrderedService;};
struct IASQLOLERegisteredServerVtbl {HRESULT ( *QueryInterface)(IASQLOLERegisteredServer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERegisteredServer *This);ULONG ( *Release)(IASQLOLERegisteredServer *This);HRESULT ( *GetApplication)(IASQLOLERegisteredServer *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERegisteredServer *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERegisteredServer *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERegisteredServer *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERegisteredServer *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLERegisteredServer *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLERegisteredServer *This, LPCSTR NewValue);HRESULT ( *GetLogin)(IASQLOLERegisteredServer *This, LPBSTRA pRetVal);HRESULT ( *SetLogin)(IASQLOLERegisteredServer *This, LPCSTR NewValue);HRESULT ( *GetPassword)(IASQLOLERegisteredServer *This, LPBSTRA pRetVal);HRESULT ( *SetPassword)(IASQLOLERegisteredServer *This, LPCSTR NewValue);HRESULT ( *GetUseTrustedConnection)(IASQLOLERegisteredServer *This, LPBOOL pRetVal);HRESULT ( *SetUseTrustedConnection)(IASQLOLERegisteredServer *This, BOOL NewValue);HRESULT ( *GetVersionMajor)(IASQLOLERegisteredServer *This, LPLONG pRetVal);HRESULT ( *GetVersionMinor)(IASQLOLERegisteredServer *This, LPLONG pRetVal);HRESULT ( *GetSaLogin)(IASQLOLERegisteredServer *This, LPBOOL pRetVal);HRESULT ( *GetPersistFlags)(IASQLOLERegisteredServer *This, LPLONG pRetVal);HRESULT ( *SetPersistFlags)(IASQLOLERegisteredServer *This, LONG NewValue);HRESULT ( *Remove)(IASQLOLERegisteredServer *This);};
struct IDirectSound3DBufferVtbl {HRESULT ( *QueryInterface)(IDirectSound3DBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSound3DBuffer *This);ULONG ( *Release)(IDirectSound3DBuffer *This);HRESULT ( *GetAllParameters)(IDirectSound3DBuffer *This, LPDS3DBUFFER);HRESULT ( *GetConeAngles)(IDirectSound3DBuffer *This, LPDWORD, LPDWORD);HRESULT ( *GetConeOrientation)(IDirectSound3DBuffer *This, LPD3DVECTOR);HRESULT ( *GetConeOutsideVolume)(IDirectSound3DBuffer *This, LPLONG);HRESULT ( *GetMaxDistance)(IDirectSound3DBuffer *This, LPD3DVALUE);HRESULT ( *GetMinDistance)(IDirectSound3DBuffer *This, LPD3DVALUE);HRESULT ( *GetMode)(IDirectSound3DBuffer *This, LPDWORD);HRESULT ( *GetPosition)(IDirectSound3DBuffer *This, LPD3DVECTOR);HRESULT ( *GetVelocity)(IDirectSound3DBuffer *This, LPD3DVECTOR);HRESULT ( *SetAllParameters)(IDirectSound3DBuffer *This, LPCDS3DBUFFER, DWORD);HRESULT ( *SetConeAngles)(IDirectSound3DBuffer *This, DWORD, DWORD, DWORD);HRESULT ( *SetConeOrientation)(IDirectSound3DBuffer *This, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);HRESULT ( *SetConeOutsideVolume)(IDirectSound3DBuffer *This, LONG, DWORD);HRESULT ( *SetMaxDistance)(IDirectSound3DBuffer *This, D3DVALUE, DWORD);HRESULT ( *SetMinDistance)(IDirectSound3DBuffer *This, D3DVALUE, DWORD);HRESULT ( *SetMode)(IDirectSound3DBuffer *This, DWORD, DWORD);HRESULT ( *SetPosition)(IDirectSound3DBuffer *This, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);HRESULT ( *SetVelocity)(IDirectSound3DBuffer *This, D3DVALUE, D3DVALUE, D3DVALUE, DWORD);};
struct IASQLOLEAlertSystemVtbl {HRESULT ( *QueryInterface)(IASQLOLEAlertSystem *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEAlertSystem *This);ULONG ( *Release)(IASQLOLEAlertSystem *This);HRESULT ( *GetApplication)(IASQLOLEAlertSystem *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEAlertSystem *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEAlertSystem *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEAlertSystem *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEAlertSystem *This, LPVOID lpvNewValue);HRESULT ( *GetFailSafeOperator)(IASQLOLEAlertSystem *This, LPBSTRA pRetVal);HRESULT ( *SetFailSafeOperator)(IASQLOLEAlertSystem *This, LPCSTR NewValue);HRESULT ( *GetNotificationMethod)(IASQLOLEAlertSystem *This, SQLOLE_NOTIFY_TYPE *pRetVal);HRESULT ( *SetNotificationMethod)(IASQLOLEAlertSystem *This, SQLOLE_NOTIFY_TYPE NewValue);HRESULT ( *GetForwardingServer)(IASQLOLEAlertSystem *This, LPBSTRA pRetVal);HRESULT ( *SetForwardingServer)(IASQLOLEAlertSystem *This, LPCSTR NewValue);HRESULT ( *GetForwardingSeverity)(IASQLOLEAlertSystem *This, LPLONG pRetVal);HRESULT ( *SetForwardingSeverity)(IASQLOLEAlertSystem *This, int NewValue);HRESULT ( *GetPagerToTemplate)(IASQLOLEAlertSystem *This, LPBSTRA pRetVal);HRESULT ( *SetPagerToTemplate)(IASQLOLEAlertSystem *This, LPCSTR NewValue);HRESULT ( *GetPagerCCTemplate)(IASQLOLEAlertSystem *This, LPBSTRA pRetVal);HRESULT ( *SetPagerCCTemplate)(IASQLOLEAlertSystem *This, LPCSTR NewValue);HRESULT ( *GetPagerSubjectTemplate)(IASQLOLEAlertSystem *This, LPBSTRA pRetVal);HRESULT ( *SetPagerSubjectTemplate)(IASQLOLEAlertSystem *This, LPCSTR NewValue);HRESULT ( *GetPagerSendSubjectOnly)(IASQLOLEAlertSystem *This, LPBOOL pRetVal);HRESULT ( *SetPagerSendSubjectOnly)(IASQLOLEAlertSystem *This, BOOL NewValue);HRESULT ( *Refresh)(IASQLOLEAlertSystem *This);HRESULT ( *BeginAlter)(IASQLOLEAlertSystem *This);HRESULT ( *DoAlter)(IASQLOLEAlertSystem *This);HRESULT ( *CancelAlter)(IASQLOLEAlertSystem *This);};
struct IDirectSoundBufferVtbl {HRESULT ( *QueryInterface)(IDirectSoundBuffer *This,  IID *, LPVOID *);ULONG ( *AddRef)(IDirectSoundBuffer *This);ULONG ( *Release)(IDirectSoundBuffer *This);HRESULT ( *GetCaps)(IDirectSoundBuffer *This, LPDSBCAPS);HRESULT ( *GetCurrentPosition)(IDirectSoundBuffer *This, LPDWORD, LPDWORD);HRESULT ( *GetFormat)(IDirectSoundBuffer *This, LPWAVEFORMATEX, DWORD, LPDWORD);HRESULT ( *GetVolume)(IDirectSoundBuffer *This, LPLONG);HRESULT ( *GetPan)(IDirectSoundBuffer *This, LPLONG);HRESULT ( *GetFrequency)(IDirectSoundBuffer *This, LPDWORD);HRESULT ( *GetStatus)(IDirectSoundBuffer *This, LPDWORD);HRESULT ( *Initialize)(IDirectSoundBuffer *This, LPDIRECTSOUND, LPCDSBUFFERDESC);HRESULT ( *Lock)(IDirectSoundBuffer *This, DWORD, DWORD, LPVOID *, LPDWORD, LPVOID *, LPDWORD, DWORD);HRESULT ( *Play)(IDirectSoundBuffer *This, DWORD, DWORD, DWORD);HRESULT ( *SetCurrentPosition)(IDirectSoundBuffer *This, DWORD);HRESULT ( *SetFormat)(IDirectSoundBuffer *This, LPCWAVEFORMATEX);HRESULT ( *SetVolume)(IDirectSoundBuffer *This, LONG);HRESULT ( *SetPan)(IDirectSoundBuffer *This, LONG);HRESULT ( *SetFrequency)(IDirectSoundBuffer *This, DWORD);HRESULT ( *Stop)(IDirectSoundBuffer *This);HRESULT ( *Unlock)(IDirectSoundBuffer *This, LPVOID, DWORD, LPVOID, DWORD);HRESULT ( *Restore)(IDirectSoundBuffer *This);};
struct IDirect3DRMShadowVtbl {HRESULT ( *QueryInterface)(IDirect3DRMShadow *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMShadow *This);ULONG ( *Release)(IDirect3DRMShadow *This);HRESULT ( *Clone)(IDirect3DRMShadow *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMShadow *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMShadow *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMShadow *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMShadow *This);HRESULT ( *SetName)(IDirect3DRMShadow *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMShadow *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMShadow *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMShadow *This, LPDIRECT3DRMVISUAL visual, LPDIRECT3DRMLIGHT light, D3DVALUE px, D3DVALUE py, D3DVALUE pz, D3DVALUE nx, D3DVALUE ny, D3DVALUE nz);};
struct IASQLOLEBulkCopyVtbl {HRESULT ( *QueryInterface)(IASQLOLEBulkCopy *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEBulkCopy *This);ULONG ( *Release)(IASQLOLEBulkCopy *This);HRESULT ( *GetApplication)(IASQLOLEBulkCopy *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEBulkCopy *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEBulkCopy *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEBulkCopy *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEBulkCopy *This, LPVOID lpvNewValue);HRESULT ( *GetDataFilePath)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetDataFilePath)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetFormatFilePath)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetFormatFilePath)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetErrorFilePath)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetErrorFilePath)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetLogFilePath)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetLogFilePath)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetColumnDelimiter)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetColumnDelimiter)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetRowDelimiter)(IASQLOLEBulkCopy *This, LPBSTRA pRetVal);HRESULT ( *SetRowDelimiter)(IASQLOLEBulkCopy *This, LPCSTR NewValue);HRESULT ( *GetDataFileType)(IASQLOLEBulkCopy *This, SQLOLE_DATAFILE_TYPE *pRetVal);HRESULT ( *SetDataFileType)(IASQLOLEBulkCopy *This, SQLOLE_DATAFILE_TYPE NewValue);HRESULT ( *GetFirstRow)(IASQLOLEBulkCopy *This, LPLONG pRetVal);HRESULT ( *SetFirstRow)(IASQLOLEBulkCopy *This, int NewValue);HRESULT ( *GetLastRow)(IASQLOLEBulkCopy *This, LPLONG pRetVal);HRESULT ( *SetLastRow)(IASQLOLEBulkCopy *This, int NewValue);HRESULT ( *GetMaximumErrorsBeforeAbort)(IASQLOLEBulkCopy *This, LPLONG pRetVal);HRESULT ( *SetMaximumErrorsBeforeAbort)(IASQLOLEBulkCopy *This, int NewValue);HRESULT ( *GetIncludeIdentityValues)(IASQLOLEBulkCopy *This, LPBOOL pRetVal);HRESULT ( *SetIncludeIdentityValues)(IASQLOLEBulkCopy *This, BOOL NewValue);HRESULT ( *GetImportRowsPerBatch)(IASQLOLEBulkCopy *This, LPLONG pRetVal);HRESULT ( *SetImportRowsPerBatch)(IASQLOLEBulkCopy *This, int NewValue);HRESULT ( *GetUseBulkCopyOption)(IASQLOLEBulkCopy *This, LPBOOL pRetVal);HRESULT ( *SetUseBulkCopyOption)(IASQLOLEBulkCopy *This, BOOL NewValue);HRESULT ( *GetSuspendIndexing)(IASQLOLEBulkCopy *This, LPBOOL pRetVal);HRESULT ( *SetSuspendIndexing)(IASQLOLEBulkCopy *This, BOOL NewValue);HRESULT ( *GetTruncateLog)(IASQLOLEBulkCopy *This, LPBOOL pRetVal);HRESULT ( *SetTruncateLog)(IASQLOLEBulkCopy *This, BOOL NewValue);HRESULT ( *Abort)(IASQLOLEBulkCopy *This);};
struct IASQLOLERegistryVtbl {HRESULT ( *QueryInterface)(IASQLOLERegistry *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERegistry *This);ULONG ( *Release)(IASQLOLERegistry *This);HRESULT ( *GetApplication)(IASQLOLERegistry *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERegistry *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERegistry *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERegistry *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERegistry *This, LPVOID lpvNewValue);HRESULT ( *GetAutostartMail)(IASQLOLERegistry *This, LPBOOL pRetVal);HRESULT ( *SetAutostartMail)(IASQLOLERegistry *This, BOOL NewValue);HRESULT ( *GetAutostartServer)(IASQLOLERegistry *This, LPBOOL pRetVal);HRESULT ( *SetAutostartServer)(IASQLOLERegistry *This, BOOL NewValue);HRESULT ( *GetCaseSensitive)(IASQLOLERegistry *This, LPBOOL pRetVal);HRESULT ( *GetCharacterSet)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *GetErrorLogPath)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *SetErrorLogPath)(IASQLOLERegistry *This, LPCSTR NewValue);HRESULT ( *GetMailAccountName)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *SetMailAccountName)(IASQLOLERegistry *This, LPCSTR NewValue);HRESULT ( *GetMailPassword)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *SetMailPassword)(IASQLOLERegistry *This, LPCSTR NewValue);HRESULT ( *GetMasterDBPath)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *SetMasterDBPath)(IASQLOLERegistry *This, LPCSTR NewValue);HRESULT ( *GetNTEventLogging)(IASQLOLERegistry *This, LPBOOL pRetVal);HRESULT ( *GetNumberOfProcessors)(IASQLOLERegistry *This, LPLONG pRetVal);HRESULT ( *GetPerfMonMode)(IASQLOLERegistry *This, SQLOLE_PERFMON_TYPE *pRetVal);HRESULT ( *SetPerfMonMode)(IASQLOLERegistry *This, SQLOLE_PERFMON_TYPE NewValue);HRESULT ( *GetPhysicalMemory)(IASQLOLERegistry *This, LPLONG pRetVal);HRESULT ( *GetAutostartLicensing)(IASQLOLERegistry *This, LPBOOL pRetVal);HRESULT ( *SetAutostartLicensing)(IASQLOLERegistry *This, BOOL NewValue);HRESULT ( *GetRegisteredOrganization)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *GetRegisteredOwner)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *GetSortOrder)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *GetSQLRootPath)(IASQLOLERegistry *This, LPBSTRA pRetVal);HRESULT ( *SetSQLRootPath)(IASQLOLERegistry *This, LPCSTR NewValue);HRESULT ( *GetTapeLoadWaitTime)(IASQLOLERegistry *This, LPLONG pRetVal);HRESULT ( *SetTapeLoadWaitTime)(IASQLOLERegistry *This, int NewValue);};
struct IASQLOLEDefaultVtbl {HRESULT ( *QueryInterface)(IASQLOLEDefault *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDefault *This);ULONG ( *Release)(IASQLOLEDefault *This);HRESULT ( *GetApplication)(IASQLOLEDefault *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDefault *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDefault *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDefault *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDefault *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEDefault *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEDefault *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLEDefault *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLEDefault *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLEDefault *This, LPLONG pRetVal);HRESULT ( *GetText)(IASQLOLEDefault *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLEDefault *This, LPCSTR NewValue);HRESULT ( *BindToColumn)(IASQLOLEDefault *This, LPCSTR TableName, LPCSTR ColumnName);HRESULT ( *BindToDatatype)(IASQLOLEDefault *This, LPCSTR DatatypeName, BOOL bFutureOnly);HRESULT ( *UnbindFromColumn)(IASQLOLEDefault *This, LPCSTR TableName, LPCSTR ColumnName);HRESULT ( *UnbindFromDatatype)(IASQLOLEDefault *This, LPCSTR DatatypeName, BOOL bFutureOnly);HRESULT ( *Remove)(IASQLOLEDefault *This);HRESULT ( *Script)(IASQLOLEDefault *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *ListBoundColumns)(IASQLOLEDefault *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListBoundDatatypes)(IASQLOLEDefault *This, LPASQLOLEOBJECTLIST *ppList);};
struct IDirectInput2AVtbl {HRESULT ( *QueryInterface)(IDirectInput2A *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInput2A *This);ULONG ( *Release)(IDirectInput2A *This);HRESULT ( *CreateDevice)(IDirectInput2A *This,  GUID *, LPDIRECTINPUTDEVICEA *, LPUNKNOWN);HRESULT ( *EnumDevices)(IDirectInput2A *This, DWORD, LPDIENUMDEVICESCALLBACKA, LPVOID, DWORD);HRESULT ( *GetDeviceStatus)(IDirectInput2A *This,  GUID *);HRESULT ( *RunControlPanel)(IDirectInput2A *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInput2A *This, HINSTANCE, DWORD);HRESULT ( *FindDevice)(IDirectInput2A *This,  GUID *, LPCSTR, LPGUID);};
struct IRowsetLocateVtbl {HRESULT ( *QueryInterface)(IRowsetLocate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetLocate *This);ULONG ( *Release)(IRowsetLocate *This);HRESULT ( *AddRefRows)(IRowsetLocate *This, ULONG cRows,  HROW  *    rghRows, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowsetLocate *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowsetLocate *This, HCHAPTER hReserved, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowsetLocate *This, ULONG cRows,  HROW  *    rghRows, DBROWOPTIONS  *    rgRowOptions, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *RestartPosition)(IRowsetLocate *This, HCHAPTER hReserved);HRESULT ( *Compare)(IRowsetLocate *This, HCHAPTER hReserved, ULONG cbBookmark1,  BYTE *pBookmark1, ULONG cbBookmark2,  BYTE *pBookmark2, DBCOMPARE *pComparison);HRESULT ( *GetRowsAt)(IRowsetLocate *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, ULONG cbBookmark,  BYTE *pBookmark, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);HRESULT ( *GetRowsByBookmark)(IRowsetLocate *This, HCHAPTER hReserved, ULONG cRows,  ULONG  *    rgcbBookmarks,  BYTE * *    rgpBookmarks, HROW  *    rghRows, DBROWSTATUS  *    rgRowStatus);HRESULT ( *Hash)(IRowsetLocate *This, HCHAPTER hReserved, ULONG cBookmarks,  ULONG  *    rgcbBookmarks,  BYTE * *    rgpBookmarks, DWORD  *    rgHashedValues, DBROWSTATUS  *    rgBookmarkStatus);};
struct IRowsetScrollVtbl {HRESULT ( *QueryInterface)(IRowsetScroll *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetScroll *This);ULONG ( *Release)(IRowsetScroll *This);HRESULT ( *AddRefRows)(IRowsetScroll *This, ULONG cRows,  HROW  *    rghRows, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *GetData)(IRowsetScroll *This, HROW hRow, HACCESSOR hAccessor, void *pData);HRESULT ( *GetNextRows)(IRowsetScroll *This, HCHAPTER hReserved, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);HRESULT ( *ReleaseRows)(IRowsetScroll *This, ULONG cRows,  HROW  *    rghRows, DBROWOPTIONS  *    rgRowOptions, ULONG  *    rgRefCounts, DBROWSTATUS  *    rgRowStatus);HRESULT ( *RestartPosition)(IRowsetScroll *This, HCHAPTER hReserved);HRESULT ( *Compare)(IRowsetScroll *This, HCHAPTER hReserved, ULONG cbBookmark1,  BYTE *pBookmark1, ULONG cbBookmark2,  BYTE *pBookmark2, DBCOMPARE *pComparison);HRESULT ( *GetRowsAt)(IRowsetScroll *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, ULONG cbBookmark,  BYTE *pBookmark, LONG lRowsOffset, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);HRESULT ( *GetRowsByBookmark)(IRowsetScroll *This, HCHAPTER hReserved, ULONG cRows,  ULONG  *    rgcbBookmarks,  BYTE * *    rgpBookmarks, HROW  *    rghRows, DBROWSTATUS  *    rgRowStatus);HRESULT ( *Hash)(IRowsetScroll *This, HCHAPTER hReserved, ULONG cBookmarks,  ULONG  *    rgcbBookmarks,  BYTE * *    rgpBookmarks, DWORD  *    rgHashedValues, DBROWSTATUS  *    rgBookmarkStatus);HRESULT ( *GetApproximatePosition)(IRowsetScroll *This, HCHAPTER hReserved, ULONG cbBookmark,  BYTE *pBookmark, ULONG *pulPosition, ULONG *pcRows);HRESULT ( *GetRowsAtRatio)(IRowsetScroll *This, HWATCHREGION hReserved1, HCHAPTER hReserved2, ULONG ulNumerator, ULONG ulDenominator, LONG cRows, ULONG *pcRowsObtained, HROW **prghRows);};
struct IASQLOLERuleVtbl {HRESULT ( *QueryInterface)(IASQLOLERule *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERule *This);ULONG ( *Release)(IASQLOLERule *This);HRESULT ( *GetApplication)(IASQLOLERule *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERule *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERule *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERule *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERule *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLERule *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLERule *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLERule *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLERule *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLERule *This, LPLONG pRetVal);HRESULT ( *GetText)(IASQLOLERule *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLERule *This, LPCSTR NewValue);HRESULT ( *BindToColumn)(IASQLOLERule *This, LPCSTR TableName, LPCSTR ColumnName);HRESULT ( *BindToDatatype)(IASQLOLERule *This, LPCSTR DatatypeName, BOOL bFutureOnly);HRESULT ( *UnbindFromColumn)(IASQLOLERule *This, LPCSTR TableName, LPCSTR ColumnName);HRESULT ( *UnbindFromDatatype)(IASQLOLERule *This, LPCSTR DatatypeName, BOOL bFutureOnly);HRESULT ( *Remove)(IASQLOLERule *This);HRESULT ( *Script)(IASQLOLERule *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *ListBoundColumns)(IASQLOLERule *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListBoundDatatypes)(IASQLOLERule *This, LPASQLOLEOBJECTLIST *ppList);};
struct IDirect3D2Vtbl {HRESULT ( *QueryInterface)(IDirect3D2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3D2 *This);ULONG ( *Release)(IDirect3D2 *This);HRESULT ( *EnumDevices)(IDirect3D2 *This, LPD3DENUMDEVICESCALLBACK, LPVOID);HRESULT ( *CreateLight)(IDirect3D2 *This, LPDIRECT3DLIGHT *, IUnknown *);HRESULT ( *CreateMaterial)(IDirect3D2 *This, LPDIRECT3DMATERIAL2 *, IUnknown *);HRESULT ( *CreateViewport)(IDirect3D2 *This, LPDIRECT3DVIEWPORT2 *, IUnknown *);HRESULT ( *FindDevice)(IDirect3D2 *This, LPD3DFINDDEVICESEARCH, LPD3DFINDDEVICERESULT);HRESULT ( *CreateDevice)(IDirect3D2 *This,  CLSID *, LPDIRECTDRAWSURFACE, LPDIRECT3DDEVICE2 *);};
struct IMAPITableVtbl {HRESULT ( *QueryInterface)(IMAPITable *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPITable *This);ULONG ( *Release)(IMAPITable *This);HRESULT ( *GetLastError)(IMAPITable *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Advise)(IMAPITable *This, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMAPITable *This, ULONG ulConnection);HRESULT ( *GetStatus)(IMAPITable *This, ULONG *lpulTableStatus, ULONG *lpulTableType);HRESULT ( *SetColumns)(IMAPITable *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags);HRESULT ( *QueryColumns)(IMAPITable *This, ULONG ulFlags, LPSPropTagArray *lpPropTagArray);HRESULT ( *GetRowCount)(IMAPITable *This, ULONG ulFlags, ULONG *lpulCount);HRESULT ( *SeekRow)(IMAPITable *This, BOOKMARK bkOrigin, LONG lRowCount, LONG *lplRowsSought);HRESULT ( *SeekRowApprox)(IMAPITable *This, ULONG ulNumerator, ULONG ulDenominator);HRESULT ( *QueryPosition)(IMAPITable *This, ULONG *lpulRow, ULONG *lpulNumerator, ULONG *lpulDenominator);HRESULT ( *FindRow)(IMAPITable *This, LPSRestriction lpRestriction, BOOKMARK bkOrigin, ULONG ulFlags);HRESULT ( *Restrict)(IMAPITable *This, LPSRestriction lpRestriction, ULONG ulFlags);HRESULT ( *CreateBookmark)(IMAPITable *This, BOOKMARK *lpbkPosition);HRESULT ( *FreeBookmark)(IMAPITable *This, BOOKMARK bkPosition);HRESULT ( *SortTable)(IMAPITable *This, LPSSortOrderSet lpSortCriteria, ULONG ulFlags);HRESULT ( *QuerySortOrder)(IMAPITable *This, LPSSortOrderSet *lppSortCriteria);HRESULT ( *QueryRows)(IMAPITable *This, LONG lRowCount, ULONG ulFlags, LPSRowSet *lppRows);HRESULT ( *Abort)(IMAPITable *This);HRESULT ( *ExpandRow)(IMAPITable *This, ULONG cbInstanceKey, LPBYTE pbInstanceKey, ULONG ulRowCount, ULONG ulFlags, LPSRowSet *lppRows, ULONG *lpulMoreRows);HRESULT ( *CollapseRow)(IMAPITable *This, ULONG cbInstanceKey, LPBYTE pbInstanceKey, ULONG ulFlags, ULONG *lpulRowCount);HRESULT ( *WaitForCompletion)(IMAPITable *This, ULONG ulFlags, ULONG ulTimeout, ULONG *lpulTableStatus);HRESULT ( *GetCollapseState)(IMAPITable *This, ULONG ulFlags, ULONG cbInstanceKey, LPBYTE lpbInstanceKey, ULONG *lpcbCollapseState, LPBYTE *lppbCollapseState);HRESULT ( *SetCollapseState)(IMAPITable *This, ULONG ulFlags, ULONG cbCollapseState, LPBYTE pbCollapseState, BOOKMARK *lpbkLocation);};
struct IASQLOLEUserDefinedDatatypeVtbl {HRESULT ( *QueryInterface)(IASQLOLEUserDefinedDatatype *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEUserDefinedDatatype *This);ULONG ( *Release)(IASQLOLEUserDefinedDatatype *This);HRESULT ( *GetApplication)(IASQLOLEUserDefinedDatatype *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEUserDefinedDatatype *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEUserDefinedDatatype *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEUserDefinedDatatype *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEUserDefinedDatatype *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEUserDefinedDatatype *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEUserDefinedDatatype *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLEUserDefinedDatatype *This, LPBSTRA pRetVal);HRESULT ( *GetAllowNulls)(IASQLOLEUserDefinedDatatype *This, LPBOOL pRetVal);HRESULT ( *SetAllowNulls)(IASQLOLEUserDefinedDatatype *This, BOOL NewValue);HRESULT ( *GetBaseType)(IASQLOLEUserDefinedDatatype *This, LPBSTRA pRetVal);HRESULT ( *SetBaseType)(IASQLOLEUserDefinedDatatype *This, LPCSTR NewValue);HRESULT ( *GetLength)(IASQLOLEUserDefinedDatatype *This, LPLONG pRetVal);HRESULT ( *SetLength)(IASQLOLEUserDefinedDatatype *This, int NewValue);HRESULT ( *GetDefault)(IASQLOLEUserDefinedDatatype *This, LPBSTRA pRetVal);HRESULT ( *SetDefault)(IASQLOLEUserDefinedDatatype *This, LPCSTR NewValue, BOOL bFutureOnly);HRESULT ( *GetRule)(IASQLOLEUserDefinedDatatype *This, LPBSTRA pRetVal);HRESULT ( *SetRule)(IASQLOLEUserDefinedDatatype *This, LPCSTR NewValue, BOOL bFutureOnly);HRESULT ( *GetID)(IASQLOLEUserDefinedDatatype *This, LPLONG pRetVal);HRESULT ( *GetNumericPrecision)(IASQLOLEUserDefinedDatatype *This, LPLONG pRetVal);HRESULT ( *SetNumericPrecision)(IASQLOLEUserDefinedDatatype *This, int NewValue);HRESULT ( *GetNumericScale)(IASQLOLEUserDefinedDatatype *This, LPLONG pRetVal);HRESULT ( *SetNumericScale)(IASQLOLEUserDefinedDatatype *This, int NewValue);HRESULT ( *GetAllowIdentity)(IASQLOLEUserDefinedDatatype *This, LPBOOL pRetVal);HRESULT ( *Remove)(IASQLOLEUserDefinedDatatype *This);HRESULT ( *Script)(IASQLOLEUserDefinedDatatype *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *ListBoundColumns)(IASQLOLEUserDefinedDatatype *This, LPASQLOLEOBJECTLIST *ppList);};
struct IDirect3DRMInterpolatorVtbl {HRESULT ( *QueryInterface)(IDirect3DRMInterpolator *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMInterpolator *This);ULONG ( *Release)(IDirect3DRMInterpolator *This);HRESULT ( *Clone)(IDirect3DRMInterpolator *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMInterpolator *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMInterpolator *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMInterpolator *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMInterpolator *This);HRESULT ( *SetName)(IDirect3DRMInterpolator *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMInterpolator *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMInterpolator *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *AttachObject)(IDirect3DRMInterpolator *This, LPDIRECT3DRMOBJECT);HRESULT ( *GetAttachedObjects)(IDirect3DRMInterpolator *This, LPDIRECT3DRMOBJECTARRAY *);HRESULT ( *DetachObject)(IDirect3DRMInterpolator *This, LPDIRECT3DRMOBJECT);HRESULT ( *SetIndex)(IDirect3DRMInterpolator *This, D3DVALUE);D3DVALUE ( *GetIndex)(IDirect3DRMInterpolator *This);HRESULT ( *Interpolate)(IDirect3DRMInterpolator *This, D3DVALUE, LPDIRECT3DRMOBJECT, D3DRMINTERPOLATIONOPTIONS);};
struct IASQLOLESubscriberInfoVtbl {HRESULT ( *QueryInterface)(IASQLOLESubscriberInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLESubscriberInfo *This);ULONG ( *Release)(IASQLOLESubscriberInfo *This);HRESULT ( *GetApplication)(IASQLOLESubscriberInfo *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLESubscriberInfo *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLESubscriberInfo *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLESubscriberInfo *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLESubscriberInfo *This, LPVOID lpvNewValue);HRESULT ( *GetFrequencyType)(IASQLOLESubscriberInfo *This, SQLOLE_FREQUENCY_TYPE *pRetVal);HRESULT ( *SetFrequencyType)(IASQLOLESubscriberInfo *This, SQLOLE_FREQUENCY_TYPE NewValue);HRESULT ( *GetFrequencyInterval)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetFrequencyInterval)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetFrequencyRelativeInterval)(IASQLOLESubscriberInfo *This, SQLOLE_FREQRELATIVE_TYPE *pRetVal);HRESULT ( *SetFrequencyRelativeInterval)(IASQLOLESubscriberInfo *This, SQLOLE_FREQRELATIVE_TYPE NewValue);HRESULT ( *GetFrequencyRecurrenceFactor)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetFrequencyRecurrenceFactor)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetFrequencySubDay)(IASQLOLESubscriberInfo *This, SQLOLE_FREQSUB_TYPE *pRetVal);HRESULT ( *SetFrequencySubDay)(IASQLOLESubscriberInfo *This, SQLOLE_FREQSUB_TYPE NewValue);HRESULT ( *GetFrequencySubDayInterval)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetFrequencySubDayInterval)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetFlushFrequency)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetFlushFrequency)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetActiveStartDate)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetActiveStartDate)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetActiveEndDate)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetActiveEndDate)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetActiveStartTimeOfDay)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetActiveStartTimeOfDay)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetActiveEndTimeOfDay)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetActiveEndTimeOfDay)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetLogBatchSize)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetLogBatchSize)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetCommitTransactionCount)(IASQLOLESubscriberInfo *This, LPLONG pRetVal);HRESULT ( *SetCommitTransactionCount)(IASQLOLESubscriberInfo *This, int NewValue);HRESULT ( *GetLogin)(IASQLOLESubscriberInfo *This, LPBSTRA pRetVal);HRESULT ( *SetLogin)(IASQLOLESubscriberInfo *This, LPCSTR NewValue);HRESULT ( *GetPassword)(IASQLOLESubscriberInfo *This, LPBSTRA pRetVal);HRESULT ( *SetPassword)(IASQLOLESubscriberInfo *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLESubscriberInfo *This, SQLOLE_SUBSCRIBERINFO_TYPE *pRetVal);HRESULT ( *SetType)(IASQLOLESubscriberInfo *This, SQLOLE_SUBSCRIBERINFO_TYPE NewValue);HRESULT ( *Refresh)(IASQLOLESubscriberInfo *This);HRESULT ( *BeginAlter)(IASQLOLESubscriberInfo *This);HRESULT ( *DoAlter)(IASQLOLESubscriberInfo *This);HRESULT ( *CancelAlter)(IASQLOLESubscriberInfo *This);HRESULT ( *GetDescription)(IASQLOLESubscriberInfo *This, LPBSTRA pRetVal);HRESULT ( *SetDescription)(IASQLOLESubscriberInfo *This, LPCSTR NewValue);};
struct IASQLOLETransactionLogVtbl {HRESULT ( *QueryInterface)(IASQLOLETransactionLog *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETransactionLog *This);ULONG ( *Release)(IASQLOLETransactionLog *This);HRESULT ( *GetApplication)(IASQLOLETransactionLog *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETransactionLog *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETransactionLog *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETransactionLog *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETransactionLog *This, LPVOID lpvNewValue);HRESULT ( *GetCreateDate)(IASQLOLETransactionLog *This, LPBSTRA pRetVal);HRESULT ( *GetLastDump)(IASQLOLETransactionLog *This, LPBSTRA pRetVal);HRESULT ( *GetSize)(IASQLOLETransactionLog *This, LPLONG pRetVal);HRESULT ( *GetSpaceAvailable)(IASQLOLETransactionLog *This, LPLONG pRetVal);HRESULT ( *GetSpaceAvailableInMB)(IASQLOLETransactionLog *This, LPFLOAT pRetVal);HRESULT ( *GetSpaceAllocatedOnDevice)(IASQLOLETransactionLog *This, LPCSTR DeviceName, LPLONG pRetVal);HRESULT ( *IsLogOnSeparateDevice)(IASQLOLETransactionLog *This, LPBOOL pRetVal);HRESULT ( *DedicateLogDevices)(IASQLOLETransactionLog *This, LPCSTR DeviceNames);HRESULT ( *UndedicateLogDevices)(IASQLOLETransactionLog *This, LPCSTR DeviceNames);HRESULT ( *Dump)(IASQLOLETransactionLog *This, LPASQLOLEBACKUP DumpSpec);HRESULT ( *Load)(IASQLOLETransactionLog *This, LPASQLOLEBACKUP LoadSpec);HRESULT ( *GenerateBackupSQL)(IASQLOLETransactionLog *This, LPASQLOLEBACKUP DumpSpec, LPBSTRA pSQLStatement);HRESULT ( *Truncate)(IASQLOLETransactionLog *This);HRESULT ( *ListDevices)(IASQLOLETransactionLog *This, LPASQLOLEOBJECTLIST *ppList);};
struct IASQLOLEConfigurationVtbl {HRESULT ( *QueryInterface)(IASQLOLEConfiguration *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEConfiguration *This);ULONG ( *Release)(IASQLOLEConfiguration *This);HRESULT ( *GetApplication)(IASQLOLEConfiguration *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEConfiguration *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEConfiguration *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEConfiguration *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEConfiguration *This, LPVOID lpvNewValue);HRESULT ( *GetShowAdvancedOptions)(IASQLOLEConfiguration *This, LPBOOL pRetVal);HRESULT ( *SetShowAdvancedOptions)(IASQLOLEConfiguration *This, BOOL NewValue);HRESULT ( *GetConfigValues)(IASQLOLEConfiguration *This, LPASQLOLECONFIGVALUES *ppRemoteLogins);HRESULT ( *GetConfigValueByName)(IASQLOLEConfiguration *This, LPCSTR szName, LPASQLOLECONFIGVALUE *ppRemoteLogin);HRESULT ( *GetConfigValueByOrd)(IASQLOLEConfiguration *This, int lOrdinal, LPASQLOLECONFIGVALUE *ppRemoteLogin);HRESULT ( *GetConfigValueCount)(IASQLOLEConfiguration *This, LPLONG plCount);HRESULT ( *GetParameters)(IASQLOLEConfiguration *This, LPASQLOLENAMES *ppParameters);HRESULT ( *ReconfigureCurrentValues)(IASQLOLEConfiguration *This);HRESULT ( *ReconfigureWithOverride)(IASQLOLEConfiguration *This);};
struct IDirect3DRMAnimationVtbl {HRESULT ( *QueryInterface)(IDirect3DRMAnimation *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMAnimation *This);ULONG ( *Release)(IDirect3DRMAnimation *This);HRESULT ( *Clone)(IDirect3DRMAnimation *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMAnimation *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMAnimation *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMAnimation *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMAnimation *This);HRESULT ( *SetName)(IDirect3DRMAnimation *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMAnimation *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMAnimation *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *SetOptions)(IDirect3DRMAnimation *This, D3DRMANIMATIONOPTIONS flags);HRESULT ( *AddRotateKey)(IDirect3DRMAnimation *This, D3DVALUE time, D3DRMQUATERNION *q);HRESULT ( *AddPositionKey)(IDirect3DRMAnimation *This, D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *AddScaleKey)(IDirect3DRMAnimation *This, D3DVALUE time, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *DeleteKey)(IDirect3DRMAnimation *This, D3DVALUE time);HRESULT ( *SetFrame)(IDirect3DRMAnimation *This, LPDIRECT3DRMFRAME frame);HRESULT ( *SetTime)(IDirect3DRMAnimation *This, D3DVALUE time);D3DRMANIMATIONOPTIONS ( *GetOptions)(IDirect3DRMAnimation *This);};
struct IDirect3DRMLightVtbl {HRESULT ( *QueryInterface)(IDirect3DRMLight *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMLight *This);ULONG ( *Release)(IDirect3DRMLight *This);HRESULT ( *Clone)(IDirect3DRMLight *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMLight *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMLight *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMLight *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMLight *This);HRESULT ( *SetName)(IDirect3DRMLight *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMLight *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMLight *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *SetType)(IDirect3DRMLight *This, D3DRMLIGHTTYPE);HRESULT ( *SetColor)(IDirect3DRMLight *This, D3DCOLOR);HRESULT ( *SetColorRGB)(IDirect3DRMLight *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetRange)(IDirect3DRMLight *This, D3DVALUE);HRESULT ( *SetUmbra)(IDirect3DRMLight *This, D3DVALUE);HRESULT ( *SetPenumbra)(IDirect3DRMLight *This, D3DVALUE);HRESULT ( *SetConstantAttenuation)(IDirect3DRMLight *This, D3DVALUE);HRESULT ( *SetLinearAttenuation)(IDirect3DRMLight *This, D3DVALUE);HRESULT ( *SetQuadraticAttenuation)(IDirect3DRMLight *This, D3DVALUE);D3DVALUE ( *GetRange)(IDirect3DRMLight *This);D3DVALUE ( *GetUmbra)(IDirect3DRMLight *This);D3DVALUE ( *GetPenumbra)(IDirect3DRMLight *This);D3DVALUE ( *GetConstantAttenuation)(IDirect3DRMLight *This);D3DVALUE ( *GetLinearAttenuation)(IDirect3DRMLight *This);D3DVALUE ( *GetQuadraticAttenuation)(IDirect3DRMLight *This);D3DCOLOR ( *GetColor)(IDirect3DRMLight *This);D3DRMLIGHTTYPE ( *GetType)(IDirect3DRMLight *This);HRESULT ( *SetEnableFrame)(IDirect3DRMLight *This, LPDIRECT3DRMFRAME);HRESULT ( *GetEnableFrame)(IDirect3DRMLight *This, LPDIRECT3DRMFRAME *);};
struct IDirectPlayLobbyVtbl {HRESULT ( *QueryInterface)(IDirectPlayLobby *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectPlayLobby *This);ULONG ( *Release)(IDirectPlayLobby *This);HRESULT ( *Connect)(IDirectPlayLobby *This, DWORD, LPDIRECTPLAY2 *, IUnknown *);HRESULT ( *CreateAddress)(IDirectPlayLobby *This,  GUID *,  GUID *, LPCVOID, DWORD, LPVOID, LPDWORD);HRESULT ( *EnumAddress)(IDirectPlayLobby *This, LPDPENUMADDRESSCALLBACK, LPCVOID, DWORD, LPVOID);HRESULT ( *EnumAddressTypes)(IDirectPlayLobby *This, LPDPLENUMADDRESSTYPESCALLBACK,  GUID *, LPVOID, DWORD);HRESULT ( *EnumLocalApplications)(IDirectPlayLobby *This, LPDPLENUMLOCALAPPLICATIONSCALLBACK, LPVOID, DWORD);HRESULT ( *GetConnectionSettings)(IDirectPlayLobby *This, DWORD, LPVOID, LPDWORD);HRESULT ( *ReceiveLobbyMessage)(IDirectPlayLobby *This, DWORD, DWORD, LPDWORD, LPVOID, LPDWORD);HRESULT ( *RunApplication)(IDirectPlayLobby *This, DWORD, LPDWORD, LPDPLCONNECTION, HANDLE);HRESULT ( *SendLobbyMessage)(IDirectPlayLobby *This, DWORD, DWORD, LPVOID, DWORD);HRESULT ( *SetConnectionSettings)(IDirectPlayLobby *This, DWORD, DWORD, LPDPLCONNECTION);HRESULT ( *SetLobbyMessageEvent)(IDirectPlayLobby *This, DWORD, DWORD, HANDLE);};
struct IDirect3DRMWrapVtbl {HRESULT ( *QueryInterface)(IDirect3DRMWrap *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMWrap *This);ULONG ( *Release)(IDirect3DRMWrap *This);HRESULT ( *Clone)(IDirect3DRMWrap *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMWrap *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMWrap *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMWrap *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMWrap *This);HRESULT ( *SetName)(IDirect3DRMWrap *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMWrap *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMWrap *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMWrap *This, D3DRMWRAPTYPE, LPDIRECT3DRMFRAME ref, D3DVALUE ox, D3DVALUE oy, D3DVALUE oz, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz, D3DVALUE ou, D3DVALUE ov, D3DVALUE su, D3DVALUE sv);HRESULT ( *Apply)(IDirect3DRMWrap *This, LPDIRECT3DRMOBJECT);HRESULT ( *ApplyRelative)(IDirect3DRMWrap *This, LPDIRECT3DRMFRAME frame, LPDIRECT3DRMOBJECT);};
struct IASQLOLEColumnVtbl {HRESULT ( *QueryInterface)(IASQLOLEColumn *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEColumn *This);ULONG ( *Release)(IASQLOLEColumn *This);HRESULT ( *GetApplication)(IASQLOLEColumn *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEColumn *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEColumn *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEColumn *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEColumn *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEColumn *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEColumn *This, LPCSTR NewValue);HRESULT ( *GetDatatype)(IASQLOLEColumn *This, LPBSTRA pRetVal);HRESULT ( *SetDatatype)(IASQLOLEColumn *This, LPCSTR NewValue);HRESULT ( *GetPhysicalDatatype)(IASQLOLEColumn *This, LPBSTRA pRetVal);HRESULT ( *GetLength)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *SetLength)(IASQLOLEColumn *This, int NewValue);HRESULT ( *GetDefault)(IASQLOLEColumn *This, LPBSTRA pRetVal);HRESULT ( *SetDefault)(IASQLOLEColumn *This, LPCSTR NewValue);HRESULT ( *GetRule)(IASQLOLEColumn *This, LPBSTRA pRetVal);HRESULT ( *SetRule)(IASQLOLEColumn *This, LPCSTR NewValue);HRESULT ( *GetAllowNulls)(IASQLOLEColumn *This, LPBOOL pRetVal);HRESULT ( *SetAllowNulls)(IASQLOLEColumn *This, BOOL NewValue);HRESULT ( *GetID)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *GetIdentity)(IASQLOLEColumn *This, LPBOOL pRetVal);HRESULT ( *SetIdentity)(IASQLOLEColumn *This, BOOL NewValue);HRESULT ( *GetNumericPrecision)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *SetNumericPrecision)(IASQLOLEColumn *This, int NewValue);HRESULT ( *GetNumericScale)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *SetNumericScale)(IASQLOLEColumn *This, int NewValue);HRESULT ( *GetIdentitySeed)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *SetIdentitySeed)(IASQLOLEColumn *This, int NewValue);HRESULT ( *GetIdentityIncrement)(IASQLOLEColumn *This, LPLONG pRetVal);HRESULT ( *SetIdentityIncrement)(IASQLOLEColumn *This, int NewValue);HRESULT ( *GetDRIDefault)(IASQLOLEColumn *This, LPASQLOLEDRIDEFAULT *ppDRIDefault);HRESULT ( *GetInPrimaryKey)(IASQLOLEColumn *This, LPBOOL pRetVal);HRESULT ( *Remove)(IASQLOLEColumn *This);HRESULT ( *ListKeys)(IASQLOLEColumn *This, LPASQLOLEOBJECTLIST *ppList);};
struct IASQLOLEGroupVtbl {HRESULT ( *QueryInterface)(IASQLOLEGroup *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEGroup *This);ULONG ( *Release)(IASQLOLEGroup *This);HRESULT ( *GetApplication)(IASQLOLEGroup *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEGroup *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEGroup *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEGroup *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEGroup *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEGroup *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEGroup *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEGroup *This, LPLONG pRetVal);HRESULT ( *GetSystemObject)(IASQLOLEGroup *This, LPBOOL pRetVal);HRESULT ( *Remove)(IASQLOLEGroup *This);HRESULT ( *ListUsers)(IASQLOLEGroup *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListDatabasePermissions)(IASQLOLEGroup *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListObjectPermissions)(IASQLOLEGroup *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *Script)(IASQLOLEGroup *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);};
struct IASQLOLELoginVtbl {HRESULT ( *QueryInterface)(IASQLOLELogin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLELogin *This);ULONG ( *Release)(IASQLOLELogin *This);HRESULT ( *GetApplication)(IASQLOLELogin *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLELogin *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLELogin *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLELogin *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLELogin *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLELogin *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLELogin *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLELogin *This, LPLONG plID);HRESULT ( *GetSystemObject)(IASQLOLELogin *This, LPBOOL pRetVal);HRESULT ( *GetLanguage)(IASQLOLELogin *This, LPBSTRA pbstrLanguage);HRESULT ( *SetLanguage)(IASQLOLELogin *This, LPCSTR NewValue);HRESULT ( *GetDatabase)(IASQLOLELogin *This, LPBSTRA pbstrDatabase);HRESULT ( *SetDatabase)(IASQLOLELogin *This, LPCSTR NewValue);HRESULT ( *GetUserNameA)(IASQLOLELogin *This, LPCSTR DatabaseName, LPBSTRA pRetVal);HRESULT ( *GetAliasName)(IASQLOLELogin *This, LPCSTR DatabaseName, LPBSTRA pRetVal);HRESULT ( *ListTasks)(IASQLOLELogin *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *Remove)(IASQLOLELogin *This);HRESULT ( *Script)(IASQLOLELogin *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *SetPassword)(IASQLOLELogin *This, LPCSTR OldValue, LPCSTR NewValue);HRESULT ( *EnumDatabaseMappings)(IASQLOLELogin *This, LPASQLOLEQUERYRESULTS *ppResults);};
union _NTMS_OBJECTINFORMATIONA___C54245BCF81BD8C2976163E7CB33D303 {NTMS_DRIVEINFORMATIONA Drive;NTMS_DRIVETYPEINFORMATIONA DriveType;NTMS_LIBRARYINFORMATION Library;NTMS_CHANGERINFORMATIONA Changer;NTMS_CHANGERTYPEINFORMATIONA ChangerType;NTMS_STORAGESLOTINFORMATION StorageSlot;NTMS_IEDOORINFORMATION IEDoor;NTMS_IEPORTINFORMATION IEPort;NTMS_PMIDINFORMATIONA PhysicalMedia;NTMS_LMIDINFORMATION LogicalMedia;NTMS_PARTITIONINFORMATIONA Partition;NTMS_MEDIAPOOLINFORMATION MediaPool;NTMS_MEDIATYPEINFORMATION MediaType;NTMS_LIBREQUESTINFORMATIONA LibRequest;NTMS_OPREQUESTINFORMATIONA OpRequest;};
union _NTMS_OBJECTINFORMATIONW___0CBDE24DA5C159C356A2BA5F5BFBCD0A {NTMS_DRIVEINFORMATIONW Drive;NTMS_DRIVETYPEINFORMATIONW DriveType;NTMS_LIBRARYINFORMATION Library;NTMS_CHANGERINFORMATIONW Changer;NTMS_CHANGERTYPEINFORMATIONW ChangerType;NTMS_STORAGESLOTINFORMATION StorageSlot;NTMS_IEDOORINFORMATION IEDoor;NTMS_IEPORTINFORMATION IEPort;NTMS_PMIDINFORMATIONW PhysicalMedia;NTMS_LMIDINFORMATION LogicalMedia;NTMS_PARTITIONINFORMATIONW Partition;NTMS_MEDIAPOOLINFORMATION MediaPool;NTMS_MEDIATYPEINFORMATION MediaType;NTMS_LIBREQUESTINFORMATIONW LibRequest;NTMS_OPREQUESTINFORMATIONW OpRequest;};
struct IASQLOLEIntegratedSecurityVtbl {HRESULT ( *QueryInterface)(IASQLOLEIntegratedSecurity *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEIntegratedSecurity *This);ULONG ( *Release)(IASQLOLEIntegratedSecurity *This);HRESULT ( *GetApplication)(IASQLOLEIntegratedSecurity *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEIntegratedSecurity *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEIntegratedSecurity *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEIntegratedSecurity *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEIntegratedSecurity *This, LPVOID lpvNewValue);HRESULT ( *GetMapUnderscore)(IASQLOLEIntegratedSecurity *This, LPBSTRA pRetVal);HRESULT ( *SetMapUnderscore)(IASQLOLEIntegratedSecurity *This, LPCSTR NewValue);HRESULT ( *GetMapDollarSign)(IASQLOLEIntegratedSecurity *This, LPBSTRA pRetVal);HRESULT ( *SetMapDollarSign)(IASQLOLEIntegratedSecurity *This, LPCSTR NewValue);HRESULT ( *GetMapPoundSign)(IASQLOLEIntegratedSecurity *This, LPBSTRA pRetVal);HRESULT ( *SetMapPoundSign)(IASQLOLEIntegratedSecurity *This, LPCSTR NewValue);HRESULT ( *GetSecurityMode)(IASQLOLEIntegratedSecurity *This, SQLOLE_SECURITY_TYPE *pRetVal);HRESULT ( *SetSecurityMode)(IASQLOLEIntegratedSecurity *This, SQLOLE_SECURITY_TYPE NewValue);HRESULT ( *GetDefaultLogin)(IASQLOLEIntegratedSecurity *This, LPBSTRA pRetVal);HRESULT ( *SetDefaultLogin)(IASQLOLEIntegratedSecurity *This, LPCSTR NewValue);HRESULT ( *GetDefaultDomain)(IASQLOLEIntegratedSecurity *This, LPBSTRA pRetVal);HRESULT ( *SetDefaultDomain)(IASQLOLEIntegratedSecurity *This, LPCSTR NewValue);HRESULT ( *GetAuditLevel)(IASQLOLEIntegratedSecurity *This, SQLOLE_AUDIT_TYPE *pRetVal);HRESULT ( *SetAuditLevel)(IASQLOLEIntegratedSecurity *This, SQLOLE_AUDIT_TYPE NewValue);HRESULT ( *GetSetHostName)(IASQLOLEIntegratedSecurity *This, LPBOOL pRetVal);HRESULT ( *SetSetHostName)(IASQLOLEIntegratedSecurity *This, BOOL NewValue);HRESULT ( *GetImpersonateClient)(IASQLOLEIntegratedSecurity *This, LPBOOL pRetVal);HRESULT ( *SetImpersonateClient)(IASQLOLEIntegratedSecurity *This, BOOL NewValue);HRESULT ( *Refresh)(IASQLOLEIntegratedSecurity *This);HRESULT ( *GrantNTLogin)(IASQLOLEIntegratedSecurity *This, LPCSTR Account, SQLOLE_INTSECLOGIN_TYPE LoginType);HRESULT ( *RevokeNTLogin)(IASQLOLEIntegratedSecurity *This, LPCSTR Account);HRESULT ( *EnumAccountInfo)(IASQLOLEIntegratedSecurity *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR Account, BOOL ListAll);HRESULT ( *EnumNTDomainGroups)(IASQLOLEIntegratedSecurity *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR Domain);};
struct IDirect3DRMAnimationSetVtbl {HRESULT ( *QueryInterface)(IDirect3DRMAnimationSet *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMAnimationSet *This);ULONG ( *Release)(IDirect3DRMAnimationSet *This);HRESULT ( *Clone)(IDirect3DRMAnimationSet *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMAnimationSet *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMAnimationSet *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMAnimationSet *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMAnimationSet *This);HRESULT ( *SetName)(IDirect3DRMAnimationSet *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMAnimationSet *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMAnimationSet *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *AddAnimation)(IDirect3DRMAnimationSet *This, LPDIRECT3DRMANIMATION aid);HRESULT ( *Load)(IDirect3DRMAnimationSet *This, LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg, LPDIRECT3DRMFRAME parent);HRESULT ( *DeleteAnimation)(IDirect3DRMAnimationSet *This, LPDIRECT3DRMANIMATION aid);HRESULT ( *SetTime)(IDirect3DRMAnimationSet *This, D3DVALUE time);};
struct IASQLOLEHistoryFilterVtbl {HRESULT ( *QueryInterface)(IASQLOLEHistoryFilter *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEHistoryFilter *This);ULONG ( *Release)(IASQLOLEHistoryFilter *This);HRESULT ( *GetApplication)(IASQLOLEHistoryFilter *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEHistoryFilter *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEHistoryFilter *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEHistoryFilter *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEHistoryFilter *This, LPVOID lpvNewValue);HRESULT ( *GetTaskName)(IASQLOLEHistoryFilter *This, LPBSTRA pRetVal);HRESULT ( *SetTaskName)(IASQLOLEHistoryFilter *This, LPCSTR NewValue);HRESULT ( *GetStartDate)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetStartDate)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetStartTime)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetStartTime)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetCompletionTypes)(IASQLOLEHistoryFilter *This, SQLOLE_COMPLETION_TYPE *pRetVal);HRESULT ( *SetCompletionTypes)(IASQLOLEHistoryFilter *This, SQLOLE_COMPLETION_TYPE NewValue);HRESULT ( *GetEventTypes)(IASQLOLEHistoryFilter *This, SQLOLE_EVENT_TYPE *pRetVal);HRESULT ( *SetEventTypes)(IASQLOLEHistoryFilter *This, SQLOLE_EVENT_TYPE NewValue);HRESULT ( *GetTaskID)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetTaskID)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetEventID)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetEventID)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetMessageID)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetMessageID)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetSeverity)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetSeverity)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetSource)(IASQLOLEHistoryFilter *This, LPBSTRA pRetVal);HRESULT ( *SetSource)(IASQLOLEHistoryFilter *This, LPCSTR NewValue);HRESULT ( *GetCategoryName)(IASQLOLEHistoryFilter *This, LPBSTRA pRetVal);HRESULT ( *SetCategoryName)(IASQLOLEHistoryFilter *This, LPCSTR NewValue);HRESULT ( *GetMinimumRunDuration)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetMinimumRunDuration)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetMinimumRetries)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetMinimumRetries)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetOldestFirst)(IASQLOLEHistoryFilter *This, LPBOOL pRetVal);HRESULT ( *SetOldestFirst)(IASQLOLEHistoryFilter *This, BOOL NewValue);HRESULT ( *GetEndDate)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetEndDate)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetEndTime)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetEndTime)(IASQLOLEHistoryFilter *This, int NewValue);HRESULT ( *GetMinimumTimesSkipped)(IASQLOLEHistoryFilter *This, LPLONG pRetVal);HRESULT ( *SetMinimumTimesSkipped)(IASQLOLEHistoryFilter *This, LONG NewValue);};
struct IASQLOLEQueryResultsVtbl {HRESULT ( *QueryInterface)(IASQLOLEQueryResults *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEQueryResults *This);ULONG ( *Release)(IASQLOLEQueryResults *This);HRESULT ( *GetApplication)(IASQLOLEQueryResults *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEQueryResults *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEQueryResults *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEQueryResults *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEQueryResults *This, LPVOID lpvNewValue);HRESULT ( *GetResultSets)(IASQLOLEQueryResults *This, LPLONG pRetVal);HRESULT ( *GetCurrentResultSet)(IASQLOLEQueryResults *This, LPLONG pRetVal);HRESULT ( *SetCurrentResultSet)(IASQLOLEQueryResults *This, int NewValue);HRESULT ( *GetRows)(IASQLOLEQueryResults *This, LPLONG pRetVal);HRESULT ( *GetColumns)(IASQLOLEQueryResults *This, LPLONG pRetVal);HRESULT ( *GetColumnName)(IASQLOLEQueryResults *This, int lColumn, LPBSTRA pRetVal);HRESULT ( *GetColumnType)(IASQLOLEQueryResults *This, int lColumn, SQLOLE_QUERY_DATATYPE *pRetVal);HRESULT ( *GetColumnMaxLength)(IASQLOLEQueryResults *This, int lColumn, LPLONG pRetVal);HRESULT ( *GetColumnLong)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPLONG pRetVal);HRESULT ( *GetColumnBool)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPBOOL pRetVal);HRESULT ( *GetColumnFloat)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPFLOAT pRetVal);HRESULT ( *GetColumnDouble)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPDOUBLE pRetVal);HRESULT ( *GetColumnString)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPBSTRA pRetVal);HRESULT ( *GetRangeString)(IASQLOLEQueryResults *This, LPBSTRA pRetVal, int Top, int Left, int Bottom, int Right, LPCSTR RowDelim, LPCSTR ColDelim, LPCSTR ColWidths);HRESULT ( *Refresh)(IASQLOLEQueryResults *This);HRESULT ( *GetColumnDate)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPSYSTEMTIME pSystemTime);HRESULT ( *GetColumnBinary)(IASQLOLEQueryResults *This, int lRow, int lColumn, LPVOID *pvData);};
struct IDirectPlayLobby2Vtbl {HRESULT ( *QueryInterface)(IDirectPlayLobby2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectPlayLobby2 *This);ULONG ( *Release)(IDirectPlayLobby2 *This);HRESULT ( *Connect)(IDirectPlayLobby2 *This, DWORD, LPDIRECTPLAY2 *, IUnknown *);HRESULT ( *CreateAddress)(IDirectPlayLobby2 *This,  GUID *,  GUID *, LPCVOID, DWORD, LPVOID, LPDWORD);HRESULT ( *EnumAddress)(IDirectPlayLobby2 *This, LPDPENUMADDRESSCALLBACK, LPCVOID, DWORD, LPVOID);HRESULT ( *EnumAddressTypes)(IDirectPlayLobby2 *This, LPDPLENUMADDRESSTYPESCALLBACK,  GUID *, LPVOID, DWORD);HRESULT ( *EnumLocalApplications)(IDirectPlayLobby2 *This, LPDPLENUMLOCALAPPLICATIONSCALLBACK, LPVOID, DWORD);HRESULT ( *GetConnectionSettings)(IDirectPlayLobby2 *This, DWORD, LPVOID, LPDWORD);HRESULT ( *ReceiveLobbyMessage)(IDirectPlayLobby2 *This, DWORD, DWORD, LPDWORD, LPVOID, LPDWORD);HRESULT ( *RunApplication)(IDirectPlayLobby2 *This, DWORD, LPDWORD, LPDPLCONNECTION, HANDLE);HRESULT ( *SendLobbyMessage)(IDirectPlayLobby2 *This, DWORD, DWORD, LPVOID, DWORD);HRESULT ( *SetConnectionSettings)(IDirectPlayLobby2 *This, DWORD, DWORD, LPDPLCONNECTION);HRESULT ( *SetLobbyMessageEvent)(IDirectPlayLobby2 *This, DWORD, DWORD, HANDLE);HRESULT ( *CreateCompoundAddress)(IDirectPlayLobby2 *This, LPCDPCOMPOUNDADDRESSELEMENT, DWORD, LPVOID, LPDWORD);};
struct IASQLOLETransferVtbl {HRESULT ( *QueryInterface)(IASQLOLETransfer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETransfer *This);ULONG ( *Release)(IASQLOLETransfer *This);HRESULT ( *GetApplication)(IASQLOLETransfer *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETransfer *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETransfer *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETransfer *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETransfer *This, LPVOID lpvNewValue);HRESULT ( *GetDestServer)(IASQLOLETransfer *This, LPBSTRA pRetVal);HRESULT ( *SetDestServer)(IASQLOLETransfer *This, LPCSTR NewValue);HRESULT ( *GetDestLogin)(IASQLOLETransfer *This, LPBSTRA pRetVal);HRESULT ( *SetDestLogin)(IASQLOLETransfer *This, LPCSTR NewValue);HRESULT ( *GetDestPassword)(IASQLOLETransfer *This, LPBSTRA pRetVal);HRESULT ( *SetDestPassword)(IASQLOLETransfer *This, LPCSTR NewValue);HRESULT ( *GetDestDatabase)(IASQLOLETransfer *This, LPBSTRA pRetVal);HRESULT ( *SetDestDatabase)(IASQLOLETransfer *This, LPCSTR NewValue);HRESULT ( *GetDestUseTrustedConnection)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetDestUseTrustedConnection)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyData)(IASQLOLETransfer *This, SQLOLE_COPYDATA_TYPE *pRetVal);HRESULT ( *SetCopyData)(IASQLOLETransfer *This, SQLOLE_COPYDATA_TYPE NewValue);HRESULT ( *GetCopySchema)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopySchema)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllObjects)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllObjects)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllTables)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllTables)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllViews)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllViews)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllStoredProcedures)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllStoredProcedures)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllUserDefinedDatatypes)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllUserDefinedDatatypes)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllRules)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllRules)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllDefaults)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllDefaults)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetCopyAllTriggers)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetCopyAllTriggers)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetIncludeDependencies)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetIncludeDependencies)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetIncludeUsers)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetIncludeUsers)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetIncludeGroups)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetIncludeGroups)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetIncludeLogins)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetIncludeLogins)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetDropDestObjectsFirst)(IASQLOLETransfer *This, LPBOOL pRetVal);HRESULT ( *SetDropDestObjectsFirst)(IASQLOLETransfer *This, BOOL NewValue);HRESULT ( *GetScriptType)(IASQLOLETransfer *This, SQLOLE_SCRIPT_TYPE *pRetVal);HRESULT ( *SetScriptType)(IASQLOLETransfer *This, SQLOLE_SCRIPT_TYPE NewValue);HRESULT ( *AddObjectByName)(IASQLOLETransfer *This, LPCSTR ObjectName, SQLOLE_OBJECT_TYPE ObjectType);HRESULT ( *AddObject)(IASQLOLETransfer *This, LPASQLOLEDBOBJECT DBObject);HRESULT ( *ListObjectNames)(IASQLOLETransfer *This, SQLOLE_OBJECT_TYPE ObjectType, LPASQLOLENAMELIST *ppList);HRESULT ( *Abort)(IASQLOLETransfer *This);};
struct IMAPIMessageSiteVtbl {HRESULT ( *QueryInterface)(IMAPIMessageSite *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIMessageSite *This);ULONG ( *Release)(IMAPIMessageSite *This);HRESULT ( *GetLastError)(IMAPIMessageSite *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetSession)(IMAPIMessageSite *This, LPMAPISESSION *ppSession);HRESULT ( *GetStore)(IMAPIMessageSite *This, LPMDB *ppStore);HRESULT ( *GetFolder)(IMAPIMessageSite *This, LPMAPIFOLDER *ppFolder);HRESULT ( *GetMessageA)(IMAPIMessageSite *This, LPMESSAGE *ppmsg);HRESULT ( *GetFormManager)(IMAPIMessageSite *This, LPMAPIFORMMGR *ppFormMgr);HRESULT ( *NewMessage)(IMAPIMessageSite *This, ULONG fComposeInFolder, LPMAPIFOLDER pFolderFocus, LPPERSISTMESSAGE pPersistMessage, LPMESSAGE *ppMessage, LPMAPIMESSAGESITE *ppMessageSite, LPMAPIVIEWCONTEXT *ppViewContext);HRESULT ( *CopyMessage)(IMAPIMessageSite *This, LPMAPIFOLDER pFolderDestination);HRESULT ( *MoveMessage)(IMAPIMessageSite *This, LPMAPIFOLDER pFolderDestination, LPMAPIVIEWCONTEXT pViewContext, LPCRECT prcPosRect);HRESULT ( *DeleteMessage)(IMAPIMessageSite *This, LPMAPIVIEWCONTEXT pViewContext, LPCRECT prcPosRect);HRESULT ( *SaveMessage)(IMAPIMessageSite *This);HRESULT ( *SubmitMessage)(IMAPIMessageSite *This, ULONG ulFlags);HRESULT ( *GetSiteStatus)(IMAPIMessageSite *This, LPULONG lpulStatus);};
struct IASQLOLETriggerVtbl {HRESULT ( *QueryInterface)(IASQLOLETrigger *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETrigger *This);ULONG ( *Release)(IASQLOLETrigger *This);HRESULT ( *GetApplication)(IASQLOLETrigger *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETrigger *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETrigger *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETrigger *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETrigger *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLETrigger *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLETrigger *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLETrigger *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLETrigger *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLETrigger *This, LPLONG pRetVal);HRESULT ( *GetText)(IASQLOLETrigger *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLETrigger *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLETrigger *This, SQLOLE_TRIGGER_TYPE *pRetVal);HRESULT ( *GetSystemObject)(IASQLOLETrigger *This, LPBOOL pRetVal);HRESULT ( *Remove)(IASQLOLETrigger *This);HRESULT ( *Script)(IASQLOLETrigger *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *EnumDependencies)(IASQLOLETrigger *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);};
union _Alpha_Instruction {ULONG Long;UCHAR Byte[4];Alpha_Memory_Format Memory;Alpha_Jump_Format Jump;Alpha_Branch_Format Branch;Alpha_OpReg_Format OpReg;Alpha_OpLit_Format OpLit;Alpha_FpOp_Format FpOp;Alpha_PAL_Format Pal;Alpha_EV4_PR_Format EV4_PR;Alpha_EV4_MEM_Format EV4_MEM;Alpha_EV4_REI_Format EV4_REI;Alpha_EV5_PR_Format EV5_PR;Alpha_EV5_MEM_Format EV5_MEM;Alpha_EV5_REI_Format EV5_REI;};
struct IASQLOLEAlertVtbl {HRESULT ( *QueryInterface)(IASQLOLEAlert *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEAlert *This);ULONG ( *Release)(IASQLOLEAlert *This);HRESULT ( *GetApplication)(IASQLOLEAlert *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEAlert *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEAlert *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEAlert *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEAlert *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEAlert *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *GetEventSource)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *GetEventCategory)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *GetEventID)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *GetMessageID)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetMessageID)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetSeverity)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetSeverity)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetEnabled)(IASQLOLEAlert *This, LPBOOL pRetVal);HRESULT ( *SetEnabled)(IASQLOLEAlert *This, BOOL NewValue);HRESULT ( *GetDelayBetweenResponses)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetDelayBetweenResponses)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetLastOccurrenceDate)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetLastOccurrenceDate)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetLastOccurrenceTime)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetLastOccurrenceTime)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetLastResponseDate)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetLastResponseDate)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetLastResponseTime)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetLastResponseTime)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetNotificationMessage)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *SetNotificationMessage)(IASQLOLEAlert *This, LPCSTR NewValue);HRESULT ( *GetIncludeEventDescription)(IASQLOLEAlert *This, SQLOLE_NOTIFY_TYPE *pRetVal);HRESULT ( *SetIncludeEventDescription)(IASQLOLEAlert *This, SQLOLE_NOTIFY_TYPE NewValue);HRESULT ( *GetDatabaseName)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *SetDatabaseName)(IASQLOLEAlert *This, LPCSTR NewValue);HRESULT ( *GetEventDescriptionKeyword)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *SetEventDescriptionKeyword)(IASQLOLEAlert *This, LPCSTR NewValue);HRESULT ( *GetOccurrenceCount)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetOccurrenceCount)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetCountResetDate)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetCountResetDate)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetCountResetTime)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *SetCountResetTime)(IASQLOLEAlert *This, int NewValue);HRESULT ( *GetTaskName)(IASQLOLEAlert *This, LPBSTRA pRetVal);HRESULT ( *SetTaskName)(IASQLOLEAlert *This, LPCSTR NewValue);HRESULT ( *GetHasEmailNotification)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *GetHasPagerNotification)(IASQLOLEAlert *This, LPLONG pRetVal);HRESULT ( *AddNotification)(IASQLOLEAlert *This, LPCSTR OperatorName, SQLOLE_NOTIFY_TYPE NotifyMethod);HRESULT ( *UpdateNotification)(IASQLOLEAlert *This, LPCSTR OperatorName, SQLOLE_NOTIFY_TYPE NotifyMethod);HRESULT ( *RemoveNotification)(IASQLOLEAlert *This, LPCSTR OperatorName);HRESULT ( *EnumNotifications)(IASQLOLEAlert *This, SQLOLE_NOTIFY_TYPE NotifyMethod, SQLOLE_ENUMNOTIFY_TYPE EnumNotifyType, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR OperatorName);HRESULT ( *Remove)(IASQLOLEAlert *This);HRESULT ( *BeginAlter)(IASQLOLEAlert *This);HRESULT ( *DoAlter)(IASQLOLEAlert *This);HRESULT ( *CancelAlter)(IASQLOLEAlert *This);HRESULT ( *Refresh)(IASQLOLEAlert *This);HRESULT ( *GetRaiseSNMPTrap)(IASQLOLEAlert *This, LPBOOL pRetVal);HRESULT ( *SetRaiseSNMPTrap)(IASQLOLEAlert *This, BOOL NewValue);};
struct IASQLOLEIndexVtbl {HRESULT ( *QueryInterface)(IASQLOLEIndex *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEIndex *This);ULONG ( *Release)(IASQLOLEIndex *This);HRESULT ( *GetApplication)(IASQLOLEIndex *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEIndex *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEIndex *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEIndex *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEIndex *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEIndex *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEIndex *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLEIndex *This, SQLOLE_INDEX_TYPE *pRetVal);HRESULT ( *SetType)(IASQLOLEIndex *This, SQLOLE_INDEX_TYPE NewValue);HRESULT ( *GetID)(IASQLOLEIndex *This, LPLONG pRetVal);HRESULT ( *GetFillFactor)(IASQLOLEIndex *This, LPLONG pRetVal);HRESULT ( *SetFillFactor)(IASQLOLEIndex *This, int lNewValue);HRESULT ( *GetSpaceUsed)(IASQLOLEIndex *This, LPLONG pRetVal);HRESULT ( *SetIndexedColumns)(IASQLOLEIndex *This, LPCSTR ColumnNames);HRESULT ( *UpdateStatistics)(IASQLOLEIndex *This);HRESULT ( *Remove)(IASQLOLEIndex *This);HRESULT ( *Script)(IASQLOLEIndex *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *Rebuild)(IASQLOLEIndex *This);HRESULT ( *RecalcSpaceUsage)(IASQLOLEIndex *This);HRESULT ( *EnumStatistics)(IASQLOLEIndex *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *GenerateCreationSQL)(IASQLOLEIndex *This, LPASQLOLETABLE TargetTable, LPBSTRA pSQLStatement);HRESULT ( *ListIndexedColumns)(IASQLOLEIndex *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *CheckIndex)(IASQLOLEIndex *This, LPBSTRA pResult);};
struct IViewObjectExVtbl {HRESULT ( *QueryInterface)(IViewObjectEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IViewObjectEx *This);ULONG ( *Release)(IViewObjectEx *This);HRESULT ( *Draw)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL ( *pfnContinue)(DWORD dwContinue), DWORD dwContinue);HRESULT ( *GetColorSet)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT ( *Freeze)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT ( *Unfreeze)(IViewObjectEx *This, DWORD dwFreeze);HRESULT ( *SetAdvise)(IViewObjectEx *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT ( *GetAdvise)(IViewObjectEx *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT ( *GetExtent)(IViewObjectEx *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);HRESULT ( *GetRect)(IViewObjectEx *This, DWORD dwAspect, LPRECTL pRect);HRESULT ( *GetViewStatus)(IViewObjectEx *This, DWORD *pdwStatus);HRESULT ( *QueryHitPoint)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, POINT ptlLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *QueryHitRect)(IViewObjectEx *This, DWORD dwAspect, LPCRECT pRectBounds, LPCRECT pRectLoc, LONG lCloseHint, DWORD *pHitResult);HRESULT ( *GetNaturalExtent)(IViewObjectEx *This, DWORD dwAspect, LONG lindex, DVTARGETDEVICE *ptd, HDC hicTargetDev, DVEXTENTINFO *pExtentInfo, LPSIZEL pSizel);};
struct IASQLOLEUserVtbl {HRESULT ( *QueryInterface)(IASQLOLEUser *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEUser *This);ULONG ( *Release)(IASQLOLEUser *This);HRESULT ( *GetApplication)(IASQLOLEUser *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEUser *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEUser *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEUser *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEUser *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEUser *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEUser *This, LPCSTR NewValue);HRESULT ( *GetLogin)(IASQLOLEUser *This, LPBSTRA pRetVal);HRESULT ( *SetLogin)(IASQLOLEUser *This, LPCSTR NewValue);HRESULT ( *GetGroup)(IASQLOLEUser *This, LPBSTRA pRetVal);HRESULT ( *SetGroup)(IASQLOLEUser *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEUser *This, LPLONG pRetVal);HRESULT ( *GetSystemObject)(IASQLOLEUser *This, LPBOOL pRetVal);HRESULT ( *AddAlias)(IASQLOLEUser *This, LPCSTR LoginNames);HRESULT ( *RemoveAlias)(IASQLOLEUser *This, LPCSTR LoginNames);HRESULT ( *Remove)(IASQLOLEUser *This);HRESULT ( *Script)(IASQLOLEUser *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *ListAliases)(IASQLOLEUser *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListOwnedObjects)(IASQLOLEUser *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_OBJECT_TYPE lObjectTypes, SQLOLE_OBJSORT_TYPE SortBy);HRESULT ( *ListDatabasePermissions)(IASQLOLEUser *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListObjectPermissions)(IASQLOLEUser *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);};
struct IDirectPlay2Vtbl {HRESULT ( *QueryInterface)(IDirectPlay2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectPlay2 *This);ULONG ( *Release)(IDirectPlay2 *This);HRESULT ( *AddPlayerToGroup)(IDirectPlay2 *This, DPID, DPID);HRESULT ( *Close)(IDirectPlay2 *This);HRESULT ( *CreateGroup)(IDirectPlay2 *This, LPDPID, LPDPNAME, LPVOID, DWORD, DWORD);HRESULT ( *CreatePlayer)(IDirectPlay2 *This, LPDPID, LPDPNAME, HANDLE, LPVOID, DWORD, DWORD);HRESULT ( *DeletePlayerFromGroup)(IDirectPlay2 *This, DPID, DPID);HRESULT ( *DestroyGroup)(IDirectPlay2 *This, DPID);HRESULT ( *DestroyPlayer)(IDirectPlay2 *This, DPID);HRESULT ( *EnumGroupPlayers)(IDirectPlay2 *This, DPID, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumGroups)(IDirectPlay2 *This, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumPlayers)(IDirectPlay2 *This, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumSessions)(IDirectPlay2 *This, LPDPSESSIONDESC2, DWORD, LPDPENUMSESSIONSCALLBACK2, LPVOID, DWORD);HRESULT ( *GetCaps)(IDirectPlay2 *This, LPDPCAPS, DWORD);HRESULT ( *GetGroupData)(IDirectPlay2 *This, DPID, LPVOID, LPDWORD, DWORD);HRESULT ( *GetGroupName)(IDirectPlay2 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetMessageCount)(IDirectPlay2 *This, DPID, LPDWORD);HRESULT ( *GetPlayerAddress)(IDirectPlay2 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetPlayerCaps)(IDirectPlay2 *This, DPID, LPDPCAPS, DWORD);HRESULT ( *GetPlayerData)(IDirectPlay2 *This, DPID, LPVOID, LPDWORD, DWORD);HRESULT ( *GetPlayerName)(IDirectPlay2 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetSessionDesc)(IDirectPlay2 *This, LPVOID, LPDWORD);HRESULT ( *Initialize)(IDirectPlay2 *This, LPGUID);HRESULT ( *Open)(IDirectPlay2 *This, LPDPSESSIONDESC2, DWORD);HRESULT ( *Receive)(IDirectPlay2 *This, LPDPID, LPDPID, DWORD, LPVOID, LPDWORD);HRESULT ( *Send)(IDirectPlay2 *This, DPID, DPID, DWORD, LPVOID, DWORD);HRESULT ( *SetGroupData)(IDirectPlay2 *This, DPID, LPVOID, DWORD, DWORD);HRESULT ( *SetGroupName)(IDirectPlay2 *This, DPID, LPDPNAME, DWORD);HRESULT ( *SetPlayerData)(IDirectPlay2 *This, DPID, LPVOID, DWORD, DWORD);HRESULT ( *SetPlayerName)(IDirectPlay2 *This, DPID, LPDPNAME, DWORD);HRESULT ( *SetSessionDesc)(IDirectPlay2 *This, LPDPSESSIONDESC2, DWORD);};
struct IASQLOLEKeyVtbl {HRESULT ( *QueryInterface)(IASQLOLEKey *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEKey *This);ULONG ( *Release)(IASQLOLEKey *This);HRESULT ( *GetApplication)(IASQLOLEKey *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEKey *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEKey *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEKey *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEKey *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEKey *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEKey *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLEKey *This, SQLOLE_KEY_TYPE *pRetVal);HRESULT ( *SetType)(IASQLOLEKey *This, SQLOLE_KEY_TYPE NewValue);HRESULT ( *GetClustered)(IASQLOLEKey *This, LPBOOL pRetVal);HRESULT ( *SetClustered)(IASQLOLEKey *This, BOOL bNewValue);HRESULT ( *GetFillFactor)(IASQLOLEKey *This, LPLONG pRetVal);HRESULT ( *SetFillFactor)(IASQLOLEKey *This, int lNewValue);HRESULT ( *GetReferencedTable)(IASQLOLEKey *This, LPBSTRA pRetVal);HRESULT ( *SetReferencedTable)(IASQLOLEKey *This, LPCSTR NewValue);HRESULT ( *GetReferencedKey)(IASQLOLEKey *This, LPBSTRA pRetVal);HRESULT ( *GetKeyColumns)(IASQLOLEKey *This, LPASQLOLENAMES *ppColumnNames);HRESULT ( *GetReferencedColumns)(IASQLOLEKey *This, LPASQLOLENAMES *ppColumnNames);HRESULT ( *Remove)(IASQLOLEKey *This);HRESULT ( *Script)(IASQLOLEKey *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *RebuildIndex)(IASQLOLEKey *This);HRESULT ( *GetExcludeReplication)(IASQLOLEKey *This, LPBOOL pRetVal);HRESULT ( *SetExcludeReplication)(IASQLOLEKey *This, BOOL NewValue);};
struct IShellViewVtbl {HRESULT ( *QueryInterface)(IShellView *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellView *This);ULONG ( *Release)(IShellView *This);HRESULT ( *GetWindow)(IShellView *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IShellView *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView *This, LPMSG lpmsg);HRESULT ( *EnableModeless)(IShellView *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView *This, UINT uState);HRESULT ( *Refresh)(IShellView *This);HRESULT ( *CreateViewWindow)(IShellView *This, IShellView *lpPrevView, LPCFOLDERSETTINGS lpfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView *This);HRESULT ( *GetCurrentInfo)(IShellView *This, LPFOLDERSETTINGS lpfs);HRESULT ( *AddPropertySheetPages)(IShellView *This, DWORD dwReserved, LPFNADDPROPSHEETPAGE lpfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView *This);HRESULT ( *SelectItem)(IShellView *This, LPCITEMIDLIST pidlItem, UINT uFlags);HRESULT ( *GetItemObject)(IShellView *This, UINT uItem,  IID * riid, LPVOID *ppv);};
struct IPictureVtbl {HRESULT ( *QueryInterface)(IPicture *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPicture *This);ULONG ( *Release)(IPicture *This);HRESULT ( *get_Handle)(IPicture *This, OLE_HANDLE *pHandle);HRESULT ( *get_hPal)(IPicture *This, OLE_HANDLE *phPal);HRESULT ( *get_Type)(IPicture *This, SHORT *pType);HRESULT ( *get_Width)(IPicture *This, OLE_XSIZE_HIMETRIC *pWidth);HRESULT ( *get_Height)(IPicture *This, OLE_YSIZE_HIMETRIC *pHeight);HRESULT ( *Render)(IPicture *This, HDC hDC, LONG x, LONG y, LONG cx, LONG cy, OLE_XPOS_HIMETRIC xSrc, OLE_YPOS_HIMETRIC ySrc, OLE_XSIZE_HIMETRIC cxSrc, OLE_YSIZE_HIMETRIC cySrc, LPCRECT pRcWBounds);HRESULT ( *set_hPal)(IPicture *This, OLE_HANDLE hPal);HRESULT ( *get_CurDC)(IPicture *This, HDC *phDC);HRESULT ( *SelectPicture)(IPicture *This, HDC hDCIn, HDC *phDCOut, OLE_HANDLE *phBmpOut);HRESULT ( *get_KeepOriginalFormat)(IPicture *This, BOOL *pKeep);HRESULT ( *put_KeepOriginalFormat)(IPicture *This, BOOL keep);HRESULT ( *PictureChanged)(IPicture *This);HRESULT ( *SaveAsFile)(IPicture *This, LPSTREAM pStream, BOOL fSaveMemCopy, LONG *pCbSize);HRESULT ( *get_Attributes)(IPicture *This, DWORD *pDwAttr);};
struct IDirect3DViewportVtbl {HRESULT ( *QueryInterface)(IDirect3DViewport *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DViewport *This);ULONG ( *Release)(IDirect3DViewport *This);HRESULT ( *Initialize)(IDirect3DViewport *This, LPDIRECT3D);HRESULT ( *GetViewport)(IDirect3DViewport *This, LPD3DVIEWPORT);HRESULT ( *SetViewport)(IDirect3DViewport *This, LPD3DVIEWPORT);HRESULT ( *TransformVertices)(IDirect3DViewport *This, DWORD, LPD3DTRANSFORMDATA, DWORD, LPDWORD);HRESULT ( *LightElements)(IDirect3DViewport *This, DWORD, LPD3DLIGHTDATA);HRESULT ( *SetBackground)(IDirect3DViewport *This, D3DMATERIALHANDLE);HRESULT ( *GetBackground)(IDirect3DViewport *This, LPD3DMATERIALHANDLE, LPBOOL);HRESULT ( *SetBackgroundDepth)(IDirect3DViewport *This, LPDIRECTDRAWSURFACE);HRESULT ( *GetBackgroundDepth)(IDirect3DViewport *This, LPDIRECTDRAWSURFACE *, LPBOOL);HRESULT ( *Clear)(IDirect3DViewport *This, DWORD, LPD3DRECT, DWORD);HRESULT ( *AddLight)(IDirect3DViewport *This, LPDIRECT3DLIGHT);HRESULT ( *DeleteLight)(IDirect3DViewport *This, LPDIRECT3DLIGHT);HRESULT ( *NextLight)(IDirect3DViewport *This, LPDIRECT3DLIGHT, LPDIRECT3DLIGHT *, DWORD);};
struct IASQLOLEDBObjectVtbl {HRESULT ( *QueryInterface)(IASQLOLEDBObject *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDBObject *This);ULONG ( *Release)(IASQLOLEDBObject *This);HRESULT ( *GetApplication)(IASQLOLEDBObject *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDBObject *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDBObject *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDBObject *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDBObject *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEDBObject *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEDBObject *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLEDBObject *This, LPBSTRA pRetVal);HRESULT ( *GetTypeName)(IASQLOLEDBObject *This, LPBSTRA pRetVal);HRESULT ( *GetType)(IASQLOLEDBObject *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetCreateDate)(IASQLOLEDBObject *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLEDBObject *This, LPLONG pRetVal);HRESULT ( *GetSystemObject)(IASQLOLEDBObject *This, LPBOOL pRetVal);HRESULT ( *Remove)(IASQLOLEDBObject *This);HRESULT ( *Script)(IASQLOLEDBObject *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *EnumDependencies)(IASQLOLEDBObject *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);HRESULT ( *ListPermissions)(IASQLOLEDBObject *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListUserPermissions)(IASQLOLEDBObject *This, LPCSTR UserName, LPASQLOLEOBJECTLIST *ppList);};
struct IASQLOLEOperatorVtbl {HRESULT ( *QueryInterface)(IASQLOLEOperator *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEOperator *This);ULONG ( *Release)(IASQLOLEOperator *This);HRESULT ( *GetApplication)(IASQLOLEOperator *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEOperator *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEOperator *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEOperator *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEOperator *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEOperator *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEOperator *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *GetEnabled)(IASQLOLEOperator *This, LPBOOL pRetVal);HRESULT ( *SetEnabled)(IASQLOLEOperator *This, BOOL NewValue);HRESULT ( *GetEmailAddress)(IASQLOLEOperator *This, LPBSTRA pRetVal);HRESULT ( *SetEmailAddress)(IASQLOLEOperator *This, LPCSTR NewValue);HRESULT ( *GetLastEmailDate)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *GetLastEmailTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *GetPagerAddress)(IASQLOLEOperator *This, LPBSTRA pRetVal);HRESULT ( *SetPagerAddress)(IASQLOLEOperator *This, LPCSTR NewValue);HRESULT ( *GetLastPageDate)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *GetLastPageTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *GetWeekdayPagerStartTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetWeekdayPagerStartTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetWeekdayPagerEndTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetWeekdayPagerEndTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetSaturdayPagerStartTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetSaturdayPagerStartTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetSaturdayPagerEndTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetSaturdayPagerEndTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetSundayPagerStartTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetSundayPagerStartTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetSundayPagerEndTime)(IASQLOLEOperator *This, LPLONG pRetVal);HRESULT ( *SetSundayPagerEndTime)(IASQLOLEOperator *This, int NewValue);HRESULT ( *GetPagerDays)(IASQLOLEOperator *This, SQLOLE_WEEKDAY_TYPE *pRetVal);HRESULT ( *SetPagerDays)(IASQLOLEOperator *This, SQLOLE_WEEKDAY_TYPE NewValue);HRESULT ( *AddNotification)(IASQLOLEOperator *This, LPCSTR AlertName, SQLOLE_NOTIFY_TYPE NotifyMethod);HRESULT ( *UpdateNotification)(IASQLOLEOperator *This, LPCSTR AlertName, SQLOLE_NOTIFY_TYPE NotifyMethod);HRESULT ( *RemoveNotification)(IASQLOLEOperator *This, LPCSTR AlertName);HRESULT ( *EnumNotifications)(IASQLOLEOperator *This, SQLOLE_NOTIFY_TYPE NotifyMethod, SQLOLE_ENUMNOTIFY_TYPE EnumNotifyType, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR AlertName);HRESULT ( *Remove)(IASQLOLEOperator *This);HRESULT ( *BeginAlter)(IASQLOLEOperator *This);HRESULT ( *DoAlter)(IASQLOLEOperator *This);HRESULT ( *CancelAlter)(IASQLOLEOperator *This);HRESULT ( *Refresh)(IASQLOLEOperator *This);};
struct IDirect3DRMFaceVtbl {HRESULT ( *QueryInterface)(IDirect3DRMFace *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMFace *This);ULONG ( *Release)(IDirect3DRMFace *This);HRESULT ( *Clone)(IDirect3DRMFace *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMFace *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMFace *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMFace *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMFace *This);HRESULT ( *SetName)(IDirect3DRMFace *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMFace *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMFace *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *AddVertex)(IDirect3DRMFace *This, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *AddVertexAndNormalIndexed)(IDirect3DRMFace *This, DWORD vertex, DWORD normal);HRESULT ( *SetColorRGB)(IDirect3DRMFace *This, D3DVALUE, D3DVALUE, D3DVALUE);HRESULT ( *SetColor)(IDirect3DRMFace *This, D3DCOLOR);HRESULT ( *SetTexture)(IDirect3DRMFace *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetTextureCoordinates)(IDirect3DRMFace *This, DWORD vertex, D3DVALUE u, D3DVALUE v);HRESULT ( *SetMaterial)(IDirect3DRMFace *This, LPDIRECT3DRMMATERIAL);HRESULT ( *SetTextureTopology)(IDirect3DRMFace *This, BOOL wrap_u, BOOL wrap_v);HRESULT ( *GetVertex)(IDirect3DRMFace *This, DWORD index, D3DVECTOR *vertex, D3DVECTOR *normal);HRESULT ( *GetVertices)(IDirect3DRMFace *This, DWORD *vertex_count, D3DVECTOR *coords, D3DVECTOR *normals);HRESULT ( *GetTextureCoordinates)(IDirect3DRMFace *This, DWORD vertex, D3DVALUE *u, D3DVALUE *v);HRESULT ( *GetTextureTopology)(IDirect3DRMFace *This, BOOL *wrap_u, BOOL *wrap_v);HRESULT ( *GetNormal)(IDirect3DRMFace *This, D3DVECTOR *);HRESULT ( *GetTexture)(IDirect3DRMFace *This, LPDIRECT3DRMTEXTURE *);HRESULT ( *GetMaterial)(IDirect3DRMFace *This, LPDIRECT3DRMMATERIAL *);int ( *GetVertexCount)(IDirect3DRMFace *This);int ( *GetVertexIndex)(IDirect3DRMFace *This, DWORD which);int ( *GetTextureCoordinateIndex)(IDirect3DRMFace *This, DWORD which);D3DCOLOR ( *GetColor)(IDirect3DRMFace *This);};
struct IRichEditOleVtbl {HRESULT ( *QueryInterface)(IRichEditOle *This,  IID * riid, LPVOID *lplpObj);ULONG ( *AddRef)(IRichEditOle *This);ULONG ( *Release)(IRichEditOle *This);HRESULT ( *GetClientSite)(IRichEditOle *This, LPOLECLIENTSITE *lplpolesite);LONG ( *GetObjectCount)(IRichEditOle *This);LONG ( *GetLinkCount)(IRichEditOle *This);HRESULT ( *GetObjectA)(IRichEditOle *This, LONG iob, REOBJECT *lpreobject, DWORD dwFlags);HRESULT ( *InsertObject)(IRichEditOle *This, REOBJECT *lpreobject);HRESULT ( *ConvertObject)(IRichEditOle *This, LONG iob,  CLSID * rclsidNew, LPCSTR lpstrUserTypeNew);HRESULT ( *ActivateAs)(IRichEditOle *This,  CLSID * rclsid,  CLSID * rclsidAs);HRESULT ( *SetHostNames)(IRichEditOle *This, LPCSTR lpstrContainerApp, LPCSTR lpstrContainerObj);HRESULT ( *SetLinkAvailable)(IRichEditOle *This, LONG iob, BOOL fAvailable);HRESULT ( *SetDvaspect)(IRichEditOle *This, LONG iob, DWORD dvaspect);HRESULT ( *HandsOffStorage)(IRichEditOle *This, LONG iob);HRESULT ( *SaveCompleted)(IRichEditOle *This, LONG iob, LPSTORAGE lpstg);HRESULT ( *InPlaceDeactivate)(IRichEditOle *This);HRESULT ( *ContextSensitiveHelp)(IRichEditOle *This, BOOL fEnterMode);HRESULT ( *GetClipboardData)(IRichEditOle *This, CHARRANGE *lpchrg, DWORD reco, LPDATAOBJECT *lplpdataobj);HRESULT ( *ImportDataObject)(IRichEditOle *This, LPDATAOBJECT lpdataobj, CLIPFORMAT cf, HGLOBAL hMetaPict);};
struct IDirectPlayVtbl {HRESULT ( *QueryInterface)(IDirectPlay *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectPlay *This);ULONG ( *Release)(IDirectPlay *This);HRESULT ( *AddPlayerToGroup)(IDirectPlay *This, DPID, DPID);HRESULT ( *Close)(IDirectPlay *This);HRESULT ( *CreatePlayer)(IDirectPlay *This, LPDPID, LPSTR, LPSTR, LPHANDLE);HRESULT ( *CreateGroup)(IDirectPlay *This, LPDPID, LPSTR, LPSTR);HRESULT ( *DeletePlayerFromGroup)(IDirectPlay *This, DPID, DPID);HRESULT ( *DestroyPlayer)(IDirectPlay *This, DPID);HRESULT ( *DestroyGroup)(IDirectPlay *This, DPID);HRESULT ( *EnableNewPlayers)(IDirectPlay *This, BOOL);HRESULT ( *EnumGroupPlayers)(IDirectPlay *This, DPID, LPDPENUMPLAYERSCALLBACK, LPVOID, DWORD);HRESULT ( *EnumGroups)(IDirectPlay *This, DWORD, LPDPENUMPLAYERSCALLBACK, LPVOID, DWORD);HRESULT ( *EnumPlayers)(IDirectPlay *This, DWORD, LPDPENUMPLAYERSCALLBACK, LPVOID, DWORD);HRESULT ( *EnumSessions)(IDirectPlay *This, LPDPSESSIONDESC, DWORD, LPDPENUMSESSIONSCALLBACK, LPVOID, DWORD);HRESULT ( *GetCaps)(IDirectPlay *This, LPDPCAPS);HRESULT ( *GetMessageCount)(IDirectPlay *This, DPID, LPDWORD);HRESULT ( *GetPlayerCaps)(IDirectPlay *This, DPID, LPDPCAPS);HRESULT ( *GetPlayerName)(IDirectPlay *This, DPID, LPSTR, LPDWORD, LPSTR, LPDWORD);HRESULT ( *Initialize)(IDirectPlay *This, LPGUID);HRESULT ( *Open)(IDirectPlay *This, LPDPSESSIONDESC);HRESULT ( *Receive)(IDirectPlay *This, LPDPID, LPDPID, DWORD, LPVOID, LPDWORD);HRESULT ( *SaveSession)(IDirectPlay *This, LPSTR);HRESULT ( *Send)(IDirectPlay *This, DPID, DPID, DWORD, LPVOID, DWORD);HRESULT ( *SetPlayerName)(IDirectPlay *This, DPID, LPSTR, LPSTR);};
union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56 {GOPHER_ADMIN_ATTRIBUTE_TYPE Admin;GOPHER_MOD_DATE_ATTRIBUTE_TYPE ModDate;GOPHER_TTL_ATTRIBUTE_TYPE Ttl;GOPHER_SCORE_ATTRIBUTE_TYPE Score;GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE ScoreRange;GOPHER_SITE_ATTRIBUTE_TYPE Site;GOPHER_ORGANIZATION_ATTRIBUTE_TYPE Organization;GOPHER_LOCATION_ATTRIBUTE_TYPE Location;GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE GeographicalLocation;GOPHER_TIMEZONE_ATTRIBUTE_TYPE TimeZone;GOPHER_PROVIDER_ATTRIBUTE_TYPE Provider;GOPHER_VERSION_ATTRIBUTE_TYPE Version;GOPHER_ABSTRACT_ATTRIBUTE_TYPE Abstract;GOPHER_VIEW_ATTRIBUTE_TYPE View;GOPHER_VERONICA_ATTRIBUTE_TYPE Veronica;GOPHER_ASK_ATTRIBUTE_TYPE Ask;GOPHER_UNKNOWN_ATTRIBUTE_TYPE Unknown;};
struct IOleInPlaceSiteWindowlessVtbl {HRESULT ( *QueryInterface)(IOleInPlaceSiteWindowless *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceSiteWindowless *This);ULONG ( *Release)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindow)(IOleInPlaceSiteWindowless *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceSiteWindowless *This, BOOL fEnterMode);HRESULT ( *CanInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnInPlaceActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetWindowContext)(IOleInPlaceSiteWindowless *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *Scroll)(IOleInPlaceSiteWindowless *This, SIZE scrollExtant);HRESULT ( *OnUIDeactivate)(IOleInPlaceSiteWindowless *This, BOOL fUndoable);HRESULT ( *OnInPlaceDeactivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *DiscardUndoState)(IOleInPlaceSiteWindowless *This);HRESULT ( *DeactivateAndUndo)(IOleInPlaceSiteWindowless *This);HRESULT ( *OnPosRectChange)(IOleInPlaceSiteWindowless *This, LPCRECT lprcPosRect);HRESULT ( *OnInPlaceActivateEx)(IOleInPlaceSiteWindowless *This, BOOL *pfNoRedraw, DWORD dwFlags);HRESULT ( *OnInPlaceDeactivateEx)(IOleInPlaceSiteWindowless *This, BOOL fNoRedraw);HRESULT ( *RequestUIActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *CanWindowlessActivate)(IOleInPlaceSiteWindowless *This);HRESULT ( *GetCapture)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetCapture)(IOleInPlaceSiteWindowless *This, BOOL fCapture);HRESULT ( *GetFocus)(IOleInPlaceSiteWindowless *This);HRESULT ( *SetFocus)(IOleInPlaceSiteWindowless *This, BOOL fFocus);HRESULT ( *GetDC)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, DWORD grfFlags, HDC *phDC);HRESULT ( *ReleaseDC)(IOleInPlaceSiteWindowless *This, HDC hDC);HRESULT ( *InvalidateRect)(IOleInPlaceSiteWindowless *This, LPCRECT pRect, BOOL fErase);HRESULT ( *InvalidateRgn)(IOleInPlaceSiteWindowless *This, HRGN hRGN, BOOL fErase);HRESULT ( *ScrollRect)(IOleInPlaceSiteWindowless *This, INT dx, INT dy, LPCRECT pRectScroll, LPCRECT pRectClip);HRESULT ( *AdjustRect)(IOleInPlaceSiteWindowless *This, LPRECT prc);HRESULT ( *OnDefWindowMessage)(IOleInPlaceSiteWindowless *This, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT *plResult);};
struct IASQLOLEApplicationVtbl {HRESULT ( *QueryInterface)(IASQLOLEApplication *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEApplication *This);ULONG ( *Release)(IASQLOLEApplication *This);HRESULT ( *GetApplication)(IASQLOLEApplication *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEApplication *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEApplication *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEApplication *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEApplication *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEApplication *This, LPBSTRA pbstrName);HRESULT ( *GetFullName)(IASQLOLEApplication *This, LPBSTRA pbstrName);HRESULT ( *GetDBLibraryVersionString)(IASQLOLEApplication *This, LPBSTRA pbstrVersion);HRESULT ( *GetVersionMajor)(IASQLOLEApplication *This, LPLONG pRetVal);HRESULT ( *GetVersionMinor)(IASQLOLEApplication *This, LPLONG pRetVal);HRESULT ( *GetSQLServers)(IASQLOLEApplication *This, LPASQLOLESERVERS *pServers);HRESULT ( *GetSQLServerByName)(IASQLOLEApplication *This, LPCSTR szName, LPASQLOLESERVER *ppSQLServer);HRESULT ( *GetSQLServerByOrd)(IASQLOLEApplication *This, int lOrdinal, LPASQLOLESERVER *ppSQLServer);HRESULT ( *RemoveSQLServerByName)(IASQLOLEApplication *This, LPCSTR szName);HRESULT ( *RemoveSQLServerByOrd)(IASQLOLEApplication *This, int lOrdinal);HRESULT ( *AddSQLServer)(IASQLOLEApplication *This, LPASQLOLESERVER pSQLServer);HRESULT ( *GetSQLServerCount)(IASQLOLEApplication *This, LPLONG plCount);HRESULT ( *Quit)(IASQLOLEApplication *This);HRESULT ( *GetGroupRegistrationServer)(IASQLOLEApplication *This, LPBSTRA pbstrVersion);HRESULT ( *SetGroupRegistrationServer)(IASQLOLEApplication *This, LPCSTR pbstrVersion);HRESULT ( *GetGroupRegistrationVersion)(IASQLOLEApplication *This, LPLONG pRetVal);HRESULT ( *GetUseCurrentUserServerGroups)(IASQLOLEApplication *This, LPBOOL pRetVal);HRESULT ( *SetUseCurrentUserServerGroups)(IASQLOLEApplication *This, BOOL pRetVal);HRESULT ( *GetVersionBuild)(IASQLOLEApplication *This, LPLONG pRetVal);HRESULT ( *GetServerGroups)(IASQLOLEApplication *This, LPASQLOLESERVERGROUPS *ppServerGroups);HRESULT ( *GetServerGroupByName)(IASQLOLEApplication *This, LPCSTR szName, LPASQLOLESERVERGROUP *ppServerGroup);HRESULT ( *GetServerGroupByOrd)(IASQLOLEApplication *This, int lOrdinal, LPASQLOLESERVERGROUP *ppServerGroup);HRESULT ( *RemoveServerGroupByName)(IASQLOLEApplication *This, LPCSTR szName);HRESULT ( *RemoveServerGroupByOrd)(IASQLOLEApplication *This, int lOrdinal);HRESULT ( *AddServerGroup)(IASQLOLEApplication *This, LPASQLOLESERVERGROUP pServerGroup);HRESULT ( *GetServerGroupCount)(IASQLOLEApplication *This, LPLONG plCount);HRESULT ( *ListLocallyConfiguredSQLServers)(IASQLOLEApplication *This, LPASQLOLENAMELIST *ppServerNames);HRESULT ( *ListAnnouncedNetworkSQLServers)(IASQLOLEApplication *This, LPASQLOLENAMELIST *ppServerNames);};
struct IDirect3DRMTextureVtbl {HRESULT ( *QueryInterface)(IDirect3DRMTexture *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMTexture *This);ULONG ( *Release)(IDirect3DRMTexture *This);HRESULT ( *Clone)(IDirect3DRMTexture *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMTexture *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMTexture *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMTexture *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMTexture *This);HRESULT ( *SetName)(IDirect3DRMTexture *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMTexture *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMTexture *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *InitFromFile)(IDirect3DRMTexture *This,  char *filename);HRESULT ( *InitFromSurface)(IDirect3DRMTexture *This, LPDIRECTDRAWSURFACE lpDDS);HRESULT ( *InitFromResource)(IDirect3DRMTexture *This, HRSRC);HRESULT ( *Changed)(IDirect3DRMTexture *This, BOOL pixels, BOOL palette);HRESULT ( *SetColors)(IDirect3DRMTexture *This, DWORD);HRESULT ( *SetShades)(IDirect3DRMTexture *This, DWORD);HRESULT ( *SetDecalSize)(IDirect3DRMTexture *This, D3DVALUE width, D3DVALUE height);HRESULT ( *SetDecalOrigin)(IDirect3DRMTexture *This, LONG x, LONG y);HRESULT ( *SetDecalScale)(IDirect3DRMTexture *This, DWORD);HRESULT ( *SetDecalTransparency)(IDirect3DRMTexture *This, BOOL);HRESULT ( *SetDecalTransparentColor)(IDirect3DRMTexture *This, D3DCOLOR);HRESULT ( *GetDecalSize)(IDirect3DRMTexture *This, D3DVALUE *width_return, D3DVALUE *height_return);HRESULT ( *GetDecalOrigin)(IDirect3DRMTexture *This, LONG *x_return, LONG *y_return);D3DRMIMAGE *( *GetImage)(IDirect3DRMTexture *This);DWORD ( *GetShades)(IDirect3DRMTexture *This);DWORD ( *GetColors)(IDirect3DRMTexture *This);DWORD ( *GetDecalScale)(IDirect3DRMTexture *This);BOOL ( *GetDecalTransparency)(IDirect3DRMTexture *This);D3DCOLOR ( *GetDecalTransparentColor)(IDirect3DRMTexture *This);};
struct IDirect3DViewport2Vtbl {HRESULT ( *QueryInterface)(IDirect3DViewport2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DViewport2 *This);ULONG ( *Release)(IDirect3DViewport2 *This);HRESULT ( *Initialize)(IDirect3DViewport2 *This, LPDIRECT3D);HRESULT ( *GetViewport)(IDirect3DViewport2 *This, LPD3DVIEWPORT);HRESULT ( *SetViewport)(IDirect3DViewport2 *This, LPD3DVIEWPORT);HRESULT ( *TransformVertices)(IDirect3DViewport2 *This, DWORD, LPD3DTRANSFORMDATA, DWORD, LPDWORD);HRESULT ( *LightElements)(IDirect3DViewport2 *This, DWORD, LPD3DLIGHTDATA);HRESULT ( *SetBackground)(IDirect3DViewport2 *This, D3DMATERIALHANDLE);HRESULT ( *GetBackground)(IDirect3DViewport2 *This, LPD3DMATERIALHANDLE, LPBOOL);HRESULT ( *SetBackgroundDepth)(IDirect3DViewport2 *This, LPDIRECTDRAWSURFACE);HRESULT ( *GetBackgroundDepth)(IDirect3DViewport2 *This, LPDIRECTDRAWSURFACE *, LPBOOL);HRESULT ( *Clear)(IDirect3DViewport2 *This, DWORD, LPD3DRECT, DWORD);HRESULT ( *AddLight)(IDirect3DViewport2 *This, LPDIRECT3DLIGHT);HRESULT ( *DeleteLight)(IDirect3DViewport2 *This, LPDIRECT3DLIGHT);HRESULT ( *NextLight)(IDirect3DViewport2 *This, LPDIRECT3DLIGHT, LPDIRECT3DLIGHT *, DWORD);HRESULT ( *GetViewport2)(IDirect3DViewport2 *This, LPD3DVIEWPORT2);HRESULT ( *SetViewport2)(IDirect3DViewport2 *This, LPD3DVIEWPORT2);};
struct IASQLOLEExecutiveVtbl {HRESULT ( *QueryInterface)(IASQLOLEExecutive *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEExecutive *This);ULONG ( *Release)(IASQLOLEExecutive *This);HRESULT ( *GetApplication)(IASQLOLEExecutive *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEExecutive *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEExecutive *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEExecutive *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEExecutive *This, LPVOID lpvNewValue);HRESULT ( *GetStatus)(IASQLOLEExecutive *This, SQLOLE_SVCSTATUS_TYPE *pRetVal);HRESULT ( *GetAutoStart)(IASQLOLEExecutive *This, LPBOOL pRetVal);HRESULT ( *SetAutoStart)(IASQLOLEExecutive *This, BOOL NewValue);HRESULT ( *GetRestartSQLServer)(IASQLOLEExecutive *This, LPBOOL pRetVal);HRESULT ( *SetRestartSQLServer)(IASQLOLEExecutive *This, BOOL NewValue);HRESULT ( *GetRestartSQLServerInterval)(IASQLOLEExecutive *This, LPLONG pRetVal);HRESULT ( *SetRestartSQLServerInterval)(IASQLOLEExecutive *This, int NewValue);HRESULT ( *GetLimitHistoryRows)(IASQLOLEExecutive *This, LPBOOL pRetVal);HRESULT ( *SetLimitHistoryRows)(IASQLOLEExecutive *This, BOOL NewValue);HRESULT ( *GetLimitHistoryRowsMax)(IASQLOLEExecutive *This, LPLONG pRetVal);HRESULT ( *SetLimitHistoryRowsMax)(IASQLOLEExecutive *This, int NewValue);HRESULT ( *GetAlertSystem)(IASQLOLEExecutive *This, LPASQLOLEALERTSYSTEM *ppAlertSystem);HRESULT ( *GetTasks)(IASQLOLEExecutive *This, LPASQLOLETASKS *ppTasks);HRESULT ( *GetTaskByName)(IASQLOLEExecutive *This, LPCSTR szName, LPASQLOLETASK *ppTask);HRESULT ( *GetTaskByOrd)(IASQLOLEExecutive *This, int lOrdinal, LPASQLOLETASK *ppTask);HRESULT ( *RemoveTaskByName)(IASQLOLEExecutive *This, LPCSTR szName);HRESULT ( *RemoveTaskByOrd)(IASQLOLEExecutive *This, int lOrdinal);HRESULT ( *AddTask)(IASQLOLEExecutive *This, LPASQLOLETASK pTask);HRESULT ( *GetTaskCount)(IASQLOLEExecutive *This, LPLONG plCount);HRESULT ( *Stop)(IASQLOLEExecutive *This);HRESULT ( *Start)(IASQLOLEExecutive *This);HRESULT ( *EnumSubSystems)(IASQLOLEExecutive *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumQueuedTasks)(IASQLOLEExecutive *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *ReassignLoginTasks)(IASQLOLEExecutive *This, LPCSTR szOldLogin, LPCSTR szNewLogin);HRESULT ( *RemoveLoginTasks)(IASQLOLEExecutive *This, LPCSTR szLogin);HRESULT ( *Refresh)(IASQLOLEExecutive *This);HRESULT ( *BeginAlter)(IASQLOLEExecutive *This);HRESULT ( *DoAlter)(IASQLOLEExecutive *This);HRESULT ( *CancelAlter)(IASQLOLEExecutive *This);HRESULT ( *ListSubSystemTasks)(IASQLOLEExecutive *This, LPCSTR szSubSystem, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *GetLimitHistoryRowsPerTaskMax)(IASQLOLEExecutive *This, LPLONG pRetVal);HRESULT ( *SetLimitHistoryRowsPerTaskMax)(IASQLOLEExecutive *This, int NewValue);};
struct IASQLOLEDeviceVtbl {HRESULT ( *QueryInterface)(IASQLOLEDevice *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDevice *This);ULONG ( *Release)(IASQLOLEDevice *This);HRESULT ( *GetApplication)(IASQLOLEDevice *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDevice *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDevice *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDevice *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDevice *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEDevice *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLEDevice *This, LPCSTR NewValue);HRESULT ( *GetPhysicalLocation)(IASQLOLEDevice *This, LPBSTRA pRetVal);HRESULT ( *SetPhysicalLocation)(IASQLOLEDevice *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLEDevice *This, SQLOLE_DEVICE_TYPE *pRetVal);HRESULT ( *SetType)(IASQLOLEDevice *This, SQLOLE_DEVICE_TYPE NewValue);HRESULT ( *GetStatus)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *GetFirstPage)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *GetLastPage)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *GetSize)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *SetSize)(IASQLOLEDevice *This, int NewValue);HRESULT ( *GetSpaceAvailable)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *GetDeviceNumber)(IASQLOLEDevice *This, LPLONG pRetVal);HRESULT ( *GetMirrorState)(IASQLOLEDevice *This, SQLOLE_MIRROR_TYPE *pRetVal);HRESULT ( *GetMirrorName)(IASQLOLEDevice *This, LPBSTRA pRetVal);HRESULT ( *GetDefault)(IASQLOLEDevice *This, LPBOOL pRetVal);HRESULT ( *SetDefault)(IASQLOLEDevice *This, BOOL NewValue);HRESULT ( *GetSkipTapeLabel)(IASQLOLEDevice *This, LPBOOL pRetVal);HRESULT ( *SetSkipTapeLabel)(IASQLOLEDevice *This, BOOL NewValue);HRESULT ( *GetSystemObject)(IASQLOLEDevice *This, LPBOOL pRetVal);HRESULT ( *Mirror)(IASQLOLEDevice *This, LPCSTR MirrorPathName);HRESULT ( *ReMirror)(IASQLOLEDevice *This);HRESULT ( *SwitchToMirrorDevice)(IASQLOLEDevice *This);HRESULT ( *SwitchToMirrorTemp)(IASQLOLEDevice *This);HRESULT ( *UnMirrorDevice)(IASQLOLEDevice *This);HRESULT ( *UnMirrorTemp)(IASQLOLEDevice *This);HRESULT ( *Remove)(IASQLOLEDevice *This);HRESULT ( *ReadBackupHeader)(IASQLOLEDevice *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *ListDatabases)(IASQLOLEDevice *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *Script)(IASQLOLEDevice *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPCSTR NewPhysicalLocation, LPBSTRA ScriptText);};
struct IASQLOLEViewVtbl {HRESULT ( *QueryInterface)(IASQLOLEView *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEView *This);ULONG ( *Release)(IASQLOLEView *This);HRESULT ( *GetApplication)(IASQLOLEView *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEView *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEView *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEView *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEView *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEView *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEView *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEView *This, LPLONG plID);HRESULT ( *GetOwner)(IASQLOLEView *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLEView *This, LPBSTRA pRetVal);HRESULT ( *GetText)(IASQLOLEView *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLEView *This, LPCSTR NewValue);HRESULT ( *GetSystemObject)(IASQLOLEView *This, LPBOOL pRetVal);HRESULT ( *Grant)(IASQLOLEView *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR GranteeNames, LPCSTR ColumnNames);HRESULT ( *Revoke)(IASQLOLEView *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR RevokeeNames, LPCSTR ColumnNames);HRESULT ( *Remove)(IASQLOLEView *This);HRESULT ( *Script)(IASQLOLEView *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *EnumDependencies)(IASQLOLEView *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);HRESULT ( *ListPermissions)(IASQLOLEView *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListUserPermissions)(IASQLOLEView *This, LPCSTR UserName, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListColumns)(IASQLOLEView *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ExportData)(IASQLOLEView *This, LPASQLOLEBULKCOPY Bcp, LPLONG plRowsExported);};
struct srv_proc {WORD tdsversion;WORD status;SRV_IO srvio;SRV_LOGINREC login;void *langbuff;unsigned int langlen;unsigned int event;void *server;char *threadstack;THREAD threadID;HANDLE threadHDL;HANDLE iowakeup;HANDLE exited;DBINT rowsent;SRV_COLDESC *coldescp;DBUSMALLINT coldescno;BYTE *colnamep;WORD colnamelen;void *userdata;void *event_data;BYTE serverlen;BYTE *servername;BYTE rpc_active;BYTE rpc_server_len;BYTE *rpc_server;BYTE rpc_database_len;BYTE *rpc_database;BYTE rpc_owner_len;BYTE *rpc_owner;BYTE rpc_proc_len;BYTE *rpc_proc_name;unsigned int rpc_proc_number;unsigned int rpc_linenumber;unsigned short rpc_options;unsigned short rpc_num_params;SRV_RPCp **rpc_params;BYTE non_rpc_active;unsigned short non_rpc_num_params;SRV_RPCp **non_rpc_params;char temp_buffer[100];SRV_SUBCHANNEL **subprocs;TRANSLATION_INFO translation_info;struct srv_listentry IOListEntry;struct srv_listentry CommandListEntry;PSRV_LISTHEAD pNetListHead;BOOL bNewPacket;int StatusCrit;void *serverdata;SRV_SUBCHANNEL *subchannel;SRV_PEVENTS *pre_events;SRV_PEVENTS *post_events;void *p_langbuff;BOOL fSecureLogin;BOOL fInExtendedProc;unsigned int fLocalPost : 1;unsigned int fMadeBoundCall : 1;unsigned int uFill1 : 30;SRV_COMPORT_QUEUE comport_queue;void *pSF1;void *pSF2;HANDLE hPreHandlerMutex;HANDLE hPostHandlerMutex;BOOL bSAxp;};
struct IASQLOLEStoredProcedureVtbl {HRESULT ( *QueryInterface)(IASQLOLEStoredProcedure *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEStoredProcedure *This);ULONG ( *Release)(IASQLOLEStoredProcedure *This);HRESULT ( *GetApplication)(IASQLOLEStoredProcedure *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEStoredProcedure *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEStoredProcedure *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEStoredProcedure *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEStoredProcedure *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEStoredProcedure *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEStoredProcedure *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLEStoredProcedure *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLEStoredProcedure *This, LPBSTRA pRetVal);HRESULT ( *GetID)(IASQLOLEStoredProcedure *This, LPLONG pRetVal);HRESULT ( *GetText)(IASQLOLEStoredProcedure *This, LPBSTRA pRetVal);HRESULT ( *SetText)(IASQLOLEStoredProcedure *This, LPCSTR NewValue);HRESULT ( *GetType)(IASQLOLEStoredProcedure *This, SQLOLE_PROCEDURE_TYPE *pRetVal);HRESULT ( *SetType)(IASQLOLEStoredProcedure *This, SQLOLE_PROCEDURE_TYPE NewValue);HRESULT ( *GetStartup)(IASQLOLEStoredProcedure *This, LPBOOL pRetVal);HRESULT ( *SetStartup)(IASQLOLEStoredProcedure *This, BOOL NewValue);HRESULT ( *GetSystemObject)(IASQLOLEStoredProcedure *This, LPBOOL pRetVal);HRESULT ( *Grant)(IASQLOLEStoredProcedure *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR GranteeNames);HRESULT ( *Revoke)(IASQLOLEStoredProcedure *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR RevokeeNames);HRESULT ( *Remove)(IASQLOLEStoredProcedure *This);HRESULT ( *EnumParameters)(IASQLOLEStoredProcedure *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *Script)(IASQLOLEStoredProcedure *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *EnumDependencies)(IASQLOLEStoredProcedure *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);HRESULT ( *ListPermissions)(IASQLOLEStoredProcedure *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListUserPermissions)(IASQLOLEStoredProcedure *This, LPCSTR UserName, LPASQLOLEOBJECTLIST *ppList);};
struct IASQLOLERemoteServerVtbl {HRESULT ( *QueryInterface)(IASQLOLERemoteServer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLERemoteServer *This);ULONG ( *Release)(IASQLOLERemoteServer *This);HRESULT ( *GetApplication)(IASQLOLERemoteServer *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLERemoteServer *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLERemoteServer *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLERemoteServer *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLERemoteServer *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLERemoteServer *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLERemoteServer *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLERemoteServer *This, LPLONG pRetVal);HRESULT ( *GetNetName)(IASQLOLERemoteServer *This, LPBSTRA pRetVal);HRESULT ( *SetNetName)(IASQLOLERemoteServer *This, LPCSTR NewValue);HRESULT ( *GetOptions)(IASQLOLERemoteServer *This, SQLOLE_SRVOPTION_TYPE *pRetVal);HRESULT ( *GetTopologyX)(IASQLOLERemoteServer *This, LPLONG pRetVal);HRESULT ( *GetTopologyY)(IASQLOLERemoteServer *This, LPLONG pRetVal);HRESULT ( *GetSubscriberInfo)(IASQLOLERemoteServer *This, LPASQLOLESUBSCRIBERINFO *ppSubscriberInfo);HRESULT ( *GetRemoteLogins)(IASQLOLERemoteServer *This, LPASQLOLEREMOTELOGINS *ppRemoteLogins);HRESULT ( *GetRemoteLoginByName)(IASQLOLERemoteServer *This, LPCSTR szName, LPASQLOLEREMOTELOGIN *ppRemoteLogin);HRESULT ( *GetRemoteLoginByOrd)(IASQLOLERemoteServer *This, int lOrdinal, LPASQLOLEREMOTELOGIN *ppRemoteLogin);HRESULT ( *RemoveRemoteLoginByName)(IASQLOLERemoteServer *This, LPCSTR szName);HRESULT ( *RemoveRemoteLoginByOrd)(IASQLOLERemoteServer *This, int lOrdinal);HRESULT ( *AddRemoteLogin)(IASQLOLERemoteServer *This, LPASQLOLEREMOTELOGIN pRemoteLogin);HRESULT ( *GetRemoteLoginCount)(IASQLOLERemoteServer *This, LPLONG plCount);HRESULT ( *Remove)(IASQLOLERemoteServer *This);HRESULT ( *EnumPublicationDatabases)(IASQLOLERemoteServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumSubscriptionDatabases)(IASQLOLERemoteServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumPublications)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumArticles)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPCSTR PublicationName, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumSubscriptions)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPCSTR PublicationName, LPCSTR ArticleName, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *ExecuteImmediate)(IASQLOLERemoteServer *This, LPCSTR Command);HRESULT ( *ExecuteWithResults)(IASQLOLERemoteServer *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *Subscribe)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPCSTR PublicationName, LPCSTR ArticleName, LPCSTR SubscribingDB, SQLOLE_SUBSYNC_TYPE SyncType);HRESULT ( *UnSubscribe)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPCSTR PublicationName, LPCSTR ArticleName);HRESULT ( *SetOptions)(IASQLOLERemoteServer *This, SQLOLE_SRVOPTION_TYPE Options, BOOL NewValue);HRESULT ( *EnumTasks)(IASQLOLERemoteServer *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR TaskName, int TaskID);HRESULT ( *SetTopologyXY)(IASQLOLERemoteServer *This, int X, int Y);HRESULT ( *EnumPublicationSyncTask)(IASQLOLERemoteServer *This, LPCSTR DatabaseName, LPCSTR PublicationName, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *ExecuteWithResultsAndMessages)(IASQLOLERemoteServer *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults, LPBSTRA ppszMessages);};
struct IDirectInputDeviceAVtbl {HRESULT ( *QueryInterface)(IDirectInputDeviceA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputDeviceA *This);ULONG ( *Release)(IDirectInputDeviceA *This);HRESULT ( *GetCapabilities)(IDirectInputDeviceA *This, LPDIDEVCAPS);HRESULT ( *EnumObjects)(IDirectInputDeviceA *This, LPDIENUMDEVICEOBJECTSCALLBACKA, LPVOID, DWORD);HRESULT ( *GetProperty)(IDirectInputDeviceA *This,  GUID *, LPDIPROPHEADER);HRESULT ( *SetProperty)(IDirectInputDeviceA *This,  GUID *, LPCDIPROPHEADER);HRESULT ( *Acquire)(IDirectInputDeviceA *This);HRESULT ( *Unacquire)(IDirectInputDeviceA *This);HRESULT ( *GetDeviceState)(IDirectInputDeviceA *This, DWORD, LPVOID);HRESULT ( *GetDeviceData)(IDirectInputDeviceA *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);HRESULT ( *SetDataFormat)(IDirectInputDeviceA *This, LPCDIDATAFORMAT);HRESULT ( *SetEventNotification)(IDirectInputDeviceA *This, HANDLE);HRESULT ( *SetCooperativeLevel)(IDirectInputDeviceA *This, HWND, DWORD);HRESULT ( *GetObjectInfo)(IDirectInputDeviceA *This, LPDIDEVICEOBJECTINSTANCEA, DWORD, DWORD);HRESULT ( *GetDeviceInfo)(IDirectInputDeviceA *This, LPDIDEVICEINSTANCEA);HRESULT ( *RunControlPanel)(IDirectInputDeviceA *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputDeviceA *This, HINSTANCE, DWORD,  GUID *);};
struct IDirectInputDeviceWVtbl {HRESULT ( *QueryInterface)(IDirectInputDeviceW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputDeviceW *This);ULONG ( *Release)(IDirectInputDeviceW *This);HRESULT ( *GetCapabilities)(IDirectInputDeviceW *This, LPDIDEVCAPS);HRESULT ( *EnumObjects)(IDirectInputDeviceW *This, LPDIENUMDEVICEOBJECTSCALLBACKW, LPVOID, DWORD);HRESULT ( *GetProperty)(IDirectInputDeviceW *This,  GUID *, LPDIPROPHEADER);HRESULT ( *SetProperty)(IDirectInputDeviceW *This,  GUID *, LPCDIPROPHEADER);HRESULT ( *Acquire)(IDirectInputDeviceW *This);HRESULT ( *Unacquire)(IDirectInputDeviceW *This);HRESULT ( *GetDeviceState)(IDirectInputDeviceW *This, DWORD, LPVOID);HRESULT ( *GetDeviceData)(IDirectInputDeviceW *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);HRESULT ( *SetDataFormat)(IDirectInputDeviceW *This, LPCDIDATAFORMAT);HRESULT ( *SetEventNotification)(IDirectInputDeviceW *This, HANDLE);HRESULT ( *SetCooperativeLevel)(IDirectInputDeviceW *This, HWND, DWORD);HRESULT ( *GetObjectInfo)(IDirectInputDeviceW *This, LPDIDEVICEOBJECTINSTANCEW, DWORD, DWORD);HRESULT ( *GetDeviceInfo)(IDirectInputDeviceW *This, LPDIDEVICEINSTANCEW);HRESULT ( *RunControlPanel)(IDirectInputDeviceW *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputDeviceW *This, HINSTANCE, DWORD,  GUID *);};
struct IASQLOLEArticleVtbl {HRESULT ( *QueryInterface)(IASQLOLEArticle *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEArticle *This);ULONG ( *Release)(IASQLOLEArticle *This);HRESULT ( *GetApplication)(IASQLOLEArticle *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEArticle *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEArticle *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEArticle *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEArticle *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEArticle *This, LPLONG pRetVal);HRESULT ( *GetTableName)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetTableName)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetDescription)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetDescription)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetReplicateAllColumns)(IASQLOLEArticle *This, LPBOOL pRetVal);HRESULT ( *GetInitialSyncObjectName)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetInitialSyncObjectName)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetReplicationType)(IASQLOLEArticle *This, SQLOLE_REPLICATION_TYPE *pRetVal);HRESULT ( *SetReplicationType)(IASQLOLEArticle *This, SQLOLE_REPLICATION_TYPE NewValue);HRESULT ( *GetInsertCommand)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetInsertCommand)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetUpdateCommand)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetUpdateCommand)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetDeleteCommand)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetDeleteCommand)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetReplicationFilterProcName)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetReplicationFilterProcName)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetCreationScriptPath)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetCreationScriptPath)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetDestinationTableName)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetDestinationTableName)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetPreCreationMethod)(IASQLOLEArticle *This, SQLOLE_PREARTICLE_TYPE *pRetVal);HRESULT ( *SetPreCreationMethod)(IASQLOLEArticle *This, SQLOLE_PREARTICLE_TYPE NewValue);HRESULT ( *GetFilterClause)(IASQLOLEArticle *This, LPBSTRA pRetVal);HRESULT ( *SetFilterClause)(IASQLOLEArticle *This, LPCSTR NewValue);HRESULT ( *GetSubscriptions)(IASQLOLEArticle *This, LPASQLOLESUBSCRIPTIONS *ppSubscriptions);HRESULT ( *GetSubscriptionByName)(IASQLOLEArticle *This, LPCSTR szName, LPASQLOLESUBSCRIPTION *ppSubscription);HRESULT ( *GetSubscriptionByOrd)(IASQLOLEArticle *This, int lOrdinal, LPASQLOLESUBSCRIPTION *ppSubscription);HRESULT ( *RemoveSubscriptionByName)(IASQLOLEArticle *This, LPCSTR szName);HRESULT ( *RemoveSubscriptionByOrd)(IASQLOLEArticle *This, int lOrdinal);HRESULT ( *AddSubscription)(IASQLOLEArticle *This, LPASQLOLESUBSCRIPTION pSubscription);HRESULT ( *GetSubscriptionCount)(IASQLOLEArticle *This, LPLONG plCount);HRESULT ( *Remove)(IASQLOLEArticle *This);HRESULT ( *ListReplicatedColumns)(IASQLOLEArticle *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *AddReplicatedColumns)(IASQLOLEArticle *This, LPCSTR Columns);HRESULT ( *RemoveReplicatedColumns)(IASQLOLEArticle *This, LPCSTR Columns);HRESULT ( *BeginAlter)(IASQLOLEArticle *This);HRESULT ( *DoAlter)(IASQLOLEArticle *This);HRESULT ( *CancelAlter)(IASQLOLEArticle *This);HRESULT ( *ScriptDestinationTable)(IASQLOLEArticle *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *GetOwnerQualifyTable)(IASQLOLEArticle *This, LPBOOL pRetVal);HRESULT ( *SetOwnerQualifyTable)(IASQLOLEArticle *This, BOOL NewValue);HRESULT ( *GetIncludeInsertColumnNames)(IASQLOLEArticle *This, LPBOOL pRetVal);HRESULT ( *SetIncludeInsertColumnNames)(IASQLOLEArticle *This, BOOL NewValue);};
struct IDirectDrawVtbl {HRESULT ( *QueryInterface)(IDirectDraw *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw *This);ULONG ( *Release)(IDirectDraw *This);HRESULT ( *Compact)(IDirectDraw *This);HRESULT ( *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw *This);HRESULT ( *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw *This, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);};
struct IShellView2Vtbl {HRESULT ( *QueryInterface)(IShellView2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellView2 *This);ULONG ( *Release)(IShellView2 *This);HRESULT ( *GetWindow)(IShellView2 *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IShellView2 *This, BOOL fEnterMode);HRESULT ( *TranslateAcceleratorA)(IShellView2 *This, LPMSG lpmsg);HRESULT ( *EnableModeless)(IShellView2 *This, BOOL fEnable);HRESULT ( *UIActivate)(IShellView2 *This, UINT uState);HRESULT ( *Refresh)(IShellView2 *This);HRESULT ( *CreateViewWindow)(IShellView2 *This, IShellView *lpPrevView, LPCFOLDERSETTINGS lpfs, IShellBrowser *psb, RECT *prcView, HWND *phWnd);HRESULT ( *DestroyViewWindow)(IShellView2 *This);HRESULT ( *GetCurrentInfo)(IShellView2 *This, LPFOLDERSETTINGS lpfs);HRESULT ( *AddPropertySheetPages)(IShellView2 *This, DWORD dwReserved, LPFNADDPROPSHEETPAGE lpfn, LPARAM lparam);HRESULT ( *SaveViewState)(IShellView2 *This);HRESULT ( *SelectItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, UINT uFlags);HRESULT ( *GetItemObject)(IShellView2 *This, UINT uItem,  IID * riid, LPVOID *ppv);HRESULT ( *GetView)(IShellView2 *This, SHELLVIEWID *pvid, ULONG uView);HRESULT ( *CreateViewWindow2)(IShellView2 *This, LPSV2CVW2_PARAMS lpParams);HRESULT ( *HandleRename)(IShellView2 *This, LPCITEMIDLIST pidlNew);HRESULT ( *SelectAndPositionItem)(IShellView2 *This, LPCITEMIDLIST pidlItem, UINT uFlags, POINT *point);};
union _wireVARIANT___97E5681EB831466912C1B906D2CF69C6 {LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;wireBSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;wireSAFEARRAY parray;wireBRECORD brecVal;BYTE *pbVal;SHORT *piVal;LONG *plVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;wireBSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;wireSAFEARRAY *pparray;wireVARIANT *pvarVal;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL decVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;};
struct IDirect3DRMMeshVtbl {HRESULT ( *QueryInterface)(IDirect3DRMMesh *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMMesh *This);ULONG ( *Release)(IDirect3DRMMesh *This);HRESULT ( *Clone)(IDirect3DRMMesh *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMMesh *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMMesh *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMMesh *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMMesh *This);HRESULT ( *SetName)(IDirect3DRMMesh *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMMesh *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMMesh *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Scale)(IDirect3DRMMesh *This, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz);HRESULT ( *Translate)(IDirect3DRMMesh *This, D3DVALUE tx, D3DVALUE ty, D3DVALUE tz);HRESULT ( *GetBox)(IDirect3DRMMesh *This, D3DRMBOX *);HRESULT ( *AddGroup)(IDirect3DRMMesh *This, unsigned int vCount, unsigned int fCount, unsigned int vPerFace, unsigned int *fData, D3DRMGROUPINDEX *returnId);HRESULT ( *SetVertices)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, unsigned int index, unsigned int count, D3DRMVERTEX *values);HRESULT ( *SetGroupColor)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, D3DCOLOR value);HRESULT ( *SetGroupColorRGB)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetGroupMapping)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, D3DRMMAPPING value);HRESULT ( *SetGroupQuality)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, D3DRMRENDERQUALITY value);HRESULT ( *SetGroupMaterial)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, LPDIRECT3DRMMATERIAL value);HRESULT ( *SetGroupTexture)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, LPDIRECT3DRMTEXTURE value);unsigned int ( *GetGroupCount)(IDirect3DRMMesh *This);HRESULT ( *GetGroup)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, unsigned int *vCount, unsigned int *fCount, unsigned int *vPerFace, DWORD *fDataSize, unsigned int *fData);HRESULT ( *GetVertices)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, DWORD index, DWORD count, D3DRMVERTEX *returnPtr);D3DCOLOR ( *GetGroupColor)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id);D3DRMMAPPING ( *GetGroupMapping)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id);D3DRMRENDERQUALITY ( *GetGroupQuality)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id);HRESULT ( *GetGroupMaterial)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, LPDIRECT3DRMMATERIAL *returnPtr);HRESULT ( *GetGroupTexture)(IDirect3DRMMesh *This, D3DRMGROUPINDEX id, LPDIRECT3DRMTEXTURE *returnPtr);};
struct IASQLOLETaskVtbl {HRESULT ( *QueryInterface)(IASQLOLETask *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETask *This);ULONG ( *Release)(IASQLOLETask *This);HRESULT ( *GetApplication)(IASQLOLETask *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETask *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETask *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETask *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETask *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetSubSystem)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetSubSystem)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *GetEnabled)(IASQLOLETask *This, LPBOOL pRetVal);HRESULT ( *SetEnabled)(IASQLOLETask *This, BOOL NewValue);HRESULT ( *GetDatabase)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetDatabase)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetUser)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetUser)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetFrequencyType)(IASQLOLETask *This, SQLOLE_FREQUENCY_TYPE *pRetVal);HRESULT ( *SetFrequencyType)(IASQLOLETask *This, SQLOLE_FREQUENCY_TYPE NewValue);HRESULT ( *GetFrequencyInterval)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetFrequencyInterval)(IASQLOLETask *This, int NewValue);HRESULT ( *GetFrequencyRelativeInterval)(IASQLOLETask *This, SQLOLE_FREQRELATIVE_TYPE *pRetVal);HRESULT ( *SetFrequencyRelativeInterval)(IASQLOLETask *This, SQLOLE_FREQRELATIVE_TYPE NewValue);HRESULT ( *GetFrequencyRecurrenceFactor)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetFrequencyRecurrenceFactor)(IASQLOLETask *This, int NewValue);HRESULT ( *GetActiveStartDate)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetActiveStartDate)(IASQLOLETask *This, int NewValue);HRESULT ( *GetActiveEndDate)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetActiveEndDate)(IASQLOLETask *This, int NewValue);HRESULT ( *GetActiveStartTimeOfDay)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetActiveStartTimeOfDay)(IASQLOLETask *This, int NewValue);HRESULT ( *GetActiveEndTimeOfDay)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetActiveEndTimeOfDay)(IASQLOLETask *This, int NewValue);HRESULT ( *GetNextRunDate)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetNextRunTime)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetLastRunDate)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetLastRunTime)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetRunPriority)(IASQLOLETask *This, SQLOLE_RUNPRIORITY_TYPE *pRetVal);HRESULT ( *SetRunPriority)(IASQLOLETask *This, SQLOLE_RUNPRIORITY_TYPE NewValue);HRESULT ( *GetEmailOperator)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetEmailOperator)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetRetryAttempts)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetRetryAttempts)(IASQLOLETask *This, int NewValue);HRESULT ( *GetRetryDelay)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetRetryDelay)(IASQLOLETask *This, int NewValue);HRESULT ( *GetLastRunRetries)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetDateCreated)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *GetDateModified)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *GetCommand)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetCommand)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetLastRunCompletionLevel)(IASQLOLETask *This, SQLOLE_COMPLETION_TYPE *pRetVal);HRESULT ( *GetLastRunDuration)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *GetLogHistoryCompletionLevel)(IASQLOLETask *This, SQLOLE_COMPLETION_TYPE *pRetVal);HRESULT ( *SetLogHistoryCompletionLevel)(IASQLOLETask *This, SQLOLE_COMPLETION_TYPE NewValue);HRESULT ( *GetEmailCompletionLevel)(IASQLOLETask *This, SQLOLE_COMPLETION_TYPE *pRetVal);HRESULT ( *SetEmailCompletionLevel)(IASQLOLETask *This, SQLOLE_COMPLETION_TYPE NewValue);HRESULT ( *GetTargetSQLServer)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetTargetSQLServer)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetDescription)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetDescription)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetFrequencySubDay)(IASQLOLETask *This, SQLOLE_FREQSUB_TYPE *pRetVal);HRESULT ( *SetFrequencySubDay)(IASQLOLETask *This, SQLOLE_FREQSUB_TYPE NewValue);HRESULT ( *GetFrequencySubDayInterval)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetFrequencySubDayInterval)(IASQLOLETask *This, int NewValue);HRESULT ( *GetTagAdditionalInfo)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetTagAdditionalInfo)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetTagObjectID)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetTagObjectID)(IASQLOLETask *This, int NewValue);HRESULT ( *GetTagObjectType)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetTagObjectType)(IASQLOLETask *This, int NewValue);HRESULT ( *EnumHistory)(IASQLOLETask *This, LPASQLOLEQUERYRESULTS *ppResults, LPASQLOLEHISTORYFILTER pFilter);HRESULT ( *PurgeHistory)(IASQLOLETask *This, LPASQLOLEHISTORYFILTER pFilter);HRESULT ( *Invoke)(IASQLOLETask *This);HRESULT ( *Remove)(IASQLOLETask *This);HRESULT ( *BeginAlter)(IASQLOLETask *This);HRESULT ( *DoAlter)(IASQLOLETask *This);HRESULT ( *CancelAlter)(IASQLOLETask *This);HRESULT ( *Refresh)(IASQLOLETask *This);HRESULT ( *Reassign)(IASQLOLETask *This, LPCSTR szNewLogin);HRESULT ( *GetParameters)(IASQLOLETask *This, LPBSTRA pRetVal);HRESULT ( *SetParameters)(IASQLOLETask *This, LPCSTR NewValue);HRESULT ( *GetCmdExecSuccessCode)(IASQLOLETask *This, LPLONG pRetVal);HRESULT ( *SetCmdExecSuccessCode)(IASQLOLETask *This, int NewValue);};
struct IDirectDraw2Vtbl {HRESULT ( *QueryInterface)(IDirectDraw2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw2 *This);ULONG ( *Release)(IDirectDraw2 *This);HRESULT ( *Compact)(IDirectDraw2 *This);HRESULT ( *CreateClipper)(IDirectDraw2 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw2 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw2 *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw2 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw2 *This);HRESULT ( *GetCaps)(IDirectDraw2 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw2 *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw2 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw2 *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw2 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw2 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw2 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw2 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw2 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw2 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw2 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw2 *This, LPDDSCAPS, LPDWORD, LPDWORD);};
struct IDirect3DRMProgressiveMeshVtbl {HRESULT ( *QueryInterface)(IDirect3DRMProgressiveMesh *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMProgressiveMesh *This);ULONG ( *Release)(IDirect3DRMProgressiveMesh *This);HRESULT ( *Clone)(IDirect3DRMProgressiveMesh *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMProgressiveMesh *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMProgressiveMesh *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMProgressiveMesh *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMProgressiveMesh *This);HRESULT ( *SetName)(IDirect3DRMProgressiveMesh *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Load)(IDirect3DRMProgressiveMesh *This, LPVOID lpObjLocation, LPVOID lpObjId, D3DRMLOADOPTIONS dloLoadflags, D3DRMLOADTEXTURECALLBACK lpCallback, LPVOID lpArg);HRESULT ( *GetLoadStatus)(IDirect3DRMProgressiveMesh *This, LPD3DRMPMESHLOADSTATUS lpStatus);HRESULT ( *SetMinRenderDetail)(IDirect3DRMProgressiveMesh *This, D3DVALUE d3dVal);HRESULT ( *Abort)(IDirect3DRMProgressiveMesh *This, DWORD dwFlags);HRESULT ( *GetFaceDetail)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwCount);HRESULT ( *GetVertexDetail)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwCount);HRESULT ( *SetFaceDetail)(IDirect3DRMProgressiveMesh *This, DWORD dwCount);HRESULT ( *SetVertexDetail)(IDirect3DRMProgressiveMesh *This, DWORD dwCount);HRESULT ( *GetFaceDetailRange)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwMin, LPDWORD lpdwMax);HRESULT ( *GetVertexDetailRange)(IDirect3DRMProgressiveMesh *This, LPDWORD lpdwMin, LPDWORD lpdwMax);HRESULT ( *GetDetail)(IDirect3DRMProgressiveMesh *This, D3DVALUE *lpdvVal);HRESULT ( *SetDetail)(IDirect3DRMProgressiveMesh *This, D3DVALUE d3dVal);HRESULT ( *RegisterEvents)(IDirect3DRMProgressiveMesh *This, HANDLE hEvent, DWORD dwFlags, DWORD dwReserved);HRESULT ( *CreateMesh)(IDirect3DRMProgressiveMesh *This, LPDIRECT3DRMMESH *lplpD3DRMMesh);HRESULT ( *Duplicate)(IDirect3DRMProgressiveMesh *This, LPDIRECT3DRMPROGRESSIVEMESH *lplpD3DRMPMesh);HRESULT ( *GetBox)(IDirect3DRMProgressiveMesh *This, LPD3DRMBOX lpBBox);HRESULT ( *SetQuality)(IDirect3DRMProgressiveMesh *This, D3DRMRENDERQUALITY);HRESULT ( *GetQuality)(IDirect3DRMProgressiveMesh *This, LPD3DRMRENDERQUALITY lpdwquality);};
struct IASQLOLEPublicationVtbl {HRESULT ( *QueryInterface)(IASQLOLEPublication *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEPublication *This);ULONG ( *Release)(IASQLOLEPublication *This);HRESULT ( *GetApplication)(IASQLOLEPublication *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEPublication *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEPublication *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEPublication *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEPublication *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEPublication *This, LPBSTRA pRetVal);HRESULT ( *SetName)(IASQLOLEPublication *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLEPublication *This, LPLONG pRetVal);HRESULT ( *GetDescription)(IASQLOLEPublication *This, LPBSTRA pRetVal);HRESULT ( *SetDescription)(IASQLOLEPublication *This, LPCSTR NewValue);HRESULT ( *GetEnabled)(IASQLOLEPublication *This, LPBOOL pRetVal);HRESULT ( *SetEnabled)(IASQLOLEPublication *This, BOOL NewValue);HRESULT ( *GetInitialSyncTask)(IASQLOLEPublication *This, LPASQLOLETASK *ppTask);HRESULT ( *GetInitialSyncMethod)(IASQLOLEPublication *This, SQLOLE_INITIALSYNC_TYPE *pRetVal);HRESULT ( *SetInitialSyncMethod)(IASQLOLEPublication *This, SQLOLE_INITIALSYNC_TYPE NewValue);HRESULT ( *GetReplicationFrequency)(IASQLOLEPublication *This, SQLOLE_REPFREQ_TYPE *pRetVal);HRESULT ( *SetReplicationFrequency)(IASQLOLEPublication *This, SQLOLE_REPFREQ_TYPE NewValue);HRESULT ( *GetRestricted)(IASQLOLEPublication *This, LPBOOL pRetVal);HRESULT ( *SetRestricted)(IASQLOLEPublication *This, BOOL NewValue);HRESULT ( *GetArticles)(IASQLOLEPublication *This, LPASQLOLEARTICLES *ppArticles);HRESULT ( *GetArticleByName)(IASQLOLEPublication *This, LPCSTR szName, LPASQLOLEARTICLE *ppArticle);HRESULT ( *GetArticleByOrd)(IASQLOLEPublication *This, int lOrdinal, LPASQLOLEARTICLE *ppArticle);HRESULT ( *RemoveArticleByName)(IASQLOLEPublication *This, LPCSTR szName);HRESULT ( *RemoveArticleByOrd)(IASQLOLEPublication *This, int lOrdinal);HRESULT ( *AddArticle)(IASQLOLEPublication *This, LPASQLOLEARTICLE pArticle);HRESULT ( *GetArticleCount)(IASQLOLEPublication *This, LPLONG plCount);HRESULT ( *Remove)(IASQLOLEPublication *This);HRESULT ( *EnumFullSubscribers)(IASQLOLEPublication *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *BeginAlter)(IASQLOLEPublication *This);HRESULT ( *DoAlter)(IASQLOLEPublication *This);HRESULT ( *CancelAlter)(IASQLOLEPublication *This);HRESULT ( *AddFullSubscriber)(IASQLOLEPublication *This, LPCSTR ServerName, LPCSTR DestinationDatabase, SQLOLE_SUBSYNC_TYPE InitialSyncType, SQLOLE_SUBSTATUS_TYPE Status);HRESULT ( *RemoveFullSubscriber)(IASQLOLEPublication *This, LPCSTR ServerName);};
struct IDirect3DRMViewportVtbl {HRESULT ( *QueryInterface)(IDirect3DRMViewport *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMViewport *This);ULONG ( *Release)(IDirect3DRMViewport *This);HRESULT ( *Clone)(IDirect3DRMViewport *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMViewport *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMViewport *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMViewport *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMViewport *This);HRESULT ( *SetName)(IDirect3DRMViewport *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMViewport *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMViewport *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMViewport *This, LPDIRECT3DRMDEVICE dev, LPDIRECT3DRMFRAME camera, DWORD xpos, DWORD ypos, DWORD width, DWORD height);HRESULT ( *Clear)(IDirect3DRMViewport *This);HRESULT ( *Render)(IDirect3DRMViewport *This, LPDIRECT3DRMFRAME);HRESULT ( *SetFront)(IDirect3DRMViewport *This, D3DVALUE);HRESULT ( *SetBack)(IDirect3DRMViewport *This, D3DVALUE);HRESULT ( *SetField)(IDirect3DRMViewport *This, D3DVALUE);HRESULT ( *SetUniformScaling)(IDirect3DRMViewport *This, BOOL);HRESULT ( *SetCamera)(IDirect3DRMViewport *This, LPDIRECT3DRMFRAME);HRESULT ( *SetProjection)(IDirect3DRMViewport *This, D3DRMPROJECTIONTYPE);HRESULT ( *Transform)(IDirect3DRMViewport *This, D3DRMVECTOR4D *d, D3DVECTOR *s);HRESULT ( *InverseTransform)(IDirect3DRMViewport *This, D3DVECTOR *d, D3DRMVECTOR4D *s);HRESULT ( *Configure)(IDirect3DRMViewport *This, LONG x, LONG y, DWORD width, DWORD height);HRESULT ( *ForceUpdate)(IDirect3DRMViewport *This, DWORD x1, DWORD y1, DWORD x2, DWORD y2);HRESULT ( *SetPlane)(IDirect3DRMViewport *This, D3DVALUE left, D3DVALUE right, D3DVALUE bottom, D3DVALUE top);HRESULT ( *GetCamera)(IDirect3DRMViewport *This, LPDIRECT3DRMFRAME *);HRESULT ( *GetDevice)(IDirect3DRMViewport *This, LPDIRECT3DRMDEVICE *);HRESULT ( *GetPlane)(IDirect3DRMViewport *This, D3DVALUE *left, D3DVALUE *right, D3DVALUE *bottom, D3DVALUE *top);HRESULT ( *Pick)(IDirect3DRMViewport *This, LONG x, LONG y, LPDIRECT3DRMPICKEDARRAY *return_visuals);BOOL ( *GetUniformScaling)(IDirect3DRMViewport *This);LONG ( *GetX)(IDirect3DRMViewport *This);LONG ( *GetY)(IDirect3DRMViewport *This);DWORD ( *GetWidth)(IDirect3DRMViewport *This);DWORD ( *GetHeight)(IDirect3DRMViewport *This);D3DVALUE ( *GetField)(IDirect3DRMViewport *This);D3DVALUE ( *GetBack)(IDirect3DRMViewport *This);D3DVALUE ( *GetFront)(IDirect3DRMViewport *This);D3DRMPROJECTIONTYPE ( *GetProjection)(IDirect3DRMViewport *This);HRESULT ( *GetDirect3DViewport)(IDirect3DRMViewport *This, LPDIRECT3DVIEWPORT *);};
struct IDirect3DRMDeviceVtbl {HRESULT ( *QueryInterface)(IDirect3DRMDevice *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMDevice *This);ULONG ( *Release)(IDirect3DRMDevice *This);HRESULT ( *Clone)(IDirect3DRMDevice *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMDevice *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMDevice *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMDevice *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMDevice *This);HRESULT ( *SetName)(IDirect3DRMDevice *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMDevice *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMDevice *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMDevice *This, ULONG width, ULONG height);HRESULT ( *InitFromD3D)(IDirect3DRMDevice *This, LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev);HRESULT ( *InitFromClipper)(IDirect3DRMDevice *This, LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height);HRESULT ( *Update)(IDirect3DRMDevice *This);HRESULT ( *AddUpdateCallback)(IDirect3DRMDevice *This, D3DRMUPDATECALLBACK, LPVOID arg);HRESULT ( *DeleteUpdateCallback)(IDirect3DRMDevice *This, D3DRMUPDATECALLBACK, LPVOID arg);HRESULT ( *SetBufferCount)(IDirect3DRMDevice *This, DWORD);DWORD ( *GetBufferCount)(IDirect3DRMDevice *This);HRESULT ( *SetDither)(IDirect3DRMDevice *This, BOOL);HRESULT ( *SetShades)(IDirect3DRMDevice *This, DWORD);HRESULT ( *SetQuality)(IDirect3DRMDevice *This, D3DRMRENDERQUALITY);HRESULT ( *SetTextureQuality)(IDirect3DRMDevice *This, D3DRMTEXTUREQUALITY);HRESULT ( *GetViewports)(IDirect3DRMDevice *This, LPDIRECT3DRMVIEWPORTARRAY *return_views);BOOL ( *GetDither)(IDirect3DRMDevice *This);DWORD ( *GetShades)(IDirect3DRMDevice *This);DWORD ( *GetHeight)(IDirect3DRMDevice *This);DWORD ( *GetWidth)(IDirect3DRMDevice *This);DWORD ( *GetTrianglesDrawn)(IDirect3DRMDevice *This);DWORD ( *GetWireframeOptions)(IDirect3DRMDevice *This);D3DRMRENDERQUALITY ( *GetQuality)(IDirect3DRMDevice *This);D3DCOLORMODEL ( *GetColorModel)(IDirect3DRMDevice *This);D3DRMTEXTUREQUALITY ( *GetTextureQuality)(IDirect3DRMDevice *This);HRESULT ( *GetDirect3DDevice)(IDirect3DRMDevice *This, LPDIRECT3DDEVICE *);};
struct IDirect3DDeviceVtbl {HRESULT ( *QueryInterface)(IDirect3DDevice *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DDevice *This);ULONG ( *Release)(IDirect3DDevice *This);HRESULT ( *Initialize)(IDirect3DDevice *This, LPDIRECT3D, LPGUID, LPD3DDEVICEDESC);HRESULT ( *GetCaps)(IDirect3DDevice *This, LPD3DDEVICEDESC, LPD3DDEVICEDESC);HRESULT ( *SwapTextureHandles)(IDirect3DDevice *This, LPDIRECT3DTEXTURE, LPDIRECT3DTEXTURE);HRESULT ( *CreateExecuteBuffer)(IDirect3DDevice *This, LPD3DEXECUTEBUFFERDESC, LPDIRECT3DEXECUTEBUFFER *, IUnknown *);HRESULT ( *GetStats)(IDirect3DDevice *This, LPD3DSTATS);HRESULT ( *Execute)(IDirect3DDevice *This, LPDIRECT3DEXECUTEBUFFER, LPDIRECT3DVIEWPORT, DWORD);HRESULT ( *AddViewport)(IDirect3DDevice *This, LPDIRECT3DVIEWPORT);HRESULT ( *DeleteViewport)(IDirect3DDevice *This, LPDIRECT3DVIEWPORT);HRESULT ( *NextViewport)(IDirect3DDevice *This, LPDIRECT3DVIEWPORT, LPDIRECT3DVIEWPORT *, DWORD);HRESULT ( *Pick)(IDirect3DDevice *This, LPDIRECT3DEXECUTEBUFFER, LPDIRECT3DVIEWPORT, DWORD, LPD3DRECT);HRESULT ( *GetPickRecords)(IDirect3DDevice *This, LPDWORD, LPD3DPICKRECORD);HRESULT ( *EnumTextureFormats)(IDirect3DDevice *This, LPD3DENUMTEXTUREFORMATSCALLBACK, LPVOID);HRESULT ( *CreateMatrix)(IDirect3DDevice *This, LPD3DMATRIXHANDLE);HRESULT ( *SetMatrix)(IDirect3DDevice *This, D3DMATRIXHANDLE,  LPD3DMATRIX);HRESULT ( *GetMatrix)(IDirect3DDevice *This, D3DMATRIXHANDLE, LPD3DMATRIX);HRESULT ( *DeleteMatrix)(IDirect3DDevice *This, D3DMATRIXHANDLE);HRESULT ( *BeginScene)(IDirect3DDevice *This);HRESULT ( *EndScene)(IDirect3DDevice *This);HRESULT ( *GetDirect3D)(IDirect3DDevice *This, LPDIRECT3D *);};
struct IDirectDraw3Vtbl {HRESULT ( *QueryInterface)(IDirectDraw3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDraw3 *This);ULONG ( *Release)(IDirectDraw3 *This);HRESULT ( *Compact)(IDirectDraw3 *This);HRESULT ( *CreateClipper)(IDirectDraw3 *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);HRESULT ( *CreatePalette)(IDirectDraw3 *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);HRESULT ( *CreateSurface)(IDirectDraw3 *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);HRESULT ( *DuplicateSurface)(IDirectDraw3 *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);HRESULT ( *EnumDisplayModes)(IDirectDraw3 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);HRESULT ( *EnumSurfaces)(IDirectDraw3 *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *FlipToGDISurface)(IDirectDraw3 *This);HRESULT ( *GetCaps)(IDirectDraw3 *This, LPDDCAPS, LPDDCAPS);HRESULT ( *GetDisplayMode)(IDirectDraw3 *This, LPDDSURFACEDESC);HRESULT ( *GetFourCCCodes)(IDirectDraw3 *This, LPDWORD, LPDWORD);HRESULT ( *GetGDISurface)(IDirectDraw3 *This, LPDIRECTDRAWSURFACE *);HRESULT ( *GetMonitorFrequency)(IDirectDraw3 *This, LPDWORD);HRESULT ( *GetScanLine)(IDirectDraw3 *This, LPDWORD);HRESULT ( *GetVerticalBlankStatus)(IDirectDraw3 *This, LPBOOL);HRESULT ( *Initialize)(IDirectDraw3 *This, GUID *);HRESULT ( *RestoreDisplayMode)(IDirectDraw3 *This);HRESULT ( *SetCooperativeLevel)(IDirectDraw3 *This, HWND, DWORD);HRESULT ( *SetDisplayMode)(IDirectDraw3 *This, DWORD, DWORD, DWORD, DWORD, DWORD);HRESULT ( *WaitForVerticalBlank)(IDirectDraw3 *This, DWORD, HANDLE);HRESULT ( *GetAvailableVidMem)(IDirectDraw3 *This, LPDDSCAPS, LPDWORD, LPDWORD);HRESULT ( *GetSurfaceFromDC)(IDirectDraw3 *This, HDC, IDirectDrawSurface **);};
union _LLC_PARMS {LLC_BUFFER_FREE_PARMS BufferFree;LLC_BUFFER_GET_PARMS BufferGet;LLC_DLC_CONNECT_PARMS DlcConnectStation;LLC_DLC_MODIFY_PARMS DlcModify;LLC_DLC_OPEN_SAP_PARMS DlcOpenSap;LLC_DLC_OPEN_STATION_PARMS DlcOpenStation;LLC_DLC_REALLOCATE_PARMS DlcReallocate;LLC_DLC_SET_THRESHOLD_PARMS DlcSetThreshold;LLC_DLC_STATISTICS_PARMS DlcStatistics;LLC_DIR_INITIALIZE_PARMS DirInitialize;LLC_DIR_OPEN_ADAPTER_PARMS DirOpenAdapter;LLC_DIR_OPEN_DIRECT_PARMS DirOpenDirect;LLC_DIR_READ_LOG_PARMS DirReadLog;LLC_DIR_SET_EFLAG_PARMS DirSetEventFlag;LLC_DIR_STATUS_PARMS DirStatus;LLC_READ_PARMS Read;LLC_RECEIVE_PARMS Receive;LLC_TRANSMIT_PARMS Transmit;LLC_TRANSMIT2_COMMAND Transmit2;LLC_TRACE_INITIALIZE_PARMS TraceInitialize;};
struct IDirectDrawSurface2Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface2 *This);ULONG ( *Release)(IDirectDrawSurface2 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface2 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface2 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface2 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE2, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface2 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface2 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface2 *This, LPDIRECTDRAWSURFACE2, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface2 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE2 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface2 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface2 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface2 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface2 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface2 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface2 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface2 *This);HRESULT ( *Lock)(IDirectDrawSurface2 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface2 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface2 *This);HRESULT ( *SetClipper)(IDirectDrawSurface2 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface2 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface2 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface2 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface2 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface2 *This, LPRECT, LPDIRECTDRAWSURFACE2, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface2 *This, DWORD, LPDIRECTDRAWSURFACE2);HRESULT ( *GetDDInterface)(IDirectDrawSurface2 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface2 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface2 *This, DWORD);};
struct IDirectDrawSurface3Vtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface3 *This);ULONG ( *Release)(IDirectDrawSurface3 *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface3 *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface3 *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface3 *This, DWORD, DWORD, LPDIRECTDRAWSURFACE3, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface3 *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface3 *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface3 *This, LPDIRECTDRAWSURFACE3, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface3 *This, LPDDSCAPS, LPDIRECTDRAWSURFACE3 *);HRESULT ( *GetBltStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface3 *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface3 *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface3 *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface3 *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface3 *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface3 *This);HRESULT ( *Lock)(IDirectDrawSurface3 *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface3 *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface3 *This);HRESULT ( *SetClipper)(IDirectDrawSurface3 *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface3 *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface3 *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface3 *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface3 *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface3 *This, LPRECT, LPDIRECTDRAWSURFACE3, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface3 *This, DWORD, LPDIRECTDRAWSURFACE3);HRESULT ( *GetDDInterface)(IDirectDrawSurface3 *This, LPVOID *);HRESULT ( *PageLock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *PageUnlock)(IDirectDrawSurface3 *This, DWORD);HRESULT ( *SetSurfaceDesc)(IDirectDrawSurface3 *This, LPDDSURFACEDESC, DWORD);};
struct IDirectDrawSurfaceVtbl {HRESULT ( *QueryInterface)(IDirectDrawSurface *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawSurface *This);ULONG ( *Release)(IDirectDrawSurface *This);HRESULT ( *AddAttachedSurface)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE);HRESULT ( *AddOverlayDirtyRect)(IDirectDrawSurface *This, LPRECT);HRESULT ( *Blt)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDBLTFX);HRESULT ( *BltBatch)(IDirectDrawSurface *This, LPDDBLTBATCH, DWORD, DWORD);HRESULT ( *BltFast)(IDirectDrawSurface *This, DWORD, DWORD, LPDIRECTDRAWSURFACE, LPRECT, DWORD);HRESULT ( *DeleteAttachedSurface)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);HRESULT ( *EnumAttachedSurfaces)(IDirectDrawSurface *This, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *EnumOverlayZOrders)(IDirectDrawSurface *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);HRESULT ( *Flip)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetAttachedSurface)(IDirectDrawSurface *This, LPDDSCAPS, LPDIRECTDRAWSURFACE *);HRESULT ( *GetBltStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetCaps)(IDirectDrawSurface *This, LPDDSCAPS);HRESULT ( *GetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER *);HRESULT ( *GetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *GetDC)(IDirectDrawSurface *This, HDC *);HRESULT ( *GetFlipStatus)(IDirectDrawSurface *This, DWORD);HRESULT ( *GetOverlayPosition)(IDirectDrawSurface *This, LPLONG, LPLONG);HRESULT ( *GetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE *);HRESULT ( *GetPixelFormat)(IDirectDrawSurface *This, LPDDPIXELFORMAT);HRESULT ( *GetSurfaceDesc)(IDirectDrawSurface *This, LPDDSURFACEDESC);HRESULT ( *Initialize)(IDirectDrawSurface *This, LPDIRECTDRAW, LPDDSURFACEDESC);HRESULT ( *IsLost)(IDirectDrawSurface *This);HRESULT ( *Lock)(IDirectDrawSurface *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);HRESULT ( *ReleaseDC)(IDirectDrawSurface *This, HDC);HRESULT ( *Restore)(IDirectDrawSurface *This);HRESULT ( *SetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER);HRESULT ( *SetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);HRESULT ( *SetOverlayPosition)(IDirectDrawSurface *This, LONG, LONG);HRESULT ( *SetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE);HRESULT ( *Unlock)(IDirectDrawSurface *This, LPVOID);HRESULT ( *UpdateOverlay)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDOVERLAYFX);HRESULT ( *UpdateOverlayDisplay)(IDirectDrawSurface *This, DWORD);HRESULT ( *UpdateOverlayZOrder)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);};
struct IDirect3DDevice2Vtbl {HRESULT ( *QueryInterface)(IDirect3DDevice2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DDevice2 *This);ULONG ( *Release)(IDirect3DDevice2 *This);HRESULT ( *GetCaps)(IDirect3DDevice2 *This, LPD3DDEVICEDESC, LPD3DDEVICEDESC);HRESULT ( *SwapTextureHandles)(IDirect3DDevice2 *This, LPDIRECT3DTEXTURE2, LPDIRECT3DTEXTURE2);HRESULT ( *GetStats)(IDirect3DDevice2 *This, LPD3DSTATS);HRESULT ( *AddViewport)(IDirect3DDevice2 *This, LPDIRECT3DVIEWPORT2);HRESULT ( *DeleteViewport)(IDirect3DDevice2 *This, LPDIRECT3DVIEWPORT2);HRESULT ( *NextViewport)(IDirect3DDevice2 *This, LPDIRECT3DVIEWPORT2, LPDIRECT3DVIEWPORT2 *, DWORD);HRESULT ( *EnumTextureFormats)(IDirect3DDevice2 *This, LPD3DENUMTEXTUREFORMATSCALLBACK, LPVOID);HRESULT ( *BeginScene)(IDirect3DDevice2 *This);HRESULT ( *EndScene)(IDirect3DDevice2 *This);HRESULT ( *GetDirect3D)(IDirect3DDevice2 *This, LPDIRECT3D2 *);HRESULT ( *SetCurrentViewport)(IDirect3DDevice2 *This, LPDIRECT3DVIEWPORT2);HRESULT ( *GetCurrentViewport)(IDirect3DDevice2 *This, LPDIRECT3DVIEWPORT2 *);HRESULT ( *SetRenderTarget)(IDirect3DDevice2 *This, LPDIRECTDRAWSURFACE, DWORD);HRESULT ( *GetRenderTarget)(IDirect3DDevice2 *This, LPDIRECTDRAWSURFACE *);HRESULT ( *Begin)(IDirect3DDevice2 *This, D3DPRIMITIVETYPE, D3DVERTEXTYPE, DWORD);HRESULT ( *BeginIndexed)(IDirect3DDevice2 *This, D3DPRIMITIVETYPE, D3DVERTEXTYPE, LPVOID, DWORD, DWORD);HRESULT ( *Vertex)(IDirect3DDevice2 *This, LPVOID);HRESULT ( *Index)(IDirect3DDevice2 *This, WORD);HRESULT ( *End)(IDirect3DDevice2 *This, DWORD);HRESULT ( *GetRenderState)(IDirect3DDevice2 *This, D3DRENDERSTATETYPE, LPDWORD);HRESULT ( *SetRenderState)(IDirect3DDevice2 *This, D3DRENDERSTATETYPE, DWORD);HRESULT ( *GetLightState)(IDirect3DDevice2 *This, D3DLIGHTSTATETYPE, LPDWORD);HRESULT ( *SetLightState)(IDirect3DDevice2 *This, D3DLIGHTSTATETYPE, DWORD);HRESULT ( *SetTransform)(IDirect3DDevice2 *This, D3DTRANSFORMSTATETYPE, LPD3DMATRIX);HRESULT ( *GetTransform)(IDirect3DDevice2 *This, D3DTRANSFORMSTATETYPE, LPD3DMATRIX);HRESULT ( *MultiplyTransform)(IDirect3DDevice2 *This, D3DTRANSFORMSTATETYPE, LPD3DMATRIX);HRESULT ( *DrawPrimitive)(IDirect3DDevice2 *This, D3DPRIMITIVETYPE, D3DVERTEXTYPE, LPVOID, DWORD, DWORD);HRESULT ( *DrawIndexedPrimitive)(IDirect3DDevice2 *This, D3DPRIMITIVETYPE, D3DVERTEXTYPE, LPVOID, DWORD, LPWORD, DWORD, DWORD);HRESULT ( *SetClipStatus)(IDirect3DDevice2 *This, LPD3DCLIPSTATUS);HRESULT ( *GetClipStatus)(IDirect3DDevice2 *This, LPD3DCLIPSTATUS);};
struct IDirectPlay3Vtbl {HRESULT ( *QueryInterface)(IDirectPlay3 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectPlay3 *This);ULONG ( *Release)(IDirectPlay3 *This);HRESULT ( *AddPlayerToGroup)(IDirectPlay3 *This, DPID, DPID);HRESULT ( *Close)(IDirectPlay3 *This);HRESULT ( *CreateGroup)(IDirectPlay3 *This, LPDPID, LPDPNAME, LPVOID, DWORD, DWORD);HRESULT ( *CreatePlayer)(IDirectPlay3 *This, LPDPID, LPDPNAME, HANDLE, LPVOID, DWORD, DWORD);HRESULT ( *DeletePlayerFromGroup)(IDirectPlay3 *This, DPID, DPID);HRESULT ( *DestroyGroup)(IDirectPlay3 *This, DPID);HRESULT ( *DestroyPlayer)(IDirectPlay3 *This, DPID);HRESULT ( *EnumGroupPlayers)(IDirectPlay3 *This, DPID, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumGroups)(IDirectPlay3 *This, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumPlayers)(IDirectPlay3 *This, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *EnumSessions)(IDirectPlay3 *This, LPDPSESSIONDESC2, DWORD, LPDPENUMSESSIONSCALLBACK2, LPVOID, DWORD);HRESULT ( *GetCaps)(IDirectPlay3 *This, LPDPCAPS, DWORD);HRESULT ( *GetGroupData)(IDirectPlay3 *This, DPID, LPVOID, LPDWORD, DWORD);HRESULT ( *GetGroupName)(IDirectPlay3 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetMessageCount)(IDirectPlay3 *This, DPID, LPDWORD);HRESULT ( *GetPlayerAddress)(IDirectPlay3 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetPlayerCaps)(IDirectPlay3 *This, DPID, LPDPCAPS, DWORD);HRESULT ( *GetPlayerData)(IDirectPlay3 *This, DPID, LPVOID, LPDWORD, DWORD);HRESULT ( *GetPlayerName)(IDirectPlay3 *This, DPID, LPVOID, LPDWORD);HRESULT ( *GetSessionDesc)(IDirectPlay3 *This, LPVOID, LPDWORD);HRESULT ( *Initialize)(IDirectPlay3 *This, LPGUID);HRESULT ( *Open)(IDirectPlay3 *This, LPDPSESSIONDESC2, DWORD);HRESULT ( *Receive)(IDirectPlay3 *This, LPDPID, LPDPID, DWORD, LPVOID, LPDWORD);HRESULT ( *Send)(IDirectPlay3 *This, DPID, DPID, DWORD, LPVOID, DWORD);HRESULT ( *SetGroupData)(IDirectPlay3 *This, DPID, LPVOID, DWORD, DWORD);HRESULT ( *SetGroupName)(IDirectPlay3 *This, DPID, LPDPNAME, DWORD);HRESULT ( *SetPlayerData)(IDirectPlay3 *This, DPID, LPVOID, DWORD, DWORD);HRESULT ( *SetPlayerName)(IDirectPlay3 *This, DPID, LPDPNAME, DWORD);HRESULT ( *SetSessionDesc)(IDirectPlay3 *This, LPDPSESSIONDESC2, DWORD);HRESULT ( *AddGroupToGroup)(IDirectPlay3 *This, DPID, DPID);HRESULT ( *CreateGroupInGroup)(IDirectPlay3 *This, DPID, LPDPID, LPDPNAME, LPVOID, DWORD, DWORD);HRESULT ( *DeleteGroupFromGroup)(IDirectPlay3 *This, DPID, DPID);HRESULT ( *EnumConnections)(IDirectPlay3 *This, LPCGUID, LPDPENUMCONNECTIONSCALLBACK, LPVOID, DWORD);HRESULT ( *EnumGroupsInGroup)(IDirectPlay3 *This, DPID, LPGUID, LPDPENUMPLAYERSCALLBACK2, LPVOID, DWORD);HRESULT ( *GetGroupConnectionSettings)(IDirectPlay3 *This, DWORD, DPID, LPVOID, LPDWORD);HRESULT ( *InitializeConnection)(IDirectPlay3 *This, LPVOID, DWORD);HRESULT ( *SecureOpen)(IDirectPlay3 *This, LPCDPSESSIONDESC2, DWORD, LPCDPSECURITYDESC, LPCDPCREDENTIALS);HRESULT ( *SendChatMessage)(IDirectPlay3 *This, DPID, DPID, DWORD, LPDPCHAT);HRESULT ( *SetGroupConnectionSettings)(IDirectPlay3 *This, DWORD, DPID, LPDPLCONNECTION);HRESULT ( *StartSession)(IDirectPlay3 *This, DWORD, DPID);HRESULT ( *GetGroupFlags)(IDirectPlay3 *This, DPID, LPDWORD);HRESULT ( *GetGroupParent)(IDirectPlay3 *This, DPID, LPDPID);HRESULT ( *GetPlayerAccount)(IDirectPlay3 *This, DPID, DWORD, LPVOID, LPDWORD);HRESULT ( *GetPlayerFlags)(IDirectPlay3 *This, DPID, LPDWORD);};
struct IDirect3DRMDevice2Vtbl {HRESULT ( *QueryInterface)(IDirect3DRMDevice2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMDevice2 *This);ULONG ( *Release)(IDirect3DRMDevice2 *This);HRESULT ( *Clone)(IDirect3DRMDevice2 *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMDevice2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMDevice2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMDevice2 *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMDevice2 *This);HRESULT ( *SetName)(IDirect3DRMDevice2 *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMDevice2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMDevice2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Init)(IDirect3DRMDevice2 *This, ULONG width, ULONG height);HRESULT ( *InitFromD3D)(IDirect3DRMDevice2 *This, LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev);HRESULT ( *InitFromClipper)(IDirect3DRMDevice2 *This, LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height);HRESULT ( *Update)(IDirect3DRMDevice2 *This);HRESULT ( *AddUpdateCallback)(IDirect3DRMDevice2 *This, D3DRMUPDATECALLBACK, LPVOID arg);HRESULT ( *DeleteUpdateCallback)(IDirect3DRMDevice2 *This, D3DRMUPDATECALLBACK, LPVOID arg);HRESULT ( *SetBufferCount)(IDirect3DRMDevice2 *This, DWORD);DWORD ( *GetBufferCount)(IDirect3DRMDevice2 *This);HRESULT ( *SetDither)(IDirect3DRMDevice2 *This, BOOL);HRESULT ( *SetShades)(IDirect3DRMDevice2 *This, DWORD);HRESULT ( *SetQuality)(IDirect3DRMDevice2 *This, D3DRMRENDERQUALITY);HRESULT ( *SetTextureQuality)(IDirect3DRMDevice2 *This, D3DRMTEXTUREQUALITY);HRESULT ( *GetViewports)(IDirect3DRMDevice2 *This, LPDIRECT3DRMVIEWPORTARRAY *return_views);BOOL ( *GetDither)(IDirect3DRMDevice2 *This);DWORD ( *GetShades)(IDirect3DRMDevice2 *This);DWORD ( *GetHeight)(IDirect3DRMDevice2 *This);DWORD ( *GetWidth)(IDirect3DRMDevice2 *This);DWORD ( *GetTrianglesDrawn)(IDirect3DRMDevice2 *This);DWORD ( *GetWireframeOptions)(IDirect3DRMDevice2 *This);D3DRMRENDERQUALITY ( *GetQuality)(IDirect3DRMDevice2 *This);D3DCOLORMODEL ( *GetColorModel)(IDirect3DRMDevice2 *This);D3DRMTEXTUREQUALITY ( *GetTextureQuality)(IDirect3DRMDevice2 *This);HRESULT ( *GetDirect3DDevice)(IDirect3DRMDevice2 *This, LPDIRECT3DDEVICE *);HRESULT ( *InitFromD3D2)(IDirect3DRMDevice2 *This, LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev);HRESULT ( *InitFromSurface)(IDirect3DRMDevice2 *This, LPGUID lpGUID, LPDIRECTDRAW lpDD, LPDIRECTDRAWSURFACE lpDDSBack);HRESULT ( *SetRenderMode)(IDirect3DRMDevice2 *This, DWORD dwFlags);DWORD ( *GetRenderMode)(IDirect3DRMDevice2 *This);HRESULT ( *GetDirect3DDevice2)(IDirect3DRMDevice2 *This, LPDIRECT3DDEVICE2 *);};
struct IDirectInputDevice2AVtbl {HRESULT ( *QueryInterface)(IDirectInputDevice2A *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputDevice2A *This);ULONG ( *Release)(IDirectInputDevice2A *This);HRESULT ( *GetCapabilities)(IDirectInputDevice2A *This, LPDIDEVCAPS);HRESULT ( *EnumObjects)(IDirectInputDevice2A *This, LPDIENUMDEVICEOBJECTSCALLBACKA, LPVOID, DWORD);HRESULT ( *GetProperty)(IDirectInputDevice2A *This,  GUID *, LPDIPROPHEADER);HRESULT ( *SetProperty)(IDirectInputDevice2A *This,  GUID *, LPCDIPROPHEADER);HRESULT ( *Acquire)(IDirectInputDevice2A *This);HRESULT ( *Unacquire)(IDirectInputDevice2A *This);HRESULT ( *GetDeviceState)(IDirectInputDevice2A *This, DWORD, LPVOID);HRESULT ( *GetDeviceData)(IDirectInputDevice2A *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);HRESULT ( *SetDataFormat)(IDirectInputDevice2A *This, LPCDIDATAFORMAT);HRESULT ( *SetEventNotification)(IDirectInputDevice2A *This, HANDLE);HRESULT ( *SetCooperativeLevel)(IDirectInputDevice2A *This, HWND, DWORD);HRESULT ( *GetObjectInfo)(IDirectInputDevice2A *This, LPDIDEVICEOBJECTINSTANCEA, DWORD, DWORD);HRESULT ( *GetDeviceInfo)(IDirectInputDevice2A *This, LPDIDEVICEINSTANCEA);HRESULT ( *RunControlPanel)(IDirectInputDevice2A *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputDevice2A *This, HINSTANCE, DWORD,  GUID *);HRESULT ( *CreateEffect)(IDirectInputDevice2A *This,  GUID *, LPCDIEFFECT, LPDIRECTINPUTEFFECT *, LPUNKNOWN);HRESULT ( *EnumEffects)(IDirectInputDevice2A *This, LPDIENUMEFFECTSCALLBACKA, LPVOID, DWORD);HRESULT ( *GetEffectInfo)(IDirectInputDevice2A *This, LPDIEFFECTINFOA,  GUID *);HRESULT ( *GetForceFeedbackState)(IDirectInputDevice2A *This, LPDWORD);HRESULT ( *SendForceFeedbackCommand)(IDirectInputDevice2A *This, DWORD);HRESULT ( *EnumCreatedEffectObjects)(IDirectInputDevice2A *This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, LPVOID, DWORD);HRESULT ( *Escape)(IDirectInputDevice2A *This, LPDIEFFESCAPE);HRESULT ( *Poll)(IDirectInputDevice2A *This);HRESULT ( *SendDeviceData)(IDirectInputDevice2A *This, DWORD, LPCDIDEVICEOBJECTDATA, LPDWORD, DWORD);};
struct IDirectInputDevice2WVtbl {HRESULT ( *QueryInterface)(IDirectInputDevice2W *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInputDevice2W *This);ULONG ( *Release)(IDirectInputDevice2W *This);HRESULT ( *GetCapabilities)(IDirectInputDevice2W *This, LPDIDEVCAPS);HRESULT ( *EnumObjects)(IDirectInputDevice2W *This, LPDIENUMDEVICEOBJECTSCALLBACKW, LPVOID, DWORD);HRESULT ( *GetProperty)(IDirectInputDevice2W *This,  GUID *, LPDIPROPHEADER);HRESULT ( *SetProperty)(IDirectInputDevice2W *This,  GUID *, LPCDIPROPHEADER);HRESULT ( *Acquire)(IDirectInputDevice2W *This);HRESULT ( *Unacquire)(IDirectInputDevice2W *This);HRESULT ( *GetDeviceState)(IDirectInputDevice2W *This, DWORD, LPVOID);HRESULT ( *GetDeviceData)(IDirectInputDevice2W *This, DWORD, LPDIDEVICEOBJECTDATA, LPDWORD, DWORD);HRESULT ( *SetDataFormat)(IDirectInputDevice2W *This, LPCDIDATAFORMAT);HRESULT ( *SetEventNotification)(IDirectInputDevice2W *This, HANDLE);HRESULT ( *SetCooperativeLevel)(IDirectInputDevice2W *This, HWND, DWORD);HRESULT ( *GetObjectInfo)(IDirectInputDevice2W *This, LPDIDEVICEOBJECTINSTANCEW, DWORD, DWORD);HRESULT ( *GetDeviceInfo)(IDirectInputDevice2W *This, LPDIDEVICEINSTANCEW);HRESULT ( *RunControlPanel)(IDirectInputDevice2W *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInputDevice2W *This, HINSTANCE, DWORD,  GUID *);HRESULT ( *CreateEffect)(IDirectInputDevice2W *This,  GUID *, LPCDIEFFECT, LPDIRECTINPUTEFFECT *, LPUNKNOWN);HRESULT ( *EnumEffects)(IDirectInputDevice2W *This, LPDIENUMEFFECTSCALLBACKW, LPVOID, DWORD);HRESULT ( *GetEffectInfo)(IDirectInputDevice2W *This, LPDIEFFECTINFOW,  GUID *);HRESULT ( *GetForceFeedbackState)(IDirectInputDevice2W *This, LPDWORD);HRESULT ( *SendForceFeedbackCommand)(IDirectInputDevice2W *This, DWORD);HRESULT ( *EnumCreatedEffectObjects)(IDirectInputDevice2W *This, LPDIENUMCREATEDEFFECTOBJECTSCALLBACK, LPVOID, DWORD);HRESULT ( *Escape)(IDirectInputDevice2W *This, LPDIEFFESCAPE);HRESULT ( *Poll)(IDirectInputDevice2W *This);HRESULT ( *SendDeviceData)(IDirectInputDevice2W *This, DWORD, LPCDIDEVICEOBJECTDATA, LPDWORD, DWORD);};
struct IDirect3DRMMeshBuilder2Vtbl {HRESULT ( *QueryInterface)(IDirect3DRMMeshBuilder2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMMeshBuilder2 *This);ULONG ( *Release)(IDirect3DRMMeshBuilder2 *This);HRESULT ( *Clone)(IDirect3DRMMeshBuilder2 *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMMeshBuilder2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMMeshBuilder2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMMeshBuilder2 *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMMeshBuilder2 *This);HRESULT ( *SetName)(IDirect3DRMMeshBuilder2 *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMMeshBuilder2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMMeshBuilder2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Load)(IDirect3DRMMeshBuilder2 *This, LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg);HRESULT ( *Save)(IDirect3DRMMeshBuilder2 *This,  char *filename, D3DRMXOFFORMAT, D3DRMSAVEOPTIONS save);HRESULT ( *Scale)(IDirect3DRMMeshBuilder2 *This, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz);HRESULT ( *Translate)(IDirect3DRMMeshBuilder2 *This, D3DVALUE tx, D3DVALUE ty, D3DVALUE tz);HRESULT ( *SetColorSource)(IDirect3DRMMeshBuilder2 *This, D3DRMCOLORSOURCE);HRESULT ( *GetBox)(IDirect3DRMMeshBuilder2 *This, D3DRMBOX *);HRESULT ( *GenerateNormals)(IDirect3DRMMeshBuilder2 *This);D3DRMCOLORSOURCE ( *GetColorSource)(IDirect3DRMMeshBuilder2 *This);HRESULT ( *AddMesh)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMMESH);HRESULT ( *AddMeshBuilder)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMMESHBUILDER);HRESULT ( *AddFrame)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMFRAME);HRESULT ( *AddFace)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMFACE);HRESULT ( *AddFaces)(IDirect3DRMMeshBuilder2 *This, DWORD vcount, D3DVECTOR *vertices, DWORD ncount, D3DVECTOR *normals, DWORD *data, LPDIRECT3DRMFACEARRAY *);HRESULT ( *ReserveSpace)(IDirect3DRMMeshBuilder2 *This, DWORD vertex_Count, DWORD normal_count, DWORD face_count);HRESULT ( *SetColorRGB)(IDirect3DRMMeshBuilder2 *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetColor)(IDirect3DRMMeshBuilder2 *This, D3DCOLOR);HRESULT ( *SetTexture)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetMaterial)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMMATERIAL);HRESULT ( *SetTextureTopology)(IDirect3DRMMeshBuilder2 *This, BOOL wrap_u, BOOL wrap_v);HRESULT ( *SetQuality)(IDirect3DRMMeshBuilder2 *This, D3DRMRENDERQUALITY);HRESULT ( *SetPerspective)(IDirect3DRMMeshBuilder2 *This, BOOL);HRESULT ( *SetVertex)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetNormal)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetTextureCoordinates)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DVALUE u, D3DVALUE v);HRESULT ( *SetVertexColor)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DCOLOR);HRESULT ( *SetVertexColorRGB)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *GetFaces)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMFACEARRAY *);HRESULT ( *GetVertices)(IDirect3DRMMeshBuilder2 *This, DWORD *vcount, D3DVECTOR *vertices, DWORD *ncount, D3DVECTOR *normals, DWORD *face_data_size, DWORD *face_data);HRESULT ( *GetTextureCoordinates)(IDirect3DRMMeshBuilder2 *This, DWORD index, D3DVALUE *u, D3DVALUE *v);int ( *AddVertex)(IDirect3DRMMeshBuilder2 *This, D3DVALUE x, D3DVALUE y, D3DVALUE z);int ( *AddNormal)(IDirect3DRMMeshBuilder2 *This, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *CreateFace)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMFACE *);D3DRMRENDERQUALITY ( *GetQuality)(IDirect3DRMMeshBuilder2 *This);BOOL ( *GetPerspective)(IDirect3DRMMeshBuilder2 *This);int ( *GetFaceCount)(IDirect3DRMMeshBuilder2 *This);int ( *GetVertexCount)(IDirect3DRMMeshBuilder2 *This);D3DCOLOR ( *GetVertexColor)(IDirect3DRMMeshBuilder2 *This, DWORD index);HRESULT ( *CreateMesh)(IDirect3DRMMeshBuilder2 *This, LPDIRECT3DRMMESH *);HRESULT ( *GenerateNormals2)(IDirect3DRMMeshBuilder2 *This, D3DVALUE crease, DWORD dwFlags);HRESULT ( *GetFace)(IDirect3DRMMeshBuilder2 *This, DWORD index, LPDIRECT3DRMFACE *);};
struct IDirect3DRMMeshBuilderVtbl {HRESULT ( *QueryInterface)(IDirect3DRMMeshBuilder *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMMeshBuilder *This);ULONG ( *Release)(IDirect3DRMMeshBuilder *This);HRESULT ( *Clone)(IDirect3DRMMeshBuilder *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMMeshBuilder *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMMeshBuilder *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMMeshBuilder *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMMeshBuilder *This);HRESULT ( *SetName)(IDirect3DRMMeshBuilder *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMMeshBuilder *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMMeshBuilder *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *Load)(IDirect3DRMMeshBuilder *This, LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg);HRESULT ( *Save)(IDirect3DRMMeshBuilder *This,  char *filename, D3DRMXOFFORMAT, D3DRMSAVEOPTIONS save);HRESULT ( *Scale)(IDirect3DRMMeshBuilder *This, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz);HRESULT ( *Translate)(IDirect3DRMMeshBuilder *This, D3DVALUE tx, D3DVALUE ty, D3DVALUE tz);HRESULT ( *SetColorSource)(IDirect3DRMMeshBuilder *This, D3DRMCOLORSOURCE);HRESULT ( *GetBox)(IDirect3DRMMeshBuilder *This, D3DRMBOX *);HRESULT ( *GenerateNormals)(IDirect3DRMMeshBuilder *This);D3DRMCOLORSOURCE ( *GetColorSource)(IDirect3DRMMeshBuilder *This);HRESULT ( *AddMesh)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMMESH);HRESULT ( *AddMeshBuilder)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMMESHBUILDER);HRESULT ( *AddFrame)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMFRAME);HRESULT ( *AddFace)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMFACE);HRESULT ( *AddFaces)(IDirect3DRMMeshBuilder *This, DWORD vcount, D3DVECTOR *vertices, DWORD ncount, D3DVECTOR *normals, DWORD *data, LPDIRECT3DRMFACEARRAY *);HRESULT ( *ReserveSpace)(IDirect3DRMMeshBuilder *This, DWORD vertex_Count, DWORD normal_count, DWORD face_count);HRESULT ( *SetColorRGB)(IDirect3DRMMeshBuilder *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetColor)(IDirect3DRMMeshBuilder *This, D3DCOLOR);HRESULT ( *SetTexture)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetMaterial)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMMATERIAL);HRESULT ( *SetTextureTopology)(IDirect3DRMMeshBuilder *This, BOOL wrap_u, BOOL wrap_v);HRESULT ( *SetQuality)(IDirect3DRMMeshBuilder *This, D3DRMRENDERQUALITY);HRESULT ( *SetPerspective)(IDirect3DRMMeshBuilder *This, BOOL);HRESULT ( *SetVertex)(IDirect3DRMMeshBuilder *This, DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetNormal)(IDirect3DRMMeshBuilder *This, DWORD index, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetTextureCoordinates)(IDirect3DRMMeshBuilder *This, DWORD index, D3DVALUE u, D3DVALUE v);HRESULT ( *SetVertexColor)(IDirect3DRMMeshBuilder *This, DWORD index, D3DCOLOR);HRESULT ( *SetVertexColorRGB)(IDirect3DRMMeshBuilder *This, DWORD index, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *GetFaces)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMFACEARRAY *);HRESULT ( *GetVertices)(IDirect3DRMMeshBuilder *This, DWORD *vcount, D3DVECTOR *vertices, DWORD *ncount, D3DVECTOR *normals, DWORD *face_data_size, DWORD *face_data);HRESULT ( *GetTextureCoordinates)(IDirect3DRMMeshBuilder *This, DWORD index, D3DVALUE *u, D3DVALUE *v);int ( *AddVertex)(IDirect3DRMMeshBuilder *This, D3DVALUE x, D3DVALUE y, D3DVALUE z);int ( *AddNormal)(IDirect3DRMMeshBuilder *This, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *CreateFace)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMFACE *);D3DRMRENDERQUALITY ( *GetQuality)(IDirect3DRMMeshBuilder *This);BOOL ( *GetPerspective)(IDirect3DRMMeshBuilder *This);int ( *GetFaceCount)(IDirect3DRMMeshBuilder *This);int ( *GetVertexCount)(IDirect3DRMMeshBuilder *This);D3DCOLOR ( *GetVertexColor)(IDirect3DRMMeshBuilder *This, DWORD index);HRESULT ( *CreateMesh)(IDirect3DRMMeshBuilder *This, LPDIRECT3DRMMESH *);};
struct IASQLOLETableVtbl {HRESULT ( *QueryInterface)(IASQLOLETable *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLETable *This);ULONG ( *Release)(IASQLOLETable *This);HRESULT ( *GetApplication)(IASQLOLETable *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLETable *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLETable *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLETable *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLETable *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLETable *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLETable *This, LPCSTR NewValue);HRESULT ( *GetID)(IASQLOLETable *This, LPLONG plID);HRESULT ( *GetOwner)(IASQLOLETable *This, LPBSTRA pRetVal);HRESULT ( *GetCreateDate)(IASQLOLETable *This, LPBSTRA pRetVal);HRESULT ( *GetSystemObject)(IASQLOLETable *This, LPBOOL pRetVal);HRESULT ( *GetRows)(IASQLOLETable *This, LPLONG pRetVal);HRESULT ( *GetDataSpaceUsed)(IASQLOLETable *This, LPLONG pRetVal);HRESULT ( *GetIndexSpaceUsed)(IASQLOLETable *This, LPLONG pRetVal);HRESULT ( *GetAttributes)(IASQLOLETable *This, SQLOLE_TABLEATT_TYPE *pRetVal);HRESULT ( *GetPrimaryKey)(IASQLOLETable *This, LPASQLOLEKEY *ppPrimaryKey);HRESULT ( *GetClusteredIndex)(IASQLOLETable *This, LPASQLOLEINDEX *ppPrimaryKey);HRESULT ( *GetColumns)(IASQLOLETable *This, LPASQLOLECOLUMNS *ppColumns);HRESULT ( *GetColumnByName)(IASQLOLETable *This, LPCSTR szName, LPASQLOLECOLUMN *ppColumn);HRESULT ( *GetColumnByOrd)(IASQLOLETable *This, int lOrdinal, LPASQLOLECOLUMN *ppColumn);HRESULT ( *RemoveColumnByName)(IASQLOLETable *This, LPCSTR szName);HRESULT ( *RemoveColumnByOrd)(IASQLOLETable *This, int lOrdinal);HRESULT ( *AddColumn)(IASQLOLETable *This, LPASQLOLECOLUMN pColumn);HRESULT ( *GetColumnCount)(IASQLOLETable *This, LPLONG plCount);HRESULT ( *GetKeys)(IASQLOLETable *This, LPASQLOLEKEYS *ppKeys);HRESULT ( *GetKeyByName)(IASQLOLETable *This, LPCSTR szName, LPASQLOLEKEY *ppKey);HRESULT ( *GetKeyByOrd)(IASQLOLETable *This, int lOrdinal, LPASQLOLEKEY *ppKey);HRESULT ( *RemoveKeyByName)(IASQLOLETable *This, LPCSTR szName);HRESULT ( *RemoveKeyByOrd)(IASQLOLETable *This, int lOrdinal);HRESULT ( *AddKey)(IASQLOLETable *This, LPASQLOLEKEY pKey);HRESULT ( *GetKeyCount)(IASQLOLETable *This, LPLONG plCount);HRESULT ( *GetChecks)(IASQLOLETable *This, LPASQLOLECHECKS *ppChecks);HRESULT ( *GetCheckByName)(IASQLOLETable *This, LPCSTR szName, LPASQLOLECHECK *ppCheck);HRESULT ( *GetCheckByOrd)(IASQLOLETable *This, int lOrdinal, LPASQLOLECHECK *ppCheck);HRESULT ( *RemoveCheckByName)(IASQLOLETable *This, LPCSTR szName);HRESULT ( *RemoveCheckByOrd)(IASQLOLETable *This, int lOrdinal);HRESULT ( *AddCheck)(IASQLOLETable *This, LPASQLOLECHECK pCheck);HRESULT ( *GetCheckCount)(IASQLOLETable *This, LPLONG plCount);HRESULT ( *GetIndexes)(IASQLOLETable *This, LPASQLOLEINDEXES *ppIndexes);HRESULT ( *GetIndexByName)(IASQLOLETable *This, LPCSTR szName, LPASQLOLEINDEX *ppIndex);HRESULT ( *GetIndexByOrd)(IASQLOLETable *This, int lOrdinal, LPASQLOLEINDEX *ppIndex);HRESULT ( *RemoveIndexByName)(IASQLOLETable *This, LPCSTR szName);HRESULT ( *RemoveIndexByOrd)(IASQLOLETable *This, int lOrdinal);HRESULT ( *AddIndex)(IASQLOLETable *This, LPASQLOLEINDEX pIndex);HRESULT ( *GetIndexCount)(IASQLOLETable *This, LPLONG plCount);HRESULT ( *GetTriggers)(IASQLOLETable *This, LPASQLOLETRIGGERS *ppTriggers);HRESULT ( *GetTriggerByName)(IASQLOLETable *This, LPCSTR szName, LPASQLOLETRIGGER *ppTrigger);HRESULT ( *GetTriggerByOrd)(IASQLOLETable *This, int lOrdinal, LPASQLOLETRIGGER *ppTrigger);HRESULT ( *RemoveTriggerByName)(IASQLOLETable *This, LPCSTR szName);HRESULT ( *RemoveTriggerByOrd)(IASQLOLETable *This, int lOrdinal);HRESULT ( *AddTrigger)(IASQLOLETable *This, LPASQLOLETRIGGER pTrigger);HRESULT ( *GetTriggerCount)(IASQLOLETable *This, LPLONG plCount);HRESULT ( *BeginAlter)(IASQLOLETable *This);HRESULT ( *DoAlter)(IASQLOLETable *This);HRESULT ( *DoAlterWithNoCheck)(IASQLOLETable *This);HRESULT ( *CancelAlter)(IASQLOLETable *This);HRESULT ( *Grant)(IASQLOLETable *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR GranteeNames, LPCSTR ColumnNames);HRESULT ( *Revoke)(IASQLOLETable *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR RevokeeNames, LPCSTR ColumnNames);HRESULT ( *CheckTable)(IASQLOLETable *This, LPBSTRA pResult);HRESULT ( *CheckTextAllocsFast)(IASQLOLETable *This, LPBSTRA pResult);HRESULT ( *CheckTextAllocsFull)(IASQLOLETable *This, LPBSTRA pResult);HRESULT ( *TruncateData)(IASQLOLETable *This);HRESULT ( *UpdateStatistics)(IASQLOLETable *This);HRESULT ( *ReCompileReferences)(IASQLOLETable *This);HRESULT ( *Remove)(IASQLOLETable *This);HRESULT ( *Refresh)(IASQLOLETable *This);HRESULT ( *Script)(IASQLOLETable *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPCSTR NewName, LPBSTRA ScriptText);HRESULT ( *EnumReferencedKeys)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR ReferencedTableName, BOOL IncludeAllCandidates);HRESULT ( *EnumReferencedTables)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, BOOL IncludeAllCandidates);HRESULT ( *EnumReferencingKeys)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR ReferencingTableName, BOOL IncludeAllCandidates);HRESULT ( *EnumReferencingTables)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, BOOL IncludeAllCandidates);HRESULT ( *InsertColumn)(IASQLOLETable *This, LPASQLOLECOLUMN pNewColumn, LPCSTR BeforeColumnName);HRESULT ( *RecalcSpaceUsage)(IASQLOLETable *This);HRESULT ( *EnumDependencies)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);HRESULT ( *EnumLastStatisticsUpdates)(IASQLOLETable *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR IndexName);HRESULT ( *ListPermissions)(IASQLOLETable *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListUserPermissions)(IASQLOLETable *This, LPCSTR UserName, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListArticles)(IASQLOLETable *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *CheckIdentityValue)(IASQLOLETable *This);HRESULT ( *RebuildIndexes)(IASQLOLETable *This, SQLOLE_INDEX_TYPE SortedDataType, int lFillFactor);HRESULT ( *ImportData)(IASQLOLETable *This, LPASQLOLEBULKCOPY Bcp, LPLONG plRowsImported);HRESULT ( *ExportData)(IASQLOLETable *This, LPASQLOLEBULKCOPY Bcp, LPLONG plRowsExported);HRESULT ( *CheckTableDataOnly)(IASQLOLETable *This, LPBSTRA pResult);HRESULT ( *InAlter)(IASQLOLETable *This, LPBOOL pRetVal);};
struct IDirect3DRMFrameVtbl {HRESULT ( *QueryInterface)(IDirect3DRMFrame *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMFrame *This);ULONG ( *Release)(IDirect3DRMFrame *This);HRESULT ( *Clone)(IDirect3DRMFrame *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMFrame *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMFrame *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMFrame *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMFrame *This);HRESULT ( *SetName)(IDirect3DRMFrame *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMFrame *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMFrame *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *AddChild)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME child);HRESULT ( *AddLight)(IDirect3DRMFrame *This, LPDIRECT3DRMLIGHT);HRESULT ( *AddMoveCallback)(IDirect3DRMFrame *This, D3DRMFRAMEMOVECALLBACK, void *arg);HRESULT ( *AddTransform)(IDirect3DRMFrame *This, D3DRMCOMBINETYPE, D3DRMMATRIX4D);HRESULT ( *AddTranslation)(IDirect3DRMFrame *This, D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *AddScale)(IDirect3DRMFrame *This, D3DRMCOMBINETYPE, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz);HRESULT ( *AddRotation)(IDirect3DRMFrame *This, D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta);HRESULT ( *AddVisual)(IDirect3DRMFrame *This, LPDIRECT3DRMVISUAL);HRESULT ( *GetChildren)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAMEARRAY *children);D3DCOLOR ( *GetColor)(IDirect3DRMFrame *This);HRESULT ( *GetLights)(IDirect3DRMFrame *This, LPDIRECT3DRMLIGHTARRAY *lights);D3DRMMATERIALMODE ( *GetMaterialMode)(IDirect3DRMFrame *This);HRESULT ( *GetParent)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME *);HRESULT ( *GetPosition)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_position);HRESULT ( *GetRotation)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR axis, LPD3DVALUE return_theta);HRESULT ( *GetScene)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME *);D3DRMSORTMODE ( *GetSortMode)(IDirect3DRMFrame *This);HRESULT ( *GetTexture)(IDirect3DRMFrame *This, LPDIRECT3DRMTEXTURE *);HRESULT ( *GetTransform)(IDirect3DRMFrame *This, D3DRMMATRIX4D return_matrix);HRESULT ( *GetVelocity)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_velocity, BOOL with_rotation);HRESULT ( *GetOrientation)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR dir, LPD3DVECTOR up);HRESULT ( *GetVisuals)(IDirect3DRMFrame *This, LPDIRECT3DRMVISUALARRAY *visuals);HRESULT ( *GetTextureTopology)(IDirect3DRMFrame *This, BOOL *wrap_u, BOOL *wrap_v);HRESULT ( *InverseTransform)(IDirect3DRMFrame *This, D3DVECTOR *d, D3DVECTOR *s);HRESULT ( *Load)(IDirect3DRMFrame *This, LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg);HRESULT ( *LookAt)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME target, LPDIRECT3DRMFRAME reference, D3DRMFRAMECONSTRAINT);HRESULT ( *Move)(IDirect3DRMFrame *This, D3DVALUE delta);HRESULT ( *DeleteChild)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME);HRESULT ( *DeleteLight)(IDirect3DRMFrame *This, LPDIRECT3DRMLIGHT);HRESULT ( *DeleteMoveCallback)(IDirect3DRMFrame *This, D3DRMFRAMEMOVECALLBACK, void *arg);HRESULT ( *DeleteVisual)(IDirect3DRMFrame *This, LPDIRECT3DRMVISUAL);D3DCOLOR ( *GetSceneBackground)(IDirect3DRMFrame *This);HRESULT ( *GetSceneBackgroundDepth)(IDirect3DRMFrame *This, LPDIRECTDRAWSURFACE *);D3DCOLOR ( *GetSceneFogColor)(IDirect3DRMFrame *This);BOOL ( *GetSceneFogEnable)(IDirect3DRMFrame *This);D3DRMFOGMODE ( *GetSceneFogMode)(IDirect3DRMFrame *This);HRESULT ( *GetSceneFogParams)(IDirect3DRMFrame *This, D3DVALUE *return_start, D3DVALUE *return_end, D3DVALUE *return_density);HRESULT ( *SetSceneBackground)(IDirect3DRMFrame *This, D3DCOLOR);HRESULT ( *SetSceneBackgroundRGB)(IDirect3DRMFrame *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetSceneBackgroundDepth)(IDirect3DRMFrame *This, LPDIRECTDRAWSURFACE);HRESULT ( *SetSceneBackgroundImage)(IDirect3DRMFrame *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetSceneFogEnable)(IDirect3DRMFrame *This, BOOL);HRESULT ( *SetSceneFogColor)(IDirect3DRMFrame *This, D3DCOLOR);HRESULT ( *SetSceneFogMode)(IDirect3DRMFrame *This, D3DRMFOGMODE);HRESULT ( *SetSceneFogParams)(IDirect3DRMFrame *This, D3DVALUE start, D3DVALUE end, D3DVALUE density);HRESULT ( *SetColor)(IDirect3DRMFrame *This, D3DCOLOR);HRESULT ( *SetColorRGB)(IDirect3DRMFrame *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);D3DRMZBUFFERMODE ( *GetZbufferMode)(IDirect3DRMFrame *This);HRESULT ( *SetMaterialMode)(IDirect3DRMFrame *This, D3DRMMATERIALMODE);HRESULT ( *SetOrientation)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz);HRESULT ( *SetPosition)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetRotation)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta);HRESULT ( *SetSortMode)(IDirect3DRMFrame *This, D3DRMSORTMODE);HRESULT ( *SetTexture)(IDirect3DRMFrame *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetTextureTopology)(IDirect3DRMFrame *This, BOOL wrap_u, BOOL wrap_v);HRESULT ( *SetVelocity)(IDirect3DRMFrame *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, BOOL with_rotation);HRESULT ( *SetZbufferMode)(IDirect3DRMFrame *This, D3DRMZBUFFERMODE);HRESULT ( *Transform)(IDirect3DRMFrame *This, D3DVECTOR *d, D3DVECTOR *s);};
struct IDirect3DRMFrame2Vtbl {HRESULT ( *QueryInterface)(IDirect3DRMFrame2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMFrame2 *This);ULONG ( *Release)(IDirect3DRMFrame2 *This);HRESULT ( *Clone)(IDirect3DRMFrame2 *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMFrame2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMFrame2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMFrame2 *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMFrame2 *This);HRESULT ( *SetName)(IDirect3DRMFrame2 *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMFrame2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMFrame2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *AddChild)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME child);HRESULT ( *AddLight)(IDirect3DRMFrame2 *This, LPDIRECT3DRMLIGHT);HRESULT ( *AddMoveCallback)(IDirect3DRMFrame2 *This, D3DRMFRAMEMOVECALLBACK, void *arg);HRESULT ( *AddTransform)(IDirect3DRMFrame2 *This, D3DRMCOMBINETYPE, D3DRMMATRIX4D);HRESULT ( *AddTranslation)(IDirect3DRMFrame2 *This, D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *AddScale)(IDirect3DRMFrame2 *This, D3DRMCOMBINETYPE, D3DVALUE sx, D3DVALUE sy, D3DVALUE sz);HRESULT ( *AddRotation)(IDirect3DRMFrame2 *This, D3DRMCOMBINETYPE, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta);HRESULT ( *AddVisual)(IDirect3DRMFrame2 *This, LPDIRECT3DRMVISUAL);HRESULT ( *GetChildren)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAMEARRAY *children);D3DCOLOR ( *GetColor)(IDirect3DRMFrame2 *This);HRESULT ( *GetLights)(IDirect3DRMFrame2 *This, LPDIRECT3DRMLIGHTARRAY *lights);D3DRMMATERIALMODE ( *GetMaterialMode)(IDirect3DRMFrame2 *This);HRESULT ( *GetParent)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME *);HRESULT ( *GetPosition)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_position);HRESULT ( *GetRotation)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR axis, LPD3DVALUE return_theta);HRESULT ( *GetScene)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME *);D3DRMSORTMODE ( *GetSortMode)(IDirect3DRMFrame2 *This);HRESULT ( *GetTexture)(IDirect3DRMFrame2 *This, LPDIRECT3DRMTEXTURE *);HRESULT ( *GetTransform)(IDirect3DRMFrame2 *This, D3DRMMATRIX4D return_matrix);HRESULT ( *GetVelocity)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR return_velocity, BOOL with_rotation);HRESULT ( *GetOrientation)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, LPD3DVECTOR dir, LPD3DVECTOR up);HRESULT ( *GetVisuals)(IDirect3DRMFrame2 *This, LPDIRECT3DRMVISUALARRAY *visuals);HRESULT ( *GetTextureTopology)(IDirect3DRMFrame2 *This, BOOL *wrap_u, BOOL *wrap_v);HRESULT ( *InverseTransform)(IDirect3DRMFrame2 *This, D3DVECTOR *d, D3DVECTOR *s);HRESULT ( *Load)(IDirect3DRMFrame2 *This, LPVOID filename, LPVOID name, D3DRMLOADOPTIONS loadflags, D3DRMLOADTEXTURECALLBACK, LPVOID lpArg);HRESULT ( *LookAt)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME target, LPDIRECT3DRMFRAME reference, D3DRMFRAMECONSTRAINT);HRESULT ( *Move)(IDirect3DRMFrame2 *This, D3DVALUE delta);HRESULT ( *DeleteChild)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME);HRESULT ( *DeleteLight)(IDirect3DRMFrame2 *This, LPDIRECT3DRMLIGHT);HRESULT ( *DeleteMoveCallback)(IDirect3DRMFrame2 *This, D3DRMFRAMEMOVECALLBACK, void *arg);HRESULT ( *DeleteVisual)(IDirect3DRMFrame2 *This, LPDIRECT3DRMVISUAL);D3DCOLOR ( *GetSceneBackground)(IDirect3DRMFrame2 *This);HRESULT ( *GetSceneBackgroundDepth)(IDirect3DRMFrame2 *This, LPDIRECTDRAWSURFACE *);D3DCOLOR ( *GetSceneFogColor)(IDirect3DRMFrame2 *This);BOOL ( *GetSceneFogEnable)(IDirect3DRMFrame2 *This);D3DRMFOGMODE ( *GetSceneFogMode)(IDirect3DRMFrame2 *This);HRESULT ( *GetSceneFogParams)(IDirect3DRMFrame2 *This, D3DVALUE *return_start, D3DVALUE *return_end, D3DVALUE *return_density);HRESULT ( *SetSceneBackground)(IDirect3DRMFrame2 *This, D3DCOLOR);HRESULT ( *SetSceneBackgroundRGB)(IDirect3DRMFrame2 *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);HRESULT ( *SetSceneBackgroundDepth)(IDirect3DRMFrame2 *This, LPDIRECTDRAWSURFACE);HRESULT ( *SetSceneBackgroundImage)(IDirect3DRMFrame2 *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetSceneFogEnable)(IDirect3DRMFrame2 *This, BOOL);HRESULT ( *SetSceneFogColor)(IDirect3DRMFrame2 *This, D3DCOLOR);HRESULT ( *SetSceneFogMode)(IDirect3DRMFrame2 *This, D3DRMFOGMODE);HRESULT ( *SetSceneFogParams)(IDirect3DRMFrame2 *This, D3DVALUE start, D3DVALUE end, D3DVALUE density);HRESULT ( *SetColor)(IDirect3DRMFrame2 *This, D3DCOLOR);HRESULT ( *SetColorRGB)(IDirect3DRMFrame2 *This, D3DVALUE red, D3DVALUE green, D3DVALUE blue);D3DRMZBUFFERMODE ( *GetZbufferMode)(IDirect3DRMFrame2 *This);HRESULT ( *SetMaterialMode)(IDirect3DRMFrame2 *This, D3DRMMATERIALMODE);HRESULT ( *SetOrientation)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz);HRESULT ( *SetPosition)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z);HRESULT ( *SetRotation)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, D3DVALUE theta);HRESULT ( *SetSortMode)(IDirect3DRMFrame2 *This, D3DRMSORTMODE);HRESULT ( *SetTexture)(IDirect3DRMFrame2 *This, LPDIRECT3DRMTEXTURE);HRESULT ( *SetTextureTopology)(IDirect3DRMFrame2 *This, BOOL wrap_u, BOOL wrap_v);HRESULT ( *SetVelocity)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, D3DVALUE x, D3DVALUE y, D3DVALUE z, BOOL with_rotation);HRESULT ( *SetZbufferMode)(IDirect3DRMFrame2 *This, D3DRMZBUFFERMODE);HRESULT ( *Transform)(IDirect3DRMFrame2 *This, D3DVECTOR *d, D3DVECTOR *s);HRESULT ( *AddMoveCallback2)(IDirect3DRMFrame2 *This, D3DRMFRAMEMOVECALLBACK, void *arg, DWORD dwFlags);HRESULT ( *GetBox)(IDirect3DRMFrame2 *This, LPD3DRMBOX);BOOL ( *GetBoxEnable)(IDirect3DRMFrame2 *This);HRESULT ( *GetAxes)(IDirect3DRMFrame2 *This, LPD3DVECTOR dir, LPD3DVECTOR up);HRESULT ( *GetMaterial)(IDirect3DRMFrame2 *This, LPDIRECT3DRMMATERIAL *);BOOL ( *GetInheritAxes)(IDirect3DRMFrame2 *This);HRESULT ( *GetHierarchyBox)(IDirect3DRMFrame2 *This, LPD3DRMBOX);HRESULT ( *SetBox)(IDirect3DRMFrame2 *This, LPD3DRMBOX);HRESULT ( *SetBoxEnable)(IDirect3DRMFrame2 *This, BOOL);HRESULT ( *SetAxes)(IDirect3DRMFrame2 *This, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz);HRESULT ( *SetInheritAxes)(IDirect3DRMFrame2 *This, BOOL inherit_from_parent);HRESULT ( *SetMaterial)(IDirect3DRMFrame2 *This, LPDIRECT3DRMMATERIAL);HRESULT ( *SetQuaternion)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, D3DRMQUATERNION *q);HRESULT ( *RayPick)(IDirect3DRMFrame2 *This, LPDIRECT3DRMFRAME reference, LPD3DRMRAY ray, DWORD dwFlags, LPDIRECT3DRMPICKED2ARRAY *return_visuals);HRESULT ( *Save)(IDirect3DRMFrame2 *This, LPCSTR filename, D3DRMXOFFORMAT d3dFormat, D3DRMSAVEOPTIONS d3dSaveFlags);};
struct IASQLOLEServerVtbl {HRESULT ( *QueryInterface)(IASQLOLEServer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEServer *This);ULONG ( *Release)(IASQLOLEServer *This);HRESULT ( *GetApplication)(IASQLOLEServer *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEServer *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEServer *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEServer *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEServer *This, LPVOID lpvNewValue);HRESULT ( *GetApplicationName)(IASQLOLEServer *This, LPBSTRA pbstrAppName);HRESULT ( *SetApplicationName)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetConnectionID)(IASQLOLEServer *This, LPLONG plConnectionID);HRESULT ( *GetHostName)(IASQLOLEServer *This, LPBSTRA pbstrHostName);HRESULT ( *SetHostName)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetLanguage)(IASQLOLEServer *This, LPBSTRA pbstrLanguage);HRESULT ( *SetLanguage)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetLogin)(IASQLOLEServer *This, LPBSTRA pbstrLogin);HRESULT ( *SetLogin)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetName)(IASQLOLEServer *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetNextDeviceNumber)(IASQLOLEServer *This, LPLONG plNextDeviceNumber);HRESULT ( *GetQueryTimeout)(IASQLOLEServer *This, LPLONG pRetVal);HRESULT ( *SetQueryTimeout)(IASQLOLEServer *This, int NewValue);HRESULT ( *GetLoginTimeout)(IASQLOLEServer *This, LPLONG pRetVal);HRESULT ( *SetLoginTimeout)(IASQLOLEServer *This, int NewValue);HRESULT ( *GetLoginSecure)(IASQLOLEServer *This, LPBOOL pRetVal);HRESULT ( *SetLoginSecure)(IASQLOLEServer *This, BOOL NewValue);HRESULT ( *GetNetPacketSize)(IASQLOLEServer *This, LPLONG pRetVal);HRESULT ( *SetNetPacketSize)(IASQLOLEServer *This, int NewValue);HRESULT ( *GetPassword)(IASQLOLEServer *This, LPBSTRA pbstrPassword);HRESULT ( *SetPassword)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetProcessID)(IASQLOLEServer *This, LPLONG plProcessID);HRESULT ( *GetStatus)(IASQLOLEServer *This, SQLOLE_SVCSTATUS_TYPE *pStatus);HRESULT ( *GetUserProfile)(IASQLOLEServer *This, SQLOLE_SRVUSERPROFILE_TYPE *pProfileBits);HRESULT ( *GetMaxNumericPrecision)(IASQLOLEServer *This, LPLONG pMaxPrec);HRESULT ( *GetTrueLogin)(IASQLOLEServer *This, LPBSTRA pbstrTrueLogin);HRESULT ( *GetTrueName)(IASQLOLEServer *This, LPBSTRA pbstrTrueName);HRESULT ( *GetVersionString)(IASQLOLEServer *This, LPBSTRA pbstrVersion);HRESULT ( *GetVersionMajor)(IASQLOLEServer *This, LPLONG pRetVal);HRESULT ( *GetVersionMinor)(IASQLOLEServer *This, LPLONG pRetVal);HRESULT ( *GetCommandTerminator)(IASQLOLEServer *This, LPBSTRA pbstrName);HRESULT ( *SetCommandTerminator)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetProcessInputBuffer)(IASQLOLEServer *This, int lProcessID, LPBSTRA pRetVal);HRESULT ( *GetProcessOutputBuffer)(IASQLOLEServer *This, int lProcessID, LPBSTRA pRetVal);HRESULT ( *GetDistributionWorkingDirectory)(IASQLOLEServer *This, LPBSTRA pRetVal);HRESULT ( *SetDistributionWorkingDirectory)(IASQLOLEServer *This, LPCSTR NewValue);HRESULT ( *GetDistributionServer)(IASQLOLEServer *This, LPBSTRA pRetVal);HRESULT ( *GetDistributionDatabase)(IASQLOLEServer *This, LPBSTRA pRetVal);HRESULT ( *GetAutoReConnect)(IASQLOLEServer *This, LPBOOL pRetVal);HRESULT ( *SetAutoReConnect)(IASQLOLEServer *This, BOOL NewValue);HRESULT ( *GetStatusInfoRefetchInterval)(IASQLOLEServer *This, SQLOLE_STATUSINFO_TYPE StatusInfoType, LPLONG pRefetchSeconds);HRESULT ( *SetStatusInfoRefetchInterval)(IASQLOLEServer *This, SQLOLE_STATUSINFO_TYPE StatusInfoType, int RefetchSeconds);HRESULT ( *GetSaLogin)(IASQLOLEServer *This, LPBOOL pRetVal);HRESULT ( *GetConfiguration)(IASQLOLEServer *This, LPASQLOLECONFIGURATION *ppConfig);HRESULT ( *GetIntegratedSecurity)(IASQLOLEServer *This, LPASQLOLEINTEGRATEDSECURITY *ppIntSec);HRESULT ( *GetRegistry)(IASQLOLEServer *This, LPASQLOLEREGISTRY *ppRegistry);HRESULT ( *GetExecutive)(IASQLOLEServer *This, LPASQLOLEEXECUTIVE *ppExecutive);HRESULT ( *GetDatabases)(IASQLOLEServer *This, LPASQLOLEDATABASES *ppDatabases);HRESULT ( *GetDatabaseByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLEDATABASE *ppDatabase);HRESULT ( *GetDatabaseByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLEDATABASE *ppDatabase);HRESULT ( *RemoveDatabaseByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveDatabaseByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddDatabase)(IASQLOLEServer *This, LPASQLOLEDATABASE pDatabase);HRESULT ( *GetDatabaseCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetDevices)(IASQLOLEServer *This, LPASQLOLEDEVICES *ppDevices);HRESULT ( *GetDeviceByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLEDEVICE *ppDevice);HRESULT ( *GetDeviceByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLEDEVICE *ppDevice);HRESULT ( *RemoveDeviceByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveDeviceByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddDevice)(IASQLOLEServer *This, LPASQLOLEDEVICE pDevice);HRESULT ( *GetDeviceCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetLogins)(IASQLOLEServer *This, LPASQLOLELOGINS *ppLogins);HRESULT ( *GetLoginByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLELOGIN *ppLogin);HRESULT ( *GetLoginByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLELOGIN *ppLogin);HRESULT ( *RemoveLoginByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveLoginByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddLogin)(IASQLOLEServer *This, LPASQLOLELOGIN pLogin);HRESULT ( *GetLoginCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetLanguages)(IASQLOLEServer *This, LPASQLOLELANGUAGES *ppLanguages);HRESULT ( *GetLanguageByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLELANGUAGE *ppLanguage);HRESULT ( *GetLanguageByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLELANGUAGE *ppLanguage);HRESULT ( *RemoveLanguageByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveLanguageByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddLanguage)(IASQLOLEServer *This, LPASQLOLELANGUAGE pLanguage);HRESULT ( *GetLanguageCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetRemoteServers)(IASQLOLEServer *This, LPASQLOLEREMOTESERVERS *ppRemoteServers);HRESULT ( *GetRemoteServerByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLEREMOTESERVER *ppRemoteServer);HRESULT ( *GetRemoteServerByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLEREMOTESERVER *ppRemoteServer);HRESULT ( *RemoveRemoteServerByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveRemoteServerByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddRemoteServer)(IASQLOLEServer *This, LPASQLOLEREMOTESERVER pRemoteServer);HRESULT ( *GetRemoteServerCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetAlerts)(IASQLOLEServer *This, LPASQLOLEALERTS *ppAlerts);HRESULT ( *GetAlertByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLEALERT *ppAlert);HRESULT ( *GetAlertByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLEALERT *ppAlert);HRESULT ( *RemoveAlertByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveAlertByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddAlert)(IASQLOLEServer *This, LPASQLOLEALERT pAlert);HRESULT ( *GetAlertCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *GetOperators)(IASQLOLEServer *This, LPASQLOLEOPERATORS *ppOperators);HRESULT ( *GetOperatorByName)(IASQLOLEServer *This, LPCSTR szName, LPASQLOLEOPERATOR *ppOperator);HRESULT ( *GetOperatorByOrd)(IASQLOLEServer *This, int lOrdinal, LPASQLOLEOPERATOR *ppOperator);HRESULT ( *RemoveOperatorByName)(IASQLOLEServer *This, LPCSTR szName);HRESULT ( *RemoveOperatorByOrd)(IASQLOLEServer *This, int lOrdinal);HRESULT ( *AddOperator)(IASQLOLEServer *This, LPASQLOLEOPERATOR pOperator);HRESULT ( *GetOperatorCount)(IASQLOLEServer *This, LPLONG plCount);HRESULT ( *Connect)(IASQLOLEServer *This, LPCSTR szServerName, LPCSTR szLogin, LPCSTR szPassword);HRESULT ( *Close)(IASQLOLEServer *This);HRESULT ( *DisConnect)(IASQLOLEServer *This);HRESULT ( *ReConnect)(IASQLOLEServer *This);HRESULT ( *KillProcess)(IASQLOLEServer *This, int lProcessID);HRESULT ( *ExecuteImmediate)(IASQLOLEServer *This, LPCSTR Command, SQLOLE_EXEC_TYPE ExecType);HRESULT ( *ExecuteWithResults)(IASQLOLEServer *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumHistory)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, LPASQLOLEHISTORYFILTER pFilter);HRESULT ( *PurgeHistory)(IASQLOLEServer *This, LPASQLOLEHISTORYFILTER pFilter);HRESULT ( *UnloadODSDLL)(IASQLOLEServer *This, LPCSTR DLLName);HRESULT ( *KillDatabase)(IASQLOLEServer *This, LPCSTR DatabaseName);HRESULT ( *ReadErrorLog)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, int lLogNumber);HRESULT ( *EnumErrorLogs)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumProcesses)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR szWho, int lWho);HRESULT ( *EnumLocks)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, int lWho);HRESULT ( *ReadBackupHeader)(IASQLOLEServer *This, LPASQLOLEBACKUP LoadSpec, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumPublicationDatabases)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumSubscriptionDatabases)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumSubscriberSubscriptions)(IASQLOLEServer *This, LPCSTR Subscriber, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR SourceDatabase);HRESULT ( *RemoveSubscriberSubscriptions)(IASQLOLEServer *This, LPCSTR Subscriber, LPCSTR SourceDatabase);HRESULT ( *EnumAvailableMedia)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_MEDIA_TYPE MediaType);HRESULT ( *EnumDirectories)(IASQLOLEServer *This, LPCSTR PathName, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumServerAttributes)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *EnumVersionInfo)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults, LPCSTR szPrefixes);HRESULT ( *BeginTransaction)(IASQLOLEServer *This, LPCSTR szTransactionName);HRESULT ( *CommitTransaction)(IASQLOLEServer *This, LPCSTR TransactionName);HRESULT ( *SaveTransaction)(IASQLOLEServer *This, LPCSTR SavepointName);HRESULT ( *RollbackTransaction)(IASQLOLEServer *This, LPCSTR TransactionOrSavepointName);HRESULT ( *CommandShellImmediate)(IASQLOLEServer *This, LPCSTR Command);HRESULT ( *CommandShellWithResults)(IASQLOLEServer *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *Pause)(IASQLOLEServer *This);HRESULT ( *Continue)(IASQLOLEServer *This);HRESULT ( *Shutdown)(IASQLOLEServer *This, BOOL Wait);HRESULT ( *Start)(IASQLOLEServer *This, LPCSTR Server, LPCSTR Login, LPCSTR Password, LPCSTR MasterDBPath, LPCSTR ErrorLogPath, LPCSTR MasterMirrorPath, SQLOLE_STARTSRV_TYPE StartMode);HRESULT ( *VerifyConnection)(IASQLOLEServer *This, LPBOOL pRetVal, SQLOLE_VERIFYCONN_TYPE VerifyType);HRESULT ( *ListStartupProcedures)(IASQLOLEServer *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ExecuteWithResultsAndMessages)(IASQLOLEServer *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults, LPBSTRA ppszMessages);HRESULT ( *GetNetName)(IASQLOLEServer *This, LPBSTRA pbstrNetName);HRESULT ( *EnumLoginMappings)(IASQLOLEServer *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *UninstallPublishing)(IASQLOLEServer *This);};
struct IASQLOLEDatabaseVtbl {HRESULT ( *QueryInterface)(IASQLOLEDatabase *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IASQLOLEDatabase *This);ULONG ( *Release)(IASQLOLEDatabase *This);HRESULT ( *GetApplication)(IASQLOLEDatabase *This, LPASQLOLEAPPLICATION *ppApp);HRESULT ( *GetParent)(IASQLOLEDatabase *This, LPASQLOLESTDOBJECT *ppParent);HRESULT ( *GetTypeOf)(IASQLOLEDatabase *This, SQLOLE_OBJECT_TYPE *pRetVal);HRESULT ( *GetUserData)(IASQLOLEDatabase *This, LPVOID *pRetVal);HRESULT ( *SetUserData)(IASQLOLEDatabase *This, LPVOID lpvNewValue);HRESULT ( *GetName)(IASQLOLEDatabase *This, LPBSTRA pbstrName);HRESULT ( *SetName)(IASQLOLEDatabase *This, LPCSTR NewValue);HRESULT ( *GetOwner)(IASQLOLEDatabase *This, LPBSTRA pRetVal);HRESULT ( *SetOwner)(IASQLOLEDatabase *This, LPCSTR NewValue, BOOL bTransferAliases, BOOL bOverrideIfAlreadyUser);HRESULT ( *GetVersion)(IASQLOLEDatabase *This, LPLONG pRetVal);HRESULT ( *GetCreateDate)(IASQLOLEDatabase *This, LPBSTRA pRetVal);HRESULT ( *GetUserNameA)(IASQLOLEDatabase *This, LPBSTRA pRetVal);HRESULT ( *SetUserName)(IASQLOLEDatabase *This, LPCSTR NewValue);HRESULT ( *GetSize)(IASQLOLEDatabase *This, LPLONG pRetVal);HRESULT ( *GetSpaceAvailable)(IASQLOLEDatabase *This, LPLONG pRetVal);HRESULT ( *GetID)(IASQLOLEDatabase *This, LPLONG pRetVal);HRESULT ( *GetSystemObject)(IASQLOLEDatabase *This, LPBOOL pRetVal);HRESULT ( *GetUserProfile)(IASQLOLEDatabase *This, SQLOLE_DBUSERPROFILE_TYPE *pProfileBits);HRESULT ( *GetDataSpaceUsage)(IASQLOLEDatabase *This, LPFLOAT pRetVal);HRESULT ( *GetStatus)(IASQLOLEDatabase *This, SQLOLE_DBSTATUS_TYPE *pRetVal);HRESULT ( *GetIndexSpaceUsage)(IASQLOLEDatabase *This, LPFLOAT pRetVal);HRESULT ( *GetSpaceAvailableInMB)(IASQLOLEDatabase *This, LPFLOAT pRetVal);HRESULT ( *GetSpaceAllocatedOnDevice)(IASQLOLEDatabase *This, LPCSTR DeviceName, LPLONG pRetVal);HRESULT ( *GetCreateForLoad)(IASQLOLEDatabase *This, LPBOOL pRetVal);HRESULT ( *SetCreateForLoad)(IASQLOLEDatabase *This, BOOL NewValue);HRESULT ( *ManualSyncPending)(IASQLOLEDatabase *This, LPCSTR szPubServerName, LPCSTR szPubDatabaseName, LPCSTR szPublicationName, LPCSTR szArticleName, LPBOOL pRetVal);HRESULT ( *GetMinimumSize)(IASQLOLEDatabase *This, LPLONG pRetVal);HRESULT ( *GetDboLogin)(IASQLOLEDatabase *This, LPBOOL pRetVal);HRESULT ( *GetDBOption)(IASQLOLEDatabase *This, LPASQLOLEDBOPTION *ppDBOption);HRESULT ( *GetTransactionLog)(IASQLOLEDatabase *This, LPASQLOLETRANSACTIONLOG *ppTransactionLog);HRESULT ( *GetTables)(IASQLOLEDatabase *This, LPASQLOLETABLES *ppTables);HRESULT ( *GetTableByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLETABLE *ppTable);HRESULT ( *GetTableByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLETABLE *ppTable);HRESULT ( *RemoveTableByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveTableByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddTable)(IASQLOLEDatabase *This, LPASQLOLETABLE pTable);HRESULT ( *GetTableCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetViews)(IASQLOLEDatabase *This, LPASQLOLEVIEWS *ppViews);HRESULT ( *GetViewByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEVIEW *ppView);HRESULT ( *GetViewByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEVIEW *ppView);HRESULT ( *RemoveViewByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveViewByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddView)(IASQLOLEDatabase *This, LPASQLOLEVIEW pView);HRESULT ( *GetViewCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetStoredProcedures)(IASQLOLEDatabase *This, LPASQLOLESTOREDPROCEDURES *ppProcs);HRESULT ( *GetStoredProcedureByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLESTOREDPROCEDURE *ppProc);HRESULT ( *GetStoredProcedureByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLESTOREDPROCEDURE *ppProc);HRESULT ( *RemoveStoredProcedureByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveStoredProcedureByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddStoredProcedure)(IASQLOLEDatabase *This, LPASQLOLESTOREDPROCEDURE pProc);HRESULT ( *GetStoredProcedureCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetDefaults)(IASQLOLEDatabase *This, LPASQLOLEDEFAULTS *ppDefaults);HRESULT ( *GetDefaultByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEDEFAULT *ppDefault);HRESULT ( *GetDefaultByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEDEFAULT *ppDefault);HRESULT ( *RemoveDefaultByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveDefaultByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddDefault)(IASQLOLEDatabase *This, LPASQLOLEDEFAULT pDefault);HRESULT ( *GetDefaultCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetRules)(IASQLOLEDatabase *This, LPASQLOLERULES *ppRules);HRESULT ( *GetRuleByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLERULE *ppRule);HRESULT ( *GetRuleByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLERULE *ppRule);HRESULT ( *RemoveRuleByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveRuleByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddRule)(IASQLOLEDatabase *This, LPASQLOLERULE pRule);HRESULT ( *GetRuleCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetUserDefinedDatatypes)(IASQLOLEDatabase *This, LPASQLOLEUSERDEFINEDDATATYPES *ppUDDTs);HRESULT ( *GetUserDefinedDatatypeByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEUSERDEFINEDDATATYPE *ppUDDT);HRESULT ( *GetUserDefinedDatatypeByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEUSERDEFINEDDATATYPE *ppUDDT);HRESULT ( *RemoveUserDefinedDatatypeByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveUserDefinedDatatypeByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddUserDefinedDatatype)(IASQLOLEDatabase *This, LPASQLOLEUSERDEFINEDDATATYPE pUDDT);HRESULT ( *GetUserDefinedDatatypeCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetUsers)(IASQLOLEDatabase *This, LPASQLOLEUSERS *ppUsers);HRESULT ( *GetUserByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEUSER *ppUser);HRESULT ( *GetUserByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEUSER *ppUser);HRESULT ( *RemoveUserByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveUserByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddUser)(IASQLOLEDatabase *This, LPASQLOLEUSER pUser);HRESULT ( *GetUserCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetGroups)(IASQLOLEDatabase *This, LPASQLOLEGROUPS *ppGroups);HRESULT ( *GetGroupByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEGROUP *ppGroup);HRESULT ( *GetGroupByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEGROUP *ppGroup);HRESULT ( *RemoveGroupByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemoveGroupByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddGroup)(IASQLOLEDatabase *This, LPASQLOLEGROUP pGroup);HRESULT ( *GetGroupCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetPublications)(IASQLOLEDatabase *This, LPASQLOLEPUBLICATIONS *ppPublications);HRESULT ( *GetPublicationByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEPUBLICATION *ppPublication);HRESULT ( *GetPublicationByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLEPUBLICATION *ppPublication);HRESULT ( *RemovePublicationByName)(IASQLOLEDatabase *This, LPCSTR szName);HRESULT ( *RemovePublicationByOrd)(IASQLOLEDatabase *This, int lOrdinal);HRESULT ( *AddPublication)(IASQLOLEDatabase *This, LPASQLOLEPUBLICATION pPublication);HRESULT ( *GetPublicationCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *GetSystemDatatypes)(IASQLOLEDatabase *This, LPASQLOLESYSTEMDATATYPES *ppSDTs);HRESULT ( *GetSystemDatatypeByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLESYSTEMDATATYPE *ppSDT);HRESULT ( *GetSystemDatatypeByOrd)(IASQLOLEDatabase *This, int lOrdinal, LPASQLOLESYSTEMDATATYPE *ppSDT);HRESULT ( *GetSystemDatatypeCount)(IASQLOLEDatabase *This, LPLONG plCount);HRESULT ( *Grant)(IASQLOLEDatabase *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR GranteeNames);HRESULT ( *Revoke)(IASQLOLEDatabase *This, SQLOLE_PRIVILEGE_TYPE iPrivileges, LPCSTR RevokeeNames);HRESULT ( *ExecuteImmediate)(IASQLOLEDatabase *This, LPCSTR Command, SQLOLE_EXEC_TYPE ExecType);HRESULT ( *ExecuteWithResults)(IASQLOLEDatabase *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *Checkpoint)(IASQLOLEDatabase *This);HRESULT ( *CheckTables)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *CheckAllocations)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *CheckCatalog)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *CheckTextAllocsFast)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *CheckTextAllocsFull)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *GetMemoryUsage)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *EnumLocks)(IASQLOLEDatabase *This, LPASQLOLEQUERYRESULTS *ppResults, int lWho);HRESULT ( *Remove)(IASQLOLEDatabase *This);HRESULT ( *ExtendOnDevices)(IASQLOLEDatabase *This, LPCSTR DeviceNames);HRESULT ( *Dump)(IASQLOLEDatabase *This, LPASQLOLEBACKUP DumpSpec);HRESULT ( *Load)(IASQLOLEDatabase *This, LPASQLOLEBACKUP LoadSpec);HRESULT ( *GenerateBackupSQL)(IASQLOLEDatabase *This, LPASQLOLEBACKUP DumpSpec, LPBSTRA pSQLStatement);HRESULT ( *GetObjectByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLEDBOBJECT *ppDBObject, SQLOLE_OBJECT_TYPE lType);HRESULT ( *GetDatatypeByName)(IASQLOLEDatabase *This, LPCSTR szName, LPASQLOLESTDOBJECT *ppDBObject);HRESULT ( *ManualSyncCompleted)(IASQLOLEDatabase *This, LPCSTR szPubServerName, LPCSTR szPubDatabaseName, LPCSTR szPublicationName, LPCSTR szArticleName);HRESULT ( *EnumCandidateKeys)(IASQLOLEDatabase *This, LPASQLOLEQUERYRESULTS *ppResults);HRESULT ( *IsValidKeyDatatype)(IASQLOLEDatabase *This, LPCSTR szKeyColType, LPBOOL pRetVal, LPCSTR szReferencingColType);HRESULT ( *Shrink)(IASQLOLEDatabase *This, int lNewSizeInMB);HRESULT ( *RecalcSpaceUsage)(IASQLOLEDatabase *This);HRESULT ( *EnumDependencies)(IASQLOLEDatabase *This, LPASQLOLEQUERYRESULTS *ppResults, SQLOLE_DEPENDENCY_TYPE DependencyType);HRESULT ( *ListObjectPermissions)(IASQLOLEDatabase *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListDatabasePermissions)(IASQLOLEDatabase *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_PRIVILEGE_TYPE lPrivilegeTypes);HRESULT ( *ListDevices)(IASQLOLEDatabase *This, LPASQLOLEOBJECTLIST *ppList);HRESULT ( *ListObjects)(IASQLOLEDatabase *This, LPASQLOLEOBJECTLIST *ppList, SQLOLE_OBJECT_TYPE lObjectTypes, SQLOLE_OBJSORT_TYPE SortBy);HRESULT ( *Transfer)(IASQLOLEDatabase *This, LPASQLOLETRANSFER TransferSpec);HRESULT ( *ScriptTransfer)(IASQLOLEDatabase *This, LPASQLOLETRANSFER TransferSpec, SQLOLE_XFRSCRIPTMODE_TYPE ScriptFileMode, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *CheckIdentityValues)(IASQLOLEDatabase *This);HRESULT ( *ExecuteWithResultsAndMessages)(IASQLOLEDatabase *This, LPCSTR Command, LPASQLOLEQUERYRESULTS *ppResults, LPBSTRA ppszMessages);HRESULT ( *Script)(IASQLOLEDatabase *This, SQLOLE_SCRIPT_TYPE ScriptType, LPCSTR ScriptFilePath, LPBSTRA ScriptText);HRESULT ( *CheckTablesDataOnly)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *CheckAllocationsDataOnly)(IASQLOLEDatabase *This, LPBSTRA pResult);HRESULT ( *UpdateIndexStatistics)(IASQLOLEDatabase *This);HRESULT ( *EnumLoginMappings)(IASQLOLEDatabase *This, LPASQLOLEQUERYRESULTS *ppResults);};
struct bufelt___8899DE19478DD9A30897A768D03DABCC___D2918238ED4827AFD39ED5377ABF4AE5 {SNCHARRU BBUFF0Z;};
union _33C4C3464C1F55DF358037E82FD3A381___543FA3AE02DFE9E044D92CF6A451C814 {struct ____543FA3AE02DFE9E044D92CF6A451C814___17DF1E99E4527329F6C5B633745778B6 s1;};
struct _87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379 {DWORDLONG UnsignedMinimum;DWORDLONG UnsignedMaximum;};
union _D3DTLVERTEX___30594A6BB70EFF251680D22A869004B0 {D3DCOLOR specular;D3DCOLOR dcSpecular;};
union _D3DTLVERTEX___34D6BCDD47B44126D7A203197E7A8282 {D3DCOLOR color;D3DCOLOR dcColor;};
union _KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67 {struct _KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67___699DD847B0F9C515D4C82B3BB6B28060 EventHandle;};
union _D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 {D3DCOLOR specular;D3DCOLOR dcSpecular;};
union _D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 {D3DCOLOR color;D3DCOLOR dcColor;};
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 {struct tagTYPEDESC *lptdesc;struct tagARRAYDESC *lpadesc;HREFTYPE hreftype;};
union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57 {PCHAR *modv_strvals;struct berval **modv_bvals;};
struct __MIDL___MIDL_itf_strmif_0074_0001 { CLSID *clsMajorType; CLSID *clsMinorType;};
struct _27240A871129E8C5EF2505ED059D4BC8 {unsigned int DispatchTableCount;RPC_DISPATCH_FUNCTION *DispatchTable;int Reserved;};
struct _284877062F9D14F112F3A0D6BC9583DD {DWORDLONG MaximumSize;DWORDLONG AllocationDelta;};
struct _9624B207E0A914870924A3D14631D94B {union _9624B207E0A914870924A3D14631D94B___5E4550463BAFEE6E8C703CAEAD9B5F63 Value;unsigned int OperandValid : 1;unsigned int Format : 4;};
typedef HRESULT (*PFN_PROVIDER_TESTFINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef HOSTSEC_DISPATCH_CURRENT_VERSION *PHOSTSEC_DISPATCH_CURRENT_VERSION;
typedef NTSEC_DISPATCH_CURRENT_VERSION *PNTSEC_DISPATCH_CURRENT_VERSION;
typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
typedef BOOLEAN (*PSAM_INIT_NOTIFICATION_ROUTINE)();
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
struct _MPR50_SERVICE_CHARACTERISTICS {_MPR40_SERVICE_CHARACTERISTICS __anonymous0;};
typedef DPMSG_DELETEPLAYERFROMGROUP *LPDPMSG_DELETEPLAYERFROMGROUP;
typedef HRESULT (*PFN_PROVIDER_FINALPOLICY_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _IPX_STATIC_NETBIOS_NAME_INFO {_IPX_STATIC_NETBIOS_NAME_INFO___78CE80410E7D5482A942DBDEECB6BC55 __anonymous0;};
struct _POLICY_AUDIT_FULL_QUERY_INFO {BOOLEAN ShutDownOnFull;BOOLEAN LogIsFull;};
struct _SecPkgContext_PasswordExpiry {TimeStamp tsPasswordExpires;};
typedef DPMSG_DELETEGROUPFROMGROUP *LPDPMSG_DELETEGROUPFROMGROUP;
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef MPR_ROUTING_CHARACTERISTICS *PMPR_ROUTING_CHARACTERISTICS;
typedef MPR_SERVICE_CHARACTERISTICS *PMPR_SERVICE_CHARACTERISTICS;
struct _LSA_ENUMERATION_INFORMATION {PSID Sid;};
struct _POLICY_LSA_SERVER_ROLE_INFO {POLICY_LSA_SERVER_ROLE LsaServerRole;};
typedef HRESULT (*PFN_PROVIDER_CERTTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
struct _POLICY_AUDIT_FULL_SET_INFO {BOOLEAN ShutDownOnFull;};
typedef INTERNET_STATUS_CALLBACK *LPINTERNET_STATUS_CALLBACK;
typedef HRESULT (*PFN_PROVIDER_OBJTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef HRESULT (*PFN_PROVIDER_SIGTRUST_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
struct _DEV_BROADCAST_USERDEFINED {struct _DEV_BROADCAST_HDR dbud_dbh;char dbud_szName[1];};
struct _LOCALGROUP_MEMBERS_INFO_0 {PSID lgrmi0_sid;};
typedef CREATECONVERSATIONINDEX *LPCREATECONVERSATIONINDEX;
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
struct _SecPkgContext_AuthorityA {SEC_CHAR *sAuthorityName;};
struct _SecPkgContext_ProtoInfoA {SEC_CHAR *sProtocolName;unsigned int majorVersion;unsigned int minorVersion;};
struct _SecPkgCredentials_NamesA {SEC_CHAR *sUserName;};
typedef MCI_DGV_UNFREEZE_PARMS *LPMCI_DGV_UNFREEZE_PARMS;
struct tagCInterfaceProxyHeader { IID *piid;};
typedef DISPATCHNOTIFICATIONS *LPDISPATCHNOTIFICATIONS;
typedef void  RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event);
struct _PRINTPROCESSOR_INFO_1A {LPSTR pName;};
struct _SecPkgContext_KeyInfoA {SEC_CHAR *sSignatureAlgorithmName;SEC_CHAR *sEncryptAlgorithmName;unsigned int KeySize;unsigned int SignatureAlgorithm;unsigned int EncryptAlgorithm;};
struct _SecPkgContext_Lifespan {TimeStamp tsStart;TimeStamp tsExpiry;};
struct _XMIT_ROUTINE_QUINTUPLE {XMIT_HELPER_ROUTINE pfnTranslateToXmit;XMIT_HELPER_ROUTINE pfnTranslateFromXmit;XMIT_HELPER_ROUTINE pfnFreeXmit;XMIT_HELPER_ROUTINE pfnFreeInst;};
typedef SECURITY_STATUS ( *FREE_CONTEXT_BUFFER_FN)(void *);
typedef MCI_DGV_FREEZE_PARMS *LPMCI_DGV_FREEZE_PARMS;
typedef MCI_DGV_RESUME_PARMS *LPMCI_DGV_RESUME_PARMS;
typedef SERVICEWIZARDDLGPROC *LPSERVICEWIZARDDLGPROC;
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef HRESULT (*PFN_PROVIDER_INIT_CALL)(struct _CRYPT_PROVIDER_DATA *pProvData);
typedef HRESULT (*PMSBDNOUTPUTSENDPACKET)(MSBDN_OUTPUT_SUBSYSTEM *, PACKET_BUFFER *);
typedef void (*PWINDBG_OUTPUT_ROUTINE)(PCSTR lpFormat, ...);
struct _PREVENT_MEDIA_REMOVAL {BOOLEAN PreventMediaRemoval;};
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef MCI_DGV_PAUSE_PARMS *LPMCI_DGV_PAUSE_PARMS;
typedef MCI_DGV_WHERE_PARMS *LPMCI_DGV_WHERE_PARMS;
typedef HRESULT (*PMSBDNOUTPUTGETSTATUS)(MSBDN_OUTPUT_SUBSYSTEM *, HRESULT *);
struct _CRYPT_OID_FUNC_ENTRY {LPCSTR pszOID;void *pvFuncAddr;};
struct _SERVICE_DESCRIPTIONA {LPSTR lpDescription;};
struct _SecPkgContext_NamesA {SEC_CHAR *sUserName;};
struct _UNIVERSAL_NAME_INFOA {LPSTR lpUniversalName;};
typedef MAPIALLOCATEBUFFER *LPMAPIALLOCATEBUFFER;
typedef MCI_DGV_PLAY_PARMS *LPMCI_DGV_PLAY_PARMS;
typedef MCI_DGV_STOP_PARMS *LPMCI_DGV_STOP_PARMS;
typedef HRESULT (*PMSBDNOUTPUTGETVALUE)(MSBDN_OUTPUT_SUBSYSTEM *, MSBDN_OUTPUT_VALUE *);
typedef HRESULT (*PMSBDNOUTPUTSETVALUE)(MSBDN_OUTPUT_SUBSYSTEM *, MSBDN_OUTPUT_VALUE *);
struct _ACTRL_CONTROL_INFOA {LPSTR lpControlId;LPSTR lpControlName;};
struct _RPC_TRANSFER_SYNTAX {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
struct _TOKEN_PRIMARY_GROUP {PSID PrimaryGroup;};
struct linereqmakecallW_tag {WCHAR szDestAddress[80];WCHAR szAppName[40];WCHAR szCalledParty[40];WCHAR szComment[80];};
struct IBaseVideoMixerVtbl {HRESULT ( *SetLeadPin)(IBaseVideoMixer *This, int iPin);HRESULT ( *GetLeadPin)(IBaseVideoMixer *This, int *piPin);HRESULT ( *GetInputPinCount)(IBaseVideoMixer *This, int *piPinCount);HRESULT ( *IsUsingClock)(IBaseVideoMixer *This, int *pbValue);HRESULT ( *SetUsingClock)(IBaseVideoMixer *This, int bValue);HRESULT ( *GetClockPeriod)(IBaseVideoMixer *This, int *pbValue);HRESULT ( *SetClockPeriod)(IBaseVideoMixer *This, int bValue);};
typedef DPMSG_SESSIONLOST *LPDPMSG_SESSIONLOST;
typedef MAPIADMINPROFILES *LPMAPIADMINPROFILES;
typedef MAPISENDDOCUMENTS *LPMAPISENDDOCUMENTS;
typedef MCI_DGV_PUT_PARMS *LPMCI_DGV_PUT_PARMS;
typedef MCI_REALIZE_PARMS *LPMCI_REALIZE_PARMS;
typedef HRESULT (*PMSBDNOUTPUTDESTROY)(MSBDN_OUTPUT_SUBSYSTEM *);
struct _IMAGE_THUNK_DATA32 {union _IMAGE_THUNK_DATA32___0FC9A8C55E35B7004611A96ACAD7866D u1;};
struct _IMAGE_THUNK_DATA64 {union _IMAGE_THUNK_DATA64___BB2F231EB86E4AACC63F6FAB6106CDEF u1;};
struct _RPC_BINDING_VECTOR {unsigned int Count;RPC_BINDING_HANDLE BindingH[1];};
struct _TOKEN_DEFAULT_DACL {PACL DefaultDacl;};
typedef AMGETERRORTEXTPROCA AMGETERRORTEXTPROC;
typedef int ( *EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef LPDDENUMCALLBACKEXA LPDDENUMCALLBACKEX;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef MAPIALLOCATEMORE *LPMAPIALLOCATEMORE;
typedef MCI_LOAD_PARMS MCI_DGV_LOAD_PARMS;
struct _D3DMATRIXMULTIPLY {D3DMATRIXHANDLE hDestMatrix;D3DMATRIXHANDLE hSrcMatrix1;D3DMATRIXHANDLE hSrcMatrix2;};
struct _DATATYPES_INFO_1A {LPSTR pName;};
struct _REMOTE_NAME_INFOA {LPSTR lpUniversalName;LPSTR lpConnectionName;LPSTR lpRemainingPath;};
struct CLUS_SCSI_ADDRESS {CLUS_SCSI_ADDRESS___5F4BDDCB7685585F2847252D477B1D09 __anonymous0;};
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
typedef D3DCOLORMODEL *LPD3DRMCOLORMODEL;
typedef MAPIRESOLVENAME *LPMAPIRESOLVENAME;
typedef MCI_CLOSE_PARMS *LPMCI_CLOSE_PARMS;
typedef MSGSERVICEENTRY *LPMSGSERVICEENTRY;
struct _PROVIDOR_INFO_1A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef ALLOCATEBUFFER *LPALLOCATEBUFFER;
typedef LPDDENUMCALLBACKA LPDDENUMCALLBACK;
typedef HRESULT ( *LPFNCANUNLOADNOW)();
typedef MAPIDELETEMAIL *LPMAPIDELETEMAIL;
typedef MAPIFREEBUFFER *LPMAPIFREEBUFFER;
typedef MAPIINITIALIZE *LPMAPIINITIALIZE;
struct _GENERIC_MAPPING {ACCESS_MASK GenericRead;ACCESS_MASK GenericWrite;ACCESS_MASK GenericExecute;ACCESS_MASK GenericAll;};
struct _MONITOR_INFO_1A {LPSTR pName;};
struct _MONITOR_INFO_2A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
struct tagREGISTERWORDA {LPSTR lpReading;LPSTR lpWord;};
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef D3DCOLORMODEL D3DRMCOLORMODEL;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
typedef ACMDRIVERPROC *LPACMDRIVERPROC;
typedef LPCRECT LPCBORDERWIDTHS;
typedef INTERNET_PORT *LPINTERNET_PORT;
typedef NOTIFCALLBACK *LPNOTIFCALLBACK;
typedef TEXTMETRICOLE *LPTEXTMETRICOLE;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
struct _BackupListNode {struct _BackupListNode *pnodeNext;struct _BackupListNode *pnodeChildren;RPC_SZ szName;};
struct _DRIVER_INFO_1A {LPSTR pName;};
struct _FLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;STGMEDIUM Stgmed;};
struct _SHNAMEMAPPINGA {LPSTR pszOldPath;LPSTR pszNewPath;int cchOldPath;int cchNewPath;};
struct _userCLIPFORMAT {int fContext;union _userCLIPFORMAT____MIDL_IWinTypes_0001 u;};
struct tagHELPWININFOW {int wStructSize;int x;int y;int dx;int dy;int wMax;WCHAR rgchMember[2];};
typedef ALLOCATEMORE *LPALLOCATEMORE;
typedef PBMCALLBACKFN LPBMCALLBACKFN;
typedef MAPIFINDNEXT *LPMAPIFINDNEXT;
typedef MAPIREADMAIL *LPMAPIREADMAIL;
typedef MAPISAVEMAIL *LPMAPISAVEMAIL;
typedef MAPISENDMAIL *LPMAPISENDMAIL;
typedef TIMECALLBACK *LPTIMECALLBACK;
typedef LPBYTE LPVIEWSETTINGS;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef  SEC_CHAR *SECURITY_PCSTR;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
struct tagDBGROUPINFO {LCID lcid;};
struct tagEDB_RSTMAPW {WCHAR *wszDatabaseName;WCHAR *wszNewDatabaseName;};
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef  LPDBDATETIME LPCDBDATETIME;
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef MAPIADDRESS *LPMAPIADDRESS;
typedef MAPIDETAILS *LPMAPIDETAILS;
typedef QUERYHANDLER *PQUERYHANDLER;
typedef SEC_CHAR *SECURITY_PSTR;
struct _PORT_INFO_1A {LPSTR pName;};
typedef FONTENUMPROCA FONTENUMPROC;
typedef int  IIDLookupRtn( IID *pIID, int *pIndex);
typedef  LPDBDATEREC LPCDBDATEREC;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef DPMSG_HOST *LPDPMSG_HOST;
typedef FREEBUFFER *LPFREEBUFFER;
typedef MAPILOGOFF *LPMAPILOGOFF;
typedef int ( *LPWPUFDISSET)(SOCKET s, fd_set *fdset);
union LUA_SPECIFIC {struct SLI_OPEN open;unsigned char lua_sequence_number[2];unsigned char lua_peek_data[12];};
typedef DRVCALLBACK MIDICALLBACK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef DRVCALLBACK *PDRVCALLBACK;
typedef int ( *PFNLVCOMPARE)(LPARAM, LPARAM, LPARAM);
typedef int ( *PFNTVCOMPARE)(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
typedef PROPENUMPROCA PROPENUMPROC;
typedef DRVCALLBACK WAVECALLBACK;
struct _DOC_INFO_1A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;};
struct _SecPkgInfoA {unsigned int fCapabilities;unsigned short wVersion;unsigned short wRPCID;unsigned int cbMaxToken;SEC_CHAR *Name;SEC_CHAR *Comment;};
struct _TOKEN_OWNER {PSID Owner;};
struct _UUID_VECTOR {unsigned int Count;UUID *Uuid[1];};
typedef void ( *LINEDDAPROC)(int, int, LPARAM);
typedef  LPDBBINARY LPCDBBINARY;
typedef COLORTYPE *LPCOLORTYPE;
typedef CSTRENTRY *LPCSTRENTRY;
typedef CSTRTABLE *LPCSTRTABLE;
typedef DISMISSMODELESS *LPFNDISMISS;
typedef HINTERNET *LPHINTERNET;
typedef MAPILOGON *LPMAPILOGON;
typedef OLERENDER *LPOLERENDER;
typedef OLEUPDATE *LPOLEUPDATE;
typedef SC_HANDLE *LPSC_HANDLE;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef HDEVNOTIFY *PHDEVNOTIFY;
typedef KSPIN_LOCK *PKSPIN_LOCK;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef PROPID QUEUEPROPID;
struct _FilterInfo {WCHAR achName[128];IFilterGraph *pGraph;};
typedef BMFORMAT *LPBMFORMAT;
typedef MAPIINIT *LPMAPIINIT;
typedef MMIOPROC *LPMMIOPROC;
typedef COLORTYPE *PCOLORTYPE;
typedef DWORDLONG *PDWORDLONG;
typedef IIDLookupRtn *PIIDLookup;
typedef OLEUPDATE *POLEUPDATE;
struct _RPC_IF_ID {UUID Uuid;unsigned short VersMajor;unsigned short VersMinor;};
struct berelement {PCHAR opaque;};
typedef PCONTEXT LPCONTEXT;
typedef  LPUSHORT LPCUSHORT;
typedef int ( *LPDNETEOF)(SOCKET);
typedef ACCELERATEABSDI *LPFNABSDI;
typedef PATTERN *LPPATTERN;
typedef TAGTYPE *LPTAGTYPE;
typedef PROPID MSGPROPID;
typedef PATTERN *NPPATTERN;
typedef BMFORMAT *PBMFORMAT;
typedef HPROFILE *PHPROFILE;
typedef WCHAR SEC_WCHAR;
struct _COLORMAP {COLORREF from;COLORREF to;};
struct _StrEntry {LPSTR pszName;LPSTR pszValue;};
typedef HGLOBAL HOLEMENU;
typedef  LPDBINT LPCDBINT;
typedef DISPID MEMBERID;
typedef BOOLEAN *PBOOLEAN;
typedef PATTERN *PPATTERN;
typedef TAGTYPE *PTAGTYPE;
typedef PROPID QMPROPID;
typedef  LPBYTE LPCBYTE;
typedef CLSID *LPCLSID;
typedef LPCSTR LPCTSTR;
typedef  WCHAR *LPCWSTR;
typedef FMTID *LPFMTID;
typedef QUEUE *LPQUEUE;
typedef WCHAR OLECHAR;
typedef FNIDLE *PFNIDLE;
typedef HUSKEY *PHUSKEY;
struct in_addr {union in_addr___C13EC994467D6E67044F092615EC7EA9 S_un;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct tpashdr {union tpashdr___DE5CBA54BA8BE874C4E36EB888298902 B0E;};
typedef  IID *LPCIID;
typedef  WCHAR *LPCWCH;
typedef LPSTR LPTSTR;
typedef WCHAR *LPWSTR;
typedef WCHAR *NWPSTR;
typedef  WCHAR *PCWSTR;
typedef SCODE *PSCODE;
typedef WCHAR *PWCHAR;
typedef ALC *LPALC;
typedef IID *LPIID;
typedef SYV *LPSYV;
typedef WCHAR *LPWCH;
typedef  WCHAR *PCWCH;
typedef WCHAR *PWSTR;
typedef OLECHAR *BSTR;
typedef OLECHAR **SNB;
union _176AE562BEBA221D9147C7D653950669___A9EF3B5146E74FA1D748AD7DEFEAA145 {LPWSTR lpszAccountID;LPSTR lpszAccountIDA;};
union _478FD611D4CFE009DAD748EFF45E08FA___7B02E3B50742AB47356AF5E80558A105 {LPWSTR lpszUsername;LPSTR lpszUsernameA;};
union _478FD611D4CFE009DAD748EFF45E08FA___9D1752F92D652BDA7BF3CD505478029C {LPWSTR lpszPassword;LPSTR lpszPasswordA;};
union _478FD611D4CFE009DAD748EFF45E08FA___BBC34037224A51D42A04ADC23A3CFE4A {LPWSTR lpszDomain;LPSTR lpszDomainA;};
union _65758D9D43B54B363A052B56EC34040F___4BC380B0414FD4D1A387B4548A8B198D {LPWSTR lpszSessionName;LPSTR lpszSessionNameA;};
union _65758D9D43B54B363A052B56EC34040F___9D1752F92D652BDA7BF3CD505478029C {LPWSTR lpszPassword;LPSTR lpszPasswordA;};
union _93DD11BEAC2601A6EF0B5FEB14D3B821___446F191665B55C76FC203DCA446CB75E {struct ____446F191665B55C76FC203DCA446CB75E___11D7E2EEDC905229D05BF81DCE1ACA56 Event;struct ____446F191665B55C76FC203DCA446CB75E___CED17800A94116C6709D31E7721A19C6 Status;};
union _A3ABF0E8F12B01D8CF792B8266628F14___3A59B7EE443DAB28210B05555185179E {LPWSTR lpszMessage;LPSTR lpszMessageA;};
union _CC101A5DC835CA1BB7FB5BD237B40121___25E48A7F248F70E41140C37F96B9BE07 {LPWSTR lpszSSPIProvider;LPSTR lpszSSPIProviderA;};
union _CC101A5DC835CA1BB7FB5BD237B40121___F50C430ED4C369A4C694211AB0CC4AFB {LPWSTR lpszCAPIProvider;LPSTR lpszCAPIProviderA;};
union _DEC76BDFA461320EB33154E3BA44F85F___B0C0A055862D20B8805E43D91089E34A {LPWSTR lpszLongName;LPSTR lpszLongNameA;};
union _DEC76BDFA461320EB33154E3BA44F85F___ED49A8AFEC0B061CE76DB553A726581F {LPWSTR lpszShortName;LPSTR lpszShortNameA;};
union _EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED {LPTSTR lpszComponent;ULONG ulItemID;};
union _FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC {_FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC___AE95DDE6C9C27FBF24E5C6B187468200 __anonymous0;DWORDLONG ForceSizeAndAlignment[32];};
union _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6 {struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___B282398C81B6FF20F165753A3DA70A52 DiskInfo;struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___B282398C81B6FF20F165753A3DA70A52 RemovableDiskInfo;struct _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6___3CE44E73086180F89031D1BB35ED5A26 TapeInfo;};
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 {UINT nStartPage;LPCWSTR pStartPage;};
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 {HBITMAP hbmHeader;LPCWSTR pszbmHeader;};
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F {HBITMAP hbmWatermark;LPCWSTR pszbmWatermark;};
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED {LPCWSTR pszTemplate;LPCDLGTEMPLATE pResource;};
union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923 {LONG lID;LPWSTR lpwstrName;};
union DPLAPPINFO___6B7C85D79A977F51592E8F07D5D2FE48 {LPSTR lpszAppNameA;LPWSTR lpszAppName;};
union _CONFADDRW___4D176CB0667F62A0AC10010AC63075C7 {DWORD dwIp;LPCWSTR psz;};
union bufelt___8899DE19478DD9A30897A768D03DABCC {struct bufelt___8899DE19478DD9A30897A768D03DABCC___4EC57D389E9FF5992BC5C98350285BAE BBUFF0T;struct bufelt___8899DE19478DD9A30897A768D03DABCC___D2918238ED4827AFD39ED5377ABF4AE5 BBUFF0Y;};
struct _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {HANDLE hFile;LPCWSTR lpPath;LPCWSTR lpDisplayName;};
struct __MIDL___MIDL_itf_strmif_0070_0001 {CLSID Clsid;LPWSTR Name;};
struct _0FC5C6CE63995F723FAD6419C86EA56D {DWORD dwCallback;LPWSTR lpstrPath;DWORD dwSize;};
struct _176AE562BEBA221D9147C7D653950669 {DWORD dwSize;DWORD dwFlags;_176AE562BEBA221D9147C7D653950669___A9EF3B5146E74FA1D748AD7DEFEAA145 __anonymous0;};
struct _1B9FED13861BA37B232486F1850D8B89 {struct LUA_COMMON common;union LUA_SPECIFIC specific;};
struct _1CF5A01E195BE25BEDA13B6A0EE28B07 {DWORD CategoryId;DWORD AttributeId;union _1CF5A01E195BE25BEDA13B6A0EE28B07___CA6E005D0CEB4AD2B9A93DDD4A619B56 AttributeType;};
struct _1E7FF90346B85F5B5B2905177EF5A1FD {DWORD cbStruct;DWORD dwOptions;PFN_AUTH_NOTIFY pfnNotify;DWORD dwContext;};
struct _2DFBDCCDB67179C152E4440B255C036F {LPWSTR psz;UINT cch;};
struct _3DDD578915499A46BA4B885B93AB36C5 {DWORD dwCallback;DWORD dwItem;DWORD dwValue;DWORD dwOver;LPWSTR lpstrAlgorithm;LPWSTR lpstrQuality;DWORD dwSourceNumber;};
struct _5738CA44FE4A305B347403BC29DEBFB1 {BYTE asnType;union _5738CA44FE4A305B347403BC29DEBFB1___1E086DA97258E44C2D8AD7C7CCE8E386 asnValue;};
struct _66B5A26201EC17B1A46E254DD42DACEF {DWORD dwCallback;DWORD dwItem;LPWSTR lpstrName;DWORD lpstrAlgorithm;DWORD dwHandle;};
struct _6950E4854C03824D44DF624674A695D1 {LPCTSTR ContentType;LPCTSTR Language;DWORD Size;};
struct _7CE74CE74CF979B93E9F8A54217A4B92 {smiUINT32 syntax;union _7CE74CE74CF979B93E9F8A54217A4B92___E492AAD3BDB014670AF7883727C49B32 value;};
struct _7ED3E3B28A0D58F6B953DC5EB3956646 {LPTSTR pszDisplayName;ULONG nVal;};
union _87B5C366CEDD06D1A6AC557671C7F981 {_87B5C366CEDD06D1A6AC557671C7F981___EEA291B95E2758FCA85357F8BCFF0FA8 __anonymous0;_87B5C366CEDD06D1A6AC557671C7F981___368524030E53626B9A6587120F737379 __anonymous1;};
struct _A3ABF0E8F12B01D8CF792B8266628F14 {DWORD dwSize;DWORD dwFlags;_A3ABF0E8F12B01D8CF792B8266628F14___3A59B7EE443DAB28210B05555185179E __anonymous0;};
struct _C3CAB9B290DE542345BF3A821AEDD70F {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;LPWSTR lpstrDrive;DWORD dwReference;};
struct _C3D536761911E1B34BFF5DAB2CC3A2E9 {DWORD dwAccessType;LPCTSTR lpszProxy;LPCTSTR lpszProxyBypass;};
struct _EC5D1C1BD51CCAB9AF6F5AE0D6E88016 {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;DWORD dwItem;};
struct _F76776D9748BF04A28B27A81EDBC1B75 {DWORD dwCallback;DWORD dwItem;DWORD dwValue;DWORD dwOver;LPWSTR lpstrAlgorithm;LPWSTR lpstrQuality;};
struct _FB9D1F30B538457F25D66F947CEA1060 {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwLength;DWORD dwNumber;DWORD dwItem;LPWSTR lpstrAlgorithm;};
struct _QUERY_SERVICE_LOCK_STATUSW {DWORD fIsLocked;LPWSTR lpLockOwner;DWORD dwLockDuration;};
typedef void ( *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors);
struct _BROWSER_EMULATED_DOMAIN {LPWSTR DomainName;LPWSTR EmulatedServerName;DWORD Role;};
struct CLUSPROP_ULARGE_INTEGER {CLUSPROP_VALUE __anonymous0;ULARGE_INTEGER li;};
struct _WIN_TRUST_SUBJECT_FILE {HANDLE hFile;LPCWSTR lpPath;};
struct _tagChannelCategoryInfo {DWORD cbSize;LPWSTR pszTitle;LPWSTR pszURL;LPWSTR pszLogo;LPWSTR pszIcon;LPWSTR pszWideLogo;};
struct tagMCI_VD_ESCAPE_PARMSW {DWORD dwCallback;LPCWSTR lpstrCommand;};
struct _QUERY_SERVICE_CONFIGW {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPWSTR lpBinaryPathName;LPWSTR lpLoadOrderGroup;DWORD dwTagId;LPWSTR lpDependencies;LPWSTR lpServiceStartName;LPWSTR lpDisplayName;};
struct _ENUM_SERVICE_STATUSW {LPWSTR lpServiceName;LPWSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _SERVICE_TABLE_ENTRYW {LPWSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONW lpServiceProc;};
struct tagCInterfaceStubVtbl {CInterfaceStubHeader header;IRpcStubBufferVtbl Vtbl;};
struct _NET_DISPLAY_MACHINE {LPWSTR usri2_name;LPWSTR usri2_comment;DWORD usri2_flags;DWORD usri2_user_id;DWORD usri2_next_index;};
struct _wireSAFEARRAY_UNION {ULONG sfType;union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 u;};
struct lineproxyrequest_tag {DWORD dwSize;DWORD dwClientMachineNameSize;DWORD dwClientMachineNameOffset;DWORD dwClientUserNameSize;DWORD dwClientUserNameOffset;DWORD dwClientAppAPIVersion;DWORD dwRequestType;lineproxyrequest_tag___856E572122E0B276FF18F69F75C6330F __anonymous0;};
struct _ACTRL_ACCESS_INFOW {ULONG fAccessPermission;LPWSTR lpAccessPermissionName;};
struct _GROUP_USERS_INFO_1 {LPWSTR grui1_name;DWORD grui1_attributes;};
struct _LSA_UNICODE_STRING {USHORT Length;USHORT MaximumLength;PWSTR Buffer;};
struct _MD_CHANGE_OBJECT_W {LPWSTR pszMDPath;DWORD dwMDChangeType;DWORD dwMDNumDataIDs;DWORD *pdwMDDataIDs;};
struct _USER_MODALS_INFO_1 {DWORD usrmod1_role;LPWSTR usrmod1_primary;};
struct _USER_MODALS_INFO_2 {LPWSTR usrmod2_domain_name;PSID usrmod2_domain_id;};
typedef BOOL ( *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef HRESULT ( *PFN_WPPDELETESITEW)(LPCWSTR sSiteName);
struct _CONNECTION_INFO_1 {DWORD coni1_id;DWORD coni1_type;DWORD coni1_num_opens;DWORD coni1_num_users;DWORD coni1_time;LPTSTR coni1_username;LPTSTR coni1_netname;};
struct _D3DRMLOADRESOURCE {HMODULE hModule;LPCTSTR lpName;LPCTSTR lpType;};
struct _NET_DISPLAY_GROUP {LPWSTR grpi3_name;LPWSTR grpi3_comment;DWORD grpi3_group_id;DWORD grpi3_attributes;DWORD grpi3_next_index;};
struct tagMCI_INFO_PARMSW {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_LOAD_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;};
struct tagMCI_SAVE_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;};
typedef BOOL ( *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL ( *DATEFMT_ENUMPROCW)(LPWSTR);
struct NDdeShareInfo_tag {LONG lRevision;LPTSTR lpszShareName;LONG lShareType;LPTSTR lpszAppTopicList;LONG fSharedFlag;LONG fService;LONG fStartAppFlag;LONG nCmdShow;LONG qModifyId[2];LONG cNumItems;LPTSTR lpszItemList;};
typedef BOOL ( *TIMEFMT_ENUMPROCW)(LPWSTR);
struct _CMSG_STREAM_INFO {DWORD cbContent;PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;void *pvArg;};
struct _DFS_STORAGE_INFO {ULONG State;LPWSTR ServerName;LPWSTR ShareName;};
struct _NET_DISPLAY_USER {LPWSTR usri1_name;LPWSTR usri1_comment;DWORD usri1_flags;LPWSTR usri1_full_name;DWORD usri1_user_id;DWORD usri1_next_index;};
struct _REPL_EDIR_INFO_1 {LPWSTR rped1_dirname;DWORD rped1_integrity;DWORD rped1_extent;};
struct _REPL_EDIR_INFO_2 {LPWSTR rped2_dirname;DWORD rped2_integrity;DWORD rped2_extent;DWORD rped2_lockcount;DWORD rped2_locktime;};
struct _REPL_IDIR_INFO_1 {LPWSTR rpid1_dirname;DWORD rpid1_state;LPWSTR rpid1_mastername;DWORD rpid1_last_update_time;DWORD rpid1_lockcount;DWORD rpid1_locktime;};
struct _SESSION_INFO_502 {LPTSTR sesi502_cname;LPTSTR sesi502_username;DWORD sesi502_num_opens;DWORD sesi502_time;DWORD sesi502_idle_time;DWORD sesi502_user_flags;LPTSTR sesi502_cltype_name;LPTSTR sesi502_transport;};
struct _WLX_PROFILE_V1_0 {DWORD dwType;PWSTR pszProfile;};
struct _WLX_PROFILE_V2_0 {DWORD dwType;PWSTR pszProfile;PWSTR pszPolicy;PWSTR pszNetworkDefaultUserProfile;PWSTR pszServerName;PWSTR pszEnvironment;};
struct tagMONITORINFOEXA {tagMONITORINFO __anonymous0;CHAR szDevice[32];};
struct tagMONITORINFOEXW {tagMONITORINFO __anonymous0;WCHAR szDevice[32];};
typedef BOOL ( *LOCALE_ENUMPROCW)(LPWSTR);
struct _CHARDEVQ_INFO_1 {LPWSTR cq1_dev;DWORD cq1_priority;LPWSTR cq1_devs;DWORD cq1_numusers;DWORD cq1_numahead;};
struct _NETLOGON_INFO_2 {DWORD netlog2_flags;DWORD netlog2_pdc_connection_status;LPWSTR netlog2_trusted_dc_name;DWORD netlog2_tc_connection_status;};
struct _PRINTER_INFO_1W {DWORD Flags;LPWSTR pDescription;LPWSTR pName;LPWSTR pComment;};
struct _PRINTER_INFO_4W {LPWSTR pPrinterName;LPWSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5W {LPWSTR pPrinterName;LPWSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7W {LPWSTR pszObjectGUID;DWORD dwAction;};
struct _RSVP_FILTERSPEC {FilterType Type;_RSVP_FILTERSPEC___59F6C73F6B9BF6FF92B2606A8BB6C14F __anonymous0;};
struct _SERVER_INFO_100 {DWORD sv100_platform_id;LPTSTR sv100_name;};
struct _SERVER_INFO_101 {DWORD sv101_platform_id;LPTSTR sv101_name;DWORD sv101_version_major;DWORD sv101_version_minor;DWORD sv101_type;LPTSTR sv101_comment;};
struct _SERVER_INFO_402 {DWORD sv402_ulist_mtime;DWORD sv402_glist_mtime;DWORD sv402_alist_mtime;LPTSTR sv402_alerts;DWORD sv402_security;DWORD sv402_numadmin;DWORD sv402_lanmask;LPTSTR sv402_guestacct;DWORD sv402_chdevs;DWORD sv402_chdevq;DWORD sv402_chdevjobs;DWORD sv402_connections;DWORD sv402_shares;DWORD sv402_openfiles;DWORD sv402_sessopens;DWORD sv402_sessvcs;DWORD sv402_sessreqs;DWORD sv402_opensearch;DWORD sv402_activelocks;DWORD sv402_numreqbuf;DWORD sv402_sizreqbuf;DWORD sv402_numbigbuf;DWORD sv402_numfiletasks;DWORD sv402_alertsched;DWORD sv402_erroralert;DWORD sv402_logonalert;DWORD sv402_accessalert;DWORD sv402_diskalert;DWORD sv402_netioalert;DWORD sv402_maxauditsz;LPTSTR sv402_srvheuristics;};
struct _SERVER_INFO_403 {DWORD sv403_ulist_mtime;DWORD sv403_glist_mtime;DWORD sv403_alist_mtime;LPTSTR sv403_alerts;DWORD sv403_security;DWORD sv403_numadmin;DWORD sv403_lanmask;LPTSTR sv403_guestacct;DWORD sv403_chdevs;DWORD sv403_chdevq;DWORD sv403_chdevjobs;DWORD sv403_connections;DWORD sv403_shares;DWORD sv403_openfiles;DWORD sv403_sessopens;DWORD sv403_sessvcs;DWORD sv403_sessreqs;DWORD sv403_opensearch;DWORD sv403_activelocks;DWORD sv403_numreqbuf;DWORD sv403_sizreqbuf;DWORD sv403_numbigbuf;DWORD sv403_numfiletasks;DWORD sv403_alertsched;DWORD sv403_erroralert;DWORD sv403_logonalert;DWORD sv403_accessalert;DWORD sv403_diskalert;DWORD sv403_netioalert;DWORD sv403_maxauditsz;LPTSTR sv403_srvheuristics;DWORD sv403_auditedevents;DWORD sv403_autoprofile;LPTSTR sv403_autopath;};
struct _SESSION_INFO_10 {LPTSTR sesi10_cname;LPTSTR sesi10_username;DWORD sesi10_time;DWORD sesi10_idle_time;};
struct _SHARE_INFO_1007 {DWORD shi1007_flags;LPTSTR shi1007_AlternateDirectoryName;};
struct tagDRVCONFIGINFO {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;};
struct tagTBSAVEPARAMSW {HKEY hkr;LPCWSTR pszSubKey;LPCWSTR pszValueName;};
struct tagTCITEMHEADERW {UINT mask;UINT lpReserved1;UINT lpReserved2;LPWSTR pszText;int cchTextMax;int iImage;};
struct DRVCONFIGINFOEX {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;DWORD dnDevNode;};
struct _ADDJOB_INFO_1W {LPWSTR Path;DWORD JobId;};
struct _CABINET_INFO_W {PCWSTR CabinetPath;PCWSTR CabinetFile;PCWSTR DiskName;USHORT SetId;USHORT CabinetNumber;};
struct _CHARDEV_INFO_1 {LPWSTR ch1_dev;DWORD ch1_status;LPWSTR ch1_username;DWORD ch1_time;};
struct _DRIVER_INFO_2W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;};
struct _DRIVER_INFO_3W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;};
struct _SERVICE_INFO_1 {LPWSTR svci1_name;DWORD svci1_status;DWORD svci1_code;DWORD svci1_pid;};
struct _SERVICE_INFO_2 {LPWSTR svci2_name;DWORD svci2_status;DWORD svci2_code;DWORD svci2_pid;LPWSTR svci2_text;DWORD svci2_specific_error;LPWSTR svci2_display_name;};
struct _SESSION_INFO_1 {LPTSTR sesi1_cname;LPTSTR sesi1_username;DWORD sesi1_num_opens;DWORD sesi1_time;DWORD sesi1_idle_time;DWORD sesi1_user_flags;};
struct _SESSION_INFO_2 {LPTSTR sesi2_cname;LPTSTR sesi2_username;DWORD sesi2_num_opens;DWORD sesi2_time;DWORD sesi2_idle_time;DWORD sesi2_user_flags;LPTSTR sesi2_cltype_name;};
struct _SHARE_INFO_501 {LPTSTR shi501_netname;DWORD shi501_type;LPTSTR shi501_remark;DWORD shi501_flags;};
struct _SOURCE_MEDIA_W {PCWSTR Reserved;PCWSTR Tagfile;PCWSTR Description;PCWSTR SourcePath;PCWSTR SourceFile;DWORD Flags;};
struct _WKSTA_INFO_100 {DWORD wki100_platform_id;LPTSTR wki100_computername;LPTSTR wki100_langroup;DWORD wki100_ver_major;DWORD wki100_ver_minor;};
struct _WKSTA_INFO_101 {DWORD wki101_platform_id;LPTSTR wki101_computername;LPTSTR wki101_langroup;DWORD wki101_ver_major;DWORD wki101_ver_minor;LPTSTR wki101_lanroot;};
struct _WKSTA_INFO_102 {DWORD wki102_platform_id;LPTSTR wki102_computername;LPTSTR wki102_langroup;DWORD wki102_ver_major;DWORD wki102_ver_minor;LPTSTR wki102_lanroot;DWORD wki102_logged_on_users;};
struct _WKSTA_INFO_302 {DWORD wki302_char_wait;DWORD wki302_collection_time;DWORD wki302_maximum_collection_count;DWORD wki302_keep_conn;DWORD wki302_keep_search;DWORD wki302_max_cmds;DWORD wki302_num_work_buf;DWORD wki302_siz_work_buf;DWORD wki302_max_wrk_cache;DWORD wki302_sess_timeout;DWORD wki302_siz_error;DWORD wki302_num_alerts;DWORD wki302_num_services;DWORD wki302_errlog_sz;DWORD wki302_print_buf_time;DWORD wki302_num_char_buf;DWORD wki302_siz_char_buf;LPTSTR wki302_wrk_heuristics;DWORD wki302_mailslots;DWORD wki302_num_dgram_buf;};
struct _WKSTA_INFO_402 {DWORD wki402_char_wait;DWORD wki402_collection_time;DWORD wki402_maximum_collection_count;DWORD wki402_keep_conn;DWORD wki402_keep_search;DWORD wki402_max_cmds;DWORD wki402_num_work_buf;DWORD wki402_siz_work_buf;DWORD wki402_max_wrk_cache;DWORD wki402_sess_timeout;DWORD wki402_siz_error;DWORD wki402_num_alerts;DWORD wki402_num_services;DWORD wki402_errlog_sz;DWORD wki402_print_buf_time;DWORD wki402_num_char_buf;DWORD wki402_siz_char_buf;LPTSTR wki402_wrk_heuristics;DWORD wki402_mailslots;DWORD wki402_num_dgram_buf;DWORD wki402_max_threads;};
struct tagCCSTYLEFLAGW {DWORD flStyle;DWORD flStyleMask;LPWSTR pszStyle;};
struct _ACCESS_INFO_1 {LPWSTR acc1_resource_name;DWORD acc1_attr;DWORD acc1_count;};
struct _SWStringArray {ULONG cValues;LPWSTR *lppszW;};
struct tagWPPROVINFOW {DWORD dwSize;DWORD dwFlags;DWORD dwPriority;LPWSTR lpszProviderName;LPWSTR lpszProviderCLSID;LPWSTR lpszDllPath;};
struct tagWPSITEINFOW {DWORD dwSize;DWORD dwFlags;LPWSTR lpszSiteName;LPWSTR lpszSiteURL;};
struct _GROUP_INFO_2 {LPWSTR grpi2_name;LPWSTR grpi2_comment;DWORD grpi2_group_id;DWORD grpi2_attributes;};
struct _INPUT_RECORD {WORD EventType;union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 Event;};
struct _NETRESOURCEW {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;LPWSTR lpProvider;};
struct _NOTIFICATION {ULONG ulEventType;ULONG ulAlignPad;union _NOTIFICATION___3E85E7B42E1FA8D9B9172640FB8B09B4 info;};
struct _PORT_INFO_2W {LPWSTR pPortName;LPWSTR pMonitorName;LPWSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3W {DWORD dwStatus;LPWSTR pszStatus;DWORD dwSeverity;};
struct _SHARE_INFO_1 {LPTSTR shi1_netname;DWORD shi1_type;LPTSTR shi1_remark;};
struct _SHARE_INFO_2 {LPTSTR shi2_netname;DWORD shi2_type;LPTSTR shi2_remark;DWORD shi2_permissions;DWORD shi2_max_uses;DWORD shi2_current_uses;LPTSTR shi2_path;LPTSTR shi2_passwd;};
struct _SRestriction {ULONG rt;union _SRestriction___B4071AB9842950C3F11C27C4F8DBCEB6 res;};
struct _USER_INFO_20 {LPWSTR usri20_name;LPWSTR usri20_full_name;LPWSTR usri20_comment;DWORD usri20_flags;DWORD usri20_user_id;};
struct _currencyfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPWSTR lpCurrencySymbol;};
typedef int ( *ICMENUMPROCW)(LPWSTR, LPARAM);
typedef DWORD  PM_OPEN_PROC(LPWSTR);
struct _ACCESS_LIST {LPWSTR acl_ugname;DWORD acl_access;};
struct _DEBUG_EVENT {DWORD dwDebugEventCode;DWORD dwProcessId;DWORD dwThreadId;union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 u;};
struct _DOC_INFO_2W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _FILE_INFO_3 {DWORD fi3_id;DWORD fi3_permissions;DWORD fi3_num_locks;LPTSTR fi3_pathname;LPTSTR fi3_username;};
struct _KSEVENTDATA {_KSEVENTDATA___4ACE7D2B832D2E546B8A70A4057BA34D __anonymous0;_KSEVENTDATA___DDD1F22571D5528B45C35B44D5140C67 __anonymous1;};
struct _REPL_INFO_0 {DWORD rp0_role;LPWSTR rp0_exportpath;LPWSTR rp0_exportlist;LPWSTR rp0_importpath;LPWSTR rp0_importlist;LPWSTR rp0_logonusername;DWORD rp0_interval;DWORD rp0_pulse;DWORD rp0_guardtime;DWORD rp0_random;};
struct _USER_INFO_1 {LPWSTR usri1_name;LPWSTR usri1_password;DWORD usri1_password_age;DWORD usri1_priv;LPWSTR usri1_home_dir;LPWSTR usri1_comment;DWORD usri1_flags;LPWSTR usri1_script_path;};
struct _ads_sortkey {LPWSTR pszAttrType;LPWSTR pszReserved;BOOLEAN fReverseorder;};
struct _findtextexw {CHARRANGE chrg;LPWSTR lpstrText;CHARRANGE chrgText;};
struct ldapsortkeyW {PWCHAR sk_attrtype;PWCHAR sk_matchruleoid;BOOLEAN sk_reverseorder;};
struct tagENUMTYPEW {DWORD dwSize;DWORD dwVersion;DWORD dwFields;PCWSTR pDeviceName;DWORD dwMediaType;DWORD dwDitheringMode;DWORD dwResolution[2];DWORD dwCMMType;DWORD dwClass;DWORD dwDataColorSpace;DWORD dwConnectionSpace;DWORD dwSignature;DWORD dwPlatform;DWORD dwProfileFlags;DWORD dwManufacturer;DWORD dwModel;DWORD dwAttributes[2];DWORD dwRenderingIntent;DWORD dwCreator;};
struct tagLVCOLUMNW {UINT mask;int fmt;int cx;LPWSTR pszText;int cchTextMax;int iSubItem;int iImage;int iOrder;};
struct tagPARAMDATA {OLECHAR *szName;VARTYPE vt;};
struct CLUSPROP_SZ {CLUSPROP_ULARGE_INTEGER __anonymous0;WCHAR sz[];};
struct _DFS_INFO_2 {LPWSTR EntryPath;LPWSTR Comment;DWORD State;DWORD NumberOfStorages;};
struct _GDI_OBJECT {DWORD ObjectType;union _GDI_OBJECT____MIDL_IAdviseSink_0002 u;};
struct _MSG_INFO_1 {LPWSTR msgi1_name;DWORD msgi1_forward_flag;LPWSTR msgi1_forward;};
struct _USE_INFO_1 {LPTSTR ui1_local;LPTSTR ui1_remote;LPTSTR ui1_password;DWORD ui1_status;DWORD ui1_asg_type;DWORD ui1_refcount;DWORD ui1_usecount;};
struct _USE_INFO_2 {LPTSTR ui2_local;LPTSTR ui2_remote;LPTSTR ui2_password;DWORD ui2_status;DWORD ui2_asg_type;DWORD ui2_refcount;DWORD ui2_usecount;LPTSTR ui2_username;LPTSTR ui2_domainname;};
struct _editstream {DWORD dwCookie;DWORD dwError;EDITSTREAMCALLBACK pfnCallback;};
struct _numberfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;};
struct _textrangew {CHARRANGE chrg;LPWSTR lpstrText;};
struct sockaddr_in {short sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct tagCALPWSTR {ULONG cElems;LPWSTR *pElems;};
struct tagPICTDESC {UINT cbSizeofstruct;UINT picType;tagPICTDESC___43BF5684F0E8BAFC8B650B528FAB349D __anonymous0;};
struct tagTYPEDESC {tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 __anonymous0;VARTYPE vt;};
struct _CONFADDRW {DWORD dwSize;DWORD dwAddrType;_CONFADDRW___4D176CB0667F62A0AC10010AC63075C7 __anonymous0;};
struct _MAPIERROR {ULONG ulVersion;LPTSTR lpszError;LPTSTR lpszComponent;ULONG ulLowLevelError;ULONG ulContext;};
struct _findtextw {CHARRANGE chrg;LPWSTR lpstrText;};
struct _xml_error {unsigned int _nLine;BSTR _pchBuf;unsigned int _cchBuf;unsigned int _ich;BSTR _pszFound;BSTR _pszExpected;DWORD _reserved1;DWORD _reserved2;};
struct mmtime_tag {UINT wType;union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 u;};
struct value_entW {LPWSTR ve_valuename;DWORD ve_valuelen;DWORD ve_valueptr;DWORD ve_type;};
struct _D3DSTATE {_D3DSTATE___F2EA3FEE0507817BD9C946BFDA84F9EF __anonymous0;_D3DSTATE___6E126D7179C3BD6696EBA355AAC6A589 __anonymous1;};
struct _DOCINFOW {int cbSize;LPCWSTR lpszDocName;LPCWSTR lpszOutput;LPCWSTR lpszDatatype;DWORD fwType;};
struct _NS_INFOW {DWORD dwNameSpace;DWORD dwNameSpaceFlags;LPWSTR lpNameSpace;};
struct tagCABSTR {ULONG cElems;BSTR *pElems;};
struct tagHLITEM {ULONG uHLID;LPWSTR pwzFriendlyName;};
struct tagINPUT {DWORD type;tagINPUT___72687D791E298366090936F57062F9D6 __anonymous0;};
union BDN_VALUE______BC76CA3BCEACCD00BFE19C0FAD7C2138___05FAD7053CEFB55D5DB10BB62A7755FE {LPSTR AnsiString;LPWSTR UnicodeString;LPTSTR String;};
union _94FF0DCDFF19E9D844EB9057038515A4___AA90C7C52CB1487987B0F426BAFB98E6 {LONG ind;LPCSTR lpstr;LPCWSTR lpwstr;};
union _STRRET___3AF7F6543D4EBCAE352F8864F620C6EA {LPWSTR pOleStr;LPSTR pStr;UINT uOffset;char cStr[260];};
struct _5CC485201744F683BFCAFBF5CC04CDB7 {DWORD dwCallback;LPWSTR lpstrFileName;RECT rc;};
struct _B2C1794739E4EE832382C8443FB3E776 {NMHDR hdr;DWORD dwMask;int idCommand;DWORD lParam;int iImage;LPWSTR pszText;int cchText;};
struct _CC101A5DC835CA1BB7FB5BD237B40121 {DWORD dwSize;DWORD dwFlags;_CC101A5DC835CA1BB7FB5BD237B40121___25E48A7F248F70E41140C37F96B9BE07 __anonymous0;_CC101A5DC835CA1BB7FB5BD237B40121___F50C430ED4C369A4C694211AB0CC4AFB __anonymous1;DWORD dwCAPIProviderType;DWORD dwEncryptionAlgorithm;};
struct _DEC76BDFA461320EB33154E3BA44F85F {DWORD dwSize;DWORD dwFlags;_DEC76BDFA461320EB33154E3BA44F85F___ED49A8AFEC0B061CE76DB553A726581F __anonymous0;_DEC76BDFA461320EB33154E3BA44F85F___B0C0A055862D20B8805E43D91089E34A __anonymous1;};
struct _FB1D2264C317C52716420591CB70B7FC {FILETIME ftExpiry;FILETIME ftStart;LPTSTR lpszSubjectInfo;LPTSTR lpszIssuerInfo;LPTSTR lpszProtocolName;LPTSTR lpszSignatureAlgName;LPTSTR lpszEncryptionAlgName;DWORD dwKeySize;};
typedef DWORD ( *PFNMPRUITRANSPORTINTERFACECONFIG)(HWND hwndParent, LPCWSTR pwsMachine, LPCWSTR pwsInterface, DWORD dwIfType, DWORD dwTransportId, DWORD dwReserved);
typedef SECURITY_STATUS ( *QUERY_SECURITY_PACKAGE_INFO_FN_W)(SEC_WCHAR *, PSecPkgInfoW *);
typedef DWORD ( *PFNMPRUIPROTOCOLINTERFACECONFIG)(HWND hwndParent, LPCWSTR pwsMachine, LPCWSTR pwsInterface, DWORD dwIfType, DWORD dwTransportId, DWORD dwProtocolId, DWORD dwReserved);
struct tagSOLE_AUTHENTICATION_SERVICE {DWORD dwAuthnSvc;DWORD dwAuthzSvc;OLECHAR *pPrincipalName;HRESULT hr;};
struct _CRYPT_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;void *pvGetArg;};
struct _LOCALGROUP_MEMBERS_INFO_1 {PSID lgrmi1_sid;SID_NAME_USE lgrmi1_sidusage;LPWSTR lgrmi1_name;};
struct _LOCALGROUP_MEMBERS_INFO_2 {PSID lgrmi2_sid;SID_NAME_USE lgrmi2_sidusage;LPWSTR lgrmi2_domainandname;};
struct _CERT_KEYGEN_REQUEST_INFO {DWORD dwVersion;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;LPWSTR pwszChallengeString;};
struct _CREATE_THREAD_DEBUG_INFO {HANDLE hThread;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;};
struct _SERVICE_FAILURE_ACTIONSW {DWORD dwResetPeriod;LPWSTR lpRebootMsg;LPWSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct tagNMDATETIMEFORMATQUERYW {NMHDR nmhdr;LPCWSTR pszFormat;SIZE szMax;};
struct _PERF_COUNTER_DEFINITION {DWORD ByteLength;DWORD CounterNameTitleIndex;LPWSTR CounterNameTitle;DWORD CounterHelpTitleIndex;LPWSTR CounterHelpTitle;LONG DefaultScale;DWORD DetailLevel;DWORD CounterType;DWORD CounterSize;DWORD CounterOffset;};
struct _SERVER_TRANSPORT_INFO_0 {DWORD svti0_numberofvcs;LPTSTR svti0_transportname;LPBYTE svti0_transportaddress;DWORD svti0_transportaddresslength;LPTSTR svti0_networkaddress;};
struct _SERVER_TRANSPORT_INFO_1 {DWORD svti1_numberofvcs;LPTSTR svti1_transportname;LPBYTE svti1_transportaddress;DWORD svti1_transportaddresslength;LPTSTR svti1_networkaddress;LPTSTR svti1_domain;};
struct _SERVICE_TYPE_VALUE_ABSW {DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPWSTR lpValueName;PVOID lpValue;};
typedef DWORD ( *PFNMPRUITRANSPORTCONFIG)(HWND hwndParent, LPCWSTR pwsMachine, DWORD dwTransportId, DWORD dwReserved);
struct _SERVICE_TYPE_INFO_ABSW {LPWSTR lpTypeName;DWORD dwValueCount;SERVICE_TYPE_VALUE_ABSW Values[1];};
struct _WKSTA_TRANSPORT_INFO_0 {DWORD wkti0_quality_of_service;DWORD wkti0_number_of_vcs;LPTSTR wkti0_transport_name;LPTSTR wkti0_transport_address;BOOL wkti0_wan_ish;};
struct _tagChannelShortcutInfo {DWORD cbSize;LPWSTR pszTitle;LPWSTR pszURL;LPWSTR pszLogo;LPWSTR pszIcon;LPWSTR pszWideLogo;BOOL bIsSoftware;};
struct tagMCI_OVLY_LOAD_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagMCI_WAVE_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwBufferSeconds;};
struct tagNMDATETIMEWMKEYDOWNW {NMHDR nmhdr;int nVirtKey;LPCWSTR pszFormat;SYSTEMTIME st;};
typedef DWORD ( *PFNMPRUIPROTOCOLCONFIG)(HWND hwndParent, LPCWSTR pwsMachine, DWORD dwTransportId, DWORD dwProtocolId, DWORD dwReserved);
typedef DWORD ( *PNTSEC_CHANGE_PASSWORD)(HANDLE, HANDLE, LPWSTR, LPWSTR, LPWSTR);
struct WINTRUST_CATALOG_INFO_ {DWORD cbStruct;DWORD dwCatalogVersion;LPCWSTR pcwszCatalogFilePath;LPCWSTR pcwszMemberTag;LPCWSTR pcwszMemberFilePath;HANDLE hMemberFile;};
struct _ACTRL_PROPERTY_ENTRYW {LPWSTR lpProperty;PACTRL_ACCESS_ENTRY_LISTW pAccessEntryList;ULONG fListFlags;};
struct CLUSPROP_SCSI_ADDRESS {CLUSPROP_SZ __anonymous0;struct {union {CLUS_SCSI_ADDRESS __anonymous3;DWORD dw;};};};
typedef DWORD ( *PNTSEC_VALIDATE_LOGIN)(HANDLE, HANDLE, LPWSTR, LPWSTR);
typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);
typedef INT ( *VDMENUMPROCESSWOWPROC)(PROCESSENUMPROC, LPARAM);
struct _NEWMAIL_NOTIFICATION {ULONG cbEntryID;LPENTRYID lpEntryID;ULONG cbParentID;LPENTRYID lpParentID;ULONG ulFlags;LPTSTR lpszMessageClass;ULONG ulMessageFlags;};
struct _PRINTER_ENUM_VALUESW {LPWSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
struct tagMCI_SYSINFO_PARMSW {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
struct urlinvokecommandinfoW {DWORD dwcbSize;DWORD dwFlags;HWND hwndParent;LPCWSTR pcszVerb;};
typedef UINT ( *PFNRECONCILEPROFILEW)(LPCWSTR pszCentralFile, LPCWSTR pszLocalFile, DWORD dwFlags);
typedef DWORD ( *PNTSEC_GET_HOST_USER)(HANDLE, HANDLE, LPWSTR, LPWSTR);
struct _CRYPT_KEY_PROV_INFO {LPWSTR pwszContainerName;LPWSTR pwszProvName;DWORD dwProvType;DWORD dwFlags;DWORD cProvParam;PCRYPT_KEY_PROV_PARAM rgProvParam;DWORD dwKeySpec;};
struct _DIRECTXREGISTERAPPW {DWORD dwSize;DWORD dwFlags;LPWSTR lpszApplicationName;LPGUID lpGUID;LPWSTR lpszFilename;LPWSTR lpszCommandLine;LPWSTR lpszPath;LPWSTR lpszCurrentDirectory;};
typedef BOOL ( *CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL ( *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
struct WINTRUST_BLOB_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;DWORD cbMem;BYTE *pbMem;};
struct WINTRUST_FILE_INFO_ {DWORD cbStruct;LPCWSTR pcwszFilePath;HANDLE hFile;};
struct tagOLEUIPASTEENTRYW {FORMATETC fmtetc;LPCWSTR lpstrFormatName;LPCWSTR lpstrResultText;DWORD dwFlags;DWORD dwScratchSpace;};
typedef LRESULT ( *CAPSTATUSCALLBACKW)(HWND hWnd, int nID, LPCWSTR lpsz);
typedef int (*INSTALLUI_HANDLERW)(LPVOID pvContext, UINT iMessageType, LPCWSTR szMessage);
typedef UINT ( *PFNGETPROFILEPATHW)(LPCWSTR pszUsername, LPWSTR pszBuffer, UINT cbBuffer);
typedef DWORD ( *PNTSEC_GET_NT_USER)(HANDLE, HANDLE, LPWSTR);
typedef DWORD ( *PREGISTER_PROTOCOL)(PMPR_ROUTING_CHARACTERISTICS pRoutingChar, PMPR_SERVICE_CHARACTERISTICS pServiceChar);
struct _INTERNET_BUFFERSW {DWORD dwStructSize;struct _INTERNET_BUFFERSW *Next;LPCWSTR lpcszHeader;DWORD dwHeadersLength;DWORD dwHeadersTotal;LPVOID lpvBuffer;DWORD dwBufferLength;DWORD dwBufferTotal;DWORD dwOffsetLow;DWORD dwOffsetHigh;};
struct _PRINTER_DEFAULTSW {LPWSTR pDatatype;LPDEVMODEW pDevMode;ACCESS_MASK DesiredAccess;};
struct tagCOMBOBOXEXITEMW {UINT mask;int iItem;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int iOverlay;int iIndent;LPARAM lParam;};
struct tagMCI_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;};
struct tagNMTBGETINFOTIPW {NMHDR hdr;LPWSTR pszText;int cchTextMax;int iItem;LPARAM lParam;};
struct tagOLEUIGNRLPROPSA {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSA *lpOP;};
struct tagOLEUIGNRLPROPSW {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSW *lpOP;};
struct tagOLEUILINKPROPSA {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSA *lpOP;};
struct tagOLEUILINKPROPSW {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSW *lpOP;};
struct tagOLEUIVIEWPROPSA {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSA *lpOP;int nScaleMin;int nScaleMax;};
struct tagOLEUIVIEWPROPSW {DWORD cbStruct;DWORD dwFlags;DWORD dwReserved1[2];LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;DWORD dwReserved2[3];struct tagOLEUIOBJECTPROPSW *lpOP;int nScaleMin;int nScaleMax;};
typedef LRESULT ( *CAPERRORCALLBACKW)(HWND hWnd, int nID, LPCWSTR lpsz);
union _IMAGE_AUX_SYMBOL {struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C Sym;struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 File;struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 Section;};
typedef DWORD ( *FM_UNDELETE_PROC)(HWND, LPTSTR);
struct _SERVER_INFO_503 {DWORD sv503_sessopens;DWORD sv503_sessvcs;DWORD sv503_opensearch;DWORD sv503_sizreqbuf;DWORD sv503_initworkitems;DWORD sv503_maxworkitems;DWORD sv503_rawworkitems;DWORD sv503_irpstacksize;DWORD sv503_maxrawbuflen;DWORD sv503_sessusers;DWORD sv503_sessconns;DWORD sv503_maxpagedmemoryusage;DWORD sv503_maxnonpagedmemoryusage;BOOL sv503_enablesoftcompat;BOOL sv503_enableforcedlogoff;BOOL sv503_timesource;BOOL sv503_acceptdownlevelapis;BOOL sv503_lmannounce;LPTSTR sv503_domain;DWORD sv503_maxcopyreadlen;DWORD sv503_maxcopywritelen;DWORD sv503_minkeepsearch;DWORD sv503_maxkeepsearch;DWORD sv503_minkeepcomplsearch;DWORD sv503_maxkeepcomplsearch;DWORD sv503_threadcountadd;DWORD sv503_numblockthreads;DWORD sv503_scavtimeout;DWORD sv503_minrcvqueue;DWORD sv503_minfreeworkitems;DWORD sv503_xactmemsize;DWORD sv503_threadpriority;DWORD sv503_maxmpxct;DWORD sv503_oplockbreakwait;DWORD sv503_oplockbreakresponsewait;BOOL sv503_enableoplocks;BOOL sv503_enableoplockforceclose;BOOL sv503_enablefcbopens;BOOL sv503_enableraw;BOOL sv503_enablesharednetdrives;DWORD sv503_minfreeconnections;DWORD sv503_maxfreeconnections;};
struct _SERVER_INFO_599 {DWORD sv599_sessopens;DWORD sv599_sessvcs;DWORD sv599_opensearch;DWORD sv599_sizreqbuf;DWORD sv599_initworkitems;DWORD sv599_maxworkitems;DWORD sv599_rawworkitems;DWORD sv599_irpstacksize;DWORD sv599_maxrawbuflen;DWORD sv599_sessusers;DWORD sv599_sessconns;DWORD sv599_maxpagedmemoryusage;DWORD sv599_maxnonpagedmemoryusage;BOOL sv599_enablesoftcompat;BOOL sv599_enableforcedlogoff;BOOL sv599_timesource;BOOL sv599_acceptdownlevelapis;BOOL sv599_lmannounce;LPTSTR sv599_domain;DWORD sv599_maxcopyreadlen;DWORD sv599_maxcopywritelen;DWORD sv599_minkeepsearch;DWORD sv599_maxkeepsearch;DWORD sv599_minkeepcomplsearch;DWORD sv599_maxkeepcomplsearch;DWORD sv599_threadcountadd;DWORD sv599_numblockthreads;DWORD sv599_scavtimeout;DWORD sv599_minrcvqueue;DWORD sv599_minfreeworkitems;DWORD sv599_xactmemsize;DWORD sv599_threadpriority;DWORD sv599_maxmpxct;DWORD sv599_oplockbreakwait;DWORD sv599_oplockbreakresponsewait;BOOL sv599_enableoplocks;BOOL sv599_enableoplockforceclose;BOOL sv599_enablefcbopens;BOOL sv599_enableraw;BOOL sv599_enablesharednetdrives;DWORD sv599_minfreeconnections;DWORD sv599_maxfreeconnections;DWORD sv599_initsesstable;DWORD sv599_initconntable;DWORD sv599_initfiletable;DWORD sv599_initsearchtable;DWORD sv599_alertschedule;DWORD sv599_errorthreshold;DWORD sv599_networkerrorthreshold;DWORD sv599_diskspacethreshold;DWORD sv599_reserved;DWORD sv599_maxlinkdelay;DWORD sv599_minlinkthroughput;DWORD sv599_linkinfovalidtime;DWORD sv599_scavqosinfoupdatetime;DWORD sv599_maxworkitemidletime;};
struct _TRUSTEE_ACCESSW {LPWSTR lpProperty;ACCESS_RIGHTS Access;ULONG fAccessFlags;ULONG fReturnedAccess;};
struct _WSANSClassInfoW {LPWSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagCODEBASEHOLD {ULONG cbSize;LPWSTR szDistUnit;LPWSTR szCodeBase;DWORD dwVersionMS;DWORD dwVersionLS;DWORD dwStyle;};
struct _tagSOFTDISTINFO {ULONG cbSize;DWORD dwFlags;DWORD dwAdState;LPWSTR szTitle;LPWSTR szAbstract;LPWSTR szHREF;DWORD dwInstalledVersionMS;DWORD dwInstalledVersionLS;DWORD dwUpdateVersionMS;DWORD dwUpdateVersionLS;DWORD dwAdvertisedVersionMS;DWORD dwAdvertisedVersionLS;DWORD dwReserved;};
struct tagCIPROPERTYDEF {LPWSTR wcsFriendlyName;DWORD dbType;DBID dbCol;};
struct tagHIGHCONTRASTW {UINT cbSize;DWORD dwFlags;LPWSTR lpszDefaultScheme;};
struct tagStorageLayout {DWORD LayoutType;OLECHAR *pwcsElementName;LARGE_INTEGER cOffset;LARGE_INTEGER cBytes;};
struct _DISCDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPWSTR lpLocalName;LPWSTR lpRemoteName;DWORD dwFlags;};
struct _PROTOCOL_INFOW {DWORD dwServiceFlags;INT iAddressFamily;INT iMaxSockAddr;INT iMinSockAddr;INT iSocketType;INT iProtocol;DWORD dwMessageSize;LPWSTR lpProtocol;};
struct _SHARE_INFO_502 {LPTSTR shi502_netname;DWORD shi502_type;LPTSTR shi502_remark;DWORD shi502_permissions;DWORD shi502_max_uses;DWORD shi502_current_uses;LPTSTR shi502_path;LPTSTR shi502_passwd;DWORD shi502_reserved;PSECURITY_DESCRIPTOR shi502_security_descriptor;};
struct tagCATEGORYINFO {CATID catid;LCID lcid;OLECHAR szDescription[128];};
struct tagSOUNDSENTRYW {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPWSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
struct _COSERVERINFO2 {DWORD dwFlags;LPWSTR pwszName;COAUTHINFO *pAuthInfo;IUnknown **ppCall;LPWSTR pwszCodeURL;DWORD dwFileVersionMS;DWORD dwFileVersionLS;LPWSTR pwszContentType;};
struct tagSERIALKEYSW {UINT cbSize;DWORD dwFlags;LPWSTR lpszActivePort;LPWSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
struct tagTUNING_INFO {LONG lTuningSpace;LONG lChannelNumber;LONG lVideoStream;LONG lAudioStream;BSTR bsIPStream;TCHAR szCallLetters[10];};
typedef BOOL ( *NAMEENUMPROCW)(LPWSTR, LPARAM);
typedef void ( *RASPBDLGFUNCW)(DWORD, DWORD, LPWSTR, LPVOID);
struct _COSERVERINFO {DWORD dwReserved1;LPWSTR pwszName;COAUTHINFO *pAuthInfo;DWORD dwReserved2;};
struct _USER_INFO_11 {LPWSTR usri11_name;LPWSTR usri11_comment;LPWSTR usri11_usr_comment;LPWSTR usri11_full_name;DWORD usri11_priv;DWORD usri11_auth_flags;DWORD usri11_password_age;LPWSTR usri11_home_dir;LPWSTR usri11_parms;DWORD usri11_last_logon;DWORD usri11_last_logoff;DWORD usri11_bad_pw_count;DWORD usri11_num_logons;LPWSTR usri11_logon_server;DWORD usri11_country_code;LPWSTR usri11_workstations;DWORD usri11_max_storage;DWORD usri11_units_per_week;PBYTE usri11_logon_hours;DWORD usri11_code_page;};
struct provider_info {PQUERYHANDLER pi_R0_1val;PQUERYHANDLER pi_R0_allvals;PQUERYHANDLER pi_R3_1val;PQUERYHANDLER pi_R3_allvals;DWORD pi_flags;LPVOID pi_key_context;};
struct tagMIXERLINEA {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;CHAR szShortName[16];CHAR szName[64];struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E Target;};
struct tagMIXERLINEW {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;WCHAR szShortName[16];WCHAR szName[64];struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA Target;};
struct tagNMTOOLBARW {NMHDR hdr;int iItem;TBBUTTON tbButton;int cchText;LPWSTR pszText;};
struct _FILEPATHS_W {PCWSTR Target;PCWSTR Source;UINT Win32Error;DWORD Flags;};
struct _JOB_INFO_1W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pDatatype;LPWSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _USER_INFO_2 {LPWSTR usri2_name;LPWSTR usri2_password;DWORD usri2_password_age;DWORD usri2_priv;LPWSTR usri2_home_dir;LPWSTR usri2_comment;DWORD usri2_flags;LPWSTR usri2_script_path;DWORD usri2_auth_flags;LPWSTR usri2_full_name;LPWSTR usri2_usr_comment;LPWSTR usri2_parms;LPWSTR usri2_workstations;DWORD usri2_last_logon;DWORD usri2_last_logoff;DWORD usri2_acct_expires;DWORD usri2_max_storage;DWORD usri2_units_per_week;PBYTE usri2_logon_hours;DWORD usri2_bad_pw_count;DWORD usri2_num_logons;LPWSTR usri2_logon_server;DWORD usri2_country_code;DWORD usri2_code_page;};
struct _USER_INFO_3 {LPWSTR usri3_name;LPWSTR usri3_password;DWORD usri3_password_age;DWORD usri3_priv;LPWSTR usri3_home_dir;LPWSTR usri3_comment;DWORD usri3_flags;LPWSTR usri3_script_path;DWORD usri3_auth_flags;LPWSTR usri3_full_name;LPWSTR usri3_usr_comment;LPWSTR usri3_parms;LPWSTR usri3_workstations;DWORD usri3_last_logon;DWORD usri3_last_logoff;DWORD usri3_acct_expires;DWORD usri3_max_storage;DWORD usri3_units_per_week;PBYTE usri3_logon_hours;DWORD usri3_bad_pw_count;DWORD usri3_num_logons;LPWSTR usri3_logon_server;DWORD usri3_country_code;DWORD usri3_code_page;DWORD usri3_user_id;DWORD usri3_primary_group_id;LPWSTR usri3_profile;LPWSTR usri3_home_dir_drive;DWORD usri3_password_expired;};
struct _WLX_DESKTOP {DWORD Size;DWORD Flags;HDESK hDesktop;PWSTR pszDesktopName;};
struct _wireVARIANT {DWORD clSize;DWORD rpcReserved;USHORT vt;USHORT wReserved1;USHORT wReserved2;USHORT wReserved3;_wireVARIANT___97E5681EB831466912C1B906D2CF69C6 __anonymous0;};
struct ldapcontrolW {PWCHAR ldctl_oid;struct berval ldctl_value;BOOLEAN ldctl_iscritical;};
union sockaddr_gen {struct sockaddr Address;struct sockaddr_in AddressIn;struct sockaddr_in6 AddressIn6;};
struct tagPOLYTEXTW {int x;int y;UINT n;LPCWSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
struct _COAUTHINFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;LPWSTR pwszServerPrincName;DWORD dwAuthnLevel;DWORD dwImpersonationLevel;COAUTHIDENTITY *pAuthIdentityData;DWORD dwCapabilities;};
struct _CONFNOTIFY {DWORD dwSize;DWORD dwUser;DWORD dwFlags;GUID guid;CONFNOTIFYPROC pfnNotifyProc;};
struct _DFS_INFO_3 {LPWSTR EntryPath;LPWSTR Comment;DWORD State;DWORD NumberOfStorages;LPDFS_STORAGE_INFO Storage;};
struct _MAPINAMEID {LPGUID lpguid;ULONG ulKind;union _MAPINAMEID___10BA19B736A86C47FBDA3348D5FE6923 Kind;};
struct tagTVSORTCB {HTREEITEM hParent;PFNTVCOMPARE lpfnCompare;LPARAM lParam;};
struct DPLAPPINFO {DWORD dwSize;GUID guidApplication;DPLAPPINFO___6B7C85D79A977F51592E8F07D5D2FE48 __anonymous0;};
typedef BOOL ( *RASADFUNCW)(LPWSTR, LPWSTR, struct tagRASADPARAMS *, LPDWORD);
struct _CONFGUIDW {DWORD dwSize;GUID guid;LPCWSTR pszApplication;LPCWSTR pszCommandLine;LPCWSTR pszDirectory;};
struct _ERROR_LOG {DWORD el_len;DWORD el_reserved;DWORD el_time;DWORD el_error;LPWSTR el_name;LPWSTR el_text;LPBYTE el_data;DWORD el_data_size;DWORD el_nstrings;};
struct _OFNOTIFYW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPWSTR pszFile;};
struct tagLVITEMW {UINT mask;int iItem;int iSubItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;int iIndent;};
struct _AT_ENUM {DWORD JobId;DWORD JobTime;DWORD DaysOfMonth;UCHAR DaysOfWeek;UCHAR Flags;LPWSTR Command;};
struct _AT_INFO {DWORD JobTime;DWORD DaysOfMonth;UCHAR DaysOfWeek;UCHAR Flags;LPWSTR Command;};
struct _STATURL {DWORD cbSize;LPWSTR pwcsUrl;LPWSTR pwcsTitle;FILETIME ftLastVisited;FILETIME ftLastUpdated;FILETIME ftExpires;DWORD dwFlags;};
struct ldapmodA {ULONG mod_op;PCHAR mod_type;union ldapmodA___5560D17982B8E0B6CC2FA36FEDB4BE57 mod_vals;};
struct pvalueW {LPWSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
struct bufelt {struct bufelt *elteptr;INTEGER startd;INTEGER endd;CHAR trpad;union bufelt___8899DE19478DD9A30897A768D03DABCC BBUFF0S;};
struct bufhdr {struct bufhdr *nxtqptr;struct bufelt *hdreptr;CHAR numelts;CHAR msgtype;CHAR srcl;CHAR srcp;INTEGER srci;CHAR destl;CHAR destp;INTEGER desti;union bufhdr___1A06D8C69B68AE4D545CC8F555A31E9D B0Y;};
union _CERT_ALT_NAME_ENTRY___7E4B233ED3B78E5B558F9B49A3136717 {LPWSTR pwszRfc822Name;LPWSTR pwszDNSName;CERT_NAME_BLOB DirectoryName;LPWSTR pwszURL;CRYPT_DATA_BLOB IPAddress;LPSTR pszRegisteredID;};
union MSBDN_OUTPUT_VALUE___FF2674E992A362656645868EC7412F11 {DWORD Dword;LPWSTR String;IN_ADDR IPAddress;BOOL Boolean;};
struct _1E2FD961D0F6599201D4719261A6C1FA {DWORD dwCallback;UINT wDeviceID;LPWSTR lpstrDeviceType;LPWSTR lpstrElementName;LPWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct _2B4FDC4BF487E67F052937EE78FAE255 {DWORD dwStructSize;LPWSTR lpszScheme;DWORD dwSchemeLength;INTERNET_SCHEME nScheme;LPWSTR lpszHostName;DWORD dwHostNameLength;INTERNET_PORT nPort;LPWSTR lpszUserName;DWORD dwUserNameLength;LPWSTR lpszPassword;DWORD dwPasswordLength;LPWSTR lpszUrlPath;DWORD dwUrlPathLength;LPWSTR lpszExtraInfo;DWORD dwExtraInfoLength;};
struct _2D53B4FD6E19D1977DDA8FD016F55563 {HWND hWndParent;UINT iType;UINT iGizmo;UINT uID;UINT dx;UINT dy;LPWSTR pszText;HBITMAP hBmp;UINT iImage;UINT uState;};
struct _478FD611D4CFE009DAD748EFF45E08FA {DWORD dwSize;DWORD dwFlags;_478FD611D4CFE009DAD748EFF45E08FA___7B02E3B50742AB47356AF5E80558A105 __anonymous0;_478FD611D4CFE009DAD748EFF45E08FA___9D1752F92D652BDA7BF3CD505478029C __anonymous1;_478FD611D4CFE009DAD748EFF45E08FA___BBC34037224A51D42A04ADC23A3CFE4A __anonymous3;};
struct _4F60ECD4258FF26BBA8BD131C8AAF615 {LONG lVerb;LPTSTR szVerbname;DWORD fuFlags;DWORD grfAttribs;ULONG ulFlags;};
struct _65758D9D43B54B363A052B56EC34040F {DWORD dwSize;DWORD dwFlags;GUID guidInstance;GUID guidApplication;DWORD dwMaxPlayers;DWORD dwCurrentPlayers;_65758D9D43B54B363A052B56EC34040F___4BC380B0414FD4D1A387B4548A8B198D __anonymous0;_478FD611D4CFE009DAD748EFF45E08FA___9D1752F92D652BDA7BF3CD505478029C __anonymous1;DWORD dwReserved1;DWORD dwReserved2;DWORD dwUser1;DWORD dwUser2;DWORD dwUser3;DWORD dwUser4;};
struct _93DD11BEAC2601A6EF0B5FEB14D3B821 {USHORT usStationId;UCHAR uchOptionIndicator;UCHAR uchEventSet;UCHAR uchEvent;UCHAR uchCriticalSubset;ULONG ulNotificationFlag;union _93DD11BEAC2601A6EF0B5FEB14D3B821___446F191665B55C76FC203DCA446CB75E Type;};
struct _BA38072C3DF14F81D778878E553711E9 {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPWSTR lpstrText;};
struct _DA63D2C084DFF8EF53A1633F272A983E {ULONG ulCtlType;ULONG ulCtlFlags;LPBYTE lpbNotif;ULONG cbNotif;LPTSTR lpszFilter;ULONG ulItemID;union _DA63D2C084DFF8EF53A1633F272A983E___042F7215B663439BB27585B1A57DD4DF ctl;};
struct _EF67D941BFA119366B947DED69649A3B {ULONG cctl;LPTSTR lpszResourceName;_EF67D941BFA119366B947DED69649A3B___965D884C61A03D501E35E701462609ED __anonymous0;LPDTCTL lpctl;};
struct tagNTSEC_DISPATCH_VERSION_1_1 {PNTSEC_VALIDATE_LOGIN NtSecValidateLogin;PNTSEC_CHANGE_PASSWORD NtSecChangePassword;PNTSEC_TRANSACTION_COMPLETE NtSecTransactionComplete;PNTSEC_SHUTDOWN_COMPLETE NtSecShutdownComplete;};
struct CLUSPROP_RESOURCE_CLASS_INFO {CLUSPROP_SCSI_ADDRESS __anonymous0;struct {union {struct {CLUS_RESOURCE_CLASS_INFO___3915580CB3359FE70B4381C96753A13F __anonymous4;DWORD SubClass;};ULARGE_INTEGER li;};};};
typedef SECURITY_STATUS ( *IMPORT_SECURITY_CONTEXT_FN_W)(SEC_WCHAR *, PSecBuffer, void *, PCtxtHandle);
struct _SECURITY_QUALITY_OF_SERVICE {DWORD Length;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;BOOLEAN EffectiveOnly;};
struct IWCContextMenuCallbackVtbl {HRESULT ( *QueryInterface)(IWCContextMenuCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWCContextMenuCallback *This);ULONG ( *Release)(IWCContextMenuCallback *This);HRESULT ( *AddExtensionMenuItem)(IWCContextMenuCallback *This, BSTR lpszName, BSTR lpszStatusBarText, ULONG nCommandID, ULONG nSubmenuCommandID, ULONG uFlags);};
struct tagMCI_ANIM_WINDOW_PARMSW {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSW {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXA)(LPDDENUMCALLBACKEXA lpCallback, LPVOID lpContext, DWORD dwFlags);
typedef DWORD ( *PHOSTSEC_CHANGE_PASSWORD)(PVOID, HANDLE, LPWSTR, LPWSTR, LPWSTR);
typedef int ( *PWLX_DIALOG_BOX_INDIRECT)(HANDLE hWlx, HANDLE hInst, LPCDLGTEMPLATE hDialogTemplate, HWND hwndOwner, DLGPROC dlgprc);
struct _SERVER_TRANSPORT_INFO_2 {DWORD svti2_numberofvcs;LPTSTR svti2_transportname;LPBYTE svti2_transportaddress;DWORD svti2_transportaddresslength;LPTSTR svti2_networkaddress;LPTSTR svti2_domain;ULONG svti2_flags;};
typedef DWORD ( *PHOSTSEC_VALIDATE_LOGIN)(PVOID, HANDLE, LPWSTR, LPWSTR);
struct _FILE_IN_CABINET_INFO_W {PCWSTR NameInCabinet;DWORD FileSize;DWORD Win32Error;WORD DosDate;WORD DosTime;WORD DosAttribs;WCHAR FullTargetName[260];};
struct tagMCI_ANIM_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct IEnumExtendedMediaVtbl {HRESULT ( *QueryInterface)(IEnumExtendedMedia *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumExtendedMedia *This);ULONG ( *Release)(IEnumExtendedMedia *This);HRESULT ( *Next)(IEnumExtendedMedia *This, ULONG celt, BSTR *ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumExtendedMedia *This);HRESULT ( *Skip)(IEnumExtendedMedia *This, ULONG celt);HRESULT ( *Clone)(IEnumExtendedMedia *This, IEnumExtendedMedia **ppEnum);};
typedef INT ( *LPWSCINSTALLNAMESPACE)(LPWSTR lpszIdentifier, LPWSTR lpszPathName, DWORD dwNameSpace, DWORD dwVersion, LPGUID lpProviderId);
struct _WSAServiceClassInfoW {LPGUID lpServiceClassId;LPWSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOW lpClassInfos;};
typedef INT ( *VDMENUMTASKWOWEXPROC)(DWORD, TASKENUMPROCEX, LPARAM);
struct tagNMDATETIMEFORMATW {NMHDR nmhdr;LPCWSTR pszFormat;SYSTEMTIME st;LPCWSTR pszDisplay;WCHAR szDisplay[64];};
struct tagNMDATETIMESTRINGW {NMHDR nmhdr;LPCWSTR pszUserString;SYSTEMTIME st;DWORD dwFlags;};
typedef BOOL ( *PFNPROCESSPOLICIESW)(HWND hwnd, LPCWSTR pszPath, LPCWSTR pszUsername, LPCWSTR pszComputerName, DWORD dwFlags);
typedef BOOL ( *PHOSTSEC_INITIALIZE)(LPWSTR, HANDLE, PVOID, PVOID *, PVOID *);
struct WINTRUST_CERT_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CERT_CONTEXT *psCertContext;DWORD chStores;HCERTSTORE *pahStores;};
struct WINTRUST_SGNR_INFO_ {DWORD cbStruct;LPCWSTR pcwszDisplayName;CMSG_SIGNER_INFO *psSignerInfo;DWORD chStores;HCERTSTORE *pahStores;};
struct _WSANAMESPACE_INFOW {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPWSTR lpszIdentifier;};
struct tagMDICREATESTRUCTW {LPCWSTR szClass;LPCWSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct IEnumMediaTypeVtbl {HRESULT ( *QueryInterface)(IEnumMediaType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumMediaType *This);ULONG ( *Release)(IEnumMediaType *This);HRESULT ( *Next)(IEnumMediaType *This, ULONG celt, BSTR *ppElements, ULONG *pceltFetched);HRESULT ( *Reset)(IEnumMediaType *This);HRESULT ( *Skip)(IEnumMediaType *This, ULONG celt);HRESULT ( *Clone)(IEnumMediaType *This, IEnumMediaType **ppEnum);};
struct IEnumWorkItemsVtbl {HRESULT ( *QueryInterface)(IEnumWorkItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumWorkItems *This);ULONG ( *Release)(IEnumWorkItems *This);HRESULT ( *Next)(IEnumWorkItems *This, ULONG celt, LPWSTR **rgpwszNames, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumWorkItems *This, ULONG celt);HRESULT ( *Reset)(IEnumWorkItems *This);HRESULT ( *Clone)(IEnumWorkItems *This, IEnumWorkItems **ppEnumWorkItems);};
typedef INT ( *VDMENUMTASKWOWPROC)(DWORD, TASKENUMPROC, LPARAM);
struct tagNMLVGETINFOTIPW {NMHDR hdr;DWORD dwFlags;LPWSTR pszText;int cchTextMax;int iItem;int iSubItem;LPARAM lParam;};
struct tagNMTVGETINFOTIPW {NMHDR hdr;LPWSTR pszText;int cchTextMax;HTREEITEM hItem;LPARAM lParam;};
struct IBindProtocolVtbl {HRESULT ( *QueryInterface)(IBindProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindProtocol *This);ULONG ( *Release)(IBindProtocol *This);HRESULT ( *CreateBinding)(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);};
struct IEventMonikerVtbl {HRESULT ( *QueryInterface)(IEventMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEventMoniker *This);ULONG ( *Release)(IEventMoniker *This);HRESULT ( *get_Name)(IEventMoniker *This, BSTR *pVal);HRESULT ( *put_Name)(IEventMoniker *This, BSTR newVal);HRESULT ( *get_ID)(IEventMoniker *This, int *pVal);HRESULT ( *put_ID)(IEventMoniker *This, int newVal);HRESULT ( *put_EventObj)(IEventMoniker *This, IUnknown *newVal);};
typedef BOOL ( *LPDDENUMCALLBACKW)(GUID *, LPWSTR, LPWSTR, LPVOID);
typedef BOOL ( *LPDSENUMCALLBACKW)(LPGUID, LPCWSTR, LPCWSTR, LPVOID);
typedef INT ( *LPFNCCSIZETOTEXTW)(DWORD flStyle, DWORD flExtStyle, HFONT hfont, LPWSTR pszText);
struct _PERF_OBJECT_TYPE {DWORD TotalByteLength;DWORD DefinitionLength;DWORD HeaderLength;DWORD ObjectNameTitleIndex;LPWSTR ObjectNameTitle;DWORD ObjectHelpTitleIndex;LPWSTR ObjectHelpTitle;DWORD DetailLevel;DWORD NumCounters;LONG DefaultCounter;LONG NumInstances;DWORD CodePage;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;};
typedef int ( *PWLX_MESSAGE_BOX)(HANDLE hWlx, HWND hwndOwner, LPWSTR lpszText, LPWSTR lpszTitle, UINT fuStyle);
struct _PRINTER_INFO_2W {LPWSTR pServerName;LPWSTR pPrinterName;LPWSTR pShareName;LPWSTR pPortName;LPWSTR pDriverName;LPWSTR pComment;LPWSTR pLocation;LPDEVMODEW pDevMode;LPWSTR pSepFile;LPWSTR pPrintProcessor;LPWSTR pDatatype;LPWSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
struct _SERVER_INFO_102 {DWORD sv102_platform_id;LPTSTR sv102_name;DWORD sv102_version_major;DWORD sv102_version_minor;DWORD sv102_type;LPTSTR sv102_comment;DWORD sv102_users;LONG sv102_disc;BOOL sv102_hidden;DWORD sv102_announce;DWORD sv102_anndelta;DWORD sv102_licenses;LPTSTR sv102_userpath;};
struct tagNMHDDISPINFOW {NMHDR hdr;int iItem;UINT mask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
typedef BOOL ( *ENUMRESTYPEPROC)(HMODULE hModule, LPTSTR lpType, LONG lParam);
typedef DWORD  PM_COLLECT_PROC(LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef int ( *PWLX_DIALOG_BOX)(HANDLE hWlx, HANDLE hInst, LPWSTR lpszTemplate, HWND hwndOwner, DLGPROC dlgprc);
struct tagGCP_RESULTSA {DWORD lStructSize;LPSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
struct tagGCP_RESULTSW {DWORD lStructSize;LPWSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
struct tagMQQUEUEPROPS {DWORD cProp;QUEUEPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct IEnumNamesVtbl {HRESULT ( *QueryInterface)(IEnumNames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumNames *This);ULONG ( *Release)(IEnumNames *This);HRESULT ( *Next)(IEnumNames *This, unsigned int celt, BSTR *rgname, unsigned int *pceltFetched);HRESULT ( *Skip)(IEnumNames *This, unsigned int celt);HRESULT ( *Reset)(IEnumNames *This);HRESULT ( *Clone)(IEnumNames *This, IEnumNames **ppenum);};
struct _ads_attr_info {LPWSTR pszAttrName;DWORD dwControlCode;ADSTYPE dwADsType;PADSVALUE pADsValues;DWORD dwNumValues;};
struct tagLVFINDINFOW {UINT flags;LPCWSTR psz;LPARAM lParam;POINT pt;UINT vkDirection;};
typedef BOOL ( *PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
struct _FORM_INFO_1W {DWORD Flags;LPWSTR pName;SIZEL Size;RECTL ImageableArea;};
struct _USER_INFO_22 {LPWSTR usri22_name;BYTE usri22_password[16];DWORD usri22_password_age;DWORD usri22_priv;LPWSTR usri22_home_dir;LPWSTR usri22_comment;DWORD usri22_flags;LPWSTR usri22_script_path;DWORD usri22_auth_flags;LPWSTR usri22_full_name;LPWSTR usri22_usr_comment;LPWSTR usri22_parms;LPWSTR usri22_workstations;DWORD usri22_last_logon;DWORD usri22_last_logoff;DWORD usri22_acct_expires;DWORD usri22_max_storage;DWORD usri22_units_per_week;PBYTE usri22_logon_hours;DWORD usri22_bad_pw_count;DWORD usri22_num_logons;LPWSTR usri22_logon_server;DWORD usri22_country_code;DWORD usri22_code_page;};
struct _ads_attr_def {LPWSTR pszAttrName;ADSTYPE dwADsType;DWORD dwMinRange;DWORD dwMaxRange;BOOL fMultiValued;};
struct tagLVBKIMAGEW {ULONG ulFlags;HBITMAP hbm;LPWSTR pszImage;UINT cchImageMax;int xOffsetPercent;int yOffsetPercent;};
struct tagMQMSGPROPS {DWORD cProp;MSGPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct tagMQQMPROPS {DWORD cProp;QMPROPID *aPropID;MQPROPVARIANT *aPropVar;HRESULT *aStatus;};
struct tagRASPBDLGW {DWORD dwSize;HWND hwndOwner;DWORD dwFlags;LONG xDlg;LONG yDlg;DWORD dwCallbackId;RASPBDLGFUNCW pCallback;DWORD dwError;DWORD reserved;DWORD reserved2;};
struct tagTVITEMEXW {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;int iIntegral;};
typedef HRESULT  MAPILOGONEX(ULONG ulUIParam, LPTSTR lpszProfileName, LPTSTR lpszPassword, ULONG ulFlags, LPMAPISESSION *lppSession);
typedef HRESULT ( *REGINSTALL)(HMODULE hm, LPCSTR pszSection, LPCSTRTABLE pstTable);
struct _TRUSTEE_W {struct _TRUSTEE_W *pMultipleTrustee;MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;TRUSTEE_FORM TrusteeForm;TRUSTEE_TYPE TrusteeType;LPWSTR ptstrName;};
struct tagTCITEMW {UINT mask;DWORD dwState;DWORD dwStateMask;LPWSTR pszText;int cchTextMax;int iImage;LPARAM lParam;};
struct tagTVITEMW {UINT mask;HTREEITEM hItem;UINT state;UINT stateMask;LPWSTR pszText;int cchTextMax;int iImage;int iSelectedImage;int cChildren;LPARAM lParam;};
struct _HD_ITEMW {UINT mask;int cxy;LPWSTR pszText;HBITMAP hbm;int cchTextMax;int fmt;LPARAM lParam;int iImage;int iOrder;};
struct _33C4C3464C1F55DF358037E82FD3A381 {ULONG ulFlags;ULONG nPropType;MAPINAMEID nmid;LPTSTR pszDisplayName;FORMPROPSPECIALTYPE nSpecialType;union _33C4C3464C1F55DF358037E82FD3A381___543FA3AE02DFE9E044D92CF6A451C814 u;};
struct _8688FBDBF9FB8D670D1638B47BFC0FAD {UINT cbSize;DWORD dwMask;int idCommand;int iImage;BYTE fsState;BYTE fsStyle;WORD cx;DWORD lParam;LPWSTR pszText;int cchText;};
struct _F4E2A3B3EF6C4FAA4EC9C87B4A54D83E {DWORD cbSize;HWND hwndOwner;int iShow;DWORD dwFlags;RECT rect;LPUNKNOWN punkRel;OLECHAR strNewFile[260];};
typedef BOOL ( *PHOSTSEC_TRANSACTION_COMPLETE_EX)(PVOID, HANDLE, DWORD, LPWSTR, LPWSTR);
typedef SECURITY_STATUS ( *ACQUIRE_CREDENTIALS_HANDLE_FN_W)(SEC_WCHAR *, SEC_WCHAR *, unsigned int, void *, void *, SEC_GET_KEY_FN, void *, PCredHandle, PTimeStamp);
struct tagHOSTSEC_DISPATCH_VERSION_1_1 {PHOSTSEC_VALIDATE_LOGIN HostSecValidateLogin;PHOSTSEC_CHANGE_PASSWORD HostSecChangePassword;PHOSTSEC_TRANSACTION_COMPLETE HostSecTransactionComplete;PHOSTSEC_SHUTDOWN HostSecShutdown;PHOSTSEC_HOST_PING HostSecHostPing;};
typedef int ( *PWLX_CHANGE_PASSWORD_NOTIFY_EX)(HANDLE hWlx, PWLX_MPR_NOTIFY_INFO pMprInfo, DWORD dwChangeInfo, PWSTR ProviderName, PVOID Reserved);
typedef int ( *PWLX_DIALOG_BOX_INDIRECT_PARAM)(HANDLE hWlx, HANDLE hInst, LPCDLGTEMPLATE hDialogTemplate, HWND hwndOwner, DLGPROC dlgprc, LPARAM dwInitParam);
typedef HRESULT (*DTC_GET_TRANSACTION_MANAGER)(LPTSTR pszHost, LPTSTR pszTmName,  IID * rid, DWORD dwReserved1, WORD wcbReserved2, void *pvReserved2, void **ppvObject);
struct IEncodingFilterFactoryVtbl {HRESULT ( *QueryInterface)(IEncodingFilterFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEncodingFilterFactory *This);ULONG ( *Release)(IEncodingFilterFactory *This);HRESULT ( *FindBestFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);HRESULT ( *GetDefaultFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);};
struct _CREATE_PROCESS_DEBUG_INFO {HANDLE hFile;HANDLE hProcess;HANDLE hThread;LPVOID lpBaseOfImage;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;LPVOID lpImageName;WORD fUnicode;};
struct IGetContextPropertiesVtbl {HRESULT ( *QueryInterface)(IGetContextProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetContextProperties *This);ULONG ( *Release)(IGetContextProperties *This);HRESULT ( *Count)(IGetContextProperties *This, int *plCount);HRESULT ( *GetProperty)(IGetContextProperties *This, BSTR name, VARIANT *pProperty);HRESULT ( *EnumNames)(IGetContextProperties *This, IEnumNames **ppenum);};
typedef BOOL ( *PWLX_CREATE_USER_DESKTOP)(HANDLE hWlx, HANDLE hToken, DWORD Flags, PWSTR pszDesktopName, PWLX_DESKTOP *ppDesktop);
typedef BOOL ( *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue,  DWORD  *    rgdwValueType,  LPCWSTR  *    rgpwszValueName,  BYTE * rgpbValueData[],  DWORD  *    rgcbValueData, void *pvArg);
struct IExtensionServicesVtbl {HRESULT ( *QueryInterface)(IExtensionServices *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IExtensionServices *This);ULONG ( *Release)(IExtensionServices *This);HRESULT ( *SetAdditionalHeaders)(IExtensionServices *This, LPCWSTR pwzAdditionalHeaders);HRESULT ( *SetAuthenticateData)(IExtensionServices *This, HWND phwnd, LPCWSTR pwzUsername, LPCWSTR pwzPassword);};
struct MSBDN_BRIDGE_CALLBACKS {DWORD Version;HRESULT (*ReportState)(struct MSBDN_OUTPUT_SUBSYSTEM *, DWORD state, LPCSTR message);HRESULT (*ReportActivity)(struct MSBDN_OUTPUT_SUBSYSTEM *, WORD type, DWORD amount);HRESULT (*ReportEventA)(struct MSBDN_OUTPUT_SUBSYSTEM *, WORD, DWORD, LPCWSTR);};
struct MSBDN_OUTPUT_SUBSYSTEM {DWORD Version;MSBDN_BRIDGE_CALLBACKS BridgeCallbacks;MSBDN_SUBSYSTEM_ID OutputSubsystemID;HKEY RegistryKey;LPVOID DriverContext;};
typedef int ( *PWLX_DIALOG_BOX_PARAM)(HANDLE hWlx, HANDLE hInst, LPWSTR lpszTemplate, HWND hwndOwner, DLGPROC dlgprc, LPARAM dwInitParam);
typedef INT ( *LPWSPSTRINGTOADDRESS)(LPWSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength, LPINT lpErrno);
struct _ACTRL_ACCESS_ENTRYW {TRUSTEE_W Trustee;ULONG fAccessFlags;ACCESS_RIGHTS Access;ACCESS_RIGHTS ProvSpecificAccess;INHERIT_FLAGS Inheritance;LPWSTR lpInheritProperty;};
struct IClientSecurityVtbl {HRESULT ( *QueryInterface)(IClientSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClientSecurity *This);ULONG ( *Release)(IClientSecurity *This);HRESULT ( *QueryBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);HRESULT ( *SetBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD AuthnSvc, DWORD AuthzSvc, OLECHAR *pServerPrincName, DWORD AuthnLevel, DWORD ImpLevel, void *pAuthInfo, DWORD Capabilities);HRESULT ( *CopyProxy)(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy);};
typedef BOOL ( *LPDDENUMCALLBACKEXW)(GUID *, LPWSTR, LPWSTR, LPVOID, HMONITOR);
typedef BOOL ( *LPDPENUMDPCALLBACK)(LPGUID lpguidSP, LPWSTR lpSPName, DWORD dwMajorVersion, DWORD dwMinorVersion, LPVOID lpContext);
typedef ULONG QUERYFORCONNECTION(PLDAP PrimaryConnection, PLDAP ReferralFromConnection, PWCHAR NewDN, PCHAR HostName, ULONG PortNumber, PVOID SecAuthIdentity, PVOID CurrentUserToken, PLDAP *ConnectionToUse);
struct IAuthenticateVtbl {HRESULT ( *QueryInterface)(IAuthenticate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAuthenticate *This);ULONG ( *Release)(IAuthenticate *This);HRESULT ( *Authenticate)(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);};
struct ISQLErrorInfoVtbl {HRESULT ( *QueryInterface)(ISQLErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISQLErrorInfo *This);ULONG ( *Release)(ISQLErrorInfo *This);HRESULT ( *GetSQLInfo)(ISQLErrorInfo *This, BSTR *pbstrSQLState, LONG *plNativeError);};
struct ITrackStorageVtbl {HRESULT ( *QueryInterface)(ITrackStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrackStorage *This);ULONG ( *Release)(ITrackStorage *This);HRESULT ( *CreateFromPath)(ITrackStorage *This,  OLECHAR *poszPath);HRESULT ( *Resolve)(ITrackStorage *This, DWORD *pcbPath, OLECHAR *poszPath, DWORD dwMillisecondTimeout);HRESULT ( *OpenStorageEx)(ITrackStorage *This, DWORD *pcbPathHint, OLECHAR *poszPathHint, DWORD dwMillisecondTimeout, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs,  IID * riid, void **ppObjectOpen);};
typedef HRESULT  LAUNCHWIZARDENTRY(HWND hParentWnd, ULONG ulFlags, LPCTSTR *lppszServiceNameToAdd, ULONG cbBufferMax, LPTSTR lpszNewProfileName);
struct ads_search_column {LPWSTR pszAttrName;ADSTYPE dwADsType;PADSVALUE pADsValues;DWORD dwNumValues;HANDLE hReserved;};
struct IFilterGraphVtbl {HRESULT ( *QueryInterface)(IFilterGraph *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterGraph *This);ULONG ( *Release)(IFilterGraph *This);HRESULT ( *AddFilter)(IFilterGraph *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IFilterGraph *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IFilterGraph *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IFilterGraph *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IFilterGraph *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IFilterGraph *This, IPin *ppin);HRESULT ( *Disconnect)(IFilterGraph *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IFilterGraph *This);};
struct ITaskTriggerVtbl {HRESULT ( *QueryInterface)(ITaskTrigger *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskTrigger *This);ULONG ( *Release)(ITaskTrigger *This);HRESULT ( *SetTrigger)(ITaskTrigger *This,  PTASK_TRIGGER pTrigger);HRESULT ( *GetTrigger)(ITaskTrigger *This, PTASK_TRIGGER pTrigger);HRESULT ( *GetTriggerString)(ITaskTrigger *This, LPWSTR *ppwszTrigger);};
struct tagMENUITEMINFOW {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;LPWSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
struct tagProxyFileInfo { PCInterfaceProxyVtblList *pProxyVtblList; PCInterfaceStubVtblList *pStubVtblList; PCInterfaceName *pNamesArray; IID **pDelegatedIIDs; PIIDLookup pIIDLookupRtn;unsigned short TableSize;unsigned short TableVersion;unsigned int Filler1;unsigned int Filler2;unsigned int Filler3;unsigned int Filler4;};
typedef BOOL ( *ENUMRESLANGPROC)(HMODULE hModule, LPCTSTR lpType, LPCTSTR lpName, WORD wLanguage, LONG lParam);
typedef BOOL ( *ENUMRESNAMEPROC)(HMODULE hModule, LPCTSTR lpType, LPTSTR lpName, LONG lParam);
typedef BOOL ( *PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, DWORD);
struct _CRYPT_OID_INFO {DWORD cbSize;LPCSTR pszOID;LPCWSTR pwszName;DWORD dwGroupId;_CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 __anonymous0;CRYPT_DATA_BLOB ExtraInfo;};
struct _tagRemBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;REMSECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
typedef HRESULT ADVISECALLBACK(LPVOID lpvUserContext, LPWSTR lpwszOwnerTag, ULONG cProps, LPSPropValue lpProps);
typedef DWORD ( *PADD_INTERFACE)(LPWSTR InterfaceName, ULONG InterfaceIndex, NET_INTERFACE_TYPE InterfaceType, PVOID InterfaceInfo);
struct _NETRESOURCE2W {DWORD dwScope;DWORD dwType;DWORD dwUsage;DWORD dwDisplayType;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;NS_INFO ns_info;GUID ServiceType;DWORD dwProtocols;LPINT lpiProtocols;};
struct _SERVICE_INFOW {LPGUID lpServiceType;LPWSTR lpServiceName;LPWSTR lpComment;LPWSTR lpLocale;DWORD dwDisplayHint;DWORD dwVersion;DWORD dwTime;LPWSTR lpMachineName;LPSERVICE_ADDRESSES lpServiceAddress;BLOB ServiceSpecificInfo;};
typedef HRESULT (*PCONVDLLQUERY)(LPCWSTR pszOptions, LPCWSTR pszClass, PVOID pContent, PEDKCNVENV pEnv, BOOL *pfAmCandidate);
struct _STARTUPINFOW {DWORD cb;LPWSTR lpReserved;LPWSTR lpDesktop;LPWSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
typedef HRESULT (*PCONVDLLCONV)(LPCWSTR pszOptions, LPCWSTR pszClass, PVOID pContent, PVOID pContentOut, PEDKCNVENV pEnv, EDKCNVRES *pcr);
struct _JOB_INFO_2W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pNotifyName;LPWSTR pDatatype;LPWSTR pPrintProcessor;LPWSTR pParameters;LPWSTR pDriverName;LPDEVMODEW pDevMode;LPWSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct _OPTIONDATA {ULONG ulFlags;LPGUID lpRecipGUID;LPTSTR lpszAdrType;LPTSTR lpszDLLName;ULONG ulOrdinal;ULONG cbOptionsData;LPBYTE lpbOptionsData;ULONG cOptionsProps;LPSPropValue lpOptionsProps;};
struct _DRAGINFOW {UINT uSize;POINT pt;BOOL fNC;LPWSTR lpFileList;DWORD grfKeyState;};
struct _action {ACTTYPE acttype;ULONG ulActionFlavor;LPSRestriction lpRes;LPSPropTagArray lpPropTagArray;ULONG ulFlags;ULONG dwAlignPad;_action___4F51FE4D2EA0AB41DD903A61846FC72C __anonymous0;};
struct tuispicreatedialoginstanceparams_tag {DRV_REQUESTID dwRequestID;HDRVDIALOGINSTANCE hdDlgInst;HTAPIDIALOGINSTANCE htDlgInst;LPCWSTR lpszUIDLLName;LPVOID lpParams;DWORD dwSize;};
struct __MIDL___MIDL_itf_strmif_0074_0002 {LPWSTR strName;BOOL bRendered;BOOL bOutput;BOOL bZero;BOOL bMany; CLSID *clsConnectsToFilter; WCHAR *strConnectsToPin;UINT nMediaTypes; REGPINTYPES *lpMediaType;};
typedef SECURITY_STATUS ( *INITIALIZE_SECURITY_CONTEXT_FN_W)(PCredHandle, PCtxtHandle, SEC_WCHAR *, unsigned int, unsigned int, unsigned int, PSecBufferDesc, unsigned int, PCtxtHandle, PSecBufferDesc, unsigned int *, PTimeStamp);
struct tagHOSTSEC_DISPATCH_VERSION_1_2 {PHOSTSEC_VALIDATE_LOGIN HostSecValidateLogin;PHOSTSEC_CHANGE_PASSWORD HostSecChangePassword;PHOSTSEC_TRANSACTION_COMPLETE HostSecTransactionComplete;PHOSTSEC_SHUTDOWN HostSecShutdown;PHOSTSEC_HOST_PING HostSecHostPing;PHOSTSEC_TRANSACTION_COMPLETE_EX HostSecTransactionCompleteEx;};
struct IExchExtAttachedFileEventsVtbl {HRESULT ( *QueryInterface)(IExchExtAttachedFileEvents *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtAttachedFileEvents *This);ULONG ( *Release)(IExchExtAttachedFileEvents *This);HRESULT ( *OnReadPattFromSzFile)(IExchExtAttachedFileEvents *This, LPATTACH lpatt, LPTSTR lpszFile, ULONG ulFlags);HRESULT ( *OnWritePattToSzFile)(IExchExtAttachedFileEvents *This, LPATTACH lpatt, LPTSTR lpszFile, ULONG ulFlags);HRESULT ( *QueryDisallowOpenPatt)(IExchExtAttachedFileEvents *This, LPATTACH lpatt);HRESULT ( *OnOpenPatt)(IExchExtAttachedFileEvents *This, LPATTACH lpatt);HRESULT ( *OnOpenSzFile)(IExchExtAttachedFileEvents *This, LPTSTR lpszFile, ULONG ulFlags);};
struct tagNTSEC_DISPATCH_VERSION_1_2 {PNTSEC_VALIDATE_LOGIN NtSecValidateLogin;PNTSEC_CHANGE_PASSWORD NtSecChangePassword;PNTSEC_TRANSACTION_COMPLETE NtSecTransactionComplete;PNTSEC_SHUTDOWN_COMPLETE NtSecShutdownComplete;PNTSEC_GET_HOST_USER NtSecGetHostUser;PNTSEC_GET_NT_USER NtSecGetNtUser;};
struct _INTERNET_CACHE_ENTRY_INFOW {DWORD dwStructSize;LPSTR lpszSourceUrlName;LPWSTR lpszLocalFileName;DWORD CacheEntryType;DWORD dwUseCount;DWORD dwHitRate;DWORD dwSizeLow;DWORD dwSizeHigh;FILETIME LastModifiedTime;FILETIME ExpireTime;FILETIME LastAccessTime;FILETIME LastSyncTime;LPBYTE lpHeaderInfo;DWORD dwHeaderInfoSize;LPWSTR lpszFileExtension;_INTERNET_CACHE_ENTRY_INFOA___9E8845A706AB4DF9270F3009F082917C __anonymous0;};
struct _WINDBG_OLD_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;PWINDBG_GET_SYMBOL lpGetSymbolRoutine;PWINDBG_DISASM lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;};
struct IGetClusterObjectInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterObjectInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterObjectInfo *This);ULONG ( *Release)(IGetClusterObjectInfo *This);HRESULT ( *GetObjectName)(IGetClusterObjectInfo *This, LONG lObjIndex, BSTR lpszName, LONG *pcchName);CLUADMEX_OBJECT_TYPE ( *GetObjectType)(IGetClusterObjectInfo *This, LONG lObjIndex);};
struct IInternetProtocolRootVtbl {HRESULT ( *QueryInterface)(IInternetProtocolRoot *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolRoot *This);ULONG ( *Release)(IInternetProtocolRoot *This);HRESULT ( *Start)(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, DWORD dwReserved);HRESULT ( *Continue)(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocolRoot *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocolRoot *This);HRESULT ( *Resume)(IInternetProtocolRoot *This);};
struct IInternetProtocolSinkVtbl {HRESULT ( *QueryInterface)(IInternetProtocolSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolSink *This);ULONG ( *Release)(IInternetProtocolSink *This);HRESULT ( *Switch)(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData);HRESULT ( *ReportProgress)(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *ReportData)(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);HRESULT ( *ReportResult)(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);};
typedef HRESULT ( *LPOPENVIRTUALSTREAMONFILE)(LPALLOCATEBUFFER lpAllocateBuffer, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, LPSTR lpszFileName, LPSTR lpszPrefix, LPSTREAM *lppStream);
struct _NTMS_OBJECTINFORMATIONA {DWORD dwSize;DWORD dwType;SYSTEMTIME Created;SYSTEMTIME Modified;NTMS_GUID ObjectGuid;BOOL Enabled;DWORD dwOperationalState;CHAR szName[64];CHAR szDescription[127];union _NTMS_OBJECTINFORMATIONA___C54245BCF81BD8C2976163E7CB33D303 Info;};
struct _NTMS_OBJECTINFORMATIONW {DWORD dwSize;DWORD dwType;SYSTEMTIME Created;SYSTEMTIME Modified;NTMS_GUID ObjectGuid;BOOL Enabled;DWORD dwOperationalState;WCHAR szName[64];WCHAR szDescription[127];union _NTMS_OBJECTINFORMATIONW___0CBDE24DA5C159C356A2BA5F5BFBCD0A Info;};
struct IGetClusterDataInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterDataInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterDataInfo *This);ULONG ( *Release)(IGetClusterDataInfo *This);HRESULT ( *GetClusterName)(IGetClusterDataInfo *This, BSTR lpszName, LONG *pcchName);HCLUSTER ( *GetClusterHandle)(IGetClusterDataInfo *This);LONG ( *GetObjectCount)(IGetClusterDataInfo *This);};
struct IDirectoryAttrMgmtVtbl {HRESULT ( *QueryInterface)(IDirectoryAttrMgmt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectoryAttrMgmt *This);ULONG ( *Release)(IDirectoryAttrMgmt *This);HRESULT ( *EnumAttributes)(IDirectoryAttrMgmt *This, LPWSTR *ppszAttrNames, DWORD dwNumAttributes, PADS_ATTR_DEF *ppAttrDefinition, DWORD *pdwNumAttributes);HRESULT ( *CreateAttributeDefinition)(IDirectoryAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF pAttributeDefinition);HRESULT ( *ReadAttributeDefinition)(IDirectoryAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF *pAttributeDefinition);HRESULT ( *WriteAttributeDefinition)(IDirectoryAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF pAttributeDefinition);HRESULT ( *DeleteAttributeDefinition)(IDirectoryAttrMgmt *This, LPWSTR pszAttributeName);};
struct _CMInvokeCommandInfoEx {DWORD cbSize;DWORD fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;DWORD dwHotKey;HANDLE hIcon;LPCSTR lpTitle;LPCWSTR lpVerbW;LPCWSTR lpParametersW;LPCWSTR lpDirectoryW;LPCWSTR lpTitleW;POINT ptInvoke;};
typedef BOOLEAN NOTIFYOFNEWCONNECTION(PLDAP PrimaryConnection, PLDAP ReferralFromConnection, PWCHAR NewDN, PCHAR HostName, PLDAP NewConnection, ULONG PortNumber, PVOID SecAuthIdentity, PVOID CurrentUser, ULONG ErrorCodeFromBind);
struct IDvdGraphBuilderVtbl {HRESULT ( *QueryInterface)(IDvdGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdGraphBuilder *This);ULONG ( *Release)(IDvdGraphBuilder *This);HRESULT ( *GetFiltergraph)(IDvdGraphBuilder *This, IGraphBuilder **ppGB);HRESULT ( *GetDvdInterface)(IDvdGraphBuilder *This,  IID * riid, void **ppvIF);HRESULT ( *RenderDvdVideoVolume)(IDvdGraphBuilder *This, LPCWSTR lpcwszPathName, DWORD dwFlags, AM_DVD_RENDERSTATUS *pStatus);};
struct IFullScreenVideoVtbl {HRESULT ( *QueryInterface)(IFullScreenVideo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFullScreenVideo *This);ULONG ( *Release)(IFullScreenVideo *This);HRESULT ( *CountModes)(IFullScreenVideo *This, int *pModes);HRESULT ( *GetModeInfo)(IFullScreenVideo *This, int Mode, int *pWidth, int *pHeight, int *pDepth);HRESULT ( *GetCurrentMode)(IFullScreenVideo *This, int *pMode);HRESULT ( *IsModeAvailable)(IFullScreenVideo *This, int Mode);HRESULT ( *IsModeEnabled)(IFullScreenVideo *This, int Mode);HRESULT ( *SetEnabled)(IFullScreenVideo *This, int Mode, int bEnabled);HRESULT ( *GetClipFactor)(IFullScreenVideo *This, int *pClipFactor);HRESULT ( *SetClipFactor)(IFullScreenVideo *This, int ClipFactor);HRESULT ( *SetMessageDrain)(IFullScreenVideo *This, HWND hwnd);HRESULT ( *GetMessageDrain)(IFullScreenVideo *This, HWND *hwnd);HRESULT ( *SetMonitor)(IFullScreenVideo *This, int Monitor);HRESULT ( *GetMonitor)(IFullScreenVideo *This, int *Monitor);HRESULT ( *HideOnDeactivate)(IFullScreenVideo *This, int Hide);HRESULT ( *IsHideOnDeactivate)(IFullScreenVideo *This);HRESULT ( *SetCaption)(IFullScreenVideo *This, BSTR strCaption);HRESULT ( *GetCaption)(IFullScreenVideo *This, BSTR *pstrCaption);HRESULT ( *SetDefault)(IFullScreenVideo *This);};
struct IResourceManagerVtbl {HRESULT ( *QueryInterface)(IResourceManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResourceManager *This);ULONG ( *Release)(IResourceManager *This);HRESULT ( *Register)(IResourceManager *This, LPCWSTR pName, LONG cResource, LONG *plToken);HRESULT ( *RegisterGroup)(IResourceManager *This, LPCWSTR pName, LONG cResource, LONG *palTokens, LONG *plToken);HRESULT ( *RequestResource)(IResourceManager *This, LONG idResource, IUnknown *pFocusObject, IResourceConsumer *pConsumer);HRESULT ( *NotifyAcquire)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer, HRESULT hr);HRESULT ( *NotifyRelease)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer, BOOL bStillWant);HRESULT ( *CancelRequest)(IResourceManager *This, LONG idResource, IResourceConsumer *pConsumer);HRESULT ( *SetFocus)(IResourceManager *This, IUnknown *pFocusObject);HRESULT ( *ReleaseFocus)(IResourceManager *This, IUnknown *pFocusObject);};
struct IAMPlayListItemVtbl {HRESULT ( *QueryInterface)(IAMPlayListItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPlayListItem *This);ULONG ( *Release)(IAMPlayListItem *This);HRESULT ( *GetFlags)(IAMPlayListItem *This, DWORD *pdwFlags);HRESULT ( *GetSourceCount)(IAMPlayListItem *This, DWORD *pdwSources);HRESULT ( *GetSourceURL)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrURL);HRESULT ( *GetSourceStart)(IAMPlayListItem *This, DWORD dwSourceIndex, REFERENCE_TIME *prtStart);HRESULT ( *GetSourceDuration)(IAMPlayListItem *This, DWORD dwSourceIndex, REFERENCE_TIME *prtDuration);HRESULT ( *GetSourceStartMarker)(IAMPlayListItem *This, DWORD dwSourceIndex, DWORD *pdwMarker);HRESULT ( *GetSourceEndMarker)(IAMPlayListItem *This, DWORD dwSourceIndex, DWORD *pdwMarker);HRESULT ( *GetSourceStartMarkerName)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrStartMarker);HRESULT ( *GetSourceEndMarkerName)(IAMPlayListItem *This, DWORD dwSourceIndex, BSTR *pbstrEndMarker);};
struct IOleUndoManagerVtbl {HRESULT ( *QueryInterface)(IOleUndoManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoManager *This);ULONG ( *Release)(IOleUndoManager *This);HRESULT ( *Open)(IOleUndoManager *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleUndoManager *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *GetOpenParentState)(IOleUndoManager *This, DWORD *pdwState);HRESULT ( *DiscardFrom)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *UndoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *RedoTo)(IOleUndoManager *This, IOleUndoUnit *pUU);HRESULT ( *EnumUndoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *EnumRedoable)(IOleUndoManager *This, IEnumOleUndoUnits **ppEnum);HRESULT ( *GetLastUndoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *GetLastRedoDescription)(IOleUndoManager *This, BSTR *pBstr);HRESULT ( *Enable)(IOleUndoManager *This, BOOL fEnable);};
struct IRunnableObjectVtbl {HRESULT ( *QueryInterface)(IRunnableObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRunnableObject *This);ULONG ( *Release)(IRunnableObject *This);HRESULT ( *GetRunningClass)(IRunnableObject *This, LPCLSID lpClsid);HRESULT ( *Run)(IRunnableObject *This, LPBINDCTX pbc);BOOL ( *IsRunning)(IRunnableObject *This);HRESULT ( *LockRunning)(IRunnableObject *This, BOOL fLock, BOOL fLastUnlockCloses);HRESULT ( *SetContainedObject)(IRunnableObject *This, BOOL fContained);};
struct IServerSecurityVtbl {HRESULT ( *QueryInterface)(IServerSecurity *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServerSecurity *This);ULONG ( *Release)(IServerSecurity *This);HRESULT ( *QueryBlanket)(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);HRESULT ( *ImpersonateClient)(IServerSecurity *This);HRESULT ( *RevertToSelf)(IServerSecurity *This);BOOL ( *IsImpersonating)(IServerSecurity *This);};
struct IHttpNegotiateVtbl {HRESULT ( *QueryInterface)(IHttpNegotiate *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHttpNegotiate *This);ULONG ( *Release)(IHttpNegotiate *This);HRESULT ( *BeginningTransaction)(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT ( *OnResponse)(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);};
struct ILayoutStorageVtbl {HRESULT ( *QueryInterface)(ILayoutStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ILayoutStorage *This);ULONG ( *Release)(ILayoutStorage *This);HRESULT ( *LayoutScript)(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);HRESULT ( *BeginMonitor)(ILayoutStorage *This);HRESULT ( *EndMonitor)(ILayoutStorage *This);HRESULT ( *ReLayoutDocfile)(ILayoutStorage *This, OLECHAR *pwcsNewDfName);HRESULT ( *ReLayoutDocfileOnILockBytes)(ILayoutStorage *This, ILockBytes *pILockBytes);};
struct IPersistFolderVtbl {HRESULT ( *QueryInterface)(IPersistFolder *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPersistFolder *This);ULONG ( *Release)(IPersistFolder *This);HRESULT ( *GetClassID)(IPersistFolder *This, LPCLSID lpClassID);HRESULT ( *Initialize)(IPersistFolder *This, LPCITEMIDLIST pidl);};
struct ITaskSchedulerVtbl {HRESULT ( *QueryInterface)(ITaskScheduler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITaskScheduler *This);ULONG ( *Release)(ITaskScheduler *This);HRESULT ( *SetTargetComputer)(ITaskScheduler *This, LPCWSTR pwszComputer);HRESULT ( *GetTargetComputer)(ITaskScheduler *This, LPWSTR *ppwszComputer);HRESULT ( *Enum)(ITaskScheduler *This, IEnumWorkItems **ppEnumWorkItems);HRESULT ( *Activate)(ITaskScheduler *This, LPCWSTR pwszName,  IID * riid, IUnknown **ppUnk);HRESULT ( *Delete)(ITaskScheduler *This, LPCWSTR pwszName);HRESULT ( *NewWorkItem)(ITaskScheduler *This, LPCWSTR pwszTaskName,  CLSID * rclsid,  IID * riid, IUnknown **ppUnk);HRESULT ( *AddWorkItem)(ITaskScheduler *This, LPCWSTR pwszTaskName, IScheduledWorkItem *pWorkItem);HRESULT ( *IsOfType)(ITaskScheduler *This, LPCWSTR pwszName,  IID * riid);};
struct IURLSearchHookVtbl {HRESULT ( *QueryInterface)(IURLSearchHook *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IURLSearchHook *This);ULONG ( *Release)(IURLSearchHook *This);HRESULT ( *Translate)(IURLSearchHook *This, LPWSTR lpwszSearchURL, DWORD cchBufferSize);};
typedef HRESULT ( *LPOPENSTREAMONFILE)(LPALLOCATEBUFFER lpAllocateBuffer, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, LPTSTR lpszFileName, LPTSTR lpszPrefix, LPSTREAM *lppStream);
typedef HRESULT ( *PFN_WPPBINDTOSITEW)(HWND hwnd, LPCWSTR sSiteName, LPCWSTR sURL,  IID * riid, DWORD dwFlag, DWORD dwReserved, PVOID *ppvUnk);
struct IGraphBuilderVtbl {HRESULT ( *QueryInterface)(IGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGraphBuilder *This);ULONG ( *Release)(IGraphBuilder *This);HRESULT ( *AddFilter)(IGraphBuilder *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IGraphBuilder *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IGraphBuilder *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IGraphBuilder *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IGraphBuilder *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IGraphBuilder *This, IPin *ppin);HRESULT ( *Disconnect)(IGraphBuilder *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IGraphBuilder *This);HRESULT ( *Connect)(IGraphBuilder *This, IPin *ppinOut, IPin *ppinIn);HRESULT ( *Render)(IGraphBuilder *This, IPin *ppinOut);HRESULT ( *RenderFile)(IGraphBuilder *This, LPCWSTR lpcwstrFile, LPCWSTR lpcwstrPlayList);HRESULT ( *AddSourceFilter)(IGraphBuilder *This, LPCWSTR lpcwstrFileName, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *SetLogFile)(IGraphBuilder *This, HANDLE hFile);HRESULT ( *Abort)(IGraphBuilder *This);HRESULT ( *ShouldOperationContinue)(IGraphBuilder *This);};
struct IObtainRatingVtbl {HRESULT ( *QueryInterface)(IAMMediaContent *This,  IID * riid, void **ppvObj);ULONG ( *AddRef)(IAMMediaContent *This);ULONG ( *Release)(IAMMediaContent *This);HRESULT ( *ObtainRating)(IAMMediaContent *This, LPCTSTR pszTargetUrl, HANDLE hAbortEvent, IMalloc *pAllocator, LPSTR *ppRatingOut);ULONG ( *GetSortOrder)(IAMMediaContent *This);};
struct tagREBARBANDINFOW {UINT cbSize;UINT fMask;UINT fStyle;COLORREF clrFore;COLORREF clrBack;LPWSTR lpText;UINT cch;int iImage;HWND hwndChild;UINT cxMinChild;UINT cyMinChild;UINT cx;HBITMAP hbmBack;UINT wID;UINT cyChild;UINT cyMaxChild;UINT cyIntegral;UINT cxIdeal;LPARAM lParam;UINT cxHeader;};
struct IColumnsInfoVtbl {HRESULT ( *QueryInterface)(IColumnsInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IColumnsInfo *This);ULONG ( *Release)(IColumnsInfo *This);HRESULT ( *GetColumnInfo)(IColumnsInfo *This, ULONG *pcColumns, DBCOLUMNINFO **prgInfo, OLECHAR **ppStringsBuffer);HRESULT ( *MapColumnIDs)(IColumnsInfo *This, ULONG cColumnIDs,  DBID  *    rgColumnIDs, ULONG  *    rgColumns);};
struct IHlinkTargetVtbl {HRESULT ( *QueryInterface)(IHlinkTarget *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkTarget *This);ULONG ( *Release)(IHlinkTarget *This);HRESULT ( *SetBrowseContext)(IHlinkTarget *This, IHlinkBrowseContext *pihlbc);HRESULT ( *GetBrowseContext)(IHlinkTarget *This, IHlinkBrowseContext **ppihlbc);HRESULT ( *Navigate)(IHlinkTarget *This, DWORD grfHLNF, LPCWSTR pwzJumpLocation);HRESULT ( *GetMoniker)(IHlinkTarget *This, LPCWSTR pwzLocation, DWORD dwAssign, IMoniker **ppimkLocation);HRESULT ( *GetFriendlyName)(IHlinkTarget *This, LPCWSTR pwzLocation, LPWSTR *ppwzFriendlyName);};
struct IOleUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleUndoUnit *This);ULONG ( *Release)(IOleUndoUnit *This);HRESULT ( *Do)(IOleUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleUndoUnit *This);};
struct _SHFILEOPSTRUCTW {HWND hwnd;UINT wFunc;LPCWSTR pFrom;LPCWSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCWSTR lpszProgressTitle;};
struct tagMSGBOXPARAMSW {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpszText;LPCWSTR lpszCaption;DWORD dwStyle;LPCWSTR lpszIcon;DWORD dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct tagNMTTDISPINFOW {NMHDR hdr;LPWSTR lpszText;WCHAR szText[80];HINSTANCE hinst;UINT uFlags;LPARAM lParam;};
struct IDSAttrMgmtVtbl {HRESULT ( *QueryInterface)(IDSAttrMgmt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDSAttrMgmt *This);ULONG ( *Release)(IDSAttrMgmt *This);HRESULT ( *EnumAttributes)(IDSAttrMgmt *This, LPWSTR *ppszAttrNames, DWORD dwNumAttributes, PADS_ATTR_DEF *ppAttrDefinition, DWORD *pdwNumAttributes);HRESULT ( *CreateAttributeDefinition)(IDSAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF pAttributeDefinition);HRESULT ( *ReadAttributeDefinition)(IDSAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF *pAttributeDefinition);HRESULT ( *WriteAttributeDefinition)(IDSAttrMgmt *This, LPWSTR pszAttributeName, PADS_ATTR_DEF pAttributeDefinition);HRESULT ( *DeleteAttributeDefinition)(IDSAttrMgmt *This, LPWSTR pszAttributeName);};
struct IHlinkFrameVtbl {HRESULT ( *QueryInterface)(IHlinkFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkFrame *This);ULONG ( *Release)(IHlinkFrame *This);HRESULT ( *SetBrowseContext)(IHlinkFrame *This, IHlinkBrowseContext *pihlbc);HRESULT ( *GetBrowseContext)(IHlinkFrame *This, IHlinkBrowseContext **ppihlbc);HRESULT ( *Navigate)(IHlinkFrame *This, DWORD grfHLNF, LPBC pbc, IBindStatusCallback *pibsc, IHlink *pihlNavigate);HRESULT ( *OnNavigate)(IHlinkFrame *This, DWORD grfHLNF, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName, DWORD dwreserved);HRESULT ( *UpdateHlink)(IHlinkFrame *This, ULONG uHLID, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);};
struct tagCHOOSECOLORW {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct IDispErrorVtbl {HRESULT ( *QueryInterface)(IDispError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispError *This);ULONG ( *Release)(IDispError *This);HRESULT ( *QueryErrorInfo)(IDispError *This, GUID guidErrorType, IDispError **ppde);HRESULT ( *GetNext)(IDispError *This, IDispError **ppde);HRESULT ( *GetHresult)(IDispError *This, HRESULT *phr);HRESULT ( *GetSource)(IDispError *This, BSTR *pbstrSource);HRESULT ( *GetHelpInfo)(IDispError *This, BSTR *pbstrFileName, DWORD *pdwContext);HRESULT ( *GetDescription)(IDispError *This, BSTR *pbstrDescription);};
struct IErrorInfoVtbl {HRESULT ( *QueryInterface)(IErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorInfo *This);ULONG ( *Release)(IErrorInfo *This);HRESULT ( *GetGUID)(IErrorInfo *This, GUID *pGUID);HRESULT ( *GetSource)(IErrorInfo *This, BSTR *pBstrSource);HRESULT ( *GetDescription)(IErrorInfo *This, BSTR *pBstrDescription);HRESULT ( *GetHelpFile)(IErrorInfo *This, BSTR *pBstrHelpFile);HRESULT ( *GetHelpContext)(IErrorInfo *This, DWORD *pdwHelpContext);};
struct IHlinkSiteVtbl {HRESULT ( *QueryInterface)(IHlinkSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkSite *This);ULONG ( *Release)(IHlinkSite *This);HRESULT ( *QueryService)(IHlinkSite *This, DWORD dwSiteData,  GUID * guidService,  IID * riid, IUnknown **ppiunk);HRESULT ( *GetMoniker)(IHlinkSite *This, DWORD dwSiteData, DWORD dwAssign, DWORD dwWhich, IMoniker **ppimk);HRESULT ( *ReadyToNavigate)(IHlinkSite *This, DWORD dwSiteData, DWORD dwReserved);HRESULT ( *OnNavigationComplete)(IHlinkSite *This, DWORD dwSiteData, DWORD dwreserved, HRESULT hrError, LPCWSTR pwzError);};
struct ITrackFileVtbl {HRESULT ( *QueryInterface)(ITrackFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrackFile *This);ULONG ( *Release)(ITrackFile *This);HRESULT ( *CreateFromPath)(ITrackFile *This,  OLECHAR *poszPath);HRESULT ( *Resolve)(ITrackFile *This, DWORD *pcbPath, OLECHAR *poszPath, DWORD dwMillisecondTimeout);HRESULT ( *Open)(ITrackFile *This, DWORD *pcbPathHint, OLECHAR *poszPathHint, DWORD dwMillisecondTimeout, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlags, HANDLE *phFile);};
struct _tagBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;STGMEDIUM stgmedData;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;SECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct tagEXCEPINFO {WORD wCode;WORD wReserved;BSTR bstrSource;BSTR bstrDescription;BSTR bstrHelpFile;DWORD dwHelpContext;PVOID pvReserved;HRESULT ( *pfnDeferredFillIn)(struct tagEXCEPINFO *);SCODE scode;};
struct tagTOOLINFOW {UINT cbSize;UINT uFlags;HWND hwnd;UINT uId;RECT rect;HINSTANCE hinst;LPWSTR lpszText;LPARAM lParam;};
struct IUrlMonVtbl {HRESULT ( *QueryInterface)(IUrlMon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlMon *This);ULONG ( *Release)(IUrlMon *This);HRESULT ( *AsyncGetClassBits)(IUrlMon *This,  CLSID * rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext,  IID * riid, DWORD flags);};
typedef ULONG  WIZARDENTRY(HINSTANCE hProviderDLLInstance, LPTSTR *lppcsResourceName, DLGPROC *lppDlgProc, LPMAPIPROP lpMapiProp, LPVOID lpMapiSupportObject);
struct _EDKCNVENV {INT nVersionEDKCNVENV;LPCWSTR pszConversionPoint;LHANDLE lphSession;LPMDB lpMDB;LPADRBOOK lpAB;LPVOID pGatewayDefined;};
struct IShellIconOverlayIdentifierVtbl {HRESULT ( *QueryInterface)(IShellIconOverlayIdentifier *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellIconOverlayIdentifier *This);ULONG ( *Release)(IShellIconOverlayIdentifier *This);HRESULT ( *IsMemberOf)(IShellIconOverlayIdentifier *This, LPCWSTR pwszPath, DWORD dwAttrib);HRESULT ( *GetOverlayInfo)(IShellIconOverlayIdentifier *This, LPWSTR pwszIconFile, int cchMax, int *pIndex, DWORD *pdwFlags);HRESULT ( *GetPriority)(IShellIconOverlayIdentifier *This, int *pIPriority);};
struct IInternetSecurityManagerVtbl {HRESULT ( *QueryInterface)(IInternetSecurityManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSecurityManager *This);ULONG ( *Release)(IInternetSecurityManager *This);HRESULT ( *SetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite);HRESULT ( *GetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite);HRESULT ( *MapUrlToZone)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);HRESULT ( *GetSecurityId)(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD dwReserved);HRESULT ( *ProcessUrlAction)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT ( *QueryCustomPolicy)(IInternetSecurityManager *This, LPCWSTR pwszUrl,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);HRESULT ( *SetZoneMapping)(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);HRESULT ( *GetZoneMappings)(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);};
struct IGetClusterResourceInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterResourceInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterResourceInfo *This);ULONG ( *Release)(IGetClusterResourceInfo *This);HRESOURCE ( *GetResourceHandle)(IGetClusterResourceInfo *This, LONG lObjIndex);HRESULT ( *GetResourceTypeName)(IGetClusterResourceInfo *This, LONG lObjIndex, BSTR lpszResTypeName, LONG *pcchResTypeName);BOOL ( *GetResourceNetworkName)(IGetClusterResourceInfo *This, LONG lObjIndex, BSTR lpszNetName, ULONG *pcchNetName);};
struct ICommandWithParametersVtbl {HRESULT ( *QueryInterface)(ICommandWithParameters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandWithParameters *This);ULONG ( *Release)(ICommandWithParameters *This);HRESULT ( *GetParameterInfo)(ICommandWithParameters *This, ULONG *pcParams, DBPARAMINFO **prgParamInfo, OLECHAR **ppNamesBuffer);HRESULT ( *MapParameterNames)(ICommandWithParameters *This, ULONG cParamNames,  OLECHAR * *    rgParamNames, LONG  *    rgParamOrdinals);HRESULT ( *SetParameterInfo)(ICommandWithParameters *This, ULONG cParams,  ULONG  *    rgParamOrdinals,  DBPARAMBINDINFO  *    rgParamBindInfo);};
struct IRowsetWithParametersVtbl {HRESULT ( *QueryInterface)(IRowsetWithParameters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRowsetWithParameters *This);ULONG ( *Release)(IRowsetWithParameters *This);HRESULT ( *GetParameterInfo)(IRowsetWithParameters *This, ULONG *pcParams, DBPARAMINFO **prgParamInfo, OLECHAR **ppNamesBuffer);HRESULT ( *Requery)(IRowsetWithParameters *This, DBPARAMS *pParams, ULONG *pulErrorParam, HCHAPTER *phReserved);};
struct IOleUILinkContainerWVtbl {HRESULT ( *QueryInterface)(IOleUILinkContainerW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUILinkContainerW *This);ULONG ( *Release)(IOleUILinkContainerW *This);DWORD ( *GetNextLink)(IOleUILinkContainerW *This, DWORD dwLink);HRESULT ( *SetLinkUpdateOptions)(IOleUILinkContainerW *This, DWORD dwLink, DWORD dwUpdateOpt);HRESULT ( *GetLinkUpdateOptions)(IOleUILinkContainerW *This, DWORD dwLink, DWORD *lpdwUpdateOpt);HRESULT ( *SetLinkSource)(IOleUILinkContainerW *This, DWORD dwLink, LPWSTR lpszDisplayName, ULONG lenFileName, ULONG *pchEaten, BOOL fValidateSource);HRESULT ( *GetLinkSource)(IOleUILinkContainerW *This, DWORD dwLink, LPWSTR *lplpszDisplayName, ULONG *lplenFileName, LPWSTR *lplpszFullLinkType, LPWSTR *lplpszShortLinkType, BOOL *lpfSourceAvailable, BOOL *lpfIsSelected);HRESULT ( *OpenLinkSource)(IOleUILinkContainerW *This, DWORD dwLink);HRESULT ( *UpdateLink)(IOleUILinkContainerW *This, DWORD dwLink, BOOL fErrorMessage, BOOL fReserved);HRESULT ( *CancelLink)(IOleUILinkContainerW *This, DWORD dwLink);};
struct ITrackFileRestrictedVtbl {HRESULT ( *QueryInterface)(ITrackFileRestricted *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITrackFileRestricted *This);ULONG ( *Release)(ITrackFileRestricted *This);HRESULT ( *CreateFromPath)(ITrackFileRestricted *This,  OLECHAR *poszPath);HRESULT ( *Resolve)(ITrackFileRestricted *This, DWORD *pcbPath, OLECHAR *poszPath, DWORD dwMillisecondTimeout, TrkMendRestrictions Restrictions);HRESULT ( *Open)(ITrackFileRestricted *This, DWORD *pcbPathHint, OLECHAR *poszPathHint, DWORD dwMillisecondTimeout, DWORD dwDesiredAccess, DWORD dwShareMode, DWORD dwFlags, HANDLE *phFile);};
struct IAMVideoCompressionVtbl {HRESULT ( *QueryInterface)(IAMVideoCompression *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMVideoCompression *This);ULONG ( *Release)(IAMVideoCompression *This);HRESULT ( *put_KeyFrameRate)(IAMVideoCompression *This, int KeyFrameRate);HRESULT ( *get_KeyFrameRate)(IAMVideoCompression *This, int *pKeyFrameRate);HRESULT ( *put_PFramesPerKeyFrame)(IAMVideoCompression *This, int PFramesPerKeyFrame);HRESULT ( *get_PFramesPerKeyFrame)(IAMVideoCompression *This, int *pPFramesPerKeyFrame);HRESULT ( *put_Quality)(IAMVideoCompression *This, double Quality);HRESULT ( *get_Quality)(IAMVideoCompression *This, double *pQuality);HRESULT ( *put_WindowSize)(IAMVideoCompression *This, DWORDLONG WindowSize);HRESULT ( *get_WindowSize)(IAMVideoCompression *This, DWORDLONG *pWindowSize);HRESULT ( *GetInfo)(IAMVideoCompression *This, WCHAR *pszVersion, int *pcbVersion, LPWSTR pszDescription, int *pcbDescription, int *pDefaultKeyFrameRate, int *pDefaultPFramesPerKey, double *pDefaultQuality, int *pCapabilities);HRESULT ( *OverrideKeyFrame)(IAMVideoCompression *This, int FrameNumber);HRESULT ( *OverrideFrameSize)(IAMVideoCompression *This, int FrameNumber, int Size);};
struct IHlinkBrowseContextVtbl {HRESULT ( *QueryInterface)(IHlinkBrowseContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlinkBrowseContext *This);ULONG ( *Release)(IHlinkBrowseContext *This);HRESULT ( *Register)(IHlinkBrowseContext *This, DWORD reserved, IUnknown *piunk, IMoniker *pimk, DWORD *pdwRegister);HRESULT ( *GetObjectA)(IHlinkBrowseContext *This, IMoniker *pimk, BOOL fBindIfRootRegistered, IUnknown **ppiunk);HRESULT ( *Revoke)(IHlinkBrowseContext *This, DWORD dwRegister);HRESULT ( *SetBrowseWindowInfo)(IHlinkBrowseContext *This, HLBWINFO *phlbwi);HRESULT ( *GetBrowseWindowInfo)(IHlinkBrowseContext *This, HLBWINFO *phlbwi);HRESULT ( *SetInitialHlink)(IHlinkBrowseContext *This, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);HRESULT ( *OnNavigateHlink)(IHlinkBrowseContext *This, DWORD grfHLNF, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName, ULONG *puHLID);HRESULT ( *UpdateHlink)(IHlinkBrowseContext *This, ULONG uHLID, IMoniker *pimkTarget, LPCWSTR pwzLocation, LPCWSTR pwzFriendlyName);HRESULT ( *EnumNavigationStack)(IHlinkBrowseContext *This, DWORD dwReserved, DWORD grfHLFNAMEF, IEnumHLITEM **ppienumhlitem);HRESULT ( *QueryHlink)(IHlinkBrowseContext *This, DWORD grfHLQF, ULONG uHLID);HRESULT ( *GetHlink)(IHlinkBrowseContext *This, ULONG uHLID, IHlink **ppihl);HRESULT ( *SetCurrentHlink)(IHlinkBrowseContext *This, ULONG uHLID);HRESULT ( *Clone)(IHlinkBrowseContext *This, IUnknown *piunkOuter,  IID * riid, IUnknown **ppiunkObj);HRESULT ( *Close)(IHlinkBrowseContext *This, DWORD reserved);};
struct IActiveScriptErrorVtbl {HRESULT ( *QueryInterface)(IActiveScriptError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptError *This);ULONG ( *Release)(IActiveScriptError *This);HRESULT ( *GetExceptionInfo)(IActiveScriptError *This, EXCEPINFO *pexcepinfo);HRESULT ( *GetSourcePosition)(IActiveScriptError *This, DWORD *pdwSourceContext, ULONG *pulLineNumber, LONG *plCharacterPosition);HRESULT ( *GetSourceLineText)(IActiveScriptError *This, BSTR *pbstrSourceLine);};
struct IDBDataSourceAdminVtbl {HRESULT ( *QueryInterface)(IDBDataSourceAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBDataSourceAdmin *This);ULONG ( *Release)(IDBDataSourceAdmin *This);HRESULT ( *CreateDataSource)(IDBDataSourceAdmin *This, ULONG cPropertySets, DBPROPSET  *    rgPropertySets, IUnknown *pUnkOuter,  IID * riid, IUnknown **ppDBSession);HRESULT ( *DestroyDataSource)(IDBDataSourceAdmin *This);HRESULT ( *GetCreationProperties)(IDBDataSourceAdmin *This, ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertyInfoSets, DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer);HRESULT ( *ModifyDataSource)(IDBDataSourceAdmin *This, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);};
struct IFullScreenVideoExVtbl {HRESULT ( *QueryInterface)(IFullScreenVideoEx *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFullScreenVideoEx *This);ULONG ( *Release)(IFullScreenVideoEx *This);HRESULT ( *CountModes)(IFullScreenVideoEx *This, int *pModes);HRESULT ( *GetModeInfo)(IFullScreenVideoEx *This, int Mode, int *pWidth, int *pHeight, int *pDepth);HRESULT ( *GetCurrentMode)(IFullScreenVideoEx *This, int *pMode);HRESULT ( *IsModeAvailable)(IFullScreenVideoEx *This, int Mode);HRESULT ( *IsModeEnabled)(IFullScreenVideoEx *This, int Mode);HRESULT ( *SetEnabled)(IFullScreenVideoEx *This, int Mode, int bEnabled);HRESULT ( *GetClipFactor)(IFullScreenVideoEx *This, int *pClipFactor);HRESULT ( *SetClipFactor)(IFullScreenVideoEx *This, int ClipFactor);HRESULT ( *SetMessageDrain)(IFullScreenVideoEx *This, HWND hwnd);HRESULT ( *GetMessageDrain)(IFullScreenVideoEx *This, HWND *hwnd);HRESULT ( *SetMonitor)(IFullScreenVideoEx *This, int Monitor);HRESULT ( *GetMonitor)(IFullScreenVideoEx *This, int *Monitor);HRESULT ( *HideOnDeactivate)(IFullScreenVideoEx *This, int Hide);HRESULT ( *IsHideOnDeactivate)(IFullScreenVideoEx *This);HRESULT ( *SetCaption)(IFullScreenVideoEx *This, BSTR strCaption);HRESULT ( *GetCaption)(IFullScreenVideoEx *This, BSTR *pstrCaption);HRESULT ( *SetDefault)(IFullScreenVideoEx *This);HRESULT ( *SetAcceleratorTable)(IFullScreenVideoEx *This, HWND hwnd, HACCEL hAccel);HRESULT ( *GetAcceleratorTable)(IFullScreenVideoEx *This, HWND *phwnd, HACCEL *phAccel);HRESULT ( *KeepPixelAspectRatio)(IFullScreenVideoEx *This, int KeepAspect);HRESULT ( *IsKeepPixelAspectRatio)(IFullScreenVideoEx *This, int *pKeepAspect);};
struct INewShortcutHookWVtbl {HRESULT ( *QueryInterface)(INewShortcutHookW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(INewShortcutHookW *This);ULONG ( *Release)(INewShortcutHookW *This);HRESULT ( *SetReferent)(INewShortcutHookW *This, LPCWSTR pcszReferent, HWND hwnd);HRESULT ( *GetReferent)(INewShortcutHookW *This, LPWSTR pszReferent, int cchReferent);HRESULT ( *SetFolder)(INewShortcutHookW *This, LPCWSTR pcszFolder);HRESULT ( *GetFolder)(INewShortcutHookW *This, LPWSTR pszFolder, int cchFolder);HRESULT ( *GetName)(INewShortcutHookW *This, LPWSTR pszName, int cchName);HRESULT ( *GetExtension)(INewShortcutHookW *This, LPWSTR pszExtension, int cchExtension);};
struct IDirectoryObjectVtbl {HRESULT ( *QueryInterface)(IDirectoryObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectoryObject *This);ULONG ( *Release)(IDirectoryObject *This);HRESULT ( *GetObjectInformation)(IDirectoryObject *This, PADS_OBJECT_INFO *ppObjInfo);HRESULT ( *GetObjectAttributes)(IDirectoryObject *This, LPWSTR *pAttributeNames, DWORD dwNumberAttributes, PADS_ATTR_INFO *ppAttributeEntries, DWORD *pdwNumAttributesReturned);HRESULT ( *SetObjectAttributes)(IDirectoryObject *This, PADS_ATTR_INFO pAttributeEntries, DWORD dwNumAttributes, DWORD *pdwNumAttributesModified);HRESULT ( *CreateDSObject)(IDirectoryObject *This, LPWSTR pszRDNName, PADS_ATTR_INFO pAttributeEntries, DWORD dwNumAttributes, IDispatch **ppObject);HRESULT ( *DeleteDSObject)(IDirectoryObject *This, LPWSTR pszRDNName);};
typedef INT ( *LPWSPADDRESSTOSTRING)(LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFOW lpProtocolInfo, LPWSTR lpszAddressString, LPDWORD lpdwAddressStringLength, LPINT lpErrno);
struct _tagCOLORMATCHSETUPW {DWORD dwSize;DWORD dwVersion;DWORD dwFlags;HWND hwndOwner;PCWSTR pSourceName;PCWSTR pDisplayName;PCWSTR pPrinterName;DWORD dwRenderIntent;DWORD dwProofingIntent;PWSTR pMonitorProfile;DWORD ccMonitorProfile;PWSTR pPrinterProfile;DWORD ccPrinterProfile;PWSTR pTargetProfile;DWORD ccTargetProfile;DLGPROC lpfnHook;LPARAM lParam;PCMSCALLBACKW lpfnApplyCallback;LPARAM lParamApplyCallback;};
struct _tagSubscriptionInfo {DWORD cbSize;DWORD fUpdateFlags;SUBSCRIPTIONSCHEDULE schedule;CLSID customGroupCookie;LPVOID pTrigger;DWORD dwRecurseLevels;DWORD fWebcrawlerFlags;BOOL bMailNotification;BOOL bGleam;BOOL bChangesOnly;BOOL bNeedPassword;DWORD fChannelFlags;BSTR bstrUserName;BSTR bstrPassword;BSTR bstrFriendlyName;DWORD dwMaxSizeKB;SUBSCRIPTIONTYPE subType;DWORD fTaskFlags;DWORD dwReserved;};
struct IPersistFolder2Vtbl {HRESULT ( *QueryInterface)(IPersistFolder2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPersistFolder2 *This);ULONG ( *Release)(IPersistFolder2 *This);HRESULT ( *GetClassID)(IPersistFolder2 *This, LPCLSID lpClassID);HRESULT ( *Initialize)(IPersistFolder2 *This, LPCITEMIDLIST pidl);HRESULT ( *GetCurFolder)(IPersistFolder2 *This, LPITEMIDLIST *ppidl);};
struct IObjectContextVtbl {HRESULT ( *QueryInterface)(IObjectContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IObjectContext *This);ULONG ( *Release)(IObjectContext *This);HRESULT ( *CreateInstance)(IObjectContext *This,  CLSID * rclsid,  IID * riid, LPVOID *ppv);HRESULT ( *SetComplete)(IObjectContext *This);HRESULT ( *SetAbort)(IObjectContext *This);HRESULT ( *EnableCommit)(IObjectContext *This);HRESULT ( *DisableCommit)(IObjectContext *This);BOOL ( *IsInTransaction)(IObjectContext *This);BOOL ( *IsSecurityEnabled)(IObjectContext *This);HRESULT ( *IsCallerInRole)(IObjectContext *This, BSTR MIDL_0000, BOOL *MIDL_0001);};
struct IDBPropertiesVtbl {HRESULT ( *QueryInterface)(IDBProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBProperties *This);ULONG ( *Release)(IDBProperties *This);HRESULT ( *GetProperties)(IDBProperties *This, ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertySets, DBPROPSET **prgPropertySets);HRESULT ( *GetPropertyInfo)(IDBProperties *This, ULONG cPropertyIDSets,  DBPROPIDSET  *    rgPropertyIDSets, ULONG *pcPropertyInfoSets, DBPROPINFOSET **prgPropertyInfoSets, OLECHAR **ppDescBuffer);HRESULT ( *SetProperties)(IDBProperties *This, ULONG cPropertySets, DBPROPSET  *    rgPropertySets);};
struct IFilterMapperVtbl {HRESULT ( *QueryInterface)(IFilterMapper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterMapper *This);ULONG ( *Release)(IFilterMapper *This);HRESULT ( *RegisterFilter)(IFilterMapper *This, CLSID clsid, LPCWSTR Name, DWORD dwMerit);HRESULT ( *RegisterFilterInstance)(IFilterMapper *This, CLSID clsid, LPCWSTR Name, CLSID *MRId);HRESULT ( *RegisterPin)(IFilterMapper *This, CLSID Filter, LPCWSTR Name, BOOL bRendered, BOOL bOutput, BOOL bZero, BOOL bMany, CLSID ConnectsToFilter, LPCWSTR ConnectsToPin);HRESULT ( *RegisterPinType)(IFilterMapper *This, CLSID clsFilter, LPCWSTR strName, CLSID clsMajorType, CLSID clsSubType);HRESULT ( *UnregisterFilter)(IFilterMapper *This, CLSID Filter);HRESULT ( *UnregisterFilterInstance)(IFilterMapper *This, CLSID MRId);HRESULT ( *UnregisterPin)(IFilterMapper *This, CLSID Filter, LPCWSTR Name);HRESULT ( *EnumMatchingFilters)(IFilterMapper *This, IEnumRegFilters **ppEnum, DWORD dwMerit, BOOL bInputNeeded, CLSID clsInMaj, CLSID clsInSub, BOOL bRender, BOOL bOututNeeded, CLSID clsOutMaj, CLSID clsOutSub);};
struct ICodeInstallVtbl {HRESULT ( *QueryInterface)(ICodeInstall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICodeInstall *This);ULONG ( *Release)(ICodeInstall *This);HRESULT ( *GetWindow)(ICodeInstall *This,  GUID * rguidReason, HWND *phwnd);HRESULT ( *OnCodeInstallProblem)(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);};
struct IErrorLookupVtbl {HRESULT ( *QueryInterface)(IErrorLookup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorLookup *This);ULONG ( *Release)(IErrorLookup *This);HRESULT ( *GetErrorDescription)(IErrorLookup *This, HRESULT hrError, DWORD dwLookupID, DISPPARAMS *pdispparams, LCID lcid, BSTR *pbstrSource, BSTR *pbstrDescription);HRESULT ( *GetHelpInfo)(IErrorLookup *This, HRESULT hrError, DWORD dwLookupID, LCID lcid, BSTR *pbstrHelpFile, DWORD *pdwHelpContext);HRESULT ( *ReleaseErrors)(IErrorLookup *This,  DWORD dwDynamicErrorID);};
struct tagCREATESTRUCTW {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCWSTR lpszName;LPCWSTR lpszClass;DWORD dwExStyle;};
struct IMprUIHostVtbl {HRESULT ( *QueryInterface)(IMprUIHost *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMprUIHost *This);ULONG ( *Release)(IMprUIHost *This);HRESULT ( *FloatWindow)(IMprUIHost *This,  CLSID * rguidModule,  CLSID * rclsidCtrl, IMprUIPlugin *pConnection, DWORD dwContext, PWCHAR pszTitle);HRESULT ( *GlobalRefresh)(IMprUIHost *This);};
struct tagWNDCLASSEXW {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;HICON hIconSm;};
struct IDSObjectVtbl {HRESULT ( *QueryInterface)(IDSObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDSObject *This);ULONG ( *Release)(IDSObject *This);HRESULT ( *GetObjectInformation)(IDSObject *This, PADS_OBJECT_INFO *ppObjInfo);HRESULT ( *GetObjectAttributes)(IDSObject *This, LPWSTR *pAttributeNames, DWORD dwNumberAttributes, PADS_ATTR_INFO *ppAttributeEntries, DWORD *pdwNumAttributesReturned);HRESULT ( *SetObjectAttributes)(IDSObject *This, PADS_ATTR_INFO pAttributeEntries, DWORD dwNumAttributes, DWORD *pdwNumAttributesModified);HRESULT ( *CreateDSObject)(IDSObject *This, LPWSTR pszRDNName, PADS_ATTR_INFO pAttributeEntries, DWORD dwNumAttributes, IDispatch **ppObject);HRESULT ( *DeleteDSObject)(IDSObject *This, LPWSTR pszRDNName);};
struct _WSAQuerySetW {DWORD dwSize;LPWSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPWSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPWSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPWSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct tagMETHODDATA {OLECHAR *szName;PARAMDATA *ppdata;DISPID dispid;UINT iMeth;CALLCONV cc;UINT cArgs;WORD wFlags;VARTYPE vtReturn;};
struct _browseinfoW {HWND hwndOwner;LPCITEMIDLIST pidlRoot;LPWSTR pszDisplayName;LPCWSTR lpszTitle;UINT ulFlags;BFFCALLBACK lpfn;LPARAM lParam;int iImage;};
struct tagWNDCLASSW {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;};
struct IHlinkVtbl {HRESULT ( *QueryInterface)(IHlink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHlink *This);ULONG ( *Release)(IHlink *This);HRESULT ( *SetHlinkSite)(IHlink *This, IHlinkSite *pihlSite, DWORD dwSiteData);HRESULT ( *GetHlinkSite)(IHlink *This, IHlinkSite **ppihlSite, DWORD *pdwSiteData);HRESULT ( *SetMonikerReference)(IHlink *This, DWORD grfHLSETF, IMoniker *pimkTarget, LPCWSTR pwzLocation);HRESULT ( *GetMonikerReference)(IHlink *This, DWORD dwWhichRef, IMoniker **ppimkTarget, LPWSTR *ppwzLocation);HRESULT ( *SetStringReference)(IHlink *This, DWORD grfHLSETF, LPCWSTR pwzTarget, LPCWSTR pwzLocation);HRESULT ( *GetStringReference)(IHlink *This, DWORD dwWhichRef, LPWSTR *ppwzTarget, LPWSTR *ppwzLocation);HRESULT ( *SetFriendlyName)(IHlink *This, LPCWSTR pwzFriendlyName);HRESULT ( *GetFriendlyName)(IHlink *This, DWORD grfHLFNAMEF, LPWSTR *ppwzFriendlyName);HRESULT ( *SetTargetFrameName)(IHlink *This, LPCWSTR pwzTargetFrameName);HRESULT ( *GetTargetFrameName)(IHlink *This, LPWSTR *ppwzTargetFrameName);HRESULT ( *GetMiscStatus)(IHlink *This, DWORD *pdwStatus);HRESULT ( *Navigate)(IHlink *This, DWORD grfHLNF, LPBC pibc, IBindStatusCallback *pibsc, IHlinkBrowseContext *pihlbc);HRESULT ( *SetAdditionalParams)(IHlink *This, LPCWSTR pwzAdditionalParams);HRESULT ( *GetAdditionalParams)(IHlink *This, LPWSTR *ppwzAdditionalParams);};
struct tagCCINFOW {WCHAR szClass[32];DWORD flOptions;WCHAR szDesc[32];UINT cxDefault;UINT cyDefault;DWORD flStyleDefault;DWORD flExtStyleDefault;DWORD flCtrlTypeMask;INT cStyleFlags;LPCCSTYLEFLAGW aStyleFlags;WCHAR szTextDefault[256];LPFNCCSTYLEW lpfnStyle;LPFNCCSIZETOTEXTW lpfnSizeToText;DWORD dwReserved1;DWORD dwReserved2;};
struct _ADRPARM {ULONG cbABContEntryID;LPENTRYID lpABContEntryID;ULONG ulFlags;LPVOID lpReserved;ULONG ulHelpContext;LPTSTR lpszHelpFileName;LPFNABSDI lpfnABSDI;LPFNDISMISS lpfnDismiss;LPVOID lpvDismissContext;LPTSTR lpszCaption;LPTSTR lpszNewEntryTitle;LPTSTR lpszDestWellsTitle;ULONG cDestFields;ULONG nDestFieldFocus;LPTSTR *lppszDestTitles;ULONG *lpulDestComps;LPSRestriction lpContRestriction;LPSRestriction lpHierRestriction;};
struct IUniformResourceLocatorWVtbl {HRESULT ( *QueryInterface)(IUniformResourceLocatorW *This,  IID * riid, PVOID *ppvObject);ULONG ( *AddRef)(IUniformResourceLocatorW *This);ULONG ( *Release)(IUniformResourceLocatorW *This);HRESULT ( *SetURL)(IUniformResourceLocatorW *This, LPCWSTR pcszURL, DWORD dwInFlags);HRESULT ( *GetURL)(IUniformResourceLocatorW *This, LPWSTR *ppszURL);HRESULT ( *InvokeCommand)(IUniformResourceLocatorW *This, PURLINVOKECOMMANDINFOW purlici);};
struct IDockingWindowFrameVtbl {HRESULT ( *QueryInterface)(IDockingWindowFrame *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDockingWindowFrame *This);ULONG ( *Release)(IDockingWindowFrame *This);HRESULT ( *GetWindow)(IDockingWindowFrame *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowFrame *This, BOOL fEnterMode);HRESULT ( *AddToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, LPCWSTR pwszItem, DWORD dwAddFlags);HRESULT ( *RemoveToolbar)(IDockingWindowFrame *This, IUnknown *punkSrc, DWORD dwRemoveFlags);HRESULT ( *FindToolbar)(IDockingWindowFrame *This, LPCWSTR pwszItem,  IID * riid, LPVOID *ppvObj);};
struct ConnectionEventsVtVtbl {HRESULT ( *QueryInterface)(ConnectionEventsVt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ConnectionEventsVt *This);ULONG ( *Release)(ConnectionEventsVt *This);HRESULT ( *InfoMessage)(ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *BeginTransComplete)(ConnectionEventsVt *This, LONG TransactionLevel, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *CommitTransComplete)(ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *RollbackTransComplete)(ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *WillExecute)(ConnectionEventsVt *This, BSTR *Source, CursorTypeEnum *CursorType, LockTypeEnum *LockType, int *Options, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);HRESULT ( *ExecuteComplete)(ConnectionEventsVt *This, LONG RecordsAffected, ADOError *pError, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);HRESULT ( *WillConnect)(ConnectionEventsVt *This, BSTR *ConnectionString, BSTR *UserID, BSTR *Password, int *Options, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *ConnectComplete)(ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);HRESULT ( *Disconnect)(ConnectionEventsVt *This, EventStatusEnum *adStatus, _ADOConnection *pConnection);};
struct IDirectDrawFactoryVtbl {HRESULT ( *QueryInterface)(IDirectDrawFactory *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectDrawFactory *This);ULONG ( *Release)(IDirectDrawFactory *This);HRESULT ( *CreateDirectDraw)(IDirectDrawFactory *This, GUID *pGUID, HWND hWnd, DWORD dwCoopLevelFlags, DWORD dwReserved, IUnknown *pUnkOuter, IDirectDraw **ppDirectDraw);HRESULT ( *DirectDrawEnumerateA)(IDirectDrawFactory *This, LPDDENUMCALLBACK lpCallback, LPVOID lpContext);};
struct IDockingWindowSiteVtbl {HRESULT ( *QueryInterface)(IDockingWindowSite *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDockingWindowSite *This);ULONG ( *Release)(IDockingWindowSite *This);HRESULT ( *GetWindow)(IDockingWindowSite *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IDockingWindowSite *This, BOOL fEnterMode);HRESULT ( *GetBorderDW)(IDockingWindowSite *This, IUnknown *punkObj, LPRECT prcBorder);HRESULT ( *RequestBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);HRESULT ( *SetBorderSpaceDW)(IDockingWindowSite *This, IUnknown *punkObj, LPCBORDERWIDTHS pbw);};
struct IOleParentUndoUnitVtbl {HRESULT ( *QueryInterface)(IOleParentUndoUnit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleParentUndoUnit *This);ULONG ( *Release)(IOleParentUndoUnit *This);HRESULT ( *Do)(IOleParentUndoUnit *This, IOleUndoManager *pUndoManager);HRESULT ( *GetDescription)(IOleParentUndoUnit *This, BSTR *pBstr);HRESULT ( *GetUnitType)(IOleParentUndoUnit *This, CLSID *pClsid, LONG *plID);HRESULT ( *OnNextAdd)(IOleParentUndoUnit *This);HRESULT ( *Open)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU);HRESULT ( *Close)(IOleParentUndoUnit *This, IOleParentUndoUnit *pPUU, BOOL fCommit);HRESULT ( *Add)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *FindUnit)(IOleParentUndoUnit *This, IOleUndoUnit *pUU);HRESULT ( *GetParentState)(IOleParentUndoUnit *This, DWORD *pdwState);};
struct IGetClusterUIInfoVtbl {HRESULT ( *QueryInterface)(IGetClusterUIInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IGetClusterUIInfo *This);ULONG ( *Release)(IGetClusterUIInfo *This);HRESULT ( *GetClusterName)(IGetClusterUIInfo *This, BSTR lpszName, LONG *pcchName);LCID ( *GetLocale)(IGetClusterUIInfo *This);HFONT ( *GetFont)(IGetClusterUIInfo *This);HICON ( *GetIcon)(IGetClusterUIInfo *This);};
struct IInternetProtocolVtbl {HRESULT ( *QueryInterface)(IInternetProtocol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocol *This);ULONG ( *Release)(IInternetProtocol *This);HRESULT ( *Start)(IInternetProtocol *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, DWORD dwReserved);HRESULT ( *Continue)(IInternetProtocol *This, PROTOCOLDATA *pProtocolData);HRESULT ( *Abort)(IInternetProtocol *This, HRESULT hrReason, DWORD dwOptions);HRESULT ( *Terminate)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *Suspend)(IInternetProtocol *This);HRESULT ( *Resume)(IInternetProtocol *This);HRESULT ( *Read)(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT ( *Seek)(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT ( *LockRequest)(IInternetProtocol *This, DWORD dwOptions);HRESULT ( *UnlockRequest)(IInternetProtocol *This);};
struct IInternetSessionVtbl {HRESULT ( *QueryInterface)(IInternetSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetSession *This);ULONG ( *Release)(IInternetSession *This);HRESULT ( *RegisterNameSpace)(IInternetSession *This, IClassFactory *pCF,  CLSID * rclsid, LPCWSTR pwzProtocol, ULONG cPatterns,  LPCWSTR *ppwzPatterns, DWORD dwReserved);HRESULT ( *UnregisterNameSpace)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol);HRESULT ( *RegisterMimeFilter)(IInternetSession *This, IClassFactory *pCF,  CLSID * rclsid, LPCWSTR pwzType);HRESULT ( *UnregisterMimeFilter)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType);HRESULT ( *CreateBinding)(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);HRESULT ( *SetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);HRESULT ( *GetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);};
struct ICatInformationVtbl {HRESULT ( *QueryInterface)(ICatInformation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatInformation *This);ULONG ( *Release)(ICatInformation *This);HRESULT ( *EnumCategories)(ICatInformation *This, LCID lcid, IEnumCATEGORYINFO **ppenumCategoryInfo);HRESULT ( *GetCategoryDesc)(ICatInformation *This, REFCATID rcatid, LCID lcid, LPWSTR *pszDesc);HRESULT ( *EnumClassesOfCategories)(ICatInformation *This, ULONG cImplemented, CATID  *    rgcatidImpl, ULONG cRequired, CATID  *    rgcatidReq, IEnumGUID **ppenumClsid);HRESULT ( *IsClassOfCategories)(ICatInformation *This,  CLSID * rclsid, ULONG cImplemented, CATID  *    rgcatidImpl, ULONG cRequired, CATID  *    rgcatidReq);HRESULT ( *EnumImplCategoriesOfClass)(ICatInformation *This,  CLSID * rclsid, IEnumGUID **ppenumCatid);HRESULT ( *EnumReqCategoriesOfClass)(ICatInformation *This,  CLSID * rclsid, IEnumGUID **ppenumCatid);};
struct IOleUILinkInfoWVtbl {HRESULT ( *QueryInterface)(IOleUILinkInfoW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUILinkInfoW *This);ULONG ( *Release)(IOleUILinkInfoW *This);DWORD ( *GetNextLink)(IOleUILinkInfoW *This, DWORD dwLink);HRESULT ( *SetLinkUpdateOptions)(IOleUILinkInfoW *This, DWORD dwLink, DWORD dwUpdateOpt);HRESULT ( *GetLinkUpdateOptions)(IOleUILinkInfoW *This, DWORD dwLink, DWORD *lpdwUpdateOpt);HRESULT ( *SetLinkSource)(IOleUILinkInfoW *This, DWORD dwLink, LPWSTR lpszDisplayName, ULONG lenFileName, ULONG *pchEaten, BOOL fValidateSource);HRESULT ( *GetLinkSource)(IOleUILinkInfoW *This, DWORD dwLink, LPWSTR *lplpszDisplayName, ULONG *lplenFileName, LPWSTR *lplpszFullLinkType, LPWSTR *lplpszShortLinkType, BOOL *lpfSourceAvailable, BOOL *lpfIsSelected);HRESULT ( *OpenLinkSource)(IOleUILinkInfoW *This, DWORD dwLink);HRESULT ( *UpdateLink)(IOleUILinkInfoW *This, DWORD dwLink, BOOL fErrorMessage, BOOL fReserved);HRESULT ( *CancelLink)(IOleUILinkInfoW *This, DWORD dwLink);HRESULT ( *GetLastUpdate)(IOleUILinkInfoW *This, DWORD dwLink, FILETIME *lpLastUpdate);};
struct IPersistMessageVtbl {HRESULT ( *QueryInterface)(IPersistMessage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPersistMessage *This);ULONG ( *Release)(IPersistMessage *This);HRESULT ( *GetLastError)(IPersistMessage *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetClassID)(IPersistMessage *This, LPCLSID lpClassID);HRESULT ( *IsDirty)(IPersistMessage *This);HRESULT ( *InitNew)(IPersistMessage *This, LPMAPIMESSAGESITE pMessageSite, LPMESSAGE pMessage);HRESULT ( *Load)(IPersistMessage *This, LPMAPIMESSAGESITE pMessageSite, LPMESSAGE pMessage, ULONG ulMessageStatus, ULONG ulMessageFlags);HRESULT ( *Save)(IPersistMessage *This, LPMESSAGE pMessage, ULONG fSameAsLoad);HRESULT ( *SaveCompleted)(IPersistMessage *This, LPMESSAGE pMessage);HRESULT ( *HandsOffMessage)(IPersistMessage *This);};
struct IClassFactory2Vtbl {HRESULT ( *QueryInterface)(IClassFactory2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassFactory2 *This);ULONG ( *Release)(IClassFactory2 *This);HRESULT ( *CreateInstance)(IClassFactory2 *This, IUnknown *pUnkOuter,  IID * riid, void **ppvObject);HRESULT ( *LockServer)(IClassFactory2 *This, BOOL fLock);HRESULT ( *GetLicInfo)(IClassFactory2 *This, LICINFO *pLicInfo);HRESULT ( *RequestLicKey)(IClassFactory2 *This, DWORD dwReserved, BSTR *pBstrKey);HRESULT ( *CreateInstanceLic)(IClassFactory2 *This, IUnknown *pUnkOuter, IUnknown *pUnkReserved,  IID * riid, BSTR bstrKey, PVOID *ppvObj);};
struct tagOLEUIEDITLINKSW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;LPOLEUILINKCONTAINERW lpOleUILinkContainer;};
struct IExtractIconWVtbl {HRESULT ( *QueryInterface)(IExtractIconW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IExtractIconW *This);ULONG ( *Release)(IExtractIconW *This);HRESULT ( *GetIconLocation)(IExtractIconW *This, UINT uFlags, LPWSTR szIconFile, UINT cchMax, int *piIndex, UINT *pwFlags);HRESULT ( *Extract)(IExtractIconW *This, LPCWSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);};
struct IFilterGraph2Vtbl {HRESULT ( *QueryInterface)(IFilterGraph2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterGraph2 *This);ULONG ( *Release)(IFilterGraph2 *This);HRESULT ( *AddFilter)(IFilterGraph2 *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IFilterGraph2 *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IFilterGraph2 *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IFilterGraph2 *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IFilterGraph2 *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IFilterGraph2 *This, IPin *ppin);HRESULT ( *Disconnect)(IFilterGraph2 *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IFilterGraph2 *This);HRESULT ( *Connect)(IFilterGraph2 *This, IPin *ppinOut, IPin *ppinIn);HRESULT ( *Render)(IFilterGraph2 *This, IPin *ppinOut);HRESULT ( *RenderFile)(IFilterGraph2 *This, LPCWSTR lpcwstrFile, LPCWSTR lpcwstrPlayList);HRESULT ( *AddSourceFilter)(IFilterGraph2 *This, LPCWSTR lpcwstrFileName, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *SetLogFile)(IFilterGraph2 *This, HANDLE hFile);HRESULT ( *Abort)(IFilterGraph2 *This);HRESULT ( *ShouldOperationContinue)(IFilterGraph2 *This);HRESULT ( *AddSourceFilterForMoniker)(IFilterGraph2 *This, IMoniker *pMoniker, IBindCtx *pCtx, LPCWSTR lpcwstrFilterName, IBaseFilter **ppFilter);HRESULT ( *ReconnectEx)(IFilterGraph2 *This, IPin *ppin,  AM_MEDIA_TYPE *pmt);HRESULT ( *RenderEx)(IFilterGraph2 *This, IPin *pPinOut, DWORD dwFlags, LPVOID pvContext);};
struct IFileViewerWVtbl {HRESULT ( *QueryInterface)(IFileViewerW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFileViewerW *This);ULONG ( *Release)(IFileViewerW *This);HRESULT ( *ShowInitialize)(IFileViewerW *This, LPFILEVIEWERSITE lpfsi);HRESULT ( *Show)(IFileViewerW *This, LPFVSHOWINFO pvsi);HRESULT ( *PrintTo)(IFileViewerW *This, LPWSTR pszDriver, BOOL fSuppressUI);};
typedef HRESULT ( *LPOPENTNEFSTREAM)(LPVOID lpvSupport, LPSTREAM lpStream, LPTSTR lpszStreamName, ULONG ulFlags, LPMESSAGE lpMessage, WORD wKeyVal, LPITNEF *lppTNEF);
struct SIP_SUBJECTINFO_ {DWORD cbSize;GUID *pgSubjectType;HANDLE hFile;LPCWSTR pwsFileName;LPCWSTR pwsDisplayName;DWORD dwReserved1;DWORD dwIntVersion;HCRYPTPROV hProv;CRYPT_ALGORITHM_IDENTIFIER DigestAlgorithm;DWORD dwFlags;DWORD dwEncodingType;DWORD dwReserved2;DWORD fdwCAPISettings;DWORD fdwSecuritySettings;DWORD dwIndex;DWORD dwUnionChoice;SIP_SUBJECTINFO____02ECAB1B75FB78019062BA5F11C342E3 __anonymous0;LPVOID pClientData;};
struct IChannelMgrVtbl {HRESULT ( *QueryInterface)(IChannelMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IChannelMgr *This);ULONG ( *Release)(IChannelMgr *This);HRESULT ( *AddChannelShortcut)(IChannelMgr *This, CHANNELSHORTCUTINFO *pChannelInfo);HRESULT ( *DeleteChannelShortcut)(IChannelMgr *This, LPWSTR pszTitle);HRESULT ( *AddCategory)(IChannelMgr *This, CHANNELCATEGORYINFO *pCategoryInfo);HRESULT ( *DeleteCategory)(IChannelMgr *This, LPWSTR pszTitle);HRESULT ( *EnumChannels)(IChannelMgr *This, DWORD dwEnumFlags, LPCWSTR pszURL, IEnumChannels **pIEnumChannels);};
struct IXPProviderVtbl {HRESULT ( *QueryInterface)(IXPProvider *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IXPProvider *This);ULONG ( *Release)(IXPProvider *This);HRESULT ( *Shutdown)(IXPProvider *This, ULONG *lpulFlags);HRESULT ( *TransportLogon)(IXPProvider *This, LPMAPISUP lpMAPISup, ULONG ulUIParam, LPTSTR lpszProfileName, ULONG *lpulFlags, LPMAPIERROR *lppMAPIError, LPXPLOGON *lppXPLogon);};
struct tagFINDREPLACEW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPWSTR lpstrFindWhat;LPWSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
typedef HRESULT ABPROVIDERINIT(HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG *lpulProviderVer, LPABPROVIDER *lppABProvider);
struct ICopyHookWVtbl {HRESULT ( *QueryInterface)(ICopyHookW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ICopyHookW *This);ULONG ( *Release)(ICopyHookW *This);UINT ( *CopyCallback)(ICopyHookW *This, HWND hwnd, UINT wFunc, UINT wFlags, LPCWSTR pszSrcFile, DWORD dwSrcAttribs, LPCWSTR pszDestFile, DWORD dwDestAttribs);};
struct IProfAdminVtbl {HRESULT ( *QueryInterface)(IProfAdmin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IProfAdmin *This);ULONG ( *Release)(IProfAdmin *This);HRESULT ( *GetLastError)(IProfAdmin *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetProfileTable)(IProfAdmin *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *CreateProfile)(IProfAdmin *This, LPTSTR lpszProfileName, LPTSTR lpszPassword, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *DeleteProfile)(IProfAdmin *This, LPTSTR lpszProfileName, ULONG ulFlags);HRESULT ( *ChangeProfilePassword)(IProfAdmin *This, LPTSTR lpszProfileName, LPTSTR lpszOldPassword, LPTSTR lpszNewPassword, ULONG ulFlags);HRESULT ( *CopyProfile)(IProfAdmin *This, LPTSTR lpszOldProfileName, LPTSTR lpszOldPassword, LPTSTR lpszNewProfileName, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *RenameProfile)(IProfAdmin *This, LPTSTR lpszOldProfileName, LPTSTR lpszOldPassword, LPTSTR lpszNewProfileName, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *SetDefaultProfile)(IProfAdmin *This, LPTSTR lpszProfileName, ULONG ulFlags);HRESULT ( *AdminServices)(IProfAdmin *This, LPTSTR lpszProfileName, LPTSTR lpszPassword, ULONG ulUIParam, ULONG ulFlags, LPSERVICEADMIN *lppServiceAdmin);};
typedef HRESULT MSPROVIDERINIT(HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG *lpulProviderVer, LPMSPROVIDER *lppMSProvider);
typedef HRESULT XPPROVIDERINIT(HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG *lpulProviderVer, LPXPPROVIDER *lppXPProvider);
struct tagOLEUIBUSYW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;HTASK hTask;HWND *lphWndDialog;};
struct _D3DTLVERTEX {_D3DTLVERTEX___0F2CDCA047003D8EC75118693930E691 __anonymous0;_D3DTLVERTEX___6CA934479C1F92723C45B62B9DC7F703 __anonymous1;_D3DTLVERTEX___BDFC1E337EC7BF58E4386644A37C7111 __anonymous2;_D3DTLVERTEX___ED3D3C9797719C595EAD57A73B2054F3 __anonymous3;_D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 __anonymous4;_D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 __anonymous6;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous8;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous11;};
struct _D3DLVERTEX {_D3DLVERTEX___681612F8DC6DDCA79CBEF9228C3A67A0 __anonymous0;_D3DLVERTEX___2970DA2ECFB38188FCB670891BDDBDFA __anonymous3;_D3DLVERTEX___3781A3F6A2280FF9BE972B852E87FD21 __anonymous6;DWORD dwReserved;_D3DLVERTEX___34D6BCDD47B44126D7A203197E7A8282 __anonymous9;_D3DLVERTEX___30594A6BB70EFF251680D22A869004B0 __anonymous11;_D3DLVERTEX___F5EA273054A07BEACA92D8100BBF37A6 __anonymous13;_D3DLVERTEX___7013070F7992C3CB148910863AB1E659 __anonymous16;};
struct tagFUNCDESC {MEMBERID memid;SCODE *lprgscode;ELEMDESC *lprgelemdescParam;FUNCKIND funckind;INVOKEKIND invkind;CALLCONV callconv;SHORT cParams;SHORT cParamsOpt;SHORT oVft;SHORT cScodes;ELEMDESC elemdescFunc;WORD wFuncFlags;};
struct _MMIOINFO {DWORD dwFlags;FOURCC fccIOProc;LPMMIOPROC pIOProc;UINT wErrorRet;HTASK htask;LONG cchBuffer;HPSTR pchBuffer;HPSTR pchNext;HPSTR pchEndRead;HPSTR pchEndWrite;LONG lBufOffset;LONG lDiskOffset;DWORD adwInfo[3];DWORD dwReserved1;DWORD dwReserved2;HMMIO hmmio;};
struct IPinVtbl {HRESULT ( *QueryInterface)(IPin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPin *This);ULONG ( *Release)(IPin *This);HRESULT ( *Connect)(IPin *This, IPin *pReceivePin,  AM_MEDIA_TYPE *pmt);HRESULT ( *ReceiveConnection)(IPin *This, IPin *pConnector,  AM_MEDIA_TYPE *pmt);HRESULT ( *Disconnect)(IPin *This);HRESULT ( *ConnectedTo)(IPin *This, IPin **pPin);HRESULT ( *ConnectionMediaType)(IPin *This, AM_MEDIA_TYPE *pmt);HRESULT ( *QueryPinInfo)(IPin *This, PIN_INFO *pInfo);HRESULT ( *QueryDirection)(IPin *This, PIN_DIRECTION *pPinDir);HRESULT ( *QueryId)(IPin *This, LPWSTR *Id);HRESULT ( *QueryAccept)(IPin *This,  AM_MEDIA_TYPE *pmt);HRESULT ( *EnumMediaTypes)(IPin *This, IEnumMediaTypes **ppEnum);HRESULT ( *QueryInternalConnections)(IPin *This, IPin **apPin, ULONG *nPin);HRESULT ( *EndOfStream)(IPin *This);HRESULT ( *BeginFlush)(IPin *This);HRESULT ( *EndFlush)(IPin *This);HRESULT ( *NewSegment)(IPin *This, REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate);};
struct tagOFNW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpstrFilter;LPWSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPWSTR lpstrFile;DWORD nMaxFile;LPWSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCWSTR lpstrInitialDir;LPCWSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCWSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct _BE2AAA237DCCFCC05A1ABA31135D92CC {UINT cbLength;HWND hwnd;LPTSTR szCaption;LPTSTR szLabel;LPTSTR szHelpFile;ULONG ulHelpID;HINSTANCE hinst;UINT uiDlgID;LPEECFHOOKPROC lpeecfhp;DWORD dwHookData;ULONG ulFlags;LPMDB pmdb;LPMAPIFOLDER pfld;LPTSTR szName;DWORD dwReserved1;DWORD dwReserved2;DWORD dwReserved3;};
struct IInternetProtocolInfoVtbl {HRESULT ( *QueryInterface)(IInternetProtocolInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetProtocolInfo *This);ULONG ( *Release)(IInternetProtocolInfo *This);HRESULT ( *ParseUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CombineUrl)(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT ( *CompareUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);HRESULT ( *QueryInfo)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);};
struct IBindStatusCallbackVtbl {HRESULT ( *QueryInterface)(IBindStatusCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindStatusCallback *This);ULONG ( *Release)(IBindStatusCallback *This);HRESULT ( *OnStartBinding)(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib);HRESULT ( *GetPriority)(IBindStatusCallback *This, LONG *pnPriority);HRESULT ( *OnLowResource)(IBindStatusCallback *This, DWORD reserved);HRESULT ( *OnProgress)(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT ( *OnStopBinding)(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError);HRESULT ( *GetBindInfo)(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *OnDataAvailable)(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT ( *OnObjectAvailable)(IBindStatusCallback *This,  IID * riid, IUnknown *punk);};
struct IDirectorySearchVtbl {HRESULT ( *QueryInterface)(IDirectorySearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectorySearch *This);ULONG ( *Release)(IDirectorySearch *This);HRESULT ( *SetSearchPreference)(IDirectorySearch *This, PADS_SEARCHPREF_INFO pSearchPrefs, DWORD dwNumPrefs);HRESULT ( *ExecuteSearch)(IDirectorySearch *This, LPWSTR pszSearchFilter, LPWSTR *pAttributeNames, DWORD dwNumberAttributes, PADS_SEARCH_HANDLE phSearchResult);HRESULT ( *AbandonSearch)(IDirectorySearch *This, ADS_SEARCH_HANDLE phSearchResult);HRESULT ( *GetFirstRow)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetNextRow)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetPreviousRow)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetNextColumnName)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchHandle, LPWSTR *ppszColumnName);HRESULT ( *GetColumn)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchResult, LPWSTR szColumnName, PADS_SEARCH_COLUMN pSearchColumn);HRESULT ( *FreeColumn)(IDirectorySearch *This, PADS_SEARCH_COLUMN pSearchColumn);HRESULT ( *CloseSearchHandle)(IDirectorySearch *This, ADS_SEARCH_HANDLE hSearchResult);};
struct IExchangeRuleExtVtbl {HRESULT ( *QueryInterface)(IExchangeRuleExt *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchangeRuleExt *This);ULONG ( *Release)(IExchangeRuleExt *This);HRESULT ( *Install)(IExchangeRuleExt *This, LPEXCHANGERULEEXTCALLBACK percb, ULONG ulContext);HRESULT ( *QueryRelease)(IExchangeRuleExt *This);HRESULT ( *GetCommand)(IExchangeRuleExt *This, LPEXCHANGERULEEXTCALLBACK percb, TCHAR *pszCommand, ULONG cchCommand, TCHAR *pszDisplayName, ULONG cchDisplayName);HRESULT ( *QueryCommandDisplayName)(IExchangeRuleExt *This, LPEXCHANGERULEEXTCALLBACK percb, LPCTSTR pszCommand, TCHAR *pszDisplayName, ULONG cchDisplayName);HRESULT ( *Command)(IExchangeRuleExt *This, LPEXCHANGERULEEXTCALLBACK percb, LPCTSTR pszCommand, ULONG cb, LPENTRYID peid);};
struct ISubscriptionMgrVtbl {HRESULT ( *QueryInterface)(ISubscriptionMgr *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISubscriptionMgr *This);ULONG ( *Release)(ISubscriptionMgr *This);HRESULT ( *DeleteSubscription)(ISubscriptionMgr *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *UpdateSubscription)(ISubscriptionMgr *This, LPCWSTR pwszURL);HRESULT ( *UpdateAll)(ISubscriptionMgr *This);HRESULT ( *IsSubscribed)(ISubscriptionMgr *This, LPCWSTR pwszURL, BOOL *pfSubscribed);HRESULT ( *GetSubscriptionInfo)(ISubscriptionMgr *This, LPCWSTR pwszURL, SUBSCRIPTIONINFO *pInfo);HRESULT ( *GetDefaultInfo)(ISubscriptionMgr *This, SUBSCRIPTIONTYPE subType, SUBSCRIPTIONINFO *pInfo);HRESULT ( *ShowSubscriptionProperties)(ISubscriptionMgr *This, LPCWSTR pwszURL, HWND hwnd);HRESULT ( *CreateSubscription)(ISubscriptionMgr *This, HWND hwnd, LPCWSTR pwszURL, LPCWSTR pwszFriendlyName, DWORD dwFlags, SUBSCRIPTIONTYPE subsType, SUBSCRIPTIONINFO *pInfo);};
typedef HRESULT ( *LPOPENTNEFSTREAMEX)(LPVOID lpvSupport, LPSTREAM lpStream, LPTSTR lpszStreamName, ULONG ulFlags, LPMESSAGE lpMessage, WORD wKeyVal, LPADRBOOK lpAdressBook, LPITNEF *lppTNEF);
struct _SHELLEXECUTEINFOW {DWORD cbSize;ULONG fMask;HWND hwnd;LPCWSTR lpVerb;LPCWSTR lpFile;LPCWSTR lpParameters;LPCWSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCWSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;_SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 __anonymous0;HANDLE hProcess;};
struct tACMFILTERCHOOSEW {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFILTER pwfltr;DWORD cbwfltr;LPCWSTR pszTitle;WCHAR szFilterTag[48];WCHAR szFilter[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFILTER pwfltrEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFILTERCHOOSEHOOKPROCW pfnHook;};
struct tACMFORMATCHOOSEW {DWORD cbStruct;DWORD fdwStyle;HWND hwndOwner;LPWAVEFORMATEX pwfx;DWORD cbwfx;LPCWSTR pszTitle;WCHAR szFormatTag[48];WCHAR szFormat[128];LPWSTR pszName;DWORD cchName;DWORD fdwEnum;LPWAVEFORMATEX pwfxEnum;HINSTANCE hInstance;LPCWSTR pszTemplateName;LPARAM lCustData;ACMFORMATCHOOSEHOOKPROCW pfnHook;};
struct IABProviderVtbl {HRESULT ( *QueryInterface)(IABProvider *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IABProvider *This);ULONG ( *Release)(IABProvider *This);HRESULT ( *Shutdown)(IABProvider *This, ULONG *lpulFlags);HRESULT ( *Logon)(IABProvider *This, LPMAPISUP lpMAPISup, ULONG ulUIParam, LPTSTR lpszProfileName, ULONG ulFlags, ULONG *lpulpcbSecurity, LPBYTE *lppbSecurity, LPMAPIERROR *lppMAPIError, LPABLOGON *lppABLogon);};
struct IDvdControlVtbl {HRESULT ( *QueryInterface)(IDvdControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdControl *This);ULONG ( *Release)(IDvdControl *This);HRESULT ( *TitlePlay)(IDvdControl *This, ULONG uiTitle);HRESULT ( *ChapterPlay)(IDvdControl *This, ULONG uiTitle, ULONG uiChapter);HRESULT ( *TimePlay)(IDvdControl *This, ULONG uiTitle, ULONG bcdTime);HRESULT ( *StopForResume)(IDvdControl *This);HRESULT ( *GoUp)(IDvdControl *This);HRESULT ( *TimeSearch)(IDvdControl *This, ULONG bcdTime);HRESULT ( *ChapterSearch)(IDvdControl *This, ULONG Chapter);HRESULT ( *PrevPGSearch)(IDvdControl *This);HRESULT ( *TopPGSearch)(IDvdControl *This);HRESULT ( *NextPGSearch)(IDvdControl *This);HRESULT ( *ForwardScan)(IDvdControl *This, double dwSpeed);HRESULT ( *BackwardScan)(IDvdControl *This, double dwSpeed);HRESULT ( *MenuCall)(IDvdControl *This, DVD_MENU_ID MenuID);HRESULT ( *Resume)(IDvdControl *This);HRESULT ( *UpperButtonSelect)(IDvdControl *This);HRESULT ( *LowerButtonSelect)(IDvdControl *This);HRESULT ( *LeftButtonSelect)(IDvdControl *This);HRESULT ( *RightButtonSelect)(IDvdControl *This);HRESULT ( *ButtonActivate)(IDvdControl *This);HRESULT ( *ButtonSelectAndActivate)(IDvdControl *This, ULONG uiButton);HRESULT ( *StillOff)(IDvdControl *This);HRESULT ( *PauseOn)(IDvdControl *This);HRESULT ( *PauseOff)(IDvdControl *This);HRESULT ( *MenuLanguageSelect)(IDvdControl *This, LCID Language);HRESULT ( *AudioStreamChange)(IDvdControl *This, ULONG nAudio);HRESULT ( *SubpictureStreamChange)(IDvdControl *This, ULONG nSubPicture, BOOL bDisplay);HRESULT ( *AngleChange)(IDvdControl *This, ULONG ulAngle);HRESULT ( *ParentalLevelSelect)(IDvdControl *This, ULONG ulParentalLevel);HRESULT ( *ParentalCountrySelect)(IDvdControl *This, WORD wCountry);HRESULT ( *KaraokeAudioPresentationModeChange)(IDvdControl *This, ULONG ulMode);HRESULT ( *VideoModePreferrence)(IDvdControl *This, ULONG ulPreferredDisplayMode);HRESULT ( *SetRoot)(IDvdControl *This, LPCWSTR pszPath);HRESULT ( *MouseActivate)(IDvdControl *This, POINT point);HRESULT ( *MouseSelect)(IDvdControl *This, POINT point);HRESULT ( *ChapterPlayAutoStop)(IDvdControl *This, ULONG ulTitle, ULONG ulChapter, ULONG ulChaptersToPlay);};
struct _PROPSHEETPAGEW {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;_PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED __anonymous0;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous1;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;LPCWSTR pszHeaderTitle;LPCWSTR pszHeaderSubTitle;};
typedef HRESULT HPPROVIDERINIT(LPMAPISESSION lpSession, HINSTANCE hInstance, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, LPMAPIUID lpSectionUID, ULONG ulFlags, LPSPOOLERHOOK *lppSpoolerHook);
struct IDSSearchVtbl {HRESULT ( *QueryInterface)(IDSSearch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDSSearch *This);ULONG ( *Release)(IDSSearch *This);HRESULT ( *SetSearchPreference)(IDSSearch *This, PADS_SEARCHPREF_INFO pSearchPrefs, DWORD dwNumPrefs);HRESULT ( *ExecuteSearch)(IDSSearch *This, LPWSTR pszSearchFilter, LPWSTR *pAttributeNames, DWORD dwNumberAttributes, PADS_SEARCH_HANDLE phSearchResult);HRESULT ( *AbandonSearch)(IDSSearch *This, ADS_SEARCH_HANDLE phSearchResult);HRESULT ( *GetFirstRow)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetNextRow)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetPreviousRow)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchResult);HRESULT ( *GetNextColumnName)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchHandle, LPWSTR *ppszColumnName);HRESULT ( *GetColumn)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchResult, LPWSTR szColumnName, PADS_SEARCH_COLUMN pSearchColumn);HRESULT ( *FreeColumn)(IDSSearch *This, PADS_SEARCH_COLUMN pSearchColumn);HRESULT ( *CloseSearchHandle)(IDSSearch *This, ADS_SEARCH_HANDLE hSearchResult);};
struct IMSLogonVtbl {HRESULT ( *QueryInterface)(IMSLogon *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMSLogon *This);ULONG ( *Release)(IMSLogon *This);HRESULT ( *GetLastError)(IMSLogon *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Logoff)(IMSLogon *This, ULONG *lpulFlags);HRESULT ( *OpenEntry)(IMSLogon *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *CompareEntryIDs)(IMSLogon *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *Advise)(IMSLogon *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMSLogon *This, ULONG ulConnection);HRESULT ( *OpenStatusEntry)(IMSLogon *This, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPVOID *lppEntry);};
struct IStorageVtbl {HRESULT ( *QueryInterface)(IStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStorage *This);ULONG ( *Release)(IStorage *This);HRESULT ( *CreateStream)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);HRESULT ( *OpenStream)(IStorage *This,  OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);HRESULT ( *CreateStorage)(IStorage *This,  OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage **ppstg);HRESULT ( *OpenStorage)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);HRESULT ( *CopyTo)(IStorage *This, DWORD ciidExclude,  IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);HRESULT ( *MoveElementTo)(IStorage *This,  OLECHAR *pwcsName, IStorage *pstgDest,  OLECHAR *pwcsNewName, DWORD grfFlags);HRESULT ( *Commit)(IStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IStorage *This);HRESULT ( *EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);HRESULT ( *DestroyElement)(IStorage *This,  OLECHAR *pwcsName);HRESULT ( *RenameElement)(IStorage *This,  OLECHAR *pwcsOldName,  OLECHAR *pwcsNewName);HRESULT ( *SetElementTimes)(IStorage *This,  OLECHAR *pwcsName,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IStorage *This,  CLSID * clsid);HRESULT ( *SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);HRESULT ( *Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct IAMovieVtbl {HRESULT ( *QueryInterface)(IAMovie *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMovie *This);ULONG ( *Release)(IAMovie *This);HRESULT ( *AddFilter)(IAMovie *This, IBaseFilter *pFilter, LPCWSTR pName);HRESULT ( *RemoveFilter)(IAMovie *This, IBaseFilter *pFilter);HRESULT ( *EnumFilters)(IAMovie *This, IEnumFilters **ppEnum);HRESULT ( *FindFilterByName)(IAMovie *This, LPCWSTR pName, IBaseFilter **ppFilter);HRESULT ( *ConnectDirect)(IAMovie *This, IPin *ppinOut, IPin *ppinIn,  AM_MEDIA_TYPE *pmt);HRESULT ( *Reconnect)(IAMovie *This, IPin *ppin);HRESULT ( *Disconnect)(IAMovie *This, IPin *ppin);HRESULT ( *SetDefaultSyncSource)(IAMovie *This);HRESULT ( *Connect)(IAMovie *This, IPin *ppinOut, IPin *ppinIn);HRESULT ( *Render)(IAMovie *This, IPin *ppinOut);HRESULT ( *Run)(IAMovie *This);HRESULT ( *Pause)(IAMovie *This);HRESULT ( *Stop)(IAMovie *This);HRESULT ( *GetState)(IAMovie *This, LONG msTimeout, FILTER_STATE *pfs);HRESULT ( *RenderFile)(IAMovie *This, LPCWSTR strFilename);HRESULT ( *AddSourceFilter)(IAMovie *This, LPCWSTR strFilename, IBaseFilter **ppUnk);HRESULT ( *GetEventHandle)(IAMovie *This, HEVENT *hEvent);HRESULT ( *GetEvent)(IAMovie *This, int *lEventCode, int *lParam1, int *lParam2, int msTimeout);HRESULT ( *WaitForCompletion)(IAMovie *This, int msTimeout, int *pEvCode);HRESULT ( *CancelDefaultHandling)(IAMovie *This, int lEvCode);HRESULT ( *RestoreDefaultHandling)(IAMovie *This, int lEvCode);HRESULT ( *get_Duration)(IAMovie *This, REFTIME *plength);HRESULT ( *put_CurrentPosition)(IAMovie *This, REFTIME llTime);HRESULT ( *get_CurrentPosition)(IAMovie *This, REFTIME *pllTime);HRESULT ( *get_StopTime)(IAMovie *This, REFTIME *pllTime);HRESULT ( *put_StopTime)(IAMovie *This, REFTIME llTime);HRESULT ( *get_PrerollTime)(IAMovie *This, REFTIME *pllTime);HRESULT ( *put_PrerollTime)(IAMovie *This, REFTIME llTime);HRESULT ( *put_Rate)(IAMovie *This, double dRate);HRESULT ( *get_Rate)(IAMovie *This, double *pdRate);HRESULT ( *RemoveAllFilters)(IAMovie *This);HRESULT ( *Play)(IAMovie *This);HRESULT ( *PlayFile)(IAMovie *This, LPCWSTR strFilename);HRESULT ( *EnumFiltersByInterface)(IAMovie *This,  IID * riid, IEnumFilters **ppEnum);HRESULT ( *EnumPins)(IAMovie *This, IEnumPins **ppEnum);HRESULT ( *EnumPinsIn)(IAMovie *This, IEnumPins **ppEnum);HRESULT ( *EnumPinsOut)(IAMovie *This, IEnumPins **ppEnum);HRESULT ( *RenderAll)(IAMovie *This);HRESULT ( *RenderNewFile)(IAMovie *This, LPCWSTR strFilename);HRESULT ( *FreeEventParams)(IAMovie *This, int lEvCode, int lParam1, int lParam2);};
struct _WINDBG_OLDKD_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;PWINDBG_GET_SYMBOL lpGetSymbolRoutine;PWINDBG_DISASM lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE lpReadVirtualMemRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE lpWriteVirtualMemRoutine;PWINDBG_OLDKD_READ_PHYSICAL_MEMORY lpReadPhysicalMemRoutine;PWINDBG_OLDKD_WRITE_PHYSICAL_MEMORY lpWritePhysicalMemRoutine;};
struct IInternetZoneManagerVtbl {HRESULT ( *QueryInterface)(IInternetZoneManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetZoneManager *This);ULONG ( *Release)(IInternetZoneManager *This);HRESULT ( *GetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *SetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT ( *GetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone,  GUID * guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *GetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *SetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT ( *PromptAction)(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);HRESULT ( *LogAction)(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);HRESULT ( *CreateZoneEnumerator)(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);HRESULT ( *GetZoneAt)(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);HRESULT ( *DestroyZoneEnumerator)(IInternetZoneManager *This, DWORD dwEnum);HRESULT ( *CopyTemplatePoliciesToZone)(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);};
struct IPerPropertyBrowsingVtbl {HRESULT ( *QueryInterface)(IPerPropertyBrowsing *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPerPropertyBrowsing *This);ULONG ( *Release)(IPerPropertyBrowsing *This);HRESULT ( *GetDisplayString)(IPerPropertyBrowsing *This, DISPID dispID, BSTR *pBstr);HRESULT ( *MapPropertyToPage)(IPerPropertyBrowsing *This, DISPID dispID, CLSID *pClsid);HRESULT ( *GetPredefinedStrings)(IPerPropertyBrowsing *This, DISPID dispID, CALPOLESTR *pCaStringsOut, CADWORD *pCaCookiesOut);HRESULT ( *GetPredefinedValue)(IPerPropertyBrowsing *This, DISPID dispID, DWORD dwCookie, VARIANT *pVarOut);};
struct OLEDBSimpleProviderVtbl {HRESULT ( *QueryInterface)(OLEDBSimpleProvider *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(OLEDBSimpleProvider *This);ULONG ( *Release)(OLEDBSimpleProvider *This);HRESULT ( *getRowCount)(OLEDBSimpleProvider *This, int *pcRows);HRESULT ( *getColumnCount)(OLEDBSimpleProvider *This, int *pcColumns);HRESULT ( *getRWStatus)(OLEDBSimpleProvider *This, int iRow, int iColumn, OSPRW *prwStatus);HRESULT ( *getVariant)(OLEDBSimpleProvider *This, int iRow, int iColumn, OSPFORMAT format, VARIANT *pVar);HRESULT ( *setVariant)(OLEDBSimpleProvider *This, int iRow, int iColumn, OSPFORMAT format, VARIANT Var);HRESULT ( *getLocale)(OLEDBSimpleProvider *This, BSTR *pbstrLocale);HRESULT ( *deleteRows)(OLEDBSimpleProvider *This, int iRow, int cRows, int *pcRowsDeleted);HRESULT ( *insertRows)(OLEDBSimpleProvider *This, int iRow, int cRows, int *pcRowsInserted);HRESULT ( *find)(OLEDBSimpleProvider *This, int iRowStart, int iColumn, VARIANT val, OSPFIND findFlags, OSPCOMP compType, int *piRowFound);HRESULT ( *addOLEDBSimpleProviderListener)(OLEDBSimpleProvider *This, OLEDBSimpleProviderListener *pospIListener);HRESULT ( *removeOLEDBSimpleProviderListener)(OLEDBSimpleProvider *This, OLEDBSimpleProviderListener *pospIListener);HRESULT ( *isAsync)(OLEDBSimpleProvider *This, BOOL *pbAsynch);HRESULT ( *getEstimatedRows)(OLEDBSimpleProvider *This, int *piRows);HRESULT ( *stopTransfer)(OLEDBSimpleProvider *This);};
struct tagOLEUICHANGEICONW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;HGLOBAL hMetaPict;CLSID clsid;WCHAR szIconExe[260];int cchIconExe;};
typedef HRESULT  PREPROCESSMESSAGE(LPVOID lpvSession, LPMESSAGE lpMessage, LPADRBOOK lpAdrBook, LPMAPIFOLDER lpFolder, LPALLOCATEBUFFER AllocateBuffer, LPALLOCATEMORE AllocateMore, LPFREEBUFFER FreeBuffer, ULONG *lpcOutbound, LPMESSAGE **lpppMessage, LPADRLIST *lppRecipList);
struct ISoftDistExtVtbl {HRESULT ( *QueryInterface)(ISoftDistExt *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISoftDistExt *This);ULONG ( *Release)(ISoftDistExt *This);HRESULT ( *ProcessSoftDist)(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);HRESULT ( *GetFirstCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *GetNextCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT ( *AsyncInstallDistributionUnit)(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);};
struct IImgCtxVtbl {HRESULT ( *QueryInterface)(IImgCtx *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IImgCtx *This);ULONG ( *Release)(IImgCtx *This);HRESULT ( *Load)(IImgCtx *This, LPCWSTR pszUrl, DWORD dwFlags);HRESULT ( *SelectChanges)(IImgCtx *This, ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal);HRESULT ( *SetCallback)(IImgCtx *This, PFNIMGCTXCALLBACK pfn, void *pvPrivateData);HRESULT ( *Disconnect)(IImgCtx *This);HRESULT ( *GetUpdateRects)(IImgCtx *This, struct tagRECT *prc, struct tagRECT *prcImg, int *pcrc);HRESULT ( *GetStateInfo)(IImgCtx *This, ULONG *pulState, struct tagSIZE *psize, BOOL fClearChanges);HRESULT ( *GetPalette)(IImgCtx *This, HPALETTE *phpal);HRESULT ( *Draw)(IImgCtx *This, HDC hdc, struct tagRECT *prcBounds);HRESULT ( *Tile)(IImgCtx *This, HDC hdc, struct tagPOINT *pptBackOrg, struct tagRECT *prcClip, struct tagSIZE *psize);HRESULT ( *StretchBlt)(IImgCtx *This, HDC hdc, int dstX, int dstY, int dstXE, int dstYE, int srcX, int srcY, int srcXE, int srcYE, DWORD dwROP);};
struct tagPSDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCWSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCWSTR lpPrintTemplateName;LPCWSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct IExchExtAdvancedCriteriaVtbl {HRESULT ( *QueryInterface)(IExchExtAdvancedCriteria *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtAdvancedCriteria *This);ULONG ( *Release)(IExchExtAdvancedCriteria *This);HRESULT ( *InstallAdvancedCriteria)(IExchExtAdvancedCriteria *This, HWND hwnd, LPSRestriction lpres, BOOL fNot, LPENTRYLIST lpeidl, ULONG ulFlags);HRESULT ( *DoDialog)(IExchExtAdvancedCriteria *This);void ( *Clear)(IExchExtAdvancedCriteria *This);void ( *SetFolders)(IExchExtAdvancedCriteria *This, LPENTRYLIST lpeidl, ULONG ulFlags);HRESULT ( *QueryRestriction)(IExchExtAdvancedCriteria *This, LPVOID lpvAllocBase, LPSRestriction *lppres, LPSPropTagArray *lppPropTags, LPMAPINAMEID **lpppPropNames, BOOL *lpfNot, LPTSTR lpszDesc, ULONG cchDesc, ULONG ulFlags);void ( *UninstallAdvancedCriteria)(IExchExtAdvancedCriteria *This);};
struct IAMMultiMediaStreamVtbl {HRESULT ( *QueryInterface)(IAMMultiMediaStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMMultiMediaStream *This);ULONG ( *Release)(IAMMultiMediaStream *This);HRESULT ( *GetInformation)(IAMMultiMediaStream *This, DWORD *pdwFlags, STREAM_TYPE *pStreamType);HRESULT ( *GetMediaStream)(IAMMultiMediaStream *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IAMMultiMediaStream *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *GetState)(IAMMultiMediaStream *This, STREAM_STATE *pCurrentState);HRESULT ( *SetState)(IAMMultiMediaStream *This, STREAM_STATE NewState);HRESULT ( *GetTime)(IAMMultiMediaStream *This, STREAM_TIME *pCurrentTime);HRESULT ( *GetDuration)(IAMMultiMediaStream *This, STREAM_TIME *pDuration);HRESULT ( *Seek)(IAMMultiMediaStream *This, STREAM_TIME SeekTime);HRESULT ( *GetEndOfStreamEventHandle)(IAMMultiMediaStream *This, HANDLE *phEOS);HRESULT ( *Initialize)(IAMMultiMediaStream *This, STREAM_TYPE StreamType, DWORD dwFlags, IGraphBuilder *pFilterGraph);HRESULT ( *GetFilterGraph)(IAMMultiMediaStream *This, IGraphBuilder **ppGraphBuilder);HRESULT ( *GetFilter)(IAMMultiMediaStream *This, IMediaStreamFilter **ppFilter);HRESULT ( *AddMediaStream)(IAMMultiMediaStream *This, IUnknown *pStreamObject,  MSPID *PurposeId, DWORD dwFlags, IMediaStream **ppNewStream);HRESULT ( *OpenFile)(IAMMultiMediaStream *This, LPCWSTR pszFileName, DWORD dwFlags);HRESULT ( *OpenMoniker)(IAMMultiMediaStream *This, IBindCtx *pCtx, IMoniker *pMoniker, DWORD dwFlags);HRESULT ( *Render)(IAMMultiMediaStream *This, DWORD dwFlags);};
struct IScheduledWorkItemVtbl {HRESULT ( *QueryInterface)(IScheduledWorkItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScheduledWorkItem *This);ULONG ( *Release)(IScheduledWorkItem *This);HRESULT ( *CreateTrigger)(IScheduledWorkItem *This, WORD *piNewTrigger, ITaskTrigger **ppTrigger);HRESULT ( *DeleteTrigger)(IScheduledWorkItem *This, WORD iTrigger);HRESULT ( *GetTriggerCount)(IScheduledWorkItem *This, WORD *pwCount);HRESULT ( *GetTrigger)(IScheduledWorkItem *This, WORD iTrigger, ITaskTrigger **ppTrigger);HRESULT ( *GetTriggerString)(IScheduledWorkItem *This, WORD iTrigger, LPWSTR *ppwszTrigger);HRESULT ( *GetRunTimes)(IScheduledWorkItem *This,  LPSYSTEMTIME pstBegin,  LPSYSTEMTIME pstEnd, WORD *pCount, LPSYSTEMTIME *rgstTaskTimes);HRESULT ( *GetNextRunTime)(IScheduledWorkItem *This, SYSTEMTIME *pstNextRun);HRESULT ( *SetIdleWait)(IScheduledWorkItem *This, WORD wIdleMinutes, WORD wDeadlineMinutes);HRESULT ( *GetIdleWait)(IScheduledWorkItem *This, WORD *pwIdleMinutes, WORD *pwDeadlineMinutes);HRESULT ( *Run)(IScheduledWorkItem *This);HRESULT ( *Terminate)(IScheduledWorkItem *This);HRESULT ( *EditWorkItem)(IScheduledWorkItem *This, HWND hParent, DWORD dwReserved);HRESULT ( *GetMostRecentRunTime)(IScheduledWorkItem *This, SYSTEMTIME *pstLastRun);HRESULT ( *GetStatus)(IScheduledWorkItem *This, HRESULT *phrStatus);HRESULT ( *GetExitCode)(IScheduledWorkItem *This, DWORD *pdwExitCode);HRESULT ( *SetComment)(IScheduledWorkItem *This, LPCWSTR pwszComment);HRESULT ( *GetComment)(IScheduledWorkItem *This, LPWSTR *ppwszComment);HRESULT ( *SetCreator)(IScheduledWorkItem *This, LPCWSTR pwszCreator);HRESULT ( *GetCreator)(IScheduledWorkItem *This, LPWSTR *ppwszCreator);HRESULT ( *SetWorkItemData)(IScheduledWorkItem *This, WORD cbData, BYTE  *    rgbData);HRESULT ( *GetWorkItemData)(IScheduledWorkItem *This, WORD *pcbData, BYTE **prgbData);HRESULT ( *SetErrorRetryCount)(IScheduledWorkItem *This, WORD wRetryCount);HRESULT ( *GetErrorRetryCount)(IScheduledWorkItem *This, WORD *pwRetryCount);HRESULT ( *SetErrorRetryInterval)(IScheduledWorkItem *This, WORD wRetryInterval);HRESULT ( *GetErrorRetryInterval)(IScheduledWorkItem *This, WORD *pwRetryInterval);HRESULT ( *SetFlags)(IScheduledWorkItem *This, DWORD dwFlags);HRESULT ( *GetFlags)(IScheduledWorkItem *This, DWORD *pdwFlags);HRESULT ( *SetAccountInformation)(IScheduledWorkItem *This, LPCWSTR pwszAccountName, LPCWSTR pwszPassword);HRESULT ( *GetAccountInformation)(IScheduledWorkItem *This, LPWSTR *ppwszAccountName);};
struct tagOLEUICHANGESOURCEW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;OPENFILENAMEW *lpOFN;DWORD dwReserved1[4];LPOLEUILINKCONTAINERW lpOleUILinkContainer;DWORD dwLink;LPWSTR lpszDisplayName;ULONG nFileLength;LPWSTR lpszFrom;LPWSTR lpszTo;};
struct IExchExtCommandsVtbl {HRESULT ( *QueryInterface)(IExchExtCommands *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtCommands *This);ULONG ( *Release)(IExchExtCommands *This);HRESULT ( *InstallCommands)(IExchExtCommands *This, LPEXCHEXTCALLBACK lpeecb, HWND hwnd, HMENU hmenu, UINT *lpcmdidBase, LPTBENTRY lptbeArray, UINT ctbe, ULONG ulFlags);void ( *InitMenu)(IExchExtCommands *This, LPEXCHEXTCALLBACK lpeecb);HRESULT ( *DoCommand)(IExchExtCommands *This, LPEXCHEXTCALLBACK lpeecb, UINT cmdid);HRESULT ( *Help)(IExchExtCommands *This, LPEXCHEXTCALLBACK lpeecb, UINT cmdid);HRESULT ( *QueryHelpText)(IExchExtCommands *This, UINT cmdid, ULONG ulFlags, LPTSTR lpsz, UINT cch);HRESULT ( *QueryButtonInfo)(IExchExtCommands *This, ULONG tbid, UINT itbb, LPTBBUTTON ptbb, LPTSTR lpsz, UINT cch, ULONG ulFlags);HRESULT ( *ResetToolbar)(IExchExtCommands *This, ULONG tbid, ULONG ulFlags);};
struct IFilterMapper2Vtbl {HRESULT ( *QueryInterface)(IFilterMapper2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFilterMapper2 *This);ULONG ( *Release)(IFilterMapper2 *This);HRESULT ( *CreateCategory)(IFilterMapper2 *This,  CLSID * clsidCategory, DWORD dwCategoryMerit, LPCWSTR Description);HRESULT ( *UnregisterFilter)(IFilterMapper2 *This,  CLSID *pclsidCategory,  OLECHAR *szInstance,  CLSID * Filter);HRESULT ( *RegisterFilter)(IFilterMapper2 *This,  CLSID * clsidFilter, LPCWSTR Name, IMoniker **ppMoniker,  CLSID *pclsidCategory,  OLECHAR *szInstance,  REGFILTER2 *prf2);HRESULT ( *EnumMatchingFilters)(IFilterMapper2 *This, IEnumMoniker **ppEnum, DWORD dwFlags, BOOL bExactMatch, DWORD dwMerit, BOOL bInputNeeded, DWORD cInputTypes,  GUID *pInputTypes,  REGPINMEDIUM *pMedIn,  CLSID *pPinCategoryIn, BOOL bRender, BOOL bOutputNeeded, DWORD cOutputTypes,  GUID *pOutputTypes,  REGPINMEDIUM *pMedOut,  CLSID *pPinCategoryOut);};
struct IMprUIPluginVtbl {HRESULT ( *QueryInterface)(IMprUIPlugin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMprUIPlugin *This);ULONG ( *Release)(IMprUIPlugin *This);HRESULT ( *ConnectToRouter)(IMprUIPlugin *This, LPCTSTR pRouterName, IMprUIHost *pMprUIHost);HRESULT ( *GetTitle)(IMprUIPlugin *This, PWSTR *ppszTitle);HRESULT ( *GetContextMenu)(IMprUIPlugin *This, HMENU *phMenu);HRESULT ( *ProcessCommand)(IMprUIPlugin *This, WPARAM wParam, LPARAM lParam, HWND hWndParent);HRESULT ( *GetCLSID)(IMprUIPlugin *This, CLSID **ppClsid);};
struct IBaseFilterVtbl {HRESULT ( *QueryInterface)(IBaseFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBaseFilter *This);ULONG ( *Release)(IBaseFilter *This);HRESULT ( *GetClassID)(IBaseFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IBaseFilter *This);HRESULT ( *Pause)(IBaseFilter *This);HRESULT ( *Run)(IBaseFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IBaseFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IBaseFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IBaseFilter *This, IReferenceClock **pClock);HRESULT ( *EnumPins)(IBaseFilter *This, IEnumPins **ppEnum);HRESULT ( *FindPin)(IBaseFilter *This, LPCWSTR Id, IPin **ppPin);HRESULT ( *QueryFilterInfo)(IBaseFilter *This, FILTER_INFO *pInfo);HRESULT ( *JoinFilterGraph)(IBaseFilter *This, IFilterGraph *pGraph, LPCWSTR pName);HRESULT ( *QueryVendorInfo)(IBaseFilter *This, LPWSTR *pVendorInfo);};
struct IXPLogonVtbl {HRESULT ( *QueryInterface)(IXPLogon *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IXPLogon *This);ULONG ( *Release)(IXPLogon *This);HRESULT ( *AddressTypes)(IXPLogon *This, ULONG *lpulFlags, ULONG *lpcAdrType, LPTSTR **lpppAdrTypeArray, ULONG *lpcMAPIUID, LPMAPIUID **lpppUIDArray);HRESULT ( *RegisterOptions)(IXPLogon *This, ULONG *lpulFlags, ULONG *lpcOptions, LPOPTIONDATA *lppOptions);HRESULT ( *TransportNotify)(IXPLogon *This, ULONG *lpulFlags, LPVOID *lppvData);HRESULT ( *Idle)(IXPLogon *This, ULONG ulFlags);HRESULT ( *TransportLogoff)(IXPLogon *This, ULONG ulFlags);HRESULT ( *SubmitMessage)(IXPLogon *This, ULONG ulFlags, LPMESSAGE lpMessage, ULONG *lpulMsgRef, ULONG *lpulReturnParm);HRESULT ( *EndMessage)(IXPLogon *This, ULONG ulMsgRef, ULONG *lpulFlags);HRESULT ( *Poll)(IXPLogon *This, ULONG *lpulIncoming);HRESULT ( *StartMessage)(IXPLogon *This, ULONG ulFlags, LPMESSAGE lpMessage, ULONG *lpulMsgRef);HRESULT ( *OpenStatusEntry)(IXPLogon *This, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPMAPISTATUS *lppEntry);HRESULT ( *ValidateState)(IXPLogon *This, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *FlushQueues)(IXPLogon *This, ULONG ulUIParam, ULONG cbTargetTransport, LPENTRYID lpTargetTransport, ULONG ulFlags);};
struct IFontVtbl {HRESULT ( *QueryInterface)(IFont *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFont *This);ULONG ( *Release)(IFont *This);HRESULT ( *get_Name)(IFont *This, BSTR *pName);HRESULT ( *put_Name)(IFont *This, BSTR name);HRESULT ( *get_Size)(IFont *This, CY *pSize);HRESULT ( *put_Size)(IFont *This, CY size);HRESULT ( *get_Bold)(IFont *This, BOOL *pBold);HRESULT ( *put_Bold)(IFont *This, BOOL bold);HRESULT ( *get_Italic)(IFont *This, BOOL *pItalic);HRESULT ( *put_Italic)(IFont *This, BOOL italic);HRESULT ( *get_Underline)(IFont *This, BOOL *pUnderline);HRESULT ( *put_Underline)(IFont *This, BOOL underline);HRESULT ( *get_Strikethrough)(IFont *This, BOOL *pStrikethrough);HRESULT ( *put_Strikethrough)(IFont *This, BOOL strikethrough);HRESULT ( *get_Weight)(IFont *This, SHORT *pWeight);HRESULT ( *put_Weight)(IFont *This, SHORT weight);HRESULT ( *get_Charset)(IFont *This, SHORT *pCharset);HRESULT ( *put_Charset)(IFont *This, SHORT charset);HRESULT ( *get_hFont)(IFont *This, HFONT *phFont);HRESULT ( *Clone)(IFont *This, IFont **ppFont);HRESULT ( *IsEqual)(IFont *This, IFont *pFontOther);HRESULT ( *SetRatio)(IFont *This, LONG cyLogical, LONG cyHimetric);HRESULT ( *QueryTextMetrics)(IFont *This, TEXTMETRICOLE *pTM);HRESULT ( *AddRefHfont)(IFont *This, HFONT hFont);HRESULT ( *ReleaseHfont)(IFont *This, HFONT hFont);HRESULT ( *SetHdc)(IFont *This, HDC hDC);};
struct ITaskVtbl {HRESULT ( *QueryInterface)(ITask *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITask *This);ULONG ( *Release)(ITask *This);HRESULT ( *CreateTrigger)(ITask *This, WORD *piNewTrigger, ITaskTrigger **ppTrigger);HRESULT ( *DeleteTrigger)(ITask *This, WORD iTrigger);HRESULT ( *GetTriggerCount)(ITask *This, WORD *pwCount);HRESULT ( *GetTrigger)(ITask *This, WORD iTrigger, ITaskTrigger **ppTrigger);HRESULT ( *GetTriggerString)(ITask *This, WORD iTrigger, LPWSTR *ppwszTrigger);HRESULT ( *GetRunTimes)(ITask *This,  LPSYSTEMTIME pstBegin,  LPSYSTEMTIME pstEnd, WORD *pCount, LPSYSTEMTIME *rgstTaskTimes);HRESULT ( *GetNextRunTime)(ITask *This, SYSTEMTIME *pstNextRun);HRESULT ( *SetIdleWait)(ITask *This, WORD wIdleMinutes, WORD wDeadlineMinutes);HRESULT ( *GetIdleWait)(ITask *This, WORD *pwIdleMinutes, WORD *pwDeadlineMinutes);HRESULT ( *Run)(ITask *This);HRESULT ( *Terminate)(ITask *This);HRESULT ( *EditWorkItem)(ITask *This, HWND hParent, DWORD dwReserved);HRESULT ( *GetMostRecentRunTime)(ITask *This, SYSTEMTIME *pstLastRun);HRESULT ( *GetStatus)(ITask *This, HRESULT *phrStatus);HRESULT ( *GetExitCode)(ITask *This, DWORD *pdwExitCode);HRESULT ( *SetComment)(ITask *This, LPCWSTR pwszComment);HRESULT ( *GetComment)(ITask *This, LPWSTR *ppwszComment);HRESULT ( *SetCreator)(ITask *This, LPCWSTR pwszCreator);HRESULT ( *GetCreator)(ITask *This, LPWSTR *ppwszCreator);HRESULT ( *SetWorkItemData)(ITask *This, WORD cbData, BYTE  *    rgbData);HRESULT ( *GetWorkItemData)(ITask *This, WORD *pcbData, BYTE **prgbData);HRESULT ( *SetErrorRetryCount)(ITask *This, WORD wRetryCount);HRESULT ( *GetErrorRetryCount)(ITask *This, WORD *pwRetryCount);HRESULT ( *SetErrorRetryInterval)(ITask *This, WORD wRetryInterval);HRESULT ( *GetErrorRetryInterval)(ITask *This, WORD *pwRetryInterval);HRESULT ( *SetFlags)(ITask *This, DWORD dwFlags);HRESULT ( *GetFlags)(ITask *This, DWORD *pdwFlags);HRESULT ( *SetAccountInformation)(ITask *This, LPCWSTR pwszAccountName, LPCWSTR pwszPassword);HRESULT ( *GetAccountInformation)(ITask *This, LPWSTR *ppwszAccountName);HRESULT ( *SetApplicationName)(ITask *This, LPCWSTR pwszApplicationName);HRESULT ( *GetApplicationName)(ITask *This, LPWSTR *ppwszApplicationName);HRESULT ( *SetParameters)(ITask *This, LPCWSTR pwszParameters);HRESULT ( *GetParameters)(ITask *This, LPWSTR *ppwszParameters);HRESULT ( *SetWorkingDirectory)(ITask *This, LPCWSTR pwszWorkingDirectory);HRESULT ( *GetWorkingDirectory)(ITask *This, LPWSTR *ppwszWorkingDirectory);HRESULT ( *SetPriority)(ITask *This, DWORD dwPriority);HRESULT ( *GetPriority)(ITask *This, DWORD *pdwPriority);HRESULT ( *SetTaskFlags)(ITask *This, DWORD dwFlags);HRESULT ( *GetTaskFlags)(ITask *This, DWORD *pdwFlags);HRESULT ( *SetMaxRunTime)(ITask *This, DWORD dwMaxRunTimeMS);HRESULT ( *GetMaxRunTime)(ITask *This, DWORD *pdwMaxRunTimeMS);};
struct IBPCEmailMessagesCollectionVtbl {HRESULT ( *QueryInterface)(IBPCEmailMessagesCollection *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCEmailMessagesCollection *This);ULONG ( *Release)(IBPCEmailMessagesCollection *This);HRESULT ( *GetTypeInfoCount)(IBPCEmailMessagesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCEmailMessagesCollection *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCEmailMessagesCollection *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCEmailMessagesCollection *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(IBPCEmailMessagesCollection *This, IUnknown **pCollection);HRESULT ( *get_Count)(IBPCEmailMessagesCollection *This, int *Count);HRESULT ( *Item)(IBPCEmailMessagesCollection *This, VARIANT Index, IBPCEmailMessage **pItem);HRESULT ( *Remove)(IBPCEmailMessagesCollection *This, VARIANT pMsg);HRESULT ( *MarkAsRead)(IBPCEmailMessagesCollection *This, IBPCEmailMessage *pMsg);};
struct IBPCHistoryItemsCollectionVtbl {HRESULT ( *QueryInterface)(IBPCHistoryItemsCollection *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCHistoryItemsCollection *This);ULONG ( *Release)(IBPCHistoryItemsCollection *This);HRESULT ( *GetTypeInfoCount)(IBPCHistoryItemsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCHistoryItemsCollection *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCHistoryItemsCollection *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCHistoryItemsCollection *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(IBPCHistoryItemsCollection *This, IUnknown **pCollection);HRESULT ( *get_Count)(IBPCHistoryItemsCollection *This, int *Count);HRESULT ( *Remove)(IBPCHistoryItemsCollection *This, VARIANT Index);HRESULT ( *Item)(IBPCHistoryItemsCollection *This, VARIANT Index, IBPCPurchase **pItem);};
struct _DTUNE_TVX_CONTROLEventsVtbl {HRESULT ( *QueryInterface)(_DTUNE_TVX_CONTROLEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DTUNE_TVX_CONTROLEvents *This);ULONG ( *Release)(_DTUNE_TVX_CONTROLEvents *This);HRESULT ( *GetTypeInfoCount)(_DTUNE_TVX_CONTROLEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DTUNE_TVX_CONTROLEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DTUNE_TVX_CONTROLEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DTUNE_TVX_CONTROLEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DADV_CONTROLEventsVtbl {HRESULT ( *QueryInterface)(_DADV_CONTROLEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DADV_CONTROLEvents *This);ULONG ( *Release)(_DADV_CONTROLEvents *This);HRESULT ( *GetTypeInfoCount)(_DADV_CONTROLEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DADV_CONTROLEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DADV_CONTROLEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DADV_CONTROLEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct IMAPIFormContainerVtbl {HRESULT ( *QueryInterface)(IMAPIFormContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFormContainer *This);ULONG ( *Release)(IMAPIFormContainer *This);HRESULT ( *GetLastError)(IMAPIFormContainer *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *InstallForm)(IMAPIFormContainer *This, ULONG ulUIParam, ULONG ulFlags, LPCTSTR szCfgPathName);HRESULT ( *RemoveForm)(IMAPIFormContainer *This, LPCSTR szMessageClass);HRESULT ( *ResolveMessageClass)(IMAPIFormContainer *This, LPCSTR szMessageClass, ULONG ulFlags, LPMAPIFORMINFO *pforminfo);HRESULT ( *ResolveMultipleMessageClasses)(IMAPIFormContainer *This, LPSMESSAGECLASSARRAY pMsgClassArray, ULONG ulFlags, LPSMAPIFORMINFOARRAY *ppfrminfoarray);HRESULT ( *CalcFormPropSet)(IMAPIFormContainer *This, ULONG ulFlags, LPMAPIFORMPROPARRAY *ppResults);HRESULT ( *GetDisplay)(IMAPIFormContainer *This, ULONG ulFlags, LPTSTR *pszDisplayName);};
struct _DTUNE_TVX_CONTROLVtbl {HRESULT ( *QueryInterface)(_DTUNE_TVX_CONTROL *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DTUNE_TVX_CONTROL *This);ULONG ( *Release)(_DTUNE_TVX_CONTROL *This);HRESULT ( *GetTypeInfoCount)(_DTUNE_TVX_CONTROL *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DTUNE_TVX_CONTROL *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DTUNE_TVX_CONTROL *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DTUNE_TVX_CONTROL *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _WINDBG_EXTENSION_APIS {ULONG nSize;PWINDBG_OUTPUT_ROUTINE lpOutputRoutine;PWINDBG_GET_EXPRESSION lpGetExpressionRoutine;PWINDBG_GET_SYMBOL lpGetSymbolRoutine;PWINDBG_DISASM lpDisasmRoutine;PWINDBG_CHECK_CONTROL_C lpCheckControlCRoutine;PWINDBG_READ_PROCESS_MEMORY_ROUTINE lpReadProcessMemoryRoutine;PWINDBG_WRITE_PROCESS_MEMORY_ROUTINE lpWriteProcessMemoryRoutine;PWINDBG_GET_THREAD_CONTEXT_ROUTINE lpGetThreadContextRoutine;PWINDBG_SET_THREAD_CONTEXT_ROUTINE lpSetThreadContextRoutine;PWINDBG_IOCTL_ROUTINE lpIoctlRoutine;PWINDBG_STACKTRACE_ROUTINE lpStackTraceRoutine;};
struct IMsgServiceAdminVtbl {HRESULT ( *QueryInterface)(IMsgServiceAdmin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMsgServiceAdmin *This);ULONG ( *Release)(IMsgServiceAdmin *This);HRESULT ( *GetLastError)(IMsgServiceAdmin *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetMsgServiceTable)(IMsgServiceAdmin *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *CreateMsgService)(IMsgServiceAdmin *This, LPTSTR lpszService, LPTSTR lpszDisplayName, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *DeleteMsgService)(IMsgServiceAdmin *This, LPMAPIUID lpUID);HRESULT ( *CopyMsgService)(IMsgServiceAdmin *This, LPMAPIUID lpUID, LPTSTR lpszDisplayName, LPCIID lpInterfaceToCopy, LPCIID lpInterfaceDst, LPVOID lpObjectDst, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *RenameMsgService)(IMsgServiceAdmin *This, LPMAPIUID lpUID, ULONG ulFlags, LPTSTR lpszDisplayName);HRESULT ( *ConfigureMsgService)(IMsgServiceAdmin *This, LPMAPIUID lpUID, ULONG ulUIParam, ULONG ulFlags, ULONG cValues, LPSPropValue lpProps);HRESULT ( *OpenProfileSection)(IMsgServiceAdmin *This, LPMAPIUID lpUID, LPCIID lpInterface, ULONG ulFlags, LPPROFSECT *lppProfSect);HRESULT ( *MsgServiceTransportOrder)(IMsgServiceAdmin *This, ULONG cUID, LPMAPIUID lpUIDList, ULONG ulFlags);HRESULT ( *AdminProviders)(IMsgServiceAdmin *This, LPMAPIUID lpUID, ULONG ulFlags, LPPROVIDERADMIN *lppProviderAdmin);HRESULT ( *SetPrimaryIdentity)(IMsgServiceAdmin *This, LPMAPIUID lpUID, ULONG ulFlags);HRESULT ( *GetProviderTable)(IMsgServiceAdmin *This, ULONG ulFlags, LPMAPITABLE *lppTable);};
struct _DPreviewEventsVtbl {HRESULT ( *QueryInterface)(_DPreviewEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPreviewEvents *This);ULONG ( *Release)(_DPreviewEvents *This);HRESULT ( *GetTypeInfoCount)(_DPreviewEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPreviewEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPreviewEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPreviewEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct IOleUIObjInfoAVtbl {HRESULT ( *QueryInterface)(IOleUIObjInfoA *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUIObjInfoA *This);ULONG ( *Release)(IOleUIObjInfoA *This);HRESULT ( *GetObjectInfo)(IOleUIObjInfoA *This, DWORD dwObject, DWORD *lpdwObjSize, LPSTR *lplpszLabel, LPSTR *lplpszType, LPSTR *lplpszShortType, LPSTR *lplpszLocation);HRESULT ( *GetConvertInfo)(IOleUIObjInfoA *This, DWORD dwObject, CLSID *lpClassID, WORD *lpwFormat, CLSID *lpConvertDefaultClassID, LPCLSID *lplpClsidExclude, UINT *lpcClsidExclude);HRESULT ( *ConvertObject)(IOleUIObjInfoA *This, DWORD dwObject,  CLSID * clsidNew);HRESULT ( *GetViewInfo)(IOleUIObjInfoA *This, DWORD dwObject, HGLOBAL *phMetaPict, DWORD *pdvAspect, int *pnCurrentScale);HRESULT ( *SetViewInfo)(IOleUIObjInfoA *This, DWORD dwObject, HGLOBAL hMetaPict, DWORD dvAspect, int nCurrentScale, BOOL bRelativeToOrig);};
struct IOleUIObjInfoWVtbl {HRESULT ( *QueryInterface)(IOleUIObjInfoW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IOleUIObjInfoW *This);ULONG ( *Release)(IOleUIObjInfoW *This);HRESULT ( *GetObjectInfo)(IOleUIObjInfoW *This, DWORD dwObject, DWORD *lpdwObjSize, LPWSTR *lplpszLabel, LPWSTR *lplpszType, LPWSTR *lplpszShortType, LPWSTR *lplpszLocation);HRESULT ( *GetConvertInfo)(IOleUIObjInfoW *This, DWORD dwObject, CLSID *lpClassID, WORD *lpwFormat, CLSID *lpConvertDefaultClassID, LPCLSID *lplpClsidExclude, UINT *lpcClsidExclude);HRESULT ( *ConvertObject)(IOleUIObjInfoW *This, DWORD dwObject,  CLSID * clsidNew);HRESULT ( *GetViewInfo)(IOleUIObjInfoW *This, DWORD dwObject, HGLOBAL *phMetaPict, DWORD *pdvAspect, int *pnCurrentScale);HRESULT ( *SetViewInfo)(IOleUIObjInfoW *This, DWORD dwObject, HGLOBAL hMetaPict, DWORD dvAspect, int nCurrentScale, BOOL bRelativeToOrig);};
struct IProviderAdminVtbl {HRESULT ( *QueryInterface)(IProviderAdmin *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IProviderAdmin *This);ULONG ( *Release)(IProviderAdmin *This);HRESULT ( *GetLastError)(IProviderAdmin *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetProviderTable)(IProviderAdmin *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *CreateProvider)(IProviderAdmin *This, LPTSTR lpszProvider, ULONG cValues, LPSPropValue lpProps, ULONG ulUIParam, ULONG ulFlags, MAPIUID *lpUID);HRESULT ( *DeleteProvider)(IProviderAdmin *This, LPMAPIUID lpUID);HRESULT ( *OpenProfileSection)(IProviderAdmin *This, LPMAPIUID lpUID, LPCIID lpInterface, ULONG ulFlags, LPPROFSECT *lppProfSect);};
struct _DMsepg4EventsVtbl {HRESULT ( *QueryInterface)(_DMsepg4Events *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DMsepg4Events *This);ULONG ( *Release)(_DMsepg4Events *This);HRESULT ( *GetTypeInfoCount)(_DMsepg4Events *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DMsepg4Events *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DMsepg4Events *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DMsepg4Events *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct DBPCVidEventsVtbl {HRESULT ( *QueryInterface)(DBPCVidEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(DBPCVidEvents *This);ULONG ( *Release)(DBPCVidEvents *This);HRESULT ( *GetTypeInfoCount)(DBPCVidEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DBPCVidEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(DBPCVidEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(DBPCVidEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct IAMCollectionVtbl {HRESULT ( *QueryInterface)(IAMCollection *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMCollection *This);ULONG ( *Release)(IAMCollection *This);HRESULT ( *GetTypeInfoCount)(IAMCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMCollection *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMCollection *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMCollection *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Count)(IAMCollection *This, int *plCount);HRESULT ( *Item)(IAMCollection *This, int lItem, IUnknown **ppUnk);HRESULT ( *get__NewEnum)(IAMCollection *This, IUnknown **ppUnk);};
struct IEPGComponentVtbl {HRESULT ( *QueryInterface)(IEPGComponent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IEPGComponent *This);ULONG ( *Release)(IEPGComponent *This);HRESULT ( *GetTypeInfoCount)(IEPGComponent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IEPGComponent *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IEPGComponent *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IEPGComponent *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *SetItem)(IEPGComponent *This, IUnknown *pItem);HRESULT ( *Clear)(IEPGComponent *This);};
struct _DADV_CONTROLVtbl {HRESULT ( *QueryInterface)(_DADV_CONTROL *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DADV_CONTROL *This);ULONG ( *Release)(_DADV_CONTROL *This);HRESULT ( *GetTypeInfoCount)(_DADV_CONTROL *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DADV_CONTROL *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DADV_CONTROL *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DADV_CONTROL *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _PROPSHEETHEADERW {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;_PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D __anonymous0;LPCWSTR pszCaption;UINT nPages;_PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 __anonymous2;_PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 __anonymous3;PFNPROPSHEETCALLBACK pfnCallback;_PROPSHEETHEADERW___C635E94935336589E496FC759198B86F __anonymous4;HPALETTE hplWatermark;_PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 __anonymous5;};
struct IBPCSuspendVtbl {HRESULT ( *QueryInterface)(IBPCSuspend *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCSuspend *This);ULONG ( *Release)(IBPCSuspend *This);HRESULT ( *GetTypeInfoCount)(IBPCSuspend *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCSuspend *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCSuspend *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCSuspend *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *DeviceRelease)(IBPCSuspend *This, int priority, IDispatch **ppS);};
struct IBasicAudioVtbl {HRESULT ( *QueryInterface)(IBasicAudio *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBasicAudio *This);ULONG ( *Release)(IBasicAudio *This);HRESULT ( *GetTypeInfoCount)(IBasicAudio *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBasicAudio *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBasicAudio *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBasicAudio *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *put_Volume)(IBasicAudio *This, int lVolume);HRESULT ( *get_Volume)(IBasicAudio *This, int *plVolume);HRESULT ( *put_Balance)(IBasicAudio *This, int lBalance);HRESULT ( *get_Balance)(IBasicAudio *This, int *plBalance);};
struct IMSProviderVtbl {HRESULT ( *QueryInterface)(IMSProvider *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMSProvider *This);ULONG ( *Release)(IMSProvider *This);HRESULT ( *Shutdown)(IMSProvider *This, ULONG *lpulFlags);HRESULT ( *Logon)(IMSProvider *This, LPMAPISUP lpMAPISup, ULONG ulUIParam, LPTSTR lpszProfileName, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags, LPCIID lpInterface, ULONG *lpcbSpoolSecurity, LPBYTE *lppbSpoolSecurity, LPMAPIERROR *lppMAPIError, LPMSLOGON *lppMSLogon, LPMDB *lppMDB);HRESULT ( *SpoolerLogon)(IMSProvider *This, LPMAPISUP lpMAPISup, ULONG ulUIParam, LPTSTR lpszProfileName, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags, LPCIID lpInterface, ULONG cbSpoolSecurity, LPBYTE lpbSpoolSecurity, LPMAPIERROR *lppMAPIError, LPMSLOGON *lppMSLogon, LPMDB *lppMDB);HRESULT ( *CompareStoreIDs)(IMSProvider *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);};
struct IShellLinkWVtbl {HRESULT ( *QueryInterface)(IShellLinkW *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellLinkW *This);ULONG ( *Release)(IShellLinkW *This);HRESULT ( *GetPath)(IShellLinkW *This, LPWSTR pszFile, int cchMaxPath, WIN32_FIND_DATAW *pfd, DWORD fFlags);HRESULT ( *GetIDList)(IShellLinkW *This, LPITEMIDLIST *ppidl);HRESULT ( *SetIDList)(IShellLinkW *This, LPCITEMIDLIST pidl);HRESULT ( *GetDescription)(IShellLinkW *This, LPWSTR pszName, int cchMaxName);HRESULT ( *SetDescription)(IShellLinkW *This, LPCWSTR pszName);HRESULT ( *GetWorkingDirectory)(IShellLinkW *This, LPWSTR pszDir, int cchMaxPath);HRESULT ( *SetWorkingDirectory)(IShellLinkW *This, LPCWSTR pszDir);HRESULT ( *GetArguments)(IShellLinkW *This, LPWSTR pszArgs, int cchMaxPath);HRESULT ( *SetArguments)(IShellLinkW *This, LPCWSTR pszArgs);HRESULT ( *GetHotkey)(IShellLinkW *This, WORD *pwHotkey);HRESULT ( *SetHotkey)(IShellLinkW *This, WORD wHotkey);HRESULT ( *GetShowCmd)(IShellLinkW *This, int *piShowCmd);HRESULT ( *SetShowCmd)(IShellLinkW *This, int iShowCmd);HRESULT ( *GetIconLocation)(IShellLinkW *This, LPWSTR pszIconPath, int cchIconPath, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkW *This, LPCWSTR pszIconPath, int iIcon);HRESULT ( *SetRelativePath)(IShellLinkW *This, LPCWSTR pszPathRel, DWORD dwReserved);HRESULT ( *Resolve)(IShellLinkW *This, HWND hwnd, DWORD fFlags);HRESULT ( *SetPath)(IShellLinkW *This, LPCWSTR pszFile);};
struct _DBanEventsVtbl {HRESULT ( *QueryInterface)(_DBanEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DBanEvents *This);ULONG ( *Release)(_DBanEvents *This);HRESULT ( *GetTypeInfoCount)(_DBanEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DBanEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DBanEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DBanEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DEPGEventsVtbl {HRESULT ( *QueryInterface)(_DEPGEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DEPGEvents *This);ULONG ( *Release)(_DEPGEvents *This);HRESULT ( *GetTypeInfoCount)(_DEPGEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DEPGEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DEPGEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DEPGEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DPOPEventsVtbl {HRESULT ( *QueryInterface)(_DPOPEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPOPEvents *This);ULONG ( *Release)(_DPOPEvents *This);HRESULT ( *GetTypeInfoCount)(_DPOPEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPOPEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPOPEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPOPEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DPSPEventsVtbl {HRESULT ( *QueryInterface)(_DPSPEvents *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPSPEvents *This);ULONG ( *Release)(_DPSPEvents *This);HRESULT ( *GetTypeInfoCount)(_DPSPEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPSPEvents *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPSPEvents *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPSPEvents *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct tagCHOOSEFONTW {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTW lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCWSTR lpTemplateName;HINSTANCE hInstance;LPWSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
struct _DPreviewVtbl {HRESULT ( *QueryInterface)(_DPreview *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPreview *This);ULONG ( *Release)(_DPreview *This);HRESULT ( *GetTypeInfoCount)(_DPreview *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPreview *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPreview *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPreview *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DMsepg4Vtbl {HRESULT ( *QueryInterface)(_DMsepg4 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DMsepg4 *This);ULONG ( *Release)(_DMsepg4 *This);HRESULT ( *GetTypeInfoCount)(_DMsepg4 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DMsepg4 *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DMsepg4 *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DMsepg4 *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DBanVtbl {HRESULT ( *QueryInterface)(_DBan *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DBan *This);ULONG ( *Release)(_DBan *This);HRESULT ( *GetTypeInfoCount)(_DBan *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DBan *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DBan *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DBan *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DEPGVtbl {HRESULT ( *QueryInterface)(_DEPG *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DEPG *This);ULONG ( *Release)(_DEPG *This);HRESULT ( *GetTypeInfoCount)(_DEPG *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DEPG *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DEPG *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DEPG *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DPOPVtbl {HRESULT ( *QueryInterface)(_DPOP *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPOP *This);ULONG ( *Release)(_DPOP *This);HRESULT ( *GetTypeInfoCount)(_DPOP *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPOP *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPOP *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPOP *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _DPSPVtbl {HRESULT ( *QueryInterface)(_DPSP *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(_DPSP *This);ULONG ( *Release)(_DPSP *This);HRESULT ( *GetTypeInfoCount)(_DPSP *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_DPSP *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(_DPSP *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(_DPSP *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);};
struct _WLX_DISPATCH_VERSION_1_0 {PWLX_USE_CTRL_ALT_DEL WlxUseCtrlAltDel;PWLX_SET_CONTEXT_POINTER WlxSetContextPointer;PWLX_SAS_NOTIFY WlxSasNotify;PWLX_SET_TIMEOUT WlxSetTimeout;PWLX_ASSIGN_SHELL_PROTECTION WlxAssignShellProtection;PWLX_MESSAGE_BOX WlxMessageBox;PWLX_DIALOG_BOX WlxDialogBox;PWLX_DIALOG_BOX_PARAM WlxDialogBoxParam;PWLX_DIALOG_BOX_INDIRECT WlxDialogBoxIndirect;PWLX_DIALOG_BOX_INDIRECT_PARAM WlxDialogBoxIndirectParam;PWLX_SWITCH_DESKTOP_TO_USER WlxSwitchDesktopToUser;PWLX_SWITCH_DESKTOP_TO_WINLOGON WlxSwitchDesktopToWinlogon;PWLX_CHANGE_PASSWORD_NOTIFY WlxChangePasswordNotify;};
struct IAMExtendedSeekingVtbl {HRESULT ( *QueryInterface)(IAMExtendedSeeking *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMExtendedSeeking *This);ULONG ( *Release)(IAMExtendedSeeking *This);HRESULT ( *GetTypeInfoCount)(IAMExtendedSeeking *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMExtendedSeeking *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMExtendedSeeking *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMExtendedSeeking *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_ExSeekCapabilities)(IAMExtendedSeeking *This, int *pExCapabilities);HRESULT ( *get_MarkerCount)(IAMExtendedSeeking *This, int *pMarkerCount);HRESULT ( *get_CurrentMarker)(IAMExtendedSeeking *This, int *pCurrentMarker);HRESULT ( *GetMarkerTime)(IAMExtendedSeeking *This, int MarkerNum, double *pMarkerTime);HRESULT ( *GetMarkerName)(IAMExtendedSeeking *This, int MarkerNum, BSTR *pbstrMarkerName);HRESULT ( *put_PlaybackSpeed)(IAMExtendedSeeking *This, double Speed);HRESULT ( *get_PlaybackSpeed)(IAMExtendedSeeking *This, double *pSpeed);};
struct IMediaStreamFilterVtbl {HRESULT ( *QueryInterface)(IMediaStreamFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaStreamFilter *This);ULONG ( *Release)(IMediaStreamFilter *This);HRESULT ( *GetClassID)(IMediaStreamFilter *This, CLSID *pClassID);HRESULT ( *Stop)(IMediaStreamFilter *This);HRESULT ( *Pause)(IMediaStreamFilter *This);HRESULT ( *Run)(IMediaStreamFilter *This, REFERENCE_TIME tStart);HRESULT ( *GetState)(IMediaStreamFilter *This, DWORD dwMilliSecsTimeout, FILTER_STATE *State);HRESULT ( *SetSyncSource)(IMediaStreamFilter *This, IReferenceClock *pClock);HRESULT ( *GetSyncSource)(IMediaStreamFilter *This, IReferenceClock **pClock);HRESULT ( *EnumPins)(IMediaStreamFilter *This, IEnumPins **ppEnum);HRESULT ( *FindPin)(IMediaStreamFilter *This, LPCWSTR Id, IPin **ppPin);HRESULT ( *QueryFilterInfo)(IMediaStreamFilter *This, FILTER_INFO *pInfo);HRESULT ( *JoinFilterGraph)(IMediaStreamFilter *This, IFilterGraph *pGraph, LPCWSTR pName);HRESULT ( *QueryVendorInfo)(IMediaStreamFilter *This, LPWSTR *pVendorInfo);HRESULT ( *AddMediaStream)(IMediaStreamFilter *This, IAMMediaStream *pAMMediaStream);HRESULT ( *GetMediaStream)(IMediaStreamFilter *This, REFMSPID idPurpose, IMediaStream **ppMediaStream);HRESULT ( *EnumMediaStreams)(IMediaStreamFilter *This, int Index, IMediaStream **ppMediaStream);HRESULT ( *SupportSeeking)(IMediaStreamFilter *This, BOOL bRenderer);HRESULT ( *ReferenceTimeToStreamTime)(IMediaStreamFilter *This, REFERENCE_TIME *pTime);HRESULT ( *GetCurrentStreamTime)(IMediaStreamFilter *This, REFERENCE_TIME *pCurrentStreamTime);HRESULT ( *WaitUntil)(IMediaStreamFilter *This, REFERENCE_TIME WaitStreamTime);HRESULT ( *Flush)(IMediaStreamFilter *This, BOOL bCancelEOS);HRESULT ( *EndOfStream)(IMediaStreamFilter *This);};
struct ITVControlPrivateVtbl {HRESULT ( *QueryInterface)(ITVControlPrivate *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(ITVControlPrivate *This);ULONG ( *Release)(ITVControlPrivate *This);HRESULT ( *GetTypeInfoCount)(ITVControlPrivate *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITVControlPrivate *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(ITVControlPrivate *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(ITVControlPrivate *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *Resume)(ITVControlPrivate *This);HRESULT ( *Suspend)(ITVControlPrivate *This);HRESULT ( *Identify)(ITVControlPrivate *This, TVX_CONTROL_TYPES *id);HRESULT ( *AccelCommand)(ITVControlPrivate *This, int id);};
struct IAMNetworkStatusVtbl {HRESULT ( *QueryInterface)(IAMNetworkStatus *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMNetworkStatus *This);ULONG ( *Release)(IAMNetworkStatus *This);HRESULT ( *GetTypeInfoCount)(IAMNetworkStatus *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetworkStatus *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMNetworkStatus *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMNetworkStatus *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_ReceivedPackets)(IAMNetworkStatus *This, int *pReceivedPackets);HRESULT ( *get_RecoveredPackets)(IAMNetworkStatus *This, int *pRecoveredPackets);HRESULT ( *get_LostPackets)(IAMNetworkStatus *This, int *pLostPackets);HRESULT ( *get_ReceptionQuality)(IAMNetworkStatus *This, int *pReceptionQuality);HRESULT ( *get_BufferingCount)(IAMNetworkStatus *This, int *pBufferingCount);HRESULT ( *get_IsBroadcast)(IAMNetworkStatus *This, VARIANT_BOOL *pIsBroadcast);HRESULT ( *get_BufferingProgress)(IAMNetworkStatus *This, int *pBufferingProgress);};
struct IAMMediaContentVtbl {HRESULT ( *QueryInterface)(IAMMediaContent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMMediaContent *This);ULONG ( *Release)(IAMMediaContent *This);HRESULT ( *GetTypeInfoCount)(IAMMediaContent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMMediaContent *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMMediaContent *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMMediaContent *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_AuthorName)(IAMMediaContent *This, BSTR *pbstrAuthorName);HRESULT ( *get_Title)(IAMMediaContent *This, BSTR *pbstrTitle);HRESULT ( *get_Rating)(IAMMediaContent *This, BSTR *pbstrRating);HRESULT ( *get_Description)(IAMMediaContent *This, BSTR *pbstrDescription);HRESULT ( *get_Copyright)(IAMMediaContent *This, BSTR *pbstrCopyright);HRESULT ( *get_BaseURL)(IAMMediaContent *This, BSTR *pbstrBaseURL);HRESULT ( *get_LogoURL)(IAMMediaContent *This, BSTR *pbstrLogoURL);HRESULT ( *get_LogoIconURL)(IAMMediaContent *This, BSTR *pbstrLogoURL);HRESULT ( *get_WatermarkURL)(IAMMediaContent *This, BSTR *pbstrWatermarkURL);HRESULT ( *get_MoreInfoURL)(IAMMediaContent *This, BSTR *pbstrMoreInfoURL);};
struct IBPCDeviceEventVtbl {HRESULT ( *QueryInterface)(IBPCDeviceEvent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCDeviceEvent *This);ULONG ( *Release)(IBPCDeviceEvent *This);HRESULT ( *GetTypeInfoCount)(IBPCDeviceEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCDeviceEvent *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCDeviceEvent *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCDeviceEvent *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *GotControl)(IBPCDeviceEvent *This);HRESULT ( *LostControl)(IBPCDeviceEvent *This);HRESULT ( *StateChange)(IBPCDeviceEvent *This, IBPCDeviceBase *lpd, int oldState, int newState);HRESULT ( *ErrorMessage)(IBPCDeviceEvent *This, int iMessage, BSTR Text);HRESULT ( *CardMissing)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *CardInvalid)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *WrongCard)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *BlackedOut)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *RatingExceeded)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *CostExceeded)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *OSDRequest)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *NoSubscriber)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *CAFail)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *CannotPurchase)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *CASuccess)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *Retry)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCMessage *Message);HRESULT ( *SignalLost)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *NewEmail)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *ColdStart)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *Ready)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *NotReady)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *CAFault)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *PasswordCleared)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *TuningChanged)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *HandlePurchaseOffer)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority, IBPCPurchase *pDetails);HRESULT ( *RevokeEvent)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *CopyCard)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *EPGFilterChanged)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);HRESULT ( *TapingControlChanged)(IBPCDeviceEvent *This, IBPCDeviceBase *lpdDevice, int SubEvent, int EventNumber, int ItemNumber, int Priority);};
struct IAMChannelInfoVtbl {HRESULT ( *QueryInterface)(IAMChannelInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMChannelInfo *This);ULONG ( *Release)(IAMChannelInfo *This);HRESULT ( *GetTypeInfoCount)(IAMChannelInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMChannelInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMChannelInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMChannelInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_ChannelName)(IAMChannelInfo *This, BSTR *pbstrChannelName);HRESULT ( *get_ChannelDescription)(IAMChannelInfo *This, BSTR *pbstrChannelDescription);HRESULT ( *get_ChannelURL)(IAMChannelInfo *This, BSTR *pbstrChannelURL);HRESULT ( *get_ContactAddress)(IAMChannelInfo *This, BSTR *pbstrContactAddress);HRESULT ( *get_ContactPhone)(IAMChannelInfo *This, BSTR *pbstrContactPhone);HRESULT ( *get_ContactEmail)(IAMChannelInfo *This, BSTR *pbstrContactEmail);};
struct IDirectInput2WVtbl {HRESULT ( *QueryInterface)(IDirectInput2W *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirectInput2W *This);ULONG ( *Release)(IDirectInput2W *This);HRESULT ( *CreateDevice)(IDirectInput2W *This,  GUID *, LPDIRECTINPUTDEVICEW *, LPUNKNOWN);HRESULT ( *EnumDevices)(IDirectInput2W *This, DWORD, LPDIENUMDEVICESCALLBACKW, LPVOID, DWORD);HRESULT ( *GetDeviceStatus)(IDirectInput2W *This,  GUID *);HRESULT ( *RunControlPanel)(IDirectInput2W *This, HWND, DWORD);HRESULT ( *Initialize)(IDirectInput2W *This, HINSTANCE, DWORD);HRESULT ( *FindDevice)(IDirectInput2W *This,  GUID *, LPCWSTR, LPGUID);};
struct IMediaPositionVtbl {HRESULT ( *QueryInterface)(IMediaPosition *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMediaPosition *This);ULONG ( *Release)(IMediaPosition *This);HRESULT ( *GetTypeInfoCount)(IMediaPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaPosition *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IMediaPosition *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IMediaPosition *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Duration)(IMediaPosition *This, REFTIME *plength);HRESULT ( *put_CurrentPosition)(IMediaPosition *This, REFTIME llTime);HRESULT ( *get_CurrentPosition)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *get_StopTime)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *put_StopTime)(IMediaPosition *This, REFTIME llTime);HRESULT ( *get_PrerollTime)(IMediaPosition *This, REFTIME *pllTime);HRESULT ( *put_PrerollTime)(IMediaPosition *This, REFTIME llTime);HRESULT ( *put_Rate)(IMediaPosition *This, double dRate);HRESULT ( *get_Rate)(IMediaPosition *This, double *pdRate);HRESULT ( *CanSeekForward)(IMediaPosition *This, int *pCanSeekForward);HRESULT ( *CanSeekBackward)(IMediaPosition *This, int *pCanSeekBackward);};
struct IMediaTypeInfoVtbl {HRESULT ( *QueryInterface)(IMediaTypeInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMediaTypeInfo *This);ULONG ( *Release)(IMediaTypeInfo *This);HRESULT ( *GetTypeInfoCount)(IMediaTypeInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaTypeInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IMediaTypeInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IMediaTypeInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Type)(IMediaTypeInfo *This, BSTR *strType);HRESULT ( *get_Subtype)(IMediaTypeInfo *This, BSTR *strType);};
struct IMultiLanguageVtbl {HRESULT ( *QueryInterface)(IMultiLanguage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMultiLanguage *This);ULONG ( *Release)(IMultiLanguage *This);HRESULT ( *GetNumberOfCodePageInfo)(IMultiLanguage *This, UINT *pcCodePage);HRESULT ( *GetCodePageInfo)(IMultiLanguage *This, UINT uiCodePage, PMIMECPINFO pCodePageInfo);HRESULT ( *GetFamilyCodePage)(IMultiLanguage *This, UINT uiCodePage, UINT *puiFamilyCodePage);HRESULT ( *EnumCodePages)(IMultiLanguage *This, DWORD grfFlags, IEnumCodePage **ppEnumCodePage);HRESULT ( *GetCharsetInfo)(IMultiLanguage *This, BSTR Charset, PMIMECSETINFO pCharsetInfo);HRESULT ( *IsConvertible)(IMultiLanguage *This, DWORD dwSrcEncoding, DWORD dwDstEncoding);HRESULT ( *ConvertString)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwSrcEncoding, DWORD dwDstEncoding, BYTE *pSrcStr, UINT *pcSrcSize, BYTE *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringToUnicode)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwEncoding, CHAR *pSrcStr, UINT *pcSrcSize, WCHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringFromUnicode)(IMultiLanguage *This, DWORD *pdwMode, DWORD dwEncoding, WCHAR *pSrcStr, UINT *pcSrcSize, CHAR *pDstStr, UINT *pcDstSize);HRESULT ( *ConvertStringReset)(IMultiLanguage *This);HRESULT ( *GetRfc1766FromLcid)(IMultiLanguage *This, LCID Locale, BSTR *pbstrRfc1766);HRESULT ( *GetLcidFromRfc1766)(IMultiLanguage *This, LCID *pLocale, BSTR bstrRfc1766);HRESULT ( *EnumRfc1766)(IMultiLanguage *This, IEnumRfc1766 **ppEnumRfc1766);HRESULT ( *GetRfc1766Info)(IMultiLanguage *This, LCID Locale, PRFC1766INFO pRfc1766Info);HRESULT ( *CreateConvertCharset)(IMultiLanguage *This, UINT uiSrcCodePage, UINT uiDstCodePage, DWORD dwProperty, IMLangConvertCharset **ppMLangConvertCharset);};
struct IRegFilterInfoVtbl {HRESULT ( *QueryInterface)(IRegFilterInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IRegFilterInfo *This);ULONG ( *Release)(IRegFilterInfo *This);HRESULT ( *GetTypeInfoCount)(IRegFilterInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRegFilterInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IRegFilterInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IRegFilterInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Name)(IRegFilterInfo *This, BSTR *strName);HRESULT ( *Filter)(IRegFilterInfo *This, IDispatch **ppUnk);};
struct IMSAdminBaseWVtbl {HRESULT ( *QueryInterface)(IMSAdminBaseW *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMSAdminBaseW *This);ULONG ( *Release)(IMSAdminBaseW *This);HRESULT ( *AddKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath);HRESULT ( *DeleteKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath);HRESULT ( *DeleteChildKeys)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath);HRESULT ( *EnumKeys)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, LPWSTR pszMDName, DWORD dwMDEnumObjectIndex);HRESULT ( *CopyKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDSourceHandle, LPCWSTR pszMDSourcePath, METADATA_HANDLE hMDDestHandle, LPCWSTR pszMDDestPath, BOOL bMDOverwriteFlag, BOOL bMDCopyFlag);HRESULT ( *RenameKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, LPCWSTR pszMDNewName);HRESULT ( *SetData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, PMETADATA_RECORD pmdrMDData);HRESULT ( *GetData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, PMETADATA_RECORD pmdrMDData, DWORD *pdwMDRequiredDataLen);HRESULT ( *DeleteData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD dwMDIdentifier, DWORD dwMDDataType);HRESULT ( *EnumData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, PMETADATA_RECORD pmdrMDData, DWORD dwMDEnumDataIndex, DWORD *pdwMDRequiredDataLen);HRESULT ( *GetAllData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD dwMDAttributes, DWORD dwMDUserType, DWORD dwMDDataType, DWORD *pdwMDNumDataEntries, DWORD *pdwMDDataSetNumber, DWORD dwMDBufferSize, unsigned char *pbMDBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *DeleteAllData)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD dwMDUserType, DWORD dwMDDataType);HRESULT ( *CopyData)(IMSAdminBaseW *This, METADATA_HANDLE hMDSourceHandle, LPCWSTR pszMDSourcePath, METADATA_HANDLE hMDDestHandle, LPCWSTR pszMDDestPath, DWORD dwMDAttributes, DWORD dwMDUserType, DWORD dwMDDataType, BOOL bMDCopyFlag);HRESULT ( *GetDataPaths)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD dwMDIdentifier, DWORD dwMDDataType, DWORD dwMDBufferSize, WCHAR *pszBuffer, DWORD *pdwMDRequiredBufferSize);HRESULT ( *OpenKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD dwMDAccessRequested, DWORD dwMDTimeOut, PMETADATA_HANDLE phMDNewHandle);HRESULT ( *CloseKey)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle);HRESULT ( *ChangePermissions)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, DWORD dwMDTimeOut, DWORD dwMDAccessRequested);HRESULT ( *SaveData)(IMSAdminBaseW *This);HRESULT ( *GetHandleInfo)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, PMETADATA_HANDLE_INFO pmdhiInfo);HRESULT ( *GetSystemChangeNumber)(IMSAdminBaseW *This, DWORD *pdwSystemChangeNumber);HRESULT ( *GetDataSetNumber)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, DWORD *pdwMDDataSetNumber);HRESULT ( *SetLastChangeTime)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, PFILETIME pftMDLastChangeTime, BOOL bLocalTime);HRESULT ( *GetLastChangeTime)(IMSAdminBaseW *This, METADATA_HANDLE hMDHandle, LPCWSTR pszMDPath, PFILETIME pftMDLastChangeTime, BOOL bLocalTime);HRESULT ( *KeyExchangePhase1)(IMSAdminBaseW *This);HRESULT ( *KeyExchangePhase2)(IMSAdminBaseW *This);HRESULT ( *Backup)(IMSAdminBaseW *This, LPCWSTR pszMDBackupLocation, DWORD dwMDVersion, DWORD dwMDFlags);HRESULT ( *Restore)(IMSAdminBaseW *This, LPCWSTR pszMDBackupLocation, DWORD dwMDVersion, DWORD dwMDFlags);HRESULT ( *EnumBackups)(IMSAdminBaseW *This, LPWSTR pszMDBackupLocation, DWORD *pdwMDVersion, PFILETIME pftMDBackupTime, DWORD dwMDEnumIndex);HRESULT ( *DeleteBackup)(IMSAdminBaseW *This, LPCWSTR pszMDBackupLocation, DWORD dwMDVersion);HRESULT ( *UnmarshalInterface)(IMSAdminBaseW *This, IMSAdminBaseW **piadmbwInterface);HRESULT ( *GetServerGuid)(IMSAdminBaseW *This);};
struct IAccessibleVtbl {HRESULT ( *QueryInterface)(IAccessible *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAccessible *This);ULONG ( *Release)(IAccessible *This);HRESULT ( *GetTypeInfoCount)(IAccessible *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAccessible *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAccessible *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAccessible *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_accParent)(IAccessible *This, IDispatch **ppdispParent);HRESULT ( *get_accChildCount)(IAccessible *This, int *pChildCount);HRESULT ( *get_accChild)(IAccessible *This, VARIANT varChildIndex, IDispatch **ppdispChild);HRESULT ( *get_accName)(IAccessible *This, VARIANT varChild, BSTR *pszName);HRESULT ( *get_accValue)(IAccessible *This, VARIANT varChild, BSTR *pszValue);HRESULT ( *get_accDescription)(IAccessible *This, VARIANT varChild, BSTR *pszDescription);HRESULT ( *get_accRole)(IAccessible *This, VARIANT varChild, VARIANT *pvarRole);HRESULT ( *get_accState)(IAccessible *This, VARIANT varChild, VARIANT *pvarState);HRESULT ( *get_accHelp)(IAccessible *This, VARIANT varChild, BSTR *pszHelp);HRESULT ( *get_accHelpTopic)(IAccessible *This, BSTR *pszHelpFile, VARIANT varChild, int *pidTopic);HRESULT ( *get_accKeyboardShortcut)(IAccessible *This, VARIANT varChild, BSTR *pszKeyboardShortcut);HRESULT ( *get_accFocus)(IAccessible *This, VARIANT *pvarFocusChild);HRESULT ( *get_accSelection)(IAccessible *This, VARIANT *pvarSelectedChildren);HRESULT ( *get_accDefaultAction)(IAccessible *This, VARIANT varChild, BSTR *pszDefaultAction);HRESULT ( *accSelect)(IAccessible *This, int flagsSelect, VARIANT varChild);HRESULT ( *accLocation)(IAccessible *This, int *pxLeft, int *pyTop, int *pcxWidth, int *pcyHeight, VARIANT varChild);HRESULT ( *accNavigate)(IAccessible *This, int navDir, VARIANT varStart, VARIANT *pvarEndUpAt);HRESULT ( *accHitTest)(IAccessible *This, int xLeft, int yTop, VARIANT *pvarChildAtPoint);HRESULT ( *accDoDefaultAction)(IAccessible *This, VARIANT varChild);HRESULT ( *put_accName)(IAccessible *This, VARIANT varChild, BSTR szName);HRESULT ( *put_accValue)(IAccessible *This, VARIANT varChild, BSTR pszValue);};
struct IBPCMessageVtbl {HRESULT ( *QueryInterface)(IBPCMessage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCMessage *This);ULONG ( *Release)(IBPCMessage *This);HRESULT ( *GetTypeInfoCount)(IBPCMessage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCMessage *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCMessage *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCMessage *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Attributes)(IBPCMessage *This, int *Attrs);HRESULT ( *get_Msg)(IBPCMessage *This, BSTR *Text);};
struct IBasicVideoVtbl {HRESULT ( *QueryInterface)(IBasicVideo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBasicVideo *This);ULONG ( *Release)(IBasicVideo *This);HRESULT ( *GetTypeInfoCount)(IBasicVideo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBasicVideo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBasicVideo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBasicVideo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_AvgTimePerFrame)(IBasicVideo *This, REFTIME *pAvgTimePerFrame);HRESULT ( *get_BitRate)(IBasicVideo *This, int *pBitRate);HRESULT ( *get_BitErrorRate)(IBasicVideo *This, int *pBitErrorRate);HRESULT ( *get_VideoWidth)(IBasicVideo *This, int *pVideoWidth);HRESULT ( *get_VideoHeight)(IBasicVideo *This, int *pVideoHeight);HRESULT ( *put_SourceLeft)(IBasicVideo *This, int SourceLeft);HRESULT ( *get_SourceLeft)(IBasicVideo *This, int *pSourceLeft);HRESULT ( *put_SourceWidth)(IBasicVideo *This, int SourceWidth);HRESULT ( *get_SourceWidth)(IBasicVideo *This, int *pSourceWidth);HRESULT ( *put_SourceTop)(IBasicVideo *This, int SourceTop);HRESULT ( *get_SourceTop)(IBasicVideo *This, int *pSourceTop);HRESULT ( *put_SourceHeight)(IBasicVideo *This, int SourceHeight);HRESULT ( *get_SourceHeight)(IBasicVideo *This, int *pSourceHeight);HRESULT ( *put_DestinationLeft)(IBasicVideo *This, int DestinationLeft);HRESULT ( *get_DestinationLeft)(IBasicVideo *This, int *pDestinationLeft);HRESULT ( *put_DestinationWidth)(IBasicVideo *This, int DestinationWidth);HRESULT ( *get_DestinationWidth)(IBasicVideo *This, int *pDestinationWidth);HRESULT ( *put_DestinationTop)(IBasicVideo *This, int DestinationTop);HRESULT ( *get_DestinationTop)(IBasicVideo *This, int *pDestinationTop);HRESULT ( *put_DestinationHeight)(IBasicVideo *This, int DestinationHeight);HRESULT ( *get_DestinationHeight)(IBasicVideo *This, int *pDestinationHeight);HRESULT ( *SetSourcePosition)(IBasicVideo *This, int Left, int Top, int Width, int Height);HRESULT ( *GetSourcePosition)(IBasicVideo *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultSourcePosition)(IBasicVideo *This);HRESULT ( *SetDestinationPosition)(IBasicVideo *This, int Left, int Top, int Width, int Height);HRESULT ( *GetDestinationPosition)(IBasicVideo *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *SetDefaultDestinationPosition)(IBasicVideo *This);HRESULT ( *GetVideoSize)(IBasicVideo *This, int *pWidth, int *pHeight);HRESULT ( *GetVideoPaletteEntries)(IBasicVideo *This, int StartIndex, int Entries, int *pRetrieved, int *pPalette);HRESULT ( *GetCurrentImage)(IBasicVideo *This, int *pBufferSize, int *pDIBImage);HRESULT ( *IsUsingDefaultSource)(IBasicVideo *This);HRESULT ( *IsUsingDefaultDestination)(IBasicVideo *This);};
struct IFilterInfoVtbl {HRESULT ( *QueryInterface)(IFilterInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IFilterInfo *This);ULONG ( *Release)(IFilterInfo *This);HRESULT ( *GetTypeInfoCount)(IFilterInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFilterInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IFilterInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IFilterInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *FindPin)(IFilterInfo *This, BSTR strPinID, IDispatch **ppUnk);HRESULT ( *get_Name)(IFilterInfo *This, BSTR *strName);HRESULT ( *get_VendorInfo)(IFilterInfo *This, BSTR *strVendorInfo);HRESULT ( *get_Filter)(IFilterInfo *This, IUnknown **ppUnk);HRESULT ( *get_Pins)(IFilterInfo *This, IDispatch **ppUnk);HRESULT ( *get_IsFileSource)(IFilterInfo *This, int *pbIsSource);HRESULT ( *get_Filename)(IFilterInfo *This, BSTR *pstrFilename);HRESULT ( *put_Filename)(IFilterInfo *This, BSTR strFilename);};
struct IMediaEventVtbl {HRESULT ( *QueryInterface)(IMediaEvent *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMediaEvent *This);ULONG ( *Release)(IMediaEvent *This);HRESULT ( *GetTypeInfoCount)(IMediaEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaEvent *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IMediaEvent *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IMediaEvent *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *GetEventHandle)(IMediaEvent *This, OAEVENT *hEvent);HRESULT ( *GetEvent)(IMediaEvent *This, int *lEventCode, int *lParam1, int *lParam2, int msTimeout);HRESULT ( *WaitForCompletion)(IMediaEvent *This, int msTimeout, int *pEvCode);HRESULT ( *CancelDefaultHandling)(IMediaEvent *This, int lEvCode);HRESULT ( *RestoreDefaultHandling)(IMediaEvent *This, int lEvCode);HRESULT ( *FreeEventParams)(IMediaEvent *This, int lEvCode, int lParam1, int lParam2);};
struct IMAPIPropVtbl {HRESULT ( *QueryInterface)(IMAPIProp *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIProp *This);ULONG ( *Release)(IMAPIProp *This);HRESULT ( *GetLastError)(IMAPIProp *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIProp *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIProp *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIProp *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIProp *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIProp *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIProp *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIProp *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIProp *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIProp *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIProp *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IMailUserVtbl {HRESULT ( *QueryInterface)(IMailUser *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMailUser *This);ULONG ( *Release)(IMailUser *This);HRESULT ( *GetLastError)(IMailUser *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMailUser *This, ULONG ulFlags);HRESULT ( *GetProps)(IMailUser *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMailUser *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMailUser *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMailUser *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMailUser *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMailUser *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMailUser *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMailUser *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMailUser *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IProfSectVtbl {HRESULT ( *QueryInterface)(IProfSect *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IProfSect *This);ULONG ( *Release)(IProfSect *This);HRESULT ( *GetLastError)(IProfSect *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IProfSect *This, ULONG ulFlags);HRESULT ( *GetProps)(IProfSect *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IProfSect *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IProfSect *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IProfSect *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IProfSect *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IProfSect *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IProfSect *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IProfSect *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IProfSect *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IPropDataVtbl {HRESULT ( *QueryInterface)(IPropData *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPropData *This);ULONG ( *Release)(IPropData *This);HRESULT ( *GetLastError)(IPropData *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IPropData *This, ULONG ulFlags);HRESULT ( *GetProps)(IPropData *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IPropData *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IPropData *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IPropData *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IPropData *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IPropData *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IPropData *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IPropData *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IPropData *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *HrSetObjAccess)(IPropData *This, ULONG ulAccess);HRESULT ( *HrSetPropAccess)(IPropData *This, LPSPropTagArray lpPropTagArray, ULONG *rgulAccess);HRESULT ( *HrGetPropAccess)(IPropData *This, LPSPropTagArray *lppPropTagArray, ULONG **lprgulAccess);HRESULT ( *HrAddObjProps)(IPropData *This, LPSPropTagArray lppPropTagArray, LPSPropProblemArray *lprgulAccess);};
struct IPinInfoVtbl {HRESULT ( *QueryInterface)(IPinInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IPinInfo *This);ULONG ( *Release)(IPinInfo *This);HRESULT ( *GetTypeInfoCount)(IPinInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPinInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IPinInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IPinInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Pin)(IPinInfo *This, IUnknown **ppUnk);HRESULT ( *get_ConnectedTo)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_ConnectionMediaType)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_FilterInfo)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *get_Name)(IPinInfo *This, BSTR *ppUnk);HRESULT ( *get_Direction)(IPinInfo *This, int *ppDirection);HRESULT ( *get_PinID)(IPinInfo *This, BSTR *strPinID);HRESULT ( *get_MediaTypes)(IPinInfo *This, IDispatch **ppUnk);HRESULT ( *Connect)(IPinInfo *This, IUnknown *pPin);HRESULT ( *ConnectDirect)(IPinInfo *This, IUnknown *pPin);HRESULT ( *ConnectWithType)(IPinInfo *This, IUnknown *pPin, IDispatch *pMediaType);HRESULT ( *Disconnect)(IPinInfo *This);HRESULT ( *Render)(IPinInfo *This);};
struct IAttachVtbl {HRESULT ( *QueryInterface)(IAttach *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAttach *This);ULONG ( *Release)(IAttach *This);HRESULT ( *GetLastError)(IAttach *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IAttach *This, ULONG ulFlags);HRESULT ( *GetProps)(IAttach *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IAttach *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IAttach *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IAttach *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IAttach *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IAttach *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IAttach *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IAttach *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IAttach *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);};
struct IEPGVtbl {HRESULT ( *QueryInterface)(IEPG *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IEPG *This);ULONG ( *Release)(IEPG *This);HRESULT ( *GetTypeInfoCount)(IEPG *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IEPG *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IEPG *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IEPG *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *SetActiveView)(IEPG *This, int iView, IUnknown *punk);HRESULT ( *GetActiveView)(IEPG *This, int *piView);HRESULT ( *JumpTo)(IEPG *This, DATE dt);HRESULT ( *TakeFocus)(IEPG *This);};
struct _CRYPT_PROVIDER_FUNCTIONS {DWORD cbStruct;PFN_CPD_MEM_ALLOC pfnAlloc;PFN_CPD_MEM_FREE pfnFree;PFN_CPD_ADD_STORE pfnAddStore2Chain;PFN_CPD_ADD_SGNR pfnAddSgnr2Chain;PFN_CPD_ADD_CERT pfnAddCert2Chain;PFN_CPD_ADD_PRIVDATA pfnAddPrivData2Chain;PFN_PROVIDER_INIT_CALL pfnInitialize;PFN_PROVIDER_OBJTRUST_CALL pfnObjectTrust;PFN_PROVIDER_SIGTRUST_CALL pfnSignatureTrust;PFN_PROVIDER_CERTTRUST_CALL pfnCertificateTrust;PFN_PROVIDER_FINALPOLICY_CALL pfnFinalPolicy;PFN_PROVIDER_CERTCHKPOLICY_CALL pfnCertCheckPolicy;PFN_PROVIDER_TESTFINALPOLICY_CALL pfnTestFinalPolicy;};
struct IAMExtendedErrorInfoVtbl {HRESULT ( *QueryInterface)(IAMExtendedErrorInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMExtendedErrorInfo *This);ULONG ( *Release)(IAMExtendedErrorInfo *This);HRESULT ( *GetTypeInfoCount)(IAMExtendedErrorInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMExtendedErrorInfo *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMExtendedErrorInfo *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMExtendedErrorInfo *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_HasError)(IAMExtendedErrorInfo *This, VARIANT_BOOL *pHasError);HRESULT ( *get_ErrorDescription)(IAMExtendedErrorInfo *This, BSTR *pbstrErrorDescription);HRESULT ( *get_ErrorCode)(IAMExtendedErrorInfo *This, int *pErrorCode);};
struct tagOLEUIPASTESPECIALA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;LPDATAOBJECT lpSrcDataObj;LPOLEUIPASTEENTRYA arrPasteEntries;int cPasteEntries;UINT *arrLinkTypes;int cLinkTypes;UINT cClsidExclude;LPCLSID lpClsidExclude;int nSelectedIndex;BOOL fLink;HGLOBAL hMetaPict;SIZEL sizel;};
struct tagOLEUIPASTESPECIALW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;LPDATAOBJECT lpSrcDataObj;LPOLEUIPASTEENTRYW arrPasteEntries;int cPasteEntries;UINT *arrLinkTypes;int cLinkTypes;UINT cClsidExclude;LPCLSID lpClsidExclude;int nSelectedIndex;BOOL fLink;HGLOBAL hMetaPict;SIZEL sizel;};
struct IAMNetShowConfigVtbl {HRESULT ( *QueryInterface)(IAMNetShowConfig *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMNetShowConfig *This);ULONG ( *Release)(IAMNetShowConfig *This);HRESULT ( *GetTypeInfoCount)(IAMNetShowConfig *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetShowConfig *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMNetShowConfig *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMNetShowConfig *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_BufferingTime)(IAMNetShowConfig *This, double *pBufferingTime);HRESULT ( *put_BufferingTime)(IAMNetShowConfig *This, double BufferingTime);HRESULT ( *get_UseFixedUDPPort)(IAMNetShowConfig *This, VARIANT_BOOL *pUseFixedUDPPort);HRESULT ( *put_UseFixedUDPPort)(IAMNetShowConfig *This, VARIANT_BOOL UseFixedUDPPort);HRESULT ( *get_FixedUDPPort)(IAMNetShowConfig *This, int *pFixedUDPPort);HRESULT ( *put_FixedUDPPort)(IAMNetShowConfig *This, int FixedUDPPort);HRESULT ( *get_UseHTTPProxy)(IAMNetShowConfig *This, VARIANT_BOOL *pUseHTTPProxy);HRESULT ( *put_UseHTTPProxy)(IAMNetShowConfig *This, VARIANT_BOOL UseHTTPProxy);HRESULT ( *get_EnableAutoProxy)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableAutoProxy);HRESULT ( *put_EnableAutoProxy)(IAMNetShowConfig *This, VARIANT_BOOL EnableAutoProxy);HRESULT ( *get_HTTPProxyHost)(IAMNetShowConfig *This, BSTR *pbstrHTTPProxyHost);HRESULT ( *put_HTTPProxyHost)(IAMNetShowConfig *This, BSTR bstrHTTPProxyHost);HRESULT ( *get_HTTPProxyPort)(IAMNetShowConfig *This, int *pHTTPProxyPort);HRESULT ( *put_HTTPProxyPort)(IAMNetShowConfig *This, int HTTPProxyPort);HRESULT ( *get_EnableMulticast)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableMulticast);HRESULT ( *put_EnableMulticast)(IAMNetShowConfig *This, VARIANT_BOOL EnableMulticast);HRESULT ( *get_EnableUDP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableUDP);HRESULT ( *put_EnableUDP)(IAMNetShowConfig *This, VARIANT_BOOL EnableUDP);HRESULT ( *get_EnableTCP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableTCP);HRESULT ( *put_EnableTCP)(IAMNetShowConfig *This, VARIANT_BOOL EnableTCP);HRESULT ( *get_EnableHTTP)(IAMNetShowConfig *This, VARIANT_BOOL *pEnableHTTP);HRESULT ( *put_EnableHTTP)(IAMNetShowConfig *This, VARIANT_BOOL EnableHTTP);};
struct IBPCDeviceBaseVtbl {HRESULT ( *QueryInterface)(IBPCDeviceBase *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCDeviceBase *This);ULONG ( *Release)(IBPCDeviceBase *This);HRESULT ( *GetTypeInfoCount)(IBPCDeviceBase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCDeviceBase *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCDeviceBase *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCDeviceBase *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Name)(IBPCDeviceBase *This, BSTR *Name);HRESULT ( *get_HasFilename)(IBPCDeviceBase *This, VARIANT_BOOL *HasFilename);HRESULT ( *get_HasCA)(IBPCDeviceBase *This, VARIANT_BOOL *HasCA);HRESULT ( *get_IsInput)(IBPCDeviceBase *This, VARIANT_BOOL *IsInput);HRESULT ( *get_IsOutput)(IBPCDeviceBase *This, VARIANT_BOOL *IsOutput);HRESULT ( *get_HasChannel)(IBPCDeviceBase *This, VARIANT_BOOL *HasChannel);HRESULT ( *get_Status)(IBPCDeviceBase *This, int *Status);HRESULT ( *get_ProdName)(IBPCDeviceBase *This, BSTR *ProdName);HRESULT ( *get_FileName)(IBPCDeviceBase *This, BSTR *FileName);HRESULT ( *put_FileName)(IBPCDeviceBase *This, BSTR FileName);HRESULT ( *get_Channel)(IBPCDeviceBase *This, int *Channel);HRESULT ( *put_Channel)(IBPCDeviceBase *This, int Channel);HRESULT ( *get_ImageSourceWidth)(IBPCDeviceBase *This, int *x);HRESULT ( *get_ImageSourceHeight)(IBPCDeviceBase *This, int *y);HRESULT ( *get_CurrentState)(IBPCDeviceBase *This, int *CurrentState);HRESULT ( *get_CurrentPosition)(IBPCDeviceBase *This, double *dPos);HRESULT ( *put_CurrentPosition)(IBPCDeviceBase *This, double dPos);HRESULT ( *get_Duration)(IBPCDeviceBase *This, double *dPos);HRESULT ( *get_PrerollTime)(IBPCDeviceBase *This, double *dPos);HRESULT ( *put_PrerollTime)(IBPCDeviceBase *This, double dPos);HRESULT ( *get_Rate)(IBPCDeviceBase *This, double *dPos);HRESULT ( *put_Rate)(IBPCDeviceBase *This, double dPos);HRESULT ( *get_CountryCode)(IBPCDeviceBase *This, int *lcc);HRESULT ( *put_CountryCode)(IBPCDeviceBase *This, int lcc);HRESULT ( *get_VideoFrequency)(IBPCDeviceBase *This, int *lcc);HRESULT ( *get_AudioFrequency)(IBPCDeviceBase *This, int *lcc);HRESULT ( *get_DefaultVideoType)(IBPCDeviceBase *This, int *lcc);HRESULT ( *put_DefaultVideoType)(IBPCDeviceBase *This, int lcc);HRESULT ( *get_DefaultAudioType)(IBPCDeviceBase *This, int *lcc);HRESULT ( *put_DefaultAudioType)(IBPCDeviceBase *This, int lcc);HRESULT ( *get_VideoSubchannel)(IBPCDeviceBase *This, int *lcc);HRESULT ( *put_VideoSubchannel)(IBPCDeviceBase *This, int lcc);HRESULT ( *get_AudioSubchannel)(IBPCDeviceBase *This, int *lcc);HRESULT ( *put_AudioSubchannel)(IBPCDeviceBase *This, int lcc);HRESULT ( *put_Volume)(IBPCDeviceBase *This, int lVol);HRESULT ( *get_Volume)(IBPCDeviceBase *This, int *lVol);HRESULT ( *put_Balance)(IBPCDeviceBase *This, int lBal);HRESULT ( *get_Balance)(IBPCDeviceBase *This, int *lBal);HRESULT ( *put_Power)(IBPCDeviceBase *This, VARIANT_BOOL bPower);HRESULT ( *get_Power)(IBPCDeviceBase *This, VARIANT_BOOL *bPower);HRESULT ( *put_OverScan)(IBPCDeviceBase *This, int lPercent);HRESULT ( *get_OverScan)(IBPCDeviceBase *This, int *plPercent);HRESULT ( *get_ProviderRating)(IBPCDeviceBase *This, int *pRating);HRESULT ( *get_ProviderStatus)(IBPCDeviceBase *This, VARIANT_BOOL *pStatus);HRESULT ( *get_ProviderEPGMask)(IBPCDeviceBase *This, int *pMask);HRESULT ( *get_HistoryItems)(IBPCDeviceBase *This, IBPCHistoryItemsCollection **ppHistoryItem);HRESULT ( *get_EmailMessages)(IBPCDeviceBase *This, IBPCEmailMessagesCollection **ppEmailMsg);HRESULT ( *get_UserName)(IBPCDeviceBase *This, BSTR *pUserName);HRESULT ( *put_UserName)(IBPCDeviceBase *This, BSTR UserName);HRESULT ( *get_UserArea)(IBPCDeviceBase *This, BSTR *pUserArea);HRESULT ( *put_UserArea)(IBPCDeviceBase *This, BSTR UserArea);HRESULT ( *get_ItemDetails)(IBPCDeviceBase *This, int Priority, IBPCPurchase *pInDetails, IBPCPurchase **ppOutDetails);HRESULT ( *Run)(IBPCDeviceBase *This);HRESULT ( *Pause)(IBPCDeviceBase *This);HRESULT ( *Stop)(IBPCDeviceBase *This);HRESULT ( *Refresh)(IBPCDeviceBase *This);HRESULT ( *ChannelAvailable)(IBPCDeviceBase *This, int nChannel, int *SignalStrength, VARIANT_BOOL *fSignalPresent);HRESULT ( *ResetProviderSystem)(IBPCDeviceBase *This);HRESULT ( *BuyItem)(IBPCDeviceBase *This, int Priority, IBPCPurchase *pInDetails, IBPCPurchase **ppOutDetails);HRESULT ( *CancelItem)(IBPCDeviceBase *This, IBPCPurchase *pInDetails, IBPCPurchase **ppOutDetails);HRESULT ( *DisplayConfigDialog)(IBPCDeviceBase *This);HRESULT ( *HandleCardChaining)(IBPCDeviceBase *This, VARIANT_BOOL fOK);};
struct IMediaControlVtbl {HRESULT ( *QueryInterface)(IMediaControl *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMediaControl *This);ULONG ( *Release)(IMediaControl *This);HRESULT ( *GetTypeInfoCount)(IMediaControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaControl *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IMediaControl *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IMediaControl *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *Run)(IMediaControl *This);HRESULT ( *Pause)(IMediaControl *This);HRESULT ( *Stop)(IMediaControl *This);HRESULT ( *GetState)(IMediaControl *This, int msTimeout, OAFilterState *pfs);HRESULT ( *RenderFile)(IMediaControl *This, BSTR strFilename);HRESULT ( *AddSourceFilter)(IMediaControl *This, BSTR strFilename, IDispatch **ppUnk);HRESULT ( *get_FilterCollection)(IMediaControl *This, IDispatch **ppUnk);HRESULT ( *get_RegFilterCollection)(IMediaControl *This, IDispatch **ppUnk);HRESULT ( *StopWhenReady)(IMediaControl *This);};
struct IMediaEventExVtbl {HRESULT ( *QueryInterface)(IMediaEventEx *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMediaEventEx *This);ULONG ( *Release)(IMediaEventEx *This);HRESULT ( *GetTypeInfoCount)(IMediaEventEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMediaEventEx *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IMediaEventEx *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IMediaEventEx *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *GetEventHandle)(IMediaEventEx *This, OAEVENT *hEvent);HRESULT ( *GetEvent)(IMediaEventEx *This, int *lEventCode, int *lParam1, int *lParam2, int msTimeout);HRESULT ( *WaitForCompletion)(IMediaEventEx *This, int msTimeout, int *pEvCode);HRESULT ( *CancelDefaultHandling)(IMediaEventEx *This, int lEvCode);HRESULT ( *RestoreDefaultHandling)(IMediaEventEx *This, int lEvCode);HRESULT ( *FreeEventParams)(IMediaEventEx *This, int lEvCode, int lParam1, int lParam2);HRESULT ( *SetNotifyWindow)(IMediaEventEx *This, OAHWND hwnd, int lMsg, int lInstanceData);HRESULT ( *SetNotifyFlags)(IMediaEventEx *This, int lNoNotifyFlags);HRESULT ( *GetNotifyFlags)(IMediaEventEx *This, int *lplNoNotifyFlags);};
struct IVideoWindowVtbl {HRESULT ( *QueryInterface)(IVideoWindow *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IVideoWindow *This);ULONG ( *Release)(IVideoWindow *This);HRESULT ( *GetTypeInfoCount)(IVideoWindow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVideoWindow *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IVideoWindow *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IVideoWindow *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *put_Caption)(IVideoWindow *This, BSTR strCaption);HRESULT ( *get_Caption)(IVideoWindow *This, BSTR *strCaption);HRESULT ( *put_WindowStyle)(IVideoWindow *This, int WindowStyle);HRESULT ( *get_WindowStyle)(IVideoWindow *This, int *WindowStyle);HRESULT ( *put_WindowStyleEx)(IVideoWindow *This, int WindowStyleEx);HRESULT ( *get_WindowStyleEx)(IVideoWindow *This, int *WindowStyleEx);HRESULT ( *put_AutoShow)(IVideoWindow *This, int AutoShow);HRESULT ( *get_AutoShow)(IVideoWindow *This, int *AutoShow);HRESULT ( *put_WindowState)(IVideoWindow *This, int WindowState);HRESULT ( *get_WindowState)(IVideoWindow *This, int *WindowState);HRESULT ( *put_BackgroundPalette)(IVideoWindow *This, int BackgroundPalette);HRESULT ( *get_BackgroundPalette)(IVideoWindow *This, int *pBackgroundPalette);HRESULT ( *put_Visible)(IVideoWindow *This, int Visible);HRESULT ( *get_Visible)(IVideoWindow *This, int *pVisible);HRESULT ( *put_Left)(IVideoWindow *This, int Left);HRESULT ( *get_Left)(IVideoWindow *This, int *pLeft);HRESULT ( *put_Width)(IVideoWindow *This, int Width);HRESULT ( *get_Width)(IVideoWindow *This, int *pWidth);HRESULT ( *put_Top)(IVideoWindow *This, int Top);HRESULT ( *get_Top)(IVideoWindow *This, int *pTop);HRESULT ( *put_Height)(IVideoWindow *This, int Height);HRESULT ( *get_Height)(IVideoWindow *This, int *pHeight);HRESULT ( *put_Owner)(IVideoWindow *This, OAHWND Owner);HRESULT ( *get_Owner)(IVideoWindow *This, OAHWND *Owner);HRESULT ( *put_MessageDrain)(IVideoWindow *This, OAHWND Drain);HRESULT ( *get_MessageDrain)(IVideoWindow *This, OAHWND *Drain);HRESULT ( *get_BorderColor)(IVideoWindow *This, int *Color);HRESULT ( *put_BorderColor)(IVideoWindow *This, int Color);HRESULT ( *get_FullScreenMode)(IVideoWindow *This, int *FullScreenMode);HRESULT ( *put_FullScreenMode)(IVideoWindow *This, int FullScreenMode);HRESULT ( *SetWindowForeground)(IVideoWindow *This, int Focus);HRESULT ( *NotifyOwnerMessage)(IVideoWindow *This, int hwnd, int uMsg, int wParam, int lParam);HRESULT ( *SetWindowPosition)(IVideoWindow *This, int Left, int Top, int Width, int Height);HRESULT ( *GetWindowPosition)(IVideoWindow *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *GetMinIdealImageSize)(IVideoWindow *This, int *pWidth, int *pHeight);HRESULT ( *GetMaxIdealImageSize)(IVideoWindow *This, int *pWidth, int *pHeight);HRESULT ( *GetRestorePosition)(IVideoWindow *This, int *pLeft, int *pTop, int *pWidth, int *pHeight);HRESULT ( *HideCursor)(IVideoWindow *This, int HideCursor);HRESULT ( *IsCursorHidden)(IVideoWindow *This, int *CursorHidden);};
struct tagOLEUICONVERTA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;CLSID clsid;CLSID clsidConvertDefault;CLSID clsidActivateDefault;CLSID clsidNew;DWORD dvAspect;WORD wFormat;BOOL fIsLinkedObject;HGLOBAL hMetaPict;LPSTR lpszUserType;BOOL fObjectsIconChanged;LPSTR lpszDefLabel;UINT cClsidExclude;LPCLSID lpClsidExclude;};
struct tagOLEUICONVERTW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;CLSID clsid;CLSID clsidConvertDefault;CLSID clsidActivateDefault;CLSID clsidNew;DWORD dvAspect;WORD wFormat;BOOL fIsLinkedObject;HGLOBAL hMetaPict;LPWSTR lpszUserType;BOOL fObjectsIconChanged;LPWSTR lpszDefLabel;UINT cClsidExclude;LPCLSID lpClsidExclude;};
struct IBPCDevicesVtbl {HRESULT ( *QueryInterface)(IBPCDevices *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCDevices *This);ULONG ( *Release)(IBPCDevices *This);HRESULT ( *GetTypeInfoCount)(IBPCDevices *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCDevices *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCDevices *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCDevices *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Count)(IBPCDevices *This, int *lCount);HRESULT ( *get__NewEnum)(IBPCDevices *This, IUnknown **pD);HRESULT ( *put_HWnd)(IBPCDevices *This, int hwnd);HRESULT ( *put_LCID)(IBPCDevices *This, int lcid);HRESULT ( *put_Notify)(IBPCDevices *This, IBPCDeviceEvent *pDeviceEvents);HRESULT ( *get_ColorKey)(IBPCDevices *This, int *lcc);HRESULT ( *put_ColorKey)(IBPCDevices *This, int lcc);HRESULT ( *get_Priority)(IBPCDevices *This, int *lcc);HRESULT ( *put_Priority)(IBPCDevices *This, int lcc);HRESULT ( *get_Input)(IBPCDevices *This, IBPCDeviceBase **ppInput);HRESULT ( *put_Input)(IBPCDevices *This, IBPCDeviceBase *pInput);HRESULT ( *get_Output)(IBPCDevices *This, IBPCDeviceBase **ppOutput);HRESULT ( *put_Output)(IBPCDevices *This, IBPCDeviceBase *pOutput);HRESULT ( *get_VideoOn)(IBPCDevices *This, VARIANT_BOOL *VideoOn);HRESULT ( *put_VideoOn)(IBPCDevices *This, VARIANT_BOOL VideoOn);HRESULT ( *Item)(IBPCDevices *This, VARIANT v, IBPCDeviceBase **pDB);HRESULT ( *Tune)(IBPCDevices *This, int lTuningSpace, int Channel, int VideoSubchannel, int AudioSubchannel);HRESULT ( *Login)(IBPCDevices *This, BSTR UserName, BSTR Password);HRESULT ( *Logout)(IBPCDevices *This);HRESULT ( *Open)(IBPCDevices *This, BSTR FileName);HRESULT ( *TSDeviceCount)(IBPCDevices *This, int lTuningSpace, int *count);HRESULT ( *AutoScan)(IBPCDevices *This, int *SignalStrength);};
struct IABLogonVtbl {HRESULT ( *QueryInterface)(IABLogon *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IABLogon *This);ULONG ( *Release)(IABLogon *This);HRESULT ( *GetLastError)(IABLogon *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *Logoff)(IABLogon *This, ULONG ulFlags);HRESULT ( *OpenEntry)(IABLogon *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *CompareEntryIDs)(IABLogon *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *Advise)(IABLogon *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IABLogon *This, ULONG ulConnection);HRESULT ( *OpenStatusEntry)(IABLogon *This, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPMAPISTATUS *lppEntry);HRESULT ( *OpenTemplateID)(IABLogon *This, ULONG cbTemplateID, LPENTRYID lpTemplateID, ULONG ulTemplateFlags, LPMAPIPROP lpMAPIPropData, LPCIID lpInterface, LPMAPIPROP *lppMAPIPropNew, LPMAPIPROP lpMAPIPropSibling);HRESULT ( *GetOneOffTable)(IABLogon *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *PrepareRecips)(IABLogon *This, ULONG ulFlags, LPSPropTagArray lpPropTagArray, LPADRLIST lpRecipList);};
struct IWPObjVtbl {HRESULT ( *QueryInterface)(IWPObj *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IWPObj *This);ULONG ( *Release)(IWPObj *This);HRESULT ( *GetTypeInfoCount)(IWPObj *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWPObj *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IWPObj *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IWPObj *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *Application)(IWPObj *This, IWPObj **retval);HRESULT ( *WpPostFile)(IWPObj *This, int hwnd, BSTR lppszLocalPaths, int *lpcbSiteName, BSTR *lpszSiteName, int *lpcbURL, BSTR *lpszURL, int dwFlag, int *lpRetCode);};
struct IAMNetShowExPropsVtbl {HRESULT ( *QueryInterface)(IAMNetShowExProps *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAMNetShowExProps *This);ULONG ( *Release)(IAMNetShowExProps *This);HRESULT ( *GetTypeInfoCount)(IAMNetShowExProps *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAMNetShowExProps *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IAMNetShowExProps *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IAMNetShowExProps *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_SourceProtocol)(IAMNetShowExProps *This, int *pSourceProtocol);HRESULT ( *get_Bandwidth)(IAMNetShowExProps *This, int *pBandwidth);HRESULT ( *get_ErrorCorrection)(IAMNetShowExProps *This, BSTR *pbstrErrorCorrection);HRESULT ( *get_CodecCount)(IAMNetShowExProps *This, int *pCodecCount);HRESULT ( *GetCodecInstalled)(IAMNetShowExProps *This, int CodecNum, VARIANT_BOOL *pCodecInstalled);HRESULT ( *GetCodecDescription)(IAMNetShowExProps *This, int CodecNum, BSTR *pbstrCodecDescription);HRESULT ( *GetCodecURL)(IAMNetShowExProps *This, int CodecNum, BSTR *pbstrCodecURL);HRESULT ( *get_CreationDate)(IAMNetShowExProps *This, DATE *pCreationDate);HRESULT ( *get_SourceLink)(IAMNetShowExProps *This, BSTR *pbstrSourceLink);};
struct IBPCEmailMessageVtbl {HRESULT ( *QueryInterface)(IBPCEmailMessage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCEmailMessage *This);ULONG ( *Release)(IBPCEmailMessage *This);HRESULT ( *GetTypeInfoCount)(IBPCEmailMessage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCEmailMessage *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCEmailMessage *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCEmailMessage *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_MsgId)(IBPCEmailMessage *This, int *MsgId);HRESULT ( *get_UserId)(IBPCEmailMessage *This, int *UserId);HRESULT ( *get_IsRead)(IBPCEmailMessage *This, VARIANT_BOOL *HasBeenRead);HRESULT ( *get_Received)(IBPCEmailMessage *This, DATE *Received);HRESULT ( *get_Expires)(IBPCEmailMessage *This, DATE *Expires);HRESULT ( *get_Title)(IBPCEmailMessage *This, BSTR *Text);HRESULT ( *get_Msg)(IBPCEmailMessage *This, BSTR *Text);};
struct IActiveDesktopVtbl {HRESULT ( *QueryInterface)(IActiveDesktop *This,  IID * riid, void **ppv);ULONG ( *AddRef)(IActiveDesktop *This);ULONG ( *Release)(IActiveDesktop *This);HRESULT ( *ApplyChanges)(IActiveDesktop *This, DWORD dwFlags);HRESULT ( *GetWallpaper)(IActiveDesktop *This, LPWSTR pwszWallpaper, UINT cchWallpaper, DWORD dwReserved);HRESULT ( *SetWallpaper)(IActiveDesktop *This, LPCWSTR pwszWallpaper, DWORD dwReserved);HRESULT ( *GetWallpaperOptions)(IActiveDesktop *This, LPWALLPAPEROPT pwpo, DWORD dwReserved);HRESULT ( *SetWallpaperOptions)(IActiveDesktop *This, LPCWALLPAPEROPT pwpo, DWORD dwReserved);HRESULT ( *GetPattern)(IActiveDesktop *This, LPWSTR pwszPattern, UINT cchPattern, DWORD dwReserved);HRESULT ( *SetPattern)(IActiveDesktop *This, LPCWSTR pwszPattern, DWORD dwReserved);HRESULT ( *GetDesktopItemOptions)(IActiveDesktop *This, LPCOMPONENTSOPT pco, DWORD dwReserved);HRESULT ( *SetDesktopItemOptions)(IActiveDesktop *This, LPCCOMPONENTSOPT pco, DWORD dwReserved);HRESULT ( *AddDesktopItem)(IActiveDesktop *This, LPCCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *AddDesktopItemWithUI)(IActiveDesktop *This, HWND hwnd, LPCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *ModifyDesktopItem)(IActiveDesktop *This, LPCCOMPONENT pcomp, DWORD dwFlags);HRESULT ( *RemoveDesktopItem)(IActiveDesktop *This, LPCCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *GetDesktopItemCount)(IActiveDesktop *This, LPINT lpiCount, DWORD dwReserved);HRESULT ( *GetDesktopItem)(IActiveDesktop *This, int nComponent, LPCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *GetDesktopItemByID)(IActiveDesktop *This, DWORD dwID, LPCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *GenerateDesktopItemHtml)(IActiveDesktop *This, LPCWSTR pwszFileName, LPCOMPONENT pcomp, DWORD dwReserved);HRESULT ( *AddUrl)(IActiveDesktop *This, HWND hwnd, LPCWSTR pszSource, LPCOMPONENT pcomp, DWORD dwFlags);HRESULT ( *GetDesktopItemBySource)(IActiveDesktop *This, LPCWSTR pwszSource, LPCOMPONENT pcomp, DWORD dwReserved);};
struct IBPCPurchaseVtbl {HRESULT ( *QueryInterface)(IBPCPurchase *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCPurchase *This);ULONG ( *Release)(IBPCPurchase *This);HRESULT ( *GetTypeInfoCount)(IBPCPurchase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCPurchase *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCPurchase *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCPurchase *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Channel)(IBPCPurchase *This, short *Channel);HRESULT ( *put_Channel)(IBPCPurchase *This, short Channel);HRESULT ( *get_StartTime)(IBPCPurchase *This, DATE *StartTime);HRESULT ( *put_StartTime)(IBPCPurchase *This, DATE StartTime);HRESULT ( *get_Expiry)(IBPCPurchase *This, DATE *Expiry);HRESULT ( *put_Expiry)(IBPCPurchase *This, DATE Expiry);HRESULT ( *get_Duration)(IBPCPurchase *This, int *Duration);HRESULT ( *put_Duration)(IBPCPurchase *This, int Duration);HRESULT ( *get_ItemID)(IBPCPurchase *This, int *ItemID);HRESULT ( *put_ItemID)(IBPCPurchase *This, int ItemID);HRESULT ( *get_Location)(IBPCPurchase *This, int *Location);HRESULT ( *put_Location)(IBPCPurchase *This, int Location);HRESULT ( *get_UserId)(IBPCPurchase *This, int *UserId);HRESULT ( *put_UserId)(IBPCPurchase *This, int UserId);HRESULT ( *get_StorageId)(IBPCPurchase *This, int *StorageId);HRESULT ( *put_StorageId)(IBPCPurchase *This, int StorageId);HRESULT ( *get_Title)(IBPCPurchase *This, BSTR *Title);HRESULT ( *put_Title)(IBPCPurchase *This, BSTR Title);HRESULT ( *get_Rating)(IBPCPurchase *This, int *Rating);HRESULT ( *put_Rating)(IBPCPurchase *This, int Rating);HRESULT ( *get_Year)(IBPCPurchase *This, BSTR *Year);HRESULT ( *put_Year)(IBPCPurchase *This, BSTR Year);HRESULT ( *get_Description)(IBPCPurchase *This, BSTR *Description);HRESULT ( *put_Description)(IBPCPurchase *This, BSTR Description);HRESULT ( *get_ViewCost)(IBPCPurchase *This, CY *ViewCost);HRESULT ( *put_ViewCost)(IBPCPurchase *This, CY ViewCost);HRESULT ( *get_TapeCost)(IBPCPurchase *This, CY *TapeCost);HRESULT ( *put_TapeCost)(IBPCPurchase *This, CY TapeCost);HRESULT ( *get_Action)(IBPCPurchase *This, int *Action);HRESULT ( *put_Action)(IBPCPurchase *This, int Action);HRESULT ( *get_Status)(IBPCPurchase *This, int *Status);HRESULT ( *put_Status)(IBPCPurchase *This, int Status);HRESULT ( *get_Reason)(IBPCPurchase *This, int *Reason);HRESULT ( *put_Reason)(IBPCPurchase *This, int Reason);HRESULT ( *get_ReasonDesc)(IBPCPurchase *This, BSTR *ReasonDesc);HRESULT ( *put_ReasonDesc)(IBPCPurchase *This, BSTR ReasonDesc);HRESULT ( *get_ProviderBuffer)(IBPCPurchase *This, BSTR *Buffer);};
struct IMAPIStatusVtbl {HRESULT ( *QueryInterface)(IMAPIStatus *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIStatus *This);ULONG ( *Release)(IMAPIStatus *This);HRESULT ( *GetLastError)(IMAPIStatus *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIStatus *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIStatus *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIStatus *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIStatus *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIStatus *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIStatus *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIStatus *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIStatus *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIStatus *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIStatus *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *ValidateState)(IMAPIStatus *This, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *SettingsDialog)(IMAPIStatus *This, ULONG ulUIParam, ULONG ulFlags);HRESULT ( *ChangePassword)(IMAPIStatus *This, LPTSTR lpOldPass, LPTSTR lpNewPass, ULONG ulFlags);HRESULT ( *FlushQueues)(IMAPIStatus *This, ULONG ulUIParam, ULONG cbTargetTransport, LPENTRYID lpTargetTransport, ULONG ulFlags);};
struct _WSPUPCALLTABLE {LPWPUCLOSEEVENT lpWPUCloseEvent;LPWPUCLOSESOCKETHANDLE lpWPUCloseSocketHandle;LPWPUCREATEEVENT lpWPUCreateEvent;LPWPUCREATESOCKETHANDLE lpWPUCreateSocketHandle;LPWPUFDISSET lpWPUFDIsSet;LPWPUGETPROVIDERPATH lpWPUGetProviderPath;LPWPUMODIFYIFSHANDLE lpWPUModifyIFSHandle;LPWPUPOSTMESSAGE lpWPUPostMessage;LPWPUQUERYBLOCKINGCALLBACK lpWPUQueryBlockingCallback;LPWPUQUERYSOCKETHANDLECONTEXT lpWPUQuerySocketHandleContext;LPWPUQUEUEAPC lpWPUQueueApc;LPWPURESETEVENT lpWPUResetEvent;LPWPUSETEVENT lpWPUSetEvent;LPWPUOPENCURRENTTHREAD lpWPUOpenCurrentThread;LPWPUCLOSETHREAD lpWPUCloseThread;};
struct IMessageVtbl {HRESULT ( *QueryInterface)(IMessage *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMessage *This);ULONG ( *Release)(IMessage *This);HRESULT ( *GetLastError)(IMessage *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMessage *This, ULONG ulFlags);HRESULT ( *GetProps)(IMessage *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMessage *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMessage *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMessage *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMessage *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMessage *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMessage *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMessage *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMessage *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetAttachmentTable)(IMessage *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenAttach)(IMessage *This, ULONG ulAttachmentNum, LPCIID lpInterface, ULONG ulFlags, LPATTACH *lppAttach);HRESULT ( *CreateAttach)(IMessage *This, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulAttachmentNum, LPATTACH *lppAttach);HRESULT ( *DeleteAttach)(IMessage *This, ULONG ulAttachmentNum, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *GetRecipientTable)(IMessage *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *ModifyRecipients)(IMessage *This, ULONG ulFlags, LPADRLIST lpMods);HRESULT ( *SubmitMessage)(IMessage *This, ULONG ulFlags);HRESULT ( *SetReadFlag)(IMessage *This, ULONG ulFlags);};
struct _WLX_DISPATCH_VERSION_1_1 {PWLX_USE_CTRL_ALT_DEL WlxUseCtrlAltDel;PWLX_SET_CONTEXT_POINTER WlxSetContextPointer;PWLX_SAS_NOTIFY WlxSasNotify;PWLX_SET_TIMEOUT WlxSetTimeout;PWLX_ASSIGN_SHELL_PROTECTION WlxAssignShellProtection;PWLX_MESSAGE_BOX WlxMessageBox;PWLX_DIALOG_BOX WlxDialogBox;PWLX_DIALOG_BOX_PARAM WlxDialogBoxParam;PWLX_DIALOG_BOX_INDIRECT WlxDialogBoxIndirect;PWLX_DIALOG_BOX_INDIRECT_PARAM WlxDialogBoxIndirectParam;PWLX_SWITCH_DESKTOP_TO_USER WlxSwitchDesktopToUser;PWLX_SWITCH_DESKTOP_TO_WINLOGON WlxSwitchDesktopToWinlogon;PWLX_CHANGE_PASSWORD_NOTIFY WlxChangePasswordNotify;PWLX_GET_SOURCE_DESKTOP WlxGetSourceDesktop;PWLX_SET_RETURN_DESKTOP WlxSetReturnDesktop;PWLX_CREATE_USER_DESKTOP WlxCreateUserDesktop;PWLX_CHANGE_PASSWORD_NOTIFY_EX WlxChangePasswordNotifyEx;};
struct IMAPIContainerVtbl {HRESULT ( *QueryInterface)(IMAPIContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIContainer *This);ULONG ( *Release)(IMAPIContainer *This);HRESULT ( *GetLastError)(IMAPIContainer *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIContainer *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIContainer *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIContainer *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIContainer *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIContainer *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIContainer *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIContainer *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIContainer *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIContainer *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IMAPIContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IMAPIContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IMAPIContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IMAPIContainer *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IMAPIContainer *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);};
struct IDvdInfoVtbl {HRESULT ( *QueryInterface)(IDvdInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDvdInfo *This);ULONG ( *Release)(IDvdInfo *This);HRESULT ( *GetCurrentDomain)(IDvdInfo *This, DVD_DOMAIN *pDomain);HRESULT ( *GetCurrentLocation)(IDvdInfo *This, DVD_PLAYBACK_LOCATION *pLocation);HRESULT ( *GetTotalTitleTime)(IDvdInfo *This, ULONG *pTotalTime);HRESULT ( *GetCurrentButton)(IDvdInfo *This, ULONG *pnButtonsAvailable, ULONG *pnCurrentButton);HRESULT ( *GetCurrentAngle)(IDvdInfo *This, ULONG *pnAnglesAvailable, ULONG *pnCurrentAngle);HRESULT ( *GetCurrentAudio)(IDvdInfo *This, ULONG *pnStreamsAvailable, ULONG *pnCurrentStream);HRESULT ( *GetCurrentSubpicture)(IDvdInfo *This, ULONG *pnStreamsAvailable, ULONG *pnCurrentStream, BOOL *pIsDisabled);HRESULT ( *GetCurrentUOPS)(IDvdInfo *This, VALID_UOP_SOMTHING_OR_OTHER *pUOP);HRESULT ( *GetAllSPRMs)(IDvdInfo *This, SPRMARRAY *pRegisterArray);HRESULT ( *GetAllGPRMs)(IDvdInfo *This, GPRMARRAY *pRegisterArray);HRESULT ( *GetAudioLanguage)(IDvdInfo *This, ULONG nStream, LCID *pLanguage);HRESULT ( *GetSubpictureLanguage)(IDvdInfo *This, ULONG nStream, LCID *pLanguage);HRESULT ( *GetTitleAttributes)(IDvdInfo *This, ULONG nTitle, DVD_ATR *pATR);HRESULT ( *GetVMGAttributes)(IDvdInfo *This, DVD_ATR *pATR);HRESULT ( *GetCurrentVideoAttributes)(IDvdInfo *This, DVD_VideoATR *pATR);HRESULT ( *GetCurrentAudioAttributes)(IDvdInfo *This, DVD_AudioATR *pATR);HRESULT ( *GetCurrentSubpictureAttributes)(IDvdInfo *This, DVD_SubpictureATR *pATR);HRESULT ( *GetCurrentVolumeInfo)(IDvdInfo *This, ULONG *pNumOfVol, ULONG *pThisVolNum, DVD_DISC_SIDE *pSide, ULONG *pNumOfTitles);HRESULT ( *GetDVDTextInfo)(IDvdInfo *This, BYTE *pTextManager, ULONG cbBufSize, ULONG *pcbActualSize);HRESULT ( *GetPlayerParentalLevel)(IDvdInfo *This, ULONG *pParentalLevel, ULONG *pCountryCode);HRESULT ( *GetNumberOfChapters)(IDvdInfo *This, ULONG ulTitle, ULONG *pNumberOfChapters);HRESULT ( *GetTitleParentalLevels)(IDvdInfo *This, ULONG ulTitle, ULONG *pParentalLevels);HRESULT ( *GetRoot)(IDvdInfo *This, LPTSTR pRoot, ULONG cbBufSize, ULONG *pcbActualSize);};
struct IBPCVidVtbl {HRESULT ( *QueryInterface)(IBPCVid *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IBPCVid *This);ULONG ( *Release)(IBPCVid *This);HRESULT ( *GetTypeInfoCount)(IBPCVid *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IBPCVid *This, UINT itinfo, LCID lcid, ITypeInfo **pptinfo);HRESULT ( *GetIDsOfNames)(IBPCVid *This,  IID * riid, OLECHAR **rgszNames, UINT cNames, LCID lcid, DISPID *rgdispid);HRESULT ( *Invoke)(IBPCVid *This, DISPID dispidMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pdispparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr);HRESULT ( *get_Power)(IBPCVid *This, VARIANT_BOOL *Power);HRESULT ( *put_Power)(IBPCVid *This, VARIANT_BOOL Power);HRESULT ( *get_StartTime)(IBPCVid *This, double *StartTime);HRESULT ( *put_StartTime)(IBPCVid *This, double StartTime);HRESULT ( *get_StopTime)(IBPCVid *This, double *StopTime);HRESULT ( *put_StopTime)(IBPCVid *This, double StopTime);HRESULT ( *get_VideoOn)(IBPCVid *This, VARIANT_BOOL *VideoOn);HRESULT ( *put_VideoOn)(IBPCVid *This, VARIANT_BOOL VideoOn);HRESULT ( *get_ClosedCaption)(IBPCVid *This, VARIANT_BOOL *ClosedCaption);HRESULT ( *put_ClosedCaption)(IBPCVid *This, VARIANT_BOOL ClosedCaption);HRESULT ( *get_Debug)(IBPCVid *This, VARIANT_BOOL *Debug);HRESULT ( *put_Debug)(IBPCVid *This, VARIANT_BOOL Debug);HRESULT ( *get_DeviceCount)(IBPCVid *This, int *DeviceCount);HRESULT ( *get_Input)(IBPCVid *This, IBPCDeviceBase **Input);HRESULT ( *put_Input)(IBPCVid *This, IBPCDeviceBase *Input);HRESULT ( *get_Output)(IBPCVid *This, IBPCDeviceBase **Output);HRESULT ( *put_Output)(IBPCVid *This, IBPCDeviceBase *Output);HRESULT ( *get_ColorKey)(IBPCVid *This, int *ColorKey);HRESULT ( *put_ColorKey)(IBPCVid *This, int ColorKey);HRESULT ( *get_FileName)(IBPCVid *This, BSTR *FileName);HRESULT ( *put_FileName)(IBPCVid *This, BSTR FileName);HRESULT ( *get_Priority)(IBPCVid *This, int *Priority);HRESULT ( *put_Priority)(IBPCVid *This, int Priority);HRESULT ( *get_Volume)(IBPCVid *This, int *Volume);HRESULT ( *put_Volume)(IBPCVid *This, int Volume);HRESULT ( *get_Balance)(IBPCVid *This, int *Balance);HRESULT ( *put_Balance)(IBPCVid *This, int Balance);HRESULT ( *get_ImageSourceHeight)(IBPCVid *This, int *ImageSourceHeight);HRESULT ( *get_ImageSourceWidth)(IBPCVid *This, int *ImageSourceWidth);HRESULT ( *get_MovieWindowSetting)(IBPCVid *This, short *MovieWindowSetting);HRESULT ( *put_MovieWindowSetting)(IBPCVid *This, short MovieWindowSetting);HRESULT ( *get_CurrentState)(IBPCVid *This, int *CurrentState);HRESULT ( *get_CurrentPosition)(IBPCVid *This, double *CurrentPosition);HRESULT ( *put_CurrentPosition)(IBPCVid *This, double CurrentPosition);HRESULT ( *get_Duration)(IBPCVid *This, double *Duration);HRESULT ( *get_PrerollTime)(IBPCVid *This, double *PrerollTime);HRESULT ( *put_PrerollTime)(IBPCVid *This, double PrerollTime);HRESULT ( *get_Rate)(IBPCVid *This, double *Rate);HRESULT ( *put_Rate)(IBPCVid *This, double Rate);HRESULT ( *get_LocaleID)(IBPCVid *This, int *LocaleID);HRESULT ( *put_LocaleID)(IBPCVid *This, int LocaleID);HRESULT ( *get_Font)(IBPCVid *This, IFontDisp **Font);HRESULT ( *put_Font)(IBPCVid *This, IFontDisp *Font);HRESULT ( *get_DisplayMode)(IBPCVid *This, short *DisplayMode);HRESULT ( *put_DisplayMode)(IBPCVid *This, short DisplayMode);HRESULT ( *get_HWnd)(IBPCVid *This, OLE_HANDLE *HWnd);HRESULT ( *get_Devices)(IBPCVid *This, IBPCDevices **DeviceEnumerator);HRESULT ( *Run)(IBPCVid *This);HRESULT ( *Pause)(IBPCVid *This);HRESULT ( *Stop)(IBPCVid *This);HRESULT ( *Close)(IBPCVid *This);HRESULT ( *Open)(IBPCVid *This, BSTR FileName);HRESULT ( *Login)(IBPCVid *This, BSTR UserName, BSTR Password);HRESULT ( *Logout)(IBPCVid *This);HRESULT ( *Tune)(IBPCVid *This, int lTuningSpace, int Channel, int VideoSubchannel, int AudioSubchannel);HRESULT ( *TSDeviceCount)(IBPCVid *This, int lTuningSpace, int *count);HRESULT ( *Refresh)(IBPCVid *This);HRESULT ( *AutoScan)(IBPCVid *This, int *SignalStrength);HRESULT ( *AboutBox)(IBPCVid *This);};
struct tagOLEUIINSERTOBJECTA {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCSTR lpszTemplate;HRSRC hResource;CLSID clsid;LPSTR lpszFile;UINT cchFile;UINT cClsidExclude;LPCLSID lpClsidExclude;IID iid;DWORD oleRender;LPFORMATETC lpFormatEtc;LPOLECLIENTSITE lpIOleClientSite;LPSTORAGE lpIStorage;LPVOID *ppvObj;SCODE sc;HGLOBAL hMetaPict;};
struct tagOLEUIINSERTOBJECTW {DWORD cbStruct;DWORD dwFlags;HWND hWndOwner;LPCWSTR lpszCaption;LPFNOLEUIHOOK lpfnHook;LPARAM lCustData;HINSTANCE hInstance;LPCWSTR lpszTemplate;HRSRC hResource;CLSID clsid;LPWSTR lpszFile;UINT cchFile;UINT cClsidExclude;LPCLSID lpClsidExclude;IID iid;DWORD oleRender;LPFORMATETC lpFormatEtc;LPOLECLIENTSITE lpIOleClientSite;LPSTORAGE lpIStorage;LPVOID *ppvObj;SCODE sc;HGLOBAL hMetaPict;};
struct IMAPIFormInfoVtbl {HRESULT ( *QueryInterface)(IMAPIFormInfo *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFormInfo *This);ULONG ( *Release)(IMAPIFormInfo *This);HRESULT ( *GetLastError)(IMAPIFormInfo *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIFormInfo *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIFormInfo *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIFormInfo *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIFormInfo *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIFormInfo *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIFormInfo *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIFormInfo *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIFormInfo *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIFormInfo *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIFormInfo *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *CalcFormPropSet)(IMAPIFormInfo *This, ULONG ulFlags, LPMAPIFORMPROPARRAY *ppFormPropArray);HRESULT ( *CalcVerbSet)(IMAPIFormInfo *This, ULONG ulFlags, LPMAPIVERBARRAY *ppMAPIVerbArray);HRESULT ( *MakeIconFromBinary)(IMAPIFormInfo *This, ULONG nPropID, HICON *phicon);HRESULT ( *SaveForm)(IMAPIFormInfo *This, LPCTSTR szFileName);HRESULT ( *OpenFormContainer)(IMAPIFormInfo *This, LPMAPIFORMCONTAINER *ppformcontainer);};
struct IMAPIFormMgrVtbl {HRESULT ( *QueryInterface)(IMAPIFormMgr *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFormMgr *This);ULONG ( *Release)(IMAPIFormMgr *This);HRESULT ( *GetLastError)(IMAPIFormMgr *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *LoadForm)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPCSTR lpszMessageClass, ULONG ulMessageStatus, ULONG ulMessageFlags, LPMAPIFOLDER pFolderFocus, LPMAPIMESSAGESITE pMessageSite, LPMESSAGE pmsg, LPMAPIVIEWCONTEXT pViewContext,  IID * riid, LPVOID *ppvObj);HRESULT ( *ResolveMessageClass)(IMAPIFormMgr *This, LPCSTR szMsgClass, ULONG ulFlags, LPMAPIFOLDER pFolderFocus, LPMAPIFORMINFO *ppResult);HRESULT ( *ResolveMultipleMessageClasses)(IMAPIFormMgr *This, LPSMESSAGECLASSARRAY pMsgClasses, ULONG ulFlags, LPMAPIFOLDER pFolderFocus, LPSMAPIFORMINFOARRAY *pfrminfoarray);HRESULT ( *CalcFormPropSet)(IMAPIFormMgr *This, LPSMAPIFORMINFOARRAY pfrminfoarray, ULONG ulFlags, LPMAPIFORMPROPARRAY *ppResults);HRESULT ( *CreateForm)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPMAPIFORMINFO pfrminfoToActivate,  IID * refiidToAsk, LPVOID *ppvObj);HRESULT ( *SelectForm)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPCTSTR pszTitle, LPMAPIFOLDER pfld, LPMAPIFORMINFO *ppfrminfoReturned);HRESULT ( *SelectMultipleForms)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPCTSTR pszTitle, LPMAPIFOLDER pfld, LPSMAPIFORMINFOARRAY pfrminfoarray, LPSMAPIFORMINFOARRAY *ppfrminfoarray);HRESULT ( *SelectFormContainer)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPMAPIFORMCONTAINER *lppfcnt);HRESULT ( *OpenFormContainer)(IMAPIFormMgr *This, HFRMREG hfrmreg, LPUNKNOWN lpunk, LPMAPIFORMCONTAINER *lppfcnt);HRESULT ( *PrepareForm)(IMAPIFormMgr *This, ULONG ulUIParam, ULONG ulFlags, LPMAPIFORMINFO pfrminfo);HRESULT ( *IsInConflict)(IMAPIFormMgr *This, ULONG ulMessageFlags, ULONG ulMessageStatus, LPCSTR szMessageClass, LPMAPIFOLDER pFolderFocus);};
struct IMsgStoreVtbl {HRESULT ( *QueryInterface)(IMsgStore *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMsgStore *This);ULONG ( *Release)(IMsgStore *This);HRESULT ( *GetLastError)(IMsgStore *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMsgStore *This, ULONG ulFlags);HRESULT ( *GetProps)(IMsgStore *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMsgStore *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMsgStore *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMsgStore *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMsgStore *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMsgStore *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMsgStore *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMsgStore *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMsgStore *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *Advise)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMsgStore *This, ULONG ulConnection);HRESULT ( *CompareEntryIDs)(IMsgStore *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *OpenEntry)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetReceiveFolder)(IMsgStore *This, LPTSTR lpszMessageClass, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetReceiveFolder)(IMsgStore *This, LPTSTR lpszMessageClass, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID, LPTSTR *lppszExplicitClass);HRESULT ( *GetReceiveFolderTable)(IMsgStore *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *StoreLogoff)(IMsgStore *This, ULONG *lpulFlags);HRESULT ( *AbortSubmit)(IMsgStore *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags);HRESULT ( *GetOutgoingQueue)(IMsgStore *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *SetLockState)(IMsgStore *This, LPMESSAGE lpMessage, ULONG ulLockState);HRESULT ( *FinishedMsg)(IMsgStore *This, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *NotifyNewMail)(IMsgStore *This, LPNOTIFICATION lpNotification);};
union tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E {LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;BSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;SAFEARRAY *parray;BYTE *pbVal;SHORT *piVal;LONG *plVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;SAFEARRAY **pparray;VARIANT *pvarVal;PVOID byref;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;tagVARIANT_________E3ADF3533BFFE4E09553D0C58E41D45E___0FDBD249F1AECD6A49409B6B82281578 __anonymous0;};
struct IRichEditOleCallbackVtbl {HRESULT ( *QueryInterface)(IRichEditOleCallback *This,  IID * riid, LPVOID *lplpObj);ULONG ( *AddRef)(IRichEditOleCallback *This);ULONG ( *Release)(IRichEditOleCallback *This);HRESULT ( *GetNewStorage)(IRichEditOleCallback *This, LPSTORAGE *lplpstg);HRESULT ( *GetInPlaceContext)(IRichEditOleCallback *This, LPOLEINPLACEFRAME *lplpFrame, LPOLEINPLACEUIWINDOW *lplpDoc, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT ( *ShowContainerUI)(IRichEditOleCallback *This, BOOL fShow);HRESULT ( *QueryInsertObject)(IRichEditOleCallback *This, LPCLSID lpclsid, LPSTORAGE lpstg, LONG cp);HRESULT ( *DeleteObject)(IRichEditOleCallback *This, LPOLEOBJECT lpoleobj);HRESULT ( *QueryAcceptData)(IRichEditOleCallback *This, LPDATAOBJECT lpdataobj, CLIPFORMAT *lpcfFormat, DWORD reco, BOOL fReally, HGLOBAL hMetaPict);HRESULT ( *ContextSensitiveHelp)(IRichEditOleCallback *This, BOOL fEnterMode);HRESULT ( *GetClipboardData)(IRichEditOleCallback *This, CHARRANGE *lpchrg, DWORD reco, LPDATAOBJECT *lplpdataobj);HRESULT ( *GetDragDropEffect)(IRichEditOleCallback *This, BOOL fDrag, DWORD grfKeyState, LPDWORD pdwEffect);HRESULT ( *GetContextMenu)(IRichEditOleCallback *This, WORD seltype, LPOLEOBJECT lpoleobj, CHARRANGE *lpchrg, HMENU *lphmenu);};
struct IDirect3DRMTexture2Vtbl {HRESULT ( *QueryInterface)(IDirect3DRMTexture2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRMTexture2 *This);ULONG ( *Release)(IDirect3DRMTexture2 *This);HRESULT ( *Clone)(IDirect3DRMTexture2 *This, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppvObj);HRESULT ( *AddDestroyCallback)(IDirect3DRMTexture2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *DeleteDestroyCallback)(IDirect3DRMTexture2 *This, D3DRMOBJECTCALLBACK, LPVOID argument);HRESULT ( *SetAppData)(IDirect3DRMTexture2 *This, DWORD data);DWORD ( *GetAppData)(IDirect3DRMTexture2 *This);HRESULT ( *SetName)(IDirect3DRMTexture2 *This, LPCSTR);HRESULT ( *GetName)(IDirect3DRMTexture2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *GetClassNameA)(IDirect3DRMTexture2 *This, LPDWORD lpdwSize, LPSTR lpName);HRESULT ( *InitFromFile)(IDirect3DRMTexture2 *This,  char *filename);HRESULT ( *InitFromSurface)(IDirect3DRMTexture2 *This, LPDIRECTDRAWSURFACE lpDDS);HRESULT ( *InitFromResource)(IDirect3DRMTexture2 *This, HRSRC);HRESULT ( *Changed)(IDirect3DRMTexture2 *This, BOOL pixels, BOOL palette);HRESULT ( *SetColors)(IDirect3DRMTexture2 *This, DWORD);HRESULT ( *SetShades)(IDirect3DRMTexture2 *This, DWORD);HRESULT ( *SetDecalSize)(IDirect3DRMTexture2 *This, D3DVALUE width, D3DVALUE height);HRESULT ( *SetDecalOrigin)(IDirect3DRMTexture2 *This, LONG x, LONG y);HRESULT ( *SetDecalScale)(IDirect3DRMTexture2 *This, DWORD);HRESULT ( *SetDecalTransparency)(IDirect3DRMTexture2 *This, BOOL);HRESULT ( *SetDecalTransparentColor)(IDirect3DRMTexture2 *This, D3DCOLOR);HRESULT ( *GetDecalSize)(IDirect3DRMTexture2 *This, D3DVALUE *width_return, D3DVALUE *height_return);HRESULT ( *GetDecalOrigin)(IDirect3DRMTexture2 *This, LONG *x_return, LONG *y_return);D3DRMIMAGE *( *GetImage)(IDirect3DRMTexture2 *This);DWORD ( *GetShades)(IDirect3DRMTexture2 *This);DWORD ( *GetColors)(IDirect3DRMTexture2 *This);DWORD ( *GetDecalScale)(IDirect3DRMTexture2 *This);BOOL ( *GetDecalTransparency)(IDirect3DRMTexture2 *This);D3DCOLOR ( *GetDecalTransparentColor)(IDirect3DRMTexture2 *This);HRESULT ( *InitFromImage)(IDirect3DRMTexture2 *This, LPD3DRMIMAGE);HRESULT ( *InitFromResource2)(IDirect3DRMTexture2 *This, HMODULE hModule, LPCTSTR strName, LPCTSTR strType);HRESULT ( *GenerateMIPMap)(IDirect3DRMTexture2 *This, DWORD);};
union CLUSPROP_BUFFER_HELPER {BYTE *pb;WORD *pw;DWORD *pdw;LPWSTR psz;PCLUSPROP_LIST pList;PCLUSPROP_SYNTAX pSyntax;PCLUSPROP_PROPERTY_NAME pName;PCLUSPROP_VALUE pValue;PCLUSPROP_BINARY pBinaryValue;PCLUSPROP_DWORD pDwordValue;PCLUSPROP_ULARGE_INTEGER pULargeIntegerValue;PCLUSPROP_SZ pStringValue;PCLUSPROP_MULTI_SZ pMultiSzValue;PCLUSPROP_RESOURCE_CLASS pResourceClassValue;PCLUSPROP_RESOURCE_CLASS_INFO pResourceClassInfoValue;PCLUSPROP_DISK_SIGNATURE pDiskSignatureValue;PCLUSPROP_SCSI_ADDRESS pScsiAddressValue;PCLUSPROP_DISK_NUMBER pDiskNumberValue;PCLUSPROP_PARTITION_INFO pPartitionInfoValue;PCLUSPROP_REQUIRED_DEPENDENCY pRequiredDependencyValue;};
struct IABContainerVtbl {HRESULT ( *QueryInterface)(IABContainer *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IABContainer *This);ULONG ( *Release)(IABContainer *This);HRESULT ( *GetLastError)(IABContainer *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IABContainer *This, ULONG ulFlags);HRESULT ( *GetProps)(IABContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IABContainer *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IABContainer *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IABContainer *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IABContainer *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IABContainer *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IABContainer *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IABContainer *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IABContainer *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IABContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IABContainer *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IABContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IABContainer *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IABContainer *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateEntry)(IABContainer *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulCreateFlags, LPMAPIPROP *lppMAPIPropEntry);HRESULT ( *CopyEntries)(IABContainer *This, LPENTRYLIST lpEntries, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteEntries)(IABContainer *This, LPENTRYLIST lpEntries, ULONG ulFlags);HRESULT ( *ResolveNames)(IABContainer *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, LPADRLIST lpAdrList, LPFlagList lpFlagList);};
struct IMAPISessionVtbl {HRESULT ( *QueryInterface)(IMAPISession *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPISession *This);ULONG ( *Release)(IMAPISession *This);HRESULT ( *GetLastError)(IMAPISession *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetMsgStoresTable)(IMAPISession *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenMsgStore)(IMAPISession *This, ULONG ulUIParam, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, LPMDB *lppMDB);HRESULT ( *OpenAddressBook)(IMAPISession *This, ULONG ulUIParam, LPCIID lpInterface, ULONG ulFlags, LPADRBOOK *lppAdrBook);HRESULT ( *OpenProfileSection)(IMAPISession *This, LPMAPIUID lpUID, LPCIID lpInterface, ULONG ulFlags, LPPROFSECT *lppProfSect);HRESULT ( *GetStatusTable)(IMAPISession *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IMAPISession *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *CompareEntryIDs)(IMAPISession *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *Advise)(IMAPISession *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IMAPISession *This, ULONG ulConnection);HRESULT ( *MessageOptions)(IMAPISession *This, ULONG ulUIParam, ULONG ulFlags, LPTSTR lpszAdrType, LPMESSAGE lpMessage);HRESULT ( *QueryDefaultMessageOpt)(IMAPISession *This, LPTSTR lpszAdrType, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppOptions);HRESULT ( *EnumAdrTypes)(IMAPISession *This, ULONG ulFlags, ULONG *lpcAdrTypes, LPTSTR **lpppszAdrTypes);HRESULT ( *QueryIdentity)(IMAPISession *This, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *Logoff)(IMAPISession *This, ULONG ulUIParam, ULONG ulFlags, ULONG ulReserved);HRESULT ( *SetDefaultStore)(IMAPISession *This, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *AdminServices)(IMAPISession *This, ULONG ulFlags, LPSERVICEADMIN *lppServiceAdmin);HRESULT ( *ShowForm)(IMAPISession *This, ULONG ulUIParam, LPMDB lpMsgStore, LPMAPIFOLDER lpParentFolder, LPCIID lpInterface, ULONG ulMessageToken, LPMESSAGE lpMessageSent, ULONG ulFlags, ULONG ulMessageStatus, ULONG ulMessageFlags, ULONG ulAccess, LPSTR lpszMessageClass);HRESULT ( *PrepareForm)(IMAPISession *This, LPCIID lpInterface, LPMESSAGE lpMessage, ULONG *lpulMessageToken);};
struct IDistListVtbl {HRESULT ( *QueryInterface)(IDistList *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDistList *This);ULONG ( *Release)(IDistList *This);HRESULT ( *GetLastError)(IDistList *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IDistList *This, ULONG ulFlags);HRESULT ( *GetProps)(IDistList *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IDistList *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IDistList *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IDistList *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IDistList *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IDistList *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IDistList *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IDistList *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IDistList *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IDistList *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IDistList *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IDistList *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IDistList *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IDistList *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateEntry)(IDistList *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulCreateFlags, LPMAPIPROP *lppMAPIPropEntry);HRESULT ( *CopyEntries)(IDistList *This, LPENTRYLIST lpEntries, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteEntries)(IDistList *This, LPENTRYLIST lpEntries, ULONG ulFlags);HRESULT ( *ResolveNames)(IDistList *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, LPADRLIST lpAdrList, LPFlagList lpFlagList);};
struct _SECURITY_FUNCTION_TABLE_A {unsigned int dwVersion;ENUMERATE_SECURITY_PACKAGES_FN_A EnumerateSecurityPackagesA;QUERY_CREDENTIALS_ATTRIBUTES_FN_A QueryCredentialsAttributesA;ACQUIRE_CREDENTIALS_HANDLE_FN_A AcquireCredentialsHandleA;FREE_CREDENTIALS_HANDLE_FN FreeCredentialHandle;void *Reserved2;INITIALIZE_SECURITY_CONTEXT_FN_A InitializeSecurityContextA;ACCEPT_SECURITY_CONTEXT_FN AcceptSecurityContext;COMPLETE_AUTH_TOKEN_FN CompleteAuthToken;DELETE_SECURITY_CONTEXT_FN DeleteSecurityContext;APPLY_CONTROL_TOKEN_FN ApplyControlToken;QUERY_CONTEXT_ATTRIBUTES_FN_A QueryContextAttributesA;IMPERSONATE_SECURITY_CONTEXT_FN ImpersonateSecurityContext;REVERT_SECURITY_CONTEXT_FN RevertSecurityContext;MAKE_SIGNATURE_FN MakeSignature;VERIFY_SIGNATURE_FN VerifySignature;FREE_CONTEXT_BUFFER_FN FreeContextBuffer;QUERY_SECURITY_PACKAGE_INFO_FN_A QuerySecurityPackageInfoA;void *Reserved3;void *Reserved4;EXPORT_SECURITY_CONTEXT_FN ExportSecurityContext;IMPORT_SECURITY_CONTEXT_FN_A ImportSecurityContextA;void *Reserved7;void *Reserved8;QUERY_SECURITY_CONTEXT_TOKEN_FN QuerySecurityContextToken;ENCRYPT_MESSAGE_FN EncryptMessage;DECRYPT_MESSAGE_FN DecryptMessage;};
struct _SECURITY_FUNCTION_TABLE_W {unsigned int dwVersion;ENUMERATE_SECURITY_PACKAGES_FN_W EnumerateSecurityPackagesW;QUERY_CREDENTIALS_ATTRIBUTES_FN_W QueryCredentialsAttributesW;ACQUIRE_CREDENTIALS_HANDLE_FN_W AcquireCredentialsHandleW;FREE_CREDENTIALS_HANDLE_FN FreeCredentialHandle;void *Reserved2;INITIALIZE_SECURITY_CONTEXT_FN_W InitializeSecurityContextW;ACCEPT_SECURITY_CONTEXT_FN AcceptSecurityContext;COMPLETE_AUTH_TOKEN_FN CompleteAuthToken;DELETE_SECURITY_CONTEXT_FN DeleteSecurityContext;APPLY_CONTROL_TOKEN_FN ApplyControlToken;QUERY_CONTEXT_ATTRIBUTES_FN_W QueryContextAttributesW;IMPERSONATE_SECURITY_CONTEXT_FN ImpersonateSecurityContext;REVERT_SECURITY_CONTEXT_FN RevertSecurityContext;MAKE_SIGNATURE_FN MakeSignature;VERIFY_SIGNATURE_FN VerifySignature;FREE_CONTEXT_BUFFER_FN FreeContextBuffer;QUERY_SECURITY_PACKAGE_INFO_FN_W QuerySecurityPackageInfoW;void *Reserved3;void *Reserved4;EXPORT_SECURITY_CONTEXT_FN ExportSecurityContext;IMPORT_SECURITY_CONTEXT_FN_W ImportSecurityContextW;void *Reserved7;void *Reserved8;QUERY_SECURITY_CONTEXT_TOKEN_FN QuerySecurityContextToken;ENCRYPT_MESSAGE_FN EncryptMessage;DECRYPT_MESSAGE_FN DecryptMessage;};
struct IExchExtCallbackVtbl {HRESULT ( *QueryInterface)(IExchExtCallback *This,  IID * riid, LPVOID *lppvObj);ULONG ( *AddRef)(IExchExtCallback *This);ULONG ( *Release)(IExchExtCallback *This);HRESULT ( *GetVersion)(IExchExtCallback *This, ULONG *lpulVersion, ULONG ulFlags);HRESULT ( *GetWindow)(IExchExtCallback *This, HWND *lphwnd);HRESULT ( *GetMenu)(IExchExtCallback *This, HMENU *lphmenu);HRESULT ( *GetToolbar)(IExchExtCallback *This, ULONG tbid, HWND *lphwndTb);HRESULT ( *GetSession)(IExchExtCallback *This, LPMAPISESSION *lppses, LPADRBOOK *lppab);HRESULT ( *GetObjectA)(IExchExtCallback *This, LPMDB *lppmdb, LPMAPIPROP *lppmp);HRESULT ( *GetSelectionCount)(IExchExtCallback *This, ULONG *lpceid);HRESULT ( *GetSelectionItem)(IExchExtCallback *This, ULONG ieid, ULONG *lpcbEid, LPENTRYID *lppeid, ULONG *lpulType, LPTSTR lpszMsgClass, ULONG cbMsgClass, ULONG *lpulMsgFlags, ULONG ulFlags);HRESULT ( *GetMenuPos)(IExchExtCallback *This, ULONG cmdid, HMENU *lphmenu, ULONG *lpmposMin, ULONG *lpmposMax, ULONG ulFlags);HRESULT ( *GetSharedExtsDir)(IExchExtCallback *This, LPTSTR lpszDir, ULONG cchDir, ULONG ulFlags);HRESULT ( *GetRecipients)(IExchExtCallback *This, LPADRLIST *lppal);HRESULT ( *SetRecipients)(IExchExtCallback *This, LPADRLIST lpal);HRESULT ( *GetNewMessageSite)(IExchExtCallback *This, ULONG fComposeInFolder, LPMAPIFOLDER pfldFocus, LPPERSISTMESSAGE ppermsg, LPMESSAGE *ppmsg, LPMAPIMESSAGESITE *ppmms, LPMAPIVIEWCONTEXT *ppmvc, ULONG ulFlags);HRESULT ( *RegisterModeless)(IExchExtCallback *This, LPEXCHEXTMODELESS peem, LPEXCHEXTMODELESSCALLBACK *ppeemcb);HRESULT ( *ChooseFolder)(IExchExtCallback *This, LPEXCHEXTCHOOSEFOLDER peecf);};
struct IMAPIFolderVtbl {HRESULT ( *QueryInterface)(IMAPIFolder *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPIFolder *This);ULONG ( *Release)(IMAPIFolder *This);HRESULT ( *GetLastError)(IMAPIFolder *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IMAPIFolder *This, ULONG ulFlags);HRESULT ( *GetProps)(IMAPIFolder *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IMAPIFolder *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IMAPIFolder *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IMAPIFolder *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IMAPIFolder *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IMAPIFolder *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IMAPIFolder *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IMAPIFolder *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IMAPIFolder *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *GetContentsTable)(IMAPIFolder *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *GetHierarchyTable)(IMAPIFolder *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *OpenEntry)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *SetSearchCriteria)(IMAPIFolder *This, LPSRestriction lpRestriction, LPENTRYLIST lpContainerList, ULONG ulSearchFlags);HRESULT ( *GetSearchCriteria)(IMAPIFolder *This, ULONG ulFlags, LPSRestriction *lppRestriction, LPENTRYLIST *lppContainerList, ULONG *lpulSearchState);HRESULT ( *CreateMessage)(IMAPIFolder *This, LPCIID lpInterface, ULONG ulFlags, LPMESSAGE *lppMessage);HRESULT ( *CopyMessages)(IMAPIFolder *This, LPENTRYLIST lpMsgList, LPCIID lpInterface, LPVOID lpDestFolder, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteMessages)(IMAPIFolder *This, LPENTRYLIST lpMsgList, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *CreateFolder)(IMAPIFolder *This, ULONG ulFolderType, LPTSTR lpszFolderName, LPTSTR lpszFolderComment, LPCIID lpInterface, ULONG ulFlags, LPMAPIFOLDER *lppFolder);HRESULT ( *CopyFolder)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, LPVOID lpDestFolder, LPTSTR lpszNewFolderName, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DeleteFolder)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *SetReadFlags)(IMAPIFolder *This, LPENTRYLIST lpMsgList, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *GetMessageStatus)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulFlags, ULONG *lpulMessageStatus);HRESULT ( *SetMessageStatus)(IMAPIFolder *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulNewStatus, ULONG ulNewStatusMask, ULONG *lpulOldStatus);HRESULT ( *SaveContentsSort)(IMAPIFolder *This, LPSSortOrderSet lpSortCriteria, ULONG ulFlags);HRESULT ( *EmptyFolder)(IMAPIFolder *This, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);};
union _PV {short i;LONG l;ULONG ul;float flt;double dbl;unsigned short b;CURRENCY cur;double at;FILETIME ft;LPSTR lpszA;SBinary bin;LPWSTR lpszW;LPGUID lpguid;LARGE_INTEGER li;SShortArray MVi;SLongArray MVl;SRealArray MVflt;SDoubleArray MVdbl;SCurrencyArray MVcur;SAppTimeArray MVat;SDateTimeArray MVft;SBinaryArray MVbin;SLPSTRArray MVszA;SWStringArray MVszW;SGuidArray MVguid;SLargeIntegerArray MVli;SCODE err;LONG x;};
struct _MPR40_ROUTING_CHARACTERISTICS {DWORD dwVersion;DWORD dwProtocolId;DWORD fSupportedFunctionality;PSTART_PROTOCOL pfnStartProtocol;PSTOP_PROTOCOL pfnStopProtocol;PADD_INTERFACE pfnAddInterface;PDELETE_INTERFACE pfnDeleteInterface;PGET_EVENT_MESSAGE pfnGetEventMessage;PGET_INTERFACE_INFO pfnGetInterfaceInfo;PSET_INTERFACE_INFO pfnSetInterfaceInfo;PBIND_INTERFACE pfnBindInterface;PUNBIND_INTERFACE pfnUnbindInterface;PENABLE_INTERFACE pfnEnableInterface;PDISABLE_INTERFACE pfnDisableInterface;PGET_GLOBAL_INFO pfnGetGlobalInfo;PSET_GLOBAL_INFO pfnSetGlobalInfo;PDO_UPDATE_ROUTES pfnUpdateRoutes;PMIB_CREATE pfnMibCreateEntry;PMIB_DELETE pfnMibDeleteEntry;PMIB_GET pfnMibGetEntry;PMIB_SET pfnMibSetEntry;PMIB_GET_FIRST pfnMibGetFirstEntry;PMIB_GET_NEXT pfnMibGetNextEntry;PMIB_SET_TRAP_INFO pfnMibSetTrapInfo;PMIB_GET_TRAP_INFO pfnMibGetTrapInfo;};
struct IAddrBookVtbl {HRESULT ( *QueryInterface)(IAddrBook *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IAddrBook *This);ULONG ( *Release)(IAddrBook *This);HRESULT ( *GetLastError)(IAddrBook *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *SaveChanges)(IAddrBook *This, ULONG ulFlags);HRESULT ( *GetProps)(IAddrBook *This, LPSPropTagArray lpPropTagArray, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppPropArray);HRESULT ( *GetPropList)(IAddrBook *This, ULONG ulFlags, LPSPropTagArray *lppPropTagArray);HRESULT ( *OpenProperty)(IAddrBook *This, ULONG ulPropTag, LPCIID lpiid, ULONG ulInterfaceOptions, ULONG ulFlags, LPUNKNOWN *lppUnk);HRESULT ( *SetProps)(IAddrBook *This, ULONG cValues, LPSPropValue lpPropArray, LPSPropProblemArray *lppProblems);HRESULT ( *DeleteProps)(IAddrBook *This, LPSPropTagArray lpPropTagArray, LPSPropProblemArray *lppProblems);HRESULT ( *CopyTo)(IAddrBook *This, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *CopyProps)(IAddrBook *This, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *GetNamesFromIDs)(IAddrBook *This, LPSPropTagArray *lppPropTags, LPGUID lpPropSetGuid, ULONG ulFlags, ULONG *lpcPropNames, LPMAPINAMEID **lpppPropNames);HRESULT ( *GetIDsFromNames)(IAddrBook *This, ULONG cPropNames, LPMAPINAMEID *lppPropNames, ULONG ulFlags, LPSPropTagArray *lppPropTags);HRESULT ( *OpenEntry)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *CompareEntryIDs)(IAddrBook *This, ULONG cbEntryID1, LPENTRYID lpEntryID1, ULONG cbEntryID2, LPENTRYID lpEntryID2, ULONG ulFlags, ULONG *lpulResult);HRESULT ( *Advise)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID, ULONG ulEventMask, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unadvise)(IAddrBook *This, ULONG ulConnection);HRESULT ( *CreateOneOff)(IAddrBook *This, LPTSTR lpszName, LPTSTR lpszAdrType, LPTSTR lpszAddress, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *NewEntry)(IAddrBook *This, ULONG ulUIParam, ULONG ulFlags, ULONG cbEIDContainer, LPENTRYID lpEIDContainer, ULONG cbEIDNewEntryTpl, LPENTRYID lpEIDNewEntryTpl, ULONG *lpcbEIDNewEntry, LPENTRYID *lppEIDNewEntry);HRESULT ( *ResolveName)(IAddrBook *This, ULONG ulUIParam, ULONG ulFlags, LPTSTR lpszNewEntryTitle, LPADRLIST lpAdrList);HRESULT ( *Address)(IAddrBook *This, ULONG *lpulUIParam, LPADRPARM lpAdrParms, LPADRLIST *lppAdrList);HRESULT ( *Details)(IAddrBook *This, ULONG *lpulUIParam, LPFNDISMISS lpfnDismiss, LPVOID lpvDismissContext, ULONG cbEntryID, LPENTRYID lpEntryID, LPFNBUTTON lpfButtonCallback, LPVOID lpvButtonContext, LPTSTR lpszButtonText, ULONG ulFlags);HRESULT ( *RecipOptions)(IAddrBook *This, ULONG ulUIParam, ULONG ulFlags, LPADRENTRY lpRecip);HRESULT ( *QueryDefaultRecipOpt)(IAddrBook *This, LPTSTR lpszAdrType, ULONG ulFlags, ULONG *lpcValues, LPSPropValue *lppOptions);HRESULT ( *GetPAB)(IAddrBook *This, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *SetPAB)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetDefaultDir)(IAddrBook *This, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *SetDefaultDir)(IAddrBook *This, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *GetSearchPath)(IAddrBook *This, ULONG ulFlags, LPSRowSet *lppSearchPath);HRESULT ( *SetSearchPath)(IAddrBook *This, ULONG ulFlags, LPSRowSet lpSearchPath);HRESULT ( *PrepareRecips)(IAddrBook *This, ULONG ulFlags, LPSPropTagArray lpPropTagArray, LPADRLIST lpRecipList);};
struct _WSPPROC_TABLE {LPWSPACCEPT lpWSPAccept;LPWSPADDRESSTOSTRING lpWSPAddressToString;LPWSPASYNCSELECT lpWSPAsyncSelect;LPWSPBIND lpWSPBind;LPWSPCANCELBLOCKINGCALL lpWSPCancelBlockingCall;LPWSPCLEANUP lpWSPCleanup;LPWSPCLOSESOCKET lpWSPCloseSocket;LPWSPCONNECT lpWSPConnect;LPWSPDUPLICATESOCKET lpWSPDuplicateSocket;LPWSPENUMNETWORKEVENTS lpWSPEnumNetworkEvents;LPWSPEVENTSELECT lpWSPEventSelect;LPWSPGETOVERLAPPEDRESULT lpWSPGetOverlappedResult;LPWSPGETPEERNAME lpWSPGetPeerName;LPWSPGETSOCKNAME lpWSPGetSockName;LPWSPGETSOCKOPT lpWSPGetSockOpt;LPWSPGETQOSBYNAME lpWSPGetQOSByName;LPWSPIOCTL lpWSPIoctl;LPWSPJOINLEAF lpWSPJoinLeaf;LPWSPLISTEN lpWSPListen;LPWSPRECV lpWSPRecv;LPWSPRECVDISCONNECT lpWSPRecvDisconnect;LPWSPRECVFROM lpWSPRecvFrom;LPWSPSELECT lpWSPSelect;LPWSPSEND lpWSPSend;LPWSPSENDDISCONNECT lpWSPSendDisconnect;LPWSPSENDTO lpWSPSendTo;LPWSPSETSOCKOPT lpWSPSetSockOpt;LPWSPSHUTDOWN lpWSPShutdown;LPWSPSOCKET lpWSPSocket;LPWSPSTRINGTOADDRESS lpWSPStringToAddress;};
struct IMAPISupportVtbl {HRESULT ( *QueryInterface)(IMAPISupport *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IMAPISupport *This);ULONG ( *Release)(IMAPISupport *This);HRESULT ( *GetLastError)(IMAPISupport *This, HRESULT hResult, ULONG ulFlags, LPMAPIERROR *lppMAPIError);HRESULT ( *GetMemAllocRoutines)(IMAPISupport *This, LPALLOCATEBUFFER *lpAllocateBuffer, LPALLOCATEMORE *lpAllocateMore, LPFREEBUFFER *lpFreeBuffer);HRESULT ( *Subscribe)(IMAPISupport *This, LPNOTIFKEY lpKey, ULONG ulEventMask, ULONG ulFlags, LPMAPIADVISESINK lpAdviseSink, ULONG *lpulConnection);HRESULT ( *Unsubscribe)(IMAPISupport *This, ULONG ulConnection);HRESULT ( *Notify)(IMAPISupport *This, LPNOTIFKEY lpKey, ULONG cNotification, LPNOTIFICATION lpNotifications, ULONG *lpulFlags);HRESULT ( *ModifyStatusRow)(IMAPISupport *This, ULONG cValues, LPSPropValue lpColumnVals, ULONG ulFlags);HRESULT ( *OpenProfileSection)(IMAPISupport *This, LPMAPIUID lpUid, ULONG ulFlags, LPPROFSECT *lppProfileObj);HRESULT ( *RegisterPreprocessor)(IMAPISupport *This, LPMAPIUID lpMuid, LPTSTR lpszAdrType, LPTSTR lpszDLLName, LPSTR lpszPreprocess, LPSTR lpszRemovePreprocessInfo, ULONG ulFlags);HRESULT ( *NewUID)(IMAPISupport *This, LPMAPIUID lpMuid);HRESULT ( *MakeInvalid)(IMAPISupport *This, ULONG ulFlags, LPVOID lpObject, ULONG ulRefCount, ULONG cMethods);HRESULT ( *SpoolerYield)(IMAPISupport *This, ULONG ulFlags);HRESULT ( *SpoolerNotify)(IMAPISupport *This, ULONG ulFlags, LPVOID lpvData);HRESULT ( *CreateOneOff)(IMAPISupport *This, LPTSTR lpszName, LPTSTR lpszAdrType, LPTSTR lpszAddress, ULONG ulFlags, ULONG *lpcbEntryID, LPENTRYID *lppEntryID);HRESULT ( *SetProviderUID)(IMAPISupport *This, LPMAPIUID lpProviderID, ULONG ulFlags);HRESULT ( *CompareEntryIDs)(IMAPISupport *This, ULONG cbEntry1, LPENTRYID lpEntry1, ULONG cbEntry2, LPENTRYID lpEntry2, ULONG ulCompareFlags, ULONG *lpulResult);HRESULT ( *OpenTemplateID)(IMAPISupport *This, ULONG cbTemplateID, LPENTRYID lpTemplateID, ULONG ulTemplateFlags, LPMAPIPROP lpMAPIPropData, LPCIID lpInterface, LPMAPIPROP *lppMAPIPropNew, LPMAPIPROP lpMAPIPropSibling);HRESULT ( *OpenEntry)(IMAPISupport *This, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpInterface, ULONG ulOpenFlags, ULONG *lpulObjType, LPUNKNOWN *lppUnk);HRESULT ( *GetOneOffTable)(IMAPISupport *This, ULONG ulFlags, LPMAPITABLE *lppTable);HRESULT ( *Address)(IMAPISupport *This, ULONG *lpulUIParam, LPADRPARM lpAdrParms, LPADRLIST *lppAdrList);HRESULT ( *Details)(IMAPISupport *This, ULONG *lpulUIParam, LPFNDISMISS lpfnDismiss, LPVOID lpvDismissContext, ULONG cbEntryID, LPENTRYID lpEntryID, LPFNBUTTON lpfButtonCallback, LPVOID lpvButtonContext, LPTSTR lpszButtonText, ULONG ulFlags);HRESULT ( *NewEntry)(IMAPISupport *This, ULONG ulUIParam, ULONG ulFlags, ULONG cbEIDContainer, LPENTRYID lpEIDContainer, ULONG cbEIDNewEntryTpl, LPENTRYID lpEIDNewEntryTpl, ULONG *lpcbEIDNewEntry, LPENTRYID *lppEIDNewEntry);HRESULT ( *DoConfigPropsheet)(IMAPISupport *This, ULONG ulUIParam, ULONG ulFlags, LPTSTR lpszTitle, LPMAPITABLE lpDisplayTable, LPMAPIPROP lpCOnfigData, ULONG ulTopPage);HRESULT ( *CopyMessages)(IMAPISupport *This, LPCIID lpSrcInterface, LPVOID lpSrcFolder, LPENTRYLIST lpMsgList, LPCIID lpDestInterface, LPVOID lpDestFolder, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *CopyFolder)(IMAPISupport *This, LPCIID lpSrcInterface, LPVOID lpSrcFolder, ULONG cbEntryID, LPENTRYID lpEntryID, LPCIID lpDestInterface, LPVOID lpDestFolder, LPTSTR lszNewFolderName, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, ULONG ulFlags);HRESULT ( *DoCopyTo)(IMAPISupport *This, LPCIID lpSrcInterface, LPVOID lpSrcObj, ULONG ciidExclude, LPCIID rgiidExclude, LPSPropTagArray lpExcludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpDestInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *DoCopyProps)(IMAPISupport *This, LPCIID lpSrcInterface, LPVOID lpSrcObj, LPSPropTagArray lpIncludeProps, ULONG ulUIParam, LPMAPIPROGRESS lpProgress, LPCIID lpDestInterface, LPVOID lpDestObj, ULONG ulFlags, LPSPropProblemArray *lppProblems);HRESULT ( *DoProgressDialog)(IMAPISupport *This, ULONG ulUIParam, ULONG ulFlags, LPMAPIPROGRESS *lppProgress);HRESULT ( *ReadReceipt)(IMAPISupport *This, ULONG ulFlags, LPMESSAGE lpReadMessage, LPMESSAGE *lppEmptyMessage);HRESULT ( *PrepareSubmit)(IMAPISupport *This, LPMESSAGE lpMessage, ULONG *lpulFlags);HRESULT ( *ExpandRecips)(IMAPISupport *This, LPMESSAGE lpMessage, ULONG *lpulFlags);HRESULT ( *UpdatePAB)(IMAPISupport *This, ULONG ulFlags, LPMESSAGE lpMessage);HRESULT ( *DoSentMail)(IMAPISupport *This, ULONG ulFlags, LPMESSAGE lpMessage);HRESULT ( *OpenAddressBook)(IMAPISupport *This, LPCIID lpInterface, ULONG ulFlags, LPADRBOOK *lppAdrBook);HRESULT ( *Preprocess)(IMAPISupport *This, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *CompleteMsg)(IMAPISupport *This, ULONG ulFlags, ULONG cbEntryID, LPENTRYID lpEntryID);HRESULT ( *StoreLogoffTransports)(IMAPISupport *This, ULONG *lpulFlags);HRESULT ( *StatusRecips)(IMAPISupport *This, LPMESSAGE lpMessage, LPADRLIST lpRecipList);HRESULT ( *WrapStoreEntryID)(IMAPISupport *This, ULONG cbOrigEntry, LPENTRYID lpOrigEntry, ULONG *lpcbWrappedEntry, LPENTRYID *lppWrappedEntry);HRESULT ( *ModifyProfile)(IMAPISupport *This, ULONG ulFlags);HRESULT ( *IStorageFromStream)(IMAPISupport *This, LPUNKNOWN lpUnkIn, LPCIID lpInterface, ULONG ulFlags, LPSTORAGE *lppStorageOut);HRESULT ( *GetSvcConfigSupportObj)(IMAPISupport *This, ULONG ulFlags, LPMAPISUP *lppSvcSupport);};
union tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8 {UCHAR bVal;short iVal;USHORT uiVal;VARIANT_BOOL boolVal;int lVal;ULONG ulVal;float fltVal;SCODE scode;LARGE_INTEGER hVal;ULARGE_INTEGER uhVal;double dblVal;CY cyVal;DATE date;FILETIME filetime;CLSID *puuid;BLOB blob;CLIPDATA *pclipdata;IStream *pStream;IStorage *pStorage;BSTR bstrVal;BSTRBLOB bstrblobVal;LPSTR pszVal;LPWSTR pwszVal;CAUB caub;CAI cai;CAUI caui;CABOOL cabool;CAL cal;CAUL caul;CAFLT caflt;CASCODE cascode;CAH cah;CAUH cauh;CADBL cadbl;CACY cacy;CADATE cadate;CAFILETIME cafiletime;CACLSID cauuid;CACLIPDATA caclipdata;CABSTR cabstr;CABSTRBLOB cabstrblob;CALPSTR calpstr;CALPWSTR calpwstr;CAPROPVARIANT capropvar;};
struct IDirect3DRMVtbl {HRESULT ( *QueryInterface)(IDirect3DRM *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRM *This);ULONG ( *Release)(IDirect3DRM *This);HRESULT ( *CreateObject)(IDirect3DRM *This,  CLSID * rclsid, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppv);HRESULT ( *CreateFrame)(IDirect3DRM *This, LPDIRECT3DRMFRAME, LPDIRECT3DRMFRAME *);HRESULT ( *CreateMesh)(IDirect3DRM *This, LPDIRECT3DRMMESH *);HRESULT ( *CreateMeshBuilder)(IDirect3DRM *This, LPDIRECT3DRMMESHBUILDER *);HRESULT ( *CreateFace)(IDirect3DRM *This, LPDIRECT3DRMFACE *);HRESULT ( *CreateAnimation)(IDirect3DRM *This, LPDIRECT3DRMANIMATION *);HRESULT ( *CreateAnimationSet)(IDirect3DRM *This, LPDIRECT3DRMANIMATIONSET *);HRESULT ( *CreateTexture)(IDirect3DRM *This, LPD3DRMIMAGE, LPDIRECT3DRMTEXTURE *);HRESULT ( *CreateLight)(IDirect3DRM *This, D3DRMLIGHTTYPE, D3DCOLOR, LPDIRECT3DRMLIGHT *);HRESULT ( *CreateLightRGB)(IDirect3DRM *This, D3DRMLIGHTTYPE, D3DVALUE, D3DVALUE, D3DVALUE, LPDIRECT3DRMLIGHT *);HRESULT ( *CreateMaterial)(IDirect3DRM *This, D3DVALUE, LPDIRECT3DRMMATERIAL *);HRESULT ( *CreateDevice)(IDirect3DRM *This, DWORD, DWORD, LPDIRECT3DRMDEVICE *);HRESULT ( *CreateDeviceFromSurface)(IDirect3DRM *This, LPGUID lpGUID, LPDIRECTDRAW lpDD, LPDIRECTDRAWSURFACE lpDDSBack, LPDIRECT3DRMDEVICE *);HRESULT ( *CreateDeviceFromD3D)(IDirect3DRM *This, LPDIRECT3D lpD3D, LPDIRECT3DDEVICE lpD3DDev, LPDIRECT3DRMDEVICE *);HRESULT ( *CreateDeviceFromClipper)(IDirect3DRM *This, LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height, LPDIRECT3DRMDEVICE *);HRESULT ( *CreateTextureFromSurface)(IDirect3DRM *This, LPDIRECTDRAWSURFACE lpDDS, LPDIRECT3DRMTEXTURE *);HRESULT ( *CreateShadow)(IDirect3DRM *This, LPDIRECT3DRMVISUAL, LPDIRECT3DRMLIGHT, D3DVALUE px, D3DVALUE py, D3DVALUE pz, D3DVALUE nx, D3DVALUE ny, D3DVALUE nz, LPDIRECT3DRMVISUAL *);HRESULT ( *CreateViewport)(IDirect3DRM *This, LPDIRECT3DRMDEVICE, LPDIRECT3DRMFRAME, DWORD, DWORD, DWORD, DWORD, LPDIRECT3DRMVIEWPORT *);HRESULT ( *CreateWrap)(IDirect3DRM *This, D3DRMWRAPTYPE, LPDIRECT3DRMFRAME, D3DVALUE ox, D3DVALUE oy, D3DVALUE oz, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz, D3DVALUE ou, D3DVALUE ov, D3DVALUE su, D3DVALUE sv, LPDIRECT3DRMWRAP *);HRESULT ( *CreateUserVisual)(IDirect3DRM *This, D3DRMUSERVISUALCALLBACK, LPVOID lPArg, LPDIRECT3DRMUSERVISUAL *);HRESULT ( *LoadTexture)(IDirect3DRM *This,  char *, LPDIRECT3DRMTEXTURE *);HRESULT ( *LoadTextureFromResource)(IDirect3DRM *This, HRSRC rs, LPDIRECT3DRMTEXTURE *);HRESULT ( *SetSearchPath)(IDirect3DRM *This, LPCSTR);HRESULT ( *AddSearchPath)(IDirect3DRM *This, LPCSTR);HRESULT ( *GetSearchPath)(IDirect3DRM *This, DWORD *size_return, LPSTR path_return);HRESULT ( *SetDefaultTextureColors)(IDirect3DRM *This, DWORD);HRESULT ( *SetDefaultTextureShades)(IDirect3DRM *This, DWORD);HRESULT ( *GetDevices)(IDirect3DRM *This, LPDIRECT3DRMDEVICEARRAY *);HRESULT ( *GetNamedObject)(IDirect3DRM *This,  char *, LPDIRECT3DRMOBJECT *);HRESULT ( *EnumerateObjects)(IDirect3DRM *This, D3DRMOBJECTCALLBACK, LPVOID);HRESULT ( *Load)(IDirect3DRM *This, LPVOID, LPVOID, LPIID *, DWORD, D3DRMLOADOPTIONS, D3DRMLOADCALLBACK, LPVOID, D3DRMLOADTEXTURECALLBACK, LPVOID, LPDIRECT3DRMFRAME);HRESULT ( *Tick)(IDirect3DRM *This, D3DVALUE);};
struct IDirect3DRM2Vtbl {HRESULT ( *QueryInterface)(IDirect3DRM2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IDirect3DRM2 *This);ULONG ( *Release)(IDirect3DRM2 *This);HRESULT ( *CreateObject)(IDirect3DRM2 *This,  CLSID * rclsid, LPUNKNOWN pUnkOuter,  IID * riid, LPVOID *ppv);HRESULT ( *CreateFrame)(IDirect3DRM2 *This, LPDIRECT3DRMFRAME, LPDIRECT3DRMFRAME2 *);HRESULT ( *CreateMesh)(IDirect3DRM2 *This, LPDIRECT3DRMMESH *);HRESULT ( *CreateMeshBuilder)(IDirect3DRM2 *This, LPDIRECT3DRMMESHBUILDER2 *);HRESULT ( *CreateFace)(IDirect3DRM2 *This, LPDIRECT3DRMFACE *);HRESULT ( *CreateAnimation)(IDirect3DRM2 *This, LPDIRECT3DRMANIMATION *);HRESULT ( *CreateAnimationSet)(IDirect3DRM2 *This, LPDIRECT3DRMANIMATIONSET *);HRESULT ( *CreateTexture)(IDirect3DRM2 *This, LPD3DRMIMAGE, LPDIRECT3DRMTEXTURE2 *);HRESULT ( *CreateLight)(IDirect3DRM2 *This, D3DRMLIGHTTYPE, D3DCOLOR, LPDIRECT3DRMLIGHT *);HRESULT ( *CreateLightRGB)(IDirect3DRM2 *This, D3DRMLIGHTTYPE, D3DVALUE, D3DVALUE, D3DVALUE, LPDIRECT3DRMLIGHT *);HRESULT ( *CreateMaterial)(IDirect3DRM2 *This, D3DVALUE, LPDIRECT3DRMMATERIAL *);HRESULT ( *CreateDevice)(IDirect3DRM2 *This, DWORD, DWORD, LPDIRECT3DRMDEVICE2 *);HRESULT ( *CreateDeviceFromSurface)(IDirect3DRM2 *This, LPGUID lpGUID, LPDIRECTDRAW lpDD, LPDIRECTDRAWSURFACE lpDDSBack, LPDIRECT3DRMDEVICE2 *);HRESULT ( *CreateDeviceFromD3D)(IDirect3DRM2 *This, LPDIRECT3D2 lpD3D, LPDIRECT3DDEVICE2 lpD3DDev, LPDIRECT3DRMDEVICE2 *);HRESULT ( *CreateDeviceFromClipper)(IDirect3DRM2 *This, LPDIRECTDRAWCLIPPER lpDDClipper, LPGUID lpGUID, int width, int height, LPDIRECT3DRMDEVICE2 *);HRESULT ( *CreateTextureFromSurface)(IDirect3DRM2 *This, LPDIRECTDRAWSURFACE lpDDS, LPDIRECT3DRMTEXTURE2 *);HRESULT ( *CreateShadow)(IDirect3DRM2 *This, LPDIRECT3DRMVISUAL, LPDIRECT3DRMLIGHT, D3DVALUE px, D3DVALUE py, D3DVALUE pz, D3DVALUE nx, D3DVALUE ny, D3DVALUE nz, LPDIRECT3DRMVISUAL *);HRESULT ( *CreateViewport)(IDirect3DRM2 *This, LPDIRECT3DRMDEVICE, LPDIRECT3DRMFRAME, DWORD, DWORD, DWORD, DWORD, LPDIRECT3DRMVIEWPORT *);HRESULT ( *CreateWrap)(IDirect3DRM2 *This, D3DRMWRAPTYPE, LPDIRECT3DRMFRAME, D3DVALUE ox, D3DVALUE oy, D3DVALUE oz, D3DVALUE dx, D3DVALUE dy, D3DVALUE dz, D3DVALUE ux, D3DVALUE uy, D3DVALUE uz, D3DVALUE ou, D3DVALUE ov, D3DVALUE su, D3DVALUE sv, LPDIRECT3DRMWRAP *);HRESULT ( *CreateUserVisual)(IDirect3DRM2 *This, D3DRMUSERVISUALCALLBACK, LPVOID lPArg, LPDIRECT3DRMUSERVISUAL *);HRESULT ( *LoadTexture)(IDirect3DRM2 *This,  char *, LPDIRECT3DRMTEXTURE2 *);HRESULT ( *LoadTextureFromResource)(IDirect3DRM2 *This, HMODULE hModule, LPCTSTR strName, LPCTSTR strType, LPDIRECT3DRMTEXTURE2 *);HRESULT ( *SetSearchPath)(IDirect3DRM2 *This, LPCSTR);HRESULT ( *AddSearchPath)(IDirect3DRM2 *This, LPCSTR);HRESULT ( *GetSearchPath)(IDirect3DRM2 *This, DWORD *size_return, LPSTR path_return);HRESULT ( *SetDefaultTextureColors)(IDirect3DRM2 *This, DWORD);HRESULT ( *SetDefaultTextureShades)(IDirect3DRM2 *This, DWORD);HRESULT ( *GetDevices)(IDirect3DRM2 *This, LPDIRECT3DRMDEVICEARRAY *);HRESULT ( *GetNamedObject)(IDirect3DRM2 *This,  char *, LPDIRECT3DRMOBJECT *);HRESULT ( *EnumerateObjects)(IDirect3DRM2 *This, D3DRMOBJECTCALLBACK, LPVOID);HRESULT ( *Load)(IDirect3DRM2 *This, LPVOID, LPVOID, LPIID *, DWORD, D3DRMLOADOPTIONS, D3DRMLOADCALLBACK, LPVOID, D3DRMLOADTEXTURECALLBACK, LPVOID, LPDIRECT3DRMFRAME);HRESULT ( *Tick)(IDirect3DRM2 *This, D3DVALUE);HRESULT ( *CreateProgressiveMesh)(IDirect3DRM2 *This, LPDIRECT3DRMPROGRESSIVEMESH *);};
union ldapmodW___E212A43E07F676EA561EB2F20C2750D7 {PWCHAR *modv_strvals;struct berval **modv_bvals;};
struct _098CCDCB9074DBE2AEBC1B4026CD72FD {LPCTSTR Version;};
struct _21B90258E17C8B6D2BC61A88DF74B5FB {LPCTSTR Site;};
struct _30CC7D53408649846FD423BE19D3AD21 {LPCTSTR QuestionType;LPCTSTR QuestionText;};
struct _60326525EFFC6265B33A0784E3C361D7 {LPCTSTR Text;};
struct _9EEC6D4C8F692379AA2A6356D0C3C3FC {LPCTSTR Provider;};
struct _B8380904D5E4DBEF1FA17159C4574D89 {LPCTSTR ShortAbstract;LPCTSTR AbstractFile;};
struct _C25693052C43ED6AA003F87DB66344AA {LPCTSTR Organization;};
struct _DE8A226FBF6958721EC6E17746E96A38 {LPCTSTR Location;};
struct _E42E7BED0EE5193A4D0BC9D45E2008A3 {LPCTSTR Comment;LPCTSTR EmailAddress;};
struct _MPR50_ROUTING_CHARACTERISTICS {_MPR40_ROUTING_CHARACTERISTICS __anonymous0;};
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
struct _LOCALGROUP_MEMBERS_INFO_3 {LPWSTR lgrmi3_domainandname;};
struct _SecPkgContext_AuthorityW {SEC_WCHAR *sAuthorityName;};
struct _SecPkgContext_ProtoInfoW {SEC_WCHAR *sProtocolName;unsigned int majorVersion;unsigned int minorVersion;};
struct _SecPkgCredentials_NamesW {SEC_WCHAR *sUserName;};
struct _LOCALGROUP_USERS_INFO_0 {LPWSTR lgrui0_name;};
typedef LPDIRECTDRAWENUMERATEEXA LPDIRECTDRAWENUMERATEEX;
typedef LPWSTR *PADS_CASE_IGNORE_STRING;
struct _PRINTPROCESSOR_INFO_1W {LPWSTR pName;};
struct _SecPkgContext_KeyInfoW {SEC_WCHAR *sSignatureAlgorithmName;SEC_WCHAR *sEncryptAlgorithmName;unsigned int KeySize;unsigned int SignatureAlgorithm;unsigned int EncryptAlgorithm;};
typedef LPWSTR ADS_CASE_IGNORE_STRING;
typedef LPWSTR *PADS_CASE_EXACT_STRING;
struct _FILESYSTEM_STATISTICS {_FILESYSTEM_STATISTICS___F0D8CD422EA60BCD029A515ED3B33ABC __anonymous0;};
struct _USER_MODALS_INFO_1007 {LPWSTR usrmod1007_primary;};
typedef LPWSTR ADS_CASE_EXACT_STRING;
typedef LPWSTR *PADS_PRINTABLE_STRING;
struct _LOCALGROUP_INFO_1002 {LPWSTR lgrpi1002_comment;};
struct _SEC_NEGOTIATION_INFO {unsigned int Size;unsigned int NameLength;SEC_WCHAR *Name;void *Reserved;};
struct _SERVICE_DESCRIPTIONW {LPWSTR lpDescription;};
struct _SecPkgContext_NamesW {SEC_WCHAR *sUserName;};
struct _UNIVERSAL_NAME_INFOW {LPWSTR lpUniversalName;};
struct _WKSTA_USER_INFO_1101 {LPTSTR wkui1101_oth_domains;};
typedef LPWSTR ADS_PRINTABLE_STRING;
typedef MCI_DGV_LOAD_PARMS *LPMCI_DGV_LOAD_PARMS;
struct _ACTRL_CONTROL_INFOW {LPWSTR lpControlId;LPWSTR lpControlName;};
struct _WLX_MPR_NOTIFY_INFO {PWSTR pszUserName;PWSTR pszDomain;PWSTR pszPassword;PWSTR pszOldPassword;};
typedef LAUNCHWIZARDENTRY *LPLAUNCHWIZARDENTRY;
typedef LPWSTR *PADS_NUMERIC_STRING;
struct _CHARDEVQ_INFO_1003 {LPWSTR cq1003_devs;};
struct _GROUP_USERS_INFO_0 {LPWSTR grui0_name;};
typedef LPWSTR ADS_NUMERIC_STRING;
typedef int ( *EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
struct _DATATYPES_INFO_1W {LPWSTR pName;};
struct _DEVICE_MEDIA_INFO {union _DEVICE_MEDIA_INFO___3EDF094CD34C2C696A2526C4FE2CCDD6 DeviceSpecific;};
struct _LOCALGROUP_INFO_0 {LPWSTR lgrpi0_name;};
struct _LOCALGROUP_INFO_1 {LPWSTR lgrpi1_name;LPWSTR lgrpi1_comment;};
struct _REMOTE_NAME_INFOW {LPWSTR lpUniversalName;LPWSTR lpConnectionName;LPWSTR lpRemainingPath;};
struct _WKSTA_USER_INFO_0 {LPTSTR wkui0_username;};
struct _WKSTA_USER_INFO_1 {LPTSTR wkui1_username;LPTSTR wkui1_logon_domain;LPTSTR wkui1_oth_domains;LPTSTR wkui1_logon_server;};
typedef LPWSTR *PADS_OBJECT_CLASS;
struct _PROVIDOR_INFO_1W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct _REPL_EDIR_INFO_0 {LPWSTR rped0_dirname;};
struct _REPL_IDIR_INFO_0 {LPWSTR rpid0_dirname;};
struct _SERVER_INFO_1005 {LPTSTR sv1005_comment;};
typedef LPWSTR ADS_OBJECT_CLASS;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef ADVISECALLBACK *LPADVISECALLBACK;
struct _CHARDEVQ_INFO_0 {LPWSTR cq0_dev;};
struct _GROUP_INFO_1002 {LPWSTR grpi1002_comment;};
struct _MONITOR_INFO_1W {LPWSTR pName;};
struct _MONITOR_INFO_2W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct _NETLOGON_INFO_4 {LPWSTR netlog4_trusted_dc_name;LPWSTR netlog4_trusted_domain_name;};
struct _SHARE_INFO_1004 {LPTSTR shi1004_remark;};
struct _ads_object_info {LPWSTR pszRDN;LPWSTR pszObjectDN;LPWSTR pszParentDN;LPWSTR pszSchemaDN;LPWSTR pszClassName;};
struct tagREGISTERWORDW {LPWSTR lpReading;LPWSTR lpWord;};
typedef NAMEENUMPROCW WINSTAENUMPROCW;
struct _CHARDEV_INFO_0 {LPWSTR ch0_dev;};
struct _DRIVER_INFO_1W {LPWSTR pName;};
struct _SERVICE_INFO_0 {LPWSTR svci0_name;};
struct _SESSION_INFO_0 {LPTSTR sesi0_cname;};
struct _SHNAMEMAPPINGW {LPWSTR pszOldPath;LPWSTR pszNewPath;int cchOldPath;int cchNewPath;};
struct _USER_INFO_1003 {LPWSTR usri1003_password;};
struct _USER_INFO_1006 {LPWSTR usri1006_home_dir;};
struct _USER_INFO_1007 {LPWSTR usri1007_comment;};
struct _USER_INFO_1009 {LPWSTR usri1009_script_path;};
struct _USER_INFO_1011 {LPWSTR usri1011_full_name;};
struct _USER_INFO_1012 {LPWSTR usri1012_usr_comment;};
struct _USER_INFO_1013 {LPWSTR usri1013_parms;};
struct _USER_INFO_1014 {LPWSTR usri1014_workstations;};
struct _USER_INFO_1023 {LPWSTR usri1023_logon_server;};
struct _USER_INFO_1052 {LPWSTR usri1052_profile;};
struct _USER_INFO_1053 {LPWSTR usri1053_home_dir_drive;};
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
typedef LPWSTR *PADS_DN_STRING;
struct _ACCESS_INFO_0 {LPWSTR acc0_resource_name;};
struct _CONFIG_INFO_0 {LPWSTR cfgi0_key;LPWSTR cfgi0_data;};
struct _RECIPIENTINFO {LPWSTR pszCommonName;LPWSTR pszFirstName;LPWSTR pszLastName;LPWSTR pszDisplayName;LPWSTR pszInitials;};
typedef LPWSTR ADS_DN_STRING;
typedef MAPILOGONEX *LPMAPILOGONEX;
typedef WIZARDENTRY *LPWIZARDENTRY;
struct _DFS_INFO_100 {LPWSTR Comment;};
struct _GROUP_INFO_0 {LPWSTR grpi0_name;};
struct _GROUP_INFO_1 {LPWSTR grpi1_name;LPWSTR grpi1_comment;};
struct _PORT_INFO_1W {LPWSTR pName;};
struct _SHARE_INFO_0 {LPTSTR shi0_netname;};
struct _USER_INFO_10 {LPWSTR usri10_name;LPWSTR usri10_comment;LPWSTR usri10_usr_comment;LPWSTR usri10_full_name;};
struct _DOC_INFO_1W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;};
struct _SecPkgInfoW {unsigned int fCapabilities;unsigned short wVersion;unsigned short wRPCID;unsigned int cbMaxToken;SEC_WCHAR *Name;SEC_WCHAR *Comment;};
struct _USER_INFO_0 {LPWSTR usri0_name;};
struct _DFS_INFO_1 {LPWSTR EntryPath;};
struct _MSG_INFO_0 {LPWSTR msgi0_name;};
struct _USE_INFO_0 {LPTSTR ui0_local;LPTSTR ui0_remote;};
struct mc_allocate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char reserv3;unsigned char sync_level;unsigned char reserv4[2];unsigned char rtn_ctl;unsigned char reserv5;unsigned int conv_group_id;unsigned int sense_data;unsigned char plu_alias[8];unsigned char mode_name[8];unsigned char tp_name[64];unsigned char security;unsigned char reserv6[11];unsigned char pwd[10];unsigned char user_id[10];unsigned short pip_dlen;unsigned char *pip_dptr;unsigned char reserv7;unsigned char fqplu_name[17];unsigned char reserv8[8];LPWSTR proxy_user;LPWSTR proxy_domain;unsigned char reserv9[16];};
typedef BSTR DataMember;
typedef  OLECHAR *LPCOLESTR;
struct tagRemSNB {unsigned int ulCntStr;unsigned int ulCntChar;OLECHAR rgString[1];};
typedef int ( *ENUMPROC)(LPSYV, int, void *);
typedef OLECHAR *LPOLESTR;
struct allocate {unsigned short opcode;unsigned char opext;unsigned char reserv2;unsigned short primary_rc;unsigned int secondary_rc;unsigned char tp_id[8];unsigned int conv_id;unsigned char conv_type;unsigned char sync_level;unsigned char reserv3[2];unsigned char rtn_ctl;unsigned char reserv4;unsigned int conv_group_id;unsigned int sense_data;unsigned char plu_alias[8];unsigned char mode_name[8];unsigned char tp_name[64];unsigned char security;unsigned char reserv5[11];unsigned char pwd[10];unsigned char user_id[10];unsigned short pip_dlen;unsigned char *pip_dptr;unsigned char reserv7;unsigned char fqplu_name[17];unsigned char reserv8[8];LPWSTR proxy_user;LPWSTR proxy_domain;unsigned char reserv9[16];};
typedef BSTR *LPBSTR;
typedef LPOLESTR SRESID;
struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF {PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;HANDLE hThread;};
struct BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F___BC76CA3BCEACCD00BFE19C0FAD7C2138 {BDN_VALUE______BC76CA3BCEACCD00BFE19C0FAD7C2138___05FAD7053CEFB55D5DB10BB62A7755FE __anonymous0;DWORD StringMaxLength;};
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 {PROPID propid;LPOLESTR lpwstr;};
union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB {LPOLESTR pwszName;ULONG ulPropid;};
struct _94FF0DCDFF19E9D844EB9057038515A4 {DWORD dwKind;_94FF0DCDFF19E9D844EB9057038515A4___AA90C7C52CB1487987B0F426BAFB98E6 __anonymous0;};
struct CLUSPROP_RESOURCE_CLASS {CLUSPROP_RESOURCE_CLASS_INFO __anonymous0;CLUSTER_RESOURCE_CLASS rc;};
struct _CERT_ALT_NAME_ENTRY {DWORD dwAltNameChoice;_CERT_ALT_NAME_ENTRY___7E4B233ED3B78E5B558F9B49A3136717 __anonymous0;};
struct _INTERFACE_INFO {u_long iiFlags;sockaddr_gen iiAddress;sockaddr_gen iiBroadcastAddress;sockaddr_gen iiNetmask;};
struct _tagChannelInfo {LPOLESTR pszTitle;LPOLESTR pszPath;LPOLESTR pszURL;SUBSCRIPTIONSTATE stSubscriptionState;};
struct tagCALPOLESTR {ULONG cElems;LPOLESTR *pElems;};
struct tagMDAXISINFO {ULONG cbSize;ULONG iAxis;ULONG cDimensions;ULONG cCoordinates;ULONG *rgcColumns;LPOLESTR *rgpwszDimensionNames;};
struct _CONVDLLVECT {short nVectorVersion;PCONVDLLQUERY pfnCnvQueryCapability;PCONVDLLCONV pfnCnvConvert;};
struct _SPropValue {ULONG ulPropTag;ULONG dwAlignPad;union _PV Value;};
struct tagPROPSPEC {ULONG ulKind;tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 __anonymous0;};
struct _STRRET {UINT uType;_STRRET___3AF7F6543D4EBCAE352F8864F620C6EA __anonymous0;};
struct tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;tagVARIANT______2E851DBA257FA738680F86C475CAC6EB___E3ADF3533BFFE4E09553D0C58E41D45E __anonymous0;};
union BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F {SOCKET_ADDRESS SocketAddress;BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F___BC76CA3BCEACCD00BFE19C0FAD7C2138 __anonymous0;DWORD Dword;};
union CLUSPROP_REQUIRED_DEPENDENCY {CLUSPROP_VALUE Value;CLUSPROP_RESOURCE_CLASS ResClass;CLUSPROP_SZ ResTypeName;};
struct MSBDN_OUTPUT_VALUE {DWORD Index;DWORD Type;LPWSTR Name;MSBDN_OUTPUT_VALUE___FF2674E992A362656645868EC7412F11 __anonymous0;};
struct tagJAVAEXECUTEINFO {DWORD cbSize;DWORD dwFlags;LPCOLESTR pszClassName;LPCOLESTR *rgszArgs;ULONG cArgs;LPCOLESTR pszClassPath;LPCOLESTR pszNamespace;};
struct tagCLASSDETAIL {CLSID Clsid;LPOLESTR pszDesc;LPOLESTR pszIconPath;CLSID TreatAsClsid;CLSID AutoConvertClsid;DWORD cFileExt;LPOLESTR *prgFileExt;LPOLESTR pMimeType;LPOLESTR pDefaultProgId;DWORD cOtherProgId;LPOLESTR *prgOtherProgId;};
struct tagPROPVARIANT {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;tagPROPVARIANT___6B0F5089DBA833B4DDD55BF1F2B45AC8 __anonymous0;};
struct tagSTATPROPSTG {LPOLESTR lpwstrName;PROPID propid;VARTYPE vt;};
struct tagOLEVERB {LONG lVerb;LPOLESTR lpszVerbName;DWORD fuFlags;DWORD grfAttribs;};
struct tagDBTEXT {LPOLESTR pwszText;ULONG ulErrorLocator;ULONG ulTokenLength;GUID guidDialect;};
struct ldapmodW {ULONG mod_op;PWCHAR mod_type;union ldapmodW___E212A43E07F676EA561EB2F20C2750D7 mod_vals;};
struct tagDBID {union tagDBID___8A6F84EEDBA9444E5F3B3798E7B3D46D uGuid;DBKIND eKind;union tagDBID___5B368C6E7AF9DC89B9167B66073E3FEB uName;};
union __MIDL___MIDL_itf_wtypes_0001_0001____MIDL___MIDL_itf_wtypes_0001_0003 {CLSID clsid;IID iid;GUID typelibID;LPOLESTR pFileExt;LPOLESTR pMimeType;LPOLESTR pProgId;LPOLESTR pFileName;LPOLESTR pJavaClassName;LPOLESTR pPackageName;};
typedef HRESULT ( *LPDIRECTDRAWENUMERATEEXW)(LPDDENUMCALLBACKEXW lpCallback, LPVOID lpContext, DWORD dwFlags);
struct DataSourceListenerVtbl {HRESULT ( *QueryInterface)(DataSourceListener *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DataSourceListener *This);ULONG ( *Release)(DataSourceListener *This);HRESULT ( *dataMemberChanged)(DataSourceListener *This, DataMember bstrDM);HRESULT ( *dataMemberAdded)(DataSourceListener *This, DataMember bstrDM);HRESULT ( *dataMemberRemoved)(DataSourceListener *This, DataMember bstrDM);};
struct IAMPhysicalPinInfoVtbl {HRESULT ( *QueryInterface)(IAMPhysicalPinInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMPhysicalPinInfo *This);ULONG ( *Release)(IAMPhysicalPinInfo *This);HRESULT ( *GetPhysicalType)(IAMPhysicalPinInfo *This, int *pType, LPOLESTR *ppszType);};
struct IRemoteThreadGroupVtbl {HRESULT ( *QueryInterface)(IRemoteThreadGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteThreadGroup *This);ULONG ( *Release)(IRemoteThreadGroup *This);HRESULT ( *GetName)(IRemoteThreadGroup *This, LPOLESTR *ppszName);HRESULT ( *GetThreads)(IRemoteThreadGroup *This, IJavaEnumRemoteThread **ppEnum);HRESULT ( *GetThreadGroups)(IRemoteThreadGroup *This, IJavaEnumRemoteThreadGroup **ppEnum);};
struct IBindEventHandlerVtbl {HRESULT ( *QueryInterface)(IBindEventHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindEventHandler *This);ULONG ( *Release)(IBindEventHandler *This);HRESULT ( *BindHandler)(IBindEventHandler *This, LPCOLESTR pstrEvent, IDispatch *pdisp);};
struct IParseDisplayNameVtbl {HRESULT ( *QueryInterface)(IParseDisplayName *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IParseDisplayName *This);ULONG ( *Release)(IParseDisplayName *This);HRESULT ( *ParseDisplayName)(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);};
struct LdapReferralCallback {ULONG SizeOfCallbacks;QUERYFORCONNECTION *QueryForConnection;NOTIFYOFNEWCONNECTION *NotifyRoutine;DEREFERENCECONNECTION *DereferenceRoutine;};
struct tagDBPARAMBINDINFO {LPOLESTR pwszDataSourceType;LPOLESTR pwszName;ULONG ulParamSize;DBPARAMFLAGS dwFlags;BYTE bPrecision;BYTE bScale;};
struct IRemoteThreadVtbl {HRESULT ( *QueryInterface)(IRemoteThread *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteThread *This);ULONG ( *Release)(IRemoteThread *This);HRESULT ( *GetName)(IRemoteThread *This, LPOLESTR *ppszName);HRESULT ( *GetCurrentFrame)(IRemoteThread *This, IRemoteStackFrame **ppCurrentFrame);HRESULT ( *GetThreadGroup)(IRemoteThread *This, IRemoteThreadGroup **ppThreadGroup);HRESULT ( *Go)(IRemoteThread *This);HRESULT ( *Step)(IRemoteThread *This);HRESULT ( *StepIn)(IRemoteThread *This);HRESULT ( *StepOut)(IRemoteThread *This);HRESULT ( *RangeStep)(IRemoteThread *This, ULONG offStart, ULONG offEnd);HRESULT ( *RangeStepIn)(IRemoteThread *This, ULONG offStart, ULONG offEnd);HRESULT ( *Destroy)(IRemoteThread *This);HRESULT ( *Suspend)(IRemoteThread *This);HRESULT ( *Resume)(IRemoteThread *This);HRESULT ( *GetSuspendCount)(IRemoteThread *This, ULONG *pcSuspend);};
struct IRootStorageVtbl {HRESULT ( *QueryInterface)(IRootStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRootStorage *This);ULONG ( *Release)(IRootStorage *This);HRESULT ( *SwitchToFile)(IRootStorage *This, LPOLESTR pszFile);};
struct tagDBLITERALINFO {LPOLESTR pwszLiteralValue;LPOLESTR pwszInvalidChars;LPOLESTR pwszInvalidStartingChars;DBLITERAL lt;BOOL fSupported;ULONG cchMaxLen;};
struct IEnumStringVtbl {HRESULT ( *QueryInterface)(IEnumString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumString *This);ULONG ( *Release)(IEnumString *This);HRESULT ( *Next)(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumString *This, ULONG celt);HRESULT ( *Reset)(IEnumString *This);HRESULT ( *Clone)(IEnumString *This, IEnumString **ppenum);};
struct tagPROPPAGEINFO {ULONG cb;LPOLESTR pszTitle;SIZE size;LPOLESTR pszDocString;LPOLESTR pszHelpFile;DWORD dwHelpContext;};
struct DataSourceVtbl {HRESULT ( *QueryInterface)(DataSource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DataSource *This);ULONG ( *Release)(DataSource *This);HRESULT ( *getDataMember)(DataSource *This, DataMember bstrDM,  IID * riid, IUnknown **ppunk);HRESULT ( *getDataMemberName)(DataSource *This, int lIndex, DataMember *pbstrDM);HRESULT ( *getDataMemberCount)(DataSource *This, int *plCount);HRESULT ( *addDataSourceListener)(DataSource *This, DataSourceListener *pDSL);HRESULT ( *removeDataSourceListener)(DataSource *This, DataSourceListener *pDSL);};
struct tagPACKAGEINFO {LPOLESTR pszClassIconPath;CLSID *pTreatAsClsid;DWORD cPackages;PACKAGEDETAIL *pPackageDetail;};
struct tagAPPDETAIL {GUID AppID;DWORD cClasses;CLSID *prgClsIdList;DWORD cTypeLibIds;CLSID *prgTypeLibIdList;DWORD cServers;LPOLESTR *prgServerNames;};
struct tagDBCONTENT {LPOLESTR pwszPhrase;DWORD dwGenerateMethod;LONG lWeight;LCID lcid;};
struct IMDFindVtbl {HRESULT ( *QueryInterface)(IMDFind *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMDFind *This);ULONG ( *Release)(IMDFind *This);HRESULT ( *FindCell)(IMDFind *This, ULONG ulStartingOrdinal, ULONG cMembers, LPCOLESTR *rgpwszMember, ULONG *pulCellOrdinal);HRESULT ( *FindTuple)(IMDFind *This, ULONG ulAxisIdentifier, ULONG ulStartingOrdinal, ULONG cMembers, LPCOLESTR *rgpwszMember, ULONG *pulTupleOrdinal);};
struct BDN_VALUE {WORD Type;union {SOCKET_ADDRESS SocketAddress;struct {BDN_VALUE___84CBE773CAE85CE1B50DA7BFC17F3F1F __anonymous0;DWORD StringMaxLength;};DWORD Dword;};};
union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA {struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___FE55FC766DFEC649A23F3D16D006B7DF APC;struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___C660038BC4506B920E67E9C79BE55359 IOC;struct _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA___A18A6C82CF5B218D68E8003A992A5456 HWND;HANDLE hEvent;PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;};
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB {HBITMAP hBitmap;HMETAFILEPICT hMetaFilePict;HENHMETAFILE hEnhMetaFile;HGLOBAL hGlobal;LPOLESTR lpszFileName;IStream *pstm;IStorage *pstg;};
struct IActiveScriptParseProcedureOldVtbl {HRESULT ( *QueryInterface)(IActiveScriptParseProcedureOld *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParseProcedureOld *This);ULONG ( *Release)(IActiveScriptParseProcedureOld *This);HRESULT ( *ParseProcedureText)(IActiveScriptParseProcedureOld *This, LPCOLESTR pstrCode, LPCOLESTR pstrFormalParams, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, IDispatch **ppdisp);};
struct IActiveScriptParseProcedureVtbl {HRESULT ( *QueryInterface)(IActiveScriptParseProcedure *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParseProcedure *This);ULONG ( *Release)(IActiveScriptParseProcedure *This);HRESULT ( *ParseProcedureText)(IActiveScriptParseProcedure *This, LPCOLESTR pstrCode, LPCOLESTR pstrFormalParams, LPCOLESTR pstrProcedureName, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, IDispatch **ppdisp);};
struct IRemoteProcessCallbackVtbl {HRESULT ( *QueryInterface)(IRemoteProcessCallback *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteProcessCallback *This);ULONG ( *Release)(IRemoteProcessCallback *This);HRESULT ( *DebugStringEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, LPCOLESTR pszDebugString);HRESULT ( *CodeBreakpointEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *DataBreakpointEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteObject *pObject);HRESULT ( *ExceptionEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteClassField *pExceptionClass, EXCEPTIONKIND exceptionKind);HRESULT ( *StepEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *CanStopEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *BreakEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *ThreadCreateEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *ThreadDestroyEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *ThreadGroupCreateEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteThreadGroup *pThreadGroup);HRESULT ( *ThreadGroupDestroyEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteThreadGroup *pThreadGroup);HRESULT ( *ClassLoadEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteClassField *pClassType);HRESULT ( *ClassUnloadEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread, IRemoteClassField *pClassType);HRESULT ( *ProcessDestroyEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *TraceEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);HRESULT ( *LoadCompleteEvent)(IRemoteProcessCallback *This, IRemoteThread *pThread);};
struct IRemoteDebugManagerVtbl {HRESULT ( *QueryInterface)(IRemoteDebugManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteDebugManager *This);ULONG ( *Release)(IRemoteDebugManager *This);HRESULT ( *RegisterCallback)(IRemoteDebugManager *This, IRemoteDebugManagerCallback *pCallback);HRESULT ( *Detach)(IRemoteDebugManager *This);HRESULT ( *GetActiveProcesses)(IRemoteDebugManager *This, IJavaEnumRemoteProcess **ppEnum);HRESULT ( *RequestCreateEvent)(IRemoteDebugManager *This, LPCOLESTR pszProcessName, DWORD dwParentProcessId);};
struct IMediaPropertyBagVtbl {HRESULT ( *QueryInterface)(IMediaPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMediaPropertyBag *This);ULONG ( *Release)(IMediaPropertyBag *This);HRESULT ( *Read)(IMediaPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT ( *Write)(IMediaPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);HRESULT ( *EnumProperty)(IMediaPropertyBag *This, ULONG iProperty, VARIANT *pvarPropertyName, VARIANT *pvarPropertyValue);};
struct IRemoteProcessVtbl {HRESULT ( *QueryInterface)(IRemoteProcess *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteProcess *This);ULONG ( *Release)(IRemoteProcess *This);HRESULT ( *RegisterCallback)(IRemoteProcess *This, IRemoteProcessCallback *pCallback);HRESULT ( *Detach)(IRemoteProcess *This);HRESULT ( *Break)(IRemoteProcess *This);HRESULT ( *GetGlobalContainerObject)(IRemoteProcess *This, IRemoteContainerObject **ppGlobalContainerObject);HRESULT ( *FindClass)(IRemoteProcess *This, LPCOLESTR pszClassName, IRemoteClassField **ppClassType);HRESULT ( *TraceMethods)(IRemoteProcess *This, BOOL bTraceOn);HRESULT ( *GetThreadGroups)(IRemoteProcess *This, IJavaEnumRemoteThreadGroup **ppEnum);};
struct IAMExtDeviceVtbl {HRESULT ( *QueryInterface)(IAMExtDevice *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtDevice *This);ULONG ( *Release)(IAMExtDevice *This);HRESULT ( *GetCapability)(IAMExtDevice *This, int Capability, int *pValue, double *pdblValue);HRESULT ( *get_ExternalDeviceID)(IAMExtDevice *This, LPOLESTR *ppszData);HRESULT ( *get_ExternalDeviceVersion)(IAMExtDevice *This, LPOLESTR *ppszData);HRESULT ( *put_DevicePower)(IAMExtDevice *This, int PowerMode);HRESULT ( *get_DevicePower)(IAMExtDevice *This, int *pPowerMode);HRESULT ( *Calibrate)(IAMExtDevice *This, HEVENT hEvent, int Mode, int *pStatus);HRESULT ( *put_DevicePort)(IAMExtDevice *This, int DevicePort);HRESULT ( *get_DevicePort)(IAMExtDevice *This, int *pDevicePort);};
struct IPropertyBagVtbl {HRESULT ( *QueryInterface)(IPropertyBag *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag *This);ULONG ( *Release)(IPropertyBag *This);HRESULT ( *Read)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT ( *Write)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);};
struct tagDBPARAMETER {LPOLESTR pwszName;ITypeInfo *pTypeInfo;DB_NUMERIC *pNum;ULONG cbMaxLength;DBPARAMFLAGS dwFlags;DBTYPE wType;};
struct tagDBPARAMINFO {DBPARAMFLAGS dwFlags;ULONG iOrdinal;LPOLESTR pwszName;ITypeInfo *pTypeInfo;ULONG ulParamSize;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct IBindHostVtbl {HRESULT ( *QueryInterface)(IBindHost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindHost *This);ULONG ( *Release)(IBindHost *This);HRESULT ( *CreateMoniker)(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);HRESULT ( *MonikerBindToStorage)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);HRESULT ( *MonikerBindToObject)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC,  IID * riid, void **ppvObj);};
struct IErrorLogVtbl {HRESULT ( *QueryInterface)(IErrorLog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IErrorLog *This);ULONG ( *Release)(IErrorLog *This);HRESULT ( *AddError)(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);};
struct tagDBPROPINFO {LPOLESTR pwszDescription;DBPROPID dwPropertyID;DBPROPFLAGS dwFlags;VARTYPE vtType;VARIANT vValues;};
struct IBindCtxVtbl {HRESULT ( *QueryInterface)(IBindCtx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBindCtx *This);ULONG ( *Release)(IBindCtx *This);HRESULT ( *RegisterObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *RevokeObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT ( *ReleaseBoundObjects)(IBindCtx *This);HRESULT ( *SetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT ( *GetRunningObjectTable)(IBindCtx *This, IRunningObjectTable **pprot);HRESULT ( *RegisterObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);HRESULT ( *GetObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);HRESULT ( *EnumObjectParam)(IBindCtx *This, IEnumString **ppenum);HRESULT ( *RevokeObjectParam)(IBindCtx *This, LPOLESTR pszKey);};
struct tagFONTDESC {UINT cbSizeofstruct;LPOLESTR lpstrName;CY cySize;SHORT sWeight;SHORT sCharset;BOOL fItalic;BOOL fUnderline;BOOL fStrikethrough;};
struct tagPROPBAG2 {DWORD dwType;VARTYPE vt;CLIPFORMAT cfType;DWORD dwHint;LPOLESTR pstrName;CLSID clsid;};
struct tagSTATSTG {LPOLESTR pwcsName;DWORD type;ULARGE_INTEGER cbSize;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD grfMode;DWORD grfLocksSupported;CLSID clsid;DWORD grfStateBits;DWORD reserved;};
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 {wireHMETAFILEPICT hMetaFilePict;wireHENHMETAFILE hHEnhMetaFile;GDI_OBJECT *hGdiHandle;wireHGLOBAL hGlobal;LPOLESTR lpszFileName;BYTE_BLOB *pstm;BYTE_BLOB *pstg;};
struct IDispenserManagerVtbl {HRESULT ( *QueryInterface)(IDispenserManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispenserManager *This);ULONG ( *Release)(IDispenserManager *This);HRESULT ( *RegisterDispenser)(IDispenserManager *This, IDispenserDriver *MIDL_0015, LPCOLESTR szDispenserName, IHolder **MIDL_0016);HRESULT ( *GetContext)(IDispenserManager *This, INSTID *MIDL_0017, TRANSID *MIDL_0018);};
struct IFileSourceFilterVtbl {HRESULT ( *QueryInterface)(IFileSourceFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSourceFilter *This);ULONG ( *Release)(IFileSourceFilter *This);HRESULT ( *Load)(IFileSourceFilter *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSourceFilter *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);};
struct IInternetBindInfoVtbl {HRESULT ( *QueryInterface)(IInternetBindInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IInternetBindInfo *This);ULONG ( *Release)(IInternetBindInfo *This);HRESULT ( *GetBindInfo)(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT ( *GetBindString)(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);};
struct IMtsPackageEventsVtbl {HRESULT ( *QueryInterface)(IMtsPackageEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsPackageEvents *This);ULONG ( *Release)(IMtsPackageEvents *This);HRESULT ( *OnPackageActivation)(IMtsPackageEvents *This, LONGLONG perfCount,  GUID * guidPackage, LPCOLESTR sPackageName);HRESULT ( *OnPackageShutdown)(IMtsPackageEvents *This, LONGLONG perfCount,  GUID * guidPackage, LPCOLESTR sPackageName);};
struct IOleItemContainerVtbl {HRESULT ( *QueryInterface)(IOleItemContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleItemContainer *This);ULONG ( *Release)(IOleItemContainer *This);HRESULT ( *ParseDisplayName)(IOleItemContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleItemContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleItemContainer *This, BOOL fLock);HRESULT ( *GetObjectA)(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc,  IID * riid, void **ppvObject);HRESULT ( *GetObjectStorage)(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc,  IID * riid, void **ppvStorage);HRESULT ( *IsRunning)(IOleItemContainer *This, LPOLESTR pszItem);};
struct IRemoteArrayFieldVtbl {HRESULT ( *QueryInterface)(IRemoteArrayField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteArrayField *This);ULONG ( *Release)(IRemoteArrayField *This);HRESULT ( *GetName)(IRemoteArrayField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteArrayField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteArrayField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteArrayField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteArrayField *This, FIELDMODIFIERS *pulModifiers);HRESULT ( *GetSize)(IRemoteArrayField *This, ULONG *pcElements);};
struct ITypeChangeEventsVtbl {HRESULT ( *QueryInterface)(ITypeChangeEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeChangeEvents *This);ULONG ( *Release)(ITypeChangeEvents *This);HRESULT ( *RequestTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);HRESULT ( *AfterTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);};
struct ICreateErrorInfoVtbl {HRESULT ( *QueryInterface)(ICreateErrorInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateErrorInfo *This);ULONG ( *Release)(ICreateErrorInfo *This);HRESULT ( *SetGUID)(ICreateErrorInfo *This,  GUID * rguid);HRESULT ( *SetSource)(ICreateErrorInfo *This, LPOLESTR szSource);HRESULT ( *SetDescription)(ICreateErrorInfo *This, LPOLESTR szDescription);HRESULT ( *SetHelpFile)(ICreateErrorInfo *This, LPOLESTR szHelpFile);HRESULT ( *SetHelpContext)(ICreateErrorInfo *This, DWORD dwHelpContext);};
struct IRemoteDataFieldVtbl {HRESULT ( *QueryInterface)(IRemoteDataField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteDataField *This);ULONG ( *Release)(IRemoteDataField *This);HRESULT ( *GetName)(IRemoteDataField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteDataField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteDataField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteDataField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteDataField *This, FIELDMODIFIERS *pulModifiers);};
struct IFileSinkFilterVtbl {HRESULT ( *QueryInterface)(IFileSinkFilter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSinkFilter *This);ULONG ( *Release)(IFileSinkFilter *This);HRESULT ( *SetFileName)(IFileSinkFilter *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSinkFilter *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);};
struct IUrlHistoryStgVtbl {HRESULT ( *QueryInterface)(IUrlHistoryStg *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryStg *This);ULONG ( *Release)(IUrlHistoryStg *This);HRESULT ( *AddUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags);HRESULT ( *DeleteUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, DWORD dwFlags);HRESULT ( *QueryUrl)(IUrlHistoryStg *This, LPCOLESTR pocsUrl, DWORD dwFlags, LPSTATURL lpSTATURL);HRESULT ( *BindToObject)(IUrlHistoryStg *This, LPCOLESTR pocsUrl,  IID * riid, void **ppvOut);HRESULT ( *EnumUrls)(IUrlHistoryStg *This, IEnumSTATURL **ppEnum);};
struct IOleContainerVtbl {HRESULT ( *QueryInterface)(IOleContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleContainer *This);ULONG ( *Release)(IOleContainer *This);HRESULT ( *ParseDisplayName)(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *EnumObjects)(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT ( *LockContainer)(IOleContainer *This, BOOL fLock);};
struct ICommandCostVtbl {HRESULT ( *QueryInterface)(ICommandCost *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandCost *This);ULONG ( *Release)(ICommandCost *This);HRESULT ( *GetAccumulatedCost)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostLimits, DBCOST **prgCostLimits);HRESULT ( *GetCostEstimate)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostEstimates, DBCOST *prgCostEstimates);HRESULT ( *GetCostGoals)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostGoals, DBCOST *prgCostGoals);HRESULT ( *GetCostLimits)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG *pcCostLimits, DBCOST *prgCostLimits);HRESULT ( *SetCostGoals)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG cCostGoals,  DBCOST  *    rgCostGoals);HRESULT ( *SetCostLimits)(ICommandCost *This, LPCOLESTR pwszRowsetName, ULONG cCostLimits, DBCOST *prgCostLimits, DBEXECLIMITS dwExecutionFlags);};
struct IEnumSTATURLVtbl {HRESULT ( *QueryInterface)(IEnumSTATURL *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IEnumSTATURL *This);ULONG ( *Release)(IEnumSTATURL *This);HRESULT ( *Next)(IEnumSTATURL *This, ULONG celt, LPSTATURL rgelt, ULONG *pceltFetched);HRESULT ( *Skip)(IEnumSTATURL *This, ULONG celt);HRESULT ( *Reset)(IEnumSTATURL *This);HRESULT ( *Clone)(IEnumSTATURL *This, IEnumSTATURL **ppenum);HRESULT ( *SetFilter)(IEnumSTATURL *This, LPCOLESTR poszFilter, DWORD dwFlags);};
struct IRemoteFieldVtbl {HRESULT ( *QueryInterface)(IRemoteField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteField *This);ULONG ( *Release)(IRemoteField *This);HRESULT ( *GetName)(IRemoteField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteField *This, FIELDMODIFIERS *pulModifiers);};
struct IComBindingVtbl {HRESULT ( *QueryInterface)(IComBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IComBinding *This);ULONG ( *Release)(IComBinding *This);HRESULT ( *InitBinding)(IComBinding *This, DWORD dwEndpointFlags, DWORD dwNICFlags, DWORD mbzReserved1, DWORD mbzReserved2, LPOLESTR pszBinding);HRESULT ( *QueryBinding)(IComBinding *This, LPDWORD pdwEndpointFlags, LPDWORD pdwNICFlags, LPDWORD mbzReserved1, LPDWORD mbzReserved2, LPOLESTR *ppszBinding);};
struct tagDBCOLUMNINFO {LPOLESTR pwszName;ITypeInfo *pTypeInfo;ULONG iOrdinal;DBCOLUMNFLAGS dwFlags;ULONG ulColumnSize;DBTYPE wType;BYTE bPrecision;BYTE bScale;DBID columnid;};
struct tagVARDESC {MEMBERID memid;LPOLESTR lpstrSchema;tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B __anonymous0;ELEMDESC elemdescVar;WORD wVarFlags;VARKIND varkind;};
struct IRemoteContainerFieldVtbl {HRESULT ( *QueryInterface)(IRemoteContainerField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteContainerField *This);ULONG ( *Release)(IRemoteContainerField *This);HRESULT ( *GetName)(IRemoteContainerField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteContainerField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteContainerField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteContainerField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteContainerField *This, FIELDMODIFIERS *pulModifiers);HRESULT ( *GetFields)(IRemoteContainerField *This, IJavaEnumRemoteField **ppEnum, FIELDKIND ulKind, FIELDMODIFIERS ulModifiers, LPCOLESTR lpcszName);};
struct IRemoteMethodFieldVtbl {HRESULT ( *QueryInterface)(IRemoteMethodField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteMethodField *This);ULONG ( *Release)(IRemoteMethodField *This);HRESULT ( *GetName)(IRemoteMethodField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteMethodField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteMethodField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteMethodField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteMethodField *This, FIELDMODIFIERS *pulModifiers);HRESULT ( *GetFields)(IRemoteMethodField *This, IJavaEnumRemoteField **ppEnum, FIELDKIND ulKind, FIELDMODIFIERS ulModifiers, LPCOLESTR lpcszName);HRESULT ( *SetBreakpoint)(IRemoteMethodField *This, ULONG offPC);HRESULT ( *ClearBreakpoint)(IRemoteMethodField *This, ULONG offPC);HRESULT ( *GetLineInfo)(IRemoteMethodField *This, IJavaEnumLINEINFO **ppEnum);HRESULT ( *GetBytes)(IRemoteMethodField *This, ILockBytes **ppLockBytes);HRESULT ( *GetScope)(IRemoteMethodField *This, IRemoteField *pField, ULONG *poffStart, ULONG *pcbScope);HRESULT ( *GetIndexedField)(IRemoteMethodField *This, ULONG slot, ULONG offPC, IRemoteField **ppField);};
struct IFileSinkFilter2Vtbl {HRESULT ( *QueryInterface)(IFileSinkFilter2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFileSinkFilter2 *This);ULONG ( *Release)(IFileSinkFilter2 *This);HRESULT ( *SetFileName)(IFileSinkFilter2 *This, LPCOLESTR pszFileName,  AM_MEDIA_TYPE *pmt);HRESULT ( *GetCurFile)(IFileSinkFilter2 *This, LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);HRESULT ( *SetMode)(IFileSinkFilter2 *This, DWORD dwFlags);HRESULT ( *GetMode)(IFileSinkFilter2 *This, DWORD *pdwFlags);};
struct IAMExtTransportVtbl {HRESULT ( *QueryInterface)(IAMExtTransport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAMExtTransport *This);ULONG ( *Release)(IAMExtTransport *This);HRESULT ( *GetCapability)(IAMExtTransport *This, int Capability, int *pValue, double *pdblValue);HRESULT ( *put_MediaState)(IAMExtTransport *This, int State);HRESULT ( *get_MediaState)(IAMExtTransport *This, int *pState);HRESULT ( *put_LocalControl)(IAMExtTransport *This, int State);HRESULT ( *get_LocalControl)(IAMExtTransport *This, int *pState);HRESULT ( *GetStatus)(IAMExtTransport *This, int StatusItem, int *pValue);HRESULT ( *GetTransportBasicParameters)(IAMExtTransport *This, int Param, int *pValue, LPOLESTR *ppszData);HRESULT ( *SetTransportBasicParameters)(IAMExtTransport *This, int Param, int Value, LPCOLESTR pszData);HRESULT ( *GetTransportVideoParameters)(IAMExtTransport *This, int Param, int *pValue);HRESULT ( *SetTransportVideoParameters)(IAMExtTransport *This, int Param, int Value);HRESULT ( *GetTransportAudioParameters)(IAMExtTransport *This, int Param, int *pValue);HRESULT ( *SetTransportAudioParameters)(IAMExtTransport *This, int Param, int Value);HRESULT ( *put_Mode)(IAMExtTransport *This, int Mode);HRESULT ( *get_Mode)(IAMExtTransport *This, int *pMode);HRESULT ( *put_Rate)(IAMExtTransport *This, double dblRate);HRESULT ( *get_Rate)(IAMExtTransport *This, double *pdblRate);HRESULT ( *GetChase)(IAMExtTransport *This, int *pEnabled, int *pOffset, HEVENT *phEvent);HRESULT ( *SetChase)(IAMExtTransport *This, int Enable, int Offset, HEVENT hEvent);HRESULT ( *GetBump)(IAMExtTransport *This, int *pSpeed, int *pDuration);HRESULT ( *SetBump)(IAMExtTransport *This, int Speed, int Duration);HRESULT ( *get_AntiClogControl)(IAMExtTransport *This, int *pEnabled);HRESULT ( *put_AntiClogControl)(IAMExtTransport *This, int Enable);HRESULT ( *GetEditPropertySet)(IAMExtTransport *This, int EditID, int *pState);HRESULT ( *SetEditPropertySet)(IAMExtTransport *This, int *pEditID, int State);HRESULT ( *GetEditProperty)(IAMExtTransport *This, int EditID, int Param, int *pValue);HRESULT ( *SetEditProperty)(IAMExtTransport *This, int EditID, int Param, int Value);HRESULT ( *get_EditStart)(IAMExtTransport *This, int *pValue);HRESULT ( *put_EditStart)(IAMExtTransport *This, int Value);};
struct IDBAsynchStatusVtbl {HRESULT ( *QueryInterface)(IDBAsynchStatus *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBAsynchStatus *This);ULONG ( *Release)(IDBAsynchStatus *This);HRESULT ( *Abort)(IDBAsynchStatus *This, HCHAPTER hChapter, DBASYNCHOP eOperation);HRESULT ( *GetStatus)(IDBAsynchStatus *This, HCHAPTER hChapter, DBASYNCHOP eOperation, ULONG *pulProgress, ULONG *pulProgressMax, DBASYNCHPHASE *peAsynchPhase, LPOLESTR *ppwszStatusText);};
struct IUrlHistoryStg2Vtbl {HRESULT ( *QueryInterface)(IUrlHistoryStg2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IUrlHistoryStg2 *This);ULONG ( *Release)(IUrlHistoryStg2 *This);HRESULT ( *AddUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags);HRESULT ( *DeleteUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, DWORD dwFlags);HRESULT ( *QueryUrl)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, DWORD dwFlags, LPSTATURL lpSTATURL);HRESULT ( *BindToObject)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl,  IID * riid, void **ppvOut);HRESULT ( *EnumUrls)(IUrlHistoryStg2 *This, IEnumSTATURL **ppEnum);HRESULT ( *AddUrlAndNotify)(IUrlHistoryStg2 *This, LPCOLESTR pocsUrl, LPCOLESTR pocsTitle, DWORD dwFlags, BOOL fWriteHistory, IOleCommandTarget *poctNotify, IUnknown *punkISFolder);HRESULT ( *ClearHistory)(IUrlHistoryStg2 *This);};
struct IPropertyBag2Vtbl {HRESULT ( *QueryInterface)(IPropertyBag2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyBag2 *This);ULONG ( *Release)(IPropertyBag2 *This);HRESULT ( *Read)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, IErrorLog *pErrLog, VARIANT *pvarValue, HRESULT *phrError);HRESULT ( *Write)(IPropertyBag2 *This, ULONG cProperties, PROPBAG2 *pPropBag, VARIANT *pvarValue);HRESULT ( *CountProperties)(IPropertyBag2 *This, ULONG *pcProperties);HRESULT ( *GetPropertyInfo)(IPropertyBag2 *This, ULONG iProperty, ULONG cProperties, PROPBAG2 *pPropBag, ULONG *pcProperties);HRESULT ( *LoadObject)(IPropertyBag2 *This, LPCOLESTR pstrName, DWORD dwHint, IUnknown *pUnkObject, IErrorLog *pErrLog);};
struct IJavaExecuteVtbl {HRESULT ( *QueryInterface)(IJavaExecute *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IJavaExecute *This);ULONG ( *Release)(IJavaExecute *This);HRESULT ( *GetDefaultClassPath)(IJavaExecute *This, LPOLESTR *ppszClassPath);HRESULT ( *Execute)(IJavaExecute *This, LPJAVAEXECUTEINFO pjei, LPERRORINFO *pperrorinfo);};
struct tagPACKAGEDETAIL {CLASSPATHTYPE PathType;LPOLESTR pszPath;LPOLESTR pszIconPath;LPOLESTR pszSetupCommand;DWORD dwActFlags;LPOLESTR pszVendor;LPOLESTR pszPackageName;LPOLESTR pszProductName;DWORD dwContext;CSPLATFORM Platform;LCID Locale;DWORD dwVersionHi;DWORD dwVersionLo;ULONGLONG Usn;DWORD cApps;APPDETAIL *pAppDetail;};
struct tagDBCOLUMNDESC {LPOLESTR pwszTypeName;ITypeInfo *pTypeInfo;DBPROPSET *rgPropertySets;CLSID *pclsid;ULONG cPropertySets;ULONG ulColumnSize;DBID dbcid;DBTYPE wType;BYTE bPrecision;BYTE bScale;};
struct tagOCPFIPARAMS {ULONG cbStructSize;HWND hWndOwner;int x;int y;LPCOLESTR lpszCaption;ULONG cObjects;LPUNKNOWN *lplpUnk;ULONG cPages;CLSID *lpPages;LCID lcid;DISPID dispidInitialProperty;};
struct ITypeCompVtbl {HRESULT ( *QueryInterface)(ITypeComp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeComp *This);ULONG ( *Release)(ITypeComp *This);HRESULT ( *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);HRESULT ( *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);};
struct _AdviseNotify {struct _AdviseNotify *lpNext;LPSTR lpszOwnerTag;LPWSTR lpwszOwnerTag;LPBYTE lpbBlob;ULONG cbBlob;LPADVISECALLBACK lpfnCallback;LPVOID lpvUserContext;BOOL fFirstTime;};
struct IBindingVtbl {HRESULT ( *QueryInterface)(IBinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IBinding *This);ULONG ( *Release)(IBinding *This);HRESULT ( *Abort)(IBinding *This);HRESULT ( *Suspend)(IBinding *This);HRESULT ( *Resume)(IBinding *This);HRESULT ( *SetPriority)(IBinding *This, LONG nPriority);HRESULT ( *GetPriority)(IBinding *This, LONG *pnPriority);HRESULT ( *GetBindResult)(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);};
struct IOleLinkVtbl {HRESULT ( *QueryInterface)(IOleLink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleLink *This);ULONG ( *Release)(IOleLink *This);HRESULT ( *SetUpdateOptions)(IOleLink *This, DWORD dwUpdateOpt);HRESULT ( *GetUpdateOptions)(IOleLink *This, DWORD *pdwUpdateOpt);HRESULT ( *SetSourceMoniker)(IOleLink *This, IMoniker *pmk,  CLSID * rclsid);HRESULT ( *GetSourceMoniker)(IOleLink *This, IMoniker **ppmk);HRESULT ( *SetSourceDisplayName)(IOleLink *This, LPCOLESTR pszStatusText);HRESULT ( *GetSourceDisplayName)(IOleLink *This, LPOLESTR *ppszDisplayName);HRESULT ( *BindToSource)(IOleLink *This, DWORD bindflags, IBindCtx *pbc);HRESULT ( *BindIfRunning)(IOleLink *This);HRESULT ( *GetBoundSource)(IOleLink *This, IUnknown **ppunk);HRESULT ( *UnbindSource)(IOleLink *This);HRESULT ( *Update)(IOleLink *This, IBindCtx *pbc);};
struct IDBInfoVtbl {HRESULT ( *QueryInterface)(IDBInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBInfo *This);ULONG ( *Release)(IDBInfo *This);HRESULT ( *GetKeywords)(IDBInfo *This, LPOLESTR *ppwszKeywords);HRESULT ( *GetLiteralInfo)(IDBInfo *This, ULONG cLiterals,  DBLITERAL  *    rgLiterals, ULONG *pcLiteralInfo, DBLITERALINFO **prgLiteralInfo, OLECHAR **ppCharBuffer);};
struct IDBPromptInitializeVtbl {HRESULT ( *QueryInterface)(IDBPromptInitialize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBPromptInitialize *This);ULONG ( *Release)(IDBPromptInitialize *This);HRESULT ( *PromptDataSource)(IDBPromptInitialize *This, IUnknown *pUnkOuter, HWND hWndParent, DBPROMPTOPTIONS dwPromptOptions, ULONG cSourceTypeFilter, DBSOURCETYPE *rgSourceTypeFilter, LPCOLESTR pwszszzProviderFilter,  IID * riid, IUnknown **ppDataSource);HRESULT ( *PromptFileName)(IDBPromptInitialize *This, HWND hWndParent, DBPROMPTOPTIONS dwPromptOptions, LPCOLESTR pwszInitialDirectory, LPCOLESTR pwszInitialFile, LPOLESTR *ppwszSelectedFile);};
struct IOleInPlaceUIWindowVtbl {HRESULT ( *QueryInterface)(IOleInPlaceUIWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceUIWindow *This);ULONG ( *Release)(IOleInPlaceUIWindow *This);HRESULT ( *GetWindow)(IOleInPlaceUIWindow *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);};
struct IActiveScriptParseVtbl {HRESULT ( *QueryInterface)(IActiveScriptParse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptParse *This);ULONG ( *Release)(IActiveScriptParse *This);HRESULT ( *InitNew)(IActiveScriptParse *This);HRESULT ( *AddScriptlet)(IActiveScriptParse *This, LPCOLESTR pstrDefaultName, LPCOLESTR pstrCode, LPCOLESTR pstrItemName, LPCOLESTR pstrSubItemName, LPCOLESTR pstrEventName, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, BSTR *pbstrName, EXCEPINFO *pexcepinfo);HRESULT ( *ParseScriptText)(IActiveScriptParse *This, LPCOLESTR pstrCode, LPCOLESTR pstrItemName, IUnknown *punkContext, LPCOLESTR pstrDelimiter, DWORD dwSourceContextCookie, ULONG ulStartingLineNumber, DWORD dwFlags, VARIANT *pvarResult, EXCEPINFO *pexcepinfo);};
struct IMtsResourceEventsVtbl {HRESULT ( *QueryInterface)(IMtsResourceEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsResourceEvents *This);ULONG ( *Release)(IMtsResourceEvents *This);HRESULT ( *OnResourceCreate)(IMtsResourceEvents *This, LONGLONG perfCount,  GUID * guidActivity, MTS_OBJID ObjectID, LPCOLESTR pszType, MTS_RESID resId);HRESULT ( *OnResourceAllocate)(IMtsResourceEvents *This, LONGLONG perfCount,  GUID * guidActivity, MTS_OBJID ObjectID, LPCOLESTR pszType, MTS_RESID resId);HRESULT ( *OnResourceRecycle)(IMtsResourceEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID, LPCOLESTR pszType, MTS_RESID resId);HRESULT ( *OnResourceDestroy)(IMtsResourceEvents *This, LONGLONG perfCount, MTS_OBJID ObjectID, LPCOLESTR pszType, MTS_RESID resId);};
struct IRemoteClassFieldVtbl {HRESULT ( *QueryInterface)(IRemoteClassField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteClassField *This);ULONG ( *Release)(IRemoteClassField *This);HRESULT ( *GetName)(IRemoteClassField *This, LPOLESTR *ppszName);HRESULT ( *GetKind)(IRemoteClassField *This, FIELDKIND *pfk);HRESULT ( *GetType)(IRemoteClassField *This, IRemoteField **ppType);HRESULT ( *GetContainer)(IRemoteClassField *This, IRemoteContainerField **ppContainer);HRESULT ( *GetModifiers)(IRemoteClassField *This, FIELDMODIFIERS *pulModifiers);HRESULT ( *GetFields)(IRemoteClassField *This, IJavaEnumRemoteField **ppEnum, FIELDKIND ulKind, FIELDMODIFIERS ulModifiers, LPCOLESTR lpcszName);HRESULT ( *GetFileName)(IRemoteClassField *This, LPOLESTR *ppszFileName);HRESULT ( *GetSourceFileName)(IRemoteClassField *This, LPOLESTR *ppszSourceFileName);HRESULT ( *GetSuperclass)(IRemoteClassField *This, IRemoteClassField **ppSuperclass);HRESULT ( *GetInterfaces)(IRemoteClassField *This, IJavaEnumRemoteField **ppEnum);HRESULT ( *GetConstantPoolItem)(IRemoteClassField *This, ULONG indexCP, BYTE **ppCPBytes, ULONG *plength);};
struct IDBAsynchNotifyVtbl {HRESULT ( *QueryInterface)(IDBAsynchNotify *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDBAsynchNotify *This);ULONG ( *Release)(IDBAsynchNotify *This);HRESULT ( *OnLowResource)(IDBAsynchNotify *This, DWORD dwReserved);HRESULT ( *OnProgress)(IDBAsynchNotify *This, HCHAPTER hChapter, DBASYNCHOP eOperation, ULONG ulProgress, ULONG ulProgressMax, DBASYNCHPHASE eAsynchPhase, LPOLESTR pwszStatusText);HRESULT ( *OnStop)(IDBAsynchNotify *This, HCHAPTER hChapter, DBASYNCHOP eOperation, HRESULT hrStatus, LPOLESTR pwszStatusText);};
struct ICommandTextVtbl {HRESULT ( *QueryInterface)(ICommandText *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICommandText *This);ULONG ( *Release)(ICommandText *This);HRESULT ( *Cancel)(ICommandText *This);HRESULT ( *Execute)(ICommandText *This, IUnknown *pUnkOuter,  IID * riid, DBPARAMS *pParams, LONG *pcRowsAffected, IUnknown **ppRowset);HRESULT ( *GetDBSession)(ICommandText *This,  IID * riid, IUnknown **ppSession);HRESULT ( *GetCommandText)(ICommandText *This, GUID *pguidDialect, LPOLESTR *ppwszCommand);HRESULT ( *SetCommandText)(ICommandText *This,  GUID * rguidDialect, LPCOLESTR pwszCommand);};
struct IPersistFileVtbl {HRESULT ( *QueryInterface)(IPersistFile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPersistFile *This);ULONG ( *Release)(IPersistFile *This);HRESULT ( *GetClassID)(IPersistFile *This, CLSID *pClassID);HRESULT ( *IsDirty)(IPersistFile *This);HRESULT ( *Load)(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode);HRESULT ( *Save)(IPersistFile *This, LPCOLESTR pszFileName, BOOL fRemember);HRESULT ( *SaveCompleted)(IPersistFile *This, LPCOLESTR pszFileName);HRESULT ( *GetCurFile)(IPersistFile *This, LPOLESTR *ppszFileName);};
struct ICaptureGraphBuilderVtbl {HRESULT ( *QueryInterface)(ICaptureGraphBuilder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICaptureGraphBuilder *This);ULONG ( *Release)(ICaptureGraphBuilder *This);HRESULT ( *SetFiltergraph)(ICaptureGraphBuilder *This, IGraphBuilder *pfg);HRESULT ( *GetFiltergraph)(ICaptureGraphBuilder *This, IGraphBuilder **ppfg);HRESULT ( *SetOutputFileName)(ICaptureGraphBuilder *This,  GUID *pType, LPCOLESTR lpstrFile, IBaseFilter **ppf, IFileSinkFilter **ppSink);HRESULT ( *FindInterface)(ICaptureGraphBuilder *This,  GUID *pCategory, IBaseFilter *pf,  IID * riid, void **ppint);HRESULT ( *RenderStream)(ICaptureGraphBuilder *This,  GUID *pCategory, IUnknown *pSource, IBaseFilter *pfCompressor, IBaseFilter *pfRenderer);HRESULT ( *ControlStream)(ICaptureGraphBuilder *This,  GUID *pCategory, IBaseFilter *pFilter, REFERENCE_TIME *pstart, REFERENCE_TIME *pstop, WORD wStartCookie, WORD wStopCookie);HRESULT ( *AllocCapFile)(ICaptureGraphBuilder *This, LPCOLESTR lpstr, DWORDLONG dwlSize);HRESULT ( *CopyCaptureFile)(ICaptureGraphBuilder *This, LPOLESTR lpwstrOld, LPOLESTR lpwstrNew, int fAllowEscAbort, IAMCopyCaptureFileProgress *pCallback);};
struct IDocHostShowUIVtbl {HRESULT ( *QueryInterface)(IDocHostShowUI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostShowUI *This);ULONG ( *Release)(IDocHostShowUI *This);HRESULT ( *ShowMessage)(IDocHostShowUI *This, HWND hwnd, LPOLESTR lpstrText, LPOLESTR lpstrCaption, DWORD dwType, LPOLESTR lpstrHelpFile, DWORD dwHelpContext, LRESULT *plResult);HRESULT ( *ShowHelp)(IDocHostShowUI *This, HWND hwnd, LPOLESTR pszHelpFile, UINT uCommand, DWORD dwData, POINT ptMouse, IDispatch *pDispatchObjectHit);};
struct IJavaExecute2Vtbl {HRESULT ( *QueryInterface)(IJavaExecute2 *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IJavaExecute2 *This);ULONG ( *Release)(IJavaExecute2 *This);HRESULT ( *GetDefaultClassPath)(IJavaExecute2 *This, LPOLESTR *ppszClassPath);HRESULT ( *Execute)(IJavaExecute2 *This, LPJAVAEXECUTEINFO pjei, LPERRORINFO *pperrorinfo);HRESULT ( *SetSystemProperties)(IJavaExecute2 *This, LPENUMJAVAPROPERTY penumProperties);HRESULT ( *SetClassSource)(IJavaExecute2 *This, DWORD dwType, LPVOID pData, DWORD dwLen);};
struct IRecordInfoVtbl {HRESULT ( *QueryInterface)(IRecordInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRecordInfo *This);ULONG ( *Release)(IRecordInfo *This);HRESULT ( *RecordInit)(IRecordInfo *This, PVOID pvNew);HRESULT ( *RecordClear)(IRecordInfo *This, PVOID pvExisting);HRESULT ( *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);HRESULT ( *GetGuid)(IRecordInfo *This, GUID *pguid);HRESULT ( *GetName)(IRecordInfo *This, BSTR *pbstrName);HRESULT ( *GetSize)(IRecordInfo *This, ULONG *pcbSize);HRESULT ( *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);HRESULT ( *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);HRESULT ( *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT ( *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);BOOL ( *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);PVOID ( *RecordCreate)(IRecordInfo *This);HRESULT ( *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);HRESULT ( *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);};
struct IMonikerVtbl {HRESULT ( *QueryInterface)(IMoniker *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMoniker *This);ULONG ( *Release)(IMoniker *This);HRESULT ( *GetClassID)(IMoniker *This, CLSID *pClassID);HRESULT ( *IsDirty)(IMoniker *This);HRESULT ( *Load)(IMoniker *This, IStream *pStm);HRESULT ( *Save)(IMoniker *This, IStream *pStm, BOOL fClearDirty);HRESULT ( *GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);HRESULT ( *BindToObject)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riidResult, void **ppvResult);HRESULT ( *BindToStorage)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft,  IID * riid, void **ppvObj);HRESULT ( *Reduce)(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);HRESULT ( *ComposeWith)(IMoniker *This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);HRESULT ( *Enum)(IMoniker *This, BOOL fForward, IEnumMoniker **ppenumMoniker);HRESULT ( *IsEqual)(IMoniker *This, IMoniker *pmkOtherMoniker);HRESULT ( *Hash)(IMoniker *This, DWORD *pdwHash);HRESULT ( *IsRunning)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);HRESULT ( *GetTimeOfLastChange)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);HRESULT ( *Inverse)(IMoniker *This, IMoniker **ppmk);HRESULT ( *CommonPrefixWith)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);HRESULT ( *RelativePathTo)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);HRESULT ( *GetDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);HRESULT ( *ParseDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT ( *IsSystemMoniker)(IMoniker *This, DWORD *pdwMksys);};
struct IActiveScriptSiteVtbl {HRESULT ( *QueryInterface)(IActiveScriptSite *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScriptSite *This);ULONG ( *Release)(IActiveScriptSite *This);HRESULT ( *GetLCID)(IActiveScriptSite *This, LCID *plcid);HRESULT ( *GetItemInfo)(IActiveScriptSite *This, LPCOLESTR pstrName, DWORD dwReturnMask, IUnknown **ppiunkItem, ITypeInfo **ppti);HRESULT ( *GetDocVersionString)(IActiveScriptSite *This, BSTR *pbstrVersion);HRESULT ( *OnScriptTerminate)(IActiveScriptSite *This,  VARIANT *pvarResult,  EXCEPINFO *pexcepinfo);HRESULT ( *OnStateChange)(IActiveScriptSite *This, SCRIPTSTATE ssScriptState);HRESULT ( *OnScriptError)(IActiveScriptSite *This, IActiveScriptError *pscripterror);HRESULT ( *OnEnterScript)(IActiveScriptSite *This);HRESULT ( *OnLeaveScript)(IActiveScriptSite *This);};
struct IDataInitializeVtbl {HRESULT ( *QueryInterface)(IDataInitialize *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataInitialize *This);ULONG ( *Release)(IDataInitialize *This);HRESULT ( *GetDataSource)(IDataInitialize *This, IUnknown *pUnkOuter, DWORD dwClsCtx, LPCOLESTR pwszInitializationString,  IID * riid, IUnknown **ppDataSource);HRESULT ( *GetInitializationString)(IDataInitialize *This, IUnknown *pDataSource, boolean fIncludePassword, LPOLESTR *ppwszInitString);HRESULT ( *CreateDBInstance)(IDataInitialize *This,  CLSID * clsidProvider, IUnknown *pUnkOuter, DWORD dwClsCtx, LPOLESTR pwszReserved,  IID * riid, IUnknown **ppDataSource);HRESULT ( *CreateDBInstanceEx)(IDataInitialize *This,  CLSID * clsidProvider, IUnknown *pUnkOuter, DWORD dwClsCtx, LPOLESTR pwszReserved, COSERVERINFO *pServerInfo, ULONG cmq, MULTI_QI *rgmqResults);HRESULT ( *LoadStringFromStorage)(IDataInitialize *This, LPCOLESTR pwszFileName, LPOLESTR *ppwszInitializationString);HRESULT ( *WriteStringToStorage)(IDataInitialize *This, LPCOLESTR pwszFileName, LPCOLESTR pwszInitializationString, DWORD dwCreationDisposition);};
struct ICreateTypeLibVtbl {HRESULT ( *QueryInterface)(ICreateTypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib *This);ULONG ( *Release)(ICreateTypeLib *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib *This);};
struct IActiveScriptVtbl {HRESULT ( *QueryInterface)(IActiveScript *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IActiveScript *This);ULONG ( *Release)(IActiveScript *This);HRESULT ( *SetScriptSite)(IActiveScript *This, IActiveScriptSite *pass);HRESULT ( *GetScriptSite)(IActiveScript *This,  IID * riid, void **ppvObject);HRESULT ( *SetScriptState)(IActiveScript *This, SCRIPTSTATE ss);HRESULT ( *GetScriptState)(IActiveScript *This, SCRIPTSTATE *pssState);HRESULT ( *Close)(IActiveScript *This);HRESULT ( *AddNamedItem)(IActiveScript *This, LPCOLESTR pstrName, DWORD dwFlags);HRESULT ( *AddTypeLib)(IActiveScript *This,  GUID * rguidTypeLib, DWORD dwMajor, DWORD dwMinor, DWORD dwFlags);HRESULT ( *GetScriptDispatch)(IActiveScript *This, LPCOLESTR pstrItemName, IDispatch **ppdisp);HRESULT ( *GetCurrentScriptThreadID)(IActiveScript *This, SCRIPTTHREADID *pstidThread);HRESULT ( *GetScriptThreadID)(IActiveScript *This, DWORD dwWin32ThreadId, SCRIPTTHREADID *pstidThread);HRESULT ( *GetScriptThreadState)(IActiveScript *This, SCRIPTTHREADID stidThread, SCRIPTTHREADSTATE *pstsState);HRESULT ( *InterruptScriptThread)(IActiveScript *This, SCRIPTTHREADID stidThread,  EXCEPINFO *pexcepinfo, DWORD dwFlags);HRESULT ( *Clone)(IActiveScript *This, IActiveScript **ppscript);};
struct IPropertyPageVtbl {HRESULT ( *QueryInterface)(IPropertyPage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage *This);ULONG ( *Release)(IPropertyPage *This);HRESULT ( *SetPageSite)(IPropertyPage *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage *This);HRESULT ( *GetPageInfo)(IPropertyPage *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage *This);HRESULT ( *Apply)(IPropertyPage *This);HRESULT ( *Help)(IPropertyPage *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage *This, MSG *pMsg);};
struct IClassAdminVtbl {HRESULT ( *QueryInterface)(IClassAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClassAdmin *This);ULONG ( *Release)(IClassAdmin *This);HRESULT ( *NewClass)(IClassAdmin *This, CLASSDETAIL *pClassDetail);HRESULT ( *DeleteClass)(IClassAdmin *This,  CLSID * guidClsId);HRESULT ( *NewInterface)(IClassAdmin *This,  IID * iid, LPOLESTR pszDesc,  CLSID * psclsid,  CLSID * typelibid);HRESULT ( *DeleteInterface)(IClassAdmin *This,  IID * iid);HRESULT ( *NewPackage)(IClassAdmin *This, PACKAGEDETAIL *pPackageDetail);HRESULT ( *DeletePackage)(IClassAdmin *This, LPOLESTR pszPackageName);HRESULT ( *GetClassesEnum)(IClassAdmin *This, IEnumClass **ppIEnumClass);HRESULT ( *GetPackagesEnum)(IClassAdmin *This,  CLSID * guidClsid, LPOLESTR pszVendor, CSPLATFORM Platform, DWORD dwContext, LCID Locale, IEnumPackage **ppIEnumPackage);HRESULT ( *GetClassDetails)(IClassAdmin *This,  CLSID * guidClsId, CLASSDETAIL *pClassDetail);HRESULT ( *GetIidDetails)(IClassAdmin *This,  IID * iid, LPOLESTR *ppszDesc, CLSID *psClsid, CLSID *pTypeLibId);HRESULT ( *GetPackageDetails)(IClassAdmin *This, LPOLESTR pszPackageName, PACKAGEDETAIL *pPackageDetail);};
struct tagTYPEATTR {GUID guid;LCID lcid;DWORD dwReserved;MEMBERID memidConstructor;MEMBERID memidDestructor;LPOLESTR lpstrSchema;ULONG cbSizeInstance;TYPEKIND typekind;WORD cFuncs;WORD cVars;WORD cImplTypes;WORD cbSizeVft;WORD cbAlignment;WORD wTypeFlags;WORD wMajorVerNum;WORD wMinorVerNum;TYPEDESC tdescAlias;IDLDESC idldescType;};
struct IHTMLStyleSheetRulesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetRulesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetRulesCollection *This);ULONG ( *Release)(IHTMLStyleSheetRulesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetRulesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetRulesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetRulesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetRulesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLStyleSheetRulesCollection *This, int *p);HRESULT ( *item)(IHTMLStyleSheetRulesCollection *This, int index, IHTMLStyleSheetRule **ppHTMLStyleSheetRule);};
struct HTMLOptionButtonElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLOptionButtonElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLOptionButtonElementEvents *This);ULONG ( *Release)(HTMLOptionButtonElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLOptionButtonElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLOptionButtonElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLOptionButtonElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLOptionButtonElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLOptionButtonElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLOptionButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLOptionButtonElement *This);ULONG ( *Release)(DispIHTMLOptionButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLOptionButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLOptionButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLOptionButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLOptionButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputButtonElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputButtonElement *This);ULONG ( *Release)(DispIHTMLInputButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IAgentAudioOutputPropertiesVtbl {HRESULT ( *QueryInterface)(IAgentAudioOutputProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentAudioOutputProperties *This);ULONG ( *Release)(IAgentAudioOutputProperties *This);HRESULT ( *GetTypeInfoCount)(IAgentAudioOutputProperties *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentAudioOutputProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentAudioOutputProperties *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentAudioOutputProperties *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetEnabled)(IAgentAudioOutputProperties *This, int *pbEnabled);HRESULT ( *GetUsingSoundEffects)(IAgentAudioOutputProperties *This, int *pbUsingSoundEffects);};
struct IXMLElementNotificationSinkVtbl {HRESULT ( *QueryInterface)(IXMLElementNotificationSink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElementNotificationSink *This);ULONG ( *Release)(IXMLElementNotificationSink *This);HRESULT ( *GetTypeInfoCount)(IXMLElementNotificationSink *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElementNotificationSink *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElementNotificationSink *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElementNotificationSink *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ChildAdded)(IXMLElementNotificationSink *This, IDispatch *pChildElem);};
struct HTMLInputFileElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputFileElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputFileElementEvents *This);ULONG ( *Release)(HTMLInputFileElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputFileElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputFileElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputFileElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputFileElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputTextElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputTextElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputTextElementEvents *This);ULONG ( *Release)(HTMLInputTextElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputTextElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputTextElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputTextElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputTextElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLStyleSheetsCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetsCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetsCollection *This);ULONG ( *Release)(IHTMLStyleSheetsCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetsCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetsCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetsCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLStyleSheetsCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLStyleSheetsCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLStyleSheetsCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct ITMultiChannelNotificationVtbl {HRESULT ( *QueryInterface)(ITMultiChannelNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMultiChannelNotification *This);ULONG ( *Release)(ITMultiChannelNotification *This);HRESULT ( *GetTypeInfoCount)(ITMultiChannelNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMultiChannelNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMultiChannelNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMultiChannelNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ChannelChangeEvent)(ITMultiChannelNotification *This, ITChannel *pChannel);};
struct DispIHTMLInputFileElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputFileElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputFileElement *This);ULONG ( *Release)(DispIHTMLInputFileElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputFileElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputFileElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputFileElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputFileElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputTextElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputTextElement *This);ULONG ( *Release)(DispIHTMLInputTextElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLOptionElementFactoryVtbl {HRESULT ( *QueryInterface)(IHTMLOptionElementFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElementFactory *This);ULONG ( *Release)(IHTMLOptionElementFactory *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElementFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElementFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElementFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElementFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *create)(IHTMLOptionElementFactory *This, VARIANT text, VARIANT value, VARIANT defaultselected, VARIANT selected, IHTMLOptionElement **MIDL_0017);};
struct DispIHTMLBaseFontElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLBaseFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBaseFontElement *This);ULONG ( *Release)(DispIHTMLBaseFontElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBaseFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBaseFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBaseFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBaseFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFieldSetElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLFieldSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFieldSetElement *This);ULONG ( *Release)(DispIHTMLFieldSetElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFieldSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFieldSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFieldSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFieldSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFrameSetElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLFrameSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFrameSetElement *This);ULONG ( *Release)(DispIHTMLFrameSetElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFrameSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFrameSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFrameSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFrameSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTextAreaElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLTextAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTextAreaElement *This);ULONG ( *Release)(DispIHTMLTextAreaElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTextAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTextAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTextAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTextAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLControlElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLControlElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLControlElementEvents *This);ULONG ( *Release)(HTMLControlElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLControlElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLControlElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLControlElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLControlElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMarqueeElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLMarqueeElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMarqueeElementEvents *This);ULONG ( *Release)(HTMLMarqueeElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLMarqueeElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMarqueeElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMarqueeElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMarqueeElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLImageElementFactoryVtbl {HRESULT ( *QueryInterface)(IHTMLImageElementFactory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLImageElementFactory *This);ULONG ( *Release)(IHTMLImageElementFactory *This);HRESULT ( *GetTypeInfoCount)(IHTMLImageElementFactory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLImageElementFactory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLImageElementFactory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLImageElementFactory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *create)(IHTMLImageElementFactory *This, VARIANT width, VARIANT height, IHTMLImgElement **MIDL_0016);};
struct IHTMLMimeTypesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLMimeTypesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMimeTypesCollection *This);ULONG ( *Release)(IHTMLMimeTypesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLMimeTypesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMimeTypesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMimeTypesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMimeTypesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLMimeTypesCollection *This, int *p);};
struct DispIHTMLCommentElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLCommentElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLCommentElement *This);ULONG ( *Release)(DispIHTMLCommentElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLCommentElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLCommentElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLCommentElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLCommentElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLControlElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLControlElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLControlElement *This);ULONG ( *Release)(DispIHTMLControlElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLControlElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLControlElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLControlElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLControlElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLIsIndexElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLIsIndexElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLIsIndexElement *This);ULONG ( *Release)(DispIHTMLIsIndexElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLIsIndexElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLIsIndexElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLIsIndexElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLIsIndexElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLMarqueeElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLMarqueeElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLMarqueeElement *This);ULONG ( *Release)(DispIHTMLMarqueeElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLMarqueeElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLMarqueeElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLMarqueeElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLMarqueeElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLUnknownElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLUnknownElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLUnknownElement *This);ULONG ( *Release)(DispIHTMLUnknownElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLUnknownElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLUnknownElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLUnknownElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLUnknownElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLButtonElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLButtonElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLButtonElementEvents *This);ULONG ( *Release)(HTMLButtonElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLButtonElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLButtonElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLButtonElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLButtonElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLObjectElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLObjectElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLObjectElementEvents *This);ULONG ( *Release)(HTMLObjectElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLObjectElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLObjectElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLObjectElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLObjectElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLSelectElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLSelectElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLSelectElementEvents *This);ULONG ( *Release)(HTMLSelectElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLSelectElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLSelectElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLSelectElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLSelectElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTextContainerEventsVtbl {HRESULT ( *QueryInterface)(HTMLTextContainerEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTextContainerEvents *This);ULONG ( *Release)(HTMLTextContainerEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLTextContainerEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTextContainerEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTextContainerEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTextContainerEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ITCallTonesNotificationVtbl {HRESULT ( *QueryInterface)(ITCallTonesNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallTonesNotification *This);ULONG ( *Release)(ITCallTonesNotification *This);HRESULT ( *GetTypeInfoCount)(ITCallTonesNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCallTonesNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCallTonesNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCallTonesNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *DTMF)(ITCallTonesNotification *This, ITCallInfo *pCall, unsigned char DTMF);};
struct DShellFolderViewEventsVtbl {HRESULT ( *QueryInterface)(DShellFolderViewEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellFolderViewEvents *This);ULONG ( *Release)(DShellFolderViewEvents *This);HRESULT ( *GetTypeInfoCount)(DShellFolderViewEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellFolderViewEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellFolderViewEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellFolderViewEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLAnchorElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLAnchorElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLAnchorElement *This);ULONG ( *Release)(DispIHTMLAnchorElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLAnchorElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLAnchorElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLAnchorElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLAnchorElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLButtonElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLButtonElement *This);ULONG ( *Release)(DispIHTMLButtonElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLHeaderElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLHeaderElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLHeaderElement *This);ULONG ( *Release)(DispIHTMLHeaderElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLHeaderElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLHeaderElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLHeaderElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLHeaderElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLIFrameElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLIFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLIFrameElement *This);ULONG ( *Release)(DispIHTMLIFrameElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLIFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLIFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLIFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLIFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLLegendElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLLegendElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLLegendElement *This);ULONG ( *Release)(DispIHTMLLegendElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLLegendElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLLegendElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLLegendElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLLegendElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLNextIdElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLNextIdElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLNextIdElement *This);ULONG ( *Release)(DispIHTMLNextIdElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLNextIdElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLNextIdElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLNextIdElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLNextIdElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLNoShowElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLNoShowElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLNoShowElement *This);ULONG ( *Release)(DispIHTMLNoShowElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLNoShowElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLNoShowElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLNoShowElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLNoShowElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLObjectElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLObjectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLObjectElement *This);ULONG ( *Release)(DispIHTMLObjectElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLObjectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLObjectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLObjectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLObjectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLOptionElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLOptionElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLOptionElement *This);ULONG ( *Release)(DispIHTMLOptionElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLOptionElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLOptionElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLOptionElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLOptionElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLPhraseElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLPhraseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLPhraseElement *This);ULONG ( *Release)(DispIHTMLPhraseElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLPhraseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLPhraseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLPhraseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLPhraseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLScriptElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLScriptElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLScriptElement *This);ULONG ( *Release)(DispIHTMLScriptElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLScriptElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLScriptElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLScriptElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLScriptElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLSelectElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLSelectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLSelectElement *This);ULONG ( *Release)(DispIHTMLSelectElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLSelectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLSelectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLSelectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLSelectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTextContainerVtbl {HRESULT ( *QueryInterface)(DispIHTMLTextContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTextContainer *This);ULONG ( *Release)(DispIHTMLTextContainer *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTextContainer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTextContainer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTextContainer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTextContainer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLStyleElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLStyleElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLStyleElementEvents *This);ULONG ( *Release)(HTMLStyleElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLStyleElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLStyleElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLStyleElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLStyleElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLFiltersCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFiltersCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFiltersCollection *This);ULONG ( *Release)(IHTMLFiltersCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFiltersCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFiltersCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFiltersCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFiltersCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFiltersCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFiltersCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLFiltersCollection *This, VARIANT *pvarIndex, VARIANT *pvarResult);};
struct IHTMLFramesCollection2Vtbl {HRESULT ( *QueryInterface)(IHTMLFramesCollection2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFramesCollection2 *This);ULONG ( *Release)(IHTMLFramesCollection2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLFramesCollection2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFramesCollection2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFramesCollection2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFramesCollection2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *item)(IHTMLFramesCollection2 *This, VARIANT *pvarIndex, VARIANT *pvarResult);HRESULT ( *get_length)(IHTMLFramesCollection2 *This, int *p);};
struct DispIHTMLBlockElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLBlockElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBlockElement *This);ULONG ( *Release)(DispIHTMLBlockElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBlockElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBlockElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBlockElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBlockElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLDListElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLDListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLDListElement *This);ULONG ( *Release)(DispIHTMLDListElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLDListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLDListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLDListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLDListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLEmbedElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLEmbedElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLEmbedElement *This);ULONG ( *Release)(DispIHTMLEmbedElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLEmbedElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLEmbedElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLEmbedElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLEmbedElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFrameElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFrameElement *This);ULONG ( *Release)(DispIHTMLFrameElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLLabelElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLLabelElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLLabelElement *This);ULONG ( *Release)(DispIHTMLLabelElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLLabelElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLLabelElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLLabelElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLLabelElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLOListElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLOListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLOListElement *This);ULONG ( *Release)(DispIHTMLOListElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLOListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLOListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLOListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLOListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLStyleElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLStyleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLStyleElement *This);ULONG ( *Release)(DispIHTMLStyleElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLStyleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLStyleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLStyleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLStyleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableCaptionVtbl {HRESULT ( *QueryInterface)(DispIHTMLTableCaption *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTableCaption *This);ULONG ( *Release)(DispIHTMLTableCaption *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTableCaption *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTableCaption *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTableCaption *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTableCaption *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableSectionVtbl {HRESULT ( *QueryInterface)(DispIHTMLTableSection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTableSection *This);ULONG ( *Release)(DispIHTMLTableSection *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTableSection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTableSection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTableSection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTableSection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTitleElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLTitleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTitleElement *This);ULONG ( *Release)(DispIHTMLTitleElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTitleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTitleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTitleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTitleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLUListElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLUListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLUListElement *This);ULONG ( *Release)(DispIHTMLUListElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLUListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLUListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLUListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLUListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLFormElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLFormElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLFormElementEvents *This);ULONG ( *Release)(HTMLFormElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLFormElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLFormElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLFormElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLFormElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLLinkElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLLinkElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLinkElementEvents *This);ULONG ( *Release)(HTMLLinkElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLLinkElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLinkElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLinkElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLinkElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IADsAccessControlListVtbl {HRESULT ( *QueryInterface)(IADsAccessControlList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsAccessControlList *This);ULONG ( *Release)(IADsAccessControlList *This);HRESULT ( *GetTypeInfoCount)(IADsAccessControlList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsAccessControlList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsAccessControlList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsAccessControlList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AclRevision)(IADsAccessControlList *This, int *retval);HRESULT ( *put_AclRevision)(IADsAccessControlList *This, int lnAclRevision);HRESULT ( *get_AceCount)(IADsAccessControlList *This, int *retval);HRESULT ( *put_AceCount)(IADsAccessControlList *This, int lnAceCount);HRESULT ( *AddAce)(IADsAccessControlList *This, IDispatch *pAccessControlEntry);HRESULT ( *RemoveAce)(IADsAccessControlList *This, IDispatch *pAccessControlEntry);HRESULT ( *CopyAccessList)(IADsAccessControlList *This, IDispatch **ppAccessControlList);HRESULT ( *get__NewEnum)(IADsAccessControlList *This, IUnknown **retval);};
struct IHTMLTextRangeMetricsVtbl {HRESULT ( *QueryInterface)(IHTMLTextRangeMetrics *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextRangeMetrics *This);ULONG ( *Release)(IHTMLTextRangeMetrics *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextRangeMetrics *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextRangeMetrics *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextRangeMetrics *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextRangeMetrics *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_offsetTop)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_offsetLeft)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingTop)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingLeft)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingWidth)(IHTMLTextRangeMetrics *This, int *p);HRESULT ( *get_boundingHeight)(IHTMLTextRangeMetrics *This, int *p);};
struct IXMLElementCollectionVtbl {HRESULT ( *QueryInterface)(IXMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElementCollection *This);ULONG ( *Release)(IXMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(IXMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(IXMLElementCollection *This, int v);HRESULT ( *get_length)(IXMLElementCollection *This, int *p);HRESULT ( *get__newEnum)(IXMLElementCollection *This, IUnknown **ppUnk);HRESULT ( *item)(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);};
struct DispIHTMLAreaElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLAreaElement *This);ULONG ( *Release)(DispIHTMLAreaElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLBaseElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLBaseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBaseElement *This);ULONG ( *Release)(DispIHTMLBaseElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBaseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBaseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBaseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBaseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLBodyElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLBodyElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBodyElement *This);ULONG ( *Release)(DispIHTMLBodyElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBodyElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBodyElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBodyElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBodyElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLDivPositionVtbl {HRESULT ( *QueryInterface)(DispIHTMLDivPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLDivPosition *This);ULONG ( *Release)(DispIHTMLDivPosition *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLDivPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLDivPosition *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLDivPosition *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLDivPosition *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFontElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFontElement *This);ULONG ( *Release)(DispIHTMLFontElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFormElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLFormElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFormElement *This);ULONG ( *Release)(DispIHTMLFormElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFormElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFormElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFormElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFormElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLLinkElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLLinkElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLLinkElement *This);ULONG ( *Release)(DispIHTMLLinkElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLLinkElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLLinkElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLLinkElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLLinkElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLListElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLListElement *This);ULONG ( *Release)(DispIHTMLListElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLMetaElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLMetaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLMetaElement *This);ULONG ( *Release)(DispIHTMLMetaElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLMetaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLMetaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLMetaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLMetaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLParaElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLParaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLParaElement *This);ULONG ( *Release)(DispIHTMLParaElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLParaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLParaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLParaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLParaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLSpanElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLSpanElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLSpanElement *This);ULONG ( *Release)(DispIHTMLSpanElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLSpanElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLSpanElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLSpanElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLSpanElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTextElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTextElement *This);ULONG ( *Release)(DispIHTMLTextElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLInputImageEventsVtbl {HRESULT ( *QueryInterface)(HTMLInputImageEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLInputImageEvents *This);ULONG ( *Release)(HTMLInputImageEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLInputImageEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLInputImageEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLInputImageEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLInputImageEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLAreasCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLAreasCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreasCollection *This);ULONG ( *Release)(IHTMLAreasCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreasCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreasCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreasCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreasCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_length)(IHTMLAreasCollection *This, int v);HRESULT ( *get_length)(IHTMLAreasCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLAreasCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLAreasCollection *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLAreasCollection *This, VARIANT tagName, IDispatch **pdisp);HRESULT ( *add)(IHTMLAreasCollection *This, IHTMLElement *element, VARIANT before);HRESULT ( *remove)(IHTMLAreasCollection *This, int index);};
struct IHTMLTableRowMetricsVtbl {HRESULT ( *QueryInterface)(IHTMLTableRowMetrics *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRowMetrics *This);ULONG ( *Release)(IHTMLTableRowMetrics *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRowMetrics *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRowMetrics *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRowMetrics *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRowMetrics *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_clientHeight)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientWidth)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientTop)(IHTMLTableRowMetrics *This, int *p);HRESULT ( *get_clientLeft)(IHTMLTableRowMetrics *This, int *p);};
struct DShellWindowsEventsVtbl {HRESULT ( *QueryInterface)(DShellWindowsEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DShellWindowsEvents *This);ULONG ( *Release)(DShellWindowsEvents *This);HRESULT ( *GetTypeInfoCount)(DShellWindowsEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DShellWindowsEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DShellWindowsEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DShellWindowsEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLDivElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLDivElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLDivElement *This);ULONG ( *Release)(DispIHTMLDivElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLDivElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLDivElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLDivElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLDivElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLImgElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLImgElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLImgElement *This);ULONG ( *Release)(DispIHTMLImgElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLImgElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLImgElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLImgElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLImgElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLInputImageVtbl {HRESULT ( *QueryInterface)(DispIHTMLInputImage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLInputImage *This);ULONG ( *Release)(DispIHTMLInputImage *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLInputImage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLInputImage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLInputImage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLInputImage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLMapElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLMapElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLMapElement *This);ULONG ( *Release)(DispIHTMLMapElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLMapElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLMapElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLMapElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLMapElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IAgentCommandWindowVtbl {HRESULT ( *QueryInterface)(IAgentCommandWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCommandWindow *This);ULONG ( *Release)(IAgentCommandWindow *This);HRESULT ( *GetTypeInfoCount)(IAgentCommandWindow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCommandWindow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCommandWindow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCommandWindow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetVisible)(IAgentCommandWindow *This, int bVisible);HRESULT ( *GetVisible)(IAgentCommandWindow *This, int *pbVisible);HRESULT ( *GetPosition)(IAgentCommandWindow *This, int *plLeft, int *plTop);HRESULT ( *GetSize)(IAgentCommandWindow *This, int *plWidth, int *plHeight);};
struct IHTMLUnknownElementVtbl {HRESULT ( *QueryInterface)(IHTMLUnknownElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUnknownElement *This);ULONG ( *Release)(IHTMLUnknownElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLUnknownElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUnknownElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUnknownElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUnknownElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DWebBrowserEvents2Vtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents2 *This);ULONG ( *Release)(DWebBrowserEvents2 *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLBRElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLBRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBRElement *This);ULONG ( *Release)(DispIHTMLBRElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLDDElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLDDElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLDDElement *This);ULONG ( *Release)(DispIHTMLDDElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLDDElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLDDElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLDDElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLDDElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLDTElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLDTElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLDTElement *This);ULONG ( *Release)(DispIHTMLDTElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLDTElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLDTElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLDTElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLDTElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLFrameBaseVtbl {HRESULT ( *QueryInterface)(DispIHTMLFrameBase *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLFrameBase *This);ULONG ( *Release)(DispIHTMLFrameBase *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLFrameBase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLFrameBase *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLFrameBase *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLFrameBase *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLHRElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLHRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLHRElement *This);ULONG ( *Release)(DispIHTMLHRElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLHRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLHRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLHRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLHRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLLIElementVtbl {HRESULT ( *QueryInterface)(DispIHTMLLIElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLLIElement *This);ULONG ( *Release)(DispIHTMLLIElement *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLLIElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLLIElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLLIElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLLIElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableCellVtbl {HRESULT ( *QueryInterface)(DispIHTMLTableCell *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTableCell *This);ULONG ( *Release)(DispIHTMLTableCell *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTableCell *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTableCell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTableCell *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTableCell *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLDocumentEventsVtbl {HRESULT ( *QueryInterface)(HTMLDocumentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLDocumentEvents *This);ULONG ( *Release)(HTMLDocumentEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLDocumentEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLDocumentEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLDocumentEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLNoShowElementVtbl {HRESULT ( *QueryInterface)(IHTMLNoShowElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNoShowElement *This);ULONG ( *Release)(IHTMLNoShowElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLNoShowElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNoShowElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNoShowElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNoShowElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLPhraseElementVtbl {HRESULT ( *QueryInterface)(IHTMLPhraseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPhraseElement *This);ULONG ( *Release)(IHTMLPhraseElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLPhraseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPhraseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPhraseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPhraseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLTextContainerVtbl {HRESULT ( *QueryInterface)(IHTMLTextContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextContainer *This);ULONG ( *Release)(IHTMLTextContainer *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextContainer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextContainer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextContainer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextContainer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createControlRange)(IHTMLTextContainer *This, IDispatch **range);HRESULT ( *get_scrollHeight)(IHTMLTextContainer *This, int *p);HRESULT ( *get_scrollWidth)(IHTMLTextContainer *This, int *p);HRESULT ( *put_scrollTop)(IHTMLTextContainer *This, int v);HRESULT ( *get_scrollTop)(IHTMLTextContainer *This, int *p);HRESULT ( *put_scrollLeft)(IHTMLTextContainer *This, int v);HRESULT ( *get_scrollLeft)(IHTMLTextContainer *This, int *p);HRESULT ( *put_onscroll)(IHTMLTextContainer *This, VARIANT v);HRESULT ( *get_onscroll)(IHTMLTextContainer *This, VARIANT *p);};
struct IRequestDictionaryVtbl {HRESULT ( *QueryInterface)(IRequestDictionary *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRequestDictionary *This);ULONG ( *Release)(IRequestDictionary *This);HRESULT ( *GetTypeInfoCount)(IRequestDictionary *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRequestDictionary *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRequestDictionary *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRequestDictionary *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IRequestDictionary *This, VARIANT Var, VARIANT *pVariantReturn);HRESULT ( *get__NewEnum)(IRequestDictionary *This, IUnknown **ppEnumReturn);HRESULT ( *get_Count)(IRequestDictionary *This, int *cStrRet);HRESULT ( *get_Key)(IRequestDictionary *This, VARIANT VarKey, VARIANT *pvar);};
struct ITMultiChannelCallVtbl {HRESULT ( *QueryInterface)(ITMultiChannelCall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMultiChannelCall *This);ULONG ( *Release)(ITMultiChannelCall *This);HRESULT ( *GetTypeInfoCount)(ITMultiChannelCall *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMultiChannelCall *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMultiChannelCall *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMultiChannelCall *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_NumChannels)(ITMultiChannelCall *This, ULONG *pulChannels);HRESULT ( *put_NumChannels)(ITMultiChannelCall *This, ULONG ulChannels);HRESULT ( *get_Channels)(ITMultiChannelCall *This, VARIANT *pVariant);HRESULT ( *_EnumerateChannels)(ITMultiChannelCall *This, IEnumChannel **ppEnumChannel);};
struct IVariantDictionaryVtbl {HRESULT ( *QueryInterface)(IVariantDictionary *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IVariantDictionary *This);ULONG ( *Release)(IVariantDictionary *This);HRESULT ( *GetTypeInfoCount)(IVariantDictionary *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IVariantDictionary *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IVariantDictionary *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IVariantDictionary *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IVariantDictionary *This, VARIANT VarKey, VARIANT *pvar);HRESULT ( *put_Item)(IVariantDictionary *This, VARIANT VarKey, VARIANT var);HRESULT ( *putref_Item)(IVariantDictionary *This, VARIANT VarKey, VARIANT var);HRESULT ( *get_Key)(IVariantDictionary *This, VARIANT VarKey, VARIANT *pvar);HRESULT ( *get_Count)(IVariantDictionary *This, int *cStrRet);HRESULT ( *get__NewEnum)(IVariantDictionary *This, IUnknown **ppEnumReturn);};
struct _ADODynaCollectionVtbl {HRESULT ( *QueryInterface)(_ADODynaCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADODynaCollection *This);ULONG ( *Release)(_ADODynaCollection *This);HRESULT ( *GetTypeInfoCount)(_ADODynaCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADODynaCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADODynaCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADODynaCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(_ADODynaCollection *This, int *c);HRESULT ( *_NewEnum)(_ADODynaCollection *This, IUnknown **ppvObject);HRESULT ( *Refresh)(_ADODynaCollection *This);HRESULT ( *Append)(_ADODynaCollection *This, IDispatch *Object);HRESULT ( *Delete)(_ADODynaCollection *This, VARIANT Index);};
struct DWebBrowserEventsVtbl {HRESULT ( *QueryInterface)(DWebBrowserEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DWebBrowserEvents *This);ULONG ( *Release)(DWebBrowserEvents *This);HRESULT ( *GetTypeInfoCount)(DWebBrowserEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DWebBrowserEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DWebBrowserEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DWebBrowserEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLSpanFlowVtbl {HRESULT ( *QueryInterface)(DispIHTMLSpanFlow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLSpanFlow *This);ULONG ( *Release)(DispIHTMLSpanFlow *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLSpanFlow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLSpanFlow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLSpanFlow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLSpanFlow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableColVtbl {HRESULT ( *QueryInterface)(DispIHTMLTableCol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTableCol *This);ULONG ( *Release)(DispIHTMLTableCol *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTableCol *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTableCol *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTableCol *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTableCol *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableRowVtbl {HRESULT ( *QueryInterface)(DispIHTMLTableRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTableRow *This);ULONG ( *Release)(DispIHTMLTableRow *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTableRow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTableRow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTableRow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTableRow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLElementEventsVtbl {HRESULT ( *QueryInterface)(HTMLElementEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLElementEvents *This);ULONG ( *Release)(HTMLElementEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLElementEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLElementEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLElementEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLElementEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLFrameElementVtbl {HRESULT ( *QueryInterface)(IHTMLFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameElement *This);ULONG ( *Release)(IHTMLFrameElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_borderColor)(IHTMLFrameElement *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLFrameElement *This, VARIANT *p);};
struct IScriptingContextVtbl {HRESULT ( *QueryInterface)(IScriptingContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IScriptingContext *This);ULONG ( *Release)(IScriptingContext *This);HRESULT ( *GetTypeInfoCount)(IScriptingContext *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IScriptingContext *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IScriptingContext *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IScriptingContext *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Request)(IScriptingContext *This, IRequest **ppRequest);HRESULT ( *get_Response)(IScriptingContext *This, IResponse **ppResponse);HRESULT ( *get_Server)(IScriptingContext *This, IServer **ppServer);HRESULT ( *get_Session)(IScriptingContext *This, ISessionObject **ppSession);HRESULT ( *get_Application)(IScriptingContext *This, IApplicationObject **ppApplication);};
struct ITMediaCollectionVtbl {HRESULT ( *QueryInterface)(ITMediaCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMediaCollection *This);ULONG ( *Release)(ITMediaCollection *This);HRESULT ( *GetTypeInfoCount)(ITMediaCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMediaCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMediaCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMediaCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ITMediaCollection *This, ULONG *pVal);HRESULT ( *get_Item)(ITMediaCollection *This, ULONG Index, ITMedia **pVal);HRESULT ( *get__NewEnum)(ITMediaCollection *This, IUnknown **pVal);HRESULT ( *Create)(ITMediaCollection *This, ULONG Index, ITMedia **ppMedia);HRESULT ( *Delete)(ITMediaCollection *This, ULONG Index);};
struct ConnectionEventsVtbl {HRESULT ( *QueryInterface)(ConnectionEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ConnectionEvents *This);ULONG ( *Release)(ConnectionEvents *This);HRESULT ( *GetTypeInfoCount)(ConnectionEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ConnectionEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ConnectionEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ConnectionEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DataSourceObjectVtbl {HRESULT ( *QueryInterface)(DataSourceObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DataSourceObject *This);ULONG ( *Release)(DataSourceObject *This);HRESULT ( *GetTypeInfoCount)(DataSourceObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DataSourceObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DataSourceObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DataSourceObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLBGsoundVtbl {HRESULT ( *QueryInterface)(DispIHTMLBGsound *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLBGsound *This);ULONG ( *Release)(DispIHTMLBGsound *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLBGsound *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLBGsound *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLBGsound *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLBGsound *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLAnchorEventsVtbl {HRESULT ( *QueryInterface)(HTMLAnchorEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAnchorEvents *This);ULONG ( *Release)(HTMLAnchorEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLAnchorEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAnchorEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAnchorEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAnchorEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLScriptEventsVtbl {HRESULT ( *QueryInterface)(HTMLScriptEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLScriptEvents *This);ULONG ( *Release)(HTMLScriptEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLScriptEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLScriptEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLScriptEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLScriptEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLWindowEventsVtbl {HRESULT ( *QueryInterface)(HTMLWindowEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLWindowEvents *This);ULONG ( *Release)(HTMLWindowEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLWindowEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLWindowEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLWindowEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLWindowEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IADsLargeIntegerVtbl {HRESULT ( *QueryInterface)(IADsLargeInteger *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsLargeInteger *This);ULONG ( *Release)(IADsLargeInteger *This);HRESULT ( *GetTypeInfoCount)(IADsLargeInteger *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsLargeInteger *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsLargeInteger *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsLargeInteger *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_HighPart)(IADsLargeInteger *This, int *retval);HRESULT ( *put_HighPart)(IADsLargeInteger *This, int lnHighPart);HRESULT ( *get_LowPart)(IADsLargeInteger *This, int *retval);HRESULT ( *put_LowPart)(IADsLargeInteger *This, int lnLowPart);};
struct IHTMLListElementVtbl {HRESULT ( *QueryInterface)(IHTMLListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLListElement *This);ULONG ( *Release)(IHTMLListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLSpanElementVtbl {HRESULT ( *QueryInterface)(IHTMLSpanElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSpanElement *This);ULONG ( *Release)(IHTMLSpanElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLSpanElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSpanElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSpanElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSpanElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IHTMLTextElementVtbl {HRESULT ( *QueryInterface)(IHTMLTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextElement *This);ULONG ( *Release)(IHTMLTextElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IPropertyStorageVtbl {HRESULT ( *QueryInterface)(IPropertyStorage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyStorage *This);ULONG ( *Release)(IPropertyStorage *This);HRESULT ( *ReadMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec, PROPVARIANT  *    rgpropvar);HRESULT ( *WriteMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec,  PROPVARIANT  *    rgpropvar, PROPID propidNameFirst);HRESULT ( *DeleteMultiple)(IPropertyStorage *This, ULONG cpspec,  PROPSPEC  *    rgpspec);HRESULT ( *ReadPropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid, LPOLESTR  *    rglpwstrName);HRESULT ( *WritePropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid,  LPOLESTR  *    rglpwstrName);HRESULT ( *DeletePropertyNames)(IPropertyStorage *This, ULONG cpropid,  PROPID  *    rgpropid);HRESULT ( *Commit)(IPropertyStorage *This, DWORD grfCommitFlags);HRESULT ( *Revert)(IPropertyStorage *This);HRESULT ( *Enum)(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum);HRESULT ( *SetTimes)(IPropertyStorage *This,  FILETIME *pctime,  FILETIME *patime,  FILETIME *pmtime);HRESULT ( *SetClass)(IPropertyStorage *This,  CLSID * clsid);HRESULT ( *Stat)(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg);};
struct ITTimeCollectionVtbl {HRESULT ( *QueryInterface)(ITTimeCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTimeCollection *This);ULONG ( *Release)(ITTimeCollection *This);HRESULT ( *GetTypeInfoCount)(ITTimeCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTimeCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTimeCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTimeCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ITTimeCollection *This, ULONG *pVal);HRESULT ( *get_Item)(ITTimeCollection *This, ULONG Index, ITTime **pVal);HRESULT ( *get__NewEnum)(ITTimeCollection *This, IUnknown **pVal);HRESULT ( *Create)(ITTimeCollection *This, ULONG Index, ITTime **ppTime);HRESULT ( *Delete)(ITTimeCollection *This, ULONG Index);};
struct FolderItemVerbsVtbl {HRESULT ( *QueryInterface)(FolderItemVerbs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerbs *This);ULONG ( *Release)(FolderItemVerbs *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerbs *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerbs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerbs *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerbs *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItemVerbs *This, int *plCount);HRESULT ( *get_Application)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerbs *This, IDispatch **ppid);HRESULT ( *Item)(FolderItemVerbs *This, VARIANT index, FolderItemVerb **ppid);HRESULT ( *_NewEnum)(FolderItemVerbs *This, IUnknown **ppunk);};
struct HTMLLabelEventsVtbl {HRESULT ( *QueryInterface)(HTMLLabelEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLLabelEvents *This);ULONG ( *Release)(HTMLLabelEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLLabelEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLLabelEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLLabelEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLLabelEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLTableEventsVtbl {HRESULT ( *QueryInterface)(HTMLTableEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLTableEvents *This);ULONG ( *Release)(HTMLTableEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLTableEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLTableEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLTableEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLTableEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ICreateTypeLib2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeLib2 *This);ULONG ( *Release)(ICreateTypeLib2 *This);HRESULT ( *CreateTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT ( *SetName)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetVersion)(ICreateTypeLib2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *SetGuid)(ICreateTypeLib2 *This,  GUID * guid);HRESULT ( *SetDocString)(ICreateTypeLib2 *This, LPOLESTR szDoc);HRESULT ( *SetHelpFileName)(ICreateTypeLib2 *This, LPOLESTR szHelpFileName);HRESULT ( *SetHelpContext)(ICreateTypeLib2 *This, DWORD dwHelpContext);HRESULT ( *SetLcid)(ICreateTypeLib2 *This, LCID lcid);HRESULT ( *SetLibFlags)(ICreateTypeLib2 *This, UINT uLibFlags);HRESULT ( *SaveAllChanges)(ICreateTypeLib2 *This);HRESULT ( *DeleteTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT ( *SetCustData)(ICreateTypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeLib2 *This, ULONG dwHelpStringContext);HRESULT ( *SetHelpStringDll)(ICreateTypeLib2 *This, LPOLESTR szFileName);};
struct IFontEventsDispVtbl {HRESULT ( *QueryInterface)(IFontEventsDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontEventsDisp *This);ULONG ( *Release)(IFontEventsDisp *This);HRESULT ( *GetTypeInfoCount)(IFontEventsDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontEventsDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontEventsDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontEventsDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ISharedPropertyVtbl {HRESULT ( *QueryInterface)(ISharedProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISharedProperty *This);ULONG ( *Release)(ISharedProperty *This);HRESULT ( *GetTypeInfoCount)(ISharedProperty *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISharedProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISharedProperty *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISharedProperty *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ISharedProperty *This, VARIANT *pVal);HRESULT ( *put_Value)(ISharedProperty *This, VARIANT val);};
struct RecordsetEventsVtbl {HRESULT ( *QueryInterface)(RecordsetEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(RecordsetEvents *This);ULONG ( *Release)(RecordsetEvents *This);HRESULT ( *GetTypeInfoCount)(RecordsetEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(RecordsetEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(RecordsetEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(RecordsetEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct DispIHTMLTableVtbl {HRESULT ( *QueryInterface)(DispIHTMLTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DispIHTMLTable *This);ULONG ( *Release)(DispIHTMLTable *This);HRESULT ( *GetTypeInfoCount)(DispIHTMLTable *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DispIHTMLTable *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DispIHTMLTable *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DispIHTMLTable *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLAreaEventsVtbl {HRESULT ( *QueryInterface)(HTMLAreaEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLAreaEvents *This);ULONG ( *Release)(HTMLAreaEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLAreaEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLAreaEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLAreaEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLAreaEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IPropertyPage2Vtbl {HRESULT ( *QueryInterface)(IPropertyPage2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPropertyPage2 *This);ULONG ( *Release)(IPropertyPage2 *This);HRESULT ( *SetPageSite)(IPropertyPage2 *This, IPropertyPageSite *pPageSite);HRESULT ( *Activate)(IPropertyPage2 *This, HWND hWndParent, LPCRECT pRect, BOOL bModal);HRESULT ( *Deactivate)(IPropertyPage2 *This);HRESULT ( *GetPageInfo)(IPropertyPage2 *This, PROPPAGEINFO *pPageInfo);HRESULT ( *SetObjects)(IPropertyPage2 *This, ULONG cObjects, IUnknown **ppUnk);HRESULT ( *Show)(IPropertyPage2 *This, UINT nCmdShow);HRESULT ( *Move)(IPropertyPage2 *This, LPCRECT pRect);HRESULT ( *IsPageDirty)(IPropertyPage2 *This);HRESULT ( *Apply)(IPropertyPage2 *This);HRESULT ( *Help)(IPropertyPage2 *This, LPCOLESTR pszHelpDir);HRESULT ( *TranslateAcceleratorA)(IPropertyPage2 *This, MSG *pMsg);HRESULT ( *EditProperty)(IPropertyPage2 *This, DISPID dispID);};
struct _ADOCollectionVtbl {HRESULT ( *QueryInterface)(_ADOCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADOCollection *This);ULONG ( *Release)(_ADOCollection *This);HRESULT ( *GetTypeInfoCount)(_ADOCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADOCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADOCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADOCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(_ADOCollection *This, int *c);HRESULT ( *_NewEnum)(_ADOCollection *This, IUnknown **ppvObject);HRESULT ( *Refresh)(_ADOCollection *This);};
struct HTMLImgEventsVtbl {HRESULT ( *QueryInterface)(HTMLImgEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLImgEvents *This);ULONG ( *Release)(HTMLImgEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLImgEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLImgEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLImgEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLImgEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct HTMLMapEventsVtbl {HRESULT ( *QueryInterface)(HTMLMapEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(HTMLMapEvents *This);ULONG ( *Release)(HTMLMapEvents *This);HRESULT ( *GetTypeInfoCount)(HTMLMapEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(HTMLMapEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(HTMLMapEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(HTMLMapEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IFolderViewOCVtbl {HRESULT ( *QueryInterface)(IFolderViewOC *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFolderViewOC *This);ULONG ( *Release)(IFolderViewOC *This);HRESULT ( *GetTypeInfoCount)(IFolderViewOC *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFolderViewOC *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFolderViewOC *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFolderViewOC *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetFolderView)(IFolderViewOC *This, IDispatch *pdisp);};
struct IHTMLDocumentVtbl {HRESULT ( *QueryInterface)(IHTMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument *This);ULONG ( *Release)(IHTMLDocument *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Script)(IHTMLDocument *This, IDispatch **p);};
struct MD_CollectionVtbl {HRESULT ( *QueryInterface)(MD_Collection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(MD_Collection *This);ULONG ( *Release)(MD_Collection *This);HRESULT ( *GetTypeInfoCount)(MD_Collection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(MD_Collection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(MD_Collection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(MD_Collection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(MD_Collection *This);HRESULT ( *_NewEnum)(MD_Collection *This, IUnknown **ppvObject);HRESULT ( *get_Count)(MD_Collection *This, int *c);};
struct IPictureDispVtbl {HRESULT ( *QueryInterface)(IPictureDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPictureDisp *This);ULONG ( *Release)(IPictureDisp *This);HRESULT ( *GetTypeInfoCount)(IPictureDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPictureDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPictureDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPictureDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ITCollectionVtbl {HRESULT ( *QueryInterface)(ITCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCollection *This);ULONG ( *Release)(ITCollection *This);HRESULT ( *GetTypeInfoCount)(ITCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ITCollection *This, int *lCount);HRESULT ( *get_Item)(ITCollection *This, int Index, VARIANT *pVariant);HRESULT ( *get__NewEnum)(ITCollection *This, IUnknown **ppNewEnum);};
struct _AgentEventsVtbl {HRESULT ( *QueryInterface)(_AgentEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_AgentEvents *This);ULONG ( *Release)(_AgentEvents *This);HRESULT ( *GetTypeInfoCount)(_AgentEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_AgentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_AgentEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_AgentEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct FolderItemsVtbl {HRESULT ( *QueryInterface)(FolderItems *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItems *This);ULONG ( *Release)(FolderItems *This);HRESULT ( *GetTypeInfoCount)(FolderItems *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItems *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItems *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItems *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(FolderItems *This, int *plCount);HRESULT ( *get_Application)(FolderItems *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItems *This, IDispatch **ppid);HRESULT ( *Item)(FolderItems *This, VARIANT index, FolderItem **ppid);HRESULT ( *_NewEnum)(FolderItems *This, IUnknown **ppunk);};
struct HierarchiesVtbl {HRESULT ( *QueryInterface)(Hierarchies *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Hierarchies *This);ULONG ( *Release)(Hierarchies *This);HRESULT ( *GetTypeInfoCount)(Hierarchies *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Hierarchies *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Hierarchies *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Hierarchies *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Hierarchies *This);HRESULT ( *_NewEnum)(Hierarchies *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Hierarchies *This, int *c);HRESULT ( *get_Item)(Hierarchies *This, VARIANT Index, Hierarchy **ppvObject);};
struct IADsMembersVtbl {HRESULT ( *QueryInterface)(IADsMembers *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsMembers *This);ULONG ( *Release)(IADsMembers *This);HRESULT ( *GetTypeInfoCount)(IADsMembers *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsMembers *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsMembers *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsMembers *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IADsMembers *This, int *plCount);HRESULT ( *get__NewEnum)(IADsMembers *This, IUnknown **ppEnumerator);HRESULT ( *get_Filter)(IADsMembers *This, VARIANT *pvFilter);HRESULT ( *put_Filter)(IADsMembers *This, VARIANT pvFilter);};
struct IMTSLocaterVtbl {HRESULT ( *QueryInterface)(IMTSLocater *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMTSLocater *This);ULONG ( *Release)(IMTSLocater *This);HRESULT ( *GetTypeInfoCount)(IMTSLocater *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMTSLocater *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMTSLocater *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMTSLocater *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetEventDispatcher)(IMTSLocater *This, IUnknown **pUnk);};
struct IStringListVtbl {HRESULT ( *QueryInterface)(IStringList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IStringList *This);ULONG ( *Release)(IStringList *This);HRESULT ( *GetTypeInfoCount)(IStringList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IStringList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IStringList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IStringList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IStringList *This, VARIANT i, VARIANT *pVariantReturn);HRESULT ( *get_Count)(IStringList *This, int *cStrRet);HRESULT ( *get__NewEnum)(IStringList *This, IUnknown **ppEnumReturn);};
struct DimensionsVtbl {HRESULT ( *QueryInterface)(Dimensions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Dimensions *This);ULONG ( *Release)(Dimensions *This);HRESULT ( *GetTypeInfoCount)(Dimensions *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Dimensions *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Dimensions *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Dimensions *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Dimensions *This);HRESULT ( *_NewEnum)(Dimensions *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Dimensions *This, int *c);HRESULT ( *get_Item)(Dimensions *This, VARIANT Index, Dimension **ppvObject);};
struct IOmHistoryVtbl {HRESULT ( *QueryInterface)(IOmHistory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOmHistory *This);ULONG ( *Release)(IOmHistory *This);HRESULT ( *GetTypeInfoCount)(IOmHistory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IOmHistory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IOmHistory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IOmHistory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IOmHistory *This, short *p);HRESULT ( *back)(IOmHistory *This, VARIANT *pvargdistance);HRESULT ( *forward)(IOmHistory *This, VARIANT *pvargdistance);HRESULT ( *go)(IOmHistory *This, VARIANT *pvargdistance);};
struct ParametersVtbl {HRESULT ( *QueryInterface)(ADOParameters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOParameters *This);ULONG ( *Release)(ADOParameters *This);HRESULT ( *GetTypeInfoCount)(ADOParameters *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOParameters *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOParameters *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOParameters *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ADOParameters *This, int *c);HRESULT ( *_NewEnum)(ADOParameters *This, IUnknown **ppvObject);HRESULT ( *Refresh)(ADOParameters *This);HRESULT ( *Append)(ADOParameters *This, IDispatch *Object);HRESULT ( *Delete)(ADOParameters *This, VARIANT Index);HRESULT ( *get_Item)(ADOParameters *This, VARIANT Index, _ADOParameter **ppvObject);};
struct PropertiesVtbl {HRESULT ( *QueryInterface)(ADOProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOProperties *This);ULONG ( *Release)(ADOProperties *This);HRESULT ( *GetTypeInfoCount)(ADOProperties *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOProperties *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOProperties *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ADOProperties *This, int *c);HRESULT ( *_NewEnum)(ADOProperties *This, IUnknown **ppvObject);HRESULT ( *Refresh)(ADOProperties *This);HRESULT ( *get_Item)(ADOProperties *This, VARIANT Index, ADOProperty **ppvObject);};
struct IDispatchVtbl {HRESULT ( *QueryInterface)(IDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatch *This);ULONG ( *Release)(IDispatch *This);HRESULT ( *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IFontDispVtbl {HRESULT ( *QueryInterface)(IFontDisp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IFontDisp *This);ULONG ( *Release)(IFontDisp *This);HRESULT ( *GetTypeInfoCount)(IFontDisp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IFontDisp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IFontDisp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IFontDisp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ITChannelVtbl {HRESULT ( *QueryInterface)(ITChannel *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITChannel *This);ULONG ( *Release)(ITChannel *This);HRESULT ( *GetTypeInfoCount)(ITChannel *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITChannel *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITChannel *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITChannel *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SelectTerminals)(ITChannel *This, VARIANT Terminals);HRESULT ( *UnselectTerminal)(ITChannel *This, ITTerminal *pTerminal);HRESULT ( *SetParticipant)(ITChannel *This, ITParticipantInfo *pParticipant);HRESULT ( *GetParticipant)(ITChannel *This, ITParticipantInfo **ppParticipant);};
struct PositionsVtbl {HRESULT ( *QueryInterface)(Positions *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Positions *This);ULONG ( *Release)(Positions *This);HRESULT ( *GetTypeInfoCount)(Positions *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Positions *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Positions *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Positions *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Positions *This);HRESULT ( *_NewEnum)(Positions *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Positions *This, int *c);HRESULT ( *get_Item)(Positions *This, VARIANT Index, Position **ppvObject);};
struct CubeDefsVtbl {HRESULT ( *QueryInterface)(CubeDefs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(CubeDefs *This);ULONG ( *Release)(CubeDefs *This);HRESULT ( *GetTypeInfoCount)(CubeDefs *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(CubeDefs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(CubeDefs *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(CubeDefs *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(CubeDefs *This);HRESULT ( *_NewEnum)(CubeDefs *This, IUnknown **ppvObject);HRESULT ( *get_Count)(CubeDefs *This, int *c);HRESULT ( *get_Item)(CubeDefs *This, VARIANT Index, CubeDef **ppvObject);};
struct Fields15Vtbl {HRESULT ( *QueryInterface)(Fields15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Fields15 *This);ULONG ( *Release)(Fields15 *This);HRESULT ( *GetTypeInfoCount)(Fields15 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Fields15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Fields15 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Fields15 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(Fields15 *This, int *c);HRESULT ( *_NewEnum)(Fields15 *This, IUnknown **ppvObject);HRESULT ( *Refresh)(Fields15 *This);HRESULT ( *get_Item)(Fields15 *This, VARIANT Index, ADOField **ppvObject);};
struct PositionVtbl {HRESULT ( *QueryInterface)(Position *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Position *This);ULONG ( *Release)(Position *This);HRESULT ( *GetTypeInfoCount)(Position *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Position *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Position *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Position *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Ordinal)(Position *This, int *pl);HRESULT ( *get_Members)(Position *This, Members **ppvObject);};
struct IMtsGrpVtbl {HRESULT ( *QueryInterface)(IMtsGrp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsGrp *This);ULONG ( *Release)(IMtsGrp *This);HRESULT ( *GetTypeInfoCount)(IMtsGrp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMtsGrp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMtsGrp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMtsGrp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IMtsGrp *This, int *pVal);HRESULT ( *Item)(IMtsGrp *This, int lIndex, IUnknown **ppUnkDispatcher);HRESULT ( *Refresh)(IMtsGrp *This);};
struct MembersVtbl {HRESULT ( *QueryInterface)(Members *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Members *This);ULONG ( *Release)(Members *This);HRESULT ( *GetTypeInfoCount)(Members *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Members *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Members *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Members *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Members *This);HRESULT ( *_NewEnum)(Members *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Members *This, int *c);HRESULT ( *get_Item)(Members *This, VARIANT Index, Member **ppvObject);};
struct ErrorsVtbl {HRESULT ( *QueryInterface)(ADOErrors *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOErrors *This);ULONG ( *Release)(ADOErrors *This);HRESULT ( *GetTypeInfoCount)(ADOErrors *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOErrors *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOErrors *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOErrors *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ADOErrors *This, int *c);HRESULT ( *_NewEnum)(ADOErrors *This, IUnknown **ppvObject);HRESULT ( *Refresh)(ADOErrors *This);HRESULT ( *get_Item)(ADOErrors *This, VARIANT Index, ADOError **ppvObject);HRESULT ( *Clear)(ADOErrors *This);};
struct IAgentVtbl {HRESULT ( *QueryInterface)(IAgent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgent *This);ULONG ( *Release)(IAgent *This);HRESULT ( *GetTypeInfoCount)(IAgent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Load)(IAgent *This, VARIANT vLoadKey, int *pdwCharID, int *pdwReqID);HRESULT ( *Unload)(IAgent *This, int dwCharID);HRESULT ( *Register)(IAgent *This, IUnknown *punkNotifySink, int *pdwSinkID);HRESULT ( *Unregister)(IAgent *This, int dwSinkID);HRESULT ( *GetCharacter)(IAgent *This, int dwCharID, IDispatch **ppunkCharacter);HRESULT ( *GetSuspended)(IAgent *This, int *pbSuspended);};
struct LevelsVtbl {HRESULT ( *QueryInterface)(Levels *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Levels *This);ULONG ( *Release)(Levels *This);HRESULT ( *GetTypeInfoCount)(Levels *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Levels *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Levels *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Levels *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Levels *This);HRESULT ( *_NewEnum)(Levels *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Levels *This, int *c);HRESULT ( *get_Item)(Levels *This, VARIANT Index, Level **ppvObject);};
struct AxesVtbl {HRESULT ( *QueryInterface)(Axes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Axes *This);ULONG ( *Release)(Axes *This);HRESULT ( *GetTypeInfoCount)(Axes *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Axes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Axes *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Axes *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Refresh)(Axes *This);HRESULT ( *_NewEnum)(Axes *This, IUnknown **ppvObject);HRESULT ( *get_Count)(Axes *This, int *c);HRESULT ( *get_Item)(Axes *This, VARIANT Index, Axis **ppvObject);};
struct _ADOVtbl {HRESULT ( *QueryInterface)(_ADO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADO *This);ULONG ( *Release)(_ADO *This);HRESULT ( *GetTypeInfoCount)(_ADO *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADO *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADO *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADO *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_ADO *This, ADOProperties **ppvObject);};
union _adsvalue___BA98B216490F4398E51052A67E18CE1F {ADS_DN_STRING DNString;ADS_CASE_EXACT_STRING CaseExactString;ADS_CASE_IGNORE_STRING CaseIgnoreString;ADS_PRINTABLE_STRING PrintableString;ADS_NUMERIC_STRING NumericString;ADS_BOOLEAN Boolean;ADS_INTEGER Integer;ADS_OCTET_STRING OctetString;ADS_UTC_TIME UTCTime;ADS_LARGE_INTEGER LargeInteger;ADS_OBJECT_CLASS ClassName;ADS_PROV_SPECIFIC ProviderSpecific;};
struct IAgentSpeechInputPropertiesVtbl {HRESULT ( *QueryInterface)(IAgentSpeechInputProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentSpeechInputProperties *This);ULONG ( *Release)(IAgentSpeechInputProperties *This);HRESULT ( *GetTypeInfoCount)(IAgentSpeechInputProperties *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentSpeechInputProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentSpeechInputProperties *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentSpeechInputProperties *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetInstalled)(IAgentSpeechInputProperties *This, int *pbInstalled);HRESULT ( *GetEnabled)(IAgentSpeechInputProperties *This, int *pbEnabled);HRESULT ( *GetHotKey)(IAgentSpeechInputProperties *This, BSTR *pbszHotCharKey);HRESULT ( *GetLCID)(IAgentSpeechInputProperties *This, LCID *plcidCurrent);HRESULT ( *GetEngine)(IAgentSpeechInputProperties *This, BSTR *pbszEngine);HRESULT ( *SetEngine)(IAgentSpeechInputProperties *This, BSTR bszEngine);HRESULT ( *GetListeningTip)(IAgentSpeechInputProperties *This, int *pbListeningTip);};
struct ITAddressEventNotificationVtbl {HRESULT ( *QueryInterface)(ITAddressEventNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITAddressEventNotification *This);ULONG ( *Release)(ITAddressEventNotification *This);HRESULT ( *GetTypeInfoCount)(ITAddressEventNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITAddressEventNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITAddressEventNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITAddressEventNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AddressEventNotification)(ITAddressEventNotification *This, ITAddress *pAddress, ADDRESS_EVENT Event);};
struct IADsFileServiceOperationsVtbl {HRESULT ( *QueryInterface)(IADsFileServiceOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsFileServiceOperations *This);ULONG ( *Release)(IADsFileServiceOperations *This);HRESULT ( *GetTypeInfoCount)(IADsFileServiceOperations *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsFileServiceOperations *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsFileServiceOperations *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsFileServiceOperations *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *get_Class)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *get_GUID)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *get_Parent)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *get_Schema)(IADsFileServiceOperations *This, BSTR *retval);HRESULT ( *GetInfo)(IADsFileServiceOperations *This);HRESULT ( *SetInfo)(IADsFileServiceOperations *This);HRESULT ( *Get)(IADsFileServiceOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsFileServiceOperations *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsFileServiceOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsFileServiceOperations *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsFileServiceOperations *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Status)(IADsFileServiceOperations *This, int *retval);HRESULT ( *Start)(IADsFileServiceOperations *This);HRESULT ( *Stop)(IADsFileServiceOperations *This);HRESULT ( *Pause)(IADsFileServiceOperations *This);HRESULT ( *Continue)(IADsFileServiceOperations *This);HRESULT ( *SetPassword)(IADsFileServiceOperations *This, BSTR bstrNewPassword);HRESULT ( *Sessions)(IADsFileServiceOperations *This, IADsCollection **ppSessions);HRESULT ( *Resources)(IADsFileServiceOperations *This, IADsCollection **ppResources);};
struct ADORecordsetConstructionVtbl {HRESULT ( *QueryInterface)(ADORecordsetConstruction *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADORecordsetConstruction *This);ULONG ( *Release)(ADORecordsetConstruction *This);HRESULT ( *GetTypeInfoCount)(ADORecordsetConstruction *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADORecordsetConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADORecordsetConstruction *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADORecordsetConstruction *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Rowset)(ADORecordsetConstruction *This, IUnknown **ppRowset);HRESULT ( *put_Rowset)(ADORecordsetConstruction *This, IUnknown *pRowset);HRESULT ( *get_Chapter)(ADORecordsetConstruction *This, LONG *plChapter);HRESULT ( *put_Chapter)(ADORecordsetConstruction *This, LONG lChapter);HRESULT ( *get_RowPosition)(ADORecordsetConstruction *This, IUnknown **ppRowPos);HRESULT ( *put_RowPosition)(ADORecordsetConstruction *This, IUnknown *pRowPos);};
struct ClusNetworkNetInterfacesVtbl {HRESULT ( *QueryInterface)(ClusNetworkNetInterfaces *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNetworkNetInterfaces *This);ULONG ( *Release)(ClusNetworkNetInterfaces *This);HRESULT ( *GetTypeInfoCount)(ClusNetworkNetInterfaces *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNetworkNetInterfaces *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNetworkNetInterfaces *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNetworkNetInterfaces *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusNetworkNetInterfaces *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusNetworkNetInterfaces *This, IUnknown **retval);HRESULT ( *Refresh)(ClusNetworkNetInterfaces *This);HRESULT ( *get_Item)(ClusNetworkNetInterfaces *This, VARIANT varIndex, ClusNetInterface **ppClusNetInterface);};
struct IADsPrintQueueOperationsVtbl {HRESULT ( *QueryInterface)(IADsPrintQueueOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPrintQueueOperations *This);ULONG ( *Release)(IADsPrintQueueOperations *This);HRESULT ( *GetTypeInfoCount)(IADsPrintQueueOperations *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPrintQueueOperations *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPrintQueueOperations *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPrintQueueOperations *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *get_Class)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *get_GUID)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *get_Parent)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *get_Schema)(IADsPrintQueueOperations *This, BSTR *retval);HRESULT ( *GetInfo)(IADsPrintQueueOperations *This);HRESULT ( *SetInfo)(IADsPrintQueueOperations *This);HRESULT ( *Get)(IADsPrintQueueOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsPrintQueueOperations *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsPrintQueueOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsPrintQueueOperations *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsPrintQueueOperations *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Status)(IADsPrintQueueOperations *This, int *retval);HRESULT ( *PrintJobs)(IADsPrintQueueOperations *This, IADsCollection **pObject);HRESULT ( *Pause)(IADsPrintQueueOperations *This);HRESULT ( *Resume)(IADsPrintQueueOperations *This);HRESULT ( *Purge)(IADsPrintQueueOperations *This);};
struct IHTMLFontNamesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFontNamesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontNamesCollection *This);ULONG ( *Release)(IHTMLFontNamesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontNamesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontNamesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontNamesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontNamesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFontNamesCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFontNamesCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLFontNamesCollection *This, int index, BSTR *pBstr);};
struct IHTMLFontSizesCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLFontSizesCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontSizesCollection *This);ULONG ( *Release)(IHTMLFontSizesCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontSizesCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontSizesCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontSizesCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontSizesCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLFontSizesCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLFontSizesCollection *This, IUnknown **p);HRESULT ( *get_forFont)(IHTMLFontSizesCollection *This, BSTR *p);HRESULT ( *item)(IHTMLFontSizesCollection *This, int index, int *plSize);};
struct IAgentCtlCommandsWindowVtbl {HRESULT ( *QueryInterface)(IAgentCtlCommandsWindow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlCommandsWindow *This);ULONG ( *Release)(IAgentCtlCommandsWindow *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlCommandsWindow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlCommandsWindow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlCommandsWindow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlCommandsWindow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Visible)(IAgentCtlCommandsWindow *This, VARIANT_BOOL *Visible);HRESULT ( *put_Visible)(IAgentCtlCommandsWindow *This, VARIANT_BOOL Visible);HRESULT ( *get_Left)(IAgentCtlCommandsWindow *This, short *Left);HRESULT ( *get_Top)(IAgentCtlCommandsWindow *This, short *Top);HRESULT ( *get_Height)(IAgentCtlCommandsWindow *This, short *Height);HRESULT ( *get_Width)(IAgentCtlCommandsWindow *This, short *Width);};
struct ITTAPIEventNotificationVtbl {HRESULT ( *QueryInterface)(ITTAPIEventNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTAPIEventNotification *This);ULONG ( *Release)(ITTAPIEventNotification *This);HRESULT ( *GetTypeInfoCount)(ITTAPIEventNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTAPIEventNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTAPIEventNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTAPIEventNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Event)(ITTAPIEventNotification *This, TAPI_EVENT Event);};
struct IADsAccessControlEntryVtbl {HRESULT ( *QueryInterface)(IADsAccessControlEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsAccessControlEntry *This);ULONG ( *Release)(IADsAccessControlEntry *This);HRESULT ( *GetTypeInfoCount)(IADsAccessControlEntry *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsAccessControlEntry *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsAccessControlEntry *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsAccessControlEntry *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_AccessMask)(IADsAccessControlEntry *This, int *retval);HRESULT ( *put_AccessMask)(IADsAccessControlEntry *This, int lnAccessMask);HRESULT ( *get_AceType)(IADsAccessControlEntry *This, int *retval);HRESULT ( *put_AceType)(IADsAccessControlEntry *This, int lnAceType);HRESULT ( *get_AceFlags)(IADsAccessControlEntry *This, int *retval);HRESULT ( *put_AceFlags)(IADsAccessControlEntry *This, int lnAceFlags);HRESULT ( *get_Flags)(IADsAccessControlEntry *This, int *retval);HRESULT ( *put_Flags)(IADsAccessControlEntry *This, int lnFlags);HRESULT ( *get_ObjectType)(IADsAccessControlEntry *This, BSTR *retval);HRESULT ( *put_ObjectType)(IADsAccessControlEntry *This, BSTR bstrObjectType);HRESULT ( *get_InheritedObjectType)(IADsAccessControlEntry *This, BSTR *retval);HRESULT ( *put_InheritedObjectType)(IADsAccessControlEntry *This, BSTR bstrInheritedObjectType);HRESULT ( *get_Trustee)(IADsAccessControlEntry *This, BSTR *retval);HRESULT ( *put_Trustee)(IADsAccessControlEntry *This, BSTR bstrTrustee);};
struct IADsPrintJobOperationsVtbl {HRESULT ( *QueryInterface)(IADsPrintJobOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPrintJobOperations *This);ULONG ( *Release)(IADsPrintJobOperations *This);HRESULT ( *GetTypeInfoCount)(IADsPrintJobOperations *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPrintJobOperations *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPrintJobOperations *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPrintJobOperations *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *get_Class)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *get_GUID)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *get_Parent)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *get_Schema)(IADsPrintJobOperations *This, BSTR *retval);HRESULT ( *GetInfo)(IADsPrintJobOperations *This);HRESULT ( *SetInfo)(IADsPrintJobOperations *This);HRESULT ( *Get)(IADsPrintJobOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsPrintJobOperations *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsPrintJobOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsPrintJobOperations *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsPrintJobOperations *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Status)(IADsPrintJobOperations *This, int *retval);HRESULT ( *get_TimeElapsed)(IADsPrintJobOperations *This, int *retval);HRESULT ( *get_PagesPrinted)(IADsPrintJobOperations *This, int *retval);HRESULT ( *get_Position)(IADsPrintJobOperations *This, int *retval);HRESULT ( *put_Position)(IADsPrintJobOperations *This, int lnPosition);HRESULT ( *Pause)(IADsPrintJobOperations *This);HRESULT ( *Resume)(IADsPrintJobOperations *This);};
struct IHTMLElementCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLElementCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElementCollection *This);ULONG ( *Release)(IHTMLElementCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLElementCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElementCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElementCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *toString)(IHTMLElementCollection *This, BSTR *String);HRESULT ( *put_length)(IHTMLElementCollection *This, int v);HRESULT ( *get_length)(IHTMLElementCollection *This, int *p);HRESULT ( *get__newEnum)(IHTMLElementCollection *This, IUnknown **p);HRESULT ( *item)(IHTMLElementCollection *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLElementCollection *This, VARIANT tagName, IDispatch **pdisp);};
struct IHTMLPluginsCollectionVtbl {HRESULT ( *QueryInterface)(IHTMLPluginsCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLPluginsCollection *This);ULONG ( *Release)(IHTMLPluginsCollection *This);HRESULT ( *GetTypeInfoCount)(IHTMLPluginsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLPluginsCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLPluginsCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLPluginsCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_length)(IHTMLPluginsCollection *This, int *p);HRESULT ( *refresh)(IHTMLPluginsCollection *This, VARIANT_BOOL reload);};
struct ClusNodeNetInterfacesVtbl {HRESULT ( *QueryInterface)(ClusNodeNetInterfaces *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNodeNetInterfaces *This);ULONG ( *Release)(ClusNodeNetInterfaces *This);HRESULT ( *GetTypeInfoCount)(ClusNodeNetInterfaces *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNodeNetInterfaces *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNodeNetInterfaces *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNodeNetInterfaces *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusNodeNetInterfaces *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusNodeNetInterfaces *This, IUnknown **retval);HRESULT ( *Refresh)(ClusNodeNetInterfaces *This);HRESULT ( *get_Item)(ClusNodeNetInterfaces *This, VARIANT varIndex, ClusNetInterface **ppClusNetInterface);};
struct IADsServiceOperationsVtbl {HRESULT ( *QueryInterface)(IADsServiceOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsServiceOperations *This);ULONG ( *Release)(IADsServiceOperations *This);HRESULT ( *GetTypeInfoCount)(IADsServiceOperations *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsServiceOperations *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsServiceOperations *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsServiceOperations *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *get_Class)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *get_GUID)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *get_Parent)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *get_Schema)(IADsServiceOperations *This, BSTR *retval);HRESULT ( *GetInfo)(IADsServiceOperations *This);HRESULT ( *SetInfo)(IADsServiceOperations *This);HRESULT ( *Get)(IADsServiceOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsServiceOperations *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsServiceOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsServiceOperations *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsServiceOperations *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Status)(IADsServiceOperations *This, int *retval);HRESULT ( *Start)(IADsServiceOperations *This);HRESULT ( *Stop)(IADsServiceOperations *This);HRESULT ( *Pause)(IADsServiceOperations *This);HRESULT ( *Continue)(IADsServiceOperations *This);HRESULT ( *SetPassword)(IADsServiceOperations *This, BSTR bstrNewPassword);};
struct ITConferenceDirectoryVtbl {HRESULT ( *QueryInterface)(ITConferenceDirectory *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITConferenceDirectory *This);ULONG ( *Release)(ITConferenceDirectory *This);HRESULT ( *GetTypeInfoCount)(ITConferenceDirectory *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITConferenceDirectory *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITConferenceDirectory *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITConferenceDirectory *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_DirectoryPath)(ITConferenceDirectory *This, BSTR *ppDirectoryPath);HRESULT ( *get_ServerName)(ITConferenceDirectory *This, BSTR *ppServerName);HRESULT ( *Init)(ITConferenceDirectory *This, BSTR pServerName, BSTR pDirectoryPath);HRESULT ( *CreateConference)(ITConferenceDirectory *This, BSTR pConferenceName, ITConference **ppConference);HRESULT ( *DeleteConference)(ITConferenceDirectory *This, BSTR pConferenceName);HRESULT ( *GetConference)(ITConferenceDirectory *This, BSTR pConferenceName, ITConference **ppConference);HRESULT ( *get_Filter)(ITConferenceDirectory *This, BSTR *ppFilter);HRESULT ( *put_Filter)(ITConferenceDirectory *This, BSTR pFilter);HRESULT ( *get__NewEnum)(ITConferenceDirectory *This, IUnknown **pVal);};
struct IAgentCtlAudioObjectVtbl {HRESULT ( *QueryInterface)(IAgentCtlAudioObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlAudioObject *This);ULONG ( *Release)(IAgentCtlAudioObject *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlAudioObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlAudioObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlAudioObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlAudioObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Enabled)(IAgentCtlAudioObject *This, VARIANT_BOOL *AudioEnabled);HRESULT ( *get_SoundEffects)(IAgentCtlAudioObject *This, VARIANT_BOOL *SoundEffects);};
struct IHTMLBaseFontElementVtbl {HRESULT ( *QueryInterface)(IHTMLBaseFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBaseFontElement *This);ULONG ( *Release)(IHTMLBaseFontElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBaseFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBaseFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBaseFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBaseFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_color)(IHTMLBaseFontElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLBaseFontElement *This, VARIANT *p);HRESULT ( *put_face)(IHTMLBaseFontElement *This, BSTR v);HRESULT ( *get_face)(IHTMLBaseFontElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLBaseFontElement *This, int v);HRESULT ( *get_size)(IHTMLBaseFontElement *This, int *p);};
struct IHTMLFieldSetElementVtbl {HRESULT ( *QueryInterface)(IHTMLFieldSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFieldSetElement *This);ULONG ( *Release)(IHTMLFieldSetElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFieldSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFieldSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFieldSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFieldSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLFieldSetElement *This, BSTR v);HRESULT ( *get_align)(IHTMLFieldSetElement *This, BSTR *p);};
struct IHTMLFrameSetElementVtbl {HRESULT ( *QueryInterface)(IHTMLFrameSetElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameSetElement *This);ULONG ( *Release)(IHTMLFrameSetElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameSetElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameSetElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameSetElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameSetElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_rows)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_rows)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_cols)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_cols)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_border)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_border)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_frameBorder)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_frameBorder)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_frameSpacing)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_frameSpacing)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_name)(IHTMLFrameSetElement *This, BSTR v);HRESULT ( *get_name)(IHTMLFrameSetElement *This, BSTR *p);HRESULT ( *put_onload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLFrameSetElement *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLFrameSetElement *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLFrameSetElement *This, VARIANT *p);};
struct IRemoteComponentUtilVtbl {HRESULT ( *QueryInterface)(IRemoteComponentUtil *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRemoteComponentUtil *This);ULONG ( *Release)(IRemoteComponentUtil *This);HRESULT ( *GetTypeInfoCount)(IRemoteComponentUtil *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRemoteComponentUtil *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRemoteComponentUtil *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRemoteComponentUtil *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *InstallRemoteComponent)(IRemoteComponentUtil *This, BSTR bstrServer, BSTR bstrPackageID, BSTR bstrCLSID);HRESULT ( *InstallRemoteComponentByName)(IRemoteComponentUtil *This, BSTR bstrServer, BSTR bstrPackageName, BSTR bstrProgID);};
struct IRoleAssociationUtilVtbl {HRESULT ( *QueryInterface)(IRoleAssociationUtil *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRoleAssociationUtil *This);ULONG ( *Release)(IRoleAssociationUtil *This);HRESULT ( *GetTypeInfoCount)(IRoleAssociationUtil *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRoleAssociationUtil *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRoleAssociationUtil *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRoleAssociationUtil *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *AssociateRole)(IRoleAssociationUtil *This, BSTR bstrRoleID);HRESULT ( *AssociateRoleByName)(IRoleAssociationUtil *This, BSTR bstrRoleName);};
struct IShellFolderViewDualVtbl {HRESULT ( *QueryInterface)(IShellFolderViewDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellFolderViewDual *This);ULONG ( *Release)(IShellFolderViewDual *This);HRESULT ( *GetTypeInfoCount)(IShellFolderViewDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellFolderViewDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellFolderViewDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellFolderViewDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellFolderViewDual *This, IDispatch **ppid);HRESULT ( *get_Folder)(IShellFolderViewDual *This, Folder **ppid);HRESULT ( *SelectedItems)(IShellFolderViewDual *This, FolderItems **ppid);HRESULT ( *get_FocusedItem)(IShellFolderViewDual *This, FolderItem **ppid);HRESULT ( *SelectItem)(IShellFolderViewDual *This, VARIANT *pvfi, int dwFlags);HRESULT ( *PopupItemMenu)(IShellFolderViewDual *This, FolderItem *pfi, VARIANT vx, VARIANT vy, BSTR *pbs);HRESULT ( *get_Script)(IShellFolderViewDual *This, IDispatch **ppDisp);HRESULT ( *get_ViewOptions)(IShellFolderViewDual *This, int *plViewOptions);};
struct ITBasicAudioTerminalVtbl {HRESULT ( *QueryInterface)(ITBasicAudioTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITBasicAudioTerminal *This);ULONG ( *Release)(ITBasicAudioTerminal *This);HRESULT ( *GetTypeInfoCount)(ITBasicAudioTerminal *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITBasicAudioTerminal *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITBasicAudioTerminal *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITBasicAudioTerminal *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Volume)(ITBasicAudioTerminal *This, int lVolume);HRESULT ( *get_Volume)(ITBasicAudioTerminal *This, int *plVolume);HRESULT ( *put_Balance)(ITBasicAudioTerminal *This, int lBalance);HRESULT ( *get_Balance)(ITBasicAudioTerminal *This, int *plBalance);HRESULT ( *put_Gain)(ITBasicAudioTerminal *This, int lGain);HRESULT ( *get_Gain)(ITBasicAudioTerminal *This, int *plGain);HRESULT ( *QueryFullDuplexSupport)(ITBasicAudioTerminal *This, VARIANT_BOOL *pfSupport);};
struct IAgentCtlCharactersVtbl {HRESULT ( *QueryInterface)(IAgentCtlCharacters *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlCharacters *This);ULONG ( *Release)(IAgentCtlCharacters *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlCharacters *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlCharacters *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlCharacters *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlCharacters *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IAgentCtlCharacters *This, BSTR CharacterID, IAgentCtlCharacter **ppidItem);HRESULT ( *Character)(IAgentCtlCharacters *This, BSTR CharacterID, IAgentCtlCharacter **ppidItem);HRESULT ( *get_Enum)(IAgentCtlCharacters *This, IUnknown **ppunkEnum);HRESULT ( *Unload)(IAgentCtlCharacters *This, BSTR CharacterID);HRESULT ( *Load)(IAgentCtlCharacters *This, BSTR CharacterID, VARIANT LoadKey, IAgentCtlRequest **pidRequest);};
struct IAgentPropertySheetVtbl {HRESULT ( *QueryInterface)(IAgentPropertySheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentPropertySheet *This);ULONG ( *Release)(IAgentPropertySheet *This);HRESULT ( *GetTypeInfoCount)(IAgentPropertySheet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentPropertySheet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentPropertySheet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentPropertySheet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetVisible)(IAgentPropertySheet *This, int *pbVisible);HRESULT ( *SetVisible)(IAgentPropertySheet *This, int bVisible);HRESULT ( *GetPosition)(IAgentPropertySheet *This, int *plLeft, int *plTop);HRESULT ( *GetSize)(IAgentPropertySheet *This, int *plWidth, int *plHeight);HRESULT ( *GetPage)(IAgentPropertySheet *This, BSTR *pbszPage);HRESULT ( *SetPage)(IAgentPropertySheet *This, BSTR bszPage);};
struct IClusterApplicationVtbl {HRESULT ( *QueryInterface)(IClusterApplication *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IClusterApplication *This);ULONG ( *Release)(IClusterApplication *This);HRESULT ( *GetTypeInfoCount)(IClusterApplication *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IClusterApplication *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IClusterApplication *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IClusterApplication *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_DomainNames)(IClusterApplication *This, DomainNames **ppDomains);HRESULT ( *get_ClusterNames)(IClusterApplication *This, BSTR bstrDomainName, ClusterNames **ppClusters);HRESULT ( *OpenCluster)(IClusterApplication *This, BSTR bstrClusterName, ICluster **pCluster);};
struct IHTMLCommentElementVtbl {HRESULT ( *QueryInterface)(IHTMLCommentElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLCommentElement *This);ULONG ( *Release)(IHTMLCommentElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLCommentElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLCommentElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLCommentElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLCommentElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_text)(IHTMLCommentElement *This, BSTR v);HRESULT ( *get_text)(IHTMLCommentElement *This, BSTR *p);HRESULT ( *put_atomic)(IHTMLCommentElement *This, int v);HRESULT ( *get_atomic)(IHTMLCommentElement *This, int *p);};
struct IHTMLControlElementVtbl {HRESULT ( *QueryInterface)(IHTMLControlElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLControlElement *This);ULONG ( *Release)(IHTMLControlElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLControlElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLControlElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLControlElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLControlElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_tabIndex)(IHTMLControlElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLControlElement *This, short *p);HRESULT ( *focus)(IHTMLControlElement *This);HRESULT ( *put_accessKey)(IHTMLControlElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLControlElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *put_onresize)(IHTMLControlElement *This, VARIANT v);HRESULT ( *get_onresize)(IHTMLControlElement *This, VARIANT *p);HRESULT ( *blur)(IHTMLControlElement *This);HRESULT ( *addFilter)(IHTMLControlElement *This, IUnknown *pUnk);HRESULT ( *removeFilter)(IHTMLControlElement *This, IUnknown *pUnk);HRESULT ( *get_clientHeight)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientWidth)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientTop)(IHTMLControlElement *This, int *p);HRESULT ( *get_clientLeft)(IHTMLControlElement *This, int *p);};
struct IHTMLIsIndexElementVtbl {HRESULT ( *QueryInterface)(IHTMLIsIndexElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIsIndexElement *This);ULONG ( *Release)(IHTMLIsIndexElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLIsIndexElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIsIndexElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIsIndexElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIsIndexElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_prompt)(IHTMLIsIndexElement *This, BSTR v);HRESULT ( *get_prompt)(IHTMLIsIndexElement *This, BSTR *p);HRESULT ( *put_action)(IHTMLIsIndexElement *This, BSTR v);HRESULT ( *get_action)(IHTMLIsIndexElement *This, BSTR *p);};
struct ITransactionContextVtbl {HRESULT ( *QueryInterface)(ITransactionContext *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITransactionContext *This);ULONG ( *Release)(ITransactionContext *This);HRESULT ( *GetTypeInfoCount)(ITransactionContext *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITransactionContext *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITransactionContext *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITransactionContext *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreateInstance)(ITransactionContext *This, BSTR pszProgId, VARIANT *pObject);HRESULT ( *Commit)(ITransactionContext *This);HRESULT ( *Abort)(ITransactionContext *This);};
struct IAgentCtlUserInputVtbl {HRESULT ( *QueryInterface)(IAgentCtlUserInput *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlUserInput *This);ULONG ( *Release)(IAgentCtlUserInput *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlUserInput *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlUserInput *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlUserInput *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlUserInput *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IAgentCtlUserInput *This, short *pCount);HRESULT ( *get_Name)(IAgentCtlUserInput *This, BSTR *pName);HRESULT ( *get_CharacterID)(IAgentCtlUserInput *This, BSTR *pCharacterID);HRESULT ( *get_Confidence)(IAgentCtlUserInput *This, int *pConfidence);HRESULT ( *get_Voice)(IAgentCtlUserInput *This, BSTR *pVoice);HRESULT ( *get_Alt1Name)(IAgentCtlUserInput *This, BSTR *pAlt1Name);HRESULT ( *get_Alt1Confidence)(IAgentCtlUserInput *This, int *pAlt1Confidence);HRESULT ( *get_Alt1Voice)(IAgentCtlUserInput *This, BSTR *pAlt1Voice);HRESULT ( *get_Alt2Name)(IAgentCtlUserInput *This, BSTR *pAlt2Name);HRESULT ( *get_Alt2Confidence)(IAgentCtlUserInput *This, int *pAlt2Confidence);HRESULT ( *get_Alt2Voice)(IAgentCtlUserInput *This, BSTR *pAlt2Voice);};
struct IApplicationObjectVtbl {HRESULT ( *QueryInterface)(IApplicationObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IApplicationObject *This);ULONG ( *Release)(IApplicationObject *This);HRESULT ( *GetTypeInfoCount)(IApplicationObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IApplicationObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IApplicationObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IApplicationObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(IApplicationObject *This, BSTR bstrValue, VARIANT *pvar);HRESULT ( *put_Value)(IApplicationObject *This, BSTR bstrValue, VARIANT var);HRESULT ( *putref_Value)(IApplicationObject *This, BSTR bstrValue, VARIANT var);HRESULT ( *Lock)(IApplicationObject *This);HRESULT ( *UnLock)(IApplicationObject *This);HRESULT ( *get_StaticObjects)(IApplicationObject *This, IVariantDictionary **ppProperties);HRESULT ( *get_Contents)(IApplicationObject *This, IVariantDictionary **ppProperties);};
struct IHTMLAnchorElementVtbl {HRESULT ( *QueryInterface)(IHTMLAnchorElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAnchorElement *This);ULONG ( *Release)(IHTMLAnchorElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLAnchorElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAnchorElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAnchorElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAnchorElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_href)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_target)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_rel)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_rel)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_rev)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_rev)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_urn)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_urn)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_Methods)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_Methods)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_name)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_host)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_host)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_hostname)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_pathname)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_port)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_port)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_protocol)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_search)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_search)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_hash)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_hash)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLAnchorElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLAnchorElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLAnchorElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLAnchorElement *This, VARIANT *p);HRESULT ( *put_accessKey)(IHTMLAnchorElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_protocolLong)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLAnchorElement *This, BSTR *p);HRESULT ( *put_tabIndex)(IHTMLAnchorElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLAnchorElement *This, short *p);HRESULT ( *focus)(IHTMLAnchorElement *This);HRESULT ( *blur)(IHTMLAnchorElement *This);};
struct IHTMLHeaderElementVtbl {HRESULT ( *QueryInterface)(IHTMLHeaderElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHeaderElement *This);ULONG ( *Release)(IHTMLHeaderElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHeaderElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHeaderElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHeaderElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHeaderElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLHeaderElement *This, BSTR v);HRESULT ( *get_align)(IHTMLHeaderElement *This, BSTR *p);};
struct IHTMLIFrameElementVtbl {HRESULT ( *QueryInterface)(IHTMLIFrameElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLIFrameElement *This);ULONG ( *Release)(IHTMLIFrameElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLIFrameElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLIFrameElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLIFrameElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLIFrameElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_vspace)(IHTMLIFrameElement *This, int v);HRESULT ( *get_vspace)(IHTMLIFrameElement *This, int *p);HRESULT ( *put_hspace)(IHTMLIFrameElement *This, int v);HRESULT ( *get_hspace)(IHTMLIFrameElement *This, int *p);HRESULT ( *put_align)(IHTMLIFrameElement *This, BSTR v);HRESULT ( *get_align)(IHTMLIFrameElement *This, BSTR *p);};
struct IHTMLLegendElementVtbl {HRESULT ( *QueryInterface)(IHTMLLegendElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLegendElement *This);ULONG ( *Release)(IHTMLLegendElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLegendElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLegendElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLegendElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLegendElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLLegendElement *This, BSTR v);HRESULT ( *get_align)(IHTMLLegendElement *This, BSTR *p);};
struct IHTMLNextIdElementVtbl {HRESULT ( *QueryInterface)(IHTMLNextIdElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLNextIdElement *This);ULONG ( *Release)(IHTMLNextIdElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLNextIdElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLNextIdElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLNextIdElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLNextIdElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_n)(IHTMLNextIdElement *This, BSTR v);HRESULT ( *get_n)(IHTMLNextIdElement *This, BSTR *p);};
struct IHTMLStyleFontFaceVtbl {HRESULT ( *QueryInterface)(IHTMLStyleFontFace *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleFontFace *This);ULONG ( *Release)(IHTMLStyleFontFace *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleFontFace *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleFontFace *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleFontFace *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleFontFace *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontsrc)(IHTMLStyleFontFace *This, BSTR v);HRESULT ( *get_fontsrc)(IHTMLStyleFontFace *This, BSTR *p);};
struct ClusNetInterfacesVtbl {HRESULT ( *QueryInterface)(ClusNetInterfaces *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNetInterfaces *This);ULONG ( *Release)(ClusNetInterfaces *This);HRESULT ( *GetTypeInfoCount)(ClusNetInterfaces *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNetInterfaces *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNetInterfaces *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNetInterfaces *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusNetInterfaces *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusNetInterfaces *This, IUnknown **retval);HRESULT ( *Refresh)(ClusNetInterfaces *This);HRESULT ( *get_Item)(ClusNetInterfaces *This, VARIANT varIndex, ClusNetInterface **ppClusNetInterface);};
struct ClusObjCollectionVtbl {HRESULT ( *QueryInterface)(ClusObjCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusObjCollection *This);ULONG ( *Release)(ClusObjCollection *This);HRESULT ( *GetTypeInfoCount)(ClusObjCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusObjCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusObjCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusObjCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusObjCollection *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusObjCollection *This, IUnknown **retval);HRESULT ( *Refresh)(ClusObjCollection *This);};
struct IADsPropertyEntryVtbl {HRESULT ( *QueryInterface)(IADsPropertyEntry *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPropertyEntry *This);ULONG ( *Release)(IADsPropertyEntry *This);HRESULT ( *GetTypeInfoCount)(IADsPropertyEntry *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPropertyEntry *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPropertyEntry *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPropertyEntry *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Clear)(IADsPropertyEntry *This);HRESULT ( *get_Name)(IADsPropertyEntry *This, BSTR *retval);HRESULT ( *put_Name)(IADsPropertyEntry *This, BSTR bstrName);HRESULT ( *get_ADsType)(IADsPropertyEntry *This, int *retval);HRESULT ( *put_ADsType)(IADsPropertyEntry *This, int lnADsType);HRESULT ( *get_ControlCode)(IADsPropertyEntry *This, int *retval);HRESULT ( *put_ControlCode)(IADsPropertyEntry *This, int lnControlCode);HRESULT ( *get_Values)(IADsPropertyEntry *This, VARIANT *retval);HRESULT ( *put_Values)(IADsPropertyEntry *This, VARIANT vValues);};
struct IDocHostUIHandlerVtbl {HRESULT ( *QueryInterface)(IDocHostUIHandler *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDocHostUIHandler *This);ULONG ( *Release)(IDocHostUIHandler *This);HRESULT ( *ShowContextMenu)(IDocHostUIHandler *This, DWORD dwID, POINT *ppt, IUnknown *pcmdtReserved, IDispatch *pdispReserved);HRESULT ( *GetHostInfo)(IDocHostUIHandler *This, DOCHOSTUIINFO *pInfo);HRESULT ( *ShowUI)(IDocHostUIHandler *This, DWORD dwID, IOleInPlaceActiveObject *pActiveObject, IOleCommandTarget *pCommandTarget, IOleInPlaceFrame *pFrame, IOleInPlaceUIWindow *pDoc);HRESULT ( *HideUI)(IDocHostUIHandler *This);HRESULT ( *UpdateUI)(IDocHostUIHandler *This);HRESULT ( *EnableModeless)(IDocHostUIHandler *This, BOOL fEnable);HRESULT ( *OnDocWindowActivate)(IDocHostUIHandler *This, BOOL fActivate);HRESULT ( *OnFrameWindowActivate)(IDocHostUIHandler *This, BOOL fActivate);HRESULT ( *ResizeBorder)(IDocHostUIHandler *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fRameWindow);HRESULT ( *TranslateAcceleratorA)(IDocHostUIHandler *This, LPMSG lpMsg,  GUID *pguidCmdGroup, DWORD nCmdID);HRESULT ( *GetOptionKeyPath)(IDocHostUIHandler *This, LPOLESTR *pchKey, DWORD dw);HRESULT ( *GetDropTarget)(IDocHostUIHandler *This, IDropTarget *pDropTarget, IDropTarget **ppDropTarget);HRESULT ( *GetExternal)(IDocHostUIHandler *This, IDispatch **ppDispatch);HRESULT ( *TranslateUrl)(IDocHostUIHandler *This, DWORD dwTranslate, OLECHAR *pchURLIn, OLECHAR **ppchURLOut);HRESULT ( *FilterDataObject)(IDocHostUIHandler *This, IDataObject *pDO, IDataObject **ppDORet);};
struct IHTMLBlockElementVtbl {HRESULT ( *QueryInterface)(IHTMLBlockElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBlockElement *This);ULONG ( *Release)(IHTMLBlockElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBlockElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBlockElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBlockElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBlockElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_clear)(IHTMLBlockElement *This, BSTR v);HRESULT ( *get_clear)(IHTMLBlockElement *This, BSTR *p);};
struct IHTMLDListElementVtbl {HRESULT ( *QueryInterface)(IHTMLDListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDListElement *This);ULONG ( *Release)(IHTMLDListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLDListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLDListElement *This, VARIANT_BOOL *p);};
struct IHTMLEmbedElementVtbl {HRESULT ( *QueryInterface)(IHTMLEmbedElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEmbedElement *This);ULONG ( *Release)(IHTMLEmbedElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLEmbedElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEmbedElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEmbedElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEmbedElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_hidden)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_hidden)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *get_palette)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *get_pluginspage)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_src)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_src)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_units)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_units)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLEmbedElement *This, BSTR v);HRESULT ( *get_name)(IHTMLEmbedElement *This, BSTR *p);HRESULT ( *put_width)(IHTMLEmbedElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLEmbedElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLEmbedElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLEmbedElement *This, VARIANT *p);};
struct IHTMLLabelElementVtbl {HRESULT ( *QueryInterface)(IHTMLLabelElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLabelElement *This);ULONG ( *Release)(IHTMLLabelElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLabelElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLabelElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLabelElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLabelElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_htmlFor)(IHTMLLabelElement *This, BSTR v);HRESULT ( *get_htmlFor)(IHTMLLabelElement *This, BSTR *p);HRESULT ( *put_accessKey)(IHTMLLabelElement *This, BSTR v);HRESULT ( *get_accessKey)(IHTMLLabelElement *This, BSTR *p);};
struct IHTMLTableCaptionVtbl {HRESULT ( *QueryInterface)(IHTMLTableCaption *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCaption *This);ULONG ( *Release)(IHTMLTableCaption *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCaption *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCaption *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCaption *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCaption *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableCaption *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCaption *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCaption *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCaption *This, BSTR *p);};
struct IHTMLTableSectionVtbl {HRESULT ( *QueryInterface)(IHTMLTableSection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableSection *This);ULONG ( *Release)(IHTMLTableSection *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableSection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableSection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableSection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableSection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableSection *This, BSTR v);HRESULT ( *get_align)(IHTMLTableSection *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableSection *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableSection *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableSection *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableSection *This, VARIANT *p);HRESULT ( *get_rows)(IHTMLTableSection *This, IHTMLElementCollection **p);HRESULT ( *insertRow)(IHTMLTableSection *This, int index, IDispatch **row);HRESULT ( *deleteRow)(IHTMLTableSection *This, int index);};
struct IHTMLTitleElementVtbl {HRESULT ( *QueryInterface)(IHTMLTitleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTitleElement *This);ULONG ( *Release)(IHTMLTitleElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTitleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTitleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTitleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTitleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_text)(IHTMLTitleElement *This, BSTR v);HRESULT ( *get_text)(IHTMLTitleElement *This, BSTR *p);};
struct ITParticipantInfoVtbl {HRESULT ( *QueryInterface)(ITParticipantInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITParticipantInfo *This);ULONG ( *Release)(ITParticipantInfo *This);HRESULT ( *GetTypeInfoCount)(ITParticipantInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITParticipantInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITParticipantInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITParticipantInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ITParticipantInfo *This, BSTR *ppName);HRESULT ( *get_Address)(ITParticipantInfo *This, BSTR *ppAddressName);HRESULT ( *get_RelatedCall)(ITParticipantInfo *This, ITCallInfo **ppCall);HRESULT ( *get_Call)(ITParticipantInfo *This, ITCallInfo **ppCall);};
struct ITTerminalSupportVtbl {HRESULT ( *QueryInterface)(ITTerminalSupport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTerminalSupport *This);ULONG ( *Release)(ITTerminalSupport *This);HRESULT ( *GetTypeInfoCount)(ITTerminalSupport *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTerminalSupport *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTerminalSupport *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTerminalSupport *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_StaticTerminals)(ITTerminalSupport *This, VARIANT *pVariant);HRESULT ( *_EnumerateStaticTerminals)(ITTerminalSupport *This, IEnumTerminal **ppTerminalEnumerator);HRESULT ( *get_DynamicTerminalClasses)(ITTerminalSupport *This, VARIANT *pVariant);HRESULT ( *_EnumerateDynamicTerminalClasses)(ITTerminalSupport *This, IEnumTerminalClasses **ppTerminalClassEnumerator);HRESULT ( *CreateTerminal)(ITTerminalSupport *This, BSTR pTerminalClass, ITTerminal **ppTerminal);HRESULT ( *GetDefaultTerminal)(ITTerminalSupport *This, BSTR pMediaType, ITTerminal **ppTerminal);};
struct IADsOpenDSObjectVtbl {HRESULT ( *QueryInterface)(IADsOpenDSObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsOpenDSObject *This);ULONG ( *Release)(IADsOpenDSObject *This);HRESULT ( *GetTypeInfoCount)(IADsOpenDSObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsOpenDSObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsOpenDSObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsOpenDSObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *OpenDSObject)(IADsOpenDSObject *This, BSTR lpszDNName, BSTR lpszUserName, BSTR lpszPassword, int lnReserved, IDispatch **ppOleDsObj);};
struct IAgentCtlRequestVtbl {HRESULT ( *QueryInterface)(IAgentCtlRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlRequest *This);ULONG ( *Release)(IAgentCtlRequest *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ID)(IAgentCtlRequest *This, int *ID);HRESULT ( *get_Status)(IAgentCtlRequest *This, int *Status);HRESULT ( *get_Description)(IAgentCtlRequest *This, BSTR *Description);HRESULT ( *get_Number)(IAgentCtlRequest *This, int *Number);};
struct IAgentNotifySinkVtbl {HRESULT ( *QueryInterface)(IAgentNotifySink *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentNotifySink *This);ULONG ( *Release)(IAgentNotifySink *This);HRESULT ( *GetTypeInfoCount)(IAgentNotifySink *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentNotifySink *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentNotifySink *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentNotifySink *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Command)(IAgentNotifySink *This, int dwCommandID, IUnknown *punkUserInput);HRESULT ( *ActivateInputState)(IAgentNotifySink *This, int dwCharID, int bActivated);HRESULT ( *Restart)(IAgentNotifySink *This);HRESULT ( *Shutdown)(IAgentNotifySink *This);HRESULT ( *VisibleState)(IAgentNotifySink *This, int dwCharID, int bVisible, int dwCause);HRESULT ( *Click)(IAgentNotifySink *This, int dwCharID, short fwKeys, int x, int y);HRESULT ( *DblClick)(IAgentNotifySink *This, int dwCharID, short fwKeys, int x, int y);HRESULT ( *DragStart)(IAgentNotifySink *This, int dwCharID, short fwKeys, int x, int y);HRESULT ( *DragComplete)(IAgentNotifySink *This, int dwCharID, short fwKeys, int x, int y);HRESULT ( *RequestStart)(IAgentNotifySink *This, int dwRequestID);HRESULT ( *RequestComplete)(IAgentNotifySink *This, int dwRequestID, int hrStatus);HRESULT ( *BookMark)(IAgentNotifySink *This, int dwBookMarkID);HRESULT ( *Idle)(IAgentNotifySink *This, int dwCharID, int bStart);HRESULT ( *Move)(IAgentNotifySink *This, int dwCharID, int x, int y, int dwCause);HRESULT ( *Size)(IAgentNotifySink *This, int dwCharID, int lWidth, int lHeight);HRESULT ( *BalloonVisibleState)(IAgentNotifySink *This, int dwCharID, int bVisible);};
struct IHTMLBaseElementVtbl {HRESULT ( *QueryInterface)(IHTMLBaseElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBaseElement *This);ULONG ( *Release)(IHTMLBaseElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBaseElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBaseElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBaseElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBaseElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLBaseElement *This, BSTR v);HRESULT ( *get_href)(IHTMLBaseElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLBaseElement *This, BSTR v);HRESULT ( *get_target)(IHTMLBaseElement *This, BSTR *p);};
struct IHTMLDatabindingVtbl {HRESULT ( *QueryInterface)(IHTMLDatabinding *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDatabinding *This);ULONG ( *Release)(IHTMLDatabinding *This);HRESULT ( *GetTypeInfoCount)(IHTMLDatabinding *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDatabinding *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDatabinding *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDatabinding *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_dataFld)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataFld)(IHTMLDatabinding *This, BSTR *p);HRESULT ( *put_dataSrc)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataSrc)(IHTMLDatabinding *This, BSTR *p);HRESULT ( *put_dataFormatAs)(IHTMLDatabinding *This, BSTR v);HRESULT ( *get_dataFormatAs)(IHTMLDatabinding *This, BSTR *p);};
struct IHTMLDivPositionVtbl {HRESULT ( *QueryInterface)(IHTMLDivPosition *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDivPosition *This);ULONG ( *Release)(IHTMLDivPosition *This);HRESULT ( *GetTypeInfoCount)(IHTMLDivPosition *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDivPosition *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDivPosition *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDivPosition *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLDivPosition *This, BSTR v);HRESULT ( *get_align)(IHTMLDivPosition *This, BSTR *p);};
struct IHTMLFontElementVtbl {HRESULT ( *QueryInterface)(IHTMLFontElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFontElement *This);ULONG ( *Release)(IHTMLFontElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFontElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFontElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFontElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFontElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_color)(IHTMLFontElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLFontElement *This, VARIANT *p);HRESULT ( *put_face)(IHTMLFontElement *This, BSTR v);HRESULT ( *get_face)(IHTMLFontElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLFontElement *This, VARIANT v);HRESULT ( *get_size)(IHTMLFontElement *This, VARIANT *p);};
struct IHTMLFormElementVtbl {HRESULT ( *QueryInterface)(IHTMLFormElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFormElement *This);ULONG ( *Release)(IHTMLFormElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLFormElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFormElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFormElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFormElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_action)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_action)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_dir)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_dir)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_encoding)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_encoding)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_method)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_method)(IHTMLFormElement *This, BSTR *p);HRESULT ( *get_elements)(IHTMLFormElement *This, IDispatch **p);HRESULT ( *put_target)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_target)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLFormElement *This, BSTR v);HRESULT ( *get_name)(IHTMLFormElement *This, BSTR *p);HRESULT ( *put_onsubmit)(IHTMLFormElement *This, VARIANT v);HRESULT ( *get_onsubmit)(IHTMLFormElement *This, VARIANT *p);HRESULT ( *put_onreset)(IHTMLFormElement *This, VARIANT v);HRESULT ( *get_onreset)(IHTMLFormElement *This, VARIANT *p);HRESULT ( *submit)(IHTMLFormElement *This);HRESULT ( *reset)(IHTMLFormElement *This);HRESULT ( *put_length)(IHTMLFormElement *This, int v);HRESULT ( *get_length)(IHTMLFormElement *This, int *p);HRESULT ( *get__newEnum)(IHTMLFormElement *This, IUnknown **p);HRESULT ( *item)(IHTMLFormElement *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLFormElement *This, VARIANT tagName, IDispatch **pdisp);};
struct IHTMLMetaElementVtbl {HRESULT ( *QueryInterface)(IHTMLMetaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMetaElement *This);ULONG ( *Release)(IHTMLMetaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMetaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMetaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMetaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMetaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_httpEquiv)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_httpEquiv)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_content)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_content)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_name)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_url)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_url)(IHTMLMetaElement *This, BSTR *p);HRESULT ( *put_charset)(IHTMLMetaElement *This, BSTR v);HRESULT ( *get_charset)(IHTMLMetaElement *This, BSTR *p);};
struct IHTMLParaElementVtbl {HRESULT ( *QueryInterface)(IHTMLParaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLParaElement *This);ULONG ( *Release)(IHTMLParaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLParaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLParaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLParaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLParaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLParaElement *This, BSTR v);HRESULT ( *get_align)(IHTMLParaElement *This, BSTR *p);};
struct IADsFileServiceVtbl {HRESULT ( *QueryInterface)(IADsFileService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsFileService *This);ULONG ( *Release)(IADsFileService *This);HRESULT ( *GetTypeInfoCount)(IADsFileService *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsFileService *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsFileService *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsFileService *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsFileService *This, BSTR *retval);HRESULT ( *get_Class)(IADsFileService *This, BSTR *retval);HRESULT ( *get_GUID)(IADsFileService *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsFileService *This, BSTR *retval);HRESULT ( *get_Parent)(IADsFileService *This, BSTR *retval);HRESULT ( *get_Schema)(IADsFileService *This, BSTR *retval);HRESULT ( *GetInfo)(IADsFileService *This);HRESULT ( *SetInfo)(IADsFileService *This);HRESULT ( *Get)(IADsFileService *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsFileService *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsFileService *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsFileService *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsFileService *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_HostComputer)(IADsFileService *This, BSTR *retval);HRESULT ( *put_HostComputer)(IADsFileService *This, BSTR bstrHostComputer);HRESULT ( *get_DisplayName)(IADsFileService *This, BSTR *retval);HRESULT ( *put_DisplayName)(IADsFileService *This, BSTR bstrDisplayName);HRESULT ( *get_Version)(IADsFileService *This, BSTR *retval);HRESULT ( *put_Version)(IADsFileService *This, BSTR bstrVersion);HRESULT ( *get_ServiceType)(IADsFileService *This, int *retval);HRESULT ( *put_ServiceType)(IADsFileService *This, int lnServiceType);HRESULT ( *get_StartType)(IADsFileService *This, int *retval);HRESULT ( *put_StartType)(IADsFileService *This, int lnStartType);HRESULT ( *get_Path)(IADsFileService *This, BSTR *retval);HRESULT ( *put_Path)(IADsFileService *This, BSTR bstrPath);HRESULT ( *get_StartupParameters)(IADsFileService *This, BSTR *retval);HRESULT ( *put_StartupParameters)(IADsFileService *This, BSTR bstrStartupParameters);HRESULT ( *get_ErrorControl)(IADsFileService *This, int *retval);HRESULT ( *put_ErrorControl)(IADsFileService *This, int lnErrorControl);HRESULT ( *get_LoadOrderGroup)(IADsFileService *This, BSTR *retval);HRESULT ( *put_LoadOrderGroup)(IADsFileService *This, BSTR bstrLoadOrderGroup);HRESULT ( *get_ServiceAccountName)(IADsFileService *This, BSTR *retval);HRESULT ( *put_ServiceAccountName)(IADsFileService *This, BSTR bstrServiceAccountName);HRESULT ( *get_ServiceAccountPath)(IADsFileService *This, BSTR *retval);HRESULT ( *put_ServiceAccountPath)(IADsFileService *This, BSTR bstrServiceAccountPath);HRESULT ( *get_Dependencies)(IADsFileService *This, VARIANT *retval);HRESULT ( *put_Dependencies)(IADsFileService *This, VARIANT vDependencies);HRESULT ( *get_Description)(IADsFileService *This, BSTR *retval);HRESULT ( *put_Description)(IADsFileService *This, BSTR bstrDescription);HRESULT ( *get_MaxUserCount)(IADsFileService *This, int *retval);HRESULT ( *put_MaxUserCount)(IADsFileService *This, int lnMaxUserCount);};
struct IAgentCharacterVtbl {HRESULT ( *QueryInterface)(IAgentCharacter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCharacter *This);ULONG ( *Release)(IAgentCharacter *This);HRESULT ( *GetTypeInfoCount)(IAgentCharacter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCharacter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCharacter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCharacter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetVisible)(IAgentCharacter *This, int *pbVisible);HRESULT ( *SetPosition)(IAgentCharacter *This, int lLeft, int lTop);HRESULT ( *GetPosition)(IAgentCharacter *This, int *plLeft, int *plTop);HRESULT ( *SetSize)(IAgentCharacter *This, int lWidth, int lHeight);HRESULT ( *GetSize)(IAgentCharacter *This, int *plWidth, int *plHeight);HRESULT ( *GetName)(IAgentCharacter *This, BSTR *pbszName);HRESULT ( *GetDescription)(IAgentCharacter *This, BSTR *pbszDescription);HRESULT ( *GetTTSSpeed)(IAgentCharacter *This, int *pdwSpeed);HRESULT ( *GetTTSPitch)(IAgentCharacter *This, short *pwPitch);HRESULT ( *Activate)(IAgentCharacter *This, short sState);HRESULT ( *SetIdleOn)(IAgentCharacter *This, int bOn);HRESULT ( *GetIdleOn)(IAgentCharacter *This, int *pbOn);HRESULT ( *Prepare)(IAgentCharacter *This, int dwType, BSTR bszName, int bQueue, int *pdwReqID);HRESULT ( *Play)(IAgentCharacter *This, BSTR bszAnimation, int *pdwReqID);HRESULT ( *Stop)(IAgentCharacter *This, int dwReqID);HRESULT ( *StopAll)(IAgentCharacter *This, int lTypes);HRESULT ( *Wait)(IAgentCharacter *This, int dwReqID, int *pdwReqID);HRESULT ( *Interrupt)(IAgentCharacter *This, int dwReqID, int *pdwReqID);HRESULT ( *Show)(IAgentCharacter *This, int bFast, int *pdwReqID);HRESULT ( *Hide)(IAgentCharacter *This, int bFast, int *pdwReqID);HRESULT ( *Speak)(IAgentCharacter *This, BSTR bszText, BSTR bszUrl, int *pdwReqID);HRESULT ( *MoveTo)(IAgentCharacter *This, short x, short y, int lSpeed, int *pdwReqID);HRESULT ( *GestureAt)(IAgentCharacter *This, short x, short y, int *pdwReqID);HRESULT ( *GetMoveCause)(IAgentCharacter *This, int *pdwCause);HRESULT ( *GetVisibilityCause)(IAgentCharacter *This, int *pdwCause);HRESULT ( *HasOtherClients)(IAgentCharacter *This, int *pbHasOtherClients);HRESULT ( *SetSoundEffectsOn)(IAgentCharacter *This, int bOn);HRESULT ( *GetSoundEffectsOn)(IAgentCharacter *This, int *pbOn);HRESULT ( *SetName)(IAgentCharacter *This, BSTR bszName);HRESULT ( *SetDescription)(IAgentCharacter *This, BSTR bszDescription);HRESULT ( *GetExtraData)(IAgentCharacter *This, BSTR *pbszExtraData);};
struct IAgentUserInputVtbl {HRESULT ( *QueryInterface)(IAgentUserInput *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentUserInput *This);ULONG ( *Release)(IAgentUserInput *This);HRESULT ( *GetTypeInfoCount)(IAgentUserInput *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentUserInput *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentUserInput *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentUserInput *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetCount)(IAgentUserInput *This, int *pdwCount);HRESULT ( *GetItemID)(IAgentUserInput *This, int dwItemIndex, int *pdwCommandID);HRESULT ( *GetItemConfidence)(IAgentUserInput *This, int dwItemIndex, int *plConfidence);HRESULT ( *GetItemText)(IAgentUserInput *This, int dwItemIndex, BSTR *pbszText);HRESULT ( *GetAllItemData)(IAgentUserInput *This, VARIANT *pdwItemIndices, VARIANT *plConfidences, VARIANT *pbszText);};
struct IHTMLMapElementVtbl {HRESULT ( *QueryInterface)(IHTMLMapElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMapElement *This);ULONG ( *Release)(IHTMLMapElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMapElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMapElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMapElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMapElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_areas)(IHTMLMapElement *This, IHTMLAreasCollection **p);HRESULT ( *put_name)(IHTMLMapElement *This, BSTR v);HRESULT ( *get_name)(IHTMLMapElement *This, BSTR *p);};
struct ITMediaTerminalVtbl {HRESULT ( *QueryInterface)(ITMediaTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMediaTerminal *This);ULONG ( *Release)(ITMediaTerminal *This);HRESULT ( *GetTypeInfoCount)(ITMediaTerminal *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMediaTerminal *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMediaTerminal *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMediaTerminal *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MediaType)(ITMediaTerminal *This, BSTR *ppMediaType);HRESULT ( *get_Terminal)(ITMediaTerminal *This, ITTerminal **ppTerminal);};
struct FolderItemVerbVtbl {HRESULT ( *QueryInterface)(FolderItemVerb *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItemVerb *This);ULONG ( *Release)(FolderItemVerb *This);HRESULT ( *GetTypeInfoCount)(FolderItemVerb *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItemVerb *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItemVerb *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItemVerb *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItemVerb *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItemVerb *This, BSTR *pbs);HRESULT ( *DoIt)(FolderItemVerb *This);};
struct IADsCollectionVtbl {HRESULT ( *QueryInterface)(IADsCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsCollection *This);ULONG ( *Release)(IADsCollection *This);HRESULT ( *GetTypeInfoCount)(IADsCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(IADsCollection *This, IUnknown **ppEnumerator);HRESULT ( *Add)(IADsCollection *This, BSTR bstrName, VARIANT vItem);HRESULT ( *Remove)(IADsCollection *This, BSTR bstrItemToBeRemoved);HRESULT ( *GetObjectA)(IADsCollection *This, BSTR bstrName, VARIANT *pvItem);};
struct IADsNamespacesVtbl {HRESULT ( *QueryInterface)(IADsNamespaces *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsNamespaces *This);ULONG ( *Release)(IADsNamespaces *This);HRESULT ( *GetTypeInfoCount)(IADsNamespaces *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsNamespaces *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsNamespaces *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsNamespaces *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsNamespaces *This, BSTR *retval);HRESULT ( *get_Class)(IADsNamespaces *This, BSTR *retval);HRESULT ( *get_GUID)(IADsNamespaces *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsNamespaces *This, BSTR *retval);HRESULT ( *get_Parent)(IADsNamespaces *This, BSTR *retval);HRESULT ( *get_Schema)(IADsNamespaces *This, BSTR *retval);HRESULT ( *GetInfo)(IADsNamespaces *This);HRESULT ( *SetInfo)(IADsNamespaces *This);HRESULT ( *Get)(IADsNamespaces *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsNamespaces *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsNamespaces *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsNamespaces *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsNamespaces *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_DefaultContainer)(IADsNamespaces *This, BSTR *retval);HRESULT ( *put_DefaultContainer)(IADsNamespaces *This, BSTR bstrDefaultContainer);};
struct IAgentCommandsVtbl {HRESULT ( *QueryInterface)(IAgentCommands *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCommands *This);ULONG ( *Release)(IAgentCommands *This);HRESULT ( *GetTypeInfoCount)(IAgentCommands *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCommands *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCommands *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCommands *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetCommand)(IAgentCommands *This, int dwCommandID, IUnknown **ppunkCommand);HRESULT ( *GetCount)(IAgentCommands *This, int *pdwCount);HRESULT ( *SetCaption)(IAgentCommands *This, BSTR bszCaption);HRESULT ( *GetCaption)(IAgentCommands *This, BSTR *pbszCaption);HRESULT ( *SetVoice)(IAgentCommands *This, BSTR bszVoice);HRESULT ( *GetVoice)(IAgentCommands *This, BSTR *pbszVoice);HRESULT ( *SetVisible)(IAgentCommands *This, int bVisible);HRESULT ( *GetVisible)(IAgentCommands *This, int *pbVisible);HRESULT ( *Add)(IAgentCommands *This, BSTR bszCaption, BSTR bszVoice, int bEnabled, int bVisible, int *pdwID);HRESULT ( *Insert)(IAgentCommands *This, BSTR bszCaption, BSTR bszVoice, int bEnabled, int bVisible, int dwRefID, int bBefore, int *pdwID);HRESULT ( *Remove)(IAgentCommands *This, int dwID);HRESULT ( *RemoveAll)(IAgentCommands *This);};
struct IHTMLBRElementVtbl {HRESULT ( *QueryInterface)(IHTMLBRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBRElement *This);ULONG ( *Release)(IHTMLBRElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_clear)(IHTMLBRElement *This, BSTR v);HRESULT ( *get_clear)(IHTMLBRElement *This, BSTR *p);};
struct IHTMLDDElementVtbl {HRESULT ( *QueryInterface)(IHTMLDDElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDDElement *This);ULONG ( *Release)(IHTMLDDElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDDElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDDElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDDElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDDElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_noWrap)(IHTMLDDElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDDElement *This, VARIANT_BOOL *p);};
struct IHTMLDTElementVtbl {HRESULT ( *QueryInterface)(IHTMLDTElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDTElement *This);ULONG ( *Release)(IHTMLDTElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDTElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDTElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDTElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDTElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_noWrap)(IHTMLDTElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDTElement *This, VARIANT_BOOL *p);};
struct ISessionObjectVtbl {HRESULT ( *QueryInterface)(ISessionObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISessionObject *This);ULONG ( *Release)(ISessionObject *This);HRESULT ( *GetTypeInfoCount)(ISessionObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISessionObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISessionObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISessionObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_SessionID)(ISessionObject *This, BSTR *pbstrRet);HRESULT ( *get_Value)(ISessionObject *This, BSTR bstrValue, VARIANT *pvar);HRESULT ( *put_Value)(ISessionObject *This, BSTR bstrValue, VARIANT var);HRESULT ( *putref_Value)(ISessionObject *This, BSTR bstrValue, VARIANT var);HRESULT ( *get_Timeout)(ISessionObject *This, int *plvar);HRESULT ( *put_Timeout)(ISessionObject *This, int lvar);HRESULT ( *Abandon)(ISessionObject *This);HRESULT ( *get_CodePage)(ISessionObject *This, int *plvar);HRESULT ( *put_CodePage)(ISessionObject *This, int lvar);HRESULT ( *get_LCID)(ISessionObject *This, int *plvar);HRESULT ( *put_LCID)(ISessionObject *This, int lvar);HRESULT ( *get_StaticObjects)(ISessionObject *This, IVariantDictionary **ppTaggedObjects);HRESULT ( *get_Contents)(ISessionObject *This, IVariantDictionary **ppProperties);};
struct IShellDispatchVtbl {HRESULT ( *QueryInterface)(IShellDispatch *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellDispatch *This);ULONG ( *Release)(IShellDispatch *This);HRESULT ( *GetTypeInfoCount)(IShellDispatch *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellDispatch *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellDispatch *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *get_Parent)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *NameSpace)(IShellDispatch *This, VARIANT vDir, Folder **ppsdf);HRESULT ( *BrowseForFolder)(IShellDispatch *This, int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder **ppsdf);HRESULT ( *Windows)(IShellDispatch *This, IDispatch **ppid);HRESULT ( *Open)(IShellDispatch *This, VARIANT vDir);HRESULT ( *Explore)(IShellDispatch *This, VARIANT vDir);HRESULT ( *MinimizeAll)(IShellDispatch *This);HRESULT ( *UndoMinimizeALL)(IShellDispatch *This);HRESULT ( *FileRun)(IShellDispatch *This);HRESULT ( *CascadeWindows)(IShellDispatch *This);HRESULT ( *TileVertically)(IShellDispatch *This);HRESULT ( *TileHorizontally)(IShellDispatch *This);HRESULT ( *ShutdownWindows)(IShellDispatch *This);HRESULT ( *Suspend)(IShellDispatch *This);HRESULT ( *EjectPC)(IShellDispatch *This);HRESULT ( *SetTime)(IShellDispatch *This);HRESULT ( *TrayProperties)(IShellDispatch *This);HRESULT ( *Help)(IShellDispatch *This);HRESULT ( *FindFiles)(IShellDispatch *This);HRESULT ( *FindComputer)(IShellDispatch *This);HRESULT ( *RefreshMenu)(IShellDispatch *This);HRESULT ( *ControlPanelItem)(IShellDispatch *This, BSTR szDir);};
struct IShellLinkDualVtbl {HRESULT ( *QueryInterface)(IShellLinkDual *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellLinkDual *This);ULONG ( *Release)(IShellLinkDual *This);HRESULT ( *GetTypeInfoCount)(IShellLinkDual *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellLinkDual *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellLinkDual *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellLinkDual *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Path)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Path)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Description)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Description)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_WorkingDirectory)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_WorkingDirectory)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Arguments)(IShellLinkDual *This, BSTR *pbs);HRESULT ( *put_Arguments)(IShellLinkDual *This, BSTR bs);HRESULT ( *get_Hotkey)(IShellLinkDual *This, int *piHK);HRESULT ( *put_Hotkey)(IShellLinkDual *This, int iHK);HRESULT ( *get_ShowCommand)(IShellLinkDual *This, int *piShowCommand);HRESULT ( *put_ShowCommand)(IShellLinkDual *This, int iShowCommand);HRESULT ( *Resolve)(IShellLinkDual *This, int fFlags);HRESULT ( *GetIconLocation)(IShellLinkDual *This, BSTR *pbs, int *piIcon);HRESULT ( *SetIconLocation)(IShellLinkDual *This, BSTR bs, int iIcon);HRESULT ( *Save)(IShellLinkDual *This, VARIANT vWhere);};
struct ITFileTerminalVtbl {HRESULT ( *QueryInterface)(ITFileTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITFileTerminal *This);ULONG ( *Release)(ITFileTerminal *This);HRESULT ( *GetTypeInfoCount)(ITFileTerminal *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITFileTerminal *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITFileTerminal *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITFileTerminal *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_FileName)(ITFileTerminal *This, BSTR pFileName);HRESULT ( *get_FileName)(ITFileTerminal *This, BSTR *ppFileName);};
struct ITNotificationVtbl {HRESULT ( *QueryInterface)(ITNotification *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITNotification *This);ULONG ( *Release)(ITNotification *This);HRESULT ( *GetTypeInfoCount)(ITNotification *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITNotification *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITNotification *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITNotification *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ChangeNotification)(ITNotification *This, RND_NOTIFICATION_ID NotificationId, VARIANT newVal);};
struct ClusRefObjectVtbl {HRESULT ( *QueryInterface)(ClusRefObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusRefObject *This);ULONG ( *Release)(ClusRefObject *This);HRESULT ( *GetTypeInfoCount)(ClusRefObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusRefObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusRefObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusRefObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Handle)(ClusRefObject *This, LONG *phandle);};
struct IADsContainerVtbl {HRESULT ( *QueryInterface)(IADsContainer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsContainer *This);ULONG ( *Release)(IADsContainer *This);HRESULT ( *GetTypeInfoCount)(IADsContainer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsContainer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsContainer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsContainer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IADsContainer *This, int *retval);HRESULT ( *get__NewEnum)(IADsContainer *This, IUnknown **retval);HRESULT ( *get_Filter)(IADsContainer *This, VARIANT *pVar);HRESULT ( *put_Filter)(IADsContainer *This, VARIANT Var);HRESULT ( *get_Hints)(IADsContainer *This, VARIANT *pvFilter);HRESULT ( *put_Hints)(IADsContainer *This, VARIANT vHints);HRESULT ( *GetObjectA)(IADsContainer *This, BSTR ClassName, BSTR RelativeName, IDispatch **ppObject);HRESULT ( *Create)(IADsContainer *This, BSTR ClassName, BSTR RelativeName, IDispatch **ppObject);HRESULT ( *Delete)(IADsContainer *This, BSTR bstrClassName, BSTR bstrRelativeName);HRESULT ( *CopyHere)(IADsContainer *This, BSTR SourceName, BSTR NewName, IDispatch **ppObject);HRESULT ( *MoveHere)(IADsContainer *This, BSTR SourceName, BSTR NewName, IDispatch **ppObject);};
struct IADsFileShareVtbl {HRESULT ( *QueryInterface)(IADsFileShare *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsFileShare *This);ULONG ( *Release)(IADsFileShare *This);HRESULT ( *GetTypeInfoCount)(IADsFileShare *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsFileShare *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsFileShare *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsFileShare *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsFileShare *This, BSTR *retval);HRESULT ( *get_Class)(IADsFileShare *This, BSTR *retval);HRESULT ( *get_GUID)(IADsFileShare *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsFileShare *This, BSTR *retval);HRESULT ( *get_Parent)(IADsFileShare *This, BSTR *retval);HRESULT ( *get_Schema)(IADsFileShare *This, BSTR *retval);HRESULT ( *GetInfo)(IADsFileShare *This);HRESULT ( *SetInfo)(IADsFileShare *This);HRESULT ( *Get)(IADsFileShare *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsFileShare *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsFileShare *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsFileShare *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsFileShare *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_CurrentUserCount)(IADsFileShare *This, int *retval);HRESULT ( *get_Description)(IADsFileShare *This, BSTR *retval);HRESULT ( *put_Description)(IADsFileShare *This, BSTR bstrDescription);HRESULT ( *get_HostComputer)(IADsFileShare *This, BSTR *retval);HRESULT ( *put_HostComputer)(IADsFileShare *This, BSTR bstrHostComputer);HRESULT ( *get_Path)(IADsFileShare *This, BSTR *retval);HRESULT ( *put_Path)(IADsFileShare *This, BSTR bstrPath);HRESULT ( *get_MaxUserCount)(IADsFileShare *This, int *retval);HRESULT ( *put_MaxUserCount)(IADsFileShare *This, int lnMaxUserCount);};
struct IAgentBalloonVtbl {HRESULT ( *QueryInterface)(IAgentBalloon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentBalloon *This);ULONG ( *Release)(IAgentBalloon *This);HRESULT ( *GetTypeInfoCount)(IAgentBalloon *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentBalloon *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentBalloon *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentBalloon *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetEnabled)(IAgentBalloon *This, int *pbEnabled);HRESULT ( *GetNumLines)(IAgentBalloon *This, int *plcLines);HRESULT ( *GetNumCharsPerLine)(IAgentBalloon *This, int *plCharsPerLine);HRESULT ( *GetFontName)(IAgentBalloon *This, BSTR *pbszFontName);HRESULT ( *GetFontSize)(IAgentBalloon *This, int *plFontSize);HRESULT ( *GetFontBold)(IAgentBalloon *This, int *pbFontBold);HRESULT ( *GetFontItalic)(IAgentBalloon *This, int *pbFontItalic);HRESULT ( *GetFontStrikethru)(IAgentBalloon *This, int *pbFontStrikethru);HRESULT ( *GetFontUnderline)(IAgentBalloon *This, int *pbFontUnderline);HRESULT ( *GetForeColor)(IAgentBalloon *This, int *plFGColor);HRESULT ( *GetBackColor)(IAgentBalloon *This, int *plBGColor);HRESULT ( *GetBorderColor)(IAgentBalloon *This, int *plBorderColor);HRESULT ( *SetVisible)(IAgentBalloon *This, int bVisible);HRESULT ( *GetVisible)(IAgentBalloon *This, int *pbVisible);HRESULT ( *SetFontName)(IAgentBalloon *This, BSTR bszFontName);HRESULT ( *SetFontSize)(IAgentBalloon *This, int lFontSize);HRESULT ( *SetFontCharSet)(IAgentBalloon *This, short sFontCharSet);HRESULT ( *GetFontCharSet)(IAgentBalloon *This, short *psFontCharSet);};
struct IAgentCommandVtbl {HRESULT ( *QueryInterface)(IAgentCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCommand *This);ULONG ( *Release)(IAgentCommand *This);HRESULT ( *GetTypeInfoCount)(IAgentCommand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCommand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCommand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCommand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetCaption)(IAgentCommand *This, BSTR bszCaption);HRESULT ( *GetCaption)(IAgentCommand *This, BSTR *pbszCaption);HRESULT ( *SetVoice)(IAgentCommand *This, BSTR bszVoice);HRESULT ( *GetVoice)(IAgentCommand *This, BSTR *pbszVoice);HRESULT ( *SetEnabled)(IAgentCommand *This, int bEnabled);HRESULT ( *GetEnabled)(IAgentCommand *This, int *pbEnabled);HRESULT ( *SetVisible)(IAgentCommand *This, int bVisible);HRESULT ( *GetVisible)(IAgentCommand *This, int *pbVisible);HRESULT ( *SetConfidenceThreshold)(IAgentCommand *This, int lThreshold);HRESULT ( *GetConfidenceThreshold)(IAgentCommand *This, int *plThreshold);HRESULT ( *SetConfidenceText)(IAgentCommand *This, BSTR bszTipText);HRESULT ( *GetConfidenceText)(IAgentCommand *This, BSTR *pbszTipText);HRESULT ( *GetID)(IAgentCommand *This, int *pdwID);};
struct IHTMLSpanFlowVtbl {HRESULT ( *QueryInterface)(IHTMLSpanFlow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSpanFlow *This);ULONG ( *Release)(IHTMLSpanFlow *This);HRESULT ( *GetTypeInfoCount)(IHTMLSpanFlow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSpanFlow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSpanFlow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSpanFlow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLSpanFlow *This, BSTR v);HRESULT ( *get_align)(IHTMLSpanFlow *This, BSTR *p);};
struct IHTMLTableColVtbl {HRESULT ( *QueryInterface)(IHTMLTableCol *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCol *This);ULONG ( *Release)(IHTMLTableCol *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCol *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCol *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCol *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCol *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_span)(IHTMLTableCol *This, int v);HRESULT ( *get_span)(IHTMLTableCol *This, int *p);HRESULT ( *put_width)(IHTMLTableCol *This, VARIANT v);HRESULT ( *get_width)(IHTMLTableCol *This, VARIANT *p);HRESULT ( *put_align)(IHTMLTableCol *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCol *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCol *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCol *This, BSTR *p);};
struct IHTMLTableRowVtbl {HRESULT ( *QueryInterface)(IHTMLTableRow *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableRow *This);ULONG ( *Release)(IHTMLTableRow *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableRow *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableRow *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableRow *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableRow *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLTableRow *This, BSTR v);HRESULT ( *get_align)(IHTMLTableRow *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableRow *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableRow *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTableRow *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTableRow *This, VARIANT *p);HRESULT ( *get_rowIndex)(IHTMLTableRow *This, int *p);HRESULT ( *get_sectionRowIndex)(IHTMLTableRow *This, int *p);HRESULT ( *get_cells)(IHTMLTableRow *This, IHTMLElementCollection **p);HRESULT ( *insertCell)(IHTMLTableRow *This, int index, IDispatch **row);HRESULT ( *deleteCell)(IHTMLTableRow *This, int index);};
struct IMtsEventInfoVtbl {HRESULT ( *QueryInterface)(IMtsEventInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsEventInfo *This);ULONG ( *Release)(IMtsEventInfo *This);HRESULT ( *GetTypeInfoCount)(IMtsEventInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMtsEventInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMtsEventInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMtsEventInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Names)(IMtsEventInfo *This, IUnknown **pUnk);HRESULT ( *get_DisplayName)(IMtsEventInfo *This, BSTR *sDisplayName);HRESULT ( *get_EventID)(IMtsEventInfo *This, BSTR *sGuidEventID);HRESULT ( *get_Count)(IMtsEventInfo *This, int *lCount);HRESULT ( *get_Value)(IMtsEventInfo *This, BSTR sKey, VARIANT *pVal);};
struct ITConsultCallVtbl {HRESULT ( *QueryInterface)(ITConsultCall *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITConsultCall *This);ULONG ( *Release)(ITConsultCall *This);HRESULT ( *GetTypeInfoCount)(ITConsultCall *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITConsultCall *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITConsultCall *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITConsultCall *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CanIConsult)(ITConsultCall *This, VARIANT_BOOL *pfConsult);HRESULT ( *Finish)(ITConsultCall *This);};
struct ClusNetworksVtbl {HRESULT ( *QueryInterface)(ClusNetworks *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNetworks *This);ULONG ( *Release)(ClusNetworks *This);HRESULT ( *GetTypeInfoCount)(ClusNetworks *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNetworks *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNetworks *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNetworks *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusNetworks *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusNetworks *This, IUnknown **retval);HRESULT ( *Refresh)(ClusNetworks *This);HRESULT ( *get_Item)(ClusNetworks *This, VARIANT varIndex, ClusNetwork **ppClusNetwork);};
struct ClusPropertyVtbl {HRESULT ( *QueryInterface)(ClusProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusProperty *This);ULONG ( *Release)(ClusProperty *This);HRESULT ( *GetTypeInfoCount)(ClusProperty *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusProperty *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusProperty *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusProperty *This, BSTR *pbstrName);HRESULT ( *get_Value)(ClusProperty *This, VARIANT *pvarValue);HRESULT ( *put_Value)(ClusProperty *This, VARIANT varValue);};
struct IADsComputerVtbl {HRESULT ( *QueryInterface)(IADsComputer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsComputer *This);ULONG ( *Release)(IADsComputer *This);HRESULT ( *GetTypeInfoCount)(IADsComputer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsComputer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsComputer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsComputer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsComputer *This, BSTR *retval);HRESULT ( *get_Class)(IADsComputer *This, BSTR *retval);HRESULT ( *get_GUID)(IADsComputer *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsComputer *This, BSTR *retval);HRESULT ( *get_Parent)(IADsComputer *This, BSTR *retval);HRESULT ( *get_Schema)(IADsComputer *This, BSTR *retval);HRESULT ( *GetInfo)(IADsComputer *This);HRESULT ( *SetInfo)(IADsComputer *This);HRESULT ( *Get)(IADsComputer *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsComputer *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsComputer *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsComputer *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsComputer *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_ComputerID)(IADsComputer *This, BSTR *retval);HRESULT ( *get_Site)(IADsComputer *This, BSTR *retval);HRESULT ( *get_Description)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Description)(IADsComputer *This, BSTR bstrDescription);HRESULT ( *get_Location)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Location)(IADsComputer *This, BSTR bstrLocation);HRESULT ( *get_PrimaryUser)(IADsComputer *This, BSTR *retval);HRESULT ( *put_PrimaryUser)(IADsComputer *This, BSTR bstrPrimaryUser);HRESULT ( *get_Owner)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Owner)(IADsComputer *This, BSTR bstrOwner);HRESULT ( *get_Division)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Division)(IADsComputer *This, BSTR bstrDivision);HRESULT ( *get_Department)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Department)(IADsComputer *This, BSTR bstrDepartment);HRESULT ( *get_Role)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Role)(IADsComputer *This, BSTR bstrRole);HRESULT ( *get_OperatingSystem)(IADsComputer *This, BSTR *retval);HRESULT ( *put_OperatingSystem)(IADsComputer *This, BSTR bstrOperatingSystem);HRESULT ( *get_OperatingSystemVersion)(IADsComputer *This, BSTR *retval);HRESULT ( *put_OperatingSystemVersion)(IADsComputer *This, BSTR bstrOperatingSystemVersion);HRESULT ( *get_Model)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Model)(IADsComputer *This, BSTR bstrModel);HRESULT ( *get_Processor)(IADsComputer *This, BSTR *retval);HRESULT ( *put_Processor)(IADsComputer *This, BSTR bstrProcessor);HRESULT ( *get_ProcessorCount)(IADsComputer *This, BSTR *retval);HRESULT ( *put_ProcessorCount)(IADsComputer *This, BSTR bstrProcessorCount);HRESULT ( *get_MemorySize)(IADsComputer *This, BSTR *retval);HRESULT ( *put_MemorySize)(IADsComputer *This, BSTR bstrMemorySize);HRESULT ( *get_StorageCapacity)(IADsComputer *This, BSTR *retval);HRESULT ( *put_StorageCapacity)(IADsComputer *This, BSTR bstrStorageCapacity);HRESULT ( *get_NetAddresses)(IADsComputer *This, VARIANT *retval);HRESULT ( *put_NetAddresses)(IADsComputer *This, VARIANT vNetAddresses);};
struct IADsLocalityVtbl {HRESULT ( *QueryInterface)(IADsLocality *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsLocality *This);ULONG ( *Release)(IADsLocality *This);HRESULT ( *GetTypeInfoCount)(IADsLocality *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsLocality *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsLocality *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsLocality *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsLocality *This, BSTR *retval);HRESULT ( *get_Class)(IADsLocality *This, BSTR *retval);HRESULT ( *get_GUID)(IADsLocality *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsLocality *This, BSTR *retval);HRESULT ( *get_Parent)(IADsLocality *This, BSTR *retval);HRESULT ( *get_Schema)(IADsLocality *This, BSTR *retval);HRESULT ( *GetInfo)(IADsLocality *This);HRESULT ( *SetInfo)(IADsLocality *This);HRESULT ( *Get)(IADsLocality *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsLocality *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsLocality *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsLocality *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsLocality *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Description)(IADsLocality *This, BSTR *retval);HRESULT ( *put_Description)(IADsLocality *This, BSTR bstrDescription);HRESULT ( *get_LocalityName)(IADsLocality *This, BSTR *retval);HRESULT ( *put_LocalityName)(IADsLocality *This, BSTR bstrLocalityName);HRESULT ( *get_PostalAddress)(IADsLocality *This, BSTR *retval);HRESULT ( *put_PostalAddress)(IADsLocality *This, BSTR bstrPostalAddress);HRESULT ( *get_SeeAlso)(IADsLocality *This, VARIANT *retval);HRESULT ( *put_SeeAlso)(IADsLocality *This, VARIANT vSeeAlso);};
struct IADsPathnameVtbl {HRESULT ( *QueryInterface)(IADsPathname *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPathname *This);ULONG ( *Release)(IADsPathname *This);HRESULT ( *GetTypeInfoCount)(IADsPathname *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPathname *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPathname *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPathname *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Set)(IADsPathname *This, BSTR bstrADsPath, int lnSetType);HRESULT ( *SetDisplayType)(IADsPathname *This, int lnDisplayType);HRESULT ( *Retrieve)(IADsPathname *This, int lnFormatType, BSTR *pbstrADsPath);HRESULT ( *GetNumElements)(IADsPathname *This, int *plnNumPathElements);HRESULT ( *GetElement)(IADsPathname *This, int lnElementIndex, BSTR *pbstrElement);HRESULT ( *AddLeafElement)(IADsPathname *This, BSTR bstrLeafElement);HRESULT ( *RemoveLeafElement)(IADsPathname *This);HRESULT ( *CopyPath)(IADsPathname *This, IDispatch **ppAdsPath);};
struct IADsResourceVtbl {HRESULT ( *QueryInterface)(IADsResource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsResource *This);ULONG ( *Release)(IADsResource *This);HRESULT ( *GetTypeInfoCount)(IADsResource *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsResource *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsResource *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsResource *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsResource *This, BSTR *retval);HRESULT ( *get_Class)(IADsResource *This, BSTR *retval);HRESULT ( *get_GUID)(IADsResource *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsResource *This, BSTR *retval);HRESULT ( *get_Parent)(IADsResource *This, BSTR *retval);HRESULT ( *get_Schema)(IADsResource *This, BSTR *retval);HRESULT ( *GetInfo)(IADsResource *This);HRESULT ( *SetInfo)(IADsResource *This);HRESULT ( *Get)(IADsResource *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsResource *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsResource *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsResource *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsResource *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_User)(IADsResource *This, BSTR *retval);HRESULT ( *get_UserPath)(IADsResource *This, BSTR *retval);HRESULT ( *get_Path)(IADsResource *This, BSTR *retval);HRESULT ( *get_LockCount)(IADsResource *This, int *retval);};
struct IHTMLBGsoundVtbl {HRESULT ( *QueryInterface)(IHTMLBGsound *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBGsound *This);ULONG ( *Release)(IHTMLBGsound *This);HRESULT ( *GetTypeInfoCount)(IHTMLBGsound *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBGsound *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBGsound *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBGsound *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLBGsound *This, BSTR v);HRESULT ( *get_src)(IHTMLBGsound *This, BSTR *p);HRESULT ( *put_loop)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_loop)(IHTMLBGsound *This, VARIANT *p);HRESULT ( *put_volume)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_volume)(IHTMLBGsound *This, VARIANT *p);HRESULT ( *put_balance)(IHTMLBGsound *This, VARIANT v);HRESULT ( *get_balance)(IHTMLBGsound *This, VARIANT *p);};
struct IPackageUtilVtbl {HRESULT ( *QueryInterface)(IPackageUtil *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IPackageUtil *This);ULONG ( *Release)(IPackageUtil *This);HRESULT ( *GetTypeInfoCount)(IPackageUtil *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IPackageUtil *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IPackageUtil *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IPackageUtil *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *InstallPackage)(IPackageUtil *This, BSTR bstrPackageFile, BSTR bstrInstallPath, int lOptions);HRESULT ( *ExportPackage)(IPackageUtil *This, BSTR bstrPackageID, BSTR bstrPackageFile, int lOptions);HRESULT ( *ShutdownPackage)(IPackageUtil *This, BSTR bstrPackageID);};
struct IXMLDocumentVtbl {HRESULT ( *QueryInterface)(IXMLDocument *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLDocument *This);ULONG ( *Release)(IXMLDocument *This);HRESULT ( *GetTypeInfoCount)(IXMLDocument *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLDocument *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLDocument *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_root)(IXMLDocument *This, IXMLElement **p);HRESULT ( *get_fileSize)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IXMLDocument *This, BSTR *p);HRESULT ( *get_URL)(IXMLDocument *This, BSTR *p);HRESULT ( *put_URL)(IXMLDocument *This, BSTR p);HRESULT ( *get_mimeType)(IXMLDocument *This, BSTR *p);HRESULT ( *get_readyState)(IXMLDocument *This, int *pl);HRESULT ( *get_charset)(IXMLDocument *This, BSTR *p);HRESULT ( *put_charset)(IXMLDocument *This, BSTR p);HRESULT ( *get_version)(IXMLDocument *This, BSTR *p);HRESULT ( *get_doctype)(IXMLDocument *This, BSTR *p);HRESULT ( *get_dtdURL)(IXMLDocument *This, BSTR *p);HRESULT ( *createElement)(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);};
struct ClusResTypeVtbl {HRESULT ( *QueryInterface)(ClusResType *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResType *This);ULONG ( *Release)(ClusResType *This);HRESULT ( *GetTypeInfoCount)(ClusResType *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResType *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResType *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResType *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusResType *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusResType *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusResType *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusResType *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusResType *This, ClusProperties **ppProperties);HRESULT ( *Delete)(ClusResType *This);HRESULT ( *get_Cluster)(ClusResType *This, ICluster **ppCluster);HRESULT ( *get_Resources)(ClusResType *This, ClusResTypeResources **ppClusterResTypeResources);};
struct IADsServiceVtbl {HRESULT ( *QueryInterface)(IADsService *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsService *This);ULONG ( *Release)(IADsService *This);HRESULT ( *GetTypeInfoCount)(IADsService *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsService *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsService *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsService *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsService *This, BSTR *retval);HRESULT ( *get_Class)(IADsService *This, BSTR *retval);HRESULT ( *get_GUID)(IADsService *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsService *This, BSTR *retval);HRESULT ( *get_Parent)(IADsService *This, BSTR *retval);HRESULT ( *get_Schema)(IADsService *This, BSTR *retval);HRESULT ( *GetInfo)(IADsService *This);HRESULT ( *SetInfo)(IADsService *This);HRESULT ( *Get)(IADsService *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsService *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsService *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsService *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsService *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_HostComputer)(IADsService *This, BSTR *retval);HRESULT ( *put_HostComputer)(IADsService *This, BSTR bstrHostComputer);HRESULT ( *get_DisplayName)(IADsService *This, BSTR *retval);HRESULT ( *put_DisplayName)(IADsService *This, BSTR bstrDisplayName);HRESULT ( *get_Version)(IADsService *This, BSTR *retval);HRESULT ( *put_Version)(IADsService *This, BSTR bstrVersion);HRESULT ( *get_ServiceType)(IADsService *This, int *retval);HRESULT ( *put_ServiceType)(IADsService *This, int lnServiceType);HRESULT ( *get_StartType)(IADsService *This, int *retval);HRESULT ( *put_StartType)(IADsService *This, int lnStartType);HRESULT ( *get_Path)(IADsService *This, BSTR *retval);HRESULT ( *put_Path)(IADsService *This, BSTR bstrPath);HRESULT ( *get_StartupParameters)(IADsService *This, BSTR *retval);HRESULT ( *put_StartupParameters)(IADsService *This, BSTR bstrStartupParameters);HRESULT ( *get_ErrorControl)(IADsService *This, int *retval);HRESULT ( *put_ErrorControl)(IADsService *This, int lnErrorControl);HRESULT ( *get_LoadOrderGroup)(IADsService *This, BSTR *retval);HRESULT ( *put_LoadOrderGroup)(IADsService *This, BSTR bstrLoadOrderGroup);HRESULT ( *get_ServiceAccountName)(IADsService *This, BSTR *retval);HRESULT ( *put_ServiceAccountName)(IADsService *This, BSTR bstrServiceAccountName);HRESULT ( *get_ServiceAccountPath)(IADsService *This, BSTR *retval);HRESULT ( *put_ServiceAccountPath)(IADsService *This, BSTR bstrServiceAccountPath);HRESULT ( *get_Dependencies)(IADsService *This, VARIANT *retval);HRESULT ( *put_Dependencies)(IADsService *This, VARIANT vDependencies);};
struct IADsSessionVtbl {HRESULT ( *QueryInterface)(IADsSession *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsSession *This);ULONG ( *Release)(IADsSession *This);HRESULT ( *GetTypeInfoCount)(IADsSession *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsSession *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsSession *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsSession *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsSession *This, BSTR *retval);HRESULT ( *get_Class)(IADsSession *This, BSTR *retval);HRESULT ( *get_GUID)(IADsSession *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsSession *This, BSTR *retval);HRESULT ( *get_Parent)(IADsSession *This, BSTR *retval);HRESULT ( *get_Schema)(IADsSession *This, BSTR *retval);HRESULT ( *GetInfo)(IADsSession *This);HRESULT ( *SetInfo)(IADsSession *This);HRESULT ( *Get)(IADsSession *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsSession *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsSession *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsSession *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsSession *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_User)(IADsSession *This, BSTR *retval);HRESULT ( *get_UserPath)(IADsSession *This, BSTR *retval);HRESULT ( *get_Computer)(IADsSession *This, BSTR *retval);HRESULT ( *get_ComputerPath)(IADsSession *This, BSTR *retval);HRESULT ( *get_ConnectTime)(IADsSession *This, int *retval);HRESULT ( *get_IdleTime)(IADsSession *This, int *retval);};
struct IHTMLDialogVtbl {HRESULT ( *QueryInterface)(IHTMLDialog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDialog *This);ULONG ( *Release)(IHTMLDialog *This);HRESULT ( *GetTypeInfoCount)(IHTMLDialog *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDialog *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDialog *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDialog *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_dialogTop)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogTop)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogLeft)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogLeft)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogWidth)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogWidth)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_dialogHeight)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_dialogHeight)(IHTMLDialog *This, VARIANT *p);HRESULT ( *get_dialogArguments)(IHTMLDialog *This, VARIANT *p);HRESULT ( *get_menuArguments)(IHTMLDialog *This, VARIANT *p);HRESULT ( *put_returnValue)(IHTMLDialog *This, VARIANT v);HRESULT ( *get_returnValue)(IHTMLDialog *This, VARIANT *p);HRESULT ( *close)(IHTMLDialog *This);HRESULT ( *toString)(IHTMLDialog *This, BSTR *String);};
struct IHTMLScreenVtbl {HRESULT ( *QueryInterface)(IHTMLScreen *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScreen *This);ULONG ( *Release)(IHTMLScreen *This);HRESULT ( *GetTypeInfoCount)(IHTMLScreen *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScreen *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScreen *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScreen *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_colorDepth)(IHTMLScreen *This, int *p);HRESULT ( *put_bufferDepth)(IHTMLScreen *This, int v);HRESULT ( *get_bufferDepth)(IHTMLScreen *This, int *p);HRESULT ( *get_width)(IHTMLScreen *This, int *p);HRESULT ( *get_height)(IHTMLScreen *This, int *p);HRESULT ( *put_updateInterval)(IHTMLScreen *This, int v);HRESULT ( *get_updateInterval)(IHTMLScreen *This, int *p);HRESULT ( *get_availHeight)(IHTMLScreen *This, int *p);HRESULT ( *get_availWidth)(IHTMLScreen *This, int *p);HRESULT ( *get_fontSmoothingEnabled)(IHTMLScreen *This, VARIANT_BOOL *p);};
struct IReadCookieVtbl {HRESULT ( *QueryInterface)(IReadCookie *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IReadCookie *This);ULONG ( *Release)(IReadCookie *This);HRESULT ( *GetTypeInfoCount)(IReadCookie *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IReadCookie *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IReadCookie *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IReadCookie *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IReadCookie *This, VARIANT Var, VARIANT *pVariantReturn);HRESULT ( *get_HasKeys)(IReadCookie *This, VARIANT_BOOL *pfHasKeys);HRESULT ( *get__NewEnum)(IReadCookie *This, IUnknown **ppEnumReturn);HRESULT ( *get_Count)(IReadCookie *This, int *cStrRet);HRESULT ( *get_Key)(IReadCookie *This, VARIANT VarKey, VARIANT *pvar);};
struct ITCallTonesVtbl {HRESULT ( *QueryInterface)(ITCallTones *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallTones *This);ULONG ( *Release)(ITCallTones *This);HRESULT ( *GetTypeInfoCount)(ITCallTones *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCallTones *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCallTones *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCallTones *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GenerateDTMFs)(ITCallTones *This, BSTR pDTMFs);};
struct IADsSyntaxVtbl {HRESULT ( *QueryInterface)(IADsSyntax *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsSyntax *This);ULONG ( *Release)(IADsSyntax *This);HRESULT ( *GetTypeInfoCount)(IADsSyntax *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsSyntax *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsSyntax *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsSyntax *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsSyntax *This, BSTR *retval);HRESULT ( *get_Class)(IADsSyntax *This, BSTR *retval);HRESULT ( *get_GUID)(IADsSyntax *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsSyntax *This, BSTR *retval);HRESULT ( *get_Parent)(IADsSyntax *This, BSTR *retval);HRESULT ( *get_Schema)(IADsSyntax *This, BSTR *retval);HRESULT ( *GetInfo)(IADsSyntax *This);HRESULT ( *SetInfo)(IADsSyntax *This);HRESULT ( *Get)(IADsSyntax *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsSyntax *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsSyntax *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsSyntax *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsSyntax *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_OleAutoDataType)(IADsSyntax *This, int *retval);HRESULT ( *put_OleAutoDataType)(IADsSyntax *This, int lnOleAutoDataType);};
struct IHTMLTableVtbl {HRESULT ( *QueryInterface)(IHTMLTable *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTable *This);ULONG ( *Release)(IHTMLTable *This);HRESULT ( *GetTypeInfoCount)(IHTMLTable *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTable *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTable *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTable *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_cols)(IHTMLTable *This, int v);HRESULT ( *get_cols)(IHTMLTable *This, int *p);HRESULT ( *put_border)(IHTMLTable *This, VARIANT v);HRESULT ( *get_border)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_frame)(IHTMLTable *This, BSTR v);HRESULT ( *get_frame)(IHTMLTable *This, BSTR *p);HRESULT ( *put_rules)(IHTMLTable *This, BSTR v);HRESULT ( *get_rules)(IHTMLTable *This, BSTR *p);HRESULT ( *put_cellSpacing)(IHTMLTable *This, VARIANT v);HRESULT ( *get_cellSpacing)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_cellPadding)(IHTMLTable *This, VARIANT v);HRESULT ( *get_cellPadding)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_background)(IHTMLTable *This, BSTR v);HRESULT ( *get_background)(IHTMLTable *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTable *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColor)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTable *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_align)(IHTMLTable *This, BSTR v);HRESULT ( *get_align)(IHTMLTable *This, BSTR *p);HRESULT ( *refresh)(IHTMLTable *This);HRESULT ( *get_rows)(IHTMLTable *This, IHTMLElementCollection **p);HRESULT ( *put_width)(IHTMLTable *This, VARIANT v);HRESULT ( *get_width)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_height)(IHTMLTable *This, VARIANT v);HRESULT ( *get_height)(IHTMLTable *This, VARIANT *p);HRESULT ( *put_dataPageSize)(IHTMLTable *This, int v);HRESULT ( *get_dataPageSize)(IHTMLTable *This, int *p);HRESULT ( *nextPage)(IHTMLTable *This);HRESULT ( *previousPage)(IHTMLTable *This);HRESULT ( *get_tHead)(IHTMLTable *This, IHTMLTableSection **p);HRESULT ( *get_tFoot)(IHTMLTable *This, IHTMLTableSection **p);HRESULT ( *get_tBodies)(IHTMLTable *This, IHTMLElementCollection **p);HRESULT ( *get_caption)(IHTMLTable *This, IHTMLTableCaption **p);HRESULT ( *createTHead)(IHTMLTable *This, IDispatch **head);HRESULT ( *deleteTHead)(IHTMLTable *This);HRESULT ( *createTFoot)(IHTMLTable *This, IDispatch **foot);HRESULT ( *deleteTFoot)(IHTMLTable *This);HRESULT ( *createCaption)(IHTMLTable *This, IHTMLTableCaption **caption);HRESULT ( *deleteCaption)(IHTMLTable *This);HRESULT ( *insertRow)(IHTMLTable *This, int index, IDispatch **row);HRESULT ( *deleteRow)(IHTMLTable *This, int index);HRESULT ( *get_readyState)(IHTMLTable *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLTable *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLTable *This, VARIANT *p);};
struct ClusNodesVtbl {HRESULT ( *QueryInterface)(ClusNodes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNodes *This);ULONG ( *Release)(ClusNodes *This);HRESULT ( *GetTypeInfoCount)(ClusNodes *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNodes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNodes *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNodes *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusNodes *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusNodes *This, IUnknown **retval);HRESULT ( *Refresh)(ClusNodes *This);HRESULT ( *get_Item)(ClusNodes *This, VARIANT varIndex, ClusNode **ppClusNode);};
struct DimensionVtbl {HRESULT ( *QueryInterface)(Dimension *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Dimension *This);ULONG ( *Release)(Dimension *This);HRESULT ( *GetTypeInfoCount)(Dimension *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Dimension *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Dimension *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Dimension *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(Dimension *This, BSTR *pbstr);HRESULT ( *get_UniqueName)(Dimension *This, BSTR *pbstr);HRESULT ( *get_Description)(Dimension *This, BSTR *pbstr);HRESULT ( *get_Properties)(Dimension *This, Properties **ppvObject);HRESULT ( *get_Hierarchies)(Dimension *This, Hierarchies **ppvObject);};
struct HierarchyVtbl {HRESULT ( *QueryInterface)(Hierarchy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Hierarchy *This);ULONG ( *Release)(Hierarchy *This);HRESULT ( *GetTypeInfoCount)(Hierarchy *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Hierarchy *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Hierarchy *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Hierarchy *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(Hierarchy *This, BSTR *pbstr);HRESULT ( *get_UniqueName)(Hierarchy *This, BSTR *pbstr);HRESULT ( *get_Description)(Hierarchy *This, BSTR *pbstr);HRESULT ( *get_Properties)(Hierarchy *This, Properties **ppvObject);HRESULT ( *get_Levels)(Hierarchy *This, Levels **ppvObject);};
struct IAgentCtlVtbl {HRESULT ( *QueryInterface)(IAgentCtl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtl *This);ULONG ( *Release)(IAgentCtl *This);HRESULT ( *GetTypeInfoCount)(IAgentCtl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Characters)(IAgentCtl *This, IAgentCtlCharacters **Characters);HRESULT ( *get_AudioOutput)(IAgentCtl *This, IAgentCtlAudioObject **AudioOutput);HRESULT ( *get_SpeechInput)(IAgentCtl *This, IAgentCtlSpeechInput **SpeechInput);HRESULT ( *get_PropertySheet)(IAgentCtl *This, IAgentCtlPropertySheet **PropSheet);HRESULT ( *get_CommandsWindow)(IAgentCtl *This, IAgentCtlCommandsWindow **CommandsWindow);HRESULT ( *get_Connected)(IAgentCtl *This, VARIANT_BOOL *Connected);HRESULT ( *put_Connected)(IAgentCtl *This, VARIANT_BOOL Connected);HRESULT ( *get_Suspended)(IAgentCtl *This, VARIANT_BOOL *Suspended);};
struct ICatalogVtbl {HRESULT ( *QueryInterface)(ICatalog *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatalog *This);ULONG ( *Release)(ICatalog *This);HRESULT ( *GetTypeInfoCount)(ICatalog *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICatalog *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICatalog *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICatalog *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ICatalog *This, BSTR *pbstr);HRESULT ( *putref_ActiveConnection)(ICatalog *This, IDispatch *pconn);HRESULT ( *put_ActiveConnection)(ICatalog *This, BSTR bstrConn);HRESULT ( *get_ActiveConnection)(ICatalog *This, IDispatch **ppConn);HRESULT ( *get_CubeDefs)(ICatalog *This, CubeDefs **ppvObject);};
struct IRequestVtbl {HRESULT ( *QueryInterface)(IRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IRequest *This);ULONG ( *Release)(IRequest *This);HRESULT ( *GetTypeInfoCount)(IRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IRequest *This, BSTR bstrVar, IDispatch **ppObjReturn);HRESULT ( *get_QueryString)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Form)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Body)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_ServerVariables)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_ClientCertificate)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_Cookies)(IRequest *This, IRequestDictionary **ppDictReturn);HRESULT ( *get_TotalBytes)(IRequest *This, int *pcbTotal);HRESULT ( *BinaryRead)(IRequest *This, VARIANT *pvarCountToRead, VARIANT *pvarReturn);};
struct ClusObjVtbl {HRESULT ( *QueryInterface)(ClusObj *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusObj *This);ULONG ( *Release)(ClusObj *This);HRESULT ( *GetTypeInfoCount)(ClusObj *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusObj *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusObj *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusObj *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusObj *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusObj *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusObj *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusObj *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusObj *This, ClusProperties **ppProperties);};
struct CubeDefVtbl {HRESULT ( *QueryInterface)(CubeDef *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(CubeDef *This);ULONG ( *Release)(CubeDef *This);HRESULT ( *GetTypeInfoCount)(CubeDef *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(CubeDef *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(CubeDef *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(CubeDef *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(CubeDef *This, BSTR *pbstr);HRESULT ( *get_Description)(CubeDef *This, BSTR *pbstr);HRESULT ( *get_Properties)(CubeDef *This, Properties **ppvObject);HRESULT ( *get_Dimensions)(CubeDef *This, Dimensions **ppvObject);};
struct IServerVtbl {HRESULT ( *QueryInterface)(IServer *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IServer *This);ULONG ( *Release)(IServer *This);HRESULT ( *GetTypeInfoCount)(IServer *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IServer *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IServer *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IServer *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_ScriptTimeout)(IServer *This, int *plTimeoutSeconds);HRESULT ( *put_ScriptTimeout)(IServer *This, int lTimeoutSeconds);HRESULT ( *CreateObject)(IServer *This, BSTR bstrProgID, IDispatch **ppDispObject);HRESULT ( *HTMLEncode)(IServer *This, BSTR bstrIn, BSTR *pbstrEncoded);HRESULT ( *MapPath)(IServer *This, BSTR bstrLogicalPath, BSTR *pbstrPhysicalPath);HRESULT ( *URLEncode)(IServer *This, BSTR bstrIn, BSTR *pbstrEncoded);HRESULT ( *URLPathEncode)(IServer *This, BSTR bstrIn, BSTR *pbstrEncoded);};
struct FolderVtbl {HRESULT ( *QueryInterface)(Folder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Folder *This);ULONG ( *Release)(Folder *This);HRESULT ( *GetTypeInfoCount)(Folder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Folder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Folder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Folder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Title)(Folder *This, BSTR *pbs);HRESULT ( *get_Application)(Folder *This, IDispatch **ppid);HRESULT ( *get_Parent)(Folder *This, IDispatch **ppid);HRESULT ( *get_ParentFolder)(Folder *This, Folder **ppsf);HRESULT ( *Items)(Folder *This, FolderItems **ppid);HRESULT ( *ParseName)(Folder *This, BSTR bName, FolderItem **ppid);HRESULT ( *NewFolder)(Folder *This, BSTR bName, VARIANT vOptions);HRESULT ( *MoveHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *CopyHere)(Folder *This, VARIANT vItem, VARIANT vOptions);HRESULT ( *GetDetailsOf)(Folder *This, VARIANT vItem, int iColumn, BSTR *pbs);};
struct IADsOUVtbl {HRESULT ( *QueryInterface)(IADsOU *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsOU *This);ULONG ( *Release)(IADsOU *This);HRESULT ( *GetTypeInfoCount)(IADsOU *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsOU *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsOU *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsOU *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsOU *This, BSTR *retval);HRESULT ( *get_Class)(IADsOU *This, BSTR *retval);HRESULT ( *get_GUID)(IADsOU *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsOU *This, BSTR *retval);HRESULT ( *get_Parent)(IADsOU *This, BSTR *retval);HRESULT ( *get_Schema)(IADsOU *This, BSTR *retval);HRESULT ( *GetInfo)(IADsOU *This);HRESULT ( *SetInfo)(IADsOU *This);HRESULT ( *Get)(IADsOU *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsOU *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsOU *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsOU *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsOU *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Description)(IADsOU *This, BSTR *retval);HRESULT ( *put_Description)(IADsOU *This, BSTR bstrDescription);HRESULT ( *get_LocalityName)(IADsOU *This, BSTR *retval);HRESULT ( *put_LocalityName)(IADsOU *This, BSTR bstrLocalityName);HRESULT ( *get_PostalAddress)(IADsOU *This, BSTR *retval);HRESULT ( *put_PostalAddress)(IADsOU *This, BSTR bstrPostalAddress);HRESULT ( *get_TelephoneNumber)(IADsOU *This, BSTR *retval);HRESULT ( *put_TelephoneNumber)(IADsOU *This, BSTR bstrTelephoneNumber);HRESULT ( *get_FaxNumber)(IADsOU *This, BSTR *retval);HRESULT ( *put_FaxNumber)(IADsOU *This, BSTR bstrFaxNumber);HRESULT ( *get_SeeAlso)(IADsOU *This, VARIANT *retval);HRESULT ( *put_SeeAlso)(IADsOU *This, VARIANT vSeeAlso);HRESULT ( *get_BusinessCategory)(IADsOU *This, BSTR *retval);HRESULT ( *put_BusinessCategory)(IADsOU *This, BSTR bstrBusinessCategory);};
struct ITTAPIVtbl {HRESULT ( *QueryInterface)(ITTAPI *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTAPI *This);ULONG ( *Release)(ITTAPI *This);HRESULT ( *GetTypeInfoCount)(ITTAPI *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTAPI *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTAPI *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTAPI *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Initialize)(ITTAPI *This);HRESULT ( *Shutdown)(ITTAPI *This);HRESULT ( *get_Addresses)(ITTAPI *This, VARIANT *pVariant);HRESULT ( *_EnumerateAddresses)(ITTAPI *This, IEnumAddress **ppEnumAddresses);HRESULT ( *CreateMediaTerminal)(ITTAPI *This, BSTR pMediaType, ITTerminal *pTerminal, ITMediaTerminal **ppMediaTerminal);};
struct ITTimeVtbl {HRESULT ( *QueryInterface)(ITTime *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTime *This);ULONG ( *Release)(ITTime *This);HRESULT ( *GetTypeInfoCount)(ITTime *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTime *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTime *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_StartTime)(ITTime *This, ULONG *pTime);HRESULT ( *put_StartTime)(ITTime *This, ULONG Time);HRESULT ( *get_StopTime)(ITTime *This, ULONG *pTime);HRESULT ( *put_StopTime)(ITTime *This, ULONG Time);};
struct ErrorVtbl {HRESULT ( *QueryInterface)(ADOError *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOError *This);ULONG ( *Release)(ADOError *This);HRESULT ( *GetTypeInfoCount)(ADOError *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOError *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOError *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Number)(ADOError *This, int *pl);HRESULT ( *get_Source)(ADOError *This, BSTR *pbstr);HRESULT ( *get_Description)(ADOError *This, BSTR *pbstr);HRESULT ( *get_HelpFile)(ADOError *This, BSTR *pbstr);HRESULT ( *get_HelpContext)(ADOError *This, int *pl);HRESULT ( *get_SQLState)(ADOError *This, BSTR *pbstr);HRESULT ( *get_NativeError)(ADOError *This, int *pl);};
struct IADsOVtbl {HRESULT ( *QueryInterface)(IADsO *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsO *This);ULONG ( *Release)(IADsO *This);HRESULT ( *GetTypeInfoCount)(IADsO *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsO *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsO *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsO *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsO *This, BSTR *retval);HRESULT ( *get_Class)(IADsO *This, BSTR *retval);HRESULT ( *get_GUID)(IADsO *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsO *This, BSTR *retval);HRESULT ( *get_Parent)(IADsO *This, BSTR *retval);HRESULT ( *get_Schema)(IADsO *This, BSTR *retval);HRESULT ( *GetInfo)(IADsO *This);HRESULT ( *SetInfo)(IADsO *This);HRESULT ( *Get)(IADsO *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsO *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsO *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsO *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsO *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Description)(IADsO *This, BSTR *retval);HRESULT ( *put_Description)(IADsO *This, BSTR bstrDescription);HRESULT ( *get_LocalityName)(IADsO *This, BSTR *retval);HRESULT ( *put_LocalityName)(IADsO *This, BSTR bstrLocalityName);HRESULT ( *get_PostalAddress)(IADsO *This, BSTR *retval);HRESULT ( *put_PostalAddress)(IADsO *This, BSTR bstrPostalAddress);HRESULT ( *get_TelephoneNumber)(IADsO *This, BSTR *retval);HRESULT ( *put_TelephoneNumber)(IADsO *This, BSTR bstrTelephoneNumber);HRESULT ( *get_FaxNumber)(IADsO *This, BSTR *retval);HRESULT ( *put_FaxNumber)(IADsO *This, BSTR bstrFaxNumber);HRESULT ( *get_SeeAlso)(IADsO *This, VARIANT *retval);HRESULT ( *put_SeeAlso)(IADsO *This, VARIANT vSeeAlso);};
struct LevelVtbl {HRESULT ( *QueryInterface)(Level *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Level *This);ULONG ( *Release)(Level *This);HRESULT ( *GetTypeInfoCount)(Level *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Level *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Level *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Level *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(Level *This, BSTR *pbstr);HRESULT ( *get_UniqueName)(Level *This, BSTR *pbstr);HRESULT ( *get_Caption)(Level *This, BSTR *pbstr);HRESULT ( *get_Description)(Level *This, BSTR *pbstr);HRESULT ( *get_Depth)(Level *This, short *pw);HRESULT ( *get_Properties)(Level *This, Properties **ppvObject);HRESULT ( *get_Members)(Level *This, Members **ppvObject);};
struct AxisVtbl {HRESULT ( *QueryInterface)(Axis *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Axis *This);ULONG ( *Release)(Axis *This);HRESULT ( *GetTypeInfoCount)(Axis *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Axis *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Axis *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Axis *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(Axis *This, BSTR *pbstr);HRESULT ( *get_DimensionCount)(Axis *This, int *pl);HRESULT ( *get_Positions)(Axis *This, Positions **ppvObject);HRESULT ( *get_Properties)(Axis *This, Properties **ppvObject);};
struct CellVtbl {HRESULT ( *QueryInterface)(Cell *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Cell *This);ULONG ( *Release)(Cell *This);HRESULT ( *GetTypeInfoCount)(Cell *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Cell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Cell *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Cell *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(Cell *This, VARIANT *pvar);HRESULT ( *put_Value)(Cell *This, VARIANT var);HRESULT ( *get_Positions)(Cell *This, Positions **ppvObject);HRESULT ( *get_Properties)(Cell *This, Properties **ppvObject);HRESULT ( *get_FormattedValue)(Cell *This, BSTR *pbstr);HRESULT ( *put_FormattedValue)(Cell *This, BSTR bstr);HRESULT ( *get_Ordinal)(Cell *This, int *pl);};
struct IADsVtbl {HRESULT ( *QueryInterface)(IADs *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADs *This);ULONG ( *Release)(IADs *This);HRESULT ( *GetTypeInfoCount)(IADs *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADs *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADs *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADs *This, BSTR *retval);HRESULT ( *get_Class)(IADs *This, BSTR *retval);HRESULT ( *get_GUID)(IADs *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADs *This, BSTR *retval);HRESULT ( *get_Parent)(IADs *This, BSTR *retval);HRESULT ( *get_Schema)(IADs *This, BSTR *retval);HRESULT ( *GetInfo)(IADs *This);HRESULT ( *SetInfo)(IADs *This);HRESULT ( *Get)(IADs *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADs *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADs *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADs *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADs *This, VARIANT vProperties, int lnReserved);};
struct IADsComputerOperationsVtbl {HRESULT ( *QueryInterface)(IADsComputerOperations *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsComputerOperations *This);ULONG ( *Release)(IADsComputerOperations *This);HRESULT ( *GetTypeInfoCount)(IADsComputerOperations *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsComputerOperations *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsComputerOperations *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsComputerOperations *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *get_Class)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *get_GUID)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *get_Parent)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *get_Schema)(IADsComputerOperations *This, BSTR *retval);HRESULT ( *GetInfo)(IADsComputerOperations *This);HRESULT ( *SetInfo)(IADsComputerOperations *This);HRESULT ( *Get)(IADsComputerOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsComputerOperations *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsComputerOperations *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsComputerOperations *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsComputerOperations *This, VARIANT vProperties, int lnReserved);HRESULT ( *Status)(IADsComputerOperations *This, IDispatch **ppObject);HRESULT ( *Shutdown)(IADsComputerOperations *This, VARIANT_BOOL bReboot);};
struct IADsSecurityDescriptorVtbl {HRESULT ( *QueryInterface)(IADsSecurityDescriptor *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsSecurityDescriptor *This);ULONG ( *Release)(IADsSecurityDescriptor *This);HRESULT ( *GetTypeInfoCount)(IADsSecurityDescriptor *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsSecurityDescriptor *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsSecurityDescriptor *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsSecurityDescriptor *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Revision)(IADsSecurityDescriptor *This, int *retval);HRESULT ( *put_Revision)(IADsSecurityDescriptor *This, int lnRevision);HRESULT ( *get_Control)(IADsSecurityDescriptor *This, int *retval);HRESULT ( *put_Control)(IADsSecurityDescriptor *This, int lnControl);HRESULT ( *get_Owner)(IADsSecurityDescriptor *This, BSTR *retval);HRESULT ( *put_Owner)(IADsSecurityDescriptor *This, BSTR bstrOwner);HRESULT ( *get_OwnerDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL *retval);HRESULT ( *put_OwnerDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL fOwnerDefaulted);HRESULT ( *get_Group)(IADsSecurityDescriptor *This, BSTR *retval);HRESULT ( *put_Group)(IADsSecurityDescriptor *This, BSTR bstrGroup);HRESULT ( *get_GroupDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL *retval);HRESULT ( *put_GroupDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL fGroupDefaulted);HRESULT ( *get_DiscretionaryAcl)(IADsSecurityDescriptor *This, IDispatch **retval);HRESULT ( *put_DiscretionaryAcl)(IADsSecurityDescriptor *This, IDispatch *pDiscretionaryAcl);HRESULT ( *get_DaclDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL *retval);HRESULT ( *put_DaclDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL fDaclDefaulted);HRESULT ( *get_SystemAcl)(IADsSecurityDescriptor *This, IDispatch **retval);HRESULT ( *put_SystemAcl)(IADsSecurityDescriptor *This, IDispatch *pSystemAcl);HRESULT ( *get_SaclDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL *retval);HRESULT ( *put_SaclDefaulted)(IADsSecurityDescriptor *This, VARIANT_BOOL fSaclDefaulted);HRESULT ( *CopySecurityDescriptor)(IADsSecurityDescriptor *This, IDispatch **ppSecurityDescriptor);};
struct IAgentCtlPropertySheetVtbl {HRESULT ( *QueryInterface)(IAgentCtlPropertySheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlPropertySheet *This);ULONG ( *Release)(IAgentCtlPropertySheet *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlPropertySheet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlPropertySheet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlPropertySheet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlPropertySheet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Left)(IAgentCtlPropertySheet *This, short *Left);HRESULT ( *get_Top)(IAgentCtlPropertySheet *This, short *Top);HRESULT ( *get_Height)(IAgentCtlPropertySheet *This, short *Height);HRESULT ( *get_Width)(IAgentCtlPropertySheet *This, short *Width);HRESULT ( *put_Visible)(IAgentCtlPropertySheet *This, VARIANT_BOOL Visible);HRESULT ( *get_Visible)(IAgentCtlPropertySheet *This, VARIANT_BOOL *Visible);HRESULT ( *put_Page)(IAgentCtlPropertySheet *This, BSTR Page);HRESULT ( *get_Page)(IAgentCtlPropertySheet *This, BSTR *Page);};
struct ICertEncodeCRLDistInfoVtbl {HRESULT ( *QueryInterface)(ICertEncodeCRLDistInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeCRLDistInfo *This);ULONG ( *Release)(ICertEncodeCRLDistInfo *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeCRLDistInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeCRLDistInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeCRLDistInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeCRLDistInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeCRLDistInfo *This,  BSTR strBinary);HRESULT ( *GetDistPointCount)(ICertEncodeCRLDistInfo *This, LONG *pDistPointCount);HRESULT ( *GetNameCount)(ICertEncodeCRLDistInfo *This, LONG DistPointIndex, LONG *pNameCount);HRESULT ( *GetNameChoice)(ICertEncodeCRLDistInfo *This, LONG DistPointIndex, LONG NameIndex, LONG *pNameChoice);HRESULT ( *GetName)(ICertEncodeCRLDistInfo *This, LONG DistPointIndex, LONG NameIndex, BSTR *pstrName);HRESULT ( *Reset)(ICertEncodeCRLDistInfo *This, LONG DistPointCount);HRESULT ( *SetNameCount)(ICertEncodeCRLDistInfo *This, LONG DistPointIndex, LONG NameCount);HRESULT ( *SetNameEntry)(ICertEncodeCRLDistInfo *This, LONG DistPointIndex, LONG NameIndex, LONG NameChoice,  BSTR strName);HRESULT ( *Encode)(ICertEncodeCRLDistInfo *This, BSTR *pstrBinary);};
struct ICertEncodeStringArrayVtbl {HRESULT ( *QueryInterface)(ICertEncodeStringArray *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeStringArray *This);ULONG ( *Release)(ICertEncodeStringArray *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeStringArray *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeStringArray *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeStringArray *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeStringArray *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeStringArray *This,  BSTR strBinary);HRESULT ( *GetStringType)(ICertEncodeStringArray *This, LONG *pStringType);HRESULT ( *GetCount)(ICertEncodeStringArray *This, LONG *pCount);HRESULT ( *GetValue)(ICertEncodeStringArray *This, LONG Index, BSTR *pstr);HRESULT ( *Reset)(ICertEncodeStringArray *This, LONG Count, LONG StringType);HRESULT ( *SetValue)(ICertEncodeStringArray *This, LONG Index,  BSTR str);HRESULT ( *Encode)(ICertEncodeStringArray *This, BSTR *pstrBinary);};
struct IAgentCtlSpeechInputVtbl {HRESULT ( *QueryInterface)(IAgentCtlSpeechInput *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlSpeechInput *This);ULONG ( *Release)(IAgentCtlSpeechInput *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlSpeechInput *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlSpeechInput *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlSpeechInput *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlSpeechInput *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Enabled)(IAgentCtlSpeechInput *This, VARIANT_BOOL *VoiceEnabled);HRESULT ( *get_Language)(IAgentCtlSpeechInput *This, BSTR *Language);HRESULT ( *get_HotKey)(IAgentCtlSpeechInput *This, BSTR *HotKey);HRESULT ( *get_Installed)(IAgentCtlSpeechInput *This, VARIANT_BOOL *VoiceInstalled);HRESULT ( *get_Engine)(IAgentCtlSpeechInput *This, BSTR *Engine);HRESULT ( *put_Engine)(IAgentCtlSpeechInput *This, BSTR Engine);HRESULT ( *get_ListeningTip)(IAgentCtlSpeechInput *This, VARIANT_BOOL *ListeningTip);};
struct ICertEncodeBitStringVtbl {HRESULT ( *QueryInterface)(ICertEncodeBitString *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeBitString *This);ULONG ( *Release)(ICertEncodeBitString *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeBitString *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeBitString *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeBitString *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeBitString *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeBitString *This,  BSTR strBinary);HRESULT ( *GetBitCount)(ICertEncodeBitString *This, LONG *pBitCount);HRESULT ( *GetBitString)(ICertEncodeBitString *This, BSTR *pstrBitString);HRESULT ( *Encode)(ICertEncodeBitString *This, LONG BitCount, BSTR strBitString, BSTR *pstrBinary);};
struct ICertEncodeLongArrayVtbl {HRESULT ( *QueryInterface)(ICertEncodeLongArray *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeLongArray *This);ULONG ( *Release)(ICertEncodeLongArray *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeLongArray *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeLongArray *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeLongArray *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeLongArray *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeLongArray *This,  BSTR strBinary);HRESULT ( *GetCount)(ICertEncodeLongArray *This, LONG *pCount);HRESULT ( *GetValue)(ICertEncodeLongArray *This, LONG Index, LONG *pValue);HRESULT ( *Reset)(ICertEncodeLongArray *This, LONG Count);HRESULT ( *SetValue)(ICertEncodeLongArray *This, LONG Index, LONG Value);HRESULT ( *Encode)(ICertEncodeLongArray *This, BSTR *pstrBinary);};
struct IHTMLSelectionObjectVtbl {HRESULT ( *QueryInterface)(IHTMLSelectionObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectionObject *This);ULONG ( *Release)(IHTMLSelectionObject *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectionObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectionObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectionObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectionObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *createRange)(IHTMLSelectionObject *This, IDispatch **range);HRESULT ( *empty)(IHTMLSelectionObject *This);HRESULT ( *clear)(IHTMLSelectionObject *This);HRESULT ( *get_type)(IHTMLSelectionObject *This, BSTR *p);};
struct ISharedPropertyGroupVtbl {HRESULT ( *QueryInterface)(ISharedPropertyGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISharedPropertyGroup *This);ULONG ( *Release)(ISharedPropertyGroup *This);HRESULT ( *GetTypeInfoCount)(ISharedPropertyGroup *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISharedPropertyGroup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISharedPropertyGroup *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISharedPropertyGroup *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreatePropertyByPosition)(ISharedPropertyGroup *This, int Index, VARIANT_BOOL *fExists, ISharedProperty **ppProp);HRESULT ( *get_PropertyByPosition)(ISharedPropertyGroup *This, int Index, ISharedProperty **ppProperty);HRESULT ( *CreateProperty)(ISharedPropertyGroup *This, BSTR Name, VARIANT_BOOL *fExists, ISharedProperty **ppProp);HRESULT ( *get_Property)(ISharedPropertyGroup *This, BSTR Name, ISharedProperty **ppProperty);};
struct IHTMLMarqueeElementVtbl {HRESULT ( *QueryInterface)(IHTMLMarqueeElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLMarqueeElement *This);ULONG ( *Release)(IHTMLMarqueeElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLMarqueeElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLMarqueeElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLMarqueeElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLMarqueeElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_bgColor)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_scrollDelay)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_scrollDelay)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_direction)(IHTMLMarqueeElement *This, BSTR v);HRESULT ( *get_direction)(IHTMLMarqueeElement *This, BSTR *p);HRESULT ( *put_behavior)(IHTMLMarqueeElement *This, BSTR v);HRESULT ( *get_behavior)(IHTMLMarqueeElement *This, BSTR *p);HRESULT ( *put_scrollAmount)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_scrollAmount)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_loop)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_loop)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_vspace)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_vspace)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_hspace)(IHTMLMarqueeElement *This, int v);HRESULT ( *get_hspace)(IHTMLMarqueeElement *This, int *p);HRESULT ( *put_onfinish)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onfinish)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_onstart)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onstart)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_onbounce)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_onbounce)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_width)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLMarqueeElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLMarqueeElement *This, VARIANT *p);HRESULT ( *put_trueSpeed)(IHTMLMarqueeElement *This, VARIANT_BOOL v);HRESULT ( *get_trueSpeed)(IHTMLMarqueeElement *This, VARIANT_BOOL *p);HRESULT ( *start)(IHTMLMarqueeElement *This);HRESULT ( *stop)(IHTMLMarqueeElement *This);};
struct IHTMLStyleSheetRuleVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheetRule *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheetRule *This);ULONG ( *Release)(IHTMLStyleSheetRule *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheetRule *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheetRule *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheetRule *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheetRule *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_selectorText)(IHTMLStyleSheetRule *This, BSTR v);HRESULT ( *get_selectorText)(IHTMLStyleSheetRule *This, BSTR *p);HRESULT ( *get_style)(IHTMLStyleSheetRule *This, IHTMLRuleStyle **p);HRESULT ( *get_readOnly)(IHTMLStyleSheetRule *This, VARIANT_BOOL *p);};
struct ICertEncodeAltNameVtbl {HRESULT ( *QueryInterface)(ICertEncodeAltName *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeAltName *This);ULONG ( *Release)(ICertEncodeAltName *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeAltName *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeAltName *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeAltName *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeAltName *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeAltName *This,  BSTR strBinary);HRESULT ( *GetNameCount)(ICertEncodeAltName *This, LONG *pNameCount);HRESULT ( *GetNameChoice)(ICertEncodeAltName *This, LONG NameIndex, LONG *pNameChoice);HRESULT ( *GetName)(ICertEncodeAltName *This, LONG NameIndex, BSTR *pstrName);HRESULT ( *Reset)(ICertEncodeAltName *This, LONG NameCount);HRESULT ( *SetNameEntry)(ICertEncodeAltName *This, LONG NameIndex, LONG NameChoice,  BSTR strName);HRESULT ( *Encode)(ICertEncodeAltName *This, BSTR *pstrBinary);};
struct IDataSourceLocatorVtbl {HRESULT ( *QueryInterface)(IDataSourceLocator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDataSourceLocator *This);ULONG ( *Release)(IDataSourceLocator *This);HRESULT ( *GetTypeInfoCount)(IDataSourceLocator *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDataSourceLocator *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDataSourceLocator *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDataSourceLocator *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_hWnd)(IDataSourceLocator *This, LONG *phwndParent);HRESULT ( *put_hWnd)(IDataSourceLocator *This, LONG hwndParent);HRESULT ( *PromptNew)(IDataSourceLocator *This, IDispatch **ppADOConnection);HRESULT ( *PromptEdit)(IDataSourceLocator *This, IDispatch **ppADOConnection, VARIANT_BOOL *pbSuccess);};
struct IHTMLObjectElementVtbl {HRESULT ( *QueryInterface)(IHTMLObjectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLObjectElement *This);ULONG ( *Release)(IHTMLObjectElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLObjectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLObjectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLObjectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLObjectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_object)(IHTMLObjectElement *This, IDispatch **p);HRESULT ( *get_classid)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_data)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *putref_recordset)(IHTMLObjectElement *This, IDispatch *v);HRESULT ( *get_recordset)(IHTMLObjectElement *This, IDispatch **p);HRESULT ( *put_align)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_align)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_name)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_codeBase)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_codeBase)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_codeType)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_codeType)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_code)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_code)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_BaseHref)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_type)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_type)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *get_form)(IHTMLObjectElement *This, IHTMLFormElement **p);HRESULT ( *put_width)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_height)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_height)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *get_readyState)(IHTMLObjectElement *This, int *p);HRESULT ( *put_onreadystatechange)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLObjectElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLObjectElement *This, VARIANT *p);HRESULT ( *put_altHtml)(IHTMLObjectElement *This, BSTR v);HRESULT ( *get_altHtml)(IHTMLObjectElement *This, BSTR *p);HRESULT ( *put_vspace)(IHTMLObjectElement *This, int v);HRESULT ( *get_vspace)(IHTMLObjectElement *This, int *p);HRESULT ( *put_hspace)(IHTMLObjectElement *This, int v);HRESULT ( *get_hspace)(IHTMLObjectElement *This, int *p);};
struct IHTMLOptionsHolderVtbl {HRESULT ( *QueryInterface)(IHTMLOptionsHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionsHolder *This);ULONG ( *Release)(IHTMLOptionsHolder *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionsHolder *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionsHolder *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionsHolder *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionsHolder *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_document)(IHTMLOptionsHolder *This, IHTMLDocument2 **p);HRESULT ( *get_fonts)(IHTMLOptionsHolder *This, IHTMLFontNamesCollection **p);HRESULT ( *put_execArg)(IHTMLOptionsHolder *This, VARIANT v);HRESULT ( *get_execArg)(IHTMLOptionsHolder *This, VARIANT *p);HRESULT ( *put_errorLine)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorLine)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorCharacter)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorCharacter)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorCode)(IHTMLOptionsHolder *This, int v);HRESULT ( *get_errorCode)(IHTMLOptionsHolder *This, int *p);HRESULT ( *put_errorMessage)(IHTMLOptionsHolder *This, BSTR v);HRESULT ( *get_errorMessage)(IHTMLOptionsHolder *This, BSTR *p);HRESULT ( *put_errorDebug)(IHTMLOptionsHolder *This, VARIANT_BOOL v);HRESULT ( *get_errorDebug)(IHTMLOptionsHolder *This, VARIANT_BOOL *p);HRESULT ( *get_unsecuredWindowOfDocument)(IHTMLOptionsHolder *This, IHTMLWindow2 **p);HRESULT ( *put_findText)(IHTMLOptionsHolder *This, BSTR v);HRESULT ( *get_findText)(IHTMLOptionsHolder *This, BSTR *p);HRESULT ( *put_anythingAfterFrameset)(IHTMLOptionsHolder *This, VARIANT_BOOL v);HRESULT ( *get_anythingAfterFrameset)(IHTMLOptionsHolder *This, VARIANT_BOOL *p);HRESULT ( *sizes)(IHTMLOptionsHolder *This, BSTR fontName, IHTMLFontSizesCollection **pSizesCollection);HRESULT ( *openfiledlg)(IHTMLOptionsHolder *This, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR *pathName);HRESULT ( *savefiledlg)(IHTMLOptionsHolder *This, VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR *pathName);HRESULT ( *choosecolordlg)(IHTMLOptionsHolder *This, VARIANT initColor, int *rgbColor);HRESULT ( *showSecurityInfo)(IHTMLOptionsHolder *This);HRESULT ( *isApartmentModel)(IHTMLOptionsHolder *This, IHTMLObjectElement *object, VARIANT_BOOL *fApartment);HRESULT ( *getCharset)(IHTMLOptionsHolder *This, BSTR fontName, int *charset);};
struct IADsPropertyValueVtbl {HRESULT ( *QueryInterface)(IADsPropertyValue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPropertyValue *This);ULONG ( *Release)(IADsPropertyValue *This);HRESULT ( *GetTypeInfoCount)(IADsPropertyValue *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPropertyValue *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPropertyValue *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPropertyValue *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Clear)(IADsPropertyValue *This);HRESULT ( *get_ADsType)(IADsPropertyValue *This, int *retval);HRESULT ( *put_ADsType)(IADsPropertyValue *This, int lnADsType);HRESULT ( *get_DNString)(IADsPropertyValue *This, BSTR *retval);HRESULT ( *put_DNString)(IADsPropertyValue *This, BSTR bstrDNString);HRESULT ( *get_CaseExactString)(IADsPropertyValue *This, BSTR *retval);HRESULT ( *put_CaseExactString)(IADsPropertyValue *This, BSTR bstrCaseExactString);HRESULT ( *get_CaseIgnoreString)(IADsPropertyValue *This, BSTR *retval);HRESULT ( *put_CaseIgnoreString)(IADsPropertyValue *This, BSTR bstrCaseIgnoreString);HRESULT ( *get_PrintableString)(IADsPropertyValue *This, BSTR *retval);HRESULT ( *put_PrintableString)(IADsPropertyValue *This, BSTR bstrPrintableString);HRESULT ( *get_NumericString)(IADsPropertyValue *This, BSTR *retval);HRESULT ( *put_NumericString)(IADsPropertyValue *This, BSTR bstrNumericString);HRESULT ( *get_Boolean)(IADsPropertyValue *This, int *retval);HRESULT ( *put_Boolean)(IADsPropertyValue *This, int lnBoolean);HRESULT ( *get_Integer)(IADsPropertyValue *This, int *retval);HRESULT ( *put_Integer)(IADsPropertyValue *This, int lnInteger);HRESULT ( *get_OctetString)(IADsPropertyValue *This, VARIANT *retval);HRESULT ( *put_OctetString)(IADsPropertyValue *This, VARIANT vOctetString);HRESULT ( *get_SecurityDescriptor)(IADsPropertyValue *This, IDispatch **retval);HRESULT ( *put_SecurityDescriptor)(IADsPropertyValue *This, IDispatch *pSecurityDescriptor);HRESULT ( *get_LargeInteger)(IADsPropertyValue *This, IDispatch **retval);HRESULT ( *put_LargeInteger)(IADsPropertyValue *This, IDispatch *pLargeInteger);HRESULT ( *get_UTCTime)(IADsPropertyValue *This, DATE *retval);HRESULT ( *put_UTCTime)(IADsPropertyValue *This, DATE daUTCTime);};
struct ICertServerPolicyVtbl {HRESULT ( *QueryInterface)(ICertServerPolicy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertServerPolicy *This);ULONG ( *Release)(ICertServerPolicy *This);HRESULT ( *GetTypeInfoCount)(ICertServerPolicy *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertServerPolicy *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertServerPolicy *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertServerPolicy *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetContext)(ICertServerPolicy *This, LONG Context);HRESULT ( *GetRequestProperty)(ICertServerPolicy *This,  BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue);HRESULT ( *GetRequestAttribute)(ICertServerPolicy *This,  BSTR strAttributeName, BSTR *pstrAttributeValue);HRESULT ( *GetCertificateProperty)(ICertServerPolicy *This,  BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue);HRESULT ( *SetCertificateProperty)(ICertServerPolicy *This,  BSTR strPropertyName, LONG PropertyType,  VARIANT *pvarPropertyValue);HRESULT ( *GetCertificateExtension)(ICertServerPolicy *This,  BSTR strExtensionName, LONG Type, VARIANT *pvarValue);HRESULT ( *GetCertificateExtensionFlags)(ICertServerPolicy *This, LONG *pExtFlags);HRESULT ( *SetCertificateExtension)(ICertServerPolicy *This,  BSTR strExtensionName, LONG Type, LONG ExtFlags,  VARIANT *pvarValue);HRESULT ( *EnumerateExtensionsSetup)(ICertServerPolicy *This, LONG Flags);HRESULT ( *EnumerateExtensions)(ICertServerPolicy *This, BSTR *pstrExtensionName);HRESULT ( *EnumerateExtensionsClose)(ICertServerPolicy *This);HRESULT ( *EnumerateAttributesSetup)(ICertServerPolicy *This, LONG Flags);HRESULT ( *EnumerateAttributes)(ICertServerPolicy *This, BSTR *pstrAttributeName);HRESULT ( *EnumerateAttributesClose)(ICertServerPolicy *This);};
struct IDirectShowStreamVtbl {HRESULT ( *QueryInterface)(IDirectShowStream *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDirectShowStream *This);ULONG ( *Release)(IDirectShowStream *This);HRESULT ( *GetTypeInfoCount)(IDirectShowStream *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDirectShowStream *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDirectShowStream *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDirectShowStream *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_FileName)(IDirectShowStream *This, BSTR *pVal);HRESULT ( *put_FileName)(IDirectShowStream *This, BSTR newVal);HRESULT ( *get_Video)(IDirectShowStream *This, OUTPUT_STATE *pVal);HRESULT ( *put_Video)(IDirectShowStream *This, OUTPUT_STATE newVal);HRESULT ( *get_Audio)(IDirectShowStream *This, OUTPUT_STATE *pVal);HRESULT ( *put_Audio)(IDirectShowStream *This, OUTPUT_STATE newVal);};
struct IHTMLControlRangeVtbl {HRESULT ( *QueryInterface)(IHTMLControlRange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLControlRange *This);ULONG ( *Release)(IHTMLControlRange *This);HRESULT ( *GetTypeInfoCount)(IHTMLControlRange *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLControlRange *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLControlRange *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLControlRange *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *select)(IHTMLControlRange *This);HRESULT ( *add)(IHTMLControlRange *This, IHTMLControlElement *item);HRESULT ( *remove)(IHTMLControlRange *This, int index);HRESULT ( *item)(IHTMLControlRange *This, int index, IHTMLElement **pdisp);HRESULT ( *scrollIntoView)(IHTMLControlRange *This, VARIANT varargStart);HRESULT ( *queryCommandSupported)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLControlRange *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLControlRange *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLControlRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *commonParentElement)(IHTMLControlRange *This, IHTMLElement **Parent);HRESULT ( *get_length)(IHTMLControlRange *This, int *p);};
struct IADsPropertyListVtbl {HRESULT ( *QueryInterface)(IADsPropertyList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPropertyList *This);ULONG ( *Release)(IADsPropertyList *This);HRESULT ( *GetTypeInfoCount)(IADsPropertyList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPropertyList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPropertyList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPropertyList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_PropertyCount)(IADsPropertyList *This, int *plCount);HRESULT ( *Next)(IADsPropertyList *This, VARIANT *pVariant);HRESULT ( *Skip)(IADsPropertyList *This, ULONG cElements);HRESULT ( *Reset)(IADsPropertyList *This);HRESULT ( *Item)(IADsPropertyList *This, VARIANT varIndex, VARIANT *pVariant);HRESULT ( *GetPropertyItem)(IADsPropertyList *This, BSTR bstrName, LONG lnADsType, VARIANT *pVariant);HRESULT ( *PutPropertyItem)(IADsPropertyList *This, VARIANT varData);HRESULT ( *ResetPropertyItem)(IADsPropertyList *This, VARIANT varEntry);HRESULT ( *PurgePropertyList)(IADsPropertyList *This);};
struct IAgentCtlBalloonVtbl {HRESULT ( *QueryInterface)(IAgentCtlBalloon *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlBalloon *This);ULONG ( *Release)(IAgentCtlBalloon *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlBalloon *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlBalloon *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlBalloon *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlBalloon *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Enabled)(IAgentCtlBalloon *This, VARIANT_BOOL *Enabled);HRESULT ( *get_NumberOfLines)(IAgentCtlBalloon *This, int *Lines);HRESULT ( *get_CharsPerLine)(IAgentCtlBalloon *This, int *CharsPerLine);HRESULT ( *get_FontName)(IAgentCtlBalloon *This, BSTR *FontName);HRESULT ( *get_FontSize)(IAgentCtlBalloon *This, int *FontSize);HRESULT ( *get_FontBold)(IAgentCtlBalloon *This, VARIANT_BOOL *FontBold);HRESULT ( *get_FontItalic)(IAgentCtlBalloon *This, VARIANT_BOOL *FontItalic);HRESULT ( *get_FontStrikethru)(IAgentCtlBalloon *This, VARIANT_BOOL *FontStrikethru);HRESULT ( *get_FontUnderline)(IAgentCtlBalloon *This, VARIANT_BOOL *FontUnderline);HRESULT ( *get_ForeColor)(IAgentCtlBalloon *This, int *ForeColor);HRESULT ( *get_BackColor)(IAgentCtlBalloon *This, int *BackColor);HRESULT ( *get_BorderColor)(IAgentCtlBalloon *This, int *BorderColor);HRESULT ( *put_Visible)(IAgentCtlBalloon *This, VARIANT_BOOL Visible);HRESULT ( *get_Visible)(IAgentCtlBalloon *This, VARIANT_BOOL *Visible);HRESULT ( *put_FontName)(IAgentCtlBalloon *This, BSTR FontName);HRESULT ( *put_FontSize)(IAgentCtlBalloon *This, int FontSize);HRESULT ( *put_FontCharSet)(IAgentCtlBalloon *This, short FontCharSet);HRESULT ( *get_FontCharSet)(IAgentCtlBalloon *This, short *FontCharSet);};
struct IAgentCtlCommandVtbl {HRESULT ( *QueryInterface)(IAgentCtlCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlCommand *This);ULONG ( *Release)(IAgentCtlCommand *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlCommand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlCommand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlCommand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlCommand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Voice)(IAgentCtlCommand *This, BSTR *Voice);HRESULT ( *put_Voice)(IAgentCtlCommand *This, BSTR Voice);HRESULT ( *get_Caption)(IAgentCtlCommand *This, BSTR *Caption);HRESULT ( *put_Caption)(IAgentCtlCommand *This, BSTR Caption);HRESULT ( *get_Enabled)(IAgentCtlCommand *This, VARIANT_BOOL *Enabled);HRESULT ( *put_Enabled)(IAgentCtlCommand *This, VARIANT_BOOL Enabled);HRESULT ( *get_Visible)(IAgentCtlCommand *This, VARIANT_BOOL *Visible);HRESULT ( *put_Visible)(IAgentCtlCommand *This, VARIANT_BOOL Visible);HRESULT ( *get_Confidence)(IAgentCtlCommand *This, int *Confidence);HRESULT ( *put_Confidence)(IAgentCtlCommand *This, int Confidence);HRESULT ( *get_ConfidenceText)(IAgentCtlCommand *This, BSTR *Text);HRESULT ( *put_ConfidenceText)(IAgentCtlCommand *This, BSTR Text);};
struct IHTMLAreaElementVtbl {HRESULT ( *QueryInterface)(IHTMLAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLAreaElement *This);ULONG ( *Release)(IHTMLAreaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_shape)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_shape)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_coords)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_coords)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_href)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_href)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_target)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_target)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_alt)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_alt)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_noHref)(IHTMLAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_noHref)(IHTMLAreaElement *This, VARIANT_BOOL *p);HRESULT ( *put_host)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_host)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_hostname)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_pathname)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_port)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_port)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_protocol)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_search)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_search)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_hash)(IHTMLAreaElement *This, BSTR v);HRESULT ( *get_hash)(IHTMLAreaElement *This, BSTR *p);HRESULT ( *put_onblur)(IHTMLAreaElement *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLAreaElement *This, VARIANT *p);HRESULT ( *put_onfocus)(IHTMLAreaElement *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLAreaElement *This, VARIANT *p);HRESULT ( *put_tabIndex)(IHTMLAreaElement *This, short v);HRESULT ( *get_tabIndex)(IHTMLAreaElement *This, short *p);HRESULT ( *focus)(IHTMLAreaElement *This);HRESULT ( *blur)(IHTMLAreaElement *This);};
struct IHTMLBodyElementVtbl {HRESULT ( *QueryInterface)(IHTMLBodyElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLBodyElement *This);ULONG ( *Release)(IHTMLBodyElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLBodyElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLBodyElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLBodyElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLBodyElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_background)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_background)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_bgProperties)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_bgProperties)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_leftMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_leftMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_topMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_topMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_rightMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_rightMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_bottomMargin)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_bottomMargin)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_noWrap)(IHTMLBodyElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLBodyElement *This, VARIANT_BOOL *p);HRESULT ( *put_bgColor)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_text)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_text)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_link)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_link)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_vLink)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_vLink)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_aLink)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_aLink)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_scroll)(IHTMLBodyElement *This, BSTR v);HRESULT ( *get_scroll)(IHTMLBodyElement *This, BSTR *p);HRESULT ( *put_onselect)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLBodyElement *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLBodyElement *This, VARIANT *p);HRESULT ( *createTextRange)(IHTMLBodyElement *This, IHTMLTxtRange **range);};
struct IOleInPlaceFrameVtbl {HRESULT ( *QueryInterface)(IOleInPlaceFrame *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleInPlaceFrame *This);ULONG ( *Release)(IOleInPlaceFrame *This);HRESULT ( *GetWindow)(IOleInPlaceFrame *This, HWND *phwnd);HRESULT ( *ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);HRESULT ( *GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);HRESULT ( *RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT ( *SetActiveObject)(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);HRESULT ( *InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);HRESULT ( *RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);HRESULT ( *SetStatusText)(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);HRESULT ( *EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorA)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);};
struct ITCallMediaEventVtbl {HRESULT ( *QueryInterface)(ITCallMediaEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallMediaEvent *This);ULONG ( *Release)(ITCallMediaEvent *This);HRESULT ( *GetTypeInfoCount)(ITCallMediaEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCallMediaEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCallMediaEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCallMediaEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Call)(ITCallMediaEvent *This, ITCallInfo **ppCallInfo);HRESULT ( *get_Event)(ITCallMediaEvent *This, CALL_MEDIA_EVENT *pCallMediaEvent);HRESULT ( *get_Cause)(ITCallMediaEvent *This, CALL_MEDIA_CAUSE *pCallMediaCause);};
struct ITCallStateEventVtbl {HRESULT ( *QueryInterface)(ITCallStateEvent *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallStateEvent *This);ULONG ( *Release)(ITCallStateEvent *This);HRESULT ( *GetTypeInfoCount)(ITCallStateEvent *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCallStateEvent *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCallStateEvent *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCallStateEvent *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Call)(ITCallStateEvent *This, ITCallInfo **ppCallInfo);HRESULT ( *get_State)(ITCallStateEvent *This, CALL_STATE *pCallState);HRESULT ( *get_Cause)(ITCallStateEvent *This, CALL_STATE_EVENT_CAUSE *pCEC);};
struct ITConferenceBlobVtbl {HRESULT ( *QueryInterface)(ITConferenceBlob *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITConferenceBlob *This);ULONG ( *Release)(ITConferenceBlob *This);HRESULT ( *GetTypeInfoCount)(ITConferenceBlob *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITConferenceBlob *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITConferenceBlob *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITConferenceBlob *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Init)(ITConferenceBlob *This);HRESULT ( *CreateDefault)(ITConferenceBlob *This, BSTR pName);HRESULT ( *CommitBlob)(ITConferenceBlob *This);HRESULT ( *get_IsModified)(ITConferenceBlob *This, VARIANT_BOOL *pfIsModified);HRESULT ( *get_ConferenceBlob)(ITConferenceBlob *This, BSTR *ppBlob);HRESULT ( *put_ConferenceBlob)(ITConferenceBlob *This, BSTR pBlob);HRESULT ( *get_NotificationOwner)(ITConferenceBlob *This, ITNotification **ppOwner);HRESULT ( *put_NotificationOwner)(ITConferenceBlob *This, ITNotification *pOwner);};
struct ClusGroupOwnersVtbl {HRESULT ( *QueryInterface)(ClusGroupOwners *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusGroupOwners *This);ULONG ( *Release)(ClusGroupOwners *This);HRESULT ( *GetTypeInfoCount)(ClusGroupOwners *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusGroupOwners *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusGroupOwners *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusGroupOwners *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusGroupOwners *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusGroupOwners *This, IUnknown **retval);HRESULT ( *Refresh)(ClusGroupOwners *This);HRESULT ( *get_Item)(ClusGroupOwners *This, VARIANT varIndex, ClusNode **ppClusNode);HRESULT ( *InsertItem)(ClusGroupOwners *This, ClusNode *pClusNode, LONG nPosition);HRESULT ( *RemoveItem)(ClusGroupOwners *This, VARIANT varIndex);HRESULT ( *get_Modified)(ClusGroupOwners *This, boolean *flag);};
struct ICertServerExitVtbl {HRESULT ( *QueryInterface)(ICertServerExit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertServerExit *This);ULONG ( *Release)(ICertServerExit *This);HRESULT ( *GetTypeInfoCount)(ICertServerExit *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertServerExit *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertServerExit *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertServerExit *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SetContext)(ICertServerExit *This, LONG Context);HRESULT ( *GetRequestProperty)(ICertServerExit *This,  BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue);HRESULT ( *GetRequestAttribute)(ICertServerExit *This,  BSTR strAttributeName, BSTR *pstrAttributeValue);HRESULT ( *GetCertificateProperty)(ICertServerExit *This,  BSTR strPropertyName, LONG PropertyType, VARIANT *pvarPropertyValue);HRESULT ( *GetCertificateExtension)(ICertServerExit *This,  BSTR strExtensionName, LONG Type, VARIANT *pvarValue);HRESULT ( *GetCertificateExtensionFlags)(ICertServerExit *This, LONG *pExtFlags);HRESULT ( *EnumerateExtensionsSetup)(ICertServerExit *This, LONG Flags);HRESULT ( *EnumerateExtensions)(ICertServerExit *This, BSTR *pstrExtensionName);HRESULT ( *EnumerateExtensionsClose)(ICertServerExit *This);HRESULT ( *EnumerateAttributesSetup)(ICertServerExit *This, LONG Flags);HRESULT ( *EnumerateAttributes)(ICertServerExit *This, BSTR *pstrAttributeName);HRESULT ( *EnumerateAttributesClose)(ICertServerExit *This);};
struct IHTMLDivElementVtbl {HRESULT ( *QueryInterface)(IHTMLDivElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDivElement *This);ULONG ( *Release)(IHTMLDivElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLDivElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDivElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDivElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDivElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLDivElement *This, BSTR v);HRESULT ( *get_align)(IHTMLDivElement *This, BSTR *p);HRESULT ( *put_noWrap)(IHTMLDivElement *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLDivElement *This, VARIANT_BOOL *p);};
struct IHTMLImgElementVtbl {HRESULT ( *QueryInterface)(IHTMLImgElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLImgElement *This);ULONG ( *Release)(IHTMLImgElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLImgElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLImgElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLImgElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLImgElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_isMap)(IHTMLImgElement *This, VARIANT_BOOL v);HRESULT ( *get_isMap)(IHTMLImgElement *This, VARIANT_BOOL *p);HRESULT ( *put_useMap)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_useMap)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileSize)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileCreatedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_protocol)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_href)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_border)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_border)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_vspace)(IHTMLImgElement *This, int v);HRESULT ( *get_vspace)(IHTMLImgElement *This, int *p);HRESULT ( *put_hspace)(IHTMLImgElement *This, int v);HRESULT ( *get_hspace)(IHTMLImgElement *This, int *p);HRESULT ( *put_alt)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_alt)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_src)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_src)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_lowsrc)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_lowsrc)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_vrml)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_vrml)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_dynsrc)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_dynsrc)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLImgElement *This, BSTR *p);HRESULT ( *get_complete)(IHTMLImgElement *This, VARIANT_BOOL *p);HRESULT ( *put_loop)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_loop)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_align)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_align)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_onload)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_onabort)(IHTMLImgElement *This, VARIANT v);HRESULT ( *get_onabort)(IHTMLImgElement *This, VARIANT *p);HRESULT ( *put_name)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_name)(IHTMLImgElement *This, BSTR *p);HRESULT ( *put_width)(IHTMLImgElement *This, int v);HRESULT ( *get_width)(IHTMLImgElement *This, int *p);HRESULT ( *put_height)(IHTMLImgElement *This, int v);HRESULT ( *get_height)(IHTMLImgElement *This, int *p);HRESULT ( *put_start)(IHTMLImgElement *This, BSTR v);HRESULT ( *get_start)(IHTMLImgElement *This, BSTR *p);};
struct IHTMLOpsProfileVtbl {HRESULT ( *QueryInterface)(IHTMLOpsProfile *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOpsProfile *This);ULONG ( *Release)(IHTMLOpsProfile *This);HRESULT ( *GetTypeInfoCount)(IHTMLOpsProfile *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOpsProfile *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOpsProfile *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOpsProfile *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *addRequest)(IHTMLOpsProfile *This, BSTR name, VARIANT reserved, VARIANT_BOOL *success);HRESULT ( *clearRequest)(IHTMLOpsProfile *This);HRESULT ( *doRequest)(IHTMLOpsProfile *This, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved);HRESULT ( *getAttribute)(IHTMLOpsProfile *This, BSTR name, BSTR *value);HRESULT ( *setAttribute)(IHTMLOpsProfile *This, BSTR name, BSTR value, VARIANT prefs, VARIANT_BOOL *success);HRESULT ( *commitChanges)(IHTMLOpsProfile *This, VARIANT_BOOL *success);HRESULT ( *addReadRequest)(IHTMLOpsProfile *This, BSTR name, VARIANT reserved, VARIANT_BOOL *success);HRESULT ( *doReadRequest)(IHTMLOpsProfile *This, VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved);HRESULT ( *doWriteRequest)(IHTMLOpsProfile *This, VARIANT_BOOL *success);};
struct ITAttributeListVtbl {HRESULT ( *QueryInterface)(ITAttributeList *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITAttributeList *This);ULONG ( *Release)(ITAttributeList *This);HRESULT ( *GetTypeInfoCount)(ITAttributeList *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITAttributeList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITAttributeList *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITAttributeList *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ITAttributeList *This, USHORT *pVal);HRESULT ( *get_Item)(ITAttributeList *This, USHORT Index, BSTR *pVal);HRESULT ( *Add)(ITAttributeList *This, USHORT Index, BSTR pAttribute);HRESULT ( *Delete)(ITAttributeList *This, USHORT Index);HRESULT ( *get_AttributeList)(ITAttributeList *This, VARIANT *pVal);HRESULT ( *put_AttributeList)(ITAttributeList *This, VARIANT newVal);};
struct ClusPropertiesVtbl {HRESULT ( *QueryInterface)(ClusProperties *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusProperties *This);ULONG ( *Release)(ClusProperties *This);HRESULT ( *GetTypeInfoCount)(ClusProperties *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusProperties *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusProperties *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusProperties *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusProperties *This, IUnknown **retval);HRESULT ( *Refresh)(ClusProperties *This);HRESULT ( *get_Item)(ClusProperties *This, VARIANT varIndex, ClusProperty **ppClusProperty);HRESULT ( *Add)(ClusProperties *This, BSTR bstrName, VARIANT varValue, ClusProperty **pProperty);HRESULT ( *Remove)(ClusProperties *This, VARIANT varIndex);HRESULT ( *SaveChanges)(ClusProperties *This);};
struct IADsPrintQueueVtbl {HRESULT ( *QueryInterface)(IADsPrintQueue *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPrintQueue *This);ULONG ( *Release)(IADsPrintQueue *This);HRESULT ( *GetTypeInfoCount)(IADsPrintQueue *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPrintQueue *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPrintQueue *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPrintQueue *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *get_Class)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *get_GUID)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *get_Parent)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *get_Schema)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *GetInfo)(IADsPrintQueue *This);HRESULT ( *SetInfo)(IADsPrintQueue *This);HRESULT ( *Get)(IADsPrintQueue *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsPrintQueue *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsPrintQueue *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsPrintQueue *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsPrintQueue *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_PrinterPath)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_PrinterPath)(IADsPrintQueue *This, BSTR bstrPrinterPath);HRESULT ( *get_Model)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_Model)(IADsPrintQueue *This, BSTR bstrModel);HRESULT ( *get_Datatype)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_Datatype)(IADsPrintQueue *This, BSTR bstrDatatype);HRESULT ( *get_PrintProcessor)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_PrintProcessor)(IADsPrintQueue *This, BSTR bstrPrintProcessor);HRESULT ( *get_Description)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_Description)(IADsPrintQueue *This, BSTR bstrDescription);HRESULT ( *get_Location)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_Location)(IADsPrintQueue *This, BSTR bstrLocation);HRESULT ( *get_StartTime)(IADsPrintQueue *This, DATE *retval);HRESULT ( *put_StartTime)(IADsPrintQueue *This, DATE daStartTime);HRESULT ( *get_UntilTime)(IADsPrintQueue *This, DATE *retval);HRESULT ( *put_UntilTime)(IADsPrintQueue *This, DATE daUntilTime);HRESULT ( *get_DefaultJobPriority)(IADsPrintQueue *This, int *retval);HRESULT ( *put_DefaultJobPriority)(IADsPrintQueue *This, int lnDefaultJobPriority);HRESULT ( *get_Priority)(IADsPrintQueue *This, int *retval);HRESULT ( *put_Priority)(IADsPrintQueue *This, int lnPriority);HRESULT ( *get_BannerPage)(IADsPrintQueue *This, BSTR *retval);HRESULT ( *put_BannerPage)(IADsPrintQueue *This, BSTR bstrBannerPage);HRESULT ( *get_PrintDevices)(IADsPrintQueue *This, VARIANT *retval);HRESULT ( *put_PrintDevices)(IADsPrintQueue *This, VARIANT vPrintDevices);HRESULT ( *get_NetAddresses)(IADsPrintQueue *This, VARIANT *retval);HRESULT ( *put_NetAddresses)(IADsPrintQueue *This, VARIANT vNetAddresses);};
struct ICatalogObjectVtbl {HRESULT ( *QueryInterface)(ICatalogObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatalogObject *This);ULONG ( *Release)(ICatalogObject *This);HRESULT ( *GetTypeInfoCount)(ICatalogObject *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICatalogObject *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICatalogObject *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICatalogObject *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ICatalogObject *This, BSTR bstrPropName, VARIANT *retval);HRESULT ( *put_Value)(ICatalogObject *This, BSTR bstrPropName, VARIANT val);HRESULT ( *get_Key)(ICatalogObject *This, VARIANT *retval);HRESULT ( *get_Name)(ICatalogObject *This, VARIANT *retval);HRESULT ( *IsPropertyReadOnly)(ICatalogObject *This, BSTR bstrPropName, VARIANT_BOOL *retval);HRESULT ( *get_Valid)(ICatalogObject *This, VARIANT_BOOL *retval);HRESULT ( *IsPropertyWriteOnly)(ICatalogObject *This, BSTR bstrPropName, VARIANT_BOOL *retval);};
struct ICertGetConfigVtbl {HRESULT ( *QueryInterface)(ICertGetConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertGetConfig *This);ULONG ( *Release)(ICertGetConfig *This);HRESULT ( *GetTypeInfoCount)(ICertGetConfig *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertGetConfig *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertGetConfig *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertGetConfig *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetConfig)(ICertGetConfig *This, LONG Flags, BSTR *pstrOut);};
struct IComponentUtilVtbl {HRESULT ( *QueryInterface)(IComponentUtil *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IComponentUtil *This);ULONG ( *Release)(IComponentUtil *This);HRESULT ( *GetTypeInfoCount)(IComponentUtil *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IComponentUtil *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IComponentUtil *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IComponentUtil *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *InstallComponent)(IComponentUtil *This, BSTR bstrDLLFile, BSTR bstrTypelibFile, BSTR bstrProxyStubDLLFile);HRESULT ( *ImportComponent)(IComponentUtil *This, BSTR bstrCLSID);HRESULT ( *ImportComponentByName)(IComponentUtil *This, BSTR bstrProgID);HRESULT ( *GetCLSIDs)(IComponentUtil *This, BSTR bstrDLLFile, BSTR bstrTypelibFile, SAFEARRAY **aCLSIDs);};
struct IHTMLFrameBaseVtbl {HRESULT ( *QueryInterface)(IHTMLFrameBase *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLFrameBase *This);ULONG ( *Release)(IHTMLFrameBase *This);HRESULT ( *GetTypeInfoCount)(IHTMLFrameBase *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLFrameBase *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLFrameBase *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLFrameBase *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_src)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_name)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_name)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_border)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_border)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_frameBorder)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_frameBorder)(IHTMLFrameBase *This, BSTR *p);HRESULT ( *put_frameSpacing)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_frameSpacing)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_marginWidth)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_marginWidth)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_marginHeight)(IHTMLFrameBase *This, VARIANT v);HRESULT ( *get_marginHeight)(IHTMLFrameBase *This, VARIANT *p);HRESULT ( *put_noResize)(IHTMLFrameBase *This, VARIANT_BOOL v);HRESULT ( *get_noResize)(IHTMLFrameBase *This, VARIANT_BOOL *p);HRESULT ( *put_scrolling)(IHTMLFrameBase *This, BSTR v);HRESULT ( *get_scrolling)(IHTMLFrameBase *This, BSTR *p);};
struct IHTMLHRElementVtbl {HRESULT ( *QueryInterface)(IHTMLHRElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLHRElement *This);ULONG ( *Release)(IHTMLHRElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLHRElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLHRElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLHRElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLHRElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_align)(IHTMLHRElement *This, BSTR v);HRESULT ( *get_align)(IHTMLHRElement *This, BSTR *p);HRESULT ( *put_color)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_color)(IHTMLHRElement *This, VARIANT *p);HRESULT ( *put_noShade)(IHTMLHRElement *This, VARIANT_BOOL v);HRESULT ( *get_noShade)(IHTMLHRElement *This, VARIANT_BOOL *p);HRESULT ( *put_width)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_width)(IHTMLHRElement *This, VARIANT *p);HRESULT ( *put_size)(IHTMLHRElement *This, VARIANT v);HRESULT ( *get_size)(IHTMLHRElement *This, VARIANT *p);};
struct IHTMLLIElementVtbl {HRESULT ( *QueryInterface)(IHTMLLIElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLIElement *This);ULONG ( *Release)(IHTMLLIElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLIElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLIElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLIElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLIElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_type)(IHTMLLIElement *This, BSTR v);HRESULT ( *get_type)(IHTMLLIElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLLIElement *This, int v);HRESULT ( *get_value)(IHTMLLIElement *This, int *p);};
struct IHTMLTableCellVtbl {HRESULT ( *QueryInterface)(IHTMLTableCell *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTableCell *This);ULONG ( *Release)(IHTMLTableCell *This);HRESULT ( *GetTypeInfoCount)(IHTMLTableCell *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTableCell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTableCell *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTableCell *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_rowSpan)(IHTMLTableCell *This, int v);HRESULT ( *get_rowSpan)(IHTMLTableCell *This, int *p);HRESULT ( *put_colSpan)(IHTMLTableCell *This, int v);HRESULT ( *get_colSpan)(IHTMLTableCell *This, int *p);HRESULT ( *put_align)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_align)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_vAlign)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_vAlign)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_bgColor)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_noWrap)(IHTMLTableCell *This, VARIANT_BOOL v);HRESULT ( *get_noWrap)(IHTMLTableCell *This, VARIANT_BOOL *p);HRESULT ( *put_background)(IHTMLTableCell *This, BSTR v);HRESULT ( *get_background)(IHTMLTableCell *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColor)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_borderColorLight)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColorLight)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_borderColorDark)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_borderColorDark)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_width)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_width)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *put_height)(IHTMLTableCell *This, VARIANT v);HRESULT ( *get_height)(IHTMLTableCell *This, VARIANT *p);HRESULT ( *get_cellIndex)(IHTMLTableCell *This, int *p);};
struct IShellUIHelperVtbl {HRESULT ( *QueryInterface)(IShellUIHelper *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellUIHelper *This);ULONG ( *Release)(IShellUIHelper *This);HRESULT ( *GetTypeInfoCount)(IShellUIHelper *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellUIHelper *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellUIHelper *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellUIHelper *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *ResetFirstBootMode)(IShellUIHelper *This);HRESULT ( *ResetSafeMode)(IShellUIHelper *This);HRESULT ( *RefreshOfflineDesktop)(IShellUIHelper *This);HRESULT ( *AddFavorite)(IShellUIHelper *This, BSTR URL, VARIANT *Title);HRESULT ( *AddChannel)(IShellUIHelper *This, BSTR URL);HRESULT ( *AddDesktopComponent)(IShellUIHelper *This, BSTR URL, BSTR Type, VARIANT *Left, VARIANT *Top, VARIANT *Width, VARIANT *Height);HRESULT ( *IsSubscribed)(IShellUIHelper *This, BSTR URL, VARIANT_BOOL *pBool);};
struct ITMediaSupportVtbl {HRESULT ( *QueryInterface)(ITMediaSupport *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMediaSupport *This);ULONG ( *Release)(ITMediaSupport *This);HRESULT ( *GetTypeInfoCount)(ITMediaSupport *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMediaSupport *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMediaSupport *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMediaSupport *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MediaTypes)(ITMediaSupport *This, VARIANT *pVariant);HRESULT ( *_EnumerateMediaTypes)(ITMediaSupport *This, IEnumMediaType **ppEnumMediaType);HRESULT ( *QueryDirectShowSupport)(ITMediaSupport *This, BSTR pMediaType, VARIANT_BOOL *pfSupport);HRESULT ( *QueryMediaType)(ITMediaSupport *This, BSTR pMediaType, VARIANT_BOOL *pfSupport);};
struct ClusResGroupsVtbl {HRESULT ( *QueryInterface)(ClusResGroups *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResGroups *This);ULONG ( *Release)(ClusResGroups *This);HRESULT ( *GetTypeInfoCount)(ClusResGroups *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResGroups *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResGroups *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResGroups *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResGroups *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResGroups *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResGroups *This);HRESULT ( *get_Item)(ClusResGroups *This, VARIANT varIndex, ClusResGroup **ppClusResGroup);HRESULT ( *CreateItem)(ClusResGroups *This, BSTR bstrResourceGroupName, ClusResGroup **ppResourceGroup);HRESULT ( *DeleteItem)(ClusResGroups *This, VARIANT varIndex);};
struct ClusResOwnersVtbl {HRESULT ( *QueryInterface)(ClusResOwners *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResOwners *This);ULONG ( *Release)(ClusResOwners *This);HRESULT ( *GetTypeInfoCount)(ClusResOwners *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResOwners *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResOwners *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResOwners *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResOwners *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResOwners *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResOwners *This);HRESULT ( *get_Item)(ClusResOwners *This, VARIANT varIndex, ClusNode **ppClusNode);HRESULT ( *AddItem)(ClusResOwners *This, ClusNode *pNode);HRESULT ( *RemoveItem)(ClusResOwners *This, VARIANT varIndex);HRESULT ( *get_Modified)(ClusResOwners *This, boolean *pbflag);};
struct IHTMLLocationVtbl {HRESULT ( *QueryInterface)(IHTMLLocation *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLocation *This);ULONG ( *Release)(IHTMLLocation *This);HRESULT ( *GetTypeInfoCount)(IHTMLLocation *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLocation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLocation *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLocation *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLLocation *This, BSTR v);HRESULT ( *get_href)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_protocol)(IHTMLLocation *This, BSTR v);HRESULT ( *get_protocol)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_host)(IHTMLLocation *This, BSTR v);HRESULT ( *get_host)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_hostname)(IHTMLLocation *This, BSTR v);HRESULT ( *get_hostname)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_port)(IHTMLLocation *This, BSTR v);HRESULT ( *get_port)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_pathname)(IHTMLLocation *This, BSTR v);HRESULT ( *get_pathname)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_search)(IHTMLLocation *This, BSTR v);HRESULT ( *get_search)(IHTMLLocation *This, BSTR *p);HRESULT ( *put_hash)(IHTMLLocation *This, BSTR v);HRESULT ( *get_hash)(IHTMLLocation *This, BSTR *p);HRESULT ( *reload)(IHTMLLocation *This, VARIANT_BOOL flag);HRESULT ( *replace)(IHTMLLocation *This, BSTR bstr);HRESULT ( *assign)(IHTMLLocation *This, BSTR bstr);HRESULT ( *toString)(IHTMLLocation *This, BSTR *string);};
struct IHTMLTxtRangeVtbl {HRESULT ( *QueryInterface)(IHTMLTxtRange *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTxtRange *This);ULONG ( *Release)(IHTMLTxtRange *This);HRESULT ( *GetTypeInfoCount)(IHTMLTxtRange *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTxtRange *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTxtRange *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTxtRange *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_htmlText)(IHTMLTxtRange *This, BSTR *p);HRESULT ( *put_text)(IHTMLTxtRange *This, BSTR v);HRESULT ( *get_text)(IHTMLTxtRange *This, BSTR *p);HRESULT ( *parentElement)(IHTMLTxtRange *This, IHTMLElement **Parent);HRESULT ( *duplicate)(IHTMLTxtRange *This, IHTMLTxtRange **Duplicate);HRESULT ( *inRange)(IHTMLTxtRange *This, IHTMLTxtRange *Range, VARIANT_BOOL *InRange);HRESULT ( *isEqual)(IHTMLTxtRange *This, IHTMLTxtRange *Range, VARIANT_BOOL *IsEqual);HRESULT ( *scrollIntoView)(IHTMLTxtRange *This, VARIANT_BOOL fStart);HRESULT ( *collapse)(IHTMLTxtRange *This, VARIANT_BOOL Start);HRESULT ( *expand)(IHTMLTxtRange *This, BSTR Unit, VARIANT_BOOL *Success);HRESULT ( *move)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *moveStart)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *moveEnd)(IHTMLTxtRange *This, BSTR Unit, int Count, int *ActualCount);HRESULT ( *select)(IHTMLTxtRange *This);HRESULT ( *pasteHTML)(IHTMLTxtRange *This, BSTR html);HRESULT ( *moveToElementText)(IHTMLTxtRange *This, IHTMLElement *element);HRESULT ( *setEndPoint)(IHTMLTxtRange *This, BSTR how, IHTMLTxtRange *SourceRange);HRESULT ( *compareEndPoints)(IHTMLTxtRange *This, BSTR how, IHTMLTxtRange *SourceRange, int *ret);HRESULT ( *findText)(IHTMLTxtRange *This, BSTR String, int count, int Flags, VARIANT_BOOL *Success);HRESULT ( *moveToPoint)(IHTMLTxtRange *This, int x, int y);HRESULT ( *getBookmark)(IHTMLTxtRange *This, BSTR *Boolmark);HRESULT ( *moveToBookmark)(IHTMLTxtRange *This, BSTR Bookmark, VARIANT_BOOL *Success);HRESULT ( *queryCommandSupported)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLTxtRange *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLTxtRange *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLTxtRange *This, BSTR cmdID, VARIANT_BOOL *pfRet);};
struct IShellWindowsVtbl {HRESULT ( *QueryInterface)(IShellWindows *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IShellWindows *This);ULONG ( *Release)(IShellWindows *This);HRESULT ( *GetTypeInfoCount)(IShellWindows *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IShellWindows *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IShellWindows *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IShellWindows *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(IShellWindows *This, int *Count);HRESULT ( *Item)(IShellWindows *This, VARIANT index, IDispatch **Folder);HRESULT ( *_NewEnum)(IShellWindows *This, IUnknown **ppunk);HRESULT ( *Register)(IShellWindows *This, IDispatch *pid, int hwnd, int swClass, int *plCookie);HRESULT ( *RegisterPending)(IShellWindows *This, int lThreadId, VARIANT *pvarloc, VARIANT *pvarlocRoot, int swClass, int *plCookie);HRESULT ( *Revoke)(IShellWindows *This, int lCookie);HRESULT ( *OnNavigate)(IShellWindows *This, int lCookie, VARIANT *pvarLoc);HRESULT ( *OnActivated)(IShellWindows *This, int lCookie, VARIANT_BOOL fActive);HRESULT ( *FindWindowA)(IShellWindows *This, VARIANT *pvarLoc, VARIANT *pvarLocRoot, int swClass, int *phwnd, int swfwOptions, IDispatch **ppdispOut);HRESULT ( *OnCreated)(IShellWindows *This, int lCookie, IUnknown *punk);HRESULT ( *ProcessAttachDetach)(IShellWindows *This, VARIANT_BOOL fAttach);};
struct ClusResTypesVtbl {HRESULT ( *QueryInterface)(ClusResTypes *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResTypes *This);ULONG ( *Release)(ClusResTypes *This);HRESULT ( *GetTypeInfoCount)(ClusResTypes *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResTypes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResTypes *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResTypes *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResTypes *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResTypes *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResTypes *This);HRESULT ( *get_Item)(ClusResTypes *This, VARIANT varIndex, ClusResType **ppClusResType);HRESULT ( *CreateItem)(ClusResTypes *This, BSTR bstrResourceTypeName, BSTR bstrDisplayName, BSTR bstrResourceTypeDll, LONG dwLooksAlivePollInterval, LONG dwIsAlivePollInterval, ClusResType **ppResourceType);HRESULT ( *DeleteItem)(ClusResTypes *This, VARIANT varIndex);};
struct ClusterNamesVtbl {HRESULT ( *QueryInterface)(ClusterNames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusterNames *This);ULONG ( *Release)(ClusterNames *This);HRESULT ( *GetTypeInfoCount)(ClusterNames *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusterNames *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusterNames *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusterNames *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusterNames *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusterNames *This, IUnknown **retval);HRESULT ( *Refresh)(ClusterNames *This);HRESULT ( *get_Item)(ClusterNames *This, LONG nIndex, BSTR *pbstrClusterName);HRESULT ( *get_DomainName)(ClusterNames *This, BSTR *pbstrDomainName);};
struct IADsPrintJobVtbl {HRESULT ( *QueryInterface)(IADsPrintJob *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsPrintJob *This);ULONG ( *Release)(IADsPrintJob *This);HRESULT ( *GetTypeInfoCount)(IADsPrintJob *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsPrintJob *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsPrintJob *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsPrintJob *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_Class)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_GUID)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_Parent)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_Schema)(IADsPrintJob *This, BSTR *retval);HRESULT ( *GetInfo)(IADsPrintJob *This);HRESULT ( *SetInfo)(IADsPrintJob *This);HRESULT ( *Get)(IADsPrintJob *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsPrintJob *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsPrintJob *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsPrintJob *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsPrintJob *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_HostPrintQueue)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_User)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_UserPath)(IADsPrintJob *This, BSTR *retval);HRESULT ( *get_TimeSubmitted)(IADsPrintJob *This, DATE *retval);HRESULT ( *get_TotalPages)(IADsPrintJob *This, int *retval);HRESULT ( *get_Size)(IADsPrintJob *This, int *retval);HRESULT ( *get_Description)(IADsPrintJob *This, BSTR *retval);HRESULT ( *put_Description)(IADsPrintJob *This, BSTR bstrDescription);HRESULT ( *get_Priority)(IADsPrintJob *This, int *retval);HRESULT ( *put_Priority)(IADsPrintJob *This, int lnPriority);HRESULT ( *get_StartTime)(IADsPrintJob *This, DATE *retval);HRESULT ( *put_StartTime)(IADsPrintJob *This, DATE daStartTime);HRESULT ( *get_UntilTime)(IADsPrintJob *This, DATE *retval);HRESULT ( *put_UntilTime)(IADsPrintJob *This, DATE daUntilTime);HRESULT ( *get_Notify)(IADsPrintJob *This, BSTR *retval);HRESULT ( *put_Notify)(IADsPrintJob *This, BSTR bstrNotify);HRESULT ( *get_NotifyPath)(IADsPrintJob *This, BSTR *retval);HRESULT ( *put_NotifyPath)(IADsPrintJob *This, BSTR bstrNotifyPath);};
struct IADsPropertyVtbl {HRESULT ( *QueryInterface)(IADsProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsProperty *This);ULONG ( *Release)(IADsProperty *This);HRESULT ( *GetTypeInfoCount)(IADsProperty *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsProperty *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsProperty *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsProperty *This, BSTR *retval);HRESULT ( *get_Class)(IADsProperty *This, BSTR *retval);HRESULT ( *get_GUID)(IADsProperty *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsProperty *This, BSTR *retval);HRESULT ( *get_Parent)(IADsProperty *This, BSTR *retval);HRESULT ( *get_Schema)(IADsProperty *This, BSTR *retval);HRESULT ( *GetInfo)(IADsProperty *This);HRESULT ( *SetInfo)(IADsProperty *This);HRESULT ( *Get)(IADsProperty *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsProperty *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsProperty *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsProperty *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsProperty *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_OID)(IADsProperty *This, BSTR *retval);HRESULT ( *put_OID)(IADsProperty *This, BSTR bstrOID);HRESULT ( *get_Syntax)(IADsProperty *This, BSTR *retval);HRESULT ( *put_Syntax)(IADsProperty *This, BSTR bstrSyntax);HRESULT ( *get_MaxRange)(IADsProperty *This, int *retval);HRESULT ( *put_MaxRange)(IADsProperty *This, int lnMaxRange);HRESULT ( *get_MinRange)(IADsProperty *This, int *retval);HRESULT ( *put_MinRange)(IADsProperty *This, int lnMinRange);HRESULT ( *get_MultiValued)(IADsProperty *This, VARIANT_BOOL *retval);HRESULT ( *put_MultiValued)(IADsProperty *This, VARIANT_BOOL fMultiValued);HRESULT ( *Qualifiers)(IADsProperty *This, IADsCollection **ppQualifiers);};
struct ICertRequestVtbl {HRESULT ( *QueryInterface)(ICertRequest *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertRequest *This);ULONG ( *Release)(ICertRequest *This);HRESULT ( *GetTypeInfoCount)(ICertRequest *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertRequest *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertRequest *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Submit)(ICertRequest *This, LONG Flags,  BSTR strRequest,  BSTR strAttributes,  BSTR strConfig, LONG *pDisposition);HRESULT ( *RetrievePending)(ICertRequest *This, LONG RequestId,  BSTR strConfig, LONG *pDisposition);HRESULT ( *GetLastStatus)(ICertRequest *This, LONG *pStatus);HRESULT ( *GetRequestId)(ICertRequest *This, LONG *pRequestId);HRESULT ( *GetDispositionMessage)(ICertRequest *This, BSTR *pstrDispositionMessage);HRESULT ( *GetCACertificate)(ICertRequest *This, LONG fExchangeCertificate,  BSTR strConfig, LONG Flags, BSTR *pstrCertificate);HRESULT ( *GetCertificate)(ICertRequest *This, LONG Flags, BSTR *pstrCertificate);};
struct IOmNavigatorVtbl {HRESULT ( *QueryInterface)(IOmNavigator *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOmNavigator *This);ULONG ( *Release)(IOmNavigator *This);HRESULT ( *GetTypeInfoCount)(IOmNavigator *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IOmNavigator *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IOmNavigator *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IOmNavigator *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_appCodeName)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appName)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appVersion)(IOmNavigator *This, BSTR *p);HRESULT ( *get_userAgent)(IOmNavigator *This, BSTR *p);HRESULT ( *javaEnabled)(IOmNavigator *This, VARIANT_BOOL *enabled);HRESULT ( *taintEnabled)(IOmNavigator *This, VARIANT_BOOL *enabled);HRESULT ( *get_mimeTypes)(IOmNavigator *This, IHTMLMimeTypesCollection **p);HRESULT ( *get_plugins)(IOmNavigator *This, IHTMLPluginsCollection **p);HRESULT ( *get_cookieEnabled)(IOmNavigator *This, VARIANT_BOOL *p);HRESULT ( *get_opsProfile)(IOmNavigator *This, IHTMLOpsProfile **p);HRESULT ( *toString)(IOmNavigator *This, BSTR *string);HRESULT ( *get_cpuClass)(IOmNavigator *This, BSTR *p);HRESULT ( *get_systemLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_browserLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_userLanguage)(IOmNavigator *This, BSTR *p);HRESULT ( *get_platform)(IOmNavigator *This, BSTR *p);HRESULT ( *get_appMinorVersion)(IOmNavigator *This, BSTR *p);HRESULT ( *get_connectionSpeed)(IOmNavigator *This, int *p);HRESULT ( *get_onLine)(IOmNavigator *This, VARIANT_BOOL *p);HRESULT ( *get_userProfile)(IOmNavigator *This, IHTMLOpsProfile **p);};
struct DomainNamesVtbl {HRESULT ( *QueryInterface)(DomainNames *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(DomainNames *This);ULONG ( *Release)(DomainNames *This);HRESULT ( *GetTypeInfoCount)(DomainNames *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(DomainNames *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(DomainNames *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(DomainNames *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(DomainNames *This, LONG *pnCount);HRESULT ( *get__NewEnum)(DomainNames *This, IUnknown **retval);HRESULT ( *Refresh)(DomainNames *This);HRESULT ( *get_Item)(DomainNames *This, LONG nIndex, BSTR *pbstrDomainName);};
struct ICertConfigVtbl {HRESULT ( *QueryInterface)(ICertConfig *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertConfig *This);ULONG ( *Release)(ICertConfig *This);HRESULT ( *GetTypeInfoCount)(ICertConfig *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertConfig *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertConfig *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertConfig *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Reset)(ICertConfig *This, LONG Index, LONG *pCount);HRESULT ( *Next)(ICertConfig *This, LONG *pIndex);HRESULT ( *GetField)(ICertConfig *This,  BSTR strFieldName, BSTR *pstrOut);HRESULT ( *GetConfig)(ICertConfig *This, LONG Flags, BSTR *pstrOut);};
struct ICertPolicyVtbl {HRESULT ( *QueryInterface)(ICertPolicy *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertPolicy *This);ULONG ( *Release)(ICertPolicy *This);HRESULT ( *GetTypeInfoCount)(ICertPolicy *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertPolicy *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertPolicy *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertPolicy *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Initialize)(ICertPolicy *This,  BSTR strConfig);HRESULT ( *VerifyRequest)(ICertPolicy *This,  BSTR strConfig, LONG Context, LONG bNewRequest, LONG Flags, LONG *pDisposition);HRESULT ( *GetDescription)(ICertPolicy *This, BSTR *pstrDescription);HRESULT ( *ShutDown)(ICertPolicy *This);};
struct IDispatchExVtbl {HRESULT ( *QueryInterface)(IDispatchEx *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispatchEx *This);ULONG ( *Release)(IDispatchEx *This);HRESULT ( *GetTypeInfoCount)(IDispatchEx *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IDispatchEx *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IDispatchEx *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IDispatchEx *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDispID)(IDispatchEx *This, BSTR bstrName, DWORD grfdex, DISPID *pid);HRESULT ( *InvokeEx)(IDispatchEx *This, DISPID id, LCID lcid, WORD wFlags, DISPPARAMS *pdp, VARIANT *pvarRes, EXCEPINFO *pei, IServiceProvider *pspCaller);HRESULT ( *DeleteMemberByName)(IDispatchEx *This, BSTR bstr, DWORD grfdex);HRESULT ( *DeleteMemberByDispID)(IDispatchEx *This, DISPID id);HRESULT ( *GetMemberProperties)(IDispatchEx *This, DISPID id, DWORD grfdexFetch, DWORD *pgrfdex);HRESULT ( *GetMemberName)(IDispatchEx *This, DISPID id, BSTR *pbstrName);HRESULT ( *GetNextDispID)(IDispatchEx *This, DWORD grfdex, DISPID id, DISPID *pid);HRESULT ( *GetNameSpaceParent)(IDispatchEx *This, IUnknown **ppunk);};
struct IXMLElementVtbl {HRESULT ( *QueryInterface)(IXMLElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IXMLElement *This);ULONG ( *Release)(IXMLElement *This);HRESULT ( *GetTypeInfoCount)(IXMLElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IXMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IXMLElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IXMLElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_tagName)(IXMLElement *This, BSTR *p);HRESULT ( *put_tagName)(IXMLElement *This, BSTR p);HRESULT ( *get_parent)(IXMLElement *This, IXMLElement **ppParent);HRESULT ( *setAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT ( *getAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT ( *removeAttribute)(IXMLElement *This, BSTR strPropertyName);HRESULT ( *get_children)(IXMLElement *This, IXMLElementCollection **pp);HRESULT ( *get_type)(IXMLElement *This, int *plType);HRESULT ( *get_text)(IXMLElement *This, BSTR *p);HRESULT ( *put_text)(IXMLElement *This, BSTR p);HRESULT ( *addChild)(IXMLElement *This, IXMLElement *pChildElem, int lIndex, int lReserved);HRESULT ( *removeChild)(IXMLElement *This, IXMLElement *pChildElem);};
struct IADsDomainVtbl {HRESULT ( *QueryInterface)(IADsDomain *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsDomain *This);ULONG ( *Release)(IADsDomain *This);HRESULT ( *GetTypeInfoCount)(IADsDomain *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsDomain *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsDomain *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsDomain *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsDomain *This, BSTR *retval);HRESULT ( *get_Class)(IADsDomain *This, BSTR *retval);HRESULT ( *get_GUID)(IADsDomain *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsDomain *This, BSTR *retval);HRESULT ( *get_Parent)(IADsDomain *This, BSTR *retval);HRESULT ( *get_Schema)(IADsDomain *This, BSTR *retval);HRESULT ( *GetInfo)(IADsDomain *This);HRESULT ( *SetInfo)(IADsDomain *This);HRESULT ( *Get)(IADsDomain *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsDomain *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsDomain *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsDomain *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsDomain *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_IsWorkgroup)(IADsDomain *This, VARIANT_BOOL *retval);HRESULT ( *get_MinPasswordLength)(IADsDomain *This, int *retval);HRESULT ( *put_MinPasswordLength)(IADsDomain *This, int lnMinPasswordLength);HRESULT ( *get_MinPasswordAge)(IADsDomain *This, int *retval);HRESULT ( *put_MinPasswordAge)(IADsDomain *This, int lnMinPasswordAge);HRESULT ( *get_MaxPasswordAge)(IADsDomain *This, int *retval);HRESULT ( *put_MaxPasswordAge)(IADsDomain *This, int lnMaxPasswordAge);HRESULT ( *get_MaxBadPasswordsAllowed)(IADsDomain *This, int *retval);HRESULT ( *put_MaxBadPasswordsAllowed)(IADsDomain *This, int lnMaxBadPasswordsAllowed);HRESULT ( *get_PasswordHistoryLength)(IADsDomain *This, int *retval);HRESULT ( *put_PasswordHistoryLength)(IADsDomain *This, int lnPasswordHistoryLength);HRESULT ( *get_PasswordAttributes)(IADsDomain *This, int *retval);HRESULT ( *put_PasswordAttributes)(IADsDomain *This, int lnPasswordAttributes);HRESULT ( *get_AutoUnlockInterval)(IADsDomain *This, int *retval);HRESULT ( *put_AutoUnlockInterval)(IADsDomain *This, int lnAutoUnlockInterval);HRESULT ( *get_LockoutObservationInterval)(IADsDomain *This, int *retval);HRESULT ( *put_LockoutObservationInterval)(IADsDomain *This, int lnLockoutObservationInterval);};
struct IMtsEventsVtbl {HRESULT ( *QueryInterface)(IMtsEvents *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IMtsEvents *This);ULONG ( *Release)(IMtsEvents *This);HRESULT ( *GetTypeInfoCount)(IMtsEvents *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IMtsEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IMtsEvents *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IMtsEvents *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_PackageName)(IMtsEvents *This, BSTR *pVal);HRESULT ( *get_PackageGuid)(IMtsEvents *This, BSTR *pVal);HRESULT ( *PostEvent)(IMtsEvents *This, VARIANT *vEvent);HRESULT ( *get_FireEvents)(IMtsEvents *This, VARIANT_BOOL *pVal);HRESULT ( *GetProcessID)(IMtsEvents *This, int *id);};
struct ITCallInfoVtbl {HRESULT ( *QueryInterface)(ITCallInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITCallInfo *This);ULONG ( *Release)(ITCallInfo *This);HRESULT ( *GetTypeInfoCount)(ITCallInfo *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITCallInfo *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITCallInfo *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITCallInfo *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Address)(ITCallInfo *This, ITAddress **ppAddress);HRESULT ( *get_CallState)(ITCallInfo *This, CALL_STATE *pCallState);HRESULT ( *get_Privilege)(ITCallInfo *This, CALL_PRIVILEGE *pPrivilege);HRESULT ( *get_MediaTerminalsInUse)(ITCallInfo *This, VARIANT *pVariant);HRESULT ( *_EnumerateMediaTerminalsInUse)(ITCallInfo *This, IEnumMediaTerminals **ppEnumMediaTerminals);HRESULT ( *get_ParticipantInfo)(ITCallInfo *This, VARIANT *pVariant);HRESULT ( *_EnumerateParticipantInfo)(ITCallInfo *This, IEnumParticipantInfo **ppEnumParticipantInfo);HRESULT ( *get_ExtendedMediaTypes)(ITCallInfo *This, VARIANT *pVariant);HRESULT ( *_EnumerateExtendedMediaTypes)(ITCallInfo *This, IEnumExtendedMedia **ppEnumExtendedMedia);HRESULT ( *get_MediaTypesAvailable)(ITCallInfo *This, VARIANT *pVariant);HRESULT ( *_EnumerateMediaTypesAvailable)(ITCallInfo *This, IEnumMediaType **ppEnumMediaType);};
struct IADsClassVtbl {HRESULT ( *QueryInterface)(IADsClass *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsClass *This);ULONG ( *Release)(IADsClass *This);HRESULT ( *GetTypeInfoCount)(IADsClass *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsClass *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsClass *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsClass *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsClass *This, BSTR *retval);HRESULT ( *get_Class)(IADsClass *This, BSTR *retval);HRESULT ( *get_GUID)(IADsClass *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsClass *This, BSTR *retval);HRESULT ( *get_Parent)(IADsClass *This, BSTR *retval);HRESULT ( *get_Schema)(IADsClass *This, BSTR *retval);HRESULT ( *GetInfo)(IADsClass *This);HRESULT ( *SetInfo)(IADsClass *This);HRESULT ( *Get)(IADsClass *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsClass *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsClass *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsClass *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsClass *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_PrimaryInterface)(IADsClass *This, BSTR *retval);HRESULT ( *get_CLSID)(IADsClass *This, BSTR *retval);HRESULT ( *put_CLSID)(IADsClass *This, BSTR bstrCLSID);HRESULT ( *get_OID)(IADsClass *This, BSTR *retval);HRESULT ( *put_OID)(IADsClass *This, BSTR bstrOID);HRESULT ( *get_Abstract)(IADsClass *This, VARIANT_BOOL *retval);HRESULT ( *put_Abstract)(IADsClass *This, VARIANT_BOOL fAbstract);HRESULT ( *get_Auxiliary)(IADsClass *This, VARIANT_BOOL *retval);HRESULT ( *put_Auxiliary)(IADsClass *This, VARIANT_BOOL fAuxiliary);HRESULT ( *get_MandatoryProperties)(IADsClass *This, VARIANT *retval);HRESULT ( *put_MandatoryProperties)(IADsClass *This, VARIANT vMandatoryProperties);HRESULT ( *get_OptionalProperties)(IADsClass *This, VARIANT *retval);HRESULT ( *put_OptionalProperties)(IADsClass *This, VARIANT vOptionalProperties);HRESULT ( *get_NamingProperties)(IADsClass *This, VARIANT *retval);HRESULT ( *put_NamingProperties)(IADsClass *This, VARIANT vNamingProperties);HRESULT ( *get_DerivedFrom)(IADsClass *This, VARIANT *retval);HRESULT ( *put_DerivedFrom)(IADsClass *This, VARIANT vDerivedFrom);HRESULT ( *get_AuxDerivedFrom)(IADsClass *This, VARIANT *retval);HRESULT ( *put_AuxDerivedFrom)(IADsClass *This, VARIANT vAuxDerivedFrom);HRESULT ( *get_PossibleSuperiors)(IADsClass *This, VARIANT *retval);HRESULT ( *put_PossibleSuperiors)(IADsClass *This, VARIANT vPossibleSuperiors);HRESULT ( *get_Containment)(IADsClass *This, VARIANT *retval);HRESULT ( *put_Containment)(IADsClass *This, VARIANT vContainment);HRESULT ( *get_Container)(IADsClass *This, VARIANT_BOOL *retval);HRESULT ( *put_Container)(IADsClass *This, VARIANT_BOOL fContainer);HRESULT ( *get_HelpFileName)(IADsClass *This, BSTR *retval);HRESULT ( *put_HelpFileName)(IADsClass *This, BSTR bstrHelpFileName);HRESULT ( *get_HelpFileContext)(IADsClass *This, int *retval);HRESULT ( *put_HelpFileContext)(IADsClass *This, int lnHelpFileContext);HRESULT ( *Qualifiers)(IADsClass *This, IADsCollection **ppQualifiers);};
struct ICertExitVtbl {HRESULT ( *QueryInterface)(ICertExit *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertExit *This);ULONG ( *Release)(ICertExit *This);HRESULT ( *GetTypeInfoCount)(ICertExit *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertExit *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertExit *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertExit *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Initialize)(ICertExit *This,  BSTR strConfig, LONG *pEventMask);HRESULT ( *Notify)(ICertExit *This, LONG Event, LONG Context);HRESULT ( *GetDescription)(ICertExit *This, BSTR *pstrDescription);};
struct PropertyVtbl {HRESULT ( *QueryInterface)(ADOProperty *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOProperty *This);ULONG ( *Release)(ADOProperty *This);HRESULT ( *GetTypeInfoCount)(ADOProperty *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOProperty *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOProperty *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Value)(ADOProperty *This, VARIANT *pval);HRESULT ( *put_Value)(ADOProperty *This, VARIANT val);HRESULT ( *get_Name)(ADOProperty *This, BSTR *pbstr);HRESULT ( *get_Type)(ADOProperty *This, DataTypeEnum *ptype);HRESULT ( *get_Attributes)(ADOProperty *This, int *plAttributes);HRESULT ( *put_Attributes)(ADOProperty *This, int lAttributes);};
struct ITMediaVtbl {HRESULT ( *QueryInterface)(ITMedia *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITMedia *This);ULONG ( *Release)(ITMedia *This);HRESULT ( *GetTypeInfoCount)(ITMedia *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITMedia *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITMedia *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITMedia *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_MediaName)(ITMedia *This, BSTR *ppMediaName);HRESULT ( *put_MediaName)(ITMedia *This, BSTR pMediaName);HRESULT ( *get_StartPort)(ITMedia *This, USHORT *pStartPort);HRESULT ( *get_NumPorts)(ITMedia *This, USHORT *pNumPorts);HRESULT ( *get_TransportProtocol)(ITMedia *This, BSTR *ppProtocol);HRESULT ( *put_TransportProtocol)(ITMedia *This, BSTR pProtocol);HRESULT ( *get_FormatCodeList)(ITMedia *This, VARIANT *pList);HRESULT ( *put_FormatCodeList)(ITMedia *This, VARIANT List);HRESULT ( *get_MediaTitle)(ITMedia *This, BSTR *ppMediaTitle);HRESULT ( *put_MediaTitle)(ITMedia *This, BSTR pMediaTitle);HRESULT ( *SetPortInfo)(ITMedia *This, USHORT StartPort, USHORT NumPorts);};
struct ICertEncodeSampleStructure1Vtbl {HRESULT ( *QueryInterface)(ICertEncodeSampleStructure1 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeSampleStructure1 *This);ULONG ( *Release)(ICertEncodeSampleStructure1 *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeSampleStructure1 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeSampleStructure1 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeSampleStructure1 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeSampleStructure1 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeSampleStructure1 *This,  BSTR strBinary);HRESULT ( *GetStringField1)(ICertEncodeSampleStructure1 *This, BSTR *pstrString);HRESULT ( *GetStringField2)(ICertEncodeSampleStructure1 *This, BSTR *pstrString);HRESULT ( *GetLongField3)(ICertEncodeSampleStructure1 *This, LONG *pLong);HRESULT ( *GetBinaryField4)(ICertEncodeSampleStructure1 *This, BSTR *pstrBinary);HRESULT ( *GetDateField5)(ICertEncodeSampleStructure1 *This, DATE *pDate);HRESULT ( *Encode)(ICertEncodeSampleStructure1 *This,  BSTR strStringField1,  BSTR strStringField2, LONG LongField3,  BSTR strBinaryField4, DATE DateField5, BSTR *pstrBinary);};
struct ICertEncodeSampleStructure2Vtbl {HRESULT ( *QueryInterface)(ICertEncodeSampleStructure2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeSampleStructure2 *This);ULONG ( *Release)(ICertEncodeSampleStructure2 *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeSampleStructure2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeSampleStructure2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeSampleStructure2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeSampleStructure2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeSampleStructure2 *This,  BSTR strBinary);HRESULT ( *GetLongField1)(ICertEncodeSampleStructure2 *This, LONG *pLong);HRESULT ( *GetStringField2)(ICertEncodeSampleStructure2 *This, BSTR *pstrString);HRESULT ( *GetDateField3)(ICertEncodeSampleStructure2 *This, DATE *pDate);HRESULT ( *Encode)(ICertEncodeSampleStructure2 *This, LONG lField1,  BSTR strStringField2, DATE DateField3, BSTR *pstrBinary);};
struct ISharedPropertyGroupManagerVtbl {HRESULT ( *QueryInterface)(ISharedPropertyGroupManager *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ISharedPropertyGroupManager *This);ULONG ( *Release)(ISharedPropertyGroupManager *This);HRESULT ( *GetTypeInfoCount)(ISharedPropertyGroupManager *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ISharedPropertyGroupManager *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ISharedPropertyGroupManager *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ISharedPropertyGroupManager *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *CreatePropertyGroup)(ISharedPropertyGroupManager *This, BSTR Name, LONG *dwIsoMode, LONG *dwRelMode, VARIANT_BOOL *fExists, ISharedPropertyGroup **ppGroup);HRESULT ( *get_Group)(ISharedPropertyGroupManager *This, BSTR Name, ISharedPropertyGroup **ppGroup);HRESULT ( *get__NewEnum)(ISharedPropertyGroupManager *This, IUnknown **retval);};
struct IHTMLOptionButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLOptionButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionButtonElement *This);ULONG ( *Release)(IHTMLOptionButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_value)(IHTMLOptionButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *get_type)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLOptionButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLOptionButtonElement *This, BSTR *p);HRESULT ( *put_checked)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_checked)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_defaultChecked)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_defaultChecked)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_onchange)(IHTMLOptionButtonElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLOptionButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_status)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_status)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *put_indeterminate)(IHTMLOptionButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_indeterminate)(IHTMLOptionButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLOptionButtonElement *This, IHTMLFormElement **p);};
struct IHTMLInputButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputButtonElement *This);ULONG ( *Release)(IHTMLInputButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputButtonElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputButtonElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputButtonElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLInputButtonElement *This, IHTMLTxtRange **range);};
struct IHTMLInputHiddenElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputHiddenElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputHiddenElement *This);ULONG ( *Release)(IHTMLInputHiddenElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputHiddenElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputHiddenElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputHiddenElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputHiddenElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputHiddenElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputHiddenElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputHiddenElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputHiddenElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputHiddenElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputHiddenElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputHiddenElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputHiddenElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLInputHiddenElement *This, IHTMLTxtRange **range);};
struct IHTMLInputFileElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputFileElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputFileElement *This);ULONG ( *Release)(IHTMLInputFileElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputFileElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputFileElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputFileElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputFileElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputFileElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputFileElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputFileElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputFileElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputFileElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputFileElement *This, IHTMLFormElement **p);HRESULT ( *put_size)(IHTMLInputFileElement *This, int v);HRESULT ( *get_size)(IHTMLInputFileElement *This, int *p);HRESULT ( *put_maxLength)(IHTMLInputFileElement *This, int v);HRESULT ( *get_maxLength)(IHTMLInputFileElement *This, int *p);HRESULT ( *select)(IHTMLInputFileElement *This);HRESULT ( *put_onchange)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLInputFileElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLInputFileElement *This, VARIANT *p);HRESULT ( *put_value)(IHTMLInputFileElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputFileElement *This, BSTR *p);};
struct IHTMLInputTextElementVtbl {HRESULT ( *QueryInterface)(IHTMLInputTextElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputTextElement *This);ULONG ( *Release)(IHTMLInputTextElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputTextElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputTextElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputTextElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputTextElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_value)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_name)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLInputTextElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputTextElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLInputTextElement *This, IHTMLFormElement **p);HRESULT ( *put_defaultValue)(IHTMLInputTextElement *This, BSTR v);HRESULT ( *get_defaultValue)(IHTMLInputTextElement *This, BSTR *p);HRESULT ( *put_size)(IHTMLInputTextElement *This, int v);HRESULT ( *get_size)(IHTMLInputTextElement *This, int *p);HRESULT ( *put_maxLength)(IHTMLInputTextElement *This, int v);HRESULT ( *get_maxLength)(IHTMLInputTextElement *This, int *p);HRESULT ( *select)(IHTMLInputTextElement *This);HRESULT ( *put_onchange)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLInputTextElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLInputTextElement *This, VARIANT *p);HRESULT ( *put_readOnly)(IHTMLInputTextElement *This, VARIANT_BOOL v);HRESULT ( *get_readOnly)(IHTMLInputTextElement *This, VARIANT_BOOL *p);HRESULT ( *createTextRange)(IHTMLInputTextElement *This, IHTMLTxtRange **range);};
struct ClusResTypeResourcesVtbl {HRESULT ( *QueryInterface)(ClusResTypeResources *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResTypeResources *This);ULONG ( *Release)(ClusResTypeResources *This);HRESULT ( *GetTypeInfoCount)(ClusResTypeResources *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResTypeResources *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResTypeResources *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResTypeResources *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResTypeResources *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResTypeResources *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResTypeResources *This);HRESULT ( *get_Item)(ClusResTypeResources *This, VARIANT varIndex, ClusResource **ppClusResource);HRESULT ( *CreateItem)(ClusResTypeResources *This, BSTR bstrResourceName, BSTR bstrGroupName, CLUSTER_RESOURCE_CREATE_FLAGS dwFlags, ClusResource **ppClusterResource);HRESULT ( *DeleteItem)(ClusResTypeResources *This, VARIANT varIndex);};
struct ICertEncodeDateArrayVtbl {HRESULT ( *QueryInterface)(ICertEncodeDateArray *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertEncodeDateArray *This);ULONG ( *Release)(ICertEncodeDateArray *This);HRESULT ( *GetTypeInfoCount)(ICertEncodeDateArray *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertEncodeDateArray *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertEncodeDateArray *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertEncodeDateArray *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *Decode)(ICertEncodeDateArray *This,  BSTR strBinary);HRESULT ( *GetCount)(ICertEncodeDateArray *This, LONG *pCount);HRESULT ( *GetValue)(ICertEncodeDateArray *This, LONG Index, DATE *pValue);HRESULT ( *Reset)(ICertEncodeDateArray *This, LONG Count);HRESULT ( *SetValue)(ICertEncodeDateArray *This, LONG Index, DATE Value);HRESULT ( *Encode)(ICertEncodeDateArray *This, BSTR *pstrBinary);};
struct IHTMLTextAreaElementVtbl {HRESULT ( *QueryInterface)(IHTMLTextAreaElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLTextAreaElement *This);ULONG ( *Release)(IHTMLTextAreaElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLTextAreaElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLTextAreaElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLTextAreaElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLTextAreaElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_value)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_name)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLTextAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLTextAreaElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLTextAreaElement *This, IHTMLFormElement **p);HRESULT ( *put_defaultValue)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_defaultValue)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *select)(IHTMLTextAreaElement *This);HRESULT ( *put_onchange)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_onselect)(IHTMLTextAreaElement *This, VARIANT v);HRESULT ( *get_onselect)(IHTMLTextAreaElement *This, VARIANT *p);HRESULT ( *put_readOnly)(IHTMLTextAreaElement *This, VARIANT_BOOL v);HRESULT ( *get_readOnly)(IHTMLTextAreaElement *This, VARIANT_BOOL *p);HRESULT ( *put_rows)(IHTMLTextAreaElement *This, int v);HRESULT ( *get_rows)(IHTMLTextAreaElement *This, int *p);HRESULT ( *put_cols)(IHTMLTextAreaElement *This, int v);HRESULT ( *get_cols)(IHTMLTextAreaElement *This, int *p);HRESULT ( *put_wrap)(IHTMLTextAreaElement *This, BSTR v);HRESULT ( *get_wrap)(IHTMLTextAreaElement *This, BSTR *p);HRESULT ( *createTextRange)(IHTMLTextAreaElement *This, IHTMLTxtRange **range);};
struct ClusResDependenciesVtbl {HRESULT ( *QueryInterface)(ClusResDependencies *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResDependencies *This);ULONG ( *Release)(ClusResDependencies *This);HRESULT ( *GetTypeInfoCount)(ClusResDependencies *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResDependencies *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResDependencies *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResDependencies *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResDependencies *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResDependencies *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResDependencies *This);HRESULT ( *get_Item)(ClusResDependencies *This, VARIANT varIndex, ClusResource **ppClusResource);HRESULT ( *CreateItem)(ClusResDependencies *This, BSTR bstrResourceName, BSTR bstrResourceType, BSTR bstrGroupName, CLUSTER_RESOURCE_CREATE_FLAGS dwFlags, ClusResource **ppClusterResource);HRESULT ( *DeleteItem)(ClusResDependencies *This, VARIANT varIndex);HRESULT ( *AddItem)(ClusResDependencies *This, ClusResource *pResource);HRESULT ( *RemoveItem)(ClusResDependencies *This, VARIANT varIndex);};
struct ClusGroupResourcesVtbl {HRESULT ( *QueryInterface)(ClusGroupResources *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusGroupResources *This);ULONG ( *Release)(ClusGroupResources *This);HRESULT ( *GetTypeInfoCount)(ClusGroupResources *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusGroupResources *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusGroupResources *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusGroupResources *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusGroupResources *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusGroupResources *This, IUnknown **retval);HRESULT ( *Refresh)(ClusGroupResources *This);HRESULT ( *get_Item)(ClusGroupResources *This, VARIANT varIndex, ClusResource **ppClusResource);HRESULT ( *CreateItem)(ClusGroupResources *This, BSTR bstrResourceName, BSTR bstrResourceType, CLUSTER_RESOURCE_CREATE_FLAGS dwFlags, ClusResource **ppClusterResource);HRESULT ( *DeleteItem)(ClusGroupResources *This, VARIANT varIndex);};
struct ICatalogCollectionVtbl {HRESULT ( *QueryInterface)(ICatalogCollection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICatalogCollection *This);ULONG ( *Release)(ICatalogCollection *This);HRESULT ( *GetTypeInfoCount)(ICatalogCollection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICatalogCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICatalogCollection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICatalogCollection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get__NewEnum)(ICatalogCollection *This, IUnknown **ppEnumVariant);HRESULT ( *get_Item)(ICatalogCollection *This, int lIndex, IDispatch **ppCatalogObject);HRESULT ( *get_Count)(ICatalogCollection *This, int *retval);HRESULT ( *Remove)(ICatalogCollection *This, int lIndex);HRESULT ( *Add)(ICatalogCollection *This, IDispatch **ppCatalogObject);HRESULT ( *Populate)(ICatalogCollection *This);HRESULT ( *SaveChanges)(ICatalogCollection *This, int *retval);HRESULT ( *GetCollection)(ICatalogCollection *This, BSTR bstrCollName, VARIANT varObjectKey, IDispatch **ppCatalogCollection);HRESULT ( *get_Name)(ICatalogCollection *This, VARIANT *retval);HRESULT ( *get_AddEnabled)(ICatalogCollection *This, VARIANT_BOOL *retval);HRESULT ( *get_RemoveEnabled)(ICatalogCollection *This, VARIANT_BOOL *retval);HRESULT ( *GetUtilInterface)(ICatalogCollection *This, IDispatch **ppUtil);HRESULT ( *get_DataStoreMajorVersion)(ICatalogCollection *This, int *retval);HRESULT ( *get_DataStoreMinorVersion)(ICatalogCollection *This, int *retval);HRESULT ( *PopulateByKey)(ICatalogCollection *This, SAFEARRAY *aKeys);HRESULT ( *PopulateByQuery)(ICatalogCollection *This, BSTR bstrQueryString, int lQueryType);};
struct IHTMLButtonElementVtbl {HRESULT ( *QueryInterface)(IHTMLButtonElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLButtonElement *This);ULONG ( *Release)(IHTMLButtonElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLButtonElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLButtonElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLButtonElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLButtonElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLButtonElement *This, BSTR v);HRESULT ( *get_value)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_name)(IHTMLButtonElement *This, BSTR v);HRESULT ( *get_name)(IHTMLButtonElement *This, BSTR *p);HRESULT ( *put_status)(IHTMLButtonElement *This, VARIANT v);HRESULT ( *get_status)(IHTMLButtonElement *This, VARIANT *p);HRESULT ( *put_disabled)(IHTMLButtonElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLButtonElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLButtonElement *This, IHTMLFormElement **p);HRESULT ( *createTextRange)(IHTMLButtonElement *This, IHTMLTxtRange **range);};
struct IHTMLOptionElementVtbl {HRESULT ( *QueryInterface)(IHTMLOptionElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOptionElement *This);ULONG ( *Release)(IHTMLOptionElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOptionElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOptionElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOptionElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOptionElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_selected)(IHTMLOptionElement *This, VARIANT_BOOL v);HRESULT ( *get_selected)(IHTMLOptionElement *This, VARIANT_BOOL *p);HRESULT ( *put_value)(IHTMLOptionElement *This, BSTR v);HRESULT ( *get_value)(IHTMLOptionElement *This, BSTR *p);HRESULT ( *put_defaultSelected)(IHTMLOptionElement *This, VARIANT_BOOL v);HRESULT ( *get_defaultSelected)(IHTMLOptionElement *This, VARIANT_BOOL *p);HRESULT ( *put_index)(IHTMLOptionElement *This, LONG v);HRESULT ( *get_index)(IHTMLOptionElement *This, LONG *p);HRESULT ( *put_text)(IHTMLOptionElement *This, BSTR v);HRESULT ( *get_text)(IHTMLOptionElement *This, BSTR *p);HRESULT ( *get_form)(IHTMLOptionElement *This, IHTMLFormElement **p);};
struct IHTMLScriptElementVtbl {HRESULT ( *QueryInterface)(IHTMLScriptElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLScriptElement *This);ULONG ( *Release)(IHTMLScriptElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLScriptElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLScriptElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLScriptElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLScriptElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_src)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_src)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_htmlFor)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_htmlFor)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_event)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_event)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_text)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_text)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_defer)(IHTMLScriptElement *This, VARIANT_BOOL v);HRESULT ( *get_defer)(IHTMLScriptElement *This, VARIANT_BOOL *p);HRESULT ( *get_readyState)(IHTMLScriptElement *This, BSTR *p);HRESULT ( *put_onerror)(IHTMLScriptElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLScriptElement *This, VARIANT *p);HRESULT ( *put_type)(IHTMLScriptElement *This, BSTR v);HRESULT ( *get_type)(IHTMLScriptElement *This, BSTR *p);};
struct IHTMLSelectElementVtbl {HRESULT ( *QueryInterface)(IHTMLSelectElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLSelectElement *This);ULONG ( *Release)(IHTMLSelectElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLSelectElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLSelectElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLSelectElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLSelectElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_size)(IHTMLSelectElement *This, int v);HRESULT ( *get_size)(IHTMLSelectElement *This, int *p);HRESULT ( *put_multiple)(IHTMLSelectElement *This, VARIANT_BOOL v);HRESULT ( *get_multiple)(IHTMLSelectElement *This, VARIANT_BOOL *p);HRESULT ( *put_name)(IHTMLSelectElement *This, BSTR v);HRESULT ( *get_name)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *get_options)(IHTMLSelectElement *This, IDispatch **p);HRESULT ( *put_onchange)(IHTMLSelectElement *This, VARIANT v);HRESULT ( *get_onchange)(IHTMLSelectElement *This, VARIANT *p);HRESULT ( *put_selectedIndex)(IHTMLSelectElement *This, int v);HRESULT ( *get_selectedIndex)(IHTMLSelectElement *This, int *p);HRESULT ( *get_type)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *put_value)(IHTMLSelectElement *This, BSTR v);HRESULT ( *get_value)(IHTMLSelectElement *This, BSTR *p);HRESULT ( *put_disabled)(IHTMLSelectElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLSelectElement *This, VARIANT_BOOL *p);HRESULT ( *get_form)(IHTMLSelectElement *This, IHTMLFormElement **p);HRESULT ( *add)(IHTMLSelectElement *This, IHTMLElement *element, VARIANT before);HRESULT ( *remove)(IHTMLSelectElement *This, int index);HRESULT ( *put_length)(IHTMLSelectElement *This, int v);HRESULT ( *get_length)(IHTMLSelectElement *This, int *p);HRESULT ( *get__newEnum)(IHTMLSelectElement *This, IUnknown **p);HRESULT ( *item)(IHTMLSelectElement *This, VARIANT name, VARIANT index, IDispatch **pdisp);HRESULT ( *tags)(IHTMLSelectElement *This, VARIANT tagName, IDispatch **pdisp);};
struct ITBasicCallControlVtbl {HRESULT ( *QueryInterface)(ITBasicCallControl *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITBasicCallControl *This);ULONG ( *Release)(ITBasicCallControl *This);HRESULT ( *GetTypeInfoCount)(ITBasicCallControl *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITBasicCallControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITBasicCallControl *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITBasicCallControl *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *SelectMediaTerminals)(ITBasicCallControl *This, VARIANT MediaTerminals);HRESULT ( *UnselectMediaTerminal)(ITBasicCallControl *This, ITMediaTerminal *pMediaTerminal);HRESULT ( *Connect)(ITBasicCallControl *This, VARIANT_BOOL fSync);HRESULT ( *Answer)(ITBasicCallControl *This);HRESULT ( *Disconnect)(ITBasicCallControl *This, DISCONNECT_CODE code);HRESULT ( *Hold)(ITBasicCallControl *This, VARIANT_BOOL fHold);HRESULT ( *Handoff)(ITBasicCallControl *This, BSTR pApplicationName, BSTR pMediaType);HRESULT ( *AddToConference)(ITBasicCallControl *This, BSTR pDestAddress, VARIANT_BOOL fSync, ITConsultCall **ppConsultCall);HRESULT ( *SetupTransfer)(ITBasicCallControl *This, BSTR pDestAddress, VARIANT_BOOL fSync, ITConsultCall **ppConsultCall);HRESULT ( *GetDirectShowFilterGraph)(ITBasicCallControl *This, IDispatch **ppDirectShowFilter);};
struct IAgentCtlCommandsVtbl {HRESULT ( *QueryInterface)(IAgentCtlCommands *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlCommands *This);ULONG ( *Release)(IAgentCtlCommands *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlCommands *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlCommands *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlCommands *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlCommands *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(IAgentCtlCommands *This, BSTR Name, IAgentCtlCommand **Item);HRESULT ( *Command)(IAgentCtlCommands *This, BSTR Name, IAgentCtlCommand **Item);HRESULT ( *get_Count)(IAgentCtlCommands *This, int *Count);HRESULT ( *get_Caption)(IAgentCtlCommands *This, BSTR *Caption);HRESULT ( *put_Caption)(IAgentCtlCommands *This, BSTR Caption);HRESULT ( *get_Voice)(IAgentCtlCommands *This, BSTR *Voice);HRESULT ( *put_Voice)(IAgentCtlCommands *This, BSTR Voice);HRESULT ( *get_Visible)(IAgentCtlCommands *This, VARIANT_BOOL *Visible);HRESULT ( *put_Visible)(IAgentCtlCommands *This, VARIANT_BOOL Visible);HRESULT ( *get_Enum)(IAgentCtlCommands *This, IUnknown **ppunkEnum);HRESULT ( *Add)(IAgentCtlCommands *This, BSTR Name, VARIANT Caption, VARIANT Voice, VARIANT Enabled, VARIANT Visible, IAgentCtlCommand **Command);HRESULT ( *Insert)(IAgentCtlCommands *This, BSTR Name, BSTR RefName, VARIANT Before, VARIANT Caption, VARIANT Voice, VARIANT Enabled, VARIANT Visible, IAgentCtlCommand **Command);HRESULT ( *Remove)(IAgentCtlCommands *This, BSTR Name);HRESULT ( *RemoveAll)(IAgentCtlCommands *This);};
struct IHTMLOListElementVtbl {HRESULT ( *QueryInterface)(IHTMLOListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLOListElement *This);ULONG ( *Release)(IHTMLOListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLOListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLOListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLOListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLOListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLOListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLOListElement *This, VARIANT_BOOL *p);HRESULT ( *put_start)(IHTMLOListElement *This, int v);HRESULT ( *get_start)(IHTMLOListElement *This, int *p);HRESULT ( *put_type)(IHTMLOListElement *This, BSTR v);HRESULT ( *get_type)(IHTMLOListElement *This, BSTR *p);};
struct IHTMLStyleElementVtbl {HRESULT ( *QueryInterface)(IHTMLStyleElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleElement *This);ULONG ( *Release)(IHTMLStyleElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_type)(IHTMLStyleElement *This, BSTR v);HRESULT ( *get_type)(IHTMLStyleElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLStyleElement *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLStyleElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLStyleElement *This, VARIANT *p);HRESULT ( *get_styleSheet)(IHTMLStyleElement *This, IHTMLStyleSheet **p);HRESULT ( *put_disabled)(IHTMLStyleElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLStyleElement *This, VARIANT_BOOL *p);HRESULT ( *put_media)(IHTMLStyleElement *This, BSTR v);HRESULT ( *get_media)(IHTMLStyleElement *This, BSTR *p);};
struct IHTMLUListElementVtbl {HRESULT ( *QueryInterface)(IHTMLUListElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLUListElement *This);ULONG ( *Release)(IHTMLUListElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLUListElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLUListElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLUListElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLUListElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_compact)(IHTMLUListElement *This, VARIANT_BOOL v);HRESULT ( *get_compact)(IHTMLUListElement *This, VARIANT_BOOL *p);HRESULT ( *put_type)(IHTMLUListElement *This, BSTR v);HRESULT ( *get_type)(IHTMLUListElement *This, BSTR *p);};
struct ClusNetInterfaceVtbl {HRESULT ( *QueryInterface)(ClusNetInterface *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNetInterface *This);ULONG ( *Release)(ClusNetInterface *This);HRESULT ( *GetTypeInfoCount)(ClusNetInterface *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNetInterface *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNetInterface *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNetInterface *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusNetInterface *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusNetInterface *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusNetInterface *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusNetInterface *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusNetInterface *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ClusNetInterface *This, LONG *phandle);HRESULT ( *get_State)(ClusNetInterface *This, CLUSTER_NETINTERFACE_STATE *dwState);HRESULT ( *get_Cluster)(ClusNetInterface *This, ICluster **ppCluster);};
struct IHTMLLinkElementVtbl {HRESULT ( *QueryInterface)(IHTMLLinkElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLLinkElement *This);ULONG ( *Release)(IHTMLLinkElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLLinkElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLLinkElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLLinkElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLLinkElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_href)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_href)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_rel)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_rel)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_rev)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_rev)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_type)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_type)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLLinkElement *This, BSTR *p);HRESULT ( *put_onreadystatechange)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onload)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLLinkElement *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLLinkElement *This, VARIANT *p);HRESULT ( *get_styleSheet)(IHTMLLinkElement *This, IHTMLStyleSheet **p);HRESULT ( *put_disabled)(IHTMLLinkElement *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLLinkElement *This, VARIANT_BOOL *p);HRESULT ( *put_media)(IHTMLLinkElement *This, BSTR v);HRESULT ( *get_media)(IHTMLLinkElement *This, BSTR *p);};
struct IHTMLInputImageVtbl {HRESULT ( *QueryInterface)(IHTMLInputImage *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLInputImage *This);ULONG ( *Release)(IHTMLInputImage *This);HRESULT ( *GetTypeInfoCount)(IHTMLInputImage *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLInputImage *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLInputImage *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLInputImage *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_type)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_disabled)(IHTMLInputImage *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLInputImage *This, VARIANT_BOOL *p);HRESULT ( *put_border)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_border)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_vspace)(IHTMLInputImage *This, int v);HRESULT ( *get_vspace)(IHTMLInputImage *This, int *p);HRESULT ( *put_hspace)(IHTMLInputImage *This, int v);HRESULT ( *get_hspace)(IHTMLInputImage *This, int *p);HRESULT ( *put_alt)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_alt)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_src)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_src)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_lowsrc)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_lowsrc)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_vrml)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_vrml)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_dynsrc)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_dynsrc)(IHTMLInputImage *This, BSTR *p);HRESULT ( *get_readyState)(IHTMLInputImage *This, BSTR *p);HRESULT ( *get_complete)(IHTMLInputImage *This, VARIANT_BOOL *p);HRESULT ( *put_loop)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_loop)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_align)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_align)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_onload)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onload)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_onabort)(IHTMLInputImage *This, VARIANT v);HRESULT ( *get_onabort)(IHTMLInputImage *This, VARIANT *p);HRESULT ( *put_name)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_name)(IHTMLInputImage *This, BSTR *p);HRESULT ( *put_width)(IHTMLInputImage *This, int v);HRESULT ( *get_width)(IHTMLInputImage *This, int *p);HRESULT ( *put_height)(IHTMLInputImage *This, int v);HRESULT ( *get_height)(IHTMLInputImage *This, int *p);HRESULT ( *put_start)(IHTMLInputImage *This, BSTR v);HRESULT ( *get_start)(IHTMLInputImage *This, BSTR *p);};
struct IHTMLStyleSheetVtbl {HRESULT ( *QueryInterface)(IHTMLStyleSheet *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyleSheet *This);ULONG ( *Release)(IHTMLStyleSheet *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyleSheet *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyleSheet *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyleSheet *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyleSheet *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_title)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_title)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_parentStyleSheet)(IHTMLStyleSheet *This, IHTMLStyleSheet **p);HRESULT ( *get_owningElement)(IHTMLStyleSheet *This, IHTMLElement **p);HRESULT ( *put_disabled)(IHTMLStyleSheet *This, VARIANT_BOOL v);HRESULT ( *get_disabled)(IHTMLStyleSheet *This, VARIANT_BOOL *p);HRESULT ( *get_readOnly)(IHTMLStyleSheet *This, VARIANT_BOOL *p);HRESULT ( *get_imports)(IHTMLStyleSheet *This, IHTMLStyleSheetsCollection **p);HRESULT ( *put_href)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_href)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_type)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_id)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *addImport)(IHTMLStyleSheet *This, BSTR bstrURL, int lIndex, int *plIndex);HRESULT ( *addRule)(IHTMLStyleSheet *This, BSTR bstrSelector, BSTR bstrStyle, int lIndex, int *plNewIndex);HRESULT ( *removeImport)(IHTMLStyleSheet *This, int lIndex);HRESULT ( *removeRule)(IHTMLStyleSheet *This, int lIndex);HRESULT ( *put_media)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_media)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLStyleSheet *This, BSTR v);HRESULT ( *get_cssText)(IHTMLStyleSheet *This, BSTR *p);HRESULT ( *get_rules)(IHTMLStyleSheet *This, IHTMLStyleSheetRulesCollection **p);};
struct IHTMLDocument2Vtbl {HRESULT ( *QueryInterface)(IHTMLDocument2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLDocument2 *This);ULONG ( *Release)(IHTMLDocument2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLDocument2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLDocument2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLDocument2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Script)(IHTMLDocument2 *This, IDispatch **p);HRESULT ( *get_all)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_body)(IHTMLDocument2 *This, IHTMLElement **p);HRESULT ( *get_activeElement)(IHTMLDocument2 *This, IHTMLElement **p);HRESULT ( *get_images)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_applets)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_links)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_forms)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_anchors)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_title)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_title)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_scripts)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_designMode)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_designMode)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_selection)(IHTMLDocument2 *This, IHTMLSelectionObject **p);HRESULT ( *get_readyState)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_frames)(IHTMLDocument2 *This, IHTMLFramesCollection2 **p);HRESULT ( *get_embeds)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *get_plugins)(IHTMLDocument2 *This, IHTMLElementCollection **p);HRESULT ( *put_alinkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_alinkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_bgColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_bgColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_fgColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_fgColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_linkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_linkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_vlinkColor)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_vlinkColor)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *get_referrer)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_location)(IHTMLDocument2 *This, IHTMLLocation **p);HRESULT ( *get_lastModified)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_URL)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_URL)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_domain)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_domain)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_cookie)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_cookie)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_expando)(IHTMLDocument2 *This, VARIANT_BOOL v);HRESULT ( *get_expando)(IHTMLDocument2 *This, VARIANT_BOOL *p);HRESULT ( *put_charset)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_charset)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *put_defaultCharset)(IHTMLDocument2 *This, BSTR v);HRESULT ( *get_defaultCharset)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_mimeType)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileSize)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileCreatedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileModifiedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_fileUpdatedDate)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_security)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_protocol)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *get_nameProp)(IHTMLDocument2 *This, BSTR *p);HRESULT ( *write)(IHTMLDocument2 *This, SAFEARRAY *psarray);HRESULT ( *writeln)(IHTMLDocument2 *This, SAFEARRAY *psarray);HRESULT ( *open)(IHTMLDocument2 *This, BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch **pomWindowResult);HRESULT ( *close)(IHTMLDocument2 *This);HRESULT ( *clear)(IHTMLDocument2 *This);HRESULT ( *queryCommandSupported)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandEnabled)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandState)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandIndeterm)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *queryCommandText)(IHTMLDocument2 *This, BSTR cmdID, BSTR *pcmdText);HRESULT ( *queryCommandValue)(IHTMLDocument2 *This, BSTR cmdID, VARIANT *pcmdValue);HRESULT ( *execCommand)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet);HRESULT ( *execCommandShowHelp)(IHTMLDocument2 *This, BSTR cmdID, VARIANT_BOOL *pfRet);HRESULT ( *createElement)(IHTMLDocument2 *This, BSTR eTag, IHTMLElement **newElem);HRESULT ( *put_onhelp)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onclick)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onclick)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_ondblclick)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_ondblclick)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeyup)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeyup)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeydown)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeydown)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onkeypress)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onkeypress)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseup)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseup)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmousedown)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmousedown)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmousemove)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmousemove)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseout)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseout)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onmouseover)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onmouseover)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onreadystatechange)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onreadystatechange)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onafterupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onafterupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onrowexit)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onrowexit)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onrowenter)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onrowenter)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_ondragstart)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_ondragstart)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onselectstart)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onselectstart)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *elementFromPoint)(IHTMLDocument2 *This, int x, int y, IHTMLElement **elementHit);HRESULT ( *get_parentWindow)(IHTMLDocument2 *This, IHTMLWindow2 **p);HRESULT ( *get_styleSheets)(IHTMLDocument2 *This, IHTMLStyleSheetsCollection **p);HRESULT ( *put_onbeforeupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onbeforeupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *put_onerrorupdate)(IHTMLDocument2 *This, VARIANT v);HRESULT ( *get_onerrorupdate)(IHTMLDocument2 *This, VARIANT *p);HRESULT ( *toString)(IHTMLDocument2 *This, BSTR *String);HRESULT ( *createStyleSheet)(IHTMLDocument2 *This, BSTR bstrHref, int lIndex, IHTMLStyleSheet **ppnewStyleSheet);};
struct IHTMLRuleStyleVtbl {HRESULT ( *QueryInterface)(IHTMLRuleStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLRuleStyle *This);ULONG ( *Release)(IHTMLRuleStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLRuleStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLRuleStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLRuleStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLRuleStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontFamily)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontFamily)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontVariant)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontVariant)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontWeight)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_fontWeight)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_fontSize)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_fontSize)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_font)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_font)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_color)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_color)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_background)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_background)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_backgroundImage)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundImage)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundRepeat)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundRepeat)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundAttachment)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundAttachment)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundPosition)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_backgroundPosition)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_backgroundPositionX)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionX)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_backgroundPositionY)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionY)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_wordSpacing)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_wordSpacing)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_letterSpacing)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_letterSpacing)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_textDecoration)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textDecoration)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textDecorationNone)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationNone)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationUnderline)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationUnderline)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationOverline)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationOverline)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationLineThrough)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationLineThrough)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationBlink)(IHTMLRuleStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationBlink)(IHTMLRuleStyle *This, VARIANT_BOOL *p);HRESULT ( *put_verticalAlign)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_verticalAlign)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_textTransform)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textTransform)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textAlign)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_textAlign)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_textIndent)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_textIndent)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_lineHeight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_lineHeight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginTop)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginTop)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginRight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginRight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginBottom)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginBottom)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_marginLeft)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_marginLeft)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_margin)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_margin)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_paddingTop)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingTop)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingRight)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingRight)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingBottom)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingBottom)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_paddingLeft)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_paddingLeft)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_padding)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_padding)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_border)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_border)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTop)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderTop)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderRight)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderRight)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderBottom)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderBottom)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderLeft)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderLeft)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderColor)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderTopColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderRightColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderRightColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderBottomColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderBottomColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderLeftColor)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderLeftColor)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderWidth)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderWidth)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderTopWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderRightWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderRightWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderBottomWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderBottomWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderLeftWidth)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_borderLeftWidth)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_borderStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderTopStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderTopStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderRightStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderRightStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderBottomStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderBottomStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_borderLeftStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_borderLeftStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_width)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_width)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_height)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_height)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_styleFloat)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_styleFloat)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_clear)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_clear)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_display)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_display)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_visibility)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_visibility)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyleType)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyleType)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStylePosition)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStylePosition)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyleImage)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyleImage)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_listStyle)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_listStyle)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_whiteSpace)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_whiteSpace)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_top)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_top)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_left)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_left)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *get_position)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_zIndex)(IHTMLRuleStyle *This, VARIANT v);HRESULT ( *get_zIndex)(IHTMLRuleStyle *This, VARIANT *p);HRESULT ( *put_overflow)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_overflow)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_pageBreakBefore)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_pageBreakBefore)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_pageBreakAfter)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_pageBreakAfter)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_cssText)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_cursor)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_cursor)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_clip)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_clip)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *put_filter)(IHTMLRuleStyle *This, BSTR v);HRESULT ( *get_filter)(IHTMLRuleStyle *This, BSTR *p);HRESULT ( *setAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLRuleStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);};
struct ClusResourcesVtbl {HRESULT ( *QueryInterface)(ClusResources *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResources *This);ULONG ( *Release)(ClusResources *This);HRESULT ( *GetTypeInfoCount)(ClusResources *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResources *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResources *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResources *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ClusResources *This, LONG *pnCount);HRESULT ( *get__NewEnum)(ClusResources *This, IUnknown **retval);HRESULT ( *Refresh)(ClusResources *This);HRESULT ( *get_Item)(ClusResources *This, VARIANT varIndex, ClusResource **ppClusResource);HRESULT ( *CreateItem)(ClusResources *This, BSTR bstrResourceName, BSTR bstrResourceType, BSTR bstrGroupName, CLUSTER_RESOURCE_CREATE_FLAGS dwFlags, ClusResource **ppClusterResource);HRESULT ( *DeleteItem)(ClusResources *This, VARIANT varIndex);};
struct IHTMLEventObjVtbl {HRESULT ( *QueryInterface)(IHTMLEventObj *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLEventObj *This);ULONG ( *Release)(IHTMLEventObj *This);HRESULT ( *GetTypeInfoCount)(IHTMLEventObj *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLEventObj *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLEventObj *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLEventObj *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_srcElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *get_altKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_ctrlKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_shiftKey)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *put_returnValue)(IHTMLEventObj *This, VARIANT v);HRESULT ( *get_returnValue)(IHTMLEventObj *This, VARIANT *p);HRESULT ( *put_cancelBubble)(IHTMLEventObj *This, VARIANT_BOOL v);HRESULT ( *get_cancelBubble)(IHTMLEventObj *This, VARIANT_BOOL *p);HRESULT ( *get_fromElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *get_toElement)(IHTMLEventObj *This, IHTMLElement **p);HRESULT ( *put_keyCode)(IHTMLEventObj *This, int v);HRESULT ( *get_keyCode)(IHTMLEventObj *This, int *p);HRESULT ( *get_button)(IHTMLEventObj *This, int *p);HRESULT ( *get_type)(IHTMLEventObj *This, BSTR *p);HRESULT ( *get_qualifier)(IHTMLEventObj *This, BSTR *p);HRESULT ( *get_reason)(IHTMLEventObj *This, int *p);HRESULT ( *get_x)(IHTMLEventObj *This, int *p);HRESULT ( *get_y)(IHTMLEventObj *This, int *p);HRESULT ( *get_clientX)(IHTMLEventObj *This, int *p);HRESULT ( *get_clientY)(IHTMLEventObj *This, int *p);HRESULT ( *get_offsetX)(IHTMLEventObj *This, int *p);HRESULT ( *get_offsetY)(IHTMLEventObj *This, int *p);HRESULT ( *get_screenX)(IHTMLEventObj *This, int *p);HRESULT ( *get_screenY)(IHTMLEventObj *This, int *p);HRESULT ( *get_srcFilter)(IHTMLEventObj *This, IDispatch **p);};
struct ClusResGroupVtbl {HRESULT ( *QueryInterface)(ClusResGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResGroup *This);ULONG ( *Release)(ClusResGroup *This);HRESULT ( *GetTypeInfoCount)(ClusResGroup *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResGroup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResGroup *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResGroup *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusResGroup *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusResGroup *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusResGroup *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusResGroup *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusResGroup *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ClusResGroup *This, LONG *phandle);HRESULT ( *put_Name)(ClusResGroup *This, BSTR bstrGroupName);HRESULT ( *get_State)(ClusResGroup *This, CLUSTER_GROUP_STATE *dwState);HRESULT ( *get_OwnerNode)(ClusResGroup *This, ClusNode **ppOwnerNode);HRESULT ( *get_Resources)(ClusResGroup *This, ClusGroupResources **ppClusterGroupResources);HRESULT ( *get_PreferredOwnerNodes)(ClusResGroup *This, ClusGroupOwners **ppOwnerNodes);HRESULT ( *SetPreferredOwnerNodes)(ClusResGroup *This);HRESULT ( *Delete)(ClusResGroup *This);HRESULT ( *Online)(ClusResGroup *This, LONG nTimeout, ClusNode *pDestinationNode, LONG *bPending);HRESULT ( *Move)(ClusResGroup *This, LONG nTimeout, ClusNode *pDestinationNode, LONG *bPending);HRESULT ( *Offline)(ClusResGroup *This, LONG nTimeout, LONG *bPending);HRESULT ( *get_Cluster)(ClusResGroup *This, ICluster **ppCluster);};
struct IHTMLElementVtbl {HRESULT ( *QueryInterface)(IHTMLElement *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLElement *This);ULONG ( *Release)(IHTMLElement *This);HRESULT ( *GetTypeInfoCount)(IHTMLElement *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLElement *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLElement *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *setAttribute)(IHTMLElement *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLElement *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLElement *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);HRESULT ( *put_className)(IHTMLElement *This, BSTR v);HRESULT ( *get_className)(IHTMLElement *This, BSTR *p);HRESULT ( *put_id)(IHTMLElement *This, BSTR v);HRESULT ( *get_id)(IHTMLElement *This, BSTR *p);HRESULT ( *get_tagName)(IHTMLElement *This, BSTR *p);HRESULT ( *get_parentElement)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *get_style)(IHTMLElement *This, IHTMLStyle **p);HRESULT ( *put_onhelp)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onclick)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onclick)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondblclick)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondblclick)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeydown)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeydown)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeyup)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeyup)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onkeypress)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onkeypress)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseout)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseout)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseover)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseover)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmousemove)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmousemove)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmousedown)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmousedown)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onmouseup)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onmouseup)(IHTMLElement *This, VARIANT *p);HRESULT ( *get_document)(IHTMLElement *This, IDispatch **p);HRESULT ( *put_title)(IHTMLElement *This, BSTR v);HRESULT ( *get_title)(IHTMLElement *This, BSTR *p);HRESULT ( *put_language)(IHTMLElement *This, BSTR v);HRESULT ( *get_language)(IHTMLElement *This, BSTR *p);HRESULT ( *put_onselectstart)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onselectstart)(IHTMLElement *This, VARIANT *p);HRESULT ( *scrollIntoView)(IHTMLElement *This, VARIANT varargStart);HRESULT ( *contains)(IHTMLElement *This, IHTMLElement *pChild, VARIANT_BOOL *pfResult);HRESULT ( *get_sourceIndex)(IHTMLElement *This, int *p);HRESULT ( *get_recordNumber)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_lang)(IHTMLElement *This, BSTR v);HRESULT ( *get_lang)(IHTMLElement *This, BSTR *p);HRESULT ( *get_offsetLeft)(IHTMLElement *This, int *p);HRESULT ( *get_offsetTop)(IHTMLElement *This, int *p);HRESULT ( *get_offsetWidth)(IHTMLElement *This, int *p);HRESULT ( *get_offsetHeight)(IHTMLElement *This, int *p);HRESULT ( *get_offsetParent)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *put_innerHTML)(IHTMLElement *This, BSTR v);HRESULT ( *get_innerHTML)(IHTMLElement *This, BSTR *p);HRESULT ( *put_innerText)(IHTMLElement *This, BSTR v);HRESULT ( *get_innerText)(IHTMLElement *This, BSTR *p);HRESULT ( *put_outerHTML)(IHTMLElement *This, BSTR v);HRESULT ( *get_outerHTML)(IHTMLElement *This, BSTR *p);HRESULT ( *put_outerText)(IHTMLElement *This, BSTR v);HRESULT ( *get_outerText)(IHTMLElement *This, BSTR *p);HRESULT ( *insertAdjacentHTML)(IHTMLElement *This, BSTR where, BSTR html);HRESULT ( *insertAdjacentText)(IHTMLElement *This, BSTR where, BSTR text);HRESULT ( *get_parentTextEdit)(IHTMLElement *This, IHTMLElement **p);HRESULT ( *get_isTextEdit)(IHTMLElement *This, VARIANT_BOOL *p);HRESULT ( *click)(IHTMLElement *This);HRESULT ( *get_filters)(IHTMLElement *This, IHTMLFiltersCollection **p);HRESULT ( *put_ondragstart)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondragstart)(IHTMLElement *This, VARIANT *p);HRESULT ( *toString)(IHTMLElement *This, BSTR *String);HRESULT ( *put_onbeforeupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onbeforeupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onafterupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onafterupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onerrorupdate)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onerrorupdate)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onrowexit)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onrowexit)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onrowenter)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onrowenter)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondatasetchanged)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondatasetchanged)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondataavailable)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondataavailable)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_ondatasetcomplete)(IHTMLElement *This, VARIANT v);HRESULT ( *get_ondatasetcomplete)(IHTMLElement *This, VARIANT *p);HRESULT ( *put_onfilterchange)(IHTMLElement *This, VARIANT v);HRESULT ( *get_onfilterchange)(IHTMLElement *This, VARIANT *p);HRESULT ( *get_children)(IHTMLElement *This, IDispatch **p);HRESULT ( *get_all)(IHTMLElement *This, IDispatch **p);};
struct ITConnectionVtbl {HRESULT ( *QueryInterface)(ITConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITConnection *This);ULONG ( *Release)(ITConnection *This);HRESULT ( *GetTypeInfoCount)(ITConnection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITConnection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITConnection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITConnection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_NetworkType)(ITConnection *This, BSTR *ppNetworkType);HRESULT ( *put_NetworkType)(ITConnection *This, BSTR pNetworkType);HRESULT ( *get_AddressType)(ITConnection *This, BSTR *ppAddressType);HRESULT ( *put_AddressType)(ITConnection *This, BSTR pAddressType);HRESULT ( *get_StartAddress)(ITConnection *This, BSTR *ppStartAddress);HRESULT ( *get_NumAddresses)(ITConnection *This, ULONG *pNumAddresses);HRESULT ( *get_Ttl)(ITConnection *This, BYTE *pTtl);HRESULT ( *get_BandwidthModifier)(ITConnection *This, BSTR *ppModifier);HRESULT ( *get_Bandwidth)(ITConnection *This, ULONG *pBandwidth);HRESULT ( *SetAddressInfo)(ITConnection *This, BSTR pStartAddress, ULONG NumAddresses, BYTE Ttl);HRESULT ( *SetBandwidthInfo)(ITConnection *This, BSTR pModifier, ULONG Bandwidth);HRESULT ( *SetEncryptionKey)(ITConnection *This, BSTR pKeyType, BSTR *ppKeyData);HRESULT ( *GetEncryptionKey)(ITConnection *This, BSTR *ppKeyType, VARIANT_BOOL *pfValidKeyData, BSTR *ppKeyData);};
struct IWriteCookieVtbl {HRESULT ( *QueryInterface)(IWriteCookie *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWriteCookie *This);ULONG ( *Release)(IWriteCookie *This);HRESULT ( *GetTypeInfoCount)(IWriteCookie *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWriteCookie *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWriteCookie *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWriteCookie *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_Item)(IWriteCookie *This, VARIANT key, BSTR bstrValue);HRESULT ( *put_Expires)(IWriteCookie *This, DATE dtExpires);HRESULT ( *put_Domain)(IWriteCookie *This, BSTR bstrDomain);HRESULT ( *put_Path)(IWriteCookie *This, BSTR bstrPath);HRESULT ( *put_Secure)(IWriteCookie *This, VARIANT_BOOL fSecure);HRESULT ( *get_HasKeys)(IWriteCookie *This, VARIANT_BOOL *pfHasKeys);HRESULT ( *get__NewEnum)(IWriteCookie *This, IUnknown **ppEnumReturn);};
struct ClusNetworkVtbl {HRESULT ( *QueryInterface)(ClusNetwork *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNetwork *This);ULONG ( *Release)(ClusNetwork *This);HRESULT ( *GetTypeInfoCount)(ClusNetwork *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNetwork *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNetwork *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNetwork *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusNetwork *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusNetwork *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusNetwork *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusNetwork *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusNetwork *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ClusNetwork *This, LONG *phandle);HRESULT ( *put_Name)(ClusNetwork *This, BSTR bstrNetworkName);HRESULT ( *get_NetworkID)(ClusNetwork *This, BSTR *pbstrNetworkID);HRESULT ( *get_State)(ClusNetwork *This, CLUSTER_NETWORK_STATE *dwState);HRESULT ( *get_NetInterfaces)(ClusNetwork *This, ClusNetworkNetInterfaces **ppClusNetInterfaces);HRESULT ( *get_Cluster)(ClusNetwork *This, ICluster **ppCluster);};
struct IWebBrowserVtbl {HRESULT ( *QueryInterface)(IWebBrowser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser *This);ULONG ( *Release)(IWebBrowser *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser *This);HRESULT ( *GoForward)(IWebBrowser *This);HRESULT ( *GoHome)(IWebBrowser *This);HRESULT ( *GoSearch)(IWebBrowser *This);HRESULT ( *Navigate)(IWebBrowser *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser *This);HRESULT ( *Refresh2)(IWebBrowser *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser *This);HRESULT ( *get_Application)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser *This, int *pl);HRESULT ( *put_Left)(IWebBrowser *This, int Left);HRESULT ( *get_Top)(IWebBrowser *This, int *pl);HRESULT ( *put_Top)(IWebBrowser *This, int Top);HRESULT ( *get_Width)(IWebBrowser *This, int *pl);HRESULT ( *put_Width)(IWebBrowser *This, int Width);HRESULT ( *get_Height)(IWebBrowser *This, int *pl);HRESULT ( *put_Height)(IWebBrowser *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser *This, VARIANT_BOOL *pBool);};
struct ICertAdminVtbl {HRESULT ( *QueryInterface)(ICertAdmin *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICertAdmin *This);ULONG ( *Release)(ICertAdmin *This);HRESULT ( *GetTypeInfoCount)(ICertAdmin *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICertAdmin *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICertAdmin *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICertAdmin *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *IsValidCertificate)(ICertAdmin *This,  BSTR strConfig,  BSTR strSerialNumber, LONG *pDisposition);HRESULT ( *GetRevocationReason)(ICertAdmin *This, LONG *pReason);HRESULT ( *RevokeCertificate)(ICertAdmin *This,  BSTR strConfig,  BSTR strSerialNumber, LONG Reason, DATE Date);HRESULT ( *SetRequestAttributes)(ICertAdmin *This,  BSTR strConfig, LONG RequestId,  BSTR strAttributes);HRESULT ( *SetCertificateExtension)(ICertAdmin *This,  BSTR strConfig, LONG RequestId,  BSTR strExtensionName, LONG Type, LONG Flags,  VARIANT *pvarValue);HRESULT ( *DenyRequest)(ICertAdmin *This,  BSTR strConfig, LONG RequestId);HRESULT ( *ResubmitRequest)(ICertAdmin *This,  BSTR strConfig, LONG RequestId, LONG *pDisposition);HRESULT ( *PublishCRL)(ICertAdmin *This,  BSTR strConfig, DATE Date);HRESULT ( *GetCRL)(ICertAdmin *This,  BSTR strConfig, LONG Flags, BSTR *pstrCRL);};
struct IHTMLStyleVtbl {HRESULT ( *QueryInterface)(IHTMLStyle *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLStyle *This);ULONG ( *Release)(IHTMLStyle *This);HRESULT ( *GetTypeInfoCount)(IHTMLStyle *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLStyle *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLStyle *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLStyle *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *put_fontFamily)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontFamily)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontVariant)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontVariant)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontWeight)(IHTMLStyle *This, BSTR v);HRESULT ( *get_fontWeight)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_fontSize)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_fontSize)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_font)(IHTMLStyle *This, BSTR v);HRESULT ( *get_font)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_color)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_color)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_background)(IHTMLStyle *This, BSTR v);HRESULT ( *get_background)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_backgroundImage)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundImage)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundRepeat)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundRepeat)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundAttachment)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundAttachment)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundPosition)(IHTMLStyle *This, BSTR v);HRESULT ( *get_backgroundPosition)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_backgroundPositionX)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionX)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_backgroundPositionY)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_backgroundPositionY)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_wordSpacing)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_wordSpacing)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_letterSpacing)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_letterSpacing)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_textDecoration)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textDecoration)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textDecorationNone)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationNone)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationUnderline)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationUnderline)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationOverline)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationOverline)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationLineThrough)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationLineThrough)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_textDecorationBlink)(IHTMLStyle *This, VARIANT_BOOL v);HRESULT ( *get_textDecorationBlink)(IHTMLStyle *This, VARIANT_BOOL *p);HRESULT ( *put_verticalAlign)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_verticalAlign)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_textTransform)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textTransform)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textAlign)(IHTMLStyle *This, BSTR v);HRESULT ( *get_textAlign)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_textIndent)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_textIndent)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_lineHeight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_lineHeight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginTop)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginTop)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginRight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginRight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginBottom)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginBottom)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_marginLeft)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_marginLeft)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_margin)(IHTMLStyle *This, BSTR v);HRESULT ( *get_margin)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_paddingTop)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingTop)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingRight)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingRight)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingBottom)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingBottom)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_paddingLeft)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_paddingLeft)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_padding)(IHTMLStyle *This, BSTR v);HRESULT ( *get_padding)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_border)(IHTMLStyle *This, BSTR v);HRESULT ( *get_border)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTop)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderTop)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderRight)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderRight)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderBottom)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderBottom)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderLeft)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderLeft)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderColor)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderColor)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderTopColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderRightColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderRightColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderBottomColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderBottomColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderLeftColor)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderLeftColor)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderWidth)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderWidth)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderTopWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderRightWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderRightWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderBottomWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderBottomWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderLeftWidth)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_borderLeftWidth)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_borderStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderTopStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderTopStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderRightStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderRightStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderBottomStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderBottomStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_borderLeftStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_borderLeftStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_width)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_width)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_height)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_height)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_styleFloat)(IHTMLStyle *This, BSTR v);HRESULT ( *get_styleFloat)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_clear)(IHTMLStyle *This, BSTR v);HRESULT ( *get_clear)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_display)(IHTMLStyle *This, BSTR v);HRESULT ( *get_display)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_visibility)(IHTMLStyle *This, BSTR v);HRESULT ( *get_visibility)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyleType)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyleType)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStylePosition)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStylePosition)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyleImage)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyleImage)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_listStyle)(IHTMLStyle *This, BSTR v);HRESULT ( *get_listStyle)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_whiteSpace)(IHTMLStyle *This, BSTR v);HRESULT ( *get_whiteSpace)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_top)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_top)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_left)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_left)(IHTMLStyle *This, VARIANT *p);HRESULT ( *get_position)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_zIndex)(IHTMLStyle *This, VARIANT v);HRESULT ( *get_zIndex)(IHTMLStyle *This, VARIANT *p);HRESULT ( *put_overflow)(IHTMLStyle *This, BSTR v);HRESULT ( *get_overflow)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pageBreakBefore)(IHTMLStyle *This, BSTR v);HRESULT ( *get_pageBreakBefore)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pageBreakAfter)(IHTMLStyle *This, BSTR v);HRESULT ( *get_pageBreakAfter)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_cssText)(IHTMLStyle *This, BSTR v);HRESULT ( *get_cssText)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_pixelTop)(IHTMLStyle *This, int v);HRESULT ( *get_pixelTop)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelLeft)(IHTMLStyle *This, int v);HRESULT ( *get_pixelLeft)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelWidth)(IHTMLStyle *This, int v);HRESULT ( *get_pixelWidth)(IHTMLStyle *This, int *p);HRESULT ( *put_pixelHeight)(IHTMLStyle *This, int v);HRESULT ( *get_pixelHeight)(IHTMLStyle *This, int *p);HRESULT ( *put_posTop)(IHTMLStyle *This, float v);HRESULT ( *get_posTop)(IHTMLStyle *This, float *p);HRESULT ( *put_posLeft)(IHTMLStyle *This, float v);HRESULT ( *get_posLeft)(IHTMLStyle *This, float *p);HRESULT ( *put_posWidth)(IHTMLStyle *This, float v);HRESULT ( *get_posWidth)(IHTMLStyle *This, float *p);HRESULT ( *put_posHeight)(IHTMLStyle *This, float v);HRESULT ( *get_posHeight)(IHTMLStyle *This, float *p);HRESULT ( *put_cursor)(IHTMLStyle *This, BSTR v);HRESULT ( *get_cursor)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_clip)(IHTMLStyle *This, BSTR v);HRESULT ( *get_clip)(IHTMLStyle *This, BSTR *p);HRESULT ( *put_filter)(IHTMLStyle *This, BSTR v);HRESULT ( *get_filter)(IHTMLStyle *This, BSTR *p);HRESULT ( *setAttribute)(IHTMLStyle *This, BSTR strAttributeName, VARIANT AttributeValue, LONG lFlags);HRESULT ( *getAttribute)(IHTMLStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT *AttributeValue);HRESULT ( *removeAttribute)(IHTMLStyle *This, BSTR strAttributeName, LONG lFlags, VARIANT_BOOL *pfSuccess);HRESULT ( *toString)(IHTMLStyle *This, BSTR *String);};
struct IOleObjectVtbl {HRESULT ( *QueryInterface)(IOleObject *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IOleObject *This);ULONG ( *Release)(IOleObject *This);HRESULT ( *SetClientSite)(IOleObject *This, IOleClientSite *pClientSite);HRESULT ( *GetClientSite)(IOleObject *This, IOleClientSite **ppClientSite);HRESULT ( *SetHostNames)(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);HRESULT ( *Close)(IOleObject *This, DWORD dwSaveOption);HRESULT ( *SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);HRESULT ( *GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT ( *InitFromData)(IOleObject *This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);HRESULT ( *GetClipboardData)(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);HRESULT ( *DoVerb)(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);HRESULT ( *EnumVerbs)(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);HRESULT ( *Update)(IOleObject *This);HRESULT ( *IsUpToDate)(IOleObject *This);HRESULT ( *GetUserClassID)(IOleObject *This, CLSID *pClsid);HRESULT ( *GetUserType)(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);HRESULT ( *SetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *GetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT ( *Advise)(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT ( *Unadvise)(IOleObject *This, DWORD dwConnection);HRESULT ( *EnumAdvise)(IOleObject *This, IEnumSTATDATA **ppenumAdvise);HRESULT ( *GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);HRESULT ( *SetColorScheme)(IOleObject *This, LOGPALETTE *pLogpal);};
struct IADsGroupVtbl {HRESULT ( *QueryInterface)(IADsGroup *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsGroup *This);ULONG ( *Release)(IADsGroup *This);HRESULT ( *GetTypeInfoCount)(IADsGroup *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsGroup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsGroup *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsGroup *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsGroup *This, BSTR *retval);HRESULT ( *get_Class)(IADsGroup *This, BSTR *retval);HRESULT ( *get_GUID)(IADsGroup *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsGroup *This, BSTR *retval);HRESULT ( *get_Parent)(IADsGroup *This, BSTR *retval);HRESULT ( *get_Schema)(IADsGroup *This, BSTR *retval);HRESULT ( *GetInfo)(IADsGroup *This);HRESULT ( *SetInfo)(IADsGroup *This);HRESULT ( *Get)(IADsGroup *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsGroup *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsGroup *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsGroup *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsGroup *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_Description)(IADsGroup *This, BSTR *retval);HRESULT ( *put_Description)(IADsGroup *This, BSTR bstrDescription);HRESULT ( *Members)(IADsGroup *This, IADsMembers **ppMembers);HRESULT ( *IsMember)(IADsGroup *This, BSTR bstrMember, VARIANT_BOOL *bMember);HRESULT ( *Add)(IADsGroup *This, BSTR bstrNewItem);HRESULT ( *Remove)(IADsGroup *This, BSTR bstrItemToBeRemoved);};
struct IResponseVtbl {HRESULT ( *QueryInterface)(IResponse *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IResponse *This);ULONG ( *Release)(IResponse *This);HRESULT ( *GetTypeInfoCount)(IResponse *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IResponse *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IResponse *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IResponse *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Buffer)(IResponse *This, VARIANT_BOOL *fIsBuffering);HRESULT ( *put_Buffer)(IResponse *This, VARIANT_BOOL fIsBuffering);HRESULT ( *get_ContentType)(IResponse *This, BSTR *pbstrContentTypeRet);HRESULT ( *put_ContentType)(IResponse *This, BSTR bstrContentType);HRESULT ( *get_Expires)(IResponse *This, VARIANT *pvarExpiresMinutesRet);HRESULT ( *put_Expires)(IResponse *This, int lExpiresMinutes);HRESULT ( *get_ExpiresAbsolute)(IResponse *This, VARIANT *pvarExpiresRet);HRESULT ( *put_ExpiresAbsolute)(IResponse *This, DATE dtExpires);HRESULT ( *get_Cookies)(IResponse *This, IRequestDictionary **ppCookies);HRESULT ( *get_Status)(IResponse *This, BSTR *pbstrStatusRet);HRESULT ( *put_Status)(IResponse *This, BSTR bstrStatus);HRESULT ( *Add)(IResponse *This, BSTR bstrHeaderValue, BSTR bstrHeaderName);HRESULT ( *AddHeader)(IResponse *This, BSTR bstrHeaderName, BSTR bstrHeaderValue);HRESULT ( *AppendToLog)(IResponse *This, BSTR bstrLogEntry);HRESULT ( *BinaryWrite)(IResponse *This, VARIANT varInput);HRESULT ( *Clear)(IResponse *This);HRESULT ( *End)(IResponse *This);HRESULT ( *Flush)(IResponse *This);HRESULT ( *Redirect)(IResponse *This, BSTR bstrURL);HRESULT ( *Write)(IResponse *This, VARIANT varText);HRESULT ( *WriteBlock)(IResponse *This, short iBlockNumber);HRESULT ( *IsClientConnected)(IResponse *This, VARIANT_BOOL *pfIsClientConnected);HRESULT ( *get_CharSet)(IResponse *This, BSTR *pbstrCharSetRet);HRESULT ( *put_CharSet)(IResponse *This, BSTR bstrCharSet);HRESULT ( *Pics)(IResponse *This, BSTR bstrHeaderValue);HRESULT ( *get_CacheControl)(IResponse *This, BSTR *pbstrCacheControl);HRESULT ( *put_CacheControl)(IResponse *This, BSTR bstrCacheControl);};
struct ITAddressVtbl {HRESULT ( *QueryInterface)(ITAddress *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITAddress *This);ULONG ( *Release)(ITAddress *This);HRESULT ( *GetTypeInfoCount)(ITAddress *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITAddress *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITAddress *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITAddress *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_State)(ITAddress *This, ADDRESS_STATE *pAddressState);HRESULT ( *get_AddressName)(ITAddress *This, BSTR *ppName);HRESULT ( *get_ServiceProviderName)(ITAddress *This, BSTR *ppName);HRESULT ( *get_TAPIObject)(ITAddress *This, ITTAPI **ppTapiObject);HRESULT ( *CreateCall)(ITAddress *This, BSTR pDestAddress, ITBasicCallControl **ppCall);HRESULT ( *get_Calls)(ITAddress *This, VARIANT *pVariant);HRESULT ( *_EnumerateCalls)(ITAddress *This, IEnumCall **ppCallEnum);HRESULT ( *get_AddressTypes)(ITAddress *This, VARIANT *pVariant);HRESULT ( *_EnumerateAddressType)(ITAddress *This, IEnumAddressType **ppEnumAddress);HRESULT ( *RegisterCallTypes)(ITAddress *This, VARIANT_BOOL fOutgoing, VARIANT_BOOL fOwner, VARIANT_BOOL fMonitor, VARIANT MediaTypes);};
struct ClusNodeVtbl {HRESULT ( *QueryInterface)(ClusNode *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusNode *This);ULONG ( *Release)(ClusNode *This);HRESULT ( *GetTypeInfoCount)(ClusNode *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusNode *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusNode *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusNode *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusNode *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusNode *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusNode *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusNode *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ClusNode *This, LONG *phandle);HRESULT ( *get_NodeID)(ClusNode *This, BSTR *pbstrNodeID);HRESULT ( *get_State)(ClusNode *This, CLUSTER_NODE_STATE *dwState);HRESULT ( *Pause)(ClusNode *This);HRESULT ( *Resume)(ClusNode *This);HRESULT ( *Evict)(ClusNode *This);HRESULT ( *get_ResourceGroups)(ClusNode *This, ClusResGroups **ppResourceGroups);HRESULT ( *get_Cluster)(ClusNode *This, ICluster **ppCluster);HRESULT ( *get_NetInterfaces)(ClusNode *This, ClusNodeNetInterfaces **ppClusNetInterfaces);};
struct IADsUserVtbl {HRESULT ( *QueryInterface)(IADsUser *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IADsUser *This);ULONG ( *Release)(IADsUser *This);HRESULT ( *GetTypeInfoCount)(IADsUser *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IADsUser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IADsUser *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IADsUser *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(IADsUser *This, BSTR *retval);HRESULT ( *get_Class)(IADsUser *This, BSTR *retval);HRESULT ( *get_GUID)(IADsUser *This, BSTR *retval);HRESULT ( *get_ADsPath)(IADsUser *This, BSTR *retval);HRESULT ( *get_Parent)(IADsUser *This, BSTR *retval);HRESULT ( *get_Schema)(IADsUser *This, BSTR *retval);HRESULT ( *GetInfo)(IADsUser *This);HRESULT ( *SetInfo)(IADsUser *This);HRESULT ( *Get)(IADsUser *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *Put)(IADsUser *This, BSTR bstrName, VARIANT vProp);HRESULT ( *GetEx)(IADsUser *This, BSTR bstrName, VARIANT *pvProp);HRESULT ( *PutEx)(IADsUser *This, int lnControlCode, BSTR bstrName, VARIANT vProp);HRESULT ( *GetInfoEx)(IADsUser *This, VARIANT vProperties, int lnReserved);HRESULT ( *get_BadLoginAddress)(IADsUser *This, BSTR *retval);HRESULT ( *get_BadLoginCount)(IADsUser *This, int *retval);HRESULT ( *get_LastLogin)(IADsUser *This, DATE *retval);HRESULT ( *get_LastLogoff)(IADsUser *This, DATE *retval);HRESULT ( *get_LastFailedLogin)(IADsUser *This, DATE *retval);HRESULT ( *get_PasswordLastChanged)(IADsUser *This, DATE *retval);HRESULT ( *get_Description)(IADsUser *This, BSTR *retval);HRESULT ( *put_Description)(IADsUser *This, BSTR bstrDescription);HRESULT ( *get_Division)(IADsUser *This, BSTR *retval);HRESULT ( *put_Division)(IADsUser *This, BSTR bstrDivision);HRESULT ( *get_Department)(IADsUser *This, BSTR *retval);HRESULT ( *put_Department)(IADsUser *This, BSTR bstrDepartment);HRESULT ( *get_EmployeeID)(IADsUser *This, BSTR *retval);HRESULT ( *put_EmployeeID)(IADsUser *This, BSTR bstrEmployeeID);HRESULT ( *get_FullName)(IADsUser *This, BSTR *retval);HRESULT ( *put_FullName)(IADsUser *This, BSTR bstrFullName);HRESULT ( *get_FirstName)(IADsUser *This, BSTR *retval);HRESULT ( *put_FirstName)(IADsUser *This, BSTR bstrFirstName);HRESULT ( *get_LastName)(IADsUser *This, BSTR *retval);HRESULT ( *put_LastName)(IADsUser *This, BSTR bstrLastName);HRESULT ( *get_OtherName)(IADsUser *This, BSTR *retval);HRESULT ( *put_OtherName)(IADsUser *This, BSTR bstrOtherName);HRESULT ( *get_NamePrefix)(IADsUser *This, BSTR *retval);HRESULT ( *put_NamePrefix)(IADsUser *This, BSTR bstrNamePrefix);HRESULT ( *get_NameSuffix)(IADsUser *This, BSTR *retval);HRESULT ( *put_NameSuffix)(IADsUser *This, BSTR bstrNameSuffix);HRESULT ( *get_Title)(IADsUser *This, BSTR *retval);HRESULT ( *put_Title)(IADsUser *This, BSTR bstrTitle);HRESULT ( *get_Manager)(IADsUser *This, BSTR *retval);HRESULT ( *put_Manager)(IADsUser *This, BSTR bstrManager);HRESULT ( *get_TelephoneHome)(IADsUser *This, VARIANT *retval);HRESULT ( *put_TelephoneHome)(IADsUser *This, VARIANT vTelephoneHome);HRESULT ( *get_TelephoneMobile)(IADsUser *This, VARIANT *retval);HRESULT ( *put_TelephoneMobile)(IADsUser *This, VARIANT vTelephoneMobile);HRESULT ( *get_TelephoneNumber)(IADsUser *This, VARIANT *retval);HRESULT ( *put_TelephoneNumber)(IADsUser *This, VARIANT vTelephoneNumber);HRESULT ( *get_TelephonePager)(IADsUser *This, VARIANT *retval);HRESULT ( *put_TelephonePager)(IADsUser *This, VARIANT vTelephonePager);HRESULT ( *get_FaxNumber)(IADsUser *This, VARIANT *retval);HRESULT ( *put_FaxNumber)(IADsUser *This, VARIANT vFaxNumber);HRESULT ( *get_OfficeLocations)(IADsUser *This, VARIANT *retval);HRESULT ( *put_OfficeLocations)(IADsUser *This, VARIANT vOfficeLocations);HRESULT ( *get_PostalAddresses)(IADsUser *This, VARIANT *retval);HRESULT ( *put_PostalAddresses)(IADsUser *This, VARIANT vPostalAddresses);HRESULT ( *get_PostalCodes)(IADsUser *This, VARIANT *retval);HRESULT ( *put_PostalCodes)(IADsUser *This, VARIANT vPostalCodes);HRESULT ( *get_SeeAlso)(IADsUser *This, VARIANT *retval);HRESULT ( *put_SeeAlso)(IADsUser *This, VARIANT vSeeAlso);HRESULT ( *get_AccountDisabled)(IADsUser *This, VARIANT_BOOL *retval);HRESULT ( *put_AccountDisabled)(IADsUser *This, VARIANT_BOOL fAccountDisabled);HRESULT ( *get_AccountExpirationDate)(IADsUser *This, DATE *retval);HRESULT ( *put_AccountExpirationDate)(IADsUser *This, DATE daAccountExpirationDate);HRESULT ( *get_GraceLoginsAllowed)(IADsUser *This, int *retval);HRESULT ( *put_GraceLoginsAllowed)(IADsUser *This, int lnGraceLoginsAllowed);HRESULT ( *get_GraceLoginsRemaining)(IADsUser *This, int *retval);HRESULT ( *put_GraceLoginsRemaining)(IADsUser *This, int lnGraceLoginsRemaining);HRESULT ( *get_IsAccountLocked)(IADsUser *This, VARIANT_BOOL *retval);HRESULT ( *put_IsAccountLocked)(IADsUser *This, VARIANT_BOOL fIsAccountLocked);HRESULT ( *get_LoginHours)(IADsUser *This, VARIANT *retval);HRESULT ( *put_LoginHours)(IADsUser *This, VARIANT vLoginHours);HRESULT ( *get_LoginWorkstations)(IADsUser *This, VARIANT *retval);HRESULT ( *put_LoginWorkstations)(IADsUser *This, VARIANT vLoginWorkstations);HRESULT ( *get_MaxLogins)(IADsUser *This, int *retval);HRESULT ( *put_MaxLogins)(IADsUser *This, int lnMaxLogins);HRESULT ( *get_MaxStorage)(IADsUser *This, int *retval);HRESULT ( *put_MaxStorage)(IADsUser *This, int lnMaxStorage);HRESULT ( *get_PasswordExpirationDate)(IADsUser *This, DATE *retval);HRESULT ( *put_PasswordExpirationDate)(IADsUser *This, DATE daPasswordExpirationDate);HRESULT ( *get_PasswordMinimumLength)(IADsUser *This, int *retval);HRESULT ( *put_PasswordMinimumLength)(IADsUser *This, int lnPasswordMinimumLength);HRESULT ( *get_PasswordRequired)(IADsUser *This, VARIANT_BOOL *retval);HRESULT ( *put_PasswordRequired)(IADsUser *This, VARIANT_BOOL fPasswordRequired);HRESULT ( *get_RequireUniquePassword)(IADsUser *This, VARIANT_BOOL *retval);HRESULT ( *put_RequireUniquePassword)(IADsUser *This, VARIANT_BOOL fRequireUniquePassword);HRESULT ( *get_EmailAddress)(IADsUser *This, BSTR *retval);HRESULT ( *put_EmailAddress)(IADsUser *This, BSTR bstrEmailAddress);HRESULT ( *get_HomeDirectory)(IADsUser *This, BSTR *retval);HRESULT ( *put_HomeDirectory)(IADsUser *This, BSTR bstrHomeDirectory);HRESULT ( *get_Languages)(IADsUser *This, VARIANT *retval);HRESULT ( *put_Languages)(IADsUser *This, VARIANT vLanguages);HRESULT ( *get_Profile)(IADsUser *This, BSTR *retval);HRESULT ( *put_Profile)(IADsUser *This, BSTR bstrProfile);HRESULT ( *get_LoginScript)(IADsUser *This, BSTR *retval);HRESULT ( *put_LoginScript)(IADsUser *This, BSTR bstrLoginScript);HRESULT ( *get_Picture)(IADsUser *This, VARIANT *retval);HRESULT ( *put_Picture)(IADsUser *This, VARIANT vPicture);HRESULT ( *get_HomePage)(IADsUser *This, BSTR *retval);HRESULT ( *put_HomePage)(IADsUser *This, BSTR bstrHomePage);HRESULT ( *Groups)(IADsUser *This, IADsMembers **ppGroups);HRESULT ( *SetPassword)(IADsUser *This, BSTR NewPassword);HRESULT ( *ChangePassword)(IADsUser *This, BSTR bstrOldPassword, BSTR bstrNewPassword);};
struct IClusterVtbl {HRESULT ( *QueryInterface)(ICluster *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICluster *This);ULONG ( *Release)(ICluster *This);HRESULT ( *GetTypeInfoCount)(ICluster *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICluster *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICluster *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICluster *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ICluster *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ICluster *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ICluster *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ICluster *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ICluster *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ICluster *This, LONG *phandle);HRESULT ( *Open)(ICluster *This, BSTR bstrClusterName);HRESULT ( *put_Name)(ICluster *This, BSTR bstrClusterName);HRESULT ( *GetVersion)(ICluster *This, BSTR *pbstrClusterName, SHORT *MajorVersion, SHORT *MinorVersion, SHORT *BuildNumber, BSTR *pbstrVendorId, BSTR *pbstrCSDVersion);HRESULT ( *put_QuorumResource)(ICluster *This, ClusResource *pClusterResource);HRESULT ( *get_QuorumResource)(ICluster *This, ClusResource **pClusterResource);HRESULT ( *SetQuorumInfo)(ICluster *This, BSTR DevicePath, LONG nLogSize);HRESULT ( *GetQuorumInfo)(ICluster *This, BSTR *DevicePath, LONG *pLogSize);HRESULT ( *get_Nodes)(ICluster *This, ClusNodes **ppClusterNodes);HRESULT ( *get_ResourceGroups)(ICluster *This, ClusResGroups **ppClusterResourceGroups);HRESULT ( *get_Resources)(ICluster *This, ClusResources **ppClusterResources);HRESULT ( *get_ResourceTypes)(ICluster *This, ClusResTypes **ppResourceTypes);HRESULT ( *get_Networks)(ICluster *This, ClusNetworks **ppNetworks);HRESULT ( *get_NetInterfaces)(ICluster *This, ClusNetInterfaces **ppNetInterfaces);};
struct ITypeLibVtbl {HRESULT ( *QueryInterface)(ITypeLib *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib *This);ULONG ( *Release)(ITypeLib *This);UINT ( *GetTypeInfoCount)(ITypeLib *This);HRESULT ( *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);};
struct Field15Vtbl {HRESULT ( *QueryInterface)(Field15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Field15 *This);ULONG ( *Release)(Field15 *This);HRESULT ( *GetTypeInfoCount)(Field15 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Field15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Field15 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Field15 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(Field15 *This, ADOProperties **ppvObject);HRESULT ( *get_ActualSize)(Field15 *This, int *pl);HRESULT ( *get_Attributes)(Field15 *This, int *pl);HRESULT ( *get_DefinedSize)(Field15 *This, int *pl);HRESULT ( *get_Name)(Field15 *This, BSTR *pbstr);HRESULT ( *get_Type)(Field15 *This, DataTypeEnum *pDataType);HRESULT ( *get_Value)(Field15 *This, VARIANT *pvar);HRESULT ( *put_Value)(Field15 *This, VARIANT Val);HRESULT ( *get_Precision)(Field15 *This, BYTE *pbPrecision);HRESULT ( *get_NumericScale)(Field15 *This, BYTE *pbNumericScale);HRESULT ( *AppendChunk)(Field15 *This, VARIANT Data);HRESULT ( *GetChunk)(Field15 *This, int Length, VARIANT *pvar);HRESULT ( *get_OriginalValue)(Field15 *This, VARIANT *pvar);HRESULT ( *get_UnderlyingValue)(Field15 *This, VARIANT *pvar);};
struct FieldsVtbl {HRESULT ( *QueryInterface)(ADOFields *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOFields *This);ULONG ( *Release)(ADOFields *This);HRESULT ( *GetTypeInfoCount)(ADOFields *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOFields *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOFields *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOFields *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Count)(ADOFields *This, int *c);HRESULT ( *_NewEnum)(ADOFields *This, IUnknown **ppvObject);HRESULT ( *Refresh)(ADOFields *This);HRESULT ( *get_Item)(ADOFields *This, VARIANT Index, ADOField **ppvObject);HRESULT ( *Append)(ADOFields *This, BSTR Name, DataTypeEnum Type, int DefinedSize, FieldAttributeEnum Attrib);HRESULT ( *Delete)(ADOFields *This, VARIANT Index);};
struct MemberVtbl {HRESULT ( *QueryInterface)(Member *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(Member *This);ULONG ( *Release)(Member *This);HRESULT ( *GetTypeInfoCount)(Member *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(Member *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(Member *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(Member *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(Member *This, BSTR *pbstr);HRESULT ( *get_UniqueName)(Member *This, BSTR *pbstr);HRESULT ( *get_Caption)(Member *This, BSTR *pbstr);HRESULT ( *get_Description)(Member *This, BSTR *pbstr);HRESULT ( *get_Parent)(Member *This, Member **ppvObject);HRESULT ( *get_LevelDepth)(Member *This, int *pl);HRESULT ( *get_LevelName)(Member *This, BSTR *pbstr);HRESULT ( *get_Properties)(Member *This, Properties **ppvObject);HRESULT ( *get_Type)(Member *This, MemberTypeEnum *ptype);HRESULT ( *get_ChildCount)(Member *This, int *pl);HRESULT ( *get_DrilledDown)(Member *This, VARIANT_BOOL *pf);HRESULT ( *get_ParentSameAsPrev)(Member *This, VARIANT_BOOL *pf);HRESULT ( *get_Children)(Member *This, Members **ppvObject);};
struct FieldVtbl {HRESULT ( *QueryInterface)(ADOField *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ADOField *This);ULONG ( *Release)(ADOField *This);HRESULT ( *GetTypeInfoCount)(ADOField *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ADOField *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ADOField *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ADOField *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(ADOField *This, ADOProperties **ppvObject);HRESULT ( *get_ActualSize)(ADOField *This, int *pl);HRESULT ( *get_Attributes)(ADOField *This, int *pl);HRESULT ( *get_DefinedSize)(ADOField *This, int *pl);HRESULT ( *get_Name)(ADOField *This, BSTR *pbstr);HRESULT ( *get_Type)(ADOField *This, DataTypeEnum *pDataType);HRESULT ( *get_Value)(ADOField *This, VARIANT *pvar);HRESULT ( *put_Value)(ADOField *This, VARIANT Val);HRESULT ( *get_Precision)(ADOField *This, BYTE *pbPrecision);HRESULT ( *get_NumericScale)(ADOField *This, BYTE *pbNumericScale);HRESULT ( *AppendChunk)(ADOField *This, VARIANT Data);HRESULT ( *GetChunk)(ADOField *This, int Length, VARIANT *pvar);HRESULT ( *get_OriginalValue)(ADOField *This, VARIANT *pvar);HRESULT ( *get_UnderlyingValue)(ADOField *This, VARIANT *pvar);HRESULT ( *get_DataFormat)(ADOField *This, IUnknown **ppiDF);HRESULT ( *putref_DataFormat)(ADOField *This, IUnknown *piDF);HRESULT ( *put_Precision)(ADOField *This, BYTE bPrecision);HRESULT ( *put_NumericScale)(ADOField *This, BYTE bScale);HRESULT ( *put_Type)(ADOField *This, DataTypeEnum DataType);HRESULT ( *put_DefinedSize)(ADOField *This, int lSize);HRESULT ( *put_Attributes)(ADOField *This, int lAttributes);};
struct ITSdpVtbl {HRESULT ( *QueryInterface)(ITSdp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITSdp *This);ULONG ( *Release)(ITSdp *This);HRESULT ( *GetTypeInfoCount)(ITSdp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITSdp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITSdp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITSdp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_IsValid)(ITSdp *This, VARIANT_BOOL *pfIsValid);HRESULT ( *get_ProtocolVersion)(ITSdp *This, USHORT *pProtocolVersion);HRESULT ( *get_SessionId)(ITSdp *This, ULONG *pSessionId);HRESULT ( *get_SessionVersion)(ITSdp *This, ULONG *pSessionVersion);HRESULT ( *put_SessionVersion)(ITSdp *This, ULONG SessionVersion);HRESULT ( *get_MachineAddress)(ITSdp *This, BSTR *ppMachineAddress);HRESULT ( *put_MachineAddress)(ITSdp *This, BSTR pMachineAddress);HRESULT ( *get_SessionName)(ITSdp *This, BSTR *ppSessionName);HRESULT ( *put_SessionName)(ITSdp *This, BSTR pSessionName);HRESULT ( *get_SessionInfo)(ITSdp *This, BSTR *ppSessionInfo);HRESULT ( *put_SessionInfo)(ITSdp *This, BSTR pSessionInfo);HRESULT ( *get_Uri)(ITSdp *This, BSTR *ppUri);HRESULT ( *put_Uri)(ITSdp *This, BSTR pUri);HRESULT ( *GetEmailNames)(ITSdp *This, VARIANT *pAddresses, VARIANT *pNames);HRESULT ( *SetEmailNames)(ITSdp *This, VARIANT Addresseses, VARIANT Names);HRESULT ( *GetPhoneNumbers)(ITSdp *This, VARIANT *pNumbers, VARIANT *pNames);HRESULT ( *SetPhoneNumbers)(ITSdp *This, VARIANT Numbers, VARIANT Names);HRESULT ( *get_CharacterSet)(ITSdp *This, BSTR *ppCharacterSet);HRESULT ( *put_CharacterSet)(ITSdp *This, BSTR pCharacterSet);HRESULT ( *get_UserName)(ITSdp *This, BSTR *ppUserName);HRESULT ( *put_UserName)(ITSdp *This, BSTR pUserName);HRESULT ( *get_MediaCollection)(ITSdp *This, ITMediaCollection **ppMediaCollection);HRESULT ( *get_TimeCollection)(ITSdp *This, ITTimeCollection **ppTimeCollection);};
struct IAgentCtlCharacterVtbl {HRESULT ( *QueryInterface)(IAgentCtlCharacter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IAgentCtlCharacter *This);ULONG ( *Release)(IAgentCtlCharacter *This);HRESULT ( *GetTypeInfoCount)(IAgentCtlCharacter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IAgentCtlCharacter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IAgentCtlCharacter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IAgentCtlCharacter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Balloon)(IAgentCtlCharacter *This, IAgentCtlBalloon **ppidBalloon);HRESULT ( *get_Commands)(IAgentCtlCharacter *This, IAgentCtlCommands **ppidCommands);HRESULT ( *get_Name)(IAgentCtlCharacter *This, BSTR *pName);HRESULT ( *get_Description)(IAgentCtlCharacter *This, BSTR *pDescription);HRESULT ( *get_Visible)(IAgentCtlCharacter *This, VARIANT_BOOL *pVisible);HRESULT ( *put_Left)(IAgentCtlCharacter *This, short Left);HRESULT ( *get_Left)(IAgentCtlCharacter *This, short *pLeft);HRESULT ( *put_Top)(IAgentCtlCharacter *This, short Top);HRESULT ( *get_Top)(IAgentCtlCharacter *This, short *pTop);HRESULT ( *put_Height)(IAgentCtlCharacter *This, short Height);HRESULT ( *get_Height)(IAgentCtlCharacter *This, short *pHeight);HRESULT ( *put_Width)(IAgentCtlCharacter *This, short Width);HRESULT ( *get_Width)(IAgentCtlCharacter *This, short *pWidth);HRESULT ( *get_Speed)(IAgentCtlCharacter *This, int *pSpeed);HRESULT ( *get_Pitch)(IAgentCtlCharacter *This, int *pPitch);HRESULT ( *put_IdleOn)(IAgentCtlCharacter *This, VARIANT_BOOL On);HRESULT ( *get_IdleOn)(IAgentCtlCharacter *This, VARIANT_BOOL *pOn);HRESULT ( *Activate)(IAgentCtlCharacter *This, VARIANT State, VARIANT_BOOL *pSuccess);HRESULT ( *Play)(IAgentCtlCharacter *This, BSTR Animation, IAgentCtlRequest **Request);HRESULT ( *Get)(IAgentCtlCharacter *This, BSTR Type, BSTR Name, VARIANT Queue, IAgentCtlRequest **Request);HRESULT ( *Stop)(IAgentCtlCharacter *This, VARIANT Request);HRESULT ( *Wait)(IAgentCtlCharacter *This, IDispatch *WaitForRequest, IAgentCtlRequest **Request);HRESULT ( *Interrupt)(IAgentCtlCharacter *This, IDispatch *InterruptRequest, IAgentCtlRequest **Request);HRESULT ( *Speak)(IAgentCtlCharacter *This, VARIANT Text, VARIANT Url, IAgentCtlRequest **Request);HRESULT ( *GestureAt)(IAgentCtlCharacter *This, short x, short y, IAgentCtlRequest **Request);HRESULT ( *MoveTo)(IAgentCtlCharacter *This, short x, short y, VARIANT Speed, IAgentCtlRequest **Request);HRESULT ( *Hide)(IAgentCtlCharacter *This, VARIANT Fast, IAgentCtlRequest **Request);HRESULT ( *Show)(IAgentCtlCharacter *This, VARIANT Fast, IAgentCtlRequest **Request);HRESULT ( *StopAll)(IAgentCtlCharacter *This, VARIANT Types);HRESULT ( *get_MoveCause)(IAgentCtlCharacter *This, short *MoveCause);HRESULT ( *get_VisibilityCause)(IAgentCtlCharacter *This, short *VisibilityCause);HRESULT ( *get_HasOtherClients)(IAgentCtlCharacter *This, VARIANT_BOOL *HasOtherClients);HRESULT ( *put_SoundEffectsOn)(IAgentCtlCharacter *This, VARIANT_BOOL On);HRESULT ( *get_SoundEffectsOn)(IAgentCtlCharacter *This, VARIANT_BOOL *pOn);HRESULT ( *put_Name)(IAgentCtlCharacter *This, BSTR Name);HRESULT ( *put_Description)(IAgentCtlCharacter *This, BSTR Description);HRESULT ( *get_ExtraData)(IAgentCtlCharacter *This, BSTR *pExtraData);};
struct ICreateTypeInfoVtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo *This);ULONG ( *Release)(ICreateTypeInfo *This);HRESULT ( *SetGuid)(ICreateTypeInfo *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo *This);};
struct IWebBrowserAppVtbl {HRESULT ( *QueryInterface)(IWebBrowserApp *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowserApp *This);ULONG ( *Release)(IWebBrowserApp *This);HRESULT ( *GetTypeInfoCount)(IWebBrowserApp *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowserApp *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowserApp *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowserApp *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowserApp *This);HRESULT ( *GoForward)(IWebBrowserApp *This);HRESULT ( *GoHome)(IWebBrowserApp *This);HRESULT ( *GoSearch)(IWebBrowserApp *This);HRESULT ( *Navigate)(IWebBrowserApp *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowserApp *This);HRESULT ( *Refresh2)(IWebBrowserApp *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowserApp *This);HRESULT ( *get_Application)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowserApp *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowserApp *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Left)(IWebBrowserApp *This, int Left);HRESULT ( *get_Top)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Top)(IWebBrowserApp *This, int Top);HRESULT ( *get_Width)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Width)(IWebBrowserApp *This, int Width);HRESULT ( *get_Height)(IWebBrowserApp *This, int *pl);HRESULT ( *put_Height)(IWebBrowserApp *This, int Height);HRESULT ( *get_LocationName)(IWebBrowserApp *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowserApp *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowserApp *This);HRESULT ( *ClientToWindow)(IWebBrowserApp *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowserApp *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowserApp *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowserApp *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowserApp *This, int *pHWND);HRESULT ( *get_FullName)(IWebBrowserApp *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowserApp *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowserApp *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowserApp *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowserApp *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowserApp *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowserApp *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowserApp *This, VARIANT_BOOL bFullScreen);};
struct ClusResourceVtbl {HRESULT ( *QueryInterface)(ClusResource *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ClusResource *This);ULONG ( *Release)(ClusResource *This);HRESULT ( *GetTypeInfoCount)(ClusResource *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ClusResource *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ClusResource *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ClusResource *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ClusResource *This, BSTR *pbstrName);HRESULT ( *get_CommonProperties)(ClusResource *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateProperties)(ClusResource *This, ClusProperties **ppProperties);HRESULT ( *get_CommonROProperties)(ClusResource *This, ClusProperties **ppProperties);HRESULT ( *get_PrivateROProperties)(ClusResource *This, ClusProperties **ppProperties);HRESULT ( *get_Handle)(ClusResource *This, LONG *phandle);HRESULT ( *put_Name)(ClusResource *This, BSTR bstrResourceName);HRESULT ( *get_State)(ClusResource *This, CLUSTER_RESOURCE_STATE *dwState);HRESULT ( *BecomeQuorumResource)(ClusResource *This, BSTR bstrDevicePath, LONG lMaxLogSize);HRESULT ( *Delete)(ClusResource *This);HRESULT ( *Fail)(ClusResource *This);HRESULT ( *Online)(ClusResource *This, LONG nTimeout, LONG *bPending);HRESULT ( *Offline)(ClusResource *This, LONG nTimeout, LONG *bPending);HRESULT ( *ChangeResourceGroup)(ClusResource *This, ClusResGroup *pResourceGroup);HRESULT ( *AddResourceNode)(ClusResource *This, ClusNode *pNode);HRESULT ( *RemoveResourceNode)(ClusResource *This, ClusNode *pNode);HRESULT ( *CanResourceBeDependent)(ClusResource *This, ClusResource *pResource, BOOL *bDependent);HRESULT ( *get_PossibleOwnerNodes)(ClusResource *This, ClusResOwners **ppNodes);HRESULT ( *get_Dependencies)(ClusResource *This, ClusResDependencies **ppResDependencies);HRESULT ( *get_Group)(ClusResource *This, ClusResGroup **ppResGroup);HRESULT ( *get_OwnerNode)(ClusResource *This, ClusNode **ppNode);HRESULT ( *get_Cluster)(ClusResource *This, ICluster **ppCluster);};
struct IHTMLWindow2Vtbl {HRESULT ( *QueryInterface)(IHTMLWindow2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHTMLWindow2 *This);ULONG ( *Release)(IHTMLWindow2 *This);HRESULT ( *GetTypeInfoCount)(IHTMLWindow2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IHTMLWindow2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IHTMLWindow2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IHTMLWindow2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *item)(IHTMLWindow2 *This, VARIANT *pvarIndex, VARIANT *pvarResult);HRESULT ( *get_length)(IHTMLWindow2 *This, int *p);HRESULT ( *get_frames)(IHTMLWindow2 *This, IHTMLFramesCollection2 **p);HRESULT ( *put_defaultStatus)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_defaultStatus)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *put_status)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_status)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *setTimeout)(IHTMLWindow2 *This, BSTR expression, int msec, VARIANT *language, int *timerID);HRESULT ( *clearTimeout)(IHTMLWindow2 *This, int timerID);HRESULT ( *alert)(IHTMLWindow2 *This, BSTR message);HRESULT ( *confirm)(IHTMLWindow2 *This, BSTR message, VARIANT_BOOL *confirmed);HRESULT ( *prompt)(IHTMLWindow2 *This, BSTR message, BSTR defstr, VARIANT *textdata);HRESULT ( *get_Image)(IHTMLWindow2 *This, IHTMLImageElementFactory **p);HRESULT ( *get_location)(IHTMLWindow2 *This, IHTMLLocation **p);HRESULT ( *get_history)(IHTMLWindow2 *This, IOmHistory **p);HRESULT ( *close)(IHTMLWindow2 *This);HRESULT ( *put_opener)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_opener)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *get_navigator)(IHTMLWindow2 *This, IOmNavigator **p);HRESULT ( *put_name)(IHTMLWindow2 *This, BSTR v);HRESULT ( *get_name)(IHTMLWindow2 *This, BSTR *p);HRESULT ( *get_parent)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *open)(IHTMLWindow2 *This, BSTR url, BSTR name, BSTR features, VARIANT_BOOL replace, IHTMLWindow2 **pomWindowResult);HRESULT ( *get_self)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *get_top)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *get_window)(IHTMLWindow2 *This, IHTMLWindow2 **p);HRESULT ( *navigate)(IHTMLWindow2 *This, BSTR url);HRESULT ( *put_onfocus)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onfocus)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onblur)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onblur)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onbeforeunload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onbeforeunload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onunload)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onunload)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onhelp)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onhelp)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onerror)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onerror)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onresize)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onresize)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *put_onscroll)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_onscroll)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *get_document)(IHTMLWindow2 *This, IHTMLDocument2 **p);HRESULT ( *get_event)(IHTMLWindow2 *This, IHTMLEventObj **p);HRESULT ( *get__newEnum)(IHTMLWindow2 *This, IUnknown **p);HRESULT ( *showModalDialog)(IHTMLWindow2 *This, BSTR dialog, VARIANT *varArgIn, VARIANT *varOptions, VARIANT *varArgOut);HRESULT ( *showHelp)(IHTMLWindow2 *This, BSTR helpURL, VARIANT helpArg, BSTR features);HRESULT ( *get_screen)(IHTMLWindow2 *This, IHTMLScreen **p);HRESULT ( *get_Option)(IHTMLWindow2 *This, IHTMLOptionElementFactory **p);HRESULT ( *focus)(IHTMLWindow2 *This);HRESULT ( *get_closed)(IHTMLWindow2 *This, VARIANT_BOOL *p);HRESULT ( *blur)(IHTMLWindow2 *This);HRESULT ( *scroll)(IHTMLWindow2 *This, int x, int y);HRESULT ( *get_clientInformation)(IHTMLWindow2 *This, IOmNavigator **p);HRESULT ( *setInterval)(IHTMLWindow2 *This, BSTR expression, int msec, VARIANT *language, int *timerID);HRESULT ( *clearInterval)(IHTMLWindow2 *This, int timerID);HRESULT ( *put_offscreenBuffering)(IHTMLWindow2 *This, VARIANT v);HRESULT ( *get_offscreenBuffering)(IHTMLWindow2 *This, VARIANT *p);HRESULT ( *execScript)(IHTMLWindow2 *This, BSTR code, BSTR language, VARIANT *pvarRet);HRESULT ( *toString)(IHTMLWindow2 *This, BSTR *String);HRESULT ( *scrollBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *scrollTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *moveTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *moveBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *resizeTo)(IHTMLWindow2 *This, int x, int y);HRESULT ( *resizeBy)(IHTMLWindow2 *This, int x, int y);HRESULT ( *get_external)(IHTMLWindow2 *This, IDispatch **p);};
struct IShellFolderVtbl {HRESULT ( *QueryInterface)(IShellFolder *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellFolder *This);ULONG ( *Release)(IShellFolder *This);HRESULT ( *ParseDisplayName)(IShellFolder *This, HWND hwndOwner, LPBC pbcReserved, LPOLESTR lpszDisplayName, ULONG *pchEaten, LPITEMIDLIST *ppidl, ULONG *pdwAttributes);HRESULT ( *EnumObjects)(IShellFolder *This, HWND hwndOwner, DWORD grfFlags, LPENUMIDLIST *ppenumIDList);HRESULT ( *BindToObject)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbcReserved,  IID * riid, LPVOID *ppvOut);HRESULT ( *BindToStorage)(IShellFolder *This, LPCITEMIDLIST pidl, LPBC pbcReserved,  IID * riid, LPVOID *ppvObj);HRESULT ( *CompareIDs)(IShellFolder *This, LPARAM lParam, LPCITEMIDLIST pidl1, LPCITEMIDLIST pidl2);HRESULT ( *CreateViewObject)(IShellFolder *This, HWND hwndOwner,  IID * riid, LPVOID *ppvOut);HRESULT ( *GetAttributesOf)(IShellFolder *This, UINT cidl, LPCITEMIDLIST *apidl, ULONG *rgfInOut);HRESULT ( *GetUIObjectOf)(IShellFolder *This, HWND hwndOwner, UINT cidl, LPCITEMIDLIST *apidl,  IID * riid, UINT *prgfInOut, LPVOID *ppvOut);HRESULT ( *GetDisplayNameOf)(IShellFolder *This, LPCITEMIDLIST pidl, DWORD uFlags, LPSTRRET lpName);HRESULT ( *SetNameOf)(IShellFolder *This, HWND hwndOwner, LPCITEMIDLIST pidl, LPCOLESTR lpszName, DWORD uFlags, LPITEMIDLIST *ppidlOut);};
struct ITConferenceVtbl {HRESULT ( *QueryInterface)(ITConference *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITConference *This);ULONG ( *Release)(ITConference *This);HRESULT ( *GetTypeInfoCount)(ITConference *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITConference *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITConference *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITConference *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ITConference *This, BSTR *ppName);HRESULT ( *put_Name)(ITConference *This, BSTR pName);HRESULT ( *get_ProtocolId)(ITConference *This, BSTR *ppProtocolId);HRESULT ( *put_ProtocolId)(ITConference *This, BSTR pProtocolId);HRESULT ( *get_SubType)(ITConference *This, BSTR *ppSubType);HRESULT ( *put_SubType)(ITConference *This, BSTR pSubType);HRESULT ( *get_Originator)(ITConference *This, BSTR *ppOriginator);HRESULT ( *put_Originator)(ITConference *This, BSTR pOriginator);HRESULT ( *get_AnnouncementScope)(ITConference *This, BSTR *ppAnnoucementScope);HRESULT ( *put_AnnouncementScope)(ITConference *This, BSTR pAnnouncementScope);HRESULT ( *get_AdvertisingScope)(ITConference *This, RND_ADVERTISING_SCOPE *pAdvertisingScope);HRESULT ( *put_AdvertisingScope)(ITConference *This, RND_ADVERTISING_SCOPE AdvertisingScope);HRESULT ( *get_Url)(ITConference *This, BSTR *ppUrl);HRESULT ( *put_Url)(ITConference *This, BSTR pUrl);HRESULT ( *get_Description)(ITConference *This, BSTR *ppDescription);HRESULT ( *put_Description)(ITConference *This, BSTR pDescription);HRESULT ( *get_IsEncrypted)(ITConference *This, BSTR *ppIsEncrypted);HRESULT ( *put_IsEncrypted)(ITConference *This, BSTR pIsEncrypted);HRESULT ( *get_ConferenceBlob)(ITConference *This, BSTR *ppConferenceBlob);HRESULT ( *put_ConferenceBlob)(ITConference *This, BSTR pConferenceBlob);HRESULT ( *GetStartTime)(ITConference *This, USHORT *pYear, BYTE *pMonth, BYTE *pDay, BYTE *pHour, BYTE *pMinute);HRESULT ( *SetStartTime)(ITConference *This, USHORT Year, BYTE Month, BYTE Day, BYTE Hour, BYTE Minute);HRESULT ( *GetStopTime)(ITConference *This, USHORT *pYear, BYTE *pMonth, BYTE *pDay, BYTE *pHour, BYTE *pMinute);HRESULT ( *SetStopTime)(ITConference *This, USHORT Year, BYTE Month, BYTE Day, BYTE Hour, BYTE Minute);};
struct FolderItemVtbl {HRESULT ( *QueryInterface)(FolderItem *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(FolderItem *This);ULONG ( *Release)(FolderItem *This);HRESULT ( *GetTypeInfoCount)(FolderItem *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(FolderItem *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(FolderItem *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(FolderItem *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Application)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Parent)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_Name)(FolderItem *This, BSTR *pbs);HRESULT ( *put_Name)(FolderItem *This, BSTR bs);HRESULT ( *get_Path)(FolderItem *This, BSTR *pbs);HRESULT ( *get_GetLink)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_GetFolder)(FolderItem *This, IDispatch **ppid);HRESULT ( *get_IsLink)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFolder)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsFileSystem)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_IsBrowsable)(FolderItem *This, VARIANT_BOOL *pb);HRESULT ( *get_ModifyDate)(FolderItem *This, DATE *pdt);HRESULT ( *put_ModifyDate)(FolderItem *This, DATE dt);HRESULT ( *get_Size)(FolderItem *This, LONG *pul);HRESULT ( *get_Type)(FolderItem *This, BSTR *pbs);HRESULT ( *Verbs)(FolderItem *This, FolderItemVerbs **ppfic);HRESULT ( *InvokeVerb)(FolderItem *This, VARIANT vVerb);};
struct ITTerminalVtbl {HRESULT ( *QueryInterface)(ITTerminal *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITTerminal *This);ULONG ( *Release)(ITTerminal *This);HRESULT ( *GetTypeInfoCount)(ITTerminal *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ITTerminal *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ITTerminal *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ITTerminal *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Name)(ITTerminal *This, BSTR *ppName);HRESULT ( *get_State)(ITTerminal *This, TERMINAL_STATE *pTerminalState);HRESULT ( *get_Address)(ITTerminal *This, ITAddress **ppAddress);HRESULT ( *get_TerminalType)(ITTerminal *This, TERMINAL_TYPE *pType);HRESULT ( *get_TerminalClass)(ITTerminal *This, BSTR *ppTerminalClass);HRESULT ( *IsStandardTerminal)(ITTerminal *This, VARIANT_BOOL *pfStandard);HRESULT ( *CanRender)(ITTerminal *This, VARIANT_BOOL *pfRender);HRESULT ( *CanCapture)(ITTerminal *This, VARIANT_BOOL *pfCapture);};
struct ICellsetVtbl {HRESULT ( *QueryInterface)(ICellset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICellset *This);ULONG ( *Release)(ICellset *This);HRESULT ( *GetTypeInfoCount)(ICellset *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(ICellset *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(ICellset *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(ICellset *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Item)(ICellset *This, SAFEARRAY **idx, Cell **ppvObject);HRESULT ( *Open)(ICellset *This, VARIANT DataSource, VARIANT ActiveConnection);HRESULT ( *Close)(ICellset *This);HRESULT ( *putref_Source)(ICellset *This, IDispatch *pcmd);HRESULT ( *put_Source)(ICellset *This, BSTR bstrCmd);HRESULT ( *get_Source)(ICellset *This, VARIANT *pvSource);HRESULT ( *putref_ActiveConnection)(ICellset *This, IDispatch *pconn);HRESULT ( *put_ActiveConnection)(ICellset *This, BSTR bstrConn);HRESULT ( *get_ActiveConnection)(ICellset *This, IDispatch **ppConn);HRESULT ( *get_State)(ICellset *This, LONG *plState);HRESULT ( *get_Axes)(ICellset *This, Axes **ppvObject);HRESULT ( *get_FilterAxis)(ICellset *This, Axis **ppvObject);HRESULT ( *get_Properties)(ICellset *This, Properties **ppvObject);};
struct _ParameterVtbl {HRESULT ( *QueryInterface)(_ADOParameter *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADOParameter *This);ULONG ( *Release)(_ADOParameter *This);HRESULT ( *GetTypeInfoCount)(_ADOParameter *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADOParameter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADOParameter *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADOParameter *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_ADOParameter *This, ADOProperties **ppvObject);HRESULT ( *get_Name)(_ADOParameter *This, BSTR *pbstr);HRESULT ( *put_Name)(_ADOParameter *This, BSTR bstr);HRESULT ( *get_Value)(_ADOParameter *This, VARIANT *pvar);HRESULT ( *put_Value)(_ADOParameter *This, VARIANT val);HRESULT ( *get_Type)(_ADOParameter *This, DataTypeEnum *psDataType);HRESULT ( *put_Type)(_ADOParameter *This, DataTypeEnum sDataType);HRESULT ( *put_Direction)(_ADOParameter *This, ParameterDirectionEnum lParmDirection);HRESULT ( *get_Direction)(_ADOParameter *This, ParameterDirectionEnum *plParmDirection);HRESULT ( *put_Precision)(_ADOParameter *This, BYTE bPrecision);HRESULT ( *get_Precision)(_ADOParameter *This, BYTE *pbPrecision);HRESULT ( *put_NumericScale)(_ADOParameter *This, BYTE bScale);HRESULT ( *get_NumericScale)(_ADOParameter *This, BYTE *pbScale);HRESULT ( *put_Size)(_ADOParameter *This, int l);HRESULT ( *get_Size)(_ADOParameter *This, int *pl);HRESULT ( *AppendChunk)(_ADOParameter *This, VARIANT Val);HRESULT ( *get_Attributes)(_ADOParameter *This, LONG *plParmAttribs);HRESULT ( *put_Attributes)(_ADOParameter *This, LONG lParmAttribs);};
struct ITypeLib2Vtbl {HRESULT ( *QueryInterface)(ITypeLib2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeLib2 *This);ULONG ( *Release)(ITypeLib2 *This);UINT ( *GetTypeInfoCount)(ITypeLib2 *This);HRESULT ( *GetTypeInfo)(ITypeLib2 *This, UINT index, ITypeInfo **ppTInfo);HRESULT ( *GetTypeInfoType)(ITypeLib2 *This, UINT index, TYPEKIND *pTKind);HRESULT ( *GetTypeInfoOfGuid)(ITypeLib2 *This,  GUID * guid, ITypeInfo **ppTinfo);HRESULT ( *GetLibAttr)(ITypeLib2 *This, TLIBATTR **ppTLibAttr);HRESULT ( *GetTypeComp)(ITypeLib2 *This, ITypeComp **ppTComp);HRESULT ( *GetDocumentation)(ITypeLib2 *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *IsName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT ( *FindName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void ( *ReleaseTLibAttr)(ITypeLib2 *This, TLIBATTR *pTLibAttr);HRESULT ( *GetCustData)(ITypeLib2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetLibStatistics)(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);HRESULT ( *GetDocumentation2)(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeLib2 *This, CUSTDATA *pCustData);};
struct ICreateTypeInfo2Vtbl {HRESULT ( *QueryInterface)(ICreateTypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ICreateTypeInfo2 *This);ULONG ( *Release)(ICreateTypeInfo2 *This);HRESULT ( *SetGuid)(ICreateTypeInfo2 *This,  GUID * guid);HRESULT ( *SetTypeFlags)(ICreateTypeInfo2 *This, UINT uTypeFlags);HRESULT ( *SetDocString)(ICreateTypeInfo2 *This, LPOLESTR pStrDoc);HRESULT ( *SetHelpContext)(ICreateTypeInfo2 *This, DWORD dwHelpContext);HRESULT ( *SetVersion)(ICreateTypeInfo2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT ( *AddRefTypeInfo)(ICreateTypeInfo2 *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT ( *AddFuncDesc)(ICreateTypeInfo2 *This, UINT index, FUNCDESC *pFuncDesc);HRESULT ( *AddImplType)(ICreateTypeInfo2 *This, UINT index, HREFTYPE hRefType);HRESULT ( *SetImplTypeFlags)(ICreateTypeInfo2 *This, UINT index, INT implTypeFlags);HRESULT ( *SetAlignment)(ICreateTypeInfo2 *This, WORD cbAlignment);HRESULT ( *SetSchema)(ICreateTypeInfo2 *This, LPOLESTR pStrSchema);HRESULT ( *AddVarDesc)(ICreateTypeInfo2 *This, UINT index, VARDESC *pVarDesc);HRESULT ( *SetFuncAndParamNames)(ICreateTypeInfo2 *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT ( *SetVarName)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szName);HRESULT ( *SetTypeDescAlias)(ICreateTypeInfo2 *This, TYPEDESC *pTDescAlias);HRESULT ( *DefineFuncAsDllEntry)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT ( *SetFuncDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetVarDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT ( *SetFuncHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetVarHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT ( *SetMops)(ICreateTypeInfo2 *This, UINT index, BSTR bstrMops);HRESULT ( *SetTypeIdldesc)(ICreateTypeInfo2 *This, IDLDESC *pIdlDesc);HRESULT ( *LayOut)(ICreateTypeInfo2 *This);HRESULT ( *DeleteFuncDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteFuncDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind);HRESULT ( *DeleteVarDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *DeleteVarDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid);HRESULT ( *DeleteImplType)(ICreateTypeInfo2 *This, UINT index);HRESULT ( *SetCustData)(ICreateTypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetFuncCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetParamCustData)(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetVarCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetImplTypeCustData)(ICreateTypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *SetHelpStringContext)(ICreateTypeInfo2 *This, ULONG dwHelpStringContext);HRESULT ( *SetFuncHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *SetVarHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT ( *Invalidate)(ICreateTypeInfo2 *This);HRESULT ( *SetName)(ICreateTypeInfo2 *This, LPOLESTR szName);};
struct _Connection15Vtbl {HRESULT ( *QueryInterface)(_Connection15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_Connection15 *This);ULONG ( *Release)(_Connection15 *This);HRESULT ( *GetTypeInfoCount)(_Connection15 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_Connection15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_Connection15 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_Connection15 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_Connection15 *This, ADOProperties **ppvObject);HRESULT ( *get_ConnectionString)(_Connection15 *This, BSTR *pbstr);HRESULT ( *put_ConnectionString)(_Connection15 *This, BSTR bstr);HRESULT ( *get_CommandTimeout)(_Connection15 *This, LONG *plTimeout);HRESULT ( *put_CommandTimeout)(_Connection15 *This, LONG lTimeout);HRESULT ( *get_ConnectionTimeout)(_Connection15 *This, LONG *plTimeout);HRESULT ( *put_ConnectionTimeout)(_Connection15 *This, LONG lTimeout);HRESULT ( *get_Version)(_Connection15 *This, BSTR *pbstr);HRESULT ( *Close)(_Connection15 *This);HRESULT ( *Execute)(_Connection15 *This, BSTR CommandText, VARIANT *RecordsAffected, int Options, _ADORecordset **ppiRset);HRESULT ( *BeginTrans)(_Connection15 *This, int *TransactionLevel);HRESULT ( *CommitTrans)(_Connection15 *This);HRESULT ( *RollbackTrans)(_Connection15 *This);HRESULT ( *Open)(_Connection15 *This, BSTR ConnectionString, BSTR UserID, BSTR Password, int Options);HRESULT ( *get_Errors)(_Connection15 *This, ADOErrors **ppvObject);HRESULT ( *get_DefaultDatabase)(_Connection15 *This, BSTR *pbstr);HRESULT ( *put_DefaultDatabase)(_Connection15 *This, BSTR bstr);HRESULT ( *get_IsolationLevel)(_Connection15 *This, IsolationLevelEnum *Level);HRESULT ( *put_IsolationLevel)(_Connection15 *This, IsolationLevelEnum Level);HRESULT ( *get_Attributes)(_Connection15 *This, int *plAttr);HRESULT ( *put_Attributes)(_Connection15 *This, int lAttr);HRESULT ( *get_CursorLocation)(_Connection15 *This, CursorLocationEnum *plCursorLoc);HRESULT ( *put_CursorLocation)(_Connection15 *This, CursorLocationEnum lCursorLoc);HRESULT ( *get_Mode)(_Connection15 *This, ConnectModeEnum *plMode);HRESULT ( *put_Mode)(_Connection15 *This, ConnectModeEnum lMode);HRESULT ( *get_Provider)(_Connection15 *This, BSTR *pbstr);HRESULT ( *put_Provider)(_Connection15 *This, BSTR Provider);HRESULT ( *get_State)(_Connection15 *This, LONG *plObjState);HRESULT ( *OpenSchema)(_Connection15 *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);};
struct _ConnectionVtbl {HRESULT ( *QueryInterface)(_ADOConnection *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADOConnection *This);ULONG ( *Release)(_ADOConnection *This);HRESULT ( *GetTypeInfoCount)(_ADOConnection *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADOConnection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADOConnection *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADOConnection *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_ADOConnection *This, ADOProperties **ppvObject);HRESULT ( *get_ConnectionString)(_ADOConnection *This, BSTR *pbstr);HRESULT ( *put_ConnectionString)(_ADOConnection *This, BSTR bstr);HRESULT ( *get_CommandTimeout)(_ADOConnection *This, LONG *plTimeout);HRESULT ( *put_CommandTimeout)(_ADOConnection *This, LONG lTimeout);HRESULT ( *get_ConnectionTimeout)(_ADOConnection *This, LONG *plTimeout);HRESULT ( *put_ConnectionTimeout)(_ADOConnection *This, LONG lTimeout);HRESULT ( *get_Version)(_ADOConnection *This, BSTR *pbstr);HRESULT ( *Close)(_ADOConnection *This);HRESULT ( *Execute)(_ADOConnection *This, BSTR CommandText, VARIANT *RecordsAffected, int Options, _ADORecordset **ppiRset);HRESULT ( *BeginTrans)(_ADOConnection *This, int *TransactionLevel);HRESULT ( *CommitTrans)(_ADOConnection *This);HRESULT ( *RollbackTrans)(_ADOConnection *This);HRESULT ( *Open)(_ADOConnection *This, BSTR ConnectionString, BSTR UserID, BSTR Password, int Options);HRESULT ( *get_Errors)(_ADOConnection *This, ADOErrors **ppvObject);HRESULT ( *get_DefaultDatabase)(_ADOConnection *This, BSTR *pbstr);HRESULT ( *put_DefaultDatabase)(_ADOConnection *This, BSTR bstr);HRESULT ( *get_IsolationLevel)(_ADOConnection *This, IsolationLevelEnum *Level);HRESULT ( *put_IsolationLevel)(_ADOConnection *This, IsolationLevelEnum Level);HRESULT ( *get_Attributes)(_ADOConnection *This, int *plAttr);HRESULT ( *put_Attributes)(_ADOConnection *This, int lAttr);HRESULT ( *get_CursorLocation)(_ADOConnection *This, CursorLocationEnum *plCursorLoc);HRESULT ( *put_CursorLocation)(_ADOConnection *This, CursorLocationEnum lCursorLoc);HRESULT ( *get_Mode)(_ADOConnection *This, ConnectModeEnum *plMode);HRESULT ( *put_Mode)(_ADOConnection *This, ConnectModeEnum lMode);HRESULT ( *get_Provider)(_ADOConnection *This, BSTR *pbstr);HRESULT ( *put_Provider)(_ADOConnection *This, BSTR Provider);HRESULT ( *get_State)(_ADOConnection *This, LONG *plObjState);HRESULT ( *OpenSchema)(_ADOConnection *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);HRESULT ( *Cancel)(_ADOConnection *This);};
struct _Command15Vtbl {HRESULT ( *QueryInterface)(_Command15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_Command15 *This);ULONG ( *Release)(_Command15 *This);HRESULT ( *GetTypeInfoCount)(_Command15 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_Command15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_Command15 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_Command15 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_Command15 *This, ADOProperties **ppvObject);HRESULT ( *get_ActiveConnection)(_Command15 *This, _ADOConnection **ppvObject);HRESULT ( *putref_ActiveADOConnection)(_Command15 *This, _ADOConnection *pCon);HRESULT ( *put_ActiveConnection)(_Command15 *This, VARIANT vConn);HRESULT ( *get_CommandText)(_Command15 *This, BSTR *pbstr);HRESULT ( *put_CommandText)(_Command15 *This, BSTR bstr);HRESULT ( *get_CommandTimeout)(_Command15 *This, LONG *pl);HRESULT ( *put_CommandTimeout)(_Command15 *This, LONG Timeout);HRESULT ( *get_Prepared)(_Command15 *This, VARIANT_BOOL *pfPrepared);HRESULT ( *put_Prepared)(_Command15 *This, VARIANT_BOOL fPrepared);HRESULT ( *Execute)(_Command15 *This, VARIANT *RecordsAffected, VARIANT *Parameters, int Options, _ADORecordset **ppirs);HRESULT ( *CreateParameter)(_Command15 *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, int Size, VARIANT Value, _ADOParameter **ppiprm);HRESULT ( *get_Parameters)(_Command15 *This, ADOParameters **ppvObject);HRESULT ( *put_CommandType)(_Command15 *This, CommandTypeEnum lCmdType);HRESULT ( *get_CommandType)(_Command15 *This, CommandTypeEnum *plCmdType);HRESULT ( *get_Name)(_Command15 *This, BSTR *pbstrName);HRESULT ( *put_Name)(_Command15 *This, BSTR bstrName);};
struct _CommandVtbl {HRESULT ( *QueryInterface)(_ADOCommand *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADOCommand *This);ULONG ( *Release)(_ADOCommand *This);HRESULT ( *GetTypeInfoCount)(_ADOCommand *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADOCommand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADOCommand *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADOCommand *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_ADOCommand *This, ADOProperties **ppvObject);HRESULT ( *get_ActiveConnection)(_ADOCommand *This, _ADOConnection **ppvObject);HRESULT ( *putref_ActiveADOConnection)(_ADOCommand *This, _ADOConnection *pCon);HRESULT ( *put_ActiveConnection)(_ADOCommand *This, VARIANT vConn);HRESULT ( *get_CommandText)(_ADOCommand *This, BSTR *pbstr);HRESULT ( *put_CommandText)(_ADOCommand *This, BSTR bstr);HRESULT ( *get_CommandTimeout)(_ADOCommand *This, LONG *pl);HRESULT ( *put_CommandTimeout)(_ADOCommand *This, LONG Timeout);HRESULT ( *get_Prepared)(_ADOCommand *This, VARIANT_BOOL *pfPrepared);HRESULT ( *put_Prepared)(_ADOCommand *This, VARIANT_BOOL fPrepared);HRESULT ( *Execute)(_ADOCommand *This, VARIANT *RecordsAffected, VARIANT *Parameters, int Options, _ADORecordset **ppirs);HRESULT ( *CreateParameter)(_ADOCommand *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, int Size, VARIANT Value, _ADOParameter **ppiprm);HRESULT ( *get_Parameters)(_ADOCommand *This, ADOParameters **ppvObject);HRESULT ( *put_CommandType)(_ADOCommand *This, CommandTypeEnum lCmdType);HRESULT ( *get_CommandType)(_ADOCommand *This, CommandTypeEnum *plCmdType);HRESULT ( *get_Name)(_ADOCommand *This, BSTR *pbstrName);HRESULT ( *put_Name)(_ADOCommand *This, BSTR bstrName);HRESULT ( *get_State)(_ADOCommand *This, LONG *plObjState);HRESULT ( *Cancel)(_ADOCommand *This);};
struct IWebBrowser2Vtbl {HRESULT ( *QueryInterface)(IWebBrowser2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IWebBrowser2 *This);ULONG ( *Release)(IWebBrowser2 *This);HRESULT ( *GetTypeInfoCount)(IWebBrowser2 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(IWebBrowser2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(IWebBrowser2 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(IWebBrowser2 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GoBack)(IWebBrowser2 *This);HRESULT ( *GoForward)(IWebBrowser2 *This);HRESULT ( *GoHome)(IWebBrowser2 *This);HRESULT ( *GoSearch)(IWebBrowser2 *This);HRESULT ( *Navigate)(IWebBrowser2 *This, BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *Refresh)(IWebBrowser2 *This);HRESULT ( *Refresh2)(IWebBrowser2 *This, VARIANT *Level);HRESULT ( *Stop)(IWebBrowser2 *This);HRESULT ( *get_Application)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Parent)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Container)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_Document)(IWebBrowser2 *This, IDispatch **ppDisp);HRESULT ( *get_TopLevelContainer)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *get_Type)(IWebBrowser2 *This, BSTR *Type);HRESULT ( *get_Left)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Left)(IWebBrowser2 *This, int Left);HRESULT ( *get_Top)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Top)(IWebBrowser2 *This, int Top);HRESULT ( *get_Width)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Width)(IWebBrowser2 *This, int Width);HRESULT ( *get_Height)(IWebBrowser2 *This, int *pl);HRESULT ( *put_Height)(IWebBrowser2 *This, int Height);HRESULT ( *get_LocationName)(IWebBrowser2 *This, BSTR *LocationName);HRESULT ( *get_LocationURL)(IWebBrowser2 *This, BSTR *LocationURL);HRESULT ( *get_Busy)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *Quit)(IWebBrowser2 *This);HRESULT ( *ClientToWindow)(IWebBrowser2 *This, int *pcx, int *pcy);HRESULT ( *PutProperty)(IWebBrowser2 *This, BSTR Property, VARIANT vtValue);HRESULT ( *GetProperty)(IWebBrowser2 *This, BSTR Property, VARIANT *pvtValue);HRESULT ( *get_Name)(IWebBrowser2 *This, BSTR *Name);HRESULT ( *get_HWND)(IWebBrowser2 *This, int *pHWND);HRESULT ( *get_FullName)(IWebBrowser2 *This, BSTR *FullName);HRESULT ( *get_Path)(IWebBrowser2 *This, BSTR *Path);HRESULT ( *get_Visible)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_Visible)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL *pBool);HRESULT ( *put_StatusBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_StatusText)(IWebBrowser2 *This, BSTR *StatusText);HRESULT ( *put_StatusText)(IWebBrowser2 *This, BSTR StatusText);HRESULT ( *get_ToolBar)(IWebBrowser2 *This, int *Value);HRESULT ( *put_ToolBar)(IWebBrowser2 *This, int Value);HRESULT ( *get_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_MenuBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL *pbFullScreen);HRESULT ( *put_FullScreen)(IWebBrowser2 *This, VARIANT_BOOL bFullScreen);HRESULT ( *Navigate2)(IWebBrowser2 *This, VARIANT *URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers);HRESULT ( *QueryStatusWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDF *pcmdf);HRESULT ( *ExecWB)(IWebBrowser2 *This, OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut);HRESULT ( *ShowBrowserBar)(IWebBrowser2 *This, VARIANT *pvaClsid, VARIANT *pvarShow, VARIANT *pvarSize);HRESULT ( *get_ReadyState)(IWebBrowser2 *This, READYSTATE *plReadyState);HRESULT ( *get_Offline)(IWebBrowser2 *This, VARIANT_BOOL *pbOffline);HRESULT ( *put_Offline)(IWebBrowser2 *This, VARIANT_BOOL bOffline);HRESULT ( *get_Silent)(IWebBrowser2 *This, VARIANT_BOOL *pbSilent);HRESULT ( *put_Silent)(IWebBrowser2 *This, VARIANT_BOOL bSilent);HRESULT ( *get_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsBrowser)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_RegisterAsDropTarget)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL *pbRegister);HRESULT ( *put_TheaterMode)(IWebBrowser2 *This, VARIANT_BOOL bRegister);HRESULT ( *get_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_AddressBar)(IWebBrowser2 *This, VARIANT_BOOL Value);HRESULT ( *get_Resizable)(IWebBrowser2 *This, VARIANT_BOOL *Value);HRESULT ( *put_Resizable)(IWebBrowser2 *This, VARIANT_BOOL Value);};
struct ITypeInfoVtbl {HRESULT ( *QueryInterface)(ITypeInfo *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo *This);ULONG ( *Release)(ITypeInfo *This);HRESULT ( *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);};
struct IShellBrowserVtbl {HRESULT ( *QueryInterface)(IShellBrowser *This,  IID * riid, LPVOID *ppvObj);ULONG ( *AddRef)(IShellBrowser *This);ULONG ( *Release)(IShellBrowser *This);HRESULT ( *GetWindow)(IShellBrowser *This, HWND *lphwnd);HRESULT ( *ContextSensitiveHelp)(IShellBrowser *This, BOOL fEnterMode);HRESULT ( *InsertMenusSB)(IShellBrowser *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT ( *SetMenuSB)(IShellBrowser *This, HMENU hmenuShared, HOLEMENU holemenuReserved, HWND hwndActiveObject);HRESULT ( *RemoveMenusSB)(IShellBrowser *This, HMENU hmenuShared);HRESULT ( *SetStatusTextSB)(IShellBrowser *This, LPCOLESTR lpszStatusText);HRESULT ( *EnableModelessSB)(IShellBrowser *This, BOOL fEnable);HRESULT ( *TranslateAcceleratorSB)(IShellBrowser *This, LPMSG lpmsg, WORD wID);HRESULT ( *BrowseObject)(IShellBrowser *This, LPCITEMIDLIST pidl, UINT wFlags);HRESULT ( *GetViewStateStream)(IShellBrowser *This, DWORD grfMode, LPSTREAM *ppStrm);HRESULT ( *GetControlWindow)(IShellBrowser *This, UINT id, HWND *lphwnd);HRESULT ( *SendControlMsg)(IShellBrowser *This, UINT id, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pret);HRESULT ( *QueryActiveShellView)(IShellBrowser *This, struct IShellView **ppshv);HRESULT ( *OnViewWindowActive)(IShellBrowser *This, struct IShellView *ppshv);HRESULT ( *SetToolbarItems)(IShellBrowser *This, LPTBBUTTON lpButtons, UINT nButtons, UINT uFlags);};
struct ITypeInfo2Vtbl {HRESULT ( *QueryInterface)(ITypeInfo2 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(ITypeInfo2 *This);ULONG ( *Release)(ITypeInfo2 *This);HRESULT ( *GetTypeAttr)(ITypeInfo2 *This, TYPEATTR **ppTypeAttr);HRESULT ( *GetTypeComp)(ITypeInfo2 *This, ITypeComp **ppTComp);HRESULT ( *GetFuncDesc)(ITypeInfo2 *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT ( *GetVarDesc)(ITypeInfo2 *This, UINT index, VARDESC **ppVarDesc);HRESULT ( *GetNames)(ITypeInfo2 *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT ( *GetRefTypeOfImplType)(ITypeInfo2 *This, UINT index, HREFTYPE *pRefType);HRESULT ( *GetImplTypeFlags)(ITypeInfo2 *This, UINT index, INT *pImplTypeFlags);HRESULT ( *GetIDsOfNames)(ITypeInfo2 *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT ( *Invoke)(ITypeInfo2 *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *GetDocumentation)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT ( *GetDllEntry)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT ( *GetRefTypeInfo)(ITypeInfo2 *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT ( *AddressOfMember)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT ( *CreateInstance)(ITypeInfo2 *This, IUnknown *pUnkOuter,  IID * riid, PVOID *ppvObj);HRESULT ( *GetMops)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrMops);HRESULT ( *GetContainingTypeLib)(ITypeInfo2 *This, ITypeLib **ppTLib, UINT *pIndex);void ( *ReleaseTypeAttr)(ITypeInfo2 *This, TYPEATTR *pTypeAttr);void ( *ReleaseFuncDesc)(ITypeInfo2 *This, FUNCDESC *pFuncDesc);void ( *ReleaseVarDesc)(ITypeInfo2 *This, VARDESC *pVarDesc);HRESULT ( *GetTypeKind)(ITypeInfo2 *This, TYPEKIND *pTypeKind);HRESULT ( *GetTypeFlags)(ITypeInfo2 *This, ULONG *pTypeFlags);HRESULT ( *GetFuncIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);HRESULT ( *GetVarIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex);HRESULT ( *GetCustData)(ITypeInfo2 *This,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetFuncCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetVarCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetImplTypeCustData)(ITypeInfo2 *This, UINT index,  GUID * guid, VARIANT *pVarVal);HRESULT ( *GetDocumentation2)(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT ( *GetAllCustData)(ITypeInfo2 *This, CUSTDATA *pCustData);HRESULT ( *GetAllFuncCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);HRESULT ( *GetAllVarCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT ( *GetAllImplTypeCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);};
struct _Recordset15Vtbl {HRESULT ( *QueryInterface)(_Recordset15 *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_Recordset15 *This);ULONG ( *Release)(_Recordset15 *This);HRESULT ( *GetTypeInfoCount)(_Recordset15 *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_Recordset15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_Recordset15 *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_Recordset15 *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_Recordset15 *This, ADOProperties **ppvObject);HRESULT ( *get_AbsolutePosition)(_Recordset15 *This, PositionEnum *pl);HRESULT ( *put_AbsolutePosition)(_Recordset15 *This, PositionEnum Position);HRESULT ( *putref_ActiveADOConnection)(_Recordset15 *This, IDispatch *pconn);HRESULT ( *put_ActiveConnection)(_Recordset15 *This, VARIANT vConn);HRESULT ( *get_ActiveConnection)(_Recordset15 *This, VARIANT *pvar);HRESULT ( *get_BOF)(_Recordset15 *This, VARIANT_BOOL *pb);HRESULT ( *get_Bookmark)(_Recordset15 *This, VARIANT *pvBookmark);HRESULT ( *put_Bookmark)(_Recordset15 *This, VARIANT vBookmark);HRESULT ( *get_CacheSize)(_Recordset15 *This, int *pl);HRESULT ( *put_CacheSize)(_Recordset15 *This, int CacheSize);HRESULT ( *get_CursorType)(_Recordset15 *This, CursorTypeEnum *plCursorType);HRESULT ( *put_CursorType)(_Recordset15 *This, CursorTypeEnum lCursorType);HRESULT ( *get_EOF)(_Recordset15 *This, VARIANT_BOOL *pb);HRESULT ( *get_Fields)(_Recordset15 *This, ADOFields **ppvObject);HRESULT ( *get_LockType)(_Recordset15 *This, LockTypeEnum *plLockType);HRESULT ( *put_LockType)(_Recordset15 *This, LockTypeEnum lLockType);HRESULT ( *get_MaxRecords)(_Recordset15 *This, int *plMaxRecords);HRESULT ( *put_MaxRecords)(_Recordset15 *This, int lMaxRecords);HRESULT ( *get_RecordCount)(_Recordset15 *This, int *pl);HRESULT ( *putref_Source)(_Recordset15 *This, IDispatch *pcmd);HRESULT ( *put_Source)(_Recordset15 *This, BSTR bstrConn);HRESULT ( *get_Source)(_Recordset15 *This, VARIANT *pvSource);HRESULT ( *AddNew)(_Recordset15 *This, VARIANT FieldList, VARIANT Values);HRESULT ( *CancelUpdate)(_Recordset15 *This);HRESULT ( *Close)(_Recordset15 *This);HRESULT ( *Delete)(_Recordset15 *This, AffectEnum AffectRecords);HRESULT ( *GetRows)(_Recordset15 *This, int Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);HRESULT ( *Move)(_Recordset15 *This, int NumRecords, VARIANT Start);HRESULT ( *MoveNext)(_Recordset15 *This);HRESULT ( *MovePrevious)(_Recordset15 *This);HRESULT ( *MoveFirst)(_Recordset15 *This);HRESULT ( *MoveLast)(_Recordset15 *This);HRESULT ( *Open)(_Recordset15 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);HRESULT ( *Requery)(_Recordset15 *This, LONG Options);HRESULT ( *_xResync)(_Recordset15 *This, AffectEnum AffectRecords);HRESULT ( *Update)(_Recordset15 *This, VARIANT Fields, VARIANT Values);HRESULT ( *get_AbsolutePage)(_Recordset15 *This, PositionEnum *pl);HRESULT ( *put_AbsolutePage)(_Recordset15 *This, PositionEnum Page);HRESULT ( *get_EditMode)(_Recordset15 *This, EditModeEnum *pl);HRESULT ( *get_Filter)(_Recordset15 *This, VARIANT *Criteria);HRESULT ( *put_Filter)(_Recordset15 *This, VARIANT Criteria);HRESULT ( *get_PageCount)(_Recordset15 *This, int *pl);HRESULT ( *get_PageSize)(_Recordset15 *This, int *pl);HRESULT ( *put_PageSize)(_Recordset15 *This, int PageSize);HRESULT ( *get_Sort)(_Recordset15 *This, BSTR *Criteria);HRESULT ( *put_Sort)(_Recordset15 *This, BSTR Criteria);HRESULT ( *get_Status)(_Recordset15 *This, int *pl);HRESULT ( *get_State)(_Recordset15 *This, LONG *plObjState);HRESULT ( *_xClone)(_Recordset15 *This, _ADORecordset **ppvObject);HRESULT ( *UpdateBatch)(_Recordset15 *This, AffectEnum AffectRecords);HRESULT ( *CancelBatch)(_Recordset15 *This, AffectEnum AffectRecords);HRESULT ( *get_CursorLocation)(_Recordset15 *This, CursorLocationEnum *plCursorLoc);HRESULT ( *put_CursorLocation)(_Recordset15 *This, CursorLocationEnum lCursorLoc);HRESULT ( *NextADORecordset)(_Recordset15 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);HRESULT ( *Supports)(_Recordset15 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);HRESULT ( *get_Collect)(_Recordset15 *This, VARIANT Index, VARIANT *pvar);HRESULT ( *put_Collect)(_Recordset15 *This, VARIANT Index, VARIANT value);HRESULT ( *get_MarshalOptions)(_Recordset15 *This, MarshalOptionsEnum *peMarshal);HRESULT ( *put_MarshalOptions)(_Recordset15 *This, MarshalOptionsEnum eMarshal);HRESULT ( *Find)(_Recordset15 *This, BSTR Criteria, LONG SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);};
union tagDBCOMMANDTREE___23A2F42342E34259C4EB96A74BF3859B {BOOL fValue;unsigned char uchValue;signed char schValue;unsigned short usValue;short sValue;LPOLESTR pwszValue;LONG lValue;ULONG ulValue;float flValue;double dblValue;CY cyValue;DATE dateValue;DBDATE dbdateValue;DBTIME dbtimeValue;SCODE scodeValue;long long llValue;unsigned long long ullValue;BSTR *pbstrValue;ICommand *pCommand;IDispatch *pDispatch;IMoniker *pMoniker;IRowset *pRowset;IUnknown *pUnknown;DBBYGUID *pdbbygdValue;DBCOLUMNDESC *pcoldescValue;DBID *pdbidValue;DBLIKE *pdblikeValue;DBCONTENT *pdbcntntValue;DBCONTENTVECTOR *pdbcntntvcValue;DBCONTENTPROXIMITY *pdbcntntproxValue;DBGROUPINFO *pdbgrpinfValue;DBPARAMETER *pdbparamValue;DBPROPSET *pdbpropValue;DBSETFUNC *pdbstfncValue;DBSORTINFO *pdbsrtinfValue;DBTEXT *pdbtxtValue;DBVECTOR *pdbvectorValue;SAFEARRAY *parrayValue;VARIANT *pvarValue;GUID *pGuid;BYTE *pbValue;char *pzValue;DB_NUMERIC *pdbnValue;DBTIMESTAMP *pdbtsValue;void *pvValue;};
struct _RecordsetVtbl {HRESULT ( *QueryInterface)(_ADORecordset *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(_ADORecordset *This);ULONG ( *Release)(_ADORecordset *This);HRESULT ( *GetTypeInfoCount)(_ADORecordset *This, UINT *pctinfo);HRESULT ( *GetTypeInfo)(_ADORecordset *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT ( *GetIDsOfNames)(_ADORecordset *This,  IID * riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT ( *Invoke)(_ADORecordset *This, DISPID dispIdMember,  IID * riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT ( *get_Properties)(_ADORecordset *This, ADOProperties **ppvObject);HRESULT ( *get_AbsolutePosition)(_ADORecordset *This, PositionEnum *pl);HRESULT ( *put_AbsolutePosition)(_ADORecordset *This, PositionEnum Position);HRESULT ( *putref_ActiveADOConnection)(_ADORecordset *This, IDispatch *pconn);HRESULT ( *put_ActiveConnection)(_ADORecordset *This, VARIANT vConn);HRESULT ( *get_ActiveConnection)(_ADORecordset *This, VARIANT *pvar);HRESULT ( *get_BOF)(_ADORecordset *This, VARIANT_BOOL *pb);HRESULT ( *get_Bookmark)(_ADORecordset *This, VARIANT *pvBookmark);HRESULT ( *put_Bookmark)(_ADORecordset *This, VARIANT vBookmark);HRESULT ( *get_CacheSize)(_ADORecordset *This, int *pl);HRESULT ( *put_CacheSize)(_ADORecordset *This, int CacheSize);HRESULT ( *get_CursorType)(_ADORecordset *This, CursorTypeEnum *plCursorType);HRESULT ( *put_CursorType)(_ADORecordset *This, CursorTypeEnum lCursorType);HRESULT ( *get_EOF)(_ADORecordset *This, VARIANT_BOOL *pb);HRESULT ( *get_Fields)(_ADORecordset *This, ADOFields **ppvObject);HRESULT ( *get_LockType)(_ADORecordset *This, LockTypeEnum *plLockType);HRESULT ( *put_LockType)(_ADORecordset *This, LockTypeEnum lLockType);HRESULT ( *get_MaxRecords)(_ADORecordset *This, int *plMaxRecords);HRESULT ( *put_MaxRecords)(_ADORecordset *This, int lMaxRecords);HRESULT ( *get_RecordCount)(_ADORecordset *This, int *pl);HRESULT ( *putref_Source)(_ADORecordset *This, IDispatch *pcmd);HRESULT ( *put_Source)(_ADORecordset *This, BSTR bstrConn);HRESULT ( *get_Source)(_ADORecordset *This, VARIANT *pvSource);HRESULT ( *AddNew)(_ADORecordset *This, VARIANT FieldList, VARIANT Values);HRESULT ( *CancelUpdate)(_ADORecordset *This);HRESULT ( *Close)(_ADORecordset *This);HRESULT ( *Delete)(_ADORecordset *This, AffectEnum AffectRecords);HRESULT ( *GetRows)(_ADORecordset *This, int Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);HRESULT ( *Move)(_ADORecordset *This, int NumRecords, VARIANT Start);HRESULT ( *MoveNext)(_ADORecordset *This);HRESULT ( *MovePrevious)(_ADORecordset *This);HRESULT ( *MoveFirst)(_ADORecordset *This);HRESULT ( *MoveLast)(_ADORecordset *This);HRESULT ( *Open)(_ADORecordset *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);HRESULT ( *Requery)(_ADORecordset *This, LONG Options);HRESULT ( *_xResync)(_ADORecordset *This, AffectEnum AffectRecords);HRESULT ( *Update)(_ADORecordset *This, VARIANT Fields, VARIANT Values);HRESULT ( *get_AbsolutePage)(_ADORecordset *This, PositionEnum *pl);HRESULT ( *put_AbsolutePage)(_ADORecordset *This, PositionEnum Page);HRESULT ( *get_EditMode)(_ADORecordset *This, EditModeEnum *pl);HRESULT ( *get_Filter)(_ADORecordset *This, VARIANT *Criteria);HRESULT ( *put_Filter)(_ADORecordset *This, VARIANT Criteria);HRESULT ( *get_PageCount)(_ADORecordset *This, int *pl);HRESULT ( *get_PageSize)(_ADORecordset *This, int *pl);HRESULT ( *put_PageSize)(_ADORecordset *This, int PageSize);HRESULT ( *get_Sort)(_ADORecordset *This, BSTR *Criteria);HRESULT ( *put_Sort)(_ADORecordset *This, BSTR Criteria);HRESULT ( *get_Status)(_ADORecordset *This, int *pl);HRESULT ( *get_State)(_ADORecordset *This, LONG *plObjState);HRESULT ( *_xClone)(_ADORecordset *This, _ADORecordset **ppvObject);HRESULT ( *UpdateBatch)(_ADORecordset *This, AffectEnum AffectRecords);HRESULT ( *CancelBatch)(_ADORecordset *This, AffectEnum AffectRecords);HRESULT ( *get_CursorLocation)(_ADORecordset *This, CursorLocationEnum *plCursorLoc);HRESULT ( *put_CursorLocation)(_ADORecordset *This, CursorLocationEnum lCursorLoc);HRESULT ( *NextADORecordset)(_ADORecordset *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);HRESULT ( *Supports)(_ADORecordset *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);HRESULT ( *get_Collect)(_ADORecordset *This, VARIANT Index, VARIANT *pvar);HRESULT ( *put_Collect)(_ADORecordset *This, VARIANT Index, VARIANT value);HRESULT ( *get_MarshalOptions)(_ADORecordset *This, MarshalOptionsEnum *peMarshal);HRESULT ( *put_MarshalOptions)(_ADORecordset *This, MarshalOptionsEnum eMarshal);HRESULT ( *Find)(_ADORecordset *This, BSTR Criteria, LONG SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);HRESULT ( *Cancel)(_ADORecordset *This);HRESULT ( *get_DataSource)(_ADORecordset *This, IUnknown **ppunkDataSource);HRESULT ( *putref_DataSource)(_ADORecordset *This, IUnknown *punkDataSource);HRESULT ( *Save)(_ADORecordset *This, BSTR FileName, PersistFormatEnum PersistFormat);HRESULT ( *get_ActiveCommand)(_ADORecordset *This, IDispatch **ppCmd);HRESULT ( *put_StayInSync)(_ADORecordset *This, VARIANT_BOOL bStayInSync);HRESULT ( *get_StayInSync)(_ADORecordset *This, VARIANT_BOOL *pbStayInSync);HRESULT ( *GetString)(_ADORecordset *This, StringFormatEnum StringFormat, int NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);HRESULT ( *get_DataMember)(_ADORecordset *This, BSTR *pbstrDataMember);HRESULT ( *put_DataMember)(_ADORecordset *This, BSTR bstrDataMember);HRESULT ( *CompareBookmarks)(_ADORecordset *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);HRESULT ( *Clone)(_ADORecordset *This, LockTypeEnum LockType, _ADORecordset **ppvObject);HRESULT ( *Resync)(_ADORecordset *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);};
struct _5D5BF4B99560B17B9B110B9D66DCBC97 {LPOLESTR pszKey;LPOLESTR pszValue;};
struct _PUBLISHEDAPPINFO {LPOLESTR pwszFileExtension;LPOLESTR pwszDisplayName;LPOLESTR pwszPackagePath;};
typedef LPOLESTR JAVA_STRING;
typedef LPCOLESTR constSRESID;
union tagVARIANT___CFEED276C078973BD7512520F6B5AF6E {tagVARIANT___CFEED276C078973BD7512520F6B5AF6E___2E851DBA257FA738680F86C475CAC6EB __anonymous0;DECIMAL decVal;};
struct __MIDL___MIDL_itf_wtypes_0001_0001 {DWORD tyspec;union __MIDL___MIDL_itf_wtypes_0001_0001____MIDL___MIDL_itf_wtypes_0001_0003 tagged_union;};
struct _userSTGMEDIUM___STGMEDIUM_UNION {DWORD tymed;union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 u;};
struct CLUSPROP_PARTITION_INFO {CLUSPROP_RESOURCE_CLASS __anonymous0;CLUS_PARTITION_INFO __anonymous6;};
struct CLUSPROP_FTSET_INFO {CLUSPROP_PARTITION_INFO __anonymous0;CLUS_FTSET_INFO __anonymous7;};
struct CLUSPROP_DWORD {CLUSPROP_FTSET_INFO __anonymous0;DWORD dw;};
struct tagSTGMEDIUM {DWORD tymed;tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB __anonymous0;IUnknown *pUnkForRelease;};
struct _adsvalue {ADSTYPE dwType;_adsvalue___BA98B216490F4398E51052A67E18CE1F __anonymous0;};
struct _RPC_ASYNC_STATE {unsigned int Size;unsigned int Signature;int Lock;unsigned int Flags;void *StubInfo;void *UserInfo;void *RuntimeInfo;RPC_ASYNC_EVENT Event;RPC_NOTIFICATION_TYPES NotificationType;union _RPC_ASYNC_STATE___117D5062C4078C99F7C02FAB5CA2DDFA u;int Reserved[4];};
struct tagDBCOMMANDTREE {DBCOMMANDOP op;WORD wKind;struct tagDBCOMMANDTREE *pctFirstChild;struct tagDBCOMMANDTREE *pctNextSibling;union tagDBCOMMANDTREE___23A2F42342E34259C4EB96A74BF3859B value;HRESULT hrError;};
struct IHolderVtbl {HRESULT ( *QueryInterface)(IHolder *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IHolder *This);ULONG ( *Release)(IHolder *This);HRESULT ( *AllocResource)(IHolder *This,  RESTYPID MIDL_0019, RESID *MIDL_0020);HRESULT ( *FreeResource)(IHolder *This,  RESID MIDL_0021);HRESULT ( *TrackResource)(IHolder *This,  RESID MIDL_0022);HRESULT ( *TrackResourceS)(IHolder *This, constSRESID MIDL_0023);HRESULT ( *UntrackResource)(IHolder *This,  RESID MIDL_0024,  BOOL MIDL_0025);HRESULT ( *UntrackResourceS)(IHolder *This, constSRESID MIDL_0026,  BOOL MIDL_0027);HRESULT ( *Close)(IHolder *This);HRESULT ( *RequestDestroyResource)(IHolder *This,  RESID MIDL_0028);};
struct IDispenserDriverVtbl {HRESULT ( *QueryInterface)(IDispenserDriver *This,  IID * riid, void **ppvObject);ULONG ( *AddRef)(IDispenserDriver *This);ULONG ( *Release)(IDispenserDriver *This);HRESULT ( *CreateResource)(IDispenserDriver *This,  RESTYPID ResTypId, RESID *pResId, TIMEINSECS *pSecsFreeBeforeDestroy);HRESULT ( *RateResource)(IDispenserDriver *This,  RESTYPID ResTypId,  RESID ResId,  BOOL fRequiresTransactionEnlistment, RESOURCERATING *pRating);HRESULT ( *EnlistResource)(IDispenserDriver *This,  RESID ResId,  TRANSID TransId);HRESULT ( *ResetResource)(IDispenserDriver *This,  RESID ResId);HRESULT ( *DestroyResource)(IDispenserDriver *This,  RESID ResId);HRESULT ( *DestroyResourceS)(IDispenserDriver *This, constSRESID ResId);};
struct tagVARIANT {tagVARIANT___CFEED276C078973BD7512520F6B5AF6E __anonymous0;};
struct CLUSPROP_BINARY {CLUSPROP_DWORD __anonymous0;BYTE rgb[];};



/// #endif ===true


